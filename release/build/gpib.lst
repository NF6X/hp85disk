
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001646  00800100  0001ccb2  0001cd46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ccb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a60  00801746  00801746  0001e38c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e38c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e3a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016d8  00000000  00000000  0001e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000285db  00000000  00000000  0001fab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000608c  00000000  00000000  00048093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012141  00000000  00000000  0004e11f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005098  00000000  00000000  00060260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047f3  00000000  00000000  000652f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023cd3  00000000  00000000  00069aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016d8  00000000  00000000  0008d7be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 23 	jmp	0x472c	; 0x472c <__ctors_end>
       4:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
       8:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
       c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      10:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      14:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      18:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      1c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      20:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      24:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      28:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      2c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      30:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      34:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__vector_13>
      38:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      3c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      40:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      44:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      48:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      4c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      50:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__vector_20>
      54:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      58:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      5c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      60:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      64:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      68:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__vector_26>
      6c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      70:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      74:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      78:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      7c:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      80:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      84:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      88:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__bad_interrupt>
      8c:	74 41       	sbci	r23, 0x14	; 20
      8e:	c4 42       	sbci	r28, 0x24	; 36
      90:	ac 41       	sbci	r26, 0x1C	; 28
      92:	97 42       	sbci	r25, 0x27	; 39
      94:	97 42       	sbci	r25, 0x27	; 39
      96:	c4 42       	sbci	r28, 0x24	; 36
      98:	c4 42       	sbci	r28, 0x24	; 36
      9a:	c4 42       	sbci	r28, 0x24	; 36
      9c:	c4 42       	sbci	r28, 0x24	; 36
      9e:	c4 42       	sbci	r28, 0x24	; 36
      a0:	c4 42       	sbci	r28, 0x24	; 36
      a2:	c4 42       	sbci	r28, 0x24	; 36
      a4:	c4 42       	sbci	r28, 0x24	; 36
      a6:	74 41       	sbci	r23, 0x14	; 20
      a8:	71 41       	sbci	r23, 0x11	; 17
      aa:	c4 42       	sbci	r28, 0x24	; 36
      ac:	c4 42       	sbci	r28, 0x24	; 36
      ae:	ba 42       	sbci	r27, 0x2A	; 42
      b0:	c4 42       	sbci	r28, 0x24	; 36
      b2:	a6 41       	sbci	r26, 0x16	; 22
      b4:	c4 42       	sbci	r28, 0x24	; 36
      b6:	c4 42       	sbci	r28, 0x24	; 36
      b8:	74 41       	sbci	r23, 0x14	; 20
      ba:	c4 42       	sbci	r28, 0x24	; 36
      bc:	c4 42       	sbci	r28, 0x24	; 36
      be:	c4 42       	sbci	r28, 0x24	; 36
      c0:	c4 42       	sbci	r28, 0x24	; 36
      c2:	c4 42       	sbci	r28, 0x24	; 36
      c4:	c4 42       	sbci	r28, 0x24	; 36
      c6:	c4 42       	sbci	r28, 0x24	; 36
      c8:	c4 42       	sbci	r28, 0x24	; 36
      ca:	c4 42       	sbci	r28, 0x24	; 36
      cc:	74 41       	sbci	r23, 0x14	; 20
      ce:	bf 42       	sbci	r27, 0x2F	; 47
      d0:	ac 41       	sbci	r26, 0x1C	; 28
      d2:	97 42       	sbci	r25, 0x27	; 39
      d4:	97 42       	sbci	r25, 0x27	; 39
      d6:	c4 42       	sbci	r28, 0x24	; 36
      d8:	c4 42       	sbci	r28, 0x24	; 36
      da:	c4 42       	sbci	r28, 0x24	; 36
      dc:	c4 42       	sbci	r28, 0x24	; 36
      de:	c4 42       	sbci	r28, 0x24	; 36
      e0:	c4 42       	sbci	r28, 0x24	; 36
      e2:	c4 42       	sbci	r28, 0x24	; 36
      e4:	c4 42       	sbci	r28, 0x24	; 36
      e6:	74 41       	sbci	r23, 0x14	; 20
      e8:	71 41       	sbci	r23, 0x11	; 17
      ea:	c4 42       	sbci	r28, 0x24	; 36
      ec:	c4 42       	sbci	r28, 0x24	; 36
      ee:	b5 42       	sbci	r27, 0x25	; 37
      f0:	c4 42       	sbci	r28, 0x24	; 36
      f2:	a6 41       	sbci	r26, 0x16	; 22
      f4:	c4 42       	sbci	r28, 0x24	; 36
      f6:	c4 42       	sbci	r28, 0x24	; 36
      f8:	74 41       	sbci	r23, 0x14	; 20
      fa:	e9 42       	sbci	r30, 0x29	; 41
      fc:	2a 44       	sbci	r18, 0x4A	; 74
      fe:	dc 42       	sbci	r29, 0x2C	; 44
     100:	44 43       	sbci	r20, 0x34	; 52
     102:	28 43       	sbci	r18, 0x38	; 56
     104:	2a 44       	sbci	r18, 0x4A	; 74
     106:	2a 44       	sbci	r18, 0x4A	; 74
     108:	2a 44       	sbci	r18, 0x4A	; 74
     10a:	2a 44       	sbci	r18, 0x4A	; 74
     10c:	2a 44       	sbci	r18, 0x4A	; 74
     10e:	2a 44       	sbci	r18, 0x4A	; 74
     110:	2a 44       	sbci	r18, 0x4A	; 74
     112:	2a 44       	sbci	r18, 0x4A	; 74
     114:	f6 42       	sbci	r31, 0x26	; 38
     116:	0a 43       	sbci	r16, 0x3A	; 58
     118:	2a 44       	sbci	r18, 0x4A	; 74
     11a:	2a 44       	sbci	r18, 0x4A	; 74
     11c:	d0 43       	sbci	r29, 0x30	; 48
     11e:	2a 44       	sbci	r18, 0x4A	; 74
     120:	d8 42       	sbci	r29, 0x28	; 40
     122:	2a 44       	sbci	r18, 0x4A	; 74
     124:	2a 44       	sbci	r18, 0x4A	; 74
     126:	0a 43       	sbci	r16, 0x3A	; 58
     128:	2a 44       	sbci	r18, 0x4A	; 74
     12a:	2a 44       	sbci	r18, 0x4A	; 74
     12c:	2a 44       	sbci	r18, 0x4A	; 74
     12e:	2a 44       	sbci	r18, 0x4A	; 74
     130:	2a 44       	sbci	r18, 0x4A	; 74
     132:	2a 44       	sbci	r18, 0x4A	; 74
     134:	2a 44       	sbci	r18, 0x4A	; 74
     136:	2a 44       	sbci	r18, 0x4A	; 74
     138:	2a 44       	sbci	r18, 0x4A	; 74
     13a:	e9 42       	sbci	r30, 0x29	; 41
     13c:	78 43       	sbci	r23, 0x38	; 56
     13e:	dc 42       	sbci	r29, 0x2C	; 44
     140:	44 43       	sbci	r20, 0x34	; 52
     142:	28 43       	sbci	r18, 0x38	; 56
     144:	2a 44       	sbci	r18, 0x4A	; 74
     146:	2a 44       	sbci	r18, 0x4A	; 74
     148:	2a 44       	sbci	r18, 0x4A	; 74
     14a:	2a 44       	sbci	r18, 0x4A	; 74
     14c:	2a 44       	sbci	r18, 0x4A	; 74
     14e:	2a 44       	sbci	r18, 0x4A	; 74
     150:	2a 44       	sbci	r18, 0x4A	; 74
     152:	2a 44       	sbci	r18, 0x4A	; 74
     154:	f6 42       	sbci	r31, 0x26	; 38
     156:	0a 43       	sbci	r16, 0x3A	; 58
     158:	2a 44       	sbci	r18, 0x4A	; 74
     15a:	2a 44       	sbci	r18, 0x4A	; 74
     15c:	78 43       	sbci	r23, 0x38	; 56
     15e:	2a 44       	sbci	r18, 0x4A	; 74
     160:	d8 42       	sbci	r29, 0x28	; 40
     162:	2a 44       	sbci	r18, 0x4A	; 74
     164:	2a 44       	sbci	r18, 0x4A	; 74
     166:	0a 43       	sbci	r16, 0x3A	; 58
     168:	39 68       	ori	r19, 0x89	; 137
     16a:	43 68       	ori	r20, 0x83	; 131
     16c:	4b 68       	ori	r20, 0x8B	; 139
     16e:	4e 68       	ori	r20, 0x8E	; 142
     170:	51 68       	ori	r21, 0x81	; 129
     172:	54 68       	ori	r21, 0x84	; 132
     174:	57 68       	ori	r21, 0x87	; 135
     176:	5a 68       	ori	r21, 0x8A	; 138
     178:	5d 68       	ori	r21, 0x8D	; 141
     17a:	09 86       	std	Y+9, r0	; 0x09
     17c:	12 86       	std	Z+10, r1	; 0x0a
     17e:	43 86       	std	Z+11, r4	; 0x0b
     180:	5c 86       	std	Y+12, r5	; 0x0c
     182:	78 86       	std	Y+8, r7	; 0x08
     184:	85 86       	std	Z+13, r8	; 0x0d
     186:	a1 86       	std	Z+9, r10	; 0x09
     188:	cb 86       	std	Y+11, r12	; 0x0b
     18a:	ae 86       	std	Y+14, r10	; 0x0e
     18c:	e5 9a       	sbi	0x1c, 5	; 28
     18e:	b7 9b       	sbis	0x16, 7	; 22
     190:	f3 9b       	sbis	0x1e, 3	; 30
     192:	22 9c       	mul	r2, r2
     194:	32 9c       	mul	r3, r2
     196:	4f 9c       	mul	r4, r15
     198:	af 9c       	mul	r10, r15
     19a:	be 9d       	mul	r27, r14
     19c:	be 9d       	mul	r27, r14
     19e:	be 9d       	mul	r27, r14
     1a0:	e3 9c       	mul	r14, r3
     1a2:	0f 9d       	mul	r16, r15
     1a4:	5d 9d       	mul	r21, r13
     1a6:	79 9d       	mul	r23, r9
     1a8:	82 9b       	sbis	0x10, 2	; 16
     1aa:	95 9b       	sbis	0x12, 5	; 18
     1ac:	44 ba       	out	0x14, r4	; 20
     1ae:	03 ba       	out	0x13, r0	; 19
     1b0:	03 ba       	out	0x13, r0	; 19
     1b2:	03 ba       	out	0x13, r0	; 19
     1b4:	03 ba       	out	0x13, r0	; 19
     1b6:	c7 b9       	out	0x07, r28	; 7
     1b8:	ce b9       	out	0x0e, r28	; 14
     1ba:	d5 b9       	out	0x05, r29	; 5
     1bc:	e5 b9       	out	0x05, r30	; 5
     1be:	f3 b9       	out	0x03, r31	; 3
     1c0:	ec b9       	out	0x0c, r30	; 12

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3650>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3648>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3646>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3643>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3641>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3639>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3637>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3635>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3666>:
     843:	0a 00                                               ..

00000845 <__c.3664>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3662>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3656>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3654>:
     8cf:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8df:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     8ef:	30 34 58 0a 00                                      04X..

000008f4 <__c.3652>:
     8f4:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     904:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000912 <__c.3650>:
     912:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     922:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000931 <__c.3648>:
     931:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     941:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000950 <__c.3646>:
     950:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     960:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000096f <__c.3644>:
     96f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     97f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

0000098e <__c.3642>:
     98e:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     99e:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009ad <__c.3640>:
     9ad:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9bd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009cb <__c.3638>:
     9cb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9db:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009e9 <__c.3636>:
     9e9:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     9f9:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a08 <__c.3634>:
     a08:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a18:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a26 <__c.3632>:
     a26:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a37 <__c.3596>:
     a37:	72 63 3d 25 75 0a 00                                rc=%u..

00000a3e <__c.3634>:
     a3e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a4e:	72 65 65 0a 00                                      ree..

00000a53 <__c.3632>:
     a53:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a63:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a73:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a7c <__c.3628>:
     a7c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a8a <__c.3615>:
     a8a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a9a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aaa <__c.3613>:
     aaa:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ab8 <__c.3611>:
     ab8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ac8:	73 74 0a 00                                         st..

00000acc <__c.3609>:
     acc:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000adc <__c.3607>:
     adc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000afc <__c.3599>:
     afc:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b0c <__c.3589>:
     b0c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b1c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b2c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b3c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b4c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b5c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b6c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b7c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b88 <__c.3587>:
     b88:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b94 <__c.3919>:
     b94:	25 73 0a 00                                         %s..

00000b98 <__c.3917>:
     b98:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000ba0 <__c.3672>:
     ba0:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bac <__c.3601>:
     bac:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bbc:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bc4 <__c.3594>:
     bc4:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bd4:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bdc <__c.3758>:
     bdc:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000be7 <__c.3754>:
     be7:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     bf7:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c07:	68 0a 00                                            h..

00000c0a <__c.3751>:
     c0a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c1a <__c.3746>:
     c1a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c2a:	5b 25 73 5d 0a 00                                   [%s]..

00000c30 <__c.3744>:
     c30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c3e <__c.3742>:
     c3e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c4e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c5f <__c.3729>:
     c5f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c6f:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c79 <__c.3724>:
     c79:	25 73 0a 00                                         %s..

00000c7d <__c.3722>:
     c7d:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c8d:	0a 00                                               ..

00000c8f <__c.3710>:
     c8f:	0d 00                                               ..

00000c91 <__c.3708>:
     c91:	4d 6f 72 65 2e 2e 00                                More...

00000c98 <__c.3698>:
     c98:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     ca8:	2e 0a 00                                            ...

00000cab <__c.3694>:
     cab:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cba <__c.3691>:
     cba:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cc7 <__c.3689>:
     cc7:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cd4 <__c.3687>:
     cd4:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000ce4 <__c.3685>:
     ce4:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cf1 <__c.3683>:
     cf1:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d01 <__c.3681>:
     d01:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d0d <__c.3670>:
     d0d:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d18 <__c.3668>:
     d18:	0a 00                                               ..

00000d1a <__c.3663>:
     d1a:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d2a <__c.3653>:
     d2a:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d3b <__c.3651>:
     d3b:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d49 <__c.3649>:
     d49:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d5a <__c.3647>:
     d5a:	25 73 0a 00                                         %s..

00000d5e <__c.3644>:
     d5e:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d6f <__c.3636>:
     d6f:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d80 <__c.3620>:
     d80:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d90:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     da0:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     db0:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dc0:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dd0:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     de0:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     df0:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e00:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e10:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e20:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e30:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e40:	6e 65 77 0a 0a 00                                   new...

00000e46 <__c.3618>:
     e46:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e52 <__c.3809>:
     e52:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e60 <__c.3803>:
     e60:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e6d <__c.3796>:
     e6d:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e7b <__c.3787>:
     e7b:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e88 <__c.3778>:
     e88:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e99 <__c.3764>:
     e99:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ea9:	5d 0a 00                                            ]..

00000eac <__c.3746>:
     eac:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ebc:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ec9 <__c.4405>:
     ec9:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     ed9:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     ee9:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000ef1 <__c.4397>:
     ef1:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f01:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f0b <__c.4392>:
     f0b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f1b:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f2b:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f39 <__c.4390>:
     f39:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f49:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f53 <__c.4380>:
     f53:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f63:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f73:	28 25 64 29 5d 0a 00                                (%d)]..

00000f7a <__c.4376>:
     f7a:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f8a:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f9a:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fa7 <__c.4373>:
     fa7:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fb7:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fc0 <__c.4357>:
     fc0:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fcb <__c.4355>:
     fcb:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fd6 <__c.4353>:
     fd6:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fe1 <__c.4349>:
     fe1:	20 20 20 20 20 00                                        .

00000fe7 <__c.4347>:
     fe7:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000ff0 <__c.4321>:
     ff0:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1000:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000100e <__c.4318>:
    100e:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    101e:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

00001028 <__c.4303>:
    1028:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1038:	3e 0a 00                                            >..

0000103b <__c.4298>:
    103b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    104b:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    105b:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000106a <__c.4294>:
    106a:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    107a:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    108a:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    109a:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010a6 <__c.4290>:
    10a6:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10b6:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10c6:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10d6:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010e2 <__c.4288>:
    10e2:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10f2:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1102:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1112:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001121 <__c.4283>:
    1121:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1131:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001140 <__c.4280>:
    1140:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1150:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

0000115f <__c.4265>:
    115f:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    116f:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    117f:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

0000118d <__c.4247>:
    118d:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    119d:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011a8 <__c.4245>:
    11a8:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11b8:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11c8:	72 61 6e 67 65 0a 00                                range..

000011cf <__c.4240>:
    11cf:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11df:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ea <__c.4238>:
    11ea:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11fa:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    120a:	61 6e 67 65 0a 00                                   ange..

00001210 <__c.4233>:
    1210:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1220:	5d 0a 00                                            ]..

00001223 <__c.4220>:
    1223:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001234 <__c.4397>:
    1234:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001245 <__c.4392>:
    1245:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1255:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1265:	32 58 48 5d 0a 00                                   2XH]..

0000126b <__c.4390>:
    126b:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    127b:	0a 00                                               ..

0000127d <__c.4388>:
    127d:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000128e <__c.4383>:
    128e:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000129a <__c.4381>:
    129a:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012aa <__c.4379>:
    12aa:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12ba:	52 5d 0a 00                                         R]..

000012be <__c.4377>:
    12be:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12ce:	0a 00                                               ..

000012d0 <__c.4375>:
    12d0:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012e1 <__c.4373>:
    12e1:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012e8 <__c.4368>:
    12e8:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012f4 <__c.4366>:
    12f4:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1304:	52 5d 0a 00                                         R]..

00001308 <__c.4364>:
    1308:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

00001319 <__c.4362>:
    1319:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    1329:	0a 00                                               ..

0000132b <__c.4360>:
    132b:	0a 00                                               ..

0000132d <__c.4358>:
    132d:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001334 <__c.4353>:
    1334:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1344:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001355 <__c.4351>:
    1355:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000135c <__c.4349>:
    135c:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001369 <__c.4347>:
    1369:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001375 <__c.4345>:
    1375:	5b 53 44 43 5d 0a 00                                [SDC]..

0000137c <__c.4343>:
    137c:	5b 53 50 44 5d 0a 00                                [SPD]..

00001383 <__c.4341>:
    1383:	5b 53 50 45 5d 0a 00                                [SPE]..

0000138a <__c.4339>:
    138a:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    139a:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013a2 <__c.4337>:
    13a2:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13b2:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013ba <__c.4332>:
    13ba:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13ca:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013d4 <__c.4330>:
    13d4:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13e4:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013f5 <__c.4303>:
    13f5:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001406 <__c.4301>:
    1406:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001413 <__c.4299>:
    1413:	3c 42 55 53 3e 0a 00                                <BUS>..

0000141a <__c.4297>:
    141a:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001425 <__c.4295>:
    1425:	3c 49 46 43 3e 0a 00                                <IFC>..

0000142c <__c.4290>:
    142c:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    143c:	0a 00                                               ..

0000143e <__c.4288>:
    143e:	44 6f 6e 65 0a 00                                   Done..

00001444 <__c.4284>:
    1444:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001450 <__c.4282>:
    1450:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1460:	20 65 78 69 74 0a 00                                 exit..

00001467 <__c.4280>:
    1467:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1477:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1487:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001492 <__c.4278>:
    1492:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14a2:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014ac <__c.4232>:
    14ac:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14bc:	6f 74 65 63 74 65 64 0a 00                          otected..

000014c5 <__c.4230>:
    14c5:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014d6 <__c.4228>:
    14d6:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14e6:	0a 00                                               ..

000014e8 <__c.4423>:
    14e8:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014f5 <__c.4415>:
    14f5:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1505:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1515:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1525:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1535:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1545:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1555:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1565:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1575:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1585:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1595:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15a5:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15b5:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15c5:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15d5:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15e5:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15f5:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1605:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1615:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1625:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1635:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1645:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1655:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1665:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1675:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1685:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1695:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16a5:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16b5:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016be <__c.4413>:
    16be:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

000016c9 <__c.4824>:
    16c9:	0a 00                                               ..

000016cb <__c.4819>:
    16cb:	25 2d 31 36 73 20 20 20 20 20 20 20 25 32 64 0a     %-16s       %2d.
	...

000016dc <__c.4817>:
    16dc:	25 2d 31 36 73 20 41 4d 49 47 4f 20 25 32 64 20     %-16s AMIGO %2d 
    16ec:	25 73 0a 00                                         %s..

000016f0 <__c.4815>:
    16f0:	25 2d 31 36 73 20 53 53 38 30 20 20 25 32 64 20     %-16s SS80  %2d 
    1700:	25 73 0a 00                                         %s..

00001704 <__c.4803>:
    1704:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000170c <__c.4801>:
    170c:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    171c:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001726 <__c.4799>:
    1726:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1736:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1746:	0a 00                                               ..

00001748 <__c.4797>:
    1748:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001750 <__c.4795>:
    1750:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1760:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000176a <__c.4793>:
    176a:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    177a:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    178a:	0a 00                                               ..

0000178c <__c.4776>:
    178c:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    179c:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17ac:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    17bc:	6f 20 32 35 36 0a 00                                o 256..

000017c3 <__c.4774>:
    17c3:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17d3:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    17e3:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    17f3:	20 32 35 36 0a 00                                    256..

000017f9 <__c.4761>:
    17f9:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1809:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001818 <__c.4725>:
    1818:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1828:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1838:	0a 00                                               ..

0000183a <__c.4717>:
    183a:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    184a:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    185a:	6c 6c 0a 00                                         ll..

0000185e <__c.4704>:
    185e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    186e:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    187e:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001889 <__c.4702>:
    1889:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1899:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18a9:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    18b9:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

000018c1 <__c.4700>:
    18c1:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18d1:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    18e1:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    18f1:	3a 25 73 0a 00                                      :%s..

000018f6 <__c.4698>:
    18f6:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1906:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1916:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1926:	55 4c 4c 0a 00                                      ULL..

0000192b <__c.4696>:
    192b:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    193b:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    194b:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    195b:	66 20 72 61 6e 67 65 0a 00                          f range..

00001964 <__c.4694>:
    1964:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1974:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1984:	6e 67 65 0a 00                                      nge..

00001989 <__c.4655>:
    1989:	0a 00                                               ..

0000198b <__c.4650>:
    198b:	0a 00                                               ..

0000198d <__c.4648>:
    198d:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    199d:	6c 64 0a 00                                         ld..

000019a1 <__c.4646>:
    19a1:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19b1:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000019c0 <__c.4644>:
    19c0:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

000019ca <__c.4642>:
    19ca:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19da:	6c 64 0a 00                                         ld..

000019de <__c.4640>:
    19de:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19ee:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000019fd <__c.4638>:
    19fd:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a06 <__c.4635>:
    1a06:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a16:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a26 <__c.4626>:
    1a26:	0a 00                                               ..

00001a28 <__c.4621>:
    1a28:	0a 00                                               ..

00001a2a <__c.4619>:
    1a2a:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a33 <__c.4617>:
    1a33:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a3d <__c.4615>:
    1a3d:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a46 <__c.4612>:
    1a46:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1a56:	0a 00                                               ..

00001a58 <__c.4606>:
    1a58:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1a68:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1a78:	2a 2a 2a 2a 2a 0a 00                                *****..

00001a7f <__c.4604>:
    1a7f:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1a8f:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001a9c <__c.4602>:
    1a9c:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1aac:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1abc:	0a 00                                               ..

00001abe <__c.4598>:
    1abe:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1ace:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1ade:	0a 00                                               ..

00001ae0 <__c.4595>:
    1ae0:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1af0:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b00:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b10 <__c.4586>:
    1b10:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b20:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b30:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b3f <__c.4583>:
    1b3f:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1b4f:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1b5f:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b6f <__c.4574>:
    1b6f:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b7f:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1b8f:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b9d <__c.4566>:
    1b9d:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bad:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1bbd:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bcb <__c.4556>:
    1bcb:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bdb:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1beb:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001bf7 <__c.4539>:
    1bf7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c07:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c17:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c27:	0a 00                                               ..

00001c29 <__c.4531>:
    1c29:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c39:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c49:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c57 <__c.4528>:
    1c57:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c67:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c77:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c85 <__c.4520>:
    1c85:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c95:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1ca5:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001cb2 <__c.4510>:
    1cb2:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cc2:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1cd2:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001ce3 <__c.4507>:
    1ce3:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cf3:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d03:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d0d <__c.4503>:
    1d0d:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d1d:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d2d:	0a 00                                               ..

00001d2f <__c.4492>:
    1d2f:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d3f:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d4f:	0a 00                                               ..

00001d51 <__c.4489>:
    1d51:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1d61:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001d6f <__c.4487>:
    1d6f:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d7c <__c.4468>:
    1d7c:	25 73 0a 00                                         %s..

00001d80 <__c.4458>:
    1d80:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001d8c <__c.4447>:
    1d8c:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1d9c:	6c 64 29 0a 00                                      ld)..

00001da1 <__c.3643>:
    1da1:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001db2 <__c.3641>:
    1db2:	25 73 20 25 73 0a 00                                %s %s..

00001db9 <__c.3637>:
    1db9:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1dc9:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001dd6 <__c.4540>:
    1dd6:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1de6:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1df6:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e06:	48 5d 0a 00                                         H]..

00001e0a <__c.4538>:
    1e0a:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e1a:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e2a:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e3a:	48 5d 0a 00                                         H]..

00001e3e <__c.4536>:
    1e3e:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e4e:	74 5d 0a 00                                         t]..

00001e52 <__c.4534>:
    1e52:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e61 <__c.4532>:
    1e61:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1e71:	74 65 5d 0a 00                                      te]..

00001e76 <__c.4530>:
    1e76:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1e86:	61 74 65 5d 0a 00                                   ate]..

00001e8c <__c.4528>:
    1e8c:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1e9c:	61 74 65 5d 0a 00                                   ate]..

00001ea2 <__c.4523>:
    1ea2:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1eb2:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1ec2:	5d 0a 00                                            ]..

00001ec5 <__c.4509>:
    1ec5:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001ed4 <__c.4507>:
    1ed4:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1ee4:	5d 0a 00                                            ]..

00001ee7 <__c.4500>:
    1ee7:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001ef3 <__c.4486>:
    1ef3:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f03:	5d 0a 00                                            ]..

00001f06 <__c.4484>:
    1f06:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f16:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f20 <__c.4477>:
    1f20:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f30:	48 5d 0a 00                                         H]..

00001f34 <__c.4475>:
    1f34:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f44:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001f54 <__c.4470>:
    1f54:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1f64:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1f74:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1f84:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001f90 <__c.4467>:
    1f90:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1fa0:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001fb0 <__c.4465>:
    1fb0:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1fc0:	29 5d 0a 00                                         )]..

00001fc4 <__c.4463>:
    1fc4:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1fd4:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1fe4:	28 25 64 29 5d 0a 00                                (%d)]..

00001feb <__c.4461>:
    1feb:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1ffb:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00002009 <__c.4459>:
    2009:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    2019:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002026 <__c.4456>:
    2026:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2036:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2046:	44 4f 5d 0a 00                                      DO]..

0000204b <__c.4453>:
    204b:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    205b:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002064 <__c.4451>:
    2064:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2074:	5d 0a 00                                            ]..

00002077 <__c.4442>:
    2077:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2087:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2097:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20a7:	43 6f 64 65 73 5d 0a 00                             Codes]..

000020af <__c.4439>:
    20af:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    20bf:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000020cf <__c.4437>:
    20cf:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    20df:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    20ef:	5d 0a 00                                            ]..

000020f2 <__c.4435>:
    20f2:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2102:	61 74 75 73 5d 0a 00                                atus]..

00002109 <__c.4433>:
    2109:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2119:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002122 <__c.4431>:
    2122:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2132:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000213d <__c.4429>:
    213d:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    214d:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

0000215c <__c.4427>:
    215c:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    216c:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000217a <__c.4425>:
    217a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000218b <__c.4423>:
    218b:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    219b:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021a7 <__c.4421>:
    21a7:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    21b7:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000021c4 <__c.4419>:
    21c4:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    21d4:	2d 4f 50 5d 0a 00                                   -OP]..

000021da <__c.4417>:
    21da:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21ea:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000021fb <__c.4415>:
    21fb:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    220b:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    221b:	44 4f 5d 0a 00                                      DO]..

00002220 <__c.4413>:
    2220:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2230:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000223a <__c.4411>:
    223a:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    224a:	2d 4f 50 5d 0a 00                                   -OP]..

00002250 <__c.4409>:
    2250:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

0000225e <__c.4407>:
    225e:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    226e:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000227a <__c.4405>:
    227a:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    228a:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002297 <__c.4403>:
    2297:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22a7:	20 57 72 69 74 65 5d 0a 00                           Write]..

000022b0 <__c.4400>:
    22b0:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22c0:	20 52 65 61 64 5d 0a 00                              Read]..

000022c8 <__c.4398>:
    22c8:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    22d8:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000022e1 <__c.4395>:
    22e1:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    22f1:	25 64 29 5d 0a 00                                   %d)]..

000022f7 <__c.4393>:
    22f7:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2307:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002310 <__c.4391>:
    2310:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2320:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2330:	52 4f 52 5d 0a 00                                   ROR]..

00002336 <__c.4382>:
    2336:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2346:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002350 <__c.4377>:
    2350:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2360:	76 61 6c 69 64 5d 0a 00                             valid]..

00002368 <__c.4372>:
    2368:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2378:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002387 <__c.4370>:
    2387:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2397:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023a4 <__c.4368>:
    23a4:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    23b4:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    23c4:	5d 0a 00                                            ]..

000023c7 <__c.4366>:
    23c7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000023d8 <__c.4358>:
    23d8:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    23e8:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000023f3 <__c.4356>:
    23f3:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2403:	73 5d 0a 00                                         s]..

00002407 <__c.4346>:
    2407:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002412 <__c.4344>:
    2412:	25 73 3a 0a 00                                      %s:..

00002417 <__c.4319>:
    2417:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2427:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2437:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002442 <__c.4317>:
    2442:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2452:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2462:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000246a <__c.4313>:
    246a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    247a:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    248a:	58 48 29 5d 0a 00                                   XH)]..

00002490 <__c.4311>:
    2490:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24a0:	72 5d 0a 00                                         r]..

000024a4 <__c.4307>:
    24a4:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    24b4:	5d 0a 00                                            ]..

000024b7 <__c.4305>:
    24b7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24c7:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    24d7:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000024e0 <__c.4293>:
    24e0:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    24f0:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2500:	62 79 74 65 73 5d 0a 00                             bytes]..

00002508 <__c.4291>:
    2508:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2518:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2528:	53 48 5d 0a 00                                      SH]..

0000252d <__c.4286>:
    252d:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    253d:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002546 <__c.4284>:
    2546:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2556:	45 72 72 6f 72 5d 0a 00                             Error]..

0000255e <__c.4282>:
    255e:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    256e:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000257c <__c.4280>:
    257c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    258c:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    259c:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025a4 <__c.4263>:
    25a4:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    25b4:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000025c0 <__c.4247>:
    25c0:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    25d0:	5d 0a 00                                            ]..

000025d3 <__c.4363>:
    25d3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25e3:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    25f3:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000025fc <__c.4360>:
    25fc:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    260c:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    261c:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002627 <__c.4357>:
    2627:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2637:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2647:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002650 <__c.4352>:
    2650:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2660:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002670 <__c.4349>:
    2670:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2680:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000268c <__c.4346>:
    268c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    269c:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26ac:	0a 00                                               ..

000026ae <__c.4343>:
    26ae:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26be:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

000026cd <__c.4340>:
    26cd:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26dd:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000026ee <__c.4337>:
    26ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    26fe:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000270e <__c.4333>:
    270e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    271e:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    272e:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    273e:	0a 00                                               ..

00002740 <__c.4328>:
    2740:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002750 <__c.4325>:
    2750:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2760:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

0000276f <__c.4323>:
    276f:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    277f:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    278f:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

0000279a <__c.4321>:
    279a:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27aa:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

000027ba <__c.4319>:
    27ba:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    27ca:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    27da:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027e3 <__c.4317>:
    27e3:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    27f3:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

000027ff <__c.4315>:
    27ff:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    280f:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    281f:	0a 00                                               ..

00002821 <__c.4313>:
    2821:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002831 <__c.4310>:
    2831:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2841:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002852 <__c.4308>:
    2852:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2862:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2872:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000287b <__c.4306>:
    287b:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    288b:	36 5d 0a 00                                         6]..

0000288f <__c.4303>:
    288f:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    289f:	35 5d 0a 00                                         5]..

000028a3 <__c.4300>:
    28a3:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    28b3:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

000028c3 <__c.4297>:
    28c3:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28d3:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    28e3:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

000028f2 <__c.4295>:
    28f2:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2902:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002913 <__c.4293>:
    2913:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2923:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002934 <__c.4291>:
    2934:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2944:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2954:	0a 00                                               ..

00002956 <__c.4289>:
    2956:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2966:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2976:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2986:	0a 00                                               ..

00002988 <__c.4277>:
    2988:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2998:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29a8:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    29b8:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    29c8:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

000029d9 <__c.4275>:
    29d9:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    29e9:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29f9:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a09:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a19:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a29 <__c.4273>:
    2a29:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a39:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a49:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a59:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a69:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a79 <__c.4271>:
    2a79:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a89:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a99:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2aa9:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2ab9:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002ac9 <__c.4266>:
    2ac9:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2ad9:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2ae9:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2af9:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b09:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b19:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b29:	58 48 5d 0a 00                                      XH]..

00002b2e <__c.4264>:
    2b2e:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b3e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b4e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b5e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b6e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b7e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2b8e:	30 32 58 48 5d 0a 00                                02XH]..

00002b95 <__c.4262>:
    2b95:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2ba5:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bb5:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2bc5:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2bd5:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2be5:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2bf5:	30 32 58 48 5d 0a 00                                02XH]..

00002bfc <__c.4260>:
    2bfc:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c0c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c1c:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c2c:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c3c:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c4c:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c5c:	30 32 58 48 5d 0a 00                                02XH]..

00002c63 <__c.4253>:
    2c63:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002c72 <__c.4240>:
    2c72:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002c7f <__c.4238>:
    2c7f:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2c8f:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002c99 <__c.4231>:
    2c99:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2ca9:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002cb9 <__c.4229>:
    2cb9:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2cc9:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002cd8 <__c.4227>:
    2cd8:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2ce8:	0a 00                                               ..

00002cea <__c.4220>:
    2cea:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2cfa:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d04 <__c.4214>:
    2d04:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d14:	0a 00                                               ..

00002d16 <__c.4208>:
    2d16:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d26:	6e 65 5d 0a 00                                      ne]..

00002d2b <__c.4204>:
    2d2b:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d3b <__c.4163>:
    2d3b:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d4b:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2d5b:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002d66 <__c.4193>:
    2d66:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2d76:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2d86:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002d8e <__c.4170>:
    2d8e:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2d9e:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002da7 <__c.4156>:
    2da7:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2db7:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002dc1 <__c.4154>:
    2dc1:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2dd1:	75 73 5d 0a 00                                      us]..

00002dd6 <__c.4148>:
    2dd6:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2de6:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002df0 <__c.4146>:
    2df0:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e00:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e0e <__c.4140>:
    2e0e:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e1e:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e26 <__c.4125>:
    2e26:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e36:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e40 <__c.4123>:
    2e40:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2e50:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002e5c <__c.4118>:
    2e5c:	25 30 38 6c 64 0d 00                                %08ld..

00002e63 <__c.4112>:
    2e63:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2e73:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002e84 <__c.4106>:
    2e84:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002e92 <__c.4104>:
    2e92:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2ea2:	69 74 65 0a 00                                      ite..

00002ea7 <__c.4098>:
    2ea7:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002eb3 <__c.4096>:
    2eb3:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2ec3:	6f 3a 25 73 0a 00                                   o:%s..

00002ec9 <__c.4094>:
    2ec9:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2ed9:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2ee9:	74 00                                               t.

00002eeb <__c.4553>:
    2eeb:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2efb:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f0b <__c.4551>:
    2f0b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f1b:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f2b <__c.4549>:
    2f2b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f3b:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f4b:	30 0a 00                                            0..

00002f4e <__c.4547>:
    2f4e:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f5e:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2f6e:	70 74 79 0a 00                                      pty..

00002f73 <__c.4545>:
    2f73:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f83:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2f93:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002f9c <__c.4532>:
    2f9c:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2fac:	20 25 31 30 73 0a 00                                 %10s..

00002fb3 <__c.4530>:
    2fb3:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2fc3:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2fd3:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002fdc <__c.4528>:
    2fdc:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2fec:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    2ffc:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    300c:	74 65 72 73 0a 00                                   ters..

00003012 <__c.4526>:
    3012:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3022:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3032:	65 6d 70 74 79 0a 00                                empty..

00003039 <__c.4524>:
    3039:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3049:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3059:	65 6d 70 74 79 0a 00                                empty..

00003060 <__c.4522>:
    3060:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3070:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3080:	20 65 6d 70 74 79 0a 00                              empty..

00003088 <__c.4513>:
    3088:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003097 <__c.4511>:
    3097:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30a7:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    30b7:	20 66 6f 75 6e 64 0a 00                              found..

000030bf <__c.4509>:
    30bf:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30cf:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000030de <__c.4507>:
    30de:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    30ee:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000030fe <__c.4505>:
    30fe:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    310e:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    311e:	70 74 79 0a 00                                      pty..

00003123 <__c.4497>:
    3123:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003131 <__c.4492>:
    3131:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000313f <__c.4490>:
    313f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    314f:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    315f:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000316f <__c.4488>:
    316f:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    317f:	73 0a 00                                            s..

00003182 <__c.4486>:
    3182:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3192:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31a2:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000031b1 <__c.4484>:
    31b1:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    31c1:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000031cd <__c.4482>:
    31cd:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    31dd:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000031e8 <__c.4480>:
    31e8:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    31f8:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003208 <__c.4463>:
    3208:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003216 <__c.4458>:
    3216:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003224 <__c.4456>:
    3224:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3234:	73 0a 00                                            s..

00003237 <__c.4454>:
    3237:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3247:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000324f <__c.4437>:
    324f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000325d <__c.4434>:
    325d:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    326d:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    327d:	20 65 72 72 6f 72 0a 00                              error..

00003285 <__c.4426>:
    3285:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003293 <__c.4424>:
    3293:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32a3:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32b3:	20 65 72 72 6f 72 0a 00                              error..

000032bb <__c.4421>:
    32bb:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32cb:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    32db:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    32eb:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    32fb:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    330b:	30 32 58 48 0a 00                                   02XH..

00003311 <__c.4419>:
    3311:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3321:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3331:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3341:	20 25 64 0a 00                                       %d..

00003346 <__c.4415>:
    3346:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003356 <__c.4413>:
    3356:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3366:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3376:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3386:	30 78 45 30 31 33 0a 00                             0xE013..

0000338e <__c.4411>:
    338e:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    339e:	6e 64 3a 25 73 0a 00                                nd:%s..

000033a5 <__c.4409>:
    33a5:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    33b5:	75 6e 64 3a 25 73 0a 00                             und:%s..

000033bd <__c.4385>:
    33bd:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033cb <__c.4383>:
    33cb:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    33db:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033e4 <__c.4381>:
    33e4:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    33f4:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033fd <__c.4379>:
    33fd:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    340d:	20 20 25 34 64 0a 00                                  %4d..

00003414 <__c.4377>:
    3414:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3424:	20 20 20 25 73 0a 00                                   %s..

0000342b <__c.4375>:
    342b:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    343b:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    344b:	77 72 69 74 65 0a 00                                write..

00003452 <__c.4373>:
    3452:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3462:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3472:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003482 <__c.4371>:
    3482:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3492:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34a2:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034b1 <__c.4369>:
    34b1:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34c1:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    34d1:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000034e1 <__c.4367>:
    34e1:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34f1:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3501:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003510 <__c.4365>:
    3510:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3520:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3530:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000353e <__c.4363>:
    353e:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    354e:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    355e:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    356e:	79 0a 00                                            y..

00003571 <__c.4349>:
    3571:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000357f <__c.4347>:
    357f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000358d <__c.4342>:
    358d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000359b <__c.4325>:
    359b:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35ab:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    35bb:	25 64 0a 00                                         %d..

000035bf <__c.4308>:
    35bf:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    35cf:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    35df:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    35ef:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000035f8 <__c.4294>:
    35f8:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3608:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3618:	62 69 67 0a 00                                      big..

0000361d <__c.4292>:
    361d:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    362d:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    363d:	63 74 65 72 73 0a 00                                cters..

00003644 <__c.4285>:
    3644:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3654:	73 0a 00                                            s..

00003657 <__c.4283>:
    3657:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3667:	73 0a 00                                            s..

0000366a <__c.4281>:
    366a:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    367a:	73 0a 00                                            s..

0000367d <__c.4279>:
    367d:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

0000368e <__c.4277>:
    368e:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

0000369b <__c.4275>:
    369b:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036a7 <__c.4273>:
    36a7:	0a 00                                               ..

000036a9 <__c.4270>:
    36a9:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    36b9:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    36c9:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000036d9 <__c.4268>:
    36d9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    36e9:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    36f9:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3709:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3719:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003725 <__c.4265>:
    3725:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3735:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3745:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3755:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003765 <__c.4263>:
    3765:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3775:	3a 5b 25 73 5d 0a 00                                :[%s]..

0000377c <__c.4253>:
    377c:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    378c:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    379c:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37ac:	64 0a 00                                            d..

000037af <__c.4251>:
    37af:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37bf:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    37cf:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    37df:	64 0a 00                                            d..

000037e2 <__c.4249>:
    37e2:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37f2:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3802:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3812:	69 6c 65 64 0a 00                                   iled..

00003818 <__c.4247>:
    3818:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3828:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3838:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3848:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003857 <__c.4234>:
    3857:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3867:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3877:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3887:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3897:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038a8 <__c.4231>:
    38a8:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38b8:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38c8:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000038d1 <__c.4229>:
    38d1:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38e1:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38f1:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3901:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003909 <__c.4217>:
    3909:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3919:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3929:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3939:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3949:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003956 <__c.4192>:
    3956:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3966:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003976 <__c.4183>:
    3976:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3986:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3996:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39a6:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000039b0 <__c.4164>:
    39b0:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000039bd <__c.4159>:
    39bd:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039ca <__c.4154>:
    39ca:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039d7 <__c.4146>:
    39d7:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039e4 <__c.4144>:
    39e4:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    39f4:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a04:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a14:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a24:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a34:	25 6c 64 0a 00                                      %ld..

00003a39 <__c.4128>:
    3a39:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a49:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3a59:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003a65 <__c.4126>:
    3a65:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a75:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a85:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003a90 <__c.4124>:
    3a90:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3aa0:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ab0:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ac0:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ad0:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003adb <__c.4122>:
    3adb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3aeb:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3afb:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b0b:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b1b:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b26 <__c.4120>:
    3b26:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b36:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b46:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003b54 <__c.4118>:
    3b54:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b64:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3b74:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3b84:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003b95 <__c.4116>:
    3b95:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ba5:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3bb5:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3bc5:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3bd5:	58 68 0a 00                                         Xh..

00003bd9 <__c.4114>:
    3bd9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3be9:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003bfa <__c.4108>:
    3bfa:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c0a:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c1a:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c26 <__c.4106>:
    3c26:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c36:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c46:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003c55 <__c.4104>:
    3c55:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c65:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3c75:	25 6c 64 0a 00                                      %ld..

00003c7a <__c.4102>:
    3c7a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c8a:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3c9a:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3caa:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cb3 <__c.4100>:
    3cb3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cc3:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3cd3:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ce3:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cec <__c.4098>:
    3cec:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3cfc:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d04 <__c.4096>:
    3d04:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d14:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d24:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d34:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d3d <__c.4094>:
    3d3d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d4d:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003d5c <__c.4087>:
    3d5c:	0a 00                                               ..

00003d5e <__c.4085>:
    3d5e:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3d6e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d78 <__c.4083>:
    3d78:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3d88:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003d94 <__c.4081>:
    3d94:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3da4:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003db1 <__c.4079>:
    3db1:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3dc1:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003dce <__c.4077>:
    3dce:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3dde:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003deb <__c.4075>:
    3deb:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3dfb:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e07 <__c.4073>:
    3e07:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e17:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e23 <__c.4071>:
    3e23:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e33:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e3d <__c.4069>:
    3e3d:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e4d:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e57 <__c.4067>:
    3e57:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3e67:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e73 <__c.4065>:
    3e73:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3e83:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e8f <__c.4063>:
    3e8f:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3e9f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003eac <__c.4061>:
    3eac:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3ebc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ec9 <__c.4059>:
    3ec9:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3ed9:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ee5 <__c.4057>:
    3ee5:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3ef5:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003eff <__c.4055>:
    3eff:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f0f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f1c <__c.4053>:
    3f1c:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f2c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f39 <__c.4051>:
    3f39:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f49:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f56 <__c.4049>:
    3f56:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3f66:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f73 <__c.4047>:
    3f73:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3f83:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003f90 <__c.4045>:
    3f90:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3fa0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fad <__c.4043>:
    3fad:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3fbd:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fca <__c.4041>:
    3fca:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3fda:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fe7 <__c.4039>:
    3fe7:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3ff7:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004001 <__c.4037>:
    4001:	0a 25 73 0a 00                                      .%s..

00004006 <__c.3914>:
    4006:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4016:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4026:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4036:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004043 <__c.3905>:
    4043:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4053:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4063:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4073:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000407f <__c.3896>:
    407f:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    408f:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040a0 <__c.3889>:
    40a0:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    40b0:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000040b9 <__c.3883>:
    40b9:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    40c9:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    40d9:	25 73 5d 0a 00                                      %s]..

000040de <__c.3871>:
    40de:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    40ee:	6f 69 6e 74 65 72 0a 00                             ointer..

000040f6 <__c.3866>:
    40f6:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4106:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4116:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000411f <__c.3860>:
    411f:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    412f:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004140 <__c.3847>:
    4140:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4150:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4160:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4170:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4180:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4190:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    41a0:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    41b0:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    41c0:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    41d0:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    41e0:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    41f0:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4200:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4210:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4220:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4230:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4240:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4250:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4260:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4270:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4280:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4290:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    42a0:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    42b0:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    42c0:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    42d0:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    42e0:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    42f0:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4300:	67 0a 0a 00                                         g...

00004304 <__c.3845>:
    4304:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

0000430e <__c.4588>:
    430e:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    431e:	53 4b 0a 00                                         SK..

00004322 <__c.4586>:
    4322:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4332:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000433c <__c.4584>:
    433c:	25 2d 31 36 73 00                                   %-16s.

00004342 <__c.4582>:
    4342:	25 2d 31 36 73 00                                   %-16s.

00004348 <__c.4580>:
    4348:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004359 <__c.4578>:
    4359:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4369:	30 34 78 48 0a 00                                   04xH..

0000436f <__c.4576>:
    436f:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    437f:	64 6f 6e 65 0a 00                                   done..

00004385 <__c.4574>:
    4385:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4395:	6f 6e 65 0a 00                                      one..

0000439a <__c.4572>:
    439a:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    43aa:	61 6c 69 7a 65 64 0a 00                             alized..

000043b2 <__c.4570>:
    43b2:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    43c2:	0a 00                                               ..

000043c4 <__c.4568>:
    43c4:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    43d4:	7a 65 64 0a 00                                      zed..

000043d9 <__c.4566>:
    43d9:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    43e9:	69 7a 65 64 0a 00                                   ized..

000043ef <__c.4564>:
    43ef:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004400 <__c.4562>:
    4400:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4410:	20 73 74 61 72 74 0a 00                              start..

00004418 <__c.4560>:
    4418:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    4428:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    4438:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004446 <__c.4558>:
    4446:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004455 <__c.4556>:
    4455:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4465:	0a 00                                               ..

00004467 <__c.4554>:
    4467:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    4477:	20 62 75 73 0a 00                                    bus..

0000447d <__c.4552>:
    447d:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    448d:	20 62 75 73 0a 00                                    bus..

00004493 <__c.4550>:
    4493:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    44a3:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000044ad <__c.4548>:
    44ad:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    44bd:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000044c7 <__c.4546>:
    44c7:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    44d7:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    44e7:	35 64 69 73 6b 0a 00                                5disk..

000044ee <__c.4544>:
    44ee:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000044fe <__c.4542>:
    44fe:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    450e:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000451b <__c.4540>:
    451b:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    452b:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000453a <__c.4538>:
    453a:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    454a:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    455a:	3a 20 25 6c 64 0a 00                                : %ld..

00004561 <__c.4536>:
    4561:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004572 <__c.4534>:
    4572:	53 74 61 72 74 0a 00                                Start..

00004579 <__c.4525>:
    4579:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004585 <__c.4523>:
    4585:	4f 4b 0a 00                                         OK..

00004589 <__c.4520>:
    4589:	0a 3e 00                                            .>.

0000458c <__c.4509>:
    458c:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    459c:	42 42 0a 68 65 6c 70 0a 6d 65 6d 0a 72 65 73 65     BB.help.mem.rese
    45ac:	74 0a 73 65 74 64 61 74 65 0a 74 69 6d 65 0a 0a     t.setdate.time..
	...

000045bd <__c.4502>:
    45bd:	25 2d 31 36 73 00                                   %-16s.

000045c3 <__c.4500>:
    45c3:	25 2d 31 36 73 00                                   %-16s.

000045c9 <__c.4493>:
    45c9:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    45d9:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000045e3 <__c.4491>:
    45e3:	25 2d 31 36 73 00                                   %-16s.

000045e9 <__c.4489>:
    45e9:	25 2d 31 36 73 00                                   %-16s.

000045ef <__c.4487>:
    45ef:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    45ff:	69 6c 65 64 0a 00                                   iled..

00004605 <__c.4485>:
    4605:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4615:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004623 <__c.4479>:
    4623:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4633:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000463d <__c.4473>:
    463d:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    464d:	3a 25 30 32 64 00                                   :%02d.

00004653 <__c.4459>:
    4653:	0a 00                                               ..

00004655 <__c.4457>:
    4655:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4665:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000466f <__c.4455>:
    466f:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    467f:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004689 <__c.4453>:
    4689:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4699:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46a9:	35 64 69 73 6b 0a 00                                5disk..

000046b0 <__c.4451>:
    46b0:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000046c0 <__c.4449>:
    46c0:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    46d0:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000046dd <__c.4447>:
    46dd:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    46ed:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000046fc <__c.4445>:
    46fc:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    470c:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    471c:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

0000472c <__ctors_end>:
    472c:	11 24       	eor	r1, r1
    472e:	1f be       	out	0x3f, r1	; 63
    4730:	cf ef       	ldi	r28, 0xFF	; 255
    4732:	d0 e4       	ldi	r29, 0x40	; 64
    4734:	de bf       	out	0x3e, r29	; 62
    4736:	cd bf       	out	0x3d, r28	; 61

00004738 <__do_copy_data>:
    4738:	17 e1       	ldi	r17, 0x17	; 23
    473a:	a0 e0       	ldi	r26, 0x00	; 0
    473c:	b1 e0       	ldi	r27, 0x01	; 1
    473e:	e2 eb       	ldi	r30, 0xB2	; 178
    4740:	fc ec       	ldi	r31, 0xCC	; 204
    4742:	01 e0       	ldi	r16, 0x01	; 1
    4744:	0b bf       	out	0x3b, r16	; 59
    4746:	02 c0       	rjmp	.+4      	; 0x474c <__do_copy_data+0x14>
    4748:	07 90       	elpm	r0, Z+
    474a:	0d 92       	st	X+, r0
    474c:	a6 34       	cpi	r26, 0x46	; 70
    474e:	b1 07       	cpc	r27, r17
    4750:	d9 f7       	brne	.-10     	; 0x4748 <__do_copy_data+0x10>

00004752 <__do_clear_bss>:
    4752:	21 e2       	ldi	r18, 0x21	; 33
    4754:	a6 e4       	ldi	r26, 0x46	; 70
    4756:	b7 e1       	ldi	r27, 0x17	; 23
    4758:	01 c0       	rjmp	.+2      	; 0x475c <.do_clear_bss_start>

0000475a <.do_clear_bss_loop>:
    475a:	1d 92       	st	X+, r1

0000475c <.do_clear_bss_start>:
    475c:	a6 3a       	cpi	r26, 0xA6	; 166
    475e:	b2 07       	cpc	r27, r18
    4760:	e1 f7       	brne	.-8      	; 0x475a <.do_clear_bss_loop>
    4762:	0e 94 ce df 	call	0x1bf9c	; 0x1bf9c <main>
    4766:	0c 94 57 e6 	jmp	0x1ccae	; 0x1ccae <_exit>

0000476a <__bad_interrupt>:
    476a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000476e <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    476e:	e8 2f       	mov	r30, r24
    4770:	e6 95       	lsr	r30
    4772:	e6 95       	lsr	r30
    4774:	e6 95       	lsr	r30
    4776:	93 e0       	ldi	r25, 0x03	; 3
    4778:	e9 9f       	mul	r30, r25
    477a:	f0 01       	movw	r30, r0
    477c:	11 24       	eor	r1, r1
    477e:	32 a1       	ldd	r19, Z+34	; 0x22
    4780:	28 2f       	mov	r18, r24
    4782:	27 70       	andi	r18, 0x07	; 7
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	01 c0       	rjmp	.+2      	; 0x478c <chip_select+0x1e>
    478a:	88 0f       	add	r24, r24
    478c:	2a 95       	dec	r18
    478e:	ea f7       	brpl	.-6      	; 0x478a <chip_select+0x1c>
    4790:	98 2f       	mov	r25, r24
    4792:	90 95       	com	r25
    4794:	93 23       	and	r25, r19
    4796:	92 a3       	std	Z+34, r25	; 0x22
    4798:	91 a1       	ldd	r25, Z+33	; 0x21
    479a:	89 2b       	or	r24, r25
    479c:	81 a3       	std	Z+33, r24	; 0x21
    479e:	08 95       	ret

000047a0 <chip_deselect>:
    47a0:	e8 2f       	mov	r30, r24
    47a2:	e6 95       	lsr	r30
    47a4:	e6 95       	lsr	r30
    47a6:	e6 95       	lsr	r30
    47a8:	93 e0       	ldi	r25, 0x03	; 3
    47aa:	e9 9f       	mul	r30, r25
    47ac:	f0 01       	movw	r30, r0
    47ae:	11 24       	eor	r1, r1
    47b0:	32 a1       	ldd	r19, Z+34	; 0x22
    47b2:	28 2f       	mov	r18, r24
    47b4:	27 70       	andi	r18, 0x07	; 7
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	01 c0       	rjmp	.+2      	; 0x47be <chip_deselect+0x1e>
    47bc:	88 0f       	add	r24, r24
    47be:	2a 95       	dec	r18
    47c0:	ea f7       	brpl	.-6      	; 0x47bc <chip_deselect+0x1c>
    47c2:	93 2f       	mov	r25, r19
    47c4:	98 2b       	or	r25, r24
    47c6:	92 a3       	std	Z+34, r25	; 0x22
    47c8:	91 a1       	ldd	r25, Z+33	; 0x21
    47ca:	89 2b       	or	r24, r25
    47cc:	81 a3       	std	Z+33, r24	; 0x21
    47ce:	08 95       	ret

000047d0 <chip_select_init>:
    47d0:	e7 cf       	rjmp	.-50     	; 0x47a0 <chip_deselect>
    47d2:	08 95       	ret

000047d4 <spi_end>:
    47d4:	cf 93       	push	r28
    47d6:	ad b7       	in	r26, 0x3d	; 61
    47d8:	be b7       	in	r27, 0x3e	; 62
    47da:	17 97       	sbiw	r26, 0x07	; 7
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	f8 94       	cli
    47e0:	be bf       	out	0x3e, r27	; 62
    47e2:	0f be       	out	0x3f, r0	; 63
    47e4:	ad bf       	out	0x3d, r26	; 61
    47e6:	c8 2f       	mov	r28, r24
    47e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    47ec:	8c 17       	cp	r24, r28
    47ee:	99 f0       	breq	.+38     	; 0x4816 <spi_end+0x42>
    47f0:	8f 3f       	cpi	r24, 0xFF	; 255
    47f2:	89 f0       	breq	.+34     	; 0x4816 <spi_end+0x42>
    47f4:	2c 2f       	mov	r18, r28
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	ed b7       	in	r30, 0x3d	; 61
    47fa:	fe b7       	in	r31, 0x3e	; 62
    47fc:	37 83       	std	Z+7, r19	; 0x07
    47fe:	26 83       	std	Z+6, r18	; 0x06
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	95 83       	std	Z+5, r25	; 0x05
    4804:	84 83       	std	Z+4, r24	; 0x04
    4806:	82 ec       	ldi	r24, 0xC2	; 194
    4808:	91 e0       	ldi	r25, 0x01	; 1
    480a:	a0 e0       	ldi	r26, 0x00	; 0
    480c:	81 83       	std	Z+1, r24	; 0x01
    480e:	92 83       	std	Z+2, r25	; 0x02
    4810:	a3 83       	std	Z+3, r26	; 0x03
    4812:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    4816:	8c 2f       	mov	r24, r28
    4818:	c3 df       	rcall	.-122    	; 0x47a0 <chip_deselect>
    481a:	8f ef       	ldi	r24, 0xFF	; 255
    481c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4820:	ad b7       	in	r26, 0x3d	; 61
    4822:	be b7       	in	r27, 0x3e	; 62
    4824:	17 96       	adiw	r26, 0x07	; 7
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	f8 94       	cli
    482a:	be bf       	out	0x3e, r27	; 62
    482c:	0f be       	out	0x3f, r0	; 63
    482e:	ad bf       	out	0x3d, r26	; 61
    4830:	cf 91       	pop	r28
    4832:	08 95       	ret

00004834 <spi_TX_buffer>:
    4834:	cd c4       	rjmp	.+2458   	; 0x51d0 <SPI0_TX>
    4836:	08 95       	ret

00004838 <spi_RX_buffer>:
    4838:	f5 c4       	rjmp	.+2538   	; 0x5224 <SPI0_RX>
    483a:	08 95       	ret

0000483c <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    483c:	a1 e0       	ldi	r26, 0x01	; 1
    483e:	b0 e0       	ldi	r27, 0x00	; 0
    4840:	e4 e2       	ldi	r30, 0x24	; 36
    4842:	f4 e2       	ldi	r31, 0x24	; 36
    4844:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    4848:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    484a:	61 e0       	ldi	r22, 0x01	; 1
    484c:	70 e0       	ldi	r23, 0x00	; 0
    484e:	ce 01       	movw	r24, r28
    4850:	01 96       	adiw	r24, 0x01	; 1
    4852:	be d4       	rcall	.+2428   	; 0x51d0 <SPI0_TX>
#endif
}
    4854:	21 96       	adiw	r28, 0x01	; 1
    4856:	e2 e0       	ldi	r30, 0x02	; 2
    4858:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000485c <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    485c:	cf 92       	push	r12
    485e:	df 92       	push	r13
    4860:	ef 92       	push	r14
    4862:	ff 92       	push	r15
    4864:	6b 01       	movw	r12, r22
    4866:	7c 01       	movw	r14, r24
    4868:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    486a:	9a df       	rcall	.-204    	; 0x47a0 <chip_deselect>
    _cs_pin = 0xff;
    486c:	8f ef       	ldi	r24, 0xFF	; 255
    486e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4872:	c7 01       	movw	r24, r14
    4874:	b6 01       	movw	r22, r12
    4876:	7f d4       	rcall	.+2302   	; 0x5176 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4878:	80 e0       	ldi	r24, 0x00	; 0
    487a:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    487c:	3c d4       	rcall	.+2168   	; 0x50f6 <SPI0_Mode>
    487e:	8f ef       	ldi	r24, 0xFF	; 255
    4880:	dd df       	rcall	.-70     	; 0x483c <spi_TX>
    _spi_clock = clock;
    4882:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4886:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    488a:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    488e:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4892:	ff 90       	pop	r15
    4894:	ef 90       	pop	r14
    4896:	df 90       	pop	r13
    4898:	cf 90       	pop	r12
    489a:	08 95       	ret

0000489c <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    489c:	cf 92       	push	r12
    489e:	df 92       	push	r13
    48a0:	ef 92       	push	r14
    48a2:	ff 92       	push	r15
    48a4:	cf 93       	push	r28
    48a6:	df 93       	push	r29
    48a8:	ad b7       	in	r26, 0x3d	; 61
    48aa:	be b7       	in	r27, 0x3e	; 62
    48ac:	17 97       	sbiw	r26, 0x07	; 7
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	f8 94       	cli
    48b2:	be bf       	out	0x3e, r27	; 62
    48b4:	0f be       	out	0x3f, r0	; 63
    48b6:	ad bf       	out	0x3d, r26	; 61
    48b8:	6b 01       	movw	r12, r22
    48ba:	7c 01       	movw	r14, r24
    48bc:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    48be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    48c2:	8f 3f       	cpi	r24, 0xFF	; 255
    48c4:	79 f0       	breq	.+30     	; 0x48e4 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    48c6:	ed b7       	in	r30, 0x3d	; 61
    48c8:	fe b7       	in	r31, 0x3e	; 62
    48ca:	46 83       	std	Z+6, r20	; 0x06
    48cc:	d7 83       	std	Z+7, r29	; 0x07
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	95 83       	std	Z+5, r25	; 0x05
    48d2:	84 83       	std	Z+4, r24	; 0x04
    48d4:	80 ee       	ldi	r24, 0xE0	; 224
    48d6:	91 e0       	ldi	r25, 0x01	; 1
    48d8:	a0 e0       	ldi	r26, 0x00	; 0
    48da:	81 83       	std	Z+1, r24	; 0x01
    48dc:	92 83       	std	Z+2, r25	; 0x02
    48de:	a3 83       	std	Z+3, r26	; 0x03
    48e0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    48e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    48e8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    48ec:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    48f0:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    48f4:	8c 15       	cp	r24, r12
    48f6:	9d 05       	cpc	r25, r13
    48f8:	ae 05       	cpc	r26, r14
    48fa:	bf 05       	cpc	r27, r15
    48fc:	21 f0       	breq	.+8      	; 0x4906 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    48fe:	ae 01       	movw	r20, r28
    4900:	c7 01       	movw	r24, r14
    4902:	b6 01       	movw	r22, r12
    4904:	ab df       	rcall	.-170    	; 0x485c <spi_init>
    }

    chip_select(pin);
    4906:	8c 2f       	mov	r24, r28
    4908:	32 df       	rcall	.-412    	; 0x476e <chip_select>
    _cs_pin = pin;
    490a:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    490e:	ad b7       	in	r26, 0x3d	; 61
    4910:	be b7       	in	r27, 0x3e	; 62
    4912:	17 96       	adiw	r26, 0x07	; 7
    4914:	0f b6       	in	r0, 0x3f	; 63
    4916:	f8 94       	cli
    4918:	be bf       	out	0x3e, r27	; 62
    491a:	0f be       	out	0x3f, r0	; 63
    491c:	ad bf       	out	0x3d, r26	; 61
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	ff 90       	pop	r15
    4924:	ef 90       	pop	r14
    4926:	df 90       	pop	r13
    4928:	cf 90       	pop	r12
    492a:	08 95       	ret

0000492c <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    492c:	a1 e0       	ldi	r26, 0x01	; 1
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	ec e9       	ldi	r30, 0x9C	; 156
    4932:	f4 e2       	ldi	r31, 0x24	; 36
    4934:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    4938:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    493a:	61 e0       	ldi	r22, 0x01	; 1
    493c:	70 e0       	ldi	r23, 0x00	; 0
    493e:	ce 01       	movw	r24, r28
    4940:	01 96       	adiw	r24, 0x01	; 1
    4942:	5a d4       	rcall	.+2228   	; 0x51f8 <SPI0_TXRX>
#endif
    return(data);
}
    4944:	89 81       	ldd	r24, Y+1	; 0x01
    4946:	21 96       	adiw	r28, 0x01	; 1
    4948:	e2 e0       	ldi	r30, 0x02	; 2
    494a:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000494e <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    494e:	80 93 46 17 	sts	0x1746, r24	; 0x801746 <__data_end>
    GPIO_PIN_HI(LED2);
    4952:	2c 9a       	sbi	0x05, 4	; 5
    4954:	24 9a       	sbi	0x04, 4	; 4
    4956:	08 95       	ret

00004958 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4958:	10 92 46 17 	sts	0x1746, r1	; 0x801746 <__data_end>
    GPIO_PIN_LOW(LED2);
    495c:	2c 98       	cbi	0x05, 4	; 5
    495e:	24 9a       	sbi	0x04, 4	; 4
    4960:	08 95       	ret

00004962 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4962:	a2 e0       	ldi	r26, 0x02	; 2
    4964:	b0 e0       	ldi	r27, 0x00	; 0
    4966:	e7 eb       	ldi	r30, 0xB7	; 183
    4968:	f4 e2       	ldi	r31, 0x24	; 36
    496a:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    496e:	20 91 a2 21 	lds	r18, 0x21A2	; 0x8021a2 <__brkval>
    4972:	30 91 a3 21 	lds	r19, 0x21A3	; 0x8021a3 <__brkval+0x1>
    4976:	21 15       	cp	r18, r1
    4978:	31 05       	cpc	r19, r1
    497a:	11 f4       	brne	.+4      	; 0x4980 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    497c:	26 ea       	ldi	r18, 0xA6	; 166
    497e:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4980:	ce 01       	movw	r24, r28
    4982:	01 96       	adiw	r24, 0x01	; 1
    4984:	82 1b       	sub	r24, r18
    4986:	93 0b       	sbc	r25, r19
    4988:	22 96       	adiw	r28, 0x02	; 2
    498a:	e2 e0       	ldi	r30, 0x02	; 2
    498c:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00004990 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4990:	a9 e0       	ldi	r26, 0x09	; 9
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	ee ec       	ldi	r30, 0xCE	; 206
    4996:	f4 e2       	ldi	r31, 0x24	; 36
    4998:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    499c:	e2 df       	rcall	.-60     	; 0x4962 <freeRam>
    499e:	99 87       	std	Y+9, r25	; 0x09
    49a0:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    49a2:	ed b7       	in	r30, 0x3d	; 61
    49a4:	fe b7       	in	r31, 0x3e	; 62
    49a6:	95 83       	std	Z+5, r25	; 0x05
    49a8:	84 83       	std	Z+4, r24	; 0x04
    49aa:	87 e0       	ldi	r24, 0x07	; 7
    49ac:	93 e0       	ldi	r25, 0x03	; 3
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	81 83       	std	Z+1, r24	; 0x01
    49b2:	92 83       	std	Z+2, r25	; 0x02
    49b4:	a3 83       	std	Z+3, r26	; 0x03
    49b6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    49ba:	8f ef       	ldi	r24, 0xFF	; 255
    49bc:	90 e4       	ldi	r25, 0x40	; 64
    49be:	ed b7       	in	r30, 0x3d	; 61
    49c0:	fe b7       	in	r31, 0x3e	; 62
    49c2:	95 83       	std	Z+5, r25	; 0x05
    49c4:	84 83       	std	Z+4, r24	; 0x04
    49c6:	84 ef       	ldi	r24, 0xF4	; 244
    49c8:	92 e0       	ldi	r25, 0x02	; 2
    49ca:	a0 e0       	ldi	r26, 0x00	; 0
    49cc:	81 83       	std	Z+1, r24	; 0x01
    49ce:	92 83       	std	Z+2, r25	; 0x02
    49d0:	a3 83       	std	Z+3, r26	; 0x03
    49d2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    49d6:	ce 01       	movw	r24, r28
    49d8:	08 96       	adiw	r24, 0x08	; 8
    49da:	ed b7       	in	r30, 0x3d	; 61
    49dc:	fe b7       	in	r31, 0x3e	; 62
    49de:	95 83       	std	Z+5, r25	; 0x05
    49e0:	84 83       	std	Z+4, r24	; 0x04
    49e2:	81 ee       	ldi	r24, 0xE1	; 225
    49e4:	92 e0       	ldi	r25, 0x02	; 2
    49e6:	a0 e0       	ldi	r26, 0x00	; 0
    49e8:	81 83       	std	Z+1, r24	; 0x01
    49ea:	92 83       	std	Z+2, r25	; 0x02
    49ec:	a3 83       	std	Z+3, r26	; 0x03
    49ee:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    49f2:	86 ea       	ldi	r24, 0xA6	; 166
    49f4:	91 e2       	ldi	r25, 0x21	; 33
    49f6:	ed b7       	in	r30, 0x3d	; 61
    49f8:	fe b7       	in	r31, 0x3e	; 62
    49fa:	97 83       	std	Z+7, r25	; 0x07
    49fc:	86 83       	std	Z+6, r24	; 0x06
    49fe:	86 e4       	ldi	r24, 0x46	; 70
    4a00:	97 e1       	ldi	r25, 0x17	; 23
    4a02:	95 83       	std	Z+5, r25	; 0x05
    4a04:	84 83       	std	Z+4, r24	; 0x04
    4a06:	83 ec       	ldi	r24, 0xC3	; 195
    4a08:	92 e0       	ldi	r25, 0x02	; 2
    4a0a:	a0 e0       	ldi	r26, 0x00	; 0
    4a0c:	81 83       	std	Z+1, r24	; 0x01
    4a0e:	92 83       	std	Z+2, r25	; 0x02
    4a10:	a3 83       	std	Z+3, r26	; 0x03
    4a12:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4a16:	86 e4       	ldi	r24, 0x46	; 70
    4a18:	97 e1       	ldi	r25, 0x17	; 23
    4a1a:	ed b7       	in	r30, 0x3d	; 61
    4a1c:	fe b7       	in	r31, 0x3e	; 62
    4a1e:	97 83       	std	Z+7, r25	; 0x07
    4a20:	86 83       	std	Z+6, r24	; 0x06
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	91 e0       	ldi	r25, 0x01	; 1
    4a26:	95 83       	std	Z+5, r25	; 0x05
    4a28:	84 83       	std	Z+4, r24	; 0x04
    4a2a:	85 ea       	ldi	r24, 0xA5	; 165
    4a2c:	92 e0       	ldi	r25, 0x02	; 2
    4a2e:	a0 e0       	ldi	r26, 0x00	; 0
    4a30:	81 83       	std	Z+1, r24	; 0x01
    4a32:	92 83       	std	Z+2, r25	; 0x02
    4a34:	a3 83       	std	Z+3, r26	; 0x03
    4a36:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	ed b7       	in	r30, 0x3d	; 61
    4a40:	fe b7       	in	r31, 0x3e	; 62
    4a42:	97 83       	std	Z+7, r25	; 0x07
    4a44:	86 83       	std	Z+6, r24	; 0x06
    4a46:	86 ea       	ldi	r24, 0xA6	; 166
    4a48:	91 e2       	ldi	r25, 0x21	; 33
    4a4a:	95 83       	std	Z+5, r25	; 0x05
    4a4c:	84 83       	std	Z+4, r24	; 0x04
    4a4e:	87 e8       	ldi	r24, 0x87	; 135
    4a50:	92 e0       	ldi	r25, 0x02	; 2
    4a52:	a0 e0       	ldi	r26, 0x00	; 0
    4a54:	81 83       	std	Z+1, r24	; 0x01
    4a56:	92 83       	std	Z+2, r25	; 0x02
    4a58:	a3 83       	std	Z+3, r26	; 0x03
    4a5a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4a5e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4a62:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4a66:	ed b7       	in	r30, 0x3d	; 61
    4a68:	fe b7       	in	r31, 0x3e	; 62
    4a6a:	97 83       	std	Z+7, r25	; 0x07
    4a6c:	86 83       	std	Z+6, r24	; 0x06
    4a6e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4a72:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4a76:	95 83       	std	Z+5, r25	; 0x05
    4a78:	84 83       	std	Z+4, r24	; 0x04
    4a7a:	89 e6       	ldi	r24, 0x69	; 105
    4a7c:	92 e0       	ldi	r25, 0x02	; 2
    4a7e:	a0 e0       	ldi	r26, 0x00	; 0
    4a80:	81 83       	std	Z+1, r24	; 0x01
    4a82:	92 83       	std	Z+2, r25	; 0x02
    4a84:	a3 83       	std	Z+3, r26	; 0x03
    4a86:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4a8a:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <__brkval>
    4a8e:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <__brkval+0x1>
    4a92:	ed b7       	in	r30, 0x3d	; 61
    4a94:	fe b7       	in	r31, 0x3e	; 62
    4a96:	95 83       	std	Z+5, r25	; 0x05
    4a98:	84 83       	std	Z+4, r24	; 0x04
    4a9a:	85 e5       	ldi	r24, 0x55	; 85
    4a9c:	92 e0       	ldi	r25, 0x02	; 2
    4a9e:	a0 e0       	ldi	r26, 0x00	; 0
    4aa0:	81 83       	std	Z+1, r24	; 0x01
    4aa2:	92 83       	std	Z+2, r25	; 0x02
    4aa4:	a3 83       	std	Z+3, r26	; 0x03
    4aa6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

}
    4aaa:	29 96       	adiw	r28, 0x09	; 9
    4aac:	e2 e0       	ldi	r30, 0x02	; 2
    4aae:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00004ab2 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4ab2:	ef 92       	push	r14
    4ab4:	ff 92       	push	r15
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	ad b7       	in	r26, 0x3d	; 61
    4ac0:	be b7       	in	r27, 0x3e	; 62
    4ac2:	17 97       	sbiw	r26, 0x07	; 7
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	f8 94       	cli
    4ac8:	be bf       	out	0x3e, r27	; 62
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	ad bf       	out	0x3d, r26	; 61
    4ace:	8c 01       	movw	r16, r24
    4ad0:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4ad2:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <calloc>
    4ad6:	ec 01       	movw	r28, r24
    if(!p)
    4ad8:	89 2b       	or	r24, r25
    4ada:	71 f4       	brne	.+28     	; 0x4af8 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4adc:	ed b7       	in	r30, 0x3d	; 61
    4ade:	fe b7       	in	r31, 0x3e	; 62
    4ae0:	f7 82       	std	Z+7, r15	; 0x07
    4ae2:	e6 82       	std	Z+6, r14	; 0x06
    4ae4:	15 83       	std	Z+5, r17	; 0x05
    4ae6:	04 83       	std	Z+4, r16	; 0x04
    4ae8:	8a e3       	ldi	r24, 0x3A	; 58
    4aea:	92 e0       	ldi	r25, 0x02	; 2
    4aec:	a0 e0       	ldi	r26, 0x00	; 0
    4aee:	81 83       	std	Z+1, r24	; 0x01
    4af0:	92 83       	std	Z+2, r25	; 0x02
    4af2:	a3 83       	std	Z+3, r26	; 0x03
    4af4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }
    return(p);
}
    4af8:	ce 01       	movw	r24, r28
    4afa:	cd b7       	in	r28, 0x3d	; 61
    4afc:	de b7       	in	r29, 0x3e	; 62
    4afe:	27 96       	adiw	r28, 0x07	; 7
    4b00:	e6 e0       	ldi	r30, 0x06	; 6
    4b02:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00004b06 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	00 d0       	rcall	.+0      	; 0x4b10 <safemalloc+0xa>
    4b10:	00 d0       	rcall	.+0      	; 0x4b12 <safemalloc+0xc>
    4b12:	1f 92       	push	r1
    4b14:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4b16:	61 e0       	ldi	r22, 0x01	; 1
    4b18:	70 e0       	ldi	r23, 0x00	; 0
    4b1a:	0e 94 15 e5 	call	0x1ca2a	; 0x1ca2a <calloc>
    4b1e:	ec 01       	movw	r28, r24
    if(!p)
    4b20:	89 2b       	or	r24, r25
    4b22:	61 f4       	brne	.+24     	; 0x4b3c <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4b24:	ed b7       	in	r30, 0x3d	; 61
    4b26:	fe b7       	in	r31, 0x3e	; 62
    4b28:	15 83       	std	Z+5, r17	; 0x05
    4b2a:	04 83       	std	Z+4, r16	; 0x04
    4b2c:	82 e2       	ldi	r24, 0x22	; 34
    4b2e:	92 e0       	ldi	r25, 0x02	; 2
    4b30:	a0 e0       	ldi	r26, 0x00	; 0
    4b32:	81 83       	std	Z+1, r24	; 0x01
    4b34:	92 83       	std	Z+2, r25	; 0x02
    4b36:	a3 83       	std	Z+3, r26	; 0x03
    4b38:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }
    return(p);
}
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
    4b42:	25 96       	adiw	r28, 0x05	; 5
    4b44:	e4 e0       	ldi	r30, 0x04	; 4
    4b46:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00004b4a <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4b4a:	ad b7       	in	r26, 0x3d	; 61
    4b4c:	be b7       	in	r27, 0x3e	; 62
    4b4e:	17 97       	sbiw	r26, 0x07	; 7
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	be bf       	out	0x3e, r27	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4b5a:	00 97       	sbiw	r24, 0x00	; 0
    4b5c:	11 f1       	breq	.+68     	; 0x4ba2 <safefree+0x58>
        return;

    if(__brkval)
    4b5e:	20 91 a2 21 	lds	r18, 0x21A2	; 0x8021a2 <__brkval>
    4b62:	30 91 a3 21 	lds	r19, 0x21A3	; 0x8021a3 <__brkval+0x1>
    4b66:	21 15       	cp	r18, r1
    4b68:	31 05       	cpc	r19, r1
    4b6a:	11 f4       	brne	.+4      	; 0x4b70 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4b6c:	26 ea       	ldi	r18, 0xA6	; 166
    4b6e:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4b70:	41 e2       	ldi	r20, 0x21	; 33
    4b72:	86 3a       	cpi	r24, 0xA6	; 166
    4b74:	94 07       	cpc	r25, r20
    4b76:	30 f0       	brcs	.+12     	; 0x4b84 <safefree+0x3a>
    4b78:	28 17       	cp	r18, r24
    4b7a:	39 07       	cpc	r19, r25
    4b7c:	18 f0       	brcs	.+6      	; 0x4b84 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4b7e:	0e 94 c7 e5 	call	0x1cb8e	; 0x1cb8e <free>
        return;
    4b82:	0f c0       	rjmp	.+30     	; 0x4ba2 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4b84:	ed b7       	in	r30, 0x3d	; 61
    4b86:	fe b7       	in	r31, 0x3e	; 62
    4b88:	37 83       	std	Z+7, r19	; 0x07
    4b8a:	26 83       	std	Z+6, r18	; 0x06
    4b8c:	95 83       	std	Z+5, r25	; 0x05
    4b8e:	84 83       	std	Z+4, r24	; 0x04
    4b90:	8d ef       	ldi	r24, 0xFD	; 253
    4b92:	91 e0       	ldi	r25, 0x01	; 1
    4b94:	a0 e0       	ldi	r26, 0x00	; 0
    4b96:	81 83       	std	Z+1, r24	; 0x01
    4b98:	92 83       	std	Z+2, r25	; 0x02
    4b9a:	a3 83       	std	Z+3, r26	; 0x03
    4b9c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    PrintFree();
    4ba0:	f7 de       	rcall	.-530    	; 0x4990 <PrintFree>
}
    4ba2:	ad b7       	in	r26, 0x3d	; 61
    4ba4:	be b7       	in	r27, 0x3e	; 62
    4ba6:	17 96       	adiw	r26, 0x07	; 7
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	be bf       	out	0x3e, r27	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	ad bf       	out	0x3d, r26	; 61
    4bb2:	08 95       	ret

00004bb4 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4bb4:	64 36       	cpi	r22, 0x64	; 100
    4bb6:	71 05       	cpc	r23, r1
    4bb8:	81 05       	cpc	r24, r1
    4bba:	91 05       	cpc	r25, r1
    4bbc:	58 f0       	brcs	.+22     	; 0x4bd4 <delayus+0x20>
    {
        us -= 100U;
    4bbe:	64 56       	subi	r22, 0x64	; 100
    4bc0:	71 09       	sbc	r23, r1
    4bc2:	81 09       	sbc	r24, r1
    4bc4:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4bc6:	e3 ef       	ldi	r30, 0xF3	; 243
    4bc8:	f1 e0       	ldi	r31, 0x01	; 1
    4bca:	31 97       	sbiw	r30, 0x01	; 1
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <delayus+0x16>
    4bce:	00 c0       	rjmp	.+0      	; 0x4bd0 <delayus+0x1c>
    4bd0:	00 00       	nop
    4bd2:	f0 cf       	rjmp	.-32     	; 0x4bb4 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4bd4:	6a 30       	cpi	r22, 0x0A	; 10
    4bd6:	71 05       	cpc	r23, r1
    4bd8:	81 05       	cpc	r24, r1
    4bda:	91 05       	cpc	r25, r1
    4bdc:	48 f0       	brcs	.+18     	; 0x4bf0 <delayus+0x3c>
    {
        us -= 10U;
    4bde:	6a 50       	subi	r22, 0x0A	; 10
    4be0:	71 09       	sbc	r23, r1
    4be2:	81 09       	sbc	r24, r1
    4be4:	91 09       	sbc	r25, r1
    4be6:	f2 e4       	ldi	r31, 0x42	; 66
    4be8:	fa 95       	dec	r31
    4bea:	f1 f7       	brne	.-4      	; 0x4be8 <delayus+0x34>
    4bec:	00 c0       	rjmp	.+0      	; 0x4bee <delayus+0x3a>
    4bee:	f2 cf       	rjmp	.-28     	; 0x4bd4 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4bf0:	61 15       	cp	r22, r1
    4bf2:	71 05       	cpc	r23, r1
    4bf4:	81 05       	cpc	r24, r1
    4bf6:	91 05       	cpc	r25, r1
    4bf8:	49 f0       	breq	.+18     	; 0x4c0c <delayus+0x58>
    {
        --us;
    4bfa:	61 50       	subi	r22, 0x01	; 1
    4bfc:	71 09       	sbc	r23, r1
    4bfe:	81 09       	sbc	r24, r1
    4c00:	91 09       	sbc	r25, r1
    4c02:	26 e0       	ldi	r18, 0x06	; 6
    4c04:	2a 95       	dec	r18
    4c06:	f1 f7       	brne	.-4      	; 0x4c04 <delayus+0x50>
    4c08:	00 c0       	rjmp	.+0      	; 0x4c0a <delayus+0x56>
    4c0a:	f2 cf       	rjmp	.-28     	; 0x4bf0 <delayus+0x3c>
        _delay_us(1);
    }
}
    4c0c:	08 95       	ret

00004c0e <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4c0e:	61 15       	cp	r22, r1
    4c10:	71 05       	cpc	r23, r1
    4c12:	81 05       	cpc	r24, r1
    4c14:	91 05       	cpc	r25, r1
    4c16:	09 f4       	brne	.+2      	; 0x4c1a <delayms+0xc>
    4c18:	41 c0       	rjmp	.+130    	; 0x4c9c <delayms+0x8e>
    4c1a:	e3 ef       	ldi	r30, 0xF3	; 243
    4c1c:	f1 e0       	ldi	r31, 0x01	; 1
    4c1e:	31 97       	sbiw	r30, 0x01	; 1
    4c20:	f1 f7       	brne	.-4      	; 0x4c1e <delayms+0x10>
    4c22:	00 c0       	rjmp	.+0      	; 0x4c24 <delayms+0x16>
    4c24:	00 00       	nop
    4c26:	e3 ef       	ldi	r30, 0xF3	; 243
    4c28:	f1 e0       	ldi	r31, 0x01	; 1
    4c2a:	31 97       	sbiw	r30, 0x01	; 1
    4c2c:	f1 f7       	brne	.-4      	; 0x4c2a <delayms+0x1c>
    4c2e:	00 c0       	rjmp	.+0      	; 0x4c30 <delayms+0x22>
    4c30:	00 00       	nop
    4c32:	e3 ef       	ldi	r30, 0xF3	; 243
    4c34:	f1 e0       	ldi	r31, 0x01	; 1
    4c36:	31 97       	sbiw	r30, 0x01	; 1
    4c38:	f1 f7       	brne	.-4      	; 0x4c36 <delayms+0x28>
    4c3a:	00 c0       	rjmp	.+0      	; 0x4c3c <delayms+0x2e>
    4c3c:	00 00       	nop
    4c3e:	e3 ef       	ldi	r30, 0xF3	; 243
    4c40:	f1 e0       	ldi	r31, 0x01	; 1
    4c42:	31 97       	sbiw	r30, 0x01	; 1
    4c44:	f1 f7       	brne	.-4      	; 0x4c42 <delayms+0x34>
    4c46:	00 c0       	rjmp	.+0      	; 0x4c48 <delayms+0x3a>
    4c48:	00 00       	nop
    4c4a:	e3 ef       	ldi	r30, 0xF3	; 243
    4c4c:	f1 e0       	ldi	r31, 0x01	; 1
    4c4e:	31 97       	sbiw	r30, 0x01	; 1
    4c50:	f1 f7       	brne	.-4      	; 0x4c4e <delayms+0x40>
    4c52:	00 c0       	rjmp	.+0      	; 0x4c54 <delayms+0x46>
    4c54:	00 00       	nop
    4c56:	e3 ef       	ldi	r30, 0xF3	; 243
    4c58:	f1 e0       	ldi	r31, 0x01	; 1
    4c5a:	31 97       	sbiw	r30, 0x01	; 1
    4c5c:	f1 f7       	brne	.-4      	; 0x4c5a <delayms+0x4c>
    4c5e:	00 c0       	rjmp	.+0      	; 0x4c60 <delayms+0x52>
    4c60:	00 00       	nop
    4c62:	e3 ef       	ldi	r30, 0xF3	; 243
    4c64:	f1 e0       	ldi	r31, 0x01	; 1
    4c66:	31 97       	sbiw	r30, 0x01	; 1
    4c68:	f1 f7       	brne	.-4      	; 0x4c66 <delayms+0x58>
    4c6a:	00 c0       	rjmp	.+0      	; 0x4c6c <delayms+0x5e>
    4c6c:	00 00       	nop
    4c6e:	e3 ef       	ldi	r30, 0xF3	; 243
    4c70:	f1 e0       	ldi	r31, 0x01	; 1
    4c72:	31 97       	sbiw	r30, 0x01	; 1
    4c74:	f1 f7       	brne	.-4      	; 0x4c72 <delayms+0x64>
    4c76:	00 c0       	rjmp	.+0      	; 0x4c78 <delayms+0x6a>
    4c78:	00 00       	nop
    4c7a:	e3 ef       	ldi	r30, 0xF3	; 243
    4c7c:	f1 e0       	ldi	r31, 0x01	; 1
    4c7e:	31 97       	sbiw	r30, 0x01	; 1
    4c80:	f1 f7       	brne	.-4      	; 0x4c7e <delayms+0x70>
    4c82:	00 c0       	rjmp	.+0      	; 0x4c84 <delayms+0x76>
    4c84:	00 00       	nop
    4c86:	e3 ef       	ldi	r30, 0xF3	; 243
    4c88:	f1 e0       	ldi	r31, 0x01	; 1
    4c8a:	31 97       	sbiw	r30, 0x01	; 1
    4c8c:	f1 f7       	brne	.-4      	; 0x4c8a <delayms+0x7c>
    4c8e:	00 c0       	rjmp	.+0      	; 0x4c90 <delayms+0x82>
    4c90:	00 00       	nop
    4c92:	61 50       	subi	r22, 0x01	; 1
    4c94:	71 09       	sbc	r23, r1
    4c96:	81 09       	sbc	r24, r1
    4c98:	91 09       	sbc	r25, r1
    4c9a:	b9 cf       	rjmp	.-142    	; 0x4c0e <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4c9c:	08 95       	ret

00004c9e <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4c9e:	81 11       	cpse	r24, r1
    4ca0:	0e c0       	rjmp	.+28     	; 0x4cbe <uart_rx_flush+0x20>
    4ca2:	f8 94       	cli
    4ca4:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <uarts+0x4>
    4ca8:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <uarts+0x3>
    4cac:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <uarts>
    4cb0:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    4cb4:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <uarts+0x2>
    4cb8:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <uarts+0x5>
    4cbc:	78 94       	sei
    4cbe:	08 95       	ret

00004cc0 <uart_ubr>:
    4cc0:	4f 92       	push	r4
    4cc2:	5f 92       	push	r5
    4cc4:	6f 92       	push	r6
    4cc6:	7f 92       	push	r7
    4cc8:	8f 92       	push	r8
    4cca:	9f 92       	push	r9
    4ccc:	af 92       	push	r10
    4cce:	bf 92       	push	r11
    4cd0:	cf 92       	push	r12
    4cd2:	df 92       	push	r13
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	cf 93       	push	r28
    4cda:	df 93       	push	r29
    4cdc:	5a 01       	movw	r10, r20
    4cde:	e9 01       	movw	r28, r18
    4ce0:	0e 94 b3 e3 	call	0x1c766	; 0x1c766 <__floatunsisf>
    4ce4:	2b 01       	movw	r4, r22
    4ce6:	3c 01       	movw	r6, r24
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	40 e0       	ldi	r20, 0x00	; 0
    4cee:	51 e4       	ldi	r21, 0x41	; 65
    4cf0:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    4cf4:	9b 01       	movw	r18, r22
    4cf6:	ac 01       	movw	r20, r24
    4cf8:	60 e8       	ldi	r22, 0x80	; 128
    4cfa:	76 e9       	ldi	r23, 0x96	; 150
    4cfc:	88 e9       	ldi	r24, 0x98	; 152
    4cfe:	9b e4       	ldi	r25, 0x4B	; 75
    4d00:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 e8       	ldi	r20, 0x80	; 128
    4d0a:	5f e3       	ldi	r21, 0x3F	; 63
    4d0c:	0e 94 b1 e2 	call	0x1c562	; 0x1c562 <__subsf3>
    4d10:	0e 94 cc e4 	call	0x1c998	; 0x1c998 <round>
    4d14:	0e 94 87 e3 	call	0x1c70e	; 0x1c70e <__fixunssfsi>
    4d18:	6b 01       	movw	r12, r22
    4d1a:	7c 01       	movw	r14, r24
    4d1c:	c1 14       	cp	r12, r1
    4d1e:	80 e1       	ldi	r24, 0x10	; 16
    4d20:	d8 06       	cpc	r13, r24
    4d22:	e1 04       	cpc	r14, r1
    4d24:	f1 04       	cpc	r15, r1
    4d26:	58 f4       	brcc	.+22     	; 0x4d3e <uart_ubr+0x7e>
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	f5 01       	movw	r30, r10
    4d2e:	91 83       	std	Z+1, r25	; 0x01
    4d30:	80 83       	st	Z, r24
    4d32:	81 2c       	mov	r8, r1
    4d34:	91 2c       	mov	r9, r1
    4d36:	a1 2c       	mov	r10, r1
    4d38:	21 e4       	ldi	r18, 0x41	; 65
    4d3a:	b2 2e       	mov	r11, r18
    4d3c:	31 c0       	rjmp	.+98     	; 0x4da0 <uart_ubr+0xe0>
    4d3e:	f5 01       	movw	r30, r10
    4d40:	11 82       	std	Z+1, r1	; 0x01
    4d42:	10 82       	st	Z, r1
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	40 e8       	ldi	r20, 0x80	; 128
    4d4a:	51 e4       	ldi	r21, 0x41	; 65
    4d4c:	c3 01       	movw	r24, r6
    4d4e:	b2 01       	movw	r22, r4
    4d50:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    4d54:	9b 01       	movw	r18, r22
    4d56:	ac 01       	movw	r20, r24
    4d58:	60 e8       	ldi	r22, 0x80	; 128
    4d5a:	76 e9       	ldi	r23, 0x96	; 150
    4d5c:	88 e9       	ldi	r24, 0x98	; 152
    4d5e:	9b e4       	ldi	r25, 0x4B	; 75
    4d60:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	40 e8       	ldi	r20, 0x80	; 128
    4d6a:	5f e3       	ldi	r21, 0x3F	; 63
    4d6c:	0e 94 b1 e2 	call	0x1c562	; 0x1c562 <__subsf3>
    4d70:	0e 94 cc e4 	call	0x1c998	; 0x1c998 <round>
    4d74:	0e 94 87 e3 	call	0x1c70e	; 0x1c70e <__fixunssfsi>
    4d78:	6b 01       	movw	r12, r22
    4d7a:	7c 01       	movw	r14, r24
    4d7c:	81 2c       	mov	r8, r1
    4d7e:	91 2c       	mov	r9, r1
    4d80:	90 e8       	ldi	r25, 0x80	; 128
    4d82:	a9 2e       	mov	r10, r25
    4d84:	91 e4       	ldi	r25, 0x41	; 65
    4d86:	b9 2e       	mov	r11, r25
    4d88:	c1 14       	cp	r12, r1
    4d8a:	f0 e1       	ldi	r31, 0x10	; 16
    4d8c:	df 06       	cpc	r13, r31
    4d8e:	e1 04       	cpc	r14, r1
    4d90:	f1 04       	cpc	r15, r1
    4d92:	30 f0       	brcs	.+12     	; 0x4da0 <uart_ubr+0xe0>
    4d94:	cc 24       	eor	r12, r12
    4d96:	ca 94       	dec	r12
    4d98:	8f e0       	ldi	r24, 0x0F	; 15
    4d9a:	d8 2e       	mov	r13, r24
    4d9c:	e1 2c       	mov	r14, r1
    4d9e:	f1 2c       	mov	r15, r1
    4da0:	c7 01       	movw	r24, r14
    4da2:	b6 01       	movw	r22, r12
    4da4:	6f 5f       	subi	r22, 0xFF	; 255
    4da6:	7f 4f       	sbci	r23, 0xFF	; 255
    4da8:	8f 4f       	sbci	r24, 0xFF	; 255
    4daa:	9f 4f       	sbci	r25, 0xFF	; 255
    4dac:	0e 94 b3 e3 	call	0x1c766	; 0x1c766 <__floatunsisf>
    4db0:	a5 01       	movw	r20, r10
    4db2:	94 01       	movw	r18, r8
    4db4:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    4db8:	9b 01       	movw	r18, r22
    4dba:	ac 01       	movw	r20, r24
    4dbc:	60 e8       	ldi	r22, 0x80	; 128
    4dbe:	76 e9       	ldi	r23, 0x96	; 150
    4dc0:	88 e9       	ldi	r24, 0x98	; 152
    4dc2:	9b e4       	ldi	r25, 0x4B	; 75
    4dc4:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    4dc8:	0e 94 87 e3 	call	0x1c70e	; 0x1c70e <__fixunssfsi>
    4dcc:	68 83       	st	Y, r22
    4dce:	79 83       	std	Y+1, r23	; 0x01
    4dd0:	8a 83       	std	Y+2, r24	; 0x02
    4dd2:	9b 83       	std	Y+3, r25	; 0x03
    4dd4:	c6 01       	movw	r24, r12
    4dd6:	df 91       	pop	r29
    4dd8:	cf 91       	pop	r28
    4dda:	ff 90       	pop	r15
    4ddc:	ef 90       	pop	r14
    4dde:	df 90       	pop	r13
    4de0:	cf 90       	pop	r12
    4de2:	bf 90       	pop	r11
    4de4:	af 90       	pop	r10
    4de6:	9f 90       	pop	r9
    4de8:	8f 90       	pop	r8
    4dea:	7f 90       	pop	r7
    4dec:	6f 90       	pop	r6
    4dee:	5f 90       	pop	r5
    4df0:	4f 90       	pop	r4
    4df2:	08 95       	ret

00004df4 <uart_init>:
    4df4:	a6 e0       	ldi	r26, 0x06	; 6
    4df6:	b0 e0       	ldi	r27, 0x00	; 0
    4df8:	e0 e0       	ldi	r30, 0x00	; 0
    4dfa:	f7 e2       	ldi	r31, 0x27	; 39
    4dfc:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    4e00:	1e 82       	std	Y+6, r1	; 0x06
    4e02:	1d 82       	std	Y+5, r1	; 0x05
    4e04:	81 11       	cpse	r24, r1
    4e06:	36 c0       	rjmp	.+108    	; 0x4e74 <uart_init+0x80>
    4e08:	cb 01       	movw	r24, r22
    4e0a:	ba 01       	movw	r22, r20
    4e0c:	9e 01       	movw	r18, r28
    4e0e:	2f 5f       	subi	r18, 0xFF	; 255
    4e10:	3f 4f       	sbci	r19, 0xFF	; 255
    4e12:	ae 01       	movw	r20, r28
    4e14:	4b 5f       	subi	r20, 0xFB	; 251
    4e16:	5f 4f       	sbci	r21, 0xFF	; 255
    4e18:	53 df       	rcall	.-346    	; 0x4cc0 <uart_ubr>
    4e1a:	f8 94       	cli
    4e1c:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <uarts+0x4>
    4e20:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <uarts+0x3>
    4e24:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <uarts>
    4e28:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    4e2c:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <uarts+0x2>
    4e30:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <uarts+0x5>
    4e34:	78 94       	sei
    4e36:	f8 94       	cli
    4e38:	58 9a       	sbi	0x0b, 0	; 11
    4e3a:	59 9a       	sbi	0x0b, 1	; 11
    4e3c:	50 98       	cbi	0x0a, 0	; 10
    4e3e:	51 9a       	sbi	0x0a, 1	; 10
    4e40:	28 e9       	ldi	r18, 0x98	; 152
    4e42:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4e46:	2d 81       	ldd	r18, Y+5	; 0x05
    4e48:	3e 81       	ldd	r19, Y+6	; 0x06
    4e4a:	23 2b       	or	r18, r19
    4e4c:	19 f0       	breq	.+6      	; 0x4e54 <uart_init+0x60>
    4e4e:	22 e0       	ldi	r18, 0x02	; 2
    4e50:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4e54:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4e58:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4e5c:	78 94       	sei
    4e5e:	63 ef       	ldi	r22, 0xF3	; 243
    4e60:	77 e2       	ldi	r23, 0x27	; 39
    4e62:	88 e0       	ldi	r24, 0x08	; 8
    4e64:	98 e2       	ldi	r25, 0x28	; 40
    4e66:	0e 94 67 77 	call	0xeece	; 0xeece <fdevopen>
    4e6a:	69 81       	ldd	r22, Y+1	; 0x01
    4e6c:	7a 81       	ldd	r23, Y+2	; 0x02
    4e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e70:	9c 81       	ldd	r25, Y+4	; 0x04
    4e72:	03 c0       	rjmp	.+6      	; 0x4e7a <uart_init+0x86>
    4e74:	60 e0       	ldi	r22, 0x00	; 0
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	cb 01       	movw	r24, r22
    4e7a:	26 96       	adiw	r28, 0x06	; 6
    4e7c:	e2 e0       	ldi	r30, 0x02	; 2
    4e7e:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00004e82 <uart_rx_interrupt>:
    4e82:	cf 93       	push	r28
    4e84:	df 93       	push	r29
    4e86:	27 e5       	ldi	r18, 0x57	; 87
    4e88:	82 9f       	mul	r24, r18
    4e8a:	c0 01       	movw	r24, r0
    4e8c:	11 24       	eor	r1, r1
    4e8e:	fc 01       	movw	r30, r24
    4e90:	eb 51       	subi	r30, 0x1B	; 27
    4e92:	f6 4e       	sbci	r31, 0xE6	; 230
    4e94:	83 81       	ldd	r24, Z+3	; 0x03
    4e96:	94 81       	ldd	r25, Z+4	; 0x04
    4e98:	80 35       	cpi	r24, 0x50	; 80
    4e9a:	91 05       	cpc	r25, r1
    4e9c:	84 f4       	brge	.+32     	; 0x4ebe <uart_rx_interrupt+0x3c>
    4e9e:	30 81       	ld	r19, Z
    4ea0:	21 e0       	ldi	r18, 0x01	; 1
    4ea2:	23 0f       	add	r18, r19
    4ea4:	20 83       	st	Z, r18
    4ea6:	ef 01       	movw	r28, r30
    4ea8:	c3 0f       	add	r28, r19
    4eaa:	d1 1d       	adc	r29, r1
    4eac:	6f 77       	andi	r22, 0x7F	; 127
    4eae:	6e 83       	std	Y+6, r22	; 0x06
    4eb0:	01 96       	adiw	r24, 0x01	; 1
    4eb2:	94 83       	std	Z+4, r25	; 0x04
    4eb4:	83 83       	std	Z+3, r24	; 0x03
    4eb6:	20 35       	cpi	r18, 0x50	; 80
    4eb8:	28 f0       	brcs	.+10     	; 0x4ec4 <uart_rx_interrupt+0x42>
    4eba:	10 82       	st	Z, r1
    4ebc:	03 c0       	rjmp	.+6      	; 0x4ec4 <uart_rx_interrupt+0x42>
    4ebe:	85 81       	ldd	r24, Z+5	; 0x05
    4ec0:	81 60       	ori	r24, 0x01	; 1
    4ec2:	85 83       	std	Z+5, r24	; 0x05
    4ec4:	df 91       	pop	r29
    4ec6:	cf 91       	pop	r28
    4ec8:	08 95       	ret

00004eca <__vector_20>:
    4eca:	1f 92       	push	r1
    4ecc:	0f 92       	push	r0
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	0f 92       	push	r0
    4ed2:	11 24       	eor	r1, r1
    4ed4:	0b b6       	in	r0, 0x3b	; 59
    4ed6:	0f 92       	push	r0
    4ed8:	2f 93       	push	r18
    4eda:	3f 93       	push	r19
    4edc:	4f 93       	push	r20
    4ede:	5f 93       	push	r21
    4ee0:	6f 93       	push	r22
    4ee2:	7f 93       	push	r23
    4ee4:	8f 93       	push	r24
    4ee6:	9f 93       	push	r25
    4ee8:	af 93       	push	r26
    4eea:	bf 93       	push	r27
    4eec:	ef 93       	push	r30
    4eee:	ff 93       	push	r31
    4ef0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4ef4:	80 e0       	ldi	r24, 0x00	; 0
    4ef6:	c5 df       	rcall	.-118    	; 0x4e82 <uart_rx_interrupt>
    4ef8:	ff 91       	pop	r31
    4efa:	ef 91       	pop	r30
    4efc:	bf 91       	pop	r27
    4efe:	af 91       	pop	r26
    4f00:	9f 91       	pop	r25
    4f02:	8f 91       	pop	r24
    4f04:	7f 91       	pop	r23
    4f06:	6f 91       	pop	r22
    4f08:	5f 91       	pop	r21
    4f0a:	4f 91       	pop	r20
    4f0c:	3f 91       	pop	r19
    4f0e:	2f 91       	pop	r18
    4f10:	0f 90       	pop	r0
    4f12:	0b be       	out	0x3b, r0	; 59
    4f14:	0f 90       	pop	r0
    4f16:	0f be       	out	0x3f, r0	; 63
    4f18:	0f 90       	pop	r0
    4f1a:	1f 90       	pop	r1
    4f1c:	18 95       	reti

00004f1e <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    4f1e:	81 11       	cpse	r24, r1
    4f20:	07 c0       	rjmp	.+14     	; 0x4f30 <uart_rx_count+0x12>
        return(EOF);

    cli();
    4f22:	f8 94       	cli

    count = uarts[uart].rx_count;
    4f24:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <uarts+0x3>
    4f28:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <uarts+0x4>

    sei();
    4f2c:	78 94       	sei

    return (count );
    4f2e:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    4f30:	8f ef       	ldi	r24, 0xFF	; 255
    4f32:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    4f34:	08 95       	ret

00004f36 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    4f36:	81 11       	cpse	r24, r1
    4f38:	21 c0       	rjmp	.+66     	; 0x4f7c <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	f0 df       	rcall	.-32     	; 0x4f1e <uart_rx_count>
    4f3e:	18 16       	cp	r1, r24
    4f40:	19 06       	cpc	r1, r25
    4f42:	dc f7       	brge	.-10     	; 0x4f3a <uart_get_tail+0x4>
        ;

    cli();
    4f44:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    4f46:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <uarts+0x1>
    4f4a:	91 e0       	ldi	r25, 0x01	; 1
    4f4c:	9e 0f       	add	r25, r30
    4f4e:	90 93 e6 19 	sts	0x19E6, r25	; 0x8019e6 <uarts+0x1>
    4f52:	f0 e0       	ldi	r31, 0x00	; 0
    4f54:	eb 51       	subi	r30, 0x1B	; 27
    4f56:	f6 4e       	sbci	r31, 0xE6	; 230
    4f58:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    4f5a:	90 35       	cpi	r25, 0x50	; 80
    4f5c:	10 f0       	brcs	.+4      	; 0x4f62 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    4f5e:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    uarts[uart].rx_count--;
    4f62:	20 91 e8 19 	lds	r18, 0x19E8	; 0x8019e8 <uarts+0x3>
    4f66:	30 91 e9 19 	lds	r19, 0x19E9	; 0x8019e9 <uarts+0x4>
    4f6a:	21 50       	subi	r18, 0x01	; 1
    4f6c:	31 09       	sbc	r19, r1
    4f6e:	30 93 e9 19 	sts	0x19E9, r19	; 0x8019e9 <uarts+0x4>
    4f72:	20 93 e8 19 	sts	0x19E8, r18	; 0x8019e8 <uarts+0x3>
    sei();
    4f76:	78 94       	sei

    return (c & 0xff);
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    4f7c:	8f ef       	ldi	r24, 0xFF	; 255
    4f7e:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    4f80:	08 95       	ret

00004f82 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    4f82:	d9 df       	rcall	.-78     	; 0x4f36 <uart_get_tail>
}
    4f84:	99 27       	eor	r25, r25
    4f86:	08 95       	ret

00004f88 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    4f88:	61 11       	cpse	r22, r1
    4f8a:	09 c0       	rjmp	.+18     	; 0x4f9e <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    4f8c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f90:	25 ff       	sbrs	r18, 5
    4f92:	fc cf       	rjmp	.-8      	; 0x4f8c <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    4f94:	28 2f       	mov	r18, r24
    4f96:	2f 77       	andi	r18, 0x7F	; 127
    4f98:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    4f9c:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    4f9e:	61 30       	cpi	r22, 0x01	; 1
    4fa0:	49 f4       	brne	.+18     	; 0x4fb4 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    4fa2:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4fa6:	25 ff       	sbrs	r18, 5
    4fa8:	fc cf       	rjmp	.-8      	; 0x4fa2 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    4faa:	28 2f       	mov	r18, r24
    4fac:	2f 77       	andi	r18, 0x7F	; 127
    4fae:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4fb2:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    4fb4:	8f ef       	ldi	r24, 0xFF	; 255
    4fb6:	9f ef       	ldi	r25, 0xFF	; 255
}
    4fb8:	08 95       	ret

00004fba <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    4fba:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    4fbc:	81 11       	cpse	r24, r1
    4fbe:	0f c0       	rjmp	.+30     	; 0x4fde <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    4fc0:	e0 df       	rcall	.-64     	; 0x4f82 <uart_rx_byte>
    4fc2:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	df df       	rcall	.-66     	; 0x4f88 <uart_tx_byte>
    if(c == '\r')
    4fca:	cd 30       	cpi	r28, 0x0D	; 13
    4fcc:	29 f4       	brne	.+10     	; 0x4fd8 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    4fce:	60 e0       	ldi	r22, 0x00	; 0
    4fd0:	8a e0       	ldi	r24, 0x0A	; 10
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	d9 df       	rcall	.-78     	; 0x4f88 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    4fd6:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    4fd8:	8c 2f       	mov	r24, r28
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	02 c0       	rjmp	.+4      	; 0x4fe2 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    4fde:	8f ef       	ldi	r24, 0xFF	; 255
    4fe0:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    4fe2:	cf 91       	pop	r28
    4fe4:	08 95       	ret

00004fe6 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	e8 cf       	rjmp	.-48     	; 0x4fba <uart_getchar>
}
    4fea:	08 95       	ret

00004fec <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    4fec:	1f 93       	push	r17
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29
    4ff2:	ec 01       	movw	r28, r24
    4ff4:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    4ff6:	c8 df       	rcall	.-112    	; 0x4f88 <uart_tx_byte>

    if( c == '\n' )
    4ff8:	ca 30       	cpi	r28, 0x0A	; 10
    4ffa:	d1 05       	cpc	r29, r1
    4ffc:	21 f4       	brne	.+8      	; 0x5006 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    4ffe:	61 2f       	mov	r22, r17
    5000:	8d e0       	ldi	r24, 0x0D	; 13
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	c1 df       	rcall	.-126    	; 0x4f88 <uart_tx_byte>

    return(c);
}
    5006:	ce 01       	movw	r24, r28
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	1f 91       	pop	r17
    500e:	08 95       	ret

00005010 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    5010:	cf 93       	push	r28
    5012:	df 93       	push	r29
    5014:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5016:	60 e0       	ldi	r22, 0x00	; 0
    5018:	70 e0       	ldi	r23, 0x00	; 0
    501a:	e8 df       	rcall	.-48     	; 0x4fec <uart_putchar>
    return(c);
}
    501c:	ce 01       	movw	r24, r28
    501e:	df 91       	pop	r29
    5020:	cf 91       	pop	r28
    5022:	08 95       	ret

00005024 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    5024:	7c cf       	rjmp	.-264    	; 0x4f1e <uart_rx_count>
}
    5026:	08 95       	ret

00005028 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5028:	cf 92       	push	r12
    502a:	df 92       	push	r13
    502c:	ef 92       	push	r14
    502e:	ff 92       	push	r15
    5030:	6b 01       	movw	r12, r22
    5032:	7c 01       	movw	r14, r24
    5034:	80 91 49 17 	lds	r24, 0x1749	; 0x801749 <SPI0_Speed_value>
    5038:	90 91 4a 17 	lds	r25, 0x174A	; 0x80174a <SPI0_Speed_value+0x1>
    503c:	a0 91 4b 17 	lds	r26, 0x174B	; 0x80174b <SPI0_Speed_value+0x2>
    5040:	b0 91 4c 17 	lds	r27, 0x174C	; 0x80174c <SPI0_Speed_value+0x3>
    5044:	8c 15       	cp	r24, r12
    5046:	9d 05       	cpc	r25, r13
    5048:	ae 05       	cpc	r26, r14
    504a:	bf 05       	cpc	r27, r15
    504c:	09 f4       	brne	.+2      	; 0x5050 <SPI0_Speed+0x28>
    504e:	4e c0       	rjmp	.+156    	; 0x50ec <SPI0_Speed+0xc4>
    5050:	60 e0       	ldi	r22, 0x00	; 0
    5052:	7d e2       	ldi	r23, 0x2D	; 45
    5054:	81 e3       	ldi	r24, 0x31	; 49
    5056:	91 e0       	ldi	r25, 0x01	; 1
    5058:	a7 01       	movw	r20, r14
    505a:	96 01       	movw	r18, r12
    505c:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    5060:	20 38       	cpi	r18, 0x80	; 128
    5062:	31 05       	cpc	r19, r1
    5064:	41 05       	cpc	r20, r1
    5066:	51 05       	cpc	r21, r1
    5068:	28 f4       	brcc	.+10     	; 0x5074 <SPI0_Speed+0x4c>
    506a:	20 34       	cpi	r18, 0x40	; 64
    506c:	31 05       	cpc	r19, r1
    506e:	41 05       	cpc	r20, r1
    5070:	51 05       	cpc	r21, r1
    5072:	30 f0       	brcs	.+12     	; 0x5080 <SPI0_Speed+0x58>
    5074:	8d b5       	in	r24, 0x2d	; 45
    5076:	8e 7f       	andi	r24, 0xFE	; 254
    5078:	8d bd       	out	0x2d, r24	; 45
    507a:	8c b5       	in	r24, 0x2c	; 44
    507c:	82 60       	ori	r24, 0x02	; 2
    507e:	1b c0       	rjmp	.+54     	; 0x50b6 <SPI0_Speed+0x8e>
    5080:	8d b5       	in	r24, 0x2d	; 45
    5082:	20 32       	cpi	r18, 0x20	; 32
    5084:	31 05       	cpc	r19, r1
    5086:	41 05       	cpc	r20, r1
    5088:	51 05       	cpc	r21, r1
    508a:	28 f0       	brcs	.+10     	; 0x5096 <SPI0_Speed+0x6e>
    508c:	81 60       	ori	r24, 0x01	; 1
    508e:	8d bd       	out	0x2d, r24	; 45
    5090:	8c b5       	in	r24, 0x2c	; 44
    5092:	82 60       	ori	r24, 0x02	; 2
    5094:	1f c0       	rjmp	.+62     	; 0x50d4 <SPI0_Speed+0xac>
    5096:	20 31       	cpi	r18, 0x10	; 16
    5098:	31 05       	cpc	r19, r1
    509a:	41 05       	cpc	r20, r1
    509c:	51 05       	cpc	r21, r1
    509e:	10 f0       	brcs	.+4      	; 0x50a4 <SPI0_Speed+0x7c>
    50a0:	8e 7f       	andi	r24, 0xFE	; 254
    50a2:	06 c0       	rjmp	.+12     	; 0x50b0 <SPI0_Speed+0x88>
    50a4:	28 30       	cpi	r18, 0x08	; 8
    50a6:	31 05       	cpc	r19, r1
    50a8:	41 05       	cpc	r20, r1
    50aa:	51 05       	cpc	r21, r1
    50ac:	40 f0       	brcs	.+16     	; 0x50be <SPI0_Speed+0x96>
    50ae:	81 60       	ori	r24, 0x01	; 1
    50b0:	8d bd       	out	0x2d, r24	; 45
    50b2:	8c b5       	in	r24, 0x2c	; 44
    50b4:	8d 7f       	andi	r24, 0xFD	; 253
    50b6:	8c bd       	out	0x2c, r24	; 44
    50b8:	8c b5       	in	r24, 0x2c	; 44
    50ba:	81 60       	ori	r24, 0x01	; 1
    50bc:	0e c0       	rjmp	.+28     	; 0x50da <SPI0_Speed+0xb2>
    50be:	24 30       	cpi	r18, 0x04	; 4
    50c0:	31 05       	cpc	r19, r1
    50c2:	41 05       	cpc	r20, r1
    50c4:	51 05       	cpc	r21, r1
    50c6:	10 f0       	brcs	.+4      	; 0x50cc <SPI0_Speed+0xa4>
    50c8:	8e 7f       	andi	r24, 0xFE	; 254
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <SPI0_Speed+0xa6>
    50cc:	81 60       	ori	r24, 0x01	; 1
    50ce:	8d bd       	out	0x2d, r24	; 45
    50d0:	8c b5       	in	r24, 0x2c	; 44
    50d2:	8d 7f       	andi	r24, 0xFD	; 253
    50d4:	8c bd       	out	0x2c, r24	; 44
    50d6:	8c b5       	in	r24, 0x2c	; 44
    50d8:	8e 7f       	andi	r24, 0xFE	; 254
    50da:	8c bd       	out	0x2c, r24	; 44
    50dc:	c0 92 49 17 	sts	0x1749, r12	; 0x801749 <SPI0_Speed_value>
    50e0:	d0 92 4a 17 	sts	0x174A, r13	; 0x80174a <SPI0_Speed_value+0x1>
    50e4:	e0 92 4b 17 	sts	0x174B, r14	; 0x80174b <SPI0_Speed_value+0x2>
    50e8:	f0 92 4c 17 	sts	0x174C, r15	; 0x80174c <SPI0_Speed_value+0x3>
    50ec:	ff 90       	pop	r15
    50ee:	ef 90       	pop	r14
    50f0:	df 90       	pop	r13
    50f2:	cf 90       	pop	r12
    50f4:	08 95       	ret

000050f6 <SPI0_Mode>:
    50f6:	cf 93       	push	r28
    50f8:	df 93       	push	r29
    50fa:	00 d0       	rcall	.+0      	; 0x50fc <SPI0_Mode+0x6>
    50fc:	00 d0       	rcall	.+0      	; 0x50fe <SPI0_Mode+0x8>
    50fe:	1f 92       	push	r1
    5100:	ec 01       	movw	r28, r24
    5102:	81 30       	cpi	r24, 0x01	; 1
    5104:	91 05       	cpc	r25, r1
    5106:	71 f0       	breq	.+28     	; 0x5124 <SPI0_Mode+0x2e>
    5108:	2c f4       	brge	.+10     	; 0x5114 <SPI0_Mode+0x1e>
    510a:	89 2b       	or	r24, r25
    510c:	c1 f4       	brne	.+48     	; 0x513e <SPI0_Mode+0x48>
    510e:	8c b5       	in	r24, 0x2c	; 44
    5110:	87 7f       	andi	r24, 0xF7	; 247
    5112:	11 c0       	rjmp	.+34     	; 0x5136 <SPI0_Mode+0x40>
    5114:	82 30       	cpi	r24, 0x02	; 2
    5116:	91 05       	cpc	r25, r1
    5118:	61 f0       	breq	.+24     	; 0x5132 <SPI0_Mode+0x3c>
    511a:	03 97       	sbiw	r24, 0x03	; 3
    511c:	81 f4       	brne	.+32     	; 0x513e <SPI0_Mode+0x48>
    511e:	8c b5       	in	r24, 0x2c	; 44
    5120:	88 60       	ori	r24, 0x08	; 8
    5122:	02 c0       	rjmp	.+4      	; 0x5128 <SPI0_Mode+0x32>
    5124:	8c b5       	in	r24, 0x2c	; 44
    5126:	87 7f       	andi	r24, 0xF7	; 247
    5128:	8c bd       	out	0x2c, r24	; 44
    512a:	8c b5       	in	r24, 0x2c	; 44
    512c:	84 60       	ori	r24, 0x04	; 4
    512e:	8c bd       	out	0x2c, r24	; 44
    5130:	12 c0       	rjmp	.+36     	; 0x5156 <SPI0_Mode+0x60>
    5132:	8c b5       	in	r24, 0x2c	; 44
    5134:	88 60       	ori	r24, 0x08	; 8
    5136:	8c bd       	out	0x2c, r24	; 44
    5138:	8c b5       	in	r24, 0x2c	; 44
    513a:	8b 7f       	andi	r24, 0xFB	; 251
    513c:	f8 cf       	rjmp	.-16     	; 0x512e <SPI0_Mode+0x38>
    513e:	ed b7       	in	r30, 0x3d	; 61
    5140:	fe b7       	in	r31, 0x3e	; 62
    5142:	d5 83       	std	Z+5, r29	; 0x05
    5144:	c4 83       	std	Z+4, r28	; 0x04
    5146:	84 e1       	ldi	r24, 0x14	; 20
    5148:	93 e0       	ldi	r25, 0x03	; 3
    514a:	a0 e0       	ldi	r26, 0x00	; 0
    514c:	81 83       	std	Z+1, r24	; 0x01
    514e:	92 83       	std	Z+2, r25	; 0x02
    5150:	a3 83       	std	Z+3, r26	; 0x03
    5152:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5156:	d0 93 48 17 	sts	0x1748, r29	; 0x801748 <SPI0_Mode_value+0x1>
    515a:	c0 93 47 17 	sts	0x1747, r28	; 0x801747 <SPI0_Mode_value>
    515e:	cd b7       	in	r28, 0x3d	; 61
    5160:	de b7       	in	r29, 0x3e	; 62
    5162:	25 96       	adiw	r28, 0x05	; 5
    5164:	e2 e0       	ldi	r30, 0x02	; 2
    5166:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000516a <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    516a:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    516c:	0d b4       	in	r0, 0x2d	; 45
    516e:	07 fe       	sbrs	r0, 7
    5170:	fd cf       	rjmp	.-6      	; 0x516c <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5172:	8e b5       	in	r24, 0x2e	; 46
}
    5174:	08 95       	ret

00005176 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5176:	cf 92       	push	r12
    5178:	df 92       	push	r13
    517a:	ef 92       	push	r14
    517c:	ff 92       	push	r15
    517e:	cf 93       	push	r28
    5180:	df 93       	push	r29
    5182:	1f 92       	push	r1
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
    5188:	6b 01       	movw	r12, r22
    518a:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    518c:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    518e:	2f 9a       	sbi	0x05, 7	; 5
    5190:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5192:	2d 9a       	sbi	0x05, 5	; 5
    5194:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5196:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5198:	2c 98       	cbi	0x05, 4	; 5
    519a:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    519c:	8c b5       	in	r24, 0x2c	; 44
    519e:	80 61       	ori	r24, 0x10	; 16
    51a0:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    51a2:	8c b5       	in	r24, 0x2c	; 44
    51a4:	80 64       	ori	r24, 0x40	; 64
    51a6:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    51a8:	8d b5       	in	r24, 0x2d	; 45
    51aa:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    51ac:	8e b5       	in	r24, 0x2e	; 46
    51ae:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	a0 df       	rcall	.-192    	; 0x50f6 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    51b6:	c7 01       	movw	r24, r14
    51b8:	b6 01       	movw	r22, r12
    51ba:	36 df       	rcall	.-404    	; 0x5028 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    51bc:	8f ef       	ldi	r24, 0xFF	; 255
    51be:	d5 df       	rcall	.-86     	; 0x516a <SPI0_TXRX_Byte>
    51c0:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	ff 90       	pop	r15
    51c8:	ef 90       	pop	r14
    51ca:	df 90       	pop	r13
    51cc:	cf 90       	pop	r12
    51ce:	08 95       	ret

000051d0 <SPI0_TX>:
    51d0:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    51d2:	1f 93       	push	r17
    51d4:	cf 93       	push	r28
    51d6:	df 93       	push	r29
    51d8:	8c 01       	movw	r16, r24
    51da:	eb 01       	movw	r28, r22

    while(count > 0)
    51dc:	1c 16       	cp	r1, r28
    51de:	1d 06       	cpc	r1, r29
    51e0:	34 f4       	brge	.+12     	; 0x51ee <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    51e2:	f8 01       	movw	r30, r16
    51e4:	81 91       	ld	r24, Z+
    51e6:	8f 01       	movw	r16, r30
    51e8:	c0 df       	rcall	.-128    	; 0x516a <SPI0_TXRX_Byte>
        ++data;
        --count;
    51ea:	21 97       	sbiw	r28, 0x01	; 1
    51ec:	f7 cf       	rjmp	.-18     	; 0x51dc <SPI0_TX+0xc>
    }
}
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	1f 91       	pop	r17
    51f4:	0f 91       	pop	r16
    51f6:	08 95       	ret

000051f8 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    51f8:	0f 93       	push	r16
    51fa:	1f 93       	push	r17
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	8c 01       	movw	r16, r24
    5202:	eb 01       	movw	r28, r22

    while(count > 0)
    5204:	1c 16       	cp	r1, r28
    5206:	1d 06       	cpc	r1, r29
    5208:	44 f4       	brge	.+16     	; 0x521a <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    520a:	f8 01       	movw	r30, r16
    520c:	80 81       	ld	r24, Z
    520e:	ad df       	rcall	.-166    	; 0x516a <SPI0_TXRX_Byte>
    5210:	f8 01       	movw	r30, r16
    5212:	81 93       	st	Z+, r24
    5214:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5216:	21 97       	sbiw	r28, 0x01	; 1
    5218:	f5 cf       	rjmp	.-22     	; 0x5204 <SPI0_TXRX+0xc>
    }
}
    521a:	df 91       	pop	r29
    521c:	cf 91       	pop	r28
    521e:	1f 91       	pop	r17
    5220:	0f 91       	pop	r16
    5222:	08 95       	ret

00005224 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5224:	0f 93       	push	r16
    5226:	1f 93       	push	r17
    5228:	cf 93       	push	r28
    522a:	df 93       	push	r29
    522c:	8c 01       	movw	r16, r24
    522e:	eb 01       	movw	r28, r22

    while(count > 0)
    5230:	1c 16       	cp	r1, r28
    5232:	1d 06       	cpc	r1, r29
    5234:	3c f4       	brge	.+14     	; 0x5244 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5236:	8f ef       	ldi	r24, 0xFF	; 255
    5238:	98 df       	rcall	.-208    	; 0x516a <SPI0_TXRX_Byte>
    523a:	f8 01       	movw	r30, r16
    523c:	81 93       	st	Z+, r24
    523e:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5240:	21 97       	sbiw	r28, 0x01	; 1
    5242:	f6 cf       	rjmp	.-20     	; 0x5230 <SPI0_RX+0xc>
    }
}
    5244:	df 91       	pop	r29
    5246:	cf 91       	pop	r28
    5248:	1f 91       	pop	r17
    524a:	0f 91       	pop	r16
    524c:	08 95       	ret

0000524e <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    524e:	2f b7       	in	r18, 0x3f	; 63
    5250:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x1>
    5254:	81 11       	cpse	r24, r1
    5256:	04 c0       	rjmp	.+8      	; 0x5260 <i2c_timer+0x12>
    5258:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <i2c+0x2>
    525c:	81 11       	cpse	r24, r1
    525e:	0b c0       	rjmp	.+22     	; 0x5276 <i2c_timer+0x28>
    5260:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <i2c+0x4>
    5264:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <i2c+0x5>
    5268:	00 97       	sbiw	r24, 0x00	; 0
    526a:	29 f0       	breq	.+10     	; 0x5276 <i2c_timer+0x28>
    526c:	01 97       	sbiw	r24, 0x01	; 1
    526e:	90 93 41 1a 	sts	0x1A41, r25	; 0x801a41 <i2c+0x5>
    5272:	80 93 40 1a 	sts	0x1A40, r24	; 0x801a40 <i2c+0x4>
    5276:	2f bf       	out	0x3f, r18	; 63
    5278:	08 95       	ret

0000527a <i2c_check_op>:
    527a:	ad b7       	in	r26, 0x3d	; 61
    527c:	be b7       	in	r27, 0x3e	; 62
    527e:	17 97       	sbiw	r26, 0x07	; 7
    5280:	0f b6       	in	r0, 0x3f	; 63
    5282:	f8 94       	cli
    5284:	be bf       	out	0x3e, r27	; 62
    5286:	0f be       	out	0x3f, r0	; 63
    5288:	ad bf       	out	0x3d, r26	; 61
    528a:	28 2f       	mov	r18, r24
    528c:	08 2e       	mov	r0, r24
    528e:	00 0c       	add	r0, r0
    5290:	33 0b       	sbc	r19, r19
    5292:	80 31       	cpi	r24, 0x10	; 16
    5294:	88 f0       	brcs	.+34     	; 0x52b8 <i2c_check_op+0x3e>
    5296:	80 e1       	ldi	r24, 0x10	; 16
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	ed b7       	in	r30, 0x3d	; 61
    529c:	fe b7       	in	r31, 0x3e	; 62
    529e:	97 83       	std	Z+7, r25	; 0x07
    52a0:	86 83       	std	Z+6, r24	; 0x06
    52a2:	35 83       	std	Z+5, r19	; 0x05
    52a4:	24 83       	std	Z+4, r18	; 0x04
    52a6:	89 e2       	ldi	r24, 0x29	; 41
    52a8:	94 e0       	ldi	r25, 0x04	; 4
    52aa:	a0 e0       	ldi	r26, 0x00	; 0
    52ac:	81 83       	std	Z+1, r24	; 0x01
    52ae:	92 83       	std	Z+2, r25	; 0x02
    52b0:	a3 83       	std	Z+3, r26	; 0x03
    52b2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    52b6:	24 c0       	rjmp	.+72     	; 0x5300 <i2c_check_op+0x86>
    52b8:	f9 01       	movw	r30, r18
    52ba:	ee 0f       	add	r30, r30
    52bc:	ff 1f       	adc	r31, r31
    52be:	e2 5b       	subi	r30, 0xB2	; 178
    52c0:	f8 4e       	sbci	r31, 0xE8	; 232
    52c2:	01 90       	ld	r0, Z+
    52c4:	f0 81       	ld	r31, Z
    52c6:	e0 2d       	mov	r30, r0
    52c8:	30 97       	sbiw	r30, 0x00	; 0
    52ca:	d1 f0       	breq	.+52     	; 0x5300 <i2c_check_op+0x86>
    52cc:	80 85       	ldd	r24, Z+8	; 0x08
    52ce:	91 85       	ldd	r25, Z+9	; 0x09
    52d0:	89 2b       	or	r24, r25
    52d2:	39 f4       	brne	.+14     	; 0x52e2 <i2c_check_op+0x68>
    52d4:	ed b7       	in	r30, 0x3d	; 61
    52d6:	fe b7       	in	r31, 0x3e	; 62
    52d8:	35 83       	std	Z+5, r19	; 0x05
    52da:	24 83       	std	Z+4, r18	; 0x04
    52dc:	80 e1       	ldi	r24, 0x10	; 16
    52de:	94 e0       	ldi	r25, 0x04	; 4
    52e0:	09 c0       	rjmp	.+18     	; 0x52f4 <i2c_check_op+0x7a>
    52e2:	86 81       	ldd	r24, Z+6	; 0x06
    52e4:	81 11       	cpse	r24, r1
    52e6:	0e c0       	rjmp	.+28     	; 0x5304 <i2c_check_op+0x8a>
    52e8:	ed b7       	in	r30, 0x3d	; 61
    52ea:	fe b7       	in	r31, 0x3e	; 62
    52ec:	35 83       	std	Z+5, r19	; 0x05
    52ee:	24 83       	std	Z+4, r18	; 0x04
    52f0:	8a ef       	ldi	r24, 0xFA	; 250
    52f2:	93 e0       	ldi	r25, 0x03	; 3
    52f4:	a0 e0       	ldi	r26, 0x00	; 0
    52f6:	81 83       	std	Z+1, r24	; 0x01
    52f8:	92 83       	std	Z+2, r25	; 0x02
    52fa:	a3 83       	std	Z+3, r26	; 0x03
    52fc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5300:	80 e0       	ldi	r24, 0x00	; 0
    5302:	01 c0       	rjmp	.+2      	; 0x5306 <i2c_check_op+0x8c>
    5304:	81 e0       	ldi	r24, 0x01	; 1
    5306:	ad b7       	in	r26, 0x3d	; 61
    5308:	be b7       	in	r27, 0x3e	; 62
    530a:	17 96       	adiw	r26, 0x07	; 7
    530c:	0f b6       	in	r0, 0x3f	; 63
    530e:	f8 94       	cli
    5310:	be bf       	out	0x3e, r27	; 62
    5312:	0f be       	out	0x3f, r0	; 63
    5314:	ad bf       	out	0x3d, r26	; 61
    5316:	08 95       	ret

00005318 <i2c_task_init>:
    5318:	8f b7       	in	r24, 0x3f	; 63
    531a:	f8 94       	cli
    531c:	ee e4       	ldi	r30, 0x4E	; 78
    531e:	f7 e1       	ldi	r31, 0x17	; 23
    5320:	11 92       	st	Z+, r1
    5322:	11 92       	st	Z+, r1
    5324:	97 e1       	ldi	r25, 0x17	; 23
    5326:	ee 36       	cpi	r30, 0x6E	; 110
    5328:	f9 07       	cpc	r31, r25
    532a:	d1 f7       	brne	.-12     	; 0x5320 <i2c_task_init+0x8>
    532c:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task>
    5330:	91 e0       	ldi	r25, 0x01	; 1
    5332:	90 93 70 17 	sts	0x1770, r25	; 0x801770 <i2c_task+0x2>
    5336:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <i2c_task+0x1>
    533a:	10 92 71 17 	sts	0x1771, r1	; 0x801771 <i2c_task+0x3>
    533e:	8f bf       	out	0x3f, r24	; 63
    5340:	08 95       	ret

00005342 <i2c_task_op_add>:
    5342:	ef 92       	push	r14
    5344:	ff 92       	push	r15
    5346:	0f 93       	push	r16
    5348:	1f 93       	push	r17
    534a:	cf 93       	push	r28
    534c:	df 93       	push	r29
    534e:	d8 2f       	mov	r29, r24
    5350:	c6 2f       	mov	r28, r22
    5352:	7a 01       	movw	r14, r20
    5354:	02 2f       	mov	r16, r18
    5356:	1f b7       	in	r17, 0x3f	; 63
    5358:	6a e0       	ldi	r22, 0x0A	; 10
    535a:	70 e0       	ldi	r23, 0x00	; 0
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	a8 db       	rcall	.-2224   	; 0x4ab2 <safecalloc>
    5362:	fc 01       	movw	r30, r24
    5364:	89 2b       	or	r24, r25
    5366:	89 f0       	breq	.+34     	; 0x538a <i2c_task_op_add+0x48>
    5368:	f8 94       	cli
    536a:	11 82       	std	Z+1, r1	; 0x01
    536c:	12 82       	std	Z+2, r1	; 0x02
    536e:	dd 0f       	add	r29, r29
    5370:	c1 70       	andi	r28, 0x01	; 1
    5372:	cd 2b       	or	r28, r29
    5374:	c0 83       	st	Z, r28
    5376:	8a e0       	ldi	r24, 0x0A	; 10
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	95 83       	std	Z+5, r25	; 0x05
    537c:	84 83       	std	Z+4, r24	; 0x04
    537e:	13 82       	std	Z+3, r1	; 0x03
    5380:	06 83       	std	Z+6, r16	; 0x06
    5382:	17 82       	std	Z+7, r1	; 0x07
    5384:	f1 86       	std	Z+9, r15	; 0x09
    5386:	e0 86       	std	Z+8, r14	; 0x08
    5388:	1f bf       	out	0x3f, r17	; 63
    538a:	cf 01       	movw	r24, r30
    538c:	cd b7       	in	r28, 0x3d	; 61
    538e:	de b7       	in	r29, 0x3e	; 62
    5390:	e6 e0       	ldi	r30, 0x06	; 6
    5392:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00005396 <i2c_init>:
    5396:	cf 93       	push	r28
    5398:	00 d0       	rcall	.+0      	; 0x539a <i2c_init+0x4>
    539a:	1f 92       	push	r1
    539c:	9b 01       	movw	r18, r22
    539e:	ac 01       	movw	r20, r24
    53a0:	cf b7       	in	r28, 0x3f	; 63
    53a2:	60 e0       	ldi	r22, 0x00	; 0
    53a4:	7d e2       	ldi	r23, 0x2D	; 45
    53a6:	81 e3       	ldi	r24, 0x31	; 49
    53a8:	91 e0       	ldi	r25, 0x01	; 1
    53aa:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    53ae:	da 01       	movw	r26, r20
    53b0:	c9 01       	movw	r24, r18
    53b2:	40 97       	sbiw	r24, 0x10	; 16
    53b4:	a1 09       	sbc	r26, r1
    53b6:	b1 09       	sbc	r27, r1
    53b8:	ac 01       	movw	r20, r24
    53ba:	bd 01       	movw	r22, r26
    53bc:	76 95       	lsr	r23
    53be:	67 95       	ror	r22
    53c0:	57 95       	ror	r21
    53c2:	47 95       	ror	r20
    53c4:	ca 01       	movw	r24, r20
    53c6:	88 27       	eor	r24, r24
    53c8:	89 2b       	or	r24, r25
    53ca:	59 f0       	breq	.+22     	; 0x53e2 <i2c_init+0x4c>
    53cc:	8e ed       	ldi	r24, 0xDE	; 222
    53ce:	93 e0       	ldi	r25, 0x03	; 3
    53d0:	a0 e0       	ldi	r26, 0x00	; 0
    53d2:	ed b7       	in	r30, 0x3d	; 61
    53d4:	fe b7       	in	r31, 0x3e	; 62
    53d6:	81 83       	std	Z+1, r24	; 0x01
    53d8:	92 83       	std	Z+2, r25	; 0x02
    53da:	a3 83       	std	Z+3, r26	; 0x03
    53dc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    53e0:	3a c0       	rjmp	.+116    	; 0x5456 <i2c_init+0xc0>
    53e2:	f8 94       	cli
    53e4:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    53e8:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
    53f2:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task>
    53f6:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <i2c_task+0x2>
    53fa:	40 9a       	sbi	0x08, 0	; 8
    53fc:	41 9a       	sbi	0x08, 1	; 8
    53fe:	84 e8       	ldi	r24, 0x84	; 132
    5400:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5404:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5408:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    540c:	8c 7f       	andi	r24, 0xFC	; 252
    540e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5412:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <i2c_init_status>
    5416:	81 11       	cpse	r24, r1
    5418:	1d c0       	rjmp	.+58     	; 0x5454 <i2c_init+0xbe>
    541a:	ee e4       	ldi	r30, 0x4E	; 78
    541c:	f7 e1       	ldi	r31, 0x17	; 23
    541e:	11 92       	st	Z+, r1
    5420:	11 92       	st	Z+, r1
    5422:	27 e1       	ldi	r18, 0x17	; 23
    5424:	ee 36       	cpi	r30, 0x6E	; 110
    5426:	f2 07       	cpc	r31, r18
    5428:	d1 f7       	brne	.-12     	; 0x541e <i2c_init+0x88>
    542a:	61 e0       	ldi	r22, 0x01	; 1
    542c:	70 e0       	ldi	r23, 0x00	; 0
    542e:	87 e2       	ldi	r24, 0x27	; 39
    5430:	99 e2       	ldi	r25, 0x29	; 41
    5432:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <set_timers>
    5436:	01 96       	adiw	r24, 0x01	; 1
    5438:	51 f4       	brne	.+20     	; 0x544e <i2c_init+0xb8>
    543a:	87 ec       	ldi	r24, 0xC7	; 199
    543c:	93 e0       	ldi	r25, 0x03	; 3
    543e:	a0 e0       	ldi	r26, 0x00	; 0
    5440:	ed b7       	in	r30, 0x3d	; 61
    5442:	fe b7       	in	r31, 0x3e	; 62
    5444:	81 83       	std	Z+1, r24	; 0x01
    5446:	92 83       	std	Z+2, r25	; 0x02
    5448:	a3 83       	std	Z+3, r26	; 0x03
    544a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    544e:	81 e0       	ldi	r24, 0x01	; 1
    5450:	80 93 4d 17 	sts	0x174D, r24	; 0x80174d <i2c_init_status>
    5454:	cf bf       	out	0x3f, r28	; 63
    5456:	0f 90       	pop	r0
    5458:	0f 90       	pop	r0
    545a:	0f 90       	pop	r0
    545c:	cf 91       	pop	r28
    545e:	08 95       	ret

00005460 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5460:	61 e0       	ldi	r22, 0x01	; 1
    5462:	70 e0       	ldi	r23, 0x00	; 0
    5464:	80 e0       	ldi	r24, 0x00	; 0
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	a5 db       	rcall	.-2230   	; 0x4bb4 <delayus>
	if(!i2c.enable || i2c.done )
    546a:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x1>
    546e:	88 23       	and	r24, r24
    5470:	39 f0       	breq	.+14     	; 0x5480 <i2c_done+0x20>
		return(1);
    5472:	81 e0       	ldi	r24, 0x01	; 1
    5474:	90 91 3e 1a 	lds	r25, 0x1A3E	; 0x801a3e <i2c+0x2>
    5478:	91 11       	cpse	r25, r1
    547a:	03 c0       	rjmp	.+6      	; 0x5482 <i2c_done+0x22>
    547c:	80 e0       	ldi	r24, 0x00	; 0
    547e:	08 95       	ret
    5480:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5482:	08 95       	ret

00005484 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5484:	61 e0       	ldi	r22, 0x01	; 1
    5486:	70 e0       	ldi	r23, 0x00	; 0
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	93 db       	rcall	.-2266   	; 0x4bb4 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    548e:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <i2c_task>
    5492:	88 23       	and	r24, r24
    5494:	39 f0       	breq	.+14     	; 0x54a4 <i2c_task_done+0x20>
		return(1);
    5496:	81 e0       	ldi	r24, 0x01	; 1
    5498:	90 91 70 17 	lds	r25, 0x1770	; 0x801770 <i2c_task+0x2>
    549c:	91 11       	cpse	r25, r1
    549e:	03 c0       	rjmp	.+6      	; 0x54a6 <i2c_task_done+0x22>
    54a0:	80 e0       	ldi	r24, 0x00	; 0
    54a2:	08 95       	ret
    54a4:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    54a6:	08 95       	ret

000054a8 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    54a8:	ec e3       	ldi	r30, 0x3C	; 60
    54aa:	fa e1       	ldi	r31, 0x1A	; 26
    54ac:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    54b2:	8a e0       	ldi	r24, 0x0A	; 10
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	95 83       	std	Z+5, r25	; 0x05
    54b8:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    54ba:	85 ea       	ldi	r24, 0xA5	; 165
    54bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    54c0:	08 95       	ret

000054c2 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    54c2:	ef 92       	push	r14
    54c4:	ff 92       	push	r15
    54c6:	0f 93       	push	r16
    54c8:	1f 93       	push	r17
    54ca:	cf 93       	push	r28
    54cc:	df 93       	push	r29
	uint8_t sreg = SREG;
    54ce:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    54d0:	f8 94       	cli
	i2c_task.done = 0;
    54d2:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <i2c_task+0x2>
	i2c_task.error = 0;
    54d6:	10 92 71 17 	sts	0x1771, r1	; 0x801771 <i2c_task+0x3>
	i2c_task.ind = 0;
    54da:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    54de:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    54e0:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    54e2:	ee 24       	eor	r14, r14
    54e4:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    54e6:	0a e0       	ldi	r16, 0x0A	; 10
    54e8:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    54ea:	8c 2f       	mov	r24, r28
    54ec:	c6 de       	rcall	.-628    	; 0x527a <i2c_check_op>
    54ee:	88 23       	and	r24, r24
    54f0:	d1 f0       	breq	.+52     	; 0x5526 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    54f2:	ec 2f       	mov	r30, r28
    54f4:	ee 0f       	add	r30, r30
    54f6:	ff 0b       	sbc	r31, r31
    54f8:	e2 5b       	subi	r30, 0xB2	; 178
    54fa:	f8 4e       	sbci	r31, 0xE8	; 232
    54fc:	01 90       	ld	r0, Z+
    54fe:	f0 81       	ld	r31, Z
    5500:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5502:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5504:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5506:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5508:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    550a:	15 83       	std	Z+5, r17	; 0x05
    550c:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    550e:	d1 11       	cpse	r29, r1
    5510:	07 c0       	rjmp	.+14     	; 0x5520 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5512:	8a e0       	ldi	r24, 0x0A	; 10
    5514:	ac e3       	ldi	r26, 0x3C	; 60
    5516:	ba e1       	ldi	r27, 0x1A	; 26
    5518:	01 90       	ld	r0, Z+
    551a:	0d 92       	st	X+, r0
    551c:	8a 95       	dec	r24
    551e:	e1 f7       	brne	.-8      	; 0x5518 <i2c_task_run+0x56>
    5520:	cf 5f       	subi	r28, 0xFF	; 255
    5522:	d1 e0       	ldi	r29, 0x01	; 1
    5524:	e2 cf       	rjmp	.-60     	; 0x54ea <i2c_task_run+0x28>
		}
	}

	if(run)
    5526:	dd 23       	and	r29, r29
    5528:	91 f0       	breq	.+36     	; 0x554e <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    552a:	8e ef       	ldi	r24, 0xFE	; 254
    552c:	9a e2       	ldi	r25, 0x2A	; 42
    552e:	90 93 73 17 	sts	0x1773, r25	; 0x801773 <i2c_callback+0x1>
    5532:	80 93 72 17 	sts	0x1772, r24	; 0x801772 <i2c_callback>

		i2c_task.enable = 1;
    5536:	81 e0       	ldi	r24, 0x01	; 1
    5538:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task>
		i2c_task.done = 0;
    553c:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5540:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5544:	8c 7f       	andi	r24, 0xFC	; 252
    5546:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    554a:	ae df       	rcall	.-164    	; 0x54a8 <i2c_send_start>
    554c:	15 c0       	rjmp	.+42     	; 0x5578 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    554e:	10 92 73 17 	sts	0x1773, r1	; 0x801773 <i2c_callback+0x1>
    5552:	10 92 72 17 	sts	0x1772, r1	; 0x801772 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5556:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task>
		i2c_task.done = 1;
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5560:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
        i2c.enable = 0;
    5564:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5568:	84 e8       	ldi	r24, 0x84	; 132
    556a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    556e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5572:	8c 7f       	andi	r24, 0xFC	; 252
    5574:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5578:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    557c:	ff be       	out	0x3f, r15	; 63

}
    557e:	cd b7       	in	r28, 0x3d	; 61
    5580:	de b7       	in	r29, 0x3e	; 62
    5582:	e6 e0       	ldi	r30, 0x06	; 6
    5584:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00005588 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5588:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    558a:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    558c:	10 92 73 17 	sts	0x1773, r1	; 0x801773 <i2c_callback+0x1>
    5590:	10 92 72 17 	sts	0x1772, r1	; 0x801772 <i2c_callback>

	i2c.enable = 1; // Enabled
    5594:	31 e0       	ldi	r19, 0x01	; 1
    5596:	30 93 3d 1a 	sts	0x1A3D, r19	; 0x801a3d <i2c+0x1>
	i2c.done = 0;
    559a:	10 92 3e 1a 	sts	0x1A3E, r1	; 0x801a3e <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    559e:	88 0f       	add	r24, r24
    55a0:	61 70       	andi	r22, 0x01	; 1
    55a2:	68 2b       	or	r22, r24
    55a4:	60 93 3c 1a 	sts	0x1A3C, r22	; 0x801a3c <i2c>
	i2c.flags = 0;
    55a8:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <i2c+0x3>
    i2c.len = len;
    55ac:	20 93 42 1a 	sts	0x1A42, r18	; 0x801a42 <i2c+0x6>
    i2c.ind = 0;
    55b0:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>
    i2c.buf = buf;
    55b4:	50 93 45 1a 	sts	0x1A45, r21	; 0x801a45 <i2c+0x9>
    55b8:	40 93 44 1a 	sts	0x1A44, r20	; 0x801a44 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    55bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    55c0:	8c 7f       	andi	r24, 0xFC	; 252
    55c2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    55c6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    55ca:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    55cc:	6d df       	rcall	.-294    	; 0x54a8 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    55ce:	48 df       	rcall	.-368    	; 0x5460 <i2c_done>
    55d0:	88 23       	and	r24, r24
    55d2:	e9 f3       	breq	.-6      	; 0x55ce <i2c_fn+0x46>
    55d4:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    55d6:	90 91 3f 1a 	lds	r25, 0x1A3F	; 0x801a3f <i2c+0x3>
    55da:	91 11       	cpse	r25, r1
    55dc:	80 e0       	ldi	r24, 0x00	; 0
    55de:	08 95       	ret

000055e0 <i2c_send_stop>:
}
    55e0:	ec e3       	ldi	r30, 0x3C	; 60
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    55e2:	fa e1       	ldi	r31, 0x1A	; 26
    55e4:	81 e0       	ldi	r24, 0x01	; 1
    55e6:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    55e8:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    55ea:	84 e9       	ldi	r24, 0x94	; 148
    55ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    55f0:	6a e0       	ldi	r22, 0x0A	; 10
    55f2:	70 e0       	ldi	r23, 0x00	; 0
    55f4:	80 e0       	ldi	r24, 0x00	; 0
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	dd ca       	rjmp	.-2630   	; 0x4bb4 <delayus>
    55fa:	08 95       	ret

000055fc <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    55fc:	cf 93       	push	r28
    55fe:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5600:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <i2c_task>
    5604:	88 23       	and	r24, r24
    5606:	09 f4       	brne	.+2      	; 0x560a <i2c_task_next_op+0xe>
    5608:	46 c0       	rjmp	.+140    	; 0x5696 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    560a:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <i2c_task+0x1>
    560e:	35 de       	rcall	.-918    	; 0x527a <i2c_check_op>
    5610:	88 23       	and	r24, r24
    5612:	b1 f0       	breq	.+44     	; 0x5640 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5614:	e0 91 6f 17 	lds	r30, 0x176F	; 0x80176f <i2c_task+0x1>
    5618:	ee 0f       	add	r30, r30
    561a:	ff 0b       	sbc	r31, r31
    561c:	e2 5b       	subi	r30, 0xB2	; 178
    561e:	f8 4e       	sbci	r31, 0xE8	; 232
    5620:	c0 81       	ld	r28, Z
    5622:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5624:	8a e0       	ldi	r24, 0x0A	; 10
    5626:	ec e3       	ldi	r30, 0x3C	; 60
    5628:	fa e1       	ldi	r31, 0x1A	; 26
    562a:	de 01       	movw	r26, r28
    562c:	01 90       	ld	r0, Z+
    562e:	0d 92       	st	X+, r0
    5630:	8a 95       	dec	r24
    5632:	e1 f7       	brne	.-8      	; 0x562c <i2c_task_next_op+0x30>
			if(o->flags)
    5634:	8b 81       	ldd	r24, Y+3	; 0x03
    5636:	88 23       	and	r24, r24
    5638:	19 f0       	breq	.+6      	; 0x5640 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    563a:	81 e0       	ldi	r24, 0x01	; 1
    563c:	80 93 71 17 	sts	0x1771, r24	; 0x801771 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5640:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <i2c_task+0x1>
    5644:	8f 5f       	subi	r24, 0xFF	; 255
    5646:	19 de       	rcall	.-974    	; 0x527a <i2c_check_op>
    5648:	88 23       	and	r24, r24
    564a:	29 f1       	breq	.+74     	; 0x5696 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    564c:	e0 91 6f 17 	lds	r30, 0x176F	; 0x80176f <i2c_task+0x1>
    5650:	ef 5f       	subi	r30, 0xFF	; 255
    5652:	e0 93 6f 17 	sts	0x176F, r30	; 0x80176f <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5656:	ee 0f       	add	r30, r30
    5658:	ff 0b       	sbc	r31, r31
    565a:	e2 5b       	subi	r30, 0xB2	; 178
    565c:	f8 4e       	sbci	r31, 0xE8	; 232
    565e:	01 90       	ld	r0, Z+
    5660:	f0 81       	ld	r31, Z
    5662:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5664:	81 81       	ldd	r24, Z+1	; 0x01
    5666:	81 30       	cpi	r24, 0x01	; 1
    5668:	19 f0       	breq	.+6      	; 0x5670 <i2c_task_next_op+0x74>
    566a:	82 81       	ldd	r24, Z+2	; 0x02
    566c:	81 11       	cpse	r24, r1
    566e:	13 c0       	rjmp	.+38     	; 0x5696 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5670:	8a e0       	ldi	r24, 0x0A	; 10
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	95 83       	std	Z+5, r25	; 0x05
    5676:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5678:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    567a:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    567c:	81 e0       	ldi	r24, 0x01	; 1
    567e:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5680:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5682:	8a e0       	ldi	r24, 0x0A	; 10
    5684:	ac e3       	ldi	r26, 0x3C	; 60
    5686:	ba e1       	ldi	r27, 0x1A	; 26
    5688:	01 90       	ld	r0, Z+
    568a:	0d 92       	st	X+, r0
    568c:	8a 95       	dec	r24

				i2c_send_start();
    568e:	e1 f7       	brne	.-8      	; 0x5688 <i2c_task_next_op+0x8c>
    5690:	0b df       	rcall	.-490    	; 0x54a8 <i2c_send_start>

				return(1);
    5692:	81 e0       	ldi	r24, 0x01	; 1
    5694:	0f c0       	rjmp	.+30     	; 0x56b4 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5696:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task>
	i2c_task.done = 1;
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    56a0:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
	i2c.enable = 0;
    56a4:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
	i2c.flags = 0;
    56a8:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <i2c+0x3>
	i2c.ind = 0;
    56ac:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>

	i2c_send_stop();
    56b0:	97 df       	rcall	.-210    	; 0x55e0 <i2c_send_stop>

	return(0);
    56b2:	80 e0       	ldi	r24, 0x00	; 0
}
    56b4:	df 91       	pop	r29
    56b6:	cf 91       	pop	r28
    56b8:	08 95       	ret

000056ba <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    56ba:	e0 91 72 17 	lds	r30, 0x1772	; 0x801772 <i2c_callback>
    56be:	f0 91 73 17 	lds	r31, 0x1773	; 0x801773 <i2c_callback+0x1>
    56c2:	30 97       	sbiw	r30, 0x00	; 0
    56c4:	11 f0       	breq	.+4      	; 0x56ca <i2c_next+0x10>
	    i2c_callback();
    56c6:	09 95       	icall
    56c8:	08 95       	ret
	else
		i2c_send_stop();
    56ca:	8a cf       	rjmp	.-236    	; 0x55e0 <i2c_send_stop>
    56cc:	08 95       	ret

000056ce <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    56ce:	1f 92       	push	r1
    56d0:	0f 92       	push	r0
    56d2:	0f b6       	in	r0, 0x3f	; 63
    56d4:	0f 92       	push	r0
    56d6:	11 24       	eor	r1, r1
    56d8:	0b b6       	in	r0, 0x3b	; 59
    56da:	0f 92       	push	r0
    56dc:	2f 93       	push	r18
    56de:	3f 93       	push	r19
    56e0:	4f 93       	push	r20
    56e2:	5f 93       	push	r21
    56e4:	6f 93       	push	r22
    56e6:	7f 93       	push	r23
    56e8:	8f 93       	push	r24
    56ea:	9f 93       	push	r25
    56ec:	af 93       	push	r26
    56ee:	bf 93       	push	r27
    56f0:	ef 93       	push	r30
    56f2:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    56f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    56f8:	90 91 3d 1a 	lds	r25, 0x1A3D	; 0x801a3d <i2c+0x1>
    56fc:	99 23       	and	r25, r25
    56fe:	09 f1       	breq	.+66     	; 0x5742 <__vector_26+0x74>
    5700:	90 91 3e 1a 	lds	r25, 0x1A3E	; 0x801a3e <i2c+0x2>
    5704:	91 11       	cpse	r25, r1
    5706:	1d c0       	rjmp	.+58     	; 0x5742 <__vector_26+0x74>
    5708:	20 91 44 1a 	lds	r18, 0x1A44	; 0x801a44 <i2c+0x8>
    570c:	30 91 45 1a 	lds	r19, 0x1A45	; 0x801a45 <i2c+0x9>
    5710:	21 15       	cp	r18, r1
    5712:	31 05       	cpc	r19, r1
    5714:	b1 f0       	breq	.+44     	; 0x5742 <__vector_26+0x74>
    5716:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <i2c+0x6>
    571a:	99 23       	and	r25, r25
    571c:	91 f0       	breq	.+36     	; 0x5742 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    571e:	40 91 40 1a 	lds	r20, 0x1A40	; 0x801a40 <i2c+0x4>
    5722:	50 91 41 1a 	lds	r21, 0x1A41	; 0x801a41 <i2c+0x5>
    5726:	45 2b       	or	r20, r21
    5728:	71 f4       	brne	.+28     	; 0x5746 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    572a:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    572e:	81 60       	ori	r24, 0x01	; 1
    5730:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <i2c+0x3>
		i2c_task.enable = 0;
    5734:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task>
		i2c_task.done = 1;
    5738:	81 e0       	ldi	r24, 0x01	; 1
    573a:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <i2c_task+0x2>
		i2c_task.error = 1;
    573e:	80 93 71 17 	sts	0x1771, r24	; 0x801771 <i2c_task+0x3>
		i2c_send_stop();
    5742:	4e df       	rcall	.-356    	; 0x55e0 <i2c_send_stop>
		return;
    5744:	9b c0       	rjmp	.+310    	; 0x587c <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5746:	88 7f       	andi	r24, 0xF8	; 248
    5748:	80 33       	cpi	r24, 0x30	; 48
    574a:	09 f4       	brne	.+2      	; 0x574e <__vector_26+0x80>
    574c:	83 c0       	rjmp	.+262    	; 0x5854 <__vector_26+0x186>
    574e:	70 f4       	brcc	.+28     	; 0x576c <__vector_26+0x9e>
    5750:	88 31       	cpi	r24, 0x18	; 24
    5752:	09 f1       	breq	.+66     	; 0x5796 <__vector_26+0xc8>
    5754:	28 f4       	brcc	.+10     	; 0x5760 <__vector_26+0x92>
    5756:	88 30       	cpi	r24, 0x08	; 8
    5758:	c9 f0       	breq	.+50     	; 0x578c <__vector_26+0xbe>
    575a:	80 31       	cpi	r24, 0x10	; 16
    575c:	b9 f0       	breq	.+46     	; 0x578c <__vector_26+0xbe>
    575e:	83 c0       	rjmp	.+262    	; 0x5866 <__vector_26+0x198>
    5760:	80 32       	cpi	r24, 0x20	; 32
    5762:	09 f4       	brne	.+2      	; 0x5766 <__vector_26+0x98>
    5764:	65 c0       	rjmp	.+202    	; 0x5830 <__vector_26+0x162>
    5766:	88 32       	cpi	r24, 0x28	; 40
    5768:	b1 f0       	breq	.+44     	; 0x5796 <__vector_26+0xc8>
    576a:	7d c0       	rjmp	.+250    	; 0x5866 <__vector_26+0x198>
    576c:	88 34       	cpi	r24, 0x48	; 72
    576e:	09 f4       	brne	.+2      	; 0x5772 <__vector_26+0xa4>
    5770:	68 c0       	rjmp	.+208    	; 0x5842 <__vector_26+0x174>
    5772:	38 f4       	brcc	.+14     	; 0x5782 <__vector_26+0xb4>
    5774:	88 33       	cpi	r24, 0x38	; 56
    5776:	09 f4       	brne	.+2      	; 0x577a <__vector_26+0xac>
    5778:	57 c0       	rjmp	.+174    	; 0x5828 <__vector_26+0x15a>
    577a:	80 34       	cpi	r24, 0x40	; 64
    577c:	09 f4       	brne	.+2      	; 0x5780 <__vector_26+0xb2>
    577e:	42 c0       	rjmp	.+132    	; 0x5804 <__vector_26+0x136>
    5780:	72 c0       	rjmp	.+228    	; 0x5866 <__vector_26+0x198>
    5782:	80 35       	cpi	r24, 0x50	; 80
    5784:	79 f1       	breq	.+94     	; 0x57e4 <__vector_26+0x116>
    5786:	88 35       	cpi	r24, 0x58	; 88
    5788:	b9 f0       	breq	.+46     	; 0x57b8 <__vector_26+0xea>
    578a:	6d c0       	rjmp	.+218    	; 0x5866 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    578c:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>
			TWDR = i2c.address;
    5790:	80 91 3c 1a 	lds	r24, 0x1A3C	; 0x801a3c <i2c>
    5794:	0e c0       	rjmp	.+28     	; 0x57b2 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5796:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    579a:	89 17       	cp	r24, r25
    579c:	ec f4       	brge	.+58     	; 0x57d8 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    579e:	91 e0       	ldi	r25, 0x01	; 1
    57a0:	98 0f       	add	r25, r24
    57a2:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    57a6:	f9 01       	movw	r30, r18
    57a8:	e8 0f       	add	r30, r24
    57aa:	f1 1d       	adc	r31, r1
    57ac:	87 fd       	sbrc	r24, 7
    57ae:	fa 95       	dec	r31
    57b0:	80 81       	ld	r24, Z
    57b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    57b6:	36 c0       	rjmp	.+108    	; 0x5824 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    57b8:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    57bc:	89 17       	cp	r24, r25
    57be:	64 f4       	brge	.+24     	; 0x57d8 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    57c0:	91 e0       	ldi	r25, 0x01	; 1
    57c2:	98 0f       	add	r25, r24
    57c4:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    57c8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    57cc:	f9 01       	movw	r30, r18
    57ce:	e8 0f       	add	r30, r24
    57d0:	f1 1d       	adc	r31, r1
    57d2:	87 fd       	sbrc	r24, 7
    57d4:	fa 95       	dec	r31
    57d6:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    57d8:	81 e0       	ldi	r24, 0x01	; 1
    57da:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
				i2c.enable = 0;
    57de:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
    57e2:	4b c0       	rjmp	.+150    	; 0x587a <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    57e4:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    57e8:	89 17       	cp	r24, r25
    57ea:	64 f4       	brge	.+24     	; 0x5804 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    57ec:	91 e0       	ldi	r25, 0x01	; 1
    57ee:	98 0f       	add	r25, r24
    57f0:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    57f4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    57f8:	f9 01       	movw	r30, r18
    57fa:	e8 0f       	add	r30, r24
    57fc:	f1 1d       	adc	r31, r1
    57fe:	87 fd       	sbrc	r24, 7
    5800:	fa 95       	dec	r31
    5802:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5804:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5808:	08 2e       	mov	r0, r24
    580a:	00 0c       	add	r0, r0
    580c:	99 0b       	sbc	r25, r25
    580e:	01 96       	adiw	r24, 0x01	; 1
    5810:	20 91 42 1a 	lds	r18, 0x1A42	; 0x801a42 <i2c+0x6>
    5814:	02 2e       	mov	r0, r18
    5816:	00 0c       	add	r0, r0
    5818:	33 0b       	sbc	r19, r19
    581a:	82 17       	cp	r24, r18
    581c:	93 07       	cpc	r25, r19
    581e:	14 f4       	brge	.+4      	; 0x5824 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5820:	85 ec       	ldi	r24, 0xC5	; 197
    5822:	03 c0       	rjmp	.+6      	; 0x582a <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5824:	85 e8       	ldi	r24, 0x85	; 133
    5826:	01 c0       	rjmp	.+2      	; 0x582a <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5828:	85 ea       	ldi	r24, 0xA5	; 165
    582a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    582e:	26 c0       	rjmp	.+76     	; 0x587c <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5830:	81 e0       	ldi	r24, 0x01	; 1
    5832:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5836:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    583a:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    583e:	88 60       	ori	r24, 0x08	; 8
    5840:	1a c0       	rjmp	.+52     	; 0x5876 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5842:	81 e0       	ldi	r24, 0x01	; 1
    5844:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5848:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    584c:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5850:	80 61       	ori	r24, 0x10	; 16
    5852:	11 c0       	rjmp	.+34     	; 0x5876 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5854:	81 e0       	ldi	r24, 0x01	; 1
    5856:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    585a:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    585e:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5862:	80 62       	ori	r24, 0x20	; 32
    5864:	08 c0       	rjmp	.+16     	; 0x5876 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5866:	81 e0       	ldi	r24, 0x01	; 1
    5868:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    586c:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5870:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5874:	80 64       	ori	r24, 0x40	; 64
    5876:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <i2c+0x3>
			i2c_next();
    587a:	1f df       	rcall	.-450    	; 0x56ba <i2c_next>
			break;
	}
}
    587c:	ff 91       	pop	r31
    587e:	ef 91       	pop	r30
    5880:	bf 91       	pop	r27
    5882:	af 91       	pop	r26
    5884:	9f 91       	pop	r25
    5886:	8f 91       	pop	r24
    5888:	7f 91       	pop	r23
    588a:	6f 91       	pop	r22
    588c:	5f 91       	pop	r21
    588e:	4f 91       	pop	r20
    5890:	3f 91       	pop	r19
    5892:	2f 91       	pop	r18
    5894:	0f 90       	pop	r0
    5896:	0b be       	out	0x3b, r0	; 59
    5898:	0f 90       	pop	r0
    589a:	0f be       	out	0x3f, r0	; 63
    589c:	0f 90       	pop	r0
    589e:	1f 90       	pop	r1
    58a0:	18 95       	reti

000058a2 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    58a2:	cf 93       	push	r28
    58a4:	00 d0       	rcall	.+0      	; 0x58a6 <i2c_print_error+0x4>
    58a6:	00 d0       	rcall	.+0      	; 0x58a8 <i2c_print_error+0x6>
    58a8:	1f 92       	push	r1
    int flags = o->flags;
    58aa:	fc 01       	movw	r30, r24
    58ac:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    58ae:	cc 23       	and	r28, r28
    58b0:	09 f4       	brne	.+2      	; 0x58b4 <i2c_print_error+0x12>
    58b2:	67 c0       	rjmp	.+206    	; 0x5982 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    58b4:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <i2c+0x2>
    58b8:	81 11       	cpse	r24, r1
    58ba:	03 c0       	rjmp	.+6      	; 0x58c2 <i2c_print_error+0x20>
    58bc:	88 e2       	ldi	r24, 0x28	; 40
    58be:	93 e0       	ldi	r25, 0x03	; 3
    58c0:	02 c0       	rjmp	.+4      	; 0x58c6 <i2c_print_error+0x24>
    58c2:	83 e2       	ldi	r24, 0x23	; 35
    58c4:	93 e0       	ldi	r25, 0x03	; 3
    58c6:	ed b7       	in	r30, 0x3d	; 61
    58c8:	fe b7       	in	r31, 0x3e	; 62
    58ca:	95 83       	std	Z+5, r25	; 0x05
    58cc:	84 83       	std	Z+4, r24	; 0x04
    58ce:	81 ec       	ldi	r24, 0xC1	; 193
    58d0:	93 e0       	ldi	r25, 0x03	; 3
    58d2:	a0 e0       	ldi	r26, 0x00	; 0
    58d4:	81 83       	std	Z+1, r24	; 0x01
    58d6:	92 83       	std	Z+2, r25	; 0x02
    58d8:	a3 83       	std	Z+3, r26	; 0x03
    58da:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    58de:	c0 ff       	sbrs	r28, 0
    58e0:	0a c0       	rjmp	.+20     	; 0x58f6 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    58e2:	83 eb       	ldi	r24, 0xB3	; 179
    58e4:	93 e0       	ldi	r25, 0x03	; 3
    58e6:	a0 e0       	ldi	r26, 0x00	; 0
    58e8:	ed b7       	in	r30, 0x3d	; 61
    58ea:	fe b7       	in	r31, 0x3e	; 62
    58ec:	81 83       	std	Z+1, r24	; 0x01
    58ee:	92 83       	std	Z+2, r25	; 0x02
    58f0:	a3 83       	std	Z+3, r26	; 0x03
    58f2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		if(flags & I2C_OP_LEN)
    58f6:	c1 ff       	sbrs	r28, 1
    58f8:	0a c0       	rjmp	.+20     	; 0x590e <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    58fa:	89 ea       	ldi	r24, 0xA9	; 169
    58fc:	93 e0       	ldi	r25, 0x03	; 3
    58fe:	a0 e0       	ldi	r26, 0x00	; 0
    5900:	ed b7       	in	r30, 0x3d	; 61
    5902:	fe b7       	in	r31, 0x3e	; 62
    5904:	81 83       	std	Z+1, r24	; 0x01
    5906:	92 83       	std	Z+2, r25	; 0x02
    5908:	a3 83       	std	Z+3, r26	; 0x03
    590a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		if(flags & I2C_OP_ERROR)
    590e:	c2 ff       	sbrs	r28, 2
    5910:	0a c0       	rjmp	.+20     	; 0x5926 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5912:	8d e9       	ldi	r24, 0x9D	; 157
    5914:	93 e0       	ldi	r25, 0x03	; 3
    5916:	a0 e0       	ldi	r26, 0x00	; 0
    5918:	ed b7       	in	r30, 0x3d	; 61
    591a:	fe b7       	in	r31, 0x3e	; 62
    591c:	81 83       	std	Z+1, r24	; 0x01
    591e:	92 83       	std	Z+2, r25	; 0x02
    5920:	a3 83       	std	Z+3, r26	; 0x03
    5922:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5926:	c4 ff       	sbrs	r28, 4
    5928:	0a c0       	rjmp	.+20     	; 0x593e <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    592a:	8b e8       	ldi	r24, 0x8B	; 139
    592c:	93 e0       	ldi	r25, 0x03	; 3
    592e:	a0 e0       	ldi	r26, 0x00	; 0
    5930:	ed b7       	in	r30, 0x3d	; 61
    5932:	fe b7       	in	r31, 0x3e	; 62
    5934:	81 83       	std	Z+1, r24	; 0x01
    5936:	92 83       	std	Z+2, r25	; 0x02
    5938:	a3 83       	std	Z+3, r26	; 0x03
    593a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    593e:	c3 ff       	sbrs	r28, 3
    5940:	0a c0       	rjmp	.+20     	; 0x5956 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5942:	89 e7       	ldi	r24, 0x79	; 121
    5944:	93 e0       	ldi	r25, 0x03	; 3
    5946:	a0 e0       	ldi	r26, 0x00	; 0
    5948:	ed b7       	in	r30, 0x3d	; 61
    594a:	fe b7       	in	r31, 0x3e	; 62
    594c:	81 83       	std	Z+1, r24	; 0x01
    594e:	92 83       	std	Z+2, r25	; 0x02
    5950:	a3 83       	std	Z+3, r26	; 0x03
    5952:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5956:	c5 ff       	sbrs	r28, 5
    5958:	0a c0       	rjmp	.+20     	; 0x596e <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    595a:	86 e6       	ldi	r24, 0x66	; 102
    595c:	93 e0       	ldi	r25, 0x03	; 3
    595e:	a0 e0       	ldi	r26, 0x00	; 0
    5960:	ed b7       	in	r30, 0x3d	; 61
    5962:	fe b7       	in	r31, 0x3e	; 62
    5964:	81 83       	std	Z+1, r24	; 0x01
    5966:	92 83       	std	Z+2, r25	; 0x02
    5968:	a3 83       	std	Z+3, r26	; 0x03
    596a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		printf("\n");
    596e:	84 e6       	ldi	r24, 0x64	; 100
    5970:	93 e0       	ldi	r25, 0x03	; 3
    5972:	a0 e0       	ldi	r26, 0x00	; 0
    5974:	ed b7       	in	r30, 0x3d	; 61
    5976:	fe b7       	in	r31, 0x3e	; 62
    5978:	81 83       	std	Z+1, r24	; 0x01
    597a:	92 83       	std	Z+2, r25	; 0x02
    597c:	a3 83       	std	Z+3, r26	; 0x03
    597e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
	}
}
    5982:	0f 90       	pop	r0
    5984:	0f 90       	pop	r0
    5986:	0f 90       	pop	r0
    5988:	0f 90       	pop	r0
    598a:	0f 90       	pop	r0
    598c:	cf 91       	pop	r28
    598e:	08 95       	ret

00005990 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5990:	6f 92       	push	r6
    5992:	7f 92       	push	r7
    5994:	8f 92       	push	r8
    5996:	af 92       	push	r10
    5998:	bf 92       	push	r11
    599a:	cf 92       	push	r12
    599c:	df 92       	push	r13
    599e:	ef 92       	push	r14
    59a0:	0f 93       	push	r16
    59a2:	1f 93       	push	r17
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	00 d0       	rcall	.+0      	; 0x59aa <i2c_display_task_errors+0x1a>
    59aa:	00 d0       	rcall	.+0      	; 0x59ac <i2c_display_task_errors+0x1c>
    59ac:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    59ae:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <i2c_task+0x2>
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	ed b7       	in	r30, 0x3d	; 61
    59b6:	fe b7       	in	r31, 0x3e	; 62
    59b8:	95 83       	std	Z+5, r25	; 0x05
    59ba:	84 83       	std	Z+4, r24	; 0x04
    59bc:	81 e5       	ldi	r24, 0x51	; 81
    59be:	93 e0       	ldi	r25, 0x03	; 3
    59c0:	a0 e0       	ldi	r26, 0x00	; 0
    59c2:	81 83       	std	Z+1, r24	; 0x01
    59c4:	92 83       	std	Z+2, r25	; 0x02
    59c6:	a3 83       	std	Z+3, r26	; 0x03
    59c8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    59cc:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <i2c_task+0x3>
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	ed b7       	in	r30, 0x3d	; 61
    59d4:	fe b7       	in	r31, 0x3e	; 62
    59d6:	95 83       	std	Z+5, r25	; 0x05
    59d8:	84 83       	std	Z+4, r24	; 0x04
    59da:	8d e3       	ldi	r24, 0x3D	; 61
    59dc:	93 e0       	ldi	r25, 0x03	; 3
    59de:	a0 e0       	ldi	r26, 0x00	; 0
    59e0:	81 83       	std	Z+1, r24	; 0x01
    59e2:	92 83       	std	Z+2, r25	; 0x02
    59e4:	a3 83       	std	Z+3, r26	; 0x03
    59e6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    59ea:	ce e4       	ldi	r28, 0x4E	; 78
    59ec:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    59ee:	00 e0       	ldi	r16, 0x00	; 0
    59f0:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    59f2:	83 e3       	ldi	r24, 0x33	; 51
    59f4:	93 e0       	ldi	r25, 0x03	; 3
    59f6:	6c 01       	movw	r12, r24
    59f8:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    59fa:	81 e3       	ldi	r24, 0x31	; 49
    59fc:	93 e0       	ldi	r25, 0x03	; 3
    59fe:	3c 01       	movw	r6, r24
    5a00:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5a02:	30 2f       	mov	r19, r16
    5a04:	21 2f       	mov	r18, r17
    5a06:	5e 01       	movw	r10, r28
    5a08:	0f 5f       	subi	r16, 0xFF	; 255
    5a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a0c:	88 81       	ld	r24, Y
    5a0e:	99 81       	ldd	r25, Y+1	; 0x01
    5a10:	89 2b       	or	r24, r25
    5a12:	b1 f0       	breq	.+44     	; 0x5a40 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5a14:	ed b7       	in	r30, 0x3d	; 61
    5a16:	fe b7       	in	r31, 0x3e	; 62
    5a18:	34 83       	std	Z+4, r19	; 0x04
    5a1a:	25 83       	std	Z+5, r18	; 0x05
    5a1c:	c1 82       	std	Z+1, r12	; 0x01
    5a1e:	d2 82       	std	Z+2, r13	; 0x02
    5a20:	e3 82       	std	Z+3, r14	; 0x03
    5a22:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5a26:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5a28:	f5 01       	movw	r30, r10
    5a2a:	80 81       	ld	r24, Z
    5a2c:	91 81       	ldd	r25, Z+1	; 0x01
    5a2e:	39 df       	rcall	.-398    	; 0x58a2 <i2c_print_error>
		printf("\n");
    5a30:	ed b7       	in	r30, 0x3d	; 61
    5a32:	fe b7       	in	r31, 0x3e	; 62
    5a34:	61 82       	std	Z+1, r6	; 0x01
    5a36:	72 82       	std	Z+2, r7	; 0x02
    5a38:	83 82       	std	Z+3, r8	; 0x03
    5a3a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5a3e:	e1 cf       	rjmp	.-62     	; 0x5a02 <i2c_display_task_errors+0x72>
	}
}
    5a40:	0f 90       	pop	r0
    5a42:	0f 90       	pop	r0
    5a44:	0f 90       	pop	r0
    5a46:	0f 90       	pop	r0
    5a48:	0f 90       	pop	r0
    5a4a:	df 91       	pop	r29
    5a4c:	cf 91       	pop	r28
    5a4e:	1f 91       	pop	r17
    5a50:	0f 91       	pop	r16
    5a52:	ef 90       	pop	r14
    5a54:	df 90       	pop	r13
    5a56:	cf 90       	pop	r12
    5a58:	bf 90       	pop	r11
    5a5a:	af 90       	pop	r10
    5a5c:	8f 90       	pop	r8
    5a5e:	7f 90       	pop	r7
    5a60:	6f 90       	pop	r6
    5a62:	08 95       	ret

00005a64 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5a64:	6a e0       	ldi	r22, 0x0A	; 10
    5a66:	0e 94 b8 e1 	call	0x1c370	; 0x1c370 <__udivmodqi4>
    5a6a:	82 95       	swap	r24
    5a6c:	80 7f       	andi	r24, 0xF0	; 240
    5a6e:	89 2b       	or	r24, r25
    5a70:	08 95       	ret

00005a72 <BCDtoBIN>:
    5a72:	98 2f       	mov	r25, r24
    5a74:	92 95       	swap	r25
    5a76:	9f 70       	andi	r25, 0x0F	; 15
    5a78:	8f 70       	andi	r24, 0x0F	; 15
    5a7a:	2a e0       	ldi	r18, 0x0A	; 10
    5a7c:	92 9f       	mul	r25, r18
    5a7e:	80 0d       	add	r24, r0
    5a80:	11 24       	eor	r1, r1
    5a82:	08 95       	ret

00005a84 <i2c_rtc_write>:
    5a84:	ac e0       	ldi	r26, 0x0C	; 12
    5a86:	b0 e0       	ldi	r27, 0x00	; 0
    5a88:	e8 e4       	ldi	r30, 0x48	; 72
    5a8a:	fd e2       	ldi	r31, 0x2D	; 45
    5a8c:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    5a90:	9f ef       	ldi	r25, 0xFF	; 255
    5a92:	92 0f       	add	r25, r18
    5a94:	98 30       	cpi	r25, 0x08	; 8
    5a96:	50 f5       	brcc	.+84     	; 0x5aec <i2c_rtc_write+0x68>
    5a98:	6c 83       	std	Y+4, r22	; 0x04
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	02 2f       	mov	r16, r18
    5a9e:	10 e0       	ldi	r17, 0x00	; 0
    5aa0:	69 2f       	mov	r22, r25
    5aa2:	09 2e       	mov	r0, r25
    5aa4:	00 0c       	add	r0, r0
    5aa6:	77 0b       	sbc	r23, r23
    5aa8:	60 17       	cp	r22, r16
    5aaa:	71 07       	cpc	r23, r17
    5aac:	6c f4       	brge	.+26     	; 0x5ac8 <i2c_rtc_write+0x44>
    5aae:	a5 e0       	ldi	r26, 0x05	; 5
    5ab0:	b0 e0       	ldi	r27, 0x00	; 0
    5ab2:	ac 0f       	add	r26, r28
    5ab4:	bd 1f       	adc	r27, r29
    5ab6:	a6 0f       	add	r26, r22
    5ab8:	b7 1f       	adc	r27, r23
    5aba:	64 0f       	add	r22, r20
    5abc:	75 1f       	adc	r23, r21
    5abe:	fb 01       	movw	r30, r22
    5ac0:	30 81       	ld	r19, Z
    5ac2:	3c 93       	st	X, r19
    5ac4:	9f 5f       	subi	r25, 0xFF	; 255
    5ac6:	ec cf       	rjmp	.-40     	; 0x5aa0 <i2c_rtc_write+0x1c>
    5ac8:	2f 5f       	subi	r18, 0xFF	; 255
    5aca:	ae 01       	movw	r20, r28
    5acc:	4c 5f       	subi	r20, 0xFC	; 252
    5ace:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad0:	60 e0       	ldi	r22, 0x00	; 0
    5ad2:	5a dd       	rcall	.-1356   	; 0x5588 <i2c_fn>
    5ad4:	81 11       	cpse	r24, r1
    5ad6:	0c c0       	rjmp	.+24     	; 0x5af0 <i2c_rtc_write+0x6c>
    5ad8:	8e ed       	ldi	r24, 0xDE	; 222
    5ada:	94 e0       	ldi	r25, 0x04	; 4
    5adc:	a0 e0       	ldi	r26, 0x00	; 0
    5ade:	ed b7       	in	r30, 0x3d	; 61
    5ae0:	fe b7       	in	r31, 0x3e	; 62
    5ae2:	81 83       	std	Z+1, r24	; 0x01
    5ae4:	92 83       	std	Z+2, r25	; 0x02
    5ae6:	a3 83       	std	Z+3, r26	; 0x03
    5ae8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	01 c0       	rjmp	.+2      	; 0x5af2 <i2c_rtc_write+0x6e>
    5af0:	81 e0       	ldi	r24, 0x01	; 1
    5af2:	2c 96       	adiw	r28, 0x0c	; 12
    5af4:	e4 e0       	ldi	r30, 0x04	; 4
    5af6:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00005afa <i2c_rtc_read>:
    5afa:	a4 e0       	ldi	r26, 0x04	; 4
    5afc:	b0 e0       	ldi	r27, 0x00	; 0
    5afe:	e3 e8       	ldi	r30, 0x83	; 131
    5b00:	fd e2       	ldi	r31, 0x2D	; 45
    5b02:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
    5b06:	6c 83       	std	Y+4, r22	; 0x04
    5b08:	9f ef       	ldi	r25, 0xFF	; 255
    5b0a:	92 0f       	add	r25, r18
    5b0c:	98 30       	cpi	r25, 0x08	; 8
    5b0e:	f8 f4       	brcc	.+62     	; 0x5b4e <i2c_rtc_read+0x54>
    5b10:	02 2f       	mov	r16, r18
    5b12:	7a 01       	movw	r14, r20
    5b14:	18 2f       	mov	r17, r24
    5b16:	21 e0       	ldi	r18, 0x01	; 1
    5b18:	ae 01       	movw	r20, r28
    5b1a:	4c 5f       	subi	r20, 0xFC	; 252
    5b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b1e:	60 e0       	ldi	r22, 0x00	; 0
    5b20:	33 dd       	rcall	.-1434   	; 0x5588 <i2c_fn>
    5b22:	81 11       	cpse	r24, r1
    5b24:	03 c0       	rjmp	.+6      	; 0x5b2c <i2c_rtc_read+0x32>
    5b26:	82 ec       	ldi	r24, 0xC2	; 194
    5b28:	94 e0       	ldi	r25, 0x04	; 4
    5b2a:	09 c0       	rjmp	.+18     	; 0x5b3e <i2c_rtc_read+0x44>
    5b2c:	20 2f       	mov	r18, r16
    5b2e:	a7 01       	movw	r20, r14
    5b30:	61 e0       	ldi	r22, 0x01	; 1
    5b32:	81 2f       	mov	r24, r17
    5b34:	29 dd       	rcall	.-1454   	; 0x5588 <i2c_fn>
    5b36:	81 11       	cpse	r24, r1
    5b38:	0c c0       	rjmp	.+24     	; 0x5b52 <i2c_rtc_read+0x58>
    5b3a:	89 ea       	ldi	r24, 0xA9	; 169
    5b3c:	94 e0       	ldi	r25, 0x04	; 4
    5b3e:	a0 e0       	ldi	r26, 0x00	; 0
    5b40:	ed b7       	in	r30, 0x3d	; 61
    5b42:	fe b7       	in	r31, 0x3e	; 62
    5b44:	81 83       	std	Z+1, r24	; 0x01
    5b46:	92 83       	std	Z+2, r25	; 0x02
    5b48:	a3 83       	std	Z+3, r26	; 0x03
    5b4a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
    5b50:	01 c0       	rjmp	.+2      	; 0x5b54 <i2c_rtc_read+0x5a>
    5b52:	81 e0       	ldi	r24, 0x01	; 1
    5b54:	24 96       	adiw	r28, 0x04	; 4
    5b56:	e6 e0       	ldi	r30, 0x06	; 6
    5b58:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00005b5c <i2c_rtc_init>:
    5b5c:	60 ea       	ldi	r22, 0xA0	; 160
    5b5e:	76 e8       	ldi	r23, 0x86	; 134
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	18 cc       	rjmp	.-2000   	; 0x5396 <i2c_init>
    5b66:	08 95       	ret

00005b68 <rtc_write>:
    5b68:	ab e0       	ldi	r26, 0x0B	; 11
    5b6a:	b0 e0       	ldi	r27, 0x00	; 0
    5b6c:	ea eb       	ldi	r30, 0xBA	; 186
    5b6e:	fd e2       	ldi	r31, 0x2D	; 45
    5b70:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    5b74:	8c 01       	movw	r16, r24
    5b76:	fc 01       	movw	r30, r24
    5b78:	80 81       	ld	r24, Z
    5b7a:	74 df       	rcall	.-280    	; 0x5a64 <BINtoBCD>
    5b7c:	8f 77       	andi	r24, 0x7F	; 127
    5b7e:	8c 83       	std	Y+4, r24	; 0x04
    5b80:	f8 01       	movw	r30, r16
    5b82:	82 81       	ldd	r24, Z+2	; 0x02
    5b84:	6f df       	rcall	.-290    	; 0x5a64 <BINtoBCD>
    5b86:	8f 77       	andi	r24, 0x7F	; 127
    5b88:	8d 83       	std	Y+5, r24	; 0x05
    5b8a:	f8 01       	movw	r30, r16
    5b8c:	84 81       	ldd	r24, Z+4	; 0x04
    5b8e:	6a df       	rcall	.-300    	; 0x5a64 <BINtoBCD>
    5b90:	8f 73       	andi	r24, 0x3F	; 63
    5b92:	8e 83       	std	Y+6, r24	; 0x06
    5b94:	f8 01       	movw	r30, r16
    5b96:	84 85       	ldd	r24, Z+12	; 0x0c
    5b98:	87 70       	andi	r24, 0x07	; 7
    5b9a:	8f 5f       	subi	r24, 0xFF	; 255
    5b9c:	8f 83       	std	Y+7, r24	; 0x07
    5b9e:	86 81       	ldd	r24, Z+6	; 0x06
    5ba0:	61 df       	rcall	.-318    	; 0x5a64 <BINtoBCD>
    5ba2:	8f 73       	andi	r24, 0x3F	; 63
    5ba4:	88 87       	std	Y+8, r24	; 0x08
    5ba6:	f8 01       	movw	r30, r16
    5ba8:	80 85       	ldd	r24, Z+8	; 0x08
    5baa:	8f 5f       	subi	r24, 0xFF	; 255
    5bac:	5b df       	rcall	.-330    	; 0x5a64 <BINtoBCD>
    5bae:	8f 71       	andi	r24, 0x1F	; 31
    5bb0:	89 87       	std	Y+9, r24	; 0x09
    5bb2:	f8 01       	movw	r30, r16
    5bb4:	82 85       	ldd	r24, Z+10	; 0x0a
    5bb6:	84 56       	subi	r24, 0x64	; 100
    5bb8:	55 df       	rcall	.-342    	; 0x5a64 <BINtoBCD>
    5bba:	8a 87       	std	Y+10, r24	; 0x0a
    5bbc:	83 e9       	ldi	r24, 0x93	; 147
    5bbe:	8b 87       	std	Y+11, r24	; 0x0b
    5bc0:	28 e0       	ldi	r18, 0x08	; 8
    5bc2:	ae 01       	movw	r20, r28
    5bc4:	4c 5f       	subi	r20, 0xFC	; 252
    5bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    5bc8:	60 e0       	ldi	r22, 0x00	; 0
    5bca:	88 e6       	ldi	r24, 0x68	; 104
    5bcc:	5b df       	rcall	.-330    	; 0x5a84 <i2c_rtc_write>
    5bce:	81 11       	cpse	r24, r1
    5bd0:	0c c0       	rjmp	.+24     	; 0x5bea <rtc_write+0x82>
    5bd2:	88 e9       	ldi	r24, 0x98	; 152
    5bd4:	94 e0       	ldi	r25, 0x04	; 4
    5bd6:	a0 e0       	ldi	r26, 0x00	; 0
    5bd8:	ed b7       	in	r30, 0x3d	; 61
    5bda:	fe b7       	in	r31, 0x3e	; 62
    5bdc:	81 83       	std	Z+1, r24	; 0x01
    5bde:	92 83       	std	Z+2, r25	; 0x02
    5be0:	a3 83       	std	Z+3, r26	; 0x03
    5be2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	01 c0       	rjmp	.+2      	; 0x5bec <rtc_write+0x84>
    5bea:	81 e0       	ldi	r24, 0x01	; 1
    5bec:	2b 96       	adiw	r28, 0x0b	; 11
    5bee:	e4 e0       	ldi	r30, 0x04	; 4
    5bf0:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00005bf4 <rtc_read>:
    5bf4:	ab e0       	ldi	r26, 0x0B	; 11
    5bf6:	b0 e0       	ldi	r27, 0x00	; 0
    5bf8:	e0 e0       	ldi	r30, 0x00	; 0
    5bfa:	fe e2       	ldi	r31, 0x2E	; 46
    5bfc:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    5c00:	8c 01       	movw	r16, r24
    5c02:	28 e0       	ldi	r18, 0x08	; 8
    5c04:	ae 01       	movw	r20, r28
    5c06:	4c 5f       	subi	r20, 0xFC	; 252
    5c08:	5f 4f       	sbci	r21, 0xFF	; 255
    5c0a:	60 e0       	ldi	r22, 0x00	; 0
    5c0c:	88 e6       	ldi	r24, 0x68	; 104
    5c0e:	75 df       	rcall	.-278    	; 0x5afa <i2c_rtc_read>
    5c10:	81 11       	cpse	r24, r1
    5c12:	0c c0       	rjmp	.+24     	; 0x5c2c <rtc_read+0x38>
    5c14:	88 e8       	ldi	r24, 0x88	; 136
    5c16:	94 e0       	ldi	r25, 0x04	; 4
    5c18:	a0 e0       	ldi	r26, 0x00	; 0
    5c1a:	ed b7       	in	r30, 0x3d	; 61
    5c1c:	fe b7       	in	r31, 0x3e	; 62
    5c1e:	81 83       	std	Z+1, r24	; 0x01
    5c20:	92 83       	std	Z+2, r25	; 0x02
    5c22:	a3 83       	std	Z+3, r26	; 0x03
    5c24:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5c28:	80 e0       	ldi	r24, 0x00	; 0
    5c2a:	33 c0       	rjmp	.+102    	; 0x5c92 <rtc_read+0x9e>
    5c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    5c2e:	8f 77       	andi	r24, 0x7F	; 127
    5c30:	20 df       	rcall	.-448    	; 0x5a72 <BCDtoBIN>
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	f8 01       	movw	r30, r16
    5c36:	91 83       	std	Z+1, r25	; 0x01
    5c38:	80 83       	st	Z, r24
    5c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3c:	8f 77       	andi	r24, 0x7F	; 127
    5c3e:	19 df       	rcall	.-462    	; 0x5a72 <BCDtoBIN>
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	f8 01       	movw	r30, r16
    5c44:	93 83       	std	Z+3, r25	; 0x03
    5c46:	82 83       	std	Z+2, r24	; 0x02
    5c48:	8e 81       	ldd	r24, Y+6	; 0x06
    5c4a:	8f 73       	andi	r24, 0x3F	; 63
    5c4c:	12 df       	rcall	.-476    	; 0x5a72 <BCDtoBIN>
    5c4e:	90 e0       	ldi	r25, 0x00	; 0
    5c50:	f8 01       	movw	r30, r16
    5c52:	95 83       	std	Z+5, r25	; 0x05
    5c54:	84 83       	std	Z+4, r24	; 0x04
    5c56:	8f 81       	ldd	r24, Y+7	; 0x07
    5c58:	87 70       	andi	r24, 0x07	; 7
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	01 97       	sbiw	r24, 0x01	; 1
    5c5e:	95 87       	std	Z+13, r25	; 0x0d
    5c60:	84 87       	std	Z+12, r24	; 0x0c
    5c62:	88 85       	ldd	r24, Y+8	; 0x08
    5c64:	8f 73       	andi	r24, 0x3F	; 63
    5c66:	05 df       	rcall	.-502    	; 0x5a72 <BCDtoBIN>
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	f8 01       	movw	r30, r16
    5c6c:	97 83       	std	Z+7, r25	; 0x07
    5c6e:	86 83       	std	Z+6, r24	; 0x06
    5c70:	89 85       	ldd	r24, Y+9	; 0x09
    5c72:	8f 71       	andi	r24, 0x1F	; 31
    5c74:	fe de       	rcall	.-516    	; 0x5a72 <BCDtoBIN>
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	01 97       	sbiw	r24, 0x01	; 1
    5c7a:	f8 01       	movw	r30, r16
    5c7c:	91 87       	std	Z+9, r25	; 0x09
    5c7e:	80 87       	std	Z+8, r24	; 0x08
    5c80:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c82:	f7 de       	rcall	.-530    	; 0x5a72 <BCDtoBIN>
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	8c 59       	subi	r24, 0x9C	; 156
    5c88:	9f 4f       	sbci	r25, 0xFF	; 255
    5c8a:	f8 01       	movw	r30, r16
    5c8c:	93 87       	std	Z+11, r25	; 0x0b
    5c8e:	82 87       	std	Z+10, r24	; 0x0a
    5c90:	81 e0       	ldi	r24, 0x01	; 1
    5c92:	2b 96       	adiw	r28, 0x0b	; 11
    5c94:	e4 e0       	ldi	r30, 0x04	; 4
    5c96:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00005c9a <rtc_run>:
    5c9a:	a4 e0       	ldi	r26, 0x04	; 4
    5c9c:	b0 e0       	ldi	r27, 0x00	; 0
    5c9e:	e3 e5       	ldi	r30, 0x53	; 83
    5ca0:	fe e2       	ldi	r31, 0x2E	; 46
    5ca2:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    5ca6:	8c 01       	movw	r16, r24
    5ca8:	21 e0       	ldi	r18, 0x01	; 1
    5caa:	ae 01       	movw	r20, r28
    5cac:	4c 5f       	subi	r20, 0xFC	; 252
    5cae:	5f 4f       	sbci	r21, 0xFF	; 255
    5cb0:	60 e0       	ldi	r22, 0x00	; 0
    5cb2:	88 e6       	ldi	r24, 0x68	; 104
    5cb4:	22 df       	rcall	.-444    	; 0x5afa <i2c_rtc_read>
    5cb6:	81 11       	cpse	r24, r1
    5cb8:	03 c0       	rjmp	.+6      	; 0x5cc0 <rtc_run+0x26>
    5cba:	84 e7       	ldi	r24, 0x74	; 116
    5cbc:	94 e0       	ldi	r25, 0x04	; 4
    5cbe:	24 c0       	rjmp	.+72     	; 0x5d08 <rtc_run+0x6e>
    5cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    5cc2:	0f 3f       	cpi	r16, 0xFF	; 255
    5cc4:	ff ef       	ldi	r31, 0xFF	; 255
    5cc6:	1f 07       	cpc	r17, r31
    5cc8:	59 f4       	brne	.+22     	; 0x5ce0 <rtc_run+0x46>
    5cca:	08 2e       	mov	r0, r24
    5ccc:	00 0c       	add	r0, r0
    5cce:	99 0b       	sbc	r25, r25
    5cd0:	80 95       	com	r24
    5cd2:	90 95       	com	r25
    5cd4:	89 2f       	mov	r24, r25
    5cd6:	88 1f       	adc	r24, r24
    5cd8:	88 27       	eor	r24, r24
    5cda:	88 1f       	adc	r24, r24
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	20 c0       	rjmp	.+64     	; 0x5d20 <rtc_run+0x86>
    5ce0:	8f 77       	andi	r24, 0x7F	; 127
    5ce2:	01 15       	cp	r16, r1
    5ce4:	11 05       	cpc	r17, r1
    5ce6:	11 f4       	brne	.+4      	; 0x5cec <rtc_run+0x52>
    5ce8:	90 e8       	ldi	r25, 0x80	; 128
    5cea:	01 c0       	rjmp	.+2      	; 0x5cee <rtc_run+0x54>
    5cec:	90 e0       	ldi	r25, 0x00	; 0
    5cee:	89 2b       	or	r24, r25
    5cf0:	8c 83       	std	Y+4, r24	; 0x04
    5cf2:	21 e0       	ldi	r18, 0x01	; 1
    5cf4:	ae 01       	movw	r20, r28
    5cf6:	4c 5f       	subi	r20, 0xFC	; 252
    5cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cfa:	60 e0       	ldi	r22, 0x00	; 0
    5cfc:	88 e6       	ldi	r24, 0x68	; 104
    5cfe:	c2 de       	rcall	.-636    	; 0x5a84 <i2c_rtc_write>
    5d00:	81 11       	cpse	r24, r1
    5d02:	0d c0       	rjmp	.+26     	; 0x5d1e <rtc_run+0x84>
    5d04:	8f e5       	ldi	r24, 0x5F	; 95
    5d06:	94 e0       	ldi	r25, 0x04	; 4
    5d08:	a0 e0       	ldi	r26, 0x00	; 0
    5d0a:	ed b7       	in	r30, 0x3d	; 61
    5d0c:	fe b7       	in	r31, 0x3e	; 62
    5d0e:	81 83       	std	Z+1, r24	; 0x01
    5d10:	92 83       	std	Z+2, r25	; 0x02
    5d12:	a3 83       	std	Z+3, r26	; 0x03
    5d14:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5d18:	8f ef       	ldi	r24, 0xFF	; 255
    5d1a:	9f ef       	ldi	r25, 0xFF	; 255
    5d1c:	01 c0       	rjmp	.+2      	; 0x5d20 <rtc_run+0x86>
    5d1e:	c8 01       	movw	r24, r16
    5d20:	24 96       	adiw	r28, 0x04	; 4
    5d22:	e4 e0       	ldi	r30, 0x04	; 4
    5d24:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00005d28 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5d28:	a7 e0       	ldi	r26, 0x07	; 7
    5d2a:	b0 e0       	ldi	r27, 0x00	; 0
    5d2c:	ea e9       	ldi	r30, 0x9A	; 154
    5d2e:	fe e2       	ldi	r31, 0x2E	; 46
    5d30:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    5d34:	8c 01       	movw	r16, r24
    5d36:	4c 83       	std	Y+4, r20	; 0x04
    5d38:	5d 83       	std	Y+5, r21	; 0x05
    5d3a:	6e 83       	std	Y+6, r22	; 0x06
    5d3c:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5d3e:	0e df       	rcall	.-484    	; 0x5b5c <i2c_rtc_init>

    if(!force)
    5d40:	01 15       	cp	r16, r1
    5d42:	11 05       	cpc	r17, r1
    5d44:	39 f4       	brne	.+14     	; 0x5d54 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5d46:	8f ef       	ldi	r24, 0xFF	; 255
    5d48:	9f ef       	ldi	r25, 0xFF	; 255
    5d4a:	a7 df       	rcall	.-178    	; 0x5c9a <rtc_run>
        if(state < 0)
    5d4c:	87 fd       	sbrc	r24, 7
    5d4e:	16 c0       	rjmp	.+44     	; 0x5d7c <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5d50:	81 11       	cpse	r24, r1
    5d52:	22 c0       	rjmp	.+68     	; 0x5d98 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5d54:	80 e0       	ldi	r24, 0x00	; 0
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	a0 df       	rcall	.-192    	; 0x5c9a <rtc_run>
    5d5a:	97 fd       	sbrc	r25, 7
    5d5c:	0f c0       	rjmp	.+30     	; 0x5d7c <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5d5e:	ce 01       	movw	r24, r28
    5d60:	04 96       	adiw	r24, 0x04	; 4
    5d62:	a3 d6       	rcall	.+3398   	; 0x6aaa <gmtime>
    5d64:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5d66:	81 f4       	brne	.+32     	; 0x5d88 <rtc_init+0x60>
    5d68:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5d6a:	94 e0       	ldi	r25, 0x04	; 4
    5d6c:	a0 e0       	ldi	r26, 0x00	; 0
    5d6e:	ed b7       	in	r30, 0x3d	; 61
    5d70:	fe b7       	in	r31, 0x3e	; 62
    5d72:	81 83       	std	Z+1, r24	; 0x01
    5d74:	92 83       	std	Z+2, r25	; 0x02
    5d76:	a3 83       	std	Z+3, r26	; 0x03
    5d78:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5d7c:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <rtc_ok+0x1>
            rtc_ok = 0;
    5d80:	10 92 e3 19 	sts	0x19E3, r1	; 0x8019e3 <rtc_ok>
            return 0;
    5d84:	80 e0       	ldi	r24, 0x00	; 0
    5d86:	0e c0       	rjmp	.+28     	; 0x5da4 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5d88:	ef de       	rcall	.-546    	; 0x5b68 <rtc_write>
    5d8a:	88 23       	and	r24, r24
    5d8c:	69 f3       	breq	.-38     	; 0x5d68 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5d8e:	81 e0       	ldi	r24, 0x01	; 1
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	83 df       	rcall	.-250    	; 0x5c9a <rtc_run>
    5d94:	97 fd       	sbrc	r25, 7
    5d96:	f2 cf       	rjmp	.-28     	; 0x5d7c <rtc_init+0x54>
    5d98:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5d9a:	90 e0       	ldi	r25, 0x00	; 0
    5d9c:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <rtc_ok+0x1>
    5da0:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <rtc_ok>
    5da4:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5da6:	e4 e0       	ldi	r30, 0x04	; 4
    5da8:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00005dac <islower>:
    5dac:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5dae:	21 56       	subi	r18, 0x61	; 97
    5db0:	31 09       	sbc	r19, r1
    5db2:	81 e0       	ldi	r24, 0x01	; 1
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	2a 31       	cpi	r18, 0x1A	; 26
    5db8:	31 05       	cpc	r19, r1
    5dba:	10 f0       	brcs	.+4      	; 0x5dc0 <islower+0x14>
    5dbc:	80 e0       	ldi	r24, 0x00	; 0
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	08 95       	ret

00005dc2 <toupper>:
    5dc2:	cf 93       	push	r28
    5dc4:	df 93       	push	r29
    5dc6:	ec 01       	movw	r28, r24
    5dc8:	f1 df       	rcall	.-30     	; 0x5dac <islower>
    5dca:	89 2b       	or	r24, r25
    5dcc:	19 f0       	breq	.+6      	; 0x5dd4 <toupper+0x12>
    5dce:	ce 01       	movw	r24, r28
    5dd0:	80 97       	sbiw	r24, 0x20	; 32
    5dd2:	01 c0       	rjmp	.+2      	; 0x5dd6 <toupper+0x14>
    5dd4:	ce 01       	movw	r24, r28
    5dd6:	df 91       	pop	r29
    5dd8:	cf 91       	pop	r28
    5dda:	08 95       	ret

00005ddc <strcpy>:
    5ddc:	fc 01       	movw	r30, r24
    5dde:	db 01       	movw	r26, r22
    5de0:	2d 91       	ld	r18, X+
    5de2:	bd 01       	movw	r22, r26
    5de4:	01 96       	adiw	r24, 0x01	; 1
    5de6:	22 23       	and	r18, r18
    5de8:	11 f0       	breq	.+4      	; 0x5dee <strcpy+0x12>
    5dea:	20 83       	st	Z, r18
    5dec:	f7 cf       	rjmp	.-18     	; 0x5ddc <strcpy>
    5dee:	10 82       	st	Z, r1
    5df0:	08 95       	ret

00005df2 <strncpy>:
    5df2:	db 01       	movw	r26, r22
    5df4:	fc 01       	movw	r30, r24
    5df6:	2d 91       	ld	r18, X+
    5df8:	21 11       	cpse	r18, r1
    5dfa:	03 c0       	rjmp	.+6      	; 0x5e02 <strncpy+0x10>
    5dfc:	4e 0f       	add	r20, r30
    5dfe:	5f 1f       	adc	r21, r31
    5e00:	08 c0       	rjmp	.+16     	; 0x5e12 <strncpy+0x20>
    5e02:	41 15       	cp	r20, r1
    5e04:	51 05       	cpc	r21, r1
    5e06:	21 f0       	breq	.+8      	; 0x5e10 <strncpy+0x1e>
    5e08:	21 93       	st	Z+, r18
    5e0a:	41 50       	subi	r20, 0x01	; 1
    5e0c:	51 09       	sbc	r21, r1
    5e0e:	f3 cf       	rjmp	.-26     	; 0x5df6 <strncpy+0x4>
    5e10:	08 95       	ret
    5e12:	4e 17       	cp	r20, r30
    5e14:	5f 07       	cpc	r21, r31
    5e16:	11 f0       	breq	.+4      	; 0x5e1c <strncpy+0x2a>
    5e18:	11 92       	st	Z+, r1
    5e1a:	fb cf       	rjmp	.-10     	; 0x5e12 <strncpy+0x20>
    5e1c:	08 95       	ret

00005e1e <strcat>:
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	d8 2f       	mov	r29, r24
    5e24:	c9 2f       	mov	r28, r25
    5e26:	28 2f       	mov	r18, r24
    5e28:	39 2f       	mov	r19, r25
    5e2a:	c9 01       	movw	r24, r18
    5e2c:	2f 5f       	subi	r18, 0xFF	; 255
    5e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e30:	fc 01       	movw	r30, r24
    5e32:	40 81       	ld	r20, Z
    5e34:	41 11       	cpse	r20, r1
    5e36:	f9 cf       	rjmp	.-14     	; 0x5e2a <strcat+0xc>
    5e38:	d1 df       	rcall	.-94     	; 0x5ddc <strcpy>
    5e3a:	8d 2f       	mov	r24, r29
    5e3c:	9c 2f       	mov	r25, r28
    5e3e:	df 91       	pop	r29
    5e40:	cf 91       	pop	r28
    5e42:	08 95       	ret

00005e44 <reverse>:
    5e44:	fc 01       	movw	r30, r24
    5e46:	01 90       	ld	r0, Z+
    5e48:	00 20       	and	r0, r0
    5e4a:	e9 f7       	brne	.-6      	; 0x5e46 <reverse+0x2>
    5e4c:	31 97       	sbiw	r30, 0x01	; 1
    5e4e:	e8 1b       	sub	r30, r24
    5e50:	f9 0b       	sbc	r31, r25
    5e52:	af 01       	movw	r20, r30
    5e54:	55 95       	asr	r21
    5e56:	47 95       	ror	r20
    5e58:	e8 0f       	add	r30, r24
    5e5a:	f9 1f       	adc	r31, r25
    5e5c:	dc 01       	movw	r26, r24
    5e5e:	9d 01       	movw	r18, r26
    5e60:	28 1b       	sub	r18, r24
    5e62:	39 0b       	sbc	r19, r25
    5e64:	24 17       	cp	r18, r20
    5e66:	35 07       	cpc	r19, r21
    5e68:	2c f4       	brge	.+10     	; 0x5e74 <reverse+0x30>
    5e6a:	22 91       	ld	r18, -Z
    5e6c:	3c 91       	ld	r19, X
    5e6e:	30 83       	st	Z, r19
    5e70:	2d 93       	st	X+, r18
    5e72:	f5 cf       	rjmp	.-22     	; 0x5e5e <reverse+0x1a>
    5e74:	08 95       	ret

00005e76 <strupper>:
    5e76:	cf 93       	push	r28
    5e78:	df 93       	push	r29
    5e7a:	ec 01       	movw	r28, r24
    5e7c:	88 81       	ld	r24, Y
    5e7e:	88 23       	and	r24, r24
    5e80:	21 f0       	breq	.+8      	; 0x5e8a <strupper+0x14>
    5e82:	90 e0       	ldi	r25, 0x00	; 0
    5e84:	9e df       	rcall	.-196    	; 0x5dc2 <toupper>
    5e86:	89 93       	st	Y+, r24
    5e88:	f9 cf       	rjmp	.-14     	; 0x5e7c <strupper+0x6>
    5e8a:	df 91       	pop	r29
    5e8c:	cf 91       	pop	r28
    5e8e:	08 95       	ret

00005e90 <strcmp>:
    5e90:	dc 01       	movw	r26, r24
    5e92:	fb 01       	movw	r30, r22
    5e94:	2d 91       	ld	r18, X+
    5e96:	41 91       	ld	r20, Z+
    5e98:	50 e0       	ldi	r21, 0x00	; 0
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	c9 01       	movw	r24, r18
    5e9e:	84 1b       	sub	r24, r20
    5ea0:	95 0b       	sbc	r25, r21
    5ea2:	11 f4       	brne	.+4      	; 0x5ea8 <strcmp+0x18>
    5ea4:	45 2b       	or	r20, r21
    5ea6:	b1 f7       	brne	.-20     	; 0x5e94 <strcmp+0x4>
    5ea8:	08 95       	ret

00005eaa <strcasecmp>:
    5eaa:	ef 92       	push	r14
    5eac:	ff 92       	push	r15
    5eae:	0f 93       	push	r16
    5eb0:	1f 93       	push	r17
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
    5eb6:	7c 01       	movw	r14, r24
    5eb8:	8b 01       	movw	r16, r22
    5eba:	f7 01       	movw	r30, r14
    5ebc:	81 91       	ld	r24, Z+
    5ebe:	7f 01       	movw	r14, r30
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	7f df       	rcall	.-258    	; 0x5dc2 <toupper>
    5ec4:	ec 01       	movw	r28, r24
    5ec6:	f8 01       	movw	r30, r16
    5ec8:	81 91       	ld	r24, Z+
    5eca:	8f 01       	movw	r16, r30
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	79 df       	rcall	.-270    	; 0x5dc2 <toupper>
    5ed0:	9c 01       	movw	r18, r24
    5ed2:	ce 01       	movw	r24, r28
    5ed4:	82 1b       	sub	r24, r18
    5ed6:	93 0b       	sbc	r25, r19
    5ed8:	11 f4       	brne	.+4      	; 0x5ede <strcasecmp+0x34>
    5eda:	23 2b       	or	r18, r19
    5edc:	71 f7       	brne	.-36     	; 0x5eba <strcasecmp+0x10>
    5ede:	cd b7       	in	r28, 0x3d	; 61
    5ee0:	de b7       	in	r29, 0x3e	; 62
    5ee2:	e6 e0       	ldi	r30, 0x06	; 6
    5ee4:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00005ee8 <strncasecmp>:
    5ee8:	a0 e0       	ldi	r26, 0x00	; 0
    5eea:	b0 e0       	ldi	r27, 0x00	; 0
    5eec:	ea e7       	ldi	r30, 0x7A	; 122
    5eee:	ff e2       	ldi	r31, 0x2F	; 47
    5ef0:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    5ef4:	8c 01       	movw	r16, r24
    5ef6:	7b 01       	movw	r14, r22
    5ef8:	6c 01       	movw	r12, r24
    5efa:	c4 0e       	add	r12, r20
    5efc:	d5 1e       	adc	r13, r21
    5efe:	0c 15       	cp	r16, r12
    5f00:	1d 05       	cpc	r17, r13
    5f02:	99 f0       	breq	.+38     	; 0x5f2a <strncasecmp+0x42>
    5f04:	f8 01       	movw	r30, r16
    5f06:	81 91       	ld	r24, Z+
    5f08:	8f 01       	movw	r16, r30
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	5a df       	rcall	.-332    	; 0x5dc2 <toupper>
    5f0e:	ec 01       	movw	r28, r24
    5f10:	f7 01       	movw	r30, r14
    5f12:	81 91       	ld	r24, Z+
    5f14:	7f 01       	movw	r14, r30
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	54 df       	rcall	.-344    	; 0x5dc2 <toupper>
    5f1a:	9c 01       	movw	r18, r24
    5f1c:	ce 01       	movw	r24, r28
    5f1e:	82 1b       	sub	r24, r18
    5f20:	93 0b       	sbc	r25, r19
    5f22:	29 f4       	brne	.+10     	; 0x5f2e <strncasecmp+0x46>
    5f24:	23 2b       	or	r18, r19
    5f26:	59 f7       	brne	.-42     	; 0x5efe <strncasecmp+0x16>
    5f28:	02 c0       	rjmp	.+4      	; 0x5f2e <strncasecmp+0x46>
    5f2a:	80 e0       	ldi	r24, 0x00	; 0
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	cd b7       	in	r28, 0x3d	; 61
    5f30:	de b7       	in	r29, 0x3e	; 62
    5f32:	e8 e0       	ldi	r30, 0x08	; 8
    5f34:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

00005f38 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    5f38:	0f 93       	push	r16
    5f3a:	1f 93       	push	r17
    5f3c:	cf 93       	push	r28
    5f3e:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    5f40:	00 97       	sbiw	r24, 0x00	; 0
    5f42:	99 f0       	breq	.+38     	; 0x5f6a <stralloc+0x32>
    5f44:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    5f46:	fc 01       	movw	r30, r24
    5f48:	01 90       	ld	r0, Z+
    5f4a:	00 20       	and	r0, r0
    5f4c:	e9 f7       	brne	.-6      	; 0x5f48 <stralloc+0x10>
    5f4e:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    5f50:	61 e0       	ldi	r22, 0x01	; 1
    5f52:	70 e0       	ldi	r23, 0x00	; 0
    5f54:	8c 1b       	sub	r24, r28
    5f56:	9d 0b       	sbc	r25, r29
    5f58:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
    5f5c:	8c 01       	movw	r16, r24
    if(!ptr)
    5f5e:	00 97       	sbiw	r24, 0x00	; 0
    5f60:	21 f0       	breq	.+8      	; 0x5f6a <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    5f62:	be 01       	movw	r22, r28
    5f64:	3b df       	rcall	.-394    	; 0x5ddc <strcpy>
    return(ptr);
    5f66:	c8 01       	movw	r24, r16
    5f68:	02 c0       	rjmp	.+4      	; 0x5f6e <stralloc+0x36>
    5f6a:	80 e0       	ldi	r24, 0x00	; 0
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
}
    5f6e:	df 91       	pop	r29
    5f70:	cf 91       	pop	r28
    5f72:	1f 91       	pop	r17
    5f74:	0f 91       	pop	r16
    5f76:	08 95       	ret

00005f78 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    5f78:	00 d0       	rcall	.+0      	; 0x5f7a <sep+0x2>
    5f7a:	1f 92       	push	r1
    5f7c:	8e e1       	ldi	r24, 0x1E	; 30
    5f7e:	95 e0       	ldi	r25, 0x05	; 5
    5f80:	a0 e0       	ldi	r26, 0x00	; 0
    5f82:	ed b7       	in	r30, 0x3d	; 61
    5f84:	fe b7       	in	r31, 0x3e	; 62
    5f86:	81 83       	std	Z+1, r24	; 0x01
    5f88:	92 83       	std	Z+2, r25	; 0x02
    5f8a:	a3 83       	std	Z+3, r26	; 0x03
    5f8c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    5f90:	0f 90       	pop	r0
    5f92:	0f 90       	pop	r0
    5f94:	0f 90       	pop	r0
    5f96:	08 95       	ret

00005f98 <trim_tail>:
    5f98:	00 97       	sbiw	r24, 0x00	; 0
    5f9a:	69 f0       	breq	.+26     	; 0x5fb6 <trim_tail+0x1e>
    5f9c:	fc 01       	movw	r30, r24
    5f9e:	01 90       	ld	r0, Z+
    5fa0:	00 20       	and	r0, r0
    5fa2:	e9 f7       	brne	.-6      	; 0x5f9e <trim_tail+0x6>
    5fa4:	31 97       	sbiw	r30, 0x01	; 1
    5fa6:	e8 17       	cp	r30, r24
    5fa8:	f9 07       	cpc	r31, r25
    5faa:	29 f0       	breq	.+10     	; 0x5fb6 <trim_tail+0x1e>
    5fac:	22 91       	ld	r18, -Z
    5fae:	21 32       	cpi	r18, 0x21	; 33
    5fb0:	10 f4       	brcc	.+4      	; 0x5fb6 <trim_tail+0x1e>
    5fb2:	10 82       	st	Z, r1
    5fb4:	f8 cf       	rjmp	.-16     	; 0x5fa6 <trim_tail+0xe>
    5fb6:	08 95       	ret

00005fb8 <skipspaces>:
    5fb8:	00 97       	sbiw	r24, 0x00	; 0
    5fba:	39 f0       	breq	.+14     	; 0x5fca <skipspaces+0x12>
    5fbc:	fc 01       	movw	r30, r24
    5fbe:	cf 01       	movw	r24, r30
    5fc0:	21 91       	ld	r18, Z+
    5fc2:	20 32       	cpi	r18, 0x20	; 32
    5fc4:	e1 f3       	breq	.-8      	; 0x5fbe <skipspaces+0x6>
    5fc6:	29 30       	cpi	r18, 0x09	; 9
    5fc8:	d1 f3       	breq	.-12     	; 0x5fbe <skipspaces+0x6>
    5fca:	08 95       	ret

00005fcc <MATCH>:
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	fb 01       	movw	r30, r22
    5fd2:	01 90       	ld	r0, Z+
    5fd4:	00 20       	and	r0, r0
    5fd6:	e9 f7       	brne	.-6      	; 0x5fd2 <MATCH+0x6>
    5fd8:	31 97       	sbiw	r30, 0x01	; 1
    5fda:	ef 01       	movw	r28, r30
    5fdc:	c6 1b       	sub	r28, r22
    5fde:	d7 0b       	sbc	r29, r23
    5fe0:	57 df       	rcall	.-338    	; 0x5e90 <strcmp>
    5fe2:	89 2b       	or	r24, r25
    5fe4:	11 f4       	brne	.+4      	; 0x5fea <MATCH+0x1e>
    5fe6:	ce 01       	movw	r24, r28
    5fe8:	02 c0       	rjmp	.+4      	; 0x5fee <MATCH+0x22>
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	df 91       	pop	r29
    5ff0:	cf 91       	pop	r28
    5ff2:	08 95       	ret

00005ff4 <MATCHI>:
    5ff4:	cf 93       	push	r28
    5ff6:	df 93       	push	r29
    5ff8:	fb 01       	movw	r30, r22
    5ffa:	01 90       	ld	r0, Z+
    5ffc:	00 20       	and	r0, r0
    5ffe:	e9 f7       	brne	.-6      	; 0x5ffa <MATCHI+0x6>
    6000:	31 97       	sbiw	r30, 0x01	; 1
    6002:	ef 01       	movw	r28, r30
    6004:	c6 1b       	sub	r28, r22
    6006:	d7 0b       	sbc	r29, r23
    6008:	50 df       	rcall	.-352    	; 0x5eaa <strcasecmp>
    600a:	89 2b       	or	r24, r25
    600c:	11 f4       	brne	.+4      	; 0x6012 <MATCHI+0x1e>
    600e:	ce 01       	movw	r24, r28
    6010:	02 c0       	rjmp	.+4      	; 0x6016 <MATCHI+0x22>
    6012:	80 e0       	ldi	r24, 0x00	; 0
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	df 91       	pop	r29
    6018:	cf 91       	pop	r28
    601a:	08 95       	ret

0000601c <MATCHARGS>:
    601c:	a9 e0       	ldi	r26, 0x09	; 9
    601e:	b0 e0       	ldi	r27, 0x00	; 0
    6020:	e4 e1       	ldi	r30, 0x14	; 20
    6022:	f0 e3       	ldi	r31, 0x30	; 48
    6024:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
    6028:	eb 01       	movw	r28, r22
    602a:	8a 01       	movw	r16, r20
    602c:	79 01       	movw	r14, r18
    602e:	e2 df       	rcall	.-60     	; 0x5ff4 <MATCHI>
    6030:	00 97       	sbiw	r24, 0x00	; 0
    6032:	c1 f0       	breq	.+48     	; 0x6064 <MATCHARGS+0x48>
    6034:	e0 16       	cp	r14, r16
    6036:	f1 06       	cpc	r15, r17
    6038:	9c f4       	brge	.+38     	; 0x6060 <MATCHARGS+0x44>
    603a:	ed b7       	in	r30, 0x3d	; 61
    603c:	fe b7       	in	r31, 0x3e	; 62
    603e:	f1 86       	std	Z+9, r15	; 0x09
    6040:	e0 86       	std	Z+8, r14	; 0x08
    6042:	17 83       	std	Z+7, r17	; 0x07
    6044:	06 83       	std	Z+6, r16	; 0x06
    6046:	d5 83       	std	Z+5, r29	; 0x05
    6048:	c4 83       	std	Z+4, r28	; 0x04
    604a:	88 ef       	ldi	r24, 0xF8	; 248
    604c:	94 e0       	ldi	r25, 0x04	; 4
    604e:	a0 e0       	ldi	r26, 0x00	; 0
    6050:	81 83       	std	Z+1, r24	; 0x01
    6052:	92 83       	std	Z+2, r25	; 0x02
    6054:	a3 83       	std	Z+3, r26	; 0x03
    6056:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    605a:	80 e0       	ldi	r24, 0x00	; 0
    605c:	90 e0       	ldi	r25, 0x00	; 0
    605e:	02 c0       	rjmp	.+4      	; 0x6064 <MATCHARGS+0x48>
    6060:	81 e0       	ldi	r24, 0x01	; 1
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	cd b7       	in	r28, 0x3d	; 61
    6066:	de b7       	in	r29, 0x3e	; 62
    6068:	29 96       	adiw	r28, 0x09	; 9
    606a:	e6 e0       	ldi	r30, 0x06	; 6
    606c:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00006070 <MATCHI_LEN>:
    6070:	cf 93       	push	r28
    6072:	df 93       	push	r29
    6074:	00 97       	sbiw	r24, 0x00	; 0
    6076:	89 f0       	breq	.+34     	; 0x609a <MATCHI_LEN+0x2a>
    6078:	61 15       	cp	r22, r1
    607a:	71 05       	cpc	r23, r1
    607c:	71 f0       	breq	.+28     	; 0x609a <MATCHI_LEN+0x2a>
    607e:	eb 01       	movw	r28, r22
    6080:	09 90       	ld	r0, Y+
    6082:	00 20       	and	r0, r0
    6084:	e9 f7       	brne	.-6      	; 0x6080 <MATCHI_LEN+0x10>
    6086:	21 97       	sbiw	r28, 0x01	; 1
    6088:	c6 1b       	sub	r28, r22
    608a:	d7 0b       	sbc	r29, r23
    608c:	31 f0       	breq	.+12     	; 0x609a <MATCHI_LEN+0x2a>
    608e:	ae 01       	movw	r20, r28
    6090:	2b df       	rcall	.-426    	; 0x5ee8 <strncasecmp>
    6092:	89 2b       	or	r24, r25
    6094:	11 f4       	brne	.+4      	; 0x609a <MATCHI_LEN+0x2a>
    6096:	ce 01       	movw	r24, r28
    6098:	02 c0       	rjmp	.+4      	; 0x609e <MATCHI_LEN+0x2e>
    609a:	80 e0       	ldi	r24, 0x00	; 0
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	df 91       	pop	r29
    60a0:	cf 91       	pop	r28
    60a2:	08 95       	ret

000060a4 <split_args>:
    60a4:	a0 e0       	ldi	r26, 0x00	; 0
    60a6:	b0 e0       	ldi	r27, 0x00	; 0
    60a8:	e8 e5       	ldi	r30, 0x58	; 88
    60aa:	f0 e3       	ldi	r31, 0x30	; 48
    60ac:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    60b0:	dc 01       	movw	r26, r24
    60b2:	6a 01       	movw	r12, r20
    60b4:	8b 01       	movw	r16, r22
    60b6:	fb 01       	movw	r30, r22
    60b8:	80 e0       	ldi	r24, 0x00	; 0
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	8c 15       	cp	r24, r12
    60be:	9d 05       	cpc	r25, r13
    60c0:	24 f4       	brge	.+8      	; 0x60ca <split_args+0x26>
    60c2:	11 92       	st	Z+, r1
    60c4:	11 92       	st	Z+, r1
    60c6:	01 96       	adiw	r24, 0x01	; 1
    60c8:	f9 cf       	rjmp	.-14     	; 0x60bc <split_args+0x18>
    60ca:	c1 14       	cp	r12, r1
    60cc:	d1 04       	cpc	r13, r1
    60ce:	d9 f1       	breq	.+118    	; 0x6146 <split_args+0xa2>
    60d0:	10 97       	sbiw	r26, 0x00	; 0
    60d2:	c9 f1       	breq	.+114    	; 0x6146 <split_args+0xa2>
    60d4:	ee 24       	eor	r14, r14
    60d6:	e3 94       	inc	r14
    60d8:	f1 2c       	mov	r15, r1
    60da:	c0 e0       	ldi	r28, 0x00	; 0
    60dc:	d0 e0       	ldi	r29, 0x00	; 0
    60de:	8c 91       	ld	r24, X
    60e0:	88 23       	and	r24, r24
    60e2:	b1 f1       	breq	.+108    	; 0x6150 <split_args+0xac>
    60e4:	cc 15       	cp	r28, r12
    60e6:	dd 05       	cpc	r29, r13
    60e8:	9c f5       	brge	.+102    	; 0x6150 <split_args+0xac>
    60ea:	cd 01       	movw	r24, r26
    60ec:	65 df       	rcall	.-310    	; 0x5fb8 <skipspaces>
    60ee:	dc 01       	movw	r26, r24
    60f0:	2c 91       	ld	r18, X
    60f2:	22 23       	and	r18, r18
    60f4:	69 f1       	breq	.+90     	; 0x6150 <split_args+0xac>
    60f6:	22 32       	cpi	r18, 0x22	; 34
    60f8:	79 f4       	brne	.+30     	; 0x6118 <split_args+0x74>
    60fa:	fc 01       	movw	r30, r24
    60fc:	31 96       	adiw	r30, 0x01	; 1
    60fe:	d8 01       	movw	r26, r16
    6100:	ed 93       	st	X+, r30
    6102:	fc 93       	st	X, r31
    6104:	df 01       	movw	r26, r30
    6106:	80 81       	ld	r24, Z
    6108:	31 96       	adiw	r30, 0x01	; 1
    610a:	88 23       	and	r24, r24
    610c:	a9 f0       	breq	.+42     	; 0x6138 <split_args+0x94>
    610e:	82 32       	cpi	r24, 0x22	; 34
    6110:	c9 f7       	brne	.-14     	; 0x6104 <split_args+0x60>
    6112:	1c 92       	st	X, r1
    6114:	df 01       	movw	r26, r30
    6116:	10 c0       	rjmp	.+32     	; 0x6138 <split_args+0x94>
    6118:	f8 01       	movw	r30, r16
    611a:	91 83       	std	Z+1, r25	; 0x01
    611c:	80 83       	st	Z, r24
    611e:	fc 01       	movw	r30, r24
    6120:	2e 2f       	mov	r18, r30
    6122:	9f 2f       	mov	r25, r31
    6124:	81 91       	ld	r24, Z+
    6126:	3f ed       	ldi	r19, 0xDF	; 223
    6128:	38 0f       	add	r19, r24
    612a:	3e 35       	cpi	r19, 0x5E	; 94
    612c:	c8 f3       	brcs	.-14     	; 0x6120 <split_args+0x7c>
    612e:	88 23       	and	r24, r24
    6130:	69 f0       	breq	.+26     	; 0x614c <split_args+0xa8>
    6132:	a2 2f       	mov	r26, r18
    6134:	b9 2f       	mov	r27, r25
    6136:	1d 92       	st	X+, r1
    6138:	21 96       	adiw	r28, 0x01	; 1
    613a:	ff ef       	ldi	r31, 0xFF	; 255
    613c:	ef 1a       	sub	r14, r31
    613e:	ff 0a       	sbc	r15, r31
    6140:	0e 5f       	subi	r16, 0xFE	; 254
    6142:	1f 4f       	sbci	r17, 0xFF	; 255
    6144:	cc cf       	rjmp	.-104    	; 0x60de <split_args+0x3a>
    6146:	80 e0       	ldi	r24, 0x00	; 0
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	03 c0       	rjmp	.+6      	; 0x6152 <split_args+0xae>
    614c:	c7 01       	movw	r24, r14
    614e:	01 c0       	rjmp	.+2      	; 0x6152 <split_args+0xae>
    6150:	ce 01       	movw	r24, r28
    6152:	cd b7       	in	r28, 0x3d	; 61
    6154:	de b7       	in	r29, 0x3e	; 62
    6156:	e8 e0       	ldi	r30, 0x08	; 8
    6158:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000615c <get_token>:
    615c:	ef 92       	push	r14
    615e:	ff 92       	push	r15
    6160:	0f 93       	push	r16
    6162:	1f 93       	push	r17
    6164:	cf 93       	push	r28
    6166:	df 93       	push	r29
    6168:	eb 01       	movw	r28, r22
    616a:	8a 01       	movw	r16, r20
    616c:	18 82       	st	Y, r1
    616e:	00 97       	sbiw	r24, 0x00	; 0
    6170:	89 f1       	breq	.+98     	; 0x61d4 <get_token+0x78>
    6172:	fc 01       	movw	r30, r24
    6174:	20 81       	ld	r18, Z
    6176:	22 23       	and	r18, r18
    6178:	79 f1       	breq	.+94     	; 0x61d8 <get_token+0x7c>
    617a:	1e df       	rcall	.-452    	; 0x5fb8 <skipspaces>
    617c:	7c 01       	movw	r14, r24
    617e:	0c df       	rcall	.-488    	; 0x5f98 <trim_tail>
    6180:	f7 01       	movw	r30, r14
    6182:	cf 01       	movw	r24, r30
    6184:	21 91       	ld	r18, Z+
    6186:	21 32       	cpi	r18, 0x21	; 33
    6188:	e0 f0       	brcs	.+56     	; 0x61c2 <get_token+0x66>
    618a:	10 16       	cp	r1, r16
    618c:	11 06       	cpc	r1, r17
    618e:	cc f4       	brge	.+50     	; 0x61c2 <get_token+0x66>
    6190:	22 32       	cpi	r18, 0x22	; 34
    6192:	79 f4       	brne	.+30     	; 0x61b2 <get_token+0x56>
    6194:	fc 01       	movw	r30, r24
    6196:	31 96       	adiw	r30, 0x01	; 1
    6198:	0c 0f       	add	r16, r28
    619a:	1d 1f       	adc	r17, r29
    619c:	cf 01       	movw	r24, r30
    619e:	21 91       	ld	r18, Z+
    61a0:	22 23       	and	r18, r18
    61a2:	79 f0       	breq	.+30     	; 0x61c2 <get_token+0x66>
    61a4:	22 32       	cpi	r18, 0x22	; 34
    61a6:	59 f0       	breq	.+22     	; 0x61be <get_token+0x62>
    61a8:	c0 17       	cp	r28, r16
    61aa:	d1 07       	cpc	r29, r17
    61ac:	51 f0       	breq	.+20     	; 0x61c2 <get_token+0x66>
    61ae:	29 93       	st	Y+, r18
    61b0:	f5 cf       	rjmp	.-22     	; 0x619c <get_token+0x40>
    61b2:	2c 32       	cpi	r18, 0x2C	; 44
    61b4:	31 f0       	breq	.+12     	; 0x61c2 <get_token+0x66>
    61b6:	29 93       	st	Y+, r18
    61b8:	01 50       	subi	r16, 0x01	; 1
    61ba:	11 09       	sbc	r17, r1
    61bc:	e2 cf       	rjmp	.-60     	; 0x6182 <get_token+0x26>
    61be:	cf 01       	movw	r24, r30
    61c0:	18 82       	st	Y, r1
    61c2:	fa de       	rcall	.-524    	; 0x5fb8 <skipspaces>
    61c4:	fc 01       	movw	r30, r24
    61c6:	80 81       	ld	r24, Z
    61c8:	8c 32       	cpi	r24, 0x2C	; 44
    61ca:	09 f4       	brne	.+2      	; 0x61ce <get_token+0x72>
    61cc:	31 96       	adiw	r30, 0x01	; 1
    61ce:	18 82       	st	Y, r1
    61d0:	cf 01       	movw	r24, r30
    61d2:	02 c0       	rjmp	.+4      	; 0x61d8 <get_token+0x7c>
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	cd b7       	in	r28, 0x3d	; 61
    61da:	de b7       	in	r29, 0x3e	; 62
    61dc:	e6 e0       	ldi	r30, 0x06	; 6
    61de:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

000061e2 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    61e2:	a2 e0       	ldi	r26, 0x02	; 2
    61e4:	b0 e0       	ldi	r27, 0x00	; 0
    61e6:	e7 ef       	ldi	r30, 0xF7	; 247
    61e8:	f0 e3       	ldi	r31, 0x30	; 48
    61ea:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    61ee:	00 97       	sbiw	r24, 0x00	; 0
    61f0:	79 f1       	breq	.+94     	; 0x6250 <get_value+0x6e>
    61f2:	fc 01       	movw	r30, r24
    61f4:	20 81       	ld	r18, Z
    61f6:	22 23       	and	r18, r18
    61f8:	59 f1       	breq	.+86     	; 0x6250 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    61fa:	de de       	rcall	.-580    	; 0x5fb8 <skipspaces>
    61fc:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    61fe:	6f e2       	ldi	r22, 0x2F	; 47
    6200:	73 e0       	ldi	r23, 0x03	; 3
    6202:	36 df       	rcall	.-404    	; 0x6070 <MATCHI_LEN>
    6204:	00 97       	sbiw	r24, 0x00	; 0
    6206:	29 f0       	breq	.+10     	; 0x6212 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6208:	08 0f       	add	r16, r24
    620a:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    620c:	40 e1       	ldi	r20, 0x10	; 16
    620e:	50 e0       	ldi	r21, 0x00	; 0
    6210:	18 c0       	rjmp	.+48     	; 0x6242 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6212:	62 e3       	ldi	r22, 0x32	; 50
    6214:	73 e0       	ldi	r23, 0x03	; 3
    6216:	c8 01       	movw	r24, r16
    6218:	2b df       	rcall	.-426    	; 0x6070 <MATCHI_LEN>
    621a:	00 97       	sbiw	r24, 0x00	; 0
    621c:	29 f0       	breq	.+10     	; 0x6228 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    621e:	08 0f       	add	r16, r24
    6220:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6222:	48 e0       	ldi	r20, 0x08	; 8
    6224:	50 e0       	ldi	r21, 0x00	; 0
    6226:	0d c0       	rjmp	.+26     	; 0x6242 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6228:	65 e3       	ldi	r22, 0x35	; 53
    622a:	73 e0       	ldi	r23, 0x03	; 3
    622c:	c8 01       	movw	r24, r16
    622e:	20 df       	rcall	.-448    	; 0x6070 <MATCHI_LEN>
    6230:	00 97       	sbiw	r24, 0x00	; 0
    6232:	29 f0       	breq	.+10     	; 0x623e <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    6234:	08 0f       	add	r16, r24
    6236:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6238:	42 e0       	ldi	r20, 0x02	; 2
    623a:	50 e0       	ldi	r21, 0x00	; 0
    623c:	02 c0       	rjmp	.+4      	; 0x6242 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    623e:	4a e0       	ldi	r20, 0x0A	; 10
    6240:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6242:	be 01       	movw	r22, r28
    6244:	6f 5f       	subi	r22, 0xFF	; 255
    6246:	7f 4f       	sbci	r23, 0xFF	; 255
    6248:	c8 01       	movw	r24, r16
    624a:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
    624e:	03 c0       	rjmp	.+6      	; 0x6256 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6250:	60 e0       	ldi	r22, 0x00	; 0
    6252:	70 e0       	ldi	r23, 0x00	; 0
    6254:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6256:	22 96       	adiw	r28, 0x02	; 2
    6258:	e4 e0       	ldi	r30, 0x04	; 4
    625a:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000625e <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    625e:	78 94       	sei
    6260:	08 95       	ret

00006262 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6262:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6264:	89 e0       	ldi	r24, 0x09	; 9
    6266:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    626a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    626e:	8f e1       	ldi	r24, 0x1F	; 31
    6270:	9e e4       	ldi	r25, 0x4E	; 78
    6272:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6276:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    627a:	ef e6       	ldi	r30, 0x6F	; 111
    627c:	f0 e0       	ldi	r31, 0x00	; 0
    627e:	80 81       	ld	r24, Z
    6280:	82 60       	ori	r24, 0x02	; 2
    6282:	80 83       	st	Z, r24
    sei();
    6284:	78 94       	sei
    6286:	08 95       	ret

00006288 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6288:	1f 92       	push	r1
    628a:	0f 92       	push	r0
    628c:	0f b6       	in	r0, 0x3f	; 63
    628e:	0f 92       	push	r0
    6290:	11 24       	eor	r1, r1
    6292:	0b b6       	in	r0, 0x3b	; 59
    6294:	0f 92       	push	r0
    6296:	2f 93       	push	r18
    6298:	3f 93       	push	r19
    629a:	4f 93       	push	r20
    629c:	5f 93       	push	r21
    629e:	6f 93       	push	r22
    62a0:	7f 93       	push	r23
    62a2:	8f 93       	push	r24
    62a4:	9f 93       	push	r25
    62a6:	af 93       	push	r26
    62a8:	bf 93       	push	r27
    62aa:	ef 93       	push	r30
    62ac:	ff 93       	push	r31
    execute_timers();
    62ae:	36 d2       	rcall	.+1132   	; 0x671c <execute_timers>
}
    62b0:	ff 91       	pop	r31
    62b2:	ef 91       	pop	r30
    62b4:	bf 91       	pop	r27
    62b6:	af 91       	pop	r26
    62b8:	9f 91       	pop	r25
    62ba:	8f 91       	pop	r24
    62bc:	7f 91       	pop	r23
    62be:	6f 91       	pop	r22
    62c0:	5f 91       	pop	r21
    62c2:	4f 91       	pop	r20
    62c4:	3f 91       	pop	r19
    62c6:	2f 91       	pop	r18
    62c8:	0f 90       	pop	r0
    62ca:	0b be       	out	0x3b, r0	; 59
    62cc:	0f 90       	pop	r0
    62ce:	0f be       	out	0x3f, r0	; 63
    62d0:	0f 90       	pop	r0
    62d2:	1f 90       	pop	r1
    62d4:	18 95       	reti

000062d6 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    62d6:	0f 93       	push	r16
    62d8:	1f 93       	push	r17
    62da:	cf 93       	push	r28
    62dc:	df 93       	push	r29
    62de:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    62e0:	f8 94       	cli

    count1 = TCNT1;
    62e2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    62e6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    62ea:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    62ee:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    62f2:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    62f6:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    62fa:	80 83       	st	Z, r24
    62fc:	91 83       	std	Z+1, r25	; 0x01
    62fe:	a2 83       	std	Z+2, r26	; 0x02
    6300:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6302:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    6306:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    630a:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    630e:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    6312:	84 83       	std	Z+4, r24	; 0x04
    6314:	95 83       	std	Z+5, r25	; 0x05
    6316:	a6 83       	std	Z+6, r26	; 0x06
    6318:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    631a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    631e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6322:	b1 9b       	sbis	0x16, 1	; 22
    6324:	03 c0       	rjmp	.+6      	; 0x632c <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6326:	c0 e0       	ldi	r28, 0x00	; 0
    6328:	d0 e0       	ldi	r29, 0x00	; 0
    632a:	3f c0       	rjmp	.+126    	; 0x63aa <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    632c:	82 17       	cp	r24, r18
    632e:	93 07       	cpc	r25, r19
    6330:	d0 f1       	brcs	.+116    	; 0x63a6 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6332:	c0 e0       	ldi	r28, 0x00	; 0
    6334:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6336:	40 e0       	ldi	r20, 0x00	; 0
    6338:	50 e0       	ldi	r21, 0x00	; 0
    633a:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    633c:	9a 01       	movw	r18, r20
    633e:	ab 01       	movw	r20, r22
    6340:	28 0f       	add	r18, r24
    6342:	39 1f       	adc	r19, r25
    6344:	41 1d       	adc	r20, r1
    6346:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6348:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    634a:	a2 e3       	ldi	r26, 0x32	; 50
    634c:	b0 e0       	ldi	r27, 0x00	; 0
    634e:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    6352:	04 81       	ldd	r16, Z+4	; 0x04
    6354:	15 81       	ldd	r17, Z+5	; 0x05
    6356:	26 81       	ldd	r18, Z+6	; 0x06
    6358:	37 81       	ldd	r19, Z+7	; 0x07
    635a:	dc 01       	movw	r26, r24
    635c:	cb 01       	movw	r24, r22
    635e:	80 0f       	add	r24, r16
    6360:	91 1f       	adc	r25, r17
    6362:	a2 1f       	adc	r26, r18
    6364:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6366:	81 15       	cp	r24, r1
    6368:	2a ec       	ldi	r18, 0xCA	; 202
    636a:	92 07       	cpc	r25, r18
    636c:	2a e9       	ldi	r18, 0x9A	; 154
    636e:	a2 07       	cpc	r26, r18
    6370:	2b e3       	ldi	r18, 0x3B	; 59
    6372:	b2 07       	cpc	r27, r18
    6374:	2c f4       	brge	.+10     	; 0x6380 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6376:	84 83       	std	Z+4, r24	; 0x04
    6378:	95 83       	std	Z+5, r25	; 0x05
    637a:	a6 83       	std	Z+6, r26	; 0x06
    637c:	b7 83       	std	Z+7, r27	; 0x07
    637e:	1a c0       	rjmp	.+52     	; 0x63b4 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6380:	9a 5c       	subi	r25, 0xCA	; 202
    6382:	aa 49       	sbci	r26, 0x9A	; 154
    6384:	bb 43       	sbci	r27, 0x3B	; 59
    6386:	84 83       	std	Z+4, r24	; 0x04
    6388:	95 83       	std	Z+5, r25	; 0x05
    638a:	a6 83       	std	Z+6, r26	; 0x06
    638c:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    638e:	80 81       	ld	r24, Z
    6390:	91 81       	ldd	r25, Z+1	; 0x01
    6392:	a2 81       	ldd	r26, Z+2	; 0x02
    6394:	b3 81       	ldd	r27, Z+3	; 0x03
    6396:	01 96       	adiw	r24, 0x01	; 1
    6398:	a1 1d       	adc	r26, r1
    639a:	b1 1d       	adc	r27, r1
    639c:	80 83       	st	Z, r24
    639e:	91 83       	std	Z+1, r25	; 0x01
    63a0:	a2 83       	std	Z+2, r26	; 0x02
    63a2:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    63a4:	07 c0       	rjmp	.+14     	; 0x63b4 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    63a6:	cf ef       	ldi	r28, 0xFF	; 255
    63a8:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    63aa:	40 e2       	ldi	r20, 0x20	; 32
    63ac:	5e e4       	ldi	r21, 0x4E	; 78
    63ae:	60 e0       	ldi	r22, 0x00	; 0
    63b0:	70 e0       	ldi	r23, 0x00	; 0
    63b2:	c4 cf       	rjmp	.-120    	; 0x633c <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    63b4:	ce 01       	movw	r24, r28
    63b6:	df 91       	pop	r29
    63b8:	cf 91       	pop	r28
    63ba:	1f 91       	pop	r17
    63bc:	0f 91       	pop	r16
    63be:	08 95       	ret

000063c0 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    63c0:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    63c4:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    63c8:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    63cc:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    63d0:	80 5c       	subi	r24, 0xC0	; 192
    63d2:	9d 4b       	sbci	r25, 0xBD	; 189
    63d4:	a0 4f       	sbci	r26, 0xF0	; 240
    63d6:	bf 4f       	sbci	r27, 0xFF	; 255
    63d8:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <__clock+0x4>
    63dc:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <__clock+0x5>
    63e0:	a0 93 4c 1a 	sts	0x1A4C, r26	; 0x801a4c <__clock+0x6>
    63e4:	b0 93 4d 1a 	sts	0x1A4D, r27	; 0x801a4d <__clock+0x7>
    63e8:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    63ec:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    63f0:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    63f4:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    63f8:	81 15       	cp	r24, r1
    63fa:	9a 4c       	sbci	r25, 0xCA	; 202
    63fc:	aa 49       	sbci	r26, 0x9A	; 154
    63fe:	bb 43       	sbci	r27, 0x3B	; 59
    6400:	dc f0       	brlt	.+54     	; 0x6438 <clock_task+0x78>
    6402:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    6406:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    640a:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    640e:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    6412:	01 96       	adiw	r24, 0x01	; 1
    6414:	a1 1d       	adc	r26, r1
    6416:	b1 1d       	adc	r27, r1
    6418:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <__clock>
    641c:	90 93 47 1a 	sts	0x1A47, r25	; 0x801a47 <__clock+0x1>
    6420:	a0 93 48 1a 	sts	0x1A48, r26	; 0x801a48 <__clock+0x2>
    6424:	b0 93 49 1a 	sts	0x1A49, r27	; 0x801a49 <__clock+0x3>
    6428:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <__clock+0x4>
    642c:	10 92 4b 1a 	sts	0x1A4B, r1	; 0x801a4b <__clock+0x5>
    6430:	10 92 4c 1a 	sts	0x1A4C, r1	; 0x801a4c <__clock+0x6>
    6434:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <__clock+0x7>
    6438:	08 95       	ret

0000643a <clock_settime.part.2>:
    643a:	fc 01       	movw	r30, r24
    643c:	84 81       	ldd	r24, Z+4	; 0x04
    643e:	95 81       	ldd	r25, Z+5	; 0x05
    6440:	a6 81       	ldd	r26, Z+6	; 0x06
    6442:	b7 81       	ldd	r27, Z+7	; 0x07
    6444:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <__clock+0x4>
    6448:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <__clock+0x5>
    644c:	a0 93 4c 1a 	sts	0x1A4C, r26	; 0x801a4c <__clock+0x6>
    6450:	b0 93 4d 1a 	sts	0x1A4D, r27	; 0x801a4d <__clock+0x7>
    6454:	80 81       	ld	r24, Z
    6456:	91 81       	ldd	r25, Z+1	; 0x01
    6458:	a2 81       	ldd	r26, Z+2	; 0x02
    645a:	b3 81       	ldd	r27, Z+3	; 0x03
    645c:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <__clock>
    6460:	90 93 47 1a 	sts	0x1A47, r25	; 0x801a47 <__clock+0x1>
    6464:	a0 93 48 1a 	sts	0x1A48, r26	; 0x801a48 <__clock+0x2>
    6468:	b0 93 49 1a 	sts	0x1A49, r27	; 0x801a49 <__clock+0x3>
    646c:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    6470:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    6474:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    6478:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    647c:	44 81       	ldd	r20, Z+4	; 0x04
    647e:	55 81       	ldd	r21, Z+5	; 0x05
    6480:	66 81       	ldd	r22, Z+6	; 0x06
    6482:	77 81       	ldd	r23, Z+7	; 0x07
    6484:	48 17       	cp	r20, r24
    6486:	59 07       	cpc	r21, r25
    6488:	6a 07       	cpc	r22, r26
    648a:	7b 07       	cpc	r23, r27
    648c:	b9 f6       	brne	.-82     	; 0x643c <clock_settime.part.2+0x2>
    648e:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    6492:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    6496:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    649a:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    649e:	40 81       	ld	r20, Z
    64a0:	51 81       	ldd	r21, Z+1	; 0x01
    64a2:	62 81       	ldd	r22, Z+2	; 0x02
    64a4:	73 81       	ldd	r23, Z+3	; 0x03
    64a6:	48 17       	cp	r20, r24
    64a8:	59 07       	cpc	r21, r25
    64aa:	6a 07       	cpc	r22, r26
    64ac:	7b 07       	cpc	r23, r27
    64ae:	31 f6       	brne	.-116    	; 0x643c <clock_settime.part.2+0x2>
    64b0:	80 e0       	ldi	r24, 0x00	; 0
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	08 95       	ret

000064b6 <set_timers>:
    64b6:	00 d0       	rcall	.+0      	; 0x64b8 <set_timers+0x2>
    64b8:	1f 92       	push	r1
    64ba:	00 97       	sbiw	r24, 0x00	; 0
    64bc:	79 f1       	breq	.+94     	; 0x651c <set_timers+0x66>
    64be:	ee e4       	ldi	r30, 0x4E	; 78
    64c0:	fa e1       	ldi	r31, 0x1A	; 26
    64c2:	4f ef       	ldi	r20, 0xFF	; 255
    64c4:	5f ef       	ldi	r21, 0xFF	; 255
    64c6:	20 e0       	ldi	r18, 0x00	; 0
    64c8:	30 e0       	ldi	r19, 0x00	; 0
    64ca:	60 81       	ld	r22, Z
    64cc:	71 81       	ldd	r23, Z+1	; 0x01
    64ce:	86 17       	cp	r24, r22
    64d0:	97 07       	cpc	r25, r23
    64d2:	79 f0       	breq	.+30     	; 0x64f2 <set_timers+0x3c>
    64d4:	67 2b       	or	r22, r23
    64d6:	71 f4       	brne	.+28     	; 0x64f4 <set_timers+0x3e>
    64d8:	f9 01       	movw	r30, r18
    64da:	ee 0f       	add	r30, r30
    64dc:	ff 1f       	adc	r31, r31
    64de:	e2 0f       	add	r30, r18
    64e0:	f3 1f       	adc	r31, r19
    64e2:	e2 5b       	subi	r30, 0xB2	; 178
    64e4:	f5 4e       	sbci	r31, 0xE5	; 229
    64e6:	91 83       	std	Z+1, r25	; 0x01
    64e8:	80 83       	st	Z, r24
    64ea:	81 e0       	ldi	r24, 0x01	; 1
    64ec:	82 83       	std	Z+2, r24	; 0x02
    64ee:	c9 01       	movw	r24, r18
    64f0:	19 c0       	rjmp	.+50     	; 0x6524 <set_timers+0x6e>
    64f2:	a9 01       	movw	r20, r18
    64f4:	2f 5f       	subi	r18, 0xFF	; 255
    64f6:	3f 4f       	sbci	r19, 0xFF	; 255
    64f8:	33 96       	adiw	r30, 0x03	; 3
    64fa:	28 30       	cpi	r18, 0x08	; 8
    64fc:	31 05       	cpc	r19, r1
    64fe:	29 f7       	brne	.-54     	; 0x64ca <set_timers+0x14>
    6500:	4f 3f       	cpi	r20, 0xFF	; 255
    6502:	8f ef       	ldi	r24, 0xFF	; 255
    6504:	58 07       	cpc	r21, r24
    6506:	69 f4       	brne	.+26     	; 0x6522 <set_timers+0x6c>
    6508:	8d ec       	ldi	r24, 0xCD	; 205
    650a:	95 e0       	ldi	r25, 0x05	; 5
    650c:	a0 e0       	ldi	r26, 0x00	; 0
    650e:	ed b7       	in	r30, 0x3d	; 61
    6510:	fe b7       	in	r31, 0x3e	; 62
    6512:	81 83       	std	Z+1, r24	; 0x01
    6514:	92 83       	std	Z+2, r25	; 0x02
    6516:	a3 83       	std	Z+3, r26	; 0x03
    6518:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    651c:	8f ef       	ldi	r24, 0xFF	; 255
    651e:	9f ef       	ldi	r25, 0xFF	; 255
    6520:	01 c0       	rjmp	.+2      	; 0x6524 <set_timers+0x6e>
    6522:	ca 01       	movw	r24, r20
    6524:	0f 90       	pop	r0
    6526:	0f 90       	pop	r0
    6528:	0f 90       	pop	r0
    652a:	08 95       	ret

0000652c <delete_all_timers>:
    652c:	ee e4       	ldi	r30, 0x4E	; 78
    652e:	fa e1       	ldi	r31, 0x1A	; 26
    6530:	12 82       	std	Z+2, r1	; 0x02
    6532:	11 82       	std	Z+1, r1	; 0x01
    6534:	10 82       	st	Z, r1
    6536:	33 96       	adiw	r30, 0x03	; 3
    6538:	8a e1       	ldi	r24, 0x1A	; 26
    653a:	e6 36       	cpi	r30, 0x66	; 102
    653c:	f8 07       	cpc	r31, r24
    653e:	c1 f7       	brne	.-16     	; 0x6530 <delete_all_timers+0x4>
    6540:	08 95       	ret

00006542 <subtract_timespec>:
    6542:	0f 93       	push	r16
    6544:	1f 93       	push	r17
    6546:	cf 93       	push	r28
    6548:	df 93       	push	r29
    654a:	fc 01       	movw	r30, r24
    654c:	84 81       	ldd	r24, Z+4	; 0x04
    654e:	95 81       	ldd	r25, Z+5	; 0x05
    6550:	a6 81       	ldd	r26, Z+6	; 0x06
    6552:	b7 81       	ldd	r27, Z+7	; 0x07
    6554:	eb 01       	movw	r28, r22
    6556:	0c 81       	ldd	r16, Y+4	; 0x04
    6558:	1d 81       	ldd	r17, Y+5	; 0x05
    655a:	2e 81       	ldd	r18, Y+6	; 0x06
    655c:	3f 81       	ldd	r19, Y+7	; 0x07
    655e:	80 1b       	sub	r24, r16
    6560:	91 0b       	sbc	r25, r17
    6562:	a2 0b       	sbc	r26, r18
    6564:	b3 0b       	sbc	r27, r19
    6566:	b7 fd       	sbrc	r27, 7
    6568:	05 c0       	rjmp	.+10     	; 0x6574 <subtract_timespec+0x32>
    656a:	84 83       	std	Z+4, r24	; 0x04
    656c:	95 83       	std	Z+5, r25	; 0x05
    656e:	a6 83       	std	Z+6, r26	; 0x06
    6570:	b7 83       	std	Z+7, r27	; 0x07
    6572:	12 c0       	rjmp	.+36     	; 0x6598 <subtract_timespec+0x56>
    6574:	96 53       	subi	r25, 0x36	; 54
    6576:	a5 46       	sbci	r26, 0x65	; 101
    6578:	b4 4c       	sbci	r27, 0xC4	; 196
    657a:	84 83       	std	Z+4, r24	; 0x04
    657c:	95 83       	std	Z+5, r25	; 0x05
    657e:	a6 83       	std	Z+6, r26	; 0x06
    6580:	b7 83       	std	Z+7, r27	; 0x07
    6582:	80 81       	ld	r24, Z
    6584:	91 81       	ldd	r25, Z+1	; 0x01
    6586:	a2 81       	ldd	r26, Z+2	; 0x02
    6588:	b3 81       	ldd	r27, Z+3	; 0x03
    658a:	01 97       	sbiw	r24, 0x01	; 1
    658c:	a1 09       	sbc	r26, r1
    658e:	b1 09       	sbc	r27, r1
    6590:	80 83       	st	Z, r24
    6592:	91 83       	std	Z+1, r25	; 0x01
    6594:	a2 83       	std	Z+2, r26	; 0x02
    6596:	b3 83       	std	Z+3, r27	; 0x03
    6598:	80 81       	ld	r24, Z
    659a:	91 81       	ldd	r25, Z+1	; 0x01
    659c:	a2 81       	ldd	r26, Z+2	; 0x02
    659e:	b3 81       	ldd	r27, Z+3	; 0x03
    65a0:	eb 01       	movw	r28, r22
    65a2:	48 81       	ld	r20, Y
    65a4:	59 81       	ldd	r21, Y+1	; 0x01
    65a6:	6a 81       	ldd	r22, Y+2	; 0x02
    65a8:	7b 81       	ldd	r23, Y+3	; 0x03
    65aa:	84 1b       	sub	r24, r20
    65ac:	95 0b       	sbc	r25, r21
    65ae:	a6 0b       	sbc	r26, r22
    65b0:	b7 0b       	sbc	r27, r23
    65b2:	80 83       	st	Z, r24
    65b4:	91 83       	std	Z+1, r25	; 0x01
    65b6:	a2 83       	std	Z+2, r26	; 0x02
    65b8:	b3 83       	std	Z+3, r27	; 0x03
    65ba:	df 91       	pop	r29
    65bc:	cf 91       	pop	r28
    65be:	1f 91       	pop	r17
    65c0:	0f 91       	pop	r16
    65c2:	08 95       	ret

000065c4 <ts_to_str>:
    65c4:	ad b7       	in	r26, 0x3d	; 61
    65c6:	be b7       	in	r27, 0x3e	; 62
    65c8:	1f 97       	sbiw	r26, 0x0f	; 15
    65ca:	0f b6       	in	r0, 0x3f	; 63
    65cc:	f8 94       	cli
    65ce:	be bf       	out	0x3e, r27	; 62
    65d0:	0f be       	out	0x3f, r0	; 63
    65d2:	ad bf       	out	0x3d, r26	; 61
    65d4:	fc 01       	movw	r30, r24
    65d6:	44 81       	ldd	r20, Z+4	; 0x04
    65d8:	55 81       	ldd	r21, Z+5	; 0x05
    65da:	66 81       	ldd	r22, Z+6	; 0x06
    65dc:	77 81       	ldd	r23, Z+7	; 0x07
    65de:	ed b7       	in	r30, 0x3d	; 61
    65e0:	fe b7       	in	r31, 0x3e	; 62
    65e2:	44 87       	std	Z+12, r20	; 0x0c
    65e4:	55 87       	std	Z+13, r21	; 0x0d
    65e6:	66 87       	std	Z+14, r22	; 0x0e
    65e8:	77 87       	std	Z+15, r23	; 0x0f
    65ea:	fc 01       	movw	r30, r24
    65ec:	80 81       	ld	r24, Z
    65ee:	91 81       	ldd	r25, Z+1	; 0x01
    65f0:	a2 81       	ldd	r26, Z+2	; 0x02
    65f2:	b3 81       	ldd	r27, Z+3	; 0x03
    65f4:	ed b7       	in	r30, 0x3d	; 61
    65f6:	fe b7       	in	r31, 0x3e	; 62
    65f8:	80 87       	std	Z+8, r24	; 0x08
    65fa:	91 87       	std	Z+9, r25	; 0x09
    65fc:	a2 87       	std	Z+10, r26	; 0x0a
    65fe:	b3 87       	std	Z+11, r27	; 0x0b
    6600:	83 ec       	ldi	r24, 0xC3	; 195
    6602:	95 e0       	ldi	r25, 0x05	; 5
    6604:	a0 e0       	ldi	r26, 0x00	; 0
    6606:	85 83       	std	Z+5, r24	; 0x05
    6608:	96 83       	std	Z+6, r25	; 0x06
    660a:	a7 83       	std	Z+7, r26	; 0x07
    660c:	8f e1       	ldi	r24, 0x1F	; 31
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	94 83       	std	Z+4, r25	; 0x04
    6612:	83 83       	std	Z+3, r24	; 0x03
    6614:	8c e7       	ldi	r24, 0x7C	; 124
    6616:	97 e1       	ldi	r25, 0x17	; 23
    6618:	92 83       	std	Z+2, r25	; 0x02
    661a:	81 83       	std	Z+1, r24	; 0x01
    661c:	0e 94 85 44 	call	0x890a	; 0x890a <snprintf_P>
    6620:	8c e7       	ldi	r24, 0x7C	; 124
    6622:	97 e1       	ldi	r25, 0x17	; 23
    6624:	ad b7       	in	r26, 0x3d	; 61
    6626:	be b7       	in	r27, 0x3e	; 62
    6628:	1f 96       	adiw	r26, 0x0f	; 15
    662a:	0f b6       	in	r0, 0x3f	; 63
    662c:	f8 94       	cli
    662e:	be bf       	out	0x3e, r27	; 62
    6630:	0f be       	out	0x3f, r0	; 63
    6632:	ad bf       	out	0x3d, r26	; 61
    6634:	08 95       	ret

00006636 <clock_elapsed_begin>:
    6636:	64 e7       	ldi	r22, 0x74	; 116
    6638:	77 e1       	ldi	r23, 0x17	; 23
    663a:	80 e0       	ldi	r24, 0x00	; 0
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	4b ce       	rjmp	.-874    	; 0x62d6 <clock_gettime>
    6640:	08 95       	ret

00006642 <clock_elapsed_end>:
    6642:	af e0       	ldi	r26, 0x0F	; 15
    6644:	b0 e0       	ldi	r27, 0x00	; 0
    6646:	e7 e2       	ldi	r30, 0x27	; 39
    6648:	f3 e3       	ldi	r31, 0x33	; 51
    664a:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    664e:	8c 01       	movw	r16, r24
    6650:	be 01       	movw	r22, r28
    6652:	68 5f       	subi	r22, 0xF8	; 248
    6654:	7f 4f       	sbci	r23, 0xFF	; 255
    6656:	80 e0       	ldi	r24, 0x00	; 0
    6658:	90 e0       	ldi	r25, 0x00	; 0
    665a:	3d de       	rcall	.-902    	; 0x62d6 <clock_gettime>
    665c:	64 e7       	ldi	r22, 0x74	; 116
    665e:	77 e1       	ldi	r23, 0x17	; 23
    6660:	ce 01       	movw	r24, r28
    6662:	08 96       	adiw	r24, 0x08	; 8
    6664:	6e df       	rcall	.-292    	; 0x6542 <subtract_timespec>
    6666:	01 15       	cp	r16, r1
    6668:	11 05       	cpc	r17, r1
    666a:	b1 f0       	breq	.+44     	; 0x6698 <clock_elapsed_end+0x56>
    666c:	f8 01       	movw	r30, r16
    666e:	80 81       	ld	r24, Z
    6670:	88 23       	and	r24, r24
    6672:	91 f0       	breq	.+36     	; 0x6698 <clock_elapsed_end+0x56>
    6674:	ce 01       	movw	r24, r28
    6676:	08 96       	adiw	r24, 0x08	; 8
    6678:	a5 df       	rcall	.-182    	; 0x65c4 <ts_to_str>
    667a:	ed b7       	in	r30, 0x3d	; 61
    667c:	fe b7       	in	r31, 0x3e	; 62
    667e:	97 83       	std	Z+7, r25	; 0x07
    6680:	86 83       	std	Z+6, r24	; 0x06
    6682:	15 83       	std	Z+5, r17	; 0x05
    6684:	04 83       	std	Z+4, r16	; 0x04
    6686:	85 eb       	ldi	r24, 0xB5	; 181
    6688:	95 e0       	ldi	r25, 0x05	; 5
    668a:	a0 e0       	ldi	r26, 0x00	; 0
    668c:	81 83       	std	Z+1, r24	; 0x01
    668e:	92 83       	std	Z+2, r25	; 0x02
    6690:	a3 83       	std	Z+3, r26	; 0x03
    6692:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    6696:	0f c0       	rjmp	.+30     	; 0x66b6 <clock_elapsed_end+0x74>
    6698:	ce 01       	movw	r24, r28
    669a:	08 96       	adiw	r24, 0x08	; 8
    669c:	93 df       	rcall	.-218    	; 0x65c4 <ts_to_str>
    669e:	ed b7       	in	r30, 0x3d	; 61
    66a0:	fe b7       	in	r31, 0x3e	; 62
    66a2:	95 83       	std	Z+5, r25	; 0x05
    66a4:	84 83       	std	Z+4, r24	; 0x04
    66a6:	8a ea       	ldi	r24, 0xAA	; 170
    66a8:	95 e0       	ldi	r25, 0x05	; 5
    66aa:	a0 e0       	ldi	r26, 0x00	; 0
    66ac:	81 83       	std	Z+1, r24	; 0x01
    66ae:	92 83       	std	Z+2, r25	; 0x02
    66b0:	a3 83       	std	Z+3, r26	; 0x03
    66b2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    66b6:	2f 96       	adiw	r28, 0x0f	; 15
    66b8:	e4 e0       	ldi	r30, 0x04	; 4
    66ba:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

000066be <clock_clear>:
    66be:	a8 e0       	ldi	r26, 0x08	; 8
    66c0:	b0 e0       	ldi	r27, 0x00	; 0
    66c2:	e5 e6       	ldi	r30, 0x65	; 101
    66c4:	f3 e3       	ldi	r31, 0x33	; 51
    66c6:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    66ca:	1d 82       	std	Y+5, r1	; 0x05
    66cc:	1e 82       	std	Y+6, r1	; 0x06
    66ce:	1f 82       	std	Y+7, r1	; 0x07
    66d0:	18 86       	std	Y+8, r1	; 0x08
    66d2:	19 82       	std	Y+1, r1	; 0x01
    66d4:	1a 82       	std	Y+2, r1	; 0x02
    66d6:	1b 82       	std	Y+3, r1	; 0x03
    66d8:	1c 82       	std	Y+4, r1	; 0x04
    66da:	ce 01       	movw	r24, r28
    66dc:	01 96       	adiw	r24, 0x01	; 1
    66de:	ad de       	rcall	.-678    	; 0x643a <clock_settime.part.2>
    66e0:	e6 e6       	ldi	r30, 0x66	; 102
    66e2:	fa e1       	ldi	r31, 0x1A	; 26
    66e4:	11 82       	std	Z+1, r1	; 0x01
    66e6:	10 82       	st	Z, r1
    66e8:	13 82       	std	Z+3, r1	; 0x03
    66ea:	12 82       	std	Z+2, r1	; 0x02
    66ec:	28 96       	adiw	r28, 0x08	; 8
    66ee:	e2 e0       	ldi	r30, 0x02	; 2
    66f0:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000066f4 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    66f4:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <timers_configured>
    66f8:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <timers_configured+0x1>
    66fc:	89 2b       	or	r24, r25
    66fe:	69 f0       	breq	.+26     	; 0x671a <enable_timers+0x26>
    6700:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <timers_enabled>
    6704:	90 91 9f 17 	lds	r25, 0x179F	; 0x80179f <timers_enabled+0x1>
    6708:	89 2b       	or	r24, r25
    670a:	39 f4       	brne	.+14     	; 0x671a <enable_timers+0x26>
    {
        enable_system_task();
    670c:	a8 dd       	rcall	.-1200   	; 0x625e <enable_system_task>
        timers_enabled = 1;
    670e:	81 e0       	ldi	r24, 0x01	; 1
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	90 93 9f 17 	sts	0x179F, r25	; 0x80179f <timers_enabled+0x1>
    6716:	80 93 9e 17 	sts	0x179E, r24	; 0x80179e <timers_enabled>
    671a:	08 95       	ret

0000671c <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    671c:	cf 93       	push	r28
    671e:	df 93       	push	r29
    6720:	ce e4       	ldi	r28, 0x4E	; 78
    6722:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6724:	8a 81       	ldd	r24, Y+2	; 0x02
    6726:	88 23       	and	r24, r24
    6728:	29 f0       	breq	.+10     	; 0x6734 <execute_timers+0x18>
    672a:	e8 81       	ld	r30, Y
    672c:	f9 81       	ldd	r31, Y+1	; 0x01
    672e:	30 97       	sbiw	r30, 0x00	; 0
    6730:	09 f0       	breq	.+2      	; 0x6734 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6732:	09 95       	icall
    6734:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6736:	8a e1       	ldi	r24, 0x1A	; 26
    6738:	c6 36       	cpi	r28, 0x66	; 102
    673a:	d8 07       	cpc	r29, r24
    673c:	99 f7       	brne	.-26     	; 0x6724 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    673e:	df 91       	pop	r29
    6740:	cf 91       	pop	r28
    6742:	08 95       	ret

00006744 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6744:	00 d0       	rcall	.+0      	; 0x6746 <init_timers+0x2>
    6746:	1f 92       	push	r1
    printf("Timers init called\n");
    6748:	86 e9       	ldi	r24, 0x96	; 150
    674a:	95 e0       	ldi	r25, 0x05	; 5
    674c:	a0 e0       	ldi	r26, 0x00	; 0
    674e:	ed b7       	in	r30, 0x3d	; 61
    6750:	fe b7       	in	r31, 0x3e	; 62
    6752:	81 83       	std	Z+1, r24	; 0x01
    6754:	92 83       	std	Z+2, r25	; 0x02
    6756:	a3 83       	std	Z+3, r26	; 0x03
    6758:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    if(!timers_configured)
    675c:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <timers_configured>
    6760:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <timers_configured+0x1>
    6764:	89 2b       	or	r24, r25
    6766:	a9 f4       	brne	.+42     	; 0x6792 <init_timers+0x4e>
    {
        install_timers_isr();
    6768:	7c dd       	rcall	.-1288   	; 0x6262 <install_timers_isr>
        timers_configured = 1;
    676a:	81 e0       	ldi	r24, 0x01	; 1
    676c:	90 e0       	ldi	r25, 0x00	; 0
    676e:	90 93 9d 17 	sts	0x179D, r25	; 0x80179d <timers_configured+0x1>
    6772:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <timers_configured>
        timers_enabled = 0;
    6776:	10 92 9f 17 	sts	0x179F, r1	; 0x80179f <timers_enabled+0x1>
    677a:	10 92 9e 17 	sts	0x179E, r1	; 0x80179e <timers_enabled>
        printf("Timers configured\n");
    677e:	83 e8       	ldi	r24, 0x83	; 131
    6780:	95 e0       	ldi	r25, 0x05	; 5
    6782:	a0 e0       	ldi	r26, 0x00	; 0
    6784:	ed b7       	in	r30, 0x3d	; 61
    6786:	fe b7       	in	r31, 0x3e	; 62
    6788:	81 83       	std	Z+1, r24	; 0x01
    678a:	92 83       	std	Z+2, r25	; 0x02
    678c:	a3 83       	std	Z+3, r26	; 0x03
    678e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6792:	cc de       	rcall	.-616    	; 0x652c <delete_all_timers>
    6794:	94 df       	rcall	.-216    	; 0x66be <clock_clear>
    printf("Clock Init\n");
    6796:	87 e7       	ldi	r24, 0x77	; 119
    6798:	95 e0       	ldi	r25, 0x05	; 5
    679a:	a0 e0       	ldi	r26, 0x00	; 0
    679c:	ed b7       	in	r30, 0x3d	; 61
    679e:	fe b7       	in	r31, 0x3e	; 62
    67a0:	81 83       	std	Z+1, r24	; 0x01
    67a2:	92 83       	std	Z+2, r25	; 0x02
    67a4:	a3 83       	std	Z+3, r26	; 0x03
    67a6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    67aa:	61 e0       	ldi	r22, 0x01	; 1
    67ac:	70 e0       	ldi	r23, 0x00	; 0
    67ae:	80 ee       	ldi	r24, 0xE0	; 224
    67b0:	91 e3       	ldi	r25, 0x31	; 49
    67b2:	81 de       	rcall	.-766    	; 0x64b6 <set_timers>
    67b4:	01 96       	adiw	r24, 0x01	; 1
    67b6:	51 f4       	brne	.+20     	; 0x67cc <init_timers+0x88>
        printf("Clock task init failed\n");
    67b8:	8f e5       	ldi	r24, 0x5F	; 95
    67ba:	95 e0       	ldi	r25, 0x05	; 5
    67bc:	a0 e0       	ldi	r26, 0x00	; 0
    67be:	ed b7       	in	r30, 0x3d	; 61
    67c0:	fe b7       	in	r31, 0x3e	; 62
    67c2:	81 83       	std	Z+1, r24	; 0x01
    67c4:	92 83       	std	Z+2, r25	; 0x02
    67c6:	a3 83       	std	Z+3, r26	; 0x03
    67c8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Clock Installed\n");
    67cc:	8e e4       	ldi	r24, 0x4E	; 78
    67ce:	95 e0       	ldi	r25, 0x05	; 5
    67d0:	a0 e0       	ldi	r26, 0x00	; 0
    67d2:	ed b7       	in	r30, 0x3d	; 61
    67d4:	fe b7       	in	r31, 0x3e	; 62
    67d6:	81 83       	std	Z+1, r24	; 0x01
    67d8:	92 83       	std	Z+2, r25	; 0x02
    67da:	a3 83       	std	Z+3, r26	; 0x03
    67dc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    enable_timers();
    67e0:	89 df       	rcall	.-238    	; 0x66f4 <enable_timers>

    printf("Timers enabled\n");
    67e2:	8e e3       	ldi	r24, 0x3E	; 62
    67e4:	95 e0       	ldi	r25, 0x05	; 5
    67e6:	a0 e0       	ldi	r26, 0x00	; 0
    67e8:	ed b7       	in	r30, 0x3d	; 61
    67ea:	fe b7       	in	r31, 0x3e	; 62
    67ec:	81 83       	std	Z+1, r24	; 0x01
    67ee:	92 83       	std	Z+2, r25	; 0x02
    67f0:	a3 83       	std	Z+3, r26	; 0x03
    67f2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
}
    67f6:	0f 90       	pop	r0
    67f8:	0f 90       	pop	r0
    67fa:	0f 90       	pop	r0
    67fc:	08 95       	ret

000067fe <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    67fe:	89 2b       	or	r24, r25
    6800:	81 f4       	brne	.+32     	; 0x6822 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6802:	fb 01       	movw	r30, r22
    6804:	10 82       	st	Z, r1
    6806:	11 82       	std	Z+1, r1	; 0x01
    6808:	12 82       	std	Z+2, r1	; 0x02
    680a:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    680c:	80 e4       	ldi	r24, 0x40	; 64
    680e:	92 e4       	ldi	r25, 0x42	; 66
    6810:	af e0       	ldi	r26, 0x0F	; 15
    6812:	b0 e0       	ldi	r27, 0x00	; 0
    6814:	84 83       	std	Z+4, r24	; 0x04
    6816:	95 83       	std	Z+5, r25	; 0x05
    6818:	a6 83       	std	Z+6, r26	; 0x06
    681a:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    681c:	80 e0       	ldi	r24, 0x00	; 0
    681e:	90 e0       	ldi	r25, 0x00	; 0
    6820:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6822:	8f ef       	ldi	r24, 0xFF	; 255
    6824:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6826:	08 95       	ret

00006828 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6828:	89 2b       	or	r24, r25
    682a:	19 f4       	brne	.+6      	; 0x6832 <clock_settime+0xa>
    682c:	cb 01       	movw	r24, r22
    682e:	05 ce       	rjmp	.-1014   	; 0x643a <clock_settime.part.2>
    6830:	08 95       	ret
        return(-1);
    6832:	8f ef       	ldi	r24, 0xFF	; 255
    6834:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6836:	08 95       	ret

00006838 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6838:	9c 01       	movw	r18, r24
    683a:	83 70       	andi	r24, 0x03	; 3
    683c:	99 27       	eor	r25, r25
    683e:	00 97       	sbiw	r24, 0x00	; 0
    6840:	69 f4       	brne	.+26     	; 0x685c <IS_Leap+0x24>
    6842:	2c 36       	cpi	r18, 0x6C	; 108
    6844:	47 e0       	ldi	r20, 0x07	; 7
    6846:	34 07       	cpc	r19, r20
    6848:	59 f0       	breq	.+22     	; 0x6860 <IS_Leap+0x28>
    684a:	51 e0       	ldi	r21, 0x01	; 1
    684c:	40 e0       	ldi	r20, 0x00	; 0
    684e:	24 33       	cpi	r18, 0x34	; 52
    6850:	38 40       	sbci	r19, 0x08	; 8
    6852:	09 f4       	brne	.+2      	; 0x6856 <IS_Leap+0x1e>
    6854:	50 e0       	ldi	r21, 0x00	; 0
    6856:	85 2f       	mov	r24, r21
    6858:	94 2f       	mov	r25, r20
    685a:	08 95       	ret
    685c:	80 e0       	ldi	r24, 0x00	; 0
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	08 95       	ret

00006862 <tm_mon_to_ascii>:
    6862:	8c 30       	cpi	r24, 0x0C	; 12
    6864:	91 05       	cpc	r25, r1
    6866:	40 f4       	brcc	.+16     	; 0x6878 <tm_mon_to_ascii+0x16>
    6868:	88 0f       	add	r24, r24
    686a:	99 1f       	adc	r25, r25
    686c:	fc 01       	movw	r30, r24
    686e:	e5 5f       	subi	r30, 0xF5	; 245
    6870:	fe 4f       	sbci	r31, 0xFE	; 254
    6872:	80 81       	ld	r24, Z
    6874:	91 81       	ldd	r25, Z+1	; 0x01
    6876:	08 95       	ret
    6878:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    687c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6880:	08 95       	ret

00006882 <Days_Per_Month>:
    6882:	cf 93       	push	r28
    6884:	df 93       	push	r29
    6886:	8c 30       	cpi	r24, 0x0C	; 12
    6888:	91 05       	cpc	r25, r1
    688a:	24 f0       	brlt	.+8      	; 0x6894 <Days_Per_Month+0x12>
    688c:	6f 5f       	subi	r22, 0xFF	; 255
    688e:	7f 4f       	sbci	r23, 0xFF	; 255
    6890:	0c 97       	sbiw	r24, 0x0c	; 12
    6892:	f9 cf       	rjmp	.-14     	; 0x6886 <Days_Per_Month+0x4>
    6894:	97 ff       	sbrs	r25, 7
    6896:	04 c0       	rjmp	.+8      	; 0x68a0 <Days_Per_Month+0x1e>
    6898:	61 50       	subi	r22, 0x01	; 1
    689a:	71 09       	sbc	r23, r1
    689c:	0c 96       	adiw	r24, 0x0c	; 12
    689e:	fa cf       	rjmp	.-12     	; 0x6894 <Days_Per_Month+0x12>
    68a0:	fc 01       	movw	r30, r24
    68a2:	ee 0f       	add	r30, r30
    68a4:	ff 1f       	adc	r31, r31
    68a6:	e8 57       	subi	r30, 0x78	; 120
    68a8:	fc 4f       	sbci	r31, 0xFC	; 252
    68aa:	c0 81       	ld	r28, Z
    68ac:	d1 81       	ldd	r29, Z+1	; 0x01
    68ae:	01 97       	sbiw	r24, 0x01	; 1
    68b0:	29 f4       	brne	.+10     	; 0x68bc <Days_Per_Month+0x3a>
    68b2:	cb 01       	movw	r24, r22
    68b4:	c1 df       	rcall	.-126    	; 0x6838 <IS_Leap>
    68b6:	89 2b       	or	r24, r25
    68b8:	09 f0       	breq	.+2      	; 0x68bc <Days_Per_Month+0x3a>
    68ba:	21 96       	adiw	r28, 0x01	; 1
    68bc:	ce 01       	movw	r24, r28
    68be:	df 91       	pop	r29
    68c0:	cf 91       	pop	r28
    68c2:	08 95       	ret

000068c4 <time_to_tm>:
    68c4:	a0 e0       	ldi	r26, 0x00	; 0
    68c6:	b0 e0       	ldi	r27, 0x00	; 0
    68c8:	e8 e6       	ldi	r30, 0x68	; 104
    68ca:	f4 e3       	ldi	r31, 0x34	; 52
    68cc:	0c 94 5a e2 	jmp	0x1c4b4	; 0x1c4b4 <__prologue_saves__+0x4>
    68d0:	e8 01       	movw	r28, r16
    68d2:	e6 e1       	ldi	r30, 0x16	; 22
    68d4:	d8 01       	movw	r26, r16
    68d6:	1d 92       	st	X+, r1
    68d8:	ea 95       	dec	r30
    68da:	e9 f7       	brne	.-6      	; 0x68d6 <time_to_tm+0x12>
    68dc:	61 15       	cp	r22, r1
    68de:	bd e5       	ldi	r27, 0x5D	; 93
    68e0:	7b 07       	cpc	r23, r27
    68e2:	bd ef       	ldi	r27, 0xFD	; 253
    68e4:	8b 07       	cpc	r24, r27
    68e6:	bf ef       	ldi	r27, 0xFF	; 255
    68e8:	9b 07       	cpc	r25, r27
    68ea:	08 f0       	brcs	.+2      	; 0x68ee <time_to_tm+0x2a>
    68ec:	c0 c0       	rjmp	.+384    	; 0x6a6e <time_to_tm+0x1aa>
    68ee:	6b 01       	movw	r12, r22
    68f0:	7c 01       	movw	r14, r24
    68f2:	c2 1a       	sub	r12, r18
    68f4:	d3 0a       	sbc	r13, r19
    68f6:	e4 0a       	sbc	r14, r20
    68f8:	f5 0a       	sbc	r15, r21
    68fa:	46 01       	movw	r8, r12
    68fc:	57 01       	movw	r10, r14
    68fe:	e0 e8       	ldi	r30, 0x80	; 128
    6900:	ce 16       	cp	r12, r30
    6902:	ee ea       	ldi	r30, 0xAE	; 174
    6904:	de 06       	cpc	r13, r30
    6906:	ee ef       	ldi	r30, 0xFE	; 254
    6908:	ee 06       	cpc	r14, r30
    690a:	ef ef       	ldi	r30, 0xFF	; 255
    690c:	fe 06       	cpc	r15, r30
    690e:	50 f0       	brcs	.+20     	; 0x6924 <time_to_tm+0x60>
    6910:	80 e8       	ldi	r24, 0x80	; 128
    6912:	88 0e       	add	r8, r24
    6914:	81 e5       	ldi	r24, 0x51	; 81
    6916:	98 1e       	adc	r9, r24
    6918:	81 e0       	ldi	r24, 0x01	; 1
    691a:	a8 1e       	adc	r10, r24
    691c:	b1 1c       	adc	r11, r1
    691e:	01 e0       	ldi	r16, 0x01	; 1
    6920:	10 e0       	ldi	r17, 0x00	; 0
    6922:	02 c0       	rjmp	.+4      	; 0x6928 <time_to_tm+0x64>
    6924:	00 e0       	ldi	r16, 0x00	; 0
    6926:	10 e0       	ldi	r17, 0x00	; 0
    6928:	8c e3       	ldi	r24, 0x3C	; 60
    692a:	48 2e       	mov	r4, r24
    692c:	51 2c       	mov	r5, r1
    692e:	61 2c       	mov	r6, r1
    6930:	71 2c       	mov	r7, r1
    6932:	c5 01       	movw	r24, r10
    6934:	b4 01       	movw	r22, r8
    6936:	a3 01       	movw	r20, r6
    6938:	92 01       	movw	r18, r4
    693a:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    693e:	79 83       	std	Y+1, r23	; 0x01
    6940:	68 83       	st	Y, r22
    6942:	ca 01       	movw	r24, r20
    6944:	b9 01       	movw	r22, r18
    6946:	a3 01       	movw	r20, r6
    6948:	92 01       	movw	r18, r4
    694a:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    694e:	7b 83       	std	Y+3, r23	; 0x03
    6950:	6a 83       	std	Y+2, r22	; 0x02
    6952:	c5 01       	movw	r24, r10
    6954:	b4 01       	movw	r22, r8
    6956:	20 e1       	ldi	r18, 0x10	; 16
    6958:	3e e0       	ldi	r19, 0x0E	; 14
    695a:	40 e0       	ldi	r20, 0x00	; 0
    695c:	50 e0       	ldi	r21, 0x00	; 0
    695e:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    6962:	ca 01       	movw	r24, r20
    6964:	b9 01       	movw	r22, r18
    6966:	28 e1       	ldi	r18, 0x18	; 24
    6968:	30 e0       	ldi	r19, 0x00	; 0
    696a:	40 e0       	ldi	r20, 0x00	; 0
    696c:	50 e0       	ldi	r21, 0x00	; 0
    696e:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    6972:	7d 83       	std	Y+5, r23	; 0x05
    6974:	6c 83       	std	Y+4, r22	; 0x04
    6976:	01 15       	cp	r16, r1
    6978:	11 05       	cpc	r17, r1
    697a:	89 f0       	breq	.+34     	; 0x699e <time_to_tm+0xda>
    697c:	85 e4       	ldi	r24, 0x45	; 69
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	9b 87       	std	Y+11, r25	; 0x0b
    6982:	8a 87       	std	Y+10, r24	; 0x0a
    6984:	8b e0       	ldi	r24, 0x0B	; 11
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	99 87       	std	Y+9, r25	; 0x09
    698a:	88 87       	std	Y+8, r24	; 0x08
    698c:	8f e1       	ldi	r24, 0x1F	; 31
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	9f 83       	std	Y+7, r25	; 0x07
    6992:	8e 83       	std	Y+6, r24	; 0x06
    6994:	83 e0       	ldi	r24, 0x03	; 3
    6996:	90 e0       	ldi	r25, 0x00	; 0
    6998:	9d 87       	std	Y+13, r25	; 0x0d
    699a:	8c 87       	std	Y+12, r24	; 0x0c
    699c:	65 c0       	rjmp	.+202    	; 0x6a68 <time_to_tm+0x1a4>
    699e:	c5 01       	movw	r24, r10
    69a0:	b4 01       	movw	r22, r8
    69a2:	20 e8       	ldi	r18, 0x80	; 128
    69a4:	31 e5       	ldi	r19, 0x51	; 81
    69a6:	41 e0       	ldi	r20, 0x01	; 1
    69a8:	50 e0       	ldi	r21, 0x00	; 0
    69aa:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    69ae:	49 01       	movw	r8, r18
    69b0:	5a 01       	movw	r10, r20
    69b2:	ca 01       	movw	r24, r20
    69b4:	b9 01       	movw	r22, r18
    69b6:	6c 5f       	subi	r22, 0xFC	; 252
    69b8:	7f 4f       	sbci	r23, 0xFF	; 255
    69ba:	8f 4f       	sbci	r24, 0xFF	; 255
    69bc:	9f 4f       	sbci	r25, 0xFF	; 255
    69be:	27 e0       	ldi	r18, 0x07	; 7
    69c0:	30 e0       	ldi	r19, 0x00	; 0
    69c2:	40 e0       	ldi	r20, 0x00	; 0
    69c4:	50 e0       	ldi	r21, 0x00	; 0
    69c6:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
    69ca:	7d 87       	std	Y+13, r23	; 0x0d
    69cc:	6c 87       	std	Y+12, r22	; 0x0c
    69ce:	02 eb       	ldi	r16, 0xB2	; 178
    69d0:	17 e0       	ldi	r17, 0x07	; 7
    69d2:	c8 01       	movw	r24, r16
    69d4:	31 df       	rcall	.-414    	; 0x6838 <IS_Leap>
    69d6:	00 97       	sbiw	r24, 0x00	; 0
    69d8:	19 f4       	brne	.+6      	; 0x69e0 <time_to_tm+0x11c>
    69da:	4d e6       	ldi	r20, 0x6D	; 109
    69dc:	51 e0       	ldi	r21, 0x01	; 1
    69de:	02 c0       	rjmp	.+4      	; 0x69e4 <time_to_tm+0x120>
    69e0:	4e e6       	ldi	r20, 0x6E	; 110
    69e2:	51 e0       	ldi	r21, 0x01	; 1
    69e4:	05 2e       	mov	r0, r21
    69e6:	00 0c       	add	r0, r0
    69e8:	66 0b       	sbc	r22, r22
    69ea:	77 0b       	sbc	r23, r23
    69ec:	84 16       	cp	r8, r20
    69ee:	95 06       	cpc	r9, r21
    69f0:	a6 06       	cpc	r10, r22
    69f2:	b7 06       	cpc	r11, r23
    69f4:	3c f0       	brlt	.+14     	; 0x6a04 <time_to_tm+0x140>
    69f6:	0f 5f       	subi	r16, 0xFF	; 255
    69f8:	1f 4f       	sbci	r17, 0xFF	; 255
    69fa:	84 1a       	sub	r8, r20
    69fc:	95 0a       	sbc	r9, r21
    69fe:	a6 0a       	sbc	r10, r22
    6a00:	b7 0a       	sbc	r11, r23
    6a02:	e7 cf       	rjmp	.-50     	; 0x69d2 <time_to_tm+0x10e>
    6a04:	0c 56       	subi	r16, 0x6C	; 108
    6a06:	17 40       	sbci	r17, 0x07	; 7
    6a08:	1b 87       	std	Y+11, r17	; 0x0b
    6a0a:	0a 87       	std	Y+10, r16	; 0x0a
    6a0c:	9f 86       	std	Y+15, r9	; 0x0f
    6a0e:	8e 86       	std	Y+14, r8	; 0x0e
    6a10:	e8 e8       	ldi	r30, 0x88	; 136
    6a12:	f3 e0       	ldi	r31, 0x03	; 3
    6a14:	20 e0       	ldi	r18, 0x00	; 0
    6a16:	30 e0       	ldi	r19, 0x00	; 0
    6a18:	18 14       	cp	r1, r8
    6a1a:	19 04       	cpc	r1, r9
    6a1c:	1a 04       	cpc	r1, r10
    6a1e:	1b 04       	cpc	r1, r11
    6a20:	e4 f4       	brge	.+56     	; 0x6a5a <time_to_tm+0x196>
    6a22:	2c 30       	cpi	r18, 0x0C	; 12
    6a24:	31 05       	cpc	r19, r1
    6a26:	c9 f0       	breq	.+50     	; 0x6a5a <time_to_tm+0x196>
    6a28:	41 91       	ld	r20, Z+
    6a2a:	51 91       	ld	r21, Z+
    6a2c:	21 30       	cpi	r18, 0x01	; 1
    6a2e:	31 05       	cpc	r19, r1
    6a30:	21 f4       	brne	.+8      	; 0x6a3a <time_to_tm+0x176>
    6a32:	00 97       	sbiw	r24, 0x00	; 0
    6a34:	11 f0       	breq	.+4      	; 0x6a3a <time_to_tm+0x176>
    6a36:	4f 5f       	subi	r20, 0xFF	; 255
    6a38:	5f 4f       	sbci	r21, 0xFF	; 255
    6a3a:	05 2e       	mov	r0, r21
    6a3c:	00 0c       	add	r0, r0
    6a3e:	66 0b       	sbc	r22, r22
    6a40:	77 0b       	sbc	r23, r23
    6a42:	84 16       	cp	r8, r20
    6a44:	95 06       	cpc	r9, r21
    6a46:	a6 06       	cpc	r10, r22
    6a48:	b7 06       	cpc	r11, r23
    6a4a:	3c f0       	brlt	.+14     	; 0x6a5a <time_to_tm+0x196>
    6a4c:	84 1a       	sub	r8, r20
    6a4e:	95 0a       	sbc	r9, r21
    6a50:	a6 0a       	sbc	r10, r22
    6a52:	b7 0a       	sbc	r11, r23
    6a54:	2f 5f       	subi	r18, 0xFF	; 255
    6a56:	3f 4f       	sbci	r19, 0xFF	; 255
    6a58:	df cf       	rjmp	.-66     	; 0x6a18 <time_to_tm+0x154>
    6a5a:	39 87       	std	Y+9, r19	; 0x09
    6a5c:	28 87       	std	Y+8, r18	; 0x08
    6a5e:	af ef       	ldi	r26, 0xFF	; 255
    6a60:	8a 1a       	sub	r8, r26
    6a62:	9a 0a       	sbc	r9, r26
    6a64:	9f 82       	std	Y+7, r9	; 0x07
    6a66:	8e 82       	std	Y+6, r8	; 0x06
    6a68:	b6 01       	movw	r22, r12
    6a6a:	c7 01       	movw	r24, r14
    6a6c:	04 c0       	rjmp	.+8      	; 0x6a76 <time_to_tm+0x1b2>
    6a6e:	6f ef       	ldi	r22, 0xFF	; 255
    6a70:	7f ef       	ldi	r23, 0xFF	; 255
    6a72:	8f ef       	ldi	r24, 0xFF	; 255
    6a74:	9f ef       	ldi	r25, 0xFF	; 255
    6a76:	cd b7       	in	r28, 0x3d	; 61
    6a78:	de b7       	in	r29, 0x3e	; 62
    6a7a:	e0 e1       	ldi	r30, 0x10	; 16
    6a7c:	0c 94 76 e2 	jmp	0x1c4ec	; 0x1c4ec <__epilogue_restores__+0x4>

00006a80 <gmtime_r>:
    6a80:	0f 93       	push	r16
    6a82:	1f 93       	push	r17
    6a84:	cf 93       	push	r28
    6a86:	df 93       	push	r29
    6a88:	eb 01       	movw	r28, r22
    6a8a:	fc 01       	movw	r30, r24
    6a8c:	60 81       	ld	r22, Z
    6a8e:	71 81       	ldd	r23, Z+1	; 0x01
    6a90:	82 81       	ldd	r24, Z+2	; 0x02
    6a92:	93 81       	ldd	r25, Z+3	; 0x03
    6a94:	8e 01       	movw	r16, r28
    6a96:	20 e0       	ldi	r18, 0x00	; 0
    6a98:	30 e0       	ldi	r19, 0x00	; 0
    6a9a:	a9 01       	movw	r20, r18
    6a9c:	13 df       	rcall	.-474    	; 0x68c4 <time_to_tm>
    6a9e:	ce 01       	movw	r24, r28
    6aa0:	df 91       	pop	r29
    6aa2:	cf 91       	pop	r28
    6aa4:	1f 91       	pop	r17
    6aa6:	0f 91       	pop	r16
    6aa8:	08 95       	ret

00006aaa <gmtime>:
    6aaa:	2e eb       	ldi	r18, 0xBE	; 190
    6aac:	37 e1       	ldi	r19, 0x17	; 23
    6aae:	30 93 d5 17 	sts	0x17D5, r19	; 0x8017d5 <p.3677+0x1>
    6ab2:	20 93 d4 17 	sts	0x17D4, r18	; 0x8017d4 <p.3677>
    6ab6:	b9 01       	movw	r22, r18
    6ab8:	e3 df       	rcall	.-58     	; 0x6a80 <gmtime_r>
    6aba:	8e eb       	ldi	r24, 0xBE	; 190
    6abc:	97 e1       	ldi	r25, 0x17	; 23
    6abe:	08 95       	ret

00006ac0 <gettimezone>:
    6ac0:	e6 e6       	ldi	r30, 0x66	; 102
    6ac2:	fa e1       	ldi	r31, 0x1A	; 26
    6ac4:	20 81       	ld	r18, Z
    6ac6:	31 81       	ldd	r19, Z+1	; 0x01
    6ac8:	dc 01       	movw	r26, r24
    6aca:	2d 93       	st	X+, r18
    6acc:	3c 93       	st	X, r19
    6ace:	22 81       	ldd	r18, Z+2	; 0x02
    6ad0:	33 81       	ldd	r19, Z+3	; 0x03
    6ad2:	fc 01       	movw	r30, r24
    6ad4:	33 83       	std	Z+3, r19	; 0x03
    6ad6:	22 83       	std	Z+2, r18	; 0x02
    6ad8:	80 e0       	ldi	r24, 0x00	; 0
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	08 95       	ret

00006ade <settimezone>:
    6ade:	cf 93       	push	r28
    6ae0:	df 93       	push	r29
    6ae2:	ec 01       	movw	r28, r24
    6ae4:	28 81       	ld	r18, Y
    6ae6:	39 81       	ldd	r19, Y+1	; 0x01
    6ae8:	e6 e6       	ldi	r30, 0x66	; 102
    6aea:	fa e1       	ldi	r31, 0x1A	; 26
    6aec:	31 83       	std	Z+1, r19	; 0x01
    6aee:	20 83       	st	Z, r18
    6af0:	8a 81       	ldd	r24, Y+2	; 0x02
    6af2:	9b 81       	ldd	r25, Y+3	; 0x03
    6af4:	93 83       	std	Z+3, r25	; 0x03
    6af6:	82 83       	std	Z+2, r24	; 0x02
    6af8:	80 e0       	ldi	r24, 0x00	; 0
    6afa:	90 e0       	ldi	r25, 0x00	; 0
    6afc:	df 91       	pop	r29
    6afe:	cf 91       	pop	r28
    6b00:	08 95       	ret

00006b02 <gettimeofday>:
    6b02:	a8 e0       	ldi	r26, 0x08	; 8
    6b04:	b0 e0       	ldi	r27, 0x00	; 0
    6b06:	e7 e8       	ldi	r30, 0x87	; 135
    6b08:	f5 e3       	ldi	r31, 0x35	; 53
    6b0a:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
    6b0e:	8c 01       	movw	r16, r24
    6b10:	7b 01       	movw	r14, r22
    6b12:	be 01       	movw	r22, r28
    6b14:	6f 5f       	subi	r22, 0xFF	; 255
    6b16:	7f 4f       	sbci	r23, 0xFF	; 255
    6b18:	80 e0       	ldi	r24, 0x00	; 0
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	dc db       	rcall	.-2120   	; 0x62d6 <clock_gettime>
    6b1e:	89 81       	ldd	r24, Y+1	; 0x01
    6b20:	9a 81       	ldd	r25, Y+2	; 0x02
    6b22:	ab 81       	ldd	r26, Y+3	; 0x03
    6b24:	bc 81       	ldd	r27, Y+4	; 0x04
    6b26:	f8 01       	movw	r30, r16
    6b28:	80 83       	st	Z, r24
    6b2a:	91 83       	std	Z+1, r25	; 0x01
    6b2c:	a2 83       	std	Z+2, r26	; 0x02
    6b2e:	b3 83       	std	Z+3, r27	; 0x03
    6b30:	6d 81       	ldd	r22, Y+5	; 0x05
    6b32:	7e 81       	ldd	r23, Y+6	; 0x06
    6b34:	8f 81       	ldd	r24, Y+7	; 0x07
    6b36:	98 85       	ldd	r25, Y+8	; 0x08
    6b38:	28 ee       	ldi	r18, 0xE8	; 232
    6b3a:	33 e0       	ldi	r19, 0x03	; 3
    6b3c:	40 e0       	ldi	r20, 0x00	; 0
    6b3e:	50 e0       	ldi	r21, 0x00	; 0
    6b40:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
    6b44:	f8 01       	movw	r30, r16
    6b46:	24 83       	std	Z+4, r18	; 0x04
    6b48:	35 83       	std	Z+5, r19	; 0x05
    6b4a:	46 83       	std	Z+6, r20	; 0x06
    6b4c:	57 83       	std	Z+7, r21	; 0x07
    6b4e:	c7 01       	movw	r24, r14
    6b50:	b7 df       	rcall	.-146    	; 0x6ac0 <gettimezone>
    6b52:	80 e0       	ldi	r24, 0x00	; 0
    6b54:	90 e0       	ldi	r25, 0x00	; 0
    6b56:	28 96       	adiw	r28, 0x08	; 8
    6b58:	e6 e0       	ldi	r30, 0x06	; 6
    6b5a:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00006b5e <time>:
    6b5e:	cf 93       	push	r28
    6b60:	df 93       	push	r29
    6b62:	ec 01       	movw	r28, r24
    6b64:	60 ea       	ldi	r22, 0xA0	; 160
    6b66:	77 e1       	ldi	r23, 0x17	; 23
    6b68:	80 e0       	ldi	r24, 0x00	; 0
    6b6a:	90 e0       	ldi	r25, 0x00	; 0
    6b6c:	b4 db       	rcall	.-2200   	; 0x62d6 <clock_gettime>
    6b6e:	20 97       	sbiw	r28, 0x00	; 0
    6b70:	61 f0       	breq	.+24     	; 0x6b8a <time+0x2c>
    6b72:	80 91 a0 17 	lds	r24, 0x17A0	; 0x8017a0 <ts.3755>
    6b76:	90 91 a1 17 	lds	r25, 0x17A1	; 0x8017a1 <ts.3755+0x1>
    6b7a:	a0 91 a2 17 	lds	r26, 0x17A2	; 0x8017a2 <ts.3755+0x2>
    6b7e:	b0 91 a3 17 	lds	r27, 0x17A3	; 0x8017a3 <ts.3755+0x3>
    6b82:	88 83       	st	Y, r24
    6b84:	99 83       	std	Y+1, r25	; 0x01
    6b86:	aa 83       	std	Y+2, r26	; 0x02
    6b88:	bb 83       	std	Y+3, r27	; 0x03
    6b8a:	60 91 a0 17 	lds	r22, 0x17A0	; 0x8017a0 <ts.3755>
    6b8e:	70 91 a1 17 	lds	r23, 0x17A1	; 0x8017a1 <ts.3755+0x1>
    6b92:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <ts.3755+0x2>
    6b96:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <ts.3755+0x3>
    6b9a:	df 91       	pop	r29
    6b9c:	cf 91       	pop	r28
    6b9e:	08 95       	ret

00006ba0 <is_dst>:
    6ba0:	cf 92       	push	r12
    6ba2:	df 92       	push	r13
    6ba4:	ef 92       	push	r14
    6ba6:	ff 92       	push	r15
    6ba8:	6b 01       	movw	r12, r22
    6baa:	7c 01       	movw	r14, r24
    6bac:	05 d4       	rcall	.+2058   	; 0x73b8 <set_dst>
    6bae:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <dst>
    6bb2:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <dst+0x1>
    6bb6:	a0 91 6c 1a 	lds	r26, 0x1A6C	; 0x801a6c <dst+0x2>
    6bba:	b0 91 6d 1a 	lds	r27, 0x1A6D	; 0x801a6d <dst+0x3>
    6bbe:	c8 16       	cp	r12, r24
    6bc0:	d9 06       	cpc	r13, r25
    6bc2:	ea 06       	cpc	r14, r26
    6bc4:	fb 06       	cpc	r15, r27
    6bc6:	88 f0       	brcs	.+34     	; 0x6bea <is_dst+0x4a>
    6bc8:	81 e0       	ldi	r24, 0x01	; 1
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	40 91 6e 1a 	lds	r20, 0x1A6E	; 0x801a6e <dst+0x4>
    6bd0:	50 91 6f 1a 	lds	r21, 0x1A6F	; 0x801a6f <dst+0x5>
    6bd4:	60 91 70 1a 	lds	r22, 0x1A70	; 0x801a70 <dst+0x6>
    6bd8:	70 91 71 1a 	lds	r23, 0x1A71	; 0x801a71 <dst+0x7>
    6bdc:	4c 15       	cp	r20, r12
    6bde:	5d 05       	cpc	r21, r13
    6be0:	6e 05       	cpc	r22, r14
    6be2:	7f 05       	cpc	r23, r15
    6be4:	20 f4       	brcc	.+8      	; 0x6bee <is_dst+0x4e>
    6be6:	80 e0       	ldi	r24, 0x00	; 0
    6be8:	02 c0       	rjmp	.+4      	; 0x6bee <is_dst+0x4e>
    6bea:	80 e0       	ldi	r24, 0x00	; 0
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	ff 90       	pop	r15
    6bf0:	ef 90       	pop	r14
    6bf2:	df 90       	pop	r13
    6bf4:	cf 90       	pop	r12
    6bf6:	08 95       	ret

00006bf8 <localtime_r>:
    6bf8:	4f 92       	push	r4
    6bfa:	5f 92       	push	r5
    6bfc:	6f 92       	push	r6
    6bfe:	7f 92       	push	r7
    6c00:	af 92       	push	r10
    6c02:	bf 92       	push	r11
    6c04:	cf 92       	push	r12
    6c06:	df 92       	push	r13
    6c08:	ef 92       	push	r14
    6c0a:	ff 92       	push	r15
    6c0c:	0f 93       	push	r16
    6c0e:	1f 93       	push	r17
    6c10:	cf 93       	push	r28
    6c12:	df 93       	push	r29
    6c14:	00 d0       	rcall	.+0      	; 0x6c16 <localtime_r+0x1e>
    6c16:	00 d0       	rcall	.+0      	; 0x6c18 <localtime_r+0x20>
    6c18:	cd b7       	in	r28, 0x3d	; 61
    6c1a:	de b7       	in	r29, 0x3e	; 62
    6c1c:	5b 01       	movw	r10, r22
    6c1e:	fc 01       	movw	r30, r24
    6c20:	40 80       	ld	r4, Z
    6c22:	51 80       	ldd	r5, Z+1	; 0x01
    6c24:	62 80       	ldd	r6, Z+2	; 0x02
    6c26:	73 80       	ldd	r7, Z+3	; 0x03
    6c28:	ce 01       	movw	r24, r28
    6c2a:	01 96       	adiw	r24, 0x01	; 1
    6c2c:	49 df       	rcall	.-366    	; 0x6ac0 <gettimezone>
    6c2e:	a9 81       	ldd	r26, Y+1	; 0x01
    6c30:	ba 81       	ldd	r27, Y+2	; 0x02
    6c32:	2c e3       	ldi	r18, 0x3C	; 60
    6c34:	30 e0       	ldi	r19, 0x00	; 0
    6c36:	0e 94 32 e2 	call	0x1c464	; 0x1c464 <__usmulhisi3>
    6c3a:	6b 01       	movw	r12, r22
    6c3c:	7c 01       	movw	r14, r24
    6c3e:	c3 01       	movw	r24, r6
    6c40:	b2 01       	movw	r22, r4
    6c42:	6c 19       	sub	r22, r12
    6c44:	7d 09       	sbc	r23, r13
    6c46:	8e 09       	sbc	r24, r14
    6c48:	9f 09       	sbc	r25, r15
    6c4a:	aa df       	rcall	.-172    	; 0x6ba0 <is_dst>
    6c4c:	89 2b       	or	r24, r25
    6c4e:	31 f0       	breq	.+12     	; 0x6c5c <localtime_r+0x64>
    6c50:	f0 e1       	ldi	r31, 0x10	; 16
    6c52:	cf 1a       	sub	r12, r31
    6c54:	fe e0       	ldi	r31, 0x0E	; 14
    6c56:	df 0a       	sbc	r13, r31
    6c58:	e1 08       	sbc	r14, r1
    6c5a:	f1 08       	sbc	r15, r1
    6c5c:	85 01       	movw	r16, r10
    6c5e:	a7 01       	movw	r20, r14
    6c60:	96 01       	movw	r18, r12
    6c62:	c3 01       	movw	r24, r6
    6c64:	b2 01       	movw	r22, r4
    6c66:	2e de       	rcall	.-932    	; 0x68c4 <time_to_tm>
    6c68:	c5 01       	movw	r24, r10
    6c6a:	0f 90       	pop	r0
    6c6c:	0f 90       	pop	r0
    6c6e:	0f 90       	pop	r0
    6c70:	0f 90       	pop	r0
    6c72:	df 91       	pop	r29
    6c74:	cf 91       	pop	r28
    6c76:	1f 91       	pop	r17
    6c78:	0f 91       	pop	r16
    6c7a:	ff 90       	pop	r15
    6c7c:	ef 90       	pop	r14
    6c7e:	df 90       	pop	r13
    6c80:	cf 90       	pop	r12
    6c82:	bf 90       	pop	r11
    6c84:	af 90       	pop	r10
    6c86:	7f 90       	pop	r7
    6c88:	6f 90       	pop	r6
    6c8a:	5f 90       	pop	r5
    6c8c:	4f 90       	pop	r4
    6c8e:	08 95       	ret

00006c90 <localtime>:
    6c90:	68 ea       	ldi	r22, 0xA8	; 168
    6c92:	77 e1       	ldi	r23, 0x17	; 23
    6c94:	b1 cf       	rjmp	.-158    	; 0x6bf8 <localtime_r>
    6c96:	08 95       	ret

00006c98 <normalize>:
    6c98:	aa e0       	ldi	r26, 0x0A	; 10
    6c9a:	b0 e0       	ldi	r27, 0x00	; 0
    6c9c:	e2 e5       	ldi	r30, 0x52	; 82
    6c9e:	f6 e3       	ldi	r31, 0x36	; 54
    6ca0:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    6ca4:	7c 01       	movw	r14, r24
    6ca6:	7a 87       	std	Y+10, r23	; 0x0a
    6ca8:	69 87       	std	Y+9, r22	; 0x09
    6caa:	f7 01       	movw	r30, r14
    6cac:	80 81       	ld	r24, Z
    6cae:	91 81       	ldd	r25, Z+1	; 0x01
    6cb0:	8c 33       	cpi	r24, 0x3C	; 60
    6cb2:	91 05       	cpc	r25, r1
    6cb4:	5c f0       	brlt	.+22     	; 0x6ccc <normalize+0x34>
    6cb6:	f7 01       	movw	r30, r14
    6cb8:	22 81       	ldd	r18, Z+2	; 0x02
    6cba:	33 81       	ldd	r19, Z+3	; 0x03
    6cbc:	2f 5f       	subi	r18, 0xFF	; 255
    6cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc0:	33 83       	std	Z+3, r19	; 0x03
    6cc2:	22 83       	std	Z+2, r18	; 0x02
    6cc4:	cc 97       	sbiw	r24, 0x3c	; 60
    6cc6:	91 83       	std	Z+1, r25	; 0x01
    6cc8:	80 83       	st	Z, r24
    6cca:	ef cf       	rjmp	.-34     	; 0x6caa <normalize+0x12>
    6ccc:	f7 01       	movw	r30, r14
    6cce:	01 90       	ld	r0, Z+
    6cd0:	f0 81       	ld	r31, Z
    6cd2:	e0 2d       	mov	r30, r0
    6cd4:	fe 83       	std	Y+6, r31	; 0x06
    6cd6:	ed 83       	std	Y+5, r30	; 0x05
    6cd8:	f7 ff       	sbrs	r31, 7
    6cda:	0d c0       	rjmp	.+26     	; 0x6cf6 <normalize+0x5e>
    6cdc:	f7 01       	movw	r30, r14
    6cde:	82 81       	ldd	r24, Z+2	; 0x02
    6ce0:	93 81       	ldd	r25, Z+3	; 0x03
    6ce2:	01 97       	sbiw	r24, 0x01	; 1
    6ce4:	93 83       	std	Z+3, r25	; 0x03
    6ce6:	82 83       	std	Z+2, r24	; 0x02
    6ce8:	6d 81       	ldd	r22, Y+5	; 0x05
    6cea:	7e 81       	ldd	r23, Y+6	; 0x06
    6cec:	64 5c       	subi	r22, 0xC4	; 196
    6cee:	7f 4f       	sbci	r23, 0xFF	; 255
    6cf0:	71 83       	std	Z+1, r23	; 0x01
    6cf2:	60 83       	st	Z, r22
    6cf4:	eb cf       	rjmp	.-42     	; 0x6ccc <normalize+0x34>
    6cf6:	f7 01       	movw	r30, r14
    6cf8:	82 81       	ldd	r24, Z+2	; 0x02
    6cfa:	93 81       	ldd	r25, Z+3	; 0x03
    6cfc:	8c 33       	cpi	r24, 0x3C	; 60
    6cfe:	91 05       	cpc	r25, r1
    6d00:	5c f0       	brlt	.+22     	; 0x6d18 <normalize+0x80>
    6d02:	f7 01       	movw	r30, r14
    6d04:	24 81       	ldd	r18, Z+4	; 0x04
    6d06:	35 81       	ldd	r19, Z+5	; 0x05
    6d08:	2f 5f       	subi	r18, 0xFF	; 255
    6d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d0c:	35 83       	std	Z+5, r19	; 0x05
    6d0e:	24 83       	std	Z+4, r18	; 0x04
    6d10:	cc 97       	sbiw	r24, 0x3c	; 60
    6d12:	93 83       	std	Z+3, r25	; 0x03
    6d14:	82 83       	std	Z+2, r24	; 0x02
    6d16:	ef cf       	rjmp	.-34     	; 0x6cf6 <normalize+0x5e>
    6d18:	f7 01       	movw	r30, r14
    6d1a:	22 80       	ldd	r2, Z+2	; 0x02
    6d1c:	33 80       	ldd	r3, Z+3	; 0x03
    6d1e:	37 fe       	sbrs	r3, 7
    6d20:	0d c0       	rjmp	.+26     	; 0x6d3c <normalize+0xa4>
    6d22:	f7 01       	movw	r30, r14
    6d24:	84 81       	ldd	r24, Z+4	; 0x04
    6d26:	95 81       	ldd	r25, Z+5	; 0x05
    6d28:	01 97       	sbiw	r24, 0x01	; 1
    6d2a:	95 83       	std	Z+5, r25	; 0x05
    6d2c:	84 83       	std	Z+4, r24	; 0x04
    6d2e:	fc e3       	ldi	r31, 0x3C	; 60
    6d30:	2f 0e       	add	r2, r31
    6d32:	31 1c       	adc	r3, r1
    6d34:	f7 01       	movw	r30, r14
    6d36:	33 82       	std	Z+3, r3	; 0x03
    6d38:	22 82       	std	Z+2, r2	; 0x02
    6d3a:	ee cf       	rjmp	.-36     	; 0x6d18 <normalize+0x80>
    6d3c:	f7 01       	movw	r30, r14
    6d3e:	84 81       	ldd	r24, Z+4	; 0x04
    6d40:	95 81       	ldd	r25, Z+5	; 0x05
    6d42:	88 31       	cpi	r24, 0x18	; 24
    6d44:	91 05       	cpc	r25, r1
    6d46:	5c f0       	brlt	.+22     	; 0x6d5e <normalize+0xc6>
    6d48:	f7 01       	movw	r30, r14
    6d4a:	26 81       	ldd	r18, Z+6	; 0x06
    6d4c:	37 81       	ldd	r19, Z+7	; 0x07
    6d4e:	2f 5f       	subi	r18, 0xFF	; 255
    6d50:	3f 4f       	sbci	r19, 0xFF	; 255
    6d52:	37 83       	std	Z+7, r19	; 0x07
    6d54:	26 83       	std	Z+6, r18	; 0x06
    6d56:	48 97       	sbiw	r24, 0x18	; 24
    6d58:	95 83       	std	Z+5, r25	; 0x05
    6d5a:	84 83       	std	Z+4, r24	; 0x04
    6d5c:	ef cf       	rjmp	.-34     	; 0x6d3c <normalize+0xa4>
    6d5e:	f7 01       	movw	r30, r14
    6d60:	04 81       	ldd	r16, Z+4	; 0x04
    6d62:	15 81       	ldd	r17, Z+5	; 0x05
    6d64:	17 ff       	sbrs	r17, 7
    6d66:	0b c0       	rjmp	.+22     	; 0x6d7e <normalize+0xe6>
    6d68:	f7 01       	movw	r30, r14
    6d6a:	86 81       	ldd	r24, Z+6	; 0x06
    6d6c:	97 81       	ldd	r25, Z+7	; 0x07
    6d6e:	01 97       	sbiw	r24, 0x01	; 1
    6d70:	97 83       	std	Z+7, r25	; 0x07
    6d72:	86 83       	std	Z+6, r24	; 0x06
    6d74:	08 5e       	subi	r16, 0xE8	; 232
    6d76:	1f 4f       	sbci	r17, 0xFF	; 255
    6d78:	15 83       	std	Z+5, r17	; 0x05
    6d7a:	04 83       	std	Z+4, r16	; 0x04
    6d7c:	f0 cf       	rjmp	.-32     	; 0x6d5e <normalize+0xc6>
    6d7e:	f7 01       	movw	r30, r14
    6d80:	80 85       	ldd	r24, Z+8	; 0x08
    6d82:	91 85       	ldd	r25, Z+9	; 0x09
    6d84:	8c 30       	cpi	r24, 0x0C	; 12
    6d86:	91 05       	cpc	r25, r1
    6d88:	5c f0       	brlt	.+22     	; 0x6da0 <normalize+0x108>
    6d8a:	f7 01       	movw	r30, r14
    6d8c:	22 85       	ldd	r18, Z+10	; 0x0a
    6d8e:	33 85       	ldd	r19, Z+11	; 0x0b
    6d90:	2f 5f       	subi	r18, 0xFF	; 255
    6d92:	3f 4f       	sbci	r19, 0xFF	; 255
    6d94:	33 87       	std	Z+11, r19	; 0x0b
    6d96:	22 87       	std	Z+10, r18	; 0x0a
    6d98:	0c 97       	sbiw	r24, 0x0c	; 12
    6d9a:	91 87       	std	Z+9, r25	; 0x09
    6d9c:	80 87       	std	Z+8, r24	; 0x08
    6d9e:	ef cf       	rjmp	.-34     	; 0x6d7e <normalize+0xe6>
    6da0:	f7 01       	movw	r30, r14
    6da2:	80 85       	ldd	r24, Z+8	; 0x08
    6da4:	91 85       	ldd	r25, Z+9	; 0x09
    6da6:	97 ff       	sbrs	r25, 7
    6da8:	2d c0       	rjmp	.+90     	; 0x6e04 <normalize+0x16c>
    6daa:	f7 01       	movw	r30, r14
    6dac:	22 85       	ldd	r18, Z+10	; 0x0a
    6dae:	33 85       	ldd	r19, Z+11	; 0x0b
    6db0:	21 50       	subi	r18, 0x01	; 1
    6db2:	31 09       	sbc	r19, r1
    6db4:	33 87       	std	Z+11, r19	; 0x0b
    6db6:	22 87       	std	Z+10, r18	; 0x0a
    6db8:	0c 96       	adiw	r24, 0x0c	; 12
    6dba:	91 87       	std	Z+9, r25	; 0x09
    6dbc:	80 87       	std	Z+8, r24	; 0x08
    6dbe:	f0 cf       	rjmp	.-32     	; 0x6da0 <normalize+0x108>
    6dc0:	f7 01       	movw	r30, r14
    6dc2:	c6 80       	ldd	r12, Z+6	; 0x06
    6dc4:	d7 80       	ldd	r13, Z+7	; 0x07
    6dc6:	a0 84       	ldd	r10, Z+8	; 0x08
    6dc8:	b1 84       	ldd	r11, Z+9	; 0x09
    6dca:	b4 01       	movw	r22, r8
    6dcc:	c5 01       	movw	r24, r10
    6dce:	59 dd       	rcall	.-1358   	; 0x6882 <Days_Per_Month>
    6dd0:	8c 15       	cp	r24, r12
    6dd2:	9d 05       	cpc	r25, r13
    6dd4:	84 f5       	brge	.+96     	; 0x6e36 <normalize+0x19e>
    6dd6:	c8 1a       	sub	r12, r24
    6dd8:	d9 0a       	sbc	r13, r25
    6dda:	f7 01       	movw	r30, r14
    6ddc:	d7 82       	std	Z+7, r13	; 0x07
    6dde:	c6 82       	std	Z+6, r12	; 0x06
    6de0:	c5 01       	movw	r24, r10
    6de2:	01 96       	adiw	r24, 0x01	; 1
    6de4:	91 87       	std	Z+9, r25	; 0x09
    6de6:	80 87       	std	Z+8, r24	; 0x08
    6de8:	0c 97       	sbiw	r24, 0x0c	; 12
    6dea:	54 f3       	brlt	.-44     	; 0x6dc0 <normalize+0x128>
    6dec:	fb e0       	ldi	r31, 0x0B	; 11
    6dee:	af 1a       	sub	r10, r31
    6df0:	b1 08       	sbc	r11, r1
    6df2:	f7 01       	movw	r30, r14
    6df4:	b1 86       	std	Z+9, r11	; 0x09
    6df6:	a0 86       	std	Z+8, r10	; 0x08
    6df8:	ff ef       	ldi	r31, 0xFF	; 255
    6dfa:	8f 1a       	sub	r8, r31
    6dfc:	9f 0a       	sbc	r9, r31
    6dfe:	f7 01       	movw	r30, r14
    6e00:	93 86       	std	Z+11, r9	; 0x0b
    6e02:	82 86       	std	Z+10, r8	; 0x0a
    6e04:	f7 01       	movw	r30, r14
    6e06:	82 84       	ldd	r8, Z+10	; 0x0a
    6e08:	93 84       	ldd	r9, Z+11	; 0x0b
    6e0a:	da cf       	rjmp	.-76     	; 0x6dc0 <normalize+0x128>
    6e0c:	f7 01       	movw	r30, r14
    6e0e:	80 85       	ldd	r24, Z+8	; 0x08
    6e10:	91 85       	ldd	r25, Z+9	; 0x09
    6e12:	9c 01       	movw	r18, r24
    6e14:	21 50       	subi	r18, 0x01	; 1
    6e16:	31 09       	sbc	r19, r1
    6e18:	37 fd       	sbrc	r19, 7
    6e1a:	16 c0       	rjmp	.+44     	; 0x6e48 <normalize+0x1b0>
    6e1c:	31 87       	std	Z+9, r19	; 0x09
    6e1e:	20 87       	std	Z+8, r18	; 0x08
    6e20:	f7 01       	movw	r30, r14
    6e22:	62 85       	ldd	r22, Z+10	; 0x0a
    6e24:	73 85       	ldd	r23, Z+11	; 0x0b
    6e26:	80 85       	ldd	r24, Z+8	; 0x08
    6e28:	91 85       	ldd	r25, Z+9	; 0x09
    6e2a:	2b dd       	rcall	.-1450   	; 0x6882 <Days_Per_Month>
    6e2c:	88 0d       	add	r24, r8
    6e2e:	99 1d       	adc	r25, r9
    6e30:	f7 01       	movw	r30, r14
    6e32:	97 83       	std	Z+7, r25	; 0x07
    6e34:	86 83       	std	Z+6, r24	; 0x06
    6e36:	f7 01       	movw	r30, r14
    6e38:	86 80       	ldd	r8, Z+6	; 0x06
    6e3a:	97 80       	ldd	r9, Z+7	; 0x07
    6e3c:	a2 84       	ldd	r10, Z+10	; 0x0a
    6e3e:	b3 84       	ldd	r11, Z+11	; 0x0b
    6e40:	18 14       	cp	r1, r8
    6e42:	19 04       	cpc	r1, r9
    6e44:	1c f7       	brge	.-58     	; 0x6e0c <normalize+0x174>
    6e46:	0b c0       	rjmp	.+22     	; 0x6e5e <normalize+0x1c6>
    6e48:	0b 96       	adiw	r24, 0x0b	; 11
    6e4a:	f7 01       	movw	r30, r14
    6e4c:	91 87       	std	Z+9, r25	; 0x09
    6e4e:	80 87       	std	Z+8, r24	; 0x08
    6e50:	f1 e0       	ldi	r31, 0x01	; 1
    6e52:	af 1a       	sub	r10, r31
    6e54:	b1 08       	sbc	r11, r1
    6e56:	f7 01       	movw	r30, r14
    6e58:	b3 86       	std	Z+11, r11	; 0x0b
    6e5a:	a2 86       	std	Z+10, r10	; 0x0a
    6e5c:	e1 cf       	rjmp	.-62     	; 0x6e20 <normalize+0x188>
    6e5e:	a5 01       	movw	r20, r10
    6e60:	44 59       	subi	r20, 0x94	; 148
    6e62:	58 4f       	sbci	r21, 0xF8	; 248
    6e64:	58 87       	std	Y+8, r21	; 0x08
    6e66:	4f 83       	std	Y+7, r20	; 0x07
    6e68:	35 01       	movw	r6, r10
    6e6a:	56 e4       	ldi	r21, 0x46	; 70
    6e6c:	65 1a       	sub	r6, r21
    6e6e:	71 08       	sbc	r7, r1
    6e70:	89 e8       	ldi	r24, 0x89	; 137
    6e72:	68 16       	cp	r6, r24
    6e74:	71 04       	cpc	r7, r1
    6e76:	08 f0       	brcs	.+2      	; 0x6e7a <normalize+0x1e2>
    6e78:	9b c0       	rjmp	.+310    	; 0x6fb0 <normalize+0x318>
    6e7a:	c0 84       	ldd	r12, Z+8	; 0x08
    6e7c:	d1 84       	ldd	r13, Z+9	; 0x09
    6e7e:	9c e0       	ldi	r25, 0x0C	; 12
    6e80:	c9 16       	cp	r12, r25
    6e82:	d1 04       	cpc	r13, r1
    6e84:	08 f0       	brcs	.+2      	; 0x6e88 <normalize+0x1f0>
    6e86:	94 c0       	rjmp	.+296    	; 0x6fb0 <normalize+0x318>
    6e88:	24 01       	movw	r4, r8
    6e8a:	e1 e0       	ldi	r30, 0x01	; 1
    6e8c:	4e 1a       	sub	r4, r30
    6e8e:	51 08       	sbc	r5, r1
    6e90:	6f 81       	ldd	r22, Y+7	; 0x07
    6e92:	78 85       	ldd	r23, Y+8	; 0x08
    6e94:	c6 01       	movw	r24, r12
    6e96:	f5 dc       	rcall	.-1558   	; 0x6882 <Days_Per_Month>
    6e98:	48 16       	cp	r4, r24
    6e9a:	59 06       	cpc	r5, r25
    6e9c:	0c f0       	brlt	.+2      	; 0x6ea0 <normalize+0x208>
    6e9e:	88 c0       	rjmp	.+272    	; 0x6fb0 <normalize+0x318>
    6ea0:	08 31       	cpi	r16, 0x18	; 24
    6ea2:	11 05       	cpc	r17, r1
    6ea4:	0c f0       	brlt	.+2      	; 0x6ea8 <normalize+0x210>
    6ea6:	84 c0       	rjmp	.+264    	; 0x6fb0 <normalize+0x318>
    6ea8:	fc e3       	ldi	r31, 0x3C	; 60
    6eaa:	2f 16       	cp	r2, r31
    6eac:	31 04       	cpc	r3, r1
    6eae:	0c f0       	brlt	.+2      	; 0x6eb2 <normalize+0x21a>
    6eb0:	7f c0       	rjmp	.+254    	; 0x6fb0 <normalize+0x318>
    6eb2:	4d 81       	ldd	r20, Y+5	; 0x05
    6eb4:	5e 81       	ldd	r21, Y+6	; 0x06
    6eb6:	4c 33       	cpi	r20, 0x3C	; 60
    6eb8:	51 05       	cpc	r21, r1
    6eba:	0c f0       	brlt	.+2      	; 0x6ebe <normalize+0x226>
    6ebc:	79 c0       	rjmp	.+242    	; 0x6fb0 <normalize+0x318>
    6ebe:	2d e6       	ldi	r18, 0x6D	; 109
    6ec0:	31 e0       	ldi	r19, 0x01	; 1
    6ec2:	d3 01       	movw	r26, r6
    6ec4:	0e 94 32 e2 	call	0x1c464	; 0x1c464 <__usmulhisi3>
    6ec8:	f6 01       	movw	r30, r12
    6eca:	ee 0f       	add	r30, r30
    6ecc:	ff 1f       	adc	r31, r31
    6ece:	e0 56       	subi	r30, 0x60	; 96
    6ed0:	fc 4f       	sbci	r31, 0xFC	; 252
    6ed2:	20 81       	ld	r18, Z
    6ed4:	31 81       	ldd	r19, Z+1	; 0x01
    6ed6:	dc 01       	movw	r26, r24
    6ed8:	cb 01       	movw	r24, r22
    6eda:	82 0f       	add	r24, r18
    6edc:	93 1f       	adc	r25, r19
    6ede:	a1 1d       	adc	r26, r1
    6ee0:	b1 1d       	adc	r27, r1
    6ee2:	05 2c       	mov	r0, r5
    6ee4:	00 0c       	add	r0, r0
    6ee6:	66 08       	sbc	r6, r6
    6ee8:	77 08       	sbc	r7, r7
    6eea:	48 0e       	add	r4, r24
    6eec:	59 1e       	adc	r5, r25
    6eee:	6a 1e       	adc	r6, r26
    6ef0:	7b 1e       	adc	r7, r27
    6ef2:	1a 14       	cp	r1, r10
    6ef4:	1b 04       	cpc	r1, r11
    6ef6:	1c f4       	brge	.+6      	; 0x6efe <normalize+0x266>
    6ef8:	51 e0       	ldi	r21, 0x01	; 1
    6efa:	a5 1a       	sub	r10, r21
    6efc:	b1 08       	sbc	r11, r1
    6efe:	45 01       	movw	r8, r10
    6f00:	95 94       	asr	r9
    6f02:	87 94       	ror	r8
    6f04:	95 94       	asr	r9
    6f06:	87 94       	ror	r8
    6f08:	88 ec       	ldi	r24, 0xC8	; 200
    6f0a:	a8 16       	cp	r10, r24
    6f0c:	b1 04       	cpc	r11, r1
    6f0e:	1c f0       	brlt	.+6      	; 0x6f16 <normalize+0x27e>
    6f10:	91 e0       	ldi	r25, 0x01	; 1
    6f12:	89 1a       	sub	r8, r25
    6f14:	91 08       	sbc	r9, r1
    6f16:	09 2c       	mov	r0, r9
    6f18:	00 0c       	add	r0, r0
    6f1a:	aa 08       	sbc	r10, r10
    6f1c:	bb 08       	sbc	r11, r11
    6f1e:	84 0c       	add	r8, r4
    6f20:	95 1c       	adc	r9, r5
    6f22:	a6 1c       	adc	r10, r6
    6f24:	b7 1c       	adc	r11, r7
    6f26:	24 01       	movw	r4, r8
    6f28:	35 01       	movw	r6, r10
    6f2a:	e1 e1       	ldi	r30, 0x11	; 17
    6f2c:	4e 1a       	sub	r4, r30
    6f2e:	51 08       	sbc	r5, r1
    6f30:	61 08       	sbc	r6, r1
    6f32:	71 08       	sbc	r7, r1
    6f34:	f2 e0       	ldi	r31, 0x02	; 2
    6f36:	cf 16       	cp	r12, r31
    6f38:	d1 04       	cpc	r13, r1
    6f3a:	64 f0       	brlt	.+24     	; 0x6f54 <normalize+0x2bc>
    6f3c:	8f 81       	ldd	r24, Y+7	; 0x07
    6f3e:	98 85       	ldd	r25, Y+8	; 0x08
    6f40:	7b dc       	rcall	.-1802   	; 0x6838 <IS_Leap>
    6f42:	89 2b       	or	r24, r25
    6f44:	39 f0       	breq	.+14     	; 0x6f54 <normalize+0x2bc>
    6f46:	24 01       	movw	r4, r8
    6f48:	35 01       	movw	r6, r10
    6f4a:	40 e1       	ldi	r20, 0x10	; 16
    6f4c:	44 1a       	sub	r4, r20
    6f4e:	51 08       	sbc	r5, r1
    6f50:	61 08       	sbc	r6, r1
    6f52:	71 08       	sbc	r7, r1
    6f54:	a8 e1       	ldi	r26, 0x18	; 24
    6f56:	b0 e0       	ldi	r27, 0x00	; 0
    6f58:	a3 01       	movw	r20, r6
    6f5a:	92 01       	movw	r18, r4
    6f5c:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    6f60:	01 2e       	mov	r0, r17
    6f62:	00 0c       	add	r0, r0
    6f64:	22 0b       	sbc	r18, r18
    6f66:	33 0b       	sbc	r19, r19
    6f68:	a9 01       	movw	r20, r18
    6f6a:	98 01       	movw	r18, r16
    6f6c:	26 0f       	add	r18, r22
    6f6e:	37 1f       	adc	r19, r23
    6f70:	48 1f       	adc	r20, r24
    6f72:	59 1f       	adc	r21, r25
    6f74:	ac e3       	ldi	r26, 0x3C	; 60
    6f76:	b0 e0       	ldi	r27, 0x00	; 0
    6f78:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    6f7c:	81 01       	movw	r16, r2
    6f7e:	03 2c       	mov	r0, r3
    6f80:	00 0c       	add	r0, r0
    6f82:	22 0b       	sbc	r18, r18
    6f84:	33 0b       	sbc	r19, r19
    6f86:	a9 01       	movw	r20, r18
    6f88:	98 01       	movw	r18, r16
    6f8a:	26 0f       	add	r18, r22
    6f8c:	37 1f       	adc	r19, r23
    6f8e:	48 1f       	adc	r20, r24
    6f90:	59 1f       	adc	r21, r25
    6f92:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    6f96:	ed 81       	ldd	r30, Y+5	; 0x05
    6f98:	fe 81       	ldd	r31, Y+6	; 0x06
    6f9a:	8f 01       	movw	r16, r30
    6f9c:	ff 0f       	add	r31, r31
    6f9e:	22 0b       	sbc	r18, r18
    6fa0:	33 0b       	sbc	r19, r19
    6fa2:	48 01       	movw	r8, r16
    6fa4:	59 01       	movw	r10, r18
    6fa6:	86 0e       	add	r8, r22
    6fa8:	97 1e       	adc	r9, r23
    6faa:	a8 1e       	adc	r10, r24
    6fac:	b9 1e       	adc	r11, r25
    6fae:	04 c0       	rjmp	.+8      	; 0x6fb8 <normalize+0x320>
    6fb0:	88 24       	eor	r8, r8
    6fb2:	8a 94       	dec	r8
    6fb4:	98 2c       	mov	r9, r8
    6fb6:	54 01       	movw	r10, r8
    6fb8:	49 85       	ldd	r20, Y+9	; 0x09
    6fba:	5a 85       	ldd	r21, Y+10	; 0x0a
    6fbc:	45 2b       	or	r20, r21
    6fbe:	e9 f0       	breq	.+58     	; 0x6ffa <normalize+0x362>
    6fc0:	ce 01       	movw	r24, r28
    6fc2:	01 96       	adiw	r24, 0x01	; 1
    6fc4:	7d dd       	rcall	.-1286   	; 0x6ac0 <gettimezone>
    6fc6:	a9 81       	ldd	r26, Y+1	; 0x01
    6fc8:	ba 81       	ldd	r27, Y+2	; 0x02
    6fca:	2c e3       	ldi	r18, 0x3C	; 60
    6fcc:	30 e0       	ldi	r19, 0x00	; 0
    6fce:	0e 94 32 e2 	call	0x1c464	; 0x1c464 <__usmulhisi3>
    6fd2:	2b 01       	movw	r4, r22
    6fd4:	3c 01       	movw	r6, r24
    6fd6:	c5 01       	movw	r24, r10
    6fd8:	b4 01       	movw	r22, r8
    6fda:	e2 dd       	rcall	.-1084   	; 0x6ba0 <is_dst>
    6fdc:	89 2b       	or	r24, r25
    6fde:	51 f0       	breq	.+20     	; 0x6ff4 <normalize+0x35c>
    6fe0:	50 e1       	ldi	r21, 0x10	; 16
    6fe2:	45 1a       	sub	r4, r21
    6fe4:	5e e0       	ldi	r21, 0x0E	; 14
    6fe6:	55 0a       	sbc	r5, r21
    6fe8:	61 08       	sbc	r6, r1
    6fea:	71 08       	sbc	r7, r1
    6fec:	cc 24       	eor	r12, r12
    6fee:	c3 94       	inc	r12
    6ff0:	d1 2c       	mov	r13, r1
    6ff2:	08 c0       	rjmp	.+16     	; 0x7004 <normalize+0x36c>
    6ff4:	c1 2c       	mov	r12, r1
    6ff6:	d1 2c       	mov	r13, r1
    6ff8:	05 c0       	rjmp	.+10     	; 0x7004 <normalize+0x36c>
    6ffa:	c1 2c       	mov	r12, r1
    6ffc:	d1 2c       	mov	r13, r1
    6ffe:	41 2c       	mov	r4, r1
    7000:	51 2c       	mov	r5, r1
    7002:	32 01       	movw	r6, r4
    7004:	87 01       	movw	r16, r14
    7006:	a3 01       	movw	r20, r6
    7008:	92 01       	movw	r18, r4
    700a:	c5 01       	movw	r24, r10
    700c:	b4 01       	movw	r22, r8
    700e:	5a dc       	rcall	.-1868   	; 0x68c4 <time_to_tm>
    7010:	c1 14       	cp	r12, r1
    7012:	d1 04       	cpc	r13, r1
    7014:	29 f0       	breq	.+10     	; 0x7020 <normalize+0x388>
    7016:	21 e0       	ldi	r18, 0x01	; 1
    7018:	30 e0       	ldi	r19, 0x00	; 0
    701a:	f7 01       	movw	r30, r14
    701c:	31 8b       	std	Z+17, r19	; 0x11
    701e:	20 8b       	std	Z+16, r18	; 0x10
    7020:	2a 96       	adiw	r28, 0x0a	; 10
    7022:	e2 e1       	ldi	r30, 0x12	; 18
    7024:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00007028 <timegm>:
    7028:	60 e0       	ldi	r22, 0x00	; 0
    702a:	70 e0       	ldi	r23, 0x00	; 0
    702c:	35 ce       	rjmp	.-918    	; 0x6c98 <normalize>
    702e:	08 95       	ret

00007030 <setdate_r>:
    7030:	cf 92       	push	r12
    7032:	df 92       	push	r13
    7034:	ef 92       	push	r14
    7036:	ff 92       	push	r15
    7038:	cf 93       	push	r28
    703a:	df 93       	push	r29
    703c:	cd b7       	in	r28, 0x3d	; 61
    703e:	de b7       	in	r29, 0x3e	; 62
    7040:	a5 97       	sbiw	r28, 0x25	; 37
    7042:	0f b6       	in	r0, 0x3f	; 63
    7044:	f8 94       	cli
    7046:	de bf       	out	0x3e, r29	; 62
    7048:	0f be       	out	0x3f, r0	; 63
    704a:	cd bf       	out	0x3d, r28	; 61
    704c:	9d a3       	std	Y+37, r25	; 0x25
    704e:	8c a3       	std	Y+36, r24	; 0x24
    7050:	1f 82       	std	Y+7, r1	; 0x07
    7052:	1e 82       	std	Y+6, r1	; 0x06
    7054:	19 86       	std	Y+9, r1	; 0x09
    7056:	18 86       	std	Y+8, r1	; 0x08
    7058:	1b 86       	std	Y+11, r1	; 0x0b
    705a:	1a 86       	std	Y+10, r1	; 0x0a
    705c:	1d 86       	std	Y+13, r1	; 0x0d
    705e:	1c 86       	std	Y+12, r1	; 0x0c
    7060:	1f 86       	std	Y+15, r1	; 0x0f
    7062:	1e 86       	std	Y+14, r1	; 0x0e
    7064:	19 8a       	std	Y+17, r1	; 0x11
    7066:	18 8a       	std	Y+16, r1	; 0x10
    7068:	8c a1       	ldd	r24, Y+36	; 0x24
    706a:	9d a1       	ldd	r25, Y+37	; 0x25
    706c:	fc 01       	movw	r30, r24
    706e:	20 81       	ld	r18, Z
    7070:	20 32       	cpi	r18, 0x20	; 32
    7072:	21 f4       	brne	.+8      	; 0x707c <setdate_r+0x4c>
    7074:	01 96       	adiw	r24, 0x01	; 1
    7076:	9d a3       	std	Y+37, r25	; 0x25
    7078:	8c a3       	std	Y+36, r24	; 0x24
    707a:	f6 cf       	rjmp	.-20     	; 0x7068 <setdate_r+0x38>
    707c:	4a e0       	ldi	r20, 0x0A	; 10
    707e:	50 e0       	ldi	r21, 0x00	; 0
    7080:	be 01       	movw	r22, r28
    7082:	6c 5d       	subi	r22, 0xDC	; 220
    7084:	7f 4f       	sbci	r23, 0xFF	; 255
    7086:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
    708a:	79 8b       	std	Y+17, r23	; 0x11
    708c:	68 8b       	std	Y+16, r22	; 0x10
    708e:	8c a1       	ldd	r24, Y+36	; 0x24
    7090:	9d a1       	ldd	r25, Y+37	; 0x25
    7092:	fc 01       	movw	r30, r24
    7094:	20 81       	ld	r18, Z
    7096:	20 32       	cpi	r18, 0x20	; 32
    7098:	21 f4       	brne	.+8      	; 0x70a2 <setdate_r+0x72>
    709a:	01 96       	adiw	r24, 0x01	; 1
    709c:	9d a3       	std	Y+37, r25	; 0x25
    709e:	8c a3       	std	Y+36, r24	; 0x24
    70a0:	f6 cf       	rjmp	.-20     	; 0x708e <setdate_r+0x5e>
    70a2:	4a e0       	ldi	r20, 0x0A	; 10
    70a4:	50 e0       	ldi	r21, 0x00	; 0
    70a6:	be 01       	movw	r22, r28
    70a8:	6c 5d       	subi	r22, 0xDC	; 220
    70aa:	7f 4f       	sbci	r23, 0xFF	; 255
    70ac:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
    70b0:	7f 87       	std	Y+15, r23	; 0x0f
    70b2:	6e 87       	std	Y+14, r22	; 0x0e
    70b4:	8c a1       	ldd	r24, Y+36	; 0x24
    70b6:	9d a1       	ldd	r25, Y+37	; 0x25
    70b8:	fc 01       	movw	r30, r24
    70ba:	20 81       	ld	r18, Z
    70bc:	20 32       	cpi	r18, 0x20	; 32
    70be:	21 f4       	brne	.+8      	; 0x70c8 <setdate_r+0x98>
    70c0:	01 96       	adiw	r24, 0x01	; 1
    70c2:	9d a3       	std	Y+37, r25	; 0x25
    70c4:	8c a3       	std	Y+36, r24	; 0x24
    70c6:	f6 cf       	rjmp	.-20     	; 0x70b4 <setdate_r+0x84>
    70c8:	4a e0       	ldi	r20, 0x0A	; 10
    70ca:	50 e0       	ldi	r21, 0x00	; 0
    70cc:	be 01       	movw	r22, r28
    70ce:	6c 5d       	subi	r22, 0xDC	; 220
    70d0:	7f 4f       	sbci	r23, 0xFF	; 255
    70d2:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
    70d6:	7d 87       	std	Y+13, r23	; 0x0d
    70d8:	6c 87       	std	Y+12, r22	; 0x0c
    70da:	8c a1       	ldd	r24, Y+36	; 0x24
    70dc:	9d a1       	ldd	r25, Y+37	; 0x25
    70de:	fc 01       	movw	r30, r24
    70e0:	20 81       	ld	r18, Z
    70e2:	20 32       	cpi	r18, 0x20	; 32
    70e4:	21 f4       	brne	.+8      	; 0x70ee <setdate_r+0xbe>
    70e6:	01 96       	adiw	r24, 0x01	; 1
    70e8:	9d a3       	std	Y+37, r25	; 0x25
    70ea:	8c a3       	std	Y+36, r24	; 0x24
    70ec:	f6 cf       	rjmp	.-20     	; 0x70da <setdate_r+0xaa>
    70ee:	4a e0       	ldi	r20, 0x0A	; 10
    70f0:	50 e0       	ldi	r21, 0x00	; 0
    70f2:	be 01       	movw	r22, r28
    70f4:	6c 5d       	subi	r22, 0xDC	; 220
    70f6:	7f 4f       	sbci	r23, 0xFF	; 255
    70f8:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
    70fc:	7b 87       	std	Y+11, r23	; 0x0b
    70fe:	6a 87       	std	Y+10, r22	; 0x0a
    7100:	ec a1       	ldd	r30, Y+36	; 0x24
    7102:	fd a1       	ldd	r31, Y+37	; 0x25
    7104:	80 81       	ld	r24, Z
    7106:	88 23       	and	r24, r24
    7108:	39 f0       	breq	.+14     	; 0x7118 <setdate_r+0xe8>
    710a:	80 32       	cpi	r24, 0x20	; 32
    710c:	11 f0       	breq	.+4      	; 0x7112 <setdate_r+0xe2>
    710e:	8a 33       	cpi	r24, 0x3A	; 58
    7110:	19 f4       	brne	.+6      	; 0x7118 <setdate_r+0xe8>
    7112:	31 96       	adiw	r30, 0x01	; 1
    7114:	fd a3       	std	Y+37, r31	; 0x25
    7116:	ec a3       	std	Y+36, r30	; 0x24
    7118:	4a e0       	ldi	r20, 0x0A	; 10
    711a:	50 e0       	ldi	r21, 0x00	; 0
    711c:	be 01       	movw	r22, r28
    711e:	6c 5d       	subi	r22, 0xDC	; 220
    7120:	7f 4f       	sbci	r23, 0xFF	; 255
    7122:	8c a1       	ldd	r24, Y+36	; 0x24
    7124:	9d a1       	ldd	r25, Y+37	; 0x25
    7126:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
    712a:	79 87       	std	Y+9, r23	; 0x09
    712c:	68 87       	std	Y+8, r22	; 0x08
    712e:	ec a1       	ldd	r30, Y+36	; 0x24
    7130:	fd a1       	ldd	r31, Y+37	; 0x25
    7132:	80 81       	ld	r24, Z
    7134:	88 23       	and	r24, r24
    7136:	39 f0       	breq	.+14     	; 0x7146 <setdate_r+0x116>
    7138:	80 32       	cpi	r24, 0x20	; 32
    713a:	11 f0       	breq	.+4      	; 0x7140 <setdate_r+0x110>
    713c:	8a 33       	cpi	r24, 0x3A	; 58
    713e:	19 f4       	brne	.+6      	; 0x7146 <setdate_r+0x116>
    7140:	31 96       	adiw	r30, 0x01	; 1
    7142:	fd a3       	std	Y+37, r31	; 0x25
    7144:	ec a3       	std	Y+36, r30	; 0x24
    7146:	4a e0       	ldi	r20, 0x0A	; 10
    7148:	50 e0       	ldi	r21, 0x00	; 0
    714a:	be 01       	movw	r22, r28
    714c:	6c 5d       	subi	r22, 0xDC	; 220
    714e:	7f 4f       	sbci	r23, 0xFF	; 255
    7150:	8c a1       	ldd	r24, Y+36	; 0x24
    7152:	9d a1       	ldd	r25, Y+37	; 0x25
    7154:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
    7158:	7f 83       	std	Y+7, r23	; 0x07
    715a:	6e 83       	std	Y+6, r22	; 0x06
    715c:	2e 85       	ldd	r18, Y+14	; 0x0e
    715e:	3f 85       	ldd	r19, Y+15	; 0x0f
    7160:	21 50       	subi	r18, 0x01	; 1
    7162:	31 09       	sbc	r19, r1
    7164:	3f 87       	std	Y+15, r19	; 0x0f
    7166:	2e 87       	std	Y+14, r18	; 0x0e
    7168:	88 89       	ldd	r24, Y+16	; 0x10
    716a:	99 89       	ldd	r25, Y+17	; 0x11
    716c:	ac 01       	movw	r20, r24
    716e:	42 5b       	subi	r20, 0xB2	; 178
    7170:	57 40       	sbci	r21, 0x07	; 7
    7172:	45 34       	cpi	r20, 0x45	; 69
    7174:	51 05       	cpc	r21, r1
    7176:	38 f0       	brcs	.+14     	; 0x7186 <setdate_r+0x156>
    7178:	ed b7       	in	r30, 0x3d	; 61
    717a:	fe b7       	in	r31, 0x3e	; 62
    717c:	95 83       	std	Z+5, r25	; 0x05
    717e:	84 83       	std	Z+4, r24	; 0x04
    7180:	89 e1       	ldi	r24, 0x19	; 25
    7182:	97 e0       	ldi	r25, 0x07	; 7
    7184:	34 c0       	rjmp	.+104    	; 0x71ee <setdate_r+0x1be>
    7186:	8c 56       	subi	r24, 0x6C	; 108
    7188:	97 40       	sbci	r25, 0x07	; 7
    718a:	99 8b       	std	Y+17, r25	; 0x11
    718c:	88 8b       	std	Y+16, r24	; 0x10
    718e:	2c 30       	cpi	r18, 0x0C	; 12
    7190:	31 05       	cpc	r19, r1
    7192:	38 f0       	brcs	.+14     	; 0x71a2 <setdate_r+0x172>
    7194:	ed b7       	in	r30, 0x3d	; 61
    7196:	fe b7       	in	r31, 0x3e	; 62
    7198:	95 83       	std	Z+5, r25	; 0x05
    719a:	84 83       	std	Z+4, r24	; 0x04
    719c:	88 e0       	ldi	r24, 0x08	; 8
    719e:	97 e0       	ldi	r25, 0x07	; 7
    71a0:	26 c0       	rjmp	.+76     	; 0x71ee <setdate_r+0x1be>
    71a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    71a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    71a6:	9c 01       	movw	r18, r24
    71a8:	21 50       	subi	r18, 0x01	; 1
    71aa:	31 09       	sbc	r19, r1
    71ac:	2f 31       	cpi	r18, 0x1F	; 31
    71ae:	31 05       	cpc	r19, r1
    71b0:	38 f0       	brcs	.+14     	; 0x71c0 <setdate_r+0x190>
    71b2:	ed b7       	in	r30, 0x3d	; 61
    71b4:	fe b7       	in	r31, 0x3e	; 62
    71b6:	95 83       	std	Z+5, r25	; 0x05
    71b8:	84 83       	std	Z+4, r24	; 0x04
    71ba:	87 ef       	ldi	r24, 0xF7	; 247
    71bc:	96 e0       	ldi	r25, 0x06	; 6
    71be:	17 c0       	rjmp	.+46     	; 0x71ee <setdate_r+0x1be>
    71c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    71c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    71c4:	88 31       	cpi	r24, 0x18	; 24
    71c6:	91 05       	cpc	r25, r1
    71c8:	38 f0       	brcs	.+14     	; 0x71d8 <setdate_r+0x1a8>
    71ca:	ed b7       	in	r30, 0x3d	; 61
    71cc:	fe b7       	in	r31, 0x3e	; 62
    71ce:	95 83       	std	Z+5, r25	; 0x05
    71d0:	84 83       	std	Z+4, r24	; 0x04
    71d2:	85 ee       	ldi	r24, 0xE5	; 229
    71d4:	96 e0       	ldi	r25, 0x06	; 6
    71d6:	0b c0       	rjmp	.+22     	; 0x71ee <setdate_r+0x1be>
    71d8:	88 85       	ldd	r24, Y+8	; 0x08
    71da:	99 85       	ldd	r25, Y+9	; 0x09
    71dc:	8c 33       	cpi	r24, 0x3C	; 60
    71de:	91 05       	cpc	r25, r1
    71e0:	68 f0       	brcs	.+26     	; 0x71fc <setdate_r+0x1cc>
    71e2:	ed b7       	in	r30, 0x3d	; 61
    71e4:	fe b7       	in	r31, 0x3e	; 62
    71e6:	95 83       	std	Z+5, r25	; 0x05
    71e8:	84 83       	std	Z+4, r24	; 0x04
    71ea:	84 ed       	ldi	r24, 0xD4	; 212
    71ec:	96 e0       	ldi	r25, 0x06	; 6
    71ee:	a0 e0       	ldi	r26, 0x00	; 0
    71f0:	81 83       	std	Z+1, r24	; 0x01
    71f2:	92 83       	std	Z+2, r25	; 0x02
    71f4:	a3 83       	std	Z+3, r26	; 0x03
    71f6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    71fa:	25 c0       	rjmp	.+74     	; 0x7246 <setdate_r+0x216>
    71fc:	ce 01       	movw	r24, r28
    71fe:	06 96       	adiw	r24, 0x06	; 6
    7200:	13 df       	rcall	.-474    	; 0x7028 <timegm>
    7202:	6b 01       	movw	r12, r22
    7204:	7c 01       	movw	r14, r24
    7206:	6c 8f       	std	Y+28, r22	; 0x1c
    7208:	7d 8f       	std	Y+29, r23	; 0x1d
    720a:	8e 8f       	std	Y+30, r24	; 0x1e
    720c:	9f 8f       	std	Y+31, r25	; 0x1f
    720e:	18 a2       	std	Y+32, r1	; 0x20
    7210:	19 a2       	std	Y+33, r1	; 0x21
    7212:	1a a2       	std	Y+34, r1	; 0x22
    7214:	1b a2       	std	Y+35, r1	; 0x23
    7216:	be 01       	movw	r22, r28
    7218:	64 5e       	subi	r22, 0xE4	; 228
    721a:	7f 4f       	sbci	r23, 0xFF	; 255
    721c:	80 e0       	ldi	r24, 0x00	; 0
    721e:	90 e0       	ldi	r25, 0x00	; 0
    7220:	03 db       	rcall	.-2554   	; 0x6828 <clock_settime>
    7222:	b7 01       	movw	r22, r14
    7224:	a6 01       	movw	r20, r12
    7226:	81 e0       	ldi	r24, 0x01	; 1
    7228:	90 e0       	ldi	r25, 0x00	; 0
    722a:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <rtc_init>
    722e:	81 11       	cpse	r24, r1
    7230:	0d c0       	rjmp	.+26     	; 0x724c <setdate_r+0x21c>
    7232:	8d eb       	ldi	r24, 0xBD	; 189
    7234:	96 e0       	ldi	r25, 0x06	; 6
    7236:	a0 e0       	ldi	r26, 0x00	; 0
    7238:	ed b7       	in	r30, 0x3d	; 61
    723a:	fe b7       	in	r31, 0x3e	; 62
    723c:	81 83       	std	Z+1, r24	; 0x01
    723e:	92 83       	std	Z+2, r25	; 0x02
    7240:	a3 83       	std	Z+3, r26	; 0x03
    7242:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    7246:	8f ef       	ldi	r24, 0xFF	; 255
    7248:	9f ef       	ldi	r25, 0xFF	; 255
    724a:	02 c0       	rjmp	.+4      	; 0x7250 <setdate_r+0x220>
    724c:	80 e0       	ldi	r24, 0x00	; 0
    724e:	90 e0       	ldi	r25, 0x00	; 0
    7250:	a5 96       	adiw	r28, 0x25	; 37
    7252:	0f b6       	in	r0, 0x3f	; 63
    7254:	f8 94       	cli
    7256:	de bf       	out	0x3e, r29	; 62
    7258:	0f be       	out	0x3f, r0	; 63
    725a:	cd bf       	out	0x3d, r28	; 61
    725c:	df 91       	pop	r29
    725e:	cf 91       	pop	r28
    7260:	ff 90       	pop	r15
    7262:	ef 90       	pop	r14
    7264:	df 90       	pop	r13
    7266:	cf 90       	pop	r12
    7268:	08 95       	ret

0000726a <setdate>:
    726a:	ab e2       	ldi	r26, 0x2B	; 43
    726c:	b0 e0       	ldi	r27, 0x00	; 0
    726e:	eb e3       	ldi	r30, 0x3B	; 59
    7270:	f9 e3       	ldi	r31, 0x39	; 57
    7272:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    7276:	8b e2       	ldi	r24, 0x2B	; 43
    7278:	97 e0       	ldi	r25, 0x07	; 7
    727a:	a0 e0       	ldi	r26, 0x00	; 0
    727c:	ed b7       	in	r30, 0x3d	; 61
    727e:	fe b7       	in	r31, 0x3e	; 62
    7280:	81 83       	std	Z+1, r24	; 0x01
    7282:	92 83       	std	Z+2, r25	; 0x02
    7284:	a3 83       	std	Z+3, r26	; 0x03
    7286:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    728a:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <__iob>
    728e:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <__iob+0x1>
    7292:	66 e2       	ldi	r22, 0x26	; 38
    7294:	70 e0       	ldi	r23, 0x00	; 0
    7296:	ce 01       	movw	r24, r28
    7298:	04 96       	adiw	r24, 0x04	; 4
    729a:	0e 94 09 75 	call	0xea12	; 0xea12 <fgets>
    729e:	ce 01       	movw	r24, r28
    72a0:	04 96       	adiw	r24, 0x04	; 4
    72a2:	c6 de       	rcall	.-628    	; 0x7030 <setdate_r>
    72a4:	ab 96       	adiw	r28, 0x2b	; 43
    72a6:	e2 e0       	ldi	r30, 0x02	; 2
    72a8:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000072ac <find_dst>:
    72ac:	a8 e2       	ldi	r26, 0x28	; 40
    72ae:	b0 e0       	ldi	r27, 0x00	; 0
    72b0:	ec e5       	ldi	r30, 0x5C	; 92
    72b2:	f9 e3       	ldi	r31, 0x39	; 57
    72b4:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    72b8:	3c 01       	movw	r6, r24
    72ba:	1a 01       	movw	r2, r20
    72bc:	2b 01       	movw	r4, r22
    72be:	49 01       	movw	r8, r18
    72c0:	1c a3       	std	Y+36, r17	; 0x24
    72c2:	0b a3       	std	Y+35, r16	; 0x23
    72c4:	de a2       	std	Y+38, r13	; 0x26
    72c6:	cd a2       	std	Y+37, r12	; 0x25
    72c8:	b8 a6       	std	Y+40, r11	; 0x28
    72ca:	af a2       	std	Y+39, r10	; 0x27
    72cc:	be 01       	movw	r22, r28
    72ce:	61 5e       	subi	r22, 0xE1	; 225
    72d0:	7f 4f       	sbci	r23, 0xFF	; 255
    72d2:	ce 01       	movw	r24, r28
    72d4:	47 96       	adiw	r24, 0x17	; 23
    72d6:	15 dc       	rcall	.-2006   	; 0x6b02 <gettimeofday>
    72d8:	af 8d       	ldd	r26, Y+31	; 0x1f
    72da:	b8 a1       	ldd	r27, Y+32	; 0x20
    72dc:	2c e3       	ldi	r18, 0x3C	; 60
    72de:	30 e0       	ldi	r19, 0x00	; 0
    72e0:	0e 94 32 e2 	call	0x1c464	; 0x1c464 <__usmulhisi3>
    72e4:	5b 01       	movw	r10, r22
    72e6:	6c 01       	movw	r12, r24
    72e8:	61 14       	cp	r6, r1
    72ea:	71 04       	cpc	r7, r1
    72ec:	31 f0       	breq	.+12     	; 0x72fa <find_dst+0x4e>
    72ee:	20 e1       	ldi	r18, 0x10	; 16
    72f0:	a2 1a       	sub	r10, r18
    72f2:	2e e0       	ldi	r18, 0x0E	; 14
    72f4:	b2 0a       	sbc	r11, r18
    72f6:	c1 08       	sbc	r12, r1
    72f8:	d1 08       	sbc	r13, r1
    72fa:	81 14       	cp	r8, r1
    72fc:	91 04       	cpc	r9, r1
    72fe:	39 f0       	breq	.+14     	; 0x730e <find_dst+0x62>
    7300:	4c e6       	ldi	r20, 0x6C	; 108
    7302:	84 1a       	sub	r8, r20
    7304:	47 e0       	ldi	r20, 0x07	; 7
    7306:	94 0a       	sbc	r9, r20
    7308:	9c 86       	std	Y+12, r9	; 0x0c
    730a:	8b 86       	std	Y+11, r8	; 0x0b
    730c:	11 c0       	rjmp	.+34     	; 0x7330 <find_dst+0x84>
    730e:	21 14       	cp	r2, r1
    7310:	31 04       	cpc	r3, r1
    7312:	41 04       	cpc	r4, r1
    7314:	51 04       	cpc	r5, r1
    7316:	21 f4       	brne	.+8      	; 0x7320 <find_dst+0x74>
    7318:	2f 88       	ldd	r2, Y+23	; 0x17
    731a:	38 8c       	ldd	r3, Y+24	; 0x18
    731c:	49 8c       	ldd	r4, Y+25	; 0x19
    731e:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7320:	8e 01       	movw	r16, r28
    7322:	0f 5f       	subi	r16, 0xFF	; 255
    7324:	1f 4f       	sbci	r17, 0xFF	; 255
    7326:	a6 01       	movw	r20, r12
    7328:	95 01       	movw	r18, r10
    732a:	c2 01       	movw	r24, r4
    732c:	b1 01       	movw	r22, r2
    732e:	ca da       	rcall	.-2668   	; 0x68c4 <time_to_tm>
    7330:	8b a1       	ldd	r24, Y+35	; 0x23
    7332:	9c a1       	ldd	r25, Y+36	; 0x24
    7334:	01 97       	sbiw	r24, 0x01	; 1
    7336:	9a 87       	std	Y+10, r25	; 0x0a
    7338:	89 87       	std	Y+9, r24	; 0x09
    733a:	81 e0       	ldi	r24, 0x01	; 1
    733c:	90 e0       	ldi	r25, 0x00	; 0
    733e:	98 87       	std	Y+8, r25	; 0x08
    7340:	8f 83       	std	Y+7, r24	; 0x07
    7342:	8f a1       	ldd	r24, Y+39	; 0x27
    7344:	98 a5       	ldd	r25, Y+40	; 0x28
    7346:	9e 83       	std	Y+6, r25	; 0x06
    7348:	8d 83       	std	Y+5, r24	; 0x05
    734a:	1c 82       	std	Y+4, r1	; 0x04
    734c:	1b 82       	std	Y+3, r1	; 0x03
    734e:	1a 82       	std	Y+2, r1	; 0x02
    7350:	19 82       	std	Y+1, r1	; 0x01
    7352:	ce 01       	movw	r24, r28
    7354:	01 96       	adiw	r24, 0x01	; 1
    7356:	68 de       	rcall	.-816    	; 0x7028 <timegm>
    7358:	45 01       	movw	r8, r10
    735a:	56 01       	movw	r10, r12
    735c:	86 0e       	add	r8, r22
    735e:	97 1e       	adc	r9, r23
    7360:	a8 1e       	adc	r10, r24
    7362:	b9 1e       	adc	r11, r25
    7364:	8e 01       	movw	r16, r28
    7366:	0f 5f       	subi	r16, 0xFF	; 255
    7368:	1f 4f       	sbci	r17, 0xFF	; 255
    736a:	20 e0       	ldi	r18, 0x00	; 0
    736c:	30 e0       	ldi	r19, 0x00	; 0
    736e:	a9 01       	movw	r20, r18
    7370:	c5 01       	movw	r24, r10
    7372:	b4 01       	movw	r22, r8
    7374:	a7 da       	rcall	.-2738   	; 0x68c4 <time_to_tm>
    7376:	2d 85       	ldd	r18, Y+13	; 0x0d
    7378:	3e 85       	ldd	r19, Y+14	; 0x0e
    737a:	e7 e0       	ldi	r30, 0x07	; 7
    737c:	f0 e0       	ldi	r31, 0x00	; 0
    737e:	c9 01       	movw	r24, r18
    7380:	bf 01       	movw	r22, r30
    7382:	0e 94 d8 e1 	call	0x1c3b0	; 0x1c3b0 <__divmodhi4>
    7386:	4d a1       	ldd	r20, Y+37	; 0x25
    7388:	5e a1       	ldd	r21, Y+38	; 0x26
    738a:	48 17       	cp	r20, r24
    738c:	59 07       	cpc	r21, r25
    738e:	21 f4       	brne	.+8      	; 0x7398 <find_dst+0xec>
    7390:	51 e0       	ldi	r21, 0x01	; 1
    7392:	e5 1a       	sub	r14, r21
    7394:	f1 08       	sbc	r15, r1
    7396:	51 f0       	breq	.+20     	; 0x73ac <find_dst+0x100>
    7398:	80 e8       	ldi	r24, 0x80	; 128
    739a:	88 0e       	add	r8, r24
    739c:	81 e5       	ldi	r24, 0x51	; 81
    739e:	98 1e       	adc	r9, r24
    73a0:	81 e0       	ldi	r24, 0x01	; 1
    73a2:	a8 1e       	adc	r10, r24
    73a4:	b1 1c       	adc	r11, r1
    73a6:	2f 5f       	subi	r18, 0xFF	; 255
    73a8:	3f 4f       	sbci	r19, 0xFF	; 255
    73aa:	e9 cf       	rjmp	.-46     	; 0x737e <find_dst+0xd2>
    73ac:	c5 01       	movw	r24, r10
    73ae:	b4 01       	movw	r22, r8
    73b0:	a8 96       	adiw	r28, 0x28	; 40
    73b2:	e2 e1       	ldi	r30, 0x12	; 18
    73b4:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

000073b8 <set_dst>:
    73b8:	4f 92       	push	r4
    73ba:	5f 92       	push	r5
    73bc:	6f 92       	push	r6
    73be:	7f 92       	push	r7
    73c0:	af 92       	push	r10
    73c2:	bf 92       	push	r11
    73c4:	cf 92       	push	r12
    73c6:	df 92       	push	r13
    73c8:	ef 92       	push	r14
    73ca:	ff 92       	push	r15
    73cc:	0f 93       	push	r16
    73ce:	1f 93       	push	r17
    73d0:	cf 93       	push	r28
    73d2:	df 93       	push	r29
    73d4:	cd b7       	in	r28, 0x3d	; 61
    73d6:	de b7       	in	r29, 0x3e	; 62
    73d8:	2c 97       	sbiw	r28, 0x0c	; 12
    73da:	0f b6       	in	r0, 0x3f	; 63
    73dc:	f8 94       	cli
    73de:	de bf       	out	0x3e, r29	; 62
    73e0:	0f be       	out	0x3f, r0	; 63
    73e2:	cd bf       	out	0x3d, r28	; 61
    73e4:	2b 01       	movw	r4, r22
    73e6:	3c 01       	movw	r6, r24
    73e8:	67 2b       	or	r22, r23
    73ea:	68 2b       	or	r22, r24
    73ec:	69 2b       	or	r22, r25
    73ee:	51 f4       	brne	.+20     	; 0x7404 <set_dst+0x4c>
    73f0:	be 01       	movw	r22, r28
    73f2:	67 5f       	subi	r22, 0xF7	; 247
    73f4:	7f 4f       	sbci	r23, 0xFF	; 255
    73f6:	ce 01       	movw	r24, r28
    73f8:	01 96       	adiw	r24, 0x01	; 1
    73fa:	83 db       	rcall	.-2298   	; 0x6b02 <gettimeofday>
    73fc:	49 80       	ldd	r4, Y+1	; 0x01
    73fe:	5a 80       	ldd	r5, Y+2	; 0x02
    7400:	6b 80       	ldd	r6, Y+3	; 0x03
    7402:	7c 80       	ldd	r7, Y+4	; 0x04
    7404:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <dst+0x8>
    7408:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <dst+0x9>
    740c:	a0 91 74 1a 	lds	r26, 0x1A74	; 0x801a74 <dst+0xa>
    7410:	b0 91 75 1a 	lds	r27, 0x1A75	; 0x801a75 <dst+0xb>
    7414:	84 15       	cp	r24, r4
    7416:	95 05       	cpc	r25, r5
    7418:	a6 05       	cpc	r26, r6
    741a:	b7 05       	cpc	r27, r7
    741c:	50 f0       	brcs	.+20     	; 0x7432 <set_dst+0x7a>
    741e:	84 19       	sub	r24, r4
    7420:	95 09       	sbc	r25, r5
    7422:	a6 09       	sbc	r26, r6
    7424:	b7 09       	sbc	r27, r7
    7426:	80 38       	cpi	r24, 0x80	; 128
    7428:	91 45       	sbci	r25, 0x51	; 81
    742a:	a1 40       	sbci	r26, 0x01	; 1
    742c:	b1 05       	cpc	r27, r1
    742e:	70 f4       	brcc	.+28     	; 0x744c <set_dst+0x94>
    7430:	42 c0       	rjmp	.+132    	; 0x74b6 <set_dst+0xfe>
    7432:	a3 01       	movw	r20, r6
    7434:	92 01       	movw	r18, r4
    7436:	28 1b       	sub	r18, r24
    7438:	39 0b       	sbc	r19, r25
    743a:	4a 0b       	sbc	r20, r26
    743c:	5b 0b       	sbc	r21, r27
    743e:	da 01       	movw	r26, r20
    7440:	c9 01       	movw	r24, r18
    7442:	80 38       	cpi	r24, 0x80	; 128
    7444:	91 45       	sbci	r25, 0x51	; 81
    7446:	a1 40       	sbci	r26, 0x01	; 1
    7448:	b1 05       	cpc	r27, r1
    744a:	a8 f1       	brcs	.+106    	; 0x74b6 <set_dst+0xfe>
    744c:	40 92 72 1a 	sts	0x1A72, r4	; 0x801a72 <dst+0x8>
    7450:	50 92 73 1a 	sts	0x1A73, r5	; 0x801a73 <dst+0x9>
    7454:	60 92 74 1a 	sts	0x1A74, r6	; 0x801a74 <dst+0xa>
    7458:	70 92 75 1a 	sts	0x1A75, r7	; 0x801a75 <dst+0xb>
    745c:	82 e0       	ldi	r24, 0x02	; 2
    745e:	a8 2e       	mov	r10, r24
    7460:	b1 2c       	mov	r11, r1
    7462:	c1 2c       	mov	r12, r1
    7464:	d1 2c       	mov	r13, r1
    7466:	92 e0       	ldi	r25, 0x02	; 2
    7468:	e9 2e       	mov	r14, r25
    746a:	f1 2c       	mov	r15, r1
    746c:	03 e0       	ldi	r16, 0x03	; 3
    746e:	10 e0       	ldi	r17, 0x00	; 0
    7470:	20 e0       	ldi	r18, 0x00	; 0
    7472:	30 e0       	ldi	r19, 0x00	; 0
    7474:	b3 01       	movw	r22, r6
    7476:	a2 01       	movw	r20, r4
    7478:	80 e0       	ldi	r24, 0x00	; 0
    747a:	90 e0       	ldi	r25, 0x00	; 0
    747c:	17 df       	rcall	.-466    	; 0x72ac <find_dst>
    747e:	60 93 6a 1a 	sts	0x1A6A, r22	; 0x801a6a <dst>
    7482:	70 93 6b 1a 	sts	0x1A6B, r23	; 0x801a6b <dst+0x1>
    7486:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <dst+0x2>
    748a:	90 93 6d 1a 	sts	0x1A6D, r25	; 0x801a6d <dst+0x3>
    748e:	ee 24       	eor	r14, r14
    7490:	e3 94       	inc	r14
    7492:	f1 2c       	mov	r15, r1
    7494:	0b e0       	ldi	r16, 0x0B	; 11
    7496:	10 e0       	ldi	r17, 0x00	; 0
    7498:	20 e0       	ldi	r18, 0x00	; 0
    749a:	30 e0       	ldi	r19, 0x00	; 0
    749c:	b3 01       	movw	r22, r6
    749e:	a2 01       	movw	r20, r4
    74a0:	81 e0       	ldi	r24, 0x01	; 1
    74a2:	90 e0       	ldi	r25, 0x00	; 0
    74a4:	03 df       	rcall	.-506    	; 0x72ac <find_dst>
    74a6:	60 93 6e 1a 	sts	0x1A6E, r22	; 0x801a6e <dst+0x4>
    74aa:	70 93 6f 1a 	sts	0x1A6F, r23	; 0x801a6f <dst+0x5>
    74ae:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <dst+0x6>
    74b2:	90 93 71 1a 	sts	0x1A71, r25	; 0x801a71 <dst+0x7>
    74b6:	2c 96       	adiw	r28, 0x0c	; 12
    74b8:	0f b6       	in	r0, 0x3f	; 63
    74ba:	f8 94       	cli
    74bc:	de bf       	out	0x3e, r29	; 62
    74be:	0f be       	out	0x3f, r0	; 63
    74c0:	cd bf       	out	0x3d, r28	; 61
    74c2:	df 91       	pop	r29
    74c4:	cf 91       	pop	r28
    74c6:	1f 91       	pop	r17
    74c8:	0f 91       	pop	r16
    74ca:	ff 90       	pop	r15
    74cc:	ef 90       	pop	r14
    74ce:	df 90       	pop	r13
    74d0:	cf 90       	pop	r12
    74d2:	bf 90       	pop	r11
    74d4:	af 90       	pop	r10
    74d6:	7f 90       	pop	r7
    74d8:	6f 90       	pop	r6
    74da:	5f 90       	pop	r5
    74dc:	4f 90       	pop	r4
    74de:	08 95       	ret

000074e0 <asctime_r>:
    74e0:	a5 e1       	ldi	r26, 0x15	; 21
    74e2:	b0 e0       	ldi	r27, 0x00	; 0
    74e4:	e6 e7       	ldi	r30, 0x76	; 118
    74e6:	fa e3       	ldi	r31, 0x3A	; 58
    74e8:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    74ec:	ec 01       	movw	r28, r24
    74ee:	8b 01       	movw	r16, r22
    74f0:	60 e0       	ldi	r22, 0x00	; 0
    74f2:	70 e0       	ldi	r23, 0x00	; 0
    74f4:	d1 db       	rcall	.-2142   	; 0x6c98 <normalize>
    74f6:	80 e2       	ldi	r24, 0x20	; 32
    74f8:	f8 01       	movw	r30, r16
    74fa:	11 92       	st	Z+, r1
    74fc:	8a 95       	dec	r24
    74fe:	e9 f7       	brne	.-6      	; 0x74fa <asctime_r+0x1a>
    7500:	8a 85       	ldd	r24, Y+10	; 0x0a
    7502:	9b 85       	ldd	r25, Y+11	; 0x0b
    7504:	84 59       	subi	r24, 0x94	; 148
    7506:	98 4f       	sbci	r25, 0xF8	; 248
    7508:	ed b7       	in	r30, 0x3d	; 61
    750a:	fe b7       	in	r31, 0x3e	; 62
    750c:	95 8b       	std	Z+21, r25	; 0x15
    750e:	84 8b       	std	Z+20, r24	; 0x14
    7510:	88 81       	ld	r24, Y
    7512:	99 81       	ldd	r25, Y+1	; 0x01
    7514:	93 8b       	std	Z+19, r25	; 0x13
    7516:	82 8b       	std	Z+18, r24	; 0x12
    7518:	8a 81       	ldd	r24, Y+2	; 0x02
    751a:	9b 81       	ldd	r25, Y+3	; 0x03
    751c:	91 8b       	std	Z+17, r25	; 0x11
    751e:	80 8b       	std	Z+16, r24	; 0x10
    7520:	8c 81       	ldd	r24, Y+4	; 0x04
    7522:	9d 81       	ldd	r25, Y+5	; 0x05
    7524:	97 87       	std	Z+15, r25	; 0x0f
    7526:	86 87       	std	Z+14, r24	; 0x0e
    7528:	8e 81       	ldd	r24, Y+6	; 0x06
    752a:	9f 81       	ldd	r25, Y+7	; 0x07
    752c:	95 87       	std	Z+13, r25	; 0x0d
    752e:	84 87       	std	Z+12, r24	; 0x0c
    7530:	e8 85       	ldd	r30, Y+8	; 0x08
    7532:	f9 85       	ldd	r31, Y+9	; 0x09
    7534:	ee 0f       	add	r30, r30
    7536:	ff 1f       	adc	r31, r31
    7538:	e5 5f       	subi	r30, 0xF5	; 245
    753a:	fe 4f       	sbci	r31, 0xFE	; 254
    753c:	80 81       	ld	r24, Z
    753e:	91 81       	ldd	r25, Z+1	; 0x01
    7540:	ed b7       	in	r30, 0x3d	; 61
    7542:	fe b7       	in	r31, 0x3e	; 62
    7544:	93 87       	std	Z+11, r25	; 0x0b
    7546:	82 87       	std	Z+10, r24	; 0x0a
    7548:	ec 85       	ldd	r30, Y+12	; 0x0c
    754a:	fd 85       	ldd	r31, Y+13	; 0x0d
    754c:	ee 0f       	add	r30, r30
    754e:	ff 1f       	adc	r31, r31
    7550:	eb 5d       	subi	r30, 0xDB	; 219
    7552:	fe 4f       	sbci	r31, 0xFE	; 254
    7554:	80 81       	ld	r24, Z
    7556:	91 81       	ldd	r25, Z+1	; 0x01
    7558:	ed b7       	in	r30, 0x3d	; 61
    755a:	fe b7       	in	r31, 0x3e	; 62
    755c:	91 87       	std	Z+9, r25	; 0x09
    755e:	80 87       	std	Z+8, r24	; 0x08
    7560:	8c e4       	ldi	r24, 0x4C	; 76
    7562:	97 e0       	ldi	r25, 0x07	; 7
    7564:	a0 e0       	ldi	r26, 0x00	; 0
    7566:	85 83       	std	Z+5, r24	; 0x05
    7568:	96 83       	std	Z+6, r25	; 0x06
    756a:	a7 83       	std	Z+7, r26	; 0x07
    756c:	80 e2       	ldi	r24, 0x20	; 32
    756e:	90 e0       	ldi	r25, 0x00	; 0
    7570:	94 83       	std	Z+4, r25	; 0x04
    7572:	83 83       	std	Z+3, r24	; 0x03
    7574:	12 83       	std	Z+2, r17	; 0x02
    7576:	01 83       	std	Z+1, r16	; 0x01
    7578:	0e 94 85 44 	call	0x890a	; 0x890a <snprintf_P>
    757c:	c8 01       	movw	r24, r16
    757e:	cd b7       	in	r28, 0x3d	; 61
    7580:	de b7       	in	r29, 0x3e	; 62
    7582:	65 96       	adiw	r28, 0x15	; 21
    7584:	e4 e0       	ldi	r30, 0x04	; 4
    7586:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000758a <asctime>:
    758a:	66 ef       	ldi	r22, 0xF6	; 246
    758c:	77 e1       	ldi	r23, 0x17	; 23
    758e:	a8 cf       	rjmp	.-176    	; 0x74e0 <asctime_r>
    7590:	08 95       	ret

00007592 <ctime_gm>:
    7592:	a6 e1       	ldi	r26, 0x16	; 22
    7594:	b0 e0       	ldi	r27, 0x00	; 0
    7596:	ef ec       	ldi	r30, 0xCF	; 207
    7598:	fa e3       	ldi	r31, 0x3A	; 58
    759a:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    759e:	be 01       	movw	r22, r28
    75a0:	6f 5f       	subi	r22, 0xFF	; 255
    75a2:	7f 4f       	sbci	r23, 0xFF	; 255
    75a4:	6d da       	rcall	.-2854   	; 0x6a80 <gmtime_r>
    75a6:	66 ed       	ldi	r22, 0xD6	; 214
    75a8:	77 e1       	ldi	r23, 0x17	; 23
    75aa:	9a df       	rcall	.-204    	; 0x74e0 <asctime_r>
    75ac:	66 96       	adiw	r28, 0x16	; 22
    75ae:	e2 e0       	ldi	r30, 0x02	; 2
    75b0:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000075b4 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    75b4:	a5 e2       	ldi	r26, 0x25	; 37
    75b6:	b0 e0       	ldi	r27, 0x00	; 0
    75b8:	e0 ee       	ldi	r30, 0xE0	; 224
    75ba:	fa e3       	ldi	r31, 0x3A	; 58
    75bc:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    75c0:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    75c2:	40 e0       	ldi	r20, 0x00	; 0
    75c4:	50 e0       	ldi	r21, 0x00	; 0
    75c6:	ba 01       	movw	r22, r20
    75c8:	80 e0       	ldi	r24, 0x00	; 0
    75ca:	90 e0       	ldi	r25, 0x00	; 0
    75cc:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <rtc_init>
    75d0:	81 11       	cpse	r24, r1
    75d2:	27 c0       	rjmp	.+78     	; 0x7622 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    75d4:	8b ea       	ldi	r24, 0xAB	; 171
    75d6:	96 e0       	ldi	r25, 0x06	; 6
    75d8:	a0 e0       	ldi	r26, 0x00	; 0
    75da:	ed b7       	in	r30, 0x3d	; 61
    75dc:	fe b7       	in	r31, 0x3e	; 62
    75de:	81 83       	std	Z+1, r24	; 0x01
    75e0:	92 83       	std	Z+2, r25	; 0x02
    75e2:	a3 83       	std	Z+3, r26	; 0x03
    75e4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printf("attempting rtc init\n");
    75e8:	86 e9       	ldi	r24, 0x96	; 150
    75ea:	96 e0       	ldi	r25, 0x06	; 6
    75ec:	a0 e0       	ldi	r26, 0x00	; 0
    75ee:	ed b7       	in	r30, 0x3d	; 61
    75f0:	fe b7       	in	r31, 0x3e	; 62
    75f2:	81 83       	std	Z+1, r24	; 0x01
    75f4:	92 83       	std	Z+2, r25	; 0x02
    75f6:	a3 83       	std	Z+3, r26	; 0x03
    75f8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    75fc:	40 e0       	ldi	r20, 0x00	; 0
    75fe:	50 e0       	ldi	r21, 0x00	; 0
    7600:	ba 01       	movw	r22, r20
    7602:	81 e0       	ldi	r24, 0x01	; 1
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <rtc_init>
    760a:	81 11       	cpse	r24, r1
    760c:	0a c0       	rjmp	.+20     	; 0x7622 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    760e:	8f e7       	ldi	r24, 0x7F	; 127
    7610:	96 e0       	ldi	r25, 0x06	; 6
    7612:	a0 e0       	ldi	r26, 0x00	; 0
    7614:	ed b7       	in	r30, 0x3d	; 61
    7616:	fe b7       	in	r31, 0x3e	; 62
    7618:	81 83       	std	Z+1, r24	; 0x01
    761a:	92 83       	std	Z+2, r25	; 0x02
    761c:	a3 83       	std	Z+3, r26	; 0x03
    761e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        }
    }

    if(rtc_read(&tc))
    7622:	ce 01       	movw	r24, r28
    7624:	04 96       	adiw	r24, 0x04	; 4
    7626:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <rtc_read>
    762a:	88 23       	and	r24, r24
    762c:	51 f0       	breq	.+20     	; 0x7642 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    762e:	ce 01       	movw	r24, r28
    7630:	04 96       	adiw	r24, 0x04	; 4
    7632:	fa dc       	rcall	.-1548   	; 0x7028 <timegm>
    7634:	6b 01       	movw	r12, r22
    7636:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7638:	67 2b       	or	r22, r23
    763a:	68 2b       	or	r22, r24
    763c:	69 2b       	or	r22, r25
    763e:	c1 f4       	brne	.+48     	; 0x7670 <initialize_clock+0xbc>
    7640:	0a c0       	rjmp	.+20     	; 0x7656 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7642:	85 e6       	ldi	r24, 0x65	; 101
    7644:	96 e0       	ldi	r25, 0x06	; 6
    7646:	a0 e0       	ldi	r26, 0x00	; 0
    7648:	ed b7       	in	r30, 0x3d	; 61
    764a:	fe b7       	in	r31, 0x3e	; 62
    764c:	81 83       	std	Z+1, r24	; 0x01
    764e:	92 83       	std	Z+2, r25	; 0x02
    7650:	a3 83       	std	Z+3, r26	; 0x03
    7652:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7656:	81 e4       	ldi	r24, 0x41	; 65
    7658:	96 e0       	ldi	r25, 0x06	; 6
    765a:	a0 e0       	ldi	r26, 0x00	; 0
    765c:	ed b7       	in	r30, 0x3d	; 61
    765e:	fe b7       	in	r31, 0x3e	; 62
    7660:	81 83       	std	Z+1, r24	; 0x01
    7662:	92 83       	std	Z+2, r25	; 0x02
    7664:	a3 83       	std	Z+3, r26	; 0x03
    7666:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    766a:	c1 2c       	mov	r12, r1
    766c:	d1 2c       	mov	r13, r1
    766e:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7670:	1b a3       	std	Y+35, r17	; 0x23
    7672:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7674:	1d a2       	std	Y+37, r1	; 0x25
    7676:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7678:	ce 01       	movw	r24, r28
    767a:	82 96       	adiw	r24, 0x22	; 34
    767c:	30 da       	rcall	.-2976   	; 0x6ade <settimezone>

    ts.tv_sec = seconds;
    767e:	ca 8e       	std	Y+26, r12	; 0x1a
    7680:	db 8e       	std	Y+27, r13	; 0x1b
    7682:	ec 8e       	std	Y+28, r14	; 0x1c
    7684:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7686:	1e 8e       	std	Y+30, r1	; 0x1e
    7688:	1f 8e       	std	Y+31, r1	; 0x1f
    768a:	18 a2       	std	Y+32, r1	; 0x20
    768c:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    768e:	be 01       	movw	r22, r28
    7690:	66 5e       	subi	r22, 0xE6	; 230
    7692:	7f 4f       	sbci	r23, 0xFF	; 255
    7694:	80 e0       	ldi	r24, 0x00	; 0
    7696:	90 e0       	ldi	r25, 0x00	; 0
    7698:	c7 d8       	rcall	.-3698   	; 0x6828 <clock_settime>
}
    769a:	a5 96       	adiw	r28, 0x25	; 37
    769c:	e8 e0       	ldi	r30, 0x08	; 8
    769e:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

000076a2 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    76a2:	a9 e2       	ldi	r26, 0x29	; 41
    76a4:	b0 e0       	ldi	r27, 0x00	; 0
    76a6:	e7 e5       	ldi	r30, 0x57	; 87
    76a8:	fb e3       	ldi	r31, 0x3B	; 59
    76aa:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    76ae:	ce 01       	movw	r24, r28
    76b0:	08 96       	adiw	r24, 0x08	; 8
    76b2:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <rtc_read>
    76b6:	88 23       	and	r24, r24
    76b8:	29 f1       	breq	.+74     	; 0x7704 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    76ba:	ce 01       	movw	r24, r28
    76bc:	08 96       	adiw	r24, 0x08	; 8
    76be:	b4 dc       	rcall	.-1688   	; 0x7028 <timegm>
    76c0:	6e a3       	std	Y+38, r22	; 0x26
    76c2:	7f a3       	std	Y+39, r23	; 0x27
    76c4:	88 a7       	std	Y+40, r24	; 0x28
    76c6:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    76c8:	ed b7       	in	r30, 0x3d	; 61
    76ca:	fe b7       	in	r31, 0x3e	; 62
    76cc:	64 83       	std	Z+4, r22	; 0x04
    76ce:	75 83       	std	Z+5, r23	; 0x05
    76d0:	86 83       	std	Z+6, r24	; 0x06
    76d2:	97 83       	std	Z+7, r25	; 0x07
    76d4:	8f e2       	ldi	r24, 0x2F	; 47
    76d6:	96 e0       	ldi	r25, 0x06	; 6
    76d8:	a0 e0       	ldi	r26, 0x00	; 0
    76da:	81 83       	std	Z+1, r24	; 0x01
    76dc:	92 83       	std	Z+2, r25	; 0x02
    76de:	a3 83       	std	Z+3, r26	; 0x03
    76e0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    76e4:	ce 01       	movw	r24, r28
    76e6:	08 96       	adiw	r24, 0x08	; 8
    76e8:	50 df       	rcall	.-352    	; 0x758a <asctime>
    76ea:	ed b7       	in	r30, 0x3d	; 61
    76ec:	fe b7       	in	r31, 0x3e	; 62
    76ee:	95 83       	std	Z+5, r25	; 0x05
    76f0:	84 83       	std	Z+4, r24	; 0x04
    76f2:	8e e1       	ldi	r24, 0x1E	; 30
    76f4:	96 e0       	ldi	r25, 0x06	; 6
    76f6:	a0 e0       	ldi	r26, 0x00	; 0
    76f8:	81 83       	std	Z+1, r24	; 0x01
    76fa:	92 83       	std	Z+2, r25	; 0x02
    76fc:	a3 83       	std	Z+3, r26	; 0x03
    76fe:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    7702:	0a c0       	rjmp	.+20     	; 0x7718 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7704:	8d e0       	ldi	r24, 0x0D	; 13
    7706:	96 e0       	ldi	r25, 0x06	; 6
    7708:	a0 e0       	ldi	r26, 0x00	; 0
    770a:	ed b7       	in	r30, 0x3d	; 61
    770c:	fe b7       	in	r31, 0x3e	; 62
    770e:	81 83       	std	Z+1, r24	; 0x01
    7710:	92 83       	std	Z+2, r25	; 0x02
    7712:	a3 83       	std	Z+3, r26	; 0x03
    7714:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7718:	be 01       	movw	r22, r28
    771a:	62 5e       	subi	r22, 0xE2	; 226
    771c:	7f 4f       	sbci	r23, 0xFF	; 255
    771e:	80 e0       	ldi	r24, 0x00	; 0
    7720:	90 e0       	ldi	r25, 0x00	; 0
    7722:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <clock_gettime>
    seconds = ts.tv_sec;
    7726:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7728:	9f 8d       	ldd	r25, Y+31	; 0x1f
    772a:	a8 a1       	ldd	r26, Y+32	; 0x20
    772c:	b9 a1       	ldd	r27, Y+33	; 0x21
    772e:	8e a3       	std	Y+38, r24	; 0x26
    7730:	9f a3       	std	Y+39, r25	; 0x27
    7732:	a8 a7       	std	Y+40, r26	; 0x28
    7734:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7736:	ed b7       	in	r30, 0x3d	; 61
    7738:	fe b7       	in	r31, 0x3e	; 62
    773a:	84 83       	std	Z+4, r24	; 0x04
    773c:	95 83       	std	Z+5, r25	; 0x05
    773e:	a6 83       	std	Z+6, r26	; 0x06
    7740:	b7 83       	std	Z+7, r27	; 0x07
    7742:	8b ef       	ldi	r24, 0xFB	; 251
    7744:	95 e0       	ldi	r25, 0x05	; 5
    7746:	a0 e0       	ldi	r26, 0x00	; 0
    7748:	81 83       	std	Z+1, r24	; 0x01
    774a:	92 83       	std	Z+2, r25	; 0x02
    774c:	a3 83       	std	Z+3, r26	; 0x03
    774e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7752:	ce 01       	movw	r24, r28
    7754:	86 96       	adiw	r24, 0x26	; 38
    7756:	a9 d9       	rcall	.-3246   	; 0x6aaa <gmtime>
    7758:	18 df       	rcall	.-464    	; 0x758a <asctime>
    775a:	ed b7       	in	r30, 0x3d	; 61
    775c:	fe b7       	in	r31, 0x3e	; 62
    775e:	95 83       	std	Z+5, r25	; 0x05
    7760:	84 83       	std	Z+4, r24	; 0x04
    7762:	8a ee       	ldi	r24, 0xEA	; 234
    7764:	95 e0       	ldi	r25, 0x05	; 5
    7766:	a0 e0       	ldi	r26, 0x00	; 0
    7768:	81 83       	std	Z+1, r24	; 0x01
    776a:	92 83       	std	Z+2, r25	; 0x02
    776c:	a3 83       	std	Z+3, r26	; 0x03
    776e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
}
    7772:	a9 96       	adiw	r28, 0x29	; 41
    7774:	e2 e0       	ldi	r30, 0x02	; 2
    7776:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000777a <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    777a:	fc 01       	movw	r30, r24
    777c:	84 81       	ldd	r24, Z+4	; 0x04
    777e:	95 81       	ldd	r25, Z+5	; 0x05
    7780:	00 97       	sbiw	r24, 0x00	; 0
    7782:	79 f0       	breq	.+30     	; 0x77a2 <_putc_buffer_fn+0x28>
    7784:	66 23       	and	r22, r22
    7786:	69 f0       	breq	.+26     	; 0x77a2 <_putc_buffer_fn+0x28>
    7788:	01 97       	sbiw	r24, 0x01	; 1
    778a:	95 83       	std	Z+5, r25	; 0x05
    778c:	84 83       	std	Z+4, r24	; 0x04
    778e:	86 81       	ldd	r24, Z+6	; 0x06
    7790:	97 81       	ldd	r25, Z+7	; 0x07
    7792:	01 96       	adiw	r24, 0x01	; 1
    7794:	97 83       	std	Z+7, r25	; 0x07
    7796:	86 83       	std	Z+6, r24	; 0x06
    7798:	a2 81       	ldd	r26, Z+2	; 0x02
    779a:	b3 81       	ldd	r27, Z+3	; 0x03
    779c:	6d 93       	st	X+, r22
    779e:	b3 83       	std	Z+3, r27	; 0x03
    77a0:	a2 83       	std	Z+2, r26	; 0x02
    77a2:	02 80       	ldd	r0, Z+2	; 0x02
    77a4:	f3 81       	ldd	r31, Z+3	; 0x03
    77a6:	e0 2d       	mov	r30, r0
    77a8:	10 82       	st	Z, r1
    77aa:	08 95       	ret

000077ac <_putc_fn>:
    77ac:	fc 01       	movw	r30, r24
    77ae:	26 81       	ldd	r18, Z+6	; 0x06
    77b0:	37 81       	ldd	r19, Z+7	; 0x07
    77b2:	2f 5f       	subi	r18, 0xFF	; 255
    77b4:	3f 4f       	sbci	r19, 0xFF	; 255
    77b6:	37 83       	std	Z+7, r19	; 0x07
    77b8:	26 83       	std	Z+6, r18	; 0x06
    77ba:	86 2f       	mov	r24, r22
    77bc:	90 e0       	ldi	r25, 0x00	; 0
    77be:	0c 94 03 75 	jmp	0xea06	; 0xea06 <putchar>
    77c2:	08 95       	ret

000077c4 <bin2num>:
    77c4:	a0 e0       	ldi	r26, 0x00	; 0
    77c6:	b0 e0       	ldi	r27, 0x00	; 0
    77c8:	e8 ee       	ldi	r30, 0xE8	; 232
    77ca:	fb e3       	ldi	r31, 0x3B	; 59
    77cc:	0c 94 5f e2 	jmp	0x1c4be	; 0x1c4be <__prologue_saves__+0xe>
    77d0:	ea 01       	movw	r28, r20
    77d2:	53 e0       	ldi	r21, 0x03	; 3
    77d4:	ee 0c       	add	r14, r14
    77d6:	ff 1c       	adc	r15, r15
    77d8:	5a 95       	dec	r21
    77da:	e1 f7       	brne	.-8      	; 0x77d4 <bin2num+0x10>
    77dc:	fc 01       	movw	r30, r24
    77de:	af 01       	movw	r20, r30
    77e0:	48 1b       	sub	r20, r24
    77e2:	59 0b       	sbc	r21, r25
    77e4:	c4 17       	cp	r28, r20
    77e6:	d5 07       	cpc	r29, r21
    77e8:	14 f0       	brlt	.+4      	; 0x77ee <bin2num+0x2a>
    77ea:	11 92       	st	Z+, r1
    77ec:	f8 cf       	rjmp	.-16     	; 0x77de <bin2num+0x1a>
    77ee:	41 e0       	ldi	r20, 0x01	; 1
    77f0:	e4 1a       	sub	r14, r20
    77f2:	f1 08       	sbc	r15, r1
    77f4:	5b 01       	movw	r10, r22
    77f6:	42 e0       	ldi	r20, 0x02	; 2
    77f8:	a4 1a       	sub	r10, r20
    77fa:	b1 08       	sbc	r11, r1
    77fc:	f7 fc       	sbrc	r15, 7
    77fe:	3b c0       	rjmp	.+118    	; 0x7876 <bin2num+0xb2>
    7800:	f7 01       	movw	r30, r14
    7802:	43 e0       	ldi	r20, 0x03	; 3
    7804:	f5 95       	asr	r31
    7806:	e7 95       	ror	r30
    7808:	4a 95       	dec	r20
    780a:	e1 f7       	brne	.-8      	; 0x7804 <bin2num+0x40>
    780c:	e0 0f       	add	r30, r16
    780e:	f1 1f       	adc	r31, r17
    7810:	40 81       	ld	r20, Z
    7812:	50 e0       	ldi	r21, 0x00	; 0
    7814:	f7 01       	movw	r30, r14
    7816:	e7 70       	andi	r30, 0x07	; 7
    7818:	ff 27       	eor	r31, r31
    781a:	02 c0       	rjmp	.+4      	; 0x7820 <bin2num+0x5c>
    781c:	55 95       	asr	r21
    781e:	47 95       	ror	r20
    7820:	ea 95       	dec	r30
    7822:	e2 f7       	brpl	.-8      	; 0x781c <bin2num+0x58>
    7824:	41 70       	andi	r20, 0x01	; 1
    7826:	55 27       	eor	r21, r21
    7828:	dc 01       	movw	r26, r24
    782a:	e0 e0       	ldi	r30, 0x00	; 0
    782c:	f0 e0       	ldi	r31, 0x00	; 0
    782e:	ec 17       	cp	r30, r28
    7830:	fd 07       	cpc	r31, r29
    7832:	ec f4       	brge	.+58     	; 0x786e <bin2num+0xaa>
    7834:	ea 15       	cp	r30, r10
    7836:	fb 05       	cpc	r31, r11
    7838:	4c f0       	brlt	.+18     	; 0x784c <bin2num+0x88>
    783a:	dc 01       	movw	r26, r24
    783c:	ae 0f       	add	r26, r30
    783e:	bf 1f       	adc	r27, r31
    7840:	1c 92       	st	X, r1
    7842:	41 e0       	ldi	r20, 0x01	; 1
    7844:	e4 1a       	sub	r14, r20
    7846:	f1 08       	sbc	r15, r1
    7848:	ef 01       	movw	r28, r30
    784a:	d8 cf       	rjmp	.-80     	; 0x77fc <bin2num+0x38>
    784c:	9c 90       	ld	r9, X
    784e:	99 0c       	add	r9, r9
    7850:	94 2a       	or	r9, r20
    7852:	49 2d       	mov	r20, r9
    7854:	50 e0       	ldi	r21, 0x00	; 0
    7856:	42 17       	cp	r20, r18
    7858:	53 07       	cpc	r21, r19
    785a:	24 f0       	brlt	.+8      	; 0x7864 <bin2num+0xa0>
    785c:	92 1a       	sub	r9, r18
    785e:	41 e0       	ldi	r20, 0x01	; 1
    7860:	50 e0       	ldi	r21, 0x00	; 0
    7862:	02 c0       	rjmp	.+4      	; 0x7868 <bin2num+0xa4>
    7864:	40 e0       	ldi	r20, 0x00	; 0
    7866:	50 e0       	ldi	r21, 0x00	; 0
    7868:	9d 92       	st	X+, r9
    786a:	31 96       	adiw	r30, 0x01	; 1
    786c:	e0 cf       	rjmp	.-64     	; 0x782e <bin2num+0x6a>
    786e:	41 15       	cp	r20, r1
    7870:	51 05       	cpc	r21, r1
    7872:	01 f7       	brne	.-64     	; 0x7834 <bin2num+0x70>
    7874:	e2 cf       	rjmp	.-60     	; 0x783a <bin2num+0x76>
    7876:	fc 01       	movw	r30, r24
    7878:	9f 01       	movw	r18, r30
    787a:	28 1b       	sub	r18, r24
    787c:	39 0b       	sbc	r19, r25
    787e:	2c 17       	cp	r18, r28
    7880:	3d 07       	cpc	r19, r29
    7882:	4c f4       	brge	.+18     	; 0x7896 <bin2num+0xd2>
    7884:	20 81       	ld	r18, Z
    7886:	2a 30       	cpi	r18, 0x0A	; 10
    7888:	10 f4       	brcc	.+4      	; 0x788e <bin2num+0xca>
    788a:	20 5d       	subi	r18, 0xD0	; 208
    788c:	01 c0       	rjmp	.+2      	; 0x7890 <bin2num+0xcc>
    788e:	29 5a       	subi	r18, 0xA9	; 169
    7890:	20 83       	st	Z, r18
    7892:	31 96       	adiw	r30, 0x01	; 1
    7894:	f1 cf       	rjmp	.-30     	; 0x7878 <bin2num+0xb4>
    7896:	9e 01       	movw	r18, r28
    7898:	d7 ff       	sbrs	r29, 7
    789a:	02 c0       	rjmp	.+4      	; 0x78a0 <bin2num+0xdc>
    789c:	20 e0       	ldi	r18, 0x00	; 0
    789e:	30 e0       	ldi	r19, 0x00	; 0
    78a0:	c1 14       	cp	r12, r1
    78a2:	d1 04       	cpc	r13, r1
    78a4:	61 f0       	breq	.+24     	; 0x78be <bin2num+0xfa>
    78a6:	61 50       	subi	r22, 0x01	; 1
    78a8:	71 09       	sbc	r23, r1
    78aa:	26 17       	cp	r18, r22
    78ac:	37 07       	cpc	r19, r23
    78ae:	3c f4       	brge	.+14     	; 0x78be <bin2num+0xfa>
    78b0:	fc 01       	movw	r30, r24
    78b2:	e2 0f       	add	r30, r18
    78b4:	f3 1f       	adc	r31, r19
    78b6:	c0 82       	st	Z, r12
    78b8:	21 96       	adiw	r28, 0x01	; 1
    78ba:	2f 5f       	subi	r18, 0xFF	; 255
    78bc:	3f 4f       	sbci	r19, 0xFF	; 255
    78be:	fc 01       	movw	r30, r24
    78c0:	e2 0f       	add	r30, r18
    78c2:	f3 1f       	adc	r31, r19
    78c4:	10 82       	st	Z, r1
    78c6:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <reverse>
    78ca:	ce 01       	movw	r24, r28
    78cc:	cd b7       	in	r28, 0x3d	; 61
    78ce:	de b7       	in	r29, 0x3e	; 62
    78d0:	eb e0       	ldi	r30, 0x0B	; 11
    78d2:	0c 94 7b e2 	jmp	0x1c4f6	; 0x1c4f6 <__epilogue_restores__+0xe>

000078d6 <pch>:
    78d6:	fc 01       	movw	r30, r24
    78d8:	22 81       	ldd	r18, Z+2	; 0x02
    78da:	33 81       	ldd	r19, Z+3	; 0x03
    78dc:	44 81       	ldd	r20, Z+4	; 0x04
    78de:	55 81       	ldd	r21, Z+5	; 0x05
    78e0:	80 81       	ld	r24, Z
    78e2:	91 81       	ldd	r25, Z+1	; 0x01
    78e4:	24 17       	cp	r18, r20
    78e6:	35 07       	cpc	r19, r21
    78e8:	54 f4       	brge	.+20     	; 0x78fe <pch+0x28>
    78ea:	a9 01       	movw	r20, r18
    78ec:	4f 5f       	subi	r20, 0xFF	; 255
    78ee:	5f 4f       	sbci	r21, 0xFF	; 255
    78f0:	53 83       	std	Z+3, r21	; 0x03
    78f2:	42 83       	std	Z+2, r20	; 0x02
    78f4:	dc 01       	movw	r26, r24
    78f6:	a2 0f       	add	r26, r18
    78f8:	b3 1f       	adc	r27, r19
    78fa:	6c 93       	st	X, r22
    78fc:	04 c0       	rjmp	.+8      	; 0x7906 <pch+0x30>
    78fe:	dc 01       	movw	r26, r24
    7900:	a2 0f       	add	r26, r18
    7902:	b3 1f       	adc	r27, r19
    7904:	1c 92       	st	X, r1
    7906:	82 81       	ldd	r24, Z+2	; 0x02
    7908:	93 81       	ldd	r25, Z+3	; 0x03
    790a:	08 95       	ret

0000790c <p_ntoa>:
    790c:	af 92       	push	r10
    790e:	cf 92       	push	r12
    7910:	df 92       	push	r13
    7912:	ef 92       	push	r14
    7914:	ff 92       	push	r15
    7916:	0f 93       	push	r16
    7918:	1f 93       	push	r17
    791a:	cf 93       	push	r28
    791c:	df 93       	push	r29
    791e:	dc 01       	movw	r26, r24
    7920:	eb 01       	movw	r28, r22
    7922:	fa 01       	movw	r30, r20
    7924:	b9 01       	movw	r22, r18
    7926:	98 01       	movw	r18, r16
    7928:	a6 01       	movw	r20, r12
    792a:	9a 2d       	mov	r25, r10
    792c:	a5 fa       	bst	r10, 5
    792e:	cc 24       	eor	r12, r12
    7930:	c0 f8       	bld	r12, 0
    7932:	a6 fc       	sbrc	r10, 6
    7934:	07 c0       	rjmp	.+14     	; 0x7944 <p_ntoa+0x38>
    7936:	a2 fc       	sbrc	r10, 2
    7938:	08 c0       	rjmp	.+16     	; 0x794a <p_ntoa+0x3e>
    793a:	a4 fe       	sbrs	r10, 4
    793c:	09 c0       	rjmp	.+18     	; 0x7950 <p_ntoa+0x44>
    793e:	00 e2       	ldi	r16, 0x20	; 32
    7940:	10 e0       	ldi	r17, 0x00	; 0
    7942:	08 c0       	rjmp	.+16     	; 0x7954 <p_ntoa+0x48>
    7944:	0d e2       	ldi	r16, 0x2D	; 45
    7946:	10 e0       	ldi	r17, 0x00	; 0
    7948:	05 c0       	rjmp	.+10     	; 0x7954 <p_ntoa+0x48>
    794a:	0b e2       	ldi	r16, 0x2B	; 43
    794c:	10 e0       	ldi	r17, 0x00	; 0
    794e:	02 c0       	rjmp	.+4      	; 0x7954 <p_ntoa+0x48>
    7950:	00 e0       	ldi	r16, 0x00	; 0
    7952:	10 e0       	ldi	r17, 0x00	; 0
    7954:	95 ff       	sbrs	r25, 5
    7956:	04 c0       	rjmp	.+8      	; 0x7960 <p_ntoa+0x54>
    7958:	89 2f       	mov	r24, r25
    795a:	8a 70       	andi	r24, 0x0A	; 10
    795c:	09 f0       	breq	.+2      	; 0x7960 <p_ntoa+0x54>
    795e:	c1 2c       	mov	r12, r1
    7960:	c0 fa       	bst	r12, 0
    7962:	95 f9       	bld	r25, 5
    7964:	89 2f       	mov	r24, r25
    7966:	82 70       	andi	r24, 0x02	; 2
    7968:	c8 2e       	mov	r12, r24
    796a:	91 fd       	sbrc	r25, 1
    796c:	02 c0       	rjmp	.+4      	; 0x7972 <p_ntoa+0x66>
    796e:	40 e0       	ldi	r20, 0x00	; 0
    7970:	50 e0       	ldi	r21, 0x00	; 0
    7972:	89 2f       	mov	r24, r25
    7974:	83 70       	andi	r24, 0x03	; 3
    7976:	11 f4       	brne	.+4      	; 0x797c <p_ntoa+0x70>
    7978:	41 e0       	ldi	r20, 0x01	; 1
    797a:	50 e0       	ldi	r21, 0x00	; 0
    797c:	90 ff       	sbrs	r25, 0
    797e:	0c c0       	rjmp	.+24     	; 0x7998 <p_ntoa+0x8c>
    7980:	95 fd       	sbrc	r25, 5
    7982:	05 c0       	rjmp	.+10     	; 0x798e <p_ntoa+0x82>
    7984:	c1 10       	cpse	r12, r1
    7986:	08 c0       	rjmp	.+16     	; 0x7998 <p_ntoa+0x8c>
    7988:	41 e0       	ldi	r20, 0x01	; 1
    798a:	50 e0       	ldi	r21, 0x00	; 0
    798c:	05 c0       	rjmp	.+10     	; 0x7998 <p_ntoa+0x8c>
    798e:	94 75       	andi	r25, 0x54	; 84
    7990:	a7 01       	movw	r20, r14
    7992:	11 f0       	breq	.+4      	; 0x7998 <p_ntoa+0x8c>
    7994:	41 50       	subi	r20, 0x01	; 1
    7996:	51 09       	sbc	r21, r1
    7998:	68 01       	movw	r12, r16
    799a:	7e 01       	movw	r14, r28
    799c:	8d 01       	movw	r16, r26
    799e:	cf 01       	movw	r24, r30
    79a0:	11 df       	rcall	.-478    	; 0x77c4 <bin2num>
    79a2:	df 91       	pop	r29
    79a4:	cf 91       	pop	r28
    79a6:	1f 91       	pop	r17
    79a8:	0f 91       	pop	r16
    79aa:	ff 90       	pop	r15
    79ac:	ef 90       	pop	r14
    79ae:	df 90       	pop	r13
    79b0:	cf 90       	pop	r12
    79b2:	af 90       	pop	r10
    79b4:	08 95       	ret

000079b6 <p_ftoa>:
    79b6:	aa e0       	ldi	r26, 0x0A	; 10
    79b8:	b0 e0       	ldi	r27, 0x00	; 0
    79ba:	e1 ee       	ldi	r30, 0xE1	; 225
    79bc:	fc e3       	ldi	r31, 0x3C	; 60
    79be:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    79c2:	4b 01       	movw	r8, r22
    79c4:	5c 01       	movw	r10, r24
    79c6:	1a 01       	movw	r2, r20
    79c8:	28 01       	movw	r4, r16
    79ca:	c6 fa       	bst	r12, 6
    79cc:	11 27       	eor	r17, r17
    79ce:	10 f9       	bld	r17, 0
    79d0:	5a 83       	std	Y+2, r21	; 0x02
    79d2:	49 83       	std	Y+1, r20	; 0x01
    79d4:	1c 82       	std	Y+4, r1	; 0x04
    79d6:	1b 82       	std	Y+3, r1	; 0x03
    79d8:	21 50       	subi	r18, 0x01	; 1
    79da:	31 09       	sbc	r19, r1
    79dc:	3e 83       	std	Y+6, r19	; 0x06
    79de:	2d 83       	std	Y+5, r18	; 0x05
    79e0:	fa 01       	movw	r30, r20
    79e2:	10 82       	st	Z, r1
    79e4:	20 e0       	ldi	r18, 0x00	; 0
    79e6:	30 e0       	ldi	r19, 0x00	; 0
    79e8:	a9 01       	movw	r20, r18
    79ea:	0e 94 16 e3 	call	0x1c62c	; 0x1c62c <__cmpsf2>
    79ee:	87 ff       	sbrs	r24, 7
    79f0:	05 c0       	rjmp	.+10     	; 0x79fc <p_ftoa+0x46>
    79f2:	b7 fa       	bst	r11, 7
    79f4:	b0 94       	com	r11
    79f6:	b7 f8       	bld	r11, 7
    79f8:	b0 94       	com	r11
    79fa:	11 e0       	ldi	r17, 0x01	; 1
    79fc:	10 fb       	bst	r17, 0
    79fe:	c6 f8       	bld	r12, 6
    7a00:	c6 fe       	sbrs	r12, 6
    7a02:	02 c0       	rjmp	.+4      	; 0x7a08 <p_ftoa+0x52>
    7a04:	6d e2       	ldi	r22, 0x2D	; 45
    7a06:	07 c0       	rjmp	.+14     	; 0x7a16 <p_ftoa+0x60>
    7a08:	c2 fe       	sbrs	r12, 2
    7a0a:	02 c0       	rjmp	.+4      	; 0x7a10 <p_ftoa+0x5a>
    7a0c:	6b e2       	ldi	r22, 0x2B	; 43
    7a0e:	03 c0       	rjmp	.+6      	; 0x7a16 <p_ftoa+0x60>
    7a10:	c4 fe       	sbrs	r12, 4
    7a12:	04 c0       	rjmp	.+8      	; 0x7a1c <p_ftoa+0x66>
    7a14:	60 e2       	ldi	r22, 0x20	; 32
    7a16:	ce 01       	movw	r24, r28
    7a18:	01 96       	adiw	r24, 0x01	; 1
    7a1a:	5d df       	rcall	.-326    	; 0x78d6 <pch>
    7a1c:	37 01       	movw	r6, r14
    7a1e:	f7 fe       	sbrs	r15, 7
    7a20:	02 c0       	rjmp	.+4      	; 0x7a26 <p_ftoa+0x70>
    7a22:	61 2c       	mov	r6, r1
    7a24:	71 2c       	mov	r7, r1
    7a26:	20 e0       	ldi	r18, 0x00	; 0
    7a28:	30 e0       	ldi	r19, 0x00	; 0
    7a2a:	a9 01       	movw	r20, r18
    7a2c:	c5 01       	movw	r24, r10
    7a2e:	b4 01       	movw	r22, r8
    7a30:	0e 94 16 e3 	call	0x1c62c	; 0x1c62c <__cmpsf2>
    7a34:	88 23       	and	r24, r24
    7a36:	d1 f1       	breq	.+116    	; 0x7aac <p_ftoa+0xf6>
    7a38:	c1 fe       	sbrs	r12, 1
    7a3a:	11 c0       	rjmp	.+34     	; 0x7a5e <p_ftoa+0xa8>
    7a3c:	83 01       	movw	r16, r6
    7a3e:	60 e0       	ldi	r22, 0x00	; 0
    7a40:	70 e0       	ldi	r23, 0x00	; 0
    7a42:	80 e0       	ldi	r24, 0x00	; 0
    7a44:	9f e3       	ldi	r25, 0x3F	; 63
    7a46:	01 15       	cp	r16, r1
    7a48:	11 05       	cpc	r17, r1
    7a4a:	69 f0       	breq	.+26     	; 0x7a66 <p_ftoa+0xb0>
    7a4c:	20 e0       	ldi	r18, 0x00	; 0
    7a4e:	30 e0       	ldi	r19, 0x00	; 0
    7a50:	40 e2       	ldi	r20, 0x20	; 32
    7a52:	51 e4       	ldi	r21, 0x41	; 65
    7a54:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    7a58:	01 50       	subi	r16, 0x01	; 1
    7a5a:	11 09       	sbc	r17, r1
    7a5c:	f4 cf       	rjmp	.-24     	; 0x7a46 <p_ftoa+0x90>
    7a5e:	60 e0       	ldi	r22, 0x00	; 0
    7a60:	70 e0       	ldi	r23, 0x00	; 0
    7a62:	80 e0       	ldi	r24, 0x00	; 0
    7a64:	9f e3       	ldi	r25, 0x3F	; 63
    7a66:	9b 01       	movw	r18, r22
    7a68:	ac 01       	movw	r20, r24
    7a6a:	c5 01       	movw	r24, r10
    7a6c:	b4 01       	movw	r22, r8
    7a6e:	0e 94 b2 e2 	call	0x1c564	; 0x1c564 <__addsf3>
    7a72:	4b 01       	movw	r8, r22
    7a74:	5c 01       	movw	r10, r24
    7a76:	ee 24       	eor	r14, r14
    7a78:	e3 94       	inc	r14
    7a7a:	f1 2c       	mov	r15, r1
    7a7c:	20 e0       	ldi	r18, 0x00	; 0
    7a7e:	30 e0       	ldi	r19, 0x00	; 0
    7a80:	40 e2       	ldi	r20, 0x20	; 32
    7a82:	51 e4       	ldi	r21, 0x41	; 65
    7a84:	c5 01       	movw	r24, r10
    7a86:	b4 01       	movw	r22, r8
    7a88:	0e 94 65 e4 	call	0x1c8ca	; 0x1c8ca <__gesf2>
    7a8c:	87 fd       	sbrc	r24, 7
    7a8e:	11 c0       	rjmp	.+34     	; 0x7ab2 <p_ftoa+0xfc>
    7a90:	ff ef       	ldi	r31, 0xFF	; 255
    7a92:	ef 1a       	sub	r14, r31
    7a94:	ff 0a       	sbc	r15, r31
    7a96:	20 e0       	ldi	r18, 0x00	; 0
    7a98:	30 e0       	ldi	r19, 0x00	; 0
    7a9a:	40 e2       	ldi	r20, 0x20	; 32
    7a9c:	51 e4       	ldi	r21, 0x41	; 65
    7a9e:	c5 01       	movw	r24, r10
    7aa0:	b4 01       	movw	r22, r8
    7aa2:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    7aa6:	4b 01       	movw	r8, r22
    7aa8:	5c 01       	movw	r10, r24
    7aaa:	e8 cf       	rjmp	.-48     	; 0x7a7c <p_ftoa+0xc6>
    7aac:	ee 24       	eor	r14, r14
    7aae:	e3 94       	inc	r14
    7ab0:	f1 2c       	mov	r15, r1
    7ab2:	8c 2d       	mov	r24, r12
    7ab4:	88 72       	andi	r24, 0x28	; 40
    7ab6:	80 32       	cpi	r24, 0x20	; 32
    7ab8:	c1 f4       	brne	.+48     	; 0x7aea <p_ftoa+0x134>
    7aba:	82 01       	movw	r16, r4
    7abc:	0e 19       	sub	r16, r14
    7abe:	1f 09       	sbc	r17, r15
    7ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    7ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    7ac4:	08 1b       	sub	r16, r24
    7ac6:	19 0b       	sbc	r17, r25
    7ac8:	c1 fe       	sbrs	r12, 1
    7aca:	07 c0       	rjmp	.+14     	; 0x7ada <p_ftoa+0x124>
    7acc:	61 14       	cp	r6, r1
    7ace:	71 04       	cpc	r7, r1
    7ad0:	21 f0       	breq	.+8      	; 0x7ada <p_ftoa+0x124>
    7ad2:	06 19       	sub	r16, r6
    7ad4:	17 09       	sbc	r17, r7
    7ad6:	01 50       	subi	r16, 0x01	; 1
    7ad8:	11 09       	sbc	r17, r1
    7ada:	10 16       	cp	r1, r16
    7adc:	11 06       	cpc	r1, r17
    7ade:	2c f4       	brge	.+10     	; 0x7aea <p_ftoa+0x134>
    7ae0:	60 e3       	ldi	r22, 0x30	; 48
    7ae2:	ce 01       	movw	r24, r28
    7ae4:	01 96       	adiw	r24, 0x01	; 1
    7ae6:	f7 de       	rcall	.-530    	; 0x78d6 <pch>
    7ae8:	f6 cf       	rjmp	.-20     	; 0x7ad6 <p_ftoa+0x120>
    7aea:	c5 01       	movw	r24, r10
    7aec:	b4 01       	movw	r22, r8
    7aee:	0e 94 82 e3 	call	0x1c704	; 0x1c704 <__fixsfsi>
    7af2:	6f 83       	std	Y+7, r22	; 0x07
    7af4:	78 87       	std	Y+8, r23	; 0x08
    7af6:	89 87       	std	Y+9, r24	; 0x09
    7af8:	9a 87       	std	Y+10, r25	; 0x0a
    7afa:	6f 81       	ldd	r22, Y+7	; 0x07
    7afc:	60 5d       	subi	r22, 0xD0	; 208
    7afe:	ce 01       	movw	r24, r28
    7b00:	01 96       	adiw	r24, 0x01	; 1
    7b02:	e9 de       	rcall	.-558    	; 0x78d6 <pch>
    7b04:	2f 81       	ldd	r18, Y+7	; 0x07
    7b06:	38 85       	ldd	r19, Y+8	; 0x08
    7b08:	b9 01       	movw	r22, r18
    7b0a:	33 0f       	add	r19, r19
    7b0c:	88 0b       	sbc	r24, r24
    7b0e:	99 0b       	sbc	r25, r25
    7b10:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__floatsisf>
    7b14:	9b 01       	movw	r18, r22
    7b16:	ac 01       	movw	r20, r24
    7b18:	c5 01       	movw	r24, r10
    7b1a:	b4 01       	movw	r22, r8
    7b1c:	0e 94 b1 e2 	call	0x1c562	; 0x1c562 <__subsf3>
    7b20:	31 e0       	ldi	r19, 0x01	; 1
    7b22:	e3 1a       	sub	r14, r19
    7b24:	f1 08       	sbc	r15, r1
    7b26:	20 e0       	ldi	r18, 0x00	; 0
    7b28:	30 e0       	ldi	r19, 0x00	; 0
    7b2a:	40 e2       	ldi	r20, 0x20	; 32
    7b2c:	51 e4       	ldi	r21, 0x41	; 65
    7b2e:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    7b32:	4b 01       	movw	r8, r22
    7b34:	5c 01       	movw	r10, r24
    7b36:	e1 14       	cp	r14, r1
    7b38:	f1 04       	cpc	r15, r1
    7b3a:	b9 f6       	brne	.-82     	; 0x7aea <p_ftoa+0x134>
    7b3c:	c1 fc       	sbrc	r12, 1
    7b3e:	10 c0       	rjmp	.+32     	; 0x7b60 <p_ftoa+0x1aa>
    7b40:	60 e0       	ldi	r22, 0x00	; 0
    7b42:	ce 01       	movw	r24, r28
    7b44:	01 96       	adiw	r24, 0x01	; 1
    7b46:	c7 de       	rcall	.-626    	; 0x78d6 <pch>
    7b48:	f1 01       	movw	r30, r2
    7b4a:	01 90       	ld	r0, Z+
    7b4c:	00 20       	and	r0, r0
    7b4e:	e9 f7       	brne	.-6      	; 0x7b4a <p_ftoa+0x194>
    7b50:	31 97       	sbiw	r30, 0x01	; 1
    7b52:	cf 01       	movw	r24, r30
    7b54:	82 19       	sub	r24, r2
    7b56:	93 09       	sbc	r25, r3
    7b58:	2a 96       	adiw	r28, 0x0a	; 10
    7b5a:	e2 e1       	ldi	r30, 0x12	; 18
    7b5c:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>
    7b60:	61 14       	cp	r6, r1
    7b62:	71 04       	cpc	r7, r1
    7b64:	69 f3       	breq	.-38     	; 0x7b40 <p_ftoa+0x18a>
    7b66:	6e e2       	ldi	r22, 0x2E	; 46
    7b68:	ce 01       	movw	r24, r28
    7b6a:	01 96       	adiw	r24, 0x01	; 1
    7b6c:	b4 de       	rcall	.-664    	; 0x78d6 <pch>
    7b6e:	c5 01       	movw	r24, r10
    7b70:	b4 01       	movw	r22, r8
    7b72:	0e 94 82 e3 	call	0x1c704	; 0x1c704 <__fixsfsi>
    7b76:	6b 01       	movw	r12, r22
    7b78:	7c 01       	movw	r14, r24
    7b7a:	07 2e       	mov	r0, r23
    7b7c:	00 0c       	add	r0, r0
    7b7e:	88 0b       	sbc	r24, r24
    7b80:	99 0b       	sbc	r25, r25
    7b82:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__floatsisf>
    7b86:	9b 01       	movw	r18, r22
    7b88:	ac 01       	movw	r20, r24
    7b8a:	c5 01       	movw	r24, r10
    7b8c:	b4 01       	movw	r22, r8
    7b8e:	0e 94 b1 e2 	call	0x1c562	; 0x1c562 <__subsf3>
    7b92:	4b 01       	movw	r8, r22
    7b94:	5c 01       	movw	r10, r24
    7b96:	b6 01       	movw	r22, r12
    7b98:	60 5d       	subi	r22, 0xD0	; 208
    7b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b9c:	ce 01       	movw	r24, r28
    7b9e:	01 96       	adiw	r24, 0x01	; 1
    7ba0:	9a de       	rcall	.-716    	; 0x78d6 <pch>
    7ba2:	81 e0       	ldi	r24, 0x01	; 1
    7ba4:	68 1a       	sub	r6, r24
    7ba6:	71 08       	sbc	r7, r1
    7ba8:	20 e0       	ldi	r18, 0x00	; 0
    7baa:	30 e0       	ldi	r19, 0x00	; 0
    7bac:	40 e2       	ldi	r20, 0x20	; 32
    7bae:	51 e4       	ldi	r21, 0x41	; 65
    7bb0:	c5 01       	movw	r24, r10
    7bb2:	b4 01       	movw	r22, r8
    7bb4:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    7bb8:	4b 01       	movw	r8, r22
    7bba:	5c 01       	movw	r10, r24
    7bbc:	61 14       	cp	r6, r1
    7bbe:	71 04       	cpc	r7, r1
    7bc0:	b1 f6       	brne	.-84     	; 0x7b6e <p_ftoa+0x1b8>
    7bc2:	be cf       	rjmp	.-132    	; 0x7b40 <p_ftoa+0x18a>

00007bc4 <p_etoa>:
    7bc4:	a3 e1       	ldi	r26, 0x13	; 19
    7bc6:	b0 e0       	ldi	r27, 0x00	; 0
    7bc8:	e8 ee       	ldi	r30, 0xE8	; 232
    7bca:	fd e3       	ldi	r31, 0x3D	; 61
    7bcc:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    7bd0:	4b 01       	movw	r8, r22
    7bd2:	5c 01       	movw	r10, r24
    7bd4:	59 8b       	std	Y+17, r21	; 0x11
    7bd6:	48 8b       	std	Y+16, r20	; 0x10
    7bd8:	1b 8b       	std	Y+19, r17	; 0x13
    7bda:	0a 8b       	std	Y+18, r16	; 0x12
    7bdc:	3c 2c       	mov	r3, r12
    7bde:	c6 fa       	bst	r12, 6
    7be0:	11 27       	eor	r17, r17
    7be2:	10 f9       	bld	r17, 0
    7be4:	59 87       	std	Y+9, r21	; 0x09
    7be6:	48 87       	std	Y+8, r20	; 0x08
    7be8:	1b 86       	std	Y+11, r1	; 0x0b
    7bea:	1a 86       	std	Y+10, r1	; 0x0a
    7bec:	21 50       	subi	r18, 0x01	; 1
    7bee:	31 09       	sbc	r19, r1
    7bf0:	3d 87       	std	Y+13, r19	; 0x0d
    7bf2:	2c 87       	std	Y+12, r18	; 0x0c
    7bf4:	fa 01       	movw	r30, r20
    7bf6:	10 82       	st	Z, r1
    7bf8:	20 e0       	ldi	r18, 0x00	; 0
    7bfa:	30 e0       	ldi	r19, 0x00	; 0
    7bfc:	a9 01       	movw	r20, r18
    7bfe:	0e 94 16 e3 	call	0x1c62c	; 0x1c62c <__cmpsf2>
    7c02:	87 ff       	sbrs	r24, 7
    7c04:	05 c0       	rjmp	.+10     	; 0x7c10 <p_etoa+0x4c>
    7c06:	b7 fa       	bst	r11, 7
    7c08:	b0 94       	com	r11
    7c0a:	b7 f8       	bld	r11, 7
    7c0c:	b0 94       	com	r11
    7c0e:	11 e0       	ldi	r17, 0x01	; 1
    7c10:	10 fb       	bst	r17, 0
    7c12:	36 f8       	bld	r3, 6
    7c14:	36 fe       	sbrs	r3, 6
    7c16:	02 c0       	rjmp	.+4      	; 0x7c1c <p_etoa+0x58>
    7c18:	6d e2       	ldi	r22, 0x2D	; 45
    7c1a:	07 c0       	rjmp	.+14     	; 0x7c2a <p_etoa+0x66>
    7c1c:	32 fe       	sbrs	r3, 2
    7c1e:	02 c0       	rjmp	.+4      	; 0x7c24 <p_etoa+0x60>
    7c20:	6b e2       	ldi	r22, 0x2B	; 43
    7c22:	03 c0       	rjmp	.+6      	; 0x7c2a <p_etoa+0x66>
    7c24:	34 fe       	sbrs	r3, 4
    7c26:	04 c0       	rjmp	.+8      	; 0x7c30 <p_etoa+0x6c>
    7c28:	60 e2       	ldi	r22, 0x20	; 32
    7c2a:	ce 01       	movw	r24, r28
    7c2c:	08 96       	adiw	r24, 0x08	; 8
    7c2e:	53 de       	rcall	.-858    	; 0x78d6 <pch>
    7c30:	37 01       	movw	r6, r14
    7c32:	f7 fe       	sbrs	r15, 7
    7c34:	02 c0       	rjmp	.+4      	; 0x7c3a <p_etoa+0x76>
    7c36:	61 2c       	mov	r6, r1
    7c38:	71 2c       	mov	r7, r1
    7c3a:	1f 86       	std	Y+15, r1	; 0x0f
    7c3c:	1e 86       	std	Y+14, r1	; 0x0e
    7c3e:	20 e0       	ldi	r18, 0x00	; 0
    7c40:	30 e0       	ldi	r19, 0x00	; 0
    7c42:	a9 01       	movw	r20, r18
    7c44:	c5 01       	movw	r24, r10
    7c46:	b4 01       	movw	r22, r8
    7c48:	0e 94 16 e3 	call	0x1c62c	; 0x1c62c <__cmpsf2>
    7c4c:	f3 2d       	mov	r31, r3
    7c4e:	f2 70       	andi	r31, 0x02	; 2
    7c50:	2f 2e       	mov	r2, r31
    7c52:	88 23       	and	r24, r24
    7c54:	09 f4       	brne	.+2      	; 0x7c58 <p_etoa+0x94>
    7c56:	70 c0       	rjmp	.+224    	; 0x7d38 <p_etoa+0x174>
    7c58:	ff 23       	and	r31, r31
    7c5a:	b1 f0       	breq	.+44     	; 0x7c88 <p_etoa+0xc4>
    7c5c:	83 01       	movw	r16, r6
    7c5e:	c1 2c       	mov	r12, r1
    7c60:	d1 2c       	mov	r13, r1
    7c62:	e1 2c       	mov	r14, r1
    7c64:	2f e3       	ldi	r18, 0x3F	; 63
    7c66:	f2 2e       	mov	r15, r18
    7c68:	01 15       	cp	r16, r1
    7c6a:	11 05       	cpc	r17, r1
    7c6c:	91 f0       	breq	.+36     	; 0x7c92 <p_etoa+0xce>
    7c6e:	20 e0       	ldi	r18, 0x00	; 0
    7c70:	30 e0       	ldi	r19, 0x00	; 0
    7c72:	40 e2       	ldi	r20, 0x20	; 32
    7c74:	51 e4       	ldi	r21, 0x41	; 65
    7c76:	c7 01       	movw	r24, r14
    7c78:	b6 01       	movw	r22, r12
    7c7a:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    7c7e:	6b 01       	movw	r12, r22
    7c80:	7c 01       	movw	r14, r24
    7c82:	01 50       	subi	r16, 0x01	; 1
    7c84:	11 09       	sbc	r17, r1
    7c86:	f0 cf       	rjmp	.-32     	; 0x7c68 <p_etoa+0xa4>
    7c88:	c1 2c       	mov	r12, r1
    7c8a:	d1 2c       	mov	r13, r1
    7c8c:	e1 2c       	mov	r14, r1
    7c8e:	9f e3       	ldi	r25, 0x3F	; 63
    7c90:	f9 2e       	mov	r15, r25
    7c92:	41 2c       	mov	r4, r1
    7c94:	51 2c       	mov	r5, r1
    7c96:	82 01       	movw	r16, r4
    7c98:	01 50       	subi	r16, 0x01	; 1
    7c9a:	11 09       	sbc	r17, r1
    7c9c:	20 e0       	ldi	r18, 0x00	; 0
    7c9e:	30 e0       	ldi	r19, 0x00	; 0
    7ca0:	40 e8       	ldi	r20, 0x80	; 128
    7ca2:	5f e3       	ldi	r21, 0x3F	; 63
    7ca4:	c5 01       	movw	r24, r10
    7ca6:	b4 01       	movw	r22, r8
    7ca8:	0e 94 16 e3 	call	0x1c62c	; 0x1c62c <__cmpsf2>
    7cac:	87 ff       	sbrs	r24, 7
    7cae:	0c c0       	rjmp	.+24     	; 0x7cc8 <p_etoa+0x104>
    7cb0:	20 e0       	ldi	r18, 0x00	; 0
    7cb2:	30 e0       	ldi	r19, 0x00	; 0
    7cb4:	40 e2       	ldi	r20, 0x20	; 32
    7cb6:	51 e4       	ldi	r21, 0x41	; 65
    7cb8:	c5 01       	movw	r24, r10
    7cba:	b4 01       	movw	r22, r8
    7cbc:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    7cc0:	4b 01       	movw	r8, r22
    7cc2:	5c 01       	movw	r10, r24
    7cc4:	28 01       	movw	r4, r16
    7cc6:	e7 cf       	rjmp	.-50     	; 0x7c96 <p_etoa+0xd2>
    7cc8:	82 01       	movw	r16, r4
    7cca:	0f 5f       	subi	r16, 0xFF	; 255
    7ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    7cce:	20 e0       	ldi	r18, 0x00	; 0
    7cd0:	30 e0       	ldi	r19, 0x00	; 0
    7cd2:	40 e2       	ldi	r20, 0x20	; 32
    7cd4:	51 e4       	ldi	r21, 0x41	; 65
    7cd6:	c5 01       	movw	r24, r10
    7cd8:	b4 01       	movw	r22, r8
    7cda:	0e 94 65 e4 	call	0x1c8ca	; 0x1c8ca <__gesf2>
    7cde:	87 fd       	sbrc	r24, 7
    7ce0:	0c c0       	rjmp	.+24     	; 0x7cfa <p_etoa+0x136>
    7ce2:	20 e0       	ldi	r18, 0x00	; 0
    7ce4:	30 e0       	ldi	r19, 0x00	; 0
    7ce6:	40 e2       	ldi	r20, 0x20	; 32
    7ce8:	51 e4       	ldi	r21, 0x41	; 65
    7cea:	c5 01       	movw	r24, r10
    7cec:	b4 01       	movw	r22, r8
    7cee:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    7cf2:	4b 01       	movw	r8, r22
    7cf4:	5c 01       	movw	r10, r24
    7cf6:	28 01       	movw	r4, r16
    7cf8:	e7 cf       	rjmp	.-50     	; 0x7cc8 <p_etoa+0x104>
    7cfa:	a7 01       	movw	r20, r14
    7cfc:	96 01       	movw	r18, r12
    7cfe:	c5 01       	movw	r24, r10
    7d00:	b4 01       	movw	r22, r8
    7d02:	0e 94 b2 e2 	call	0x1c564	; 0x1c564 <__addsf3>
    7d06:	4b 01       	movw	r8, r22
    7d08:	5c 01       	movw	r10, r24
    7d0a:	82 01       	movw	r16, r4
    7d0c:	2f ef       	ldi	r18, 0xFF	; 255
    7d0e:	42 1a       	sub	r4, r18
    7d10:	52 0a       	sbc	r5, r18
    7d12:	20 e0       	ldi	r18, 0x00	; 0
    7d14:	30 e0       	ldi	r19, 0x00	; 0
    7d16:	40 e2       	ldi	r20, 0x20	; 32
    7d18:	51 e4       	ldi	r21, 0x41	; 65
    7d1a:	0e 94 65 e4 	call	0x1c8ca	; 0x1c8ca <__gesf2>
    7d1e:	87 fd       	sbrc	r24, 7
    7d20:	09 c0       	rjmp	.+18     	; 0x7d34 <p_etoa+0x170>
    7d22:	20 e0       	ldi	r18, 0x00	; 0
    7d24:	30 e0       	ldi	r19, 0x00	; 0
    7d26:	40 e2       	ldi	r20, 0x20	; 32
    7d28:	51 e4       	ldi	r21, 0x41	; 65
    7d2a:	c5 01       	movw	r24, r10
    7d2c:	b4 01       	movw	r22, r8
    7d2e:	0e 94 1a e3 	call	0x1c634	; 0x1c634 <__divsf3>
    7d32:	e9 cf       	rjmp	.-46     	; 0x7d06 <p_etoa+0x142>
    7d34:	0e 87       	std	Y+14, r16	; 0x0e
    7d36:	1f 87       	std	Y+15, r17	; 0x0f
    7d38:	85 e6       	ldi	r24, 0x65	; 101
    7d3a:	89 83       	std	Y+1, r24	; 0x01
    7d3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    7d3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    7d40:	97 ff       	sbrs	r25, 7
    7d42:	08 c0       	rjmp	.+16     	; 0x7d54 <p_etoa+0x190>
    7d44:	91 95       	neg	r25
    7d46:	81 95       	neg	r24
    7d48:	91 09       	sbc	r25, r1
    7d4a:	9f 87       	std	Y+15, r25	; 0x0f
    7d4c:	8e 87       	std	Y+14, r24	; 0x0e
    7d4e:	8d e2       	ldi	r24, 0x2D	; 45
    7d50:	90 e0       	ldi	r25, 0x00	; 0
    7d52:	02 c0       	rjmp	.+4      	; 0x7d58 <p_etoa+0x194>
    7d54:	8b e2       	ldi	r24, 0x2B	; 43
    7d56:	90 e0       	ldi	r25, 0x00	; 0
    7d58:	6c 01       	movw	r12, r24
    7d5a:	82 e0       	ldi	r24, 0x02	; 2
    7d5c:	e8 2e       	mov	r14, r24
    7d5e:	f1 2c       	mov	r15, r1
    7d60:	8e 01       	movw	r16, r28
    7d62:	02 5f       	subi	r16, 0xF2	; 242
    7d64:	1f 4f       	sbci	r17, 0xFF	; 255
    7d66:	2a e0       	ldi	r18, 0x0A	; 10
    7d68:	30 e0       	ldi	r19, 0x00	; 0
    7d6a:	42 e0       	ldi	r20, 0x02	; 2
    7d6c:	50 e0       	ldi	r21, 0x00	; 0
    7d6e:	65 e0       	ldi	r22, 0x05	; 5
    7d70:	70 e0       	ldi	r23, 0x00	; 0
    7d72:	ce 01       	movw	r24, r28
    7d74:	02 96       	adiw	r24, 0x02	; 2
    7d76:	26 dd       	rcall	.-1460   	; 0x77c4 <bin2num>
    7d78:	9c 01       	movw	r18, r24
    7d7a:	93 2d       	mov	r25, r3
    7d7c:	98 72       	andi	r25, 0x28	; 40
    7d7e:	90 32       	cpi	r25, 0x20	; 32
    7d80:	71 f0       	breq	.+28     	; 0x7d9e <p_etoa+0x1da>
    7d82:	c5 01       	movw	r24, r10
    7d84:	b4 01       	movw	r22, r8
    7d86:	0e 94 82 e3 	call	0x1c704	; 0x1c704 <__fixsfsi>
    7d8a:	6b 01       	movw	r12, r22
    7d8c:	7c 01       	movw	r14, r24
    7d8e:	60 e3       	ldi	r22, 0x30	; 48
    7d90:	6c 0d       	add	r22, r12
    7d92:	ce 01       	movw	r24, r28
    7d94:	08 96       	adiw	r24, 0x08	; 8
    7d96:	9f dd       	rcall	.-1218   	; 0x78d6 <pch>
    7d98:	21 10       	cpse	r2, r1
    7d9a:	20 c0       	rjmp	.+64     	; 0x7ddc <p_etoa+0x218>
    7d9c:	63 c0       	rjmp	.+198    	; 0x7e64 <p_etoa+0x2a0>
    7d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7da0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7da2:	0a 89       	ldd	r16, Y+18	; 0x12
    7da4:	1b 89       	ldd	r17, Y+19	; 0x13
    7da6:	08 1b       	sub	r16, r24
    7da8:	19 0b       	sbc	r17, r25
    7daa:	22 20       	and	r2, r2
    7dac:	41 f0       	breq	.+16     	; 0x7dbe <p_etoa+0x1fa>
    7dae:	61 14       	cp	r6, r1
    7db0:	71 04       	cpc	r7, r1
    7db2:	29 f0       	breq	.+10     	; 0x7dbe <p_etoa+0x1fa>
    7db4:	06 19       	sub	r16, r6
    7db6:	17 09       	sbc	r17, r7
    7db8:	06 50       	subi	r16, 0x06	; 6
    7dba:	11 09       	sbc	r17, r1
    7dbc:	02 c0       	rjmp	.+4      	; 0x7dc2 <p_etoa+0x1fe>
    7dbe:	05 50       	subi	r16, 0x05	; 5
    7dc0:	11 09       	sbc	r17, r1
    7dc2:	24 30       	cpi	r18, 0x04	; 4
    7dc4:	31 05       	cpc	r19, r1
    7dc6:	14 f0       	brlt	.+4      	; 0x7dcc <p_etoa+0x208>
    7dc8:	01 50       	subi	r16, 0x01	; 1
    7dca:	11 09       	sbc	r17, r1
    7dcc:	10 16       	cp	r1, r16
    7dce:	11 06       	cpc	r1, r17
    7dd0:	c4 f6       	brge	.-80     	; 0x7d82 <p_etoa+0x1be>
    7dd2:	60 e3       	ldi	r22, 0x30	; 48
    7dd4:	ce 01       	movw	r24, r28
    7dd6:	08 96       	adiw	r24, 0x08	; 8
    7dd8:	7e dd       	rcall	.-1284   	; 0x78d6 <pch>
    7dda:	f6 cf       	rjmp	.-20     	; 0x7dc8 <p_etoa+0x204>
    7ddc:	61 14       	cp	r6, r1
    7dde:	71 04       	cpc	r7, r1
    7de0:	09 f4       	brne	.+2      	; 0x7de4 <p_etoa+0x220>
    7de2:	40 c0       	rjmp	.+128    	; 0x7e64 <p_etoa+0x2a0>
    7de4:	b6 01       	movw	r22, r12
    7de6:	dd 0c       	add	r13, r13
    7de8:	88 0b       	sbc	r24, r24
    7dea:	99 0b       	sbc	r25, r25
    7dec:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__floatsisf>
    7df0:	9b 01       	movw	r18, r22
    7df2:	ac 01       	movw	r20, r24
    7df4:	c5 01       	movw	r24, r10
    7df6:	b4 01       	movw	r22, r8
    7df8:	0e 94 b1 e2 	call	0x1c562	; 0x1c562 <__subsf3>
    7dfc:	20 e0       	ldi	r18, 0x00	; 0
    7dfe:	30 e0       	ldi	r19, 0x00	; 0
    7e00:	40 e2       	ldi	r20, 0x20	; 32
    7e02:	51 e4       	ldi	r21, 0x41	; 65
    7e04:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    7e08:	4b 01       	movw	r8, r22
    7e0a:	5c 01       	movw	r10, r24
    7e0c:	6e e2       	ldi	r22, 0x2E	; 46
    7e0e:	ce 01       	movw	r24, r28
    7e10:	08 96       	adiw	r24, 0x08	; 8
    7e12:	61 dd       	rcall	.-1342   	; 0x78d6 <pch>
    7e14:	c5 01       	movw	r24, r10
    7e16:	b4 01       	movw	r22, r8
    7e18:	0e 94 82 e3 	call	0x1c704	; 0x1c704 <__fixsfsi>
    7e1c:	6b 01       	movw	r12, r22
    7e1e:	7c 01       	movw	r14, r24
    7e20:	07 2e       	mov	r0, r23
    7e22:	00 0c       	add	r0, r0
    7e24:	88 0b       	sbc	r24, r24
    7e26:	99 0b       	sbc	r25, r25
    7e28:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__floatsisf>
    7e2c:	9b 01       	movw	r18, r22
    7e2e:	ac 01       	movw	r20, r24
    7e30:	c5 01       	movw	r24, r10
    7e32:	b4 01       	movw	r22, r8
    7e34:	0e 94 b1 e2 	call	0x1c562	; 0x1c562 <__subsf3>
    7e38:	4b 01       	movw	r8, r22
    7e3a:	5c 01       	movw	r10, r24
    7e3c:	b6 01       	movw	r22, r12
    7e3e:	60 5d       	subi	r22, 0xD0	; 208
    7e40:	7f 4f       	sbci	r23, 0xFF	; 255
    7e42:	ce 01       	movw	r24, r28
    7e44:	08 96       	adiw	r24, 0x08	; 8
    7e46:	47 dd       	rcall	.-1394   	; 0x78d6 <pch>
    7e48:	20 e0       	ldi	r18, 0x00	; 0
    7e4a:	30 e0       	ldi	r19, 0x00	; 0
    7e4c:	40 e2       	ldi	r20, 0x20	; 32
    7e4e:	51 e4       	ldi	r21, 0x41	; 65
    7e50:	c5 01       	movw	r24, r10
    7e52:	b4 01       	movw	r22, r8
    7e54:	0e 94 69 e4 	call	0x1c8d2	; 0x1c8d2 <__mulsf3>
    7e58:	4b 01       	movw	r8, r22
    7e5a:	5c 01       	movw	r10, r24
    7e5c:	31 e0       	ldi	r19, 0x01	; 1
    7e5e:	63 1a       	sub	r6, r19
    7e60:	71 08       	sbc	r7, r1
    7e62:	c1 f6       	brne	.-80     	; 0x7e14 <p_etoa+0x250>
    7e64:	8e 01       	movw	r16, r28
    7e66:	0f 5f       	subi	r16, 0xFF	; 255
    7e68:	1f 4f       	sbci	r17, 0xFF	; 255
    7e6a:	f8 01       	movw	r30, r16
    7e6c:	61 91       	ld	r22, Z+
    7e6e:	8f 01       	movw	r16, r30
    7e70:	ce 01       	movw	r24, r28
    7e72:	08 96       	adiw	r24, 0x08	; 8
    7e74:	66 23       	and	r22, r22
    7e76:	11 f0       	breq	.+4      	; 0x7e7c <p_etoa+0x2b8>
    7e78:	2e dd       	rcall	.-1444   	; 0x78d6 <pch>
    7e7a:	f7 cf       	rjmp	.-18     	; 0x7e6a <p_etoa+0x2a6>
    7e7c:	2c dd       	rcall	.-1448   	; 0x78d6 <pch>
    7e7e:	e8 89       	ldd	r30, Y+16	; 0x10
    7e80:	f9 89       	ldd	r31, Y+17	; 0x11
    7e82:	01 90       	ld	r0, Z+
    7e84:	00 20       	and	r0, r0
    7e86:	e9 f7       	brne	.-6      	; 0x7e82 <p_etoa+0x2be>
    7e88:	cf 01       	movw	r24, r30
    7e8a:	01 97       	sbiw	r24, 0x01	; 1
    7e8c:	28 89       	ldd	r18, Y+16	; 0x10
    7e8e:	39 89       	ldd	r19, Y+17	; 0x11
    7e90:	82 1b       	sub	r24, r18
    7e92:	93 0b       	sbc	r25, r19
    7e94:	63 96       	adiw	r28, 0x13	; 19
    7e96:	e2 e1       	ldi	r30, 0x12	; 18
    7e98:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00007e9c <_puts_pad>:
    7e9c:	a0 e0       	ldi	r26, 0x00	; 0
    7e9e:	b0 e0       	ldi	r27, 0x00	; 0
    7ea0:	e4 e5       	ldi	r30, 0x54	; 84
    7ea2:	ff e3       	ldi	r31, 0x3F	; 63
    7ea4:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
    7ea8:	6c 01       	movw	r12, r24
    7eaa:	4b 01       	movw	r8, r22
    7eac:	79 01       	movw	r14, r18
    7eae:	24 17       	cp	r18, r20
    7eb0:	35 07       	cpc	r19, r21
    7eb2:	24 f4       	brge	.+8      	; 0x7ebc <_puts_pad+0x20>
    7eb4:	ea 01       	movw	r28, r20
    7eb6:	c2 1b       	sub	r28, r18
    7eb8:	d3 0b       	sbc	r29, r19
    7eba:	02 c0       	rjmp	.+4      	; 0x7ec0 <_puts_pad+0x24>
    7ebc:	c0 e0       	ldi	r28, 0x00	; 0
    7ebe:	d0 e0       	ldi	r29, 0x00	; 0
    7ec0:	01 15       	cp	r16, r1
    7ec2:	11 05       	cpc	r17, r1
    7ec4:	49 f4       	brne	.+18     	; 0x7ed8 <_puts_pad+0x3c>
    7ec6:	21 97       	sbiw	r28, 0x01	; 1
    7ec8:	38 f0       	brcs	.+14     	; 0x7ed8 <_puts_pad+0x3c>
    7eca:	d6 01       	movw	r26, r12
    7ecc:	ed 91       	ld	r30, X+
    7ece:	fc 91       	ld	r31, X
    7ed0:	60 e2       	ldi	r22, 0x20	; 32
    7ed2:	c6 01       	movw	r24, r12
    7ed4:	09 95       	icall
    7ed6:	f7 cf       	rjmp	.-18     	; 0x7ec6 <_puts_pad+0x2a>
    7ed8:	54 01       	movw	r10, r8
    7eda:	f5 01       	movw	r30, r10
    7edc:	61 91       	ld	r22, Z+
    7ede:	5f 01       	movw	r10, r30
    7ee0:	66 23       	and	r22, r22
    7ee2:	61 f0       	breq	.+24     	; 0x7efc <_puts_pad+0x60>
    7ee4:	e1 14       	cp	r14, r1
    7ee6:	f1 04       	cpc	r15, r1
    7ee8:	49 f0       	breq	.+18     	; 0x7efc <_puts_pad+0x60>
    7eea:	d6 01       	movw	r26, r12
    7eec:	ed 91       	ld	r30, X+
    7eee:	fc 91       	ld	r31, X
    7ef0:	c6 01       	movw	r24, r12
    7ef2:	09 95       	icall
    7ef4:	b1 e0       	ldi	r27, 0x01	; 1
    7ef6:	eb 1a       	sub	r14, r27
    7ef8:	f1 08       	sbc	r15, r1
    7efa:	ef cf       	rjmp	.-34     	; 0x7eda <_puts_pad+0x3e>
    7efc:	01 15       	cp	r16, r1
    7efe:	11 05       	cpc	r17, r1
    7f00:	51 f0       	breq	.+20     	; 0x7f16 <_puts_pad+0x7a>
    7f02:	20 97       	sbiw	r28, 0x00	; 0
    7f04:	41 f0       	breq	.+16     	; 0x7f16 <_puts_pad+0x7a>
    7f06:	d6 01       	movw	r26, r12
    7f08:	ed 91       	ld	r30, X+
    7f0a:	fc 91       	ld	r31, X
    7f0c:	60 e2       	ldi	r22, 0x20	; 32
    7f0e:	c6 01       	movw	r24, r12
    7f10:	09 95       	icall
    7f12:	21 97       	sbiw	r28, 0x01	; 1
    7f14:	f6 cf       	rjmp	.-20     	; 0x7f02 <_puts_pad+0x66>
    7f16:	cd b7       	in	r28, 0x3d	; 61
    7f18:	de b7       	in	r29, 0x3e	; 62
    7f1a:	ec e0       	ldi	r30, 0x0C	; 12
    7f1c:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

00007f20 <_puts_pad_X>:
    7f20:	2f 92       	push	r2
    7f22:	3f 92       	push	r3
    7f24:	4f 92       	push	r4
    7f26:	6f 92       	push	r6
    7f28:	7f 92       	push	r7
    7f2a:	8f 92       	push	r8
    7f2c:	cf 92       	push	r12
    7f2e:	df 92       	push	r13
    7f30:	ef 92       	push	r14
    7f32:	ff 92       	push	r15
    7f34:	0f 93       	push	r16
    7f36:	1f 93       	push	r17
    7f38:	cf 93       	push	r28
    7f3a:	df 93       	push	r29
    7f3c:	6c 01       	movw	r12, r24
    7f3e:	3a 01       	movw	r6, r20
    7f40:	86 2e       	mov	r8, r22
    7f42:	02 17       	cp	r16, r18
    7f44:	13 07       	cpc	r17, r19
    7f46:	24 f4       	brge	.+8      	; 0x7f50 <_puts_pad_X+0x30>
    7f48:	e9 01       	movw	r28, r18
    7f4a:	c0 1b       	sub	r28, r16
    7f4c:	d1 0b       	sbc	r29, r17
    7f4e:	02 c0       	rjmp	.+4      	; 0x7f54 <_puts_pad_X+0x34>
    7f50:	c0 e0       	ldi	r28, 0x00	; 0
    7f52:	d0 e0       	ldi	r29, 0x00	; 0
    7f54:	e1 14       	cp	r14, r1
    7f56:	f1 04       	cpc	r15, r1
    7f58:	49 f4       	brne	.+18     	; 0x7f6c <_puts_pad_X+0x4c>
    7f5a:	21 97       	sbiw	r28, 0x01	; 1
    7f5c:	38 f0       	brcs	.+14     	; 0x7f6c <_puts_pad_X+0x4c>
    7f5e:	d6 01       	movw	r26, r12
    7f60:	ed 91       	ld	r30, X+
    7f62:	fc 91       	ld	r31, X
    7f64:	60 e2       	ldi	r22, 0x20	; 32
    7f66:	c6 01       	movw	r24, r12
    7f68:	09 95       	icall
    7f6a:	f7 cf       	rjmp	.-18     	; 0x7f5a <_puts_pad_X+0x3a>
    7f6c:	13 01       	movw	r2, r6
    7f6e:	48 2c       	mov	r4, r8
    7f70:	20 0e       	add	r2, r16
    7f72:	31 1e       	adc	r3, r17
    7f74:	41 1c       	adc	r4, r1
    7f76:	17 fd       	sbrc	r17, 7
    7f78:	4a 94       	dec	r4
    7f7a:	f3 01       	movw	r30, r6
    7f7c:	58 2d       	mov	r21, r8
    7f7e:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    7f82:	66 23       	and	r22, r22
    7f84:	71 f0       	breq	.+28     	; 0x7fa2 <_puts_pad_X+0x82>
    7f86:	62 14       	cp	r6, r2
    7f88:	73 04       	cpc	r7, r3
    7f8a:	84 04       	cpc	r8, r4
    7f8c:	51 f0       	breq	.+20     	; 0x7fa2 <_puts_pad_X+0x82>
    7f8e:	d6 01       	movw	r26, r12
    7f90:	ed 91       	ld	r30, X+
    7f92:	fc 91       	ld	r31, X
    7f94:	c6 01       	movw	r24, r12
    7f96:	09 95       	icall
    7f98:	bf ef       	ldi	r27, 0xFF	; 255
    7f9a:	6b 1a       	sub	r6, r27
    7f9c:	7b 0a       	sbc	r7, r27
    7f9e:	8b 0a       	sbc	r8, r27
    7fa0:	ec cf       	rjmp	.-40     	; 0x7f7a <_puts_pad_X+0x5a>
    7fa2:	ef 28       	or	r14, r15
    7fa4:	51 f0       	breq	.+20     	; 0x7fba <_puts_pad_X+0x9a>
    7fa6:	20 97       	sbiw	r28, 0x00	; 0
    7fa8:	41 f0       	breq	.+16     	; 0x7fba <_puts_pad_X+0x9a>
    7faa:	d6 01       	movw	r26, r12
    7fac:	ed 91       	ld	r30, X+
    7fae:	fc 91       	ld	r31, X
    7fb0:	60 e2       	ldi	r22, 0x20	; 32
    7fb2:	c6 01       	movw	r24, r12
    7fb4:	09 95       	icall
    7fb6:	21 97       	sbiw	r28, 0x01	; 1
    7fb8:	f6 cf       	rjmp	.-20     	; 0x7fa6 <_puts_pad_X+0x86>
    7fba:	df 91       	pop	r29
    7fbc:	cf 91       	pop	r28
    7fbe:	1f 91       	pop	r17
    7fc0:	0f 91       	pop	r16
    7fc2:	ff 90       	pop	r15
    7fc4:	ef 90       	pop	r14
    7fc6:	df 90       	pop	r13
    7fc8:	cf 90       	pop	r12
    7fca:	8f 90       	pop	r8
    7fcc:	7f 90       	pop	r7
    7fce:	6f 90       	pop	r6
    7fd0:	4f 90       	pop	r4
    7fd2:	3f 90       	pop	r3
    7fd4:	2f 90       	pop	r2
    7fd6:	08 95       	ret

00007fd8 <strlen_X>:
    7fd8:	cf 92       	push	r12
    7fda:	df 92       	push	r13
    7fdc:	ef 92       	push	r14
    7fde:	9b 01       	movw	r18, r22
    7fe0:	48 2f       	mov	r20, r24
    7fe2:	80 e0       	ldi	r24, 0x00	; 0
    7fe4:	90 e0       	ldi	r25, 0x00	; 0
    7fe6:	2f 5f       	subi	r18, 0xFF	; 255
    7fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    7fea:	4f 4f       	sbci	r20, 0xFF	; 255
    7fec:	69 01       	movw	r12, r18
    7fee:	e4 2e       	mov	r14, r20
    7ff0:	51 e0       	ldi	r21, 0x01	; 1
    7ff2:	c5 1a       	sub	r12, r21
    7ff4:	d1 08       	sbc	r13, r1
    7ff6:	e1 08       	sbc	r14, r1
    7ff8:	f6 01       	movw	r30, r12
    7ffa:	5e 2d       	mov	r21, r14
    7ffc:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    8000:	66 23       	and	r22, r22
    8002:	11 f0       	breq	.+4      	; 0x8008 <strlen_X+0x30>
    8004:	01 96       	adiw	r24, 0x01	; 1
    8006:	ef cf       	rjmp	.-34     	; 0x7fe6 <strlen_X+0xe>
    8008:	ef 90       	pop	r14
    800a:	df 90       	pop	r13
    800c:	cf 90       	pop	r12
    800e:	08 95       	ret

00008010 <_printf_fn>:
    8010:	ae e6       	ldi	r26, 0x6E	; 110
    8012:	b0 e0       	ldi	r27, 0x00	; 0
    8014:	ee e0       	ldi	r30, 0x0E	; 14
    8016:	f0 e4       	ldi	r31, 0x40	; 64
    8018:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    801c:	a5 96       	adiw	r28, 0x25	; 37
    801e:	9f af       	std	Y+63, r25	; 0x3f
    8020:	8e af       	std	Y+62, r24	; 0x3e
    8022:	a5 97       	sbiw	r28, 0x25	; 37
    8024:	6a 01       	movw	r12, r20
    8026:	e6 2e       	mov	r14, r22
    8028:	19 01       	movw	r2, r18
    802a:	a9 96       	adiw	r28, 0x29	; 41
    802c:	1c ae       	std	Y+60, r1	; 0x3c
    802e:	1d ae       	std	Y+61, r1	; 0x3d
    8030:	1e ae       	std	Y+62, r1	; 0x3e
    8032:	1f ae       	std	Y+63, r1	; 0x3f
    8034:	a9 97       	sbiw	r28, 0x29	; 41
    8036:	8a e1       	ldi	r24, 0x1A	; 26
    8038:	94 e0       	ldi	r25, 0x04	; 4
    803a:	9c 01       	movw	r18, r24
    803c:	40 e8       	ldi	r20, 0x80	; 128
    803e:	ae 96       	adiw	r28, 0x2e	; 46
    8040:	2d af       	std	Y+61, r18	; 0x3d
    8042:	3e af       	std	Y+62, r19	; 0x3e
    8044:	4f af       	std	Y+63, r20	; 0x3f
    8046:	ae 97       	sbiw	r28, 0x2e	; 46
    8048:	ae 01       	movw	r20, r28
    804a:	4f 5a       	subi	r20, 0xAF	; 175
    804c:	5f 4f       	sbci	r21, 0xFF	; 255
    804e:	67 96       	adiw	r28, 0x17	; 23
    8050:	5f af       	std	Y+63, r21	; 0x3f
    8052:	4e af       	std	Y+62, r20	; 0x3e
    8054:	67 97       	sbiw	r28, 0x17	; 23
    8056:	ce 01       	movw	r24, r28
    8058:	8d 5b       	subi	r24, 0xBD	; 189
    805a:	9f 4f       	sbci	r25, 0xFF	; 255
    805c:	69 96       	adiw	r28, 0x19	; 25
    805e:	9f af       	std	Y+63, r25	; 0x3f
    8060:	8e af       	std	Y+62, r24	; 0x3e
    8062:	69 97       	sbiw	r28, 0x19	; 25
    8064:	de 01       	movw	r26, r28
    8066:	a5 5b       	subi	r26, 0xB5	; 181
    8068:	bf 4f       	sbci	r27, 0xFF	; 255
    806a:	6b 96       	adiw	r28, 0x1b	; 27
    806c:	bf af       	std	Y+63, r27	; 0x3f
    806e:	ae af       	std	Y+62, r26	; 0x3e
    8070:	6b 97       	sbiw	r28, 0x1b	; 27
    8072:	fe 01       	movw	r30, r28
    8074:	ed 5a       	subi	r30, 0xAD	; 173
    8076:	ff 4f       	sbci	r31, 0xFF	; 255
    8078:	6d 96       	adiw	r28, 0x1d	; 29
    807a:	ff af       	std	Y+63, r31	; 0x3f
    807c:	ee af       	std	Y+62, r30	; 0x3e
    807e:	6d 97       	sbiw	r28, 0x1d	; 29
    8080:	f6 01       	movw	r30, r12
    8082:	5e 2d       	mov	r21, r14
    8084:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    8088:	66 23       	and	r22, r22
    808a:	09 f4       	brne	.+2      	; 0x808e <_printf_fn+0x7e>
    808c:	13 c4       	rjmp	.+2086   	; 0x88b4 <_printf_fn+0x8a4>
    808e:	ae 2d       	mov	r26, r14
    8090:	c6 01       	movw	r24, r12
    8092:	01 96       	adiw	r24, 0x01	; 1
    8094:	a1 1d       	adc	r26, r1
    8096:	3c 01       	movw	r6, r24
    8098:	8a 2e       	mov	r8, r26
    809a:	65 32       	cpi	r22, 0x25	; 37
    809c:	51 f0       	breq	.+20     	; 0x80b2 <_printf_fn+0xa2>
    809e:	a5 96       	adiw	r28, 0x25	; 37
    80a0:	ae ad       	ldd	r26, Y+62	; 0x3e
    80a2:	bf ad       	ldd	r27, Y+63	; 0x3f
    80a4:	a5 97       	sbiw	r28, 0x25	; 37
    80a6:	ed 91       	ld	r30, X+
    80a8:	fc 91       	ld	r31, X
    80aa:	11 97       	sbiw	r26, 0x01	; 1
    80ac:	cd 01       	movw	r24, r26
    80ae:	09 95       	icall
    80b0:	d5 c3       	rjmp	.+1962   	; 0x885c <_printf_fn+0x84c>
    80b2:	91 2c       	mov	r9, r1
    80b4:	f3 01       	movw	r30, r6
    80b6:	58 2d       	mov	r21, r8
    80b8:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    80bc:	63 32       	cpi	r22, 0x23	; 35
    80be:	19 f4       	brne	.+6      	; 0x80c6 <_printf_fn+0xb6>
    80c0:	68 94       	set
    80c2:	97 f8       	bld	r9, 7
    80c4:	04 c0       	rjmp	.+8      	; 0x80ce <_printf_fn+0xbe>
    80c6:	6b 32       	cpi	r22, 0x2B	; 43
    80c8:	39 f4       	brne	.+14     	; 0x80d8 <_printf_fn+0xc8>
    80ca:	68 94       	set
    80cc:	92 f8       	bld	r9, 2
    80ce:	bf ef       	ldi	r27, 0xFF	; 255
    80d0:	6b 1a       	sub	r6, r27
    80d2:	7b 0a       	sbc	r7, r27
    80d4:	8b 0a       	sbc	r8, r27
    80d6:	ee cf       	rjmp	.-36     	; 0x80b4 <_printf_fn+0xa4>
    80d8:	6d 32       	cpi	r22, 0x2D	; 45
    80da:	a9 f4       	brne	.+42     	; 0x8106 <_printf_fn+0xf6>
    80dc:	93 fc       	sbrc	r9, 3
    80de:	05 c0       	rjmp	.+10     	; 0x80ea <_printf_fn+0xda>
    80e0:	6d 32       	cpi	r22, 0x2D	; 45
    80e2:	19 f4       	brne	.+6      	; 0x80ea <_printf_fn+0xda>
    80e4:	68 94       	set
    80e6:	93 f8       	bld	r9, 3
    80e8:	f2 cf       	rjmp	.-28     	; 0x80ce <_printf_fn+0xbe>
    80ea:	94 fc       	sbrc	r9, 4
    80ec:	05 c0       	rjmp	.+10     	; 0x80f8 <_printf_fn+0xe8>
    80ee:	60 32       	cpi	r22, 0x20	; 32
    80f0:	19 f4       	brne	.+6      	; 0x80f8 <_printf_fn+0xe8>
    80f2:	68 94       	set
    80f4:	94 f8       	bld	r9, 4
    80f6:	eb cf       	rjmp	.-42     	; 0x80ce <_printf_fn+0xbe>
    80f8:	95 fc       	sbrc	r9, 5
    80fa:	e9 cf       	rjmp	.-46     	; 0x80ce <_printf_fn+0xbe>
    80fc:	60 33       	cpi	r22, 0x30	; 48
    80fe:	39 f7       	brne	.-50     	; 0x80ce <_printf_fn+0xbe>
    8100:	68 94       	set
    8102:	95 f8       	bld	r9, 5
    8104:	e4 cf       	rjmp	.-56     	; 0x80ce <_printf_fn+0xbe>
    8106:	86 2f       	mov	r24, r22
    8108:	8f 7e       	andi	r24, 0xEF	; 239
    810a:	80 32       	cpi	r24, 0x20	; 32
    810c:	39 f3       	breq	.-50     	; 0x80dc <_printf_fn+0xcc>
    810e:	70 e0       	ldi	r23, 0x00	; 0
    8110:	60 53       	subi	r22, 0x30	; 48
    8112:	71 09       	sbc	r23, r1
    8114:	6f 96       	adiw	r28, 0x1f	; 31
    8116:	1f ae       	std	Y+63, r1	; 0x3f
    8118:	1e ae       	std	Y+62, r1	; 0x3e
    811a:	6f 97       	sbiw	r28, 0x1f	; 31
    811c:	6a 30       	cpi	r22, 0x0A	; 10
    811e:	71 05       	cpc	r23, r1
    8120:	10 f5       	brcc	.+68     	; 0x8166 <_printf_fn+0x156>
    8122:	2a e0       	ldi	r18, 0x0A	; 10
    8124:	f3 01       	movw	r30, r6
    8126:	58 2d       	mov	r21, r8
    8128:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    812c:	70 e0       	ldi	r23, 0x00	; 0
    812e:	cb 01       	movw	r24, r22
    8130:	c0 97       	sbiw	r24, 0x30	; 48
    8132:	0a 97       	sbiw	r24, 0x0a	; 10
    8134:	b0 f4       	brcc	.+44     	; 0x8162 <_printf_fn+0x152>
    8136:	ef ef       	ldi	r30, 0xFF	; 255
    8138:	6e 1a       	sub	r6, r30
    813a:	7e 0a       	sbc	r7, r30
    813c:	8e 0a       	sbc	r8, r30
    813e:	6f 96       	adiw	r28, 0x1f	; 31
    8140:	4e ad       	ldd	r20, Y+62	; 0x3e
    8142:	5f ad       	ldd	r21, Y+63	; 0x3f
    8144:	6f 97       	sbiw	r28, 0x1f	; 31
    8146:	24 9f       	mul	r18, r20
    8148:	c0 01       	movw	r24, r0
    814a:	25 9f       	mul	r18, r21
    814c:	90 0d       	add	r25, r0
    814e:	11 24       	eor	r1, r1
    8150:	68 0f       	add	r22, r24
    8152:	79 1f       	adc	r23, r25
    8154:	cb 01       	movw	r24, r22
    8156:	c0 97       	sbiw	r24, 0x30	; 48
    8158:	6f 96       	adiw	r28, 0x1f	; 31
    815a:	9f af       	std	Y+63, r25	; 0x3f
    815c:	8e af       	std	Y+62, r24	; 0x3e
    815e:	6f 97       	sbiw	r28, 0x1f	; 31
    8160:	e1 cf       	rjmp	.-62     	; 0x8124 <_printf_fn+0x114>
    8162:	68 94       	set
    8164:	90 f8       	bld	r9, 0
    8166:	f3 01       	movw	r30, r6
    8168:	58 2d       	mov	r21, r8
    816a:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    816e:	6e 32       	cpi	r22, 0x2E	; 46
    8170:	61 f5       	brne	.+88     	; 0x81ca <_printf_fn+0x1ba>
    8172:	9f ef       	ldi	r25, 0xFF	; 255
    8174:	69 1a       	sub	r6, r25
    8176:	79 0a       	sbc	r7, r25
    8178:	89 0a       	sbc	r8, r25
    817a:	a1 96       	adiw	r28, 0x21	; 33
    817c:	1f ae       	std	Y+63, r1	; 0x3f
    817e:	1e ae       	std	Y+62, r1	; 0x3e
    8180:	a1 97       	sbiw	r28, 0x21	; 33
    8182:	2a e0       	ldi	r18, 0x0A	; 10
    8184:	f3 01       	movw	r30, r6
    8186:	58 2d       	mov	r21, r8
    8188:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    818c:	70 e0       	ldi	r23, 0x00	; 0
    818e:	cb 01       	movw	r24, r22
    8190:	c0 97       	sbiw	r24, 0x30	; 48
    8192:	0a 97       	sbiw	r24, 0x0a	; 10
    8194:	b8 f4       	brcc	.+46     	; 0x81c4 <_printf_fn+0x1b4>
    8196:	af ef       	ldi	r26, 0xFF	; 255
    8198:	6a 1a       	sub	r6, r26
    819a:	7a 0a       	sbc	r7, r26
    819c:	8a 0a       	sbc	r8, r26
    819e:	a1 96       	adiw	r28, 0x21	; 33
    81a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    81a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    81a4:	a1 97       	sbiw	r28, 0x21	; 33
    81a6:	2e 9f       	mul	r18, r30
    81a8:	c0 01       	movw	r24, r0
    81aa:	2f 9f       	mul	r18, r31
    81ac:	90 0d       	add	r25, r0
    81ae:	11 24       	eor	r1, r1
    81b0:	68 0f       	add	r22, r24
    81b2:	79 1f       	adc	r23, r25
    81b4:	ab 01       	movw	r20, r22
    81b6:	40 53       	subi	r20, 0x30	; 48
    81b8:	51 09       	sbc	r21, r1
    81ba:	a1 96       	adiw	r28, 0x21	; 33
    81bc:	5f af       	std	Y+63, r21	; 0x3f
    81be:	4e af       	std	Y+62, r20	; 0x3e
    81c0:	a1 97       	sbiw	r28, 0x21	; 33
    81c2:	e0 cf       	rjmp	.-64     	; 0x8184 <_printf_fn+0x174>
    81c4:	68 94       	set
    81c6:	91 f8       	bld	r9, 1
    81c8:	04 c0       	rjmp	.+8      	; 0x81d2 <_printf_fn+0x1c2>
    81ca:	a1 96       	adiw	r28, 0x21	; 33
    81cc:	1f ae       	std	Y+63, r1	; 0x3f
    81ce:	1e ae       	std	Y+62, r1	; 0x3e
    81d0:	a1 97       	sbiw	r28, 0x21	; 33
    81d2:	f3 01       	movw	r30, r6
    81d4:	58 2d       	mov	r21, r8
    81d6:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    81da:	69 34       	cpi	r22, 0x49	; 73
    81dc:	91 f5       	brne	.+100    	; 0x8242 <_printf_fn+0x232>
    81de:	5f ef       	ldi	r21, 0xFF	; 255
    81e0:	65 1a       	sub	r6, r21
    81e2:	75 0a       	sbc	r7, r21
    81e4:	85 0a       	sbc	r8, r21
    81e6:	41 2c       	mov	r4, r1
    81e8:	51 2c       	mov	r5, r1
    81ea:	2a e0       	ldi	r18, 0x0A	; 10
    81ec:	f3 01       	movw	r30, r6
    81ee:	58 2d       	mov	r21, r8
    81f0:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    81f4:	70 e0       	ldi	r23, 0x00	; 0
    81f6:	cb 01       	movw	r24, r22
    81f8:	c0 97       	sbiw	r24, 0x30	; 48
    81fa:	0a 97       	sbiw	r24, 0x0a	; 10
    81fc:	80 f4       	brcc	.+32     	; 0x821e <_printf_fn+0x20e>
    81fe:	8f ef       	ldi	r24, 0xFF	; 255
    8200:	68 1a       	sub	r6, r24
    8202:	78 0a       	sbc	r7, r24
    8204:	88 0a       	sbc	r8, r24
    8206:	24 9d       	mul	r18, r4
    8208:	c0 01       	movw	r24, r0
    820a:	25 9d       	mul	r18, r5
    820c:	90 0d       	add	r25, r0
    820e:	11 24       	eor	r1, r1
    8210:	68 0f       	add	r22, r24
    8212:	79 1f       	adc	r23, r25
    8214:	2b 01       	movw	r4, r22
    8216:	90 e3       	ldi	r25, 0x30	; 48
    8218:	49 1a       	sub	r4, r25
    821a:	51 08       	sbc	r5, r1
    821c:	e7 cf       	rjmp	.-50     	; 0x81ec <_printf_fn+0x1dc>
    821e:	41 14       	cp	r4, r1
    8220:	51 04       	cpc	r5, r1
    8222:	09 f4       	brne	.+2      	; 0x8226 <_printf_fn+0x216>
    8224:	40 c0       	rjmp	.+128    	; 0x82a6 <_printf_fn+0x296>
    8226:	c2 01       	movw	r24, r4
    8228:	87 70       	andi	r24, 0x07	; 7
    822a:	99 27       	eor	r25, r25
    822c:	89 2b       	or	r24, r25
    822e:	c9 f5       	brne	.+114    	; 0x82a2 <_printf_fn+0x292>
    8230:	63 e0       	ldi	r22, 0x03	; 3
    8232:	55 94       	asr	r5
    8234:	47 94       	ror	r4
    8236:	6a 95       	dec	r22
    8238:	e1 f7       	brne	.-8      	; 0x8232 <_printf_fn+0x222>
    823a:	41 14       	cp	r4, r1
    823c:	51 04       	cpc	r5, r1
    823e:	99 f1       	breq	.+102    	; 0x82a6 <_printf_fn+0x296>
    8240:	21 c0       	rjmp	.+66     	; 0x8284 <_printf_fn+0x274>
    8242:	68 36       	cpi	r22, 0x68	; 104
    8244:	29 f4       	brne	.+10     	; 0x8250 <_printf_fn+0x240>
    8246:	af ef       	ldi	r26, 0xFF	; 255
    8248:	6a 1a       	sub	r6, r26
    824a:	7a 0a       	sbc	r7, r26
    824c:	8a 0a       	sbc	r8, r26
    824e:	09 c3       	rjmp	.+1554   	; 0x8862 <_printf_fn+0x852>
    8250:	6c 36       	cpi	r22, 0x6C	; 108
    8252:	09 f0       	breq	.+2      	; 0x8256 <_printf_fn+0x246>
    8254:	06 c3       	rjmp	.+1548   	; 0x8862 <_printf_fn+0x852>
    8256:	a8 2d       	mov	r26, r8
    8258:	c3 01       	movw	r24, r6
    825a:	01 96       	adiw	r24, 0x01	; 1
    825c:	a1 1d       	adc	r26, r1
    825e:	fc 01       	movw	r30, r24
    8260:	5a 2f       	mov	r21, r26
    8262:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    8266:	6c 36       	cpi	r22, 0x6C	; 108
    8268:	31 f0       	breq	.+12     	; 0x8276 <_printf_fn+0x266>
    826a:	3c 01       	movw	r6, r24
    826c:	8a 2e       	mov	r8, r26
    826e:	54 e0       	ldi	r21, 0x04	; 4
    8270:	45 2e       	mov	r4, r21
    8272:	51 2c       	mov	r5, r1
    8274:	07 c0       	rjmp	.+14     	; 0x8284 <_printf_fn+0x274>
    8276:	b2 e0       	ldi	r27, 0x02	; 2
    8278:	6b 0e       	add	r6, r27
    827a:	71 1c       	adc	r7, r1
    827c:	81 1c       	adc	r8, r1
    827e:	48 e0       	ldi	r20, 0x08	; 8
    8280:	44 2e       	mov	r4, r20
    8282:	51 2c       	mov	r5, r1
    8284:	f3 01       	movw	r30, r6
    8286:	58 2d       	mov	r21, r8
    8288:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    828c:	e6 2f       	mov	r30, r22
    828e:	f0 e0       	ldi	r31, 0x00	; 0
    8290:	a3 96       	adiw	r28, 0x23	; 35
    8292:	ff af       	std	Y+63, r31	; 0x3f
    8294:	ee af       	std	Y+62, r30	; 0x3e
    8296:	a3 97       	sbiw	r28, 0x23	; 35
    8298:	e4 36       	cpi	r30, 0x64	; 100
    829a:	f1 05       	cpc	r31, r1
    829c:	09 f4       	brne	.+2      	; 0x82a0 <_printf_fn+0x290>
    829e:	e5 c2       	rjmp	.+1482   	; 0x886a <_printf_fn+0x85a>
    82a0:	06 c0       	rjmp	.+12     	; 0x82ae <_printf_fn+0x29e>
    82a2:	41 2c       	mov	r4, r1
    82a4:	51 2c       	mov	r5, r1
    82a6:	a3 96       	adiw	r28, 0x23	; 35
    82a8:	1f ae       	std	Y+63, r1	; 0x3f
    82aa:	1e ae       	std	Y+62, r1	; 0x3e
    82ac:	a3 97       	sbiw	r28, 0x23	; 35
    82ae:	31 e0       	ldi	r19, 0x01	; 1
    82b0:	20 e0       	ldi	r18, 0x00	; 0
    82b2:	a3 96       	adiw	r28, 0x23	; 35
    82b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    82b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    82b8:	a3 97       	sbiw	r28, 0x23	; 35
    82ba:	44 34       	cpi	r20, 0x44	; 68
    82bc:	51 05       	cpc	r21, r1
    82be:	09 f0       	breq	.+2      	; 0x82c2 <_printf_fn+0x2b2>
    82c0:	30 e0       	ldi	r19, 0x00	; 0
    82c2:	83 2f       	mov	r24, r19
    82c4:	92 2f       	mov	r25, r18
    82c6:	a3 96       	adiw	r28, 0x23	; 35
    82c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    82ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    82cc:	a3 97       	sbiw	r28, 0x23	; 35
    82ce:	e2 54       	subi	r30, 0x42	; 66
    82d0:	f1 09       	sbc	r31, r1
    82d2:	e7 33       	cpi	r30, 0x37	; 55
    82d4:	f1 05       	cpc	r31, r1
    82d6:	08 f0       	brcs	.+2      	; 0x82da <_printf_fn+0x2ca>
    82d8:	57 c1       	rjmp	.+686    	; 0x8588 <_printf_fn+0x578>
    82da:	ea 5b       	subi	r30, 0xBA	; 186
    82dc:	ff 4f       	sbci	r31, 0xFF	; 255
    82de:	0c 94 29 e2 	jmp	0x1c452	; 0x1c452 <__tablejump2__>
    82e2:	32 e0       	ldi	r19, 0x02	; 2
    82e4:	43 2e       	mov	r4, r19
    82e6:	51 2c       	mov	r5, r1
    82e8:	29 2d       	mov	r18, r9
    82ea:	28 72       	andi	r18, 0x28	; 40
    82ec:	28 32       	cpi	r18, 0x28	; 40
    82ee:	11 f4       	brne	.+4      	; 0x82f4 <_printf_fn+0x2e4>
    82f0:	e8 94       	clt
    82f2:	95 f8       	bld	r9, 5
    82f4:	29 2d       	mov	r18, r9
    82f6:	22 72       	andi	r18, 0x22	; 34
    82f8:	22 32       	cpi	r18, 0x22	; 34
    82fa:	11 f4       	brne	.+4      	; 0x8300 <_printf_fn+0x2f0>
    82fc:	e8 94       	clt
    82fe:	95 f8       	bld	r9, 5
    8300:	29 2d       	mov	r18, r9
    8302:	21 72       	andi	r18, 0x21	; 33
    8304:	21 32       	cpi	r18, 0x21	; 33
    8306:	79 f4       	brne	.+30     	; 0x8326 <_printf_fn+0x316>
    8308:	a1 96       	adiw	r28, 0x21	; 33
    830a:	ae ad       	ldd	r26, Y+62	; 0x3e
    830c:	bf ad       	ldd	r27, Y+63	; 0x3f
    830e:	a1 97       	sbiw	r28, 0x21	; 33
    8310:	6f 96       	adiw	r28, 0x1f	; 31
    8312:	ee ad       	ldd	r30, Y+62	; 0x3e
    8314:	ff ad       	ldd	r31, Y+63	; 0x3f
    8316:	6f 97       	sbiw	r28, 0x1f	; 31
    8318:	ae 17       	cp	r26, r30
    831a:	bf 07       	cpc	r27, r31
    831c:	24 f4       	brge	.+8      	; 0x8326 <_printf_fn+0x316>
    831e:	a1 96       	adiw	r28, 0x21	; 33
    8320:	ff af       	std	Y+63, r31	; 0x3f
    8322:	ee af       	std	Y+62, r30	; 0x3e
    8324:	a1 97       	sbiw	r28, 0x21	; 33
    8326:	29 2d       	mov	r18, r9
    8328:	23 72       	andi	r18, 0x23	; 35
    832a:	23 32       	cpi	r18, 0x23	; 35
    832c:	79 f4       	brne	.+30     	; 0x834c <_printf_fn+0x33c>
    832e:	a1 96       	adiw	r28, 0x21	; 33
    8330:	2e ad       	ldd	r18, Y+62	; 0x3e
    8332:	3f ad       	ldd	r19, Y+63	; 0x3f
    8334:	a1 97       	sbiw	r28, 0x21	; 33
    8336:	6f 96       	adiw	r28, 0x1f	; 31
    8338:	4e ad       	ldd	r20, Y+62	; 0x3e
    833a:	5f ad       	ldd	r21, Y+63	; 0x3f
    833c:	6f 97       	sbiw	r28, 0x1f	; 31
    833e:	24 17       	cp	r18, r20
    8340:	35 07       	cpc	r19, r21
    8342:	24 f4       	brge	.+8      	; 0x834c <_printf_fn+0x33c>
    8344:	a1 96       	adiw	r28, 0x21	; 33
    8346:	5f af       	std	Y+63, r21	; 0x3f
    8348:	4e af       	std	Y+62, r20	; 0x3e
    834a:	a1 97       	sbiw	r28, 0x21	; 33
    834c:	e8 94       	clt
    834e:	94 f8       	bld	r9, 4
    8350:	e8 94       	clt
    8352:	92 f8       	bld	r9, 2
    8354:	e8 94       	clt
    8356:	96 f8       	bld	r9, 6
    8358:	52 e0       	ldi	r21, 0x02	; 2
    835a:	45 16       	cp	r4, r21
    835c:	51 04       	cpc	r5, r1
    835e:	f9 f4       	brne	.+62     	; 0x839e <_printf_fn+0x38e>
    8360:	51 01       	movw	r10, r2
    8362:	82 e0       	ldi	r24, 0x02	; 2
    8364:	a8 0e       	add	r10, r24
    8366:	b1 1c       	adc	r11, r1
    8368:	d1 01       	movw	r26, r2
    836a:	8d 91       	ld	r24, X+
    836c:	9c 91       	ld	r25, X
    836e:	65 96       	adiw	r28, 0x15	; 21
    8370:	9f af       	std	Y+63, r25	; 0x3f
    8372:	8e af       	std	Y+62, r24	; 0x3e
    8374:	65 97       	sbiw	r28, 0x15	; 21
    8376:	a3 96       	adiw	r28, 0x23	; 35
    8378:	ee ad       	ldd	r30, Y+62	; 0x3e
    837a:	ff ad       	ldd	r31, Y+63	; 0x3f
    837c:	a3 97       	sbiw	r28, 0x23	; 35
    837e:	e4 34       	cpi	r30, 0x44	; 68
    8380:	f1 05       	cpc	r31, r1
    8382:	09 f0       	breq	.+2      	; 0x8386 <_printf_fn+0x376>
    8384:	ac c0       	rjmp	.+344    	; 0x84de <_printf_fn+0x4ce>
    8386:	97 ff       	sbrs	r25, 7
    8388:	a7 c0       	rjmp	.+334    	; 0x84d8 <_printf_fn+0x4c8>
    838a:	68 94       	set
    838c:	96 f8       	bld	r9, 6
    838e:	91 95       	neg	r25
    8390:	81 95       	neg	r24
    8392:	91 09       	sbc	r25, r1
    8394:	65 96       	adiw	r28, 0x15	; 21
    8396:	9f af       	std	Y+63, r25	; 0x3f
    8398:	8e af       	std	Y+62, r24	; 0x3e
    839a:	65 97       	sbiw	r28, 0x15	; 21
    839c:	9d c0       	rjmp	.+314    	; 0x84d8 <_printf_fn+0x4c8>
    839e:	f4 e0       	ldi	r31, 0x04	; 4
    83a0:	4f 16       	cp	r4, r31
    83a2:	51 04       	cpc	r5, r1
    83a4:	59 f5       	brne	.+86     	; 0x83fc <_printf_fn+0x3ec>
    83a6:	51 01       	movw	r10, r2
    83a8:	24 e0       	ldi	r18, 0x04	; 4
    83aa:	a2 0e       	add	r10, r18
    83ac:	b1 1c       	adc	r11, r1
    83ae:	f1 01       	movw	r30, r2
    83b0:	80 81       	ld	r24, Z
    83b2:	91 81       	ldd	r25, Z+1	; 0x01
    83b4:	a2 81       	ldd	r26, Z+2	; 0x02
    83b6:	b3 81       	ldd	r27, Z+3	; 0x03
    83b8:	2f 96       	adiw	r28, 0x0f	; 15
    83ba:	8c af       	std	Y+60, r24	; 0x3c
    83bc:	9d af       	std	Y+61, r25	; 0x3d
    83be:	ae af       	std	Y+62, r26	; 0x3e
    83c0:	bf af       	std	Y+63, r27	; 0x3f
    83c2:	2f 97       	sbiw	r28, 0x0f	; 15
    83c4:	a3 96       	adiw	r28, 0x23	; 35
    83c6:	2e ad       	ldd	r18, Y+62	; 0x3e
    83c8:	3f ad       	ldd	r19, Y+63	; 0x3f
    83ca:	a3 97       	sbiw	r28, 0x23	; 35
    83cc:	24 34       	cpi	r18, 0x44	; 68
    83ce:	31 05       	cpc	r19, r1
    83d0:	09 f0       	breq	.+2      	; 0x83d4 <_printf_fn+0x3c4>
    83d2:	8f c0       	rjmp	.+286    	; 0x84f2 <_printf_fn+0x4e2>
    83d4:	b7 ff       	sbrs	r27, 7
    83d6:	8a c0       	rjmp	.+276    	; 0x84ec <_printf_fn+0x4dc>
    83d8:	68 94       	set
    83da:	96 f8       	bld	r9, 6
    83dc:	b0 95       	com	r27
    83de:	a0 95       	com	r26
    83e0:	90 95       	com	r25
    83e2:	81 95       	neg	r24
    83e4:	9f 4f       	sbci	r25, 0xFF	; 255
    83e6:	af 4f       	sbci	r26, 0xFF	; 255
    83e8:	bf 4f       	sbci	r27, 0xFF	; 255
    83ea:	2f 96       	adiw	r28, 0x0f	; 15
    83ec:	8c af       	std	Y+60, r24	; 0x3c
    83ee:	9d af       	std	Y+61, r25	; 0x3d
    83f0:	ae af       	std	Y+62, r26	; 0x3e
    83f2:	bf af       	std	Y+63, r27	; 0x3f
    83f4:	2f 97       	sbiw	r28, 0x0f	; 15
    83f6:	7a c0       	rjmp	.+244    	; 0x84ec <_printf_fn+0x4dc>
    83f8:	81 e0       	ldi	r24, 0x01	; 1
    83fa:	90 e0       	ldi	r25, 0x00	; 0
    83fc:	51 01       	movw	r10, r2
    83fe:	38 e0       	ldi	r19, 0x08	; 8
    8400:	43 16       	cp	r4, r19
    8402:	51 04       	cpc	r5, r1
    8404:	09 f0       	breq	.+2      	; 0x8408 <_printf_fn+0x3f8>
    8406:	7c c0       	rjmp	.+248    	; 0x8500 <_printf_fn+0x4f0>
    8408:	48 e0       	ldi	r20, 0x08	; 8
    840a:	a4 0e       	add	r10, r20
    840c:	b1 1c       	adc	r11, r1
    840e:	d1 01       	movw	r26, r2
    8410:	fc 90       	ld	r15, X
    8412:	f1 01       	movw	r30, r2
    8414:	01 81       	ldd	r16, Z+1	; 0x01
    8416:	12 81       	ldd	r17, Z+2	; 0x02
    8418:	f3 81       	ldd	r31, Z+3	; 0x03
    841a:	aa 96       	adiw	r28, 0x2a	; 42
    841c:	ff af       	std	Y+63, r31	; 0x3f
    841e:	aa 97       	sbiw	r28, 0x2a	; 42
    8420:	f1 01       	movw	r30, r2
    8422:	f4 81       	ldd	r31, Z+4	; 0x04
    8424:	ab 96       	adiw	r28, 0x2b	; 43
    8426:	ff af       	std	Y+63, r31	; 0x3f
    8428:	ab 97       	sbiw	r28, 0x2b	; 43
    842a:	f1 01       	movw	r30, r2
    842c:	b5 81       	ldd	r27, Z+5	; 0x05
    842e:	f6 81       	ldd	r31, Z+6	; 0x06
    8430:	af 96       	adiw	r28, 0x2f	; 47
    8432:	ff af       	std	Y+63, r31	; 0x3f
    8434:	af 97       	sbiw	r28, 0x2f	; 47
    8436:	f1 01       	movw	r30, r2
    8438:	37 80       	ldd	r3, Z+7	; 0x07
    843a:	24 96       	adiw	r28, 0x04	; 4
    843c:	ff ae       	std	Y+63, r15	; 0x3f
    843e:	24 97       	sbiw	r28, 0x04	; 4
    8440:	25 96       	adiw	r28, 0x05	; 5
    8442:	0f af       	std	Y+63, r16	; 0x3f
    8444:	25 97       	sbiw	r28, 0x05	; 5
    8446:	26 96       	adiw	r28, 0x06	; 6
    8448:	1f af       	std	Y+63, r17	; 0x3f
    844a:	26 97       	sbiw	r28, 0x06	; 6
    844c:	aa 96       	adiw	r28, 0x2a	; 42
    844e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8450:	aa 97       	sbiw	r28, 0x2a	; 42
    8452:	27 96       	adiw	r28, 0x07	; 7
    8454:	ff af       	std	Y+63, r31	; 0x3f
    8456:	27 97       	sbiw	r28, 0x07	; 7
    8458:	ab 96       	adiw	r28, 0x2b	; 43
    845a:	ef ad       	ldd	r30, Y+63	; 0x3f
    845c:	ab 97       	sbiw	r28, 0x2b	; 43
    845e:	28 96       	adiw	r28, 0x08	; 8
    8460:	ef af       	std	Y+63, r30	; 0x3f
    8462:	28 97       	sbiw	r28, 0x08	; 8
    8464:	29 96       	adiw	r28, 0x09	; 9
    8466:	bf af       	std	Y+63, r27	; 0x3f
    8468:	29 97       	sbiw	r28, 0x09	; 9
    846a:	af 96       	adiw	r28, 0x2f	; 47
    846c:	ff ad       	ldd	r31, Y+63	; 0x3f
    846e:	af 97       	sbiw	r28, 0x2f	; 47
    8470:	2a 96       	adiw	r28, 0x0a	; 10
    8472:	ff af       	std	Y+63, r31	; 0x3f
    8474:	2a 97       	sbiw	r28, 0x0a	; 10
    8476:	2b 96       	adiw	r28, 0x0b	; 11
    8478:	3f ae       	std	Y+63, r3	; 0x3f
    847a:	2b 97       	sbiw	r28, 0x0b	; 11
    847c:	89 2b       	or	r24, r25
    847e:	09 f4       	brne	.+2      	; 0x8482 <_printf_fn+0x472>
    8480:	4a c0       	rjmp	.+148    	; 0x8516 <_printf_fn+0x506>
    8482:	2f 2d       	mov	r18, r15
    8484:	30 2f       	mov	r19, r16
    8486:	41 2f       	mov	r20, r17
    8488:	aa 96       	adiw	r28, 0x2a	; 42
    848a:	5f ad       	ldd	r21, Y+63	; 0x3f
    848c:	aa 97       	sbiw	r28, 0x2a	; 42
    848e:	6e 2f       	mov	r22, r30
    8490:	7b 2f       	mov	r23, r27
    8492:	8f 2f       	mov	r24, r31
    8494:	93 2d       	mov	r25, r3
    8496:	a0 e0       	ldi	r26, 0x00	; 0
    8498:	0e 94 96 e2 	call	0x1c52c	; 0x1c52c <__cmpdi2_s8>
    849c:	e4 f5       	brge	.+120    	; 0x8516 <_printf_fn+0x506>
    849e:	68 94       	set
    84a0:	96 f8       	bld	r9, 6
    84a2:	0e 94 48 e2 	call	0x1c490	; 0x1c490 <__negdi2>
    84a6:	24 96       	adiw	r28, 0x04	; 4
    84a8:	2f af       	std	Y+63, r18	; 0x3f
    84aa:	24 97       	sbiw	r28, 0x04	; 4
    84ac:	25 96       	adiw	r28, 0x05	; 5
    84ae:	3f af       	std	Y+63, r19	; 0x3f
    84b0:	25 97       	sbiw	r28, 0x05	; 5
    84b2:	26 96       	adiw	r28, 0x06	; 6
    84b4:	4f af       	std	Y+63, r20	; 0x3f
    84b6:	26 97       	sbiw	r28, 0x06	; 6
    84b8:	27 96       	adiw	r28, 0x07	; 7
    84ba:	5f af       	std	Y+63, r21	; 0x3f
    84bc:	27 97       	sbiw	r28, 0x07	; 7
    84be:	28 96       	adiw	r28, 0x08	; 8
    84c0:	6f af       	std	Y+63, r22	; 0x3f
    84c2:	28 97       	sbiw	r28, 0x08	; 8
    84c4:	29 96       	adiw	r28, 0x09	; 9
    84c6:	7f af       	std	Y+63, r23	; 0x3f
    84c8:	29 97       	sbiw	r28, 0x09	; 9
    84ca:	2a 96       	adiw	r28, 0x0a	; 10
    84cc:	8f af       	std	Y+63, r24	; 0x3f
    84ce:	2a 97       	sbiw	r28, 0x0a	; 10
    84d0:	2b 96       	adiw	r28, 0x0b	; 11
    84d2:	9f af       	std	Y+63, r25	; 0x3f
    84d4:	2b 97       	sbiw	r28, 0x0b	; 11
    84d6:	1f c0       	rjmp	.+62     	; 0x8516 <_printf_fn+0x506>
    84d8:	22 e0       	ldi	r18, 0x02	; 2
    84da:	42 2e       	mov	r4, r18
    84dc:	51 2c       	mov	r5, r1
    84de:	6c 96       	adiw	r28, 0x1c	; 28
    84e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    84e2:	6c 97       	sbiw	r28, 0x1c	; 28
    84e4:	6d 96       	adiw	r28, 0x1d	; 29
    84e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    84e8:	6d 97       	sbiw	r28, 0x1d	; 29
    84ea:	1b c0       	rjmp	.+54     	; 0x8522 <_printf_fn+0x512>
    84ec:	94 e0       	ldi	r25, 0x04	; 4
    84ee:	49 2e       	mov	r4, r25
    84f0:	51 2c       	mov	r5, r1
    84f2:	6a 96       	adiw	r28, 0x1a	; 26
    84f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    84f6:	6a 97       	sbiw	r28, 0x1a	; 26
    84f8:	6b 96       	adiw	r28, 0x1b	; 27
    84fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    84fc:	6b 97       	sbiw	r28, 0x1b	; 27
    84fe:	11 c0       	rjmp	.+34     	; 0x8522 <_printf_fn+0x512>
    8500:	66 96       	adiw	r28, 0x16	; 22
    8502:	8f ad       	ldd	r24, Y+63	; 0x3f
    8504:	66 97       	sbiw	r28, 0x16	; 22
    8506:	67 96       	adiw	r28, 0x17	; 23
    8508:	9f ad       	ldd	r25, Y+63	; 0x3f
    850a:	67 97       	sbiw	r28, 0x17	; 23
    850c:	a3 96       	adiw	r28, 0x23	; 35
    850e:	1f ae       	std	Y+63, r1	; 0x3f
    8510:	1e ae       	std	Y+62, r1	; 0x3e
    8512:	a3 97       	sbiw	r28, 0x23	; 35
    8514:	06 c0       	rjmp	.+12     	; 0x8522 <_printf_fn+0x512>
    8516:	68 96       	adiw	r28, 0x18	; 24
    8518:	8f ad       	ldd	r24, Y+63	; 0x3f
    851a:	68 97       	sbiw	r28, 0x18	; 24
    851c:	69 96       	adiw	r28, 0x19	; 25
    851e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8520:	69 97       	sbiw	r28, 0x19	; 25
    8522:	2f ef       	ldi	r18, 0xFF	; 255
    8524:	62 1a       	sub	r6, r18
    8526:	72 0a       	sbc	r7, r18
    8528:	82 0a       	sbc	r8, r18
    852a:	15 01       	movw	r2, r10
    852c:	33 c0       	rjmp	.+102    	; 0x8594 <_printf_fn+0x584>
    852e:	91 fc       	sbrc	r9, 1
    8530:	08 c0       	rjmp	.+16     	; 0x8542 <_printf_fn+0x532>
    8532:	68 94       	set
    8534:	91 f8       	bld	r9, 1
    8536:	46 e0       	ldi	r20, 0x06	; 6
    8538:	50 e0       	ldi	r21, 0x00	; 0
    853a:	a1 96       	adiw	r28, 0x21	; 33
    853c:	5f af       	std	Y+63, r21	; 0x3f
    853e:	4e af       	std	Y+62, r20	; 0x3e
    8540:	a1 97       	sbiw	r28, 0x21	; 33
    8542:	d1 01       	movw	r26, r2
    8544:	8d 91       	ld	r24, X+
    8546:	9d 91       	ld	r25, X+
    8548:	0d 90       	ld	r0, X+
    854a:	bc 91       	ld	r27, X
    854c:	a0 2d       	mov	r26, r0
    854e:	a9 96       	adiw	r28, 0x29	; 41
    8550:	8c af       	std	Y+60, r24	; 0x3c
    8552:	9d af       	std	Y+61, r25	; 0x3d
    8554:	ae af       	std	Y+62, r26	; 0x3e
    8556:	bf af       	std	Y+63, r27	; 0x3f
    8558:	a9 97       	sbiw	r28, 0x29	; 41
    855a:	bf ef       	ldi	r27, 0xFF	; 255
    855c:	6b 1a       	sub	r6, r27
    855e:	7b 0a       	sbc	r7, r27
    8560:	8b 0a       	sbc	r8, r27
    8562:	f1 01       	movw	r30, r2
    8564:	34 96       	adiw	r30, 0x04	; 4
    8566:	1f 01       	movw	r2, r30
    8568:	0f c0       	rjmp	.+30     	; 0x8588 <_printf_fn+0x578>
    856a:	ff ef       	ldi	r31, 0xFF	; 255
    856c:	6f 1a       	sub	r6, r31
    856e:	7f 0a       	sbc	r7, r31
    8570:	8f 0a       	sbc	r8, r31
    8572:	c5 c0       	rjmp	.+394    	; 0x86fe <_printf_fn+0x6ee>
    8574:	2f ef       	ldi	r18, 0xFF	; 255
    8576:	62 1a       	sub	r6, r18
    8578:	72 0a       	sbc	r7, r18
    857a:	82 0a       	sbc	r8, r18
    857c:	11 c1       	rjmp	.+546    	; 0x87a0 <_printf_fn+0x790>
    857e:	3f ef       	ldi	r19, 0xFF	; 255
    8580:	63 1a       	sub	r6, r19
    8582:	73 0a       	sbc	r7, r19
    8584:	83 0a       	sbc	r8, r19
    8586:	c8 c0       	rjmp	.+400    	; 0x8718 <_printf_fn+0x708>
    8588:	66 96       	adiw	r28, 0x16	; 22
    858a:	8f ad       	ldd	r24, Y+63	; 0x3f
    858c:	66 97       	sbiw	r28, 0x16	; 22
    858e:	67 96       	adiw	r28, 0x17	; 23
    8590:	9f ad       	ldd	r25, Y+63	; 0x3f
    8592:	67 97       	sbiw	r28, 0x17	; 23
    8594:	a3 96       	adiw	r28, 0x23	; 35
    8596:	ee ad       	ldd	r30, Y+62	; 0x3e
    8598:	ff ad       	ldd	r31, Y+63	; 0x3f
    859a:	a3 97       	sbiw	r28, 0x23	; 35
    859c:	e2 54       	subi	r30, 0x42	; 66
    859e:	f1 09       	sbc	r31, r1
    85a0:	e7 33       	cpi	r30, 0x37	; 55
    85a2:	f1 05       	cpc	r31, r1
    85a4:	08 f0       	brcs	.+2      	; 0x85a8 <_printf_fn+0x598>
    85a6:	56 c1       	rjmp	.+684    	; 0x8854 <_printf_fn+0x844>
    85a8:	e3 58       	subi	r30, 0x83	; 131
    85aa:	ff 4f       	sbci	r31, 0xFF	; 255
    85ac:	0c 94 29 e2 	jmp	0x1c452	; 0x1c452 <__tablejump2__>
    85b0:	e8 94       	clt
    85b2:	94 f8       	bld	r9, 4
    85b4:	e8 94       	clt
    85b6:	92 f8       	bld	r9, 2
    85b8:	a9 2c       	mov	r10, r9
    85ba:	b1 2c       	mov	r11, r1
    85bc:	a1 96       	adiw	r28, 0x21	; 33
    85be:	ce ac       	ldd	r12, Y+62	; 0x3e
    85c0:	df ac       	ldd	r13, Y+63	; 0x3f
    85c2:	a1 97       	sbiw	r28, 0x21	; 33
    85c4:	6f 96       	adiw	r28, 0x1f	; 31
    85c6:	ee ac       	ldd	r14, Y+62	; 0x3e
    85c8:	ff ac       	ldd	r15, Y+63	; 0x3f
    85ca:	6f 97       	sbiw	r28, 0x1f	; 31
    85cc:	0a e0       	ldi	r16, 0x0A	; 10
    85ce:	10 e0       	ldi	r17, 0x00	; 0
    85d0:	19 c0       	rjmp	.+50     	; 0x8604 <_printf_fn+0x5f4>
    85d2:	a9 2c       	mov	r10, r9
    85d4:	b1 2c       	mov	r11, r1
    85d6:	a1 96       	adiw	r28, 0x21	; 33
    85d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    85da:	df ac       	ldd	r13, Y+63	; 0x3f
    85dc:	a1 97       	sbiw	r28, 0x21	; 33
    85de:	6f 96       	adiw	r28, 0x1f	; 31
    85e0:	ee ac       	ldd	r14, Y+62	; 0x3e
    85e2:	ff ac       	ldd	r15, Y+63	; 0x3f
    85e4:	6f 97       	sbiw	r28, 0x1f	; 31
    85e6:	02 e0       	ldi	r16, 0x02	; 2
    85e8:	10 e0       	ldi	r17, 0x00	; 0
    85ea:	0c c0       	rjmp	.+24     	; 0x8604 <_printf_fn+0x5f4>
    85ec:	a9 2c       	mov	r10, r9
    85ee:	b1 2c       	mov	r11, r1
    85f0:	a1 96       	adiw	r28, 0x21	; 33
    85f2:	ce ac       	ldd	r12, Y+62	; 0x3e
    85f4:	df ac       	ldd	r13, Y+63	; 0x3f
    85f6:	a1 97       	sbiw	r28, 0x21	; 33
    85f8:	6f 96       	adiw	r28, 0x1f	; 31
    85fa:	ee ac       	ldd	r14, Y+62	; 0x3e
    85fc:	ff ac       	ldd	r15, Y+63	; 0x3f
    85fe:	6f 97       	sbiw	r28, 0x1f	; 31
    8600:	08 e0       	ldi	r16, 0x08	; 8
    8602:	10 e0       	ldi	r17, 0x00	; 0
    8604:	22 e4       	ldi	r18, 0x42	; 66
    8606:	30 e0       	ldi	r19, 0x00	; 0
    8608:	ae 01       	movw	r20, r28
    860a:	4f 5f       	subi	r20, 0xFF	; 255
    860c:	5f 4f       	sbci	r21, 0xFF	; 255
    860e:	b2 01       	movw	r22, r4
    8610:	7d d9       	rcall	.-3334   	; 0x790c <p_ntoa>
    8612:	34 c0       	rjmp	.+104    	; 0x867c <_printf_fn+0x66c>
    8614:	a9 2c       	mov	r10, r9
    8616:	b1 2c       	mov	r11, r1
    8618:	a1 96       	adiw	r28, 0x21	; 33
    861a:	ce ac       	ldd	r12, Y+62	; 0x3e
    861c:	df ac       	ldd	r13, Y+63	; 0x3f
    861e:	a1 97       	sbiw	r28, 0x21	; 33
    8620:	6f 96       	adiw	r28, 0x1f	; 31
    8622:	ee ac       	ldd	r14, Y+62	; 0x3e
    8624:	ff ac       	ldd	r15, Y+63	; 0x3f
    8626:	6f 97       	sbiw	r28, 0x1f	; 31
    8628:	00 e1       	ldi	r16, 0x10	; 16
    862a:	10 e0       	ldi	r17, 0x00	; 0
    862c:	22 e4       	ldi	r18, 0x42	; 66
    862e:	30 e0       	ldi	r19, 0x00	; 0
    8630:	ae 01       	movw	r20, r28
    8632:	4f 5f       	subi	r20, 0xFF	; 255
    8634:	5f 4f       	sbci	r21, 0xFF	; 255
    8636:	b2 01       	movw	r22, r4
    8638:	69 d9       	rcall	.-3374   	; 0x790c <p_ntoa>
    863a:	6c 01       	movw	r12, r24
    863c:	a3 96       	adiw	r28, 0x23	; 35
    863e:	6e ad       	ldd	r22, Y+62	; 0x3e
    8640:	7f ad       	ldd	r23, Y+63	; 0x3f
    8642:	a3 97       	sbiw	r28, 0x23	; 35
    8644:	67 7f       	andi	r22, 0xF7	; 247
    8646:	60 35       	cpi	r22, 0x50	; 80
    8648:	71 05       	cpc	r23, r1
    864a:	09 f0       	breq	.+2      	; 0x864e <_printf_fn+0x63e>
    864c:	3f c0       	rjmp	.+126    	; 0x86cc <_printf_fn+0x6bc>
    864e:	3a c0       	rjmp	.+116    	; 0x86c4 <_printf_fn+0x6b4>
    8650:	c9 2c       	mov	r12, r9
    8652:	d1 2c       	mov	r13, r1
    8654:	a1 96       	adiw	r28, 0x21	; 33
    8656:	ee ac       	ldd	r14, Y+62	; 0x3e
    8658:	ff ac       	ldd	r15, Y+63	; 0x3f
    865a:	a1 97       	sbiw	r28, 0x21	; 33
    865c:	6f 96       	adiw	r28, 0x1f	; 31
    865e:	0e ad       	ldd	r16, Y+62	; 0x3e
    8660:	1f ad       	ldd	r17, Y+63	; 0x3f
    8662:	6f 97       	sbiw	r28, 0x1f	; 31
    8664:	22 e4       	ldi	r18, 0x42	; 66
    8666:	30 e0       	ldi	r19, 0x00	; 0
    8668:	ae 01       	movw	r20, r28
    866a:	4f 5f       	subi	r20, 0xFF	; 255
    866c:	5f 4f       	sbci	r21, 0xFF	; 255
    866e:	a9 96       	adiw	r28, 0x29	; 41
    8670:	6c ad       	ldd	r22, Y+60	; 0x3c
    8672:	7d ad       	ldd	r23, Y+61	; 0x3d
    8674:	8e ad       	ldd	r24, Y+62	; 0x3e
    8676:	9f ad       	ldd	r25, Y+63	; 0x3f
    8678:	a9 97       	sbiw	r28, 0x29	; 41
    867a:	9d d9       	rcall	.-3270   	; 0x79b6 <p_ftoa>
    867c:	93 fa       	bst	r9, 3
    867e:	00 27       	eor	r16, r16
    8680:	00 f9       	bld	r16, 0
    8682:	10 e0       	ldi	r17, 0x00	; 0
    8684:	9c 01       	movw	r18, r24
    8686:	27 c0       	rjmp	.+78     	; 0x86d6 <_printf_fn+0x6c6>
    8688:	c9 2c       	mov	r12, r9
    868a:	d1 2c       	mov	r13, r1
    868c:	a1 96       	adiw	r28, 0x21	; 33
    868e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8690:	ff ac       	ldd	r15, Y+63	; 0x3f
    8692:	a1 97       	sbiw	r28, 0x21	; 33
    8694:	6f 96       	adiw	r28, 0x1f	; 31
    8696:	0e ad       	ldd	r16, Y+62	; 0x3e
    8698:	1f ad       	ldd	r17, Y+63	; 0x3f
    869a:	6f 97       	sbiw	r28, 0x1f	; 31
    869c:	22 e4       	ldi	r18, 0x42	; 66
    869e:	30 e0       	ldi	r19, 0x00	; 0
    86a0:	ae 01       	movw	r20, r28
    86a2:	4f 5f       	subi	r20, 0xFF	; 255
    86a4:	5f 4f       	sbci	r21, 0xFF	; 255
    86a6:	a9 96       	adiw	r28, 0x29	; 41
    86a8:	6c ad       	ldd	r22, Y+60	; 0x3c
    86aa:	7d ad       	ldd	r23, Y+61	; 0x3d
    86ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    86ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    86b0:	a9 97       	sbiw	r28, 0x29	; 41
    86b2:	88 da       	rcall	.-2800   	; 0x7bc4 <p_etoa>
    86b4:	6c 01       	movw	r12, r24
    86b6:	a3 96       	adiw	r28, 0x23	; 35
    86b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    86ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    86bc:	a3 97       	sbiw	r28, 0x23	; 35
    86be:	45 34       	cpi	r20, 0x45	; 69
    86c0:	51 05       	cpc	r21, r1
    86c2:	21 f4       	brne	.+8      	; 0x86cc <_printf_fn+0x6bc>
    86c4:	ce 01       	movw	r24, r28
    86c6:	01 96       	adiw	r24, 0x01	; 1
    86c8:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <strupper>
    86cc:	93 fa       	bst	r9, 3
    86ce:	00 27       	eor	r16, r16
    86d0:	00 f9       	bld	r16, 0
    86d2:	10 e0       	ldi	r17, 0x00	; 0
    86d4:	96 01       	movw	r18, r12
    86d6:	6f 96       	adiw	r28, 0x1f	; 31
    86d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    86da:	5f ad       	ldd	r21, Y+63	; 0x3f
    86dc:	6f 97       	sbiw	r28, 0x1f	; 31
    86de:	be 01       	movw	r22, r28
    86e0:	6f 5f       	subi	r22, 0xFF	; 255
    86e2:	7f 4f       	sbci	r23, 0xFF	; 255
    86e4:	a5 96       	adiw	r28, 0x25	; 37
    86e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    86e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    86ea:	a5 97       	sbiw	r28, 0x25	; 37
    86ec:	d7 db       	rcall	.-2130   	; 0x7e9c <_puts_pad>
    86ee:	b6 c0       	rjmp	.+364    	; 0x885c <_printf_fn+0x84c>
    86f0:	a3 96       	adiw	r28, 0x23	; 35
    86f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    86f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    86f6:	a3 97       	sbiw	r28, 0x23	; 35
    86f8:	83 37       	cpi	r24, 0x73	; 115
    86fa:	91 05       	cpc	r25, r1
    86fc:	69 f4       	brne	.+26     	; 0x8718 <_printf_fn+0x708>
    86fe:	61 01       	movw	r12, r2
    8700:	92 e0       	ldi	r25, 0x02	; 2
    8702:	c9 0e       	add	r12, r25
    8704:	d1 1c       	adc	r13, r1
    8706:	d1 01       	movw	r26, r2
    8708:	6d 91       	ld	r22, X+
    870a:	7c 91       	ld	r23, X
    870c:	61 15       	cp	r22, r1
    870e:	71 05       	cpc	r23, r1
    8710:	91 f4       	brne	.+36     	; 0x8736 <_printf_fn+0x726>
    8712:	6a e1       	ldi	r22, 0x1A	; 26
    8714:	74 e0       	ldi	r23, 0x04	; 4
    8716:	0f c0       	rjmp	.+30     	; 0x8736 <_printf_fn+0x726>
    8718:	61 01       	movw	r12, r2
    871a:	b2 e0       	ldi	r27, 0x02	; 2
    871c:	cb 0e       	add	r12, r27
    871e:	d1 1c       	adc	r13, r1
    8720:	f1 01       	movw	r30, r2
    8722:	80 81       	ld	r24, Z
    8724:	60 96       	adiw	r28, 0x10	; 16
    8726:	8f af       	std	Y+63, r24	; 0x3f
    8728:	60 97       	sbiw	r28, 0x10	; 16
    872a:	61 96       	adiw	r28, 0x11	; 17
    872c:	1f ae       	std	Y+63, r1	; 0x3f
    872e:	61 97       	sbiw	r28, 0x11	; 17
    8730:	be 01       	movw	r22, r28
    8732:	61 5b       	subi	r22, 0xB1	; 177
    8734:	7f 4f       	sbci	r23, 0xFF	; 255
    8736:	fb 01       	movw	r30, r22
    8738:	01 90       	ld	r0, Z+
    873a:	00 20       	and	r0, r0
    873c:	e9 f7       	brne	.-6      	; 0x8738 <_printf_fn+0x728>
    873e:	31 97       	sbiw	r30, 0x01	; 1
    8740:	e6 1b       	sub	r30, r22
    8742:	f7 0b       	sbc	r31, r23
    8744:	a1 96       	adiw	r28, 0x21	; 33
    8746:	2e ad       	ldd	r18, Y+62	; 0x3e
    8748:	3f ad       	ldd	r19, Y+63	; 0x3f
    874a:	a1 97       	sbiw	r28, 0x21	; 33
    874c:	23 2b       	or	r18, r19
    874e:	21 f4       	brne	.+8      	; 0x8758 <_printf_fn+0x748>
    8750:	a1 96       	adiw	r28, 0x21	; 33
    8752:	ff af       	std	Y+63, r31	; 0x3f
    8754:	ee af       	std	Y+62, r30	; 0x3e
    8756:	a1 97       	sbiw	r28, 0x21	; 33
    8758:	6f 96       	adiw	r28, 0x1f	; 31
    875a:	4e ad       	ldd	r20, Y+62	; 0x3e
    875c:	5f ad       	ldd	r21, Y+63	; 0x3f
    875e:	6f 97       	sbiw	r28, 0x1f	; 31
    8760:	a1 96       	adiw	r28, 0x21	; 33
    8762:	8e ad       	ldd	r24, Y+62	; 0x3e
    8764:	9f ad       	ldd	r25, Y+63	; 0x3f
    8766:	a1 97       	sbiw	r28, 0x21	; 33
    8768:	48 17       	cp	r20, r24
    876a:	59 07       	cpc	r21, r25
    876c:	3c f4       	brge	.+14     	; 0x877c <_printf_fn+0x76c>
    876e:	41 15       	cp	r20, r1
    8770:	51 05       	cpc	r21, r1
    8772:	21 f0       	breq	.+8      	; 0x877c <_printf_fn+0x76c>
    8774:	a1 96       	adiw	r28, 0x21	; 33
    8776:	5f af       	std	Y+63, r21	; 0x3f
    8778:	4e af       	std	Y+62, r20	; 0x3e
    877a:	a1 97       	sbiw	r28, 0x21	; 33
    877c:	93 fa       	bst	r9, 3
    877e:	00 27       	eor	r16, r16
    8780:	00 f9       	bld	r16, 0
    8782:	10 e0       	ldi	r17, 0x00	; 0
    8784:	a1 96       	adiw	r28, 0x21	; 33
    8786:	2e ad       	ldd	r18, Y+62	; 0x3e
    8788:	3f ad       	ldd	r19, Y+63	; 0x3f
    878a:	a1 97       	sbiw	r28, 0x21	; 33
    878c:	6f 96       	adiw	r28, 0x1f	; 31
    878e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8790:	5f ad       	ldd	r21, Y+63	; 0x3f
    8792:	6f 97       	sbiw	r28, 0x1f	; 31
    8794:	a5 96       	adiw	r28, 0x25	; 37
    8796:	8e ad       	ldd	r24, Y+62	; 0x3e
    8798:	9f ad       	ldd	r25, Y+63	; 0x3f
    879a:	a5 97       	sbiw	r28, 0x25	; 37
    879c:	7f db       	rcall	.-2306   	; 0x7e9c <_puts_pad>
    879e:	45 c0       	rjmp	.+138    	; 0x882a <_printf_fn+0x81a>
    87a0:	61 01       	movw	r12, r2
    87a2:	92 e0       	ldi	r25, 0x02	; 2
    87a4:	c9 0e       	add	r12, r25
    87a6:	d1 1c       	adc	r13, r1
    87a8:	d1 01       	movw	r26, r2
    87aa:	2d 90       	ld	r2, X+
    87ac:	3c 90       	ld	r3, X
    87ae:	41 2c       	mov	r4, r1
    87b0:	21 14       	cp	r2, r1
    87b2:	31 04       	cpc	r3, r1
    87b4:	41 04       	cpc	r4, r1
    87b6:	29 f4       	brne	.+10     	; 0x87c2 <_printf_fn+0x7b2>
    87b8:	ae 96       	adiw	r28, 0x2e	; 46
    87ba:	2d ac       	ldd	r2, Y+61	; 0x3d
    87bc:	3e ac       	ldd	r3, Y+62	; 0x3e
    87be:	4f ac       	ldd	r4, Y+63	; 0x3f
    87c0:	ae 97       	sbiw	r28, 0x2e	; 46
    87c2:	84 2d       	mov	r24, r4
    87c4:	b1 01       	movw	r22, r2
    87c6:	08 dc       	rcall	.-2032   	; 0x7fd8 <strlen_X>
    87c8:	a1 96       	adiw	r28, 0x21	; 33
    87ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    87cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    87ce:	a1 97       	sbiw	r28, 0x21	; 33
    87d0:	ef 2b       	or	r30, r31
    87d2:	31 f4       	brne	.+12     	; 0x87e0 <_printf_fn+0x7d0>
    87d4:	a0 96       	adiw	r28, 0x20	; 32
    87d6:	8f af       	std	Y+63, r24	; 0x3f
    87d8:	a0 97       	sbiw	r28, 0x20	; 32
    87da:	a1 96       	adiw	r28, 0x21	; 33
    87dc:	9f af       	std	Y+63, r25	; 0x3f
    87de:	a1 97       	sbiw	r28, 0x21	; 33
    87e0:	6f 96       	adiw	r28, 0x1f	; 31
    87e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    87e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    87e6:	6f 97       	sbiw	r28, 0x1f	; 31
    87e8:	a1 96       	adiw	r28, 0x21	; 33
    87ea:	4e ad       	ldd	r20, Y+62	; 0x3e
    87ec:	5f ad       	ldd	r21, Y+63	; 0x3f
    87ee:	a1 97       	sbiw	r28, 0x21	; 33
    87f0:	24 17       	cp	r18, r20
    87f2:	35 07       	cpc	r19, r21
    87f4:	3c f4       	brge	.+14     	; 0x8804 <_printf_fn+0x7f4>
    87f6:	21 15       	cp	r18, r1
    87f8:	31 05       	cpc	r19, r1
    87fa:	21 f0       	breq	.+8      	; 0x8804 <_printf_fn+0x7f4>
    87fc:	a1 96       	adiw	r28, 0x21	; 33
    87fe:	3f af       	std	Y+63, r19	; 0x3f
    8800:	2e af       	std	Y+62, r18	; 0x3e
    8802:	a1 97       	sbiw	r28, 0x21	; 33
    8804:	93 fa       	bst	r9, 3
    8806:	ee 24       	eor	r14, r14
    8808:	e0 f8       	bld	r14, 0
    880a:	f1 2c       	mov	r15, r1
    880c:	a1 96       	adiw	r28, 0x21	; 33
    880e:	0e ad       	ldd	r16, Y+62	; 0x3e
    8810:	1f ad       	ldd	r17, Y+63	; 0x3f
    8812:	a1 97       	sbiw	r28, 0x21	; 33
    8814:	6f 96       	adiw	r28, 0x1f	; 31
    8816:	2e ad       	ldd	r18, Y+62	; 0x3e
    8818:	3f ad       	ldd	r19, Y+63	; 0x3f
    881a:	6f 97       	sbiw	r28, 0x1f	; 31
    881c:	64 2d       	mov	r22, r4
    881e:	a1 01       	movw	r20, r2
    8820:	a5 96       	adiw	r28, 0x25	; 37
    8822:	8e ad       	ldd	r24, Y+62	; 0x3e
    8824:	9f ad       	ldd	r25, Y+63	; 0x3f
    8826:	a5 97       	sbiw	r28, 0x25	; 37
    8828:	7b db       	rcall	.-2314   	; 0x7f20 <_puts_pad_X>
    882a:	16 01       	movw	r2, r12
    882c:	17 c0       	rjmp	.+46     	; 0x885c <_printf_fn+0x84c>
    882e:	f6 01       	movw	r30, r12
    8830:	5e 2d       	mov	r21, r14
    8832:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__xload_1>
    8836:	66 23       	and	r22, r22
    8838:	89 f0       	breq	.+34     	; 0x885c <_printf_fn+0x84c>
    883a:	5f ef       	ldi	r21, 0xFF	; 255
    883c:	c5 1a       	sub	r12, r21
    883e:	d5 0a       	sbc	r13, r21
    8840:	e5 0a       	sbc	r14, r21
    8842:	a5 96       	adiw	r28, 0x25	; 37
    8844:	ae ad       	ldd	r26, Y+62	; 0x3e
    8846:	bf ad       	ldd	r27, Y+63	; 0x3f
    8848:	a5 97       	sbiw	r28, 0x25	; 37
    884a:	ed 91       	ld	r30, X+
    884c:	fc 91       	ld	r31, X
    884e:	11 97       	sbiw	r26, 0x01	; 1
    8850:	cd 01       	movw	r24, r26
    8852:	09 95       	icall
    8854:	6c 14       	cp	r6, r12
    8856:	7d 04       	cpc	r7, r13
    8858:	8e 04       	cpc	r8, r14
    885a:	48 f7       	brcc	.-46     	; 0x882e <_printf_fn+0x81e>
    885c:	e8 2c       	mov	r14, r8
    885e:	63 01       	movw	r12, r6
    8860:	0f cc       	rjmp	.-2018   	; 0x8080 <_printf_fn+0x70>
    8862:	82 e0       	ldi	r24, 0x02	; 2
    8864:	48 2e       	mov	r4, r24
    8866:	51 2c       	mov	r5, r1
    8868:	0d cd       	rjmp	.-1510   	; 0x8284 <_printf_fn+0x274>
    886a:	f2 e0       	ldi	r31, 0x02	; 2
    886c:	4f 16       	cp	r4, r31
    886e:	51 04       	cpc	r5, r1
    8870:	61 f4       	brne	.+24     	; 0x888a <_printf_fn+0x87a>
    8872:	51 01       	movw	r10, r2
    8874:	b2 e0       	ldi	r27, 0x02	; 2
    8876:	ab 0e       	add	r10, r27
    8878:	b1 1c       	adc	r11, r1
    887a:	f1 01       	movw	r30, r2
    887c:	80 81       	ld	r24, Z
    887e:	91 81       	ldd	r25, Z+1	; 0x01
    8880:	65 96       	adiw	r28, 0x15	; 21
    8882:	9f af       	std	Y+63, r25	; 0x3f
    8884:	8e af       	std	Y+62, r24	; 0x3e
    8886:	65 97       	sbiw	r28, 0x15	; 21
    8888:	7e cd       	rjmp	.-1284   	; 0x8386 <_printf_fn+0x376>
    888a:	f4 e0       	ldi	r31, 0x04	; 4
    888c:	4f 16       	cp	r4, r31
    888e:	51 04       	cpc	r5, r1
    8890:	09 f0       	breq	.+2      	; 0x8894 <_printf_fn+0x884>
    8892:	b2 cd       	rjmp	.-1180   	; 0x83f8 <_printf_fn+0x3e8>
    8894:	51 01       	movw	r10, r2
    8896:	24 e0       	ldi	r18, 0x04	; 4
    8898:	a2 0e       	add	r10, r18
    889a:	b1 1c       	adc	r11, r1
    889c:	f1 01       	movw	r30, r2
    889e:	80 81       	ld	r24, Z
    88a0:	91 81       	ldd	r25, Z+1	; 0x01
    88a2:	a2 81       	ldd	r26, Z+2	; 0x02
    88a4:	b3 81       	ldd	r27, Z+3	; 0x03
    88a6:	2f 96       	adiw	r28, 0x0f	; 15
    88a8:	8c af       	std	Y+60, r24	; 0x3c
    88aa:	9d af       	std	Y+61, r25	; 0x3d
    88ac:	ae af       	std	Y+62, r26	; 0x3e
    88ae:	bf af       	std	Y+63, r27	; 0x3f
    88b0:	2f 97       	sbiw	r28, 0x0f	; 15
    88b2:	90 cd       	rjmp	.-1248   	; 0x83d4 <_printf_fn+0x3c4>
    88b4:	c2 59       	subi	r28, 0x92	; 146
    88b6:	df 4f       	sbci	r29, 0xFF	; 255
    88b8:	e2 e1       	ldi	r30, 0x12	; 18
    88ba:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

000088be <vsnprintf_P>:
    88be:	a8 e0       	ldi	r26, 0x08	; 8
    88c0:	b0 e0       	ldi	r27, 0x00	; 0
    88c2:	e5 e6       	ldi	r30, 0x65	; 101
    88c4:	f4 e4       	ldi	r31, 0x44	; 68
    88c6:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
    88ca:	7c 01       	movw	r14, r24
    88cc:	cb 01       	movw	r24, r22
    88ce:	64 2f       	mov	r22, r20
    88d0:	a9 01       	movw	r20, r18
    88d2:	98 01       	movw	r18, r16
    88d4:	f7 01       	movw	r30, r14
    88d6:	10 82       	st	Z, r1
    88d8:	ed eb       	ldi	r30, 0xBD	; 189
    88da:	fb e3       	ldi	r31, 0x3B	; 59
    88dc:	fa 83       	std	Y+2, r31	; 0x02
    88de:	e9 83       	std	Y+1, r30	; 0x01
    88e0:	9e 83       	std	Y+6, r25	; 0x06
    88e2:	8d 83       	std	Y+5, r24	; 0x05
    88e4:	18 86       	std	Y+8, r1	; 0x08
    88e6:	1f 82       	std	Y+7, r1	; 0x07
    88e8:	fc 82       	std	Y+4, r15	; 0x04
    88ea:	eb 82       	std	Y+3, r14	; 0x03
    88ec:	ce 01       	movw	r24, r28
    88ee:	01 96       	adiw	r24, 0x01	; 1
    88f0:	8f db       	rcall	.-2274   	; 0x8010 <_printf_fn>
    88f2:	f7 01       	movw	r30, r14
    88f4:	01 90       	ld	r0, Z+
    88f6:	00 20       	and	r0, r0
    88f8:	e9 f7       	brne	.-6      	; 0x88f4 <vsnprintf_P+0x36>
    88fa:	cf 01       	movw	r24, r30
    88fc:	01 97       	sbiw	r24, 0x01	; 1
    88fe:	8e 19       	sub	r24, r14
    8900:	9f 09       	sbc	r25, r15
    8902:	28 96       	adiw	r28, 0x08	; 8
    8904:	e6 e0       	ldi	r30, 0x06	; 6
    8906:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0000890a <snprintf_P>:
    890a:	a0 e0       	ldi	r26, 0x00	; 0
    890c:	b0 e0       	ldi	r27, 0x00	; 0
    890e:	eb e8       	ldi	r30, 0x8B	; 139
    8910:	f4 e4       	ldi	r31, 0x44	; 68
    8912:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    8916:	8e 01       	movw	r16, r28
    8918:	02 5f       	subi	r16, 0xF2	; 242
    891a:	1f 4f       	sbci	r17, 0xFF	; 255
    891c:	2b 85       	ldd	r18, Y+11	; 0x0b
    891e:	3c 85       	ldd	r19, Y+12	; 0x0c
    8920:	4d 85       	ldd	r20, Y+13	; 0x0d
    8922:	69 85       	ldd	r22, Y+9	; 0x09
    8924:	7a 85       	ldd	r23, Y+10	; 0x0a
    8926:	8f 81       	ldd	r24, Y+7	; 0x07
    8928:	98 85       	ldd	r25, Y+8	; 0x08
    892a:	c9 df       	rcall	.-110    	; 0x88be <vsnprintf_P>
    892c:	e4 e0       	ldi	r30, 0x04	; 4
    892e:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00008932 <sprintf_P>:
    8932:	a0 e0       	ldi	r26, 0x00	; 0
    8934:	b0 e0       	ldi	r27, 0x00	; 0
    8936:	ef e9       	ldi	r30, 0x9F	; 159
    8938:	f4 e4       	ldi	r31, 0x44	; 68
    893a:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    893e:	8e 01       	movw	r16, r28
    8940:	04 5f       	subi	r16, 0xF4	; 244
    8942:	1f 4f       	sbci	r17, 0xFF	; 255
    8944:	29 85       	ldd	r18, Y+9	; 0x09
    8946:	3a 85       	ldd	r19, Y+10	; 0x0a
    8948:	4b 85       	ldd	r20, Y+11	; 0x0b
    894a:	60 e0       	ldi	r22, 0x00	; 0
    894c:	74 e0       	ldi	r23, 0x04	; 4
    894e:	8f 81       	ldd	r24, Y+7	; 0x07
    8950:	98 85       	ldd	r25, Y+8	; 0x08
    8952:	b5 df       	rcall	.-150    	; 0x88be <vsnprintf_P>
    8954:	e4 e0       	ldi	r30, 0x04	; 4
    8956:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000895a <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    895a:	a8 e0       	ldi	r26, 0x08	; 8
    895c:	b0 e0       	ldi	r27, 0x00	; 0
    895e:	e3 eb       	ldi	r30, 0xB3	; 179
    8960:	f4 e4       	ldi	r31, 0x44	; 68
    8962:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    8966:	9e 01       	movw	r18, r28
    8968:	23 5f       	subi	r18, 0xF3	; 243
    896a:	3f 4f       	sbci	r19, 0xFF	; 255
    896c:	f9 01       	movw	r30, r18
    896e:	41 91       	ld	r20, Z+
    8970:	51 91       	ld	r21, Z+
    8972:	61 91       	ld	r22, Z+
    8974:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8976:	86 ed       	ldi	r24, 0xD6	; 214
    8978:	9b e3       	ldi	r25, 0x3B	; 59
    897a:	9a 83       	std	Y+2, r25	; 0x02
    897c:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    897e:	18 86       	std	Y+8, r1	; 0x08
    8980:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8982:	ce 01       	movw	r24, r28
    8984:	01 96       	adiw	r24, 0x01	; 1
    8986:	44 db       	rcall	.-2424   	; 0x8010 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8988:	8f 81       	ldd	r24, Y+7	; 0x07
    898a:	98 85       	ldd	r25, Y+8	; 0x08
    898c:	28 96       	adiw	r28, 0x08	; 8
    898e:	e2 e0       	ldi	r30, 0x02	; 2
    8990:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00008994 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8994:	9c 01       	movw	r18, r24
    8996:	20 53       	subi	r18, 0x30	; 48
    8998:	31 09       	sbc	r19, r1
    899a:	2a 30       	cpi	r18, 0x0A	; 10
    899c:	31 05       	cpc	r19, r1
    899e:	10 f4       	brcc	.+4      	; 0x89a4 <atodigit+0x10>
    89a0:	c9 01       	movw	r24, r18
    89a2:	10 c0       	rjmp	.+32     	; 0x89c4 <atodigit+0x30>
    89a4:	9c 01       	movw	r18, r24
    89a6:	21 54       	subi	r18, 0x41	; 65
    89a8:	31 09       	sbc	r19, r1
    89aa:	26 30       	cpi	r18, 0x06	; 6
    89ac:	31 05       	cpc	r19, r1
    89ae:	10 f4       	brcc	.+4      	; 0x89b4 <atodigit+0x20>
    89b0:	c7 97       	sbiw	r24, 0x37	; 55
    89b2:	08 c0       	rjmp	.+16     	; 0x89c4 <atodigit+0x30>
    89b4:	9c 01       	movw	r18, r24
    89b6:	21 56       	subi	r18, 0x61	; 97
    89b8:	31 09       	sbc	r19, r1
    89ba:	26 30       	cpi	r18, 0x06	; 6
    89bc:	31 05       	cpc	r19, r1
    89be:	28 f4       	brcc	.+10     	; 0x89ca <atodigit+0x36>
    89c0:	87 55       	subi	r24, 0x57	; 87
    89c2:	91 09       	sbc	r25, r1
    89c4:	86 17       	cp	r24, r22
    89c6:	97 07       	cpc	r25, r23
    89c8:	14 f0       	brlt	.+4      	; 0x89ce <atodigit+0x3a>
    89ca:	8f ef       	ldi	r24, 0xFF	; 255
    89cc:	9f ef       	ldi	r25, 0xFF	; 255
    89ce:	08 95       	ret

000089d0 <strtol>:
    89d0:	a0 e0       	ldi	r26, 0x00	; 0
    89d2:	b0 e0       	ldi	r27, 0x00	; 0
    89d4:	ee ee       	ldi	r30, 0xEE	; 238
    89d6:	f4 e4       	ldi	r31, 0x44	; 68
    89d8:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    89dc:	2b 01       	movw	r4, r22
    89de:	8a 01       	movw	r16, r20
    89e0:	ec 01       	movw	r28, r24
    89e2:	28 81       	ld	r18, Y
    89e4:	01 96       	adiw	r24, 0x01	; 1
    89e6:	20 32       	cpi	r18, 0x20	; 32
    89e8:	d9 f3       	breq	.-10     	; 0x89e0 <strtol+0x10>
    89ea:	29 30       	cpi	r18, 0x09	; 9
    89ec:	c9 f3       	breq	.-14     	; 0x89e0 <strtol+0x10>
    89ee:	2d 32       	cpi	r18, 0x2D	; 45
    89f0:	29 f4       	brne	.+10     	; 0x89fc <strtol+0x2c>
    89f2:	ec 01       	movw	r28, r24
    89f4:	66 24       	eor	r6, r6
    89f6:	63 94       	inc	r6
    89f8:	71 2c       	mov	r7, r1
    89fa:	05 c0       	rjmp	.+10     	; 0x8a06 <strtol+0x36>
    89fc:	2b 32       	cpi	r18, 0x2B	; 43
    89fe:	09 f4       	brne	.+2      	; 0x8a02 <strtol+0x32>
    8a00:	ec 01       	movw	r28, r24
    8a02:	61 2c       	mov	r6, r1
    8a04:	71 2c       	mov	r7, r1
    8a06:	9e 01       	movw	r18, r28
    8a08:	2f 5f       	subi	r18, 0xFF	; 255
    8a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a0c:	88 81       	ld	r24, Y
    8a0e:	80 33       	cpi	r24, 0x30	; 48
    8a10:	11 f4       	brne	.+4      	; 0x8a16 <strtol+0x46>
    8a12:	e9 01       	movw	r28, r18
    8a14:	f8 cf       	rjmp	.-16     	; 0x8a06 <strtol+0x36>
    8a16:	c1 2c       	mov	r12, r1
    8a18:	d1 2c       	mov	r13, r1
    8a1a:	76 01       	movw	r14, r12
    8a1c:	48 01       	movw	r8, r16
    8a1e:	01 2e       	mov	r0, r17
    8a20:	00 0c       	add	r0, r0
    8a22:	aa 08       	sbc	r10, r10
    8a24:	bb 08       	sbc	r11, r11
    8a26:	3c 2e       	mov	r3, r28
    8a28:	2d 2e       	mov	r2, r29
    8a2a:	89 91       	ld	r24, Y+
    8a2c:	88 23       	and	r24, r24
    8a2e:	31 f0       	breq	.+12     	; 0x8a3c <strtol+0x6c>
    8a30:	b8 01       	movw	r22, r16
    8a32:	90 e0       	ldi	r25, 0x00	; 0
    8a34:	af df       	rcall	.-162    	; 0x8994 <atodigit>
    8a36:	fc 01       	movw	r30, r24
    8a38:	97 ff       	sbrs	r25, 7
    8a3a:	0c c0       	rjmp	.+24     	; 0x8a54 <strtol+0x84>
    8a3c:	61 14       	cp	r6, r1
    8a3e:	71 04       	cpc	r7, r1
    8a40:	c1 f0       	breq	.+48     	; 0x8a72 <strtol+0xa2>
    8a42:	f0 94       	com	r15
    8a44:	e0 94       	com	r14
    8a46:	d0 94       	com	r13
    8a48:	c0 94       	com	r12
    8a4a:	c1 1c       	adc	r12, r1
    8a4c:	d1 1c       	adc	r13, r1
    8a4e:	e1 1c       	adc	r14, r1
    8a50:	f1 1c       	adc	r15, r1
    8a52:	0f c0       	rjmp	.+30     	; 0x8a72 <strtol+0xa2>
    8a54:	a5 01       	movw	r20, r10
    8a56:	94 01       	movw	r18, r8
    8a58:	c7 01       	movw	r24, r14
    8a5a:	b6 01       	movw	r22, r12
    8a5c:	0e 94 a9 e1 	call	0x1c352	; 0x1c352 <__mulsi3>
    8a60:	6f 01       	movw	r12, r30
    8a62:	ff 0f       	add	r31, r31
    8a64:	ee 08       	sbc	r14, r14
    8a66:	ff 08       	sbc	r15, r15
    8a68:	c6 0e       	add	r12, r22
    8a6a:	d7 1e       	adc	r13, r23
    8a6c:	e8 1e       	adc	r14, r24
    8a6e:	f9 1e       	adc	r15, r25
    8a70:	da cf       	rjmp	.-76     	; 0x8a26 <strtol+0x56>
    8a72:	41 14       	cp	r4, r1
    8a74:	51 04       	cpc	r5, r1
    8a76:	19 f0       	breq	.+6      	; 0x8a7e <strtol+0xae>
    8a78:	f2 01       	movw	r30, r4
    8a7a:	30 82       	st	Z, r3
    8a7c:	21 82       	std	Z+1, r2	; 0x01
    8a7e:	c7 01       	movw	r24, r14
    8a80:	b6 01       	movw	r22, r12
    8a82:	cd b7       	in	r28, 0x3d	; 61
    8a84:	de b7       	in	r29, 0x3e	; 62
    8a86:	e2 e1       	ldi	r30, 0x12	; 18
    8a88:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00008a8c <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8a8c:	4a e0       	ldi	r20, 0x0A	; 10
    8a8e:	50 e0       	ldi	r21, 0x00	; 0
    8a90:	60 e0       	ldi	r22, 0x00	; 0
    8a92:	70 e0       	ldi	r23, 0x00	; 0
    8a94:	9d df       	rcall	.-198    	; 0x89d0 <strtol>
    return((int)num);
}
    8a96:	cb 01       	movw	r24, r22
    8a98:	08 95       	ret

00008a9a <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8a9a:	4a e0       	ldi	r20, 0x0A	; 10
    8a9c:	50 e0       	ldi	r21, 0x00	; 0
    8a9e:	60 e0       	ldi	r22, 0x00	; 0
    8aa0:	70 e0       	ldi	r23, 0x00	; 0
    8aa2:	96 cf       	rjmp	.-212    	; 0x89d0 <strtol>
    return(num);
}
    8aa4:	08 95       	ret

00008aa6 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8aa6:	fc 01       	movw	r30, r24
    8aa8:	62 81       	ldd	r22, Z+2	; 0x02
    8aaa:	73 81       	ldd	r23, Z+3	; 0x03
    8aac:	cb 01       	movw	r24, r22
    8aae:	a0 e0       	ldi	r26, 0x00	; 0
    8ab0:	b0 e0       	ldi	r27, 0x00	; 0
    8ab2:	ba 2f       	mov	r27, r26
    8ab4:	a9 2f       	mov	r26, r25
    8ab6:	98 2f       	mov	r25, r24
    8ab8:	88 27       	eor	r24, r24
    8aba:	21 81       	ldd	r18, Z+1	; 0x01
    8abc:	82 2b       	or	r24, r18
    8abe:	ba 2f       	mov	r27, r26
    8ac0:	a9 2f       	mov	r26, r25
    8ac2:	98 2f       	mov	r25, r24
    8ac4:	88 27       	eor	r24, r24
    8ac6:	20 81       	ld	r18, Z
    8ac8:	bc 01       	movw	r22, r24
    8aca:	cd 01       	movw	r24, r26
    8acc:	62 2b       	or	r22, r18
    8ace:	08 95       	ret

00008ad0 <st_dword>:
    8ad0:	fc 01       	movw	r30, r24
    8ad2:	40 83       	st	Z, r20
    8ad4:	51 83       	std	Z+1, r21	; 0x01
    8ad6:	62 83       	std	Z+2, r22	; 0x02
    8ad8:	73 83       	std	Z+3, r23	; 0x03
    8ada:	08 95       	ret

00008adc <mem_set>:
    8adc:	48 0f       	add	r20, r24
    8ade:	59 1f       	adc	r21, r25
    8ae0:	fc 01       	movw	r30, r24
    8ae2:	61 93       	st	Z+, r22
    8ae4:	cf 01       	movw	r24, r30
    8ae6:	e4 17       	cp	r30, r20
    8ae8:	f5 07       	cpc	r31, r21
    8aea:	d1 f7       	brne	.-12     	; 0x8ae0 <mem_set+0x4>
    8aec:	08 95       	ret

00008aee <mem_cmp>:
    8aee:	dc 01       	movw	r26, r24
    8af0:	fb 01       	movw	r30, r22
    8af2:	2d 91       	ld	r18, X+
    8af4:	81 91       	ld	r24, Z+
    8af6:	30 e0       	ldi	r19, 0x00	; 0
    8af8:	b9 01       	movw	r22, r18
    8afa:	68 1b       	sub	r22, r24
    8afc:	71 09       	sbc	r23, r1
    8afe:	cb 01       	movw	r24, r22
    8b00:	41 50       	subi	r20, 0x01	; 1
    8b02:	51 09       	sbc	r21, r1
    8b04:	11 f0       	breq	.+4      	; 0x8b0a <mem_cmp+0x1c>
    8b06:	00 97       	sbiw	r24, 0x00	; 0
    8b08:	a1 f3       	breq	.-24     	; 0x8af2 <mem_cmp+0x4>
    8b0a:	08 95       	ret

00008b0c <tchar2uni>:
    8b0c:	0f 93       	push	r16
    8b0e:	1f 93       	push	r17
    8b10:	fc 01       	movw	r30, r24
    8b12:	a0 81       	ld	r26, Z
    8b14:	b1 81       	ldd	r27, Z+1	; 0x01
    8b16:	fd 01       	movw	r30, r26
    8b18:	31 96       	adiw	r30, 0x01	; 1
    8b1a:	4c 91       	ld	r20, X
    8b1c:	47 fd       	sbrc	r20, 7
    8b1e:	04 c0       	rjmp	.+8      	; 0x8b28 <tchar2uni+0x1c>
    8b20:	50 e0       	ldi	r21, 0x00	; 0
    8b22:	60 e0       	ldi	r22, 0x00	; 0
    8b24:	70 e0       	ldi	r23, 0x00	; 0
    8b26:	68 c0       	rjmp	.+208    	; 0x8bf8 <tchar2uni+0xec>
    8b28:	24 2f       	mov	r18, r20
    8b2a:	20 7e       	andi	r18, 0xE0	; 224
    8b2c:	20 3c       	cpi	r18, 0xC0	; 192
    8b2e:	39 f4       	brne	.+14     	; 0x8b3e <tchar2uni+0x32>
    8b30:	4f 71       	andi	r20, 0x1F	; 31
    8b32:	50 e0       	ldi	r21, 0x00	; 0
    8b34:	60 e0       	ldi	r22, 0x00	; 0
    8b36:	70 e0       	ldi	r23, 0x00	; 0
    8b38:	21 e0       	ldi	r18, 0x01	; 1
    8b3a:	30 e0       	ldi	r19, 0x00	; 0
    8b3c:	16 c0       	rjmp	.+44     	; 0x8b6a <tchar2uni+0x5e>
    8b3e:	24 2f       	mov	r18, r20
    8b40:	20 7f       	andi	r18, 0xF0	; 240
    8b42:	20 3e       	cpi	r18, 0xE0	; 224
    8b44:	39 f4       	brne	.+14     	; 0x8b54 <tchar2uni+0x48>
    8b46:	4f 70       	andi	r20, 0x0F	; 15
    8b48:	50 e0       	ldi	r21, 0x00	; 0
    8b4a:	60 e0       	ldi	r22, 0x00	; 0
    8b4c:	70 e0       	ldi	r23, 0x00	; 0
    8b4e:	22 e0       	ldi	r18, 0x02	; 2
    8b50:	30 e0       	ldi	r19, 0x00	; 0
    8b52:	0b c0       	rjmp	.+22     	; 0x8b6a <tchar2uni+0x5e>
    8b54:	24 2f       	mov	r18, r20
    8b56:	28 7f       	andi	r18, 0xF8	; 248
    8b58:	20 3f       	cpi	r18, 0xF0	; 240
    8b5a:	09 f0       	breq	.+2      	; 0x8b5e <tchar2uni+0x52>
    8b5c:	54 c0       	rjmp	.+168    	; 0x8c06 <tchar2uni+0xfa>
    8b5e:	47 70       	andi	r20, 0x07	; 7
    8b60:	50 e0       	ldi	r21, 0x00	; 0
    8b62:	60 e0       	ldi	r22, 0x00	; 0
    8b64:	70 e0       	ldi	r23, 0x00	; 0
    8b66:	23 e0       	ldi	r18, 0x03	; 3
    8b68:	30 e0       	ldi	r19, 0x00	; 0
    8b6a:	31 96       	adiw	r30, 0x01	; 1
    8b6c:	df 01       	movw	r26, r30
    8b6e:	11 97       	sbiw	r26, 0x01	; 1
    8b70:	ac 91       	ld	r26, X
    8b72:	ba 2f       	mov	r27, r26
    8b74:	b0 7c       	andi	r27, 0xC0	; 192
    8b76:	b0 38       	cpi	r27, 0x80	; 128
    8b78:	09 f0       	breq	.+2      	; 0x8b7c <tchar2uni+0x70>
    8b7a:	45 c0       	rjmp	.+138    	; 0x8c06 <tchar2uni+0xfa>
    8b7c:	b6 e0       	ldi	r27, 0x06	; 6
    8b7e:	44 0f       	add	r20, r20
    8b80:	55 1f       	adc	r21, r21
    8b82:	66 1f       	adc	r22, r22
    8b84:	77 1f       	adc	r23, r23
    8b86:	ba 95       	dec	r27
    8b88:	d1 f7       	brne	.-12     	; 0x8b7e <tchar2uni+0x72>
    8b8a:	af 73       	andi	r26, 0x3F	; 63
    8b8c:	4a 2b       	or	r20, r26
    8b8e:	21 50       	subi	r18, 0x01	; 1
    8b90:	31 09       	sbc	r19, r1
    8b92:	59 f7       	brne	.-42     	; 0x8b6a <tchar2uni+0x5e>
    8b94:	8a 01       	movw	r16, r20
    8b96:	9b 01       	movw	r18, r22
    8b98:	00 58       	subi	r16, 0x80	; 128
    8b9a:	11 09       	sbc	r17, r1
    8b9c:	21 09       	sbc	r18, r1
    8b9e:	31 09       	sbc	r19, r1
    8ba0:	00 38       	cpi	r16, 0x80	; 128
    8ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ba4:	20 41       	sbci	r18, 0x10	; 16
    8ba6:	31 05       	cpc	r19, r1
    8ba8:	70 f5       	brcc	.+92     	; 0x8c06 <tchar2uni+0xfa>
    8baa:	8a 01       	movw	r16, r20
    8bac:	9b 01       	movw	r18, r22
    8bae:	18 5d       	subi	r17, 0xD8	; 216
    8bb0:	21 09       	sbc	r18, r1
    8bb2:	31 09       	sbc	r19, r1
    8bb4:	01 15       	cp	r16, r1
    8bb6:	18 40       	sbci	r17, 0x08	; 8
    8bb8:	21 05       	cpc	r18, r1
    8bba:	31 05       	cpc	r19, r1
    8bbc:	20 f1       	brcs	.+72     	; 0x8c06 <tchar2uni+0xfa>
    8bbe:	41 15       	cp	r20, r1
    8bc0:	51 05       	cpc	r21, r1
    8bc2:	21 e0       	ldi	r18, 0x01	; 1
    8bc4:	62 07       	cpc	r22, r18
    8bc6:	71 05       	cpc	r23, r1
    8bc8:	b8 f0       	brcs	.+46     	; 0x8bf8 <tchar2uni+0xec>
    8bca:	8a 01       	movw	r16, r20
    8bcc:	9b 01       	movw	r18, r22
    8bce:	21 50       	subi	r18, 0x01	; 1
    8bd0:	31 09       	sbc	r19, r1
    8bd2:	a6 e0       	ldi	r26, 0x06	; 6
    8bd4:	00 0f       	add	r16, r16
    8bd6:	11 1f       	adc	r17, r17
    8bd8:	22 1f       	adc	r18, r18
    8bda:	33 1f       	adc	r19, r19
    8bdc:	aa 95       	dec	r26
    8bde:	d1 f7       	brne	.-12     	; 0x8bd4 <tchar2uni+0xc8>
    8be0:	00 27       	eor	r16, r16
    8be2:	11 27       	eor	r17, r17
    8be4:	33 70       	andi	r19, 0x03	; 3
    8be6:	53 70       	andi	r21, 0x03	; 3
    8be8:	66 27       	eor	r22, r22
    8bea:	77 27       	eor	r23, r23
    8bec:	5c 6d       	ori	r21, 0xDC	; 220
    8bee:	78 6d       	ori	r23, 0xD8	; 216
    8bf0:	40 2b       	or	r20, r16
    8bf2:	51 2b       	or	r21, r17
    8bf4:	62 2b       	or	r22, r18
    8bf6:	73 2b       	or	r23, r19
    8bf8:	dc 01       	movw	r26, r24
    8bfa:	ed 93       	st	X+, r30
    8bfc:	fc 93       	st	X, r31
    8bfe:	34 2f       	mov	r19, r20
    8c00:	25 2f       	mov	r18, r21
    8c02:	cb 01       	movw	r24, r22
    8c04:	04 c0       	rjmp	.+8      	; 0x8c0e <tchar2uni+0x102>
    8c06:	3f ef       	ldi	r19, 0xFF	; 255
    8c08:	2f ef       	ldi	r18, 0xFF	; 255
    8c0a:	8f ef       	ldi	r24, 0xFF	; 255
    8c0c:	9f ef       	ldi	r25, 0xFF	; 255
    8c0e:	63 2f       	mov	r22, r19
    8c10:	72 2f       	mov	r23, r18
    8c12:	1f 91       	pop	r17
    8c14:	0f 91       	pop	r16
    8c16:	08 95       	ret

00008c18 <clst2sect>:
    8c18:	0f 93       	push	r16
    8c1a:	1f 93       	push	r17
    8c1c:	fc 01       	movw	r30, r24
    8c1e:	9a 01       	movw	r18, r20
    8c20:	ab 01       	movw	r20, r22
    8c22:	22 50       	subi	r18, 0x02	; 2
    8c24:	31 09       	sbc	r19, r1
    8c26:	41 09       	sbc	r20, r1
    8c28:	51 09       	sbc	r21, r1
    8c2a:	81 8d       	ldd	r24, Z+25	; 0x19
    8c2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    8c2e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8c30:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8c32:	02 97       	sbiw	r24, 0x02	; 2
    8c34:	a1 09       	sbc	r26, r1
    8c36:	b1 09       	sbc	r27, r1
    8c38:	28 17       	cp	r18, r24
    8c3a:	39 07       	cpc	r19, r25
    8c3c:	4a 07       	cpc	r20, r26
    8c3e:	5b 07       	cpc	r21, r27
    8c40:	68 f4       	brcc	.+26     	; 0x8c5c <clst2sect+0x44>
    8c42:	a1 85       	ldd	r26, Z+9	; 0x09
    8c44:	b2 85       	ldd	r27, Z+10	; 0x0a
    8c46:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    8c4a:	05 a5       	ldd	r16, Z+45	; 0x2d
    8c4c:	16 a5       	ldd	r17, Z+46	; 0x2e
    8c4e:	27 a5       	ldd	r18, Z+47	; 0x2f
    8c50:	30 a9       	ldd	r19, Z+48	; 0x30
    8c52:	60 0f       	add	r22, r16
    8c54:	71 1f       	adc	r23, r17
    8c56:	82 1f       	adc	r24, r18
    8c58:	93 1f       	adc	r25, r19
    8c5a:	03 c0       	rjmp	.+6      	; 0x8c62 <clst2sect+0x4a>
    8c5c:	60 e0       	ldi	r22, 0x00	; 0
    8c5e:	70 e0       	ldi	r23, 0x00	; 0
    8c60:	cb 01       	movw	r24, r22
    8c62:	1f 91       	pop	r17
    8c64:	0f 91       	pop	r16
    8c66:	08 95       	ret

00008c68 <clmt_clust>:
    8c68:	cf 93       	push	r28
    8c6a:	df 93       	push	r29
    8c6c:	fc 01       	movw	r30, r24
    8c6e:	c2 a1       	ldd	r28, Z+34	; 0x22
    8c70:	d3 a1       	ldd	r29, Z+35	; 0x23
    8c72:	24 96       	adiw	r28, 0x04	; 4
    8c74:	cb 01       	movw	r24, r22
    8c76:	ba 01       	movw	r22, r20
    8c78:	29 e0       	ldi	r18, 0x09	; 9
    8c7a:	96 95       	lsr	r25
    8c7c:	87 95       	ror	r24
    8c7e:	77 95       	ror	r23
    8c80:	67 95       	ror	r22
    8c82:	2a 95       	dec	r18
    8c84:	d1 f7       	brne	.-12     	; 0x8c7a <clmt_clust+0x12>
    8c86:	01 90       	ld	r0, Z+
    8c88:	f0 81       	ld	r31, Z
    8c8a:	e0 2d       	mov	r30, r0
    8c8c:	21 85       	ldd	r18, Z+9	; 0x09
    8c8e:	32 85       	ldd	r19, Z+10	; 0x0a
    8c90:	40 e0       	ldi	r20, 0x00	; 0
    8c92:	50 e0       	ldi	r21, 0x00	; 0
    8c94:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    8c98:	88 81       	ld	r24, Y
    8c9a:	99 81       	ldd	r25, Y+1	; 0x01
    8c9c:	aa 81       	ldd	r26, Y+2	; 0x02
    8c9e:	bb 81       	ldd	r27, Y+3	; 0x03
    8ca0:	00 97       	sbiw	r24, 0x00	; 0
    8ca2:	a1 05       	cpc	r26, r1
    8ca4:	b1 05       	cpc	r27, r1
    8ca6:	b1 f0       	breq	.+44     	; 0x8cd4 <clmt_clust+0x6c>
    8ca8:	28 17       	cp	r18, r24
    8caa:	39 07       	cpc	r19, r25
    8cac:	4a 07       	cpc	r20, r26
    8cae:	5b 07       	cpc	r21, r27
    8cb0:	30 f0       	brcs	.+12     	; 0x8cbe <clmt_clust+0x56>
    8cb2:	28 1b       	sub	r18, r24
    8cb4:	39 0b       	sbc	r19, r25
    8cb6:	4a 0b       	sbc	r20, r26
    8cb8:	5b 0b       	sbc	r21, r27
    8cba:	28 96       	adiw	r28, 0x08	; 8
    8cbc:	ed cf       	rjmp	.-38     	; 0x8c98 <clmt_clust+0x30>
    8cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    8cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    8cc2:	ae 81       	ldd	r26, Y+6	; 0x06
    8cc4:	bf 81       	ldd	r27, Y+7	; 0x07
    8cc6:	bc 01       	movw	r22, r24
    8cc8:	cd 01       	movw	r24, r26
    8cca:	62 0f       	add	r22, r18
    8ccc:	73 1f       	adc	r23, r19
    8cce:	84 1f       	adc	r24, r20
    8cd0:	95 1f       	adc	r25, r21
    8cd2:	03 c0       	rjmp	.+6      	; 0x8cda <clmt_clust+0x72>
    8cd4:	60 e0       	ldi	r22, 0x00	; 0
    8cd6:	70 e0       	ldi	r23, 0x00	; 0
    8cd8:	cb 01       	movw	r24, r22
    8cda:	df 91       	pop	r29
    8cdc:	cf 91       	pop	r28
    8cde:	08 95       	ret

00008ce0 <sum_sfn>:
    8ce0:	fc 01       	movw	r30, r24
    8ce2:	9c 01       	movw	r18, r24
    8ce4:	25 5f       	subi	r18, 0xF5	; 245
    8ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ce8:	80 e0       	ldi	r24, 0x00	; 0
    8cea:	98 2f       	mov	r25, r24
    8cec:	90 fb       	bst	r25, 0
    8cee:	97 95       	ror	r25
    8cf0:	97 f9       	bld	r25, 7
    8cf2:	81 91       	ld	r24, Z+
    8cf4:	89 0f       	add	r24, r25
    8cf6:	e2 17       	cp	r30, r18
    8cf8:	f3 07       	cpc	r31, r19
    8cfa:	b9 f7       	brne	.-18     	; 0x8cea <sum_sfn+0xa>
    8cfc:	08 95       	ret

00008cfe <get_ldnumber>:
    8cfe:	cf 93       	push	r28
    8d00:	df 93       	push	r29
    8d02:	dc 01       	movw	r26, r24
    8d04:	ed 91       	ld	r30, X+
    8d06:	fc 91       	ld	r31, X
    8d08:	11 97       	sbiw	r26, 0x01	; 1
    8d0a:	30 97       	sbiw	r30, 0x00	; 0
    8d0c:	f9 f0       	breq	.+62     	; 0x8d4c <get_ldnumber+0x4e>
    8d0e:	9f 01       	movw	r18, r30
    8d10:	2f 5f       	subi	r18, 0xFF	; 255
    8d12:	3f 4f       	sbci	r19, 0xFF	; 255
    8d14:	e9 01       	movw	r28, r18
    8d16:	21 97       	sbiw	r28, 0x01	; 1
    8d18:	88 81       	ld	r24, Y
    8d1a:	80 32       	cpi	r24, 0x20	; 32
    8d1c:	18 f0       	brcs	.+6      	; 0x8d24 <get_ldnumber+0x26>
    8d1e:	8a 33       	cpi	r24, 0x3A	; 58
    8d20:	b9 f7       	brne	.-18     	; 0x8d10 <get_ldnumber+0x12>
    8d22:	04 c0       	rjmp	.+8      	; 0x8d2c <get_ldnumber+0x2e>
    8d24:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <CurrVol>
    8d28:	90 e0       	ldi	r25, 0x00	; 0
    8d2a:	12 c0       	rjmp	.+36     	; 0x8d50 <get_ldnumber+0x52>
    8d2c:	90 81       	ld	r25, Z
    8d2e:	80 ed       	ldi	r24, 0xD0	; 208
    8d30:	89 0f       	add	r24, r25
    8d32:	8a 30       	cpi	r24, 0x0A	; 10
    8d34:	58 f4       	brcc	.+22     	; 0x8d4c <get_ldnumber+0x4e>
    8d36:	32 96       	adiw	r30, 0x02	; 2
    8d38:	2e 17       	cp	r18, r30
    8d3a:	3f 07       	cpc	r19, r31
    8d3c:	39 f4       	brne	.+14     	; 0x8d4c <get_ldnumber+0x4e>
    8d3e:	90 33       	cpi	r25, 0x30	; 48
    8d40:	29 f4       	brne	.+10     	; 0x8d4c <get_ldnumber+0x4e>
    8d42:	2d 93       	st	X+, r18
    8d44:	3c 93       	st	X, r19
    8d46:	80 e0       	ldi	r24, 0x00	; 0
    8d48:	90 e0       	ldi	r25, 0x00	; 0
    8d4a:	02 c0       	rjmp	.+4      	; 0x8d50 <get_ldnumber+0x52>
    8d4c:	8f ef       	ldi	r24, 0xFF	; 255
    8d4e:	9f ef       	ldi	r25, 0xFF	; 255
    8d50:	df 91       	pop	r29
    8d52:	cf 91       	pop	r28
    8d54:	08 95       	ret

00008d56 <validate>:
    8d56:	0f 93       	push	r16
    8d58:	1f 93       	push	r17
    8d5a:	cf 93       	push	r28
    8d5c:	df 93       	push	r29
    8d5e:	ec 01       	movw	r28, r24
    8d60:	8b 01       	movw	r16, r22
    8d62:	89 2b       	or	r24, r25
    8d64:	f9 f0       	breq	.+62     	; 0x8da4 <validate+0x4e>
    8d66:	e8 81       	ld	r30, Y
    8d68:	f9 81       	ldd	r31, Y+1	; 0x01
    8d6a:	30 97       	sbiw	r30, 0x00	; 0
    8d6c:	d9 f0       	breq	.+54     	; 0x8da4 <validate+0x4e>
    8d6e:	80 81       	ld	r24, Z
    8d70:	88 23       	and	r24, r24
    8d72:	c1 f0       	breq	.+48     	; 0x8da4 <validate+0x4e>
    8d74:	2a 81       	ldd	r18, Y+2	; 0x02
    8d76:	3b 81       	ldd	r19, Y+3	; 0x03
    8d78:	85 81       	ldd	r24, Z+5	; 0x05
    8d7a:	96 81       	ldd	r25, Z+6	; 0x06
    8d7c:	28 17       	cp	r18, r24
    8d7e:	39 07       	cpc	r19, r25
    8d80:	89 f4       	brne	.+34     	; 0x8da4 <validate+0x4e>
    8d82:	81 81       	ldd	r24, Z+1	; 0x01
    8d84:	0e 94 6b 68 	call	0xd0d6	; 0xd0d6 <disk_status>
    8d88:	80 fd       	sbrc	r24, 0
    8d8a:	0c c0       	rjmp	.+24     	; 0x8da4 <validate+0x4e>
    8d8c:	28 81       	ld	r18, Y
    8d8e:	39 81       	ldd	r19, Y+1	; 0x01
    8d90:	80 e0       	ldi	r24, 0x00	; 0
    8d92:	90 e0       	ldi	r25, 0x00	; 0
    8d94:	f8 01       	movw	r30, r16
    8d96:	31 83       	std	Z+1, r19	; 0x01
    8d98:	20 83       	st	Z, r18
    8d9a:	df 91       	pop	r29
    8d9c:	cf 91       	pop	r28
    8d9e:	1f 91       	pop	r17
    8da0:	0f 91       	pop	r16
    8da2:	08 95       	ret
    8da4:	89 e0       	ldi	r24, 0x09	; 9
    8da6:	90 e0       	ldi	r25, 0x00	; 0
    8da8:	20 e0       	ldi	r18, 0x00	; 0
    8daa:	30 e0       	ldi	r19, 0x00	; 0
    8dac:	f3 cf       	rjmp	.-26     	; 0x8d94 <validate+0x3e>

00008dae <mem_cpy.part.0>:
    8dae:	fb 01       	movw	r30, r22
    8db0:	48 0f       	add	r20, r24
    8db2:	59 1f       	adc	r21, r25
    8db4:	21 91       	ld	r18, Z+
    8db6:	dc 01       	movw	r26, r24
    8db8:	2d 93       	st	X+, r18
    8dba:	cd 01       	movw	r24, r26
    8dbc:	a4 17       	cp	r26, r20
    8dbe:	b5 07       	cpc	r27, r21
    8dc0:	c9 f7       	brne	.-14     	; 0x8db4 <mem_cpy.part.0+0x6>
    8dc2:	08 95       	ret

00008dc4 <put_utf>:
    8dc4:	0f 93       	push	r16
    8dc6:	1f 93       	push	r17
    8dc8:	fa 01       	movw	r30, r20
    8dca:	60 38       	cpi	r22, 0x80	; 128
    8dcc:	71 05       	cpc	r23, r1
    8dce:	81 05       	cpc	r24, r1
    8dd0:	91 05       	cpc	r25, r1
    8dd2:	30 f4       	brcc	.+12     	; 0x8de0 <put_utf+0x1c>
    8dd4:	23 2b       	or	r18, r19
    8dd6:	09 f4       	brne	.+2      	; 0x8dda <put_utf+0x16>
    8dd8:	9e c0       	rjmp	.+316    	; 0x8f16 <put_utf+0x152>
    8dda:	60 83       	st	Z, r22
    8ddc:	81 e0       	ldi	r24, 0x01	; 1
    8dde:	9c c0       	rjmp	.+312    	; 0x8f18 <put_utf+0x154>
    8de0:	61 15       	cp	r22, r1
    8de2:	48 e0       	ldi	r20, 0x08	; 8
    8de4:	74 07       	cpc	r23, r20
    8de6:	81 05       	cpc	r24, r1
    8de8:	91 05       	cpc	r25, r1
    8dea:	a0 f4       	brcc	.+40     	; 0x8e14 <put_utf+0x50>
    8dec:	22 30       	cpi	r18, 0x02	; 2
    8dee:	31 05       	cpc	r19, r1
    8df0:	08 f4       	brcc	.+2      	; 0x8df4 <put_utf+0x30>
    8df2:	91 c0       	rjmp	.+290    	; 0x8f16 <put_utf+0x152>
    8df4:	8b 01       	movw	r16, r22
    8df6:	9c 01       	movw	r18, r24
    8df8:	76 e0       	ldi	r23, 0x06	; 6
    8dfa:	36 95       	lsr	r19
    8dfc:	27 95       	ror	r18
    8dfe:	17 95       	ror	r17
    8e00:	07 95       	ror	r16
    8e02:	7a 95       	dec	r23
    8e04:	d1 f7       	brne	.-12     	; 0x8dfa <put_utf+0x36>
    8e06:	00 6c       	ori	r16, 0xC0	; 192
    8e08:	00 83       	st	Z, r16
    8e0a:	6f 73       	andi	r22, 0x3F	; 63
    8e0c:	60 68       	ori	r22, 0x80	; 128
    8e0e:	61 83       	std	Z+1, r22	; 0x01
    8e10:	82 e0       	ldi	r24, 0x02	; 2
    8e12:	82 c0       	rjmp	.+260    	; 0x8f18 <put_utf+0x154>
    8e14:	61 15       	cp	r22, r1
    8e16:	71 05       	cpc	r23, r1
    8e18:	41 e0       	ldi	r20, 0x01	; 1
    8e1a:	84 07       	cpc	r24, r20
    8e1c:	91 05       	cpc	r25, r1
    8e1e:	58 f5       	brcc	.+86     	; 0x8e76 <put_utf+0xb2>
    8e20:	23 30       	cpi	r18, 0x03	; 3
    8e22:	31 05       	cpc	r19, r1
    8e24:	08 f4       	brcc	.+2      	; 0x8e28 <put_utf+0x64>
    8e26:	77 c0       	rjmp	.+238    	; 0x8f16 <put_utf+0x152>
    8e28:	8b 01       	movw	r16, r22
    8e2a:	9c 01       	movw	r18, r24
    8e2c:	18 5d       	subi	r17, 0xD8	; 216
    8e2e:	21 09       	sbc	r18, r1
    8e30:	31 09       	sbc	r19, r1
    8e32:	01 15       	cp	r16, r1
    8e34:	18 40       	sbci	r17, 0x08	; 8
    8e36:	21 05       	cpc	r18, r1
    8e38:	31 05       	cpc	r19, r1
    8e3a:	08 f4       	brcc	.+2      	; 0x8e3e <put_utf+0x7a>
    8e3c:	6c c0       	rjmp	.+216    	; 0x8f16 <put_utf+0x152>
    8e3e:	8b 01       	movw	r16, r22
    8e40:	9c 01       	movw	r18, r24
    8e42:	4c e0       	ldi	r20, 0x0C	; 12
    8e44:	36 95       	lsr	r19
    8e46:	27 95       	ror	r18
    8e48:	17 95       	ror	r17
    8e4a:	07 95       	ror	r16
    8e4c:	4a 95       	dec	r20
    8e4e:	d1 f7       	brne	.-12     	; 0x8e44 <put_utf+0x80>
    8e50:	00 6e       	ori	r16, 0xE0	; 224
    8e52:	00 83       	st	Z, r16
    8e54:	8b 01       	movw	r16, r22
    8e56:	9c 01       	movw	r18, r24
    8e58:	56 e0       	ldi	r21, 0x06	; 6
    8e5a:	36 95       	lsr	r19
    8e5c:	27 95       	ror	r18
    8e5e:	17 95       	ror	r17
    8e60:	07 95       	ror	r16
    8e62:	5a 95       	dec	r21
    8e64:	d1 f7       	brne	.-12     	; 0x8e5a <put_utf+0x96>
    8e66:	0f 73       	andi	r16, 0x3F	; 63
    8e68:	00 68       	ori	r16, 0x80	; 128
    8e6a:	01 83       	std	Z+1, r16	; 0x01
    8e6c:	6f 73       	andi	r22, 0x3F	; 63
    8e6e:	60 68       	ori	r22, 0x80	; 128
    8e70:	62 83       	std	Z+2, r22	; 0x02
    8e72:	83 e0       	ldi	r24, 0x03	; 3
    8e74:	51 c0       	rjmp	.+162    	; 0x8f18 <put_utf+0x154>
    8e76:	24 30       	cpi	r18, 0x04	; 4
    8e78:	31 05       	cpc	r19, r1
    8e7a:	08 f4       	brcc	.+2      	; 0x8e7e <put_utf+0xba>
    8e7c:	4c c0       	rjmp	.+152    	; 0x8f16 <put_utf+0x152>
    8e7e:	8b 01       	movw	r16, r22
    8e80:	9c 01       	movw	r18, r24
    8e82:	00 27       	eor	r16, r16
    8e84:	11 27       	eor	r17, r17
    8e86:	38 5d       	subi	r19, 0xD8	; 216
    8e88:	b6 e0       	ldi	r27, 0x06	; 6
    8e8a:	36 95       	lsr	r19
    8e8c:	27 95       	ror	r18
    8e8e:	17 95       	ror	r17
    8e90:	07 95       	ror	r16
    8e92:	ba 95       	dec	r27
    8e94:	d1 f7       	brne	.-12     	; 0x8e8a <put_utf+0xc6>
    8e96:	01 15       	cp	r16, r1
    8e98:	11 05       	cpc	r17, r1
    8e9a:	40 e1       	ldi	r20, 0x10	; 16
    8e9c:	24 07       	cpc	r18, r20
    8e9e:	31 05       	cpc	r19, r1
    8ea0:	d0 f5       	brcc	.+116    	; 0x8f16 <put_utf+0x152>
    8ea2:	dc 01       	movw	r26, r24
    8ea4:	cb 01       	movw	r24, r22
    8ea6:	aa 27       	eor	r26, r26
    8ea8:	bb 27       	eor	r27, r27
    8eaa:	9c 5d       	subi	r25, 0xDC	; 220
    8eac:	a1 09       	sbc	r26, r1
    8eae:	b1 09       	sbc	r27, r1
    8eb0:	81 15       	cp	r24, r1
    8eb2:	44 e0       	ldi	r20, 0x04	; 4
    8eb4:	94 07       	cpc	r25, r20
    8eb6:	a1 05       	cpc	r26, r1
    8eb8:	b1 05       	cpc	r27, r1
    8eba:	68 f5       	brcc	.+90     	; 0x8f16 <put_utf+0x152>
    8ebc:	80 2b       	or	r24, r16
    8ebe:	91 2b       	or	r25, r17
    8ec0:	a2 2b       	or	r26, r18
    8ec2:	b3 2b       	or	r27, r19
    8ec4:	11 96       	adiw	r26, 0x01	; 1
    8ec6:	ac 01       	movw	r20, r24
    8ec8:	bd 01       	movw	r22, r26
    8eca:	22 e1       	ldi	r18, 0x12	; 18
    8ecc:	76 95       	lsr	r23
    8ece:	67 95       	ror	r22
    8ed0:	57 95       	ror	r21
    8ed2:	47 95       	ror	r20
    8ed4:	2a 95       	dec	r18
    8ed6:	d1 f7       	brne	.-12     	; 0x8ecc <put_utf+0x108>
    8ed8:	40 6f       	ori	r20, 0xF0	; 240
    8eda:	40 83       	st	Z, r20
    8edc:	ac 01       	movw	r20, r24
    8ede:	bd 01       	movw	r22, r26
    8ee0:	3c e0       	ldi	r19, 0x0C	; 12
    8ee2:	76 95       	lsr	r23
    8ee4:	67 95       	ror	r22
    8ee6:	57 95       	ror	r21
    8ee8:	47 95       	ror	r20
    8eea:	3a 95       	dec	r19
    8eec:	d1 f7       	brne	.-12     	; 0x8ee2 <put_utf+0x11e>
    8eee:	4f 73       	andi	r20, 0x3F	; 63
    8ef0:	40 68       	ori	r20, 0x80	; 128
    8ef2:	41 83       	std	Z+1, r20	; 0x01
    8ef4:	ac 01       	movw	r20, r24
    8ef6:	bd 01       	movw	r22, r26
    8ef8:	a6 e0       	ldi	r26, 0x06	; 6
    8efa:	76 95       	lsr	r23
    8efc:	67 95       	ror	r22
    8efe:	57 95       	ror	r21
    8f00:	47 95       	ror	r20
    8f02:	aa 95       	dec	r26
    8f04:	d1 f7       	brne	.-12     	; 0x8efa <put_utf+0x136>
    8f06:	4f 73       	andi	r20, 0x3F	; 63
    8f08:	40 68       	ori	r20, 0x80	; 128
    8f0a:	42 83       	std	Z+2, r20	; 0x02
    8f0c:	8f 73       	andi	r24, 0x3F	; 63
    8f0e:	80 68       	ori	r24, 0x80	; 128
    8f10:	83 83       	std	Z+3, r24	; 0x03
    8f12:	84 e0       	ldi	r24, 0x04	; 4
    8f14:	01 c0       	rjmp	.+2      	; 0x8f18 <put_utf+0x154>
    8f16:	80 e0       	ldi	r24, 0x00	; 0
    8f18:	1f 91       	pop	r17
    8f1a:	0f 91       	pop	r16
    8f1c:	08 95       	ret

00008f1e <get_fileinfo>:
    8f1e:	a0 e0       	ldi	r26, 0x00	; 0
    8f20:	b0 e0       	ldi	r27, 0x00	; 0
    8f22:	e5 e9       	ldi	r30, 0x95	; 149
    8f24:	f7 e4       	ldi	r31, 0x47	; 71
    8f26:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    8f2a:	fc 01       	movw	r30, r24
    8f2c:	60 80       	ld	r6, Z
    8f2e:	71 80       	ldd	r7, Z+1	; 0x01
    8f30:	fb 01       	movw	r30, r22
    8f32:	16 8a       	std	Z+22, r1	; 0x16
    8f34:	fc 01       	movw	r30, r24
    8f36:	06 89       	ldd	r16, Z+22	; 0x16
    8f38:	17 89       	ldd	r17, Z+23	; 0x17
    8f3a:	20 8d       	ldd	r18, Z+24	; 0x18
    8f3c:	31 8d       	ldd	r19, Z+25	; 0x19
    8f3e:	01 15       	cp	r16, r1
    8f40:	11 05       	cpc	r17, r1
    8f42:	21 05       	cpc	r18, r1
    8f44:	31 05       	cpc	r19, r1
    8f46:	09 f4       	brne	.+2      	; 0x8f4a <get_fileinfo+0x2c>
    8f48:	f5 c0       	rjmp	.+490    	; 0x9134 <get_fileinfo+0x216>
    8f4a:	eb 01       	movw	r28, r22
    8f4c:	8c 01       	movw	r16, r24
    8f4e:	80 a5       	ldd	r24, Z+40	; 0x28
    8f50:	91 a5       	ldd	r25, Z+41	; 0x29
    8f52:	a2 a5       	ldd	r26, Z+42	; 0x2a
    8f54:	b3 a5       	ldd	r27, Z+43	; 0x2b
    8f56:	8f 3f       	cpi	r24, 0xFF	; 255
    8f58:	9f 4f       	sbci	r25, 0xFF	; 255
    8f5a:	af 4f       	sbci	r26, 0xFF	; 255
    8f5c:	bf 4f       	sbci	r27, 0xFF	; 255
    8f5e:	09 f4       	brne	.+2      	; 0x8f62 <get_fileinfo+0x44>
    8f60:	48 c0       	rjmp	.+144    	; 0x8ff2 <get_fileinfo+0xd4>
    8f62:	a1 2c       	mov	r10, r1
    8f64:	b1 2c       	mov	r11, r1
    8f66:	c1 2c       	mov	r12, r1
    8f68:	d1 2c       	mov	r13, r1
    8f6a:	e1 2c       	mov	r14, r1
    8f6c:	f1 2c       	mov	r15, r1
    8f6e:	88 24       	eor	r8, r8
    8f70:	8a 94       	dec	r8
    8f72:	91 2c       	mov	r9, r1
    8f74:	f3 01       	movw	r30, r6
    8f76:	83 85       	ldd	r24, Z+11	; 0x0b
    8f78:	94 85       	ldd	r25, Z+12	; 0x0c
    8f7a:	fc 01       	movw	r30, r24
    8f7c:	ea 0d       	add	r30, r10
    8f7e:	fb 1d       	adc	r31, r11
    8f80:	80 81       	ld	r24, Z
    8f82:	91 81       	ldd	r25, Z+1	; 0x01
    8f84:	00 97       	sbiw	r24, 0x00	; 0
    8f86:	69 f1       	breq	.+90     	; 0x8fe2 <get_fileinfo+0xc4>
    8f88:	c1 14       	cp	r12, r1
    8f8a:	d1 04       	cpc	r13, r1
    8f8c:	29 f4       	brne	.+10     	; 0x8f98 <get_fileinfo+0x7a>
    8f8e:	9c 01       	movw	r18, r24
    8f90:	38 5d       	subi	r19, 0xD8	; 216
    8f92:	21 15       	cp	r18, r1
    8f94:	38 40       	sbci	r19, 0x08	; 8
    8f96:	f0 f0       	brcs	.+60     	; 0x8fd4 <get_fileinfo+0xb6>
    8f98:	a7 01       	movw	r20, r14
    8f9a:	4a 5e       	subi	r20, 0xEA	; 234
    8f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    8f9e:	4c 0f       	add	r20, r28
    8fa0:	5d 1f       	adc	r21, r29
    8fa2:	16 01       	movw	r2, r12
    8fa4:	41 2c       	mov	r4, r1
    8fa6:	51 2c       	mov	r5, r1
    8fa8:	21 01       	movw	r4, r2
    8faa:	33 24       	eor	r3, r3
    8fac:	22 24       	eor	r2, r2
    8fae:	a0 e0       	ldi	r26, 0x00	; 0
    8fb0:	b0 e0       	ldi	r27, 0x00	; 0
    8fb2:	bc 01       	movw	r22, r24
    8fb4:	cd 01       	movw	r24, r26
    8fb6:	62 29       	or	r22, r2
    8fb8:	73 29       	or	r23, r3
    8fba:	84 29       	or	r24, r4
    8fbc:	95 29       	or	r25, r5
    8fbe:	94 01       	movw	r18, r8
    8fc0:	2e 19       	sub	r18, r14
    8fc2:	3f 09       	sbc	r19, r15
    8fc4:	ff de       	rcall	.-514    	; 0x8dc4 <put_utf>
    8fc6:	90 e0       	ldi	r25, 0x00	; 0
    8fc8:	00 97       	sbiw	r24, 0x00	; 0
    8fca:	49 f0       	breq	.+18     	; 0x8fde <get_fileinfo+0xc0>
    8fcc:	e8 0e       	add	r14, r24
    8fce:	f9 1e       	adc	r15, r25
    8fd0:	80 e0       	ldi	r24, 0x00	; 0
    8fd2:	90 e0       	ldi	r25, 0x00	; 0
    8fd4:	e2 e0       	ldi	r30, 0x02	; 2
    8fd6:	ae 0e       	add	r10, r30
    8fd8:	b1 1c       	adc	r11, r1
    8fda:	6c 01       	movw	r12, r24
    8fdc:	cb cf       	rjmp	.-106    	; 0x8f74 <get_fileinfo+0x56>
    8fde:	e1 2c       	mov	r14, r1
    8fe0:	f1 2c       	mov	r15, r1
    8fe2:	cd 28       	or	r12, r13
    8fe4:	11 f0       	breq	.+4      	; 0x8fea <get_fileinfo+0xcc>
    8fe6:	e1 2c       	mov	r14, r1
    8fe8:	f1 2c       	mov	r15, r1
    8fea:	fe 01       	movw	r30, r28
    8fec:	ee 0d       	add	r30, r14
    8fee:	ff 1d       	adc	r31, r15
    8ff0:	16 8a       	std	Z+22, r1	; 0x16
    8ff2:	e1 2c       	mov	r14, r1
    8ff4:	f1 2c       	mov	r15, r1
    8ff6:	80 e0       	ldi	r24, 0x00	; 0
    8ff8:	90 e0       	ldi	r25, 0x00	; 0
    8ffa:	2c e0       	ldi	r18, 0x0C	; 12
    8ffc:	a2 2e       	mov	r10, r18
    8ffe:	b1 2c       	mov	r11, r1
    9000:	3e e2       	ldi	r19, 0x2E	; 46
    9002:	93 2e       	mov	r9, r19
    9004:	6c 01       	movw	r12, r24
    9006:	ff ef       	ldi	r31, 0xFF	; 255
    9008:	cf 1a       	sub	r12, r31
    900a:	df 0a       	sbc	r13, r31
    900c:	f8 01       	movw	r30, r16
    900e:	22 8d       	ldd	r18, Z+26	; 0x1a
    9010:	33 8d       	ldd	r19, Z+27	; 0x1b
    9012:	f9 01       	movw	r30, r18
    9014:	e8 0f       	add	r30, r24
    9016:	f9 1f       	adc	r31, r25
    9018:	80 81       	ld	r24, Z
    901a:	90 e0       	ldi	r25, 0x00	; 0
    901c:	80 32       	cpi	r24, 0x20	; 32
    901e:	91 05       	cpc	r25, r1
    9020:	71 f1       	breq	.+92     	; 0x907e <get_fileinfo+0x160>
    9022:	85 30       	cpi	r24, 0x05	; 5
    9024:	91 05       	cpc	r25, r1
    9026:	11 f4       	brne	.+4      	; 0x902c <get_fileinfo+0x10e>
    9028:	85 ee       	ldi	r24, 0xE5	; 229
    902a:	90 e0       	ldi	r25, 0x00	; 0
    902c:	f9 e0       	ldi	r31, 0x09	; 9
    902e:	cf 16       	cp	r12, r31
    9030:	d1 04       	cpc	r13, r1
    9032:	59 f4       	brne	.+22     	; 0x904a <get_fileinfo+0x12c>
    9034:	2c e0       	ldi	r18, 0x0C	; 12
    9036:	e2 16       	cp	r14, r18
    9038:	f1 04       	cpc	r15, r1
    903a:	38 f4       	brcc	.+14     	; 0x904a <get_fileinfo+0x12c>
    903c:	fe 01       	movw	r30, r28
    903e:	ee 0d       	add	r30, r14
    9040:	ff 1d       	adc	r31, r15
    9042:	91 86       	std	Z+9, r9	; 0x09
    9044:	f7 01       	movw	r30, r14
    9046:	31 96       	adiw	r30, 0x01	; 1
    9048:	7f 01       	movw	r14, r30
    904a:	65 eb       	ldi	r22, 0xB5	; 181
    904c:	71 e0       	ldi	r23, 0x01	; 1
    904e:	0e 94 f4 67 	call	0xcfe8	; 0xcfe8 <ff_oem2uni>
    9052:	00 97       	sbiw	r24, 0x00	; 0
    9054:	19 f4       	brne	.+6      	; 0x905c <get_fileinfo+0x13e>
    9056:	e1 2c       	mov	r14, r1
    9058:	f1 2c       	mov	r15, r1
    905a:	16 c0       	rjmp	.+44     	; 0x9088 <get_fileinfo+0x16a>
    905c:	a7 01       	movw	r20, r14
    905e:	47 5f       	subi	r20, 0xF7	; 247
    9060:	5f 4f       	sbci	r21, 0xFF	; 255
    9062:	4c 0f       	add	r20, r28
    9064:	5d 1f       	adc	r21, r29
    9066:	bc 01       	movw	r22, r24
    9068:	80 e0       	ldi	r24, 0x00	; 0
    906a:	90 e0       	ldi	r25, 0x00	; 0
    906c:	95 01       	movw	r18, r10
    906e:	2e 19       	sub	r18, r14
    9070:	3f 09       	sbc	r19, r15
    9072:	a8 de       	rcall	.-688    	; 0x8dc4 <put_utf>
    9074:	90 e0       	ldi	r25, 0x00	; 0
    9076:	00 97       	sbiw	r24, 0x00	; 0
    9078:	71 f3       	breq	.-36     	; 0x9056 <get_fileinfo+0x138>
    907a:	e8 0e       	add	r14, r24
    907c:	f9 1e       	adc	r15, r25
    907e:	c6 01       	movw	r24, r12
    9080:	8b 30       	cpi	r24, 0x0B	; 11
    9082:	91 05       	cpc	r25, r1
    9084:	09 f0       	breq	.+2      	; 0x9088 <get_fileinfo+0x16a>
    9086:	be cf       	rjmp	.-132    	; 0x9004 <get_fileinfo+0xe6>
    9088:	fe 01       	movw	r30, r28
    908a:	ee 0d       	add	r30, r14
    908c:	ff 1d       	adc	r31, r15
    908e:	11 86       	std	Z+9, r1	; 0x09
    9090:	8e 89       	ldd	r24, Y+22	; 0x16
    9092:	81 11       	cpse	r24, r1
    9094:	36 c0       	rjmp	.+108    	; 0x9102 <get_fileinfo+0x1e4>
    9096:	e1 14       	cp	r14, r1
    9098:	f1 04       	cpc	r15, r1
    909a:	31 f0       	breq	.+12     	; 0x90a8 <get_fileinfo+0x18a>
    909c:	de 01       	movw	r26, r28
    909e:	19 96       	adiw	r26, 0x09	; 9
    90a0:	58 e0       	ldi	r21, 0x08	; 8
    90a2:	20 e0       	ldi	r18, 0x00	; 0
    90a4:	30 e0       	ldi	r19, 0x00	; 0
    90a6:	14 c0       	rjmp	.+40     	; 0x90d0 <get_fileinfo+0x1b2>
    90a8:	8f e3       	ldi	r24, 0x3F	; 63
    90aa:	8e 8b       	std	Y+22, r24	; 0x16
    90ac:	21 e0       	ldi	r18, 0x01	; 1
    90ae:	30 e0       	ldi	r19, 0x00	; 0
    90b0:	1c c0       	rjmp	.+56     	; 0x90ea <get_fileinfo+0x1cc>
    90b2:	90 e0       	ldi	r25, 0x00	; 0
    90b4:	8e 32       	cpi	r24, 0x2E	; 46
    90b6:	91 05       	cpc	r25, r1
    90b8:	09 f4       	brne	.+2      	; 0x90bc <get_fileinfo+0x19e>
    90ba:	50 e1       	ldi	r21, 0x10	; 16
    90bc:	bc 01       	movw	r22, r24
    90be:	61 54       	subi	r22, 0x41	; 65
    90c0:	71 09       	sbc	r23, r1
    90c2:	6a 31       	cpi	r22, 0x1A	; 26
    90c4:	71 05       	cpc	r23, r1
    90c6:	40 f0       	brcs	.+16     	; 0x90d8 <get_fileinfo+0x1ba>
    90c8:	fd 01       	movw	r30, r26
    90ca:	84 87       	std	Z+12, r24	; 0x0c
    90cc:	2f 5f       	subi	r18, 0xFF	; 255
    90ce:	3f 4f       	sbci	r19, 0xFF	; 255
    90d0:	8d 91       	ld	r24, X+
    90d2:	81 11       	cpse	r24, r1
    90d4:	ee cf       	rjmp	.-36     	; 0x90b2 <get_fileinfo+0x194>
    90d6:	09 c0       	rjmp	.+18     	; 0x90ea <get_fileinfo+0x1cc>
    90d8:	f8 01       	movw	r30, r16
    90da:	62 8d       	ldd	r22, Z+26	; 0x1a
    90dc:	73 8d       	ldd	r23, Z+27	; 0x1b
    90de:	fb 01       	movw	r30, r22
    90e0:	44 85       	ldd	r20, Z+12	; 0x0c
    90e2:	45 23       	and	r20, r21
    90e4:	89 f3       	breq	.-30     	; 0x90c8 <get_fileinfo+0x1aa>
    90e6:	80 96       	adiw	r24, 0x20	; 32
    90e8:	ef cf       	rjmp	.-34     	; 0x90c8 <get_fileinfo+0x1aa>
    90ea:	fe 01       	movw	r30, r28
    90ec:	e2 0f       	add	r30, r18
    90ee:	f3 1f       	adc	r31, r19
    90f0:	16 8a       	std	Z+22, r1	; 0x16
    90f2:	f8 01       	movw	r30, r16
    90f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    90f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    90f8:	fc 01       	movw	r30, r24
    90fa:	84 85       	ldd	r24, Z+12	; 0x0c
    90fc:	81 11       	cpse	r24, r1
    90fe:	01 c0       	rjmp	.+2      	; 0x9102 <get_fileinfo+0x1e4>
    9100:	19 86       	std	Y+9, r1	; 0x09
    9102:	f8 01       	movw	r30, r16
    9104:	82 8d       	ldd	r24, Z+26	; 0x1a
    9106:	93 8d       	ldd	r25, Z+27	; 0x1b
    9108:	fc 01       	movw	r30, r24
    910a:	83 85       	ldd	r24, Z+11	; 0x0b
    910c:	88 87       	std	Y+8, r24	; 0x08
    910e:	f8 01       	movw	r30, r16
    9110:	02 8d       	ldd	r16, Z+26	; 0x1a
    9112:	13 8d       	ldd	r17, Z+27	; 0x1b
    9114:	c8 01       	movw	r24, r16
    9116:	4c 96       	adiw	r24, 0x1c	; 28
    9118:	c6 dc       	rcall	.-1652   	; 0x8aa6 <ld_dword>
    911a:	68 83       	st	Y, r22
    911c:	79 83       	std	Y+1, r23	; 0x01
    911e:	8a 83       	std	Y+2, r24	; 0x02
    9120:	9b 83       	std	Y+3, r25	; 0x03
    9122:	f8 01       	movw	r30, r16
    9124:	86 89       	ldd	r24, Z+22	; 0x16
    9126:	97 89       	ldd	r25, Z+23	; 0x17
    9128:	9f 83       	std	Y+7, r25	; 0x07
    912a:	8e 83       	std	Y+6, r24	; 0x06
    912c:	80 8d       	ldd	r24, Z+24	; 0x18
    912e:	91 8d       	ldd	r25, Z+25	; 0x19
    9130:	9d 83       	std	Y+5, r25	; 0x05
    9132:	8c 83       	std	Y+4, r24	; 0x04
    9134:	cd b7       	in	r28, 0x3d	; 61
    9136:	de b7       	in	r29, 0x3e	; 62
    9138:	e2 e1       	ldi	r30, 0x12	; 18
    913a:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000913e <ld_clust.isra.4>:
    913e:	fb 01       	movw	r30, r22
    9140:	42 8d       	ldd	r20, Z+26	; 0x1a
    9142:	53 8d       	ldd	r21, Z+27	; 0x1b
    9144:	60 e0       	ldi	r22, 0x00	; 0
    9146:	70 e0       	ldi	r23, 0x00	; 0
    9148:	83 30       	cpi	r24, 0x03	; 3
    914a:	59 f4       	brne	.+22     	; 0x9162 <ld_clust.isra.4+0x24>
    914c:	84 89       	ldd	r24, Z+20	; 0x14
    914e:	95 89       	ldd	r25, Z+21	; 0x15
    9150:	a0 e0       	ldi	r26, 0x00	; 0
    9152:	b0 e0       	ldi	r27, 0x00	; 0
    9154:	dc 01       	movw	r26, r24
    9156:	99 27       	eor	r25, r25
    9158:	88 27       	eor	r24, r24
    915a:	48 2b       	or	r20, r24
    915c:	59 2b       	or	r21, r25
    915e:	6a 2b       	or	r22, r26
    9160:	7b 2b       	or	r23, r27
    9162:	cb 01       	movw	r24, r22
    9164:	ba 01       	movw	r22, r20
    9166:	08 95       	ret

00009168 <st_clust.isra.5>:
    9168:	fb 01       	movw	r30, r22
    916a:	22 8f       	std	Z+26, r18	; 0x1a
    916c:	33 8f       	std	Z+27, r19	; 0x1b
    916e:	dc 01       	movw	r26, r24
    9170:	8c 91       	ld	r24, X
    9172:	83 30       	cpi	r24, 0x03	; 3
    9174:	29 f4       	brne	.+10     	; 0x9180 <st_clust.isra.5+0x18>
    9176:	ca 01       	movw	r24, r20
    9178:	aa 27       	eor	r26, r26
    917a:	bb 27       	eor	r27, r27
    917c:	84 8b       	std	Z+20, r24	; 0x14
    917e:	95 8b       	std	Z+21, r25	; 0x15
    9180:	08 95       	ret

00009182 <sync_window.part.6>:
    9182:	8f 92       	push	r8
    9184:	9f 92       	push	r9
    9186:	af 92       	push	r10
    9188:	bf 92       	push	r11
    918a:	ef 92       	push	r14
    918c:	ff 92       	push	r15
    918e:	0f 93       	push	r16
    9190:	1f 93       	push	r17
    9192:	cf 93       	push	r28
    9194:	df 93       	push	r29
    9196:	ec 01       	movw	r28, r24
    9198:	7c 01       	movw	r14, r24
    919a:	45 e3       	ldi	r20, 0x35	; 53
    919c:	e4 0e       	add	r14, r20
    919e:	f1 1c       	adc	r15, r1
    91a0:	29 a9       	ldd	r18, Y+49	; 0x31
    91a2:	3a a9       	ldd	r19, Y+50	; 0x32
    91a4:	4b a9       	ldd	r20, Y+51	; 0x33
    91a6:	5c a9       	ldd	r21, Y+52	; 0x34
    91a8:	01 e0       	ldi	r16, 0x01	; 1
    91aa:	10 e0       	ldi	r17, 0x00	; 0
    91ac:	b7 01       	movw	r22, r14
    91ae:	89 81       	ldd	r24, Y+1	; 0x01
    91b0:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    91b4:	89 2b       	or	r24, r25
    91b6:	41 f5       	brne	.+80     	; 0x9208 <sync_window.part.6+0x86>
    91b8:	1b 82       	std	Y+3, r1	; 0x03
    91ba:	09 a9       	ldd	r16, Y+49	; 0x31
    91bc:	1a a9       	ldd	r17, Y+50	; 0x32
    91be:	2b a9       	ldd	r18, Y+51	; 0x33
    91c0:	3c a9       	ldd	r19, Y+52	; 0x34
    91c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    91c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    91c6:	af 8d       	ldd	r26, Y+31	; 0x1f
    91c8:	b8 a1       	ldd	r27, Y+32	; 0x20
    91ca:	8d a0       	ldd	r8, Y+37	; 0x25
    91cc:	9e a0       	ldd	r9, Y+38	; 0x26
    91ce:	af a0       	ldd	r10, Y+39	; 0x27
    91d0:	b8 a4       	ldd	r11, Y+40	; 0x28
    91d2:	b9 01       	movw	r22, r18
    91d4:	a8 01       	movw	r20, r16
    91d6:	48 19       	sub	r20, r8
    91d8:	59 09       	sbc	r21, r9
    91da:	6a 09       	sbc	r22, r10
    91dc:	7b 09       	sbc	r23, r11
    91de:	48 17       	cp	r20, r24
    91e0:	59 07       	cpc	r21, r25
    91e2:	6a 07       	cpc	r22, r26
    91e4:	7b 07       	cpc	r23, r27
    91e6:	98 f4       	brcc	.+38     	; 0x920e <sync_window.part.6+0x8c>
    91e8:	6a 81       	ldd	r22, Y+2	; 0x02
    91ea:	62 30       	cpi	r22, 0x02	; 2
    91ec:	81 f4       	brne	.+32     	; 0x920e <sync_window.part.6+0x8c>
    91ee:	a9 01       	movw	r20, r18
    91f0:	98 01       	movw	r18, r16
    91f2:	28 0f       	add	r18, r24
    91f4:	39 1f       	adc	r19, r25
    91f6:	4a 1f       	adc	r20, r26
    91f8:	5b 1f       	adc	r21, r27
    91fa:	01 e0       	ldi	r16, 0x01	; 1
    91fc:	10 e0       	ldi	r17, 0x00	; 0
    91fe:	b7 01       	movw	r22, r14
    9200:	89 81       	ldd	r24, Y+1	; 0x01
    9202:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    9206:	03 c0       	rjmp	.+6      	; 0x920e <sync_window.part.6+0x8c>
    9208:	81 e0       	ldi	r24, 0x01	; 1
    920a:	90 e0       	ldi	r25, 0x00	; 0
    920c:	02 c0       	rjmp	.+4      	; 0x9212 <sync_window.part.6+0x90>
    920e:	80 e0       	ldi	r24, 0x00	; 0
    9210:	90 e0       	ldi	r25, 0x00	; 0
    9212:	df 91       	pop	r29
    9214:	cf 91       	pop	r28
    9216:	1f 91       	pop	r17
    9218:	0f 91       	pop	r16
    921a:	ff 90       	pop	r15
    921c:	ef 90       	pop	r14
    921e:	bf 90       	pop	r11
    9220:	af 90       	pop	r10
    9222:	9f 90       	pop	r9
    9224:	8f 90       	pop	r8
    9226:	08 95       	ret

00009228 <sync_fs>:
    9228:	ef 92       	push	r14
    922a:	ff 92       	push	r15
    922c:	0f 93       	push	r16
    922e:	1f 93       	push	r17
    9230:	cf 93       	push	r28
    9232:	df 93       	push	r29
    9234:	ec 01       	movw	r28, r24
    9236:	8b 81       	ldd	r24, Y+3	; 0x03
    9238:	81 11       	cpse	r24, r1
    923a:	05 c0       	rjmp	.+10     	; 0x9246 <sync_fs+0x1e>
    923c:	88 81       	ld	r24, Y
    923e:	83 30       	cpi	r24, 0x03	; 3
    9240:	09 f0       	breq	.+2      	; 0x9244 <sync_fs+0x1c>
    9242:	52 c0       	rjmp	.+164    	; 0x92e8 <sync_fs+0xc0>
    9244:	06 c0       	rjmp	.+12     	; 0x9252 <sync_fs+0x2a>
    9246:	ce 01       	movw	r24, r28
    9248:	9c df       	rcall	.-200    	; 0x9182 <sync_window.part.6>
    924a:	00 97       	sbiw	r24, 0x00	; 0
    924c:	09 f0       	breq	.+2      	; 0x9250 <sync_fs+0x28>
    924e:	59 c0       	rjmp	.+178    	; 0x9302 <sync_fs+0xda>
    9250:	f5 cf       	rjmp	.-22     	; 0x923c <sync_fs+0x14>
    9252:	8c 81       	ldd	r24, Y+4	; 0x04
    9254:	81 30       	cpi	r24, 0x01	; 1
    9256:	09 f0       	breq	.+2      	; 0x925a <sync_fs+0x32>
    9258:	47 c0       	rjmp	.+142    	; 0x92e8 <sync_fs+0xc0>
    925a:	40 e0       	ldi	r20, 0x00	; 0
    925c:	52 e0       	ldi	r21, 0x02	; 2
    925e:	60 e0       	ldi	r22, 0x00	; 0
    9260:	70 e0       	ldi	r23, 0x00	; 0
    9262:	7e 01       	movw	r14, r28
    9264:	85 e3       	ldi	r24, 0x35	; 53
    9266:	e8 0e       	add	r14, r24
    9268:	f1 1c       	adc	r15, r1
    926a:	c7 01       	movw	r24, r14
    926c:	37 dc       	rcall	.-1938   	; 0x8adc <mem_set>
    926e:	85 e5       	ldi	r24, 0x55	; 85
    9270:	fe 01       	movw	r30, r28
    9272:	ed 5c       	subi	r30, 0xCD	; 205
    9274:	fd 4f       	sbci	r31, 0xFD	; 253
    9276:	80 83       	st	Z, r24
    9278:	8a ea       	ldi	r24, 0xAA	; 170
    927a:	31 96       	adiw	r30, 0x01	; 1
    927c:	80 83       	st	Z, r24
    927e:	82 e5       	ldi	r24, 0x52	; 82
    9280:	8d ab       	std	Y+53, r24	; 0x35
    9282:	8e ab       	std	Y+54, r24	; 0x36
    9284:	81 e6       	ldi	r24, 0x61	; 97
    9286:	8f ab       	std	Y+55, r24	; 0x37
    9288:	91 e4       	ldi	r25, 0x41	; 65
    928a:	98 af       	std	Y+56, r25	; 0x38
    928c:	22 e7       	ldi	r18, 0x72	; 114
    928e:	7b 97       	sbiw	r30, 0x1b	; 27
    9290:	20 83       	st	Z, r18
    9292:	31 96       	adiw	r30, 0x01	; 1
    9294:	20 83       	st	Z, r18
    9296:	31 96       	adiw	r30, 0x01	; 1
    9298:	90 83       	st	Z, r25
    929a:	31 96       	adiw	r30, 0x01	; 1
    929c:	80 83       	st	Z, r24
    929e:	49 89       	ldd	r20, Y+17	; 0x11
    92a0:	5a 89       	ldd	r21, Y+18	; 0x12
    92a2:	6b 89       	ldd	r22, Y+19	; 0x13
    92a4:	7c 89       	ldd	r23, Y+20	; 0x14
    92a6:	ce 01       	movw	r24, r28
    92a8:	83 5e       	subi	r24, 0xE3	; 227
    92aa:	9d 4f       	sbci	r25, 0xFD	; 253
    92ac:	11 dc       	rcall	.-2014   	; 0x8ad0 <st_dword>
    92ae:	4d 85       	ldd	r20, Y+13	; 0x0d
    92b0:	5e 85       	ldd	r21, Y+14	; 0x0e
    92b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    92b4:	78 89       	ldd	r23, Y+16	; 0x10
    92b6:	ce 01       	movw	r24, r28
    92b8:	8f 5d       	subi	r24, 0xDF	; 223
    92ba:	9d 4f       	sbci	r25, 0xFD	; 253
    92bc:	09 dc       	rcall	.-2030   	; 0x8ad0 <st_dword>
    92be:	89 a1       	ldd	r24, Y+33	; 0x21
    92c0:	9a a1       	ldd	r25, Y+34	; 0x22
    92c2:	ab a1       	ldd	r26, Y+35	; 0x23
    92c4:	bc a1       	ldd	r27, Y+36	; 0x24
    92c6:	9c 01       	movw	r18, r24
    92c8:	ad 01       	movw	r20, r26
    92ca:	2f 5f       	subi	r18, 0xFF	; 255
    92cc:	3f 4f       	sbci	r19, 0xFF	; 255
    92ce:	4f 4f       	sbci	r20, 0xFF	; 255
    92d0:	5f 4f       	sbci	r21, 0xFF	; 255
    92d2:	29 ab       	std	Y+49, r18	; 0x31
    92d4:	3a ab       	std	Y+50, r19	; 0x32
    92d6:	4b ab       	std	Y+51, r20	; 0x33
    92d8:	5c ab       	std	Y+52, r21	; 0x34
    92da:	01 e0       	ldi	r16, 0x01	; 1
    92dc:	10 e0       	ldi	r17, 0x00	; 0
    92de:	b7 01       	movw	r22, r14
    92e0:	89 81       	ldd	r24, Y+1	; 0x01
    92e2:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    92e6:	1c 82       	std	Y+4, r1	; 0x04
    92e8:	40 e0       	ldi	r20, 0x00	; 0
    92ea:	50 e0       	ldi	r21, 0x00	; 0
    92ec:	60 e0       	ldi	r22, 0x00	; 0
    92ee:	89 81       	ldd	r24, Y+1	; 0x01
    92f0:	0e 94 97 68 	call	0xd12e	; 0xd12e <disk_ioctl>
    92f4:	31 e0       	ldi	r19, 0x01	; 1
    92f6:	20 e0       	ldi	r18, 0x00	; 0
    92f8:	89 2b       	or	r24, r25
    92fa:	09 f4       	brne	.+2      	; 0x92fe <sync_fs+0xd6>
    92fc:	30 e0       	ldi	r19, 0x00	; 0
    92fe:	83 2f       	mov	r24, r19
    9300:	92 2f       	mov	r25, r18
    9302:	cd b7       	in	r28, 0x3d	; 61
    9304:	de b7       	in	r29, 0x3e	; 62
    9306:	e6 e0       	ldi	r30, 0x06	; 6
    9308:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0000930c <dir_clear>:
    930c:	4f 92       	push	r4
    930e:	5f 92       	push	r5
    9310:	6f 92       	push	r6
    9312:	7f 92       	push	r7
    9314:	af 92       	push	r10
    9316:	bf 92       	push	r11
    9318:	cf 92       	push	r12
    931a:	df 92       	push	r13
    931c:	ef 92       	push	r14
    931e:	ff 92       	push	r15
    9320:	0f 93       	push	r16
    9322:	1f 93       	push	r17
    9324:	cf 93       	push	r28
    9326:	df 93       	push	r29
    9328:	ec 01       	movw	r28, r24
    932a:	6a 01       	movw	r12, r20
    932c:	7b 01       	movw	r14, r22
    932e:	8b 81       	ldd	r24, Y+3	; 0x03
    9330:	81 11       	cpse	r24, r1
    9332:	28 c0       	rjmp	.+80     	; 0x9384 <dir_clear+0x78>
    9334:	b7 01       	movw	r22, r14
    9336:	a6 01       	movw	r20, r12
    9338:	ce 01       	movw	r24, r28
    933a:	6e dc       	rcall	.-1828   	; 0x8c18 <clst2sect>
    933c:	2b 01       	movw	r4, r22
    933e:	3c 01       	movw	r6, r24
    9340:	69 ab       	std	Y+49, r22	; 0x31
    9342:	7a ab       	std	Y+50, r23	; 0x32
    9344:	8b ab       	std	Y+51, r24	; 0x33
    9346:	9c ab       	std	Y+52, r25	; 0x34
    9348:	5e 01       	movw	r10, r28
    934a:	25 e3       	ldi	r18, 0x35	; 53
    934c:	a2 0e       	add	r10, r18
    934e:	b1 1c       	adc	r11, r1
    9350:	40 e0       	ldi	r20, 0x00	; 0
    9352:	52 e0       	ldi	r21, 0x02	; 2
    9354:	60 e0       	ldi	r22, 0x00	; 0
    9356:	70 e0       	ldi	r23, 0x00	; 0
    9358:	c5 01       	movw	r24, r10
    935a:	c0 db       	rcall	.-2176   	; 0x8adc <mem_set>
    935c:	09 85       	ldd	r16, Y+9	; 0x09
    935e:	1a 85       	ldd	r17, Y+10	; 0x0a
    9360:	c8 01       	movw	r24, r16
    9362:	a0 e0       	ldi	r26, 0x00	; 0
    9364:	b0 e0       	ldi	r27, 0x00	; 0
    9366:	39 e0       	ldi	r19, 0x09	; 9
    9368:	88 0f       	add	r24, r24
    936a:	99 1f       	adc	r25, r25
    936c:	aa 1f       	adc	r26, r26
    936e:	bb 1f       	adc	r27, r27
    9370:	3a 95       	dec	r19
    9372:	d1 f7       	brne	.-12     	; 0x9368 <dir_clear+0x5c>
    9374:	81 15       	cp	r24, r1
    9376:	90 48       	sbci	r25, 0x80	; 128
    9378:	a1 05       	cpc	r26, r1
    937a:	b1 05       	cpc	r27, r1
    937c:	50 f0       	brcs	.+20     	; 0x9392 <dir_clear+0x86>
    937e:	00 e0       	ldi	r16, 0x00	; 0
    9380:	10 e8       	ldi	r17, 0x80	; 128
    9382:	14 c0       	rjmp	.+40     	; 0x93ac <dir_clear+0xa0>
    9384:	ce 01       	movw	r24, r28
    9386:	fd de       	rcall	.-518    	; 0x9182 <sync_window.part.6>
    9388:	89 2b       	or	r24, r25
    938a:	a1 f2       	breq	.-88     	; 0x9334 <dir_clear+0x28>
    938c:	81 e0       	ldi	r24, 0x01	; 1
    938e:	90 e0       	ldi	r25, 0x00	; 0
    9390:	56 c0       	rjmp	.+172    	; 0x943e <dir_clear+0x132>
    9392:	10 2f       	mov	r17, r16
    9394:	00 27       	eor	r16, r16
    9396:	11 0f       	add	r17, r17
    9398:	09 c0       	rjmp	.+18     	; 0x93ac <dir_clear+0xa0>
    939a:	c8 01       	movw	r24, r16
    939c:	0e 94 bb 67 	call	0xcf76	; 0xcf76 <ff_memalloc>
    93a0:	6c 01       	movw	r12, r24
    93a2:	00 97       	sbiw	r24, 0x00	; 0
    93a4:	09 f0       	breq	.+2      	; 0x93a8 <dir_clear+0x9c>
    93a6:	40 c0       	rjmp	.+128    	; 0x9428 <dir_clear+0x11c>
    93a8:	16 95       	lsr	r17
    93aa:	07 95       	ror	r16
    93ac:	01 30       	cpi	r16, 0x01	; 1
    93ae:	82 e0       	ldi	r24, 0x02	; 2
    93b0:	18 07       	cpc	r17, r24
    93b2:	98 f7       	brcc	.-26     	; 0x939a <dir_clear+0x8e>
    93b4:	e1 2c       	mov	r14, r1
    93b6:	f1 2c       	mov	r15, r1
    93b8:	11 c0       	rjmp	.+34     	; 0x93dc <dir_clear+0xd0>
    93ba:	01 e0       	ldi	r16, 0x01	; 1
    93bc:	10 e0       	ldi	r17, 0x00	; 0
    93be:	a3 01       	movw	r20, r6
    93c0:	92 01       	movw	r18, r4
    93c2:	2e 0d       	add	r18, r14
    93c4:	3f 1d       	adc	r19, r15
    93c6:	41 1d       	adc	r20, r1
    93c8:	51 1d       	adc	r21, r1
    93ca:	b5 01       	movw	r22, r10
    93cc:	89 81       	ldd	r24, Y+1	; 0x01
    93ce:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    93d2:	89 2b       	or	r24, r25
    93d4:	01 f5       	brne	.+64     	; 0x9416 <dir_clear+0x10a>
    93d6:	2f ef       	ldi	r18, 0xFF	; 255
    93d8:	e2 1a       	sub	r14, r18
    93da:	f2 0a       	sbc	r15, r18
    93dc:	89 85       	ldd	r24, Y+9	; 0x09
    93de:	9a 85       	ldd	r25, Y+10	; 0x0a
    93e0:	e8 16       	cp	r14, r24
    93e2:	f9 06       	cpc	r15, r25
    93e4:	50 f3       	brcs	.-44     	; 0x93ba <dir_clear+0xae>
    93e6:	17 c0       	rjmp	.+46     	; 0x9416 <dir_clear+0x10a>
    93e8:	85 01       	movw	r16, r10
    93ea:	a3 01       	movw	r20, r6
    93ec:	92 01       	movw	r18, r4
    93ee:	2e 0d       	add	r18, r14
    93f0:	3f 1d       	adc	r19, r15
    93f2:	41 1d       	adc	r20, r1
    93f4:	51 1d       	adc	r21, r1
    93f6:	b6 01       	movw	r22, r12
    93f8:	89 81       	ldd	r24, Y+1	; 0x01
    93fa:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    93fe:	89 2b       	or	r24, r25
    9400:	39 f4       	brne	.+14     	; 0x9410 <dir_clear+0x104>
    9402:	ea 0c       	add	r14, r10
    9404:	fb 1c       	adc	r15, r11
    9406:	89 85       	ldd	r24, Y+9	; 0x09
    9408:	9a 85       	ldd	r25, Y+10	; 0x0a
    940a:	e8 16       	cp	r14, r24
    940c:	f9 06       	cpc	r15, r25
    940e:	60 f3       	brcs	.-40     	; 0x93e8 <dir_clear+0xdc>
    9410:	c6 01       	movw	r24, r12
    9412:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <ff_memfree>
    9416:	81 e0       	ldi	r24, 0x01	; 1
    9418:	90 e0       	ldi	r25, 0x00	; 0
    941a:	29 85       	ldd	r18, Y+9	; 0x09
    941c:	3a 85       	ldd	r19, Y+10	; 0x0a
    941e:	2e 15       	cp	r18, r14
    9420:	3f 05       	cpc	r19, r15
    9422:	69 f4       	brne	.+26     	; 0x943e <dir_clear+0x132>
    9424:	80 e0       	ldi	r24, 0x00	; 0
    9426:	0b c0       	rjmp	.+22     	; 0x943e <dir_clear+0x132>
    9428:	a8 01       	movw	r20, r16
    942a:	60 e0       	ldi	r22, 0x00	; 0
    942c:	70 e0       	ldi	r23, 0x00	; 0
    942e:	56 db       	rcall	.-2388   	; 0x8adc <mem_set>
    9430:	58 01       	movw	r10, r16
    9432:	ab 2c       	mov	r10, r11
    9434:	bb 24       	eor	r11, r11
    9436:	a6 94       	lsr	r10
    9438:	e1 2c       	mov	r14, r1
    943a:	f1 2c       	mov	r15, r1
    943c:	e4 cf       	rjmp	.-56     	; 0x9406 <dir_clear+0xfa>
    943e:	df 91       	pop	r29
    9440:	cf 91       	pop	r28
    9442:	1f 91       	pop	r17
    9444:	0f 91       	pop	r16
    9446:	ff 90       	pop	r15
    9448:	ef 90       	pop	r14
    944a:	df 90       	pop	r13
    944c:	cf 90       	pop	r12
    944e:	bf 90       	pop	r11
    9450:	af 90       	pop	r10
    9452:	7f 90       	pop	r7
    9454:	6f 90       	pop	r6
    9456:	5f 90       	pop	r5
    9458:	4f 90       	pop	r4
    945a:	08 95       	ret

0000945c <move_window>:
    945c:	a0 e0       	ldi	r26, 0x00	; 0
    945e:	b0 e0       	ldi	r27, 0x00	; 0
    9460:	e4 e3       	ldi	r30, 0x34	; 52
    9462:	fa e4       	ldi	r31, 0x4A	; 74
    9464:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    9468:	ec 01       	movw	r28, r24
    946a:	6a 01       	movw	r12, r20
    946c:	7b 01       	movw	r14, r22
    946e:	89 a9       	ldd	r24, Y+49	; 0x31
    9470:	9a a9       	ldd	r25, Y+50	; 0x32
    9472:	ab a9       	ldd	r26, Y+51	; 0x33
    9474:	bc a9       	ldd	r27, Y+52	; 0x34
    9476:	84 17       	cp	r24, r20
    9478:	95 07       	cpc	r25, r21
    947a:	a6 07       	cpc	r26, r22
    947c:	b7 07       	cpc	r27, r23
    947e:	11 f1       	breq	.+68     	; 0x94c4 <move_window+0x68>
    9480:	8b 81       	ldd	r24, Y+3	; 0x03
    9482:	81 11       	cpse	r24, r1
    9484:	13 c0       	rjmp	.+38     	; 0x94ac <move_window+0x50>
    9486:	01 e0       	ldi	r16, 0x01	; 1
    9488:	10 e0       	ldi	r17, 0x00	; 0
    948a:	a7 01       	movw	r20, r14
    948c:	96 01       	movw	r18, r12
    948e:	be 01       	movw	r22, r28
    9490:	6b 5c       	subi	r22, 0xCB	; 203
    9492:	7f 4f       	sbci	r23, 0xFF	; 255
    9494:	89 81       	ldd	r24, Y+1	; 0x01
    9496:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <disk_read>
    949a:	89 2b       	or	r24, r25
    949c:	61 f0       	breq	.+24     	; 0x94b6 <move_window+0x5a>
    949e:	81 e0       	ldi	r24, 0x01	; 1
    94a0:	90 e0       	ldi	r25, 0x00	; 0
    94a2:	cc 24       	eor	r12, r12
    94a4:	ca 94       	dec	r12
    94a6:	dc 2c       	mov	r13, r12
    94a8:	76 01       	movw	r14, r12
    94aa:	07 c0       	rjmp	.+14     	; 0x94ba <move_window+0x5e>
    94ac:	ce 01       	movw	r24, r28
    94ae:	69 de       	rcall	.-814    	; 0x9182 <sync_window.part.6>
    94b0:	00 97       	sbiw	r24, 0x00	; 0
    94b2:	51 f4       	brne	.+20     	; 0x94c8 <move_window+0x6c>
    94b4:	e8 cf       	rjmp	.-48     	; 0x9486 <move_window+0x2a>
    94b6:	80 e0       	ldi	r24, 0x00	; 0
    94b8:	90 e0       	ldi	r25, 0x00	; 0
    94ba:	c9 aa       	std	Y+49, r12	; 0x31
    94bc:	da aa       	std	Y+50, r13	; 0x32
    94be:	eb aa       	std	Y+51, r14	; 0x33
    94c0:	fc aa       	std	Y+52, r15	; 0x34
    94c2:	02 c0       	rjmp	.+4      	; 0x94c8 <move_window+0x6c>
    94c4:	80 e0       	ldi	r24, 0x00	; 0
    94c6:	90 e0       	ldi	r25, 0x00	; 0
    94c8:	cd b7       	in	r28, 0x3d	; 61
    94ca:	de b7       	in	r29, 0x3e	; 62
    94cc:	e8 e0       	ldi	r30, 0x08	; 8
    94ce:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

000094d2 <check_fs>:
    94d2:	cf 93       	push	r28
    94d4:	df 93       	push	r29
    94d6:	ec 01       	movw	r28, r24
    94d8:	1b 82       	std	Y+3, r1	; 0x03
    94da:	8f ef       	ldi	r24, 0xFF	; 255
    94dc:	9f ef       	ldi	r25, 0xFF	; 255
    94de:	dc 01       	movw	r26, r24
    94e0:	89 ab       	std	Y+49, r24	; 0x31
    94e2:	9a ab       	std	Y+50, r25	; 0x32
    94e4:	ab ab       	std	Y+51, r26	; 0x33
    94e6:	bc ab       	std	Y+52, r27	; 0x34
    94e8:	ce 01       	movw	r24, r28
    94ea:	b8 df       	rcall	.-144    	; 0x945c <move_window>
    94ec:	89 2b       	or	r24, r25
    94ee:	19 f5       	brne	.+70     	; 0x9536 <check_fs+0x64>
    94f0:	fe 01       	movw	r30, r28
    94f2:	ed 5c       	subi	r30, 0xCD	; 205
    94f4:	fd 4f       	sbci	r31, 0xFD	; 253
    94f6:	80 81       	ld	r24, Z
    94f8:	91 81       	ldd	r25, Z+1	; 0x01
    94fa:	85 35       	cpi	r24, 0x55	; 85
    94fc:	9a 4a       	sbci	r25, 0xAA	; 170
    94fe:	f1 f4       	brne	.+60     	; 0x953c <check_fs+0x6a>
    9500:	8d a9       	ldd	r24, Y+53	; 0x35
    9502:	8b 3e       	cpi	r24, 0xEB	; 235
    9504:	19 f0       	breq	.+6      	; 0x950c <check_fs+0x3a>
    9506:	88 5e       	subi	r24, 0xE8	; 232
    9508:	82 30       	cpi	r24, 0x02	; 2
    950a:	f0 f4       	brcc	.+60     	; 0x9548 <check_fs+0x76>
    950c:	43 e0       	ldi	r20, 0x03	; 3
    950e:	50 e0       	ldi	r21, 0x00	; 0
    9510:	66 ec       	ldi	r22, 0xC6	; 198
    9512:	78 e0       	ldi	r23, 0x08	; 8
    9514:	ce 01       	movw	r24, r28
    9516:	85 59       	subi	r24, 0x95	; 149
    9518:	9f 4f       	sbci	r25, 0xFF	; 255
    951a:	e9 da       	rcall	.-2606   	; 0x8aee <mem_cmp>
    951c:	89 2b       	or	r24, r25
    951e:	89 f0       	breq	.+34     	; 0x9542 <check_fs+0x70>
    9520:	45 e0       	ldi	r20, 0x05	; 5
    9522:	50 e0       	ldi	r21, 0x00	; 0
    9524:	61 e2       	ldi	r22, 0x21	; 33
    9526:	74 e0       	ldi	r23, 0x04	; 4
    9528:	ce 01       	movw	r24, r28
    952a:	89 57       	subi	r24, 0x79	; 121
    952c:	9f 4f       	sbci	r25, 0xFF	; 255
    952e:	df da       	rcall	.-2626   	; 0x8aee <mem_cmp>
    9530:	89 2b       	or	r24, r25
    9532:	51 f4       	brne	.+20     	; 0x9548 <check_fs+0x76>
    9534:	06 c0       	rjmp	.+12     	; 0x9542 <check_fs+0x70>
    9536:	84 e0       	ldi	r24, 0x04	; 4
    9538:	90 e0       	ldi	r25, 0x00	; 0
    953a:	08 c0       	rjmp	.+16     	; 0x954c <check_fs+0x7a>
    953c:	83 e0       	ldi	r24, 0x03	; 3
    953e:	90 e0       	ldi	r25, 0x00	; 0
    9540:	05 c0       	rjmp	.+10     	; 0x954c <check_fs+0x7a>
    9542:	80 e0       	ldi	r24, 0x00	; 0
    9544:	90 e0       	ldi	r25, 0x00	; 0
    9546:	02 c0       	rjmp	.+4      	; 0x954c <check_fs+0x7a>
    9548:	82 e0       	ldi	r24, 0x02	; 2
    954a:	90 e0       	ldi	r25, 0x00	; 0
    954c:	df 91       	pop	r29
    954e:	cf 91       	pop	r28
    9550:	08 95       	ret

00009552 <mount_volume>:
    9552:	a0 e2       	ldi	r26, 0x20	; 32
    9554:	b0 e0       	ldi	r27, 0x00	; 0
    9556:	ef ea       	ldi	r30, 0xAF	; 175
    9558:	fa e4       	ldi	r31, 0x4A	; 74
    955a:	0c 94 5a e2 	jmp	0x1c4b4	; 0x1c4b4 <__prologue_saves__+0x4>
    955e:	5b 01       	movw	r10, r22
    9560:	f4 2e       	mov	r15, r20
    9562:	db 01       	movw	r26, r22
    9564:	1d 92       	st	X+, r1
    9566:	1c 92       	st	X, r1
    9568:	ca db       	rcall	.-2156   	; 0x8cfe <get_ldnumber>
    956a:	6c 01       	movw	r12, r24
    956c:	97 fd       	sbrc	r25, 7
    956e:	39 c2       	rjmp	.+1138   	; 0x99e2 <mount_volume+0x490>
    9570:	fc 01       	movw	r30, r24
    9572:	ee 0f       	add	r30, r30
    9574:	ff 1f       	adc	r31, r31
    9576:	e7 5e       	subi	r30, 0xE7	; 231
    9578:	f7 4e       	sbci	r31, 0xE7	; 231
    957a:	00 81       	ld	r16, Z
    957c:	11 81       	ldd	r17, Z+1	; 0x01
    957e:	01 15       	cp	r16, r1
    9580:	11 05       	cpc	r17, r1
    9582:	09 f4       	brne	.+2      	; 0x9586 <mount_volume+0x34>
    9584:	31 c2       	rjmp	.+1122   	; 0x99e8 <mount_volume+0x496>
    9586:	f5 01       	movw	r30, r10
    9588:	11 83       	std	Z+1, r17	; 0x01
    958a:	00 83       	st	Z, r16
    958c:	ff 2d       	mov	r31, r15
    958e:	fe 7f       	andi	r31, 0xFE	; 254
    9590:	ff 2e       	mov	r15, r31
    9592:	d8 01       	movw	r26, r16
    9594:	8c 91       	ld	r24, X
    9596:	88 23       	and	r24, r24
    9598:	71 f0       	breq	.+28     	; 0x95b6 <mount_volume+0x64>
    959a:	f8 01       	movw	r30, r16
    959c:	81 81       	ldd	r24, Z+1	; 0x01
    959e:	0e 94 6b 68 	call	0xd0d6	; 0xd0d6 <disk_status>
    95a2:	80 fd       	sbrc	r24, 0
    95a4:	08 c0       	rjmp	.+16     	; 0x95b6 <mount_volume+0x64>
    95a6:	ff 20       	and	r15, r15
    95a8:	09 f4       	brne	.+2      	; 0x95ac <mount_volume+0x5a>
    95aa:	21 c2       	rjmp	.+1090   	; 0x99ee <mount_volume+0x49c>
    95ac:	82 ff       	sbrs	r24, 2
    95ae:	1f c2       	rjmp	.+1086   	; 0x99ee <mount_volume+0x49c>
    95b0:	8a e0       	ldi	r24, 0x0A	; 10
    95b2:	90 e0       	ldi	r25, 0x00	; 0
    95b4:	24 c2       	rjmp	.+1096   	; 0x99fe <mount_volume+0x4ac>
    95b6:	d8 01       	movw	r26, r16
    95b8:	1c 92       	st	X, r1
    95ba:	f8 01       	movw	r30, r16
    95bc:	c1 82       	std	Z+1, r12	; 0x01
    95be:	8c 2d       	mov	r24, r12
    95c0:	0e 94 71 68 	call	0xd0e2	; 0xd0e2 <disk_initialize>
    95c4:	80 fd       	sbrc	r24, 0
    95c6:	16 c2       	rjmp	.+1068   	; 0x99f4 <mount_volume+0x4a2>
    95c8:	ff 20       	and	r15, r15
    95ca:	11 f0       	breq	.+4      	; 0x95d0 <mount_volume+0x7e>
    95cc:	82 fd       	sbrc	r24, 2
    95ce:	f0 cf       	rjmp	.-32     	; 0x95b0 <mount_volume+0x5e>
    95d0:	40 e0       	ldi	r20, 0x00	; 0
    95d2:	50 e0       	ldi	r21, 0x00	; 0
    95d4:	ba 01       	movw	r22, r20
    95d6:	c8 01       	movw	r24, r16
    95d8:	7c df       	rcall	.-264    	; 0x94d2 <check_fs>
    95da:	82 30       	cpi	r24, 0x02	; 2
    95dc:	91 05       	cpc	r25, r1
    95de:	b9 f5       	brne	.+110    	; 0x964e <mount_volume+0xfc>
    95e0:	68 01       	movw	r12, r16
    95e2:	f5 e0       	ldi	r31, 0x05	; 5
    95e4:	cf 1a       	sub	r12, r31
    95e6:	fe ef       	ldi	r31, 0xFE	; 254
    95e8:	df 0a       	sbc	r13, r31
    95ea:	9e 01       	movw	r18, r28
    95ec:	2f 5f       	subi	r18, 0xFF	; 255
    95ee:	3f 4f       	sbci	r19, 0xFF	; 255
    95f0:	79 01       	movw	r14, r18
    95f2:	48 01       	movw	r8, r16
    95f4:	35 ec       	ldi	r19, 0xC5	; 197
    95f6:	83 1a       	sub	r8, r19
    95f8:	3d ef       	ldi	r19, 0xFD	; 253
    95fa:	93 0a       	sbc	r9, r19
    95fc:	57 01       	movw	r10, r14
    95fe:	c6 01       	movw	r24, r12
    9600:	52 da       	rcall	.-2908   	; 0x8aa6 <ld_dword>
    9602:	d5 01       	movw	r26, r10
    9604:	6d 93       	st	X+, r22
    9606:	7d 93       	st	X+, r23
    9608:	8d 93       	st	X+, r24
    960a:	9d 93       	st	X+, r25
    960c:	5d 01       	movw	r10, r26
    960e:	b0 e1       	ldi	r27, 0x10	; 16
    9610:	cb 0e       	add	r12, r27
    9612:	d1 1c       	adc	r13, r1
    9614:	c8 14       	cp	r12, r8
    9616:	d9 04       	cpc	r13, r9
    9618:	91 f7       	brne	.-28     	; 0x95fe <mount_volume+0xac>
    961a:	6e 01       	movw	r12, r28
    961c:	e1 e1       	ldi	r30, 0x11	; 17
    961e:	ce 0e       	add	r12, r30
    9620:	d1 1c       	adc	r13, r1
    9622:	d7 01       	movw	r26, r14
    9624:	4d 91       	ld	r20, X+
    9626:	5d 91       	ld	r21, X+
    9628:	6d 91       	ld	r22, X+
    962a:	7d 91       	ld	r23, X+
    962c:	7d 01       	movw	r14, r26
    962e:	41 15       	cp	r20, r1
    9630:	51 05       	cpc	r21, r1
    9632:	61 05       	cpc	r22, r1
    9634:	71 05       	cpc	r23, r1
    9636:	31 f0       	breq	.+12     	; 0x9644 <mount_volume+0xf2>
    9638:	c8 01       	movw	r24, r16
    963a:	4b df       	rcall	.-362    	; 0x94d2 <check_fs>
    963c:	82 30       	cpi	r24, 0x02	; 2
    963e:	91 05       	cpc	r25, r1
    9640:	18 f4       	brcc	.+6      	; 0x9648 <mount_volume+0xf6>
    9642:	05 c0       	rjmp	.+10     	; 0x964e <mount_volume+0xfc>
    9644:	83 e0       	ldi	r24, 0x03	; 3
    9646:	90 e0       	ldi	r25, 0x00	; 0
    9648:	ce 14       	cp	r12, r14
    964a:	df 04       	cpc	r13, r15
    964c:	51 f7       	brne	.-44     	; 0x9622 <mount_volume+0xd0>
    964e:	84 30       	cpi	r24, 0x04	; 4
    9650:	91 05       	cpc	r25, r1
    9652:	09 f4       	brne	.+2      	; 0x9656 <mount_volume+0x104>
    9654:	d2 c1       	rjmp	.+932    	; 0x99fa <mount_volume+0x4a8>
    9656:	02 97       	sbiw	r24, 0x02	; 2
    9658:	18 f0       	brcs	.+6      	; 0x9660 <mount_volume+0x10e>
    965a:	8d e0       	ldi	r24, 0x0D	; 13
    965c:	90 e0       	ldi	r25, 0x00	; 0
    965e:	cf c1       	rjmp	.+926    	; 0x99fe <mount_volume+0x4ac>
    9660:	f8 01       	movw	r30, r16
    9662:	e0 5c       	subi	r30, 0xC0	; 192
    9664:	ff 4f       	sbci	r31, 0xFF	; 255
    9666:	80 81       	ld	r24, Z
    9668:	91 81       	ldd	r25, Z+1	; 0x01
    966a:	81 15       	cp	r24, r1
    966c:	92 40       	sbci	r25, 0x02	; 2
    966e:	a9 f7       	brne	.-22     	; 0x965a <mount_volume+0x108>
    9670:	3b 96       	adiw	r30, 0x0b	; 11
    9672:	40 80       	ld	r4, Z
    9674:	51 80       	ldd	r5, Z+1	; 0x01
    9676:	41 14       	cp	r4, r1
    9678:	51 04       	cpc	r5, r1
    967a:	19 f0       	breq	.+6      	; 0x9682 <mount_volume+0x130>
    967c:	61 2c       	mov	r6, r1
    967e:	71 2c       	mov	r7, r1
    9680:	06 c0       	rjmp	.+12     	; 0x968e <mount_volume+0x13c>
    9682:	c8 01       	movw	r24, r16
    9684:	87 5a       	subi	r24, 0xA7	; 167
    9686:	9f 4f       	sbci	r25, 0xFF	; 255
    9688:	0e da       	rcall	.-3044   	; 0x8aa6 <ld_dword>
    968a:	2b 01       	movw	r4, r22
    968c:	3c 01       	movw	r6, r24
    968e:	f8 01       	movw	r30, r16
    9690:	21 a9       	ldd	r18, Z+49	; 0x31
    9692:	32 a9       	ldd	r19, Z+50	; 0x32
    9694:	43 a9       	ldd	r20, Z+51	; 0x33
    9696:	54 a9       	ldd	r21, Z+52	; 0x34
    9698:	29 8b       	std	Y+17, r18	; 0x11
    969a:	3a 8b       	std	Y+18, r19	; 0x12
    969c:	4b 8b       	std	Y+19, r20	; 0x13
    969e:	5c 8b       	std	Y+20, r21	; 0x14
    96a0:	45 8e       	std	Z+29, r4	; 0x1d
    96a2:	56 8e       	std	Z+30, r5	; 0x1e
    96a4:	67 8e       	std	Z+31, r6	; 0x1f
    96a6:	70 a2       	std	Z+32, r7	; 0x20
    96a8:	eb 5b       	subi	r30, 0xBB	; 187
    96aa:	ff 4f       	sbci	r31, 0xFF	; 255
    96ac:	a0 80       	ld	r10, Z
    96ae:	f8 01       	movw	r30, r16
    96b0:	a2 82       	std	Z+2, r10	; 0x02
    96b2:	8f ef       	ldi	r24, 0xFF	; 255
    96b4:	8a 0d       	add	r24, r10
    96b6:	82 30       	cpi	r24, 0x02	; 2
    96b8:	80 f6       	brcc	.-96     	; 0x965a <mount_volume+0x108>
    96ba:	ee 5b       	subi	r30, 0xBE	; 190
    96bc:	ff 4f       	sbci	r31, 0xFF	; 255
    96be:	b0 80       	ld	r11, Z
    96c0:	8b 2d       	mov	r24, r11
    96c2:	90 e0       	ldi	r25, 0x00	; 0
    96c4:	f8 01       	movw	r30, r16
    96c6:	92 87       	std	Z+10, r25	; 0x0a
    96c8:	81 87       	std	Z+9, r24	; 0x09
    96ca:	00 97       	sbiw	r24, 0x00	; 0
    96cc:	31 f2       	breq	.-116    	; 0x965a <mount_volume+0x108>
    96ce:	9c 01       	movw	r18, r24
    96d0:	21 50       	subi	r18, 0x01	; 1
    96d2:	31 09       	sbc	r19, r1
    96d4:	82 23       	and	r24, r18
    96d6:	93 23       	and	r25, r19
    96d8:	89 2b       	or	r24, r25
    96da:	09 f0       	breq	.+2      	; 0x96de <mount_volume+0x18c>
    96dc:	be cf       	rjmp	.-132    	; 0x965a <mount_volume+0x108>
    96de:	ea 5b       	subi	r30, 0xBA	; 186
    96e0:	ff 4f       	sbci	r31, 0xFF	; 255
    96e2:	80 80       	ld	r8, Z
    96e4:	91 80       	ldd	r9, Z+1	; 0x01
    96e6:	f8 01       	movw	r30, r16
    96e8:	90 86       	std	Z+8, r9	; 0x08
    96ea:	87 82       	std	Z+7, r8	; 0x07
    96ec:	c4 01       	movw	r24, r8
    96ee:	8f 70       	andi	r24, 0x0F	; 15
    96f0:	99 27       	eor	r25, r25
    96f2:	89 2b       	or	r24, r25
    96f4:	09 f0       	breq	.+2      	; 0x96f8 <mount_volume+0x1a6>
    96f6:	b1 cf       	rjmp	.-158    	; 0x965a <mount_volume+0x108>
    96f8:	e8 5b       	subi	r30, 0xB8	; 184
    96fa:	ff 4f       	sbci	r31, 0xFF	; 255
    96fc:	80 81       	ld	r24, Z
    96fe:	91 81       	ldd	r25, Z+1	; 0x01
    9700:	6c 01       	movw	r12, r24
    9702:	e1 2c       	mov	r14, r1
    9704:	f1 2c       	mov	r15, r1
    9706:	89 2b       	or	r24, r25
    9708:	31 f4       	brne	.+12     	; 0x9716 <mount_volume+0x1c4>
    970a:	c8 01       	movw	r24, r16
    970c:	8b 5a       	subi	r24, 0xAB	; 171
    970e:	9f 4f       	sbci	r25, 0xFF	; 255
    9710:	ca d9       	rcall	.-3180   	; 0x8aa6 <ld_dword>
    9712:	6b 01       	movw	r12, r22
    9714:	7c 01       	movw	r14, r24
    9716:	f8 01       	movw	r30, r16
    9718:	ed 5b       	subi	r30, 0xBD	; 189
    971a:	ff 4f       	sbci	r31, 0xFF	; 255
    971c:	01 90       	ld	r0, Z+
    971e:	f0 81       	ld	r31, Z
    9720:	e0 2d       	mov	r30, r0
    9722:	30 97       	sbiw	r30, 0x00	; 0
    9724:	09 f4       	brne	.+2      	; 0x9728 <mount_volume+0x1d6>
    9726:	99 cf       	rjmp	.-206    	; 0x965a <mount_volume+0x108>
    9728:	aa 2d       	mov	r26, r10
    972a:	b0 e0       	ldi	r27, 0x00	; 0
    972c:	a3 01       	movw	r20, r6
    972e:	92 01       	movw	r18, r4
    9730:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    9734:	69 8f       	std	Y+25, r22	; 0x19
    9736:	7a 8f       	std	Y+26, r23	; 0x1a
    9738:	8b 8f       	std	Y+27, r24	; 0x1b
    973a:	9c 8f       	std	Y+28, r25	; 0x1c
    973c:	9f 01       	movw	r18, r30
    973e:	40 e0       	ldi	r20, 0x00	; 0
    9740:	50 e0       	ldi	r21, 0x00	; 0
    9742:	2d 8f       	std	Y+29, r18	; 0x1d
    9744:	3e 8f       	std	Y+30, r19	; 0x1e
    9746:	4f 8f       	std	Y+31, r20	; 0x1f
    9748:	58 a3       	std	Y+32, r21	; 0x20
    974a:	c4 01       	movw	r24, r8
    974c:	f4 e0       	ldi	r31, 0x04	; 4
    974e:	96 95       	lsr	r25
    9750:	87 95       	ror	r24
    9752:	fa 95       	dec	r31
    9754:	e1 f7       	brne	.-8      	; 0x974e <mount_volume+0x1fc>
    9756:	28 0f       	add	r18, r24
    9758:	39 1f       	adc	r19, r25
    975a:	41 1d       	adc	r20, r1
    975c:	51 1d       	adc	r21, r1
    975e:	da 01       	movw	r26, r20
    9760:	c9 01       	movw	r24, r18
    9762:	29 8d       	ldd	r18, Y+25	; 0x19
    9764:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9766:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9768:	5c 8d       	ldd	r21, Y+28	; 0x1c
    976a:	28 0f       	add	r18, r24
    976c:	39 1f       	adc	r19, r25
    976e:	4a 1f       	adc	r20, r26
    9770:	5b 1f       	adc	r21, r27
    9772:	2d 8b       	std	Y+21, r18	; 0x15
    9774:	3e 8b       	std	Y+22, r19	; 0x16
    9776:	4f 8b       	std	Y+23, r20	; 0x17
    9778:	58 8f       	std	Y+24, r21	; 0x18
    977a:	c2 16       	cp	r12, r18
    977c:	d3 06       	cpc	r13, r19
    977e:	e4 06       	cpc	r14, r20
    9780:	f5 06       	cpc	r15, r21
    9782:	08 f4       	brcc	.+2      	; 0x9786 <mount_volume+0x234>
    9784:	6a cf       	rjmp	.-300    	; 0x965a <mount_volume+0x108>
    9786:	c7 01       	movw	r24, r14
    9788:	b6 01       	movw	r22, r12
    978a:	62 1b       	sub	r22, r18
    978c:	73 0b       	sbc	r23, r19
    978e:	84 0b       	sbc	r24, r20
    9790:	95 0b       	sbc	r25, r21
    9792:	2b 2d       	mov	r18, r11
    9794:	30 e0       	ldi	r19, 0x00	; 0
    9796:	40 e0       	ldi	r20, 0x00	; 0
    9798:	50 e0       	ldi	r21, 0x00	; 0
    979a:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    979e:	da 01       	movw	r26, r20
    97a0:	c9 01       	movw	r24, r18
    97a2:	01 97       	sbiw	r24, 0x01	; 1
    97a4:	a1 09       	sbc	r26, r1
    97a6:	b1 09       	sbc	r27, r1
    97a8:	85 3f       	cpi	r24, 0xF5	; 245
    97aa:	9f 4f       	sbci	r25, 0xFF	; 255
    97ac:	af 4f       	sbci	r26, 0xFF	; 255
    97ae:	bf 40       	sbci	r27, 0x0F	; 15
    97b0:	08 f0       	brcs	.+2      	; 0x97b4 <mount_volume+0x262>
    97b2:	53 cf       	rjmp	.-346    	; 0x965a <mount_volume+0x108>
    97b4:	26 3f       	cpi	r18, 0xF6	; 246
    97b6:	8f ef       	ldi	r24, 0xFF	; 255
    97b8:	38 07       	cpc	r19, r24
    97ba:	41 05       	cpc	r20, r1
    97bc:	51 05       	cpc	r21, r1
    97be:	50 f4       	brcc	.+20     	; 0x97d4 <mount_volume+0x282>
    97c0:	26 3f       	cpi	r18, 0xF6	; 246
    97c2:	9f e0       	ldi	r25, 0x0F	; 15
    97c4:	39 07       	cpc	r19, r25
    97c6:	41 05       	cpc	r20, r1
    97c8:	51 05       	cpc	r21, r1
    97ca:	40 f4       	brcc	.+16     	; 0x97dc <mount_volume+0x28a>
    97cc:	aa 24       	eor	r10, r10
    97ce:	a3 94       	inc	r10
    97d0:	b1 2c       	mov	r11, r1
    97d2:	07 c0       	rjmp	.+14     	; 0x97e2 <mount_volume+0x290>
    97d4:	73 e0       	ldi	r23, 0x03	; 3
    97d6:	a7 2e       	mov	r10, r23
    97d8:	b1 2c       	mov	r11, r1
    97da:	03 c0       	rjmp	.+6      	; 0x97e2 <mount_volume+0x290>
    97dc:	62 e0       	ldi	r22, 0x02	; 2
    97de:	a6 2e       	mov	r10, r22
    97e0:	b1 2c       	mov	r11, r1
    97e2:	69 01       	movw	r12, r18
    97e4:	7a 01       	movw	r14, r20
    97e6:	a2 e0       	ldi	r26, 0x02	; 2
    97e8:	ca 0e       	add	r12, r26
    97ea:	d1 1c       	adc	r13, r1
    97ec:	e1 1c       	adc	r14, r1
    97ee:	f1 1c       	adc	r15, r1
    97f0:	f8 01       	movw	r30, r16
    97f2:	c1 8e       	std	Z+25, r12	; 0x19
    97f4:	d2 8e       	std	Z+26, r13	; 0x1a
    97f6:	e3 8e       	std	Z+27, r14	; 0x1b
    97f8:	f4 8e       	std	Z+28, r15	; 0x1c
    97fa:	29 89       	ldd	r18, Y+17	; 0x11
    97fc:	3a 89       	ldd	r19, Y+18	; 0x12
    97fe:	4b 89       	ldd	r20, Y+19	; 0x13
    9800:	5c 89       	ldd	r21, Y+20	; 0x14
    9802:	21 a3       	std	Z+33, r18	; 0x21
    9804:	32 a3       	std	Z+34, r19	; 0x22
    9806:	43 a3       	std	Z+35, r20	; 0x23
    9808:	54 a3       	std	Z+36, r21	; 0x24
    980a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    980c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    980e:	af 8d       	ldd	r26, Y+31	; 0x1f
    9810:	b8 a1       	ldd	r27, Y+32	; 0x20
    9812:	28 0f       	add	r18, r24
    9814:	39 1f       	adc	r19, r25
    9816:	4a 1f       	adc	r20, r26
    9818:	5b 1f       	adc	r21, r27
    981a:	2d 8f       	std	Y+29, r18	; 0x1d
    981c:	3e 8f       	std	Y+30, r19	; 0x1e
    981e:	4f 8f       	std	Y+31, r20	; 0x1f
    9820:	58 a3       	std	Y+32, r21	; 0x20
    9822:	25 a3       	std	Z+37, r18	; 0x25
    9824:	36 a3       	std	Z+38, r19	; 0x26
    9826:	47 a3       	std	Z+39, r20	; 0x27
    9828:	50 a7       	std	Z+40, r21	; 0x28
    982a:	49 89       	ldd	r20, Y+17	; 0x11
    982c:	5a 89       	ldd	r21, Y+18	; 0x12
    982e:	6b 89       	ldd	r22, Y+19	; 0x13
    9830:	7c 89       	ldd	r23, Y+20	; 0x14
    9832:	8d 89       	ldd	r24, Y+21	; 0x15
    9834:	9e 89       	ldd	r25, Y+22	; 0x16
    9836:	af 89       	ldd	r26, Y+23	; 0x17
    9838:	b8 8d       	ldd	r27, Y+24	; 0x18
    983a:	48 0f       	add	r20, r24
    983c:	59 1f       	adc	r21, r25
    983e:	6a 1f       	adc	r22, r26
    9840:	7b 1f       	adc	r23, r27
    9842:	45 a7       	std	Z+45, r20	; 0x2d
    9844:	56 a7       	std	Z+46, r21	; 0x2e
    9846:	67 a7       	std	Z+47, r22	; 0x2f
    9848:	70 ab       	std	Z+48, r23	; 0x30
    984a:	f3 e0       	ldi	r31, 0x03	; 3
    984c:	af 16       	cp	r10, r31
    984e:	b1 04       	cpc	r11, r1
    9850:	e9 f4       	brne	.+58     	; 0x988c <mount_volume+0x33a>
    9852:	f8 01       	movw	r30, r16
    9854:	e1 5a       	subi	r30, 0xA1	; 161
    9856:	ff 4f       	sbci	r31, 0xFF	; 255
    9858:	80 81       	ld	r24, Z
    985a:	91 81       	ldd	r25, Z+1	; 0x01
    985c:	89 2b       	or	r24, r25
    985e:	09 f0       	breq	.+2      	; 0x9862 <mount_volume+0x310>
    9860:	fc ce       	rjmp	.-520    	; 0x965a <mount_volume+0x108>
    9862:	81 14       	cp	r8, r1
    9864:	91 04       	cpc	r9, r1
    9866:	09 f0       	breq	.+2      	; 0x986a <mount_volume+0x318>
    9868:	f8 ce       	rjmp	.-528    	; 0x965a <mount_volume+0x108>
    986a:	c8 01       	movw	r24, r16
    986c:	8f 59       	subi	r24, 0x9F	; 159
    986e:	9f 4f       	sbci	r25, 0xFF	; 255
    9870:	1a d9       	rcall	.-3532   	; 0x8aa6 <ld_dword>
    9872:	f8 01       	movw	r30, r16
    9874:	61 a7       	std	Z+41, r22	; 0x29
    9876:	72 a7       	std	Z+42, r23	; 0x2a
    9878:	83 a7       	std	Z+43, r24	; 0x2b
    987a:	94 a7       	std	Z+44, r25	; 0x2c
    987c:	42 e0       	ldi	r20, 0x02	; 2
    987e:	cc 0c       	add	r12, r12
    9880:	dd 1c       	adc	r13, r13
    9882:	ee 1c       	adc	r14, r14
    9884:	ff 1c       	adc	r15, r15
    9886:	4a 95       	dec	r20
    9888:	d1 f7       	brne	.-12     	; 0x987e <mount_volume+0x32c>
    988a:	33 c0       	rjmp	.+102    	; 0x98f2 <mount_volume+0x3a0>
    988c:	81 14       	cp	r8, r1
    988e:	91 04       	cpc	r9, r1
    9890:	09 f4       	brne	.+2      	; 0x9894 <mount_volume+0x342>
    9892:	e3 ce       	rjmp	.-570    	; 0x965a <mount_volume+0x108>
    9894:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9896:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9898:	af 8d       	ldd	r26, Y+31	; 0x1f
    989a:	b8 a1       	ldd	r27, Y+32	; 0x20
    989c:	29 8d       	ldd	r18, Y+25	; 0x19
    989e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    98a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    98a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    98a4:	82 0f       	add	r24, r18
    98a6:	93 1f       	adc	r25, r19
    98a8:	a4 1f       	adc	r26, r20
    98aa:	b5 1f       	adc	r27, r21
    98ac:	f8 01       	movw	r30, r16
    98ae:	81 a7       	std	Z+41, r24	; 0x29
    98b0:	92 a7       	std	Z+42, r25	; 0x2a
    98b2:	a3 a7       	std	Z+43, r26	; 0x2b
    98b4:	b4 a7       	std	Z+44, r27	; 0x2c
    98b6:	f2 e0       	ldi	r31, 0x02	; 2
    98b8:	af 16       	cp	r10, r31
    98ba:	b1 04       	cpc	r11, r1
    98bc:	29 f4       	brne	.+10     	; 0x98c8 <mount_volume+0x376>
    98be:	cc 0c       	add	r12, r12
    98c0:	dd 1c       	adc	r13, r13
    98c2:	ee 1c       	adc	r14, r14
    98c4:	ff 1c       	adc	r15, r15
    98c6:	15 c0       	rjmp	.+42     	; 0x98f2 <mount_volume+0x3a0>
    98c8:	a3 e0       	ldi	r26, 0x03	; 3
    98ca:	b0 e0       	ldi	r27, 0x00	; 0
    98cc:	a7 01       	movw	r20, r14
    98ce:	96 01       	movw	r18, r12
    98d0:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    98d4:	dc 01       	movw	r26, r24
    98d6:	cb 01       	movw	r24, r22
    98d8:	b6 95       	lsr	r27
    98da:	a7 95       	ror	r26
    98dc:	97 95       	ror	r25
    98de:	87 95       	ror	r24
    98e0:	21 e0       	ldi	r18, 0x01	; 1
    98e2:	c2 22       	and	r12, r18
    98e4:	dd 24       	eor	r13, r13
    98e6:	ee 24       	eor	r14, r14
    98e8:	ff 24       	eor	r15, r15
    98ea:	c8 0e       	add	r12, r24
    98ec:	d9 1e       	adc	r13, r25
    98ee:	ea 1e       	adc	r14, r26
    98f0:	fb 1e       	adc	r15, r27
    98f2:	3f ef       	ldi	r19, 0xFF	; 255
    98f4:	c3 0e       	add	r12, r19
    98f6:	31 e0       	ldi	r19, 0x01	; 1
    98f8:	d3 1e       	adc	r13, r19
    98fa:	e1 1c       	adc	r14, r1
    98fc:	f1 1c       	adc	r15, r1
    98fe:	89 e0       	ldi	r24, 0x09	; 9
    9900:	f6 94       	lsr	r15
    9902:	e7 94       	ror	r14
    9904:	d7 94       	ror	r13
    9906:	c7 94       	ror	r12
    9908:	8a 95       	dec	r24
    990a:	d1 f7       	brne	.-12     	; 0x9900 <mount_volume+0x3ae>
    990c:	4c 14       	cp	r4, r12
    990e:	5d 04       	cpc	r5, r13
    9910:	6e 04       	cpc	r6, r14
    9912:	7f 04       	cpc	r7, r15
    9914:	08 f4       	brcc	.+2      	; 0x9918 <mount_volume+0x3c6>
    9916:	a1 ce       	rjmp	.-702    	; 0x965a <mount_volume+0x108>
    9918:	8f ef       	ldi	r24, 0xFF	; 255
    991a:	9f ef       	ldi	r25, 0xFF	; 255
    991c:	dc 01       	movw	r26, r24
    991e:	f8 01       	movw	r30, r16
    9920:	81 8b       	std	Z+17, r24	; 0x11
    9922:	92 8b       	std	Z+18, r25	; 0x12
    9924:	a3 8b       	std	Z+19, r26	; 0x13
    9926:	b4 8b       	std	Z+20, r27	; 0x14
    9928:	85 87       	std	Z+13, r24	; 0x0d
    992a:	96 87       	std	Z+14, r25	; 0x0e
    992c:	a7 87       	std	Z+15, r26	; 0x0f
    992e:	b0 8b       	std	Z+16, r27	; 0x10
    9930:	80 e8       	ldi	r24, 0x80	; 128
    9932:	84 83       	std	Z+4, r24	; 0x04
    9934:	f3 e0       	ldi	r31, 0x03	; 3
    9936:	af 16       	cp	r10, r31
    9938:	b1 04       	cpc	r11, r1
    993a:	09 f0       	breq	.+2      	; 0x993e <mount_volume+0x3ec>
    993c:	3f c0       	rjmp	.+126    	; 0x99bc <mount_volume+0x46a>
    993e:	f8 01       	movw	r30, r16
    9940:	eb 59       	subi	r30, 0x9B	; 155
    9942:	ff 4f       	sbci	r31, 0xFF	; 255
    9944:	80 81       	ld	r24, Z
    9946:	91 81       	ldd	r25, Z+1	; 0x01
    9948:	01 97       	sbiw	r24, 0x01	; 1
    994a:	c1 f5       	brne	.+112    	; 0x99bc <mount_volume+0x46a>
    994c:	49 89       	ldd	r20, Y+17	; 0x11
    994e:	5a 89       	ldd	r21, Y+18	; 0x12
    9950:	6b 89       	ldd	r22, Y+19	; 0x13
    9952:	7c 89       	ldd	r23, Y+20	; 0x14
    9954:	4f 5f       	subi	r20, 0xFF	; 255
    9956:	5f 4f       	sbci	r21, 0xFF	; 255
    9958:	6f 4f       	sbci	r22, 0xFF	; 255
    995a:	7f 4f       	sbci	r23, 0xFF	; 255
    995c:	c8 01       	movw	r24, r16
    995e:	7e dd       	rcall	.-1284   	; 0x945c <move_window>
    9960:	89 2b       	or	r24, r25
    9962:	61 f5       	brne	.+88     	; 0x99bc <mount_volume+0x46a>
    9964:	f8 01       	movw	r30, r16
    9966:	14 82       	std	Z+4, r1	; 0x04
    9968:	ed 5c       	subi	r30, 0xCD	; 205
    996a:	fd 4f       	sbci	r31, 0xFD	; 253
    996c:	80 81       	ld	r24, Z
    996e:	91 81       	ldd	r25, Z+1	; 0x01
    9970:	85 35       	cpi	r24, 0x55	; 85
    9972:	9a 4a       	sbci	r25, 0xAA	; 170
    9974:	19 f5       	brne	.+70     	; 0x99bc <mount_volume+0x46a>
    9976:	c8 01       	movw	r24, r16
    9978:	c5 96       	adiw	r24, 0x35	; 53
    997a:	95 d8       	rcall	.-3798   	; 0x8aa6 <ld_dword>
    997c:	62 35       	cpi	r22, 0x52	; 82
    997e:	72 45       	sbci	r23, 0x52	; 82
    9980:	81 46       	sbci	r24, 0x61	; 97
    9982:	91 44       	sbci	r25, 0x41	; 65
    9984:	d9 f4       	brne	.+54     	; 0x99bc <mount_volume+0x46a>
    9986:	c8 01       	movw	r24, r16
    9988:	87 5e       	subi	r24, 0xE7	; 231
    998a:	9d 4f       	sbci	r25, 0xFD	; 253
    998c:	8c d8       	rcall	.-3816   	; 0x8aa6 <ld_dword>
    998e:	62 37       	cpi	r22, 0x72	; 114
    9990:	72 47       	sbci	r23, 0x72	; 114
    9992:	81 44       	sbci	r24, 0x41	; 65
    9994:	91 46       	sbci	r25, 0x61	; 97
    9996:	91 f4       	brne	.+36     	; 0x99bc <mount_volume+0x46a>
    9998:	c8 01       	movw	r24, r16
    999a:	83 5e       	subi	r24, 0xE3	; 227
    999c:	9d 4f       	sbci	r25, 0xFD	; 253
    999e:	83 d8       	rcall	.-3834   	; 0x8aa6 <ld_dword>
    99a0:	f8 01       	movw	r30, r16
    99a2:	61 8b       	std	Z+17, r22	; 0x11
    99a4:	72 8b       	std	Z+18, r23	; 0x12
    99a6:	83 8b       	std	Z+19, r24	; 0x13
    99a8:	94 8b       	std	Z+20, r25	; 0x14
    99aa:	c8 01       	movw	r24, r16
    99ac:	8f 5d       	subi	r24, 0xDF	; 223
    99ae:	9d 4f       	sbci	r25, 0xFD	; 253
    99b0:	7a d8       	rcall	.-3852   	; 0x8aa6 <ld_dword>
    99b2:	f8 01       	movw	r30, r16
    99b4:	65 87       	std	Z+13, r22	; 0x0d
    99b6:	76 87       	std	Z+14, r23	; 0x0e
    99b8:	87 87       	std	Z+15, r24	; 0x0f
    99ba:	90 8b       	std	Z+16, r25	; 0x10
    99bc:	d8 01       	movw	r26, r16
    99be:	ac 92       	st	X, r10
    99c0:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <Fsid>
    99c4:	90 91 18 18 	lds	r25, 0x1818	; 0x801818 <Fsid+0x1>
    99c8:	01 96       	adiw	r24, 0x01	; 1
    99ca:	90 93 18 18 	sts	0x1818, r25	; 0x801818 <Fsid+0x1>
    99ce:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <Fsid>
    99d2:	f8 01       	movw	r30, r16
    99d4:	96 83       	std	Z+6, r25	; 0x06
    99d6:	85 83       	std	Z+5, r24	; 0x05
    99d8:	15 8a       	std	Z+21, r1	; 0x15
    99da:	16 8a       	std	Z+22, r1	; 0x16
    99dc:	17 8a       	std	Z+23, r1	; 0x17
    99de:	10 8e       	std	Z+24, r1	; 0x18
    99e0:	06 c0       	rjmp	.+12     	; 0x99ee <mount_volume+0x49c>
    99e2:	8b e0       	ldi	r24, 0x0B	; 11
    99e4:	90 e0       	ldi	r25, 0x00	; 0
    99e6:	0b c0       	rjmp	.+22     	; 0x99fe <mount_volume+0x4ac>
    99e8:	8c e0       	ldi	r24, 0x0C	; 12
    99ea:	90 e0       	ldi	r25, 0x00	; 0
    99ec:	08 c0       	rjmp	.+16     	; 0x99fe <mount_volume+0x4ac>
    99ee:	80 e0       	ldi	r24, 0x00	; 0
    99f0:	90 e0       	ldi	r25, 0x00	; 0
    99f2:	05 c0       	rjmp	.+10     	; 0x99fe <mount_volume+0x4ac>
    99f4:	83 e0       	ldi	r24, 0x03	; 3
    99f6:	90 e0       	ldi	r25, 0x00	; 0
    99f8:	02 c0       	rjmp	.+4      	; 0x99fe <mount_volume+0x4ac>
    99fa:	81 e0       	ldi	r24, 0x01	; 1
    99fc:	90 e0       	ldi	r25, 0x00	; 0
    99fe:	a0 96       	adiw	r28, 0x20	; 32
    9a00:	e0 e1       	ldi	r30, 0x10	; 16
    9a02:	0c 94 76 e2 	jmp	0x1c4ec	; 0x1c4ec <__epilogue_restores__+0x4>

00009a06 <put_fat>:
    9a06:	a6 e0       	ldi	r26, 0x06	; 6
    9a08:	b0 e0       	ldi	r27, 0x00	; 0
    9a0a:	e9 e0       	ldi	r30, 0x09	; 9
    9a0c:	fd e4       	ldi	r31, 0x4D	; 77
    9a0e:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    9a12:	42 30       	cpi	r20, 0x02	; 2
    9a14:	51 05       	cpc	r21, r1
    9a16:	61 05       	cpc	r22, r1
    9a18:	71 05       	cpc	r23, r1
    9a1a:	08 f4       	brcc	.+2      	; 0x9a1e <put_fat+0x18>
    9a1c:	e7 c0       	rjmp	.+462    	; 0x9bec <put_fat+0x1e6>
    9a1e:	fc 01       	movw	r30, r24
    9a20:	c1 8c       	ldd	r12, Z+25	; 0x19
    9a22:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9a24:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9a26:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9a28:	4c 15       	cp	r20, r12
    9a2a:	5d 05       	cpc	r21, r13
    9a2c:	6e 05       	cpc	r22, r14
    9a2e:	7f 05       	cpc	r23, r15
    9a30:	08 f0       	brcs	.+2      	; 0x9a34 <put_fat+0x2e>
    9a32:	dc c0       	rjmp	.+440    	; 0x9bec <put_fat+0x1e6>
    9a34:	28 01       	movw	r4, r16
    9a36:	39 01       	movw	r6, r18
    9a38:	6a 01       	movw	r12, r20
    9a3a:	7b 01       	movw	r14, r22
    9a3c:	9e 83       	std	Y+6, r25	; 0x06
    9a3e:	8d 83       	std	Y+5, r24	; 0x05
    9a40:	80 81       	ld	r24, Z
    9a42:	82 30       	cpi	r24, 0x02	; 2
    9a44:	09 f4       	brne	.+2      	; 0x9a48 <put_fat+0x42>
    9a46:	73 c0       	rjmp	.+230    	; 0x9b2e <put_fat+0x128>
    9a48:	83 30       	cpi	r24, 0x03	; 3
    9a4a:	09 f4       	brne	.+2      	; 0x9a4e <put_fat+0x48>
    9a4c:	92 c0       	rjmp	.+292    	; 0x9b72 <put_fat+0x16c>
    9a4e:	81 30       	cpi	r24, 0x01	; 1
    9a50:	09 f0       	breq	.+2      	; 0x9a54 <put_fat+0x4e>
    9a52:	cc c0       	rjmp	.+408    	; 0x9bec <put_fat+0x1e6>
    9a54:	4a 01       	movw	r8, r20
    9a56:	96 94       	lsr	r9
    9a58:	87 94       	ror	r8
    9a5a:	84 0e       	add	r8, r20
    9a5c:	95 1e       	adc	r9, r21
    9a5e:	c4 01       	movw	r24, r8
    9a60:	89 2f       	mov	r24, r25
    9a62:	99 27       	eor	r25, r25
    9a64:	86 95       	lsr	r24
    9a66:	45 a1       	ldd	r20, Z+37	; 0x25
    9a68:	56 a1       	ldd	r21, Z+38	; 0x26
    9a6a:	67 a1       	ldd	r22, Z+39	; 0x27
    9a6c:	70 a5       	ldd	r23, Z+40	; 0x28
    9a6e:	48 0f       	add	r20, r24
    9a70:	59 1f       	adc	r21, r25
    9a72:	61 1d       	adc	r22, r1
    9a74:	71 1d       	adc	r23, r1
    9a76:	cf 01       	movw	r24, r30
    9a78:	f1 dc       	rcall	.-1566   	; 0x945c <move_window>
    9a7a:	5c 01       	movw	r10, r24
    9a7c:	89 2b       	or	r24, r25
    9a7e:	09 f0       	breq	.+2      	; 0x9a82 <put_fat+0x7c>
    9a80:	b8 c0       	rjmp	.+368    	; 0x9bf2 <put_fat+0x1ec>
    9a82:	2d 80       	ldd	r2, Y+5	; 0x05
    9a84:	3e 80       	ldd	r3, Y+6	; 0x06
    9a86:	f5 e3       	ldi	r31, 0x35	; 53
    9a88:	2f 0e       	add	r2, r31
    9a8a:	31 1c       	adc	r3, r1
    9a8c:	84 01       	movw	r16, r8
    9a8e:	0f 5f       	subi	r16, 0xFF	; 255
    9a90:	1f 4f       	sbci	r17, 0xFF	; 255
    9a92:	21 e0       	ldi	r18, 0x01	; 1
    9a94:	92 22       	and	r9, r18
    9a96:	f1 01       	movw	r30, r2
    9a98:	e8 0d       	add	r30, r8
    9a9a:	f9 1d       	adc	r31, r9
    9a9c:	d7 01       	movw	r26, r14
    9a9e:	c6 01       	movw	r24, r12
    9aa0:	81 70       	andi	r24, 0x01	; 1
    9aa2:	99 27       	eor	r25, r25
    9aa4:	aa 27       	eor	r26, r26
    9aa6:	bb 27       	eor	r27, r27
    9aa8:	89 83       	std	Y+1, r24	; 0x01
    9aaa:	9a 83       	std	Y+2, r25	; 0x02
    9aac:	ab 83       	std	Y+3, r26	; 0x03
    9aae:	bc 83       	std	Y+4, r27	; 0x04
    9ab0:	c0 fe       	sbrs	r12, 0
    9ab2:	09 c0       	rjmp	.+18     	; 0x9ac6 <put_fat+0xc0>
    9ab4:	80 81       	ld	r24, Z
    9ab6:	28 2f       	mov	r18, r24
    9ab8:	2f 70       	andi	r18, 0x0F	; 15
    9aba:	a0 e1       	ldi	r26, 0x10	; 16
    9abc:	4a 9e       	mul	r4, r26
    9abe:	c0 01       	movw	r24, r0
    9ac0:	11 24       	eor	r1, r1
    9ac2:	82 2b       	or	r24, r18
    9ac4:	01 c0       	rjmp	.+2      	; 0x9ac8 <put_fat+0xc2>
    9ac6:	84 2d       	mov	r24, r4
    9ac8:	80 83       	st	Z, r24
    9aca:	81 e0       	ldi	r24, 0x01	; 1
    9acc:	ed 81       	ldd	r30, Y+5	; 0x05
    9ace:	fe 81       	ldd	r31, Y+6	; 0x06
    9ad0:	83 83       	std	Z+3, r24	; 0x03
    9ad2:	45 a1       	ldd	r20, Z+37	; 0x25
    9ad4:	56 a1       	ldd	r21, Z+38	; 0x26
    9ad6:	67 a1       	ldd	r22, Z+39	; 0x27
    9ad8:	70 a5       	ldd	r23, Z+40	; 0x28
    9ada:	c8 01       	movw	r24, r16
    9adc:	89 2f       	mov	r24, r25
    9ade:	99 27       	eor	r25, r25
    9ae0:	86 95       	lsr	r24
    9ae2:	48 0f       	add	r20, r24
    9ae4:	59 1f       	adc	r21, r25
    9ae6:	61 1d       	adc	r22, r1
    9ae8:	71 1d       	adc	r23, r1
    9aea:	cf 01       	movw	r24, r30
    9aec:	b7 dc       	rcall	.-1682   	; 0x945c <move_window>
    9aee:	5c 01       	movw	r10, r24
    9af0:	89 2b       	or	r24, r25
    9af2:	09 f0       	breq	.+2      	; 0x9af6 <put_fat+0xf0>
    9af4:	7e c0       	rjmp	.+252    	; 0x9bf2 <put_fat+0x1ec>
    9af6:	11 70       	andi	r17, 0x01	; 1
    9af8:	f1 01       	movw	r30, r2
    9afa:	e0 0f       	add	r30, r16
    9afc:	f1 1f       	adc	r31, r17
    9afe:	89 81       	ldd	r24, Y+1	; 0x01
    9b00:	9a 81       	ldd	r25, Y+2	; 0x02
    9b02:	ab 81       	ldd	r26, Y+3	; 0x03
    9b04:	bc 81       	ldd	r27, Y+4	; 0x04
    9b06:	89 2b       	or	r24, r25
    9b08:	8a 2b       	or	r24, r26
    9b0a:	8b 2b       	or	r24, r27
    9b0c:	41 f0       	breq	.+16     	; 0x9b1e <put_fat+0x118>
    9b0e:	54 e0       	ldi	r21, 0x04	; 4
    9b10:	76 94       	lsr	r7
    9b12:	67 94       	ror	r6
    9b14:	57 94       	ror	r5
    9b16:	47 94       	ror	r4
    9b18:	5a 95       	dec	r21
    9b1a:	d1 f7       	brne	.-12     	; 0x9b10 <put_fat+0x10a>
    9b1c:	06 c0       	rjmp	.+12     	; 0x9b2a <put_fat+0x124>
    9b1e:	00 81       	ld	r16, Z
    9b20:	00 7f       	andi	r16, 0xF0	; 240
    9b22:	85 2d       	mov	r24, r5
    9b24:	8f 70       	andi	r24, 0x0F	; 15
    9b26:	40 2e       	mov	r4, r16
    9b28:	48 2a       	or	r4, r24
    9b2a:	40 82       	st	Z, r4
    9b2c:	5a c0       	rjmp	.+180    	; 0x9be2 <put_fat+0x1dc>
    9b2e:	77 27       	eor	r23, r23
    9b30:	6f 2d       	mov	r22, r15
    9b32:	5e 2d       	mov	r21, r14
    9b34:	4d 2d       	mov	r20, r13
    9b36:	ed 81       	ldd	r30, Y+5	; 0x05
    9b38:	fe 81       	ldd	r31, Y+6	; 0x06
    9b3a:	85 a1       	ldd	r24, Z+37	; 0x25
    9b3c:	96 a1       	ldd	r25, Z+38	; 0x26
    9b3e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9b40:	b0 a5       	ldd	r27, Z+40	; 0x28
    9b42:	48 0f       	add	r20, r24
    9b44:	59 1f       	adc	r21, r25
    9b46:	6a 1f       	adc	r22, r26
    9b48:	7b 1f       	adc	r23, r27
    9b4a:	cf 01       	movw	r24, r30
    9b4c:	87 dc       	rcall	.-1778   	; 0x945c <move_window>
    9b4e:	5c 01       	movw	r10, r24
    9b50:	89 2b       	or	r24, r25
    9b52:	09 f0       	breq	.+2      	; 0x9b56 <put_fat+0x150>
    9b54:	4e c0       	rjmp	.+156    	; 0x9bf2 <put_fat+0x1ec>
    9b56:	ed 81       	ldd	r30, Y+5	; 0x05
    9b58:	fe 81       	ldd	r31, Y+6	; 0x06
    9b5a:	f5 96       	adiw	r30, 0x35	; 53
    9b5c:	cc 0c       	add	r12, r12
    9b5e:	dd 1c       	adc	r13, r13
    9b60:	e8 94       	clt
    9b62:	c0 f8       	bld	r12, 0
    9b64:	21 e0       	ldi	r18, 0x01	; 1
    9b66:	d2 22       	and	r13, r18
    9b68:	ec 0d       	add	r30, r12
    9b6a:	fd 1d       	adc	r31, r13
    9b6c:	40 82       	st	Z, r4
    9b6e:	51 82       	std	Z+1, r5	; 0x01
    9b70:	38 c0       	rjmp	.+112    	; 0x9be2 <put_fat+0x1dc>
    9b72:	ed 81       	ldd	r30, Y+5	; 0x05
    9b74:	fe 81       	ldd	r31, Y+6	; 0x06
    9b76:	85 a1       	ldd	r24, Z+37	; 0x25
    9b78:	96 a1       	ldd	r25, Z+38	; 0x26
    9b7a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9b7c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9b7e:	27 e0       	ldi	r18, 0x07	; 7
    9b80:	76 95       	lsr	r23
    9b82:	67 95       	ror	r22
    9b84:	57 95       	ror	r21
    9b86:	47 95       	ror	r20
    9b88:	2a 95       	dec	r18
    9b8a:	d1 f7       	brne	.-12     	; 0x9b80 <put_fat+0x17a>
    9b8c:	48 0f       	add	r20, r24
    9b8e:	59 1f       	adc	r21, r25
    9b90:	6a 1f       	adc	r22, r26
    9b92:	7b 1f       	adc	r23, r27
    9b94:	cf 01       	movw	r24, r30
    9b96:	62 dc       	rcall	.-1852   	; 0x945c <move_window>
    9b98:	5c 01       	movw	r10, r24
    9b9a:	89 2b       	or	r24, r25
    9b9c:	51 f5       	brne	.+84     	; 0x9bf2 <put_fat+0x1ec>
    9b9e:	4d 81       	ldd	r20, Y+5	; 0x05
    9ba0:	5e 81       	ldd	r21, Y+6	; 0x06
    9ba2:	4b 5c       	subi	r20, 0xCB	; 203
    9ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ba6:	cc 0c       	add	r12, r12
    9ba8:	dd 1c       	adc	r13, r13
    9baa:	cc 0c       	add	r12, r12
    9bac:	dd 1c       	adc	r13, r13
    9bae:	fc ef       	ldi	r31, 0xFC	; 252
    9bb0:	cf 22       	and	r12, r31
    9bb2:	f1 e0       	ldi	r31, 0x01	; 1
    9bb4:	df 22       	and	r13, r31
    9bb6:	c4 0e       	add	r12, r20
    9bb8:	d5 1e       	adc	r13, r21
    9bba:	c6 01       	movw	r24, r12
    9bbc:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <ld_dword>
    9bc0:	2f e0       	ldi	r18, 0x0F	; 15
    9bc2:	72 22       	and	r7, r18
    9bc4:	dc 01       	movw	r26, r24
    9bc6:	cb 01       	movw	r24, r22
    9bc8:	88 27       	eor	r24, r24
    9bca:	99 27       	eor	r25, r25
    9bcc:	aa 27       	eor	r26, r26
    9bce:	b0 7f       	andi	r27, 0xF0	; 240
    9bd0:	b3 01       	movw	r22, r6
    9bd2:	a2 01       	movw	r20, r4
    9bd4:	48 2b       	or	r20, r24
    9bd6:	59 2b       	or	r21, r25
    9bd8:	6a 2b       	or	r22, r26
    9bda:	7b 2b       	or	r23, r27
    9bdc:	c6 01       	movw	r24, r12
    9bde:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <st_dword>
    9be2:	81 e0       	ldi	r24, 0x01	; 1
    9be4:	ed 81       	ldd	r30, Y+5	; 0x05
    9be6:	fe 81       	ldd	r31, Y+6	; 0x06
    9be8:	83 83       	std	Z+3, r24	; 0x03
    9bea:	03 c0       	rjmp	.+6      	; 0x9bf2 <put_fat+0x1ec>
    9bec:	82 e0       	ldi	r24, 0x02	; 2
    9bee:	a8 2e       	mov	r10, r24
    9bf0:	b1 2c       	mov	r11, r1
    9bf2:	c5 01       	movw	r24, r10
    9bf4:	26 96       	adiw	r28, 0x06	; 6
    9bf6:	e2 e1       	ldi	r30, 0x12	; 18
    9bf8:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00009bfc <get_fat.isra.10>:
    9bfc:	a0 e0       	ldi	r26, 0x00	; 0
    9bfe:	b0 e0       	ldi	r27, 0x00	; 0
    9c00:	e4 e0       	ldi	r30, 0x04	; 4
    9c02:	fe e4       	ldi	r31, 0x4E	; 78
    9c04:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
    9c08:	42 30       	cpi	r20, 0x02	; 2
    9c0a:	51 05       	cpc	r21, r1
    9c0c:	61 05       	cpc	r22, r1
    9c0e:	71 05       	cpc	r23, r1
    9c10:	08 f4       	brcc	.+2      	; 0x9c14 <get_fat.isra.10+0x18>
    9c12:	9f c0       	rjmp	.+318    	; 0x9d52 <get_fat.isra.10+0x156>
    9c14:	fc 01       	movw	r30, r24
    9c16:	01 8d       	ldd	r16, Z+25	; 0x19
    9c18:	12 8d       	ldd	r17, Z+26	; 0x1a
    9c1a:	23 8d       	ldd	r18, Z+27	; 0x1b
    9c1c:	34 8d       	ldd	r19, Z+28	; 0x1c
    9c1e:	40 17       	cp	r20, r16
    9c20:	51 07       	cpc	r21, r17
    9c22:	62 07       	cpc	r22, r18
    9c24:	73 07       	cpc	r23, r19
    9c26:	08 f0       	brcs	.+2      	; 0x9c2a <get_fat.isra.10+0x2e>
    9c28:	94 c0       	rjmp	.+296    	; 0x9d52 <get_fat.isra.10+0x156>
    9c2a:	6a 01       	movw	r12, r20
    9c2c:	7b 01       	movw	r14, r22
    9c2e:	8c 01       	movw	r16, r24
    9c30:	80 81       	ld	r24, Z
    9c32:	82 30       	cpi	r24, 0x02	; 2
    9c34:	09 f4       	brne	.+2      	; 0x9c38 <get_fat.isra.10+0x3c>
    9c36:	4b c0       	rjmp	.+150    	; 0x9cce <get_fat.isra.10+0xd2>
    9c38:	83 30       	cpi	r24, 0x03	; 3
    9c3a:	09 f4       	brne	.+2      	; 0x9c3e <get_fat.isra.10+0x42>
    9c3c:	67 c0       	rjmp	.+206    	; 0x9d0c <get_fat.isra.10+0x110>
    9c3e:	81 30       	cpi	r24, 0x01	; 1
    9c40:	09 f0       	breq	.+2      	; 0x9c44 <get_fat.isra.10+0x48>
    9c42:	87 c0       	rjmp	.+270    	; 0x9d52 <get_fat.isra.10+0x156>
    9c44:	ea 01       	movw	r28, r20
    9c46:	d6 95       	lsr	r29
    9c48:	c7 95       	ror	r28
    9c4a:	cc 0d       	add	r28, r12
    9c4c:	dd 1d       	adc	r29, r13
    9c4e:	ce 01       	movw	r24, r28
    9c50:	89 2f       	mov	r24, r25
    9c52:	99 27       	eor	r25, r25
    9c54:	86 95       	lsr	r24
    9c56:	45 a1       	ldd	r20, Z+37	; 0x25
    9c58:	56 a1       	ldd	r21, Z+38	; 0x26
    9c5a:	67 a1       	ldd	r22, Z+39	; 0x27
    9c5c:	70 a5       	ldd	r23, Z+40	; 0x28
    9c5e:	48 0f       	add	r20, r24
    9c60:	59 1f       	adc	r21, r25
    9c62:	61 1d       	adc	r22, r1
    9c64:	71 1d       	adc	r23, r1
    9c66:	cf 01       	movw	r24, r30
    9c68:	f9 db       	rcall	.-2062   	; 0x945c <move_window>
    9c6a:	89 2b       	or	r24, r25
    9c6c:	21 f0       	breq	.+8      	; 0x9c76 <get_fat.isra.10+0x7a>
    9c6e:	6f ef       	ldi	r22, 0xFF	; 255
    9c70:	7f ef       	ldi	r23, 0xFF	; 255
    9c72:	cb 01       	movw	r24, r22
    9c74:	72 c0       	rjmp	.+228    	; 0x9d5a <get_fat.isra.10+0x15e>
    9c76:	5e 01       	movw	r10, r28
    9c78:	ff ef       	ldi	r31, 0xFF	; 255
    9c7a:	af 1a       	sub	r10, r31
    9c7c:	bf 0a       	sbc	r11, r31
    9c7e:	d1 70       	andi	r29, 0x01	; 1
    9c80:	c0 0f       	add	r28, r16
    9c82:	d1 1f       	adc	r29, r17
    9c84:	cd a9       	ldd	r28, Y+53	; 0x35
    9c86:	c5 01       	movw	r24, r10
    9c88:	89 2f       	mov	r24, r25
    9c8a:	99 27       	eor	r25, r25
    9c8c:	86 95       	lsr	r24
    9c8e:	f8 01       	movw	r30, r16
    9c90:	45 a1       	ldd	r20, Z+37	; 0x25
    9c92:	56 a1       	ldd	r21, Z+38	; 0x26
    9c94:	67 a1       	ldd	r22, Z+39	; 0x27
    9c96:	70 a5       	ldd	r23, Z+40	; 0x28
    9c98:	48 0f       	add	r20, r24
    9c9a:	59 1f       	adc	r21, r25
    9c9c:	61 1d       	adc	r22, r1
    9c9e:	71 1d       	adc	r23, r1
    9ca0:	c8 01       	movw	r24, r16
    9ca2:	dc db       	rcall	.-2120   	; 0x945c <move_window>
    9ca4:	89 2b       	or	r24, r25
    9ca6:	19 f7       	brne	.-58     	; 0x9c6e <get_fat.isra.10+0x72>
    9ca8:	f1 e0       	ldi	r31, 0x01	; 1
    9caa:	bf 22       	and	r11, r31
    9cac:	f8 01       	movw	r30, r16
    9cae:	ea 0d       	add	r30, r10
    9cb0:	fb 1d       	adc	r31, r11
    9cb2:	85 a9       	ldd	r24, Z+53	; 0x35
    9cb4:	6c 2f       	mov	r22, r28
    9cb6:	70 e0       	ldi	r23, 0x00	; 0
    9cb8:	78 2b       	or	r23, r24
    9cba:	c0 fe       	sbrs	r12, 0
    9cbc:	06 c0       	rjmp	.+12     	; 0x9cca <get_fat.isra.10+0xce>
    9cbe:	54 e0       	ldi	r21, 0x04	; 4
    9cc0:	76 95       	lsr	r23
    9cc2:	67 95       	ror	r22
    9cc4:	5a 95       	dec	r21
    9cc6:	e1 f7       	brne	.-8      	; 0x9cc0 <get_fat.isra.10+0xc4>
    9cc8:	1e c0       	rjmp	.+60     	; 0x9d06 <get_fat.isra.10+0x10a>
    9cca:	7f 70       	andi	r23, 0x0F	; 15
    9ccc:	1c c0       	rjmp	.+56     	; 0x9d06 <get_fat.isra.10+0x10a>
    9cce:	77 27       	eor	r23, r23
    9cd0:	6f 2d       	mov	r22, r15
    9cd2:	5e 2d       	mov	r21, r14
    9cd4:	4d 2d       	mov	r20, r13
    9cd6:	85 a1       	ldd	r24, Z+37	; 0x25
    9cd8:	96 a1       	ldd	r25, Z+38	; 0x26
    9cda:	a7 a1       	ldd	r26, Z+39	; 0x27
    9cdc:	b0 a5       	ldd	r27, Z+40	; 0x28
    9cde:	48 0f       	add	r20, r24
    9ce0:	59 1f       	adc	r21, r25
    9ce2:	6a 1f       	adc	r22, r26
    9ce4:	7b 1f       	adc	r23, r27
    9ce6:	cf 01       	movw	r24, r30
    9ce8:	b9 db       	rcall	.-2190   	; 0x945c <move_window>
    9cea:	89 2b       	or	r24, r25
    9cec:	09 f0       	breq	.+2      	; 0x9cf0 <get_fat.isra.10+0xf4>
    9cee:	bf cf       	rjmp	.-130    	; 0x9c6e <get_fat.isra.10+0x72>
    9cf0:	cc 0c       	add	r12, r12
    9cf2:	dd 1c       	adc	r13, r13
    9cf4:	e8 94       	clt
    9cf6:	c0 f8       	bld	r12, 0
    9cf8:	f1 e0       	ldi	r31, 0x01	; 1
    9cfa:	df 22       	and	r13, r31
    9cfc:	f8 01       	movw	r30, r16
    9cfe:	ec 0d       	add	r30, r12
    9d00:	fd 1d       	adc	r31, r13
    9d02:	65 a9       	ldd	r22, Z+53	; 0x35
    9d04:	76 a9       	ldd	r23, Z+54	; 0x36
    9d06:	80 e0       	ldi	r24, 0x00	; 0
    9d08:	90 e0       	ldi	r25, 0x00	; 0
    9d0a:	27 c0       	rjmp	.+78     	; 0x9d5a <get_fat.isra.10+0x15e>
    9d0c:	85 a1       	ldd	r24, Z+37	; 0x25
    9d0e:	96 a1       	ldd	r25, Z+38	; 0x26
    9d10:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d12:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d14:	27 e0       	ldi	r18, 0x07	; 7
    9d16:	76 95       	lsr	r23
    9d18:	67 95       	ror	r22
    9d1a:	57 95       	ror	r21
    9d1c:	47 95       	ror	r20
    9d1e:	2a 95       	dec	r18
    9d20:	d1 f7       	brne	.-12     	; 0x9d16 <get_fat.isra.10+0x11a>
    9d22:	48 0f       	add	r20, r24
    9d24:	59 1f       	adc	r21, r25
    9d26:	6a 1f       	adc	r22, r26
    9d28:	7b 1f       	adc	r23, r27
    9d2a:	cf 01       	movw	r24, r30
    9d2c:	97 db       	rcall	.-2258   	; 0x945c <move_window>
    9d2e:	89 2b       	or	r24, r25
    9d30:	09 f0       	breq	.+2      	; 0x9d34 <get_fat.isra.10+0x138>
    9d32:	9d cf       	rjmp	.-198    	; 0x9c6e <get_fat.isra.10+0x72>
    9d34:	0b 5c       	subi	r16, 0xCB	; 203
    9d36:	1f 4f       	sbci	r17, 0xFF	; 255
    9d38:	cc 0c       	add	r12, r12
    9d3a:	dd 1c       	adc	r13, r13
    9d3c:	cc 0c       	add	r12, r12
    9d3e:	dd 1c       	adc	r13, r13
    9d40:	c6 01       	movw	r24, r12
    9d42:	8c 7f       	andi	r24, 0xFC	; 252
    9d44:	91 70       	andi	r25, 0x01	; 1
    9d46:	80 0f       	add	r24, r16
    9d48:	91 1f       	adc	r25, r17
    9d4a:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <ld_dword>
    9d4e:	9f 70       	andi	r25, 0x0F	; 15
    9d50:	04 c0       	rjmp	.+8      	; 0x9d5a <get_fat.isra.10+0x15e>
    9d52:	61 e0       	ldi	r22, 0x01	; 1
    9d54:	70 e0       	ldi	r23, 0x00	; 0
    9d56:	80 e0       	ldi	r24, 0x00	; 0
    9d58:	90 e0       	ldi	r25, 0x00	; 0
    9d5a:	cd b7       	in	r28, 0x3d	; 61
    9d5c:	de b7       	in	r29, 0x3e	; 62
    9d5e:	ea e0       	ldi	r30, 0x0A	; 10
    9d60:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

00009d64 <dir_sdi>:
    9d64:	a0 e0       	ldi	r26, 0x00	; 0
    9d66:	b0 e0       	ldi	r27, 0x00	; 0
    9d68:	e8 eb       	ldi	r30, 0xB8	; 184
    9d6a:	fe e4       	ldi	r31, 0x4E	; 78
    9d6c:	0c 94 5a e2 	jmp	0x1c4b4	; 0x1c4b4 <__prologue_saves__+0x4>
    9d70:	ec 01       	movw	r28, r24
    9d72:	6a 01       	movw	r12, r20
    9d74:	7b 01       	movw	r14, r22
    9d76:	41 15       	cp	r20, r1
    9d78:	51 05       	cpc	r21, r1
    9d7a:	80 e2       	ldi	r24, 0x20	; 32
    9d7c:	68 07       	cpc	r22, r24
    9d7e:	71 05       	cpc	r23, r1
    9d80:	18 f0       	brcs	.+6      	; 0x9d88 <dir_sdi+0x24>
    9d82:	82 e0       	ldi	r24, 0x02	; 2
    9d84:	90 e0       	ldi	r25, 0x00	; 0
    9d86:	aa c0       	rjmp	.+340    	; 0x9edc <dir_sdi+0x178>
    9d88:	db 01       	movw	r26, r22
    9d8a:	ca 01       	movw	r24, r20
    9d8c:	8f 71       	andi	r24, 0x1F	; 31
    9d8e:	99 27       	eor	r25, r25
    9d90:	aa 27       	eor	r26, r26
    9d92:	bb 27       	eor	r27, r27
    9d94:	89 2b       	or	r24, r25
    9d96:	8a 2b       	or	r24, r26
    9d98:	8b 2b       	or	r24, r27
    9d9a:	99 f7       	brne	.-26     	; 0x9d82 <dir_sdi+0x1e>
    9d9c:	08 81       	ld	r16, Y
    9d9e:	19 81       	ldd	r17, Y+1	; 0x01
    9da0:	4e 87       	std	Y+14, r20	; 0x0e
    9da2:	5f 87       	std	Y+15, r21	; 0x0f
    9da4:	68 8b       	std	Y+16, r22	; 0x10
    9da6:	79 8b       	std	Y+17, r23	; 0x11
    9da8:	8e 80       	ldd	r8, Y+6	; 0x06
    9daa:	9f 80       	ldd	r9, Y+7	; 0x07
    9dac:	a8 84       	ldd	r10, Y+8	; 0x08
    9dae:	b9 84       	ldd	r11, Y+9	; 0x09
    9db0:	81 14       	cp	r8, r1
    9db2:	91 04       	cpc	r9, r1
    9db4:	a1 04       	cpc	r10, r1
    9db6:	b1 04       	cpc	r11, r1
    9db8:	51 f5       	brne	.+84     	; 0x9e0e <dir_sdi+0xaa>
    9dba:	f8 01       	movw	r30, r16
    9dbc:	80 81       	ld	r24, Z
    9dbe:	83 30       	cpi	r24, 0x03	; 3
    9dc0:	40 f0       	brcs	.+16     	; 0x9dd2 <dir_sdi+0x6e>
    9dc2:	81 a5       	ldd	r24, Z+41	; 0x29
    9dc4:	92 a5       	ldd	r25, Z+42	; 0x2a
    9dc6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9dc8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9dca:	00 97       	sbiw	r24, 0x00	; 0
    9dcc:	a1 05       	cpc	r26, r1
    9dce:	b1 05       	cpc	r27, r1
    9dd0:	e1 f4       	brne	.+56     	; 0x9e0a <dir_sdi+0xa6>
    9dd2:	f8 01       	movw	r30, r16
    9dd4:	87 81       	ldd	r24, Z+7	; 0x07
    9dd6:	90 85       	ldd	r25, Z+8	; 0x08
    9dd8:	a0 e0       	ldi	r26, 0x00	; 0
    9dda:	b0 e0       	ldi	r27, 0x00	; 0
    9ddc:	b7 01       	movw	r22, r14
    9dde:	a6 01       	movw	r20, r12
    9de0:	25 e0       	ldi	r18, 0x05	; 5
    9de2:	76 95       	lsr	r23
    9de4:	67 95       	ror	r22
    9de6:	57 95       	ror	r21
    9de8:	47 95       	ror	r20
    9dea:	2a 95       	dec	r18
    9dec:	d1 f7       	brne	.-12     	; 0x9de2 <dir_sdi+0x7e>
    9dee:	48 17       	cp	r20, r24
    9df0:	59 07       	cpc	r21, r25
    9df2:	6a 07       	cpc	r22, r26
    9df4:	7b 07       	cpc	r23, r27
    9df6:	28 f6       	brcc	.-118    	; 0x9d82 <dir_sdi+0x1e>
    9df8:	81 a5       	ldd	r24, Z+41	; 0x29
    9dfa:	92 a5       	ldd	r25, Z+42	; 0x2a
    9dfc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9dfe:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9e00:	8e 8b       	std	Y+22, r24	; 0x16
    9e02:	9f 8b       	std	Y+23, r25	; 0x17
    9e04:	a8 8f       	std	Y+24, r26	; 0x18
    9e06:	b9 8f       	std	Y+25, r27	; 0x19
    9e08:	3e c0       	rjmp	.+124    	; 0x9e86 <dir_sdi+0x122>
    9e0a:	4c 01       	movw	r8, r24
    9e0c:	5d 01       	movw	r10, r26
    9e0e:	f8 01       	movw	r30, r16
    9e10:	41 84       	ldd	r4, Z+9	; 0x09
    9e12:	52 84       	ldd	r5, Z+10	; 0x0a
    9e14:	61 2c       	mov	r6, r1
    9e16:	71 2c       	mov	r7, r1
    9e18:	39 e0       	ldi	r19, 0x09	; 9
    9e1a:	44 0c       	add	r4, r4
    9e1c:	55 1c       	adc	r5, r5
    9e1e:	66 1c       	adc	r6, r6
    9e20:	77 1c       	adc	r7, r7
    9e22:	3a 95       	dec	r19
    9e24:	d1 f7       	brne	.-12     	; 0x9e1a <dir_sdi+0xb6>
    9e26:	b5 01       	movw	r22, r10
    9e28:	a4 01       	movw	r20, r8
    9e2a:	c4 14       	cp	r12, r4
    9e2c:	d5 04       	cpc	r13, r5
    9e2e:	e6 04       	cpc	r14, r6
    9e30:	f7 04       	cpc	r15, r7
    9e32:	10 f1       	brcs	.+68     	; 0x9e78 <dir_sdi+0x114>
    9e34:	88 81       	ld	r24, Y
    9e36:	99 81       	ldd	r25, Y+1	; 0x01
    9e38:	e1 de       	rcall	.-574    	; 0x9bfc <get_fat.isra.10>
    9e3a:	4b 01       	movw	r8, r22
    9e3c:	5c 01       	movw	r10, r24
    9e3e:	6f 3f       	cpi	r22, 0xFF	; 255
    9e40:	7f 4f       	sbci	r23, 0xFF	; 255
    9e42:	8f 4f       	sbci	r24, 0xFF	; 255
    9e44:	9f 4f       	sbci	r25, 0xFF	; 255
    9e46:	09 f4       	brne	.+2      	; 0x9e4a <dir_sdi+0xe6>
    9e48:	47 c0       	rjmp	.+142    	; 0x9ed8 <dir_sdi+0x174>
    9e4a:	82 e0       	ldi	r24, 0x02	; 2
    9e4c:	88 16       	cp	r8, r24
    9e4e:	91 04       	cpc	r9, r1
    9e50:	a1 04       	cpc	r10, r1
    9e52:	b1 04       	cpc	r11, r1
    9e54:	08 f4       	brcc	.+2      	; 0x9e58 <dir_sdi+0xf4>
    9e56:	95 cf       	rjmp	.-214    	; 0x9d82 <dir_sdi+0x1e>
    9e58:	f8 01       	movw	r30, r16
    9e5a:	81 8d       	ldd	r24, Z+25	; 0x19
    9e5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    9e5e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9e60:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9e62:	88 16       	cp	r8, r24
    9e64:	99 06       	cpc	r9, r25
    9e66:	aa 06       	cpc	r10, r26
    9e68:	bb 06       	cpc	r11, r27
    9e6a:	08 f0       	brcs	.+2      	; 0x9e6e <dir_sdi+0x10a>
    9e6c:	8a cf       	rjmp	.-236    	; 0x9d82 <dir_sdi+0x1e>
    9e6e:	c4 18       	sub	r12, r4
    9e70:	d5 08       	sbc	r13, r5
    9e72:	e6 08       	sbc	r14, r6
    9e74:	f7 08       	sbc	r15, r7
    9e76:	d7 cf       	rjmp	.-82     	; 0x9e26 <dir_sdi+0xc2>
    9e78:	c8 01       	movw	r24, r16
    9e7a:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    9e7e:	6e 8b       	std	Y+22, r22	; 0x16
    9e80:	7f 8b       	std	Y+23, r23	; 0x17
    9e82:	88 8f       	std	Y+24, r24	; 0x18
    9e84:	99 8f       	std	Y+25, r25	; 0x19
    9e86:	8a 8a       	std	Y+18, r8	; 0x12
    9e88:	9b 8a       	std	Y+19, r9	; 0x13
    9e8a:	ac 8a       	std	Y+20, r10	; 0x14
    9e8c:	bd 8a       	std	Y+21, r11	; 0x15
    9e8e:	8e 89       	ldd	r24, Y+22	; 0x16
    9e90:	9f 89       	ldd	r25, Y+23	; 0x17
    9e92:	a8 8d       	ldd	r26, Y+24	; 0x18
    9e94:	b9 8d       	ldd	r27, Y+25	; 0x19
    9e96:	00 97       	sbiw	r24, 0x00	; 0
    9e98:	a1 05       	cpc	r26, r1
    9e9a:	b1 05       	cpc	r27, r1
    9e9c:	09 f4       	brne	.+2      	; 0x9ea0 <dir_sdi+0x13c>
    9e9e:	71 cf       	rjmp	.-286    	; 0x9d82 <dir_sdi+0x1e>
    9ea0:	b7 01       	movw	r22, r14
    9ea2:	a6 01       	movw	r20, r12
    9ea4:	29 e0       	ldi	r18, 0x09	; 9
    9ea6:	76 95       	lsr	r23
    9ea8:	67 95       	ror	r22
    9eaa:	57 95       	ror	r21
    9eac:	47 95       	ror	r20
    9eae:	2a 95       	dec	r18
    9eb0:	d1 f7       	brne	.-12     	; 0x9ea6 <dir_sdi+0x142>
    9eb2:	84 0f       	add	r24, r20
    9eb4:	95 1f       	adc	r25, r21
    9eb6:	a6 1f       	adc	r26, r22
    9eb8:	b7 1f       	adc	r27, r23
    9eba:	8e 8b       	std	Y+22, r24	; 0x16
    9ebc:	9f 8b       	std	Y+23, r25	; 0x17
    9ebe:	a8 8f       	std	Y+24, r26	; 0x18
    9ec0:	b9 8f       	std	Y+25, r27	; 0x19
    9ec2:	0b 5c       	subi	r16, 0xCB	; 203
    9ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    9ec6:	f1 e0       	ldi	r31, 0x01	; 1
    9ec8:	df 22       	and	r13, r31
    9eca:	c0 0e       	add	r12, r16
    9ecc:	d1 1e       	adc	r13, r17
    9ece:	db 8e       	std	Y+27, r13	; 0x1b
    9ed0:	ca 8e       	std	Y+26, r12	; 0x1a
    9ed2:	80 e0       	ldi	r24, 0x00	; 0
    9ed4:	90 e0       	ldi	r25, 0x00	; 0
    9ed6:	02 c0       	rjmp	.+4      	; 0x9edc <dir_sdi+0x178>
    9ed8:	81 e0       	ldi	r24, 0x01	; 1
    9eda:	90 e0       	ldi	r25, 0x00	; 0
    9edc:	cd b7       	in	r28, 0x3d	; 61
    9ede:	de b7       	in	r29, 0x3e	; 62
    9ee0:	e0 e1       	ldi	r30, 0x10	; 16
    9ee2:	0c 94 76 e2 	jmp	0x1c4ec	; 0x1c4ec <__epilogue_restores__+0x4>

00009ee6 <create_chain>:
    9ee6:	a0 e0       	ldi	r26, 0x00	; 0
    9ee8:	b0 e0       	ldi	r27, 0x00	; 0
    9eea:	e9 e7       	ldi	r30, 0x79	; 121
    9eec:	ff e4       	ldi	r31, 0x4F	; 79
    9eee:	0c 94 5a e2 	jmp	0x1c4b4	; 0x1c4b4 <__prologue_saves__+0x4>
    9ef2:	8c 01       	movw	r16, r24
    9ef4:	2a 01       	movw	r4, r20
    9ef6:	3b 01       	movw	r6, r22
    9ef8:	fc 01       	movw	r30, r24
    9efa:	c0 81       	ld	r28, Z
    9efc:	d1 81       	ldd	r29, Z+1	; 0x01
    9efe:	41 15       	cp	r20, r1
    9f00:	51 05       	cpc	r21, r1
    9f02:	61 05       	cpc	r22, r1
    9f04:	71 05       	cpc	r23, r1
    9f06:	99 f4       	brne	.+38     	; 0x9f2e <create_chain+0x48>
    9f08:	8d 84       	ldd	r8, Y+13	; 0x0d
    9f0a:	9e 84       	ldd	r9, Y+14	; 0x0e
    9f0c:	af 84       	ldd	r10, Y+15	; 0x0f
    9f0e:	b8 88       	ldd	r11, Y+16	; 0x10
    9f10:	81 14       	cp	r8, r1
    9f12:	91 04       	cpc	r9, r1
    9f14:	a1 04       	cpc	r10, r1
    9f16:	b1 04       	cpc	r11, r1
    9f18:	51 f1       	breq	.+84     	; 0x9f6e <create_chain+0x88>
    9f1a:	89 8d       	ldd	r24, Y+25	; 0x19
    9f1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f1e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f20:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f22:	88 16       	cp	r8, r24
    9f24:	99 06       	cpc	r9, r25
    9f26:	aa 06       	cpc	r10, r26
    9f28:	bb 06       	cpc	r11, r27
    9f2a:	28 f1       	brcs	.+74     	; 0x9f76 <create_chain+0x90>
    9f2c:	20 c0       	rjmp	.+64     	; 0x9f6e <create_chain+0x88>
    9f2e:	ce 01       	movw	r24, r28
    9f30:	65 de       	rcall	.-822    	; 0x9bfc <get_fat.isra.10>
    9f32:	62 30       	cpi	r22, 0x02	; 2
    9f34:	71 05       	cpc	r23, r1
    9f36:	81 05       	cpc	r24, r1
    9f38:	91 05       	cpc	r25, r1
    9f3a:	08 f4       	brcc	.+2      	; 0x9f3e <create_chain+0x58>
    9f3c:	ea c0       	rjmp	.+468    	; 0xa112 <create_chain+0x22c>
    9f3e:	6f 3f       	cpi	r22, 0xFF	; 255
    9f40:	ff ef       	ldi	r31, 0xFF	; 255
    9f42:	7f 07       	cpc	r23, r31
    9f44:	8f 07       	cpc	r24, r31
    9f46:	9f 07       	cpc	r25, r31
    9f48:	29 f4       	brne	.+10     	; 0x9f54 <create_chain+0x6e>
    9f4a:	4f ef       	ldi	r20, 0xFF	; 255
    9f4c:	3f ef       	ldi	r19, 0xFF	; 255
    9f4e:	2f ef       	ldi	r18, 0xFF	; 255
    9f50:	9f ef       	ldi	r25, 0xFF	; 255
    9f52:	e7 c0       	rjmp	.+462    	; 0xa122 <create_chain+0x23c>
    9f54:	c9 8c       	ldd	r12, Y+25	; 0x19
    9f56:	da 8c       	ldd	r13, Y+26	; 0x1a
    9f58:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9f5a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9f5c:	6c 15       	cp	r22, r12
    9f5e:	7d 05       	cpc	r23, r13
    9f60:	8e 05       	cpc	r24, r14
    9f62:	9f 05       	cpc	r25, r15
    9f64:	08 f4       	brcc	.+2      	; 0x9f68 <create_chain+0x82>
    9f66:	da c0       	rjmp	.+436    	; 0xa11c <create_chain+0x236>
    9f68:	53 01       	movw	r10, r6
    9f6a:	42 01       	movw	r8, r4
    9f6c:	04 c0       	rjmp	.+8      	; 0x9f76 <create_chain+0x90>
    9f6e:	81 2c       	mov	r8, r1
    9f70:	91 2c       	mov	r9, r1
    9f72:	54 01       	movw	r10, r8
    9f74:	83 94       	inc	r8
    9f76:	89 89       	ldd	r24, Y+17	; 0x11
    9f78:	9a 89       	ldd	r25, Y+18	; 0x12
    9f7a:	ab 89       	ldd	r26, Y+19	; 0x13
    9f7c:	bc 89       	ldd	r27, Y+20	; 0x14
    9f7e:	89 2b       	or	r24, r25
    9f80:	8a 2b       	or	r24, r26
    9f82:	8b 2b       	or	r24, r27
    9f84:	11 f4       	brne	.+4      	; 0x9f8a <create_chain+0xa4>
    9f86:	40 e0       	ldi	r20, 0x00	; 0
    9f88:	c5 c0       	rjmp	.+394    	; 0xa114 <create_chain+0x22e>
    9f8a:	84 14       	cp	r8, r4
    9f8c:	95 04       	cpc	r9, r5
    9f8e:	a6 04       	cpc	r10, r6
    9f90:	b7 04       	cpc	r11, r7
    9f92:	09 f0       	breq	.+2      	; 0x9f96 <create_chain+0xb0>
    9f94:	46 c0       	rjmp	.+140    	; 0xa022 <create_chain+0x13c>
    9f96:	75 01       	movw	r14, r10
    9f98:	64 01       	movw	r12, r8
    9f9a:	2f ef       	ldi	r18, 0xFF	; 255
    9f9c:	c2 1a       	sub	r12, r18
    9f9e:	d2 0a       	sbc	r13, r18
    9fa0:	e2 0a       	sbc	r14, r18
    9fa2:	f2 0a       	sbc	r15, r18
    9fa4:	89 8d       	ldd	r24, Y+25	; 0x19
    9fa6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9fa8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9faa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9fac:	c8 16       	cp	r12, r24
    9fae:	d9 06       	cpc	r13, r25
    9fb0:	ea 06       	cpc	r14, r26
    9fb2:	fb 06       	cpc	r15, r27
    9fb4:	28 f0       	brcs	.+10     	; 0x9fc0 <create_chain+0xda>
    9fb6:	92 e0       	ldi	r25, 0x02	; 2
    9fb8:	c9 2e       	mov	r12, r25
    9fba:	d1 2c       	mov	r13, r1
    9fbc:	e1 2c       	mov	r14, r1
    9fbe:	f1 2c       	mov	r15, r1
    9fc0:	b7 01       	movw	r22, r14
    9fc2:	a6 01       	movw	r20, r12
    9fc4:	f8 01       	movw	r30, r16
    9fc6:	80 81       	ld	r24, Z
    9fc8:	91 81       	ldd	r25, Z+1	; 0x01
    9fca:	18 de       	rcall	.-976    	; 0x9bfc <get_fat.isra.10>
    9fcc:	61 30       	cpi	r22, 0x01	; 1
    9fce:	71 05       	cpc	r23, r1
    9fd0:	81 05       	cpc	r24, r1
    9fd2:	91 05       	cpc	r25, r1
    9fd4:	09 f4       	brne	.+2      	; 0x9fd8 <create_chain+0xf2>
    9fd6:	9d c0       	rjmp	.+314    	; 0xa112 <create_chain+0x22c>
    9fd8:	6f 3f       	cpi	r22, 0xFF	; 255
    9fda:	ff ef       	ldi	r31, 0xFF	; 255
    9fdc:	7f 07       	cpc	r23, r31
    9fde:	8f 07       	cpc	r24, r31
    9fe0:	9f 07       	cpc	r25, r31
    9fe2:	09 f4       	brne	.+2      	; 0x9fe6 <create_chain+0x100>
    9fe4:	b2 cf       	rjmp	.-156    	; 0x9f4a <create_chain+0x64>
    9fe6:	67 2b       	or	r22, r23
    9fe8:	68 2b       	or	r22, r24
    9fea:	69 2b       	or	r22, r25
    9fec:	a9 f0       	breq	.+42     	; 0xa018 <create_chain+0x132>
    9fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    9ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    9ff2:	af 85       	ldd	r26, Y+15	; 0x0f
    9ff4:	b8 89       	ldd	r27, Y+16	; 0x10
    9ff6:	82 30       	cpi	r24, 0x02	; 2
    9ff8:	91 05       	cpc	r25, r1
    9ffa:	a1 05       	cpc	r26, r1
    9ffc:	b1 05       	cpc	r27, r1
    9ffe:	88 f0       	brcs	.+34     	; 0xa022 <create_chain+0x13c>
    a000:	49 8d       	ldd	r20, Y+25	; 0x19
    a002:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a004:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a006:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a008:	84 17       	cp	r24, r20
    a00a:	95 07       	cpc	r25, r21
    a00c:	a6 07       	cpc	r26, r22
    a00e:	b7 07       	cpc	r27, r23
    a010:	40 f4       	brcc	.+16     	; 0xa022 <create_chain+0x13c>
    a012:	4c 01       	movw	r8, r24
    a014:	5d 01       	movw	r10, r26
    a016:	05 c0       	rjmp	.+10     	; 0xa022 <create_chain+0x13c>
    a018:	c1 14       	cp	r12, r1
    a01a:	d1 04       	cpc	r13, r1
    a01c:	e1 04       	cpc	r14, r1
    a01e:	f1 04       	cpc	r15, r1
    a020:	c9 f5       	brne	.+114    	; 0xa094 <create_chain+0x1ae>
    a022:	75 01       	movw	r14, r10
    a024:	64 01       	movw	r12, r8
    a026:	2f ef       	ldi	r18, 0xFF	; 255
    a028:	c2 1a       	sub	r12, r18
    a02a:	d2 0a       	sbc	r13, r18
    a02c:	e2 0a       	sbc	r14, r18
    a02e:	f2 0a       	sbc	r15, r18
    a030:	89 8d       	ldd	r24, Y+25	; 0x19
    a032:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a034:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a036:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a038:	c8 16       	cp	r12, r24
    a03a:	d9 06       	cpc	r13, r25
    a03c:	ea 06       	cpc	r14, r26
    a03e:	fb 06       	cpc	r15, r27
    a040:	60 f0       	brcs	.+24     	; 0xa05a <create_chain+0x174>
    a042:	82 e0       	ldi	r24, 0x02	; 2
    a044:	88 16       	cp	r8, r24
    a046:	91 04       	cpc	r9, r1
    a048:	a1 04       	cpc	r10, r1
    a04a:	b1 04       	cpc	r11, r1
    a04c:	08 f4       	brcc	.+2      	; 0xa050 <create_chain+0x16a>
    a04e:	9b cf       	rjmp	.-202    	; 0x9f86 <create_chain+0xa0>
    a050:	82 e0       	ldi	r24, 0x02	; 2
    a052:	c8 2e       	mov	r12, r24
    a054:	d1 2c       	mov	r13, r1
    a056:	e1 2c       	mov	r14, r1
    a058:	f1 2c       	mov	r15, r1
    a05a:	b7 01       	movw	r22, r14
    a05c:	a6 01       	movw	r20, r12
    a05e:	f8 01       	movw	r30, r16
    a060:	80 81       	ld	r24, Z
    a062:	91 81       	ldd	r25, Z+1	; 0x01
    a064:	cb dd       	rcall	.-1130   	; 0x9bfc <get_fat.isra.10>
    a066:	61 15       	cp	r22, r1
    a068:	71 05       	cpc	r23, r1
    a06a:	81 05       	cpc	r24, r1
    a06c:	91 05       	cpc	r25, r1
    a06e:	91 f0       	breq	.+36     	; 0xa094 <create_chain+0x1ae>
    a070:	61 30       	cpi	r22, 0x01	; 1
    a072:	71 05       	cpc	r23, r1
    a074:	81 05       	cpc	r24, r1
    a076:	91 05       	cpc	r25, r1
    a078:	09 f4       	brne	.+2      	; 0xa07c <create_chain+0x196>
    a07a:	4b c0       	rjmp	.+150    	; 0xa112 <create_chain+0x22c>
    a07c:	6f 3f       	cpi	r22, 0xFF	; 255
    a07e:	7f 4f       	sbci	r23, 0xFF	; 255
    a080:	8f 4f       	sbci	r24, 0xFF	; 255
    a082:	9f 4f       	sbci	r25, 0xFF	; 255
    a084:	09 f4       	brne	.+2      	; 0xa088 <create_chain+0x1a2>
    a086:	61 cf       	rjmp	.-318    	; 0x9f4a <create_chain+0x64>
    a088:	c8 14       	cp	r12, r8
    a08a:	d9 04       	cpc	r13, r9
    a08c:	ea 04       	cpc	r14, r10
    a08e:	fb 04       	cpc	r15, r11
    a090:	51 f6       	brne	.-108    	; 0xa026 <create_chain+0x140>
    a092:	79 cf       	rjmp	.-270    	; 0x9f86 <create_chain+0xa0>
    a094:	0f ef       	ldi	r16, 0xFF	; 255
    a096:	1f ef       	ldi	r17, 0xFF	; 255
    a098:	98 01       	movw	r18, r16
    a09a:	b7 01       	movw	r22, r14
    a09c:	a6 01       	movw	r20, r12
    a09e:	ce 01       	movw	r24, r28
    a0a0:	b2 dc       	rcall	.-1692   	; 0x9a06 <put_fat>
    a0a2:	00 97       	sbiw	r24, 0x00	; 0
    a0a4:	99 f5       	brne	.+102    	; 0xa10c <create_chain+0x226>
    a0a6:	41 14       	cp	r4, r1
    a0a8:	51 04       	cpc	r5, r1
    a0aa:	61 04       	cpc	r6, r1
    a0ac:	71 04       	cpc	r7, r1
    a0ae:	e9 f4       	brne	.+58     	; 0xa0ea <create_chain+0x204>
    a0b0:	cd 86       	std	Y+13, r12	; 0x0d
    a0b2:	de 86       	std	Y+14, r13	; 0x0e
    a0b4:	ef 86       	std	Y+15, r14	; 0x0f
    a0b6:	f8 8a       	std	Y+16, r15	; 0x10
    a0b8:	89 89       	ldd	r24, Y+17	; 0x11
    a0ba:	9a 89       	ldd	r25, Y+18	; 0x12
    a0bc:	ab 89       	ldd	r26, Y+19	; 0x13
    a0be:	bc 89       	ldd	r27, Y+20	; 0x14
    a0c0:	49 8d       	ldd	r20, Y+25	; 0x19
    a0c2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a0c4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a0c6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a0c8:	42 50       	subi	r20, 0x02	; 2
    a0ca:	51 09       	sbc	r21, r1
    a0cc:	61 09       	sbc	r22, r1
    a0ce:	71 09       	sbc	r23, r1
    a0d0:	48 17       	cp	r20, r24
    a0d2:	59 07       	cpc	r21, r25
    a0d4:	6a 07       	cpc	r22, r26
    a0d6:	7b 07       	cpc	r23, r27
    a0d8:	88 f0       	brcs	.+34     	; 0xa0fc <create_chain+0x216>
    a0da:	01 97       	sbiw	r24, 0x01	; 1
    a0dc:	a1 09       	sbc	r26, r1
    a0de:	b1 09       	sbc	r27, r1
    a0e0:	89 8b       	std	Y+17, r24	; 0x11
    a0e2:	9a 8b       	std	Y+18, r25	; 0x12
    a0e4:	ab 8b       	std	Y+19, r26	; 0x13
    a0e6:	bc 8b       	std	Y+20, r27	; 0x14
    a0e8:	09 c0       	rjmp	.+18     	; 0xa0fc <create_chain+0x216>
    a0ea:	97 01       	movw	r18, r14
    a0ec:	86 01       	movw	r16, r12
    a0ee:	b3 01       	movw	r22, r6
    a0f0:	a2 01       	movw	r20, r4
    a0f2:	ce 01       	movw	r24, r28
    a0f4:	88 dc       	rcall	.-1776   	; 0x9a06 <put_fat>
    a0f6:	00 97       	sbiw	r24, 0x00	; 0
    a0f8:	d9 f2       	breq	.-74     	; 0xa0b0 <create_chain+0x1ca>
    a0fa:	08 c0       	rjmp	.+16     	; 0xa10c <create_chain+0x226>
    a0fc:	8c 81       	ldd	r24, Y+4	; 0x04
    a0fe:	81 60       	ori	r24, 0x01	; 1
    a100:	8c 83       	std	Y+4, r24	; 0x04
    a102:	4c 2d       	mov	r20, r12
    a104:	3d 2d       	mov	r19, r13
    a106:	2e 2d       	mov	r18, r14
    a108:	9f 2d       	mov	r25, r15
    a10a:	0b c0       	rjmp	.+22     	; 0xa122 <create_chain+0x23c>
    a10c:	01 97       	sbiw	r24, 0x01	; 1
    a10e:	09 f4       	brne	.+2      	; 0xa112 <create_chain+0x22c>
    a110:	1c cf       	rjmp	.-456    	; 0x9f4a <create_chain+0x64>
    a112:	41 e0       	ldi	r20, 0x01	; 1
    a114:	30 e0       	ldi	r19, 0x00	; 0
    a116:	20 e0       	ldi	r18, 0x00	; 0
    a118:	90 e0       	ldi	r25, 0x00	; 0
    a11a:	03 c0       	rjmp	.+6      	; 0xa122 <create_chain+0x23c>
    a11c:	46 2f       	mov	r20, r22
    a11e:	37 2f       	mov	r19, r23
    a120:	28 2f       	mov	r18, r24
    a122:	64 2f       	mov	r22, r20
    a124:	73 2f       	mov	r23, r19
    a126:	82 2f       	mov	r24, r18
    a128:	cd b7       	in	r28, 0x3d	; 61
    a12a:	de b7       	in	r29, 0x3e	; 62
    a12c:	e0 e1       	ldi	r30, 0x10	; 16
    a12e:	0c 94 76 e2 	jmp	0x1c4ec	; 0x1c4ec <__epilogue_restores__+0x4>

0000a132 <remove_chain>:
    a132:	4f 92       	push	r4
    a134:	5f 92       	push	r5
    a136:	6f 92       	push	r6
    a138:	7f 92       	push	r7
    a13a:	af 92       	push	r10
    a13c:	bf 92       	push	r11
    a13e:	cf 92       	push	r12
    a140:	df 92       	push	r13
    a142:	ef 92       	push	r14
    a144:	ff 92       	push	r15
    a146:	0f 93       	push	r16
    a148:	1f 93       	push	r17
    a14a:	cf 93       	push	r28
    a14c:	df 93       	push	r29
    a14e:	5c 01       	movw	r10, r24
    a150:	6a 01       	movw	r12, r20
    a152:	7b 01       	movw	r14, r22
    a154:	b9 01       	movw	r22, r18
    a156:	a8 01       	movw	r20, r16
    a158:	22 e0       	ldi	r18, 0x02	; 2
    a15a:	c2 16       	cp	r12, r18
    a15c:	d1 04       	cpc	r13, r1
    a15e:	e1 04       	cpc	r14, r1
    a160:	f1 04       	cpc	r15, r1
    a162:	10 f4       	brcc	.+4      	; 0xa168 <remove_chain+0x36>
    a164:	22 e0       	ldi	r18, 0x02	; 2
    a166:	27 c0       	rjmp	.+78     	; 0xa1b6 <remove_chain+0x84>
    a168:	fc 01       	movw	r30, r24
    a16a:	c0 81       	ld	r28, Z
    a16c:	d1 81       	ldd	r29, Z+1	; 0x01
    a16e:	89 8d       	ldd	r24, Y+25	; 0x19
    a170:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a172:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a174:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a176:	c8 16       	cp	r12, r24
    a178:	d9 06       	cpc	r13, r25
    a17a:	ea 06       	cpc	r14, r26
    a17c:	fb 06       	cpc	r15, r27
    a17e:	90 f7       	brcc	.-28     	; 0xa164 <remove_chain+0x32>
    a180:	41 15       	cp	r20, r1
    a182:	51 05       	cpc	r21, r1
    a184:	61 05       	cpc	r22, r1
    a186:	71 05       	cpc	r23, r1
    a188:	41 f0       	breq	.+16     	; 0xa19a <remove_chain+0x68>
    a18a:	0f ef       	ldi	r16, 0xFF	; 255
    a18c:	1f ef       	ldi	r17, 0xFF	; 255
    a18e:	98 01       	movw	r18, r16
    a190:	ce 01       	movw	r24, r28
    a192:	39 dc       	rcall	.-1934   	; 0x9a06 <put_fat>
    a194:	00 97       	sbiw	r24, 0x00	; 0
    a196:	09 f0       	breq	.+2      	; 0xa19a <remove_chain+0x68>
    a198:	4c c0       	rjmp	.+152    	; 0xa232 <remove_chain+0x100>
    a19a:	b7 01       	movw	r22, r14
    a19c:	a6 01       	movw	r20, r12
    a19e:	f5 01       	movw	r30, r10
    a1a0:	80 81       	ld	r24, Z
    a1a2:	91 81       	ldd	r25, Z+1	; 0x01
    a1a4:	2b dd       	rcall	.-1450   	; 0x9bfc <get_fat.isra.10>
    a1a6:	2b 01       	movw	r4, r22
    a1a8:	3c 01       	movw	r6, r24
    a1aa:	61 15       	cp	r22, r1
    a1ac:	71 05       	cpc	r23, r1
    a1ae:	81 05       	cpc	r24, r1
    a1b0:	91 05       	cpc	r25, r1
    a1b2:	19 f4       	brne	.+6      	; 0xa1ba <remove_chain+0x88>
    a1b4:	20 e0       	ldi	r18, 0x00	; 0
    a1b6:	90 e0       	ldi	r25, 0x00	; 0
    a1b8:	3d c0       	rjmp	.+122    	; 0xa234 <remove_chain+0x102>
    a1ba:	61 30       	cpi	r22, 0x01	; 1
    a1bc:	71 05       	cpc	r23, r1
    a1be:	81 05       	cpc	r24, r1
    a1c0:	91 05       	cpc	r25, r1
    a1c2:	81 f2       	breq	.-96     	; 0xa164 <remove_chain+0x32>
    a1c4:	6f 3f       	cpi	r22, 0xFF	; 255
    a1c6:	7f 4f       	sbci	r23, 0xFF	; 255
    a1c8:	8f 4f       	sbci	r24, 0xFF	; 255
    a1ca:	9f 4f       	sbci	r25, 0xFF	; 255
    a1cc:	81 f1       	breq	.+96     	; 0xa22e <remove_chain+0xfc>
    a1ce:	00 e0       	ldi	r16, 0x00	; 0
    a1d0:	10 e0       	ldi	r17, 0x00	; 0
    a1d2:	98 01       	movw	r18, r16
    a1d4:	b7 01       	movw	r22, r14
    a1d6:	a6 01       	movw	r20, r12
    a1d8:	ce 01       	movw	r24, r28
    a1da:	15 dc       	rcall	.-2006   	; 0x9a06 <put_fat>
    a1dc:	00 97       	sbiw	r24, 0x00	; 0
    a1de:	49 f5       	brne	.+82     	; 0xa232 <remove_chain+0x100>
    a1e0:	89 89       	ldd	r24, Y+17	; 0x11
    a1e2:	9a 89       	ldd	r25, Y+18	; 0x12
    a1e4:	ab 89       	ldd	r26, Y+19	; 0x13
    a1e6:	bc 89       	ldd	r27, Y+20	; 0x14
    a1e8:	49 8d       	ldd	r20, Y+25	; 0x19
    a1ea:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a1ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a1ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a1f0:	6a 01       	movw	r12, r20
    a1f2:	7b 01       	movw	r14, r22
    a1f4:	e2 e0       	ldi	r30, 0x02	; 2
    a1f6:	ce 1a       	sub	r12, r30
    a1f8:	d1 08       	sbc	r13, r1
    a1fa:	e1 08       	sbc	r14, r1
    a1fc:	f1 08       	sbc	r15, r1
    a1fe:	8c 15       	cp	r24, r12
    a200:	9d 05       	cpc	r25, r13
    a202:	ae 05       	cpc	r26, r14
    a204:	bf 05       	cpc	r27, r15
    a206:	50 f4       	brcc	.+20     	; 0xa21c <remove_chain+0xea>
    a208:	01 96       	adiw	r24, 0x01	; 1
    a20a:	a1 1d       	adc	r26, r1
    a20c:	b1 1d       	adc	r27, r1
    a20e:	89 8b       	std	Y+17, r24	; 0x11
    a210:	9a 8b       	std	Y+18, r25	; 0x12
    a212:	ab 8b       	std	Y+19, r26	; 0x13
    a214:	bc 8b       	std	Y+20, r27	; 0x14
    a216:	8c 81       	ldd	r24, Y+4	; 0x04
    a218:	81 60       	ori	r24, 0x01	; 1
    a21a:	8c 83       	std	Y+4, r24	; 0x04
    a21c:	73 01       	movw	r14, r6
    a21e:	62 01       	movw	r12, r4
    a220:	44 16       	cp	r4, r20
    a222:	55 06       	cpc	r5, r21
    a224:	66 06       	cpc	r6, r22
    a226:	77 06       	cpc	r7, r23
    a228:	08 f4       	brcc	.+2      	; 0xa22c <remove_chain+0xfa>
    a22a:	b7 cf       	rjmp	.-146    	; 0xa19a <remove_chain+0x68>
    a22c:	c3 cf       	rjmp	.-122    	; 0xa1b4 <remove_chain+0x82>
    a22e:	21 e0       	ldi	r18, 0x01	; 1
    a230:	c2 cf       	rjmp	.-124    	; 0xa1b6 <remove_chain+0x84>
    a232:	28 2f       	mov	r18, r24
    a234:	82 2f       	mov	r24, r18
    a236:	df 91       	pop	r29
    a238:	cf 91       	pop	r28
    a23a:	1f 91       	pop	r17
    a23c:	0f 91       	pop	r16
    a23e:	ff 90       	pop	r15
    a240:	ef 90       	pop	r14
    a242:	df 90       	pop	r13
    a244:	cf 90       	pop	r12
    a246:	bf 90       	pop	r11
    a248:	af 90       	pop	r10
    a24a:	7f 90       	pop	r7
    a24c:	6f 90       	pop	r6
    a24e:	5f 90       	pop	r5
    a250:	4f 90       	pop	r4
    a252:	08 95       	ret

0000a254 <dir_next>:
    a254:	4f 92       	push	r4
    a256:	5f 92       	push	r5
    a258:	6f 92       	push	r6
    a25a:	7f 92       	push	r7
    a25c:	af 92       	push	r10
    a25e:	bf 92       	push	r11
    a260:	cf 92       	push	r12
    a262:	df 92       	push	r13
    a264:	ef 92       	push	r14
    a266:	ff 92       	push	r15
    a268:	0f 93       	push	r16
    a26a:	1f 93       	push	r17
    a26c:	cf 93       	push	r28
    a26e:	df 93       	push	r29
    a270:	ec 01       	movw	r28, r24
    a272:	08 81       	ld	r16, Y
    a274:	19 81       	ldd	r17, Y+1	; 0x01
    a276:	ce 84       	ldd	r12, Y+14	; 0x0e
    a278:	df 84       	ldd	r13, Y+15	; 0x0f
    a27a:	e8 88       	ldd	r14, Y+16	; 0x10
    a27c:	f9 88       	ldd	r15, Y+17	; 0x11
    a27e:	80 e2       	ldi	r24, 0x20	; 32
    a280:	c8 0e       	add	r12, r24
    a282:	d1 1c       	adc	r13, r1
    a284:	e1 1c       	adc	r14, r1
    a286:	f1 1c       	adc	r15, r1
    a288:	c1 14       	cp	r12, r1
    a28a:	d1 04       	cpc	r13, r1
    a28c:	e0 e2       	ldi	r30, 0x20	; 32
    a28e:	ee 06       	cpc	r14, r30
    a290:	f1 04       	cpc	r15, r1
    a292:	20 f0       	brcs	.+8      	; 0xa29c <dir_next+0x48>
    a294:	1e 8a       	std	Y+22, r1	; 0x16
    a296:	1f 8a       	std	Y+23, r1	; 0x17
    a298:	18 8e       	std	Y+24, r1	; 0x18
    a29a:	19 8e       	std	Y+25, r1	; 0x19
    a29c:	8e 89       	ldd	r24, Y+22	; 0x16
    a29e:	9f 89       	ldd	r25, Y+23	; 0x17
    a2a0:	a8 8d       	ldd	r26, Y+24	; 0x18
    a2a2:	b9 8d       	ldd	r27, Y+25	; 0x19
    a2a4:	00 97       	sbiw	r24, 0x00	; 0
    a2a6:	a1 05       	cpc	r26, r1
    a2a8:	b1 05       	cpc	r27, r1
    a2aa:	09 f4       	brne	.+2      	; 0xa2ae <dir_next+0x5a>
    a2ac:	a7 c0       	rjmp	.+334    	; 0xa3fc <dir_next+0x1a8>
    a2ae:	5b 01       	movw	r10, r22
    a2b0:	b7 01       	movw	r22, r14
    a2b2:	a6 01       	movw	r20, r12
    a2b4:	51 70       	andi	r21, 0x01	; 1
    a2b6:	66 27       	eor	r22, r22
    a2b8:	77 27       	eor	r23, r23
    a2ba:	45 2b       	or	r20, r21
    a2bc:	46 2b       	or	r20, r22
    a2be:	47 2b       	or	r20, r23
    a2c0:	09 f0       	breq	.+2      	; 0xa2c4 <dir_next+0x70>
    a2c2:	8d c0       	rjmp	.+282    	; 0xa3de <dir_next+0x18a>
    a2c4:	01 96       	adiw	r24, 0x01	; 1
    a2c6:	a1 1d       	adc	r26, r1
    a2c8:	b1 1d       	adc	r27, r1
    a2ca:	8e 8b       	std	Y+22, r24	; 0x16
    a2cc:	9f 8b       	std	Y+23, r25	; 0x17
    a2ce:	a8 8f       	std	Y+24, r26	; 0x18
    a2d0:	b9 8f       	std	Y+25, r27	; 0x19
    a2d2:	4a 89       	ldd	r20, Y+18	; 0x12
    a2d4:	5b 89       	ldd	r21, Y+19	; 0x13
    a2d6:	6c 89       	ldd	r22, Y+20	; 0x14
    a2d8:	7d 89       	ldd	r23, Y+21	; 0x15
    a2da:	f8 01       	movw	r30, r16
    a2dc:	41 15       	cp	r20, r1
    a2de:	51 05       	cpc	r21, r1
    a2e0:	61 05       	cpc	r22, r1
    a2e2:	71 05       	cpc	r23, r1
    a2e4:	c1 f4       	brne	.+48     	; 0xa316 <dir_next+0xc2>
    a2e6:	87 81       	ldd	r24, Z+7	; 0x07
    a2e8:	90 85       	ldd	r25, Z+8	; 0x08
    a2ea:	a0 e0       	ldi	r26, 0x00	; 0
    a2ec:	b0 e0       	ldi	r27, 0x00	; 0
    a2ee:	b7 01       	movw	r22, r14
    a2f0:	a6 01       	movw	r20, r12
    a2f2:	35 e0       	ldi	r19, 0x05	; 5
    a2f4:	76 95       	lsr	r23
    a2f6:	67 95       	ror	r22
    a2f8:	57 95       	ror	r21
    a2fa:	47 95       	ror	r20
    a2fc:	3a 95       	dec	r19
    a2fe:	d1 f7       	brne	.-12     	; 0xa2f4 <dir_next+0xa0>
    a300:	48 17       	cp	r20, r24
    a302:	59 07       	cpc	r21, r25
    a304:	6a 07       	cpc	r22, r26
    a306:	7b 07       	cpc	r23, r27
    a308:	08 f4       	brcc	.+2      	; 0xa30c <dir_next+0xb8>
    a30a:	69 c0       	rjmp	.+210    	; 0xa3de <dir_next+0x18a>
    a30c:	1e 8a       	std	Y+22, r1	; 0x16
    a30e:	1f 8a       	std	Y+23, r1	; 0x17
    a310:	18 8e       	std	Y+24, r1	; 0x18
    a312:	19 8e       	std	Y+25, r1	; 0x19
    a314:	73 c0       	rjmp	.+230    	; 0xa3fc <dir_next+0x1a8>
    a316:	81 85       	ldd	r24, Z+9	; 0x09
    a318:	92 85       	ldd	r25, Z+10	; 0x0a
    a31a:	01 97       	sbiw	r24, 0x01	; 1
    a31c:	a0 e0       	ldi	r26, 0x00	; 0
    a31e:	b0 e0       	ldi	r27, 0x00	; 0
    a320:	26 01       	movw	r4, r12
    a322:	37 01       	movw	r6, r14
    a324:	29 e0       	ldi	r18, 0x09	; 9
    a326:	76 94       	lsr	r7
    a328:	67 94       	ror	r6
    a32a:	57 94       	ror	r5
    a32c:	47 94       	ror	r4
    a32e:	2a 95       	dec	r18
    a330:	d1 f7       	brne	.-12     	; 0xa326 <dir_next+0xd2>
    a332:	84 21       	and	r24, r4
    a334:	95 21       	and	r25, r5
    a336:	a6 21       	and	r26, r6
    a338:	b7 21       	and	r27, r7
    a33a:	89 2b       	or	r24, r25
    a33c:	8a 2b       	or	r24, r26
    a33e:	8b 2b       	or	r24, r27
    a340:	09 f0       	breq	.+2      	; 0xa344 <dir_next+0xf0>
    a342:	4d c0       	rjmp	.+154    	; 0xa3de <dir_next+0x18a>
    a344:	c8 01       	movw	r24, r16
    a346:	5a dc       	rcall	.-1868   	; 0x9bfc <get_fat.isra.10>
    a348:	2b 01       	movw	r4, r22
    a34a:	3c 01       	movw	r6, r24
    a34c:	62 30       	cpi	r22, 0x02	; 2
    a34e:	71 05       	cpc	r23, r1
    a350:	81 05       	cpc	r24, r1
    a352:	91 05       	cpc	r25, r1
    a354:	18 f4       	brcc	.+6      	; 0xa35c <dir_next+0x108>
    a356:	82 e0       	ldi	r24, 0x02	; 2
    a358:	90 e0       	ldi	r25, 0x00	; 0
    a35a:	55 c0       	rjmp	.+170    	; 0xa406 <dir_next+0x1b2>
    a35c:	8f ef       	ldi	r24, 0xFF	; 255
    a35e:	48 16       	cp	r4, r24
    a360:	58 06       	cpc	r5, r24
    a362:	68 06       	cpc	r6, r24
    a364:	78 06       	cpc	r7, r24
    a366:	19 f4       	brne	.+6      	; 0xa36e <dir_next+0x11a>
    a368:	81 e0       	ldi	r24, 0x01	; 1
    a36a:	90 e0       	ldi	r25, 0x00	; 0
    a36c:	4c c0       	rjmp	.+152    	; 0xa406 <dir_next+0x1b2>
    a36e:	f8 01       	movw	r30, r16
    a370:	81 8d       	ldd	r24, Z+25	; 0x19
    a372:	92 8d       	ldd	r25, Z+26	; 0x1a
    a374:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a376:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a378:	48 16       	cp	r4, r24
    a37a:	59 06       	cpc	r5, r25
    a37c:	6a 06       	cpc	r6, r26
    a37e:	7b 06       	cpc	r7, r27
    a380:	08 f1       	brcs	.+66     	; 0xa3c4 <dir_next+0x170>
    a382:	ab 28       	or	r10, r11
    a384:	19 f2       	breq	.-122    	; 0xa30c <dir_next+0xb8>
    a386:	4a 89       	ldd	r20, Y+18	; 0x12
    a388:	5b 89       	ldd	r21, Y+19	; 0x13
    a38a:	6c 89       	ldd	r22, Y+20	; 0x14
    a38c:	7d 89       	ldd	r23, Y+21	; 0x15
    a38e:	ce 01       	movw	r24, r28
    a390:	aa dd       	rcall	.-1196   	; 0x9ee6 <create_chain>
    a392:	2b 01       	movw	r4, r22
    a394:	3c 01       	movw	r6, r24
    a396:	61 15       	cp	r22, r1
    a398:	71 05       	cpc	r23, r1
    a39a:	81 05       	cpc	r24, r1
    a39c:	91 05       	cpc	r25, r1
    a39e:	89 f1       	breq	.+98     	; 0xa402 <dir_next+0x1ae>
    a3a0:	61 30       	cpi	r22, 0x01	; 1
    a3a2:	71 05       	cpc	r23, r1
    a3a4:	81 05       	cpc	r24, r1
    a3a6:	91 05       	cpc	r25, r1
    a3a8:	b1 f2       	breq	.-84     	; 0xa356 <dir_next+0x102>
    a3aa:	8f ef       	ldi	r24, 0xFF	; 255
    a3ac:	48 16       	cp	r4, r24
    a3ae:	58 06       	cpc	r5, r24
    a3b0:	68 06       	cpc	r6, r24
    a3b2:	78 06       	cpc	r7, r24
    a3b4:	c9 f2       	breq	.-78     	; 0xa368 <dir_next+0x114>
    a3b6:	b3 01       	movw	r22, r6
    a3b8:	a2 01       	movw	r20, r4
    a3ba:	c8 01       	movw	r24, r16
    a3bc:	0e 94 86 49 	call	0x930c	; 0x930c <dir_clear>
    a3c0:	89 2b       	or	r24, r25
    a3c2:	91 f6       	brne	.-92     	; 0xa368 <dir_next+0x114>
    a3c4:	4a 8a       	std	Y+18, r4	; 0x12
    a3c6:	5b 8a       	std	Y+19, r5	; 0x13
    a3c8:	6c 8a       	std	Y+20, r6	; 0x14
    a3ca:	7d 8a       	std	Y+21, r7	; 0x15
    a3cc:	b3 01       	movw	r22, r6
    a3ce:	a2 01       	movw	r20, r4
    a3d0:	c8 01       	movw	r24, r16
    a3d2:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    a3d6:	6e 8b       	std	Y+22, r22	; 0x16
    a3d8:	7f 8b       	std	Y+23, r23	; 0x17
    a3da:	88 8f       	std	Y+24, r24	; 0x18
    a3dc:	99 8f       	std	Y+25, r25	; 0x19
    a3de:	ce 86       	std	Y+14, r12	; 0x0e
    a3e0:	df 86       	std	Y+15, r13	; 0x0f
    a3e2:	e8 8a       	std	Y+16, r14	; 0x10
    a3e4:	f9 8a       	std	Y+17, r15	; 0x11
    a3e6:	0b 5c       	subi	r16, 0xCB	; 203
    a3e8:	1f 4f       	sbci	r17, 0xFF	; 255
    a3ea:	e1 e0       	ldi	r30, 0x01	; 1
    a3ec:	de 22       	and	r13, r30
    a3ee:	c0 0e       	add	r12, r16
    a3f0:	d1 1e       	adc	r13, r17
    a3f2:	db 8e       	std	Y+27, r13	; 0x1b
    a3f4:	ca 8e       	std	Y+26, r12	; 0x1a
    a3f6:	80 e0       	ldi	r24, 0x00	; 0
    a3f8:	90 e0       	ldi	r25, 0x00	; 0
    a3fa:	05 c0       	rjmp	.+10     	; 0xa406 <dir_next+0x1b2>
    a3fc:	84 e0       	ldi	r24, 0x04	; 4
    a3fe:	90 e0       	ldi	r25, 0x00	; 0
    a400:	02 c0       	rjmp	.+4      	; 0xa406 <dir_next+0x1b2>
    a402:	87 e0       	ldi	r24, 0x07	; 7
    a404:	90 e0       	ldi	r25, 0x00	; 0
    a406:	df 91       	pop	r29
    a408:	cf 91       	pop	r28
    a40a:	1f 91       	pop	r17
    a40c:	0f 91       	pop	r16
    a40e:	ff 90       	pop	r15
    a410:	ef 90       	pop	r14
    a412:	df 90       	pop	r13
    a414:	cf 90       	pop	r12
    a416:	bf 90       	pop	r11
    a418:	af 90       	pop	r10
    a41a:	7f 90       	pop	r7
    a41c:	6f 90       	pop	r6
    a41e:	5f 90       	pop	r5
    a420:	4f 90       	pop	r4
    a422:	08 95       	ret

0000a424 <dir_alloc>:
    a424:	a0 e0       	ldi	r26, 0x00	; 0
    a426:	b0 e0       	ldi	r27, 0x00	; 0
    a428:	e8 e1       	ldi	r30, 0x18	; 24
    a42a:	f2 e5       	ldi	r31, 0x52	; 82
    a42c:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    a430:	ec 01       	movw	r28, r24
    a432:	6b 01       	movw	r12, r22
    a434:	e8 80       	ld	r14, Y
    a436:	f9 80       	ldd	r15, Y+1	; 0x01
    a438:	40 e0       	ldi	r20, 0x00	; 0
    a43a:	50 e0       	ldi	r21, 0x00	; 0
    a43c:	ba 01       	movw	r22, r20
    a43e:	92 dc       	rcall	.-1756   	; 0x9d64 <dir_sdi>
    a440:	00 97       	sbiw	r24, 0x00	; 0
    a442:	f9 f4       	brne	.+62     	; 0xa482 <dir_alloc+0x5e>
    a444:	00 e0       	ldi	r16, 0x00	; 0
    a446:	10 e0       	ldi	r17, 0x00	; 0
    a448:	4e 89       	ldd	r20, Y+22	; 0x16
    a44a:	5f 89       	ldd	r21, Y+23	; 0x17
    a44c:	68 8d       	ldd	r22, Y+24	; 0x18
    a44e:	79 8d       	ldd	r23, Y+25	; 0x19
    a450:	c7 01       	movw	r24, r14
    a452:	04 d8       	rcall	.-4088   	; 0x945c <move_window>
    a454:	00 97       	sbiw	r24, 0x00	; 0
    a456:	a9 f4       	brne	.+42     	; 0xa482 <dir_alloc+0x5e>
    a458:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a45a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a45c:	20 81       	ld	r18, Z
    a45e:	25 3e       	cpi	r18, 0xE5	; 229
    a460:	11 f0       	breq	.+4      	; 0xa466 <dir_alloc+0x42>
    a462:	21 11       	cpse	r18, r1
    a464:	06 c0       	rjmp	.+12     	; 0xa472 <dir_alloc+0x4e>
    a466:	0f 5f       	subi	r16, 0xFF	; 255
    a468:	1f 4f       	sbci	r17, 0xFF	; 255
    a46a:	0c 15       	cp	r16, r12
    a46c:	1d 05       	cpc	r17, r13
    a46e:	19 f4       	brne	.+6      	; 0xa476 <dir_alloc+0x52>
    a470:	0d c0       	rjmp	.+26     	; 0xa48c <dir_alloc+0x68>
    a472:	00 e0       	ldi	r16, 0x00	; 0
    a474:	10 e0       	ldi	r17, 0x00	; 0
    a476:	61 e0       	ldi	r22, 0x01	; 1
    a478:	70 e0       	ldi	r23, 0x00	; 0
    a47a:	ce 01       	movw	r24, r28
    a47c:	eb de       	rcall	.-554    	; 0xa254 <dir_next>
    a47e:	00 97       	sbiw	r24, 0x00	; 0
    a480:	19 f3       	breq	.-58     	; 0xa448 <dir_alloc+0x24>
    a482:	84 30       	cpi	r24, 0x04	; 4
    a484:	91 05       	cpc	r25, r1
    a486:	11 f4       	brne	.+4      	; 0xa48c <dir_alloc+0x68>
    a488:	87 e0       	ldi	r24, 0x07	; 7
    a48a:	90 e0       	ldi	r25, 0x00	; 0
    a48c:	cd b7       	in	r28, 0x3d	; 61
    a48e:	de b7       	in	r29, 0x3e	; 62
    a490:	e8 e0       	ldi	r30, 0x08	; 8
    a492:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000a496 <dir_read>:
    a496:	a0 e0       	ldi	r26, 0x00	; 0
    a498:	b0 e0       	ldi	r27, 0x00	; 0
    a49a:	e1 e5       	ldi	r30, 0x51	; 81
    a49c:	f2 e5       	ldi	r31, 0x52	; 82
    a49e:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
    a4a2:	ec 01       	movw	r28, r24
    a4a4:	7b 01       	movw	r14, r22
    a4a6:	a8 80       	ld	r10, Y
    a4a8:	b9 80       	ldd	r11, Y+1	; 0x01
    a4aa:	dd 24       	eor	r13, r13
    a4ac:	da 94       	dec	r13
    a4ae:	1f ef       	ldi	r17, 0xFF	; 255
    a4b0:	84 e0       	ldi	r24, 0x04	; 4
    a4b2:	90 e0       	ldi	r25, 0x00	; 0
    a4b4:	fd e0       	ldi	r31, 0x0D	; 13
    a4b6:	cf 2e       	mov	r12, r31
    a4b8:	4e 89       	ldd	r20, Y+22	; 0x16
    a4ba:	5f 89       	ldd	r21, Y+23	; 0x17
    a4bc:	68 8d       	ldd	r22, Y+24	; 0x18
    a4be:	79 8d       	ldd	r23, Y+25	; 0x19
    a4c0:	41 15       	cp	r20, r1
    a4c2:	51 05       	cpc	r21, r1
    a4c4:	61 05       	cpc	r22, r1
    a4c6:	71 05       	cpc	r23, r1
    a4c8:	09 f4       	brne	.+2      	; 0xa4cc <dir_read+0x36>
    a4ca:	9a c0       	rjmp	.+308    	; 0xa600 <dir_read+0x16a>
    a4cc:	c5 01       	movw	r24, r10
    a4ce:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    a4d2:	00 97       	sbiw	r24, 0x00	; 0
    a4d4:	09 f0       	breq	.+2      	; 0xa4d8 <dir_read+0x42>
    a4d6:	96 c0       	rjmp	.+300    	; 0xa604 <dir_read+0x16e>
    a4d8:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a4da:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a4dc:	f4 01       	movw	r30, r8
    a4de:	00 81       	ld	r16, Z
    a4e0:	00 23       	and	r16, r16
    a4e2:	09 f4       	brne	.+2      	; 0xa4e6 <dir_read+0x50>
    a4e4:	97 c0       	rjmp	.+302    	; 0xa614 <dir_read+0x17e>
    a4e6:	83 85       	ldd	r24, Z+11	; 0x0b
    a4e8:	8f 73       	andi	r24, 0x3F	; 63
    a4ea:	8c 83       	std	Y+4, r24	; 0x04
    a4ec:	05 3e       	cpi	r16, 0xE5	; 229
    a4ee:	09 f4       	brne	.+2      	; 0xa4f2 <dir_read+0x5c>
    a4f0:	7e c0       	rjmp	.+252    	; 0xa5ee <dir_read+0x158>
    a4f2:	0e 32       	cpi	r16, 0x2E	; 46
    a4f4:	09 f4       	brne	.+2      	; 0xa4f8 <dir_read+0x62>
    a4f6:	7b c0       	rjmp	.+246    	; 0xa5ee <dir_read+0x158>
    a4f8:	21 e0       	ldi	r18, 0x01	; 1
    a4fa:	30 e0       	ldi	r19, 0x00	; 0
    a4fc:	98 2f       	mov	r25, r24
    a4fe:	9f 71       	andi	r25, 0x1F	; 31
    a500:	98 30       	cpi	r25, 0x08	; 8
    a502:	11 f0       	breq	.+4      	; 0xa508 <dir_read+0x72>
    a504:	20 e0       	ldi	r18, 0x00	; 0
    a506:	30 e0       	ldi	r19, 0x00	; 0
    a508:	2e 15       	cp	r18, r14
    a50a:	3f 05       	cpc	r19, r15
    a50c:	09 f0       	breq	.+2      	; 0xa510 <dir_read+0x7a>
    a50e:	6f c0       	rjmp	.+222    	; 0xa5ee <dir_read+0x158>
    a510:	8f 30       	cpi	r24, 0x0F	; 15
    a512:	09 f0       	breq	.+2      	; 0xa516 <dir_read+0x80>
    a514:	5c c0       	rjmp	.+184    	; 0xa5ce <dir_read+0x138>
    a516:	06 ff       	sbrs	r16, 6
    a518:	0c c0       	rjmp	.+24     	; 0xa532 <dir_read+0x9c>
    a51a:	f4 01       	movw	r30, r8
    a51c:	85 85       	ldd	r24, Z+13	; 0x0d
    a51e:	0f 7b       	andi	r16, 0xBF	; 191
    a520:	4e 85       	ldd	r20, Y+14	; 0x0e
    a522:	5f 85       	ldd	r21, Y+15	; 0x0f
    a524:	68 89       	ldd	r22, Y+16	; 0x10
    a526:	79 89       	ldd	r23, Y+17	; 0x11
    a528:	48 a7       	std	Y+40, r20	; 0x28
    a52a:	59 a7       	std	Y+41, r21	; 0x29
    a52c:	6a a7       	std	Y+42, r22	; 0x2a
    a52e:	7b a7       	std	Y+43, r23	; 0x2b
    a530:	03 c0       	rjmp	.+6      	; 0xa538 <dir_read+0xa2>
    a532:	10 13       	cpse	r17, r16
    a534:	5c c0       	rjmp	.+184    	; 0xa5ee <dir_read+0x158>
    a536:	8d 2d       	mov	r24, r13
    a538:	f4 01       	movw	r30, r8
    a53a:	d5 84       	ldd	r13, Z+13	; 0x0d
    a53c:	d8 12       	cpse	r13, r24
    a53e:	56 c0       	rjmp	.+172    	; 0xa5ec <dir_read+0x156>
    a540:	82 8d       	ldd	r24, Z+26	; 0x1a
    a542:	93 8d       	ldd	r25, Z+27	; 0x1b
    a544:	89 2b       	or	r24, r25
    a546:	09 f0       	breq	.+2      	; 0xa54a <dir_read+0xb4>
    a548:	52 c0       	rjmp	.+164    	; 0xa5ee <dir_read+0x158>
    a54a:	f5 01       	movw	r30, r10
    a54c:	63 85       	ldd	r22, Z+11	; 0x0b
    a54e:	74 85       	ldd	r23, Z+12	; 0x0c
    a550:	f4 01       	movw	r30, r8
    a552:	80 81       	ld	r24, Z
    a554:	90 e0       	ldi	r25, 0x00	; 0
    a556:	8f 7b       	andi	r24, 0xBF	; 191
    a558:	01 97       	sbiw	r24, 0x01	; 1
    a55a:	c8 9e       	mul	r12, r24
    a55c:	90 01       	movw	r18, r0
    a55e:	c9 9e       	mul	r12, r25
    a560:	30 0d       	add	r19, r0
    a562:	11 24       	eor	r1, r1
    a564:	ab ee       	ldi	r26, 0xEB	; 235
    a566:	b4 e0       	ldi	r27, 0x04	; 4
    a568:	81 e0       	ldi	r24, 0x01	; 1
    a56a:	90 e0       	ldi	r25, 0x00	; 0
    a56c:	4d 91       	ld	r20, X+
    a56e:	f4 01       	movw	r30, r8
    a570:	e4 0f       	add	r30, r20
    a572:	f1 1d       	adc	r31, r1
    a574:	40 81       	ld	r20, Z
    a576:	51 81       	ldd	r21, Z+1	; 0x01
    a578:	00 97       	sbiw	r24, 0x00	; 0
    a57a:	81 f0       	breq	.+32     	; 0xa59c <dir_read+0x106>
    a57c:	2f 3f       	cpi	r18, 0xFF	; 255
    a57e:	31 05       	cpc	r19, r1
    a580:	09 f0       	breq	.+2      	; 0xa584 <dir_read+0xee>
    a582:	a8 f5       	brcc	.+106    	; 0xa5ee <dir_read+0x158>
    a584:	c9 01       	movw	r24, r18
    a586:	88 0f       	add	r24, r24
    a588:	99 1f       	adc	r25, r25
    a58a:	86 0f       	add	r24, r22
    a58c:	97 1f       	adc	r25, r23
    a58e:	fc 01       	movw	r30, r24
    a590:	51 83       	std	Z+1, r21	; 0x01
    a592:	40 83       	st	Z, r20
    a594:	ca 01       	movw	r24, r20
    a596:	2f 5f       	subi	r18, 0xFF	; 255
    a598:	3f 4f       	sbci	r19, 0xFF	; 255
    a59a:	03 c0       	rjmp	.+6      	; 0xa5a2 <dir_read+0x10c>
    a59c:	4f 3f       	cpi	r20, 0xFF	; 255
    a59e:	5f 4f       	sbci	r21, 0xFF	; 255
    a5a0:	31 f5       	brne	.+76     	; 0xa5ee <dir_read+0x158>
    a5a2:	44 e0       	ldi	r20, 0x04	; 4
    a5a4:	a8 3f       	cpi	r26, 0xF8	; 248
    a5a6:	b4 07       	cpc	r27, r20
    a5a8:	09 f7       	brne	.-62     	; 0xa56c <dir_read+0xd6>
    a5aa:	f4 01       	movw	r30, r8
    a5ac:	40 81       	ld	r20, Z
    a5ae:	46 ff       	sbrs	r20, 6
    a5b0:	2e c0       	rjmp	.+92     	; 0xa60e <dir_read+0x178>
    a5b2:	89 2b       	or	r24, r25
    a5b4:	61 f1       	breq	.+88     	; 0xa60e <dir_read+0x178>
    a5b6:	2f 3f       	cpi	r18, 0xFF	; 255
    a5b8:	31 05       	cpc	r19, r1
    a5ba:	09 f0       	breq	.+2      	; 0xa5be <dir_read+0x128>
    a5bc:	c0 f4       	brcc	.+48     	; 0xa5ee <dir_read+0x158>
    a5be:	22 0f       	add	r18, r18
    a5c0:	33 1f       	adc	r19, r19
    a5c2:	fb 01       	movw	r30, r22
    a5c4:	e2 0f       	add	r30, r18
    a5c6:	f3 1f       	adc	r31, r19
    a5c8:	11 82       	std	Z+1, r1	; 0x01
    a5ca:	10 82       	st	Z, r1
    a5cc:	20 c0       	rjmp	.+64     	; 0xa60e <dir_read+0x178>
    a5ce:	11 11       	cpse	r17, r1
    a5d0:	05 c0       	rjmp	.+10     	; 0xa5dc <dir_read+0x146>
    a5d2:	c4 01       	movw	r24, r8
    a5d4:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <sum_sfn>
    a5d8:	d8 16       	cp	r13, r24
    a5da:	f9 f0       	breq	.+62     	; 0xa61a <dir_read+0x184>
    a5dc:	8f ef       	ldi	r24, 0xFF	; 255
    a5de:	9f ef       	ldi	r25, 0xFF	; 255
    a5e0:	dc 01       	movw	r26, r24
    a5e2:	88 a7       	std	Y+40, r24	; 0x28
    a5e4:	99 a7       	std	Y+41, r25	; 0x29
    a5e6:	aa a7       	std	Y+42, r26	; 0x2a
    a5e8:	bb a7       	std	Y+43, r27	; 0x2b
    a5ea:	17 c0       	rjmp	.+46     	; 0xa61a <dir_read+0x184>
    a5ec:	d8 2e       	mov	r13, r24
    a5ee:	1f ef       	ldi	r17, 0xFF	; 255
    a5f0:	60 e0       	ldi	r22, 0x00	; 0
    a5f2:	70 e0       	ldi	r23, 0x00	; 0
    a5f4:	ce 01       	movw	r24, r28
    a5f6:	2e de       	rcall	.-932    	; 0xa254 <dir_next>
    a5f8:	00 97       	sbiw	r24, 0x00	; 0
    a5fa:	09 f4       	brne	.+2      	; 0xa5fe <dir_read+0x168>
    a5fc:	5d cf       	rjmp	.-326    	; 0xa4b8 <dir_read+0x22>
    a5fe:	02 c0       	rjmp	.+4      	; 0xa604 <dir_read+0x16e>
    a600:	00 97       	sbiw	r24, 0x00	; 0
    a602:	59 f0       	breq	.+22     	; 0xa61a <dir_read+0x184>
    a604:	1e 8a       	std	Y+22, r1	; 0x16
    a606:	1f 8a       	std	Y+23, r1	; 0x17
    a608:	18 8e       	std	Y+24, r1	; 0x18
    a60a:	19 8e       	std	Y+25, r1	; 0x19
    a60c:	08 c0       	rjmp	.+16     	; 0xa61e <dir_read+0x188>
    a60e:	1f ef       	ldi	r17, 0xFF	; 255
    a610:	10 0f       	add	r17, r16
    a612:	ee cf       	rjmp	.-36     	; 0xa5f0 <dir_read+0x15a>
    a614:	84 e0       	ldi	r24, 0x04	; 4
    a616:	90 e0       	ldi	r25, 0x00	; 0
    a618:	f5 cf       	rjmp	.-22     	; 0xa604 <dir_read+0x16e>
    a61a:	80 e0       	ldi	r24, 0x00	; 0
    a61c:	90 e0       	ldi	r25, 0x00	; 0
    a61e:	cd b7       	in	r28, 0x3d	; 61
    a620:	de b7       	in	r29, 0x3e	; 62
    a622:	ec e0       	ldi	r30, 0x0C	; 12
    a624:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

0000a628 <dir_remove>:
    a628:	a0 e0       	ldi	r26, 0x00	; 0
    a62a:	b0 e0       	ldi	r27, 0x00	; 0
    a62c:	ea e1       	ldi	r30, 0x1A	; 26
    a62e:	f3 e5       	ldi	r31, 0x53	; 83
    a630:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
    a634:	ec 01       	movw	r28, r24
    a636:	08 81       	ld	r16, Y
    a638:	19 81       	ldd	r17, Y+1	; 0x01
    a63a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a63c:	df 84       	ldd	r13, Y+15	; 0x0f
    a63e:	e8 88       	ldd	r14, Y+16	; 0x10
    a640:	f9 88       	ldd	r15, Y+17	; 0x11
    a642:	48 a5       	ldd	r20, Y+40	; 0x28
    a644:	59 a5       	ldd	r21, Y+41	; 0x29
    a646:	6a a5       	ldd	r22, Y+42	; 0x2a
    a648:	7b a5       	ldd	r23, Y+43	; 0x2b
    a64a:	4f 3f       	cpi	r20, 0xFF	; 255
    a64c:	8f ef       	ldi	r24, 0xFF	; 255
    a64e:	58 07       	cpc	r21, r24
    a650:	68 07       	cpc	r22, r24
    a652:	78 07       	cpc	r23, r24
    a654:	29 f4       	brne	.+10     	; 0xa660 <dir_remove+0x38>
    a656:	85 ee       	ldi	r24, 0xE5	; 229
    a658:	b8 2e       	mov	r11, r24
    a65a:	aa 24       	eor	r10, r10
    a65c:	a3 94       	inc	r10
    a65e:	19 c0       	rjmp	.+50     	; 0xa692 <dir_remove+0x6a>
    a660:	ce 01       	movw	r24, r28
    a662:	80 db       	rcall	.-2304   	; 0x9d64 <dir_sdi>
    a664:	00 97       	sbiw	r24, 0x00	; 0
    a666:	19 f5       	brne	.+70     	; 0xa6ae <dir_remove+0x86>
    a668:	f6 cf       	rjmp	.-20     	; 0xa656 <dir_remove+0x2e>
    a66a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a66c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a66e:	b0 82       	st	Z, r11
    a670:	f8 01       	movw	r30, r16
    a672:	a3 82       	std	Z+3, r10	; 0x03
    a674:	4e 85       	ldd	r20, Y+14	; 0x0e
    a676:	5f 85       	ldd	r21, Y+15	; 0x0f
    a678:	68 89       	ldd	r22, Y+16	; 0x10
    a67a:	79 89       	ldd	r23, Y+17	; 0x11
    a67c:	4c 15       	cp	r20, r12
    a67e:	5d 05       	cpc	r21, r13
    a680:	6e 05       	cpc	r22, r14
    a682:	7f 05       	cpc	r23, r15
    a684:	a0 f4       	brcc	.+40     	; 0xa6ae <dir_remove+0x86>
    a686:	60 e0       	ldi	r22, 0x00	; 0
    a688:	70 e0       	ldi	r23, 0x00	; 0
    a68a:	ce 01       	movw	r24, r28
    a68c:	e3 dd       	rcall	.-1082   	; 0xa254 <dir_next>
    a68e:	00 97       	sbiw	r24, 0x00	; 0
    a690:	49 f4       	brne	.+18     	; 0xa6a4 <dir_remove+0x7c>
    a692:	4e 89       	ldd	r20, Y+22	; 0x16
    a694:	5f 89       	ldd	r21, Y+23	; 0x17
    a696:	68 8d       	ldd	r22, Y+24	; 0x18
    a698:	79 8d       	ldd	r23, Y+25	; 0x19
    a69a:	c8 01       	movw	r24, r16
    a69c:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    a6a0:	00 97       	sbiw	r24, 0x00	; 0
    a6a2:	19 f3       	breq	.-58     	; 0xa66a <dir_remove+0x42>
    a6a4:	84 30       	cpi	r24, 0x04	; 4
    a6a6:	91 05       	cpc	r25, r1
    a6a8:	11 f4       	brne	.+4      	; 0xa6ae <dir_remove+0x86>
    a6aa:	82 e0       	ldi	r24, 0x02	; 2
    a6ac:	90 e0       	ldi	r25, 0x00	; 0
    a6ae:	cd b7       	in	r28, 0x3d	; 61
    a6b0:	de b7       	in	r29, 0x3e	; 62
    a6b2:	ea e0       	ldi	r30, 0x0A	; 10
    a6b4:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

0000a6b8 <dir_find>:
    a6b8:	ac e0       	ldi	r26, 0x0C	; 12
    a6ba:	b0 e0       	ldi	r27, 0x00	; 0
    a6bc:	e2 e6       	ldi	r30, 0x62	; 98
    a6be:	f3 e5       	ldi	r31, 0x53	; 83
    a6c0:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    a6c4:	9c 87       	std	Y+12, r25	; 0x0c
    a6c6:	8b 87       	std	Y+11, r24	; 0x0b
    a6c8:	fc 01       	movw	r30, r24
    a6ca:	01 90       	ld	r0, Z+
    a6cc:	f0 81       	ld	r31, Z
    a6ce:	e0 2d       	mov	r30, r0
    a6d0:	fc 83       	std	Y+4, r31	; 0x04
    a6d2:	eb 83       	std	Y+3, r30	; 0x03
    a6d4:	40 e0       	ldi	r20, 0x00	; 0
    a6d6:	50 e0       	ldi	r21, 0x00	; 0
    a6d8:	ba 01       	movw	r22, r20
    a6da:	44 db       	rcall	.-2424   	; 0x9d64 <dir_sdi>
    a6dc:	00 97       	sbiw	r24, 0x00	; 0
    a6de:	09 f0       	breq	.+2      	; 0xa6e2 <dir_find+0x2a>
    a6e0:	e7 c0       	rjmp	.+462    	; 0xa8b0 <dir_find+0x1f8>
    a6e2:	8f ef       	ldi	r24, 0xFF	; 255
    a6e4:	9f ef       	ldi	r25, 0xFF	; 255
    a6e6:	dc 01       	movw	r26, r24
    a6e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    a6ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    a6ec:	80 a7       	std	Z+40, r24	; 0x28
    a6ee:	91 a7       	std	Z+41, r25	; 0x29
    a6f0:	a2 a7       	std	Z+42, r26	; 0x2a
    a6f2:	b3 a7       	std	Z+43, r27	; 0x2b
    a6f4:	0f ef       	ldi	r16, 0xFF	; 255
    a6f6:	1f ef       	ldi	r17, 0xFF	; 255
    a6f8:	44 24       	eor	r4, r4
    a6fa:	4a 94       	dec	r4
    a6fc:	54 2c       	mov	r5, r4
    a6fe:	32 01       	movw	r6, r4
    a700:	7c 96       	adiw	r30, 0x1c	; 28
    a702:	fa 87       	std	Y+10, r31	; 0x0a
    a704:	e9 87       	std	Y+9, r30	; 0x09
    a706:	eb 85       	ldd	r30, Y+11	; 0x0b
    a708:	fc 85       	ldd	r31, Y+12	; 0x0c
    a70a:	46 89       	ldd	r20, Z+22	; 0x16
    a70c:	57 89       	ldd	r21, Z+23	; 0x17
    a70e:	60 8d       	ldd	r22, Z+24	; 0x18
    a710:	71 8d       	ldd	r23, Z+25	; 0x19
    a712:	8b 81       	ldd	r24, Y+3	; 0x03
    a714:	9c 81       	ldd	r25, Y+4	; 0x04
    a716:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    a71a:	00 97       	sbiw	r24, 0x00	; 0
    a71c:	09 f0       	breq	.+2      	; 0xa720 <dir_find+0x68>
    a71e:	c8 c0       	rjmp	.+400    	; 0xa8b0 <dir_find+0x1f8>
    a720:	eb 85       	ldd	r30, Y+11	; 0x0b
    a722:	fc 85       	ldd	r31, Y+12	; 0x0c
    a724:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a726:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a728:	f7 01       	movw	r30, r14
    a72a:	d0 80       	ld	r13, Z
    a72c:	dd 20       	and	r13, r13
    a72e:	09 f4       	brne	.+2      	; 0xa732 <dir_find+0x7a>
    a730:	c1 c0       	rjmp	.+386    	; 0xa8b4 <dir_find+0x1fc>
    a732:	93 85       	ldd	r25, Z+11	; 0x0b
    a734:	89 2f       	mov	r24, r25
    a736:	8f 73       	andi	r24, 0x3F	; 63
    a738:	eb 85       	ldd	r30, Y+11	; 0x0b
    a73a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a73c:	84 83       	std	Z+4, r24	; 0x04
    a73e:	f5 ee       	ldi	r31, 0xE5	; 229
    a740:	df 16       	cp	r13, r31
    a742:	09 f4       	brne	.+2      	; 0xa746 <dir_find+0x8e>
    a744:	a6 c0       	rjmp	.+332    	; 0xa892 <dir_find+0x1da>
    a746:	93 ff       	sbrs	r25, 3
    a748:	04 c0       	rjmp	.+8      	; 0xa752 <dir_find+0x9a>
    a74a:	8f 30       	cpi	r24, 0x0F	; 15
    a74c:	09 f0       	breq	.+2      	; 0xa750 <dir_find+0x98>
    a74e:	a1 c0       	rjmp	.+322    	; 0xa892 <dir_find+0x1da>
    a750:	03 c0       	rjmp	.+6      	; 0xa758 <dir_find+0xa0>
    a752:	8f 30       	cpi	r24, 0x0F	; 15
    a754:	09 f0       	breq	.+2      	; 0xa758 <dir_find+0xa0>
    a756:	88 c0       	rjmp	.+272    	; 0xa868 <dir_find+0x1b0>
    a758:	eb 85       	ldd	r30, Y+11	; 0x0b
    a75a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a75c:	87 a1       	ldd	r24, Z+39	; 0x27
    a75e:	86 fd       	sbrc	r24, 6
    a760:	9f c0       	rjmp	.+318    	; 0xa8a0 <dir_find+0x1e8>
    a762:	d6 fe       	sbrs	r13, 6
    a764:	10 c0       	rjmp	.+32     	; 0xa786 <dir_find+0xce>
    a766:	f7 01       	movw	r30, r14
    a768:	05 85       	ldd	r16, Z+13	; 0x0d
    a76a:	fd 2d       	mov	r31, r13
    a76c:	ff 7b       	andi	r31, 0xBF	; 191
    a76e:	df 2e       	mov	r13, r31
    a770:	eb 85       	ldd	r30, Y+11	; 0x0b
    a772:	fc 85       	ldd	r31, Y+12	; 0x0c
    a774:	86 85       	ldd	r24, Z+14	; 0x0e
    a776:	97 85       	ldd	r25, Z+15	; 0x0f
    a778:	a0 89       	ldd	r26, Z+16	; 0x10
    a77a:	b1 89       	ldd	r27, Z+17	; 0x11
    a77c:	80 a7       	std	Z+40, r24	; 0x28
    a77e:	91 a7       	std	Z+41, r25	; 0x29
    a780:	a2 a7       	std	Z+42, r26	; 0x2a
    a782:	b3 a7       	std	Z+43, r27	; 0x2b
    a784:	02 c0       	rjmp	.+4      	; 0xa78a <dir_find+0xd2>
    a786:	1d 11       	cpse	r17, r13
    a788:	8a c0       	rjmp	.+276    	; 0xa89e <dir_find+0x1e6>
    a78a:	f7 01       	movw	r30, r14
    a78c:	c5 84       	ldd	r12, Z+13	; 0x0d
    a78e:	c0 12       	cpse	r12, r16
    a790:	86 c0       	rjmp	.+268    	; 0xa89e <dir_find+0x1e6>
    a792:	82 8d       	ldd	r24, Z+26	; 0x1a
    a794:	93 8d       	ldd	r25, Z+27	; 0x1b
    a796:	89 2b       	or	r24, r25
    a798:	09 f0       	breq	.+2      	; 0xa79c <dir_find+0xe4>
    a79a:	91 c0       	rjmp	.+290    	; 0xa8be <dir_find+0x206>
    a79c:	eb 81       	ldd	r30, Y+3	; 0x03
    a79e:	fc 81       	ldd	r31, Y+4	; 0x04
    a7a0:	03 84       	ldd	r0, Z+11	; 0x0b
    a7a2:	f4 85       	ldd	r31, Z+12	; 0x0c
    a7a4:	e0 2d       	mov	r30, r0
    a7a6:	fe 83       	std	Y+6, r31	; 0x06
    a7a8:	ed 83       	std	Y+5, r30	; 0x05
    a7aa:	f7 01       	movw	r30, r14
    a7ac:	80 81       	ld	r24, Z
    a7ae:	8f 73       	andi	r24, 0x3F	; 63
    a7b0:	90 e0       	ldi	r25, 0x00	; 0
    a7b2:	01 97       	sbiw	r24, 0x01	; 1
    a7b4:	fd e0       	ldi	r31, 0x0D	; 13
    a7b6:	f8 9f       	mul	r31, r24
    a7b8:	80 01       	movw	r16, r0
    a7ba:	f9 9f       	mul	r31, r25
    a7bc:	10 0d       	add	r17, r0
    a7be:	11 24       	eor	r1, r1
    a7c0:	2b ee       	ldi	r18, 0xEB	; 235
    a7c2:	34 e0       	ldi	r19, 0x04	; 4
    a7c4:	3a 83       	std	Y+2, r19	; 0x02
    a7c6:	29 83       	std	Y+1, r18	; 0x01
    a7c8:	81 e0       	ldi	r24, 0x01	; 1
    a7ca:	90 e0       	ldi	r25, 0x00	; 0
    a7cc:	e9 81       	ldd	r30, Y+1	; 0x01
    a7ce:	fa 81       	ldd	r31, Y+2	; 0x02
    a7d0:	21 91       	ld	r18, Z+
    a7d2:	fa 83       	std	Y+2, r31	; 0x02
    a7d4:	e9 83       	std	Y+1, r30	; 0x01
    a7d6:	f7 01       	movw	r30, r14
    a7d8:	e2 0f       	add	r30, r18
    a7da:	f1 1d       	adc	r31, r1
    a7dc:	20 80       	ld	r2, Z
    a7de:	31 80       	ldd	r3, Z+1	; 0x01
    a7e0:	00 97       	sbiw	r24, 0x00	; 0
    a7e2:	39 f1       	breq	.+78     	; 0xa832 <dir_find+0x17a>
    a7e4:	0f 3f       	cpi	r16, 0xFF	; 255
    a7e6:	11 05       	cpc	r17, r1
    a7e8:	11 f0       	breq	.+4      	; 0xa7ee <dir_find+0x136>
    a7ea:	08 f0       	brcs	.+2      	; 0xa7ee <dir_find+0x136>
    a7ec:	68 c0       	rjmp	.+208    	; 0xa8be <dir_find+0x206>
    a7ee:	b1 01       	movw	r22, r2
    a7f0:	80 e0       	ldi	r24, 0x00	; 0
    a7f2:	90 e0       	ldi	r25, 0x00	; 0
    a7f4:	0e 94 09 68 	call	0xd012	; 0xd012 <ff_wtoupper>
    a7f8:	4b 01       	movw	r8, r22
    a7fa:	5c 01       	movw	r10, r24
    a7fc:	98 01       	movw	r18, r16
    a7fe:	2f 5f       	subi	r18, 0xFF	; 255
    a800:	3f 4f       	sbci	r19, 0xFF	; 255
    a802:	38 87       	std	Y+8, r19	; 0x08
    a804:	2f 83       	std	Y+7, r18	; 0x07
    a806:	00 0f       	add	r16, r16
    a808:	11 1f       	adc	r17, r17
    a80a:	ed 81       	ldd	r30, Y+5	; 0x05
    a80c:	fe 81       	ldd	r31, Y+6	; 0x06
    a80e:	e0 0f       	add	r30, r16
    a810:	f1 1f       	adc	r31, r17
    a812:	60 81       	ld	r22, Z
    a814:	71 81       	ldd	r23, Z+1	; 0x01
    a816:	80 e0       	ldi	r24, 0x00	; 0
    a818:	90 e0       	ldi	r25, 0x00	; 0
    a81a:	0e 94 09 68 	call	0xd012	; 0xd012 <ff_wtoupper>
    a81e:	86 16       	cp	r8, r22
    a820:	97 06       	cpc	r9, r23
    a822:	a8 06       	cpc	r10, r24
    a824:	b9 06       	cpc	r11, r25
    a826:	09 f0       	breq	.+2      	; 0xa82a <dir_find+0x172>
    a828:	4a c0       	rjmp	.+148    	; 0xa8be <dir_find+0x206>
    a82a:	c1 01       	movw	r24, r2
    a82c:	0f 81       	ldd	r16, Y+7	; 0x07
    a82e:	18 85       	ldd	r17, Y+8	; 0x08
    a830:	05 c0       	rjmp	.+10     	; 0xa83c <dir_find+0x184>
    a832:	3f ef       	ldi	r19, 0xFF	; 255
    a834:	23 16       	cp	r2, r19
    a836:	33 06       	cpc	r3, r19
    a838:	09 f0       	breq	.+2      	; 0xa83c <dir_find+0x184>
    a83a:	41 c0       	rjmp	.+130    	; 0xa8be <dir_find+0x206>
    a83c:	e9 81       	ldd	r30, Y+1	; 0x01
    a83e:	fa 81       	ldd	r31, Y+2	; 0x02
    a840:	e8 5f       	subi	r30, 0xF8	; 248
    a842:	f4 40       	sbci	r31, 0x04	; 4
    a844:	19 f6       	brne	.-122    	; 0xa7cc <dir_find+0x114>
    a846:	f7 01       	movw	r30, r14
    a848:	20 81       	ld	r18, Z
    a84a:	26 ff       	sbrs	r18, 6
    a84c:	3a c0       	rjmp	.+116    	; 0xa8c2 <dir_find+0x20a>
    a84e:	89 2b       	or	r24, r25
    a850:	c1 f1       	breq	.+112    	; 0xa8c2 <dir_find+0x20a>
    a852:	00 0f       	add	r16, r16
    a854:	11 1f       	adc	r17, r17
    a856:	ed 81       	ldd	r30, Y+5	; 0x05
    a858:	fe 81       	ldd	r31, Y+6	; 0x06
    a85a:	e0 0f       	add	r30, r16
    a85c:	f1 1f       	adc	r31, r17
    a85e:	80 81       	ld	r24, Z
    a860:	91 81       	ldd	r25, Z+1	; 0x01
    a862:	89 2b       	or	r24, r25
    a864:	71 f1       	breq	.+92     	; 0xa8c2 <dir_find+0x20a>
    a866:	2b c0       	rjmp	.+86     	; 0xa8be <dir_find+0x206>
    a868:	11 11       	cpse	r17, r1
    a86a:	05 c0       	rjmp	.+10     	; 0xa876 <dir_find+0x1be>
    a86c:	c7 01       	movw	r24, r14
    a86e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <sum_sfn>
    a872:	08 17       	cp	r16, r24
    a874:	09 f1       	breq	.+66     	; 0xa8b8 <dir_find+0x200>
    a876:	eb 85       	ldd	r30, Y+11	; 0x0b
    a878:	fc 85       	ldd	r31, Y+12	; 0x0c
    a87a:	87 a1       	ldd	r24, Z+39	; 0x27
    a87c:	80 fd       	sbrc	r24, 0
    a87e:	09 c0       	rjmp	.+18     	; 0xa892 <dir_find+0x1da>
    a880:	4b e0       	ldi	r20, 0x0B	; 11
    a882:	50 e0       	ldi	r21, 0x00	; 0
    a884:	69 85       	ldd	r22, Y+9	; 0x09
    a886:	7a 85       	ldd	r23, Y+10	; 0x0a
    a888:	c7 01       	movw	r24, r14
    a88a:	0e 94 77 45 	call	0x8aee	; 0x8aee <mem_cmp>
    a88e:	89 2b       	or	r24, r25
    a890:	99 f0       	breq	.+38     	; 0xa8b8 <dir_find+0x200>
    a892:	eb 85       	ldd	r30, Y+11	; 0x0b
    a894:	fc 85       	ldd	r31, Y+12	; 0x0c
    a896:	40 a6       	std	Z+40, r4	; 0x28
    a898:	51 a6       	std	Z+41, r5	; 0x29
    a89a:	62 a6       	std	Z+42, r6	; 0x2a
    a89c:	73 a6       	std	Z+43, r7	; 0x2b
    a89e:	1f ef       	ldi	r17, 0xFF	; 255
    a8a0:	60 e0       	ldi	r22, 0x00	; 0
    a8a2:	70 e0       	ldi	r23, 0x00	; 0
    a8a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    a8a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    a8a8:	d5 dc       	rcall	.-1622   	; 0xa254 <dir_next>
    a8aa:	00 97       	sbiw	r24, 0x00	; 0
    a8ac:	09 f4       	brne	.+2      	; 0xa8b0 <dir_find+0x1f8>
    a8ae:	2b cf       	rjmp	.-426    	; 0xa706 <dir_find+0x4e>
    a8b0:	28 2f       	mov	r18, r24
    a8b2:	0b c0       	rjmp	.+22     	; 0xa8ca <dir_find+0x212>
    a8b4:	24 e0       	ldi	r18, 0x04	; 4
    a8b6:	01 c0       	rjmp	.+2      	; 0xa8ba <dir_find+0x202>
    a8b8:	20 e0       	ldi	r18, 0x00	; 0
    a8ba:	90 e0       	ldi	r25, 0x00	; 0
    a8bc:	06 c0       	rjmp	.+12     	; 0xa8ca <dir_find+0x212>
    a8be:	0c 2d       	mov	r16, r12
    a8c0:	ee cf       	rjmp	.-36     	; 0xa89e <dir_find+0x1e6>
    a8c2:	1f ef       	ldi	r17, 0xFF	; 255
    a8c4:	1d 0d       	add	r17, r13
    a8c6:	0c 2d       	mov	r16, r12
    a8c8:	eb cf       	rjmp	.-42     	; 0xa8a0 <dir_find+0x1e8>
    a8ca:	82 2f       	mov	r24, r18
    a8cc:	2c 96       	adiw	r28, 0x0c	; 12
    a8ce:	e2 e1       	ldi	r30, 0x12	; 18
    a8d0:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000a8d4 <dir_register>:
    a8d4:	a6 e1       	ldi	r26, 0x16	; 22
    a8d6:	b0 e0       	ldi	r27, 0x00	; 0
    a8d8:	e0 e7       	ldi	r30, 0x70	; 112
    a8da:	f4 e5       	ldi	r31, 0x54	; 84
    a8dc:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    a8e0:	fc 01       	movw	r30, r24
    a8e2:	27 a1       	ldd	r18, Z+39	; 0x27
    a8e4:	20 7a       	andi	r18, 0xA0	; 160
    a8e6:	09 f0       	breq	.+2      	; 0xa8ea <dir_register+0x16>
    a8e8:	53 c1       	rjmp	.+678    	; 0xab90 <dir_register+0x2bc>
    a8ea:	c0 80       	ld	r12, Z
    a8ec:	d1 80       	ldd	r13, Z+1	; 0x01
    a8ee:	f6 01       	movw	r30, r12
    a8f0:	a3 85       	ldd	r26, Z+11	; 0x0b
    a8f2:	b4 85       	ldd	r27, Z+12	; 0x0c
    a8f4:	81 2c       	mov	r8, r1
    a8f6:	91 2c       	mov	r9, r1
    a8f8:	2d 91       	ld	r18, X+
    a8fa:	3d 91       	ld	r19, X+
    a8fc:	23 2b       	or	r18, r19
    a8fe:	21 f0       	breq	.+8      	; 0xa908 <dir_register+0x34>
    a900:	ff ef       	ldi	r31, 0xFF	; 255
    a902:	8f 1a       	sub	r8, r31
    a904:	9f 0a       	sbc	r9, r31
    a906:	f8 cf       	rjmp	.-16     	; 0xa8f8 <dir_register+0x24>
    a908:	8c 01       	movw	r16, r24
    a90a:	5c 01       	movw	r10, r24
    a90c:	2c e1       	ldi	r18, 0x1C	; 28
    a90e:	a2 0e       	add	r10, r18
    a910:	b1 1c       	adc	r11, r1
    a912:	4c e0       	ldi	r20, 0x0C	; 12
    a914:	50 e0       	ldi	r21, 0x00	; 0
    a916:	b5 01       	movw	r22, r10
    a918:	ce 01       	movw	r24, r28
    a91a:	01 96       	adiw	r24, 0x01	; 1
    a91c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    a920:	8c 85       	ldd	r24, Y+12	; 0x0c
    a922:	80 ff       	sbrs	r24, 0
    a924:	94 c0       	rjmp	.+296    	; 0xaa4e <dir_register+0x17a>
    a926:	80 e4       	ldi	r24, 0x40	; 64
    a928:	f8 01       	movw	r30, r16
    a92a:	87 a3       	std	Z+39, r24	; 0x27
    a92c:	41 2c       	mov	r4, r1
    a92e:	51 2c       	mov	r5, r1
    a930:	32 01       	movw	r6, r4
    a932:	43 94       	inc	r4
    a934:	72 01       	movw	r14, r4
    a936:	f6 01       	movw	r30, r12
    a938:	23 84       	ldd	r2, Z+11	; 0x0b
    a93a:	34 84       	ldd	r3, Z+12	; 0x0c
    a93c:	4b e0       	ldi	r20, 0x0B	; 11
    a93e:	50 e0       	ldi	r21, 0x00	; 0
    a940:	be 01       	movw	r22, r28
    a942:	6f 5f       	subi	r22, 0xFF	; 255
    a944:	7f 4f       	sbci	r23, 0xFF	; 255
    a946:	c5 01       	movw	r24, r10
    a948:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    a94c:	f6 e0       	ldi	r31, 0x06	; 6
    a94e:	4f 16       	cp	r4, r31
    a950:	51 04       	cpc	r5, r1
    a952:	18 f1       	brcs	.+70     	; 0xa99a <dir_register+0xc6>
    a954:	f1 01       	movw	r30, r2
    a956:	b3 01       	movw	r22, r6
    a958:	a2 01       	movw	r20, r4
    a95a:	81 91       	ld	r24, Z+
    a95c:	91 91       	ld	r25, Z+
    a95e:	00 97       	sbiw	r24, 0x00	; 0
    a960:	d9 f0       	breq	.+54     	; 0xa998 <dir_register+0xc4>
    a962:	20 e1       	ldi	r18, 0x10	; 16
    a964:	30 e0       	ldi	r19, 0x00	; 0
    a966:	44 0f       	add	r20, r20
    a968:	55 1f       	adc	r21, r21
    a96a:	66 1f       	adc	r22, r22
    a96c:	77 1f       	adc	r23, r23
    a96e:	dc 01       	movw	r26, r24
    a970:	a1 70       	andi	r26, 0x01	; 1
    a972:	bb 27       	eor	r27, r27
    a974:	4a 0f       	add	r20, r26
    a976:	5b 1f       	adc	r21, r27
    a978:	61 1d       	adc	r22, r1
    a97a:	71 1d       	adc	r23, r1
    a97c:	96 95       	lsr	r25
    a97e:	87 95       	ror	r24
    a980:	60 ff       	sbrs	r22, 0
    a982:	06 c0       	rjmp	.+12     	; 0xa990 <dir_register+0xbc>
    a984:	a1 e2       	ldi	r26, 0x21	; 33
    a986:	4a 27       	eor	r20, r26
    a988:	a0 e1       	ldi	r26, 0x10	; 16
    a98a:	5a 27       	eor	r21, r26
    a98c:	a1 e0       	ldi	r26, 0x01	; 1
    a98e:	6a 27       	eor	r22, r26
    a990:	21 50       	subi	r18, 0x01	; 1
    a992:	31 09       	sbc	r19, r1
    a994:	41 f7       	brne	.-48     	; 0xa966 <dir_register+0x92>
    a996:	e1 cf       	rjmp	.-62     	; 0xa95a <dir_register+0x86>
    a998:	7a 01       	movw	r14, r20
    a99a:	fe 01       	movw	r30, r28
    a99c:	75 96       	adiw	r30, 0x15	; 21
    a99e:	27 e0       	ldi	r18, 0x07	; 7
    a9a0:	30 e0       	ldi	r19, 0x00	; 0
    a9a2:	9e 2d       	mov	r25, r14
    a9a4:	9f 70       	andi	r25, 0x0F	; 15
    a9a6:	80 e3       	ldi	r24, 0x30	; 48
    a9a8:	89 0f       	add	r24, r25
    a9aa:	8a 33       	cpi	r24, 0x3A	; 58
    a9ac:	10 f0       	brcs	.+4      	; 0xa9b2 <dir_register+0xde>
    a9ae:	87 e3       	ldi	r24, 0x37	; 55
    a9b0:	89 0f       	add	r24, r25
    a9b2:	21 50       	subi	r18, 0x01	; 1
    a9b4:	31 09       	sbc	r19, r1
    a9b6:	82 93       	st	-Z, r24
    a9b8:	a4 e0       	ldi	r26, 0x04	; 4
    a9ba:	f6 94       	lsr	r15
    a9bc:	e7 94       	ror	r14
    a9be:	aa 95       	dec	r26
    a9c0:	e1 f7       	brne	.-8      	; 0xa9ba <dir_register+0xe6>
    a9c2:	e1 14       	cp	r14, r1
    a9c4:	f1 04       	cpc	r15, r1
    a9c6:	69 f7       	brne	.-38     	; 0xa9a2 <dir_register+0xce>
    a9c8:	ed e0       	ldi	r30, 0x0D	; 13
    a9ca:	f0 e0       	ldi	r31, 0x00	; 0
    a9cc:	ec 0f       	add	r30, r28
    a9ce:	fd 1f       	adc	r31, r29
    a9d0:	e2 0f       	add	r30, r18
    a9d2:	f3 1f       	adc	r31, r19
    a9d4:	4e e7       	ldi	r20, 0x7E	; 126
    a9d6:	40 83       	st	Z, r20
    a9d8:	f5 01       	movw	r30, r10
    a9da:	80 e0       	ldi	r24, 0x00	; 0
    a9dc:	90 e0       	ldi	r25, 0x00	; 0
    a9de:	28 17       	cp	r18, r24
    a9e0:	39 07       	cpc	r19, r25
    a9e2:	29 f0       	breq	.+10     	; 0xa9ee <dir_register+0x11a>
    a9e4:	41 91       	ld	r20, Z+
    a9e6:	40 32       	cpi	r20, 0x20	; 32
    a9e8:	11 f0       	breq	.+4      	; 0xa9ee <dir_register+0x11a>
    a9ea:	01 96       	adiw	r24, 0x01	; 1
    a9ec:	f8 cf       	rjmp	.-16     	; 0xa9de <dir_register+0x10a>
    a9ee:	f5 01       	movw	r30, r10
    a9f0:	e8 0f       	add	r30, r24
    a9f2:	f9 1f       	adc	r31, r25
    a9f4:	28 30       	cpi	r18, 0x08	; 8
    a9f6:	31 05       	cpc	r19, r1
    a9f8:	50 f4       	brcc	.+20     	; 0xaa0e <dir_register+0x13a>
    a9fa:	ad e0       	ldi	r26, 0x0D	; 13
    a9fc:	b0 e0       	ldi	r27, 0x00	; 0
    a9fe:	ac 0f       	add	r26, r28
    aa00:	bd 1f       	adc	r27, r29
    aa02:	a2 0f       	add	r26, r18
    aa04:	b3 1f       	adc	r27, r19
    aa06:	8c 91       	ld	r24, X
    aa08:	2f 5f       	subi	r18, 0xFF	; 255
    aa0a:	3f 4f       	sbci	r19, 0xFF	; 255
    aa0c:	01 c0       	rjmp	.+2      	; 0xaa10 <dir_register+0x13c>
    aa0e:	80 e2       	ldi	r24, 0x20	; 32
    aa10:	81 93       	st	Z+, r24
    aa12:	cf 01       	movw	r24, r30
    aa14:	8a 19       	sub	r24, r10
    aa16:	9b 09       	sbc	r25, r11
    aa18:	08 97       	sbiw	r24, 0x08	; 8
    aa1a:	60 f3       	brcs	.-40     	; 0xa9f4 <dir_register+0x120>
    aa1c:	c8 01       	movw	r24, r16
    aa1e:	4c de       	rcall	.-872    	; 0xa6b8 <dir_find>
    aa20:	00 97       	sbiw	r24, 0x00	; 0
    aa22:	71 f4       	brne	.+28     	; 0xaa40 <dir_register+0x16c>
    aa24:	8f ef       	ldi	r24, 0xFF	; 255
    aa26:	48 1a       	sub	r4, r24
    aa28:	58 0a       	sbc	r5, r24
    aa2a:	68 0a       	sbc	r6, r24
    aa2c:	78 0a       	sbc	r7, r24
    aa2e:	94 e6       	ldi	r25, 0x64	; 100
    aa30:	49 16       	cp	r4, r25
    aa32:	51 04       	cpc	r5, r1
    aa34:	61 04       	cpc	r6, r1
    aa36:	71 04       	cpc	r7, r1
    aa38:	09 f0       	breq	.+2      	; 0xaa3c <dir_register+0x168>
    aa3a:	7c cf       	rjmp	.-264    	; 0xa934 <dir_register+0x60>
    aa3c:	27 e0       	ldi	r18, 0x07	; 7
    aa3e:	a9 c0       	rjmp	.+338    	; 0xab92 <dir_register+0x2be>
    aa40:	84 30       	cpi	r24, 0x04	; 4
    aa42:	91 05       	cpc	r25, r1
    aa44:	09 f0       	breq	.+2      	; 0xaa48 <dir_register+0x174>
    aa46:	ce c0       	rjmp	.+412    	; 0xabe4 <dir_register+0x310>
    aa48:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa4a:	f8 01       	movw	r30, r16
    aa4c:	87 a3       	std	Z+39, r24	; 0x27
    aa4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa50:	81 ff       	sbrs	r24, 1
    aa52:	0b c0       	rjmp	.+22     	; 0xaa6a <dir_register+0x196>
    aa54:	c4 01       	movw	r24, r8
    aa56:	0c 96       	adiw	r24, 0x0c	; 12
    aa58:	6d e0       	ldi	r22, 0x0D	; 13
    aa5a:	70 e0       	ldi	r23, 0x00	; 0
    aa5c:	0e 94 c4 e1 	call	0x1c388	; 0x1c388 <__udivmodhi4>
    aa60:	7b 01       	movw	r14, r22
    aa62:	ff ef       	ldi	r31, 0xFF	; 255
    aa64:	ef 1a       	sub	r14, r31
    aa66:	ff 0a       	sbc	r15, r31
    aa68:	03 c0       	rjmp	.+6      	; 0xaa70 <dir_register+0x19c>
    aa6a:	ee 24       	eor	r14, r14
    aa6c:	e3 94       	inc	r14
    aa6e:	f1 2c       	mov	r15, r1
    aa70:	b7 01       	movw	r22, r14
    aa72:	c8 01       	movw	r24, r16
    aa74:	d7 dc       	rcall	.-1618   	; 0xa424 <dir_alloc>
    aa76:	00 97       	sbiw	r24, 0x00	; 0
    aa78:	09 f0       	breq	.+2      	; 0xaa7c <dir_register+0x1a8>
    aa7a:	b4 c0       	rjmp	.+360    	; 0xabe4 <dir_register+0x310>
    aa7c:	21 e0       	ldi	r18, 0x01	; 1
    aa7e:	e2 1a       	sub	r14, r18
    aa80:	f1 08       	sbc	r15, r1
    aa82:	09 f4       	brne	.+2      	; 0xaa86 <dir_register+0x1b2>
    aa84:	88 c0       	rjmp	.+272    	; 0xab96 <dir_register+0x2c2>
    aa86:	f8 01       	movw	r30, r16
    aa88:	46 85       	ldd	r20, Z+14	; 0x0e
    aa8a:	57 85       	ldd	r21, Z+15	; 0x0f
    aa8c:	60 89       	ldd	r22, Z+16	; 0x10
    aa8e:	71 89       	ldd	r23, Z+17	; 0x11
    aa90:	c7 01       	movw	r24, r14
    aa92:	e5 e0       	ldi	r30, 0x05	; 5
    aa94:	88 0f       	add	r24, r24
    aa96:	99 1f       	adc	r25, r25
    aa98:	ea 95       	dec	r30
    aa9a:	e1 f7       	brne	.-8      	; 0xaa94 <dir_register+0x1c0>
    aa9c:	48 1b       	sub	r20, r24
    aa9e:	59 0b       	sbc	r21, r25
    aaa0:	61 09       	sbc	r22, r1
    aaa2:	71 09       	sbc	r23, r1
    aaa4:	c8 01       	movw	r24, r16
    aaa6:	5e d9       	rcall	.-3396   	; 0x9d64 <dir_sdi>
    aaa8:	00 97       	sbiw	r24, 0x00	; 0
    aaaa:	09 f0       	breq	.+2      	; 0xaaae <dir_register+0x1da>
    aaac:	9b c0       	rjmp	.+310    	; 0xabe4 <dir_register+0x310>
    aaae:	c5 01       	movw	r24, r10
    aab0:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <sum_sfn>
    aab4:	68 2e       	mov	r6, r24
    aab6:	5f e0       	ldi	r21, 0x0F	; 15
    aab8:	35 2e       	mov	r3, r21
    aaba:	6d e0       	ldi	r22, 0x0D	; 13
    aabc:	46 2e       	mov	r4, r22
    aabe:	78 ef       	ldi	r23, 0xF8	; 248
    aac0:	87 2e       	mov	r8, r23
    aac2:	74 e0       	ldi	r23, 0x04	; 4
    aac4:	97 2e       	mov	r9, r23
    aac6:	55 24       	eor	r5, r5
    aac8:	53 94       	inc	r5
    aaca:	f8 01       	movw	r30, r16
    aacc:	46 89       	ldd	r20, Z+22	; 0x16
    aace:	57 89       	ldd	r21, Z+23	; 0x17
    aad0:	60 8d       	ldd	r22, Z+24	; 0x18
    aad2:	71 8d       	ldd	r23, Z+25	; 0x19
    aad4:	c6 01       	movw	r24, r12
    aad6:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    aada:	00 97       	sbiw	r24, 0x00	; 0
    aadc:	09 f0       	breq	.+2      	; 0xaae0 <dir_register+0x20c>
    aade:	82 c0       	rjmp	.+260    	; 0xabe4 <dir_register+0x310>
    aae0:	f6 01       	movw	r30, r12
    aae2:	63 85       	ldd	r22, Z+11	; 0x0b
    aae4:	74 85       	ldd	r23, Z+12	; 0x0c
    aae6:	f8 01       	movw	r30, r16
    aae8:	02 8c       	ldd	r0, Z+26	; 0x1a
    aaea:	f3 8d       	ldd	r31, Z+27	; 0x1b
    aaec:	e0 2d       	mov	r30, r0
    aaee:	fe 8b       	std	Y+22, r31	; 0x16
    aaf0:	ed 8b       	std	Y+21, r30	; 0x15
    aaf2:	7e 2c       	mov	r7, r14
    aaf4:	65 86       	std	Z+13, r6	; 0x0d
    aaf6:	33 86       	std	Z+11, r3	; 0x0b
    aaf8:	14 86       	std	Z+12, r1	; 0x0c
    aafa:	12 8e       	std	Z+26, r1	; 0x1a
    aafc:	13 8e       	std	Z+27, r1	; 0x1b
    aafe:	97 01       	movw	r18, r14
    ab00:	33 27       	eor	r19, r19
    ab02:	21 50       	subi	r18, 0x01	; 1
    ab04:	31 09       	sbc	r19, r1
    ab06:	42 9e       	mul	r4, r18
    ab08:	c0 01       	movw	r24, r0
    ab0a:	43 9e       	mul	r4, r19
    ab0c:	90 0d       	add	r25, r0
    ab0e:	11 24       	eor	r1, r1
    ab10:	ab ee       	ldi	r26, 0xEB	; 235
    ab12:	b4 e0       	ldi	r27, 0x04	; 4
    ab14:	20 e0       	ldi	r18, 0x00	; 0
    ab16:	30 e0       	ldi	r19, 0x00	; 0
    ab18:	2f 3f       	cpi	r18, 0xFF	; 255
    ab1a:	ff ef       	ldi	r31, 0xFF	; 255
    ab1c:	3f 07       	cpc	r19, r31
    ab1e:	49 f0       	breq	.+18     	; 0xab32 <dir_register+0x25e>
    ab20:	9c 01       	movw	r18, r24
    ab22:	22 0f       	add	r18, r18
    ab24:	33 1f       	adc	r19, r19
    ab26:	26 0f       	add	r18, r22
    ab28:	37 1f       	adc	r19, r23
    ab2a:	f9 01       	movw	r30, r18
    ab2c:	20 81       	ld	r18, Z
    ab2e:	31 81       	ldd	r19, Z+1	; 0x01
    ab30:	01 96       	adiw	r24, 0x01	; 1
    ab32:	4d 91       	ld	r20, X+
    ab34:	ed 89       	ldd	r30, Y+21	; 0x15
    ab36:	fe 89       	ldd	r31, Y+22	; 0x16
    ab38:	e4 0f       	add	r30, r20
    ab3a:	f1 1d       	adc	r31, r1
    ab3c:	20 83       	st	Z, r18
    ab3e:	31 83       	std	Z+1, r19	; 0x01
    ab40:	21 15       	cp	r18, r1
    ab42:	31 05       	cpc	r19, r1
    ab44:	11 f4       	brne	.+4      	; 0xab4a <dir_register+0x276>
    ab46:	2f ef       	ldi	r18, 0xFF	; 255
    ab48:	3f ef       	ldi	r19, 0xFF	; 255
    ab4a:	8a 16       	cp	r8, r26
    ab4c:	9b 06       	cpc	r9, r27
    ab4e:	21 f7       	brne	.-56     	; 0xab18 <dir_register+0x244>
    ab50:	2f 3f       	cpi	r18, 0xFF	; 255
    ab52:	3f 4f       	sbci	r19, 0xFF	; 255
    ab54:	49 f0       	breq	.+18     	; 0xab68 <dir_register+0x294>
    ab56:	88 0f       	add	r24, r24
    ab58:	99 1f       	adc	r25, r25
    ab5a:	db 01       	movw	r26, r22
    ab5c:	a8 0f       	add	r26, r24
    ab5e:	b9 1f       	adc	r27, r25
    ab60:	8d 91       	ld	r24, X+
    ab62:	9c 91       	ld	r25, X
    ab64:	89 2b       	or	r24, r25
    ab66:	19 f4       	brne	.+6      	; 0xab6e <dir_register+0x29a>
    ab68:	27 2d       	mov	r18, r7
    ab6a:	20 64       	ori	r18, 0x40	; 64
    ab6c:	72 2e       	mov	r7, r18
    ab6e:	ed 89       	ldd	r30, Y+21	; 0x15
    ab70:	fe 89       	ldd	r31, Y+22	; 0x16
    ab72:	70 82       	st	Z, r7
    ab74:	f6 01       	movw	r30, r12
    ab76:	53 82       	std	Z+3, r5	; 0x03
    ab78:	60 e0       	ldi	r22, 0x00	; 0
    ab7a:	70 e0       	ldi	r23, 0x00	; 0
    ab7c:	c8 01       	movw	r24, r16
    ab7e:	6a db       	rcall	.-2348   	; 0xa254 <dir_next>
    ab80:	00 97       	sbiw	r24, 0x00	; 0
    ab82:	81 f5       	brne	.+96     	; 0xabe4 <dir_register+0x310>
    ab84:	f1 e0       	ldi	r31, 0x01	; 1
    ab86:	ef 1a       	sub	r14, r31
    ab88:	f1 08       	sbc	r15, r1
    ab8a:	09 f0       	breq	.+2      	; 0xab8e <dir_register+0x2ba>
    ab8c:	9e cf       	rjmp	.-196    	; 0xaaca <dir_register+0x1f6>
    ab8e:	03 c0       	rjmp	.+6      	; 0xab96 <dir_register+0x2c2>
    ab90:	26 e0       	ldi	r18, 0x06	; 6
    ab92:	90 e0       	ldi	r25, 0x00	; 0
    ab94:	28 c0       	rjmp	.+80     	; 0xabe6 <dir_register+0x312>
    ab96:	f8 01       	movw	r30, r16
    ab98:	46 89       	ldd	r20, Z+22	; 0x16
    ab9a:	57 89       	ldd	r21, Z+23	; 0x17
    ab9c:	60 8d       	ldd	r22, Z+24	; 0x18
    ab9e:	71 8d       	ldd	r23, Z+25	; 0x19
    aba0:	c6 01       	movw	r24, r12
    aba2:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    aba6:	00 97       	sbiw	r24, 0x00	; 0
    aba8:	e9 f4       	brne	.+58     	; 0xabe4 <dir_register+0x310>
    abaa:	40 e2       	ldi	r20, 0x20	; 32
    abac:	50 e0       	ldi	r21, 0x00	; 0
    abae:	60 e0       	ldi	r22, 0x00	; 0
    abb0:	70 e0       	ldi	r23, 0x00	; 0
    abb2:	f8 01       	movw	r30, r16
    abb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    abb6:	93 8d       	ldd	r25, Z+27	; 0x1b
    abb8:	0e 94 6e 45 	call	0x8adc	; 0x8adc <mem_set>
    abbc:	4b e0       	ldi	r20, 0x0B	; 11
    abbe:	50 e0       	ldi	r21, 0x00	; 0
    abc0:	b5 01       	movw	r22, r10
    abc2:	f8 01       	movw	r30, r16
    abc4:	82 8d       	ldd	r24, Z+26	; 0x1a
    abc6:	93 8d       	ldd	r25, Z+27	; 0x1b
    abc8:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    abcc:	f8 01       	movw	r30, r16
    abce:	22 8d       	ldd	r18, Z+26	; 0x1a
    abd0:	33 8d       	ldd	r19, Z+27	; 0x1b
    abd2:	87 a1       	ldd	r24, Z+39	; 0x27
    abd4:	88 71       	andi	r24, 0x18	; 24
    abd6:	f9 01       	movw	r30, r18
    abd8:	84 87       	std	Z+12, r24	; 0x0c
    abda:	81 e0       	ldi	r24, 0x01	; 1
    abdc:	f6 01       	movw	r30, r12
    abde:	83 83       	std	Z+3, r24	; 0x03
    abe0:	20 e0       	ldi	r18, 0x00	; 0
    abe2:	d7 cf       	rjmp	.-82     	; 0xab92 <dir_register+0x2be>
    abe4:	28 2f       	mov	r18, r24
    abe6:	82 2f       	mov	r24, r18
    abe8:	66 96       	adiw	r28, 0x16	; 22
    abea:	e2 e1       	ldi	r30, 0x12	; 18
    abec:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000abf0 <follow_path>:
    abf0:	aa e0       	ldi	r26, 0x0A	; 10
    abf2:	b0 e0       	ldi	r27, 0x00	; 0
    abf4:	ee ef       	ldi	r30, 0xFE	; 254
    abf6:	f5 e5       	ldi	r31, 0x55	; 85
    abf8:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    abfc:	7c 01       	movw	r14, r24
    abfe:	3b 01       	movw	r6, r22
    ac00:	dc 01       	movw	r26, r24
    ac02:	0d 90       	ld	r0, X+
    ac04:	bc 91       	ld	r27, X
    ac06:	a0 2d       	mov	r26, r0
    ac08:	be 83       	std	Y+6, r27	; 0x06
    ac0a:	ad 83       	std	Y+5, r26	; 0x05
    ac0c:	fb 01       	movw	r30, r22
    ac0e:	80 81       	ld	r24, Z
    ac10:	8f 32       	cpi	r24, 0x2F	; 47
    ac12:	11 f0       	breq	.+4      	; 0xac18 <follow_path+0x28>
    ac14:	8c 35       	cpi	r24, 0x5C	; 92
    ac16:	11 f4       	brne	.+4      	; 0xac1c <follow_path+0x2c>
    ac18:	93 01       	movw	r18, r6
    ac1a:	0c c0       	rjmp	.+24     	; 0xac34 <follow_path+0x44>
    ac1c:	ed 81       	ldd	r30, Y+5	; 0x05
    ac1e:	fe 81       	ldd	r31, Y+6	; 0x06
    ac20:	85 89       	ldd	r24, Z+21	; 0x15
    ac22:	96 89       	ldd	r25, Z+22	; 0x16
    ac24:	a7 89       	ldd	r26, Z+23	; 0x17
    ac26:	b0 8d       	ldd	r27, Z+24	; 0x18
    ac28:	f7 01       	movw	r30, r14
    ac2a:	86 83       	std	Z+6, r24	; 0x06
    ac2c:	97 83       	std	Z+7, r25	; 0x07
    ac2e:	a0 87       	std	Z+8, r26	; 0x08
    ac30:	b1 87       	std	Z+9, r27	; 0x09
    ac32:	0e c0       	rjmp	.+28     	; 0xac50 <follow_path+0x60>
    ac34:	39 01       	movw	r6, r18
    ac36:	d9 01       	movw	r26, r18
    ac38:	8c 91       	ld	r24, X
    ac3a:	2f 5f       	subi	r18, 0xFF	; 255
    ac3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ac3e:	8f 32       	cpi	r24, 0x2F	; 47
    ac40:	c9 f3       	breq	.-14     	; 0xac34 <follow_path+0x44>
    ac42:	8c 35       	cpi	r24, 0x5C	; 92
    ac44:	b9 f3       	breq	.-18     	; 0xac34 <follow_path+0x44>
    ac46:	f7 01       	movw	r30, r14
    ac48:	16 82       	std	Z+6, r1	; 0x06
    ac4a:	17 82       	std	Z+7, r1	; 0x07
    ac4c:	10 86       	std	Z+8, r1	; 0x08
    ac4e:	11 86       	std	Z+9, r1	; 0x09
    ac50:	d3 01       	movw	r26, r6
    ac52:	8c 91       	ld	r24, X
    ac54:	80 32       	cpi	r24, 0x20	; 32
    ac56:	58 f0       	brcs	.+22     	; 0xac6e <follow_path+0x7e>
    ac58:	f7 01       	movw	r30, r14
    ac5a:	7c 96       	adiw	r30, 0x1c	; 28
    ac5c:	f8 87       	std	Y+8, r31	; 0x08
    ac5e:	ef 83       	std	Y+7, r30	; 0x07
    ac60:	2d 81       	ldd	r18, Y+5	; 0x05
    ac62:	3e 81       	ldd	r19, Y+6	; 0x06
    ac64:	2b 5c       	subi	r18, 0xCB	; 203
    ac66:	3f 4f       	sbci	r19, 0xFF	; 255
    ac68:	3a 87       	std	Y+10, r19	; 0x0a
    ac6a:	29 87       	std	Y+9, r18	; 0x09
    ac6c:	96 c0       	rjmp	.+300    	; 0xad9a <follow_path+0x1aa>
    ac6e:	80 e8       	ldi	r24, 0x80	; 128
    ac70:	f7 01       	movw	r30, r14
    ac72:	87 a3       	std	Z+39, r24	; 0x27
    ac74:	40 e0       	ldi	r20, 0x00	; 0
    ac76:	50 e0       	ldi	r21, 0x00	; 0
    ac78:	ba 01       	movw	r22, r20
    ac7a:	c7 01       	movw	r24, r14
    ac7c:	73 d8       	rcall	.-3866   	; 0x9d64 <dir_sdi>
    ac7e:	e5 c1       	rjmp	.+970    	; 0xb04a <follow_path+0x45a>
    ac80:	6c 35       	cpi	r22, 0x5C	; 92
    ac82:	71 05       	cpc	r23, r1
    ac84:	b9 f1       	breq	.+110    	; 0xacf4 <follow_path+0x104>
    ac86:	60 38       	cpi	r22, 0x80	; 128
    ac88:	71 05       	cpc	r23, r1
    ac8a:	28 f4       	brcc	.+10     	; 0xac96 <follow_path+0xa6>
    ac8c:	e7 e2       	ldi	r30, 0x27	; 39
    ac8e:	f4 e0       	ldi	r31, 0x04	; 4
    ac90:	41 91       	ld	r20, Z+
    ac92:	41 11       	cpse	r20, r1
    ac94:	8c c0       	rjmp	.+280    	; 0xadae <follow_path+0x1be>
    ac96:	0f 3f       	cpi	r16, 0xFF	; 255
    ac98:	11 05       	cpc	r17, r1
    ac9a:	08 f0       	brcs	.+2      	; 0xac9e <follow_path+0xae>
    ac9c:	b9 c1       	rjmp	.+882    	; 0xb010 <follow_path+0x420>
    ac9e:	f8 01       	movw	r30, r16
    aca0:	ee 0f       	add	r30, r30
    aca2:	ff 1f       	adc	r31, r31
    aca4:	ea 0d       	add	r30, r10
    aca6:	fb 1d       	adc	r31, r11
    aca8:	71 83       	std	Z+1, r23	; 0x01
    acaa:	60 83       	st	Z, r22
    acac:	0f 5f       	subi	r16, 0xFF	; 255
    acae:	1f 4f       	sbci	r17, 0xFF	; 255
    acb0:	ce 01       	movw	r24, r28
    acb2:	01 96       	adiw	r24, 0x01	; 1
    acb4:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <tchar2uni>
    acb8:	6f 3f       	cpi	r22, 0xFF	; 255
    acba:	bf ef       	ldi	r27, 0xFF	; 255
    acbc:	7b 07       	cpc	r23, r27
    acbe:	8b 07       	cpc	r24, r27
    acc0:	9b 07       	cpc	r25, r27
    acc2:	09 f4       	brne	.+2      	; 0xacc6 <follow_path+0xd6>
    acc4:	a5 c1       	rjmp	.+842    	; 0xb010 <follow_path+0x420>
    acc6:	61 15       	cp	r22, r1
    acc8:	71 05       	cpc	r23, r1
    acca:	e1 e0       	ldi	r30, 0x01	; 1
    accc:	8e 07       	cpc	r24, r30
    acce:	91 05       	cpc	r25, r1
    acd0:	48 f0       	brcs	.+18     	; 0xace4 <follow_path+0xf4>
    acd2:	f8 01       	movw	r30, r16
    acd4:	ee 0f       	add	r30, r30
    acd6:	ff 1f       	adc	r31, r31
    acd8:	ea 0d       	add	r30, r10
    acda:	fb 1d       	adc	r31, r11
    acdc:	91 83       	std	Z+1, r25	; 0x01
    acde:	80 83       	st	Z, r24
    ace0:	0f 5f       	subi	r16, 0xFF	; 255
    ace2:	1f 4f       	sbci	r17, 0xFF	; 255
    ace4:	9b 01       	movw	r18, r22
    ace6:	60 32       	cpi	r22, 0x20	; 32
    ace8:	71 05       	cpc	r23, r1
    acea:	08 f4       	brcc	.+2      	; 0xacee <follow_path+0xfe>
    acec:	6a c0       	rjmp	.+212    	; 0xadc2 <follow_path+0x1d2>
    acee:	6f 32       	cpi	r22, 0x2F	; 47
    acf0:	71 05       	cpc	r23, r1
    acf2:	31 f6       	brne	.-116    	; 0xac80 <follow_path+0x90>
    acf4:	e9 81       	ldd	r30, Y+1	; 0x01
    acf6:	fa 81       	ldd	r31, Y+2	; 0x02
    acf8:	80 81       	ld	r24, Z
    acfa:	8f 32       	cpi	r24, 0x2F	; 47
    acfc:	09 f4       	brne	.+2      	; 0xad00 <follow_path+0x110>
    acfe:	5d c0       	rjmp	.+186    	; 0xadba <follow_path+0x1ca>
    ad00:	8c 35       	cpi	r24, 0x5C	; 92
    ad02:	09 f4       	brne	.+2      	; 0xad06 <follow_path+0x116>
    ad04:	5a c0       	rjmp	.+180    	; 0xadba <follow_path+0x1ca>
    ad06:	1b 82       	std	Y+3, r1	; 0x03
    ad08:	69 80       	ldd	r6, Y+1	; 0x01
    ad0a:	7a 80       	ldd	r7, Y+2	; 0x02
    ad0c:	98 01       	movw	r18, r16
    ad0e:	22 0f       	add	r18, r18
    ad10:	33 1f       	adc	r19, r19
    ad12:	01 30       	cpi	r16, 0x01	; 1
    ad14:	11 05       	cpc	r17, r1
    ad16:	09 f0       	breq	.+2      	; 0xad1a <follow_path+0x12a>
    ad18:	57 c0       	rjmp	.+174    	; 0xadc8 <follow_path+0x1d8>
    ad1a:	d5 01       	movw	r26, r10
    ad1c:	8d 91       	ld	r24, X+
    ad1e:	9c 91       	ld	r25, X
    ad20:	8e 97       	sbiw	r24, 0x2e	; 46
    ad22:	09 f0       	breq	.+2      	; 0xad26 <follow_path+0x136>
    ad24:	5c c0       	rjmp	.+184    	; 0xadde <follow_path+0x1ee>
    ad26:	f9 01       	movw	r30, r18
    ad28:	ea 0d       	add	r30, r10
    ad2a:	fb 1d       	adc	r31, r11
    ad2c:	11 82       	std	Z+1, r1	; 0x01
    ad2e:	10 82       	st	Z, r1
    ad30:	f7 01       	movw	r30, r14
    ad32:	7c 96       	adiw	r30, 0x1c	; 28
    ad34:	80 e0       	ldi	r24, 0x00	; 0
    ad36:	90 e0       	ldi	r25, 0x00	; 0
    ad38:	80 17       	cp	r24, r16
    ad3a:	91 07       	cpc	r25, r17
    ad3c:	08 f0       	brcs	.+2      	; 0xad40 <follow_path+0x150>
    ad3e:	53 c0       	rjmp	.+166    	; 0xade6 <follow_path+0x1f6>
    ad40:	2e e2       	ldi	r18, 0x2E	; 46
    ad42:	21 93       	st	Z+, r18
    ad44:	01 96       	adiw	r24, 0x01	; 1
    ad46:	8b 30       	cpi	r24, 0x0B	; 11
    ad48:	91 05       	cpc	r25, r1
    ad4a:	b1 f7       	brne	.-20     	; 0xad38 <follow_path+0x148>
    ad4c:	8b 81       	ldd	r24, Y+3	; 0x03
    ad4e:	80 62       	ori	r24, 0x20	; 32
    ad50:	f7 01       	movw	r30, r14
    ad52:	87 a3       	std	Z+39, r24	; 0x27
    ad54:	80 e0       	ldi	r24, 0x00	; 0
    ad56:	90 e0       	ldi	r25, 0x00	; 0
    ad58:	00 97       	sbiw	r24, 0x00	; 0
    ad5a:	09 f0       	breq	.+2      	; 0xad5e <follow_path+0x16e>
    ad5c:	76 c1       	rjmp	.+748    	; 0xb04a <follow_path+0x45a>
    ad5e:	c7 01       	movw	r24, r14
    ad60:	ab dc       	rcall	.-1706   	; 0xa6b8 <dir_find>
    ad62:	f7 01       	movw	r30, r14
    ad64:	27 a1       	ldd	r18, Z+39	; 0x27
    ad66:	00 97       	sbiw	r24, 0x00	; 0
    ad68:	09 f0       	breq	.+2      	; 0xad6c <follow_path+0x17c>
    ad6a:	55 c1       	rjmp	.+682    	; 0xb016 <follow_path+0x426>
    ad6c:	22 fd       	sbrc	r18, 2
    ad6e:	6d c1       	rjmp	.+730    	; 0xb04a <follow_path+0x45a>
    ad70:	f7 01       	movw	r30, r14
    ad72:	84 81       	ldd	r24, Z+4	; 0x04
    ad74:	84 ff       	sbrs	r24, 4
    ad76:	60 c1       	rjmp	.+704    	; 0xb038 <follow_path+0x448>
    ad78:	66 85       	ldd	r22, Z+14	; 0x0e
    ad7a:	77 85       	ldd	r23, Z+15	; 0x0f
    ad7c:	71 70       	andi	r23, 0x01	; 1
    ad7e:	29 85       	ldd	r18, Y+9	; 0x09
    ad80:	3a 85       	ldd	r19, Y+10	; 0x0a
    ad82:	62 0f       	add	r22, r18
    ad84:	73 1f       	adc	r23, r19
    ad86:	ad 81       	ldd	r26, Y+5	; 0x05
    ad88:	be 81       	ldd	r27, Y+6	; 0x06
    ad8a:	8c 91       	ld	r24, X
    ad8c:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    ad90:	f7 01       	movw	r30, r14
    ad92:	66 83       	std	Z+6, r22	; 0x06
    ad94:	77 83       	std	Z+7, r23	; 0x07
    ad96:	80 87       	std	Z+8, r24	; 0x08
    ad98:	91 87       	std	Z+9, r25	; 0x09
    ad9a:	7a 82       	std	Y+2, r7	; 0x02
    ad9c:	69 82       	std	Y+1, r6	; 0x01
    ad9e:	d7 01       	movw	r26, r14
    ada0:	ed 91       	ld	r30, X+
    ada2:	fc 91       	ld	r31, X
    ada4:	a3 84       	ldd	r10, Z+11	; 0x0b
    ada6:	b4 84       	ldd	r11, Z+12	; 0x0c
    ada8:	00 e0       	ldi	r16, 0x00	; 0
    adaa:	10 e0       	ldi	r17, 0x00	; 0
    adac:	81 cf       	rjmp	.-254    	; 0xacb0 <follow_path+0xc0>
    adae:	50 e0       	ldi	r21, 0x00	; 0
    adb0:	24 17       	cp	r18, r20
    adb2:	35 07       	cpc	r19, r21
    adb4:	09 f0       	breq	.+2      	; 0xadb8 <follow_path+0x1c8>
    adb6:	6c cf       	rjmp	.-296    	; 0xac90 <follow_path+0xa0>
    adb8:	2b c1       	rjmp	.+598    	; 0xb010 <follow_path+0x420>
    adba:	31 96       	adiw	r30, 0x01	; 1
    adbc:	fa 83       	std	Y+2, r31	; 0x02
    adbe:	e9 83       	std	Y+1, r30	; 0x01
    adc0:	99 cf       	rjmp	.-206    	; 0xacf4 <follow_path+0x104>
    adc2:	f4 e0       	ldi	r31, 0x04	; 4
    adc4:	fb 83       	std	Y+3, r31	; 0x03
    adc6:	a0 cf       	rjmp	.-192    	; 0xad08 <follow_path+0x118>
    adc8:	02 30       	cpi	r16, 0x02	; 2
    adca:	11 05       	cpc	r17, r1
    adcc:	41 f4       	brne	.+16     	; 0xadde <follow_path+0x1ee>
    adce:	f5 01       	movw	r30, r10
    add0:	82 81       	ldd	r24, Z+2	; 0x02
    add2:	93 81       	ldd	r25, Z+3	; 0x03
    add4:	8e 97       	sbiw	r24, 0x2e	; 46
    add6:	19 f4       	brne	.+6      	; 0xadde <follow_path+0x1ee>
    add8:	80 81       	ld	r24, Z
    adda:	91 81       	ldd	r25, Z+1	; 0x01
    addc:	a1 cf       	rjmp	.-190    	; 0xad20 <follow_path+0x130>
    adde:	f9 01       	movw	r30, r18
    ade0:	ea 0d       	add	r30, r10
    ade2:	fb 1d       	adc	r31, r11
    ade4:	09 c0       	rjmp	.+18     	; 0xadf8 <follow_path+0x208>
    ade6:	20 e2       	ldi	r18, 0x20	; 32
    ade8:	ac cf       	rjmp	.-168    	; 0xad42 <follow_path+0x152>
    adea:	92 91       	ld	r25, -Z
    adec:	82 91       	ld	r24, -Z
    adee:	80 32       	cpi	r24, 0x20	; 32
    adf0:	91 05       	cpc	r25, r1
    adf2:	31 f4       	brne	.+12     	; 0xae00 <follow_path+0x210>
    adf4:	01 50       	subi	r16, 0x01	; 1
    adf6:	11 09       	sbc	r17, r1
    adf8:	01 15       	cp	r16, r1
    adfa:	11 05       	cpc	r17, r1
    adfc:	b1 f7       	brne	.-20     	; 0xadea <follow_path+0x1fa>
    adfe:	02 c0       	rjmp	.+4      	; 0xae04 <follow_path+0x214>
    ae00:	8e 97       	sbiw	r24, 0x2e	; 46
    ae02:	c1 f3       	breq	.-16     	; 0xadf4 <follow_path+0x204>
    ae04:	f8 01       	movw	r30, r16
    ae06:	ee 0f       	add	r30, r30
    ae08:	ff 1f       	adc	r31, r31
    ae0a:	ea 0d       	add	r30, r10
    ae0c:	fb 1d       	adc	r31, r11
    ae0e:	11 82       	std	Z+1, r1	; 0x01
    ae10:	10 82       	st	Z, r1
    ae12:	01 15       	cp	r16, r1
    ae14:	11 05       	cpc	r17, r1
    ae16:	09 f4       	brne	.+2      	; 0xae1a <follow_path+0x22a>
    ae18:	fb c0       	rjmp	.+502    	; 0xb010 <follow_path+0x420>
    ae1a:	d5 01       	movw	r26, r10
    ae1c:	41 2c       	mov	r4, r1
    ae1e:	51 2c       	mov	r5, r1
    ae20:	8d 91       	ld	r24, X+
    ae22:	9d 91       	ld	r25, X+
    ae24:	80 32       	cpi	r24, 0x20	; 32
    ae26:	91 05       	cpc	r25, r1
    ae28:	21 f4       	brne	.+8      	; 0xae32 <follow_path+0x242>
    ae2a:	2f ef       	ldi	r18, 0xFF	; 255
    ae2c:	42 1a       	sub	r4, r18
    ae2e:	52 0a       	sbc	r5, r18
    ae30:	f7 cf       	rjmp	.-18     	; 0xae20 <follow_path+0x230>
    ae32:	41 14       	cp	r4, r1
    ae34:	51 04       	cpc	r5, r1
    ae36:	11 f4       	brne	.+4      	; 0xae3c <follow_path+0x24c>
    ae38:	8e 97       	sbiw	r24, 0x2e	; 46
    ae3a:	39 f4       	brne	.+14     	; 0xae4a <follow_path+0x25a>
    ae3c:	3b 81       	ldd	r19, Y+3	; 0x03
    ae3e:	33 60       	ori	r19, 0x03	; 3
    ae40:	3b 83       	std	Y+3, r19	; 0x03
    ae42:	03 c0       	rjmp	.+6      	; 0xae4a <follow_path+0x25a>
    ae44:	01 50       	subi	r16, 0x01	; 1
    ae46:	11 09       	sbc	r17, r1
    ae48:	21 f0       	breq	.+8      	; 0xae52 <follow_path+0x262>
    ae4a:	92 91       	ld	r25, -Z
    ae4c:	82 91       	ld	r24, -Z
    ae4e:	8e 97       	sbiw	r24, 0x2e	; 46
    ae50:	c9 f7       	brne	.-14     	; 0xae44 <follow_path+0x254>
    ae52:	4b e0       	ldi	r20, 0x0B	; 11
    ae54:	50 e0       	ldi	r21, 0x00	; 0
    ae56:	60 e2       	ldi	r22, 0x20	; 32
    ae58:	70 e0       	ldi	r23, 0x00	; 0
    ae5a:	8f 81       	ldd	r24, Y+7	; 0x07
    ae5c:	98 85       	ldd	r25, Y+8	; 0x08
    ae5e:	0e 94 6e 45 	call	0x8adc	; 0x8adc <mem_set>
    ae62:	48 e0       	ldi	r20, 0x08	; 8
    ae64:	84 2e       	mov	r8, r20
    ae66:	91 2c       	mov	r9, r1
    ae68:	c1 2c       	mov	r12, r1
    ae6a:	d1 2c       	mov	r13, r1
    ae6c:	1c 82       	std	Y+4, r1	; 0x04
    ae6e:	12 01       	movw	r2, r4
    ae70:	8f ef       	ldi	r24, 0xFF	; 255
    ae72:	28 1a       	sub	r2, r24
    ae74:	38 0a       	sbc	r3, r24
    ae76:	44 0c       	add	r4, r4
    ae78:	55 1c       	adc	r5, r5
    ae7a:	f5 01       	movw	r30, r10
    ae7c:	e4 0d       	add	r30, r4
    ae7e:	f5 1d       	adc	r31, r5
    ae80:	80 81       	ld	r24, Z
    ae82:	91 81       	ldd	r25, Z+1	; 0x01
    ae84:	00 97       	sbiw	r24, 0x00	; 0
    ae86:	09 f4       	brne	.+2      	; 0xae8a <follow_path+0x29a>
    ae88:	98 c0       	rjmp	.+304    	; 0xafba <follow_path+0x3ca>
    ae8a:	80 32       	cpi	r24, 0x20	; 32
    ae8c:	91 05       	cpc	r25, r1
    ae8e:	31 f0       	breq	.+12     	; 0xae9c <follow_path+0x2ac>
    ae90:	8e 32       	cpi	r24, 0x2E	; 46
    ae92:	91 05       	cpc	r25, r1
    ae94:	41 f4       	brne	.+16     	; 0xaea6 <follow_path+0x2b6>
    ae96:	20 16       	cp	r2, r16
    ae98:	31 06       	cpc	r3, r17
    ae9a:	61 f0       	breq	.+24     	; 0xaeb4 <follow_path+0x2c4>
    ae9c:	9b 81       	ldd	r25, Y+3	; 0x03
    ae9e:	93 60       	ori	r25, 0x03	; 3
    aea0:	9b 83       	std	Y+3, r25	; 0x03
    aea2:	21 01       	movw	r4, r2
    aea4:	e4 cf       	rjmp	.-56     	; 0xae6e <follow_path+0x27e>
    aea6:	c8 14       	cp	r12, r8
    aea8:	d9 04       	cpc	r13, r9
    aeaa:	40 f4       	brcc	.+16     	; 0xaebc <follow_path+0x2cc>
    aeac:	20 16       	cp	r2, r16
    aeae:	31 06       	cpc	r3, r17
    aeb0:	31 f5       	brne	.+76     	; 0xaefe <follow_path+0x30e>
    aeb2:	c5 c0       	rjmp	.+394    	; 0xb03e <follow_path+0x44e>
    aeb4:	c8 14       	cp	r12, r8
    aeb6:	d9 04       	cpc	r13, r9
    aeb8:	08 f4       	brcc	.+2      	; 0xaebc <follow_path+0x2cc>
    aeba:	c1 c0       	rjmp	.+386    	; 0xb03e <follow_path+0x44e>
    aebc:	ab e0       	ldi	r26, 0x0B	; 11
    aebe:	8a 16       	cp	r8, r26
    aec0:	91 04       	cpc	r9, r1
    aec2:	39 f4       	brne	.+14     	; 0xaed2 <follow_path+0x2e2>
    aec4:	bb 81       	ldd	r27, Y+3	; 0x03
    aec6:	b3 60       	ori	r27, 0x03	; 3
    aec8:	bb 83       	std	Y+3, r27	; 0x03
    aeca:	2b e0       	ldi	r18, 0x0B	; 11
    aecc:	82 2e       	mov	r8, r18
    aece:	91 2c       	mov	r9, r1
    aed0:	74 c0       	rjmp	.+232    	; 0xafba <follow_path+0x3ca>
    aed2:	20 16       	cp	r2, r16
    aed4:	31 06       	cpc	r3, r17
    aed6:	39 f0       	breq	.+14     	; 0xaee6 <follow_path+0x2f6>
    aed8:	eb 81       	ldd	r30, Y+3	; 0x03
    aeda:	e3 60       	ori	r30, 0x03	; 3
    aedc:	eb 83       	std	Y+3, r30	; 0x03
    aede:	02 15       	cp	r16, r2
    aee0:	13 05       	cpc	r17, r3
    aee2:	08 f4       	brcc	.+2      	; 0xaee6 <follow_path+0x2f6>
    aee4:	6a c0       	rjmp	.+212    	; 0xafba <follow_path+0x3ca>
    aee6:	fc 81       	ldd	r31, Y+4	; 0x04
    aee8:	ff 0f       	add	r31, r31
    aeea:	ff 0f       	add	r31, r31
    aeec:	fc 83       	std	Y+4, r31	; 0x04
    aeee:	18 01       	movw	r2, r16
    aef0:	8b e0       	ldi	r24, 0x0B	; 11
    aef2:	88 2e       	mov	r8, r24
    aef4:	91 2c       	mov	r9, r1
    aef6:	98 e0       	ldi	r25, 0x08	; 8
    aef8:	c9 2e       	mov	r12, r25
    aefa:	d1 2c       	mov	r13, r1
    aefc:	d2 cf       	rjmp	.-92     	; 0xaea2 <follow_path+0x2b2>
    aefe:	80 38       	cpi	r24, 0x80	; 128
    af00:	91 05       	cpc	r25, r1
    af02:	78 f1       	brcs	.+94     	; 0xaf62 <follow_path+0x372>
    af04:	2b 81       	ldd	r18, Y+3	; 0x03
    af06:	22 60       	ori	r18, 0x02	; 2
    af08:	52 2e       	mov	r5, r18
    af0a:	bc 01       	movw	r22, r24
    af0c:	80 e0       	ldi	r24, 0x00	; 0
    af0e:	90 e0       	ldi	r25, 0x00	; 0
    af10:	45 eb       	ldi	r20, 0xB5	; 181
    af12:	51 e0       	ldi	r21, 0x01	; 1
    af14:	0e 94 c1 67 	call	0xcf82	; 0xcf82 <ff_uni2oem>
    af18:	87 ff       	sbrs	r24, 7
    af1a:	08 c0       	rjmp	.+16     	; 0xaf2c <follow_path+0x33c>
    af1c:	8f 77       	andi	r24, 0x7F	; 127
    af1e:	99 27       	eor	r25, r25
    af20:	fc 01       	movw	r30, r24
    af22:	e5 59       	subi	r30, 0x95	; 149
    af24:	fb 4f       	sbci	r31, 0xFB	; 251
    af26:	80 81       	ld	r24, Z
    af28:	90 e0       	ldi	r25, 0x00	; 0
    af2a:	18 c0       	rjmp	.+48     	; 0xaf5c <follow_path+0x36c>
    af2c:	8f 3f       	cpi	r24, 0xFF	; 255
    af2e:	91 05       	cpc	r25, r1
    af30:	a9 f0       	breq	.+42     	; 0xaf5c <follow_path+0x36c>
    af32:	a0 f0       	brcs	.+40     	; 0xaf5c <follow_path+0x36c>
    af34:	94 01       	movw	r18, r8
    af36:	21 50       	subi	r18, 0x01	; 1
    af38:	31 09       	sbc	r19, r1
    af3a:	c2 16       	cp	r12, r18
    af3c:	d3 06       	cpc	r13, r19
    af3e:	28 f0       	brcs	.+10     	; 0xaf4a <follow_path+0x35a>
    af40:	3b 81       	ldd	r19, Y+3	; 0x03
    af42:	33 60       	ori	r19, 0x03	; 3
    af44:	3b 83       	std	Y+3, r19	; 0x03
    af46:	64 01       	movw	r12, r8
    af48:	ac cf       	rjmp	.-168    	; 0xaea2 <follow_path+0x2b2>
    af4a:	f7 01       	movw	r30, r14
    af4c:	ec 0d       	add	r30, r12
    af4e:	fd 1d       	adc	r31, r13
    af50:	94 8f       	std	Z+28, r25	; 0x1c
    af52:	d6 01       	movw	r26, r12
    af54:	11 96       	adiw	r26, 0x01	; 1
    af56:	6d 01       	movw	r12, r26
    af58:	5b 82       	std	Y+3, r5	; 0x03
    af5a:	26 c0       	rjmp	.+76     	; 0xafa8 <follow_path+0x3b8>
    af5c:	00 97       	sbiw	r24, 0x00	; 0
    af5e:	59 f0       	breq	.+22     	; 0xaf76 <follow_path+0x386>
    af60:	5b 82       	std	Y+3, r5	; 0x03
    af62:	e0 e3       	ldi	r30, 0x30	; 48
    af64:	f4 e0       	ldi	r31, 0x04	; 4
    af66:	21 91       	ld	r18, Z+
    af68:	22 23       	and	r18, r18
    af6a:	59 f0       	breq	.+22     	; 0xaf82 <follow_path+0x392>
    af6c:	30 e0       	ldi	r19, 0x00	; 0
    af6e:	82 17       	cp	r24, r18
    af70:	93 07       	cpc	r25, r19
    af72:	c9 f7       	brne	.-14     	; 0xaf66 <follow_path+0x376>
    af74:	5b 80       	ldd	r5, Y+3	; 0x03
    af76:	b5 2d       	mov	r27, r5
    af78:	b3 60       	ori	r27, 0x03	; 3
    af7a:	bb 83       	std	Y+3, r27	; 0x03
    af7c:	8f e5       	ldi	r24, 0x5F	; 95
    af7e:	90 e0       	ldi	r25, 0x00	; 0
    af80:	13 c0       	rjmp	.+38     	; 0xafa8 <follow_path+0x3b8>
    af82:	9c 01       	movw	r18, r24
    af84:	21 54       	subi	r18, 0x41	; 65
    af86:	31 09       	sbc	r19, r1
    af88:	2a 31       	cpi	r18, 0x1A	; 26
    af8a:	31 05       	cpc	r19, r1
    af8c:	18 f4       	brcc	.+6      	; 0xaf94 <follow_path+0x3a4>
    af8e:	ec 81       	ldd	r30, Y+4	; 0x04
    af90:	e2 60       	ori	r30, 0x02	; 2
    af92:	ec 83       	std	Y+4, r30	; 0x04
    af94:	9c 01       	movw	r18, r24
    af96:	21 56       	subi	r18, 0x61	; 97
    af98:	31 09       	sbc	r19, r1
    af9a:	2a 31       	cpi	r18, 0x1A	; 26
    af9c:	31 05       	cpc	r19, r1
    af9e:	20 f4       	brcc	.+8      	; 0xafa8 <follow_path+0x3b8>
    afa0:	fc 81       	ldd	r31, Y+4	; 0x04
    afa2:	f1 60       	ori	r31, 0x01	; 1
    afa4:	fc 83       	std	Y+4, r31	; 0x04
    afa6:	80 97       	sbiw	r24, 0x20	; 32
    afa8:	f7 01       	movw	r30, r14
    afaa:	ec 0d       	add	r30, r12
    afac:	fd 1d       	adc	r31, r13
    afae:	84 8f       	std	Z+28, r24	; 0x1c
    afb0:	96 01       	movw	r18, r12
    afb2:	2f 5f       	subi	r18, 0xFF	; 255
    afb4:	3f 4f       	sbci	r19, 0xFF	; 255
    afb6:	69 01       	movw	r12, r18
    afb8:	74 cf       	rjmp	.-280    	; 0xaea2 <follow_path+0x2b2>
    afba:	f7 01       	movw	r30, r14
    afbc:	84 8d       	ldd	r24, Z+28	; 0x1c
    afbe:	85 3e       	cpi	r24, 0xE5	; 229
    afc0:	11 f4       	brne	.+4      	; 0xafc6 <follow_path+0x3d6>
    afc2:	25 e0       	ldi	r18, 0x05	; 5
    afc4:	24 8f       	std	Z+28, r18	; 0x1c
    afc6:	38 e0       	ldi	r19, 0x08	; 8
    afc8:	83 16       	cp	r8, r19
    afca:	91 04       	cpc	r9, r1
    afcc:	21 f4       	brne	.+8      	; 0xafd6 <follow_path+0x3e6>
    afce:	8c 81       	ldd	r24, Y+4	; 0x04
    afd0:	88 0f       	add	r24, r24
    afd2:	88 0f       	add	r24, r24
    afd4:	8c 83       	std	Y+4, r24	; 0x04
    afd6:	8c 81       	ldd	r24, Y+4	; 0x04
    afd8:	8c 70       	andi	r24, 0x0C	; 12
    afda:	8c 30       	cpi	r24, 0x0C	; 12
    afdc:	21 f0       	breq	.+8      	; 0xafe6 <follow_path+0x3f6>
    afde:	8c 81       	ldd	r24, Y+4	; 0x04
    afe0:	83 70       	andi	r24, 0x03	; 3
    afe2:	83 30       	cpi	r24, 0x03	; 3
    afe4:	19 f4       	brne	.+6      	; 0xafec <follow_path+0x3fc>
    afe6:	9b 81       	ldd	r25, Y+3	; 0x03
    afe8:	92 60       	ori	r25, 0x02	; 2
    afea:	9b 83       	std	Y+3, r25	; 0x03
    afec:	ab 81       	ldd	r26, Y+3	; 0x03
    afee:	a1 fd       	sbrc	r26, 1
    aff0:	0b c0       	rjmp	.+22     	; 0xb008 <follow_path+0x418>
    aff2:	bc 81       	ldd	r27, Y+4	; 0x04
    aff4:	b0 ff       	sbrs	r27, 0
    aff6:	02 c0       	rjmp	.+4      	; 0xaffc <follow_path+0x40c>
    aff8:	a0 61       	ori	r26, 0x10	; 16
    affa:	ab 83       	std	Y+3, r26	; 0x03
    affc:	ec 81       	ldd	r30, Y+4	; 0x04
    affe:	e2 ff       	sbrs	r30, 2
    b000:	03 c0       	rjmp	.+6      	; 0xb008 <follow_path+0x418>
    b002:	fb 81       	ldd	r31, Y+3	; 0x03
    b004:	f8 60       	ori	r31, 0x08	; 8
    b006:	fb 83       	std	Y+3, r31	; 0x03
    b008:	2b 81       	ldd	r18, Y+3	; 0x03
    b00a:	f7 01       	movw	r30, r14
    b00c:	27 a3       	std	Z+39, r18	; 0x27
    b00e:	a2 ce       	rjmp	.-700    	; 0xad54 <follow_path+0x164>
    b010:	86 e0       	ldi	r24, 0x06	; 6
    b012:	90 e0       	ldi	r25, 0x00	; 0
    b014:	a1 ce       	rjmp	.-702    	; 0xad58 <follow_path+0x168>
    b016:	84 30       	cpi	r24, 0x04	; 4
    b018:	91 05       	cpc	r25, r1
    b01a:	b9 f4       	brne	.+46     	; 0xb04a <follow_path+0x45a>
    b01c:	32 2f       	mov	r19, r18
    b01e:	34 70       	andi	r19, 0x04	; 4
    b020:	25 ff       	sbrs	r18, 5
    b022:	08 c0       	rjmp	.+16     	; 0xb034 <follow_path+0x444>
    b024:	33 23       	and	r19, r19
    b026:	09 f4       	brne	.+2      	; 0xb02a <follow_path+0x43a>
    b028:	b8 ce       	rjmp	.-656    	; 0xad9a <follow_path+0x1aa>
    b02a:	80 e8       	ldi	r24, 0x80	; 128
    b02c:	87 a3       	std	Z+39, r24	; 0x27
    b02e:	80 e0       	ldi	r24, 0x00	; 0
    b030:	90 e0       	ldi	r25, 0x00	; 0
    b032:	0b c0       	rjmp	.+22     	; 0xb04a <follow_path+0x45a>
    b034:	31 11       	cpse	r19, r1
    b036:	09 c0       	rjmp	.+18     	; 0xb04a <follow_path+0x45a>
    b038:	85 e0       	ldi	r24, 0x05	; 5
    b03a:	90 e0       	ldi	r25, 0x00	; 0
    b03c:	06 c0       	rjmp	.+12     	; 0xb04a <follow_path+0x45a>
    b03e:	fb e0       	ldi	r31, 0x0B	; 11
    b040:	8f 16       	cp	r8, r31
    b042:	91 04       	cpc	r9, r1
    b044:	09 f0       	breq	.+2      	; 0xb048 <follow_path+0x458>
    b046:	4f cf       	rjmp	.-354    	; 0xaee6 <follow_path+0x2f6>
    b048:	3d cf       	rjmp	.-390    	; 0xaec4 <follow_path+0x2d4>
    b04a:	2a 96       	adiw	r28, 0x0a	; 10
    b04c:	e2 e1       	ldi	r30, 0x12	; 18
    b04e:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000b052 <f_mount>:
    b052:	a6 e0       	ldi	r26, 0x06	; 6
    b054:	b0 e0       	ldi	r27, 0x00	; 0
    b056:	ef e2       	ldi	r30, 0x2F	; 47
    b058:	f8 e5       	ldi	r31, 0x58	; 88
    b05a:	0c 94 67 e2 	jmp	0x1c4ce	; 0x1c4ce <__prologue_saves__+0x1e>
    b05e:	9c 83       	std	Y+4, r25	; 0x04
    b060:	8b 83       	std	Y+3, r24	; 0x03
    b062:	7e 83       	std	Y+6, r23	; 0x06
    b064:	6d 83       	std	Y+5, r22	; 0x05
    b066:	14 2f       	mov	r17, r20
    b068:	7a 83       	std	Y+2, r23	; 0x02
    b06a:	69 83       	std	Y+1, r22	; 0x01
    b06c:	ce 01       	movw	r24, r28
    b06e:	01 96       	adiw	r24, 0x01	; 1
    b070:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <get_ldnumber>
    b074:	97 fd       	sbrc	r25, 7
    b076:	20 c0       	rjmp	.+64     	; 0xb0b8 <f_mount+0x66>
    b078:	88 0f       	add	r24, r24
    b07a:	99 1f       	adc	r25, r25
    b07c:	fc 01       	movw	r30, r24
    b07e:	e7 5e       	subi	r30, 0xE7	; 231
    b080:	f7 4e       	sbci	r31, 0xE7	; 231
    b082:	01 90       	ld	r0, Z+
    b084:	f0 81       	ld	r31, Z
    b086:	e0 2d       	mov	r30, r0
    b088:	30 97       	sbiw	r30, 0x00	; 0
    b08a:	09 f0       	breq	.+2      	; 0xb08e <f_mount+0x3c>
    b08c:	10 82       	st	Z, r1
    b08e:	eb 81       	ldd	r30, Y+3	; 0x03
    b090:	fc 81       	ldd	r31, Y+4	; 0x04
    b092:	30 97       	sbiw	r30, 0x00	; 0
    b094:	09 f0       	breq	.+2      	; 0xb098 <f_mount+0x46>
    b096:	10 82       	st	Z, r1
    b098:	dc 01       	movw	r26, r24
    b09a:	a7 5e       	subi	r26, 0xE7	; 231
    b09c:	b7 4e       	sbci	r27, 0xE7	; 231
    b09e:	ed 93       	st	X+, r30
    b0a0:	fc 93       	st	X, r31
    b0a2:	11 23       	and	r17, r17
    b0a4:	61 f0       	breq	.+24     	; 0xb0be <f_mount+0x6c>
    b0a6:	40 e0       	ldi	r20, 0x00	; 0
    b0a8:	be 01       	movw	r22, r28
    b0aa:	6d 5f       	subi	r22, 0xFD	; 253
    b0ac:	7f 4f       	sbci	r23, 0xFF	; 255
    b0ae:	ce 01       	movw	r24, r28
    b0b0:	05 96       	adiw	r24, 0x05	; 5
    b0b2:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    b0b6:	05 c0       	rjmp	.+10     	; 0xb0c2 <f_mount+0x70>
    b0b8:	8b e0       	ldi	r24, 0x0B	; 11
    b0ba:	90 e0       	ldi	r25, 0x00	; 0
    b0bc:	02 c0       	rjmp	.+4      	; 0xb0c2 <f_mount+0x70>
    b0be:	80 e0       	ldi	r24, 0x00	; 0
    b0c0:	90 e0       	ldi	r25, 0x00	; 0
    b0c2:	26 96       	adiw	r28, 0x06	; 6
    b0c4:	e3 e0       	ldi	r30, 0x03	; 3
    b0c6:	0c 94 83 e2 	jmp	0x1c506	; 0x1c506 <__epilogue_restores__+0x1e>

0000b0ca <f_open>:
    b0ca:	a6 e3       	ldi	r26, 0x36	; 54
    b0cc:	b0 e0       	ldi	r27, 0x00	; 0
    b0ce:	eb e6       	ldi	r30, 0x6B	; 107
    b0d0:	f8 e5       	ldi	r31, 0x58	; 88
    b0d2:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    b0d6:	7a ab       	std	Y+50, r23	; 0x32
    b0d8:	69 ab       	std	Y+49, r22	; 0x31
    b0da:	00 97       	sbiw	r24, 0x00	; 0
    b0dc:	09 f4       	brne	.+2      	; 0xb0e0 <f_open+0x16>
    b0de:	93 c1       	rjmp	.+806    	; 0xb406 <f_open+0x33c>
    b0e0:	74 2e       	mov	r7, r20
    b0e2:	7c 01       	movw	r14, r24
    b0e4:	24 2f       	mov	r18, r20
    b0e6:	2f 73       	andi	r18, 0x3F	; 63
    b0e8:	32 2e       	mov	r3, r18
    b0ea:	42 2f       	mov	r20, r18
    b0ec:	be 01       	movw	r22, r28
    b0ee:	61 5d       	subi	r22, 0xD1	; 209
    b0f0:	7f 4f       	sbci	r23, 0xFF	; 255
    b0f2:	ce 01       	movw	r24, r28
    b0f4:	c1 96       	adiw	r24, 0x31	; 49
    b0f6:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    b0fa:	00 97       	sbiw	r24, 0x00	; 0
    b0fc:	09 f0       	breq	.+2      	; 0xb100 <f_open+0x36>
    b0fe:	7d c1       	rjmp	.+762    	; 0xb3fa <f_open+0x330>
    b100:	8f a5       	ldd	r24, Y+47	; 0x2f
    b102:	98 a9       	ldd	r25, Y+48	; 0x30
    b104:	9a 83       	std	Y+2, r25	; 0x02
    b106:	89 83       	std	Y+1, r24	; 0x01
    b108:	80 e0       	ldi	r24, 0x00	; 0
    b10a:	92 e0       	ldi	r25, 0x02	; 2
    b10c:	0e 94 bb 67 	call	0xcf76	; 0xcf76 <ff_memalloc>
    b110:	5c 01       	movw	r10, r24
    b112:	00 97       	sbiw	r24, 0x00	; 0
    b114:	09 f4       	brne	.+2      	; 0xb118 <f_open+0x4e>
    b116:	79 c1       	rjmp	.+754    	; 0xb40a <f_open+0x340>
    b118:	ef a5       	ldd	r30, Y+47	; 0x2f
    b11a:	f8 a9       	ldd	r31, Y+48	; 0x30
    b11c:	94 87       	std	Z+12, r25	; 0x0c
    b11e:	83 87       	std	Z+11, r24	; 0x0b
    b120:	69 a9       	ldd	r22, Y+49	; 0x31
    b122:	7a a9       	ldd	r23, Y+50	; 0x32
    b124:	ce 01       	movw	r24, r28
    b126:	01 96       	adiw	r24, 0x01	; 1
    b128:	63 dd       	rcall	.-1338   	; 0xabf0 <follow_path>
    b12a:	8c 01       	movw	r16, r24
    b12c:	89 2b       	or	r24, r25
    b12e:	29 f4       	brne	.+10     	; 0xb13a <f_open+0x70>
    b130:	88 a5       	ldd	r24, Y+40	; 0x28
    b132:	87 ff       	sbrs	r24, 7
    b134:	02 c0       	rjmp	.+4      	; 0xb13a <f_open+0x70>
    b136:	06 e0       	ldi	r16, 0x06	; 6
    b138:	10 e0       	ldi	r17, 0x00	; 0
    b13a:	87 2d       	mov	r24, r7
    b13c:	8c 71       	andi	r24, 0x1C	; 28
    b13e:	09 f4       	brne	.+2      	; 0xb142 <f_open+0x78>
    b140:	75 c0       	rjmp	.+234    	; 0xb22c <f_open+0x162>
    b142:	01 15       	cp	r16, r1
    b144:	11 05       	cpc	r17, r1
    b146:	79 f0       	breq	.+30     	; 0xb166 <f_open+0x9c>
    b148:	04 30       	cpi	r16, 0x04	; 4
    b14a:	11 05       	cpc	r17, r1
    b14c:	09 f0       	breq	.+2      	; 0xb150 <f_open+0x86>
    b14e:	6d c1       	rjmp	.+730    	; 0xb42a <f_open+0x360>
    b150:	ce 01       	movw	r24, r28
    b152:	01 96       	adiw	r24, 0x01	; 1
    b154:	bf db       	rcall	.-2178   	; 0xa8d4 <dir_register>
    b156:	8c 01       	movw	r16, r24
    b158:	89 2b       	or	r24, r25
    b15a:	09 f0       	breq	.+2      	; 0xb15e <f_open+0x94>
    b15c:	66 c1       	rjmp	.+716    	; 0xb42a <f_open+0x360>
    b15e:	33 2d       	mov	r19, r3
    b160:	38 60       	ori	r19, 0x08	; 8
    b162:	33 2e       	mov	r3, r19
    b164:	06 c0       	rjmp	.+12     	; 0xb172 <f_open+0xa8>
    b166:	8d 81       	ldd	r24, Y+5	; 0x05
    b168:	81 71       	andi	r24, 0x11	; 17
    b16a:	09 f0       	breq	.+2      	; 0xb16e <f_open+0xa4>
    b16c:	5c c1       	rjmp	.+696    	; 0xb426 <f_open+0x35c>
    b16e:	72 fc       	sbrc	r7, 2
    b170:	51 c1       	rjmp	.+674    	; 0xb414 <f_open+0x34a>
    b172:	33 fe       	sbrs	r3, 3
    b174:	6b c0       	rjmp	.+214    	; 0xb24c <f_open+0x182>
    b176:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b178:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b17a:	ef a5       	ldd	r30, Y+47	; 0x2f
    b17c:	f8 a9       	ldd	r31, Y+48	; 0x30
    b17e:	b8 01       	movw	r22, r16
    b180:	80 81       	ld	r24, Z
    b182:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    b186:	2b 01       	movw	r4, r22
    b188:	3c 01       	movw	r6, r24
    b18a:	0e 94 2c 6f 	call	0xde58	; 0xde58 <get_fattime>
    b18e:	ab 01       	movw	r20, r22
    b190:	bc 01       	movw	r22, r24
    b192:	c8 01       	movw	r24, r16
    b194:	0e 96       	adiw	r24, 0x0e	; 14
    b196:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <st_dword>
    b19a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b19c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b19e:	80 e2       	ldi	r24, 0x20	; 32
    b1a0:	83 87       	std	Z+11, r24	; 0x0b
    b1a2:	af a5       	ldd	r26, Y+47	; 0x2f
    b1a4:	b8 a9       	ldd	r27, Y+48	; 0x30
    b1a6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b1a8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b1aa:	12 8e       	std	Z+26, r1	; 0x1a
    b1ac:	13 8e       	std	Z+27, r1	; 0x1b
    b1ae:	8c 91       	ld	r24, X
    b1b0:	83 30       	cpi	r24, 0x03	; 3
    b1b2:	11 f4       	brne	.+4      	; 0xb1b8 <f_open+0xee>
    b1b4:	14 8a       	std	Z+20, r1	; 0x14
    b1b6:	15 8a       	std	Z+21, r1	; 0x15
    b1b8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b1ba:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b1bc:	14 8e       	std	Z+28, r1	; 0x1c
    b1be:	15 8e       	std	Z+29, r1	; 0x1d
    b1c0:	16 8e       	std	Z+30, r1	; 0x1e
    b1c2:	17 8e       	std	Z+31, r1	; 0x1f
    b1c4:	81 e0       	ldi	r24, 0x01	; 1
    b1c6:	fd 01       	movw	r30, r26
    b1c8:	83 83       	std	Z+3, r24	; 0x03
    b1ca:	41 14       	cp	r4, r1
    b1cc:	51 04       	cpc	r5, r1
    b1ce:	61 04       	cpc	r6, r1
    b1d0:	71 04       	cpc	r7, r1
    b1d2:	c9 f1       	breq	.+114    	; 0xb246 <f_open+0x17c>
    b1d4:	21 a9       	ldd	r18, Z+49	; 0x31
    b1d6:	32 a9       	ldd	r19, Z+50	; 0x32
    b1d8:	43 a9       	ldd	r20, Z+51	; 0x33
    b1da:	54 a9       	ldd	r21, Z+52	; 0x34
    b1dc:	2b ab       	std	Y+51, r18	; 0x33
    b1de:	3c ab       	std	Y+52, r19	; 0x34
    b1e0:	4d ab       	std	Y+53, r20	; 0x35
    b1e2:	5e ab       	std	Y+54, r21	; 0x36
    b1e4:	00 e0       	ldi	r16, 0x00	; 0
    b1e6:	10 e0       	ldi	r17, 0x00	; 0
    b1e8:	98 01       	movw	r18, r16
    b1ea:	b3 01       	movw	r22, r6
    b1ec:	a2 01       	movw	r20, r4
    b1ee:	ce 01       	movw	r24, r28
    b1f0:	01 96       	adiw	r24, 0x01	; 1
    b1f2:	0e 94 99 50 	call	0xa132	; 0xa132 <remove_chain>
    b1f6:	8c 01       	movw	r16, r24
    b1f8:	89 2b       	or	r24, r25
    b1fa:	09 f0       	breq	.+2      	; 0xb1fe <f_open+0x134>
    b1fc:	16 c1       	rjmp	.+556    	; 0xb42a <f_open+0x360>
    b1fe:	4b a9       	ldd	r20, Y+51	; 0x33
    b200:	5c a9       	ldd	r21, Y+52	; 0x34
    b202:	6d a9       	ldd	r22, Y+53	; 0x35
    b204:	7e a9       	ldd	r23, Y+54	; 0x36
    b206:	8f a5       	ldd	r24, Y+47	; 0x2f
    b208:	98 a9       	ldd	r25, Y+48	; 0x30
    b20a:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    b20e:	8c 01       	movw	r16, r24
    b210:	ef a5       	ldd	r30, Y+47	; 0x2f
    b212:	f8 a9       	ldd	r31, Y+48	; 0x30
    b214:	21 e0       	ldi	r18, 0x01	; 1
    b216:	42 1a       	sub	r4, r18
    b218:	51 08       	sbc	r5, r1
    b21a:	61 08       	sbc	r6, r1
    b21c:	71 08       	sbc	r7, r1
    b21e:	45 86       	std	Z+13, r4	; 0x0d
    b220:	56 86       	std	Z+14, r5	; 0x0e
    b222:	67 86       	std	Z+15, r6	; 0x0f
    b224:	70 8a       	std	Z+16, r7	; 0x10
    b226:	89 2b       	or	r24, r25
    b228:	61 f0       	breq	.+24     	; 0xb242 <f_open+0x178>
    b22a:	ff c0       	rjmp	.+510    	; 0xb42a <f_open+0x360>
    b22c:	01 15       	cp	r16, r1
    b22e:	11 05       	cpc	r17, r1
    b230:	09 f0       	breq	.+2      	; 0xb234 <f_open+0x16a>
    b232:	fb c0       	rjmp	.+502    	; 0xb42a <f_open+0x360>
    b234:	8d 81       	ldd	r24, Y+5	; 0x05
    b236:	84 fd       	sbrc	r24, 4
    b238:	f3 c0       	rjmp	.+486    	; 0xb420 <f_open+0x356>
    b23a:	71 fe       	sbrs	r7, 1
    b23c:	02 c0       	rjmp	.+4      	; 0xb242 <f_open+0x178>
    b23e:	80 fd       	sbrc	r24, 0
    b240:	f2 c0       	rjmp	.+484    	; 0xb426 <f_open+0x35c>
    b242:	33 fe       	sbrs	r3, 3
    b244:	03 c0       	rjmp	.+6      	; 0xb24c <f_open+0x182>
    b246:	33 2d       	mov	r19, r3
    b248:	30 64       	ori	r19, 0x40	; 64
    b24a:	33 2e       	mov	r3, r19
    b24c:	0f a5       	ldd	r16, Y+47	; 0x2f
    b24e:	18 a9       	ldd	r17, Y+48	; 0x30
    b250:	f8 01       	movw	r30, r16
    b252:	81 a9       	ldd	r24, Z+49	; 0x31
    b254:	92 a9       	ldd	r25, Z+50	; 0x32
    b256:	a3 a9       	ldd	r26, Z+51	; 0x33
    b258:	b4 a9       	ldd	r27, Z+52	; 0x34
    b25a:	f7 01       	movw	r30, r14
    b25c:	84 8f       	std	Z+28, r24	; 0x1c
    b25e:	95 8f       	std	Z+29, r25	; 0x1d
    b260:	a6 8f       	std	Z+30, r26	; 0x1e
    b262:	b7 8f       	std	Z+31, r27	; 0x1f
    b264:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b266:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b268:	71 a2       	std	Z+33, r7	; 0x21
    b26a:	60 a2       	std	Z+32, r6	; 0x20
    b26c:	b3 01       	movw	r22, r6
    b26e:	f8 01       	movw	r30, r16
    b270:	80 81       	ld	r24, Z
    b272:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    b276:	f7 01       	movw	r30, r14
    b278:	66 83       	std	Z+6, r22	; 0x06
    b27a:	77 83       	std	Z+7, r23	; 0x07
    b27c:	80 87       	std	Z+8, r24	; 0x08
    b27e:	91 87       	std	Z+9, r25	; 0x09
    b280:	c3 01       	movw	r24, r6
    b282:	4c 96       	adiw	r24, 0x1c	; 28
    b284:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <ld_dword>
    b288:	f7 01       	movw	r30, r14
    b28a:	62 87       	std	Z+10, r22	; 0x0a
    b28c:	73 87       	std	Z+11, r23	; 0x0b
    b28e:	84 87       	std	Z+12, r24	; 0x0c
    b290:	95 87       	std	Z+13, r25	; 0x0d
    b292:	13 a2       	std	Z+35, r1	; 0x23
    b294:	12 a2       	std	Z+34, r1	; 0x22
    b296:	11 83       	std	Z+1, r17	; 0x01
    b298:	00 83       	st	Z, r16
    b29a:	f8 01       	movw	r30, r16
    b29c:	85 81       	ldd	r24, Z+5	; 0x05
    b29e:	96 81       	ldd	r25, Z+6	; 0x06
    b2a0:	f7 01       	movw	r30, r14
    b2a2:	93 83       	std	Z+3, r25	; 0x03
    b2a4:	82 83       	std	Z+2, r24	; 0x02
    b2a6:	36 86       	std	Z+14, r3	; 0x0e
    b2a8:	17 86       	std	Z+15, r1	; 0x0f
    b2aa:	10 8e       	std	Z+24, r1	; 0x18
    b2ac:	11 8e       	std	Z+25, r1	; 0x19
    b2ae:	12 8e       	std	Z+26, r1	; 0x1a
    b2b0:	13 8e       	std	Z+27, r1	; 0x1b
    b2b2:	10 8a       	std	Z+16, r1	; 0x10
    b2b4:	11 8a       	std	Z+17, r1	; 0x11
    b2b6:	12 8a       	std	Z+18, r1	; 0x12
    b2b8:	13 8a       	std	Z+19, r1	; 0x13
    b2ba:	67 01       	movw	r12, r14
    b2bc:	f4 e2       	ldi	r31, 0x24	; 36
    b2be:	cf 0e       	add	r12, r31
    b2c0:	d1 1c       	adc	r13, r1
    b2c2:	40 e0       	ldi	r20, 0x00	; 0
    b2c4:	52 e0       	ldi	r21, 0x02	; 2
    b2c6:	60 e0       	ldi	r22, 0x00	; 0
    b2c8:	70 e0       	ldi	r23, 0x00	; 0
    b2ca:	c6 01       	movw	r24, r12
    b2cc:	0e 94 6e 45 	call	0x8adc	; 0x8adc <mem_set>
    b2d0:	35 fc       	sbrc	r3, 5
    b2d2:	03 c0       	rjmp	.+6      	; 0xb2da <f_open+0x210>
    b2d4:	00 e0       	ldi	r16, 0x00	; 0
    b2d6:	10 e0       	ldi	r17, 0x00	; 0
    b2d8:	89 c0       	rjmp	.+274    	; 0xb3ec <f_open+0x322>
    b2da:	f7 01       	movw	r30, r14
    b2dc:	62 84       	ldd	r6, Z+10	; 0x0a
    b2de:	73 84       	ldd	r7, Z+11	; 0x0b
    b2e0:	84 84       	ldd	r8, Z+12	; 0x0c
    b2e2:	95 84       	ldd	r9, Z+13	; 0x0d
    b2e4:	61 14       	cp	r6, r1
    b2e6:	71 04       	cpc	r7, r1
    b2e8:	81 04       	cpc	r8, r1
    b2ea:	91 04       	cpc	r9, r1
    b2ec:	99 f3       	breq	.-26     	; 0xb2d4 <f_open+0x20a>
    b2ee:	60 8a       	std	Z+16, r6	; 0x10
    b2f0:	71 8a       	std	Z+17, r7	; 0x11
    b2f2:	82 8a       	std	Z+18, r8	; 0x12
    b2f4:	93 8a       	std	Z+19, r9	; 0x13
    b2f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b2f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b2fa:	21 84       	ldd	r2, Z+9	; 0x09
    b2fc:	32 84       	ldd	r3, Z+10	; 0x0a
    b2fe:	c1 01       	movw	r24, r2
    b300:	a0 e0       	ldi	r26, 0x00	; 0
    b302:	b0 e0       	ldi	r27, 0x00	; 0
    b304:	1c 01       	movw	r2, r24
    b306:	2d 01       	movw	r4, r26
    b308:	59 e0       	ldi	r21, 0x09	; 9
    b30a:	22 0c       	add	r2, r2
    b30c:	33 1c       	adc	r3, r3
    b30e:	44 1c       	adc	r4, r4
    b310:	55 1c       	adc	r5, r5
    b312:	5a 95       	dec	r21
    b314:	d1 f7       	brne	.-12     	; 0xb30a <f_open+0x240>
    b316:	f7 01       	movw	r30, r14
    b318:	46 81       	ldd	r20, Z+6	; 0x06
    b31a:	57 81       	ldd	r21, Z+7	; 0x07
    b31c:	60 85       	ldd	r22, Z+8	; 0x08
    b31e:	71 85       	ldd	r23, Z+9	; 0x09
    b320:	26 14       	cp	r2, r6
    b322:	37 04       	cpc	r3, r7
    b324:	48 04       	cpc	r4, r8
    b326:	59 04       	cpc	r5, r9
    b328:	f0 f4       	brcc	.+60     	; 0xb366 <f_open+0x29c>
    b32a:	f7 01       	movw	r30, r14
    b32c:	80 81       	ld	r24, Z
    b32e:	91 81       	ldd	r25, Z+1	; 0x01
    b330:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <get_fat.isra.10>
    b334:	ab 01       	movw	r20, r22
    b336:	bc 01       	movw	r22, r24
    b338:	d4 01       	movw	r26, r8
    b33a:	c3 01       	movw	r24, r6
    b33c:	82 19       	sub	r24, r2
    b33e:	93 09       	sbc	r25, r3
    b340:	a4 09       	sbc	r26, r4
    b342:	b5 09       	sbc	r27, r5
    b344:	3c 01       	movw	r6, r24
    b346:	4d 01       	movw	r8, r26
    b348:	42 30       	cpi	r20, 0x02	; 2
    b34a:	51 05       	cpc	r21, r1
    b34c:	61 05       	cpc	r22, r1
    b34e:	71 05       	cpc	r23, r1
    b350:	08 f4       	brcc	.+2      	; 0xb354 <f_open+0x28a>
    b352:	63 c0       	rjmp	.+198    	; 0xb41a <f_open+0x350>
    b354:	4f 3f       	cpi	r20, 0xFF	; 255
    b356:	ff ef       	ldi	r31, 0xFF	; 255
    b358:	5f 07       	cpc	r21, r31
    b35a:	6f 07       	cpc	r22, r31
    b35c:	7f 07       	cpc	r23, r31
    b35e:	01 f7       	brne	.-64     	; 0xb320 <f_open+0x256>
    b360:	01 e0       	ldi	r16, 0x01	; 1
    b362:	10 e0       	ldi	r17, 0x00	; 0
    b364:	02 c0       	rjmp	.+4      	; 0xb36a <f_open+0x2a0>
    b366:	00 e0       	ldi	r16, 0x00	; 0
    b368:	10 e0       	ldi	r17, 0x00	; 0
    b36a:	f7 01       	movw	r30, r14
    b36c:	44 8b       	std	Z+20, r20	; 0x14
    b36e:	55 8b       	std	Z+21, r21	; 0x15
    b370:	66 8b       	std	Z+22, r22	; 0x16
    b372:	77 8b       	std	Z+23, r23	; 0x17
    b374:	01 15       	cp	r16, r1
    b376:	11 05       	cpc	r17, r1
    b378:	c9 f5       	brne	.+114    	; 0xb3ec <f_open+0x322>
    b37a:	d4 01       	movw	r26, r8
    b37c:	c3 01       	movw	r24, r6
    b37e:	91 70       	andi	r25, 0x01	; 1
    b380:	aa 27       	eor	r26, r26
    b382:	bb 27       	eor	r27, r27
    b384:	89 2b       	or	r24, r25
    b386:	8a 2b       	or	r24, r26
    b388:	8b 2b       	or	r24, r27
    b38a:	09 f4       	brne	.+2      	; 0xb38e <f_open+0x2c4>
    b38c:	a3 cf       	rjmp	.-186    	; 0xb2d4 <f_open+0x20a>
    b38e:	4f a4       	ldd	r4, Y+47	; 0x2f
    b390:	58 a8       	ldd	r5, Y+48	; 0x30
    b392:	c2 01       	movw	r24, r4
    b394:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    b398:	61 15       	cp	r22, r1
    b39a:	71 05       	cpc	r23, r1
    b39c:	81 05       	cpc	r24, r1
    b39e:	91 05       	cpc	r25, r1
    b3a0:	19 f1       	breq	.+70     	; 0xb3e8 <f_open+0x31e>
    b3a2:	94 01       	movw	r18, r8
    b3a4:	83 01       	movw	r16, r6
    b3a6:	49 e0       	ldi	r20, 0x09	; 9
    b3a8:	36 95       	lsr	r19
    b3aa:	27 95       	ror	r18
    b3ac:	17 95       	ror	r17
    b3ae:	07 95       	ror	r16
    b3b0:	4a 95       	dec	r20
    b3b2:	d1 f7       	brne	.-12     	; 0xb3a8 <f_open+0x2de>
    b3b4:	a9 01       	movw	r20, r18
    b3b6:	98 01       	movw	r18, r16
    b3b8:	26 0f       	add	r18, r22
    b3ba:	37 1f       	adc	r19, r23
    b3bc:	48 1f       	adc	r20, r24
    b3be:	59 1f       	adc	r21, r25
    b3c0:	f7 01       	movw	r30, r14
    b3c2:	20 8f       	std	Z+24, r18	; 0x18
    b3c4:	31 8f       	std	Z+25, r19	; 0x19
    b3c6:	42 8f       	std	Z+26, r20	; 0x1a
    b3c8:	53 8f       	std	Z+27, r21	; 0x1b
    b3ca:	01 e0       	ldi	r16, 0x01	; 1
    b3cc:	10 e0       	ldi	r17, 0x00	; 0
    b3ce:	b6 01       	movw	r22, r12
    b3d0:	f2 01       	movw	r30, r4
    b3d2:	81 81       	ldd	r24, Z+1	; 0x01
    b3d4:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <disk_read>
    b3d8:	31 e0       	ldi	r19, 0x01	; 1
    b3da:	20 e0       	ldi	r18, 0x00	; 0
    b3dc:	89 2b       	or	r24, r25
    b3de:	09 f4       	brne	.+2      	; 0xb3e2 <f_open+0x318>
    b3e0:	30 e0       	ldi	r19, 0x00	; 0
    b3e2:	03 2f       	mov	r16, r19
    b3e4:	12 2f       	mov	r17, r18
    b3e6:	02 c0       	rjmp	.+4      	; 0xb3ec <f_open+0x322>
    b3e8:	02 e0       	ldi	r16, 0x02	; 2
    b3ea:	10 e0       	ldi	r17, 0x00	; 0
    b3ec:	c5 01       	movw	r24, r10
    b3ee:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <ff_memfree>
    b3f2:	01 15       	cp	r16, r1
    b3f4:	11 05       	cpc	r17, r1
    b3f6:	59 f0       	breq	.+22     	; 0xb40e <f_open+0x344>
    b3f8:	01 c0       	rjmp	.+2      	; 0xb3fc <f_open+0x332>
    b3fa:	8c 01       	movw	r16, r24
    b3fc:	f7 01       	movw	r30, r14
    b3fe:	11 82       	std	Z+1, r1	; 0x01
    b400:	10 82       	st	Z, r1
    b402:	c8 01       	movw	r24, r16
    b404:	16 c0       	rjmp	.+44     	; 0xb432 <f_open+0x368>
    b406:	89 e0       	ldi	r24, 0x09	; 9
    b408:	03 c0       	rjmp	.+6      	; 0xb410 <f_open+0x346>
    b40a:	81 e1       	ldi	r24, 0x11	; 17
    b40c:	01 c0       	rjmp	.+2      	; 0xb410 <f_open+0x346>
    b40e:	80 e0       	ldi	r24, 0x00	; 0
    b410:	90 e0       	ldi	r25, 0x00	; 0
    b412:	0f c0       	rjmp	.+30     	; 0xb432 <f_open+0x368>
    b414:	08 e0       	ldi	r16, 0x08	; 8
    b416:	10 e0       	ldi	r17, 0x00	; 0
    b418:	08 c0       	rjmp	.+16     	; 0xb42a <f_open+0x360>
    b41a:	02 e0       	ldi	r16, 0x02	; 2
    b41c:	10 e0       	ldi	r17, 0x00	; 0
    b41e:	a5 cf       	rjmp	.-182    	; 0xb36a <f_open+0x2a0>
    b420:	04 e0       	ldi	r16, 0x04	; 4
    b422:	10 e0       	ldi	r17, 0x00	; 0
    b424:	02 c0       	rjmp	.+4      	; 0xb42a <f_open+0x360>
    b426:	07 e0       	ldi	r16, 0x07	; 7
    b428:	10 e0       	ldi	r17, 0x00	; 0
    b42a:	c5 01       	movw	r24, r10
    b42c:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <ff_memfree>
    b430:	e5 cf       	rjmp	.-54     	; 0xb3fc <f_open+0x332>
    b432:	e6 96       	adiw	r28, 0x36	; 54
    b434:	e2 e1       	ldi	r30, 0x12	; 18
    b436:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000b43a <f_read>:
    b43a:	a6 e0       	ldi	r26, 0x06	; 6
    b43c:	b0 e0       	ldi	r27, 0x00	; 0
    b43e:	e3 e2       	ldi	r30, 0x23	; 35
    b440:	fa e5       	ldi	r31, 0x5A	; 90
    b442:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    b446:	7c 01       	movw	r14, r24
    b448:	4b 01       	movw	r8, r22
    b44a:	5a 01       	movw	r10, r20
    b44c:	3e 83       	std	Y+6, r19	; 0x06
    b44e:	2d 83       	std	Y+5, r18	; 0x05
    b450:	f9 01       	movw	r30, r18
    b452:	11 82       	std	Z+1, r1	; 0x01
    b454:	10 82       	st	Z, r1
    b456:	be 01       	movw	r22, r28
    b458:	6f 5f       	subi	r22, 0xFF	; 255
    b45a:	7f 4f       	sbci	r23, 0xFF	; 255
    b45c:	0e 94 ab 46 	call	0x8d56	; 0x8d56 <validate>
    b460:	00 97       	sbiw	r24, 0x00	; 0
    b462:	09 f0       	breq	.+2      	; 0xb466 <f_read+0x2c>
    b464:	31 c1       	rjmp	.+610    	; 0xb6c8 <f_read+0x28e>
    b466:	f7 01       	movw	r30, r14
    b468:	87 85       	ldd	r24, Z+15	; 0x0f
    b46a:	90 e0       	ldi	r25, 0x00	; 0
    b46c:	00 97       	sbiw	r24, 0x00	; 0
    b46e:	09 f0       	breq	.+2      	; 0xb472 <f_read+0x38>
    b470:	2b c1       	rjmp	.+598    	; 0xb6c8 <f_read+0x28e>
    b472:	86 85       	ldd	r24, Z+14	; 0x0e
    b474:	80 ff       	sbrs	r24, 0
    b476:	26 c1       	rjmp	.+588    	; 0xb6c4 <f_read+0x28a>
    b478:	82 85       	ldd	r24, Z+10	; 0x0a
    b47a:	93 85       	ldd	r25, Z+11	; 0x0b
    b47c:	a4 85       	ldd	r26, Z+12	; 0x0c
    b47e:	b5 85       	ldd	r27, Z+13	; 0x0d
    b480:	40 89       	ldd	r20, Z+16	; 0x10
    b482:	51 89       	ldd	r21, Z+17	; 0x11
    b484:	62 89       	ldd	r22, Z+18	; 0x12
    b486:	73 89       	ldd	r23, Z+19	; 0x13
    b488:	84 1b       	sub	r24, r20
    b48a:	95 0b       	sbc	r25, r21
    b48c:	a6 0b       	sbc	r26, r22
    b48e:	b7 0b       	sbc	r27, r23
    b490:	a5 01       	movw	r20, r10
    b492:	60 e0       	ldi	r22, 0x00	; 0
    b494:	70 e0       	ldi	r23, 0x00	; 0
    b496:	84 17       	cp	r24, r20
    b498:	95 07       	cpc	r25, r21
    b49a:	a6 07       	cpc	r26, r22
    b49c:	b7 07       	cpc	r27, r23
    b49e:	08 f4       	brcc	.+2      	; 0xb4a2 <f_read+0x68>
    b4a0:	5c 01       	movw	r10, r24
    b4a2:	17 01       	movw	r2, r14
    b4a4:	f4 e2       	ldi	r31, 0x24	; 36
    b4a6:	2f 0e       	add	r2, r31
    b4a8:	31 1c       	adc	r3, r1
    b4aa:	a1 14       	cp	r10, r1
    b4ac:	b1 04       	cpc	r11, r1
    b4ae:	09 f4       	brne	.+2      	; 0xb4b2 <f_read+0x78>
    b4b0:	07 c1       	rjmp	.+526    	; 0xb6c0 <f_read+0x286>
    b4b2:	f7 01       	movw	r30, r14
    b4b4:	40 89       	ldd	r20, Z+16	; 0x10
    b4b6:	51 89       	ldd	r21, Z+17	; 0x11
    b4b8:	62 89       	ldd	r22, Z+18	; 0x12
    b4ba:	73 89       	ldd	r23, Z+19	; 0x13
    b4bc:	db 01       	movw	r26, r22
    b4be:	ca 01       	movw	r24, r20
    b4c0:	91 70       	andi	r25, 0x01	; 1
    b4c2:	aa 27       	eor	r26, r26
    b4c4:	bb 27       	eor	r27, r27
    b4c6:	89 2b       	or	r24, r25
    b4c8:	8a 2b       	or	r24, r26
    b4ca:	8b 2b       	or	r24, r27
    b4cc:	09 f0       	breq	.+2      	; 0xb4d0 <f_read+0x96>
    b4ce:	cb c0       	rjmp	.+406    	; 0xb666 <f_read+0x22c>
    b4d0:	e9 81       	ldd	r30, Y+1	; 0x01
    b4d2:	fa 81       	ldd	r31, Y+2	; 0x02
    b4d4:	01 85       	ldd	r16, Z+9	; 0x09
    b4d6:	12 85       	ldd	r17, Z+10	; 0x0a
    b4d8:	01 50       	subi	r16, 0x01	; 1
    b4da:	11 09       	sbc	r17, r1
    b4dc:	db 01       	movw	r26, r22
    b4de:	ca 01       	movw	r24, r20
    b4e0:	e9 e0       	ldi	r30, 0x09	; 9
    b4e2:	b6 95       	lsr	r27
    b4e4:	a7 95       	ror	r26
    b4e6:	97 95       	ror	r25
    b4e8:	87 95       	ror	r24
    b4ea:	ea 95       	dec	r30
    b4ec:	d1 f7       	brne	.-12     	; 0xb4e2 <f_read+0xa8>
    b4ee:	08 23       	and	r16, r24
    b4f0:	19 23       	and	r17, r25
    b4f2:	01 15       	cp	r16, r1
    b4f4:	11 05       	cpc	r17, r1
    b4f6:	91 f5       	brne	.+100    	; 0xb55c <f_read+0x122>
    b4f8:	f7 01       	movw	r30, r14
    b4fa:	41 15       	cp	r20, r1
    b4fc:	51 05       	cpc	r21, r1
    b4fe:	61 05       	cpc	r22, r1
    b500:	71 05       	cpc	r23, r1
    b502:	29 f4       	brne	.+10     	; 0xb50e <f_read+0xd4>
    b504:	66 81       	ldd	r22, Z+6	; 0x06
    b506:	77 81       	ldd	r23, Z+7	; 0x07
    b508:	80 85       	ldd	r24, Z+8	; 0x08
    b50a:	91 85       	ldd	r25, Z+9	; 0x09
    b50c:	11 c0       	rjmp	.+34     	; 0xb530 <f_read+0xf6>
    b50e:	82 a1       	ldd	r24, Z+34	; 0x22
    b510:	93 a1       	ldd	r25, Z+35	; 0x23
    b512:	89 2b       	or	r24, r25
    b514:	21 f0       	breq	.+8      	; 0xb51e <f_read+0xe4>
    b516:	c7 01       	movw	r24, r14
    b518:	0e 94 34 46 	call	0x8c68	; 0x8c68 <clmt_clust>
    b51c:	09 c0       	rjmp	.+18     	; 0xb530 <f_read+0xf6>
    b51e:	f7 01       	movw	r30, r14
    b520:	44 89       	ldd	r20, Z+20	; 0x14
    b522:	55 89       	ldd	r21, Z+21	; 0x15
    b524:	66 89       	ldd	r22, Z+22	; 0x16
    b526:	77 89       	ldd	r23, Z+23	; 0x17
    b528:	80 81       	ld	r24, Z
    b52a:	91 81       	ldd	r25, Z+1	; 0x01
    b52c:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <get_fat.isra.10>
    b530:	62 30       	cpi	r22, 0x02	; 2
    b532:	71 05       	cpc	r23, r1
    b534:	81 05       	cpc	r24, r1
    b536:	91 05       	cpc	r25, r1
    b538:	10 f4       	brcc	.+4      	; 0xb53e <f_read+0x104>
    b53a:	82 e0       	ldi	r24, 0x02	; 2
    b53c:	07 c0       	rjmp	.+14     	; 0xb54c <f_read+0x112>
    b53e:	6f 3f       	cpi	r22, 0xFF	; 255
    b540:	ff ef       	ldi	r31, 0xFF	; 255
    b542:	7f 07       	cpc	r23, r31
    b544:	8f 07       	cpc	r24, r31
    b546:	9f 07       	cpc	r25, r31
    b548:	21 f4       	brne	.+8      	; 0xb552 <f_read+0x118>
    b54a:	81 e0       	ldi	r24, 0x01	; 1
    b54c:	f7 01       	movw	r30, r14
    b54e:	87 87       	std	Z+15, r24	; 0x0f
    b550:	ba c0       	rjmp	.+372    	; 0xb6c6 <f_read+0x28c>
    b552:	f7 01       	movw	r30, r14
    b554:	64 8b       	std	Z+20, r22	; 0x14
    b556:	75 8b       	std	Z+21, r23	; 0x15
    b558:	86 8b       	std	Z+22, r24	; 0x16
    b55a:	97 8b       	std	Z+23, r25	; 0x17
    b55c:	89 81       	ldd	r24, Y+1	; 0x01
    b55e:	9a 81       	ldd	r25, Y+2	; 0x02
    b560:	9c 83       	std	Y+4, r25	; 0x04
    b562:	8b 83       	std	Y+3, r24	; 0x03
    b564:	f7 01       	movw	r30, r14
    b566:	44 89       	ldd	r20, Z+20	; 0x14
    b568:	55 89       	ldd	r21, Z+21	; 0x15
    b56a:	66 89       	ldd	r22, Z+22	; 0x16
    b56c:	77 89       	ldd	r23, Z+23	; 0x17
    b56e:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    b572:	61 15       	cp	r22, r1
    b574:	71 05       	cpc	r23, r1
    b576:	81 05       	cpc	r24, r1
    b578:	91 05       	cpc	r25, r1
    b57a:	f9 f2       	breq	.-66     	; 0xb53a <f_read+0x100>
    b57c:	2b 01       	movw	r4, r22
    b57e:	3c 01       	movw	r6, r24
    b580:	40 0e       	add	r4, r16
    b582:	51 1e       	adc	r5, r17
    b584:	61 1c       	adc	r6, r1
    b586:	71 1c       	adc	r7, r1
    b588:	65 01       	movw	r12, r10
    b58a:	cd 2c       	mov	r12, r13
    b58c:	dd 24       	eor	r13, r13
    b58e:	c6 94       	lsr	r12
    b590:	c1 14       	cp	r12, r1
    b592:	d1 04       	cpc	r13, r1
    b594:	d1 f1       	breq	.+116    	; 0xb60a <f_read+0x1d0>
    b596:	eb 81       	ldd	r30, Y+3	; 0x03
    b598:	fc 81       	ldd	r31, Y+4	; 0x04
    b59a:	81 85       	ldd	r24, Z+9	; 0x09
    b59c:	92 85       	ldd	r25, Z+10	; 0x0a
    b59e:	98 01       	movw	r18, r16
    b5a0:	2c 0d       	add	r18, r12
    b5a2:	3d 1d       	adc	r19, r13
    b5a4:	82 17       	cp	r24, r18
    b5a6:	93 07       	cpc	r25, r19
    b5a8:	18 f4       	brcc	.+6      	; 0xb5b0 <f_read+0x176>
    b5aa:	6c 01       	movw	r12, r24
    b5ac:	c0 1a       	sub	r12, r16
    b5ae:	d1 0a       	sbc	r13, r17
    b5b0:	86 01       	movw	r16, r12
    b5b2:	a3 01       	movw	r20, r6
    b5b4:	92 01       	movw	r18, r4
    b5b6:	b4 01       	movw	r22, r8
    b5b8:	eb 81       	ldd	r30, Y+3	; 0x03
    b5ba:	fc 81       	ldd	r31, Y+4	; 0x04
    b5bc:	81 81       	ldd	r24, Z+1	; 0x01
    b5be:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <disk_read>
    b5c2:	89 2b       	or	r24, r25
    b5c4:	11 f6       	brne	.-124    	; 0xb54a <f_read+0x110>
    b5c6:	f7 01       	movw	r30, r14
    b5c8:	86 85       	ldd	r24, Z+14	; 0x0e
    b5ca:	87 ff       	sbrs	r24, 7
    b5cc:	1a c0       	rjmp	.+52     	; 0xb602 <f_read+0x1c8>
    b5ce:	80 8d       	ldd	r24, Z+24	; 0x18
    b5d0:	91 8d       	ldd	r25, Z+25	; 0x19
    b5d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b5d4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b5d6:	84 19       	sub	r24, r4
    b5d8:	95 09       	sbc	r25, r5
    b5da:	a6 09       	sbc	r26, r6
    b5dc:	b7 09       	sbc	r27, r7
    b5de:	a6 01       	movw	r20, r12
    b5e0:	60 e0       	ldi	r22, 0x00	; 0
    b5e2:	70 e0       	ldi	r23, 0x00	; 0
    b5e4:	84 17       	cp	r24, r20
    b5e6:	95 07       	cpc	r25, r21
    b5e8:	a6 07       	cpc	r26, r22
    b5ea:	b7 07       	cpc	r27, r23
    b5ec:	50 f4       	brcc	.+20     	; 0xb602 <f_read+0x1c8>
    b5ee:	98 2f       	mov	r25, r24
    b5f0:	88 27       	eor	r24, r24
    b5f2:	99 0f       	add	r25, r25
    b5f4:	40 e0       	ldi	r20, 0x00	; 0
    b5f6:	52 e0       	ldi	r21, 0x02	; 2
    b5f8:	b1 01       	movw	r22, r2
    b5fa:	88 0d       	add	r24, r8
    b5fc:	99 1d       	adc	r25, r9
    b5fe:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    b602:	dc 2c       	mov	r13, r12
    b604:	cc 24       	eor	r12, r12
    b606:	dd 0c       	add	r13, r13
    b608:	41 c0       	rjmp	.+130    	; 0xb68c <f_read+0x252>
    b60a:	f7 01       	movw	r30, r14
    b60c:	20 8d       	ldd	r18, Z+24	; 0x18
    b60e:	31 8d       	ldd	r19, Z+25	; 0x19
    b610:	42 8d       	ldd	r20, Z+26	; 0x1a
    b612:	53 8d       	ldd	r21, Z+27	; 0x1b
    b614:	42 16       	cp	r4, r18
    b616:	53 06       	cpc	r5, r19
    b618:	64 06       	cpc	r6, r20
    b61a:	75 06       	cpc	r7, r21
    b61c:	f9 f0       	breq	.+62     	; 0xb65c <f_read+0x222>
    b61e:	86 85       	ldd	r24, Z+14	; 0x0e
    b620:	87 ff       	sbrs	r24, 7
    b622:	0f c0       	rjmp	.+30     	; 0xb642 <f_read+0x208>
    b624:	01 e0       	ldi	r16, 0x01	; 1
    b626:	10 e0       	ldi	r17, 0x00	; 0
    b628:	b1 01       	movw	r22, r2
    b62a:	eb 81       	ldd	r30, Y+3	; 0x03
    b62c:	fc 81       	ldd	r31, Y+4	; 0x04
    b62e:	81 81       	ldd	r24, Z+1	; 0x01
    b630:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    b634:	89 2b       	or	r24, r25
    b636:	09 f0       	breq	.+2      	; 0xb63a <f_read+0x200>
    b638:	88 cf       	rjmp	.-240    	; 0xb54a <f_read+0x110>
    b63a:	f7 01       	movw	r30, r14
    b63c:	86 85       	ldd	r24, Z+14	; 0x0e
    b63e:	8f 77       	andi	r24, 0x7F	; 127
    b640:	86 87       	std	Z+14, r24	; 0x0e
    b642:	e9 81       	ldd	r30, Y+1	; 0x01
    b644:	fa 81       	ldd	r31, Y+2	; 0x02
    b646:	01 e0       	ldi	r16, 0x01	; 1
    b648:	10 e0       	ldi	r17, 0x00	; 0
    b64a:	a3 01       	movw	r20, r6
    b64c:	92 01       	movw	r18, r4
    b64e:	b1 01       	movw	r22, r2
    b650:	81 81       	ldd	r24, Z+1	; 0x01
    b652:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <disk_read>
    b656:	89 2b       	or	r24, r25
    b658:	09 f0       	breq	.+2      	; 0xb65c <f_read+0x222>
    b65a:	77 cf       	rjmp	.-274    	; 0xb54a <f_read+0x110>
    b65c:	f7 01       	movw	r30, r14
    b65e:	40 8e       	std	Z+24, r4	; 0x18
    b660:	51 8e       	std	Z+25, r5	; 0x19
    b662:	62 8e       	std	Z+26, r6	; 0x1a
    b664:	73 8e       	std	Z+27, r7	; 0x1b
    b666:	f7 01       	movw	r30, r14
    b668:	60 89       	ldd	r22, Z+16	; 0x10
    b66a:	71 89       	ldd	r23, Z+17	; 0x11
    b66c:	71 70       	andi	r23, 0x01	; 1
    b66e:	80 e0       	ldi	r24, 0x00	; 0
    b670:	92 e0       	ldi	r25, 0x02	; 2
    b672:	86 1b       	sub	r24, r22
    b674:	97 0b       	sbc	r25, r23
    b676:	65 01       	movw	r12, r10
    b678:	8a 15       	cp	r24, r10
    b67a:	9b 05       	cpc	r25, r11
    b67c:	08 f4       	brcc	.+2      	; 0xb680 <f_read+0x246>
    b67e:	6c 01       	movw	r12, r24
    b680:	62 0d       	add	r22, r2
    b682:	73 1d       	adc	r23, r3
    b684:	a6 01       	movw	r20, r12
    b686:	c4 01       	movw	r24, r8
    b688:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    b68c:	ac 18       	sub	r10, r12
    b68e:	bd 08       	sbc	r11, r13
    b690:	ed 81       	ldd	r30, Y+5	; 0x05
    b692:	fe 81       	ldd	r31, Y+6	; 0x06
    b694:	80 81       	ld	r24, Z
    b696:	91 81       	ldd	r25, Z+1	; 0x01
    b698:	8c 0d       	add	r24, r12
    b69a:	9d 1d       	adc	r25, r13
    b69c:	91 83       	std	Z+1, r25	; 0x01
    b69e:	80 83       	st	Z, r24
    b6a0:	8c 0c       	add	r8, r12
    b6a2:	9d 1c       	adc	r9, r13
    b6a4:	f7 01       	movw	r30, r14
    b6a6:	80 89       	ldd	r24, Z+16	; 0x10
    b6a8:	91 89       	ldd	r25, Z+17	; 0x11
    b6aa:	a2 89       	ldd	r26, Z+18	; 0x12
    b6ac:	b3 89       	ldd	r27, Z+19	; 0x13
    b6ae:	8c 0d       	add	r24, r12
    b6b0:	9d 1d       	adc	r25, r13
    b6b2:	a1 1d       	adc	r26, r1
    b6b4:	b1 1d       	adc	r27, r1
    b6b6:	80 8b       	std	Z+16, r24	; 0x10
    b6b8:	91 8b       	std	Z+17, r25	; 0x11
    b6ba:	a2 8b       	std	Z+18, r26	; 0x12
    b6bc:	b3 8b       	std	Z+19, r27	; 0x13
    b6be:	f5 ce       	rjmp	.-534    	; 0xb4aa <f_read+0x70>
    b6c0:	80 e0       	ldi	r24, 0x00	; 0
    b6c2:	01 c0       	rjmp	.+2      	; 0xb6c6 <f_read+0x28c>
    b6c4:	87 e0       	ldi	r24, 0x07	; 7
    b6c6:	90 e0       	ldi	r25, 0x00	; 0
    b6c8:	26 96       	adiw	r28, 0x06	; 6
    b6ca:	e2 e1       	ldi	r30, 0x12	; 18
    b6cc:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000b6d0 <f_write>:
    b6d0:	a8 e0       	ldi	r26, 0x08	; 8
    b6d2:	b0 e0       	ldi	r27, 0x00	; 0
    b6d4:	ee e6       	ldi	r30, 0x6E	; 110
    b6d6:	fb e5       	ldi	r31, 0x5B	; 91
    b6d8:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    b6dc:	7c 01       	movw	r14, r24
    b6de:	3b 01       	movw	r6, r22
    b6e0:	5a 01       	movw	r10, r20
    b6e2:	38 87       	std	Y+8, r19	; 0x08
    b6e4:	2f 83       	std	Y+7, r18	; 0x07
    b6e6:	f9 01       	movw	r30, r18
    b6e8:	11 82       	std	Z+1, r1	; 0x01
    b6ea:	10 82       	st	Z, r1
    b6ec:	be 01       	movw	r22, r28
    b6ee:	6f 5f       	subi	r22, 0xFF	; 255
    b6f0:	7f 4f       	sbci	r23, 0xFF	; 255
    b6f2:	0e 94 ab 46 	call	0x8d56	; 0x8d56 <validate>
    b6f6:	00 97       	sbiw	r24, 0x00	; 0
    b6f8:	09 f0       	breq	.+2      	; 0xb6fc <f_write+0x2c>
    b6fa:	7d c1       	rjmp	.+762    	; 0xb9f6 <f_write+0x326>
    b6fc:	f7 01       	movw	r30, r14
    b6fe:	87 85       	ldd	r24, Z+15	; 0x0f
    b700:	90 e0       	ldi	r25, 0x00	; 0
    b702:	00 97       	sbiw	r24, 0x00	; 0
    b704:	09 f0       	breq	.+2      	; 0xb708 <f_write+0x38>
    b706:	77 c1       	rjmp	.+750    	; 0xb9f6 <f_write+0x326>
    b708:	86 85       	ldd	r24, Z+14	; 0x0e
    b70a:	81 ff       	sbrs	r24, 1
    b70c:	72 c1       	rjmp	.+740    	; 0xb9f2 <f_write+0x322>
    b70e:	80 89       	ldd	r24, Z+16	; 0x10
    b710:	91 89       	ldd	r25, Z+17	; 0x11
    b712:	a2 89       	ldd	r26, Z+18	; 0x12
    b714:	b3 89       	ldd	r27, Z+19	; 0x13
    b716:	ac 01       	movw	r20, r24
    b718:	bd 01       	movw	r22, r26
    b71a:	4a 0d       	add	r20, r10
    b71c:	5b 1d       	adc	r21, r11
    b71e:	61 1d       	adc	r22, r1
    b720:	71 1d       	adc	r23, r1
    b722:	48 17       	cp	r20, r24
    b724:	59 07       	cpc	r21, r25
    b726:	6a 07       	cpc	r22, r26
    b728:	7b 07       	cpc	r23, r27
    b72a:	18 f4       	brcc	.+6      	; 0xb732 <f_write+0x62>
    b72c:	5c 01       	movw	r10, r24
    b72e:	a0 94       	com	r10
    b730:	b0 94       	com	r11
    b732:	97 01       	movw	r18, r14
    b734:	2c 5d       	subi	r18, 0xDC	; 220
    b736:	3f 4f       	sbci	r19, 0xFF	; 255
    b738:	3e 83       	std	Y+6, r19	; 0x06
    b73a:	2d 83       	std	Y+5, r18	; 0x05
    b73c:	a1 14       	cp	r10, r1
    b73e:	b1 04       	cpc	r11, r1
    b740:	09 f4       	brne	.+2      	; 0xb744 <f_write+0x74>
    b742:	4d c0       	rjmp	.+154    	; 0xb7de <f_write+0x10e>
    b744:	f7 01       	movw	r30, r14
    b746:	40 89       	ldd	r20, Z+16	; 0x10
    b748:	51 89       	ldd	r21, Z+17	; 0x11
    b74a:	62 89       	ldd	r22, Z+18	; 0x12
    b74c:	73 89       	ldd	r23, Z+19	; 0x13
    b74e:	db 01       	movw	r26, r22
    b750:	ca 01       	movw	r24, r20
    b752:	91 70       	andi	r25, 0x01	; 1
    b754:	aa 27       	eor	r26, r26
    b756:	bb 27       	eor	r27, r27
    b758:	89 2b       	or	r24, r25
    b75a:	8a 2b       	or	r24, r26
    b75c:	8b 2b       	or	r24, r27
    b75e:	09 f0       	breq	.+2      	; 0xb762 <f_write+0x92>
    b760:	05 c1       	rjmp	.+522    	; 0xb96c <f_write+0x29c>
    b762:	e9 81       	ldd	r30, Y+1	; 0x01
    b764:	fa 81       	ldd	r31, Y+2	; 0x02
    b766:	81 84       	ldd	r8, Z+9	; 0x09
    b768:	92 84       	ldd	r9, Z+10	; 0x0a
    b76a:	f1 e0       	ldi	r31, 0x01	; 1
    b76c:	8f 1a       	sub	r8, r31
    b76e:	91 08       	sbc	r9, r1
    b770:	db 01       	movw	r26, r22
    b772:	ca 01       	movw	r24, r20
    b774:	e9 e0       	ldi	r30, 0x09	; 9
    b776:	b6 95       	lsr	r27
    b778:	a7 95       	ror	r26
    b77a:	97 95       	ror	r25
    b77c:	87 95       	ror	r24
    b77e:	ea 95       	dec	r30
    b780:	d1 f7       	brne	.-12     	; 0xb776 <f_write+0xa6>
    b782:	88 22       	and	r8, r24
    b784:	99 22       	and	r9, r25
    b786:	81 14       	cp	r8, r1
    b788:	91 04       	cpc	r9, r1
    b78a:	09 f0       	breq	.+2      	; 0xb78e <f_write+0xbe>
    b78c:	51 c0       	rjmp	.+162    	; 0xb830 <f_write+0x160>
    b78e:	f7 01       	movw	r30, r14
    b790:	41 15       	cp	r20, r1
    b792:	51 05       	cpc	r21, r1
    b794:	61 05       	cpc	r22, r1
    b796:	71 05       	cpc	r23, r1
    b798:	69 f4       	brne	.+26     	; 0xb7b4 <f_write+0xe4>
    b79a:	66 81       	ldd	r22, Z+6	; 0x06
    b79c:	77 81       	ldd	r23, Z+7	; 0x07
    b79e:	80 85       	ldd	r24, Z+8	; 0x08
    b7a0:	91 85       	ldd	r25, Z+9	; 0x09
    b7a2:	61 15       	cp	r22, r1
    b7a4:	71 05       	cpc	r23, r1
    b7a6:	81 05       	cpc	r24, r1
    b7a8:	91 05       	cpc	r25, r1
    b7aa:	f9 f4       	brne	.+62     	; 0xb7ea <f_write+0x11a>
    b7ac:	40 e0       	ldi	r20, 0x00	; 0
    b7ae:	50 e0       	ldi	r21, 0x00	; 0
    b7b0:	ba 01       	movw	r22, r20
    b7b2:	0d c0       	rjmp	.+26     	; 0xb7ce <f_write+0xfe>
    b7b4:	82 a1       	ldd	r24, Z+34	; 0x22
    b7b6:	93 a1       	ldd	r25, Z+35	; 0x23
    b7b8:	89 2b       	or	r24, r25
    b7ba:	21 f0       	breq	.+8      	; 0xb7c4 <f_write+0xf4>
    b7bc:	c7 01       	movw	r24, r14
    b7be:	0e 94 34 46 	call	0x8c68	; 0x8c68 <clmt_clust>
    b7c2:	08 c0       	rjmp	.+16     	; 0xb7d4 <f_write+0x104>
    b7c4:	f7 01       	movw	r30, r14
    b7c6:	44 89       	ldd	r20, Z+20	; 0x14
    b7c8:	55 89       	ldd	r21, Z+21	; 0x15
    b7ca:	66 89       	ldd	r22, Z+22	; 0x16
    b7cc:	77 89       	ldd	r23, Z+23	; 0x17
    b7ce:	c7 01       	movw	r24, r14
    b7d0:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <create_chain>
    b7d4:	61 15       	cp	r22, r1
    b7d6:	71 05       	cpc	r23, r1
    b7d8:	81 05       	cpc	r24, r1
    b7da:	91 05       	cpc	r25, r1
    b7dc:	31 f4       	brne	.+12     	; 0xb7ea <f_write+0x11a>
    b7de:	f7 01       	movw	r30, r14
    b7e0:	86 85       	ldd	r24, Z+14	; 0x0e
    b7e2:	80 64       	ori	r24, 0x40	; 64
    b7e4:	86 87       	std	Z+14, r24	; 0x0e
    b7e6:	80 e0       	ldi	r24, 0x00	; 0
    b7e8:	05 c1       	rjmp	.+522    	; 0xb9f4 <f_write+0x324>
    b7ea:	61 30       	cpi	r22, 0x01	; 1
    b7ec:	71 05       	cpc	r23, r1
    b7ee:	81 05       	cpc	r24, r1
    b7f0:	91 05       	cpc	r25, r1
    b7f2:	11 f4       	brne	.+4      	; 0xb7f8 <f_write+0x128>
    b7f4:	82 e0       	ldi	r24, 0x02	; 2
    b7f6:	07 c0       	rjmp	.+14     	; 0xb806 <f_write+0x136>
    b7f8:	6f 3f       	cpi	r22, 0xFF	; 255
    b7fa:	ff ef       	ldi	r31, 0xFF	; 255
    b7fc:	7f 07       	cpc	r23, r31
    b7fe:	8f 07       	cpc	r24, r31
    b800:	9f 07       	cpc	r25, r31
    b802:	21 f4       	brne	.+8      	; 0xb80c <f_write+0x13c>
    b804:	81 e0       	ldi	r24, 0x01	; 1
    b806:	f7 01       	movw	r30, r14
    b808:	87 87       	std	Z+15, r24	; 0x0f
    b80a:	f4 c0       	rjmp	.+488    	; 0xb9f4 <f_write+0x324>
    b80c:	f7 01       	movw	r30, r14
    b80e:	64 8b       	std	Z+20, r22	; 0x14
    b810:	75 8b       	std	Z+21, r23	; 0x15
    b812:	86 8b       	std	Z+22, r24	; 0x16
    b814:	97 8b       	std	Z+23, r25	; 0x17
    b816:	06 81       	ldd	r16, Z+6	; 0x06
    b818:	17 81       	ldd	r17, Z+7	; 0x07
    b81a:	20 85       	ldd	r18, Z+8	; 0x08
    b81c:	31 85       	ldd	r19, Z+9	; 0x09
    b81e:	01 15       	cp	r16, r1
    b820:	11 05       	cpc	r17, r1
    b822:	21 05       	cpc	r18, r1
    b824:	31 05       	cpc	r19, r1
    b826:	21 f4       	brne	.+8      	; 0xb830 <f_write+0x160>
    b828:	66 83       	std	Z+6, r22	; 0x06
    b82a:	77 83       	std	Z+7, r23	; 0x07
    b82c:	80 87       	std	Z+8, r24	; 0x08
    b82e:	91 87       	std	Z+9, r25	; 0x09
    b830:	f7 01       	movw	r30, r14
    b832:	86 85       	ldd	r24, Z+14	; 0x0e
    b834:	87 ff       	sbrs	r24, 7
    b836:	13 c0       	rjmp	.+38     	; 0xb85e <f_write+0x18e>
    b838:	20 8d       	ldd	r18, Z+24	; 0x18
    b83a:	31 8d       	ldd	r19, Z+25	; 0x19
    b83c:	42 8d       	ldd	r20, Z+26	; 0x1a
    b83e:	53 8d       	ldd	r21, Z+27	; 0x1b
    b840:	e9 81       	ldd	r30, Y+1	; 0x01
    b842:	fa 81       	ldd	r31, Y+2	; 0x02
    b844:	01 e0       	ldi	r16, 0x01	; 1
    b846:	10 e0       	ldi	r17, 0x00	; 0
    b848:	6d 81       	ldd	r22, Y+5	; 0x05
    b84a:	7e 81       	ldd	r23, Y+6	; 0x06
    b84c:	81 81       	ldd	r24, Z+1	; 0x01
    b84e:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    b852:	89 2b       	or	r24, r25
    b854:	b9 f6       	brne	.-82     	; 0xb804 <f_write+0x134>
    b856:	f7 01       	movw	r30, r14
    b858:	86 85       	ldd	r24, Z+14	; 0x0e
    b85a:	8f 77       	andi	r24, 0x7F	; 127
    b85c:	86 87       	std	Z+14, r24	; 0x0e
    b85e:	29 81       	ldd	r18, Y+1	; 0x01
    b860:	3a 81       	ldd	r19, Y+2	; 0x02
    b862:	3c 83       	std	Y+4, r19	; 0x04
    b864:	2b 83       	std	Y+3, r18	; 0x03
    b866:	f7 01       	movw	r30, r14
    b868:	44 89       	ldd	r20, Z+20	; 0x14
    b86a:	55 89       	ldd	r21, Z+21	; 0x15
    b86c:	66 89       	ldd	r22, Z+22	; 0x16
    b86e:	77 89       	ldd	r23, Z+23	; 0x17
    b870:	c9 01       	movw	r24, r18
    b872:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    b876:	61 15       	cp	r22, r1
    b878:	71 05       	cpc	r23, r1
    b87a:	81 05       	cpc	r24, r1
    b87c:	91 05       	cpc	r25, r1
    b87e:	09 f4       	brne	.+2      	; 0xb882 <f_write+0x1b2>
    b880:	b9 cf       	rjmp	.-142    	; 0xb7f4 <f_write+0x124>
    b882:	1b 01       	movw	r2, r22
    b884:	2c 01       	movw	r4, r24
    b886:	28 0c       	add	r2, r8
    b888:	39 1c       	adc	r3, r9
    b88a:	41 1c       	adc	r4, r1
    b88c:	51 1c       	adc	r5, r1
    b88e:	65 01       	movw	r12, r10
    b890:	cd 2c       	mov	r12, r13
    b892:	dd 24       	eor	r13, r13
    b894:	c6 94       	lsr	r12
    b896:	c1 14       	cp	r12, r1
    b898:	d1 04       	cpc	r13, r1
    b89a:	f1 f1       	breq	.+124    	; 0xb918 <f_write+0x248>
    b89c:	eb 81       	ldd	r30, Y+3	; 0x03
    b89e:	fc 81       	ldd	r31, Y+4	; 0x04
    b8a0:	81 85       	ldd	r24, Z+9	; 0x09
    b8a2:	92 85       	ldd	r25, Z+10	; 0x0a
    b8a4:	94 01       	movw	r18, r8
    b8a6:	2c 0d       	add	r18, r12
    b8a8:	3d 1d       	adc	r19, r13
    b8aa:	82 17       	cp	r24, r18
    b8ac:	93 07       	cpc	r25, r19
    b8ae:	18 f4       	brcc	.+6      	; 0xb8b6 <f_write+0x1e6>
    b8b0:	6c 01       	movw	r12, r24
    b8b2:	c8 18       	sub	r12, r8
    b8b4:	d9 08       	sbc	r13, r9
    b8b6:	86 01       	movw	r16, r12
    b8b8:	a2 01       	movw	r20, r4
    b8ba:	91 01       	movw	r18, r2
    b8bc:	b3 01       	movw	r22, r6
    b8be:	eb 81       	ldd	r30, Y+3	; 0x03
    b8c0:	fc 81       	ldd	r31, Y+4	; 0x04
    b8c2:	81 81       	ldd	r24, Z+1	; 0x01
    b8c4:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    b8c8:	89 2b       	or	r24, r25
    b8ca:	09 f0       	breq	.+2      	; 0xb8ce <f_write+0x1fe>
    b8cc:	9b cf       	rjmp	.-202    	; 0xb804 <f_write+0x134>
    b8ce:	f7 01       	movw	r30, r14
    b8d0:	80 8d       	ldd	r24, Z+24	; 0x18
    b8d2:	91 8d       	ldd	r25, Z+25	; 0x19
    b8d4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b8d6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b8d8:	82 19       	sub	r24, r2
    b8da:	93 09       	sbc	r25, r3
    b8dc:	a4 09       	sbc	r26, r4
    b8de:	b5 09       	sbc	r27, r5
    b8e0:	a6 01       	movw	r20, r12
    b8e2:	60 e0       	ldi	r22, 0x00	; 0
    b8e4:	70 e0       	ldi	r23, 0x00	; 0
    b8e6:	84 17       	cp	r24, r20
    b8e8:	95 07       	cpc	r25, r21
    b8ea:	a6 07       	cpc	r26, r22
    b8ec:	b7 07       	cpc	r27, r23
    b8ee:	80 f4       	brcc	.+32     	; 0xb910 <f_write+0x240>
    b8f0:	98 2f       	mov	r25, r24
    b8f2:	88 27       	eor	r24, r24
    b8f4:	99 0f       	add	r25, r25
    b8f6:	b3 01       	movw	r22, r6
    b8f8:	68 0f       	add	r22, r24
    b8fa:	79 1f       	adc	r23, r25
    b8fc:	40 e0       	ldi	r20, 0x00	; 0
    b8fe:	52 e0       	ldi	r21, 0x02	; 2
    b900:	8d 81       	ldd	r24, Y+5	; 0x05
    b902:	9e 81       	ldd	r25, Y+6	; 0x06
    b904:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    b908:	f7 01       	movw	r30, r14
    b90a:	86 85       	ldd	r24, Z+14	; 0x0e
    b90c:	8f 77       	andi	r24, 0x7F	; 127
    b90e:	86 87       	std	Z+14, r24	; 0x0e
    b910:	dc 2c       	mov	r13, r12
    b912:	cc 24       	eor	r12, r12
    b914:	dd 0c       	add	r13, r13
    b916:	43 c0       	rjmp	.+134    	; 0xb99e <f_write+0x2ce>
    b918:	f7 01       	movw	r30, r14
    b91a:	80 8d       	ldd	r24, Z+24	; 0x18
    b91c:	91 8d       	ldd	r25, Z+25	; 0x19
    b91e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b920:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b922:	28 16       	cp	r2, r24
    b924:	39 06       	cpc	r3, r25
    b926:	4a 06       	cpc	r4, r26
    b928:	5b 06       	cpc	r5, r27
    b92a:	d9 f0       	breq	.+54     	; 0xb962 <f_write+0x292>
    b92c:	40 89       	ldd	r20, Z+16	; 0x10
    b92e:	51 89       	ldd	r21, Z+17	; 0x11
    b930:	62 89       	ldd	r22, Z+18	; 0x12
    b932:	73 89       	ldd	r23, Z+19	; 0x13
    b934:	82 85       	ldd	r24, Z+10	; 0x0a
    b936:	93 85       	ldd	r25, Z+11	; 0x0b
    b938:	a4 85       	ldd	r26, Z+12	; 0x0c
    b93a:	b5 85       	ldd	r27, Z+13	; 0x0d
    b93c:	48 17       	cp	r20, r24
    b93e:	59 07       	cpc	r21, r25
    b940:	6a 07       	cpc	r22, r26
    b942:	7b 07       	cpc	r23, r27
    b944:	70 f4       	brcc	.+28     	; 0xb962 <f_write+0x292>
    b946:	01 e0       	ldi	r16, 0x01	; 1
    b948:	10 e0       	ldi	r17, 0x00	; 0
    b94a:	a2 01       	movw	r20, r4
    b94c:	91 01       	movw	r18, r2
    b94e:	6d 81       	ldd	r22, Y+5	; 0x05
    b950:	7e 81       	ldd	r23, Y+6	; 0x06
    b952:	eb 81       	ldd	r30, Y+3	; 0x03
    b954:	fc 81       	ldd	r31, Y+4	; 0x04
    b956:	81 81       	ldd	r24, Z+1	; 0x01
    b958:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <disk_read>
    b95c:	89 2b       	or	r24, r25
    b95e:	09 f0       	breq	.+2      	; 0xb962 <f_write+0x292>
    b960:	51 cf       	rjmp	.-350    	; 0xb804 <f_write+0x134>
    b962:	f7 01       	movw	r30, r14
    b964:	20 8e       	std	Z+24, r2	; 0x18
    b966:	31 8e       	std	Z+25, r3	; 0x19
    b968:	42 8e       	std	Z+26, r4	; 0x1a
    b96a:	53 8e       	std	Z+27, r5	; 0x1b
    b96c:	f7 01       	movw	r30, r14
    b96e:	80 89       	ldd	r24, Z+16	; 0x10
    b970:	91 89       	ldd	r25, Z+17	; 0x11
    b972:	91 70       	andi	r25, 0x01	; 1
    b974:	20 e0       	ldi	r18, 0x00	; 0
    b976:	32 e0       	ldi	r19, 0x02	; 2
    b978:	28 1b       	sub	r18, r24
    b97a:	39 0b       	sbc	r19, r25
    b97c:	65 01       	movw	r12, r10
    b97e:	2a 15       	cp	r18, r10
    b980:	3b 05       	cpc	r19, r11
    b982:	08 f4       	brcc	.+2      	; 0xb986 <f_write+0x2b6>
    b984:	69 01       	movw	r12, r18
    b986:	a6 01       	movw	r20, r12
    b988:	b3 01       	movw	r22, r6
    b98a:	2d 81       	ldd	r18, Y+5	; 0x05
    b98c:	3e 81       	ldd	r19, Y+6	; 0x06
    b98e:	82 0f       	add	r24, r18
    b990:	93 1f       	adc	r25, r19
    b992:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    b996:	f7 01       	movw	r30, r14
    b998:	86 85       	ldd	r24, Z+14	; 0x0e
    b99a:	80 68       	ori	r24, 0x80	; 128
    b99c:	86 87       	std	Z+14, r24	; 0x0e
    b99e:	ac 18       	sub	r10, r12
    b9a0:	bd 08       	sbc	r11, r13
    b9a2:	ef 81       	ldd	r30, Y+7	; 0x07
    b9a4:	f8 85       	ldd	r31, Y+8	; 0x08
    b9a6:	80 81       	ld	r24, Z
    b9a8:	91 81       	ldd	r25, Z+1	; 0x01
    b9aa:	8c 0d       	add	r24, r12
    b9ac:	9d 1d       	adc	r25, r13
    b9ae:	91 83       	std	Z+1, r25	; 0x01
    b9b0:	80 83       	st	Z, r24
    b9b2:	6c 0c       	add	r6, r12
    b9b4:	7d 1c       	adc	r7, r13
    b9b6:	f7 01       	movw	r30, r14
    b9b8:	80 89       	ldd	r24, Z+16	; 0x10
    b9ba:	91 89       	ldd	r25, Z+17	; 0x11
    b9bc:	a2 89       	ldd	r26, Z+18	; 0x12
    b9be:	b3 89       	ldd	r27, Z+19	; 0x13
    b9c0:	8c 0d       	add	r24, r12
    b9c2:	9d 1d       	adc	r25, r13
    b9c4:	a1 1d       	adc	r26, r1
    b9c6:	b1 1d       	adc	r27, r1
    b9c8:	80 8b       	std	Z+16, r24	; 0x10
    b9ca:	91 8b       	std	Z+17, r25	; 0x11
    b9cc:	a2 8b       	std	Z+18, r26	; 0x12
    b9ce:	b3 8b       	std	Z+19, r27	; 0x13
    b9d0:	42 85       	ldd	r20, Z+10	; 0x0a
    b9d2:	53 85       	ldd	r21, Z+11	; 0x0b
    b9d4:	64 85       	ldd	r22, Z+12	; 0x0c
    b9d6:	75 85       	ldd	r23, Z+13	; 0x0d
    b9d8:	48 17       	cp	r20, r24
    b9da:	59 07       	cpc	r21, r25
    b9dc:	6a 07       	cpc	r22, r26
    b9de:	7b 07       	cpc	r23, r27
    b9e0:	10 f4       	brcc	.+4      	; 0xb9e6 <f_write+0x316>
    b9e2:	ac 01       	movw	r20, r24
    b9e4:	bd 01       	movw	r22, r26
    b9e6:	f7 01       	movw	r30, r14
    b9e8:	42 87       	std	Z+10, r20	; 0x0a
    b9ea:	53 87       	std	Z+11, r21	; 0x0b
    b9ec:	64 87       	std	Z+12, r22	; 0x0c
    b9ee:	75 87       	std	Z+13, r23	; 0x0d
    b9f0:	a5 ce       	rjmp	.-694    	; 0xb73c <f_write+0x6c>
    b9f2:	87 e0       	ldi	r24, 0x07	; 7
    b9f4:	90 e0       	ldi	r25, 0x00	; 0
    b9f6:	28 96       	adiw	r28, 0x08	; 8
    b9f8:	e2 e1       	ldi	r30, 0x12	; 18
    b9fa:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000b9fe <f_sync>:
    b9fe:	8f 92       	push	r8
    ba00:	9f 92       	push	r9
    ba02:	af 92       	push	r10
    ba04:	bf 92       	push	r11
    ba06:	ef 92       	push	r14
    ba08:	ff 92       	push	r15
    ba0a:	0f 93       	push	r16
    ba0c:	1f 93       	push	r17
    ba0e:	cf 93       	push	r28
    ba10:	df 93       	push	r29
    ba12:	00 d0       	rcall	.+0      	; 0xba14 <f_sync+0x16>
    ba14:	cd b7       	in	r28, 0x3d	; 61
    ba16:	de b7       	in	r29, 0x3e	; 62
    ba18:	7c 01       	movw	r14, r24
    ba1a:	be 01       	movw	r22, r28
    ba1c:	6f 5f       	subi	r22, 0xFF	; 255
    ba1e:	7f 4f       	sbci	r23, 0xFF	; 255
    ba20:	0e 94 ab 46 	call	0x8d56	; 0x8d56 <validate>
    ba24:	00 97       	sbiw	r24, 0x00	; 0
    ba26:	09 f0       	breq	.+2      	; 0xba2a <f_sync+0x2c>
    ba28:	5d c0       	rjmp	.+186    	; 0xbae4 <f_sync+0xe6>
    ba2a:	f7 01       	movw	r30, r14
    ba2c:	86 85       	ldd	r24, Z+14	; 0x0e
    ba2e:	86 ff       	sbrs	r24, 6
    ba30:	55 c0       	rjmp	.+170    	; 0xbadc <f_sync+0xde>
    ba32:	87 ff       	sbrs	r24, 7
    ba34:	15 c0       	rjmp	.+42     	; 0xba60 <f_sync+0x62>
    ba36:	20 8d       	ldd	r18, Z+24	; 0x18
    ba38:	31 8d       	ldd	r19, Z+25	; 0x19
    ba3a:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba3c:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba3e:	e9 81       	ldd	r30, Y+1	; 0x01
    ba40:	fa 81       	ldd	r31, Y+2	; 0x02
    ba42:	01 e0       	ldi	r16, 0x01	; 1
    ba44:	10 e0       	ldi	r17, 0x00	; 0
    ba46:	b7 01       	movw	r22, r14
    ba48:	6c 5d       	subi	r22, 0xDC	; 220
    ba4a:	7f 4f       	sbci	r23, 0xFF	; 255
    ba4c:	81 81       	ldd	r24, Z+1	; 0x01
    ba4e:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    ba52:	89 2b       	or	r24, r25
    ba54:	09 f0       	breq	.+2      	; 0xba58 <f_sync+0x5a>
    ba56:	44 c0       	rjmp	.+136    	; 0xbae0 <f_sync+0xe2>
    ba58:	f7 01       	movw	r30, r14
    ba5a:	86 85       	ldd	r24, Z+14	; 0x0e
    ba5c:	8f 77       	andi	r24, 0x7F	; 127
    ba5e:	86 87       	std	Z+14, r24	; 0x0e
    ba60:	0e 94 2c 6f 	call	0xde58	; 0xde58 <get_fattime>
    ba64:	4b 01       	movw	r8, r22
    ba66:	5c 01       	movw	r10, r24
    ba68:	f7 01       	movw	r30, r14
    ba6a:	44 8d       	ldd	r20, Z+28	; 0x1c
    ba6c:	55 8d       	ldd	r21, Z+29	; 0x1d
    ba6e:	66 8d       	ldd	r22, Z+30	; 0x1e
    ba70:	77 8d       	ldd	r23, Z+31	; 0x1f
    ba72:	89 81       	ldd	r24, Y+1	; 0x01
    ba74:	9a 81       	ldd	r25, Y+2	; 0x02
    ba76:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    ba7a:	00 97       	sbiw	r24, 0x00	; 0
    ba7c:	99 f5       	brne	.+102    	; 0xbae4 <f_sync+0xe6>
    ba7e:	f7 01       	movw	r30, r14
    ba80:	00 a1       	ldd	r16, Z+32	; 0x20
    ba82:	11 a1       	ldd	r17, Z+33	; 0x21
    ba84:	f8 01       	movw	r30, r16
    ba86:	83 85       	ldd	r24, Z+11	; 0x0b
    ba88:	80 62       	ori	r24, 0x20	; 32
    ba8a:	83 87       	std	Z+11, r24	; 0x0b
    ba8c:	f7 01       	movw	r30, r14
    ba8e:	26 81       	ldd	r18, Z+6	; 0x06
    ba90:	37 81       	ldd	r19, Z+7	; 0x07
    ba92:	40 85       	ldd	r20, Z+8	; 0x08
    ba94:	51 85       	ldd	r21, Z+9	; 0x09
    ba96:	b8 01       	movw	r22, r16
    ba98:	80 81       	ld	r24, Z
    ba9a:	91 81       	ldd	r25, Z+1	; 0x01
    ba9c:	0e 94 b4 48 	call	0x9168	; 0x9168 <st_clust.isra.5>
    baa0:	f7 01       	movw	r30, r14
    baa2:	42 85       	ldd	r20, Z+10	; 0x0a
    baa4:	53 85       	ldd	r21, Z+11	; 0x0b
    baa6:	64 85       	ldd	r22, Z+12	; 0x0c
    baa8:	75 85       	ldd	r23, Z+13	; 0x0d
    baaa:	c8 01       	movw	r24, r16
    baac:	4c 96       	adiw	r24, 0x1c	; 28
    baae:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <st_dword>
    bab2:	b5 01       	movw	r22, r10
    bab4:	a4 01       	movw	r20, r8
    bab6:	c8 01       	movw	r24, r16
    bab8:	46 96       	adiw	r24, 0x16	; 22
    baba:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <st_dword>
    babe:	f8 01       	movw	r30, r16
    bac0:	12 8a       	std	Z+18, r1	; 0x12
    bac2:	13 8a       	std	Z+19, r1	; 0x13
    bac4:	89 81       	ldd	r24, Y+1	; 0x01
    bac6:	9a 81       	ldd	r25, Y+2	; 0x02
    bac8:	21 e0       	ldi	r18, 0x01	; 1
    baca:	fc 01       	movw	r30, r24
    bacc:	23 83       	std	Z+3, r18	; 0x03
    bace:	0e 94 14 49 	call	0x9228	; 0x9228 <sync_fs>
    bad2:	f7 01       	movw	r30, r14
    bad4:	26 85       	ldd	r18, Z+14	; 0x0e
    bad6:	2f 7b       	andi	r18, 0xBF	; 191
    bad8:	26 87       	std	Z+14, r18	; 0x0e
    bada:	04 c0       	rjmp	.+8      	; 0xbae4 <f_sync+0xe6>
    badc:	80 e0       	ldi	r24, 0x00	; 0
    bade:	01 c0       	rjmp	.+2      	; 0xbae2 <f_sync+0xe4>
    bae0:	81 e0       	ldi	r24, 0x01	; 1
    bae2:	90 e0       	ldi	r25, 0x00	; 0
    bae4:	0f 90       	pop	r0
    bae6:	0f 90       	pop	r0
    bae8:	df 91       	pop	r29
    baea:	cf 91       	pop	r28
    baec:	1f 91       	pop	r17
    baee:	0f 91       	pop	r16
    baf0:	ff 90       	pop	r15
    baf2:	ef 90       	pop	r14
    baf4:	bf 90       	pop	r11
    baf6:	af 90       	pop	r10
    baf8:	9f 90       	pop	r9
    bafa:	8f 90       	pop	r8
    bafc:	08 95       	ret

0000bafe <f_close>:
    bafe:	a2 e0       	ldi	r26, 0x02	; 2
    bb00:	b0 e0       	ldi	r27, 0x00	; 0
    bb02:	e5 e8       	ldi	r30, 0x85	; 133
    bb04:	fd e5       	ldi	r31, 0x5D	; 93
    bb06:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    bb0a:	8c 01       	movw	r16, r24
    bb0c:	78 df       	rcall	.-272    	; 0xb9fe <f_sync>
    bb0e:	00 97       	sbiw	r24, 0x00	; 0
    bb10:	59 f4       	brne	.+22     	; 0xbb28 <f_close+0x2a>
    bb12:	be 01       	movw	r22, r28
    bb14:	6f 5f       	subi	r22, 0xFF	; 255
    bb16:	7f 4f       	sbci	r23, 0xFF	; 255
    bb18:	c8 01       	movw	r24, r16
    bb1a:	0e 94 ab 46 	call	0x8d56	; 0x8d56 <validate>
    bb1e:	00 97       	sbiw	r24, 0x00	; 0
    bb20:	19 f4       	brne	.+6      	; 0xbb28 <f_close+0x2a>
    bb22:	f8 01       	movw	r30, r16
    bb24:	11 82       	std	Z+1, r1	; 0x01
    bb26:	10 82       	st	Z, r1
    bb28:	22 96       	adiw	r28, 0x02	; 2
    bb2a:	e4 e0       	ldi	r30, 0x04	; 4
    bb2c:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000bb30 <f_chdir>:
    bb30:	a2 e3       	ldi	r26, 0x32	; 50
    bb32:	b0 e0       	ldi	r27, 0x00	; 0
    bb34:	ee e9       	ldi	r30, 0x9E	; 158
    bb36:	fd e5       	ldi	r31, 0x5D	; 93
    bb38:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    bb3c:	9a ab       	std	Y+50, r25	; 0x32
    bb3e:	89 ab       	std	Y+49, r24	; 0x31
    bb40:	40 e0       	ldi	r20, 0x00	; 0
    bb42:	be 01       	movw	r22, r28
    bb44:	61 5d       	subi	r22, 0xD1	; 209
    bb46:	7f 4f       	sbci	r23, 0xFF	; 255
    bb48:	ce 01       	movw	r24, r28
    bb4a:	c1 96       	adiw	r24, 0x31	; 49
    bb4c:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    bb50:	00 97       	sbiw	r24, 0x00	; 0
    bb52:	09 f0       	breq	.+2      	; 0xbb56 <f_chdir+0x26>
    bb54:	44 c0       	rjmp	.+136    	; 0xbbde <f_chdir+0xae>
    bb56:	8f a5       	ldd	r24, Y+47	; 0x2f
    bb58:	98 a9       	ldd	r25, Y+48	; 0x30
    bb5a:	9a 83       	std	Y+2, r25	; 0x02
    bb5c:	89 83       	std	Y+1, r24	; 0x01
    bb5e:	80 e0       	ldi	r24, 0x00	; 0
    bb60:	92 e0       	ldi	r25, 0x02	; 2
    bb62:	0e 94 bb 67 	call	0xcf76	; 0xcf76 <ff_memalloc>
    bb66:	7c 01       	movw	r14, r24
    bb68:	00 97       	sbiw	r24, 0x00	; 0
    bb6a:	a9 f1       	breq	.+106    	; 0xbbd6 <f_chdir+0xa6>
    bb6c:	ef a5       	ldd	r30, Y+47	; 0x2f
    bb6e:	f8 a9       	ldd	r31, Y+48	; 0x30
    bb70:	94 87       	std	Z+12, r25	; 0x0c
    bb72:	83 87       	std	Z+11, r24	; 0x0b
    bb74:	69 a9       	ldd	r22, Y+49	; 0x31
    bb76:	7a a9       	ldd	r23, Y+50	; 0x32
    bb78:	ce 01       	movw	r24, r28
    bb7a:	01 96       	adiw	r24, 0x01	; 1
    bb7c:	39 d8       	rcall	.-3982   	; 0xabf0 <follow_path>
    bb7e:	8c 01       	movw	r16, r24
    bb80:	89 2b       	or	r24, r25
    bb82:	09 f5       	brne	.+66     	; 0xbbc6 <f_chdir+0x96>
    bb84:	88 a5       	ldd	r24, Y+40	; 0x28
    bb86:	87 ff       	sbrs	r24, 7
    bb88:	0b c0       	rjmp	.+22     	; 0xbba0 <f_chdir+0x70>
    bb8a:	ef a5       	ldd	r30, Y+47	; 0x2f
    bb8c:	f8 a9       	ldd	r31, Y+48	; 0x30
    bb8e:	8f 81       	ldd	r24, Y+7	; 0x07
    bb90:	98 85       	ldd	r25, Y+8	; 0x08
    bb92:	a9 85       	ldd	r26, Y+9	; 0x09
    bb94:	ba 85       	ldd	r27, Y+10	; 0x0a
    bb96:	85 8b       	std	Z+21, r24	; 0x15
    bb98:	96 8b       	std	Z+22, r25	; 0x16
    bb9a:	a7 8b       	std	Z+23, r26	; 0x17
    bb9c:	b0 8f       	std	Z+24, r27	; 0x18
    bb9e:	13 c0       	rjmp	.+38     	; 0xbbc6 <f_chdir+0x96>
    bba0:	8d 81       	ldd	r24, Y+5	; 0x05
    bba2:	84 ff       	sbrs	r24, 4
    bba4:	0e c0       	rjmp	.+28     	; 0xbbc2 <f_chdir+0x92>
    bba6:	cf a4       	ldd	r12, Y+47	; 0x2f
    bba8:	d8 a8       	ldd	r13, Y+48	; 0x30
    bbaa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bbac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bbae:	f6 01       	movw	r30, r12
    bbb0:	80 81       	ld	r24, Z
    bbb2:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    bbb6:	f6 01       	movw	r30, r12
    bbb8:	65 8b       	std	Z+21, r22	; 0x15
    bbba:	76 8b       	std	Z+22, r23	; 0x16
    bbbc:	87 8b       	std	Z+23, r24	; 0x17
    bbbe:	90 8f       	std	Z+24, r25	; 0x18
    bbc0:	02 c0       	rjmp	.+4      	; 0xbbc6 <f_chdir+0x96>
    bbc2:	05 e0       	ldi	r16, 0x05	; 5
    bbc4:	10 e0       	ldi	r17, 0x00	; 0
    bbc6:	c7 01       	movw	r24, r14
    bbc8:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <ff_memfree>
    bbcc:	04 30       	cpi	r16, 0x04	; 4
    bbce:	11 05       	cpc	r17, r1
    bbd0:	29 f4       	brne	.+10     	; 0xbbdc <f_chdir+0xac>
    bbd2:	85 e0       	ldi	r24, 0x05	; 5
    bbd4:	01 c0       	rjmp	.+2      	; 0xbbd8 <f_chdir+0xa8>
    bbd6:	81 e1       	ldi	r24, 0x11	; 17
    bbd8:	90 e0       	ldi	r25, 0x00	; 0
    bbda:	01 c0       	rjmp	.+2      	; 0xbbde <f_chdir+0xae>
    bbdc:	c8 01       	movw	r24, r16
    bbde:	e2 96       	adiw	r28, 0x32	; 50
    bbe0:	e8 e0       	ldi	r30, 0x08	; 8
    bbe2:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000bbe6 <f_getcwd>:
    bbe6:	a8 e4       	ldi	r26, 0x48	; 72
    bbe8:	b1 e0       	ldi	r27, 0x01	; 1
    bbea:	e9 ef       	ldi	r30, 0xF9	; 249
    bbec:	fd e5       	ldi	r31, 0x5D	; 93
    bbee:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    bbf2:	c9 5b       	subi	r28, 0xB9	; 185
    bbf4:	de 4f       	sbci	r29, 0xFE	; 254
    bbf6:	99 83       	std	Y+1, r25	; 0x01
    bbf8:	88 83       	st	Y, r24
    bbfa:	c7 54       	subi	r28, 0x47	; 71
    bbfc:	d1 40       	sbci	r29, 0x01	; 1
    bbfe:	4b 01       	movw	r8, r22
    bc00:	7c 01       	movw	r14, r24
    bc02:	fc 01       	movw	r30, r24
    bc04:	10 82       	st	Z, r1
    bc06:	40 e0       	ldi	r20, 0x00	; 0
    bc08:	be 01       	movw	r22, r28
    bc0a:	6b 5b       	subi	r22, 0xBB	; 187
    bc0c:	7e 4f       	sbci	r23, 0xFE	; 254
    bc0e:	ce 01       	movw	r24, r28
    bc10:	89 5b       	subi	r24, 0xB9	; 185
    bc12:	9e 4f       	sbci	r25, 0xFE	; 254
    bc14:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    bc18:	1c 01       	movw	r2, r24
    bc1a:	89 2b       	or	r24, r25
    bc1c:	09 f0       	breq	.+2      	; 0xbc20 <f_getcwd+0x3a>
    bc1e:	03 c1       	rjmp	.+518    	; 0xbe26 <f_getcwd+0x240>
    bc20:	cb 5b       	subi	r28, 0xBB	; 187
    bc22:	de 4f       	sbci	r29, 0xFE	; 254
    bc24:	88 81       	ld	r24, Y
    bc26:	99 81       	ldd	r25, Y+1	; 0x01
    bc28:	c5 54       	subi	r28, 0x45	; 69
    bc2a:	d1 40       	sbci	r29, 0x01	; 1
    bc2c:	c9 5e       	subi	r28, 0xE9	; 233
    bc2e:	de 4f       	sbci	r29, 0xFE	; 254
    bc30:	99 83       	std	Y+1, r25	; 0x01
    bc32:	88 83       	st	Y, r24
    bc34:	c7 51       	subi	r28, 0x17	; 23
    bc36:	d1 40       	sbci	r29, 0x01	; 1
    bc38:	80 e0       	ldi	r24, 0x00	; 0
    bc3a:	92 e0       	ldi	r25, 0x02	; 2
    bc3c:	0e 94 bb 67 	call	0xcf76	; 0xcf76 <ff_memalloc>
    bc40:	5c 01       	movw	r10, r24
    bc42:	00 97       	sbiw	r24, 0x00	; 0
    bc44:	09 f4       	brne	.+2      	; 0xbc48 <f_getcwd+0x62>
    bc46:	f3 c0       	rjmp	.+486    	; 0xbe2e <f_getcwd+0x248>
    bc48:	cb 5b       	subi	r28, 0xBB	; 187
    bc4a:	de 4f       	sbci	r29, 0xFE	; 254
    bc4c:	e8 81       	ld	r30, Y
    bc4e:	f9 81       	ldd	r31, Y+1	; 0x01
    bc50:	c5 54       	subi	r28, 0x45	; 69
    bc52:	d1 40       	sbci	r29, 0x01	; 1
    bc54:	94 87       	std	Z+12, r25	; 0x0c
    bc56:	83 87       	std	Z+11, r24	; 0x0b
    bc58:	85 89       	ldd	r24, Z+21	; 0x15
    bc5a:	96 89       	ldd	r25, Z+22	; 0x16
    bc5c:	a7 89       	ldd	r26, Z+23	; 0x17
    bc5e:	b0 8d       	ldd	r27, Z+24	; 0x18
    bc60:	c3 5e       	subi	r28, 0xE3	; 227
    bc62:	de 4f       	sbci	r29, 0xFE	; 254
    bc64:	88 83       	st	Y, r24
    bc66:	99 83       	std	Y+1, r25	; 0x01
    bc68:	aa 83       	std	Y+2, r26	; 0x02
    bc6a:	bb 83       	std	Y+3, r27	; 0x03
    bc6c:	cd 51       	subi	r28, 0x1D	; 29
    bc6e:	d1 40       	sbci	r29, 0x01	; 1
    bc70:	84 01       	movw	r16, r8
    bc72:	ce 01       	movw	r24, r28
    bc74:	01 96       	adiw	r24, 0x01	; 1
    bc76:	6c 01       	movw	r12, r24
    bc78:	c3 5e       	subi	r28, 0xE3	; 227
    bc7a:	de 4f       	sbci	r29, 0xFE	; 254
    bc7c:	48 80       	ld	r4, Y
    bc7e:	59 80       	ldd	r5, Y+1	; 0x01
    bc80:	6a 80       	ldd	r6, Y+2	; 0x02
    bc82:	7b 80       	ldd	r7, Y+3	; 0x03
    bc84:	cd 51       	subi	r28, 0x1D	; 29
    bc86:	d1 40       	sbci	r29, 0x01	; 1
    bc88:	41 14       	cp	r4, r1
    bc8a:	51 04       	cpc	r5, r1
    bc8c:	61 04       	cpc	r6, r1
    bc8e:	71 04       	cpc	r7, r1
    bc90:	09 f4       	brne	.+2      	; 0xbc94 <f_getcwd+0xae>
    bc92:	a3 c0       	rjmp	.+326    	; 0xbdda <f_getcwd+0x1f4>
    bc94:	40 e2       	ldi	r20, 0x20	; 32
    bc96:	50 e0       	ldi	r21, 0x00	; 0
    bc98:	60 e0       	ldi	r22, 0x00	; 0
    bc9a:	70 e0       	ldi	r23, 0x00	; 0
    bc9c:	ce 01       	movw	r24, r28
    bc9e:	89 5e       	subi	r24, 0xE9	; 233
    bca0:	9e 4f       	sbci	r25, 0xFE	; 254
    bca2:	0e 94 b2 4e 	call	0x9d64	; 0x9d64 <dir_sdi>
    bca6:	00 97       	sbiw	r24, 0x00	; 0
    bca8:	09 f0       	breq	.+2      	; 0xbcac <f_getcwd+0xc6>
    bcaa:	c6 c0       	rjmp	.+396    	; 0xbe38 <f_getcwd+0x252>
    bcac:	c3 5d       	subi	r28, 0xD3	; 211
    bcae:	de 4f       	sbci	r29, 0xFE	; 254
    bcb0:	48 81       	ld	r20, Y
    bcb2:	59 81       	ldd	r21, Y+1	; 0x01
    bcb4:	6a 81       	ldd	r22, Y+2	; 0x02
    bcb6:	7b 81       	ldd	r23, Y+3	; 0x03
    bcb8:	cd 52       	subi	r28, 0x2D	; 45
    bcba:	d1 40       	sbci	r29, 0x01	; 1
    bcbc:	cb 5b       	subi	r28, 0xBB	; 187
    bcbe:	de 4f       	sbci	r29, 0xFE	; 254
    bcc0:	88 81       	ld	r24, Y
    bcc2:	99 81       	ldd	r25, Y+1	; 0x01
    bcc4:	c5 54       	subi	r28, 0x45	; 69
    bcc6:	d1 40       	sbci	r29, 0x01	; 1
    bcc8:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    bccc:	00 97       	sbiw	r24, 0x00	; 0
    bcce:	09 f0       	breq	.+2      	; 0xbcd2 <f_getcwd+0xec>
    bcd0:	b3 c0       	rjmp	.+358    	; 0xbe38 <f_getcwd+0x252>
    bcd2:	cf 5c       	subi	r28, 0xCF	; 207
    bcd4:	de 4f       	sbci	r29, 0xFE	; 254
    bcd6:	68 81       	ld	r22, Y
    bcd8:	79 81       	ldd	r23, Y+1	; 0x01
    bcda:	c1 53       	subi	r28, 0x31	; 49
    bcdc:	d1 40       	sbci	r29, 0x01	; 1
    bcde:	cb 5b       	subi	r28, 0xBB	; 187
    bce0:	de 4f       	sbci	r29, 0xFE	; 254
    bce2:	e8 81       	ld	r30, Y
    bce4:	f9 81       	ldd	r31, Y+1	; 0x01
    bce6:	c5 54       	subi	r28, 0x45	; 69
    bce8:	d1 40       	sbci	r29, 0x01	; 1
    bcea:	80 81       	ld	r24, Z
    bcec:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    bcf0:	c3 5e       	subi	r28, 0xE3	; 227
    bcf2:	de 4f       	sbci	r29, 0xFE	; 254
    bcf4:	68 83       	st	Y, r22
    bcf6:	79 83       	std	Y+1, r23	; 0x01
    bcf8:	8a 83       	std	Y+2, r24	; 0x02
    bcfa:	9b 83       	std	Y+3, r25	; 0x03
    bcfc:	cd 51       	subi	r28, 0x1D	; 29
    bcfe:	d1 40       	sbci	r29, 0x01	; 1
    bd00:	40 e0       	ldi	r20, 0x00	; 0
    bd02:	50 e0       	ldi	r21, 0x00	; 0
    bd04:	ba 01       	movw	r22, r20
    bd06:	ce 01       	movw	r24, r28
    bd08:	89 5e       	subi	r24, 0xE9	; 233
    bd0a:	9e 4f       	sbci	r25, 0xFE	; 254
    bd0c:	0e 94 b2 4e 	call	0x9d64	; 0x9d64 <dir_sdi>
    bd10:	00 97       	sbiw	r24, 0x00	; 0
    bd12:	09 f0       	breq	.+2      	; 0xbd16 <f_getcwd+0x130>
    bd14:	91 c0       	rjmp	.+290    	; 0xbe38 <f_getcwd+0x252>
    bd16:	60 e0       	ldi	r22, 0x00	; 0
    bd18:	70 e0       	ldi	r23, 0x00	; 0
    bd1a:	ce 01       	movw	r24, r28
    bd1c:	89 5e       	subi	r24, 0xE9	; 233
    bd1e:	9e 4f       	sbci	r25, 0xFE	; 254
    bd20:	0e 94 4b 52 	call	0xa496	; 0xa496 <dir_read>
    bd24:	00 97       	sbiw	r24, 0x00	; 0
    bd26:	09 f0       	breq	.+2      	; 0xbd2a <f_getcwd+0x144>
    bd28:	89 c0       	rjmp	.+274    	; 0xbe3c <f_getcwd+0x256>
    bd2a:	cf 5c       	subi	r28, 0xCF	; 207
    bd2c:	de 4f       	sbci	r29, 0xFE	; 254
    bd2e:	68 81       	ld	r22, Y
    bd30:	79 81       	ldd	r23, Y+1	; 0x01
    bd32:	c1 53       	subi	r28, 0x31	; 49
    bd34:	d1 40       	sbci	r29, 0x01	; 1
    bd36:	cb 5b       	subi	r28, 0xBB	; 187
    bd38:	de 4f       	sbci	r29, 0xFE	; 254
    bd3a:	e8 81       	ld	r30, Y
    bd3c:	f9 81       	ldd	r31, Y+1	; 0x01
    bd3e:	c5 54       	subi	r28, 0x45	; 69
    bd40:	d1 40       	sbci	r29, 0x01	; 1
    bd42:	80 81       	ld	r24, Z
    bd44:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    bd48:	46 16       	cp	r4, r22
    bd4a:	57 06       	cpc	r5, r23
    bd4c:	68 06       	cpc	r6, r24
    bd4e:	79 06       	cpc	r7, r25
    bd50:	41 f4       	brne	.+16     	; 0xbd62 <f_getcwd+0x17c>
    bd52:	b6 01       	movw	r22, r12
    bd54:	ce 01       	movw	r24, r28
    bd56:	89 5e       	subi	r24, 0xE9	; 233
    bd58:	9e 4f       	sbci	r25, 0xFE	; 254
    bd5a:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <get_fileinfo>
    bd5e:	f6 01       	movw	r30, r12
    bd60:	0a c0       	rjmp	.+20     	; 0xbd76 <f_getcwd+0x190>
    bd62:	60 e0       	ldi	r22, 0x00	; 0
    bd64:	70 e0       	ldi	r23, 0x00	; 0
    bd66:	ce 01       	movw	r24, r28
    bd68:	89 5e       	subi	r24, 0xE9	; 233
    bd6a:	9e 4f       	sbci	r25, 0xFE	; 254
    bd6c:	0e 94 2a 51 	call	0xa254	; 0xa254 <dir_next>
    bd70:	00 97       	sbiw	r24, 0x00	; 0
    bd72:	89 f2       	breq	.-94     	; 0xbd16 <f_getcwd+0x130>
    bd74:	63 c0       	rjmp	.+198    	; 0xbe3c <f_getcwd+0x256>
    bd76:	cf 01       	movw	r24, r30
    bd78:	8c 19       	sub	r24, r12
    bd7a:	9d 09       	sbc	r25, r13
    bd7c:	31 96       	adiw	r30, 0x01	; 1
    bd7e:	25 89       	ldd	r18, Z+21	; 0x15
    bd80:	21 11       	cpse	r18, r1
    bd82:	f9 cf       	rjmp	.-14     	; 0xbd76 <f_getcwd+0x190>
    bd84:	9c 01       	movw	r18, r24
    bd86:	2f 5f       	subi	r18, 0xFF	; 255
    bd88:	3f 4f       	sbci	r19, 0xFF	; 255
    bd8a:	02 17       	cp	r16, r18
    bd8c:	13 07       	cpc	r17, r19
    bd8e:	08 f4       	brcc	.+2      	; 0xbd92 <f_getcwd+0x1ac>
    bd90:	51 c0       	rjmp	.+162    	; 0xbe34 <f_getcwd+0x24e>
    bd92:	f6 01       	movw	r30, r12
    bd94:	e8 0f       	add	r30, r24
    bd96:	f9 1f       	adc	r31, r25
    bd98:	98 01       	movw	r18, r16
    bd9a:	ce 16       	cp	r12, r30
    bd9c:	df 06       	cpc	r13, r31
    bd9e:	71 f0       	breq	.+28     	; 0xbdbc <f_getcwd+0x1d6>
    bda0:	21 50       	subi	r18, 0x01	; 1
    bda2:	31 09       	sbc	r19, r1
    bda4:	45 89       	ldd	r20, Z+21	; 0x15
    bda6:	c9 5b       	subi	r28, 0xB9	; 185
    bda8:	de 4f       	sbci	r29, 0xFE	; 254
    bdaa:	a8 81       	ld	r26, Y
    bdac:	b9 81       	ldd	r27, Y+1	; 0x01
    bdae:	c7 54       	subi	r28, 0x47	; 71
    bdb0:	d1 40       	sbci	r29, 0x01	; 1
    bdb2:	a2 0f       	add	r26, r18
    bdb4:	b3 1f       	adc	r27, r19
    bdb6:	4c 93       	st	X, r20
    bdb8:	31 97       	sbiw	r30, 0x01	; 1
    bdba:	ef cf       	rjmp	.-34     	; 0xbd9a <f_getcwd+0x1b4>
    bdbc:	80 95       	com	r24
    bdbe:	90 95       	com	r25
    bdc0:	08 0f       	add	r16, r24
    bdc2:	19 1f       	adc	r17, r25
    bdc4:	c9 5b       	subi	r28, 0xB9	; 185
    bdc6:	de 4f       	sbci	r29, 0xFE	; 254
    bdc8:	e8 81       	ld	r30, Y
    bdca:	f9 81       	ldd	r31, Y+1	; 0x01
    bdcc:	c7 54       	subi	r28, 0x47	; 71
    bdce:	d1 40       	sbci	r29, 0x01	; 1
    bdd0:	e0 0f       	add	r30, r16
    bdd2:	f1 1f       	adc	r31, r17
    bdd4:	9f e2       	ldi	r25, 0x2F	; 47
    bdd6:	90 83       	st	Z, r25
    bdd8:	4f cf       	rjmp	.-354    	; 0xbc78 <f_getcwd+0x92>
    bdda:	08 15       	cp	r16, r8
    bddc:	19 05       	cpc	r17, r9
    bdde:	61 f4       	brne	.+24     	; 0xbdf8 <f_getcwd+0x212>
    bde0:	01 50       	subi	r16, 0x01	; 1
    bde2:	11 09       	sbc	r17, r1
    bde4:	c9 5b       	subi	r28, 0xB9	; 185
    bde6:	de 4f       	sbci	r29, 0xFE	; 254
    bde8:	e8 81       	ld	r30, Y
    bdea:	f9 81       	ldd	r31, Y+1	; 0x01
    bdec:	c7 54       	subi	r28, 0x47	; 71
    bdee:	d1 40       	sbci	r29, 0x01	; 1
    bdf0:	e0 0f       	add	r30, r16
    bdf2:	f1 1f       	adc	r31, r17
    bdf4:	8f e2       	ldi	r24, 0x2F	; 47
    bdf6:	80 83       	st	Z, r24
    bdf8:	ef ef       	ldi	r30, 0xFF	; 255
    bdfa:	ee 1a       	sub	r14, r30
    bdfc:	fe 0a       	sbc	r15, r30
    bdfe:	c9 5b       	subi	r28, 0xB9	; 185
    be00:	de 4f       	sbci	r29, 0xFE	; 254
    be02:	e8 81       	ld	r30, Y
    be04:	f9 81       	ldd	r31, Y+1	; 0x01
    be06:	c7 54       	subi	r28, 0x47	; 71
    be08:	d1 40       	sbci	r29, 0x01	; 1
    be0a:	e0 0f       	add	r30, r16
    be0c:	f1 1f       	adc	r31, r17
    be0e:	80 81       	ld	r24, Z
    be10:	f7 01       	movw	r30, r14
    be12:	31 97       	sbiw	r30, 0x01	; 1
    be14:	80 83       	st	Z, r24
    be16:	0f 5f       	subi	r16, 0xFF	; 255
    be18:	1f 4f       	sbci	r17, 0xFF	; 255
    be1a:	08 15       	cp	r16, r8
    be1c:	19 05       	cpc	r17, r9
    be1e:	60 f3       	brcs	.-40     	; 0xbdf8 <f_getcwd+0x212>
    be20:	c5 01       	movw	r24, r10
    be22:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <ff_memfree>
    be26:	f7 01       	movw	r30, r14
    be28:	10 82       	st	Z, r1
    be2a:	c1 01       	movw	r24, r2
    be2c:	0d c0       	rjmp	.+26     	; 0xbe48 <f_getcwd+0x262>
    be2e:	81 e1       	ldi	r24, 0x11	; 17
    be30:	90 e0       	ldi	r25, 0x00	; 0
    be32:	0a c0       	rjmp	.+20     	; 0xbe48 <f_getcwd+0x262>
    be34:	81 e1       	ldi	r24, 0x11	; 17
    be36:	90 e0       	ldi	r25, 0x00	; 0
    be38:	1c 01       	movw	r2, r24
    be3a:	f2 cf       	rjmp	.-28     	; 0xbe20 <f_getcwd+0x23a>
    be3c:	84 30       	cpi	r24, 0x04	; 4
    be3e:	91 05       	cpc	r25, r1
    be40:	d9 f7       	brne	.-10     	; 0xbe38 <f_getcwd+0x252>
    be42:	82 e0       	ldi	r24, 0x02	; 2
    be44:	90 e0       	ldi	r25, 0x00	; 0
    be46:	f8 cf       	rjmp	.-16     	; 0xbe38 <f_getcwd+0x252>
    be48:	c8 5b       	subi	r28, 0xB8	; 184
    be4a:	de 4f       	sbci	r29, 0xFE	; 254
    be4c:	e2 e1       	ldi	r30, 0x12	; 18
    be4e:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000be52 <f_lseek>:
    be52:	aa e0       	ldi	r26, 0x0A	; 10
    be54:	b0 e0       	ldi	r27, 0x00	; 0
    be56:	ef e2       	ldi	r30, 0x2F	; 47
    be58:	ff e5       	ldi	r31, 0x5F	; 95
    be5a:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    be5e:	1c 01       	movw	r2, r24
    be60:	6a 01       	movw	r12, r20
    be62:	7b 01       	movw	r14, r22
    be64:	be 01       	movw	r22, r28
    be66:	6f 5f       	subi	r22, 0xFF	; 255
    be68:	7f 4f       	sbci	r23, 0xFF	; 255
    be6a:	0e 94 ab 46 	call	0x8d56	; 0x8d56 <validate>
    be6e:	00 97       	sbiw	r24, 0x00	; 0
    be70:	09 f0       	breq	.+2      	; 0xbe74 <f_lseek+0x22>
    be72:	a7 c2       	rjmp	.+1358   	; 0xc3c2 <f_lseek+0x570>
    be74:	f1 01       	movw	r30, r2
    be76:	87 85       	ldd	r24, Z+15	; 0x0f
    be78:	90 e0       	ldi	r25, 0x00	; 0
    be7a:	00 97       	sbiw	r24, 0x00	; 0
    be7c:	09 f0       	breq	.+2      	; 0xbe80 <f_lseek+0x2e>
    be7e:	a1 c2       	rjmp	.+1346   	; 0xc3c2 <f_lseek+0x570>
    be80:	22 a1       	ldd	r18, Z+34	; 0x22
    be82:	33 a1       	ldd	r19, Z+35	; 0x23
    be84:	21 15       	cp	r18, r1
    be86:	31 05       	cpc	r19, r1
    be88:	09 f4       	brne	.+2      	; 0xbe8c <f_lseek+0x3a>
    be8a:	2e c1       	rjmp	.+604    	; 0xc0e8 <f_lseek+0x296>
    be8c:	ff ef       	ldi	r31, 0xFF	; 255
    be8e:	cf 16       	cp	r12, r31
    be90:	df 06       	cpc	r13, r31
    be92:	ef 06       	cpc	r14, r31
    be94:	ff 06       	cpc	r15, r31
    be96:	09 f0       	breq	.+2      	; 0xbe9a <f_lseek+0x48>
    be98:	9a c0       	rjmp	.+308    	; 0xbfce <f_lseek+0x17c>
    be9a:	89 01       	movw	r16, r18
    be9c:	0c 5f       	subi	r16, 0xFC	; 252
    be9e:	1f 4f       	sbci	r17, 0xFF	; 255
    bea0:	d9 01       	movw	r26, r18
    bea2:	4d 91       	ld	r20, X+
    bea4:	5d 91       	ld	r21, X+
    bea6:	6d 91       	ld	r22, X+
    bea8:	7c 91       	ld	r23, X
    beaa:	4f 83       	std	Y+7, r20	; 0x07
    beac:	58 87       	std	Y+8, r21	; 0x08
    beae:	69 87       	std	Y+9, r22	; 0x09
    beb0:	7a 87       	std	Y+10, r23	; 0x0a
    beb2:	f1 01       	movw	r30, r2
    beb4:	86 80       	ldd	r8, Z+6	; 0x06
    beb6:	97 80       	ldd	r9, Z+7	; 0x07
    beb8:	a0 84       	ldd	r10, Z+8	; 0x08
    beba:	b1 84       	ldd	r11, Z+9	; 0x09
    bebc:	52 e0       	ldi	r21, 0x02	; 2
    bebe:	c5 2e       	mov	r12, r21
    bec0:	d1 2c       	mov	r13, r1
    bec2:	e1 2c       	mov	r14, r1
    bec4:	f1 2c       	mov	r15, r1
    bec6:	81 14       	cp	r8, r1
    bec8:	91 04       	cpc	r9, r1
    beca:	a1 04       	cpc	r10, r1
    becc:	b1 04       	cpc	r11, r1
    bece:	09 f4       	brne	.+2      	; 0xbed2 <f_lseek+0x80>
    bed0:	65 c0       	rjmp	.+202    	; 0xbf9c <f_lseek+0x14a>
    bed2:	24 01       	movw	r4, r8
    bed4:	35 01       	movw	r6, r10
    bed6:	1b 82       	std	Y+3, r1	; 0x03
    bed8:	1c 82       	std	Y+4, r1	; 0x04
    beda:	1d 82       	std	Y+5, r1	; 0x05
    bedc:	1e 82       	std	Y+6, r1	; 0x06
    bede:	2b 81       	ldd	r18, Y+3	; 0x03
    bee0:	3c 81       	ldd	r19, Y+4	; 0x04
    bee2:	4d 81       	ldd	r20, Y+5	; 0x05
    bee4:	5e 81       	ldd	r21, Y+6	; 0x06
    bee6:	2f 5f       	subi	r18, 0xFF	; 255
    bee8:	3f 4f       	sbci	r19, 0xFF	; 255
    beea:	4f 4f       	sbci	r20, 0xFF	; 255
    beec:	5f 4f       	sbci	r21, 0xFF	; 255
    beee:	2b 83       	std	Y+3, r18	; 0x03
    bef0:	3c 83       	std	Y+4, r19	; 0x04
    bef2:	4d 83       	std	Y+5, r20	; 0x05
    bef4:	5e 83       	std	Y+6, r21	; 0x06
    bef6:	b3 01       	movw	r22, r6
    bef8:	a2 01       	movw	r20, r4
    befa:	d1 01       	movw	r26, r2
    befc:	8d 91       	ld	r24, X+
    befe:	9c 91       	ld	r25, X
    bf00:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <get_fat.isra.10>
    bf04:	62 30       	cpi	r22, 0x02	; 2
    bf06:	71 05       	cpc	r23, r1
    bf08:	81 05       	cpc	r24, r1
    bf0a:	91 05       	cpc	r25, r1
    bf0c:	10 f4       	brcc	.+4      	; 0xbf12 <f_lseek+0xc0>
    bf0e:	82 e0       	ldi	r24, 0x02	; 2
    bf10:	07 c0       	rjmp	.+14     	; 0xbf20 <f_lseek+0xce>
    bf12:	6f 3f       	cpi	r22, 0xFF	; 255
    bf14:	ff ef       	ldi	r31, 0xFF	; 255
    bf16:	7f 07       	cpc	r23, r31
    bf18:	8f 07       	cpc	r24, r31
    bf1a:	9f 07       	cpc	r25, r31
    bf1c:	29 f4       	brne	.+10     	; 0xbf28 <f_lseek+0xd6>
    bf1e:	81 e0       	ldi	r24, 0x01	; 1
    bf20:	f1 01       	movw	r30, r2
    bf22:	87 87       	std	Z+15, r24	; 0x0f
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	4d c2       	rjmp	.+1178   	; 0xc3c2 <f_lseek+0x570>
    bf28:	a3 01       	movw	r20, r6
    bf2a:	92 01       	movw	r18, r4
    bf2c:	2f 5f       	subi	r18, 0xFF	; 255
    bf2e:	3f 4f       	sbci	r19, 0xFF	; 255
    bf30:	4f 4f       	sbci	r20, 0xFF	; 255
    bf32:	5f 4f       	sbci	r21, 0xFF	; 255
    bf34:	2b 01       	movw	r4, r22
    bf36:	3c 01       	movw	r6, r24
    bf38:	62 17       	cp	r22, r18
    bf3a:	73 07       	cpc	r23, r19
    bf3c:	84 07       	cpc	r24, r20
    bf3e:	95 07       	cpc	r25, r21
    bf40:	71 f2       	breq	.-100    	; 0xbede <f_lseek+0x8c>
    bf42:	f2 e0       	ldi	r31, 0x02	; 2
    bf44:	cf 0e       	add	r12, r31
    bf46:	d1 1c       	adc	r13, r1
    bf48:	e1 1c       	adc	r14, r1
    bf4a:	f1 1c       	adc	r15, r1
    bf4c:	2f 81       	ldd	r18, Y+7	; 0x07
    bf4e:	38 85       	ldd	r19, Y+8	; 0x08
    bf50:	49 85       	ldd	r20, Y+9	; 0x09
    bf52:	5a 85       	ldd	r21, Y+10	; 0x0a
    bf54:	2c 15       	cp	r18, r12
    bf56:	3d 05       	cpc	r19, r13
    bf58:	4e 05       	cpc	r20, r14
    bf5a:	5f 05       	cpc	r21, r15
    bf5c:	88 f0       	brcs	.+34     	; 0xbf80 <f_lseek+0x12e>
    bf5e:	2b 81       	ldd	r18, Y+3	; 0x03
    bf60:	3c 81       	ldd	r19, Y+4	; 0x04
    bf62:	4d 81       	ldd	r20, Y+5	; 0x05
    bf64:	5e 81       	ldd	r21, Y+6	; 0x06
    bf66:	d8 01       	movw	r26, r16
    bf68:	2d 93       	st	X+, r18
    bf6a:	3d 93       	st	X+, r19
    bf6c:	4d 93       	st	X+, r20
    bf6e:	5c 93       	st	X, r21
    bf70:	13 97       	sbiw	r26, 0x03	; 3
    bf72:	f8 01       	movw	r30, r16
    bf74:	84 82       	std	Z+4, r8	; 0x04
    bf76:	95 82       	std	Z+5, r9	; 0x05
    bf78:	a6 82       	std	Z+6, r10	; 0x06
    bf7a:	b7 82       	std	Z+7, r11	; 0x07
    bf7c:	08 5f       	subi	r16, 0xF8	; 248
    bf7e:	1f 4f       	sbci	r17, 0xFF	; 255
    bf80:	e9 81       	ldd	r30, Y+1	; 0x01
    bf82:	fa 81       	ldd	r31, Y+2	; 0x02
    bf84:	81 8c       	ldd	r8, Z+25	; 0x19
    bf86:	92 8c       	ldd	r9, Z+26	; 0x1a
    bf88:	a3 8c       	ldd	r10, Z+27	; 0x1b
    bf8a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    bf8c:	68 15       	cp	r22, r8
    bf8e:	79 05       	cpc	r23, r9
    bf90:	8a 05       	cpc	r24, r10
    bf92:	9b 05       	cpc	r25, r11
    bf94:	18 f4       	brcc	.+6      	; 0xbf9c <f_lseek+0x14a>
    bf96:	4b 01       	movw	r8, r22
    bf98:	5c 01       	movw	r10, r24
    bf9a:	9b cf       	rjmp	.-202    	; 0xbed2 <f_lseek+0x80>
    bf9c:	f1 01       	movw	r30, r2
    bf9e:	a2 a1       	ldd	r26, Z+34	; 0x22
    bfa0:	b3 a1       	ldd	r27, Z+35	; 0x23
    bfa2:	cd 92       	st	X+, r12
    bfa4:	dd 92       	st	X+, r13
    bfa6:	ed 92       	st	X+, r14
    bfa8:	fc 92       	st	X, r15
    bfaa:	13 97       	sbiw	r26, 0x03	; 3
    bfac:	2f 81       	ldd	r18, Y+7	; 0x07
    bfae:	38 85       	ldd	r19, Y+8	; 0x08
    bfb0:	49 85       	ldd	r20, Y+9	; 0x09
    bfb2:	5a 85       	ldd	r21, Y+10	; 0x0a
    bfb4:	2c 15       	cp	r18, r12
    bfb6:	3d 05       	cpc	r19, r13
    bfb8:	4e 05       	cpc	r20, r14
    bfba:	5f 05       	cpc	r21, r15
    bfbc:	08 f4       	brcc	.+2      	; 0xbfc0 <f_lseek+0x16e>
    bfbe:	f8 c1       	rjmp	.+1008   	; 0xc3b0 <f_lseek+0x55e>
    bfc0:	d8 01       	movw	r26, r16
    bfc2:	1d 92       	st	X+, r1
    bfc4:	1d 92       	st	X+, r1
    bfc6:	1d 92       	st	X+, r1
    bfc8:	1c 92       	st	X, r1
    bfca:	13 97       	sbiw	r26, 0x03	; 3
    bfcc:	ef c1       	rjmp	.+990    	; 0xc3ac <f_lseek+0x55a>
    bfce:	f1 01       	movw	r30, r2
    bfd0:	82 85       	ldd	r24, Z+10	; 0x0a
    bfd2:	93 85       	ldd	r25, Z+11	; 0x0b
    bfd4:	a4 85       	ldd	r26, Z+12	; 0x0c
    bfd6:	b5 85       	ldd	r27, Z+13	; 0x0d
    bfd8:	46 01       	movw	r8, r12
    bfda:	57 01       	movw	r10, r14
    bfdc:	8c 15       	cp	r24, r12
    bfde:	9d 05       	cpc	r25, r13
    bfe0:	ae 05       	cpc	r26, r14
    bfe2:	bf 05       	cpc	r27, r15
    bfe4:	10 f4       	brcc	.+4      	; 0xbfea <f_lseek+0x198>
    bfe6:	4c 01       	movw	r8, r24
    bfe8:	5d 01       	movw	r10, r26
    bfea:	f1 01       	movw	r30, r2
    bfec:	80 8a       	std	Z+16, r8	; 0x10
    bfee:	91 8a       	std	Z+17, r9	; 0x11
    bff0:	a2 8a       	std	Z+18, r10	; 0x12
    bff2:	b3 8a       	std	Z+19, r11	; 0x13
    bff4:	81 14       	cp	r8, r1
    bff6:	91 04       	cpc	r9, r1
    bff8:	a1 04       	cpc	r10, r1
    bffa:	b1 04       	cpc	r11, r1
    bffc:	09 f4       	brne	.+2      	; 0xc000 <f_lseek+0x1ae>
    bffe:	d6 c1       	rjmp	.+940    	; 0xc3ac <f_lseek+0x55a>
    c000:	24 01       	movw	r4, r8
    c002:	35 01       	movw	r6, r10
    c004:	f1 e0       	ldi	r31, 0x01	; 1
    c006:	4f 1a       	sub	r4, r31
    c008:	51 08       	sbc	r5, r1
    c00a:	61 08       	sbc	r6, r1
    c00c:	71 08       	sbc	r7, r1
    c00e:	b3 01       	movw	r22, r6
    c010:	a2 01       	movw	r20, r4
    c012:	c1 01       	movw	r24, r2
    c014:	0e 94 34 46 	call	0x8c68	; 0x8c68 <clmt_clust>
    c018:	ab 01       	movw	r20, r22
    c01a:	bc 01       	movw	r22, r24
    c01c:	f1 01       	movw	r30, r2
    c01e:	44 8b       	std	Z+20, r20	; 0x14
    c020:	55 8b       	std	Z+21, r21	; 0x15
    c022:	66 8b       	std	Z+22, r22	; 0x16
    c024:	77 8b       	std	Z+23, r23	; 0x17
    c026:	e9 80       	ldd	r14, Y+1	; 0x01
    c028:	fa 80       	ldd	r15, Y+2	; 0x02
    c02a:	c7 01       	movw	r24, r14
    c02c:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    c030:	61 15       	cp	r22, r1
    c032:	71 05       	cpc	r23, r1
    c034:	81 05       	cpc	r24, r1
    c036:	91 05       	cpc	r25, r1
    c038:	09 f4       	brne	.+2      	; 0xc03c <f_lseek+0x1ea>
    c03a:	69 cf       	rjmp	.-302    	; 0xbf0e <f_lseek+0xbc>
    c03c:	95 01       	movw	r18, r10
    c03e:	84 01       	movw	r16, r8
    c040:	11 70       	andi	r17, 0x01	; 1
    c042:	22 27       	eor	r18, r18
    c044:	33 27       	eor	r19, r19
    c046:	01 15       	cp	r16, r1
    c048:	11 05       	cpc	r17, r1
    c04a:	21 05       	cpc	r18, r1
    c04c:	31 05       	cpc	r19, r1
    c04e:	09 f4       	brne	.+2      	; 0xc052 <f_lseek+0x200>
    c050:	ad c1       	rjmp	.+858    	; 0xc3ac <f_lseek+0x55a>
    c052:	f7 01       	movw	r30, r14
    c054:	81 84       	ldd	r8, Z+9	; 0x09
    c056:	92 84       	ldd	r9, Z+10	; 0x0a
    c058:	f1 e0       	ldi	r31, 0x01	; 1
    c05a:	8f 1a       	sub	r8, r31
    c05c:	91 08       	sbc	r9, r1
    c05e:	a1 2c       	mov	r10, r1
    c060:	b1 2c       	mov	r11, r1
    c062:	49 e0       	ldi	r20, 0x09	; 9
    c064:	76 94       	lsr	r7
    c066:	67 94       	ror	r6
    c068:	57 94       	ror	r5
    c06a:	47 94       	ror	r4
    c06c:	4a 95       	dec	r20
    c06e:	d1 f7       	brne	.-12     	; 0xc064 <f_lseek+0x212>
    c070:	48 20       	and	r4, r8
    c072:	59 20       	and	r5, r9
    c074:	6a 20       	and	r6, r10
    c076:	7b 20       	and	r7, r11
    c078:	53 01       	movw	r10, r6
    c07a:	42 01       	movw	r8, r4
    c07c:	86 0e       	add	r8, r22
    c07e:	97 1e       	adc	r9, r23
    c080:	a8 1e       	adc	r10, r24
    c082:	b9 1e       	adc	r11, r25
    c084:	f1 01       	movw	r30, r2
    c086:	20 8d       	ldd	r18, Z+24	; 0x18
    c088:	31 8d       	ldd	r19, Z+25	; 0x19
    c08a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c08c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c08e:	82 16       	cp	r8, r18
    c090:	93 06       	cpc	r9, r19
    c092:	a4 06       	cpc	r10, r20
    c094:	b5 06       	cpc	r11, r21
    c096:	09 f4       	brne	.+2      	; 0xc09a <f_lseek+0x248>
    c098:	89 c1       	rjmp	.+786    	; 0xc3ac <f_lseek+0x55a>
    c09a:	86 85       	ldd	r24, Z+14	; 0x0e
    c09c:	b1 01       	movw	r22, r2
    c09e:	6c 5d       	subi	r22, 0xDC	; 220
    c0a0:	7f 4f       	sbci	r23, 0xFF	; 255
    c0a2:	6b 01       	movw	r12, r22
    c0a4:	87 ff       	sbrs	r24, 7
    c0a6:	0d c0       	rjmp	.+26     	; 0xc0c2 <f_lseek+0x270>
    c0a8:	01 e0       	ldi	r16, 0x01	; 1
    c0aa:	10 e0       	ldi	r17, 0x00	; 0
    c0ac:	f7 01       	movw	r30, r14
    c0ae:	81 81       	ldd	r24, Z+1	; 0x01
    c0b0:	0e 94 87 68 	call	0xd10e	; 0xd10e <disk_write>
    c0b4:	89 2b       	or	r24, r25
    c0b6:	09 f0       	breq	.+2      	; 0xc0ba <f_lseek+0x268>
    c0b8:	32 cf       	rjmp	.-412    	; 0xbf1e <f_lseek+0xcc>
    c0ba:	f1 01       	movw	r30, r2
    c0bc:	86 85       	ldd	r24, Z+14	; 0x0e
    c0be:	8f 77       	andi	r24, 0x7F	; 127
    c0c0:	86 87       	std	Z+14, r24	; 0x0e
    c0c2:	e9 81       	ldd	r30, Y+1	; 0x01
    c0c4:	fa 81       	ldd	r31, Y+2	; 0x02
    c0c6:	01 e0       	ldi	r16, 0x01	; 1
    c0c8:	10 e0       	ldi	r17, 0x00	; 0
    c0ca:	a5 01       	movw	r20, r10
    c0cc:	94 01       	movw	r18, r8
    c0ce:	b6 01       	movw	r22, r12
    c0d0:	81 81       	ldd	r24, Z+1	; 0x01
    c0d2:	0e 94 77 68 	call	0xd0ee	; 0xd0ee <disk_read>
    c0d6:	89 2b       	or	r24, r25
    c0d8:	09 f0       	breq	.+2      	; 0xc0dc <f_lseek+0x28a>
    c0da:	21 cf       	rjmp	.-446    	; 0xbf1e <f_lseek+0xcc>
    c0dc:	f1 01       	movw	r30, r2
    c0de:	80 8e       	std	Z+24, r8	; 0x18
    c0e0:	91 8e       	std	Z+25, r9	; 0x19
    c0e2:	a2 8e       	std	Z+26, r10	; 0x1a
    c0e4:	b3 8e       	std	Z+27, r11	; 0x1b
    c0e6:	62 c1       	rjmp	.+708    	; 0xc3ac <f_lseek+0x55a>
    c0e8:	f1 01       	movw	r30, r2
    c0ea:	82 85       	ldd	r24, Z+10	; 0x0a
    c0ec:	93 85       	ldd	r25, Z+11	; 0x0b
    c0ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    c0f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    c0f2:	8c 15       	cp	r24, r12
    c0f4:	9d 05       	cpc	r25, r13
    c0f6:	ae 05       	cpc	r26, r14
    c0f8:	bf 05       	cpc	r27, r15
    c0fa:	28 f4       	brcc	.+10     	; 0xc106 <f_lseek+0x2b4>
    c0fc:	26 85       	ldd	r18, Z+14	; 0x0e
    c0fe:	21 fd       	sbrc	r18, 1
    c100:	02 c0       	rjmp	.+4      	; 0xc106 <f_lseek+0x2b4>
    c102:	6c 01       	movw	r12, r24
    c104:	7d 01       	movw	r14, r26
    c106:	f1 01       	movw	r30, r2
    c108:	40 88       	ldd	r4, Z+16	; 0x10
    c10a:	51 88       	ldd	r5, Z+17	; 0x11
    c10c:	62 88       	ldd	r6, Z+18	; 0x12
    c10e:	73 88       	ldd	r7, Z+19	; 0x13
    c110:	10 8a       	std	Z+16, r1	; 0x10
    c112:	11 8a       	std	Z+17, r1	; 0x11
    c114:	12 8a       	std	Z+18, r1	; 0x12
    c116:	13 8a       	std	Z+19, r1	; 0x13
    c118:	c1 14       	cp	r12, r1
    c11a:	d1 04       	cpc	r13, r1
    c11c:	e1 04       	cpc	r14, r1
    c11e:	f1 04       	cpc	r15, r1
    c120:	09 f4       	brne	.+2      	; 0xc124 <f_lseek+0x2d2>
    c122:	48 c1       	rjmp	.+656    	; 0xc3b4 <f_lseek+0x562>
    c124:	e9 81       	ldd	r30, Y+1	; 0x01
    c126:	fa 81       	ldd	r31, Y+2	; 0x02
    c128:	81 84       	ldd	r8, Z+9	; 0x09
    c12a:	92 84       	ldd	r9, Z+10	; 0x0a
    c12c:	a1 2c       	mov	r10, r1
    c12e:	b1 2c       	mov	r11, r1
    c130:	39 e0       	ldi	r19, 0x09	; 9
    c132:	88 0c       	add	r8, r8
    c134:	99 1c       	adc	r9, r9
    c136:	aa 1c       	adc	r10, r10
    c138:	bb 1c       	adc	r11, r11
    c13a:	3a 95       	dec	r19
    c13c:	d1 f7       	brne	.-12     	; 0xc132 <f_lseek+0x2e0>
    c13e:	41 14       	cp	r4, r1
    c140:	51 04       	cpc	r5, r1
    c142:	61 04       	cpc	r6, r1
    c144:	71 04       	cpc	r7, r1
    c146:	d9 f1       	breq	.+118    	; 0xc1be <f_lseek+0x36c>
    c148:	f1 e0       	ldi	r31, 0x01	; 1
    c14a:	4f 1a       	sub	r4, r31
    c14c:	51 08       	sbc	r5, r1
    c14e:	61 08       	sbc	r6, r1
    c150:	71 08       	sbc	r7, r1
    c152:	c7 01       	movw	r24, r14
    c154:	b6 01       	movw	r22, r12
    c156:	61 50       	subi	r22, 0x01	; 1
    c158:	71 09       	sbc	r23, r1
    c15a:	81 09       	sbc	r24, r1
    c15c:	91 09       	sbc	r25, r1
    c15e:	a5 01       	movw	r20, r10
    c160:	94 01       	movw	r18, r8
    c162:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    c166:	2b 83       	std	Y+3, r18	; 0x03
    c168:	3c 83       	std	Y+4, r19	; 0x04
    c16a:	4d 83       	std	Y+5, r20	; 0x05
    c16c:	5e 83       	std	Y+6, r21	; 0x06
    c16e:	c3 01       	movw	r24, r6
    c170:	b2 01       	movw	r22, r4
    c172:	a5 01       	movw	r20, r10
    c174:	94 01       	movw	r18, r8
    c176:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
    c17a:	6b 81       	ldd	r22, Y+3	; 0x03
    c17c:	7c 81       	ldd	r23, Y+4	; 0x04
    c17e:	8d 81       	ldd	r24, Y+5	; 0x05
    c180:	9e 81       	ldd	r25, Y+6	; 0x06
    c182:	62 17       	cp	r22, r18
    c184:	73 07       	cpc	r23, r19
    c186:	84 07       	cpc	r24, r20
    c188:	95 07       	cpc	r25, r21
    c18a:	c8 f0       	brcs	.+50     	; 0xc1be <f_lseek+0x36c>
    c18c:	88 27       	eor	r24, r24
    c18e:	99 27       	eor	r25, r25
    c190:	dc 01       	movw	r26, r24
    c192:	88 19       	sub	r24, r8
    c194:	99 09       	sbc	r25, r9
    c196:	aa 09       	sbc	r26, r10
    c198:	bb 09       	sbc	r27, r11
    c19a:	48 22       	and	r4, r24
    c19c:	59 22       	and	r5, r25
    c19e:	6a 22       	and	r6, r26
    c1a0:	7b 22       	and	r7, r27
    c1a2:	f1 01       	movw	r30, r2
    c1a4:	40 8a       	std	Z+16, r4	; 0x10
    c1a6:	51 8a       	std	Z+17, r5	; 0x11
    c1a8:	62 8a       	std	Z+18, r6	; 0x12
    c1aa:	73 8a       	std	Z+19, r7	; 0x13
    c1ac:	c4 18       	sub	r12, r4
    c1ae:	d5 08       	sbc	r13, r5
    c1b0:	e6 08       	sbc	r14, r6
    c1b2:	f7 08       	sbc	r15, r7
    c1b4:	44 89       	ldd	r20, Z+20	; 0x14
    c1b6:	55 89       	ldd	r21, Z+21	; 0x15
    c1b8:	66 89       	ldd	r22, Z+22	; 0x16
    c1ba:	77 89       	ldd	r23, Z+23	; 0x17
    c1bc:	29 c0       	rjmp	.+82     	; 0xc210 <f_lseek+0x3be>
    c1be:	f1 01       	movw	r30, r2
    c1c0:	46 81       	ldd	r20, Z+6	; 0x06
    c1c2:	57 81       	ldd	r21, Z+7	; 0x07
    c1c4:	60 85       	ldd	r22, Z+8	; 0x08
    c1c6:	71 85       	ldd	r23, Z+9	; 0x09
    c1c8:	41 15       	cp	r20, r1
    c1ca:	51 05       	cpc	r21, r1
    c1cc:	61 05       	cpc	r22, r1
    c1ce:	71 05       	cpc	r23, r1
    c1d0:	d1 f4       	brne	.+52     	; 0xc206 <f_lseek+0x3b4>
    c1d2:	40 e0       	ldi	r20, 0x00	; 0
    c1d4:	50 e0       	ldi	r21, 0x00	; 0
    c1d6:	ba 01       	movw	r22, r20
    c1d8:	c1 01       	movw	r24, r2
    c1da:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <create_chain>
    c1de:	ab 01       	movw	r20, r22
    c1e0:	bc 01       	movw	r22, r24
    c1e2:	41 30       	cpi	r20, 0x01	; 1
    c1e4:	51 05       	cpc	r21, r1
    c1e6:	61 05       	cpc	r22, r1
    c1e8:	71 05       	cpc	r23, r1
    c1ea:	09 f4       	brne	.+2      	; 0xc1ee <f_lseek+0x39c>
    c1ec:	90 ce       	rjmp	.-736    	; 0xbf0e <f_lseek+0xbc>
    c1ee:	4f 3f       	cpi	r20, 0xFF	; 255
    c1f0:	ff ef       	ldi	r31, 0xFF	; 255
    c1f2:	5f 07       	cpc	r21, r31
    c1f4:	6f 07       	cpc	r22, r31
    c1f6:	7f 07       	cpc	r23, r31
    c1f8:	09 f4       	brne	.+2      	; 0xc1fc <f_lseek+0x3aa>
    c1fa:	91 ce       	rjmp	.-734    	; 0xbf1e <f_lseek+0xcc>
    c1fc:	f1 01       	movw	r30, r2
    c1fe:	46 83       	std	Z+6, r20	; 0x06
    c200:	57 83       	std	Z+7, r21	; 0x07
    c202:	60 87       	std	Z+8, r22	; 0x08
    c204:	71 87       	std	Z+9, r23	; 0x09
    c206:	f1 01       	movw	r30, r2
    c208:	44 8b       	std	Z+20, r20	; 0x14
    c20a:	55 8b       	std	Z+21, r21	; 0x15
    c20c:	66 8b       	std	Z+22, r22	; 0x16
    c20e:	77 8b       	std	Z+23, r23	; 0x17
    c210:	41 15       	cp	r20, r1
    c212:	51 05       	cpc	r21, r1
    c214:	61 05       	cpc	r22, r1
    c216:	71 05       	cpc	r23, r1
    c218:	09 f0       	breq	.+2      	; 0xc21c <f_lseek+0x3ca>
    c21a:	40 c0       	rjmp	.+128    	; 0xc29c <f_lseek+0x44a>
    c21c:	c1 2c       	mov	r12, r1
    c21e:	d1 2c       	mov	r13, r1
    c220:	76 01       	movw	r14, r12
    c222:	79 c0       	rjmp	.+242    	; 0xc316 <f_lseek+0x4c4>
    c224:	c8 18       	sub	r12, r8
    c226:	d9 08       	sbc	r13, r9
    c228:	ea 08       	sbc	r14, r10
    c22a:	fb 08       	sbc	r15, r11
    c22c:	f1 01       	movw	r30, r2
    c22e:	80 89       	ldd	r24, Z+16	; 0x10
    c230:	91 89       	ldd	r25, Z+17	; 0x11
    c232:	a2 89       	ldd	r26, Z+18	; 0x12
    c234:	b3 89       	ldd	r27, Z+19	; 0x13
    c236:	88 0d       	add	r24, r8
    c238:	99 1d       	adc	r25, r9
    c23a:	aa 1d       	adc	r26, r10
    c23c:	bb 1d       	adc	r27, r11
    c23e:	80 8b       	std	Z+16, r24	; 0x10
    c240:	91 8b       	std	Z+17, r25	; 0x11
    c242:	a2 8b       	std	Z+18, r26	; 0x12
    c244:	b3 8b       	std	Z+19, r27	; 0x13
    c246:	86 85       	ldd	r24, Z+14	; 0x0e
    c248:	81 ff       	sbrs	r24, 1
    c24a:	2f c0       	rjmp	.+94     	; 0xc2aa <f_lseek+0x458>
    c24c:	c1 01       	movw	r24, r2
    c24e:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <create_chain>
    c252:	ab 01       	movw	r20, r22
    c254:	bc 01       	movw	r22, r24
    c256:	41 15       	cp	r20, r1
    c258:	51 05       	cpc	r21, r1
    c25a:	61 05       	cpc	r22, r1
    c25c:	71 05       	cpc	r23, r1
    c25e:	61 f1       	breq	.+88     	; 0xc2b8 <f_lseek+0x466>
    c260:	4f 3f       	cpi	r20, 0xFF	; 255
    c262:	bf ef       	ldi	r27, 0xFF	; 255
    c264:	5b 07       	cpc	r21, r27
    c266:	6b 07       	cpc	r22, r27
    c268:	7b 07       	cpc	r23, r27
    c26a:	09 f4       	brne	.+2      	; 0xc26e <f_lseek+0x41c>
    c26c:	58 ce       	rjmp	.-848    	; 0xbf1e <f_lseek+0xcc>
    c26e:	42 30       	cpi	r20, 0x02	; 2
    c270:	51 05       	cpc	r21, r1
    c272:	61 05       	cpc	r22, r1
    c274:	71 05       	cpc	r23, r1
    c276:	08 f4       	brcc	.+2      	; 0xc27a <f_lseek+0x428>
    c278:	4a ce       	rjmp	.-876    	; 0xbf0e <f_lseek+0xbc>
    c27a:	e9 81       	ldd	r30, Y+1	; 0x01
    c27c:	fa 81       	ldd	r31, Y+2	; 0x02
    c27e:	81 8d       	ldd	r24, Z+25	; 0x19
    c280:	92 8d       	ldd	r25, Z+26	; 0x1a
    c282:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c284:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c286:	48 17       	cp	r20, r24
    c288:	59 07       	cpc	r21, r25
    c28a:	6a 07       	cpc	r22, r26
    c28c:	7b 07       	cpc	r23, r27
    c28e:	08 f0       	brcs	.+2      	; 0xc292 <f_lseek+0x440>
    c290:	3e ce       	rjmp	.-900    	; 0xbf0e <f_lseek+0xbc>
    c292:	f1 01       	movw	r30, r2
    c294:	44 8b       	std	Z+20, r20	; 0x14
    c296:	55 8b       	std	Z+21, r21	; 0x15
    c298:	66 8b       	std	Z+22, r22	; 0x16
    c29a:	77 8b       	std	Z+23, r23	; 0x17
    c29c:	8c 14       	cp	r8, r12
    c29e:	9d 04       	cpc	r9, r13
    c2a0:	ae 04       	cpc	r10, r14
    c2a2:	bf 04       	cpc	r11, r15
    c2a4:	08 f4       	brcc	.+2      	; 0xc2a8 <f_lseek+0x456>
    c2a6:	be cf       	rjmp	.-132    	; 0xc224 <f_lseek+0x3d2>
    c2a8:	0a c0       	rjmp	.+20     	; 0xc2be <f_lseek+0x46c>
    c2aa:	80 81       	ld	r24, Z
    c2ac:	91 81       	ldd	r25, Z+1	; 0x01
    c2ae:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <get_fat.isra.10>
    c2b2:	ab 01       	movw	r20, r22
    c2b4:	bc 01       	movw	r22, r24
    c2b6:	d4 cf       	rjmp	.-88     	; 0xc260 <f_lseek+0x40e>
    c2b8:	c1 2c       	mov	r12, r1
    c2ba:	d1 2c       	mov	r13, r1
    c2bc:	76 01       	movw	r14, r12
    c2be:	f1 01       	movw	r30, r2
    c2c0:	80 89       	ldd	r24, Z+16	; 0x10
    c2c2:	91 89       	ldd	r25, Z+17	; 0x11
    c2c4:	a2 89       	ldd	r26, Z+18	; 0x12
    c2c6:	b3 89       	ldd	r27, Z+19	; 0x13
    c2c8:	8c 0d       	add	r24, r12
    c2ca:	9d 1d       	adc	r25, r13
    c2cc:	ae 1d       	adc	r26, r14
    c2ce:	bf 1d       	adc	r27, r15
    c2d0:	80 8b       	std	Z+16, r24	; 0x10
    c2d2:	91 8b       	std	Z+17, r25	; 0x11
    c2d4:	a2 8b       	std	Z+18, r26	; 0x12
    c2d6:	b3 8b       	std	Z+19, r27	; 0x13
    c2d8:	d7 01       	movw	r26, r14
    c2da:	c6 01       	movw	r24, r12
    c2dc:	91 70       	andi	r25, 0x01	; 1
    c2de:	aa 27       	eor	r26, r26
    c2e0:	bb 27       	eor	r27, r27
    c2e2:	89 2b       	or	r24, r25
    c2e4:	8a 2b       	or	r24, r26
    c2e6:	8b 2b       	or	r24, r27
    c2e8:	09 f4       	brne	.+2      	; 0xc2ec <f_lseek+0x49a>
    c2ea:	98 cf       	rjmp	.-208    	; 0xc21c <f_lseek+0x3ca>
    c2ec:	89 81       	ldd	r24, Y+1	; 0x01
    c2ee:	9a 81       	ldd	r25, Y+2	; 0x02
    c2f0:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    c2f4:	61 15       	cp	r22, r1
    c2f6:	71 05       	cpc	r23, r1
    c2f8:	81 05       	cpc	r24, r1
    c2fa:	91 05       	cpc	r25, r1
    c2fc:	09 f4       	brne	.+2      	; 0xc300 <f_lseek+0x4ae>
    c2fe:	07 ce       	rjmp	.-1010   	; 0xbf0e <f_lseek+0xbc>
    c300:	29 e0       	ldi	r18, 0x09	; 9
    c302:	f6 94       	lsr	r15
    c304:	e7 94       	ror	r14
    c306:	d7 94       	ror	r13
    c308:	c7 94       	ror	r12
    c30a:	2a 95       	dec	r18
    c30c:	d1 f7       	brne	.-12     	; 0xc302 <f_lseek+0x4b0>
    c30e:	c6 0e       	add	r12, r22
    c310:	d7 1e       	adc	r13, r23
    c312:	e8 1e       	adc	r14, r24
    c314:	f9 1e       	adc	r15, r25
    c316:	f1 01       	movw	r30, r2
    c318:	80 89       	ldd	r24, Z+16	; 0x10
    c31a:	91 89       	ldd	r25, Z+17	; 0x11
    c31c:	a2 89       	ldd	r26, Z+18	; 0x12
    c31e:	b3 89       	ldd	r27, Z+19	; 0x13
    c320:	42 85       	ldd	r20, Z+10	; 0x0a
    c322:	53 85       	ldd	r21, Z+11	; 0x0b
    c324:	64 85       	ldd	r22, Z+12	; 0x0c
    c326:	75 85       	ldd	r23, Z+13	; 0x0d
    c328:	48 17       	cp	r20, r24
    c32a:	59 07       	cpc	r21, r25
    c32c:	6a 07       	cpc	r22, r26
    c32e:	7b 07       	cpc	r23, r27
    c330:	38 f4       	brcc	.+14     	; 0xc340 <f_lseek+0x4ee>
    c332:	82 87       	std	Z+10, r24	; 0x0a
    c334:	93 87       	std	Z+11, r25	; 0x0b
    c336:	a4 87       	std	Z+12, r26	; 0x0c
    c338:	b5 87       	std	Z+13, r27	; 0x0d
    c33a:	26 85       	ldd	r18, Z+14	; 0x0e
    c33c:	20 64       	ori	r18, 0x40	; 64
    c33e:	26 87       	std	Z+14, r18	; 0x0e
    c340:	91 70       	andi	r25, 0x01	; 1
    c342:	aa 27       	eor	r26, r26
    c344:	bb 27       	eor	r27, r27
    c346:	89 2b       	or	r24, r25
    c348:	8a 2b       	or	r24, r26
    c34a:	8b 2b       	or	r24, r27
    c34c:	79 f1       	breq	.+94     	; 0xc3ac <f_lseek+0x55a>
    c34e:	f1 01       	movw	r30, r2
    c350:	20 8d       	ldd	r18, Z+24	; 0x18
    c352:	31 8d       	ldd	r19, Z+25	; 0x19
    c354:	42 8d       	ldd	r20, Z+26	; 0x1a
    c356:	53 8d       	ldd	r21, Z+27	; 0x1b
    c358:	2c 15       	cp	r18, r12
    c35a:	3d 05       	cpc	r19, r13
    c35c:	4e 05       	cpc	r20, r14
    c35e:	5f 05       	cpc	r21, r15
    c360:	29 f1       	breq	.+74     	; 0xc3ac <f_lseek+0x55a>
    c362:	86 85       	ldd	r24, Z+14	; 0x0e
    c364:	b1 01       	movw	r22, r2
    c366:	6c 5d       	subi	r22, 0xDC	; 220
    c368:	7f 4f       	sbci	r23, 0xFF	; 255
    c36a:	5b 01       	movw	r10, r22
    c36c:	87 ff       	sbrs	r24, 7
    c36e:	0d c0       	rjmp	.+26     	; 0xc38a <f_lseek+0x538>
    c370:	e9 81       	ldd	r30, Y+1	; 0x01
    c372:	fa 81       	ldd	r31, Y+2	; 0x02
    c374:	01 e0       	ldi	r16, 0x01	; 1
    c376:	10 e0       	ldi	r17, 0x00	; 0
    c378:	81 81       	ldd	r24, Z+1	; 0x01
    c37a:	c9 d6       	rcall	.+3474   	; 0xd10e <disk_write>
    c37c:	89 2b       	or	r24, r25
    c37e:	09 f0       	breq	.+2      	; 0xc382 <f_lseek+0x530>
    c380:	ce cd       	rjmp	.-1124   	; 0xbf1e <f_lseek+0xcc>
    c382:	f1 01       	movw	r30, r2
    c384:	86 85       	ldd	r24, Z+14	; 0x0e
    c386:	8f 77       	andi	r24, 0x7F	; 127
    c388:	86 87       	std	Z+14, r24	; 0x0e
    c38a:	e9 81       	ldd	r30, Y+1	; 0x01
    c38c:	fa 81       	ldd	r31, Y+2	; 0x02
    c38e:	01 e0       	ldi	r16, 0x01	; 1
    c390:	10 e0       	ldi	r17, 0x00	; 0
    c392:	a7 01       	movw	r20, r14
    c394:	96 01       	movw	r18, r12
    c396:	b5 01       	movw	r22, r10
    c398:	81 81       	ldd	r24, Z+1	; 0x01
    c39a:	a9 d6       	rcall	.+3410   	; 0xd0ee <disk_read>
    c39c:	89 2b       	or	r24, r25
    c39e:	09 f0       	breq	.+2      	; 0xc3a2 <f_lseek+0x550>
    c3a0:	be cd       	rjmp	.-1156   	; 0xbf1e <f_lseek+0xcc>
    c3a2:	f1 01       	movw	r30, r2
    c3a4:	c0 8e       	std	Z+24, r12	; 0x18
    c3a6:	d1 8e       	std	Z+25, r13	; 0x19
    c3a8:	e2 8e       	std	Z+26, r14	; 0x1a
    c3aa:	f3 8e       	std	Z+27, r15	; 0x1b
    c3ac:	80 e0       	ldi	r24, 0x00	; 0
    c3ae:	ba cd       	rjmp	.-1164   	; 0xbf24 <f_lseek+0xd2>
    c3b0:	81 e1       	ldi	r24, 0x11	; 17
    c3b2:	b8 cd       	rjmp	.-1168   	; 0xbf24 <f_lseek+0xd2>
    c3b4:	80 e0       	ldi	r24, 0x00	; 0
    c3b6:	90 e0       	ldi	r25, 0x00	; 0
    c3b8:	dc 01       	movw	r26, r24
    c3ba:	c1 2c       	mov	r12, r1
    c3bc:	d1 2c       	mov	r13, r1
    c3be:	76 01       	movw	r14, r12
    c3c0:	bf cf       	rjmp	.-130    	; 0xc340 <f_lseek+0x4ee>
    c3c2:	2a 96       	adiw	r28, 0x0a	; 10
    c3c4:	e2 e1       	ldi	r30, 0x12	; 18
    c3c6:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000c3ca <f_opendir>:
    c3ca:	a4 e0       	ldi	r26, 0x04	; 4
    c3cc:	b0 e0       	ldi	r27, 0x00	; 0
    c3ce:	eb ee       	ldi	r30, 0xEB	; 235
    c3d0:	f1 e6       	ldi	r31, 0x61	; 97
    c3d2:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    c3d6:	7c 83       	std	Y+4, r23	; 0x04
    c3d8:	6b 83       	std	Y+3, r22	; 0x03
    c3da:	00 97       	sbiw	r24, 0x00	; 0
    c3dc:	09 f4       	brne	.+2      	; 0xc3e0 <f_opendir+0x16>
    c3de:	48 c0       	rjmp	.+144    	; 0xc470 <f_opendir+0xa6>
    c3e0:	8c 01       	movw	r16, r24
    c3e2:	40 e0       	ldi	r20, 0x00	; 0
    c3e4:	be 01       	movw	r22, r28
    c3e6:	6f 5f       	subi	r22, 0xFF	; 255
    c3e8:	7f 4f       	sbci	r23, 0xFF	; 255
    c3ea:	ce 01       	movw	r24, r28
    c3ec:	03 96       	adiw	r24, 0x03	; 3
    c3ee:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    c3f2:	7c 01       	movw	r14, r24
    c3f4:	89 2b       	or	r24, r25
    c3f6:	b9 f5       	brne	.+110    	; 0xc466 <f_opendir+0x9c>
    c3f8:	89 81       	ldd	r24, Y+1	; 0x01
    c3fa:	9a 81       	ldd	r25, Y+2	; 0x02
    c3fc:	f8 01       	movw	r30, r16
    c3fe:	91 83       	std	Z+1, r25	; 0x01
    c400:	80 83       	st	Z, r24
    c402:	80 e0       	ldi	r24, 0x00	; 0
    c404:	92 e0       	ldi	r25, 0x02	; 2
    c406:	b7 d5       	rcall	.+2926   	; 0xcf76 <ff_memalloc>
    c408:	6c 01       	movw	r12, r24
    c40a:	00 97       	sbiw	r24, 0x00	; 0
    c40c:	99 f1       	breq	.+102    	; 0xc474 <f_opendir+0xaa>
    c40e:	e9 81       	ldd	r30, Y+1	; 0x01
    c410:	fa 81       	ldd	r31, Y+2	; 0x02
    c412:	94 87       	std	Z+12, r25	; 0x0c
    c414:	83 87       	std	Z+11, r24	; 0x0b
    c416:	6b 81       	ldd	r22, Y+3	; 0x03
    c418:	7c 81       	ldd	r23, Y+4	; 0x04
    c41a:	c8 01       	movw	r24, r16
    c41c:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    c420:	7c 01       	movw	r14, r24
    c422:	89 2b       	or	r24, r25
    c424:	b9 f4       	brne	.+46     	; 0xc454 <f_opendir+0x8a>
    c426:	f8 01       	movw	r30, r16
    c428:	87 a1       	ldd	r24, Z+39	; 0x27
    c42a:	87 fd       	sbrc	r24, 7
    c42c:	28 c0       	rjmp	.+80     	; 0xc47e <f_opendir+0xb4>
    c42e:	84 81       	ldd	r24, Z+4	; 0x04
    c430:	84 ff       	sbrs	r24, 4
    c432:	0d c0       	rjmp	.+26     	; 0xc44e <f_opendir+0x84>
    c434:	62 8d       	ldd	r22, Z+26	; 0x1a
    c436:	73 8d       	ldd	r23, Z+27	; 0x1b
    c438:	e9 81       	ldd	r30, Y+1	; 0x01
    c43a:	fa 81       	ldd	r31, Y+2	; 0x02
    c43c:	80 81       	ld	r24, Z
    c43e:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    c442:	f8 01       	movw	r30, r16
    c444:	66 83       	std	Z+6, r22	; 0x06
    c446:	77 83       	std	Z+7, r23	; 0x07
    c448:	80 87       	std	Z+8, r24	; 0x08
    c44a:	91 87       	std	Z+9, r25	; 0x09
    c44c:	18 c0       	rjmp	.+48     	; 0xc47e <f_opendir+0xb4>
    c44e:	95 e0       	ldi	r25, 0x05	; 5
    c450:	e9 2e       	mov	r14, r25
    c452:	f1 2c       	mov	r15, r1
    c454:	c6 01       	movw	r24, r12
    c456:	92 d5       	rcall	.+2852   	; 0xcf7c <ff_memfree>
    c458:	f4 e0       	ldi	r31, 0x04	; 4
    c45a:	ef 16       	cp	r14, r31
    c45c:	f1 04       	cpc	r15, r1
    c45e:	f1 f0       	breq	.+60     	; 0xc49c <f_opendir+0xd2>
    c460:	e1 14       	cp	r14, r1
    c462:	f1 04       	cpc	r15, r1
    c464:	49 f0       	breq	.+18     	; 0xc478 <f_opendir+0xae>
    c466:	f8 01       	movw	r30, r16
    c468:	11 82       	std	Z+1, r1	; 0x01
    c46a:	10 82       	st	Z, r1
    c46c:	c7 01       	movw	r24, r14
    c46e:	1a c0       	rjmp	.+52     	; 0xc4a4 <f_opendir+0xda>
    c470:	89 e0       	ldi	r24, 0x09	; 9
    c472:	03 c0       	rjmp	.+6      	; 0xc47a <f_opendir+0xb0>
    c474:	81 e1       	ldi	r24, 0x11	; 17
    c476:	01 c0       	rjmp	.+2      	; 0xc47a <f_opendir+0xb0>
    c478:	80 e0       	ldi	r24, 0x00	; 0
    c47a:	90 e0       	ldi	r25, 0x00	; 0
    c47c:	13 c0       	rjmp	.+38     	; 0xc4a4 <f_opendir+0xda>
    c47e:	e9 81       	ldd	r30, Y+1	; 0x01
    c480:	fa 81       	ldd	r31, Y+2	; 0x02
    c482:	85 81       	ldd	r24, Z+5	; 0x05
    c484:	96 81       	ldd	r25, Z+6	; 0x06
    c486:	f8 01       	movw	r30, r16
    c488:	93 83       	std	Z+3, r25	; 0x03
    c48a:	82 83       	std	Z+2, r24	; 0x02
    c48c:	40 e0       	ldi	r20, 0x00	; 0
    c48e:	50 e0       	ldi	r21, 0x00	; 0
    c490:	ba 01       	movw	r22, r20
    c492:	c8 01       	movw	r24, r16
    c494:	0e 94 b2 4e 	call	0x9d64	; 0x9d64 <dir_sdi>
    c498:	7c 01       	movw	r14, r24
    c49a:	dc cf       	rjmp	.-72     	; 0xc454 <f_opendir+0x8a>
    c49c:	85 e0       	ldi	r24, 0x05	; 5
    c49e:	e8 2e       	mov	r14, r24
    c4a0:	f1 2c       	mov	r15, r1
    c4a2:	e1 cf       	rjmp	.-62     	; 0xc466 <f_opendir+0x9c>
    c4a4:	24 96       	adiw	r28, 0x04	; 4
    c4a6:	e8 e0       	ldi	r30, 0x08	; 8
    c4a8:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000c4ac <f_closedir>:
    c4ac:	a2 e0       	ldi	r26, 0x02	; 2
    c4ae:	b0 e0       	ldi	r27, 0x00	; 0
    c4b0:	ec e5       	ldi	r30, 0x5C	; 92
    c4b2:	f2 e6       	ldi	r31, 0x62	; 98
    c4b4:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    c4b8:	8c 01       	movw	r16, r24
    c4ba:	be 01       	movw	r22, r28
    c4bc:	6f 5f       	subi	r22, 0xFF	; 255
    c4be:	7f 4f       	sbci	r23, 0xFF	; 255
    c4c0:	0e 94 ab 46 	call	0x8d56	; 0x8d56 <validate>
    c4c4:	00 97       	sbiw	r24, 0x00	; 0
    c4c6:	19 f4       	brne	.+6      	; 0xc4ce <f_closedir+0x22>
    c4c8:	f8 01       	movw	r30, r16
    c4ca:	11 82       	std	Z+1, r1	; 0x01
    c4cc:	10 82       	st	Z, r1
    c4ce:	22 96       	adiw	r28, 0x02	; 2
    c4d0:	e4 e0       	ldi	r30, 0x04	; 4
    c4d2:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000c4d6 <f_readdir>:
    c4d6:	a2 e0       	ldi	r26, 0x02	; 2
    c4d8:	b0 e0       	ldi	r27, 0x00	; 0
    c4da:	e1 e7       	ldi	r30, 0x71	; 113
    c4dc:	f2 e6       	ldi	r31, 0x62	; 98
    c4de:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
    c4e2:	7c 01       	movw	r14, r24
    c4e4:	5b 01       	movw	r10, r22
    c4e6:	be 01       	movw	r22, r28
    c4e8:	6f 5f       	subi	r22, 0xFF	; 255
    c4ea:	7f 4f       	sbci	r23, 0xFF	; 255
    c4ec:	0e 94 ab 46 	call	0x8d56	; 0x8d56 <validate>
    c4f0:	00 97       	sbiw	r24, 0x00	; 0
    c4f2:	89 f5       	brne	.+98     	; 0xc556 <f_readdir+0x80>
    c4f4:	a1 14       	cp	r10, r1
    c4f6:	b1 04       	cpc	r11, r1
    c4f8:	39 f4       	brne	.+14     	; 0xc508 <f_readdir+0x32>
    c4fa:	40 e0       	ldi	r20, 0x00	; 0
    c4fc:	50 e0       	ldi	r21, 0x00	; 0
    c4fe:	ba 01       	movw	r22, r20
    c500:	c7 01       	movw	r24, r14
    c502:	0e 94 b2 4e 	call	0x9d64	; 0x9d64 <dir_sdi>
    c506:	27 c0       	rjmp	.+78     	; 0xc556 <f_readdir+0x80>
    c508:	80 e0       	ldi	r24, 0x00	; 0
    c50a:	92 e0       	ldi	r25, 0x02	; 2
    c50c:	34 d5       	rcall	.+2664   	; 0xcf76 <ff_memalloc>
    c50e:	6c 01       	movw	r12, r24
    c510:	00 97       	sbiw	r24, 0x00	; 0
    c512:	f9 f0       	breq	.+62     	; 0xc552 <f_readdir+0x7c>
    c514:	e9 81       	ldd	r30, Y+1	; 0x01
    c516:	fa 81       	ldd	r31, Y+2	; 0x02
    c518:	94 87       	std	Z+12, r25	; 0x0c
    c51a:	83 87       	std	Z+11, r24	; 0x0b
    c51c:	60 e0       	ldi	r22, 0x00	; 0
    c51e:	70 e0       	ldi	r23, 0x00	; 0
    c520:	c7 01       	movw	r24, r14
    c522:	0e 94 4b 52 	call	0xa496	; 0xa496 <dir_read>
    c526:	8c 01       	movw	r16, r24
    c528:	8b 7f       	andi	r24, 0xFB	; 251
    c52a:	89 2b       	or	r24, r25
    c52c:	71 f4       	brne	.+28     	; 0xc54a <f_readdir+0x74>
    c52e:	b5 01       	movw	r22, r10
    c530:	c7 01       	movw	r24, r14
    c532:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <get_fileinfo>
    c536:	60 e0       	ldi	r22, 0x00	; 0
    c538:	70 e0       	ldi	r23, 0x00	; 0
    c53a:	c7 01       	movw	r24, r14
    c53c:	0e 94 2a 51 	call	0xa254	; 0xa254 <dir_next>
    c540:	8c 01       	movw	r16, r24
    c542:	04 97       	sbiw	r24, 0x04	; 4
    c544:	11 f4       	brne	.+4      	; 0xc54a <f_readdir+0x74>
    c546:	00 e0       	ldi	r16, 0x00	; 0
    c548:	10 e0       	ldi	r17, 0x00	; 0
    c54a:	c6 01       	movw	r24, r12
    c54c:	17 d5       	rcall	.+2606   	; 0xcf7c <ff_memfree>
    c54e:	c8 01       	movw	r24, r16
    c550:	02 c0       	rjmp	.+4      	; 0xc556 <f_readdir+0x80>
    c552:	81 e1       	ldi	r24, 0x11	; 17
    c554:	90 e0       	ldi	r25, 0x00	; 0
    c556:	22 96       	adiw	r28, 0x02	; 2
    c558:	ea e0       	ldi	r30, 0x0A	; 10
    c55a:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

0000c55e <f_stat>:
    c55e:	a0 e3       	ldi	r26, 0x30	; 48
    c560:	b0 e0       	ldi	r27, 0x00	; 0
    c562:	e5 eb       	ldi	r30, 0xB5	; 181
    c564:	f2 e6       	ldi	r31, 0x62	; 98
    c566:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    c56a:	98 ab       	std	Y+48, r25	; 0x30
    c56c:	8f a7       	std	Y+47, r24	; 0x2f
    c56e:	6b 01       	movw	r12, r22
    c570:	40 e0       	ldi	r20, 0x00	; 0
    c572:	be 01       	movw	r22, r28
    c574:	6f 5f       	subi	r22, 0xFF	; 255
    c576:	7f 4f       	sbci	r23, 0xFF	; 255
    c578:	ce 01       	movw	r24, r28
    c57a:	8f 96       	adiw	r24, 0x2f	; 47
    c57c:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    c580:	00 97       	sbiw	r24, 0x00	; 0
    c582:	39 f5       	brne	.+78     	; 0xc5d2 <f_stat+0x74>
    c584:	80 e0       	ldi	r24, 0x00	; 0
    c586:	92 e0       	ldi	r25, 0x02	; 2
    c588:	f6 d4       	rcall	.+2540   	; 0xcf76 <ff_memalloc>
    c58a:	7c 01       	movw	r14, r24
    c58c:	00 97       	sbiw	r24, 0x00	; 0
    c58e:	f9 f0       	breq	.+62     	; 0xc5ce <f_stat+0x70>
    c590:	e9 81       	ldd	r30, Y+1	; 0x01
    c592:	fa 81       	ldd	r31, Y+2	; 0x02
    c594:	94 87       	std	Z+12, r25	; 0x0c
    c596:	83 87       	std	Z+11, r24	; 0x0b
    c598:	6f a5       	ldd	r22, Y+47	; 0x2f
    c59a:	78 a9       	ldd	r23, Y+48	; 0x30
    c59c:	ce 01       	movw	r24, r28
    c59e:	01 96       	adiw	r24, 0x01	; 1
    c5a0:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    c5a4:	8c 01       	movw	r16, r24
    c5a6:	89 2b       	or	r24, r25
    c5a8:	71 f4       	brne	.+28     	; 0xc5c6 <f_stat+0x68>
    c5aa:	88 a5       	ldd	r24, Y+40	; 0x28
    c5ac:	87 fd       	sbrc	r24, 7
    c5ae:	09 c0       	rjmp	.+18     	; 0xc5c2 <f_stat+0x64>
    c5b0:	c1 14       	cp	r12, r1
    c5b2:	d1 04       	cpc	r13, r1
    c5b4:	41 f0       	breq	.+16     	; 0xc5c6 <f_stat+0x68>
    c5b6:	b6 01       	movw	r22, r12
    c5b8:	ce 01       	movw	r24, r28
    c5ba:	01 96       	adiw	r24, 0x01	; 1
    c5bc:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <get_fileinfo>
    c5c0:	02 c0       	rjmp	.+4      	; 0xc5c6 <f_stat+0x68>
    c5c2:	06 e0       	ldi	r16, 0x06	; 6
    c5c4:	10 e0       	ldi	r17, 0x00	; 0
    c5c6:	c7 01       	movw	r24, r14
    c5c8:	d9 d4       	rcall	.+2482   	; 0xcf7c <ff_memfree>
    c5ca:	c8 01       	movw	r24, r16
    c5cc:	02 c0       	rjmp	.+4      	; 0xc5d2 <f_stat+0x74>
    c5ce:	81 e1       	ldi	r24, 0x11	; 17
    c5d0:	90 e0       	ldi	r25, 0x00	; 0
    c5d2:	e0 96       	adiw	r28, 0x30	; 48
    c5d4:	e8 e0       	ldi	r30, 0x08	; 8
    c5d6:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000c5da <f_getfree>:
    c5da:	aa e0       	ldi	r26, 0x0A	; 10
    c5dc:	b0 e0       	ldi	r27, 0x00	; 0
    c5de:	e3 ef       	ldi	r30, 0xF3	; 243
    c5e0:	f2 e6       	ldi	r31, 0x62	; 98
    c5e2:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
    c5e6:	9c 83       	std	Y+4, r25	; 0x04
    c5e8:	8b 83       	std	Y+3, r24	; 0x03
    c5ea:	7e 83       	std	Y+6, r23	; 0x06
    c5ec:	6d 83       	std	Y+5, r22	; 0x05
    c5ee:	7a 01       	movw	r14, r20
    c5f0:	40 e0       	ldi	r20, 0x00	; 0
    c5f2:	be 01       	movw	r22, r28
    c5f4:	6f 5f       	subi	r22, 0xFF	; 255
    c5f6:	7f 4f       	sbci	r23, 0xFF	; 255
    c5f8:	ce 01       	movw	r24, r28
    c5fa:	03 96       	adiw	r24, 0x03	; 3
    c5fc:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    c600:	8c 01       	movw	r16, r24
    c602:	89 2b       	or	r24, r25
    c604:	09 f0       	breq	.+2      	; 0xc608 <f_getfree+0x2e>
    c606:	c4 c0       	rjmp	.+392    	; 0xc790 <f_getfree+0x1b6>
    c608:	69 80       	ldd	r6, Y+1	; 0x01
    c60a:	7a 80       	ldd	r7, Y+2	; 0x02
    c60c:	d7 01       	movw	r26, r14
    c60e:	6d 92       	st	X+, r6
    c610:	7c 92       	st	X, r7
    c612:	f3 01       	movw	r30, r6
    c614:	81 89       	ldd	r24, Z+17	; 0x11
    c616:	92 89       	ldd	r25, Z+18	; 0x12
    c618:	a3 89       	ldd	r26, Z+19	; 0x13
    c61a:	b4 89       	ldd	r27, Z+20	; 0x14
    c61c:	81 8c       	ldd	r8, Z+25	; 0x19
    c61e:	92 8c       	ldd	r9, Z+26	; 0x1a
    c620:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c622:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c624:	b5 01       	movw	r22, r10
    c626:	a4 01       	movw	r20, r8
    c628:	42 50       	subi	r20, 0x02	; 2
    c62a:	51 09       	sbc	r21, r1
    c62c:	61 09       	sbc	r22, r1
    c62e:	71 09       	sbc	r23, r1
    c630:	48 17       	cp	r20, r24
    c632:	59 07       	cpc	r21, r25
    c634:	6a 07       	cpc	r22, r26
    c636:	7b 07       	cpc	r23, r27
    c638:	38 f0       	brcs	.+14     	; 0xc648 <f_getfree+0x6e>
    c63a:	ed 81       	ldd	r30, Y+5	; 0x05
    c63c:	fe 81       	ldd	r31, Y+6	; 0x06
    c63e:	80 83       	st	Z, r24
    c640:	91 83       	std	Z+1, r25	; 0x01
    c642:	a2 83       	std	Z+2, r26	; 0x02
    c644:	b3 83       	std	Z+3, r27	; 0x03
    c646:	a4 c0       	rjmp	.+328    	; 0xc790 <f_getfree+0x1b6>
    c648:	80 81       	ld	r24, Z
    c64a:	81 30       	cpi	r24, 0x01	; 1
    c64c:	a1 f5       	brne	.+104    	; 0xc6b6 <f_getfree+0xdc>
    c64e:	82 e0       	ldi	r24, 0x02	; 2
    c650:	88 2e       	mov	r8, r24
    c652:	91 2c       	mov	r9, r1
    c654:	a1 2c       	mov	r10, r1
    c656:	b1 2c       	mov	r11, r1
    c658:	c1 2c       	mov	r12, r1
    c65a:	d1 2c       	mov	r13, r1
    c65c:	76 01       	movw	r14, r12
    c65e:	b5 01       	movw	r22, r10
    c660:	a4 01       	movw	r20, r8
    c662:	c3 01       	movw	r24, r6
    c664:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <get_fat.isra.10>
    c668:	6f 3f       	cpi	r22, 0xFF	; 255
    c66a:	bf ef       	ldi	r27, 0xFF	; 255
    c66c:	7b 07       	cpc	r23, r27
    c66e:	8b 07       	cpc	r24, r27
    c670:	9b 07       	cpc	r25, r27
    c672:	09 f4       	brne	.+2      	; 0xc676 <f_getfree+0x9c>
    c674:	76 c0       	rjmp	.+236    	; 0xc762 <f_getfree+0x188>
    c676:	61 30       	cpi	r22, 0x01	; 1
    c678:	71 05       	cpc	r23, r1
    c67a:	81 05       	cpc	r24, r1
    c67c:	91 05       	cpc	r25, r1
    c67e:	09 f4       	brne	.+2      	; 0xc682 <f_getfree+0xa8>
    c680:	73 c0       	rjmp	.+230    	; 0xc768 <f_getfree+0x18e>
    c682:	67 2b       	or	r22, r23
    c684:	68 2b       	or	r22, r24
    c686:	69 2b       	or	r22, r25
    c688:	29 f4       	brne	.+10     	; 0xc694 <f_getfree+0xba>
    c68a:	ef ef       	ldi	r30, 0xFF	; 255
    c68c:	ce 1a       	sub	r12, r30
    c68e:	de 0a       	sbc	r13, r30
    c690:	ee 0a       	sbc	r14, r30
    c692:	fe 0a       	sbc	r15, r30
    c694:	ff ef       	ldi	r31, 0xFF	; 255
    c696:	8f 1a       	sub	r8, r31
    c698:	9f 0a       	sbc	r9, r31
    c69a:	af 0a       	sbc	r10, r31
    c69c:	bf 0a       	sbc	r11, r31
    c69e:	e9 81       	ldd	r30, Y+1	; 0x01
    c6a0:	fa 81       	ldd	r31, Y+2	; 0x02
    c6a2:	81 8d       	ldd	r24, Z+25	; 0x19
    c6a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    c6a6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c6a8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c6aa:	88 16       	cp	r8, r24
    c6ac:	99 06       	cpc	r9, r25
    c6ae:	aa 06       	cpc	r10, r26
    c6b0:	bb 06       	cpc	r11, r27
    c6b2:	a8 f2       	brcs	.-86     	; 0xc65e <f_getfree+0x84>
    c6b4:	5d c0       	rjmp	.+186    	; 0xc770 <f_getfree+0x196>
    c6b6:	f3 01       	movw	r30, r6
    c6b8:	45 a0       	ldd	r4, Z+37	; 0x25
    c6ba:	56 a0       	ldd	r5, Z+38	; 0x26
    c6bc:	67 a0       	ldd	r6, Z+39	; 0x27
    c6be:	70 a4       	ldd	r7, Z+40	; 0x28
    c6c0:	21 2c       	mov	r2, r1
    c6c2:	31 2c       	mov	r3, r1
    c6c4:	c1 2c       	mov	r12, r1
    c6c6:	d1 2c       	mov	r13, r1
    c6c8:	76 01       	movw	r14, r12
    c6ca:	21 14       	cp	r2, r1
    c6cc:	31 04       	cpc	r3, r1
    c6ce:	b1 f4       	brne	.+44     	; 0xc6fc <f_getfree+0x122>
    c6d0:	d3 01       	movw	r26, r6
    c6d2:	c2 01       	movw	r24, r4
    c6d4:	01 96       	adiw	r24, 0x01	; 1
    c6d6:	a1 1d       	adc	r26, r1
    c6d8:	b1 1d       	adc	r27, r1
    c6da:	8f 83       	std	Y+7, r24	; 0x07
    c6dc:	98 87       	std	Y+8, r25	; 0x08
    c6de:	a9 87       	std	Y+9, r26	; 0x09
    c6e0:	ba 87       	std	Y+10, r27	; 0x0a
    c6e2:	b3 01       	movw	r22, r6
    c6e4:	a2 01       	movw	r20, r4
    c6e6:	89 81       	ldd	r24, Y+1	; 0x01
    c6e8:	9a 81       	ldd	r25, Y+2	; 0x02
    c6ea:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    c6ee:	00 97       	sbiw	r24, 0x00	; 0
    c6f0:	09 f0       	breq	.+2      	; 0xc6f4 <f_getfree+0x11a>
    c6f2:	3d c0       	rjmp	.+122    	; 0xc76e <f_getfree+0x194>
    c6f4:	4f 80       	ldd	r4, Y+7	; 0x07
    c6f6:	58 84       	ldd	r5, Y+8	; 0x08
    c6f8:	69 84       	ldd	r6, Y+9	; 0x09
    c6fa:	7a 84       	ldd	r7, Y+10	; 0x0a
    c6fc:	e9 81       	ldd	r30, Y+1	; 0x01
    c6fe:	fa 81       	ldd	r31, Y+2	; 0x02
    c700:	80 81       	ld	r24, Z
    c702:	82 30       	cpi	r24, 0x02	; 2
    c704:	79 f4       	brne	.+30     	; 0xc724 <f_getfree+0x14a>
    c706:	e2 0d       	add	r30, r2
    c708:	f3 1d       	adc	r31, r3
    c70a:	85 a9       	ldd	r24, Z+53	; 0x35
    c70c:	96 a9       	ldd	r25, Z+54	; 0x36
    c70e:	89 2b       	or	r24, r25
    c710:	29 f4       	brne	.+10     	; 0xc71c <f_getfree+0x142>
    c712:	9f ef       	ldi	r25, 0xFF	; 255
    c714:	c9 1a       	sub	r12, r25
    c716:	d9 0a       	sbc	r13, r25
    c718:	e9 0a       	sbc	r14, r25
    c71a:	f9 0a       	sbc	r15, r25
    c71c:	a2 e0       	ldi	r26, 0x02	; 2
    c71e:	2a 0e       	add	r2, r26
    c720:	31 1c       	adc	r3, r1
    c722:	15 c0       	rjmp	.+42     	; 0xc74e <f_getfree+0x174>
    c724:	cf 01       	movw	r24, r30
    c726:	c5 96       	adiw	r24, 0x35	; 53
    c728:	82 0d       	add	r24, r2
    c72a:	93 1d       	adc	r25, r3
    c72c:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <ld_dword>
    c730:	dc 01       	movw	r26, r24
    c732:	cb 01       	movw	r24, r22
    c734:	bf 70       	andi	r27, 0x0F	; 15
    c736:	89 2b       	or	r24, r25
    c738:	8a 2b       	or	r24, r26
    c73a:	8b 2b       	or	r24, r27
    c73c:	29 f4       	brne	.+10     	; 0xc748 <f_getfree+0x16e>
    c73e:	bf ef       	ldi	r27, 0xFF	; 255
    c740:	cb 1a       	sub	r12, r27
    c742:	db 0a       	sbc	r13, r27
    c744:	eb 0a       	sbc	r14, r27
    c746:	fb 0a       	sbc	r15, r27
    c748:	e4 e0       	ldi	r30, 0x04	; 4
    c74a:	2e 0e       	add	r2, r30
    c74c:	31 1c       	adc	r3, r1
    c74e:	f1 e0       	ldi	r31, 0x01	; 1
    c750:	3f 22       	and	r3, r31
    c752:	21 e0       	ldi	r18, 0x01	; 1
    c754:	82 1a       	sub	r8, r18
    c756:	91 08       	sbc	r9, r1
    c758:	a1 08       	sbc	r10, r1
    c75a:	b1 08       	sbc	r11, r1
    c75c:	09 f0       	breq	.+2      	; 0xc760 <f_getfree+0x186>
    c75e:	b5 cf       	rjmp	.-150    	; 0xc6ca <f_getfree+0xf0>
    c760:	07 c0       	rjmp	.+14     	; 0xc770 <f_getfree+0x196>
    c762:	01 e0       	ldi	r16, 0x01	; 1
    c764:	10 e0       	ldi	r17, 0x00	; 0
    c766:	04 c0       	rjmp	.+8      	; 0xc770 <f_getfree+0x196>
    c768:	02 e0       	ldi	r16, 0x02	; 2
    c76a:	10 e0       	ldi	r17, 0x00	; 0
    c76c:	01 c0       	rjmp	.+2      	; 0xc770 <f_getfree+0x196>
    c76e:	8c 01       	movw	r16, r24
    c770:	ad 81       	ldd	r26, Y+5	; 0x05
    c772:	be 81       	ldd	r27, Y+6	; 0x06
    c774:	cd 92       	st	X+, r12
    c776:	dd 92       	st	X+, r13
    c778:	ed 92       	st	X+, r14
    c77a:	fc 92       	st	X, r15
    c77c:	13 97       	sbiw	r26, 0x03	; 3
    c77e:	e9 81       	ldd	r30, Y+1	; 0x01
    c780:	fa 81       	ldd	r31, Y+2	; 0x02
    c782:	c1 8a       	std	Z+17, r12	; 0x11
    c784:	d2 8a       	std	Z+18, r13	; 0x12
    c786:	e3 8a       	std	Z+19, r14	; 0x13
    c788:	f4 8a       	std	Z+20, r15	; 0x14
    c78a:	84 81       	ldd	r24, Z+4	; 0x04
    c78c:	81 60       	ori	r24, 0x01	; 1
    c78e:	84 83       	std	Z+4, r24	; 0x04
    c790:	c8 01       	movw	r24, r16
    c792:	2a 96       	adiw	r28, 0x0a	; 10
    c794:	e2 e1       	ldi	r30, 0x12	; 18
    c796:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0000c79a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c79a:	a0 e6       	ldi	r26, 0x60	; 96
    c79c:	b0 e0       	ldi	r27, 0x00	; 0
    c79e:	e3 ed       	ldi	r30, 0xD3	; 211
    c7a0:	f3 e6       	ldi	r31, 0x63	; 99
    c7a2:	0c 94 5f e2 	jmp	0x1c4be	; 0x1c4be <__prologue_saves__+0xe>
    c7a6:	a1 96       	adiw	r28, 0x21	; 33
    c7a8:	9f af       	std	Y+63, r25	; 0x3f
    c7aa:	8e af       	std	Y+62, r24	; 0x3e
    c7ac:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c7ae:	42 e0       	ldi	r20, 0x02	; 2
    c7b0:	be 01       	movw	r22, r28
    c7b2:	63 5a       	subi	r22, 0xA3	; 163
    c7b4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7b6:	ce 01       	movw	r24, r28
    c7b8:	81 5a       	subi	r24, 0xA1	; 161
    c7ba:	9f 4f       	sbci	r25, 0xFF	; 255
    c7bc:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
	if (res == FR_OK) {
    c7c0:	00 97       	sbiw	r24, 0x00	; 0
    c7c2:	09 f0       	breq	.+2      	; 0xc7c6 <f_unlink+0x2c>
    c7c4:	8c c0       	rjmp	.+280    	; 0xc8de <f_unlink+0x144>
		dj.obj.fs = fs;
    c7c6:	6f 96       	adiw	r28, 0x1f	; 31
    c7c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    c7ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    c7cc:	6f 97       	sbiw	r28, 0x1f	; 31
    c7ce:	98 ab       	std	Y+48, r25	; 0x30
    c7d0:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c7d2:	80 e0       	ldi	r24, 0x00	; 0
    c7d4:	92 e0       	ldi	r25, 0x02	; 2
    c7d6:	cf d3       	rcall	.+1950   	; 0xcf76 <ff_memalloc>
    c7d8:	5c 01       	movw	r10, r24
    c7da:	00 97       	sbiw	r24, 0x00	; 0
    c7dc:	09 f4       	brne	.+2      	; 0xc7e0 <f_unlink+0x46>
    c7de:	49 c0       	rjmp	.+146    	; 0xc872 <f_unlink+0xd8>
    c7e0:	6f 96       	adiw	r28, 0x1f	; 31
    c7e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    c7e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    c7e6:	6f 97       	sbiw	r28, 0x1f	; 31
    c7e8:	94 87       	std	Z+12, r25	; 0x0c
    c7ea:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c7ec:	a1 96       	adiw	r28, 0x21	; 33
    c7ee:	6e ad       	ldd	r22, Y+62	; 0x3e
    c7f0:	7f ad       	ldd	r23, Y+63	; 0x3f
    c7f2:	a1 97       	sbiw	r28, 0x21	; 33
    c7f4:	ce 01       	movw	r24, r28
    c7f6:	8f 96       	adiw	r24, 0x2f	; 47
    c7f8:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    c7fc:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c7fe:	89 2b       	or	r24, r25
    c800:	a1 f5       	brne	.+104    	; 0xc86a <f_unlink+0xd0>
    c802:	67 96       	adiw	r28, 0x17	; 23
    c804:	8f ad       	ldd	r24, Y+63	; 0x3f
    c806:	67 97       	sbiw	r28, 0x17	; 23
    c808:	85 fd       	sbrc	r24, 5
    c80a:	36 c0       	rjmp	.+108    	; 0xc878 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c80c:	87 fd       	sbrc	r24, 7
    c80e:	34 c0       	rjmp	.+104    	; 0xc878 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c810:	9b a8       	ldd	r9, Y+51	; 0x33
    c812:	90 fc       	sbrc	r9, 0
    c814:	40 c0       	rjmp	.+128    	; 0xc896 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c816:	6f 96       	adiw	r28, 0x1f	; 31
    c818:	0e ad       	ldd	r16, Y+62	; 0x3e
    c81a:	1f ad       	ldd	r17, Y+63	; 0x3f
    c81c:	6f 97       	sbiw	r28, 0x1f	; 31
    c81e:	2b 96       	adiw	r28, 0x0b	; 11
    c820:	6e ad       	ldd	r22, Y+62	; 0x3e
    c822:	7f ad       	ldd	r23, Y+63	; 0x3f
    c824:	2b 97       	sbiw	r28, 0x0b	; 11
    c826:	f8 01       	movw	r30, r16
    c828:	80 81       	ld	r24, Z
    c82a:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    c82e:	6b 01       	movw	r12, r22
    c830:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c832:	94 fe       	sbrs	r9, 4
    c834:	33 c0       	rjmp	.+102    	; 0xc89c <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c836:	f8 01       	movw	r30, r16
    c838:	85 89       	ldd	r24, Z+21	; 0x15
    c83a:	96 89       	ldd	r25, Z+22	; 0x16
    c83c:	a7 89       	ldd	r26, Z+23	; 0x17
    c83e:	b0 8d       	ldd	r27, Z+24	; 0x18
    c840:	c8 16       	cp	r12, r24
    c842:	d9 06       	cpc	r13, r25
    c844:	ea 06       	cpc	r14, r26
    c846:	fb 06       	cpc	r15, r27
    c848:	31 f1       	breq	.+76     	; 0xc896 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c84a:	1a 83       	std	Y+2, r17	; 0x02
    c84c:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c84e:	cf 82       	std	Y+7, r12	; 0x07
    c850:	d8 86       	std	Y+8, r13	; 0x08
    c852:	e9 86       	std	Y+9, r14	; 0x09
    c854:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c856:	40 e0       	ldi	r20, 0x00	; 0
    c858:	50 e0       	ldi	r21, 0x00	; 0
    c85a:	ba 01       	movw	r22, r20
    c85c:	ce 01       	movw	r24, r28
    c85e:	01 96       	adiw	r24, 0x01	; 1
    c860:	0e 94 b2 4e 	call	0x9d64	; 0x9d64 <dir_sdi>
    c864:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c866:	89 2b       	or	r24, r25
    c868:	51 f0       	breq	.+20     	; 0xc87e <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c86a:	c5 01       	movw	r24, r10
    c86c:	87 d3       	rcall	.+1806   	; 0xcf7c <ff_memfree>
    c86e:	c8 01       	movw	r24, r16
    c870:	36 c0       	rjmp	.+108    	; 0xc8de <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c872:	81 e1       	ldi	r24, 0x11	; 17
    c874:	90 e0       	ldi	r25, 0x00	; 0
    c876:	33 c0       	rjmp	.+102    	; 0xc8de <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c878:	06 e0       	ldi	r16, 0x06	; 6
    c87a:	10 e0       	ldi	r17, 0x00	; 0
    c87c:	f6 cf       	rjmp	.-20     	; 0xc86a <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c87e:	60 e0       	ldi	r22, 0x00	; 0
    c880:	70 e0       	ldi	r23, 0x00	; 0
    c882:	ce 01       	movw	r24, r28
    c884:	01 96       	adiw	r24, 0x01	; 1
    c886:	0e 94 4b 52 	call	0xa496	; 0xa496 <dir_read>
    c88a:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c88c:	00 97       	sbiw	r24, 0x00	; 0
    c88e:	19 f0       	breq	.+6      	; 0xc896 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c890:	04 97       	sbiw	r24, 0x04	; 4
    c892:	21 f0       	breq	.+8      	; 0xc89c <f_unlink+0x102>
    c894:	ea cf       	rjmp	.-44     	; 0xc86a <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c896:	07 e0       	ldi	r16, 0x07	; 7
    c898:	10 e0       	ldi	r17, 0x00	; 0
    c89a:	e7 cf       	rjmp	.-50     	; 0xc86a <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c89c:	ce 01       	movw	r24, r28
    c89e:	8f 96       	adiw	r24, 0x2f	; 47
    c8a0:	0e 94 14 53 	call	0xa628	; 0xa628 <dir_remove>
    c8a4:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c8a6:	89 2b       	or	r24, r25
    c8a8:	01 f7       	brne	.-64     	; 0xc86a <f_unlink+0xd0>
    c8aa:	c1 14       	cp	r12, r1
    c8ac:	d1 04       	cpc	r13, r1
    c8ae:	e1 04       	cpc	r14, r1
    c8b0:	f1 04       	cpc	r15, r1
    c8b2:	41 f4       	brne	.+16     	; 0xc8c4 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c8b4:	6f 96       	adiw	r28, 0x1f	; 31
    c8b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    c8b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    c8ba:	6f 97       	sbiw	r28, 0x1f	; 31
    c8bc:	0e 94 14 49 	call	0x9228	; 0x9228 <sync_fs>
    c8c0:	8c 01       	movw	r16, r24
    c8c2:	d3 cf       	rjmp	.-90     	; 0xc86a <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c8c4:	00 e0       	ldi	r16, 0x00	; 0
    c8c6:	10 e0       	ldi	r17, 0x00	; 0
    c8c8:	98 01       	movw	r18, r16
    c8ca:	b7 01       	movw	r22, r14
    c8cc:	a6 01       	movw	r20, r12
    c8ce:	ce 01       	movw	r24, r28
    c8d0:	8f 96       	adiw	r24, 0x2f	; 47
    c8d2:	0e 94 99 50 	call	0xa132	; 0xa132 <remove_chain>
    c8d6:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c8d8:	89 2b       	or	r24, r25
    c8da:	39 f6       	brne	.-114    	; 0xc86a <f_unlink+0xd0>
    c8dc:	eb cf       	rjmp	.-42     	; 0xc8b4 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c8de:	c0 5a       	subi	r28, 0xA0	; 160
    c8e0:	df 4f       	sbci	r29, 0xFF	; 255
    c8e2:	eb e0       	ldi	r30, 0x0B	; 11
    c8e4:	0c 94 7b e2 	jmp	0x1c4f6	; 0x1c4f6 <__epilogue_restores__+0xe>

0000c8e8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c8e8:	a0 e4       	ldi	r26, 0x40	; 64
    c8ea:	b0 e0       	ldi	r27, 0x00	; 0
    c8ec:	ea e7       	ldi	r30, 0x7A	; 122
    c8ee:	f4 e6       	ldi	r31, 0x64	; 100
    c8f0:	0c 94 5a e2 	jmp	0x1c4b4	; 0x1c4b4 <__prologue_saves__+0x4>
    c8f4:	21 96       	adiw	r28, 0x01	; 1
    c8f6:	9f af       	std	Y+63, r25	; 0x3f
    c8f8:	8e af       	std	Y+62, r24	; 0x3e
    c8fa:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c8fc:	42 e0       	ldi	r20, 0x02	; 2
    c8fe:	be 01       	movw	r22, r28
    c900:	63 5c       	subi	r22, 0xC3	; 195
    c902:	7f 4f       	sbci	r23, 0xFF	; 255
    c904:	ce 01       	movw	r24, r28
    c906:	cf 96       	adiw	r24, 0x3f	; 63
    c908:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
	if (res == FR_OK) {
    c90c:	00 97       	sbiw	r24, 0x00	; 0
    c90e:	09 f0       	breq	.+2      	; 0xc912 <f_mkdir+0x2a>
    c910:	d6 c0       	rjmp	.+428    	; 0xcabe <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c912:	8d ad       	ldd	r24, Y+61	; 0x3d
    c914:	9e ad       	ldd	r25, Y+62	; 0x3e
    c916:	9a 83       	std	Y+2, r25	; 0x02
    c918:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c91a:	80 e0       	ldi	r24, 0x00	; 0
    c91c:	92 e0       	ldi	r25, 0x02	; 2
    c91e:	2b d3       	rcall	.+1622   	; 0xcf76 <ff_memalloc>
    c920:	6c 01       	movw	r12, r24
    c922:	00 97       	sbiw	r24, 0x00	; 0
    c924:	e9 f0       	breq	.+58     	; 0xc960 <f_mkdir+0x78>
    c926:	ed ad       	ldd	r30, Y+61	; 0x3d
    c928:	fe ad       	ldd	r31, Y+62	; 0x3e
    c92a:	94 87       	std	Z+12, r25	; 0x0c
    c92c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c92e:	21 96       	adiw	r28, 0x01	; 1
    c930:	6e ad       	ldd	r22, Y+62	; 0x3e
    c932:	7f ad       	ldd	r23, Y+63	; 0x3f
    c934:	21 97       	sbiw	r28, 0x01	; 1
    c936:	ce 01       	movw	r24, r28
    c938:	01 96       	adiw	r24, 0x01	; 1
    c93a:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    c93e:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c940:	89 2b       	or	r24, r25
    c942:	89 f0       	breq	.+34     	; 0xc966 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c944:	84 e0       	ldi	r24, 0x04	; 4
    c946:	e8 16       	cp	r14, r24
    c948:	f1 04       	cpc	r15, r1
    c94a:	31 f4       	brne	.+12     	; 0xc958 <f_mkdir+0x70>
    c94c:	88 a5       	ldd	r24, Y+40	; 0x28
    c94e:	85 ff       	sbrs	r24, 5
    c950:	0e c0       	rjmp	.+28     	; 0xc96e <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c952:	26 e0       	ldi	r18, 0x06	; 6
    c954:	e2 2e       	mov	r14, r18
    c956:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    c958:	c6 01       	movw	r24, r12
    c95a:	10 d3       	rcall	.+1568   	; 0xcf7c <ff_memfree>
    c95c:	c7 01       	movw	r24, r14
    c95e:	af c0       	rjmp	.+350    	; 0xcabe <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c960:	81 e1       	ldi	r24, 0x11	; 17
    c962:	90 e0       	ldi	r25, 0x00	; 0
    c964:	ac c0       	rjmp	.+344    	; 0xcabe <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c966:	38 e0       	ldi	r19, 0x08	; 8
    c968:	e3 2e       	mov	r14, r19
    c96a:	f1 2c       	mov	r15, r1
    c96c:	f5 cf       	rjmp	.-22     	; 0xc958 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    c96e:	8d ad       	ldd	r24, Y+61	; 0x3d
    c970:	9e ad       	ldd	r25, Y+62	; 0x3e
    c972:	98 ab       	std	Y+48, r25	; 0x30
    c974:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    c976:	40 e0       	ldi	r20, 0x00	; 0
    c978:	50 e0       	ldi	r21, 0x00	; 0
    c97a:	ba 01       	movw	r22, r20
    c97c:	ce 01       	movw	r24, r28
    c97e:	8f 96       	adiw	r24, 0x2f	; 47
    c980:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <create_chain>
    c984:	4b 01       	movw	r8, r22
    c986:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c988:	67 2b       	or	r22, r23
    c98a:	68 2b       	or	r22, r24
    c98c:	69 2b       	or	r22, r25
    c98e:	09 f1       	breq	.+66     	; 0xc9d2 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c990:	e1 e0       	ldi	r30, 0x01	; 1
    c992:	8e 16       	cp	r8, r30
    c994:	91 04       	cpc	r9, r1
    c996:	a1 04       	cpc	r10, r1
    c998:	b1 04       	cpc	r11, r1
    c99a:	61 f0       	breq	.+24     	; 0xc9b4 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    c99c:	ff ef       	ldi	r31, 0xFF	; 255
    c99e:	8f 16       	cp	r8, r31
    c9a0:	9f 06       	cpc	r9, r31
    c9a2:	af 06       	cpc	r10, r31
    c9a4:	bf 06       	cpc	r11, r31
    c9a6:	d9 f4       	brne	.+54     	; 0xc9de <f_mkdir+0xf6>
			tm = GET_FATTIME();
    c9a8:	0e 94 2c 6f 	call	0xde58	; 0xde58 <get_fattime>
    c9ac:	ee 24       	eor	r14, r14
    c9ae:	e3 94       	inc	r14
    c9b0:	f1 2c       	mov	r15, r1
    c9b2:	05 c0       	rjmp	.+10     	; 0xc9be <f_mkdir+0xd6>
    c9b4:	0e 94 2c 6f 	call	0xde58	; 0xde58 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c9b8:	92 e0       	ldi	r25, 0x02	; 2
    c9ba:	e9 2e       	mov	r14, r25
    c9bc:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    c9be:	00 e0       	ldi	r16, 0x00	; 0
    c9c0:	10 e0       	ldi	r17, 0x00	; 0
    c9c2:	98 01       	movw	r18, r16
    c9c4:	b5 01       	movw	r22, r10
    c9c6:	a4 01       	movw	r20, r8
    c9c8:	ce 01       	movw	r24, r28
    c9ca:	8f 96       	adiw	r24, 0x2f	; 47
    c9cc:	0e 94 99 50 	call	0xa132	; 0xa132 <remove_chain>
    c9d0:	c3 cf       	rjmp	.-122    	; 0xc958 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c9d2:	0e 94 2c 6f 	call	0xde58	; 0xde58 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c9d6:	87 e0       	ldi	r24, 0x07	; 7
    c9d8:	e8 2e       	mov	r14, r24
    c9da:	f1 2c       	mov	r15, r1
    c9dc:	f0 cf       	rjmp	.-32     	; 0xc9be <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c9de:	0e 94 2c 6f 	call	0xde58	; 0xde58 <get_fattime>
    c9e2:	2b 01       	movw	r4, r22
    c9e4:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    c9e6:	b5 01       	movw	r22, r10
    c9e8:	a4 01       	movw	r20, r8
    c9ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9ee:	0e 94 86 49 	call	0x930c	; 0x930c <dir_clear>
    c9f2:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    c9f4:	89 2b       	or	r24, r25
    c9f6:	19 f7       	brne	.-58     	; 0xc9be <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    c9f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9fc:	4b e0       	ldi	r20, 0x0B	; 11
    c9fe:	50 e0       	ldi	r21, 0x00	; 0
    ca00:	60 e2       	ldi	r22, 0x20	; 32
    ca02:	70 e0       	ldi	r23, 0x00	; 0
    ca04:	c5 96       	adiw	r24, 0x35	; 53
    ca06:	0e 94 6e 45 	call	0x8adc	; 0x8adc <mem_set>
						fs->win[DIR_Name] = '.';
    ca0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca0e:	1e e2       	ldi	r17, 0x2E	; 46
    ca10:	fc 01       	movw	r30, r24
    ca12:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    ca14:	e0 5c       	subi	r30, 0xC0	; 192
    ca16:	ff 4f       	sbci	r31, 0xFF	; 255
    ca18:	20 e1       	ldi	r18, 0x10	; 16
    ca1a:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    ca1c:	b3 01       	movw	r22, r6
    ca1e:	a2 01       	movw	r20, r4
    ca20:	85 5b       	subi	r24, 0xB5	; 181
    ca22:	9f 4f       	sbci	r25, 0xFF	; 255
    ca24:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <st_dword>
						st_clust(fs, fs->win, dcl);
    ca28:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca2c:	bc 01       	movw	r22, r24
    ca2e:	6b 5c       	subi	r22, 0xCB	; 203
    ca30:	7f 4f       	sbci	r23, 0xFF	; 255
    ca32:	a5 01       	movw	r20, r10
    ca34:	94 01       	movw	r18, r8
    ca36:	0e 94 b4 48 	call	0x9168	; 0x9168 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    ca3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca3e:	bc 01       	movw	r22, r24
    ca40:	6b 5c       	subi	r22, 0xCB	; 203
    ca42:	7f 4f       	sbci	r23, 0xFF	; 255
    ca44:	40 e2       	ldi	r20, 0x20	; 32
    ca46:	50 e0       	ldi	r21, 0x00	; 0
    ca48:	8b 5a       	subi	r24, 0xAB	; 171
    ca4a:	9f 4f       	sbci	r25, 0xFF	; 255
    ca4c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    ca50:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca52:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca54:	fc 01       	movw	r30, r24
    ca56:	ea 5a       	subi	r30, 0xAA	; 170
    ca58:	ff 4f       	sbci	r31, 0xFF	; 255
    ca5a:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    ca5c:	2f 81       	ldd	r18, Y+7	; 0x07
    ca5e:	38 85       	ldd	r19, Y+8	; 0x08
    ca60:	49 85       	ldd	r20, Y+9	; 0x09
    ca62:	5a 85       	ldd	r21, Y+10	; 0x0a
    ca64:	bc 01       	movw	r22, r24
    ca66:	6b 5a       	subi	r22, 0xAB	; 171
    ca68:	7f 4f       	sbci	r23, 0xFF	; 255
    ca6a:	0e 94 b4 48 	call	0x9168	; 0x9168 <st_clust.isra.5>
						fs->wflag = 1;
    ca6e:	ed ad       	ldd	r30, Y+61	; 0x3d
    ca70:	fe ad       	ldd	r31, Y+62	; 0x3e
    ca72:	81 e0       	ldi	r24, 0x01	; 1
    ca74:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    ca76:	ce 01       	movw	r24, r28
    ca78:	01 96       	adiw	r24, 0x01	; 1
    ca7a:	0e 94 6a 54 	call	0xa8d4	; 0xa8d4 <dir_register>
    ca7e:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    ca80:	89 2b       	or	r24, r25
    ca82:	09 f0       	breq	.+2      	; 0xca86 <f_mkdir+0x19e>
    ca84:	9c cf       	rjmp	.-200    	; 0xc9be <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    ca86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ca88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ca8a:	b3 01       	movw	r22, r6
    ca8c:	a2 01       	movw	r20, r4
    ca8e:	46 96       	adiw	r24, 0x16	; 22
    ca90:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    ca94:	6b 8d       	ldd	r22, Y+27	; 0x1b
    ca96:	7c 8d       	ldd	r23, Y+28	; 0x1c
    ca98:	a5 01       	movw	r20, r10
    ca9a:	94 01       	movw	r18, r8
    ca9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    caa0:	0e 94 b4 48 	call	0x9168	; 0x9168 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    caa4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    caa6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    caa8:	80 e1       	ldi	r24, 0x10	; 16
    caaa:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    caac:	8d ad       	ldd	r24, Y+61	; 0x3d
    caae:	9e ad       	ldd	r25, Y+62	; 0x3e
    cab0:	21 e0       	ldi	r18, 0x01	; 1
    cab2:	fc 01       	movw	r30, r24
    cab4:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cab6:	0e 94 14 49 	call	0x9228	; 0x9228 <sync_fs>
    caba:	7c 01       	movw	r14, r24
    cabc:	4d cf       	rjmp	.-358    	; 0xc958 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cabe:	c0 5c       	subi	r28, 0xC0	; 192
    cac0:	df 4f       	sbci	r29, 0xFF	; 255
    cac2:	e0 e1       	ldi	r30, 0x10	; 16
    cac4:	0c 94 76 e2 	jmp	0x1c4ec	; 0x1c4ec <__epilogue_restores__+0x4>

0000cac8 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cac8:	a2 e8       	ldi	r26, 0x82	; 130
    caca:	b0 e0       	ldi	r27, 0x00	; 0
    cacc:	ea e6       	ldi	r30, 0x6A	; 106
    cace:	f5 e6       	ldi	r31, 0x65	; 101
    cad0:	0c 94 61 e2 	jmp	0x1c4c2	; 0x1c4c2 <__prologue_saves__+0x12>
    cad4:	c1 58       	subi	r28, 0x81	; 129
    cad6:	df 4f       	sbci	r29, 0xFF	; 255
    cad8:	99 83       	std	Y+1, r25	; 0x01
    cada:	88 83       	st	Y, r24
    cadc:	cf 57       	subi	r28, 0x7F	; 127
    cade:	d0 40       	sbci	r29, 0x00	; 0
    cae0:	cf 57       	subi	r28, 0x7F	; 127
    cae2:	df 4f       	sbci	r29, 0xFF	; 255
    cae4:	79 83       	std	Y+1, r23	; 0x01
    cae6:	68 83       	st	Y, r22
    cae8:	c1 58       	subi	r28, 0x81	; 129
    caea:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    caec:	ce 01       	movw	r24, r28
    caee:	8f 57       	subi	r24, 0x7F	; 127
    caf0:	9f 4f       	sbci	r25, 0xFF	; 255
    caf2:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    caf6:	42 e0       	ldi	r20, 0x02	; 2
    caf8:	be 01       	movw	r22, r28
    cafa:	63 58       	subi	r22, 0x83	; 131
    cafc:	7f 4f       	sbci	r23, 0xFF	; 255
    cafe:	ce 01       	movw	r24, r28
    cb00:	81 58       	subi	r24, 0x81	; 129
    cb02:	9f 4f       	sbci	r25, 0xFF	; 255
    cb04:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
	if (res == FR_OK) {
    cb08:	00 97       	sbiw	r24, 0x00	; 0
    cb0a:	09 f0       	breq	.+2      	; 0xcb0e <f_rename+0x46>
    cb0c:	ed c0       	rjmp	.+474    	; 0xcce8 <f_rename+0x220>
		djo.obj.fs = fs;
    cb0e:	ef 96       	adiw	r28, 0x3f	; 63
    cb10:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb12:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb14:	ef 97       	sbiw	r28, 0x3f	; 63
    cb16:	98 ab       	std	Y+48, r25	; 0x30
    cb18:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cb1a:	80 e0       	ldi	r24, 0x00	; 0
    cb1c:	92 e0       	ldi	r25, 0x02	; 2
    cb1e:	2b d2       	rcall	.+1110   	; 0xcf76 <ff_memalloc>
    cb20:	6c 01       	movw	r12, r24
    cb22:	00 97       	sbiw	r24, 0x00	; 0
    cb24:	f1 f0       	breq	.+60     	; 0xcb62 <f_rename+0x9a>
    cb26:	ef 96       	adiw	r28, 0x3f	; 63
    cb28:	ee ad       	ldd	r30, Y+62	; 0x3e
    cb2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    cb2c:	ef 97       	sbiw	r28, 0x3f	; 63
    cb2e:	94 87       	std	Z+12, r25	; 0x0c
    cb30:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cb32:	c1 58       	subi	r28, 0x81	; 129
    cb34:	df 4f       	sbci	r29, 0xFF	; 255
    cb36:	68 81       	ld	r22, Y
    cb38:	79 81       	ldd	r23, Y+1	; 0x01
    cb3a:	cf 57       	subi	r28, 0x7F	; 127
    cb3c:	d0 40       	sbci	r29, 0x00	; 0
    cb3e:	ce 01       	movw	r24, r28
    cb40:	8f 96       	adiw	r24, 0x2f	; 47
    cb42:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    cb46:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cb48:	89 2b       	or	r24, r25
    cb4a:	39 f4       	brne	.+14     	; 0xcb5a <f_rename+0x92>
    cb4c:	67 96       	adiw	r28, 0x17	; 23
    cb4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb50:	67 97       	sbiw	r28, 0x17	; 23
    cb52:	80 7a       	andi	r24, 0xA0	; 160
    cb54:	49 f0       	breq	.+18     	; 0xcb68 <f_rename+0xa0>
    cb56:	06 e0       	ldi	r16, 0x06	; 6
    cb58:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cb5a:	c6 01       	movw	r24, r12
    cb5c:	0f d2       	rcall	.+1054   	; 0xcf7c <ff_memfree>
    cb5e:	c8 01       	movw	r24, r16
    cb60:	c3 c0       	rjmp	.+390    	; 0xcce8 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb62:	81 e1       	ldi	r24, 0x11	; 17
    cb64:	90 e0       	ldi	r25, 0x00	; 0
    cb66:	c0 c0       	rjmp	.+384    	; 0xcce8 <f_rename+0x220>
    cb68:	2b 96       	adiw	r28, 0x0b	; 11
    cb6a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb6c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb6e:	2b 97       	sbiw	r28, 0x0b	; 11
    cb70:	40 e2       	ldi	r20, 0x20	; 32
    cb72:	50 e0       	ldi	r21, 0x00	; 0
    cb74:	ce 01       	movw	r24, r28
    cb76:	83 5a       	subi	r24, 0xA3	; 163
    cb78:	9f 4f       	sbci	r25, 0xFF	; 255
    cb7a:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
    cb7e:	4e e2       	ldi	r20, 0x2E	; 46
    cb80:	50 e0       	ldi	r21, 0x00	; 0
    cb82:	be 01       	movw	r22, r28
    cb84:	61 5d       	subi	r22, 0xD1	; 209
    cb86:	7f 4f       	sbci	r23, 0xFF	; 255
    cb88:	ce 01       	movw	r24, r28
    cb8a:	01 96       	adiw	r24, 0x01	; 1
    cb8c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cb90:	cf 57       	subi	r28, 0x7F	; 127
    cb92:	df 4f       	sbci	r29, 0xFF	; 255
    cb94:	68 81       	ld	r22, Y
    cb96:	79 81       	ldd	r23, Y+1	; 0x01
    cb98:	c1 58       	subi	r28, 0x81	; 129
    cb9a:	d0 40       	sbci	r29, 0x00	; 0
    cb9c:	ce 01       	movw	r24, r28
    cb9e:	01 96       	adiw	r24, 0x01	; 1
    cba0:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    cba4:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cba6:	89 2b       	or	r24, r25
    cba8:	f9 f4       	brne	.+62     	; 0xcbe8 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cbaa:	4f 81       	ldd	r20, Y+7	; 0x07
    cbac:	58 85       	ldd	r21, Y+8	; 0x08
    cbae:	69 85       	ldd	r22, Y+9	; 0x09
    cbb0:	7a 85       	ldd	r23, Y+10	; 0x0a
    cbb2:	8d a9       	ldd	r24, Y+53	; 0x35
    cbb4:	9e a9       	ldd	r25, Y+54	; 0x36
    cbb6:	af a9       	ldd	r26, Y+55	; 0x37
    cbb8:	b8 ad       	ldd	r27, Y+56	; 0x38
    cbba:	48 17       	cp	r20, r24
    cbbc:	59 07       	cpc	r21, r25
    cbbe:	6a 07       	cpc	r22, r26
    cbc0:	7b 07       	cpc	r23, r27
    cbc2:	09 f0       	breq	.+2      	; 0xcbc6 <f_rename+0xfe>
    cbc4:	8b c0       	rjmp	.+278    	; 0xccdc <f_rename+0x214>
    cbc6:	4f 85       	ldd	r20, Y+15	; 0x0f
    cbc8:	58 89       	ldd	r21, Y+16	; 0x10
    cbca:	69 89       	ldd	r22, Y+17	; 0x11
    cbcc:	7a 89       	ldd	r23, Y+18	; 0x12
    cbce:	21 96       	adiw	r28, 0x01	; 1
    cbd0:	8c ad       	ldd	r24, Y+60	; 0x3c
    cbd2:	9d ad       	ldd	r25, Y+61	; 0x3d
    cbd4:	ae ad       	ldd	r26, Y+62	; 0x3e
    cbd6:	bf ad       	ldd	r27, Y+63	; 0x3f
    cbd8:	21 97       	sbiw	r28, 0x01	; 1
    cbda:	48 17       	cp	r20, r24
    cbdc:	59 07       	cpc	r21, r25
    cbde:	6a 07       	cpc	r22, r26
    cbe0:	7b 07       	cpc	r23, r27
    cbe2:	09 f0       	breq	.+2      	; 0xcbe6 <f_rename+0x11e>
    cbe4:	7b c0       	rjmp	.+246    	; 0xccdc <f_rename+0x214>
    cbe6:	04 c0       	rjmp	.+8      	; 0xcbf0 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cbe8:	04 30       	cpi	r16, 0x04	; 4
    cbea:	11 05       	cpc	r17, r1
    cbec:	09 f0       	breq	.+2      	; 0xcbf0 <f_rename+0x128>
    cbee:	b5 cf       	rjmp	.-150    	; 0xcb5a <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cbf0:	ce 01       	movw	r24, r28
    cbf2:	01 96       	adiw	r24, 0x01	; 1
    cbf4:	0e 94 6a 54 	call	0xa8d4	; 0xa8d4 <dir_register>
    cbf8:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cbfa:	89 2b       	or	r24, r25
    cbfc:	09 f0       	breq	.+2      	; 0xcc00 <f_rename+0x138>
    cbfe:	ad cf       	rjmp	.-166    	; 0xcb5a <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cc00:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cc02:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cc04:	6d e5       	ldi	r22, 0x5D	; 93
    cc06:	70 e0       	ldi	r23, 0x00	; 0
    cc08:	6c 0f       	add	r22, r28
    cc0a:	7d 1f       	adc	r23, r29
    cc0c:	63 5f       	subi	r22, 0xF3	; 243
    cc0e:	7f 4f       	sbci	r23, 0xFF	; 255
    cc10:	43 e1       	ldi	r20, 0x13	; 19
    cc12:	50 e0       	ldi	r21, 0x00	; 0
    cc14:	c8 01       	movw	r24, r16
    cc16:	0d 96       	adiw	r24, 0x0d	; 13
    cc18:	0e 94 d7 46 	call	0x8dae	; 0x8dae <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cc1c:	a9 96       	adiw	r28, 0x29	; 41
    cc1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    cc20:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cc22:	84 ff       	sbrs	r24, 4
    cc24:	80 62       	ori	r24, 0x20	; 32
    cc26:	f8 01       	movw	r30, r16
    cc28:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cc2a:	ef 96       	adiw	r28, 0x3f	; 63
    cc2c:	ee ac       	ldd	r14, Y+62	; 0x3e
    cc2e:	ff ac       	ldd	r15, Y+63	; 0x3f
    cc30:	ef 97       	sbiw	r28, 0x3f	; 63
    cc32:	bb 24       	eor	r11, r11
    cc34:	b3 94       	inc	r11
    cc36:	f7 01       	movw	r30, r14
    cc38:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cc3a:	f8 01       	movw	r30, r16
    cc3c:	83 85       	ldd	r24, Z+11	; 0x0b
    cc3e:	84 ff       	sbrs	r24, 4
    cc40:	3d c0       	rjmp	.+122    	; 0xccbc <f_rename+0x1f4>
    cc42:	4d a9       	ldd	r20, Y+53	; 0x35
    cc44:	5e a9       	ldd	r21, Y+54	; 0x36
    cc46:	6f a9       	ldd	r22, Y+55	; 0x37
    cc48:	78 ad       	ldd	r23, Y+56	; 0x38
    cc4a:	8f 81       	ldd	r24, Y+7	; 0x07
    cc4c:	98 85       	ldd	r25, Y+8	; 0x08
    cc4e:	a9 85       	ldd	r26, Y+9	; 0x09
    cc50:	ba 85       	ldd	r27, Y+10	; 0x0a
    cc52:	48 17       	cp	r20, r24
    cc54:	59 07       	cpc	r21, r25
    cc56:	6a 07       	cpc	r22, r26
    cc58:	7b 07       	cpc	r23, r27
    cc5a:	81 f1       	breq	.+96     	; 0xccbc <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cc5c:	b8 01       	movw	r22, r16
    cc5e:	f7 01       	movw	r30, r14
    cc60:	80 81       	ld	r24, Z
    cc62:	0e 94 9f 48 	call	0x913e	; 0x913e <ld_clust.isra.4>
    cc66:	ab 01       	movw	r20, r22
    cc68:	bc 01       	movw	r22, r24
    cc6a:	c7 01       	movw	r24, r14
    cc6c:	0e 94 0c 46 	call	0x8c18	; 0x8c18 <clst2sect>
    cc70:	ab 01       	movw	r20, r22
    cc72:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cc74:	41 15       	cp	r20, r1
    cc76:	51 05       	cpc	r21, r1
    cc78:	61 05       	cpc	r22, r1
    cc7a:	71 05       	cpc	r23, r1
    cc7c:	91 f1       	breq	.+100    	; 0xcce2 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cc7e:	c7 01       	movw	r24, r14
    cc80:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    cc84:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cc86:	89 2b       	or	r24, r25
    cc88:	09 f0       	breq	.+2      	; 0xcc8c <f_rename+0x1c4>
    cc8a:	67 cf       	rjmp	.-306    	; 0xcb5a <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cc8c:	ef 96       	adiw	r28, 0x3f	; 63
    cc8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc90:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc92:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cc94:	fc 01       	movw	r30, r24
    cc96:	ea 5a       	subi	r30, 0xAA	; 170
    cc98:	ff 4f       	sbci	r31, 0xFF	; 255
    cc9a:	20 81       	ld	r18, Z
    cc9c:	2e 32       	cpi	r18, 0x2E	; 46
    cc9e:	71 f4       	brne	.+28     	; 0xccbc <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cca0:	2f 81       	ldd	r18, Y+7	; 0x07
    cca2:	38 85       	ldd	r19, Y+8	; 0x08
    cca4:	49 85       	ldd	r20, Y+9	; 0x09
    cca6:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cca8:	bc 01       	movw	r22, r24
    ccaa:	6b 5a       	subi	r22, 0xAB	; 171
    ccac:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    ccae:	0e 94 b4 48 	call	0x9168	; 0x9168 <st_clust.isra.5>
									fs->wflag = 1;
    ccb2:	ef 96       	adiw	r28, 0x3f	; 63
    ccb4:	ee ad       	ldd	r30, Y+62	; 0x3e
    ccb6:	ff ad       	ldd	r31, Y+63	; 0x3f
    ccb8:	ef 97       	sbiw	r28, 0x3f	; 63
    ccba:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    ccbc:	ce 01       	movw	r24, r28
    ccbe:	8f 96       	adiw	r24, 0x2f	; 47
    ccc0:	0e 94 14 53 	call	0xa628	; 0xa628 <dir_remove>
    ccc4:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    ccc6:	89 2b       	or	r24, r25
    ccc8:	09 f0       	breq	.+2      	; 0xcccc <f_rename+0x204>
    ccca:	47 cf       	rjmp	.-370    	; 0xcb5a <f_rename+0x92>
					res = sync_fs(fs);
    cccc:	ef 96       	adiw	r28, 0x3f	; 63
    ccce:	8e ad       	ldd	r24, Y+62	; 0x3e
    ccd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    ccd2:	ef 97       	sbiw	r28, 0x3f	; 63
    ccd4:	0e 94 14 49 	call	0x9228	; 0x9228 <sync_fs>
    ccd8:	8c 01       	movw	r16, r24
    ccda:	3f cf       	rjmp	.-386    	; 0xcb5a <f_rename+0x92>
    ccdc:	08 e0       	ldi	r16, 0x08	; 8
    ccde:	10 e0       	ldi	r17, 0x00	; 0
    cce0:	3c cf       	rjmp	.-392    	; 0xcb5a <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cce2:	02 e0       	ldi	r16, 0x02	; 2
    cce4:	10 e0       	ldi	r17, 0x00	; 0
    cce6:	39 cf       	rjmp	.-398    	; 0xcb5a <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cce8:	ce 57       	subi	r28, 0x7E	; 126
    ccea:	df 4f       	sbci	r29, 0xFF	; 255
    ccec:	e9 e0       	ldi	r30, 0x09	; 9
    ccee:	0c 94 7d e2 	jmp	0x1c4fa	; 0x1c4fa <__epilogue_restores__+0x12>

0000ccf2 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    ccf2:	a2 e3       	ldi	r26, 0x32	; 50
    ccf4:	b0 e0       	ldi	r27, 0x00	; 0
    ccf6:	ef e7       	ldi	r30, 0x7F	; 127
    ccf8:	f6 e6       	ldi	r31, 0x66	; 102
    ccfa:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    ccfe:	9a ab       	std	Y+50, r25	; 0x32
    cd00:	89 ab       	std	Y+49, r24	; 0x31
    cd02:	e6 2e       	mov	r14, r22
    cd04:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cd06:	42 e0       	ldi	r20, 0x02	; 2
    cd08:	be 01       	movw	r22, r28
    cd0a:	61 5d       	subi	r22, 0xD1	; 209
    cd0c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd0e:	ce 01       	movw	r24, r28
    cd10:	c1 96       	adiw	r24, 0x31	; 49
    cd12:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
	if (res == FR_OK) {
    cd16:	00 97       	sbiw	r24, 0x00	; 0
    cd18:	a9 f5       	brne	.+106    	; 0xcd84 <f_chmod+0x92>
		dj.obj.fs = fs;
    cd1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd1c:	98 a9       	ldd	r25, Y+48	; 0x30
    cd1e:	9a 83       	std	Y+2, r25	; 0x02
    cd20:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cd22:	80 e0       	ldi	r24, 0x00	; 0
    cd24:	92 e0       	ldi	r25, 0x02	; 2
    cd26:	27 d1       	rcall	.+590    	; 0xcf76 <ff_memalloc>
    cd28:	6c 01       	movw	r12, r24
    cd2a:	00 97       	sbiw	r24, 0x00	; 0
    cd2c:	b1 f0       	breq	.+44     	; 0xcd5a <f_chmod+0x68>
    cd2e:	ef a5       	ldd	r30, Y+47	; 0x2f
    cd30:	f8 a9       	ldd	r31, Y+48	; 0x30
    cd32:	94 87       	std	Z+12, r25	; 0x0c
    cd34:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cd36:	69 a9       	ldd	r22, Y+49	; 0x31
    cd38:	7a a9       	ldd	r23, Y+50	; 0x32
    cd3a:	ce 01       	movw	r24, r28
    cd3c:	01 96       	adiw	r24, 0x01	; 1
    cd3e:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    cd42:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cd44:	89 2b       	or	r24, r25
    cd46:	29 f4       	brne	.+10     	; 0xcd52 <f_chmod+0x60>
    cd48:	88 a5       	ldd	r24, Y+40	; 0x28
    cd4a:	80 7a       	andi	r24, 0xA0	; 160
    cd4c:	49 f0       	breq	.+18     	; 0xcd60 <f_chmod+0x6e>
    cd4e:	06 e0       	ldi	r16, 0x06	; 6
    cd50:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd52:	c6 01       	movw	r24, r12
    cd54:	13 d1       	rcall	.+550    	; 0xcf7c <ff_memfree>
    cd56:	c8 01       	movw	r24, r16
    cd58:	15 c0       	rjmp	.+42     	; 0xcd84 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd5a:	81 e1       	ldi	r24, 0x11	; 17
    cd5c:	90 e0       	ldi	r25, 0x00	; 0
    cd5e:	12 c0       	rjmp	.+36     	; 0xcd84 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cd60:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd62:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd64:	83 85       	ldd	r24, Z+11	; 0x0b
    cd66:	6e 2d       	mov	r22, r14
    cd68:	68 27       	eor	r22, r24
    cd6a:	6f 21       	and	r22, r15
    cd6c:	67 72       	andi	r22, 0x27	; 39
    cd6e:	68 27       	eor	r22, r24
    cd70:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cd72:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd74:	98 a9       	ldd	r25, Y+48	; 0x30
    cd76:	21 e0       	ldi	r18, 0x01	; 1
    cd78:	fc 01       	movw	r30, r24
    cd7a:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cd7c:	0e 94 14 49 	call	0x9228	; 0x9228 <sync_fs>
    cd80:	8c 01       	movw	r16, r24
    cd82:	e7 cf       	rjmp	.-50     	; 0xcd52 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd84:	e2 96       	adiw	r28, 0x32	; 50
    cd86:	e8 e0       	ldi	r30, 0x08	; 8
    cd88:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000cd8c <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cd8c:	a2 e3       	ldi	r26, 0x32	; 50
    cd8e:	b0 e0       	ldi	r27, 0x00	; 0
    cd90:	ec ec       	ldi	r30, 0xCC	; 204
    cd92:	f6 e6       	ldi	r31, 0x66	; 102
    cd94:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    cd98:	9a ab       	std	Y+50, r25	; 0x32
    cd9a:	89 ab       	std	Y+49, r24	; 0x31
    cd9c:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cd9e:	42 e0       	ldi	r20, 0x02	; 2
    cda0:	be 01       	movw	r22, r28
    cda2:	61 5d       	subi	r22, 0xD1	; 209
    cda4:	7f 4f       	sbci	r23, 0xFF	; 255
    cda6:	ce 01       	movw	r24, r28
    cda8:	c1 96       	adiw	r24, 0x31	; 49
    cdaa:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
	if (res == FR_OK) {
    cdae:	00 97       	sbiw	r24, 0x00	; 0
    cdb0:	09 f0       	breq	.+2      	; 0xcdb4 <f_utime+0x28>
    cdb2:	41 c0       	rjmp	.+130    	; 0xce36 <f_utime+0xaa>
		dj.obj.fs = fs;
    cdb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    cdb6:	98 a9       	ldd	r25, Y+48	; 0x30
    cdb8:	9a 83       	std	Y+2, r25	; 0x02
    cdba:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cdbc:	80 e0       	ldi	r24, 0x00	; 0
    cdbe:	92 e0       	ldi	r25, 0x02	; 2
    cdc0:	da d0       	rcall	.+436    	; 0xcf76 <ff_memalloc>
    cdc2:	7c 01       	movw	r14, r24
    cdc4:	00 97       	sbiw	r24, 0x00	; 0
    cdc6:	b1 f0       	breq	.+44     	; 0xcdf4 <f_utime+0x68>
    cdc8:	ef a5       	ldd	r30, Y+47	; 0x2f
    cdca:	f8 a9       	ldd	r31, Y+48	; 0x30
    cdcc:	94 87       	std	Z+12, r25	; 0x0c
    cdce:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cdd0:	69 a9       	ldd	r22, Y+49	; 0x31
    cdd2:	7a a9       	ldd	r23, Y+50	; 0x32
    cdd4:	ce 01       	movw	r24, r28
    cdd6:	01 96       	adiw	r24, 0x01	; 1
    cdd8:	0e 94 f8 55 	call	0xabf0	; 0xabf0 <follow_path>
    cddc:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cdde:	89 2b       	or	r24, r25
    cde0:	29 f4       	brne	.+10     	; 0xcdec <f_utime+0x60>
    cde2:	88 a5       	ldd	r24, Y+40	; 0x28
    cde4:	80 7a       	andi	r24, 0xA0	; 160
    cde6:	49 f0       	breq	.+18     	; 0xcdfa <f_utime+0x6e>
    cde8:	06 e0       	ldi	r16, 0x06	; 6
    cdea:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cdec:	c7 01       	movw	r24, r14
    cdee:	c6 d0       	rcall	.+396    	; 0xcf7c <ff_memfree>
    cdf0:	c8 01       	movw	r24, r16
    cdf2:	21 c0       	rjmp	.+66     	; 0xce36 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cdf4:	81 e1       	ldi	r24, 0x11	; 17
    cdf6:	90 e0       	ldi	r25, 0x00	; 0
    cdf8:	1e c0       	rjmp	.+60     	; 0xce36 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cdfa:	f6 01       	movw	r30, r12
    cdfc:	44 81       	ldd	r20, Z+4	; 0x04
    cdfe:	55 81       	ldd	r21, Z+5	; 0x05
    ce00:	60 e0       	ldi	r22, 0x00	; 0
    ce02:	70 e0       	ldi	r23, 0x00	; 0
    ce04:	ba 01       	movw	r22, r20
    ce06:	55 27       	eor	r21, r21
    ce08:	44 27       	eor	r20, r20
    ce0a:	86 81       	ldd	r24, Z+6	; 0x06
    ce0c:	97 81       	ldd	r25, Z+7	; 0x07
    ce0e:	a0 e0       	ldi	r26, 0x00	; 0
    ce10:	b0 e0       	ldi	r27, 0x00	; 0
    ce12:	48 2b       	or	r20, r24
    ce14:	59 2b       	or	r21, r25
    ce16:	6a 2b       	or	r22, r26
    ce18:	7b 2b       	or	r23, r27
    ce1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ce1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ce1e:	46 96       	adiw	r24, 0x16	; 22
    ce20:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <st_dword>
				fs->wflag = 1;
    ce24:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce26:	98 a9       	ldd	r25, Y+48	; 0x30
    ce28:	21 e0       	ldi	r18, 0x01	; 1
    ce2a:	fc 01       	movw	r30, r24
    ce2c:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    ce2e:	0e 94 14 49 	call	0x9228	; 0x9228 <sync_fs>
    ce32:	8c 01       	movw	r16, r24
    ce34:	db cf       	rjmp	.-74     	; 0xcdec <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ce36:	e2 96       	adiw	r28, 0x32	; 50
    ce38:	e8 e0       	ldi	r30, 0x08	; 8
    ce3a:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000ce3e <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    ce3e:	a2 e3       	ldi	r26, 0x32	; 50
    ce40:	b0 e0       	ldi	r27, 0x00	; 0
    ce42:	e5 e2       	ldi	r30, 0x25	; 37
    ce44:	f7 e6       	ldi	r31, 0x67	; 103
    ce46:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
    ce4a:	9a ab       	std	Y+50, r25	; 0x32
    ce4c:	89 ab       	std	Y+49, r24	; 0x31
    ce4e:	6b 01       	movw	r12, r22
    ce50:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    ce52:	40 e0       	ldi	r20, 0x00	; 0
    ce54:	be 01       	movw	r22, r28
    ce56:	61 5d       	subi	r22, 0xD1	; 209
    ce58:	7f 4f       	sbci	r23, 0xFF	; 255
    ce5a:	ce 01       	movw	r24, r28
    ce5c:	c1 96       	adiw	r24, 0x31	; 49
    ce5e:	0e 94 a9 4a 	call	0x9552	; 0x9552 <mount_volume>
    ce62:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    ce64:	89 2b       	or	r24, r25
    ce66:	09 f0       	breq	.+2      	; 0xce6a <f_getlabel+0x2c>
    ce68:	81 c0       	rjmp	.+258    	; 0xcf6c <f_getlabel+0x12e>
    ce6a:	c1 14       	cp	r12, r1
    ce6c:	d1 04       	cpc	r13, r1
    ce6e:	09 f4       	brne	.+2      	; 0xce72 <f_getlabel+0x34>
    ce70:	53 c0       	rjmp	.+166    	; 0xcf18 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    ce72:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce74:	98 a9       	ldd	r25, Y+48	; 0x30
    ce76:	9a 83       	std	Y+2, r25	; 0x02
    ce78:	89 83       	std	Y+1, r24	; 0x01
    ce7a:	1f 82       	std	Y+7, r1	; 0x07
    ce7c:	18 86       	std	Y+8, r1	; 0x08
    ce7e:	19 86       	std	Y+9, r1	; 0x09
    ce80:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    ce82:	40 e0       	ldi	r20, 0x00	; 0
    ce84:	50 e0       	ldi	r21, 0x00	; 0
    ce86:	ba 01       	movw	r22, r20
    ce88:	ce 01       	movw	r24, r28
    ce8a:	01 96       	adiw	r24, 0x01	; 1
    ce8c:	0e 94 b2 4e 	call	0x9d64	; 0x9d64 <dir_sdi>
		if (res == FR_OK) {
    ce90:	00 97       	sbiw	r24, 0x00	; 0
    ce92:	e9 f5       	brne	.+122    	; 0xcf0e <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    ce94:	61 e0       	ldi	r22, 0x01	; 1
    ce96:	70 e0       	ldi	r23, 0x00	; 0
    ce98:	ce 01       	movw	r24, r28
    ce9a:	01 96       	adiw	r24, 0x01	; 1
    ce9c:	0e 94 4b 52 	call	0xa496	; 0xa496 <dir_read>
		 	if (res == FR_OK) {
    cea0:	00 97       	sbiw	r24, 0x00	; 0
    cea2:	a9 f5       	brne	.+106    	; 0xcf0e <f_getlabel+0xd0>
    cea4:	00 e0       	ldi	r16, 0x00	; 0
    cea6:	10 e0       	ldi	r17, 0x00	; 0
    cea8:	80 e0       	ldi	r24, 0x00	; 0
    ceaa:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    ceac:	4c 01       	movw	r8, r24
    ceae:	2f ef       	ldi	r18, 0xFF	; 255
    ceb0:	82 1a       	sub	r8, r18
    ceb2:	92 0a       	sbc	r9, r18
    ceb4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    ceb6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    ceb8:	f9 01       	movw	r30, r18
    ceba:	e8 0f       	add	r30, r24
    cebc:	f9 1f       	adc	r31, r25
    cebe:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    cec0:	65 eb       	ldi	r22, 0xB5	; 181
    cec2:	71 e0       	ldi	r23, 0x01	; 1
    cec4:	90 e0       	ldi	r25, 0x00	; 0
    cec6:	90 d0       	rcall	.+288    	; 0xcfe8 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cec8:	00 97       	sbiw	r24, 0x00	; 0
    ceca:	19 f4       	brne	.+6      	; 0xced2 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    cecc:	00 e0       	ldi	r16, 0x00	; 0
    cece:	10 e0       	ldi	r17, 0x00	; 0
    ced0:	13 c0       	rjmp	.+38     	; 0xcef8 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    ced2:	bc 01       	movw	r22, r24
    ced4:	80 e0       	ldi	r24, 0x00	; 0
    ced6:	90 e0       	ldi	r25, 0x00	; 0
    ced8:	24 e0       	ldi	r18, 0x04	; 4
    ceda:	30 e0       	ldi	r19, 0x00	; 0
    cedc:	a6 01       	movw	r20, r12
    cede:	40 0f       	add	r20, r16
    cee0:	51 1f       	adc	r21, r17
    cee2:	0e 94 e2 46 	call	0x8dc4	; 0x8dc4 <put_utf>
    cee6:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    cee8:	00 97       	sbiw	r24, 0x00	; 0
    ceea:	81 f3       	breq	.-32     	; 0xcecc <f_getlabel+0x8e>
						di += wc;
    ceec:	08 0f       	add	r16, r24
    ceee:	19 1f       	adc	r17, r25
    cef0:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cef2:	8b 30       	cpi	r24, 0x0B	; 11
    cef4:	91 05       	cpc	r25, r1
    cef6:	d1 f6       	brne	.-76     	; 0xceac <f_getlabel+0x6e>
    cef8:	f6 01       	movw	r30, r12
    cefa:	e0 0f       	add	r30, r16
    cefc:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cefe:	10 82       	st	Z, r1
						if (di == 0) break;
    cf00:	ce 16       	cp	r12, r30
    cf02:	df 06       	cpc	r13, r31
    cf04:	49 f0       	breq	.+18     	; 0xcf18 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    cf06:	82 91       	ld	r24, -Z
    cf08:	80 32       	cpi	r24, 0x20	; 32
    cf0a:	c9 f3       	breq	.-14     	; 0xcefe <f_getlabel+0xc0>
    cf0c:	05 c0       	rjmp	.+10     	; 0xcf18 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cf0e:	84 30       	cpi	r24, 0x04	; 4
    cf10:	91 05       	cpc	r25, r1
    cf12:	59 f5       	brne	.+86     	; 0xcf6a <f_getlabel+0x12c>
			label[0] = 0;
    cf14:	f6 01       	movw	r30, r12
    cf16:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    cf18:	a1 14       	cp	r10, r1
    cf1a:	b1 04       	cpc	r11, r1
    cf1c:	39 f1       	breq	.+78     	; 0xcf6c <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    cf1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf20:	98 a9       	ldd	r25, Y+48	; 0x30
    cf22:	fc 01       	movw	r30, r24
    cf24:	41 a1       	ldd	r20, Z+33	; 0x21
    cf26:	52 a1       	ldd	r21, Z+34	; 0x22
    cf28:	63 a1       	ldd	r22, Z+35	; 0x23
    cf2a:	74 a1       	ldd	r23, Z+36	; 0x24
    cf2c:	0e 94 2e 4a 	call	0x945c	; 0x945c <move_window>
    cf30:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    cf32:	89 2b       	or	r24, r25
    cf34:	d9 f4       	brne	.+54     	; 0xcf6c <f_getlabel+0x12e>
			switch (fs->fs_type) {
    cf36:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf38:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf3a:	80 81       	ld	r24, Z
    cf3c:	83 30       	cpi	r24, 0x03	; 3
    cf3e:	29 f0       	breq	.+10     	; 0xcf4a <f_getlabel+0x10c>
    cf40:	84 30       	cpi	r24, 0x04	; 4
    cf42:	31 f0       	breq	.+12     	; 0xcf50 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    cf44:	87 e2       	ldi	r24, 0x27	; 39
    cf46:	90 e0       	ldi	r25, 0x00	; 0
    cf48:	05 c0       	rjmp	.+10     	; 0xcf54 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    cf4a:	83 e4       	ldi	r24, 0x43	; 67
    cf4c:	90 e0       	ldi	r25, 0x00	; 0
    cf4e:	02 c0       	rjmp	.+4      	; 0xcf54 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    cf50:	84 e6       	ldi	r24, 0x64	; 100
    cf52:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    cf54:	f5 96       	adiw	r30, 0x35	; 53
    cf56:	8e 0f       	add	r24, r30
    cf58:	9f 1f       	adc	r25, r31
    cf5a:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <ld_dword>
    cf5e:	f5 01       	movw	r30, r10
    cf60:	60 83       	st	Z, r22
    cf62:	71 83       	std	Z+1, r23	; 0x01
    cf64:	82 83       	std	Z+2, r24	; 0x02
    cf66:	93 83       	std	Z+3, r25	; 0x03
    cf68:	01 c0       	rjmp	.+2      	; 0xcf6c <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cf6a:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    cf6c:	c7 01       	movw	r24, r14
    cf6e:	e2 96       	adiw	r28, 0x32	; 50
    cf70:	ec e0       	ldi	r30, 0x0C	; 12
    cf72:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

0000cf76 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    cf76:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <safemalloc>
}
    cf7a:	08 95       	ret

0000cf7c <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    cf7c:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <safefree>
    cf80:	08 95       	ret

0000cf82 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    cf82:	cf 92       	push	r12
    cf84:	df 92       	push	r13
    cf86:	ef 92       	push	r14
    cf88:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    cf8a:	60 38       	cpi	r22, 0x80	; 128
    cf8c:	71 05       	cpc	r23, r1
    cf8e:	81 05       	cpc	r24, r1
    cf90:	91 05       	cpc	r25, r1
    cf92:	10 f4       	brcc	.+4      	; 0xcf98 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    cf94:	cb 01       	movw	r24, r22
    cf96:	23 c0       	rjmp	.+70     	; 0xcfde <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    cf98:	61 15       	cp	r22, r1
    cf9a:	71 05       	cpc	r23, r1
    cf9c:	21 e0       	ldi	r18, 0x01	; 1
    cf9e:	82 07       	cpc	r24, r18
    cfa0:	91 05       	cpc	r25, r1
    cfa2:	d8 f4       	brcc	.+54     	; 0xcfda <ff_uni2oem+0x58>
    cfa4:	45 3b       	cpi	r20, 0xB5	; 181
    cfa6:	51 40       	sbci	r21, 0x01	; 1
    cfa8:	c1 f4       	brne	.+48     	; 0xcfda <ff_uni2oem+0x58>
    cfaa:	e6 ea       	ldi	r30, 0xA6	; 166
    cfac:	f7 e0       	ldi	r31, 0x07	; 7
    cfae:	20 e0       	ldi	r18, 0x00	; 0
    cfb0:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    cfb2:	c1 90       	ld	r12, Z+
    cfb4:	d1 90       	ld	r13, Z+
    cfb6:	e1 2c       	mov	r14, r1
    cfb8:	f1 2c       	mov	r15, r1
    cfba:	6c 15       	cp	r22, r12
    cfbc:	7d 05       	cpc	r23, r13
    cfbe:	8e 05       	cpc	r24, r14
    cfc0:	9f 05       	cpc	r25, r15
    cfc2:	29 f0       	breq	.+10     	; 0xcfce <ff_uni2oem+0x4c>
    cfc4:	2f 5f       	subi	r18, 0xFF	; 255
    cfc6:	3f 4f       	sbci	r19, 0xFF	; 255
    cfc8:	20 38       	cpi	r18, 0x80	; 128
    cfca:	31 05       	cpc	r19, r1
    cfcc:	91 f7       	brne	.-28     	; 0xcfb2 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    cfce:	b9 01       	movw	r22, r18
    cfd0:	60 58       	subi	r22, 0x80	; 128
    cfd2:	7f 4f       	sbci	r23, 0xFF	; 255
    cfd4:	cb 01       	movw	r24, r22
    cfd6:	99 27       	eor	r25, r25
    cfd8:	02 c0       	rjmp	.+4      	; 0xcfde <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cfda:	80 e0       	ldi	r24, 0x00	; 0
    cfdc:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    cfde:	ff 90       	pop	r15
    cfe0:	ef 90       	pop	r14
    cfe2:	df 90       	pop	r13
    cfe4:	cf 90       	pop	r12
    cfe6:	08 95       	ret

0000cfe8 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    cfe8:	80 38       	cpi	r24, 0x80	; 128
    cfea:	91 05       	cpc	r25, r1
    cfec:	88 f0       	brcs	.+34     	; 0xd010 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    cfee:	65 3b       	cpi	r22, 0xB5	; 181
    cff0:	71 40       	sbci	r23, 0x01	; 1
    cff2:	61 f4       	brne	.+24     	; 0xd00c <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    cff4:	8f 3f       	cpi	r24, 0xFF	; 255
    cff6:	91 05       	cpc	r25, r1
    cff8:	09 f0       	breq	.+2      	; 0xcffc <ff_oem2uni+0x14>
    cffa:	40 f4       	brcc	.+16     	; 0xd00c <ff_oem2uni+0x24>
    cffc:	88 0f       	add	r24, r24
    cffe:	99 1f       	adc	r25, r25
    d000:	fc 01       	movw	r30, r24
    d002:	ea 55       	subi	r30, 0x5A	; 90
    d004:	f9 4f       	sbci	r31, 0xF9	; 249
    d006:	80 81       	ld	r24, Z
    d008:	91 81       	ldd	r25, Z+1	; 0x01
    d00a:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d00c:	80 e0       	ldi	r24, 0x00	; 0
    d00e:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d010:	08 95       	ret

0000d012 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d012:	61 15       	cp	r22, r1
    d014:	71 05       	cpc	r23, r1
    d016:	21 e0       	ldi	r18, 0x01	; 1
    d018:	82 07       	cpc	r24, r18
    d01a:	91 05       	cpc	r25, r1
    d01c:	08 f0       	brcs	.+2      	; 0xd020 <ff_wtoupper+0xe>
    d01e:	5a c0       	rjmp	.+180    	; 0xd0d4 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d020:	61 15       	cp	r22, r1
    d022:	80 e1       	ldi	r24, 0x10	; 16
    d024:	78 07       	cpc	r23, r24
    d026:	18 f0       	brcs	.+6      	; 0xd02e <ff_wtoupper+0x1c>
    d028:	a8 ef       	ldi	r26, 0xF8	; 248
    d02a:	b4 e0       	ldi	r27, 0x04	; 4
    d02c:	02 c0       	rjmp	.+4      	; 0xd032 <ff_wtoupper+0x20>
    d02e:	a4 eb       	ldi	r26, 0xB4	; 180
    d030:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d032:	2d 91       	ld	r18, X+
    d034:	3c 91       	ld	r19, X
    d036:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d038:	21 15       	cp	r18, r1
    d03a:	31 05       	cpc	r19, r1
    d03c:	09 f4       	brne	.+2      	; 0xd040 <ff_wtoupper+0x2e>
    d03e:	48 c0       	rjmp	.+144    	; 0xd0d0 <ff_wtoupper+0xbe>
    d040:	62 17       	cp	r22, r18
    d042:	73 07       	cpc	r23, r19
    d044:	08 f4       	brcc	.+2      	; 0xd048 <ff_wtoupper+0x36>
    d046:	44 c0       	rjmp	.+136    	; 0xd0d0 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d048:	14 96       	adiw	r26, 0x04	; 4
    d04a:	fd 01       	movw	r30, r26
    d04c:	32 97       	sbiw	r30, 0x02	; 2
    d04e:	80 81       	ld	r24, Z
    d050:	91 81       	ldd	r25, Z+1	; 0x01
    d052:	e9 2f       	mov	r30, r25
    d054:	ff 27       	eor	r31, r31
    d056:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d058:	a9 01       	movw	r20, r18
    d05a:	48 0f       	add	r20, r24
    d05c:	59 1f       	adc	r21, r25
    d05e:	64 17       	cp	r22, r20
    d060:	75 07       	cpc	r23, r21
    d062:	70 f5       	brcc	.+92     	; 0xd0c0 <ff_wtoupper+0xae>
				switch (cmd) {
    d064:	e9 30       	cpi	r30, 0x09	; 9
    d066:	f1 05       	cpc	r31, r1
    d068:	98 f5       	brcc	.+102    	; 0xd0d0 <ff_wtoupper+0xbe>
    d06a:	ec 54       	subi	r30, 0x4C	; 76
    d06c:	ff 4f       	sbci	r31, 0xFF	; 255
    d06e:	0c 94 29 e2 	jmp	0x1c452	; 0x1c452 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d072:	62 1b       	sub	r22, r18
    d074:	73 0b       	sbc	r23, r19
    d076:	fb 01       	movw	r30, r22
    d078:	ee 0f       	add	r30, r30
    d07a:	ff 1f       	adc	r31, r31
    d07c:	ea 0f       	add	r30, r26
    d07e:	fb 1f       	adc	r31, r27
    d080:	60 81       	ld	r22, Z
    d082:	71 81       	ldd	r23, Z+1	; 0x01
    d084:	25 c0       	rjmp	.+74     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d086:	cb 01       	movw	r24, r22
    d088:	82 1b       	sub	r24, r18
    d08a:	93 0b       	sbc	r25, r19
    d08c:	81 70       	andi	r24, 0x01	; 1
    d08e:	99 27       	eor	r25, r25
    d090:	68 1b       	sub	r22, r24
    d092:	79 0b       	sbc	r23, r25
    d094:	1d c0       	rjmp	.+58     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d096:	60 51       	subi	r22, 0x10	; 16
    d098:	71 09       	sbc	r23, r1
    d09a:	1a c0       	rjmp	.+52     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d09c:	60 52       	subi	r22, 0x20	; 32
    d09e:	71 09       	sbc	r23, r1
    d0a0:	17 c0       	rjmp	.+46     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d0a2:	60 53       	subi	r22, 0x30	; 48
    d0a4:	71 09       	sbc	r23, r1
    d0a6:	14 c0       	rjmp	.+40     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d0a8:	6a 51       	subi	r22, 0x1A	; 26
    d0aa:	71 09       	sbc	r23, r1
    d0ac:	11 c0       	rjmp	.+34     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d0ae:	68 5f       	subi	r22, 0xF8	; 248
    d0b0:	7f 4f       	sbci	r23, 0xFF	; 255
    d0b2:	0e c0       	rjmp	.+28     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d0b4:	60 55       	subi	r22, 0x50	; 80
    d0b6:	71 09       	sbc	r23, r1
    d0b8:	0b c0       	rjmp	.+22     	; 0xd0d0 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d0ba:	60 56       	subi	r22, 0x60	; 96
    d0bc:	7c 41       	sbci	r23, 0x1C	; 28
    d0be:	08 c0       	rjmp	.+16     	; 0xd0d0 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d0c0:	ef 2b       	or	r30, r31
    d0c2:	09 f0       	breq	.+2      	; 0xd0c6 <ff_wtoupper+0xb4>
    d0c4:	b6 cf       	rjmp	.-148    	; 0xd032 <ff_wtoupper+0x20>
    d0c6:	88 0f       	add	r24, r24
    d0c8:	99 1f       	adc	r25, r25
    d0ca:	a8 0f       	add	r26, r24
    d0cc:	b9 1f       	adc	r27, r25
    d0ce:	b1 cf       	rjmp	.-158    	; 0xd032 <ff_wtoupper+0x20>
		}
		uni = uc;
    d0d0:	80 e0       	ldi	r24, 0x00	; 0
    d0d2:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d0d4:	08 95       	ret

0000d0d6 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d0d6:	81 11       	cpse	r24, r1
    d0d8:	02 c0       	rjmp	.+4      	; 0xd0de <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d0da:	a1 c1       	rjmp	.+834    	; 0xd41e <mmc_disk_status>
    d0dc:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d0de:	81 e0       	ldi	r24, 0x01	; 1
}
    d0e0:	08 95       	ret

0000d0e2 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d0e2:	81 11       	cpse	r24, r1
    d0e4:	02 c0       	rjmp	.+4      	; 0xd0ea <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d0e6:	f6 c0       	rjmp	.+492    	; 0xd2d4 <mmc_disk_initialize>
    d0e8:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d0ea:	81 e0       	ldi	r24, 0x01	; 1
}
    d0ec:	08 95       	ret

0000d0ee <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d0ee:	0f 93       	push	r16
    d0f0:	1f 93       	push	r17
    d0f2:	fb 01       	movw	r30, r22
    switch (pdrv)
    d0f4:	81 11       	cpse	r24, r1
    d0f6:	06 c0       	rjmp	.+12     	; 0xd104 <disk_read+0x16>
    d0f8:	ba 01       	movw	r22, r20
    d0fa:	a9 01       	movw	r20, r18
    d0fc:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d0fe:	98 01       	movw	r18, r16
    d100:	91 d1       	rcall	.+802    	; 0xd424 <mmc_disk_read>
    d102:	02 c0       	rjmp	.+4      	; 0xd108 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d104:	84 e0       	ldi	r24, 0x04	; 4
    d106:	90 e0       	ldi	r25, 0x00	; 0
}
    d108:	1f 91       	pop	r17
    d10a:	0f 91       	pop	r16
    d10c:	08 95       	ret

0000d10e <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d10e:	0f 93       	push	r16
    d110:	1f 93       	push	r17
    d112:	fb 01       	movw	r30, r22
    switch (pdrv)
    d114:	81 11       	cpse	r24, r1
    d116:	06 c0       	rjmp	.+12     	; 0xd124 <disk_write+0x16>
    d118:	ba 01       	movw	r22, r20
    d11a:	a9 01       	movw	r20, r18
    d11c:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d11e:	98 01       	movw	r18, r16
    d120:	e2 d1       	rcall	.+964    	; 0xd4e6 <mmc_disk_write>
    d122:	02 c0       	rjmp	.+4      	; 0xd128 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d124:	84 e0       	ldi	r24, 0x04	; 4
    d126:	90 e0       	ldi	r25, 0x00	; 0
}
    d128:	1f 91       	pop	r17
    d12a:	0f 91       	pop	r16
    d12c:	08 95       	ret

0000d12e <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d12e:	96 2f       	mov	r25, r22
    switch (pdrv)
    d130:	81 11       	cpse	r24, r1
    d132:	04 c0       	rjmp	.+8      	; 0xd13c <disk_ioctl+0xe>
    d134:	ba 01       	movw	r22, r20
    d136:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d138:	4a c2       	rjmp	.+1172   	; 0xd5ce <mmc_disk_ioctl>
    d13a:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d13c:	84 e0       	ldi	r24, 0x04	; 4
    d13e:	90 e0       	ldi	r25, 0x00	; 0
}
    d140:	08 95       	ret

0000d142 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d142:	f9 c4       	rjmp	.+2546   	; 0xdb36 <mmc_spi_TXRX>
    return dat;
}
    d144:	08 95       	ret

0000d146 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d146:	ce d4       	rcall	.+2460   	; 0xdae4 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d148:	8f ef       	ldi	r24, 0xFF	; 255
    d14a:	fb df       	rcall	.-10     	; 0xd142 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d14c:	8f ef       	ldi	r24, 0xFF	; 255
    d14e:	f9 cf       	rjmp	.-14     	; 0xd142 <xchg_spi>
    d150:	08 95       	ret

0000d152 <rcvr_datablock>:
    d152:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d154:	1f 93       	push	r17
    d156:	cf 93       	push	r28
    d158:	df 93       	push	r29
    d15a:	ec 01       	movw	r28, r24
    d15c:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d15e:	88 ee       	ldi	r24, 0xE8	; 232
    d160:	93 e0       	ldi	r25, 0x03	; 3
    d162:	ec d4       	rcall	.+2520   	; 0xdb3c <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d164:	8f ef       	ldi	r24, 0xFF	; 255
    d166:	e7 d4       	rcall	.+2510   	; 0xdb36 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d168:	8f 3f       	cpi	r24, 0xFF	; 255
    d16a:	31 f4       	brne	.+12     	; 0xd178 <rcvr_datablock+0x26>
    d16c:	ee d4       	rcall	.+2524   	; 0xdb4a <mmc_test_timeout>
    d16e:	89 2b       	or	r24, r25
    d170:	c9 f3       	breq	.-14     	; 0xd164 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d172:	80 e0       	ldi	r24, 0x00	; 0
    d174:	90 e0       	ldi	r25, 0x00	; 0
    d176:	0b c0       	rjmp	.+22     	; 0xd18e <rcvr_datablock+0x3c>
    d178:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d17a:	d9 f7       	brne	.-10     	; 0xd172 <rcvr_datablock+0x20>
    d17c:	b8 01       	movw	r22, r16
    d17e:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d180:	d7 d4       	rcall	.+2478   	; 0xdb30 <mmc_spi_RX_buffer>
    d182:	8f ef       	ldi	r24, 0xFF	; 255
    d184:	de df       	rcall	.-68     	; 0xd142 <xchg_spi>
    xchg_spi(0xFF);
    d186:	8f ef       	ldi	r24, 0xFF	; 255
    d188:	dc df       	rcall	.-72     	; 0xd142 <xchg_spi>
    d18a:	81 e0       	ldi	r24, 0x01	; 1
    d18c:	90 e0       	ldi	r25, 0x00	; 0
    d18e:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d190:	cf 91       	pop	r28
    d192:	1f 91       	pop	r17
    d194:	0f 91       	pop	r16
    d196:	08 95       	ret

0000d198 <wait_ready>:
    d198:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d19a:	d0 d4       	rcall	.+2464   	; 0xdb3c <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d19c:	8f ef       	ldi	r24, 0xFF	; 255
    d19e:	cb d4       	rcall	.+2454   	; 0xdb36 <mmc_spi_TXRX>
    d1a0:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d1a2:	8f 3f       	cpi	r24, 0xFF	; 255
    d1a4:	19 f0       	breq	.+6      	; 0xd1ac <wait_ready+0x14>
    d1a6:	d1 d4       	rcall	.+2466   	; 0xdb4a <mmc_test_timeout>
    d1a8:	89 2b       	or	r24, r25
    d1aa:	c1 f3       	breq	.-16     	; 0xd19c <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d1ac:	81 e0       	ldi	r24, 0x01	; 1
    d1ae:	90 e0       	ldi	r25, 0x00	; 0
    d1b0:	cf 3f       	cpi	r28, 0xFF	; 255
    d1b2:	11 f0       	breq	.+4      	; 0xd1b8 <wait_ready+0x20>
    d1b4:	80 e0       	ldi	r24, 0x00	; 0
    d1b6:	90 e0       	ldi	r25, 0x00	; 0
}
    d1b8:	cf 91       	pop	r28
    d1ba:	08 95       	ret

0000d1bc <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d1bc:	cf 93       	push	r28
    d1be:	df 93       	push	r29
    d1c0:	00 d0       	rcall	.+0      	; 0xd1c2 <select+0x6>
    d1c2:	1f 92       	push	r1
    CS_LOW();
    d1c4:	82 d4       	rcall	.+2308   	; 0xdaca <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d1c6:	8f ef       	ldi	r24, 0xFF	; 255
    d1c8:	bc df       	rcall	.-136    	; 0xd142 <xchg_spi>

    if (wait_ready(1000))
    d1ca:	88 ee       	ldi	r24, 0xE8	; 232
    d1cc:	93 e0       	ldi	r25, 0x03	; 3
    d1ce:	e4 df       	rcall	.-56     	; 0xd198 <wait_ready>
    d1d0:	ec 01       	movw	r28, r24
    d1d2:	89 2b       	or	r24, r25
    d1d4:	61 f4       	brne	.+24     	; 0xd1ee <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d1d6:	89 e6       	ldi	r24, 0x69	; 105
    d1d8:	97 e0       	ldi	r25, 0x07	; 7
    d1da:	a0 e0       	ldi	r26, 0x00	; 0
    d1dc:	ed b7       	in	r30, 0x3d	; 61
    d1de:	fe b7       	in	r31, 0x3e	; 62
    d1e0:	81 83       	std	Z+1, r24	; 0x01
    d1e2:	92 83       	std	Z+2, r25	; 0x02
    d1e4:	a3 83       	std	Z+3, r26	; 0x03
    d1e6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    deselect();
    d1ea:	ad df       	rcall	.-166    	; 0xd146 <deselect>
    d1ec:	02 c0       	rjmp	.+4      	; 0xd1f2 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d1ee:	c1 e0       	ldi	r28, 0x01	; 1
    d1f0:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d1f2:	ce 01       	movw	r24, r28
    d1f4:	cd b7       	in	r28, 0x3d	; 61
    d1f6:	de b7       	in	r29, 0x3e	; 62
    d1f8:	23 96       	adiw	r28, 0x03	; 3
    d1fa:	e2 e0       	ldi	r30, 0x02	; 2
    d1fc:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000d200 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d200:	ff 92       	push	r15
    d202:	0f 93       	push	r16
    d204:	1f 93       	push	r17
    d206:	cf 93       	push	r28
    d208:	df 93       	push	r29
    d20a:	c8 2f       	mov	r28, r24
    d20c:	d4 2f       	mov	r29, r20
    d20e:	15 2f       	mov	r17, r21
    d210:	06 2f       	mov	r16, r22
    d212:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d214:	87 ff       	sbrs	r24, 7
    d216:	08 c0       	rjmp	.+16     	; 0xd228 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d218:	40 e0       	ldi	r20, 0x00	; 0
    d21a:	50 e0       	ldi	r21, 0x00	; 0
    d21c:	ba 01       	movw	r22, r20
    d21e:	87 e3       	ldi	r24, 0x37	; 55
    d220:	ef df       	rcall	.-34     	; 0xd200 <send_cmd>
        if (res > 1) return res;
    d222:	82 30       	cpi	r24, 0x02	; 2
    d224:	58 f5       	brcc	.+86     	; 0xd27c <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d226:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d228:	cc 30       	cpi	r28, 0x0C	; 12
    d22a:	71 f4       	brne	.+28     	; 0xd248 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d22c:	8c 2f       	mov	r24, r28
    d22e:	80 64       	ori	r24, 0x40	; 64
    d230:	88 df       	rcall	.-240    	; 0xd142 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d232:	8f 2d       	mov	r24, r15
    d234:	86 df       	rcall	.-244    	; 0xd142 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d236:	80 2f       	mov	r24, r16
    d238:	84 df       	rcall	.-248    	; 0xd142 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d23a:	81 2f       	mov	r24, r17
    d23c:	82 df       	rcall	.-252    	; 0xd142 <xchg_spi>
    d23e:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d240:	80 df       	rcall	.-256    	; 0xd142 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d242:	cc 23       	and	r28, r28
    d244:	c9 f0       	breq	.+50     	; 0xd278 <send_cmd+0x78>
    d246:	06 c0       	rjmp	.+12     	; 0xd254 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d248:	7e df       	rcall	.-260    	; 0xd146 <deselect>
    d24a:	b8 df       	rcall	.-144    	; 0xd1bc <select>
        if (!select()) return 0xFF;
    d24c:	89 2b       	or	r24, r25
    d24e:	71 f7       	brne	.-36     	; 0xd22c <send_cmd+0x2c>
    d250:	8f ef       	ldi	r24, 0xFF	; 255
    d252:	14 c0       	rjmp	.+40     	; 0xd27c <send_cmd+0x7c>
    d254:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d256:	11 f4       	brne	.+4      	; 0xd25c <send_cmd+0x5c>
    d258:	87 e8       	ldi	r24, 0x87	; 135
    d25a:	01 c0       	rjmp	.+2      	; 0xd25e <send_cmd+0x5e>

    xchg_spi(n);
    d25c:	81 e0       	ldi	r24, 0x01	; 1
    d25e:	71 df       	rcall	.-286    	; 0xd142 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d260:	cc 30       	cpi	r28, 0x0C	; 12
    d262:	11 f4       	brne	.+4      	; 0xd268 <send_cmd+0x68>
    d264:	8f ef       	ldi	r24, 0xFF	; 255
    d266:	6d df       	rcall	.-294    	; 0xd142 <xchg_spi>
    d268:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d26a:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d26c:	64 d4       	rcall	.+2248   	; 0xdb36 <mmc_spi_TXRX>
    d26e:	87 ff       	sbrs	r24, 7
    d270:	05 c0       	rjmp	.+10     	; 0xd27c <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d272:	c1 50       	subi	r28, 0x01	; 1
    d274:	d1 f7       	brne	.-12     	; 0xd26a <send_cmd+0x6a>
    d276:	02 c0       	rjmp	.+4      	; 0xd27c <send_cmd+0x7c>
    d278:	85 e9       	ldi	r24, 0x95	; 149
    d27a:	f5 cf       	rjmp	.-22     	; 0xd266 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d27c:	cd b7       	in	r28, 0x3d	; 61
    d27e:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d280:	e5 e0       	ldi	r30, 0x05	; 5
    d282:	0c 94 81 e2 	jmp	0x1c502	; 0x1c502 <__epilogue_restores__+0x1a>

0000d286 <xmit_datablock>:
    d286:	0f 93       	push	r16
    d288:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d28a:	cf 93       	push	r28
    d28c:	8c 01       	movw	r16, r24
    d28e:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d290:	88 ee       	ldi	r24, 0xE8	; 232
    d292:	93 e0       	ldi	r25, 0x03	; 3
    d294:	81 df       	rcall	.-254    	; 0xd198 <wait_ready>
    d296:	00 97       	sbiw	r24, 0x00	; 0
    d298:	c9 f0       	breq	.+50     	; 0xd2cc <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d29a:	8c 2f       	mov	r24, r28
    d29c:	52 df       	rcall	.-348    	; 0xd142 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d29e:	cd 3f       	cpi	r28, 0xFD	; 253
    d2a0:	99 f0       	breq	.+38     	; 0xd2c8 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d2a2:	60 e0       	ldi	r22, 0x00	; 0
    d2a4:	72 e0       	ldi	r23, 0x02	; 2
    d2a6:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d2a8:	40 d4       	rcall	.+2176   	; 0xdb2a <mmc_spi_TX_buffer>
    d2aa:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d2ac:	4a df       	rcall	.-364    	; 0xd142 <xchg_spi>
    d2ae:	8f ef       	ldi	r24, 0xFF	; 255
    d2b0:	48 df       	rcall	.-368    	; 0xd142 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d2b2:	8f ef       	ldi	r24, 0xFF	; 255
    d2b4:	40 d4       	rcall	.+2176   	; 0xdb36 <mmc_spi_TXRX>
    d2b6:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d2b8:	31 e0       	ldi	r19, 0x01	; 1
    d2ba:	20 e0       	ldi	r18, 0x00	; 0
    d2bc:	85 30       	cpi	r24, 0x05	; 5
    d2be:	09 f0       	breq	.+2      	; 0xd2c2 <xmit_datablock+0x3c>
    d2c0:	30 e0       	ldi	r19, 0x00	; 0
    d2c2:	83 2f       	mov	r24, r19
    d2c4:	92 2f       	mov	r25, r18
    d2c6:	02 c0       	rjmp	.+4      	; 0xd2cc <xmit_datablock+0x46>
    d2c8:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d2ca:	90 e0       	ldi	r25, 0x00	; 0
    d2cc:	cf 91       	pop	r28
}
    d2ce:	1f 91       	pop	r17
    d2d0:	0f 91       	pop	r16
    d2d2:	08 95       	ret

0000d2d4 <mmc_disk_initialize>:
    d2d4:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d2d6:	b0 e0       	ldi	r27, 0x00	; 0
    d2d8:	e0 e7       	ldi	r30, 0x70	; 112
    d2da:	f9 e6       	ldi	r31, 0x69	; 105
    d2dc:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d2e0:	59 d4       	rcall	.+2226   	; 0xdb94 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d2e2:	64 e6       	ldi	r22, 0x64	; 100
    d2e4:	70 e0       	ldi	r23, 0x00	; 0
    d2e6:	80 e0       	ldi	r24, 0x00	; 0
    d2e8:	90 e0       	ldi	r25, 0x00	; 0
    d2ea:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d2ee:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2f2:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d2f4:	8e c0       	rjmp	.+284    	; 0xd412 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d2f6:	4d d4       	rcall	.+2202   	; 0xdb92 <mmc_power_on>
    d2f8:	f9 d3       	rcall	.+2034   	; 0xdaec <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d2fa:	1a e0       	ldi	r17, 0x0A	; 10
    d2fc:	8f ef       	ldi	r24, 0xFF	; 255
    d2fe:	21 df       	rcall	.-446    	; 0xd142 <xchg_spi>
    d300:	11 50       	subi	r17, 0x01	; 1
    d302:	e1 f7       	brne	.-8      	; 0xd2fc <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d304:	40 e0       	ldi	r20, 0x00	; 0
    d306:	50 e0       	ldi	r21, 0x00	; 0
    d308:	ba 01       	movw	r22, r20
    d30a:	80 e0       	ldi	r24, 0x00	; 0
    d30c:	79 df       	rcall	.-270    	; 0xd200 <send_cmd>
    d30e:	81 30       	cpi	r24, 0x01	; 1
    d310:	09 f0       	breq	.+2      	; 0xd314 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d312:	6f c0       	rjmp	.+222    	; 0xd3f2 <mmc_disk_initialize+0x11e>
    d314:	80 ed       	ldi	r24, 0xD0	; 208
    d316:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d318:	11 d4       	rcall	.+2082   	; 0xdb3c <mmc_set_ms_timeout>
    d31a:	4a ea       	ldi	r20, 0xAA	; 170
    d31c:	51 e0       	ldi	r21, 0x01	; 1
    d31e:	60 e0       	ldi	r22, 0x00	; 0
    d320:	70 e0       	ldi	r23, 0x00	; 0
    d322:	88 e0       	ldi	r24, 0x08	; 8
    d324:	6d df       	rcall	.-294    	; 0xd200 <send_cmd>
    d326:	81 30       	cpi	r24, 0x01	; 1
    d328:	09 f0       	breq	.+2      	; 0xd32c <mmc_disk_initialize+0x58>
    d32a:	3d c0       	rjmp	.+122    	; 0xd3a6 <mmc_disk_initialize+0xd2>
    d32c:	8e 01       	movw	r16, r28
    d32e:	0f 5f       	subi	r16, 0xFF	; 255
    d330:	1f 4f       	sbci	r17, 0xFF	; 255
    d332:	6e 01       	movw	r12, r28
    d334:	85 e0       	ldi	r24, 0x05	; 5
    d336:	c8 0e       	add	r12, r24
    d338:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d33a:	78 01       	movw	r14, r16
    d33c:	8f ef       	ldi	r24, 0xFF	; 255
    d33e:	fb d3       	rcall	.+2038   	; 0xdb36 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d340:	f7 01       	movw	r30, r14
    d342:	81 93       	st	Z+, r24
    d344:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d346:	ce 16       	cp	r12, r30
    d348:	df 06       	cpc	r13, r31
    d34a:	c1 f7       	brne	.-16     	; 0xd33c <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d34c:	8b 81       	ldd	r24, Y+3	; 0x03
    d34e:	81 30       	cpi	r24, 0x01	; 1
    d350:	09 f0       	breq	.+2      	; 0xd354 <mmc_disk_initialize+0x80>
    d352:	4f c0       	rjmp	.+158    	; 0xd3f2 <mmc_disk_initialize+0x11e>
    d354:	8c 81       	ldd	r24, Y+4	; 0x04
    d356:	8a 3a       	cpi	r24, 0xAA	; 170
    d358:	09 f0       	breq	.+2      	; 0xd35c <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d35a:	4b c0       	rjmp	.+150    	; 0xd3f2 <mmc_disk_initialize+0x11e>
    d35c:	f6 d3       	rcall	.+2028   	; 0xdb4a <mmc_test_timeout>
    d35e:	89 2b       	or	r24, r25
    d360:	29 f0       	breq	.+10     	; 0xd36c <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d362:	f3 d3       	rcall	.+2022   	; 0xdb4a <mmc_test_timeout>
    d364:	89 2b       	or	r24, r25
    d366:	09 f0       	breq	.+2      	; 0xd36a <mmc_disk_initialize+0x96>
    d368:	44 c0       	rjmp	.+136    	; 0xd3f2 <mmc_disk_initialize+0x11e>
    d36a:	09 c0       	rjmp	.+18     	; 0xd37e <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d36c:	40 e0       	ldi	r20, 0x00	; 0
    d36e:	50 e0       	ldi	r21, 0x00	; 0
    d370:	60 e0       	ldi	r22, 0x00	; 0
    d372:	70 e4       	ldi	r23, 0x40	; 64
    d374:	89 ea       	ldi	r24, 0xA9	; 169
    d376:	44 df       	rcall	.-376    	; 0xd200 <send_cmd>
    d378:	81 11       	cpse	r24, r1
    d37a:	f0 cf       	rjmp	.-32     	; 0xd35c <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d37c:	f2 cf       	rjmp	.-28     	; 0xd362 <mmc_disk_initialize+0x8e>
    d37e:	40 e0       	ldi	r20, 0x00	; 0
    d380:	50 e0       	ldi	r21, 0x00	; 0
    d382:	ba 01       	movw	r22, r20
    d384:	8a e3       	ldi	r24, 0x3A	; 58
    d386:	3c df       	rcall	.-392    	; 0xd200 <send_cmd>
    d388:	81 11       	cpse	r24, r1
    d38a:	33 c0       	rjmp	.+102    	; 0xd3f2 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d38c:	8f ef       	ldi	r24, 0xFF	; 255
    d38e:	d3 d3       	rcall	.+1958   	; 0xdb36 <mmc_spi_TXRX>
    d390:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d392:	81 93       	st	Z+, r24
    d394:	8f 01       	movw	r16, r30
    d396:	ce 16       	cp	r12, r30
    d398:	df 06       	cpc	r13, r31
    d39a:	c1 f7       	brne	.-16     	; 0xd38c <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d39c:	89 81       	ldd	r24, Y+1	; 0x01
    d39e:	86 fd       	sbrc	r24, 6
    d3a0:	2a c0       	rjmp	.+84     	; 0xd3f6 <mmc_disk_initialize+0x122>
    d3a2:	14 e0       	ldi	r17, 0x04	; 4
    d3a4:	29 c0       	rjmp	.+82     	; 0xd3f8 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d3a6:	80 ed       	ldi	r24, 0xD0	; 208
    d3a8:	97 e0       	ldi	r25, 0x07	; 7
    d3aa:	c8 d3       	rcall	.+1936   	; 0xdb3c <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d3ac:	40 e0       	ldi	r20, 0x00	; 0
    d3ae:	50 e0       	ldi	r21, 0x00	; 0
    d3b0:	ba 01       	movw	r22, r20
    d3b2:	89 ea       	ldi	r24, 0xA9	; 169
    d3b4:	25 df       	rcall	.-438    	; 0xd200 <send_cmd>
    d3b6:	82 30       	cpi	r24, 0x02	; 2
    d3b8:	18 f0       	brcs	.+6      	; 0xd3c0 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d3ba:	11 e0       	ldi	r17, 0x01	; 1
    d3bc:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d3be:	02 c0       	rjmp	.+4      	; 0xd3c4 <mmc_disk_initialize+0xf0>
    d3c0:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d3c2:	09 ea       	ldi	r16, 0xA9	; 169
    d3c4:	c2 d3       	rcall	.+1924   	; 0xdb4a <mmc_test_timeout>
    d3c6:	89 2b       	or	r24, r25
    d3c8:	21 f0       	breq	.+8      	; 0xd3d2 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d3ca:	bf d3       	rcall	.+1918   	; 0xdb4a <mmc_test_timeout>
    d3cc:	89 2b       	or	r24, r25
    d3ce:	89 f4       	brne	.+34     	; 0xd3f2 <mmc_disk_initialize+0x11e>
    d3d0:	08 c0       	rjmp	.+16     	; 0xd3e2 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d3d2:	40 e0       	ldi	r20, 0x00	; 0
    d3d4:	50 e0       	ldi	r21, 0x00	; 0
    d3d6:	ba 01       	movw	r22, r20
    d3d8:	80 2f       	mov	r24, r16
    d3da:	12 df       	rcall	.-476    	; 0xd200 <send_cmd>
    d3dc:	81 11       	cpse	r24, r1
    d3de:	f2 cf       	rjmp	.-28     	; 0xd3c4 <mmc_disk_initialize+0xf0>
    d3e0:	f4 cf       	rjmp	.-24     	; 0xd3ca <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d3e2:	40 e0       	ldi	r20, 0x00	; 0
    d3e4:	52 e0       	ldi	r21, 0x02	; 2
    d3e6:	60 e0       	ldi	r22, 0x00	; 0
    d3e8:	70 e0       	ldi	r23, 0x00	; 0
    d3ea:	80 e1       	ldi	r24, 0x10	; 16
    d3ec:	09 df       	rcall	.-494    	; 0xd200 <send_cmd>
    d3ee:	88 23       	and	r24, r24
                ty = 0;
    d3f0:	19 f0       	breq	.+6      	; 0xd3f8 <mmc_disk_initialize+0x124>
    d3f2:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d3f4:	01 c0       	rjmp	.+2      	; 0xd3f8 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d3f6:	1c e0       	ldi	r17, 0x0C	; 12
    d3f8:	10 93 1b 18 	sts	0x181B, r17	; 0x80181b <CardType>
    deselect();
    d3fc:	a4 de       	rcall	.-696    	; 0xd146 <deselect>

    if (ty)                                       /* Initialization succeded */
    d3fe:	11 23       	and	r17, r17
    d400:	39 f0       	breq	.+14     	; 0xd410 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d402:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d406:	8e 7f       	andi	r24, 0xFE	; 254
    d408:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d40c:	81 d3       	rcall	.+1794   	; 0xdb10 <mmc_fast>
    d40e:	01 c0       	rjmp	.+2      	; 0xd412 <mmc_disk_initialize+0x13e>
    d410:	c1 d3       	rcall	.+1922   	; 0xdb94 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d412:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d416:	24 96       	adiw	r28, 0x04	; 4
    d418:	e8 e0       	ldi	r30, 0x08	; 8
}
    d41a:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000d41e <mmc_disk_status>:
    d41e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d422:	08 95       	ret

0000d424 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d424:	8f 92       	push	r8
    d426:	9f 92       	push	r9
    d428:	af 92       	push	r10
    d42a:	bf 92       	push	r11
    d42c:	ef 92       	push	r14
    d42e:	ff 92       	push	r15
    d430:	1f 93       	push	r17
    d432:	cf 93       	push	r28
    d434:	df 93       	push	r29
    d436:	7c 01       	movw	r14, r24
    d438:	4a 01       	movw	r8, r20
    d43a:	5b 01       	movw	r10, r22
    d43c:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d43e:	20 97       	sbiw	r28, 0x00	; 0
    d440:	19 f4       	brne	.+6      	; 0xd448 <mmc_disk_read+0x24>
    {
        deselect();
    d442:	81 de       	rcall	.-766    	; 0xd146 <deselect>
        return RES_PARERR;
    d444:	84 e0       	ldi	r24, 0x04	; 4
    d446:	0d c0       	rjmp	.+26     	; 0xd462 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d448:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d44c:	88 23       	and	r24, r24
    d44e:	19 f0       	breq	.+6      	; 0xd456 <mmc_disk_read+0x32>
		set_error(1);
    d450:	81 e0       	ldi	r24, 0x01	; 1
    d452:	0e 94 a7 24 	call	0x494e	; 0x494e <set_error>

    if (Stat & STA_NOINIT)
    d456:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d45a:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d45c:	04 c0       	rjmp	.+8      	; 0xd466 <mmc_disk_read+0x42>
    d45e:	73 de       	rcall	.-794    	; 0xd146 <deselect>
        return RES_NOTRDY;
    d460:	83 e0       	ldi	r24, 0x03	; 3
    d462:	90 e0       	ldi	r25, 0x00	; 0
    d464:	36 c0       	rjmp	.+108    	; 0xd4d2 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d466:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d46a:	81 fd       	sbrc	r24, 1
    d46c:	f8 cf       	rjmp	.-16     	; 0xd45e <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d46e:	46 9a       	sbi	0x08, 6	; 8
    d470:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d472:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <CardType>
    d476:	83 fd       	sbrc	r24, 3
    d478:	07 c0       	rjmp	.+14     	; 0xd488 <mmc_disk_read+0x64>
    d47a:	89 e0       	ldi	r24, 0x09	; 9
    d47c:	88 0c       	add	r8, r8
    d47e:	99 1c       	adc	r9, r9
    d480:	aa 1c       	adc	r10, r10
    d482:	bb 1c       	adc	r11, r11
    d484:	8a 95       	dec	r24
    d486:	d1 f7       	brne	.-12     	; 0xd47c <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d488:	c2 30       	cpi	r28, 0x02	; 2
    d48a:	d1 05       	cpc	r29, r1
    d48c:	10 f4       	brcc	.+4      	; 0xd492 <mmc_disk_read+0x6e>
    d48e:	11 e1       	ldi	r17, 0x11	; 17
    d490:	01 c0       	rjmp	.+2      	; 0xd494 <mmc_disk_read+0x70>
    d492:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d494:	b5 01       	movw	r22, r10
    d496:	a4 01       	movw	r20, r8
    d498:	81 2f       	mov	r24, r17
    d49a:	b2 de       	rcall	.-668    	; 0xd200 <send_cmd>
    d49c:	81 11       	cpse	r24, r1
    d49e:	11 c0       	rjmp	.+34     	; 0xd4c2 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d4a0:	60 e0       	ldi	r22, 0x00	; 0
    d4a2:	72 e0       	ldi	r23, 0x02	; 2
    d4a4:	c7 01       	movw	r24, r14
    d4a6:	55 de       	rcall	.-854    	; 0xd152 <rcvr_datablock>
    d4a8:	89 2b       	or	r24, r25
    d4aa:	21 f0       	breq	.+8      	; 0xd4b4 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d4ac:	8e ef       	ldi	r24, 0xFE	; 254
    d4ae:	f8 1a       	sub	r15, r24
        } while (--count);
    d4b0:	21 97       	sbiw	r28, 0x01	; 1
    d4b2:	b1 f7       	brne	.-20     	; 0xd4a0 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d4b4:	12 31       	cpi	r17, 0x12	; 18
    d4b6:	29 f4       	brne	.+10     	; 0xd4c2 <mmc_disk_read+0x9e>
    d4b8:	40 e0       	ldi	r20, 0x00	; 0
    d4ba:	50 e0       	ldi	r21, 0x00	; 0
    d4bc:	ba 01       	movw	r22, r20
    d4be:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d4c0:	9f de       	rcall	.-706    	; 0xd200 <send_cmd>
    d4c2:	41 de       	rcall	.-894    	; 0xd146 <deselect>
    GPIO_PIN_LOW(LED1);
    d4c4:	46 98       	cbi	0x08, 6	; 8
    d4c6:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d4c8:	81 e0       	ldi	r24, 0x01	; 1
    d4ca:	90 e0       	ldi	r25, 0x00	; 0
    d4cc:	cd 2b       	or	r28, r29
    d4ce:	09 f4       	brne	.+2      	; 0xd4d2 <mmc_disk_read+0xae>
    d4d0:	80 e0       	ldi	r24, 0x00	; 0
}
    d4d2:	df 91       	pop	r29
    d4d4:	cf 91       	pop	r28
    d4d6:	1f 91       	pop	r17
    d4d8:	ff 90       	pop	r15
    d4da:	ef 90       	pop	r14
    d4dc:	bf 90       	pop	r11
    d4de:	af 90       	pop	r10
    d4e0:	9f 90       	pop	r9
    d4e2:	8f 90       	pop	r8
    d4e4:	08 95       	ret

0000d4e6 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d4e6:	a0 e0       	ldi	r26, 0x00	; 0
    d4e8:	b0 e0       	ldi	r27, 0x00	; 0
    d4ea:	e9 e7       	ldi	r30, 0x79	; 121
    d4ec:	fa e6       	ldi	r31, 0x6A	; 106
    d4ee:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    d4f2:	8c 01       	movw	r16, r24
    d4f4:	6a 01       	movw	r12, r20
    d4f6:	7b 01       	movw	r14, r22
    d4f8:	e9 01       	movw	r28, r18
    if (!count)
    d4fa:	20 97       	sbiw	r28, 0x00	; 0
    d4fc:	19 f4       	brne	.+6      	; 0xd504 <mmc_disk_write+0x1e>
    {
        deselect();
    d4fe:	23 de       	rcall	.-954    	; 0xd146 <deselect>
        return RES_PARERR;
    d500:	84 e0       	ldi	r24, 0x04	; 4
    d502:	18 c0       	rjmp	.+48     	; 0xd534 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d504:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d508:	88 23       	and	r24, r24
    d50a:	19 f0       	breq	.+6      	; 0xd512 <mmc_disk_write+0x2c>
		set_error(1);
    d50c:	81 e0       	ldi	r24, 0x01	; 1
    d50e:	0e 94 a7 24 	call	0x494e	; 0x494e <set_error>

    if (Stat & STA_NOINIT)
    d512:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d516:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d518:	03 c0       	rjmp	.+6      	; 0xd520 <mmc_disk_write+0x3a>
    d51a:	15 de       	rcall	.-982    	; 0xd146 <deselect>
        return RES_NOTRDY;
    d51c:	83 e0       	ldi	r24, 0x03	; 3
    d51e:	0a c0       	rjmp	.+20     	; 0xd534 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d520:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d524:	81 fd       	sbrc	r24, 1
    d526:	f9 cf       	rjmp	.-14     	; 0xd51a <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d528:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d52c:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d52e:	04 c0       	rjmp	.+8      	; 0xd538 <mmc_disk_write+0x52>
    d530:	0a de       	rcall	.-1004   	; 0xd146 <deselect>
        return RES_WRPRT;
    d532:	82 e0       	ldi	r24, 0x02	; 2
    d534:	90 e0       	ldi	r25, 0x00	; 0
    d536:	46 c0       	rjmp	.+140    	; 0xd5c4 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d538:	46 9a       	sbi	0x08, 6	; 8
    d53a:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d53c:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <CardType>
    d540:	83 fd       	sbrc	r24, 3
    d542:	07 c0       	rjmp	.+14     	; 0xd552 <mmc_disk_write+0x6c>
    d544:	99 e0       	ldi	r25, 0x09	; 9
    d546:	cc 0c       	add	r12, r12
    d548:	dd 1c       	adc	r13, r13
    d54a:	ee 1c       	adc	r14, r14
    d54c:	ff 1c       	adc	r15, r15
    d54e:	9a 95       	dec	r25
    d550:	d1 f7       	brne	.-12     	; 0xd546 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d552:	c1 30       	cpi	r28, 0x01	; 1
    d554:	d1 05       	cpc	r29, r1
    d556:	89 f4       	brne	.+34     	; 0xd57a <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d558:	b7 01       	movw	r22, r14
    d55a:	a6 01       	movw	r20, r12
    d55c:	88 e1       	ldi	r24, 0x18	; 24
    d55e:	50 de       	rcall	.-864    	; 0xd200 <send_cmd>
    d560:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d562:	26 c0       	rjmp	.+76     	; 0xd5b0 <mmc_disk_write+0xca>
    d564:	6e ef       	ldi	r22, 0xFE	; 254
    d566:	c8 01       	movw	r24, r16
    d568:	8e de       	rcall	.-740    	; 0xd286 <xmit_datablock>
    d56a:	31 e0       	ldi	r19, 0x01	; 1
    d56c:	20 e0       	ldi	r18, 0x00	; 0
    d56e:	89 2b       	or	r24, r25
    d570:	09 f0       	breq	.+2      	; 0xd574 <mmc_disk_write+0x8e>
    d572:	30 e0       	ldi	r19, 0x00	; 0
    d574:	c3 2f       	mov	r28, r19
    d576:	d2 2f       	mov	r29, r18
    d578:	1d c0       	rjmp	.+58     	; 0xd5b4 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d57a:	86 70       	andi	r24, 0x06	; 6
    d57c:	29 f0       	breq	.+10     	; 0xd588 <mmc_disk_write+0xa2>
    d57e:	ae 01       	movw	r20, r28
    d580:	60 e0       	ldi	r22, 0x00	; 0
    d582:	70 e0       	ldi	r23, 0x00	; 0
    d584:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d586:	3c de       	rcall	.-904    	; 0xd200 <send_cmd>
    d588:	b7 01       	movw	r22, r14
    d58a:	a6 01       	movw	r20, r12
    d58c:	89 e1       	ldi	r24, 0x19	; 25
    d58e:	38 de       	rcall	.-912    	; 0xd200 <send_cmd>
    d590:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d592:	10 c0       	rjmp	.+32     	; 0xd5b4 <mmc_disk_write+0xce>
    d594:	6c ef       	ldi	r22, 0xFC	; 252
    d596:	c8 01       	movw	r24, r16
    d598:	76 de       	rcall	.-788    	; 0xd286 <xmit_datablock>
    d59a:	89 2b       	or	r24, r25
                buff += 512;
    d59c:	19 f0       	breq	.+6      	; 0xd5a4 <mmc_disk_write+0xbe>
            } while (--count);
    d59e:	1e 5f       	subi	r17, 0xFE	; 254
    d5a0:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d5a2:	c1 f7       	brne	.-16     	; 0xd594 <mmc_disk_write+0xae>
    d5a4:	6d ef       	ldi	r22, 0xFD	; 253
    d5a6:	80 e0       	ldi	r24, 0x00	; 0
    d5a8:	90 e0       	ldi	r25, 0x00	; 0
    d5aa:	6d de       	rcall	.-806    	; 0xd286 <xmit_datablock>
    d5ac:	89 2b       	or	r24, r25
                count = 1;
    d5ae:	11 f4       	brne	.+4      	; 0xd5b4 <mmc_disk_write+0xce>
    d5b0:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d5b2:	d0 e0       	ldi	r29, 0x00	; 0
    d5b4:	c8 dd       	rcall	.-1136   	; 0xd146 <deselect>
    GPIO_PIN_LOW(LED1);
    d5b6:	46 98       	cbi	0x08, 6	; 8
    d5b8:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d5ba:	81 e0       	ldi	r24, 0x01	; 1
    d5bc:	90 e0       	ldi	r25, 0x00	; 0
    d5be:	cd 2b       	or	r28, r29
    d5c0:	09 f4       	brne	.+2      	; 0xd5c4 <mmc_disk_write+0xde>
    d5c2:	80 e0       	ldi	r24, 0x00	; 0
}
    d5c4:	cd b7       	in	r28, 0x3d	; 61
    d5c6:	de b7       	in	r29, 0x3e	; 62
    d5c8:	e8 e0       	ldi	r30, 0x08	; 8
    d5ca:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000d5ce <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d5ce:	a0 e1       	ldi	r26, 0x10	; 16
    d5d0:	b0 e0       	ldi	r27, 0x00	; 0
    d5d2:	ed ee       	ldi	r30, 0xED	; 237
    d5d4:	fa e6       	ldi	r31, 0x6A	; 106
    d5d6:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d5da:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d5de:	90 fd       	sbrc	r25, 0
    d5e0:	31 c2       	rjmp	.+1122   	; 0xda44 <mmc_disk_ioctl+0x476>
    d5e2:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d5e4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d5e8:	91 ff       	sbrs	r25, 1
    d5ea:	02 c0       	rjmp	.+4      	; 0xd5f0 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d5ec:	ac dd       	rcall	.-1192   	; 0xd146 <deselect>
    d5ee:	2a c2       	rjmp	.+1108   	; 0xda44 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d5f0:	83 33       	cpi	r24, 0x33	; 51
    d5f2:	09 f4       	brne	.+2      	; 0xd5f6 <mmc_disk_ioctl+0x28>
    d5f4:	01 c1       	rjmp	.+514    	; 0xd7f8 <mmc_disk_ioctl+0x22a>
    d5f6:	a0 f4       	brcc	.+40     	; 0xd620 <mmc_disk_ioctl+0x52>
    d5f8:	83 30       	cpi	r24, 0x03	; 3
    d5fa:	09 f4       	brne	.+2      	; 0xd5fe <mmc_disk_ioctl+0x30>
    d5fc:	85 c0       	rjmp	.+266    	; 0xd708 <mmc_disk_ioctl+0x13a>
    d5fe:	28 f4       	brcc	.+10     	; 0xd60a <mmc_disk_ioctl+0x3c>
    d600:	88 23       	and	r24, r24
    d602:	11 f1       	breq	.+68     	; 0xd648 <mmc_disk_ioctl+0x7a>
    d604:	81 30       	cpi	r24, 0x01	; 1
    d606:	11 f1       	breq	.+68     	; 0xd64c <mmc_disk_ioctl+0x7e>
    d608:	1f c2       	rjmp	.+1086   	; 0xda48 <mmc_disk_ioctl+0x47a>
    d60a:	87 30       	cpi	r24, 0x07	; 7
    d60c:	09 f4       	brne	.+2      	; 0xd610 <mmc_disk_ioctl+0x42>
    d60e:	2a c1       	rjmp	.+596    	; 0xd864 <mmc_disk_ioctl+0x296>
    d610:	82 33       	cpi	r24, 0x32	; 50
    d612:	09 f0       	breq	.+2      	; 0xd616 <mmc_disk_ioctl+0x48>
    d614:	19 c2       	rjmp	.+1074   	; 0xda48 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d616:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <CardType>
    d61a:	fb 01       	movw	r30, r22
    d61c:	80 83       	st	Z, r24
    d61e:	28 c1       	rjmp	.+592    	; 0xd870 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d620:	86 33       	cpi	r24, 0x36	; 54
    d622:	09 f4       	brne	.+2      	; 0xd626 <mmc_disk_ioctl+0x58>
    d624:	0c c1       	rjmp	.+536    	; 0xd83e <mmc_disk_ioctl+0x270>
    d626:	38 f4       	brcc	.+14     	; 0xd636 <mmc_disk_ioctl+0x68>
    d628:	84 33       	cpi	r24, 0x34	; 52
    d62a:	09 f4       	brne	.+2      	; 0xd62e <mmc_disk_ioctl+0x60>
    d62c:	ea c0       	rjmp	.+468    	; 0xd802 <mmc_disk_ioctl+0x234>
    d62e:	85 33       	cpi	r24, 0x35	; 53
    d630:	09 f4       	brne	.+2      	; 0xd634 <mmc_disk_ioctl+0x66>
    d632:	f1 c0       	rjmp	.+482    	; 0xd816 <mmc_disk_ioctl+0x248>
    d634:	09 c2       	rjmp	.+1042   	; 0xda48 <mmc_disk_ioctl+0x47a>
    d636:	88 33       	cpi	r24, 0x38	; 56
    d638:	09 f4       	brne	.+2      	; 0xd63c <mmc_disk_ioctl+0x6e>
    d63a:	74 c1       	rjmp	.+744    	; 0xd924 <mmc_disk_ioctl+0x356>
    d63c:	08 f4       	brcc	.+2      	; 0xd640 <mmc_disk_ioctl+0x72>
    d63e:	1a c1       	rjmp	.+564    	; 0xd874 <mmc_disk_ioctl+0x2a6>
    d640:	89 33       	cpi	r24, 0x39	; 57
    d642:	09 f4       	brne	.+2      	; 0xd646 <mmc_disk_ioctl+0x78>
    d644:	bc c1       	rjmp	.+888    	; 0xd9be <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d646:	00 c2       	rjmp	.+1024   	; 0xda48 <mmc_disk_ioctl+0x47a>
    d648:	b9 dd       	rcall	.-1166   	; 0xd1bc <select>
    d64a:	06 c1       	rjmp	.+524    	; 0xd858 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d64c:	40 e0       	ldi	r20, 0x00	; 0
    d64e:	50 e0       	ldi	r21, 0x00	; 0
    d650:	ba 01       	movw	r22, r20
    d652:	89 e0       	ldi	r24, 0x09	; 9
    d654:	d5 dd       	rcall	.-1110   	; 0xd200 <send_cmd>
    d656:	81 11       	cpse	r24, r1
    d658:	f1 c1       	rjmp	.+994    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d65a:	60 e1       	ldi	r22, 0x10	; 16
    d65c:	70 e0       	ldi	r23, 0x00	; 0
    d65e:	ce 01       	movw	r24, r28
    d660:	01 96       	adiw	r24, 0x01	; 1
    d662:	77 dd       	rcall	.-1298   	; 0xd152 <rcvr_datablock>
    d664:	89 2b       	or	r24, r25
    d666:	09 f4       	brne	.+2      	; 0xd66a <mmc_disk_ioctl+0x9c>
    d668:	e9 c1       	rjmp	.+978    	; 0xda3c <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d66a:	99 81       	ldd	r25, Y+1	; 0x01
    d66c:	92 95       	swap	r25
    d66e:	96 95       	lsr	r25
    d670:	96 95       	lsr	r25
    d672:	93 70       	andi	r25, 0x03	; 3
    d674:	29 85       	ldd	r18, Y+9	; 0x09
    d676:	4a 85       	ldd	r20, Y+10	; 0x0a
    d678:	88 85       	ldd	r24, Y+8	; 0x08
    d67a:	91 30       	cpi	r25, 0x01	; 1
    d67c:	d9 f4       	brne	.+54     	; 0xd6b4 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d67e:	30 e0       	ldi	r19, 0x00	; 0
    d680:	32 2f       	mov	r19, r18
    d682:	22 27       	eor	r18, r18
    d684:	24 0f       	add	r18, r20
    d686:	31 1d       	adc	r19, r1
    d688:	8f 73       	andi	r24, 0x3F	; 63
    d68a:	90 e0       	ldi	r25, 0x00	; 0
    d68c:	a0 e0       	ldi	r26, 0x00	; 0
    d68e:	b0 e0       	ldi	r27, 0x00	; 0
    d690:	dc 01       	movw	r26, r24
    d692:	99 27       	eor	r25, r25
    d694:	88 27       	eor	r24, r24
    d696:	01 96       	adiw	r24, 0x01	; 1
    d698:	a1 1d       	adc	r26, r1
    d69a:	b1 1d       	adc	r27, r1
    d69c:	82 0f       	add	r24, r18
    d69e:	93 1f       	adc	r25, r19
    d6a0:	a1 1d       	adc	r26, r1
    d6a2:	b1 1d       	adc	r27, r1
    d6a4:	fa e0       	ldi	r31, 0x0A	; 10
    d6a6:	88 0f       	add	r24, r24
    d6a8:	99 1f       	adc	r25, r25
    d6aa:	aa 1f       	adc	r26, r26
    d6ac:	bb 1f       	adc	r27, r27
    d6ae:	fa 95       	dec	r31
    d6b0:	d1 f7       	brne	.-12     	; 0xd6a6 <mmc_disk_ioctl+0xd8>
    d6b2:	9b c0       	rjmp	.+310    	; 0xd7ea <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d6b4:	22 95       	swap	r18
    d6b6:	26 95       	lsr	r18
    d6b8:	26 95       	lsr	r18
    d6ba:	23 70       	andi	r18, 0x03	; 3
    d6bc:	f4 e0       	ldi	r31, 0x04	; 4
    d6be:	8f 9f       	mul	r24, r31
    d6c0:	c0 01       	movw	r24, r0
    d6c2:	11 24       	eor	r1, r1
    d6c4:	82 0f       	add	r24, r18
    d6c6:	91 1d       	adc	r25, r1
    d6c8:	01 96       	adiw	r24, 0x01	; 1
    d6ca:	2f 81       	ldd	r18, Y+7	; 0x07
    d6cc:	23 70       	andi	r18, 0x03	; 3
    d6ce:	30 e0       	ldi	r19, 0x00	; 0
    d6d0:	32 2f       	mov	r19, r18
    d6d2:	22 27       	eor	r18, r18
    d6d4:	33 0f       	add	r19, r19
    d6d6:	33 0f       	add	r19, r19
    d6d8:	82 0f       	add	r24, r18
    d6da:	93 1f       	adc	r25, r19
    d6dc:	a0 e0       	ldi	r26, 0x00	; 0
    d6de:	b0 e0       	ldi	r27, 0x00	; 0
    d6e0:	2e 81       	ldd	r18, Y+6	; 0x06
    d6e2:	32 2f       	mov	r19, r18
    d6e4:	3f 70       	andi	r19, 0x0F	; 15
    d6e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    d6e8:	22 1f       	adc	r18, r18
    d6ea:	22 27       	eor	r18, r18
    d6ec:	22 1f       	adc	r18, r18
    d6ee:	23 0f       	add	r18, r19
    d6f0:	43 70       	andi	r20, 0x03	; 3
    d6f2:	44 0f       	add	r20, r20
    d6f4:	42 0f       	add	r20, r18
    d6f6:	47 50       	subi	r20, 0x07	; 7
    d6f8:	04 c0       	rjmp	.+8      	; 0xd702 <mmc_disk_ioctl+0x134>
    d6fa:	88 0f       	add	r24, r24
    d6fc:	99 1f       	adc	r25, r25
    d6fe:	aa 1f       	adc	r26, r26
    d700:	bb 1f       	adc	r27, r27
    d702:	4a 95       	dec	r20
    d704:	d2 f7       	brpl	.-12     	; 0xd6fa <mmc_disk_ioctl+0x12c>
    d706:	71 c0       	rjmp	.+226    	; 0xd7ea <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d708:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d70c:	40 e0       	ldi	r20, 0x00	; 0
    d70e:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d710:	ba 01       	movw	r22, r20
    d712:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d714:	24 c0       	rjmp	.+72     	; 0xd75e <mmc_disk_ioctl+0x190>
    d716:	8d e8       	ldi	r24, 0x8D	; 141
    d718:	73 dd       	rcall	.-1306   	; 0xd200 <send_cmd>
    d71a:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d71c:	8f c1       	rjmp	.+798    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d71e:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d720:	10 dd       	rcall	.-1504   	; 0xd142 <xchg_spi>
    d722:	60 e1       	ldi	r22, 0x10	; 16
    d724:	70 e0       	ldi	r23, 0x00	; 0
    d726:	ce 01       	movw	r24, r28
    d728:	01 96       	adiw	r24, 0x01	; 1
    d72a:	13 dd       	rcall	.-1498   	; 0xd152 <rcvr_datablock>
    d72c:	89 2b       	or	r24, r25
    d72e:	09 f4       	brne	.+2      	; 0xd732 <mmc_disk_ioctl+0x164>
    d730:	85 c1       	rjmp	.+778    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d732:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d734:	f5 2e       	mov	r15, r21
    d736:	8f ef       	ldi	r24, 0xFF	; 255
    d738:	04 dd       	rcall	.-1528   	; 0xd142 <xchg_spi>
    d73a:	fa 94       	dec	r15
    d73c:	f1 10       	cpse	r15, r1
    d73e:	fb cf       	rjmp	.-10     	; 0xd736 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d740:	2b 85       	ldd	r18, Y+11	; 0x0b
    d742:	22 95       	swap	r18
    d744:	2f 70       	andi	r18, 0x0F	; 15
    d746:	80 e1       	ldi	r24, 0x10	; 16
    d748:	90 e0       	ldi	r25, 0x00	; 0
    d74a:	a0 e0       	ldi	r26, 0x00	; 0
    d74c:	b0 e0       	ldi	r27, 0x00	; 0
    d74e:	04 c0       	rjmp	.+8      	; 0xd758 <mmc_disk_ioctl+0x18a>
    d750:	88 0f       	add	r24, r24
    d752:	99 1f       	adc	r25, r25
    d754:	aa 1f       	adc	r26, r26
    d756:	bb 1f       	adc	r27, r27
    d758:	2a 95       	dec	r18
    d75a:	d2 f7       	brpl	.-12     	; 0xd750 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d75c:	46 c0       	rjmp	.+140    	; 0xd7ea <mmc_disk_ioctl+0x21c>
    d75e:	89 e0       	ldi	r24, 0x09	; 9
    d760:	4f dd       	rcall	.-1378   	; 0xd200 <send_cmd>
    d762:	81 11       	cpse	r24, r1
    d764:	6b c1       	rjmp	.+726    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d766:	60 e1       	ldi	r22, 0x10	; 16
    d768:	70 e0       	ldi	r23, 0x00	; 0
    d76a:	ce 01       	movw	r24, r28
    d76c:	01 96       	adiw	r24, 0x01	; 1
    d76e:	f1 dc       	rcall	.-1566   	; 0xd152 <rcvr_datablock>
    d770:	89 2b       	or	r24, r25
    d772:	09 f4       	brne	.+2      	; 0xd776 <mmc_disk_ioctl+0x1a8>
    d774:	63 c1       	rjmp	.+710    	; 0xda3c <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d776:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <CardType>
    d77a:	2b 85       	ldd	r18, Y+11	; 0x0b
    d77c:	8c 85       	ldd	r24, Y+12	; 0x0c
    d77e:	91 ff       	sbrs	r25, 1
    d780:	16 c0       	rjmp	.+44     	; 0xd7ae <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d782:	2f 73       	andi	r18, 0x3F	; 63
    d784:	88 1f       	adc	r24, r24
    d786:	88 27       	eor	r24, r24
    d788:	88 1f       	adc	r24, r24
    d78a:	90 e0       	ldi	r25, 0x00	; 0
    d78c:	01 96       	adiw	r24, 0x01	; 1
    d78e:	82 0f       	add	r24, r18
    d790:	91 1d       	adc	r25, r1
    d792:	82 0f       	add	r24, r18
    d794:	91 1d       	adc	r25, r1
    d796:	2e 85       	ldd	r18, Y+14	; 0x0e
    d798:	22 95       	swap	r18
    d79a:	26 95       	lsr	r18
    d79c:	26 95       	lsr	r18
    d79e:	23 70       	andi	r18, 0x03	; 3
    d7a0:	21 50       	subi	r18, 0x01	; 1
    d7a2:	02 c0       	rjmp	.+4      	; 0xd7a8 <mmc_disk_ioctl+0x1da>
    d7a4:	88 0f       	add	r24, r24
    d7a6:	99 1f       	adc	r25, r25
    d7a8:	2a 95       	dec	r18
    d7aa:	e2 f7       	brpl	.-8      	; 0xd7a4 <mmc_disk_ioctl+0x1d6>
    d7ac:	1c c0       	rjmp	.+56     	; 0xd7e6 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d7ae:	38 2f       	mov	r19, r24
    d7b0:	33 70       	andi	r19, 0x03	; 3
    d7b2:	82 95       	swap	r24
    d7b4:	86 95       	lsr	r24
    d7b6:	87 70       	andi	r24, 0x07	; 7
    d7b8:	90 e0       	ldi	r25, 0x00	; 0
    d7ba:	f8 e0       	ldi	r31, 0x08	; 8
    d7bc:	3f 9f       	mul	r19, r31
    d7be:	80 0d       	add	r24, r0
    d7c0:	91 1d       	adc	r25, r1
    d7c2:	11 24       	eor	r1, r1
    d7c4:	01 96       	adiw	r24, 0x01	; 1
    d7c6:	2c 77       	andi	r18, 0x7C	; 124
    d7c8:	30 e0       	ldi	r19, 0x00	; 0
    d7ca:	35 95       	asr	r19
    d7cc:	27 95       	ror	r18
    d7ce:	35 95       	asr	r19
    d7d0:	27 95       	ror	r18
    d7d2:	2f 5f       	subi	r18, 0xFF	; 255
    d7d4:	3f 4f       	sbci	r19, 0xFF	; 255
    d7d6:	82 9f       	mul	r24, r18
    d7d8:	a0 01       	movw	r20, r0
    d7da:	83 9f       	mul	r24, r19
    d7dc:	50 0d       	add	r21, r0
    d7de:	92 9f       	mul	r25, r18
    d7e0:	50 0d       	add	r21, r0
    d7e2:	11 24       	eor	r1, r1
    d7e4:	ca 01       	movw	r24, r20
    d7e6:	a0 e0       	ldi	r26, 0x00	; 0
    d7e8:	b0 e0       	ldi	r27, 0x00	; 0
    d7ea:	f8 01       	movw	r30, r16
    d7ec:	80 83       	st	Z, r24
    d7ee:	91 83       	std	Z+1, r25	; 0x01
    d7f0:	a2 83       	std	Z+2, r26	; 0x02
    d7f2:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d7f4:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d7f6:	23 c1       	rjmp	.+582    	; 0xda3e <mmc_disk_ioctl+0x470>
    d7f8:	40 e0       	ldi	r20, 0x00	; 0
    d7fa:	50 e0       	ldi	r21, 0x00	; 0
    d7fc:	ba 01       	movw	r22, r20
    d7fe:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d800:	04 c0       	rjmp	.+8      	; 0xd80a <mmc_disk_ioctl+0x23c>
    d802:	40 e0       	ldi	r20, 0x00	; 0
    d804:	50 e0       	ldi	r21, 0x00	; 0
    d806:	ba 01       	movw	r22, r20
    d808:	8a e0       	ldi	r24, 0x0A	; 10
    d80a:	fa dc       	rcall	.-1548   	; 0xd200 <send_cmd>
    d80c:	81 11       	cpse	r24, r1
    d80e:	16 c1       	rjmp	.+556    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d810:	60 e1       	ldi	r22, 0x10	; 16
    d812:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d814:	1f c0       	rjmp	.+62     	; 0xd854 <mmc_disk_ioctl+0x286>
    d816:	40 e0       	ldi	r20, 0x00	; 0
    d818:	50 e0       	ldi	r21, 0x00	; 0
    d81a:	ba 01       	movw	r22, r20
    d81c:	8a e3       	ldi	r24, 0x3A	; 58
    d81e:	f0 dc       	rcall	.-1568   	; 0xd200 <send_cmd>
    d820:	81 11       	cpse	r24, r1
    d822:	0c c1       	rjmp	.+536    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d824:	78 01       	movw	r14, r16
    d826:	f4 e0       	ldi	r31, 0x04	; 4
    d828:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d82a:	f1 1c       	adc	r15, r1
    d82c:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d82e:	83 d1       	rcall	.+774    	; 0xdb36 <mmc_spi_TXRX>
    d830:	f8 01       	movw	r30, r16
    d832:	81 93       	st	Z+, r24
    d834:	8f 01       	movw	r16, r30
    d836:	ee 15       	cp	r30, r14
    d838:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d83a:	c1 f7       	brne	.-16     	; 0xd82c <mmc_disk_ioctl+0x25e>
    d83c:	db cf       	rjmp	.-74     	; 0xd7f4 <mmc_disk_ioctl+0x226>
    d83e:	40 e0       	ldi	r20, 0x00	; 0
    d840:	50 e0       	ldi	r21, 0x00	; 0
    d842:	ba 01       	movw	r22, r20
    d844:	8d e8       	ldi	r24, 0x8D	; 141
    d846:	dc dc       	rcall	.-1608   	; 0xd200 <send_cmd>
            {
                xchg_spi(0xFF);
    d848:	81 11       	cpse	r24, r1
    d84a:	f8 c0       	rjmp	.+496    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d84c:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d84e:	79 dc       	rcall	.-1806   	; 0xd142 <xchg_spi>
    d850:	60 e4       	ldi	r22, 0x40	; 64
    d852:	70 e0       	ldi	r23, 0x00	; 0
    d854:	c8 01       	movw	r24, r16
    d856:	7d dc       	rcall	.-1798   	; 0xd152 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d858:	01 e0       	ldi	r16, 0x01	; 1
    d85a:	10 e0       	ldi	r17, 0x00	; 0
    d85c:	89 2b       	or	r24, r25
    d85e:	09 f4       	brne	.+2      	; 0xd862 <mmc_disk_ioctl+0x294>
    d860:	ef c0       	rjmp	.+478    	; 0xda40 <mmc_disk_ioctl+0x472>
    d862:	ea c0       	rjmp	.+468    	; 0xda38 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d864:	97 d1       	rcall	.+814    	; 0xdb94 <mmc_power_off>
    d866:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d86a:	81 60       	ori	r24, 0x01	; 1
    d86c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d870:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d872:	eb c0       	rjmp	.+470    	; 0xda4a <mmc_disk_ioctl+0x47c>
    d874:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d876:	43 81       	ldd	r20, Z+3	; 0x03
    d878:	54 81       	ldd	r21, Z+4	; 0x04
    d87a:	65 81       	ldd	r22, Z+5	; 0x05
    d87c:	76 81       	ldd	r23, Z+6	; 0x06
    d87e:	39 e0       	ldi	r19, 0x09	; 9
    d880:	44 0f       	add	r20, r20
    d882:	55 1f       	adc	r21, r21
    d884:	66 1f       	adc	r22, r22
    d886:	77 1f       	adc	r23, r23
    d888:	3a 95       	dec	r19
    d88a:	d1 f7       	brne	.-12     	; 0xd880 <mmc_disk_ioctl+0x2b2>
    d88c:	70 68       	ori	r23, 0x80	; 128
    d88e:	80 81       	ld	r24, Z
    d890:	90 e0       	ldi	r25, 0x00	; 0
    d892:	a0 e0       	ldi	r26, 0x00	; 0
    d894:	b0 e0       	ldi	r27, 0x00	; 0
    d896:	2c e1       	ldi	r18, 0x1C	; 28
    d898:	88 0f       	add	r24, r24
    d89a:	99 1f       	adc	r25, r25
    d89c:	aa 1f       	adc	r26, r26
    d89e:	bb 1f       	adc	r27, r27
    d8a0:	2a 95       	dec	r18
    d8a2:	d1 f7       	brne	.-12     	; 0xd898 <mmc_disk_ioctl+0x2ca>
    d8a4:	48 2b       	or	r20, r24
    d8a6:	59 2b       	or	r21, r25
    d8a8:	6a 2b       	or	r22, r26
    d8aa:	7b 2b       	or	r23, r27
    d8ac:	81 81       	ldd	r24, Z+1	; 0x01
    d8ae:	92 81       	ldd	r25, Z+2	; 0x02
    d8b0:	01 97       	sbiw	r24, 0x01	; 1
    d8b2:	91 70       	andi	r25, 0x01	; 1
    d8b4:	a0 e0       	ldi	r26, 0x00	; 0
    d8b6:	b0 e0       	ldi	r27, 0x00	; 0
    d8b8:	48 2b       	or	r20, r24
    d8ba:	59 2b       	or	r21, r25
    d8bc:	6a 2b       	or	r22, r26
    d8be:	7b 2b       	or	r23, r27
    d8c0:	80 e3       	ldi	r24, 0x30	; 48
    d8c2:	9e dc       	rcall	.-1732   	; 0xd200 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d8c4:	81 11       	cpse	r24, r1
    d8c6:	ba c0       	rjmp	.+372    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d8c8:	88 ee       	ldi	r24, 0xE8	; 232
    d8ca:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d8cc:	37 d1       	rcall	.+622    	; 0xdb3c <mmc_set_ms_timeout>
    d8ce:	8f ef       	ldi	r24, 0xFF	; 255
    d8d0:	32 d1       	rcall	.+612    	; 0xdb36 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d8d2:	8f 3f       	cpi	r24, 0xFF	; 255
    d8d4:	21 f4       	brne	.+8      	; 0xd8de <mmc_disk_ioctl+0x310>
    d8d6:	39 d1       	rcall	.+626    	; 0xdb4a <mmc_test_timeout>
    d8d8:	89 2b       	or	r24, r25
    d8da:	c9 f3       	breq	.-14     	; 0xd8ce <mmc_disk_ioctl+0x300>
    d8dc:	af c0       	rjmp	.+350    	; 0xda3c <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d8de:	8e 3f       	cpi	r24, 0xFE	; 254
    d8e0:	09 f0       	breq	.+2      	; 0xd8e4 <mmc_disk_ioctl+0x316>
    d8e2:	ac c0       	rjmp	.+344    	; 0xda3c <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d8e4:	f8 01       	movw	r30, r16
    d8e6:	e7 80       	ldd	r14, Z+7	; 0x07
    d8e8:	f0 84       	ldd	r15, Z+8	; 0x08
    d8ea:	c1 80       	ldd	r12, Z+1	; 0x01
    d8ec:	d2 80       	ldd	r13, Z+2	; 0x02
    d8ee:	ce 0c       	add	r12, r14
    d8f0:	df 1c       	adc	r13, r15
    d8f2:	ce 14       	cp	r12, r14
    d8f4:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d8f6:	31 f0       	breq	.+12     	; 0xd904 <mmc_disk_ioctl+0x336>
    d8f8:	8f ef       	ldi	r24, 0xFF	; 255
    d8fa:	1d d1       	rcall	.+570    	; 0xdb36 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d8fc:	f7 01       	movw	r30, r14
    d8fe:	81 93       	st	Z+, r24
    d900:	7f 01       	movw	r14, r30
    d902:	f7 cf       	rjmp	.-18     	; 0xd8f2 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d904:	f8 01       	movw	r30, r16
    d906:	81 81       	ldd	r24, Z+1	; 0x01
    d908:	92 81       	ldd	r25, Z+2	; 0x02
    d90a:	02 e0       	ldi	r16, 0x02	; 2
    d90c:	12 e0       	ldi	r17, 0x02	; 2
    d90e:	08 1b       	sub	r16, r24
    d910:	19 0b       	sbc	r17, r25
    d912:	01 15       	cp	r16, r1
    d914:	11 05       	cpc	r17, r1
    d916:	09 f4       	brne	.+2      	; 0xd91a <mmc_disk_ioctl+0x34c>
    d918:	6d cf       	rjmp	.-294    	; 0xd7f4 <mmc_disk_ioctl+0x226>
    d91a:	8f ef       	ldi	r24, 0xFF	; 255
    d91c:	12 dc       	rcall	.-2012   	; 0xd142 <xchg_spi>
    d91e:	01 50       	subi	r16, 0x01	; 1
    d920:	11 09       	sbc	r17, r1
    d922:	f7 cf       	rjmp	.-18     	; 0xd912 <mmc_disk_ioctl+0x344>
    d924:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d926:	43 81       	ldd	r20, Z+3	; 0x03
    d928:	54 81       	ldd	r21, Z+4	; 0x04
    d92a:	65 81       	ldd	r22, Z+5	; 0x05
    d92c:	76 81       	ldd	r23, Z+6	; 0x06
    d92e:	39 e0       	ldi	r19, 0x09	; 9
    d930:	44 0f       	add	r20, r20
    d932:	55 1f       	adc	r21, r21
    d934:	66 1f       	adc	r22, r22
    d936:	77 1f       	adc	r23, r23
    d938:	3a 95       	dec	r19
    d93a:	d1 f7       	brne	.-12     	; 0xd930 <mmc_disk_ioctl+0x362>
    d93c:	70 68       	ori	r23, 0x80	; 128
    d93e:	80 81       	ld	r24, Z
    d940:	90 e0       	ldi	r25, 0x00	; 0
    d942:	a0 e0       	ldi	r26, 0x00	; 0
    d944:	b0 e0       	ldi	r27, 0x00	; 0
    d946:	2c e1       	ldi	r18, 0x1C	; 28
    d948:	88 0f       	add	r24, r24
    d94a:	99 1f       	adc	r25, r25
    d94c:	aa 1f       	adc	r26, r26
    d94e:	bb 1f       	adc	r27, r27
    d950:	2a 95       	dec	r18
    d952:	d1 f7       	brne	.-12     	; 0xd948 <mmc_disk_ioctl+0x37a>
    d954:	48 2b       	or	r20, r24
    d956:	59 2b       	or	r21, r25
    d958:	6a 2b       	or	r22, r26
    d95a:	7b 2b       	or	r23, r27
    d95c:	81 81       	ldd	r24, Z+1	; 0x01
    d95e:	92 81       	ldd	r25, Z+2	; 0x02
    d960:	01 97       	sbiw	r24, 0x01	; 1
    d962:	91 70       	andi	r25, 0x01	; 1
    d964:	a0 e0       	ldi	r26, 0x00	; 0
    d966:	b0 e0       	ldi	r27, 0x00	; 0
    d968:	48 2b       	or	r20, r24
    d96a:	59 2b       	or	r21, r25
    d96c:	6a 2b       	or	r22, r26
    d96e:	7b 2b       	or	r23, r27
    d970:	81 e3       	ldi	r24, 0x31	; 49
    d972:	46 dc       	rcall	.-1908   	; 0xd200 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d974:	81 11       	cpse	r24, r1
    d976:	62 c0       	rjmp	.+196    	; 0xda3c <mmc_disk_ioctl+0x46e>
    d978:	8f ef       	ldi	r24, 0xFF	; 255
    d97a:	e3 db       	rcall	.-2106   	; 0xd142 <xchg_spi>
    d97c:	8e ef       	ldi	r24, 0xFE	; 254
    d97e:	e1 db       	rcall	.-2110   	; 0xd142 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    d980:	f8 01       	movw	r30, r16
    d982:	e7 80       	ldd	r14, Z+7	; 0x07
    d984:	f0 84       	ldd	r15, Z+8	; 0x08
    d986:	c1 80       	ldd	r12, Z+1	; 0x01
    d988:	d2 80       	ldd	r13, Z+2	; 0x02
    d98a:	ce 0c       	add	r12, r14
    d98c:	df 1c       	adc	r13, r15
    d98e:	ec 14       	cp	r14, r12
    d990:	fd 04       	cpc	r15, r13
    d992:	29 f0       	breq	.+10     	; 0xd99e <mmc_disk_ioctl+0x3d0>
    d994:	f7 01       	movw	r30, r14
    d996:	81 91       	ld	r24, Z+
    d998:	7f 01       	movw	r14, r30
    d99a:	d3 db       	rcall	.-2138   	; 0xd142 <xchg_spi>
    d99c:	f8 cf       	rjmp	.-16     	; 0xd98e <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d99e:	f8 01       	movw	r30, r16
    d9a0:	81 81       	ldd	r24, Z+1	; 0x01
    d9a2:	92 81       	ldd	r25, Z+2	; 0x02
    d9a4:	02 e0       	ldi	r16, 0x02	; 2
    d9a6:	12 e0       	ldi	r17, 0x02	; 2
    d9a8:	08 1b       	sub	r16, r24
    d9aa:	19 0b       	sbc	r17, r25
    d9ac:	8f ef       	ldi	r24, 0xFF	; 255
    d9ae:	01 15       	cp	r16, r1
    d9b0:	11 05       	cpc	r17, r1
    d9b2:	09 f4       	brne	.+2      	; 0xd9b6 <mmc_disk_ioctl+0x3e8>
    d9b4:	3b c0       	rjmp	.+118    	; 0xda2c <mmc_disk_ioctl+0x45e>
    d9b6:	c5 db       	rcall	.-2166   	; 0xd142 <xchg_spi>
    d9b8:	01 50       	subi	r16, 0x01	; 1
    d9ba:	11 09       	sbc	r17, r1
    d9bc:	f7 cf       	rjmp	.-18     	; 0xd9ac <mmc_disk_ioctl+0x3de>
    d9be:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    d9c0:	43 81       	ldd	r20, Z+3	; 0x03
    d9c2:	54 81       	ldd	r21, Z+4	; 0x04
    d9c4:	65 81       	ldd	r22, Z+5	; 0x05
    d9c6:	76 81       	ldd	r23, Z+6	; 0x06
    d9c8:	89 e0       	ldi	r24, 0x09	; 9
    d9ca:	44 0f       	add	r20, r20
    d9cc:	55 1f       	adc	r21, r21
    d9ce:	66 1f       	adc	r22, r22
    d9d0:	77 1f       	adc	r23, r23
    d9d2:	8a 95       	dec	r24
    d9d4:	d1 f7       	brne	.-12     	; 0xd9ca <mmc_disk_ioctl+0x3fc>
    d9d6:	74 68       	ori	r23, 0x84	; 132
    d9d8:	80 81       	ld	r24, Z
    d9da:	90 e0       	ldi	r25, 0x00	; 0
    d9dc:	a0 e0       	ldi	r26, 0x00	; 0
    d9de:	b0 e0       	ldi	r27, 0x00	; 0
    d9e0:	2c e1       	ldi	r18, 0x1C	; 28
    d9e2:	88 0f       	add	r24, r24
    d9e4:	99 1f       	adc	r25, r25
    d9e6:	aa 1f       	adc	r26, r26
    d9e8:	bb 1f       	adc	r27, r27
    d9ea:	2a 95       	dec	r18
    d9ec:	d1 f7       	brne	.-12     	; 0xd9e2 <mmc_disk_ioctl+0x414>
    d9ee:	48 2b       	or	r20, r24
    d9f0:	59 2b       	or	r21, r25
    d9f2:	6a 2b       	or	r22, r26
    d9f4:	7b 2b       	or	r23, r27
    d9f6:	82 81       	ldd	r24, Z+2	; 0x02
    d9f8:	90 e0       	ldi	r25, 0x00	; 0
    d9fa:	a0 e0       	ldi	r26, 0x00	; 0
    d9fc:	b0 e0       	ldi	r27, 0x00	; 0
    d9fe:	48 2b       	or	r20, r24
    da00:	59 2b       	or	r21, r25
    da02:	6a 2b       	or	r22, r26
    da04:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    da06:	81 e3       	ldi	r24, 0x31	; 49
    da08:	fb db       	rcall	.-2058   	; 0xd200 <send_cmd>
    da0a:	81 11       	cpse	r24, r1
    da0c:	17 c0       	rjmp	.+46     	; 0xda3c <mmc_disk_ioctl+0x46e>
    da0e:	8f ef       	ldi	r24, 0xFF	; 255
    da10:	98 db       	rcall	.-2256   	; 0xd142 <xchg_spi>
                xchg_spi(sdi->ndata);
    da12:	8e ef       	ldi	r24, 0xFE	; 254
    da14:	96 db       	rcall	.-2260   	; 0xd142 <xchg_spi>
    da16:	f8 01       	movw	r30, r16
    da18:	81 81       	ldd	r24, Z+1	; 0x01
    da1a:	93 db       	rcall	.-2266   	; 0xd142 <xchg_spi>
    da1c:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    da1e:	12 e0       	ldi	r17, 0x02	; 2
    da20:	8f ef       	ldi	r24, 0xFF	; 255
    da22:	8f db       	rcall	.-2274   	; 0xd142 <xchg_spi>
    da24:	01 50       	subi	r16, 0x01	; 1
    da26:	11 09       	sbc	r17, r1
    da28:	d9 f7       	brne	.-10     	; 0xda20 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    da2a:	8f ef       	ldi	r24, 0xFF	; 255
    da2c:	84 d0       	rcall	.+264    	; 0xdb36 <mmc_spi_TXRX>
    da2e:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    da30:	01 e0       	ldi	r16, 0x01	; 1
    da32:	10 e0       	ldi	r17, 0x00	; 0
    da34:	85 30       	cpi	r24, 0x05	; 5
    da36:	21 f4       	brne	.+8      	; 0xda40 <mmc_disk_ioctl+0x472>
    da38:	00 e0       	ldi	r16, 0x00	; 0
    da3a:	02 c0       	rjmp	.+4      	; 0xda40 <mmc_disk_ioctl+0x472>
    da3c:	01 e0       	ldi	r16, 0x01	; 1
    da3e:	10 e0       	ldi	r17, 0x00	; 0
    da40:	82 db       	rcall	.-2300   	; 0xd146 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    da42:	04 c0       	rjmp	.+8      	; 0xda4c <mmc_disk_ioctl+0x47e>
    da44:	03 e0       	ldi	r16, 0x03	; 3
            break;
    da46:	01 c0       	rjmp	.+2      	; 0xda4a <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    da48:	04 e0       	ldi	r16, 0x04	; 4
    da4a:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    da4c:	c8 01       	movw	r24, r16
    da4e:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    da50:	e8 e0       	ldi	r30, 0x08	; 8
    da52:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000da56 <mmc_disk_timerproc>:
    da56:	cf 93       	push	r28
    da58:	80 91 1d 18 	lds	r24, 0x181D	; 0x80181d <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    da5c:	88 23       	and	r24, r24
    da5e:	19 f0       	breq	.+6      	; 0xda66 <mmc_disk_timerproc+0x10>
    da60:	81 50       	subi	r24, 0x01	; 1
    da62:	80 93 1d 18 	sts	0x181D, r24	; 0x80181d <Timer1>
    n = Timer2;
    da66:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <Timer2>
    if (n) Timer2 = --n;
    da6a:	88 23       	and	r24, r24
    da6c:	19 f0       	breq	.+6      	; 0xda74 <mmc_disk_timerproc+0x1e>
    da6e:	81 50       	subi	r24, 0x01	; 1
    da70:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <Timer2>

    s = Stat;
    da74:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    da78:	8e d0       	rcall	.+284    	; 0xdb96 <mmc_ins_status>
    da7a:	89 2b       	or	r24, r25
    da7c:	11 f0       	breq	.+4      	; 0xda82 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    da7e:	cd 7f       	andi	r28, 0xFD	; 253
    da80:	04 c0       	rjmp	.+8      	; 0xda8a <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    da82:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    da84:	81 e0       	ldi	r24, 0x01	; 1
    da86:	0e 94 a7 24 	call	0x494e	; 0x494e <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    da8a:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    da8e:	cf 91       	pop	r28
    da90:	08 95       	ret

0000da92 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    da92:	00 d0       	rcall	.+0      	; 0xda94 <mmc_install_timer+0x2>
    da94:	1f 92       	push	r1
    da96:	10 92 27 18 	sts	0x1827, r1	; 0x801827 <_mmc_timeout+0x1>
    da9a:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_mmc_timeout>
    da9e:	61 e0       	ldi	r22, 0x01	; 1
    daa0:	70 e0       	ldi	r23, 0x00	; 0
    daa2:	88 ed       	ldi	r24, 0xD8	; 216
    daa4:	9d e6       	ldi	r25, 0x6D	; 109
    daa6:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <set_timers>
    daaa:	01 96       	adiw	r24, 0x01	; 1
    daac:	51 f4       	brne	.+20     	; 0xdac2 <mmc_install_timer+0x30>
    daae:	87 e2       	ldi	r24, 0x27	; 39
    dab0:	98 e0       	ldi	r25, 0x08	; 8
    dab2:	a0 e0       	ldi	r26, 0x00	; 0
    dab4:	ed b7       	in	r30, 0x3d	; 61
    dab6:	fe b7       	in	r31, 0x3e	; 62
    dab8:	81 83       	std	Z+1, r24	; 0x01
    daba:	92 83       	std	Z+2, r25	; 0x02
    dabc:	a3 83       	std	Z+3, r26	; 0x03
    dabe:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    dac2:	0f 90       	pop	r0
    dac4:	0f 90       	pop	r0
    dac6:	0f 90       	pop	r0
    dac8:	08 95       	ret

0000daca <mmc_spi_begin>:
    daca:	60 91 22 18 	lds	r22, 0x1822	; 0x801822 <_mmc_clock>
    dace:	70 91 23 18 	lds	r23, 0x1823	; 0x801823 <_mmc_clock+0x1>
    dad2:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_mmc_clock+0x2>
    dad6:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_mmc_clock+0x3>
    dada:	4b e0       	ldi	r20, 0x0B	; 11
    dadc:	50 e0       	ldi	r21, 0x00	; 0
    dade:	0c 94 4e 24 	jmp	0x489c	; 0x489c <spi_begin>
    dae2:	08 95       	ret

0000dae4 <mmc_spi_end>:
    dae4:	8b e0       	ldi	r24, 0x0B	; 11
    dae6:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <spi_end>
    daea:	08 95       	ret

0000daec <mmc_slow>:
    daec:	80 e2       	ldi	r24, 0x20	; 32
    daee:	91 ea       	ldi	r25, 0xA1	; 161
    daf0:	a7 e0       	ldi	r26, 0x07	; 7
    daf2:	b0 e0       	ldi	r27, 0x00	; 0
    daf4:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <_mmc_clock>
    daf8:	90 93 23 18 	sts	0x1823, r25	; 0x801823 <_mmc_clock+0x1>
    dafc:	a0 93 24 18 	sts	0x1824, r26	; 0x801824 <_mmc_clock+0x2>
    db00:	b0 93 25 18 	sts	0x1825, r27	; 0x801825 <_mmc_clock+0x3>
    db04:	08 95       	ret

0000db06 <mmc_spi_init>:
    db06:	8b e0       	ldi	r24, 0x0B	; 11
    db08:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <chip_select_init>
    db0c:	ef cf       	rjmp	.-34     	; 0xdaec <mmc_slow>
    db0e:	08 95       	ret

0000db10 <mmc_fast>:
    db10:	80 ea       	ldi	r24, 0xA0	; 160
    db12:	95 e2       	ldi	r25, 0x25	; 37
    db14:	a6 e2       	ldi	r26, 0x26	; 38
    db16:	b0 e0       	ldi	r27, 0x00	; 0
    db18:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <_mmc_clock>
    db1c:	90 93 23 18 	sts	0x1823, r25	; 0x801823 <_mmc_clock+0x1>
    db20:	a0 93 24 18 	sts	0x1824, r26	; 0x801824 <_mmc_clock+0x2>
    db24:	b0 93 25 18 	sts	0x1825, r27	; 0x801825 <_mmc_clock+0x3>
    db28:	08 95       	ret

0000db2a <mmc_spi_TX_buffer>:
    db2a:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <spi_TX_buffer>
    db2e:	08 95       	ret

0000db30 <mmc_spi_RX_buffer>:
    db30:	0c 94 1c 24 	jmp	0x4838	; 0x4838 <spi_RX_buffer>
    db34:	08 95       	ret

0000db36 <mmc_spi_TXRX>:
    db36:	0c 94 96 24 	jmp	0x492c	; 0x492c <spi_TXRX>
    db3a:	08 95       	ret

0000db3c <mmc_set_ms_timeout>:
    db3c:	f8 94       	cli
    db3e:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <_mmc_timeout+0x1>
    db42:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_mmc_timeout>
    db46:	78 94       	sei
    db48:	08 95       	ret

0000db4a <mmc_test_timeout>:
    db4a:	00 d0       	rcall	.+0      	; 0xdb4c <mmc_test_timeout+0x2>
    db4c:	1f 92       	push	r1
    db4e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    db52:	81 fd       	sbrc	r24, 1
    db54:	15 c0       	rjmp	.+42     	; 0xdb80 <mmc_test_timeout+0x36>
    db56:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <_mmc_timeout>
    db5a:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <_mmc_timeout+0x1>
    db5e:	89 2b       	or	r24, r25
    db60:	91 f4       	brne	.+36     	; 0xdb86 <mmc_test_timeout+0x3c>
    db62:	8a e1       	ldi	r24, 0x1A	; 26
    db64:	98 e0       	ldi	r25, 0x08	; 8
    db66:	a0 e0       	ldi	r26, 0x00	; 0
    db68:	ed b7       	in	r30, 0x3d	; 61
    db6a:	fe b7       	in	r31, 0x3e	; 62
    db6c:	81 83       	std	Z+1, r24	; 0x01
    db6e:	92 83       	std	Z+2, r25	; 0x02
    db70:	a3 83       	std	Z+3, r26	; 0x03
    db72:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    db76:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    db7a:	83 60       	ori	r24, 0x03	; 3
    db7c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    db80:	81 e0       	ldi	r24, 0x01	; 1
    db82:	90 e0       	ldi	r25, 0x00	; 0
    db84:	02 c0       	rjmp	.+4      	; 0xdb8a <mmc_test_timeout+0x40>
    db86:	80 e0       	ldi	r24, 0x00	; 0
    db88:	90 e0       	ldi	r25, 0x00	; 0
    db8a:	0f 90       	pop	r0
    db8c:	0f 90       	pop	r0
    db8e:	0f 90       	pop	r0
    db90:	08 95       	ret

0000db92 <mmc_power_on>:
    db92:	08 95       	ret

0000db94 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    db94:	08 95       	ret

0000db96 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    db96:	3f 98       	cbi	0x07, 7	; 7
    db98:	86 b1       	in	r24, 0x06	; 6
    db9a:	08 2e       	mov	r0, r24
    db9c:	00 0c       	add	r0, r0
    db9e:	99 0b       	sbc	r25, r25
    dba0:	80 95       	com	r24
    dba2:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dba4:	89 2f       	mov	r24, r25
    dba6:	88 1f       	adc	r24, r24
    dba8:	88 27       	eor	r24, r24
    dbaa:	88 1f       	adc	r24, r24
    dbac:	90 e0       	ldi	r25, 0x00	; 0
    dbae:	08 95       	ret

0000dbb0 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    dbb0:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <_mmc_timeout>
    dbb4:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <_mmc_timeout+0x1>
    dbb8:	00 97       	sbiw	r24, 0x00	; 0
    dbba:	29 f0       	breq	.+10     	; 0xdbc6 <mmc_task+0x16>
        _mmc_timeout--;
    dbbc:	01 97       	sbiw	r24, 0x01	; 1
    dbbe:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <_mmc_timeout+0x1>
    dbc2:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dbc6:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_mmc_pre>
    dbca:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_mmc_pre+0x1>
    dbce:	8a 30       	cpi	r24, 0x0A	; 10
    dbd0:	91 05       	cpc	r25, r1
    dbd2:	30 f4       	brcc	.+12     	; 0xdbe0 <mmc_task+0x30>
    dbd4:	01 96       	adiw	r24, 0x01	; 1
    dbd6:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_pre+0x1>
    dbda:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_pre>
    dbde:	08 95       	ret
        return;

    _mmc_pre = 0;
    dbe0:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <_mmc_pre+0x1>
    dbe4:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <_mmc_pre>

	if(!mmc_ins_status())
    dbe8:	d6 df       	rcall	.-84     	; 0xdb96 <mmc_ins_status>
    dbea:	89 2b       	or	r24, r25
    dbec:	19 f4       	brne	.+6      	; 0xdbf4 <mmc_task+0x44>
		set_error(1);
    dbee:	81 e0       	ldi	r24, 0x01	; 1
    dbf0:	0e 94 a7 24 	call	0x494e	; 0x494e <set_error>

    mmc_disk_timerproc();
    dbf4:	30 cf       	rjmp	.-416    	; 0xda56 <mmc_disk_timerproc>
    dbf6:	08 95       	ret

0000dbf8 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dbf8:	ab e0       	ldi	r26, 0x0B	; 11
    dbfa:	b0 e0       	ldi	r27, 0x00	; 0
    dbfc:	e2 e0       	ldi	r30, 0x02	; 2
    dbfe:	fe e6       	ldi	r31, 0x6E	; 110
    dc00:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
    dc04:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dc06:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dc0a:	0e 94 ac 24 	call	0x4958	; 0x4958 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dc0e:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dc10:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dc12:	79 df       	rcall	.-270    	; 0xdb06 <mmc_spi_init>

    if( verbose)
    dc14:	e1 14       	cp	r14, r1
    dc16:	f1 04       	cpc	r15, r1
    dc18:	51 f0       	breq	.+20     	; 0xdc2e <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dc1a:	8a e0       	ldi	r24, 0x0A	; 10
    dc1c:	98 e0       	ldi	r25, 0x08	; 8
    dc1e:	a0 e0       	ldi	r26, 0x00	; 0
    dc20:	ed b7       	in	r30, 0x3d	; 61
    dc22:	fe b7       	in	r31, 0x3e	; 62
    dc24:	81 83       	std	Z+1, r24	; 0x01
    dc26:	92 83       	std	Z+2, r25	; 0x02
    dc28:	a3 83       	std	Z+3, r26	; 0x03
    dc2a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    dc2e:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <mmc_init_flag>
    dc32:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <mmc_init_flag+0x1>
    dc36:	89 2b       	or	r24, r25
        mmc_install_timer();
    dc38:	09 f4       	brne	.+2      	; 0xdc3c <mmc_init+0x44>

	if(!mmc_ins_status())
    dc3a:	2b df       	rcall	.-426    	; 0xda92 <mmc_install_timer>
    dc3c:	ac df       	rcall	.-168    	; 0xdb96 <mmc_ins_status>
    dc3e:	89 2b       	or	r24, r25
    dc40:	61 f4       	brne	.+24     	; 0xdc5a <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dc42:	8a ee       	ldi	r24, 0xEA	; 234
    dc44:	97 e0       	ldi	r25, 0x07	; 7
    dc46:	a0 e0       	ldi	r26, 0x00	; 0
    dc48:	ed b7       	in	r30, 0x3d	; 61
    dc4a:	fe b7       	in	r31, 0x3e	; 62
    dc4c:	81 83       	std	Z+1, r24	; 0x01
    dc4e:	92 83       	std	Z+2, r25	; 0x02
    dc50:	a3 83       	std	Z+3, r26	; 0x03
    dc52:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		return(RES_NOTRDY);	
    dc56:	83 e0       	ldi	r24, 0x03	; 3
    dc58:	8b c0       	rjmp	.+278    	; 0xdd70 <mmc_init+0x178>
	}


    if( verbose)
    dc5a:	e1 14       	cp	r14, r1
    dc5c:	f1 04       	cpc	r15, r1
    dc5e:	11 f1       	breq	.+68     	; 0xdca4 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    dc60:	87 ed       	ldi	r24, 0xD7	; 215
    dc62:	97 e0       	ldi	r25, 0x07	; 7
    dc64:	a0 e0       	ldi	r26, 0x00	; 0
    dc66:	ed b7       	in	r30, 0x3d	; 61
    dc68:	fe b7       	in	r31, 0x3e	; 62
    dc6a:	81 83       	std	Z+1, r24	; 0x01
    dc6c:	92 83       	std	Z+2, r25	; 0x02
    dc6e:	a3 83       	std	Z+3, r26	; 0x03
    dc70:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    dc74:	8b ec       	ldi	r24, 0xCB	; 203
    dc76:	97 e0       	ldi	r25, 0x07	; 7
    dc78:	a0 e0       	ldi	r26, 0x00	; 0
    dc7a:	ed b7       	in	r30, 0x3d	; 61
    dc7c:	fe b7       	in	r31, 0x3e	; 62
    dc7e:	81 83       	std	Z+1, r24	; 0x01
    dc80:	92 83       	std	Z+2, r25	; 0x02
    dc82:	a3 83       	std	Z+3, r26	; 0x03
    dc84:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dc88:	85 eb       	ldi	r24, 0xB5	; 181
    dc8a:	91 e0       	ldi	r25, 0x01	; 1
    dc8c:	ed b7       	in	r30, 0x3d	; 61
    dc8e:	fe b7       	in	r31, 0x3e	; 62
    dc90:	95 83       	std	Z+5, r25	; 0x05
    dc92:	84 83       	std	Z+4, r24	; 0x04
    dc94:	8a eb       	ldi	r24, 0xBA	; 186
    dc96:	97 e0       	ldi	r25, 0x07	; 7
    dc98:	a0 e0       	ldi	r26, 0x00	; 0
    dc9a:	81 83       	std	Z+1, r24	; 0x01
    dc9c:	92 83       	std	Z+2, r25	; 0x02
    dc9e:	a3 83       	std	Z+3, r26	; 0x03
    dca0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dca4:	80 e0       	ldi	r24, 0x00	; 0
    dca6:	1d da       	rcall	.-3014   	; 0xd0e2 <disk_initialize>
    dca8:	08 2f       	mov	r16, r24
    dcaa:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dcac:	01 15       	cp	r16, r1
    dcae:	11 05       	cpc	r17, r1
        put_rc(rc);
    dcb0:	19 f0       	breq	.+6      	; 0xdcb8 <mmc_init+0xc0>
    dcb2:	c8 01       	movw	r24, r16
    dcb4:	e4 d0       	rcall	.+456    	; 0xde7e <put_rc>
    dcb6:	0e c0       	rjmp	.+28     	; 0xdcd4 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dcb8:	40 e0       	ldi	r20, 0x00	; 0
    dcba:	66 ea       	ldi	r22, 0xA6	; 166
    dcbc:	78 e0       	ldi	r23, 0x08	; 8
    dcbe:	86 e7       	ldi	r24, 0x76	; 118
    dcc0:	9a e1       	ldi	r25, 0x1A	; 26
    dcc2:	0e 94 29 58 	call	0xb052	; 0xb052 <f_mount>
    dcc6:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dcc8:	89 2b       	or	r24, r25
    dcca:	21 f4       	brne	.+8      	; 0xdcd4 <mmc_init+0xdc>
    dccc:	e1 14       	cp	r14, r1
    dcce:	f1 04       	cpc	r15, r1
    dcd0:	09 f4       	brne	.+2      	; 0xdcd4 <mmc_init+0xdc>
        put_rc( rc );
    dcd2:	40 c0       	rjmp	.+128    	; 0xdd54 <mmc_init+0x15c>
    dcd4:	c8 01       	movw	r24, r16
    dcd6:	d3 d0       	rcall	.+422    	; 0xde7e <put_rc>

    if (verbose )
    dcd8:	e1 14       	cp	r14, r1
    dcda:	f1 04       	cpc	r15, r1
    dcdc:	d9 f1       	breq	.+118    	; 0xdd54 <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    dcde:	18 86       	std	Y+8, r1	; 0x08
    dce0:	19 86       	std	Y+9, r1	; 0x09
    dce2:	1a 86       	std	Y+10, r1	; 0x0a
    dce4:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    dce6:	01 15       	cp	r16, r1
    dce8:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    dcea:	51 f5       	brne	.+84     	; 0xdd40 <mmc_init+0x148>
    dcec:	ae 01       	movw	r20, r28
    dcee:	48 5f       	subi	r20, 0xF8	; 248
    dcf0:	5f 4f       	sbci	r21, 0xFF	; 255
    dcf2:	63 e0       	ldi	r22, 0x03	; 3
    dcf4:	80 e0       	ldi	r24, 0x00	; 0
    dcf6:	1b da       	rcall	.-3018   	; 0xd12e <disk_ioctl>
            if( rc != RES_OK)
    dcf8:	8c 01       	movw	r16, r24
    dcfa:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dcfc:	61 f0       	breq	.+24     	; 0xdd16 <mmc_init+0x11e>
    dcfe:	bf d0       	rcall	.+382    	; 0xde7e <put_rc>
                printf("MMC Block Size - read failed\n");
    dd00:	8c e9       	ldi	r24, 0x9C	; 156
    dd02:	97 e0       	ldi	r25, 0x07	; 7
    dd04:	a0 e0       	ldi	r26, 0x00	; 0
    dd06:	ed b7       	in	r30, 0x3d	; 61
    dd08:	fe b7       	in	r31, 0x3e	; 62
    dd0a:	81 83       	std	Z+1, r24	; 0x01
    dd0c:	92 83       	std	Z+2, r25	; 0x02
    dd0e:	a3 83       	std	Z+3, r26	; 0x03
    dd10:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    dd14:	15 c0       	rjmp	.+42     	; 0xdd40 <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dd16:	88 85       	ldd	r24, Y+8	; 0x08
    dd18:	99 85       	ldd	r25, Y+9	; 0x09
    dd1a:	aa 85       	ldd	r26, Y+10	; 0x0a
    dd1c:	bb 85       	ldd	r27, Y+11	; 0x0b
    dd1e:	ed b7       	in	r30, 0x3d	; 61
    dd20:	fe b7       	in	r31, 0x3e	; 62
    dd22:	84 83       	std	Z+4, r24	; 0x04
    dd24:	95 83       	std	Z+5, r25	; 0x05
    dd26:	a6 83       	std	Z+6, r26	; 0x06
    dd28:	b7 83       	std	Z+7, r27	; 0x07
    dd2a:	87 e8       	ldi	r24, 0x87	; 135
    dd2c:	97 e0       	ldi	r25, 0x07	; 7
    dd2e:	a0 e0       	ldi	r26, 0x00	; 0
    dd30:	81 83       	std	Z+1, r24	; 0x01
    dd32:	92 83       	std	Z+2, r25	; 0x02
    dd34:	a3 83       	std	Z+3, r26	; 0x03
    dd36:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    dd3a:	86 ea       	ldi	r24, 0xA6	; 166
    dd3c:	98 e0       	ldi	r25, 0x08	; 8
    dd3e:	33 d1       	rcall	.+614    	; 0xdfa6 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dd40:	89 e7       	ldi	r24, 0x79	; 121
    dd42:	97 e0       	ldi	r25, 0x07	; 7
    dd44:	a0 e0       	ldi	r26, 0x00	; 0
    dd46:	ed b7       	in	r30, 0x3d	; 61
    dd48:	fe b7       	in	r31, 0x3e	; 62
    dd4a:	81 83       	std	Z+1, r24	; 0x01
    dd4c:	92 83       	std	Z+2, r25	; 0x02
    dd4e:	a3 83       	std	Z+3, r26	; 0x03
    dd50:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }
    mmc_init_flag = 1;
    dd54:	81 e0       	ldi	r24, 0x01	; 1
    dd56:	90 e0       	ldi	r25, 0x00	; 0
    dd58:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <mmc_init_flag+0x1>
    dd5c:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <mmc_init_flag>

	if(rc != RES_OK)
    dd60:	01 15       	cp	r16, r1
    dd62:	11 05       	cpc	r17, r1
    dd64:	21 f0       	breq	.+8      	; 0xdd6e <mmc_init+0x176>
		set_error(1);
    dd66:	0e 94 a7 24 	call	0x494e	; 0x494e <set_error>
    dd6a:	c8 01       	movw	r24, r16
    dd6c:	02 c0       	rjmp	.+4      	; 0xdd72 <mmc_init+0x17a>
    dd6e:	80 e0       	ldi	r24, 0x00	; 0
    dd70:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dd72:	2b 96       	adiw	r28, 0x0b	; 11
    dd74:	e6 e0       	ldi	r30, 0x06	; 6
    dd76:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0000dd7a <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dd7a:	80 e0       	ldi	r24, 0x00	; 0
    dd7c:	90 e0       	ldi	r25, 0x00	; 0
    dd7e:	08 95       	ret

0000dd80 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dd80:	0f 93       	push	r16
    dd82:	1f 93       	push	r17
    dd84:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dd86:	46 81       	ldd	r20, Z+6	; 0x06
    dd88:	57 81       	ldd	r21, Z+7	; 0x07
    dd8a:	05 2e       	mov	r0, r21
    dd8c:	00 0c       	add	r0, r0
    dd8e:	66 0b       	sbc	r22, r22
    dd90:	77 0b       	sbc	r23, r23
    dd92:	ba 01       	movw	r22, r20
    dd94:	55 27       	eor	r21, r21
    dd96:	44 27       	eor	r20, r20
    dd98:	84 81       	ldd	r24, Z+4	; 0x04
    dd9a:	95 81       	ldd	r25, Z+5	; 0x05
    dd9c:	09 2e       	mov	r0, r25
    dd9e:	00 0c       	add	r0, r0
    dda0:	aa 0b       	sbc	r26, r26
    dda2:	bb 0b       	sbc	r27, r27
    dda4:	2b e0       	ldi	r18, 0x0B	; 11
    dda6:	88 0f       	add	r24, r24
    dda8:	99 1f       	adc	r25, r25
    ddaa:	aa 1f       	adc	r26, r26
    ddac:	bb 1f       	adc	r27, r27
    ddae:	2a 95       	dec	r18
    ddb0:	d1 f7       	brne	.-12     	; 0xdda6 <tm_to_fat+0x26>
    ddb2:	48 2b       	or	r20, r24
    ddb4:	59 2b       	or	r21, r25
    ddb6:	6a 2b       	or	r22, r26
    ddb8:	7b 2b       	or	r23, r27
    ddba:	82 81       	ldd	r24, Z+2	; 0x02
    ddbc:	93 81       	ldd	r25, Z+3	; 0x03
    ddbe:	09 2e       	mov	r0, r25
    ddc0:	00 0c       	add	r0, r0
    ddc2:	aa 0b       	sbc	r26, r26
    ddc4:	bb 0b       	sbc	r27, r27
    ddc6:	35 e0       	ldi	r19, 0x05	; 5
    ddc8:	88 0f       	add	r24, r24
    ddca:	99 1f       	adc	r25, r25
    ddcc:	aa 1f       	adc	r26, r26
    ddce:	bb 1f       	adc	r27, r27
    ddd0:	3a 95       	dec	r19
    ddd2:	d1 f7       	brne	.-12     	; 0xddc8 <tm_to_fat+0x48>
    ddd4:	48 2b       	or	r20, r24
    ddd6:	59 2b       	or	r21, r25
    ddd8:	6a 2b       	or	r22, r26
    ddda:	7b 2b       	or	r23, r27
    dddc:	80 81       	ld	r24, Z
    ddde:	91 81       	ldd	r25, Z+1	; 0x01
    dde0:	09 2e       	mov	r0, r25
    dde2:	00 0c       	add	r0, r0
    dde4:	aa 0b       	sbc	r26, r26
    dde6:	bb 0b       	sbc	r27, r27
    dde8:	b6 95       	lsr	r27
    ddea:	a7 95       	ror	r26
    ddec:	97 95       	ror	r25
    ddee:	87 95       	ror	r24
    ddf0:	84 2b       	or	r24, r20
    ddf2:	95 2b       	or	r25, r21
    ddf4:	a6 2b       	or	r26, r22
    ddf6:	b7 2b       	or	r27, r23
    ddf8:	02 85       	ldd	r16, Z+10	; 0x0a
    ddfa:	13 85       	ldd	r17, Z+11	; 0x0b
    ddfc:	00 55       	subi	r16, 0x50	; 80
    ddfe:	11 09       	sbc	r17, r1
    de00:	01 2e       	mov	r0, r17
    de02:	00 0c       	add	r0, r0
    de04:	22 0b       	sbc	r18, r18
    de06:	33 0b       	sbc	r19, r19
    de08:	49 e1       	ldi	r20, 0x19	; 25
    de0a:	00 0f       	add	r16, r16
    de0c:	11 1f       	adc	r17, r17
    de0e:	22 1f       	adc	r18, r18
    de10:	33 1f       	adc	r19, r19
    de12:	4a 95       	dec	r20
    de14:	d1 f7       	brne	.-12     	; 0xde0a <tm_to_fat+0x8a>
    de16:	ac 01       	movw	r20, r24
    de18:	bd 01       	movw	r22, r26
    de1a:	40 2b       	or	r20, r16
    de1c:	51 2b       	or	r21, r17
    de1e:	62 2b       	or	r22, r18
    de20:	73 2b       	or	r23, r19
    de22:	80 85       	ldd	r24, Z+8	; 0x08
    de24:	91 85       	ldd	r25, Z+9	; 0x09
    de26:	09 2e       	mov	r0, r25
    de28:	00 0c       	add	r0, r0
    de2a:	aa 0b       	sbc	r26, r26
    de2c:	bb 0b       	sbc	r27, r27
    de2e:	01 96       	adiw	r24, 0x01	; 1
    de30:	a1 1d       	adc	r26, r1
    de32:	b1 1d       	adc	r27, r1
    de34:	e5 e1       	ldi	r30, 0x15	; 21
    de36:	88 0f       	add	r24, r24
    de38:	99 1f       	adc	r25, r25
    de3a:	aa 1f       	adc	r26, r26
    de3c:	bb 1f       	adc	r27, r27
    de3e:	ea 95       	dec	r30
    de40:	d1 f7       	brne	.-12     	; 0xde36 <tm_to_fat+0xb6>
    de42:	8a 01       	movw	r16, r20
    de44:	9b 01       	movw	r18, r22
    de46:	08 2b       	or	r16, r24
    de48:	19 2b       	or	r17, r25
    de4a:	2a 2b       	or	r18, r26
    de4c:	3b 2b       	or	r19, r27
    de4e:	c9 01       	movw	r24, r18
    de50:	b8 01       	movw	r22, r16
}
    de52:	1f 91       	pop	r17
    de54:	0f 91       	pop	r16
    de56:	08 95       	ret

0000de58 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    de58:	a4 e0       	ldi	r26, 0x04	; 4
    de5a:	b0 e0       	ldi	r27, 0x00	; 0
    de5c:	e2 e3       	ldi	r30, 0x32	; 50
    de5e:	ff e6       	ldi	r31, 0x6F	; 111
    de60:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    de64:	ce 01       	movw	r24, r28
    de66:	01 96       	adiw	r24, 0x01	; 1
    de68:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <time>
    return( tm_to_fat(localtime(&t)));
    de6c:	ce 01       	movw	r24, r28
    de6e:	01 96       	adiw	r24, 0x01	; 1
    de70:	0e 94 48 36 	call	0x6c90	; 0x6c90 <localtime>
    de74:	85 df       	rcall	.-246    	; 0xdd80 <tm_to_fat>
}
    de76:	24 96       	adiw	r28, 0x04	; 4
    de78:	e2 e0       	ldi	r30, 0x02	; 2
    de7a:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000de7e <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    de7e:	00 d0       	rcall	.+0      	; 0xde80 <put_rc+0x2>
    de80:	00 d0       	rcall	.+0      	; 0xde82 <put_rc+0x4>
    de82:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    de84:	ed b7       	in	r30, 0x3d	; 61
    de86:	fe b7       	in	r31, 0x3e	; 62
    de88:	95 83       	std	Z+5, r25	; 0x05
    de8a:	84 83       	std	Z+4, r24	; 0x04
    de8c:	87 e3       	ldi	r24, 0x37	; 55
    de8e:	9a e0       	ldi	r25, 0x0A	; 10
    de90:	a0 e0       	ldi	r26, 0x00	; 0
    de92:	81 83       	std	Z+1, r24	; 0x01
    de94:	92 83       	std	Z+2, r25	; 0x02
    de96:	a3 83       	std	Z+3, r26	; 0x03
    de98:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
}
    de9c:	0f 90       	pop	r0
    de9e:	0f 90       	pop	r0
    dea0:	0f 90       	pop	r0
    dea2:	0f 90       	pop	r0
    dea4:	0f 90       	pop	r0
    dea6:	08 95       	ret

0000dea8 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    dea8:	a4 e4       	ldi	r26, 0x44	; 68
    deaa:	b1 e0       	ldi	r27, 0x01	; 1
    deac:	ea e5       	ldi	r30, 0x5A	; 90
    deae:	ff e6       	ldi	r31, 0x6F	; 111
    deb0:	0c 94 63 e2 	jmp	0x1c4c6	; 0x1c4c6 <__prologue_saves__+0x16>
    deb4:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    deb6:	bc 01       	movw	r22, r24
    deb8:	ce 01       	movw	r24, r28
    deba:	89 5e       	subi	r24, 0xE9	; 233
    debc:	9e 4f       	sbci	r25, 0xFE	; 254
    debe:	0e 94 e5 61 	call	0xc3ca	; 0xc3ca <f_opendir>
    if (fr == FR_OK)
    dec2:	00 97       	sbiw	r24, 0x00	; 0
    dec4:	09 f0       	breq	.+2      	; 0xdec8 <fatfs_scan_files+0x20>
    dec6:	5b c0       	rjmp	.+182    	; 0xdf7e <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dec8:	8f e2       	ldi	r24, 0x2F	; 47
    deca:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    decc:	be 01       	movw	r22, r28
    dece:	6f 5f       	subi	r22, 0xFF	; 255
    ded0:	7f 4f       	sbci	r23, 0xFF	; 255
    ded2:	ce 01       	movw	r24, r28
    ded4:	89 5e       	subi	r24, 0xE9	; 233
    ded6:	9e 4f       	sbci	r25, 0xFE	; 254
    ded8:	0e 94 6b 62 	call	0xc4d6	; 0xc4d6 <f_readdir>
    dedc:	00 97       	sbiw	r24, 0x00	; 0
    dede:	09 f0       	breq	.+2      	; 0xdee2 <fatfs_scan_files+0x3a>
    dee0:	4e c0       	rjmp	.+156    	; 0xdf7e <fatfs_scan_files+0xd6>
    dee2:	2f 89       	ldd	r18, Y+23	; 0x17
    dee4:	22 23       	and	r18, r18
    dee6:	09 f4       	brne	.+2      	; 0xdeea <fatfs_scan_files+0x42>
    dee8:	4a c0       	rjmp	.+148    	; 0xdf7e <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    deea:	89 85       	ldd	r24, Y+9	; 0x09
    deec:	84 ff       	sbrs	r24, 4
    deee:	25 c0       	rjmp	.+74     	; 0xdf3a <fatfs_scan_files+0x92>
            {
                AccDirs++;
    def0:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <AccDirs>
    def4:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <AccDirs+0x1>
    def8:	01 96       	adiw	r24, 0x01	; 1
    defa:	90 93 b0 1c 	sts	0x1CB0, r25	; 0x801cb0 <AccDirs+0x1>
    defe:	80 93 af 1c 	sts	0x1CAF, r24	; 0x801caf <AccDirs>
                i = strlen(path);
    df02:	f8 01       	movw	r30, r16
    df04:	01 90       	ld	r0, Z+
    df06:	00 20       	and	r0, r0
    df08:	e9 f7       	brne	.-6      	; 0xdf04 <fatfs_scan_files+0x5c>
    df0a:	31 97       	sbiw	r30, 0x01	; 1
    df0c:	e0 1b       	sub	r30, r16
    df0e:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    df10:	78 01       	movw	r14, r16
    df12:	ee 0e       	add	r14, r30
    df14:	ff 1e       	adc	r15, r31
    df16:	d7 01       	movw	r26, r14
    df18:	dc 92       	st	X, r13
    df1a:	cf 01       	movw	r24, r30
    df1c:	01 96       	adiw	r24, 0x01	; 1
    df1e:	be 01       	movw	r22, r28
    df20:	69 5e       	subi	r22, 0xE9	; 233
    df22:	7f 4f       	sbci	r23, 0xFF	; 255
    df24:	80 0f       	add	r24, r16
    df26:	91 1f       	adc	r25, r17
    df28:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
                fr = fatfs_scan_files(path);
    df2c:	c8 01       	movw	r24, r16
    df2e:	bc df       	rcall	.-136    	; 0xdea8 <fatfs_scan_files>
                path[i] = 0;
    df30:	f7 01       	movw	r30, r14
    df32:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    df34:	00 97       	sbiw	r24, 0x00	; 0
    df36:	51 f2       	breq	.-108    	; 0xdecc <fatfs_scan_files+0x24>
    df38:	22 c0       	rjmp	.+68     	; 0xdf7e <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    df3a:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <AccFiles>
    df3e:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <AccFiles+0x1>
    df42:	01 96       	adiw	r24, 0x01	; 1
    df44:	90 93 b2 1c 	sts	0x1CB2, r25	; 0x801cb2 <AccFiles+0x1>
    df48:	80 93 b1 1c 	sts	0x1CB1, r24	; 0x801cb1 <AccFiles>
                AccSize += info.fsize;
    df4c:	40 91 ab 1c 	lds	r20, 0x1CAB	; 0x801cab <AccSize>
    df50:	50 91 ac 1c 	lds	r21, 0x1CAC	; 0x801cac <AccSize+0x1>
    df54:	60 91 ad 1c 	lds	r22, 0x1CAD	; 0x801cad <AccSize+0x2>
    df58:	70 91 ae 1c 	lds	r23, 0x1CAE	; 0x801cae <AccSize+0x3>
    df5c:	89 81       	ldd	r24, Y+1	; 0x01
    df5e:	9a 81       	ldd	r25, Y+2	; 0x02
    df60:	ab 81       	ldd	r26, Y+3	; 0x03
    df62:	bc 81       	ldd	r27, Y+4	; 0x04
    df64:	84 0f       	add	r24, r20
    df66:	95 1f       	adc	r25, r21
    df68:	a6 1f       	adc	r26, r22
    df6a:	b7 1f       	adc	r27, r23
    df6c:	80 93 ab 1c 	sts	0x1CAB, r24	; 0x801cab <AccSize>
    df70:	90 93 ac 1c 	sts	0x1CAC, r25	; 0x801cac <AccSize+0x1>
    df74:	a0 93 ad 1c 	sts	0x1CAD, r26	; 0x801cad <AccSize+0x2>
    df78:	b0 93 ae 1c 	sts	0x1CAE, r27	; 0x801cae <AccSize+0x3>
    df7c:	a7 cf       	rjmp	.-178    	; 0xdecc <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    df7e:	cc 5b       	subi	r28, 0xBC	; 188
    df80:	de 4f       	sbci	r29, 0xFE	; 254
    df82:	e7 e0       	ldi	r30, 0x07	; 7
    df84:	0c 94 7f e2 	jmp	0x1c4fe	; 0x1c4fe <__epilogue_restores__+0x16>

0000df88 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    df88:	01 97       	sbiw	r24, 0x01	; 1
    df8a:	84 30       	cpi	r24, 0x04	; 4
    df8c:	91 05       	cpc	r25, r1
    df8e:	40 f4       	brcc	.+16     	; 0xdfa0 <fatfs_fstype+0x18>
    df90:	88 0f       	add	r24, r24
    df92:	99 1f       	adc	r25, r25
    df94:	fc 01       	movw	r30, r24
    df96:	e6 53       	subi	r30, 0x36	; 54
    df98:	f7 4f       	sbci	r31, 0xF7	; 247
    df9a:	80 81       	ld	r24, Z
    df9c:	91 81       	ldd	r25, Z+1	; 0x01
    df9e:	08 95       	ret
    char *ptr;
    switch(type)
    dfa0:	88 ea       	ldi	r24, 0xA8	; 168
    dfa2:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    dfa4:	08 95       	ret

0000dfa6 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    dfa6:	a7 e3       	ldi	r26, 0x37	; 55
    dfa8:	b0 e0       	ldi	r27, 0x00	; 0
    dfaa:	e9 ed       	ldi	r30, 0xD9	; 217
    dfac:	ff e6       	ldi	r31, 0x6F	; 111
    dfae:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    dfb2:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    dfb4:	fc 01       	movw	r30, r24
    dfb6:	21 91       	ld	r18, Z+
    dfb8:	cf 01       	movw	r24, r30
    dfba:	20 32       	cpi	r18, 0x20	; 32
    dfbc:	d1 f3       	breq	.-12     	; 0xdfb2 <fatfs_status+0xc>
    dfbe:	29 30       	cpi	r18, 0x09	; 9
    dfc0:	c1 f3       	breq	.-16     	; 0xdfb2 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    dfc2:	ed b7       	in	r30, 0x3d	; 61
    dfc4:	fe b7       	in	r31, 0x3e	; 62
    dfc6:	e4 82       	std	Z+4, r14	; 0x04
    dfc8:	f5 82       	std	Z+5, r15	; 0x05
    dfca:	86 e2       	ldi	r24, 0x26	; 38
    dfcc:	9a e0       	ldi	r25, 0x0A	; 10
    dfce:	a0 e0       	ldi	r26, 0x00	; 0
    dfd0:	81 83       	std	Z+1, r24	; 0x01
    dfd2:	92 83       	std	Z+2, r25	; 0x02
    dfd4:	a3 83       	std	Z+3, r26	; 0x03
    dfd6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    dfda:	ae 01       	movw	r20, r28
    dfdc:	4a 5c       	subi	r20, 0xCA	; 202
    dfde:	5f 4f       	sbci	r21, 0xFF	; 255
    dfe0:	be 01       	movw	r22, r28
    dfe2:	6e 5c       	subi	r22, 0xCE	; 206
    dfe4:	7f 4f       	sbci	r23, 0xFF	; 255
    dfe6:	c7 01       	movw	r24, r14
    dfe8:	0e 94 ed 62 	call	0xc5da	; 0xc5da <f_getfree>
    if (res)
    dfec:	00 97       	sbiw	r24, 0x00	; 0
    dfee:	09 f0       	breq	.+2      	; 0xdff2 <fatfs_status+0x4c>
    dff0:	f8 c0       	rjmp	.+496    	; 0xe1e2 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    dff2:	ee a9       	ldd	r30, Y+54	; 0x36
    dff4:	ff a9       	ldd	r31, Y+55	; 0x37
    dff6:	80 81       	ld	r24, Z
    dff8:	90 e0       	ldi	r25, 0x00	; 0
    dffa:	c6 df       	rcall	.-116    	; 0xdf88 <fatfs_fstype>
    dffc:	ed b7       	in	r30, 0x3d	; 61
    dffe:	fe b7       	in	r31, 0x3e	; 62
    e000:	95 83       	std	Z+5, r25	; 0x05
    e002:	84 83       	std	Z+4, r24	; 0x04
    e004:	88 e0       	ldi	r24, 0x08	; 8
    e006:	9a e0       	ldi	r25, 0x0A	; 10
    e008:	a0 e0       	ldi	r26, 0x00	; 0
    e00a:	81 83       	std	Z+1, r24	; 0x01
    e00c:	92 83       	std	Z+2, r25	; 0x02
    e00e:	a3 83       	std	Z+3, r26	; 0x03
    e010:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e014:	ee a9       	ldd	r30, Y+54	; 0x36
    e016:	ff a9       	ldd	r31, Y+55	; 0x37
    e018:	81 85       	ldd	r24, Z+9	; 0x09
    e01a:	92 85       	ldd	r25, Z+10	; 0x0a
    e01c:	a0 e0       	ldi	r26, 0x00	; 0
    e01e:	b0 e0       	ldi	r27, 0x00	; 0
    e020:	39 e0       	ldi	r19, 0x09	; 9
    e022:	88 0f       	add	r24, r24
    e024:	99 1f       	adc	r25, r25
    e026:	aa 1f       	adc	r26, r26
    e028:	bb 1f       	adc	r27, r27
    e02a:	3a 95       	dec	r19
    e02c:	d1 f7       	brne	.-12     	; 0xe022 <fatfs_status+0x7c>
    e02e:	ed b7       	in	r30, 0x3d	; 61
    e030:	fe b7       	in	r31, 0x3e	; 62
    e032:	84 83       	std	Z+4, r24	; 0x04
    e034:	95 83       	std	Z+5, r25	; 0x05
    e036:	a6 83       	std	Z+6, r26	; 0x06
    e038:	b7 83       	std	Z+7, r27	; 0x07
    e03a:	89 ee       	ldi	r24, 0xE9	; 233
    e03c:	99 e0       	ldi	r25, 0x09	; 9
    e03e:	a0 e0       	ldi	r26, 0x00	; 0
    e040:	81 83       	std	Z+1, r24	; 0x01
    e042:	92 83       	std	Z+2, r25	; 0x02
    e044:	a3 83       	std	Z+3, r26	; 0x03
    e046:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e04a:	ee a9       	ldd	r30, Y+54	; 0x36
    e04c:	ff a9       	ldd	r31, Y+55	; 0x37
    e04e:	82 81       	ldd	r24, Z+2	; 0x02
    e050:	90 e0       	ldi	r25, 0x00	; 0
    e052:	ed b7       	in	r30, 0x3d	; 61
    e054:	fe b7       	in	r31, 0x3e	; 62
    e056:	95 83       	std	Z+5, r25	; 0x05
    e058:	84 83       	std	Z+4, r24	; 0x04
    e05a:	8b ec       	ldi	r24, 0xCB	; 203
    e05c:	99 e0       	ldi	r25, 0x09	; 9
    e05e:	a0 e0       	ldi	r26, 0x00	; 0
    e060:	81 83       	std	Z+1, r24	; 0x01
    e062:	92 83       	std	Z+2, r25	; 0x02
    e064:	a3 83       	std	Z+3, r26	; 0x03
    e066:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e06a:	ee a9       	ldd	r30, Y+54	; 0x36
    e06c:	ff a9       	ldd	r31, Y+55	; 0x37
    e06e:	87 81       	ldd	r24, Z+7	; 0x07
    e070:	90 85       	ldd	r25, Z+8	; 0x08
    e072:	ed b7       	in	r30, 0x3d	; 61
    e074:	fe b7       	in	r31, 0x3e	; 62
    e076:	95 83       	std	Z+5, r25	; 0x05
    e078:	84 83       	std	Z+4, r24	; 0x04
    e07a:	8d ea       	ldi	r24, 0xAD	; 173
    e07c:	99 e0       	ldi	r25, 0x09	; 9
    e07e:	a0 e0       	ldi	r26, 0x00	; 0
    e080:	81 83       	std	Z+1, r24	; 0x01
    e082:	92 83       	std	Z+2, r25	; 0x02
    e084:	a3 83       	std	Z+3, r26	; 0x03
    e086:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e08a:	ee a9       	ldd	r30, Y+54	; 0x36
    e08c:	ff a9       	ldd	r31, Y+55	; 0x37
    e08e:	85 8d       	ldd	r24, Z+29	; 0x1d
    e090:	96 8d       	ldd	r25, Z+30	; 0x1e
    e092:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e094:	b0 a1       	ldd	r27, Z+32	; 0x20
    e096:	ed b7       	in	r30, 0x3d	; 61
    e098:	fe b7       	in	r31, 0x3e	; 62
    e09a:	84 83       	std	Z+4, r24	; 0x04
    e09c:	95 83       	std	Z+5, r25	; 0x05
    e09e:	a6 83       	std	Z+6, r26	; 0x06
    e0a0:	b7 83       	std	Z+7, r27	; 0x07
    e0a2:	8e e8       	ldi	r24, 0x8E	; 142
    e0a4:	99 e0       	ldi	r25, 0x09	; 9
    e0a6:	a0 e0       	ldi	r26, 0x00	; 0
    e0a8:	81 83       	std	Z+1, r24	; 0x01
    e0aa:	92 83       	std	Z+2, r25	; 0x02
    e0ac:	a3 83       	std	Z+3, r26	; 0x03
    e0ae:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e0b2:	ee a9       	ldd	r30, Y+54	; 0x36
    e0b4:	ff a9       	ldd	r31, Y+55	; 0x37
    e0b6:	81 8d       	ldd	r24, Z+25	; 0x19
    e0b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    e0ba:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e0bc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e0be:	02 97       	sbiw	r24, 0x02	; 2
    e0c0:	a1 09       	sbc	r26, r1
    e0c2:	b1 09       	sbc	r27, r1
    e0c4:	ed b7       	in	r30, 0x3d	; 61
    e0c6:	fe b7       	in	r31, 0x3e	; 62
    e0c8:	84 83       	std	Z+4, r24	; 0x04
    e0ca:	95 83       	std	Z+5, r25	; 0x05
    e0cc:	a6 83       	std	Z+6, r26	; 0x06
    e0ce:	b7 83       	std	Z+7, r27	; 0x07
    e0d0:	8f e6       	ldi	r24, 0x6F	; 111
    e0d2:	99 e0       	ldi	r25, 0x09	; 9
    e0d4:	a0 e0       	ldi	r26, 0x00	; 0
    e0d6:	81 83       	std	Z+1, r24	; 0x01
    e0d8:	92 83       	std	Z+2, r25	; 0x02
    e0da:	a3 83       	std	Z+3, r26	; 0x03
    e0dc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e0e0:	ee a9       	ldd	r30, Y+54	; 0x36
    e0e2:	ff a9       	ldd	r31, Y+55	; 0x37
    e0e4:	85 a1       	ldd	r24, Z+37	; 0x25
    e0e6:	96 a1       	ldd	r25, Z+38	; 0x26
    e0e8:	a7 a1       	ldd	r26, Z+39	; 0x27
    e0ea:	b0 a5       	ldd	r27, Z+40	; 0x28
    e0ec:	ed b7       	in	r30, 0x3d	; 61
    e0ee:	fe b7       	in	r31, 0x3e	; 62
    e0f0:	84 83       	std	Z+4, r24	; 0x04
    e0f2:	95 83       	std	Z+5, r25	; 0x05
    e0f4:	a6 83       	std	Z+6, r26	; 0x06
    e0f6:	b7 83       	std	Z+7, r27	; 0x07
    e0f8:	80 e5       	ldi	r24, 0x50	; 80
    e0fa:	99 e0       	ldi	r25, 0x09	; 9
    e0fc:	a0 e0       	ldi	r26, 0x00	; 0
    e0fe:	81 83       	std	Z+1, r24	; 0x01
    e100:	92 83       	std	Z+2, r25	; 0x02
    e102:	a3 83       	std	Z+3, r26	; 0x03
    e104:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e108:	ee a9       	ldd	r30, Y+54	; 0x36
    e10a:	ff a9       	ldd	r31, Y+55	; 0x37
    e10c:	81 a5       	ldd	r24, Z+41	; 0x29
    e10e:	92 a5       	ldd	r25, Z+42	; 0x2a
    e110:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e112:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e114:	ed b7       	in	r30, 0x3d	; 61
    e116:	fe b7       	in	r31, 0x3e	; 62
    e118:	84 83       	std	Z+4, r24	; 0x04
    e11a:	95 83       	std	Z+5, r25	; 0x05
    e11c:	a6 83       	std	Z+6, r26	; 0x06
    e11e:	b7 83       	std	Z+7, r27	; 0x07
    e120:	81 e3       	ldi	r24, 0x31	; 49
    e122:	99 e0       	ldi	r25, 0x09	; 9
    e124:	a0 e0       	ldi	r26, 0x00	; 0
    e126:	81 83       	std	Z+1, r24	; 0x01
    e128:	92 83       	std	Z+2, r25	; 0x02
    e12a:	a3 83       	std	Z+3, r26	; 0x03
    e12c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e130:	ee a9       	ldd	r30, Y+54	; 0x36
    e132:	ff a9       	ldd	r31, Y+55	; 0x37
    e134:	85 a5       	ldd	r24, Z+45	; 0x2d
    e136:	96 a5       	ldd	r25, Z+46	; 0x2e
    e138:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e13a:	b0 a9       	ldd	r27, Z+48	; 0x30
    e13c:	ed b7       	in	r30, 0x3d	; 61
    e13e:	fe b7       	in	r31, 0x3e	; 62
    e140:	84 83       	std	Z+4, r24	; 0x04
    e142:	95 83       	std	Z+5, r25	; 0x05
    e144:	a6 83       	std	Z+6, r26	; 0x06
    e146:	b7 83       	std	Z+7, r27	; 0x07
    e148:	82 e1       	ldi	r24, 0x12	; 18
    e14a:	99 e0       	ldi	r25, 0x09	; 9
    e14c:	a0 e0       	ldi	r26, 0x00	; 0
    e14e:	81 83       	std	Z+1, r24	; 0x01
    e150:	92 83       	std	Z+2, r25	; 0x02
    e152:	a3 83       	std	Z+3, r26	; 0x03
    e154:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e158:	ae 01       	movw	r20, r28
    e15a:	42 5d       	subi	r20, 0xD2	; 210
    e15c:	5f 4f       	sbci	r21, 0xFF	; 255
    e15e:	be 01       	movw	r22, r28
    e160:	6c 5e       	subi	r22, 0xEC	; 236
    e162:	7f 4f       	sbci	r23, 0xFF	; 255
    e164:	c7 01       	movw	r24, r14
    e166:	0e 94 1f 67 	call	0xce3e	; 0xce3e <f_getlabel>
    if (res)
    e16a:	00 97       	sbiw	r24, 0x00	; 0
    e16c:	d1 f5       	brne	.+116    	; 0xe1e2 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e16e:	8c 89       	ldd	r24, Y+20	; 0x14
    e170:	81 11       	cpse	r24, r1
    e172:	03 c0       	rjmp	.+6      	; 0xe17a <fatfs_status+0x1d4>
    e174:	80 eb       	ldi	r24, 0xB0	; 176
    e176:	98 e0       	ldi	r25, 0x08	; 8
    e178:	02 c0       	rjmp	.+4      	; 0xe17e <fatfs_status+0x1d8>
    e17a:	ce 01       	movw	r24, r28
    e17c:	44 96       	adiw	r24, 0x14	; 20
    e17e:	ed b7       	in	r30, 0x3d	; 61
    e180:	fe b7       	in	r31, 0x3e	; 62
    e182:	95 83       	std	Z+5, r25	; 0x05
    e184:	84 83       	std	Z+4, r24	; 0x04
    e186:	84 ef       	ldi	r24, 0xF4	; 244
    e188:	98 e0       	ldi	r25, 0x08	; 8
    e18a:	a0 e0       	ldi	r26, 0x00	; 0
    e18c:	81 83       	std	Z+1, r24	; 0x01
    e18e:	92 83       	std	Z+2, r25	; 0x02
    e190:	a3 83       	std	Z+3, r26	; 0x03
    e192:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e196:	8e a5       	ldd	r24, Y+46	; 0x2e
    e198:	9f a5       	ldd	r25, Y+47	; 0x2f
    e19a:	a8 a9       	ldd	r26, Y+48	; 0x30
    e19c:	b9 a9       	ldd	r27, Y+49	; 0x31
    e19e:	ed b7       	in	r30, 0x3d	; 61
    e1a0:	fe b7       	in	r31, 0x3e	; 62
    e1a2:	97 83       	std	Z+7, r25	; 0x07
    e1a4:	86 83       	std	Z+6, r24	; 0x06
    e1a6:	b5 83       	std	Z+5, r27	; 0x05
    e1a8:	a4 83       	std	Z+4, r26	; 0x04
    e1aa:	8f ec       	ldi	r24, 0xCF	; 207
    e1ac:	98 e0       	ldi	r25, 0x08	; 8
    e1ae:	a0 e0       	ldi	r26, 0x00	; 0
    e1b0:	81 83       	std	Z+1, r24	; 0x01
    e1b2:	92 83       	std	Z+2, r25	; 0x02
    e1b4:	a3 83       	std	Z+3, r26	; 0x03
    e1b6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e1ba:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <AccDirs+0x1>
    e1be:	10 92 af 1c 	sts	0x1CAF, r1	; 0x801caf <AccDirs>
    e1c2:	10 92 b2 1c 	sts	0x1CB2, r1	; 0x801cb2 <AccFiles+0x1>
    e1c6:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <AccFiles>
    e1ca:	10 92 ab 1c 	sts	0x1CAB, r1	; 0x801cab <AccSize>
    e1ce:	10 92 ac 1c 	sts	0x1CAC, r1	; 0x801cac <AccSize+0x1>
    e1d2:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <AccSize+0x2>
    e1d6:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e1da:	c7 01       	movw	r24, r14
    e1dc:	65 de       	rcall	.-822    	; 0xdea8 <fatfs_scan_files>
    if (res)
    e1de:	00 97       	sbiw	r24, 0x00	; 0
    {
        put_rc(res);
    e1e0:	11 f0       	breq	.+4      	; 0xe1e6 <fatfs_status+0x240>
    e1e2:	4d de       	rcall	.-870    	; 0xde7e <put_rc>
        return;
    e1e4:	56 c0       	rjmp	.+172    	; 0xe292 <fatfs_status+0x2ec>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e1e6:	0e a9       	ldd	r16, Y+54	; 0x36
    e1e8:	1f a9       	ldd	r17, Y+55	; 0x37
    e1ea:	f8 01       	movw	r30, r16
    e1ec:	c1 84       	ldd	r12, Z+9	; 0x09
    e1ee:	d2 84       	ldd	r13, Z+10	; 0x0a
    e1f0:	e1 2c       	mov	r14, r1
    e1f2:	f1 2c       	mov	r15, r1
    e1f4:	6a a9       	ldd	r22, Y+50	; 0x32
    e1f6:	7b a9       	ldd	r23, Y+51	; 0x33
    e1f8:	8c a9       	ldd	r24, Y+52	; 0x34
    e1fa:	9d a9       	ldd	r25, Y+53	; 0x35
    e1fc:	a7 01       	movw	r20, r14
    e1fe:	96 01       	movw	r18, r12
    e200:	0e 94 a9 e1 	call	0x1c352	; 0x1c352 <__mulsi3>
    e204:	22 e0       	ldi	r18, 0x02	; 2
    e206:	30 e0       	ldi	r19, 0x00	; 0
    e208:	40 e0       	ldi	r20, 0x00	; 0
    e20a:	50 e0       	ldi	r21, 0x00	; 0
    e20c:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
    e210:	ed b7       	in	r30, 0x3d	; 61
    e212:	fe b7       	in	r31, 0x3e	; 62
    e214:	20 8b       	std	Z+16, r18	; 0x10
    e216:	31 8b       	std	Z+17, r19	; 0x11
    e218:	42 8b       	std	Z+18, r20	; 0x12
    e21a:	53 8b       	std	Z+19, r21	; 0x13
    e21c:	f8 01       	movw	r30, r16
    e21e:	81 8d       	ldd	r24, Z+25	; 0x19
    e220:	92 8d       	ldd	r25, Z+26	; 0x1a
    e222:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e224:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e226:	9c 01       	movw	r18, r24
    e228:	ad 01       	movw	r20, r26
    e22a:	22 50       	subi	r18, 0x02	; 2
    e22c:	31 09       	sbc	r19, r1
    e22e:	41 09       	sbc	r20, r1
    e230:	51 09       	sbc	r21, r1
    e232:	c7 01       	movw	r24, r14
    e234:	b6 01       	movw	r22, r12
    e236:	0e 94 a9 e1 	call	0x1c352	; 0x1c352 <__mulsi3>
    e23a:	dc 01       	movw	r26, r24
    e23c:	cb 01       	movw	r24, r22
    e23e:	b6 95       	lsr	r27
    e240:	a7 95       	ror	r26
    e242:	97 95       	ror	r25
    e244:	87 95       	ror	r24
    e246:	ed b7       	in	r30, 0x3d	; 61
    e248:	fe b7       	in	r31, 0x3e	; 62
    e24a:	84 87       	std	Z+12, r24	; 0x0c
    e24c:	95 87       	std	Z+13, r25	; 0x0d
    e24e:	a6 87       	std	Z+14, r26	; 0x0e
    e250:	b7 87       	std	Z+15, r27	; 0x0f
    e252:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <AccDirs>
    e256:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <AccDirs+0x1>
    e25a:	93 87       	std	Z+11, r25	; 0x0b
    e25c:	82 87       	std	Z+10, r24	; 0x0a
    e25e:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <AccSize>
    e262:	90 91 ac 1c 	lds	r25, 0x1CAC	; 0x801cac <AccSize+0x1>
    e266:	a0 91 ad 1c 	lds	r26, 0x1CAD	; 0x801cad <AccSize+0x2>
    e26a:	b0 91 ae 1c 	lds	r27, 0x1CAE	; 0x801cae <AccSize+0x3>
    e26e:	86 83       	std	Z+6, r24	; 0x06
    e270:	97 83       	std	Z+7, r25	; 0x07
    e272:	a0 87       	std	Z+8, r26	; 0x08
    e274:	b1 87       	std	Z+9, r27	; 0x09
    e276:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <AccFiles>
    e27a:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <AccFiles+0x1>
    e27e:	95 83       	std	Z+5, r25	; 0x05
    e280:	84 83       	std	Z+4, r24	; 0x04
    e282:	82 e8       	ldi	r24, 0x82	; 130
    e284:	98 e0       	ldi	r25, 0x08	; 8
    e286:	a0 e0       	ldi	r26, 0x00	; 0
    e288:	81 83       	std	Z+1, r24	; 0x01
    e28a:	92 83       	std	Z+2, r25	; 0x02
    e28c:	a3 83       	std	Z+3, r26	; 0x03
    e28e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e292:	e7 96       	adiw	r28, 0x37	; 55
    e294:	e8 e0       	ldi	r30, 0x08	; 8
    e296:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000e29a <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e29a:	ab e1       	ldi	r26, 0x1B	; 27
    e29c:	b0 e0       	ldi	r27, 0x00	; 0
    e29e:	e3 e5       	ldi	r30, 0x53	; 83
    e2a0:	f1 e7       	ldi	r31, 0x71	; 113
    e2a2:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    e2a6:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e2a8:	fc 01       	movw	r30, r24
    e2aa:	86 89       	ldd	r24, Z+22	; 0x16
    e2ac:	81 11       	cpse	r24, r1
    e2ae:	03 c0       	rjmp	.+6      	; 0xe2b6 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e2b0:	87 e6       	ldi	r24, 0x67	; 103
    e2b2:	98 e0       	ldi	r25, 0x08	; 8
    e2b4:	69 c0       	rjmp	.+210    	; 0xe388 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e2b6:	fd 01       	movw	r30, r26
    e2b8:	80 85       	ldd	r24, Z+8	; 0x08
    e2ba:	84 fd       	sbrc	r24, 4
    e2bc:	02 c0       	rjmp	.+4      	; 0xe2c2 <fatfs_filinfo_list+0x28>
    e2be:	9d e2       	ldi	r25, 0x2D	; 45
    e2c0:	01 c0       	rjmp	.+2      	; 0xe2c4 <fatfs_filinfo_list+0x2a>
    e2c2:	94 e4       	ldi	r25, 0x44	; 68
    e2c4:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e2c6:	80 fd       	sbrc	r24, 0
    e2c8:	02 c0       	rjmp	.+4      	; 0xe2ce <fatfs_filinfo_list+0x34>
    e2ca:	9d e2       	ldi	r25, 0x2D	; 45
    e2cc:	01 c0       	rjmp	.+2      	; 0xe2d0 <fatfs_filinfo_list+0x36>
    e2ce:	92 e5       	ldi	r25, 0x52	; 82
    e2d0:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e2d2:	81 fd       	sbrc	r24, 1
    e2d4:	02 c0       	rjmp	.+4      	; 0xe2da <fatfs_filinfo_list+0x40>
    e2d6:	9d e2       	ldi	r25, 0x2D	; 45
    e2d8:	01 c0       	rjmp	.+2      	; 0xe2dc <fatfs_filinfo_list+0x42>
    e2da:	98 e4       	ldi	r25, 0x48	; 72
    e2dc:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e2de:	82 fd       	sbrc	r24, 2
    e2e0:	02 c0       	rjmp	.+4      	; 0xe2e6 <fatfs_filinfo_list+0x4c>
    e2e2:	9d e2       	ldi	r25, 0x2D	; 45
    e2e4:	01 c0       	rjmp	.+2      	; 0xe2e8 <fatfs_filinfo_list+0x4e>
    e2e6:	93 e5       	ldi	r25, 0x53	; 83
    e2e8:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e2ea:	85 fd       	sbrc	r24, 5
    e2ec:	02 c0       	rjmp	.+4      	; 0xe2f2 <fatfs_filinfo_list+0x58>
    e2ee:	8d e2       	ldi	r24, 0x2D	; 45
    e2f0:	01 c0       	rjmp	.+2      	; 0xe2f4 <fatfs_filinfo_list+0x5a>
    e2f2:	81 e4       	ldi	r24, 0x41	; 65
    e2f4:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e2f6:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e2f8:	fd 01       	movw	r30, r26
    e2fa:	24 81       	ldd	r18, Z+4	; 0x04
    e2fc:	35 81       	ldd	r19, Z+5	; 0x05
    e2fe:	46 81       	ldd	r20, Z+6	; 0x06
    e300:	57 81       	ldd	r21, Z+7	; 0x07
    e302:	cd 01       	movw	r24, r26
    e304:	46 96       	adiw	r24, 0x16	; 22
    e306:	ed b7       	in	r30, 0x3d	; 61
    e308:	fe b7       	in	r31, 0x3e	; 62
    e30a:	95 8b       	std	Z+21, r25	; 0x15
    e30c:	84 8b       	std	Z+20, r24	; 0x14
    e30e:	8d 91       	ld	r24, X+
    e310:	9d 91       	ld	r25, X+
    e312:	0d 90       	ld	r0, X+
    e314:	bc 91       	ld	r27, X
    e316:	a0 2d       	mov	r26, r0
    e318:	80 8b       	std	Z+16, r24	; 0x10
    e31a:	91 8b       	std	Z+17, r25	; 0x11
    e31c:	a2 8b       	std	Z+18, r26	; 0x12
    e31e:	b3 8b       	std	Z+19, r27	; 0x13
    e320:	ca 01       	movw	r24, r20
    e322:	45 e0       	ldi	r20, 0x05	; 5
    e324:	96 95       	lsr	r25
    e326:	87 95       	ror	r24
    e328:	4a 95       	dec	r20
    e32a:	e1 f7       	brne	.-8      	; 0xe324 <fatfs_filinfo_list+0x8a>
    e32c:	8f 73       	andi	r24, 0x3F	; 63
    e32e:	99 27       	eor	r25, r25
    e330:	97 87       	std	Z+15, r25	; 0x0f
    e332:	86 87       	std	Z+14, r24	; 0x0e
    e334:	85 2f       	mov	r24, r21
    e336:	86 95       	lsr	r24
    e338:	86 95       	lsr	r24
    e33a:	86 95       	lsr	r24
    e33c:	84 87       	std	Z+12, r24	; 0x0c
    e33e:	15 86       	std	Z+13, r1	; 0x0d
    e340:	c9 01       	movw	r24, r18
    e342:	8f 71       	andi	r24, 0x1F	; 31
    e344:	99 27       	eor	r25, r25
    e346:	93 87       	std	Z+11, r25	; 0x0b
    e348:	82 87       	std	Z+10, r24	; 0x0a
    e34a:	c9 01       	movw	r24, r18
    e34c:	55 e0       	ldi	r21, 0x05	; 5
    e34e:	96 95       	lsr	r25
    e350:	87 95       	ror	r24
    e352:	5a 95       	dec	r21
    e354:	e1 f7       	brne	.-8      	; 0xe34e <fatfs_filinfo_list+0xb4>
    e356:	8f 70       	andi	r24, 0x0F	; 15
    e358:	99 27       	eor	r25, r25
    e35a:	91 87       	std	Z+9, r25	; 0x09
    e35c:	80 87       	std	Z+8, r24	; 0x08
    e35e:	23 2f       	mov	r18, r19
    e360:	33 27       	eor	r19, r19
    e362:	26 95       	lsr	r18
    e364:	24 54       	subi	r18, 0x44	; 68
    e366:	38 4f       	sbci	r19, 0xF8	; 248
    e368:	37 83       	std	Z+7, r19	; 0x07
    e36a:	26 83       	std	Z+6, r18	; 0x06
    e36c:	ce 01       	movw	r24, r28
    e36e:	46 96       	adiw	r24, 0x16	; 22
    e370:	95 83       	std	Z+5, r25	; 0x05
    e372:	84 83       	std	Z+4, r24	; 0x04
    e374:	85 e4       	ldi	r24, 0x45	; 69
    e376:	98 e0       	ldi	r25, 0x08	; 8
    e378:	a0 e0       	ldi	r26, 0x00	; 0
    e37a:	81 83       	std	Z+1, r24	; 0x01
    e37c:	92 83       	std	Z+2, r25	; 0x02
    e37e:	a3 83       	std	Z+3, r26	; 0x03
    e380:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e384:	83 e4       	ldi	r24, 0x43	; 67
    e386:	98 e0       	ldi	r25, 0x08	; 8
    e388:	a0 e0       	ldi	r26, 0x00	; 0
    e38a:	ed b7       	in	r30, 0x3d	; 61
    e38c:	fe b7       	in	r31, 0x3e	; 62
    e38e:	81 83       	std	Z+1, r24	; 0x01
    e390:	92 83       	std	Z+2, r25	; 0x02
    e392:	a3 83       	std	Z+3, r26	; 0x03
    e394:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
}
    e398:	6b 96       	adiw	r28, 0x1b	; 27
    e39a:	e2 e0       	ldi	r30, 0x02	; 2
    e39c:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000e3a0 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e3a0:	cf 93       	push	r28
    e3a2:	df 93       	push	r29
    e3a4:	00 d0       	rcall	.+0      	; 0xe3a6 <fatfs_help+0x6>
    e3a6:	1f 92       	push	r1
    e3a8:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e3aa:	88 e8       	ldi	r24, 0x88	; 136
    e3ac:	9b e0       	ldi	r25, 0x0B	; 11
    e3ae:	a0 e0       	ldi	r26, 0x00	; 0
    e3b0:	ed b7       	in	r30, 0x3d	; 61
    e3b2:	fe b7       	in	r31, 0x3e	; 62
    e3b4:	81 83       	std	Z+1, r24	; 0x01
    e3b6:	92 83       	std	Z+2, r25	; 0x02
    e3b8:	a3 83       	std	Z+3, r26	; 0x03
    e3ba:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    if(full)
    e3be:	cd 2b       	or	r28, r29
    e3c0:	51 f0       	breq	.+20     	; 0xe3d6 <fatfs_help+0x36>
    {
        printf(
    e3c2:	8c e0       	ldi	r24, 0x0C	; 12
    e3c4:	9b e0       	ldi	r25, 0x0B	; 11
    e3c6:	a0 e0       	ldi	r26, 0x00	; 0
    e3c8:	ed b7       	in	r30, 0x3d	; 61
    e3ca:	fe b7       	in	r31, 0x3e	; 62
    e3cc:	81 83       	std	Z+1, r24	; 0x01
    e3ce:	92 83       	std	Z+2, r25	; 0x02
    e3d0:	a3 83       	std	Z+3, r26	; 0x03
    e3d2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    #endif
            "\n"
            );
    }

}
    e3d6:	cd b7       	in	r28, 0x3d	; 61
    e3d8:	de b7       	in	r29, 0x3e	; 62
    e3da:	23 96       	adiw	r28, 0x03	; 3
    e3dc:	e2 e0       	ldi	r30, 0x02	; 2
    e3de:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000e3e2 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e3e2:	a5 e5       	ldi	r26, 0x55	; 85
    e3e4:	b2 e0       	ldi	r27, 0x02	; 2
    e3e6:	e7 ef       	ldi	r30, 0xF7	; 247
    e3e8:	f1 e7       	ldi	r31, 0x71	; 113
    e3ea:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    e3ee:	8e 01       	movw	r16, r28
    e3f0:	0e 5d       	subi	r16, 0xDE	; 222
    e3f2:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

    if(!name || !*name)
    e3f4:	00 97       	sbiw	r24, 0x00	; 0
    e3f6:	21 f0       	breq	.+8      	; 0xe400 <fatfs_ls+0x1e>
    e3f8:	fc 01       	movw	r30, r24
    e3fa:	20 81       	ld	r18, Z
    e3fc:	21 11       	cpse	r18, r1
    e3fe:	03 c0       	rjmp	.+6      	; 0xe406 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e400:	6d ef       	ldi	r22, 0xFD	; 253
    e402:	72 e1       	ldi	r23, 0x12	; 18
    e404:	01 c0       	rjmp	.+2      	; 0xe408 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e406:	bc 01       	movw	r22, r24
    e408:	c8 01       	movw	r24, r16
    e40a:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e40e:	ed b7       	in	r30, 0x3d	; 61
    e410:	fe b7       	in	r31, 0x3e	; 62
    e412:	15 83       	std	Z+5, r17	; 0x05
    e414:	04 83       	std	Z+4, r16	; 0x04
    e416:	8c e7       	ldi	r24, 0x7C	; 124
    e418:	9a e0       	ldi	r25, 0x0A	; 10
    e41a:	a0 e0       	ldi	r26, 0x00	; 0
    e41c:	81 83       	std	Z+1, r24	; 0x01
    e41e:	92 83       	std	Z+2, r25	; 0x02
    e420:	a3 83       	std	Z+3, r26	; 0x03
    e422:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    res = f_opendir(&dirs, buff);
    e426:	b8 01       	movw	r22, r16
    e428:	ce 01       	movw	r24, r28
    e42a:	8e 5d       	subi	r24, 0xDE	; 222
    e42c:	9d 4f       	sbci	r25, 0xFD	; 253
    e42e:	0e 94 e5 61 	call	0xc3ca	; 0xc3ca <f_opendir>
    if (res) { put_rc(res); return; }
    e432:	00 97       	sbiw	r24, 0x00	; 0
    e434:	11 f0       	breq	.+4      	; 0xe43a <fatfs_ls+0x58>
    e436:	23 dd       	rcall	.-1466   	; 0xde7e <put_rc>
    e438:	8a c0       	rjmp	.+276    	; 0xe54e <fatfs_ls+0x16c>
    p1 = s1 = s2 = 0;
    e43a:	c0 5b       	subi	r28, 0xB0	; 176
    e43c:	dd 4f       	sbci	r29, 0xFD	; 253
    e43e:	18 82       	st	Y, r1
    e440:	19 82       	std	Y+1, r1	; 0x01
    e442:	1a 82       	std	Y+2, r1	; 0x02
    e444:	1b 82       	std	Y+3, r1	; 0x03
    e446:	c0 55       	subi	r28, 0x50	; 80
    e448:	d2 40       	sbci	r29, 0x02	; 2
    e44a:	c1 2c       	mov	r12, r1
    e44c:	d1 2c       	mov	r13, r1
    e44e:	e1 2c       	mov	r14, r1
    e450:	f1 2c       	mov	r15, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e452:	be 01       	movw	r22, r28
    e454:	64 5f       	subi	r22, 0xF4	; 244
    e456:	7f 4f       	sbci	r23, 0xFF	; 255
    e458:	ce 01       	movw	r24, r28
    e45a:	8e 5d       	subi	r24, 0xDE	; 222
    e45c:	9d 4f       	sbci	r25, 0xFD	; 253
    e45e:	0e 94 6b 62 	call	0xc4d6	; 0xc4d6 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e462:	89 2b       	or	r24, r25
    e464:	49 f5       	brne	.+82     	; 0xe4b8 <fatfs_ls+0xd6>
    e466:	8a a1       	ldd	r24, Y+34	; 0x22
    e468:	88 23       	and	r24, r24
    e46a:	31 f1       	breq	.+76     	; 0xe4b8 <fatfs_ls+0xd6>
        if (fno.fattrib & AM_DIR)
    e46c:	8c 89       	ldd	r24, Y+20	; 0x14
    e46e:	84 ff       	sbrs	r24, 4
    e470:	04 c0       	rjmp	.+8      	; 0xe47a <fatfs_ls+0x98>
        {
            s2++;
    e472:	ff ef       	ldi	r31, 0xFF	; 255
    e474:	cf 1a       	sub	r12, r31
    e476:	df 0a       	sbc	r13, r31
    e478:	1b c0       	rjmp	.+54     	; 0xe4b0 <fatfs_ls+0xce>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e47a:	8f ef       	ldi	r24, 0xFF	; 255
    e47c:	e8 1a       	sub	r14, r24
    e47e:	f8 0a       	sbc	r15, r24
    e480:	4c 85       	ldd	r20, Y+12	; 0x0c
    e482:	5d 85       	ldd	r21, Y+13	; 0x0d
    e484:	6e 85       	ldd	r22, Y+14	; 0x0e
    e486:	7f 85       	ldd	r23, Y+15	; 0x0f
    e488:	c0 5b       	subi	r28, 0xB0	; 176
    e48a:	dd 4f       	sbci	r29, 0xFD	; 253
    e48c:	88 81       	ld	r24, Y
    e48e:	99 81       	ldd	r25, Y+1	; 0x01
    e490:	aa 81       	ldd	r26, Y+2	; 0x02
    e492:	bb 81       	ldd	r27, Y+3	; 0x03
    e494:	c0 55       	subi	r28, 0x50	; 80
    e496:	d2 40       	sbci	r29, 0x02	; 2
    e498:	84 0f       	add	r24, r20
    e49a:	95 1f       	adc	r25, r21
    e49c:	a6 1f       	adc	r26, r22
    e49e:	b7 1f       	adc	r27, r23
    e4a0:	c0 5b       	subi	r28, 0xB0	; 176
    e4a2:	dd 4f       	sbci	r29, 0xFD	; 253
    e4a4:	88 83       	st	Y, r24
    e4a6:	99 83       	std	Y+1, r25	; 0x01
    e4a8:	aa 83       	std	Y+2, r26	; 0x02
    e4aa:	bb 83       	std	Y+3, r27	; 0x03
    e4ac:	c0 55       	subi	r28, 0x50	; 80
    e4ae:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e4b0:	ce 01       	movw	r24, r28
    e4b2:	0c 96       	adiw	r24, 0x0c	; 12
    e4b4:	f2 de       	rcall	.-540    	; 0xe29a <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e4b6:	cd cf       	rjmp	.-102    	; 0xe452 <fatfs_ls+0x70>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e4b8:	ed b7       	in	r30, 0x3d	; 61
    e4ba:	fe b7       	in	r31, 0x3e	; 62
    e4bc:	d3 86       	std	Z+11, r13	; 0x0b
    e4be:	c2 86       	std	Z+10, r12	; 0x0a
    e4c0:	c0 5b       	subi	r28, 0xB0	; 176
    e4c2:	dd 4f       	sbci	r29, 0xFD	; 253
    e4c4:	88 81       	ld	r24, Y
    e4c6:	99 81       	ldd	r25, Y+1	; 0x01
    e4c8:	aa 81       	ldd	r26, Y+2	; 0x02
    e4ca:	bb 81       	ldd	r27, Y+3	; 0x03
    e4cc:	c0 55       	subi	r28, 0x50	; 80
    e4ce:	d2 40       	sbci	r29, 0x02	; 2
    e4d0:	86 83       	std	Z+6, r24	; 0x06
    e4d2:	97 83       	std	Z+7, r25	; 0x07
    e4d4:	a0 87       	std	Z+8, r26	; 0x08
    e4d6:	b1 87       	std	Z+9, r27	; 0x09
    e4d8:	f5 82       	std	Z+5, r15	; 0x05
    e4da:	e4 82       	std	Z+4, r14	; 0x04
    e4dc:	83 e5       	ldi	r24, 0x53	; 83
    e4de:	9a e0       	ldi	r25, 0x0A	; 10
    e4e0:	a0 e0       	ldi	r26, 0x00	; 0
    e4e2:	81 83       	std	Z+1, r24	; 0x01
    e4e4:	92 83       	std	Z+2, r25	; 0x02
    e4e6:	a3 83       	std	Z+3, r26	; 0x03
    e4e8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e4ec:	ae 01       	movw	r20, r28
    e4ee:	4c 5a       	subi	r20, 0xAC	; 172
    e4f0:	5d 4f       	sbci	r21, 0xFD	; 253
    e4f2:	be 01       	movw	r22, r28
    e4f4:	60 5b       	subi	r22, 0xB0	; 176
    e4f6:	7d 4f       	sbci	r23, 0xFD	; 253
    e4f8:	c8 01       	movw	r24, r16
    e4fa:	0e 94 ed 62 	call	0xc5da	; 0xc5da <f_getfree>
    e4fe:	89 2b       	or	r24, r25
    e500:	31 f5       	brne	.+76     	; 0xe54e <fatfs_ls+0x16c>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e502:	cc 5a       	subi	r28, 0xAC	; 172
    e504:	dd 4f       	sbci	r29, 0xFD	; 253
    e506:	e8 81       	ld	r30, Y
    e508:	f9 81       	ldd	r31, Y+1	; 0x01
    e50a:	c4 55       	subi	r28, 0x54	; 84
    e50c:	d2 40       	sbci	r29, 0x02	; 2
    e50e:	a1 85       	ldd	r26, Z+9	; 0x09
    e510:	b2 85       	ldd	r27, Z+10	; 0x0a
    e512:	c0 5b       	subi	r28, 0xB0	; 176
    e514:	dd 4f       	sbci	r29, 0xFD	; 253
    e516:	28 81       	ld	r18, Y
    e518:	39 81       	ldd	r19, Y+1	; 0x01
    e51a:	4a 81       	ldd	r20, Y+2	; 0x02
    e51c:	5b 81       	ldd	r21, Y+3	; 0x03
    e51e:	c0 55       	subi	r28, 0x50	; 80
    e520:	d2 40       	sbci	r29, 0x02	; 2
    e522:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
    e526:	22 e0       	ldi	r18, 0x02	; 2
    e528:	30 e0       	ldi	r19, 0x00	; 0
    e52a:	40 e0       	ldi	r20, 0x00	; 0
    e52c:	50 e0       	ldi	r21, 0x00	; 0
    e52e:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
    e532:	ed b7       	in	r30, 0x3d	; 61
    e534:	fe b7       	in	r31, 0x3e	; 62
    e536:	24 83       	std	Z+4, r18	; 0x04
    e538:	35 83       	std	Z+5, r19	; 0x05
    e53a:	46 83       	std	Z+6, r20	; 0x06
    e53c:	57 83       	std	Z+7, r21	; 0x07
    e53e:	8e e3       	ldi	r24, 0x3E	; 62
    e540:	9a e0       	ldi	r25, 0x0A	; 10
    e542:	a0 e0       	ldi	r26, 0x00	; 0
    e544:	81 83       	std	Z+1, r24	; 0x01
    e546:	92 83       	std	Z+2, r25	; 0x02
    e548:	a3 83       	std	Z+3, r26	; 0x03
    e54a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
}
    e54e:	cb 5a       	subi	r28, 0xAB	; 171
    e550:	dd 4f       	sbci	r29, 0xFD	; 253
    e552:	e8 e0       	ldi	r30, 0x08	; 8
    e554:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000e558 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e558:	00 d0       	rcall	.+0      	; 0xe55a <mmc_test+0x2>
    e55a:	1f 92       	push	r1
    printf("==============================\n");
    e55c:	8c ed       	ldi	r24, 0xDC	; 220
    e55e:	9a e0       	ldi	r25, 0x0A	; 10
    e560:	a0 e0       	ldi	r26, 0x00	; 0
    e562:	ed b7       	in	r30, 0x3d	; 61
    e564:	fe b7       	in	r31, 0x3e	; 62
    e566:	81 83       	std	Z+1, r24	; 0x01
    e568:	92 83       	std	Z+2, r25	; 0x02
    e56a:	a3 83       	std	Z+3, r26	; 0x03
    e56c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("START MMC TEST\n");
    e570:	8c ec       	ldi	r24, 0xCC	; 204
    e572:	9a e0       	ldi	r25, 0x0A	; 10
    e574:	a0 e0       	ldi	r26, 0x00	; 0
    e576:	ed b7       	in	r30, 0x3d	; 61
    e578:	fe b7       	in	r31, 0x3e	; 62
    e57a:	81 83       	std	Z+1, r24	; 0x01
    e57c:	92 83       	std	Z+2, r25	; 0x02
    e57e:	a3 83       	std	Z+3, r26	; 0x03
    e580:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fatfs_status("/");
    e584:	86 ea       	ldi	r24, 0xA6	; 166
    e586:	98 e0       	ldi	r25, 0x08	; 8
    e588:	0e dd       	rcall	.-1508   	; 0xdfa6 <fatfs_status>
    printf("MMC Directory List\n");
    e58a:	88 eb       	ldi	r24, 0xB8	; 184
    e58c:	9a e0       	ldi	r25, 0x0A	; 10
    e58e:	a0 e0       	ldi	r26, 0x00	; 0
    e590:	ed b7       	in	r30, 0x3d	; 61
    e592:	fe b7       	in	r31, 0x3e	; 62
    e594:	81 83       	std	Z+1, r24	; 0x01
    e596:	92 83       	std	Z+2, r25	; 0x02
    e598:	a3 83       	std	Z+3, r26	; 0x03
    e59a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fatfs_ls("/");
    e59e:	86 ea       	ldi	r24, 0xA6	; 166
    e5a0:	98 e0       	ldi	r25, 0x08	; 8
    e5a2:	1f df       	rcall	.-450    	; 0xe3e2 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e5a4:	8a ea       	ldi	r24, 0xAA	; 170
    e5a6:	9a e0       	ldi	r25, 0x0A	; 10
    e5a8:	a0 e0       	ldi	r26, 0x00	; 0
    e5aa:	ed b7       	in	r30, 0x3d	; 61
    e5ac:	fe b7       	in	r31, 0x3e	; 62
    e5ae:	81 83       	std	Z+1, r24	; 0x01
    e5b0:	92 83       	std	Z+2, r25	; 0x02
    e5b2:	a3 83       	std	Z+3, r26	; 0x03
    e5b4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("==============================\n");
    e5b8:	8a e8       	ldi	r24, 0x8A	; 138
    e5ba:	9a e0       	ldi	r25, 0x0A	; 10
    e5bc:	a0 e0       	ldi	r26, 0x00	; 0
    e5be:	ed b7       	in	r30, 0x3d	; 61
    e5c0:	fe b7       	in	r31, 0x3e	; 62
    e5c2:	81 83       	std	Z+1, r24	; 0x01
    e5c4:	92 83       	std	Z+2, r25	; 0x02
    e5c6:	a3 83       	std	Z+3, r26	; 0x03
    e5c8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
}
    e5cc:	0f 90       	pop	r0
    e5ce:	0f 90       	pop	r0
    e5d0:	0f 90       	pop	r0
    e5d2:	08 95       	ret

0000e5d4 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e5d4:	ef 92       	push	r14
    e5d6:	ff 92       	push	r15
    e5d8:	0f 93       	push	r16
    e5da:	1f 93       	push	r17
    e5dc:	cf 93       	push	r28
    e5de:	df 93       	push	r29
    e5e0:	ad b7       	in	r26, 0x3d	; 61
    e5e2:	be b7       	in	r27, 0x3e	; 62
    e5e4:	17 97       	sbiw	r26, 0x07	; 7
    e5e6:	0f b6       	in	r0, 0x3f	; 63
    e5e8:	f8 94       	cli
    e5ea:	be bf       	out	0x3e, r27	; 62
    e5ec:	0f be       	out	0x3f, r0	; 63
    e5ee:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e5f0:	fb 01       	movw	r30, r22
    e5f2:	20 81       	ld	r18, Z
    e5f4:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e5f6:	21 15       	cp	r18, r1
    e5f8:	31 05       	cpc	r19, r1
    e5fa:	19 f4       	brne	.+6      	; 0xe602 <fatfs_tests+0x2e>
        return(0);
    e5fc:	80 e0       	ldi	r24, 0x00	; 0
    e5fe:	90 e0       	ldi	r25, 0x00	; 0
    e600:	73 c0       	rjmp	.+230    	; 0xe6e8 <fatfs_tests+0x114>
    e602:	eb 01       	movw	r28, r22
    e604:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e606:	62 ed       	ldi	r22, 0xD2	; 210
    e608:	78 e0       	ldi	r23, 0x08	; 8
    e60a:	c9 01       	movw	r24, r18
    e60c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
    e610:	89 2b       	or	r24, r25
    e612:	a1 f3       	breq	.-24     	; 0xe5fc <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    e614:	ea 80       	ldd	r14, Y+2	; 0x02
    e616:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e618:	e1 14       	cp	r14, r1
    e61a:	f1 04       	cpc	r15, r1
    e61c:	21 f4       	brne	.+8      	; 0xe626 <fatfs_tests+0x52>
        {
            fatfs_help(1);
    e61e:	81 e0       	ldi	r24, 0x01	; 1
    e620:	90 e0       	ldi	r25, 0x00	; 0
    e622:	be de       	rcall	.-644    	; 0xe3a0 <fatfs_help>
    e624:	5f c0       	rjmp	.+190    	; 0xe6e4 <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e626:	69 e7       	ldi	r22, 0x79	; 121
    e628:	76 e1       	ldi	r23, 0x16	; 22
    e62a:	c7 01       	movw	r24, r14
    e62c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
    e630:	89 2b       	or	r24, r25
    e632:	a9 f7       	brne	.-22     	; 0xe61e <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e634:	98 01       	movw	r18, r16
    e636:	42 e0       	ldi	r20, 0x02	; 2
    e638:	50 e0       	ldi	r21, 0x00	; 0
    e63a:	68 ed       	ldi	r22, 0xD8	; 216
    e63c:	78 e0       	ldi	r23, 0x08	; 8
    e63e:	c7 01       	movw	r24, r14
    e640:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
    e644:	89 2b       	or	r24, r25
    e646:	31 f1       	breq	.+76     	; 0xe694 <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e648:	ed b7       	in	r30, 0x3d	; 61
    e64a:	fe b7       	in	r31, 0x3e	; 62
    e64c:	17 83       	std	Z+7, r17	; 0x07
    e64e:	06 83       	std	Z+6, r16	; 0x06
    e650:	82 e0       	ldi	r24, 0x02	; 2
    e652:	90 e0       	ldi	r25, 0x00	; 0
    e654:	95 83       	std	Z+5, r25	; 0x05
    e656:	84 83       	std	Z+4, r24	; 0x04
    e658:	8c ef       	ldi	r24, 0xFC	; 252
    e65a:	9a e0       	ldi	r25, 0x0A	; 10
    e65c:	a0 e0       	ldi	r26, 0x00	; 0
    e65e:	81 83       	std	Z+1, r24	; 0x01
    e660:	92 83       	std	Z+2, r25	; 0x02
    e662:	a3 83       	std	Z+3, r26	; 0x03
    e664:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    e668:	7e 01       	movw	r14, r28
    e66a:	f4 e0       	ldi	r31, 0x04	; 4
    e66c:	ef 0e       	add	r14, r31
    e66e:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e670:	c2 e0       	ldi	r28, 0x02	; 2
    e672:	d0 e0       	ldi	r29, 0x00	; 0
    e674:	c0 17       	cp	r28, r16
    e676:	d1 07       	cpc	r29, r17
    e678:	3c f4       	brge	.+14     	; 0xe688 <fatfs_tests+0xb4>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e67a:	f7 01       	movw	r30, r14
    e67c:	81 91       	ld	r24, Z+
    e67e:	91 91       	ld	r25, Z+
    e680:	7f 01       	movw	r14, r30
    e682:	af de       	rcall	.-674    	; 0xe3e2 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e684:	21 96       	adiw	r28, 0x01	; 1
    e686:	f6 cf       	rjmp	.-20     	; 0xe674 <fatfs_tests+0xa0>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e688:	22 97       	sbiw	r28, 0x02	; 2
    e68a:	61 f5       	brne	.+88     	; 0xe6e4 <fatfs_tests+0x110>
        {
            fatfs_ls("");
    e68c:	8d e2       	ldi	r24, 0x2D	; 45
    e68e:	9c e0       	ldi	r25, 0x0C	; 12
    e690:	a8 de       	rcall	.-688    	; 0xe3e2 <fatfs_ls>
    e692:	28 c0       	rjmp	.+80     	; 0xe6e4 <fatfs_tests+0x110>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e694:	98 01       	movw	r18, r16
    e696:	42 e0       	ldi	r20, 0x02	; 2
    e698:	50 e0       	ldi	r21, 0x00	; 0
    e69a:	6b ed       	ldi	r22, 0xDB	; 219
    e69c:	78 e0       	ldi	r23, 0x08	; 8
    e69e:	c7 01       	movw	r24, r14
    e6a0:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
    e6a4:	89 2b       	or	r24, r25
    {
        mmc_test();
    e6a6:	11 f0       	breq	.+4      	; 0xe6ac <fatfs_tests+0xd8>
    e6a8:	57 df       	rcall	.-338    	; 0xe558 <mmc_test>
    e6aa:	1c c0       	rjmp	.+56     	; 0xe6e4 <fatfs_tests+0x110>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e6ac:	98 01       	movw	r18, r16
    e6ae:	42 e0       	ldi	r20, 0x02	; 2
    e6b0:	50 e0       	ldi	r21, 0x00	; 0
    e6b2:	64 ee       	ldi	r22, 0xE4	; 228
    e6b4:	78 e0       	ldi	r23, 0x08	; 8
    e6b6:	c7 01       	movw	r24, r14
    e6b8:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
    e6bc:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e6be:	21 f0       	breq	.+8      	; 0xe6c8 <fatfs_tests+0xf4>
    e6c0:	81 e0       	ldi	r24, 0x01	; 1
    e6c2:	90 e0       	ldi	r25, 0x00	; 0
    e6c4:	99 da       	rcall	.-2766   	; 0xdbf8 <mmc_init>
    e6c6:	0e c0       	rjmp	.+28     	; 0xe6e4 <fatfs_tests+0x110>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e6c8:	98 01       	movw	r18, r16
    e6ca:	43 e0       	ldi	r20, 0x03	; 3
    e6cc:	50 e0       	ldi	r21, 0x00	; 0
    e6ce:	6d ee       	ldi	r22, 0xED	; 237
    e6d0:	78 e0       	ldi	r23, 0x08	; 8
    e6d2:	c7 01       	movw	r24, r14
    e6d4:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
    e6d8:	89 2b       	or	r24, r25
    e6da:	09 f4       	brne	.+2      	; 0xe6de <fatfs_tests+0x10a>
    {
        fatfs_status(argv[ind]);
    e6dc:	8f cf       	rjmp	.-226    	; 0xe5fc <fatfs_tests+0x28>
    e6de:	8c 81       	ldd	r24, Y+4	; 0x04
    e6e0:	9d 81       	ldd	r25, Y+5	; 0x05
    e6e2:	61 dc       	rcall	.-1854   	; 0xdfa6 <fatfs_status>
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e6e4:	81 e0       	ldi	r24, 0x01	; 1
    e6e6:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif

    return(0);
}
    e6e8:	cd b7       	in	r28, 0x3d	; 61
    e6ea:	de b7       	in	r29, 0x3e	; 62
    e6ec:	27 96       	adiw	r28, 0x07	; 7
    e6ee:	e6 e0       	ldi	r30, 0x06	; 6
    e6f0:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0000e6f4 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e6f4:	8f 92       	push	r8
    e6f6:	9f 92       	push	r9
    e6f8:	af 92       	push	r10
    e6fa:	bf 92       	push	r11
    e6fc:	ef 92       	push	r14
    e6fe:	ff 92       	push	r15
    e700:	0f 93       	push	r16
    e702:	1f 93       	push	r17
    e704:	cf 93       	push	r28
    e706:	df 93       	push	r29
    e708:	00 d0       	rcall	.+0      	; 0xe70a <fatfs_getc+0x16>
    e70a:	1f 92       	push	r1
    e70c:	cd b7       	in	r28, 0x3d	; 61
    e70e:	de b7       	in	r29, 0x3e	; 62
    e710:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    e714:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    e718:	00 97       	sbiw	r24, 0x00	; 0
    e71a:	39 f4       	brne	.+14     	; 0xe72a <fatfs_getc+0x36>
    e71c:	89 e0       	ldi	r24, 0x09	; 9
    e71e:	90 e0       	ldi	r25, 0x00	; 0
    e720:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e724:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e728:	2f c0       	rjmp	.+94     	; 0xe788 <fatfs_getc+0x94>
    e72a:	fc 01       	movw	r30, r24
    e72c:	e4 84       	ldd	r14, Z+12	; 0x0c
    e72e:	f5 84       	ldd	r15, Z+13	; 0x0d
    e730:	e1 14       	cp	r14, r1
    e732:	f1 04       	cpc	r15, r1
    e734:	99 f3       	breq	.-26     	; 0xe71c <fatfs_getc+0x28>
    e736:	8c 01       	movw	r16, r24
    e738:	9e 01       	movw	r18, r28
    e73a:	2f 5f       	subi	r18, 0xFF	; 255
    e73c:	3f 4f       	sbci	r19, 0xFF	; 255
    e73e:	41 e0       	ldi	r20, 0x01	; 1
    e740:	50 e0       	ldi	r21, 0x00	; 0
    e742:	be 01       	movw	r22, r28
    e744:	6d 5f       	subi	r22, 0xFD	; 253
    e746:	7f 4f       	sbci	r23, 0xFF	; 255
    e748:	c7 01       	movw	r24, r14
    e74a:	0e 94 1d 5a 	call	0xb43a	; 0xb43a <f_read>
    e74e:	00 97       	sbiw	r24, 0x00	; 0
    e750:	31 f4       	brne	.+12     	; 0xe75e <fatfs_getc+0x6a>
    e752:	29 81       	ldd	r18, Y+1	; 0x01
    e754:	3a 81       	ldd	r19, Y+2	; 0x02
    e756:	21 30       	cpi	r18, 0x01	; 1
    e758:	31 05       	cpc	r19, r1
    e75a:	c9 f0       	breq	.+50     	; 0xe78e <fatfs_getc+0x9a>
    e75c:	03 c0       	rjmp	.+6      	; 0xe764 <fatfs_getc+0x70>
    e75e:	84 31       	cpi	r24, 0x14	; 20
    e760:	91 05       	cpc	r25, r1
    e762:	40 f4       	brcc	.+16     	; 0xe774 <fatfs_getc+0x80>
    e764:	fc 01       	movw	r30, r24
    e766:	ea 55       	subi	r30, 0x5A	; 90
    e768:	f4 4f       	sbci	r31, 0xF4	; 244
    e76a:	80 81       	ld	r24, Z
    e76c:	08 2e       	mov	r0, r24
    e76e:	00 0c       	add	r0, r0
    e770:	99 0b       	sbc	r25, r25
    e772:	02 c0       	rjmp	.+4      	; 0xe778 <fatfs_getc+0x84>
    e774:	83 e2       	ldi	r24, 0x23	; 35
    e776:	90 e0       	ldi	r25, 0x00	; 0
    e778:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e77c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e780:	f8 01       	movw	r30, r16
    e782:	83 81       	ldd	r24, Z+3	; 0x03
    e784:	80 62       	ori	r24, 0x20	; 32
    e786:	83 83       	std	Z+3, r24	; 0x03
    e788:	8f ef       	ldi	r24, 0xFF	; 255
    e78a:	9f ef       	ldi	r25, 0xFF	; 255
    e78c:	28 c0       	rjmp	.+80     	; 0xe7de <fatfs_getc+0xea>
    e78e:	8b 81       	ldd	r24, Y+3	; 0x03
    e790:	8d 30       	cpi	r24, 0x0D	; 13
    e792:	01 f5       	brne	.+64     	; 0xe7d4 <fatfs_getc+0xe0>
    e794:	f7 01       	movw	r30, r14
    e796:	80 88       	ldd	r8, Z+16	; 0x10
    e798:	91 88       	ldd	r9, Z+17	; 0x11
    e79a:	a2 88       	ldd	r10, Z+18	; 0x12
    e79c:	b3 88       	ldd	r11, Z+19	; 0x13
    e79e:	9e 01       	movw	r18, r28
    e7a0:	2f 5f       	subi	r18, 0xFF	; 255
    e7a2:	3f 4f       	sbci	r19, 0xFF	; 255
    e7a4:	41 e0       	ldi	r20, 0x01	; 1
    e7a6:	50 e0       	ldi	r21, 0x00	; 0
    e7a8:	be 01       	movw	r22, r28
    e7aa:	6d 5f       	subi	r22, 0xFD	; 253
    e7ac:	7f 4f       	sbci	r23, 0xFF	; 255
    e7ae:	c7 01       	movw	r24, r14
    e7b0:	0e 94 1d 5a 	call	0xb43a	; 0xb43a <f_read>
    e7b4:	89 2b       	or	r24, r25
    e7b6:	89 f4       	brne	.+34     	; 0xe7da <fatfs_getc+0xe6>
    e7b8:	89 81       	ldd	r24, Y+1	; 0x01
    e7ba:	9a 81       	ldd	r25, Y+2	; 0x02
    e7bc:	01 97       	sbiw	r24, 0x01	; 1
    e7be:	69 f4       	brne	.+26     	; 0xe7da <fatfs_getc+0xe6>
    e7c0:	8b 81       	ldd	r24, Y+3	; 0x03
    e7c2:	8a 30       	cpi	r24, 0x0A	; 10
    e7c4:	31 f0       	breq	.+12     	; 0xe7d2 <fatfs_getc+0xde>
    e7c6:	b5 01       	movw	r22, r10
    e7c8:	a4 01       	movw	r20, r8
    e7ca:	c7 01       	movw	r24, r14
    e7cc:	0e 94 29 5f 	call	0xbe52	; 0xbe52 <f_lseek>
    e7d0:	04 c0       	rjmp	.+8      	; 0xe7da <fatfs_getc+0xe6>
    e7d2:	8b 83       	std	Y+3, r24	; 0x03
    e7d4:	8b 81       	ldd	r24, Y+3	; 0x03
    e7d6:	90 e0       	ldi	r25, 0x00	; 0
    e7d8:	02 c0       	rjmp	.+4      	; 0xe7de <fatfs_getc+0xea>
    e7da:	8a e0       	ldi	r24, 0x0A	; 10
    e7dc:	90 e0       	ldi	r25, 0x00	; 0
    e7de:	0f 90       	pop	r0
    e7e0:	0f 90       	pop	r0
    e7e2:	0f 90       	pop	r0
    e7e4:	df 91       	pop	r29
    e7e6:	cf 91       	pop	r28
    e7e8:	1f 91       	pop	r17
    e7ea:	0f 91       	pop	r16
    e7ec:	ff 90       	pop	r15
    e7ee:	ef 90       	pop	r14
    e7f0:	bf 90       	pop	r11
    e7f2:	af 90       	pop	r10
    e7f4:	9f 90       	pop	r9
    e7f6:	8f 90       	pop	r8
    e7f8:	08 95       	ret

0000e7fa <fatfs_putc>:
    e7fa:	a3 e0       	ldi	r26, 0x03	; 3
    e7fc:	b0 e0       	ldi	r27, 0x00	; 0
    e7fe:	e3 e0       	ldi	r30, 0x03	; 3
    e800:	f4 e7       	ldi	r31, 0x74	; 116
    e802:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    e806:	8b 83       	std	Y+3, r24	; 0x03
    e808:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    e80c:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    e810:	61 15       	cp	r22, r1
    e812:	71 05       	cpc	r23, r1
    e814:	39 f4       	brne	.+14     	; 0xe824 <fatfs_putc+0x2a>
    e816:	89 e0       	ldi	r24, 0x09	; 9
    e818:	90 e0       	ldi	r25, 0x00	; 0
    e81a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e81e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e822:	2d c0       	rjmp	.+90     	; 0xe87e <fatfs_putc+0x84>
    e824:	fb 01       	movw	r30, r22
    e826:	84 85       	ldd	r24, Z+12	; 0x0c
    e828:	95 85       	ldd	r25, Z+13	; 0x0d
    e82a:	00 97       	sbiw	r24, 0x00	; 0
    e82c:	a1 f3       	breq	.-24     	; 0xe816 <fatfs_putc+0x1c>
    e82e:	8b 01       	movw	r16, r22
    e830:	9e 01       	movw	r18, r28
    e832:	2f 5f       	subi	r18, 0xFF	; 255
    e834:	3f 4f       	sbci	r19, 0xFF	; 255
    e836:	41 e0       	ldi	r20, 0x01	; 1
    e838:	50 e0       	ldi	r21, 0x00	; 0
    e83a:	be 01       	movw	r22, r28
    e83c:	6d 5f       	subi	r22, 0xFD	; 253
    e83e:	7f 4f       	sbci	r23, 0xFF	; 255
    e840:	0e 94 68 5b 	call	0xb6d0	; 0xb6d0 <f_write>
    e844:	00 97       	sbiw	r24, 0x00	; 0
    e846:	31 f4       	brne	.+12     	; 0xe854 <fatfs_putc+0x5a>
    e848:	29 81       	ldd	r18, Y+1	; 0x01
    e84a:	3a 81       	ldd	r19, Y+2	; 0x02
    e84c:	21 30       	cpi	r18, 0x01	; 1
    e84e:	31 05       	cpc	r19, r1
    e850:	c9 f0       	breq	.+50     	; 0xe884 <fatfs_putc+0x8a>
    e852:	03 c0       	rjmp	.+6      	; 0xe85a <fatfs_putc+0x60>
    e854:	84 31       	cpi	r24, 0x14	; 20
    e856:	91 05       	cpc	r25, r1
    e858:	40 f4       	brcc	.+16     	; 0xe86a <fatfs_putc+0x70>
    e85a:	fc 01       	movw	r30, r24
    e85c:	ea 55       	subi	r30, 0x5A	; 90
    e85e:	f4 4f       	sbci	r31, 0xF4	; 244
    e860:	80 81       	ld	r24, Z
    e862:	08 2e       	mov	r0, r24
    e864:	00 0c       	add	r0, r0
    e866:	99 0b       	sbc	r25, r25
    e868:	02 c0       	rjmp	.+4      	; 0xe86e <fatfs_putc+0x74>
    e86a:	83 e2       	ldi	r24, 0x23	; 35
    e86c:	90 e0       	ldi	r25, 0x00	; 0
    e86e:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e872:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e876:	f8 01       	movw	r30, r16
    e878:	83 81       	ldd	r24, Z+3	; 0x03
    e87a:	80 62       	ori	r24, 0x20	; 32
    e87c:	83 83       	std	Z+3, r24	; 0x03
    e87e:	8f ef       	ldi	r24, 0xFF	; 255
    e880:	9f ef       	ldi	r25, 0xFF	; 255
    e882:	02 c0       	rjmp	.+4      	; 0xe888 <fatfs_putc+0x8e>
    e884:	8b 81       	ldd	r24, Y+3	; 0x03
    e886:	90 e0       	ldi	r25, 0x00	; 0
    e888:	23 96       	adiw	r28, 0x03	; 3
    e88a:	e4 e0       	ldi	r30, 0x04	; 4
    e88c:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000e890 <fgetc>:
    e890:	cf 93       	push	r28
    e892:	df 93       	push	r29
    e894:	00 d0       	rcall	.+0      	; 0xe896 <fgetc+0x6>
    e896:	1f 92       	push	r1
    e898:	ec 01       	movw	r28, r24
    e89a:	00 97       	sbiw	r24, 0x00	; 0
    e89c:	39 f4       	brne	.+14     	; 0xe8ac <fgetc+0x1c>
    e89e:	89 e0       	ldi	r24, 0x09	; 9
    e8a0:	90 e0       	ldi	r25, 0x00	; 0
    e8a2:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e8a6:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e8aa:	40 c0       	rjmp	.+128    	; 0xe92c <fgetc+0x9c>
    e8ac:	2b 81       	ldd	r18, Y+3	; 0x03
    e8ae:	20 ff       	sbrs	r18, 0
    e8b0:	3d c0       	rjmp	.+122    	; 0xe92c <fgetc+0x9c>
    e8b2:	26 ff       	sbrs	r18, 6
    e8b4:	0a c0       	rjmp	.+20     	; 0xe8ca <fgetc+0x3a>
    e8b6:	2f 7b       	andi	r18, 0xBF	; 191
    e8b8:	2b 83       	std	Y+3, r18	; 0x03
    e8ba:	8e 81       	ldd	r24, Y+6	; 0x06
    e8bc:	9f 81       	ldd	r25, Y+7	; 0x07
    e8be:	01 96       	adiw	r24, 0x01	; 1
    e8c0:	9f 83       	std	Y+7, r25	; 0x07
    e8c2:	8e 83       	std	Y+6, r24	; 0x06
    e8c4:	8a 81       	ldd	r24, Y+2	; 0x02
    e8c6:	90 e0       	ldi	r25, 0x00	; 0
    e8c8:	33 c0       	rjmp	.+102    	; 0xe930 <fgetc+0xa0>
    e8ca:	22 ff       	sbrs	r18, 2
    e8cc:	0d c0       	rjmp	.+26     	; 0xe8e8 <fgetc+0x58>
    e8ce:	e8 81       	ld	r30, Y
    e8d0:	f9 81       	ldd	r31, Y+1	; 0x01
    e8d2:	80 81       	ld	r24, Z
    e8d4:	90 e0       	ldi	r25, 0x00	; 0
    e8d6:	00 97       	sbiw	r24, 0x00	; 0
    e8d8:	19 f4       	brne	.+6      	; 0xe8e0 <fgetc+0x50>
    e8da:	20 62       	ori	r18, 0x20	; 32
    e8dc:	2b 83       	std	Y+3, r18	; 0x03
    e8de:	26 c0       	rjmp	.+76     	; 0xe92c <fgetc+0x9c>
    e8e0:	31 96       	adiw	r30, 0x01	; 1
    e8e2:	f9 83       	std	Y+1, r31	; 0x01
    e8e4:	e8 83       	st	Y, r30
    e8e6:	1b c0       	rjmp	.+54     	; 0xe91e <fgetc+0x8e>
    e8e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    e8ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    e8ec:	30 97       	sbiw	r30, 0x00	; 0
    e8ee:	59 f4       	brne	.+22     	; 0xe906 <fgetc+0x76>
    e8f0:	84 ec       	ldi	r24, 0xC4	; 196
    e8f2:	9b e0       	ldi	r25, 0x0B	; 11
    e8f4:	a0 e0       	ldi	r26, 0x00	; 0
    e8f6:	ed b7       	in	r30, 0x3d	; 61
    e8f8:	fe b7       	in	r31, 0x3e	; 62
    e8fa:	81 83       	std	Z+1, r24	; 0x01
    e8fc:	92 83       	std	Z+2, r25	; 0x02
    e8fe:	a3 83       	std	Z+3, r26	; 0x03
    e900:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    e904:	13 c0       	rjmp	.+38     	; 0xe92c <fgetc+0x9c>
    e906:	09 95       	icall
    e908:	97 ff       	sbrs	r25, 7
    e90a:	09 c0       	rjmp	.+18     	; 0xe91e <fgetc+0x8e>
    e90c:	2b 81       	ldd	r18, Y+3	; 0x03
    e90e:	02 96       	adiw	r24, 0x02	; 2
    e910:	11 f0       	breq	.+4      	; 0xe916 <fgetc+0x86>
    e912:	80 e2       	ldi	r24, 0x20	; 32
    e914:	01 c0       	rjmp	.+2      	; 0xe918 <fgetc+0x88>
    e916:	80 e1       	ldi	r24, 0x10	; 16
    e918:	82 2b       	or	r24, r18
    e91a:	8b 83       	std	Y+3, r24	; 0x03
    e91c:	07 c0       	rjmp	.+14     	; 0xe92c <fgetc+0x9c>
    e91e:	2e 81       	ldd	r18, Y+6	; 0x06
    e920:	3f 81       	ldd	r19, Y+7	; 0x07
    e922:	2f 5f       	subi	r18, 0xFF	; 255
    e924:	3f 4f       	sbci	r19, 0xFF	; 255
    e926:	3f 83       	std	Y+7, r19	; 0x07
    e928:	2e 83       	std	Y+6, r18	; 0x06
    e92a:	02 c0       	rjmp	.+4      	; 0xe930 <fgetc+0xa0>
    e92c:	8f ef       	ldi	r24, 0xFF	; 255
    e92e:	9f ef       	ldi	r25, 0xFF	; 255
    e930:	cd b7       	in	r28, 0x3d	; 61
    e932:	de b7       	in	r29, 0x3e	; 62
    e934:	23 96       	adiw	r28, 0x03	; 3
    e936:	e2 e0       	ldi	r30, 0x02	; 2
    e938:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000e93c <fputc>:
    e93c:	cf 93       	push	r28
    e93e:	df 93       	push	r29
    e940:	00 d0       	rcall	.+0      	; 0xe942 <fputc+0x6>
    e942:	1f 92       	push	r1
    e944:	eb 01       	movw	r28, r22
    e946:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    e94a:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    e94e:	20 91 b7 1c 	lds	r18, 0x1CB7	; 0x801cb7 <__iob+0x2>
    e952:	30 91 b8 1c 	lds	r19, 0x1CB8	; 0x801cb8 <__iob+0x3>
    e956:	62 17       	cp	r22, r18
    e958:	73 07       	cpc	r23, r19
    e95a:	49 f0       	breq	.+18     	; 0xe96e <fputc+0x32>
    e95c:	20 91 b9 1c 	lds	r18, 0x1CB9	; 0x801cb9 <__iob+0x4>
    e960:	30 91 ba 1c 	lds	r19, 0x1CBA	; 0x801cba <__iob+0x5>
    e964:	62 17       	cp	r22, r18
    e966:	73 07       	cpc	r23, r19
    e968:	11 f0       	breq	.+4      	; 0xe96e <fputc+0x32>
    e96a:	47 df       	rcall	.-370    	; 0xe7fa <fatfs_putc>
    e96c:	33 c0       	rjmp	.+102    	; 0xe9d4 <fputc+0x98>
    e96e:	2b 81       	ldd	r18, Y+3	; 0x03
    e970:	21 ff       	sbrs	r18, 1
    e972:	2e c0       	rjmp	.+92     	; 0xe9d0 <fputc+0x94>
    e974:	22 ff       	sbrs	r18, 2
    e976:	10 c0       	rjmp	.+32     	; 0xe998 <fputc+0x5c>
    e978:	4e 81       	ldd	r20, Y+6	; 0x06
    e97a:	5f 81       	ldd	r21, Y+7	; 0x07
    e97c:	2c 81       	ldd	r18, Y+4	; 0x04
    e97e:	3d 81       	ldd	r19, Y+5	; 0x05
    e980:	42 17       	cp	r20, r18
    e982:	53 07       	cpc	r21, r19
    e984:	f4 f4       	brge	.+60     	; 0xe9c2 <fputc+0x86>
    e986:	e8 81       	ld	r30, Y
    e988:	f9 81       	ldd	r31, Y+1	; 0x01
    e98a:	9f 01       	movw	r18, r30
    e98c:	2f 5f       	subi	r18, 0xFF	; 255
    e98e:	3f 4f       	sbci	r19, 0xFF	; 255
    e990:	39 83       	std	Y+1, r19	; 0x01
    e992:	28 83       	st	Y, r18
    e994:	80 83       	st	Z, r24
    e996:	15 c0       	rjmp	.+42     	; 0xe9c2 <fputc+0x86>
    e998:	e8 85       	ldd	r30, Y+8	; 0x08
    e99a:	f9 85       	ldd	r31, Y+9	; 0x09
    e99c:	30 97       	sbiw	r30, 0x00	; 0
    e99e:	59 f4       	brne	.+22     	; 0xe9b6 <fputc+0x7a>
    e9a0:	8c ea       	ldi	r24, 0xAC	; 172
    e9a2:	9b e0       	ldi	r25, 0x0B	; 11
    e9a4:	a0 e0       	ldi	r26, 0x00	; 0
    e9a6:	ed b7       	in	r30, 0x3d	; 61
    e9a8:	fe b7       	in	r31, 0x3e	; 62
    e9aa:	81 83       	std	Z+1, r24	; 0x01
    e9ac:	92 83       	std	Z+2, r25	; 0x02
    e9ae:	a3 83       	std	Z+3, r26	; 0x03
    e9b0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    e9b4:	0d c0       	rjmp	.+26     	; 0xe9d0 <fputc+0x94>
    e9b6:	be 01       	movw	r22, r28
    e9b8:	09 95       	icall
    e9ba:	8f 3f       	cpi	r24, 0xFF	; 255
    e9bc:	ff ef       	ldi	r31, 0xFF	; 255
    e9be:	9f 07       	cpc	r25, r31
    e9c0:	39 f0       	breq	.+14     	; 0xe9d0 <fputc+0x94>
    e9c2:	2e 81       	ldd	r18, Y+6	; 0x06
    e9c4:	3f 81       	ldd	r19, Y+7	; 0x07
    e9c6:	2f 5f       	subi	r18, 0xFF	; 255
    e9c8:	3f 4f       	sbci	r19, 0xFF	; 255
    e9ca:	3f 83       	std	Y+7, r19	; 0x07
    e9cc:	2e 83       	std	Y+6, r18	; 0x06
    e9ce:	02 c0       	rjmp	.+4      	; 0xe9d4 <fputc+0x98>
    e9d0:	8f ef       	ldi	r24, 0xFF	; 255
    e9d2:	9f ef       	ldi	r25, 0xFF	; 255
    e9d4:	cd b7       	in	r28, 0x3d	; 61
    e9d6:	de b7       	in	r29, 0x3e	; 62
    e9d8:	23 96       	adiw	r28, 0x03	; 3
    e9da:	e2 e0       	ldi	r30, 0x02	; 2
    e9dc:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000e9e0 <_fprintf_putc>:
    e9e0:	fc 01       	movw	r30, r24
    e9e2:	86 2f       	mov	r24, r22
    e9e4:	26 81       	ldd	r18, Z+6	; 0x06
    e9e6:	37 81       	ldd	r19, Z+7	; 0x07
    e9e8:	2f 5f       	subi	r18, 0xFF	; 255
    e9ea:	3f 4f       	sbci	r19, 0xFF	; 255
    e9ec:	37 83       	std	Z+7, r19	; 0x07
    e9ee:	26 83       	std	Z+6, r18	; 0x06
    e9f0:	62 81       	ldd	r22, Z+2	; 0x02
    e9f2:	73 81       	ldd	r23, Z+3	; 0x03
    e9f4:	90 e0       	ldi	r25, 0x00	; 0
    e9f6:	a2 cf       	rjmp	.-188    	; 0xe93c <fputc>
    e9f8:	08 95       	ret

0000e9fa <getchar>:
    e9fa:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    e9fe:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    ea02:	46 cf       	rjmp	.-372    	; 0xe890 <fgetc>
    ea04:	08 95       	ret

0000ea06 <putchar>:
    ea06:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <__iob+0x2>
    ea0a:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <__iob+0x3>
    ea0e:	96 cf       	rjmp	.-212    	; 0xe93c <fputc>
    ea10:	08 95       	ret

0000ea12 <fgets>:
    ea12:	a0 e0       	ldi	r26, 0x00	; 0
    ea14:	b0 e0       	ldi	r27, 0x00	; 0
    ea16:	ef e0       	ldi	r30, 0x0F	; 15
    ea18:	f5 e7       	ldi	r31, 0x75	; 117
    ea1a:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    ea1e:	7c 01       	movw	r14, r24
    ea20:	6a 01       	movw	r12, r20
    ea22:	8b 01       	movw	r16, r22
    ea24:	c0 e0       	ldi	r28, 0x00	; 0
    ea26:	d0 e0       	ldi	r29, 0x00	; 0
    ea28:	01 15       	cp	r16, r1
    ea2a:	11 05       	cpc	r17, r1
    ea2c:	41 f0       	breq	.+16     	; 0xea3e <fgets+0x2c>
    ea2e:	c6 01       	movw	r24, r12
    ea30:	2f df       	rcall	.-418    	; 0xe890 <fgetc>
    ea32:	8f 3f       	cpi	r24, 0xFF	; 255
    ea34:	2f ef       	ldi	r18, 0xFF	; 255
    ea36:	92 07       	cpc	r25, r18
    ea38:	39 f4       	brne	.+14     	; 0xea48 <fgets+0x36>
    ea3a:	20 97       	sbiw	r28, 0x00	; 0
    ea3c:	b9 f0       	breq	.+46     	; 0xea6c <fgets+0x5a>
    ea3e:	ce 0d       	add	r28, r14
    ea40:	df 1d       	adc	r29, r15
    ea42:	18 82       	st	Y, r1
    ea44:	c7 01       	movw	r24, r14
    ea46:	14 c0       	rjmp	.+40     	; 0xea70 <fgets+0x5e>
    ea48:	8a 30       	cpi	r24, 0x0A	; 10
    ea4a:	91 05       	cpc	r25, r1
    ea4c:	c1 f3       	breq	.-16     	; 0xea3e <fgets+0x2c>
    ea4e:	88 30       	cpi	r24, 0x08	; 8
    ea50:	91 05       	cpc	r25, r1
    ea52:	21 f4       	brne	.+8      	; 0xea5c <fgets+0x4a>
    ea54:	20 97       	sbiw	r28, 0x00	; 0
    ea56:	39 f0       	breq	.+14     	; 0xea66 <fgets+0x54>
    ea58:	21 97       	sbiw	r28, 0x01	; 1
    ea5a:	05 c0       	rjmp	.+10     	; 0xea66 <fgets+0x54>
    ea5c:	f7 01       	movw	r30, r14
    ea5e:	ec 0f       	add	r30, r28
    ea60:	fd 1f       	adc	r31, r29
    ea62:	80 83       	st	Z, r24
    ea64:	21 96       	adiw	r28, 0x01	; 1
    ea66:	01 50       	subi	r16, 0x01	; 1
    ea68:	11 09       	sbc	r17, r1
    ea6a:	de cf       	rjmp	.-68     	; 0xea28 <fgets+0x16>
    ea6c:	80 e0       	ldi	r24, 0x00	; 0
    ea6e:	90 e0       	ldi	r25, 0x00	; 0
    ea70:	cd b7       	in	r28, 0x3d	; 61
    ea72:	de b7       	in	r29, 0x3e	; 62
    ea74:	e8 e0       	ldi	r30, 0x08	; 8
    ea76:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000ea7a <fputs>:
    ea7a:	0f 93       	push	r16
    ea7c:	1f 93       	push	r17
    ea7e:	cf 93       	push	r28
    ea80:	df 93       	push	r29
    ea82:	8b 01       	movw	r16, r22
    ea84:	ec 01       	movw	r28, r24
    ea86:	89 91       	ld	r24, Y+
    ea88:	88 23       	and	r24, r24
    ea8a:	41 f0       	breq	.+16     	; 0xea9c <fputs+0x22>
    ea8c:	b8 01       	movw	r22, r16
    ea8e:	90 e0       	ldi	r25, 0x00	; 0
    ea90:	55 df       	rcall	.-342    	; 0xe93c <fputc>
    ea92:	8f 3f       	cpi	r24, 0xFF	; 255
    ea94:	2f ef       	ldi	r18, 0xFF	; 255
    ea96:	92 07       	cpc	r25, r18
    ea98:	b1 f7       	brne	.-20     	; 0xea86 <fputs+0xc>
    ea9a:	02 c0       	rjmp	.+4      	; 0xeaa0 <fputs+0x26>
    ea9c:	80 e0       	ldi	r24, 0x00	; 0
    ea9e:	90 e0       	ldi	r25, 0x00	; 0
    eaa0:	df 91       	pop	r29
    eaa2:	cf 91       	pop	r28
    eaa4:	1f 91       	pop	r17
    eaa6:	0f 91       	pop	r16
    eaa8:	08 95       	ret

0000eaaa <puts>:
    eaaa:	cf 93       	push	r28
    eaac:	df 93       	push	r29
    eaae:	ec 01       	movw	r28, r24
    eab0:	89 91       	ld	r24, Y+
    eab2:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <__iob+0x2>
    eab6:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <__iob+0x3>
    eaba:	88 23       	and	r24, r24
    eabc:	39 f0       	breq	.+14     	; 0xeacc <puts+0x22>
    eabe:	90 e0       	ldi	r25, 0x00	; 0
    eac0:	3d df       	rcall	.-390    	; 0xe93c <fputc>
    eac2:	8f 3f       	cpi	r24, 0xFF	; 255
    eac4:	2f ef       	ldi	r18, 0xFF	; 255
    eac6:	92 07       	cpc	r25, r18
    eac8:	99 f7       	brne	.-26     	; 0xeab0 <puts+0x6>
    eaca:	03 c0       	rjmp	.+6      	; 0xead2 <puts+0x28>
    eacc:	8a e0       	ldi	r24, 0x0A	; 10
    eace:	90 e0       	ldi	r25, 0x00	; 0
    ead0:	35 df       	rcall	.-406    	; 0xe93c <fputc>
    ead2:	df 91       	pop	r29
    ead4:	cf 91       	pop	r28
    ead6:	08 95       	ret

0000ead8 <fileno>:
    ead8:	00 97       	sbiw	r24, 0x00	; 0
    eada:	39 f4       	brne	.+14     	; 0xeaea <fileno+0x12>
    eadc:	89 e0       	ldi	r24, 0x09	; 9
    eade:	90 e0       	ldi	r25, 0x00	; 0
    eae0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    eae4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    eae8:	0e c0       	rjmp	.+28     	; 0xeb06 <fileno+0x2e>
    eaea:	e5 eb       	ldi	r30, 0xB5	; 181
    eaec:	fc e1       	ldi	r31, 0x1C	; 28
    eaee:	20 e0       	ldi	r18, 0x00	; 0
    eaf0:	30 e0       	ldi	r19, 0x00	; 0
    eaf2:	41 91       	ld	r20, Z+
    eaf4:	51 91       	ld	r21, Z+
    eaf6:	84 17       	cp	r24, r20
    eaf8:	95 07       	cpc	r25, r21
    eafa:	41 f0       	breq	.+16     	; 0xeb0c <fileno+0x34>
    eafc:	2f 5f       	subi	r18, 0xFF	; 255
    eafe:	3f 4f       	sbci	r19, 0xFF	; 255
    eb00:	20 31       	cpi	r18, 0x10	; 16
    eb02:	31 05       	cpc	r19, r1
    eb04:	b1 f7       	brne	.-20     	; 0xeaf2 <fileno+0x1a>
    eb06:	8f ef       	ldi	r24, 0xFF	; 255
    eb08:	9f ef       	ldi	r25, 0xFF	; 255
    eb0a:	08 95       	ret
    eb0c:	c9 01       	movw	r24, r18
    eb0e:	08 95       	ret

0000eb10 <fileno_to_stream>:
    eb10:	80 31       	cpi	r24, 0x10	; 16
    eb12:	91 05       	cpc	r25, r1
    eb14:	48 f4       	brcc	.+18     	; 0xeb28 <fileno_to_stream+0x18>
    eb16:	88 0f       	add	r24, r24
    eb18:	99 1f       	adc	r25, r25
    eb1a:	fc 01       	movw	r30, r24
    eb1c:	eb 54       	subi	r30, 0x4B	; 75
    eb1e:	f3 4e       	sbci	r31, 0xE3	; 227
    eb20:	80 81       	ld	r24, Z
    eb22:	91 81       	ldd	r25, Z+1	; 0x01
    eb24:	00 97       	sbiw	r24, 0x00	; 0
    eb26:	41 f4       	brne	.+16     	; 0xeb38 <fileno_to_stream+0x28>
    eb28:	89 e0       	ldi	r24, 0x09	; 9
    eb2a:	90 e0       	ldi	r25, 0x00	; 0
    eb2c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    eb30:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    eb34:	80 e0       	ldi	r24, 0x00	; 0
    eb36:	90 e0       	ldi	r25, 0x00	; 0
    eb38:	08 95       	ret

0000eb3a <mctime>:
    eb3a:	a4 e0       	ldi	r26, 0x04	; 4
    eb3c:	b0 e0       	ldi	r27, 0x00	; 0
    eb3e:	e3 ea       	ldi	r30, 0xA3	; 163
    eb40:	f5 e7       	ldi	r31, 0x75	; 117
    eb42:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    eb46:	69 83       	std	Y+1, r22	; 0x01
    eb48:	7a 83       	std	Y+2, r23	; 0x02
    eb4a:	8b 83       	std	Y+3, r24	; 0x03
    eb4c:	9c 83       	std	Y+4, r25	; 0x04
    eb4e:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    eb52:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    eb56:	ce 01       	movw	r24, r28
    eb58:	01 96       	adiw	r24, 0x01	; 1
    eb5a:	0e 94 c9 3a 	call	0x7592	; 0x7592 <ctime_gm>
    eb5e:	fc 01       	movw	r30, r24
    eb60:	01 90       	ld	r0, Z+
    eb62:	00 20       	and	r0, r0
    eb64:	e9 f7       	brne	.-6      	; 0xeb60 <mctime+0x26>
    eb66:	31 97       	sbiw	r30, 0x01	; 1
    eb68:	e8 1b       	sub	r30, r24
    eb6a:	f9 0b       	sbc	r31, r25
    eb6c:	39 f0       	breq	.+14     	; 0xeb7c <mctime+0x42>
    eb6e:	31 97       	sbiw	r30, 0x01	; 1
    eb70:	e8 0f       	add	r30, r24
    eb72:	f9 1f       	adc	r31, r25
    eb74:	20 81       	ld	r18, Z
    eb76:	2a 30       	cpi	r18, 0x0A	; 10
    eb78:	09 f4       	brne	.+2      	; 0xeb7c <mctime+0x42>
    eb7a:	10 82       	st	Z, r1
    eb7c:	24 96       	adiw	r28, 0x04	; 4
    eb7e:	e2 e0       	ldi	r30, 0x02	; 2
    eb80:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000eb84 <basename>:
    eb84:	00 97       	sbiw	r24, 0x00	; 0
    eb86:	49 f0       	breq	.+18     	; 0xeb9a <basename+0x16>
    eb88:	fc 01       	movw	r30, r24
    eb8a:	21 91       	ld	r18, Z+
    eb8c:	22 23       	and	r18, r18
    eb8e:	21 f0       	breq	.+8      	; 0xeb98 <basename+0x14>
    eb90:	2f 32       	cpi	r18, 0x2F	; 47
    eb92:	d9 f7       	brne	.-10     	; 0xeb8a <basename+0x6>
    eb94:	cf 01       	movw	r24, r30
    eb96:	f9 cf       	rjmp	.-14     	; 0xeb8a <basename+0x6>
    eb98:	08 95       	ret
    eb9a:	8d e2       	ldi	r24, 0x2D	; 45
    eb9c:	9c e0       	ldi	r25, 0x0C	; 12
    eb9e:	08 95       	ret

0000eba0 <chdir>:
    eba0:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    eba4:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    eba8:	0e 94 98 5d 	call	0xbb30	; 0xbb30 <f_chdir>
    ebac:	00 97       	sbiw	r24, 0x00	; 0
    ebae:	a1 f0       	breq	.+40     	; 0xebd8 <chdir+0x38>
    ebb0:	84 31       	cpi	r24, 0x14	; 20
    ebb2:	91 05       	cpc	r25, r1
    ebb4:	40 f4       	brcc	.+16     	; 0xebc6 <chdir+0x26>
    ebb6:	fc 01       	movw	r30, r24
    ebb8:	ea 55       	subi	r30, 0x5A	; 90
    ebba:	f4 4f       	sbci	r31, 0xF4	; 244
    ebbc:	80 81       	ld	r24, Z
    ebbe:	08 2e       	mov	r0, r24
    ebc0:	00 0c       	add	r0, r0
    ebc2:	99 0b       	sbc	r25, r25
    ebc4:	02 c0       	rjmp	.+4      	; 0xebca <chdir+0x2a>
    ebc6:	83 e2       	ldi	r24, 0x23	; 35
    ebc8:	90 e0       	ldi	r25, 0x00	; 0
    ebca:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ebce:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ebd2:	8f ef       	ldi	r24, 0xFF	; 255
    ebd4:	9f ef       	ldi	r25, 0xFF	; 255
    ebd6:	08 95       	ret
    ebd8:	80 e0       	ldi	r24, 0x00	; 0
    ebda:	90 e0       	ldi	r25, 0x00	; 0
    ebdc:	08 95       	ret

0000ebde <chmod>:
    ebde:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ebe2:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ebe6:	42 79       	andi	r20, 0x92	; 146
    ebe8:	55 27       	eor	r21, r21
    ebea:	66 27       	eor	r22, r22
    ebec:	77 27       	eor	r23, r23
    ebee:	45 2b       	or	r20, r21
    ebf0:	46 2b       	or	r20, r22
    ebf2:	47 2b       	or	r20, r23
    ebf4:	19 f0       	breq	.+6      	; 0xebfc <chmod+0x1e>
    ebf6:	80 e0       	ldi	r24, 0x00	; 0
    ebf8:	90 e0       	ldi	r25, 0x00	; 0
    ebfa:	08 95       	ret
    ebfc:	41 e0       	ldi	r20, 0x01	; 1
    ebfe:	61 e0       	ldi	r22, 0x01	; 1
    ec00:	0e 94 79 66 	call	0xccf2	; 0xccf2 <f_chmod>
    ec04:	00 97       	sbiw	r24, 0x00	; 0
    ec06:	b9 f3       	breq	.-18     	; 0xebf6 <chmod+0x18>
    ec08:	84 31       	cpi	r24, 0x14	; 20
    ec0a:	91 05       	cpc	r25, r1
    ec0c:	40 f4       	brcc	.+16     	; 0xec1e <chmod+0x40>
    ec0e:	fc 01       	movw	r30, r24
    ec10:	ea 55       	subi	r30, 0x5A	; 90
    ec12:	f4 4f       	sbci	r31, 0xF4	; 244
    ec14:	80 81       	ld	r24, Z
    ec16:	08 2e       	mov	r0, r24
    ec18:	00 0c       	add	r0, r0
    ec1a:	99 0b       	sbc	r25, r25
    ec1c:	02 c0       	rjmp	.+4      	; 0xec22 <chmod+0x44>
    ec1e:	83 e2       	ldi	r24, 0x23	; 35
    ec20:	90 e0       	ldi	r25, 0x00	; 0
    ec22:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ec26:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ec2a:	8f ef       	ldi	r24, 0xFF	; 255
    ec2c:	9f ef       	ldi	r25, 0xFF	; 255
    ec2e:	08 95       	ret

0000ec30 <getcwd>:
    ec30:	cf 93       	push	r28
    ec32:	df 93       	push	r29
    ec34:	d8 2f       	mov	r29, r24
    ec36:	c9 2f       	mov	r28, r25
    ec38:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ec3c:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ec40:	0e 94 f3 5d 	call	0xbbe6	; 0xbbe6 <f_getcwd>
    ec44:	00 97       	sbiw	r24, 0x00	; 0
    ec46:	a1 f0       	breq	.+40     	; 0xec70 <getcwd+0x40>
    ec48:	84 31       	cpi	r24, 0x14	; 20
    ec4a:	91 05       	cpc	r25, r1
    ec4c:	40 f4       	brcc	.+16     	; 0xec5e <getcwd+0x2e>
    ec4e:	fc 01       	movw	r30, r24
    ec50:	ea 55       	subi	r30, 0x5A	; 90
    ec52:	f4 4f       	sbci	r31, 0xF4	; 244
    ec54:	80 81       	ld	r24, Z
    ec56:	08 2e       	mov	r0, r24
    ec58:	00 0c       	add	r0, r0
    ec5a:	99 0b       	sbc	r25, r25
    ec5c:	02 c0       	rjmp	.+4      	; 0xec62 <getcwd+0x32>
    ec5e:	83 e2       	ldi	r24, 0x23	; 35
    ec60:	90 e0       	ldi	r25, 0x00	; 0
    ec62:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ec66:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ec6a:	80 e0       	ldi	r24, 0x00	; 0
    ec6c:	90 e0       	ldi	r25, 0x00	; 0
    ec6e:	02 c0       	rjmp	.+4      	; 0xec74 <getcwd+0x44>
    ec70:	8d 2f       	mov	r24, r29
    ec72:	9c 2f       	mov	r25, r28
    ec74:	df 91       	pop	r29
    ec76:	cf 91       	pop	r28
    ec78:	08 95       	ret

0000ec7a <mkdir>:
    ec7a:	cf 93       	push	r28
    ec7c:	df 93       	push	r29
    ec7e:	ec 01       	movw	r28, r24
    ec80:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ec84:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ec88:	41 15       	cp	r20, r1
    ec8a:	51 05       	cpc	r21, r1
    ec8c:	61 05       	cpc	r22, r1
    ec8e:	71 05       	cpc	r23, r1
    ec90:	41 f4       	brne	.+16     	; 0xeca2 <mkdir+0x28>
    ec92:	ce 01       	movw	r24, r28
    ec94:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <f_mkdir>
    ec98:	00 97       	sbiw	r24, 0x00	; 0
    ec9a:	39 f4       	brne	.+14     	; 0xecaa <mkdir+0x30>
    ec9c:	80 e0       	ldi	r24, 0x00	; 0
    ec9e:	90 e0       	ldi	r25, 0x00	; 0
    eca0:	17 c0       	rjmp	.+46     	; 0xecd0 <mkdir+0x56>
    eca2:	9d df       	rcall	.-198    	; 0xebde <chmod>
    eca4:	89 2b       	or	r24, r25
    eca6:	a9 f3       	breq	.-22     	; 0xec92 <mkdir+0x18>
    eca8:	11 c0       	rjmp	.+34     	; 0xeccc <mkdir+0x52>
    ecaa:	84 31       	cpi	r24, 0x14	; 20
    ecac:	91 05       	cpc	r25, r1
    ecae:	40 f4       	brcc	.+16     	; 0xecc0 <mkdir+0x46>
    ecb0:	fc 01       	movw	r30, r24
    ecb2:	ea 55       	subi	r30, 0x5A	; 90
    ecb4:	f4 4f       	sbci	r31, 0xF4	; 244
    ecb6:	80 81       	ld	r24, Z
    ecb8:	08 2e       	mov	r0, r24
    ecba:	00 0c       	add	r0, r0
    ecbc:	99 0b       	sbc	r25, r25
    ecbe:	02 c0       	rjmp	.+4      	; 0xecc4 <mkdir+0x4a>
    ecc0:	83 e2       	ldi	r24, 0x23	; 35
    ecc2:	90 e0       	ldi	r25, 0x00	; 0
    ecc4:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ecc8:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    eccc:	8f ef       	ldi	r24, 0xFF	; 255
    ecce:	9f ef       	ldi	r25, 0xFF	; 255
    ecd0:	df 91       	pop	r29
    ecd2:	cf 91       	pop	r28
    ecd4:	08 95       	ret

0000ecd6 <rename>:
    ecd6:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ecda:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ecde:	0e 94 64 65 	call	0xcac8	; 0xcac8 <f_rename>
    ece2:	00 97       	sbiw	r24, 0x00	; 0
    ece4:	a1 f0       	breq	.+40     	; 0xed0e <rename+0x38>
    ece6:	84 31       	cpi	r24, 0x14	; 20
    ece8:	91 05       	cpc	r25, r1
    ecea:	40 f4       	brcc	.+16     	; 0xecfc <rename+0x26>
    ecec:	fc 01       	movw	r30, r24
    ecee:	ea 55       	subi	r30, 0x5A	; 90
    ecf0:	f4 4f       	sbci	r31, 0xF4	; 244
    ecf2:	80 81       	ld	r24, Z
    ecf4:	08 2e       	mov	r0, r24
    ecf6:	00 0c       	add	r0, r0
    ecf8:	99 0b       	sbc	r25, r25
    ecfa:	02 c0       	rjmp	.+4      	; 0xed00 <rename+0x2a>
    ecfc:	83 e2       	ldi	r24, 0x23	; 35
    ecfe:	90 e0       	ldi	r25, 0x00	; 0
    ed00:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ed04:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ed08:	8f ef       	ldi	r24, 0xFF	; 255
    ed0a:	9f ef       	ldi	r25, 0xFF	; 255
    ed0c:	08 95       	ret
    ed0e:	80 e0       	ldi	r24, 0x00	; 0
    ed10:	90 e0       	ldi	r25, 0x00	; 0
    ed12:	08 95       	ret

0000ed14 <unlink>:
    ed14:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ed18:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ed1c:	0e 94 cd 63 	call	0xc79a	; 0xc79a <f_unlink>
    ed20:	00 97       	sbiw	r24, 0x00	; 0
    ed22:	a1 f0       	breq	.+40     	; 0xed4c <unlink+0x38>
    ed24:	84 31       	cpi	r24, 0x14	; 20
    ed26:	91 05       	cpc	r25, r1
    ed28:	40 f4       	brcc	.+16     	; 0xed3a <unlink+0x26>
    ed2a:	fc 01       	movw	r30, r24
    ed2c:	ea 55       	subi	r30, 0x5A	; 90
    ed2e:	f4 4f       	sbci	r31, 0xF4	; 244
    ed30:	80 81       	ld	r24, Z
    ed32:	08 2e       	mov	r0, r24
    ed34:	00 0c       	add	r0, r0
    ed36:	99 0b       	sbc	r25, r25
    ed38:	02 c0       	rjmp	.+4      	; 0xed3e <unlink+0x2a>
    ed3a:	83 e2       	ldi	r24, 0x23	; 35
    ed3c:	90 e0       	ldi	r25, 0x00	; 0
    ed3e:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ed42:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ed46:	8f ef       	ldi	r24, 0xFF	; 255
    ed48:	9f ef       	ldi	r25, 0xFF	; 255
    ed4a:	08 95       	ret
    ed4c:	80 e0       	ldi	r24, 0x00	; 0
    ed4e:	90 e0       	ldi	r25, 0x00	; 0
    ed50:	08 95       	ret

0000ed52 <rmdir>:
    ed52:	e0 cf       	rjmp	.-64     	; 0xed14 <unlink>
    ed54:	08 95       	ret

0000ed56 <closedir>:
    ed56:	0e 94 56 62 	call	0xc4ac	; 0xc4ac <f_closedir>
    ed5a:	00 97       	sbiw	r24, 0x00	; 0
    ed5c:	a1 f0       	breq	.+40     	; 0xed86 <closedir+0x30>
    ed5e:	84 31       	cpi	r24, 0x14	; 20
    ed60:	91 05       	cpc	r25, r1
    ed62:	40 f4       	brcc	.+16     	; 0xed74 <closedir+0x1e>
    ed64:	fc 01       	movw	r30, r24
    ed66:	ea 55       	subi	r30, 0x5A	; 90
    ed68:	f4 4f       	sbci	r31, 0xF4	; 244
    ed6a:	80 81       	ld	r24, Z
    ed6c:	08 2e       	mov	r0, r24
    ed6e:	00 0c       	add	r0, r0
    ed70:	99 0b       	sbc	r25, r25
    ed72:	02 c0       	rjmp	.+4      	; 0xed78 <closedir+0x22>
    ed74:	83 e2       	ldi	r24, 0x23	; 35
    ed76:	90 e0       	ldi	r25, 0x00	; 0
    ed78:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ed7c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ed80:	8f ef       	ldi	r24, 0xFF	; 255
    ed82:	9f ef       	ldi	r25, 0xFF	; 255
    ed84:	08 95       	ret
    ed86:	80 e0       	ldi	r24, 0x00	; 0
    ed88:	90 e0       	ldi	r25, 0x00	; 0
    ed8a:	08 95       	ret

0000ed8c <opendir>:
    ed8c:	bc 01       	movw	r22, r24
    ed8e:	87 e2       	ldi	r24, 0x27	; 39
    ed90:	99 e1       	ldi	r25, 0x19	; 25
    ed92:	0e 94 e5 61 	call	0xc3ca	; 0xc3ca <f_opendir>
    ed96:	00 97       	sbiw	r24, 0x00	; 0
    ed98:	a1 f0       	breq	.+40     	; 0xedc2 <opendir+0x36>
    ed9a:	84 31       	cpi	r24, 0x14	; 20
    ed9c:	91 05       	cpc	r25, r1
    ed9e:	40 f4       	brcc	.+16     	; 0xedb0 <opendir+0x24>
    eda0:	fc 01       	movw	r30, r24
    eda2:	ea 55       	subi	r30, 0x5A	; 90
    eda4:	f4 4f       	sbci	r31, 0xF4	; 244
    eda6:	80 81       	ld	r24, Z
    eda8:	08 2e       	mov	r0, r24
    edaa:	00 0c       	add	r0, r0
    edac:	99 0b       	sbc	r25, r25
    edae:	02 c0       	rjmp	.+4      	; 0xedb4 <opendir+0x28>
    edb0:	83 e2       	ldi	r24, 0x23	; 35
    edb2:	90 e0       	ldi	r25, 0x00	; 0
    edb4:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    edb8:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    edbc:	80 e0       	ldi	r24, 0x00	; 0
    edbe:	90 e0       	ldi	r25, 0x00	; 0
    edc0:	08 95       	ret
    edc2:	87 e2       	ldi	r24, 0x27	; 39
    edc4:	99 e1       	ldi	r25, 0x19	; 25
    edc6:	08 95       	ret

0000edc8 <readdir>:
    edc8:	a6 e1       	ldi	r26, 0x16	; 22
    edca:	b1 e0       	ldi	r27, 0x01	; 1
    edcc:	ea ee       	ldi	r30, 0xEA	; 234
    edce:	f6 e7       	ldi	r31, 0x76	; 118
    edd0:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    edd4:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_de>
    edd8:	be 01       	movw	r22, r28
    edda:	6f 5f       	subi	r22, 0xFF	; 255
    eddc:	7f 4f       	sbci	r23, 0xFF	; 255
    edde:	0e 94 6b 62 	call	0xc4d6	; 0xc4d6 <f_readdir>
    ede2:	00 97       	sbiw	r24, 0x00	; 0
    ede4:	a1 f0       	breq	.+40     	; 0xee0e <readdir+0x46>
    ede6:	84 31       	cpi	r24, 0x14	; 20
    ede8:	91 05       	cpc	r25, r1
    edea:	40 f4       	brcc	.+16     	; 0xedfc <readdir+0x34>
    edec:	fc 01       	movw	r30, r24
    edee:	ea 55       	subi	r30, 0x5A	; 90
    edf0:	f4 4f       	sbci	r31, 0xF4	; 244
    edf2:	80 81       	ld	r24, Z
    edf4:	08 2e       	mov	r0, r24
    edf6:	00 0c       	add	r0, r0
    edf8:	99 0b       	sbc	r25, r25
    edfa:	02 c0       	rjmp	.+4      	; 0xee00 <readdir+0x38>
    edfc:	83 e2       	ldi	r24, 0x23	; 35
    edfe:	90 e0       	ldi	r25, 0x00	; 0
    ee00:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ee04:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ee08:	80 e0       	ldi	r24, 0x00	; 0
    ee0a:	90 e0       	ldi	r25, 0x00	; 0
    ee0c:	16 c0       	rjmp	.+44     	; 0xee3a <readdir+0x72>
    ee0e:	be 01       	movw	r22, r28
    ee10:	69 5e       	subi	r22, 0xE9	; 233
    ee12:	7f 4f       	sbci	r23, 0xFF	; 255
    ee14:	fb 01       	movw	r30, r22
    ee16:	01 90       	ld	r0, Z+
    ee18:	00 20       	and	r0, r0
    ee1a:	e9 f7       	brne	.-6      	; 0xee16 <readdir+0x4e>
    ee1c:	31 97       	sbiw	r30, 0x01	; 1
    ee1e:	8f 01       	movw	r16, r30
    ee20:	06 1b       	sub	r16, r22
    ee22:	17 0b       	sbc	r17, r23
    ee24:	a8 01       	movw	r20, r16
    ee26:	88 e2       	ldi	r24, 0x28	; 40
    ee28:	98 e1       	ldi	r25, 0x18	; 24
    ee2a:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <strncpy>
    ee2e:	f8 01       	movw	r30, r16
    ee30:	e8 5d       	subi	r30, 0xD8	; 216
    ee32:	f7 4e       	sbci	r31, 0xE7	; 231
    ee34:	10 82       	st	Z, r1
    ee36:	88 e2       	ldi	r24, 0x28	; 40
    ee38:	98 e1       	ldi	r25, 0x18	; 24
    ee3a:	ca 5e       	subi	r28, 0xEA	; 234
    ee3c:	de 4f       	sbci	r29, 0xFE	; 254
    ee3e:	e4 e0       	ldi	r30, 0x04	; 4
    ee40:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000ee44 <perror>:
    ee44:	ad b7       	in	r26, 0x3d	; 61
    ee46:	be b7       	in	r27, 0x3e	; 62
    ee48:	17 97       	sbiw	r26, 0x07	; 7
    ee4a:	0f b6       	in	r0, 0x3f	; 63
    ee4c:	f8 94       	cli
    ee4e:	be bf       	out	0x3e, r27	; 62
    ee50:	0f be       	out	0x3f, r0	; 63
    ee52:	ad bf       	out	0x3d, r26	; 61
    ee54:	20 91 b3 1c 	lds	r18, 0x1CB3	; 0x801cb3 <errno>
    ee58:	30 91 b4 1c 	lds	r19, 0x1CB4	; 0x801cb4 <errno+0x1>
    ee5c:	23 32       	cpi	r18, 0x23	; 35
    ee5e:	31 05       	cpc	r19, r1
    ee60:	40 f4       	brcc	.+16     	; 0xee72 <perror+0x2e>
    ee62:	22 0f       	add	r18, r18
    ee64:	33 1f       	adc	r19, r19
    ee66:	f9 01       	movw	r30, r18
    ee68:	ea 5c       	subi	r30, 0xCA	; 202
    ee6a:	fe 4f       	sbci	r31, 0xFE	; 254
    ee6c:	20 81       	ld	r18, Z
    ee6e:	31 81       	ldd	r19, Z+1	; 0x01
    ee70:	04 c0       	rjmp	.+8      	; 0xee7a <perror+0x36>
    ee72:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    ee76:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    ee7a:	00 97       	sbiw	r24, 0x00	; 0
    ee7c:	99 f0       	breq	.+38     	; 0xeea4 <perror+0x60>
    ee7e:	fc 01       	movw	r30, r24
    ee80:	40 81       	ld	r20, Z
    ee82:	44 23       	and	r20, r20
    ee84:	79 f0       	breq	.+30     	; 0xeea4 <perror+0x60>
    ee86:	ed b7       	in	r30, 0x3d	; 61
    ee88:	fe b7       	in	r31, 0x3e	; 62
    ee8a:	37 83       	std	Z+7, r19	; 0x07
    ee8c:	26 83       	std	Z+6, r18	; 0x06
    ee8e:	95 83       	std	Z+5, r25	; 0x05
    ee90:	84 83       	std	Z+4, r24	; 0x04
    ee92:	88 e9       	ldi	r24, 0x98	; 152
    ee94:	9b e0       	ldi	r25, 0x0B	; 11
    ee96:	a0 e0       	ldi	r26, 0x00	; 0
    ee98:	81 83       	std	Z+1, r24	; 0x01
    ee9a:	92 83       	std	Z+2, r25	; 0x02
    ee9c:	a3 83       	std	Z+3, r26	; 0x03
    ee9e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    eea2:	0c c0       	rjmp	.+24     	; 0xeebc <perror+0x78>
    eea4:	ed b7       	in	r30, 0x3d	; 61
    eea6:	fe b7       	in	r31, 0x3e	; 62
    eea8:	35 83       	std	Z+5, r19	; 0x05
    eeaa:	24 83       	std	Z+4, r18	; 0x04
    eeac:	84 e9       	ldi	r24, 0x94	; 148
    eeae:	9b e0       	ldi	r25, 0x0B	; 11
    eeb0:	a0 e0       	ldi	r26, 0x00	; 0
    eeb2:	81 83       	std	Z+1, r24	; 0x01
    eeb4:	92 83       	std	Z+2, r25	; 0x02
    eeb6:	a3 83       	std	Z+3, r26	; 0x03
    eeb8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    eebc:	ad b7       	in	r26, 0x3d	; 61
    eebe:	be b7       	in	r27, 0x3e	; 62
    eec0:	17 96       	adiw	r26, 0x07	; 7
    eec2:	0f b6       	in	r0, 0x3f	; 63
    eec4:	f8 94       	cli
    eec6:	be bf       	out	0x3e, r27	; 62
    eec8:	0f be       	out	0x3f, r0	; 63
    eeca:	ad bf       	out	0x3d, r26	; 61
    eecc:	08 95       	ret

0000eece <fdevopen>:
    eece:	0f 93       	push	r16
    eed0:	1f 93       	push	r17
    eed2:	cf 93       	push	r28
    eed4:	df 93       	push	r29
    eed6:	00 97       	sbiw	r24, 0x00	; 0
    eed8:	31 f4       	brne	.+12     	; 0xeee6 <fdevopen+0x18>
    eeda:	61 15       	cp	r22, r1
    eedc:	71 05       	cpc	r23, r1
    eede:	19 f4       	brne	.+6      	; 0xeee6 <fdevopen+0x18>
    eee0:	80 e0       	ldi	r24, 0x00	; 0
    eee2:	90 e0       	ldi	r25, 0x00	; 0
    eee4:	3a c0       	rjmp	.+116    	; 0xef5a <fdevopen+0x8c>
    eee6:	8b 01       	movw	r16, r22
    eee8:	ec 01       	movw	r28, r24
    eeea:	6e e0       	ldi	r22, 0x0E	; 14
    eeec:	70 e0       	ldi	r23, 0x00	; 0
    eeee:	81 e0       	ldi	r24, 0x01	; 1
    eef0:	90 e0       	ldi	r25, 0x00	; 0
    eef2:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
    eef6:	fc 01       	movw	r30, r24
    eef8:	89 2b       	or	r24, r25
    eefa:	91 f3       	breq	.-28     	; 0xeee0 <fdevopen+0x12>
    eefc:	80 e8       	ldi	r24, 0x80	; 128
    eefe:	83 83       	std	Z+3, r24	; 0x03
    ef00:	01 15       	cp	r16, r1
    ef02:	11 05       	cpc	r17, r1
    ef04:	71 f0       	breq	.+28     	; 0xef22 <fdevopen+0x54>
    ef06:	13 87       	std	Z+11, r17	; 0x0b
    ef08:	02 87       	std	Z+10, r16	; 0x0a
    ef0a:	81 e8       	ldi	r24, 0x81	; 129
    ef0c:	83 83       	std	Z+3, r24	; 0x03
    ef0e:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    ef12:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    ef16:	89 2b       	or	r24, r25
    ef18:	21 f4       	brne	.+8      	; 0xef22 <fdevopen+0x54>
    ef1a:	f0 93 b6 1c 	sts	0x1CB6, r31	; 0x801cb6 <__iob+0x1>
    ef1e:	e0 93 b5 1c 	sts	0x1CB5, r30	; 0x801cb5 <__iob>
    ef22:	20 97       	sbiw	r28, 0x00	; 0
    ef24:	c9 f0       	breq	.+50     	; 0xef58 <fdevopen+0x8a>
    ef26:	d1 87       	std	Z+9, r29	; 0x09
    ef28:	c0 87       	std	Z+8, r28	; 0x08
    ef2a:	83 81       	ldd	r24, Z+3	; 0x03
    ef2c:	82 60       	ori	r24, 0x02	; 2
    ef2e:	83 83       	std	Z+3, r24	; 0x03
    ef30:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    ef34:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    ef38:	89 2b       	or	r24, r25
    ef3a:	21 f4       	brne	.+8      	; 0xef44 <fdevopen+0x76>
    ef3c:	f0 93 b8 1c 	sts	0x1CB8, r31	; 0x801cb8 <__iob+0x3>
    ef40:	e0 93 b7 1c 	sts	0x1CB7, r30	; 0x801cb7 <__iob+0x2>
    ef44:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    ef48:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    ef4c:	89 2b       	or	r24, r25
    ef4e:	21 f4       	brne	.+8      	; 0xef58 <fdevopen+0x8a>
    ef50:	f0 93 ba 1c 	sts	0x1CBA, r31	; 0x801cba <__iob+0x5>
    ef54:	e0 93 b9 1c 	sts	0x1CB9, r30	; 0x801cb9 <__iob+0x4>
    ef58:	cf 01       	movw	r24, r30
    ef5a:	df 91       	pop	r29
    ef5c:	cf 91       	pop	r28
    ef5e:	1f 91       	pop	r17
    ef60:	0f 91       	pop	r16
    ef62:	08 95       	ret

0000ef64 <fat_time_to_unix>:
    ef64:	a6 e1       	ldi	r26, 0x16	; 22
    ef66:	b0 e0       	ldi	r27, 0x00	; 0
    ef68:	e8 eb       	ldi	r30, 0xB8	; 184
    ef6a:	f7 e7       	ldi	r31, 0x77	; 119
    ef6c:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    ef70:	fe 01       	movw	r30, r28
    ef72:	31 96       	adiw	r30, 0x01	; 1
    ef74:	26 e1       	ldi	r18, 0x16	; 22
    ef76:	df 01       	movw	r26, r30
    ef78:	1d 92       	st	X+, r1
    ef7a:	2a 95       	dec	r18
    ef7c:	e9 f7       	brne	.-6      	; 0xef78 <fat_time_to_unix+0x14>
    ef7e:	9b 01       	movw	r18, r22
    ef80:	22 0f       	add	r18, r18
    ef82:	33 1f       	adc	r19, r19
    ef84:	2e 73       	andi	r18, 0x3E	; 62
    ef86:	33 27       	eor	r19, r19
    ef88:	3a 83       	std	Y+2, r19	; 0x02
    ef8a:	29 83       	std	Y+1, r18	; 0x01
    ef8c:	9b 01       	movw	r18, r22
    ef8e:	55 e0       	ldi	r21, 0x05	; 5
    ef90:	36 95       	lsr	r19
    ef92:	27 95       	ror	r18
    ef94:	5a 95       	dec	r21
    ef96:	e1 f7       	brne	.-8      	; 0xef90 <fat_time_to_unix+0x2c>
    ef98:	2f 73       	andi	r18, 0x3F	; 63
    ef9a:	33 27       	eor	r19, r19
    ef9c:	3c 83       	std	Y+4, r19	; 0x04
    ef9e:	2b 83       	std	Y+3, r18	; 0x03
    efa0:	27 2f       	mov	r18, r23
    efa2:	26 95       	lsr	r18
    efa4:	26 95       	lsr	r18
    efa6:	26 95       	lsr	r18
    efa8:	2d 83       	std	Y+5, r18	; 0x05
    efaa:	1e 82       	std	Y+6, r1	; 0x06
    efac:	9c 01       	movw	r18, r24
    efae:	2f 71       	andi	r18, 0x1F	; 31
    efb0:	33 27       	eor	r19, r19
    efb2:	38 87       	std	Y+8, r19	; 0x08
    efb4:	2f 83       	std	Y+7, r18	; 0x07
    efb6:	9c 01       	movw	r18, r24
    efb8:	65 e0       	ldi	r22, 0x05	; 5
    efba:	36 95       	lsr	r19
    efbc:	27 95       	ror	r18
    efbe:	6a 95       	dec	r22
    efc0:	e1 f7       	brne	.-8      	; 0xefba <fat_time_to_unix+0x56>
    efc2:	2f 70       	andi	r18, 0x0F	; 15
    efc4:	33 27       	eor	r19, r19
    efc6:	21 50       	subi	r18, 0x01	; 1
    efc8:	31 09       	sbc	r19, r1
    efca:	3a 87       	std	Y+10, r19	; 0x0a
    efcc:	29 87       	std	Y+9, r18	; 0x09
    efce:	9c 01       	movw	r18, r24
    efd0:	23 2f       	mov	r18, r19
    efd2:	33 27       	eor	r19, r19
    efd4:	26 95       	lsr	r18
    efd6:	20 5b       	subi	r18, 0xB0	; 176
    efd8:	3f 4f       	sbci	r19, 0xFF	; 255
    efda:	3c 87       	std	Y+12, r19	; 0x0c
    efdc:	2b 87       	std	Y+11, r18	; 0x0b
    efde:	cf 01       	movw	r24, r30
    efe0:	0e 94 14 38 	call	0x7028	; 0x7028 <timegm>
    efe4:	66 96       	adiw	r28, 0x16	; 22
    efe6:	e2 e0       	ldi	r30, 0x02	; 2
    efe8:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000efec <stat>:
    efec:	a6 e1       	ldi	r26, 0x16	; 22
    efee:	b1 e0       	ldi	r27, 0x01	; 1
    eff0:	ec ef       	ldi	r30, 0xFC	; 252
    eff2:	f7 e7       	ldi	r31, 0x77	; 119
    eff4:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
    eff8:	6c 01       	movw	r12, r24
    effa:	8b 01       	movw	r16, r22
    effc:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f000:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f004:	6c ef       	ldi	r22, 0xFC	; 252
    f006:	78 e0       	ldi	r23, 0x08	; 8
    f008:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
    f00c:	89 2b       	or	r24, r25
    f00e:	01 f1       	breq	.+64     	; 0xf050 <stat+0x64>
    f010:	f8 01       	movw	r30, r16
    f012:	14 a2       	std	Z+36, r1	; 0x24
    f014:	15 a2       	std	Z+37, r1	; 0x25
    f016:	16 a2       	std	Z+38, r1	; 0x26
    f018:	17 a2       	std	Z+39, r1	; 0x27
    f01a:	10 a6       	std	Z+40, r1	; 0x28
    f01c:	11 a6       	std	Z+41, r1	; 0x29
    f01e:	12 a6       	std	Z+42, r1	; 0x2a
    f020:	13 a6       	std	Z+43, r1	; 0x2b
    f022:	14 a6       	std	Z+44, r1	; 0x2c
    f024:	15 a6       	std	Z+45, r1	; 0x2d
    f026:	16 a6       	std	Z+46, r1	; 0x2e
    f028:	17 a6       	std	Z+47, r1	; 0x2f
    f02a:	11 8a       	std	Z+17, r1	; 0x11
    f02c:	10 8a       	std	Z+16, r1	; 0x10
    f02e:	13 8a       	std	Z+19, r1	; 0x13
    f030:	12 8a       	std	Z+18, r1	; 0x12
    f032:	10 8e       	std	Z+24, r1	; 0x18
    f034:	11 8e       	std	Z+25, r1	; 0x19
    f036:	12 8e       	std	Z+26, r1	; 0x1a
    f038:	13 8e       	std	Z+27, r1	; 0x1b
    f03a:	80 e0       	ldi	r24, 0x00	; 0
    f03c:	90 e4       	ldi	r25, 0x40	; 64
    f03e:	a0 e0       	ldi	r26, 0x00	; 0
    f040:	b0 e0       	ldi	r27, 0x00	; 0
    f042:	80 87       	std	Z+8, r24	; 0x08
    f044:	91 87       	std	Z+9, r25	; 0x09
    f046:	a2 87       	std	Z+10, r26	; 0x0a
    f048:	b3 87       	std	Z+11, r27	; 0x0b
    f04a:	e1 2c       	mov	r14, r1
    f04c:	f1 2c       	mov	r15, r1
    f04e:	62 c0       	rjmp	.+196    	; 0xf114 <stat+0x128>
    f050:	66 ea       	ldi	r22, 0xA6	; 166
    f052:	78 e0       	ldi	r23, 0x08	; 8
    f054:	c6 01       	movw	r24, r12
    f056:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
    f05a:	89 2b       	or	r24, r25
    f05c:	c9 f6       	brne	.-78     	; 0xf010 <stat+0x24>
    f05e:	6d ef       	ldi	r22, 0xFD	; 253
    f060:	72 e1       	ldi	r23, 0x12	; 18
    f062:	c6 01       	movw	r24, r12
    f064:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
    f068:	7c 01       	movw	r14, r24
    f06a:	89 2b       	or	r24, r25
    f06c:	89 f6       	brne	.-94     	; 0xf010 <stat+0x24>
    f06e:	be 01       	movw	r22, r28
    f070:	6f 5f       	subi	r22, 0xFF	; 255
    f072:	7f 4f       	sbci	r23, 0xFF	; 255
    f074:	c6 01       	movw	r24, r12
    f076:	0e 94 af 62 	call	0xc55e	; 0xc55e <f_stat>
    f07a:	00 97       	sbiw	r24, 0x00	; 0
    f07c:	a9 f0       	breq	.+42     	; 0xf0a8 <stat+0xbc>
    f07e:	84 31       	cpi	r24, 0x14	; 20
    f080:	91 05       	cpc	r25, r1
    f082:	40 f4       	brcc	.+16     	; 0xf094 <stat+0xa8>
    f084:	fc 01       	movw	r30, r24
    f086:	ea 55       	subi	r30, 0x5A	; 90
    f088:	f4 4f       	sbci	r31, 0xF4	; 244
    f08a:	80 81       	ld	r24, Z
    f08c:	08 2e       	mov	r0, r24
    f08e:	00 0c       	add	r0, r0
    f090:	99 0b       	sbc	r25, r25
    f092:	02 c0       	rjmp	.+4      	; 0xf098 <stat+0xac>
    f094:	83 e2       	ldi	r24, 0x23	; 35
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f09c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f0a0:	ee 24       	eor	r14, r14
    f0a2:	ea 94       	dec	r14
    f0a4:	fe 2c       	mov	r15, r14
    f0a6:	36 c0       	rjmp	.+108    	; 0xf114 <stat+0x128>
    f0a8:	89 81       	ldd	r24, Y+1	; 0x01
    f0aa:	9a 81       	ldd	r25, Y+2	; 0x02
    f0ac:	ab 81       	ldd	r26, Y+3	; 0x03
    f0ae:	bc 81       	ldd	r27, Y+4	; 0x04
    f0b0:	f8 01       	movw	r30, r16
    f0b2:	80 8f       	std	Z+24, r24	; 0x18
    f0b4:	91 8f       	std	Z+25, r25	; 0x19
    f0b6:	a2 8f       	std	Z+26, r26	; 0x1a
    f0b8:	b3 8f       	std	Z+27, r27	; 0x1b
    f0ba:	6f 81       	ldd	r22, Y+7	; 0x07
    f0bc:	78 85       	ldd	r23, Y+8	; 0x08
    f0be:	8d 81       	ldd	r24, Y+5	; 0x05
    f0c0:	9e 81       	ldd	r25, Y+6	; 0x06
    f0c2:	50 df       	rcall	.-352    	; 0xef64 <fat_time_to_unix>
    f0c4:	f8 01       	movw	r30, r16
    f0c6:	64 a3       	std	Z+36, r22	; 0x24
    f0c8:	75 a3       	std	Z+37, r23	; 0x25
    f0ca:	86 a3       	std	Z+38, r24	; 0x26
    f0cc:	97 a3       	std	Z+39, r25	; 0x27
    f0ce:	60 a7       	std	Z+40, r22	; 0x28
    f0d0:	71 a7       	std	Z+41, r23	; 0x29
    f0d2:	82 a7       	std	Z+42, r24	; 0x2a
    f0d4:	93 a7       	std	Z+43, r25	; 0x2b
    f0d6:	64 a7       	std	Z+44, r22	; 0x2c
    f0d8:	75 a7       	std	Z+45, r23	; 0x2d
    f0da:	86 a7       	std	Z+46, r24	; 0x2e
    f0dc:	97 a7       	std	Z+47, r25	; 0x2f
    f0de:	29 85       	ldd	r18, Y+9	; 0x09
    f0e0:	20 fd       	sbrc	r18, 0
    f0e2:	03 c0       	rjmp	.+6      	; 0xf0ea <stat+0xfe>
    f0e4:	8f ef       	ldi	r24, 0xFF	; 255
    f0e6:	91 e0       	ldi	r25, 0x01	; 1
    f0e8:	02 c0       	rjmp	.+4      	; 0xf0ee <stat+0x102>
    f0ea:	8d e6       	ldi	r24, 0x6D	; 109
    f0ec:	91 e0       	ldi	r25, 0x01	; 1
    f0ee:	48 ee       	ldi	r20, 0xE8	; 232
    f0f0:	53 e0       	ldi	r21, 0x03	; 3
    f0f2:	f8 01       	movw	r30, r16
    f0f4:	51 8b       	std	Z+17, r21	; 0x11
    f0f6:	40 8b       	std	Z+16, r20	; 0x10
    f0f8:	53 8b       	std	Z+19, r21	; 0x13
    f0fa:	42 8b       	std	Z+18, r20	; 0x12
    f0fc:	24 ff       	sbrs	r18, 4
    f0fe:	02 c0       	rjmp	.+4      	; 0xf104 <stat+0x118>
    f100:	90 64       	ori	r25, 0x40	; 64
    f102:	01 c0       	rjmp	.+2      	; 0xf106 <stat+0x11a>
    f104:	90 68       	ori	r25, 0x80	; 128
    f106:	a0 e0       	ldi	r26, 0x00	; 0
    f108:	b0 e0       	ldi	r27, 0x00	; 0
    f10a:	f8 01       	movw	r30, r16
    f10c:	80 87       	std	Z+8, r24	; 0x08
    f10e:	91 87       	std	Z+9, r25	; 0x09
    f110:	a2 87       	std	Z+10, r26	; 0x0a
    f112:	b3 87       	std	Z+11, r27	; 0x0b
    f114:	c7 01       	movw	r24, r14
    f116:	ca 5e       	subi	r28, 0xEA	; 234
    f118:	de 4f       	sbci	r29, 0xFE	; 254
    f11a:	e8 e0       	ldi	r30, 0x08	; 8
    f11c:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0000f120 <unix_time_to_fat>:
    f120:	a4 e0       	ldi	r26, 0x04	; 4
    f122:	b0 e0       	ldi	r27, 0x00	; 0
    f124:	e6 e9       	ldi	r30, 0x96	; 150
    f126:	f8 e7       	ldi	r31, 0x78	; 120
    f128:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
    f12c:	69 83       	std	Y+1, r22	; 0x01
    f12e:	7a 83       	std	Y+2, r23	; 0x02
    f130:	8b 83       	std	Y+3, r24	; 0x03
    f132:	9c 83       	std	Y+4, r25	; 0x04
    f134:	7a 01       	movw	r14, r20
    f136:	89 01       	movw	r16, r18
    f138:	ce 01       	movw	r24, r28
    f13a:	01 96       	adiw	r24, 0x01	; 1
    f13c:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <gmtime>
    f140:	fc 01       	movw	r30, r24
    f142:	22 85       	ldd	r18, Z+10	; 0x0a
    f144:	33 85       	ldd	r19, Z+11	; 0x0b
    f146:	20 55       	subi	r18, 0x50	; 80
    f148:	31 09       	sbc	r19, r1
    f14a:	c9 01       	movw	r24, r18
    f14c:	98 2f       	mov	r25, r24
    f14e:	88 27       	eor	r24, r24
    f150:	99 0f       	add	r25, r25
    f152:	20 85       	ldd	r18, Z+8	; 0x08
    f154:	31 85       	ldd	r19, Z+9	; 0x09
    f156:	2f 5f       	subi	r18, 0xFF	; 255
    f158:	3f 4f       	sbci	r19, 0xFF	; 255
    f15a:	45 e0       	ldi	r20, 0x05	; 5
    f15c:	22 0f       	add	r18, r18
    f15e:	33 1f       	adc	r19, r19
    f160:	4a 95       	dec	r20
    f162:	e1 f7       	brne	.-8      	; 0xf15c <unix_time_to_fat+0x3c>
    f164:	28 2b       	or	r18, r24
    f166:	39 2b       	or	r19, r25
    f168:	86 81       	ldd	r24, Z+6	; 0x06
    f16a:	97 81       	ldd	r25, Z+7	; 0x07
    f16c:	28 2b       	or	r18, r24
    f16e:	39 2b       	or	r19, r25
    f170:	d7 01       	movw	r26, r14
    f172:	2d 93       	st	X+, r18
    f174:	3c 93       	st	X, r19
    f176:	84 81       	ldd	r24, Z+4	; 0x04
    f178:	20 e0       	ldi	r18, 0x00	; 0
    f17a:	30 e0       	ldi	r19, 0x00	; 0
    f17c:	38 2f       	mov	r19, r24
    f17e:	33 0f       	add	r19, r19
    f180:	33 0f       	add	r19, r19
    f182:	33 0f       	add	r19, r19
    f184:	82 81       	ldd	r24, Z+2	; 0x02
    f186:	93 81       	ldd	r25, Z+3	; 0x03
    f188:	55 e0       	ldi	r21, 0x05	; 5
    f18a:	88 0f       	add	r24, r24
    f18c:	99 1f       	adc	r25, r25
    f18e:	5a 95       	dec	r21
    f190:	e1 f7       	brne	.-8      	; 0xf18a <unix_time_to_fat+0x6a>
    f192:	82 2b       	or	r24, r18
    f194:	93 2b       	or	r25, r19
    f196:	20 81       	ld	r18, Z
    f198:	31 81       	ldd	r19, Z+1	; 0x01
    f19a:	36 95       	lsr	r19
    f19c:	27 95       	ror	r18
    f19e:	82 2b       	or	r24, r18
    f1a0:	93 2b       	or	r25, r19
    f1a2:	f8 01       	movw	r30, r16
    f1a4:	91 83       	std	Z+1, r25	; 0x01
    f1a6:	80 83       	st	Z, r24
    f1a8:	24 96       	adiw	r28, 0x04	; 4
    f1aa:	e6 e0       	ldi	r30, 0x06	; 6
    f1ac:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0000f1b0 <utime>:
    f1b0:	aa e1       	ldi	r26, 0x1A	; 26
    f1b2:	b1 e0       	ldi	r27, 0x01	; 1
    f1b4:	ee ed       	ldi	r30, 0xDE	; 222
    f1b6:	f8 e7       	ldi	r31, 0x78	; 120
    f1b8:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
    f1bc:	8c 01       	movw	r16, r24
    f1be:	61 15       	cp	r22, r1
    f1c0:	71 05       	cpc	r23, r1
    f1c2:	31 f0       	breq	.+12     	; 0xf1d0 <utime+0x20>
    f1c4:	fb 01       	movw	r30, r22
    f1c6:	64 81       	ldd	r22, Z+4	; 0x04
    f1c8:	75 81       	ldd	r23, Z+5	; 0x05
    f1ca:	86 81       	ldd	r24, Z+6	; 0x06
    f1cc:	97 81       	ldd	r25, Z+7	; 0x07
    f1ce:	04 c0       	rjmp	.+8      	; 0xf1d8 <utime+0x28>
    f1d0:	80 e0       	ldi	r24, 0x00	; 0
    f1d2:	90 e0       	ldi	r25, 0x00	; 0
    f1d4:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <time>
    f1d8:	9e 01       	movw	r18, r28
    f1da:	29 5e       	subi	r18, 0xE9	; 233
    f1dc:	3e 4f       	sbci	r19, 0xFE	; 254
    f1de:	ae 01       	movw	r20, r28
    f1e0:	47 5e       	subi	r20, 0xE7	; 231
    f1e2:	5e 4f       	sbci	r21, 0xFE	; 254
    f1e4:	9d df       	rcall	.-198    	; 0xf120 <unix_time_to_fat>
    f1e6:	c7 5e       	subi	r28, 0xE7	; 231
    f1e8:	de 4f       	sbci	r29, 0xFE	; 254
    f1ea:	88 81       	ld	r24, Y
    f1ec:	99 81       	ldd	r25, Y+1	; 0x01
    f1ee:	c9 51       	subi	r28, 0x19	; 25
    f1f0:	d1 40       	sbci	r29, 0x01	; 1
    f1f2:	9e 83       	std	Y+6, r25	; 0x06
    f1f4:	8d 83       	std	Y+5, r24	; 0x05
    f1f6:	c9 5e       	subi	r28, 0xE9	; 233
    f1f8:	de 4f       	sbci	r29, 0xFE	; 254
    f1fa:	88 81       	ld	r24, Y
    f1fc:	99 81       	ldd	r25, Y+1	; 0x01
    f1fe:	c7 51       	subi	r28, 0x17	; 23
    f200:	d1 40       	sbci	r29, 0x01	; 1
    f202:	98 87       	std	Y+8, r25	; 0x08
    f204:	8f 83       	std	Y+7, r24	; 0x07
    f206:	be 01       	movw	r22, r28
    f208:	6f 5f       	subi	r22, 0xFF	; 255
    f20a:	7f 4f       	sbci	r23, 0xFF	; 255
    f20c:	c8 01       	movw	r24, r16
    f20e:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <f_utime>
    f212:	84 31       	cpi	r24, 0x14	; 20
    f214:	91 05       	cpc	r25, r1
    f216:	40 f4       	brcc	.+16     	; 0xf228 <utime+0x78>
    f218:	fc 01       	movw	r30, r24
    f21a:	ea 55       	subi	r30, 0x5A	; 90
    f21c:	f4 4f       	sbci	r31, 0xF4	; 244
    f21e:	80 81       	ld	r24, Z
    f220:	08 2e       	mov	r0, r24
    f222:	00 0c       	add	r0, r0
    f224:	99 0b       	sbc	r25, r25
    f226:	02 c0       	rjmp	.+4      	; 0xf22c <utime+0x7c>
    f228:	83 e2       	ldi	r24, 0x23	; 35
    f22a:	90 e0       	ldi	r25, 0x00	; 0
    f22c:	c6 5e       	subi	r28, 0xE6	; 230
    f22e:	de 4f       	sbci	r29, 0xFE	; 254
    f230:	e4 e0       	ldi	r30, 0x04	; 4
    f232:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

0000f236 <fileno_to_fatfs>:
    f236:	83 30       	cpi	r24, 0x03	; 3
    f238:	91 05       	cpc	r25, r1
    f23a:	48 f4       	brcc	.+18     	; 0xf24e <fileno_to_fatfs+0x18>
    f23c:	89 e0       	ldi	r24, 0x09	; 9
    f23e:	90 e0       	ldi	r25, 0x00	; 0
    f240:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f244:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f248:	80 e0       	ldi	r24, 0x00	; 0
    f24a:	90 e0       	ldi	r25, 0x00	; 0
    f24c:	08 95       	ret
    f24e:	60 dc       	rcall	.-1856   	; 0xeb10 <fileno_to_stream>
    f250:	00 97       	sbiw	r24, 0x00	; 0
    f252:	d1 f3       	breq	.-12     	; 0xf248 <fileno_to_fatfs+0x12>
    f254:	fc 01       	movw	r30, r24
    f256:	84 85       	ldd	r24, Z+12	; 0x0c
    f258:	95 85       	ldd	r25, Z+13	; 0x0d
    f25a:	00 97       	sbiw	r24, 0x00	; 0
    f25c:	79 f3       	breq	.-34     	; 0xf23c <fileno_to_fatfs+0x6>
    f25e:	08 95       	ret

0000f260 <ftell>:
    f260:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f264:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f268:	37 dc       	rcall	.-1938   	; 0xead8 <fileno>
    f26a:	83 30       	cpi	r24, 0x03	; 3
    f26c:	91 05       	cpc	r25, r1
    f26e:	48 f0       	brcs	.+18     	; 0xf282 <ftell+0x22>
    f270:	e2 df       	rcall	.-60     	; 0xf236 <fileno_to_fatfs>
    f272:	00 97       	sbiw	r24, 0x00	; 0
    f274:	51 f4       	brne	.+20     	; 0xf28a <ftell+0x2a>
    f276:	89 e0       	ldi	r24, 0x09	; 9
    f278:	90 e0       	ldi	r25, 0x00	; 0
    f27a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f27e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f282:	6f ef       	ldi	r22, 0xFF	; 255
    f284:	7f ef       	ldi	r23, 0xFF	; 255
    f286:	cb 01       	movw	r24, r22
    f288:	08 95       	ret
    f28a:	fc 01       	movw	r30, r24
    f28c:	60 89       	ldd	r22, Z+16	; 0x10
    f28e:	71 89       	ldd	r23, Z+17	; 0x11
    f290:	82 89       	ldd	r24, Z+18	; 0x12
    f292:	93 89       	ldd	r25, Z+19	; 0x13
    f294:	08 95       	ret

0000f296 <lseek>:
    f296:	a3 e0       	ldi	r26, 0x03	; 3
    f298:	b0 e0       	ldi	r27, 0x00	; 0
    f29a:	e1 e5       	ldi	r30, 0x51	; 81
    f29c:	f9 e7       	ldi	r31, 0x79	; 121
    f29e:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
    f2a2:	5c 01       	movw	r10, r24
    f2a4:	6a 01       	movw	r12, r20
    f2a6:	7b 01       	movw	r14, r22
    f2a8:	89 01       	movw	r16, r18
    f2aa:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f2ae:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f2b2:	c1 df       	rcall	.-126    	; 0xf236 <fileno_to_fatfs>
    f2b4:	ec 01       	movw	r28, r24
    f2b6:	89 2b       	or	r24, r25
    f2b8:	19 f4       	brne	.+6      	; 0xf2c0 <lseek+0x2a>
    f2ba:	88 e1       	ldi	r24, 0x18	; 24
    f2bc:	90 e0       	ldi	r25, 0x00	; 0
    f2be:	26 c0       	rjmp	.+76     	; 0xf30c <lseek+0x76>
    f2c0:	83 e0       	ldi	r24, 0x03	; 3
    f2c2:	a8 16       	cp	r10, r24
    f2c4:	b1 04       	cpc	r11, r1
    f2c6:	d0 f1       	brcs	.+116    	; 0xf33c <lseek+0xa6>
    f2c8:	c5 01       	movw	r24, r10
    f2ca:	22 dc       	rcall	.-1980   	; 0xeb10 <fileno_to_stream>
    f2cc:	fc 01       	movw	r30, r24
    f2ce:	93 81       	ldd	r25, Z+3	; 0x03
    f2d0:	90 64       	ori	r25, 0x40	; 64
    f2d2:	93 83       	std	Z+3, r25	; 0x03
    f2d4:	02 30       	cpi	r16, 0x02	; 2
    f2d6:	11 05       	cpc	r17, r1
    f2d8:	a9 f5       	brne	.+106    	; 0xf344 <lseek+0xae>
    f2da:	8a 85       	ldd	r24, Y+10	; 0x0a
    f2dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    f2de:	ac 85       	ldd	r26, Y+12	; 0x0c
    f2e0:	bd 85       	ldd	r27, Y+13	; 0x0d
    f2e2:	c8 0e       	add	r12, r24
    f2e4:	d9 1e       	adc	r13, r25
    f2e6:	ea 1e       	adc	r14, r26
    f2e8:	fb 1e       	adc	r15, r27
    f2ea:	b7 01       	movw	r22, r14
    f2ec:	a6 01       	movw	r20, r12
    f2ee:	ce 01       	movw	r24, r28
    f2f0:	0e 94 29 5f 	call	0xbe52	; 0xbe52 <f_lseek>
    f2f4:	00 97       	sbiw	r24, 0x00	; 0
    f2f6:	79 f0       	breq	.+30     	; 0xf316 <lseek+0x80>
    f2f8:	84 31       	cpi	r24, 0x14	; 20
    f2fa:	91 05       	cpc	r25, r1
    f2fc:	58 f5       	brcc	.+86     	; 0xf354 <lseek+0xbe>
    f2fe:	fc 01       	movw	r30, r24
    f300:	ea 55       	subi	r30, 0x5A	; 90
    f302:	f4 4f       	sbci	r31, 0xF4	; 244
    f304:	80 81       	ld	r24, Z
    f306:	08 2e       	mov	r0, r24
    f308:	00 0c       	add	r0, r0
    f30a:	99 0b       	sbc	r25, r25
    f30c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f310:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f314:	13 c0       	rjmp	.+38     	; 0xf33c <lseek+0xa6>
    f316:	68 89       	ldd	r22, Y+16	; 0x10
    f318:	79 89       	ldd	r23, Y+17	; 0x11
    f31a:	8a 89       	ldd	r24, Y+18	; 0x12
    f31c:	9b 89       	ldd	r25, Y+19	; 0x13
    f31e:	c6 16       	cp	r12, r22
    f320:	d7 06       	cpc	r13, r23
    f322:	e8 06       	cpc	r14, r24
    f324:	f9 06       	cpc	r15, r25
    f326:	c9 f0       	breq	.+50     	; 0xf35a <lseek+0xc4>
    f328:	80 ea       	ldi	r24, 0xA0	; 160
    f32a:	9b e0       	ldi	r25, 0x0B	; 11
    f32c:	a0 e0       	ldi	r26, 0x00	; 0
    f32e:	ed b7       	in	r30, 0x3d	; 61
    f330:	fe b7       	in	r31, 0x3e	; 62
    f332:	81 83       	std	Z+1, r24	; 0x01
    f334:	92 83       	std	Z+2, r25	; 0x02
    f336:	a3 83       	std	Z+3, r26	; 0x03
    f338:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    f33c:	6f ef       	ldi	r22, 0xFF	; 255
    f33e:	7f ef       	ldi	r23, 0xFF	; 255
    f340:	cb 01       	movw	r24, r22
    f342:	0b c0       	rjmp	.+22     	; 0xf35a <lseek+0xc4>
    f344:	01 30       	cpi	r16, 0x01	; 1
    f346:	11 05       	cpc	r17, r1
    f348:	81 f6       	brne	.-96     	; 0xf2ea <lseek+0x54>
    f34a:	88 89       	ldd	r24, Y+16	; 0x10
    f34c:	99 89       	ldd	r25, Y+17	; 0x11
    f34e:	aa 89       	ldd	r26, Y+18	; 0x12
    f350:	bb 89       	ldd	r27, Y+19	; 0x13
    f352:	c7 cf       	rjmp	.-114    	; 0xf2e2 <lseek+0x4c>
    f354:	83 e2       	ldi	r24, 0x23	; 35
    f356:	90 e0       	ldi	r25, 0x00	; 0
    f358:	d9 cf       	rjmp	.-78     	; 0xf30c <lseek+0x76>
    f35a:	cd b7       	in	r28, 0x3d	; 61
    f35c:	de b7       	in	r29, 0x3e	; 62
    f35e:	23 96       	adiw	r28, 0x03	; 3
    f360:	ea e0       	ldi	r30, 0x0A	; 10
    f362:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

0000f366 <fseek>:
    f366:	cf 92       	push	r12
    f368:	df 92       	push	r13
    f36a:	ef 92       	push	r14
    f36c:	ff 92       	push	r15
    f36e:	cf 93       	push	r28
    f370:	df 93       	push	r29
    f372:	6a 01       	movw	r12, r20
    f374:	7b 01       	movw	r14, r22
    f376:	e9 01       	movw	r28, r18
    f378:	af db       	rcall	.-2210   	; 0xead8 <fileno>
    f37a:	97 fd       	sbrc	r25, 7
    f37c:	12 c0       	rjmp	.+36     	; 0xf3a2 <fseek+0x3c>
    f37e:	9e 01       	movw	r18, r28
    f380:	b7 01       	movw	r22, r14
    f382:	a6 01       	movw	r20, r12
    f384:	88 df       	rcall	.-240    	; 0xf296 <lseek>
    f386:	21 e0       	ldi	r18, 0x01	; 1
    f388:	30 e0       	ldi	r19, 0x00	; 0
    f38a:	6f 3f       	cpi	r22, 0xFF	; 255
    f38c:	7f 4f       	sbci	r23, 0xFF	; 255
    f38e:	8f 4f       	sbci	r24, 0xFF	; 255
    f390:	9f 4f       	sbci	r25, 0xFF	; 255
    f392:	11 f0       	breq	.+4      	; 0xf398 <fseek+0x32>
    f394:	20 e0       	ldi	r18, 0x00	; 0
    f396:	30 e0       	ldi	r19, 0x00	; 0
    f398:	88 27       	eor	r24, r24
    f39a:	99 27       	eor	r25, r25
    f39c:	82 1b       	sub	r24, r18
    f39e:	93 0b       	sbc	r25, r19
    f3a0:	02 c0       	rjmp	.+4      	; 0xf3a6 <fseek+0x40>
    f3a2:	8f ef       	ldi	r24, 0xFF	; 255
    f3a4:	9f ef       	ldi	r25, 0xFF	; 255
    f3a6:	df 91       	pop	r29
    f3a8:	cf 91       	pop	r28
    f3aa:	ff 90       	pop	r15
    f3ac:	ef 90       	pop	r14
    f3ae:	df 90       	pop	r13
    f3b0:	cf 90       	pop	r12
    f3b2:	08 95       	ret

0000f3b4 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f3b4:	a2 e0       	ldi	r26, 0x02	; 2
    f3b6:	b0 e0       	ldi	r27, 0x00	; 0
    f3b8:	e0 ee       	ldi	r30, 0xE0	; 224
    f3ba:	f9 e7       	ldi	r31, 0x79	; 121
    f3bc:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
    f3c0:	5c 01       	movw	r10, r24
    f3c2:	8b 01       	movw	r16, r22
    f3c4:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f3c6:	fb 01       	movw	r30, r22
    f3c8:	10 82       	st	Z, r1

    errno = 0;
    f3ca:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f3ce:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f3d2:	9e db       	rcall	.-2244   	; 0xeb10 <fileno_to_stream>
    f3d4:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f3d6:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f3da:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f3de:	e8 16       	cp	r14, r24
    f3e0:	f9 06       	cpc	r15, r25
    f3e2:	c9 f4       	brne	.+50     	; 0xf416 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f3e4:	f7 01       	movw	r30, r14
    f3e6:	83 81       	ldd	r24, Z+3	; 0x03
    f3e8:	80 64       	ori	r24, 0x40	; 64
    f3ea:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f3ec:	1a 82       	std	Y+2, r1	; 0x02
    f3ee:	19 82       	std	Y+1, r1	; 0x01
    f3f0:	c0 0e       	add	r12, r16
    f3f2:	d1 1e       	adc	r13, r17
        while(count--)
    f3f4:	0c 15       	cp	r16, r12
    f3f6:	1d 05       	cpc	r17, r13
    f3f8:	09 f4       	brne	.+2      	; 0xf3fc <read+0x48>
    f3fa:	3d c0       	rjmp	.+122    	; 0xf476 <read+0xc2>
        {
            ret = fgetc(stream);
    f3fc:	c7 01       	movw	r24, r14
    f3fe:	48 da       	rcall	.-2928   	; 0xe890 <fgetc>
            if(ret < 0)
    f400:	97 fd       	sbrc	r25, 7
    f402:	39 c0       	rjmp	.+114    	; 0xf476 <read+0xc2>
                break;

            *ptr++ = ret;
    f404:	f8 01       	movw	r30, r16
    f406:	81 93       	st	Z+, r24
    f408:	8f 01       	movw	r16, r30
            ++size;
    f40a:	89 81       	ldd	r24, Y+1	; 0x01
    f40c:	9a 81       	ldd	r25, Y+2	; 0x02
    f40e:	01 96       	adiw	r24, 0x01	; 1
    f410:	9a 83       	std	Y+2, r25	; 0x02
    f412:	89 83       	std	Y+1, r24	; 0x01
    f414:	ef cf       	rjmp	.-34     	; 0xf3f4 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f416:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f41a:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f41e:	e8 16       	cp	r14, r24
    f420:	f9 06       	cpc	r15, r25
    f422:	71 f1       	breq	.+92     	; 0xf480 <read+0xcc>
    f424:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f428:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f42c:	e8 16       	cp	r14, r24
    f42e:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f430:	39 f1       	breq	.+78     	; 0xf480 <read+0xcc>
    f432:	c5 01       	movw	r24, r10
    f434:	00 df       	rcall	.-512    	; 0xf236 <fileno_to_fatfs>
    if ( fh == NULL )
    f436:	00 97       	sbiw	r24, 0x00	; 0
    f438:	19 f4       	brne	.+6      	; 0xf440 <read+0x8c>
    {
        errno = EBADF;
    f43a:	89 e0       	ldi	r24, 0x09	; 9
    f43c:	90 e0       	ldi	r25, 0x00	; 0
    f43e:	16 c0       	rjmp	.+44     	; 0xf46c <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f440:	9e 01       	movw	r18, r28
    f442:	2f 5f       	subi	r18, 0xFF	; 255
    f444:	3f 4f       	sbci	r19, 0xFF	; 255
    f446:	a6 01       	movw	r20, r12
    f448:	b8 01       	movw	r22, r16
    f44a:	0e 94 1d 5a 	call	0xb43a	; 0xb43a <f_read>
    if(res != FR_OK)
    f44e:	00 97       	sbiw	r24, 0x00	; 0
    f450:	91 f0       	breq	.+36     	; 0xf476 <read+0xc2>
    f452:	84 31       	cpi	r24, 0x14	; 20
    f454:	91 05       	cpc	r25, r1
    f456:	40 f4       	brcc	.+16     	; 0xf468 <read+0xb4>
    f458:	fc 01       	movw	r30, r24
    f45a:	ea 55       	subi	r30, 0x5A	; 90
    f45c:	f4 4f       	sbci	r31, 0xF4	; 244
    f45e:	80 81       	ld	r24, Z
    f460:	08 2e       	mov	r0, r24
    f462:	00 0c       	add	r0, r0
    f464:	99 0b       	sbc	r25, r25
    f466:	02 c0       	rjmp	.+4      	; 0xf46c <read+0xb8>
    f468:	83 e2       	ldi	r24, 0x23	; 35
    f46a:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f46c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f470:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f474:	05 c0       	rjmp	.+10     	; 0xf480 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f476:	69 81       	ldd	r22, Y+1	; 0x01
    f478:	7a 81       	ldd	r23, Y+2	; 0x02
    f47a:	80 e0       	ldi	r24, 0x00	; 0
    f47c:	90 e0       	ldi	r25, 0x00	; 0
    f47e:	03 c0       	rjmp	.+6      	; 0xf486 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f480:	6f ef       	ldi	r22, 0xFF	; 255
    f482:	7f ef       	ldi	r23, 0xFF	; 255
    f484:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f486:	22 96       	adiw	r28, 0x02	; 2
    f488:	ea e0       	ldi	r30, 0x0A	; 10
    f48a:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

0000f48e <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f48e:	0f 93       	push	r16
    f490:	1f 93       	push	r17
    f492:	cf 93       	push	r28
    f494:	df 93       	push	r29
    f496:	ec 01       	movw	r28, r24
    f498:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f49a:	64 9f       	mul	r22, r20
    f49c:	80 01       	movw	r16, r0
    f49e:	65 9f       	mul	r22, r21
    f4a0:	10 0d       	add	r17, r0
    f4a2:	74 9f       	mul	r23, r20
    f4a4:	10 0d       	add	r17, r0
    f4a6:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f4a8:	17 db       	rcall	.-2514   	; 0xead8 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f4aa:	a8 01       	movw	r20, r16
    f4ac:	be 01       	movw	r22, r28
    f4ae:	82 df       	rcall	.-252    	; 0xf3b4 <read>
    if(ret < 0)
    f4b0:	97 fd       	sbrc	r25, 7
    f4b2:	02 c0       	rjmp	.+4      	; 0xf4b8 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f4b4:	cb 01       	movw	r24, r22
    f4b6:	02 c0       	rjmp	.+4      	; 0xf4bc <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f4b8:	80 e0       	ldi	r24, 0x00	; 0
    f4ba:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f4bc:	df 91       	pop	r29
    f4be:	cf 91       	pop	r28
    f4c0:	1f 91       	pop	r17
    f4c2:	0f 91       	pop	r16
    f4c4:	08 95       	ret

0000f4c6 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f4c6:	cf 93       	push	r28
    f4c8:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f4ca:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f4ce:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f4d2:	83 30       	cpi	r24, 0x03	; 3
    f4d4:	91 05       	cpc	r25, r1
    f4d6:	18 f4       	brcc	.+6      	; 0xf4de <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f4d8:	89 e0       	ldi	r24, 0x09	; 9
    f4da:	90 e0       	ldi	r25, 0x00	; 0
    f4dc:	18 c0       	rjmp	.+48     	; 0xf50e <syncfs+0x48>
    f4de:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f4e0:	17 db       	rcall	.-2514   	; 0xeb10 <fileno_to_stream>
    f4e2:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f4e4:	93 81       	ldd	r25, Z+3	; 0x03
    f4e6:	90 64       	ori	r25, 0x40	; 64
    f4e8:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f4ea:	ce 01       	movw	r24, r28
    f4ec:	a4 de       	rcall	.-696    	; 0xf236 <fileno_to_fatfs>
    if(fh == NULL)
    f4ee:	00 97       	sbiw	r24, 0x00	; 0
    f4f0:	99 f3       	breq	.-26     	; 0xf4d8 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f4f2:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <f_sync>
    if (res != FR_OK)
    f4f6:	00 97       	sbiw	r24, 0x00	; 0
    f4f8:	a1 f0       	breq	.+40     	; 0xf522 <syncfs+0x5c>
    f4fa:	84 31       	cpi	r24, 0x14	; 20
    f4fc:	91 05       	cpc	r25, r1
    f4fe:	70 f4       	brcc	.+28     	; 0xf51c <syncfs+0x56>
    f500:	fc 01       	movw	r30, r24
    f502:	ea 55       	subi	r30, 0x5A	; 90
    f504:	f4 4f       	sbci	r31, 0xF4	; 244
    f506:	80 81       	ld	r24, Z
    f508:	08 2e       	mov	r0, r24
    f50a:	00 0c       	add	r0, r0
    f50c:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f50e:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f512:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    f516:	8f ef       	ldi	r24, 0xFF	; 255
    f518:	9f ef       	ldi	r25, 0xFF	; 255
    f51a:	05 c0       	rjmp	.+10     	; 0xf526 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f51c:	83 e2       	ldi	r24, 0x23	; 35
    f51e:	90 e0       	ldi	r25, 0x00	; 0
    f520:	f6 cf       	rjmp	.-20     	; 0xf50e <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f522:	80 e0       	ldi	r24, 0x00	; 0
    f524:	90 e0       	ldi	r25, 0x00	; 0
}
    f526:	df 91       	pop	r29
    f528:	cf 91       	pop	r28
    f52a:	08 95       	ret

0000f52c <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f52c:	cf 93       	push	r28
    f52e:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f530:	c0 e0       	ldi	r28, 0x00	; 0
    f532:	d0 e0       	ldi	r29, 0x00	; 0
    f534:	21 96       	adiw	r28, 0x01	; 1
    f536:	c0 31       	cpi	r28, 0x10	; 16
    f538:	d1 05       	cpc	r29, r1
    f53a:	51 f0       	breq	.+20     	; 0xf550 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f53c:	c3 30       	cpi	r28, 0x03	; 3
    f53e:	d1 05       	cpc	r29, r1
    f540:	cc f3       	brlt	.-14     	; 0xf534 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f542:	ce 01       	movw	r24, r28
    f544:	78 de       	rcall	.-784    	; 0xf236 <fileno_to_fatfs>
        if(fh == NULL)
    f546:	89 2b       	or	r24, r25
    f548:	a9 f3       	breq	.-22     	; 0xf534 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f54a:	ce 01       	movw	r24, r28
    f54c:	bc df       	rcall	.-136    	; 0xf4c6 <syncfs>
    f54e:	f2 cf       	rjmp	.-28     	; 0xf534 <sync+0x8>
    }
}
    f550:	df 91       	pop	r29
    f552:	cf 91       	pop	r28
    f554:	08 95       	ret

0000f556 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f556:	a2 e0       	ldi	r26, 0x02	; 2
    f558:	b0 e0       	ldi	r27, 0x00	; 0
    f55a:	e1 eb       	ldi	r30, 0xB1	; 177
    f55c:	fa e7       	ldi	r31, 0x7A	; 122
    f55e:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
    f562:	8c 01       	movw	r16, r24
    f564:	b6 2e       	mov	r11, r22
    f566:	f7 2e       	mov	r15, r23
    f568:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f56a:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f56e:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f572:	ce da       	rcall	.-2660   	; 0xeb10 <fileno_to_stream>
    f574:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f576:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f57a:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f57e:	c8 16       	cp	r12, r24
    f580:	d9 06       	cpc	r13, r25
    f582:	39 f0       	breq	.+14     	; 0xf592 <write+0x3c>
    f584:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f588:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f58c:	c8 16       	cp	r12, r24
    f58e:	d9 06       	cpc	r13, r25
    f590:	d1 f4       	brne	.+52     	; 0xf5c6 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f592:	1a 82       	std	Y+2, r1	; 0x02
    f594:	19 82       	std	Y+1, r1	; 0x01
    f596:	0b 2d       	mov	r16, r11
    f598:	1f 2d       	mov	r17, r15
    f59a:	78 01       	movw	r14, r16
    f59c:	e8 0c       	add	r14, r8
    f59e:	f9 1c       	adc	r15, r9
        while(count--)
    f5a0:	0e 15       	cp	r16, r14
    f5a2:	1f 05       	cpc	r17, r15
    f5a4:	d1 f1       	breq	.+116    	; 0xf61a <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f5a6:	f8 01       	movw	r30, r16
    f5a8:	a1 90       	ld	r10, Z+
    f5aa:	8f 01       	movw	r16, r30
    f5ac:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f5ae:	b6 01       	movw	r22, r12
    f5b0:	c5 01       	movw	r24, r10
    f5b2:	c4 d9       	rcall	.-3192   	; 0xe93c <fputc>
            if(c != ret)
    f5b4:	a8 16       	cp	r10, r24
    f5b6:	b9 06       	cpc	r11, r25
    f5b8:	81 f5       	brne	.+96     	; 0xf61a <write+0xc4>
                break;

            ++size;
    f5ba:	89 81       	ldd	r24, Y+1	; 0x01
    f5bc:	9a 81       	ldd	r25, Y+2	; 0x02
    f5be:	01 96       	adiw	r24, 0x01	; 1
    f5c0:	9a 83       	std	Y+2, r25	; 0x02
    f5c2:	89 83       	std	Y+1, r24	; 0x01
    f5c4:	ed cf       	rjmp	.-38     	; 0xf5a0 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f5c6:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f5ca:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f5ce:	c8 16       	cp	r12, r24
    f5d0:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f5d2:	41 f1       	breq	.+80     	; 0xf624 <write+0xce>
    f5d4:	c8 01       	movw	r24, r16
    f5d6:	2f de       	rcall	.-930    	; 0xf236 <fileno_to_fatfs>
    if ( fh == NULL )
    f5d8:	00 97       	sbiw	r24, 0x00	; 0
    f5da:	19 f4       	brne	.+6      	; 0xf5e2 <write+0x8c>
    {
        errno = EBADF;
    f5dc:	89 e0       	ldi	r24, 0x09	; 9
    f5de:	90 e0       	ldi	r25, 0x00	; 0
    f5e0:	17 c0       	rjmp	.+46     	; 0xf610 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f5e2:	9e 01       	movw	r18, r28
    f5e4:	2f 5f       	subi	r18, 0xFF	; 255
    f5e6:	3f 4f       	sbci	r19, 0xFF	; 255
    f5e8:	a4 01       	movw	r20, r8
    f5ea:	6b 2d       	mov	r22, r11
    f5ec:	7f 2d       	mov	r23, r15
    f5ee:	0e 94 68 5b 	call	0xb6d0	; 0xb6d0 <f_write>
    if(res != FR_OK)
    f5f2:	00 97       	sbiw	r24, 0x00	; 0
    f5f4:	91 f0       	breq	.+36     	; 0xf61a <write+0xc4>
    f5f6:	84 31       	cpi	r24, 0x14	; 20
    f5f8:	91 05       	cpc	r25, r1
    f5fa:	40 f4       	brcc	.+16     	; 0xf60c <write+0xb6>
    f5fc:	fc 01       	movw	r30, r24
    f5fe:	ea 55       	subi	r30, 0x5A	; 90
    f600:	f4 4f       	sbci	r31, 0xF4	; 244
    f602:	80 81       	ld	r24, Z
    f604:	08 2e       	mov	r0, r24
    f606:	00 0c       	add	r0, r0
    f608:	99 0b       	sbc	r25, r25
    f60a:	02 c0       	rjmp	.+4      	; 0xf610 <write+0xba>
    f60c:	83 e2       	ldi	r24, 0x23	; 35
    f60e:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f610:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f614:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f618:	05 c0       	rjmp	.+10     	; 0xf624 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f61a:	69 81       	ldd	r22, Y+1	; 0x01
    f61c:	7a 81       	ldd	r23, Y+2	; 0x02
    f61e:	80 e0       	ldi	r24, 0x00	; 0
    f620:	90 e0       	ldi	r25, 0x00	; 0
    f622:	03 c0       	rjmp	.+6      	; 0xf62a <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f624:	6f ef       	ldi	r22, 0xFF	; 255
    f626:	7f ef       	ldi	r23, 0xFF	; 255
    f628:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f62a:	22 96       	adiw	r28, 0x02	; 2
    f62c:	ec e0       	ldi	r30, 0x0C	; 12
    f62e:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

0000f632 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f632:	0f 93       	push	r16
    f634:	1f 93       	push	r17
    f636:	cf 93       	push	r28
    f638:	df 93       	push	r29
    f63a:	ec 01       	movw	r28, r24
    f63c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f63e:	64 9f       	mul	r22, r20
    f640:	80 01       	movw	r16, r0
    f642:	65 9f       	mul	r22, r21
    f644:	10 0d       	add	r17, r0
    f646:	74 9f       	mul	r23, r20
    f648:	10 0d       	add	r17, r0
    f64a:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f64c:	45 da       	rcall	.-2934   	; 0xead8 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f64e:	a8 01       	movw	r20, r16
    f650:	be 01       	movw	r22, r28
    f652:	81 df       	rcall	.-254    	; 0xf556 <write>

    if(ret < 0)
    f654:	97 fd       	sbrc	r25, 7
    f656:	02 c0       	rjmp	.+4      	; 0xf65c <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f658:	cb 01       	movw	r24, r22
    f65a:	02 c0       	rjmp	.+4      	; 0xf660 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f65c:	80 e0       	ldi	r24, 0x00	; 0
    f65e:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f660:	df 91       	pop	r29
    f662:	cf 91       	pop	r28
    f664:	1f 91       	pop	r17
    f666:	0f 91       	pop	r16
    f668:	08 95       	ret

0000f66a <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f66a:	0f 93       	push	r16
    f66c:	1f 93       	push	r17
    f66e:	cf 93       	push	r28
    f670:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f672:	83 30       	cpi	r24, 0x03	; 3
    f674:	91 05       	cpc	r25, r1
    f676:	48 f4       	brcc	.+18     	; 0xf68a <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f678:	89 e0       	ldi	r24, 0x09	; 9
    f67a:	90 e0       	ldi	r25, 0x00	; 0
    f67c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f680:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    f684:	8f ef       	ldi	r24, 0xFF	; 255
    f686:	9f ef       	ldi	r25, 0xFF	; 255
    f688:	20 c0       	rjmp	.+64     	; 0xf6ca <free_file_descriptor+0x60>
    f68a:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f68c:	41 da       	rcall	.-2942   	; 0xeb10 <fileno_to_stream>
    f68e:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f690:	89 2b       	or	r24, r25
    f692:	c1 f3       	breq	.-16     	; 0xf684 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f694:	f8 01       	movw	r30, r16
    f696:	84 85       	ldd	r24, Z+12	; 0x0c
    f698:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f69a:	00 97       	sbiw	r24, 0x00	; 0
    f69c:	11 f0       	breq	.+4      	; 0xf6a2 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f69e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f6a2:	f8 01       	movw	r30, r16
    f6a4:	80 81       	ld	r24, Z
    f6a6:	91 81       	ldd	r25, Z+1	; 0x01
    f6a8:	00 97       	sbiw	r24, 0x00	; 0
    f6aa:	21 f0       	breq	.+8      	; 0xf6b4 <free_file_descriptor+0x4a>
    f6ac:	23 81       	ldd	r18, Z+3	; 0x03
    f6ae:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f6b0:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <safefree>
    }

    __iob[fileno]  = NULL;
    f6b4:	fe 01       	movw	r30, r28
    f6b6:	ee 0f       	add	r30, r30
    f6b8:	ff 1f       	adc	r31, r31
    f6ba:	eb 54       	subi	r30, 0x4B	; 75
    f6bc:	f3 4e       	sbci	r31, 0xE3	; 227
    f6be:	11 82       	std	Z+1, r1	; 0x01
    f6c0:	10 82       	st	Z, r1
    safefree(stream);
    f6c2:	c8 01       	movw	r24, r16
    f6c4:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <safefree>
    return(fileno);
    f6c8:	ce 01       	movw	r24, r28
}
    f6ca:	df 91       	pop	r29
    f6cc:	cf 91       	pop	r28
    f6ce:	1f 91       	pop	r17
    f6d0:	0f 91       	pop	r16
    f6d2:	08 95       	ret

0000f6d4 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f6d4:	0f 93       	push	r16
    f6d6:	1f 93       	push	r17
    f6d8:	cf 93       	push	r28
    f6da:	df 93       	push	r29
    f6dc:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f6de:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f6e2:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f6e6:	14 da       	rcall	.-3032   	; 0xeb10 <fileno_to_stream>
    if(stream == NULL)
    f6e8:	89 2b       	or	r24, r25
    f6ea:	d9 f0       	breq	.+54     	; 0xf722 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f6ec:	c8 01       	movw	r24, r16
    f6ee:	a3 dd       	rcall	.-1210   	; 0xf236 <fileno_to_fatfs>
    if(fh == NULL)
    f6f0:	00 97       	sbiw	r24, 0x00	; 0
    f6f2:	b9 f0       	breq	.+46     	; 0xf722 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f6f4:	0e 94 7f 5d 	call	0xbafe	; 0xbafe <f_close>
    free_file_descriptor(fileno);
    f6f8:	ec 01       	movw	r28, r24
    f6fa:	c8 01       	movw	r24, r16
    f6fc:	b6 df       	rcall	.-148    	; 0xf66a <free_file_descriptor>
    if (res != FR_OK)
    f6fe:	20 97       	sbiw	r28, 0x00	; 0
    f700:	99 f0       	breq	.+38     	; 0xf728 <close+0x54>
    f702:	c4 31       	cpi	r28, 0x14	; 20
    f704:	d1 05       	cpc	r29, r1
    f706:	38 f4       	brcc	.+14     	; 0xf716 <close+0x42>
    f708:	ca 55       	subi	r28, 0x5A	; 90
    f70a:	d4 4f       	sbci	r29, 0xF4	; 244
    f70c:	88 81       	ld	r24, Y
    f70e:	08 2e       	mov	r0, r24
    f710:	00 0c       	add	r0, r0
    f712:	99 0b       	sbc	r25, r25
    f714:	02 c0       	rjmp	.+4      	; 0xf71a <close+0x46>
    f716:	83 e2       	ldi	r24, 0x23	; 35
    f718:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f71a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f71e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    f722:	8f ef       	ldi	r24, 0xFF	; 255
    f724:	9f ef       	ldi	r25, 0xFF	; 255
    f726:	02 c0       	rjmp	.+4      	; 0xf72c <close+0x58>
    }
    return(0);
    f728:	80 e0       	ldi	r24, 0x00	; 0
    f72a:	90 e0       	ldi	r25, 0x00	; 0
}
    f72c:	df 91       	pop	r29
    f72e:	cf 91       	pop	r28
    f730:	1f 91       	pop	r17
    f732:	0f 91       	pop	r16
    f734:	08 95       	ret

0000f736 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f736:	d0 d9       	rcall	.-3168   	; 0xead8 <fileno>
    if(fn < 0)
    f738:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f73a:	02 c0       	rjmp	.+4      	; 0xf740 <fclose+0xa>
    f73c:	cb cf       	rjmp	.-106    	; 0xf6d4 <close>
    f73e:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f740:	8f ef       	ldi	r24, 0xFF	; 255
    f742:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f744:	08 95       	ret

0000f746 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f746:	0f 93       	push	r16
    f748:	1f 93       	push	r17
    f74a:	cf 93       	push	r28
    f74c:	df 93       	push	r29
    f74e:	e5 eb       	ldi	r30, 0xB5	; 181
    f750:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f752:	c0 e0       	ldi	r28, 0x00	; 0
    f754:	d0 e0       	ldi	r29, 0x00	; 0
    f756:	21 96       	adiw	r28, 0x01	; 1
    f758:	c0 31       	cpi	r28, 0x10	; 16
    f75a:	d1 05       	cpc	r29, r1
    f75c:	49 f0       	breq	.+18     	; 0xf770 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f75e:	c3 30       	cpi	r28, 0x03	; 3
    f760:	d1 05       	cpc	r29, r1
    f762:	24 f0       	brlt	.+8      	; 0xf76c <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f764:	82 81       	ldd	r24, Z+2	; 0x02
    f766:	93 81       	ldd	r25, Z+3	; 0x03
    f768:	89 2b       	or	r24, r25
    f76a:	59 f0       	breq	.+22     	; 0xf782 <new_file_descriptor+0x3c>
    f76c:	32 96       	adiw	r30, 0x02	; 2
    f76e:	f3 cf       	rjmp	.-26     	; 0xf756 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f770:	87 e1       	ldi	r24, 0x17	; 23
    f772:	90 e0       	ldi	r25, 0x00	; 0
    f774:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f778:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    return(-1);
    f77c:	8f ef       	ldi	r24, 0xFF	; 255
    f77e:	9f ef       	ldi	r25, 0xFF	; 255
    f780:	22 c0       	rjmp	.+68     	; 0xf7c6 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f782:	61 e0       	ldi	r22, 0x01	; 1
    f784:	70 e0       	ldi	r23, 0x00	; 0
    f786:	8e e0       	ldi	r24, 0x0E	; 14
    f788:	90 e0       	ldi	r25, 0x00	; 0
    f78a:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
    f78e:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f790:	89 2b       	or	r24, r25
    f792:	59 f0       	breq	.+22     	; 0xf7aa <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f794:	61 e0       	ldi	r22, 0x01	; 1
    f796:	70 e0       	ldi	r23, 0x00	; 0
    f798:	84 e2       	ldi	r24, 0x24	; 36
    f79a:	92 e0       	ldi	r25, 0x02	; 2
    f79c:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
            if(fh == NULL)
    f7a0:	00 97       	sbiw	r24, 0x00	; 0
    f7a2:	31 f4       	brne	.+12     	; 0xf7b0 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f7a4:	c8 01       	movw	r24, r16
    f7a6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <safefree>
                errno = ENOMEM;
    f7aa:	8c e0       	ldi	r24, 0x0C	; 12
    f7ac:	90 e0       	ldi	r25, 0x00	; 0
    f7ae:	e2 cf       	rjmp	.-60     	; 0xf774 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f7b0:	fe 01       	movw	r30, r28
    f7b2:	ee 0f       	add	r30, r30
    f7b4:	ff 1f       	adc	r31, r31
    f7b6:	eb 54       	subi	r30, 0x4B	; 75
    f7b8:	f3 4e       	sbci	r31, 0xE3	; 227
    f7ba:	11 83       	std	Z+1, r17	; 0x01
    f7bc:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f7be:	f8 01       	movw	r30, r16
    f7c0:	95 87       	std	Z+13, r25	; 0x0d
    f7c2:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f7c4:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f7c6:	df 91       	pop	r29
    f7c8:	cf 91       	pop	r28
    f7ca:	1f 91       	pop	r17
    f7cc:	0f 91       	pop	r16
    f7ce:	08 95       	ret

0000f7d0 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f7d0:	a0 e0       	ldi	r26, 0x00	; 0
    f7d2:	b0 e0       	ldi	r27, 0x00	; 0
    f7d4:	ee ee       	ldi	r30, 0xEE	; 238
    f7d6:	fb e7       	ldi	r31, 0x7B	; 123
    f7d8:	0c 94 5c e2 	jmp	0x1c4b8	; 0x1c4b8 <__prologue_saves__+0x8>
    f7dc:	5c 01       	movw	r10, r24
    f7de:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f7e0:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f7e4:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f7e8:	7b 01       	movw	r14, r22
    f7ea:	83 e0       	ldi	r24, 0x03	; 3
    f7ec:	e8 22       	and	r14, r24
    f7ee:	ff 24       	eor	r15, r15
    f7f0:	e2 e0       	ldi	r30, 0x02	; 2
    f7f2:	ee 16       	cp	r14, r30
    f7f4:	f1 04       	cpc	r15, r1
    f7f6:	31 f0       	breq	.+12     	; 0xf804 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f7f8:	e1 14       	cp	r14, r1
    f7fa:	f1 04       	cpc	r15, r1
    f7fc:	31 f0       	breq	.+12     	; 0xf80a <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f7fe:	02 e0       	ldi	r16, 0x02	; 2
    f800:	10 e0       	ldi	r17, 0x00	; 0
    f802:	05 c0       	rjmp	.+10     	; 0xf80e <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f804:	03 e0       	ldi	r16, 0x03	; 3
    f806:	10 e0       	ldi	r17, 0x00	; 0
    f808:	02 c0       	rjmp	.+4      	; 0xf80e <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f80a:	01 e0       	ldi	r16, 0x01	; 1
    f80c:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f80e:	c6 fe       	sbrs	r12, 6
    f810:	05 c0       	rjmp	.+10     	; 0xf81c <open+0x4c>
    {
        if(flags & O_TRUNC)
    f812:	d1 fe       	sbrs	r13, 1
    f814:	02 c0       	rjmp	.+4      	; 0xf81a <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f816:	08 60       	ori	r16, 0x08	; 8
    f818:	01 c0       	rjmp	.+2      	; 0xf81c <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f81a:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f81c:	94 df       	rcall	.-216    	; 0xf746 <new_file_descriptor>
    f81e:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f820:	77 d9       	rcall	.-3346   	; 0xeb10 <fileno_to_stream>
    f822:	ec 01       	movw	r28, r24
    f824:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f826:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f828:	09 f4       	brne	.+2      	; 0xf82c <open+0x5c>
    f82a:	48 c0       	rjmp	.+144    	; 0xf8bc <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f82c:	04 dd       	rcall	.-1528   	; 0xf236 <fileno_to_fatfs>
    f82e:	4c 01       	movw	r8, r24
    f830:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f832:	59 f4       	brne	.+22     	; 0xf84a <open+0x7a>
    {
        free_file_descriptor(fileno);
    f834:	c3 01       	movw	r24, r6
    f836:	19 df       	rcall	.-462    	; 0xf66a <free_file_descriptor>
    f838:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f83a:	90 e0       	ldi	r25, 0x00	; 0
    f83c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f840:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f844:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f846:	9f ef       	ldi	r25, 0xFF	; 255
    f848:	5d c0       	rjmp	.+186    	; 0xf904 <open+0x134>
    f84a:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f84c:	b5 01       	movw	r22, r10
    f84e:	0e 94 65 58 	call	0xb0ca	; 0xb0ca <f_open>
    f852:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f854:	91 f0       	breq	.+36     	; 0xf87a <open+0xaa>
    f856:	84 31       	cpi	r24, 0x14	; 20
    f858:	91 05       	cpc	r25, r1
    f85a:	40 f4       	brcc	.+16     	; 0xf86c <open+0x9c>
    f85c:	fc 01       	movw	r30, r24
    f85e:	ea 55       	subi	r30, 0x5A	; 90
    f860:	f4 4f       	sbci	r31, 0xF4	; 244
    f862:	80 81       	ld	r24, Z
    f864:	08 2e       	mov	r0, r24
    f866:	00 0c       	add	r0, r0
    f868:	99 0b       	sbc	r25, r25
    f86a:	02 c0       	rjmp	.+4      	; 0xf870 <open+0xa0>
    f86c:	83 e2       	ldi	r24, 0x23	; 35
    f86e:	90 e0       	ldi	r25, 0x00	; 0
    f870:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f874:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f878:	20 c0       	rjmp	.+64     	; 0xf8ba <open+0xea>
    f87a:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f87c:	21 c0       	rjmp	.+66     	; 0xf8c0 <open+0xf0>
    f87e:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f880:	42 85       	ldd	r20, Z+10	; 0x0a
    f882:	53 85       	ldd	r21, Z+11	; 0x0b
    f884:	64 85       	ldd	r22, Z+12	; 0x0c
    f886:	75 85       	ldd	r23, Z+13	; 0x0d
    f888:	c4 01       	movw	r24, r8
    f88a:	0e 94 29 5f 	call	0xbe52	; 0xbe52 <f_lseek>
    f88e:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f890:	b9 f0       	breq	.+46     	; 0xf8c0 <open+0xf0>
    f892:	84 31       	cpi	r24, 0x14	; 20
    f894:	91 05       	cpc	r25, r1
    f896:	40 f4       	brcc	.+16     	; 0xf8a8 <open+0xd8>
    f898:	fc 01       	movw	r30, r24
    f89a:	ea 55       	subi	r30, 0x5A	; 90
    f89c:	f4 4f       	sbci	r31, 0xF4	; 244
    f89e:	80 81       	ld	r24, Z
    f8a0:	08 2e       	mov	r0, r24
    f8a2:	00 0c       	add	r0, r0
    f8a4:	99 0b       	sbc	r25, r25
    f8a6:	02 c0       	rjmp	.+4      	; 0xf8ac <open+0xdc>
    f8a8:	83 e2       	ldi	r24, 0x23	; 35
    f8aa:	90 e0       	ldi	r25, 0x00	; 0
    f8ac:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f8b0:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f8b4:	c4 01       	movw	r24, r8
            f_close(fh);
    f8b6:	0e 94 7f 5d 	call	0xbafe	; 0xbafe <f_close>
            free_file_descriptor(fileno);
    f8ba:	c3 01       	movw	r24, r6
    f8bc:	d6 de       	rcall	.-596    	; 0xf66a <free_file_descriptor>
    f8be:	c2 cf       	rjmp	.-124    	; 0xf844 <open+0x74>
    f8c0:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f8c2:	ef 16       	cp	r14, r31
    f8c4:	f1 04       	cpc	r15, r1
    f8c6:	51 f4       	brne	.+20     	; 0xf8dc <open+0x10c>
    f8c8:	8d ef       	ldi	r24, 0xFD	; 253
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f8ca:	93 e7       	ldi	r25, 0x73	; 115
    f8cc:	99 87       	std	Y+9, r25	; 0x09
    f8ce:	88 87       	std	Y+8, r24	; 0x08
    f8d0:	8a e7       	ldi	r24, 0x7A	; 122
        stream->get = fatfs_getc;
    f8d2:	93 e7       	ldi	r25, 0x73	; 115
    f8d4:	9b 87       	std	Y+11, r25	; 0x0b
    f8d6:	8a 87       	std	Y+10, r24	; 0x0a
    f8d8:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f8da:	12 c0       	rjmp	.+36     	; 0xf900 <open+0x130>
    f8dc:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f8de:	f1 04       	cpc	r15, r1
    f8e0:	41 f4       	brne	.+16     	; 0xf8f2 <open+0x122>
    f8e2:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f8e4:	18 86       	std	Y+8, r1	; 0x08
    f8e6:	8a e7       	ldi	r24, 0x7A	; 122
        stream->get = fatfs_getc;
    f8e8:	93 e7       	ldi	r25, 0x73	; 115
    f8ea:	9b 87       	std	Y+11, r25	; 0x0b
    f8ec:	8a 87       	std	Y+10, r24	; 0x0a
    f8ee:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f8f0:	07 c0       	rjmp	.+14     	; 0xf900 <open+0x130>
    f8f2:	8d ef       	ldi	r24, 0xFD	; 253
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f8f4:	93 e7       	ldi	r25, 0x73	; 115
    f8f6:	99 87       	std	Y+9, r25	; 0x09
    f8f8:	88 87       	std	Y+8, r24	; 0x08
    f8fa:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f8fc:	1a 86       	std	Y+10, r1	; 0x0a
    f8fe:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f900:	8b 83       	std	Y+3, r24	; 0x03
    f902:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f904:	cd b7       	in	r28, 0x3d	; 61
}
    f906:	de b7       	in	r29, 0x3e	; 62
    f908:	ee e0       	ldi	r30, 0x0E	; 14
    f90a:	0c 94 78 e2 	jmp	0x1c4f0	; 0x1c4f0 <__epilogue_restores__+0x8>

0000f90e <posix_fopen_modes_to_open>:
    f90e:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f910:	df 93       	push	r29
    f912:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f914:	62 e4       	ldi	r22, 0x42	; 66
    f916:	73 e0       	ldi	r23, 0x03	; 3
    f918:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f91c:	00 97       	sbiw	r24, 0x00	; 0
    f91e:	09 f4       	brne	.+2      	; 0xf922 <posix_fopen_modes_to_open+0x14>
    f920:	5d c0       	rjmp	.+186    	; 0xf9dc <posix_fopen_modes_to_open+0xce>
    f922:	6e ef       	ldi	r22, 0xFE	; 254
    f924:	78 e0       	ldi	r23, 0x08	; 8
    f926:	ce 01       	movw	r24, r28
    f928:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f92c:	00 97       	sbiw	r24, 0x00	; 0
    f92e:	09 f4       	brne	.+2      	; 0xf932 <posix_fopen_modes_to_open+0x24>
    f930:	55 c0       	rjmp	.+170    	; 0xf9dc <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f932:	61 e0       	ldi	r22, 0x01	; 1
    f934:	79 e0       	ldi	r23, 0x09	; 9
    f936:	ce 01       	movw	r24, r28
    f938:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f93c:	89 2b       	or	r24, r25
    f93e:	09 f4       	brne	.+2      	; 0xf942 <posix_fopen_modes_to_open+0x34>
    f940:	42 c0       	rjmp	.+132    	; 0xf9c6 <posix_fopen_modes_to_open+0xb8>
    f942:	64 e0       	ldi	r22, 0x04	; 4
    f944:	79 e0       	ldi	r23, 0x09	; 9
    f946:	ce 01       	movw	r24, r28
    f948:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f94c:	89 2b       	or	r24, r25
    f94e:	d9 f1       	breq	.+118    	; 0xf9c6 <posix_fopen_modes_to_open+0xb8>
    f950:	68 e0       	ldi	r22, 0x08	; 8
    f952:	79 e0       	ldi	r23, 0x09	; 9
    f954:	ce 01       	movw	r24, r28
    f956:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f95a:	89 2b       	or	r24, r25
    f95c:	a1 f1       	breq	.+104    	; 0xf9c6 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f95e:	6d eb       	ldi	r22, 0xBD	; 189
    f960:	7a e0       	ldi	r23, 0x0A	; 10
    f962:	ce 01       	movw	r24, r28
    f964:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f968:	89 2b       	or	r24, r25
    f96a:	81 f1       	breq	.+96     	; 0xf9cc <posix_fopen_modes_to_open+0xbe>
    f96c:	6c e0       	ldi	r22, 0x0C	; 12
    f96e:	79 e0       	ldi	r23, 0x09	; 9
    f970:	ce 01       	movw	r24, r28
    f972:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f976:	89 2b       	or	r24, r25
    f978:	49 f1       	breq	.+82     	; 0xf9cc <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    f97a:	6f e0       	ldi	r22, 0x0F	; 15
    f97c:	79 e0       	ldi	r23, 0x09	; 9
    f97e:	ce 01       	movw	r24, r28
    f980:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f984:	89 2b       	or	r24, r25
    f986:	29 f1       	breq	.+74     	; 0xf9d2 <posix_fopen_modes_to_open+0xc4>
    f988:	62 e1       	ldi	r22, 0x12	; 18
    f98a:	79 e0       	ldi	r23, 0x09	; 9
    f98c:	ce 01       	movw	r24, r28
    f98e:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f992:	89 2b       	or	r24, r25
    f994:	f1 f0       	breq	.+60     	; 0xf9d2 <posix_fopen_modes_to_open+0xc4>
    f996:	66 e1       	ldi	r22, 0x16	; 22
    f998:	79 e0       	ldi	r23, 0x09	; 9
    f99a:	ce 01       	movw	r24, r28
    f99c:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f9a0:	89 2b       	or	r24, r25
    f9a2:	b9 f0       	breq	.+46     	; 0xf9d2 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    f9a4:	6e e2       	ldi	r22, 0x2E	; 46
    f9a6:	73 e1       	ldi	r23, 0x13	; 19
    f9a8:	ce 01       	movw	r24, r28
    f9aa:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f9ae:	89 2b       	or	r24, r25
    f9b0:	99 f0       	breq	.+38     	; 0xf9d8 <posix_fopen_modes_to_open+0xca>
    f9b2:	6a e1       	ldi	r22, 0x1A	; 26
    f9b4:	79 e0       	ldi	r23, 0x09	; 9
    f9b6:	ce 01       	movw	r24, r28
    f9b8:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <strcmp>
    f9bc:	89 2b       	or	r24, r25
    f9be:	61 f0       	breq	.+24     	; 0xf9d8 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    f9c0:	8f ef       	ldi	r24, 0xFF	; 255
    f9c2:	9f ef       	ldi	r25, 0xFF	; 255
    f9c4:	0b c0       	rjmp	.+22     	; 0xf9dc <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    f9c6:	82 e0       	ldi	r24, 0x02	; 2
    f9c8:	92 e0       	ldi	r25, 0x02	; 2
    f9ca:	08 c0       	rjmp	.+16     	; 0xf9dc <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    f9cc:	81 e4       	ldi	r24, 0x41	; 65
    f9ce:	92 e0       	ldi	r25, 0x02	; 2
    f9d0:	05 c0       	rjmp	.+10     	; 0xf9dc <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    f9d2:	82 e4       	ldi	r24, 0x42	; 66
    f9d4:	92 e0       	ldi	r25, 0x02	; 2
    f9d6:	02 c0       	rjmp	.+4      	; 0xf9dc <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    f9d8:	81 e4       	ldi	r24, 0x41	; 65
    f9da:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    f9dc:	df 91       	pop	r29
    f9de:	cf 91       	pop	r28
    f9e0:	08 95       	ret

0000f9e2 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    f9e2:	cf 93       	push	r28
    f9e4:	df 93       	push	r29
    f9e6:	ec 01       	movw	r28, r24
    f9e8:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    f9ea:	91 df       	rcall	.-222    	; 0xf90e <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    f9ec:	bc 01       	movw	r22, r24
    f9ee:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    f9f0:	ef de       	rcall	.-546    	; 0xf7d0 <open>
    f9f2:	8e d8       	rcall	.-3812   	; 0xeb10 <fileno_to_stream>
}
    f9f4:	df 91       	pop	r29
    f9f6:	cf 91       	pop	r28
    f9f8:	08 95       	ret

0000f9fa <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    f9fa:	a8 e0       	ldi	r26, 0x08	; 8
    f9fc:	b0 e0       	ldi	r27, 0x00	; 0
    f9fe:	e3 e0       	ldi	r30, 0x03	; 3
    fa00:	fd e7       	ldi	r31, 0x7D	; 125
    fa02:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fa06:	80 ef       	ldi	r24, 0xF0	; 240
    fa08:	94 e7       	ldi	r25, 0x74	; 116
    fa0a:	9a 83       	std	Y+2, r25	; 0x02
    fa0c:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fa0e:	18 86       	std	Y+8, r1	; 0x08
    fa10:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fa12:	8d 85       	ldd	r24, Y+13	; 0x0d
    fa14:	9e 85       	ldd	r25, Y+14	; 0x0e
    fa16:	9c 83       	std	Y+4, r25	; 0x04
    fa18:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fa1a:	4f 85       	ldd	r20, Y+15	; 0x0f
    fa1c:	58 89       	ldd	r21, Y+16	; 0x10
    fa1e:	60 e8       	ldi	r22, 0x80	; 128
    fa20:	9e 01       	movw	r18, r28
    fa22:	2f 5e       	subi	r18, 0xEF	; 239
    fa24:	3f 4f       	sbci	r19, 0xFF	; 255
    fa26:	ce 01       	movw	r24, r28
    fa28:	01 96       	adiw	r24, 0x01	; 1
    fa2a:	0e 94 08 40 	call	0x8010	; 0x8010 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fa2e:	8f 81       	ldd	r24, Y+7	; 0x07
    fa30:	98 85       	ldd	r25, Y+8	; 0x08
    fa32:	28 96       	adiw	r28, 0x08	; 8
    fa34:	e2 e0       	ldi	r30, 0x02	; 2
    fa36:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000fa3a <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fa3a:	cf 93       	push	r28
    fa3c:	df 93       	push	r29
    fa3e:	00 d0       	rcall	.+0      	; 0xfa40 <posix_help+0x6>
    fa40:	1f 92       	push	r1
    fa42:	ec 01       	movw	r28, r24
    fa44:	86 e4       	ldi	r24, 0x46	; 70
    fa46:	9e e0       	ldi	r25, 0x0E	; 14
    fa48:	a0 e0       	ldi	r26, 0x00	; 0
    fa4a:	ed b7       	in	r30, 0x3d	; 61
    fa4c:	fe b7       	in	r31, 0x3e	; 62
    fa4e:	81 83       	std	Z+1, r24	; 0x01
    fa50:	92 83       	std	Z+2, r25	; 0x02
    fa52:	a3 83       	std	Z+3, r26	; 0x03
    fa54:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fa58:	cd 2b       	or	r28, r29
    fa5a:	51 f0       	breq	.+20     	; 0xfa70 <posix_help+0x36>
    fa5c:	80 e8       	ldi	r24, 0x80	; 128
    fa5e:	9d e0       	ldi	r25, 0x0D	; 13
    fa60:	a0 e0       	ldi	r26, 0x00	; 0
    fa62:	ed b7       	in	r30, 0x3d	; 61
    fa64:	fe b7       	in	r31, 0x3e	; 62
    fa66:	81 83       	std	Z+1, r24	; 0x01
    fa68:	92 83       	std	Z+2, r25	; 0x02
    fa6a:	a3 83       	std	Z+3, r26	; 0x03
    fa6c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fa70:	cd b7       	in	r28, 0x3d	; 61
    fa72:	de b7       	in	r29, 0x3e	; 62
    fa74:	23 96       	adiw	r28, 0x03	; 3
    fa76:	e2 e0       	ldi	r30, 0x02	; 2
    fa78:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000fa7c <copy>:
    fa7c:	4f 92       	push	r4
    fa7e:	5f 92       	push	r5
    fa80:	6f 92       	push	r6
    fa82:	8f 92       	push	r8
    fa84:	9f 92       	push	r9
    fa86:	af 92       	push	r10
    fa88:	bf 92       	push	r11
    fa8a:	cf 92       	push	r12
    fa8c:	df 92       	push	r13
    fa8e:	ef 92       	push	r14
    fa90:	ff 92       	push	r15
    fa92:	0f 93       	push	r16
    fa94:	1f 93       	push	r17
    fa96:	cf 93       	push	r28
    fa98:	df 93       	push	r29
    fa9a:	ad b7       	in	r26, 0x3d	; 61
    fa9c:	be b7       	in	r27, 0x3e	; 62
    fa9e:	17 97       	sbiw	r26, 0x07	; 7
    faa0:	0f b6       	in	r0, 0x3f	; 63
    faa2:	f8 94       	cli
    faa4:	be bf       	out	0x3e, r27	; 62
    faa6:	0f be       	out	0x3f, r0	; 63
    faa8:	ad bf       	out	0x3d, r26	; 61
    faaa:	8c 01       	movw	r16, r24
    faac:	eb 01       	movw	r28, r22
    faae:	ed b7       	in	r30, 0x3d	; 61
    fab0:	fe b7       	in	r31, 0x3e	; 62
    fab2:	95 83       	std	Z+5, r25	; 0x05
    fab4:	84 83       	std	Z+4, r24	; 0x04
    fab6:	81 e0       	ldi	r24, 0x01	; 1
    fab8:	9d e0       	ldi	r25, 0x0D	; 13
    faba:	a0 e0       	ldi	r26, 0x00	; 0
    fabc:	81 83       	std	Z+1, r24	; 0x01
    fabe:	92 83       	std	Z+2, r25	; 0x02
    fac0:	a3 83       	std	Z+3, r26	; 0x03
    fac2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fac6:	6e ef       	ldi	r22, 0xFE	; 254
    fac8:	78 e0       	ldi	r23, 0x08	; 8
    faca:	c8 01       	movw	r24, r16
    facc:	8a df       	rcall	.-236    	; 0xf9e2 <fopen>
    face:	7c 01       	movw	r14, r24
    fad0:	ed b7       	in	r30, 0x3d	; 61
    fad2:	fe b7       	in	r31, 0x3e	; 62
    fad4:	89 2b       	or	r24, r25
    fad6:	59 f4       	brne	.+22     	; 0xfaee <copy+0x72>
    fad8:	15 83       	std	Z+5, r17	; 0x05
    fada:	04 83       	std	Z+4, r16	; 0x04
    fadc:	81 ef       	ldi	r24, 0xF1	; 241
    fade:	9c e0       	ldi	r25, 0x0C	; 12
    fae0:	a0 e0       	ldi	r26, 0x00	; 0
    fae2:	81 83       	std	Z+1, r24	; 0x01
    fae4:	92 83       	std	Z+2, r25	; 0x02
    fae6:	a3 83       	std	Z+3, r26	; 0x03
    fae8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    faec:	20 c0       	rjmp	.+64     	; 0xfb2e <copy+0xb2>
    faee:	d5 83       	std	Z+5, r29	; 0x05
    faf0:	c4 83       	std	Z+4, r28	; 0x04
    faf2:	84 ee       	ldi	r24, 0xE4	; 228
    faf4:	9c e0       	ldi	r25, 0x0C	; 12
    faf6:	a0 e0       	ldi	r26, 0x00	; 0
    faf8:	81 83       	std	Z+1, r24	; 0x01
    fafa:	92 83       	std	Z+2, r25	; 0x02
    fafc:	a3 83       	std	Z+3, r26	; 0x03
    fafe:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fb02:	6c e0       	ldi	r22, 0x0C	; 12
    fb04:	79 e0       	ldi	r23, 0x09	; 9
    fb06:	ce 01       	movw	r24, r28
    fb08:	6c df       	rcall	.-296    	; 0xf9e2 <fopen>
    fb0a:	8c 01       	movw	r16, r24
    fb0c:	89 2b       	or	r24, r25
    fb0e:	a1 f4       	brne	.+40     	; 0xfb38 <copy+0xbc>
    fb10:	ed b7       	in	r30, 0x3d	; 61
    fb12:	fe b7       	in	r31, 0x3e	; 62
    fb14:	d5 83       	std	Z+5, r29	; 0x05
    fb16:	c4 83       	std	Z+4, r28	; 0x04
    fb18:	84 ed       	ldi	r24, 0xD4	; 212
    fb1a:	9c e0       	ldi	r25, 0x0C	; 12
    fb1c:	a0 e0       	ldi	r26, 0x00	; 0
    fb1e:	81 83       	std	Z+1, r24	; 0x01
    fb20:	92 83       	std	Z+2, r25	; 0x02
    fb22:	a3 83       	std	Z+3, r26	; 0x03
    fb24:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fb28:	80 e0       	ldi	r24, 0x00	; 0
    fb2a:	90 e0       	ldi	r25, 0x00	; 0
    fb2c:	04 de       	rcall	.-1016   	; 0xf736 <fclose>
    fb2e:	60 e0       	ldi	r22, 0x00	; 0
    fb30:	70 e0       	ldi	r23, 0x00	; 0
    fb32:	80 e0       	ldi	r24, 0x00	; 0
    fb34:	90 e0       	ldi	r25, 0x00	; 0
    fb36:	68 c0       	rjmp	.+208    	; 0xfc08 <copy+0x18c>
    fb38:	61 e0       	ldi	r22, 0x01	; 1
    fb3a:	70 e0       	ldi	r23, 0x00	; 0
    fb3c:	80 e0       	ldi	r24, 0x00	; 0
    fb3e:	92 e0       	ldi	r25, 0x02	; 2
    fb40:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
    fb44:	6c 01       	movw	r12, r24
    fb46:	89 2b       	or	r24, r25
    fb48:	21 f4       	brne	.+8      	; 0xfb52 <copy+0xd6>
    fb4a:	c7 01       	movw	r24, r14
    fb4c:	f4 dd       	rcall	.-1048   	; 0xf736 <fclose>
    fb4e:	c8 01       	movw	r24, r16
    fb50:	ed cf       	rjmp	.-38     	; 0xfb2c <copy+0xb0>
    fb52:	87 ec       	ldi	r24, 0xC7	; 199
    fb54:	9c e0       	ldi	r25, 0x0C	; 12
    fb56:	a0 e0       	ldi	r26, 0x00	; 0
    fb58:	ed b7       	in	r30, 0x3d	; 61
    fb5a:	fe b7       	in	r31, 0x3e	; 62
    fb5c:	81 83       	std	Z+1, r24	; 0x01
    fb5e:	92 83       	std	Z+2, r25	; 0x02
    fb60:	a3 83       	std	Z+3, r26	; 0x03
    fb62:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fb66:	81 2c       	mov	r8, r1
    fb68:	91 2c       	mov	r9, r1
    fb6a:	54 01       	movw	r10, r8
    fb6c:	8b ea       	ldi	r24, 0xAB	; 171
    fb6e:	9c e0       	ldi	r25, 0x0C	; 12
    fb70:	2c 01       	movw	r4, r24
    fb72:	61 2c       	mov	r6, r1
    fb74:	97 01       	movw	r18, r14
    fb76:	40 e0       	ldi	r20, 0x00	; 0
    fb78:	52 e0       	ldi	r21, 0x02	; 2
    fb7a:	61 e0       	ldi	r22, 0x01	; 1
    fb7c:	70 e0       	ldi	r23, 0x00	; 0
    fb7e:	c6 01       	movw	r24, r12
    fb80:	86 dc       	rcall	.-1780   	; 0xf48e <fread>
    fb82:	ec 01       	movw	r28, r24
    fb84:	18 16       	cp	r1, r24
    fb86:	19 06       	cpc	r1, r25
    fb88:	44 f5       	brge	.+80     	; 0xfbda <copy+0x15e>
    fb8a:	98 01       	movw	r18, r16
    fb8c:	ae 01       	movw	r20, r28
    fb8e:	61 e0       	ldi	r22, 0x01	; 1
    fb90:	70 e0       	ldi	r23, 0x00	; 0
    fb92:	c6 01       	movw	r24, r12
    fb94:	4e dd       	rcall	.-1380   	; 0xf632 <fwrite>
    fb96:	8c 17       	cp	r24, r28
    fb98:	9d 07       	cpc	r25, r29
    fb9a:	5c f4       	brge	.+22     	; 0xfbb2 <copy+0x136>
    fb9c:	8a eb       	ldi	r24, 0xBA	; 186
    fb9e:	9c e0       	ldi	r25, 0x0C	; 12
    fba0:	a0 e0       	ldi	r26, 0x00	; 0
    fba2:	ed b7       	in	r30, 0x3d	; 61
    fba4:	fe b7       	in	r31, 0x3e	; 62
    fba6:	81 83       	std	Z+1, r24	; 0x01
    fba8:	92 83       	std	Z+2, r25	; 0x02
    fbaa:	a3 83       	std	Z+3, r26	; 0x03
    fbac:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fbb0:	14 c0       	rjmp	.+40     	; 0xfbda <copy+0x15e>
    fbb2:	ce 01       	movw	r24, r28
    fbb4:	dd 0f       	add	r29, r29
    fbb6:	aa 0b       	sbc	r26, r26
    fbb8:	bb 0b       	sbc	r27, r27
    fbba:	88 0e       	add	r8, r24
    fbbc:	99 1e       	adc	r9, r25
    fbbe:	aa 1e       	adc	r10, r26
    fbc0:	bb 1e       	adc	r11, r27
    fbc2:	ed b7       	in	r30, 0x3d	; 61
    fbc4:	fe b7       	in	r31, 0x3e	; 62
    fbc6:	84 82       	std	Z+4, r8	; 0x04
    fbc8:	95 82       	std	Z+5, r9	; 0x05
    fbca:	a6 82       	std	Z+6, r10	; 0x06
    fbcc:	b7 82       	std	Z+7, r11	; 0x07
    fbce:	41 82       	std	Z+1, r4	; 0x01
    fbd0:	52 82       	std	Z+2, r5	; 0x02
    fbd2:	63 82       	std	Z+3, r6	; 0x03
    fbd4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fbd8:	cd cf       	rjmp	.-102    	; 0xfb74 <copy+0xf8>
    fbda:	ed b7       	in	r30, 0x3d	; 61
    fbdc:	fe b7       	in	r31, 0x3e	; 62
    fbde:	84 82       	std	Z+4, r8	; 0x04
    fbe0:	95 82       	std	Z+5, r9	; 0x05
    fbe2:	a6 82       	std	Z+6, r10	; 0x06
    fbe4:	b7 82       	std	Z+7, r11	; 0x07
    fbe6:	88 e9       	ldi	r24, 0x98	; 152
    fbe8:	9c e0       	ldi	r25, 0x0C	; 12
    fbea:	a0 e0       	ldi	r26, 0x00	; 0
    fbec:	81 83       	std	Z+1, r24	; 0x01
    fbee:	92 83       	std	Z+2, r25	; 0x02
    fbf0:	a3 83       	std	Z+3, r26	; 0x03
    fbf2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fbf6:	c6 01       	movw	r24, r12
    fbf8:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <safefree>
    fbfc:	c7 01       	movw	r24, r14
    fbfe:	9b dd       	rcall	.-1226   	; 0xf736 <fclose>
    fc00:	c8 01       	movw	r24, r16
    fc02:	99 dd       	rcall	.-1230   	; 0xf736 <fclose>
    fc04:	b4 01       	movw	r22, r8
    fc06:	c5 01       	movw	r24, r10
    fc08:	ad b7       	in	r26, 0x3d	; 61
    fc0a:	be b7       	in	r27, 0x3e	; 62
    fc0c:	17 96       	adiw	r26, 0x07	; 7
    fc0e:	0f b6       	in	r0, 0x3f	; 63
    fc10:	f8 94       	cli
    fc12:	be bf       	out	0x3e, r27	; 62
    fc14:	0f be       	out	0x3f, r0	; 63
    fc16:	ad bf       	out	0x3d, r26	; 61
    fc18:	df 91       	pop	r29
    fc1a:	cf 91       	pop	r28
    fc1c:	1f 91       	pop	r17
    fc1e:	0f 91       	pop	r16
    fc20:	ff 90       	pop	r15
    fc22:	ef 90       	pop	r14
    fc24:	df 90       	pop	r13
    fc26:	cf 90       	pop	r12
    fc28:	bf 90       	pop	r11
    fc2a:	af 90       	pop	r10
    fc2c:	9f 90       	pop	r9
    fc2e:	8f 90       	pop	r8
    fc30:	6f 90       	pop	r6
    fc32:	5f 90       	pop	r5
    fc34:	4f 90       	pop	r4
    fc36:	08 95       	ret

0000fc38 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fc38:	cf 93       	push	r28
    fc3a:	df 93       	push	r29
    fc3c:	00 d0       	rcall	.+0      	; 0xfc3e <testpage+0x6>
    fc3e:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fc40:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fc44:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fc48:	82 17       	cp	r24, r18
    fc4a:	93 07       	cpc	r25, r19
    fc4c:	3c f1       	brlt	.+78     	; 0xfc9c <testpage+0x64>
    {
        printf("More..");
    fc4e:	81 e9       	ldi	r24, 0x91	; 145
    fc50:	9c e0       	ldi	r25, 0x0C	; 12
    fc52:	a0 e0       	ldi	r26, 0x00	; 0
    fc54:	ed b7       	in	r30, 0x3d	; 61
    fc56:	fe b7       	in	r31, 0x3e	; 62
    fc58:	81 83       	std	Z+1, r24	; 0x01
    fc5a:	92 83       	std	Z+2, r25	; 0x02
    fc5c:	a3 83       	std	Z+3, r26	; 0x03
    fc5e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fc62:	0e 94 fd 74 	call	0xe9fa	; 0xe9fa <getchar>
    fc66:	ec 01       	movw	r28, r24
        printf("\r");
    fc68:	8f e8       	ldi	r24, 0x8F	; 143
    fc6a:	9c e0       	ldi	r25, 0x0C	; 12
    fc6c:	a0 e0       	ldi	r26, 0x00	; 0
    fc6e:	ed b7       	in	r30, 0x3d	; 61
    fc70:	fe b7       	in	r31, 0x3e	; 62
    fc72:	81 83       	std	Z+1, r24	; 0x01
    fc74:	92 83       	std	Z+2, r25	; 0x02
    fc76:	a3 83       	std	Z+3, r26	; 0x03
    fc78:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        if(c == 'q')
    fc7c:	c1 37       	cpi	r28, 0x71	; 113
    fc7e:	d1 05       	cpc	r29, r1
    fc80:	41 f0       	breq	.+16     	; 0xfc92 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fc82:	2a 97       	sbiw	r28, 0x0a	; 10
    fc84:	49 f4       	brne	.+18     	; 0xfc98 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fc86:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fc8a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fc8e:	01 97       	sbiw	r24, 0x01	; 1
    fc90:	05 c0       	rjmp	.+10     	; 0xfc9c <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fc92:	8f ef       	ldi	r24, 0xFF	; 255
    fc94:	9f ef       	ldi	r25, 0xFF	; 255
    fc96:	02 c0       	rjmp	.+4      	; 0xfc9c <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fc98:	80 e0       	ldi	r24, 0x00	; 0
    fc9a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fc9c:	cd b7       	in	r28, 0x3d	; 61
    fc9e:	de b7       	in	r29, 0x3e	; 62
    fca0:	23 96       	adiw	r28, 0x03	; 3
    fca2:	e2 e0       	ldi	r30, 0x02	; 2
    fca4:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0000fca8 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fca8:	a7 e0       	ldi	r26, 0x07	; 7
    fcaa:	b1 e0       	ldi	r27, 0x01	; 1
    fcac:	ea e5       	ldi	r30, 0x5A	; 90
    fcae:	fe e7       	ldi	r31, 0x7E	; 126
    fcb0:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
    fcb4:	8c 01       	movw	r16, r24
    fcb6:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fcb8:	6e ef       	ldi	r22, 0xFE	; 254
    fcba:	78 e0       	ldi	r23, 0x08	; 8
    fcbc:	92 de       	rcall	.-732    	; 0xf9e2 <fopen>
    fcbe:	7c 01       	movw	r14, r24
    if (!fp)
    fcc0:	89 2b       	or	r24, r25
    fcc2:	41 f0       	breq	.+16     	; 0xfcd4 <cat+0x2c>
    fcc4:	c1 2c       	mov	r12, r1
    fcc6:	d1 2c       	mov	r13, r1
    fcc8:	a1 2c       	mov	r10, r1
    fcca:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fccc:	8e 01       	movw	r16, r28
    fcce:	08 5f       	subi	r16, 0xF8	; 248
    fcd0:	1f 4f       	sbci	r17, 0xFF	; 255
    fcd2:	22 c0       	rjmp	.+68     	; 0xfd18 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fcd4:	ed b7       	in	r30, 0x3d	; 61
    fcd6:	fe b7       	in	r31, 0x3e	; 62
    fcd8:	15 83       	std	Z+5, r17	; 0x05
    fcda:	04 83       	std	Z+4, r16	; 0x04
    fcdc:	8a e1       	ldi	r24, 0x1A	; 26
    fcde:	9d e0       	ldi	r25, 0x0D	; 13
    fce0:	a0 e0       	ldi	r26, 0x00	; 0
    fce2:	81 83       	std	Z+1, r24	; 0x01
    fce4:	92 83       	std	Z+2, r25	; 0x02
    fce6:	a3 83       	std	Z+3, r26	; 0x03
    fce8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(0);
    fcec:	c1 2c       	mov	r12, r1
    fcee:	d1 2c       	mov	r13, r1
    fcf0:	76 01       	movw	r14, r12
    fcf2:	3f c0       	rjmp	.+126    	; 0xfd72 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fcf4:	c8 01       	movw	r24, r16
    fcf6:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <trim_tail>
        size += strlen(line);
    fcfa:	f8 01       	movw	r30, r16
    fcfc:	01 90       	ld	r0, Z+
    fcfe:	00 20       	and	r0, r0
    fd00:	e9 f7       	brne	.-6      	; 0xfcfc <cat+0x54>
    fd02:	31 97       	sbiw	r30, 0x01	; 1
    fd04:	e0 1b       	sub	r30, r16
    fd06:	f1 0b       	sbc	r31, r17
    fd08:	ce 0e       	add	r12, r30
    fd0a:	df 1e       	adc	r13, r31
        puts(line);
    fd0c:	c8 01       	movw	r24, r16
    fd0e:	0e 94 55 75 	call	0xeaaa	; 0xeaaa <puts>
        if(dopage)
    fd12:	81 14       	cp	r8, r1
    fd14:	91 04       	cpc	r9, r1
    fd16:	49 f4       	brne	.+18     	; 0xfd2a <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fd18:	a7 01       	movw	r20, r14
    fd1a:	6e ef       	ldi	r22, 0xFE	; 254
    fd1c:	70 e0       	ldi	r23, 0x00	; 0
    fd1e:	c8 01       	movw	r24, r16
    fd20:	0e 94 09 75 	call	0xea12	; 0xea12 <fgets>
    fd24:	89 2b       	or	r24, r25
    fd26:	31 f7       	brne	.-52     	; 0xfcf4 <cat+0x4c>
    fd28:	06 c0       	rjmp	.+12     	; 0xfd36 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fd2a:	c5 01       	movw	r24, r10
    fd2c:	01 96       	adiw	r24, 0x01	; 1
    fd2e:	84 df       	rcall	.-248    	; 0xfc38 <testpage>
    fd30:	5c 01       	movw	r10, r24
            if(count < 0)
    fd32:	97 ff       	sbrs	r25, 7
    fd34:	f1 cf       	rjmp	.-30     	; 0xfd18 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fd36:	88 e1       	ldi	r24, 0x18	; 24
    fd38:	9d e0       	ldi	r25, 0x0D	; 13
    fd3a:	a0 e0       	ldi	r26, 0x00	; 0
    fd3c:	ed b7       	in	r30, 0x3d	; 61
    fd3e:	fe b7       	in	r31, 0x3e	; 62
    fd40:	81 83       	std	Z+1, r24	; 0x01
    fd42:	92 83       	std	Z+2, r25	; 0x02
    fd44:	a3 83       	std	Z+3, r26	; 0x03
    fd46:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fclose(fp);
    fd4a:	c7 01       	movw	r24, r14
    fd4c:	f4 dc       	rcall	.-1560   	; 0xf736 <fclose>
    printf("%ld bytes\n", (long)size);
    fd4e:	0d 2c       	mov	r0, r13
    fd50:	00 0c       	add	r0, r0
    fd52:	ee 08       	sbc	r14, r14
    fd54:	ff 08       	sbc	r15, r15
    fd56:	ed b7       	in	r30, 0x3d	; 61
    fd58:	fe b7       	in	r31, 0x3e	; 62
    fd5a:	c4 82       	std	Z+4, r12	; 0x04
    fd5c:	d5 82       	std	Z+5, r13	; 0x05
    fd5e:	e6 82       	std	Z+6, r14	; 0x06
    fd60:	f7 82       	std	Z+7, r15	; 0x07
    fd62:	8d e0       	ldi	r24, 0x0D	; 13
    fd64:	9d e0       	ldi	r25, 0x0D	; 13
    fd66:	a0 e0       	ldi	r26, 0x00	; 0
    fd68:	81 83       	std	Z+1, r24	; 0x01
    fd6a:	92 83       	std	Z+2, r25	; 0x02
    fd6c:	a3 83       	std	Z+3, r26	; 0x03
    fd6e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    return(size);
}
    fd72:	c7 01       	movw	r24, r14
    fd74:	b6 01       	movw	r22, r12
    fd76:	c9 5f       	subi	r28, 0xF9	; 249
    fd78:	de 4f       	sbci	r29, 0xFE	; 254
    fd7a:	ec e0       	ldi	r30, 0x0C	; 12
    fd7c:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

0000fd80 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fd80:	4f 92       	push	r4
    fd82:	5f 92       	push	r5
    fd84:	6f 92       	push	r6
    fd86:	7f 92       	push	r7
    fd88:	af 92       	push	r10
    fd8a:	bf 92       	push	r11
    fd8c:	cf 92       	push	r12
    fd8e:	df 92       	push	r13
    fd90:	ef 92       	push	r14
    fd92:	ff 92       	push	r15
    fd94:	0f 93       	push	r16
    fd96:	1f 93       	push	r17
    fd98:	cf 93       	push	r28
    fd9a:	df 93       	push	r29
    fd9c:	cd b7       	in	r28, 0x3d	; 61
    fd9e:	de b7       	in	r29, 0x3e	; 62
    fda0:	c9 54       	subi	r28, 0x49	; 73
    fda2:	d1 09       	sbc	r29, r1
    fda4:	0f b6       	in	r0, 0x3f	; 63
    fda6:	f8 94       	cli
    fda8:	de bf       	out	0x3e, r29	; 62
    fdaa:	0f be       	out	0x3f, r0	; 63
    fdac:	cd bf       	out	0x3d, r28	; 61
    fdae:	8c 01       	movw	r16, r24
    fdb0:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fdb2:	be 01       	movw	r22, r28
    fdb4:	62 5f       	subi	r22, 0xF2	; 242
    fdb6:	7f 4f       	sbci	r23, 0xFF	; 255
    fdb8:	19 d9       	rcall	.-3534   	; 0xefec <stat>
    fdba:	01 96       	adiw	r24, 0x01	; 1
    fdbc:	79 f4       	brne	.+30     	; 0xfddc <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fdbe:	ed b7       	in	r30, 0x3d	; 61
    fdc0:	fe b7       	in	r31, 0x3e	; 62
    fdc2:	15 83       	std	Z+5, r17	; 0x05
    fdc4:	04 83       	std	Z+4, r16	; 0x04
    fdc6:	8d e7       	ldi	r24, 0x7D	; 125
    fdc8:	9c e0       	ldi	r25, 0x0C	; 12
    fdca:	a0 e0       	ldi	r26, 0x00	; 0
    fdcc:	81 83       	std	Z+1, r24	; 0x01
    fdce:	92 83       	std	Z+2, r25	; 0x02
    fdd0:	a3 83       	std	Z+3, r26	; 0x03
    fdd2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(0);
    fdd6:	80 e0       	ldi	r24, 0x00	; 0
    fdd8:	90 e0       	ldi	r25, 0x00	; 0
    fdda:	77 c0       	rjmp	.+238    	; 0xfeca <ls_info+0x14a>
    }

    if(!verbose)
    fddc:	ef 28       	or	r14, r15
    fdde:	81 f4       	brne	.+32     	; 0xfe00 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fde0:	c8 01       	movw	r24, r16
    fde2:	0e 94 c2 75 	call	0xeb84	; 0xeb84 <basename>
    fde6:	ed b7       	in	r30, 0x3d	; 61
    fde8:	fe b7       	in	r31, 0x3e	; 62
    fdea:	95 83       	std	Z+5, r25	; 0x05
    fdec:	84 83       	std	Z+4, r24	; 0x04
    fdee:	89 e7       	ldi	r24, 0x79	; 121
    fdf0:	9c e0       	ldi	r25, 0x0C	; 12
    fdf2:	a0 e0       	ldi	r26, 0x00	; 0
    fdf4:	81 83       	std	Z+1, r24	; 0x01
    fdf6:	92 83       	std	Z+2, r25	; 0x02
    fdf8:	a3 83       	std	Z+3, r26	; 0x03
    fdfa:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    fdfe:	63 c0       	rjmp	.+198    	; 0xfec6 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fe00:	4e 88       	ldd	r4, Y+22	; 0x16
    fe02:	5f 88       	ldd	r5, Y+23	; 0x17
    fe04:	68 8c       	ldd	r6, Y+24	; 0x18
    fe06:	79 8c       	ldd	r7, Y+25	; 0x19
    fe08:	d3 01       	movw	r26, r6
    fe0a:	c2 01       	movw	r24, r4
    fe0c:	88 27       	eor	r24, r24
    fe0e:	90 7f       	andi	r25, 0xF0	; 240
    fe10:	aa 27       	eor	r26, r26
    fe12:	bb 27       	eor	r27, r27
    fe14:	81 15       	cp	r24, r1
    fe16:	90 44       	sbci	r25, 0x40	; 64
    fe18:	a1 05       	cpc	r26, r1
    fe1a:	b1 05       	cpc	r27, r1
    fe1c:	11 f4       	brne	.+4      	; 0xfe22 <ls_info+0xa2>
        *p++ = 'd';
    fe1e:	84 e6       	ldi	r24, 0x64	; 100
    fe20:	01 c0       	rjmp	.+2      	; 0xfe24 <ls_info+0xa4>
    else
        *p++ = '-';
    fe22:	8d e2       	ldi	r24, 0x2D	; 45
    fe24:	8e af       	std	Y+62, r24	; 0x3e
    fe26:	fe 01       	movw	r30, r28
    fe28:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fe2a:	e1 2c       	mov	r14, r1
    fe2c:	ff 24       	eor	r15, r15
    fe2e:	f3 94       	inc	r15
    fe30:	20 e0       	ldi	r18, 0x00	; 0
    fe32:	30 e0       	ldi	r19, 0x00	; 0
    fe34:	be 2e       	mov	r11, r30
    fe36:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fe38:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fe3a:	53 e0       	ldi	r21, 0x03	; 3
    fe3c:	c5 2e       	mov	r12, r21
    fe3e:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fe40:	c7 01       	movw	r24, r14
    fe42:	a0 e0       	ldi	r26, 0x00	; 0
    fe44:	b0 e0       	ldi	r27, 0x00	; 0
    fe46:	84 21       	and	r24, r4
    fe48:	95 21       	and	r25, r5
    fe4a:	a6 21       	and	r26, r6
    fe4c:	b7 21       	and	r27, r7
    fe4e:	89 2b       	or	r24, r25
    fe50:	8a 2b       	or	r24, r26
    fe52:	8b 2b       	or	r24, r27
    fe54:	51 f0       	breq	.+20     	; 0xfe6a <ls_info+0xea>
            *p++ = cm[ i % 3];
    fe56:	c9 01       	movw	r24, r18
    fe58:	b6 01       	movw	r22, r12
    fe5a:	0e 94 d8 e1 	call	0x1c3b0	; 0x1c3b0 <__divmodhi4>
    fe5e:	dc 01       	movw	r26, r24
    fe60:	a6 54       	subi	r26, 0x46	; 70
    fe62:	b4 4f       	sbci	r27, 0xF4	; 244
    fe64:	8c 91       	ld	r24, X
    fe66:	81 83       	std	Z+1, r24	; 0x01
    fe68:	01 c0       	rjmp	.+2      	; 0xfe6c <ls_info+0xec>
        else
            *p++ = '-';
    fe6a:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fe6c:	f6 94       	lsr	r15
    fe6e:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fe70:	2f 5f       	subi	r18, 0xFF	; 255
    fe72:	3f 4f       	sbci	r19, 0xFF	; 255
    fe74:	31 96       	adiw	r30, 0x01	; 1
    fe76:	29 30       	cpi	r18, 0x09	; 9
    fe78:	31 05       	cpc	r19, r1
    fe7a:	11 f7       	brne	.-60     	; 0xfe40 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fe7c:	29 96       	adiw	r28, 0x09	; 9
    fe7e:	1f ae       	std	Y+63, r1	; 0x3f
    fe80:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fe82:	4e a0       	ldd	r4, Y+38	; 0x26
    fe84:	5f a0       	ldd	r5, Y+39	; 0x27
    fe86:	68 a4       	ldd	r6, Y+40	; 0x28
    fe88:	79 a4       	ldd	r7, Y+41	; 0x29
    fe8a:	6e a9       	ldd	r22, Y+54	; 0x36
    fe8c:	7f a9       	ldd	r23, Y+55	; 0x37
    fe8e:	88 ad       	ldd	r24, Y+56	; 0x38
    fe90:	99 ad       	ldd	r25, Y+57	; 0x39
    fe92:	0e 94 9d 75 	call	0xeb3a	; 0xeb3a <mctime>
    fe96:	7c 01       	movw	r14, r24
    fe98:	c8 01       	movw	r24, r16
    fe9a:	0e 94 c2 75 	call	0xeb84	; 0xeb84 <basename>
    fe9e:	ed b7       	in	r30, 0x3d	; 61
    fea0:	fe b7       	in	r31, 0x3e	; 62
    fea2:	95 87       	std	Z+13, r25	; 0x0d
    fea4:	84 87       	std	Z+12, r24	; 0x0c
    fea6:	f3 86       	std	Z+11, r15	; 0x0b
    fea8:	e2 86       	std	Z+10, r14	; 0x0a
    feaa:	46 82       	std	Z+6, r4	; 0x06
    feac:	57 82       	std	Z+7, r5	; 0x07
    feae:	60 86       	std	Z+8, r6	; 0x08
    feb0:	71 86       	std	Z+9, r7	; 0x09
    feb2:	b4 82       	std	Z+4, r11	; 0x04
    feb4:	a5 82       	std	Z+5, r10	; 0x05
    feb6:	8f e5       	ldi	r24, 0x5F	; 95
    feb8:	9c e0       	ldi	r25, 0x0C	; 12
    feba:	a0 e0       	ldi	r26, 0x00	; 0
    febc:	81 83       	std	Z+1, r24	; 0x01
    febe:	92 83       	std	Z+2, r25	; 0x02
    fec0:	a3 83       	std	Z+3, r26	; 0x03
    fec2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fec6:	81 e0       	ldi	r24, 0x01	; 1
    fec8:	90 e0       	ldi	r25, 0x00	; 0
}
    feca:	c7 5b       	subi	r28, 0xB7	; 183
    fecc:	df 4f       	sbci	r29, 0xFF	; 255
    fece:	0f b6       	in	r0, 0x3f	; 63
    fed0:	f8 94       	cli
    fed2:	de bf       	out	0x3e, r29	; 62
    fed4:	0f be       	out	0x3f, r0	; 63
    fed6:	cd bf       	out	0x3d, r28	; 61
    fed8:	df 91       	pop	r29
    feda:	cf 91       	pop	r28
    fedc:	1f 91       	pop	r17
    fede:	0f 91       	pop	r16
    fee0:	ff 90       	pop	r15
    fee2:	ef 90       	pop	r14
    fee4:	df 90       	pop	r13
    fee6:	cf 90       	pop	r12
    fee8:	bf 90       	pop	r11
    feea:	af 90       	pop	r10
    feec:	7f 90       	pop	r7
    feee:	6f 90       	pop	r6
    fef0:	5f 90       	pop	r5
    fef2:	4f 90       	pop	r4
    fef4:	08 95       	ret

0000fef6 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
    fef6:	2f 92       	push	r2
    fef8:	3f 92       	push	r3
    fefa:	4f 92       	push	r4
    fefc:	5f 92       	push	r5
    fefe:	6f 92       	push	r6
    ff00:	8f 92       	push	r8
    ff02:	9f 92       	push	r9
    ff04:	af 92       	push	r10
    ff06:	bf 92       	push	r11
    ff08:	cf 92       	push	r12
    ff0a:	df 92       	push	r13
    ff0c:	ef 92       	push	r14
    ff0e:	ff 92       	push	r15
    ff10:	0f 93       	push	r16
    ff12:	1f 93       	push	r17
    ff14:	cf 93       	push	r28
    ff16:	df 93       	push	r29
    ff18:	cd b7       	in	r28, 0x3d	; 61
    ff1a:	de b7       	in	r29, 0x3e	; 62
    ff1c:	c7 53       	subi	r28, 0x37	; 55
    ff1e:	d1 40       	sbci	r29, 0x01	; 1
    ff20:	0f b6       	in	r0, 0x3f	; 63
    ff22:	f8 94       	cli
    ff24:	de bf       	out	0x3e, r29	; 62
    ff26:	0f be       	out	0x3f, r0	; 63
    ff28:	cd bf       	out	0x3d, r28	; 61
    ff2a:	7c 01       	movw	r14, r24
    ff2c:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    ff2e:	1e 82       	std	Y+6, r1	; 0x06
    ff30:	8e 01       	movw	r16, r28
    ff32:	0a 5f       	subi	r16, 0xFA	; 250
    ff34:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    ff36:	00 97       	sbiw	r24, 0x00	; 0
    ff38:	91 f4       	brne	.+36     	; 0xff5e <__DATA_REGION_LENGTH__+0x5e>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    ff3a:	6e ef       	ldi	r22, 0xFE	; 254
    ff3c:	70 e0       	ldi	r23, 0x00	; 0
    ff3e:	c8 01       	movw	r24, r16
    ff40:	0e 94 18 76 	call	0xec30	; 0xec30 <getcwd>
    ff44:	89 2b       	or	r24, r25
    ff46:	d1 f4       	brne	.+52     	; 0xff7c <__DATA_REGION_LENGTH__+0x7c>
        {
            printf("ls: Can't get current directory\n");
    ff48:	8e e3       	ldi	r24, 0x3E	; 62
    ff4a:	9c e0       	ldi	r25, 0x0C	; 12
    ff4c:	a0 e0       	ldi	r26, 0x00	; 0
    ff4e:	ed b7       	in	r30, 0x3d	; 61
    ff50:	fe b7       	in	r31, 0x3e	; 62
    ff52:	81 83       	std	Z+1, r24	; 0x01
    ff54:	92 83       	std	Z+2, r25	; 0x02
    ff56:	a3 83       	std	Z+3, r26	; 0x03
    ff58:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    ff5c:	37 c0       	rjmp	.+110    	; 0xffcc <__DATA_REGION_LENGTH__+0xcc>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    ff5e:	fc 01       	movw	r30, r24
    ff60:	80 81       	ld	r24, Z
    ff62:	88 23       	and	r24, r24
    ff64:	51 f3       	breq	.-44     	; 0xff3a <__DATA_REGION_LENGTH__+0x3a>
    ff66:	6d ef       	ldi	r22, 0xFD	; 253
    ff68:	72 e1       	ldi	r23, 0x12	; 18
    ff6a:	c7 01       	movw	r24, r14
    ff6c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
    ff70:	89 2b       	or	r24, r25
    ff72:	19 f7       	brne	.-58     	; 0xff3a <__DATA_REGION_LENGTH__+0x3a>

        }
    }
    else
    {
        strcpy(fullpath,name);
    ff74:	b7 01       	movw	r22, r14
    ff76:	c8 01       	movw	r24, r16
    ff78:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
    }
    len = strlen(fullpath);
    ff7c:	f8 01       	movw	r30, r16
    ff7e:	01 90       	ld	r0, Z+
    ff80:	00 20       	and	r0, r0
    ff82:	e9 f7       	brne	.-6      	; 0xff7e <__DATA_REGION_LENGTH__+0x7e>
    ff84:	31 97       	sbiw	r30, 0x01	; 1
    ff86:	1f 01       	movw	r2, r30
    ff88:	20 1a       	sub	r2, r16
    ff8a:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
    ff8c:	ed b7       	in	r30, 0x3d	; 61
    ff8e:	fe b7       	in	r31, 0x3e	; 62
    ff90:	15 83       	std	Z+5, r17	; 0x05
    ff92:	04 83       	std	Z+4, r16	; 0x04
    ff94:	80 e3       	ldi	r24, 0x30	; 48
    ff96:	9c e0       	ldi	r25, 0x0C	; 12
    ff98:	a0 e0       	ldi	r26, 0x00	; 0
    ff9a:	81 83       	std	Z+1, r24	; 0x01
    ff9c:	92 83       	std	Z+2, r25	; 0x02
    ff9e:	a3 83       	std	Z+3, r26	; 0x03
    ffa0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    if (stat(fullpath, &st))
    ffa4:	be 01       	movw	r22, r28
    ffa6:	6a 5f       	subi	r22, 0xFA	; 250
    ffa8:	7e 4f       	sbci	r23, 0xFE	; 254
    ffaa:	c8 01       	movw	r24, r16
    ffac:	1f d8       	rcall	.-4034   	; 0xefec <stat>
    ffae:	7c 01       	movw	r14, r24
    ffb0:	89 2b       	or	r24, r25
    ffb2:	79 f0       	breq	.+30     	; 0xffd2 <__DATA_REGION_LENGTH__+0xd2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    ffb4:	ed b7       	in	r30, 0x3d	; 61
    ffb6:	fe b7       	in	r31, 0x3e	; 62
    ffb8:	15 83       	std	Z+5, r17	; 0x05
    ffba:	04 83       	std	Z+4, r16	; 0x04
    ffbc:	8a e1       	ldi	r24, 0x1A	; 26
    ffbe:	9c e0       	ldi	r25, 0x0C	; 12
    ffc0:	a0 e0       	ldi	r26, 0x00	; 0
    ffc2:	81 83       	std	Z+1, r24	; 0x01
    ffc4:	92 83       	std	Z+2, r25	; 0x02
    ffc6:	a3 83       	std	Z+3, r26	; 0x03
    ffc8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(0);
    ffcc:	e1 2c       	mov	r14, r1
    ffce:	f1 2c       	mov	r15, r1
    ffd0:	8c c0       	rjmp	.+280    	; 0x100ea <__EEPROM_REGION_LENGTH__+0xea>
    }

    switch (st.st_mode & S_IFMT)
    ffd2:	c2 5f       	subi	r28, 0xF2	; 242
    ffd4:	de 4f       	sbci	r29, 0xFE	; 254
    ffd6:	88 81       	ld	r24, Y
    ffd8:	99 81       	ldd	r25, Y+1	; 0x01
    ffda:	aa 81       	ldd	r26, Y+2	; 0x02
    ffdc:	bb 81       	ldd	r27, Y+3	; 0x03
    ffde:	ce 50       	subi	r28, 0x0E	; 14
    ffe0:	d1 40       	sbci	r29, 0x01	; 1
    ffe2:	88 27       	eor	r24, r24
    ffe4:	90 7f       	andi	r25, 0xF0	; 240
    ffe6:	aa 27       	eor	r26, r26
    ffe8:	bb 27       	eor	r27, r27
    ffea:	81 15       	cp	r24, r1
    ffec:	f0 e4       	ldi	r31, 0x40	; 64
    ffee:	9f 07       	cpc	r25, r31
    fff0:	a1 05       	cpc	r26, r1
    fff2:	b1 05       	cpc	r27, r1
    fff4:	59 f0       	breq	.+22     	; 0x1000c <__EEPROM_REGION_LENGTH__+0xc>
    fff6:	81 15       	cp	r24, r1
    fff8:	90 48       	sbci	r25, 0x80	; 128
    fffa:	a1 05       	cpc	r26, r1
    fffc:	b1 05       	cpc	r27, r1
    fffe:	09 f0       	breq	.+2      	; 0x10002 <__EEPROM_REGION_LENGTH__+0x2>
   10000:	66 c0       	rjmp	.+204    	; 0x100ce <__EEPROM_REGION_LENGTH__+0xce>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   10002:	b4 01       	movw	r22, r8
   10004:	c8 01       	movw	r24, r16
   10006:	bc de       	rcall	.-648    	; 0xfd80 <ls_info>
   10008:	7c 01       	movw	r14, r24
            break;
   1000a:	63 c0       	rjmp	.+198    	; 0x100d2 <__EEPROM_REGION_LENGTH__+0xd2>
        case S_IFDIR:
            dirp = opendir(fullpath);
   1000c:	c8 01       	movw	r24, r16
   1000e:	0e 94 c6 76 	call	0xed8c	; 0xed8c <opendir>
   10012:	5c 01       	movw	r10, r24
            if(!dirp)
   10014:	89 2b       	or	r24, r25
   10016:	81 f0       	breq	.+32     	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10018:	e1 2c       	mov	r14, r1
   1001a:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   1001c:	c8 01       	movw	r24, r16
   1001e:	82 0d       	add	r24, r2
   10020:	93 1d       	adc	r25, r3
   10022:	ca 5c       	subi	r28, 0xCA	; 202
   10024:	de 4f       	sbci	r29, 0xFE	; 254
   10026:	99 83       	std	Y+1, r25	; 0x01
   10028:	88 83       	st	Y, r24
   1002a:	c6 53       	subi	r28, 0x36	; 54
   1002c:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1002e:	87 ee       	ldi	r24, 0xE7	; 231
   10030:	9b e0       	ldi	r25, 0x0B	; 11
   10032:	2c 01       	movw	r4, r24
   10034:	61 2c       	mov	r6, r1
   10036:	24 c0       	rjmp	.+72     	; 0x10080 <__EEPROM_REGION_LENGTH__+0x80>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10038:	8a e0       	ldi	r24, 0x0A	; 10
   1003a:	9c e0       	ldi	r25, 0x0C	; 12
   1003c:	a0 e0       	ldi	r26, 0x00	; 0
   1003e:	ed b7       	in	r30, 0x3d	; 61
   10040:	fe b7       	in	r31, 0x3e	; 62
   10042:	81 83       	std	Z+1, r24	; 0x01
   10044:	92 83       	std	Z+2, r25	; 0x02
   10046:	a3 83       	std	Z+3, r26	; 0x03
   10048:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                return(0);
   1004c:	4e c0       	rjmp	.+156    	; 0x100ea <__EEPROM_REGION_LENGTH__+0xea>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   1004e:	f6 01       	movw	r30, r12
   10050:	80 81       	ld	r24, Z
   10052:	88 23       	and	r24, r24
   10054:	d9 f0       	breq	.+54     	; 0x1008c <__EEPROM_REGION_LENGTH__+0x8c>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10056:	f6 01       	movw	r30, r12
   10058:	01 90       	ld	r0, Z+
   1005a:	00 20       	and	r0, r0
   1005c:	e9 f7       	brne	.-6      	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
   1005e:	31 97       	sbiw	r30, 0x01	; 1
   10060:	ec 19       	sub	r30, r12
   10062:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10064:	e2 0d       	add	r30, r2
   10066:	f3 1d       	adc	r31, r3
   10068:	ef 3f       	cpi	r30, 0xFF	; 255
   1006a:	f1 05       	cpc	r31, r1
   1006c:	9c f0       	brlt	.+38     	; 0x10094 <__EEPROM_REGION_LENGTH__+0x94>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1006e:	ed b7       	in	r30, 0x3d	; 61
   10070:	fe b7       	in	r31, 0x3e	; 62
   10072:	d5 82       	std	Z+5, r13	; 0x05
   10074:	c4 82       	std	Z+4, r12	; 0x04
   10076:	41 82       	std	Z+1, r4	; 0x01
   10078:	52 82       	std	Z+2, r5	; 0x02
   1007a:	63 82       	std	Z+3, r6	; 0x03
   1007c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   10080:	c5 01       	movw	r24, r10
   10082:	0e 94 e4 76 	call	0xedc8	; 0xedc8 <readdir>
   10086:	6c 01       	movw	r12, r24
   10088:	89 2b       	or	r24, r25
   1008a:	09 f7       	brne	.-62     	; 0x1004e <__EEPROM_REGION_LENGTH__+0x4e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   1008c:	c5 01       	movw	r24, r10
   1008e:	0e 94 ab 76 	call	0xed56	; 0xed56 <closedir>
            break;
   10092:	1f c0       	rjmp	.+62     	; 0x100d2 <__EEPROM_REGION_LENGTH__+0xd2>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10094:	66 ea       	ldi	r22, 0xA6	; 166
   10096:	78 e0       	ldi	r23, 0x08	; 8
   10098:	c8 01       	movw	r24, r16
   1009a:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1009e:	89 2b       	or	r24, r25
   100a0:	29 f4       	brne	.+10     	; 0x100ac <__EEPROM_REGION_LENGTH__+0xac>
                {
                    strcat(fullpath,"/");
   100a2:	66 ea       	ldi	r22, 0xA6	; 166
   100a4:	78 e0       	ldi	r23, 0x08	; 8
   100a6:	c8 01       	movw	r24, r16
   100a8:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>
                }
                strcat(fullpath,de->d_name);
   100ac:	b6 01       	movw	r22, r12
   100ae:	c8 01       	movw	r24, r16
   100b0:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>
                files +=ls_info(fullpath,verbose);
   100b4:	b4 01       	movw	r22, r8
   100b6:	c8 01       	movw	r24, r16
   100b8:	63 de       	rcall	.-826    	; 0xfd80 <ls_info>
   100ba:	e8 0e       	add	r14, r24
   100bc:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   100be:	ca 5c       	subi	r28, 0xCA	; 202
   100c0:	de 4f       	sbci	r29, 0xFE	; 254
   100c2:	e8 81       	ld	r30, Y
   100c4:	f9 81       	ldd	r31, Y+1	; 0x01
   100c6:	c6 53       	subi	r28, 0x36	; 54
   100c8:	d1 40       	sbci	r29, 0x01	; 1
   100ca:	10 82       	st	Z, r1
   100cc:	d9 cf       	rjmp	.-78     	; 0x10080 <__EEPROM_REGION_LENGTH__+0x80>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   100ce:	e1 2c       	mov	r14, r1
   100d0:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   100d2:	ed b7       	in	r30, 0x3d	; 61
   100d4:	fe b7       	in	r31, 0x3e	; 62
   100d6:	f5 82       	std	Z+5, r15	; 0x05
   100d8:	e4 82       	std	Z+4, r14	; 0x04
   100da:	8c ed       	ldi	r24, 0xDC	; 220
   100dc:	9b e0       	ldi	r25, 0x0B	; 11
   100de:	a0 e0       	ldi	r26, 0x00	; 0
   100e0:	81 83       	std	Z+1, r24	; 0x01
   100e2:	92 83       	std	Z+2, r25	; 0x02
   100e4:	a3 83       	std	Z+3, r26	; 0x03
   100e6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    return(files);
}
   100ea:	c7 01       	movw	r24, r14
   100ec:	c9 5c       	subi	r28, 0xC9	; 201
   100ee:	de 4f       	sbci	r29, 0xFE	; 254
   100f0:	0f b6       	in	r0, 0x3f	; 63
   100f2:	f8 94       	cli
   100f4:	de bf       	out	0x3e, r29	; 62
   100f6:	0f be       	out	0x3f, r0	; 63
   100f8:	cd bf       	out	0x3d, r28	; 61
   100fa:	df 91       	pop	r29
   100fc:	cf 91       	pop	r28
   100fe:	1f 91       	pop	r17
   10100:	0f 91       	pop	r16
   10102:	ff 90       	pop	r15
   10104:	ef 90       	pop	r14
   10106:	df 90       	pop	r13
   10108:	cf 90       	pop	r12
   1010a:	bf 90       	pop	r11
   1010c:	af 90       	pop	r10
   1010e:	9f 90       	pop	r9
   10110:	8f 90       	pop	r8
   10112:	6f 90       	pop	r6
   10114:	5f 90       	pop	r5
   10116:	4f 90       	pop	r4
   10118:	3f 90       	pop	r3
   1011a:	2f 90       	pop	r2
   1011c:	08 95       	ret

0001011e <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1011e:	a7 e0       	ldi	r26, 0x07	; 7
   10120:	b1 e0       	ldi	r27, 0x01	; 1
   10122:	e5 e9       	ldi	r30, 0x95	; 149
   10124:	f0 e8       	ldi	r31, 0x80	; 128
   10126:	0c 94 5a e2 	jmp	0x1c4b4	; 0x1c4b4 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1012a:	fb 01       	movw	r30, r22
   1012c:	c0 80       	ld	r12, Z
   1012e:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   10130:	c1 14       	cp	r12, r1
   10132:	d1 04       	cpc	r13, r1
   10134:	09 f4       	brne	.+2      	; 0x10138 <posix_tests+0x1a>
   10136:	9a c1       	rjmp	.+820    	; 0x1046c <posix_tests+0x34e>
   10138:	2b 01       	movw	r4, r22
   1013a:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   1013c:	6e eb       	ldi	r22, 0xBE	; 190
   1013e:	7b e0       	ldi	r23, 0x0B	; 11
   10140:	c6 01       	movw	r24, r12
   10142:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   10146:	89 2b       	or	r24, r25
   10148:	a9 f0       	breq	.+42     	; 0x10174 <posix_tests+0x56>
    {
        ptr = argv[ind++];
   1014a:	f2 01       	movw	r30, r4
   1014c:	c2 80       	ldd	r12, Z+2	; 0x02
   1014e:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10150:	c1 14       	cp	r12, r1
   10152:	d1 04       	cpc	r13, r1
   10154:	21 f4       	brne	.+8      	; 0x1015e <posix_tests+0x40>
        {
            posix_help(1);
   10156:	81 e0       	ldi	r24, 0x01	; 1
   10158:	90 e0       	ldi	r25, 0x00	; 0
   1015a:	6f dc       	rcall	.-1826   	; 0xfa3a <posix_help>
   1015c:	28 c1       	rjmp	.+592    	; 0x103ae <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1015e:	69 e7       	ldi	r22, 0x79	; 121
   10160:	76 e1       	ldi	r23, 0x16	; 22
   10162:	c6 01       	movw	r24, r12
   10164:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   10168:	89 2b       	or	r24, r25
   1016a:	a9 f7       	brne	.-22     	; 0x10156 <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   1016c:	22 e0       	ldi	r18, 0x02	; 2
   1016e:	62 2e       	mov	r6, r18
   10170:	71 2c       	mov	r7, r1
   10172:	03 c0       	rjmp	.+6      	; 0x1017a <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10174:	66 24       	eor	r6, r6
   10176:	63 94       	inc	r6
   10178:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1017a:	73 01       	movw	r14, r6
   1017c:	ff ef       	ldi	r31, 0xFF	; 255
   1017e:	ef 1a       	sub	r14, r31
   10180:	ff 0a       	sbc	r15, r31
   10182:	98 01       	movw	r18, r16
   10184:	a7 01       	movw	r20, r14
   10186:	64 ec       	ldi	r22, 0xC4	; 196
   10188:	7b e0       	ldi	r23, 0x0B	; 11
   1018a:	c6 01       	movw	r24, r12
   1018c:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   10190:	89 2b       	or	r24, r25
   10192:	a1 f1       	breq	.+104    	; 0x101fc <posix_tests+0xde>
   10194:	73 01       	movw	r14, r6
   10196:	ee 0c       	add	r14, r14
   10198:	ff 1c       	adc	r15, r15
   1019a:	e4 0c       	add	r14, r4
   1019c:	f5 1c       	adc	r15, r5
   1019e:	57 01       	movw	r10, r14
   101a0:	47 01       	movw	r8, r14
   101a2:	63 01       	movw	r12, r6
   101a4:	41 2c       	mov	r4, r1
   101a6:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   101a8:	c0 16       	cp	r12, r16
   101aa:	d1 06       	cpc	r13, r17
   101ac:	1c f5       	brge	.+70     	; 0x101f4 <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   101ae:	68 ec       	ldi	r22, 0xC8	; 200
   101b0:	7b e0       	ldi	r23, 0x0B	; 11
   101b2:	f4 01       	movw	r30, r8
   101b4:	81 91       	ld	r24, Z+
   101b6:	91 91       	ld	r25, Z+
   101b8:	4f 01       	movw	r8, r30
   101ba:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   101be:	89 2b       	or	r24, r25
   101c0:	19 f0       	breq	.+6      	; 0x101c8 <posix_tests+0xaa>
                page = 1;
   101c2:	44 24       	eor	r4, r4
   101c4:	43 94       	inc	r4
   101c6:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   101c8:	ff ef       	ldi	r31, 0xFF	; 255
   101ca:	cf 1a       	sub	r12, r31
   101cc:	df 0a       	sbc	r13, r31
   101ce:	ec cf       	rjmp	.-40     	; 0x101a8 <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   101d0:	68 ec       	ldi	r22, 0xC8	; 200
   101d2:	7b e0       	ldi	r23, 0x0B	; 11
   101d4:	f5 01       	movw	r30, r10
   101d6:	81 91       	ld	r24, Z+
   101d8:	91 91       	ld	r25, Z+
   101da:	5f 01       	movw	r10, r30
   101dc:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   101e0:	89 2b       	or	r24, r25
   101e2:	29 f4       	brne	.+10     	; 0x101ee <posix_tests+0xd0>
                cat(argv[ind], page);
   101e4:	b2 01       	movw	r22, r4
   101e6:	f7 01       	movw	r30, r14
   101e8:	80 81       	ld	r24, Z
   101ea:	91 81       	ldd	r25, Z+1	; 0x01
   101ec:	5d dd       	rcall	.-1350   	; 0xfca8 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   101ee:	ff ef       	ldi	r31, 0xFF	; 255
   101f0:	6f 1a       	sub	r6, r31
   101f2:	7f 0a       	sbc	r7, r31
   101f4:	60 16       	cp	r6, r16
   101f6:	71 06       	cpc	r7, r17
   101f8:	5c f3       	brlt	.-42     	; 0x101d0 <posix_tests+0xb2>
   101fa:	d9 c0       	rjmp	.+434    	; 0x103ae <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   101fc:	53 01       	movw	r10, r6
   101fe:	82 e0       	ldi	r24, 0x02	; 2
   10200:	a8 0e       	add	r10, r24
   10202:	b1 1c       	adc	r11, r1
   10204:	98 01       	movw	r18, r16
   10206:	a5 01       	movw	r20, r10
   10208:	6b ec       	ldi	r22, 0xCB	; 203
   1020a:	7b e0       	ldi	r23, 0x0B	; 11
   1020c:	c6 01       	movw	r24, r12
   1020e:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   10212:	89 2b       	or	r24, r25
   10214:	59 f0       	breq	.+22     	; 0x1022c <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   10216:	f3 01       	movw	r30, r6
   10218:	ee 0f       	add	r30, r30
   1021a:	ff 1f       	adc	r31, r31
   1021c:	e4 0d       	add	r30, r4
   1021e:	f5 1d       	adc	r31, r5
   10220:	62 81       	ldd	r22, Z+2	; 0x02
   10222:	73 81       	ldd	r23, Z+3	; 0x03
   10224:	80 81       	ld	r24, Z
   10226:	91 81       	ldd	r25, Z+1	; 0x01
   10228:	29 dc       	rcall	.-1966   	; 0xfa7c <copy>
   1022a:	c1 c0       	rjmp	.+386    	; 0x103ae <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1022c:	98 01       	movw	r18, r16
   1022e:	a7 01       	movw	r20, r14
   10230:	60 ed       	ldi	r22, 0xD0	; 208
   10232:	7b e0       	ldi	r23, 0x0B	; 11
   10234:	c6 01       	movw	r24, r12
   10236:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1023a:	89 2b       	or	r24, r25
   1023c:	b9 f0       	breq	.+46     	; 0x1026c <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   1023e:	73 01       	movw	r14, r6
   10240:	ee 0c       	add	r14, r14
   10242:	ff 1c       	adc	r15, r15
   10244:	e4 0c       	add	r14, r4
   10246:	f5 1c       	adc	r15, r5
   10248:	f7 01       	movw	r30, r14
   1024a:	80 81       	ld	r24, Z
   1024c:	91 81       	ldd	r25, Z+1	; 0x01
   1024e:	0e 94 d0 75 	call	0xeba0	; 0xeba0 <chdir>
   10252:	89 2b       	or	r24, r25
   10254:	09 f4       	brne	.+2      	; 0x10258 <posix_tests+0x13a>
   10256:	ab c0       	rjmp	.+342    	; 0x103ae <posix_tests+0x290>
            printf("chdir %s failed\n", argv[ind]);
   10258:	f7 01       	movw	r30, r14
   1025a:	80 81       	ld	r24, Z
   1025c:	91 81       	ldd	r25, Z+1	; 0x01
   1025e:	ed b7       	in	r30, 0x3d	; 61
   10260:	fe b7       	in	r31, 0x3e	; 62
   10262:	95 83       	std	Z+5, r25	; 0x05
   10264:	84 83       	std	Z+4, r24	; 0x04
   10266:	8f e6       	ldi	r24, 0x6F	; 111
   10268:	9d e0       	ldi	r25, 0x0D	; 13
   1026a:	9b c0       	rjmp	.+310    	; 0x103a2 <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   1026c:	98 01       	movw	r18, r16
   1026e:	a3 01       	movw	r20, r6
   10270:	68 ed       	ldi	r22, 0xD8	; 216
   10272:	78 e0       	ldi	r23, 0x08	; 8
   10274:	c6 01       	movw	r24, r12
   10276:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1027a:	4c 01       	movw	r8, r24
   1027c:	89 2b       	or	r24, r25
   1027e:	69 f1       	breq	.+90     	; 0x102da <posix_tests+0x1bc>
   10280:	73 01       	movw	r14, r6
   10282:	ee 0c       	add	r14, r14
   10284:	ff 1c       	adc	r15, r15
   10286:	e4 0c       	add	r14, r4
   10288:	f5 1c       	adc	r15, r5
   1028a:	c1 2c       	mov	r12, r1
   1028c:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1028e:	c6 01       	movw	r24, r12
   10290:	86 0d       	add	r24, r6
   10292:	97 1d       	adc	r25, r7
   10294:	80 17       	cp	r24, r16
   10296:	91 07       	cpc	r25, r17
   10298:	b4 f4       	brge	.+44     	; 0x102c6 <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   1029a:	63 ed       	ldi	r22, 0xD3	; 211
   1029c:	7b e0       	ldi	r23, 0x0B	; 11
   1029e:	f7 01       	movw	r30, r14
   102a0:	80 81       	ld	r24, Z
   102a2:	91 81       	ldd	r25, Z+1	; 0x01
   102a4:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   102a8:	89 2b       	or	r24, r25
   102aa:	31 f4       	brne	.+12     	; 0x102b8 <posix_tests+0x19a>
                ls(argv[i],1);
   102ac:	61 e0       	ldi	r22, 0x01	; 1
   102ae:	70 e0       	ldi	r23, 0x00	; 0
   102b0:	f7 01       	movw	r30, r14
   102b2:	80 81       	ld	r24, Z
   102b4:	91 81       	ldd	r25, Z+1	; 0x01
   102b6:	1f de       	rcall	.-962    	; 0xfef6 <ls>
            ++args;
   102b8:	ff ef       	ldi	r31, 0xFF	; 255
   102ba:	cf 1a       	sub	r12, r31
   102bc:	df 0a       	sbc	r13, r31
   102be:	82 e0       	ldi	r24, 0x02	; 2
   102c0:	e8 0e       	add	r14, r24
   102c2:	f1 1c       	adc	r15, r1
   102c4:	e4 cf       	rjmp	.-56     	; 0x1028e <posix_tests+0x170>
        }
        if(!args)
   102c6:	c1 14       	cp	r12, r1
   102c8:	d1 04       	cpc	r13, r1
   102ca:	09 f0       	breq	.+2      	; 0x102ce <posix_tests+0x1b0>
   102cc:	70 c0       	rjmp	.+224    	; 0x103ae <posix_tests+0x290>
        {
            ls("",1);
   102ce:	61 e0       	ldi	r22, 0x01	; 1
   102d0:	70 e0       	ldi	r23, 0x00	; 0
   102d2:	8d e2       	ldi	r24, 0x2D	; 45
   102d4:	9c e0       	ldi	r25, 0x0C	; 12
   102d6:	0f de       	rcall	.-994    	; 0xfef6 <ls>
   102d8:	6a c0       	rjmp	.+212    	; 0x103ae <posix_tests+0x290>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   102da:	98 01       	movw	r18, r16
   102dc:	a7 01       	movw	r20, r14
   102de:	66 ed       	ldi	r22, 0xD6	; 214
   102e0:	7b e0       	ldi	r23, 0x0B	; 11
   102e2:	c6 01       	movw	r24, r12
   102e4:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   102e8:	89 2b       	or	r24, r25
   102ea:	71 f1       	breq	.+92     	; 0x10348 <posix_tests+0x22a>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   102ec:	e0 16       	cp	r14, r16
   102ee:	f1 06       	cpc	r15, r17
   102f0:	7c f4       	brge	.+30     	; 0x10310 <posix_tests+0x1f2>
        {
            mode = strtol(argv[ind+1],NULL,8);
   102f2:	ee 0c       	add	r14, r14
   102f4:	ff 1c       	adc	r15, r15
   102f6:	f2 01       	movw	r30, r4
   102f8:	ee 0d       	add	r30, r14
   102fa:	ff 1d       	adc	r31, r15
   102fc:	48 e0       	ldi	r20, 0x08	; 8
   102fe:	50 e0       	ldi	r21, 0x00	; 0
   10300:	60 e0       	ldi	r22, 0x00	; 0
   10302:	70 e0       	ldi	r23, 0x00	; 0
   10304:	80 81       	ld	r24, Z
   10306:	91 81       	ldd	r25, Z+1	; 0x01
   10308:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <strtol>
   1030c:	ab 01       	movw	r20, r22
   1030e:	02 c0       	rjmp	.+4      	; 0x10314 <posix_tests+0x1f6>
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10310:	4f ef       	ldi	r20, 0xFF	; 255
   10312:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10314:	73 01       	movw	r14, r6
   10316:	ee 0c       	add	r14, r14
   10318:	ff 1c       	adc	r15, r15
   1031a:	e4 0c       	add	r14, r4
   1031c:	f5 1c       	adc	r15, r5
   1031e:	05 2e       	mov	r0, r21
   10320:	00 0c       	add	r0, r0
   10322:	66 0b       	sbc	r22, r22
   10324:	77 0b       	sbc	r23, r23
   10326:	f7 01       	movw	r30, r14
   10328:	80 81       	ld	r24, Z
   1032a:	91 81       	ldd	r25, Z+1	; 0x01
   1032c:	0e 94 3d 76 	call	0xec7a	; 0xec7a <mkdir>
   10330:	89 2b       	or	r24, r25
   10332:	e9 f1       	breq	.+122    	; 0x103ae <posix_tests+0x290>
        {
            printf("mkdir %s failed\n", argv[ind]);
   10334:	f7 01       	movw	r30, r14
   10336:	80 81       	ld	r24, Z
   10338:	91 81       	ldd	r25, Z+1	; 0x01
   1033a:	ed b7       	in	r30, 0x3d	; 61
   1033c:	fe b7       	in	r31, 0x3e	; 62
   1033e:	95 83       	std	Z+5, r25	; 0x05
   10340:	84 83       	std	Z+4, r24	; 0x04
   10342:	8e e5       	ldi	r24, 0x5E	; 94
   10344:	9d e0       	ldi	r25, 0x0D	; 13
   10346:	b4 c0       	rjmp	.+360    	; 0x104b0 <posix_tests+0x392>
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10348:	98 01       	movw	r18, r16
   1034a:	a7 01       	movw	r20, r14
   1034c:	6c ed       	ldi	r22, 0xDC	; 220
   1034e:	7b e0       	ldi	r23, 0x0B	; 11
   10350:	c6 01       	movw	r24, r12
   10352:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   10356:	89 2b       	or	r24, r25
   10358:	71 f0       	breq	.+28     	; 0x10376 <posix_tests+0x258>
    {
        setpage(atoi(argv[ind]));
   1035a:	66 0c       	add	r6, r6
   1035c:	77 1c       	adc	r7, r7
   1035e:	f2 01       	movw	r30, r4
   10360:	e6 0d       	add	r30, r6
   10362:	f7 1d       	adc	r31, r7
   10364:	80 81       	ld	r24, Z
   10366:	91 81       	ldd	r25, Z+1	; 0x01
   10368:	0e 94 46 45 	call	0x8a8c	; 0x8a8c <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   1036c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10370:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10374:	1c c0       	rjmp	.+56     	; 0x103ae <posix_tests+0x290>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10376:	98 01       	movw	r18, r16
   10378:	a3 01       	movw	r20, r6
   1037a:	61 ee       	ldi	r22, 0xE1	; 225
   1037c:	7b e0       	ldi	r23, 0x0B	; 11
   1037e:	c6 01       	movw	r24, r12
   10380:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   10384:	4c 01       	movw	r8, r24
   10386:	89 2b       	or	r24, r25
   10388:	b1 f0       	breq	.+44     	; 0x103b6 <posix_tests+0x298>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1038a:	6e ef       	ldi	r22, 0xFE	; 254
   1038c:	70 e0       	ldi	r23, 0x00	; 0
   1038e:	ce 01       	movw	r24, r28
   10390:	08 96       	adiw	r24, 0x08	; 8
   10392:	0e 94 18 76 	call	0xec30	; 0xec30 <getcwd>
   10396:	ed b7       	in	r30, 0x3d	; 61
   10398:	fe b7       	in	r31, 0x3e	; 62
   1039a:	95 83       	std	Z+5, r25	; 0x05
   1039c:	84 83       	std	Z+4, r24	; 0x04
   1039e:	8a e5       	ldi	r24, 0x5A	; 90
   103a0:	9d e0       	ldi	r25, 0x0D	; 13
   103a2:	a0 e0       	ldi	r26, 0x00	; 0
   103a4:	81 83       	std	Z+1, r24	; 0x01
   103a6:	92 83       	std	Z+2, r25	; 0x02
   103a8:	a3 83       	std	Z+3, r26	; 0x03
   103aa:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(1);
   103ae:	88 24       	eor	r8, r8
   103b0:	83 94       	inc	r8
   103b2:	91 2c       	mov	r9, r1
   103b4:	83 c0       	rjmp	.+262    	; 0x104bc <posix_tests+0x39e>
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   103b6:	98 01       	movw	r18, r16
   103b8:	a5 01       	movw	r20, r10
   103ba:	65 ee       	ldi	r22, 0xE5	; 229
   103bc:	7b e0       	ldi	r23, 0x0B	; 11
   103be:	c6 01       	movw	r24, r12
   103c0:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   103c4:	89 2b       	or	r24, r25
   103c6:	61 f1       	breq	.+88     	; 0x10420 <posix_tests+0x302>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   103c8:	66 0c       	add	r6, r6
   103ca:	77 1c       	adc	r7, r7
   103cc:	82 01       	movw	r16, r4
   103ce:	06 0d       	add	r16, r6
   103d0:	17 1d       	adc	r17, r7
   103d2:	f2 e0       	ldi	r31, 0x02	; 2
   103d4:	6f 0e       	add	r6, r31
   103d6:	71 1c       	adc	r7, r1
   103d8:	72 01       	movw	r14, r4
   103da:	e6 0c       	add	r14, r6
   103dc:	f7 1c       	adc	r15, r7
   103de:	f7 01       	movw	r30, r14
   103e0:	60 81       	ld	r22, Z
   103e2:	71 81       	ldd	r23, Z+1	; 0x01
   103e4:	f8 01       	movw	r30, r16
   103e6:	80 81       	ld	r24, Z
   103e8:	91 81       	ldd	r25, Z+1	; 0x01
   103ea:	0e 94 6b 76 	call	0xecd6	; 0xecd6 <rename>
   103ee:	89 2b       	or	r24, r25
   103f0:	f1 f2       	breq	.-68     	; 0x103ae <posix_tests+0x290>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   103f2:	f7 01       	movw	r30, r14
   103f4:	80 81       	ld	r24, Z
   103f6:	91 81       	ldd	r25, Z+1	; 0x01
   103f8:	ed b7       	in	r30, 0x3d	; 61
   103fa:	fe b7       	in	r31, 0x3e	; 62
   103fc:	97 83       	std	Z+7, r25	; 0x07
   103fe:	86 83       	std	Z+6, r24	; 0x06
   10400:	f8 01       	movw	r30, r16
   10402:	80 81       	ld	r24, Z
   10404:	91 81       	ldd	r25, Z+1	; 0x01
   10406:	ed b7       	in	r30, 0x3d	; 61
   10408:	fe b7       	in	r31, 0x3e	; 62
   1040a:	95 83       	std	Z+5, r25	; 0x05
   1040c:	84 83       	std	Z+4, r24	; 0x04
   1040e:	89 e4       	ldi	r24, 0x49	; 73
   10410:	9d e0       	ldi	r25, 0x0D	; 13
   10412:	a0 e0       	ldi	r26, 0x00	; 0
   10414:	81 83       	std	Z+1, r24	; 0x01
   10416:	92 83       	std	Z+2, r25	; 0x02
   10418:	a3 83       	std	Z+3, r26	; 0x03
   1041a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            return(0);
   1041e:	4e c0       	rjmp	.+156    	; 0x104bc <posix_tests+0x39e>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10420:	98 01       	movw	r18, r16
   10422:	a7 01       	movw	r20, r14
   10424:	6c ee       	ldi	r22, 0xEC	; 236
   10426:	7b e0       	ldi	r23, 0x0B	; 11
   10428:	c6 01       	movw	r24, r12
   1042a:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1042e:	4c 01       	movw	r8, r24
   10430:	89 2b       	or	r24, r25
   10432:	f9 f0       	breq	.+62     	; 0x10472 <posix_tests+0x354>
    {
        if ( unlink(argv[ind]) != 0)
   10434:	73 01       	movw	r14, r6
   10436:	ee 0c       	add	r14, r14
   10438:	ff 1c       	adc	r15, r15
   1043a:	e4 0c       	add	r14, r4
   1043c:	f5 1c       	adc	r15, r5
   1043e:	f7 01       	movw	r30, r14
   10440:	80 81       	ld	r24, Z
   10442:	91 81       	ldd	r25, Z+1	; 0x01
   10444:	0e 94 8a 76 	call	0xed14	; 0xed14 <unlink>
   10448:	89 2b       	or	r24, r25
   1044a:	09 f4       	brne	.+2      	; 0x1044e <posix_tests+0x330>
   1044c:	b0 cf       	rjmp	.-160    	; 0x103ae <posix_tests+0x290>
        {
            printf("rm %s failed\n", argv[ind]);
   1044e:	f7 01       	movw	r30, r14
   10450:	80 81       	ld	r24, Z
   10452:	91 81       	ldd	r25, Z+1	; 0x01
   10454:	ed b7       	in	r30, 0x3d	; 61
   10456:	fe b7       	in	r31, 0x3e	; 62
   10458:	95 83       	std	Z+5, r25	; 0x05
   1045a:	84 83       	std	Z+4, r24	; 0x04
   1045c:	8b e3       	ldi	r24, 0x3B	; 59
   1045e:	9d e0       	ldi	r25, 0x0D	; 13
   10460:	a0 e0       	ldi	r26, 0x00	; 0
   10462:	81 83       	std	Z+1, r24	; 0x01
   10464:	92 83       	std	Z+2, r25	; 0x02
   10466:	a3 83       	std	Z+3, r26	; 0x03
   10468:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            return(0);
   1046c:	81 2c       	mov	r8, r1
   1046e:	91 2c       	mov	r9, r1
   10470:	25 c0       	rjmp	.+74     	; 0x104bc <posix_tests+0x39e>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10472:	98 01       	movw	r18, r16
   10474:	a7 01       	movw	r20, r14
   10476:	6f ee       	ldi	r22, 0xEF	; 239
   10478:	7b e0       	ldi	r23, 0x0B	; 11
   1047a:	c6 01       	movw	r24, r12
   1047c:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   10480:	89 2b       	or	r24, r25
   10482:	a1 f3       	breq	.-24     	; 0x1046c <posix_tests+0x34e>
    {
        if ( rmdir(argv[ind]) != 0)
   10484:	73 01       	movw	r14, r6
   10486:	ee 0c       	add	r14, r14
   10488:	ff 1c       	adc	r15, r15
   1048a:	e4 0c       	add	r14, r4
   1048c:	f5 1c       	adc	r15, r5
   1048e:	f7 01       	movw	r30, r14
   10490:	80 81       	ld	r24, Z
   10492:	91 81       	ldd	r25, Z+1	; 0x01
   10494:	0e 94 a9 76 	call	0xed52	; 0xed52 <rmdir>
   10498:	89 2b       	or	r24, r25
   1049a:	09 f4       	brne	.+2      	; 0x1049e <posix_tests+0x380>
   1049c:	88 cf       	rjmp	.-240    	; 0x103ae <posix_tests+0x290>
        {
            printf("rmdir %s failed\n", argv[ind]);
   1049e:	f7 01       	movw	r30, r14
   104a0:	80 81       	ld	r24, Z
   104a2:	91 81       	ldd	r25, Z+1	; 0x01
   104a4:	ed b7       	in	r30, 0x3d	; 61
   104a6:	fe b7       	in	r31, 0x3e	; 62
   104a8:	95 83       	std	Z+5, r25	; 0x05
   104aa:	84 83       	std	Z+4, r24	; 0x04
   104ac:	8a e2       	ldi	r24, 0x2A	; 42
   104ae:	9d e0       	ldi	r25, 0x0D	; 13
   104b0:	a0 e0       	ldi	r26, 0x00	; 0
   104b2:	81 83       	std	Z+1, r24	; 0x01
   104b4:	92 83       	std	Z+2, r25	; 0x02
   104b6:	a3 83       	std	Z+3, r26	; 0x03
   104b8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(1);
    }
#endif

    return(0);
}
   104bc:	c4 01       	movw	r24, r8
   104be:	c9 5f       	subi	r28, 0xF9	; 249
   104c0:	de 4f       	sbci	r29, 0xFE	; 254
   104c2:	e0 e1       	ldi	r30, 0x10	; 16
   104c4:	0c 94 76 e2 	jmp	0x1c4ec	; 0x1c4ec <__epilogue_restores__+0x4>

000104c8 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   104c8:	00 d0       	rcall	.+0      	; 0x104ca <gpib_timer_init+0x2>
   104ca:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   104cc:	61 e0       	ldi	r22, 0x01	; 1
   104ce:	70 e0       	ldi	r23, 0x00	; 0
   104d0:	80 e2       	ldi	r24, 0x20	; 32
   104d2:	94 e8       	ldi	r25, 0x84	; 132
   104d4:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <set_timers>
   104d8:	01 96       	adiw	r24, 0x01	; 1
   104da:	51 f4       	brne	.+20     	; 0x104f0 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   104dc:	8c ea       	ldi	r24, 0xAC	; 172
   104de:	9e e0       	ldi	r25, 0x0E	; 14
   104e0:	a0 e0       	ldi	r26, 0x00	; 0
   104e2:	ed b7       	in	r30, 0x3d	; 61
   104e4:	fe b7       	in	r31, 0x3e	; 62
   104e6:	81 83       	std	Z+1, r24	; 0x01
   104e8:	92 83       	std	Z+2, r25	; 0x02
   104ea:	a3 83       	std	Z+3, r26	; 0x03
   104ec:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    gpib_timer_reset();
   104f0:	95 d1       	rcall	.+810    	; 0x1081c <gpib_timer_reset>
}
   104f2:	0f 90       	pop	r0
   104f4:	0f 90       	pop	r0
   104f6:	0f 90       	pop	r0
   104f8:	08 95       	ret

000104fa <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   104fa:	28 2f       	mov	r18, r24
   104fc:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   104fe:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10500:	88 0f       	add	r24, r24
        if(mask & 1)
   10502:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10504:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10506:	26 95       	lsr	r18
   10508:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   1050a:	d1 f7       	brne	.-12     	; 0x10500 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1050c:	08 95       	ret

0001050e <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   1050e:	f5 df       	rcall	.-22     	; 0x104fa <reverse_8bits>
   10510:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10514:	0e 94 b5 28 	call	0x516a	; 0x516a <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   10518:	2a 9a       	sbi	0x05, 2	; 5
   1051a:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   1051c:	2a 98       	cbi	0x05, 2	; 5
   1051e:	22 9a       	sbi	0x04, 2	; 4
   10520:	08 95       	ret

00010522 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10522:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <_ppr_reg>
   10526:	e9 cf       	rjmp	.-46     	; 0x104fa <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   10528:	08 95       	ret

0001052a <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   1052a:	00 d0       	rcall	.+0      	; 0x1052c <ppr_init+0x2>
   1052c:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   1052e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10532:	81 ff       	sbrs	r24, 1
   10534:	0a c0       	rjmp	.+20     	; 0x1054a <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10536:	89 e9       	ldi	r24, 0x99	; 153
   10538:	9e e0       	ldi	r25, 0x0E	; 14
   1053a:	a0 e0       	ldi	r26, 0x00	; 0
   1053c:	ed b7       	in	r30, 0x3d	; 61
   1053e:	fe b7       	in	r31, 0x3e	; 62
   10540:	81 83       	std	Z+1, r24	; 0x01
   10542:	92 83       	std	Z+2, r25	; 0x02
   10544:	a3 83       	std	Z+3, r26	; 0x03
   10546:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
    ppr_set(0);
   1054a:	80 e0       	ldi	r24, 0x00	; 0
   1054c:	e0 df       	rcall	.-64     	; 0x1050e <ppr_set>
}
   1054e:	0f 90       	pop	r0
   10550:	0f 90       	pop	r0
   10552:	0f 90       	pop	r0
   10554:	08 95       	ret

00010556 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10556:	21 e0       	ldi	r18, 0x01	; 1
   10558:	30 e0       	ldi	r19, 0x00	; 0
   1055a:	01 c0       	rjmp	.+2      	; 0x1055e <ppr_bit_set+0x8>
   1055c:	22 0f       	add	r18, r18
   1055e:	8a 95       	dec	r24
   10560:	ea f7       	brpl	.-6      	; 0x1055c <ppr_bit_set+0x6>
   10562:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <_ppr_reg>
   10566:	82 2b       	or	r24, r18
   10568:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <_ppr_reg>
    ppr_set(_ppr_reg);
   1056c:	d0 cf       	rjmp	.-96     	; 0x1050e <ppr_set>
   1056e:	08 95       	ret

00010570 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10570:	21 e0       	ldi	r18, 0x01	; 1
   10572:	30 e0       	ldi	r19, 0x00	; 0
   10574:	01 c0       	rjmp	.+2      	; 0x10578 <ppr_bit_clr+0x8>
   10576:	22 0f       	add	r18, r18
   10578:	8a 95       	dec	r24
   1057a:	ea f7       	brpl	.-6      	; 0x10576 <ppr_bit_clr+0x6>
   1057c:	20 95       	com	r18
   1057e:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <_ppr_reg>
   10582:	82 23       	and	r24, r18
   10584:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <_ppr_reg>
    ppr_set(_ppr_reg);
   10588:	c2 cf       	rjmp	.-124    	; 0x1050e <ppr_set>
   1058a:	08 95       	ret

0001058c <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   1058c:	0f 93       	push	r16
   1058e:	1f 93       	push	r17
   10590:	cf 93       	push	r28
   10592:	df 93       	push	r29
   10594:	00 d0       	rcall	.+0      	; 0x10596 <dbf_open+0xa>
   10596:	00 d0       	rcall	.+0      	; 0x10598 <dbf_open+0xc>
   10598:	1f 92       	push	r1
   1059a:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   1059c:	0e 94 65 58 	call	0xb0ca	; 0xb0ca <f_open>
   105a0:	ec 01       	movw	r28, r24
    if(rc)
   105a2:	89 2b       	or	r24, r25
   105a4:	79 f0       	breq	.+30     	; 0x105c4 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   105a6:	ed b7       	in	r30, 0x3d	; 61
   105a8:	fe b7       	in	r31, 0x3e	; 62
   105aa:	15 83       	std	Z+5, r17	; 0x05
   105ac:	04 83       	std	Z+4, r16	; 0x04
   105ae:	88 e8       	ldi	r24, 0x88	; 136
   105b0:	9e e0       	ldi	r25, 0x0E	; 14
   105b2:	a0 e0       	ldi	r26, 0x00	; 0
   105b4:	81 83       	std	Z+1, r24	; 0x01
   105b6:	92 83       	std	Z+2, r25	; 0x02
   105b8:	a3 83       	std	Z+3, r26	; 0x03
   105ba:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        put_rc(rc);
   105be:	ce 01       	movw	r24, r28
   105c0:	0e 94 3f 6f 	call	0xde7e	; 0xde7e <put_rc>
        return (rc);
    }
    return(0);
}
   105c4:	ce 01       	movw	r24, r28
   105c6:	cd b7       	in	r28, 0x3d	; 61
   105c8:	de b7       	in	r29, 0x3e	; 62
   105ca:	25 96       	adiw	r28, 0x05	; 5
   105cc:	e4 e0       	ldi	r30, 0x04	; 4
   105ce:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

000105d2 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   105d2:	cf 93       	push	r28
   105d4:	df 93       	push	r29
   105d6:	00 d0       	rcall	.+0      	; 0x105d8 <dbf_read+0x6>
   105d8:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   105da:	0e 94 1d 5a 	call	0xb43a	; 0xb43a <f_read>
   105de:	ec 01       	movw	r28, r24
    if(rc)
   105e0:	89 2b       	or	r24, r25
   105e2:	69 f0       	breq	.+26     	; 0x105fe <dbf_read+0x2c>
    {
        printf("Read error: ");
   105e4:	8b e7       	ldi	r24, 0x7B	; 123
   105e6:	9e e0       	ldi	r25, 0x0E	; 14
   105e8:	a0 e0       	ldi	r26, 0x00	; 0
   105ea:	ed b7       	in	r30, 0x3d	; 61
   105ec:	fe b7       	in	r31, 0x3e	; 62
   105ee:	81 83       	std	Z+1, r24	; 0x01
   105f0:	92 83       	std	Z+2, r25	; 0x02
   105f2:	a3 83       	std	Z+3, r26	; 0x03
   105f4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        put_rc(rc);
   105f8:	ce 01       	movw	r24, r28
   105fa:	0e 94 3f 6f 	call	0xde7e	; 0xde7e <put_rc>
        return (rc);
    }
    return(0);
}
   105fe:	ce 01       	movw	r24, r28
   10600:	cd b7       	in	r28, 0x3d	; 61
   10602:	de b7       	in	r29, 0x3e	; 62
   10604:	23 96       	adiw	r28, 0x03	; 3
   10606:	e2 e0       	ldi	r30, 0x02	; 2
   10608:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0001060c <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   1060c:	cf 93       	push	r28
   1060e:	df 93       	push	r29
   10610:	00 d0       	rcall	.+0      	; 0x10612 <dbf_write+0x6>
   10612:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10614:	0e 94 68 5b 	call	0xb6d0	; 0xb6d0 <f_write>
   10618:	ec 01       	movw	r28, r24
    if(rc)
   1061a:	89 2b       	or	r24, r25
   1061c:	69 f0       	breq	.+26     	; 0x10638 <dbf_write+0x2c>
    {
        printf("Write error: ");
   1061e:	8d e6       	ldi	r24, 0x6D	; 109
   10620:	9e e0       	ldi	r25, 0x0E	; 14
   10622:	a0 e0       	ldi	r26, 0x00	; 0
   10624:	ed b7       	in	r30, 0x3d	; 61
   10626:	fe b7       	in	r31, 0x3e	; 62
   10628:	81 83       	std	Z+1, r24	; 0x01
   1062a:	92 83       	std	Z+2, r25	; 0x02
   1062c:	a3 83       	std	Z+3, r26	; 0x03
   1062e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        put_rc(rc);
   10632:	ce 01       	movw	r24, r28
   10634:	0e 94 3f 6f 	call	0xde7e	; 0xde7e <put_rc>
        return (rc);
    }
    return(0);
}
   10638:	ce 01       	movw	r24, r28
   1063a:	cd b7       	in	r28, 0x3d	; 61
   1063c:	de b7       	in	r29, 0x3e	; 62
   1063e:	23 96       	adiw	r28, 0x03	; 3
   10640:	e2 e0       	ldi	r30, 0x02	; 2
   10642:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00010646 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10646:	cf 93       	push	r28
   10648:	df 93       	push	r29
   1064a:	00 d0       	rcall	.+0      	; 0x1064c <dbf_lseek+0x6>
   1064c:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   1064e:	0e 94 29 5f 	call	0xbe52	; 0xbe52 <f_lseek>
   10652:	ec 01       	movw	r28, r24
    if(rc)
   10654:	89 2b       	or	r24, r25
   10656:	69 f0       	breq	.+26     	; 0x10672 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10658:	80 e6       	ldi	r24, 0x60	; 96
   1065a:	9e e0       	ldi	r25, 0x0E	; 14
   1065c:	a0 e0       	ldi	r26, 0x00	; 0
   1065e:	ed b7       	in	r30, 0x3d	; 61
   10660:	fe b7       	in	r31, 0x3e	; 62
   10662:	81 83       	std	Z+1, r24	; 0x01
   10664:	92 83       	std	Z+2, r25	; 0x02
   10666:	a3 83       	std	Z+3, r26	; 0x03
   10668:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        put_rc(rc);
   1066c:	ce 01       	movw	r24, r28
   1066e:	0e 94 3f 6f 	call	0xde7e	; 0xde7e <put_rc>
        return (rc);
    }
    return(0);
}
   10672:	ce 01       	movw	r24, r28
   10674:	cd b7       	in	r28, 0x3d	; 61
   10676:	de b7       	in	r29, 0x3e	; 62
   10678:	23 96       	adiw	r28, 0x03	; 3
   1067a:	e2 e0       	ldi	r30, 0x02	; 2
   1067c:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00010680 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10680:	cf 93       	push	r28
   10682:	df 93       	push	r29
   10684:	00 d0       	rcall	.+0      	; 0x10686 <dbf_close+0x6>
   10686:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10688:	0e 94 7f 5d 	call	0xbafe	; 0xbafe <f_close>
   1068c:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   1068e:	89 2b       	or	r24, r25
   10690:	69 f0       	breq	.+26     	; 0x106ac <dbf_close+0x2c>
    {
        printf("Close error: ");
   10692:	82 e5       	ldi	r24, 0x52	; 82
   10694:	9e e0       	ldi	r25, 0x0E	; 14
   10696:	a0 e0       	ldi	r26, 0x00	; 0
   10698:	ed b7       	in	r30, 0x3d	; 61
   1069a:	fe b7       	in	r31, 0x3e	; 62
   1069c:	81 83       	std	Z+1, r24	; 0x01
   1069e:	92 83       	std	Z+2, r25	; 0x02
   106a0:	a3 83       	std	Z+3, r26	; 0x03
   106a2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        put_rc(rc);
   106a6:	ce 01       	movw	r24, r28
   106a8:	0e 94 3f 6f 	call	0xde7e	; 0xde7e <put_rc>
        return (rc);
    }
    return(0);
}
   106ac:	ce 01       	movw	r24, r28
   106ae:	cd b7       	in	r28, 0x3d	; 61
   106b0:	de b7       	in	r29, 0x3e	; 62
   106b2:	23 96       	adiw	r28, 0x03	; 3
   106b4:	e2 e0       	ldi	r30, 0x02	; 2
   106b6:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000106ba <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   106ba:	a6 e2       	ldi	r26, 0x26	; 38
   106bc:	b2 e0       	ldi	r27, 0x02	; 2
   106be:	e3 e6       	ldi	r30, 0x63	; 99
   106c0:	f3 e8       	ldi	r31, 0x83	; 131
   106c2:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
   106c6:	4a 01       	movw	r8, r20
   106c8:	5b 01       	movw	r10, r22
   106ca:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   106cc:	cb 5d       	subi	r28, 0xDB	; 219
   106ce:	dd 4f       	sbci	r29, 0xFD	; 253
   106d0:	19 82       	std	Y+1, r1	; 0x01
   106d2:	18 82       	st	Y, r1
   106d4:	c5 52       	subi	r28, 0x25	; 37
   106d6:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   106d8:	43 e0       	ldi	r20, 0x03	; 3
   106da:	bc 01       	movw	r22, r24
   106dc:	ce 01       	movw	r24, r28
   106de:	01 96       	adiw	r24, 0x01	; 1
   106e0:	55 df       	rcall	.-342    	; 0x1058c <dbf_open>
    if( rc != FR_OK)
   106e2:	89 2b       	or	r24, r25
   106e4:	19 f0       	breq	.+6      	; 0x106ec <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   106e6:	81 e1       	ldi	r24, 0x11	; 17
   106e8:	90 e0       	ldi	r25, 0x00	; 0
   106ea:	2f c0       	rjmp	.+94     	; 0x1074a <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   106ec:	b5 01       	movw	r22, r10
   106ee:	a4 01       	movw	r20, r8
   106f0:	ce 01       	movw	r24, r28
   106f2:	01 96       	adiw	r24, 0x01	; 1
   106f4:	a8 df       	rcall	.-176    	; 0x10646 <dbf_lseek>
    if( rc != FR_OK)
   106f6:	89 2b       	or	r24, r25
   106f8:	59 f0       	breq	.+22     	; 0x10710 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   106fa:	85 e0       	ldi	r24, 0x05	; 5
   106fc:	90 e0       	ldi	r25, 0x00	; 0
   106fe:	f7 01       	movw	r30, r14
   10700:	91 83       	std	Z+1, r25	; 0x01
   10702:	80 83       	st	Z, r24
        dbf_close(&fp);
   10704:	ce 01       	movw	r24, r28
   10706:	01 96       	adiw	r24, 0x01	; 1
   10708:	bb df       	rcall	.-138    	; 0x10680 <dbf_close>
        return( -1 );
   1070a:	8f ef       	ldi	r24, 0xFF	; 255
   1070c:	9f ef       	ldi	r25, 0xFF	; 255
   1070e:	27 c0       	rjmp	.+78     	; 0x1075e <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10710:	9e 01       	movw	r18, r28
   10712:	2b 5d       	subi	r18, 0xDB	; 219
   10714:	3d 4f       	sbci	r19, 0xFD	; 253
   10716:	a8 01       	movw	r20, r16
   10718:	b6 01       	movw	r22, r12
   1071a:	ce 01       	movw	r24, r28
   1071c:	01 96       	adiw	r24, 0x01	; 1
   1071e:	59 df       	rcall	.-334    	; 0x105d2 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10720:	89 2b       	or	r24, r25
   10722:	49 f4       	brne	.+18     	; 0x10736 <dbf_open_read+0x7c>
   10724:	cb 5d       	subi	r28, 0xDB	; 219
   10726:	dd 4f       	sbci	r29, 0xFD	; 253
   10728:	88 81       	ld	r24, Y
   1072a:	99 81       	ldd	r25, Y+1	; 0x01
   1072c:	c5 52       	subi	r28, 0x25	; 37
   1072e:	d2 40       	sbci	r29, 0x02	; 2
   10730:	08 17       	cp	r16, r24
   10732:	19 07       	cpc	r17, r25
   10734:	19 f0       	breq	.+6      	; 0x1073c <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10736:	81 e0       	ldi	r24, 0x01	; 1
   10738:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   1073a:	e1 cf       	rjmp	.-62     	; 0x106fe <dbf_open_read+0x44>
   1073c:	ce 01       	movw	r24, r28
   1073e:	01 96       	adiw	r24, 0x01	; 1
   10740:	9f df       	rcall	.-194    	; 0x10680 <dbf_close>
    if( rc != FR_OK)
   10742:	89 2b       	or	r24, r25
   10744:	31 f0       	breq	.+12     	; 0x10752 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10746:	80 e1       	ldi	r24, 0x10	; 16
   10748:	90 e0       	ldi	r25, 0x00	; 0
   1074a:	f7 01       	movw	r30, r14
   1074c:	91 83       	std	Z+1, r25	; 0x01
   1074e:	80 83       	st	Z, r24
   10750:	dc cf       	rjmp	.-72     	; 0x1070a <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10752:	cb 5d       	subi	r28, 0xDB	; 219
   10754:	dd 4f       	sbci	r29, 0xFD	; 253
   10756:	88 81       	ld	r24, Y
   10758:	99 81       	ldd	r25, Y+1	; 0x01
   1075a:	c5 52       	subi	r28, 0x25	; 37
   1075c:	d2 40       	sbci	r29, 0x02	; 2
}
   1075e:	ca 5d       	subi	r28, 0xDA	; 218
   10760:	dd 4f       	sbci	r29, 0xFD	; 253
   10762:	ec e0       	ldi	r30, 0x0C	; 12
   10764:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

00010768 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10768:	a6 e2       	ldi	r26, 0x26	; 38
   1076a:	b2 e0       	ldi	r27, 0x02	; 2
   1076c:	ea eb       	ldi	r30, 0xBA	; 186
   1076e:	f3 e8       	ldi	r31, 0x83	; 131
   10770:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
   10774:	4a 01       	movw	r8, r20
   10776:	5b 01       	movw	r10, r22
   10778:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1077a:	cb 5d       	subi	r28, 0xDB	; 219
   1077c:	dd 4f       	sbci	r29, 0xFD	; 253
   1077e:	19 82       	std	Y+1, r1	; 0x01
   10780:	18 82       	st	Y, r1
   10782:	c5 52       	subi	r28, 0x25	; 37
   10784:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10786:	43 e0       	ldi	r20, 0x03	; 3
   10788:	bc 01       	movw	r22, r24
   1078a:	ce 01       	movw	r24, r28
   1078c:	01 96       	adiw	r24, 0x01	; 1
   1078e:	fe de       	rcall	.-516    	; 0x1058c <dbf_open>
    if( rc != FR_OK)
   10790:	89 2b       	or	r24, r25
   10792:	19 f0       	breq	.+6      	; 0x1079a <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10794:	82 e1       	ldi	r24, 0x12	; 18
   10796:	90 e0       	ldi	r25, 0x00	; 0
   10798:	2f c0       	rjmp	.+94     	; 0x107f8 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   1079a:	b5 01       	movw	r22, r10
   1079c:	a4 01       	movw	r20, r8
   1079e:	ce 01       	movw	r24, r28
   107a0:	01 96       	adiw	r24, 0x01	; 1
   107a2:	51 df       	rcall	.-350    	; 0x10646 <dbf_lseek>
    if( rc != FR_OK)
   107a4:	89 2b       	or	r24, r25
   107a6:	59 f0       	breq	.+22     	; 0x107be <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   107a8:	86 e0       	ldi	r24, 0x06	; 6
   107aa:	90 e0       	ldi	r25, 0x00	; 0
   107ac:	f7 01       	movw	r30, r14
   107ae:	91 83       	std	Z+1, r25	; 0x01
   107b0:	80 83       	st	Z, r24
        dbf_close(&fp);
   107b2:	ce 01       	movw	r24, r28
   107b4:	01 96       	adiw	r24, 0x01	; 1
   107b6:	64 df       	rcall	.-312    	; 0x10680 <dbf_close>
        return( -1 );
   107b8:	8f ef       	ldi	r24, 0xFF	; 255
   107ba:	9f ef       	ldi	r25, 0xFF	; 255
   107bc:	27 c0       	rjmp	.+78     	; 0x1080c <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   107be:	9e 01       	movw	r18, r28
   107c0:	2b 5d       	subi	r18, 0xDB	; 219
   107c2:	3d 4f       	sbci	r19, 0xFD	; 253
   107c4:	a8 01       	movw	r20, r16
   107c6:	b6 01       	movw	r22, r12
   107c8:	ce 01       	movw	r24, r28
   107ca:	01 96       	adiw	r24, 0x01	; 1
   107cc:	1f df       	rcall	.-450    	; 0x1060c <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   107ce:	89 2b       	or	r24, r25
   107d0:	49 f4       	brne	.+18     	; 0x107e4 <dbf_open_write+0x7c>
   107d2:	cb 5d       	subi	r28, 0xDB	; 219
   107d4:	dd 4f       	sbci	r29, 0xFD	; 253
   107d6:	88 81       	ld	r24, Y
   107d8:	99 81       	ldd	r25, Y+1	; 0x01
   107da:	c5 52       	subi	r28, 0x25	; 37
   107dc:	d2 40       	sbci	r29, 0x02	; 2
   107de:	08 17       	cp	r16, r24
   107e0:	19 07       	cpc	r17, r25
   107e2:	19 f0       	breq	.+6      	; 0x107ea <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   107e4:	82 e0       	ldi	r24, 0x02	; 2
   107e6:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   107e8:	e1 cf       	rjmp	.-62     	; 0x107ac <dbf_open_write+0x44>
   107ea:	ce 01       	movw	r24, r28
   107ec:	01 96       	adiw	r24, 0x01	; 1
   107ee:	48 df       	rcall	.-368    	; 0x10680 <dbf_close>
    if( rc != FR_OK)
   107f0:	89 2b       	or	r24, r25
   107f2:	31 f0       	breq	.+12     	; 0x10800 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   107f4:	80 e1       	ldi	r24, 0x10	; 16
   107f6:	90 e0       	ldi	r25, 0x00	; 0
   107f8:	f7 01       	movw	r30, r14
   107fa:	91 83       	std	Z+1, r25	; 0x01
   107fc:	80 83       	st	Z, r24
   107fe:	dc cf       	rjmp	.-72     	; 0x107b8 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10800:	cb 5d       	subi	r28, 0xDB	; 219
   10802:	dd 4f       	sbci	r29, 0xFD	; 253
   10804:	88 81       	ld	r24, Y
   10806:	99 81       	ldd	r25, Y+1	; 0x01
   10808:	c5 52       	subi	r28, 0x25	; 37
   1080a:	d2 40       	sbci	r29, 0x02	; 2
}
   1080c:	ca 5d       	subi	r28, 0xDA	; 218
   1080e:	dd 4f       	sbci	r29, 0xFD	; 253
   10810:	ec e0       	ldi	r30, 0x0C	; 12
   10812:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

00010816 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10816:	0c 94 1b 33 	jmp	0x6636	; 0x6636 <clock_elapsed_begin>
   1081a:	08 95       	ret

0001081c <gpib_timer_reset>:
   1081c:	f8 94       	cli
   1081e:	e5 ed       	ldi	r30, 0xD5	; 213
   10820:	fc e1       	ldi	r31, 0x1C	; 28
   10822:	10 82       	st	Z, r1
   10824:	11 82       	std	Z+1, r1	; 0x01
   10826:	12 82       	std	Z+2, r1	; 0x02
   10828:	13 82       	std	Z+3, r1	; 0x03
   1082a:	14 82       	std	Z+4, r1	; 0x04
   1082c:	15 82       	std	Z+5, r1	; 0x05
   1082e:	16 82       	std	Z+6, r1	; 0x06
   10830:	17 82       	std	Z+7, r1	; 0x07
   10832:	81 e0       	ldi	r24, 0x01	; 1
   10834:	80 87       	std	Z+8, r24	; 0x08
   10836:	78 94       	sei
   10838:	08 95       	ret

0001083a <gpib_timer_elapsed_end>:
   1083a:	0c 94 21 33 	jmp	0x6642	; 0x6642 <clock_elapsed_end>
   1083e:	08 95       	ret

00010840 <gpib_timer_task>:
   10840:	f8 94       	cli
   10842:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <gpib_timer+0x4>
   10846:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <gpib_timer+0x5>
   1084a:	a0 91 db 1c 	lds	r26, 0x1CDB	; 0x801cdb <gpib_timer+0x6>
   1084e:	b0 91 dc 1c 	lds	r27, 0x1CDC	; 0x801cdc <gpib_timer+0x7>
   10852:	89 2b       	or	r24, r25
   10854:	8a 2b       	or	r24, r26
   10856:	8b 2b       	or	r24, r27
   10858:	a1 f0       	breq	.+40     	; 0x10882 <gpib_timer_task+0x42>
   1085a:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <gpib_timer+0x4>
   1085e:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <gpib_timer+0x5>
   10862:	a0 91 db 1c 	lds	r26, 0x1CDB	; 0x801cdb <gpib_timer+0x6>
   10866:	b0 91 dc 1c 	lds	r27, 0x1CDC	; 0x801cdc <gpib_timer+0x7>
   1086a:	01 97       	sbiw	r24, 0x01	; 1
   1086c:	a1 09       	sbc	r26, r1
   1086e:	b1 09       	sbc	r27, r1
   10870:	80 93 d9 1c 	sts	0x1CD9, r24	; 0x801cd9 <gpib_timer+0x4>
   10874:	90 93 da 1c 	sts	0x1CDA, r25	; 0x801cda <gpib_timer+0x5>
   10878:	a0 93 db 1c 	sts	0x1CDB, r26	; 0x801cdb <gpib_timer+0x6>
   1087c:	b0 93 dc 1c 	sts	0x1CDC, r27	; 0x801cdc <gpib_timer+0x7>
   10880:	03 c0       	rjmp	.+6      	; 0x10888 <gpib_timer_task+0x48>
   10882:	81 e0       	ldi	r24, 0x01	; 1
   10884:	80 93 dd 1c 	sts	0x1CDD, r24	; 0x801cdd <gpib_timer+0x8>
   10888:	78 94       	sei
   1088a:	08 95       	ret

0001088c <gpib_timeout_set>:
   1088c:	f8 94       	cli
   1088e:	e5 ed       	ldi	r30, 0xD5	; 213
   10890:	fc e1       	ldi	r31, 0x1C	; 28
   10892:	64 83       	std	Z+4, r22	; 0x04
   10894:	75 83       	std	Z+5, r23	; 0x05
   10896:	86 83       	std	Z+6, r24	; 0x06
   10898:	97 83       	std	Z+7, r25	; 0x07
   1089a:	10 86       	std	Z+8, r1	; 0x08
   1089c:	78 94       	sei
   1089e:	08 95       	ret

000108a0 <gpib_bus_init>:
   108a0:	00 d0       	rcall	.+0      	; 0x108a2 <gpib_bus_init+0x2>
   108a2:	1f 92       	push	r1
   108a4:	8f b7       	in	r24, 0x3f	; 63
   108a6:	f8 94       	cli
   108a8:	10 92 56 19 	sts	0x1956, r1	; 0x801956 <gpib_unread_f>
   108ac:	11 b8       	out	0x01, r1	; 1
   108ae:	9f ef       	ldi	r25, 0xFF	; 255
   108b0:	92 b9       	out	0x02, r25	; 2
   108b2:	21 98       	cbi	0x04, 1	; 4
   108b4:	29 9a       	sbi	0x05, 1	; 5
   108b6:	52 98       	cbi	0x0a, 2	; 10
   108b8:	5a 9a       	sbi	0x0b, 2	; 11
   108ba:	53 98       	cbi	0x0a, 3	; 10
   108bc:	5b 9a       	sbi	0x0b, 3	; 11
   108be:	56 98       	cbi	0x0a, 6	; 10
   108c0:	5e 9a       	sbi	0x0b, 6	; 11
   108c2:	54 98       	cbi	0x0a, 4	; 10
   108c4:	5c 9a       	sbi	0x0b, 4	; 11
   108c6:	57 98       	cbi	0x0a, 7	; 10
   108c8:	5f 9a       	sbi	0x0b, 7	; 11
   108ca:	55 98       	cbi	0x0a, 5	; 10
   108cc:	5d 9a       	sbi	0x0b, 5	; 11
   108ce:	20 98       	cbi	0x04, 0	; 4
   108d0:	28 9a       	sbi	0x05, 0	; 5
   108d2:	45 98       	cbi	0x08, 5	; 8
   108d4:	3d 9a       	sbi	0x07, 5	; 7
   108d6:	44 9a       	sbi	0x08, 4	; 8
   108d8:	3c 9a       	sbi	0x07, 4	; 7
   108da:	43 98       	cbi	0x08, 3	; 8
   108dc:	3b 9a       	sbi	0x07, 3	; 7
   108de:	42 98       	cbi	0x08, 2	; 8
   108e0:	3a 9a       	sbi	0x07, 2	; 7
   108e2:	9d e0       	ldi	r25, 0x0D	; 13
   108e4:	9a 95       	dec	r25
   108e6:	f1 f7       	brne	.-4      	; 0x108e4 <gpib_bus_init+0x44>
   108e8:	00 00       	nop
   108ea:	8f bf       	out	0x3f, r24	; 63
   108ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   108f0:	82 ff       	sbrs	r24, 2
   108f2:	0a c0       	rjmp	.+20     	; 0x10908 <gpib_bus_init+0x68>
   108f4:	83 e2       	ldi	r24, 0x23	; 35
   108f6:	92 e1       	ldi	r25, 0x12	; 18
   108f8:	a0 e0       	ldi	r26, 0x00	; 0
   108fa:	ed b7       	in	r30, 0x3d	; 61
   108fc:	fe b7       	in	r31, 0x3e	; 62
   108fe:	81 83       	std	Z+1, r24	; 0x01
   10900:	92 83       	std	Z+2, r25	; 0x02
   10902:	a3 83       	std	Z+3, r26	; 0x03
   10904:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10908:	0f 90       	pop	r0
   1090a:	0f 90       	pop	r0
   1090c:	0f 90       	pop	r0
   1090e:	08 95       	ret

00010910 <gpib_rx_init>:
   10910:	9f b7       	in	r25, 0x3f	; 63
   10912:	f8 94       	cli
   10914:	11 b8       	out	0x01, r1	; 1
   10916:	2f ef       	ldi	r18, 0xFF	; 255
   10918:	22 b9       	out	0x02, r18	; 2
   1091a:	21 98       	cbi	0x04, 1	; 4
   1091c:	29 9a       	sbi	0x05, 1	; 5
   1091e:	20 98       	cbi	0x04, 0	; 4
   10920:	28 9a       	sbi	0x05, 0	; 5
   10922:	4e 9b       	sbis	0x09, 6	; 9
   10924:	09 c0       	rjmp	.+18     	; 0x10938 <gpib_rx_init+0x28>
   10926:	81 11       	cpse	r24, r1
   10928:	07 c0       	rjmp	.+14     	; 0x10938 <gpib_rx_init+0x28>
   1092a:	52 98       	cbi	0x0a, 2	; 10
   1092c:	5a 9a       	sbi	0x0b, 2	; 11
   1092e:	53 98       	cbi	0x0a, 3	; 10
   10930:	5b 9a       	sbi	0x0b, 3	; 11
   10932:	42 98       	cbi	0x08, 2	; 8
   10934:	3a 9a       	sbi	0x07, 2	; 7
   10936:	08 c0       	rjmp	.+16     	; 0x10948 <gpib_rx_init+0x38>
   10938:	42 98       	cbi	0x08, 2	; 8
   1093a:	3a 9a       	sbi	0x07, 2	; 7
   1093c:	5b 98       	cbi	0x0b, 3	; 11
   1093e:	53 9a       	sbi	0x0a, 3	; 10
   10940:	5a 98       	cbi	0x0b, 2	; 11
   10942:	52 9a       	sbi	0x0a, 2	; 10
   10944:	88 23       	and	r24, r24
   10946:	89 f3       	breq	.-30     	; 0x1092a <gpib_rx_init+0x1a>
   10948:	9f bf       	out	0x3f, r25	; 63
   1094a:	08 95       	ret

0001094c <gpib_tx_init>:
   1094c:	9f b7       	in	r25, 0x3f	; 63
   1094e:	f8 94       	cli
   10950:	11 b8       	out	0x01, r1	; 1
   10952:	8f ef       	ldi	r24, 0xFF	; 255
   10954:	82 b9       	out	0x02, r24	; 2
   10956:	21 98       	cbi	0x04, 1	; 4
   10958:	29 9a       	sbi	0x05, 1	; 5
   1095a:	52 98       	cbi	0x0a, 2	; 10
   1095c:	5a 9a       	sbi	0x0b, 2	; 11
   1095e:	53 98       	cbi	0x0a, 3	; 10
   10960:	5b 9a       	sbi	0x0b, 3	; 11
   10962:	20 98       	cbi	0x04, 0	; 4
   10964:	28 9a       	sbi	0x05, 0	; 5
   10966:	42 9a       	sbi	0x08, 2	; 8
   10968:	3a 9a       	sbi	0x07, 2	; 7
   1096a:	81 b9       	out	0x01, r24	; 1
   1096c:	9f bf       	out	0x3f, r25	; 63
   1096e:	08 95       	ret

00010970 <gpib_state_init>:
   10970:	00 d0       	rcall	.+0      	; 0x10972 <gpib_state_init+0x2>
   10972:	1f 92       	push	r1
   10974:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10978:	82 ff       	sbrs	r24, 2
   1097a:	0a c0       	rjmp	.+20     	; 0x10990 <gpib_state_init+0x20>
   1097c:	80 e1       	ldi	r24, 0x10	; 16
   1097e:	92 e1       	ldi	r25, 0x12	; 18
   10980:	a0 e0       	ldi	r26, 0x00	; 0
   10982:	ed b7       	in	r30, 0x3d	; 61
   10984:	fe b7       	in	r31, 0x3e	; 62
   10986:	81 83       	std	Z+1, r24	; 0x01
   10988:	92 83       	std	Z+2, r25	; 0x02
   1098a:	a3 83       	std	Z+3, r26	; 0x03
   1098c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10990:	cc dd       	rcall	.-1128   	; 0x1052a <ppr_init>
   10992:	0e 94 70 8f 	call	0x11ee0	; 0x11ee0 <listen_cleanup>
   10996:	0e 94 86 90 	call	0x1210c	; 0x1210c <talk_cleanup>
   1099a:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <spoll>
   1099e:	10 92 e4 1e 	sts	0x1EE4, r1	; 0x801ee4 <talking>
   109a2:	10 92 e7 1e 	sts	0x1EE7, r1	; 0x801ee7 <talking_last>
   109a6:	10 92 e6 1e 	sts	0x1EE6, r1	; 0x801ee6 <listening>
   109aa:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <listening_last>
   109ae:	10 92 df 1c 	sts	0x1CDF, r1	; 0x801cdf <lastcmd+0x1>
   109b2:	10 92 de 1c 	sts	0x1CDE, r1	; 0x801cde <lastcmd>
   109b6:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <current+0x1>
   109ba:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <current>
   109be:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
   109c2:	0f 90       	pop	r0
   109c4:	0f 90       	pop	r0
   109c6:	0f 90       	pop	r0
   109c8:	08 95       	ret

000109ca <gpib_enable_PPR>:
   109ca:	cf 93       	push	r28
   109cc:	df 93       	push	r29
   109ce:	ad b7       	in	r26, 0x3d	; 61
   109d0:	be b7       	in	r27, 0x3e	; 62
   109d2:	17 97       	sbiw	r26, 0x07	; 7
   109d4:	0f b6       	in	r0, 0x3f	; 63
   109d6:	f8 94       	cli
   109d8:	be bf       	out	0x3e, r27	; 62
   109da:	0f be       	out	0x3f, r0	; 63
   109dc:	ad bf       	out	0x3d, r26	; 61
   109de:	ec 01       	movw	r28, r24
   109e0:	88 30       	cpi	r24, 0x08	; 8
   109e2:	91 05       	cpc	r25, r1
   109e4:	68 f0       	brcs	.+26     	; 0x10a00 <gpib_enable_PPR+0x36>
   109e6:	ed b7       	in	r30, 0x3d	; 61
   109e8:	fe b7       	in	r31, 0x3e	; 62
   109ea:	95 83       	std	Z+5, r25	; 0x05
   109ec:	84 83       	std	Z+4, r24	; 0x04
   109ee:	8a ee       	ldi	r24, 0xEA	; 234
   109f0:	91 e1       	ldi	r25, 0x11	; 17
   109f2:	a0 e0       	ldi	r26, 0x00	; 0
   109f4:	81 83       	std	Z+1, r24	; 0x01
   109f6:	92 83       	std	Z+2, r25	; 0x02
   109f8:	a3 83       	std	Z+3, r26	; 0x03
   109fa:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   109fe:	15 c0       	rjmp	.+42     	; 0x10a2a <gpib_enable_PPR+0x60>
   10a00:	aa dd       	rcall	.-1196   	; 0x10556 <ppr_bit_set>
   10a02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a06:	81 ff       	sbrs	r24, 1
   10a08:	10 c0       	rjmp	.+32     	; 0x10a2a <gpib_enable_PPR+0x60>
   10a0a:	8b dd       	rcall	.-1258   	; 0x10522 <ppr_reg>
   10a0c:	90 e0       	ldi	r25, 0x00	; 0
   10a0e:	ed b7       	in	r30, 0x3d	; 61
   10a10:	fe b7       	in	r31, 0x3e	; 62
   10a12:	97 83       	std	Z+7, r25	; 0x07
   10a14:	86 83       	std	Z+6, r24	; 0x06
   10a16:	d5 83       	std	Z+5, r29	; 0x05
   10a18:	c4 83       	std	Z+4, r28	; 0x04
   10a1a:	8f ec       	ldi	r24, 0xCF	; 207
   10a1c:	91 e1       	ldi	r25, 0x11	; 17
   10a1e:	a0 e0       	ldi	r26, 0x00	; 0
   10a20:	81 83       	std	Z+1, r24	; 0x01
   10a22:	92 83       	std	Z+2, r25	; 0x02
   10a24:	a3 83       	std	Z+3, r26	; 0x03
   10a26:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10a2a:	cd b7       	in	r28, 0x3d	; 61
   10a2c:	de b7       	in	r29, 0x3e	; 62
   10a2e:	27 96       	adiw	r28, 0x07	; 7
   10a30:	e2 e0       	ldi	r30, 0x02	; 2
   10a32:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00010a36 <gpib_disable_PPR>:
   10a36:	cf 93       	push	r28
   10a38:	df 93       	push	r29
   10a3a:	ad b7       	in	r26, 0x3d	; 61
   10a3c:	be b7       	in	r27, 0x3e	; 62
   10a3e:	17 97       	sbiw	r26, 0x07	; 7
   10a40:	0f b6       	in	r0, 0x3f	; 63
   10a42:	f8 94       	cli
   10a44:	be bf       	out	0x3e, r27	; 62
   10a46:	0f be       	out	0x3f, r0	; 63
   10a48:	ad bf       	out	0x3d, r26	; 61
   10a4a:	ec 01       	movw	r28, r24
   10a4c:	88 30       	cpi	r24, 0x08	; 8
   10a4e:	91 05       	cpc	r25, r1
   10a50:	68 f0       	brcs	.+26     	; 0x10a6c <gpib_disable_PPR+0x36>
   10a52:	ed b7       	in	r30, 0x3d	; 61
   10a54:	fe b7       	in	r31, 0x3e	; 62
   10a56:	95 83       	std	Z+5, r25	; 0x05
   10a58:	84 83       	std	Z+4, r24	; 0x04
   10a5a:	88 ea       	ldi	r24, 0xA8	; 168
   10a5c:	91 e1       	ldi	r25, 0x11	; 17
   10a5e:	a0 e0       	ldi	r26, 0x00	; 0
   10a60:	81 83       	std	Z+1, r24	; 0x01
   10a62:	92 83       	std	Z+2, r25	; 0x02
   10a64:	a3 83       	std	Z+3, r26	; 0x03
   10a66:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10a6a:	15 c0       	rjmp	.+42     	; 0x10a96 <gpib_disable_PPR+0x60>
   10a6c:	81 dd       	rcall	.-1278   	; 0x10570 <ppr_bit_clr>
   10a6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a72:	81 ff       	sbrs	r24, 1
   10a74:	10 c0       	rjmp	.+32     	; 0x10a96 <gpib_disable_PPR+0x60>
   10a76:	55 dd       	rcall	.-1366   	; 0x10522 <ppr_reg>
   10a78:	90 e0       	ldi	r25, 0x00	; 0
   10a7a:	ed b7       	in	r30, 0x3d	; 61
   10a7c:	fe b7       	in	r31, 0x3e	; 62
   10a7e:	97 83       	std	Z+7, r25	; 0x07
   10a80:	86 83       	std	Z+6, r24	; 0x06
   10a82:	d5 83       	std	Z+5, r29	; 0x05
   10a84:	c4 83       	std	Z+4, r28	; 0x04
   10a86:	8d e8       	ldi	r24, 0x8D	; 141
   10a88:	91 e1       	ldi	r25, 0x11	; 17
   10a8a:	a0 e0       	ldi	r26, 0x00	; 0
   10a8c:	81 83       	std	Z+1, r24	; 0x01
   10a8e:	92 83       	std	Z+2, r25	; 0x02
   10a90:	a3 83       	std	Z+3, r26	; 0x03
   10a92:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10a96:	cd b7       	in	r28, 0x3d	; 61
   10a98:	de b7       	in	r29, 0x3e	; 62
   10a9a:	27 96       	adiw	r28, 0x07	; 7
   10a9c:	e2 e0       	ldi	r30, 0x02	; 2
   10a9e:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00010aa2 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10aa2:	cf 93       	push	r28
   10aa4:	df 93       	push	r29
   10aa6:	00 d0       	rcall	.+0      	; 0x10aa8 <gpib_unread+0x6>
   10aa8:	1f 92       	push	r1
   10aaa:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10aac:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <gpib_unread_f>
   10ab0:	81 11       	cpse	r24, r1
   10ab2:	08 c0       	rjmp	.+16     	; 0x10ac4 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10ab4:	d0 93 e9 1e 	sts	0x1EE9, r29	; 0x801ee9 <gpib_unread_data+0x1>
   10ab8:	c0 93 e8 1e 	sts	0x1EE8, r28	; 0x801ee8 <gpib_unread_data>
        gpib_unread_f = 1;
   10abc:	81 e0       	ldi	r24, 0x01	; 1
   10abe:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_unread_f>
   10ac2:	12 c0       	rjmp	.+36     	; 0x10ae8 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ac4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ac8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10acc:	85 70       	andi	r24, 0x05	; 5
   10ace:	99 27       	eor	r25, r25
   10ad0:	89 2b       	or	r24, r25
   10ad2:	51 f0       	breq	.+20     	; 0x10ae8 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10ad4:	8f e5       	ldi	r24, 0x5F	; 95
   10ad6:	91 e1       	ldi	r25, 0x11	; 17
   10ad8:	a0 e0       	ldi	r26, 0x00	; 0
   10ada:	ed b7       	in	r30, 0x3d	; 61
   10adc:	fe b7       	in	r31, 0x3e	; 62
   10ade:	81 83       	std	Z+1, r24	; 0x01
   10ae0:	92 83       	std	Z+2, r25	; 0x02
   10ae2:	a3 83       	std	Z+3, r26	; 0x03
   10ae4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }
    return(ch);
}
   10ae8:	ce 01       	movw	r24, r28
   10aea:	cd b7       	in	r28, 0x3d	; 61
   10aec:	de b7       	in	r29, 0x3e	; 62
   10aee:	23 96       	adiw	r28, 0x03	; 3
   10af0:	e2 e0       	ldi	r30, 0x02	; 2
   10af2:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00010af6 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10af6:	11 b8       	out	0x01, r1	; 1
   10af8:	80 b1       	in	r24, 0x00	; 0
   10afa:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10afc:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10afe:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10b00:	08 95       	ret

00010b02 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10b02:	4e 99       	sbic	0x09, 6	; 9
   10b04:	03 c0       	rjmp	.+6      	; 0x10b0c <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10b06:	80 e0       	ldi	r24, 0x00	; 0
   10b08:	94 e0       	ldi	r25, 0x04	; 4
   10b0a:	02 c0       	rjmp	.+4      	; 0x10b10 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10b0c:	80 e0       	ldi	r24, 0x00	; 0
   10b0e:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10b10:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10b12:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10b14:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10b16:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10b18:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10b1a:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10b1c:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10b1e:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10b20:	08 95       	ret

00010b22 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10b22:	19 99       	sbic	0x03, 1	; 3
   10b24:	03 c0       	rjmp	.+6      	; 0x10b2c <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10b26:	80 e0       	ldi	r24, 0x00	; 0
   10b28:	90 e2       	ldi	r25, 0x20	; 32
   10b2a:	02 c0       	rjmp	.+4      	; 0x10b30 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10b2c:	80 e0       	ldi	r24, 0x00	; 0
   10b2e:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10b30:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10b32:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10b34:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10b36:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10b38:	08 95       	ret

00010b3a <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10b3a:	2f 92       	push	r2
   10b3c:	3f 92       	push	r3
   10b3e:	4f 92       	push	r4
   10b40:	6f 92       	push	r6
   10b42:	7f 92       	push	r7
   10b44:	8f 92       	push	r8
   10b46:	af 92       	push	r10
   10b48:	bf 92       	push	r11
   10b4a:	cf 92       	push	r12
   10b4c:	df 92       	push	r13
   10b4e:	ef 92       	push	r14
   10b50:	1f 93       	push	r17
   10b52:	cf 93       	push	r28
   10b54:	df 93       	push	r29
   10b56:	cd b7       	in	r28, 0x3d	; 61
   10b58:	de b7       	in	r29, 0x3e	; 62
   10b5a:	2a 97       	sbiw	r28, 0x0a	; 10
   10b5c:	0f b6       	in	r0, 0x3f	; 63
   10b5e:	f8 94       	cli
   10b60:	de bf       	out	0x3e, r29	; 62
   10b62:	0f be       	out	0x3f, r0	; 63
   10b64:	cd bf       	out	0x3d, r28	; 61
   10b66:	9a 87       	std	Y+10, r25	; 0x0a
   10b68:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10b6a:	64 ef       	ldi	r22, 0xF4	; 244
   10b6c:	71 e0       	ldi	r23, 0x01	; 1
   10b6e:	80 e0       	ldi	r24, 0x00	; 0
   10b70:	90 e0       	ldi	r25, 0x00	; 0
   10b72:	8c de       	rcall	.-744    	; 0x1088c <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10b74:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10b76:	8b e3       	ldi	r24, 0x3B	; 59
   10b78:	90 e1       	ldi	r25, 0x10	; 16
   10b7a:	6c 01       	movw	r12, r24
   10b7c:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10b7e:	8a e6       	ldi	r24, 0x6A	; 106
   10b80:	90 e1       	ldi	r25, 0x10	; 16
   10b82:	3c 01       	movw	r6, r24
   10b84:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10b86:	aa 24       	eor	r10, r10
   10b88:	a3 94       	inc	r10
   10b8a:	b1 2c       	mov	r11, r1
   10b8c:	82 ee       	ldi	r24, 0xE2	; 226
   10b8e:	90 e1       	ldi	r25, 0x10	; 16
   10b90:	1c 01       	movw	r2, r24
   10b92:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10b94:	86 ea       	ldi	r24, 0xA6	; 166
   10b96:	90 e1       	ldi	r25, 0x10	; 16
   10b98:	9c 01       	movw	r18, r24
   10b9a:	40 e0       	ldi	r20, 0x00	; 0
   10b9c:	2e 83       	std	Y+6, r18	; 0x06
   10b9e:	3f 83       	std	Y+7, r19	; 0x07
   10ba0:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10ba2:	80 e0       	ldi	r24, 0x00	; 0
   10ba4:	0e 94 12 28 	call	0x5024	; 0x5024 <uart_keyhit>
   10ba8:	89 2b       	or	r24, r25
   10baa:	69 f0       	breq	.+26     	; 0x10bc6 <gpib_write_byte+0x8c>
		{
			if(debuglevel & GPIB_ERR)
   10bac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10bb0:	80 ff       	sbrs	r24, 0
   10bb2:	f1 c0       	rjmp	.+482    	; 0x10d96 <gpib_write_byte+0x25c>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   10bb4:	81 2f       	mov	r24, r17
   10bb6:	90 e0       	ldi	r25, 0x00	; 0
   10bb8:	ed b7       	in	r30, 0x3d	; 61
   10bba:	fe b7       	in	r31, 0x3e	; 62
   10bbc:	95 83       	std	Z+5, r25	; 0x05
   10bbe:	84 83       	std	Z+4, r24	; 0x04
   10bc0:	80 e4       	ldi	r24, 0x40	; 64
   10bc2:	91 e1       	ldi	r25, 0x11	; 17
   10bc4:	14 c0       	rjmp	.+40     	; 0x10bee <gpib_write_byte+0xb4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10bc6:	4c 99       	sbic	0x09, 4	; 9
   10bc8:	19 c0       	rjmp	.+50     	; 0x10bfc <gpib_write_byte+0xc2>
        {
            ch |= IFC_FLAG;
   10bca:	29 85       	ldd	r18, Y+9	; 0x09
   10bcc:	3a 85       	ldd	r19, Y+10	; 0x0a
   10bce:	30 61       	ori	r19, 0x10	; 16
   10bd0:	3a 87       	std	Y+10, r19	; 0x0a
            gpib_bus_init();
   10bd2:	29 87       	std	Y+9, r18	; 0x09
   10bd4:	65 de       	rcall	.-822    	; 0x108a0 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10bd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10bda:	80 ff       	sbrs	r24, 0
   10bdc:	dc c0       	rjmp	.+440    	; 0x10d96 <gpib_write_byte+0x25c>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10bde:	81 2f       	mov	r24, r17
   10be0:	90 e0       	ldi	r25, 0x00	; 0
   10be2:	ed b7       	in	r30, 0x3d	; 61
   10be4:	fe b7       	in	r31, 0x3e	; 62
   10be6:	95 83       	std	Z+5, r25	; 0x05
   10be8:	84 83       	std	Z+4, r24	; 0x04
   10bea:	81 e2       	ldi	r24, 0x21	; 33
   10bec:	91 e1       	ldi	r25, 0x11	; 17
   10bee:	a0 e0       	ldi	r26, 0x00	; 0
   10bf0:	81 83       	std	Z+1, r24	; 0x01
   10bf2:	92 83       	std	Z+2, r25	; 0x02
   10bf4:	a3 83       	std	Z+3, r26	; 0x03
   10bf6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10bfa:	cd c0       	rjmp	.+410    	; 0x10d96 <gpib_write_byte+0x25c>
            break;
        }

        switch(tx_state)
   10bfc:	81 2f       	mov	r24, r17
   10bfe:	90 e0       	ldi	r25, 0x00	; 0
   10c00:	89 30       	cpi	r24, 0x09	; 9
   10c02:	91 05       	cpc	r25, r1
   10c04:	08 f0       	brcs	.+2      	; 0x10c08 <gpib_write_byte+0xce>
   10c06:	bf c0       	rjmp	.+382    	; 0x10d86 <gpib_write_byte+0x24c>
   10c08:	fc 01       	movw	r30, r24
   10c0a:	e3 54       	subi	r30, 0x43	; 67
   10c0c:	ff 4f       	sbci	r31, 0xFF	; 255
   10c0e:	0c 94 29 e2 	jmp	0x1c452	; 0x1c452 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init(0);
   10c12:	80 e0       	ldi	r24, 0x00	; 0
   10c14:	9b de       	rcall	.-714    	; 0x1094c <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10c16:	21 98       	cbi	0x04, 1	; 4
   10c18:	29 9a       	sbi	0x05, 1	; 5
   10c1a:	fd e0       	ldi	r31, 0x0D	; 13
   10c1c:	fa 95       	dec	r31
   10c1e:	f1 f7       	brne	.-4      	; 0x10c1c <gpib_write_byte+0xe2>
   10c20:	00 00       	nop
   10c22:	06 c0       	rjmp	.+12     	; 0x10c30 <gpib_write_byte+0xf6>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10c24:	4a 9b       	sbis	0x09, 2	; 9
   10c26:	02 c0       	rjmp	.+4      	; 0x10c2c <gpib_write_byte+0xf2>
   10c28:	4b 99       	sbic	0x09, 3	; 9
   10c2a:	17 c0       	rjmp	.+46     	; 0x10c5a <gpib_write_byte+0x120>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10c2c:	4e 9b       	sbis	0x09, 6	; 9
   10c2e:	07 c0       	rjmp	.+14     	; 0x10c3e <gpib_write_byte+0x104>
					{
						gpib_timeout_set(HTIMEOUT);
   10c30:	64 ef       	ldi	r22, 0xF4	; 244
   10c32:	71 e0       	ldi	r23, 0x01	; 1
   10c34:	80 e0       	ldi	r24, 0x00	; 0
   10c36:	90 e0       	ldi	r25, 0x00	; 0
   10c38:	29 de       	rcall	.-942    	; 0x1088c <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10c3a:	12 e0       	ldi	r17, 0x02	; 2
   10c3c:	b2 cf       	rjmp	.-156    	; 0x10ba2 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10c3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c42:	80 ff       	sbrs	r24, 0
   10c44:	ae cf       	rjmp	.-164    	; 0x10ba2 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10c46:	ed b7       	in	r30, 0x3d	; 61
   10c48:	fe b7       	in	r31, 0x3e	; 62
   10c4a:	b5 82       	std	Z+5, r11	; 0x05
   10c4c:	a4 82       	std	Z+4, r10	; 0x04
   10c4e:	21 82       	std	Z+1, r2	; 0x01
   10c50:	32 82       	std	Z+2, r3	; 0x02
   10c52:	43 82       	std	Z+3, r4	; 0x03
   10c54:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10c58:	a4 cf       	rjmp	.-184    	; 0x10ba2 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c5a:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10c5e:	88 23       	and	r24, r24
   10c60:	09 f4       	brne	.+2      	; 0x10c64 <gpib_write_byte+0x12a>
   10c62:	9f cf       	rjmp	.-194    	; 0x10ba2 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c68:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c6c:	85 70       	andi	r24, 0x05	; 5
   10c6e:	99 27       	eor	r25, r25
   10c70:	89 2b       	or	r24, r25
   10c72:	c1 f1       	breq	.+112    	; 0x10ce4 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c74:	2e 81       	ldd	r18, Y+6	; 0x06
   10c76:	3f 81       	ldd	r19, Y+7	; 0x07
   10c78:	48 85       	ldd	r20, Y+8	; 0x08
   10c7a:	ed b7       	in	r30, 0x3d	; 61
   10c7c:	fe b7       	in	r31, 0x3e	; 62
   10c7e:	21 83       	std	Z+1, r18	; 0x01
   10c80:	32 83       	std	Z+2, r19	; 0x02
   10c82:	43 83       	std	Z+3, r20	; 0x03
   10c84:	2d c0       	rjmp	.+90     	; 0x10ce0 <gpib_write_byte+0x1a6>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10c86:	89 85       	ldd	r24, Y+9	; 0x09
   10c88:	9a 85       	ldd	r25, Y+10	; 0x0a
   10c8a:	90 ff       	sbrs	r25, 0
   10c8c:	03 c0       	rjmp	.+6      	; 0x10c94 <gpib_write_byte+0x15a>
                    GPIB_IO_LOW(EOI);
   10c8e:	28 98       	cbi	0x05, 0	; 5
   10c90:	20 9a       	sbi	0x04, 0	; 4
   10c92:	02 c0       	rjmp	.+4      	; 0x10c98 <gpib_write_byte+0x15e>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10c94:	20 98       	cbi	0x04, 0	; 4
   10c96:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10c98:	8f ef       	ldi	r24, 0xFF	; 255
   10c9a:	81 b9       	out	0x01, r24	; 1
   10c9c:	89 85       	ldd	r24, Y+9	; 0x09
   10c9e:	80 95       	com	r24
   10ca0:	82 b9       	out	0x02, r24	; 2
   10ca2:	9d e0       	ldi	r25, 0x0D	; 13
   10ca4:	9a 95       	dec	r25
   10ca6:	f1 f7       	brne	.-4      	; 0x10ca4 <gpib_write_byte+0x16a>
   10ca8:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10caa:	64 ef       	ldi	r22, 0xF4	; 244
   10cac:	71 e0       	ldi	r23, 0x01	; 1
   10cae:	80 e0       	ldi	r24, 0x00	; 0
   10cb0:	90 e0       	ldi	r25, 0x00	; 0
   10cb2:	ec dd       	rcall	.-1064   	; 0x1088c <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10cb4:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10cb6:	75 cf       	rjmp	.-278    	; 0x10ba2 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10cb8:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10cba:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10cbc:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10cc0:	88 23       	and	r24, r24
   10cc2:	09 f4       	brne	.+2      	; 0x10cc6 <gpib_write_byte+0x18c>
   10cc4:	6e cf       	rjmp	.-292    	; 0x10ba2 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10cc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10cce:	85 70       	andi	r24, 0x05	; 5
   10cd0:	99 27       	eor	r25, r25
   10cd2:	89 2b       	or	r24, r25
   10cd4:	39 f0       	breq	.+14     	; 0x10ce4 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10cd6:	ed b7       	in	r30, 0x3d	; 61
   10cd8:	fe b7       	in	r31, 0x3e	; 62
   10cda:	61 82       	std	Z+1, r6	; 0x01
   10cdc:	72 82       	std	Z+2, r7	; 0x02
   10cde:	83 82       	std	Z+3, r8	; 0x03
   10ce0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                    ch |= TIMEOUT_FLAG;
   10ce4:	29 85       	ldd	r18, Y+9	; 0x09
   10ce6:	3a 85       	ldd	r19, Y+10	; 0x0a
   10ce8:	30 64       	ori	r19, 0x40	; 64
   10cea:	3a 87       	std	Y+10, r19	; 0x0a
   10cec:	29 87       	std	Y+9, r18	; 0x09
   10cee:	51 c0       	rjmp	.+162    	; 0x10d92 <gpib_write_byte+0x258>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10cf0:	29 98       	cbi	0x05, 1	; 5
   10cf2:	21 9a       	sbi	0x04, 1	; 4
   10cf4:	3d e0       	ldi	r19, 0x0D	; 13
   10cf6:	3a 95       	dec	r19
   10cf8:	f1 f7       	brne	.-4      	; 0x10cf6 <gpib_write_byte+0x1bc>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10cfa:	00 00       	nop
   10cfc:	64 ef       	ldi	r22, 0xF4	; 244
   10cfe:	71 e0       	ldi	r23, 0x01	; 1
   10d00:	80 e0       	ldi	r24, 0x00	; 0
   10d02:	90 e0       	ldi	r25, 0x00	; 0
   10d04:	c3 dd       	rcall	.-1146   	; 0x1088c <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10d06:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10d08:	4c cf       	rjmp	.-360    	; 0x10ba2 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10d0a:	4b 99       	sbic	0x09, 3	; 9
   10d0c:	40 c0       	rjmp	.+128    	; 0x10d8e <gpib_write_byte+0x254>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d0e:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10d12:	88 23       	and	r24, r24
   10d14:	09 f4       	brne	.+2      	; 0x10d18 <gpib_write_byte+0x1de>
   10d16:	45 cf       	rjmp	.-374    	; 0x10ba2 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10d18:	89 85       	ldd	r24, Y+9	; 0x09
   10d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
   10d1c:	90 64       	ori	r25, 0x40	; 64
   10d1e:	9a 87       	std	Y+10, r25	; 0x0a
   10d20:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d26:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d2a:	85 70       	andi	r24, 0x05	; 5
   10d2c:	99 27       	eor	r25, r25
   10d2e:	89 2b       	or	r24, r25
   10d30:	81 f1       	breq	.+96     	; 0x10d92 <gpib_write_byte+0x258>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10d32:	ed b7       	in	r30, 0x3d	; 61
   10d34:	fe b7       	in	r31, 0x3e	; 62
   10d36:	c1 82       	std	Z+1, r12	; 0x01
   10d38:	d2 82       	std	Z+2, r13	; 0x02
   10d3a:	e3 82       	std	Z+3, r14	; 0x03
   10d3c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10d40:	28 c0       	rjmp	.+80     	; 0x10d92 <gpib_write_byte+0x258>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10d42:	21 98       	cbi	0x04, 1	; 4
   10d44:	29 9a       	sbi	0x05, 1	; 5
   10d46:	fd e0       	ldi	r31, 0x0D	; 13
   10d48:	fa 95       	dec	r31
   10d4a:	f1 f7       	brne	.-4      	; 0x10d48 <gpib_write_byte+0x20e>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10d4c:	00 00       	nop
   10d4e:	64 ef       	ldi	r22, 0xF4	; 244
   10d50:	71 e0       	ldi	r23, 0x01	; 1
   10d52:	80 e0       	ldi	r24, 0x00	; 0
   10d54:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10d56:	9a dd       	rcall	.-1228   	; 0x1088c <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10d58:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10d5a:	23 cf       	rjmp	.-442    	; 0x10ba2 <gpib_write_byte+0x68>
   10d5c:	81 e0       	ldi	r24, 0x01	; 1
   10d5e:	d8 dd       	rcall	.-1104   	; 0x10910 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d64:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d68:	85 70       	andi	r24, 0x05	; 5
   10d6a:	99 27       	eor	r25, r25
   10d6c:	89 2b       	or	r24, r25
   10d6e:	99 f0       	breq	.+38     	; 0x10d96 <gpib_write_byte+0x25c>
                    printf("<GPIB TX TIMEOUT>\n");
   10d70:	88 e2       	ldi	r24, 0x28	; 40
   10d72:	90 e1       	ldi	r25, 0x10	; 16
   10d74:	a0 e0       	ldi	r26, 0x00	; 0
   10d76:	ed b7       	in	r30, 0x3d	; 61
   10d78:	fe b7       	in	r31, 0x3e	; 62
   10d7a:	81 83       	std	Z+1, r24	; 0x01
   10d7c:	92 83       	std	Z+2, r25	; 0x02
   10d7e:	a3 83       	std	Z+3, r26	; 0x03
   10d80:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   10d84:	08 c0       	rjmp	.+16     	; 0x10d96 <gpib_write_byte+0x25c>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10d86:	19 30       	cpi	r17, 0x09	; 9
   10d88:	09 f0       	breq	.+2      	; 0x10d8c <gpib_write_byte+0x252>
   10d8a:	0b cf       	rjmp	.-490    	; 0x10ba2 <gpib_write_byte+0x68>
   10d8c:	04 c0       	rjmp	.+8      	; 0x10d96 <gpib_write_byte+0x25c>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10d8e:	16 e0       	ldi	r17, 0x06	; 6
   10d90:	08 cf       	rjmp	.-496    	; 0x10ba2 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10d92:	18 e0       	ldi	r17, 0x08	; 8
   10d94:	06 cf       	rjmp	.-500    	; 0x10ba2 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10d96:	89 85       	ldd	r24, Y+9	; 0x09
   10d98:	9a 85       	ldd	r25, Y+10	; 0x0a
   10d9a:	2a 96       	adiw	r28, 0x0a	; 10
   10d9c:	0f b6       	in	r0, 0x3f	; 63
   10d9e:	f8 94       	cli
   10da0:	de bf       	out	0x3e, r29	; 62
   10da2:	0f be       	out	0x3f, r0	; 63
   10da4:	cd bf       	out	0x3d, r28	; 61
   10da6:	df 91       	pop	r29
   10da8:	cf 91       	pop	r28
   10daa:	1f 91       	pop	r17
   10dac:	ef 90       	pop	r14
   10dae:	df 90       	pop	r13
   10db0:	cf 90       	pop	r12
   10db2:	bf 90       	pop	r11
   10db4:	af 90       	pop	r10
   10db6:	8f 90       	pop	r8
   10db8:	7f 90       	pop	r7
   10dba:	6f 90       	pop	r6
   10dbc:	4f 90       	pop	r4
   10dbe:	3f 90       	pop	r3
   10dc0:	2f 90       	pop	r2
   10dc2:	08 95       	ret

00010dc4 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10dc4:	cf 93       	push	r28
   10dc6:	df 93       	push	r29
   10dc8:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10dca:	89 2b       	or	r24, r25
   10dcc:	21 f4       	brne	.+8      	; 0x10dd6 <gpib_decode_header+0x12>
        fo = stdout;
   10dce:	c0 91 b7 1c 	lds	r28, 0x1CB7	; 0x801cb7 <__iob+0x2>
   10dd2:	d0 91 b8 1c 	lds	r29, 0x1CB8	; 0x801cb8 <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10dd6:	be 01       	movw	r22, r28
   10dd8:	81 e0       	ldi	r24, 0x01	; 1
   10dda:	9c e0       	ldi	r25, 0x0C	; 12
   10ddc:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"GPIB bus state\n");
   10de0:	be 01       	movw	r22, r28
   10de2:	8e e2       	ldi	r24, 0x2E	; 46
   10de4:	9c e0       	ldi	r25, 0x0C	; 12
   10de6:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10dea:	be 01       	movw	r22, r28
   10dec:	8e e3       	ldi	r24, 0x3E	; 62
   10dee:	9c e0       	ldi	r25, 0x0C	; 12
   10df0:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10df4:	be 01       	movw	r22, r28
   10df6:	82 e5       	ldi	r24, 0x52	; 82
   10df8:	9c e0       	ldi	r25, 0x0C	; 12
   10dfa:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10dfe:	be 01       	movw	r22, r28
   10e00:	85 e7       	ldi	r24, 0x75	; 117
   10e02:	9c e0       	ldi	r25, 0x0C	; 12
   10e04:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"     A = ATN\n");
   10e08:	be 01       	movw	r22, r28
   10e0a:	8f e9       	ldi	r24, 0x9F	; 159
   10e0c:	9c e0       	ldi	r25, 0x0C	; 12
   10e0e:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"      E = EOI\n");
   10e12:	be 01       	movw	r22, r28
   10e14:	8d ea       	ldi	r24, 0xAD	; 173
   10e16:	9c e0       	ldi	r25, 0x0C	; 12
   10e18:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"       S = SRQ\n");
   10e1c:	be 01       	movw	r22, r28
   10e1e:	8c eb       	ldi	r24, 0xBC	; 188
   10e20:	9c e0       	ldi	r25, 0x0C	; 12
   10e22:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"        R = REN\n");
   10e26:	be 01       	movw	r22, r28
   10e28:	8c ec       	ldi	r24, 0xCC	; 204
   10e2a:	9c e0       	ldi	r25, 0x0C	; 12
   10e2c:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"         I = IFC\n");
   10e30:	be 01       	movw	r22, r28
   10e32:	8d ed       	ldi	r24, 0xDD	; 221
   10e34:	9c e0       	ldi	r25, 0x0C	; 12
   10e36:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10e3a:	be 01       	movw	r22, r28
   10e3c:	8f ee       	ldi	r24, 0xEF	; 239
   10e3e:	9c e0       	ldi	r25, 0x0C	; 12
   10e40:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10e44:	be 01       	movw	r22, r28
   10e46:	81 e1       	ldi	r24, 0x11	; 17
   10e48:	9d e0       	ldi	r25, 0x0D	; 13
   10e4a:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10e4e:	be 01       	movw	r22, r28
   10e50:	89 e2       	ldi	r24, 0x29	; 41
   10e52:	9d e0       	ldi	r25, 0x0D	; 13
   10e54:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
    fprintf(fo,"              GPIB commands\n");
   10e58:	be 01       	movw	r22, r28
   10e5a:	84 e4       	ldi	r24, 0x44	; 68
   10e5c:	9d e0       	ldi	r25, 0x0D	; 13
   10e5e:	0e 94 3d 75 	call	0xea7a	; 0xea7a <fputs>
}
   10e62:	df 91       	pop	r29
   10e64:	cf 91       	pop	r28
   10e66:	08 95       	ret

00010e68 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10e68:	a9 e8       	ldi	r26, 0x89	; 137
   10e6a:	b0 e0       	ldi	r27, 0x00	; 0
   10e6c:	ea e3       	ldi	r30, 0x3A	; 58
   10e6e:	f7 e8       	ldi	r31, 0x87	; 135
   10e70:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
   10e74:	8c 01       	movw	r16, r24
   10e76:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10e78:	1a 86       	std	Y+10, r1	; 0x0a
   10e7a:	4c 01       	movw	r8, r24
   10e7c:	88 24       	eor	r8, r8
   10e7e:	44 e0       	ldi	r20, 0x04	; 4
   10e80:	94 22       	and	r9, r20
   10e82:	ce 01       	movw	r24, r28
   10e84:	0a 96       	adiw	r24, 0x0a	; 10
   10e86:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10e88:	62 30       	cpi	r22, 0x02	; 2
   10e8a:	71 05       	cpc	r23, r1
   10e8c:	e8 f4       	brcc	.+58     	; 0x10ec8 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10e8e:	81 14       	cp	r8, r1
   10e90:	91 04       	cpc	r9, r1
   10e92:	29 f4       	brne	.+10     	; 0x10e9e <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10e94:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10e96:	90 ee       	ldi	r25, 0xE0	; 224
   10e98:	90 0f       	add	r25, r16
   10e9a:	9f 35       	cpi	r25, 0x5F	; 95
   10e9c:	08 f0       	brcs	.+2      	; 0x10ea0 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10e9e:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10ea0:	90 e0       	ldi	r25, 0x00	; 0
   10ea2:	ed b7       	in	r30, 0x3d	; 61
   10ea4:	fe b7       	in	r31, 0x3e	; 62
   10ea6:	91 87       	std	Z+9, r25	; 0x09
   10ea8:	80 87       	std	Z+8, r24	; 0x08
   10eaa:	c8 01       	movw	r24, r16
   10eac:	99 27       	eor	r25, r25
   10eae:	97 83       	std	Z+7, r25	; 0x07
   10eb0:	86 83       	std	Z+6, r24	; 0x06
   10eb2:	87 ee       	ldi	r24, 0xE7	; 231
   10eb4:	9f e0       	ldi	r25, 0x0F	; 15
   10eb6:	a0 e0       	ldi	r26, 0x00	; 0
   10eb8:	83 83       	std	Z+3, r24	; 0x03
   10eba:	94 83       	std	Z+4, r25	; 0x04
   10ebc:	a5 83       	std	Z+5, r26	; 0x05
   10ebe:	f2 82       	std	Z+2, r15	; 0x02
   10ec0:	e1 82       	std	Z+1, r14	; 0x01
   10ec2:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
   10ec6:	0c c0       	rjmp	.+24     	; 0x10ee0 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10ec8:	81 ee       	ldi	r24, 0xE1	; 225
   10eca:	9f e0       	ldi	r25, 0x0F	; 15
   10ecc:	a0 e0       	ldi	r26, 0x00	; 0
   10ece:	ed b7       	in	r30, 0x3d	; 61
   10ed0:	fe b7       	in	r31, 0x3e	; 62
   10ed2:	83 83       	std	Z+3, r24	; 0x03
   10ed4:	94 83       	std	Z+4, r25	; 0x04
   10ed6:	a5 83       	std	Z+5, r26	; 0x05
   10ed8:	f2 82       	std	Z+2, r15	; 0x02
   10eda:	e1 82       	std	Z+1, r14	; 0x01
   10edc:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
    }

    tmp = str + strlen(str);
   10ee0:	f7 01       	movw	r30, r14
   10ee2:	01 90       	ld	r0, Z+
   10ee4:	00 20       	and	r0, r0
   10ee6:	e9 f7       	brne	.-6      	; 0x10ee2 <gpib_trace_display+0x7a>
   10ee8:	31 97       	sbiw	r30, 0x01	; 1
   10eea:	cf 01       	movw	r24, r30
   10eec:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10eee:	81 14       	cp	r8, r1
   10ef0:	91 04       	cpc	r9, r1
   10ef2:	11 f0       	breq	.+4      	; 0x10ef8 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10ef4:	21 e4       	ldi	r18, 0x41	; 65
   10ef6:	01 c0       	rjmp	.+2      	; 0x10efa <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10ef8:	2d e2       	ldi	r18, 0x2D	; 45
   10efa:	20 83       	st	Z, r18
   10efc:	dc 01       	movw	r26, r24
   10efe:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10f00:	10 ff       	sbrs	r17, 0
   10f02:	02 c0       	rjmp	.+4      	; 0x10f08 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10f04:	25 e4       	ldi	r18, 0x45	; 69
   10f06:	01 c0       	rjmp	.+2      	; 0x10f0a <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10f08:	2d e2       	ldi	r18, 0x2D	; 45
   10f0a:	fc 01       	movw	r30, r24
   10f0c:	20 83       	st	Z, r18
   10f0e:	fd 01       	movw	r30, r26
   10f10:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10f12:	11 ff       	sbrs	r17, 1
   10f14:	02 c0       	rjmp	.+4      	; 0x10f1a <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10f16:	83 e5       	ldi	r24, 0x53	; 83
   10f18:	01 c0       	rjmp	.+2      	; 0x10f1c <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10f1a:	8d e2       	ldi	r24, 0x2D	; 45
   10f1c:	8c 93       	st	X, r24
   10f1e:	df 01       	movw	r26, r30
   10f20:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10f22:	13 ff       	sbrs	r17, 3
   10f24:	02 c0       	rjmp	.+4      	; 0x10f2a <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10f26:	82 e5       	ldi	r24, 0x52	; 82
   10f28:	01 c0       	rjmp	.+2      	; 0x10f2c <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10f2a:	8d e2       	ldi	r24, 0x2D	; 45
   10f2c:	80 83       	st	Z, r24
   10f2e:	fd 01       	movw	r30, r26
   10f30:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10f32:	14 ff       	sbrs	r17, 4
   10f34:	02 c0       	rjmp	.+4      	; 0x10f3a <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10f36:	89 e4       	ldi	r24, 0x49	; 73
   10f38:	01 c0       	rjmp	.+2      	; 0x10f3c <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10f3a:	8d e2       	ldi	r24, 0x2D	; 45
   10f3c:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10f3e:	a1 14       	cp	r10, r1
   10f40:	b1 04       	cpc	r11, r1
   10f42:	d1 f4       	brne	.+52     	; 0x10f78 <gpib_trace_display+0x110>
   10f44:	df 01       	movw	r26, r30
   10f46:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10f48:	15 ff       	sbrs	r17, 5
   10f4a:	02 c0       	rjmp	.+4      	; 0x10f50 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10f4c:	80 e5       	ldi	r24, 0x50	; 80
   10f4e:	01 c0       	rjmp	.+2      	; 0x10f52 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10f50:	8d e2       	ldi	r24, 0x2D	; 45
   10f52:	80 83       	st	Z, r24
   10f54:	fd 01       	movw	r30, r26
   10f56:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10f58:	16 ff       	sbrs	r17, 6
   10f5a:	02 c0       	rjmp	.+4      	; 0x10f60 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10f5c:	84 e5       	ldi	r24, 0x54	; 84
   10f5e:	01 c0       	rjmp	.+2      	; 0x10f62 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10f60:	8d e2       	ldi	r24, 0x2D	; 45
   10f62:	8c 93       	st	X, r24
   10f64:	cf 01       	movw	r24, r30
   10f66:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10f68:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10f6a:	17 ff       	sbrs	r17, 7
   10f6c:	02 c0       	rjmp	.+4      	; 0x10f72 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10f6e:	82 e4       	ldi	r24, 0x42	; 66
   10f70:	01 c0       	rjmp	.+2      	; 0x10f74 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10f72:	8d e2       	ldi	r24, 0x2D	; 45
   10f74:	80 83       	st	Z, r24
   10f76:	08 c0       	rjmp	.+16     	; 0x10f88 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   10f78:	8d e2       	ldi	r24, 0x2D	; 45
   10f7a:	80 83       	st	Z, r24
        *tmp++ = '-';
   10f7c:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10f7e:	6f 01       	movw	r12, r30
   10f80:	43 e0       	ldi	r20, 0x03	; 3
   10f82:	c4 0e       	add	r12, r20
   10f84:	d1 1c       	adc	r13, r1
   10f86:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   10f88:	f6 01       	movw	r30, r12
   10f8a:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   10f8c:	f1 e0       	ldi	r31, 0x01	; 1
   10f8e:	af 1a       	sub	r10, r31
   10f90:	b1 08       	sbc	r11, r1
   10f92:	42 e0       	ldi	r20, 0x02	; 2
   10f94:	a4 16       	cp	r10, r20
   10f96:	b1 04       	cpc	r11, r1
   10f98:	f0 f4       	brcc	.+60     	; 0x10fd6 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   10f9a:	15 ff       	sbrs	r17, 5
   10f9c:	03 c0       	rjmp	.+6      	; 0x10fa4 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   10f9e:	61 e6       	ldi	r22, 0x61	; 97
   10fa0:	7d e0       	ldi	r23, 0x0D	; 13
   10fa2:	02 c0       	rjmp	.+4      	; 0x10fa8 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   10fa4:	65 e6       	ldi	r22, 0x65	; 101
   10fa6:	74 e0       	ldi	r23, 0x04	; 4
   10fa8:	c7 01       	movw	r24, r14
   10faa:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>
        if(status & NRFD_FLAG)
   10fae:	16 ff       	sbrs	r17, 6
   10fb0:	03 c0       	rjmp	.+6      	; 0x10fb8 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   10fb2:	67 e6       	ldi	r22, 0x67	; 103
   10fb4:	7d e0       	ldi	r23, 0x0D	; 13
   10fb6:	02 c0       	rjmp	.+4      	; 0x10fbc <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   10fb8:	65 e6       	ldi	r22, 0x65	; 101
   10fba:	74 e0       	ldi	r23, 0x04	; 4
   10fbc:	c7 01       	movw	r24, r14
   10fbe:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>
        if(status & NDAC_FLAG)
   10fc2:	17 ff       	sbrs	r17, 7
   10fc4:	03 c0       	rjmp	.+6      	; 0x10fcc <gpib_trace_display+0x164>
            strcat(str," NDAC");
   10fc6:	6d e6       	ldi	r22, 0x6D	; 109
   10fc8:	7d e0       	ldi	r23, 0x0D	; 13
   10fca:	02 c0       	rjmp	.+4      	; 0x10fd0 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   10fcc:	65 e6       	ldi	r22, 0x65	; 101
   10fce:	74 e0       	ldi	r23, 0x04	; 4
   10fd0:	c7 01       	movw	r24, r14
   10fd2:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>
    }

    if( (status & ATN_FLAG) )
   10fd6:	81 14       	cp	r8, r1
   10fd8:	91 04       	cpc	r9, r1
   10fda:	09 f4       	brne	.+2      	; 0x10fde <gpib_trace_display+0x176>
   10fdc:	5a c0       	rjmp	.+180    	; 0x11092 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   10fde:	c8 01       	movw	r24, r16
   10fe0:	8f 77       	andi	r24, 0x7F	; 127
   10fe2:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   10fe4:	9c 01       	movw	r18, r24
   10fe6:	20 52       	subi	r18, 0x20	; 32
   10fe8:	31 09       	sbc	r19, r1
   10fea:	2f 31       	cpi	r18, 0x1F	; 31
   10fec:	31 05       	cpc	r19, r1
   10fee:	48 f4       	brcc	.+18     	; 0x11002 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   10ff0:	0f 71       	andi	r16, 0x1F	; 31
   10ff2:	11 27       	eor	r17, r17
   10ff4:	ed b7       	in	r30, 0x3d	; 61
   10ff6:	fe b7       	in	r31, 0x3e	; 62
   10ff8:	17 83       	std	Z+7, r17	; 0x07
   10ffa:	06 83       	std	Z+6, r16	; 0x06
   10ffc:	86 ed       	ldi	r24, 0xD6	; 214
   10ffe:	9f e0       	ldi	r25, 0x0F	; 15
   11000:	0e c0       	rjmp	.+28     	; 0x1101e <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11002:	9c 01       	movw	r18, r24
   11004:	20 54       	subi	r18, 0x40	; 64
   11006:	31 09       	sbc	r19, r1
   11008:	2f 30       	cpi	r18, 0x0F	; 15
   1100a:	31 05       	cpc	r19, r1
   1100c:	88 f4       	brcc	.+34     	; 0x11030 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   1100e:	0f 71       	andi	r16, 0x1F	; 31
   11010:	11 27       	eor	r17, r17
   11012:	ed b7       	in	r30, 0x3d	; 61
   11014:	fe b7       	in	r31, 0x3e	; 62
   11016:	17 83       	std	Z+7, r17	; 0x07
   11018:	06 83       	std	Z+6, r16	; 0x06
   1101a:	8b ec       	ldi	r24, 0xCB	; 203
   1101c:	9f e0       	ldi	r25, 0x0F	; 15
   1101e:	a0 e0       	ldi	r26, 0x00	; 0
   11020:	83 83       	std	Z+3, r24	; 0x03
   11022:	94 83       	std	Z+4, r25	; 0x04
   11024:	a5 83       	std	Z+5, r26	; 0x05
   11026:	d2 82       	std	Z+2, r13	; 0x02
   11028:	c1 82       	std	Z+1, r12	; 0x01
   1102a:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
   1102e:	31 c0       	rjmp	.+98     	; 0x11092 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11030:	9c 01       	movw	r18, r24
   11032:	20 56       	subi	r18, 0x60	; 96
   11034:	31 09       	sbc	r19, r1
   11036:	20 31       	cpi	r18, 0x10	; 16
   11038:	31 05       	cpc	r19, r1
   1103a:	28 f0       	brcs	.+10     	; 0x11046 <gpib_trace_display+0x1de>
   1103c:	e2 e8       	ldi	r30, 0x82	; 130
   1103e:	f1 e0       	ldi	r31, 0x01	; 1
   11040:	00 e0       	ldi	r16, 0x00	; 0
   11042:	10 e0       	ldi	r17, 0x00	; 0
   11044:	0b c0       	rjmp	.+22     	; 0x1105c <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11046:	0f 71       	andi	r16, 0x1F	; 31
   11048:	11 27       	eor	r17, r17
   1104a:	ed b7       	in	r30, 0x3d	; 61
   1104c:	fe b7       	in	r31, 0x3e	; 62
   1104e:	17 83       	std	Z+7, r17	; 0x07
   11050:	06 83       	std	Z+6, r16	; 0x06
   11052:	80 ec       	ldi	r24, 0xC0	; 192
   11054:	9f e0       	ldi	r25, 0x0F	; 15
   11056:	e3 cf       	rjmp	.-58     	; 0x1101e <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11058:	0f 5f       	subi	r16, 0xFF	; 255
   1105a:	1f 4f       	sbci	r17, 0xFF	; 255
   1105c:	20 81       	ld	r18, Z
   1105e:	31 81       	ldd	r19, Z+1	; 0x01
   11060:	2f 3f       	cpi	r18, 0xFF	; 255
   11062:	4f ef       	ldi	r20, 0xFF	; 255
   11064:	34 07       	cpc	r19, r20
   11066:	a9 f0       	breq	.+42     	; 0x11092 <gpib_trace_display+0x22a>
   11068:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1106a:	82 17       	cp	r24, r18
   1106c:	93 07       	cpc	r25, r19
   1106e:	a1 f7       	brne	.-24     	; 0x11058 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11070:	69 e6       	ldi	r22, 0x69	; 105
   11072:	74 e0       	ldi	r23, 0x04	; 4
   11074:	c6 01       	movw	r24, r12
   11076:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1107a:	f8 01       	movw	r30, r16
   1107c:	ee 0f       	add	r30, r30
   1107e:	ff 1f       	adc	r31, r31
   11080:	ee 0f       	add	r30, r30
   11082:	ff 1f       	adc	r31, r31
   11084:	ee 57       	subi	r30, 0x7E	; 126
   11086:	fe 4f       	sbci	r31, 0xFE	; 254
   11088:	62 81       	ldd	r22, Z+2	; 0x02
   1108a:	73 81       	ldd	r23, Z+3	; 0x03
   1108c:	c6 01       	movw	r24, r12
   1108e:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11092:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <gpib_log_fp>
   11096:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <gpib_log_fp+0x1>
   1109a:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   1109e:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   110a2:	23 2b       	or	r18, r19
   110a4:	21 f4       	brne	.+8      	; 0x110ae <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   110a6:	90 93 58 19 	sts	0x1958, r25	; 0x801958 <gpib_log_fp+0x1>
   110aa:	80 93 57 19 	sts	0x1957, r24	; 0x801957 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   110ae:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <gpib_log_fp>
   110b2:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <gpib_log_fp+0x1>
   110b6:	82 17       	cp	r24, r18
   110b8:	93 07       	cpc	r25, r19
   110ba:	19 f0       	breq	.+6      	; 0x110c2 <gpib_trace_display+0x25a>
        puts(str);
   110bc:	c7 01       	movw	r24, r14
   110be:	0e 94 55 75 	call	0xeaaa	; 0xeaaa <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   110c2:	ed b7       	in	r30, 0x3d	; 61
   110c4:	fe b7       	in	r31, 0x3e	; 62
   110c6:	f6 82       	std	Z+6, r15	; 0x06
   110c8:	e5 82       	std	Z+5, r14	; 0x05
   110ca:	83 e7       	ldi	r24, 0x73	; 115
   110cc:	9d e0       	ldi	r25, 0x0D	; 13
   110ce:	94 83       	std	Z+4, r25	; 0x04
   110d0:	83 83       	std	Z+3, r24	; 0x03
   110d2:	80 91 57 19 	lds	r24, 0x1957	; 0x801957 <gpib_log_fp>
   110d6:	90 91 58 19 	lds	r25, 0x1958	; 0x801958 <gpib_log_fp+0x1>
   110da:	92 83       	std	Z+2, r25	; 0x02
   110dc:	81 83       	std	Z+1, r24	; 0x01
   110de:	0e 94 fd 7c 	call	0xf9fa	; 0xf9fa <fprintf>
}
   110e2:	c7 57       	subi	r28, 0x77	; 119
   110e4:	df 4f       	sbci	r29, 0xFF	; 255
   110e6:	ec e0       	ldi	r30, 0x0C	; 12
   110e8:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

000110ec <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   110ec:	af 92       	push	r10
   110ee:	bf 92       	push	r11
   110f0:	cf 92       	push	r12
   110f2:	df 92       	push	r13
   110f4:	ef 92       	push	r14
   110f6:	ff 92       	push	r15
   110f8:	0f 93       	push	r16
   110fa:	1f 93       	push	r17
   110fc:	cf 93       	push	r28
   110fe:	00 d0       	rcall	.+0      	; 0x11100 <gpib_read_byte+0x14>
   11100:	00 d0       	rcall	.+0      	; 0x11102 <gpib_read_byte+0x16>
   11102:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   11104:	20 91 56 19 	lds	r18, 0x1956	; 0x801956 <gpib_unread_f>
   11108:	22 23       	and	r18, r18
   1110a:	39 f0       	breq	.+14     	; 0x1111a <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   1110c:	10 92 56 19 	sts	0x1956, r1	; 0x801956 <gpib_unread_f>
        return(gpib_unread_data);
   11110:	80 91 e8 1e 	lds	r24, 0x1EE8	; 0x801ee8 <gpib_unread_data>
   11114:	90 91 e9 1e 	lds	r25, 0x1EE9	; 0x801ee9 <gpib_unread_data+0x1>
   11118:	f2 c0       	rjmp	.+484    	; 0x112fe <gpib_read_byte+0x212>
   1111a:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   1111c:	81 e0       	ldi	r24, 0x01	; 1
   1111e:	f8 db       	rcall	.-2064   	; 0x10910 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   11120:	c1 14       	cp	r12, r1
   11122:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11124:	51 f0       	breq	.+20     	; 0x1113a <gpib_read_byte+0x4e>
   11126:	ed dc       	rcall	.-1574   	; 0x10b02 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11128:	7c 01       	movw	r14, r24
   1112a:	fb dc       	rcall	.-1546   	; 0x10b22 <gpib_handshake_pin_read>
   1112c:	e8 2a       	or	r14, r24
   1112e:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   11130:	62 e0       	ldi	r22, 0x02	; 2
   11132:	70 e0       	ldi	r23, 0x00	; 0
   11134:	c7 01       	movw	r24, r14
   11136:	98 de       	rcall	.-720    	; 0x10e68 <gpib_trace_display>
   11138:	02 c0       	rjmp	.+4      	; 0x1113e <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   1113a:	e1 2c       	mov	r14, r1
   1113c:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   1113e:	64 ef       	ldi	r22, 0xF4	; 244
   11140:	71 e0       	ldi	r23, 0x01	; 1
   11142:	80 e0       	ldi	r24, 0x00	; 0
   11144:	90 e0       	ldi	r25, 0x00	; 0
   11146:	a2 db       	rcall	.-2236   	; 0x1088c <gpib_timeout_set>
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11148:	00 e0       	ldi	r16, 0x00	; 0
   1114a:	10 e0       	ldi	r17, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
   1114c:	c0 e0       	ldi	r28, 0x00	; 0
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   1114e:	0e 94 b5 de 	call	0x1bd6a	; 0x1bd6a <gpib_user_task>

        if(uart_keyhit(0))
   11152:	80 e0       	ldi	r24, 0x00	; 0
   11154:	0e 94 12 28 	call	0x5024	; 0x5024 <uart_keyhit>
   11158:	89 2b       	or	r24, r25
   1115a:	99 f0       	breq	.+38     	; 0x11182 <gpib_read_byte+0x96>
		{
			if(debuglevel & GPIB_ERR)
   1115c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11160:	80 ff       	sbrs	r24, 0
   11162:	ab c0       	rjmp	.+342    	; 0x112ba <gpib_read_byte+0x1ce>
				printf("gpib_read_byte: state=%d\n", rx_state);
   11164:	8c 2f       	mov	r24, r28
   11166:	90 e0       	ldi	r25, 0x00	; 0
   11168:	ed b7       	in	r30, 0x3d	; 61
   1116a:	fe b7       	in	r31, 0x3e	; 62
   1116c:	95 83       	std	Z+5, r25	; 0x05
   1116e:	84 83       	std	Z+4, r24	; 0x04
   11170:	8e e0       	ldi	r24, 0x0E	; 14
   11172:	90 e1       	ldi	r25, 0x10	; 16
   11174:	a0 e0       	ldi	r26, 0x00	; 0
   11176:	81 83       	std	Z+1, r24	; 0x01
   11178:	92 83       	std	Z+2, r25	; 0x02
   1117a:	a3 83       	std	Z+3, r26	; 0x03
   1117c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11180:	9c c0       	rjmp	.+312    	; 0x112ba <gpib_read_byte+0x1ce>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11182:	4c 99       	sbic	0x09, 4	; 9
   11184:	15 c0       	rjmp	.+42     	; 0x111b0 <gpib_read_byte+0xc4>
        {
            ch |= IFC_FLAG;
   11186:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   11188:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1118c:	80 ff       	sbrs	r24, 0
   1118e:	0e c0       	rjmp	.+28     	; 0x111ac <gpib_read_byte+0xc0>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11190:	8c 2f       	mov	r24, r28
   11192:	90 e0       	ldi	r25, 0x00	; 0
   11194:	ed b7       	in	r30, 0x3d	; 61
   11196:	fe b7       	in	r31, 0x3e	; 62
   11198:	95 83       	std	Z+5, r25	; 0x05
   1119a:	84 83       	std	Z+4, r24	; 0x04
   1119c:	80 ef       	ldi	r24, 0xF0	; 240
   1119e:	9f e0       	ldi	r25, 0x0F	; 15
   111a0:	a0 e0       	ldi	r26, 0x00	; 0
   111a2:	81 83       	std	Z+1, r24	; 0x01
   111a4:	92 83       	std	Z+2, r25	; 0x02
   111a6:	a3 83       	std	Z+3, r26	; 0x03
   111a8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            gpib_bus_init();
   111ac:	79 db       	rcall	.-2318   	; 0x108a0 <gpib_bus_init>
   111ae:	85 c0       	rjmp	.+266    	; 0x112ba <gpib_read_byte+0x1ce>
            break;
        }

        switch(rx_state)
   111b0:	c2 30       	cpi	r28, 0x02	; 2
   111b2:	31 f1       	breq	.+76     	; 0x11200 <gpib_read_byte+0x114>
   111b4:	28 f4       	brcc	.+10     	; 0x111c0 <gpib_read_byte+0xd4>
   111b6:	cc 23       	and	r28, r28
   111b8:	69 f0       	breq	.+26     	; 0x111d4 <gpib_read_byte+0xe8>
   111ba:	c1 30       	cpi	r28, 0x01	; 1
   111bc:	c9 f0       	breq	.+50     	; 0x111f0 <gpib_read_byte+0x104>
   111be:	63 c0       	rjmp	.+198    	; 0x11286 <gpib_read_byte+0x19a>
   111c0:	c5 30       	cpi	r28, 0x05	; 5
   111c2:	09 f4       	brne	.+2      	; 0x111c6 <gpib_read_byte+0xda>
   111c4:	54 c0       	rjmp	.+168    	; 0x1126e <gpib_read_byte+0x182>
   111c6:	c7 30       	cpi	r28, 0x07	; 7
   111c8:	09 f4       	brne	.+2      	; 0x111cc <gpib_read_byte+0xe0>
   111ca:	58 c0       	rjmp	.+176    	; 0x1127c <gpib_read_byte+0x190>
   111cc:	c4 30       	cpi	r28, 0x04	; 4
   111ce:	09 f0       	breq	.+2      	; 0x111d2 <gpib_read_byte+0xe6>
   111d0:	5a c0       	rjmp	.+180    	; 0x11286 <gpib_read_byte+0x19a>
   111d2:	3e c0       	rjmp	.+124    	; 0x11250 <gpib_read_byte+0x164>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   111d4:	19 9b       	sbis	0x03, 1	; 3
   111d6:	43 c0       	rjmp	.+134    	; 0x1125e <gpib_read_byte+0x172>
   111d8:	fd e0       	ldi	r31, 0x0D	; 13
   111da:	fa 95       	dec	r31
   111dc:	f1 f7       	brne	.-4      	; 0x111da <gpib_read_byte+0xee>
   111de:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   111e0:	52 98       	cbi	0x0a, 2	; 10
   111e2:	5a 9a       	sbi	0x0b, 2	; 11
   111e4:	8d e0       	ldi	r24, 0x0D	; 13
   111e6:	8a 95       	dec	r24
   111e8:	f1 f7       	brne	.-4      	; 0x111e6 <gpib_read_byte+0xfa>
   111ea:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   111ec:	c1 e0       	ldi	r28, 0x01	; 1
   111ee:	37 c0       	rjmp	.+110    	; 0x1125e <gpib_read_byte+0x172>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   111f0:	19 99       	sbic	0x03, 1	; 3
   111f2:	80 c0       	rjmp	.+256    	; 0x112f4 <gpib_read_byte+0x208>
   111f4:	ed e0       	ldi	r30, 0x0D	; 13
   111f6:	ea 95       	dec	r30
   111f8:	f1 f7       	brne	.-4      	; 0x111f6 <gpib_read_byte+0x10a>
   111fa:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   111fc:	c2 e0       	ldi	r28, 0x02	; 2
   111fe:	7a c0       	rjmp	.+244    	; 0x112f4 <gpib_read_byte+0x208>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   11200:	5a 98       	cbi	0x0b, 2	; 11
   11202:	52 9a       	sbi	0x0a, 2	; 10
   11204:	fd e0       	ldi	r31, 0x0D	; 13
   11206:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   11208:	f1 f7       	brne	.-4      	; 0x11206 <gpib_read_byte+0x11a>
   1120a:	00 00       	nop
   1120c:	74 dc       	rcall	.-1816   	; 0x10af6 <gpib_bus_read>
   1120e:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   11210:	b1 2c       	mov	r11, r1
   11212:	77 dc       	rcall	.-1810   	; 0x10b02 <gpib_control_pin_read>
   11214:	7c 01       	movw	r14, r24
   11216:	08 2b       	or	r16, r24
                ch |= control_last;
   11218:	19 2b       	or	r17, r25
   1121a:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   1121c:	1b 29       	or	r17, r11
   1121e:	c1 14       	cp	r12, r1
   11220:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   11222:	49 f0       	breq	.+18     	; 0x11236 <gpib_read_byte+0x14a>
   11224:	7e dc       	rcall	.-1796   	; 0x10b22 <gpib_handshake_pin_read>
   11226:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11228:	f9 2a       	or	r15, r25
   1122a:	61 e0       	ldi	r22, 0x01	; 1
   1122c:	70 e0       	ldi	r23, 0x00	; 0
   1122e:	c5 01       	movw	r24, r10
   11230:	8e 29       	or	r24, r14
   11232:	9f 29       	or	r25, r15
   11234:	19 de       	rcall	.-974    	; 0x10e68 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11236:	53 98       	cbi	0x0a, 3	; 10
   11238:	5b 9a       	sbi	0x0b, 3	; 11
   1123a:	8d e0       	ldi	r24, 0x0D	; 13
   1123c:	8a 95       	dec	r24
   1123e:	f1 f7       	brne	.-4      	; 0x1123c <gpib_read_byte+0x150>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11240:	00 00       	nop
   11242:	64 ef       	ldi	r22, 0xF4	; 244
   11244:	71 e0       	ldi	r23, 0x01	; 1
   11246:	80 e0       	ldi	r24, 0x00	; 0
   11248:	90 e0       	ldi	r25, 0x00	; 0
   1124a:	20 db       	rcall	.-2496   	; 0x1088c <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1124c:	c4 e0       	ldi	r28, 0x04	; 4
   1124e:	52 c0       	rjmp	.+164    	; 0x112f4 <gpib_read_byte+0x208>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11250:	19 9b       	sbis	0x03, 1	; 3
   11252:	05 c0       	rjmp	.+10     	; 0x1125e <gpib_read_byte+0x172>
   11254:	ed e0       	ldi	r30, 0x0D	; 13
   11256:	ea 95       	dec	r30
   11258:	f1 f7       	brne	.-4      	; 0x11256 <gpib_read_byte+0x16a>
   1125a:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   1125c:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1125e:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11262:	88 23       	and	r24, r24
   11264:	09 f4       	brne	.+2      	; 0x11268 <gpib_read_byte+0x17c>
   11266:	46 c0       	rjmp	.+140    	; 0x112f4 <gpib_read_byte+0x208>
                {
                    ch |= TIMEOUT_FLAG;
   11268:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1126a:	c7 e0       	ldi	r28, 0x07	; 7
   1126c:	43 c0       	rjmp	.+134    	; 0x112f4 <gpib_read_byte+0x208>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   1126e:	5b 98       	cbi	0x0b, 3	; 11
   11270:	53 9a       	sbi	0x0a, 3	; 10
   11272:	fd e0       	ldi	r31, 0x0D	; 13
   11274:	fa 95       	dec	r31
   11276:	f1 f7       	brne	.-4      	; 0x11274 <gpib_read_byte+0x188>
   11278:	00 00       	nop
   1127a:	09 c0       	rjmp	.+18     	; 0x1128e <gpib_read_byte+0x1a2>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1127c:	5a 98       	cbi	0x0b, 2	; 11
   1127e:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11280:	5b 98       	cbi	0x0b, 3	; 11
   11282:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11284:	04 c0       	rjmp	.+8      	; 0x1128e <gpib_read_byte+0x1a2>
   11286:	c1 14       	cp	r12, r1
   11288:	d1 04       	cpc	r13, r1
   1128a:	91 f0       	breq	.+36     	; 0x112b0 <gpib_read_byte+0x1c4>
   1128c:	04 c0       	rjmp	.+8      	; 0x11296 <gpib_read_byte+0x1aa>
   1128e:	c1 14       	cp	r12, r1
   11290:	d1 04       	cpc	r13, r1
   11292:	99 f0       	breq	.+38     	; 0x112ba <gpib_read_byte+0x1ce>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11294:	c8 e0       	ldi	r28, 0x08	; 8
   11296:	35 dc       	rcall	.-1942   	; 0x10b02 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   11298:	5c 01       	movw	r10, r24
   1129a:	43 dc       	rcall	.-1914   	; 0x10b22 <gpib_handshake_pin_read>
   1129c:	a8 2a       	or	r10, r24
   1129e:	b9 2a       	or	r11, r25
            if(control_last != control)
   112a0:	ae 14       	cp	r10, r14
   112a2:	bf 04       	cpc	r11, r15
   112a4:	31 f0       	breq	.+12     	; 0x112b2 <gpib_read_byte+0x1c6>
            {
                gpib_trace_display(control, TRACE_BUS);
   112a6:	62 e0       	ldi	r22, 0x02	; 2
   112a8:	70 e0       	ldi	r23, 0x00	; 0
   112aa:	c5 01       	movw	r24, r10
   112ac:	dd dd       	rcall	.-1094   	; 0x10e68 <gpib_trace_display>
   112ae:	01 c0       	rjmp	.+2      	; 0x112b2 <gpib_read_byte+0x1c6>
   112b0:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   112b2:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   112b4:	11 f0       	breq	.+4      	; 0x112ba <gpib_read_byte+0x1ce>
   112b6:	75 01       	movw	r14, r10
   112b8:	4a cf       	rjmp	.-364    	; 0x1114e <gpib_read_byte+0x62>
   112ba:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   112be:	90 91 e3 1e 	lds	r25, 0x1EE3	; 0x801ee3 <current+0x1>
   112c2:	90 93 df 1c 	sts	0x1CDF, r25	; 0x801cdf <lastcmd+0x1>
   112c6:	80 93 de 1c 	sts	0x1CDE, r24	; 0x801cde <lastcmd>
   112ca:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   112cc:	88 27       	eor	r24, r24
   112ce:	90 7d       	andi	r25, 0xD0	; 208
   112d0:	89 2b       	or	r24, r25
   112d2:	11 f4       	brne	.+4      	; 0x112d8 <gpib_read_byte+0x1ec>
   112d4:	12 fd       	sbrc	r17, 2
   112d6:	05 c0       	rjmp	.+10     	; 0x112e2 <gpib_read_byte+0x1f6>
   112d8:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <current+0x1>
        current = 0;
   112dc:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <current>
   112e0:	07 c0       	rjmp	.+14     	; 0x112f0 <gpib_read_byte+0x204>
   112e2:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   112e4:	8f 77       	andi	r24, 0x7F	; 127
   112e6:	99 27       	eor	r25, r25
   112e8:	90 93 e3 1e 	sts	0x1EE3, r25	; 0x801ee3 <current+0x1>
   112ec:	80 93 e2 1e 	sts	0x1EE2, r24	; 0x801ee2 <current>
   112f0:	c8 01       	movw	r24, r16
   112f2:	05 c0       	rjmp	.+10     	; 0x112fe <gpib_read_byte+0x212>
   112f4:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   112f6:	d1 04       	cpc	r13, r1
   112f8:	09 f4       	brne	.+2      	; 0x112fc <gpib_read_byte+0x210>
   112fa:	29 cf       	rjmp	.-430    	; 0x1114e <gpib_read_byte+0x62>
   112fc:	cc cf       	rjmp	.-104    	; 0x11296 <gpib_read_byte+0x1aa>
   112fe:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11300:	0f 90       	pop	r0
   11302:	0f 90       	pop	r0
   11304:	0f 90       	pop	r0
   11306:	0f 90       	pop	r0
   11308:	cf 91       	pop	r28
   1130a:	1f 91       	pop	r17
   1130c:	0f 91       	pop	r16
   1130e:	ff 90       	pop	r15
   11310:	ef 90       	pop	r14
   11312:	df 90       	pop	r13
   11314:	cf 90       	pop	r12
   11316:	bf 90       	pop	r11
   11318:	af 90       	pop	r10
   1131a:	08 95       	ret

0001131c <gpib_decode>:
   1131c:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1131e:	70 e0       	ldi	r23, 0x00	; 0
   11320:	a3 cd       	rjmp	.-1210   	; 0x10e68 <gpib_trace_display>
   11322:	08 95       	ret

00011324 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11324:	a7 e0       	ldi	r26, 0x07	; 7
   11326:	b0 e0       	ldi	r27, 0x00	; 0
   11328:	e8 e9       	ldi	r30, 0x98	; 152
   1132a:	f9 e8       	ldi	r31, 0x89	; 137
   1132c:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
   11330:	5b 01       	movw	r10, r22
   11332:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11334:	fa 01       	movw	r30, r20
   11336:	20 81       	ld	r18, Z
   11338:	31 81       	ldd	r19, Z+1	; 0x01
   1133a:	22 27       	eor	r18, r18
   1133c:	31 83       	std	Z+1, r19	; 0x01
   1133e:	20 83       	st	Z, r18

    if(!size)
   11340:	67 2b       	or	r22, r23
   11342:	21 f0       	breq	.+8      	; 0x1134c <gpib_read_str+0x28>
   11344:	7c 01       	movw	r14, r24
   11346:	00 e0       	ldi	r16, 0x00	; 0
   11348:	10 e0       	ldi	r17, 0x00	; 0
   1134a:	28 c0       	rjmp	.+80     	; 0x1139c <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1134c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11350:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11354:	81 72       	andi	r24, 0x21	; 33
   11356:	91 70       	andi	r25, 0x01	; 1
   11358:	89 2b       	or	r24, r25
   1135a:	09 f4       	brne	.+2      	; 0x1135e <gpib_read_str+0x3a>
   1135c:	7c c0       	rjmp	.+248    	; 0x11456 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   1135e:	87 ea       	ldi	r24, 0xA7	; 167
   11360:	9f e0       	ldi	r25, 0x0F	; 15
   11362:	a0 e0       	ldi	r26, 0x00	; 0
   11364:	ed b7       	in	r30, 0x3d	; 61
   11366:	fe b7       	in	r31, 0x3e	; 62
   11368:	81 83       	std	Z+1, r24	; 0x01
   1136a:	92 83       	std	Z+2, r25	; 0x02
   1136c:	a3 83       	std	Z+3, r26	; 0x03
   1136e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11372:	71 c0       	rjmp	.+226    	; 0x11456 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11374:	8c 27       	eor	r24, r28
   11376:	9d 27       	eor	r25, r29
   11378:	92 fd       	sbrc	r25, 2
   1137a:	2e c0       	rjmp	.+92     	; 0x113d8 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1137c:	ce 01       	movw	r24, r28
   1137e:	88 27       	eor	r24, r24
   11380:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11382:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11384:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11386:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11388:	f7 01       	movw	r30, r14
   1138a:	20 83       	st	Z, r18
        ++ind;
   1138c:	0f 5f       	subi	r16, 0xFF	; 255
   1138e:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11390:	89 2b       	or	r24, r25
   11392:	09 f4       	brne	.+2      	; 0x11396 <gpib_read_str+0x72>
   11394:	3c c0       	rjmp	.+120    	; 0x1140e <gpib_read_str+0xea>
   11396:	ff ef       	ldi	r31, 0xFF	; 255
   11398:	ef 1a       	sub	r14, r31
   1139a:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1139c:	0a 15       	cp	r16, r10
   1139e:	1b 05       	cpc	r17, r11
   113a0:	0c f0       	brlt	.+2      	; 0x113a4 <gpib_read_str+0x80>
   113a2:	3f c0       	rjmp	.+126    	; 0x11422 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   113a4:	80 e0       	ldi	r24, 0x00	; 0
   113a6:	90 e0       	ldi	r25, 0x00	; 0
   113a8:	a1 de       	rcall	.-702    	; 0x110ec <gpib_read_byte>
   113aa:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   113ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113b4:	90 ff       	sbrs	r25, 0
   113b6:	02 c0       	rjmp	.+4      	; 0x113bc <gpib_read_str+0x98>
            gpib_decode(val);
   113b8:	ce 01       	movw	r24, r28
   113ba:	b0 df       	rcall	.-160    	; 0x1131c <gpib_decode>
#endif
        if(val & ERROR_MASK)
   113bc:	9e 01       	movw	r18, r28
   113be:	22 27       	eor	r18, r18
   113c0:	30 7d       	andi	r19, 0xD0	; 208
   113c2:	f6 01       	movw	r30, r12
   113c4:	80 81       	ld	r24, Z
   113c6:	91 81       	ldd	r25, Z+1	; 0x01
   113c8:	21 15       	cp	r18, r1
   113ca:	31 05       	cpc	r19, r1
   113cc:	99 f2       	breq	.-90     	; 0x11374 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   113ce:	82 2b       	or	r24, r18
   113d0:	93 2b       	or	r25, r19
   113d2:	91 83       	std	Z+1, r25	; 0x01
   113d4:	80 83       	st	Z, r24
            break;
   113d6:	28 c0       	rjmp	.+80     	; 0x11428 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   113d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113dc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113e0:	81 72       	andi	r24, 0x21	; 33
   113e2:	91 70       	andi	r25, 0x01	; 1
   113e4:	89 2b       	or	r24, r25
   113e6:	81 f0       	breq	.+32     	; 0x11408 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   113e8:	ce 01       	movw	r24, r28
   113ea:	99 27       	eor	r25, r25
   113ec:	ed b7       	in	r30, 0x3d	; 61
   113ee:	fe b7       	in	r31, 0x3e	; 62
   113f0:	97 83       	std	Z+7, r25	; 0x07
   113f2:	86 83       	std	Z+6, r24	; 0x06
   113f4:	15 83       	std	Z+5, r17	; 0x05
   113f6:	04 83       	std	Z+4, r16	; 0x04
   113f8:	8a e7       	ldi	r24, 0x7A	; 122
   113fa:	9f e0       	ldi	r25, 0x0F	; 15
   113fc:	a0 e0       	ldi	r26, 0x00	; 0
   113fe:	81 83       	std	Z+1, r24	; 0x01
   11400:	92 83       	std	Z+2, r25	; 0x02
   11402:	a3 83       	std	Z+3, r26	; 0x03
   11404:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            gpib_unread(val);
   11408:	ce 01       	movw	r24, r28
   1140a:	4b db       	rcall	.-2410   	; 0x10aa2 <gpib_unread>
            break;
   1140c:	0d c0       	rjmp	.+26     	; 0x11428 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1140e:	d0 ff       	sbrs	r29, 0
   11410:	c2 cf       	rjmp	.-124    	; 0x11396 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   11412:	f6 01       	movw	r30, r12
   11414:	80 81       	ld	r24, Z
   11416:	91 81       	ldd	r25, Z+1	; 0x01
   11418:	90 fd       	sbrc	r25, 0
   1141a:	1f c0       	rjmp	.+62     	; 0x1145a <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1141c:	91 60       	ori	r25, 0x01	; 1
   1141e:	91 83       	std	Z+1, r25	; 0x01
   11420:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   11422:	0a 15       	cp	r16, r10
   11424:	1b 05       	cpc	r17, r11
   11426:	c9 f0       	breq	.+50     	; 0x1145a <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11428:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1142c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11430:	81 72       	andi	r24, 0x21	; 33
   11432:	99 27       	eor	r25, r25
   11434:	89 2b       	or	r24, r25
   11436:	89 f0       	breq	.+34     	; 0x1145a <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11438:	ed b7       	in	r30, 0x3d	; 61
   1143a:	fe b7       	in	r31, 0x3e	; 62
   1143c:	b7 82       	std	Z+7, r11	; 0x07
   1143e:	a6 82       	std	Z+6, r10	; 0x06
   11440:	15 83       	std	Z+5, r17	; 0x05
   11442:	04 83       	std	Z+4, r16	; 0x04
   11444:	83 e5       	ldi	r24, 0x53	; 83
   11446:	9f e0       	ldi	r25, 0x0F	; 15
   11448:	a0 e0       	ldi	r26, 0x00	; 0
   1144a:	81 83       	std	Z+1, r24	; 0x01
   1144c:	92 83       	std	Z+2, r25	; 0x02
   1144e:	a3 83       	std	Z+3, r26	; 0x03
   11450:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11454:	02 c0       	rjmp	.+4      	; 0x1145a <gpib_read_str+0x136>
   11456:	00 e0       	ldi	r16, 0x00	; 0
   11458:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   1145a:	c8 01       	movw	r24, r16
   1145c:	cd b7       	in	r28, 0x3d	; 61
   1145e:	de b7       	in	r29, 0x3e	; 62
   11460:	27 96       	adiw	r28, 0x07	; 7
   11462:	ea e0       	ldi	r30, 0x0A	; 10
   11464:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

00011468 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11468:	a7 e0       	ldi	r26, 0x07	; 7
   1146a:	b0 e0       	ldi	r27, 0x00	; 0
   1146c:	ea e3       	ldi	r30, 0x3A	; 58
   1146e:	fa e8       	ldi	r31, 0x8A	; 138
   11470:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
   11474:	d8 2f       	mov	r29, r24
   11476:	c9 2f       	mov	r28, r25
   11478:	7b 01       	movw	r14, r22
   1147a:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1147c:	fa 01       	movw	r30, r20
   1147e:	80 81       	ld	r24, Z
   11480:	91 81       	ldd	r25, Z+1	; 0x01
   11482:	88 27       	eor	r24, r24
   11484:	91 83       	std	Z+1, r25	; 0x01
   11486:	80 83       	st	Z, r24

    if(!size)
   11488:	67 2b       	or	r22, r23
   1148a:	91 f4       	brne	.+36     	; 0x114b0 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1148c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11490:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11494:	81 72       	andi	r24, 0x21	; 33
   11496:	91 70       	andi	r25, 0x01	; 1
   11498:	89 2b       	or	r24, r25
   1149a:	51 f0       	breq	.+20     	; 0x114b0 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   1149c:	89 e3       	ldi	r24, 0x39	; 57
   1149e:	9f e0       	ldi	r25, 0x0F	; 15
   114a0:	a0 e0       	ldi	r26, 0x00	; 0
   114a2:	ed b7       	in	r30, 0x3d	; 61
   114a4:	fe b7       	in	r31, 0x3e	; 62
   114a6:	81 83       	std	Z+1, r24	; 0x01
   114a8:	92 83       	std	Z+2, r25	; 0x02
   114aa:	a3 83       	std	Z+3, r26	; 0x03
   114ac:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   114b0:	80 e0       	ldi	r24, 0x00	; 0
   114b2:	2e da       	rcall	.-2980   	; 0x10910 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   114b4:	4e 9b       	sbis	0x09, 6	; 9
   114b6:	06 c0       	rjmp	.+12     	; 0x114c4 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   114b8:	64 ef       	ldi	r22, 0xF4	; 244
   114ba:	71 e0       	ldi	r23, 0x01	; 1
   114bc:	80 e0       	ldi	r24, 0x00	; 0
   114be:	90 e0       	ldi	r25, 0x00	; 0
   114c0:	e5 d9       	rcall	.-3126   	; 0x1088c <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   114c2:	18 c0       	rjmp	.+48     	; 0x114f4 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   114c4:	64 ef       	ldi	r22, 0xF4	; 244
   114c6:	71 e0       	ldi	r23, 0x01	; 1
   114c8:	80 e0       	ldi	r24, 0x00	; 0
   114ca:	90 e0       	ldi	r25, 0x00	; 0
   114cc:	df d9       	rcall	.-3138   	; 0x1088c <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   114ce:	4e 99       	sbic	0x09, 6	; 9
   114d0:	f3 cf       	rjmp	.-26     	; 0x114b8 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   114d2:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   114d6:	88 23       	and	r24, r24
   114d8:	d1 f3       	breq	.-12     	; 0x114ce <gpib_write_str+0x66>
			{
				gpib_rx_init(1);
   114da:	81 e0       	ldi	r24, 0x01	; 1
   114dc:	19 da       	rcall	.-3022   	; 0x10910 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   114de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114e2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114e6:	85 70       	andi	r24, 0x05	; 5
   114e8:	99 27       	eor	r25, r25
   114ea:	89 2b       	or	r24, r25
   114ec:	d9 f0       	breq	.+54     	; 0x11524 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   114ee:	8b e0       	ldi	r24, 0x0B	; 11
   114f0:	9f e0       	ldi	r25, 0x0F	; 15
   114f2:	10 c0       	rjmp	.+32     	; 0x11514 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   114f4:	19 99       	sbic	0x03, 1	; 3
   114f6:	1f c0       	rjmp	.+62     	; 0x11536 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   114f8:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   114fc:	88 23       	and	r24, r24
   114fe:	d1 f3       	breq	.-12     	; 0x114f4 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11500:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11504:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11508:	85 70       	andi	r24, 0x05	; 5
   1150a:	99 27       	eor	r25, r25
   1150c:	89 2b       	or	r24, r25
   1150e:	51 f0       	breq	.+20     	; 0x11524 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   11510:	81 ef       	ldi	r24, 0xF1	; 241
   11512:	9e e0       	ldi	r25, 0x0E	; 14
   11514:	a0 e0       	ldi	r26, 0x00	; 0
   11516:	ed b7       	in	r30, 0x3d	; 61
   11518:	fe b7       	in	r31, 0x3e	; 62
   1151a:	81 83       	std	Z+1, r24	; 0x01
   1151c:	92 83       	std	Z+2, r25	; 0x02
   1151e:	a3 83       	std	Z+3, r26	; 0x03
   11520:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   11524:	f8 01       	movw	r30, r16
   11526:	80 81       	ld	r24, Z
   11528:	91 81       	ldd	r25, Z+1	; 0x01
   1152a:	90 6c       	ori	r25, 0xC0	; 192
   1152c:	91 83       	std	Z+1, r25	; 0x01
   1152e:	80 83       	st	Z, r24
			return(ind);
   11530:	c0 e0       	ldi	r28, 0x00	; 0
   11532:	d0 e0       	ldi	r29, 0x00	; 0
   11534:	45 c0       	rjmp	.+138    	; 0x115c0 <gpib_write_str+0x158>
   11536:	cd 2e       	mov	r12, r29
   11538:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1153a:	c0 e0       	ldi	r28, 0x00	; 0
   1153c:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   1153e:	ce 15       	cp	r28, r14
   11540:	df 05       	cpc	r29, r15
   11542:	1c f5       	brge	.+70     	; 0x1158a <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11544:	21 96       	adiw	r28, 0x01	; 1
   11546:	f6 01       	movw	r30, r12
   11548:	81 91       	ld	r24, Z+
   1154a:	6f 01       	movw	r12, r30
   1154c:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   1154e:	f8 01       	movw	r30, r16
   11550:	20 81       	ld	r18, Z
   11552:	31 81       	ldd	r19, Z+1	; 0x01
   11554:	30 ff       	sbrs	r19, 0
   11556:	04 c0       	rjmp	.+8      	; 0x11560 <gpib_write_str+0xf8>
   11558:	ec 16       	cp	r14, r28
   1155a:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   1155c:	09 f4       	brne	.+2      	; 0x11560 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   1155e:	91 60       	ori	r25, 0x01	; 1
   11560:	ec da       	rcall	.-2600   	; 0x10b3a <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11562:	5c 01       	movw	r10, r24
   11564:	aa 24       	eor	r10, r10
   11566:	f0 ed       	ldi	r31, 0xD0	; 208
   11568:	bf 22       	and	r11, r31
   1156a:	f8 01       	movw	r30, r16
   1156c:	20 81       	ld	r18, Z
   1156e:	31 81       	ldd	r19, Z+1	; 0x01
   11570:	2a 29       	or	r18, r10
   11572:	3b 29       	or	r19, r11
   11574:	31 83       	std	Z+1, r19	; 0x01
   11576:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11578:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1157c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11580:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11582:	cc de       	rcall	.-616    	; 0x1131c <gpib_decode>
   11584:	a1 14       	cp	r10, r1
   11586:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11588:	d1 f2       	breq	.-76     	; 0x1153e <gpib_write_str+0xd6>
   1158a:	81 e0       	ldi	r24, 0x01	; 1
   1158c:	c1 d9       	rcall	.-3198   	; 0x10910 <gpib_rx_init>

    if ( ind != size )
   1158e:	ce 15       	cp	r28, r14
   11590:	df 05       	cpc	r29, r15
   11592:	b1 f0       	breq	.+44     	; 0x115c0 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11594:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11598:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1159c:	81 72       	andi	r24, 0x21	; 33
   1159e:	91 70       	andi	r25, 0x01	; 1
   115a0:	89 2b       	or	r24, r25
   115a2:	71 f0       	breq	.+28     	; 0x115c0 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   115a4:	ed b7       	in	r30, 0x3d	; 61
   115a6:	fe b7       	in	r31, 0x3e	; 62
   115a8:	f7 82       	std	Z+7, r15	; 0x07
   115aa:	e6 82       	std	Z+6, r14	; 0x06
   115ac:	d5 83       	std	Z+5, r29	; 0x05
   115ae:	c4 83       	std	Z+4, r28	; 0x04
   115b0:	89 ec       	ldi	r24, 0xC9	; 201
   115b2:	9e e0       	ldi	r25, 0x0E	; 14
   115b4:	a0 e0       	ldi	r26, 0x00	; 0
   115b6:	81 83       	std	Z+1, r24	; 0x01
   115b8:	92 83       	std	Z+2, r25	; 0x02
   115ba:	a3 83       	std	Z+3, r26	; 0x03
   115bc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }
    return(ind);
}
   115c0:	ce 01       	movw	r24, r28
   115c2:	cd b7       	in	r28, 0x3d	; 61
   115c4:	de b7       	in	r29, 0x3e	; 62
   115c6:	27 96       	adiw	r28, 0x07	; 7
   115c8:	ea e0       	ldi	r30, 0x0A	; 10
   115ca:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

000115ce <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   115ce:	ad b7       	in	r26, 0x3d	; 61
   115d0:	be b7       	in	r27, 0x3e	; 62
   115d2:	17 97       	sbiw	r26, 0x07	; 7
   115d4:	0f b6       	in	r0, 0x3f	; 63
   115d6:	f8 94       	cli
   115d8:	be bf       	out	0x3e, r27	; 62
   115da:	0f be       	out	0x3f, r0	; 63
   115dc:	ad bf       	out	0x3d, r26	; 61
   115de:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   115e2:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   115e6:	88 eb       	ldi	r24, 0xB8	; 184
   115e8:	91 e0       	ldi	r25, 0x01	; 1
   115ea:	0e 94 f1 99 	call	0x133e2	; 0x133e2 <Read_Config>
   115ee:	18 16       	cp	r1, r24
   115f0:	19 06       	cpc	r1, r25
   115f2:	8c f4       	brge	.+34     	; 0x11616 <gpib_file_init+0x48>
   115f4:	ed b7       	in	r30, 0x3d	; 61
   115f6:	fe b7       	in	r31, 0x3e	; 62
   115f8:	97 83       	std	Z+7, r25	; 0x07
   115fa:	86 83       	std	Z+6, r24	; 0x06
   115fc:	88 eb       	ldi	r24, 0xB8	; 184
   115fe:	91 e0       	ldi	r25, 0x01	; 1
   11600:	95 83       	std	Z+5, r25	; 0x05
   11602:	84 83       	std	Z+4, r24	; 0x04
   11604:	86 ed       	ldi	r24, 0xD6	; 214
   11606:	94 e1       	ldi	r25, 0x14	; 20
   11608:	a0 e0       	ldi	r26, 0x00	; 0
   1160a:	81 83       	std	Z+1, r24	; 0x01
   1160c:	92 83       	std	Z+2, r25	; 0x02
   1160e:	a3 83       	std	Z+3, r26	; 0x03
   11610:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11614:	10 c0       	rjmp	.+32     	; 0x11636 <gpib_file_init+0x68>
   11616:	89 2b       	or	r24, r25
   11618:	71 f0       	breq	.+28     	; 0x11636 <gpib_file_init+0x68>
   1161a:	88 eb       	ldi	r24, 0xB8	; 184
   1161c:	91 e0       	ldi	r25, 0x01	; 1
   1161e:	ed b7       	in	r30, 0x3d	; 61
   11620:	fe b7       	in	r31, 0x3e	; 62
   11622:	95 83       	std	Z+5, r25	; 0x05
   11624:	84 83       	std	Z+4, r24	; 0x04
   11626:	85 ec       	ldi	r24, 0xC5	; 197
   11628:	94 e1       	ldi	r25, 0x14	; 20
   1162a:	a0 e0       	ldi	r26, 0x00	; 0
   1162c:	81 83       	std	Z+1, r24	; 0x01
   1162e:	92 83       	std	Z+2, r25	; 0x02
   11630:	a3 83       	std	Z+3, r26	; 0x03
   11632:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11636:	0e 94 bc 98 	call	0x13178	; 0x13178 <set_Config_Defaults>
   1163a:	0e 94 bd 6e 	call	0xdd7a	; 0xdd7a <mmc_wp_status>
   1163e:	89 2b       	or	r24, r25
   11640:	51 f0       	breq	.+20     	; 0x11656 <gpib_file_init+0x88>
   11642:	8c ea       	ldi	r24, 0xAC	; 172
   11644:	94 e1       	ldi	r25, 0x14	; 20
   11646:	a0 e0       	ldi	r26, 0x00	; 0
   11648:	ed b7       	in	r30, 0x3d	; 61
   1164a:	fe b7       	in	r31, 0x3e	; 62
   1164c:	81 83       	std	Z+1, r24	; 0x01
   1164e:	92 83       	std	Z+2, r25	; 0x02
   11650:	a3 83       	std	Z+3, r26	; 0x03
   11652:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11656:	ad b7       	in	r26, 0x3d	; 61
   11658:	be b7       	in	r27, 0x3e	; 62
   1165a:	17 96       	adiw	r26, 0x07	; 7
   1165c:	0f b6       	in	r0, 0x3f	; 63
   1165e:	f8 94       	cli
   11660:	be bf       	out	0x3e, r27	; 62
   11662:	0f be       	out	0x3f, r0	; 63
   11664:	ad bf       	out	0x3d, r26	; 61
   11666:	08 95       	ret

00011668 <SS80_is_MLA>:
   11668:	40 e2       	ldi	r20, 0x20	; 32
   1166a:	50 e0       	ldi	r21, 0x00	; 0
   1166c:	bc 01       	movw	r22, r24
   1166e:	83 e0       	ldi	r24, 0x03	; 3
   11670:	90 e0       	ldi	r25, 0x00	; 0
   11672:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   11676:	8f 3f       	cpi	r24, 0xFF	; 255
   11678:	2f ef       	ldi	r18, 0xFF	; 255
   1167a:	92 07       	cpc	r25, r18
   1167c:	19 f0       	breq	.+6      	; 0x11684 <SS80_is_MLA+0x1c>
   1167e:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   11682:	08 95       	ret
   11684:	80 e0       	ldi	r24, 0x00	; 0
   11686:	90 e0       	ldi	r25, 0x00	; 0
   11688:	08 95       	ret

0001168a <SS80_is_MTA>:
   1168a:	40 e4       	ldi	r20, 0x40	; 64
   1168c:	50 e0       	ldi	r21, 0x00	; 0
   1168e:	bc 01       	movw	r22, r24
   11690:	83 e0       	ldi	r24, 0x03	; 3
   11692:	90 e0       	ldi	r25, 0x00	; 0
   11694:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   11698:	8f 3f       	cpi	r24, 0xFF	; 255
   1169a:	2f ef       	ldi	r18, 0xFF	; 255
   1169c:	92 07       	cpc	r25, r18
   1169e:	19 f0       	breq	.+6      	; 0x116a6 <SS80_is_MTA+0x1c>
   116a0:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   116a4:	08 95       	ret
   116a6:	80 e0       	ldi	r24, 0x00	; 0
   116a8:	90 e0       	ldi	r25, 0x00	; 0
   116aa:	08 95       	ret

000116ac <SS80_is_MSA>:
   116ac:	40 e6       	ldi	r20, 0x60	; 96
   116ae:	50 e0       	ldi	r21, 0x00	; 0
   116b0:	bc 01       	movw	r22, r24
   116b2:	83 e0       	ldi	r24, 0x03	; 3
   116b4:	90 e0       	ldi	r25, 0x00	; 0
   116b6:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   116ba:	8f 3f       	cpi	r24, 0xFF	; 255
   116bc:	2f ef       	ldi	r18, 0xFF	; 255
   116be:	92 07       	cpc	r25, r18
   116c0:	19 f0       	breq	.+6      	; 0x116c8 <SS80_is_MSA+0x1c>
   116c2:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   116c6:	08 95       	ret
   116c8:	80 e0       	ldi	r24, 0x00	; 0
   116ca:	90 e0       	ldi	r25, 0x00	; 0
   116cc:	08 95       	ret

000116ce <AMIGO_is_MLA>:
   116ce:	40 e2       	ldi	r20, 0x20	; 32
   116d0:	50 e0       	ldi	r21, 0x00	; 0
   116d2:	bc 01       	movw	r22, r24
   116d4:	81 e0       	ldi	r24, 0x01	; 1
   116d6:	90 e0       	ldi	r25, 0x00	; 0
   116d8:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   116dc:	8f 3f       	cpi	r24, 0xFF	; 255
   116de:	2f ef       	ldi	r18, 0xFF	; 255
   116e0:	92 07       	cpc	r25, r18
   116e2:	19 f0       	breq	.+6      	; 0x116ea <AMIGO_is_MLA+0x1c>
   116e4:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   116e8:	08 95       	ret
   116ea:	80 e0       	ldi	r24, 0x00	; 0
   116ec:	90 e0       	ldi	r25, 0x00	; 0
   116ee:	08 95       	ret

000116f0 <AMIGO_is_MTA>:
   116f0:	40 e4       	ldi	r20, 0x40	; 64
   116f2:	50 e0       	ldi	r21, 0x00	; 0
   116f4:	bc 01       	movw	r22, r24
   116f6:	81 e0       	ldi	r24, 0x01	; 1
   116f8:	90 e0       	ldi	r25, 0x00	; 0
   116fa:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   116fe:	8f 3f       	cpi	r24, 0xFF	; 255
   11700:	2f ef       	ldi	r18, 0xFF	; 255
   11702:	92 07       	cpc	r25, r18
   11704:	19 f0       	breq	.+6      	; 0x1170c <AMIGO_is_MTA+0x1c>
   11706:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   1170a:	08 95       	ret
   1170c:	80 e0       	ldi	r24, 0x00	; 0
   1170e:	90 e0       	ldi	r25, 0x00	; 0
   11710:	08 95       	ret

00011712 <AMIGO_is_MSA>:
   11712:	40 e6       	ldi	r20, 0x60	; 96
   11714:	50 e0       	ldi	r21, 0x00	; 0
   11716:	bc 01       	movw	r22, r24
   11718:	81 e0       	ldi	r24, 0x01	; 1
   1171a:	90 e0       	ldi	r25, 0x00	; 0
   1171c:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   11720:	8f 3f       	cpi	r24, 0xFF	; 255
   11722:	2f ef       	ldi	r18, 0xFF	; 255
   11724:	92 07       	cpc	r25, r18
   11726:	19 f0       	breq	.+6      	; 0x1172e <AMIGO_is_MSA+0x1c>
   11728:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   1172c:	08 95       	ret
   1172e:	80 e0       	ldi	r24, 0x00	; 0
   11730:	90 e0       	ldi	r25, 0x00	; 0
   11732:	08 95       	ret

00011734 <PRINTER_is_MLA>:
   11734:	40 e2       	ldi	r20, 0x20	; 32
   11736:	50 e0       	ldi	r21, 0x00	; 0
   11738:	bc 01       	movw	r22, r24
   1173a:	84 e0       	ldi	r24, 0x04	; 4
   1173c:	90 e0       	ldi	r25, 0x00	; 0
   1173e:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   11742:	8f 3f       	cpi	r24, 0xFF	; 255
   11744:	2f ef       	ldi	r18, 0xFF	; 255
   11746:	92 07       	cpc	r25, r18
   11748:	19 f0       	breq	.+6      	; 0x11750 <PRINTER_is_MLA+0x1c>
   1174a:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   1174e:	08 95       	ret
   11750:	80 e0       	ldi	r24, 0x00	; 0
   11752:	90 e0       	ldi	r25, 0x00	; 0
   11754:	08 95       	ret

00011756 <PRINTER_is_MTA>:
   11756:	40 e4       	ldi	r20, 0x40	; 64
   11758:	50 e0       	ldi	r21, 0x00	; 0
   1175a:	bc 01       	movw	r22, r24
   1175c:	84 e0       	ldi	r24, 0x04	; 4
   1175e:	90 e0       	ldi	r25, 0x00	; 0
   11760:	0e 94 22 96 	call	0x12c44	; 0x12c44 <find_device>
   11764:	8f 3f       	cpi	r24, 0xFF	; 255
   11766:	2f ef       	ldi	r18, 0xFF	; 255
   11768:	92 07       	cpc	r25, r18
   1176a:	19 f0       	breq	.+6      	; 0x11772 <PRINTER_is_MTA+0x1c>
   1176c:	0c 94 4c 96 	jmp	0x12c98	; 0x12c98 <set_active_device>
   11770:	08 95       	ret
   11772:	80 e0       	ldi	r24, 0x00	; 0
   11774:	90 e0       	ldi	r25, 0x00	; 0
   11776:	08 95       	ret

00011778 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11778:	93 d8       	rcall	.-3802   	; 0x108a0 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   1177a:	fa d8       	rcall	.-3596   	; 0x10970 <gpib_state_init>
   1177c:	0e 94 91 aa 	call	0x15522	; 0x15522 <SS80_init>

    SS80_init();                                  // SS80 state init
   11780:	0e 94 20 b0 	call	0x16040	; 0x16040 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11784:	0c 94 51 bb 	jmp	0x176a2	; 0x176a2 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11788:	08 95       	ret

0001178a <gpib_trace_task>:
   1178a:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   1178c:	1f 93       	push	r17
   1178e:	cf 93       	push	r28
   11790:	df 93       	push	r29
   11792:	00 d0       	rcall	.+0      	; 0x11794 <gpib_trace_task+0xa>
   11794:	00 d0       	rcall	.+0      	; 0x11796 <gpib_trace_task+0xc>
   11796:	1f 92       	push	r1
   11798:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   1179a:	00 97       	sbiw	r24, 0x00	; 0
   1179c:	09 f4       	brne	.+2      	; 0x117a0 <gpib_trace_task+0x16>
   1179e:	44 c0       	rjmp	.+136    	; 0x11828 <gpib_trace_task+0x9e>
   117a0:	fc 01       	movw	r30, r24
   117a2:	20 81       	ld	r18, Z
   117a4:	22 23       	and	r18, r18
   117a6:	09 f4       	brne	.+2      	; 0x117aa <gpib_trace_task+0x20>
   117a8:	3f c0       	rjmp	.+126    	; 0x11828 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   117aa:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <skipspaces>
   117ae:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   117b0:	ed b7       	in	r30, 0x3d	; 61
   117b2:	fe b7       	in	r31, 0x3e	; 62
   117b4:	95 83       	std	Z+5, r25	; 0x05
   117b6:	84 83       	std	Z+4, r24	; 0x04
   117b8:	82 e9       	ldi	r24, 0x92	; 146
   117ba:	94 e1       	ldi	r25, 0x14	; 20
   117bc:	a0 e0       	ldi	r26, 0x00	; 0
   117be:	81 83       	std	Z+1, r24	; 0x01
   117c0:	92 83       	std	Z+2, r25	; 0x02
   117c2:	a3 83       	std	Z+3, r26	; 0x03
   117c4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        if(detail)
   117c8:	20 97       	sbiw	r28, 0x00	; 0
   117ca:	51 f0       	breq	.+20     	; 0x117e0 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   117cc:	87 e6       	ldi	r24, 0x67	; 103
   117ce:	94 e1       	ldi	r25, 0x14	; 20
   117d0:	a0 e0       	ldi	r26, 0x00	; 0
   117d2:	ed b7       	in	r30, 0x3d	; 61
   117d4:	fe b7       	in	r31, 0x3e	; 62
   117d6:	81 83       	std	Z+1, r24	; 0x01
   117d8:	92 83       	std	Z+2, r25	; 0x02
   117da:	a3 83       	std	Z+3, r26	; 0x03
   117dc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printf("Press ANY key to exit\n");
   117e0:	80 e5       	ldi	r24, 0x50	; 80
   117e2:	94 e1       	ldi	r25, 0x14	; 20
   117e4:	a0 e0       	ldi	r26, 0x00	; 0
   117e6:	ed b7       	in	r30, 0x3d	; 61
   117e8:	fe b7       	in	r31, 0x3e	; 62
   117ea:	81 83       	std	Z+1, r24	; 0x01
   117ec:	92 83       	std	Z+2, r25	; 0x02
   117ee:	a3 83       	std	Z+3, r26	; 0x03
   117f0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

        gpib_log_fp = fopen(name,"wb");
   117f4:	6c e0       	ldi	r22, 0x0C	; 12
   117f6:	79 e0       	ldi	r23, 0x09	; 9
   117f8:	c8 01       	movw	r24, r16
   117fa:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fopen>
   117fe:	90 93 58 19 	sts	0x1958, r25	; 0x801958 <gpib_log_fp+0x1>
   11802:	80 93 57 19 	sts	0x1957, r24	; 0x801957 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11806:	89 2b       	or	r24, r25
   11808:	b9 f4       	brne	.+46     	; 0x11838 <gpib_trace_task+0xae>
        {
            perror("open failed");
   1180a:	87 ea       	ldi	r24, 0xA7	; 167
   1180c:	9d e0       	ldi	r25, 0x0D	; 13
   1180e:	0e 94 22 77 	call	0xee44	; 0xee44 <perror>
            printf("exiting...\n");
   11812:	84 e4       	ldi	r24, 0x44	; 68
   11814:	94 e1       	ldi	r25, 0x14	; 20
   11816:	a0 e0       	ldi	r26, 0x00	; 0
   11818:	ed b7       	in	r30, 0x3d	; 61
   1181a:	fe b7       	in	r31, 0x3e	; 62
   1181c:	81 83       	std	Z+1, r24	; 0x01
   1181e:	92 83       	std	Z+2, r25	; 0x02
   11820:	a3 83       	std	Z+3, r26	; 0x03
   11822:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            return;
   11826:	3d c0       	rjmp	.+122    	; 0x118a2 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11828:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   1182c:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   11830:	90 93 58 19 	sts	0x1958, r25	; 0x801958 <gpib_log_fp+0x1>
   11834:	80 93 57 19 	sts	0x1957, r24	; 0x801957 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11838:	9f df       	rcall	.-194    	; 0x11778 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   1183a:	80 91 57 19 	lds	r24, 0x1957	; 0x801957 <gpib_log_fp>
   1183e:	90 91 58 19 	lds	r25, 0x1958	; 0x801958 <gpib_log_fp+0x1>
   11842:	c0 da       	rcall	.-2688   	; 0x10dc4 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11844:	80 e0       	ldi	r24, 0x00	; 0
   11846:	0e 94 12 28 	call	0x5024	; 0x5024 <uart_keyhit>
   1184a:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   1184c:	31 f4       	brne	.+12     	; 0x1185a <gpib_trace_task+0xd0>
   1184e:	ce 01       	movw	r24, r28
        if(!detail)
   11850:	4d dc       	rcall	.-1894   	; 0x110ec <gpib_read_byte>
   11852:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11854:	b9 f7       	brne	.-18     	; 0x11844 <gpib_trace_task+0xba>
   11856:	62 dd       	rcall	.-1340   	; 0x1131c <gpib_decode>
   11858:	f5 cf       	rjmp	.-22     	; 0x11844 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   1185a:	8e e3       	ldi	r24, 0x3E	; 62
   1185c:	94 e1       	ldi	r25, 0x14	; 20
   1185e:	a0 e0       	ldi	r26, 0x00	; 0
   11860:	ed b7       	in	r30, 0x3d	; 61
   11862:	fe b7       	in	r31, 0x3e	; 62
   11864:	81 83       	std	Z+1, r24	; 0x01
   11866:	92 83       	std	Z+2, r25	; 0x02
   11868:	a3 83       	std	Z+3, r26	; 0x03
   1186a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    if(gpib_log_fp)
   1186e:	80 91 57 19 	lds	r24, 0x1957	; 0x801957 <gpib_log_fp>
   11872:	90 91 58 19 	lds	r25, 0x1958	; 0x801958 <gpib_log_fp+0x1>
   11876:	00 97       	sbiw	r24, 0x00	; 0
   11878:	a1 f0       	breq	.+40     	; 0x118a2 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   1187a:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>
        printf("Capturing Closed\n");
   1187e:	8c e2       	ldi	r24, 0x2C	; 44
   11880:	94 e1       	ldi	r25, 0x14	; 20
   11882:	a0 e0       	ldi	r26, 0x00	; 0
   11884:	ed b7       	in	r30, 0x3d	; 61
   11886:	fe b7       	in	r31, 0x3e	; 62
   11888:	81 83       	std	Z+1, r24	; 0x01
   1188a:	92 83       	std	Z+2, r25	; 0x02
   1188c:	a3 83       	std	Z+3, r26	; 0x03
   1188e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        gpib_log_fp = stdout;
   11892:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   11896:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   1189a:	90 93 58 19 	sts	0x1958, r25	; 0x801958 <gpib_log_fp+0x1>
   1189e:	80 93 57 19 	sts	0x1957, r24	; 0x801957 <gpib_log_fp>
    }
}
   118a2:	cd b7       	in	r28, 0x3d	; 61
   118a4:	de b7       	in	r29, 0x3e	; 62
   118a6:	25 96       	adiw	r28, 0x05	; 5
   118a8:	e4 e0       	ldi	r30, 0x04	; 4
   118aa:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

000118ae <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   118ae:	ef 92       	push	r14
   118b0:	ff 92       	push	r15
   118b2:	0f 93       	push	r16
   118b4:	1f 93       	push	r17
   118b6:	cf 93       	push	r28
   118b8:	df 93       	push	r29
   118ba:	00 d0       	rcall	.+0      	; 0x118bc <gpib_error_test+0xe>
   118bc:	1f 92       	push	r1
   118be:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   118c0:	ec 01       	movw	r28, r24
   118c2:	cc 27       	eor	r28, r28
   118c4:	d0 7d       	andi	r29, 0xD0	; 208
   118c6:	20 97       	sbiw	r28, 0x00	; 0
   118c8:	61 f0       	breq	.+24     	; 0x118e2 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   118ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   118ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   118d2:	8d 72       	andi	r24, 0x2D	; 45
   118d4:	99 27       	eor	r25, r25
   118d6:	87 01       	movw	r16, r14
   118d8:	00 27       	eor	r16, r16
   118da:	10 71       	andi	r17, 0x10	; 16
   118dc:	89 2b       	or	r24, r25
   118de:	59 f4       	brne	.+22     	; 0x118f6 <gpib_error_test+0x48>
   118e0:	17 c0       	rjmp	.+46     	; 0x11910 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   118e2:	80 e0       	ldi	r24, 0x00	; 0
   118e4:	0e 94 12 28 	call	0x5024	; 0x5024 <uart_keyhit>
   118e8:	89 2b       	or	r24, r25
   118ea:	79 f7       	brne	.-34     	; 0x118ca <gpib_error_test+0x1c>
   118ec:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <mmc_ins_status>
   118f0:	01 97       	sbiw	r24, 0x01	; 1
   118f2:	59 f7       	brne	.-42     	; 0x118ca <gpib_error_test+0x1c>
   118f4:	62 c0       	rjmp	.+196    	; 0x119ba <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   118f6:	01 15       	cp	r16, r1
   118f8:	11 05       	cpc	r17, r1
   118fa:	51 f0       	breq	.+20     	; 0x11910 <gpib_error_test+0x62>
                printf("<IFC>\n");
   118fc:	85 e2       	ldi	r24, 0x25	; 37
   118fe:	94 e1       	ldi	r25, 0x14	; 20
   11900:	a0 e0       	ldi	r26, 0x00	; 0
   11902:	ed b7       	in	r30, 0x3d	; 61
   11904:	fe b7       	in	r31, 0x3e	; 62
   11906:	81 83       	std	Z+1, r24	; 0x01
   11908:	92 83       	std	Z+2, r25	; 0x02
   1190a:	a3 83       	std	Z+3, r26	; 0x03
   1190c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11910:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11914:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11918:	8d 72       	andi	r24, 0x2D	; 45
   1191a:	99 27       	eor	r25, r25
   1191c:	89 2b       	or	r24, r25
   1191e:	c1 f0       	breq	.+48     	; 0x11950 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11920:	f6 fe       	sbrs	r15, 6
   11922:	0a c0       	rjmp	.+20     	; 0x11938 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11924:	8a e1       	ldi	r24, 0x1A	; 26
   11926:	94 e1       	ldi	r25, 0x14	; 20
   11928:	a0 e0       	ldi	r26, 0x00	; 0
   1192a:	ed b7       	in	r30, 0x3d	; 61
   1192c:	fe b7       	in	r31, 0x3e	; 62
   1192e:	81 83       	std	Z+1, r24	; 0x01
   11930:	92 83       	std	Z+2, r25	; 0x02
   11932:	a3 83       	std	Z+3, r26	; 0x03
   11934:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            if(val & BUS_ERROR_FLAG)
   11938:	d7 ff       	sbrs	r29, 7
   1193a:	0a c0       	rjmp	.+20     	; 0x11950 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   1193c:	83 e1       	ldi	r24, 0x13	; 19
   1193e:	94 e1       	ldi	r25, 0x14	; 20
   11940:	a0 e0       	ldi	r26, 0x00	; 0
   11942:	ed b7       	in	r30, 0x3d	; 61
   11944:	fe b7       	in	r31, 0x3e	; 62
   11946:	81 83       	std	Z+1, r24	; 0x01
   11948:	92 83       	std	Z+2, r25	; 0x02
   1194a:	a3 83       	std	Z+3, r26	; 0x03
   1194c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        }

        if(uart_keyhit(0))
   11950:	80 e0       	ldi	r24, 0x00	; 0
   11952:	0e 94 12 28 	call	0x5024	; 0x5024 <uart_keyhit>
   11956:	89 2b       	or	r24, r25
   11958:	51 f0       	breq	.+20     	; 0x1196e <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   1195a:	86 e0       	ldi	r24, 0x06	; 6
   1195c:	94 e1       	ldi	r25, 0x14	; 20
   1195e:	a0 e0       	ldi	r26, 0x00	; 0
   11960:	ed b7       	in	r30, 0x3d	; 61
   11962:	fe b7       	in	r31, 0x3e	; 62
   11964:	81 83       	std	Z+1, r24	; 0x01
   11966:	92 83       	std	Z+2, r25	; 0x02
   11968:	a3 83       	std	Z+3, r26	; 0x03
   1196a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

        if( mmc_ins_status() != 1 )
   1196e:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <mmc_ins_status>
   11972:	01 97       	sbiw	r24, 0x01	; 1
   11974:	51 f0       	breq	.+20     	; 0x1198a <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11976:	85 ef       	ldi	r24, 0xF5	; 245
   11978:	93 e1       	ldi	r25, 0x13	; 19
   1197a:	a0 e0       	ldi	r26, 0x00	; 0
   1197c:	ed b7       	in	r30, 0x3d	; 61
   1197e:	fe b7       	in	r31, 0x3e	; 62
   11980:	81 83       	std	Z+1, r24	; 0x01
   11982:	92 83       	std	Z+2, r25	; 0x02
   11984:	a3 83       	std	Z+3, r26	; 0x03
   11986:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

        if(val & IFC_FLAG)
   1198a:	01 15       	cp	r16, r1
   1198c:	11 05       	cpc	r17, r1
   1198e:	09 f0       	breq	.+2      	; 0x11992 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11990:	f3 de       	rcall	.-538    	; 0x11778 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11992:	80 e0       	ldi	r24, 0x00	; 0
   11994:	0e 94 12 28 	call	0x5024	; 0x5024 <uart_keyhit>
   11998:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   1199a:	11 f0       	breq	.+4      	; 0x119a0 <gpib_error_test+0xf2>
   1199c:	ed de       	rcall	.-550    	; 0x11778 <gpib_init_devices>
   1199e:	0b c0       	rjmp	.+22     	; 0x119b6 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   119a0:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <mmc_ins_status>
   119a4:	01 97       	sbiw	r24, 0x01	; 1
   119a6:	39 f4       	brne	.+14     	; 0x119b6 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   119a8:	01 15       	cp	r16, r1
   119aa:	11 05       	cpc	r17, r1
   119ac:	31 f0       	breq	.+12     	; 0x119ba <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   119ae:	54 98       	cbi	0x0a, 4	; 10
   119b0:	4c 9b       	sbis	0x09, 4	; 9
   119b2:	fd cf       	rjmp	.-6      	; 0x119ae <gpib_error_test+0x100>
   119b4:	02 c0       	rjmp	.+4      	; 0x119ba <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   119b6:	c1 e0       	ldi	r28, 0x01	; 1
   119b8:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   119ba:	ce 01       	movw	r24, r28
   119bc:	cd b7       	in	r28, 0x3d	; 61
   119be:	de b7       	in	r29, 0x3e	; 62
   119c0:	23 96       	adiw	r28, 0x03	; 3
   119c2:	e6 e0       	ldi	r30, 0x06	; 6
   119c4:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

000119c8 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   119c8:	1f 93       	push	r17
   119ca:	cf 93       	push	r28
   119cc:	df 93       	push	r29
   119ce:	ec 01       	movw	r28, r24
   119d0:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   119d2:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   119d6:	8f 35       	cpi	r24, 0x5F	; 95
   119d8:	91 f0       	breq	.+36     	; 0x119fe <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   119da:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   119de:	90 e0       	ldi	r25, 0x00	; 0
   119e0:	76 de       	rcall	.-788    	; 0x116ce <AMIGO_is_MLA>
   119e2:	89 2b       	or	r24, r25
   119e4:	c9 f4       	brne	.+50     	; 0x11a18 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   119e6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   119ea:	90 e0       	ldi	r25, 0x00	; 0
   119ec:	3d de       	rcall	.-902    	; 0x11668 <SS80_is_MLA>
   119ee:	89 2b       	or	r24, r25
   119f0:	11 f5       	brne	.+68     	; 0x11a36 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   119f2:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   119f6:	90 e0       	ldi	r25, 0x00	; 0
   119f8:	9d de       	rcall	.-710    	; 0x11734 <PRINTER_is_MLA>
   119fa:	89 2b       	or	r24, r25
   119fc:	59 f5       	brne	.+86     	; 0x11a54 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   119fe:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11a02:	8f 33       	cpi	r24, 0x3F	; 63
   11a04:	19 f4       	brne	.+6      	; 0x11a0c <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11a06:	80 e0       	ldi	r24, 0x00	; 0
   11a08:	90 e0       	ldi	r25, 0x00	; 0
   11a0a:	2e c0       	rjmp	.+92     	; 0x11a68 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11a0c:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11a10:	90 e0       	ldi	r25, 0x00	; 0
   11a12:	6e de       	rcall	.-804    	; 0x116f0 <AMIGO_is_MTA>
   11a14:	89 2b       	or	r24, r25
   11a16:	49 f0       	breq	.+18     	; 0x11a2a <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11a18:	11 23       	and	r17, r17
   11a1a:	11 f0       	breq	.+4      	; 0x11a20 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11a1c:	ce 01       	movw	r24, r28
   11a1e:	41 d8       	rcall	.-3966   	; 0x10aa2 <gpib_unread>
   11a20:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11a24:	0e 94 4c ba 	call	0x17498	; 0x17498 <AMIGO_COMMANDS>
   11a28:	1d c0       	rjmp	.+58     	; 0x11a64 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11a2a:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11a2e:	90 e0       	ldi	r25, 0x00	; 0
   11a30:	2c de       	rcall	.-936    	; 0x1168a <SS80_is_MTA>
   11a32:	89 2b       	or	r24, r25
   11a34:	49 f0       	breq	.+18     	; 0x11a48 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11a36:	11 23       	and	r17, r17
   11a38:	11 f0       	breq	.+4      	; 0x11a3e <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11a3a:	ce 01       	movw	r24, r28
   11a3c:	32 d8       	rcall	.-3996   	; 0x10aa2 <gpib_unread>
   11a3e:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = SS80_COMMANDS(secondary);
   11a42:	0e 94 6c ae 	call	0x15cd8	; 0x15cd8 <SS80_COMMANDS>
   11a46:	0e c0       	rjmp	.+28     	; 0x11a64 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11a48:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11a4c:	90 e0       	ldi	r25, 0x00	; 0
   11a4e:	83 de       	rcall	.-762    	; 0x11756 <PRINTER_is_MTA>
   11a50:	89 2b       	or	r24, r25
   11a52:	c9 f2       	breq	.-78     	; 0x11a06 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11a54:	11 23       	and	r17, r17
   11a56:	11 f0       	breq	.+4      	; 0x11a5c <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11a58:	ce 01       	movw	r24, r28
   11a5a:	23 d8       	rcall	.-4026   	; 0x10aa2 <gpib_unread>
   11a5c:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11a60:	0e 94 c5 bc 	call	0x1798a	; 0x1798a <PRINTER_COMMANDS>
   11a64:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
            secondary = 0;
   11a68:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11a6a:	cf 91       	pop	r28
   11a6c:	1f 91       	pop	r17
   11a6e:	08 95       	ret

00011a70 <Send_Identify>:
   11a70:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11a72:	df 92       	push	r13
   11a74:	ff 92       	push	r15
   11a76:	0f 93       	push	r16
   11a78:	1f 93       	push	r17
   11a7a:	cf 93       	push	r28
   11a7c:	df 93       	push	r29
   11a7e:	cd b7       	in	r28, 0x3d	; 61
   11a80:	de b7       	in	r29, 0x3e	; 62
   11a82:	2b 97       	sbiw	r28, 0x0b	; 11
   11a84:	0f b6       	in	r0, 0x3f	; 63
   11a86:	f8 94       	cli
   11a88:	de bf       	out	0x3e, r29	; 62
   11a8a:	0f be       	out	0x3f, r0	; 63
   11a8c:	cd bf       	out	0x3d, r28	; 61
   11a8e:	f8 2e       	mov	r15, r24
   11a90:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11a92:	80 e0       	ldi	r24, 0x00	; 0
   11a94:	91 e0       	ldi	r25, 0x01	; 1
   11a96:	9b 87       	std	Y+11, r25	; 0x0b
   11a98:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11a9a:	8b 01       	movw	r16, r22
   11a9c:	20 e0       	ldi	r18, 0x00	; 0
   11a9e:	30 e0       	ldi	r19, 0x00	; 0
   11aa0:	42 e0       	ldi	r20, 0x02	; 2
   11aa2:	50 e0       	ldi	r21, 0x00	; 0
   11aa4:	60 e0       	ldi	r22, 0x00	; 0
   11aa6:	70 e0       	ldi	r23, 0x00	; 0
   11aa8:	ce 01       	movw	r24, r28
   11aaa:	08 96       	adiw	r24, 0x08	; 8
   11aac:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11ab0:	ae 01       	movw	r20, r28
   11ab2:	46 5f       	subi	r20, 0xF6	; 246
   11ab4:	5f 4f       	sbci	r21, 0xFF	; 255
   11ab6:	62 e0       	ldi	r22, 0x02	; 2
   11ab8:	70 e0       	ldi	r23, 0x00	; 0
   11aba:	ce 01       	movw	r24, r28
   11abc:	08 96       	adiw	r24, 0x08	; 8
   11abe:	d4 dc       	rcall	.-1624   	; 0x11468 <gpib_write_str>
   11ac0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ac4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ac8:	02 97       	sbiw	r24, 0x02	; 2
   11aca:	79 f0       	breq	.+30     	; 0x11aea <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11acc:	25 72       	andi	r18, 0x25	; 37
   11ace:	33 27       	eor	r19, r19
   11ad0:	23 2b       	or	r18, r19
   11ad2:	f9 f0       	breq	.+62     	; 0x11b12 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11ad4:	ed b7       	in	r30, 0x3d	; 61
   11ad6:	fe b7       	in	r31, 0x3e	; 62
   11ad8:	d7 82       	std	Z+7, r13	; 0x07
   11ada:	c6 82       	std	Z+6, r12	; 0x06
   11adc:	8f 2d       	mov	r24, r15
   11ade:	90 e0       	ldi	r25, 0x00	; 0
   11ae0:	95 83       	std	Z+5, r25	; 0x05
   11ae2:	84 83       	std	Z+4, r24	; 0x04
   11ae4:	84 ed       	ldi	r24, 0xD4	; 212
   11ae6:	93 e1       	ldi	r25, 0x13	; 19
   11ae8:	0e c0       	rjmp	.+28     	; 0x11b06 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11aea:	24 72       	andi	r18, 0x24	; 36
   11aec:	33 27       	eor	r19, r19
   11aee:	23 2b       	or	r18, r19
   11af0:	81 f0       	breq	.+32     	; 0x11b12 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11af2:	ed b7       	in	r30, 0x3d	; 61
   11af4:	fe b7       	in	r31, 0x3e	; 62
   11af6:	d7 82       	std	Z+7, r13	; 0x07
   11af8:	c6 82       	std	Z+6, r12	; 0x06
   11afa:	8f 2d       	mov	r24, r15
   11afc:	90 e0       	ldi	r25, 0x00	; 0
   11afe:	95 83       	std	Z+5, r25	; 0x05
   11b00:	84 83       	std	Z+4, r24	; 0x04
   11b02:	8a eb       	ldi	r24, 0xBA	; 186
   11b04:	93 e1       	ldi	r25, 0x13	; 19
   11b06:	a0 e0       	ldi	r26, 0x00	; 0
   11b08:	81 83       	std	Z+1, r24	; 0x01
   11b0a:	92 83       	std	Z+2, r25	; 0x02
   11b0c:	a3 83       	std	Z+3, r26	; 0x03
   11b0e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
    return (status & ERROR_MASK);
   11b12:	8a 85       	ldd	r24, Y+10	; 0x0a
   11b14:	9b 85       	ldd	r25, Y+11	; 0x0b
   11b16:	88 27       	eor	r24, r24
   11b18:	90 7d       	andi	r25, 0xD0	; 208
}
   11b1a:	2b 96       	adiw	r28, 0x0b	; 11
   11b1c:	0f b6       	in	r0, 0x3f	; 63
   11b1e:	f8 94       	cli
   11b20:	de bf       	out	0x3e, r29	; 62
   11b22:	0f be       	out	0x3f, r0	; 63
   11b24:	cd bf       	out	0x3d, r28	; 61
   11b26:	df 91       	pop	r29
   11b28:	cf 91       	pop	r28
   11b2a:	1f 91       	pop	r17
   11b2c:	0f 91       	pop	r16
   11b2e:	ff 90       	pop	r15
   11b30:	df 90       	pop	r13
   11b32:	cf 90       	pop	r12
   11b34:	08 95       	ret

00011b36 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11b36:	00 d0       	rcall	.+0      	; 0x11b38 <GPIB+0x2>
   11b38:	00 d0       	rcall	.+0      	; 0x11b3a <GPIB+0x4>
   11b3a:	1f 92       	push	r1
   11b3c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11b40:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11b44:	85 30       	cpi	r24, 0x05	; 5
   11b46:	89 f4       	brne	.+34     	; 0x11b6a <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b48:	27 71       	andi	r18, 0x17	; 23
   11b4a:	33 27       	eor	r19, r19
   11b4c:	23 2b       	or	r18, r19
   11b4e:	51 f0       	breq	.+20     	; 0x11b64 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11b50:	82 ea       	ldi	r24, 0xA2	; 162
   11b52:	93 e1       	ldi	r25, 0x13	; 19
   11b54:	a0 e0       	ldi	r26, 0x00	; 0
   11b56:	ed b7       	in	r30, 0x3d	; 61
   11b58:	fe b7       	in	r31, 0x3e	; 62
   11b5a:	81 83       	std	Z+1, r24	; 0x01
   11b5c:	92 83       	std	Z+2, r25	; 0x02
   11b5e:	a3 83       	std	Z+3, r26	; 0x03
   11b60:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        spoll = 0;
   11b64:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <spoll>
   11b68:	a0 c0       	rjmp	.+320    	; 0x11caa <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11b6a:	85 31       	cpi	r24, 0x15	; 21
   11b6c:	39 f4       	brne	.+14     	; 0x11b7c <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b6e:	27 71       	andi	r18, 0x17	; 23
   11b70:	33 27       	eor	r19, r19
   11b72:	23 2b       	or	r18, r19
   11b74:	b9 f3       	breq	.-18     	; 0x11b64 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11b76:	8a e8       	ldi	r24, 0x8A	; 138
   11b78:	93 e1       	ldi	r25, 0x13	; 19
   11b7a:	ec cf       	rjmp	.-40     	; 0x11b54 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11b7c:	88 31       	cpi	r24, 0x18	; 24
   11b7e:	d9 f4       	brne	.+54     	; 0x11bb6 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11b80:	26 70       	andi	r18, 0x06	; 6
   11b82:	33 27       	eor	r19, r19
   11b84:	23 2b       	or	r18, r19
   11b86:	51 f0       	breq	.+20     	; 0x11b9c <GPIB+0x66>
            printf("[SPE]\n");
   11b88:	83 e8       	ldi	r24, 0x83	; 131
   11b8a:	93 e1       	ldi	r25, 0x13	; 19
   11b8c:	a0 e0       	ldi	r26, 0x00	; 0
   11b8e:	ed b7       	in	r30, 0x3d	; 61
   11b90:	fe b7       	in	r31, 0x3e	; 62
   11b92:	81 83       	std	Z+1, r24	; 0x01
   11b94:	92 83       	std	Z+2, r25	; 0x02
   11b96:	a3 83       	std	Z+3, r26	; 0x03
   11b98:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
        spoll = 1;
   11b9c:	81 e0       	ldi	r24, 0x01	; 1
   11b9e:	80 93 e1 1e 	sts	0x1EE1, r24	; 0x801ee1 <spoll>
        if(SS80_is_MTA(talking))
   11ba2:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11ba6:	90 e0       	ldi	r25, 0x00	; 0
   11ba8:	70 dd       	rcall	.-1312   	; 0x1168a <SS80_is_MTA>
   11baa:	89 2b       	or	r24, r25
   11bac:	09 f4       	brne	.+2      	; 0x11bb0 <GPIB+0x7a>
   11bae:	7d c0       	rjmp	.+250    	; 0x11caa <GPIB+0x174>
        {
            return( SS80_Report() );
   11bb0:	0e 94 25 aa 	call	0x1544a	; 0x1544a <SS80_Report>
   11bb4:	7c c0       	rjmp	.+248    	; 0x11cae <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11bb6:	89 31       	cpi	r24, 0x19	; 25
   11bb8:	39 f4       	brne	.+14     	; 0x11bc8 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11bba:	26 70       	andi	r18, 0x06	; 6
   11bbc:	33 27       	eor	r19, r19
   11bbe:	23 2b       	or	r18, r19
   11bc0:	89 f2       	breq	.-94     	; 0x11b64 <GPIB+0x2e>
            printf("[SPD]\n");
   11bc2:	8c e7       	ldi	r24, 0x7C	; 124
   11bc4:	93 e1       	ldi	r25, 0x13	; 19
   11bc6:	c6 cf       	rjmp	.-116    	; 0x11b54 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11bc8:	84 30       	cpi	r24, 0x04	; 4
   11bca:	09 f0       	breq	.+2      	; 0x11bce <GPIB+0x98>
   11bcc:	48 c0       	rjmp	.+144    	; 0x11c5e <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11bce:	22 ff       	sbrs	r18, 2
   11bd0:	0a c0       	rjmp	.+20     	; 0x11be6 <GPIB+0xb0>
            printf("[SDC]\n");
   11bd2:	85 e7       	ldi	r24, 0x75	; 117
   11bd4:	93 e1       	ldi	r25, 0x13	; 19
   11bd6:	a0 e0       	ldi	r26, 0x00	; 0
   11bd8:	ed b7       	in	r30, 0x3d	; 61
   11bda:	fe b7       	in	r31, 0x3e	; 62
   11bdc:	81 83       	std	Z+1, r24	; 0x01
   11bde:	92 83       	std	Z+2, r25	; 0x02
   11be0:	a3 83       	std	Z+3, r26	; 0x03
   11be2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11be6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11bea:	90 e0       	ldi	r25, 0x00	; 0
   11bec:	3d dd       	rcall	.-1414   	; 0x11668 <SS80_is_MLA>
   11bee:	89 2b       	or	r24, r25
   11bf0:	d9 f0       	breq	.+54     	; 0x11c28 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11bf2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bf6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bfa:	84 72       	andi	r24, 0x24	; 36
   11bfc:	99 27       	eor	r25, r25
   11bfe:	89 2b       	or	r24, r25
   11c00:	51 f0       	breq	.+20     	; 0x11c16 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11c02:	89 e6       	ldi	r24, 0x69	; 105
   11c04:	93 e1       	ldi	r25, 0x13	; 19
   11c06:	a0 e0       	ldi	r26, 0x00	; 0
   11c08:	ed b7       	in	r30, 0x3d	; 61
   11c0a:	fe b7       	in	r31, 0x3e	; 62
   11c0c:	81 83       	std	Z+1, r24	; 0x01
   11c0e:	92 83       	std	Z+2, r25	; 0x02
   11c10:	a3 83       	std	Z+3, r26	; 0x03
   11c12:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11c16:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   11c1a:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   11c1e:	85 81       	ldd	r24, Z+5	; 0x05
   11c20:	90 e0       	ldi	r25, 0x00	; 0
   11c22:	0e 94 f1 aa 	call	0x155e2	; 0x155e2 <SS80_Selected_Device_Clear>
   11c26:	43 c0       	rjmp	.+134    	; 0x11cae <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11c28:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11c2c:	90 e0       	ldi	r25, 0x00	; 0
   11c2e:	4f dd       	rcall	.-1378   	; 0x116ce <AMIGO_is_MLA>
   11c30:	89 2b       	or	r24, r25
   11c32:	d9 f1       	breq	.+118    	; 0x11caa <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c38:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c3c:	84 72       	andi	r24, 0x24	; 36
   11c3e:	99 27       	eor	r25, r25
   11c40:	89 2b       	or	r24, r25
   11c42:	51 f0       	breq	.+20     	; 0x11c58 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11c44:	8c e5       	ldi	r24, 0x5C	; 92
   11c46:	93 e1       	ldi	r25, 0x13	; 19
   11c48:	a0 e0       	ldi	r26, 0x00	; 0
   11c4a:	ed b7       	in	r30, 0x3d	; 61
   11c4c:	fe b7       	in	r31, 0x3e	; 62
   11c4e:	81 83       	std	Z+1, r24	; 0x01
   11c50:	92 83       	std	Z+2, r25	; 0x02
   11c52:	a3 83       	std	Z+3, r26	; 0x03
   11c54:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
            return( amigo_cmd_clear() );
   11c58:	0e 94 32 b5 	call	0x16a64	; 0x16a64 <amigo_cmd_clear>
   11c5c:	28 c0       	rjmp	.+80     	; 0x11cae <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11c5e:	84 31       	cpi	r24, 0x14	; 20
   11c60:	99 f4       	brne	.+38     	; 0x11c88 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11c62:	22 ff       	sbrs	r18, 2
   11c64:	0a c0       	rjmp	.+20     	; 0x11c7a <GPIB+0x144>
            printf("[DCL]\n");
   11c66:	85 e5       	ldi	r24, 0x55	; 85
   11c68:	93 e1       	ldi	r25, 0x13	; 19
   11c6a:	a0 e0       	ldi	r26, 0x00	; 0
   11c6c:	ed b7       	in	r30, 0x3d	; 61
   11c6e:	fe b7       	in	r31, 0x3e	; 62
   11c70:	81 83       	std	Z+1, r24	; 0x01
   11c72:	92 83       	std	Z+2, r25	; 0x02
   11c74:	a3 83       	std	Z+3, r26	; 0x03
   11c76:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11c7a:	0e 94 e3 aa 	call	0x155c6	; 0x155c6 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11c7e:	0e 94 32 b5 	call	0x16a64	; 0x16a64 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11c82:	0e 94 51 bb 	call	0x176a2	; 0x176a2 <printer_close>
   11c86:	11 c0       	rjmp	.+34     	; 0x11caa <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11c88:	25 71       	andi	r18, 0x15	; 21
   11c8a:	33 27       	eor	r19, r19
   11c8c:	23 2b       	or	r18, r19
   11c8e:	69 f0       	breq	.+26     	; 0x11caa <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11c90:	90 e0       	ldi	r25, 0x00	; 0
   11c92:	ed b7       	in	r30, 0x3d	; 61
   11c94:	fe b7       	in	r31, 0x3e	; 62
   11c96:	95 83       	std	Z+5, r25	; 0x05
   11c98:	84 83       	std	Z+4, r24	; 0x04
   11c9a:	84 e3       	ldi	r24, 0x34	; 52
   11c9c:	93 e1       	ldi	r25, 0x13	; 19
   11c9e:	a0 e0       	ldi	r26, 0x00	; 0
   11ca0:	81 83       	std	Z+1, r24	; 0x01
   11ca2:	92 83       	std	Z+2, r25	; 0x02
   11ca4:	a3 83       	std	Z+3, r26	; 0x03
   11ca6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    return(0);
   11caa:	80 e0       	ldi	r24, 0x00	; 0
   11cac:	90 e0       	ldi	r25, 0x00	; 0
}
   11cae:	0f 90       	pop	r0
   11cb0:	0f 90       	pop	r0
   11cb2:	0f 90       	pop	r0
   11cb4:	0f 90       	pop	r0
   11cb6:	0f 90       	pop	r0
   11cb8:	08 95       	ret

00011cba <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11cba:	cf 93       	push	r28
   11cbc:	df 93       	push	r29
   11cbe:	00 d0       	rcall	.+0      	; 0x11cc0 <GPIB_TALK+0x6>
   11cc0:	00 d0       	rcall	.+0      	; 0x11cc2 <GPIB_TALK+0x8>
   11cc2:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11cc4:	90 91 e4 1e 	lds	r25, 0x1EE4	; 0x801ee4 <talking>
   11cc8:	90 93 e7 1e 	sts	0x1EE7, r25	; 0x801ee7 <talking_last>
    talking = ch;
   11ccc:	80 93 e4 1e 	sts	0x1EE4, r24	; 0x801ee4 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11cd0:	8f 35       	cpi	r24, 0x5F	; 95
   11cd2:	79 f4       	brne	.+30     	; 0x11cf2 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11cd4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cd8:	82 ff       	sbrs	r24, 2
   11cda:	7f c0       	rjmp	.+254    	; 0x11dda <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11cdc:	81 ee       	ldi	r24, 0xE1	; 225
   11cde:	92 e1       	ldi	r25, 0x12	; 18
   11ce0:	a0 e0       	ldi	r26, 0x00	; 0
   11ce2:	ed b7       	in	r30, 0x3d	; 61
   11ce4:	fe b7       	in	r31, 0x3e	; 62
   11ce6:	81 83       	std	Z+1, r24	; 0x01
   11ce8:	92 83       	std	Z+2, r25	; 0x02
   11cea:	a3 83       	std	Z+3, r26	; 0x03
   11cec:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11cf0:	74 c0       	rjmp	.+232    	; 0x11dda <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11cf2:	c8 2f       	mov	r28, r24
   11cf4:	d0 e0       	ldi	r29, 0x00	; 0
   11cf6:	ce 01       	movw	r24, r28
   11cf8:	c8 dc       	rcall	.-1648   	; 0x1168a <SS80_is_MTA>
   11cfa:	89 2b       	or	r24, r25
   11cfc:	e1 f0       	breq	.+56     	; 0x11d36 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cfe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d06:	84 72       	andi	r24, 0x24	; 36
   11d08:	99 27       	eor	r25, r25
   11d0a:	89 2b       	or	r24, r25
   11d0c:	61 f0       	breq	.+24     	; 0x11d26 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11d0e:	ed b7       	in	r30, 0x3d	; 61
   11d10:	fe b7       	in	r31, 0x3e	; 62
   11d12:	d5 83       	std	Z+5, r29	; 0x05
   11d14:	c4 83       	std	Z+4, r28	; 0x04
   11d16:	80 ed       	ldi	r24, 0xD0	; 208
   11d18:	92 e1       	ldi	r25, 0x12	; 18
   11d1a:	a0 e0       	ldi	r26, 0x00	; 0
   11d1c:	81 83       	std	Z+1, r24	; 0x01
   11d1e:	92 83       	std	Z+2, r25	; 0x02
   11d20:	a3 83       	std	Z+3, r26	; 0x03
   11d22:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif

        if (spoll)
   11d26:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <spoll>
   11d2a:	88 23       	and	r24, r24
   11d2c:	09 f4       	brne	.+2      	; 0x11d30 <GPIB_TALK+0x76>
   11d2e:	55 c0       	rjmp	.+170    	; 0x11dda <GPIB_TALK+0x120>
        {
            SS80_Report();
   11d30:	0e 94 25 aa 	call	0x1544a	; 0x1544a <SS80_Report>
   11d34:	52 c0       	rjmp	.+164    	; 0x11dda <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11d36:	ce 01       	movw	r24, r28
   11d38:	db dc       	rcall	.-1610   	; 0x116f0 <AMIGO_is_MTA>
   11d3a:	89 2b       	or	r24, r25
   11d3c:	81 f0       	breq	.+32     	; 0x11d5e <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d42:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d46:	84 72       	andi	r24, 0x24	; 36
   11d48:	99 27       	eor	r25, r25
   11d4a:	89 2b       	or	r24, r25
   11d4c:	09 f4       	brne	.+2      	; 0x11d50 <GPIB_TALK+0x96>
   11d4e:	45 c0       	rjmp	.+138    	; 0x11dda <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11d50:	ed b7       	in	r30, 0x3d	; 61
   11d52:	fe b7       	in	r31, 0x3e	; 62
   11d54:	d5 83       	std	Z+5, r29	; 0x05
   11d56:	c4 83       	std	Z+4, r28	; 0x04
   11d58:	8e eb       	ldi	r24, 0xBE	; 190
   11d5a:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11d5c:	38 c0       	rjmp	.+112    	; 0x11dce <GPIB_TALK+0x114>
   11d5e:	ce 01       	movw	r24, r28
   11d60:	fa dc       	rcall	.-1548   	; 0x11756 <PRINTER_is_MTA>
   11d62:	89 2b       	or	r24, r25
   11d64:	79 f0       	breq	.+30     	; 0x11d84 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d6a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d6e:	84 72       	andi	r24, 0x24	; 36
   11d70:	99 27       	eor	r25, r25
   11d72:	89 2b       	or	r24, r25
   11d74:	91 f1       	breq	.+100    	; 0x11dda <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11d76:	ed b7       	in	r30, 0x3d	; 61
   11d78:	fe b7       	in	r31, 0x3e	; 62
   11d7a:	d5 83       	std	Z+5, r29	; 0x05
   11d7c:	c4 83       	std	Z+4, r28	; 0x04
   11d7e:	8a ea       	ldi	r24, 0xAA	; 170
   11d80:	92 e1       	ldi	r25, 0x12	; 18
   11d82:	25 c0       	rjmp	.+74     	; 0x11dce <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11d84:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11d88:	90 e0       	ldi	r25, 0x00	; 0
   11d8a:	d4 dc       	rcall	.-1624   	; 0x11734 <PRINTER_is_MLA>
   11d8c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d90:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d94:	89 2b       	or	r24, r25
   11d96:	99 f0       	breq	.+38     	; 0x11dbe <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d98:	24 72       	andi	r18, 0x24	; 36
   11d9a:	33 27       	eor	r19, r19
   11d9c:	23 2b       	or	r18, r19
   11d9e:	51 f0       	breq	.+20     	; 0x11db4 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11da0:	8a e9       	ldi	r24, 0x9A	; 154
   11da2:	92 e1       	ldi	r25, 0x12	; 18
   11da4:	a0 e0       	ldi	r26, 0x00	; 0
   11da6:	ed b7       	in	r30, 0x3d	; 61
   11da8:	fe b7       	in	r31, 0x3e	; 62
   11daa:	81 83       	std	Z+1, r24	; 0x01
   11dac:	92 83       	std	Z+2, r25	; 0x02
   11dae:	a3 83       	std	Z+3, r26	; 0x03
   11db0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printer_open(NULL);
   11db4:	80 e0       	ldi	r24, 0x00	; 0
   11db6:	90 e0       	ldi	r25, 0x00	; 0
   11db8:	0e 94 a9 bb 	call	0x17752	; 0x17752 <printer_open>
   11dbc:	0e c0       	rjmp	.+28     	; 0x11dda <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11dbe:	22 ff       	sbrs	r18, 2
   11dc0:	0c c0       	rjmp	.+24     	; 0x11dda <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11dc2:	ed b7       	in	r30, 0x3d	; 61
   11dc4:	fe b7       	in	r31, 0x3e	; 62
   11dc6:	d5 83       	std	Z+5, r29	; 0x05
   11dc8:	c4 83       	std	Z+4, r28	; 0x04
   11dca:	8e e8       	ldi	r24, 0x8E	; 142
   11dcc:	92 e1       	ldi	r25, 0x12	; 18
   11dce:	a0 e0       	ldi	r26, 0x00	; 0
   11dd0:	81 83       	std	Z+1, r24	; 0x01
   11dd2:	92 83       	std	Z+2, r25	; 0x02
   11dd4:	a3 83       	std	Z+3, r26	; 0x03
   11dd6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11dda:	80 e0       	ldi	r24, 0x00	; 0
   11ddc:	90 e0       	ldi	r25, 0x00	; 0
   11dde:	cd b7       	in	r28, 0x3d	; 61
   11de0:	de b7       	in	r29, 0x3e	; 62
   11de2:	25 96       	adiw	r28, 0x05	; 5
   11de4:	e2 e0       	ldi	r30, 0x02	; 2
   11de6:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00011dea <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11dea:	a9 e0       	ldi	r26, 0x09	; 9
   11dec:	b0 e0       	ldi	r27, 0x00	; 0
   11dee:	eb ef       	ldi	r30, 0xFB	; 251
   11df0:	fe e8       	ldi	r31, 0x8E	; 142
   11df2:	0c 94 67 e2 	jmp	0x1c4ce	; 0x1c4ce <__prologue_saves__+0x1e>
   11df6:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11df8:	c8 2f       	mov	r28, r24
   11dfa:	d0 e0       	ldi	r29, 0x00	; 0
   11dfc:	ce 01       	movw	r24, r28
   11dfe:	56 dc       	rcall	.-1876   	; 0x116ac <SS80_is_MSA>
   11e00:	89 2b       	or	r24, r25
   11e02:	09 f1       	breq	.+66     	; 0x11e46 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e08:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e0c:	84 72       	andi	r24, 0x24	; 36
   11e0e:	99 27       	eor	r25, r25
   11e10:	89 2b       	or	r24, r25
   11e12:	61 f0       	breq	.+24     	; 0x11e2c <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11e14:	ed b7       	in	r30, 0x3d	; 61
   11e16:	fe b7       	in	r31, 0x3e	; 62
   11e18:	d5 83       	std	Z+5, r29	; 0x05
   11e1a:	c4 83       	std	Z+4, r28	; 0x04
   11e1c:	8d e7       	ldi	r24, 0x7D	; 125
   11e1e:	92 e1       	ldi	r25, 0x12	; 18
   11e20:	a0 e0       	ldi	r26, 0x00	; 0
   11e22:	81 83       	std	Z+1, r24	; 0x01
   11e24:	92 83       	std	Z+2, r25	; 0x02
   11e26:	a3 83       	std	Z+3, r26	; 0x03
   11e28:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11e2c:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   11e30:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   11e34:	81 81       	ldd	r24, Z+1	; 0x01
   11e36:	90 e0       	ldi	r25, 0x00	; 0
   11e38:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11e3c:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   11e40:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   11e44:	25 c0       	rjmp	.+74     	; 0x11e90 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11e46:	ce 01       	movw	r24, r28
   11e48:	64 dc       	rcall	.-1848   	; 0x11712 <AMIGO_is_MSA>
   11e4a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e4e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e52:	89 2b       	or	r24, r25
   11e54:	11 f1       	breq	.+68     	; 0x11e9a <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e56:	c9 01       	movw	r24, r18
   11e58:	84 72       	andi	r24, 0x24	; 36
   11e5a:	99 27       	eor	r25, r25
   11e5c:	89 2b       	or	r24, r25
   11e5e:	61 f0       	breq	.+24     	; 0x11e78 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11e60:	ed b7       	in	r30, 0x3d	; 61
   11e62:	fe b7       	in	r31, 0x3e	; 62
   11e64:	d5 83       	std	Z+5, r29	; 0x05
   11e66:	c4 83       	std	Z+4, r28	; 0x04
   11e68:	8b e6       	ldi	r24, 0x6B	; 107
   11e6a:	92 e1       	ldi	r25, 0x12	; 18
   11e6c:	a0 e0       	ldi	r26, 0x00	; 0
   11e6e:	81 83       	std	Z+1, r24	; 0x01
   11e70:	92 83       	std	Z+2, r25	; 0x02
   11e72:	a3 83       	std	Z+3, r26	; 0x03
   11e74:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11e78:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   11e7c:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   11e80:	81 81       	ldd	r24, Z+1	; 0x01
   11e82:	90 e0       	ldi	r25, 0x00	; 0
   11e84:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11e88:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   11e8c:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   11e90:	64 81       	ldd	r22, Z+4	; 0x04
   11e92:	75 81       	ldd	r23, Z+5	; 0x05
   11e94:	81 2f       	mov	r24, r17
   11e96:	ec dd       	rcall	.-1064   	; 0x11a70 <Send_Identify>
   11e98:	1d c0       	rjmp	.+58     	; 0x11ed4 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e9a:	c9 01       	movw	r24, r18
   11e9c:	84 72       	andi	r24, 0x24	; 36
   11e9e:	99 27       	eor	r25, r25
   11ea0:	00 97       	sbiw	r24, 0x00	; 0
   11ea2:	c1 f0       	breq	.+48     	; 0x11ed4 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11ea4:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11ea8:	90 e0       	ldi	r25, 0x00	; 0
   11eaa:	ed b7       	in	r30, 0x3d	; 61
   11eac:	fe b7       	in	r31, 0x3e	; 62
   11eae:	91 87       	std	Z+9, r25	; 0x09
   11eb0:	80 87       	std	Z+8, r24	; 0x08
   11eb2:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11eb6:	90 e0       	ldi	r25, 0x00	; 0
   11eb8:	97 83       	std	Z+7, r25	; 0x07
   11eba:	86 83       	std	Z+6, r24	; 0x06
   11ebc:	d5 83       	std	Z+5, r29	; 0x05
   11ebe:	c4 83       	std	Z+4, r28	; 0x04
   11ec0:	85 e4       	ldi	r24, 0x45	; 69
   11ec2:	92 e1       	ldi	r25, 0x12	; 18
   11ec4:	a0 e0       	ldi	r26, 0x00	; 0
   11ec6:	81 83       	std	Z+1, r24	; 0x01
   11ec8:	92 83       	std	Z+2, r25	; 0x02
   11eca:	a3 83       	std	Z+3, r26	; 0x03
   11ecc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11ed0:	80 e0       	ldi	r24, 0x00	; 0
   11ed2:	90 e0       	ldi	r25, 0x00	; 0
}
   11ed4:	cd b7       	in	r28, 0x3d	; 61
   11ed6:	de b7       	in	r29, 0x3e	; 62
   11ed8:	29 96       	adiw	r28, 0x09	; 9
   11eda:	e3 e0       	ldi	r30, 0x03	; 3
   11edc:	0c 94 83 e2 	jmp	0x1c506	; 0x1c506 <__epilogue_restores__+0x1e>

00011ee0 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11ee0:	00 d0       	rcall	.+0      	; 0x11ee2 <listen_cleanup+0x2>
   11ee2:	1f 92       	push	r1
    if(listening_last)
   11ee4:	60 91 e0 1e 	lds	r22, 0x1EE0	; 0x801ee0 <listening_last>
   11ee8:	66 23       	and	r22, r22
   11eea:	e1 f0       	breq	.+56     	; 0x11f24 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11eec:	70 e0       	ldi	r23, 0x00	; 0
   11eee:	40 e2       	ldi	r20, 0x20	; 32
   11ef0:	50 e0       	ldi	r21, 0x00	; 0
   11ef2:	84 e0       	ldi	r24, 0x04	; 4
   11ef4:	90 e0       	ldi	r25, 0x00	; 0
   11ef6:	a6 d6       	rcall	.+3404   	; 0x12c44 <find_device>
        if(index == -1)
   11ef8:	01 96       	adiw	r24, 0x01	; 1
   11efa:	a1 f0       	breq	.+40     	; 0x11f24 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11efc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f00:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f04:	84 72       	andi	r24, 0x24	; 36
   11f06:	99 27       	eor	r25, r25
   11f08:	89 2b       	or	r24, r25
   11f0a:	51 f0       	breq	.+20     	; 0x11f20 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11f0c:	84 e3       	ldi	r24, 0x34	; 52
   11f0e:	92 e1       	ldi	r25, 0x12	; 18
   11f10:	a0 e0       	ldi	r26, 0x00	; 0
   11f12:	ed b7       	in	r30, 0x3d	; 61
   11f14:	fe b7       	in	r31, 0x3e	; 62
   11f16:	81 83       	std	Z+1, r24	; 0x01
   11f18:	92 83       	std	Z+2, r25	; 0x02
   11f1a:	a3 83       	std	Z+3, r26	; 0x03
   11f1c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printer_close();
   11f20:	0e 94 51 bb 	call	0x176a2	; 0x176a2 <printer_close>
    }
}
   11f24:	0f 90       	pop	r0
   11f26:	0f 90       	pop	r0
   11f28:	0f 90       	pop	r0
   11f2a:	08 95       	ret

00011f2c <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11f2c:	cf 93       	push	r28
   11f2e:	df 93       	push	r29
   11f30:	00 d0       	rcall	.+0      	; 0x11f32 <GPIB_LISTEN+0x6>
   11f32:	00 d0       	rcall	.+0      	; 0x11f34 <GPIB_LISTEN+0x8>
   11f34:	1f 92       	push	r1
   11f36:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11f38:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11f3c:	80 93 e0 1e 	sts	0x1EE0, r24	; 0x801ee0 <listening_last>
    listening = ch;
   11f40:	c0 93 e6 1e 	sts	0x1EE6, r28	; 0x801ee6 <listening>

    listen_cleanup();
   11f44:	cd df       	rcall	.-102    	; 0x11ee0 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11f46:	cf 33       	cpi	r28, 0x3F	; 63
   11f48:	19 f5       	brne	.+70     	; 0x11f90 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11f4a:	10 92 e6 1e 	sts	0x1EE6, r1	; 0x801ee6 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f52:	82 ff       	sbrs	r24, 2
   11f54:	74 c0       	rjmp	.+232    	; 0x1203e <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11f56:	8d e2       	ldi	r24, 0x2D	; 45
   11f58:	93 e1       	ldi	r25, 0x13	; 19
   11f5a:	a0 e0       	ldi	r26, 0x00	; 0
   11f5c:	ed b7       	in	r30, 0x3d	; 61
   11f5e:	fe b7       	in	r31, 0x3e	; 62
   11f60:	81 83       	std	Z+1, r24	; 0x01
   11f62:	92 83       	std	Z+2, r25	; 0x02
   11f64:	a3 83       	std	Z+3, r26	; 0x03
   11f66:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11f6a:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <lastcmd>
   11f6e:	90 91 df 1c 	lds	r25, 0x1CDF	; 0x801cdf <lastcmd+0x1>
   11f72:	8f 35       	cpi	r24, 0x5F	; 95
   11f74:	91 05       	cpc	r25, r1
   11f76:	09 f0       	breq	.+2      	; 0x11f7a <GPIB_LISTEN+0x4e>
   11f78:	62 c0       	rjmp	.+196    	; 0x1203e <GPIB_LISTEN+0x112>
                printf("\n");
   11f7a:	8b e2       	ldi	r24, 0x2B	; 43
   11f7c:	93 e1       	ldi	r25, 0x13	; 19
   11f7e:	a0 e0       	ldi	r26, 0x00	; 0
   11f80:	ed b7       	in	r30, 0x3d	; 61
   11f82:	fe b7       	in	r31, 0x3e	; 62
   11f84:	81 83       	std	Z+1, r24	; 0x01
   11f86:	92 83       	std	Z+2, r25	; 0x02
   11f88:	a3 83       	std	Z+3, r26	; 0x03
   11f8a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   11f8e:	57 c0       	rjmp	.+174    	; 0x1203e <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   11f90:	d0 e0       	ldi	r29, 0x00	; 0
   11f92:	ce 01       	movw	r24, r28
   11f94:	9c db       	rcall	.-2248   	; 0x116ce <AMIGO_is_MLA>
   11f96:	89 2b       	or	r24, r25
   11f98:	81 f0       	breq	.+32     	; 0x11fba <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f9e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fa2:	84 72       	andi	r24, 0x24	; 36
   11fa4:	99 27       	eor	r25, r25
   11fa6:	89 2b       	or	r24, r25
   11fa8:	09 f4       	brne	.+2      	; 0x11fac <GPIB_LISTEN+0x80>
   11faa:	49 c0       	rjmp	.+146    	; 0x1203e <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   11fac:	ed b7       	in	r30, 0x3d	; 61
   11fae:	fe b7       	in	r31, 0x3e	; 62
   11fb0:	d5 83       	std	Z+5, r29	; 0x05
   11fb2:	c4 83       	std	Z+4, r28	; 0x04
   11fb4:	89 e1       	ldi	r24, 0x19	; 25
   11fb6:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   11fb8:	3c c0       	rjmp	.+120    	; 0x12032 <GPIB_LISTEN+0x106>
   11fba:	ce 01       	movw	r24, r28
   11fbc:	55 db       	rcall	.-2390   	; 0x11668 <SS80_is_MLA>
   11fbe:	89 2b       	or	r24, r25
   11fc0:	79 f0       	breq	.+30     	; 0x11fe0 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fc6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fca:	84 72       	andi	r24, 0x24	; 36
   11fcc:	99 27       	eor	r25, r25
   11fce:	89 2b       	or	r24, r25
   11fd0:	b1 f1       	breq	.+108    	; 0x1203e <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   11fd2:	ed b7       	in	r30, 0x3d	; 61
   11fd4:	fe b7       	in	r31, 0x3e	; 62
   11fd6:	d5 83       	std	Z+5, r29	; 0x05
   11fd8:	c4 83       	std	Z+4, r28	; 0x04
   11fda:	88 e0       	ldi	r24, 0x08	; 8
   11fdc:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   11fde:	29 c0       	rjmp	.+82     	; 0x12032 <GPIB_LISTEN+0x106>
   11fe0:	ce 01       	movw	r24, r28
   11fe2:	a8 db       	rcall	.-2224   	; 0x11734 <PRINTER_is_MLA>
   11fe4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11fe8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fec:	89 2b       	or	r24, r25
   11fee:	c9 f0       	breq	.+50     	; 0x12022 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ff0:	24 72       	andi	r18, 0x24	; 36
   11ff2:	33 27       	eor	r19, r19
   11ff4:	23 2b       	or	r18, r19
   11ff6:	61 f0       	breq	.+24     	; 0x12010 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   11ff8:	ed b7       	in	r30, 0x3d	; 61
   11ffa:	fe b7       	in	r31, 0x3e	; 62
   11ffc:	d5 83       	std	Z+5, r29	; 0x05
   11ffe:	c4 83       	std	Z+4, r28	; 0x04
   12000:	84 ef       	ldi	r24, 0xF4	; 244
   12002:	92 e1       	ldi	r25, 0x12	; 18
   12004:	a0 e0       	ldi	r26, 0x00	; 0
   12006:	81 83       	std	Z+1, r24	; 0x01
   12008:	92 83       	std	Z+2, r25	; 0x02
   1200a:	a3 83       	std	Z+3, r26	; 0x03
   1200c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
        if(talking != UNT)
   12010:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   12014:	8f 35       	cpi	r24, 0x5F	; 95
   12016:	99 f0       	breq	.+38     	; 0x1203e <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   12018:	80 e0       	ldi	r24, 0x00	; 0
   1201a:	90 e0       	ldi	r25, 0x00	; 0
   1201c:	0e 94 a9 bb 	call	0x17752	; 0x17752 <printer_open>
   12020:	0e c0       	rjmp	.+28     	; 0x1203e <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12022:	22 ff       	sbrs	r18, 2
   12024:	0c c0       	rjmp	.+24     	; 0x1203e <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   12026:	ed b7       	in	r30, 0x3d	; 61
   12028:	fe b7       	in	r31, 0x3e	; 62
   1202a:	d5 83       	std	Z+5, r29	; 0x05
   1202c:	c4 83       	std	Z+4, r28	; 0x04
   1202e:	88 ee       	ldi	r24, 0xE8	; 232
   12030:	92 e1       	ldi	r25, 0x12	; 18
   12032:	a0 e0       	ldi	r26, 0x00	; 0
   12034:	81 83       	std	Z+1, r24	; 0x01
   12036:	92 83       	std	Z+2, r25	; 0x02
   12038:	a3 83       	std	Z+3, r26	; 0x03
   1203a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   1203e:	80 e0       	ldi	r24, 0x00	; 0
   12040:	90 e0       	ldi	r25, 0x00	; 0
   12042:	cd b7       	in	r28, 0x3d	; 61
   12044:	de b7       	in	r29, 0x3e	; 62
   12046:	25 96       	adiw	r28, 0x05	; 5
   12048:	e2 e0       	ldi	r30, 0x02	; 2
   1204a:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0001204e <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   1204e:	cf 93       	push	r28
   12050:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12052:	92 db       	rcall	.-2268   	; 0x11778 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12054:	10 92 58 19 	sts	0x1958, r1	; 0x801958 <gpib_log_fp+0x1>
   12058:	10 92 57 19 	sts	0x1957, r1	; 0x801957 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   1205c:	80 e0       	ldi	r24, 0x00	; 0
   1205e:	90 e0       	ldi	r25, 0x00	; 0
   12060:	45 d8       	rcall	.-3958   	; 0x110ec <gpib_read_byte>
   12062:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12064:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12068:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1206a:	02 c0       	rjmp	.+4      	; 0x12070 <gpib_task+0x22>
   1206c:	ce 01       	movw	r24, r28
   1206e:	56 d9       	rcall	.-3412   	; 0x1131c <gpib_decode>
#endif
        status = gpib_error_test(val);
   12070:	ce 01       	movw	r24, r28
   12072:	1d dc       	rcall	.-1990   	; 0x118ae <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12074:	9c 01       	movw	r18, r24
   12076:	23 70       	andi	r18, 0x03	; 3
   12078:	33 27       	eor	r19, r19
   1207a:	23 2b       	or	r18, r19
   1207c:	09 f0       	breq	.+2      	; 0x12080 <gpib_task+0x32>
   1207e:	43 c0       	rjmp	.+134    	; 0x12106 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12080:	89 2b       	or	r24, r25
   12082:	61 f7       	brne	.-40     	; 0x1205c <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12084:	d2 ff       	sbrs	r29, 2
   12086:	26 c0       	rjmp	.+76     	; 0x120d4 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   12088:	8c 2f       	mov	r24, r28
   1208a:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   1208c:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   1208e:	10 f4       	brcc	.+4      	; 0x12094 <gpib_task+0x46>
   12090:	52 dd       	rcall	.-1372   	; 0x11b36 <GPIB>
                continue;
   12092:	e4 cf       	rjmp	.-56     	; 0x1205c <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12094:	90 ee       	ldi	r25, 0xE0	; 224
   12096:	98 0f       	add	r25, r24
   12098:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1209a:	10 f4       	brcc	.+4      	; 0x120a0 <gpib_task+0x52>
   1209c:	47 df       	rcall	.-370    	; 0x11f2c <GPIB_LISTEN>
                continue;
   1209e:	de cf       	rjmp	.-68     	; 0x1205c <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   120a0:	90 ec       	ldi	r25, 0xC0	; 192
   120a2:	98 0f       	add	r25, r24
   120a4:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   120a6:	10 f4       	brcc	.+4      	; 0x120ac <gpib_task+0x5e>
   120a8:	08 de       	rcall	.-1008   	; 0x11cba <GPIB_TALK>
                continue;
   120aa:	d8 cf       	rjmp	.-80     	; 0x1205c <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   120ac:	90 91 e6 1e 	lds	r25, 0x1EE6	; 0x801ee6 <listening>
   120b0:	99 23       	and	r25, r25
   120b2:	59 f0       	breq	.+22     	; 0x120ca <gpib_task+0x7c>
   120b4:	20 91 de 1c 	lds	r18, 0x1CDE	; 0x801cde <lastcmd>
   120b8:	30 91 df 1c 	lds	r19, 0x1CDF	; 0x801cdf <lastcmd+0x1>
   120bc:	2f 35       	cpi	r18, 0x5F	; 95
   120be:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   120c0:	21 f4       	brne	.+8      	; 0x120ca <gpib_task+0x7c>
   120c2:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   120c6:	91 de       	rcall	.-734    	; 0x11dea <GPIB_SECONDARY_ADDRESS>
                continue;
   120c8:	c9 cf       	rjmp	.-110    	; 0x1205c <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   120ca:	80 93 e5 1e 	sts	0x1EE5, r24	; 0x801ee5 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   120ce:	60 e0       	ldi	r22, 0x00	; 0
   120d0:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   120d2:	12 c0       	rjmp	.+36     	; 0x120f8 <gpib_task+0xaa>
   120d4:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   120d8:	90 e0       	ldi	r25, 0x00	; 0
   120da:	2c db       	rcall	.-2472   	; 0x11734 <PRINTER_is_MLA>
   120dc:	89 2b       	or	r24, r25
   120de:	29 f0       	breq	.+10     	; 0x120ea <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   120e0:	ce 01       	movw	r24, r28
   120e2:	99 27       	eor	r25, r25
   120e4:	0e 94 4c bc 	call	0x17898	; 0x17898 <printer_buffer>
                continue;
   120e8:	b9 cf       	rjmp	.-142    	; 0x1205c <gpib_task+0xe>
            }

            if(!secondary)
   120ea:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
   120ee:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   120f0:	09 f4       	brne	.+2      	; 0x120f4 <gpib_task+0xa6>
   120f2:	b4 cf       	rjmp	.-152    	; 0x1205c <gpib_task+0xe>
   120f4:	61 e0       	ldi	r22, 0x01	; 1
   120f6:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   120f8:	67 dc       	rcall	.-1842   	; 0x119c8 <GPIB_COMMANDS>
   120fa:	d9 db       	rcall	.-2126   	; 0x118ae <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   120fc:	83 70       	andi	r24, 0x03	; 3
   120fe:	99 27       	eor	r25, r25
   12100:	89 2b       	or	r24, r25
   12102:	09 f4       	brne	.+2      	; 0x12106 <gpib_task+0xb8>
   12104:	ab cf       	rjmp	.-170    	; 0x1205c <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   12106:	df 91       	pop	r29
   12108:	cf 91       	pop	r28
   1210a:	08 95       	ret

0001210c <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   1210c:	08 95       	ret

0001210e <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   1210e:	cf 93       	push	r28
   12110:	df 93       	push	r29
   12112:	00 d0       	rcall	.+0      	; 0x12114 <gpib_help+0x6>
   12114:	1f 92       	push	r1
   12116:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   12118:	8e eb       	ldi	r24, 0xBE	; 190
   1211a:	96 e1       	ldi	r25, 0x16	; 22
   1211c:	a0 e0       	ldi	r26, 0x00	; 0
   1211e:	ed b7       	in	r30, 0x3d	; 61
   12120:	fe b7       	in	r31, 0x3e	; 62
   12122:	81 83       	std	Z+1, r24	; 0x01
   12124:	92 83       	std	Z+2, r25	; 0x02
   12126:	a3 83       	std	Z+3, r26	; 0x03
   12128:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    if(full)
   1212c:	cd 2b       	or	r28, r29
   1212e:	51 f0       	breq	.+20     	; 0x12144 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12130:	85 ef       	ldi	r24, 0xF5	; 245
   12132:	94 e1       	ldi	r25, 0x14	; 20
   12134:	a0 e0       	ldi	r26, 0x00	; 0
   12136:	ed b7       	in	r30, 0x3d	; 61
   12138:	fe b7       	in	r31, 0x3e	; 62
   1213a:	81 83       	std	Z+1, r24	; 0x01
   1213c:	92 83       	std	Z+2, r25	; 0x02
   1213e:	a3 83       	std	Z+3, r26	; 0x03
   12140:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   12144:	cd b7       	in	r28, 0x3d	; 61
   12146:	de b7       	in	r29, 0x3e	; 62
   12148:	23 96       	adiw	r28, 0x03	; 3
   1214a:	e2 e0       	ldi	r30, 0x02	; 2
   1214c:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00012150 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12150:	a5 e0       	ldi	r26, 0x05	; 5
   12152:	b0 e0       	ldi	r27, 0x00	; 0
   12154:	ee ea       	ldi	r30, 0xAE	; 174
   12156:	f0 e9       	ldi	r31, 0x90	; 144
   12158:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1215c:	fb 01       	movw	r30, r22
   1215e:	e0 80       	ld	r14, Z
   12160:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12162:	e1 14       	cp	r14, r1
   12164:	f1 04       	cpc	r15, r1
   12166:	19 f4       	brne	.+6      	; 0x1216e <gpib_tests+0x1e>
        return(0);
   12168:	80 e0       	ldi	r24, 0x00	; 0
   1216a:	90 e0       	ldi	r25, 0x00	; 0
   1216c:	e8 c0       	rjmp	.+464    	; 0x1233e <gpib_tests+0x1ee>
   1216e:	6b 01       	movw	r12, r22
   12170:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12172:	63 eb       	ldi	r22, 0xB3	; 179
   12174:	7d e0       	ldi	r23, 0x0D	; 13
   12176:	c7 01       	movw	r24, r14
   12178:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1217c:	89 2b       	or	r24, r25
   1217e:	a1 f0       	breq	.+40     	; 0x121a8 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12180:	f6 01       	movw	r30, r12
   12182:	e2 80       	ldd	r14, Z+2	; 0x02
   12184:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12186:	e1 14       	cp	r14, r1
   12188:	f1 04       	cpc	r15, r1
   1218a:	21 f4       	brne	.+8      	; 0x12194 <gpib_tests+0x44>
        {
            gpib_help(1);
   1218c:	81 e0       	ldi	r24, 0x01	; 1
   1218e:	90 e0       	ldi	r25, 0x00	; 0
   12190:	be df       	rcall	.-132    	; 0x1210e <gpib_help>
   12192:	d3 c0       	rjmp	.+422    	; 0x1233a <gpib_tests+0x1ea>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12194:	69 e7       	ldi	r22, 0x79	; 121
   12196:	76 e1       	ldi	r23, 0x16	; 22
   12198:	c7 01       	movw	r24, r14
   1219a:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1219e:	89 2b       	or	r24, r25
   121a0:	a9 f7       	brne	.-22     	; 0x1218c <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   121a2:	c2 e0       	ldi	r28, 0x02	; 2
   121a4:	d0 e0       	ldi	r29, 0x00	; 0
   121a6:	02 c0       	rjmp	.+4      	; 0x121ac <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   121a8:	c1 e0       	ldi	r28, 0x01	; 1
   121aa:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   121ac:	68 eb       	ldi	r22, 0xB8	; 184
   121ae:	7d e0       	ldi	r23, 0x0D	; 13
   121b0:	c7 01       	movw	r24, r14
   121b2:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   121b6:	89 2b       	or	r24, r25
   121b8:	29 f1       	breq	.+74     	; 0x12204 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   121ba:	fe 01       	movw	r30, r28
   121bc:	ee 0f       	add	r30, r30
   121be:	ff 1f       	adc	r31, r31
   121c0:	ec 0d       	add	r30, r12
   121c2:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   121c4:	01 90       	ld	r0, Z+
   121c6:	f0 81       	ld	r31, Z
   121c8:	e0 2d       	mov	r30, r0
   121ca:	80 81       	ld	r24, Z
   121cc:	8d 33       	cpi	r24, 0x3D	; 61
   121ce:	09 f4       	brne	.+2      	; 0x121d2 <gpib_tests+0x82>
            ++ind;
   121d0:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   121d2:	cc 0f       	add	r28, r28
   121d4:	dd 1f       	adc	r29, r29
   121d6:	cc 0d       	add	r28, r12
   121d8:	dd 1d       	adc	r29, r13
   121da:	88 81       	ld	r24, Y
   121dc:	99 81       	ldd	r25, Y+1	; 0x01
   121de:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   121e2:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   121e6:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   121ea:	ed b7       	in	r30, 0x3d	; 61
   121ec:	fe b7       	in	r31, 0x3e	; 62
   121ee:	75 83       	std	Z+5, r23	; 0x05
   121f0:	64 83       	std	Z+4, r22	; 0x04
   121f2:	88 ee       	ldi	r24, 0xE8	; 232
   121f4:	94 e1       	ldi	r25, 0x14	; 20
   121f6:	a0 e0       	ldi	r26, 0x00	; 0
   121f8:	81 83       	std	Z+1, r24	; 0x01
   121fa:	92 83       	std	Z+2, r25	; 0x02
   121fc:	a3 83       	std	Z+3, r26	; 0x03
   121fe:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12202:	9b c0       	rjmp	.+310    	; 0x1233a <gpib_tests+0x1ea>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   12204:	6e eb       	ldi	r22, 0xBE	; 190
   12206:	7d e0       	ldi	r23, 0x0D	; 13
   12208:	c7 01       	movw	r24, r14
   1220a:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1220e:	89 2b       	or	r24, r25
   12210:	69 f0       	breq	.+26     	; 0x1222c <gpib_tests+0xdc>
    {
        ptr = argv[ind];
   12212:	fe 01       	movw	r30, r28
   12214:	ee 0f       	add	r30, r30
   12216:	ff 1f       	adc	r31, r31
   12218:	ec 0d       	add	r30, r12
   1221a:	fd 1d       	adc	r31, r13
   1221c:	e0 80       	ld	r14, Z
   1221e:	f1 80       	ldd	r15, Z+1	; 0x01
		if(!ptr)
   12220:	e1 14       	cp	r14, r1
   12222:	f1 04       	cpc	r15, r1
   12224:	19 f4       	brne	.+6      	; 0x1222c <gpib_tests+0xdc>
		{
			display_mount();
   12226:	0e 94 92 9f 	call	0x13f24	; 0x13f24 <display_mount>
   1222a:	87 c0       	rjmp	.+270    	; 0x1233a <gpib_tests+0x1ea>
			return(1);
		}
	
    }

    if (MATCHI(ptr,"addresses") )
   1222c:	64 ec       	ldi	r22, 0xC4	; 196
   1222e:	7d e0       	ldi	r23, 0x0D	; 13
   12230:	c7 01       	movw	r24, r14
   12232:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   12236:	89 2b       	or	r24, r25
   12238:	c9 f0       	breq	.+50     	; 0x1226c <gpib_tests+0x11c>
    {
        ptr = argv[ind];
   1223a:	cc 0f       	add	r28, r28
   1223c:	dd 1f       	adc	r29, r29
   1223e:	cc 0d       	add	r28, r12
   12240:	dd 1d       	adc	r29, r13
   12242:	88 81       	ld	r24, Y
   12244:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12246:	00 97       	sbiw	r24, 0x00	; 0
   12248:	69 f0       	breq	.+26     	; 0x12264 <gpib_tests+0x114>
   1224a:	fc 01       	movw	r30, r24
   1224c:	20 81       	ld	r18, Z
   1224e:	22 23       	and	r18, r18
   12250:	49 f0       	breq	.+18     	; 0x12264 <gpib_tests+0x114>
   12252:	6e ec       	ldi	r22, 0xCE	; 206
   12254:	7d e0       	ldi	r23, 0x0D	; 13
   12256:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1225a:	89 2b       	or	r24, r25
   1225c:	19 f0       	breq	.+6      	; 0x12264 <gpib_tests+0x114>
            display_Addresses(1);
   1225e:	81 e0       	ldi	r24, 0x01	; 1
   12260:	90 e0       	ldi	r25, 0x00	; 0
   12262:	02 c0       	rjmp	.+4      	; 0x12268 <gpib_tests+0x118>
        else
            display_Addresses(0);
   12264:	80 e0       	ldi	r24, 0x00	; 0
   12266:	90 e0       	ldi	r25, 0x00	; 0
   12268:	4c d1       	rcall	.+664    	; 0x12502 <display_Addresses>
   1226a:	67 c0       	rjmp	.+206    	; 0x1233a <gpib_tests+0x1ea>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   1226c:	61 ed       	ldi	r22, 0xD1	; 209
   1226e:	7d e0       	ldi	r23, 0x0D	; 13
   12270:	c7 01       	movw	r24, r14
   12272:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   12276:	89 2b       	or	r24, r25
   12278:	d9 f0       	breq	.+54     	; 0x122b0 <gpib_tests+0x160>
    {
        ptr = argv[ind];
   1227a:	ce 01       	movw	r24, r28
   1227c:	88 0f       	add	r24, r24
   1227e:	99 1f       	adc	r25, r25
   12280:	e6 01       	movw	r28, r12
   12282:	c8 0f       	add	r28, r24
   12284:	d9 1f       	adc	r29, r25
   12286:	88 81       	ld	r24, Y
   12288:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1228a:	00 97       	sbiw	r24, 0x00	; 0
   1228c:	69 f0       	breq	.+26     	; 0x122a8 <gpib_tests+0x158>
   1228e:	fc 01       	movw	r30, r24
   12290:	20 81       	ld	r18, Z
   12292:	22 23       	and	r18, r18
   12294:	49 f0       	breq	.+18     	; 0x122a8 <gpib_tests+0x158>
   12296:	6e ec       	ldi	r22, 0xCE	; 206
   12298:	7d e0       	ldi	r23, 0x0D	; 13
   1229a:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1229e:	89 2b       	or	r24, r25
   122a0:	19 f0       	breq	.+6      	; 0x122a8 <gpib_tests+0x158>
            display_Config(1);
   122a2:	81 e0       	ldi	r24, 0x01	; 1
   122a4:	90 e0       	ldi	r25, 0x00	; 0
   122a6:	02 c0       	rjmp	.+4      	; 0x122ac <gpib_tests+0x15c>
        else
            display_Config(0);
   122a8:	80 e0       	ldi	r24, 0x00	; 0
   122aa:	90 e0       	ldi	r25, 0x00	; 0
   122ac:	05 d2       	rcall	.+1034   	; 0x126b8 <display_Config>
   122ae:	45 c0       	rjmp	.+138    	; 0x1233a <gpib_tests+0x1ea>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   122b0:	68 ed       	ldi	r22, 0xD8	; 216
   122b2:	7d e0       	ldi	r23, 0x0D	; 13
   122b4:	c7 01       	movw	r24, r14
   122b6:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   122ba:	89 2b       	or	r24, r25
   122bc:	19 f0       	breq	.+6      	; 0x122c4 <gpib_tests+0x174>
    {
        gpib_timer_elapsed_begin();
   122be:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   122c2:	3b c0       	rjmp	.+118    	; 0x1233a <gpib_tests+0x1ea>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   122c4:	66 ee       	ldi	r22, 0xE6	; 230
   122c6:	7d e0       	ldi	r23, 0x0D	; 13
   122c8:	c7 01       	movw	r24, r14
   122ca:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   122ce:	89 2b       	or	r24, r25
   122d0:	29 f0       	breq	.+10     	; 0x122dc <gpib_tests+0x18c>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   122d2:	8e ee       	ldi	r24, 0xEE	; 238
   122d4:	9d e0       	ldi	r25, 0x0D	; 13
   122d6:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   122da:	2f c0       	rjmp	.+94     	; 0x1233a <gpib_tests+0x1ea>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   122dc:	6c ef       	ldi	r22, 0xFC	; 252
   122de:	7d e0       	ldi	r23, 0x0D	; 13
   122e0:	c7 01       	movw	r24, r14
   122e2:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   122e6:	89 2b       	or	r24, r25
    {
        gpib_task();
   122e8:	11 f0       	breq	.+4      	; 0x122ee <gpib_tests+0x19e>
   122ea:	b1 de       	rcall	.-670    	; 0x1204e <gpib_task>
   122ec:	26 c0       	rjmp	.+76     	; 0x1233a <gpib_tests+0x1ea>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   122ee:	8e 01       	movw	r16, r28
   122f0:	0f 5f       	subi	r16, 0xFF	; 255
   122f2:	1f 4f       	sbci	r17, 0xFF	; 255
   122f4:	95 01       	movw	r18, r10
   122f6:	a8 01       	movw	r20, r16
   122f8:	61 e0       	ldi	r22, 0x01	; 1
   122fa:	7e e0       	ldi	r23, 0x0E	; 14
   122fc:	c7 01       	movw	r24, r14
   122fe:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   12302:	89 2b       	or	r24, r25
   12304:	09 f4       	brne	.+2      	; 0x12308 <gpib_tests+0x1b8>
   12306:	30 cf       	rjmp	.-416    	; 0x12168 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12308:	00 0f       	add	r16, r16
   1230a:	11 1f       	adc	r17, r17
   1230c:	e6 01       	movw	r28, r12
   1230e:	c0 0f       	add	r28, r16
   12310:	d1 1f       	adc	r29, r17
   12312:	88 81       	ld	r24, Y
   12314:	99 81       	ldd	r25, Y+1	; 0x01
   12316:	00 97       	sbiw	r24, 0x00	; 0
   12318:	51 f0       	breq	.+20     	; 0x1232e <gpib_tests+0x1de>
   1231a:	67 e0       	ldi	r22, 0x07	; 7
   1231c:	7e e0       	ldi	r23, 0x0E	; 14
   1231e:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12322:	61 e0       	ldi	r22, 0x01	; 1
   12324:	70 e0       	ldi	r23, 0x00	; 0
   12326:	89 2b       	or	r24, r25
   12328:	21 f4       	brne	.+8      	; 0x12332 <gpib_tests+0x1e2>
   1232a:	60 e0       	ldi	r22, 0x00	; 0
   1232c:	02 c0       	rjmp	.+4      	; 0x12332 <gpib_tests+0x1e2>
   1232e:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12330:	70 e0       	ldi	r23, 0x00	; 0
   12332:	22 97       	sbiw	r28, 0x02	; 2
   12334:	88 81       	ld	r24, Y
   12336:	99 81       	ldd	r25, Y+1	; 0x01
   12338:	28 da       	rcall	.-2992   	; 0x1178a <gpib_trace_task>
        return(1);
   1233a:	81 e0       	ldi	r24, 0x01	; 1
   1233c:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   1233e:	cd b7       	in	r28, 0x3d	; 61
   12340:	de b7       	in	r29, 0x3e	; 62
   12342:	25 96       	adiw	r28, 0x05	; 5
   12344:	ea e0       	ldi	r30, 0x0A	; 10
   12346:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

0001234a <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   1234a:	ef 92       	push	r14
   1234c:	ff 92       	push	r15
   1234e:	0f 93       	push	r16
   12350:	1f 93       	push	r17
   12352:	cf 93       	push	r28
   12354:	df 93       	push	r29
   12356:	7c 01       	movw	r14, r24
   12358:	c4 ec       	ldi	r28, 0xC4	; 196
   1235a:	d1 e0       	ldi	r29, 0x01	; 1
   1235c:	00 e0       	ldi	r16, 0x00	; 0
   1235e:	10 e0       	ldi	r17, 0x00	; 0
   12360:	8a 81       	ldd	r24, Y+2	; 0x02
   12362:	9b 81       	ldd	r25, Y+3	; 0x03
   12364:	8f 3f       	cpi	r24, 0xFF	; 255
   12366:	2f ef       	ldi	r18, 0xFF	; 255
   12368:	92 07       	cpc	r25, r18
   1236a:	61 f0       	breq	.+24     	; 0x12384 <tok_index+0x3a>
   1236c:	68 81       	ld	r22, Y
   1236e:	79 81       	ldd	r23, Y+1	; 0x01
   12370:	c7 01       	movw	r24, r14
   12372:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   12376:	24 96       	adiw	r28, 0x04	; 4
   12378:	89 2b       	or	r24, r25
   1237a:	19 f4       	brne	.+6      	; 0x12382 <tok_index+0x38>
   1237c:	0f 5f       	subi	r16, 0xFF	; 255
   1237e:	1f 4f       	sbci	r17, 0xFF	; 255
   12380:	ef cf       	rjmp	.-34     	; 0x12360 <tok_index+0x16>
   12382:	c8 01       	movw	r24, r16
   12384:	cd b7       	in	r28, 0x3d	; 61
   12386:	de b7       	in	r29, 0x3e	; 62
   12388:	e6 e0       	ldi	r30, 0x06	; 6
   1238a:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0001238e <tok_name>:
   1238e:	e4 ec       	ldi	r30, 0xC4	; 196
   12390:	f1 e0       	ldi	r31, 0x01	; 1
   12392:	20 e0       	ldi	r18, 0x00	; 0
   12394:	30 e0       	ldi	r19, 0x00	; 0
   12396:	90 e0       	ldi	r25, 0x00	; 0
   12398:	42 81       	ldd	r20, Z+2	; 0x02
   1239a:	53 81       	ldd	r21, Z+3	; 0x03
   1239c:	4f 3f       	cpi	r20, 0xFF	; 255
   1239e:	6f ef       	ldi	r22, 0xFF	; 255
   123a0:	56 07       	cpc	r21, r22
   123a2:	89 f0       	breq	.+34     	; 0x123c6 <tok_name+0x38>
   123a4:	34 96       	adiw	r30, 0x04	; 4
   123a6:	48 17       	cp	r20, r24
   123a8:	59 07       	cpc	r21, r25
   123aa:	51 f4       	brne	.+20     	; 0x123c0 <tok_name+0x32>
   123ac:	22 0f       	add	r18, r18
   123ae:	33 1f       	adc	r19, r19
   123b0:	22 0f       	add	r18, r18
   123b2:	33 1f       	adc	r19, r19
   123b4:	f9 01       	movw	r30, r18
   123b6:	ec 53       	subi	r30, 0x3C	; 60
   123b8:	fe 4f       	sbci	r31, 0xFE	; 254
   123ba:	80 81       	ld	r24, Z
   123bc:	91 81       	ldd	r25, Z+1	; 0x01
   123be:	08 95       	ret
   123c0:	2f 5f       	subi	r18, 0xFF	; 255
   123c2:	3f 4f       	sbci	r19, 0xFF	; 255
   123c4:	e9 cf       	rjmp	.-46     	; 0x12398 <tok_name+0xa>
   123c6:	8d e2       	ldi	r24, 0x2D	; 45
   123c8:	9c e0       	ldi	r25, 0x0C	; 12
   123ca:	08 95       	ret

000123cc <print_tok_val>:
   123cc:	cf 92       	push	r12
   123ce:	df 92       	push	r13
   123d0:	ef 92       	push	r14
   123d2:	ff 92       	push	r15
   123d4:	0f 93       	push	r16
   123d6:	1f 93       	push	r17
   123d8:	cf 93       	push	r28
   123da:	ad b7       	in	r26, 0x3d	; 61
   123dc:	be b7       	in	r27, 0x3e	; 62
   123de:	1d 97       	sbiw	r26, 0x0d	; 13
   123e0:	0f b6       	in	r0, 0x3f	; 63
   123e2:	f8 94       	cli
   123e4:	be bf       	out	0x3e, r27	; 62
   123e6:	0f be       	out	0x3f, r0	; 63
   123e8:	ad bf       	out	0x3d, r26	; 61
   123ea:	c6 2f       	mov	r28, r22
   123ec:	69 01       	movw	r12, r18
   123ee:	7a 01       	movw	r14, r20
   123f0:	ce df       	rcall	.-100    	; 0x1238e <tok_name>
   123f2:	8c 01       	movw	r16, r24
   123f4:	cc 23       	and	r28, r28
   123f6:	31 f0       	breq	.+12     	; 0x12404 <print_tok_val+0x38>
   123f8:	80 e2       	ldi	r24, 0x20	; 32
   123fa:	90 e0       	ldi	r25, 0x00	; 0
   123fc:	0e 94 03 75 	call	0xea06	; 0xea06 <putchar>
   12400:	c1 50       	subi	r28, 0x01	; 1
   12402:	f8 cf       	rjmp	.-16     	; 0x123f4 <print_tok_val+0x28>
   12404:	ed b7       	in	r30, 0x3d	; 61
   12406:	fe b7       	in	r31, 0x3e	; 62
   12408:	c2 86       	std	Z+10, r12	; 0x0a
   1240a:	d3 86       	std	Z+11, r13	; 0x0b
   1240c:	e4 86       	std	Z+12, r14	; 0x0c
   1240e:	f5 86       	std	Z+13, r15	; 0x0d
   12410:	c6 82       	std	Z+6, r12	; 0x06
   12412:	d7 82       	std	Z+7, r13	; 0x07
   12414:	e0 86       	std	Z+8, r14	; 0x08
   12416:	f1 86       	std	Z+9, r15	; 0x09
   12418:	15 83       	std	Z+5, r17	; 0x05
   1241a:	04 83       	std	Z+4, r16	; 0x04
   1241c:	8c e8       	ldi	r24, 0x8C	; 140
   1241e:	9d e1       	ldi	r25, 0x1D	; 29
   12420:	a0 e0       	ldi	r26, 0x00	; 0
   12422:	81 83       	std	Z+1, r24	; 0x01
   12424:	92 83       	std	Z+2, r25	; 0x02
   12426:	a3 83       	std	Z+3, r26	; 0x03
   12428:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1242c:	ad b7       	in	r26, 0x3d	; 61
   1242e:	be b7       	in	r27, 0x3e	; 62
   12430:	1d 96       	adiw	r26, 0x0d	; 13
   12432:	0f b6       	in	r0, 0x3f	; 63
   12434:	f8 94       	cli
   12436:	be bf       	out	0x3e, r27	; 62
   12438:	0f be       	out	0x3f, r0	; 63
   1243a:	ad bf       	out	0x3d, r26	; 61
   1243c:	cf 91       	pop	r28
   1243e:	1f 91       	pop	r17
   12440:	0f 91       	pop	r16
   12442:	ff 90       	pop	r15
   12444:	ef 90       	pop	r14
   12446:	df 90       	pop	r13
   12448:	cf 90       	pop	r12
   1244a:	08 95       	ret

0001244c <print_tok_str>:
   1244c:	ef 92       	push	r14
   1244e:	ff 92       	push	r15
   12450:	0f 93       	push	r16
   12452:	1f 93       	push	r17
   12454:	cf 93       	push	r28
   12456:	ad b7       	in	r26, 0x3d	; 61
   12458:	be b7       	in	r27, 0x3e	; 62
   1245a:	17 97       	sbiw	r26, 0x07	; 7
   1245c:	0f b6       	in	r0, 0x3f	; 63
   1245e:	f8 94       	cli
   12460:	be bf       	out	0x3e, r27	; 62
   12462:	0f be       	out	0x3f, r0	; 63
   12464:	ad bf       	out	0x3d, r26	; 61
   12466:	c6 2f       	mov	r28, r22
   12468:	7a 01       	movw	r14, r20
   1246a:	91 df       	rcall	.-222    	; 0x1238e <tok_name>
   1246c:	8c 01       	movw	r16, r24
   1246e:	cc 23       	and	r28, r28
   12470:	31 f0       	breq	.+12     	; 0x1247e <print_tok_str+0x32>
   12472:	80 e2       	ldi	r24, 0x20	; 32
   12474:	90 e0       	ldi	r25, 0x00	; 0
   12476:	0e 94 03 75 	call	0xea06	; 0xea06 <putchar>
   1247a:	c1 50       	subi	r28, 0x01	; 1
   1247c:	f8 cf       	rjmp	.-16     	; 0x1246e <print_tok_str+0x22>
   1247e:	ed b7       	in	r30, 0x3d	; 61
   12480:	fe b7       	in	r31, 0x3e	; 62
   12482:	f7 82       	std	Z+7, r15	; 0x07
   12484:	e6 82       	std	Z+6, r14	; 0x06
   12486:	15 83       	std	Z+5, r17	; 0x05
   12488:	04 83       	std	Z+4, r16	; 0x04
   1248a:	80 e8       	ldi	r24, 0x80	; 128
   1248c:	9d e1       	ldi	r25, 0x1D	; 29
   1248e:	a0 e0       	ldi	r26, 0x00	; 0
   12490:	81 83       	std	Z+1, r24	; 0x01
   12492:	92 83       	std	Z+2, r25	; 0x02
   12494:	a3 83       	std	Z+3, r26	; 0x03
   12496:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1249a:	ad b7       	in	r26, 0x3d	; 61
   1249c:	be b7       	in	r27, 0x3e	; 62
   1249e:	17 96       	adiw	r26, 0x07	; 7
   124a0:	0f b6       	in	r0, 0x3f	; 63
   124a2:	f8 94       	cli
   124a4:	be bf       	out	0x3e, r27	; 62
   124a6:	0f be       	out	0x3f, r0	; 63
   124a8:	ad bf       	out	0x3d, r26	; 61
   124aa:	cf 91       	pop	r28
   124ac:	1f 91       	pop	r17
   124ae:	0f 91       	pop	r16
   124b0:	ff 90       	pop	r15
   124b2:	ef 90       	pop	r14
   124b4:	08 95       	ret

000124b6 <print_tok>:
   124b6:	0f 93       	push	r16
   124b8:	1f 93       	push	r17
   124ba:	cf 93       	push	r28
   124bc:	00 d0       	rcall	.+0      	; 0x124be <print_tok+0x8>
   124be:	00 d0       	rcall	.+0      	; 0x124c0 <print_tok+0xa>
   124c0:	1f 92       	push	r1
   124c2:	c6 2f       	mov	r28, r22
   124c4:	64 df       	rcall	.-312    	; 0x1238e <tok_name>
   124c6:	8c 01       	movw	r16, r24
   124c8:	cc 23       	and	r28, r28
   124ca:	31 f0       	breq	.+12     	; 0x124d8 <print_tok+0x22>
   124cc:	80 e2       	ldi	r24, 0x20	; 32
   124ce:	90 e0       	ldi	r25, 0x00	; 0
   124d0:	0e 94 03 75 	call	0xea06	; 0xea06 <putchar>
   124d4:	c1 50       	subi	r28, 0x01	; 1
   124d6:	f8 cf       	rjmp	.-16     	; 0x124c8 <print_tok+0x12>
   124d8:	ed b7       	in	r30, 0x3d	; 61
   124da:	fe b7       	in	r31, 0x3e	; 62
   124dc:	15 83       	std	Z+5, r17	; 0x05
   124de:	04 83       	std	Z+4, r16	; 0x04
   124e0:	8c e7       	ldi	r24, 0x7C	; 124
   124e2:	9d e1       	ldi	r25, 0x1D	; 29
   124e4:	a0 e0       	ldi	r26, 0x00	; 0
   124e6:	81 83       	std	Z+1, r24	; 0x01
   124e8:	92 83       	std	Z+2, r25	; 0x02
   124ea:	a3 83       	std	Z+3, r26	; 0x03
   124ec:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   124f0:	0f 90       	pop	r0
   124f2:	0f 90       	pop	r0
   124f4:	0f 90       	pop	r0
   124f6:	0f 90       	pop	r0
   124f8:	0f 90       	pop	r0
   124fa:	cf 91       	pop	r28
   124fc:	1f 91       	pop	r17
   124fe:	0f 91       	pop	r16
   12500:	08 95       	ret

00012502 <display_Addresses>:
   12502:	2f 92       	push	r2
   12504:	3f 92       	push	r3
   12506:	4f 92       	push	r4
   12508:	6f 92       	push	r6
   1250a:	7f 92       	push	r7
   1250c:	8f 92       	push	r8
   1250e:	cf 92       	push	r12
   12510:	df 92       	push	r13
   12512:	ef 92       	push	r14
   12514:	cf 93       	push	r28
   12516:	df 93       	push	r29
   12518:	cd b7       	in	r28, 0x3d	; 61
   1251a:	de b7       	in	r29, 0x3e	; 62
   1251c:	2a 97       	sbiw	r28, 0x0a	; 10
   1251e:	0f b6       	in	r0, 0x3f	; 63
   12520:	f8 94       	cli
   12522:	de bf       	out	0x3e, r29	; 62
   12524:	0f be       	out	0x3f, r0	; 63
   12526:	cd bf       	out	0x3d, r28	; 61
   12528:	86 e4       	ldi	r24, 0x46	; 70
   1252a:	9a e1       	ldi	r25, 0x1A	; 26
   1252c:	a0 e0       	ldi	r26, 0x00	; 0
   1252e:	ed b7       	in	r30, 0x3d	; 61
   12530:	fe b7       	in	r31, 0x3e	; 62
   12532:	81 83       	std	Z+1, r24	; 0x01
   12534:	92 83       	std	Z+2, r25	; 0x02
   12536:	a3 83       	std	Z+3, r26	; 0x03
   12538:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1253c:	2a ee       	ldi	r18, 0xEA	; 234
   1253e:	3e e1       	ldi	r19, 0x1E	; 30
   12540:	3a 87       	std	Y+10, r19	; 0x0a
   12542:	29 87       	std	Y+9, r18	; 0x09
   12544:	88 e2       	ldi	r24, 0x28	; 40
   12546:	9a e1       	ldi	r25, 0x1A	; 26
   12548:	6c 01       	movw	r12, r24
   1254a:	e1 2c       	mov	r14, r1
   1254c:	8a e2       	ldi	r24, 0x2A	; 42
   1254e:	9a e1       	ldi	r25, 0x1A	; 26
   12550:	3c 01       	movw	r6, r24
   12552:	81 2c       	mov	r8, r1
   12554:	83 e3       	ldi	r24, 0x33	; 51
   12556:	9a e1       	ldi	r25, 0x1A	; 26
   12558:	1c 01       	movw	r2, r24
   1255a:	41 2c       	mov	r4, r1
   1255c:	8d e3       	ldi	r24, 0x3D	; 61
   1255e:	9a e1       	ldi	r25, 0x1A	; 26
   12560:	9c 01       	movw	r18, r24
   12562:	40 e0       	ldi	r20, 0x00	; 0
   12564:	2e 83       	std	Y+6, r18	; 0x06
   12566:	3f 83       	std	Y+7, r19	; 0x07
   12568:	48 87       	std	Y+8, r20	; 0x08
   1256a:	e9 85       	ldd	r30, Y+9	; 0x09
   1256c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1256e:	80 81       	ld	r24, Z
   12570:	88 23       	and	r24, r24
   12572:	09 f4       	brne	.+2      	; 0x12576 <display_Addresses+0x74>
   12574:	7b c0       	rjmp	.+246    	; 0x1266c <display_Addresses+0x16a>
   12576:	83 30       	cpi	r24, 0x03	; 3
   12578:	21 f0       	breq	.+8      	; 0x12582 <display_Addresses+0x80>
   1257a:	81 30       	cpi	r24, 0x01	; 1
   1257c:	09 f0       	breq	.+2      	; 0x12580 <display_Addresses+0x7e>
   1257e:	5a c0       	rjmp	.+180    	; 0x12634 <display_Addresses+0x132>
   12580:	1f c0       	rjmp	.+62     	; 0x125c0 <display_Addresses+0xbe>
   12582:	e9 85       	ldd	r30, Y+9	; 0x09
   12584:	fa 85       	ldd	r31, Y+10	; 0x0a
   12586:	87 a1       	ldd	r24, Z+39	; 0x27
   12588:	90 a5       	ldd	r25, Z+40	; 0x28
   1258a:	90 93 60 19 	sts	0x1960, r25	; 0x801960 <SS80p+0x1>
   1258e:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <SS80p>
   12592:	cf 01       	movw	r24, r30
   12594:	07 96       	adiw	r24, 0x07	; 7
   12596:	ed b7       	in	r30, 0x3d	; 61
   12598:	fe b7       	in	r31, 0x3e	; 62
   1259a:	95 83       	std	Z+5, r25	; 0x05
   1259c:	84 83       	std	Z+4, r24	; 0x04
   1259e:	2e 81       	ldd	r18, Y+6	; 0x06
   125a0:	3f 81       	ldd	r19, Y+7	; 0x07
   125a2:	48 85       	ldd	r20, Y+8	; 0x08
   125a4:	21 83       	std	Z+1, r18	; 0x01
   125a6:	32 83       	std	Z+2, r19	; 0x02
   125a8:	43 83       	std	Z+3, r20	; 0x03
   125aa:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   125ae:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   125b2:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   125b6:	42 81       	ldd	r20, Z+2	; 0x02
   125b8:	53 81       	ldd	r21, Z+3	; 0x03
   125ba:	64 e0       	ldi	r22, 0x04	; 4
   125bc:	82 e1       	ldi	r24, 0x12	; 18
   125be:	46 df       	rcall	.-372    	; 0x1244c <print_tok_str>
   125c0:	e9 85       	ldd	r30, Y+9	; 0x09
   125c2:	fa 85       	ldd	r31, Y+10	; 0x0a
   125c4:	80 81       	ld	r24, Z
   125c6:	81 30       	cpi	r24, 0x01	; 1
   125c8:	d1 f4       	brne	.+52     	; 0x125fe <display_Addresses+0xfc>
   125ca:	87 a1       	ldd	r24, Z+39	; 0x27
   125cc:	90 a5       	ldd	r25, Z+40	; 0x28
   125ce:	90 93 5c 19 	sts	0x195C, r25	; 0x80195c <AMIGOp+0x1>
   125d2:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <AMIGOp>
   125d6:	cf 01       	movw	r24, r30
   125d8:	07 96       	adiw	r24, 0x07	; 7
   125da:	ed b7       	in	r30, 0x3d	; 61
   125dc:	fe b7       	in	r31, 0x3e	; 62
   125de:	95 83       	std	Z+5, r25	; 0x05
   125e0:	84 83       	std	Z+4, r24	; 0x04
   125e2:	21 82       	std	Z+1, r2	; 0x01
   125e4:	32 82       	std	Z+2, r3	; 0x02
   125e6:	43 82       	std	Z+3, r4	; 0x03
   125e8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   125ec:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   125f0:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   125f4:	42 81       	ldd	r20, Z+2	; 0x02
   125f6:	53 81       	ldd	r21, Z+3	; 0x03
   125f8:	64 e0       	ldi	r22, 0x04	; 4
   125fa:	82 e1       	ldi	r24, 0x12	; 18
   125fc:	27 df       	rcall	.-434    	; 0x1244c <print_tok_str>
   125fe:	e9 85       	ldd	r30, Y+9	; 0x09
   12600:	fa 85       	ldd	r31, Y+10	; 0x0a
   12602:	21 81       	ldd	r18, Z+1	; 0x01
   12604:	30 e0       	ldi	r19, 0x00	; 0
   12606:	40 e0       	ldi	r20, 0x00	; 0
   12608:	50 e0       	ldi	r21, 0x00	; 0
   1260a:	64 e0       	ldi	r22, 0x04	; 4
   1260c:	81 e0       	ldi	r24, 0x01	; 1
   1260e:	de de       	rcall	.-580    	; 0x123cc <print_tok_val>
   12610:	e9 85       	ldd	r30, Y+9	; 0x09
   12612:	fa 85       	ldd	r31, Y+10	; 0x0a
   12614:	22 81       	ldd	r18, Z+2	; 0x02
   12616:	30 e0       	ldi	r19, 0x00	; 0
   12618:	40 e0       	ldi	r20, 0x00	; 0
   1261a:	50 e0       	ldi	r21, 0x00	; 0
   1261c:	64 e0       	ldi	r22, 0x04	; 4
   1261e:	8f e1       	ldi	r24, 0x1F	; 31
   12620:	d5 de       	rcall	.-598    	; 0x123cc <print_tok_val>
   12622:	e9 85       	ldd	r30, Y+9	; 0x09
   12624:	fa 85       	ldd	r31, Y+10	; 0x0a
   12626:	23 81       	ldd	r18, Z+3	; 0x03
   12628:	34 81       	ldd	r19, Z+4	; 0x04
   1262a:	45 81       	ldd	r20, Z+5	; 0x05
   1262c:	56 81       	ldd	r21, Z+6	; 0x06
   1262e:	64 e0       	ldi	r22, 0x04	; 4
   12630:	83 e0       	ldi	r24, 0x03	; 3
   12632:	cc de       	rcall	.-616    	; 0x123cc <print_tok_val>
   12634:	e9 85       	ldd	r30, Y+9	; 0x09
   12636:	fa 85       	ldd	r31, Y+10	; 0x0a
   12638:	80 81       	ld	r24, Z
   1263a:	84 30       	cpi	r24, 0x04	; 4
   1263c:	81 f4       	brne	.+32     	; 0x1265e <display_Addresses+0x15c>
   1263e:	ed b7       	in	r30, 0x3d	; 61
   12640:	fe b7       	in	r31, 0x3e	; 62
   12642:	61 82       	std	Z+1, r6	; 0x01
   12644:	72 82       	std	Z+2, r7	; 0x02
   12646:	83 82       	std	Z+3, r8	; 0x03
   12648:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1264c:	e9 85       	ldd	r30, Y+9	; 0x09
   1264e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12650:	21 81       	ldd	r18, Z+1	; 0x01
   12652:	30 e0       	ldi	r19, 0x00	; 0
   12654:	40 e0       	ldi	r20, 0x00	; 0
   12656:	50 e0       	ldi	r21, 0x00	; 0
   12658:	64 e0       	ldi	r22, 0x04	; 4
   1265a:	81 e0       	ldi	r24, 0x01	; 1
   1265c:	b7 de       	rcall	.-658    	; 0x123cc <print_tok_val>
   1265e:	ed b7       	in	r30, 0x3d	; 61
   12660:	fe b7       	in	r31, 0x3e	; 62
   12662:	c1 82       	std	Z+1, r12	; 0x01
   12664:	d2 82       	std	Z+2, r13	; 0x02
   12666:	e3 82       	std	Z+3, r14	; 0x03
   12668:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1266c:	29 85       	ldd	r18, Y+9	; 0x09
   1266e:	3a 85       	ldd	r19, Y+10	; 0x0a
   12670:	25 5d       	subi	r18, 0xD5	; 213
   12672:	3f 4f       	sbci	r19, 0xFF	; 255
   12674:	3a 87       	std	Y+10, r19	; 0x0a
   12676:	29 87       	std	Y+9, r18	; 0x09
   12678:	2e 5e       	subi	r18, 0xEE	; 238
   1267a:	30 42       	sbci	r19, 0x20	; 32
   1267c:	09 f0       	breq	.+2      	; 0x12680 <display_Addresses+0x17e>
   1267e:	75 cf       	rjmp	.-278    	; 0x1256a <display_Addresses+0x68>
   12680:	86 e2       	ldi	r24, 0x26	; 38
   12682:	9a e1       	ldi	r25, 0x1A	; 26
   12684:	a0 e0       	ldi	r26, 0x00	; 0
   12686:	ed b7       	in	r30, 0x3d	; 61
   12688:	fe b7       	in	r31, 0x3e	; 62
   1268a:	81 83       	std	Z+1, r24	; 0x01
   1268c:	92 83       	std	Z+2, r25	; 0x02
   1268e:	a3 83       	std	Z+3, r26	; 0x03
   12690:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12694:	2a 96       	adiw	r28, 0x0a	; 10
   12696:	0f b6       	in	r0, 0x3f	; 63
   12698:	f8 94       	cli
   1269a:	de bf       	out	0x3e, r29	; 62
   1269c:	0f be       	out	0x3f, r0	; 63
   1269e:	cd bf       	out	0x3d, r28	; 61
   126a0:	df 91       	pop	r29
   126a2:	cf 91       	pop	r28
   126a4:	ef 90       	pop	r14
   126a6:	df 90       	pop	r13
   126a8:	cf 90       	pop	r12
   126aa:	8f 90       	pop	r8
   126ac:	7f 90       	pop	r7
   126ae:	6f 90       	pop	r6
   126b0:	4f 90       	pop	r4
   126b2:	3f 90       	pop	r3
   126b4:	2f 90       	pop	r2
   126b6:	08 95       	ret

000126b8 <display_Config>:
   126b8:	2f 92       	push	r2
   126ba:	3f 92       	push	r3
   126bc:	4f 92       	push	r4
   126be:	6f 92       	push	r6
   126c0:	7f 92       	push	r7
   126c2:	8f 92       	push	r8
   126c4:	af 92       	push	r10
   126c6:	bf 92       	push	r11
   126c8:	cf 92       	push	r12
   126ca:	df 92       	push	r13
   126cc:	ef 92       	push	r14
   126ce:	0f 93       	push	r16
   126d0:	1f 93       	push	r17
   126d2:	cf 93       	push	r28
   126d4:	df 93       	push	r29
   126d6:	cd b7       	in	r28, 0x3d	; 61
   126d8:	de b7       	in	r29, 0x3e	; 62
   126da:	62 97       	sbiw	r28, 0x12	; 18
   126dc:	0f b6       	in	r0, 0x3f	; 63
   126de:	f8 94       	cli
   126e0:	de bf       	out	0x3e, r29	; 62
   126e2:	0f be       	out	0x3f, r0	; 63
   126e4:	cd bf       	out	0x3d, r28	; 61
   126e6:	5c 01       	movw	r10, r24
   126e8:	86 e0       	ldi	r24, 0x06	; 6
   126ea:	9a e1       	ldi	r25, 0x1A	; 26
   126ec:	a0 e0       	ldi	r26, 0x00	; 0
   126ee:	ed b7       	in	r30, 0x3d	; 61
   126f0:	fe b7       	in	r31, 0x3e	; 62
   126f2:	81 83       	std	Z+1, r24	; 0x01
   126f4:	92 83       	std	Z+2, r25	; 0x02
   126f6:	a3 83       	std	Z+3, r26	; 0x03
   126f8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   126fc:	0a ee       	ldi	r16, 0xEA	; 234
   126fe:	1e e1       	ldi	r17, 0x1E	; 30
   12700:	8b e8       	ldi	r24, 0x8B	; 139
   12702:	99 e1       	ldi	r25, 0x19	; 25
   12704:	9c 01       	movw	r18, r24
   12706:	40 e0       	ldi	r20, 0x00	; 0
   12708:	28 87       	std	Y+8, r18	; 0x08
   1270a:	39 87       	std	Y+9, r19	; 0x09
   1270c:	4a 87       	std	Y+10, r20	; 0x0a
   1270e:	80 ec       	ldi	r24, 0xC0	; 192
   12710:	99 e1       	ldi	r25, 0x19	; 25
   12712:	9c 01       	movw	r18, r24
   12714:	40 e0       	ldi	r20, 0x00	; 0
   12716:	2b 87       	std	Y+11, r18	; 0x0b
   12718:	3c 87       	std	Y+12, r19	; 0x0c
   1271a:	4d 87       	std	Y+13, r20	; 0x0d
   1271c:	81 ea       	ldi	r24, 0xA1	; 161
   1271e:	99 e1       	ldi	r25, 0x19	; 25
   12720:	9c 01       	movw	r18, r24
   12722:	40 e0       	ldi	r20, 0x00	; 0
   12724:	2e 87       	std	Y+14, r18	; 0x0e
   12726:	3f 87       	std	Y+15, r19	; 0x0f
   12728:	48 8b       	std	Y+16, r20	; 0x10
   1272a:	8d e8       	ldi	r24, 0x8D	; 141
   1272c:	99 e1       	ldi	r25, 0x19	; 25
   1272e:	1c 01       	movw	r2, r24
   12730:	41 2c       	mov	r4, r1
   12732:	8d ef       	ldi	r24, 0xFD	; 253
   12734:	99 e1       	ldi	r25, 0x19	; 25
   12736:	6c 01       	movw	r12, r24
   12738:	e1 2c       	mov	r14, r1
   1273a:	8e ed       	ldi	r24, 0xDE	; 222
   1273c:	99 e1       	ldi	r25, 0x19	; 25
   1273e:	3c 01       	movw	r6, r24
   12740:	81 2c       	mov	r8, r1
   12742:	f8 01       	movw	r30, r16
   12744:	80 81       	ld	r24, Z
   12746:	88 23       	and	r24, r24
   12748:	09 f4       	brne	.+2      	; 0x1274c <display_Config+0x94>
   1274a:	14 c2       	rjmp	.+1064   	; 0x12b74 <display_Config+0x4bc>
   1274c:	83 30       	cpi	r24, 0x03	; 3
   1274e:	09 f0       	breq	.+2      	; 0x12752 <display_Config+0x9a>
   12750:	38 c1       	rjmp	.+624    	; 0x129c2 <display_Config+0x30a>
   12752:	27 a1       	ldd	r18, Z+39	; 0x27
   12754:	30 a5       	ldd	r19, Z+40	; 0x28
   12756:	3a 8b       	std	Y+18, r19	; 0x12
   12758:	29 8b       	std	Y+17, r18	; 0x11
   1275a:	c8 01       	movw	r24, r16
   1275c:	07 96       	adiw	r24, 0x07	; 7
   1275e:	ed b7       	in	r30, 0x3d	; 61
   12760:	fe b7       	in	r31, 0x3e	; 62
   12762:	95 83       	std	Z+5, r25	; 0x05
   12764:	84 83       	std	Z+4, r24	; 0x04
   12766:	c1 82       	std	Z+1, r12	; 0x01
   12768:	d2 82       	std	Z+2, r13	; 0x02
   1276a:	e3 82       	std	Z+3, r14	; 0x03
   1276c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12770:	e9 89       	ldd	r30, Y+17	; 0x11
   12772:	fa 89       	ldd	r31, Y+18	; 0x12
   12774:	80 81       	ld	r24, Z
   12776:	90 e0       	ldi	r25, 0x00	; 0
   12778:	ed b7       	in	r30, 0x3d	; 61
   1277a:	fe b7       	in	r31, 0x3e	; 62
   1277c:	95 83       	std	Z+5, r25	; 0x05
   1277e:	84 83       	std	Z+4, r24	; 0x04
   12780:	61 82       	std	Z+1, r6	; 0x01
   12782:	72 82       	std	Z+2, r7	; 0x02
   12784:	83 82       	std	Z+3, r8	; 0x03
   12786:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1278a:	64 e0       	ldi	r22, 0x04	; 4
   1278c:	89 e0       	ldi	r24, 0x09	; 9
   1278e:	93 de       	rcall	.-730    	; 0x124b6 <print_tok>
   12790:	e9 89       	ldd	r30, Y+17	; 0x11
   12792:	fa 89       	ldd	r31, Y+18	; 0x12
   12794:	20 81       	ld	r18, Z
   12796:	30 e0       	ldi	r19, 0x00	; 0
   12798:	40 e0       	ldi	r20, 0x00	; 0
   1279a:	50 e0       	ldi	r21, 0x00	; 0
   1279c:	68 e0       	ldi	r22, 0x08	; 8
   1279e:	81 e0       	ldi	r24, 0x01	; 1
   127a0:	15 de       	rcall	.-982    	; 0x123cc <print_tok_val>
   127a2:	e9 89       	ldd	r30, Y+17	; 0x11
   127a4:	fa 89       	ldd	r31, Y+18	; 0x12
   127a6:	21 81       	ldd	r18, Z+1	; 0x01
   127a8:	30 e0       	ldi	r19, 0x00	; 0
   127aa:	40 e0       	ldi	r20, 0x00	; 0
   127ac:	50 e0       	ldi	r21, 0x00	; 0
   127ae:	68 e0       	ldi	r22, 0x08	; 8
   127b0:	8f e1       	ldi	r24, 0x1F	; 31
   127b2:	0c de       	rcall	.-1000   	; 0x123cc <print_tok_val>
   127b4:	e9 89       	ldd	r30, Y+17	; 0x11
   127b6:	fa 89       	ldd	r31, Y+18	; 0x12
   127b8:	42 81       	ldd	r20, Z+2	; 0x02
   127ba:	53 81       	ldd	r21, Z+3	; 0x03
   127bc:	68 e0       	ldi	r22, 0x08	; 8
   127be:	82 e1       	ldi	r24, 0x12	; 18
   127c0:	45 de       	rcall	.-886    	; 0x1244c <print_tok_str>
   127c2:	64 e0       	ldi	r22, 0x04	; 4
   127c4:	81 e1       	ldi	r24, 0x11	; 17
   127c6:	77 de       	rcall	.-786    	; 0x124b6 <print_tok>
   127c8:	64 e0       	ldi	r22, 0x04	; 4
   127ca:	85 e1       	ldi	r24, 0x15	; 21
   127cc:	74 de       	rcall	.-792    	; 0x124b6 <print_tok>
   127ce:	e9 89       	ldd	r30, Y+17	; 0x11
   127d0:	fa 89       	ldd	r31, Y+18	; 0x12
   127d2:	24 81       	ldd	r18, Z+4	; 0x04
   127d4:	35 81       	ldd	r19, Z+5	; 0x05
   127d6:	40 e0       	ldi	r20, 0x00	; 0
   127d8:	50 e0       	ldi	r21, 0x00	; 0
   127da:	68 e0       	ldi	r22, 0x08	; 8
   127dc:	87 e1       	ldi	r24, 0x17	; 23
   127de:	f6 dd       	rcall	.-1044   	; 0x123cc <print_tok_val>
   127e0:	64 e0       	ldi	r22, 0x04	; 4
   127e2:	81 e1       	ldi	r24, 0x11	; 17
   127e4:	68 de       	rcall	.-816    	; 0x124b6 <print_tok>
   127e6:	a1 14       	cp	r10, r1
   127e8:	b1 04       	cpc	r11, r1
   127ea:	09 f1       	breq	.+66     	; 0x1282e <display_Config+0x176>
   127ec:	64 e0       	ldi	r22, 0x04	; 4
   127ee:	8b e0       	ldi	r24, 0x0B	; 11
   127f0:	62 de       	rcall	.-828    	; 0x124b6 <print_tok>
   127f2:	e9 89       	ldd	r30, Y+17	; 0x11
   127f4:	fa 89       	ldd	r31, Y+18	; 0x12
   127f6:	26 81       	ldd	r18, Z+6	; 0x06
   127f8:	37 81       	ldd	r19, Z+7	; 0x07
   127fa:	40 e0       	ldi	r20, 0x00	; 0
   127fc:	50 e0       	ldi	r21, 0x00	; 0
   127fe:	68 e0       	ldi	r22, 0x08	; 8
   12800:	88 e2       	ldi	r24, 0x28	; 40
   12802:	e4 dd       	rcall	.-1080   	; 0x123cc <print_tok_val>
   12804:	e9 89       	ldd	r30, Y+17	; 0x11
   12806:	fa 89       	ldd	r31, Y+18	; 0x12
   12808:	20 85       	ldd	r18, Z+8	; 0x08
   1280a:	31 85       	ldd	r19, Z+9	; 0x09
   1280c:	40 e0       	ldi	r20, 0x00	; 0
   1280e:	50 e0       	ldi	r21, 0x00	; 0
   12810:	68 e0       	ldi	r22, 0x08	; 8
   12812:	85 e2       	ldi	r24, 0x25	; 37
   12814:	db dd       	rcall	.-1098   	; 0x123cc <print_tok_val>
   12816:	e9 89       	ldd	r30, Y+17	; 0x11
   12818:	fa 89       	ldd	r31, Y+18	; 0x12
   1281a:	22 85       	ldd	r18, Z+10	; 0x0a
   1281c:	30 e0       	ldi	r19, 0x00	; 0
   1281e:	40 e0       	ldi	r20, 0x00	; 0
   12820:	50 e0       	ldi	r21, 0x00	; 0
   12822:	68 e0       	ldi	r22, 0x08	; 8
   12824:	86 e2       	ldi	r24, 0x26	; 38
   12826:	d2 dd       	rcall	.-1116   	; 0x123cc <print_tok_val>
   12828:	64 e0       	ldi	r22, 0x04	; 4
   1282a:	81 e1       	ldi	r24, 0x11	; 17
   1282c:	44 de       	rcall	.-888    	; 0x124b6 <print_tok>
   1282e:	64 e0       	ldi	r22, 0x04	; 4
   12830:	87 e2       	ldi	r24, 0x27	; 39
   12832:	41 de       	rcall	.-894    	; 0x124b6 <print_tok>
   12834:	a1 14       	cp	r10, r1
   12836:	b1 04       	cpc	r11, r1
   12838:	49 f0       	breq	.+18     	; 0x1284c <display_Config+0x194>
   1283a:	e9 89       	ldd	r30, Y+17	; 0x11
   1283c:	fa 89       	ldd	r31, Y+18	; 0x12
   1283e:	23 85       	ldd	r18, Z+11	; 0x0b
   12840:	30 e0       	ldi	r19, 0x00	; 0
   12842:	40 e0       	ldi	r20, 0x00	; 0
   12844:	50 e0       	ldi	r21, 0x00	; 0
   12846:	68 e0       	ldi	r22, 0x08	; 8
   12848:	89 e2       	ldi	r24, 0x29	; 41
   1284a:	c0 dd       	rcall	.-1152   	; 0x123cc <print_tok_val>
   1284c:	e9 89       	ldd	r30, Y+17	; 0x11
   1284e:	fa 89       	ldd	r31, Y+18	; 0x12
   12850:	24 85       	ldd	r18, Z+12	; 0x0c
   12852:	35 85       	ldd	r19, Z+13	; 0x0d
   12854:	46 85       	ldd	r20, Z+14	; 0x0e
   12856:	57 85       	ldd	r21, Z+15	; 0x0f
   12858:	68 e0       	ldi	r22, 0x08	; 8
   1285a:	8f e0       	ldi	r24, 0x0F	; 15
   1285c:	b7 dd       	rcall	.-1170   	; 0x123cc <print_tok_val>
   1285e:	a1 14       	cp	r10, r1
   12860:	b1 04       	cpc	r11, r1
   12862:	09 f4       	brne	.+2      	; 0x12866 <display_Config+0x1ae>
   12864:	5a c0       	rjmp	.+180    	; 0x1291a <display_Config+0x262>
   12866:	e9 89       	ldd	r30, Y+17	; 0x11
   12868:	fa 89       	ldd	r31, Y+18	; 0x12
   1286a:	20 89       	ldd	r18, Z+16	; 0x10
   1286c:	31 89       	ldd	r19, Z+17	; 0x11
   1286e:	40 e0       	ldi	r20, 0x00	; 0
   12870:	50 e0       	ldi	r21, 0x00	; 0
   12872:	68 e0       	ldi	r22, 0x08	; 8
   12874:	87 e0       	ldi	r24, 0x07	; 7
   12876:	aa dd       	rcall	.-1196   	; 0x123cc <print_tok_val>
   12878:	e9 89       	ldd	r30, Y+17	; 0x11
   1287a:	fa 89       	ldd	r31, Y+18	; 0x12
   1287c:	22 89       	ldd	r18, Z+18	; 0x12
   1287e:	30 e0       	ldi	r19, 0x00	; 0
   12880:	40 e0       	ldi	r20, 0x00	; 0
   12882:	50 e0       	ldi	r21, 0x00	; 0
   12884:	68 e0       	ldi	r22, 0x08	; 8
   12886:	85 e0       	ldi	r24, 0x05	; 5
   12888:	a1 dd       	rcall	.-1214   	; 0x123cc <print_tok_val>
   1288a:	e9 89       	ldd	r30, Y+17	; 0x11
   1288c:	fa 89       	ldd	r31, Y+18	; 0x12
   1288e:	23 89       	ldd	r18, Z+19	; 0x13
   12890:	30 e0       	ldi	r19, 0x00	; 0
   12892:	40 e0       	ldi	r20, 0x00	; 0
   12894:	50 e0       	ldi	r21, 0x00	; 0
   12896:	68 e0       	ldi	r22, 0x08	; 8
   12898:	86 e0       	ldi	r24, 0x06	; 6
   1289a:	98 dd       	rcall	.-1232   	; 0x123cc <print_tok_val>
   1289c:	e9 89       	ldd	r30, Y+17	; 0x11
   1289e:	fa 89       	ldd	r31, Y+18	; 0x12
   128a0:	24 89       	ldd	r18, Z+20	; 0x14
   128a2:	35 89       	ldd	r19, Z+21	; 0x15
   128a4:	40 e0       	ldi	r20, 0x00	; 0
   128a6:	50 e0       	ldi	r21, 0x00	; 0
   128a8:	68 e0       	ldi	r22, 0x08	; 8
   128aa:	84 e0       	ldi	r24, 0x04	; 4
   128ac:	8f dd       	rcall	.-1250   	; 0x123cc <print_tok_val>
   128ae:	e9 89       	ldd	r30, Y+17	; 0x11
   128b0:	fa 89       	ldd	r31, Y+18	; 0x12
   128b2:	26 89       	ldd	r18, Z+22	; 0x16
   128b4:	37 89       	ldd	r19, Z+23	; 0x17
   128b6:	40 e0       	ldi	r20, 0x00	; 0
   128b8:	50 e0       	ldi	r21, 0x00	; 0
   128ba:	68 e0       	ldi	r22, 0x08	; 8
   128bc:	8a e0       	ldi	r24, 0x0A	; 10
   128be:	86 dd       	rcall	.-1268   	; 0x123cc <print_tok_val>
   128c0:	e9 89       	ldd	r30, Y+17	; 0x11
   128c2:	fa 89       	ldd	r31, Y+18	; 0x12
   128c4:	20 8d       	ldd	r18, Z+24	; 0x18
   128c6:	31 8d       	ldd	r19, Z+25	; 0x19
   128c8:	40 e0       	ldi	r20, 0x00	; 0
   128ca:	50 e0       	ldi	r21, 0x00	; 0
   128cc:	68 e0       	ldi	r22, 0x08	; 8
   128ce:	8e e1       	ldi	r24, 0x1E	; 30
   128d0:	7d dd       	rcall	.-1286   	; 0x123cc <print_tok_val>
   128d2:	e9 89       	ldd	r30, Y+17	; 0x11
   128d4:	fa 89       	ldd	r31, Y+18	; 0x12
   128d6:	22 8d       	ldd	r18, Z+26	; 0x1a
   128d8:	33 8d       	ldd	r19, Z+27	; 0x1b
   128da:	40 e0       	ldi	r20, 0x00	; 0
   128dc:	50 e0       	ldi	r21, 0x00	; 0
   128de:	68 e0       	ldi	r22, 0x08	; 8
   128e0:	80 e0       	ldi	r24, 0x00	; 0
   128e2:	74 dd       	rcall	.-1304   	; 0x123cc <print_tok_val>
   128e4:	e9 89       	ldd	r30, Y+17	; 0x11
   128e6:	fa 89       	ldd	r31, Y+18	; 0x12
   128e8:	24 8d       	ldd	r18, Z+28	; 0x1c
   128ea:	30 e0       	ldi	r19, 0x00	; 0
   128ec:	40 e0       	ldi	r20, 0x00	; 0
   128ee:	50 e0       	ldi	r21, 0x00	; 0
   128f0:	68 e0       	ldi	r22, 0x08	; 8
   128f2:	8c e1       	ldi	r24, 0x1C	; 28
   128f4:	6b dd       	rcall	.-1322   	; 0x123cc <print_tok_val>
   128f6:	e9 89       	ldd	r30, Y+17	; 0x11
   128f8:	fa 89       	ldd	r31, Y+18	; 0x12
   128fa:	25 8d       	ldd	r18, Z+29	; 0x1d
   128fc:	30 e0       	ldi	r19, 0x00	; 0
   128fe:	40 e0       	ldi	r20, 0x00	; 0
   12900:	50 e0       	ldi	r21, 0x00	; 0
   12902:	68 e0       	ldi	r22, 0x08	; 8
   12904:	83 e1       	ldi	r24, 0x13	; 19
   12906:	62 dd       	rcall	.-1340   	; 0x123cc <print_tok_val>
   12908:	e9 89       	ldd	r30, Y+17	; 0x11
   1290a:	fa 89       	ldd	r31, Y+18	; 0x12
   1290c:	26 8d       	ldd	r18, Z+30	; 0x1e
   1290e:	30 e0       	ldi	r19, 0x00	; 0
   12910:	40 e0       	ldi	r20, 0x00	; 0
   12912:	50 e0       	ldi	r21, 0x00	; 0
   12914:	68 e0       	ldi	r22, 0x08	; 8
   12916:	81 e2       	ldi	r24, 0x21	; 33
   12918:	59 dd       	rcall	.-1358   	; 0x123cc <print_tok_val>
   1291a:	64 e0       	ldi	r22, 0x04	; 4
   1291c:	81 e1       	ldi	r24, 0x11	; 17
   1291e:	cb dd       	rcall	.-1130   	; 0x124b6 <print_tok>
   12920:	a1 14       	cp	r10, r1
   12922:	b1 04       	cpc	r11, r1
   12924:	99 f1       	breq	.+102    	; 0x1298c <display_Config+0x2d4>
   12926:	64 e0       	ldi	r22, 0x04	; 4
   12928:	8a e2       	ldi	r24, 0x2A	; 42
   1292a:	c5 dd       	rcall	.-1142   	; 0x124b6 <print_tok>
   1292c:	e9 89       	ldd	r30, Y+17	; 0x11
   1292e:	fa 89       	ldd	r31, Y+18	; 0x12
   12930:	27 8d       	ldd	r18, Z+31	; 0x1f
   12932:	30 a1       	ldd	r19, Z+32	; 0x20
   12934:	41 a1       	ldd	r20, Z+33	; 0x21
   12936:	52 a1       	ldd	r21, Z+34	; 0x22
   12938:	68 e0       	ldi	r22, 0x08	; 8
   1293a:	8a e1       	ldi	r24, 0x1A	; 26
   1293c:	47 dd       	rcall	.-1394   	; 0x123cc <print_tok_val>
   1293e:	e9 89       	ldd	r30, Y+17	; 0x11
   12940:	fa 89       	ldd	r31, Y+18	; 0x12
   12942:	23 a1       	ldd	r18, Z+35	; 0x23
   12944:	30 e0       	ldi	r19, 0x00	; 0
   12946:	40 e0       	ldi	r20, 0x00	; 0
   12948:	50 e0       	ldi	r21, 0x00	; 0
   1294a:	68 e0       	ldi	r22, 0x08	; 8
   1294c:	8b e1       	ldi	r24, 0x1B	; 27
   1294e:	3e dd       	rcall	.-1412   	; 0x123cc <print_tok_val>
   12950:	e9 89       	ldd	r30, Y+17	; 0x11
   12952:	fa 89       	ldd	r31, Y+18	; 0x12
   12954:	24 a1       	ldd	r18, Z+36	; 0x24
   12956:	35 a1       	ldd	r19, Z+37	; 0x25
   12958:	40 e0       	ldi	r20, 0x00	; 0
   1295a:	50 e0       	ldi	r21, 0x00	; 0
   1295c:	68 e0       	ldi	r22, 0x08	; 8
   1295e:	8d e1       	ldi	r24, 0x1D	; 29
   12960:	35 dd       	rcall	.-1430   	; 0x123cc <print_tok_val>
   12962:	e9 89       	ldd	r30, Y+17	; 0x11
   12964:	fa 89       	ldd	r31, Y+18	; 0x12
   12966:	26 a1       	ldd	r18, Z+38	; 0x26
   12968:	37 a1       	ldd	r19, Z+39	; 0x27
   1296a:	40 a5       	ldd	r20, Z+40	; 0x28
   1296c:	51 a5       	ldd	r21, Z+41	; 0x29
   1296e:	68 e0       	ldi	r22, 0x08	; 8
   12970:	89 e1       	ldi	r24, 0x19	; 25
   12972:	2c dd       	rcall	.-1448   	; 0x123cc <print_tok_val>
   12974:	e9 89       	ldd	r30, Y+17	; 0x11
   12976:	fa 89       	ldd	r31, Y+18	; 0x12
   12978:	22 a5       	ldd	r18, Z+42	; 0x2a
   1297a:	30 e0       	ldi	r19, 0x00	; 0
   1297c:	40 e0       	ldi	r20, 0x00	; 0
   1297e:	50 e0       	ldi	r21, 0x00	; 0
   12980:	68 e0       	ldi	r22, 0x08	; 8
   12982:	88 e1       	ldi	r24, 0x18	; 24
   12984:	23 dd       	rcall	.-1466   	; 0x123cc <print_tok_val>
   12986:	64 e0       	ldi	r22, 0x04	; 4
   12988:	81 e1       	ldi	r24, 0x11	; 17
   1298a:	95 dd       	rcall	.-1238   	; 0x124b6 <print_tok>
   1298c:	e9 89       	ldd	r30, Y+17	; 0x11
   1298e:	fa 89       	ldd	r31, Y+18	; 0x12
   12990:	86 a1       	ldd	r24, Z+38	; 0x26
   12992:	97 a1       	ldd	r25, Z+39	; 0x27
   12994:	a0 a5       	ldd	r26, Z+40	; 0x28
   12996:	b1 a5       	ldd	r27, Z+41	; 0x29
   12998:	01 96       	adiw	r24, 0x01	; 1
   1299a:	a1 1d       	adc	r26, r1
   1299c:	b1 1d       	adc	r27, r1
   1299e:	ed b7       	in	r30, 0x3d	; 61
   129a0:	fe b7       	in	r31, 0x3e	; 62
   129a2:	84 83       	std	Z+4, r24	; 0x04
   129a4:	95 83       	std	Z+5, r25	; 0x05
   129a6:	a6 83       	std	Z+6, r26	; 0x06
   129a8:	b7 83       	std	Z+7, r27	; 0x07
   129aa:	2a ec       	ldi	r18, 0xCA	; 202
   129ac:	39 e1       	ldi	r19, 0x19	; 25
   129ae:	c9 01       	movw	r24, r18
   129b0:	a0 e0       	ldi	r26, 0x00	; 0
   129b2:	81 83       	std	Z+1, r24	; 0x01
   129b4:	92 83       	std	Z+2, r25	; 0x02
   129b6:	a3 83       	std	Z+3, r26	; 0x03
   129b8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   129bc:	60 e0       	ldi	r22, 0x00	; 0
   129be:	81 e1       	ldi	r24, 0x11	; 17
   129c0:	7a dd       	rcall	.-1292   	; 0x124b6 <print_tok>
   129c2:	f8 01       	movw	r30, r16
   129c4:	80 81       	ld	r24, Z
   129c6:	81 30       	cpi	r24, 0x01	; 1
   129c8:	09 f0       	breq	.+2      	; 0x129cc <display_Config+0x314>
   129ca:	ad c0       	rjmp	.+346    	; 0x12b26 <display_Config+0x46e>
   129cc:	27 a1       	ldd	r18, Z+39	; 0x27
   129ce:	30 a5       	ldd	r19, Z+40	; 0x28
   129d0:	3a 8b       	std	Y+18, r19	; 0x12
   129d2:	29 8b       	std	Y+17, r18	; 0x11
   129d4:	c8 01       	movw	r24, r16
   129d6:	07 96       	adiw	r24, 0x07	; 7
   129d8:	ed b7       	in	r30, 0x3d	; 61
   129da:	fe b7       	in	r31, 0x3e	; 62
   129dc:	95 83       	std	Z+5, r25	; 0x05
   129de:	84 83       	std	Z+4, r24	; 0x04
   129e0:	2b 85       	ldd	r18, Y+11	; 0x0b
   129e2:	3c 85       	ldd	r19, Y+12	; 0x0c
   129e4:	4d 85       	ldd	r20, Y+13	; 0x0d
   129e6:	21 83       	std	Z+1, r18	; 0x01
   129e8:	32 83       	std	Z+2, r19	; 0x02
   129ea:	43 83       	std	Z+3, r20	; 0x03
   129ec:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   129f0:	e9 89       	ldd	r30, Y+17	; 0x11
   129f2:	fa 89       	ldd	r31, Y+18	; 0x12
   129f4:	80 81       	ld	r24, Z
   129f6:	90 e0       	ldi	r25, 0x00	; 0
   129f8:	ed b7       	in	r30, 0x3d	; 61
   129fa:	fe b7       	in	r31, 0x3e	; 62
   129fc:	95 83       	std	Z+5, r25	; 0x05
   129fe:	84 83       	std	Z+4, r24	; 0x04
   12a00:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a02:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a04:	48 89       	ldd	r20, Y+16	; 0x10
   12a06:	21 83       	std	Z+1, r18	; 0x01
   12a08:	32 83       	std	Z+2, r19	; 0x02
   12a0a:	43 83       	std	Z+3, r20	; 0x03
   12a0c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12a10:	64 e0       	ldi	r22, 0x04	; 4
   12a12:	85 e1       	ldi	r24, 0x15	; 21
   12a14:	50 dd       	rcall	.-1376   	; 0x124b6 <print_tok>
   12a16:	e9 89       	ldd	r30, Y+17	; 0x11
   12a18:	fa 89       	ldd	r31, Y+18	; 0x12
   12a1a:	20 81       	ld	r18, Z
   12a1c:	30 e0       	ldi	r19, 0x00	; 0
   12a1e:	40 e0       	ldi	r20, 0x00	; 0
   12a20:	50 e0       	ldi	r21, 0x00	; 0
   12a22:	68 e0       	ldi	r22, 0x08	; 8
   12a24:	81 e0       	ldi	r24, 0x01	; 1
   12a26:	d2 dc       	rcall	.-1628   	; 0x123cc <print_tok_val>
   12a28:	e9 89       	ldd	r30, Y+17	; 0x11
   12a2a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a2c:	21 81       	ldd	r18, Z+1	; 0x01
   12a2e:	30 e0       	ldi	r19, 0x00	; 0
   12a30:	40 e0       	ldi	r20, 0x00	; 0
   12a32:	50 e0       	ldi	r21, 0x00	; 0
   12a34:	68 e0       	ldi	r22, 0x08	; 8
   12a36:	8f e1       	ldi	r24, 0x1F	; 31
   12a38:	c9 dc       	rcall	.-1646   	; 0x123cc <print_tok_val>
   12a3a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a3c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a3e:	42 81       	ldd	r20, Z+2	; 0x02
   12a40:	53 81       	ldd	r21, Z+3	; 0x03
   12a42:	68 e0       	ldi	r22, 0x08	; 8
   12a44:	82 e1       	ldi	r24, 0x12	; 18
   12a46:	02 dd       	rcall	.-1532   	; 0x1244c <print_tok_str>
   12a48:	64 e0       	ldi	r22, 0x04	; 4
   12a4a:	81 e1       	ldi	r24, 0x11	; 17
   12a4c:	34 dd       	rcall	.-1432   	; 0x124b6 <print_tok>
   12a4e:	64 e0       	ldi	r22, 0x04	; 4
   12a50:	89 e0       	ldi	r24, 0x09	; 9
   12a52:	31 dd       	rcall	.-1438   	; 0x124b6 <print_tok>
   12a54:	e9 89       	ldd	r30, Y+17	; 0x11
   12a56:	fa 89       	ldd	r31, Y+18	; 0x12
   12a58:	24 81       	ldd	r18, Z+4	; 0x04
   12a5a:	35 81       	ldd	r19, Z+5	; 0x05
   12a5c:	40 e0       	ldi	r20, 0x00	; 0
   12a5e:	50 e0       	ldi	r21, 0x00	; 0
   12a60:	68 e0       	ldi	r22, 0x08	; 8
   12a62:	87 e1       	ldi	r24, 0x17	; 23
   12a64:	b3 dc       	rcall	.-1690   	; 0x123cc <print_tok_val>
   12a66:	64 e0       	ldi	r22, 0x04	; 4
   12a68:	81 e1       	ldi	r24, 0x11	; 17
   12a6a:	25 dd       	rcall	.-1462   	; 0x124b6 <print_tok>
   12a6c:	a1 14       	cp	r10, r1
   12a6e:	b1 04       	cpc	r11, r1
   12a70:	91 f1       	breq	.+100    	; 0x12ad6 <display_Config+0x41e>
   12a72:	64 e0       	ldi	r22, 0x04	; 4
   12a74:	84 e1       	ldi	r24, 0x14	; 20
   12a76:	1f dd       	rcall	.-1474   	; 0x124b6 <print_tok>
   12a78:	e9 89       	ldd	r30, Y+17	; 0x11
   12a7a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a7c:	26 81       	ldd	r18, Z+6	; 0x06
   12a7e:	37 81       	ldd	r19, Z+7	; 0x07
   12a80:	03 2e       	mov	r0, r19
   12a82:	00 0c       	add	r0, r0
   12a84:	44 0b       	sbc	r20, r20
   12a86:	55 0b       	sbc	r21, r21
   12a88:	68 e0       	ldi	r22, 0x08	; 8
   12a8a:	88 e0       	ldi	r24, 0x08	; 8
   12a8c:	9f dc       	rcall	.-1730   	; 0x123cc <print_tok_val>
   12a8e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a90:	fa 89       	ldd	r31, Y+18	; 0x12
   12a92:	20 85       	ldd	r18, Z+8	; 0x08
   12a94:	31 85       	ldd	r19, Z+9	; 0x09
   12a96:	03 2e       	mov	r0, r19
   12a98:	00 0c       	add	r0, r0
   12a9a:	44 0b       	sbc	r20, r20
   12a9c:	55 0b       	sbc	r21, r21
   12a9e:	68 e0       	ldi	r22, 0x08	; 8
   12aa0:	82 e2       	ldi	r24, 0x22	; 34
   12aa2:	94 dc       	rcall	.-1752   	; 0x123cc <print_tok_val>
   12aa4:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa6:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa8:	22 85       	ldd	r18, Z+10	; 0x0a
   12aaa:	33 85       	ldd	r19, Z+11	; 0x0b
   12aac:	03 2e       	mov	r0, r19
   12aae:	00 0c       	add	r0, r0
   12ab0:	44 0b       	sbc	r20, r20
   12ab2:	55 0b       	sbc	r21, r21
   12ab4:	68 e0       	ldi	r22, 0x08	; 8
   12ab6:	86 e1       	ldi	r24, 0x16	; 22
   12ab8:	89 dc       	rcall	.-1774   	; 0x123cc <print_tok_val>
   12aba:	e9 89       	ldd	r30, Y+17	; 0x11
   12abc:	fa 89       	ldd	r31, Y+18	; 0x12
   12abe:	24 85       	ldd	r18, Z+12	; 0x0c
   12ac0:	35 85       	ldd	r19, Z+13	; 0x0d
   12ac2:	03 2e       	mov	r0, r19
   12ac4:	00 0c       	add	r0, r0
   12ac6:	44 0b       	sbc	r20, r20
   12ac8:	55 0b       	sbc	r21, r21
   12aca:	68 e0       	ldi	r22, 0x08	; 8
   12acc:	8d e0       	ldi	r24, 0x0D	; 13
   12ace:	7e dc       	rcall	.-1796   	; 0x123cc <print_tok_val>
   12ad0:	64 e0       	ldi	r22, 0x04	; 4
   12ad2:	81 e1       	ldi	r24, 0x11	; 17
   12ad4:	f0 dc       	rcall	.-1568   	; 0x124b6 <print_tok>
   12ad6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ad8:	fa 89       	ldd	r31, Y+18	; 0x12
   12ada:	44 85       	ldd	r20, Z+12	; 0x0c
   12adc:	55 85       	ldd	r21, Z+13	; 0x0d
   12ade:	20 85       	ldd	r18, Z+8	; 0x08
   12ae0:	31 85       	ldd	r19, Z+9	; 0x09
   12ae2:	42 9f       	mul	r20, r18
   12ae4:	c0 01       	movw	r24, r0
   12ae6:	43 9f       	mul	r20, r19
   12ae8:	90 0d       	add	r25, r0
   12aea:	52 9f       	mul	r21, r18
   12aec:	90 0d       	add	r25, r0
   12aee:	11 24       	eor	r1, r1
   12af0:	42 85       	ldd	r20, Z+10	; 0x0a
   12af2:	53 85       	ldd	r21, Z+11	; 0x0b
   12af4:	84 9f       	mul	r24, r20
   12af6:	90 01       	movw	r18, r0
   12af8:	85 9f       	mul	r24, r21
   12afa:	30 0d       	add	r19, r0
   12afc:	94 9f       	mul	r25, r20
   12afe:	30 0d       	add	r19, r0
   12b00:	11 24       	eor	r1, r1
   12b02:	c9 01       	movw	r24, r18
   12b04:	33 0f       	add	r19, r19
   12b06:	aa 0b       	sbc	r26, r26
   12b08:	bb 0b       	sbc	r27, r27
   12b0a:	ed b7       	in	r30, 0x3d	; 61
   12b0c:	fe b7       	in	r31, 0x3e	; 62
   12b0e:	84 83       	std	Z+4, r24	; 0x04
   12b10:	95 83       	std	Z+5, r25	; 0x05
   12b12:	a6 83       	std	Z+6, r26	; 0x06
   12b14:	b7 83       	std	Z+7, r27	; 0x07
   12b16:	21 82       	std	Z+1, r2	; 0x01
   12b18:	32 82       	std	Z+2, r3	; 0x02
   12b1a:	43 82       	std	Z+3, r4	; 0x03
   12b1c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12b20:	60 e0       	ldi	r22, 0x00	; 0
   12b22:	81 e1       	ldi	r24, 0x11	; 17
   12b24:	c8 dc       	rcall	.-1648   	; 0x124b6 <print_tok>
   12b26:	f8 01       	movw	r30, r16
   12b28:	80 81       	ld	r24, Z
   12b2a:	84 30       	cpi	r24, 0x04	; 4
   12b2c:	c9 f4       	brne	.+50     	; 0x12b60 <display_Config+0x4a8>
   12b2e:	27 a1       	ldd	r18, Z+39	; 0x27
   12b30:	30 a5       	ldd	r19, Z+40	; 0x28
   12b32:	3a 8b       	std	Y+18, r19	; 0x12
   12b34:	29 8b       	std	Y+17, r18	; 0x11
   12b36:	60 e0       	ldi	r22, 0x00	; 0
   12b38:	80 e2       	ldi	r24, 0x20	; 32
   12b3a:	bd dc       	rcall	.-1670   	; 0x124b6 <print_tok>
   12b3c:	64 e0       	ldi	r22, 0x04	; 4
   12b3e:	89 e0       	ldi	r24, 0x09	; 9
   12b40:	ba dc       	rcall	.-1676   	; 0x124b6 <print_tok>
   12b42:	e9 89       	ldd	r30, Y+17	; 0x11
   12b44:	fa 89       	ldd	r31, Y+18	; 0x12
   12b46:	20 81       	ld	r18, Z
   12b48:	30 e0       	ldi	r19, 0x00	; 0
   12b4a:	40 e0       	ldi	r20, 0x00	; 0
   12b4c:	50 e0       	ldi	r21, 0x00	; 0
   12b4e:	68 e0       	ldi	r22, 0x08	; 8
   12b50:	81 e0       	ldi	r24, 0x01	; 1
   12b52:	3c dc       	rcall	.-1928   	; 0x123cc <print_tok_val>
   12b54:	64 e0       	ldi	r22, 0x04	; 4
   12b56:	81 e1       	ldi	r24, 0x11	; 17
   12b58:	ae dc       	rcall	.-1700   	; 0x124b6 <print_tok>
   12b5a:	60 e0       	ldi	r22, 0x00	; 0
   12b5c:	81 e1       	ldi	r24, 0x11	; 17
   12b5e:	ab dc       	rcall	.-1706   	; 0x124b6 <print_tok>
   12b60:	28 85       	ldd	r18, Y+8	; 0x08
   12b62:	39 85       	ldd	r19, Y+9	; 0x09
   12b64:	4a 85       	ldd	r20, Y+10	; 0x0a
   12b66:	ed b7       	in	r30, 0x3d	; 61
   12b68:	fe b7       	in	r31, 0x3e	; 62
   12b6a:	21 83       	std	Z+1, r18	; 0x01
   12b6c:	32 83       	std	Z+2, r19	; 0x02
   12b6e:	43 83       	std	Z+3, r20	; 0x03
   12b70:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12b74:	05 5d       	subi	r16, 0xD5	; 213
   12b76:	1f 4f       	sbci	r17, 0xFF	; 255
   12b78:	2e ee       	ldi	r18, 0xEE	; 238
   12b7a:	30 e2       	ldi	r19, 0x20	; 32
   12b7c:	20 17       	cp	r18, r16
   12b7e:	31 07       	cpc	r19, r17
   12b80:	09 f0       	breq	.+2      	; 0x12b84 <display_Config+0x4cc>
   12b82:	df cd       	rjmp	.-1090   	; 0x12742 <display_Config+0x8a>
   12b84:	89 e8       	ldi	r24, 0x89	; 137
   12b86:	99 e1       	ldi	r25, 0x19	; 25
   12b88:	a0 e0       	ldi	r26, 0x00	; 0
   12b8a:	ed b7       	in	r30, 0x3d	; 61
   12b8c:	fe b7       	in	r31, 0x3e	; 62
   12b8e:	81 83       	std	Z+1, r24	; 0x01
   12b90:	92 83       	std	Z+2, r25	; 0x02
   12b92:	a3 83       	std	Z+3, r26	; 0x03
   12b94:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12b98:	62 96       	adiw	r28, 0x12	; 18
   12b9a:	0f b6       	in	r0, 0x3f	; 63
   12b9c:	f8 94       	cli
   12b9e:	de bf       	out	0x3e, r29	; 62
   12ba0:	0f be       	out	0x3f, r0	; 63
   12ba2:	cd bf       	out	0x3d, r28	; 61
   12ba4:	df 91       	pop	r29
   12ba6:	cf 91       	pop	r28
   12ba8:	1f 91       	pop	r17
   12baa:	0f 91       	pop	r16
   12bac:	ef 90       	pop	r14
   12bae:	df 90       	pop	r13
   12bb0:	cf 90       	pop	r12
   12bb2:	bf 90       	pop	r11
   12bb4:	af 90       	pop	r10
   12bb6:	8f 90       	pop	r8
   12bb8:	7f 90       	pop	r7
   12bba:	6f 90       	pop	r6
   12bbc:	4f 90       	pop	r4
   12bbe:	3f 90       	pop	r3
   12bc0:	2f 90       	pop	r2
   12bc2:	08 95       	ret

00012bc4 <find_type>:
   12bc4:	ea ee       	ldi	r30, 0xEA	; 234
   12bc6:	fe e1       	ldi	r31, 0x1E	; 30
   12bc8:	20 e0       	ldi	r18, 0x00	; 0
   12bca:	30 e0       	ldi	r19, 0x00	; 0
   12bcc:	40 81       	ld	r20, Z
   12bce:	50 e0       	ldi	r21, 0x00	; 0
   12bd0:	48 17       	cp	r20, r24
   12bd2:	59 07       	cpc	r21, r25
   12bd4:	49 f0       	breq	.+18     	; 0x12be8 <find_type+0x24>
   12bd6:	2f 5f       	subi	r18, 0xFF	; 255
   12bd8:	3f 4f       	sbci	r19, 0xFF	; 255
   12bda:	bb 96       	adiw	r30, 0x2b	; 43
   12bdc:	2c 30       	cpi	r18, 0x0C	; 12
   12bde:	31 05       	cpc	r19, r1
   12be0:	a9 f7       	brne	.-22     	; 0x12bcc <find_type+0x8>
   12be2:	8f ef       	ldi	r24, 0xFF	; 255
   12be4:	9f ef       	ldi	r25, 0xFF	; 255
   12be6:	08 95       	ret
   12be8:	c9 01       	movw	r24, r18
   12bea:	08 95       	ret

00012bec <count_drive_types>:
   12bec:	28 2f       	mov	r18, r24
   12bee:	ea ee       	ldi	r30, 0xEA	; 234
   12bf0:	fe e1       	ldi	r31, 0x1E	; 30
   12bf2:	80 e0       	ldi	r24, 0x00	; 0
   12bf4:	90 e0       	ldi	r25, 0x00	; 0
   12bf6:	30 81       	ld	r19, Z
   12bf8:	32 13       	cpse	r19, r18
   12bfa:	01 c0       	rjmp	.+2      	; 0x12bfe <count_drive_types+0x12>
   12bfc:	01 96       	adiw	r24, 0x01	; 1
   12bfe:	bb 96       	adiw	r30, 0x2b	; 43
   12c00:	30 e2       	ldi	r19, 0x20	; 32
   12c02:	ee 3e       	cpi	r30, 0xEE	; 238
   12c04:	f3 07       	cpc	r31, r19
   12c06:	b9 f7       	brne	.-18     	; 0x12bf6 <count_drive_types+0xa>
   12c08:	08 95       	ret

00012c0a <type_to_str>:
   12c0a:	00 97       	sbiw	r24, 0x00	; 0
   12c0c:	59 f0       	breq	.+22     	; 0x12c24 <type_to_str+0x1a>
   12c0e:	81 30       	cpi	r24, 0x01	; 1
   12c10:	91 05       	cpc	r25, r1
   12c12:	59 f0       	breq	.+22     	; 0x12c2a <type_to_str+0x20>
   12c14:	83 30       	cpi	r24, 0x03	; 3
   12c16:	91 05       	cpc	r25, r1
   12c18:	59 f0       	breq	.+22     	; 0x12c30 <type_to_str+0x26>
   12c1a:	04 97       	sbiw	r24, 0x04	; 4
   12c1c:	61 f0       	breq	.+24     	; 0x12c36 <type_to_str+0x2c>
   12c1e:	85 e3       	ldi	r24, 0x35	; 53
   12c20:	9e e0       	ldi	r25, 0x0E	; 14
   12c22:	08 95       	ret
   12c24:	8b e0       	ldi	r24, 0x0B	; 11
   12c26:	9e e0       	ldi	r25, 0x0E	; 14
   12c28:	08 95       	ret
   12c2a:	83 e1       	ldi	r24, 0x13	; 19
   12c2c:	9e e0       	ldi	r25, 0x0E	; 14
   12c2e:	08 95       	ret
   12c30:	8b e2       	ldi	r24, 0x2B	; 43
   12c32:	9e e0       	ldi	r25, 0x0E	; 14
   12c34:	08 95       	ret
   12c36:	8e e1       	ldi	r24, 0x1E	; 30
   12c38:	9e e0       	ldi	r25, 0x0E	; 14
   12c3a:	08 95       	ret

00012c3c <find_free>:
   12c3c:	80 e0       	ldi	r24, 0x00	; 0
   12c3e:	90 e0       	ldi	r25, 0x00	; 0
   12c40:	c1 cf       	rjmp	.-126    	; 0x12bc4 <find_type>
   12c42:	08 95       	ret

00012c44 <find_device>:
   12c44:	9b 01       	movw	r18, r22
   12c46:	20 52       	subi	r18, 0x20	; 32
   12c48:	31 09       	sbc	r19, r1
   12c4a:	2f 35       	cpi	r18, 0x5F	; 95
   12c4c:	31 05       	cpc	r19, r1
   12c4e:	f8 f4       	brcc	.+62     	; 0x12c8e <find_device+0x4a>
   12c50:	64 17       	cp	r22, r20
   12c52:	75 07       	cpc	r23, r21
   12c54:	e4 f0       	brlt	.+56     	; 0x12c8e <find_device+0x4a>
   12c56:	9a 01       	movw	r18, r20
   12c58:	22 5e       	subi	r18, 0xE2	; 226
   12c5a:	3f 4f       	sbci	r19, 0xFF	; 255
   12c5c:	26 17       	cp	r18, r22
   12c5e:	37 07       	cpc	r19, r23
   12c60:	b4 f0       	brlt	.+44     	; 0x12c8e <find_device+0x4a>
   12c62:	64 1b       	sub	r22, r20
   12c64:	75 0b       	sbc	r23, r21
   12c66:	ea ee       	ldi	r30, 0xEA	; 234
   12c68:	fe e1       	ldi	r31, 0x1E	; 30
   12c6a:	20 e0       	ldi	r18, 0x00	; 0
   12c6c:	30 e0       	ldi	r19, 0x00	; 0
   12c6e:	40 81       	ld	r20, Z
   12c70:	50 e0       	ldi	r21, 0x00	; 0
   12c72:	48 17       	cp	r20, r24
   12c74:	59 07       	cpc	r21, r25
   12c76:	29 f4       	brne	.+10     	; 0x12c82 <find_device+0x3e>
   12c78:	41 81       	ldd	r20, Z+1	; 0x01
   12c7a:	50 e0       	ldi	r21, 0x00	; 0
   12c7c:	64 17       	cp	r22, r20
   12c7e:	75 07       	cpc	r23, r21
   12c80:	49 f0       	breq	.+18     	; 0x12c94 <find_device+0x50>
   12c82:	2f 5f       	subi	r18, 0xFF	; 255
   12c84:	3f 4f       	sbci	r19, 0xFF	; 255
   12c86:	bb 96       	adiw	r30, 0x2b	; 43
   12c88:	2c 30       	cpi	r18, 0x0C	; 12
   12c8a:	31 05       	cpc	r19, r1
   12c8c:	81 f7       	brne	.-32     	; 0x12c6e <find_device+0x2a>
   12c8e:	8f ef       	ldi	r24, 0xFF	; 255
   12c90:	9f ef       	ldi	r25, 0xFF	; 255
   12c92:	08 95       	ret
   12c94:	c9 01       	movw	r24, r18
   12c96:	08 95       	ret

00012c98 <set_active_device>:
   12c98:	a9 e0       	ldi	r26, 0x09	; 9
   12c9a:	b0 e0       	ldi	r27, 0x00	; 0
   12c9c:	e2 e5       	ldi	r30, 0x52	; 82
   12c9e:	f6 e9       	ldi	r31, 0x96	; 150
   12ca0:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
   12ca4:	8f 3f       	cpi	r24, 0xFF	; 255
   12ca6:	2f ef       	ldi	r18, 0xFF	; 255
   12ca8:	92 07       	cpc	r25, r18
   12caa:	09 f4       	brne	.+2      	; 0x12cae <set_active_device+0x16>
   12cac:	d0 c0       	rjmp	.+416    	; 0x12e4e <set_active_device+0x1b6>
   12cae:	ec 01       	movw	r28, r24
   12cb0:	0c 97       	sbiw	r24, 0x0c	; 12
   12cb2:	b0 f0       	brcs	.+44     	; 0x12ce0 <set_active_device+0x48>
   12cb4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12cb8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12cbc:	c9 01       	movw	r24, r18
   12cbe:	81 70       	andi	r24, 0x01	; 1
   12cc0:	99 27       	eor	r25, r25
   12cc2:	20 ff       	sbrs	r18, 0
   12cc4:	c6 c0       	rjmp	.+396    	; 0x12e52 <set_active_device+0x1ba>
   12cc6:	ed b7       	in	r30, 0x3d	; 61
   12cc8:	fe b7       	in	r31, 0x3e	; 62
   12cca:	d5 83       	std	Z+5, r29	; 0x05
   12ccc:	c4 83       	std	Z+4, r28	; 0x04
   12cce:	84 e6       	ldi	r24, 0x64	; 100
   12cd0:	99 e1       	ldi	r25, 0x19	; 25
   12cd2:	a0 e0       	ldi	r26, 0x00	; 0
   12cd4:	81 83       	std	Z+1, r24	; 0x01
   12cd6:	92 83       	std	Z+2, r25	; 0x02
   12cd8:	a3 83       	std	Z+3, r26	; 0x03
   12cda:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12cde:	b7 c0       	rjmp	.+366    	; 0x12e4e <set_active_device+0x1b6>
   12ce0:	8b e2       	ldi	r24, 0x2B	; 43
   12ce2:	8c 9f       	mul	r24, r28
   12ce4:	f0 01       	movw	r30, r0
   12ce6:	8d 9f       	mul	r24, r29
   12ce8:	f0 0d       	add	r31, r0
   12cea:	11 24       	eor	r1, r1
   12cec:	e6 51       	subi	r30, 0x16	; 22
   12cee:	f1 4e       	sbci	r31, 0xE1	; 225
   12cf0:	21 81       	ldd	r18, Z+1	; 0x01
   12cf2:	2f 31       	cpi	r18, 0x1F	; 31
   12cf4:	d0 f0       	brcs	.+52     	; 0x12d2a <set_active_device+0x92>
   12cf6:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12cfa:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12cfe:	ca 01       	movw	r24, r20
   12d00:	81 70       	andi	r24, 0x01	; 1
   12d02:	99 27       	eor	r25, r25
   12d04:	40 ff       	sbrs	r20, 0
   12d06:	a5 c0       	rjmp	.+330    	; 0x12e52 <set_active_device+0x1ba>
   12d08:	82 2f       	mov	r24, r18
   12d0a:	90 e0       	ldi	r25, 0x00	; 0
   12d0c:	ed b7       	in	r30, 0x3d	; 61
   12d0e:	fe b7       	in	r31, 0x3e	; 62
   12d10:	97 83       	std	Z+7, r25	; 0x07
   12d12:	86 83       	std	Z+6, r24	; 0x06
   12d14:	d5 83       	std	Z+5, r29	; 0x05
   12d16:	c4 83       	std	Z+4, r28	; 0x04
   12d18:	8b e2       	ldi	r24, 0x2B	; 43
   12d1a:	99 e1       	ldi	r25, 0x19	; 25
   12d1c:	a0 e0       	ldi	r26, 0x00	; 0
   12d1e:	81 83       	std	Z+1, r24	; 0x01
   12d20:	92 83       	std	Z+2, r25	; 0x02
   12d22:	a3 83       	std	Z+3, r26	; 0x03
   12d24:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12d28:	92 c0       	rjmp	.+292    	; 0x12e4e <set_active_device+0x1b6>
   12d2a:	20 81       	ld	r18, Z
   12d2c:	02 2f       	mov	r16, r18
   12d2e:	10 e0       	ldi	r17, 0x00	; 0
   12d30:	87 a1       	ldd	r24, Z+39	; 0x27
   12d32:	90 a5       	ldd	r25, Z+40	; 0x28
   12d34:	00 97       	sbiw	r24, 0x00	; 0
   12d36:	b1 f4       	brne	.+44     	; 0x12d64 <set_active_device+0xcc>
   12d38:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d3c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d40:	c9 01       	movw	r24, r18
   12d42:	81 70       	andi	r24, 0x01	; 1
   12d44:	99 27       	eor	r25, r25
   12d46:	20 ff       	sbrs	r18, 0
   12d48:	84 c0       	rjmp	.+264    	; 0x12e52 <set_active_device+0x1ba>
   12d4a:	c8 01       	movw	r24, r16
   12d4c:	5e df       	rcall	.-324    	; 0x12c0a <type_to_str>
   12d4e:	ed b7       	in	r30, 0x3d	; 61
   12d50:	fe b7       	in	r31, 0x3e	; 62
   12d52:	91 87       	std	Z+9, r25	; 0x09
   12d54:	80 87       	std	Z+8, r24	; 0x08
   12d56:	17 83       	std	Z+7, r17	; 0x07
   12d58:	06 83       	std	Z+6, r16	; 0x06
   12d5a:	d5 83       	std	Z+5, r29	; 0x05
   12d5c:	c4 83       	std	Z+4, r28	; 0x04
   12d5e:	86 ef       	ldi	r24, 0xF6	; 246
   12d60:	98 e1       	ldi	r25, 0x18	; 24
   12d62:	6f c0       	rjmp	.+222    	; 0x12e42 <set_active_device+0x1aa>
   12d64:	01 15       	cp	r16, r1
   12d66:	11 05       	cpc	r17, r1
   12d68:	b9 f4       	brne	.+46     	; 0x12d98 <set_active_device+0x100>
   12d6a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d6e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d72:	c9 01       	movw	r24, r18
   12d74:	81 70       	andi	r24, 0x01	; 1
   12d76:	99 27       	eor	r25, r25
   12d78:	20 ff       	sbrs	r18, 0
   12d7a:	6b c0       	rjmp	.+214    	; 0x12e52 <set_active_device+0x1ba>
   12d7c:	80 e0       	ldi	r24, 0x00	; 0
   12d7e:	90 e0       	ldi	r25, 0x00	; 0
   12d80:	44 df       	rcall	.-376    	; 0x12c0a <type_to_str>
   12d82:	ed b7       	in	r30, 0x3d	; 61
   12d84:	fe b7       	in	r31, 0x3e	; 62
   12d86:	91 87       	std	Z+9, r25	; 0x09
   12d88:	80 87       	std	Z+8, r24	; 0x08
   12d8a:	17 82       	std	Z+7, r1	; 0x07
   12d8c:	16 82       	std	Z+6, r1	; 0x06
   12d8e:	d5 83       	std	Z+5, r29	; 0x05
   12d90:	c4 83       	std	Z+4, r28	; 0x04
   12d92:	81 ec       	ldi	r24, 0xC1	; 193
   12d94:	98 e1       	ldi	r25, 0x18	; 24
   12d96:	55 c0       	rjmp	.+170    	; 0x12e42 <set_active_device+0x1aa>
   12d98:	04 30       	cpi	r16, 0x04	; 4
   12d9a:	11 05       	cpc	r17, r1
   12d9c:	29 f4       	brne	.+10     	; 0x12da8 <set_active_device+0x110>
   12d9e:	90 93 62 19 	sts	0x1962, r25	; 0x801962 <PRINTERp+0x1>
   12da2:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <PRINTERp>
   12da6:	35 c0       	rjmp	.+106    	; 0x12e12 <set_active_device+0x17a>
   12da8:	2d 7f       	andi	r18, 0xFD	; 253
   12daa:	21 30       	cpi	r18, 0x01	; 1
   12dac:	a9 f5       	brne	.+106    	; 0x12e18 <set_active_device+0x180>
   12dae:	21 a5       	ldd	r18, Z+41	; 0x29
   12db0:	32 a5       	ldd	r19, Z+42	; 0x2a
   12db2:	21 15       	cp	r18, r1
   12db4:	31 05       	cpc	r19, r1
   12db6:	b1 f4       	brne	.+44     	; 0x12de4 <set_active_device+0x14c>
   12db8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12dbc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12dc0:	c9 01       	movw	r24, r18
   12dc2:	81 70       	andi	r24, 0x01	; 1
   12dc4:	99 27       	eor	r25, r25
   12dc6:	20 ff       	sbrs	r18, 0
   12dc8:	44 c0       	rjmp	.+136    	; 0x12e52 <set_active_device+0x1ba>
   12dca:	c8 01       	movw	r24, r16
   12dcc:	1e df       	rcall	.-452    	; 0x12c0a <type_to_str>
   12dce:	ed b7       	in	r30, 0x3d	; 61
   12dd0:	fe b7       	in	r31, 0x3e	; 62
   12dd2:	91 87       	std	Z+9, r25	; 0x09
   12dd4:	80 87       	std	Z+8, r24	; 0x08
   12dd6:	17 83       	std	Z+7, r17	; 0x07
   12dd8:	06 83       	std	Z+6, r16	; 0x06
   12dda:	d5 83       	std	Z+5, r29	; 0x05
   12ddc:	c4 83       	std	Z+4, r28	; 0x04
   12dde:	89 e8       	ldi	r24, 0x89	; 137
   12de0:	98 e1       	ldi	r25, 0x18	; 24
   12de2:	2f c0       	rjmp	.+94     	; 0x12e42 <set_active_device+0x1aa>
   12de4:	01 30       	cpi	r16, 0x01	; 1
   12de6:	11 05       	cpc	r17, r1
   12de8:	49 f4       	brne	.+18     	; 0x12dfc <set_active_device+0x164>
   12dea:	90 93 5c 19 	sts	0x195C, r25	; 0x80195c <AMIGOp+0x1>
   12dee:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <AMIGOp>
   12df2:	30 93 5a 19 	sts	0x195A, r19	; 0x80195a <AMIGOs+0x1>
   12df6:	20 93 59 19 	sts	0x1959, r18	; 0x801959 <AMIGOs>
   12dfa:	0b c0       	rjmp	.+22     	; 0x12e12 <set_active_device+0x17a>
   12dfc:	03 30       	cpi	r16, 0x03	; 3
   12dfe:	11 05       	cpc	r17, r1
   12e00:	59 f4       	brne	.+22     	; 0x12e18 <set_active_device+0x180>
   12e02:	90 93 60 19 	sts	0x1960, r25	; 0x801960 <SS80p+0x1>
   12e06:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <SS80p>
   12e0a:	30 93 5e 19 	sts	0x195E, r19	; 0x80195e <SS80s+0x1>
   12e0e:	20 93 5d 19 	sts	0x195D, r18	; 0x80195d <SS80s>
   12e12:	81 e0       	ldi	r24, 0x01	; 1
   12e14:	90 e0       	ldi	r25, 0x00	; 0
   12e16:	1d c0       	rjmp	.+58     	; 0x12e52 <set_active_device+0x1ba>
   12e18:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12e1c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12e20:	c9 01       	movw	r24, r18
   12e22:	81 70       	andi	r24, 0x01	; 1
   12e24:	99 27       	eor	r25, r25
   12e26:	20 ff       	sbrs	r18, 0
   12e28:	14 c0       	rjmp	.+40     	; 0x12e52 <set_active_device+0x1ba>
   12e2a:	c8 01       	movw	r24, r16
   12e2c:	ee de       	rcall	.-548    	; 0x12c0a <type_to_str>
   12e2e:	ed b7       	in	r30, 0x3d	; 61
   12e30:	fe b7       	in	r31, 0x3e	; 62
   12e32:	91 87       	std	Z+9, r25	; 0x09
   12e34:	80 87       	std	Z+8, r24	; 0x08
   12e36:	17 83       	std	Z+7, r17	; 0x07
   12e38:	06 83       	std	Z+6, r16	; 0x06
   12e3a:	d5 83       	std	Z+5, r29	; 0x05
   12e3c:	c4 83       	std	Z+4, r28	; 0x04
   12e3e:	8e e5       	ldi	r24, 0x5E	; 94
   12e40:	98 e1       	ldi	r25, 0x18	; 24
   12e42:	a0 e0       	ldi	r26, 0x00	; 0
   12e44:	81 83       	std	Z+1, r24	; 0x01
   12e46:	92 83       	std	Z+2, r25	; 0x02
   12e48:	a3 83       	std	Z+3, r26	; 0x03
   12e4a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12e4e:	80 e0       	ldi	r24, 0x00	; 0
   12e50:	90 e0       	ldi	r25, 0x00	; 0
   12e52:	cd b7       	in	r28, 0x3d	; 61
   12e54:	de b7       	in	r29, 0x3e	; 62
   12e56:	29 96       	adiw	r28, 0x09	; 9
   12e58:	e4 e0       	ldi	r30, 0x04	; 4
   12e5a:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00012e5e <SS80_Set_Defaults>:
   12e5e:	0f 93       	push	r16
   12e60:	1f 93       	push	r17
   12e62:	cf 93       	push	r28
   12e64:	df 93       	push	r29
   12e66:	ec 01       	movw	r28, r24
   12e68:	82 e0       	ldi	r24, 0x02	; 2
   12e6a:	90 e0       	ldi	r25, 0x00	; 0
   12e6c:	ab de       	rcall	.-682    	; 0x12bc4 <find_type>
   12e6e:	97 fd       	sbrc	r25, 7
   12e70:	6b c0       	rjmp	.+214    	; 0x12f48 <SS80_Set_Defaults+0xea>
   12e72:	2b e2       	ldi	r18, 0x2B	; 43
   12e74:	2c 9f       	mul	r18, r28
   12e76:	f0 01       	movw	r30, r0
   12e78:	2d 9f       	mul	r18, r29
   12e7a:	f0 0d       	add	r31, r0
   12e7c:	11 24       	eor	r1, r1
   12e7e:	e6 51       	subi	r30, 0x16	; 22
   12e80:	f1 4e       	sbci	r31, 0xE1	; 225
   12e82:	c7 a1       	ldd	r28, Z+39	; 0x27
   12e84:	d0 a5       	ldd	r29, Z+40	; 0x28
   12e86:	28 9f       	mul	r18, r24
   12e88:	f0 01       	movw	r30, r0
   12e8a:	29 9f       	mul	r18, r25
   12e8c:	f0 0d       	add	r31, r0
   12e8e:	11 24       	eor	r1, r1
   12e90:	e6 51       	subi	r30, 0x16	; 22
   12e92:	f1 4e       	sbci	r31, 0xE1	; 225
   12e94:	07 a1       	ldd	r16, Z+39	; 0x27
   12e96:	10 a5       	ldd	r17, Z+40	; 0x28
   12e98:	f8 01       	movw	r30, r16
   12e9a:	80 81       	ld	r24, Z
   12e9c:	88 83       	st	Y, r24
   12e9e:	81 81       	ldd	r24, Z+1	; 0x01
   12ea0:	89 83       	std	Y+1, r24	; 0x01
   12ea2:	82 81       	ldd	r24, Z+2	; 0x02
   12ea4:	93 81       	ldd	r25, Z+3	; 0x03
   12ea6:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <stralloc>
   12eaa:	9b 83       	std	Y+3, r25	; 0x03
   12eac:	8a 83       	std	Y+2, r24	; 0x02
   12eae:	f8 01       	movw	r30, r16
   12eb0:	84 81       	ldd	r24, Z+4	; 0x04
   12eb2:	95 81       	ldd	r25, Z+5	; 0x05
   12eb4:	9d 83       	std	Y+5, r25	; 0x05
   12eb6:	8c 83       	std	Y+4, r24	; 0x04
   12eb8:	86 81       	ldd	r24, Z+6	; 0x06
   12eba:	97 81       	ldd	r25, Z+7	; 0x07
   12ebc:	9f 83       	std	Y+7, r25	; 0x07
   12ebe:	8e 83       	std	Y+6, r24	; 0x06
   12ec0:	80 85       	ldd	r24, Z+8	; 0x08
   12ec2:	91 85       	ldd	r25, Z+9	; 0x09
   12ec4:	99 87       	std	Y+9, r25	; 0x09
   12ec6:	88 87       	std	Y+8, r24	; 0x08
   12ec8:	82 85       	ldd	r24, Z+10	; 0x0a
   12eca:	8a 87       	std	Y+10, r24	; 0x0a
   12ecc:	83 85       	ldd	r24, Z+11	; 0x0b
   12ece:	8b 87       	std	Y+11, r24	; 0x0b
   12ed0:	84 85       	ldd	r24, Z+12	; 0x0c
   12ed2:	95 85       	ldd	r25, Z+13	; 0x0d
   12ed4:	a6 85       	ldd	r26, Z+14	; 0x0e
   12ed6:	b7 85       	ldd	r27, Z+15	; 0x0f
   12ed8:	8c 87       	std	Y+12, r24	; 0x0c
   12eda:	9d 87       	std	Y+13, r25	; 0x0d
   12edc:	ae 87       	std	Y+14, r26	; 0x0e
   12ede:	bf 87       	std	Y+15, r27	; 0x0f
   12ee0:	80 89       	ldd	r24, Z+16	; 0x10
   12ee2:	91 89       	ldd	r25, Z+17	; 0x11
   12ee4:	99 8b       	std	Y+17, r25	; 0x11
   12ee6:	88 8b       	std	Y+16, r24	; 0x10
   12ee8:	82 89       	ldd	r24, Z+18	; 0x12
   12eea:	8a 8b       	std	Y+18, r24	; 0x12
   12eec:	83 89       	ldd	r24, Z+19	; 0x13
   12eee:	8b 8b       	std	Y+19, r24	; 0x13
   12ef0:	84 89       	ldd	r24, Z+20	; 0x14
   12ef2:	95 89       	ldd	r25, Z+21	; 0x15
   12ef4:	9d 8b       	std	Y+21, r25	; 0x15
   12ef6:	8c 8b       	std	Y+20, r24	; 0x14
   12ef8:	86 89       	ldd	r24, Z+22	; 0x16
   12efa:	97 89       	ldd	r25, Z+23	; 0x17
   12efc:	9f 8b       	std	Y+23, r25	; 0x17
   12efe:	8e 8b       	std	Y+22, r24	; 0x16
   12f00:	80 8d       	ldd	r24, Z+24	; 0x18
   12f02:	91 8d       	ldd	r25, Z+25	; 0x19
   12f04:	99 8f       	std	Y+25, r25	; 0x19
   12f06:	88 8f       	std	Y+24, r24	; 0x18
   12f08:	82 8d       	ldd	r24, Z+26	; 0x1a
   12f0a:	93 8d       	ldd	r25, Z+27	; 0x1b
   12f0c:	9b 8f       	std	Y+27, r25	; 0x1b
   12f0e:	8a 8f       	std	Y+26, r24	; 0x1a
   12f10:	84 8d       	ldd	r24, Z+28	; 0x1c
   12f12:	8c 8f       	std	Y+28, r24	; 0x1c
   12f14:	85 8d       	ldd	r24, Z+29	; 0x1d
   12f16:	8d 8f       	std	Y+29, r24	; 0x1d
   12f18:	87 8d       	ldd	r24, Z+31	; 0x1f
   12f1a:	90 a1       	ldd	r25, Z+32	; 0x20
   12f1c:	a1 a1       	ldd	r26, Z+33	; 0x21
   12f1e:	b2 a1       	ldd	r27, Z+34	; 0x22
   12f20:	8f 8f       	std	Y+31, r24	; 0x1f
   12f22:	98 a3       	std	Y+32, r25	; 0x20
   12f24:	a9 a3       	std	Y+33, r26	; 0x21
   12f26:	ba a3       	std	Y+34, r27	; 0x22
   12f28:	83 a1       	ldd	r24, Z+35	; 0x23
   12f2a:	8b a3       	std	Y+35, r24	; 0x23
   12f2c:	84 a1       	ldd	r24, Z+36	; 0x24
   12f2e:	95 a1       	ldd	r25, Z+37	; 0x25
   12f30:	9d a3       	std	Y+37, r25	; 0x25
   12f32:	8c a3       	std	Y+36, r24	; 0x24
   12f34:	86 a1       	ldd	r24, Z+38	; 0x26
   12f36:	97 a1       	ldd	r25, Z+39	; 0x27
   12f38:	a0 a5       	ldd	r26, Z+40	; 0x28
   12f3a:	b1 a5       	ldd	r27, Z+41	; 0x29
   12f3c:	8e a3       	std	Y+38, r24	; 0x26
   12f3e:	9f a3       	std	Y+39, r25	; 0x27
   12f40:	a8 a7       	std	Y+40, r26	; 0x28
   12f42:	b9 a7       	std	Y+41, r27	; 0x29
   12f44:	82 a5       	ldd	r24, Z+42	; 0x2a
   12f46:	8a a7       	std	Y+42, r24	; 0x2a
   12f48:	df 91       	pop	r29
   12f4a:	cf 91       	pop	r28
   12f4c:	1f 91       	pop	r17
   12f4e:	0f 91       	pop	r16
   12f50:	08 95       	ret

00012f52 <alloc_device>:
   12f52:	0f 93       	push	r16
   12f54:	1f 93       	push	r17
   12f56:	cf 93       	push	r28
   12f58:	df 93       	push	r29
   12f5a:	ad b7       	in	r26, 0x3d	; 61
   12f5c:	be b7       	in	r27, 0x3e	; 62
   12f5e:	17 97       	sbiw	r26, 0x07	; 7
   12f60:	0f b6       	in	r0, 0x3f	; 63
   12f62:	f8 94       	cli
   12f64:	be bf       	out	0x3e, r27	; 62
   12f66:	0f be       	out	0x3f, r0	; 63
   12f68:	ad bf       	out	0x3d, r26	; 61
   12f6a:	8c 01       	movw	r16, r24
   12f6c:	67 de       	rcall	.-818    	; 0x12c3c <find_free>
   12f6e:	ec 01       	movw	r28, r24
   12f70:	cf 3f       	cpi	r28, 0xFF	; 255
   12f72:	8f ef       	ldi	r24, 0xFF	; 255
   12f74:	d8 07       	cpc	r29, r24
   12f76:	89 f4       	brne	.+34     	; 0x12f9a <alloc_device+0x48>
   12f78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f7c:	80 ff       	sbrs	r24, 0
   12f7e:	a1 c0       	rjmp	.+322    	; 0x130c2 <alloc_device+0x170>
   12f80:	ed b7       	in	r30, 0x3d	; 61
   12f82:	fe b7       	in	r31, 0x3e	; 62
   12f84:	15 83       	std	Z+5, r17	; 0x05
   12f86:	04 83       	std	Z+4, r16	; 0x04
   12f88:	8a e3       	ldi	r24, 0x3A	; 58
   12f8a:	98 e1       	ldi	r25, 0x18	; 24
   12f8c:	a0 e0       	ldi	r26, 0x00	; 0
   12f8e:	81 83       	std	Z+1, r24	; 0x01
   12f90:	92 83       	std	Z+2, r25	; 0x02
   12f92:	a3 83       	std	Z+3, r26	; 0x03
   12f94:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   12f98:	94 c0       	rjmp	.+296    	; 0x130c2 <alloc_device+0x170>
   12f9a:	02 30       	cpi	r16, 0x02	; 2
   12f9c:	11 05       	cpc	r17, r1
   12f9e:	e1 f1       	breq	.+120    	; 0x13018 <alloc_device+0xc6>
   12fa0:	ec f4       	brge	.+58     	; 0x12fdc <alloc_device+0x8a>
   12fa2:	01 30       	cpi	r16, 0x01	; 1
   12fa4:	11 05       	cpc	r17, r1
   12fa6:	09 f0       	breq	.+2      	; 0x12faa <alloc_device+0x58>
   12fa8:	76 c0       	rjmp	.+236    	; 0x13096 <alloc_device+0x144>
   12faa:	8b e2       	ldi	r24, 0x2B	; 43
   12fac:	8c 9f       	mul	r24, r28
   12fae:	80 01       	movw	r16, r0
   12fb0:	8d 9f       	mul	r24, r29
   12fb2:	10 0d       	add	r17, r0
   12fb4:	11 24       	eor	r1, r1
   12fb6:	06 51       	subi	r16, 0x16	; 22
   12fb8:	11 4e       	sbci	r17, 0xE1	; 225
   12fba:	81 e0       	ldi	r24, 0x01	; 1
   12fbc:	f8 01       	movw	r30, r16
   12fbe:	80 83       	st	Z, r24
   12fc0:	61 e0       	ldi	r22, 0x01	; 1
   12fc2:	70 e0       	ldi	r23, 0x00	; 0
   12fc4:	85 e1       	ldi	r24, 0x15	; 21
   12fc6:	90 e0       	ldi	r25, 0x00	; 0
   12fc8:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   12fcc:	f8 01       	movw	r30, r16
   12fce:	90 a7       	std	Z+40, r25	; 0x28
   12fd0:	87 a3       	std	Z+39, r24	; 0x27
   12fd2:	61 e0       	ldi	r22, 0x01	; 1
   12fd4:	70 e0       	ldi	r23, 0x00	; 0
   12fd6:	88 e1       	ldi	r24, 0x18	; 24
   12fd8:	90 e0       	ldi	r25, 0x00	; 0
   12fda:	57 c0       	rjmp	.+174    	; 0x1308a <alloc_device+0x138>
   12fdc:	03 30       	cpi	r16, 0x03	; 3
   12fde:	11 05       	cpc	r17, r1
   12fe0:	a1 f1       	breq	.+104    	; 0x1304a <alloc_device+0xf8>
   12fe2:	04 30       	cpi	r16, 0x04	; 4
   12fe4:	11 05       	cpc	r17, r1
   12fe6:	09 f0       	breq	.+2      	; 0x12fea <alloc_device+0x98>
   12fe8:	56 c0       	rjmp	.+172    	; 0x13096 <alloc_device+0x144>
   12fea:	8b e2       	ldi	r24, 0x2B	; 43
   12fec:	8c 9f       	mul	r24, r28
   12fee:	80 01       	movw	r16, r0
   12ff0:	8d 9f       	mul	r24, r29
   12ff2:	10 0d       	add	r17, r0
   12ff4:	11 24       	eor	r1, r1
   12ff6:	06 51       	subi	r16, 0x16	; 22
   12ff8:	11 4e       	sbci	r17, 0xE1	; 225
   12ffa:	84 e0       	ldi	r24, 0x04	; 4
   12ffc:	f8 01       	movw	r30, r16
   12ffe:	80 83       	st	Z, r24
   13000:	61 e0       	ldi	r22, 0x01	; 1
   13002:	70 e0       	ldi	r23, 0x00	; 0
   13004:	8b e0       	ldi	r24, 0x0B	; 11
   13006:	90 e0       	ldi	r25, 0x00	; 0
   13008:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   1300c:	f8 01       	movw	r30, r16
   1300e:	90 a7       	std	Z+40, r25	; 0x28
   13010:	87 a3       	std	Z+39, r24	; 0x27
   13012:	12 a6       	std	Z+42, r1	; 0x2a
   13014:	11 a6       	std	Z+41, r1	; 0x29
   13016:	55 c0       	rjmp	.+170    	; 0x130c2 <alloc_device+0x170>
   13018:	8b e2       	ldi	r24, 0x2B	; 43
   1301a:	8c 9f       	mul	r24, r28
   1301c:	80 01       	movw	r16, r0
   1301e:	8d 9f       	mul	r24, r29
   13020:	10 0d       	add	r17, r0
   13022:	11 24       	eor	r1, r1
   13024:	06 51       	subi	r16, 0x16	; 22
   13026:	11 4e       	sbci	r17, 0xE1	; 225
   13028:	82 e0       	ldi	r24, 0x02	; 2
   1302a:	f8 01       	movw	r30, r16
   1302c:	80 83       	st	Z, r24
   1302e:	61 e0       	ldi	r22, 0x01	; 1
   13030:	70 e0       	ldi	r23, 0x00	; 0
   13032:	82 e3       	ldi	r24, 0x32	; 50
   13034:	90 e0       	ldi	r25, 0x00	; 0
   13036:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   1303a:	f8 01       	movw	r30, r16
   1303c:	90 a7       	std	Z+40, r25	; 0x28
   1303e:	87 a3       	std	Z+39, r24	; 0x27
   13040:	61 e0       	ldi	r22, 0x01	; 1
   13042:	70 e0       	ldi	r23, 0x00	; 0
   13044:	86 e1       	ldi	r24, 0x16	; 22
   13046:	90 e0       	ldi	r25, 0x00	; 0
   13048:	20 c0       	rjmp	.+64     	; 0x1308a <alloc_device+0x138>
   1304a:	8b e2       	ldi	r24, 0x2B	; 43
   1304c:	8c 9f       	mul	r24, r28
   1304e:	80 01       	movw	r16, r0
   13050:	8d 9f       	mul	r24, r29
   13052:	10 0d       	add	r17, r0
   13054:	11 24       	eor	r1, r1
   13056:	06 51       	subi	r16, 0x16	; 22
   13058:	11 4e       	sbci	r17, 0xE1	; 225
   1305a:	83 e0       	ldi	r24, 0x03	; 3
   1305c:	f8 01       	movw	r30, r16
   1305e:	80 83       	st	Z, r24
   13060:	61 e0       	ldi	r22, 0x01	; 1
   13062:	70 e0       	ldi	r23, 0x00	; 0
   13064:	82 e3       	ldi	r24, 0x32	; 50
   13066:	90 e0       	ldi	r25, 0x00	; 0
   13068:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   1306c:	f8 01       	movw	r30, r16
   1306e:	90 a7       	std	Z+40, r25	; 0x28
   13070:	87 a3       	std	Z+39, r24	; 0x27
   13072:	61 e0       	ldi	r22, 0x01	; 1
   13074:	70 e0       	ldi	r23, 0x00	; 0
   13076:	86 e1       	ldi	r24, 0x16	; 22
   13078:	90 e0       	ldi	r25, 0x00	; 0
   1307a:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   1307e:	f8 01       	movw	r30, r16
   13080:	92 a7       	std	Z+42, r25	; 0x2a
   13082:	81 a7       	std	Z+41, r24	; 0x29
   13084:	ce 01       	movw	r24, r28
   13086:	eb de       	rcall	.-554    	; 0x12e5e <SS80_Set_Defaults>
   13088:	1c c0       	rjmp	.+56     	; 0x130c2 <alloc_device+0x170>
   1308a:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   1308e:	f8 01       	movw	r30, r16
   13090:	92 a7       	std	Z+42, r25	; 0x2a
   13092:	81 a7       	std	Z+41, r24	; 0x29
   13094:	16 c0       	rjmp	.+44     	; 0x130c2 <alloc_device+0x170>
   13096:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1309a:	80 ff       	sbrs	r24, 0
   1309c:	10 c0       	rjmp	.+32     	; 0x130be <alloc_device+0x16c>
   1309e:	c8 01       	movw	r24, r16
   130a0:	b4 dd       	rcall	.-1176   	; 0x12c0a <type_to_str>
   130a2:	ed b7       	in	r30, 0x3d	; 61
   130a4:	fe b7       	in	r31, 0x3e	; 62
   130a6:	97 83       	std	Z+7, r25	; 0x07
   130a8:	86 83       	std	Z+6, r24	; 0x06
   130aa:	15 83       	std	Z+5, r17	; 0x05
   130ac:	04 83       	std	Z+4, r16	; 0x04
   130ae:	88 e1       	ldi	r24, 0x18	; 24
   130b0:	98 e1       	ldi	r25, 0x18	; 24
   130b2:	a0 e0       	ldi	r26, 0x00	; 0
   130b4:	81 83       	std	Z+1, r24	; 0x01
   130b6:	92 83       	std	Z+2, r25	; 0x02
   130b8:	a3 83       	std	Z+3, r26	; 0x03
   130ba:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   130be:	cf ef       	ldi	r28, 0xFF	; 255
   130c0:	df ef       	ldi	r29, 0xFF	; 255
   130c2:	ce 01       	movw	r24, r28
   130c4:	cd b7       	in	r28, 0x3d	; 61
   130c6:	de b7       	in	r29, 0x3e	; 62
   130c8:	27 96       	adiw	r28, 0x07	; 7
   130ca:	e4 e0       	ldi	r30, 0x04	; 4
   130cc:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

000130d0 <init_Devices>:
   130d0:	cf 93       	push	r28
   130d2:	df 93       	push	r29
   130d4:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <stack_ind+0x1>
   130d8:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <stack_ind>
   130dc:	ea ee       	ldi	r30, 0xEA	; 234
   130de:	fe e1       	ldi	r31, 0x1E	; 30
   130e0:	9f ef       	ldi	r25, 0xFF	; 255
   130e2:	80 e2       	ldi	r24, 0x20	; 32
   130e4:	10 82       	st	Z, r1
   130e6:	11 82       	std	Z+1, r1	; 0x01
   130e8:	92 83       	std	Z+2, r25	; 0x02
   130ea:	13 82       	std	Z+3, r1	; 0x03
   130ec:	14 82       	std	Z+4, r1	; 0x04
   130ee:	15 82       	std	Z+5, r1	; 0x05
   130f0:	16 82       	std	Z+6, r1	; 0x06
   130f2:	df 01       	movw	r26, r30
   130f4:	17 96       	adiw	r26, 0x07	; 7
   130f6:	ed 01       	movw	r28, r26
   130f8:	28 2f       	mov	r18, r24
   130fa:	19 92       	st	Y+, r1
   130fc:	2a 95       	dec	r18
   130fe:	e9 f7       	brne	.-6      	; 0x130fa <init_Devices+0x2a>
   13100:	10 a6       	std	Z+40, r1	; 0x28
   13102:	17 a2       	std	Z+39, r1	; 0x27
   13104:	12 a6       	std	Z+42, r1	; 0x2a
   13106:	11 a6       	std	Z+41, r1	; 0x29
   13108:	bb 96       	adiw	r30, 0x2b	; 43
   1310a:	c0 e2       	ldi	r28, 0x20	; 32
   1310c:	ee 3e       	cpi	r30, 0xEE	; 238
   1310e:	fc 07       	cpc	r31, r28
   13110:	49 f7       	brne	.-46     	; 0x130e4 <init_Devices+0x14>
   13112:	df 91       	pop	r29
   13114:	cf 91       	pop	r28
   13116:	08 95       	ret

00013118 <push_state>:
   13118:	20 91 6d 19 	lds	r18, 0x196D	; 0x80196d <stack_ind>
   1311c:	30 91 6e 19 	lds	r19, 0x196E	; 0x80196e <stack_ind+0x1>
   13120:	25 30       	cpi	r18, 0x05	; 5
   13122:	31 05       	cpc	r19, r1
   13124:	7c f4       	brge	.+30     	; 0x13144 <push_state+0x2c>
   13126:	a9 01       	movw	r20, r18
   13128:	4f 5f       	subi	r20, 0xFF	; 255
   1312a:	5f 4f       	sbci	r21, 0xFF	; 255
   1312c:	50 93 6e 19 	sts	0x196E, r21	; 0x80196e <stack_ind+0x1>
   13130:	40 93 6d 19 	sts	0x196D, r20	; 0x80196d <stack_ind>
   13134:	22 0f       	add	r18, r18
   13136:	33 1f       	adc	r19, r19
   13138:	f9 01       	movw	r30, r18
   1313a:	ed 59       	subi	r30, 0x9D	; 157
   1313c:	f6 4e       	sbci	r31, 0xE6	; 230
   1313e:	80 83       	st	Z, r24
   13140:	91 83       	std	Z+1, r25	; 0x01
   13142:	08 95       	ret
   13144:	80 e0       	ldi	r24, 0x00	; 0
   13146:	90 e0       	ldi	r25, 0x00	; 0
   13148:	08 95       	ret

0001314a <pop_state>:
   1314a:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <stack_ind>
   1314e:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <stack_ind+0x1>
   13152:	18 16       	cp	r1, r24
   13154:	19 06       	cpc	r1, r25
   13156:	6c f4       	brge	.+26     	; 0x13172 <pop_state+0x28>
   13158:	01 97       	sbiw	r24, 0x01	; 1
   1315a:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <stack_ind+0x1>
   1315e:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <stack_ind>
   13162:	88 0f       	add	r24, r24
   13164:	99 1f       	adc	r25, r25
   13166:	fc 01       	movw	r30, r24
   13168:	ed 59       	subi	r30, 0x9D	; 157
   1316a:	f6 4e       	sbci	r31, 0xE6	; 230
   1316c:	80 81       	ld	r24, Z
   1316e:	91 81       	ldd	r25, Z+1	; 0x01
   13170:	08 95       	ret
   13172:	80 e0       	ldi	r24, 0x00	; 0
   13174:	90 e0       	ldi	r25, 0x00	; 0
   13176:	08 95       	ret

00013178 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   13178:	08 95       	ret

0001317a <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   1317a:	0f 93       	push	r16
   1317c:	1f 93       	push	r17
   1317e:	cf 93       	push	r28
   13180:	df 93       	push	r29
   13182:	00 d0       	rcall	.+0      	; 0x13184 <hpdir_set_device+0xa>
   13184:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   13186:	2b e2       	ldi	r18, 0x2B	; 43
   13188:	ac 01       	movw	r20, r24
   1318a:	24 9f       	mul	r18, r20
   1318c:	c0 01       	movw	r24, r0
   1318e:	25 9f       	mul	r18, r21
   13190:	90 0d       	add	r25, r0
   13192:	11 24       	eor	r1, r1
   13194:	ec 01       	movw	r28, r24
   13196:	c6 51       	subi	r28, 0x16	; 22
   13198:	d1 4e       	sbci	r29, 0xE1	; 225
   1319a:	28 81       	ld	r18, Y
   1319c:	23 30       	cpi	r18, 0x03	; 3
   1319e:	a1 f5       	brne	.+104    	; 0x13208 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   131a0:	ef a1       	ldd	r30, Y+39	; 0x27
   131a2:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   131a4:	20 91 6e 21 	lds	r18, 0x216E	; 0x80216e <hpdir+0x80>
   131a8:	30 91 6f 21 	lds	r19, 0x216F	; 0x80216f <hpdir+0x81>
   131ac:	35 83       	std	Z+5, r19	; 0x05
   131ae:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   131b0:	40 91 7a 21 	lds	r20, 0x217A	; 0x80217a <hpdir+0x8c>
   131b4:	50 91 7b 21 	lds	r21, 0x217B	; 0x80217b <hpdir+0x8d>
   131b8:	60 91 7c 21 	lds	r22, 0x217C	; 0x80217c <hpdir+0x8e>
   131bc:	70 91 7d 21 	lds	r23, 0x217D	; 0x80217d <hpdir+0x8f>
   131c0:	44 87       	std	Z+12, r20	; 0x0c
   131c2:	55 87       	std	Z+13, r21	; 0x0d
   131c4:	66 87       	std	Z+14, r22	; 0x0e
   131c6:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   131c8:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <hpdir+0xa0>
   131cc:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <hpdir+0xa1>
   131d0:	31 8b       	std	Z+17, r19	; 0x11
   131d2:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   131d4:	17 8e       	std	Z+31, r1	; 0x1f
   131d6:	10 a2       	std	Z+32, r1	; 0x20
   131d8:	11 a2       	std	Z+33, r1	; 0x21
   131da:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   131dc:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   131de:	15 a2       	std	Z+37, r1	; 0x25
   131e0:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   131e2:	40 91 9a 21 	lds	r20, 0x219A	; 0x80219a <hpdir+0xac>
   131e6:	50 91 9b 21 	lds	r21, 0x219B	; 0x80219b <hpdir+0xad>
   131ea:	60 91 9c 21 	lds	r22, 0x219C	; 0x80219c <hpdir+0xae>
   131ee:	70 91 9d 21 	lds	r23, 0x219D	; 0x80219d <hpdir+0xaf>
   131f2:	8a 01       	movw	r16, r20
   131f4:	9b 01       	movw	r18, r22
   131f6:	01 50       	subi	r16, 0x01	; 1
   131f8:	11 09       	sbc	r17, r1
   131fa:	21 09       	sbc	r18, r1
   131fc:	31 09       	sbc	r19, r1
   131fe:	06 a3       	std	Z+38, r16	; 0x26
   13200:	17 a3       	std	Z+39, r17	; 0x27
   13202:	20 a7       	std	Z+40, r18	; 0x28
   13204:	31 a7       	std	Z+41, r19	; 0x29
   13206:	2a c0       	rjmp	.+84     	; 0x1325c <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   13208:	21 30       	cpi	r18, 0x01	; 1
   1320a:	a9 f5       	brne	.+106    	; 0x13276 <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1320c:	ef a1       	ldd	r30, Y+39	; 0x27
   1320e:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   13210:	20 91 6e 21 	lds	r18, 0x216E	; 0x80216e <hpdir+0x80>
   13214:	30 91 6f 21 	lds	r19, 0x216F	; 0x80216f <hpdir+0x81>
   13218:	35 83       	std	Z+5, r19	; 0x05
   1321a:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   1321c:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <hpdir+0xa0>
   13220:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <hpdir+0xa1>
   13224:	37 83       	std	Z+7, r19	; 0x07
   13226:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   13228:	20 91 8a 21 	lds	r18, 0x218A	; 0x80218a <hpdir+0x9c>
   1322c:	30 91 8b 21 	lds	r19, 0x218B	; 0x80218b <hpdir+0x9d>
   13230:	31 87       	std	Z+9, r19	; 0x09
   13232:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   13234:	20 91 86 21 	lds	r18, 0x2186	; 0x802186 <hpdir+0x98>
   13238:	30 91 87 21 	lds	r19, 0x2187	; 0x802187 <hpdir+0x99>
   1323c:	33 87       	std	Z+11, r19	; 0x0b
   1323e:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   13240:	20 91 82 21 	lds	r18, 0x2182	; 0x802182 <hpdir+0x94>
   13244:	30 91 83 21 	lds	r19, 0x2183	; 0x802183 <hpdir+0x95>
   13248:	35 87       	std	Z+13, r19	; 0x0d
   1324a:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   1324c:	40 91 9a 21 	lds	r20, 0x219A	; 0x80219a <hpdir+0xac>
   13250:	50 91 9b 21 	lds	r21, 0x219B	; 0x80219b <hpdir+0xad>
   13254:	60 91 9c 21 	lds	r22, 0x219C	; 0x80219c <hpdir+0xae>
   13258:	70 91 9d 21 	lds	r23, 0x219D	; 0x80219d <hpdir+0xaf>
   1325c:	4b 83       	std	Y+3, r20	; 0x03
   1325e:	5c 83       	std	Y+4, r21	; 0x04
   13260:	6d 83       	std	Y+5, r22	; 0x05
   13262:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   13264:	4e e1       	ldi	r20, 0x1E	; 30
   13266:	50 e0       	ldi	r21, 0x00	; 0
   13268:	6e ee       	ldi	r22, 0xEE	; 238
   1326a:	70 e2       	ldi	r23, 0x20	; 32
   1326c:	8f 50       	subi	r24, 0x0F	; 15
   1326e:	91 4e       	sbci	r25, 0xE1	; 225
   13270:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <strncpy>
   13274:	0a c0       	rjmp	.+20     	; 0x1328a <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   13276:	89 ef       	ldi	r24, 0xF9	; 249
   13278:	97 e1       	ldi	r25, 0x17	; 23
   1327a:	a0 e0       	ldi	r26, 0x00	; 0
   1327c:	ed b7       	in	r30, 0x3d	; 61
   1327e:	fe b7       	in	r31, 0x3e	; 62
   13280:	81 83       	std	Z+1, r24	; 0x01
   13282:	92 83       	std	Z+2, r25	; 0x02
   13284:	a3 83       	std	Z+3, r26	; 0x03
   13286:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

}
   1328a:	cd b7       	in	r28, 0x3d	; 61
   1328c:	de b7       	in	r29, 0x3e	; 62
   1328e:	23 96       	adiw	r28, 0x03	; 3
   13290:	e4 e0       	ldi	r30, 0x04	; 4
   13292:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00013296 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   13296:	cf 93       	push	r28
   13298:	df 93       	push	r29
   1329a:	ec 01       	movw	r28, r24
   1329c:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   1329e:	41 e0       	ldi	r20, 0x01	; 1
   132a0:	50 e0       	ldi	r21, 0x00	; 0
   132a2:	60 e0       	ldi	r22, 0x00	; 0
   132a4:	70 e0       	ldi	r23, 0x00	; 0
   132a6:	6b d7       	rcall	.+3798   	; 0x1417e <hpdir_find_drive>
   132a8:	89 2b       	or	r24, r25
   132aa:	11 f0       	breq	.+4      	; 0x132b0 <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   132ac:	ce 01       	movw	r24, r28
   132ae:	65 df       	rcall	.-310    	; 0x1317a <hpdir_set_device>
}
   132b0:	df 91       	pop	r29
   132b2:	cf 91       	pop	r28
   132b4:	08 95       	ret

000132b6 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   132b6:	4f 92       	push	r4
   132b8:	5f 92       	push	r5
   132ba:	6f 92       	push	r6
   132bc:	7f 92       	push	r7
   132be:	8f 92       	push	r8
   132c0:	af 92       	push	r10
   132c2:	bf 92       	push	r11
   132c4:	cf 92       	push	r12
   132c6:	df 92       	push	r13
   132c8:	ef 92       	push	r14
   132ca:	0f 93       	push	r16
   132cc:	1f 93       	push	r17
   132ce:	cf 93       	push	r28
   132d0:	df 93       	push	r29
   132d2:	00 d0       	rcall	.+0      	; 0x132d4 <Post_Config+0x1e>
   132d4:	00 d0       	rcall	.+0      	; 0x132d6 <Post_Config+0x20>
   132d6:	1f 92       	push	r1
   132d8:	ca ee       	ldi	r28, 0xEA	; 234
   132da:	de e1       	ldi	r29, 0x1E	; 30
   132dc:	8e ee       	ldi	r24, 0xEE	; 238
   132de:	48 2e       	mov	r4, r24
   132e0:	80 e2       	ldi	r24, 0x20	; 32
   132e2:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   132e4:	a1 2c       	mov	r10, r1
   132e6:	bb 24       	eor	r11, r11
   132e8:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   132ea:	8c e8       	ldi	r24, 0x8C	; 140
   132ec:	97 e1       	ldi	r25, 0x17	; 23
   132ee:	6c 01       	movw	r12, r24
   132f0:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   132f2:	83 ec       	ldi	r24, 0xC3	; 195
   132f4:	97 e1       	ldi	r25, 0x17	; 23
   132f6:	3c 01       	movw	r6, r24
   132f8:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   132fa:	88 81       	ld	r24, Y
   132fc:	88 23       	and	r24, r24
   132fe:	09 f4       	brne	.+2      	; 0x13302 <Post_Config+0x4c>
   13300:	57 c0       	rjmp	.+174    	; 0x133b0 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13302:	83 30       	cpi	r24, 0x03	; 3
   13304:	f9 f4       	brne	.+62     	; 0x13344 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13306:	0f a1       	ldd	r16, Y+39	; 0x27
   13308:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   1330a:	f8 01       	movw	r30, r16
   1330c:	80 89       	ldd	r24, Z+16	; 0x10
   1330e:	91 89       	ldd	r25, Z+17	; 0x11
   13310:	81 15       	cp	r24, r1
   13312:	91 40       	sbci	r25, 0x01	; 1
   13314:	59 f0       	breq	.+22     	; 0x1332c <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13316:	ce 01       	movw	r24, r28
   13318:	07 96       	adiw	r24, 0x07	; 7
   1331a:	ed b7       	in	r30, 0x3d	; 61
   1331c:	fe b7       	in	r31, 0x3e	; 62
   1331e:	95 83       	std	Z+5, r25	; 0x05
   13320:	84 83       	std	Z+4, r24	; 0x04
   13322:	61 82       	std	Z+1, r6	; 0x01
   13324:	72 82       	std	Z+2, r7	; 0x02
   13326:	83 82       	std	Z+3, r8	; 0x03
   13328:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   1332c:	f8 01       	movw	r30, r16
   1332e:	86 a1       	ldd	r24, Z+38	; 0x26
   13330:	97 a1       	ldd	r25, Z+39	; 0x27
   13332:	a0 a5       	ldd	r26, Z+40	; 0x28
   13334:	b1 a5       	ldd	r27, Z+41	; 0x29
   13336:	01 96       	adiw	r24, 0x01	; 1
   13338:	a1 1d       	adc	r26, r1
   1333a:	b1 1d       	adc	r27, r1
   1333c:	8b 83       	std	Y+3, r24	; 0x03
   1333e:	9c 83       	std	Y+4, r25	; 0x04
   13340:	ad 83       	std	Y+5, r26	; 0x05
   13342:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13344:	88 81       	ld	r24, Y
   13346:	81 30       	cpi	r24, 0x01	; 1
   13348:	99 f5       	brne	.+102    	; 0x133b0 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   1334a:	0f a1       	ldd	r16, Y+39	; 0x27
   1334c:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   1334e:	f8 01       	movw	r30, r16
   13350:	86 81       	ldd	r24, Z+6	; 0x06
   13352:	97 81       	ldd	r25, Z+7	; 0x07
   13354:	81 15       	cp	r24, r1
   13356:	91 40       	sbci	r25, 0x01	; 1
   13358:	71 f0       	breq	.+28     	; 0x13376 <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1335a:	f8 01       	movw	r30, r16
   1335c:	b7 82       	std	Z+7, r11	; 0x07
   1335e:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13360:	ce 01       	movw	r24, r28
   13362:	07 96       	adiw	r24, 0x07	; 7
   13364:	ed b7       	in	r30, 0x3d	; 61
   13366:	fe b7       	in	r31, 0x3e	; 62
   13368:	95 83       	std	Z+5, r25	; 0x05
   1336a:	84 83       	std	Z+4, r24	; 0x04
   1336c:	c1 82       	std	Z+1, r12	; 0x01
   1336e:	d2 82       	std	Z+2, r13	; 0x02
   13370:	e3 82       	std	Z+3, r14	; 0x03
   13372:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   13376:	f8 01       	movw	r30, r16
   13378:	20 85       	ldd	r18, Z+8	; 0x08
   1337a:	31 85       	ldd	r19, Z+9	; 0x09
   1337c:	82 85       	ldd	r24, Z+10	; 0x0a
   1337e:	93 85       	ldd	r25, Z+11	; 0x0b
   13380:	28 9f       	mul	r18, r24
   13382:	a0 01       	movw	r20, r0
   13384:	29 9f       	mul	r18, r25
   13386:	50 0d       	add	r21, r0
   13388:	38 9f       	mul	r19, r24
   1338a:	50 0d       	add	r21, r0
   1338c:	11 24       	eor	r1, r1
   1338e:	24 85       	ldd	r18, Z+12	; 0x0c
   13390:	35 85       	ldd	r19, Z+13	; 0x0d
   13392:	42 9f       	mul	r20, r18
   13394:	c0 01       	movw	r24, r0
   13396:	43 9f       	mul	r20, r19
   13398:	90 0d       	add	r25, r0
   1339a:	52 9f       	mul	r21, r18
   1339c:	90 0d       	add	r25, r0
   1339e:	11 24       	eor	r1, r1
   133a0:	09 2e       	mov	r0, r25
   133a2:	00 0c       	add	r0, r0
   133a4:	aa 0b       	sbc	r26, r26
   133a6:	bb 0b       	sbc	r27, r27
   133a8:	8b 83       	std	Y+3, r24	; 0x03
   133aa:	9c 83       	std	Y+4, r25	; 0x04
   133ac:	ad 83       	std	Y+5, r26	; 0x05
   133ae:	be 83       	std	Y+6, r27	; 0x06
   133b0:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   133b2:	4c 16       	cp	r4, r28
   133b4:	5d 06       	cpc	r5, r29
   133b6:	09 f0       	breq	.+2      	; 0x133ba <Post_Config+0x104>
   133b8:	a0 cf       	rjmp	.-192    	; 0x132fa <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   133ba:	0f 90       	pop	r0
   133bc:	0f 90       	pop	r0
   133be:	0f 90       	pop	r0
   133c0:	0f 90       	pop	r0
   133c2:	0f 90       	pop	r0
   133c4:	df 91       	pop	r29
   133c6:	cf 91       	pop	r28
   133c8:	1f 91       	pop	r17
   133ca:	0f 91       	pop	r16
   133cc:	ef 90       	pop	r14
   133ce:	df 90       	pop	r13
   133d0:	cf 90       	pop	r12
   133d2:	bf 90       	pop	r11
   133d4:	af 90       	pop	r10
   133d6:	8f 90       	pop	r8
   133d8:	7f 90       	pop	r7
   133da:	6f 90       	pop	r6
   133dc:	5f 90       	pop	r5
   133de:	4f 90       	pop	r4
   133e0:	08 95       	ret

000133e2 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   133e2:	af e1       	ldi	r26, 0x1F	; 31
   133e4:	b1 e0       	ldi	r27, 0x01	; 1
   133e6:	e7 ef       	ldi	r30, 0xF7	; 247
   133e8:	f9 e9       	ldi	r31, 0x99	; 153
   133ea:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   133ee:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   133f0:	6f de       	rcall	.-802    	; 0x130d0 <init_Devices>

    printf("Reading: %s\n", name);
   133f2:	ed b7       	in	r30, 0x3d	; 61
   133f4:	fe b7       	in	r31, 0x3e	; 62
   133f6:	15 83       	std	Z+5, r17	; 0x05
   133f8:	04 83       	std	Z+4, r16	; 0x04
   133fa:	8f e6       	ldi	r24, 0x6F	; 111
   133fc:	9d e1       	ldi	r25, 0x1D	; 29
   133fe:	a0 e0       	ldi	r26, 0x00	; 0
   13400:	81 83       	std	Z+1, r24	; 0x01
   13402:	92 83       	std	Z+2, r25	; 0x02
   13404:	a3 83       	std	Z+3, r26	; 0x03
   13406:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    cfg = fopen(name, "rb");
   1340a:	6e ef       	ldi	r22, 0xFE	; 254
   1340c:	78 e0       	ldi	r23, 0x08	; 8
   1340e:	c8 01       	movw	r24, r16
   13410:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fopen>
   13414:	c4 5f       	subi	r28, 0xF4	; 244
   13416:	de 4f       	sbci	r29, 0xFE	; 254
   13418:	99 83       	std	Y+1, r25	; 0x01
   1341a:	88 83       	st	Y, r24
   1341c:	cc 50       	subi	r28, 0x0C	; 12
   1341e:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13420:	89 2b       	or	r24, r25
   13422:	09 f4       	brne	.+2      	; 0x13426 <Read_Config+0x44>
   13424:	59 c0       	rjmp	.+178    	; 0x134d8 <Read_Config+0xf6>
   13426:	41 2c       	mov	r4, r1
   13428:	51 2c       	mov	r5, r1
   1342a:	c1 2c       	mov	r12, r1
   1342c:	d1 2c       	mov	r13, r1
   1342e:	c8 5f       	subi	r28, 0xF8	; 248
   13430:	de 4f       	sbci	r29, 0xFE	; 254
   13432:	19 82       	std	Y+1, r1	; 0x01
   13434:	18 82       	st	Y, r1
   13436:	c8 50       	subi	r28, 0x08	; 8
   13438:	d1 40       	sbci	r29, 0x01	; 1
   1343a:	61 2c       	mov	r6, r1
   1343c:	71 2c       	mov	r7, r1
   1343e:	c6 5f       	subi	r28, 0xF6	; 246
   13440:	de 4f       	sbci	r29, 0xFE	; 254
   13442:	19 82       	std	Y+1, r1	; 0x01
   13444:	18 82       	st	Y, r1
   13446:	ca 50       	subi	r28, 0x0A	; 10
   13448:	d1 40       	sbci	r29, 0x01	; 1
   1344a:	e1 2c       	mov	r14, r1
   1344c:	f1 2c       	mov	r15, r1
   1344e:	21 2c       	mov	r2, r1
   13450:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13452:	8e eb       	ldi	r24, 0xBE	; 190
   13454:	9a e1       	ldi	r25, 0x1A	; 26
   13456:	9c 01       	movw	r18, r24
   13458:	40 e0       	ldi	r20, 0x00	; 0
   1345a:	c2 5f       	subi	r28, 0xF2	; 242
   1345c:	de 4f       	sbci	r29, 0xFE	; 254
   1345e:	28 83       	st	Y, r18
   13460:	39 83       	std	Y+1, r19	; 0x01
   13462:	4a 83       	std	Y+2, r20	; 0x02
   13464:	ce 50       	subi	r28, 0x0E	; 14
   13466:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13468:	80 ee       	ldi	r24, 0xE0	; 224
   1346a:	9a e1       	ldi	r25, 0x1A	; 26
   1346c:	9c 01       	movw	r18, r24
   1346e:	40 e0       	ldi	r20, 0x00	; 0
   13470:	cf 5e       	subi	r28, 0xEF	; 239
   13472:	de 4f       	sbci	r29, 0xFE	; 254
   13474:	28 83       	st	Y, r18
   13476:	39 83       	std	Y+1, r19	; 0x01
   13478:	4a 83       	std	Y+2, r20	; 0x02
   1347a:	c1 51       	subi	r28, 0x11	; 17
   1347c:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1347e:	80 e1       	ldi	r24, 0x10	; 16
   13480:	9b e1       	ldi	r25, 0x1B	; 27
   13482:	9c 01       	movw	r18, r24
   13484:	40 e0       	ldi	r20, 0x00	; 0
   13486:	cc 5e       	subi	r28, 0xEC	; 236
   13488:	de 4f       	sbci	r29, 0xFE	; 254
   1348a:	28 83       	st	Y, r18
   1348c:	39 83       	std	Y+1, r19	; 0x01
   1348e:	4a 83       	std	Y+2, r20	; 0x02
   13490:	c4 51       	subi	r28, 0x14	; 20
   13492:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13494:	8f e3       	ldi	r24, 0x3F	; 63
   13496:	9b e1       	ldi	r25, 0x1B	; 27
   13498:	9c 01       	movw	r18, r24
   1349a:	40 e0       	ldi	r20, 0x00	; 0
   1349c:	c9 5e       	subi	r28, 0xE9	; 233
   1349e:	de 4f       	sbci	r29, 0xFE	; 254
   134a0:	28 83       	st	Y, r18
   134a2:	39 83       	std	Y+1, r19	; 0x01
   134a4:	4a 83       	std	Y+2, r20	; 0x02
   134a6:	c7 51       	subi	r28, 0x17	; 23
   134a8:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   134aa:	8f e6       	ldi	r24, 0x6F	; 111
   134ac:	9b e1       	ldi	r25, 0x1B	; 27
   134ae:	9c 01       	movw	r18, r24
   134b0:	40 e0       	ldi	r20, 0x00	; 0
   134b2:	c6 5e       	subi	r28, 0xE6	; 230
   134b4:	de 4f       	sbci	r29, 0xFE	; 254
   134b6:	28 83       	st	Y, r18
   134b8:	39 83       	std	Y+1, r19	; 0x01
   134ba:	4a 83       	std	Y+2, r20	; 0x02
   134bc:	ca 51       	subi	r28, 0x1A	; 26
   134be:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   134c0:	8d e9       	ldi	r24, 0x9D	; 157
   134c2:	9b e1       	ldi	r25, 0x1B	; 27
   134c4:	9c 01       	movw	r18, r24
   134c6:	40 e0       	ldi	r20, 0x00	; 0
   134c8:	c3 5e       	subi	r28, 0xE3	; 227
   134ca:	de 4f       	sbci	r29, 0xFE	; 254
   134cc:	28 83       	st	Y, r18
   134ce:	39 83       	std	Y+1, r19	; 0x01
   134d0:	4a 83       	std	Y+2, r20	; 0x02
   134d2:	cd 51       	subi	r28, 0x1D	; 29
   134d4:	d1 40       	sbci	r29, 0x01	; 1
   134d6:	26 c0       	rjmp	.+76     	; 0x13524 <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   134d8:	8d e5       	ldi	r24, 0x5D	; 93
   134da:	9e e0       	ldi	r25, 0x0E	; 14
   134dc:	0e 94 22 77 	call	0xee44	; 0xee44 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   134e0:	ed b7       	in	r30, 0x3d	; 61
   134e2:	fe b7       	in	r31, 0x3e	; 62
   134e4:	15 83       	std	Z+5, r17	; 0x05
   134e6:	04 83       	std	Z+4, r16	; 0x04
   134e8:	81 e5       	ldi	r24, 0x51	; 81
   134ea:	9d e1       	ldi	r25, 0x1D	; 29
   134ec:	a0 e0       	ldi	r26, 0x00	; 0
   134ee:	81 83       	std	Z+1, r24	; 0x01
   134f0:	92 83       	std	Z+2, r25	; 0x02
   134f2:	a3 83       	std	Z+3, r26	; 0x03
   134f4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        set_Config_Defaults();
        return(errors);
   134f8:	81 e0       	ldi	r24, 0x01	; 1
   134fa:	90 e0       	ldi	r25, 0x00	; 0
   134fc:	95 c3       	rjmp	.+1834   	; 0x13c28 <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   134fe:	ff ef       	ldi	r31, 0xFF	; 255
   13500:	4f 1a       	sub	r4, r31
   13502:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13504:	4e e7       	ldi	r20, 0x7E	; 126
   13506:	50 e0       	ldi	r21, 0x00	; 0
   13508:	9e 01       	movw	r18, r28
   1350a:	28 5f       	subi	r18, 0xF8	; 248
   1350c:	3f 4f       	sbci	r19, 0xFF	; 255
   1350e:	49 01       	movw	r8, r18
   13510:	b9 01       	movw	r22, r18
   13512:	ce 01       	movw	r24, r28
   13514:	88 57       	subi	r24, 0x78	; 120
   13516:	9f 4f       	sbci	r25, 0xFF	; 255
   13518:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   1351c:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   1351e:	88 85       	ldd	r24, Y+8	; 0x08
   13520:	81 11       	cpse	r24, r1
   13522:	10 c0       	rjmp	.+32     	; 0x13544 <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13524:	c4 5f       	subi	r28, 0xF4	; 244
   13526:	de 4f       	sbci	r29, 0xFE	; 254
   13528:	48 81       	ld	r20, Y
   1352a:	59 81       	ldd	r21, Y+1	; 0x01
   1352c:	cc 50       	subi	r28, 0x0C	; 12
   1352e:	d1 40       	sbci	r29, 0x01	; 1
   13530:	6e e7       	ldi	r22, 0x7E	; 126
   13532:	70 e0       	ldi	r23, 0x00	; 0
   13534:	ce 01       	movw	r24, r28
   13536:	88 57       	subi	r24, 0x78	; 120
   13538:	9f 4f       	sbci	r25, 0xFF	; 255
   1353a:	0e 94 09 75 	call	0xea12	; 0xea12 <fgets>
   1353e:	89 2b       	or	r24, r25
   13540:	f1 f6       	brne	.-68     	; 0x134fe <Read_Config+0x11c>
   13542:	32 c3       	rjmp	.+1636   	; 0x13ba8 <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13544:	83 32       	cpi	r24, 0x23	; 35
   13546:	71 f3       	breq	.-36     	; 0x13524 <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13548:	c4 01       	movw	r24, r8
   1354a:	0e 94 a5 91 	call	0x1234a	; 0x1234a <tok_index>
   1354e:	8f 3f       	cpi	r24, 0xFF	; 255
   13550:	3f ef       	ldi	r19, 0xFF	; 255
   13552:	93 07       	cpc	r25, r19
   13554:	49 f4       	brne	.+18     	; 0x13568 <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13556:	ed b7       	in	r30, 0x3d	; 61
   13558:	fe b7       	in	r31, 0x3e	; 62
   1355a:	57 82       	std	Z+7, r5	; 0x07
   1355c:	46 82       	std	Z+6, r4	; 0x06
   1355e:	95 82       	std	Z+5, r9	; 0x05
   13560:	84 82       	std	Z+4, r8	; 0x04
   13562:	8f e2       	ldi	r24, 0x2F	; 47
   13564:	9d e1       	ldi	r25, 0x1D	; 29
   13566:	c9 c0       	rjmp	.+402    	; 0x136fa <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13568:	88 0f       	add	r24, r24
   1356a:	99 1f       	adc	r25, r25
   1356c:	88 0f       	add	r24, r24
   1356e:	99 1f       	adc	r25, r25
   13570:	fc 01       	movw	r30, r24
   13572:	ec 53       	subi	r30, 0x3C	; 60
   13574:	fe 4f       	sbci	r31, 0xFE	; 254
   13576:	02 81       	ldd	r16, Z+2	; 0x02
   13578:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   1357a:	4e e7       	ldi	r20, 0x7E	; 126
   1357c:	50 e0       	ldi	r21, 0x00	; 0
   1357e:	b4 01       	movw	r22, r8
   13580:	c5 01       	movw	r24, r10
   13582:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   13586:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13588:	60 e7       	ldi	r22, 0x70	; 112
   1358a:	7e e0       	ldi	r23, 0x0E	; 14
   1358c:	c4 01       	movw	r24, r8
   1358e:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   13592:	89 2b       	or	r24, r25
   13594:	39 f0       	breq	.+14     	; 0x135a4 <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13596:	4e e7       	ldi	r20, 0x7E	; 126
   13598:	50 e0       	ldi	r21, 0x00	; 0
   1359a:	b4 01       	movw	r22, r8
   1359c:	c5 01       	movw	r24, r10
   1359e:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   135a2:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   135a4:	c4 01       	movw	r24, r8
   135a6:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   135aa:	01 31       	cpi	r16, 0x11	; 17
   135ac:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   135ae:	19 f4       	brne	.+6      	; 0x135b6 <Read_Config+0x1d4>
   135b0:	cc dd       	rcall	.-1128   	; 0x1314a <pop_state>
   135b2:	1c 01       	movw	r2, r24
            continue;
   135b4:	b7 cf       	rjmp	.-146    	; 0x13524 <Read_Config+0x142>
        }

        switch(state)
   135b6:	30 e1       	ldi	r19, 0x10	; 16
   135b8:	23 16       	cp	r2, r19
   135ba:	31 04       	cpc	r3, r1
   135bc:	08 f0       	brcs	.+2      	; 0x135c0 <Read_Config+0x1de>
   135be:	de c2       	rjmp	.+1468   	; 0x13b7c <Read_Config+0x79a>
   135c0:	f1 01       	movw	r30, r2
   135c2:	ea 53       	subi	r30, 0x3A	; 58
   135c4:	ff 4f       	sbci	r31, 0xFF	; 255
   135c6:	0c 94 29 e2 	jmp	0x1c452	; 0x1c452 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   135ca:	0e 30       	cpi	r16, 0x0E	; 14
   135cc:	11 05       	cpc	r17, r1
   135ce:	09 f4       	brne	.+2      	; 0x135d2 <Read_Config+0x1f0>
   135d0:	87 c0       	rjmp	.+270    	; 0x136e0 <Read_Config+0x2fe>
   135d2:	44 f4       	brge	.+16     	; 0x135e4 <Read_Config+0x202>
   135d4:	02 30       	cpi	r16, 0x02	; 2
   135d6:	11 05       	cpc	r17, r1
   135d8:	09 f4       	brne	.+2      	; 0x135dc <Read_Config+0x1fa>
   135da:	41 c0       	rjmp	.+130    	; 0x1365e <Read_Config+0x27c>
   135dc:	0c 30       	cpi	r16, 0x0C	; 12
   135de:	11 05       	cpc	r17, r1
   135e0:	09 f1       	breq	.+66     	; 0x13624 <Read_Config+0x242>
   135e2:	83 c0       	rjmp	.+262    	; 0x136ea <Read_Config+0x308>
   135e4:	03 32       	cpi	r16, 0x23	; 35
   135e6:	11 05       	cpc	r17, r1
   135e8:	e9 f0       	breq	.+58     	; 0x13624 <Read_Config+0x242>
   135ea:	04 32       	cpi	r16, 0x24	; 36
   135ec:	11 05       	cpc	r17, r1
   135ee:	29 f0       	breq	.+10     	; 0x135fa <Read_Config+0x218>
   135f0:	00 32       	cpi	r16, 0x20	; 32
   135f2:	11 05       	cpc	r17, r1
   135f4:	09 f0       	breq	.+2      	; 0x135f8 <Read_Config+0x216>
   135f6:	79 c0       	rjmp	.+242    	; 0x136ea <Read_Config+0x308>
   135f8:	55 c0       	rjmp	.+170    	; 0x136a4 <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   135fa:	80 e0       	ldi	r24, 0x00	; 0
   135fc:	90 e0       	ldi	r25, 0x00	; 0
   135fe:	8c dd       	rcall	.-1256   	; 0x13118 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13600:	82 e0       	ldi	r24, 0x02	; 2
   13602:	90 e0       	ldi	r25, 0x00	; 0
   13604:	a6 dc       	rcall	.-1716   	; 0x12f52 <alloc_device>
   13606:	6c 01       	movw	r12, r24
   13608:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   1360a:	09 f4       	brne	.+2      	; 0x1360e <Read_Config+0x22c>
   1360c:	8b cf       	rjmp	.-234    	; 0x13524 <Read_Config+0x142>
   1360e:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13610:	8c 9d       	mul	r24, r12
   13612:	f0 01       	movw	r30, r0
   13614:	8d 9d       	mul	r24, r13
   13616:	f0 0d       	add	r31, r0
   13618:	11 24       	eor	r1, r1
   1361a:	e6 51       	subi	r30, 0x16	; 22
   1361c:	f1 4e       	sbci	r31, 0xE1	; 225
   1361e:	67 a0       	ldd	r6, Z+39	; 0x27
   13620:	70 a4       	ldd	r7, Z+40	; 0x28
   13622:	19 c0       	rjmp	.+50     	; 0x13656 <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13624:	80 e0       	ldi	r24, 0x00	; 0
   13626:	90 e0       	ldi	r25, 0x00	; 0
   13628:	77 dd       	rcall	.-1298   	; 0x13118 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   1362a:	83 e0       	ldi	r24, 0x03	; 3
   1362c:	90 e0       	ldi	r25, 0x00	; 0
   1362e:	91 dc       	rcall	.-1758   	; 0x12f52 <alloc_device>
   13630:	6c 01       	movw	r12, r24
   13632:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   13634:	c8 16       	cp	r12, r24
   13636:	d8 06       	cpc	r13, r24
   13638:	09 f4       	brne	.+2      	; 0x1363c <Read_Config+0x25a>
   1363a:	74 cf       	rjmp	.-280    	; 0x13524 <Read_Config+0x142>
   1363c:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   1363e:	8c 9d       	mul	r24, r12
   13640:	f0 01       	movw	r30, r0
   13642:	8d 9d       	mul	r24, r13
   13644:	f0 0d       	add	r31, r0
   13646:	11 24       	eor	r1, r1
   13648:	e6 51       	subi	r30, 0x16	; 22
   1364a:	f1 4e       	sbci	r31, 0xE1	; 225
   1364c:	67 a0       	ldd	r6, Z+39	; 0x27
   1364e:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   13650:	b4 01       	movw	r22, r8
   13652:	c6 01       	movw	r24, r12
   13654:	20 de       	rcall	.-960    	; 0x13296 <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13656:	22 24       	eor	r2, r2
   13658:	23 94       	inc	r2
   1365a:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   1365c:	63 cf       	rjmp	.-314    	; 0x13524 <Read_Config+0x142>
   1365e:	80 e0       	ldi	r24, 0x00	; 0
   13660:	90 e0       	ldi	r25, 0x00	; 0
   13662:	5a dd       	rcall	.-1356   	; 0x13118 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13664:	81 e0       	ldi	r24, 0x01	; 1
   13666:	90 e0       	ldi	r25, 0x00	; 0
   13668:	74 dc       	rcall	.-1816   	; 0x12f52 <alloc_device>
   1366a:	6c 01       	movw	r12, r24
   1366c:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   1366e:	c9 16       	cp	r12, r25
   13670:	d9 06       	cpc	r13, r25
   13672:	09 f4       	brne	.+2      	; 0x13676 <Read_Config+0x294>
   13674:	57 cf       	rjmp	.-338    	; 0x13524 <Read_Config+0x142>
   13676:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13678:	8c 9d       	mul	r24, r12
   1367a:	f0 01       	movw	r30, r0
   1367c:	8d 9d       	mul	r24, r13
   1367e:	f0 0d       	add	r31, r0
   13680:	11 24       	eor	r1, r1
   13682:	e6 51       	subi	r30, 0x16	; 22
   13684:	f1 4e       	sbci	r31, 0xE1	; 225
   13686:	a7 a1       	ldd	r26, Z+39	; 0x27
   13688:	b0 a5       	ldd	r27, Z+40	; 0x28
   1368a:	c8 5f       	subi	r28, 0xF8	; 248
   1368c:	de 4f       	sbci	r29, 0xFE	; 254
   1368e:	b9 83       	std	Y+1, r27	; 0x01
   13690:	a8 83       	st	Y, r26
   13692:	c8 50       	subi	r28, 0x08	; 8
   13694:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13696:	b4 01       	movw	r22, r8
   13698:	c6 01       	movw	r24, r12
   1369a:	fd dd       	rcall	.-1030   	; 0x13296 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   1369c:	aa e0       	ldi	r26, 0x0A	; 10
   1369e:	2a 2e       	mov	r2, r26
   136a0:	31 2c       	mov	r3, r1
   136a2:	40 cf       	rjmp	.-384    	; 0x13524 <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   136a4:	80 e0       	ldi	r24, 0x00	; 0
   136a6:	90 e0       	ldi	r25, 0x00	; 0
   136a8:	37 dd       	rcall	.-1426   	; 0x13118 <push_state>
   136aa:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   136ac:	90 e0       	ldi	r25, 0x00	; 0
   136ae:	51 dc       	rcall	.-1886   	; 0x12f52 <alloc_device>
   136b0:	6c 01       	movw	r12, r24
   136b2:	01 96       	adiw	r24, 0x01	; 1
   136b4:	09 f4       	brne	.+2      	; 0x136b8 <Read_Config+0x2d6>
                        if(index == -1)
   136b6:	36 cf       	rjmp	.-404    	; 0x13524 <Read_Config+0x142>
   136b8:	8b e2       	ldi	r24, 0x2B	; 43
   136ba:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   136bc:	f0 01       	movw	r30, r0
   136be:	8d 9d       	mul	r24, r13
   136c0:	f0 0d       	add	r31, r0
   136c2:	11 24       	eor	r1, r1
   136c4:	e6 51       	subi	r30, 0x16	; 22
   136c6:	f1 4e       	sbci	r31, 0xE1	; 225
   136c8:	27 a1       	ldd	r18, Z+39	; 0x27
   136ca:	30 a5       	ldd	r19, Z+40	; 0x28
   136cc:	c6 5f       	subi	r28, 0xF6	; 246
   136ce:	de 4f       	sbci	r29, 0xFE	; 254
   136d0:	39 83       	std	Y+1, r19	; 0x01
   136d2:	28 83       	st	Y, r18
   136d4:	ca 50       	subi	r28, 0x0A	; 10
   136d6:	d1 40       	sbci	r29, 0x01	; 1
   136d8:	fe e0       	ldi	r31, 0x0E	; 14
   136da:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   136dc:	31 2c       	mov	r3, r1
   136de:	22 cf       	rjmp	.-444    	; 0x13524 <Read_Config+0x142>
   136e0:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   136e4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   136e8:	1d cf       	rjmp	.-454    	; 0x13524 <Read_Config+0x142>
   136ea:	ed b7       	in	r30, 0x3d	; 61
                        break;
   136ec:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   136ee:	57 82       	std	Z+7, r5	; 0x07
   136f0:	46 82       	std	Z+6, r4	; 0x06
   136f2:	b5 82       	std	Z+5, r11	; 0x05
   136f4:	a4 82       	std	Z+4, r10	; 0x04
   136f6:	8d e0       	ldi	r24, 0x0D	; 13
   136f8:	9d e1       	ldi	r25, 0x1D	; 29
   136fa:	a0 e0       	ldi	r26, 0x00	; 0
   136fc:	81 83       	std	Z+1, r24	; 0x01
   136fe:	92 83       	std	Z+2, r25	; 0x02
   13700:	a3 83       	std	Z+3, r26	; 0x03
   13702:	4c c2       	rjmp	.+1176   	; 0x13b9c <Read_Config+0x7ba>
   13704:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13706:	11 05       	cpc	r17, r1
   13708:	39 f4       	brne	.+14     	; 0x13718 <Read_Config+0x336>
   1370a:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   1370c:	90 e0       	ldi	r25, 0x00	; 0
   1370e:	04 dd       	rcall	.-1528   	; 0x13118 <push_state>
   13710:	ef e0       	ldi	r30, 0x0F	; 15
   13712:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   13714:	31 2c       	mov	r3, r1
   13716:	06 cf       	rjmp	.-500    	; 0x13524 <Read_Config+0x142>
   13718:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   1371a:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1371c:	57 82       	std	Z+7, r5	; 0x07
   1371e:	46 82       	std	Z+6, r4	; 0x06
   13720:	b5 82       	std	Z+5, r11	; 0x05
   13722:	a4 82       	std	Z+4, r10	; 0x04
   13724:	83 ee       	ldi	r24, 0xE3	; 227
   13726:	9c e1       	ldi	r25, 0x1C	; 28
   13728:	e8 cf       	rjmp	.-48     	; 0x136fa <Read_Config+0x318>
   1372a:	01 30       	cpi	r16, 0x01	; 1
   1372c:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   1372e:	b1 f4       	brne	.+44     	; 0x1375c <Read_Config+0x37a>
   13730:	6f 71       	andi	r22, 0x1F	; 31
   13732:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   13734:	8c 9d       	mul	r24, r12
   13736:	f0 01       	movw	r30, r0
   13738:	8d 9d       	mul	r24, r13
   1373a:	f0 0d       	add	r31, r0
   1373c:	11 24       	eor	r1, r1
   1373e:	e6 51       	subi	r30, 0x16	; 22
   13740:	f1 4e       	sbci	r31, 0xE1	; 225
   13742:	61 83       	std	Z+1, r22	; 0x01
   13744:	c6 5f       	subi	r28, 0xF6	; 246
   13746:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   13748:	a8 81       	ld	r26, Y
   1374a:	b9 81       	ldd	r27, Y+1	; 0x01
   1374c:	ca 50       	subi	r28, 0x0A	; 10
   1374e:	d1 40       	sbci	r29, 0x01	; 1
   13750:	6c 93       	st	X, r22
   13752:	8f ef       	ldi	r24, 0xFF	; 255
   13754:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13756:	fd 01       	movw	r30, r26
   13758:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   1375a:	e4 ce       	rjmp	.-568    	; 0x13524 <Read_Config+0x142>
   1375c:	ed b7       	in	r30, 0x3d	; 61
   1375e:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13760:	57 82       	std	Z+7, r5	; 0x07
   13762:	46 82       	std	Z+6, r4	; 0x06
   13764:	b5 82       	std	Z+5, r11	; 0x05
   13766:	a4 82       	std	Z+4, r10	; 0x04
   13768:	82 eb       	ldi	r24, 0xB2	; 178
   1376a:	9c e1       	ldi	r25, 0x1C	; 28
   1376c:	c6 cf       	rjmp	.-116    	; 0x136fa <Read_Config+0x318>
   1376e:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13770:	11 05       	cpc	r17, r1
   13772:	d9 f0       	breq	.+54     	; 0x137aa <Read_Config+0x3c8>
   13774:	6c f4       	brge	.+26     	; 0x13790 <Read_Config+0x3ae>
   13776:	09 30       	cpi	r16, 0x09	; 9
   13778:	11 05       	cpc	r17, r1
   1377a:	f1 f0       	breq	.+60     	; 0x137b8 <Read_Config+0x3d6>
   1377c:	0b 30       	cpi	r16, 0x0B	; 11
   1377e:	11 05       	cpc	r17, r1
   13780:	49 f5       	brne	.+82     	; 0x137d4 <Read_Config+0x3f2>
   13782:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13784:	90 e0       	ldi	r25, 0x00	; 0
   13786:	c8 dc       	rcall	.-1648   	; 0x13118 <push_state>
   13788:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   1378a:	25 2e       	mov	r2, r21
   1378c:	31 2c       	mov	r3, r1
   1378e:	ca ce       	rjmp	.-620    	; 0x13524 <Read_Config+0x142>
                        break;
   13790:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13792:	11 05       	cpc	r17, r1
   13794:	c1 f0       	breq	.+48     	; 0x137c6 <Read_Config+0x3e4>
   13796:	0a 32       	cpi	r16, 0x2A	; 42
   13798:	11 05       	cpc	r17, r1
   1379a:	e1 f4       	brne	.+56     	; 0x137d4 <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   1379c:	81 e0       	ldi	r24, 0x01	; 1
   1379e:	90 e0       	ldi	r25, 0x00	; 0
   137a0:	bb dc       	rcall	.-1674   	; 0x13118 <push_state>
                        state = SS80_VOLUME;
   137a2:	36 e0       	ldi	r19, 0x06	; 6
   137a4:	23 2e       	mov	r2, r19
   137a6:	31 2c       	mov	r3, r1
                        break;
   137a8:	bd ce       	rjmp	.-646    	; 0x13524 <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   137aa:	81 e0       	ldi	r24, 0x01	; 1
   137ac:	90 e0       	ldi	r25, 0x00	; 0
   137ae:	b4 dc       	rcall	.-1688   	; 0x13118 <push_state>
                        state = SS80_HEADER;
   137b0:	72 e0       	ldi	r23, 0x02	; 2
   137b2:	27 2e       	mov	r2, r23
   137b4:	31 2c       	mov	r3, r1
                        break;
   137b6:	b6 ce       	rjmp	.-660    	; 0x13524 <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   137b8:	81 e0       	ldi	r24, 0x01	; 1
   137ba:	90 e0       	ldi	r25, 0x00	; 0
   137bc:	ad dc       	rcall	.-1702   	; 0x13118 <push_state>
   137be:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   137c0:	26 2e       	mov	r2, r22
   137c2:	31 2c       	mov	r3, r1
   137c4:	af ce       	rjmp	.-674    	; 0x13524 <Read_Config+0x142>
                        break;
   137c6:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   137c8:	90 e0       	ldi	r25, 0x00	; 0
   137ca:	a6 dc       	rcall	.-1716   	; 0x13118 <push_state>
   137cc:	45 e0       	ldi	r20, 0x05	; 5
   137ce:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   137d0:	31 2c       	mov	r3, r1
   137d2:	a8 ce       	rjmp	.-688    	; 0x13524 <Read_Config+0x142>
   137d4:	ed b7       	in	r30, 0x3d	; 61
                        break;
   137d6:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   137d8:	57 82       	std	Z+7, r5	; 0x07
   137da:	46 82       	std	Z+6, r4	; 0x06
   137dc:	b5 82       	std	Z+5, r11	; 0x05
   137de:	a4 82       	std	Z+4, r10	; 0x04
   137e0:	85 e8       	ldi	r24, 0x85	; 133
   137e2:	9c e1       	ldi	r25, 0x1C	; 28
   137e4:	8a cf       	rjmp	.-236    	; 0x136fa <Read_Config+0x318>
   137e6:	02 31       	cpi	r16, 0x12	; 18
   137e8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   137ea:	f1 f0       	breq	.+60     	; 0x13828 <Read_Config+0x446>
   137ec:	0f 31       	cpi	r16, 0x1F	; 31
   137ee:	11 05       	cpc	r17, r1
   137f0:	79 f0       	breq	.+30     	; 0x13810 <Read_Config+0x42e>
   137f2:	01 30       	cpi	r16, 0x01	; 1
   137f4:	11 05       	cpc	r17, r1
   137f6:	e9 f4       	brne	.+58     	; 0x13832 <Read_Config+0x450>
   137f8:	6f 71       	andi	r22, 0x1F	; 31
   137fa:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   137fc:	8c 9d       	mul	r24, r12
   137fe:	f0 01       	movw	r30, r0
   13800:	8d 9d       	mul	r24, r13
   13802:	f0 0d       	add	r31, r0
   13804:	11 24       	eor	r1, r1
   13806:	e6 51       	subi	r30, 0x16	; 22
   13808:	f1 4e       	sbci	r31, 0xE1	; 225
   1380a:	61 83       	std	Z+1, r22	; 0x01
   1380c:	d3 01       	movw	r26, r6
   1380e:	37 c1       	rjmp	.+622    	; 0x13a7e <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   13810:	67 70       	andi	r22, 0x07	; 7
   13812:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13814:	8c 9d       	mul	r24, r12
   13816:	f0 01       	movw	r30, r0
   13818:	8d 9d       	mul	r24, r13
   1381a:	f0 0d       	add	r31, r0
   1381c:	11 24       	eor	r1, r1
   1381e:	e6 51       	subi	r30, 0x16	; 22
   13820:	f1 4e       	sbci	r31, 0xE1	; 225
   13822:	62 83       	std	Z+2, r22	; 0x02
   13824:	f3 01       	movw	r30, r6
   13826:	2d c1       	rjmp	.+602    	; 0x13a82 <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   13828:	c4 01       	movw	r24, r8
   1382a:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   1382e:	f3 01       	movw	r30, r6
   13830:	33 c1       	rjmp	.+614    	; 0x13a98 <Read_Config+0x6b6>
   13832:	ed b7       	in	r30, 0x3d	; 61
   13834:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13836:	57 82       	std	Z+7, r5	; 0x07
   13838:	46 82       	std	Z+6, r4	; 0x06
   1383a:	b5 82       	std	Z+5, r11	; 0x05
   1383c:	a4 82       	std	Z+4, r10	; 0x04
   1383e:	87 e5       	ldi	r24, 0x57	; 87
   13840:	9c e1       	ldi	r25, 0x1C	; 28
   13842:	5b cf       	rjmp	.-330    	; 0x136fa <Read_Config+0x318>
   13844:	07 31       	cpi	r16, 0x17	; 23
   13846:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13848:	21 f4       	brne	.+8      	; 0x13852 <Read_Config+0x470>
   1384a:	96 2f       	mov	r25, r22
   1384c:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   1384e:	f3 01       	movw	r30, r6
   13850:	3f c1       	rjmp	.+638    	; 0x13ad0 <Read_Config+0x6ee>
   13852:	ed b7       	in	r30, 0x3d	; 61
   13854:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13856:	57 82       	std	Z+7, r5	; 0x07
   13858:	46 82       	std	Z+6, r4	; 0x06
   1385a:	b5 82       	std	Z+5, r11	; 0x05
   1385c:	a4 82       	std	Z+4, r10	; 0x04
   1385e:	89 e2       	ldi	r24, 0x29	; 41
   13860:	9c e1       	ldi	r25, 0x1C	; 28
   13862:	4b cf       	rjmp	.-362    	; 0x136fa <Read_Config+0x318>
   13864:	06 32       	cpi	r16, 0x26	; 38
   13866:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13868:	71 f0       	breq	.+28     	; 0x13886 <Read_Config+0x4a4>
   1386a:	08 32       	cpi	r16, 0x28	; 40
   1386c:	11 05       	cpc	r17, r1
   1386e:	39 f0       	breq	.+14     	; 0x1387e <Read_Config+0x49c>
   13870:	05 32       	cpi	r16, 0x25	; 37
   13872:	11 05       	cpc	r17, r1
   13874:	59 f4       	brne	.+22     	; 0x1388c <Read_Config+0x4aa>
   13876:	96 2f       	mov	r25, r22
   13878:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   1387a:	f3 01       	movw	r30, r6
   1387c:	5c c1       	rjmp	.+696    	; 0x13b36 <Read_Config+0x754>
   1387e:	96 2f       	mov	r25, r22
   13880:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13882:	f3 01       	movw	r30, r6
   13884:	55 c1       	rjmp	.+682    	; 0x13b30 <Read_Config+0x74e>
   13886:	f3 01       	movw	r30, r6
   13888:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   1388a:	4c ce       	rjmp	.-872    	; 0x13524 <Read_Config+0x142>
   1388c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1388e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13890:	57 82       	std	Z+7, r5	; 0x07
   13892:	46 82       	std	Z+6, r4	; 0x06
   13894:	b5 82       	std	Z+5, r11	; 0x05
   13896:	a4 82       	std	Z+4, r10	; 0x04
   13898:	87 ef       	ldi	r24, 0xF7	; 247
   1389a:	9b e1       	ldi	r25, 0x1B	; 27
   1389c:	2e cf       	rjmp	.-420    	; 0x136fa <Read_Config+0x318>
   1389e:	0a 30       	cpi	r16, 0x0A	; 10
   138a0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   138a2:	09 f4       	brne	.+2      	; 0x138a6 <Read_Config+0x4c4>
   138a4:	45 c0       	rjmp	.+138    	; 0x13930 <Read_Config+0x54e>
   138a6:	d4 f4       	brge	.+52     	; 0x138dc <Read_Config+0x4fa>
   138a8:	05 30       	cpi	r16, 0x05	; 5
   138aa:	11 05       	cpc	r17, r1
   138ac:	d1 f1       	breq	.+116    	; 0x13922 <Read_Config+0x540>
   138ae:	64 f4       	brge	.+24     	; 0x138c8 <Read_Config+0x4e6>
   138b0:	01 15       	cp	r16, r1
   138b2:	11 05       	cpc	r17, r1
   138b4:	09 f4       	brne	.+2      	; 0x138b8 <Read_Config+0x4d6>
   138b6:	40 c0       	rjmp	.+128    	; 0x13938 <Read_Config+0x556>
   138b8:	04 30       	cpi	r16, 0x04	; 4
   138ba:	11 05       	cpc	r17, r1
   138bc:	09 f0       	breq	.+2      	; 0x138c0 <Read_Config+0x4de>
   138be:	46 c0       	rjmp	.+140    	; 0x1394c <Read_Config+0x56a>
   138c0:	f3 01       	movw	r30, r6
   138c2:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   138c4:	75 8b       	std	Z+21, r23	; 0x15
   138c6:	2e ce       	rjmp	.-932    	; 0x13524 <Read_Config+0x142>
   138c8:	06 30       	cpi	r16, 0x06	; 6
                        break;
   138ca:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   138cc:	71 f1       	breq	.+92     	; 0x1392a <Read_Config+0x548>
   138ce:	07 30       	cpi	r16, 0x07	; 7
   138d0:	11 05       	cpc	r17, r1
   138d2:	e1 f5       	brne	.+120    	; 0x1394c <Read_Config+0x56a>
   138d4:	f3 01       	movw	r30, r6
   138d6:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   138d8:	71 8b       	std	Z+17, r23	; 0x11
   138da:	24 ce       	rjmp	.-952    	; 0x13524 <Read_Config+0x142>
   138dc:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   138de:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   138e0:	79 f1       	breq	.+94     	; 0x13940 <Read_Config+0x55e>
   138e2:	4c f4       	brge	.+18     	; 0x138f6 <Read_Config+0x514>
   138e4:	0f 30       	cpi	r16, 0x0F	; 15
   138e6:	11 05       	cpc	r17, r1
   138e8:	b1 f0       	breq	.+44     	; 0x13916 <Read_Config+0x534>
   138ea:	03 31       	cpi	r16, 0x13	; 19
   138ec:	11 05       	cpc	r17, r1
   138ee:	71 f5       	brne	.+92     	; 0x1394c <Read_Config+0x56a>
   138f0:	f3 01       	movw	r30, r6
   138f2:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   138f4:	17 ce       	rjmp	.-978    	; 0x13524 <Read_Config+0x142>
   138f6:	01 32       	cpi	r16, 0x21	; 33
                        break;
   138f8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   138fa:	29 f1       	breq	.+74     	; 0x13946 <Read_Config+0x564>
   138fc:	09 32       	cpi	r16, 0x29	; 41
   138fe:	11 05       	cpc	r17, r1
   13900:	39 f0       	breq	.+14     	; 0x13910 <Read_Config+0x52e>
   13902:	0e 31       	cpi	r16, 0x1E	; 30
   13904:	11 05       	cpc	r17, r1
   13906:	11 f5       	brne	.+68     	; 0x1394c <Read_Config+0x56a>
   13908:	f3 01       	movw	r30, r6
   1390a:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   1390c:	71 8f       	std	Z+25, r23	; 0x19
   1390e:	0a ce       	rjmp	.-1004   	; 0x13524 <Read_Config+0x142>
   13910:	f3 01       	movw	r30, r6
                        break;
   13912:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13914:	07 ce       	rjmp	.-1010   	; 0x13524 <Read_Config+0x142>
   13916:	f3 01       	movw	r30, r6
                        break;
   13918:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   1391a:	75 87       	std	Z+13, r23	; 0x0d
   1391c:	86 87       	std	Z+14, r24	; 0x0e
   1391e:	97 87       	std	Z+15, r25	; 0x0f
   13920:	01 ce       	rjmp	.-1022   	; 0x13524 <Read_Config+0x142>
   13922:	61 70       	andi	r22, 0x01	; 1
                        break;
   13924:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13926:	62 8b       	std	Z+18, r22	; 0x12
   13928:	fd cd       	rjmp	.-1030   	; 0x13524 <Read_Config+0x142>
   1392a:	f3 01       	movw	r30, r6
                        break;
   1392c:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   1392e:	fa cd       	rjmp	.-1036   	; 0x13524 <Read_Config+0x142>
   13930:	f3 01       	movw	r30, r6
                        break;
   13932:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13934:	77 8b       	std	Z+23, r23	; 0x17
   13936:	f6 cd       	rjmp	.-1044   	; 0x13524 <Read_Config+0x142>
   13938:	f3 01       	movw	r30, r6
                        break;
   1393a:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   1393c:	73 8f       	std	Z+27, r23	; 0x1b
   1393e:	f2 cd       	rjmp	.-1052   	; 0x13524 <Read_Config+0x142>
   13940:	f3 01       	movw	r30, r6
                        break;
   13942:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13944:	ef cd       	rjmp	.-1058   	; 0x13524 <Read_Config+0x142>
   13946:	f3 01       	movw	r30, r6
                        break;
   13948:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   1394a:	ec cd       	rjmp	.-1064   	; 0x13524 <Read_Config+0x142>
   1394c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1394e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13950:	57 82       	std	Z+7, r5	; 0x07
   13952:	46 82       	std	Z+6, r4	; 0x06
   13954:	b5 82       	std	Z+5, r11	; 0x05
   13956:	a4 82       	std	Z+4, r10	; 0x04
   13958:	8b ec       	ldi	r24, 0xCB	; 203
   1395a:	9b e1       	ldi	r25, 0x1B	; 27
   1395c:	ce ce       	rjmp	.-612    	; 0x136fa <Read_Config+0x318>
   1395e:	0a 31       	cpi	r16, 0x1A	; 26
   13960:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13962:	b9 f0       	breq	.+46     	; 0x13992 <Read_Config+0x5b0>
   13964:	64 f4       	brge	.+24     	; 0x1397e <Read_Config+0x59c>
   13966:	08 31       	cpi	r16, 0x18	; 24
   13968:	11 05       	cpc	r17, r1
   1396a:	e1 f0       	breq	.+56     	; 0x139a4 <Read_Config+0x5c2>
   1396c:	09 31       	cpi	r16, 0x19	; 25
   1396e:	11 05       	cpc	r17, r1
   13970:	e1 f4       	brne	.+56     	; 0x139aa <Read_Config+0x5c8>
   13972:	f3 01       	movw	r30, r6
   13974:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13976:	77 a3       	std	Z+39, r23	; 0x27
   13978:	80 a7       	std	Z+40, r24	; 0x28
   1397a:	91 a7       	std	Z+41, r25	; 0x29
   1397c:	d3 cd       	rjmp	.-1114   	; 0x13524 <Read_Config+0x142>
   1397e:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   13980:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13982:	69 f0       	breq	.+26     	; 0x1399e <Read_Config+0x5bc>
   13984:	0d 31       	cpi	r16, 0x1D	; 29
   13986:	11 05       	cpc	r17, r1
   13988:	81 f4       	brne	.+32     	; 0x139aa <Read_Config+0x5c8>
   1398a:	f3 01       	movw	r30, r6
   1398c:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   1398e:	75 a3       	std	Z+37, r23	; 0x25
   13990:	c9 cd       	rjmp	.-1134   	; 0x13524 <Read_Config+0x142>
   13992:	f3 01       	movw	r30, r6
                        break;
   13994:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13996:	70 a3       	std	Z+32, r23	; 0x20
   13998:	81 a3       	std	Z+33, r24	; 0x21
   1399a:	92 a3       	std	Z+34, r25	; 0x22
   1399c:	c3 cd       	rjmp	.-1146   	; 0x13524 <Read_Config+0x142>
   1399e:	f3 01       	movw	r30, r6
                        break;
   139a0:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   139a2:	c0 cd       	rjmp	.-1152   	; 0x13524 <Read_Config+0x142>
   139a4:	f3 01       	movw	r30, r6
                        break;
   139a6:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   139a8:	bd cd       	rjmp	.-1158   	; 0x13524 <Read_Config+0x142>
   139aa:	ed b7       	in	r30, 0x3d	; 61
                        break;
   139ac:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   139ae:	57 82       	std	Z+7, r5	; 0x07
   139b0:	46 82       	std	Z+6, r4	; 0x06
   139b2:	b5 82       	std	Z+5, r11	; 0x05
   139b4:	a4 82       	std	Z+4, r10	; 0x04
   139b6:	c3 5e       	subi	r28, 0xE3	; 227
   139b8:	de 4f       	sbci	r29, 0xFE	; 254
   139ba:	28 81       	ld	r18, Y
   139bc:	39 81       	ldd	r19, Y+1	; 0x01
   139be:	4a 81       	ldd	r20, Y+2	; 0x02
   139c0:	cd 51       	subi	r28, 0x1D	; 29
   139c2:	d1 40       	sbci	r29, 0x01	; 1
   139c4:	e8 c0       	rjmp	.+464    	; 0x13b96 <Read_Config+0x7b4>
   139c6:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   139c8:	11 05       	cpc	r17, r1
   139ca:	a1 f0       	breq	.+40     	; 0x139f4 <Read_Config+0x612>
   139cc:	05 31       	cpi	r16, 0x15	; 21
   139ce:	11 05       	cpc	r17, r1
   139d0:	51 f0       	breq	.+20     	; 0x139e6 <Read_Config+0x604>
   139d2:	09 30       	cpi	r16, 0x09	; 9
   139d4:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   139d6:	a9 f4       	brne	.+42     	; 0x13a02 <Read_Config+0x620>
   139d8:	8a e0       	ldi	r24, 0x0A	; 10
   139da:	90 e0       	ldi	r25, 0x00	; 0
   139dc:	9d db       	rcall	.-2246   	; 0x13118 <push_state>
                        state = AMIGO_CONFIG;
   139de:	9c e0       	ldi	r25, 0x0C	; 12
   139e0:	29 2e       	mov	r2, r25
   139e2:	31 2c       	mov	r3, r1
                        break;
   139e4:	9f cd       	rjmp	.-1218   	; 0x13524 <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   139e6:	8a e0       	ldi	r24, 0x0A	; 10
   139e8:	90 e0       	ldi	r25, 0x00	; 0
   139ea:	96 db       	rcall	.-2260   	; 0x13118 <push_state>
   139ec:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   139ee:	22 2e       	mov	r2, r18
   139f0:	31 2c       	mov	r3, r1
   139f2:	98 cd       	rjmp	.-1232   	; 0x13524 <Read_Config+0x142>
                        break;
   139f4:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   139f6:	90 e0       	ldi	r25, 0x00	; 0
   139f8:	8f db       	rcall	.-2274   	; 0x13118 <push_state>
   139fa:	8d e0       	ldi	r24, 0x0D	; 13
   139fc:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   139fe:	31 2c       	mov	r3, r1
   13a00:	91 cd       	rjmp	.-1246   	; 0x13524 <Read_Config+0x142>
   13a02:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a04:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13a06:	57 82       	std	Z+7, r5	; 0x07
   13a08:	46 82       	std	Z+6, r4	; 0x06
   13a0a:	b5 82       	std	Z+5, r11	; 0x05
   13a0c:	a4 82       	std	Z+4, r10	; 0x04
   13a0e:	c6 5e       	subi	r28, 0xE6	; 230
   13a10:	de 4f       	sbci	r29, 0xFE	; 254
   13a12:	28 81       	ld	r18, Y
   13a14:	39 81       	ldd	r19, Y+1	; 0x01
   13a16:	4a 81       	ldd	r20, Y+2	; 0x02
   13a18:	ca 51       	subi	r28, 0x1A	; 26
   13a1a:	d1 40       	sbci	r29, 0x01	; 1
   13a1c:	bc c0       	rjmp	.+376    	; 0x13b96 <Read_Config+0x7b4>
   13a1e:	00 31       	cpi	r16, 0x10	; 16
   13a20:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13a22:	09 f4       	brne	.+2      	; 0x13a26 <Read_Config+0x644>
   13a24:	7f cd       	rjmp	.-1282   	; 0x13524 <Read_Config+0x142>
   13a26:	a4 f4       	brge	.+40     	; 0x13a50 <Read_Config+0x66e>
   13a28:	01 30       	cpi	r16, 0x01	; 1
   13a2a:	11 05       	cpc	r17, r1
   13a2c:	c1 f5       	brne	.+112    	; 0x13a9e <Read_Config+0x6bc>
   13a2e:	6f 71       	andi	r22, 0x1F	; 31
   13a30:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13a32:	8c 9d       	mul	r24, r12
   13a34:	f0 01       	movw	r30, r0
   13a36:	8d 9d       	mul	r24, r13
   13a38:	f0 0d       	add	r31, r0
   13a3a:	11 24       	eor	r1, r1
   13a3c:	e6 51       	subi	r30, 0x16	; 22
   13a3e:	f1 4e       	sbci	r31, 0xE1	; 225
   13a40:	61 83       	std	Z+1, r22	; 0x01
   13a42:	c8 5f       	subi	r28, 0xF8	; 248
   13a44:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13a46:	a8 81       	ld	r26, Y
   13a48:	b9 81       	ldd	r27, Y+1	; 0x01
   13a4a:	c8 50       	subi	r28, 0x08	; 8
   13a4c:	d1 40       	sbci	r29, 0x01	; 1
   13a4e:	17 c0       	rjmp	.+46     	; 0x13a7e <Read_Config+0x69c>
   13a50:	02 31       	cpi	r16, 0x12	; 18
   13a52:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13a54:	c1 f0       	breq	.+48     	; 0x13a86 <Read_Config+0x6a4>
   13a56:	0f 31       	cpi	r16, 0x1F	; 31
   13a58:	11 05       	cpc	r17, r1
   13a5a:	09 f5       	brne	.+66     	; 0x13a9e <Read_Config+0x6bc>
   13a5c:	67 70       	andi	r22, 0x07	; 7
   13a5e:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13a60:	8c 9d       	mul	r24, r12
   13a62:	f0 01       	movw	r30, r0
   13a64:	8d 9d       	mul	r24, r13
   13a66:	f0 0d       	add	r31, r0
   13a68:	11 24       	eor	r1, r1
   13a6a:	e6 51       	subi	r30, 0x16	; 22
   13a6c:	f1 4e       	sbci	r31, 0xE1	; 225
   13a6e:	62 83       	std	Z+2, r22	; 0x02
   13a70:	c8 5f       	subi	r28, 0xF8	; 248
   13a72:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13a74:	e8 81       	ld	r30, Y
   13a76:	f9 81       	ldd	r31, Y+1	; 0x01
   13a78:	c8 50       	subi	r28, 0x08	; 8
   13a7a:	d1 40       	sbci	r29, 0x01	; 1
   13a7c:	02 c0       	rjmp	.+4      	; 0x13a82 <Read_Config+0x6a0>
   13a7e:	6c 93       	st	X, r22
   13a80:	51 cd       	rjmp	.-1374   	; 0x13524 <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13a82:	61 83       	std	Z+1, r22	; 0x01
                        break;
   13a84:	4f cd       	rjmp	.-1378   	; 0x13524 <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13a86:	c4 01       	movw	r24, r8
                        break;
   13a88:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13a8c:	c8 5f       	subi	r28, 0xF8	; 248
   13a8e:	de 4f       	sbci	r29, 0xFE	; 254
   13a90:	e8 81       	ld	r30, Y
   13a92:	f9 81       	ldd	r31, Y+1	; 0x01
   13a94:	c8 50       	subi	r28, 0x08	; 8
   13a96:	d1 40       	sbci	r29, 0x01	; 1
   13a98:	93 83       	std	Z+3, r25	; 0x03
   13a9a:	82 83       	std	Z+2, r24	; 0x02
   13a9c:	43 cd       	rjmp	.-1402   	; 0x13524 <Read_Config+0x142>
   13a9e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13aa0:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13aa2:	57 82       	std	Z+7, r5	; 0x07
   13aa4:	46 82       	std	Z+6, r4	; 0x06
   13aa6:	b5 82       	std	Z+5, r11	; 0x05
   13aa8:	a4 82       	std	Z+4, r10	; 0x04
   13aaa:	c9 5e       	subi	r28, 0xE9	; 233
   13aac:	de 4f       	sbci	r29, 0xFE	; 254
   13aae:	28 81       	ld	r18, Y
   13ab0:	39 81       	ldd	r19, Y+1	; 0x01
   13ab2:	4a 81       	ldd	r20, Y+2	; 0x02
   13ab4:	c7 51       	subi	r28, 0x17	; 23
   13ab6:	d1 40       	sbci	r29, 0x01	; 1
   13ab8:	6e c0       	rjmp	.+220    	; 0x13b96 <Read_Config+0x7b4>
   13aba:	07 31       	cpi	r16, 0x17	; 23
   13abc:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13abe:	59 f4       	brne	.+22     	; 0x13ad6 <Read_Config+0x6f4>
   13ac0:	96 2f       	mov	r25, r22
   13ac2:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   13ac4:	c8 5f       	subi	r28, 0xF8	; 248
   13ac6:	de 4f       	sbci	r29, 0xFE	; 254
   13ac8:	e8 81       	ld	r30, Y
   13aca:	f9 81       	ldd	r31, Y+1	; 0x01
   13acc:	c8 50       	subi	r28, 0x08	; 8
   13ace:	d1 40       	sbci	r29, 0x01	; 1
   13ad0:	94 83       	std	Z+4, r25	; 0x04
   13ad2:	85 83       	std	Z+5, r24	; 0x05
   13ad4:	27 cd       	rjmp	.-1458   	; 0x13524 <Read_Config+0x142>
   13ad6:	ed b7       	in	r30, 0x3d	; 61
   13ad8:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13ada:	57 82       	std	Z+7, r5	; 0x07
   13adc:	46 82       	std	Z+6, r4	; 0x06
   13ade:	b5 82       	std	Z+5, r11	; 0x05
   13ae0:	a4 82       	std	Z+4, r10	; 0x04
   13ae2:	cc 5e       	subi	r28, 0xEC	; 236
   13ae4:	de 4f       	sbci	r29, 0xFE	; 254
   13ae6:	28 81       	ld	r18, Y
   13ae8:	39 81       	ldd	r19, Y+1	; 0x01
   13aea:	4a 81       	ldd	r20, Y+2	; 0x02
   13aec:	c4 51       	subi	r28, 0x14	; 20
   13aee:	d1 40       	sbci	r29, 0x01	; 1
   13af0:	52 c0       	rjmp	.+164    	; 0x13b96 <Read_Config+0x7b4>
   13af2:	0d 30       	cpi	r16, 0x0D	; 13
   13af4:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13af6:	59 f1       	breq	.+86     	; 0x13b4e <Read_Config+0x76c>
   13af8:	64 f4       	brge	.+24     	; 0x13b12 <Read_Config+0x730>
   13afa:	08 30       	cpi	r16, 0x08	; 8
   13afc:	11 05       	cpc	r17, r1
   13afe:	81 f5       	brne	.+96     	; 0x13b60 <Read_Config+0x77e>
   13b00:	96 2f       	mov	r25, r22
   13b02:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13b04:	c8 5f       	subi	r28, 0xF8	; 248
   13b06:	de 4f       	sbci	r29, 0xFE	; 254
   13b08:	e8 81       	ld	r30, Y
   13b0a:	f9 81       	ldd	r31, Y+1	; 0x01
   13b0c:	c8 50       	subi	r28, 0x08	; 8
   13b0e:	d1 40       	sbci	r29, 0x01	; 1
   13b10:	0f c0       	rjmp	.+30     	; 0x13b30 <Read_Config+0x74e>
   13b12:	06 31       	cpi	r16, 0x16	; 22
   13b14:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13b16:	91 f0       	breq	.+36     	; 0x13b3c <Read_Config+0x75a>
   13b18:	02 32       	cpi	r16, 0x22	; 34
   13b1a:	11 05       	cpc	r17, r1
   13b1c:	09 f5       	brne	.+66     	; 0x13b60 <Read_Config+0x77e>
   13b1e:	96 2f       	mov	r25, r22
   13b20:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13b22:	c8 5f       	subi	r28, 0xF8	; 248
   13b24:	de 4f       	sbci	r29, 0xFE	; 254
   13b26:	e8 81       	ld	r30, Y
   13b28:	f9 81       	ldd	r31, Y+1	; 0x01
   13b2a:	c8 50       	subi	r28, 0x08	; 8
   13b2c:	d1 40       	sbci	r29, 0x01	; 1
   13b2e:	03 c0       	rjmp	.+6      	; 0x13b36 <Read_Config+0x754>
   13b30:	96 83       	std	Z+6, r25	; 0x06
   13b32:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13b34:	f7 cc       	rjmp	.-1554   	; 0x13524 <Read_Config+0x142>
   13b36:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13b38:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13b3a:	f4 cc       	rjmp	.-1560   	; 0x13524 <Read_Config+0x142>
   13b3c:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13b3e:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13b40:	e8 81       	ld	r30, Y
   13b42:	f9 81       	ldd	r31, Y+1	; 0x01
   13b44:	c8 50       	subi	r28, 0x08	; 8
   13b46:	d1 40       	sbci	r29, 0x01	; 1
   13b48:	62 87       	std	Z+10, r22	; 0x0a
   13b4a:	73 87       	std	Z+11, r23	; 0x0b
   13b4c:	eb cc       	rjmp	.-1578   	; 0x13524 <Read_Config+0x142>
   13b4e:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13b50:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13b52:	e8 81       	ld	r30, Y
   13b54:	f9 81       	ldd	r31, Y+1	; 0x01
   13b56:	c8 50       	subi	r28, 0x08	; 8
   13b58:	d1 40       	sbci	r29, 0x01	; 1
   13b5a:	64 87       	std	Z+12, r22	; 0x0c
   13b5c:	75 87       	std	Z+13, r23	; 0x0d
   13b5e:	e2 cc       	rjmp	.-1596   	; 0x13524 <Read_Config+0x142>
   13b60:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13b62:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13b64:	57 82       	std	Z+7, r5	; 0x07
   13b66:	46 82       	std	Z+6, r4	; 0x06
   13b68:	b5 82       	std	Z+5, r11	; 0x05
   13b6a:	a4 82       	std	Z+4, r10	; 0x04
   13b6c:	cf 5e       	subi	r28, 0xEF	; 239
   13b6e:	de 4f       	sbci	r29, 0xFE	; 254
   13b70:	28 81       	ld	r18, Y
   13b72:	39 81       	ldd	r19, Y+1	; 0x01
   13b74:	4a 81       	ldd	r20, Y+2	; 0x02
   13b76:	c1 51       	subi	r28, 0x11	; 17
   13b78:	d1 40       	sbci	r29, 0x01	; 1
   13b7a:	0d c0       	rjmp	.+26     	; 0x13b96 <Read_Config+0x7b4>
   13b7c:	ed b7       	in	r30, 0x3d	; 61
   13b7e:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13b80:	57 82       	std	Z+7, r5	; 0x07
   13b82:	46 82       	std	Z+6, r4	; 0x06
   13b84:	b5 82       	std	Z+5, r11	; 0x05
   13b86:	a4 82       	std	Z+4, r10	; 0x04
   13b88:	c2 5f       	subi	r28, 0xF2	; 242
   13b8a:	de 4f       	sbci	r29, 0xFE	; 254
   13b8c:	28 81       	ld	r18, Y
   13b8e:	39 81       	ldd	r19, Y+1	; 0x01
   13b90:	4a 81       	ldd	r20, Y+2	; 0x02
   13b92:	ce 50       	subi	r28, 0x0E	; 14
   13b94:	d1 40       	sbci	r29, 0x01	; 1
   13b96:	21 83       	std	Z+1, r18	; 0x01
   13b98:	32 83       	std	Z+2, r19	; 0x02
   13b9a:	43 83       	std	Z+3, r20	; 0x03
   13b9c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   13ba0:	ff ef       	ldi	r31, 0xFF	; 255
   13ba2:	ef 1a       	sub	r14, r31
                ++errors;
   13ba4:	ff 0a       	sbc	r15, r31
   13ba6:	be cc       	rjmp	.-1668   	; 0x13524 <Read_Config+0x142>
   13ba8:	21 14       	cp	r2, r1
                break;
   13baa:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13bac:	79 f0       	breq	.+30     	; 0x13bcc <Read_Config+0x7ea>
   13bae:	ed b7       	in	r30, 0x3d	; 61
   13bb0:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13bb2:	55 82       	std	Z+5, r5	; 0x05
   13bb4:	44 82       	std	Z+4, r4	; 0x04
   13bb6:	8c e9       	ldi	r24, 0x9C	; 156
   13bb8:	9a e1       	ldi	r25, 0x1A	; 26
   13bba:	a0 e0       	ldi	r26, 0x00	; 0
   13bbc:	81 83       	std	Z+1, r24	; 0x01
   13bbe:	92 83       	std	Z+2, r25	; 0x02
   13bc0:	a3 83       	std	Z+3, r26	; 0x03
   13bc2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   13bc6:	ff ef       	ldi	r31, 0xFF	; 255
   13bc8:	ef 1a       	sub	r14, r31
        ++errors;
   13bca:	ff 0a       	sbc	r15, r31
   13bcc:	ed b7       	in	r30, 0x3d	; 61
   13bce:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13bd0:	55 82       	std	Z+5, r5	; 0x05
   13bd2:	44 82       	std	Z+4, r4	; 0x04
   13bd4:	8f e7       	ldi	r24, 0x7F	; 127
   13bd6:	9a e1       	ldi	r25, 0x1A	; 26
   13bd8:	a0 e0       	ldi	r26, 0x00	; 0
   13bda:	81 83       	std	Z+1, r24	; 0x01
   13bdc:	92 83       	std	Z+2, r25	; 0x02
   13bde:	a3 83       	std	Z+3, r26	; 0x03
   13be0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   13be4:	e1 14       	cp	r14, r1
   13be6:	f1 04       	cpc	r15, r1
    if(errors)
   13be8:	61 f0       	breq	.+24     	; 0x13c02 <Read_Config+0x820>
   13bea:	ed b7       	in	r30, 0x3d	; 61
   13bec:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13bee:	f5 82       	std	Z+5, r15	; 0x05
   13bf0:	e4 82       	std	Z+4, r14	; 0x04
   13bf2:	88 e5       	ldi	r24, 0x58	; 88
   13bf4:	9a e1       	ldi	r25, 0x1A	; 26
   13bf6:	a0 e0       	ldi	r26, 0x00	; 0
   13bf8:	81 83       	std	Z+1, r24	; 0x01
   13bfa:	92 83       	std	Z+2, r25	; 0x02
   13bfc:	a3 83       	std	Z+3, r26	; 0x03
   13bfe:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   13c02:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13c04:	de 4f       	sbci	r29, 0xFE	; 254
   13c06:	88 81       	ld	r24, Y
   13c08:	99 81       	ldd	r25, Y+1	; 0x01
   13c0a:	cc 50       	subi	r28, 0x0C	; 12
   13c0c:	d1 40       	sbci	r29, 0x01	; 1
   13c0e:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>
   13c12:	01 96       	adiw	r24, 0x01	; 1
   13c14:	39 f4       	brne	.+14     	; 0x13c24 <Read_Config+0x842>
   13c16:	82 e7       	ldi	r24, 0x72	; 114
    {
        perror("Read_Config - close error");
   13c18:	9e e0       	ldi	r25, 0x0E	; 14
   13c1a:	0e 94 22 77 	call	0xee44	; 0xee44 <perror>
   13c1e:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13c20:	e2 1a       	sub	r14, r18
   13c22:	f2 0a       	sbc	r15, r18
   13c24:	48 db       	rcall	.-2416   	; 0x132b6 <Post_Config>
    }

// Post process device values
    Post_Config();
   13c26:	c7 01       	movw	r24, r14
   13c28:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13c2a:	de 4f       	sbci	r29, 0xFE	; 254
}
   13c2c:	e2 e1       	ldi	r30, 0x12	; 18
   13c2e:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00013c32 <format_drives>:
   13c32:	2f 92       	push	r2
   13c34:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13c36:	4f 92       	push	r4
   13c38:	5f 92       	push	r5
   13c3a:	6f 92       	push	r6
   13c3c:	7f 92       	push	r7
   13c3e:	8f 92       	push	r8
   13c40:	af 92       	push	r10
   13c42:	bf 92       	push	r11
   13c44:	cf 92       	push	r12
   13c46:	df 92       	push	r13
   13c48:	ef 92       	push	r14
   13c4a:	ff 92       	push	r15
   13c4c:	0f 93       	push	r16
   13c4e:	1f 93       	push	r17
   13c50:	cf 93       	push	r28
   13c52:	df 93       	push	r29
   13c54:	cd b7       	in	r28, 0x3d	; 61
   13c56:	de b7       	in	r29, 0x3e	; 62
   13c58:	ce 56       	subi	r28, 0x6E	; 110
   13c5a:	d1 09       	sbc	r29, r1
   13c5c:	0f b6       	in	r0, 0x3f	; 63
   13c5e:	f8 94       	cli
   13c60:	de bf       	out	0x3e, r29	; 62
   13c62:	0f be       	out	0x3f, r0	; 63
   13c64:	cd bf       	out	0x3d, r28	; 61
   13c66:	8a ee       	ldi	r24, 0xEA	; 234
   13c68:	c8 2e       	mov	r12, r24
   13c6a:	8e e1       	ldi	r24, 0x1E	; 30
   13c6c:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13c6e:	a0 96       	adiw	r28, 0x20	; 32
   13c70:	1f ae       	std	Y+63, r1	; 0x3f
   13c72:	1e ae       	std	Y+62, r1	; 0x3e
   13c74:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13c76:	6e 96       	adiw	r28, 0x1e	; 30
   13c78:	1f ae       	std	Y+63, r1	; 0x3f
   13c7a:	1e ae       	std	Y+62, r1	; 0x3e
   13c7c:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13c7e:	6c 96       	adiw	r28, 0x1c	; 28
   13c80:	1f ae       	std	Y+63, r1	; 0x3f
   13c82:	1e ae       	std	Y+62, r1	; 0x3e
   13c84:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13c86:	8c e0       	ldi	r24, 0x0C	; 12
   13c88:	97 e1       	ldi	r25, 0x17	; 23
   13c8a:	9c 01       	movw	r18, r24
   13c8c:	40 e0       	ldi	r20, 0x00	; 0
   13c8e:	a3 96       	adiw	r28, 0x23	; 35
   13c90:	2d af       	std	Y+61, r18	; 0x3d
   13c92:	3e af       	std	Y+62, r19	; 0x3e
   13c94:	4f af       	std	Y+63, r20	; 0x3f
   13c96:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13c98:	84 e0       	ldi	r24, 0x04	; 4
   13c9a:	97 e1       	ldi	r25, 0x17	; 23
   13c9c:	9c 01       	movw	r18, r24
   13c9e:	40 e0       	ldi	r20, 0x00	; 0
   13ca0:	a6 96       	adiw	r28, 0x26	; 38
   13ca2:	2d af       	std	Y+61, r18	; 0x3d
   13ca4:	3e af       	std	Y+62, r19	; 0x3e
   13ca6:	4f af       	std	Y+63, r20	; 0x3f
   13ca8:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13caa:	86 e2       	ldi	r24, 0x26	; 38
   13cac:	97 e1       	ldi	r25, 0x17	; 23
   13cae:	9c 01       	movw	r18, r24
   13cb0:	40 e0       	ldi	r20, 0x00	; 0
   13cb2:	a9 96       	adiw	r28, 0x29	; 41
   13cb4:	2d af       	std	Y+61, r18	; 0x3d
   13cb6:	3e af       	std	Y+62, r19	; 0x3e
   13cb8:	4f af       	std	Y+63, r20	; 0x3f
   13cba:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13cbc:	80 e5       	ldi	r24, 0x50	; 80
   13cbe:	97 e1       	ldi	r25, 0x17	; 23
   13cc0:	9c 01       	movw	r18, r24
   13cc2:	40 e0       	ldi	r20, 0x00	; 0
   13cc4:	ac 96       	adiw	r28, 0x2c	; 44
   13cc6:	2d af       	std	Y+61, r18	; 0x3d
   13cc8:	3e af       	std	Y+62, r19	; 0x3e
   13cca:	4f af       	std	Y+63, r20	; 0x3f
   13ccc:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13cce:	88 e4       	ldi	r24, 0x48	; 72
   13cd0:	97 e1       	ldi	r25, 0x17	; 23
   13cd2:	9c 01       	movw	r18, r24
   13cd4:	40 e0       	ldi	r20, 0x00	; 0
   13cd6:	af 96       	adiw	r28, 0x2f	; 47
   13cd8:	2d af       	std	Y+61, r18	; 0x3d
   13cda:	3e af       	std	Y+62, r19	; 0x3e
   13cdc:	4f af       	std	Y+63, r20	; 0x3f
   13cde:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13ce0:	8a e6       	ldi	r24, 0x6A	; 106
   13ce2:	97 e1       	ldi	r25, 0x17	; 23
   13ce4:	3c 01       	movw	r6, r24
   13ce6:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13ce8:	f6 01       	movw	r30, r12
   13cea:	80 81       	ld	r24, Z
   13cec:	88 23       	and	r24, r24
   13cee:	09 f4       	brne	.+2      	; 0x13cf2 <format_drives+0xc0>
   13cf0:	ef c0       	rjmp	.+478    	; 0x13ed0 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13cf2:	83 30       	cpi	r24, 0x03	; 3
   13cf4:	09 f0       	breq	.+2      	; 0x13cf8 <format_drives+0xc6>
   13cf6:	70 c0       	rjmp	.+224    	; 0x13dd8 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13cf8:	a7 a0       	ldd	r10, Z+39	; 0x27
   13cfa:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13cfc:	be 01       	movw	r22, r28
   13cfe:	66 5f       	subi	r22, 0xF6	; 246
   13d00:	7f 4f       	sbci	r23, 0xFF	; 255
   13d02:	f5 01       	movw	r30, r10
   13d04:	82 81       	ldd	r24, Z+2	; 0x02
   13d06:	93 81       	ldd	r25, Z+3	; 0x03
   13d08:	0e 94 f6 77 	call	0xefec	; 0xefec <stat>
   13d0c:	01 96       	adiw	r24, 0x01	; 1
   13d0e:	09 f0       	breq	.+2      	; 0x13d12 <format_drives+0xe0>
   13d10:	63 c0       	rjmp	.+198    	; 0x13dd8 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13d12:	f5 01       	movw	r30, r10
   13d14:	80 89       	ldd	r24, Z+16	; 0x10
   13d16:	91 89       	ldd	r25, Z+17	; 0x11
   13d18:	81 15       	cp	r24, r1
   13d1a:	91 40       	sbci	r25, 0x01	; 1
   13d1c:	31 f0       	breq	.+12     	; 0x13d2a <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13d1e:	ed b7       	in	r30, 0x3d	; 61
   13d20:	fe b7       	in	r31, 0x3e	; 62
   13d22:	61 82       	std	Z+1, r6	; 0x01
   13d24:	72 82       	std	Z+2, r7	; 0x02
   13d26:	83 82       	std	Z+3, r8	; 0x03
   13d28:	79 c0       	rjmp	.+242    	; 0x13e1c <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13d2a:	f6 01       	movw	r30, r12
   13d2c:	23 80       	ldd	r2, Z+3	; 0x03
   13d2e:	34 80       	ldd	r3, Z+4	; 0x04
   13d30:	45 80       	ldd	r4, Z+5	; 0x05
   13d32:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13d34:	ed b7       	in	r30, 0x3d	; 61
   13d36:	fe b7       	in	r31, 0x3e	; 62
   13d38:	26 82       	std	Z+6, r2	; 0x06
   13d3a:	37 82       	std	Z+7, r3	; 0x07
   13d3c:	40 86       	std	Z+8, r4	; 0x08
   13d3e:	51 86       	std	Z+9, r5	; 0x09
   13d40:	f5 01       	movw	r30, r10
   13d42:	82 81       	ldd	r24, Z+2	; 0x02
   13d44:	93 81       	ldd	r25, Z+3	; 0x03
   13d46:	ed b7       	in	r30, 0x3d	; 61
   13d48:	fe b7       	in	r31, 0x3e	; 62
   13d4a:	95 83       	std	Z+5, r25	; 0x05
   13d4c:	84 83       	std	Z+4, r24	; 0x04
   13d4e:	ac 96       	adiw	r28, 0x2c	; 44
   13d50:	2d ad       	ldd	r18, Y+61	; 0x3d
   13d52:	3e ad       	ldd	r19, Y+62	; 0x3e
   13d54:	4f ad       	ldd	r20, Y+63	; 0x3f
   13d56:	ac 97       	sbiw	r28, 0x2c	; 44
   13d58:	21 83       	std	Z+1, r18	; 0x01
   13d5a:	32 83       	std	Z+2, r19	; 0x02
   13d5c:	43 83       	std	Z+3, r20	; 0x03
   13d5e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13d62:	6e 96       	adiw	r28, 0x1e	; 30
   13d64:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d66:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d68:	6e 97       	sbiw	r28, 0x1e	; 30
   13d6a:	ed b7       	in	r30, 0x3d	; 61
   13d6c:	fe b7       	in	r31, 0x3e	; 62
   13d6e:	37 83       	std	Z+7, r19	; 0x07
   13d70:	26 83       	std	Z+6, r18	; 0x06
   13d72:	af 96       	adiw	r28, 0x2f	; 47
   13d74:	8d ad       	ldd	r24, Y+61	; 0x3d
   13d76:	9e ad       	ldd	r25, Y+62	; 0x3e
   13d78:	af ad       	ldd	r26, Y+63	; 0x3f
   13d7a:	af 97       	sbiw	r28, 0x2f	; 47
   13d7c:	83 83       	std	Z+3, r24	; 0x03
   13d7e:	94 83       	std	Z+4, r25	; 0x04
   13d80:	a5 83       	std	Z+5, r26	; 0x05
   13d82:	2a e3       	ldi	r18, 0x3A	; 58
   13d84:	30 e0       	ldi	r19, 0x00	; 0
   13d86:	2c 0f       	add	r18, r28
   13d88:	3d 1f       	adc	r19, r29
   13d8a:	32 83       	std	Z+2, r19	; 0x02
   13d8c:	21 83       	std	Z+1, r18	; 0x01
   13d8e:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13d92:	f5 01       	movw	r30, r10
   13d94:	a2 80       	ldd	r10, Z+2	; 0x02
   13d96:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13d98:	c2 01       	movw	r24, r4
   13d9a:	b1 01       	movw	r22, r2
   13d9c:	d3 d1       	rcall	.+934    	; 0x14144 <lif_dir_count>
   13d9e:	9b 01       	movw	r18, r22
   13da0:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13da2:	82 01       	movw	r16, r4
   13da4:	71 01       	movw	r14, r2
   13da6:	be 01       	movw	r22, r28
   13da8:	66 5c       	subi	r22, 0xC6	; 198
   13daa:	7f 4f       	sbci	r23, 0xFF	; 255
   13dac:	c5 01       	movw	r24, r10
   13dae:	0e 94 14 db 	call	0x1b628	; 0x1b628 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13db2:	6c 96       	adiw	r28, 0x1c	; 28
   13db4:	2e ad       	ldd	r18, Y+62	; 0x3e
   13db6:	3f ad       	ldd	r19, Y+63	; 0x3f
   13db8:	6c 97       	sbiw	r28, 0x1c	; 28
   13dba:	2f 5f       	subi	r18, 0xFF	; 255
   13dbc:	3f 4f       	sbci	r19, 0xFF	; 255
   13dbe:	6c 96       	adiw	r28, 0x1c	; 28
   13dc0:	3f af       	std	Y+63, r19	; 0x3f
   13dc2:	2e af       	std	Y+62, r18	; 0x3e
   13dc4:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13dc6:	6e 96       	adiw	r28, 0x1e	; 30
   13dc8:	8e ad       	ldd	r24, Y+62	; 0x3e
   13dca:	9f ad       	ldd	r25, Y+63	; 0x3f
   13dcc:	6e 97       	sbiw	r28, 0x1e	; 30
   13dce:	01 96       	adiw	r24, 0x01	; 1
   13dd0:	6e 96       	adiw	r28, 0x1e	; 30
   13dd2:	9f af       	std	Y+63, r25	; 0x3f
   13dd4:	8e af       	std	Y+62, r24	; 0x3e
   13dd6:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13dd8:	f6 01       	movw	r30, r12
   13dda:	80 81       	ld	r24, Z
   13ddc:	81 30       	cpi	r24, 0x01	; 1
   13dde:	09 f0       	breq	.+2      	; 0x13de2 <format_drives+0x1b0>
   13de0:	77 c0       	rjmp	.+238    	; 0x13ed0 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13de2:	a7 a0       	ldd	r10, Z+39	; 0x27
   13de4:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13de6:	be 01       	movw	r22, r28
   13de8:	66 5f       	subi	r22, 0xF6	; 246
   13dea:	7f 4f       	sbci	r23, 0xFF	; 255
   13dec:	f5 01       	movw	r30, r10
   13dee:	82 81       	ldd	r24, Z+2	; 0x02
   13df0:	93 81       	ldd	r25, Z+3	; 0x03
   13df2:	0e 94 f6 77 	call	0xefec	; 0xefec <stat>
   13df6:	01 96       	adiw	r24, 0x01	; 1
   13df8:	09 f0       	breq	.+2      	; 0x13dfc <format_drives+0x1ca>
   13dfa:	6a c0       	rjmp	.+212    	; 0x13ed0 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13dfc:	f5 01       	movw	r30, r10
   13dfe:	86 81       	ldd	r24, Z+6	; 0x06
   13e00:	97 81       	ldd	r25, Z+7	; 0x07
   13e02:	81 15       	cp	r24, r1
   13e04:	91 40       	sbci	r25, 0x01	; 1
   13e06:	69 f0       	breq	.+26     	; 0x13e22 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13e08:	a9 96       	adiw	r28, 0x29	; 41
   13e0a:	2d ad       	ldd	r18, Y+61	; 0x3d
   13e0c:	3e ad       	ldd	r19, Y+62	; 0x3e
   13e0e:	4f ad       	ldd	r20, Y+63	; 0x3f
   13e10:	a9 97       	sbiw	r28, 0x29	; 41
   13e12:	ed b7       	in	r30, 0x3d	; 61
   13e14:	fe b7       	in	r31, 0x3e	; 62
   13e16:	21 83       	std	Z+1, r18	; 0x01
   13e18:	32 83       	std	Z+2, r19	; 0x02
   13e1a:	43 83       	std	Z+3, r20	; 0x03
   13e1c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                    continue;
   13e20:	57 c0       	rjmp	.+174    	; 0x13ed0 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13e22:	f6 01       	movw	r30, r12
   13e24:	23 80       	ldd	r2, Z+3	; 0x03
   13e26:	34 80       	ldd	r3, Z+4	; 0x04
   13e28:	45 80       	ldd	r4, Z+5	; 0x05
   13e2a:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13e2c:	ed b7       	in	r30, 0x3d	; 61
   13e2e:	fe b7       	in	r31, 0x3e	; 62
   13e30:	26 82       	std	Z+6, r2	; 0x06
   13e32:	37 82       	std	Z+7, r3	; 0x07
   13e34:	40 86       	std	Z+8, r4	; 0x08
   13e36:	51 86       	std	Z+9, r5	; 0x09
   13e38:	f5 01       	movw	r30, r10
   13e3a:	82 81       	ldd	r24, Z+2	; 0x02
   13e3c:	93 81       	ldd	r25, Z+3	; 0x03
   13e3e:	ed b7       	in	r30, 0x3d	; 61
   13e40:	fe b7       	in	r31, 0x3e	; 62
   13e42:	95 83       	std	Z+5, r25	; 0x05
   13e44:	84 83       	std	Z+4, r24	; 0x04
   13e46:	a3 96       	adiw	r28, 0x23	; 35
   13e48:	2d ad       	ldd	r18, Y+61	; 0x3d
   13e4a:	3e ad       	ldd	r19, Y+62	; 0x3e
   13e4c:	4f ad       	ldd	r20, Y+63	; 0x3f
   13e4e:	a3 97       	sbiw	r28, 0x23	; 35
   13e50:	21 83       	std	Z+1, r18	; 0x01
   13e52:	32 83       	std	Z+2, r19	; 0x02
   13e54:	43 83       	std	Z+3, r20	; 0x03
   13e56:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13e5a:	a0 96       	adiw	r28, 0x20	; 32
   13e5c:	2e ad       	ldd	r18, Y+62	; 0x3e
   13e5e:	3f ad       	ldd	r19, Y+63	; 0x3f
   13e60:	a0 97       	sbiw	r28, 0x20	; 32
   13e62:	ed b7       	in	r30, 0x3d	; 61
   13e64:	fe b7       	in	r31, 0x3e	; 62
   13e66:	37 83       	std	Z+7, r19	; 0x07
   13e68:	26 83       	std	Z+6, r18	; 0x06
   13e6a:	a6 96       	adiw	r28, 0x26	; 38
   13e6c:	8d ad       	ldd	r24, Y+61	; 0x3d
   13e6e:	9e ad       	ldd	r25, Y+62	; 0x3e
   13e70:	af ad       	ldd	r26, Y+63	; 0x3f
   13e72:	a6 97       	sbiw	r28, 0x26	; 38
   13e74:	83 83       	std	Z+3, r24	; 0x03
   13e76:	94 83       	std	Z+4, r25	; 0x04
   13e78:	a5 83       	std	Z+5, r26	; 0x05
   13e7a:	2a e3       	ldi	r18, 0x3A	; 58
   13e7c:	30 e0       	ldi	r19, 0x00	; 0
   13e7e:	2c 0f       	add	r18, r28
   13e80:	3d 1f       	adc	r19, r29
   13e82:	32 83       	std	Z+2, r19	; 0x02
   13e84:	21 83       	std	Z+1, r18	; 0x01
   13e86:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13e8a:	f5 01       	movw	r30, r10
   13e8c:	a2 80       	ldd	r10, Z+2	; 0x02
   13e8e:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13e90:	c2 01       	movw	r24, r4
   13e92:	b1 01       	movw	r22, r2
   13e94:	57 d1       	rcall	.+686    	; 0x14144 <lif_dir_count>
   13e96:	9b 01       	movw	r18, r22
   13e98:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13e9a:	82 01       	movw	r16, r4
   13e9c:	71 01       	movw	r14, r2
   13e9e:	be 01       	movw	r22, r28
   13ea0:	66 5c       	subi	r22, 0xC6	; 198
   13ea2:	7f 4f       	sbci	r23, 0xFF	; 255
   13ea4:	c5 01       	movw	r24, r10
   13ea6:	0e 94 14 db 	call	0x1b628	; 0x1b628 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13eaa:	6c 96       	adiw	r28, 0x1c	; 28
   13eac:	2e ad       	ldd	r18, Y+62	; 0x3e
   13eae:	3f ad       	ldd	r19, Y+63	; 0x3f
   13eb0:	6c 97       	sbiw	r28, 0x1c	; 28
   13eb2:	2f 5f       	subi	r18, 0xFF	; 255
   13eb4:	3f 4f       	sbci	r19, 0xFF	; 255
   13eb6:	6c 96       	adiw	r28, 0x1c	; 28
   13eb8:	3f af       	std	Y+63, r19	; 0x3f
   13eba:	2e af       	std	Y+62, r18	; 0x3e
   13ebc:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13ebe:	a0 96       	adiw	r28, 0x20	; 32
   13ec0:	8e ad       	ldd	r24, Y+62	; 0x3e
   13ec2:	9f ad       	ldd	r25, Y+63	; 0x3f
   13ec4:	a0 97       	sbiw	r28, 0x20	; 32
   13ec6:	01 96       	adiw	r24, 0x01	; 1
   13ec8:	a0 96       	adiw	r28, 0x20	; 32
   13eca:	9f af       	std	Y+63, r25	; 0x3f
   13ecc:	8e af       	std	Y+62, r24	; 0x3e
   13ece:	a0 97       	sbiw	r28, 0x20	; 32
   13ed0:	9b e2       	ldi	r25, 0x2B	; 43
   13ed2:	c9 0e       	add	r12, r25
   13ed4:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13ed6:	ae ee       	ldi	r26, 0xEE	; 238
   13ed8:	ca 16       	cp	r12, r26
   13eda:	a0 e2       	ldi	r26, 0x20	; 32
   13edc:	da 06       	cpc	r13, r26
   13ede:	09 f0       	breq	.+2      	; 0x13ee2 <format_drives+0x2b0>
   13ee0:	03 cf       	rjmp	.-506    	; 0x13ce8 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13ee2:	6c 96       	adiw	r28, 0x1c	; 28
   13ee4:	ee ad       	ldd	r30, Y+62	; 0x3e
   13ee6:	ff ad       	ldd	r31, Y+63	; 0x3f
   13ee8:	6c 97       	sbiw	r28, 0x1c	; 28
   13eea:	ef 2b       	or	r30, r31
   13eec:	11 f0       	breq	.+4      	; 0x13ef2 <format_drives+0x2c0>
        sep();
   13eee:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>
}
   13ef2:	c2 59       	subi	r28, 0x92	; 146
   13ef4:	df 4f       	sbci	r29, 0xFF	; 255
   13ef6:	0f b6       	in	r0, 0x3f	; 63
   13ef8:	f8 94       	cli
   13efa:	de bf       	out	0x3e, r29	; 62
   13efc:	0f be       	out	0x3f, r0	; 63
   13efe:	cd bf       	out	0x3d, r28	; 61
   13f00:	df 91       	pop	r29
   13f02:	cf 91       	pop	r28
   13f04:	1f 91       	pop	r17
   13f06:	0f 91       	pop	r16
   13f08:	ff 90       	pop	r15
   13f0a:	ef 90       	pop	r14
   13f0c:	df 90       	pop	r13
   13f0e:	cf 90       	pop	r12
   13f10:	bf 90       	pop	r11
   13f12:	af 90       	pop	r10
   13f14:	8f 90       	pop	r8
   13f16:	7f 90       	pop	r7
   13f18:	6f 90       	pop	r6
   13f1a:	5f 90       	pop	r5
   13f1c:	4f 90       	pop	r4
   13f1e:	3f 90       	pop	r3
   13f20:	2f 90       	pop	r2
   13f22:	08 95       	ret

00013f24 <display_mount>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_mount( )
{
   13f24:	2f 92       	push	r2
   13f26:	3f 92       	push	r3
   13f28:	4f 92       	push	r4
   13f2a:	6f 92       	push	r6
   13f2c:	7f 92       	push	r7
   13f2e:	8f 92       	push	r8
   13f30:	cf 92       	push	r12
   13f32:	df 92       	push	r13
   13f34:	ef 92       	push	r14
   13f36:	0f 93       	push	r16
   13f38:	1f 93       	push	r17
   13f3a:	cf 93       	push	r28
   13f3c:	df 93       	push	r29
   13f3e:	ad b7       	in	r26, 0x3d	; 61
   13f40:	be b7       	in	r27, 0x3e	; 62
   13f42:	19 97       	sbiw	r26, 0x09	; 9
   13f44:	0f b6       	in	r0, 0x3f	; 63
   13f46:	f8 94       	cli
   13f48:	be bf       	out	0x3e, r27	; 62
   13f4a:	0f be       	out	0x3f, r0	; 63
   13f4c:	ad bf       	out	0x3d, r26	; 61
   13f4e:	ca ee       	ldi	r28, 0xEA	; 234
   13f50:	de e1       	ldi	r29, 0x1E	; 30
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13f52:	0c e8       	ldi	r16, 0x8C	; 140
   13f54:	1e e0       	ldi	r17, 0x0E	; 14
   13f56:	8b ec       	ldi	r24, 0xCB	; 203
   13f58:	96 e1       	ldi	r25, 0x16	; 22
   13f5a:	6c 01       	movw	r12, r24
   13f5c:	e1 2c       	mov	r14, r1

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13f5e:	8c ed       	ldi	r24, 0xDC	; 220
   13f60:	96 e1       	ldi	r25, 0x16	; 22
   13f62:	3c 01       	movw	r6, r24
   13f64:	81 2c       	mov	r8, r1

        if(Devices[i].TYPE == SS80_TYPE)
        {
            SS80p= (SS80DiskType *)Devices[i].dev;

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13f66:	80 ef       	ldi	r24, 0xF0	; 240
   13f68:	96 e1       	ldi	r25, 0x16	; 22
   13f6a:	1c 01       	movw	r2, r24
   13f6c:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13f6e:	88 81       	ld	r24, Y
   13f70:	88 23       	and	r24, r24
   13f72:	09 f4       	brne	.+2      	; 0x13f76 <display_mount+0x52>
   13f74:	43 c0       	rjmp	.+134    	; 0x13ffc <display_mount+0xd8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13f76:	83 30       	cpi	r24, 0x03	; 3
   13f78:	b1 f4       	brne	.+44     	; 0x13fa6 <display_mount+0x82>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13f7a:	af a1       	ldd	r26, Y+39	; 0x27
   13f7c:	b8 a5       	ldd	r27, Y+40	; 0x28

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13f7e:	fd 01       	movw	r30, r26
   13f80:	82 81       	ldd	r24, Z+2	; 0x02
   13f82:	93 81       	ldd	r25, Z+3	; 0x03
   13f84:	ed b7       	in	r30, 0x3d	; 61
   13f86:	fe b7       	in	r31, 0x3e	; 62
   13f88:	91 87       	std	Z+9, r25	; 0x09
   13f8a:	80 87       	std	Z+8, r24	; 0x08
   13f8c:	8c 91       	ld	r24, X
   13f8e:	90 e0       	ldi	r25, 0x00	; 0
   13f90:	97 83       	std	Z+7, r25	; 0x07
   13f92:	86 83       	std	Z+6, r24	; 0x06
   13f94:	ce 01       	movw	r24, r28
   13f96:	07 96       	adiw	r24, 0x07	; 7
   13f98:	95 83       	std	Z+5, r25	; 0x05
   13f9a:	84 83       	std	Z+4, r24	; 0x04
   13f9c:	21 82       	std	Z+1, r2	; 0x01
   13f9e:	32 82       	std	Z+2, r3	; 0x02
   13fa0:	43 82       	std	Z+3, r4	; 0x03
   13fa2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
		}

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13fa6:	88 81       	ld	r24, Y
   13fa8:	81 30       	cpi	r24, 0x01	; 1
   13faa:	b1 f4       	brne	.+44     	; 0x13fd8 <display_mount+0xb4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13fac:	af a1       	ldd	r26, Y+39	; 0x27
   13fae:	b8 a5       	ldd	r27, Y+40	; 0x28
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13fb0:	fd 01       	movw	r30, r26
   13fb2:	82 81       	ldd	r24, Z+2	; 0x02
   13fb4:	93 81       	ldd	r25, Z+3	; 0x03
   13fb6:	ed b7       	in	r30, 0x3d	; 61
   13fb8:	fe b7       	in	r31, 0x3e	; 62
   13fba:	91 87       	std	Z+9, r25	; 0x09
   13fbc:	80 87       	std	Z+8, r24	; 0x08
   13fbe:	8c 91       	ld	r24, X
   13fc0:	90 e0       	ldi	r25, 0x00	; 0
   13fc2:	97 83       	std	Z+7, r25	; 0x07
   13fc4:	86 83       	std	Z+6, r24	; 0x06
   13fc6:	ce 01       	movw	r24, r28
   13fc8:	07 96       	adiw	r24, 0x07	; 7
   13fca:	95 83       	std	Z+5, r25	; 0x05
   13fcc:	84 83       	std	Z+4, r24	; 0x04
   13fce:	61 82       	std	Z+1, r6	; 0x01
   13fd0:	72 82       	std	Z+2, r7	; 0x02
   13fd2:	83 82       	std	Z+3, r8	; 0x03
   13fd4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        }
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   13fd8:	88 81       	ld	r24, Y
   13fda:	84 30       	cpi	r24, 0x04	; 4
   13fdc:	79 f4       	brne	.+30     	; 0x13ffc <display_mount+0xd8>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13fde:	ef a1       	ldd	r30, Y+39	; 0x27
   13fe0:	f8 a5       	ldd	r31, Y+40	; 0x28
   13fe2:	80 81       	ld	r24, Z
   13fe4:	90 e0       	ldi	r25, 0x00	; 0
   13fe6:	ed b7       	in	r30, 0x3d	; 61
   13fe8:	fe b7       	in	r31, 0x3e	; 62
   13fea:	97 83       	std	Z+7, r25	; 0x07
   13fec:	86 83       	std	Z+6, r24	; 0x06
   13fee:	15 83       	std	Z+5, r17	; 0x05
   13ff0:	04 83       	std	Z+4, r16	; 0x04
   13ff2:	c1 82       	std	Z+1, r12	; 0x01
   13ff4:	d2 82       	std	Z+2, r13	; 0x02
   13ff6:	e3 82       	std	Z+3, r14	; 0x03
   13ff8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   13ffc:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13ffe:	f0 e2       	ldi	r31, 0x20	; 32
   14000:	ce 3e       	cpi	r28, 0xEE	; 238
   14002:	df 07       	cpc	r29, r31
   14004:	09 f0       	breq	.+2      	; 0x14008 <display_mount+0xe4>
   14006:	b3 cf       	rjmp	.-154    	; 0x13f6e <display_mount+0x4a>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
		}
    }
    printf("\n");
   14008:	89 ec       	ldi	r24, 0xC9	; 201
   1400a:	96 e1       	ldi	r25, 0x16	; 22
   1400c:	a0 e0       	ldi	r26, 0x00	; 0
   1400e:	ed b7       	in	r30, 0x3d	; 61
   14010:	fe b7       	in	r31, 0x3e	; 62
   14012:	81 83       	std	Z+1, r24	; 0x01
   14014:	92 83       	std	Z+2, r25	; 0x02
   14016:	a3 83       	std	Z+3, r26	; 0x03
   14018:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
}
   1401c:	ad b7       	in	r26, 0x3d	; 61
   1401e:	be b7       	in	r27, 0x3e	; 62
   14020:	19 96       	adiw	r26, 0x09	; 9
   14022:	0f b6       	in	r0, 0x3f	; 63
   14024:	f8 94       	cli
   14026:	be bf       	out	0x3e, r27	; 62
   14028:	0f be       	out	0x3f, r0	; 63
   1402a:	ad bf       	out	0x3d, r26	; 61
   1402c:	df 91       	pop	r29
   1402e:	cf 91       	pop	r28
   14030:	1f 91       	pop	r17
   14032:	0f 91       	pop	r16
   14034:	ef 90       	pop	r14
   14036:	df 90       	pop	r13
   14038:	cf 90       	pop	r12
   1403a:	8f 90       	pop	r8
   1403c:	7f 90       	pop	r7
   1403e:	6f 90       	pop	r6
   14040:	4f 90       	pop	r4
   14042:	3f 90       	pop	r3
   14044:	2f 90       	pop	r2
   14046:	08 95       	ret

00014048 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   14048:	8f e1       	ldi	r24, 0x1F	; 31
   1404a:	ee ee       	ldi	r30, 0xEE	; 238
   1404c:	f0 e2       	ldi	r31, 0x20	; 32
   1404e:	df 01       	movw	r26, r30
   14050:	98 2f       	mov	r25, r24
   14052:	1d 92       	st	X+, r1
   14054:	9a 95       	dec	r25
   14056:	e9 f7       	brne	.-6      	; 0x14052 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   14058:	9f e3       	ldi	r25, 0x3F	; 63
   1405a:	ee e0       	ldi	r30, 0x0E	; 14
   1405c:	f1 e2       	ldi	r31, 0x21	; 33
   1405e:	df 01       	movw	r26, r30
   14060:	1d 92       	st	X+, r1
   14062:	9a 95       	dec	r25
   14064:	e9 f7       	brne	.-6      	; 0x14060 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   14066:	ee e4       	ldi	r30, 0x4E	; 78
   14068:	f1 e2       	ldi	r31, 0x21	; 33
   1406a:	df 01       	movw	r26, r30
   1406c:	1d 92       	st	X+, r1
   1406e:	8a 95       	dec	r24
   14070:	e9 f7       	brne	.-6      	; 0x1406c <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   14072:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <hpdir+0x80>
   14076:	10 92 6f 21 	sts	0x216F, r1	; 0x80216f <hpdir+0x81>
   1407a:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <hpdir+0x82>
   1407e:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   14082:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <hpdir+0x84>
   14086:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <hpdir+0x85>
   1408a:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <hpdir+0x86>
   1408e:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14092:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <hpdir+0x88>
   14096:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <hpdir+0x89>
   1409a:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <hpdir+0x8a>
   1409e:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   140a2:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <hpdir+0x8c>
   140a6:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <hpdir+0x8d>
   140aa:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <hpdir+0x8e>
   140ae:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   140b2:	81 e0       	ldi	r24, 0x01	; 1
   140b4:	90 e8       	ldi	r25, 0x80	; 128
   140b6:	a0 e0       	ldi	r26, 0x00	; 0
   140b8:	b0 e0       	ldi	r27, 0x00	; 0
   140ba:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <hpdir+0x90>
   140be:	90 93 7f 21 	sts	0x217F, r25	; 0x80217f <hpdir+0x91>
   140c2:	a0 93 80 21 	sts	0x2180, r26	; 0x802180 <hpdir+0x92>
   140c6:	b0 93 81 21 	sts	0x2181, r27	; 0x802181 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   140ca:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <hpdir+0x94>
   140ce:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <hpdir+0x95>
   140d2:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x96>
   140d6:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   140da:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x98>
   140de:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x99>
   140e2:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x9a>
   140e6:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   140ea:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x9c>
   140ee:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x9d>
   140f2:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x9e>
   140f6:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   140fa:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0xa0>
   140fe:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0xa1>
   14102:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0xa2>
   14106:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1410a:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0xa4>
   1410e:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0xa5>
   14112:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0xa6>
   14116:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   1411a:	81 e0       	ldi	r24, 0x01	; 1
   1411c:	90 e0       	ldi	r25, 0x00	; 0
   1411e:	a0 e0       	ldi	r26, 0x00	; 0
   14120:	b0 e0       	ldi	r27, 0x00	; 0
   14122:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0xa8>
   14126:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0xa9>
   1412a:	a0 93 98 21 	sts	0x2198, r26	; 0x802198 <hpdir+0xaa>
   1412e:	b0 93 99 21 	sts	0x2199, r27	; 0x802199 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14132:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0xac>
   14136:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0xad>
   1413a:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0xae>
   1413e:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0xaf>
   14142:	08 95       	ret

00014144 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   14144:	20 e0       	ldi	r18, 0x00	; 0
   14146:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14148:	61 15       	cp	r22, r1
   1414a:	71 05       	cpc	r23, r1
   1414c:	81 05       	cpc	r24, r1
   1414e:	91 05       	cpc	r25, r1
   14150:	39 f0       	breq	.+14     	; 0x14160 <lif_dir_count+0x1c>
    {
        scale++;
   14152:	2f 5f       	subi	r18, 0xFF	; 255
   14154:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   14156:	95 95       	asr	r25
   14158:	87 95       	ror	r24
   1415a:	77 95       	ror	r23
   1415c:	67 95       	ror	r22
   1415e:	f4 cf       	rjmp	.-24     	; 0x14148 <lif_dir_count+0x4>
    }
    scale>>=1;
   14160:	35 95       	asr	r19
   14162:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   14164:	61 e0       	ldi	r22, 0x01	; 1
   14166:	70 e0       	ldi	r23, 0x00	; 0
   14168:	80 e0       	ldi	r24, 0x00	; 0
   1416a:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   1416c:	21 50       	subi	r18, 0x01	; 1
   1416e:	31 09       	sbc	r19, r1
   14170:	28 f0       	brcs	.+10     	; 0x1417c <lif_dir_count+0x38>
        num <<=1;
   14172:	66 0f       	add	r22, r22
   14174:	77 1f       	adc	r23, r23
   14176:	88 1f       	adc	r24, r24
   14178:	99 1f       	adc	r25, r25
   1417a:	f8 cf       	rjmp	.-16     	; 0x1416c <lif_dir_count+0x28>
    return(num);
}
   1417c:	08 95       	ret

0001417e <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   1417e:	2f 92       	push	r2
   14180:	3f 92       	push	r3
   14182:	4f 92       	push	r4
   14184:	5f 92       	push	r5
   14186:	6f 92       	push	r6
   14188:	8f 92       	push	r8
   1418a:	9f 92       	push	r9
   1418c:	af 92       	push	r10
   1418e:	bf 92       	push	r11
   14190:	cf 92       	push	r12
   14192:	df 92       	push	r13
   14194:	ef 92       	push	r14
   14196:	ff 92       	push	r15
   14198:	0f 93       	push	r16
   1419a:	1f 93       	push	r17
   1419c:	cf 93       	push	r28
   1419e:	df 93       	push	r29
   141a0:	cd b7       	in	r28, 0x3d	; 61
   141a2:	de b7       	in	r29, 0x3e	; 62
   141a4:	c9 58       	subi	r28, 0x89	; 137
   141a6:	d1 40       	sbci	r29, 0x01	; 1
   141a8:	0f b6       	in	r0, 0x3f	; 63
   141aa:	f8 94       	cli
   141ac:	de bf       	out	0x3e, r29	; 62
   141ae:	0f be       	out	0x3f, r0	; 63
   141b0:	cd bf       	out	0x3d, r28	; 61
   141b2:	6c 01       	movw	r12, r24
   141b4:	c8 57       	subi	r28, 0x78	; 120
   141b6:	de 4f       	sbci	r29, 0xFE	; 254
   141b8:	79 83       	std	Y+1, r23	; 0x01
   141ba:	68 83       	st	Y, r22
   141bc:	c8 58       	subi	r28, 0x88	; 136
   141be:	d1 40       	sbci	r29, 0x01	; 1
   141c0:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   141c2:	42 df       	rcall	.-380    	; 0x14048 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   141c4:	6e ef       	ldi	r22, 0xFE	; 254
   141c6:	78 e0       	ldi	r23, 0x08	; 8
   141c8:	83 e6       	ldi	r24, 0x63	; 99
   141ca:	90 e1       	ldi	r25, 0x10	; 16
   141cc:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fopen>
   141d0:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   141d2:	89 2b       	or	r24, r25
   141d4:	49 f4       	brne	.+18     	; 0x141e8 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   141d6:	6e ef       	ldi	r22, 0xFE	; 254
   141d8:	78 e0       	ldi	r23, 0x08	; 8
   141da:	82 e6       	ldi	r24, 0x62	; 98
   141dc:	90 e1       	ldi	r25, 0x10	; 16
   141de:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fopen>
   141e2:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   141e4:	89 2b       	or	r24, r25
   141e6:	51 f0       	breq	.+20     	; 0x141fc <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   141e8:	21 2c       	mov	r2, r1
   141ea:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   141ec:	8e 01       	movw	r16, r28
   141ee:	08 5f       	subi	r16, 0xF8	; 248
   141f0:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   141f2:	82 eb       	ldi	r24, 0xB2	; 178
   141f4:	9d e1       	ldi	r25, 0x1D	; 29
   141f6:	2c 01       	movw	r4, r24
   141f8:	61 2c       	mov	r6, r1
   141fa:	1e c0       	rjmp	.+60     	; 0x14238 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   141fc:	ab 28       	or	r10, r11
   141fe:	09 f4       	brne	.+2      	; 0x14202 <hpdir_find_drive+0x84>
   14200:	69 c1       	rjmp	.+722    	; 0x144d4 <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   14202:	89 eb       	ldi	r24, 0xB9	; 185
   14204:	9d e1       	ldi	r25, 0x1D	; 29
   14206:	a0 e0       	ldi	r26, 0x00	; 0
   14208:	ed b7       	in	r30, 0x3d	; 61
   1420a:	fe b7       	in	r31, 0x3e	; 62
   1420c:	81 83       	std	Z+1, r24	; 0x01
   1420e:	92 83       	std	Z+2, r25	; 0x02
   14210:	a3 83       	std	Z+3, r26	; 0x03
   14212:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14216:	5e c1       	rjmp	.+700    	; 0x144d4 <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14218:	ce 01       	movw	r24, r28
   1421a:	08 96       	adiw	r24, 0x08	; 8
   1421c:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <trim_tail>
        ptr = skipspaces(ptr);
   14220:	ce 01       	movw	r24, r28
   14222:	08 96       	adiw	r24, 0x08	; 8
   14224:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <skipspaces>

        len = strlen(ptr);
   14228:	fc 01       	movw	r30, r24
   1422a:	01 90       	ld	r0, Z+
   1422c:	00 20       	and	r0, r0
   1422e:	e9 f7       	brne	.-6      	; 0x1422a <hpdir_find_drive+0xac>
   14230:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   14232:	8e 17       	cp	r24, r30
   14234:	9f 07       	cpc	r25, r31
   14236:	51 f4       	brne	.+20     	; 0x1424c <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14238:	a7 01       	movw	r20, r14
   1423a:	6e ef       	ldi	r22, 0xFE	; 254
   1423c:	70 e0       	ldi	r23, 0x00	; 0
   1423e:	ce 01       	movw	r24, r28
   14240:	08 96       	adiw	r24, 0x08	; 8
   14242:	0e 94 09 75 	call	0xea12	; 0xea12 <fgets>
   14246:	89 2b       	or	r24, r25
   14248:	39 f7       	brne	.-50     	; 0x14218 <hpdir_find_drive+0x9a>
   1424a:	0c c0       	rjmp	.+24     	; 0x14264 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   1424c:	fc 01       	movw	r30, r24
   1424e:	20 81       	ld	r18, Z
   14250:	2b 33       	cpi	r18, 0x3B	; 59
   14252:	91 f3       	breq	.-28     	; 0x14238 <hpdir_find_drive+0xba>
   14254:	23 32       	cpi	r18, 0x23	; 35
   14256:	81 f3       	breq	.-32     	; 0x14238 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   14258:	2b 35       	cpi	r18, 0x5B	; 91
   1425a:	31 f4       	brne	.+12     	; 0x14268 <hpdir_find_drive+0xea>
   1425c:	f1 e0       	ldi	r31, 0x01	; 1
   1425e:	2f 16       	cp	r2, r31
   14260:	31 04       	cpc	r3, r1
   14262:	11 f4       	brne	.+4      	; 0x14268 <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14264:	00 e0       	ldi	r16, 0x00	; 0
   14266:	30 c1       	rjmp	.+608    	; 0x144c8 <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14268:	4e e7       	ldi	r20, 0x7E	; 126
   1426a:	50 e0       	ldi	r21, 0x00	; 0
   1426c:	b8 01       	movw	r22, r16
   1426e:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   14272:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   14274:	6d e6       	ldi	r22, 0x6D	; 109
   14276:	70 e1       	ldi	r23, 0x10	; 16
   14278:	c8 01       	movw	r24, r16
   1427a:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1427e:	89 2b       	or	r24, r25
   14280:	21 f0       	breq	.+8      	; 0x1428a <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   14282:	22 24       	eor	r2, r2
   14284:	23 94       	inc	r2
   14286:	31 2c       	mov	r3, r1
   14288:	d7 cf       	rjmp	.-82     	; 0x14238 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   1428a:	21 e0       	ldi	r18, 0x01	; 1
   1428c:	22 16       	cp	r2, r18
   1428e:	31 04       	cpc	r3, r1
   14290:	99 f6       	brne	.-90     	; 0x14238 <hpdir_find_drive+0xba>
            continue;

        if(list)
   14292:	c8 57       	subi	r28, 0x78	; 120
   14294:	de 4f       	sbci	r29, 0xFE	; 254
   14296:	88 81       	ld	r24, Y
   14298:	99 81       	ldd	r25, Y+1	; 0x01
   1429a:	c8 58       	subi	r28, 0x88	; 136
   1429c:	d1 40       	sbci	r29, 0x01	; 1
   1429e:	89 2b       	or	r24, r25
   142a0:	61 f0       	breq	.+24     	; 0x142ba <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   142a2:	ed b7       	in	r30, 0x3d	; 61
   142a4:	fe b7       	in	r31, 0x3e	; 62
   142a6:	97 82       	std	Z+7, r9	; 0x07
   142a8:	86 82       	std	Z+6, r8	; 0x06
   142aa:	15 83       	std	Z+5, r17	; 0x05
   142ac:	04 83       	std	Z+4, r16	; 0x04
   142ae:	41 82       	std	Z+1, r4	; 0x01
   142b0:	52 82       	std	Z+2, r5	; 0x02
   142b2:	63 82       	std	Z+3, r6	; 0x03
   142b4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            continue;
   142b8:	bf cf       	rjmp	.-130    	; 0x14238 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   142ba:	b8 01       	movw	r22, r16
   142bc:	c6 01       	movw	r24, r12
   142be:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   142c2:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   142c4:	f1 f2       	breq	.-68     	; 0x14282 <hpdir_find_drive+0x104>
   142c6:	c0 de       	rcall	.-640    	; 0x14048 <hpdir_init>

        if(verbose)
   142c8:	ab 28       	or	r10, r11
   142ca:	61 f0       	breq	.+24     	; 0x142e4 <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   142cc:	ed b7       	in	r30, 0x3d	; 61
   142ce:	fe b7       	in	r31, 0x3e	; 62
   142d0:	d5 82       	std	Z+5, r13	; 0x05
   142d2:	c4 82       	std	Z+4, r12	; 0x04
   142d4:	81 ea       	ldi	r24, 0xA1	; 161
   142d6:	9d e1       	ldi	r25, 0x1D	; 29
   142d8:	a0 e0       	ldi	r26, 0x00	; 0
   142da:	81 83       	std	Z+1, r24	; 0x01
   142dc:	92 83       	std	Z+2, r25	; 0x02
   142de:	a3 83       	std	Z+3, r26	; 0x03
   142e0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   142e4:	4e e1       	ldi	r20, 0x1E	; 30
   142e6:	50 e0       	ldi	r21, 0x00	; 0
   142e8:	b8 01       	movw	r22, r16
   142ea:	8e ee       	ldi	r24, 0xEE	; 238
   142ec:	90 e2       	ldi	r25, 0x20	; 32
   142ee:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   142f2:	4e e7       	ldi	r20, 0x7E	; 126
   142f4:	50 e0       	ldi	r21, 0x00	; 0
   142f6:	b8 01       	movw	r22, r16
   142f8:	c4 01       	movw	r24, r8
   142fa:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   142fe:	4e e3       	ldi	r20, 0x3E	; 62
   14300:	50 e0       	ldi	r21, 0x00	; 0
   14302:	6e e0       	ldi	r22, 0x0E	; 14
   14304:	71 e2       	ldi	r23, 0x21	; 33
   14306:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1430a:	4e e1       	ldi	r20, 0x1E	; 30
   1430c:	50 e0       	ldi	r21, 0x00	; 0
   1430e:	6e e4       	ldi	r22, 0x4E	; 78
   14310:	71 e2       	ldi	r23, 0x21	; 33
   14312:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14316:	4e e7       	ldi	r20, 0x7E	; 126
   14318:	50 e0       	ldi	r21, 0x00	; 0
   1431a:	b8 01       	movw	r22, r16
   1431c:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   14320:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   14322:	c8 01       	movw	r24, r16
   14324:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   14328:	60 93 6e 21 	sts	0x216E, r22	; 0x80216e <hpdir+0x80>
   1432c:	70 93 6f 21 	sts	0x216F, r23	; 0x80216f <hpdir+0x81>
   14330:	80 93 70 21 	sts	0x2170, r24	; 0x802170 <hpdir+0x82>
   14334:	90 93 71 21 	sts	0x2171, r25	; 0x802171 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14338:	4e e7       	ldi	r20, 0x7E	; 126
   1433a:	50 e0       	ldi	r21, 0x00	; 0
   1433c:	b8 01       	movw	r22, r16
   1433e:	c6 01       	movw	r24, r12
   14340:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   14344:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   14346:	c8 01       	movw	r24, r16
   14348:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   1434c:	60 93 72 21 	sts	0x2172, r22	; 0x802172 <hpdir+0x84>
   14350:	70 93 73 21 	sts	0x2173, r23	; 0x802173 <hpdir+0x85>
   14354:	80 93 74 21 	sts	0x2174, r24	; 0x802174 <hpdir+0x86>
   14358:	90 93 75 21 	sts	0x2175, r25	; 0x802175 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1435c:	4e e7       	ldi	r20, 0x7E	; 126
   1435e:	50 e0       	ldi	r21, 0x00	; 0
   14360:	b8 01       	movw	r22, r16
   14362:	c6 01       	movw	r24, r12
   14364:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   14368:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   1436a:	c8 01       	movw	r24, r16
   1436c:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   14370:	60 93 76 21 	sts	0x2176, r22	; 0x802176 <hpdir+0x88>
   14374:	70 93 77 21 	sts	0x2177, r23	; 0x802177 <hpdir+0x89>
   14378:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <hpdir+0x8a>
   1437c:	90 93 79 21 	sts	0x2179, r25	; 0x802179 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14380:	4e e7       	ldi	r20, 0x7E	; 126
   14382:	50 e0       	ldi	r21, 0x00	; 0
   14384:	b8 01       	movw	r22, r16
   14386:	c6 01       	movw	r24, r12
   14388:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   1438c:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   1438e:	c8 01       	movw	r24, r16
   14390:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   14394:	60 93 7a 21 	sts	0x217A, r22	; 0x80217a <hpdir+0x8c>
   14398:	70 93 7b 21 	sts	0x217B, r23	; 0x80217b <hpdir+0x8d>
   1439c:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <hpdir+0x8e>
   143a0:	90 93 7d 21 	sts	0x217D, r25	; 0x80217d <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143a4:	4e e7       	ldi	r20, 0x7E	; 126
   143a6:	50 e0       	ldi	r21, 0x00	; 0
   143a8:	b8 01       	movw	r22, r16
   143aa:	c6 01       	movw	r24, r12
   143ac:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   143b0:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   143b2:	c8 01       	movw	r24, r16
   143b4:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   143b8:	60 93 7e 21 	sts	0x217E, r22	; 0x80217e <hpdir+0x90>
   143bc:	70 93 7f 21 	sts	0x217F, r23	; 0x80217f <hpdir+0x91>
   143c0:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <hpdir+0x92>
   143c4:	90 93 81 21 	sts	0x2181, r25	; 0x802181 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143c8:	4e e7       	ldi	r20, 0x7E	; 126
   143ca:	50 e0       	ldi	r21, 0x00	; 0
   143cc:	b8 01       	movw	r22, r16
   143ce:	c6 01       	movw	r24, r12
   143d0:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   143d4:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   143d6:	c8 01       	movw	r24, r16
   143d8:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   143dc:	60 93 82 21 	sts	0x2182, r22	; 0x802182 <hpdir+0x94>
   143e0:	70 93 83 21 	sts	0x2183, r23	; 0x802183 <hpdir+0x95>
   143e4:	80 93 84 21 	sts	0x2184, r24	; 0x802184 <hpdir+0x96>
   143e8:	90 93 85 21 	sts	0x2185, r25	; 0x802185 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143ec:	4e e7       	ldi	r20, 0x7E	; 126
   143ee:	50 e0       	ldi	r21, 0x00	; 0
   143f0:	b8 01       	movw	r22, r16
   143f2:	c6 01       	movw	r24, r12
   143f4:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   143f8:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   143fa:	c8 01       	movw	r24, r16
   143fc:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   14400:	60 93 86 21 	sts	0x2186, r22	; 0x802186 <hpdir+0x98>
   14404:	70 93 87 21 	sts	0x2187, r23	; 0x802187 <hpdir+0x99>
   14408:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <hpdir+0x9a>
   1440c:	90 93 89 21 	sts	0x2189, r25	; 0x802189 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14410:	4e e7       	ldi	r20, 0x7E	; 126
   14412:	50 e0       	ldi	r21, 0x00	; 0
   14414:	b8 01       	movw	r22, r16
   14416:	c6 01       	movw	r24, r12
   14418:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   1441c:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   1441e:	c8 01       	movw	r24, r16
   14420:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   14424:	60 93 8a 21 	sts	0x218A, r22	; 0x80218a <hpdir+0x9c>
   14428:	70 93 8b 21 	sts	0x218B, r23	; 0x80218b <hpdir+0x9d>
   1442c:	80 93 8c 21 	sts	0x218C, r24	; 0x80218c <hpdir+0x9e>
   14430:	90 93 8d 21 	sts	0x218D, r25	; 0x80218d <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14434:	4e e7       	ldi	r20, 0x7E	; 126
   14436:	50 e0       	ldi	r21, 0x00	; 0
   14438:	b8 01       	movw	r22, r16
   1443a:	c6 01       	movw	r24, r12
   1443c:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
   14440:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14442:	c8 01       	movw	r24, r16
   14444:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   14448:	60 93 8e 21 	sts	0x218E, r22	; 0x80218e <hpdir+0xa0>
   1444c:	70 93 8f 21 	sts	0x218F, r23	; 0x80218f <hpdir+0xa1>
   14450:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <hpdir+0xa2>
   14454:	90 93 91 21 	sts	0x2191, r25	; 0x802191 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14458:	4e e7       	ldi	r20, 0x7E	; 126
   1445a:	50 e0       	ldi	r21, 0x00	; 0
   1445c:	b8 01       	movw	r22, r16
   1445e:	c6 01       	movw	r24, r12
   14460:	0e 94 ae 30 	call	0x615c	; 0x615c <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14464:	c8 01       	movw	r24, r16
   14466:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
   1446a:	60 93 92 21 	sts	0x2192, r22	; 0x802192 <hpdir+0xa4>
   1446e:	70 93 93 21 	sts	0x2193, r23	; 0x802193 <hpdir+0xa5>
   14472:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <hpdir+0xa6>
   14476:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   1447a:	20 91 82 21 	lds	r18, 0x2182	; 0x802182 <hpdir+0x94>
   1447e:	30 91 83 21 	lds	r19, 0x2183	; 0x802183 <hpdir+0x95>
   14482:	40 91 84 21 	lds	r20, 0x2184	; 0x802184 <hpdir+0x96>
   14486:	50 91 85 21 	lds	r21, 0x2185	; 0x802185 <hpdir+0x97>
   1448a:	60 91 86 21 	lds	r22, 0x2186	; 0x802186 <hpdir+0x98>
   1448e:	70 91 87 21 	lds	r23, 0x2187	; 0x802187 <hpdir+0x99>
   14492:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <hpdir+0x9a>
   14496:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <hpdir+0x9b>
   1449a:	0e 94 a9 e1 	call	0x1c352	; 0x1c352 <__mulsi3>
   1449e:	9b 01       	movw	r18, r22
   144a0:	ac 01       	movw	r20, r24
   144a2:	60 91 8a 21 	lds	r22, 0x218A	; 0x80218a <hpdir+0x9c>
   144a6:	70 91 8b 21 	lds	r23, 0x218B	; 0x80218b <hpdir+0x9d>
   144aa:	80 91 8c 21 	lds	r24, 0x218C	; 0x80218c <hpdir+0x9e>
   144ae:	90 91 8d 21 	lds	r25, 0x218D	; 0x80218d <hpdir+0x9f>
   144b2:	0e 94 a9 e1 	call	0x1c352	; 0x1c352 <__mulsi3>
   144b6:	60 93 9a 21 	sts	0x219A, r22	; 0x80219a <hpdir+0xac>
   144ba:	70 93 9b 21 	sts	0x219B, r23	; 0x80219b <hpdir+0xad>
   144be:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <hpdir+0xae>
   144c2:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   144c6:	01 e0       	ldi	r16, 0x01	; 1
   144c8:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   144ca:	c7 01       	movw	r24, r14
   144cc:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>
    return(found);
   144d0:	c8 01       	movw	r24, r16
   144d2:	02 c0       	rjmp	.+4      	; 0x144d8 <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   144d4:	80 e0       	ldi	r24, 0x00	; 0
   144d6:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   144d8:	c7 57       	subi	r28, 0x77	; 119
   144da:	de 4f       	sbci	r29, 0xFE	; 254
   144dc:	0f b6       	in	r0, 0x3f	; 63
   144de:	f8 94       	cli
   144e0:	de bf       	out	0x3e, r29	; 62
   144e2:	0f be       	out	0x3f, r0	; 63
   144e4:	cd bf       	out	0x3d, r28	; 61
   144e6:	df 91       	pop	r29
   144e8:	cf 91       	pop	r28
   144ea:	1f 91       	pop	r17
   144ec:	0f 91       	pop	r16
   144ee:	ff 90       	pop	r15
   144f0:	ef 90       	pop	r14
   144f2:	df 90       	pop	r13
   144f4:	cf 90       	pop	r12
   144f6:	bf 90       	pop	r11
   144f8:	af 90       	pop	r10
   144fa:	9f 90       	pop	r9
   144fc:	8f 90       	pop	r8
   144fe:	6f 90       	pop	r6
   14500:	5f 90       	pop	r5
   14502:	4f 90       	pop	r4
   14504:	3f 90       	pop	r3
   14506:	2f 90       	pop	r2
   14508:	08 95       	ret

0001450a <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   1450a:	0f 93       	push	r16
   1450c:	1f 93       	push	r17
   1450e:	25 e0       	ldi	r18, 0x05	; 5
   14510:	30 e0       	ldi	r19, 0x00	; 0
   14512:	fc 01       	movw	r30, r24
   14514:	31 83       	std	Z+1, r19	; 0x01
   14516:	20 83       	st	Z, r18
   14518:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1451c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14520:	06 81       	ldd	r16, Z+6	; 0x06
   14522:	17 81       	ldd	r17, Z+7	; 0x07
   14524:	20 e0       	ldi	r18, 0x00	; 0
   14526:	30 e0       	ldi	r19, 0x00	; 0
   14528:	42 e0       	ldi	r20, 0x02	; 2
   1452a:	50 e0       	ldi	r21, 0x00	; 0
   1452c:	60 e0       	ldi	r22, 0x00	; 0
   1452e:	70 e0       	ldi	r23, 0x00	; 0
   14530:	8f e8       	ldi	r24, 0x8F	; 143
   14532:	99 e1       	ldi	r25, 0x19	; 25
   14534:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14538:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1453c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14540:	00 85       	ldd	r16, Z+8	; 0x08
   14542:	11 85       	ldd	r17, Z+9	; 0x09
   14544:	20 e0       	ldi	r18, 0x00	; 0
   14546:	30 e0       	ldi	r19, 0x00	; 0
   14548:	42 e0       	ldi	r20, 0x02	; 2
   1454a:	50 e0       	ldi	r21, 0x00	; 0
   1454c:	61 e0       	ldi	r22, 0x01	; 1
   1454e:	70 e0       	ldi	r23, 0x00	; 0
   14550:	8f e8       	ldi	r24, 0x8F	; 143
   14552:	99 e1       	ldi	r25, 0x19	; 25
   14554:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14558:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1455c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14560:	02 85       	ldd	r16, Z+10	; 0x0a
   14562:	10 e0       	ldi	r17, 0x00	; 0
   14564:	20 e0       	ldi	r18, 0x00	; 0
   14566:	30 e0       	ldi	r19, 0x00	; 0
   14568:	41 e0       	ldi	r20, 0x01	; 1
   1456a:	50 e0       	ldi	r21, 0x00	; 0
   1456c:	64 e0       	ldi	r22, 0x04	; 4
   1456e:	70 e0       	ldi	r23, 0x00	; 0
   14570:	8f e8       	ldi	r24, 0x8F	; 143
   14572:	99 e1       	ldi	r25, 0x19	; 25
   14574:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14578:	8f e8       	ldi	r24, 0x8F	; 143
   1457a:	99 e1       	ldi	r25, 0x19	; 25
   1457c:	1f 91       	pop	r17
   1457e:	0f 91       	pop	r16
   14580:	08 95       	ret

00014582 <SS80UnitPack>:
   14582:	0f 93       	push	r16
   14584:	1f 93       	push	r17
   14586:	23 e1       	ldi	r18, 0x13	; 19
   14588:	30 e0       	ldi	r19, 0x00	; 0
   1458a:	fc 01       	movw	r30, r24
   1458c:	31 83       	std	Z+1, r19	; 0x01
   1458e:	20 83       	st	Z, r18
   14590:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14594:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14598:	03 85       	ldd	r16, Z+11	; 0x0b
   1459a:	10 e0       	ldi	r17, 0x00	; 0
   1459c:	20 e0       	ldi	r18, 0x00	; 0
   1459e:	30 e0       	ldi	r19, 0x00	; 0
   145a0:	41 e0       	ldi	r20, 0x01	; 1
   145a2:	50 e0       	ldi	r21, 0x00	; 0
   145a4:	60 e0       	ldi	r22, 0x00	; 0
   145a6:	70 e0       	ldi	r23, 0x00	; 0
   145a8:	8c e7       	ldi	r24, 0x7C	; 124
   145aa:	99 e1       	ldi	r25, 0x19	; 25
   145ac:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   145b0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   145b4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   145b8:	04 85       	ldd	r16, Z+12	; 0x0c
   145ba:	15 85       	ldd	r17, Z+13	; 0x0d
   145bc:	26 85       	ldd	r18, Z+14	; 0x0e
   145be:	37 85       	ldd	r19, Z+15	; 0x0f
   145c0:	43 e0       	ldi	r20, 0x03	; 3
   145c2:	50 e0       	ldi	r21, 0x00	; 0
   145c4:	61 e0       	ldi	r22, 0x01	; 1
   145c6:	70 e0       	ldi	r23, 0x00	; 0
   145c8:	8c e7       	ldi	r24, 0x7C	; 124
   145ca:	99 e1       	ldi	r25, 0x19	; 25
   145cc:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   145d0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   145d4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   145d8:	00 89       	ldd	r16, Z+16	; 0x10
   145da:	11 89       	ldd	r17, Z+17	; 0x11
   145dc:	20 e0       	ldi	r18, 0x00	; 0
   145de:	30 e0       	ldi	r19, 0x00	; 0
   145e0:	42 e0       	ldi	r20, 0x02	; 2
   145e2:	50 e0       	ldi	r21, 0x00	; 0
   145e4:	64 e0       	ldi	r22, 0x04	; 4
   145e6:	70 e0       	ldi	r23, 0x00	; 0
   145e8:	8c e7       	ldi	r24, 0x7C	; 124
   145ea:	99 e1       	ldi	r25, 0x19	; 25
   145ec:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   145f0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   145f4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   145f8:	02 89       	ldd	r16, Z+18	; 0x12
   145fa:	10 e0       	ldi	r17, 0x00	; 0
   145fc:	20 e0       	ldi	r18, 0x00	; 0
   145fe:	30 e0       	ldi	r19, 0x00	; 0
   14600:	41 e0       	ldi	r20, 0x01	; 1
   14602:	50 e0       	ldi	r21, 0x00	; 0
   14604:	66 e0       	ldi	r22, 0x06	; 6
   14606:	70 e0       	ldi	r23, 0x00	; 0
   14608:	8c e7       	ldi	r24, 0x7C	; 124
   1460a:	99 e1       	ldi	r25, 0x19	; 25
   1460c:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14610:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14614:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14618:	03 89       	ldd	r16, Z+19	; 0x13
   1461a:	10 e0       	ldi	r17, 0x00	; 0
   1461c:	20 e0       	ldi	r18, 0x00	; 0
   1461e:	30 e0       	ldi	r19, 0x00	; 0
   14620:	41 e0       	ldi	r20, 0x01	; 1
   14622:	50 e0       	ldi	r21, 0x00	; 0
   14624:	67 e0       	ldi	r22, 0x07	; 7
   14626:	70 e0       	ldi	r23, 0x00	; 0
   14628:	8c e7       	ldi	r24, 0x7C	; 124
   1462a:	99 e1       	ldi	r25, 0x19	; 25
   1462c:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14630:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14634:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14638:	04 89       	ldd	r16, Z+20	; 0x14
   1463a:	15 89       	ldd	r17, Z+21	; 0x15
   1463c:	20 e0       	ldi	r18, 0x00	; 0
   1463e:	30 e0       	ldi	r19, 0x00	; 0
   14640:	42 e0       	ldi	r20, 0x02	; 2
   14642:	50 e0       	ldi	r21, 0x00	; 0
   14644:	68 e0       	ldi	r22, 0x08	; 8
   14646:	70 e0       	ldi	r23, 0x00	; 0
   14648:	8c e7       	ldi	r24, 0x7C	; 124
   1464a:	99 e1       	ldi	r25, 0x19	; 25
   1464c:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14650:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14654:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14658:	06 89       	ldd	r16, Z+22	; 0x16
   1465a:	17 89       	ldd	r17, Z+23	; 0x17
   1465c:	20 e0       	ldi	r18, 0x00	; 0
   1465e:	30 e0       	ldi	r19, 0x00	; 0
   14660:	42 e0       	ldi	r20, 0x02	; 2
   14662:	50 e0       	ldi	r21, 0x00	; 0
   14664:	6a e0       	ldi	r22, 0x0A	; 10
   14666:	70 e0       	ldi	r23, 0x00	; 0
   14668:	8c e7       	ldi	r24, 0x7C	; 124
   1466a:	99 e1       	ldi	r25, 0x19	; 25
   1466c:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14670:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14674:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14678:	00 8d       	ldd	r16, Z+24	; 0x18
   1467a:	11 8d       	ldd	r17, Z+25	; 0x19
   1467c:	20 e0       	ldi	r18, 0x00	; 0
   1467e:	30 e0       	ldi	r19, 0x00	; 0
   14680:	42 e0       	ldi	r20, 0x02	; 2
   14682:	50 e0       	ldi	r21, 0x00	; 0
   14684:	6c e0       	ldi	r22, 0x0C	; 12
   14686:	70 e0       	ldi	r23, 0x00	; 0
   14688:	8c e7       	ldi	r24, 0x7C	; 124
   1468a:	99 e1       	ldi	r25, 0x19	; 25
   1468c:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14690:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14694:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14698:	02 8d       	ldd	r16, Z+26	; 0x1a
   1469a:	13 8d       	ldd	r17, Z+27	; 0x1b
   1469c:	20 e0       	ldi	r18, 0x00	; 0
   1469e:	30 e0       	ldi	r19, 0x00	; 0
   146a0:	42 e0       	ldi	r20, 0x02	; 2
   146a2:	50 e0       	ldi	r21, 0x00	; 0
   146a4:	6e e0       	ldi	r22, 0x0E	; 14
   146a6:	70 e0       	ldi	r23, 0x00	; 0
   146a8:	8c e7       	ldi	r24, 0x7C	; 124
   146aa:	99 e1       	ldi	r25, 0x19	; 25
   146ac:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   146b0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   146b4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   146b8:	04 8d       	ldd	r16, Z+28	; 0x1c
   146ba:	10 e0       	ldi	r17, 0x00	; 0
   146bc:	20 e0       	ldi	r18, 0x00	; 0
   146be:	30 e0       	ldi	r19, 0x00	; 0
   146c0:	41 e0       	ldi	r20, 0x01	; 1
   146c2:	50 e0       	ldi	r21, 0x00	; 0
   146c4:	60 e1       	ldi	r22, 0x10	; 16
   146c6:	70 e0       	ldi	r23, 0x00	; 0
   146c8:	8c e7       	ldi	r24, 0x7C	; 124
   146ca:	99 e1       	ldi	r25, 0x19	; 25
   146cc:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   146d0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   146d4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   146d8:	05 8d       	ldd	r16, Z+29	; 0x1d
   146da:	10 e0       	ldi	r17, 0x00	; 0
   146dc:	20 e0       	ldi	r18, 0x00	; 0
   146de:	30 e0       	ldi	r19, 0x00	; 0
   146e0:	41 e0       	ldi	r20, 0x01	; 1
   146e2:	50 e0       	ldi	r21, 0x00	; 0
   146e4:	61 e1       	ldi	r22, 0x11	; 17
   146e6:	70 e0       	ldi	r23, 0x00	; 0
   146e8:	8c e7       	ldi	r24, 0x7C	; 124
   146ea:	99 e1       	ldi	r25, 0x19	; 25
   146ec:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   146f0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   146f4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   146f8:	06 8d       	ldd	r16, Z+30	; 0x1e
   146fa:	10 e0       	ldi	r17, 0x00	; 0
   146fc:	20 e0       	ldi	r18, 0x00	; 0
   146fe:	30 e0       	ldi	r19, 0x00	; 0
   14700:	41 e0       	ldi	r20, 0x01	; 1
   14702:	50 e0       	ldi	r21, 0x00	; 0
   14704:	62 e1       	ldi	r22, 0x12	; 18
   14706:	70 e0       	ldi	r23, 0x00	; 0
   14708:	8c e7       	ldi	r24, 0x7C	; 124
   1470a:	99 e1       	ldi	r25, 0x19	; 25
   1470c:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14710:	8c e7       	ldi	r24, 0x7C	; 124
   14712:	99 e1       	ldi	r25, 0x19	; 25
   14714:	1f 91       	pop	r17
   14716:	0f 91       	pop	r16
   14718:	08 95       	ret

0001471a <SS80VolumePack>:
   1471a:	0f 93       	push	r16
   1471c:	1f 93       	push	r17
   1471e:	2d e0       	ldi	r18, 0x0D	; 13
   14720:	30 e0       	ldi	r19, 0x00	; 0
   14722:	fc 01       	movw	r30, r24
   14724:	31 83       	std	Z+1, r19	; 0x01
   14726:	20 83       	st	Z, r18
   14728:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1472c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14730:	07 8d       	ldd	r16, Z+31	; 0x1f
   14732:	10 a1       	ldd	r17, Z+32	; 0x20
   14734:	21 a1       	ldd	r18, Z+33	; 0x21
   14736:	32 a1       	ldd	r19, Z+34	; 0x22
   14738:	43 e0       	ldi	r20, 0x03	; 3
   1473a:	50 e0       	ldi	r21, 0x00	; 0
   1473c:	60 e0       	ldi	r22, 0x00	; 0
   1473e:	70 e0       	ldi	r23, 0x00	; 0
   14740:	8f e6       	ldi	r24, 0x6F	; 111
   14742:	99 e1       	ldi	r25, 0x19	; 25
   14744:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14748:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1474c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14750:	03 a1       	ldd	r16, Z+35	; 0x23
   14752:	10 e0       	ldi	r17, 0x00	; 0
   14754:	20 e0       	ldi	r18, 0x00	; 0
   14756:	30 e0       	ldi	r19, 0x00	; 0
   14758:	41 e0       	ldi	r20, 0x01	; 1
   1475a:	50 e0       	ldi	r21, 0x00	; 0
   1475c:	63 e0       	ldi	r22, 0x03	; 3
   1475e:	70 e0       	ldi	r23, 0x00	; 0
   14760:	8f e6       	ldi	r24, 0x6F	; 111
   14762:	99 e1       	ldi	r25, 0x19	; 25
   14764:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14768:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1476c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14770:	04 a1       	ldd	r16, Z+36	; 0x24
   14772:	15 a1       	ldd	r17, Z+37	; 0x25
   14774:	20 e0       	ldi	r18, 0x00	; 0
   14776:	30 e0       	ldi	r19, 0x00	; 0
   14778:	42 e0       	ldi	r20, 0x02	; 2
   1477a:	50 e0       	ldi	r21, 0x00	; 0
   1477c:	64 e0       	ldi	r22, 0x04	; 4
   1477e:	70 e0       	ldi	r23, 0x00	; 0
   14780:	8f e6       	ldi	r24, 0x6F	; 111
   14782:	99 e1       	ldi	r25, 0x19	; 25
   14784:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14788:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1478c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14790:	06 a1       	ldd	r16, Z+38	; 0x26
   14792:	17 a1       	ldd	r17, Z+39	; 0x27
   14794:	20 a5       	ldd	r18, Z+40	; 0x28
   14796:	31 a5       	ldd	r19, Z+41	; 0x29
   14798:	46 e0       	ldi	r20, 0x06	; 6
   1479a:	50 e0       	ldi	r21, 0x00	; 0
   1479c:	66 e0       	ldi	r22, 0x06	; 6
   1479e:	70 e0       	ldi	r23, 0x00	; 0
   147a0:	8f e6       	ldi	r24, 0x6F	; 111
   147a2:	99 e1       	ldi	r25, 0x19	; 25
   147a4:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   147a8:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   147ac:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   147b0:	02 a5       	ldd	r16, Z+42	; 0x2a
   147b2:	10 e0       	ldi	r17, 0x00	; 0
   147b4:	20 e0       	ldi	r18, 0x00	; 0
   147b6:	30 e0       	ldi	r19, 0x00	; 0
   147b8:	41 e0       	ldi	r20, 0x01	; 1
   147ba:	50 e0       	ldi	r21, 0x00	; 0
   147bc:	6c e0       	ldi	r22, 0x0C	; 12
   147be:	70 e0       	ldi	r23, 0x00	; 0
   147c0:	8f e6       	ldi	r24, 0x6F	; 111
   147c2:	99 e1       	ldi	r25, 0x19	; 25
   147c4:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   147c8:	8f e6       	ldi	r24, 0x6F	; 111
   147ca:	99 e1       	ldi	r25, 0x19	; 25
   147cc:	1f 91       	pop	r17
   147ce:	0f 91       	pop	r16
   147d0:	08 95       	ret

000147d2 <SS80_test_extended_status>:
   147d2:	9b 01       	movw	r18, r22
   147d4:	43 e0       	ldi	r20, 0x03	; 3
   147d6:	35 95       	asr	r19
   147d8:	27 95       	ror	r18
   147da:	4a 95       	dec	r20
   147dc:	e1 f7       	brne	.-8      	; 0x147d6 <SS80_test_extended_status+0x4>
   147de:	82 0f       	add	r24, r18
   147e0:	93 1f       	adc	r25, r19
   147e2:	67 70       	andi	r22, 0x07	; 7
   147e4:	77 27       	eor	r23, r23
   147e6:	20 e8       	ldi	r18, 0x80	; 128
   147e8:	30 e0       	ldi	r19, 0x00	; 0
   147ea:	02 c0       	rjmp	.+4      	; 0x147f0 <SS80_test_extended_status+0x1e>
   147ec:	35 95       	asr	r19
   147ee:	27 95       	ror	r18
   147f0:	6a 95       	dec	r22
   147f2:	e2 f7       	brpl	.-8      	; 0x147ec <SS80_test_extended_status+0x1a>
   147f4:	fc 01       	movw	r30, r24
   147f6:	80 81       	ld	r24, Z
   147f8:	28 23       	and	r18, r24
   147fa:	81 e0       	ldi	r24, 0x01	; 1
   147fc:	90 e0       	ldi	r25, 0x00	; 0
   147fe:	11 f4       	brne	.+4      	; 0x14804 <SS80_test_extended_status+0x32>
   14800:	80 e0       	ldi	r24, 0x00	; 0
   14802:	90 e0       	ldi	r25, 0x00	; 0
   14804:	08 95       	ret

00014806 <SS80_display_extended_status>:
   14806:	6f 92       	push	r6
   14808:	7f 92       	push	r7
   1480a:	8f 92       	push	r8
   1480c:	ef 92       	push	r14
   1480e:	ff 92       	push	r15
   14810:	0f 93       	push	r16
   14812:	1f 93       	push	r17
   14814:	cf 93       	push	r28
   14816:	df 93       	push	r29
   14818:	ad b7       	in	r26, 0x3d	; 61
   1481a:	be b7       	in	r27, 0x3e	; 62
   1481c:	17 97       	sbiw	r26, 0x07	; 7
   1481e:	0f b6       	in	r0, 0x3f	; 63
   14820:	f8 94       	cli
   14822:	be bf       	out	0x3e, r27	; 62
   14824:	0f be       	out	0x3f, r0	; 63
   14826:	ad bf       	out	0x3d, r26	; 61
   14828:	fc 01       	movw	r30, r24
   1482a:	ac 01       	movw	r20, r24
   1482c:	48 5f       	subi	r20, 0xF8	; 248
   1482e:	5f 4f       	sbci	r21, 0xFF	; 255
   14830:	20 e0       	ldi	r18, 0x00	; 0
   14832:	30 e0       	ldi	r19, 0x00	; 0
   14834:	a1 91       	ld	r26, Z+
   14836:	aa 23       	and	r26, r26
   14838:	11 f0       	breq	.+4      	; 0x1483e <SS80_display_extended_status+0x38>
   1483a:	21 e0       	ldi	r18, 0x01	; 1
   1483c:	30 e0       	ldi	r19, 0x00	; 0
   1483e:	e4 17       	cp	r30, r20
   14840:	f5 07       	cpc	r31, r21
   14842:	c1 f7       	brne	.-16     	; 0x14834 <SS80_display_extended_status+0x2e>
   14844:	23 2b       	or	r18, r19
   14846:	81 f1       	breq	.+96     	; 0x148a8 <SS80_display_extended_status+0xa2>
   14848:	ec 01       	movw	r28, r24
   1484a:	ed b7       	in	r30, 0x3d	; 61
   1484c:	fe b7       	in	r31, 0x3e	; 62
   1484e:	75 83       	std	Z+5, r23	; 0x05
   14850:	64 83       	std	Z+4, r22	; 0x04
   14852:	82 e1       	ldi	r24, 0x12	; 18
   14854:	94 e2       	ldi	r25, 0x24	; 36
   14856:	a0 e0       	ldi	r26, 0x00	; 0
   14858:	81 83       	std	Z+1, r24	; 0x01
   1485a:	92 83       	std	Z+2, r25	; 0x02
   1485c:	a3 83       	std	Z+3, r26	; 0x03
   1485e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14862:	0c e7       	ldi	r16, 0x7C	; 124
   14864:	12 e0       	ldi	r17, 0x02	; 2
   14866:	87 e0       	ldi	r24, 0x07	; 7
   14868:	94 e2       	ldi	r25, 0x24	; 36
   1486a:	3c 01       	movw	r6, r24
   1486c:	81 2c       	mov	r8, r1
   1486e:	f8 01       	movw	r30, r16
   14870:	e0 80       	ld	r14, Z
   14872:	f1 80       	ldd	r15, Z+1	; 0x01
   14874:	ff ef       	ldi	r31, 0xFF	; 255
   14876:	ef 16       	cp	r14, r31
   14878:	ff 06       	cpc	r15, r31
   1487a:	b1 f0       	breq	.+44     	; 0x148a8 <SS80_display_extended_status+0xa2>
   1487c:	b7 01       	movw	r22, r14
   1487e:	ce 01       	movw	r24, r28
   14880:	a8 df       	rcall	.-176    	; 0x147d2 <SS80_test_extended_status>
   14882:	89 2b       	or	r24, r25
   14884:	71 f0       	breq	.+28     	; 0x148a2 <SS80_display_extended_status+0x9c>
   14886:	f8 01       	movw	r30, r16
   14888:	82 81       	ldd	r24, Z+2	; 0x02
   1488a:	93 81       	ldd	r25, Z+3	; 0x03
   1488c:	ed b7       	in	r30, 0x3d	; 61
   1488e:	fe b7       	in	r31, 0x3e	; 62
   14890:	97 83       	std	Z+7, r25	; 0x07
   14892:	86 83       	std	Z+6, r24	; 0x06
   14894:	f5 82       	std	Z+5, r15	; 0x05
   14896:	e4 82       	std	Z+4, r14	; 0x04
   14898:	61 82       	std	Z+1, r6	; 0x01
   1489a:	72 82       	std	Z+2, r7	; 0x02
   1489c:	83 82       	std	Z+3, r8	; 0x03
   1489e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   148a2:	0c 5f       	subi	r16, 0xFC	; 252
   148a4:	1f 4f       	sbci	r17, 0xFF	; 255
   148a6:	e3 cf       	rjmp	.-58     	; 0x1486e <SS80_display_extended_status+0x68>
   148a8:	ad b7       	in	r26, 0x3d	; 61
   148aa:	be b7       	in	r27, 0x3e	; 62
   148ac:	17 96       	adiw	r26, 0x07	; 7
   148ae:	0f b6       	in	r0, 0x3f	; 63
   148b0:	f8 94       	cli
   148b2:	be bf       	out	0x3e, r27	; 62
   148b4:	0f be       	out	0x3f, r0	; 63
   148b6:	ad bf       	out	0x3d, r26	; 61
   148b8:	df 91       	pop	r29
   148ba:	cf 91       	pop	r28
   148bc:	1f 91       	pop	r17
   148be:	0f 91       	pop	r16
   148c0:	ff 90       	pop	r15
   148c2:	ef 90       	pop	r14
   148c4:	8f 90       	pop	r8
   148c6:	7f 90       	pop	r7
   148c8:	6f 90       	pop	r6
   148ca:	08 95       	ret

000148cc <SS80_send_status>:
   148cc:	a9 e1       	ldi	r26, 0x19	; 25
   148ce:	b0 e0       	ldi	r27, 0x00	; 0
   148d0:	ec e6       	ldi	r30, 0x6C	; 108
   148d2:	f4 ea       	ldi	r31, 0xA4	; 164
   148d4:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
   148d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   148dc:	85 ff       	sbrs	r24, 5
   148de:	0a c0       	rjmp	.+20     	; 0x148f4 <SS80_send_status+0x28>
   148e0:	83 ef       	ldi	r24, 0xF3	; 243
   148e2:	93 e2       	ldi	r25, 0x23	; 35
   148e4:	a0 e0       	ldi	r26, 0x00	; 0
   148e6:	ed b7       	in	r30, 0x3d	; 61
   148e8:	fe b7       	in	r31, 0x3e	; 62
   148ea:	81 83       	std	Z+1, r24	; 0x01
   148ec:	92 83       	std	Z+2, r25	; 0x02
   148ee:	a3 83       	std	Z+3, r26	; 0x03
   148f0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   148f4:	ce 01       	movw	r24, r28
   148f6:	04 96       	adiw	r24, 0x04	; 4
   148f8:	7c 01       	movw	r14, r24
   148fa:	84 e1       	ldi	r24, 0x14	; 20
   148fc:	f7 01       	movw	r30, r14
   148fe:	11 92       	st	Z+, r1
   14900:	8a 95       	dec	r24
   14902:	e9 f7       	brne	.-6      	; 0x148fe <SS80_send_status+0x32>
   14904:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14908:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   1490c:	86 81       	ldd	r24, Z+6	; 0x06
   1490e:	20 e1       	ldi	r18, 0x10	; 16
   14910:	82 9f       	mul	r24, r18
   14912:	c0 01       	movw	r24, r0
   14914:	11 24       	eor	r1, r1
   14916:	95 81       	ldd	r25, Z+5	; 0x05
   14918:	9f 70       	andi	r25, 0x0F	; 15
   1491a:	89 2b       	or	r24, r25
   1491c:	8c 83       	std	Y+4, r24	; 0x04
   1491e:	8f ef       	ldi	r24, 0xFF	; 255
   14920:	8d 83       	std	Y+5, r24	; 0x05
   14922:	83 81       	ldd	r24, Z+3	; 0x03
   14924:	86 ff       	sbrs	r24, 6
   14926:	02 c0       	rjmp	.+4      	; 0x1492c <SS80_send_status+0x60>
   14928:	92 e0       	ldi	r25, 0x02	; 2
   1492a:	9e 83       	std	Y+6, r25	; 0x06
   1492c:	82 ff       	sbrs	r24, 2
   1492e:	03 c0       	rjmp	.+6      	; 0x14936 <SS80_send_status+0x6a>
   14930:	9e 81       	ldd	r25, Y+6	; 0x06
   14932:	91 60       	ori	r25, 0x01	; 1
   14934:	9e 83       	std	Y+6, r25	; 0x06
   14936:	80 ff       	sbrs	r24, 0
   14938:	02 c0       	rjmp	.+4      	; 0x1493e <SS80_send_status+0x72>
   1493a:	82 e0       	ldi	r24, 0x02	; 2
   1493c:	88 87       	std	Y+8, r24	; 0x08
   1493e:	83 81       	ldd	r24, Z+3	; 0x03
   14940:	81 ff       	sbrs	r24, 1
   14942:	03 c0       	rjmp	.+6      	; 0x1494a <SS80_send_status+0x7e>
   14944:	88 85       	ldd	r24, Y+8	; 0x08
   14946:	82 60       	ori	r24, 0x02	; 2
   14948:	88 87       	std	Y+8, r24	; 0x08
   1494a:	83 81       	ldd	r24, Z+3	; 0x03
   1494c:	83 ff       	sbrs	r24, 3
   1494e:	02 c0       	rjmp	.+4      	; 0x14954 <SS80_send_status+0x88>
   14950:	88 e0       	ldi	r24, 0x08	; 8
   14952:	8a 87       	std	Y+10, r24	; 0x0a
   14954:	83 81       	ldd	r24, Z+3	; 0x03
   14956:	94 81       	ldd	r25, Z+4	; 0x04
   14958:	89 2b       	or	r24, r25
   1495a:	59 f4       	brne	.+22     	; 0x14972 <SS80_send_status+0xa6>
   1495c:	07 81       	ldd	r16, Z+7	; 0x07
   1495e:	10 85       	ldd	r17, Z+8	; 0x08
   14960:	21 85       	ldd	r18, Z+9	; 0x09
   14962:	32 85       	ldd	r19, Z+10	; 0x0a
   14964:	46 e0       	ldi	r20, 0x06	; 6
   14966:	50 e0       	ldi	r21, 0x00	; 0
   14968:	6a e0       	ldi	r22, 0x0A	; 10
   1496a:	70 e0       	ldi	r23, 0x00	; 0
   1496c:	c7 01       	movw	r24, r14
   1496e:	0e 94 00 bd 	call	0x17a00	; 0x17a00 <V2B_MSB>
   14972:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14976:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   1497a:	83 81       	ldd	r24, Z+3	; 0x03
   1497c:	94 81       	ldd	r25, Z+4	; 0x04
   1497e:	89 2b       	or	r24, r25
   14980:	11 f0       	breq	.+4      	; 0x14986 <SS80_send_status+0xba>
   14982:	81 e0       	ldi	r24, 0x01	; 1
   14984:	82 83       	std	Z+2, r24	; 0x02
   14986:	80 e0       	ldi	r24, 0x00	; 0
   14988:	91 e0       	ldi	r25, 0x01	; 1
   1498a:	99 8f       	std	Y+25, r25	; 0x19
   1498c:	88 8f       	std	Y+24, r24	; 0x18
   1498e:	ae 01       	movw	r20, r28
   14990:	48 5e       	subi	r20, 0xE8	; 232
   14992:	5f 4f       	sbci	r21, 0xFF	; 255
   14994:	64 e1       	ldi	r22, 0x14	; 20
   14996:	70 e0       	ldi	r23, 0x00	; 0
   14998:	c7 01       	movw	r24, r14
   1499a:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   1499e:	44 97       	sbiw	r24, 0x14	; 20
   149a0:	71 f0       	breq	.+28     	; 0x149be <SS80_send_status+0xf2>
   149a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149a6:	80 ff       	sbrs	r24, 0
   149a8:	0a c0       	rjmp	.+20     	; 0x149be <SS80_send_status+0xf2>
   149aa:	88 ed       	ldi	r24, 0xD8	; 216
   149ac:	93 e2       	ldi	r25, 0x23	; 35
   149ae:	a0 e0       	ldi	r26, 0x00	; 0
   149b0:	ed b7       	in	r30, 0x3d	; 61
   149b2:	fe b7       	in	r31, 0x3e	; 62
   149b4:	81 83       	std	Z+1, r24	; 0x01
   149b6:	92 83       	std	Z+2, r25	; 0x02
   149b8:	a3 83       	std	Z+3, r26	; 0x03
   149ba:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   149be:	88 8d       	ldd	r24, Y+24	; 0x18
   149c0:	99 8d       	ldd	r25, Y+25	; 0x19
   149c2:	88 27       	eor	r24, r24
   149c4:	90 7d       	andi	r25, 0xD0	; 208
   149c6:	69 96       	adiw	r28, 0x19	; 25
   149c8:	e6 e0       	ldi	r30, 0x06	; 6
   149ca:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

000149ce <SS80_describe>:
   149ce:	a7 e0       	ldi	r26, 0x07	; 7
   149d0:	b0 e0       	ldi	r27, 0x00	; 0
   149d2:	ed ee       	ldi	r30, 0xED	; 237
   149d4:	f4 ea       	ldi	r31, 0xA4	; 164
   149d6:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   149da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149de:	85 ff       	sbrs	r24, 5
   149e0:	0a c0       	rjmp	.+20     	; 0x149f6 <SS80_describe+0x28>
   149e2:	87 ec       	ldi	r24, 0xC7	; 199
   149e4:	93 e2       	ldi	r25, 0x23	; 35
   149e6:	a0 e0       	ldi	r26, 0x00	; 0
   149e8:	ed b7       	in	r30, 0x3d	; 61
   149ea:	fe b7       	in	r31, 0x3e	; 62
   149ec:	81 83       	std	Z+1, r24	; 0x01
   149ee:	92 83       	std	Z+2, r25	; 0x02
   149f0:	a3 83       	std	Z+3, r26	; 0x03
   149f2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   149f6:	1f 82       	std	Y+7, r1	; 0x07
   149f8:	1e 82       	std	Y+6, r1	; 0x06
   149fa:	ce 01       	movw	r24, r28
   149fc:	04 96       	adiw	r24, 0x04	; 4
   149fe:	85 dd       	rcall	.-1270   	; 0x1450a <SS80ControllerPack>
   14a00:	6c 81       	ldd	r22, Y+4	; 0x04
   14a02:	7d 81       	ldd	r23, Y+5	; 0x05
   14a04:	ae 01       	movw	r20, r28
   14a06:	4a 5f       	subi	r20, 0xFA	; 250
   14a08:	5f 4f       	sbci	r21, 0xFF	; 255
   14a0a:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   14a0e:	2c 81       	ldd	r18, Y+4	; 0x04
   14a10:	3d 81       	ldd	r19, Y+5	; 0x05
   14a12:	82 17       	cp	r24, r18
   14a14:	93 07       	cpc	r25, r19
   14a16:	39 f0       	breq	.+14     	; 0x14a26 <SS80_describe+0x58>
   14a18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a1c:	80 ff       	sbrs	r24, 0
   14a1e:	3c c0       	rjmp	.+120    	; 0x14a98 <SS80_describe+0xca>
   14a20:	84 ea       	ldi	r24, 0xA4	; 164
   14a22:	93 e2       	ldi	r25, 0x23	; 35
   14a24:	31 c0       	rjmp	.+98     	; 0x14a88 <SS80_describe+0xba>
   14a26:	1f 82       	std	Y+7, r1	; 0x07
   14a28:	1e 82       	std	Y+6, r1	; 0x06
   14a2a:	ce 01       	movw	r24, r28
   14a2c:	04 96       	adiw	r24, 0x04	; 4
   14a2e:	a9 dd       	rcall	.-1198   	; 0x14582 <SS80UnitPack>
   14a30:	6c 81       	ldd	r22, Y+4	; 0x04
   14a32:	7d 81       	ldd	r23, Y+5	; 0x05
   14a34:	ae 01       	movw	r20, r28
   14a36:	4a 5f       	subi	r20, 0xFA	; 250
   14a38:	5f 4f       	sbci	r21, 0xFF	; 255
   14a3a:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   14a3e:	2c 81       	ldd	r18, Y+4	; 0x04
   14a40:	3d 81       	ldd	r19, Y+5	; 0x05
   14a42:	82 17       	cp	r24, r18
   14a44:	93 07       	cpc	r25, r19
   14a46:	39 f0       	breq	.+14     	; 0x14a56 <SS80_describe+0x88>
   14a48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a4c:	80 ff       	sbrs	r24, 0
   14a4e:	24 c0       	rjmp	.+72     	; 0x14a98 <SS80_describe+0xca>
   14a50:	87 e8       	ldi	r24, 0x87	; 135
   14a52:	93 e2       	ldi	r25, 0x23	; 35
   14a54:	19 c0       	rjmp	.+50     	; 0x14a88 <SS80_describe+0xba>
   14a56:	80 e0       	ldi	r24, 0x00	; 0
   14a58:	91 e0       	ldi	r25, 0x01	; 1
   14a5a:	9f 83       	std	Y+7, r25	; 0x07
   14a5c:	8e 83       	std	Y+6, r24	; 0x06
   14a5e:	ce 01       	movw	r24, r28
   14a60:	04 96       	adiw	r24, 0x04	; 4
   14a62:	5b de       	rcall	.-842    	; 0x1471a <SS80VolumePack>
   14a64:	6c 81       	ldd	r22, Y+4	; 0x04
   14a66:	7d 81       	ldd	r23, Y+5	; 0x05
   14a68:	ae 01       	movw	r20, r28
   14a6a:	4a 5f       	subi	r20, 0xFA	; 250
   14a6c:	5f 4f       	sbci	r21, 0xFF	; 255
   14a6e:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   14a72:	2c 81       	ldd	r18, Y+4	; 0x04
   14a74:	3d 81       	ldd	r19, Y+5	; 0x05
   14a76:	82 17       	cp	r24, r18
   14a78:	93 07       	cpc	r25, r19
   14a7a:	99 f0       	breq	.+38     	; 0x14aa2 <SS80_describe+0xd4>
   14a7c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a80:	80 ff       	sbrs	r24, 0
   14a82:	0a c0       	rjmp	.+20     	; 0x14a98 <SS80_describe+0xca>
   14a84:	88 e6       	ldi	r24, 0x68	; 104
   14a86:	93 e2       	ldi	r25, 0x23	; 35
   14a88:	a0 e0       	ldi	r26, 0x00	; 0
   14a8a:	ed b7       	in	r30, 0x3d	; 61
   14a8c:	fe b7       	in	r31, 0x3e	; 62
   14a8e:	81 83       	std	Z+1, r24	; 0x01
   14a90:	92 83       	std	Z+2, r25	; 0x02
   14a92:	a3 83       	std	Z+3, r26	; 0x03
   14a94:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14a98:	8e 81       	ldd	r24, Y+6	; 0x06
   14a9a:	9f 81       	ldd	r25, Y+7	; 0x07
   14a9c:	88 27       	eor	r24, r24
   14a9e:	90 7d       	andi	r25, 0xD0	; 208
   14aa0:	02 c0       	rjmp	.+4      	; 0x14aa6 <SS80_describe+0xd8>
   14aa2:	80 e0       	ldi	r24, 0x00	; 0
   14aa4:	90 e0       	ldi	r25, 0x00	; 0
   14aa6:	27 96       	adiw	r28, 0x07	; 7
   14aa8:	e2 e0       	ldi	r30, 0x02	; 2
   14aaa:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00014aae <SS80_Check_Unit>:
   14aae:	00 d0       	rcall	.+0      	; 0x14ab0 <SS80_Check_Unit+0x2>
   14ab0:	00 d0       	rcall	.+0      	; 0x14ab2 <SS80_Check_Unit+0x4>
   14ab2:	1f 92       	push	r1
   14ab4:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14ab8:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14abc:	88 23       	and	r24, r24
   14abe:	c9 f0       	breq	.+50     	; 0x14af2 <SS80_Check_Unit+0x44>
   14ac0:	8f 30       	cpi	r24, 0x0F	; 15
   14ac2:	b9 f0       	breq	.+46     	; 0x14af2 <SS80_Check_Unit+0x44>
   14ac4:	23 81       	ldd	r18, Z+3	; 0x03
   14ac6:	34 81       	ldd	r19, Z+4	; 0x04
   14ac8:	20 64       	ori	r18, 0x40	; 64
   14aca:	34 83       	std	Z+4, r19	; 0x04
   14acc:	23 83       	std	Z+3, r18	; 0x03
   14ace:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14ad2:	90 ff       	sbrs	r25, 0
   14ad4:	0f c0       	rjmp	.+30     	; 0x14af4 <SS80_Check_Unit+0x46>
   14ad6:	90 e0       	ldi	r25, 0x00	; 0
   14ad8:	ed b7       	in	r30, 0x3d	; 61
   14ada:	fe b7       	in	r31, 0x3e	; 62
   14adc:	95 83       	std	Z+5, r25	; 0x05
   14ade:	84 83       	std	Z+4, r24	; 0x04
   14ae0:	80 e5       	ldi	r24, 0x50	; 80
   14ae2:	93 e2       	ldi	r25, 0x23	; 35
   14ae4:	a0 e0       	ldi	r26, 0x00	; 0
   14ae6:	81 83       	std	Z+1, r24	; 0x01
   14ae8:	92 83       	std	Z+2, r25	; 0x02
   14aea:	a3 83       	std	Z+3, r26	; 0x03
   14aec:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14af0:	01 c0       	rjmp	.+2      	; 0x14af4 <SS80_Check_Unit+0x46>
   14af2:	85 83       	std	Z+5, r24	; 0x05
   14af4:	0f 90       	pop	r0
   14af6:	0f 90       	pop	r0
   14af8:	0f 90       	pop	r0
   14afa:	0f 90       	pop	r0
   14afc:	0f 90       	pop	r0
   14afe:	08 95       	ret

00014b00 <SS80_Check_Volume>:
   14b00:	00 d0       	rcall	.+0      	; 0x14b02 <SS80_Check_Volume+0x2>
   14b02:	00 d0       	rcall	.+0      	; 0x14b04 <SS80_Check_Volume+0x4>
   14b04:	1f 92       	push	r1
   14b06:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14b0a:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14b0e:	88 23       	and	r24, r24
   14b10:	b9 f0       	breq	.+46     	; 0x14b40 <SS80_Check_Volume+0x40>
   14b12:	23 81       	ldd	r18, Z+3	; 0x03
   14b14:	34 81       	ldd	r19, Z+4	; 0x04
   14b16:	20 64       	ori	r18, 0x40	; 64
   14b18:	34 83       	std	Z+4, r19	; 0x04
   14b1a:	23 83       	std	Z+3, r18	; 0x03
   14b1c:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14b20:	90 ff       	sbrs	r25, 0
   14b22:	0f c0       	rjmp	.+30     	; 0x14b42 <SS80_Check_Volume+0x42>
   14b24:	90 e0       	ldi	r25, 0x00	; 0
   14b26:	ed b7       	in	r30, 0x3d	; 61
   14b28:	fe b7       	in	r31, 0x3e	; 62
   14b2a:	95 83       	std	Z+5, r25	; 0x05
   14b2c:	84 83       	std	Z+4, r24	; 0x04
   14b2e:	86 e3       	ldi	r24, 0x36	; 54
   14b30:	93 e2       	ldi	r25, 0x23	; 35
   14b32:	a0 e0       	ldi	r26, 0x00	; 0
   14b34:	81 83       	std	Z+1, r24	; 0x01
   14b36:	92 83       	std	Z+2, r25	; 0x02
   14b38:	a3 83       	std	Z+3, r26	; 0x03
   14b3a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14b3e:	01 c0       	rjmp	.+2      	; 0x14b42 <SS80_Check_Volume+0x42>
   14b40:	16 82       	std	Z+6, r1	; 0x06
   14b42:	0f 90       	pop	r0
   14b44:	0f 90       	pop	r0
   14b46:	0f 90       	pop	r0
   14b48:	0f 90       	pop	r0
   14b4a:	0f 90       	pop	r0
   14b4c:	08 95       	ret

00014b4e <SS80_Command_State>:
   14b4e:	2f 92       	push	r2
   14b50:	3f 92       	push	r3
   14b52:	4f 92       	push	r4
   14b54:	6f 92       	push	r6
   14b56:	7f 92       	push	r7
   14b58:	8f 92       	push	r8
   14b5a:	af 92       	push	r10
   14b5c:	bf 92       	push	r11
   14b5e:	cf 92       	push	r12
   14b60:	ef 92       	push	r14
   14b62:	ff 92       	push	r15
   14b64:	0f 93       	push	r16
   14b66:	1f 93       	push	r17
   14b68:	cf 93       	push	r28
   14b6a:	df 93       	push	r29
   14b6c:	cd b7       	in	r28, 0x3d	; 61
   14b6e:	de b7       	in	r29, 0x3e	; 62
   14b70:	66 97       	sbiw	r28, 0x16	; 22
   14b72:	0f b6       	in	r0, 0x3f	; 63
   14b74:	f8 94       	cli
   14b76:	de bf       	out	0x3e, r29	; 62
   14b78:	0f be       	out	0x3f, r0	; 63
   14b7a:	cd bf       	out	0x3d, r28	; 61
   14b7c:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14b80:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14b84:	81 81       	ldd	r24, Z+1	; 0x01
   14b86:	90 e0       	ldi	r25, 0x00	; 0
   14b88:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
   14b8c:	80 e0       	ldi	r24, 0x00	; 0
   14b8e:	91 e0       	ldi	r25, 0x01	; 1
   14b90:	99 87       	std	Y+9, r25	; 0x09
   14b92:	88 87       	std	Y+8, r24	; 0x08
   14b94:	ae 01       	movw	r20, r28
   14b96:	48 5f       	subi	r20, 0xF8	; 248
   14b98:	5f 4f       	sbci	r21, 0xFF	; 255
   14b9a:	60 e0       	ldi	r22, 0x00	; 0
   14b9c:	72 e0       	ldi	r23, 0x02	; 2
   14b9e:	80 ee       	ldi	r24, 0xE0	; 224
   14ba0:	9c e1       	ldi	r25, 0x1C	; 28
   14ba2:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   14ba6:	9b 87       	std	Y+11, r25	; 0x0b
   14ba8:	8a 87       	std	Y+10, r24	; 0x0a
   14baa:	88 85       	ldd	r24, Y+8	; 0x08
   14bac:	99 85       	ldd	r25, Y+9	; 0x09
   14bae:	9c 01       	movw	r18, r24
   14bb0:	22 27       	eor	r18, r18
   14bb2:	30 7d       	andi	r19, 0xD0	; 208
   14bb4:	23 2b       	or	r18, r19
   14bb6:	79 f0       	breq	.+30     	; 0x14bd6 <SS80_Command_State+0x88>
   14bb8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bbc:	80 ff       	sbrs	r24, 0
   14bbe:	21 c2       	rjmp	.+1090   	; 0x15002 <SS80_Command_State+0x4b4>
   14bc0:	80 e1       	ldi	r24, 0x10	; 16
   14bc2:	93 e2       	ldi	r25, 0x23	; 35
   14bc4:	a0 e0       	ldi	r26, 0x00	; 0
   14bc6:	ed b7       	in	r30, 0x3d	; 61
   14bc8:	fe b7       	in	r31, 0x3e	; 62
   14bca:	81 83       	std	Z+1, r24	; 0x01
   14bcc:	92 83       	std	Z+2, r25	; 0x02
   14bce:	a3 83       	std	Z+3, r26	; 0x03
   14bd0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14bd4:	16 c2       	rjmp	.+1068   	; 0x15002 <SS80_Command_State+0x4b4>
   14bd6:	2a 85       	ldd	r18, Y+10	; 0x0a
   14bd8:	3b 85       	ldd	r19, Y+11	; 0x0b
   14bda:	23 2b       	or	r18, r19
   14bdc:	09 f4       	brne	.+2      	; 0x14be0 <SS80_Command_State+0x92>
   14bde:	16 c2       	rjmp	.+1068   	; 0x1500c <SS80_Command_State+0x4be>
   14be0:	90 fd       	sbrc	r25, 0
   14be2:	0e c0       	rjmp	.+28     	; 0x14c00 <SS80_Command_State+0xb2>
   14be4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14be8:	80 ff       	sbrs	r24, 0
   14bea:	0a c0       	rjmp	.+20     	; 0x14c00 <SS80_Command_State+0xb2>
   14bec:	87 ef       	ldi	r24, 0xF7	; 247
   14bee:	92 e2       	ldi	r25, 0x22	; 34
   14bf0:	a0 e0       	ldi	r26, 0x00	; 0
   14bf2:	ed b7       	in	r30, 0x3d	; 61
   14bf4:	fe b7       	in	r31, 0x3e	; 62
   14bf6:	81 83       	std	Z+1, r24	; 0x01
   14bf8:	92 83       	std	Z+2, r25	; 0x02
   14bfa:	a3 83       	std	Z+3, r26	; 0x03
   14bfc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14c00:	e1 2c       	mov	r14, r1
   14c02:	f1 2c       	mov	r15, r1
   14c04:	8b ef       	ldi	r24, 0xFB	; 251
   14c06:	91 e2       	ldi	r25, 0x21	; 33
   14c08:	9c 01       	movw	r18, r24
   14c0a:	40 e0       	ldi	r20, 0x00	; 0
   14c0c:	2e 87       	std	Y+14, r18	; 0x0e
   14c0e:	3f 87       	std	Y+15, r19	; 0x0f
   14c10:	48 8b       	std	Y+16, r20	; 0x10
   14c12:	80 e2       	ldi	r24, 0x20	; 32
   14c14:	92 e2       	ldi	r25, 0x22	; 34
   14c16:	9c 01       	movw	r18, r24
   14c18:	40 e0       	ldi	r20, 0x00	; 0
   14c1a:	29 8b       	std	Y+17, r18	; 0x11
   14c1c:	3a 8b       	std	Y+18, r19	; 0x12
   14c1e:	4b 8b       	std	Y+19, r20	; 0x13
   14c20:	8a e3       	ldi	r24, 0x3A	; 58
   14c22:	92 e2       	ldi	r25, 0x22	; 34
   14c24:	9c 01       	movw	r18, r24
   14c26:	40 e0       	ldi	r20, 0x00	; 0
   14c28:	2c 8b       	std	Y+20, r18	; 0x14
   14c2a:	3d 8b       	std	Y+21, r19	; 0x15
   14c2c:	4e 8b       	std	Y+22, r20	; 0x16
   14c2e:	80 e5       	ldi	r24, 0x50	; 80
   14c30:	92 e2       	ldi	r25, 0x22	; 34
   14c32:	3c 01       	movw	r6, r24
   14c34:	81 2c       	mov	r8, r1
   14c36:	8e e5       	ldi	r24, 0x5E	; 94
   14c38:	92 e2       	ldi	r25, 0x22	; 34
   14c3a:	5c 01       	movw	r10, r24
   14c3c:	c1 2c       	mov	r12, r1
   14c3e:	8a e7       	ldi	r24, 0x7A	; 122
   14c40:	92 e2       	ldi	r25, 0x22	; 34
   14c42:	1c 01       	movw	r2, r24
   14c44:	41 2c       	mov	r4, r1
   14c46:	2a 85       	ldd	r18, Y+10	; 0x0a
   14c48:	3b 85       	ldd	r19, Y+11	; 0x0b
   14c4a:	87 01       	movw	r16, r14
   14c4c:	e2 16       	cp	r14, r18
   14c4e:	f3 06       	cpc	r15, r19
   14c50:	0c f0       	brlt	.+2      	; 0x14c54 <SS80_Command_State+0x106>
   14c52:	b6 c1       	rjmp	.+876    	; 0x14fc0 <SS80_Command_State+0x472>
   14c54:	0f 5f       	subi	r16, 0xFF	; 255
   14c56:	1f 4f       	sbci	r17, 0xFF	; 255
   14c58:	f7 01       	movw	r30, r14
   14c5a:	e0 52       	subi	r30, 0x20	; 32
   14c5c:	f3 4e       	sbci	r31, 0xE3	; 227
   14c5e:	80 81       	ld	r24, Z
   14c60:	28 2f       	mov	r18, r24
   14c62:	30 e0       	ldi	r19, 0x00	; 0
   14c64:	a9 01       	movw	r20, r18
   14c66:	40 52       	subi	r20, 0x20	; 32
   14c68:	51 09       	sbc	r21, r1
   14c6a:	40 31       	cpi	r20, 0x10	; 16
   14c6c:	51 05       	cpc	r21, r1
   14c6e:	98 f4       	brcc	.+38     	; 0x14c96 <SS80_Command_State+0x148>
   14c70:	80 52       	subi	r24, 0x20	; 32
   14c72:	1d df       	rcall	.-454    	; 0x14aae <SS80_Check_Unit>
   14c74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c78:	85 ff       	sbrs	r24, 5
   14c7a:	a0 c1       	rjmp	.+832    	; 0x14fbc <SS80_Command_State+0x46e>
   14c7c:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14c80:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14c84:	85 81       	ldd	r24, Z+5	; 0x05
   14c86:	90 e0       	ldi	r25, 0x00	; 0
   14c88:	ed b7       	in	r30, 0x3d	; 61
   14c8a:	fe b7       	in	r31, 0x3e	; 62
   14c8c:	95 83       	std	Z+5, r25	; 0x05
   14c8e:	84 83       	std	Z+4, r24	; 0x04
   14c90:	81 ee       	ldi	r24, 0xE1	; 225
   14c92:	92 e2       	ldi	r25, 0x22	; 34
   14c94:	19 c0       	rjmp	.+50     	; 0x14cc8 <SS80_Command_State+0x17a>
   14c96:	a9 01       	movw	r20, r18
   14c98:	40 54       	subi	r20, 0x40	; 64
   14c9a:	51 09       	sbc	r21, r1
   14c9c:	40 31       	cpi	r20, 0x10	; 16
   14c9e:	51 05       	cpc	r21, r1
   14ca0:	d0 f4       	brcc	.+52     	; 0x14cd6 <SS80_Command_State+0x188>
   14ca2:	80 54       	subi	r24, 0x40	; 64
   14ca4:	2d df       	rcall	.-422    	; 0x14b00 <SS80_Check_Volume>
   14ca6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14caa:	85 ff       	sbrs	r24, 5
   14cac:	87 c1       	rjmp	.+782    	; 0x14fbc <SS80_Command_State+0x46e>
   14cae:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14cb2:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14cb6:	86 81       	ldd	r24, Z+6	; 0x06
   14cb8:	90 e0       	ldi	r25, 0x00	; 0
   14cba:	ed b7       	in	r30, 0x3d	; 61
   14cbc:	fe b7       	in	r31, 0x3e	; 62
   14cbe:	95 83       	std	Z+5, r25	; 0x05
   14cc0:	84 83       	std	Z+4, r24	; 0x04
   14cc2:	28 ec       	ldi	r18, 0xC8	; 200
   14cc4:	32 e2       	ldi	r19, 0x22	; 34
   14cc6:	c9 01       	movw	r24, r18
   14cc8:	a0 e0       	ldi	r26, 0x00	; 0
   14cca:	81 83       	std	Z+1, r24	; 0x01
   14ccc:	92 83       	std	Z+2, r25	; 0x02
   14cce:	a3 83       	std	Z+3, r26	; 0x03
   14cd0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14cd4:	73 c1       	rjmp	.+742    	; 0x14fbc <SS80_Command_State+0x46e>
   14cd6:	21 15       	cp	r18, r1
   14cd8:	31 05       	cpc	r19, r1
   14cda:	79 f4       	brne	.+30     	; 0x14cfa <SS80_Command_State+0x1ac>
   14cdc:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14ce0:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14ce4:	81 e0       	ldi	r24, 0x01	; 1
   14ce6:	90 e0       	ldi	r25, 0x00	; 0
   14ce8:	91 83       	std	Z+1, r25	; 0x01
   14cea:	80 83       	st	Z, r24
   14cec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14cf0:	85 ff       	sbrs	r24, 5
   14cf2:	66 c1       	rjmp	.+716    	; 0x14fc0 <SS80_Command_State+0x472>
   14cf4:	80 eb       	ldi	r24, 0xB0	; 176
   14cf6:	92 e2       	ldi	r25, 0x22	; 34
   14cf8:	0f c0       	rjmp	.+30     	; 0x14d18 <SS80_Command_State+0x1ca>
   14cfa:	22 30       	cpi	r18, 0x02	; 2
   14cfc:	31 05       	cpc	r19, r1
   14cfe:	a9 f4       	brne	.+42     	; 0x14d2a <SS80_Command_State+0x1dc>
   14d00:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14d04:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14d08:	31 83       	std	Z+1, r19	; 0x01
   14d0a:	20 83       	st	Z, r18
   14d0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d10:	85 ff       	sbrs	r24, 5
   14d12:	56 c1       	rjmp	.+684    	; 0x14fc0 <SS80_Command_State+0x472>
   14d14:	87 e9       	ldi	r24, 0x97	; 151
   14d16:	92 e2       	ldi	r25, 0x22	; 34
   14d18:	a0 e0       	ldi	r26, 0x00	; 0
   14d1a:	ed b7       	in	r30, 0x3d	; 61
   14d1c:	fe b7       	in	r31, 0x3e	; 62
   14d1e:	81 83       	std	Z+1, r24	; 0x01
   14d20:	92 83       	std	Z+2, r25	; 0x02
   14d22:	a3 83       	std	Z+3, r26	; 0x03
   14d24:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14d28:	4b c1       	rjmp	.+662    	; 0x14fc0 <SS80_Command_State+0x472>
   14d2a:	20 31       	cpi	r18, 0x10	; 16
   14d2c:	31 05       	cpc	r19, r1
   14d2e:	b1 f5       	brne	.+108    	; 0x14d9c <SS80_Command_State+0x24e>
   14d30:	20 91 5d 19 	lds	r18, 0x195D	; 0x80195d <SS80s>
   14d34:	30 91 5e 19 	lds	r19, 0x195E	; 0x80195e <SS80s+0x1>
   14d38:	3d 87       	std	Y+13, r19	; 0x0d
   14d3a:	2c 87       	std	Y+12, r18	; 0x0c
   14d3c:	46 e0       	ldi	r20, 0x06	; 6
   14d3e:	50 e0       	ldi	r21, 0x00	; 0
   14d40:	b8 01       	movw	r22, r16
   14d42:	80 ee       	ldi	r24, 0xE0	; 224
   14d44:	9c e1       	ldi	r25, 0x1C	; 28
   14d46:	0e 94 29 bd 	call	0x17a52	; 0x17a52 <B2V_MSB>
   14d4a:	ec 85       	ldd	r30, Y+12	; 0x0c
   14d4c:	fd 85       	ldd	r31, Y+13	; 0x0d
   14d4e:	67 83       	std	Z+7, r22	; 0x07
   14d50:	70 87       	std	Z+8, r23	; 0x08
   14d52:	81 87       	std	Z+9, r24	; 0x09
   14d54:	92 87       	std	Z+10, r25	; 0x0a
   14d56:	87 01       	movw	r16, r14
   14d58:	09 5f       	subi	r16, 0xF9	; 249
   14d5a:	1f 4f       	sbci	r17, 0xFF	; 255
   14d5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d60:	85 ff       	sbrs	r24, 5
   14d62:	2c c1       	rjmp	.+600    	; 0x14fbc <SS80_Command_State+0x46e>
   14d64:	20 91 5d 19 	lds	r18, 0x195D	; 0x80195d <SS80s>
   14d68:	30 91 5e 19 	lds	r19, 0x195E	; 0x80195e <SS80s+0x1>
   14d6c:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <SS80p>
   14d70:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <SS80p+0x1>
   14d74:	fc 01       	movw	r30, r24
   14d76:	a0 89       	ldd	r26, Z+16	; 0x10
   14d78:	b1 89       	ldd	r27, Z+17	; 0x11
   14d7a:	f9 01       	movw	r30, r18
   14d7c:	27 81       	ldd	r18, Z+7	; 0x07
   14d7e:	30 85       	ldd	r19, Z+8	; 0x08
   14d80:	41 85       	ldd	r20, Z+9	; 0x09
   14d82:	52 85       	ldd	r21, Z+10	; 0x0a
   14d84:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
   14d88:	ed b7       	in	r30, 0x3d	; 61
   14d8a:	fe b7       	in	r31, 0x3e	; 62
   14d8c:	64 83       	std	Z+4, r22	; 0x04
   14d8e:	75 83       	std	Z+5, r23	; 0x05
   14d90:	86 83       	std	Z+6, r24	; 0x06
   14d92:	97 83       	std	Z+7, r25	; 0x07
   14d94:	21 82       	std	Z+1, r2	; 0x01
   14d96:	32 82       	std	Z+2, r3	; 0x02
   14d98:	43 82       	std	Z+3, r4	; 0x03
   14d9a:	2e c0       	rjmp	.+92     	; 0x14df8 <SS80_Command_State+0x2aa>
   14d9c:	28 31       	cpi	r18, 0x18	; 24
   14d9e:	31 05       	cpc	r19, r1
   14da0:	71 f5       	brne	.+92     	; 0x14dfe <SS80_Command_State+0x2b0>
   14da2:	20 91 5d 19 	lds	r18, 0x195D	; 0x80195d <SS80s>
   14da6:	30 91 5e 19 	lds	r19, 0x195E	; 0x80195e <SS80s+0x1>
   14daa:	3d 87       	std	Y+13, r19	; 0x0d
   14dac:	2c 87       	std	Y+12, r18	; 0x0c
   14dae:	44 e0       	ldi	r20, 0x04	; 4
   14db0:	50 e0       	ldi	r21, 0x00	; 0
   14db2:	b8 01       	movw	r22, r16
   14db4:	80 ee       	ldi	r24, 0xE0	; 224
   14db6:	9c e1       	ldi	r25, 0x1C	; 28
   14db8:	0e 94 29 bd 	call	0x17a52	; 0x17a52 <B2V_MSB>
   14dbc:	ec 85       	ldd	r30, Y+12	; 0x0c
   14dbe:	fd 85       	ldd	r31, Y+13	; 0x0d
   14dc0:	63 87       	std	Z+11, r22	; 0x0b
   14dc2:	74 87       	std	Z+12, r23	; 0x0c
   14dc4:	85 87       	std	Z+13, r24	; 0x0d
   14dc6:	96 87       	std	Z+14, r25	; 0x0e
   14dc8:	87 01       	movw	r16, r14
   14dca:	0b 5f       	subi	r16, 0xFB	; 251
   14dcc:	1f 4f       	sbci	r17, 0xFF	; 255
   14dce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14dd2:	85 ff       	sbrs	r24, 5
   14dd4:	f3 c0       	rjmp	.+486    	; 0x14fbc <SS80_Command_State+0x46e>
   14dd6:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14dda:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14dde:	83 85       	ldd	r24, Z+11	; 0x0b
   14de0:	94 85       	ldd	r25, Z+12	; 0x0c
   14de2:	a5 85       	ldd	r26, Z+13	; 0x0d
   14de4:	b6 85       	ldd	r27, Z+14	; 0x0e
   14de6:	ed b7       	in	r30, 0x3d	; 61
   14de8:	fe b7       	in	r31, 0x3e	; 62
   14dea:	84 83       	std	Z+4, r24	; 0x04
   14dec:	95 83       	std	Z+5, r25	; 0x05
   14dee:	a6 83       	std	Z+6, r26	; 0x06
   14df0:	b7 83       	std	Z+7, r27	; 0x07
   14df2:	a1 82       	std	Z+1, r10	; 0x01
   14df4:	b2 82       	std	Z+2, r11	; 0x02
   14df6:	c3 82       	std	Z+3, r12	; 0x03
   14df8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14dfc:	df c0       	rjmp	.+446    	; 0x14fbc <SS80_Command_State+0x46e>
   14dfe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14e06:	24 33       	cpi	r18, 0x34	; 52
   14e08:	31 05       	cpc	r19, r1
   14e0a:	41 f4       	brne	.+16     	; 0x14e1c <SS80_Command_State+0x2ce>
   14e0c:	85 ff       	sbrs	r24, 5
   14e0e:	d6 c0       	rjmp	.+428    	; 0x14fbc <SS80_Command_State+0x46e>
   14e10:	ed b7       	in	r30, 0x3d	; 61
   14e12:	fe b7       	in	r31, 0x3e	; 62
   14e14:	61 82       	std	Z+1, r6	; 0x01
   14e16:	72 82       	std	Z+2, r7	; 0x02
   14e18:	83 82       	std	Z+3, r8	; 0x03
   14e1a:	2b c0       	rjmp	.+86     	; 0x14e72 <SS80_Command_State+0x324>
   14e1c:	29 33       	cpi	r18, 0x39	; 57
   14e1e:	31 05       	cpc	r19, r1
   14e20:	49 f4       	brne	.+18     	; 0x14e34 <SS80_Command_State+0x2e6>
   14e22:	87 01       	movw	r16, r14
   14e24:	0d 5f       	subi	r16, 0xFD	; 253
   14e26:	1f 4f       	sbci	r17, 0xFF	; 255
   14e28:	85 ff       	sbrs	r24, 5
   14e2a:	c8 c0       	rjmp	.+400    	; 0x14fbc <SS80_Command_State+0x46e>
   14e2c:	2c 89       	ldd	r18, Y+20	; 0x14
   14e2e:	3d 89       	ldd	r19, Y+21	; 0x15
   14e30:	4e 89       	ldd	r20, Y+22	; 0x16
   14e32:	1a c0       	rjmp	.+52     	; 0x14e68 <SS80_Command_State+0x31a>
   14e34:	2b 33       	cpi	r18, 0x3B	; 59
   14e36:	31 05       	cpc	r19, r1
   14e38:	49 f4       	brne	.+18     	; 0x14e4c <SS80_Command_State+0x2fe>
   14e3a:	87 01       	movw	r16, r14
   14e3c:	0e 5f       	subi	r16, 0xFE	; 254
   14e3e:	1f 4f       	sbci	r17, 0xFF	; 255
   14e40:	85 ff       	sbrs	r24, 5
   14e42:	bc c0       	rjmp	.+376    	; 0x14fbc <SS80_Command_State+0x46e>
   14e44:	29 89       	ldd	r18, Y+17	; 0x11
   14e46:	3a 89       	ldd	r19, Y+18	; 0x12
   14e48:	4b 89       	ldd	r20, Y+19	; 0x13
   14e4a:	0e c0       	rjmp	.+28     	; 0x14e68 <SS80_Command_State+0x31a>
   14e4c:	28 34       	cpi	r18, 0x48	; 72
   14e4e:	31 05       	cpc	r19, r1
   14e50:	99 f4       	brne	.+38     	; 0x14e78 <SS80_Command_State+0x32a>
   14e52:	87 01       	movw	r16, r14
   14e54:	0e 5f       	subi	r16, 0xFE	; 254
   14e56:	1f 4f       	sbci	r17, 0xFF	; 255
   14e58:	80 73       	andi	r24, 0x30	; 48
   14e5a:	99 27       	eor	r25, r25
   14e5c:	89 2b       	or	r24, r25
   14e5e:	09 f4       	brne	.+2      	; 0x14e62 <SS80_Command_State+0x314>
   14e60:	ad c0       	rjmp	.+346    	; 0x14fbc <SS80_Command_State+0x46e>
   14e62:	2e 85       	ldd	r18, Y+14	; 0x0e
   14e64:	3f 85       	ldd	r19, Y+15	; 0x0f
   14e66:	48 89       	ldd	r20, Y+16	; 0x10
   14e68:	ed b7       	in	r30, 0x3d	; 61
   14e6a:	fe b7       	in	r31, 0x3e	; 62
   14e6c:	21 83       	std	Z+1, r18	; 0x01
   14e6e:	32 83       	std	Z+2, r19	; 0x02
   14e70:	43 83       	std	Z+3, r20	; 0x03
   14e72:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14e76:	a2 c0       	rjmp	.+324    	; 0x14fbc <SS80_Command_State+0x46e>
   14e78:	24 30       	cpi	r18, 0x04	; 4
   14e7a:	31 05       	cpc	r19, r1
   14e7c:	41 f4       	brne	.+16     	; 0x14e8e <SS80_Command_State+0x340>
   14e7e:	80 73       	andi	r24, 0x30	; 48
   14e80:	99 27       	eor	r25, r25
   14e82:	89 2b       	or	r24, r25
   14e84:	09 f4       	brne	.+2      	; 0x14e88 <SS80_Command_State+0x33a>
   14e86:	9c c0       	rjmp	.+312    	; 0x14fc0 <SS80_Command_State+0x472>
   14e88:	8a ed       	ldi	r24, 0xDA	; 218
   14e8a:	91 e2       	ldi	r25, 0x21	; 33
   14e8c:	45 cf       	rjmp	.-374    	; 0x14d18 <SS80_Command_State+0x1ca>
   14e8e:	2e 30       	cpi	r18, 0x0E	; 14
   14e90:	31 05       	cpc	r19, r1
   14e92:	29 f4       	brne	.+10     	; 0x14e9e <SS80_Command_State+0x350>
   14e94:	85 ff       	sbrs	r24, 5
   14e96:	94 c0       	rjmp	.+296    	; 0x14fc0 <SS80_Command_State+0x472>
   14e98:	84 ec       	ldi	r24, 0xC4	; 196
   14e9a:	91 e2       	ldi	r25, 0x21	; 33
   14e9c:	3d cf       	rjmp	.-390    	; 0x14d18 <SS80_Command_State+0x1ca>
   14e9e:	2f 30       	cpi	r18, 0x0F	; 15
   14ea0:	31 05       	cpc	r19, r1
   14ea2:	29 f4       	brne	.+10     	; 0x14eae <SS80_Command_State+0x360>
   14ea4:	85 ff       	sbrs	r24, 5
   14ea6:	8c c0       	rjmp	.+280    	; 0x14fc0 <SS80_Command_State+0x472>
   14ea8:	87 ea       	ldi	r24, 0xA7	; 167
   14eaa:	91 e2       	ldi	r25, 0x21	; 33
   14eac:	35 cf       	rjmp	.-406    	; 0x14d18 <SS80_Command_State+0x1ca>
   14eae:	21 33       	cpi	r18, 0x31	; 49
   14eb0:	31 05       	cpc	r19, r1
   14eb2:	59 f4       	brne	.+22     	; 0x14eca <SS80_Command_State+0x37c>
   14eb4:	87 01       	movw	r16, r14
   14eb6:	0d 5f       	subi	r16, 0xFD	; 253
   14eb8:	1f 4f       	sbci	r17, 0xFF	; 255
   14eba:	80 73       	andi	r24, 0x30	; 48
   14ebc:	99 27       	eor	r25, r25
   14ebe:	89 2b       	or	r24, r25
   14ec0:	09 f4       	brne	.+2      	; 0x14ec4 <SS80_Command_State+0x376>
   14ec2:	7e c0       	rjmp	.+252    	; 0x14fc0 <SS80_Command_State+0x472>
   14ec4:	8b e8       	ldi	r24, 0x8B	; 139
   14ec6:	91 e2       	ldi	r25, 0x21	; 33
   14ec8:	27 cf       	rjmp	.-434    	; 0x14d18 <SS80_Command_State+0x1ca>
   14eca:	25 33       	cpi	r18, 0x35	; 53
   14ecc:	31 05       	cpc	r19, r1
   14ece:	69 f4       	brne	.+26     	; 0x14eea <SS80_Command_State+0x39c>
   14ed0:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14ed4:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14ed8:	24 e0       	ldi	r18, 0x04	; 4
   14eda:	30 e0       	ldi	r19, 0x00	; 0
   14edc:	31 83       	std	Z+1, r19	; 0x01
   14ede:	20 83       	st	Z, r18
   14ee0:	85 ff       	sbrs	r24, 5
   14ee2:	6e c0       	rjmp	.+220    	; 0x14fc0 <SS80_Command_State+0x472>
   14ee4:	8a e7       	ldi	r24, 0x7A	; 122
   14ee6:	91 e2       	ldi	r25, 0x21	; 33
   14ee8:	17 cf       	rjmp	.-466    	; 0x14d18 <SS80_Command_State+0x1ca>
   14eea:	27 33       	cpi	r18, 0x37	; 55
   14eec:	31 05       	cpc	r19, r1
   14eee:	59 f4       	brne	.+22     	; 0x14f06 <SS80_Command_State+0x3b8>
   14ef0:	87 01       	movw	r16, r14
   14ef2:	0d 5f       	subi	r16, 0xFD	; 253
   14ef4:	1f 4f       	sbci	r17, 0xFF	; 255
   14ef6:	80 73       	andi	r24, 0x30	; 48
   14ef8:	99 27       	eor	r25, r25
   14efa:	89 2b       	or	r24, r25
   14efc:	09 f4       	brne	.+2      	; 0x14f00 <SS80_Command_State+0x3b2>
   14efe:	60 c0       	rjmp	.+192    	; 0x14fc0 <SS80_Command_State+0x472>
   14f00:	8c e5       	ldi	r24, 0x5C	; 92
   14f02:	91 e2       	ldi	r25, 0x21	; 33
   14f04:	09 cf       	rjmp	.-494    	; 0x14d18 <SS80_Command_State+0x1ca>
   14f06:	2e 33       	cpi	r18, 0x3E	; 62
   14f08:	31 05       	cpc	r19, r1
   14f0a:	c1 f4       	brne	.+48     	; 0x14f3c <SS80_Command_State+0x3ee>
   14f0c:	80 73       	andi	r24, 0x30	; 48
   14f0e:	99 27       	eor	r25, r25
   14f10:	89 2b       	or	r24, r25
   14f12:	81 f0       	breq	.+32     	; 0x14f34 <SS80_Command_State+0x3e6>
   14f14:	8d e3       	ldi	r24, 0x3D	; 61
   14f16:	91 e2       	ldi	r25, 0x21	; 33
   14f18:	a0 e0       	ldi	r26, 0x00	; 0
   14f1a:	ed b7       	in	r30, 0x3d	; 61
   14f1c:	fe b7       	in	r31, 0x3e	; 62
   14f1e:	81 83       	std	Z+1, r24	; 0x01
   14f20:	92 83       	std	Z+2, r25	; 0x02
   14f22:	a3 83       	std	Z+3, r26	; 0x03
   14f24:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14f28:	69 e7       	ldi	r22, 0x79	; 121
   14f2a:	70 e1       	ldi	r23, 0x10	; 16
   14f2c:	c8 01       	movw	r24, r16
   14f2e:	80 52       	subi	r24, 0x20	; 32
   14f30:	93 4e       	sbci	r25, 0xE3	; 227
   14f32:	69 dc       	rcall	.-1838   	; 0x14806 <SS80_display_extended_status>
   14f34:	87 01       	movw	r16, r14
   14f36:	07 5f       	subi	r16, 0xF7	; 247
   14f38:	1f 4f       	sbci	r17, 0xFF	; 255
   14f3a:	42 c0       	rjmp	.+132    	; 0x14fc0 <SS80_Command_State+0x472>
   14f3c:	2c 34       	cpi	r18, 0x4C	; 76
   14f3e:	31 05       	cpc	r19, r1
   14f40:	39 f4       	brne	.+14     	; 0x14f50 <SS80_Command_State+0x402>
   14f42:	80 73       	andi	r24, 0x30	; 48
   14f44:	99 27       	eor	r25, r25
   14f46:	89 2b       	or	r24, r25
   14f48:	d9 f1       	breq	.+118    	; 0x14fc0 <SS80_Command_State+0x472>
   14f4a:	82 e2       	ldi	r24, 0x22	; 34
   14f4c:	91 e2       	ldi	r25, 0x21	; 33
   14f4e:	e4 ce       	rjmp	.-568    	; 0x14d18 <SS80_Command_State+0x1ca>
   14f50:	2d 34       	cpi	r18, 0x4D	; 77
   14f52:	31 05       	cpc	r19, r1
   14f54:	39 f4       	brne	.+14     	; 0x14f64 <SS80_Command_State+0x416>
   14f56:	80 73       	andi	r24, 0x30	; 48
   14f58:	99 27       	eor	r25, r25
   14f5a:	89 2b       	or	r24, r25
   14f5c:	89 f1       	breq	.+98     	; 0x14fc0 <SS80_Command_State+0x472>
   14f5e:	89 e0       	ldi	r24, 0x09	; 9
   14f60:	91 e2       	ldi	r25, 0x21	; 33
   14f62:	da ce       	rjmp	.-588    	; 0x14d18 <SS80_Command_State+0x1ca>
   14f64:	2d 30       	cpi	r18, 0x0D	; 13
   14f66:	31 05       	cpc	r19, r1
   14f68:	69 f4       	brne	.+26     	; 0x14f84 <SS80_Command_State+0x436>
   14f6a:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   14f6e:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   14f72:	23 e0       	ldi	r18, 0x03	; 3
   14f74:	30 e0       	ldi	r19, 0x00	; 0
   14f76:	31 83       	std	Z+1, r19	; 0x01
   14f78:	20 83       	st	Z, r18
   14f7a:	85 ff       	sbrs	r24, 5
   14f7c:	21 c0       	rjmp	.+66     	; 0x14fc0 <SS80_Command_State+0x472>
   14f7e:	82 ef       	ldi	r24, 0xF2	; 242
   14f80:	90 e2       	ldi	r25, 0x20	; 32
   14f82:	ca ce       	rjmp	.-620    	; 0x14d18 <SS80_Command_State+0x1ca>
   14f84:	23 33       	cpi	r18, 0x33	; 51
   14f86:	31 05       	cpc	r19, r1
   14f88:	51 f4       	brne	.+20     	; 0x14f9e <SS80_Command_State+0x450>
   14f8a:	87 01       	movw	r16, r14
   14f8c:	0c 5f       	subi	r16, 0xFC	; 252
   14f8e:	1f 4f       	sbci	r17, 0xFF	; 255
   14f90:	80 73       	andi	r24, 0x30	; 48
   14f92:	99 27       	eor	r25, r25
   14f94:	89 2b       	or	r24, r25
   14f96:	a1 f0       	breq	.+40     	; 0x14fc0 <SS80_Command_State+0x472>
   14f98:	8f ec       	ldi	r24, 0xCF	; 207
   14f9a:	90 e2       	ldi	r25, 0x20	; 32
   14f9c:	bd ce       	rjmp	.-646    	; 0x14d18 <SS80_Command_State+0x1ca>
   14f9e:	80 ff       	sbrs	r24, 0
   14fa0:	28 c0       	rjmp	.+80     	; 0x14ff2 <SS80_Command_State+0x4a4>
   14fa2:	ed b7       	in	r30, 0x3d	; 61
   14fa4:	fe b7       	in	r31, 0x3e	; 62
   14fa6:	35 83       	std	Z+5, r19	; 0x05
   14fa8:	24 83       	std	Z+4, r18	; 0x04
   14faa:	8f ea       	ldi	r24, 0xAF	; 175
   14fac:	90 e2       	ldi	r25, 0x20	; 32
   14fae:	a0 e0       	ldi	r26, 0x00	; 0
   14fb0:	81 83       	std	Z+1, r24	; 0x01
   14fb2:	92 83       	std	Z+2, r25	; 0x02
   14fb4:	a3 83       	std	Z+3, r26	; 0x03
   14fb6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14fba:	02 c0       	rjmp	.+4      	; 0x14fc0 <SS80_Command_State+0x472>
   14fbc:	78 01       	movw	r14, r16
   14fbe:	43 ce       	rjmp	.-890    	; 0x14c46 <SS80_Command_State+0xf8>
   14fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
   14fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
   14fc4:	08 17       	cp	r16, r24
   14fc6:	19 07       	cpc	r17, r25
   14fc8:	a1 f0       	breq	.+40     	; 0x14ff2 <SS80_Command_State+0x4a4>
   14fca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fce:	80 ff       	sbrs	r24, 0
   14fd0:	10 c0       	rjmp	.+32     	; 0x14ff2 <SS80_Command_State+0x4a4>
   14fd2:	2a 85       	ldd	r18, Y+10	; 0x0a
   14fd4:	3b 85       	ldd	r19, Y+11	; 0x0b
   14fd6:	ed b7       	in	r30, 0x3d	; 61
   14fd8:	fe b7       	in	r31, 0x3e	; 62
   14fda:	37 83       	std	Z+7, r19	; 0x07
   14fdc:	26 83       	std	Z+6, r18	; 0x06
   14fde:	15 83       	std	Z+5, r17	; 0x05
   14fe0:	04 83       	std	Z+4, r16	; 0x04
   14fe2:	87 e7       	ldi	r24, 0x77	; 119
   14fe4:	90 e2       	ldi	r25, 0x20	; 32
   14fe6:	a0 e0       	ldi	r26, 0x00	; 0
   14fe8:	81 83       	std	Z+1, r24	; 0x01
   14fea:	92 83       	std	Z+2, r25	; 0x02
   14fec:	a3 83       	std	Z+3, r26	; 0x03
   14fee:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   14ff2:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   14ff6:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   14ffa:	81 81       	ldd	r24, Z+1	; 0x01
   14ffc:	90 e0       	ldi	r25, 0x00	; 0
   14ffe:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   15002:	88 85       	ldd	r24, Y+8	; 0x08
   15004:	99 85       	ldd	r25, Y+9	; 0x09
   15006:	88 27       	eor	r24, r24
   15008:	90 7d       	andi	r25, 0xD0	; 208
   1500a:	02 c0       	rjmp	.+4      	; 0x15010 <SS80_Command_State+0x4c2>
   1500c:	80 e0       	ldi	r24, 0x00	; 0
   1500e:	90 e0       	ldi	r25, 0x00	; 0
   15010:	66 96       	adiw	r28, 0x16	; 22
   15012:	0f b6       	in	r0, 0x3f	; 63
   15014:	f8 94       	cli
   15016:	de bf       	out	0x3e, r29	; 62
   15018:	0f be       	out	0x3f, r0	; 63
   1501a:	cd bf       	out	0x3d, r28	; 61
   1501c:	df 91       	pop	r29
   1501e:	cf 91       	pop	r28
   15020:	1f 91       	pop	r17
   15022:	0f 91       	pop	r16
   15024:	ff 90       	pop	r15
   15026:	ef 90       	pop	r14
   15028:	cf 90       	pop	r12
   1502a:	bf 90       	pop	r11
   1502c:	af 90       	pop	r10
   1502e:	8f 90       	pop	r8
   15030:	7f 90       	pop	r7
   15032:	6f 90       	pop	r6
   15034:	4f 90       	pop	r4
   15036:	3f 90       	pop	r3
   15038:	2f 90       	pop	r2
   1503a:	08 95       	ret

0001503c <SS80_cmd_seek>:
   1503c:	a7 e0       	ldi	r26, 0x07	; 7
   1503e:	b0 e0       	ldi	r27, 0x00	; 0
   15040:	e4 e2       	ldi	r30, 0x24	; 36
   15042:	f8 ea       	ldi	r31, 0xA8	; 168
   15044:	0c 94 5a e2 	jmp	0x1c4b4	; 0x1c4b4 <__prologue_saves__+0x4>
   15048:	c0 91 5d 19 	lds	r28, 0x195D	; 0x80195d <SS80s>
   1504c:	d0 91 5e 19 	lds	r29, 0x195E	; 0x80195e <SS80s+0x1>
   15050:	8f 80       	ldd	r8, Y+7	; 0x07
   15052:	98 84       	ldd	r9, Y+8	; 0x08
   15054:	a9 84       	ldd	r10, Y+9	; 0x09
   15056:	ba 84       	ldd	r11, Y+10	; 0x0a
   15058:	00 91 5f 19 	lds	r16, 0x195F	; 0x80195f <SS80p>
   1505c:	10 91 60 19 	lds	r17, 0x1960	; 0x801960 <SS80p+0x1>
   15060:	f8 01       	movw	r30, r16
   15062:	c0 88       	ldd	r12, Z+16	; 0x10
   15064:	d1 88       	ldd	r13, Z+17	; 0x11
   15066:	e1 2c       	mov	r14, r1
   15068:	f1 2c       	mov	r15, r1
   1506a:	6b 85       	ldd	r22, Y+11	; 0x0b
   1506c:	7c 85       	ldd	r23, Y+12	; 0x0c
   1506e:	8d 85       	ldd	r24, Y+13	; 0x0d
   15070:	9e 85       	ldd	r25, Y+14	; 0x0e
   15072:	a7 01       	movw	r20, r14
   15074:	96 01       	movw	r18, r12
   15076:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
   1507a:	da 01       	movw	r26, r20
   1507c:	c9 01       	movw	r24, r18
   1507e:	88 0d       	add	r24, r8
   15080:	99 1d       	adc	r25, r9
   15082:	aa 1d       	adc	r26, r10
   15084:	bb 1d       	adc	r27, r11
   15086:	f8 01       	movw	r30, r16
   15088:	46 a0       	ldd	r4, Z+38	; 0x26
   1508a:	57 a0       	ldd	r5, Z+39	; 0x27
   1508c:	60 a4       	ldd	r6, Z+40	; 0x28
   1508e:	71 a4       	ldd	r7, Z+41	; 0x29
   15090:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   15094:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15098:	48 16       	cp	r4, r24
   1509a:	59 06       	cpc	r5, r25
   1509c:	6a 06       	cpc	r6, r26
   1509e:	7b 06       	cpc	r7, r27
   150a0:	f0 f4       	brcc	.+60     	; 0x150de <SS80_cmd_seek+0xa2>
   150a2:	81 e0       	ldi	r24, 0x01	; 1
   150a4:	8a 83       	std	Y+2, r24	; 0x02
   150a6:	8b 81       	ldd	r24, Y+3	; 0x03
   150a8:	9c 81       	ldd	r25, Y+4	; 0x04
   150aa:	84 60       	ori	r24, 0x04	; 4
   150ac:	9c 83       	std	Y+4, r25	; 0x04
   150ae:	8b 83       	std	Y+3, r24	; 0x03
   150b0:	40 ff       	sbrs	r20, 0
   150b2:	31 c0       	rjmp	.+98     	; 0x15116 <SS80_cmd_seek+0xda>
   150b4:	a0 89       	ldd	r26, Z+16	; 0x10
   150b6:	b1 89       	ldd	r27, Z+17	; 0x11
   150b8:	a5 01       	movw	r20, r10
   150ba:	94 01       	movw	r18, r8
   150bc:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
   150c0:	ed b7       	in	r30, 0x3d	; 61
   150c2:	fe b7       	in	r31, 0x3e	; 62
   150c4:	64 83       	std	Z+4, r22	; 0x04
   150c6:	75 83       	std	Z+5, r23	; 0x05
   150c8:	86 83       	std	Z+6, r24	; 0x06
   150ca:	97 83       	std	Z+7, r25	; 0x07
   150cc:	84 e3       	ldi	r24, 0x34	; 52
   150ce:	9f e1       	ldi	r25, 0x1F	; 31
   150d0:	a0 e0       	ldi	r26, 0x00	; 0
   150d2:	81 83       	std	Z+1, r24	; 0x01
   150d4:	92 83       	std	Z+2, r25	; 0x02
   150d6:	a3 83       	std	Z+3, r26	; 0x03
   150d8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   150dc:	1c c0       	rjmp	.+56     	; 0x15116 <SS80_cmd_seek+0xda>
   150de:	ca 01       	movw	r24, r20
   150e0:	80 72       	andi	r24, 0x20	; 32
   150e2:	99 27       	eor	r25, r25
   150e4:	45 ff       	sbrs	r20, 5
   150e6:	19 c0       	rjmp	.+50     	; 0x1511a <SS80_cmd_seek+0xde>
   150e8:	a5 01       	movw	r20, r10
   150ea:	94 01       	movw	r18, r8
   150ec:	c7 01       	movw	r24, r14
   150ee:	b6 01       	movw	r22, r12
   150f0:	0e 94 a9 e1 	call	0x1c352	; 0x1c352 <__mulsi3>
   150f4:	ed b7       	in	r30, 0x3d	; 61
   150f6:	fe b7       	in	r31, 0x3e	; 62
   150f8:	64 83       	std	Z+4, r22	; 0x04
   150fa:	75 83       	std	Z+5, r23	; 0x05
   150fc:	86 83       	std	Z+6, r24	; 0x06
   150fe:	97 83       	std	Z+7, r25	; 0x07
   15100:	80 e2       	ldi	r24, 0x20	; 32
   15102:	9f e1       	ldi	r25, 0x1F	; 31
   15104:	a0 e0       	ldi	r26, 0x00	; 0
   15106:	81 83       	std	Z+1, r24	; 0x01
   15108:	92 83       	std	Z+2, r25	; 0x02
   1510a:	a3 83       	std	Z+3, r26	; 0x03
   1510c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15110:	80 e0       	ldi	r24, 0x00	; 0
   15112:	90 e0       	ldi	r25, 0x00	; 0
   15114:	02 c0       	rjmp	.+4      	; 0x1511a <SS80_cmd_seek+0xde>
   15116:	81 e0       	ldi	r24, 0x01	; 1
   15118:	90 e0       	ldi	r25, 0x00	; 0
   1511a:	cd b7       	in	r28, 0x3d	; 61
   1511c:	de b7       	in	r29, 0x3e	; 62
   1511e:	27 96       	adiw	r28, 0x07	; 7
   15120:	e0 e1       	ldi	r30, 0x10	; 16
   15122:	0c 94 76 e2 	jmp	0x1c4ec	; 0x1c4ec <__epilogue_restores__+0x4>

00015126 <SS80_locate_and_write>:
   15126:	a3 e1       	ldi	r26, 0x13	; 19
   15128:	b0 e0       	ldi	r27, 0x00	; 0
   1512a:	e9 e9       	ldi	r30, 0x99	; 153
   1512c:	f8 ea       	ldi	r31, 0xA8	; 168
   1512e:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   15132:	00 91 5d 19 	lds	r16, 0x195D	; 0x80195d <SS80s>
   15136:	10 91 5e 19 	lds	r17, 0x195E	; 0x80195e <SS80s+0x1>
   1513a:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <SS80p>
   1513e:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <SS80p+0x1>
   15142:	fc 01       	movw	r30, r24
   15144:	a0 89       	ldd	r26, Z+16	; 0x10
   15146:	b1 89       	ldd	r27, Z+17	; 0x11
   15148:	f8 01       	movw	r30, r16
   1514a:	27 81       	ldd	r18, Z+7	; 0x07
   1514c:	30 85       	ldd	r19, Z+8	; 0x08
   1514e:	41 85       	ldd	r20, Z+9	; 0x09
   15150:	52 85       	ldd	r21, Z+10	; 0x0a
   15152:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
   15156:	4b 01       	movw	r8, r22
   15158:	5c 01       	movw	r10, r24
   1515a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1515e:	85 ff       	sbrs	r24, 5
   15160:	16 c0       	rjmp	.+44     	; 0x1518e <SS80_locate_and_write+0x68>
   15162:	83 85       	ldd	r24, Z+11	; 0x0b
   15164:	94 85       	ldd	r25, Z+12	; 0x0c
   15166:	a5 85       	ldd	r26, Z+13	; 0x0d
   15168:	b6 85       	ldd	r27, Z+14	; 0x0e
   1516a:	ed b7       	in	r30, 0x3d	; 61
   1516c:	fe b7       	in	r31, 0x3e	; 62
   1516e:	80 87       	std	Z+8, r24	; 0x08
   15170:	91 87       	std	Z+9, r25	; 0x09
   15172:	a2 87       	std	Z+10, r26	; 0x0a
   15174:	b3 87       	std	Z+11, r27	; 0x0b
   15176:	84 82       	std	Z+4, r8	; 0x04
   15178:	95 82       	std	Z+5, r9	; 0x05
   1517a:	a6 82       	std	Z+6, r10	; 0x06
   1517c:	b7 82       	std	Z+7, r11	; 0x07
   1517e:	87 eb       	ldi	r24, 0xB7	; 183
   15180:	94 e2       	ldi	r25, 0x24	; 36
   15182:	a0 e0       	ldi	r26, 0x00	; 0
   15184:	81 83       	std	Z+1, r24	; 0x01
   15186:	92 83       	std	Z+2, r25	; 0x02
   15188:	a3 83       	std	Z+3, r26	; 0x03
   1518a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1518e:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15192:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15196:	12 82       	std	Z+2, r1	; 0x02
   15198:	54 98       	cbi	0x0a, 4	; 10
   1519a:	4c 99       	sbic	0x09, 4	; 9
   1519c:	03 c0       	rjmp	.+6      	; 0x151a4 <SS80_locate_and_write+0x7e>
   1519e:	80 e0       	ldi	r24, 0x00	; 0
   151a0:	90 e1       	ldi	r25, 0x10	; 16
   151a2:	4f c1       	rjmp	.+670    	; 0x15442 <SS80_locate_and_write+0x31c>
   151a4:	4b df       	rcall	.-362    	; 0x1503c <SS80_cmd_seek>
   151a6:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   151aa:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   151ae:	89 2b       	or	r24, r25
   151b0:	41 f0       	breq	.+16     	; 0x151c2 <SS80_locate_and_write+0x9c>
   151b2:	83 81       	ldd	r24, Z+3	; 0x03
   151b4:	94 81       	ldd	r25, Z+4	; 0x04
   151b6:	82 60       	ori	r24, 0x02	; 2
   151b8:	94 83       	std	Z+4, r25	; 0x04
   151ba:	83 83       	std	Z+3, r24	; 0x03
   151bc:	01 e0       	ldi	r16, 0x01	; 1
   151be:	10 e0       	ldi	r17, 0x00	; 0
   151c0:	02 c0       	rjmp	.+4      	; 0x151c6 <SS80_locate_and_write+0xa0>
   151c2:	00 e0       	ldi	r16, 0x00	; 0
   151c4:	10 e0       	ldi	r17, 0x00	; 0
   151c6:	23 84       	ldd	r2, Z+11	; 0x0b
   151c8:	34 84       	ldd	r3, Z+12	; 0x0c
   151ca:	1d 86       	std	Y+13, r1	; 0x0d
   151cc:	1c 86       	std	Y+12, r1	; 0x0c
   151ce:	41 2c       	mov	r4, r1
   151d0:	51 2c       	mov	r5, r1
   151d2:	32 01       	movw	r6, r4
   151d4:	8a e6       	ldi	r24, 0x6A	; 106
   151d6:	94 e2       	ldi	r25, 0x24	; 36
   151d8:	9c 01       	movw	r18, r24
   151da:	40 e0       	ldi	r20, 0x00	; 0
   151dc:	2e 87       	std	Y+14, r18	; 0x0e
   151de:	3f 87       	std	Y+15, r19	; 0x0f
   151e0:	48 8b       	std	Y+16, r20	; 0x10
   151e2:	80 e9       	ldi	r24, 0x90	; 144
   151e4:	94 e2       	ldi	r25, 0x24	; 36
   151e6:	9c 01       	movw	r18, r24
   151e8:	40 e0       	ldi	r20, 0x00	; 0
   151ea:	29 8b       	std	Y+17, r18	; 0x11
   151ec:	3a 8b       	std	Y+18, r19	; 0x12
   151ee:	4b 8b       	std	Y+19, r20	; 0x13
   151f0:	12 14       	cp	r1, r2
   151f2:	13 04       	cpc	r1, r3
   151f4:	0c f0       	brlt	.+2      	; 0x151f8 <SS80_locate_and_write+0xd2>
   151f6:	f5 c0       	rjmp	.+490    	; 0x153e2 <SS80_locate_and_write+0x2bc>
   151f8:	54 98       	cbi	0x0a, 4	; 10
   151fa:	4c 9b       	sbis	0x09, 4	; 9
   151fc:	d0 cf       	rjmp	.-96     	; 0x1519e <SS80_locate_and_write+0x78>
   151fe:	71 01       	movw	r14, r2
   15200:	31 e0       	ldi	r19, 0x01	; 1
   15202:	23 16       	cp	r2, r19
   15204:	33 06       	cpc	r3, r19
   15206:	1c f0       	brlt	.+6      	; 0x1520e <SS80_locate_and_write+0xe8>
   15208:	e1 2c       	mov	r14, r1
   1520a:	ff 24       	eor	r15, r15
   1520c:	f3 94       	inc	r15
   1520e:	e0 ee       	ldi	r30, 0xE0	; 224
   15210:	fc e1       	ldi	r31, 0x1C	; 28
   15212:	20 e0       	ldi	r18, 0x00	; 0
   15214:	32 e0       	ldi	r19, 0x02	; 2
   15216:	11 92       	st	Z+, r1
   15218:	21 50       	subi	r18, 0x01	; 1
   1521a:	30 40       	sbci	r19, 0x00	; 0
   1521c:	e1 f7       	brne	.-8      	; 0x15216 <SS80_locate_and_write+0xf0>
   1521e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15222:	87 fd       	sbrc	r24, 7
   15224:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   15228:	ae 01       	movw	r20, r28
   1522a:	44 5f       	subi	r20, 0xF4	; 244
   1522c:	5f 4f       	sbci	r21, 0xFF	; 255
   1522e:	b7 01       	movw	r22, r14
   15230:	80 ee       	ldi	r24, 0xE0	; 224
   15232:	9c e1       	ldi	r25, 0x1C	; 28
   15234:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   15238:	6c 01       	movw	r12, r24
   1523a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1523e:	87 ff       	sbrs	r24, 7
   15240:	04 c0       	rjmp	.+8      	; 0x1524a <SS80_locate_and_write+0x124>
   15242:	85 e9       	ldi	r24, 0x95	; 149
   15244:	90 e1       	ldi	r25, 0x10	; 16
   15246:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   1524a:	ce 14       	cp	r12, r14
   1524c:	df 04       	cpc	r13, r15
   1524e:	39 f1       	breq	.+78     	; 0x1529e <SS80_locate_and_write+0x178>
   15250:	8c 85       	ldd	r24, Y+12	; 0x0c
   15252:	9d 85       	ldd	r25, Y+13	; 0x0d
   15254:	9c 01       	movw	r18, r24
   15256:	22 27       	eor	r18, r18
   15258:	30 7d       	andi	r19, 0xD0	; 208
   1525a:	23 2b       	or	r18, r19
   1525c:	d1 f0       	breq	.+52     	; 0x15292 <SS80_locate_and_write+0x16c>
   1525e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15262:	80 ff       	sbrs	r24, 0
   15264:	0a c0       	rjmp	.+20     	; 0x1527a <SS80_locate_and_write+0x154>
   15266:	84 ea       	ldi	r24, 0xA4	; 164
   15268:	94 e2       	ldi	r25, 0x24	; 36
   1526a:	a0 e0       	ldi	r26, 0x00	; 0
   1526c:	ed b7       	in	r30, 0x3d	; 61
   1526e:	fe b7       	in	r31, 0x3e	; 62
   15270:	81 83       	std	Z+1, r24	; 0x01
   15272:	92 83       	std	Z+2, r25	; 0x02
   15274:	a3 83       	std	Z+3, r26	; 0x03
   15276:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1527a:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   1527e:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15282:	83 81       	ldd	r24, Z+3	; 0x03
   15284:	94 81       	ldd	r25, Z+4	; 0x04
   15286:	82 60       	ori	r24, 0x02	; 2
   15288:	94 83       	std	Z+4, r25	; 0x04
   1528a:	83 83       	std	Z+3, r24	; 0x03
   1528c:	81 e0       	ldi	r24, 0x01	; 1
   1528e:	82 83       	std	Z+2, r24	; 0x02
   15290:	99 c0       	rjmp	.+306    	; 0x153c4 <SS80_locate_and_write+0x29e>
   15292:	c1 14       	cp	r12, r1
   15294:	d1 04       	cpc	r13, r1
   15296:	09 f0       	breq	.+2      	; 0x1529a <SS80_locate_and_write+0x174>
   15298:	d0 c0       	rjmp	.+416    	; 0x1543a <SS80_locate_and_write+0x314>
   1529a:	90 fd       	sbrc	r25, 0
   1529c:	93 c0       	rjmp	.+294    	; 0x153c4 <SS80_locate_and_write+0x29e>
   1529e:	01 15       	cp	r16, r1
   152a0:	11 05       	cpc	r17, r1
   152a2:	09 f0       	breq	.+2      	; 0x152a6 <SS80_locate_and_write+0x180>
   152a4:	84 c0       	rjmp	.+264    	; 0x153ae <SS80_locate_and_write+0x288>
   152a6:	c1 14       	cp	r12, r1
   152a8:	d1 04       	cpc	r13, r1
   152aa:	09 f4       	brne	.+2      	; 0x152ae <SS80_locate_and_write+0x188>
   152ac:	82 c0       	rjmp	.+260    	; 0x153b2 <SS80_locate_and_write+0x28c>
   152ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152b2:	86 fd       	sbrc	r24, 6
   152b4:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   152b8:	e0 90 5d 19 	lds	r14, 0x195D	; 0x80195d <SS80s>
   152bc:	f0 90 5e 19 	lds	r15, 0x195E	; 0x80195e <SS80s+0x1>
   152c0:	f3 e0       	ldi	r31, 0x03	; 3
   152c2:	ef 0e       	add	r14, r31
   152c4:	f1 1c       	adc	r15, r1
   152c6:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   152ca:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   152ce:	86 01       	movw	r16, r12
   152d0:	20 ee       	ldi	r18, 0xE0	; 224
   152d2:	3c e1       	ldi	r19, 0x1C	; 28
   152d4:	b5 01       	movw	r22, r10
   152d6:	a4 01       	movw	r20, r8
   152d8:	82 81       	ldd	r24, Z+2	; 0x02
   152da:	93 81       	ldd	r25, Z+3	; 0x03
   152dc:	0e 94 b4 83 	call	0x10768	; 0x10768 <dbf_open_write>
   152e0:	7c 01       	movw	r14, r24
   152e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152e6:	86 ff       	sbrs	r24, 6
   152e8:	04 c0       	rjmp	.+8      	; 0x152f2 <SS80_locate_and_write+0x1cc>
   152ea:	80 ea       	ldi	r24, 0xA0	; 160
   152ec:	90 e1       	ldi	r25, 0x10	; 16
   152ee:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   152f2:	ce 14       	cp	r12, r14
   152f4:	df 04       	cpc	r13, r15
   152f6:	39 f1       	breq	.+78     	; 0x15346 <SS80_locate_and_write+0x220>
   152f8:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   152fc:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15300:	83 81       	ldd	r24, Z+3	; 0x03
   15302:	94 81       	ldd	r25, Z+4	; 0x04
   15304:	82 60       	ori	r24, 0x02	; 2
   15306:	94 83       	std	Z+4, r25	; 0x04
   15308:	83 83       	std	Z+3, r24	; 0x03
   1530a:	0e 94 bd 6e 	call	0xdd7a	; 0xdd7a <mmc_wp_status>
   1530e:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15312:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15316:	89 2b       	or	r24, r25
   15318:	29 f0       	breq	.+10     	; 0x15324 <SS80_locate_and_write+0x1fe>
   1531a:	83 81       	ldd	r24, Z+3	; 0x03
   1531c:	94 81       	ldd	r25, Z+4	; 0x04
   1531e:	88 60       	ori	r24, 0x08	; 8
   15320:	94 83       	std	Z+4, r25	; 0x04
   15322:	83 83       	std	Z+3, r24	; 0x03
   15324:	21 e0       	ldi	r18, 0x01	; 1
   15326:	22 83       	std	Z+2, r18	; 0x02
   15328:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1532c:	80 ff       	sbrs	r24, 0
   1532e:	27 c0       	rjmp	.+78     	; 0x1537e <SS80_locate_and_write+0x258>
   15330:	89 89       	ldd	r24, Y+17	; 0x11
   15332:	9a 89       	ldd	r25, Y+18	; 0x12
   15334:	ab 89       	ldd	r26, Y+19	; 0x13
   15336:	ed b7       	in	r30, 0x3d	; 61
   15338:	fe b7       	in	r31, 0x3e	; 62
   1533a:	81 83       	std	Z+1, r24	; 0x01
   1533c:	92 83       	std	Z+2, r25	; 0x02
   1533e:	a3 83       	std	Z+3, r26	; 0x03
   15340:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15344:	1c c0       	rjmp	.+56     	; 0x1537e <SS80_locate_and_write+0x258>
   15346:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1534a:	85 ff       	sbrs	r24, 5
   1534c:	0c c0       	rjmp	.+24     	; 0x15366 <SS80_locate_and_write+0x240>
   1534e:	ed b7       	in	r30, 0x3d	; 61
   15350:	fe b7       	in	r31, 0x3e	; 62
   15352:	d5 82       	std	Z+5, r13	; 0x05
   15354:	c4 82       	std	Z+4, r12	; 0x04
   15356:	2e 85       	ldd	r18, Y+14	; 0x0e
   15358:	3f 85       	ldd	r19, Y+15	; 0x0f
   1535a:	48 89       	ldd	r20, Y+16	; 0x10
   1535c:	21 83       	std	Z+1, r18	; 0x01
   1535e:	32 83       	std	Z+2, r19	; 0x02
   15360:	43 83       	std	Z+3, r20	; 0x03
   15362:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15366:	c6 01       	movw	r24, r12
   15368:	0d 2c       	mov	r0, r13
   1536a:	00 0c       	add	r0, r0
   1536c:	aa 0b       	sbc	r26, r26
   1536e:	bb 0b       	sbc	r27, r27
   15370:	88 0e       	add	r8, r24
   15372:	99 1e       	adc	r9, r25
   15374:	aa 1e       	adc	r10, r26
   15376:	bb 1e       	adc	r11, r27
   15378:	00 e0       	ldi	r16, 0x00	; 0
   1537a:	10 e0       	ldi	r17, 0x00	; 0
   1537c:	05 c0       	rjmp	.+10     	; 0x15388 <SS80_locate_and_write+0x262>
   1537e:	ec 14       	cp	r14, r12
   15380:	fd 04       	cpc	r15, r13
   15382:	64 f0       	brlt	.+24     	; 0x1539c <SS80_locate_and_write+0x276>
   15384:	01 e0       	ldi	r16, 0x01	; 1
   15386:	10 e0       	ldi	r17, 0x00	; 0
   15388:	c7 01       	movw	r24, r14
   1538a:	0f 2c       	mov	r0, r15
   1538c:	00 0c       	add	r0, r0
   1538e:	aa 0b       	sbc	r26, r26
   15390:	bb 0b       	sbc	r27, r27
   15392:	48 0e       	add	r4, r24
   15394:	59 1e       	adc	r5, r25
   15396:	6a 1e       	adc	r6, r26
   15398:	7b 1e       	adc	r7, r27
   1539a:	0b c0       	rjmp	.+22     	; 0x153b2 <SS80_locate_and_write+0x28c>
   1539c:	c6 01       	movw	r24, r12
   1539e:	0d 2c       	mov	r0, r13
   153a0:	00 0c       	add	r0, r0
   153a2:	aa 0b       	sbc	r26, r26
   153a4:	bb 0b       	sbc	r27, r27
   153a6:	48 0e       	add	r4, r24
   153a8:	59 1e       	adc	r5, r25
   153aa:	6a 1e       	adc	r6, r26
   153ac:	7b 1e       	adc	r7, r27
   153ae:	01 e0       	ldi	r16, 0x01	; 1
   153b0:	10 e0       	ldi	r17, 0x00	; 0
   153b2:	2c 18       	sub	r2, r12
   153b4:	3d 08       	sbc	r3, r13
   153b6:	8c 85       	ldd	r24, Y+12	; 0x0c
   153b8:	9d 85       	ldd	r25, Y+13	; 0x0d
   153ba:	90 ff       	sbrs	r25, 0
   153bc:	19 cf       	rjmp	.-462    	; 0x151f0 <SS80_locate_and_write+0xca>
   153be:	12 14       	cp	r1, r2
   153c0:	13 04       	cpc	r1, r3
   153c2:	7c f4       	brge	.+30     	; 0x153e2 <SS80_locate_and_write+0x2bc>
   153c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153c8:	80 ff       	sbrs	r24, 0
   153ca:	1d c0       	rjmp	.+58     	; 0x15406 <SS80_locate_and_write+0x2e0>
   153cc:	82 e4       	ldi	r24, 0x42	; 66
   153ce:	94 e2       	ldi	r25, 0x24	; 36
   153d0:	a0 e0       	ldi	r26, 0x00	; 0
   153d2:	ed b7       	in	r30, 0x3d	; 61
   153d4:	fe b7       	in	r31, 0x3e	; 62
   153d6:	81 83       	std	Z+1, r24	; 0x01
   153d8:	92 83       	std	Z+2, r25	; 0x02
   153da:	a3 83       	std	Z+3, r26	; 0x03
   153dc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   153e0:	12 c0       	rjmp	.+36     	; 0x15406 <SS80_locate_and_write+0x2e0>
   153e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153e6:	85 ff       	sbrs	r24, 5
   153e8:	0e c0       	rjmp	.+28     	; 0x15406 <SS80_locate_and_write+0x2e0>
   153ea:	ed b7       	in	r30, 0x3d	; 61
   153ec:	fe b7       	in	r31, 0x3e	; 62
   153ee:	44 82       	std	Z+4, r4	; 0x04
   153f0:	55 82       	std	Z+5, r5	; 0x05
   153f2:	66 82       	std	Z+6, r6	; 0x06
   153f4:	77 82       	std	Z+7, r7	; 0x07
   153f6:	87 e1       	ldi	r24, 0x17	; 23
   153f8:	94 e2       	ldi	r25, 0x24	; 36
   153fa:	a0 e0       	ldi	r26, 0x00	; 0
   153fc:	81 83       	std	Z+1, r24	; 0x01
   153fe:	92 83       	std	Z+2, r25	; 0x02
   15400:	a3 83       	std	Z+3, r26	; 0x03
   15402:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15406:	00 91 5d 19 	lds	r16, 0x195D	; 0x80195d <SS80s>
   1540a:	10 91 5e 19 	lds	r17, 0x195E	; 0x80195e <SS80s+0x1>
   1540e:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15412:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   15416:	20 89       	ldd	r18, Z+16	; 0x10
   15418:	31 89       	ldd	r19, Z+17	; 0x11
   1541a:	40 e0       	ldi	r20, 0x00	; 0
   1541c:	50 e0       	ldi	r21, 0x00	; 0
   1541e:	c5 01       	movw	r24, r10
   15420:	b4 01       	movw	r22, r8
   15422:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
   15426:	f8 01       	movw	r30, r16
   15428:	27 83       	std	Z+7, r18	; 0x07
   1542a:	30 87       	std	Z+8, r19	; 0x08
   1542c:	41 87       	std	Z+9, r20	; 0x09
   1542e:	52 87       	std	Z+10, r21	; 0x0a
   15430:	8c 85       	ldd	r24, Y+12	; 0x0c
   15432:	9d 85       	ldd	r25, Y+13	; 0x0d
   15434:	88 27       	eor	r24, r24
   15436:	90 7d       	andi	r25, 0xD0	; 208
   15438:	04 c0       	rjmp	.+8      	; 0x15442 <SS80_locate_and_write+0x31c>
   1543a:	01 2b       	or	r16, r17
   1543c:	09 f4       	brne	.+2      	; 0x15440 <SS80_locate_and_write+0x31a>
   1543e:	37 cf       	rjmp	.-402    	; 0x152ae <SS80_locate_and_write+0x188>
   15440:	b6 cf       	rjmp	.-148    	; 0x153ae <SS80_locate_and_write+0x288>
   15442:	63 96       	adiw	r28, 0x13	; 19
   15444:	e2 e1       	ldi	r30, 0x12	; 18
   15446:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0001544a <SS80_Report>:
   1544a:	a8 e0       	ldi	r26, 0x08	; 8
   1544c:	b0 e0       	ldi	r27, 0x00	; 0
   1544e:	eb e2       	ldi	r30, 0x2B	; 43
   15450:	fa ea       	ldi	r31, 0xAA	; 170
   15452:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   15456:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   1545a:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   1545e:	82 81       	ldd	r24, Z+2	; 0x02
   15460:	88 87       	std	Y+8, r24	; 0x08
   15462:	80 e0       	ldi	r24, 0x00	; 0
   15464:	91 e0       	ldi	r25, 0x01	; 1
   15466:	9f 83       	std	Y+7, r25	; 0x07
   15468:	8e 83       	std	Y+6, r24	; 0x06
   1546a:	ae 01       	movw	r20, r28
   1546c:	4a 5f       	subi	r20, 0xFA	; 250
   1546e:	5f 4f       	sbci	r21, 0xFF	; 255
   15470:	61 e0       	ldi	r22, 0x01	; 1
   15472:	70 e0       	ldi	r23, 0x00	; 0
   15474:	ce 01       	movw	r24, r28
   15476:	08 96       	adiw	r24, 0x08	; 8
   15478:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   1547c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15480:	01 97       	sbiw	r24, 0x01	; 1
   15482:	89 f0       	breq	.+34     	; 0x154a6 <SS80_Report+0x5c>
   15484:	20 ff       	sbrs	r18, 0
   15486:	0a c0       	rjmp	.+20     	; 0x1549c <SS80_Report+0x52>
   15488:	86 e0       	ldi	r24, 0x06	; 6
   1548a:	9f e1       	ldi	r25, 0x1F	; 31
   1548c:	a0 e0       	ldi	r26, 0x00	; 0
   1548e:	ed b7       	in	r30, 0x3d	; 61
   15490:	fe b7       	in	r31, 0x3e	; 62
   15492:	81 83       	std	Z+1, r24	; 0x01
   15494:	92 83       	std	Z+2, r25	; 0x02
   15496:	a3 83       	std	Z+3, r26	; 0x03
   15498:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1549c:	8e 81       	ldd	r24, Y+6	; 0x06
   1549e:	9f 81       	ldd	r25, Y+7	; 0x07
   154a0:	88 27       	eor	r24, r24
   154a2:	90 7d       	andi	r25, 0xD0	; 208
   154a4:	1b c0       	rjmp	.+54     	; 0x154dc <SS80_Report+0x92>
   154a6:	25 ff       	sbrs	r18, 5
   154a8:	12 c0       	rjmp	.+36     	; 0x154ce <SS80_Report+0x84>
   154aa:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   154ae:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   154b2:	82 81       	ldd	r24, Z+2	; 0x02
   154b4:	90 e0       	ldi	r25, 0x00	; 0
   154b6:	ed b7       	in	r30, 0x3d	; 61
   154b8:	fe b7       	in	r31, 0x3e	; 62
   154ba:	95 83       	std	Z+5, r25	; 0x05
   154bc:	84 83       	std	Z+4, r24	; 0x04
   154be:	83 ef       	ldi	r24, 0xF3	; 243
   154c0:	9e e1       	ldi	r25, 0x1E	; 30
   154c2:	a0 e0       	ldi	r26, 0x00	; 0
   154c4:	81 83       	std	Z+1, r24	; 0x01
   154c6:	92 83       	std	Z+2, r25	; 0x02
   154c8:	a3 83       	std	Z+3, r26	; 0x03
   154ca:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   154ce:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   154d2:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   154d6:	12 82       	std	Z+2, r1	; 0x02
   154d8:	80 e0       	ldi	r24, 0x00	; 0
   154da:	90 e0       	ldi	r25, 0x00	; 0
   154dc:	28 96       	adiw	r28, 0x08	; 8
   154de:	e2 e0       	ldi	r30, 0x02	; 2
   154e0:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000154e4 <Clear_Common>:
   154e4:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   154e8:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   154ec:	25 81       	ldd	r18, Z+5	; 0x05
   154ee:	30 e0       	ldi	r19, 0x00	; 0
   154f0:	28 17       	cp	r18, r24
   154f2:	39 07       	cpc	r19, r25
   154f4:	19 f0       	breq	.+6      	; 0x154fc <Clear_Common+0x18>
   154f6:	0f 97       	sbiw	r24, 0x0f	; 15
   154f8:	99 f4       	brne	.+38     	; 0x15520 <Clear_Common+0x3c>
   154fa:	03 c0       	rjmp	.+6      	; 0x15502 <Clear_Common+0x1e>
   154fc:	2f 30       	cpi	r18, 0x0F	; 15
   154fe:	31 05       	cpc	r19, r1
   15500:	09 f4       	brne	.+2      	; 0x15504 <Clear_Common+0x20>
   15502:	15 82       	std	Z+5, r1	; 0x05
   15504:	16 82       	std	Z+6, r1	; 0x06
   15506:	17 82       	std	Z+7, r1	; 0x07
   15508:	10 86       	std	Z+8, r1	; 0x08
   1550a:	11 86       	std	Z+9, r1	; 0x09
   1550c:	12 86       	std	Z+10, r1	; 0x0a
   1550e:	13 86       	std	Z+11, r1	; 0x0b
   15510:	14 86       	std	Z+12, r1	; 0x0c
   15512:	15 86       	std	Z+13, r1	; 0x0d
   15514:	16 86       	std	Z+14, r1	; 0x0e
   15516:	11 82       	std	Z+1, r1	; 0x01
   15518:	10 82       	st	Z, r1
   1551a:	14 82       	std	Z+4, r1	; 0x04
   1551c:	13 82       	std	Z+3, r1	; 0x03
   1551e:	12 82       	std	Z+2, r1	; 0x02
   15520:	08 95       	ret

00015522 <SS80_init>:
   15522:	a5 e0       	ldi	r26, 0x05	; 5
   15524:	b0 e0       	ldi	r27, 0x00	; 0
   15526:	e7 e9       	ldi	r30, 0x97	; 151
   15528:	fa ea       	ldi	r31, 0xAA	; 170
   1552a:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
   1552e:	03 ec       	ldi	r16, 0xC3	; 195
   15530:	10 e2       	ldi	r17, 0x20	; 32
   15532:	cb e0       	ldi	r28, 0x0B	; 11
   15534:	d0 e0       	ldi	r29, 0x00	; 0
   15536:	82 e0       	ldi	r24, 0x02	; 2
   15538:	f8 2e       	mov	r15, r24
   1553a:	80 ec       	ldi	r24, 0xC0	; 192
   1553c:	95 e2       	ldi	r25, 0x25	; 37
   1553e:	6c 01       	movw	r12, r24
   15540:	e1 2c       	mov	r14, r1
   15542:	f8 01       	movw	r30, r16
   15544:	80 81       	ld	r24, Z
   15546:	83 30       	cpi	r24, 0x03	; 3
   15548:	29 f5       	brne	.+74     	; 0x15594 <SS80_init+0x72>
   1554a:	ce 01       	movw	r24, r28
   1554c:	0e 94 4c 96 	call	0x12c98	; 0x12c98 <set_active_device>
   15550:	89 2b       	or	r24, r25
   15552:	01 f1       	breq	.+64     	; 0x15594 <SS80_init+0x72>
   15554:	8f e0       	ldi	r24, 0x0F	; 15
   15556:	90 e0       	ldi	r25, 0x00	; 0
   15558:	c5 df       	rcall	.-118    	; 0x154e4 <Clear_Common>
   1555a:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   1555e:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15562:	f2 82       	std	Z+2, r15	; 0x02
   15564:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15568:	85 ff       	sbrs	r24, 5
   1556a:	0c c0       	rjmp	.+24     	; 0x15584 <SS80_init+0x62>
   1556c:	f8 01       	movw	r30, r16
   1556e:	81 81       	ldd	r24, Z+1	; 0x01
   15570:	90 e0       	ldi	r25, 0x00	; 0
   15572:	ed b7       	in	r30, 0x3d	; 61
   15574:	fe b7       	in	r31, 0x3e	; 62
   15576:	95 83       	std	Z+5, r25	; 0x05
   15578:	84 83       	std	Z+4, r24	; 0x04
   1557a:	c1 82       	std	Z+1, r12	; 0x01
   1557c:	d2 82       	std	Z+2, r13	; 0x02
   1557e:	e3 82       	std	Z+3, r14	; 0x03
   15580:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15584:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15588:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   1558c:	81 81       	ldd	r24, Z+1	; 0x01
   1558e:	90 e0       	ldi	r25, 0x00	; 0
   15590:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
   15594:	21 97       	sbiw	r28, 0x01	; 1
   15596:	0b 52       	subi	r16, 0x2B	; 43
   15598:	11 09       	sbc	r17, r1
   1559a:	cf 3f       	cpi	r28, 0xFF	; 255
   1559c:	ff ef       	ldi	r31, 0xFF	; 255
   1559e:	df 07       	cpc	r29, r31
   155a0:	81 f6       	brne	.-96     	; 0x15542 <SS80_init+0x20>
   155a2:	cd b7       	in	r28, 0x3d	; 61
   155a4:	de b7       	in	r29, 0x3e	; 62
   155a6:	25 96       	adiw	r28, 0x05	; 5
   155a8:	e8 e0       	ldi	r30, 0x08	; 8
   155aa:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

000155ae <SS80_Channel_Independent_Clear>:
   155ae:	9a df       	rcall	.-204    	; 0x154e4 <Clear_Common>
   155b0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   155b4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   155b8:	81 81       	ldd	r24, Z+1	; 0x01
   155ba:	90 e0       	ldi	r25, 0x00	; 0
   155bc:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   155c0:	80 e0       	ldi	r24, 0x00	; 0
   155c2:	90 e0       	ldi	r25, 0x00	; 0
   155c4:	08 95       	ret

000155c6 <SS80_Universal_Device_Clear>:
   155c6:	8f e0       	ldi	r24, 0x0F	; 15
   155c8:	90 e0       	ldi	r25, 0x00	; 0
   155ca:	8c df       	rcall	.-232    	; 0x154e4 <Clear_Common>
   155cc:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   155d0:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   155d4:	81 81       	ldd	r24, Z+1	; 0x01
   155d6:	90 e0       	ldi	r25, 0x00	; 0
   155d8:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   155dc:	80 e0       	ldi	r24, 0x00	; 0
   155de:	90 e0       	ldi	r25, 0x00	; 0
   155e0:	08 95       	ret

000155e2 <SS80_Selected_Device_Clear>:
   155e2:	cf 93       	push	r28
   155e4:	df 93       	push	r29
   155e6:	00 d0       	rcall	.+0      	; 0x155e8 <SS80_Selected_Device_Clear+0x6>
   155e8:	1f 92       	push	r1
   155ea:	ec 01       	movw	r28, r24
   155ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   155f0:	85 ff       	sbrs	r24, 5
   155f2:	0a c0       	rjmp	.+20     	; 0x15608 <SS80_Selected_Device_Clear+0x26>
   155f4:	87 ee       	ldi	r24, 0xE7	; 231
   155f6:	9e e1       	ldi	r25, 0x1E	; 30
   155f8:	a0 e0       	ldi	r26, 0x00	; 0
   155fa:	ed b7       	in	r30, 0x3d	; 61
   155fc:	fe b7       	in	r31, 0x3e	; 62
   155fe:	81 83       	std	Z+1, r24	; 0x01
   15600:	92 83       	std	Z+2, r25	; 0x02
   15602:	a3 83       	std	Z+3, r26	; 0x03
   15604:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15608:	ce 01       	movw	r24, r28
   1560a:	6c df       	rcall	.-296    	; 0x154e4 <Clear_Common>
   1560c:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15610:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   15614:	81 81       	ldd	r24, Z+1	; 0x01
   15616:	90 e0       	ldi	r25, 0x00	; 0
   15618:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   1561c:	80 e0       	ldi	r24, 0x00	; 0
   1561e:	90 e0       	ldi	r25, 0x00	; 0
   15620:	cd b7       	in	r28, 0x3d	; 61
   15622:	de b7       	in	r29, 0x3e	; 62
   15624:	23 96       	adiw	r28, 0x03	; 3
   15626:	e2 e0       	ldi	r30, 0x02	; 2
   15628:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0001562c <SS80_Amigo_Clear>:
   1562c:	a6 e0       	ldi	r26, 0x06	; 6
   1562e:	b0 e0       	ldi	r27, 0x00	; 0
   15630:	ec e1       	ldi	r30, 0x1C	; 28
   15632:	fb ea       	ldi	r31, 0xAB	; 171
   15634:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   15638:	1d 82       	std	Y+5, r1	; 0x05
   1563a:	1c 82       	std	Y+4, r1	; 0x04
   1563c:	ae 01       	movw	r20, r28
   1563e:	4c 5f       	subi	r20, 0xFC	; 252
   15640:	5f 4f       	sbci	r21, 0xFF	; 255
   15642:	61 e0       	ldi	r22, 0x01	; 1
   15644:	70 e0       	ldi	r23, 0x00	; 0
   15646:	ce 01       	movw	r24, r28
   15648:	06 96       	adiw	r24, 0x06	; 6
   1564a:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   1564e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15652:	01 97       	sbiw	r24, 0x01	; 1
   15654:	89 f0       	breq	.+34     	; 0x15678 <SS80_Amigo_Clear+0x4c>
   15656:	20 ff       	sbrs	r18, 0
   15658:	0a c0       	rjmp	.+20     	; 0x1566e <SS80_Amigo_Clear+0x42>
   1565a:	84 ed       	ldi	r24, 0xD4	; 212
   1565c:	9e e1       	ldi	r25, 0x1E	; 30
   1565e:	a0 e0       	ldi	r26, 0x00	; 0
   15660:	ed b7       	in	r30, 0x3d	; 61
   15662:	fe b7       	in	r31, 0x3e	; 62
   15664:	81 83       	std	Z+1, r24	; 0x01
   15666:	92 83       	std	Z+2, r25	; 0x02
   15668:	a3 83       	std	Z+3, r26	; 0x03
   1566a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1566e:	8c 81       	ldd	r24, Y+4	; 0x04
   15670:	9d 81       	ldd	r25, Y+5	; 0x05
   15672:	88 27       	eor	r24, r24
   15674:	90 7d       	andi	r25, 0xD0	; 208
   15676:	19 c0       	rjmp	.+50     	; 0x156aa <SS80_Amigo_Clear+0x7e>
   15678:	25 ff       	sbrs	r18, 5
   1567a:	0a c0       	rjmp	.+20     	; 0x15690 <SS80_Amigo_Clear+0x64>
   1567c:	85 ec       	ldi	r24, 0xC5	; 197
   1567e:	9e e1       	ldi	r25, 0x1E	; 30
   15680:	a0 e0       	ldi	r26, 0x00	; 0
   15682:	ed b7       	in	r30, 0x3d	; 61
   15684:	fe b7       	in	r31, 0x3e	; 62
   15686:	81 83       	std	Z+1, r24	; 0x01
   15688:	92 83       	std	Z+2, r25	; 0x02
   1568a:	a3 83       	std	Z+3, r26	; 0x03
   1568c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15690:	8f e0       	ldi	r24, 0x0F	; 15
   15692:	90 e0       	ldi	r25, 0x00	; 0
   15694:	27 df       	rcall	.-434    	; 0x154e4 <Clear_Common>
   15696:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   1569a:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   1569e:	81 81       	ldd	r24, Z+1	; 0x01
   156a0:	90 e0       	ldi	r25, 0x00	; 0
   156a2:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   156a6:	80 e0       	ldi	r24, 0x00	; 0
   156a8:	90 e0       	ldi	r25, 0x00	; 0
   156aa:	26 96       	adiw	r28, 0x06	; 6
   156ac:	e2 e0       	ldi	r30, 0x02	; 2
   156ae:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000156b2 <SS80_Cancel>:
   156b2:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   156b6:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   156ba:	11 82       	std	Z+1, r1	; 0x01
   156bc:	10 82       	st	Z, r1
   156be:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   156c2:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   156c6:	81 81       	ldd	r24, Z+1	; 0x01
   156c8:	90 e0       	ldi	r25, 0x00	; 0
   156ca:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   156ce:	80 e0       	ldi	r24, 0x00	; 0
   156d0:	90 e0       	ldi	r25, 0x00	; 0
   156d2:	08 95       	ret

000156d4 <SS80_Transparent_State>:
   156d4:	a9 e0       	ldi	r26, 0x09	; 9
   156d6:	b0 e0       	ldi	r27, 0x00	; 0
   156d8:	e0 e7       	ldi	r30, 0x70	; 112
   156da:	fb ea       	ldi	r31, 0xAB	; 171
   156dc:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
   156e0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   156e4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   156e8:	81 81       	ldd	r24, Z+1	; 0x01
   156ea:	90 e0       	ldi	r25, 0x00	; 0
   156ec:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
   156f0:	80 e0       	ldi	r24, 0x00	; 0
   156f2:	91 e0       	ldi	r25, 0x01	; 1
   156f4:	99 87       	std	Y+9, r25	; 0x09
   156f6:	88 87       	std	Y+8, r24	; 0x08
   156f8:	ae 01       	movw	r20, r28
   156fa:	48 5f       	subi	r20, 0xF8	; 248
   156fc:	5f 4f       	sbci	r21, 0xFF	; 255
   156fe:	60 e0       	ldi	r22, 0x00	; 0
   15700:	72 e0       	ldi	r23, 0x02	; 2
   15702:	80 ee       	ldi	r24, 0xE0	; 224
   15704:	9c e1       	ldi	r25, 0x1C	; 28
   15706:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   1570a:	7c 01       	movw	r14, r24
   1570c:	88 85       	ldd	r24, Y+8	; 0x08
   1570e:	99 85       	ldd	r25, Y+9	; 0x09
   15710:	9c 01       	movw	r18, r24
   15712:	22 27       	eor	r18, r18
   15714:	30 7d       	andi	r19, 0xD0	; 208
   15716:	23 2b       	or	r18, r19
   15718:	79 f0       	breq	.+30     	; 0x15738 <SS80_Transparent_State+0x64>
   1571a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1571e:	80 ff       	sbrs	r24, 0
   15720:	da c0       	rjmp	.+436    	; 0x158d6 <SS80_Transparent_State+0x202>
   15722:	84 e6       	ldi	r24, 0x64	; 100
   15724:	90 e2       	ldi	r25, 0x20	; 32
   15726:	a0 e0       	ldi	r26, 0x00	; 0
   15728:	ed b7       	in	r30, 0x3d	; 61
   1572a:	fe b7       	in	r31, 0x3e	; 62
   1572c:	81 83       	std	Z+1, r24	; 0x01
   1572e:	92 83       	std	Z+2, r25	; 0x02
   15730:	a3 83       	std	Z+3, r26	; 0x03
   15732:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15736:	cf c0       	rjmp	.+414    	; 0x158d6 <SS80_Transparent_State+0x202>
   15738:	e1 14       	cp	r14, r1
   1573a:	f1 04       	cpc	r15, r1
   1573c:	09 f4       	brne	.+2      	; 0x15740 <SS80_Transparent_State+0x6c>
   1573e:	d0 c0       	rjmp	.+416    	; 0x158e0 <SS80_Transparent_State+0x20c>
   15740:	90 fd       	sbrc	r25, 0
   15742:	0e c0       	rjmp	.+28     	; 0x15760 <SS80_Transparent_State+0x8c>
   15744:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15748:	80 ff       	sbrs	r24, 0
   1574a:	0a c0       	rjmp	.+20     	; 0x15760 <SS80_Transparent_State+0x8c>
   1574c:	8b e4       	ldi	r24, 0x4B	; 75
   1574e:	90 e2       	ldi	r25, 0x20	; 32
   15750:	a0 e0       	ldi	r26, 0x00	; 0
   15752:	ed b7       	in	r30, 0x3d	; 61
   15754:	fe b7       	in	r31, 0x3e	; 62
   15756:	81 83       	std	Z+1, r24	; 0x01
   15758:	92 83       	std	Z+2, r25	; 0x02
   1575a:	a3 83       	std	Z+3, r26	; 0x03
   1575c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15760:	80 ee       	ldi	r24, 0xE0	; 224
   15762:	a8 2e       	mov	r10, r24
   15764:	8c e1       	ldi	r24, 0x1C	; 28
   15766:	b8 2e       	mov	r11, r24
   15768:	00 e0       	ldi	r16, 0x00	; 0
   1576a:	10 e0       	ldi	r17, 0x00	; 0
   1576c:	0e 15       	cp	r16, r14
   1576e:	1f 05       	cpc	r17, r15
   15770:	0c f0       	brlt	.+2      	; 0x15774 <SS80_Transparent_State+0xa0>
   15772:	9c c0       	rjmp	.+312    	; 0x158ac <SS80_Transparent_State+0x1d8>
   15774:	68 01       	movw	r12, r16
   15776:	ff ef       	ldi	r31, 0xFF	; 255
   15778:	cf 1a       	sub	r12, r31
   1577a:	df 0a       	sbc	r13, r31
   1577c:	f5 01       	movw	r30, r10
   1577e:	81 91       	ld	r24, Z+
   15780:	5f 01       	movw	r10, r30
   15782:	28 2f       	mov	r18, r24
   15784:	30 e0       	ldi	r19, 0x00	; 0
   15786:	a9 01       	movw	r20, r18
   15788:	40 52       	subi	r20, 0x20	; 32
   1578a:	51 09       	sbc	r21, r1
   1578c:	40 31       	cpi	r20, 0x10	; 16
   1578e:	51 05       	cpc	r21, r1
   15790:	20 f4       	brcc	.+8      	; 0x1579a <SS80_Transparent_State+0xc6>
   15792:	80 52       	subi	r24, 0x20	; 32
   15794:	8c d9       	rcall	.-3304   	; 0x14aae <SS80_Check_Unit>
   15796:	86 01       	movw	r16, r12
   15798:	e9 cf       	rjmp	.-46     	; 0x1576c <SS80_Transparent_State+0x98>
   1579a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1579e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   157a2:	21 30       	cpi	r18, 0x01	; 1
   157a4:	31 05       	cpc	r19, r1
   157a6:	c9 f4       	brne	.+50     	; 0x157da <SS80_Transparent_State+0x106>
   157a8:	0e 5f       	subi	r16, 0xFE	; 254
   157aa:	1f 4f       	sbci	r17, 0xFF	; 255
   157ac:	80 73       	andi	r24, 0x30	; 48
   157ae:	99 27       	eor	r25, r25
   157b0:	89 2b       	or	r24, r25
   157b2:	51 f0       	breq	.+20     	; 0x157c8 <SS80_Transparent_State+0xf4>
   157b4:	86 e2       	ldi	r24, 0x26	; 38
   157b6:	90 e2       	ldi	r25, 0x20	; 32
   157b8:	a0 e0       	ldi	r26, 0x00	; 0
   157ba:	ed b7       	in	r30, 0x3d	; 61
   157bc:	fe b7       	in	r31, 0x3e	; 62
   157be:	81 83       	std	Z+1, r24	; 0x01
   157c0:	92 83       	std	Z+2, r25	; 0x02
   157c2:	a3 83       	std	Z+3, r26	; 0x03
   157c4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   157c8:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   157cc:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   157d0:	81 81       	ldd	r24, Z+1	; 0x01
   157d2:	90 e0       	ldi	r25, 0x00	; 0
   157d4:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   157d8:	69 c0       	rjmp	.+210    	; 0x158ac <SS80_Transparent_State+0x1d8>
   157da:	22 30       	cpi	r18, 0x02	; 2
   157dc:	31 05       	cpc	r19, r1
   157de:	51 f4       	brne	.+20     	; 0x157f4 <SS80_Transparent_State+0x120>
   157e0:	0b 5f       	subi	r16, 0xFB	; 251
   157e2:	1f 4f       	sbci	r17, 0xFF	; 255
   157e4:	80 73       	andi	r24, 0x30	; 48
   157e6:	99 27       	eor	r25, r25
   157e8:	89 2b       	or	r24, r25
   157ea:	09 f4       	brne	.+2      	; 0x157ee <SS80_Transparent_State+0x11a>
   157ec:	5f c0       	rjmp	.+190    	; 0x158ac <SS80_Transparent_State+0x1d8>
   157ee:	89 e0       	ldi	r24, 0x09	; 9
   157f0:	90 e2       	ldi	r25, 0x20	; 32
   157f2:	0c c0       	rjmp	.+24     	; 0x1580c <SS80_Transparent_State+0x138>
   157f4:	23 30       	cpi	r18, 0x03	; 3
   157f6:	31 05       	cpc	r19, r1
   157f8:	91 f4       	brne	.+36     	; 0x1581e <SS80_Transparent_State+0x14a>
   157fa:	0b 5f       	subi	r16, 0xFB	; 251
   157fc:	1f 4f       	sbci	r17, 0xFF	; 255
   157fe:	80 73       	andi	r24, 0x30	; 48
   15800:	99 27       	eor	r25, r25
   15802:	89 2b       	or	r24, r25
   15804:	09 f4       	brne	.+2      	; 0x15808 <SS80_Transparent_State+0x134>
   15806:	52 c0       	rjmp	.+164    	; 0x158ac <SS80_Transparent_State+0x1d8>
   15808:	8b ee       	ldi	r24, 0xEB	; 235
   1580a:	9f e1       	ldi	r25, 0x1F	; 31
   1580c:	a0 e0       	ldi	r26, 0x00	; 0
   1580e:	ed b7       	in	r30, 0x3d	; 61
   15810:	fe b7       	in	r31, 0x3e	; 62
   15812:	81 83       	std	Z+1, r24	; 0x01
   15814:	92 83       	std	Z+2, r25	; 0x02
   15816:	a3 83       	std	Z+3, r26	; 0x03
   15818:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1581c:	47 c0       	rjmp	.+142    	; 0x158ac <SS80_Transparent_State+0x1d8>
   1581e:	28 30       	cpi	r18, 0x08	; 8
   15820:	31 05       	cpc	r19, r1
   15822:	e1 f4       	brne	.+56     	; 0x1585c <SS80_Transparent_State+0x188>
   15824:	85 ff       	sbrs	r24, 5
   15826:	12 c0       	rjmp	.+36     	; 0x1584c <SS80_Transparent_State+0x178>
   15828:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   1582c:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15830:	85 81       	ldd	r24, Z+5	; 0x05
   15832:	90 e0       	ldi	r25, 0x00	; 0
   15834:	ed b7       	in	r30, 0x3d	; 61
   15836:	fe b7       	in	r31, 0x3e	; 62
   15838:	95 83       	std	Z+5, r25	; 0x05
   1583a:	84 83       	std	Z+4, r24	; 0x04
   1583c:	84 ec       	ldi	r24, 0xC4	; 196
   1583e:	9f e1       	ldi	r25, 0x1F	; 31
   15840:	a0 e0       	ldi	r26, 0x00	; 0
   15842:	81 83       	std	Z+1, r24	; 0x01
   15844:	92 83       	std	Z+2, r25	; 0x02
   15846:	a3 83       	std	Z+3, r26	; 0x03
   15848:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1584c:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15850:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15854:	85 81       	ldd	r24, Z+5	; 0x05
   15856:	90 e0       	ldi	r25, 0x00	; 0
   15858:	aa de       	rcall	.-684    	; 0x155ae <SS80_Channel_Independent_Clear>
   1585a:	44 c0       	rjmp	.+136    	; 0x158e4 <SS80_Transparent_State+0x210>
   1585c:	29 30       	cpi	r18, 0x09	; 9
   1585e:	31 05       	cpc	r19, r1
   15860:	b1 f4       	brne	.+44     	; 0x1588e <SS80_Transparent_State+0x1ba>
   15862:	85 ff       	sbrs	r24, 5
   15864:	12 c0       	rjmp	.+36     	; 0x1588a <SS80_Transparent_State+0x1b6>
   15866:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   1586a:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   1586e:	85 81       	ldd	r24, Z+5	; 0x05
   15870:	90 e0       	ldi	r25, 0x00	; 0
   15872:	ed b7       	in	r30, 0x3d	; 61
   15874:	fe b7       	in	r31, 0x3e	; 62
   15876:	95 83       	std	Z+5, r25	; 0x05
   15878:	84 83       	std	Z+4, r24	; 0x04
   1587a:	80 eb       	ldi	r24, 0xB0	; 176
   1587c:	9f e1       	ldi	r25, 0x1F	; 31
   1587e:	a0 e0       	ldi	r26, 0x00	; 0
   15880:	81 83       	std	Z+1, r24	; 0x01
   15882:	92 83       	std	Z+2, r25	; 0x02
   15884:	a3 83       	std	Z+3, r26	; 0x03
   15886:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1588a:	13 df       	rcall	.-474    	; 0x156b2 <SS80_Cancel>
   1588c:	2b c0       	rjmp	.+86     	; 0x158e4 <SS80_Transparent_State+0x210>
   1588e:	80 ff       	sbrs	r24, 0
   15890:	22 c0       	rjmp	.+68     	; 0x158d6 <SS80_Transparent_State+0x202>
   15892:	ed b7       	in	r30, 0x3d	; 61
   15894:	fe b7       	in	r31, 0x3e	; 62
   15896:	35 83       	std	Z+5, r19	; 0x05
   15898:	24 83       	std	Z+4, r18	; 0x04
   1589a:	80 e9       	ldi	r24, 0x90	; 144
   1589c:	9f e1       	ldi	r25, 0x1F	; 31
   1589e:	a0 e0       	ldi	r26, 0x00	; 0
   158a0:	81 83       	std	Z+1, r24	; 0x01
   158a2:	92 83       	std	Z+2, r25	; 0x02
   158a4:	a3 83       	std	Z+3, r26	; 0x03
   158a6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   158aa:	86 01       	movw	r16, r12
   158ac:	0e 15       	cp	r16, r14
   158ae:	1f 05       	cpc	r17, r15
   158b0:	91 f0       	breq	.+36     	; 0x158d6 <SS80_Transparent_State+0x202>
   158b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158b6:	80 ff       	sbrs	r24, 0
   158b8:	0e c0       	rjmp	.+28     	; 0x158d6 <SS80_Transparent_State+0x202>
   158ba:	ed b7       	in	r30, 0x3d	; 61
   158bc:	fe b7       	in	r31, 0x3e	; 62
   158be:	f7 82       	std	Z+7, r15	; 0x07
   158c0:	e6 82       	std	Z+6, r14	; 0x06
   158c2:	15 83       	std	Z+5, r17	; 0x05
   158c4:	04 83       	std	Z+4, r16	; 0x04
   158c6:	84 e5       	ldi	r24, 0x54	; 84
   158c8:	9f e1       	ldi	r25, 0x1F	; 31
   158ca:	a0 e0       	ldi	r26, 0x00	; 0
   158cc:	81 83       	std	Z+1, r24	; 0x01
   158ce:	92 83       	std	Z+2, r25	; 0x02
   158d0:	a3 83       	std	Z+3, r26	; 0x03
   158d2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   158d6:	88 85       	ldd	r24, Y+8	; 0x08
   158d8:	99 85       	ldd	r25, Y+9	; 0x09
   158da:	88 27       	eor	r24, r24
   158dc:	90 7d       	andi	r25, 0xD0	; 208
   158de:	02 c0       	rjmp	.+4      	; 0x158e4 <SS80_Transparent_State+0x210>
   158e0:	80 e0       	ldi	r24, 0x00	; 0
   158e2:	90 e0       	ldi	r25, 0x00	; 0
   158e4:	29 96       	adiw	r28, 0x09	; 9
   158e6:	ea e0       	ldi	r30, 0x0A	; 10
   158e8:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

000158ec <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   158ec:	a6 e0       	ldi	r26, 0x06	; 6
   158ee:	b0 e0       	ldi	r27, 0x00	; 0
   158f0:	ec e7       	ldi	r30, 0x7C	; 124
   158f2:	fc ea       	ldi	r31, 0xAC	; 172
   158f4:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   158f8:	80 e0       	ldi	r24, 0x00	; 0
   158fa:	91 e0       	ldi	r25, 0x01	; 1
   158fc:	9d 83       	std	Y+5, r25	; 0x05
   158fe:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15900:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15904:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15908:	81 e0       	ldi	r24, 0x01	; 1
   1590a:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   1590c:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   1590e:	ae 01       	movw	r20, r28
   15910:	4c 5f       	subi	r20, 0xFC	; 252
   15912:	5f 4f       	sbci	r21, 0xFF	; 255
   15914:	61 e0       	ldi	r22, 0x01	; 1
   15916:	70 e0       	ldi	r23, 0x00	; 0
   15918:	ce 01       	movw	r24, r28
   1591a:	06 96       	adiw	r24, 0x06	; 6
   1591c:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   15920:	01 97       	sbiw	r24, 0x01	; 1
   15922:	99 f0       	breq	.+38     	; 0x1594a <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15924:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15928:	80 ff       	sbrs	r24, 0
   1592a:	0a c0       	rjmp	.+20     	; 0x15940 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   1592c:	82 ea       	ldi	r24, 0xA2	; 162
   1592e:	9e e1       	ldi	r25, 0x1E	; 30
   15930:	a0 e0       	ldi	r26, 0x00	; 0
   15932:	ed b7       	in	r30, 0x3d	; 61
   15934:	fe b7       	in	r31, 0x3e	; 62
   15936:	81 83       	std	Z+1, r24	; 0x01
   15938:	92 83       	std	Z+2, r25	; 0x02
   1593a:	a3 83       	std	Z+3, r26	; 0x03
   1593c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(status & ERROR_MASK);
   15940:	8c 81       	ldd	r24, Y+4	; 0x04
   15942:	9d 81       	ldd	r25, Y+5	; 0x05
   15944:	88 27       	eor	r24, r24
   15946:	90 7d       	andi	r25, 0xD0	; 208
   15948:	07 c0       	rjmp	.+14     	; 0x15958 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   1594a:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   1594e:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15952:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   15954:	80 e0       	ldi	r24, 0x00	; 0
   15956:	90 e0       	ldi	r25, 0x00	; 0
}
   15958:	26 96       	adiw	r28, 0x06	; 6
   1595a:	e2 e0       	ldi	r30, 0x02	; 2
   1595c:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00015960 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15960:	a7 e1       	ldi	r26, 0x17	; 23
   15962:	b0 e0       	ldi	r27, 0x00	; 0
   15964:	e6 eb       	ldi	r30, 0xB6	; 182
   15966:	fc ea       	ldi	r31, 0xAC	; 172
   15968:	0c 94 59 e2 	jmp	0x1c4b2	; 0x1c4b2 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   1596c:	60 91 5d 19 	lds	r22, 0x195D	; 0x80195d <SS80s>
   15970:	70 91 5e 19 	lds	r23, 0x195E	; 0x80195e <SS80s+0x1>
   15974:	fb 01       	movw	r30, r22
   15976:	27 81       	ldd	r18, Z+7	; 0x07
   15978:	30 85       	ldd	r19, Z+8	; 0x08
   1597a:	41 85       	ldd	r20, Z+9	; 0x09
   1597c:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   1597e:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <SS80p>
   15982:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <SS80p+0x1>
   15986:	fc 01       	movw	r30, r24
   15988:	a0 89       	ldd	r26, Z+16	; 0x10
   1598a:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   1598c:	fb 01       	movw	r30, r22
   1598e:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15990:	1d 86       	std	Y+13, r1	; 0x0d
   15992:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15994:	54 98       	cbi	0x0a, 4	; 10
   15996:	4c 99       	sbic	0x09, 4	; 9
   15998:	03 c0       	rjmp	.+6      	; 0x159a0 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   1599a:	80 e0       	ldi	r24, 0x00	; 0
   1599c:	90 e1       	ldi	r25, 0x10	; 16
   1599e:	3e c1       	rjmp	.+636    	; 0x15c1c <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   159a0:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <__muluhisi3>
   159a4:	4b 01       	movw	r8, r22
   159a6:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   159a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159ac:	85 ff       	sbrs	r24, 5
   159ae:	1a c0       	rjmp	.+52     	; 0x159e4 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   159b0:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   159b4:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   159b8:	83 85       	ldd	r24, Z+11	; 0x0b
   159ba:	94 85       	ldd	r25, Z+12	; 0x0c
   159bc:	a5 85       	ldd	r26, Z+13	; 0x0d
   159be:	b6 85       	ldd	r27, Z+14	; 0x0e
   159c0:	ed b7       	in	r30, 0x3d	; 61
   159c2:	fe b7       	in	r31, 0x3e	; 62
   159c4:	80 87       	std	Z+8, r24	; 0x08
   159c6:	91 87       	std	Z+9, r25	; 0x09
   159c8:	a2 87       	std	Z+10, r26	; 0x0a
   159ca:	b3 87       	std	Z+11, r27	; 0x0b
   159cc:	84 82       	std	Z+4, r8	; 0x04
   159ce:	95 82       	std	Z+5, r9	; 0x05
   159d0:	a6 82       	std	Z+6, r10	; 0x06
   159d2:	b7 82       	std	Z+7, r11	; 0x07
   159d4:	8c e7       	ldi	r24, 0x7C	; 124
   159d6:	95 e2       	ldi	r25, 0x25	; 37
   159d8:	a0 e0       	ldi	r26, 0x00	; 0
   159da:	81 83       	std	Z+1, r24	; 0x01
   159dc:	92 83       	std	Z+2, r25	; 0x02
   159de:	a3 83       	std	Z+3, r26	; 0x03
   159e0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   159e4:	2b db       	rcall	.-2474   	; 0x1503c <SS80_cmd_seek>
   159e6:	89 2b       	or	r24, r25
   159e8:	09 f0       	breq	.+2      	; 0x159ec <SS80_locate_and_read+0x8c>
   159ea:	ae c0       	rjmp	.+348    	; 0x15b48 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   159ec:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   159f0:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   159f4:	43 84       	ldd	r4, Z+11	; 0x0b
   159f6:	54 84       	ldd	r5, Z+12	; 0x0c
   159f8:	65 84       	ldd	r6, Z+13	; 0x0d
   159fa:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   159fc:	1e 86       	std	Y+14, r1	; 0x0e
   159fe:	1f 86       	std	Y+15, r1	; 0x0f
   15a00:	18 8a       	std	Y+16, r1	; 0x10
   15a02:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15a04:	8e e5       	ldi	r24, 0x5E	; 94
   15a06:	95 e2       	ldi	r25, 0x25	; 37
   15a08:	9c 01       	movw	r18, r24
   15a0a:	40 e0       	ldi	r20, 0x00	; 0
   15a0c:	2a 8b       	std	Y+18, r18	; 0x12
   15a0e:	3b 8b       	std	Y+19, r19	; 0x13
   15a10:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15a12:	33 24       	eor	r3, r3
   15a14:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   15a16:	8d e2       	ldi	r24, 0x2D	; 45
   15a18:	95 e2       	ldi	r25, 0x25	; 37
   15a1a:	9c 01       	movw	r18, r24
   15a1c:	40 e0       	ldi	r20, 0x00	; 0
   15a1e:	2d 8b       	std	Y+21, r18	; 0x15
   15a20:	3e 8b       	std	Y+22, r19	; 0x16
   15a22:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15a24:	34 c0       	rjmp	.+104    	; 0x15a8e <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15a26:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15a28:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   15a2c:	ae 01       	movw	r20, r28
   15a2e:	44 5f       	subi	r20, 0xF4	; 244
   15a30:	5f 4f       	sbci	r21, 0xFF	; 255
   15a32:	b6 01       	movw	r22, r12
   15a34:	80 ee       	ldi	r24, 0xE0	; 224
   15a36:	9c e1       	ldi	r25, 0x1C	; 28
   15a38:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   15a3c:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15a3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a42:	87 ff       	sbrs	r24, 7
   15a44:	04 c0       	rjmp	.+8      	; 0x15a4e <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   15a46:	86 eb       	ldi	r24, 0xB6	; 182
   15a48:	90 e1       	ldi	r25, 0x10	; 16
   15a4a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   15a4e:	c0 16       	cp	r12, r16
   15a50:	d1 06       	cpc	r13, r17
   15a52:	09 f0       	breq	.+2      	; 0x15a56 <SS80_locate_and_read+0xf6>
   15a54:	82 c0       	rjmp	.+260    	; 0x15b5a <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   15a56:	0d 2c       	mov	r0, r13
   15a58:	00 0c       	add	r0, r0
   15a5a:	ee 08       	sbc	r14, r14
   15a5c:	ff 08       	sbc	r15, r15
   15a5e:	8c 0c       	add	r8, r12
   15a60:	9d 1c       	adc	r9, r13
   15a62:	ae 1c       	adc	r10, r14
   15a64:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   15a66:	01 2e       	mov	r0, r17
   15a68:	00 0c       	add	r0, r0
   15a6a:	22 0b       	sbc	r18, r18
   15a6c:	33 0b       	sbc	r19, r19
   15a6e:	8e 85       	ldd	r24, Y+14	; 0x0e
   15a70:	9f 85       	ldd	r25, Y+15	; 0x0f
   15a72:	a8 89       	ldd	r26, Y+16	; 0x10
   15a74:	b9 89       	ldd	r27, Y+17	; 0x11
   15a76:	80 0f       	add	r24, r16
   15a78:	91 1f       	adc	r25, r17
   15a7a:	a2 1f       	adc	r26, r18
   15a7c:	b3 1f       	adc	r27, r19
   15a7e:	8e 87       	std	Y+14, r24	; 0x0e
   15a80:	9f 87       	std	Y+15, r25	; 0x0f
   15a82:	a8 8b       	std	Y+16, r26	; 0x10
   15a84:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   15a86:	40 1a       	sub	r4, r16
   15a88:	51 0a       	sbc	r5, r17
   15a8a:	62 0a       	sbc	r6, r18
   15a8c:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15a8e:	41 14       	cp	r4, r1
   15a90:	51 04       	cpc	r5, r1
   15a92:	61 04       	cpc	r6, r1
   15a94:	71 04       	cpc	r7, r1
   15a96:	09 f4       	brne	.+2      	; 0x15a9a <SS80_locate_and_read+0x13a>
   15a98:	92 c0       	rjmp	.+292    	; 0x15bbe <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   15a9a:	54 98       	cbi	0x0a, 4	; 10
   15a9c:	4c 9b       	sbis	0x09, 4	; 9
   15a9e:	7d cf       	rjmp	.-262    	; 0x1599a <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15aa0:	31 e0       	ldi	r19, 0x01	; 1
   15aa2:	43 16       	cp	r4, r19
   15aa4:	53 06       	cpc	r5, r19
   15aa6:	61 04       	cpc	r6, r1
   15aa8:	71 04       	cpc	r7, r1
   15aaa:	08 f4       	brcc	.+2      	; 0x15aae <SS80_locate_and_read+0x14e>
   15aac:	4f c0       	rjmp	.+158    	; 0x15b4c <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15aae:	1d 86       	std	Y+13, r1	; 0x0d
   15ab0:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15ab2:	c1 2c       	mov	r12, r1
   15ab4:	dd 24       	eor	r13, r13
   15ab6:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15ab8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15abc:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15abe:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15ac2:	e0 90 5d 19 	lds	r14, 0x195D	; 0x80195d <SS80s>
   15ac6:	f0 90 5e 19 	lds	r15, 0x195E	; 0x80195e <SS80s+0x1>
   15aca:	43 e0       	ldi	r20, 0x03	; 3
   15acc:	e4 0e       	add	r14, r20
   15ace:	f1 1c       	adc	r15, r1
   15ad0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15ad4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   15ad8:	86 01       	movw	r16, r12
   15ada:	20 ee       	ldi	r18, 0xE0	; 224
   15adc:	3c e1       	ldi	r19, 0x1C	; 28
   15ade:	b5 01       	movw	r22, r10
   15ae0:	a4 01       	movw	r20, r8
   15ae2:	82 81       	ldd	r24, Z+2	; 0x02
   15ae4:	93 81       	ldd	r25, Z+3	; 0x03
   15ae6:	0e 94 5d 83 	call	0x106ba	; 0x106ba <dbf_open_read>
   15aea:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15aec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15af0:	86 ff       	sbrs	r24, 6
   15af2:	04 c0       	rjmp	.+8      	; 0x15afc <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15af4:	8b ea       	ldi	r24, 0xAB	; 171
   15af6:	90 e1       	ldi	r25, 0x10	; 16
   15af8:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15afc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b00:	85 ff       	sbrs	r24, 5
   15b02:	0c c0       	rjmp	.+24     	; 0x15b1c <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15b04:	ed b7       	in	r30, 0x3d	; 61
   15b06:	fe b7       	in	r31, 0x3e	; 62
   15b08:	15 83       	std	Z+5, r17	; 0x05
   15b0a:	04 83       	std	Z+4, r16	; 0x04
   15b0c:	2a 89       	ldd	r18, Y+18	; 0x12
   15b0e:	3b 89       	ldd	r19, Y+19	; 0x13
   15b10:	4c 89       	ldd	r20, Y+20	; 0x14
   15b12:	21 83       	std	Z+1, r18	; 0x01
   15b14:	32 83       	std	Z+2, r19	; 0x02
   15b16:	43 83       	std	Z+3, r20	; 0x03
   15b18:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15b1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15b20:	17 ff       	sbrs	r17, 7
   15b22:	81 cf       	rjmp	.-254    	; 0x15a26 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15b24:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15b28:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15b2c:	91 e0       	ldi	r25, 0x01	; 1
   15b2e:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   15b30:	80 ff       	sbrs	r24, 0
   15b32:	0a c0       	rjmp	.+20     	; 0x15b48 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   15b34:	86 e4       	ldi	r24, 0x46	; 70
   15b36:	95 e2       	ldi	r25, 0x25	; 37
   15b38:	a0 e0       	ldi	r26, 0x00	; 0
   15b3a:	ed b7       	in	r30, 0x3d	; 61
   15b3c:	fe b7       	in	r31, 0x3e	; 62
   15b3e:	81 83       	std	Z+1, r24	; 0x01
   15b40:	92 83       	std	Z+2, r25	; 0x02
   15b42:	a3 83       	std	Z+3, r26	; 0x03
   15b44:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            return( SS80_error_return() );
   15b48:	d1 de       	rcall	.-606    	; 0x158ec <SS80_error_return>
   15b4a:	68 c0       	rjmp	.+208    	; 0x15c1c <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15b4c:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15b4e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b50:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b52:	91 60       	ori	r25, 0x01	; 1
   15b54:	9d 87       	std	Y+13, r25	; 0x0d
   15b56:	8c 87       	std	Y+12, r24	; 0x0c
   15b58:	af cf       	rjmp	.-162    	; 0x15ab8 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15b5a:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15b5e:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15b62:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   15b64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b68:	80 ff       	sbrs	r24, 0
   15b6a:	0a c0       	rjmp	.+20     	; 0x15b80 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15b6c:	2d 89       	ldd	r18, Y+21	; 0x15
   15b6e:	3e 89       	ldd	r19, Y+22	; 0x16
   15b70:	4f 89       	ldd	r20, Y+23	; 0x17
   15b72:	ed b7       	in	r30, 0x3d	; 61
   15b74:	fe b7       	in	r31, 0x3e	; 62
   15b76:	21 83       	std	Z+1, r18	; 0x01
   15b78:	32 83       	std	Z+2, r19	; 0x02
   15b7a:	43 83       	std	Z+3, r20	; 0x03
   15b7c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            if(status & ERROR_MASK)
   15b80:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b82:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b84:	88 27       	eor	r24, r24
   15b86:	90 7d       	andi	r25, 0xD0	; 208
   15b88:	89 2b       	or	r24, r25
   15b8a:	09 f4       	brne	.+2      	; 0x15b8e <SS80_locate_and_read+0x22e>
   15b8c:	64 cf       	rjmp	.-312    	; 0x15a56 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15b8e:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15b92:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15b96:	83 81       	ldd	r24, Z+3	; 0x03
   15b98:	94 81       	ldd	r25, Z+4	; 0x04
   15b9a:	80 62       	ori	r24, 0x20	; 32
   15b9c:	94 83       	std	Z+4, r25	; 0x04
   15b9e:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15ba0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ba4:	80 ff       	sbrs	r24, 0
   15ba6:	21 c0       	rjmp	.+66     	; 0x15bea <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15ba8:	88 e0       	ldi	r24, 0x08	; 8
   15baa:	95 e2       	ldi	r25, 0x25	; 37
   15bac:	a0 e0       	ldi	r26, 0x00	; 0
   15bae:	ed b7       	in	r30, 0x3d	; 61
   15bb0:	fe b7       	in	r31, 0x3e	; 62
   15bb2:	81 83       	std	Z+1, r24	; 0x01
   15bb4:	92 83       	std	Z+2, r25	; 0x02
   15bb6:	a3 83       	std	Z+3, r26	; 0x03
   15bb8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15bbc:	16 c0       	rjmp	.+44     	; 0x15bea <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15bbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bc2:	85 ff       	sbrs	r24, 5
   15bc4:	12 c0       	rjmp	.+36     	; 0x15bea <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
   15bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
   15bca:	a8 89       	ldd	r26, Y+16	; 0x10
   15bcc:	b9 89       	ldd	r27, Y+17	; 0x11
   15bce:	ed b7       	in	r30, 0x3d	; 61
   15bd0:	fe b7       	in	r31, 0x3e	; 62
   15bd2:	84 83       	std	Z+4, r24	; 0x04
   15bd4:	95 83       	std	Z+5, r25	; 0x05
   15bd6:	a6 83       	std	Z+6, r26	; 0x06
   15bd8:	b7 83       	std	Z+7, r27	; 0x07
   15bda:	80 ee       	ldi	r24, 0xE0	; 224
   15bdc:	94 e2       	ldi	r25, 0x24	; 36
   15bde:	a0 e0       	ldi	r26, 0x00	; 0
   15be0:	81 83       	std	Z+1, r24	; 0x01
   15be2:	92 83       	std	Z+2, r25	; 0x02
   15be4:	a3 83       	std	Z+3, r26	; 0x03
   15be6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15bea:	00 91 5d 19 	lds	r16, 0x195D	; 0x80195d <SS80s>
   15bee:	10 91 5e 19 	lds	r17, 0x195E	; 0x80195e <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15bf2:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15bf6:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15bfa:	20 89       	ldd	r18, Z+16	; 0x10
   15bfc:	31 89       	ldd	r19, Z+17	; 0x11
   15bfe:	40 e0       	ldi	r20, 0x00	; 0
   15c00:	50 e0       	ldi	r21, 0x00	; 0
   15c02:	c5 01       	movw	r24, r10
   15c04:	b4 01       	movw	r22, r8
   15c06:	0e 94 eb e1 	call	0x1c3d6	; 0x1c3d6 <__udivmodsi4>
   15c0a:	f8 01       	movw	r30, r16
   15c0c:	27 83       	std	Z+7, r18	; 0x07
   15c0e:	30 87       	std	Z+8, r19	; 0x08
   15c10:	41 87       	std	Z+9, r20	; 0x09
   15c12:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15c14:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c16:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c18:	88 27       	eor	r24, r24
   15c1a:	90 7d       	andi	r25, 0xD0	; 208
}
   15c1c:	67 96       	adiw	r28, 0x17	; 23
   15c1e:	e1 e1       	ldi	r30, 0x11	; 17
   15c20:	0c 94 75 e2 	jmp	0x1c4ea	; 0x1c4ea <__epilogue_restores__+0x2>

00015c24 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15c24:	cf 93       	push	r28
   15c26:	df 93       	push	r29
   15c28:	00 d0       	rcall	.+0      	; 0x15c2a <SS80_Execute_State+0x6>
   15c2a:	00 d0       	rcall	.+0      	; 0x15c2c <SS80_Execute_State+0x8>
   15c2c:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15c2e:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15c32:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   15c36:	81 81       	ldd	r24, Z+1	; 0x01
   15c38:	90 e0       	ldi	r25, 0x00	; 0
   15c3a:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
    switch(SS80s->estate)
   15c3e:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15c42:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15c46:	80 81       	ld	r24, Z
   15c48:	91 81       	ldd	r25, Z+1	; 0x01
   15c4a:	82 30       	cpi	r24, 0x02	; 2
   15c4c:	91 05       	cpc	r25, r1
   15c4e:	89 f0       	breq	.+34     	; 0x15c72 <SS80_Execute_State+0x4e>
   15c50:	3c f4       	brge	.+14     	; 0x15c60 <SS80_Execute_State+0x3c>
   15c52:	00 97       	sbiw	r24, 0x00	; 0
   15c54:	81 f1       	breq	.+96     	; 0x15cb6 <SS80_Execute_State+0x92>
   15c56:	81 30       	cpi	r24, 0x01	; 1
   15c58:	91 05       	cpc	r25, r1
   15c5a:	b9 f4       	brne	.+46     	; 0x15c8a <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15c5c:	81 de       	rcall	.-766    	; 0x15960 <SS80_locate_and_read>
   15c5e:	0d c0       	rjmp	.+26     	; 0x15c7a <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15c60:	83 30       	cpi	r24, 0x03	; 3
   15c62:	91 05       	cpc	r25, r1
   15c64:	41 f0       	breq	.+16     	; 0x15c76 <SS80_Execute_State+0x52>
   15c66:	84 30       	cpi	r24, 0x04	; 4
   15c68:	91 05       	cpc	r25, r1
   15c6a:	79 f4       	brne	.+30     	; 0x15c8a <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15c6c:	0e 94 e7 a4 	call	0x149ce	; 0x149ce <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15c70:	04 c0       	rjmp	.+8      	; 0x15c7a <SS80_Execute_State+0x56>
   15c72:	59 da       	rcall	.-2894   	; 0x15126 <SS80_locate_and_write>
   15c74:	02 c0       	rjmp	.+4      	; 0x15c7a <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15c76:	0e 94 66 a4 	call	0x148cc	; 0x148cc <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15c7a:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15c7c:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15c80:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15c84:	11 82       	std	Z+1, r1	; 0x01
   15c86:	10 82       	st	Z, r1
            break;
   15c88:	18 c0       	rjmp	.+48     	; 0x15cba <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15c8a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15c8e:	20 ff       	sbrs	r18, 0
   15c90:	0c c0       	rjmp	.+24     	; 0x15caa <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15c92:	ed b7       	in	r30, 0x3d	; 61
   15c94:	fe b7       	in	r31, 0x3e	; 62
   15c96:	95 83       	std	Z+5, r25	; 0x05
   15c98:	84 83       	std	Z+4, r24	; 0x04
   15c9a:	84 ea       	ldi	r24, 0xA4	; 164
   15c9c:	95 e2       	ldi	r25, 0x25	; 37
   15c9e:	a0 e0       	ldi	r26, 0x00	; 0
   15ca0:	81 83       	std	Z+1, r24	; 0x01
   15ca2:	92 83       	std	Z+2, r25	; 0x02
   15ca4:	a3 83       	std	Z+3, r26	; 0x03
   15ca6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            SS80s->estate = EXEC_IDLE;
   15caa:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <SS80s>
   15cae:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <SS80s+0x1>
   15cb2:	11 82       	std	Z+1, r1	; 0x01
   15cb4:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15cb6:	c0 e0       	ldi	r28, 0x00	; 0
   15cb8:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15cba:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15cbe:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   15cc2:	81 81       	ldd	r24, Z+1	; 0x01
   15cc4:	90 e0       	ldi	r25, 0x00	; 0
   15cc6:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
    return(ret);
}
   15cca:	ce 01       	movw	r24, r28
   15ccc:	cd b7       	in	r28, 0x3d	; 61
   15cce:	de b7       	in	r29, 0x3e	; 62
   15cd0:	25 96       	adiw	r28, 0x05	; 5
   15cd2:	e2 e0       	ldi	r30, 0x02	; 2
   15cd4:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00015cd8 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15cd8:	a9 e0       	ldi	r26, 0x09	; 9
   15cda:	b0 e0       	ldi	r27, 0x00	; 0
   15cdc:	e2 e7       	ldi	r30, 0x72	; 114
   15cde:	fe ea       	ldi	r31, 0xAE	; 174
   15ce0:	0c 94 67 e2 	jmp	0x1c4ce	; 0x1c4ce <__prologue_saves__+0x1e>
   15ce4:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15ce6:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   15cea:	90 e0       	ldi	r25, 0x00	; 0
   15cec:	0e 94 45 8b 	call	0x1168a	; 0x1168a <SS80_is_MTA>
   15cf0:	89 2b       	or	r24, r25
   15cf2:	19 f0       	breq	.+6      	; 0x15cfa <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15cf4:	15 36       	cpi	r17, 0x65	; 101
   15cf6:	19 f5       	brne	.+70     	; 0x15d3e <SS80_COMMANDS+0x66>
   15cf8:	09 c0       	rjmp	.+18     	; 0x15d0c <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15cfa:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   15cfe:	90 e0       	ldi	r25, 0x00	; 0
   15d00:	0e 94 34 8b 	call	0x11668	; 0x11668 <SS80_is_MLA>
   15d04:	ec 01       	movw	r28, r24
   15d06:	89 2b       	or	r24, r25
   15d08:	a9 f7       	brne	.-22     	; 0x15cf4 <SS80_COMMANDS+0x1c>
   15d0a:	ad c0       	rjmp	.+346    	; 0x15e66 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15d0c:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   15d10:	90 e0       	ldi	r25, 0x00	; 0
   15d12:	0e 94 34 8b 	call	0x11668	; 0x11668 <SS80_is_MLA>
   15d16:	89 2b       	or	r24, r25
   15d18:	09 f4       	brne	.+2      	; 0x15d1c <SS80_COMMANDS+0x44>
   15d1a:	a2 c0       	rjmp	.+324    	; 0x15e60 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d20:	85 ff       	sbrs	r24, 5
   15d22:	0a c0       	rjmp	.+20     	; 0x15d38 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15d24:	8c e8       	ldi	r24, 0x8C	; 140
   15d26:	9e e1       	ldi	r25, 0x1E	; 30
   15d28:	a0 e0       	ldi	r26, 0x00	; 0
   15d2a:	ed b7       	in	r30, 0x3d	; 61
   15d2c:	fe b7       	in	r31, 0x3e	; 62
   15d2e:	81 83       	std	Z+1, r24	; 0x01
   15d30:	92 83       	std	Z+2, r25	; 0x02
   15d32:	a3 83       	std	Z+3, r26	; 0x03
   15d34:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                return ( SS80_Command_State() );
   15d38:	0e 94 a7 a5 	call	0x14b4e	; 0x14b4e <SS80_Command_State>
   15d3c:	73 c0       	rjmp	.+230    	; 0x15e24 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15d3e:	1e 36       	cpi	r17, 0x6E	; 110
   15d40:	01 f5       	brne	.+64     	; 0x15d82 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15d42:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   15d46:	90 e0       	ldi	r25, 0x00	; 0
   15d48:	0e 94 34 8b 	call	0x11668	; 0x11668 <SS80_is_MLA>
   15d4c:	89 2b       	or	r24, r25
   15d4e:	79 f0       	breq	.+30     	; 0x15d6e <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d54:	85 ff       	sbrs	r24, 5
   15d56:	13 c0       	rjmp	.+38     	; 0x15d7e <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15d58:	86 e7       	ldi	r24, 0x76	; 118
   15d5a:	9e e1       	ldi	r25, 0x1E	; 30
   15d5c:	a0 e0       	ldi	r26, 0x00	; 0
   15d5e:	ed b7       	in	r30, 0x3d	; 61
   15d60:	fe b7       	in	r31, 0x3e	; 62
   15d62:	81 83       	std	Z+1, r24	; 0x01
   15d64:	92 83       	std	Z+2, r25	; 0x02
   15d66:	a3 83       	std	Z+3, r26	; 0x03
   15d68:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15d6c:	08 c0       	rjmp	.+16     	; 0x15d7e <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15d6e:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   15d72:	90 e0       	ldi	r25, 0x00	; 0
   15d74:	0e 94 45 8b 	call	0x1168a	; 0x1168a <SS80_is_MTA>
   15d78:	89 2b       	or	r24, r25
   15d7a:	51 f7       	brne	.-44     	; 0x15d50 <SS80_COMMANDS+0x78>
   15d7c:	71 c0       	rjmp	.+226    	; 0x15e60 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15d7e:	52 df       	rcall	.-348    	; 0x15c24 <SS80_Execute_State>
   15d80:	51 c0       	rjmp	.+162    	; 0x15e24 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15d82:	10 37       	cpi	r17, 0x70	; 112
   15d84:	b9 f5       	brne	.+110    	; 0x15df4 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15d86:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   15d8a:	90 e0       	ldi	r25, 0x00	; 0
   15d8c:	0e 94 45 8b 	call	0x1168a	; 0x1168a <SS80_is_MTA>
   15d90:	89 2b       	or	r24, r25
   15d92:	81 f0       	breq	.+32     	; 0x15db4 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d94:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d98:	85 ff       	sbrs	r24, 5
   15d9a:	0a c0       	rjmp	.+20     	; 0x15db0 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15d9c:	81 e6       	ldi	r24, 0x61	; 97
   15d9e:	9e e1       	ldi	r25, 0x1E	; 30
   15da0:	a0 e0       	ldi	r26, 0x00	; 0
   15da2:	ed b7       	in	r30, 0x3d	; 61
   15da4:	fe b7       	in	r31, 0x3e	; 62
   15da6:	81 83       	std	Z+1, r24	; 0x01
   15da8:	92 83       	std	Z+2, r25	; 0x02
   15daa:	a3 83       	std	Z+3, r26	; 0x03
   15dac:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                return( SS80_Report() );
   15db0:	4c db       	rcall	.-2408   	; 0x1544a <SS80_Report>
   15db2:	38 c0       	rjmp	.+112    	; 0x15e24 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15db4:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   15db8:	90 e0       	ldi	r25, 0x00	; 0
   15dba:	0e 94 34 8b 	call	0x11668	; 0x11668 <SS80_is_MLA>
   15dbe:	89 2b       	or	r24, r25
   15dc0:	09 f4       	brne	.+2      	; 0x15dc4 <SS80_COMMANDS+0xec>
   15dc2:	4e c0       	rjmp	.+156    	; 0x15e60 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15dc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dc8:	85 ff       	sbrs	r24, 5
   15dca:	0a c0       	rjmp	.+20     	; 0x15de0 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15dcc:	82 e5       	ldi	r24, 0x52	; 82
   15dce:	9e e1       	ldi	r25, 0x1E	; 30
   15dd0:	a0 e0       	ldi	r26, 0x00	; 0
   15dd2:	ed b7       	in	r30, 0x3d	; 61
   15dd4:	fe b7       	in	r31, 0x3e	; 62
   15dd6:	81 83       	std	Z+1, r24	; 0x01
   15dd8:	92 83       	std	Z+2, r25	; 0x02
   15dda:	a3 83       	std	Z+3, r26	; 0x03
   15ddc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15de0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <SS80p>
   15de4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <SS80p+0x1>
   15de8:	81 81       	ldd	r24, Z+1	; 0x01
   15dea:	90 e0       	ldi	r25, 0x00	; 0
   15dec:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15df0:	1d dc       	rcall	.-1990   	; 0x1562c <SS80_Amigo_Clear>
   15df2:	18 c0       	rjmp	.+48     	; 0x15e24 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15df4:	12 37       	cpi	r17, 0x72	; 114
   15df6:	c1 f4       	brne	.+48     	; 0x15e28 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15df8:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   15dfc:	90 e0       	ldi	r25, 0x00	; 0
   15dfe:	0e 94 34 8b 	call	0x11668	; 0x11668 <SS80_is_MLA>
   15e02:	89 2b       	or	r24, r25
   15e04:	89 f0       	breq	.+34     	; 0x15e28 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e0a:	85 ff       	sbrs	r24, 5
   15e0c:	0a c0       	rjmp	.+20     	; 0x15e22 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15e0e:	8e e3       	ldi	r24, 0x3E	; 62
   15e10:	9e e1       	ldi	r25, 0x1E	; 30
   15e12:	a0 e0       	ldi	r26, 0x00	; 0
   15e14:	ed b7       	in	r30, 0x3d	; 61
   15e16:	fe b7       	in	r31, 0x3e	; 62
   15e18:	81 83       	std	Z+1, r24	; 0x01
   15e1a:	92 83       	std	Z+2, r25	; 0x02
   15e1c:	a3 83       	std	Z+3, r26	; 0x03
   15e1e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                return( SS80_Transparent_State() );
   15e22:	58 dc       	rcall	.-1872   	; 0x156d4 <SS80_Transparent_State>
   15e24:	ec 01       	movw	r28, r24
   15e26:	3b c0       	rjmp	.+118    	; 0x15e9e <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15e28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e2c:	80 ff       	sbrs	r24, 0
   15e2e:	18 c0       	rjmp	.+48     	; 0x15e60 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15e30:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   15e34:	90 e0       	ldi	r25, 0x00	; 0
   15e36:	ed b7       	in	r30, 0x3d	; 61
   15e38:	fe b7       	in	r31, 0x3e	; 62
   15e3a:	91 87       	std	Z+9, r25	; 0x09
   15e3c:	80 87       	std	Z+8, r24	; 0x08
   15e3e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   15e42:	90 e0       	ldi	r25, 0x00	; 0
   15e44:	97 83       	std	Z+7, r25	; 0x07
   15e46:	86 83       	std	Z+6, r24	; 0x06
   15e48:	81 2f       	mov	r24, r17
   15e4a:	90 e0       	ldi	r25, 0x00	; 0
   15e4c:	95 83       	std	Z+5, r25	; 0x05
   15e4e:	84 83       	std	Z+4, r24	; 0x04
   15e50:	8a e0       	ldi	r24, 0x0A	; 10
   15e52:	9e e1       	ldi	r25, 0x1E	; 30
   15e54:	a0 e0       	ldi	r26, 0x00	; 0
   15e56:	81 83       	std	Z+1, r24	; 0x01
   15e58:	92 83       	std	Z+2, r25	; 0x02
   15e5a:	a3 83       	std	Z+3, r26	; 0x03
   15e5c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15e60:	c0 e0       	ldi	r28, 0x00	; 0
   15e62:	d0 e0       	ldi	r29, 0x00	; 0
   15e64:	1c c0       	rjmp	.+56     	; 0x15e9e <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15e66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e6a:	80 ff       	sbrs	r24, 0
   15e6c:	f9 cf       	rjmp	.-14     	; 0x15e60 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15e6e:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   15e72:	90 e0       	ldi	r25, 0x00	; 0
   15e74:	ed b7       	in	r30, 0x3d	; 61
   15e76:	fe b7       	in	r31, 0x3e	; 62
   15e78:	91 87       	std	Z+9, r25	; 0x09
   15e7a:	80 87       	std	Z+8, r24	; 0x08
   15e7c:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   15e80:	90 e0       	ldi	r25, 0x00	; 0
   15e82:	97 83       	std	Z+7, r25	; 0x07
   15e84:	86 83       	std	Z+6, r24	; 0x06
   15e86:	81 2f       	mov	r24, r17
   15e88:	90 e0       	ldi	r25, 0x00	; 0
   15e8a:	95 83       	std	Z+5, r25	; 0x05
   15e8c:	84 83       	std	Z+4, r24	; 0x04
   15e8e:	86 ed       	ldi	r24, 0xD6	; 214
   15e90:	9d e1       	ldi	r25, 0x1D	; 29
   15e92:	a0 e0       	ldi	r26, 0x00	; 0
   15e94:	81 83       	std	Z+1, r24	; 0x01
   15e96:	92 83       	std	Z+2, r25	; 0x02
   15e98:	a3 83       	std	Z+3, r26	; 0x03
   15e9a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15e9e:	ce 01       	movw	r24, r28
   15ea0:	cd b7       	in	r28, 0x3d	; 61
   15ea2:	de b7       	in	r29, 0x3e	; 62
   15ea4:	29 96       	adiw	r28, 0x09	; 9
   15ea6:	e3 e0       	ldi	r30, 0x03	; 3
   15ea8:	0c 94 83 e2 	jmp	0x1c506	; 0x1c506 <__epilogue_restores__+0x1e>

00015eac <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15eac:	cf 92       	push	r12
   15eae:	df 92       	push	r13
   15eb0:	ef 92       	push	r14
   15eb2:	0f 93       	push	r16
   15eb4:	1f 93       	push	r17
   15eb6:	cf 93       	push	r28
   15eb8:	df 93       	push	r29
   15eba:	00 d0       	rcall	.+0      	; 0x15ebc <amigo_overflow_check+0x10>
   15ebc:	00 d0       	rcall	.+0      	; 0x15ebe <amigo_overflow_check+0x12>
   15ebe:	1f 92       	push	r1
   15ec0:	ec 01       	movw	r28, r24
   15ec2:	8b 01       	movw	r16, r22
   15ec4:	80 e0       	ldi	r24, 0x00	; 0
   15ec6:	90 e0       	ldi	r25, 0x00	; 0
   15ec8:	2e e8       	ldi	r18, 0x8E	; 142
   15eca:	3d e2       	ldi	r19, 0x2D	; 45
   15ecc:	69 01       	movw	r12, r18
   15ece:	e1 2c       	mov	r14, r1
   15ed0:	2d 81       	ldd	r18, Y+5	; 0x05
   15ed2:	30 e0       	ldi	r19, 0x00	; 0
   15ed4:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   15ed8:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   15edc:	40 85       	ldd	r20, Z+8	; 0x08
   15ede:	51 85       	ldd	r21, Z+9	; 0x09
   15ee0:	24 17       	cp	r18, r20
   15ee2:	35 07       	cpc	r19, r21
   15ee4:	64 f1       	brlt	.+88     	; 0x15f3e <amigo_overflow_check+0x92>
   15ee6:	1d 82       	std	Y+5, r1	; 0x05
   15ee8:	2c 81       	ldd	r18, Y+4	; 0x04
   15eea:	2f 5f       	subi	r18, 0xFF	; 255
   15eec:	2c 83       	std	Y+4, r18	; 0x04
   15eee:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   15ef2:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   15ef6:	2c 81       	ldd	r18, Y+4	; 0x04
   15ef8:	30 e0       	ldi	r19, 0x00	; 0
   15efa:	42 85       	ldd	r20, Z+10	; 0x0a
   15efc:	53 85       	ldd	r21, Z+11	; 0x0b
   15efe:	24 17       	cp	r18, r20
   15f00:	35 07       	cpc	r19, r21
   15f02:	34 f3       	brlt	.-52     	; 0x15ed0 <amigo_overflow_check+0x24>
   15f04:	1c 82       	std	Y+4, r1	; 0x04
   15f06:	2b 81       	ldd	r18, Y+3	; 0x03
   15f08:	2f 5f       	subi	r18, 0xFF	; 255
   15f0a:	2b 83       	std	Y+3, r18	; 0x03
   15f0c:	30 e0       	ldi	r19, 0x00	; 0
   15f0e:	44 85       	ldd	r20, Z+12	; 0x0c
   15f10:	55 85       	ldd	r21, Z+13	; 0x0d
   15f12:	24 17       	cp	r18, r20
   15f14:	35 07       	cpc	r19, r21
   15f16:	5c f3       	brlt	.-42     	; 0x15eee <amigo_overflow_check+0x42>
   15f18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f1c:	80 ff       	sbrs	r24, 0
   15f1e:	0c c0       	rjmp	.+24     	; 0x15f38 <amigo_overflow_check+0x8c>
   15f20:	01 15       	cp	r16, r1
   15f22:	11 05       	cpc	r17, r1
   15f24:	49 f0       	breq	.+18     	; 0x15f38 <amigo_overflow_check+0x8c>
   15f26:	ed b7       	in	r30, 0x3d	; 61
   15f28:	fe b7       	in	r31, 0x3e	; 62
   15f2a:	15 83       	std	Z+5, r17	; 0x05
   15f2c:	04 83       	std	Z+4, r16	; 0x04
   15f2e:	c1 82       	std	Z+1, r12	; 0x01
   15f30:	d2 82       	std	Z+2, r13	; 0x02
   15f32:	e3 82       	std	Z+3, r14	; 0x03
   15f34:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   15f38:	81 e0       	ldi	r24, 0x01	; 1
   15f3a:	90 e0       	ldi	r25, 0x00	; 0
   15f3c:	d8 cf       	rjmp	.-80     	; 0x15eee <amigo_overflow_check+0x42>
   15f3e:	0f 90       	pop	r0
   15f40:	0f 90       	pop	r0
   15f42:	0f 90       	pop	r0
   15f44:	0f 90       	pop	r0
   15f46:	0f 90       	pop	r0
   15f48:	df 91       	pop	r29
   15f4a:	cf 91       	pop	r28
   15f4c:	1f 91       	pop	r17
   15f4e:	0f 91       	pop	r16
   15f50:	ef 90       	pop	r14
   15f52:	df 90       	pop	r13
   15f54:	cf 90       	pop	r12
   15f56:	08 95       	ret

00015f58 <amigo_chs_to_logical>:
   15f58:	a1 e1       	ldi	r26, 0x11	; 17
   15f5a:	b0 e0       	ldi	r27, 0x00	; 0
   15f5c:	e2 eb       	ldi	r30, 0xB2	; 178
   15f5e:	ff ea       	ldi	r31, 0xAF	; 175
   15f60:	0c 94 5c e2 	jmp	0x1c4b8	; 0x1c4b8 <__prologue_saves__+0x8>
   15f64:	8b 01       	movw	r16, r22
   15f66:	60 91 5b 19 	lds	r22, 0x195B	; 0x80195b <AMIGOp>
   15f6a:	70 91 5c 19 	lds	r23, 0x195C	; 0x80195c <AMIGOp+0x1>
   15f6e:	fb 01       	movw	r30, r22
   15f70:	40 85       	ldd	r20, Z+8	; 0x08
   15f72:	51 85       	ldd	r21, Z+9	; 0x09
   15f74:	fc 01       	movw	r30, r24
   15f76:	c4 81       	ldd	r28, Z+4	; 0x04
   15f78:	d0 e0       	ldi	r29, 0x00	; 0
   15f7a:	4c 9f       	mul	r20, r28
   15f7c:	90 01       	movw	r18, r0
   15f7e:	4d 9f       	mul	r20, r29
   15f80:	30 0d       	add	r19, r0
   15f82:	5c 9f       	mul	r21, r28
   15f84:	30 0d       	add	r19, r0
   15f86:	11 24       	eor	r1, r1
   15f88:	49 01       	movw	r8, r18
   15f8a:	33 0f       	add	r19, r19
   15f8c:	aa 08       	sbc	r10, r10
   15f8e:	bb 08       	sbc	r11, r11
   15f90:	63 80       	ldd	r6, Z+3	; 0x03
   15f92:	71 2c       	mov	r7, r1
   15f94:	fb 01       	movw	r30, r22
   15f96:	e2 84       	ldd	r14, Z+10	; 0x0a
   15f98:	f3 84       	ldd	r15, Z+11	; 0x0b
   15f9a:	4e 9d       	mul	r20, r14
   15f9c:	d0 01       	movw	r26, r0
   15f9e:	4f 9d       	mul	r20, r15
   15fa0:	b0 0d       	add	r27, r0
   15fa2:	5e 9d       	mul	r21, r14
   15fa4:	b0 0d       	add	r27, r0
   15fa6:	11 24       	eor	r1, r1
   15fa8:	a6 9d       	mul	r26, r6
   15faa:	90 01       	movw	r18, r0
   15fac:	a7 9d       	mul	r26, r7
   15fae:	30 0d       	add	r19, r0
   15fb0:	b6 9d       	mul	r27, r6
   15fb2:	30 0d       	add	r19, r0
   15fb4:	11 24       	eor	r1, r1
   15fb6:	69 01       	movw	r12, r18
   15fb8:	33 0f       	add	r19, r19
   15fba:	ee 08       	sbc	r14, r14
   15fbc:	ff 08       	sbc	r15, r15
   15fbe:	8c 0c       	add	r8, r12
   15fc0:	9d 1c       	adc	r9, r13
   15fc2:	ae 1c       	adc	r10, r14
   15fc4:	bf 1c       	adc	r11, r15
   15fc6:	fc 01       	movw	r30, r24
   15fc8:	f5 80       	ldd	r15, Z+5	; 0x05
   15fca:	a5 01       	movw	r20, r10
   15fcc:	94 01       	movw	r18, r8
   15fce:	2f 0d       	add	r18, r15
   15fd0:	31 1d       	adc	r19, r1
   15fd2:	41 1d       	adc	r20, r1
   15fd4:	51 1d       	adc	r21, r1
   15fd6:	fb 01       	movw	r30, r22
   15fd8:	a6 81       	ldd	r26, Z+6	; 0x06
   15fda:	b7 81       	ldd	r27, Z+7	; 0x07
   15fdc:	0e 94 42 e2 	call	0x1c484	; 0x1c484 <__mulshisi3>
   15fe0:	4b 01       	movw	r8, r22
   15fe2:	5c 01       	movw	r10, r24
   15fe4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fe8:	85 ff       	sbrs	r24, 5
   15fea:	22 c0       	rjmp	.+68     	; 0x16030 <amigo_chs_to_logical+0xd8>
   15fec:	8f 2d       	mov	r24, r15
   15fee:	90 e0       	ldi	r25, 0x00	; 0
   15ff0:	ed b7       	in	r30, 0x3d	; 61
   15ff2:	fe b7       	in	r31, 0x3e	; 62
   15ff4:	91 8b       	std	Z+17, r25	; 0x11
   15ff6:	80 8b       	std	Z+16, r24	; 0x10
   15ff8:	d7 87       	std	Z+15, r29	; 0x0f
   15ffa:	c6 87       	std	Z+14, r28	; 0x0e
   15ffc:	75 86       	std	Z+13, r7	; 0x0d
   15ffe:	64 86       	std	Z+12, r6	; 0x0c
   16000:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16004:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16008:	81 81       	ldd	r24, Z+1	; 0x01
   1600a:	90 e0       	ldi	r25, 0x00	; 0
   1600c:	ed b7       	in	r30, 0x3d	; 61
   1600e:	fe b7       	in	r31, 0x3e	; 62
   16010:	93 87       	std	Z+11, r25	; 0x0b
   16012:	82 87       	std	Z+10, r24	; 0x0a
   16014:	86 82       	std	Z+6, r8	; 0x06
   16016:	97 82       	std	Z+7, r9	; 0x07
   16018:	a0 86       	std	Z+8, r10	; 0x08
   1601a:	b1 86       	std	Z+9, r11	; 0x09
   1601c:	15 83       	std	Z+5, r17	; 0x05
   1601e:	04 83       	std	Z+4, r16	; 0x04
   16020:	8b e3       	ldi	r24, 0x3B	; 59
   16022:	9d e2       	ldi	r25, 0x2D	; 45
   16024:	a0 e0       	ldi	r26, 0x00	; 0
   16026:	81 83       	std	Z+1, r24	; 0x01
   16028:	92 83       	std	Z+2, r25	; 0x02
   1602a:	a3 83       	std	Z+3, r26	; 0x03
   1602c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16030:	c5 01       	movw	r24, r10
   16032:	b4 01       	movw	r22, r8
   16034:	cd b7       	in	r28, 0x3d	; 61
   16036:	de b7       	in	r29, 0x3e	; 62
   16038:	61 96       	adiw	r28, 0x11	; 17
   1603a:	ee e0       	ldi	r30, 0x0E	; 14
   1603c:	0c 94 78 e2 	jmp	0x1c4f0	; 0x1c4f0 <__epilogue_restores__+0x8>

00016040 <amigo_init>:
   16040:	ef 92       	push	r14
   16042:	ff 92       	push	r15
   16044:	0f 93       	push	r16
   16046:	1f 93       	push	r17
   16048:	cf 93       	push	r28
   1604a:	df 93       	push	r29
   1604c:	03 ec       	ldi	r16, 0xC3	; 195
   1604e:	10 e2       	ldi	r17, 0x20	; 32
   16050:	cb e0       	ldi	r28, 0x0B	; 11
   16052:	d0 e0       	ldi	r29, 0x00	; 0
   16054:	84 e0       	ldi	r24, 0x04	; 4
   16056:	f8 2e       	mov	r15, r24
   16058:	92 e0       	ldi	r25, 0x02	; 2
   1605a:	e9 2e       	mov	r14, r25
   1605c:	d8 01       	movw	r26, r16
   1605e:	8c 91       	ld	r24, X
   16060:	81 30       	cpi	r24, 0x01	; 1
   16062:	31 f5       	brne	.+76     	; 0x160b0 <amigo_init+0x70>
   16064:	ce 01       	movw	r24, r28
   16066:	0e 94 4c 96 	call	0x12c98	; 0x12c98 <set_active_device>
   1606a:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   1606e:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16072:	10 82       	st	Z, r1
   16074:	9f 01       	movw	r18, r30
   16076:	27 5f       	subi	r18, 0xF7	; 247
   16078:	3f 4f       	sbci	r19, 0xFF	; 255
   1607a:	d9 01       	movw	r26, r18
   1607c:	8f 2d       	mov	r24, r15
   1607e:	1d 92       	st	X+, r1
   16080:	8a 95       	dec	r24
   16082:	e9 f7       	brne	.-6      	; 0x1607e <amigo_init+0x3e>
   16084:	2c 5f       	subi	r18, 0xFC	; 252
   16086:	3f 4f       	sbci	r19, 0xFF	; 255
   16088:	d9 01       	movw	r26, r18
   1608a:	8f 2d       	mov	r24, r15
   1608c:	1d 92       	st	X+, r1
   1608e:	8a 95       	dec	r24
   16090:	e9 f7       	brne	.-6      	; 0x1608c <amigo_init+0x4c>
   16092:	11 82       	std	Z+1, r1	; 0x01
   16094:	15 82       	std	Z+5, r1	; 0x05
   16096:	14 82       	std	Z+4, r1	; 0x04
   16098:	13 82       	std	Z+3, r1	; 0x03
   1609a:	e6 82       	std	Z+6, r14	; 0x06
   1609c:	10 86       	std	Z+8, r1	; 0x08
   1609e:	17 82       	std	Z+7, r1	; 0x07
   160a0:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   160a4:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   160a8:	81 81       	ldd	r24, Z+1	; 0x01
   160aa:	90 e0       	ldi	r25, 0x00	; 0
   160ac:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
   160b0:	21 97       	sbiw	r28, 0x01	; 1
   160b2:	0b 52       	subi	r16, 0x2B	; 43
   160b4:	11 09       	sbc	r17, r1
   160b6:	cf 3f       	cpi	r28, 0xFF	; 255
   160b8:	af ef       	ldi	r26, 0xFF	; 255
   160ba:	da 07       	cpc	r29, r26
   160bc:	79 f6       	brne	.-98     	; 0x1605c <amigo_init+0x1c>
   160be:	cd b7       	in	r28, 0x3d	; 61
   160c0:	de b7       	in	r29, 0x3e	; 62
   160c2:	e6 e0       	ldi	r30, 0x06	; 6
   160c4:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

000160c8 <amigo_request_logical_address>:
   160c8:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   160cc:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   160d0:	15 86       	std	Z+13, r1	; 0x0d
   160d2:	83 81       	ldd	r24, Z+3	; 0x03
   160d4:	86 87       	std	Z+14, r24	; 0x0e
   160d6:	84 81       	ldd	r24, Z+4	; 0x04
   160d8:	87 87       	std	Z+15, r24	; 0x0f
   160da:	85 81       	ldd	r24, Z+5	; 0x05
   160dc:	80 8b       	std	Z+16, r24	; 0x10
   160de:	80 e0       	ldi	r24, 0x00	; 0
   160e0:	90 e0       	ldi	r25, 0x00	; 0
   160e2:	08 95       	ret

000160e4 <amigo_request_status>:
   160e4:	00 d0       	rcall	.+0      	; 0x160e6 <amigo_request_status+0x2>
   160e6:	1f 92       	push	r1
   160e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160ec:	85 ff       	sbrs	r24, 5
   160ee:	0a c0       	rjmp	.+20     	; 0x16104 <amigo_request_status+0x20>
   160f0:	8e e0       	ldi	r24, 0x0E	; 14
   160f2:	9e e2       	ldi	r25, 0x2E	; 46
   160f4:	a0 e0       	ldi	r26, 0x00	; 0
   160f6:	ed b7       	in	r30, 0x3d	; 61
   160f8:	fe b7       	in	r31, 0x3e	; 62
   160fa:	81 83       	std	Z+1, r24	; 0x01
   160fc:	92 83       	std	Z+2, r25	; 0x02
   160fe:	a3 83       	std	Z+3, r26	; 0x03
   16100:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16104:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16108:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   1610c:	11 86       	std	Z+9, r1	; 0x09
   1610e:	81 81       	ldd	r24, Z+1	; 0x01
   16110:	82 87       	std	Z+10, r24	; 0x0a
   16112:	8d e0       	ldi	r24, 0x0D	; 13
   16114:	83 87       	std	Z+11, r24	; 0x0b
   16116:	14 86       	std	Z+12, r1	; 0x0c
   16118:	0e 94 bd 6e 	call	0xdd7a	; 0xdd7a <mmc_wp_status>
   1611c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16120:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16124:	89 2b       	or	r24, r25
   16126:	19 f0       	breq	.+6      	; 0x1612e <amigo_request_status+0x4a>
   16128:	84 85       	ldd	r24, Z+12	; 0x0c
   1612a:	80 66       	ori	r24, 0x60	; 96
   1612c:	84 87       	std	Z+12, r24	; 0x0c
   1612e:	86 81       	ldd	r24, Z+6	; 0x06
   16130:	82 30       	cpi	r24, 0x02	; 2
   16132:	31 f4       	brne	.+12     	; 0x16140 <amigo_request_status+0x5c>
   16134:	83 e1       	ldi	r24, 0x13	; 19
   16136:	81 87       	std	Z+9, r24	; 0x09
   16138:	84 85       	ldd	r24, Z+12	; 0x0c
   1613a:	88 60       	ori	r24, 0x08	; 8
   1613c:	84 87       	std	Z+12, r24	; 0x0c
   1613e:	21 c0       	rjmp	.+66     	; 0x16182 <amigo_request_status+0x9e>
   16140:	27 81       	ldd	r18, Z+7	; 0x07
   16142:	30 85       	ldd	r19, Z+8	; 0x08
   16144:	21 15       	cp	r18, r1
   16146:	31 05       	cpc	r19, r1
   16148:	11 f4       	brne	.+4      	; 0x1614e <amigo_request_status+0x6a>
   1614a:	81 30       	cpi	r24, 0x01	; 1
   1614c:	d1 f4       	brne	.+52     	; 0x16182 <amigo_request_status+0x9e>
   1614e:	26 fd       	sbrc	r18, 6
   16150:	0c c0       	rjmp	.+24     	; 0x1616a <amigo_request_status+0x86>
   16152:	25 ff       	sbrs	r18, 5
   16154:	03 c0       	rjmp	.+6      	; 0x1615c <amigo_request_status+0x78>
   16156:	8a e0       	ldi	r24, 0x0A	; 10
   16158:	81 87       	std	Z+9, r24	; 0x09
   1615a:	0d c0       	rjmp	.+26     	; 0x16176 <amigo_request_status+0x92>
   1615c:	84 85       	ldd	r24, Z+12	; 0x0c
   1615e:	24 ff       	sbrs	r18, 4
   16160:	02 c0       	rjmp	.+4      	; 0x16166 <amigo_request_status+0x82>
   16162:	83 60       	ori	r24, 0x03	; 3
   16164:	07 c0       	rjmp	.+14     	; 0x16174 <amigo_request_status+0x90>
   16166:	21 ff       	sbrs	r18, 1
   16168:	02 c0       	rjmp	.+4      	; 0x1616e <amigo_request_status+0x8a>
   1616a:	83 e1       	ldi	r24, 0x13	; 19
   1616c:	f5 cf       	rjmp	.-22     	; 0x16158 <amigo_request_status+0x74>
   1616e:	22 ff       	sbrs	r18, 2
   16170:	02 c0       	rjmp	.+4      	; 0x16176 <amigo_request_status+0x92>
   16172:	84 60       	ori	r24, 0x04	; 4
   16174:	84 87       	std	Z+12, r24	; 0x0c
   16176:	84 85       	ldd	r24, Z+12	; 0x0c
   16178:	80 61       	ori	r24, 0x10	; 16
   1617a:	84 87       	std	Z+12, r24	; 0x0c
   1617c:	83 85       	ldd	r24, Z+11	; 0x0b
   1617e:	80 68       	ori	r24, 0x80	; 128
   16180:	83 87       	std	Z+11, r24	; 0x0b
   16182:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16186:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   1618a:	81 81       	ldd	r24, Z+1	; 0x01
   1618c:	90 e0       	ldi	r25, 0x00	; 0
   1618e:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   16192:	80 e0       	ldi	r24, 0x00	; 0
   16194:	90 e0       	ldi	r25, 0x00	; 0
   16196:	0f 90       	pop	r0
   16198:	0f 90       	pop	r0
   1619a:	0f 90       	pop	r0
   1619c:	08 95       	ret

0001619e <amigo_send_logical_address>:
   1619e:	a5 e0       	ldi	r26, 0x05	; 5
   161a0:	b0 e0       	ldi	r27, 0x00	; 0
   161a2:	e5 ed       	ldi	r30, 0xD5	; 213
   161a4:	f0 eb       	ldi	r31, 0xB0	; 176
   161a6:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   161aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161ae:	85 ff       	sbrs	r24, 5
   161b0:	0a c0       	rjmp	.+20     	; 0x161c6 <amigo_send_logical_address+0x28>
   161b2:	80 ef       	ldi	r24, 0xF0	; 240
   161b4:	9d e2       	ldi	r25, 0x2D	; 45
   161b6:	a0 e0       	ldi	r26, 0x00	; 0
   161b8:	ed b7       	in	r30, 0x3d	; 61
   161ba:	fe b7       	in	r31, 0x3e	; 62
   161bc:	81 83       	std	Z+1, r24	; 0x01
   161be:	92 83       	std	Z+2, r25	; 0x02
   161c0:	a3 83       	std	Z+3, r26	; 0x03
   161c2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   161c6:	80 e0       	ldi	r24, 0x00	; 0
   161c8:	91 e0       	ldi	r25, 0x01	; 1
   161ca:	9d 83       	std	Y+5, r25	; 0x05
   161cc:	8c 83       	std	Y+4, r24	; 0x04
   161ce:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <AMIGOs>
   161d2:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <AMIGOs+0x1>
   161d6:	ae 01       	movw	r20, r28
   161d8:	4c 5f       	subi	r20, 0xFC	; 252
   161da:	5f 4f       	sbci	r21, 0xFF	; 255
   161dc:	64 e0       	ldi	r22, 0x04	; 4
   161de:	70 e0       	ldi	r23, 0x00	; 0
   161e0:	0d 96       	adiw	r24, 0x0d	; 13
   161e2:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   161e6:	2c 81       	ldd	r18, Y+4	; 0x04
   161e8:	3d 81       	ldd	r19, Y+5	; 0x05
   161ea:	22 27       	eor	r18, r18
   161ec:	30 7d       	andi	r19, 0xD0	; 208
   161ee:	23 2b       	or	r18, r19
   161f0:	11 f4       	brne	.+4      	; 0x161f6 <amigo_send_logical_address+0x58>
   161f2:	04 97       	sbiw	r24, 0x04	; 4
   161f4:	c9 f0       	breq	.+50     	; 0x16228 <amigo_send_logical_address+0x8a>
   161f6:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   161fa:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   161fe:	87 81       	ldd	r24, Z+7	; 0x07
   16200:	90 85       	ldd	r25, Z+8	; 0x08
   16202:	80 62       	ori	r24, 0x20	; 32
   16204:	90 87       	std	Z+8, r25	; 0x08
   16206:	87 83       	std	Z+7, r24	; 0x07
   16208:	81 e0       	ldi	r24, 0x01	; 1
   1620a:	86 83       	std	Z+6, r24	; 0x06
   1620c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16210:	80 ff       	sbrs	r24, 0
   16212:	0a c0       	rjmp	.+20     	; 0x16228 <amigo_send_logical_address+0x8a>
   16214:	86 ed       	ldi	r24, 0xD6	; 214
   16216:	9d e2       	ldi	r25, 0x2D	; 45
   16218:	a0 e0       	ldi	r26, 0x00	; 0
   1621a:	ed b7       	in	r30, 0x3d	; 61
   1621c:	fe b7       	in	r31, 0x3e	; 62
   1621e:	81 83       	std	Z+1, r24	; 0x01
   16220:	92 83       	std	Z+2, r25	; 0x02
   16222:	a3 83       	std	Z+3, r26	; 0x03
   16224:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16228:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   1622c:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16230:	81 81       	ldd	r24, Z+1	; 0x01
   16232:	90 e0       	ldi	r25, 0x00	; 0
   16234:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   16238:	8c 81       	ldd	r24, Y+4	; 0x04
   1623a:	9d 81       	ldd	r25, Y+5	; 0x05
   1623c:	88 27       	eor	r24, r24
   1623e:	90 7d       	andi	r25, 0xD0	; 208
   16240:	25 96       	adiw	r28, 0x05	; 5
   16242:	e2 e0       	ldi	r30, 0x02	; 2
   16244:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00016248 <amigo_send_status>:
   16248:	a5 e0       	ldi	r26, 0x05	; 5
   1624a:	b0 e0       	ldi	r27, 0x00	; 0
   1624c:	ea e2       	ldi	r30, 0x2A	; 42
   1624e:	f1 eb       	ldi	r31, 0xB1	; 177
   16250:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   16254:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16258:	85 ff       	sbrs	r24, 5
   1625a:	0a c0       	rjmp	.+20     	; 0x16270 <amigo_send_status+0x28>
   1625c:	81 ec       	ldi	r24, 0xC1	; 193
   1625e:	9d e2       	ldi	r25, 0x2D	; 45
   16260:	a0 e0       	ldi	r26, 0x00	; 0
   16262:	ed b7       	in	r30, 0x3d	; 61
   16264:	fe b7       	in	r31, 0x3e	; 62
   16266:	81 83       	std	Z+1, r24	; 0x01
   16268:	92 83       	std	Z+2, r25	; 0x02
   1626a:	a3 83       	std	Z+3, r26	; 0x03
   1626c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16270:	80 e0       	ldi	r24, 0x00	; 0
   16272:	91 e0       	ldi	r25, 0x01	; 1
   16274:	9d 83       	std	Y+5, r25	; 0x05
   16276:	8c 83       	std	Y+4, r24	; 0x04
   16278:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <AMIGOs>
   1627c:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <AMIGOs+0x1>
   16280:	ae 01       	movw	r20, r28
   16282:	4c 5f       	subi	r20, 0xFC	; 252
   16284:	5f 4f       	sbci	r21, 0xFF	; 255
   16286:	64 e0       	ldi	r22, 0x04	; 4
   16288:	70 e0       	ldi	r23, 0x00	; 0
   1628a:	09 96       	adiw	r24, 0x09	; 9
   1628c:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   16290:	2c 81       	ldd	r18, Y+4	; 0x04
   16292:	3d 81       	ldd	r19, Y+5	; 0x05
   16294:	22 27       	eor	r18, r18
   16296:	30 7d       	andi	r19, 0xD0	; 208
   16298:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   1629c:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   162a0:	23 2b       	or	r18, r19
   162a2:	11 f4       	brne	.+4      	; 0x162a8 <amigo_send_status+0x60>
   162a4:	04 97       	sbiw	r24, 0x04	; 4
   162a6:	b1 f0       	breq	.+44     	; 0x162d4 <amigo_send_status+0x8c>
   162a8:	87 81       	ldd	r24, Z+7	; 0x07
   162aa:	90 85       	ldd	r25, Z+8	; 0x08
   162ac:	80 62       	ori	r24, 0x20	; 32
   162ae:	90 87       	std	Z+8, r25	; 0x08
   162b0:	87 83       	std	Z+7, r24	; 0x07
   162b2:	81 e0       	ldi	r24, 0x01	; 1
   162b4:	86 83       	std	Z+6, r24	; 0x06
   162b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162ba:	80 ff       	sbrs	r24, 0
   162bc:	0e c0       	rjmp	.+28     	; 0x162da <amigo_send_status+0x92>
   162be:	87 ea       	ldi	r24, 0xA7	; 167
   162c0:	9d e2       	ldi	r25, 0x2D	; 45
   162c2:	a0 e0       	ldi	r26, 0x00	; 0
   162c4:	ed b7       	in	r30, 0x3d	; 61
   162c6:	fe b7       	in	r31, 0x3e	; 62
   162c8:	81 83       	std	Z+1, r24	; 0x01
   162ca:	92 83       	std	Z+2, r25	; 0x02
   162cc:	a3 83       	std	Z+3, r26	; 0x03
   162ce:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   162d2:	03 c0       	rjmp	.+6      	; 0x162da <amigo_send_status+0x92>
   162d4:	10 86       	std	Z+8, r1	; 0x08
   162d6:	17 82       	std	Z+7, r1	; 0x07
   162d8:	16 82       	std	Z+6, r1	; 0x06
   162da:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   162de:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   162e2:	81 81       	ldd	r24, Z+1	; 0x01
   162e4:	90 e0       	ldi	r25, 0x00	; 0
   162e6:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   162ea:	8c 81       	ldd	r24, Y+4	; 0x04
   162ec:	9d 81       	ldd	r25, Y+5	; 0x05
   162ee:	88 27       	eor	r24, r24
   162f0:	90 7d       	andi	r25, 0xD0	; 208
   162f2:	25 96       	adiw	r28, 0x05	; 5
   162f4:	e2 e0       	ldi	r30, 0x02	; 2
   162f6:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000162fa <amigo_increment>:
   162fa:	a1 e1       	ldi	r26, 0x11	; 17
   162fc:	b0 e0       	ldi	r27, 0x00	; 0
   162fe:	e3 e8       	ldi	r30, 0x83	; 131
   16300:	f1 eb       	ldi	r31, 0xB1	; 177
   16302:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   16306:	bc 01       	movw	r22, r24
   16308:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   1630c:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16310:	91 e1       	ldi	r25, 0x11	; 17
   16312:	de 01       	movw	r26, r28
   16314:	11 96       	adiw	r26, 0x01	; 1
   16316:	01 90       	ld	r0, Z+
   16318:	0d 92       	st	X+, r0
   1631a:	9a 95       	dec	r25
   1631c:	e1 f7       	brne	.-8      	; 0x16316 <amigo_increment+0x1c>
   1631e:	9e 81       	ldd	r25, Y+6	; 0x06
   16320:	9f 5f       	subi	r25, 0xFF	; 255
   16322:	9e 83       	std	Y+6, r25	; 0x06
   16324:	ce 01       	movw	r24, r28
   16326:	01 96       	adiw	r24, 0x01	; 1
   16328:	c1 dd       	rcall	.-1150   	; 0x15eac <amigo_overflow_check>
   1632a:	00 97       	sbiw	r24, 0x00	; 0
   1632c:	59 f4       	brne	.+22     	; 0x16344 <amigo_increment+0x4a>
   1632e:	a0 91 59 19 	lds	r26, 0x1959	; 0x801959 <AMIGOs>
   16332:	b0 91 5a 19 	lds	r27, 0x195A	; 0x80195a <AMIGOs+0x1>
   16336:	21 e1       	ldi	r18, 0x11	; 17
   16338:	fe 01       	movw	r30, r28
   1633a:	31 96       	adiw	r30, 0x01	; 1
   1633c:	01 90       	ld	r0, Z+
   1633e:	0d 92       	st	X+, r0
   16340:	2a 95       	dec	r18
   16342:	e1 f7       	brne	.-8      	; 0x1633c <amigo_increment+0x42>
   16344:	61 96       	adiw	r28, 0x11	; 17
   16346:	e2 e0       	ldi	r30, 0x02	; 2
   16348:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0001634c <amigo_seek>:
   1634c:	0f 93       	push	r16
   1634e:	1f 93       	push	r17
   16350:	cf 93       	push	r28
   16352:	df 93       	push	r29
   16354:	ec 01       	movw	r28, r24
   16356:	62 e9       	ldi	r22, 0x92	; 146
   16358:	75 e1       	ldi	r23, 0x15	; 21
   1635a:	a8 dd       	rcall	.-1200   	; 0x15eac <amigo_overflow_check>
   1635c:	8c 01       	movw	r16, r24
   1635e:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16362:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16366:	89 2b       	or	r24, r25
   16368:	41 f0       	breq	.+16     	; 0x1637a <amigo_seek+0x2e>
   1636a:	81 e0       	ldi	r24, 0x01	; 1
   1636c:	86 83       	std	Z+6, r24	; 0x06
   1636e:	87 81       	ldd	r24, Z+7	; 0x07
   16370:	90 85       	ldd	r25, Z+8	; 0x08
   16372:	84 60       	ori	r24, 0x04	; 4
   16374:	90 87       	std	Z+8, r25	; 0x08
   16376:	87 83       	std	Z+7, r24	; 0x07
   16378:	06 c0       	rjmp	.+12     	; 0x16386 <amigo_seek+0x3a>
   1637a:	8d 81       	ldd	r24, Y+5	; 0x05
   1637c:	85 83       	std	Z+5, r24	; 0x05
   1637e:	8c 81       	ldd	r24, Y+4	; 0x04
   16380:	84 83       	std	Z+4, r24	; 0x04
   16382:	8b 81       	ldd	r24, Y+3	; 0x03
   16384:	83 83       	std	Z+3, r24	; 0x03
   16386:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   1638a:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   1638e:	81 81       	ldd	r24, Z+1	; 0x01
   16390:	90 e0       	ldi	r25, 0x00	; 0
   16392:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   16396:	c8 01       	movw	r24, r16
   16398:	df 91       	pop	r29
   1639a:	cf 91       	pop	r28
   1639c:	1f 91       	pop	r17
   1639e:	0f 91       	pop	r16
   163a0:	08 95       	ret

000163a2 <amigo_verify>:
   163a2:	8f 92       	push	r8
   163a4:	9f 92       	push	r9
   163a6:	af 92       	push	r10
   163a8:	bf 92       	push	r11
   163aa:	ef 92       	push	r14
   163ac:	ff 92       	push	r15
   163ae:	0f 93       	push	r16
   163b0:	1f 93       	push	r17
   163b2:	cf 93       	push	r28
   163b4:	df 93       	push	r29
   163b6:	ad b7       	in	r26, 0x3d	; 61
   163b8:	be b7       	in	r27, 0x3e	; 62
   163ba:	19 97       	sbiw	r26, 0x09	; 9
   163bc:	0f b6       	in	r0, 0x3f	; 63
   163be:	f8 94       	cli
   163c0:	be bf       	out	0x3e, r27	; 62
   163c2:	0f be       	out	0x3f, r0	; 63
   163c4:	ad bf       	out	0x3d, r26	; 61
   163c6:	7c 01       	movw	r14, r24
   163c8:	67 e9       	ldi	r22, 0x97	; 151
   163ca:	75 e1       	ldi	r23, 0x15	; 21
   163cc:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <AMIGOs>
   163d0:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <AMIGOs+0x1>
   163d4:	c1 dd       	rcall	.-1150   	; 0x15f58 <amigo_chs_to_logical>
   163d6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   163da:	25 ff       	sbrs	r18, 5
   163dc:	10 c0       	rjmp	.+32     	; 0x163fe <amigo_verify+0x5c>
   163de:	ed b7       	in	r30, 0x3d	; 61
   163e0:	fe b7       	in	r31, 0x3e	; 62
   163e2:	e0 86       	std	Z+8, r14	; 0x08
   163e4:	f1 86       	std	Z+9, r15	; 0x09
   163e6:	64 83       	std	Z+4, r22	; 0x04
   163e8:	75 83       	std	Z+5, r23	; 0x05
   163ea:	86 83       	std	Z+6, r24	; 0x06
   163ec:	97 83       	std	Z+7, r25	; 0x07
   163ee:	86 e6       	ldi	r24, 0x66	; 102
   163f0:	9d e2       	ldi	r25, 0x2D	; 45
   163f2:	a0 e0       	ldi	r26, 0x00	; 0
   163f4:	81 83       	std	Z+1, r24	; 0x01
   163f6:	92 83       	std	Z+2, r25	; 0x02
   163f8:	a3 83       	std	Z+3, r26	; 0x03
   163fa:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   163fe:	e7 01       	movw	r28, r14
   16400:	20 97       	sbiw	r28, 0x00	; 0
   16402:	09 f4       	brne	.+2      	; 0x16406 <amigo_verify+0x64>
   16404:	4b c0       	rjmp	.+150    	; 0x1649c <amigo_verify+0xfa>
   16406:	64 ea       	ldi	r22, 0xA4	; 164
   16408:	75 e1       	ldi	r23, 0x15	; 21
   1640a:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <AMIGOs>
   1640e:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <AMIGOs+0x1>
   16412:	a2 dd       	rcall	.-1212   	; 0x15f58 <amigo_chs_to_logical>
   16414:	4b 01       	movw	r8, r22
   16416:	5c 01       	movw	r10, r24
   16418:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1641c:	86 fd       	sbrc	r24, 6
   1641e:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   16422:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16426:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   1642a:	e0 90 59 19 	lds	r14, 0x1959	; 0x801959 <AMIGOs>
   1642e:	f0 90 5a 19 	lds	r15, 0x195A	; 0x80195a <AMIGOs+0x1>
   16432:	87 e0       	ldi	r24, 0x07	; 7
   16434:	e8 0e       	add	r14, r24
   16436:	f1 1c       	adc	r15, r1
   16438:	06 81       	ldd	r16, Z+6	; 0x06
   1643a:	17 81       	ldd	r17, Z+7	; 0x07
   1643c:	20 ee       	ldi	r18, 0xE0	; 224
   1643e:	3c e1       	ldi	r19, 0x1C	; 28
   16440:	b5 01       	movw	r22, r10
   16442:	a4 01       	movw	r20, r8
   16444:	82 81       	ldd	r24, Z+2	; 0x02
   16446:	93 81       	ldd	r25, Z+3	; 0x03
   16448:	0e 94 5d 83 	call	0x106ba	; 0x106ba <dbf_open_read>
   1644c:	7c 01       	movw	r14, r24
   1644e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16452:	86 ff       	sbrs	r24, 6
   16454:	04 c0       	rjmp	.+8      	; 0x1645e <amigo_verify+0xbc>
   16456:	8b ea       	ldi	r24, 0xAB	; 171
   16458:	90 e1       	ldi	r25, 0x10	; 16
   1645a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   1645e:	20 91 59 19 	lds	r18, 0x1959	; 0x801959 <AMIGOs>
   16462:	30 91 5a 19 	lds	r19, 0x195A	; 0x80195a <AMIGOs+0x1>
   16466:	f9 01       	movw	r30, r18
   16468:	87 81       	ldd	r24, Z+7	; 0x07
   1646a:	90 85       	ldd	r25, Z+8	; 0x08
   1646c:	89 2b       	or	r24, r25
   1646e:	21 f0       	breq	.+8      	; 0x16478 <amigo_verify+0xd6>
   16470:	81 e0       	ldi	r24, 0x01	; 1
   16472:	f9 01       	movw	r30, r18
   16474:	86 83       	std	Z+6, r24	; 0x06
   16476:	15 c0       	rjmp	.+42     	; 0x164a2 <amigo_verify+0x100>
   16478:	80 91 5b 19 	lds	r24, 0x195B	; 0x80195b <AMIGOp>
   1647c:	90 91 5c 19 	lds	r25, 0x195C	; 0x80195c <AMIGOp+0x1>
   16480:	fc 01       	movw	r30, r24
   16482:	86 81       	ldd	r24, Z+6	; 0x06
   16484:	97 81       	ldd	r25, Z+7	; 0x07
   16486:	e8 16       	cp	r14, r24
   16488:	f9 06       	cpc	r15, r25
   1648a:	91 f7       	brne	.-28     	; 0x16470 <amigo_verify+0xce>
   1648c:	8c ea       	ldi	r24, 0xAC	; 172
   1648e:	95 e1       	ldi	r25, 0x15	; 21
   16490:	34 df       	rcall	.-408    	; 0x162fa <amigo_increment>
   16492:	21 97       	sbiw	r28, 0x01	; 1
   16494:	89 2b       	or	r24, r25
   16496:	09 f4       	brne	.+2      	; 0x1649a <amigo_verify+0xf8>
   16498:	b3 cf       	rjmp	.-154    	; 0x16400 <amigo_verify+0x5e>
   1649a:	03 c0       	rjmp	.+6      	; 0x164a2 <amigo_verify+0x100>
   1649c:	c0 e0       	ldi	r28, 0x00	; 0
   1649e:	d0 e0       	ldi	r29, 0x00	; 0
   164a0:	02 c0       	rjmp	.+4      	; 0x164a6 <amigo_verify+0x104>
   164a2:	c1 e0       	ldi	r28, 0x01	; 1
   164a4:	d0 e0       	ldi	r29, 0x00	; 0
   164a6:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   164aa:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   164ae:	81 81       	ldd	r24, Z+1	; 0x01
   164b0:	90 e0       	ldi	r25, 0x00	; 0
   164b2:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   164b6:	ce 01       	movw	r24, r28
   164b8:	ad b7       	in	r26, 0x3d	; 61
   164ba:	be b7       	in	r27, 0x3e	; 62
   164bc:	19 96       	adiw	r26, 0x09	; 9
   164be:	0f b6       	in	r0, 0x3f	; 63
   164c0:	f8 94       	cli
   164c2:	be bf       	out	0x3e, r27	; 62
   164c4:	0f be       	out	0x3f, r0	; 63
   164c6:	ad bf       	out	0x3d, r26	; 61
   164c8:	df 91       	pop	r29
   164ca:	cf 91       	pop	r28
   164cc:	1f 91       	pop	r17
   164ce:	0f 91       	pop	r16
   164d0:	ff 90       	pop	r15
   164d2:	ef 90       	pop	r14
   164d4:	bf 90       	pop	r11
   164d6:	af 90       	pop	r10
   164d8:	9f 90       	pop	r9
   164da:	8f 90       	pop	r8
   164dc:	08 95       	ret

000164de <amigo_format>:
   164de:	ef 92       	push	r14
   164e0:	ff 92       	push	r15
   164e2:	0f 93       	push	r16
   164e4:	1f 93       	push	r17
   164e6:	cf 93       	push	r28
   164e8:	df 93       	push	r29
   164ea:	00 d0       	rcall	.+0      	; 0x164ec <amigo_format+0xe>
   164ec:	1f 92       	push	r1
   164ee:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   164f2:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   164f6:	15 82       	std	Z+5, r1	; 0x05
   164f8:	14 82       	std	Z+4, r1	; 0x04
   164fa:	13 82       	std	Z+3, r1	; 0x03
   164fc:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16500:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16504:	46 81       	ldd	r20, Z+6	; 0x06
   16506:	57 81       	ldd	r21, Z+7	; 0x07
   16508:	68 2f       	mov	r22, r24
   1650a:	70 e0       	ldi	r23, 0x00	; 0
   1650c:	80 ee       	ldi	r24, 0xE0	; 224
   1650e:	9c e1       	ldi	r25, 0x1C	; 28
   16510:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <memset>
   16514:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16518:	85 ff       	sbrs	r24, 5
   1651a:	0a c0       	rjmp	.+20     	; 0x16530 <amigo_format+0x52>
   1651c:	8b e2       	ldi	r24, 0x2B	; 43
   1651e:	9d e2       	ldi	r25, 0x2D	; 45
   16520:	a0 e0       	ldi	r26, 0x00	; 0
   16522:	ed b7       	in	r30, 0x3d	; 61
   16524:	fe b7       	in	r31, 0x3e	; 62
   16526:	81 83       	std	Z+1, r24	; 0x01
   16528:	92 83       	std	Z+2, r25	; 0x02
   1652a:	a3 83       	std	Z+3, r26	; 0x03
   1652c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16530:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16534:	86 fd       	sbrc	r24, 6
   16536:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   1653a:	63 eb       	ldi	r22, 0xB3	; 179
   1653c:	75 e1       	ldi	r23, 0x15	; 21
   1653e:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <AMIGOs>
   16542:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <AMIGOs+0x1>
   16546:	08 dd       	rcall	.-1520   	; 0x15f58 <amigo_chs_to_logical>
   16548:	ab 01       	movw	r20, r22
   1654a:	bc 01       	movw	r22, r24
   1654c:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16550:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16554:	e0 90 59 19 	lds	r14, 0x1959	; 0x801959 <AMIGOs>
   16558:	f0 90 5a 19 	lds	r15, 0x195A	; 0x80195a <AMIGOs+0x1>
   1655c:	87 e0       	ldi	r24, 0x07	; 7
   1655e:	e8 0e       	add	r14, r24
   16560:	f1 1c       	adc	r15, r1
   16562:	06 81       	ldd	r16, Z+6	; 0x06
   16564:	17 81       	ldd	r17, Z+7	; 0x07
   16566:	20 ee       	ldi	r18, 0xE0	; 224
   16568:	3c e1       	ldi	r19, 0x1C	; 28
   1656a:	82 81       	ldd	r24, Z+2	; 0x02
   1656c:	93 81       	ldd	r25, Z+3	; 0x03
   1656e:	0e 94 b4 83 	call	0x10768	; 0x10768 <dbf_open_write>
   16572:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16576:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   1657a:	27 81       	ldd	r18, Z+7	; 0x07
   1657c:	30 85       	ldd	r19, Z+8	; 0x08
   1657e:	21 15       	cp	r18, r1
   16580:	31 05       	cpc	r19, r1
   16582:	49 f4       	brne	.+18     	; 0x16596 <amigo_format+0xb8>
   16584:	c0 91 5b 19 	lds	r28, 0x195B	; 0x80195b <AMIGOp>
   16588:	d0 91 5c 19 	lds	r29, 0x195C	; 0x80195c <AMIGOp+0x1>
   1658c:	4e 81       	ldd	r20, Y+6	; 0x06
   1658e:	5f 81       	ldd	r21, Y+7	; 0x07
   16590:	84 17       	cp	r24, r20
   16592:	95 07       	cpc	r25, r21
   16594:	41 f0       	breq	.+16     	; 0x165a6 <amigo_format+0xc8>
   16596:	22 60       	ori	r18, 0x02	; 2
   16598:	30 87       	std	Z+8, r19	; 0x08
   1659a:	27 83       	std	Z+7, r18	; 0x07
   1659c:	81 e0       	ldi	r24, 0x01	; 1
   1659e:	86 83       	std	Z+6, r24	; 0x06
   165a0:	c1 e0       	ldi	r28, 0x01	; 1
   165a2:	d0 e0       	ldi	r29, 0x00	; 0
   165a4:	0f c0       	rjmp	.+30     	; 0x165c4 <amigo_format+0xe6>
   165a6:	80 e0       	ldi	r24, 0x00	; 0
   165a8:	90 e0       	ldi	r25, 0x00	; 0
   165aa:	a7 de       	rcall	.-690    	; 0x162fa <amigo_increment>
   165ac:	89 2b       	or	r24, r25
   165ae:	29 f2       	breq	.-118    	; 0x1653a <amigo_format+0x5c>
   165b0:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   165b4:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   165b8:	15 82       	std	Z+5, r1	; 0x05
   165ba:	14 82       	std	Z+4, r1	; 0x04
   165bc:	13 82       	std	Z+3, r1	; 0x03
   165be:	16 82       	std	Z+6, r1	; 0x06
   165c0:	c0 e0       	ldi	r28, 0x00	; 0
   165c2:	d0 e0       	ldi	r29, 0x00	; 0
   165c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165c8:	86 ff       	sbrs	r24, 6
   165ca:	04 c0       	rjmp	.+8      	; 0x165d4 <amigo_format+0xf6>
   165cc:	83 eb       	ldi	r24, 0xB3	; 179
   165ce:	95 e1       	ldi	r25, 0x15	; 21
   165d0:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   165d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165d8:	85 ff       	sbrs	r24, 5
   165da:	0a c0       	rjmp	.+20     	; 0x165f0 <amigo_format+0x112>
   165dc:	86 e1       	ldi	r24, 0x16	; 22
   165de:	9d e2       	ldi	r25, 0x2D	; 45
   165e0:	a0 e0       	ldi	r26, 0x00	; 0
   165e2:	ed b7       	in	r30, 0x3d	; 61
   165e4:	fe b7       	in	r31, 0x3e	; 62
   165e6:	81 83       	std	Z+1, r24	; 0x01
   165e8:	92 83       	std	Z+2, r25	; 0x02
   165ea:	a3 83       	std	Z+3, r26	; 0x03
   165ec:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   165f0:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   165f4:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   165f8:	81 81       	ldd	r24, Z+1	; 0x01
   165fa:	90 e0       	ldi	r25, 0x00	; 0
   165fc:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   16600:	ce 01       	movw	r24, r28
   16602:	cd b7       	in	r28, 0x3d	; 61
   16604:	de b7       	in	r29, 0x3e	; 62
   16606:	23 96       	adiw	r28, 0x03	; 3
   16608:	e6 e0       	ldi	r30, 0x06	; 6
   1660a:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0001660e <amigo_buffered_read_command>:
   1660e:	8f 92       	push	r8
   16610:	9f 92       	push	r9
   16612:	af 92       	push	r10
   16614:	bf 92       	push	r11
   16616:	ef 92       	push	r14
   16618:	ff 92       	push	r15
   1661a:	0f 93       	push	r16
   1661c:	1f 93       	push	r17
   1661e:	cf 93       	push	r28
   16620:	df 93       	push	r29
   16622:	00 d0       	rcall	.+0      	; 0x16624 <amigo_buffered_read_command+0x16>
   16624:	00 d0       	rcall	.+0      	; 0x16626 <amigo_buffered_read_command+0x18>
   16626:	1f 92       	push	r1
   16628:	6a eb       	ldi	r22, 0xBA	; 186
   1662a:	75 e1       	ldi	r23, 0x15	; 21
   1662c:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <AMIGOs>
   16630:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <AMIGOs+0x1>
   16634:	91 dc       	rcall	.-1758   	; 0x15f58 <amigo_chs_to_logical>
   16636:	4b 01       	movw	r8, r22
   16638:	5c 01       	movw	r10, r24
   1663a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1663e:	85 ff       	sbrs	r24, 5
   16640:	12 c0       	rjmp	.+36     	; 0x16666 <amigo_buffered_read_command+0x58>
   16642:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16646:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   1664a:	80 81       	ld	r24, Z
   1664c:	90 e0       	ldi	r25, 0x00	; 0
   1664e:	ed b7       	in	r30, 0x3d	; 61
   16650:	fe b7       	in	r31, 0x3e	; 62
   16652:	95 83       	std	Z+5, r25	; 0x05
   16654:	84 83       	std	Z+4, r24	; 0x04
   16656:	84 e0       	ldi	r24, 0x04	; 4
   16658:	9d e2       	ldi	r25, 0x2D	; 45
   1665a:	a0 e0       	ldi	r26, 0x00	; 0
   1665c:	81 83       	std	Z+1, r24	; 0x01
   1665e:	92 83       	std	Z+2, r25	; 0x02
   16660:	a3 83       	std	Z+3, r26	; 0x03
   16662:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16666:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1666a:	86 fd       	sbrc	r24, 6
   1666c:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   16670:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16674:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16678:	e0 90 59 19 	lds	r14, 0x1959	; 0x801959 <AMIGOs>
   1667c:	f0 90 5a 19 	lds	r15, 0x195A	; 0x80195a <AMIGOs+0x1>
   16680:	87 e0       	ldi	r24, 0x07	; 7
   16682:	e8 0e       	add	r14, r24
   16684:	f1 1c       	adc	r15, r1
   16686:	06 81       	ldd	r16, Z+6	; 0x06
   16688:	17 81       	ldd	r17, Z+7	; 0x07
   1668a:	20 ee       	ldi	r18, 0xE0	; 224
   1668c:	3c e1       	ldi	r19, 0x1C	; 28
   1668e:	b5 01       	movw	r22, r10
   16690:	a4 01       	movw	r20, r8
   16692:	82 81       	ldd	r24, Z+2	; 0x02
   16694:	93 81       	ldd	r25, Z+3	; 0x03
   16696:	0e 94 5d 83 	call	0x106ba	; 0x106ba <dbf_open_read>
   1669a:	7c 01       	movw	r14, r24
   1669c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166a0:	86 ff       	sbrs	r24, 6
   166a2:	04 c0       	rjmp	.+8      	; 0x166ac <amigo_buffered_read_command+0x9e>
   166a4:	8b ea       	ldi	r24, 0xAB	; 171
   166a6:	90 e1       	ldi	r25, 0x10	; 16
   166a8:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   166ac:	c0 91 59 19 	lds	r28, 0x1959	; 0x801959 <AMIGOs>
   166b0:	d0 91 5a 19 	lds	r29, 0x195A	; 0x80195a <AMIGOs+0x1>
   166b4:	8f 81       	ldd	r24, Y+7	; 0x07
   166b6:	98 85       	ldd	r25, Y+8	; 0x08
   166b8:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   166bc:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   166c0:	89 2b       	or	r24, r25
   166c2:	29 f4       	brne	.+10     	; 0x166ce <amigo_buffered_read_command+0xc0>
   166c4:	86 81       	ldd	r24, Z+6	; 0x06
   166c6:	97 81       	ldd	r25, Z+7	; 0x07
   166c8:	e8 16       	cp	r14, r24
   166ca:	f9 06       	cpc	r15, r25
   166cc:	19 f0       	breq	.+6      	; 0x166d4 <amigo_buffered_read_command+0xc6>
   166ce:	81 e0       	ldi	r24, 0x01	; 1
   166d0:	8e 83       	std	Y+6, r24	; 0x06
   166d2:	14 c0       	rjmp	.+40     	; 0x166fc <amigo_buffered_read_command+0xee>
   166d4:	8a eb       	ldi	r24, 0xBA	; 186
   166d6:	95 e1       	ldi	r25, 0x15	; 21
   166d8:	10 de       	rcall	.-992    	; 0x162fa <amigo_increment>
   166da:	89 2b       	or	r24, r25
   166dc:	59 f0       	breq	.+22     	; 0x166f4 <amigo_buffered_read_command+0xe6>
   166de:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   166e2:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   166e6:	81 e0       	ldi	r24, 0x01	; 1
   166e8:	86 83       	std	Z+6, r24	; 0x06
   166ea:	87 81       	ldd	r24, Z+7	; 0x07
   166ec:	90 85       	ldd	r25, Z+8	; 0x08
   166ee:	84 60       	ori	r24, 0x04	; 4
   166f0:	90 87       	std	Z+8, r25	; 0x08
   166f2:	87 83       	std	Z+7, r24	; 0x07
   166f4:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   166f8:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   166fc:	81 81       	ldd	r24, Z+1	; 0x01
   166fe:	90 e0       	ldi	r25, 0x00	; 0
   16700:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   16704:	80 e0       	ldi	r24, 0x00	; 0
   16706:	90 e0       	ldi	r25, 0x00	; 0
   16708:	0f 90       	pop	r0
   1670a:	0f 90       	pop	r0
   1670c:	0f 90       	pop	r0
   1670e:	0f 90       	pop	r0
   16710:	0f 90       	pop	r0
   16712:	df 91       	pop	r29
   16714:	cf 91       	pop	r28
   16716:	1f 91       	pop	r17
   16718:	0f 91       	pop	r16
   1671a:	ff 90       	pop	r15
   1671c:	ef 90       	pop	r14
   1671e:	bf 90       	pop	r11
   16720:	af 90       	pop	r10
   16722:	9f 90       	pop	r9
   16724:	8f 90       	pop	r8
   16726:	08 95       	ret

00016728 <amigo_buffered_read_execute>:
   16728:	a5 e0       	ldi	r26, 0x05	; 5
   1672a:	b0 e0       	ldi	r27, 0x00	; 0
   1672c:	ea e9       	ldi	r30, 0x9A	; 154
   1672e:	f3 eb       	ldi	r31, 0xB3	; 179
   16730:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
   16734:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16738:	87 fd       	sbrc	r24, 7
   1673a:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   1673e:	80 e0       	ldi	r24, 0x00	; 0
   16740:	91 e0       	ldi	r25, 0x01	; 1
   16742:	9d 83       	std	Y+5, r25	; 0x05
   16744:	8c 83       	std	Y+4, r24	; 0x04
   16746:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   1674a:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   1674e:	66 81       	ldd	r22, Z+6	; 0x06
   16750:	77 81       	ldd	r23, Z+7	; 0x07
   16752:	ae 01       	movw	r20, r28
   16754:	4c 5f       	subi	r20, 0xFC	; 252
   16756:	5f 4f       	sbci	r21, 0xFF	; 255
   16758:	80 ee       	ldi	r24, 0xE0	; 224
   1675a:	9c e1       	ldi	r25, 0x1C	; 28
   1675c:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   16760:	8c 01       	movw	r16, r24
   16762:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16766:	87 ff       	sbrs	r24, 7
   16768:	04 c0       	rjmp	.+8      	; 0x16772 <amigo_buffered_read_execute+0x4a>
   1676a:	86 eb       	ldi	r24, 0xB6	; 182
   1676c:	90 e1       	ldi	r25, 0x10	; 16
   1676e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   16772:	8c 81       	ldd	r24, Y+4	; 0x04
   16774:	9d 81       	ldd	r25, Y+5	; 0x05
   16776:	88 27       	eor	r24, r24
   16778:	90 7d       	andi	r25, 0xD0	; 208
   1677a:	89 2b       	or	r24, r25
   1677c:	49 f4       	brne	.+18     	; 0x16790 <amigo_buffered_read_execute+0x68>
   1677e:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16782:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16786:	86 81       	ldd	r24, Z+6	; 0x06
   16788:	97 81       	ldd	r25, Z+7	; 0x07
   1678a:	08 17       	cp	r16, r24
   1678c:	19 07       	cpc	r17, r25
   1678e:	c9 f0       	breq	.+50     	; 0x167c2 <amigo_buffered_read_execute+0x9a>
   16790:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16794:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16798:	81 e0       	ldi	r24, 0x01	; 1
   1679a:	86 83       	std	Z+6, r24	; 0x06
   1679c:	87 81       	ldd	r24, Z+7	; 0x07
   1679e:	90 85       	ldd	r25, Z+8	; 0x08
   167a0:	80 62       	ori	r24, 0x20	; 32
   167a2:	90 87       	std	Z+8, r25	; 0x08
   167a4:	87 83       	std	Z+7, r24	; 0x07
   167a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167aa:	80 ff       	sbrs	r24, 0
   167ac:	0a c0       	rjmp	.+20     	; 0x167c2 <amigo_buffered_read_execute+0x9a>
   167ae:	8a ee       	ldi	r24, 0xEA	; 234
   167b0:	9c e2       	ldi	r25, 0x2C	; 44
   167b2:	a0 e0       	ldi	r26, 0x00	; 0
   167b4:	ed b7       	in	r30, 0x3d	; 61
   167b6:	fe b7       	in	r31, 0x3e	; 62
   167b8:	81 83       	std	Z+1, r24	; 0x01
   167ba:	92 83       	std	Z+2, r25	; 0x02
   167bc:	a3 83       	std	Z+3, r26	; 0x03
   167be:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   167c2:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   167c6:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   167ca:	81 81       	ldd	r24, Z+1	; 0x01
   167cc:	90 e0       	ldi	r25, 0x00	; 0
   167ce:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   167d2:	8c 81       	ldd	r24, Y+4	; 0x04
   167d4:	9d 81       	ldd	r25, Y+5	; 0x05
   167d6:	25 96       	adiw	r28, 0x05	; 5
   167d8:	e4 e0       	ldi	r30, 0x04	; 4
   167da:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

000167de <amigo_buffered_write>:
   167de:	8f 92       	push	r8
   167e0:	9f 92       	push	r9
   167e2:	af 92       	push	r10
   167e4:	bf 92       	push	r11
   167e6:	ef 92       	push	r14
   167e8:	ff 92       	push	r15
   167ea:	0f 93       	push	r16
   167ec:	1f 93       	push	r17
   167ee:	cf 93       	push	r28
   167f0:	df 93       	push	r29
   167f2:	cd b7       	in	r28, 0x3d	; 61
   167f4:	de b7       	in	r29, 0x3e	; 62
   167f6:	27 97       	sbiw	r28, 0x07	; 7
   167f8:	0f b6       	in	r0, 0x3f	; 63
   167fa:	f8 94       	cli
   167fc:	de bf       	out	0x3e, r29	; 62
   167fe:	0f be       	out	0x3f, r0	; 63
   16800:	cd bf       	out	0x3d, r28	; 61
   16802:	68 ec       	ldi	r22, 0xC8	; 200
   16804:	75 e1       	ldi	r23, 0x15	; 21
   16806:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <AMIGOs>
   1680a:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <AMIGOs+0x1>
   1680e:	a4 db       	rcall	.-2232   	; 0x15f58 <amigo_chs_to_logical>
   16810:	4b 01       	movw	r8, r22
   16812:	5c 01       	movw	r10, r24
   16814:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16818:	87 fd       	sbrc	r24, 7
   1681a:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   1681e:	1f 82       	std	Y+7, r1	; 0x07
   16820:	1e 82       	std	Y+6, r1	; 0x06
   16822:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16826:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   1682a:	66 81       	ldd	r22, Z+6	; 0x06
   1682c:	77 81       	ldd	r23, Z+7	; 0x07
   1682e:	ae 01       	movw	r20, r28
   16830:	4a 5f       	subi	r20, 0xFA	; 250
   16832:	5f 4f       	sbci	r21, 0xFF	; 255
   16834:	80 ee       	ldi	r24, 0xE0	; 224
   16836:	9c e1       	ldi	r25, 0x1C	; 28
   16838:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   1683c:	7c 01       	movw	r14, r24
   1683e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16842:	85 ff       	sbrs	r24, 5
   16844:	12 c0       	rjmp	.+36     	; 0x1686a <amigo_buffered_write+0x8c>
   16846:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   1684a:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   1684e:	80 81       	ld	r24, Z
   16850:	90 e0       	ldi	r25, 0x00	; 0
   16852:	ed b7       	in	r30, 0x3d	; 61
   16854:	fe b7       	in	r31, 0x3e	; 62
   16856:	95 83       	std	Z+5, r25	; 0x05
   16858:	84 83       	std	Z+4, r24	; 0x04
   1685a:	88 ed       	ldi	r24, 0xD8	; 216
   1685c:	9c e2       	ldi	r25, 0x2C	; 44
   1685e:	a0 e0       	ldi	r26, 0x00	; 0
   16860:	81 83       	std	Z+1, r24	; 0x01
   16862:	92 83       	std	Z+2, r25	; 0x02
   16864:	a3 83       	std	Z+3, r26	; 0x03
   16866:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1686a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1686e:	87 ff       	sbrs	r24, 7
   16870:	04 c0       	rjmp	.+8      	; 0x1687a <amigo_buffered_write+0x9c>
   16872:	87 ed       	ldi	r24, 0xD7	; 215
   16874:	95 e1       	ldi	r25, 0x15	; 21
   16876:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   1687a:	8e 81       	ldd	r24, Y+6	; 0x06
   1687c:	9f 81       	ldd	r25, Y+7	; 0x07
   1687e:	88 27       	eor	r24, r24
   16880:	90 7d       	andi	r25, 0xD0	; 208
   16882:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16886:	89 2b       	or	r24, r25
   16888:	49 f4       	brne	.+18     	; 0x1689c <amigo_buffered_write+0xbe>
   1688a:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   1688e:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16892:	86 81       	ldd	r24, Z+6	; 0x06
   16894:	97 81       	ldd	r25, Z+7	; 0x07
   16896:	e8 16       	cp	r14, r24
   16898:	f9 06       	cpc	r15, r25
   1689a:	c1 f0       	breq	.+48     	; 0x168cc <amigo_buffered_write+0xee>
   1689c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   168a0:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   168a4:	81 e0       	ldi	r24, 0x01	; 1
   168a6:	86 83       	std	Z+6, r24	; 0x06
   168a8:	87 81       	ldd	r24, Z+7	; 0x07
   168aa:	90 85       	ldd	r25, Z+8	; 0x08
   168ac:	80 62       	ori	r24, 0x20	; 32
   168ae:	90 87       	std	Z+8, r25	; 0x08
   168b0:	87 83       	std	Z+7, r24	; 0x07
   168b2:	20 ff       	sbrs	r18, 0
   168b4:	5e c0       	rjmp	.+188    	; 0x16972 <amigo_buffered_write+0x194>
   168b6:	89 eb       	ldi	r24, 0xB9	; 185
   168b8:	9c e2       	ldi	r25, 0x2C	; 44
   168ba:	a0 e0       	ldi	r26, 0x00	; 0
   168bc:	ed b7       	in	r30, 0x3d	; 61
   168be:	fe b7       	in	r31, 0x3e	; 62
   168c0:	81 83       	std	Z+1, r24	; 0x01
   168c2:	92 83       	std	Z+2, r25	; 0x02
   168c4:	a3 83       	std	Z+3, r26	; 0x03
   168c6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   168ca:	53 c0       	rjmp	.+166    	; 0x16972 <amigo_buffered_write+0x194>
   168cc:	26 fd       	sbrc	r18, 6
   168ce:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
   168d2:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   168d6:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   168da:	e0 90 59 19 	lds	r14, 0x1959	; 0x801959 <AMIGOs>
   168de:	f0 90 5a 19 	lds	r15, 0x195A	; 0x80195a <AMIGOs+0x1>
   168e2:	87 e0       	ldi	r24, 0x07	; 7
   168e4:	e8 0e       	add	r14, r24
   168e6:	f1 1c       	adc	r15, r1
   168e8:	06 81       	ldd	r16, Z+6	; 0x06
   168ea:	17 81       	ldd	r17, Z+7	; 0x07
   168ec:	20 ee       	ldi	r18, 0xE0	; 224
   168ee:	3c e1       	ldi	r19, 0x1C	; 28
   168f0:	b5 01       	movw	r22, r10
   168f2:	a4 01       	movw	r20, r8
   168f4:	82 81       	ldd	r24, Z+2	; 0x02
   168f6:	93 81       	ldd	r25, Z+3	; 0x03
   168f8:	0e 94 b4 83 	call	0x10768	; 0x10768 <dbf_open_write>
   168fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16900:	86 ff       	sbrs	r24, 6
   16902:	04 c0       	rjmp	.+8      	; 0x1690c <amigo_buffered_write+0x12e>
   16904:	80 ea       	ldi	r24, 0xA0	; 160
   16906:	90 e1       	ldi	r25, 0x10	; 16
   16908:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
   1690c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16910:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16914:	87 81       	ldd	r24, Z+7	; 0x07
   16916:	90 85       	ldd	r25, Z+8	; 0x08
   16918:	89 2b       	or	r24, r25
   1691a:	d9 f0       	breq	.+54     	; 0x16952 <amigo_buffered_write+0x174>
   1691c:	81 e0       	ldi	r24, 0x01	; 1
   1691e:	86 83       	std	Z+6, r24	; 0x06
   16920:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16924:	80 ff       	sbrs	r24, 0
   16926:	0a c0       	rjmp	.+20     	; 0x1693c <amigo_buffered_write+0x15e>
   16928:	89 e9       	ldi	r24, 0x99	; 153
   1692a:	9c e2       	ldi	r25, 0x2C	; 44
   1692c:	a0 e0       	ldi	r26, 0x00	; 0
   1692e:	ed b7       	in	r30, 0x3d	; 61
   16930:	fe b7       	in	r31, 0x3e	; 62
   16932:	81 83       	std	Z+1, r24	; 0x01
   16934:	92 83       	std	Z+2, r25	; 0x02
   16936:	a3 83       	std	Z+3, r26	; 0x03
   16938:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1693c:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16940:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16944:	81 81       	ldd	r24, Z+1	; 0x01
   16946:	90 e0       	ldi	r25, 0x00	; 0
   16948:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   1694c:	80 e0       	ldi	r24, 0x00	; 0
   1694e:	90 e0       	ldi	r25, 0x00	; 0
   16950:	1c c0       	rjmp	.+56     	; 0x1698a <amigo_buffered_write+0x1ac>
   16952:	88 ec       	ldi	r24, 0xC8	; 200
   16954:	95 e1       	ldi	r25, 0x15	; 21
   16956:	d1 dc       	rcall	.-1630   	; 0x162fa <amigo_increment>
   16958:	89 2b       	or	r24, r25
   1695a:	59 f0       	breq	.+22     	; 0x16972 <amigo_buffered_write+0x194>
   1695c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16960:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16964:	81 e0       	ldi	r24, 0x01	; 1
   16966:	86 83       	std	Z+6, r24	; 0x06
   16968:	87 81       	ldd	r24, Z+7	; 0x07
   1696a:	90 85       	ldd	r25, Z+8	; 0x08
   1696c:	84 60       	ori	r24, 0x04	; 4
   1696e:	90 87       	std	Z+8, r25	; 0x08
   16970:	87 83       	std	Z+7, r24	; 0x07
   16972:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16976:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   1697a:	81 81       	ldd	r24, Z+1	; 0x01
   1697c:	90 e0       	ldi	r25, 0x00	; 0
   1697e:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   16982:	8e 81       	ldd	r24, Y+6	; 0x06
   16984:	9f 81       	ldd	r25, Y+7	; 0x07
   16986:	88 27       	eor	r24, r24
   16988:	90 7d       	andi	r25, 0xD0	; 208
   1698a:	27 96       	adiw	r28, 0x07	; 7
   1698c:	0f b6       	in	r0, 0x3f	; 63
   1698e:	f8 94       	cli
   16990:	de bf       	out	0x3e, r29	; 62
   16992:	0f be       	out	0x3f, r0	; 63
   16994:	cd bf       	out	0x3d, r28	; 61
   16996:	df 91       	pop	r29
   16998:	cf 91       	pop	r28
   1699a:	1f 91       	pop	r17
   1699c:	0f 91       	pop	r16
   1699e:	ff 90       	pop	r15
   169a0:	ef 90       	pop	r14
   169a2:	bf 90       	pop	r11
   169a4:	af 90       	pop	r10
   169a6:	9f 90       	pop	r9
   169a8:	8f 90       	pop	r8
   169aa:	08 95       	ret

000169ac <amigo_cmd_dsj>:
   169ac:	a8 e0       	ldi	r26, 0x08	; 8
   169ae:	b0 e0       	ldi	r27, 0x00	; 0
   169b0:	ec ed       	ldi	r30, 0xDC	; 220
   169b2:	f4 eb       	ldi	r31, 0xB4	; 180
   169b4:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   169b8:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   169bc:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   169c0:	86 81       	ldd	r24, Z+6	; 0x06
   169c2:	88 87       	std	Y+8, r24	; 0x08
   169c4:	80 e0       	ldi	r24, 0x00	; 0
   169c6:	91 e0       	ldi	r25, 0x01	; 1
   169c8:	9f 83       	std	Y+7, r25	; 0x07
   169ca:	8e 83       	std	Y+6, r24	; 0x06
   169cc:	ae 01       	movw	r20, r28
   169ce:	4a 5f       	subi	r20, 0xFA	; 250
   169d0:	5f 4f       	sbci	r21, 0xFF	; 255
   169d2:	61 e0       	ldi	r22, 0x01	; 1
   169d4:	70 e0       	ldi	r23, 0x00	; 0
   169d6:	ce 01       	movw	r24, r28
   169d8:	08 96       	adiw	r24, 0x08	; 8
   169da:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
   169de:	2e 81       	ldd	r18, Y+6	; 0x06
   169e0:	3f 81       	ldd	r19, Y+7	; 0x07
   169e2:	22 27       	eor	r18, r18
   169e4:	30 7d       	andi	r19, 0xD0	; 208
   169e6:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   169ea:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   169ee:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   169f2:	23 2b       	or	r18, r19
   169f4:	11 f4       	brne	.+4      	; 0x169fa <amigo_cmd_dsj+0x4e>
   169f6:	01 97       	sbiw	r24, 0x01	; 1
   169f8:	c1 f0       	breq	.+48     	; 0x16a2a <amigo_cmd_dsj+0x7e>
   169fa:	81 e0       	ldi	r24, 0x01	; 1
   169fc:	86 83       	std	Z+6, r24	; 0x06
   169fe:	87 81       	ldd	r24, Z+7	; 0x07
   16a00:	90 85       	ldd	r25, Z+8	; 0x08
   16a02:	80 62       	ori	r24, 0x20	; 32
   16a04:	90 87       	std	Z+8, r25	; 0x08
   16a06:	87 83       	std	Z+7, r24	; 0x07
   16a08:	40 ff       	sbrs	r20, 0
   16a0a:	0a c0       	rjmp	.+20     	; 0x16a20 <amigo_cmd_dsj+0x74>
   16a0c:	8f e7       	ldi	r24, 0x7F	; 127
   16a0e:	9c e2       	ldi	r25, 0x2C	; 44
   16a10:	a0 e0       	ldi	r26, 0x00	; 0
   16a12:	ed b7       	in	r30, 0x3d	; 61
   16a14:	fe b7       	in	r31, 0x3e	; 62
   16a16:	81 83       	std	Z+1, r24	; 0x01
   16a18:	92 83       	std	Z+2, r25	; 0x02
   16a1a:	a3 83       	std	Z+3, r26	; 0x03
   16a1c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16a20:	8e 81       	ldd	r24, Y+6	; 0x06
   16a22:	9f 81       	ldd	r25, Y+7	; 0x07
   16a24:	88 27       	eor	r24, r24
   16a26:	90 7d       	andi	r25, 0xD0	; 208
   16a28:	19 c0       	rjmp	.+50     	; 0x16a5c <amigo_cmd_dsj+0xb0>
   16a2a:	45 ff       	sbrs	r20, 5
   16a2c:	0e c0       	rjmp	.+28     	; 0x16a4a <amigo_cmd_dsj+0x9e>
   16a2e:	86 81       	ldd	r24, Z+6	; 0x06
   16a30:	90 e0       	ldi	r25, 0x00	; 0
   16a32:	ed b7       	in	r30, 0x3d	; 61
   16a34:	fe b7       	in	r31, 0x3e	; 62
   16a36:	95 83       	std	Z+5, r25	; 0x05
   16a38:	84 83       	std	Z+4, r24	; 0x04
   16a3a:	82 e7       	ldi	r24, 0x72	; 114
   16a3c:	9c e2       	ldi	r25, 0x2C	; 44
   16a3e:	a0 e0       	ldi	r26, 0x00	; 0
   16a40:	81 83       	std	Z+1, r24	; 0x01
   16a42:	92 83       	std	Z+2, r25	; 0x02
   16a44:	a3 83       	std	Z+3, r26	; 0x03
   16a46:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16a4a:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16a4e:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16a52:	16 82       	std	Z+6, r1	; 0x06
   16a54:	10 86       	std	Z+8, r1	; 0x08
   16a56:	17 82       	std	Z+7, r1	; 0x07
   16a58:	80 e0       	ldi	r24, 0x00	; 0
   16a5a:	90 e0       	ldi	r25, 0x00	; 0
   16a5c:	28 96       	adiw	r28, 0x08	; 8
   16a5e:	e2 e0       	ldi	r30, 0x02	; 2
   16a60:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00016a64 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   16a64:	00 d0       	rcall	.+0      	; 0x16a66 <amigo_cmd_clear+0x2>
   16a66:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16a68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a6c:	85 ff       	sbrs	r24, 5
   16a6e:	0a c0       	rjmp	.+20     	; 0x16a84 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   16a70:	83 e6       	ldi	r24, 0x63	; 99
   16a72:	9c e2       	ldi	r25, 0x2C	; 44
   16a74:	a0 e0       	ldi	r26, 0x00	; 0
   16a76:	ed b7       	in	r30, 0x3d	; 61
   16a78:	fe b7       	in	r31, 0x3e	; 62
   16a7a:	81 83       	std	Z+1, r24	; 0x01
   16a7c:	92 83       	std	Z+2, r25	; 0x02
   16a7e:	a3 83       	std	Z+3, r26	; 0x03
   16a80:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
    AMIGOs->sector = 0;
   16a84:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16a88:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16a8c:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   16a8e:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   16a90:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16a92:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16a94:	10 86       	std	Z+8, r1	; 0x08
   16a96:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16a98:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16a9c:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16aa0:	81 81       	ldd	r24, Z+1	; 0x01
   16aa2:	90 e0       	ldi	r25, 0x00	; 0
   16aa4:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
    return(0);
}
   16aa8:	80 e0       	ldi	r24, 0x00	; 0
   16aaa:	90 e0       	ldi	r25, 0x00	; 0
   16aac:	0f 90       	pop	r0
   16aae:	0f 90       	pop	r0
   16ab0:	0f 90       	pop	r0
   16ab2:	08 95       	ret

00016ab4 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16ab4:	af e0       	ldi	r26, 0x0F	; 15
   16ab6:	b0 e0       	ldi	r27, 0x00	; 0
   16ab8:	e0 e6       	ldi	r30, 0x60	; 96
   16aba:	f5 eb       	ldi	r31, 0xB5	; 181
   16abc:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
   16ac0:	c8 2f       	mov	r28, r24
   16ac2:	e6 2e       	mov	r14, r22
   16ac4:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16ac6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16aca:	90 e0       	ldi	r25, 0x00	; 0
   16acc:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   16ad0:	20 91 e4 1e 	lds	r18, 0x1EE4	; 0x801ee4 <talking>
   16ad4:	f1 2c       	mov	r15, r1
   16ad6:	d0 e0       	ldi	r29, 0x00	; 0
   16ad8:	89 2b       	or	r24, r25
   16ada:	f1 f0       	breq	.+60     	; 0x16b18 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16adc:	82 2f       	mov	r24, r18
   16ade:	90 e0       	ldi	r25, 0x00	; 0
   16ae0:	ed b7       	in	r30, 0x3d	; 61
   16ae2:	fe b7       	in	r31, 0x3e	; 62
   16ae4:	97 87       	std	Z+15, r25	; 0x0f
   16ae6:	86 87       	std	Z+14, r24	; 0x0e
   16ae8:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16aec:	90 e0       	ldi	r25, 0x00	; 0
   16aee:	95 87       	std	Z+13, r25	; 0x0d
   16af0:	84 87       	std	Z+12, r24	; 0x0c
   16af2:	13 87       	std	Z+11, r17	; 0x0b
   16af4:	02 87       	std	Z+10, r16	; 0x0a
   16af6:	f1 86       	std	Z+9, r15	; 0x09
   16af8:	e0 86       	std	Z+8, r14	; 0x08
   16afa:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16afe:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16b02:	80 81       	ld	r24, Z
   16b04:	90 e0       	ldi	r25, 0x00	; 0
   16b06:	ed b7       	in	r30, 0x3d	; 61
   16b08:	fe b7       	in	r31, 0x3e	; 62
   16b0a:	97 83       	std	Z+7, r25	; 0x07
   16b0c:	86 83       	std	Z+6, r24	; 0x06
   16b0e:	d5 83       	std	Z+5, r29	; 0x05
   16b10:	c4 83       	std	Z+4, r28	; 0x04
   16b12:	8c ef       	ldi	r24, 0xFC	; 252
   16b14:	9b e2       	ldi	r25, 0x2B	; 43
   16b16:	51 c0       	rjmp	.+162    	; 0x16bba <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16b18:	82 2f       	mov	r24, r18
   16b1a:	90 e0       	ldi	r25, 0x00	; 0
   16b1c:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   16b20:	20 91 e6 1e 	lds	r18, 0x1EE6	; 0x801ee6 <listening>
   16b24:	30 91 e4 1e 	lds	r19, 0x1EE4	; 0x801ee4 <talking>
   16b28:	a0 91 59 19 	lds	r26, 0x1959	; 0x801959 <AMIGOs>
   16b2c:	b0 91 5a 19 	lds	r27, 0x195A	; 0x80195a <AMIGOs+0x1>
   16b30:	89 2b       	or	r24, r25
   16b32:	b1 f0       	breq	.+44     	; 0x16b60 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b34:	83 2f       	mov	r24, r19
   16b36:	90 e0       	ldi	r25, 0x00	; 0
   16b38:	ed b7       	in	r30, 0x3d	; 61
   16b3a:	fe b7       	in	r31, 0x3e	; 62
   16b3c:	97 87       	std	Z+15, r25	; 0x0f
   16b3e:	86 87       	std	Z+14, r24	; 0x0e
   16b40:	30 e0       	ldi	r19, 0x00	; 0
   16b42:	35 87       	std	Z+13, r19	; 0x0d
   16b44:	24 87       	std	Z+12, r18	; 0x0c
   16b46:	13 87       	std	Z+11, r17	; 0x0b
   16b48:	02 87       	std	Z+10, r16	; 0x0a
   16b4a:	f1 86       	std	Z+9, r15	; 0x09
   16b4c:	e0 86       	std	Z+8, r14	; 0x08
   16b4e:	8c 91       	ld	r24, X
   16b50:	90 e0       	ldi	r25, 0x00	; 0
   16b52:	97 83       	std	Z+7, r25	; 0x07
   16b54:	86 83       	std	Z+6, r24	; 0x06
   16b56:	d5 83       	std	Z+5, r29	; 0x05
   16b58:	c4 83       	std	Z+4, r28	; 0x04
   16b5a:	85 e9       	ldi	r24, 0x95	; 149
   16b5c:	9b e2       	ldi	r25, 0x2B	; 43
   16b5e:	2d c0       	rjmp	.+90     	; 0x16bba <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16b60:	3f 35       	cpi	r19, 0x5F	; 95
   16b62:	b1 f4       	brne	.+44     	; 0x16b90 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b64:	8f e5       	ldi	r24, 0x5F	; 95
   16b66:	90 e0       	ldi	r25, 0x00	; 0
   16b68:	ed b7       	in	r30, 0x3d	; 61
   16b6a:	fe b7       	in	r31, 0x3e	; 62
   16b6c:	97 87       	std	Z+15, r25	; 0x0f
   16b6e:	86 87       	std	Z+14, r24	; 0x0e
   16b70:	30 e0       	ldi	r19, 0x00	; 0
   16b72:	35 87       	std	Z+13, r19	; 0x0d
   16b74:	24 87       	std	Z+12, r18	; 0x0c
   16b76:	13 87       	std	Z+11, r17	; 0x0b
   16b78:	02 87       	std	Z+10, r16	; 0x0a
   16b7a:	f1 86       	std	Z+9, r15	; 0x09
   16b7c:	e0 86       	std	Z+8, r14	; 0x08
   16b7e:	8c 91       	ld	r24, X
   16b80:	90 e0       	ldi	r25, 0x00	; 0
   16b82:	97 83       	std	Z+7, r25	; 0x07
   16b84:	86 83       	std	Z+6, r24	; 0x06
   16b86:	d5 83       	std	Z+5, r29	; 0x05
   16b88:	c4 83       	std	Z+4, r28	; 0x04
   16b8a:	8e e2       	ldi	r24, 0x2E	; 46
   16b8c:	9b e2       	ldi	r25, 0x2B	; 43
   16b8e:	15 c0       	rjmp	.+42     	; 0x16bba <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b90:	83 2f       	mov	r24, r19
   16b92:	90 e0       	ldi	r25, 0x00	; 0
   16b94:	ed b7       	in	r30, 0x3d	; 61
   16b96:	fe b7       	in	r31, 0x3e	; 62
   16b98:	97 87       	std	Z+15, r25	; 0x0f
   16b9a:	86 87       	std	Z+14, r24	; 0x0e
   16b9c:	30 e0       	ldi	r19, 0x00	; 0
   16b9e:	35 87       	std	Z+13, r19	; 0x0d
   16ba0:	24 87       	std	Z+12, r18	; 0x0c
   16ba2:	13 87       	std	Z+11, r17	; 0x0b
   16ba4:	02 87       	std	Z+10, r16	; 0x0a
   16ba6:	f1 86       	std	Z+9, r15	; 0x09
   16ba8:	e0 86       	std	Z+8, r14	; 0x08
   16baa:	8c 91       	ld	r24, X
   16bac:	90 e0       	ldi	r25, 0x00	; 0
   16bae:	97 83       	std	Z+7, r25	; 0x07
   16bb0:	86 83       	std	Z+6, r24	; 0x06
   16bb2:	d5 83       	std	Z+5, r29	; 0x05
   16bb4:	c4 83       	std	Z+4, r28	; 0x04
   16bb6:	89 ec       	ldi	r24, 0xC9	; 201
   16bb8:	9a e2       	ldi	r25, 0x2A	; 42
   16bba:	a0 e0       	ldi	r26, 0x00	; 0
   16bbc:	81 83       	std	Z+1, r24	; 0x01
   16bbe:	92 83       	std	Z+2, r25	; 0x02
   16bc0:	a3 83       	std	Z+3, r26	; 0x03
   16bc2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16bc6:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16bca:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16bce:	81 81       	ldd	r24, Z+1	; 0x01
   16bd0:	90 e0       	ldi	r25, 0x00	; 0
   16bd2:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
    return(0);
}
   16bd6:	80 e0       	ldi	r24, 0x00	; 0
   16bd8:	90 e0       	ldi	r25, 0x00	; 0
   16bda:	cd b7       	in	r28, 0x3d	; 61
   16bdc:	de b7       	in	r29, 0x3e	; 62
   16bde:	2f 96       	adiw	r28, 0x0f	; 15
   16be0:	e6 e0       	ldi	r30, 0x06	; 6
   16be2:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00016be6 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16be6:	ab e0       	ldi	r26, 0x0B	; 11
   16be8:	b0 e0       	ldi	r27, 0x00	; 0
   16bea:	e9 ef       	ldi	r30, 0xF9	; 249
   16bec:	f5 eb       	ldi	r31, 0xB5	; 181
   16bee:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   16bf2:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16bf4:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16bf8:	90 e0       	ldi	r25, 0x00	; 0
   16bfa:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   16bfe:	20 91 e4 1e 	lds	r18, 0x1EE4	; 0x801ee4 <talking>
   16c02:	d0 e0       	ldi	r29, 0x00	; 0
   16c04:	89 2b       	or	r24, r25
   16c06:	d1 f0       	breq	.+52     	; 0x16c3c <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c08:	82 2f       	mov	r24, r18
   16c0a:	90 e0       	ldi	r25, 0x00	; 0
   16c0c:	ed b7       	in	r30, 0x3d	; 61
   16c0e:	fe b7       	in	r31, 0x3e	; 62
   16c10:	93 87       	std	Z+11, r25	; 0x0b
   16c12:	82 87       	std	Z+10, r24	; 0x0a
   16c14:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16c18:	90 e0       	ldi	r25, 0x00	; 0
   16c1a:	91 87       	std	Z+9, r25	; 0x09
   16c1c:	80 87       	std	Z+8, r24	; 0x08
   16c1e:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16c22:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16c26:	80 81       	ld	r24, Z
   16c28:	90 e0       	ldi	r25, 0x00	; 0
   16c2a:	ed b7       	in	r30, 0x3d	; 61
   16c2c:	fe b7       	in	r31, 0x3e	; 62
   16c2e:	97 83       	std	Z+7, r25	; 0x07
   16c30:	86 83       	std	Z+6, r24	; 0x06
   16c32:	d5 83       	std	Z+5, r29	; 0x05
   16c34:	c4 83       	std	Z+4, r28	; 0x04
   16c36:	89 e7       	ldi	r24, 0x79	; 121
   16c38:	9a e2       	ldi	r25, 0x2A	; 42
   16c3a:	43 c0       	rjmp	.+134    	; 0x16cc2 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16c3c:	82 2f       	mov	r24, r18
   16c3e:	90 e0       	ldi	r25, 0x00	; 0
   16c40:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   16c44:	20 91 e6 1e 	lds	r18, 0x1EE6	; 0x801ee6 <listening>
   16c48:	40 91 e4 1e 	lds	r20, 0x1EE4	; 0x801ee4 <talking>
   16c4c:	a0 91 59 19 	lds	r26, 0x1959	; 0x801959 <AMIGOs>
   16c50:	b0 91 5a 19 	lds	r27, 0x195A	; 0x80195a <AMIGOs+0x1>
   16c54:	89 2b       	or	r24, r25
   16c56:	89 f0       	breq	.+34     	; 0x16c7a <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c58:	50 e0       	ldi	r21, 0x00	; 0
   16c5a:	ed b7       	in	r30, 0x3d	; 61
   16c5c:	fe b7       	in	r31, 0x3e	; 62
   16c5e:	53 87       	std	Z+11, r21	; 0x0b
   16c60:	42 87       	std	Z+10, r20	; 0x0a
   16c62:	30 e0       	ldi	r19, 0x00	; 0
   16c64:	31 87       	std	Z+9, r19	; 0x09
   16c66:	20 87       	std	Z+8, r18	; 0x08
   16c68:	8c 91       	ld	r24, X
   16c6a:	90 e0       	ldi	r25, 0x00	; 0
   16c6c:	97 83       	std	Z+7, r25	; 0x07
   16c6e:	86 83       	std	Z+6, r24	; 0x06
   16c70:	d5 83       	std	Z+5, r29	; 0x05
   16c72:	c4 83       	std	Z+4, r28	; 0x04
   16c74:	89 e2       	ldi	r24, 0x29	; 41
   16c76:	9a e2       	ldi	r25, 0x2A	; 42
   16c78:	24 c0       	rjmp	.+72     	; 0x16cc2 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16c7a:	4f 35       	cpi	r20, 0x5F	; 95
   16c7c:	91 f4       	brne	.+36     	; 0x16ca2 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c7e:	8f e5       	ldi	r24, 0x5F	; 95
   16c80:	90 e0       	ldi	r25, 0x00	; 0
   16c82:	ed b7       	in	r30, 0x3d	; 61
   16c84:	fe b7       	in	r31, 0x3e	; 62
   16c86:	93 87       	std	Z+11, r25	; 0x0b
   16c88:	82 87       	std	Z+10, r24	; 0x0a
   16c8a:	30 e0       	ldi	r19, 0x00	; 0
   16c8c:	31 87       	std	Z+9, r19	; 0x09
   16c8e:	20 87       	std	Z+8, r18	; 0x08
   16c90:	8c 91       	ld	r24, X
   16c92:	90 e0       	ldi	r25, 0x00	; 0
   16c94:	97 83       	std	Z+7, r25	; 0x07
   16c96:	86 83       	std	Z+6, r24	; 0x06
   16c98:	d5 83       	std	Z+5, r29	; 0x05
   16c9a:	c4 83       	std	Z+4, r28	; 0x04
   16c9c:	89 ed       	ldi	r24, 0xD9	; 217
   16c9e:	99 e2       	ldi	r25, 0x29	; 41
   16ca0:	10 c0       	rjmp	.+32     	; 0x16cc2 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16ca2:	50 e0       	ldi	r21, 0x00	; 0
   16ca4:	ed b7       	in	r30, 0x3d	; 61
   16ca6:	fe b7       	in	r31, 0x3e	; 62
   16ca8:	53 87       	std	Z+11, r21	; 0x0b
   16caa:	42 87       	std	Z+10, r20	; 0x0a
   16cac:	30 e0       	ldi	r19, 0x00	; 0
   16cae:	31 87       	std	Z+9, r19	; 0x09
   16cb0:	20 87       	std	Z+8, r18	; 0x08
   16cb2:	8c 91       	ld	r24, X
   16cb4:	90 e0       	ldi	r25, 0x00	; 0
   16cb6:	97 83       	std	Z+7, r25	; 0x07
   16cb8:	86 83       	std	Z+6, r24	; 0x06
   16cba:	d5 83       	std	Z+5, r29	; 0x05
   16cbc:	c4 83       	std	Z+4, r28	; 0x04
   16cbe:	88 e8       	ldi	r24, 0x88	; 136
   16cc0:	99 e2       	ldi	r25, 0x29	; 41
   16cc2:	a0 e0       	ldi	r26, 0x00	; 0
   16cc4:	81 83       	std	Z+1, r24	; 0x01
   16cc6:	92 83       	std	Z+2, r25	; 0x02
   16cc8:	a3 83       	std	Z+3, r26	; 0x03
   16cca:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16cce:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16cd2:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16cd6:	81 81       	ldd	r24, Z+1	; 0x01
   16cd8:	90 e0       	ldi	r25, 0x00	; 0
   16cda:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
    return(0);
}
   16cde:	80 e0       	ldi	r24, 0x00	; 0
   16ce0:	90 e0       	ldi	r25, 0x00	; 0
   16ce2:	cd b7       	in	r28, 0x3d	; 61
   16ce4:	de b7       	in	r29, 0x3e	; 62
   16ce6:	2b 96       	adiw	r28, 0x0b	; 11
   16ce8:	e2 e0       	ldi	r30, 0x02	; 2
   16cea:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00016cee <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16cee:	8f 30       	cpi	r24, 0x0F	; 15
   16cf0:	29 f0       	breq	.+10     	; 0x16cfc <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16cf2:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16cf6:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16cfa:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16cfc:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16d00:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16d04:	81 81       	ldd	r24, Z+1	; 0x01
   16d06:	88 23       	and	r24, r24
   16d08:	29 f0       	breq	.+10     	; 0x16d14 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16d0a:	87 81       	ldd	r24, Z+7	; 0x07
   16d0c:	90 85       	ldd	r25, Z+8	; 0x08
   16d0e:	80 64       	ori	r24, 0x40	; 64
   16d10:	90 87       	std	Z+8, r25	; 0x08
   16d12:	87 83       	std	Z+7, r24	; 0x07
   16d14:	08 95       	ret

00016d16 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16d16:	ac e1       	ldi	r26, 0x1C	; 28
   16d18:	b0 e0       	ldi	r27, 0x00	; 0
   16d1a:	e1 e9       	ldi	r30, 0x91	; 145
   16d1c:	f6 eb       	ldi	r31, 0xB6	; 182
   16d1e:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
   16d22:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16d24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d28:	85 ff       	sbrs	r24, 5
   16d2a:	16 c0       	rjmp	.+44     	; 0x16d58 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16d2c:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   16d30:	90 e0       	ldi	r25, 0x00	; 0
   16d32:	ed b7       	in	r30, 0x3d	; 61
   16d34:	fe b7       	in	r31, 0x3e	; 62
   16d36:	91 87       	std	Z+9, r25	; 0x09
   16d38:	80 87       	std	Z+8, r24	; 0x08
   16d3a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16d3e:	90 e0       	ldi	r25, 0x00	; 0
   16d40:	97 83       	std	Z+7, r25	; 0x07
   16d42:	86 83       	std	Z+6, r24	; 0x06
   16d44:	f5 82       	std	Z+5, r15	; 0x05
   16d46:	e4 82       	std	Z+4, r14	; 0x04
   16d48:	86 e5       	ldi	r24, 0x56	; 86
   16d4a:	99 e2       	ldi	r25, 0x29	; 41
   16d4c:	a0 e0       	ldi	r26, 0x00	; 0
   16d4e:	81 83       	std	Z+1, r24	; 0x01
   16d50:	92 83       	std	Z+2, r25	; 0x02
   16d52:	a3 83       	std	Z+3, r26	; 0x03
   16d54:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16d58:	fe e7       	ldi	r31, 0x7E	; 126
   16d5a:	ef 16       	cp	r14, r31
   16d5c:	f1 04       	cpc	r15, r1
   16d5e:	f1 f5       	brne	.+124    	; 0x16ddc <Amigo_Command+0xc6>
   16d60:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   16d64:	90 e0       	ldi	r25, 0x00	; 0
   16d66:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   16d6a:	89 2b       	or	r24, r25
   16d6c:	09 f4       	brne	.+2      	; 0x16d70 <Amigo_Command+0x5a>
   16d6e:	86 c0       	rjmp	.+268    	; 0x16e7c <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16d70:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16d74:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16d78:	81 81       	ldd	r24, Z+1	; 0x01
   16d7a:	90 e0       	ldi	r25, 0x00	; 0
   16d7c:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
        status = EOI_FLAG;
   16d80:	80 e0       	ldi	r24, 0x00	; 0
   16d82:	91 e0       	ldi	r25, 0x01	; 1
   16d84:	9c 8f       	std	Y+28, r25	; 0x1c
   16d86:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d88:	ae 01       	movw	r20, r28
   16d8a:	45 5e       	subi	r20, 0xE5	; 229
   16d8c:	5f 4f       	sbci	r21, 0xFF	; 255
   16d8e:	60 e0       	ldi	r22, 0x00	; 0
   16d90:	72 e0       	ldi	r23, 0x02	; 2
   16d92:	80 ee       	ldi	r24, 0xE0	; 224
   16d94:	9c e1       	ldi	r25, 0x1C	; 28
   16d96:	0e 94 34 8a 	call	0x11468	; 0x11468 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16d9a:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16d9e:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16da2:	81 81       	ldd	r24, Z+1	; 0x01
   16da4:	90 e0       	ldi	r25, 0x00	; 0
   16da6:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16dae:	88 27       	eor	r24, r24
   16db0:	90 7d       	andi	r25, 0xD0	; 208
   16db2:	89 2b       	or	r24, r25
   16db4:	09 f4       	brne	.+2      	; 0x16db8 <Amigo_Command+0xa2>
   16db6:	89 c2       	rjmp	.+1298   	; 0x172ca <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16db8:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16dbc:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16dc0:	81 e0       	ldi	r24, 0x01	; 1
   16dc2:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16dc4:	87 81       	ldd	r24, Z+7	; 0x07
   16dc6:	90 85       	ldd	r25, Z+8	; 0x08
   16dc8:	80 62       	ori	r24, 0x20	; 32
   16dca:	90 87       	std	Z+8, r25	; 0x08
   16dcc:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16dce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dd2:	80 ff       	sbrs	r24, 0
   16dd4:	7a c2       	rjmp	.+1268   	; 0x172ca <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16dd6:	84 e3       	ldi	r24, 0x34	; 52
   16dd8:	99 e2       	ldi	r25, 0x29	; 41
   16dda:	8e c0       	rjmp	.+284    	; 0x16ef8 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16ddc:	ff e7       	ldi	r31, 0x7F	; 127
   16dde:	ef 16       	cp	r14, r31
   16de0:	f1 04       	cpc	r15, r1
   16de2:	09 f0       	breq	.+2      	; 0x16de6 <Amigo_Command+0xd0>
   16de4:	4b c0       	rjmp	.+150    	; 0x16e7c <Amigo_Command+0x166>
   16de6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16dea:	90 e0       	ldi	r25, 0x00	; 0
   16dec:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   16df0:	89 2b       	or	r24, r25
   16df2:	09 f4       	brne	.+2      	; 0x16df6 <Amigo_Command+0xe0>
   16df4:	43 c0       	rjmp	.+134    	; 0x16e7c <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16df6:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16dfa:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16dfe:	81 81       	ldd	r24, Z+1	; 0x01
   16e00:	90 e0       	ldi	r25, 0x00	; 0
   16e02:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16e06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e0a:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16e0c:	0e 94 0b 84 	call	0x10816	; 0x10816 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16e10:	80 e0       	ldi	r24, 0x00	; 0
   16e12:	91 e0       	ldi	r25, 0x01	; 1
   16e14:	9c 8f       	std	Y+28, r25	; 0x1c
   16e16:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16e18:	ae 01       	movw	r20, r28
   16e1a:	45 5e       	subi	r20, 0xE5	; 229
   16e1c:	5f 4f       	sbci	r21, 0xFF	; 255
   16e1e:	60 e0       	ldi	r22, 0x00	; 0
   16e20:	72 e0       	ldi	r23, 0x02	; 2
   16e22:	80 ee       	ldi	r24, 0xE0	; 224
   16e24:	9c e1       	ldi	r25, 0x1C	; 28
   16e26:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16e2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e2e:	87 ff       	sbrs	r24, 7
   16e30:	04 c0       	rjmp	.+8      	; 0x16e3a <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16e32:	87 ed       	ldi	r24, 0xD7	; 215
   16e34:	95 e1       	ldi	r25, 0x15	; 21
   16e36:	0e 94 1d 84 	call	0x1083a	; 0x1083a <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16e3a:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16e3e:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16e42:	81 81       	ldd	r24, Z+1	; 0x01
   16e44:	90 e0       	ldi	r25, 0x00	; 0
   16e46:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16e4e:	88 27       	eor	r24, r24
   16e50:	90 7d       	andi	r25, 0xD0	; 208
   16e52:	89 2b       	or	r24, r25
   16e54:	09 f4       	brne	.+2      	; 0x16e58 <Amigo_Command+0x142>
   16e56:	39 c2       	rjmp	.+1138   	; 0x172ca <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16e58:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16e5c:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16e60:	81 e0       	ldi	r24, 0x01	; 1
   16e62:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16e64:	87 81       	ldd	r24, Z+7	; 0x07
   16e66:	90 85       	ldd	r25, Z+8	; 0x08
   16e68:	80 62       	ori	r24, 0x20	; 32
   16e6a:	90 87       	std	Z+8, r25	; 0x08
   16e6c:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16e6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e72:	80 ff       	sbrs	r24, 0
   16e74:	2a c2       	rjmp	.+1108   	; 0x172ca <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16e76:	83 e1       	ldi	r24, 0x13	; 19
   16e78:	99 e2       	ldi	r25, 0x29	; 41
   16e7a:	3e c0       	rjmp	.+124    	; 0x16ef8 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16e7c:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16e80:	90 e0       	ldi	r25, 0x00	; 0
   16e82:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   16e86:	89 2b       	or	r24, r25
   16e88:	19 f4       	brne	.+6      	; 0x16e90 <Amigo_Command+0x17a>
        return(0);
   16e8a:	80 e0       	ldi	r24, 0x00	; 0
   16e8c:	90 e0       	ldi	r25, 0x00	; 0
   16e8e:	25 c2       	rjmp	.+1098   	; 0x172da <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16e90:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   16e94:	90 e0       	ldi	r25, 0x00	; 0
   16e96:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   16e9a:	89 2b       	or	r24, r25
   16e9c:	b1 f7       	brne	.-20     	; 0x16e8a <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16e9e:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   16ea2:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   16ea6:	81 81       	ldd	r24, Z+1	; 0x01
   16ea8:	90 e0       	ldi	r25, 0x00	; 0
   16eaa:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16eae:	80 e0       	ldi	r24, 0x00	; 0
   16eb0:	91 e0       	ldi	r25, 0x01	; 1
   16eb2:	9c 8f       	std	Y+28, r25	; 0x1c
   16eb4:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16eb6:	ae 01       	movw	r20, r28
   16eb8:	45 5e       	subi	r20, 0xE5	; 229
   16eba:	5f 4f       	sbci	r21, 0xFF	; 255
   16ebc:	60 e0       	ldi	r22, 0x00	; 0
   16ebe:	72 e0       	ldi	r23, 0x02	; 2
   16ec0:	80 ee       	ldi	r24, 0xE0	; 224
   16ec2:	9c e1       	ldi	r25, 0x1C	; 28
   16ec4:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   16ec8:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16eca:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16ecc:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16ece:	88 27       	eor	r24, r24
   16ed0:	90 7d       	andi	r25, 0xD0	; 208
   16ed2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16ed6:	89 2b       	or	r24, r25
   16ed8:	c1 f0       	breq	.+48     	; 0x16f0a <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16eda:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16ede:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16ee2:	81 e0       	ldi	r24, 0x01	; 1
   16ee4:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16ee6:	87 81       	ldd	r24, Z+7	; 0x07
   16ee8:	90 85       	ldd	r25, Z+8	; 0x08
   16eea:	80 62       	ori	r24, 0x20	; 32
   16eec:	90 87       	std	Z+8, r25	; 0x08
   16eee:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16ef0:	20 ff       	sbrs	r18, 0
   16ef2:	eb c1       	rjmp	.+982    	; 0x172ca <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16ef4:	82 ef       	ldi	r24, 0xF2	; 242
   16ef6:	98 e2       	ldi	r25, 0x28	; 40
   16ef8:	a0 e0       	ldi	r26, 0x00	; 0
   16efa:	ed b7       	in	r30, 0x3d	; 61
   16efc:	fe b7       	in	r31, 0x3e	; 62
   16efe:	81 83       	std	Z+1, r24	; 0x01
   16f00:	92 83       	std	Z+2, r25	; 0x02
   16f02:	a3 83       	std	Z+3, r26	; 0x03
   16f04:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   16f08:	e0 c1       	rjmp	.+960    	; 0x172ca <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f0a:	25 ff       	sbrs	r18, 5
   16f0c:	0e c0       	rjmp	.+28     	; 0x16f2a <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16f0e:	ed b7       	in	r30, 0x3d	; 61
   16f10:	fe b7       	in	r31, 0x3e	; 62
   16f12:	17 83       	std	Z+7, r17	; 0x07
   16f14:	06 83       	std	Z+6, r16	; 0x06
   16f16:	f5 82       	std	Z+5, r15	; 0x05
   16f18:	e4 82       	std	Z+4, r14	; 0x04
   16f1a:	83 ec       	ldi	r24, 0xC3	; 195
   16f1c:	98 e2       	ldi	r25, 0x28	; 40
   16f1e:	a0 e0       	ldi	r26, 0x00	; 0
   16f20:	81 83       	std	Z+1, r24	; 0x01
   16f22:	92 83       	std	Z+2, r25	; 0x02
   16f24:	a3 83       	std	Z+3, r26	; 0x03
   16f26:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            secondary, len);
#endif
    if(!len)
   16f2a:	01 15       	cp	r16, r1
   16f2c:	11 05       	cpc	r17, r1
   16f2e:	61 f4       	brne	.+24     	; 0x16f48 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16f30:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16f34:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16f38:	81 e0       	ldi	r24, 0x01	; 1
   16f3a:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16f3c:	87 81       	ldd	r24, Z+7	; 0x07
   16f3e:	90 85       	ldd	r25, Z+8	; 0x08
   16f40:	80 62       	ori	r24, 0x20	; 32
   16f42:	90 87       	std	Z+8, r25	; 0x08
   16f44:	87 83       	std	Z+7, r24	; 0x07
   16f46:	c1 c1       	rjmp	.+898    	; 0x172ca <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16f48:	60 91 e0 1c 	lds	r22, 0x1CE0	; 0x801ce0 <gpib_iobuff>

    if (secondary == 0x68)
   16f4c:	f8 e6       	ldi	r31, 0x68	; 104
   16f4e:	ef 16       	cp	r14, r31
   16f50:	f1 04       	cpc	r15, r1
   16f52:	09 f0       	breq	.+2      	; 0x16f56 <Amigo_Command+0x240>
   16f54:	28 c1       	rjmp	.+592    	; 0x171a6 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16f56:	61 11       	cpse	r22, r1
   16f58:	2e c0       	rjmp	.+92     	; 0x16fb6 <Amigo_Command+0x2a0>
   16f5a:	02 30       	cpi	r16, 0x02	; 2
   16f5c:	11 05       	cpc	r17, r1
   16f5e:	09 f0       	breq	.+2      	; 0x16f62 <Amigo_Command+0x24c>
   16f60:	b9 c1       	rjmp	.+882    	; 0x172d4 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f66:	85 ff       	sbrs	r24, 5
   16f68:	0a c0       	rjmp	.+20     	; 0x16f7e <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16f6a:	83 ea       	ldi	r24, 0xA3	; 163
   16f6c:	98 e2       	ldi	r25, 0x28	; 40
   16f6e:	a0 e0       	ldi	r26, 0x00	; 0
   16f70:	ed b7       	in	r30, 0x3d	; 61
   16f72:	fe b7       	in	r31, 0x3e	; 62
   16f74:	81 83       	std	Z+1, r24	; 0x01
   16f76:	92 83       	std	Z+2, r25	; 0x02
   16f78:	a3 83       	std	Z+3, r26	; 0x03
   16f7a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16f7e:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16f82:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16f86:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16f88:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16f8a:	10 86       	std	Z+8, r1	; 0x08
   16f8c:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16f8e:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16f90:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   16f94:	98 2f       	mov	r25, r24
   16f96:	92 95       	swap	r25
   16f98:	96 95       	lsr	r25
   16f9a:	96 95       	lsr	r25
   16f9c:	93 70       	andi	r25, 0x03	; 3
   16f9e:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16fa0:	8f 73       	andi	r24, 0x3F	; 63
   16fa2:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16fa4:	ce 01       	movw	r24, r28
   16fa6:	0a 96       	adiw	r24, 0x0a	; 10
   16fa8:	d1 d9       	rcall	.-3166   	; 0x1634c <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16faa:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   16fae:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   16fb2:	85 e0       	ldi	r24, 0x05	; 5
   16fb4:	19 c1       	rjmp	.+562    	; 0x171e8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16fb6:	62 30       	cpi	r22, 0x02	; 2
   16fb8:	09 f0       	breq	.+2      	; 0x16fbc <Amigo_Command+0x2a6>
   16fba:	3f c0       	rjmp	.+126    	; 0x1703a <Amigo_Command+0x324>
   16fbc:	05 30       	cpi	r16, 0x05	; 5
   16fbe:	11 05       	cpc	r17, r1
   16fc0:	d1 f4       	brne	.+52     	; 0x16ff6 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fc6:	85 ff       	sbrs	r24, 5
   16fc8:	0a c0       	rjmp	.+20     	; 0x16fde <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16fca:	8f e8       	ldi	r24, 0x8F	; 143
   16fcc:	98 e2       	ldi	r25, 0x28	; 40
   16fce:	a0 e0       	ldi	r26, 0x00	; 0
   16fd0:	ed b7       	in	r30, 0x3d	; 61
   16fd2:	fe b7       	in	r31, 0x3e	; 62
   16fd4:	81 83       	std	Z+1, r24	; 0x01
   16fd6:	92 83       	std	Z+2, r25	; 0x02
   16fd8:	a3 83       	std	Z+3, r26	; 0x03
   16fda:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fde:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   16fe2:	85 de       	rcall	.-758    	; 0x16cee <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16fe4:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <gpib_iobuff+0x2>
   16fe8:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16fea:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   16fee:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16ff0:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   16ff4:	1d c0       	rjmp	.+58     	; 0x17030 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16ff6:	06 30       	cpi	r16, 0x06	; 6
   16ff8:	11 05       	cpc	r17, r1
   16ffa:	09 f0       	breq	.+2      	; 0x16ffe <Amigo_Command+0x2e8>
   16ffc:	6b c1       	rjmp	.+726    	; 0x172d4 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ffe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17002:	85 ff       	sbrs	r24, 5
   17004:	0a c0       	rjmp	.+20     	; 0x1701a <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17006:	8b e7       	ldi	r24, 0x7B	; 123
   17008:	98 e2       	ldi	r25, 0x28	; 40
   1700a:	a0 e0       	ldi	r26, 0x00	; 0
   1700c:	ed b7       	in	r30, 0x3d	; 61
   1700e:	fe b7       	in	r31, 0x3e	; 62
   17010:	81 83       	std	Z+1, r24	; 0x01
   17012:	92 83       	std	Z+2, r25	; 0x02
   17014:	a3 83       	std	Z+3, r26	; 0x03
   17016:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1701a:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   1701e:	67 de       	rcall	.-818    	; 0x16cee <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17020:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   17024:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17026:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   1702a:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1702c:	80 91 e5 1c 	lds	r24, 0x1CE5	; 0x801ce5 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17030:	8f 87       	std	Y+15, r24	; 0x0f
   17032:	ce 01       	movw	r24, r28
   17034:	0a 96       	adiw	r24, 0x0a	; 10
   17036:	8a d9       	rcall	.-3308   	; 0x1634c <amigo_seek>
   17038:	d8 c0       	rjmp	.+432    	; 0x171ea <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   1703a:	63 30       	cpi	r22, 0x03	; 3
   1703c:	e9 f4       	brne	.+58     	; 0x17078 <Amigo_Command+0x362>
   1703e:	02 30       	cpi	r16, 0x02	; 2
   17040:	11 05       	cpc	r17, r1
   17042:	09 f0       	breq	.+2      	; 0x17046 <Amigo_Command+0x330>
   17044:	47 c1       	rjmp	.+654    	; 0x172d4 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17046:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1704a:	85 ff       	sbrs	r24, 5
   1704c:	0a c0       	rjmp	.+20     	; 0x17062 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1704e:	82 e5       	ldi	r24, 0x52	; 82
   17050:	98 e2       	ldi	r25, 0x28	; 40
   17052:	a0 e0       	ldi	r26, 0x00	; 0
   17054:	ed b7       	in	r30, 0x3d	; 61
   17056:	fe b7       	in	r31, 0x3e	; 62
   17058:	81 83       	std	Z+1, r24	; 0x01
   1705a:	92 83       	std	Z+2, r25	; 0x02
   1705c:	a3 83       	std	Z+3, r26	; 0x03
   1705e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17062:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            amigo_request_status();
   17066:	43 de       	rcall	.-890    	; 0x16cee <amigo_check_unit>
   17068:	3d d8       	rcall	.-3974   	; 0x160e4 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   1706a:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   1706e:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   17072:	83 e0       	ldi	r24, 0x03	; 3
   17074:	80 83       	st	Z, r24
   17076:	29 c1       	rjmp	.+594    	; 0x172ca <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17078:	65 30       	cpi	r22, 0x05	; 5
   1707a:	d9 f4       	brne	.+54     	; 0x170b2 <Amigo_Command+0x39c>
   1707c:	02 30       	cpi	r16, 0x02	; 2
   1707e:	11 05       	cpc	r17, r1
   17080:	09 f0       	breq	.+2      	; 0x17084 <Amigo_Command+0x36e>
   17082:	28 c1       	rjmp	.+592    	; 0x172d4 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17084:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17088:	85 ff       	sbrs	r24, 5
   1708a:	0a c0       	rjmp	.+20     	; 0x170a0 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   1708c:	81 e3       	ldi	r24, 0x31	; 49
   1708e:	98 e2       	ldi	r25, 0x28	; 40
   17090:	a0 e0       	ldi	r26, 0x00	; 0
   17092:	ed b7       	in	r30, 0x3d	; 61
   17094:	fe b7       	in	r31, 0x3e	; 62
   17096:	81 83       	std	Z+1, r24	; 0x01
   17098:	92 83       	std	Z+2, r25	; 0x02
   1709a:	a3 83       	std	Z+3, r26	; 0x03
   1709c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170a0:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   170a4:	24 de       	rcall	.-952    	; 0x16cee <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   170a6:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   170aa:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   170ae:	86 e0       	ldi	r24, 0x06	; 6
   170b0:	e7 c0       	rjmp	.+462    	; 0x17280 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   170b2:	67 30       	cpi	r22, 0x07	; 7
   170b4:	f9 f4       	brne	.+62     	; 0x170f4 <Amigo_Command+0x3de>
   170b6:	04 30       	cpi	r16, 0x04	; 4
   170b8:	11 05       	cpc	r17, r1
   170ba:	09 f0       	breq	.+2      	; 0x170be <Amigo_Command+0x3a8>
   170bc:	0b c1       	rjmp	.+534    	; 0x172d4 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170c2:	85 ff       	sbrs	r24, 5
   170c4:	0a c0       	rjmp	.+20     	; 0x170da <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   170c6:	81 e2       	ldi	r24, 0x21	; 33
   170c8:	98 e2       	ldi	r25, 0x28	; 40
   170ca:	a0 e0       	ldi	r26, 0x00	; 0
   170cc:	ed b7       	in	r30, 0x3d	; 61
   170ce:	fe b7       	in	r31, 0x3e	; 62
   170d0:	81 83       	std	Z+1, r24	; 0x01
   170d2:	92 83       	std	Z+2, r25	; 0x02
   170d4:	a3 83       	std	Z+3, r26	; 0x03
   170d6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170da:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   170de:	07 de       	rcall	.-1010   	; 0x16cee <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   170e0:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <gpib_iobuff+0x2>
   170e4:	90 e0       	ldi	r25, 0x00	; 0
   170e6:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   170e8:	88 27       	eor	r24, r24
   170ea:	20 91 e3 1c 	lds	r18, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   170ee:	82 2b       	or	r24, r18
   170f0:	58 d9       	rcall	.-3408   	; 0x163a2 <amigo_verify>
   170f2:	f3 c0       	rjmp	.+486    	; 0x172da <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   170f4:	68 30       	cpi	r22, 0x08	; 8
   170f6:	d9 f4       	brne	.+54     	; 0x1712e <Amigo_Command+0x418>
   170f8:	02 30       	cpi	r16, 0x02	; 2
   170fa:	11 05       	cpc	r17, r1
   170fc:	09 f0       	breq	.+2      	; 0x17100 <Amigo_Command+0x3ea>
   170fe:	ea c0       	rjmp	.+468    	; 0x172d4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17100:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17104:	85 ff       	sbrs	r24, 5
   17106:	0a c0       	rjmp	.+20     	; 0x1711c <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17108:	8f ef       	ldi	r24, 0xFF	; 255
   1710a:	97 e2       	ldi	r25, 0x27	; 39
   1710c:	a0 e0       	ldi	r26, 0x00	; 0
   1710e:	ed b7       	in	r30, 0x3d	; 61
   17110:	fe b7       	in	r31, 0x3e	; 62
   17112:	81 83       	std	Z+1, r24	; 0x01
   17114:	92 83       	std	Z+2, r25	; 0x02
   17116:	a3 83       	std	Z+3, r26	; 0x03
   17118:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1711c:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17120:	e6 dd       	rcall	.-1076   	; 0x16cee <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17122:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   17126:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   1712a:	88 e0       	ldi	r24, 0x08	; 8
   1712c:	5d c0       	rjmp	.+186    	; 0x171e8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   1712e:	86 2f       	mov	r24, r22
   17130:	8f 7d       	andi	r24, 0xDF	; 223
   17132:	8b 30       	cpi	r24, 0x0B	; 11
   17134:	d9 f4       	brne	.+54     	; 0x1716c <Amigo_Command+0x456>
   17136:	02 30       	cpi	r16, 0x02	; 2
   17138:	11 05       	cpc	r17, r1
   1713a:	09 f0       	breq	.+2      	; 0x1713e <Amigo_Command+0x428>
   1713c:	cb c0       	rjmp	.+406    	; 0x172d4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1713e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17142:	85 ff       	sbrs	r24, 5
   17144:	0a c0       	rjmp	.+20     	; 0x1715a <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   17146:	83 ee       	ldi	r24, 0xE3	; 227
   17148:	97 e2       	ldi	r25, 0x27	; 39
   1714a:	a0 e0       	ldi	r26, 0x00	; 0
   1714c:	ed b7       	in	r30, 0x3d	; 61
   1714e:	fe b7       	in	r31, 0x3e	; 62
   17150:	81 83       	std	Z+1, r24	; 0x01
   17152:	92 83       	std	Z+2, r25	; 0x02
   17154:	a3 83       	std	Z+3, r26	; 0x03
   17156:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1715a:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   1715e:	c7 dd       	rcall	.-1138   	; 0x16cee <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   17160:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   17164:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   17168:	8a e0       	ldi	r24, 0x0A	; 10
   1716a:	3e c0       	rjmp	.+124    	; 0x171e8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   1716c:	64 31       	cpi	r22, 0x14	; 20
   1716e:	09 f0       	breq	.+2      	; 0x17172 <Amigo_Command+0x45c>
   17170:	b1 c0       	rjmp	.+354    	; 0x172d4 <Amigo_Command+0x5be>
   17172:	02 30       	cpi	r16, 0x02	; 2
   17174:	11 05       	cpc	r17, r1
   17176:	09 f0       	breq	.+2      	; 0x1717a <Amigo_Command+0x464>
   17178:	ad c0       	rjmp	.+346    	; 0x172d4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1717a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1717e:	85 ff       	sbrs	r24, 5
   17180:	0a c0       	rjmp	.+20     	; 0x17196 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17182:	8a eb       	ldi	r24, 0xBA	; 186
   17184:	97 e2       	ldi	r25, 0x27	; 39
   17186:	a0 e0       	ldi	r26, 0x00	; 0
   17188:	ed b7       	in	r30, 0x3d	; 61
   1718a:	fe b7       	in	r31, 0x3e	; 62
   1718c:	81 83       	std	Z+1, r24	; 0x01
   1718e:	92 83       	std	Z+2, r25	; 0x02
   17190:	a3 83       	std	Z+3, r26	; 0x03
   17192:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
            amigo_request_logical_address();
   17196:	0e 94 64 b0 	call	0x160c8	; 0x160c8 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1719a:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   1719e:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   171a2:	84 e0       	ldi	r24, 0x04	; 4
   171a4:	21 c0       	rjmp	.+66     	; 0x171e8 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   171a6:	f9 e6       	ldi	r31, 0x69	; 105
   171a8:	ef 16       	cp	r14, r31
   171aa:	f1 04       	cpc	r15, r1
   171ac:	39 f5       	brne	.+78     	; 0x171fc <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   171ae:	68 30       	cpi	r22, 0x08	; 8
   171b0:	09 f0       	breq	.+2      	; 0x171b4 <Amigo_Command+0x49e>
   171b2:	90 c0       	rjmp	.+288    	; 0x172d4 <Amigo_Command+0x5be>
   171b4:	02 30       	cpi	r16, 0x02	; 2
   171b6:	11 05       	cpc	r17, r1
   171b8:	09 f0       	breq	.+2      	; 0x171bc <Amigo_Command+0x4a6>
   171ba:	8c c0       	rjmp	.+280    	; 0x172d4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171c0:	85 ff       	sbrs	r24, 5
   171c2:	0a c0       	rjmp	.+20     	; 0x171d8 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   171c4:	8a e9       	ldi	r24, 0x9A	; 154
   171c6:	97 e2       	ldi	r25, 0x27	; 39
   171c8:	a0 e0       	ldi	r26, 0x00	; 0
   171ca:	ed b7       	in	r30, 0x3d	; 61
   171cc:	fe b7       	in	r31, 0x3e	; 62
   171ce:	81 83       	std	Z+1, r24	; 0x01
   171d0:	92 83       	std	Z+2, r25	; 0x02
   171d2:	a3 83       	std	Z+3, r26	; 0x03
   171d4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171d8:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   171dc:	88 dd       	rcall	.-1264   	; 0x16cee <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   171de:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   171e2:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   171e6:	89 e0       	ldi	r24, 0x09	; 9
   171e8:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   171ea:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   171ee:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   171f2:	81 81       	ldd	r24, Z+1	; 0x01
   171f4:	90 e0       	ldi	r25, 0x00	; 0
   171f6:	0e 94 e5 84 	call	0x109ca	; 0x109ca <gpib_enable_PPR>
   171fa:	67 c0       	rjmp	.+206    	; 0x172ca <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   171fc:	fa e6       	ldi	r31, 0x6A	; 106
   171fe:	ef 16       	cp	r14, r31
   17200:	f1 04       	cpc	r15, r1
   17202:	09 f0       	breq	.+2      	; 0x17206 <Amigo_Command+0x4f0>
   17204:	40 c0       	rjmp	.+128    	; 0x17286 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17206:	68 30       	cpi	r22, 0x08	; 8
   17208:	f1 f4       	brne	.+60     	; 0x17246 <Amigo_Command+0x530>
   1720a:	02 30       	cpi	r16, 0x02	; 2
   1720c:	11 05       	cpc	r17, r1
   1720e:	09 f0       	breq	.+2      	; 0x17212 <Amigo_Command+0x4fc>
   17210:	61 c0       	rjmp	.+194    	; 0x172d4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17212:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17216:	85 ff       	sbrs	r24, 5
   17218:	0a c0       	rjmp	.+20     	; 0x1722e <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1721a:	8f e6       	ldi	r24, 0x6F	; 111
   1721c:	97 e2       	ldi	r25, 0x27	; 39
   1721e:	a0 e0       	ldi	r26, 0x00	; 0
   17220:	ed b7       	in	r30, 0x3d	; 61
   17222:	fe b7       	in	r31, 0x3e	; 62
   17224:	81 83       	std	Z+1, r24	; 0x01
   17226:	92 83       	std	Z+2, r25	; 0x02
   17228:	a3 83       	std	Z+3, r26	; 0x03
   1722a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1722e:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17232:	5d dd       	rcall	.-1350   	; 0x16cee <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17234:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   17238:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   1723c:	82 e0       	ldi	r24, 0x02	; 2
   1723e:	80 83       	st	Z, r24
            amigo_request_status();
   17240:	0e 94 72 b0 	call	0x160e4	; 0x160e4 <amigo_request_status>
   17244:	42 c0       	rjmp	.+132    	; 0x172ca <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17246:	65 30       	cpi	r22, 0x05	; 5
   17248:	09 f0       	breq	.+2      	; 0x1724c <Amigo_Command+0x536>
   1724a:	44 c0       	rjmp	.+136    	; 0x172d4 <Amigo_Command+0x5be>
   1724c:	02 30       	cpi	r16, 0x02	; 2
   1724e:	11 05       	cpc	r17, r1
   17250:	09 f0       	breq	.+2      	; 0x17254 <Amigo_Command+0x53e>
   17252:	40 c0       	rjmp	.+128    	; 0x172d4 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17254:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17258:	85 ff       	sbrs	r24, 5
   1725a:	0a c0       	rjmp	.+20     	; 0x17270 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   1725c:	80 e5       	ldi	r24, 0x50	; 80
   1725e:	97 e2       	ldi	r25, 0x27	; 39
   17260:	a0 e0       	ldi	r26, 0x00	; 0
   17262:	ed b7       	in	r30, 0x3d	; 61
   17264:	fe b7       	in	r31, 0x3e	; 62
   17266:	81 83       	std	Z+1, r24	; 0x01
   17268:	92 83       	std	Z+2, r25	; 0x02
   1726a:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1726c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17270:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17274:	3c dd       	rcall	.-1416   	; 0x16cee <amigo_check_unit>
   17276:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   1727a:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   1727e:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   17280:	80 83       	st	Z, r24
   17282:	c5 d9       	rcall	.-3190   	; 0x1660e <amigo_buffered_read_command>
   17284:	2a c0       	rjmp	.+84     	; 0x172da <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17286:	fc e6       	ldi	r31, 0x6C	; 108
   17288:	ef 16       	cp	r14, r31
   1728a:	f1 04       	cpc	r15, r1
   1728c:	d1 f4       	brne	.+52     	; 0x172c2 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   1728e:	68 31       	cpi	r22, 0x18	; 24
   17290:	09 f5       	brne	.+66     	; 0x172d4 <Amigo_Command+0x5be>
   17292:	05 30       	cpi	r16, 0x05	; 5
   17294:	11 05       	cpc	r17, r1
   17296:	f1 f4       	brne	.+60     	; 0x172d4 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17298:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1729c:	85 ff       	sbrs	r24, 5
   1729e:	0a c0       	rjmp	.+20     	; 0x172b4 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   172a0:	80 e4       	ldi	r24, 0x40	; 64
   172a2:	97 e2       	ldi	r25, 0x27	; 39
   172a4:	a0 e0       	ldi	r26, 0x00	; 0
   172a6:	ed b7       	in	r30, 0x3d	; 61
   172a8:	fe b7       	in	r31, 0x3e	; 62
   172aa:	81 83       	std	Z+1, r24	; 0x01
   172ac:	92 83       	std	Z+2, r25	; 0x02
   172ae:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   172b0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   172b4:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   172b8:	1a dd       	rcall	.-1484   	; 0x16cee <amigo_check_unit>
   172ba:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   172be:	0f d9       	rcall	.-3554   	; 0x164de <amigo_format>
   172c0:	04 c0       	rjmp	.+8      	; 0x172ca <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   172c2:	f0 e7       	ldi	r31, 0x70	; 112
   172c4:	ef 16       	cp	r14, r31
   172c6:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   172c8:	29 f4       	brne	.+10     	; 0x172d4 <Amigo_Command+0x5be>
   172ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
   172cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
   172ce:	88 27       	eor	r24, r24
   172d0:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   172d2:	03 c0       	rjmp	.+6      	; 0x172da <Amigo_Command+0x5c4>
   172d4:	a8 01       	movw	r20, r16
   172d6:	8e 2d       	mov	r24, r14
   172d8:	ed db       	rcall	.-2086   	; 0x16ab4 <amigo_todo_op>
}
   172da:	6c 96       	adiw	r28, 0x1c	; 28
   172dc:	e6 e0       	ldi	r30, 0x06	; 6
   172de:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

000172e2 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   172e2:	a9 e0       	ldi	r26, 0x09	; 9
   172e4:	b0 e0       	ldi	r27, 0x00	; 0
   172e6:	e7 e7       	ldi	r30, 0x77	; 119
   172e8:	f9 eb       	ldi	r31, 0xB9	; 185
   172ea:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   172ee:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172f4:	85 ff       	sbrs	r24, 5
   172f6:	16 c0       	rjmp	.+44     	; 0x17324 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   172f8:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   172fc:	90 e0       	ldi	r25, 0x00	; 0
   172fe:	ed b7       	in	r30, 0x3d	; 61
   17300:	fe b7       	in	r31, 0x3e	; 62
   17302:	91 87       	std	Z+9, r25	; 0x09
   17304:	80 87       	std	Z+8, r24	; 0x08
   17306:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1730a:	90 e0       	ldi	r25, 0x00	; 0
   1730c:	97 83       	std	Z+7, r25	; 0x07
   1730e:	86 83       	std	Z+6, r24	; 0x06
   17310:	d5 83       	std	Z+5, r29	; 0x05
   17312:	c4 83       	std	Z+4, r28	; 0x04
   17314:	8e e0       	ldi	r24, 0x0E	; 14
   17316:	97 e2       	ldi	r25, 0x27	; 39
   17318:	a0 e0       	ldi	r26, 0x00	; 0
   1731a:	81 83       	std	Z+1, r24	; 0x01
   1731c:	92 83       	std	Z+2, r25	; 0x02
   1731e:	a3 83       	std	Z+3, r26	; 0x03
   17320:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17324:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17328:	8f 35       	cpi	r24, 0x5F	; 95
   1732a:	09 f4       	brne	.+2      	; 0x1732e <Amigo_Execute+0x4c>
   1732c:	ad c0       	rjmp	.+346    	; 0x17488 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1732e:	90 e0       	ldi	r25, 0x00	; 0
   17330:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   17334:	89 2b       	or	r24, r25
   17336:	39 f0       	breq	.+14     	; 0x17346 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17338:	ce 01       	movw	r24, r28
   1733a:	87 7f       	andi	r24, 0xF7	; 247
   1733c:	80 36       	cpi	r24, 0x60	; 96
   1733e:	91 05       	cpc	r25, r1
   17340:	09 f0       	breq	.+2      	; 0x17344 <Amigo_Execute+0x62>
   17342:	a2 c0       	rjmp	.+324    	; 0x17488 <Amigo_Execute+0x1a6>
   17344:	08 c0       	rjmp	.+16     	; 0x17356 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17346:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1734a:	90 e0       	ldi	r25, 0x00	; 0
   1734c:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   17350:	89 2b       	or	r24, r25
   17352:	91 f7       	brne	.-28     	; 0x17338 <Amigo_Execute+0x56>
   17354:	99 c0       	rjmp	.+306    	; 0x17488 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17356:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   1735a:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   1735e:	81 81       	ldd	r24, Z+1	; 0x01
   17360:	90 e0       	ldi	r25, 0x00	; 0
   17362:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>

    if(secondary == 0x60)
   17366:	c0 36       	cpi	r28, 0x60	; 96
   17368:	d1 05       	cpc	r29, r1
   1736a:	09 f0       	breq	.+2      	; 0x1736e <Amigo_Execute+0x8c>
   1736c:	4e c0       	rjmp	.+156    	; 0x1740a <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   1736e:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   17372:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   17376:	e0 81       	ld	r30, Z
   17378:	8e 2f       	mov	r24, r30
   1737a:	90 e0       	ldi	r25, 0x00	; 0
   1737c:	8b 30       	cpi	r24, 0x0B	; 11
   1737e:	91 05       	cpc	r25, r1
   17380:	08 f0       	brcs	.+2      	; 0x17384 <Amigo_Execute+0xa2>
   17382:	41 c0       	rjmp	.+130    	; 0x17406 <Amigo_Execute+0x124>
   17384:	fc 01       	movw	r30, r24
   17386:	ea 52       	subi	r30, 0x2A	; 42
   17388:	ff 4f       	sbci	r31, 0xFF	; 255
   1738a:	0c 94 29 e2 	jmp	0x1c452	; 0x1c452 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1738e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17392:	85 ff       	sbrs	r24, 5
   17394:	18 c0       	rjmp	.+48     	; 0x173c6 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17396:	8e ee       	ldi	r24, 0xEE	; 238
   17398:	96 e2       	ldi	r25, 0x26	; 38
   1739a:	0d c0       	rjmp	.+26     	; 0x173b6 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1739c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173a0:	85 ff       	sbrs	r24, 5
   173a2:	11 c0       	rjmp	.+34     	; 0x173c6 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   173a4:	8d ec       	ldi	r24, 0xCD	; 205
   173a6:	96 e2       	ldi	r25, 0x26	; 38
   173a8:	06 c0       	rjmp	.+12     	; 0x173b6 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ae:	85 ff       	sbrs	r24, 5
   173b0:	0a c0       	rjmp	.+20     	; 0x173c6 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   173b2:	8e ea       	ldi	r24, 0xAE	; 174
   173b4:	96 e2       	ldi	r25, 0x26	; 38
   173b6:	a0 e0       	ldi	r26, 0x00	; 0
   173b8:	ed b7       	in	r30, 0x3d	; 61
   173ba:	fe b7       	in	r31, 0x3e	; 62
   173bc:	81 83       	std	Z+1, r24	; 0x01
   173be:	92 83       	std	Z+2, r25	; 0x02
   173c0:	a3 83       	std	Z+3, r26	; 0x03
   173c2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   173c6:	b0 d9       	rcall	.-3232   	; 0x16728 <amigo_buffered_read_execute>
   173c8:	61 c0       	rjmp	.+194    	; 0x1748c <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ce:	85 ff       	sbrs	r24, 5
   173d0:	18 c0       	rjmp	.+48     	; 0x17402 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   173d2:	8c e8       	ldi	r24, 0x8C	; 140
   173d4:	96 e2       	ldi	r25, 0x26	; 38
   173d6:	0d c0       	rjmp	.+26     	; 0x173f2 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173dc:	85 ff       	sbrs	r24, 5
   173de:	11 c0       	rjmp	.+34     	; 0x17402 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   173e0:	80 e7       	ldi	r24, 0x70	; 112
   173e2:	96 e2       	ldi	r25, 0x26	; 38
   173e4:	06 c0       	rjmp	.+12     	; 0x173f2 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ea:	85 ff       	sbrs	r24, 5
   173ec:	0a c0       	rjmp	.+20     	; 0x17402 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   173ee:	80 e5       	ldi	r24, 0x50	; 80
   173f0:	96 e2       	ldi	r25, 0x26	; 38
   173f2:	a0 e0       	ldi	r26, 0x00	; 0
   173f4:	ed b7       	in	r30, 0x3d	; 61
   173f6:	fe b7       	in	r31, 0x3e	; 62
   173f8:	81 83       	std	Z+1, r24	; 0x01
   173fa:	92 83       	std	Z+2, r25	; 0x02
   173fc:	a3 83       	std	Z+3, r26	; 0x03
   173fe:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                return ( amigo_buffered_write() );
   17402:	ed d9       	rcall	.-3110   	; 0x167de <amigo_buffered_write>
   17404:	43 c0       	rjmp	.+134    	; 0x1748c <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17406:	80 e6       	ldi	r24, 0x60	; 96
   17408:	3d c0       	rjmp	.+122    	; 0x17484 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   1740a:	c8 36       	cpi	r28, 0x68	; 104
   1740c:	d1 05       	cpc	r29, r1
   1740e:	e1 f5       	brne	.+120    	; 0x17488 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17410:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <AMIGOs>
   17414:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <AMIGOs+0x1>
   17418:	80 81       	ld	r24, Z
   1741a:	82 30       	cpi	r24, 0x02	; 2
   1741c:	81 f0       	breq	.+32     	; 0x1743e <Amigo_Execute+0x15c>
   1741e:	18 f4       	brcc	.+6      	; 0x17426 <Amigo_Execute+0x144>
   17420:	88 23       	and	r24, r24
   17422:	91 f1       	breq	.+100    	; 0x17488 <Amigo_Execute+0x1a6>
   17424:	2e c0       	rjmp	.+92     	; 0x17482 <Amigo_Execute+0x1a0>
   17426:	83 30       	cpi	r24, 0x03	; 3
   17428:	19 f0       	breq	.+6      	; 0x17430 <Amigo_Execute+0x14e>
   1742a:	84 30       	cpi	r24, 0x04	; 4
   1742c:	c9 f0       	breq	.+50     	; 0x17460 <Amigo_Execute+0x17e>
   1742e:	29 c0       	rjmp	.+82     	; 0x17482 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17430:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17434:	85 ff       	sbrs	r24, 5
   17436:	11 c0       	rjmp	.+34     	; 0x1745a <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17438:	87 e2       	ldi	r24, 0x27	; 39
   1743a:	96 e2       	ldi	r25, 0x26	; 38
   1743c:	06 c0       	rjmp	.+12     	; 0x1744a <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1743e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17442:	85 ff       	sbrs	r24, 5
   17444:	0a c0       	rjmp	.+20     	; 0x1745a <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17446:	8c ef       	ldi	r24, 0xFC	; 252
   17448:	95 e2       	ldi	r25, 0x25	; 37
   1744a:	a0 e0       	ldi	r26, 0x00	; 0
   1744c:	ed b7       	in	r30, 0x3d	; 61
   1744e:	fe b7       	in	r31, 0x3e	; 62
   17450:	81 83       	std	Z+1, r24	; 0x01
   17452:	92 83       	std	Z+2, r25	; 0x02
   17454:	a3 83       	std	Z+3, r26	; 0x03
   17456:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                return ( amigo_send_status() );
   1745a:	0e 94 24 b1 	call	0x16248	; 0x16248 <amigo_send_status>
   1745e:	16 c0       	rjmp	.+44     	; 0x1748c <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17460:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17464:	85 ff       	sbrs	r24, 5
   17466:	0a c0       	rjmp	.+20     	; 0x1747c <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17468:	83 ed       	ldi	r24, 0xD3	; 211
   1746a:	95 e2       	ldi	r25, 0x25	; 37
   1746c:	a0 e0       	ldi	r26, 0x00	; 0
   1746e:	ed b7       	in	r30, 0x3d	; 61
   17470:	fe b7       	in	r31, 0x3e	; 62
   17472:	81 83       	std	Z+1, r24	; 0x01
   17474:	92 83       	std	Z+2, r25	; 0x02
   17476:	a3 83       	std	Z+3, r26	; 0x03
   17478:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
                return ( amigo_send_logical_address() );
   1747c:	0e 94 cf b0 	call	0x1619e	; 0x1619e <amigo_send_logical_address>
   17480:	05 c0       	rjmp	.+10     	; 0x1748c <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17482:	88 e6       	ldi	r24, 0x68	; 104
   17484:	b0 db       	rcall	.-2208   	; 0x16be6 <amigo_todo>
   17486:	02 c0       	rjmp	.+4      	; 0x1748c <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17488:	80 e0       	ldi	r24, 0x00	; 0
   1748a:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   1748c:	cd b7       	in	r28, 0x3d	; 61
   1748e:	de b7       	in	r29, 0x3e	; 62
   17490:	29 96       	adiw	r28, 0x09	; 9
   17492:	e2 e0       	ldi	r30, 0x02	; 2
   17494:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00017498 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17498:	cf 93       	push	r28
   1749a:	df 93       	push	r29
   1749c:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1749e:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   174a2:	90 e0       	ldi	r25, 0x00	; 0
   174a4:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   174a8:	89 2b       	or	r24, r25
   174aa:	51 f0       	breq	.+20     	; 0x174c0 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   174ac:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   174b0:	8f 35       	cpi	r24, 0x5F	; 95
   174b2:	71 f4       	brne	.+28     	; 0x174d0 <AMIGO_COMMANDS+0x38>
   174b4:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   174b8:	90 e0       	ldi	r25, 0x00	; 0
   174ba:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   174be:	08 c0       	rjmp	.+16     	; 0x174d0 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   174c0:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   174c4:	90 e0       	ldi	r25, 0x00	; 0
   174c6:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   174ca:	89 2b       	or	r24, r25
   174cc:	79 f7       	brne	.-34     	; 0x174ac <AMIGO_COMMANDS+0x14>
   174ce:	76 c0       	rjmp	.+236    	; 0x175bc <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   174d0:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   174d4:	81 11       	cpse	r24, r1
   174d6:	05 c0       	rjmp	.+10     	; 0x174e2 <AMIGO_COMMANDS+0x4a>
   174d8:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   174dc:	90 e0       	ldi	r25, 0x00	; 0
   174de:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   174e2:	c0 36       	cpi	r28, 0x60	; 96
   174e4:	99 f4       	brne	.+38     	; 0x1750c <AMIGO_COMMANDS+0x74>
   174e6:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   174ea:	90 e0       	ldi	r25, 0x00	; 0
   174ec:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   174f0:	89 2b       	or	r24, r25
   174f2:	19 f0       	breq	.+6      	; 0x174fa <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   174f4:	80 e6       	ldi	r24, 0x60	; 96
   174f6:	90 e0       	ldi	r25, 0x00	; 0
   174f8:	14 c0       	rjmp	.+40     	; 0x17522 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   174fa:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   174fe:	90 e0       	ldi	r25, 0x00	; 0
   17500:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   17504:	89 2b       	or	r24, r25
   17506:	09 f4       	brne	.+2      	; 0x1750a <AMIGO_COMMANDS+0x72>
   17508:	59 c0       	rjmp	.+178    	; 0x175bc <AMIGO_COMMANDS+0x124>
   1750a:	f4 cf       	rjmp	.-24     	; 0x174f4 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   1750c:	c8 36       	cpi	r28, 0x68	; 104
   1750e:	c1 f4       	brne	.+48     	; 0x17540 <AMIGO_COMMANDS+0xa8>
   17510:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17514:	90 e0       	ldi	r25, 0x00	; 0
   17516:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   1751a:	89 2b       	or	r24, r25
   1751c:	21 f0       	breq	.+8      	; 0x17526 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1751e:	88 e6       	ldi	r24, 0x68	; 104
   17520:	90 e0       	ldi	r25, 0x00	; 0
   17522:	df de       	rcall	.-578    	; 0x172e2 <Amigo_Execute>
   17524:	0b c0       	rjmp	.+22     	; 0x1753c <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17526:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1752a:	90 e0       	ldi	r25, 0x00	; 0
   1752c:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   17530:	89 2b       	or	r24, r25
   17532:	09 f4       	brne	.+2      	; 0x17536 <AMIGO_COMMANDS+0x9e>
   17534:	43 c0       	rjmp	.+134    	; 0x175bc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17536:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17538:	90 e0       	ldi	r25, 0x00	; 0
   1753a:	ed db       	rcall	.-2086   	; 0x16d16 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1753c:	ec 01       	movw	r28, r24
   1753e:	40 c0       	rjmp	.+128    	; 0x175c0 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17540:	c9 36       	cpi	r28, 0x69	; 105
   17542:	51 f4       	brne	.+20     	; 0x17558 <AMIGO_COMMANDS+0xc0>
   17544:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17548:	90 e0       	ldi	r25, 0x00	; 0
   1754a:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   1754e:	89 2b       	or	r24, r25
   17550:	a9 f1       	breq	.+106    	; 0x175bc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17552:	89 e6       	ldi	r24, 0x69	; 105
   17554:	90 e0       	ldi	r25, 0x00	; 0
   17556:	f1 cf       	rjmp	.-30     	; 0x1753a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17558:	ca 36       	cpi	r28, 0x6A	; 106
   1755a:	51 f4       	brne	.+20     	; 0x17570 <AMIGO_COMMANDS+0xd8>
   1755c:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17560:	90 e0       	ldi	r25, 0x00	; 0
   17562:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   17566:	89 2b       	or	r24, r25
   17568:	49 f1       	breq	.+82     	; 0x175bc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1756a:	8a e6       	ldi	r24, 0x6A	; 106
   1756c:	90 e0       	ldi	r25, 0x00	; 0
   1756e:	e5 cf       	rjmp	.-54     	; 0x1753a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17570:	cc 36       	cpi	r28, 0x6C	; 108
   17572:	51 f4       	brne	.+20     	; 0x17588 <AMIGO_COMMANDS+0xf0>
   17574:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17578:	90 e0       	ldi	r25, 0x00	; 0
   1757a:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   1757e:	89 2b       	or	r24, r25
   17580:	e9 f0       	breq	.+58     	; 0x175bc <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17582:	8c e6       	ldi	r24, 0x6C	; 108
   17584:	90 e0       	ldi	r25, 0x00	; 0
   17586:	d9 cf       	rjmp	.-78     	; 0x1753a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17588:	c0 37       	cpi	r28, 0x70	; 112
   1758a:	c1 f4       	brne	.+48     	; 0x175bc <AMIGO_COMMANDS+0x124>
   1758c:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17590:	90 e0       	ldi	r25, 0x00	; 0
   17592:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <AMIGO_is_MTA>
   17596:	ec 01       	movw	r28, r24
   17598:	89 2b       	or	r24, r25
   1759a:	51 f0       	breq	.+20     	; 0x175b0 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1759c:	e0 91 5b 19 	lds	r30, 0x195B	; 0x80195b <AMIGOp>
   175a0:	f0 91 5c 19 	lds	r31, 0x195C	; 0x80195c <AMIGOp+0x1>
   175a4:	81 81       	ldd	r24, Z+1	; 0x01
   175a6:	90 e0       	ldi	r25, 0x00	; 0
   175a8:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   175ac:	ff d9       	rcall	.-3074   	; 0x169ac <amigo_cmd_dsj>
   175ae:	c6 cf       	rjmp	.-116    	; 0x1753c <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   175b0:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   175b4:	90 e0       	ldi	r25, 0x00	; 0
   175b6:	0e 94 67 8b 	call	0x116ce	; 0x116ce <AMIGO_is_MLA>
   175ba:	02 c0       	rjmp	.+4      	; 0x175c0 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   175bc:	c0 e0       	ldi	r28, 0x00	; 0
   175be:	d0 e0       	ldi	r29, 0x00	; 0
}
   175c0:	ce 01       	movw	r24, r28
   175c2:	df 91       	pop	r29
   175c4:	cf 91       	pop	r28
   175c6:	08 95       	ret

000175c8 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   175c8:	e4 e9       	ldi	r30, 0x94	; 148
   175ca:	f9 e1       	ldi	r31, 0x19	; 25
   175cc:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   175ce:	10 82       	st	Z, r1
   175d0:	11 82       	std	Z+1, r1	; 0x01
   175d2:	12 82       	std	Z+2, r1	; 0x02
   175d4:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   175d6:	15 82       	std	Z+5, r1	; 0x05
   175d8:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   175da:	12 86       	std	Z+10, r1	; 0x0a
   175dc:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   175de:	14 86       	std	Z+12, r1	; 0x0c
   175e0:	13 86       	std	Z+11, r1	; 0x0b
   175e2:	08 95       	ret

000175e4 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   175e4:	cf 93       	push	r28
   175e6:	df 93       	push	r29
   175e8:	ad b7       	in	r26, 0x3d	; 61
   175ea:	be b7       	in	r27, 0x3e	; 62
   175ec:	17 97       	sbiw	r26, 0x07	; 7
   175ee:	0f b6       	in	r0, 0x3f	; 63
   175f0:	f8 94       	cli
   175f2:	be bf       	out	0x3e, r27	; 62
   175f4:	0f be       	out	0x3f, r0	; 63
   175f6:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   175f8:	20 91 9d 19 	lds	r18, 0x199D	; 0x80199d <plot+0x9>
   175fc:	30 91 9e 19 	lds	r19, 0x199E	; 0x80199e <plot+0xa>
   17600:	21 15       	cp	r18, r1
   17602:	31 05       	cpc	r19, r1
   17604:	09 f4       	brne	.+2      	; 0x17608 <receive_plot_flush+0x24>
   17606:	45 c0       	rjmp	.+138    	; 0x17692 <receive_plot_flush+0xae>
   17608:	80 91 98 19 	lds	r24, 0x1998	; 0x801998 <plot+0x4>
   1760c:	90 91 99 19 	lds	r25, 0x1999	; 0x801999 <plot+0x5>
   17610:	00 97       	sbiw	r24, 0x00	; 0
   17612:	09 f4       	brne	.+2      	; 0x17616 <receive_plot_flush+0x32>
   17614:	40 c0       	rjmp	.+128    	; 0x17696 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17616:	ac 01       	movw	r20, r24
   17618:	61 e0       	ldi	r22, 0x01	; 1
   1761a:	70 e0       	ldi	r23, 0x00	; 0
   1761c:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <plot+0xb>
   17620:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0xc>
   17624:	0e 94 19 7b 	call	0xf632	; 0xf632 <fwrite>
   17628:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   1762a:	80 91 98 19 	lds	r24, 0x1998	; 0x801998 <plot+0x4>
   1762e:	90 91 99 19 	lds	r25, 0x1999	; 0x801999 <plot+0x5>
   17632:	c8 17       	cp	r28, r24
   17634:	d9 07       	cpc	r29, r25
   17636:	09 f1       	breq	.+66     	; 0x1767a <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17638:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1763c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17640:	81 72       	andi	r24, 0x21	; 33
   17642:	99 27       	eor	r25, r25
   17644:	89 2b       	or	r24, r25
   17646:	b1 f0       	breq	.+44     	; 0x17674 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17648:	81 ee       	ldi	r24, 0xE1	; 225
   1764a:	95 e1       	ldi	r25, 0x15	; 21
   1764c:	0e 94 22 77 	call	0xee44	; 0xee44 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17650:	ed b7       	in	r30, 0x3d	; 61
   17652:	fe b7       	in	r31, 0x3e	; 62
   17654:	d7 83       	std	Z+7, r29	; 0x07
   17656:	c6 83       	std	Z+6, r28	; 0x06
   17658:	80 91 98 19 	lds	r24, 0x1998	; 0x801998 <plot+0x4>
   1765c:	90 91 99 19 	lds	r25, 0x1999	; 0x801999 <plot+0x5>
   17660:	95 83       	std	Z+5, r25	; 0x05
   17662:	84 83       	std	Z+4, r24	; 0x04
   17664:	83 e6       	ldi	r24, 0x63	; 99
   17666:	9e e2       	ldi	r25, 0x2E	; 46
   17668:	a0 e0       	ldi	r26, 0x00	; 0
   1766a:	81 83       	std	Z+1, r24	; 0x01
   1766c:	92 83       	std	Z+2, r25	; 0x02
   1766e:	a3 83       	std	Z+3, r26	; 0x03
   17670:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        }
        return(-1);
   17674:	8f ef       	ldi	r24, 0xFF	; 255
   17676:	9f ef       	ldi	r25, 0xFF	; 255
   17678:	0e c0       	rjmp	.+28     	; 0x17696 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   1767a:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot+0x9>
   1767e:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0xa>
   17682:	0e 94 6c 75 	call	0xead8	; 0xead8 <fileno>
    if(fno < 0)
   17686:	97 fd       	sbrc	r25, 7
   17688:	f5 cf       	rjmp	.-22     	; 0x17674 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   1768a:	0e 94 63 7a 	call	0xf4c6	; 0xf4c6 <syncfs>
    return (ret);
   1768e:	ce 01       	movw	r24, r28
   17690:	02 c0       	rjmp	.+4      	; 0x17696 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17692:	80 e0       	ldi	r24, 0x00	; 0
   17694:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17696:	cd b7       	in	r28, 0x3d	; 61
   17698:	de b7       	in	r29, 0x3e	; 62
   1769a:	27 96       	adiw	r28, 0x07	; 7
   1769c:	e2 e0       	ldi	r30, 0x02	; 2
   1769e:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

000176a2 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   176a2:	ad b7       	in	r26, 0x3d	; 61
   176a4:	be b7       	in	r27, 0x3e	; 62
   176a6:	17 97       	sbiw	r26, 0x07	; 7
   176a8:	0f b6       	in	r0, 0x3f	; 63
   176aa:	f8 94       	cli
   176ac:	be bf       	out	0x3e, r27	; 62
   176ae:	0f be       	out	0x3f, r0	; 63
   176b0:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   176b2:	98 df       	rcall	.-208    	; 0x175e4 <receive_plot_flush>
   176b4:	97 ff       	sbrs	r25, 7
   176b6:	03 c0       	rjmp	.+6      	; 0x176be <printer_close+0x1c>
        plot.error = 1;
   176b8:	81 e0       	ldi	r24, 0x01	; 1
   176ba:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   176be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   176c6:	81 72       	andi	r24, 0x21	; 33
   176c8:	99 27       	eor	r25, r25
   176ca:	89 2b       	or	r24, r25
   176cc:	71 f0       	breq	.+28     	; 0x176ea <printer_close+0x48>
    {
        if(plot.error)
   176ce:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <plot+0x8>
   176d2:	88 23       	and	r24, r24
   176d4:	51 f0       	breq	.+20     	; 0x176ea <printer_close+0x48>
            printf("ERROR durring write\n");
   176d6:	82 e9       	ldi	r24, 0x92	; 146
   176d8:	9e e2       	ldi	r25, 0x2E	; 46
   176da:	a0 e0       	ldi	r26, 0x00	; 0
   176dc:	ed b7       	in	r30, 0x3d	; 61
   176de:	fe b7       	in	r31, 0x3e	; 62
   176e0:	81 83       	std	Z+1, r24	; 0x01
   176e2:	92 83       	std	Z+2, r25	; 0x02
   176e4:	a3 83       	std	Z+3, r26	; 0x03
   176e6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

    if(plot.fp)
   176ea:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot+0x9>
   176ee:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0xa>
   176f2:	00 97       	sbiw	r24, 0x00	; 0
   176f4:	e1 f0       	breq	.+56     	; 0x1772e <printer_close+0x8c>
    {
        fclose(plot.fp);
   176f6:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176fe:	85 ff       	sbrs	r24, 5
   17700:	16 c0       	rjmp	.+44     	; 0x1772e <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17702:	80 91 94 19 	lds	r24, 0x1994	; 0x801994 <plot>
   17706:	90 91 95 19 	lds	r25, 0x1995	; 0x801995 <plot+0x1>
   1770a:	a0 91 96 19 	lds	r26, 0x1996	; 0x801996 <plot+0x2>
   1770e:	b0 91 97 19 	lds	r27, 0x1997	; 0x801997 <plot+0x3>
   17712:	ed b7       	in	r30, 0x3d	; 61
   17714:	fe b7       	in	r31, 0x3e	; 62
   17716:	84 83       	std	Z+4, r24	; 0x04
   17718:	95 83       	std	Z+5, r25	; 0x05
   1771a:	a6 83       	std	Z+6, r26	; 0x06
   1771c:	b7 83       	std	Z+7, r27	; 0x07
   1771e:	84 e8       	ldi	r24, 0x84	; 132
   17720:	9e e2       	ldi	r25, 0x2E	; 46
   17722:	a0 e0       	ldi	r26, 0x00	; 0
   17724:	81 83       	std	Z+1, r24	; 0x01
   17726:	92 83       	std	Z+2, r25	; 0x02
   17728:	a3 83       	std	Z+3, r26	; 0x03
   1772a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

    if(plot.buf)
   1772e:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <plot+0xb>
   17732:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0xc>
   17736:	00 97       	sbiw	r24, 0x00	; 0
   17738:	11 f0       	breq	.+4      	; 0x1773e <printer_close+0x9c>
        safefree(plot.buf);
   1773a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <safefree>
    printer_init();
   1773e:	44 df       	rcall	.-376    	; 0x175c8 <printer_init>
}
   17740:	ad b7       	in	r26, 0x3d	; 61
   17742:	be b7       	in	r27, 0x3e	; 62
   17744:	17 96       	adiw	r26, 0x07	; 7
   17746:	0f b6       	in	r0, 0x3f	; 63
   17748:	f8 94       	cli
   1774a:	be bf       	out	0x3e, r27	; 62
   1774c:	0f be       	out	0x3f, r0	; 63
   1774e:	ad bf       	out	0x3d, r26	; 61
   17750:	08 95       	ret

00017752 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17752:	ad e5       	ldi	r26, 0x5D	; 93
   17754:	b0 e0       	ldi	r27, 0x00	; 0
   17756:	ef ea       	ldi	r30, 0xAF	; 175
   17758:	fb eb       	ldi	r31, 0xBB	; 187
   1775a:	0c 94 64 e2 	jmp	0x1c4c8	; 0x1c4c8 <__prologue_saves__+0x18>
   1775e:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17760:	89 2b       	or	r24, r25
   17762:	09 f0       	breq	.+2      	; 0x17766 <printer_open+0x14>
   17764:	4f c0       	rjmp	.+158    	; 0x17804 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17766:	be 01       	movw	r22, r28
   17768:	6e 5a       	subi	r22, 0xAE	; 174
   1776a:	7f 4f       	sbci	r23, 0xFF	; 255
   1776c:	80 e0       	ldi	r24, 0x00	; 0
   1776e:	90 e0       	ldi	r25, 0x00	; 0
   17770:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <clock_gettime>
        seconds = ts.tv_sec;
   17774:	66 96       	adiw	r28, 0x16	; 22
   17776:	8c ad       	ldd	r24, Y+60	; 0x3c
   17778:	9d ad       	ldd	r25, Y+61	; 0x3d
   1777a:	ae ad       	ldd	r26, Y+62	; 0x3e
   1777c:	bf ad       	ldd	r27, Y+63	; 0x3f
   1777e:	66 97       	sbiw	r28, 0x16	; 22
   17780:	6e 96       	adiw	r28, 0x1e	; 30
   17782:	8c af       	std	Y+60, r24	; 0x3c
   17784:	9d af       	std	Y+61, r25	; 0x3d
   17786:	ae af       	std	Y+62, r26	; 0x3e
   17788:	bf af       	std	Y+63, r27	; 0x3f
   1778a:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   1778c:	ce 01       	movw	r24, r28
   1778e:	86 5a       	subi	r24, 0xA6	; 166
   17790:	9f 4f       	sbci	r25, 0xFF	; 255
   17792:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <gmtime>
   17796:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17798:	fc 01       	movw	r30, r24
   1779a:	e6 80       	ldd	r14, Z+6	; 0x06
   1779c:	f7 80       	ldd	r15, Z+7	; 0x07
   1779e:	80 85       	ldd	r24, Z+8	; 0x08
   177a0:	91 85       	ldd	r25, Z+9	; 0x09
   177a2:	0e 94 31 34 	call	0x6862	; 0x6862 <tm_mon_to_ascii>
   177a6:	f8 01       	movw	r30, r16
   177a8:	20 81       	ld	r18, Z
   177aa:	31 81       	ldd	r19, Z+1	; 0x01
   177ac:	ed b7       	in	r30, 0x3d	; 61
   177ae:	fe b7       	in	r31, 0x3e	; 62
   177b0:	31 8b       	std	Z+17, r19	; 0x11
   177b2:	20 8b       	std	Z+16, r18	; 0x10
   177b4:	f8 01       	movw	r30, r16
   177b6:	22 81       	ldd	r18, Z+2	; 0x02
   177b8:	33 81       	ldd	r19, Z+3	; 0x03
   177ba:	ed b7       	in	r30, 0x3d	; 61
   177bc:	fe b7       	in	r31, 0x3e	; 62
   177be:	37 87       	std	Z+15, r19	; 0x0f
   177c0:	26 87       	std	Z+14, r18	; 0x0e
   177c2:	f8 01       	movw	r30, r16
   177c4:	24 81       	ldd	r18, Z+4	; 0x04
   177c6:	35 81       	ldd	r19, Z+5	; 0x05
   177c8:	ed b7       	in	r30, 0x3d	; 61
   177ca:	fe b7       	in	r31, 0x3e	; 62
   177cc:	35 87       	std	Z+13, r19	; 0x0d
   177ce:	24 87       	std	Z+12, r18	; 0x0c
   177d0:	f8 01       	movw	r30, r16
   177d2:	22 85       	ldd	r18, Z+10	; 0x0a
   177d4:	33 85       	ldd	r19, Z+11	; 0x0b
   177d6:	24 59       	subi	r18, 0x94	; 148
   177d8:	38 4f       	sbci	r19, 0xF8	; 248
   177da:	ed b7       	in	r30, 0x3d	; 61
   177dc:	fe b7       	in	r31, 0x3e	; 62
   177de:	33 87       	std	Z+11, r19	; 0x0b
   177e0:	22 87       	std	Z+10, r18	; 0x0a
   177e2:	91 87       	std	Z+9, r25	; 0x09
   177e4:	80 87       	std	Z+8, r24	; 0x08
   177e6:	f7 82       	std	Z+7, r15	; 0x07
   177e8:	e6 82       	std	Z+6, r14	; 0x06
   177ea:	89 ec       	ldi	r24, 0xC9	; 201
   177ec:	9e e2       	ldi	r25, 0x2E	; 46
   177ee:	a0 e0       	ldi	r26, 0x00	; 0
   177f0:	83 83       	std	Z+3, r24	; 0x03
   177f2:	94 83       	std	Z+4, r25	; 0x04
   177f4:	a5 83       	std	Z+5, r26	; 0x05
   177f6:	8e 01       	movw	r16, r28
   177f8:	0e 5e       	subi	r16, 0xEE	; 238
   177fa:	1f 4f       	sbci	r17, 0xFF	; 255
   177fc:	12 83       	std	Z+2, r17	; 0x02
   177fe:	01 83       	std	Z+1, r16	; 0x01
   17800:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17804:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17808:	85 ff       	sbrs	r24, 5
   1780a:	0c c0       	rjmp	.+24     	; 0x17824 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   1780c:	ed b7       	in	r30, 0x3d	; 61
   1780e:	fe b7       	in	r31, 0x3e	; 62
   17810:	15 83       	std	Z+5, r17	; 0x05
   17812:	04 83       	std	Z+4, r16	; 0x04
   17814:	83 eb       	ldi	r24, 0xB3	; 179
   17816:	9e e2       	ldi	r25, 0x2E	; 46
   17818:	a0 e0       	ldi	r26, 0x00	; 0
   1781a:	81 83       	std	Z+1, r24	; 0x01
   1781c:	92 83       	std	Z+2, r25	; 0x02
   1781e:	a3 83       	std	Z+3, r26	; 0x03
   17820:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    plot.fp = fopen(ptr,"wb");
   17824:	6c e0       	ldi	r22, 0x0C	; 12
   17826:	79 e0       	ldi	r23, 0x09	; 9
   17828:	c8 01       	movw	r24, r16
   1782a:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fopen>
   1782e:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <plot+0xa>
   17832:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <plot+0x9>
    if(plot.fp == NULL)
   17836:	89 2b       	or	r24, r25
   17838:	b9 f4       	brne	.+46     	; 0x17868 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1783a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1783e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17842:	81 72       	andi	r24, 0x21	; 33
   17844:	99 27       	eor	r25, r25
   17846:	89 2b       	or	r24, r25
   17848:	11 f1       	breq	.+68     	; 0x1788e <printer_open+0x13c>
        {
            perror("open failed");
   1784a:	87 ea       	ldi	r24, 0xA7	; 167
   1784c:	9d e0       	ldi	r25, 0x0D	; 13
   1784e:	0e 94 22 77 	call	0xee44	; 0xee44 <perror>
            printf("exiting...\n");
   17852:	87 ea       	ldi	r24, 0xA7	; 167
   17854:	9e e2       	ldi	r25, 0x2E	; 46
   17856:	a0 e0       	ldi	r26, 0x00	; 0
   17858:	ed b7       	in	r30, 0x3d	; 61
   1785a:	fe b7       	in	r31, 0x3e	; 62
   1785c:	81 83       	std	Z+1, r24	; 0x01
   1785e:	92 83       	std	Z+2, r25	; 0x02
   17860:	a3 83       	std	Z+3, r26	; 0x03
   17862:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17866:	13 c0       	rjmp	.+38     	; 0x1788e <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17868:	61 e0       	ldi	r22, 0x01	; 1
   1786a:	70 e0       	ldi	r23, 0x00	; 0
   1786c:	81 e0       	ldi	r24, 0x01	; 1
   1786e:	92 e0       	ldi	r25, 0x02	; 2
   17870:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   17874:	90 93 a0 19 	sts	0x19A0, r25	; 0x8019a0 <plot+0xc>
   17878:	80 93 9f 19 	sts	0x199F, r24	; 0x80199f <plot+0xb>
    if(plot.buf == NULL)
   1787c:	89 2b       	or	r24, r25
   1787e:	09 f4       	brne	.+2      	; 0x17882 <printer_open+0x130>
        printer_close();
   17880:	10 df       	rcall	.-480    	; 0x176a2 <printer_close>
    plot.size = 512;
   17882:	80 e0       	ldi	r24, 0x00	; 0
   17884:	92 e0       	ldi	r25, 0x02	; 2
   17886:	90 93 9b 19 	sts	0x199B, r25	; 0x80199b <plot+0x7>
   1788a:	80 93 9a 19 	sts	0x199A, r24	; 0x80199a <plot+0x6>
}
   1788e:	c3 5a       	subi	r28, 0xA3	; 163
   17890:	df 4f       	sbci	r29, 0xFF	; 255
   17892:	e6 e0       	ldi	r30, 0x06	; 6
   17894:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00017898 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17898:	cf 93       	push	r28
   1789a:	df 93       	push	r29
   1789c:	ad b7       	in	r26, 0x3d	; 61
   1789e:	be b7       	in	r27, 0x3e	; 62
   178a0:	17 97       	sbiw	r26, 0x07	; 7
   178a2:	0f b6       	in	r0, 0x3f	; 63
   178a4:	f8 94       	cli
   178a6:	be bf       	out	0x3e, r27	; 62
   178a8:	0f be       	out	0x3f, r0	; 63
   178aa:	ad bf       	out	0x3d, r26	; 61
   178ac:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   178ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178b2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   178b6:	81 72       	andi	r24, 0x21	; 33
   178b8:	99 27       	eor	r25, r25
   178ba:	89 2b       	or	r24, r25
   178bc:	c1 f0       	breq	.+48     	; 0x178ee <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   178be:	80 91 94 19 	lds	r24, 0x1994	; 0x801994 <plot>
   178c2:	30 91 95 19 	lds	r19, 0x1995	; 0x801995 <plot+0x1>
   178c6:	20 91 96 19 	lds	r18, 0x1996	; 0x801996 <plot+0x2>
   178ca:	90 91 97 19 	lds	r25, 0x1997	; 0x801997 <plot+0x3>
   178ce:	81 11       	cpse	r24, r1
   178d0:	0e c0       	rjmp	.+28     	; 0x178ee <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   178d2:	ed b7       	in	r30, 0x3d	; 61
   178d4:	fe b7       	in	r31, 0x3e	; 62
   178d6:	84 83       	std	Z+4, r24	; 0x04
   178d8:	35 83       	std	Z+5, r19	; 0x05
   178da:	26 83       	std	Z+6, r18	; 0x06
   178dc:	97 83       	std	Z+7, r25	; 0x07
   178de:	8c e5       	ldi	r24, 0x5C	; 92
   178e0:	9e e2       	ldi	r25, 0x2E	; 46
   178e2:	a0 e0       	ldi	r26, 0x00	; 0
   178e4:	81 83       	std	Z+1, r24	; 0x01
   178e6:	92 83       	std	Z+2, r25	; 0x02
   178e8:	a3 83       	std	Z+3, r26	; 0x03
   178ea:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   178ee:	ce 01       	movw	r24, r28
   178f0:	88 27       	eor	r24, r24
   178f2:	97 7f       	andi	r25, 0xF7	; 247
   178f4:	89 2b       	or	r24, r25
   178f6:	41 f0       	breq	.+16     	; 0x17908 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   178f8:	75 de       	rcall	.-790    	; 0x175e4 <receive_plot_flush>
   178fa:	89 2b       	or	r24, r25
   178fc:	09 f4       	brne	.+2      	; 0x17900 <printer_buffer+0x68>
   178fe:	3f c0       	rjmp	.+126    	; 0x1797e <printer_buffer+0xe6>
            plot.error = 1;
   17900:	81 e0       	ldi	r24, 0x01	; 1
   17902:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <plot+0x8>
   17906:	3b c0       	rjmp	.+118    	; 0x1797e <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17908:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0xb>
   1790c:	30 91 a0 19 	lds	r19, 0x19A0	; 0x8019a0 <plot+0xc>
   17910:	80 91 98 19 	lds	r24, 0x1998	; 0x801998 <plot+0x4>
   17914:	90 91 99 19 	lds	r25, 0x1999	; 0x801999 <plot+0x5>
   17918:	ac 01       	movw	r20, r24
   1791a:	4f 5f       	subi	r20, 0xFF	; 255
   1791c:	5f 4f       	sbci	r21, 0xFF	; 255
   1791e:	50 93 99 19 	sts	0x1999, r21	; 0x801999 <plot+0x5>
   17922:	40 93 98 19 	sts	0x1998, r20	; 0x801998 <plot+0x4>
   17926:	f9 01       	movw	r30, r18
   17928:	e8 0f       	add	r30, r24
   1792a:	f9 1f       	adc	r31, r25
   1792c:	c0 83       	st	Z, r28
        plot.count++;
   1792e:	80 91 94 19 	lds	r24, 0x1994	; 0x801994 <plot>
   17932:	90 91 95 19 	lds	r25, 0x1995	; 0x801995 <plot+0x1>
   17936:	a0 91 96 19 	lds	r26, 0x1996	; 0x801996 <plot+0x2>
   1793a:	b0 91 97 19 	lds	r27, 0x1997	; 0x801997 <plot+0x3>
   1793e:	01 96       	adiw	r24, 0x01	; 1
   17940:	a1 1d       	adc	r26, r1
   17942:	b1 1d       	adc	r27, r1
   17944:	80 93 94 19 	sts	0x1994, r24	; 0x801994 <plot>
   17948:	90 93 95 19 	sts	0x1995, r25	; 0x801995 <plot+0x1>
   1794c:	a0 93 96 19 	sts	0x1996, r26	; 0x801996 <plot+0x2>
   17950:	b0 93 97 19 	sts	0x1997, r27	; 0x801997 <plot+0x3>

        if(plot.ind >= plot.size)
   17954:	20 91 98 19 	lds	r18, 0x1998	; 0x801998 <plot+0x4>
   17958:	30 91 99 19 	lds	r19, 0x1999	; 0x801999 <plot+0x5>
   1795c:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <plot+0x6>
   17960:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <plot+0x7>
   17964:	28 17       	cp	r18, r24
   17966:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17968:	54 f0       	brlt	.+20     	; 0x1797e <printer_buffer+0xe6>
   1796a:	3c de       	rcall	.-904    	; 0x175e4 <receive_plot_flush>
   1796c:	97 ff       	sbrs	r25, 7
   1796e:	03 c0       	rjmp	.+6      	; 0x17976 <printer_buffer+0xde>
                plot.error = 1;
   17970:	81 e0       	ldi	r24, 0x01	; 1
   17972:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <plot+0x8>
            plot.ind  = 0;
   17976:	10 92 99 19 	sts	0x1999, r1	; 0x801999 <plot+0x5>
   1797a:	10 92 98 19 	sts	0x1998, r1	; 0x801998 <plot+0x4>
        }
    }
}
   1797e:	cd b7       	in	r28, 0x3d	; 61
   17980:	de b7       	in	r29, 0x3e	; 62
   17982:	27 96       	adiw	r28, 0x07	; 7
   17984:	e2 e0       	ldi	r30, 0x02	; 2
   17986:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

0001798a <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   1798a:	cf 93       	push	r28
   1798c:	00 d0       	rcall	.+0      	; 0x1798e <PRINTER_COMMANDS+0x4>
   1798e:	00 d0       	rcall	.+0      	; 0x17990 <PRINTER_COMMANDS+0x6>
   17990:	1f 92       	push	r1
   17992:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17994:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17998:	90 e0       	ldi	r25, 0x00	; 0
   1799a:	0e 94 9a 8b 	call	0x11734	; 0x11734 <PRINTER_is_MLA>
   1799e:	89 2b       	or	r24, r25
   179a0:	69 f0       	breq	.+26     	; 0x179bc <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179a6:	85 ff       	sbrs	r24, 5
   179a8:	22 c0       	rjmp	.+68     	; 0x179ee <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   179aa:	8c 2f       	mov	r24, r28
   179ac:	90 e0       	ldi	r25, 0x00	; 0
   179ae:	ed b7       	in	r30, 0x3d	; 61
   179b0:	fe b7       	in	r31, 0x3e	; 62
   179b2:	95 83       	std	Z+5, r25	; 0x05
   179b4:	84 83       	std	Z+4, r24	; 0x04
   179b6:	80 e4       	ldi	r24, 0x40	; 64
   179b8:	9e e2       	ldi	r25, 0x2E	; 46
   179ba:	13 c0       	rjmp	.+38     	; 0x179e2 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   179bc:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   179c0:	90 e0       	ldi	r25, 0x00	; 0
   179c2:	0e 94 ab 8b 	call	0x11756	; 0x11756 <PRINTER_is_MTA>
   179c6:	89 2b       	or	r24, r25
   179c8:	91 f0       	breq	.+36     	; 0x179ee <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179ce:	85 ff       	sbrs	r24, 5
   179d0:	0e c0       	rjmp	.+28     	; 0x179ee <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   179d2:	8c 2f       	mov	r24, r28
   179d4:	90 e0       	ldi	r25, 0x00	; 0
   179d6:	ed b7       	in	r30, 0x3d	; 61
   179d8:	fe b7       	in	r31, 0x3e	; 62
   179da:	95 83       	std	Z+5, r25	; 0x05
   179dc:	84 83       	std	Z+4, r24	; 0x04
   179de:	86 e2       	ldi	r24, 0x26	; 38
   179e0:	9e e2       	ldi	r25, 0x2E	; 46
   179e2:	a0 e0       	ldi	r26, 0x00	; 0
   179e4:	81 83       	std	Z+1, r24	; 0x01
   179e6:	92 83       	std	Z+2, r25	; 0x02
   179e8:	a3 83       	std	Z+3, r26	; 0x03
   179ea:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
#endif
        return(0);
    }
    return(0);
}
   179ee:	80 e0       	ldi	r24, 0x00	; 0
   179f0:	90 e0       	ldi	r25, 0x00	; 0
   179f2:	0f 90       	pop	r0
   179f4:	0f 90       	pop	r0
   179f6:	0f 90       	pop	r0
   179f8:	0f 90       	pop	r0
   179fa:	0f 90       	pop	r0
   179fc:	cf 91       	pop	r28
   179fe:	08 95       	ret

00017a00 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17a00:	0f 93       	push	r16
   17a02:	1f 93       	push	r17
   17a04:	da 01       	movw	r26, r20
   17a06:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17a08:	b7 fd       	sbrc	r27, 7
   17a0a:	0b c0       	rjmp	.+22     	; 0x17a22 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17a0c:	fd 01       	movw	r30, r26
   17a0e:	e6 0f       	add	r30, r22
   17a10:	f7 1f       	adc	r31, r23
   17a12:	e8 0f       	add	r30, r24
   17a14:	f9 1f       	adc	r31, r25
   17a16:	00 83       	st	Z, r16
        val >>= 8;
   17a18:	01 2f       	mov	r16, r17
   17a1a:	12 2f       	mov	r17, r18
   17a1c:	23 2f       	mov	r18, r19
   17a1e:	33 27       	eor	r19, r19
   17a20:	f2 cf       	rjmp	.-28     	; 0x17a06 <V2B_MSB+0x6>
    }
}
   17a22:	1f 91       	pop	r17
   17a24:	0f 91       	pop	r16
   17a26:	08 95       	ret

00017a28 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17a28:	0f 93       	push	r16
   17a2a:	1f 93       	push	r17
   17a2c:	fc 01       	movw	r30, r24
   17a2e:	e6 0f       	add	r30, r22
   17a30:	f7 1f       	adc	r31, r23
   17a32:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17a34:	cf 01       	movw	r24, r30
   17a36:	86 1b       	sub	r24, r22
   17a38:	97 0b       	sbc	r25, r23
   17a3a:	84 17       	cp	r24, r20
   17a3c:	95 07       	cpc	r25, r21
   17a3e:	34 f4       	brge	.+12     	; 0x17a4c <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17a40:	01 93       	st	Z+, r16
        val >>= 8;
   17a42:	01 2f       	mov	r16, r17
   17a44:	12 2f       	mov	r17, r18
   17a46:	23 2f       	mov	r18, r19
   17a48:	33 27       	eor	r19, r19
   17a4a:	f4 cf       	rjmp	.-24     	; 0x17a34 <V2B_LSB+0xc>
    }
}
   17a4c:	1f 91       	pop	r17
   17a4e:	0f 91       	pop	r16
   17a50:	08 95       	ret

00017a52 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17a52:	cf 92       	push	r12
   17a54:	df 92       	push	r13
   17a56:	ef 92       	push	r14
   17a58:	ff 92       	push	r15
   17a5a:	fc 01       	movw	r30, r24
   17a5c:	e6 0f       	add	r30, r22
   17a5e:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17a60:	60 e0       	ldi	r22, 0x00	; 0
   17a62:	70 e0       	ldi	r23, 0x00	; 0
   17a64:	cb 01       	movw	r24, r22
   17a66:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17a68:	9f 01       	movw	r18, r30
   17a6a:	2a 1b       	sub	r18, r26
   17a6c:	3b 0b       	sbc	r19, r27
   17a6e:	24 17       	cp	r18, r20
   17a70:	35 07       	cpc	r19, r21
   17a72:	4c f4       	brge	.+18     	; 0x17a86 <B2V_MSB+0x34>
    {
        val <<= 8;
   17a74:	cc 24       	eor	r12, r12
   17a76:	d6 2e       	mov	r13, r22
   17a78:	e7 2e       	mov	r14, r23
   17a7a:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17a7c:	21 91       	ld	r18, Z+
   17a7e:	c7 01       	movw	r24, r14
   17a80:	b6 01       	movw	r22, r12
   17a82:	62 2b       	or	r22, r18
   17a84:	f1 cf       	rjmp	.-30     	; 0x17a68 <B2V_MSB+0x16>
    }
    return(val);
}
   17a86:	ff 90       	pop	r15
   17a88:	ef 90       	pop	r14
   17a8a:	df 90       	pop	r13
   17a8c:	cf 90       	pop	r12
   17a8e:	08 95       	ret

00017a90 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17a90:	cf 92       	push	r12
   17a92:	df 92       	push	r13
   17a94:	ef 92       	push	r14
   17a96:	ff 92       	push	r15
   17a98:	9c 01       	movw	r18, r24
   17a9a:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17a9c:	60 e0       	ldi	r22, 0x00	; 0
   17a9e:	70 e0       	ldi	r23, 0x00	; 0
   17aa0:	cb 01       	movw	r24, r22
   17aa2:	41 50       	subi	r20, 0x01	; 1
   17aa4:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17aa6:	57 fd       	sbrc	r21, 7
   17aa8:	0e c0       	rjmp	.+28     	; 0x17ac6 <B2V_LSB+0x36>
    {
        val <<= 8;
   17aaa:	cc 24       	eor	r12, r12
   17aac:	d6 2e       	mov	r13, r22
   17aae:	e7 2e       	mov	r14, r23
   17ab0:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17ab2:	fa 01       	movw	r30, r20
   17ab4:	ea 0f       	add	r30, r26
   17ab6:	fb 1f       	adc	r31, r27
   17ab8:	e2 0f       	add	r30, r18
   17aba:	f3 1f       	adc	r31, r19
   17abc:	e0 81       	ld	r30, Z
   17abe:	c7 01       	movw	r24, r14
   17ac0:	b6 01       	movw	r22, r12
   17ac2:	6e 2b       	or	r22, r30
   17ac4:	ee cf       	rjmp	.-36     	; 0x17aa2 <B2V_LSB+0x12>
    }
    return(val);
}
   17ac6:	ff 90       	pop	r15
   17ac8:	ef 90       	pop	r14
   17aca:	df 90       	pop	r13
   17acc:	cf 90       	pop	r12
   17ace:	08 95       	ret

00017ad0 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17ad0:	cf 93       	push	r28
   17ad2:	df 93       	push	r29
   17ad4:	00 d0       	rcall	.+0      	; 0x17ad6 <lif_help+0x6>
   17ad6:	1f 92       	push	r1
   17ad8:	ec 01       	movw	r28, r24
   17ada:	84 e0       	ldi	r24, 0x04	; 4
   17adc:	93 e4       	ldi	r25, 0x43	; 67
   17ade:	a0 e0       	ldi	r26, 0x00	; 0
   17ae0:	ed b7       	in	r30, 0x3d	; 61
   17ae2:	fe b7       	in	r31, 0x3e	; 62
   17ae4:	81 83       	std	Z+1, r24	; 0x01
   17ae6:	92 83       	std	Z+2, r25	; 0x02
   17ae8:	a3 83       	std	Z+3, r26	; 0x03
   17aea:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17aee:	cd 2b       	or	r28, r29
   17af0:	51 f0       	breq	.+20     	; 0x17b06 <lif_help+0x36>
   17af2:	80 e4       	ldi	r24, 0x40	; 64
   17af4:	91 e4       	ldi	r25, 0x41	; 65
   17af6:	a0 e0       	ldi	r26, 0x00	; 0
   17af8:	ed b7       	in	r30, 0x3d	; 61
   17afa:	fe b7       	in	r31, 0x3e	; 62
   17afc:	81 83       	std	Z+1, r24	; 0x01
   17afe:	92 83       	std	Z+2, r25	; 0x02
   17b00:	a3 83       	std	Z+3, r26	; 0x03
   17b02:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17b06:	cd b7       	in	r28, 0x3d	; 61
   17b08:	de b7       	in	r29, 0x3e	; 62
   17b0a:	23 96       	adiw	r28, 0x03	; 3
   17b0c:	e2 e0       	ldi	r30, 0x02	; 2
   17b0e:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00017b12 <lif_calloc>:
   17b12:	cf 92       	push	r12
   17b14:	df 92       	push	r13
   17b16:	ef 92       	push	r14
   17b18:	ff 92       	push	r15
   17b1a:	cf 93       	push	r28
   17b1c:	df 93       	push	r29
   17b1e:	ad b7       	in	r26, 0x3d	; 61
   17b20:	be b7       	in	r27, 0x3e	; 62
   17b22:	17 97       	sbiw	r26, 0x07	; 7
   17b24:	0f b6       	in	r0, 0x3f	; 63
   17b26:	f8 94       	cli
   17b28:	be bf       	out	0x3e, r27	; 62
   17b2a:	0f be       	out	0x3f, r0	; 63
   17b2c:	ad bf       	out	0x3d, r26	; 61
   17b2e:	6b 01       	movw	r12, r22
   17b30:	7c 01       	movw	r14, r24
   17b32:	61 e0       	ldi	r22, 0x01	; 1
   17b34:	70 e0       	ldi	r23, 0x00	; 0
   17b36:	c6 01       	movw	r24, r12
   17b38:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <safecalloc>
   17b3c:	ec 01       	movw	r28, r24
   17b3e:	89 2b       	or	r24, r25
   17b40:	71 f4       	brne	.+28     	; 0x17b5e <lif_calloc+0x4c>
   17b42:	ed b7       	in	r30, 0x3d	; 61
   17b44:	fe b7       	in	r31, 0x3e	; 62
   17b46:	c4 82       	std	Z+4, r12	; 0x04
   17b48:	d5 82       	std	Z+5, r13	; 0x05
   17b4a:	e6 82       	std	Z+6, r14	; 0x06
   17b4c:	f7 82       	std	Z+7, r15	; 0x07
   17b4e:	86 ef       	ldi	r24, 0xF6	; 246
   17b50:	90 e4       	ldi	r25, 0x40	; 64
   17b52:	a0 e0       	ldi	r26, 0x00	; 0
   17b54:	81 83       	std	Z+1, r24	; 0x01
   17b56:	92 83       	std	Z+2, r25	; 0x02
   17b58:	a3 83       	std	Z+3, r26	; 0x03
   17b5a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17b5e:	ce 01       	movw	r24, r28
   17b60:	ad b7       	in	r26, 0x3d	; 61
   17b62:	be b7       	in	r27, 0x3e	; 62
   17b64:	17 96       	adiw	r26, 0x07	; 7
   17b66:	0f b6       	in	r0, 0x3f	; 63
   17b68:	f8 94       	cli
   17b6a:	be bf       	out	0x3e, r27	; 62
   17b6c:	0f be       	out	0x3f, r0	; 63
   17b6e:	ad bf       	out	0x3d, r26	; 61
   17b70:	df 91       	pop	r29
   17b72:	cf 91       	pop	r28
   17b74:	ff 90       	pop	r15
   17b76:	ef 90       	pop	r14
   17b78:	df 90       	pop	r13
   17b7a:	cf 90       	pop	r12
   17b7c:	08 95       	ret

00017b7e <lif_free>:
   17b7e:	00 d0       	rcall	.+0      	; 0x17b80 <lif_free+0x2>
   17b80:	1f 92       	push	r1
   17b82:	00 97       	sbiw	r24, 0x00	; 0
   17b84:	59 f4       	brne	.+22     	; 0x17b9c <lif_free+0x1e>
   17b86:	8e ed       	ldi	r24, 0xDE	; 222
   17b88:	90 e4       	ldi	r25, 0x40	; 64
   17b8a:	a0 e0       	ldi	r26, 0x00	; 0
   17b8c:	ed b7       	in	r30, 0x3d	; 61
   17b8e:	fe b7       	in	r31, 0x3e	; 62
   17b90:	81 83       	std	Z+1, r24	; 0x01
   17b92:	92 83       	std	Z+2, r25	; 0x02
   17b94:	a3 83       	std	Z+3, r26	; 0x03
   17b96:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17b9a:	02 c0       	rjmp	.+4      	; 0x17ba0 <lif_free+0x22>
   17b9c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <safefree>
   17ba0:	0f 90       	pop	r0
   17ba2:	0f 90       	pop	r0
   17ba4:	0f 90       	pop	r0
   17ba6:	08 95       	ret

00017ba8 <lif_stralloc>:
   17ba8:	0f 93       	push	r16
   17baa:	1f 93       	push	r17
   17bac:	cf 93       	push	r28
   17bae:	df 93       	push	r29
   17bb0:	ec 01       	movw	r28, r24
   17bb2:	fc 01       	movw	r30, r24
   17bb4:	01 90       	ld	r0, Z+
   17bb6:	00 20       	and	r0, r0
   17bb8:	e9 f7       	brne	.-6      	; 0x17bb4 <lif_stralloc+0xc>
   17bba:	bf 01       	movw	r22, r30
   17bbc:	68 1b       	sub	r22, r24
   17bbe:	79 0b       	sbc	r23, r25
   17bc0:	6d 5f       	subi	r22, 0xFD	; 253
   17bc2:	7f 4f       	sbci	r23, 0xFF	; 255
   17bc4:	07 2e       	mov	r0, r23
   17bc6:	00 0c       	add	r0, r0
   17bc8:	88 0b       	sbc	r24, r24
   17bca:	99 0b       	sbc	r25, r25
   17bcc:	a2 df       	rcall	.-188    	; 0x17b12 <lif_calloc>
   17bce:	8c 01       	movw	r16, r24
   17bd0:	00 97       	sbiw	r24, 0x00	; 0
   17bd2:	19 f0       	breq	.+6      	; 0x17bda <lif_stralloc+0x32>
   17bd4:	be 01       	movw	r22, r28
   17bd6:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
   17bda:	c8 01       	movw	r24, r16
   17bdc:	df 91       	pop	r29
   17bde:	cf 91       	pop	r28
   17be0:	1f 91       	pop	r17
   17be2:	0f 91       	pop	r16
   17be4:	08 95       	ret

00017be6 <lif_open>:
   17be6:	ef 92       	push	r14
   17be8:	ff 92       	push	r15
   17bea:	0f 93       	push	r16
   17bec:	1f 93       	push	r17
   17bee:	cf 93       	push	r28
   17bf0:	df 93       	push	r29
   17bf2:	ad b7       	in	r26, 0x3d	; 61
   17bf4:	be b7       	in	r27, 0x3e	; 62
   17bf6:	17 97       	sbiw	r26, 0x07	; 7
   17bf8:	0f b6       	in	r0, 0x3f	; 63
   17bfa:	f8 94       	cli
   17bfc:	be bf       	out	0x3e, r27	; 62
   17bfe:	0f be       	out	0x3f, r0	; 63
   17c00:	ad bf       	out	0x3d, r26	; 61
   17c02:	8c 01       	movw	r16, r24
   17c04:	7b 01       	movw	r14, r22
   17c06:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fopen>
   17c0a:	ec 01       	movw	r28, r24
   17c0c:	89 2b       	or	r24, r25
   17c0e:	71 f4       	brne	.+28     	; 0x17c2c <lif_open+0x46>
   17c10:	ed b7       	in	r30, 0x3d	; 61
   17c12:	fe b7       	in	r31, 0x3e	; 62
   17c14:	f7 82       	std	Z+7, r15	; 0x07
   17c16:	e6 82       	std	Z+6, r14	; 0x06
   17c18:	15 83       	std	Z+5, r17	; 0x05
   17c1a:	04 83       	std	Z+4, r16	; 0x04
   17c1c:	89 eb       	ldi	r24, 0xB9	; 185
   17c1e:	90 e4       	ldi	r25, 0x40	; 64
   17c20:	a0 e0       	ldi	r26, 0x00	; 0
   17c22:	81 83       	std	Z+1, r24	; 0x01
   17c24:	92 83       	std	Z+2, r25	; 0x02
   17c26:	a3 83       	std	Z+3, r26	; 0x03
   17c28:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17c2c:	ce 01       	movw	r24, r28
   17c2e:	cd b7       	in	r28, 0x3d	; 61
   17c30:	de b7       	in	r29, 0x3e	; 62
   17c32:	27 96       	adiw	r28, 0x07	; 7
   17c34:	e6 e0       	ldi	r30, 0x06	; 6
   17c36:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00017c3a <lif_stat>:
   17c3a:	0f 93       	push	r16
   17c3c:	1f 93       	push	r17
   17c3e:	cf 93       	push	r28
   17c40:	df 93       	push	r29
   17c42:	00 d0       	rcall	.+0      	; 0x17c44 <lif_stat+0xa>
   17c44:	00 d0       	rcall	.+0      	; 0x17c46 <lif_stat+0xc>
   17c46:	1f 92       	push	r1
   17c48:	8c 01       	movw	r16, r24
   17c4a:	d6 2f       	mov	r29, r22
   17c4c:	c7 2f       	mov	r28, r23
   17c4e:	0e 94 f6 77 	call	0xefec	; 0xefec <stat>
   17c52:	97 ff       	sbrs	r25, 7
   17c54:	0f c0       	rjmp	.+30     	; 0x17c74 <lif_stat+0x3a>
   17c56:	ed b7       	in	r30, 0x3d	; 61
   17c58:	fe b7       	in	r31, 0x3e	; 62
   17c5a:	15 83       	std	Z+5, r17	; 0x05
   17c5c:	04 83       	std	Z+4, r16	; 0x04
   17c5e:	80 ea       	ldi	r24, 0xA0	; 160
   17c60:	90 e4       	ldi	r25, 0x40	; 64
   17c62:	a0 e0       	ldi	r26, 0x00	; 0
   17c64:	81 83       	std	Z+1, r24	; 0x01
   17c66:	92 83       	std	Z+2, r25	; 0x02
   17c68:	a3 83       	std	Z+3, r26	; 0x03
   17c6a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17c6e:	80 e0       	ldi	r24, 0x00	; 0
   17c70:	90 e0       	ldi	r25, 0x00	; 0
   17c72:	02 c0       	rjmp	.+4      	; 0x17c78 <lif_stat+0x3e>
   17c74:	8d 2f       	mov	r24, r29
   17c76:	9c 2f       	mov	r25, r28
   17c78:	cd b7       	in	r28, 0x3d	; 61
   17c7a:	de b7       	in	r29, 0x3e	; 62
   17c7c:	25 96       	adiw	r28, 0x05	; 5
   17c7e:	e4 e0       	ldi	r30, 0x04	; 4
   17c80:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00017c84 <lif_seek_msg>:
   17c84:	a9 e0       	ldi	r26, 0x09	; 9
   17c86:	b0 e0       	ldi	r27, 0x00	; 0
   17c88:	e8 e4       	ldi	r30, 0x48	; 72
   17c8a:	fe eb       	ldi	r31, 0xBE	; 190
   17c8c:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
   17c90:	ec 01       	movw	r28, r24
   17c92:	6a 01       	movw	r12, r20
   17c94:	7b 01       	movw	r14, r22
   17c96:	89 01       	movw	r16, r18
   17c98:	0e 94 30 79 	call	0xf260	; 0xf260 <ftell>
   17c9c:	6c 15       	cp	r22, r12
   17c9e:	7d 05       	cpc	r23, r13
   17ca0:	8e 05       	cpc	r24, r14
   17ca2:	9f 05       	cpc	r25, r15
   17ca4:	19 f4       	brne	.+6      	; 0x17cac <lif_seek_msg+0x28>
   17ca6:	81 e0       	ldi	r24, 0x01	; 1
   17ca8:	90 e0       	ldi	r25, 0x00	; 0
   17caa:	1b c0       	rjmp	.+54     	; 0x17ce2 <lif_seek_msg+0x5e>
   17cac:	20 e0       	ldi	r18, 0x00	; 0
   17cae:	30 e0       	ldi	r19, 0x00	; 0
   17cb0:	b7 01       	movw	r22, r14
   17cb2:	a6 01       	movw	r20, r12
   17cb4:	ce 01       	movw	r24, r28
   17cb6:	0e 94 b3 79 	call	0xf366	; 0xf366 <fseek>
   17cba:	97 ff       	sbrs	r25, 7
   17cbc:	f4 cf       	rjmp	.-24     	; 0x17ca6 <lif_seek_msg+0x22>
   17cbe:	ed b7       	in	r30, 0x3d	; 61
   17cc0:	fe b7       	in	r31, 0x3e	; 62
   17cc2:	c6 82       	std	Z+6, r12	; 0x06
   17cc4:	d7 82       	std	Z+7, r13	; 0x07
   17cc6:	e0 86       	std	Z+8, r14	; 0x08
   17cc8:	f1 86       	std	Z+9, r15	; 0x09
   17cca:	15 83       	std	Z+5, r17	; 0x05
   17ccc:	04 83       	std	Z+4, r16	; 0x04
   17cce:	8f e7       	ldi	r24, 0x7F	; 127
   17cd0:	90 e4       	ldi	r25, 0x40	; 64
   17cd2:	a0 e0       	ldi	r26, 0x00	; 0
   17cd4:	81 83       	std	Z+1, r24	; 0x01
   17cd6:	92 83       	std	Z+2, r25	; 0x02
   17cd8:	a3 83       	std	Z+3, r26	; 0x03
   17cda:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17cde:	80 e0       	ldi	r24, 0x00	; 0
   17ce0:	90 e0       	ldi	r25, 0x00	; 0
   17ce2:	cd b7       	in	r28, 0x3d	; 61
   17ce4:	de b7       	in	r29, 0x3e	; 62
   17ce6:	29 96       	adiw	r28, 0x09	; 9
   17ce8:	e8 e0       	ldi	r30, 0x08	; 8
   17cea:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

00017cee <lif_read>:
   17cee:	af e0       	ldi	r26, 0x0F	; 15
   17cf0:	b0 e0       	ldi	r27, 0x00	; 0
   17cf2:	ed e7       	ldi	r30, 0x7D	; 125
   17cf4:	fe eb       	ldi	r31, 0xBE	; 190
   17cf6:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
   17cfa:	ec 01       	movw	r28, r24
   17cfc:	7b 01       	movw	r14, r22
   17cfe:	49 01       	movw	r8, r18
   17d00:	5a 01       	movw	r10, r20
   17d02:	28 81       	ld	r18, Y
   17d04:	39 81       	ldd	r19, Y+1	; 0x01
   17d06:	b5 01       	movw	r22, r10
   17d08:	a4 01       	movw	r20, r8
   17d0a:	8a 81       	ldd	r24, Y+2	; 0x02
   17d0c:	9b 81       	ldd	r25, Y+3	; 0x03
   17d0e:	ba df       	rcall	.-140    	; 0x17c84 <lif_seek_msg>
   17d10:	89 2b       	or	r24, r25
   17d12:	a1 f1       	breq	.+104    	; 0x17d7c <lif_read+0x8e>
   17d14:	2a 81       	ldd	r18, Y+2	; 0x02
   17d16:	3b 81       	ldd	r19, Y+3	; 0x03
   17d18:	a8 01       	movw	r20, r16
   17d1a:	61 e0       	ldi	r22, 0x01	; 1
   17d1c:	70 e0       	ldi	r23, 0x00	; 0
   17d1e:	c7 01       	movw	r24, r14
   17d20:	0e 94 47 7a 	call	0xf48e	; 0xf48e <fread>
   17d24:	6c 01       	movw	r12, r24
   17d26:	e1 2c       	mov	r14, r1
   17d28:	f1 2c       	mov	r15, r1
   17d2a:	b8 01       	movw	r22, r16
   17d2c:	01 2e       	mov	r0, r17
   17d2e:	00 0c       	add	r0, r0
   17d30:	88 0b       	sbc	r24, r24
   17d32:	99 0b       	sbc	r25, r25
   17d34:	c6 16       	cp	r12, r22
   17d36:	d7 06       	cpc	r13, r23
   17d38:	e8 06       	cpc	r14, r24
   17d3a:	f9 06       	cpc	r15, r25
   17d3c:	29 f1       	breq	.+74     	; 0x17d88 <lif_read+0x9a>
   17d3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d42:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d46:	92 ff       	sbrs	r25, 2
   17d48:	1d c0       	rjmp	.+58     	; 0x17d84 <lif_read+0x96>
   17d4a:	ed b7       	in	r30, 0x3d	; 61
   17d4c:	fe b7       	in	r31, 0x3e	; 62
   17d4e:	17 87       	std	Z+15, r17	; 0x0f
   17d50:	06 87       	std	Z+14, r16	; 0x0e
   17d52:	c2 86       	std	Z+10, r12	; 0x0a
   17d54:	d3 86       	std	Z+11, r13	; 0x0b
   17d56:	e4 86       	std	Z+12, r14	; 0x0c
   17d58:	f5 86       	std	Z+13, r15	; 0x0d
   17d5a:	86 82       	std	Z+6, r8	; 0x06
   17d5c:	97 82       	std	Z+7, r9	; 0x07
   17d5e:	a0 86       	std	Z+8, r10	; 0x08
   17d60:	b1 86       	std	Z+9, r11	; 0x09
   17d62:	88 81       	ld	r24, Y
   17d64:	99 81       	ldd	r25, Y+1	; 0x01
   17d66:	95 83       	std	Z+5, r25	; 0x05
   17d68:	84 83       	std	Z+4, r24	; 0x04
   17d6a:	83 e4       	ldi	r24, 0x43	; 67
   17d6c:	90 e4       	ldi	r25, 0x40	; 64
   17d6e:	a0 e0       	ldi	r26, 0x00	; 0
   17d70:	81 83       	std	Z+1, r24	; 0x01
   17d72:	92 83       	std	Z+2, r25	; 0x02
   17d74:	a3 83       	std	Z+3, r26	; 0x03
   17d76:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17d7a:	04 c0       	rjmp	.+8      	; 0x17d84 <lif_read+0x96>
   17d7c:	60 e0       	ldi	r22, 0x00	; 0
   17d7e:	70 e0       	ldi	r23, 0x00	; 0
   17d80:	cb 01       	movw	r24, r22
   17d82:	02 c0       	rjmp	.+4      	; 0x17d88 <lif_read+0x9a>
   17d84:	c7 01       	movw	r24, r14
   17d86:	b6 01       	movw	r22, r12
   17d88:	cd b7       	in	r28, 0x3d	; 61
   17d8a:	de b7       	in	r29, 0x3e	; 62
   17d8c:	2f 96       	adiw	r28, 0x0f	; 15
   17d8e:	ec e0       	ldi	r30, 0x0C	; 12
   17d90:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

00017d94 <lif_write>:
   17d94:	8f 92       	push	r8
   17d96:	9f 92       	push	r9
   17d98:	af 92       	push	r10
   17d9a:	bf 92       	push	r11
   17d9c:	ef 92       	push	r14
   17d9e:	ff 92       	push	r15
   17da0:	0f 93       	push	r16
   17da2:	1f 93       	push	r17
   17da4:	cf 93       	push	r28
   17da6:	df 93       	push	r29
   17da8:	ad b7       	in	r26, 0x3d	; 61
   17daa:	be b7       	in	r27, 0x3e	; 62
   17dac:	1d 97       	sbiw	r26, 0x0d	; 13
   17dae:	0f b6       	in	r0, 0x3f	; 63
   17db0:	f8 94       	cli
   17db2:	be bf       	out	0x3e, r27	; 62
   17db4:	0f be       	out	0x3f, r0	; 63
   17db6:	ad bf       	out	0x3d, r26	; 61
   17db8:	7c 01       	movw	r14, r24
   17dba:	eb 01       	movw	r28, r22
   17dbc:	49 01       	movw	r8, r18
   17dbe:	5a 01       	movw	r10, r20
   17dc0:	fc 01       	movw	r30, r24
   17dc2:	20 81       	ld	r18, Z
   17dc4:	31 81       	ldd	r19, Z+1	; 0x01
   17dc6:	b5 01       	movw	r22, r10
   17dc8:	a4 01       	movw	r20, r8
   17dca:	82 81       	ldd	r24, Z+2	; 0x02
   17dcc:	93 81       	ldd	r25, Z+3	; 0x03
   17dce:	5a df       	rcall	.-332    	; 0x17c84 <lif_seek_msg>
   17dd0:	00 97       	sbiw	r24, 0x00	; 0
   17dd2:	81 f1       	breq	.+96     	; 0x17e34 <lif_write+0xa0>
   17dd4:	f7 01       	movw	r30, r14
   17dd6:	22 81       	ldd	r18, Z+2	; 0x02
   17dd8:	33 81       	ldd	r19, Z+3	; 0x03
   17dda:	a8 01       	movw	r20, r16
   17ddc:	61 e0       	ldi	r22, 0x01	; 1
   17dde:	70 e0       	ldi	r23, 0x00	; 0
   17de0:	ce 01       	movw	r24, r28
   17de2:	0e 94 19 7b 	call	0xf632	; 0xf632 <fwrite>
   17de6:	ec 01       	movw	r28, r24
   17de8:	08 17       	cp	r16, r24
   17dea:	19 07       	cpc	r17, r25
   17dec:	01 f1       	breq	.+64     	; 0x17e2e <lif_write+0x9a>
   17dee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17df2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17df6:	92 ff       	sbrs	r25, 2
   17df8:	1c c0       	rjmp	.+56     	; 0x17e32 <lif_write+0x9e>
   17dfa:	ed b7       	in	r30, 0x3d	; 61
   17dfc:	fe b7       	in	r31, 0x3e	; 62
   17dfe:	15 87       	std	Z+13, r17	; 0x0d
   17e00:	04 87       	std	Z+12, r16	; 0x0c
   17e02:	d3 87       	std	Z+11, r29	; 0x0b
   17e04:	c2 87       	std	Z+10, r28	; 0x0a
   17e06:	86 82       	std	Z+6, r8	; 0x06
   17e08:	97 82       	std	Z+7, r9	; 0x07
   17e0a:	a0 86       	std	Z+8, r10	; 0x08
   17e0c:	b1 86       	std	Z+9, r11	; 0x09
   17e0e:	f7 01       	movw	r30, r14
   17e10:	80 81       	ld	r24, Z
   17e12:	91 81       	ldd	r25, Z+1	; 0x01
   17e14:	ed b7       	in	r30, 0x3d	; 61
   17e16:	fe b7       	in	r31, 0x3e	; 62
   17e18:	95 83       	std	Z+5, r25	; 0x05
   17e1a:	84 83       	std	Z+4, r24	; 0x04
   17e1c:	86 e0       	ldi	r24, 0x06	; 6
   17e1e:	90 e4       	ldi	r25, 0x40	; 64
   17e20:	a0 e0       	ldi	r26, 0x00	; 0
   17e22:	81 83       	std	Z+1, r24	; 0x01
   17e24:	92 83       	std	Z+2, r25	; 0x02
   17e26:	a3 83       	std	Z+3, r26	; 0x03
   17e28:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   17e2c:	02 c0       	rjmp	.+4      	; 0x17e32 <lif_write+0x9e>
   17e2e:	c8 01       	movw	r24, r16
   17e30:	01 c0       	rjmp	.+2      	; 0x17e34 <lif_write+0xa0>
   17e32:	ce 01       	movw	r24, r28
   17e34:	ad b7       	in	r26, 0x3d	; 61
   17e36:	be b7       	in	r27, 0x3e	; 62
   17e38:	1d 96       	adiw	r26, 0x0d	; 13
   17e3a:	0f b6       	in	r0, 0x3f	; 63
   17e3c:	f8 94       	cli
   17e3e:	be bf       	out	0x3e, r27	; 62
   17e40:	0f be       	out	0x3f, r0	; 63
   17e42:	ad bf       	out	0x3d, r26	; 61
   17e44:	df 91       	pop	r29
   17e46:	cf 91       	pop	r28
   17e48:	1f 91       	pop	r17
   17e4a:	0f 91       	pop	r16
   17e4c:	ff 90       	pop	r15
   17e4e:	ef 90       	pop	r14
   17e50:	bf 90       	pop	r11
   17e52:	af 90       	pop	r10
   17e54:	9f 90       	pop	r9
   17e56:	8f 90       	pop	r8
   17e58:	08 95       	ret

00017e5a <lif_chars>:
   17e5a:	80 32       	cpi	r24, 0x20	; 32
   17e5c:	91 05       	cpc	r25, r1
   17e5e:	e1 f0       	breq	.+56     	; 0x17e98 <lif_chars+0x3e>
   17e60:	9c 01       	movw	r18, r24
   17e62:	21 56       	subi	r18, 0x61	; 97
   17e64:	31 09       	sbc	r19, r1
   17e66:	2a 31       	cpi	r18, 0x1A	; 26
   17e68:	31 05       	cpc	r19, r1
   17e6a:	10 f4       	brcc	.+4      	; 0x17e70 <lif_chars+0x16>
   17e6c:	80 97       	sbiw	r24, 0x20	; 32
   17e6e:	08 95       	ret
   17e70:	9c 01       	movw	r18, r24
   17e72:	21 54       	subi	r18, 0x41	; 65
   17e74:	31 09       	sbc	r19, r1
   17e76:	2a 31       	cpi	r18, 0x1A	; 26
   17e78:	31 05       	cpc	r19, r1
   17e7a:	c8 f0       	brcs	.+50     	; 0x17eae <lif_chars+0x54>
   17e7c:	16 16       	cp	r1, r22
   17e7e:	17 06       	cpc	r1, r23
   17e80:	74 f4       	brge	.+28     	; 0x17e9e <lif_chars+0x44>
   17e82:	2f 5e       	subi	r18, 0xEF	; 239
   17e84:	3f 4f       	sbci	r19, 0xFF	; 255
   17e86:	2a 30       	cpi	r18, 0x0A	; 10
   17e88:	31 05       	cpc	r19, r1
   17e8a:	88 f0       	brcs	.+34     	; 0x17eae <lif_chars+0x54>
   17e8c:	8f 35       	cpi	r24, 0x5F	; 95
   17e8e:	91 05       	cpc	r25, r1
   17e90:	49 f0       	breq	.+18     	; 0x17ea4 <lif_chars+0x4a>
   17e92:	8d 97       	sbiw	r24, 0x2d	; 45
   17e94:	21 f4       	brne	.+8      	; 0x17e9e <lif_chars+0x44>
   17e96:	09 c0       	rjmp	.+18     	; 0x17eaa <lif_chars+0x50>
   17e98:	80 e2       	ldi	r24, 0x20	; 32
   17e9a:	90 e0       	ldi	r25, 0x00	; 0
   17e9c:	08 95       	ret
   17e9e:	80 e0       	ldi	r24, 0x00	; 0
   17ea0:	90 e0       	ldi	r25, 0x00	; 0
   17ea2:	08 95       	ret
   17ea4:	8f e5       	ldi	r24, 0x5F	; 95
   17ea6:	90 e0       	ldi	r25, 0x00	; 0
   17ea8:	08 95       	ret
   17eaa:	8d e2       	ldi	r24, 0x2D	; 45
   17eac:	90 e0       	ldi	r25, 0x00	; 0
   17eae:	08 95       	ret

00017eb0 <lif_B2S>:
   17eb0:	a0 e0       	ldi	r26, 0x00	; 0
   17eb2:	b0 e0       	ldi	r27, 0x00	; 0
   17eb4:	ee e5       	ldi	r30, 0x5E	; 94
   17eb6:	ff eb       	ldi	r31, 0xBF	; 191
   17eb8:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
   17ebc:	5c 01       	movw	r10, r24
   17ebe:	6b 01       	movw	r12, r22
   17ec0:	ea 01       	movw	r28, r20
   17ec2:	4c 01       	movw	r8, r24
   17ec4:	ee 24       	eor	r14, r14
   17ec6:	e3 94       	inc	r14
   17ec8:	f1 2c       	mov	r15, r1
   17eca:	00 e0       	ldi	r16, 0x00	; 0
   17ecc:	10 e0       	ldi	r17, 0x00	; 0
   17ece:	0c 17       	cp	r16, r28
   17ed0:	1d 07       	cpc	r17, r29
   17ed2:	6c f4       	brge	.+26     	; 0x17eee <lif_B2S+0x3e>
   17ed4:	f4 01       	movw	r30, r8
   17ed6:	81 91       	ld	r24, Z+
   17ed8:	4f 01       	movw	r8, r30
   17eda:	b8 01       	movw	r22, r16
   17edc:	90 e0       	ldi	r25, 0x00	; 0
   17ede:	bd df       	rcall	.-134    	; 0x17e5a <lif_chars>
   17ee0:	89 2b       	or	r24, r25
   17ee2:	11 f4       	brne	.+4      	; 0x17ee8 <lif_B2S+0x38>
   17ee4:	e1 2c       	mov	r14, r1
   17ee6:	f1 2c       	mov	r15, r1
   17ee8:	0f 5f       	subi	r16, 0xFF	; 255
   17eea:	1f 4f       	sbci	r17, 0xFF	; 255
   17eec:	f0 cf       	rjmp	.-32     	; 0x17ece <lif_B2S+0x1e>
   17eee:	d6 01       	movw	r26, r12
   17ef0:	f5 01       	movw	r30, r10
   17ef2:	cf 01       	movw	r24, r30
   17ef4:	8a 19       	sub	r24, r10
   17ef6:	9b 09       	sbc	r25, r11
   17ef8:	8c 17       	cp	r24, r28
   17efa:	9d 07       	cpc	r25, r29
   17efc:	1c f4       	brge	.+6      	; 0x17f04 <lif_B2S+0x54>
   17efe:	81 91       	ld	r24, Z+
   17f00:	8d 93       	st	X+, r24
   17f02:	f7 cf       	rjmp	.-18     	; 0x17ef2 <lif_B2S+0x42>
   17f04:	d7 ff       	sbrs	r29, 7
   17f06:	02 c0       	rjmp	.+4      	; 0x17f0c <lif_B2S+0x5c>
   17f08:	c0 e0       	ldi	r28, 0x00	; 0
   17f0a:	d0 e0       	ldi	r29, 0x00	; 0
   17f0c:	cc 0d       	add	r28, r12
   17f0e:	dd 1d       	adc	r29, r13
   17f10:	18 82       	st	Y, r1
   17f12:	c6 01       	movw	r24, r12
   17f14:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <trim_tail>
   17f18:	c7 01       	movw	r24, r14
   17f1a:	cd b7       	in	r28, 0x3d	; 61
   17f1c:	de b7       	in	r29, 0x3e	; 62
   17f1e:	ec e0       	ldi	r30, 0x0C	; 12
   17f20:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

00017f24 <lif_checkname>:
   17f24:	ef 92       	push	r14
   17f26:	ff 92       	push	r15
   17f28:	0f 93       	push	r16
   17f2a:	1f 93       	push	r17
   17f2c:	cf 93       	push	r28
   17f2e:	df 93       	push	r29
   17f30:	7c 01       	movw	r14, r24
   17f32:	ec 01       	movw	r28, r24
   17f34:	01 e0       	ldi	r16, 0x01	; 1
   17f36:	10 e0       	ldi	r17, 0x00	; 0
   17f38:	be 01       	movw	r22, r28
   17f3a:	6e 19       	sub	r22, r14
   17f3c:	7f 09       	sbc	r23, r15
   17f3e:	89 91       	ld	r24, Y+
   17f40:	88 23       	and	r24, r24
   17f42:	39 f0       	breq	.+14     	; 0x17f52 <lif_checkname+0x2e>
   17f44:	90 e0       	ldi	r25, 0x00	; 0
   17f46:	89 df       	rcall	.-238    	; 0x17e5a <lif_chars>
   17f48:	89 2b       	or	r24, r25
   17f4a:	b1 f7       	brne	.-20     	; 0x17f38 <lif_checkname+0x14>
   17f4c:	00 e0       	ldi	r16, 0x00	; 0
   17f4e:	10 e0       	ldi	r17, 0x00	; 0
   17f50:	f3 cf       	rjmp	.-26     	; 0x17f38 <lif_checkname+0x14>
   17f52:	c8 01       	movw	r24, r16
   17f54:	cd b7       	in	r28, 0x3d	; 61
   17f56:	de b7       	in	r29, 0x3e	; 62
   17f58:	e6 e0       	ldi	r30, 0x06	; 6
   17f5a:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00017f5e <lif_S2B>:
   17f5e:	fb 01       	movw	r30, r22
   17f60:	dc 01       	movw	r26, r24
   17f62:	20 e0       	ldi	r18, 0x00	; 0
   17f64:	30 e0       	ldi	r19, 0x00	; 0
   17f66:	61 91       	ld	r22, Z+
   17f68:	61 11       	cpse	r22, r1
   17f6a:	05 c0       	rjmp	.+10     	; 0x17f76 <lif_S2B+0x18>
   17f6c:	fc 01       	movw	r30, r24
   17f6e:	e2 0f       	add	r30, r18
   17f70:	f3 1f       	adc	r31, r19
   17f72:	60 e2       	ldi	r22, 0x20	; 32
   17f74:	08 c0       	rjmp	.+16     	; 0x17f86 <lif_S2B+0x28>
   17f76:	24 17       	cp	r18, r20
   17f78:	35 07       	cpc	r19, r21
   17f7a:	24 f4       	brge	.+8      	; 0x17f84 <lif_S2B+0x26>
   17f7c:	6d 93       	st	X+, r22
   17f7e:	2f 5f       	subi	r18, 0xFF	; 255
   17f80:	3f 4f       	sbci	r19, 0xFF	; 255
   17f82:	f1 cf       	rjmp	.-30     	; 0x17f66 <lif_S2B+0x8>
   17f84:	08 95       	ret
   17f86:	9f 01       	movw	r18, r30
   17f88:	28 1b       	sub	r18, r24
   17f8a:	39 0b       	sbc	r19, r25
   17f8c:	24 17       	cp	r18, r20
   17f8e:	35 07       	cpc	r19, r21
   17f90:	14 f4       	brge	.+4      	; 0x17f96 <lif_S2B+0x38>
   17f92:	61 93       	st	Z+, r22
   17f94:	f8 cf       	rjmp	.-16     	; 0x17f86 <lif_S2B+0x28>
   17f96:	08 95       	ret

00017f98 <lif_fixname>:
   17f98:	a0 e0       	ldi	r26, 0x00	; 0
   17f9a:	b0 e0       	ldi	r27, 0x00	; 0
   17f9c:	e2 ed       	ldi	r30, 0xD2	; 210
   17f9e:	ff eb       	ldi	r31, 0xBF	; 191
   17fa0:	0c 94 61 e2 	jmp	0x1c4c2	; 0x1c4c2 <__prologue_saves__+0x12>
   17fa4:	8c 01       	movw	r16, r24
   17fa6:	cb 01       	movw	r24, r22
   17fa8:	7a 01       	movw	r14, r20
   17faa:	0e 94 c2 75 	call	0xeb84	; 0xeb84 <basename>
   17fae:	6c 01       	movw	r12, r24
   17fb0:	e8 01       	movw	r28, r16
   17fb2:	80 e2       	ldi	r24, 0x20	; 32
   17fb4:	b8 2e       	mov	r11, r24
   17fb6:	be 01       	movw	r22, r28
   17fb8:	60 1b       	sub	r22, r16
   17fba:	71 0b       	sbc	r23, r17
   17fbc:	f6 01       	movw	r30, r12
   17fbe:	81 91       	ld	r24, Z+
   17fc0:	6f 01       	movw	r12, r30
   17fc2:	81 11       	cpse	r24, r1
   17fc4:	02 c0       	rjmp	.+4      	; 0x17fca <lif_fixname+0x32>
   17fc6:	20 e2       	ldi	r18, 0x20	; 32
   17fc8:	0e c0       	rjmp	.+28     	; 0x17fe6 <lif_fixname+0x4e>
   17fca:	1e 14       	cp	r1, r14
   17fcc:	1f 04       	cpc	r1, r15
   17fce:	dc f7       	brge	.-10     	; 0x17fc6 <lif_fixname+0x2e>
   17fd0:	8e 32       	cpi	r24, 0x2E	; 46
   17fd2:	c9 f3       	breq	.-14     	; 0x17fc6 <lif_fixname+0x2e>
   17fd4:	90 e0       	ldi	r25, 0x00	; 0
   17fd6:	41 df       	rcall	.-382    	; 0x17e5a <lif_chars>
   17fd8:	88 23       	and	r24, r24
   17fda:	11 f0       	breq	.+4      	; 0x17fe0 <lif_fixname+0x48>
   17fdc:	88 83       	st	Y, r24
   17fde:	01 c0       	rjmp	.+2      	; 0x17fe2 <lif_fixname+0x4a>
   17fe0:	b8 82       	st	Y, r11
   17fe2:	21 96       	adiw	r28, 0x01	; 1
   17fe4:	e8 cf       	rjmp	.-48     	; 0x17fb6 <lif_fixname+0x1e>
   17fe6:	ce 01       	movw	r24, r28
   17fe8:	80 1b       	sub	r24, r16
   17fea:	91 0b       	sbc	r25, r17
   17fec:	8e 15       	cp	r24, r14
   17fee:	9f 05       	cpc	r25, r15
   17ff0:	14 f4       	brge	.+4      	; 0x17ff6 <lif_fixname+0x5e>
   17ff2:	29 93       	st	Y+, r18
   17ff4:	f8 cf       	rjmp	.-16     	; 0x17fe6 <lif_fixname+0x4e>
   17ff6:	18 82       	st	Y, r1
   17ff8:	f8 01       	movw	r30, r16
   17ffa:	01 90       	ld	r0, Z+
   17ffc:	00 20       	and	r0, r0
   17ffe:	e9 f7       	brne	.-6      	; 0x17ffa <lif_fixname+0x62>
   18000:	cf 01       	movw	r24, r30
   18002:	01 97       	sbiw	r24, 0x01	; 1
   18004:	80 1b       	sub	r24, r16
   18006:	91 0b       	sbc	r25, r17
   18008:	cd b7       	in	r28, 0x3d	; 61
   1800a:	de b7       	in	r29, 0x3e	; 62
   1800c:	e9 e0       	ldi	r30, 0x09	; 9
   1800e:	0c 94 7d e2 	jmp	0x1c4fa	; 0x1c4fa <__epilogue_restores__+0x12>

00018012 <lif_vol2str>:
   18012:	ef 92       	push	r14
   18014:	ff 92       	push	r15
   18016:	0f 93       	push	r16
   18018:	1f 93       	push	r17
   1801a:	cf 93       	push	r28
   1801c:	df 93       	push	r29
   1801e:	7c 01       	movw	r14, r24
   18020:	eb 01       	movw	r28, r22
   18022:	fc 01       	movw	r30, r24
   18024:	04 a1       	ldd	r16, Z+36	; 0x24
   18026:	15 a1       	ldd	r17, Z+37	; 0x25
   18028:	20 e0       	ldi	r18, 0x00	; 0
   1802a:	30 e0       	ldi	r19, 0x00	; 0
   1802c:	42 e0       	ldi	r20, 0x02	; 2
   1802e:	50 e0       	ldi	r21, 0x00	; 0
   18030:	60 e0       	ldi	r22, 0x00	; 0
   18032:	70 e0       	ldi	r23, 0x00	; 0
   18034:	ce 01       	movw	r24, r28
   18036:	e4 dc       	rcall	.-1592   	; 0x17a00 <V2B_MSB>
   18038:	b7 01       	movw	r22, r14
   1803a:	6a 5d       	subi	r22, 0xDA	; 218
   1803c:	7f 4f       	sbci	r23, 0xFF	; 255
   1803e:	46 e0       	ldi	r20, 0x06	; 6
   18040:	50 e0       	ldi	r21, 0x00	; 0
   18042:	ce 01       	movw	r24, r28
   18044:	02 96       	adiw	r24, 0x02	; 2
   18046:	8b df       	rcall	.-234    	; 0x17f5e <lif_S2B>
   18048:	f7 01       	movw	r30, r14
   1804a:	05 a5       	ldd	r16, Z+45	; 0x2d
   1804c:	16 a5       	ldd	r17, Z+46	; 0x2e
   1804e:	27 a5       	ldd	r18, Z+47	; 0x2f
   18050:	30 a9       	ldd	r19, Z+48	; 0x30
   18052:	44 e0       	ldi	r20, 0x04	; 4
   18054:	50 e0       	ldi	r21, 0x00	; 0
   18056:	68 e0       	ldi	r22, 0x08	; 8
   18058:	70 e0       	ldi	r23, 0x00	; 0
   1805a:	ce 01       	movw	r24, r28
   1805c:	d1 dc       	rcall	.-1630   	; 0x17a00 <V2B_MSB>
   1805e:	f7 01       	movw	r30, r14
   18060:	01 a9       	ldd	r16, Z+49	; 0x31
   18062:	12 a9       	ldd	r17, Z+50	; 0x32
   18064:	20 e0       	ldi	r18, 0x00	; 0
   18066:	30 e0       	ldi	r19, 0x00	; 0
   18068:	42 e0       	ldi	r20, 0x02	; 2
   1806a:	50 e0       	ldi	r21, 0x00	; 0
   1806c:	6c e0       	ldi	r22, 0x0C	; 12
   1806e:	70 e0       	ldi	r23, 0x00	; 0
   18070:	ce 01       	movw	r24, r28
   18072:	c6 dc       	rcall	.-1652   	; 0x17a00 <V2B_MSB>
   18074:	00 e0       	ldi	r16, 0x00	; 0
   18076:	10 e0       	ldi	r17, 0x00	; 0
   18078:	98 01       	movw	r18, r16
   1807a:	42 e0       	ldi	r20, 0x02	; 2
   1807c:	50 e0       	ldi	r21, 0x00	; 0
   1807e:	6e e0       	ldi	r22, 0x0E	; 14
   18080:	70 e0       	ldi	r23, 0x00	; 0
   18082:	ce 01       	movw	r24, r28
   18084:	bd dc       	rcall	.-1670   	; 0x17a00 <V2B_MSB>
   18086:	f7 01       	movw	r30, r14
   18088:	05 a9       	ldd	r16, Z+53	; 0x35
   1808a:	16 a9       	ldd	r17, Z+54	; 0x36
   1808c:	27 a9       	ldd	r18, Z+55	; 0x37
   1808e:	30 ad       	ldd	r19, Z+56	; 0x38
   18090:	44 e0       	ldi	r20, 0x04	; 4
   18092:	50 e0       	ldi	r21, 0x00	; 0
   18094:	60 e1       	ldi	r22, 0x10	; 16
   18096:	70 e0       	ldi	r23, 0x00	; 0
   18098:	ce 01       	movw	r24, r28
   1809a:	b2 dc       	rcall	.-1692   	; 0x17a00 <V2B_MSB>
   1809c:	f7 01       	movw	r30, r14
   1809e:	01 ad       	ldd	r16, Z+57	; 0x39
   180a0:	12 ad       	ldd	r17, Z+58	; 0x3a
   180a2:	20 e0       	ldi	r18, 0x00	; 0
   180a4:	30 e0       	ldi	r19, 0x00	; 0
   180a6:	42 e0       	ldi	r20, 0x02	; 2
   180a8:	50 e0       	ldi	r21, 0x00	; 0
   180aa:	64 e1       	ldi	r22, 0x14	; 20
   180ac:	70 e0       	ldi	r23, 0x00	; 0
   180ae:	ce 01       	movw	r24, r28
   180b0:	a7 dc       	rcall	.-1714   	; 0x17a00 <V2B_MSB>
   180b2:	00 e0       	ldi	r16, 0x00	; 0
   180b4:	10 e0       	ldi	r17, 0x00	; 0
   180b6:	98 01       	movw	r18, r16
   180b8:	42 e0       	ldi	r20, 0x02	; 2
   180ba:	50 e0       	ldi	r21, 0x00	; 0
   180bc:	66 e1       	ldi	r22, 0x16	; 22
   180be:	70 e0       	ldi	r23, 0x00	; 0
   180c0:	ce 01       	movw	r24, r28
   180c2:	9e dc       	rcall	.-1732   	; 0x17a00 <V2B_MSB>
   180c4:	f7 01       	movw	r30, r14
   180c6:	fd 96       	adiw	r30, 0x3d	; 61
   180c8:	00 81       	ld	r16, Z
   180ca:	11 81       	ldd	r17, Z+1	; 0x01
   180cc:	22 81       	ldd	r18, Z+2	; 0x02
   180ce:	33 81       	ldd	r19, Z+3	; 0x03
   180d0:	44 e0       	ldi	r20, 0x04	; 4
   180d2:	50 e0       	ldi	r21, 0x00	; 0
   180d4:	68 e1       	ldi	r22, 0x18	; 24
   180d6:	70 e0       	ldi	r23, 0x00	; 0
   180d8:	ce 01       	movw	r24, r28
   180da:	92 dc       	rcall	.-1756   	; 0x17a00 <V2B_MSB>
   180dc:	f7 01       	movw	r30, r14
   180de:	ef 5b       	subi	r30, 0xBF	; 191
   180e0:	ff 4f       	sbci	r31, 0xFF	; 255
   180e2:	00 81       	ld	r16, Z
   180e4:	11 81       	ldd	r17, Z+1	; 0x01
   180e6:	22 81       	ldd	r18, Z+2	; 0x02
   180e8:	33 81       	ldd	r19, Z+3	; 0x03
   180ea:	44 e0       	ldi	r20, 0x04	; 4
   180ec:	50 e0       	ldi	r21, 0x00	; 0
   180ee:	6c e1       	ldi	r22, 0x1C	; 28
   180f0:	70 e0       	ldi	r23, 0x00	; 0
   180f2:	ce 01       	movw	r24, r28
   180f4:	85 dc       	rcall	.-1782   	; 0x17a00 <V2B_MSB>
   180f6:	f7 01       	movw	r30, r14
   180f8:	eb 5b       	subi	r30, 0xBB	; 187
   180fa:	ff 4f       	sbci	r31, 0xFF	; 255
   180fc:	00 81       	ld	r16, Z
   180fe:	11 81       	ldd	r17, Z+1	; 0x01
   18100:	22 81       	ldd	r18, Z+2	; 0x02
   18102:	33 81       	ldd	r19, Z+3	; 0x03
   18104:	44 e0       	ldi	r20, 0x04	; 4
   18106:	50 e0       	ldi	r21, 0x00	; 0
   18108:	60 e2       	ldi	r22, 0x20	; 32
   1810a:	70 e0       	ldi	r23, 0x00	; 0
   1810c:	ce 01       	movw	r24, r28
   1810e:	78 dc       	rcall	.-1808   	; 0x17a00 <V2B_MSB>
   18110:	de 01       	movw	r26, r28
   18112:	94 96       	adiw	r26, 0x24	; 36
   18114:	f7 01       	movw	r30, r14
   18116:	e7 5b       	subi	r30, 0xB7	; 183
   18118:	ff 4f       	sbci	r31, 0xFF	; 255
   1811a:	86 e0       	ldi	r24, 0x06	; 6
   1811c:	01 90       	ld	r0, Z+
   1811e:	0d 92       	st	X+, r0
   18120:	8a 95       	dec	r24
   18122:	e1 f7       	brne	.-8      	; 0x1811c <lif_vol2str+0x10a>
   18124:	cd b7       	in	r28, 0x3d	; 61
   18126:	de b7       	in	r29, 0x3e	; 62
   18128:	e6 e0       	ldi	r30, 0x06	; 6
   1812a:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

0001812e <lif_str2vol>:
   1812e:	0f 93       	push	r16
   18130:	1f 93       	push	r17
   18132:	cf 93       	push	r28
   18134:	df 93       	push	r29
   18136:	8c 01       	movw	r16, r24
   18138:	eb 01       	movw	r28, r22
   1813a:	42 e0       	ldi	r20, 0x02	; 2
   1813c:	50 e0       	ldi	r21, 0x00	; 0
   1813e:	60 e0       	ldi	r22, 0x00	; 0
   18140:	70 e0       	ldi	r23, 0x00	; 0
   18142:	87 dc       	rcall	.-1778   	; 0x17a52 <B2V_MSB>
   18144:	7d a3       	std	Y+37, r23	; 0x25
   18146:	6c a3       	std	Y+36, r22	; 0x24
   18148:	be 01       	movw	r22, r28
   1814a:	6a 5d       	subi	r22, 0xDA	; 218
   1814c:	7f 4f       	sbci	r23, 0xFF	; 255
   1814e:	46 e0       	ldi	r20, 0x06	; 6
   18150:	50 e0       	ldi	r21, 0x00	; 0
   18152:	c8 01       	movw	r24, r16
   18154:	02 96       	adiw	r24, 0x02	; 2
   18156:	ac de       	rcall	.-680    	; 0x17eb0 <lif_B2S>
   18158:	44 e0       	ldi	r20, 0x04	; 4
   1815a:	50 e0       	ldi	r21, 0x00	; 0
   1815c:	68 e0       	ldi	r22, 0x08	; 8
   1815e:	70 e0       	ldi	r23, 0x00	; 0
   18160:	c8 01       	movw	r24, r16
   18162:	77 dc       	rcall	.-1810   	; 0x17a52 <B2V_MSB>
   18164:	6d a7       	std	Y+45, r22	; 0x2d
   18166:	7e a7       	std	Y+46, r23	; 0x2e
   18168:	8f a7       	std	Y+47, r24	; 0x2f
   1816a:	98 ab       	std	Y+48, r25	; 0x30
   1816c:	42 e0       	ldi	r20, 0x02	; 2
   1816e:	50 e0       	ldi	r21, 0x00	; 0
   18170:	6c e0       	ldi	r22, 0x0C	; 12
   18172:	70 e0       	ldi	r23, 0x00	; 0
   18174:	c8 01       	movw	r24, r16
   18176:	6d dc       	rcall	.-1830   	; 0x17a52 <B2V_MSB>
   18178:	7a ab       	std	Y+50, r23	; 0x32
   1817a:	69 ab       	std	Y+49, r22	; 0x31
   1817c:	42 e0       	ldi	r20, 0x02	; 2
   1817e:	50 e0       	ldi	r21, 0x00	; 0
   18180:	6e e0       	ldi	r22, 0x0E	; 14
   18182:	70 e0       	ldi	r23, 0x00	; 0
   18184:	c8 01       	movw	r24, r16
   18186:	65 dc       	rcall	.-1846   	; 0x17a52 <B2V_MSB>
   18188:	7c ab       	std	Y+52, r23	; 0x34
   1818a:	6b ab       	std	Y+51, r22	; 0x33
   1818c:	44 e0       	ldi	r20, 0x04	; 4
   1818e:	50 e0       	ldi	r21, 0x00	; 0
   18190:	60 e1       	ldi	r22, 0x10	; 16
   18192:	70 e0       	ldi	r23, 0x00	; 0
   18194:	c8 01       	movw	r24, r16
   18196:	5d dc       	rcall	.-1862   	; 0x17a52 <B2V_MSB>
   18198:	6d ab       	std	Y+53, r22	; 0x35
   1819a:	7e ab       	std	Y+54, r23	; 0x36
   1819c:	8f ab       	std	Y+55, r24	; 0x37
   1819e:	98 af       	std	Y+56, r25	; 0x38
   181a0:	42 e0       	ldi	r20, 0x02	; 2
   181a2:	50 e0       	ldi	r21, 0x00	; 0
   181a4:	64 e1       	ldi	r22, 0x14	; 20
   181a6:	70 e0       	ldi	r23, 0x00	; 0
   181a8:	c8 01       	movw	r24, r16
   181aa:	53 dc       	rcall	.-1882   	; 0x17a52 <B2V_MSB>
   181ac:	7a af       	std	Y+58, r23	; 0x3a
   181ae:	69 af       	std	Y+57, r22	; 0x39
   181b0:	42 e0       	ldi	r20, 0x02	; 2
   181b2:	50 e0       	ldi	r21, 0x00	; 0
   181b4:	66 e1       	ldi	r22, 0x16	; 22
   181b6:	70 e0       	ldi	r23, 0x00	; 0
   181b8:	c8 01       	movw	r24, r16
   181ba:	4b dc       	rcall	.-1898   	; 0x17a52 <B2V_MSB>
   181bc:	7c af       	std	Y+60, r23	; 0x3c
   181be:	6b af       	std	Y+59, r22	; 0x3b
   181c0:	44 e0       	ldi	r20, 0x04	; 4
   181c2:	50 e0       	ldi	r21, 0x00	; 0
   181c4:	68 e1       	ldi	r22, 0x18	; 24
   181c6:	70 e0       	ldi	r23, 0x00	; 0
   181c8:	c8 01       	movw	r24, r16
   181ca:	43 dc       	rcall	.-1914   	; 0x17a52 <B2V_MSB>
   181cc:	fe 01       	movw	r30, r28
   181ce:	fd 96       	adiw	r30, 0x3d	; 61
   181d0:	60 83       	st	Z, r22
   181d2:	71 83       	std	Z+1, r23	; 0x01
   181d4:	82 83       	std	Z+2, r24	; 0x02
   181d6:	93 83       	std	Z+3, r25	; 0x03
   181d8:	44 e0       	ldi	r20, 0x04	; 4
   181da:	50 e0       	ldi	r21, 0x00	; 0
   181dc:	6c e1       	ldi	r22, 0x1C	; 28
   181de:	70 e0       	ldi	r23, 0x00	; 0
   181e0:	c8 01       	movw	r24, r16
   181e2:	37 dc       	rcall	.-1938   	; 0x17a52 <B2V_MSB>
   181e4:	fe 01       	movw	r30, r28
   181e6:	ef 5b       	subi	r30, 0xBF	; 191
   181e8:	ff 4f       	sbci	r31, 0xFF	; 255
   181ea:	60 83       	st	Z, r22
   181ec:	71 83       	std	Z+1, r23	; 0x01
   181ee:	82 83       	std	Z+2, r24	; 0x02
   181f0:	93 83       	std	Z+3, r25	; 0x03
   181f2:	44 e0       	ldi	r20, 0x04	; 4
   181f4:	50 e0       	ldi	r21, 0x00	; 0
   181f6:	60 e2       	ldi	r22, 0x20	; 32
   181f8:	70 e0       	ldi	r23, 0x00	; 0
   181fa:	c8 01       	movw	r24, r16
   181fc:	2a dc       	rcall	.-1964   	; 0x17a52 <B2V_MSB>
   181fe:	fe 01       	movw	r30, r28
   18200:	eb 5b       	subi	r30, 0xBB	; 187
   18202:	ff 4f       	sbci	r31, 0xFF	; 255
   18204:	60 83       	st	Z, r22
   18206:	71 83       	std	Z+1, r23	; 0x01
   18208:	82 83       	std	Z+2, r24	; 0x02
   1820a:	93 83       	std	Z+3, r25	; 0x03
   1820c:	de 01       	movw	r26, r28
   1820e:	a7 5b       	subi	r26, 0xB7	; 183
   18210:	bf 4f       	sbci	r27, 0xFF	; 255
   18212:	f8 01       	movw	r30, r16
   18214:	b4 96       	adiw	r30, 0x24	; 36
   18216:	86 e0       	ldi	r24, 0x06	; 6
   18218:	01 90       	ld	r0, Z+
   1821a:	0d 92       	st	X+, r0
   1821c:	8a 95       	dec	r24
   1821e:	e1 f7       	brne	.-8      	; 0x18218 <lif_str2vol+0xea>
   18220:	df 91       	pop	r29
   18222:	cf 91       	pop	r28
   18224:	1f 91       	pop	r17
   18226:	0f 91       	pop	r16
   18228:	08 95       	ret

0001822a <lif_dir2str>:
   1822a:	ef 92       	push	r14
   1822c:	ff 92       	push	r15
   1822e:	0f 93       	push	r16
   18230:	1f 93       	push	r17
   18232:	cf 93       	push	r28
   18234:	df 93       	push	r29
   18236:	ec 01       	movw	r28, r24
   18238:	7b 01       	movw	r14, r22
   1823a:	bc 01       	movw	r22, r24
   1823c:	61 5b       	subi	r22, 0xB1	; 177
   1823e:	7f 4f       	sbci	r23, 0xFF	; 255
   18240:	4a e0       	ldi	r20, 0x0A	; 10
   18242:	50 e0       	ldi	r21, 0x00	; 0
   18244:	c7 01       	movw	r24, r14
   18246:	8b de       	rcall	.-746    	; 0x17f5e <lif_S2B>
   18248:	fe 01       	movw	r30, r28
   1824a:	e6 5a       	subi	r30, 0xA6	; 166
   1824c:	ff 4f       	sbci	r31, 0xFF	; 255
   1824e:	00 81       	ld	r16, Z
   18250:	11 81       	ldd	r17, Z+1	; 0x01
   18252:	20 e0       	ldi	r18, 0x00	; 0
   18254:	30 e0       	ldi	r19, 0x00	; 0
   18256:	42 e0       	ldi	r20, 0x02	; 2
   18258:	50 e0       	ldi	r21, 0x00	; 0
   1825a:	6a e0       	ldi	r22, 0x0A	; 10
   1825c:	70 e0       	ldi	r23, 0x00	; 0
   1825e:	c7 01       	movw	r24, r14
   18260:	cf db       	rcall	.-2146   	; 0x17a00 <V2B_MSB>
   18262:	fe 01       	movw	r30, r28
   18264:	e4 5a       	subi	r30, 0xA4	; 164
   18266:	ff 4f       	sbci	r31, 0xFF	; 255
   18268:	00 81       	ld	r16, Z
   1826a:	11 81       	ldd	r17, Z+1	; 0x01
   1826c:	22 81       	ldd	r18, Z+2	; 0x02
   1826e:	33 81       	ldd	r19, Z+3	; 0x03
   18270:	44 e0       	ldi	r20, 0x04	; 4
   18272:	50 e0       	ldi	r21, 0x00	; 0
   18274:	6c e0       	ldi	r22, 0x0C	; 12
   18276:	70 e0       	ldi	r23, 0x00	; 0
   18278:	c7 01       	movw	r24, r14
   1827a:	c2 db       	rcall	.-2172   	; 0x17a00 <V2B_MSB>
   1827c:	fe 01       	movw	r30, r28
   1827e:	e0 5a       	subi	r30, 0xA0	; 160
   18280:	ff 4f       	sbci	r31, 0xFF	; 255
   18282:	00 81       	ld	r16, Z
   18284:	11 81       	ldd	r17, Z+1	; 0x01
   18286:	22 81       	ldd	r18, Z+2	; 0x02
   18288:	33 81       	ldd	r19, Z+3	; 0x03
   1828a:	44 e0       	ldi	r20, 0x04	; 4
   1828c:	50 e0       	ldi	r21, 0x00	; 0
   1828e:	60 e1       	ldi	r22, 0x10	; 16
   18290:	70 e0       	ldi	r23, 0x00	; 0
   18292:	c7 01       	movw	r24, r14
   18294:	b5 db       	rcall	.-2198   	; 0x17a00 <V2B_MSB>
   18296:	d7 01       	movw	r26, r14
   18298:	54 96       	adiw	r26, 0x14	; 20
   1829a:	fe 01       	movw	r30, r28
   1829c:	ec 59       	subi	r30, 0x9C	; 156
   1829e:	ff 4f       	sbci	r31, 0xFF	; 255
   182a0:	86 e0       	ldi	r24, 0x06	; 6
   182a2:	01 90       	ld	r0, Z+
   182a4:	0d 92       	st	X+, r0
   182a6:	8a 95       	dec	r24
   182a8:	e1 f7       	brne	.-8      	; 0x182a2 <lif_dir2str+0x78>
   182aa:	fe 01       	movw	r30, r28
   182ac:	e6 59       	subi	r30, 0x96	; 150
   182ae:	ff 4f       	sbci	r31, 0xFF	; 255
   182b0:	00 81       	ld	r16, Z
   182b2:	11 81       	ldd	r17, Z+1	; 0x01
   182b4:	20 e0       	ldi	r18, 0x00	; 0
   182b6:	30 e0       	ldi	r19, 0x00	; 0
   182b8:	42 e0       	ldi	r20, 0x02	; 2
   182ba:	50 e0       	ldi	r21, 0x00	; 0
   182bc:	6a e1       	ldi	r22, 0x1A	; 26
   182be:	70 e0       	ldi	r23, 0x00	; 0
   182c0:	c7 01       	movw	r24, r14
   182c2:	9e db       	rcall	.-2244   	; 0x17a00 <V2B_MSB>
   182c4:	fe 01       	movw	r30, r28
   182c6:	e4 59       	subi	r30, 0x94	; 148
   182c8:	ff 4f       	sbci	r31, 0xFF	; 255
   182ca:	00 81       	ld	r16, Z
   182cc:	11 81       	ldd	r17, Z+1	; 0x01
   182ce:	20 e0       	ldi	r18, 0x00	; 0
   182d0:	30 e0       	ldi	r19, 0x00	; 0
   182d2:	42 e0       	ldi	r20, 0x02	; 2
   182d4:	50 e0       	ldi	r21, 0x00	; 0
   182d6:	6c e1       	ldi	r22, 0x1C	; 28
   182d8:	70 e0       	ldi	r23, 0x00	; 0
   182da:	c7 01       	movw	r24, r14
   182dc:	a5 db       	rcall	.-2230   	; 0x17a28 <V2B_LSB>
   182de:	c2 59       	subi	r28, 0x92	; 146
   182e0:	df 4f       	sbci	r29, 0xFF	; 255
   182e2:	08 81       	ld	r16, Y
   182e4:	19 81       	ldd	r17, Y+1	; 0x01
   182e6:	20 e0       	ldi	r18, 0x00	; 0
   182e8:	30 e0       	ldi	r19, 0x00	; 0
   182ea:	42 e0       	ldi	r20, 0x02	; 2
   182ec:	50 e0       	ldi	r21, 0x00	; 0
   182ee:	6e e1       	ldi	r22, 0x1E	; 30
   182f0:	70 e0       	ldi	r23, 0x00	; 0
   182f2:	c7 01       	movw	r24, r14
   182f4:	99 db       	rcall	.-2254   	; 0x17a28 <V2B_LSB>
   182f6:	cd b7       	in	r28, 0x3d	; 61
   182f8:	de b7       	in	r29, 0x3e	; 62
   182fa:	e6 e0       	ldi	r30, 0x06	; 6
   182fc:	0c 94 80 e2 	jmp	0x1c500	; 0x1c500 <__epilogue_restores__+0x18>

00018300 <lif_str2dir>:
   18300:	0f 93       	push	r16
   18302:	1f 93       	push	r17
   18304:	cf 93       	push	r28
   18306:	df 93       	push	r29
   18308:	8c 01       	movw	r16, r24
   1830a:	eb 01       	movw	r28, r22
   1830c:	61 5b       	subi	r22, 0xB1	; 177
   1830e:	7f 4f       	sbci	r23, 0xFF	; 255
   18310:	4a e0       	ldi	r20, 0x0A	; 10
   18312:	50 e0       	ldi	r21, 0x00	; 0
   18314:	cd dd       	rcall	.-1126   	; 0x17eb0 <lif_B2S>
   18316:	42 e0       	ldi	r20, 0x02	; 2
   18318:	50 e0       	ldi	r21, 0x00	; 0
   1831a:	6a e0       	ldi	r22, 0x0A	; 10
   1831c:	70 e0       	ldi	r23, 0x00	; 0
   1831e:	c8 01       	movw	r24, r16
   18320:	98 db       	rcall	.-2256   	; 0x17a52 <B2V_MSB>
   18322:	fe 01       	movw	r30, r28
   18324:	e6 5a       	subi	r30, 0xA6	; 166
   18326:	ff 4f       	sbci	r31, 0xFF	; 255
   18328:	71 83       	std	Z+1, r23	; 0x01
   1832a:	60 83       	st	Z, r22
   1832c:	44 e0       	ldi	r20, 0x04	; 4
   1832e:	50 e0       	ldi	r21, 0x00	; 0
   18330:	6c e0       	ldi	r22, 0x0C	; 12
   18332:	70 e0       	ldi	r23, 0x00	; 0
   18334:	c8 01       	movw	r24, r16
   18336:	8d db       	rcall	.-2278   	; 0x17a52 <B2V_MSB>
   18338:	fe 01       	movw	r30, r28
   1833a:	e4 5a       	subi	r30, 0xA4	; 164
   1833c:	ff 4f       	sbci	r31, 0xFF	; 255
   1833e:	60 83       	st	Z, r22
   18340:	71 83       	std	Z+1, r23	; 0x01
   18342:	82 83       	std	Z+2, r24	; 0x02
   18344:	93 83       	std	Z+3, r25	; 0x03
   18346:	44 e0       	ldi	r20, 0x04	; 4
   18348:	50 e0       	ldi	r21, 0x00	; 0
   1834a:	60 e1       	ldi	r22, 0x10	; 16
   1834c:	70 e0       	ldi	r23, 0x00	; 0
   1834e:	c8 01       	movw	r24, r16
   18350:	80 db       	rcall	.-2304   	; 0x17a52 <B2V_MSB>
   18352:	fe 01       	movw	r30, r28
   18354:	e0 5a       	subi	r30, 0xA0	; 160
   18356:	ff 4f       	sbci	r31, 0xFF	; 255
   18358:	60 83       	st	Z, r22
   1835a:	71 83       	std	Z+1, r23	; 0x01
   1835c:	82 83       	std	Z+2, r24	; 0x02
   1835e:	93 83       	std	Z+3, r25	; 0x03
   18360:	de 01       	movw	r26, r28
   18362:	ac 59       	subi	r26, 0x9C	; 156
   18364:	bf 4f       	sbci	r27, 0xFF	; 255
   18366:	f8 01       	movw	r30, r16
   18368:	74 96       	adiw	r30, 0x14	; 20
   1836a:	86 e0       	ldi	r24, 0x06	; 6
   1836c:	01 90       	ld	r0, Z+
   1836e:	0d 92       	st	X+, r0
   18370:	8a 95       	dec	r24
   18372:	e1 f7       	brne	.-8      	; 0x1836c <lif_str2dir+0x6c>
   18374:	42 e0       	ldi	r20, 0x02	; 2
   18376:	50 e0       	ldi	r21, 0x00	; 0
   18378:	6a e1       	ldi	r22, 0x1A	; 26
   1837a:	70 e0       	ldi	r23, 0x00	; 0
   1837c:	c8 01       	movw	r24, r16
   1837e:	69 db       	rcall	.-2350   	; 0x17a52 <B2V_MSB>
   18380:	fe 01       	movw	r30, r28
   18382:	e6 59       	subi	r30, 0x96	; 150
   18384:	ff 4f       	sbci	r31, 0xFF	; 255
   18386:	71 83       	std	Z+1, r23	; 0x01
   18388:	60 83       	st	Z, r22
   1838a:	42 e0       	ldi	r20, 0x02	; 2
   1838c:	50 e0       	ldi	r21, 0x00	; 0
   1838e:	6c e1       	ldi	r22, 0x1C	; 28
   18390:	70 e0       	ldi	r23, 0x00	; 0
   18392:	c8 01       	movw	r24, r16
   18394:	7d db       	rcall	.-2310   	; 0x17a90 <B2V_LSB>
   18396:	fe 01       	movw	r30, r28
   18398:	e4 59       	subi	r30, 0x94	; 148
   1839a:	ff 4f       	sbci	r31, 0xFF	; 255
   1839c:	71 83       	std	Z+1, r23	; 0x01
   1839e:	60 83       	st	Z, r22
   183a0:	42 e0       	ldi	r20, 0x02	; 2
   183a2:	50 e0       	ldi	r21, 0x00	; 0
   183a4:	6e e1       	ldi	r22, 0x1E	; 30
   183a6:	70 e0       	ldi	r23, 0x00	; 0
   183a8:	c8 01       	movw	r24, r16
   183aa:	72 db       	rcall	.-2332   	; 0x17a90 <B2V_LSB>
   183ac:	c2 59       	subi	r28, 0x92	; 146
   183ae:	df 4f       	sbci	r29, 0xFF	; 255
   183b0:	79 83       	std	Y+1, r23	; 0x01
   183b2:	68 83       	st	Y, r22
   183b4:	df 91       	pop	r29
   183b6:	cf 91       	pop	r28
   183b8:	1f 91       	pop	r17
   183ba:	0f 91       	pop	r16
   183bc:	08 95       	ret

000183be <lif_BIN2BCD>:
   183be:	6a e0       	ldi	r22, 0x0A	; 10
   183c0:	0e 94 b8 e1 	call	0x1c370	; 0x1c370 <__udivmodqi4>
   183c4:	82 95       	swap	r24
   183c6:	80 7f       	andi	r24, 0xF0	; 240
   183c8:	89 2b       	or	r24, r25
   183ca:	08 95       	ret

000183cc <lif_BCD2BIN>:
   183cc:	28 2f       	mov	r18, r24
   183ce:	22 95       	swap	r18
   183d0:	2f 70       	andi	r18, 0x0F	; 15
   183d2:	8f 70       	andi	r24, 0x0F	; 15
   183d4:	90 e0       	ldi	r25, 0x00	; 0
   183d6:	3a e0       	ldi	r19, 0x0A	; 10
   183d8:	23 9f       	mul	r18, r19
   183da:	80 0d       	add	r24, r0
   183dc:	91 1d       	adc	r25, r1
   183de:	11 24       	eor	r1, r1
   183e0:	08 95       	ret

000183e2 <lif_time2lifbcd>:
   183e2:	aa e1       	ldi	r26, 0x1A	; 26
   183e4:	b0 e0       	ldi	r27, 0x00	; 0
   183e6:	e7 ef       	ldi	r30, 0xF7	; 247
   183e8:	f1 ec       	ldi	r31, 0xC1	; 193
   183ea:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
   183ee:	8b 01       	movw	r16, r22
   183f0:	9c 01       	movw	r18, r24
   183f2:	6f 8b       	std	Y+23, r22	; 0x17
   183f4:	78 8f       	std	Y+24, r23	; 0x18
   183f6:	89 8f       	std	Y+25, r24	; 0x19
   183f8:	9a 8f       	std	Y+26, r25	; 0x1a
   183fa:	67 2b       	or	r22, r23
   183fc:	68 2b       	or	r22, r24
   183fe:	69 2b       	or	r22, r25
   18400:	41 f4       	brne	.+16     	; 0x18412 <lif_time2lifbcd+0x30>
   18402:	fa 01       	movw	r30, r20
   18404:	ca 01       	movw	r24, r20
   18406:	06 96       	adiw	r24, 0x06	; 6
   18408:	11 92       	st	Z+, r1
   1840a:	e8 17       	cp	r30, r24
   1840c:	f9 07       	cpc	r31, r25
   1840e:	e1 f7       	brne	.-8      	; 0x18408 <lif_time2lifbcd+0x26>
   18410:	26 c0       	rjmp	.+76     	; 0x1845e <lif_time2lifbcd+0x7c>
   18412:	8a 01       	movw	r16, r20
   18414:	be 01       	movw	r22, r28
   18416:	6f 5f       	subi	r22, 0xFF	; 255
   18418:	7f 4f       	sbci	r23, 0xFF	; 255
   1841a:	ce 01       	movw	r24, r28
   1841c:	47 96       	adiw	r24, 0x17	; 23
   1841e:	0e 94 40 35 	call	0x6a80	; 0x6a80 <gmtime_r>
   18422:	8b 85       	ldd	r24, Y+11	; 0x0b
   18424:	9c 85       	ldd	r25, Y+12	; 0x0c
   18426:	64 e6       	ldi	r22, 0x64	; 100
   18428:	70 e0       	ldi	r23, 0x00	; 0
   1842a:	0e 94 d8 e1 	call	0x1c3b0	; 0x1c3b0 <__divmodhi4>
   1842e:	c7 df       	rcall	.-114    	; 0x183be <lif_BIN2BCD>
   18430:	f8 01       	movw	r30, r16
   18432:	80 83       	st	Z, r24
   18434:	89 85       	ldd	r24, Y+9	; 0x09
   18436:	8f 5f       	subi	r24, 0xFF	; 255
   18438:	c2 df       	rcall	.-124    	; 0x183be <lif_BIN2BCD>
   1843a:	f8 01       	movw	r30, r16
   1843c:	81 83       	std	Z+1, r24	; 0x01
   1843e:	8f 81       	ldd	r24, Y+7	; 0x07
   18440:	be df       	rcall	.-132    	; 0x183be <lif_BIN2BCD>
   18442:	f8 01       	movw	r30, r16
   18444:	82 83       	std	Z+2, r24	; 0x02
   18446:	8d 81       	ldd	r24, Y+5	; 0x05
   18448:	ba df       	rcall	.-140    	; 0x183be <lif_BIN2BCD>
   1844a:	f8 01       	movw	r30, r16
   1844c:	83 83       	std	Z+3, r24	; 0x03
   1844e:	8b 81       	ldd	r24, Y+3	; 0x03
   18450:	b6 df       	rcall	.-148    	; 0x183be <lif_BIN2BCD>
   18452:	f8 01       	movw	r30, r16
   18454:	84 83       	std	Z+4, r24	; 0x04
   18456:	89 81       	ldd	r24, Y+1	; 0x01
   18458:	b2 df       	rcall	.-156    	; 0x183be <lif_BIN2BCD>
   1845a:	f8 01       	movw	r30, r16
   1845c:	85 83       	std	Z+5, r24	; 0x05
   1845e:	6a 96       	adiw	r28, 0x1a	; 26
   18460:	e4 e0       	ldi	r30, 0x04	; 4
   18462:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00018466 <lif_lifbcd2time>:
   18466:	a6 e1       	ldi	r26, 0x16	; 22
   18468:	b0 e0       	ldi	r27, 0x00	; 0
   1846a:	e9 e3       	ldi	r30, 0x39	; 57
   1846c:	f2 ec       	ldi	r31, 0xC2	; 194
   1846e:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
   18472:	8c 01       	movw	r16, r24
   18474:	7c 01       	movw	r14, r24
   18476:	5c 01       	movw	r10, r24
   18478:	26 e0       	ldi	r18, 0x06	; 6
   1847a:	a2 0e       	add	r10, r18
   1847c:	b1 1c       	adc	r11, r1
   1847e:	cc 24       	eor	r12, r12
   18480:	c3 94       	inc	r12
   18482:	d1 2c       	mov	r13, r1
   18484:	f7 01       	movw	r30, r14
   18486:	81 91       	ld	r24, Z+
   18488:	7f 01       	movw	r14, r30
   1848a:	a0 df       	rcall	.-192    	; 0x183cc <lif_BCD2BIN>
   1848c:	89 2b       	or	r24, r25
   1848e:	11 f0       	breq	.+4      	; 0x18494 <lif_lifbcd2time+0x2e>
   18490:	c1 2c       	mov	r12, r1
   18492:	d1 2c       	mov	r13, r1
   18494:	ea 14       	cp	r14, r10
   18496:	fb 04       	cpc	r15, r11
   18498:	a9 f7       	brne	.-22     	; 0x18484 <lif_lifbcd2time+0x1e>
   1849a:	c1 14       	cp	r12, r1
   1849c:	d1 04       	cpc	r13, r1
   1849e:	61 f5       	brne	.+88     	; 0x184f8 <lif_lifbcd2time+0x92>
   184a0:	f8 01       	movw	r30, r16
   184a2:	80 81       	ld	r24, Z
   184a4:	93 df       	rcall	.-218    	; 0x183cc <lif_BCD2BIN>
   184a6:	7c 01       	movw	r14, r24
   184a8:	f8 01       	movw	r30, r16
   184aa:	81 81       	ldd	r24, Z+1	; 0x01
   184ac:	8f df       	rcall	.-226    	; 0x183cc <lif_BCD2BIN>
   184ae:	01 97       	sbiw	r24, 0x01	; 1
   184b0:	f6 e4       	ldi	r31, 0x46	; 70
   184b2:	ef 16       	cp	r14, r31
   184b4:	f1 04       	cpc	r15, r1
   184b6:	1c f4       	brge	.+6      	; 0x184be <lif_lifbcd2time+0x58>
   184b8:	24 e6       	ldi	r18, 0x64	; 100
   184ba:	e2 0e       	add	r14, r18
   184bc:	f1 1c       	adc	r15, r1
   184be:	fc 86       	std	Y+12, r15	; 0x0c
   184c0:	eb 86       	std	Y+11, r14	; 0x0b
   184c2:	9a 87       	std	Y+10, r25	; 0x0a
   184c4:	89 87       	std	Y+9, r24	; 0x09
   184c6:	f8 01       	movw	r30, r16
   184c8:	82 81       	ldd	r24, Z+2	; 0x02
   184ca:	80 df       	rcall	.-256    	; 0x183cc <lif_BCD2BIN>
   184cc:	98 87       	std	Y+8, r25	; 0x08
   184ce:	8f 83       	std	Y+7, r24	; 0x07
   184d0:	f8 01       	movw	r30, r16
   184d2:	83 81       	ldd	r24, Z+3	; 0x03
   184d4:	7b df       	rcall	.-266    	; 0x183cc <lif_BCD2BIN>
   184d6:	9e 83       	std	Y+6, r25	; 0x06
   184d8:	8d 83       	std	Y+5, r24	; 0x05
   184da:	f8 01       	movw	r30, r16
   184dc:	84 81       	ldd	r24, Z+4	; 0x04
   184de:	76 df       	rcall	.-276    	; 0x183cc <lif_BCD2BIN>
   184e0:	9c 83       	std	Y+4, r25	; 0x04
   184e2:	8b 83       	std	Y+3, r24	; 0x03
   184e4:	f8 01       	movw	r30, r16
   184e6:	85 81       	ldd	r24, Z+5	; 0x05
   184e8:	71 df       	rcall	.-286    	; 0x183cc <lif_BCD2BIN>
   184ea:	9a 83       	std	Y+2, r25	; 0x02
   184ec:	89 83       	std	Y+1, r24	; 0x01
   184ee:	ce 01       	movw	r24, r28
   184f0:	01 96       	adiw	r24, 0x01	; 1
   184f2:	0e 94 14 38 	call	0x7028	; 0x7028 <timegm>
   184f6:	03 c0       	rjmp	.+6      	; 0x184fe <lif_lifbcd2time+0x98>
   184f8:	60 e0       	ldi	r22, 0x00	; 0
   184fa:	70 e0       	ldi	r23, 0x00	; 0
   184fc:	cb 01       	movw	r24, r22
   184fe:	66 96       	adiw	r28, 0x16	; 22
   18500:	ea e0       	ldi	r30, 0x0A	; 10
   18502:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

00018506 <lif_ctime_gmt>:
   18506:	a6 e1       	ldi	r26, 0x16	; 22
   18508:	b0 e0       	ldi	r27, 0x00	; 0
   1850a:	e9 e8       	ldi	r30, 0x89	; 137
   1850c:	f2 ec       	ldi	r31, 0xC2	; 194
   1850e:	0c 94 66 e2 	jmp	0x1c4cc	; 0x1c4cc <__prologue_saves__+0x1c>
   18512:	20 e2       	ldi	r18, 0x20	; 32
   18514:	e1 ec       	ldi	r30, 0xC1	; 193
   18516:	f9 e1       	ldi	r31, 0x19	; 25
   18518:	df 01       	movw	r26, r30
   1851a:	1d 92       	st	X+, r1
   1851c:	2a 95       	dec	r18
   1851e:	e9 f7       	brne	.-6      	; 0x1851a <lif_ctime_gmt+0x14>
   18520:	be 01       	movw	r22, r28
   18522:	6f 5f       	subi	r22, 0xFF	; 255
   18524:	7f 4f       	sbci	r23, 0xFF	; 255
   18526:	0e 94 40 35 	call	0x6a80	; 0x6a80 <gmtime_r>
   1852a:	61 ec       	ldi	r22, 0xC1	; 193
   1852c:	79 e1       	ldi	r23, 0x19	; 25
   1852e:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <asctime_r>
   18532:	8c 01       	movw	r16, r24
   18534:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <trim_tail>
   18538:	c8 01       	movw	r24, r16
   1853a:	66 96       	adiw	r28, 0x16	; 22
   1853c:	e4 e0       	ldi	r30, 0x04	; 4
   1853e:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00018542 <lif_lifbcd2timestr>:
   18542:	a4 e0       	ldi	r26, 0x04	; 4
   18544:	b0 e0       	ldi	r27, 0x00	; 0
   18546:	e7 ea       	ldi	r30, 0xA7	; 167
   18548:	f2 ec       	ldi	r31, 0xC2	; 194
   1854a:	0c 94 68 e2 	jmp	0x1c4d0	; 0x1c4d0 <__prologue_saves__+0x20>
   1854e:	20 e2       	ldi	r18, 0x20	; 32
   18550:	e1 ea       	ldi	r30, 0xA1	; 161
   18552:	f9 e1       	ldi	r31, 0x19	; 25
   18554:	df 01       	movw	r26, r30
   18556:	1d 92       	st	X+, r1
   18558:	2a 95       	dec	r18
   1855a:	e9 f7       	brne	.-6      	; 0x18556 <lif_lifbcd2timestr+0x14>
   1855c:	84 df       	rcall	.-248    	; 0x18466 <lif_lifbcd2time>
   1855e:	69 83       	std	Y+1, r22	; 0x01
   18560:	7a 83       	std	Y+2, r23	; 0x02
   18562:	8b 83       	std	Y+3, r24	; 0x03
   18564:	9c 83       	std	Y+4, r25	; 0x04
   18566:	67 2b       	or	r22, r23
   18568:	68 2b       	or	r22, r24
   1856a:	69 2b       	or	r22, r25
   1856c:	29 f0       	breq	.+10     	; 0x18578 <lif_lifbcd2timestr+0x36>
   1856e:	ce 01       	movw	r24, r28
   18570:	01 96       	adiw	r24, 0x01	; 1
   18572:	c9 df       	rcall	.-110    	; 0x18506 <lif_ctime_gmt>
   18574:	bc 01       	movw	r22, r24
   18576:	02 c0       	rjmp	.+4      	; 0x1857c <lif_lifbcd2timestr+0x3a>
   18578:	64 ef       	ldi	r22, 0xF4	; 244
   1857a:	75 e1       	ldi	r23, 0x15	; 21
   1857c:	81 ea       	ldi	r24, 0xA1	; 161
   1857e:	99 e1       	ldi	r25, 0x19	; 25
   18580:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <strcpy>
   18584:	81 ea       	ldi	r24, 0xA1	; 161
   18586:	99 e1       	ldi	r25, 0x19	; 25
   18588:	24 96       	adiw	r28, 0x04	; 4
   1858a:	e2 e0       	ldi	r30, 0x02	; 2
   1858c:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00018590 <lif_image_clear>:
   18590:	20 e7       	ldi	r18, 0x70	; 112
   18592:	fc 01       	movw	r30, r24
   18594:	11 92       	st	Z+, r1
   18596:	2a 95       	dec	r18
   18598:	e9 f7       	brne	.-6      	; 0x18594 <lif_image_clear+0x4>
   1859a:	08 95       	ret

0001859c <lif_dir_clear>:
   1859c:	81 5b       	subi	r24, 0xB1	; 177
   1859e:	9f 4f       	sbci	r25, 0xFF	; 255
   185a0:	21 e2       	ldi	r18, 0x21	; 33
   185a2:	fc 01       	movw	r30, r24
   185a4:	11 92       	st	Z+, r1
   185a6:	2a 95       	dec	r18
   185a8:	e9 f7       	brne	.-6      	; 0x185a4 <lif_dir_clear+0x8>
   185aa:	08 95       	ret

000185ac <lif_vol_clear>:
   185ac:	84 96       	adiw	r24, 0x24	; 36
   185ae:	2b e2       	ldi	r18, 0x2B	; 43
   185b0:	fc 01       	movw	r30, r24
   185b2:	11 92       	st	Z+, r1
   185b4:	2a 95       	dec	r18
   185b6:	e9 f7       	brne	.-6      	; 0x185b2 <lif_vol_clear+0x6>
   185b8:	08 95       	ret

000185ba <lif_dump_vol>:
   185ba:	cf 93       	push	r28
   185bc:	df 93       	push	r29
   185be:	ad b7       	in	r26, 0x3d	; 61
   185c0:	be b7       	in	r27, 0x3e	; 62
   185c2:	17 97       	sbiw	r26, 0x07	; 7
   185c4:	0f b6       	in	r0, 0x3f	; 63
   185c6:	f8 94       	cli
   185c8:	be bf       	out	0x3e, r27	; 62
   185ca:	0f be       	out	0x3f, r0	; 63
   185cc:	ad bf       	out	0x3d, r26	; 61
   185ce:	ec 01       	movw	r28, r24
   185d0:	ed b7       	in	r30, 0x3d	; 61
   185d2:	fe b7       	in	r31, 0x3e	; 62
   185d4:	75 83       	std	Z+5, r23	; 0x05
   185d6:	64 83       	std	Z+4, r22	; 0x04
   185d8:	81 e0       	ldi	r24, 0x01	; 1
   185da:	90 e4       	ldi	r25, 0x40	; 64
   185dc:	a0 e0       	ldi	r26, 0x00	; 0
   185de:	81 83       	std	Z+1, r24	; 0x01
   185e0:	92 83       	std	Z+2, r25	; 0x02
   185e2:	a3 83       	std	Z+3, r26	; 0x03
   185e4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   185e8:	88 81       	ld	r24, Y
   185ea:	99 81       	ldd	r25, Y+1	; 0x01
   185ec:	ed b7       	in	r30, 0x3d	; 61
   185ee:	fe b7       	in	r31, 0x3e	; 62
   185f0:	95 83       	std	Z+5, r25	; 0x05
   185f2:	84 83       	std	Z+4, r24	; 0x04
   185f4:	87 ee       	ldi	r24, 0xE7	; 231
   185f6:	9f e3       	ldi	r25, 0x3F	; 63
   185f8:	a0 e0       	ldi	r26, 0x00	; 0
   185fa:	81 83       	std	Z+1, r24	; 0x01
   185fc:	92 83       	std	Z+2, r25	; 0x02
   185fe:	a3 83       	std	Z+3, r26	; 0x03
   18600:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18604:	8c 81       	ldd	r24, Y+4	; 0x04
   18606:	9d 81       	ldd	r25, Y+5	; 0x05
   18608:	ae 81       	ldd	r26, Y+6	; 0x06
   1860a:	bf 81       	ldd	r27, Y+7	; 0x07
   1860c:	ed b7       	in	r30, 0x3d	; 61
   1860e:	fe b7       	in	r31, 0x3e	; 62
   18610:	84 83       	std	Z+4, r24	; 0x04
   18612:	95 83       	std	Z+5, r25	; 0x05
   18614:	a6 83       	std	Z+6, r26	; 0x06
   18616:	b7 83       	std	Z+7, r27	; 0x07
   18618:	8a ec       	ldi	r24, 0xCA	; 202
   1861a:	9f e3       	ldi	r25, 0x3F	; 63
   1861c:	a0 e0       	ldi	r26, 0x00	; 0
   1861e:	81 83       	std	Z+1, r24	; 0x01
   18620:	92 83       	std	Z+2, r25	; 0x02
   18622:	a3 83       	std	Z+3, r26	; 0x03
   18624:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18628:	88 85       	ldd	r24, Y+8	; 0x08
   1862a:	99 85       	ldd	r25, Y+9	; 0x09
   1862c:	aa 85       	ldd	r26, Y+10	; 0x0a
   1862e:	bb 85       	ldd	r27, Y+11	; 0x0b
   18630:	ed b7       	in	r30, 0x3d	; 61
   18632:	fe b7       	in	r31, 0x3e	; 62
   18634:	84 83       	std	Z+4, r24	; 0x04
   18636:	95 83       	std	Z+5, r25	; 0x05
   18638:	a6 83       	std	Z+6, r26	; 0x06
   1863a:	b7 83       	std	Z+7, r27	; 0x07
   1863c:	8d ea       	ldi	r24, 0xAD	; 173
   1863e:	9f e3       	ldi	r25, 0x3F	; 63
   18640:	a0 e0       	ldi	r26, 0x00	; 0
   18642:	81 83       	std	Z+1, r24	; 0x01
   18644:	92 83       	std	Z+2, r25	; 0x02
   18646:	a3 83       	std	Z+3, r26	; 0x03
   18648:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1864c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1864e:	9d 85       	ldd	r25, Y+13	; 0x0d
   18650:	ae 85       	ldd	r26, Y+14	; 0x0e
   18652:	bf 85       	ldd	r27, Y+15	; 0x0f
   18654:	ed b7       	in	r30, 0x3d	; 61
   18656:	fe b7       	in	r31, 0x3e	; 62
   18658:	84 83       	std	Z+4, r24	; 0x04
   1865a:	95 83       	std	Z+5, r25	; 0x05
   1865c:	a6 83       	std	Z+6, r26	; 0x06
   1865e:	b7 83       	std	Z+7, r27	; 0x07
   18660:	80 e9       	ldi	r24, 0x90	; 144
   18662:	9f e3       	ldi	r25, 0x3F	; 63
   18664:	a0 e0       	ldi	r26, 0x00	; 0
   18666:	81 83       	std	Z+1, r24	; 0x01
   18668:	92 83       	std	Z+2, r25	; 0x02
   1866a:	a3 83       	std	Z+3, r26	; 0x03
   1866c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18670:	88 89       	ldd	r24, Y+16	; 0x10
   18672:	99 89       	ldd	r25, Y+17	; 0x11
   18674:	aa 89       	ldd	r26, Y+18	; 0x12
   18676:	bb 89       	ldd	r27, Y+19	; 0x13
   18678:	ed b7       	in	r30, 0x3d	; 61
   1867a:	fe b7       	in	r31, 0x3e	; 62
   1867c:	84 83       	std	Z+4, r24	; 0x04
   1867e:	95 83       	std	Z+5, r25	; 0x05
   18680:	a6 83       	std	Z+6, r26	; 0x06
   18682:	b7 83       	std	Z+7, r27	; 0x07
   18684:	83 e7       	ldi	r24, 0x73	; 115
   18686:	9f e3       	ldi	r25, 0x3F	; 63
   18688:	a0 e0       	ldi	r26, 0x00	; 0
   1868a:	81 83       	std	Z+1, r24	; 0x01
   1868c:	92 83       	std	Z+2, r25	; 0x02
   1868e:	a3 83       	std	Z+3, r26	; 0x03
   18690:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18694:	8c 89       	ldd	r24, Y+20	; 0x14
   18696:	9d 89       	ldd	r25, Y+21	; 0x15
   18698:	ae 89       	ldd	r26, Y+22	; 0x16
   1869a:	bf 89       	ldd	r27, Y+23	; 0x17
   1869c:	ed b7       	in	r30, 0x3d	; 61
   1869e:	fe b7       	in	r31, 0x3e	; 62
   186a0:	84 83       	std	Z+4, r24	; 0x04
   186a2:	95 83       	std	Z+5, r25	; 0x05
   186a4:	a6 83       	std	Z+6, r26	; 0x06
   186a6:	b7 83       	std	Z+7, r27	; 0x07
   186a8:	86 e5       	ldi	r24, 0x56	; 86
   186aa:	9f e3       	ldi	r25, 0x3F	; 63
   186ac:	a0 e0       	ldi	r26, 0x00	; 0
   186ae:	81 83       	std	Z+1, r24	; 0x01
   186b0:	92 83       	std	Z+2, r25	; 0x02
   186b2:	a3 83       	std	Z+3, r26	; 0x03
   186b4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   186b8:	88 8d       	ldd	r24, Y+24	; 0x18
   186ba:	99 8d       	ldd	r25, Y+25	; 0x19
   186bc:	aa 8d       	ldd	r26, Y+26	; 0x1a
   186be:	bb 8d       	ldd	r27, Y+27	; 0x1b
   186c0:	ed b7       	in	r30, 0x3d	; 61
   186c2:	fe b7       	in	r31, 0x3e	; 62
   186c4:	84 83       	std	Z+4, r24	; 0x04
   186c6:	95 83       	std	Z+5, r25	; 0x05
   186c8:	a6 83       	std	Z+6, r26	; 0x06
   186ca:	b7 83       	std	Z+7, r27	; 0x07
   186cc:	89 e3       	ldi	r24, 0x39	; 57
   186ce:	9f e3       	ldi	r25, 0x3F	; 63
   186d0:	a0 e0       	ldi	r26, 0x00	; 0
   186d2:	81 83       	std	Z+1, r24	; 0x01
   186d4:	92 83       	std	Z+2, r25	; 0x02
   186d6:	a3 83       	std	Z+3, r26	; 0x03
   186d8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   186dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   186de:	9d 8d       	ldd	r25, Y+29	; 0x1d
   186e0:	09 2e       	mov	r0, r25
   186e2:	00 0c       	add	r0, r0
   186e4:	aa 0b       	sbc	r26, r26
   186e6:	bb 0b       	sbc	r27, r27
   186e8:	ed b7       	in	r30, 0x3d	; 61
   186ea:	fe b7       	in	r31, 0x3e	; 62
   186ec:	84 83       	std	Z+4, r24	; 0x04
   186ee:	95 83       	std	Z+5, r25	; 0x05
   186f0:	a6 83       	std	Z+6, r26	; 0x06
   186f2:	b7 83       	std	Z+7, r27	; 0x07
   186f4:	8c e1       	ldi	r24, 0x1C	; 28
   186f6:	9f e3       	ldi	r25, 0x3F	; 63
   186f8:	a0 e0       	ldi	r26, 0x00	; 0
   186fa:	81 83       	std	Z+1, r24	; 0x01
   186fc:	92 83       	std	Z+2, r25	; 0x02
   186fe:	a3 83       	std	Z+3, r26	; 0x03
   18700:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18704:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18706:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18708:	09 2e       	mov	r0, r25
   1870a:	00 0c       	add	r0, r0
   1870c:	aa 0b       	sbc	r26, r26
   1870e:	bb 0b       	sbc	r27, r27
   18710:	ed b7       	in	r30, 0x3d	; 61
   18712:	fe b7       	in	r31, 0x3e	; 62
   18714:	84 83       	std	Z+4, r24	; 0x04
   18716:	95 83       	std	Z+5, r25	; 0x05
   18718:	a6 83       	std	Z+6, r26	; 0x06
   1871a:	b7 83       	std	Z+7, r27	; 0x07
   1871c:	8f ef       	ldi	r24, 0xFF	; 255
   1871e:	9e e3       	ldi	r25, 0x3E	; 62
   18720:	a0 e0       	ldi	r26, 0x00	; 0
   18722:	81 83       	std	Z+1, r24	; 0x01
   18724:	92 83       	std	Z+2, r25	; 0x02
   18726:	a3 83       	std	Z+3, r26	; 0x03
   18728:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1872c:	ce 01       	movw	r24, r28
   1872e:	86 96       	adiw	r24, 0x26	; 38
   18730:	ed b7       	in	r30, 0x3d	; 61
   18732:	fe b7       	in	r31, 0x3e	; 62
   18734:	95 83       	std	Z+5, r25	; 0x05
   18736:	84 83       	std	Z+4, r24	; 0x04
   18738:	85 ee       	ldi	r24, 0xE5	; 229
   1873a:	9e e3       	ldi	r25, 0x3E	; 62
   1873c:	a0 e0       	ldi	r26, 0x00	; 0
   1873e:	81 83       	std	Z+1, r24	; 0x01
   18740:	92 83       	std	Z+2, r25	; 0x02
   18742:	a3 83       	std	Z+3, r26	; 0x03
   18744:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18748:	8c a1       	ldd	r24, Y+36	; 0x24
   1874a:	9d a1       	ldd	r25, Y+37	; 0x25
   1874c:	ed b7       	in	r30, 0x3d	; 61
   1874e:	fe b7       	in	r31, 0x3e	; 62
   18750:	95 83       	std	Z+5, r25	; 0x05
   18752:	84 83       	std	Z+4, r24	; 0x04
   18754:	89 ec       	ldi	r24, 0xC9	; 201
   18756:	9e e3       	ldi	r25, 0x3E	; 62
   18758:	a0 e0       	ldi	r26, 0x00	; 0
   1875a:	81 83       	std	Z+1, r24	; 0x01
   1875c:	92 83       	std	Z+2, r25	; 0x02
   1875e:	a3 83       	std	Z+3, r26	; 0x03
   18760:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18764:	8d a5       	ldd	r24, Y+45	; 0x2d
   18766:	9e a5       	ldd	r25, Y+46	; 0x2e
   18768:	af a5       	ldd	r26, Y+47	; 0x2f
   1876a:	b8 a9       	ldd	r27, Y+48	; 0x30
   1876c:	ed b7       	in	r30, 0x3d	; 61
   1876e:	fe b7       	in	r31, 0x3e	; 62
   18770:	84 83       	std	Z+4, r24	; 0x04
   18772:	95 83       	std	Z+5, r25	; 0x05
   18774:	a6 83       	std	Z+6, r26	; 0x06
   18776:	b7 83       	std	Z+7, r27	; 0x07
   18778:	8c ea       	ldi	r24, 0xAC	; 172
   1877a:	9e e3       	ldi	r25, 0x3E	; 62
   1877c:	a0 e0       	ldi	r26, 0x00	; 0
   1877e:	81 83       	std	Z+1, r24	; 0x01
   18780:	92 83       	std	Z+2, r25	; 0x02
   18782:	a3 83       	std	Z+3, r26	; 0x03
   18784:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18788:	8d a9       	ldd	r24, Y+53	; 0x35
   1878a:	9e a9       	ldd	r25, Y+54	; 0x36
   1878c:	af a9       	ldd	r26, Y+55	; 0x37
   1878e:	b8 ad       	ldd	r27, Y+56	; 0x38
   18790:	ed b7       	in	r30, 0x3d	; 61
   18792:	fe b7       	in	r31, 0x3e	; 62
   18794:	84 83       	std	Z+4, r24	; 0x04
   18796:	95 83       	std	Z+5, r25	; 0x05
   18798:	a6 83       	std	Z+6, r26	; 0x06
   1879a:	b7 83       	std	Z+7, r27	; 0x07
   1879c:	8f e8       	ldi	r24, 0x8F	; 143
   1879e:	9e e3       	ldi	r25, 0x3E	; 62
   187a0:	a0 e0       	ldi	r26, 0x00	; 0
   187a2:	81 83       	std	Z+1, r24	; 0x01
   187a4:	92 83       	std	Z+2, r25	; 0x02
   187a6:	a3 83       	std	Z+3, r26	; 0x03
   187a8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   187ac:	89 a9       	ldd	r24, Y+49	; 0x31
   187ae:	9a a9       	ldd	r25, Y+50	; 0x32
   187b0:	ed b7       	in	r30, 0x3d	; 61
   187b2:	fe b7       	in	r31, 0x3e	; 62
   187b4:	95 83       	std	Z+5, r25	; 0x05
   187b6:	84 83       	std	Z+4, r24	; 0x04
   187b8:	83 e7       	ldi	r24, 0x73	; 115
   187ba:	9e e3       	ldi	r25, 0x3E	; 62
   187bc:	a0 e0       	ldi	r26, 0x00	; 0
   187be:	81 83       	std	Z+1, r24	; 0x01
   187c0:	92 83       	std	Z+2, r25	; 0x02
   187c2:	a3 83       	std	Z+3, r26	; 0x03
   187c4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   187c8:	89 ad       	ldd	r24, Y+57	; 0x39
   187ca:	9a ad       	ldd	r25, Y+58	; 0x3a
   187cc:	ed b7       	in	r30, 0x3d	; 61
   187ce:	fe b7       	in	r31, 0x3e	; 62
   187d0:	95 83       	std	Z+5, r25	; 0x05
   187d2:	84 83       	std	Z+4, r24	; 0x04
   187d4:	87 e5       	ldi	r24, 0x57	; 87
   187d6:	9e e3       	ldi	r25, 0x3E	; 62
   187d8:	a0 e0       	ldi	r26, 0x00	; 0
   187da:	81 83       	std	Z+1, r24	; 0x01
   187dc:	92 83       	std	Z+2, r25	; 0x02
   187de:	a3 83       	std	Z+3, r26	; 0x03
   187e0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   187e4:	ce 01       	movw	r24, r28
   187e6:	87 5b       	subi	r24, 0xB7	; 183
   187e8:	9f 4f       	sbci	r25, 0xFF	; 255
   187ea:	ab de       	rcall	.-682    	; 0x18542 <lif_lifbcd2timestr>
   187ec:	ed b7       	in	r30, 0x3d	; 61
   187ee:	fe b7       	in	r31, 0x3e	; 62
   187f0:	95 83       	std	Z+5, r25	; 0x05
   187f2:	84 83       	std	Z+4, r24	; 0x04
   187f4:	8d e3       	ldi	r24, 0x3D	; 61
   187f6:	9e e3       	ldi	r25, 0x3E	; 62
   187f8:	a0 e0       	ldi	r26, 0x00	; 0
   187fa:	81 83       	std	Z+1, r24	; 0x01
   187fc:	92 83       	std	Z+2, r25	; 0x02
   187fe:	a3 83       	std	Z+3, r26	; 0x03
   18800:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18804:	ce 01       	movw	r24, r28
   18806:	81 5b       	subi	r24, 0xB1	; 177
   18808:	9f 4f       	sbci	r25, 0xFF	; 255
   1880a:	ed b7       	in	r30, 0x3d	; 61
   1880c:	fe b7       	in	r31, 0x3e	; 62
   1880e:	95 83       	std	Z+5, r25	; 0x05
   18810:	84 83       	std	Z+4, r24	; 0x04
   18812:	83 e2       	ldi	r24, 0x23	; 35
   18814:	9e e3       	ldi	r25, 0x3E	; 62
   18816:	a0 e0       	ldi	r26, 0x00	; 0
   18818:	81 83       	std	Z+1, r24	; 0x01
   1881a:	92 83       	std	Z+2, r25	; 0x02
   1881c:	a3 83       	std	Z+3, r26	; 0x03
   1881e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18822:	fe 01       	movw	r30, r28
   18824:	e6 5a       	subi	r30, 0xA6	; 166
   18826:	ff 4f       	sbci	r31, 0xFF	; 255
   18828:	80 81       	ld	r24, Z
   1882a:	91 81       	ldd	r25, Z+1	; 0x01
   1882c:	ed b7       	in	r30, 0x3d	; 61
   1882e:	fe b7       	in	r31, 0x3e	; 62
   18830:	95 83       	std	Z+5, r25	; 0x05
   18832:	84 83       	std	Z+4, r24	; 0x04
   18834:	87 e0       	ldi	r24, 0x07	; 7
   18836:	9e e3       	ldi	r25, 0x3E	; 62
   18838:	a0 e0       	ldi	r26, 0x00	; 0
   1883a:	81 83       	std	Z+1, r24	; 0x01
   1883c:	92 83       	std	Z+2, r25	; 0x02
   1883e:	a3 83       	std	Z+3, r26	; 0x03
   18840:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18844:	fe 01       	movw	r30, r28
   18846:	e6 59       	subi	r30, 0x96	; 150
   18848:	ff 4f       	sbci	r31, 0xFF	; 255
   1884a:	80 81       	ld	r24, Z
   1884c:	91 81       	ldd	r25, Z+1	; 0x01
   1884e:	ed b7       	in	r30, 0x3d	; 61
   18850:	fe b7       	in	r31, 0x3e	; 62
   18852:	95 83       	std	Z+5, r25	; 0x05
   18854:	84 83       	std	Z+4, r24	; 0x04
   18856:	8b ee       	ldi	r24, 0xEB	; 235
   18858:	9d e3       	ldi	r25, 0x3D	; 61
   1885a:	a0 e0       	ldi	r26, 0x00	; 0
   1885c:	81 83       	std	Z+1, r24	; 0x01
   1885e:	92 83       	std	Z+2, r25	; 0x02
   18860:	a3 83       	std	Z+3, r26	; 0x03
   18862:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18866:	fe 01       	movw	r30, r28
   18868:	e4 5a       	subi	r30, 0xA4	; 164
   1886a:	ff 4f       	sbci	r31, 0xFF	; 255
   1886c:	80 81       	ld	r24, Z
   1886e:	91 81       	ldd	r25, Z+1	; 0x01
   18870:	a2 81       	ldd	r26, Z+2	; 0x02
   18872:	b3 81       	ldd	r27, Z+3	; 0x03
   18874:	ed b7       	in	r30, 0x3d	; 61
   18876:	fe b7       	in	r31, 0x3e	; 62
   18878:	84 83       	std	Z+4, r24	; 0x04
   1887a:	95 83       	std	Z+5, r25	; 0x05
   1887c:	a6 83       	std	Z+6, r26	; 0x06
   1887e:	b7 83       	std	Z+7, r27	; 0x07
   18880:	8e ec       	ldi	r24, 0xCE	; 206
   18882:	9d e3       	ldi	r25, 0x3D	; 61
   18884:	a0 e0       	ldi	r26, 0x00	; 0
   18886:	81 83       	std	Z+1, r24	; 0x01
   18888:	92 83       	std	Z+2, r25	; 0x02
   1888a:	a3 83       	std	Z+3, r26	; 0x03
   1888c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18890:	fe 01       	movw	r30, r28
   18892:	e0 5a       	subi	r30, 0xA0	; 160
   18894:	ff 4f       	sbci	r31, 0xFF	; 255
   18896:	80 81       	ld	r24, Z
   18898:	91 81       	ldd	r25, Z+1	; 0x01
   1889a:	a2 81       	ldd	r26, Z+2	; 0x02
   1889c:	b3 81       	ldd	r27, Z+3	; 0x03
   1889e:	ed b7       	in	r30, 0x3d	; 61
   188a0:	fe b7       	in	r31, 0x3e	; 62
   188a2:	84 83       	std	Z+4, r24	; 0x04
   188a4:	95 83       	std	Z+5, r25	; 0x05
   188a6:	a6 83       	std	Z+6, r26	; 0x06
   188a8:	b7 83       	std	Z+7, r27	; 0x07
   188aa:	81 eb       	ldi	r24, 0xB1	; 177
   188ac:	9d e3       	ldi	r25, 0x3D	; 61
   188ae:	a0 e0       	ldi	r26, 0x00	; 0
   188b0:	81 83       	std	Z+1, r24	; 0x01
   188b2:	92 83       	std	Z+2, r25	; 0x02
   188b4:	a3 83       	std	Z+3, r26	; 0x03
   188b6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   188ba:	fe 01       	movw	r30, r28
   188bc:	e4 59       	subi	r30, 0x94	; 148
   188be:	ff 4f       	sbci	r31, 0xFF	; 255
   188c0:	80 81       	ld	r24, Z
   188c2:	91 81       	ldd	r25, Z+1	; 0x01
   188c4:	a0 e0       	ldi	r26, 0x00	; 0
   188c6:	b0 e0       	ldi	r27, 0x00	; 0
   188c8:	ed b7       	in	r30, 0x3d	; 61
   188ca:	fe b7       	in	r31, 0x3e	; 62
   188cc:	84 83       	std	Z+4, r24	; 0x04
   188ce:	95 83       	std	Z+5, r25	; 0x05
   188d0:	a6 83       	std	Z+6, r26	; 0x06
   188d2:	b7 83       	std	Z+7, r27	; 0x07
   188d4:	84 e9       	ldi	r24, 0x94	; 148
   188d6:	9d e3       	ldi	r25, 0x3D	; 61
   188d8:	a0 e0       	ldi	r26, 0x00	; 0
   188da:	81 83       	std	Z+1, r24	; 0x01
   188dc:	92 83       	std	Z+2, r25	; 0x02
   188de:	a3 83       	std	Z+3, r26	; 0x03
   188e0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   188e4:	fe 01       	movw	r30, r28
   188e6:	e2 59       	subi	r30, 0x92	; 146
   188e8:	ff 4f       	sbci	r31, 0xFF	; 255
   188ea:	80 81       	ld	r24, Z
   188ec:	91 81       	ldd	r25, Z+1	; 0x01
   188ee:	ed b7       	in	r30, 0x3d	; 61
   188f0:	fe b7       	in	r31, 0x3e	; 62
   188f2:	95 83       	std	Z+5, r25	; 0x05
   188f4:	84 83       	std	Z+4, r24	; 0x04
   188f6:	88 e7       	ldi	r24, 0x78	; 120
   188f8:	9d e3       	ldi	r25, 0x3D	; 61
   188fa:	a0 e0       	ldi	r26, 0x00	; 0
   188fc:	81 83       	std	Z+1, r24	; 0x01
   188fe:	92 83       	std	Z+2, r25	; 0x02
   18900:	a3 83       	std	Z+3, r26	; 0x03
   18902:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18906:	ce 01       	movw	r24, r28
   18908:	8c 59       	subi	r24, 0x9C	; 156
   1890a:	9f 4f       	sbci	r25, 0xFF	; 255
   1890c:	1a de       	rcall	.-972    	; 0x18542 <lif_lifbcd2timestr>
   1890e:	ed b7       	in	r30, 0x3d	; 61
   18910:	fe b7       	in	r31, 0x3e	; 62
   18912:	95 83       	std	Z+5, r25	; 0x05
   18914:	84 83       	std	Z+4, r24	; 0x04
   18916:	8e e5       	ldi	r24, 0x5E	; 94
   18918:	9d e3       	ldi	r25, 0x3D	; 61
   1891a:	a0 e0       	ldi	r26, 0x00	; 0
   1891c:	81 83       	std	Z+1, r24	; 0x01
   1891e:	92 83       	std	Z+2, r25	; 0x02
   18920:	a3 83       	std	Z+3, r26	; 0x03
   18922:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18926:	8c e5       	ldi	r24, 0x5C	; 92
   18928:	9d e3       	ldi	r25, 0x3D	; 61
   1892a:	a0 e0       	ldi	r26, 0x00	; 0
   1892c:	ed b7       	in	r30, 0x3d	; 61
   1892e:	fe b7       	in	r31, 0x3e	; 62
   18930:	81 83       	std	Z+1, r24	; 0x01
   18932:	92 83       	std	Z+2, r25	; 0x02
   18934:	a3 83       	std	Z+3, r26	; 0x03
   18936:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1893a:	cd b7       	in	r28, 0x3d	; 61
   1893c:	de b7       	in	r29, 0x3e	; 62
   1893e:	27 96       	adiw	r28, 0x07	; 7
   18940:	e2 e0       	ldi	r30, 0x02	; 2
   18942:	0c 94 84 e2 	jmp	0x1c508	; 0x1c508 <__epilogue_restores__+0x20>

00018946 <lif_check_volume>:
   18946:	0f 93       	push	r16
   18948:	1f 93       	push	r17
   1894a:	cf 93       	push	r28
   1894c:	df 93       	push	r29
   1894e:	ad b7       	in	r26, 0x3d	; 61
   18950:	be b7       	in	r27, 0x3e	; 62
   18952:	17 97       	sbiw	r26, 0x07	; 7
   18954:	0f b6       	in	r0, 0x3f	; 63
   18956:	f8 94       	cli
   18958:	be bf       	out	0x3e, r27	; 62
   1895a:	0f be       	out	0x3f, r0	; 63
   1895c:	ad bf       	out	0x3d, r26	; 61
   1895e:	ec 01       	movw	r28, r24
   18960:	86 96       	adiw	r24, 0x26	; 38
   18962:	e0 da       	rcall	.-2624   	; 0x17f24 <lif_checkname>
   18964:	89 2b       	or	r24, r25
   18966:	89 f4       	brne	.+34     	; 0x1898a <lif_check_volume+0x44>
   18968:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1896c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18970:	92 ff       	sbrs	r25, 2
   18972:	0e c0       	rjmp	.+28     	; 0x18990 <lif_check_volume+0x4a>
   18974:	8d e3       	ldi	r24, 0x3D	; 61
   18976:	9d e3       	ldi	r25, 0x3D	; 61
   18978:	a0 e0       	ldi	r26, 0x00	; 0
   1897a:	ed b7       	in	r30, 0x3d	; 61
   1897c:	fe b7       	in	r31, 0x3e	; 62
   1897e:	81 83       	std	Z+1, r24	; 0x01
   18980:	92 83       	std	Z+2, r25	; 0x02
   18982:	a3 83       	std	Z+3, r26	; 0x03
   18984:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18988:	03 c0       	rjmp	.+6      	; 0x18990 <lif_check_volume+0x4a>
   1898a:	81 e0       	ldi	r24, 0x01	; 1
   1898c:	90 e0       	ldi	r25, 0x00	; 0
   1898e:	02 c0       	rjmp	.+4      	; 0x18994 <lif_check_volume+0x4e>
   18990:	80 e0       	ldi	r24, 0x00	; 0
   18992:	90 e0       	ldi	r25, 0x00	; 0
   18994:	29 a9       	ldd	r18, Y+49	; 0x31
   18996:	3a a9       	ldd	r19, Y+50	; 0x32
   18998:	21 15       	cp	r18, r1
   1899a:	f0 e1       	ldi	r31, 0x10	; 16
   1899c:	3f 07       	cpc	r19, r31
   1899e:	a1 f0       	breq	.+40     	; 0x189c8 <lif_check_volume+0x82>
   189a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189a4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189a8:	92 ff       	sbrs	r25, 2
   189aa:	0c c0       	rjmp	.+24     	; 0x189c4 <lif_check_volume+0x7e>
   189ac:	ed b7       	in	r30, 0x3d	; 61
   189ae:	fe b7       	in	r31, 0x3e	; 62
   189b0:	35 83       	std	Z+5, r19	; 0x05
   189b2:	24 83       	std	Z+4, r18	; 0x04
   189b4:	84 e0       	ldi	r24, 0x04	; 4
   189b6:	9d e3       	ldi	r25, 0x3D	; 61
   189b8:	a0 e0       	ldi	r26, 0x00	; 0
   189ba:	81 83       	std	Z+1, r24	; 0x01
   189bc:	92 83       	std	Z+2, r25	; 0x02
   189be:	a3 83       	std	Z+3, r26	; 0x03
   189c0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   189c4:	80 e0       	ldi	r24, 0x00	; 0
   189c6:	90 e0       	ldi	r25, 0x00	; 0
   189c8:	29 ad       	ldd	r18, Y+57	; 0x39
   189ca:	3a ad       	ldd	r19, Y+58	; 0x3a
   189cc:	22 30       	cpi	r18, 0x02	; 2
   189ce:	31 05       	cpc	r19, r1
   189d0:	a0 f0       	brcs	.+40     	; 0x189fa <lif_check_volume+0xb4>
   189d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189d6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189da:	92 ff       	sbrs	r25, 2
   189dc:	0c c0       	rjmp	.+24     	; 0x189f6 <lif_check_volume+0xb0>
   189de:	ed b7       	in	r30, 0x3d	; 61
   189e0:	fe b7       	in	r31, 0x3e	; 62
   189e2:	35 83       	std	Z+5, r19	; 0x05
   189e4:	24 83       	std	Z+4, r18	; 0x04
   189e6:	8c ee       	ldi	r24, 0xEC	; 236
   189e8:	9c e3       	ldi	r25, 0x3C	; 60
   189ea:	a0 e0       	ldi	r26, 0x00	; 0
   189ec:	81 83       	std	Z+1, r24	; 0x01
   189ee:	92 83       	std	Z+2, r25	; 0x02
   189f0:	a3 83       	std	Z+3, r26	; 0x03
   189f2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   189f6:	80 e0       	ldi	r24, 0x00	; 0
   189f8:	90 e0       	ldi	r25, 0x00	; 0
   189fa:	2b a9       	ldd	r18, Y+51	; 0x33
   189fc:	3c a9       	ldd	r19, Y+52	; 0x34
   189fe:	23 2b       	or	r18, r19
   18a00:	91 f0       	breq	.+36     	; 0x18a26 <lif_check_volume+0xe0>
   18a02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a06:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a0a:	92 ff       	sbrs	r25, 2
   18a0c:	0a c0       	rjmp	.+20     	; 0x18a22 <lif_check_volume+0xdc>
   18a0e:	83 eb       	ldi	r24, 0xB3	; 179
   18a10:	9c e3       	ldi	r25, 0x3C	; 60
   18a12:	a0 e0       	ldi	r26, 0x00	; 0
   18a14:	ed b7       	in	r30, 0x3d	; 61
   18a16:	fe b7       	in	r31, 0x3e	; 62
   18a18:	81 83       	std	Z+1, r24	; 0x01
   18a1a:	92 83       	std	Z+2, r25	; 0x02
   18a1c:	a3 83       	std	Z+3, r26	; 0x03
   18a1e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18a22:	80 e0       	ldi	r24, 0x00	; 0
   18a24:	90 e0       	ldi	r25, 0x00	; 0
   18a26:	2b ad       	ldd	r18, Y+59	; 0x3b
   18a28:	3c ad       	ldd	r19, Y+60	; 0x3c
   18a2a:	23 2b       	or	r18, r19
   18a2c:	91 f0       	breq	.+36     	; 0x18a52 <lif_check_volume+0x10c>
   18a2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a32:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a36:	92 ff       	sbrs	r25, 2
   18a38:	0a c0       	rjmp	.+20     	; 0x18a4e <lif_check_volume+0x108>
   18a3a:	8a e7       	ldi	r24, 0x7A	; 122
   18a3c:	9c e3       	ldi	r25, 0x3C	; 60
   18a3e:	a0 e0       	ldi	r26, 0x00	; 0
   18a40:	ed b7       	in	r30, 0x3d	; 61
   18a42:	fe b7       	in	r31, 0x3e	; 62
   18a44:	81 83       	std	Z+1, r24	; 0x01
   18a46:	92 83       	std	Z+2, r25	; 0x02
   18a48:	a3 83       	std	Z+3, r26	; 0x03
   18a4a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18a4e:	80 e0       	ldi	r24, 0x00	; 0
   18a50:	90 e0       	ldi	r25, 0x00	; 0
   18a52:	4d a5       	ldd	r20, Y+45	; 0x2d
   18a54:	5e a5       	ldd	r21, Y+46	; 0x2e
   18a56:	6f a5       	ldd	r22, Y+47	; 0x2f
   18a58:	78 a9       	ldd	r23, Y+48	; 0x30
   18a5a:	45 2b       	or	r20, r21
   18a5c:	46 2b       	or	r20, r22
   18a5e:	47 2b       	or	r20, r23
   18a60:	b1 f4       	brne	.+44     	; 0x18a8e <lif_check_volume+0x148>
   18a62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a66:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a6a:	92 ff       	sbrs	r25, 2
   18a6c:	0e c0       	rjmp	.+28     	; 0x18a8a <lif_check_volume+0x144>
   18a6e:	ed b7       	in	r30, 0x3d	; 61
   18a70:	fe b7       	in	r31, 0x3e	; 62
   18a72:	14 82       	std	Z+4, r1	; 0x04
   18a74:	15 82       	std	Z+5, r1	; 0x05
   18a76:	16 82       	std	Z+6, r1	; 0x06
   18a78:	17 82       	std	Z+7, r1	; 0x07
   18a7a:	85 e5       	ldi	r24, 0x55	; 85
   18a7c:	9c e3       	ldi	r25, 0x3C	; 60
   18a7e:	a0 e0       	ldi	r26, 0x00	; 0
   18a80:	81 83       	std	Z+1, r24	; 0x01
   18a82:	92 83       	std	Z+2, r25	; 0x02
   18a84:	a3 83       	std	Z+3, r26	; 0x03
   18a86:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18a8a:	80 e0       	ldi	r24, 0x00	; 0
   18a8c:	90 e0       	ldi	r25, 0x00	; 0
   18a8e:	4d a9       	ldd	r20, Y+53	; 0x35
   18a90:	5e a9       	ldd	r21, Y+54	; 0x36
   18a92:	6f a9       	ldd	r22, Y+55	; 0x37
   18a94:	78 ad       	ldd	r23, Y+56	; 0x38
   18a96:	45 2b       	or	r20, r21
   18a98:	46 2b       	or	r20, r22
   18a9a:	47 2b       	or	r20, r23
   18a9c:	91 f4       	brne	.+36     	; 0x18ac2 <lif_check_volume+0x17c>
   18a9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18aa2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18aa6:	92 ff       	sbrs	r25, 2
   18aa8:	0a c0       	rjmp	.+20     	; 0x18abe <lif_check_volume+0x178>
   18aaa:	86 e2       	ldi	r24, 0x26	; 38
   18aac:	9c e3       	ldi	r25, 0x3C	; 60
   18aae:	a0 e0       	ldi	r26, 0x00	; 0
   18ab0:	ed b7       	in	r30, 0x3d	; 61
   18ab2:	fe b7       	in	r31, 0x3e	; 62
   18ab4:	81 83       	std	Z+1, r24	; 0x01
   18ab6:	92 83       	std	Z+2, r25	; 0x02
   18ab8:	a3 83       	std	Z+3, r26	; 0x03
   18aba:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18abe:	80 e0       	ldi	r24, 0x00	; 0
   18ac0:	90 e0       	ldi	r25, 0x00	; 0
   18ac2:	0d a5       	ldd	r16, Y+45	; 0x2d
   18ac4:	1e a5       	ldd	r17, Y+46	; 0x2e
   18ac6:	2f a5       	ldd	r18, Y+47	; 0x2f
   18ac8:	38 a9       	ldd	r19, Y+48	; 0x30
   18aca:	4d a9       	ldd	r20, Y+53	; 0x35
   18acc:	5e a9       	ldd	r21, Y+54	; 0x36
   18ace:	6f a9       	ldd	r22, Y+55	; 0x37
   18ad0:	78 ad       	ldd	r23, Y+56	; 0x38
   18ad2:	40 0f       	add	r20, r16
   18ad4:	51 1f       	adc	r21, r17
   18ad6:	62 1f       	adc	r22, r18
   18ad8:	73 1f       	adc	r23, r19
   18ada:	0c 81       	ldd	r16, Y+4	; 0x04
   18adc:	1d 81       	ldd	r17, Y+5	; 0x05
   18ade:	2e 81       	ldd	r18, Y+6	; 0x06
   18ae0:	3f 81       	ldd	r19, Y+7	; 0x07
   18ae2:	04 17       	cp	r16, r20
   18ae4:	15 07       	cpc	r17, r21
   18ae6:	26 07       	cpc	r18, r22
   18ae8:	37 07       	cpc	r19, r23
   18aea:	90 f4       	brcc	.+36     	; 0x18b10 <lif_check_volume+0x1ca>
   18aec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18af0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18af4:	92 ff       	sbrs	r25, 2
   18af6:	0a c0       	rjmp	.+20     	; 0x18b0c <lif_check_volume+0x1c6>
   18af8:	8a ef       	ldi	r24, 0xFA	; 250
   18afa:	9b e3       	ldi	r25, 0x3B	; 59
   18afc:	a0 e0       	ldi	r26, 0x00	; 0
   18afe:	ed b7       	in	r30, 0x3d	; 61
   18b00:	fe b7       	in	r31, 0x3e	; 62
   18b02:	81 83       	std	Z+1, r24	; 0x01
   18b04:	92 83       	std	Z+2, r25	; 0x02
   18b06:	a3 83       	std	Z+3, r26	; 0x03
   18b08:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18b0c:	80 e0       	ldi	r24, 0x00	; 0
   18b0e:	90 e0       	ldi	r25, 0x00	; 0
   18b10:	cd b7       	in	r28, 0x3d	; 61
   18b12:	de b7       	in	r29, 0x3e	; 62
   18b14:	27 96       	adiw	r28, 0x07	; 7
   18b16:	e4 e0       	ldi	r30, 0x04	; 4
   18b18:	0c 94 82 e2 	jmp	0x1c504	; 0x1c504 <__epilogue_restores__+0x1c>

00018b1c <lif_check_dir>:
   18b1c:	a5 e1       	ldi	r26, 0x15	; 21
   18b1e:	b0 e0       	ldi	r27, 0x00	; 0
   18b20:	e4 e9       	ldi	r30, 0x94	; 148
   18b22:	f5 ec       	ldi	r31, 0xC5	; 197
   18b24:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   18b28:	6c 01       	movw	r12, r24
   18b2a:	2a e5       	ldi	r18, 0x5A	; 90
   18b2c:	c2 0e       	add	r12, r18
   18b2e:	d1 1c       	adc	r13, r1
   18b30:	f6 01       	movw	r30, r12
   18b32:	20 81       	ld	r18, Z
   18b34:	31 81       	ldd	r19, Z+1	; 0x01
   18b36:	21 50       	subi	r18, 0x01	; 1
   18b38:	31 09       	sbc	r19, r1
   18b3a:	2e 3f       	cpi	r18, 0xFE	; 254
   18b3c:	3f 4f       	sbci	r19, 0xFF	; 255
   18b3e:	08 f0       	brcs	.+2      	; 0x18b42 <lif_check_dir+0x26>
   18b40:	9a c1       	rjmp	.+820    	; 0x18e76 <lif_check_dir+0x35a>
   18b42:	9d 8b       	std	Y+21, r25	; 0x15
   18b44:	8c 8b       	std	Y+20, r24	; 0x14
   18b46:	7c 01       	movw	r14, r24
   18b48:	2f e4       	ldi	r18, 0x4F	; 79
   18b4a:	e2 0e       	add	r14, r18
   18b4c:	f1 1c       	adc	r15, r1
   18b4e:	c7 01       	movw	r24, r14
   18b50:	e9 d9       	rcall	.-3118   	; 0x17f24 <lif_checkname>
   18b52:	89 2b       	or	r24, r25
   18b54:	99 f4       	brne	.+38     	; 0x18b7c <lif_check_dir+0x60>
   18b56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b5a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b5e:	92 ff       	sbrs	r25, 2
   18b60:	0f c0       	rjmp	.+30     	; 0x18b80 <lif_check_dir+0x64>
   18b62:	ed b7       	in	r30, 0x3d	; 61
   18b64:	fe b7       	in	r31, 0x3e	; 62
   18b66:	f5 82       	std	Z+5, r15	; 0x05
   18b68:	e4 82       	std	Z+4, r14	; 0x04
   18b6a:	89 ed       	ldi	r24, 0xD9	; 217
   18b6c:	9b e3       	ldi	r25, 0x3B	; 59
   18b6e:	a0 e0       	ldi	r26, 0x00	; 0
   18b70:	81 83       	std	Z+1, r24	; 0x01
   18b72:	92 83       	std	Z+2, r25	; 0x02
   18b74:	a3 83       	std	Z+3, r26	; 0x03
   18b76:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18b7a:	02 c0       	rjmp	.+4      	; 0x18b80 <lif_check_dir+0x64>
   18b7c:	01 e0       	ldi	r16, 0x01	; 1
   18b7e:	01 c0       	rjmp	.+2      	; 0x18b82 <lif_check_dir+0x66>
   18b80:	00 e0       	ldi	r16, 0x00	; 0
   18b82:	10 e0       	ldi	r17, 0x00	; 0
   18b84:	ec 89       	ldd	r30, Y+20	; 0x14
   18b86:	fd 89       	ldd	r31, Y+21	; 0x15
   18b88:	84 85       	ldd	r24, Z+12	; 0x0c
   18b8a:	95 85       	ldd	r25, Z+13	; 0x0d
   18b8c:	a6 85       	ldd	r26, Z+14	; 0x0e
   18b8e:	b7 85       	ldd	r27, Z+15	; 0x0f
   18b90:	00 97       	sbiw	r24, 0x00	; 0
   18b92:	a1 05       	cpc	r26, r1
   18b94:	b1 05       	cpc	r27, r1
   18b96:	39 f1       	breq	.+78     	; 0x18be6 <lif_check_dir+0xca>
   18b98:	e4 5a       	subi	r30, 0xA4	; 164
   18b9a:	ff 4f       	sbci	r31, 0xFF	; 255
   18b9c:	40 81       	ld	r20, Z
   18b9e:	51 81       	ldd	r21, Z+1	; 0x01
   18ba0:	62 81       	ldd	r22, Z+2	; 0x02
   18ba2:	73 81       	ldd	r23, Z+3	; 0x03
   18ba4:	48 17       	cp	r20, r24
   18ba6:	59 07       	cpc	r21, r25
   18ba8:	6a 07       	cpc	r22, r26
   18baa:	7b 07       	cpc	r23, r27
   18bac:	e0 f4       	brcc	.+56     	; 0x18be6 <lif_check_dir+0xca>
   18bae:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18bb2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bb6:	32 ff       	sbrs	r19, 2
   18bb8:	14 c0       	rjmp	.+40     	; 0x18be2 <lif_check_dir+0xc6>
   18bba:	ed b7       	in	r30, 0x3d	; 61
   18bbc:	fe b7       	in	r31, 0x3e	; 62
   18bbe:	82 87       	std	Z+10, r24	; 0x0a
   18bc0:	93 87       	std	Z+11, r25	; 0x0b
   18bc2:	a4 87       	std	Z+12, r26	; 0x0c
   18bc4:	b5 87       	std	Z+13, r27	; 0x0d
   18bc6:	46 83       	std	Z+6, r20	; 0x06
   18bc8:	57 83       	std	Z+7, r21	; 0x07
   18bca:	60 87       	std	Z+8, r22	; 0x08
   18bcc:	71 87       	std	Z+9, r23	; 0x09
   18bce:	f5 82       	std	Z+5, r15	; 0x05
   18bd0:	e4 82       	std	Z+4, r14	; 0x04
   18bd2:	85 e9       	ldi	r24, 0x95	; 149
   18bd4:	9b e3       	ldi	r25, 0x3B	; 59
   18bd6:	a0 e0       	ldi	r26, 0x00	; 0
   18bd8:	81 83       	std	Z+1, r24	; 0x01
   18bda:	92 83       	std	Z+2, r25	; 0x02
   18bdc:	a3 83       	std	Z+3, r26	; 0x03
   18bde:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18be2:	00 e0       	ldi	r16, 0x00	; 0
   18be4:	10 e0       	ldi	r17, 0x00	; 0
   18be6:	ec 89       	ldd	r30, Y+20	; 0x14
   18be8:	fd 89       	ldd	r31, Y+21	; 0x15
   18bea:	44 81       	ldd	r20, Z+4	; 0x04
   18bec:	55 81       	ldd	r21, Z+5	; 0x05
   18bee:	66 81       	ldd	r22, Z+6	; 0x06
   18bf0:	77 81       	ldd	r23, Z+7	; 0x07
   18bf2:	41 15       	cp	r20, r1
   18bf4:	51 05       	cpc	r21, r1
   18bf6:	61 05       	cpc	r22, r1
   18bf8:	71 05       	cpc	r23, r1
   18bfa:	99 f1       	breq	.+102    	; 0x18c62 <lif_check_dir+0x146>
   18bfc:	e4 5a       	subi	r30, 0xA4	; 164
   18bfe:	ff 4f       	sbci	r31, 0xFF	; 255
   18c00:	80 80       	ld	r8, Z
   18c02:	91 80       	ldd	r9, Z+1	; 0x01
   18c04:	a2 80       	ldd	r10, Z+2	; 0x02
   18c06:	b3 80       	ldd	r11, Z+3	; 0x03
   18c08:	ec 89       	ldd	r30, Y+20	; 0x14
   18c0a:	fd 89       	ldd	r31, Y+21	; 0x15
   18c0c:	e0 5a       	subi	r30, 0xA0	; 160
   18c0e:	ff 4f       	sbci	r31, 0xFF	; 255
   18c10:	80 81       	ld	r24, Z
   18c12:	91 81       	ldd	r25, Z+1	; 0x01
   18c14:	a2 81       	ldd	r26, Z+2	; 0x02
   18c16:	b3 81       	ldd	r27, Z+3	; 0x03
   18c18:	88 0d       	add	r24, r8
   18c1a:	99 1d       	adc	r25, r9
   18c1c:	aa 1d       	adc	r26, r10
   18c1e:	bb 1d       	adc	r27, r11
   18c20:	48 17       	cp	r20, r24
   18c22:	59 07       	cpc	r21, r25
   18c24:	6a 07       	cpc	r22, r26
   18c26:	7b 07       	cpc	r23, r27
   18c28:	e0 f4       	brcc	.+56     	; 0x18c62 <lif_check_dir+0x146>
   18c2a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18c2e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c32:	32 ff       	sbrs	r19, 2
   18c34:	14 c0       	rjmp	.+40     	; 0x18c5e <lif_check_dir+0x142>
   18c36:	ed b7       	in	r30, 0x3d	; 61
   18c38:	fe b7       	in	r31, 0x3e	; 62
   18c3a:	42 87       	std	Z+10, r20	; 0x0a
   18c3c:	53 87       	std	Z+11, r21	; 0x0b
   18c3e:	64 87       	std	Z+12, r22	; 0x0c
   18c40:	75 87       	std	Z+13, r23	; 0x0d
   18c42:	86 83       	std	Z+6, r24	; 0x06
   18c44:	97 83       	std	Z+7, r25	; 0x07
   18c46:	a0 87       	std	Z+8, r26	; 0x08
   18c48:	b1 87       	std	Z+9, r27	; 0x09
   18c4a:	f5 82       	std	Z+5, r15	; 0x05
   18c4c:	e4 82       	std	Z+4, r14	; 0x04
   18c4e:	84 e5       	ldi	r24, 0x54	; 84
   18c50:	9b e3       	ldi	r25, 0x3B	; 59
   18c52:	a0 e0       	ldi	r26, 0x00	; 0
   18c54:	81 83       	std	Z+1, r24	; 0x01
   18c56:	92 83       	std	Z+2, r25	; 0x02
   18c58:	a3 83       	std	Z+3, r26	; 0x03
   18c5a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18c5e:	00 e0       	ldi	r16, 0x00	; 0
   18c60:	10 e0       	ldi	r17, 0x00	; 0
   18c62:	ec 89       	ldd	r30, Y+20	; 0x14
   18c64:	fd 89       	ldd	r31, Y+21	; 0x15
   18c66:	e6 59       	subi	r30, 0x96	; 150
   18c68:	ff 4f       	sbci	r31, 0xFF	; 255
   18c6a:	80 81       	ld	r24, Z
   18c6c:	91 81       	ldd	r25, Z+1	; 0x01
   18c6e:	81 30       	cpi	r24, 0x01	; 1
   18c70:	f0 e8       	ldi	r31, 0x80	; 128
   18c72:	9f 07       	cpc	r25, r31
   18c74:	b1 f0       	breq	.+44     	; 0x18ca2 <lif_check_dir+0x186>
   18c76:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18c7a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c7e:	32 ff       	sbrs	r19, 2
   18c80:	0e c0       	rjmp	.+28     	; 0x18c9e <lif_check_dir+0x182>
   18c82:	ed b7       	in	r30, 0x3d	; 61
   18c84:	fe b7       	in	r31, 0x3e	; 62
   18c86:	97 83       	std	Z+7, r25	; 0x07
   18c88:	86 83       	std	Z+6, r24	; 0x06
   18c8a:	f5 82       	std	Z+5, r15	; 0x05
   18c8c:	e4 82       	std	Z+4, r14	; 0x04
   18c8e:	86 e2       	ldi	r24, 0x26	; 38
   18c90:	9b e3       	ldi	r25, 0x3B	; 59
   18c92:	a0 e0       	ldi	r26, 0x00	; 0
   18c94:	81 83       	std	Z+1, r24	; 0x01
   18c96:	92 83       	std	Z+2, r25	; 0x02
   18c98:	a3 83       	std	Z+3, r26	; 0x03
   18c9a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18c9e:	00 e0       	ldi	r16, 0x00	; 0
   18ca0:	10 e0       	ldi	r17, 0x00	; 0
   18ca2:	f6 01       	movw	r30, r12
   18ca4:	80 81       	ld	r24, Z
   18ca6:	91 81       	ldd	r25, Z+1	; 0x01
   18ca8:	8c 7f       	andi	r24, 0xFC	; 252
   18caa:	80 31       	cpi	r24, 0x10	; 16
   18cac:	90 4e       	sbci	r25, 0xE0	; 224
   18cae:	09 f0       	breq	.+2      	; 0x18cb2 <lif_check_dir+0x196>
   18cb0:	b3 c0       	rjmp	.+358    	; 0x18e18 <lif_check_dir+0x2fc>
   18cb2:	cc 88       	ldd	r12, Y+20	; 0x14
   18cb4:	dd 88       	ldd	r13, Y+21	; 0x15
   18cb6:	2c e6       	ldi	r18, 0x6C	; 108
   18cb8:	c2 0e       	add	r12, r18
   18cba:	d1 1c       	adc	r13, r1
   18cbc:	f6 01       	movw	r30, r12
   18cbe:	80 81       	ld	r24, Z
   18cc0:	91 81       	ldd	r25, Z+1	; 0x01
   18cc2:	00 97       	sbiw	r24, 0x00	; 0
   18cc4:	09 f4       	brne	.+2      	; 0x18cc8 <lif_check_dir+0x1ac>
   18cc6:	a8 c0       	rjmp	.+336    	; 0x18e18 <lif_check_dir+0x2fc>
   18cc8:	4c 01       	movw	r8, r24
   18cca:	a1 2c       	mov	r10, r1
   18ccc:	b1 2c       	mov	r11, r1
   18cce:	77 27       	eor	r23, r23
   18cd0:	6b 2d       	mov	r22, r11
   18cd2:	5a 2d       	mov	r21, r10
   18cd4:	49 2d       	mov	r20, r9
   18cd6:	9c 01       	movw	r18, r24
   18cd8:	33 27       	eor	r19, r19
   18cda:	3b 8b       	std	Y+19, r19	; 0x13
   18cdc:	2a 8b       	std	Y+18, r18	; 0x12
   18cde:	db 01       	movw	r26, r22
   18ce0:	ca 01       	movw	r24, r20
   18ce2:	23 2b       	or	r18, r19
   18ce4:	19 f0       	breq	.+6      	; 0x18cec <lif_check_dir+0x1d0>
   18ce6:	01 96       	adiw	r24, 0x01	; 1
   18ce8:	a1 1d       	adc	r26, r1
   18cea:	b1 1d       	adc	r27, r1
   18cec:	2c 88       	ldd	r2, Y+20	; 0x14
   18cee:	3d 88       	ldd	r3, Y+21	; 0x15
   18cf0:	30 e6       	ldi	r19, 0x60	; 96
   18cf2:	23 0e       	add	r2, r19
   18cf4:	31 1c       	adc	r3, r1
   18cf6:	f1 01       	movw	r30, r2
   18cf8:	40 80       	ld	r4, Z
   18cfa:	51 80       	ldd	r5, Z+1	; 0x01
   18cfc:	62 80       	ldd	r6, Z+2	; 0x02
   18cfe:	73 80       	ldd	r7, Z+3	; 0x03
   18d00:	48 16       	cp	r4, r24
   18d02:	59 06       	cpc	r5, r25
   18d04:	6a 06       	cpc	r6, r26
   18d06:	7b 06       	cpc	r7, r27
   18d08:	40 f5       	brcc	.+80     	; 0x18d5a <lif_check_dir+0x23e>
   18d0a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d0e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d12:	32 ff       	sbrs	r19, 2
   18d14:	20 c0       	rjmp	.+64     	; 0x18d56 <lif_check_dir+0x23a>
   18d16:	2a 89       	ldd	r18, Y+18	; 0x12
   18d18:	3b 89       	ldd	r19, Y+19	; 0x13
   18d1a:	23 2b       	or	r18, r19
   18d1c:	21 f0       	breq	.+8      	; 0x18d26 <lif_check_dir+0x20a>
   18d1e:	4f 5f       	subi	r20, 0xFF	; 255
   18d20:	5f 4f       	sbci	r21, 0xFF	; 255
   18d22:	6f 4f       	sbci	r22, 0xFF	; 255
   18d24:	7f 4f       	sbci	r23, 0xFF	; 255
   18d26:	ed b7       	in	r30, 0x3d	; 61
   18d28:	fe b7       	in	r31, 0x3e	; 62
   18d2a:	46 86       	std	Z+14, r4	; 0x0e
   18d2c:	57 86       	std	Z+15, r5	; 0x0f
   18d2e:	60 8a       	std	Z+16, r6	; 0x10
   18d30:	71 8a       	std	Z+17, r7	; 0x11
   18d32:	42 87       	std	Z+10, r20	; 0x0a
   18d34:	53 87       	std	Z+11, r21	; 0x0b
   18d36:	64 87       	std	Z+12, r22	; 0x0c
   18d38:	75 87       	std	Z+13, r23	; 0x0d
   18d3a:	86 82       	std	Z+6, r8	; 0x06
   18d3c:	97 82       	std	Z+7, r9	; 0x07
   18d3e:	a0 86       	std	Z+8, r10	; 0x08
   18d40:	b1 86       	std	Z+9, r11	; 0x09
   18d42:	f5 82       	std	Z+5, r15	; 0x05
   18d44:	e4 82       	std	Z+4, r14	; 0x04
   18d46:	8b ed       	ldi	r24, 0xDB	; 219
   18d48:	9a e3       	ldi	r25, 0x3A	; 58
   18d4a:	a0 e0       	ldi	r26, 0x00	; 0
   18d4c:	81 83       	std	Z+1, r24	; 0x01
   18d4e:	92 83       	std	Z+2, r25	; 0x02
   18d50:	a3 83       	std	Z+3, r26	; 0x03
   18d52:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18d56:	00 e0       	ldi	r16, 0x00	; 0
   18d58:	10 e0       	ldi	r17, 0x00	; 0
   18d5a:	f6 01       	movw	r30, r12
   18d5c:	20 81       	ld	r18, Z
   18d5e:	31 81       	ldd	r19, Z+1	; 0x01
   18d60:	a9 01       	movw	r20, r18
   18d62:	60 e0       	ldi	r22, 0x00	; 0
   18d64:	70 e0       	ldi	r23, 0x00	; 0
   18d66:	bb 27       	eor	r27, r27
   18d68:	a7 2f       	mov	r26, r23
   18d6a:	96 2f       	mov	r25, r22
   18d6c:	85 2f       	mov	r24, r21
   18d6e:	f9 01       	movw	r30, r18
   18d70:	ff 27       	eor	r31, r31
   18d72:	fb 8b       	std	Y+19, r31	; 0x13
   18d74:	ea 8b       	std	Y+18, r30	; 0x12
   18d76:	2c 01       	movw	r4, r24
   18d78:	3d 01       	movw	r6, r26
   18d7a:	ef 2b       	or	r30, r31
   18d7c:	29 f0       	breq	.+10     	; 0x18d88 <lif_check_dir+0x26c>
   18d7e:	ff ef       	ldi	r31, 0xFF	; 255
   18d80:	4f 1a       	sub	r4, r31
   18d82:	5f 0a       	sbc	r5, r31
   18d84:	6f 0a       	sbc	r6, r31
   18d86:	7f 0a       	sbc	r7, r31
   18d88:	f1 01       	movw	r30, r2
   18d8a:	80 80       	ld	r8, Z
   18d8c:	91 80       	ldd	r9, Z+1	; 0x01
   18d8e:	a2 80       	ldd	r10, Z+2	; 0x02
   18d90:	b3 80       	ldd	r11, Z+3	; 0x03
   18d92:	48 14       	cp	r4, r8
   18d94:	59 04       	cpc	r5, r9
   18d96:	6a 04       	cpc	r6, r10
   18d98:	7b 04       	cpc	r7, r11
   18d9a:	28 f5       	brcc	.+74     	; 0x18de6 <lif_check_dir+0x2ca>
   18d9c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18da0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18da4:	32 ff       	sbrs	r19, 2
   18da6:	1f c0       	rjmp	.+62     	; 0x18de6 <lif_check_dir+0x2ca>
   18da8:	2a 89       	ldd	r18, Y+18	; 0x12
   18daa:	3b 89       	ldd	r19, Y+19	; 0x13
   18dac:	23 2b       	or	r18, r19
   18dae:	19 f0       	breq	.+6      	; 0x18db6 <lif_check_dir+0x29a>
   18db0:	01 96       	adiw	r24, 0x01	; 1
   18db2:	a1 1d       	adc	r26, r1
   18db4:	b1 1d       	adc	r27, r1
   18db6:	ed b7       	in	r30, 0x3d	; 61
   18db8:	fe b7       	in	r31, 0x3e	; 62
   18dba:	86 86       	std	Z+14, r8	; 0x0e
   18dbc:	97 86       	std	Z+15, r9	; 0x0f
   18dbe:	a0 8a       	std	Z+16, r10	; 0x10
   18dc0:	b1 8a       	std	Z+17, r11	; 0x11
   18dc2:	82 87       	std	Z+10, r24	; 0x0a
   18dc4:	93 87       	std	Z+11, r25	; 0x0b
   18dc6:	a4 87       	std	Z+12, r26	; 0x0c
   18dc8:	b5 87       	std	Z+13, r27	; 0x0d
   18dca:	46 83       	std	Z+6, r20	; 0x06
   18dcc:	57 83       	std	Z+7, r21	; 0x07
   18dce:	60 87       	std	Z+8, r22	; 0x08
   18dd0:	71 87       	std	Z+9, r23	; 0x09
   18dd2:	f5 82       	std	Z+5, r15	; 0x05
   18dd4:	e4 82       	std	Z+4, r14	; 0x04
   18dd6:	80 e9       	ldi	r24, 0x90	; 144
   18dd8:	9a e3       	ldi	r25, 0x3A	; 58
   18dda:	a0 e0       	ldi	r26, 0x00	; 0
   18ddc:	81 83       	std	Z+1, r24	; 0x01
   18dde:	92 83       	std	Z+2, r25	; 0x02
   18de0:	a3 83       	std	Z+3, r26	; 0x03
   18de2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18de6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18dea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18dee:	92 ff       	sbrs	r25, 2
   18df0:	13 c0       	rjmp	.+38     	; 0x18e18 <lif_check_dir+0x2fc>
   18df2:	f6 01       	movw	r30, r12
   18df4:	80 81       	ld	r24, Z
   18df6:	91 81       	ldd	r25, Z+1	; 0x01
   18df8:	89 2b       	or	r24, r25
   18dfa:	71 f4       	brne	.+28     	; 0x18e18 <lif_check_dir+0x2fc>
   18dfc:	ed b7       	in	r30, 0x3d	; 61
   18dfe:	fe b7       	in	r31, 0x3e	; 62
   18e00:	f5 82       	std	Z+5, r15	; 0x05
   18e02:	e4 82       	std	Z+4, r14	; 0x04
   18e04:	85 e6       	ldi	r24, 0x65	; 101
   18e06:	9a e3       	ldi	r25, 0x3A	; 58
   18e08:	a0 e0       	ldi	r26, 0x00	; 0
   18e0a:	81 83       	std	Z+1, r24	; 0x01
   18e0c:	92 83       	std	Z+2, r25	; 0x02
   18e0e:	a3 83       	std	Z+3, r26	; 0x03
   18e10:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18e14:	00 e0       	ldi	r16, 0x00	; 0
   18e16:	10 e0       	ldi	r17, 0x00	; 0
   18e18:	ec 89       	ldd	r30, Y+20	; 0x14
   18e1a:	fd 89       	ldd	r31, Y+21	; 0x15
   18e1c:	e2 59       	subi	r30, 0x92	; 146
   18e1e:	ff 4f       	sbci	r31, 0xFF	; 255
   18e20:	20 81       	ld	r18, Z
   18e22:	31 81       	ldd	r19, Z+1	; 0x01
   18e24:	21 15       	cp	r18, r1
   18e26:	f1 e0       	ldi	r31, 0x01	; 1
   18e28:	3f 07       	cpc	r19, r31
   18e2a:	41 f1       	breq	.+80     	; 0x18e7c <lif_check_dir+0x360>
   18e2c:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18e30:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18e34:	ca 01       	movw	r24, r20
   18e36:	88 27       	eor	r24, r24
   18e38:	94 70       	andi	r25, 0x04	; 4
   18e3a:	52 ff       	sbrs	r21, 2
   18e3c:	20 c0       	rjmp	.+64     	; 0x18e7e <lif_check_dir+0x362>
   18e3e:	c9 01       	movw	r24, r18
   18e40:	a0 e0       	ldi	r26, 0x00	; 0
   18e42:	b0 e0       	ldi	r27, 0x00	; 0
   18e44:	ed b7       	in	r30, 0x3d	; 61
   18e46:	fe b7       	in	r31, 0x3e	; 62
   18e48:	86 83       	std	Z+6, r24	; 0x06
   18e4a:	97 83       	std	Z+7, r25	; 0x07
   18e4c:	a0 87       	std	Z+8, r26	; 0x08
   18e4e:	b1 87       	std	Z+9, r27	; 0x09
   18e50:	ec 89       	ldd	r30, Y+20	; 0x14
   18e52:	fd 89       	ldd	r31, Y+21	; 0x15
   18e54:	80 81       	ld	r24, Z
   18e56:	91 81       	ldd	r25, Z+1	; 0x01
   18e58:	ed b7       	in	r30, 0x3d	; 61
   18e5a:	fe b7       	in	r31, 0x3e	; 62
   18e5c:	95 83       	std	Z+5, r25	; 0x05
   18e5e:	84 83       	std	Z+4, r24	; 0x04
   18e60:	89 e3       	ldi	r24, 0x39	; 57
   18e62:	9a e3       	ldi	r25, 0x3A	; 58
   18e64:	a0 e0       	ldi	r26, 0x00	; 0
   18e66:	81 83       	std	Z+1, r24	; 0x01
   18e68:	92 83       	std	Z+2, r25	; 0x02
   18e6a:	a3 83       	std	Z+3, r26	; 0x03
   18e6c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18e70:	80 e0       	ldi	r24, 0x00	; 0
   18e72:	90 e0       	ldi	r25, 0x00	; 0
   18e74:	04 c0       	rjmp	.+8      	; 0x18e7e <lif_check_dir+0x362>
   18e76:	81 e0       	ldi	r24, 0x01	; 1
   18e78:	90 e0       	ldi	r25, 0x00	; 0
   18e7a:	01 c0       	rjmp	.+2      	; 0x18e7e <lif_check_dir+0x362>
   18e7c:	c8 01       	movw	r24, r16
   18e7e:	65 96       	adiw	r28, 0x15	; 21
   18e80:	e2 e1       	ldi	r30, 0x12	; 18
   18e82:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00018e86 <lif_close_volume>:
   18e86:	cf 93       	push	r28
   18e88:	df 93       	push	r29
   18e8a:	00 97       	sbiw	r24, 0x00	; 0
   18e8c:	f9 f0       	breq	.+62     	; 0x18ecc <lif_close_volume+0x46>
   18e8e:	ec 01       	movw	r28, r24
   18e90:	8a 81       	ldd	r24, Y+2	; 0x02
   18e92:	9b 81       	ldd	r25, Y+3	; 0x03
   18e94:	00 97       	sbiw	r24, 0x00	; 0
   18e96:	79 f0       	breq	.+30     	; 0x18eb6 <lif_close_volume+0x30>
   18e98:	22 e0       	ldi	r18, 0x02	; 2
   18e9a:	30 e0       	ldi	r19, 0x00	; 0
   18e9c:	40 e0       	ldi	r20, 0x00	; 0
   18e9e:	50 e0       	ldi	r21, 0x00	; 0
   18ea0:	ba 01       	movw	r22, r20
   18ea2:	0e 94 b3 79 	call	0xf366	; 0xf366 <fseek>
   18ea6:	8a 81       	ldd	r24, Y+2	; 0x02
   18ea8:	9b 81       	ldd	r25, Y+3	; 0x03
   18eaa:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>
   18eae:	1b 82       	std	Y+3, r1	; 0x03
   18eb0:	1a 82       	std	Y+2, r1	; 0x02
   18eb2:	0e 94 96 7a 	call	0xf52c	; 0xf52c <sync>
   18eb6:	88 81       	ld	r24, Y
   18eb8:	99 81       	ldd	r25, Y+1	; 0x01
   18eba:	00 97       	sbiw	r24, 0x00	; 0
   18ebc:	11 f0       	breq	.+4      	; 0x18ec2 <lif_close_volume+0x3c>
   18ebe:	0e 94 bf bd 	call	0x17b7e	; 0x17b7e <lif_free>
   18ec2:	ce 01       	movw	r24, r28
   18ec4:	73 db       	rcall	.-2330   	; 0x185ac <lif_vol_clear>
   18ec6:	ce 01       	movw	r24, r28
   18ec8:	0e 94 bf bd 	call	0x17b7e	; 0x17b7e <lif_free>
   18ecc:	df 91       	pop	r29
   18ece:	cf 91       	pop	r28
   18ed0:	08 95       	ret

00018ed2 <lif_checkdirindex>:
   18ed2:	cf 92       	push	r12
   18ed4:	df 92       	push	r13
   18ed6:	ef 92       	push	r14
   18ed8:	ff 92       	push	r15
   18eda:	cf 93       	push	r28
   18edc:	df 93       	push	r29
   18ede:	ad b7       	in	r26, 0x3d	; 61
   18ee0:	be b7       	in	r27, 0x3e	; 62
   18ee2:	17 97       	sbiw	r26, 0x07	; 7
   18ee4:	0f b6       	in	r0, 0x3f	; 63
   18ee6:	f8 94       	cli
   18ee8:	be bf       	out	0x3e, r27	; 62
   18eea:	0f be       	out	0x3f, r0	; 63
   18eec:	ad bf       	out	0x3d, r26	; 61
   18eee:	9b 01       	movw	r18, r22
   18ef0:	77 fd       	sbrc	r23, 7
   18ef2:	25 c0       	rjmp	.+74     	; 0x18f3e <lif_checkdirindex+0x6c>
   18ef4:	ab 01       	movw	r20, r22
   18ef6:	77 0f       	add	r23, r23
   18ef8:	66 0b       	sbc	r22, r22
   18efa:	77 0b       	sbc	r23, r23
   18efc:	e5 e0       	ldi	r30, 0x05	; 5
   18efe:	44 0f       	add	r20, r20
   18f00:	55 1f       	adc	r21, r21
   18f02:	66 1f       	adc	r22, r22
   18f04:	77 1f       	adc	r23, r23
   18f06:	ea 95       	dec	r30
   18f08:	d1 f7       	brne	.-12     	; 0x18efe <lif_checkdirindex+0x2c>
   18f0a:	c5 2e       	mov	r12, r21
   18f0c:	d6 2e       	mov	r13, r22
   18f0e:	e7 2e       	mov	r14, r23
   18f10:	ff 24       	eor	r15, r15
   18f12:	55 27       	eor	r21, r21
   18f14:	66 27       	eor	r22, r22
   18f16:	77 27       	eor	r23, r23
   18f18:	45 2b       	or	r20, r21
   18f1a:	46 2b       	or	r20, r22
   18f1c:	47 2b       	or	r20, r23
   18f1e:	29 f0       	breq	.+10     	; 0x18f2a <lif_checkdirindex+0x58>
   18f20:	4f ef       	ldi	r20, 0xFF	; 255
   18f22:	c4 1a       	sub	r12, r20
   18f24:	d4 0a       	sbc	r13, r20
   18f26:	e4 0a       	sbc	r14, r20
   18f28:	f4 0a       	sbc	r15, r20
   18f2a:	fc 01       	movw	r30, r24
   18f2c:	45 a9       	ldd	r20, Z+53	; 0x35
   18f2e:	56 a9       	ldd	r21, Z+54	; 0x36
   18f30:	67 a9       	ldd	r22, Z+55	; 0x37
   18f32:	70 ad       	ldd	r23, Z+56	; 0x38
   18f34:	4c 15       	cp	r20, r12
   18f36:	5d 05       	cpc	r21, r13
   18f38:	6e 05       	cpc	r22, r14
   18f3a:	7f 05       	cpc	r23, r15
   18f3c:	08 f5       	brcc	.+66     	; 0x18f80 <lif_checkdirindex+0xae>
   18f3e:	ec 01       	movw	r28, r24
   18f40:	ed b7       	in	r30, 0x3d	; 61
   18f42:	fe b7       	in	r31, 0x3e	; 62
   18f44:	37 83       	std	Z+7, r19	; 0x07
   18f46:	26 83       	std	Z+6, r18	; 0x06
   18f48:	88 81       	ld	r24, Y
   18f4a:	99 81       	ldd	r25, Y+1	; 0x01
   18f4c:	95 83       	std	Z+5, r25	; 0x05
   18f4e:	84 83       	std	Z+4, r24	; 0x04
   18f50:	86 e7       	ldi	r24, 0x76	; 118
   18f52:	99 e3       	ldi	r25, 0x39	; 57
   18f54:	a0 e0       	ldi	r26, 0x00	; 0
   18f56:	81 83       	std	Z+1, r24	; 0x01
   18f58:	92 83       	std	Z+2, r25	; 0x02
   18f5a:	a3 83       	std	Z+3, r26	; 0x03
   18f5c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   18f60:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18f64:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f68:	c9 01       	movw	r24, r18
   18f6a:	88 27       	eor	r24, r24
   18f6c:	94 70       	andi	r25, 0x04	; 4
   18f6e:	32 ff       	sbrs	r19, 2
   18f70:	09 c0       	rjmp	.+18     	; 0x18f84 <lif_checkdirindex+0xb2>
   18f72:	6c ef       	ldi	r22, 0xFC	; 252
   18f74:	75 e1       	ldi	r23, 0x15	; 21
   18f76:	ce 01       	movw	r24, r28
   18f78:	20 db       	rcall	.-2496   	; 0x185ba <lif_dump_vol>
   18f7a:	80 e0       	ldi	r24, 0x00	; 0
   18f7c:	90 e0       	ldi	r25, 0x00	; 0
   18f7e:	02 c0       	rjmp	.+4      	; 0x18f84 <lif_checkdirindex+0xb2>
   18f80:	81 e0       	ldi	r24, 0x01	; 1
   18f82:	90 e0       	ldi	r25, 0x00	; 0
   18f84:	ad b7       	in	r26, 0x3d	; 61
   18f86:	be b7       	in	r27, 0x3e	; 62
   18f88:	17 96       	adiw	r26, 0x07	; 7
   18f8a:	0f b6       	in	r0, 0x3f	; 63
   18f8c:	f8 94       	cli
   18f8e:	be bf       	out	0x3e, r27	; 62
   18f90:	0f be       	out	0x3f, r0	; 63
   18f92:	ad bf       	out	0x3d, r26	; 61
   18f94:	df 91       	pop	r29
   18f96:	cf 91       	pop	r28
   18f98:	ff 90       	pop	r15
   18f9a:	ef 90       	pop	r14
   18f9c:	df 90       	pop	r13
   18f9e:	cf 90       	pop	r12
   18fa0:	08 95       	ret

00018fa2 <lif_readdirindex>:
   18fa2:	a5 e2       	ldi	r26, 0x25	; 37
   18fa4:	b0 e0       	ldi	r27, 0x00	; 0
   18fa6:	e7 ed       	ldi	r30, 0xD7	; 215
   18fa8:	f7 ec       	ldi	r31, 0xC7	; 199
   18faa:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
   18fae:	7c 01       	movw	r14, r24
   18fb0:	6b 01       	movw	r12, r22
   18fb2:	8f df       	rcall	.-226    	; 0x18ed2 <lif_checkdirindex>
   18fb4:	89 2b       	or	r24, r25
   18fb6:	19 f4       	brne	.+6      	; 0x18fbe <lif_readdirindex+0x1c>
   18fb8:	00 e0       	ldi	r16, 0x00	; 0
   18fba:	10 e0       	ldi	r17, 0x00	; 0
   18fbc:	54 c0       	rjmp	.+168    	; 0x19066 <lif_readdirindex+0xc4>
   18fbe:	f7 01       	movw	r30, r14
   18fc0:	85 a5       	ldd	r24, Z+45	; 0x2d
   18fc2:	96 a5       	ldd	r25, Z+46	; 0x2e
   18fc4:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18fc6:	b0 a9       	ldd	r27, Z+48	; 0x30
   18fc8:	44 27       	eor	r20, r20
   18fca:	58 2f       	mov	r21, r24
   18fcc:	69 2f       	mov	r22, r25
   18fce:	7a 2f       	mov	r23, r26
   18fd0:	c6 01       	movw	r24, r12
   18fd2:	0d 2c       	mov	r0, r13
   18fd4:	00 0c       	add	r0, r0
   18fd6:	aa 0b       	sbc	r26, r26
   18fd8:	bb 0b       	sbc	r27, r27
   18fda:	35 e0       	ldi	r19, 0x05	; 5
   18fdc:	88 0f       	add	r24, r24
   18fde:	99 1f       	adc	r25, r25
   18fe0:	aa 1f       	adc	r26, r26
   18fe2:	bb 1f       	adc	r27, r27
   18fe4:	3a 95       	dec	r19
   18fe6:	d1 f7       	brne	.-12     	; 0x18fdc <lif_readdirindex+0x3a>
   18fe8:	9a 01       	movw	r18, r20
   18fea:	ab 01       	movw	r20, r22
   18fec:	28 0f       	add	r18, r24
   18fee:	39 1f       	adc	r19, r25
   18ff0:	4a 1f       	adc	r20, r26
   18ff2:	5b 1f       	adc	r21, r27
   18ff4:	00 e2       	ldi	r16, 0x20	; 32
   18ff6:	10 e0       	ldi	r17, 0x00	; 0
   18ff8:	be 01       	movw	r22, r28
   18ffa:	6a 5f       	subi	r22, 0xFA	; 250
   18ffc:	7f 4f       	sbci	r23, 0xFF	; 255
   18ffe:	c7 01       	movw	r24, r14
   19000:	0e 94 77 be 	call	0x17cee	; 0x17cee <lif_read>
   19004:	60 32       	cpi	r22, 0x20	; 32
   19006:	71 05       	cpc	r23, r1
   19008:	81 05       	cpc	r24, r1
   1900a:	91 05       	cpc	r25, r1
   1900c:	a8 f2       	brcs	.-86     	; 0x18fb8 <lif_readdirindex+0x16>
   1900e:	b7 01       	movw	r22, r14
   19010:	ce 01       	movw	r24, r28
   19012:	06 96       	adiw	r24, 0x06	; 6
   19014:	75 d9       	rcall	.-3350   	; 0x18300 <lif_str2dir>
   19016:	f7 01       	movw	r30, r14
   19018:	e6 5a       	subi	r30, 0xA6	; 166
   1901a:	ff 4f       	sbci	r31, 0xFF	; 255
   1901c:	80 81       	ld	r24, Z
   1901e:	91 81       	ldd	r25, Z+1	; 0x01
   19020:	01 96       	adiw	r24, 0x01	; 1
   19022:	19 f4       	brne	.+6      	; 0x1902a <lif_readdirindex+0x88>
   19024:	f7 01       	movw	r30, r14
   19026:	d3 a2       	std	Z+35, r13	; 0x23
   19028:	c2 a2       	std	Z+34, r12	; 0x22
   1902a:	c7 01       	movw	r24, r14
   1902c:	77 dd       	rcall	.-1298   	; 0x18b1c <lif_check_dir>
   1902e:	8c 01       	movw	r16, r24
   19030:	89 2b       	or	r24, r25
   19032:	b9 f4       	brne	.+46     	; 0x19062 <lif_readdirindex+0xc0>
   19034:	ed b7       	in	r30, 0x3d	; 61
   19036:	fe b7       	in	r31, 0x3e	; 62
   19038:	d5 82       	std	Z+5, r13	; 0x05
   1903a:	c4 82       	std	Z+4, r12	; 0x04
   1903c:	86 e5       	ldi	r24, 0x56	; 86
   1903e:	99 e3       	ldi	r25, 0x39	; 57
   19040:	a0 e0       	ldi	r26, 0x00	; 0
   19042:	81 83       	std	Z+1, r24	; 0x01
   19044:	92 83       	std	Z+2, r25	; 0x02
   19046:	a3 83       	std	Z+3, r26	; 0x03
   19048:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1904c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19050:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19054:	92 ff       	sbrs	r25, 2
   19056:	b0 cf       	rjmp	.-160    	; 0x18fb8 <lif_readdirindex+0x16>
   19058:	6d e0       	ldi	r22, 0x0D	; 13
   1905a:	76 e1       	ldi	r23, 0x16	; 22
   1905c:	c7 01       	movw	r24, r14
   1905e:	ad da       	rcall	.-2726   	; 0x185ba <lif_dump_vol>
   19060:	02 c0       	rjmp	.+4      	; 0x19066 <lif_readdirindex+0xc4>
   19062:	01 e0       	ldi	r16, 0x01	; 1
   19064:	10 e0       	ldi	r17, 0x00	; 0
   19066:	c8 01       	movw	r24, r16
   19068:	a5 96       	adiw	r28, 0x25	; 37
   1906a:	e8 e0       	ldi	r30, 0x08	; 8
   1906c:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

00019070 <lif_writedirindex>:
   19070:	a0 e2       	ldi	r26, 0x20	; 32
   19072:	b0 e0       	ldi	r27, 0x00	; 0
   19074:	ee e3       	ldi	r30, 0x3E	; 62
   19076:	f8 ec       	ldi	r31, 0xC8	; 200
   19078:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
   1907c:	5c 01       	movw	r10, r24
   1907e:	6b 01       	movw	r12, r22
   19080:	4d dd       	rcall	.-1382   	; 0x18b1c <lif_check_dir>
   19082:	7c 01       	movw	r14, r24
   19084:	89 2b       	or	r24, r25
   19086:	71 f4       	brne	.+28     	; 0x190a4 <lif_writedirindex+0x34>
   19088:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1908c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19090:	92 fd       	sbrc	r25, 2
   19092:	03 c0       	rjmp	.+6      	; 0x1909a <lif_writedirindex+0x2a>
   19094:	e1 2c       	mov	r14, r1
   19096:	f1 2c       	mov	r15, r1
   19098:	42 c0       	rjmp	.+132    	; 0x1911e <lif_writedirindex+0xae>
   1909a:	6e e1       	ldi	r22, 0x1E	; 30
   1909c:	76 e1       	ldi	r23, 0x16	; 22
   1909e:	c5 01       	movw	r24, r10
   190a0:	8c da       	rcall	.-2792   	; 0x185ba <lif_dump_vol>
   190a2:	3d c0       	rjmp	.+122    	; 0x1911e <lif_writedirindex+0xae>
   190a4:	b6 01       	movw	r22, r12
   190a6:	c5 01       	movw	r24, r10
   190a8:	14 df       	rcall	.-472    	; 0x18ed2 <lif_checkdirindex>
   190aa:	89 2b       	or	r24, r25
   190ac:	99 f3       	breq	.-26     	; 0x19094 <lif_writedirindex+0x24>
   190ae:	f5 01       	movw	r30, r10
   190b0:	e6 5a       	subi	r30, 0xA6	; 166
   190b2:	ff 4f       	sbci	r31, 0xFF	; 255
   190b4:	80 81       	ld	r24, Z
   190b6:	91 81       	ldd	r25, Z+1	; 0x01
   190b8:	01 96       	adiw	r24, 0x01	; 1
   190ba:	19 f4       	brne	.+6      	; 0x190c2 <lif_writedirindex+0x52>
   190bc:	f5 01       	movw	r30, r10
   190be:	d3 a2       	std	Z+35, r13	; 0x23
   190c0:	c2 a2       	std	Z+34, r12	; 0x22
   190c2:	f5 01       	movw	r30, r10
   190c4:	85 a5       	ldd	r24, Z+45	; 0x2d
   190c6:	96 a5       	ldd	r25, Z+46	; 0x2e
   190c8:	a7 a5       	ldd	r26, Z+47	; 0x2f
   190ca:	b0 a9       	ldd	r27, Z+48	; 0x30
   190cc:	ba 2f       	mov	r27, r26
   190ce:	a9 2f       	mov	r26, r25
   190d0:	98 2f       	mov	r25, r24
   190d2:	88 27       	eor	r24, r24
   190d4:	0d 2c       	mov	r0, r13
   190d6:	00 0c       	add	r0, r0
   190d8:	ee 08       	sbc	r14, r14
   190da:	ff 08       	sbc	r15, r15
   190dc:	35 e0       	ldi	r19, 0x05	; 5
   190de:	cc 0c       	add	r12, r12
   190e0:	dd 1c       	adc	r13, r13
   190e2:	ee 1c       	adc	r14, r14
   190e4:	ff 1c       	adc	r15, r15
   190e6:	3a 95       	dec	r19
   190e8:	d1 f7       	brne	.-12     	; 0x190de <lif_writedirindex+0x6e>
   190ea:	c8 0e       	add	r12, r24
   190ec:	d9 1e       	adc	r13, r25
   190ee:	ea 1e       	adc	r14, r26
   190f0:	fb 1e       	adc	r15, r27
   190f2:	be 01       	movw	r22, r28
   190f4:	6f 5f       	subi	r22, 0xFF	; 255
   190f6:	7f 4f       	sbci	r23, 0xFF	; 255
   190f8:	c5 01       	movw	r24, r10
   190fa:	97 d8       	rcall	.-3794   	; 0x1822a <lif_dir2str>
   190fc:	00 e2       	ldi	r16, 0x20	; 32
   190fe:	10 e0       	ldi	r17, 0x00	; 0
   19100:	a7 01       	movw	r20, r14
   19102:	96 01       	movw	r18, r12
   19104:	be 01       	movw	r22, r28
   19106:	6f 5f       	subi	r22, 0xFF	; 255
   19108:	7f 4f       	sbci	r23, 0xFF	; 255
   1910a:	c5 01       	movw	r24, r10
   1910c:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
   19110:	31 e0       	ldi	r19, 0x01	; 1
   19112:	20 e0       	ldi	r18, 0x00	; 0
   19114:	80 97       	sbiw	r24, 0x20	; 32
   19116:	0c f4       	brge	.+2      	; 0x1911a <lif_writedirindex+0xaa>
   19118:	30 e0       	ldi	r19, 0x00	; 0
   1911a:	e3 2e       	mov	r14, r19
   1911c:	f2 2e       	mov	r15, r18
   1911e:	c7 01       	movw	r24, r14
   19120:	a0 96       	adiw	r28, 0x20	; 32
   19122:	ea e0       	ldi	r30, 0x0A	; 10
   19124:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

00019128 <lif_writedirEOF>:
   19128:	0f 93       	push	r16
   1912a:	1f 93       	push	r17
   1912c:	cf 93       	push	r28
   1912e:	df 93       	push	r29
   19130:	ec 01       	movw	r28, r24
   19132:	8b 01       	movw	r16, r22
   19134:	33 da       	rcall	.-2970   	; 0x1859c <lif_dir_clear>
   19136:	fe 01       	movw	r30, r28
   19138:	e6 5a       	subi	r30, 0xA6	; 166
   1913a:	ff 4f       	sbci	r31, 0xFF	; 255
   1913c:	8f ef       	ldi	r24, 0xFF	; 255
   1913e:	9f ef       	ldi	r25, 0xFF	; 255
   19140:	91 83       	std	Z+1, r25	; 0x01
   19142:	80 83       	st	Z, r24
   19144:	1b a3       	std	Y+35, r17	; 0x23
   19146:	0a a3       	std	Y+34, r16	; 0x22
   19148:	b8 01       	movw	r22, r16
   1914a:	ce 01       	movw	r24, r28
   1914c:	91 df       	rcall	.-222    	; 0x19070 <lif_writedirindex>
   1914e:	df 91       	pop	r29
   19150:	cf 91       	pop	r28
   19152:	1f 91       	pop	r17
   19154:	0f 91       	pop	r16
   19156:	08 95       	ret

00019158 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   19158:	2f 92       	push	r2
   1915a:	3f 92       	push	r3
   1915c:	4f 92       	push	r4
   1915e:	5f 92       	push	r5
   19160:	6f 92       	push	r6
   19162:	7f 92       	push	r7
   19164:	8f 92       	push	r8
   19166:	af 92       	push	r10
   19168:	bf 92       	push	r11
   1916a:	cf 92       	push	r12
   1916c:	df 92       	push	r13
   1916e:	ef 92       	push	r14
   19170:	ff 92       	push	r15
   19172:	0f 93       	push	r16
   19174:	1f 93       	push	r17
   19176:	cf 93       	push	r28
   19178:	df 93       	push	r29
   1917a:	cd b7       	in	r28, 0x3d	; 61
   1917c:	de b7       	in	r29, 0x3e	; 62
   1917e:	2f 97       	sbiw	r28, 0x0f	; 15
   19180:	0f b6       	in	r0, 0x3f	; 63
   19182:	f8 94       	cli
   19184:	de bf       	out	0x3e, r29	; 62
   19186:	0f be       	out	0x3f, r0	; 63
   19188:	cd bf       	out	0x3d, r28	; 61
   1918a:	9f 87       	std	Y+15, r25	; 0x0f
   1918c:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   1918e:	fc 01       	movw	r30, r24
   19190:	24 84       	ldd	r2, Z+12	; 0x0c
   19192:	35 84       	ldd	r3, Z+13	; 0x0d
   19194:	46 84       	ldd	r4, Z+14	; 0x0e
   19196:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   19198:	80 89       	ldd	r24, Z+16	; 0x10
   1919a:	91 89       	ldd	r25, Z+17	; 0x11
   1919c:	a2 89       	ldd	r26, Z+18	; 0x12
   1919e:	b3 89       	ldd	r27, Z+19	; 0x13
   191a0:	80 8f       	std	Z+24, r24	; 0x18
   191a2:	91 8f       	std	Z+25, r25	; 0x19
   191a4:	a2 8f       	std	Z+26, r26	; 0x1a
   191a6:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   191a8:	14 8a       	std	Z+20, r1	; 0x14
   191aa:	15 8a       	std	Z+21, r1	; 0x15
   191ac:	16 8a       	std	Z+22, r1	; 0x16
   191ae:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   191b0:	17 8e       	std	Z+31, r1	; 0x1f
   191b2:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   191b4:	15 8e       	std	Z+29, r1	; 0x1d
   191b6:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   191b8:	11 a2       	std	Z+33, r1	; 0x21
   191ba:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   191bc:	13 a2       	std	Z+35, r1	; 0x23
   191be:	12 a2       	std	Z+34, r1	; 0x22
   191c0:	cc 24       	eor	r12, r12
   191c2:	c3 94       	inc	r12
   191c4:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   191c6:	0f ef       	ldi	r16, 0xFF	; 255
   191c8:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   191ca:	e6 5a       	subi	r30, 0xA6	; 166
   191cc:	ff 4f       	sbci	r31, 0xFF	; 255
   191ce:	f9 87       	std	Y+9, r31	; 0x09
   191d0:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   191d2:	ae 84       	ldd	r10, Y+14	; 0x0e
   191d4:	bf 84       	ldd	r11, Y+15	; 0x0f
   191d6:	fc e5       	ldi	r31, 0x5C	; 92
   191d8:	af 0e       	add	r10, r31
   191da:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   191dc:	8e 85       	ldd	r24, Y+14	; 0x0e
   191de:	9f 85       	ldd	r25, Y+15	; 0x0f
   191e0:	80 5a       	subi	r24, 0xA0	; 160
   191e2:	9f 4f       	sbci	r25, 0xFF	; 255
   191e4:	9b 87       	std	Y+11, r25	; 0x0b
   191e6:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   191e8:	ee 85       	ldd	r30, Y+14	; 0x0e
   191ea:	ff 85       	ldd	r31, Y+15	; 0x0f
   191ec:	e1 5b       	subi	r30, 0xB1	; 177
   191ee:	ff 4f       	sbci	r31, 0xFF	; 255
   191f0:	fd 87       	std	Y+13, r31	; 0x0d
   191f2:	ec 87       	std	Y+12, r30	; 0x0c
   191f4:	89 e0       	ldi	r24, 0x09	; 9
   191f6:	99 e3       	ldi	r25, 0x39	; 57
   191f8:	3c 01       	movw	r6, r24
   191fa:	81 2c       	mov	r8, r1
   191fc:	76 01       	movw	r14, r12
   191fe:	21 e0       	ldi	r18, 0x01	; 1
   19200:	e2 1a       	sub	r14, r18
   19202:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19204:	b7 01       	movw	r22, r14
   19206:	8e 85       	ldd	r24, Y+14	; 0x0e
   19208:	9f 85       	ldd	r25, Y+15	; 0x0f
   1920a:	cb de       	rcall	.-618    	; 0x18fa2 <lif_readdirindex>
   1920c:	89 2b       	or	r24, r25
   1920e:	19 f4       	brne	.+6      	; 0x19216 <lif_updatefree+0xbe>
        {
            return(NULL);
   19210:	80 e0       	ldi	r24, 0x00	; 0
   19212:	90 e0       	ldi	r25, 0x00	; 0
   19214:	93 c0       	rjmp	.+294    	; 0x1933c <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19216:	e8 85       	ldd	r30, Y+8	; 0x08
   19218:	f9 85       	ldd	r31, Y+9	; 0x09
   1921a:	80 81       	ld	r24, Z
   1921c:	91 81       	ldd	r25, Z+1	; 0x01
   1921e:	8f 3f       	cpi	r24, 0xFF	; 255
   19220:	ff ef       	ldi	r31, 0xFF	; 255
   19222:	9f 07       	cpc	r25, r31
   19224:	c1 f4       	brne	.+48     	; 0x19256 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   19226:	ee 85       	ldd	r30, Y+14	; 0x0e
   19228:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   1922a:	0f 3f       	cpi	r16, 0xFF	; 255
   1922c:	2f ef       	ldi	r18, 0xFF	; 255
   1922e:	12 07       	cpc	r17, r18
   19230:	09 f4       	brne	.+2      	; 0x19234 <lif_updatefree+0xdc>
   19232:	7a c0       	rjmp	.+244    	; 0x19328 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   19234:	13 a3       	std	Z+35, r17	; 0x23
   19236:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   19238:	e0 1a       	sub	r14, r16
   1923a:	f1 0a       	sbc	r15, r17
   1923c:	86 8d       	ldd	r24, Z+30	; 0x1e
   1923e:	97 8d       	ldd	r25, Z+31	; 0x1f
   19240:	8e 19       	sub	r24, r14
   19242:	9f 09       	sbc	r25, r15
   19244:	97 8f       	std	Z+31, r25	; 0x1f
   19246:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19248:	b8 01       	movw	r22, r16
   1924a:	cf 01       	movw	r24, r30
   1924c:	6d df       	rcall	.-294    	; 0x19128 <lif_writedirEOF>
   1924e:	89 2b       	or	r24, r25
   19250:	09 f0       	breq	.+2      	; 0x19254 <lif_updatefree+0xfc>
   19252:	6c c0       	rjmp	.+216    	; 0x1932c <lif_updatefree+0x1d4>
   19254:	dd cf       	rjmp	.-70     	; 0x19210 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   19256:	89 2b       	or	r24, r25
   19258:	81 f4       	brne	.+32     	; 0x1927a <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   1925a:	0f 3f       	cpi	r16, 0xFF	; 255
   1925c:	ff ef       	ldi	r31, 0xFF	; 255
   1925e:	1f 07       	cpc	r17, r31
   19260:	09 f4       	brne	.+2      	; 0x19264 <lif_updatefree+0x10c>
   19262:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   19264:	ee 85       	ldd	r30, Y+14	; 0x0e
   19266:	ff 85       	ldd	r31, Y+15	; 0x0f
   19268:	86 8d       	ldd	r24, Z+30	; 0x1e
   1926a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1926c:	01 96       	adiw	r24, 0x01	; 1
   1926e:	97 8f       	std	Z+31, r25	; 0x1f
   19270:	86 8f       	std	Z+30, r24	; 0x1e
   19272:	ff ef       	ldi	r31, 0xFF	; 255
   19274:	cf 1a       	sub	r12, r31
   19276:	df 0a       	sbc	r13, r31
   19278:	c1 cf       	rjmp	.-126    	; 0x191fc <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   1927a:	f5 01       	movw	r30, r10
   1927c:	80 81       	ld	r24, Z
   1927e:	91 81       	ldd	r25, Z+1	; 0x01
   19280:	a2 81       	ldd	r26, Z+2	; 0x02
   19282:	b3 81       	ldd	r27, Z+3	; 0x03
   19284:	82 15       	cp	r24, r2
   19286:	93 05       	cpc	r25, r3
   19288:	a4 05       	cpc	r26, r4
   1928a:	b5 05       	cpc	r27, r5
   1928c:	c8 f4       	brcc	.+50     	; 0x192c0 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   1928e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19292:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19296:	92 ff       	sbrs	r25, 2
   19298:	13 c0       	rjmp	.+38     	; 0x192c0 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1929a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1929c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1929e:	ed b7       	in	r30, 0x3d	; 61
   192a0:	fe b7       	in	r31, 0x3e	; 62
   192a2:	97 83       	std	Z+7, r25	; 0x07
   192a4:	86 83       	std	Z+6, r24	; 0x06
   192a6:	ee 85       	ldd	r30, Y+14	; 0x0e
   192a8:	ff 85       	ldd	r31, Y+15	; 0x0f
   192aa:	80 81       	ld	r24, Z
   192ac:	91 81       	ldd	r25, Z+1	; 0x01
   192ae:	ed b7       	in	r30, 0x3d	; 61
   192b0:	fe b7       	in	r31, 0x3e	; 62
   192b2:	95 83       	std	Z+5, r25	; 0x05
   192b4:	84 83       	std	Z+4, r24	; 0x04
   192b6:	61 82       	std	Z+1, r6	; 0x01
   192b8:	72 82       	std	Z+2, r7	; 0x02
   192ba:	83 82       	std	Z+3, r8	; 0x03
   192bc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   192c0:	ea 85       	ldd	r30, Y+10	; 0x0a
   192c2:	fb 85       	ldd	r31, Y+11	; 0x0b
   192c4:	80 81       	ld	r24, Z
   192c6:	91 81       	ldd	r25, Z+1	; 0x01
   192c8:	a2 81       	ldd	r26, Z+2	; 0x02
   192ca:	b3 81       	ldd	r27, Z+3	; 0x03
   192cc:	ee 85       	ldd	r30, Y+14	; 0x0e
   192ce:	ff 85       	ldd	r31, Y+15	; 0x0f
   192d0:	44 89       	ldd	r20, Z+20	; 0x14
   192d2:	55 89       	ldd	r21, Z+21	; 0x15
   192d4:	66 89       	ldd	r22, Z+22	; 0x16
   192d6:	77 89       	ldd	r23, Z+23	; 0x17
   192d8:	48 0f       	add	r20, r24
   192da:	59 1f       	adc	r21, r25
   192dc:	6a 1f       	adc	r22, r26
   192de:	7b 1f       	adc	r23, r27
   192e0:	44 8b       	std	Z+20, r20	; 0x14
   192e2:	55 8b       	std	Z+21, r21	; 0x15
   192e4:	66 8b       	std	Z+22, r22	; 0x16
   192e6:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   192e8:	40 8d       	ldd	r20, Z+24	; 0x18
   192ea:	51 8d       	ldd	r21, Z+25	; 0x19
   192ec:	62 8d       	ldd	r22, Z+26	; 0x1a
   192ee:	73 8d       	ldd	r23, Z+27	; 0x1b
   192f0:	48 1b       	sub	r20, r24
   192f2:	59 0b       	sbc	r21, r25
   192f4:	6a 0b       	sbc	r22, r26
   192f6:	7b 0b       	sbc	r23, r27
   192f8:	40 8f       	std	Z+24, r20	; 0x18
   192fa:	51 8f       	std	Z+25, r21	; 0x19
   192fc:	62 8f       	std	Z+26, r22	; 0x1a
   192fe:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19300:	24 8d       	ldd	r18, Z+28	; 0x1c
   19302:	35 8d       	ldd	r19, Z+29	; 0x1d
   19304:	2f 5f       	subi	r18, 0xFF	; 255
   19306:	3f 4f       	sbci	r19, 0xFF	; 255
   19308:	35 8f       	std	Z+29, r19	; 0x1d
   1930a:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1930c:	f5 01       	movw	r30, r10
   1930e:	40 81       	ld	r20, Z
   19310:	51 81       	ldd	r21, Z+1	; 0x01
   19312:	62 81       	ldd	r22, Z+2	; 0x02
   19314:	73 81       	ldd	r23, Z+3	; 0x03
   19316:	1c 01       	movw	r2, r24
   19318:	2d 01       	movw	r4, r26
   1931a:	24 0e       	add	r2, r20
   1931c:	35 1e       	adc	r3, r21
   1931e:	46 1e       	adc	r4, r22
   19320:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19322:	0f ef       	ldi	r16, 0xFF	; 255
   19324:	1f ef       	ldi	r17, 0xFF	; 255
   19326:	a5 cf       	rjmp	.-182    	; 0x19272 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19328:	f3 a2       	std	Z+35, r15	; 0x23
   1932a:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1932c:	8f ef       	ldi	r24, 0xFF	; 255
   1932e:	9f ef       	ldi	r25, 0xFF	; 255
   19330:	ee 85       	ldd	r30, Y+14	; 0x0e
   19332:	ff 85       	ldd	r31, Y+15	; 0x0f
   19334:	91 a3       	std	Z+33, r25	; 0x21
   19336:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19338:	8e 85       	ldd	r24, Y+14	; 0x0e
   1933a:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   1933c:	2f 96       	adiw	r28, 0x0f	; 15
   1933e:	0f b6       	in	r0, 0x3f	; 63
   19340:	f8 94       	cli
   19342:	de bf       	out	0x3e, r29	; 62
   19344:	0f be       	out	0x3f, r0	; 63
   19346:	cd bf       	out	0x3d, r28	; 61
   19348:	df 91       	pop	r29
   1934a:	cf 91       	pop	r28
   1934c:	1f 91       	pop	r17
   1934e:	0f 91       	pop	r16
   19350:	ff 90       	pop	r15
   19352:	ef 90       	pop	r14
   19354:	df 90       	pop	r13
   19356:	cf 90       	pop	r12
   19358:	bf 90       	pop	r11
   1935a:	af 90       	pop	r10
   1935c:	8f 90       	pop	r8
   1935e:	7f 90       	pop	r7
   19360:	6f 90       	pop	r6
   19362:	5f 90       	pop	r5
   19364:	4f 90       	pop	r4
   19366:	3f 90       	pop	r3
   19368:	2f 90       	pop	r2
   1936a:	08 95       	ret

0001936c <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1936c:	a9 e2       	ldi	r26, 0x29	; 41
   1936e:	b1 e0       	ldi	r27, 0x01	; 1
   19370:	ec eb       	ldi	r30, 0xBC	; 188
   19372:	f9 ec       	ldi	r31, 0xC9	; 201
   19374:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   19378:	4c 01       	movw	r8, r24
   1937a:	3b 01       	movw	r6, r22
   1937c:	19 01       	movw	r2, r18
   1937e:	2a 01       	movw	r4, r20
   19380:	ca 5d       	subi	r28, 0xDA	; 218
   19382:	de 4f       	sbci	r29, 0xFE	; 254
   19384:	e8 82       	st	Y, r14
   19386:	f9 82       	std	Y+1, r15	; 0x01
   19388:	0a 83       	std	Y+2, r16	; 0x02
   1938a:	1b 83       	std	Y+3, r17	; 0x03
   1938c:	c6 52       	subi	r28, 0x26	; 38
   1938e:	d1 40       	sbci	r29, 0x01	; 1
   19390:	c2 5e       	subi	r28, 0xE2	; 226
   19392:	de 4f       	sbci	r29, 0xFE	; 254
   19394:	a8 82       	st	Y, r10
   19396:	b9 82       	std	Y+1, r11	; 0x01
   19398:	ca 82       	std	Y+2, r12	; 0x02
   1939a:	db 82       	std	Y+3, r13	; 0x03
   1939c:	ce 51       	subi	r28, 0x1E	; 30
   1939e:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   193a0:	80 e0       	ldi	r24, 0x00	; 0
   193a2:	90 e0       	ldi	r25, 0x00	; 0
   193a4:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <time>
   193a8:	5b 01       	movw	r10, r22
   193aa:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   193ac:	64 e7       	ldi	r22, 0x74	; 116
   193ae:	70 e0       	ldi	r23, 0x00	; 0
   193b0:	80 e0       	ldi	r24, 0x00	; 0
   193b2:	90 e0       	ldi	r25, 0x00	; 0
   193b4:	0e 94 89 bd 	call	0x17b12	; 0x17b12 <lif_calloc>
   193b8:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   193ba:	89 2b       	or	r24, r25
   193bc:	09 f4       	brne	.+2      	; 0x193c0 <lif_create_volume+0x54>
   193be:	b6 c2       	rjmp	.+1388   	; 0x1992c <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   193c0:	c2 5e       	subi	r28, 0xE2	; 226
   193c2:	de 4f       	sbci	r29, 0xFE	; 254
   193c4:	28 81       	ld	r18, Y
   193c6:	39 81       	ldd	r19, Y+1	; 0x01
   193c8:	4a 81       	ldd	r20, Y+2	; 0x02
   193ca:	5b 81       	ldd	r21, Y+3	; 0x03
   193cc:	ce 51       	subi	r28, 0x1E	; 30
   193ce:	d1 40       	sbci	r29, 0x01	; 1
   193d0:	ed b7       	in	r30, 0x3d	; 61
   193d2:	fe b7       	in	r31, 0x3e	; 62
   193d4:	20 8b       	std	Z+16, r18	; 0x10
   193d6:	31 8b       	std	Z+17, r19	; 0x11
   193d8:	42 8b       	std	Z+18, r20	; 0x12
   193da:	53 8b       	std	Z+19, r21	; 0x13
   193dc:	ca 5d       	subi	r28, 0xDA	; 218
   193de:	de 4f       	sbci	r29, 0xFE	; 254
   193e0:	28 81       	ld	r18, Y
   193e2:	39 81       	ldd	r19, Y+1	; 0x01
   193e4:	4a 81       	ldd	r20, Y+2	; 0x02
   193e6:	5b 81       	ldd	r21, Y+3	; 0x03
   193e8:	c6 52       	subi	r28, 0x26	; 38
   193ea:	d1 40       	sbci	r29, 0x01	; 1
   193ec:	24 87       	std	Z+12, r18	; 0x0c
   193ee:	35 87       	std	Z+13, r19	; 0x0d
   193f0:	46 87       	std	Z+14, r20	; 0x0e
   193f2:	57 87       	std	Z+15, r21	; 0x0f
   193f4:	20 86       	std	Z+8, r2	; 0x08
   193f6:	31 86       	std	Z+9, r3	; 0x09
   193f8:	42 86       	std	Z+10, r4	; 0x0a
   193fa:	53 86       	std	Z+11, r5	; 0x0b
   193fc:	77 82       	std	Z+7, r7	; 0x07
   193fe:	66 82       	std	Z+6, r6	; 0x06
   19400:	95 82       	std	Z+5, r9	; 0x05
   19402:	84 82       	std	Z+4, r8	; 0x04
   19404:	84 ee       	ldi	r24, 0xE4	; 228
   19406:	99 e3       	ldi	r25, 0x39	; 57
   19408:	a0 e0       	ldi	r26, 0x00	; 0
   1940a:	81 83       	std	Z+1, r24	; 0x01
   1940c:	92 83       	std	Z+2, r25	; 0x02
   1940e:	a3 83       	std	Z+3, r26	; 0x03
   19410:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19414:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19418:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1941c:	92 ff       	sbrs	r25, 2
   1941e:	04 c0       	rjmp	.+8      	; 0x19428 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19420:	60 e3       	ldi	r22, 0x30	; 48
   19422:	76 e1       	ldi	r23, 0x16	; 22
   19424:	c7 01       	movw	r24, r14
   19426:	c9 d8       	rcall	.-3694   	; 0x185ba <lif_dump_vol>

    lif_image_clear(LIF);
   19428:	c7 01       	movw	r24, r14
   1942a:	b2 d8       	rcall	.-3740   	; 0x18590 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1942c:	80 e0       	ldi	r24, 0x00	; 0
   1942e:	90 e8       	ldi	r25, 0x80	; 128
   19430:	f7 01       	movw	r30, r14
   19432:	95 a3       	std	Z+37, r25	; 0x25
   19434:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19436:	46 e0       	ldi	r20, 0x06	; 6
   19438:	50 e0       	ldi	r21, 0x00	; 0
   1943a:	b3 01       	movw	r22, r6
   1943c:	c7 01       	movw	r24, r14
   1943e:	86 96       	adiw	r24, 0x26	; 38
   19440:	0e 94 cc bf 	call	0x17f98	; 0x17f98 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19444:	f7 01       	movw	r30, r14
   19446:	25 a6       	std	Z+45, r2	; 0x2d
   19448:	36 a6       	std	Z+46, r3	; 0x2e
   1944a:	47 a6       	std	Z+47, r4	; 0x2f
   1944c:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   1944e:	ca 5d       	subi	r28, 0xDA	; 218
   19450:	de 4f       	sbci	r29, 0xFE	; 254
   19452:	28 81       	ld	r18, Y
   19454:	39 81       	ldd	r19, Y+1	; 0x01
   19456:	4a 81       	ldd	r20, Y+2	; 0x02
   19458:	5b 81       	ldd	r21, Y+3	; 0x03
   1945a:	c6 52       	subi	r28, 0x26	; 38
   1945c:	d1 40       	sbci	r29, 0x01	; 1
   1945e:	25 ab       	std	Z+53, r18	; 0x35
   19460:	36 ab       	std	Z+54, r19	; 0x36
   19462:	47 ab       	std	Z+55, r20	; 0x37
   19464:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19466:	80 e0       	ldi	r24, 0x00	; 0
   19468:	90 e1       	ldi	r25, 0x10	; 16
   1946a:	92 ab       	std	Z+50, r25	; 0x32
   1946c:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   1946e:	fd 96       	adiw	r30, 0x3d	; 61
   19470:	10 82       	st	Z, r1
   19472:	11 82       	std	Z+1, r1	; 0x01
   19474:	12 82       	std	Z+2, r1	; 0x02
   19476:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19478:	34 96       	adiw	r30, 0x04	; 4
   1947a:	10 82       	st	Z, r1
   1947c:	11 82       	std	Z+1, r1	; 0x01
   1947e:	12 82       	std	Z+2, r1	; 0x02
   19480:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19482:	34 96       	adiw	r30, 0x04	; 4
   19484:	10 82       	st	Z, r1
   19486:	11 82       	std	Z+1, r1	; 0x01
   19488:	12 82       	std	Z+2, r1	; 0x02
   1948a:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1948c:	a7 01       	movw	r20, r14
   1948e:	47 5b       	subi	r20, 0xB7	; 183
   19490:	5f 4f       	sbci	r21, 0xFF	; 255
   19492:	c6 01       	movw	r24, r12
   19494:	b5 01       	movw	r22, r10
   19496:	0e 94 f1 c1 	call	0x183e2	; 0x183e2 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   1949a:	c4 01       	movw	r24, r8
   1949c:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <lif_stralloc>
   194a0:	d7 01       	movw	r26, r14
   194a2:	8d 93       	st	X+, r24
   194a4:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   194a6:	89 2b       	or	r24, r25
   194a8:	09 f4       	brne	.+2      	; 0x194ac <lif_create_volume+0x140>
   194aa:	35 c2       	rjmp	.+1130   	; 0x19916 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   194ac:	c2 5e       	subi	r28, 0xE2	; 226
   194ae:	de 4f       	sbci	r29, 0xFE	; 254
   194b0:	28 81       	ld	r18, Y
   194b2:	39 81       	ldd	r19, Y+1	; 0x01
   194b4:	4a 81       	ldd	r20, Y+2	; 0x02
   194b6:	5b 81       	ldd	r21, Y+3	; 0x03
   194b8:	ce 51       	subi	r28, 0x1E	; 30
   194ba:	d1 40       	sbci	r29, 0x01	; 1
   194bc:	f7 01       	movw	r30, r14
   194be:	20 8b       	std	Z+16, r18	; 0x10
   194c0:	31 8b       	std	Z+17, r19	; 0x11
   194c2:	42 8b       	std	Z+18, r20	; 0x12
   194c4:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   194c6:	ca 5d       	subi	r28, 0xDA	; 218
   194c8:	de 4f       	sbci	r29, 0xFE	; 254
   194ca:	88 81       	ld	r24, Y
   194cc:	99 81       	ldd	r25, Y+1	; 0x01
   194ce:	aa 81       	ldd	r26, Y+2	; 0x02
   194d0:	bb 81       	ldd	r27, Y+3	; 0x03
   194d2:	c6 52       	subi	r28, 0x26	; 38
   194d4:	d1 40       	sbci	r29, 0x01	; 1
   194d6:	82 0d       	add	r24, r2
   194d8:	93 1d       	adc	r25, r3
   194da:	a4 1d       	adc	r26, r4
   194dc:	b5 1d       	adc	r27, r5
   194de:	84 87       	std	Z+12, r24	; 0x0c
   194e0:	95 87       	std	Z+13, r25	; 0x0d
   194e2:	a6 87       	std	Z+14, r26	; 0x0e
   194e4:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   194e6:	82 0f       	add	r24, r18
   194e8:	93 1f       	adc	r25, r19
   194ea:	a4 1f       	adc	r26, r20
   194ec:	b5 1f       	adc	r27, r21
   194ee:	84 83       	std	Z+4, r24	; 0x04
   194f0:	95 83       	std	Z+5, r25	; 0x05
   194f2:	a6 83       	std	Z+6, r26	; 0x06
   194f4:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   194f6:	ba 2f       	mov	r27, r26
   194f8:	a9 2f       	mov	r26, r25
   194fa:	98 2f       	mov	r25, r24
   194fc:	88 27       	eor	r24, r24
   194fe:	80 87       	std	Z+8, r24	; 0x08
   19500:	91 87       	std	Z+9, r25	; 0x09
   19502:	a2 87       	std	Z+10, r26	; 0x0a
   19504:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19506:	20 8f       	std	Z+24, r18	; 0x18
   19508:	31 8f       	std	Z+25, r19	; 0x19
   1950a:	42 8f       	std	Z+26, r20	; 0x1a
   1950c:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   1950e:	14 8a       	std	Z+20, r1	; 0x14
   19510:	15 8a       	std	Z+21, r1	; 0x15
   19512:	16 8a       	std	Z+22, r1	; 0x16
   19514:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19516:	15 8e       	std	Z+29, r1	; 0x1d
   19518:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   1951a:	17 8e       	std	Z+31, r1	; 0x1f
   1951c:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   1951e:	11 a2       	std	Z+33, r1	; 0x21
   19520:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19522:	13 a2       	std	Z+35, r1	; 0x23
   19524:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19526:	61 2c       	mov	r6, r1
   19528:	77 24       	eor	r7, r7
   1952a:	73 94       	inc	r7
   1952c:	9e 01       	movw	r18, r28
   1952e:	2c 5e       	subi	r18, 0xEC	; 236
   19530:	3f 4f       	sbci	r19, 0xFF	; 255
   19532:	49 01       	movw	r8, r18
   19534:	d9 01       	movw	r26, r18
   19536:	f3 01       	movw	r30, r6
   19538:	1d 92       	st	X+, r1
   1953a:	31 97       	sbiw	r30, 0x01	; 1
   1953c:	e9 f7       	brne	.-6      	; 0x19538 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   1953e:	b9 01       	movw	r22, r18
   19540:	c7 01       	movw	r24, r14
   19542:	0e 94 09 c0 	call	0x18012	; 0x18012 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19546:	66 e1       	ldi	r22, 0x16	; 22
   19548:	79 e0       	ldi	r23, 0x09	; 9
   1954a:	d7 01       	movw	r26, r14
   1954c:	8d 91       	ld	r24, X+
   1954e:	9c 91       	ld	r25, X
   19550:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <lif_open>
   19554:	f7 01       	movw	r30, r14
   19556:	93 83       	std	Z+3, r25	; 0x03
   19558:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   1955a:	89 2b       	or	r24, r25
   1955c:	09 f4       	brne	.+2      	; 0x19560 <lif_create_volume+0x1f4>
   1955e:	db c1       	rjmp	.+950    	; 0x19916 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19560:	00 e0       	ldi	r16, 0x00	; 0
   19562:	11 e0       	ldi	r17, 0x01	; 1
   19564:	20 e0       	ldi	r18, 0x00	; 0
   19566:	30 e0       	ldi	r19, 0x00	; 0
   19568:	a9 01       	movw	r20, r18
   1956a:	b4 01       	movw	r22, r8
   1956c:	c7 01       	movw	r24, r14
   1956e:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
   19572:	9c 01       	movw	r18, r24
   19574:	99 0f       	add	r25, r25
   19576:	44 0b       	sbc	r20, r20
   19578:	55 0b       	sbc	r21, r21
   1957a:	ca 5e       	subi	r28, 0xEA	; 234
   1957c:	de 4f       	sbci	r29, 0xFE	; 254
   1957e:	28 83       	st	Y, r18
   19580:	39 83       	std	Y+1, r19	; 0x01
   19582:	4a 83       	std	Y+2, r20	; 0x02
   19584:	5b 83       	std	Y+3, r21	; 0x03
   19586:	c6 51       	subi	r28, 0x16	; 22
   19588:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   1958a:	2f 3f       	cpi	r18, 0xFF	; 255
   1958c:	31 05       	cpc	r19, r1
   1958e:	41 05       	cpc	r20, r1
   19590:	51 05       	cpc	r21, r1
   19592:	09 f0       	breq	.+2      	; 0x19596 <lif_create_volume+0x22a>
   19594:	0c f4       	brge	.+2      	; 0x19598 <lif_create_volume+0x22c>
   19596:	bf c1       	rjmp	.+894    	; 0x19916 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19598:	d4 01       	movw	r26, r8
   1959a:	f3 01       	movw	r30, r6
   1959c:	1d 92       	st	X+, r1
   1959e:	31 97       	sbiw	r30, 0x01	; 1
   195a0:	e9 f7       	brne	.-6      	; 0x1959c <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   195a2:	21 e0       	ldi	r18, 0x01	; 1
   195a4:	30 e0       	ldi	r19, 0x00	; 0
   195a6:	40 e0       	ldi	r20, 0x00	; 0
   195a8:	50 e0       	ldi	r21, 0x00	; 0
   195aa:	c6 5e       	subi	r28, 0xE6	; 230
   195ac:	de 4f       	sbci	r29, 0xFE	; 254
   195ae:	28 83       	st	Y, r18
   195b0:	39 83       	std	Y+1, r19	; 0x01
   195b2:	4a 83       	std	Y+2, r20	; 0x02
   195b4:	5b 83       	std	Y+3, r21	; 0x03
   195b6:	ca 51       	subi	r28, 0x1A	; 26
   195b8:	d1 40       	sbci	r29, 0x01	; 1
   195ba:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   195bc:	87 ed       	ldi	r24, 0xD7	; 215
   195be:	99 e3       	ldi	r25, 0x39	; 57
   195c0:	3c 01       	movw	r6, r24
   195c2:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   195c4:	c6 5e       	subi	r28, 0xE6	; 230
   195c6:	de 4f       	sbci	r29, 0xFE	; 254
   195c8:	88 81       	ld	r24, Y
   195ca:	99 81       	ldd	r25, Y+1	; 0x01
   195cc:	aa 81       	ldd	r26, Y+2	; 0x02
   195ce:	bb 81       	ldd	r27, Y+3	; 0x03
   195d0:	ca 51       	subi	r28, 0x1A	; 26
   195d2:	d1 40       	sbci	r29, 0x01	; 1
   195d4:	82 15       	cp	r24, r2
   195d6:	93 05       	cpc	r25, r3
   195d8:	a4 05       	cpc	r26, r4
   195da:	b5 05       	cpc	r27, r5
   195dc:	0c f0       	brlt	.+2      	; 0x195e0 <lif_create_volume+0x274>
   195de:	55 c0       	rjmp	.+170    	; 0x1968a <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   195e0:	00 e0       	ldi	r16, 0x00	; 0
   195e2:	11 e0       	ldi	r17, 0x01	; 1
   195e4:	ca 5e       	subi	r28, 0xEA	; 234
   195e6:	de 4f       	sbci	r29, 0xFE	; 254
   195e8:	28 81       	ld	r18, Y
   195ea:	39 81       	ldd	r19, Y+1	; 0x01
   195ec:	4a 81       	ldd	r20, Y+2	; 0x02
   195ee:	5b 81       	ldd	r21, Y+3	; 0x03
   195f0:	c6 51       	subi	r28, 0x16	; 22
   195f2:	d1 40       	sbci	r29, 0x01	; 1
   195f4:	b6 01       	movw	r22, r12
   195f6:	c7 01       	movw	r24, r14
   195f8:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
   195fc:	09 2e       	mov	r0, r25
   195fe:	00 0c       	add	r0, r0
   19600:	aa 0b       	sbc	r26, r26
   19602:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19604:	8f 3f       	cpi	r24, 0xFF	; 255
   19606:	91 05       	cpc	r25, r1
   19608:	a1 05       	cpc	r26, r1
   1960a:	b1 05       	cpc	r27, r1
   1960c:	09 f0       	breq	.+2      	; 0x19610 <lif_create_volume+0x2a4>
   1960e:	0c f4       	brge	.+2      	; 0x19612 <lif_create_volume+0x2a6>
   19610:	82 c1       	rjmp	.+772    	; 0x19916 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19612:	ca 5e       	subi	r28, 0xEA	; 234
   19614:	de 4f       	sbci	r29, 0xFE	; 254
   19616:	28 81       	ld	r18, Y
   19618:	39 81       	ldd	r19, Y+1	; 0x01
   1961a:	4a 81       	ldd	r20, Y+2	; 0x02
   1961c:	5b 81       	ldd	r21, Y+3	; 0x03
   1961e:	c6 51       	subi	r28, 0x16	; 22
   19620:	d1 40       	sbci	r29, 0x01	; 1
   19622:	28 0f       	add	r18, r24
   19624:	39 1f       	adc	r19, r25
   19626:	4a 1f       	adc	r20, r26
   19628:	5b 1f       	adc	r21, r27
   1962a:	ca 5e       	subi	r28, 0xEA	; 234
   1962c:	de 4f       	sbci	r29, 0xFE	; 254
   1962e:	28 83       	st	Y, r18
   19630:	39 83       	std	Y+1, r19	; 0x01
   19632:	4a 83       	std	Y+2, r20	; 0x02
   19634:	5b 83       	std	Y+3, r21	; 0x03
   19636:	c6 51       	subi	r28, 0x16	; 22
   19638:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   1963a:	c6 5e       	subi	r28, 0xE6	; 230
   1963c:	de 4f       	sbci	r29, 0xFE	; 254
   1963e:	88 81       	ld	r24, Y
   19640:	99 81       	ldd	r25, Y+1	; 0x01
   19642:	aa 81       	ldd	r26, Y+2	; 0x02
   19644:	bb 81       	ldd	r27, Y+3	; 0x03
   19646:	ca 51       	subi	r28, 0x1A	; 26
   19648:	d1 40       	sbci	r29, 0x01	; 1
   1964a:	ed b7       	in	r30, 0x3d	; 61
   1964c:	fe b7       	in	r31, 0x3e	; 62
   1964e:	84 83       	std	Z+4, r24	; 0x04
   19650:	95 83       	std	Z+5, r25	; 0x05
   19652:	a6 83       	std	Z+6, r26	; 0x06
   19654:	b7 83       	std	Z+7, r27	; 0x07
   19656:	61 82       	std	Z+1, r6	; 0x01
   19658:	72 82       	std	Z+2, r7	; 0x02
   1965a:	83 82       	std	Z+3, r8	; 0x03
   1965c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19660:	c6 5e       	subi	r28, 0xE6	; 230
   19662:	de 4f       	sbci	r29, 0xFE	; 254
   19664:	28 81       	ld	r18, Y
   19666:	39 81       	ldd	r19, Y+1	; 0x01
   19668:	4a 81       	ldd	r20, Y+2	; 0x02
   1966a:	5b 81       	ldd	r21, Y+3	; 0x03
   1966c:	ca 51       	subi	r28, 0x1A	; 26
   1966e:	d1 40       	sbci	r29, 0x01	; 1
   19670:	2f 5f       	subi	r18, 0xFF	; 255
   19672:	3f 4f       	sbci	r19, 0xFF	; 255
   19674:	4f 4f       	sbci	r20, 0xFF	; 255
   19676:	5f 4f       	sbci	r21, 0xFF	; 255
   19678:	c6 5e       	subi	r28, 0xE6	; 230
   1967a:	de 4f       	sbci	r29, 0xFE	; 254
   1967c:	28 83       	st	Y, r18
   1967e:	39 83       	std	Y+1, r19	; 0x01
   19680:	4a 83       	std	Y+2, r20	; 0x02
   19682:	5b 83       	std	Y+3, r21	; 0x03
   19684:	ca 51       	subi	r28, 0x1A	; 26
   19686:	d1 40       	sbci	r29, 0x01	; 1
   19688:	9d cf       	rjmp	.-198    	; 0x195c4 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   1968a:	c7 01       	movw	r24, r14
   1968c:	0e 94 ce c2 	call	0x1859c	; 0x1859c <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19690:	8f ef       	ldi	r24, 0xFF	; 255
   19692:	9f ef       	ldi	r25, 0xFF	; 255
   19694:	f7 01       	movw	r30, r14
   19696:	e6 5a       	subi	r30, 0xA6	; 166
   19698:	ff 4f       	sbci	r31, 0xFF	; 255
   1969a:	91 83       	std	Z+1, r25	; 0x01
   1969c:	80 83       	st	Z, r24
   1969e:	46 01       	movw	r8, r12
   196a0:	6e 01       	movw	r12, r28
   196a2:	9c ee       	ldi	r25, 0xEC	; 236
   196a4:	c9 1a       	sub	r12, r25
   196a6:	9e ef       	ldi	r25, 0xFE	; 254
   196a8:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   196aa:	b4 01       	movw	r22, r8
   196ac:	c7 01       	movw	r24, r14
   196ae:	0e 94 15 c1 	call	0x1822a	; 0x1822a <lif_dir2str>
   196b2:	a0 e2       	ldi	r26, 0x20	; 32
   196b4:	8a 0e       	add	r8, r26
   196b6:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   196b8:	c8 14       	cp	r12, r8
   196ba:	d9 04       	cpc	r13, r9
   196bc:	b1 f7       	brne	.-20     	; 0x196aa <lif_create_volume+0x33e>
   196be:	a1 2c       	mov	r10, r1
   196c0:	b1 2c       	mov	r11, r1
   196c2:	65 01       	movw	r12, r10
   196c4:	fe 01       	movw	r30, r28
   196c6:	74 96       	adiw	r30, 0x14	; 20
   196c8:	cc 5e       	subi	r28, 0xEC	; 236
   196ca:	de 4f       	sbci	r29, 0xFE	; 254
   196cc:	f9 83       	std	Y+1, r31	; 0x01
   196ce:	e8 83       	st	Y, r30
   196d0:	c4 51       	subi	r28, 0x14	; 20
   196d2:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   196d4:	84 e6       	ldi	r24, 0x64	; 100
   196d6:	28 2e       	mov	r2, r24
   196d8:	31 2c       	mov	r3, r1
   196da:	41 2c       	mov	r4, r1
   196dc:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   196de:	8a ec       	ldi	r24, 0xCA	; 202
   196e0:	99 e3       	ldi	r25, 0x39	; 57
   196e2:	3c 01       	movw	r6, r24
   196e4:	81 2c       	mov	r8, r1
   196e6:	c6 5e       	subi	r28, 0xE6	; 230
   196e8:	de 4f       	sbci	r29, 0xFE	; 254
   196ea:	28 81       	ld	r18, Y
   196ec:	39 81       	ldd	r19, Y+1	; 0x01
   196ee:	4a 81       	ldd	r20, Y+2	; 0x02
   196f0:	5b 81       	ldd	r21, Y+3	; 0x03
   196f2:	ca 51       	subi	r28, 0x1A	; 26
   196f4:	d1 40       	sbci	r29, 0x01	; 1
   196f6:	2a 0d       	add	r18, r10
   196f8:	3b 1d       	adc	r19, r11
   196fa:	4c 1d       	adc	r20, r12
   196fc:	5d 1d       	adc	r21, r13
   196fe:	ce 5d       	subi	r28, 0xDE	; 222
   19700:	de 4f       	sbci	r29, 0xFE	; 254
   19702:	28 83       	st	Y, r18
   19704:	39 83       	std	Y+1, r19	; 0x01
   19706:	4a 83       	std	Y+2, r20	; 0x02
   19708:	5b 83       	std	Y+3, r21	; 0x03
   1970a:	c2 52       	subi	r28, 0x22	; 34
   1970c:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1970e:	ca 5d       	subi	r28, 0xDA	; 218
   19710:	de 4f       	sbci	r29, 0xFE	; 254
   19712:	88 81       	ld	r24, Y
   19714:	99 81       	ldd	r25, Y+1	; 0x01
   19716:	aa 81       	ldd	r26, Y+2	; 0x02
   19718:	bb 81       	ldd	r27, Y+3	; 0x03
   1971a:	c6 52       	subi	r28, 0x26	; 38
   1971c:	d1 40       	sbci	r29, 0x01	; 1
   1971e:	a8 16       	cp	r10, r24
   19720:	b9 06       	cpc	r11, r25
   19722:	ca 06       	cpc	r12, r26
   19724:	db 06       	cpc	r13, r27
   19726:	0c f0       	brlt	.+2      	; 0x1972a <lif_create_volume+0x3be>
   19728:	58 c0       	rjmp	.+176    	; 0x197da <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1972a:	00 e0       	ldi	r16, 0x00	; 0
   1972c:	11 e0       	ldi	r17, 0x01	; 1
   1972e:	ca 5e       	subi	r28, 0xEA	; 234
   19730:	de 4f       	sbci	r29, 0xFE	; 254
   19732:	28 81       	ld	r18, Y
   19734:	39 81       	ldd	r19, Y+1	; 0x01
   19736:	4a 81       	ldd	r20, Y+2	; 0x02
   19738:	5b 81       	ldd	r21, Y+3	; 0x03
   1973a:	c6 51       	subi	r28, 0x16	; 22
   1973c:	d1 40       	sbci	r29, 0x01	; 1
   1973e:	be 01       	movw	r22, r28
   19740:	6c 5e       	subi	r22, 0xEC	; 236
   19742:	7f 4f       	sbci	r23, 0xFF	; 255
   19744:	c7 01       	movw	r24, r14
   19746:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
   1974a:	09 2e       	mov	r0, r25
   1974c:	00 0c       	add	r0, r0
   1974e:	aa 0b       	sbc	r26, r26
   19750:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19752:	8f 3f       	cpi	r24, 0xFF	; 255
   19754:	91 05       	cpc	r25, r1
   19756:	a1 05       	cpc	r26, r1
   19758:	b1 05       	cpc	r27, r1
   1975a:	09 f0       	breq	.+2      	; 0x1975e <lif_create_volume+0x3f2>
   1975c:	0c f4       	brge	.+2      	; 0x19760 <lif_create_volume+0x3f4>
   1975e:	db c0       	rjmp	.+438    	; 0x19916 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19760:	ca 5e       	subi	r28, 0xEA	; 234
   19762:	de 4f       	sbci	r29, 0xFE	; 254
   19764:	28 81       	ld	r18, Y
   19766:	39 81       	ldd	r19, Y+1	; 0x01
   19768:	4a 81       	ldd	r20, Y+2	; 0x02
   1976a:	5b 81       	ldd	r21, Y+3	; 0x03
   1976c:	c6 51       	subi	r28, 0x16	; 22
   1976e:	d1 40       	sbci	r29, 0x01	; 1
   19770:	28 0f       	add	r18, r24
   19772:	39 1f       	adc	r19, r25
   19774:	4a 1f       	adc	r20, r26
   19776:	5b 1f       	adc	r21, r27
   19778:	ca 5e       	subi	r28, 0xEA	; 234
   1977a:	de 4f       	sbci	r29, 0xFE	; 254
   1977c:	28 83       	st	Y, r18
   1977e:	39 83       	std	Y+1, r19	; 0x01
   19780:	4a 83       	std	Y+2, r20	; 0x02
   19782:	5b 83       	std	Y+3, r21	; 0x03
   19784:	c6 51       	subi	r28, 0x16	; 22
   19786:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19788:	ce 5d       	subi	r28, 0xDE	; 222
   1978a:	de 4f       	sbci	r29, 0xFE	; 254
   1978c:	68 81       	ld	r22, Y
   1978e:	79 81       	ldd	r23, Y+1	; 0x01
   19790:	8a 81       	ldd	r24, Y+2	; 0x02
   19792:	9b 81       	ldd	r25, Y+3	; 0x03
   19794:	c2 52       	subi	r28, 0x22	; 34
   19796:	d1 40       	sbci	r29, 0x01	; 1
   19798:	a2 01       	movw	r20, r4
   1979a:	91 01       	movw	r18, r2
   1979c:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
   197a0:	67 2b       	or	r22, r23
   197a2:	68 2b       	or	r22, r24
   197a4:	69 2b       	or	r22, r25
   197a6:	99 f4       	brne	.+38     	; 0x197ce <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   197a8:	ce 5d       	subi	r28, 0xDE	; 222
   197aa:	de 4f       	sbci	r29, 0xFE	; 254
   197ac:	88 81       	ld	r24, Y
   197ae:	99 81       	ldd	r25, Y+1	; 0x01
   197b0:	aa 81       	ldd	r26, Y+2	; 0x02
   197b2:	bb 81       	ldd	r27, Y+3	; 0x03
   197b4:	c2 52       	subi	r28, 0x22	; 34
   197b6:	d1 40       	sbci	r29, 0x01	; 1
   197b8:	ed b7       	in	r30, 0x3d	; 61
   197ba:	fe b7       	in	r31, 0x3e	; 62
   197bc:	84 83       	std	Z+4, r24	; 0x04
   197be:	95 83       	std	Z+5, r25	; 0x05
   197c0:	a6 83       	std	Z+6, r26	; 0x06
   197c2:	b7 83       	std	Z+7, r27	; 0x07
   197c4:	61 82       	std	Z+1, r6	; 0x01
   197c6:	72 82       	std	Z+2, r7	; 0x02
   197c8:	83 82       	std	Z+3, r8	; 0x03
   197ca:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   197ce:	ff ef       	ldi	r31, 0xFF	; 255
   197d0:	af 1a       	sub	r10, r31
   197d2:	bf 0a       	sbc	r11, r31
   197d4:	cf 0a       	sbc	r12, r31
   197d6:	df 0a       	sbc	r13, r31
   197d8:	86 cf       	rjmp	.-244    	; 0x196e6 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   197da:	80 e0       	ldi	r24, 0x00	; 0
   197dc:	91 e0       	ldi	r25, 0x01	; 1
   197de:	cc 5e       	subi	r28, 0xEC	; 236
   197e0:	de 4f       	sbci	r29, 0xFE	; 254
   197e2:	a8 81       	ld	r26, Y
   197e4:	b9 81       	ldd	r27, Y+1	; 0x01
   197e6:	c4 51       	subi	r28, 0x14	; 20
   197e8:	d1 40       	sbci	r29, 0x01	; 1
   197ea:	fc 01       	movw	r30, r24
   197ec:	1d 92       	st	X+, r1
   197ee:	31 97       	sbiw	r30, 0x01	; 1
   197f0:	e9 f7       	brne	.-6      	; 0x197ec <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   197f2:	81 2c       	mov	r8, r1
   197f4:	91 2c       	mov	r9, r1
   197f6:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   197f8:	8d eb       	ldi	r24, 0xBD	; 189
   197fa:	99 e3       	ldi	r25, 0x39	; 57
   197fc:	9c 01       	movw	r18, r24
   197fe:	40 e0       	ldi	r20, 0x00	; 0
   19800:	c6 5e       	subi	r28, 0xE6	; 230
   19802:	de 4f       	sbci	r29, 0xFE	; 254
   19804:	28 83       	st	Y, r18
   19806:	39 83       	std	Y+1, r19	; 0x01
   19808:	4a 83       	std	Y+2, r20	; 0x02
   1980a:	ca 51       	subi	r28, 0x1A	; 26
   1980c:	d1 40       	sbci	r29, 0x01	; 1
   1980e:	ce 5d       	subi	r28, 0xDE	; 222
   19810:	de 4f       	sbci	r29, 0xFE	; 254
   19812:	48 80       	ld	r4, Y
   19814:	59 80       	ldd	r5, Y+1	; 0x01
   19816:	6a 80       	ldd	r6, Y+2	; 0x02
   19818:	7b 80       	ldd	r7, Y+3	; 0x03
   1981a:	c2 52       	subi	r28, 0x22	; 34
   1981c:	d1 40       	sbci	r29, 0x01	; 1
   1981e:	48 0c       	add	r4, r8
   19820:	59 1c       	adc	r5, r9
   19822:	6a 1c       	adc	r6, r10
   19824:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19826:	c2 5e       	subi	r28, 0xE2	; 226
   19828:	de 4f       	sbci	r29, 0xFE	; 254
   1982a:	28 81       	ld	r18, Y
   1982c:	39 81       	ldd	r19, Y+1	; 0x01
   1982e:	4a 81       	ldd	r20, Y+2	; 0x02
   19830:	5b 81       	ldd	r21, Y+3	; 0x03
   19832:	ce 51       	subi	r28, 0x1E	; 30
   19834:	d1 40       	sbci	r29, 0x01	; 1
   19836:	82 16       	cp	r8, r18
   19838:	93 06       	cpc	r9, r19
   1983a:	a4 06       	cpc	r10, r20
   1983c:	b5 06       	cpc	r11, r21
   1983e:	0c f0       	brlt	.+2      	; 0x19842 <lif_create_volume+0x4d6>
   19840:	53 c0       	rjmp	.+166    	; 0x198e8 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19842:	00 e0       	ldi	r16, 0x00	; 0
   19844:	11 e0       	ldi	r17, 0x01	; 1
   19846:	ca 5e       	subi	r28, 0xEA	; 234
   19848:	de 4f       	sbci	r29, 0xFE	; 254
   1984a:	28 81       	ld	r18, Y
   1984c:	39 81       	ldd	r19, Y+1	; 0x01
   1984e:	4a 81       	ldd	r20, Y+2	; 0x02
   19850:	5b 81       	ldd	r21, Y+3	; 0x03
   19852:	c6 51       	subi	r28, 0x16	; 22
   19854:	d1 40       	sbci	r29, 0x01	; 1
   19856:	be 01       	movw	r22, r28
   19858:	6c 5e       	subi	r22, 0xEC	; 236
   1985a:	7f 4f       	sbci	r23, 0xFF	; 255
   1985c:	c7 01       	movw	r24, r14
   1985e:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
   19862:	09 2e       	mov	r0, r25
   19864:	00 0c       	add	r0, r0
   19866:	aa 0b       	sbc	r26, r26
   19868:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   1986a:	8f 3f       	cpi	r24, 0xFF	; 255
   1986c:	91 05       	cpc	r25, r1
   1986e:	a1 05       	cpc	r26, r1
   19870:	b1 05       	cpc	r27, r1
   19872:	09 f0       	breq	.+2      	; 0x19876 <lif_create_volume+0x50a>
   19874:	0c f4       	brge	.+2      	; 0x19878 <lif_create_volume+0x50c>
   19876:	4f c0       	rjmp	.+158    	; 0x19916 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19878:	ca 5e       	subi	r28, 0xEA	; 234
   1987a:	de 4f       	sbci	r29, 0xFE	; 254
   1987c:	28 81       	ld	r18, Y
   1987e:	39 81       	ldd	r19, Y+1	; 0x01
   19880:	4a 81       	ldd	r20, Y+2	; 0x02
   19882:	5b 81       	ldd	r21, Y+3	; 0x03
   19884:	c6 51       	subi	r28, 0x16	; 22
   19886:	d1 40       	sbci	r29, 0x01	; 1
   19888:	28 0f       	add	r18, r24
   1988a:	39 1f       	adc	r19, r25
   1988c:	4a 1f       	adc	r20, r26
   1988e:	5b 1f       	adc	r21, r27
   19890:	ca 5e       	subi	r28, 0xEA	; 234
   19892:	de 4f       	sbci	r29, 0xFE	; 254
   19894:	28 83       	st	Y, r18
   19896:	39 83       	std	Y+1, r19	; 0x01
   19898:	4a 83       	std	Y+2, r20	; 0x02
   1989a:	5b 83       	std	Y+3, r21	; 0x03
   1989c:	c6 51       	subi	r28, 0x16	; 22
   1989e:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   198a0:	c3 01       	movw	r24, r6
   198a2:	b2 01       	movw	r22, r4
   198a4:	24 e6       	ldi	r18, 0x64	; 100
   198a6:	30 e0       	ldi	r19, 0x00	; 0
   198a8:	40 e0       	ldi	r20, 0x00	; 0
   198aa:	50 e0       	ldi	r21, 0x00	; 0
   198ac:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
   198b0:	67 2b       	or	r22, r23
   198b2:	68 2b       	or	r22, r24
   198b4:	69 2b       	or	r22, r25
   198b6:	91 f4       	brne	.+36     	; 0x198dc <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   198b8:	ed b7       	in	r30, 0x3d	; 61
   198ba:	fe b7       	in	r31, 0x3e	; 62
   198bc:	44 82       	std	Z+4, r4	; 0x04
   198be:	55 82       	std	Z+5, r5	; 0x05
   198c0:	66 82       	std	Z+6, r6	; 0x06
   198c2:	77 82       	std	Z+7, r7	; 0x07
   198c4:	c6 5e       	subi	r28, 0xE6	; 230
   198c6:	de 4f       	sbci	r29, 0xFE	; 254
   198c8:	28 81       	ld	r18, Y
   198ca:	39 81       	ldd	r19, Y+1	; 0x01
   198cc:	4a 81       	ldd	r20, Y+2	; 0x02
   198ce:	ca 51       	subi	r28, 0x1A	; 26
   198d0:	d1 40       	sbci	r29, 0x01	; 1
   198d2:	21 83       	std	Z+1, r18	; 0x01
   198d4:	32 83       	std	Z+2, r19	; 0x02
   198d6:	43 83       	std	Z+3, r20	; 0x03
   198d8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   198dc:	ff ef       	ldi	r31, 0xFF	; 255
   198de:	8f 1a       	sub	r8, r31
   198e0:	9f 0a       	sbc	r9, r31
   198e2:	af 0a       	sbc	r10, r31
   198e4:	bf 0a       	sbc	r11, r31
   198e6:	93 cf       	rjmp	.-218    	; 0x1980e <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   198e8:	ed b7       	in	r30, 0x3d	; 61
   198ea:	fe b7       	in	r31, 0x3e	; 62
   198ec:	44 82       	std	Z+4, r4	; 0x04
   198ee:	55 82       	std	Z+5, r5	; 0x05
   198f0:	66 82       	std	Z+6, r6	; 0x06
   198f2:	77 82       	std	Z+7, r7	; 0x07
   198f4:	80 eb       	ldi	r24, 0xB0	; 176
   198f6:	99 e3       	ldi	r25, 0x39	; 57
   198f8:	a0 e0       	ldi	r26, 0x00	; 0
   198fa:	81 83       	std	Z+1, r24	; 0x01
   198fc:	92 83       	std	Z+2, r25	; 0x02
   198fe:	a3 83       	std	Z+3, r26	; 0x03
   19900:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19904:	8f ef       	ldi	r24, 0xFF	; 255
   19906:	9f ef       	ldi	r25, 0xFF	; 255
   19908:	f7 01       	movw	r30, r14
   1990a:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1990c:	80 a3       	std	Z+32, r24	; 0x20
   1990e:	c7 01       	movw	r24, r14
   19910:	1a d8       	rcall	.-4044   	; 0x18946 <lif_check_volume>
   19912:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19914:	19 f4       	brne	.+6      	; 0x1991c <lif_create_volume+0x5b0>
   19916:	c7 01       	movw	r24, r14
   19918:	b6 da       	rcall	.-2708   	; 0x18e86 <lif_close_volume>
   1991a:	08 c0       	rjmp	.+16     	; 0x1992c <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   1991c:	c7 01       	movw	r24, r14
   1991e:	1c dc       	rcall	.-1992   	; 0x19158 <lif_updatefree>
   19920:	6c 01       	movw	r12, r24
   19922:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19924:	31 f4       	brne	.+12     	; 0x19932 <lif_create_volume+0x5c6>
   19926:	c7 01       	movw	r24, r14
   19928:	ae da       	rcall	.-2724   	; 0x18e86 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1992a:	04 c0       	rjmp	.+8      	; 0x19934 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1992c:	c1 2c       	mov	r12, r1
   1992e:	d1 2c       	mov	r13, r1
   19930:	01 c0       	rjmp	.+2      	; 0x19934 <lif_create_volume+0x5c8>
   19932:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19934:	c6 01       	movw	r24, r12
   19936:	c7 5d       	subi	r28, 0xD7	; 215
   19938:	de 4f       	sbci	r29, 0xFE	; 254
   1993a:	e2 e1       	ldi	r30, 0x12	; 18
   1993c:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00019940 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19940:	ad e1       	ldi	r26, 0x1D	; 29
   19942:	b0 e0       	ldi	r27, 0x00	; 0
   19944:	e6 ea       	ldi	r30, 0xA6	; 166
   19946:	fc ec       	ldi	r31, 0xCC	; 204
   19948:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   1994c:	9d 8f       	std	Y+29, r25	; 0x1d
   1994e:	8c 8f       	std	Y+28, r24	; 0x1c
   19950:	4a 01       	movw	r8, r20
   19952:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19954:	fc 01       	movw	r30, r24
   19956:	c4 84       	ldd	r12, Z+12	; 0x0c
   19958:	d5 84       	ldd	r13, Z+13	; 0x0d
   1995a:	e6 84       	ldd	r14, Z+14	; 0x0e
   1995c:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   1995e:	fc db       	rcall	.-2056   	; 0x19158 <lif_updatefree>
   19960:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19962:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19964:	40 8d       	ldd	r20, Z+24	; 0x18
   19966:	51 8d       	ldd	r21, Z+25	; 0x19
   19968:	62 8d       	ldd	r22, Z+26	; 0x1a
   1996a:	73 8d       	ldd	r23, Z+27	; 0x1b
   1996c:	89 2b       	or	r24, r25
   1996e:	99 f4       	brne	.+38     	; 0x19996 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19970:	ed b7       	in	r30, 0x3d	; 61
   19972:	fe b7       	in	r31, 0x3e	; 62
   19974:	80 86       	std	Z+8, r8	; 0x08
   19976:	91 86       	std	Z+9, r9	; 0x09
   19978:	a2 86       	std	Z+10, r10	; 0x0a
   1997a:	b3 86       	std	Z+11, r11	; 0x0b
   1997c:	44 83       	std	Z+4, r20	; 0x04
   1997e:	55 83       	std	Z+5, r21	; 0x05
   19980:	66 83       	std	Z+6, r22	; 0x06
   19982:	77 83       	std	Z+7, r23	; 0x07
   19984:	81 ed       	ldi	r24, 0xD1	; 209
   19986:	98 e3       	ldi	r25, 0x38	; 56
   19988:	a0 e0       	ldi	r26, 0x00	; 0
   1998a:	81 83       	std	Z+1, r24	; 0x01
   1998c:	92 83       	std	Z+2, r25	; 0x02
   1998e:	a3 83       	std	Z+3, r26	; 0x03
   19990:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   19994:	2f c1       	rjmp	.+606    	; 0x19bf4 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19996:	48 15       	cp	r20, r8
   19998:	59 05       	cpc	r21, r9
   1999a:	6a 05       	cpc	r22, r10
   1999c:	7b 05       	cpc	r23, r11
   1999e:	c4 f0       	brlt	.+48     	; 0x199d0 <lif_newdir+0x90>
   199a0:	44 24       	eor	r4, r4
   199a2:	43 94       	inc	r4
   199a4:	51 2c       	mov	r5, r1
   199a6:	61 2c       	mov	r6, r1
   199a8:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   199aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199ae:	86 5a       	subi	r24, 0xA6	; 166
   199b0:	9f 4f       	sbci	r25, 0xFF	; 255
   199b2:	9d 8b       	std	Y+21, r25	; 0x15
   199b4:	8c 8b       	std	Y+20, r24	; 0x14
   199b6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199b8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199ba:	e4 5a       	subi	r30, 0xA4	; 164
   199bc:	ff 4f       	sbci	r31, 0xFF	; 255
   199be:	fb 8b       	std	Y+19, r31	; 0x13
   199c0:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   199c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199c6:	80 5a       	subi	r24, 0xA0	; 160
   199c8:	9f 4f       	sbci	r25, 0xFF	; 255
   199ca:	9f 8b       	std	Y+23, r25	; 0x17
   199cc:	8e 8b       	std	Y+22, r24	; 0x16
   199ce:	21 c0       	rjmp	.+66     	; 0x19a12 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   199d0:	ed b7       	in	r30, 0x3d	; 61
   199d2:	fe b7       	in	r31, 0x3e	; 62
   199d4:	44 83       	std	Z+4, r20	; 0x04
   199d6:	55 83       	std	Z+5, r21	; 0x05
   199d8:	66 83       	std	Z+6, r22	; 0x06
   199da:	77 83       	std	Z+7, r23	; 0x07
   199dc:	88 ea       	ldi	r24, 0xA8	; 168
   199de:	98 e3       	ldi	r25, 0x38	; 56
   199e0:	a0 e0       	ldi	r26, 0x00	; 0
   199e2:	81 83       	std	Z+1, r24	; 0x01
   199e4:	92 83       	std	Z+2, r25	; 0x02
   199e6:	a3 83       	std	Z+3, r26	; 0x03
   199e8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   199ec:	03 c1       	rjmp	.+518    	; 0x19bf4 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   199ee:	ec 89       	ldd	r30, Y+20	; 0x14
   199f0:	fd 89       	ldd	r31, Y+21	; 0x15
   199f2:	80 81       	ld	r24, Z
   199f4:	91 81       	ldd	r25, Z+1	; 0x01
   199f6:	8f 3f       	cpi	r24, 0xFF	; 255
   199f8:	ff ef       	ldi	r31, 0xFF	; 255
   199fa:	9f 07       	cpc	r25, r31
   199fc:	a1 f0       	breq	.+40     	; 0x19a26 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   199fe:	89 2b       	or	r24, r25
   19a00:	09 f0       	breq	.+2      	; 0x19a04 <lif_newdir+0xc4>
   19a02:	ce c0       	rjmp	.+412    	; 0x19ba0 <lif_newdir+0x260>
        {
            if(freestate == 0)
   19a04:	61 14       	cp	r6, r1
   19a06:	71 04       	cpc	r7, r1
   19a08:	09 f4       	brne	.+2      	; 0x19a0c <lif_newdir+0xcc>
   19a0a:	c1 c0       	rjmp	.+386    	; 0x19b8e <lif_newdir+0x24e>
   19a0c:	ff ef       	ldi	r31, 0xFF	; 255
   19a0e:	4f 1a       	sub	r4, r31
   19a10:	5f 0a       	sbc	r5, r31
   19a12:	82 01       	movw	r16, r4
   19a14:	01 50       	subi	r16, 0x01	; 1
   19a16:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19a18:	b8 01       	movw	r22, r16
   19a1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a1e:	c1 da       	rcall	.-2686   	; 0x18fa2 <lif_readdirindex>
   19a20:	89 2b       	or	r24, r25
   19a22:	29 f7       	brne	.-54     	; 0x199ee <lif_newdir+0xae>
   19a24:	e7 c0       	rjmp	.+462    	; 0x19bf4 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19a26:	22 e0       	ldi	r18, 0x02	; 2
   19a28:	62 16       	cp	r6, r18
   19a2a:	71 04       	cpc	r7, r1
   19a2c:	09 f0       	breq	.+2      	; 0x19a30 <lif_newdir+0xf0>
   19a2e:	46 c0       	rjmp	.+140    	; 0x19abc <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19a30:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a32:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a34:	0e 94 ce c2 	call	0x1859c	; 0x1859c <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19a38:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a3a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a3c:	e4 5a       	subi	r30, 0xA4	; 164
   19a3e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a40:	88 8d       	ldd	r24, Y+24	; 0x18
   19a42:	80 83       	st	Z, r24
   19a44:	99 8d       	ldd	r25, Y+25	; 0x19
   19a46:	91 83       	std	Z+1, r25	; 0x01
   19a48:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19a4a:	22 83       	std	Z+2, r18	; 0x02
   19a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19a4e:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   19a50:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a52:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a54:	e0 5a       	subi	r30, 0xA0	; 160
   19a56:	ff 4f       	sbci	r31, 0xFF	; 255
   19a58:	80 82       	st	Z, r8
   19a5a:	91 82       	std	Z+1, r9	; 0x01
   19a5c:	a2 82       	std	Z+2, r10	; 0x02
   19a5e:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   19a60:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a62:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a64:	84 89       	ldd	r24, Z+20	; 0x14
   19a66:	95 89       	ldd	r25, Z+21	; 0x15
   19a68:	a6 89       	ldd	r26, Z+22	; 0x16
   19a6a:	b7 89       	ldd	r27, Z+23	; 0x17
   19a6c:	88 0d       	add	r24, r8
   19a6e:	99 1d       	adc	r25, r9
   19a70:	aa 1d       	adc	r26, r10
   19a72:	bb 1d       	adc	r27, r11
   19a74:	84 8b       	std	Z+20, r24	; 0x14
   19a76:	95 8b       	std	Z+21, r25	; 0x15
   19a78:	a6 8b       	std	Z+22, r26	; 0x16
   19a7a:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   19a7c:	80 8d       	ldd	r24, Z+24	; 0x18
   19a7e:	91 8d       	ldd	r25, Z+25	; 0x19
   19a80:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a82:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a84:	88 19       	sub	r24, r8
   19a86:	99 09       	sbc	r25, r9
   19a88:	aa 09       	sbc	r26, r10
   19a8a:	bb 09       	sbc	r27, r11
   19a8c:	80 8f       	std	Z+24, r24	; 0x18
   19a8e:	91 8f       	std	Z+25, r25	; 0x19
   19a90:	a2 8f       	std	Z+26, r26	; 0x1a
   19a92:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   19a94:	84 8d       	ldd	r24, Z+28	; 0x1c
   19a96:	95 8d       	ldd	r25, Z+29	; 0x1d
   19a98:	01 96       	adiw	r24, 0x01	; 1
   19a9a:	95 8f       	std	Z+29, r25	; 0x1d
   19a9c:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19a9e:	86 8d       	ldd	r24, Z+30	; 0x1e
   19aa0:	97 8d       	ldd	r25, Z+31	; 0x1f
   19aa2:	01 97       	sbiw	r24, 0x01	; 1
   19aa4:	97 8f       	std	Z+31, r25	; 0x1f
   19aa6:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   19aa8:	20 a2       	std	Z+32, r2	; 0x20
   19aaa:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19aac:	b1 01       	movw	r22, r2
   19aae:	cf 01       	movw	r24, r30
   19ab0:	df da       	rcall	.-2626   	; 0x19070 <lif_writedirindex>
   19ab2:	89 2b       	or	r24, r25
   19ab4:	09 f4       	brne	.+2      	; 0x19ab8 <lif_newdir+0x178>
   19ab6:	9e c0       	rjmp	.+316    	; 0x19bf4 <lif_newdir+0x2b4>
   19ab8:	c1 01       	movw	r24, r2
   19aba:	9e c0       	rjmp	.+316    	; 0x19bf8 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19abc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ac0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ac4:	92 ff       	sbrs	r25, 2
   19ac6:	1e c0       	rjmp	.+60     	; 0x19b04 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19ac8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19aca:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19acc:	80 8d       	ldd	r24, Z+24	; 0x18
   19ace:	91 8d       	ldd	r25, Z+25	; 0x19
   19ad0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19ad2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19ad4:	ed b7       	in	r30, 0x3d	; 61
   19ad6:	fe b7       	in	r31, 0x3e	; 62
   19ad8:	86 87       	std	Z+14, r24	; 0x0e
   19ada:	97 87       	std	Z+15, r25	; 0x0f
   19adc:	a0 8b       	std	Z+16, r26	; 0x10
   19ade:	b1 8b       	std	Z+17, r27	; 0x11
   19ae0:	82 86       	std	Z+10, r8	; 0x0a
   19ae2:	93 86       	std	Z+11, r9	; 0x0b
   19ae4:	a4 86       	std	Z+12, r10	; 0x0c
   19ae6:	b5 86       	std	Z+13, r11	; 0x0d
   19ae8:	c6 82       	std	Z+6, r12	; 0x06
   19aea:	d7 82       	std	Z+7, r13	; 0x07
   19aec:	e0 86       	std	Z+8, r14	; 0x08
   19aee:	f1 86       	std	Z+9, r15	; 0x09
   19af0:	15 83       	std	Z+5, r17	; 0x05
   19af2:	04 83       	std	Z+4, r16	; 0x04
   19af4:	87 e5       	ldi	r24, 0x57	; 87
   19af6:	98 e3       	ldi	r25, 0x38	; 56
   19af8:	a0 e0       	ldi	r26, 0x00	; 0
   19afa:	81 83       	std	Z+1, r24	; 0x01
   19afc:	92 83       	std	Z+2, r25	; 0x02
   19afe:	a3 83       	std	Z+3, r26	; 0x03
   19b00:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19b04:	b8 01       	movw	r22, r16
   19b06:	6f 5f       	subi	r22, 0xFF	; 255
   19b08:	7f 4f       	sbci	r23, 0xFF	; 255
   19b0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b0e:	0c db       	rcall	.-2536   	; 0x19128 <lif_writedirEOF>
   19b10:	89 2b       	or	r24, r25
   19b12:	09 f4       	brne	.+2      	; 0x19b16 <lif_newdir+0x1d6>
   19b14:	6f c0       	rjmp	.+222    	; 0x19bf4 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   19b16:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b18:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b1a:	0e 94 ce c2 	call	0x1859c	; 0x1859c <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19b1e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b20:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b22:	e4 5a       	subi	r30, 0xA4	; 164
   19b24:	ff 4f       	sbci	r31, 0xFF	; 255
   19b26:	c0 82       	st	Z, r12
   19b28:	d1 82       	std	Z+1, r13	; 0x01
   19b2a:	e2 82       	std	Z+2, r14	; 0x02
   19b2c:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   19b2e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b30:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b32:	e0 5a       	subi	r30, 0xA0	; 160
   19b34:	ff 4f       	sbci	r31, 0xFF	; 255
   19b36:	80 82       	st	Z, r8
   19b38:	91 82       	std	Z+1, r9	; 0x01
   19b3a:	a2 82       	std	Z+2, r10	; 0x02
   19b3c:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   19b3e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b40:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b42:	84 89       	ldd	r24, Z+20	; 0x14
   19b44:	95 89       	ldd	r25, Z+21	; 0x15
   19b46:	a6 89       	ldd	r26, Z+22	; 0x16
   19b48:	b7 89       	ldd	r27, Z+23	; 0x17
   19b4a:	88 0d       	add	r24, r8
   19b4c:	99 1d       	adc	r25, r9
   19b4e:	aa 1d       	adc	r26, r10
   19b50:	bb 1d       	adc	r27, r11
   19b52:	84 8b       	std	Z+20, r24	; 0x14
   19b54:	95 8b       	std	Z+21, r25	; 0x15
   19b56:	a6 8b       	std	Z+22, r26	; 0x16
   19b58:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   19b5a:	80 8d       	ldd	r24, Z+24	; 0x18
   19b5c:	91 8d       	ldd	r25, Z+25	; 0x19
   19b5e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19b60:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19b62:	88 19       	sub	r24, r8
   19b64:	99 09       	sbc	r25, r9
   19b66:	aa 09       	sbc	r26, r10
   19b68:	bb 09       	sbc	r27, r11
   19b6a:	80 8f       	std	Z+24, r24	; 0x18
   19b6c:	91 8f       	std	Z+25, r25	; 0x19
   19b6e:	a2 8f       	std	Z+26, r26	; 0x1a
   19b70:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   19b72:	84 8d       	ldd	r24, Z+28	; 0x1c
   19b74:	95 8d       	ldd	r25, Z+29	; 0x1d
   19b76:	01 96       	adiw	r24, 0x01	; 1
   19b78:	95 8f       	std	Z+29, r25	; 0x1d
   19b7a:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19b7c:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19b7e:	00 a3       	std	Z+32, r16	; 0x20
   19b80:	b8 01       	movw	r22, r16
   19b82:	cf 01       	movw	r24, r30
   19b84:	75 da       	rcall	.-2838   	; 0x19070 <lif_writedirindex>
   19b86:	89 2b       	or	r24, r25
   19b88:	a9 f1       	breq	.+106    	; 0x19bf4 <lif_newdir+0x2b4>
   19b8a:	c8 01       	movw	r24, r16
   19b8c:	35 c0       	rjmp	.+106    	; 0x19bf8 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19b8e:	c8 8e       	std	Y+24, r12	; 0x18
   19b90:	d9 8e       	std	Y+25, r13	; 0x19
   19b92:	ea 8e       	std	Y+26, r14	; 0x1a
   19b94:	fb 8e       	std	Y+27, r15	; 0x1b
   19b96:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19b98:	66 24       	eor	r6, r6
   19b9a:	63 94       	inc	r6
   19b9c:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19b9e:	36 cf       	rjmp	.-404    	; 0x19a0c <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19ba0:	f1 e0       	ldi	r31, 0x01	; 1
   19ba2:	6f 16       	cp	r6, r31
   19ba4:	71 04       	cpc	r7, r1
   19ba6:	a9 f4       	brne	.+42     	; 0x19bd2 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19ba8:	ea 89       	ldd	r30, Y+18	; 0x12
   19baa:	fb 89       	ldd	r31, Y+19	; 0x13
   19bac:	80 81       	ld	r24, Z
   19bae:	91 81       	ldd	r25, Z+1	; 0x01
   19bb0:	a2 81       	ldd	r26, Z+2	; 0x02
   19bb2:	b3 81       	ldd	r27, Z+3	; 0x03
   19bb4:	8c 19       	sub	r24, r12
   19bb6:	9d 09       	sbc	r25, r13
   19bb8:	ae 09       	sbc	r26, r14
   19bba:	bf 09       	sbc	r27, r15
   19bbc:	88 15       	cp	r24, r8
   19bbe:	99 05       	cpc	r25, r9
   19bc0:	aa 05       	cpc	r26, r10
   19bc2:	bb 05       	cpc	r27, r11
   19bc4:	1c f4       	brge	.+6      	; 0x19bcc <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19bc6:	61 2c       	mov	r6, r1
   19bc8:	71 2c       	mov	r7, r1
   19bca:	03 c0       	rjmp	.+6      	; 0x19bd2 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19bcc:	82 e0       	ldi	r24, 0x02	; 2
   19bce:	68 2e       	mov	r6, r24
   19bd0:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19bd2:	ea 89       	ldd	r30, Y+18	; 0x12
   19bd4:	fb 89       	ldd	r31, Y+19	; 0x13
   19bd6:	c0 80       	ld	r12, Z
   19bd8:	d1 80       	ldd	r13, Z+1	; 0x01
   19bda:	e2 80       	ldd	r14, Z+2	; 0x02
   19bdc:	f3 80       	ldd	r15, Z+3	; 0x03
   19bde:	ee 89       	ldd	r30, Y+22	; 0x16
   19be0:	ff 89       	ldd	r31, Y+23	; 0x17
   19be2:	80 81       	ld	r24, Z
   19be4:	91 81       	ldd	r25, Z+1	; 0x01
   19be6:	a2 81       	ldd	r26, Z+2	; 0x02
   19be8:	b3 81       	ldd	r27, Z+3	; 0x03
   19bea:	c8 0e       	add	r12, r24
   19bec:	d9 1e       	adc	r13, r25
   19bee:	ea 1e       	adc	r14, r26
   19bf0:	fb 1e       	adc	r15, r27
   19bf2:	0c cf       	rjmp	.-488    	; 0x19a0c <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19bf4:	8f ef       	ldi	r24, 0xFF	; 255
   19bf6:	9f ef       	ldi	r25, 0xFF	; 255
}
   19bf8:	6d 96       	adiw	r28, 0x1d	; 29
   19bfa:	e2 e1       	ldi	r30, 0x12	; 18
   19bfc:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

00019c00 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19c00:	a9 e3       	ldi	r26, 0x39	; 57
   19c02:	b1 e0       	ldi	r27, 0x01	; 1
   19c04:	e6 e0       	ldi	r30, 0x06	; 6
   19c06:	fe ec       	ldi	r31, 0xCE	; 206
   19c08:	0c 94 5e e2 	jmp	0x1c4bc	; 0x1c4bc <__prologue_saves__+0xc>
   19c0c:	6c 01       	movw	r12, r24
   19c0e:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19c10:	be 01       	movw	r22, r28
   19c12:	66 5f       	subi	r22, 0xF6	; 246
   19c14:	7e 4f       	sbci	r23, 0xFE	; 254
   19c16:	0e 94 1d be 	call	0x17c3a	; 0x17c3a <lif_stat>
   19c1a:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19c1c:	00 97       	sbiw	r24, 0x00	; 0
   19c1e:	09 f1       	breq	.+66     	; 0x19c62 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19c20:	fc 01       	movw	r30, r24
   19c22:	80 8d       	ldd	r24, Z+24	; 0x18
   19c24:	91 8d       	ldd	r25, Z+25	; 0x19
   19c26:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19c28:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19c2a:	81 15       	cp	r24, r1
   19c2c:	f2 e0       	ldi	r31, 0x02	; 2
   19c2e:	9f 07       	cpc	r25, r31
   19c30:	a1 05       	cpc	r26, r1
   19c32:	b1 05       	cpc	r27, r1
   19c34:	c8 f4       	brcc	.+50     	; 0x19c68 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19c36:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19c3a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c3e:	32 ff       	sbrs	r19, 2
   19c40:	10 c0       	rjmp	.+32     	; 0x19c62 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19c42:	ed b7       	in	r30, 0x3d	; 61
   19c44:	fe b7       	in	r31, 0x3e	; 62
   19c46:	86 83       	std	Z+6, r24	; 0x06
   19c48:	97 83       	std	Z+7, r25	; 0x07
   19c4a:	a0 87       	std	Z+8, r26	; 0x08
   19c4c:	b1 87       	std	Z+9, r27	; 0x09
   19c4e:	d5 82       	std	Z+5, r13	; 0x05
   19c50:	c4 82       	std	Z+4, r12	; 0x04
   19c52:	88 e1       	ldi	r24, 0x18	; 24
   19c54:	98 e3       	ldi	r25, 0x38	; 56
   19c56:	a0 e0       	ldi	r26, 0x00	; 0
   19c58:	81 83       	std	Z+1, r24	; 0x01
   19c5a:	92 83       	std	Z+2, r25	; 0x02
   19c5c:	a3 83       	std	Z+3, r26	; 0x03
   19c5e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(NULL);
   19c62:	00 e0       	ldi	r16, 0x00	; 0
   19c64:	10 e0       	ldi	r17, 0x00	; 0
   19c66:	c6 c0       	rjmp	.+396    	; 0x19df4 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19c68:	64 e7       	ldi	r22, 0x74	; 116
   19c6a:	70 e0       	ldi	r23, 0x00	; 0
   19c6c:	80 e0       	ldi	r24, 0x00	; 0
   19c6e:	90 e0       	ldi	r25, 0x00	; 0
   19c70:	0e 94 89 bd 	call	0x17b12	; 0x17b12 <lif_calloc>
   19c74:	7c 01       	movw	r14, r24
    if(!LIF)
   19c76:	89 2b       	or	r24, r25
   19c78:	a1 f3       	breq	.-24     	; 0x19c62 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19c7a:	c6 01       	movw	r24, r12
   19c7c:	0e 94 d4 bd 	call	0x17ba8	; 0x17ba8 <lif_stralloc>
   19c80:	f7 01       	movw	r30, r14
   19c82:	91 83       	std	Z+1, r25	; 0x01
   19c84:	80 83       	st	Z, r24
    if(!LIF->name)
   19c86:	00 97       	sbiw	r24, 0x00	; 0
   19c88:	09 f4       	brne	.+2      	; 0x19c8c <lif_open_volume+0x8c>
   19c8a:	5e c0       	rjmp	.+188    	; 0x19d48 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19c8c:	f5 01       	movw	r30, r10
   19c8e:	80 8c       	ldd	r8, Z+24	; 0x18
   19c90:	91 8c       	ldd	r9, Z+25	; 0x19
   19c92:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19c94:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19c96:	f7 01       	movw	r30, r14
   19c98:	80 86       	std	Z+8, r8	; 0x08
   19c9a:	91 86       	std	Z+9, r9	; 0x09
   19c9c:	a2 86       	std	Z+10, r10	; 0x0a
   19c9e:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19ca0:	77 27       	eor	r23, r23
   19ca2:	6b 2d       	mov	r22, r11
   19ca4:	5a 2d       	mov	r21, r10
   19ca6:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19ca8:	88 20       	and	r8, r8
   19caa:	21 f0       	breq	.+8      	; 0x19cb4 <lif_open_volume+0xb4>
        ++sectors;
   19cac:	4f 5f       	subi	r20, 0xFF	; 255
   19cae:	5f 4f       	sbci	r21, 0xFF	; 255
   19cb0:	6f 4f       	sbci	r22, 0xFF	; 255
   19cb2:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19cb4:	f7 01       	movw	r30, r14
   19cb6:	44 83       	std	Z+4, r20	; 0x04
   19cb8:	55 83       	std	Z+5, r21	; 0x05
   19cba:	66 83       	std	Z+6, r22	; 0x06
   19cbc:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19cbe:	b8 01       	movw	r22, r16
   19cc0:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <lif_open>
   19cc4:	f7 01       	movw	r30, r14
   19cc6:	93 83       	std	Z+3, r25	; 0x03
   19cc8:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19cca:	89 2b       	or	r24, r25
   19ccc:	e9 f1       	breq	.+122    	; 0x19d48 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19cce:	00 e0       	ldi	r16, 0x00	; 0
   19cd0:	11 e0       	ldi	r17, 0x01	; 1
   19cd2:	20 e0       	ldi	r18, 0x00	; 0
   19cd4:	30 e0       	ldi	r19, 0x00	; 0
   19cd6:	a9 01       	movw	r20, r18
   19cd8:	be 01       	movw	r22, r28
   19cda:	66 5f       	subi	r22, 0xF6	; 246
   19cdc:	7f 4f       	sbci	r23, 0xFF	; 255
   19cde:	c7 01       	movw	r24, r14
   19ce0:	0e 94 77 be 	call	0x17cee	; 0x17cee <lif_read>
   19ce4:	6f 3f       	cpi	r22, 0xFF	; 255
   19ce6:	71 05       	cpc	r23, r1
   19ce8:	81 05       	cpc	r24, r1
   19cea:	91 05       	cpc	r25, r1
   19cec:	09 f0       	breq	.+2      	; 0x19cf0 <lif_open_volume+0xf0>
   19cee:	6c f4       	brge	.+26     	; 0x19d0a <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19cf0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19cf4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19cf8:	92 ff       	sbrs	r25, 2
   19cfa:	26 c0       	rjmp	.+76     	; 0x19d48 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19cfc:	ed b7       	in	r30, 0x3d	; 61
   19cfe:	fe b7       	in	r31, 0x3e	; 62
   19d00:	d5 82       	std	Z+5, r13	; 0x05
   19d02:	c4 82       	std	Z+4, r12	; 0x04
   19d04:	82 ee       	ldi	r24, 0xE2	; 226
   19d06:	97 e3       	ldi	r25, 0x37	; 55
   19d08:	19 c0       	rjmp	.+50     	; 0x19d3c <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19d0a:	b7 01       	movw	r22, r14
   19d0c:	ce 01       	movw	r24, r28
   19d0e:	0a 96       	adiw	r24, 0x0a	; 10
   19d10:	0e 94 97 c0 	call	0x1812e	; 0x1812e <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19d14:	c7 01       	movw	r24, r14
   19d16:	0e 94 a3 c4 	call	0x18946	; 0x18946 <lif_check_volume>
   19d1a:	89 2b       	or	r24, r25
   19d1c:	c1 f4       	brne	.+48     	; 0x19d4e <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19d1e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19d22:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d26:	92 ff       	sbrs	r25, 2
   19d28:	0f c0       	rjmp	.+30     	; 0x19d48 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19d2a:	f7 01       	movw	r30, r14
   19d2c:	80 81       	ld	r24, Z
   19d2e:	91 81       	ldd	r25, Z+1	; 0x01
   19d30:	ed b7       	in	r30, 0x3d	; 61
   19d32:	fe b7       	in	r31, 0x3e	; 62
   19d34:	95 83       	std	Z+5, r25	; 0x05
   19d36:	84 83       	std	Z+4, r24	; 0x04
   19d38:	8f ea       	ldi	r24, 0xAF	; 175
   19d3a:	97 e3       	ldi	r25, 0x37	; 55
   19d3c:	a0 e0       	ldi	r26, 0x00	; 0
   19d3e:	81 83       	std	Z+1, r24	; 0x01
   19d40:	92 83       	std	Z+2, r25	; 0x02
   19d42:	a3 83       	std	Z+3, r26	; 0x03
   19d44:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d48:	c7 01       	movw	r24, r14
   19d4a:	9d d8       	rcall	.-3782   	; 0x18e86 <lif_close_volume>
   19d4c:	8a cf       	rjmp	.-236    	; 0x19c62 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19d4e:	f7 01       	movw	r30, r14
   19d50:	45 a5       	ldd	r20, Z+45	; 0x2d
   19d52:	56 a5       	ldd	r21, Z+46	; 0x2e
   19d54:	67 a5       	ldd	r22, Z+47	; 0x2f
   19d56:	70 a9       	ldd	r23, Z+48	; 0x30
   19d58:	85 a9       	ldd	r24, Z+53	; 0x35
   19d5a:	96 a9       	ldd	r25, Z+54	; 0x36
   19d5c:	a7 a9       	ldd	r26, Z+55	; 0x37
   19d5e:	b0 ad       	ldd	r27, Z+56	; 0x38
   19d60:	48 0f       	add	r20, r24
   19d62:	59 1f       	adc	r21, r25
   19d64:	6a 1f       	adc	r22, r26
   19d66:	7b 1f       	adc	r23, r27
   19d68:	44 87       	std	Z+12, r20	; 0x0c
   19d6a:	55 87       	std	Z+13, r21	; 0x0d
   19d6c:	66 87       	std	Z+14, r22	; 0x0e
   19d6e:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19d70:	84 81       	ldd	r24, Z+4	; 0x04
   19d72:	95 81       	ldd	r25, Z+5	; 0x05
   19d74:	a6 81       	ldd	r26, Z+6	; 0x06
   19d76:	b7 81       	ldd	r27, Z+7	; 0x07
   19d78:	84 1b       	sub	r24, r20
   19d7a:	95 0b       	sbc	r25, r21
   19d7c:	a6 0b       	sbc	r26, r22
   19d7e:	b7 0b       	sbc	r27, r23
   19d80:	80 8b       	std	Z+16, r24	; 0x10
   19d82:	91 8b       	std	Z+17, r25	; 0x11
   19d84:	a2 8b       	std	Z+18, r26	; 0x12
   19d86:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19d88:	80 8f       	std	Z+24, r24	; 0x18
   19d8a:	91 8f       	std	Z+25, r25	; 0x19
   19d8c:	a2 8f       	std	Z+26, r26	; 0x1a
   19d8e:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19d90:	14 8a       	std	Z+20, r1	; 0x14
   19d92:	15 8a       	std	Z+21, r1	; 0x15
   19d94:	16 8a       	std	Z+22, r1	; 0x16
   19d96:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19d98:	17 8e       	std	Z+31, r1	; 0x1f
   19d9a:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19d9c:	15 8e       	std	Z+29, r1	; 0x1d
   19d9e:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19da0:	11 a2       	std	Z+33, r1	; 0x21
   19da2:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19da4:	13 a2       	std	Z+35, r1	; 0x23
   19da6:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19da8:	c7 01       	movw	r24, r14
   19daa:	d6 d9       	rcall	.-3156   	; 0x19158 <lif_updatefree>
   19dac:	8c 01       	movw	r16, r24
   19dae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19db2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19db6:	01 15       	cp	r16, r1
   19db8:	11 05       	cpc	r17, r1
   19dba:	a1 f4       	brne	.+40     	; 0x19de4 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19dbc:	92 ff       	sbrs	r25, 2
   19dbe:	0f c0       	rjmp	.+30     	; 0x19dde <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19dc0:	f7 01       	movw	r30, r14
   19dc2:	80 81       	ld	r24, Z
   19dc4:	91 81       	ldd	r25, Z+1	; 0x01
   19dc6:	ed b7       	in	r30, 0x3d	; 61
   19dc8:	fe b7       	in	r31, 0x3e	; 62
   19dca:	95 83       	std	Z+5, r25	; 0x05
   19dcc:	84 83       	std	Z+4, r24	; 0x04
   19dce:	8c e7       	ldi	r24, 0x7C	; 124
   19dd0:	97 e3       	ldi	r25, 0x37	; 55
   19dd2:	a0 e0       	ldi	r26, 0x00	; 0
   19dd4:	81 83       	std	Z+1, r24	; 0x01
   19dd6:	92 83       	std	Z+2, r25	; 0x02
   19dd8:	a3 83       	std	Z+3, r26	; 0x03
   19dda:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19dde:	c7 01       	movw	r24, r14
   19de0:	52 d8       	rcall	.-3932   	; 0x18e86 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19de2:	08 c0       	rjmp	.+16     	; 0x19df4 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19de4:	92 ff       	sbrs	r25, 2
   19de6:	05 c0       	rjmp	.+10     	; 0x19df2 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19de8:	62 e4       	ldi	r22, 0x42	; 66
   19dea:	76 e1       	ldi	r23, 0x16	; 22
   19dec:	c7 01       	movw	r24, r14
   19dee:	0e 94 dd c2 	call	0x185ba	; 0x185ba <lif_dump_vol>
   19df2:	87 01       	movw	r16, r14
    return( LIF );
}
   19df4:	c8 01       	movw	r24, r16
   19df6:	c7 5c       	subi	r28, 0xC7	; 199
   19df8:	de 4f       	sbci	r29, 0xFE	; 254
   19dfa:	ec e0       	ldi	r30, 0x0C	; 12
   19dfc:	0c 94 7a e2 	jmp	0x1c4f4	; 0x1c4f4 <__epilogue_restores__+0xc>

00019e00 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19e00:	2f 92       	push	r2
   19e02:	3f 92       	push	r3
   19e04:	4f 92       	push	r4
   19e06:	5f 92       	push	r5
   19e08:	6f 92       	push	r6
   19e0a:	8f 92       	push	r8
   19e0c:	9f 92       	push	r9
   19e0e:	af 92       	push	r10
   19e10:	bf 92       	push	r11
   19e12:	cf 92       	push	r12
   19e14:	df 92       	push	r13
   19e16:	ef 92       	push	r14
   19e18:	0f 93       	push	r16
   19e1a:	1f 93       	push	r17
   19e1c:	cf 93       	push	r28
   19e1e:	df 93       	push	r29
   19e20:	cd b7       	in	r28, 0x3d	; 61
   19e22:	de b7       	in	r29, 0x3e	; 62
   19e24:	af 97       	sbiw	r28, 0x2f	; 47
   19e26:	0f b6       	in	r0, 0x3f	; 63
   19e28:	f8 94       	cli
   19e2a:	de bf       	out	0x3e, r29	; 62
   19e2c:	0f be       	out	0x3f, r0	; 63
   19e2e:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19e30:	68 e0       	ldi	r22, 0x08	; 8
   19e32:	79 e0       	ldi	r23, 0x09	; 9
   19e34:	e5 de       	rcall	.-566    	; 0x19c00 <lif_open_volume>
   19e36:	9f a7       	std	Y+47, r25	; 0x2f
   19e38:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19e3a:	00 97       	sbiw	r24, 0x00	; 0
   19e3c:	09 f4       	brne	.+2      	; 0x19e40 <lif_dir+0x40>
   19e3e:	9e c1       	rjmp	.+828    	; 0x1a17c <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19e40:	fc 01       	movw	r30, r24
   19e42:	86 a1       	ldd	r24, Z+38	; 0x26
   19e44:	88 23       	and	r24, r24
   19e46:	21 f0       	breq	.+8      	; 0x19e50 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19e48:	8f 01       	movw	r16, r30
   19e4a:	0a 5d       	subi	r16, 0xDA	; 218
   19e4c:	1f 4f       	sbci	r17, 0xFF	; 255
   19e4e:	02 c0       	rjmp	.+4      	; 0x19e54 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19e50:	04 ef       	ldi	r16, 0xF4	; 244
   19e52:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19e54:	8e a5       	ldd	r24, Y+46	; 0x2e
   19e56:	9f a5       	ldd	r25, Y+47	; 0x2f
   19e58:	87 5b       	subi	r24, 0xB7	; 183
   19e5a:	9f 4f       	sbci	r25, 0xFF	; 255
   19e5c:	0e 94 a1 c2 	call	0x18542	; 0x18542 <lif_lifbcd2timestr>
   19e60:	ed b7       	in	r30, 0x3d	; 61
   19e62:	fe b7       	in	r31, 0x3e	; 62
   19e64:	97 83       	std	Z+7, r25	; 0x07
   19e66:	86 83       	std	Z+6, r24	; 0x06
   19e68:	15 83       	std	Z+5, r17	; 0x05
   19e6a:	04 83       	std	Z+4, r16	; 0x04
   19e6c:	85 e6       	ldi	r24, 0x65	; 101
   19e6e:	97 e3       	ldi	r25, 0x37	; 55
   19e70:	a0 e0       	ldi	r26, 0x00	; 0
   19e72:	81 83       	std	Z+1, r24	; 0x01
   19e74:	92 83       	std	Z+2, r25	; 0x02
   19e76:	a3 83       	std	Z+3, r26	; 0x03
   19e78:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19e7c:	85 e2       	ldi	r24, 0x25	; 37
   19e7e:	97 e3       	ldi	r25, 0x37	; 55
   19e80:	a0 e0       	ldi	r26, 0x00	; 0
   19e82:	ed b7       	in	r30, 0x3d	; 61
   19e84:	fe b7       	in	r31, 0x3e	; 62
   19e86:	81 83       	std	Z+1, r24	; 0x01
   19e88:	92 83       	std	Z+2, r25	; 0x02
   19e8a:	a3 83       	std	Z+3, r26	; 0x03
   19e8c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19e90:	00 e2       	ldi	r16, 0x20	; 32
   19e92:	10 e0       	ldi	r17, 0x00	; 0
   19e94:	1f 8b       	std	Y+23, r17	; 0x17
   19e96:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19e98:	21 2c       	mov	r2, r1
   19e9a:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19e9c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e9e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ea0:	06 5a       	subi	r16, 0xA6	; 166
   19ea2:	1f 4f       	sbci	r17, 0xFF	; 255
   19ea4:	1d 8f       	std	Y+29, r17	; 0x1d
   19ea6:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19ea8:	0e a5       	ldd	r16, Y+46	; 0x2e
   19eaa:	1f a5       	ldd	r17, Y+47	; 0x2f
   19eac:	00 5a       	subi	r16, 0xA0	; 160
   19eae:	1f 4f       	sbci	r17, 0xFF	; 255
   19eb0:	1d a3       	std	Y+37, r17	; 0x25
   19eb2:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19eb4:	0e a5       	ldd	r16, Y+46	; 0x2e
   19eb6:	1f a5       	ldd	r17, Y+47	; 0x2f
   19eb8:	04 59       	subi	r16, 0x94	; 148
   19eba:	1f 4f       	sbci	r17, 0xFF	; 255
   19ebc:	1f a3       	std	Y+39, r17	; 0x27
   19ebe:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19ec0:	89 ed       	ldi	r24, 0xD9	; 217
   19ec2:	96 e3       	ldi	r25, 0x36	; 54
   19ec4:	6c 01       	movw	r12, r24
   19ec6:	e1 2c       	mov	r14, r1
   19ec8:	0e a5       	ldd	r16, Y+46	; 0x2e
   19eca:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ecc:	01 5b       	subi	r16, 0xB1	; 177
   19ece:	1f 4f       	sbci	r17, 0xFF	; 255
   19ed0:	1f 8f       	std	Y+31, r17	; 0x1f
   19ed2:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19ed4:	89 ea       	ldi	r24, 0xA9	; 169
   19ed6:	96 e3       	ldi	r25, 0x36	; 54
   19ed8:	2c 01       	movw	r4, r24
   19eda:	61 2c       	mov	r6, r1
   19edc:	0e a5       	ldd	r16, Y+46	; 0x2e
   19ede:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ee0:	04 5a       	subi	r16, 0xA4	; 164
   19ee2:	1f 4f       	sbci	r17, 0xFF	; 255
   19ee4:	19 a7       	std	Y+41, r17	; 0x29
   19ee6:	08 a7       	std	Y+40, r16	; 0x28
   19ee8:	0e a5       	ldd	r16, Y+46	; 0x2e
   19eea:	1f a5       	ldd	r17, Y+47	; 0x2f
   19eec:	02 59       	subi	r16, 0x92	; 146
   19eee:	1f 4f       	sbci	r17, 0xFF	; 255
   19ef0:	1b a7       	std	Y+43, r17	; 0x2b
   19ef2:	0a a7       	std	Y+42, r16	; 0x2a
   19ef4:	0e a5       	ldd	r16, Y+46	; 0x2e
   19ef6:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ef8:	0c 59       	subi	r16, 0x9C	; 156
   19efa:	1f 4f       	sbci	r17, 0xFF	; 255
   19efc:	1d a7       	std	Y+45, r17	; 0x2d
   19efe:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19f00:	b1 01       	movw	r22, r2
   19f02:	8e a5       	ldd	r24, Y+46	; 0x2e
   19f04:	9f a5       	ldd	r25, Y+47	; 0x2f
   19f06:	4d d8       	rcall	.-3942   	; 0x18fa2 <lif_readdirindex>
   19f08:	89 2b       	or	r24, r25
   19f0a:	09 f4       	brne	.+2      	; 0x19f0e <lif_dir+0x10e>
   19f0c:	ad c0       	rjmp	.+346    	; 0x1a068 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19f0e:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19f10:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19f12:	8d 91       	ld	r24, X+
   19f14:	9c 91       	ld	r25, X
   19f16:	8f 3f       	cpi	r24, 0xFF	; 255
   19f18:	bf ef       	ldi	r27, 0xFF	; 255
   19f1a:	9b 07       	cpc	r25, r27
   19f1c:	09 f4       	brne	.+2      	; 0x19f20 <lif_dir+0x120>
   19f1e:	a4 c0       	rjmp	.+328    	; 0x1a068 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19f20:	ec a1       	ldd	r30, Y+36	; 0x24
   19f22:	fd a1       	ldd	r31, Y+37	; 0x25
   19f24:	40 81       	ld	r20, Z
   19f26:	51 81       	ldd	r21, Z+1	; 0x01
   19f28:	62 81       	ldd	r22, Z+2	; 0x02
   19f2a:	73 81       	ldd	r23, Z+3	; 0x03
   19f2c:	00 27       	eor	r16, r16
   19f2e:	14 2f       	mov	r17, r20
   19f30:	25 2f       	mov	r18, r21
   19f32:	36 2f       	mov	r19, r22
   19f34:	08 8f       	std	Y+24, r16	; 0x18
   19f36:	19 8f       	std	Y+25, r17	; 0x19
   19f38:	2a 8f       	std	Y+26, r18	; 0x1a
   19f3a:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19f3c:	8c 7f       	andi	r24, 0xFC	; 252
   19f3e:	80 31       	cpi	r24, 0x10	; 16
   19f40:	90 4e       	sbci	r25, 0xE0	; 224
   19f42:	09 f0       	breq	.+2      	; 0x19f46 <lif_dir+0x146>
   19f44:	4b c0       	rjmp	.+150    	; 0x19fdc <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19f46:	ae a1       	ldd	r26, Y+38	; 0x26
   19f48:	bf a1       	ldd	r27, Y+39	; 0x27
   19f4a:	8d 91       	ld	r24, X+
   19f4c:	9c 91       	ld	r25, X
   19f4e:	00 97       	sbiw	r24, 0x00	; 0
   19f50:	b9 f0       	breq	.+46     	; 0x19f80 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19f52:	4c 01       	movw	r8, r24
   19f54:	a1 2c       	mov	r10, r1
   19f56:	b1 2c       	mov	r11, r1
   19f58:	33 27       	eor	r19, r19
   19f5a:	2b 2d       	mov	r18, r11
   19f5c:	1a 2d       	mov	r17, r10
   19f5e:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19f60:	88 23       	and	r24, r24
   19f62:	21 f0       	breq	.+8      	; 0x19f6c <lif_dir+0x16c>
        ++sectors;
   19f64:	0f 5f       	subi	r16, 0xFF	; 255
   19f66:	1f 4f       	sbci	r17, 0xFF	; 255
   19f68:	2f 4f       	sbci	r18, 0xFF	; 255
   19f6a:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19f6c:	40 17       	cp	r20, r16
   19f6e:	51 07       	cpc	r21, r17
   19f70:	62 07       	cpc	r22, r18
   19f72:	73 07       	cpc	r23, r19
   19f74:	29 f4       	brne	.+10     	; 0x19f80 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19f76:	88 8e       	std	Y+24, r8	; 0x18
   19f78:	99 8e       	std	Y+25, r9	; 0x19
   19f7a:	aa 8e       	std	Y+26, r10	; 0x1a
   19f7c:	bb 8e       	std	Y+27, r11	; 0x1b
   19f7e:	2e c0       	rjmp	.+92     	; 0x19fdc <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19f80:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19f84:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19f88:	32 ff       	sbrs	r19, 2
   19f8a:	24 c0       	rjmp	.+72     	; 0x19fd4 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19f8c:	4c 01       	movw	r8, r24
   19f8e:	a1 2c       	mov	r10, r1
   19f90:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19f92:	33 27       	eor	r19, r19
   19f94:	2b 2d       	mov	r18, r11
   19f96:	1a 2d       	mov	r17, r10
   19f98:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19f9a:	88 23       	and	r24, r24
   19f9c:	21 f0       	breq	.+8      	; 0x19fa6 <lif_dir+0x1a6>
        ++sectors;
   19f9e:	0f 5f       	subi	r16, 0xFF	; 255
   19fa0:	1f 4f       	sbci	r17, 0xFF	; 255
   19fa2:	2f 4f       	sbci	r18, 0xFF	; 255
   19fa4:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19fa6:	ed b7       	in	r30, 0x3d	; 61
   19fa8:	fe b7       	in	r31, 0x3e	; 62
   19faa:	46 87       	std	Z+14, r20	; 0x0e
   19fac:	57 87       	std	Z+15, r21	; 0x0f
   19fae:	60 8b       	std	Z+16, r22	; 0x10
   19fb0:	71 8b       	std	Z+17, r23	; 0x11
   19fb2:	02 87       	std	Z+10, r16	; 0x0a
   19fb4:	13 87       	std	Z+11, r17	; 0x0b
   19fb6:	24 87       	std	Z+12, r18	; 0x0c
   19fb8:	35 87       	std	Z+13, r19	; 0x0d
   19fba:	86 82       	std	Z+6, r8	; 0x06
   19fbc:	97 82       	std	Z+7, r9	; 0x07
   19fbe:	a0 86       	std	Z+8, r10	; 0x08
   19fc0:	b1 86       	std	Z+9, r11	; 0x09
   19fc2:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19fc4:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19fc6:	15 83       	std	Z+5, r17	; 0x05
   19fc8:	04 83       	std	Z+4, r16	; 0x04
   19fca:	c1 82       	std	Z+1, r12	; 0x01
   19fcc:	d2 82       	std	Z+2, r13	; 0x02
   19fce:	e3 82       	std	Z+3, r14	; 0x03
   19fd0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19fd4:	01 e2       	ldi	r16, 0x21	; 33
   19fd6:	10 e0       	ldi	r17, 0x00	; 0
   19fd8:	1f 8b       	std	Y+23, r17	; 0x17
   19fda:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19fdc:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19fde:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19fe0:	8d 90       	ld	r8, X+
   19fe2:	9c 90       	ld	r9, X
   19fe4:	81 14       	cp	r8, r1
   19fe6:	91 04       	cpc	r9, r1
   19fe8:	19 f0       	breq	.+6      	; 0x19ff0 <lif_dir+0x1f0>
   19fea:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19fec:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19fee:	02 c0       	rjmp	.+4      	; 0x19ff4 <lif_dir+0x1f4>
   19ff0:	01 e5       	ldi	r16, 0x51	; 81
   19ff2:	16 e1       	ldi	r17, 0x16	; 22
   19ff4:	a8 a5       	ldd	r26, Y+40	; 0x28
   19ff6:	b9 a5       	ldd	r27, Y+41	; 0x29
   19ff8:	8d 91       	ld	r24, X+
   19ffa:	9d 91       	ld	r25, X+
   19ffc:	0d 90       	ld	r0, X+
   19ffe:	bc 91       	ld	r27, X
   1a000:	a0 2d       	mov	r26, r0
   1a002:	88 a3       	std	Y+32, r24	; 0x20
   1a004:	99 a3       	std	Y+33, r25	; 0x21
   1a006:	aa a3       	std	Y+34, r26	; 0x22
   1a008:	bb a3       	std	Y+35, r27	; 0x23
   1a00a:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a00c:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a00e:	a0 80       	ld	r10, Z
   1a010:	b1 80       	ldd	r11, Z+1	; 0x01
   1a012:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a014:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a016:	0e 94 a1 c2 	call	0x18542	; 0x18542 <lif_lifbcd2timestr>
   1a01a:	ed b7       	in	r30, 0x3d	; 61
   1a01c:	fe b7       	in	r31, 0x3e	; 62
   1a01e:	95 8b       	std	Z+21, r25	; 0x15
   1a020:	84 8b       	std	Z+20, r24	; 0x14
   1a022:	b3 8a       	std	Z+19, r11	; 0x13
   1a024:	a2 8a       	std	Z+18, r10	; 0x12
   1a026:	2e 89       	ldd	r18, Y+22	; 0x16
   1a028:	3f 89       	ldd	r19, Y+23	; 0x17
   1a02a:	31 8b       	std	Z+17, r19	; 0x11
   1a02c:	20 8b       	std	Z+16, r18	; 0x10
   1a02e:	88 8d       	ldd	r24, Y+24	; 0x18
   1a030:	99 8d       	ldd	r25, Y+25	; 0x19
   1a032:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a034:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a036:	84 87       	std	Z+12, r24	; 0x0c
   1a038:	95 87       	std	Z+13, r25	; 0x0d
   1a03a:	a6 87       	std	Z+14, r26	; 0x0e
   1a03c:	b7 87       	std	Z+15, r27	; 0x0f
   1a03e:	88 a1       	ldd	r24, Y+32	; 0x20
   1a040:	99 a1       	ldd	r25, Y+33	; 0x21
   1a042:	aa a1       	ldd	r26, Y+34	; 0x22
   1a044:	bb a1       	ldd	r27, Y+35	; 0x23
   1a046:	80 87       	std	Z+8, r24	; 0x08
   1a048:	91 87       	std	Z+9, r25	; 0x09
   1a04a:	a2 87       	std	Z+10, r26	; 0x0a
   1a04c:	b3 87       	std	Z+11, r27	; 0x0b
   1a04e:	97 82       	std	Z+7, r9	; 0x07
   1a050:	86 82       	std	Z+6, r8	; 0x06
   1a052:	15 83       	std	Z+5, r17	; 0x05
   1a054:	04 83       	std	Z+4, r16	; 0x04
   1a056:	41 82       	std	Z+1, r4	; 0x01
   1a058:	52 82       	std	Z+2, r5	; 0x02
   1a05a:	63 82       	std	Z+3, r6	; 0x03
   1a05c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a060:	ff ef       	ldi	r31, 0xFF	; 255
   1a062:	2f 1a       	sub	r2, r31
   1a064:	3f 0a       	sbc	r3, r31
    }
   1a066:	4c cf       	rjmp	.-360    	; 0x19f00 <lif_dir+0x100>

    printf("\n");
   1a068:	87 ea       	ldi	r24, 0xA7	; 167
   1a06a:	96 e3       	ldi	r25, 0x36	; 54
   1a06c:	a0 e0       	ldi	r26, 0x00	; 0
   1a06e:	ed b7       	in	r30, 0x3d	; 61
   1a070:	fe b7       	in	r31, 0x3e	; 62
   1a072:	81 83       	std	Z+1, r24	; 0x01
   1a074:	92 83       	std	Z+2, r25	; 0x02
   1a076:	a3 83       	std	Z+3, r26	; 0x03
   1a078:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a07c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a07e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a080:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a082:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a084:	09 2e       	mov	r0, r25
   1a086:	00 0c       	add	r0, r0
   1a088:	aa 0b       	sbc	r26, r26
   1a08a:	bb 0b       	sbc	r27, r27
   1a08c:	ed b7       	in	r30, 0x3d	; 61
   1a08e:	fe b7       	in	r31, 0x3e	; 62
   1a090:	84 83       	std	Z+4, r24	; 0x04
   1a092:	95 83       	std	Z+5, r25	; 0x05
   1a094:	a6 83       	std	Z+6, r26	; 0x06
   1a096:	b7 83       	std	Z+7, r27	; 0x07
   1a098:	8b e9       	ldi	r24, 0x9B	; 155
   1a09a:	96 e3       	ldi	r25, 0x36	; 54
   1a09c:	a0 e0       	ldi	r26, 0x00	; 0
   1a09e:	81 83       	std	Z+1, r24	; 0x01
   1a0a0:	92 83       	std	Z+2, r25	; 0x02
   1a0a2:	a3 83       	std	Z+3, r26	; 0x03
   1a0a4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a0a8:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0aa:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0ac:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a0ae:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a0b0:	09 2e       	mov	r0, r25
   1a0b2:	00 0c       	add	r0, r0
   1a0b4:	aa 0b       	sbc	r26, r26
   1a0b6:	bb 0b       	sbc	r27, r27
   1a0b8:	ed b7       	in	r30, 0x3d	; 61
   1a0ba:	fe b7       	in	r31, 0x3e	; 62
   1a0bc:	84 83       	std	Z+4, r24	; 0x04
   1a0be:	95 83       	std	Z+5, r25	; 0x05
   1a0c0:	a6 83       	std	Z+6, r26	; 0x06
   1a0c2:	b7 83       	std	Z+7, r27	; 0x07
   1a0c4:	8e e8       	ldi	r24, 0x8E	; 142
   1a0c6:	96 e3       	ldi	r25, 0x36	; 54
   1a0c8:	a0 e0       	ldi	r26, 0x00	; 0
   1a0ca:	81 83       	std	Z+1, r24	; 0x01
   1a0cc:	92 83       	std	Z+2, r25	; 0x02
   1a0ce:	a3 83       	std	Z+3, r26	; 0x03
   1a0d0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a0d4:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0d6:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0d8:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a0da:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a0dc:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a0de:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a0e0:	ed b7       	in	r30, 0x3d	; 61
   1a0e2:	fe b7       	in	r31, 0x3e	; 62
   1a0e4:	84 83       	std	Z+4, r24	; 0x04
   1a0e6:	95 83       	std	Z+5, r25	; 0x05
   1a0e8:	a6 83       	std	Z+6, r26	; 0x06
   1a0ea:	b7 83       	std	Z+7, r27	; 0x07
   1a0ec:	8d e7       	ldi	r24, 0x7D	; 125
   1a0ee:	96 e3       	ldi	r25, 0x36	; 54
   1a0f0:	a0 e0       	ldi	r26, 0x00	; 0
   1a0f2:	81 83       	std	Z+1, r24	; 0x01
   1a0f4:	92 83       	std	Z+2, r25	; 0x02
   1a0f6:	a3 83       	std	Z+3, r26	; 0x03
   1a0f8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a0fc:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0fe:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a100:	85 a9       	ldd	r24, Z+53	; 0x35
   1a102:	96 a9       	ldd	r25, Z+54	; 0x36
   1a104:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a106:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a108:	ed b7       	in	r30, 0x3d	; 61
   1a10a:	fe b7       	in	r31, 0x3e	; 62
   1a10c:	84 83       	std	Z+4, r24	; 0x04
   1a10e:	95 83       	std	Z+5, r25	; 0x05
   1a110:	a6 83       	std	Z+6, r26	; 0x06
   1a112:	b7 83       	std	Z+7, r27	; 0x07
   1a114:	8a e6       	ldi	r24, 0x6A	; 106
   1a116:	96 e3       	ldi	r25, 0x36	; 54
   1a118:	a0 e0       	ldi	r26, 0x00	; 0
   1a11a:	81 83       	std	Z+1, r24	; 0x01
   1a11c:	92 83       	std	Z+2, r25	; 0x02
   1a11e:	a3 83       	std	Z+3, r26	; 0x03
   1a120:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a124:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a126:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a128:	84 89       	ldd	r24, Z+20	; 0x14
   1a12a:	95 89       	ldd	r25, Z+21	; 0x15
   1a12c:	a6 89       	ldd	r26, Z+22	; 0x16
   1a12e:	b7 89       	ldd	r27, Z+23	; 0x17
   1a130:	ed b7       	in	r30, 0x3d	; 61
   1a132:	fe b7       	in	r31, 0x3e	; 62
   1a134:	84 83       	std	Z+4, r24	; 0x04
   1a136:	95 83       	std	Z+5, r25	; 0x05
   1a138:	a6 83       	std	Z+6, r26	; 0x06
   1a13a:	b7 83       	std	Z+7, r27	; 0x07
   1a13c:	87 e5       	ldi	r24, 0x57	; 87
   1a13e:	96 e3       	ldi	r25, 0x36	; 54
   1a140:	a0 e0       	ldi	r26, 0x00	; 0
   1a142:	81 83       	std	Z+1, r24	; 0x01
   1a144:	92 83       	std	Z+2, r25	; 0x02
   1a146:	a3 83       	std	Z+3, r26	; 0x03
   1a148:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a14c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a14e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a150:	80 8d       	ldd	r24, Z+24	; 0x18
   1a152:	91 8d       	ldd	r25, Z+25	; 0x19
   1a154:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a156:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a158:	ed b7       	in	r30, 0x3d	; 61
   1a15a:	fe b7       	in	r31, 0x3e	; 62
   1a15c:	84 83       	std	Z+4, r24	; 0x04
   1a15e:	95 83       	std	Z+5, r25	; 0x05
   1a160:	a6 83       	std	Z+6, r26	; 0x06
   1a162:	b7 83       	std	Z+7, r27	; 0x07
   1a164:	84 e4       	ldi	r24, 0x44	; 68
   1a166:	96 e3       	ldi	r25, 0x36	; 54
   1a168:	a0 e0       	ldi	r26, 0x00	; 0
   1a16a:	81 83       	std	Z+1, r24	; 0x01
   1a16c:	92 83       	std	Z+2, r25	; 0x02
   1a16e:	a3 83       	std	Z+3, r26	; 0x03
   1a170:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a174:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a176:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a178:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a17c:	af 96       	adiw	r28, 0x2f	; 47
   1a17e:	0f b6       	in	r0, 0x3f	; 63
   1a180:	f8 94       	cli
   1a182:	de bf       	out	0x3e, r29	; 62
   1a184:	0f be       	out	0x3f, r0	; 63
   1a186:	cd bf       	out	0x3d, r28	; 61
   1a188:	df 91       	pop	r29
   1a18a:	cf 91       	pop	r28
   1a18c:	1f 91       	pop	r17
   1a18e:	0f 91       	pop	r16
   1a190:	ef 90       	pop	r14
   1a192:	df 90       	pop	r13
   1a194:	cf 90       	pop	r12
   1a196:	bf 90       	pop	r11
   1a198:	af 90       	pop	r10
   1a19a:	9f 90       	pop	r9
   1a19c:	8f 90       	pop	r8
   1a19e:	6f 90       	pop	r6
   1a1a0:	5f 90       	pop	r5
   1a1a2:	4f 90       	pop	r4
   1a1a4:	3f 90       	pop	r3
   1a1a6:	2f 90       	pop	r2
   1a1a8:	08 95       	ret

0001a1aa <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a1aa:	a5 e0       	ldi	r26, 0x05	; 5
   1a1ac:	b0 e0       	ldi	r27, 0x00	; 0
   1a1ae:	eb ed       	ldi	r30, 0xDB	; 219
   1a1b0:	f0 ed       	ldi	r31, 0xD0	; 208
   1a1b2:	0c 94 60 e2 	jmp	0x1c4c0	; 0x1c4c0 <__prologue_saves__+0x10>
   1a1b6:	7c 01       	movw	r14, r24
   1a1b8:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a1ba:	cb 01       	movw	r24, r22
   1a1bc:	0e 94 92 bf 	call	0x17f24	; 0x17f24 <lif_checkname>
   1a1c0:	89 2b       	or	r24, r25
   1a1c2:	69 f4       	brne	.+26     	; 0x1a1de <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a1c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a1c8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a1cc:	92 ff       	sbrs	r25, 2
   1a1ce:	48 c0       	rjmp	.+144    	; 0x1a260 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a1d0:	ed b7       	in	r30, 0x3d	; 61
   1a1d2:	fe b7       	in	r31, 0x3e	; 62
   1a1d4:	d5 83       	std	Z+5, r29	; 0x05
   1a1d6:	c4 83       	std	Z+4, r28	; 0x04
   1a1d8:	8d e1       	ldi	r24, 0x1D	; 29
   1a1da:	96 e3       	ldi	r25, 0x36	; 54
   1a1dc:	15 c0       	rjmp	.+42     	; 0x1a208 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a1de:	fe 01       	movw	r30, r28
   1a1e0:	01 90       	ld	r0, Z+
   1a1e2:	00 20       	and	r0, r0
   1a1e4:	e9 f7       	brne	.-6      	; 0x1a1e0 <lif_find_file+0x36>
   1a1e6:	31 97       	sbiw	r30, 0x01	; 1
   1a1e8:	ec 1b       	sub	r30, r28
   1a1ea:	fd 0b       	sbc	r31, r29
   1a1ec:	3b 97       	sbiw	r30, 0x0b	; 11
   1a1ee:	98 f0       	brcs	.+38     	; 0x1a216 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a1f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a1f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a1f8:	92 ff       	sbrs	r25, 2
   1a1fa:	32 c0       	rjmp	.+100    	; 0x1a260 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a1fc:	ed b7       	in	r30, 0x3d	; 61
   1a1fe:	fe b7       	in	r31, 0x3e	; 62
   1a200:	d5 83       	std	Z+5, r29	; 0x05
   1a202:	c4 83       	std	Z+4, r28	; 0x04
   1a204:	88 ef       	ldi	r24, 0xF8	; 248
   1a206:	95 e3       	ldi	r25, 0x35	; 53
   1a208:	a0 e0       	ldi	r26, 0x00	; 0
   1a20a:	81 83       	std	Z+1, r24	; 0x01
   1a20c:	92 83       	std	Z+2, r25	; 0x02
   1a20e:	a3 83       	std	Z+3, r26	; 0x03
   1a210:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1a214:	25 c0       	rjmp	.+74     	; 0x1a260 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a216:	e1 14       	cp	r14, r1
   1a218:	f1 04       	cpc	r15, r1
   1a21a:	11 f1       	breq	.+68     	; 0x1a260 <lif_find_file+0xb6>
   1a21c:	00 e0       	ldi	r16, 0x00	; 0
   1a21e:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a220:	67 01       	movw	r12, r14
   1a222:	fa e5       	ldi	r31, 0x5A	; 90
   1a224:	cf 0e       	add	r12, r31
   1a226:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a228:	57 01       	movw	r10, r14
   1a22a:	2f e4       	ldi	r18, 0x4F	; 79
   1a22c:	a2 0e       	add	r10, r18
   1a22e:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a230:	b8 01       	movw	r22, r16
   1a232:	c7 01       	movw	r24, r14
   1a234:	0e 94 d1 c7 	call	0x18fa2	; 0x18fa2 <lif_readdirindex>
   1a238:	89 2b       	or	r24, r25
   1a23a:	91 f0       	breq	.+36     	; 0x1a260 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a23c:	f6 01       	movw	r30, r12
   1a23e:	80 81       	ld	r24, Z
   1a240:	91 81       	ldd	r25, Z+1	; 0x01
   1a242:	8f 3f       	cpi	r24, 0xFF	; 255
   1a244:	ff ef       	ldi	r31, 0xFF	; 255
   1a246:	9f 07       	cpc	r25, r31
   1a248:	59 f0       	breq	.+22     	; 0x1a260 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a24a:	89 2b       	or	r24, r25
   1a24c:	31 f0       	breq	.+12     	; 0x1a25a <lif_find_file+0xb0>
   1a24e:	be 01       	movw	r22, r28
   1a250:	c5 01       	movw	r24, r10
   1a252:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <strcasecmp>
   1a256:	89 2b       	or	r24, r25
   1a258:	31 f0       	breq	.+12     	; 0x1a266 <lif_find_file+0xbc>
            break;
        ++index;
   1a25a:	0f 5f       	subi	r16, 0xFF	; 255
   1a25c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a25e:	e8 cf       	rjmp	.-48     	; 0x1a230 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a260:	8f ef       	ldi	r24, 0xFF	; 255
   1a262:	9f ef       	ldi	r25, 0xFF	; 255
   1a264:	01 c0       	rjmp	.+2      	; 0x1a268 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a266:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a268:	cd b7       	in	r28, 0x3d	; 61
   1a26a:	de b7       	in	r29, 0x3e	; 62
   1a26c:	25 96       	adiw	r28, 0x05	; 5
   1a26e:	ea e0       	ldi	r30, 0x0A	; 10
   1a270:	0c 94 7c e2 	jmp	0x1c4f8	; 0x1c4f8 <__epilogue_restores__+0x10>

0001a274 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a274:	a5 e0       	ldi	r26, 0x05	; 5
   1a276:	b0 e0       	ldi	r27, 0x00	; 0
   1a278:	e0 e4       	ldi	r30, 0x40	; 64
   1a27a:	f1 ed       	ldi	r31, 0xD1	; 209
   1a27c:	0c 94 62 e2 	jmp	0x1c4c4	; 0x1c4c4 <__prologue_saves__+0x14>
   1a280:	6b 01       	movw	r12, r22
   1a282:	7c 01       	movw	r14, r24
   1a284:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a286:	20 e0       	ldi	r18, 0x00	; 0
   1a288:	31 e0       	ldi	r19, 0x01	; 1
   1a28a:	40 e0       	ldi	r20, 0x00	; 0
   1a28c:	50 e0       	ldi	r21, 0x00	; 0
   1a28e:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
    if(!pos)
   1a292:	61 15       	cp	r22, r1
   1a294:	71 05       	cpc	r23, r1
   1a296:	e1 f1       	breq	.+120    	; 0x1a310 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a298:	c0 e0       	ldi	r28, 0x00	; 0
   1a29a:	d1 e0       	ldi	r29, 0x01	; 1
   1a29c:	c6 1b       	sub	r28, r22
   1a29e:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a2a0:	f8 01       	movw	r30, r16
   1a2a2:	8f ee       	ldi	r24, 0xEF	; 239
   1a2a4:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a2a6:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a2a8:	cf 01       	movw	r24, r30
   1a2aa:	80 1b       	sub	r24, r16
   1a2ac:	91 0b       	sbc	r25, r17
   1a2ae:	8c 17       	cp	r24, r28
   1a2b0:	9d 07       	cpc	r25, r29
   1a2b2:	14 f4       	brge	.+4      	; 0x1a2b8 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a2b4:	21 93       	st	Z+, r18
   1a2b6:	f8 cf       	rjmp	.-16     	; 0x1a2a8 <lif_e010_pad_sector+0x34>
   1a2b8:	1c 16       	cp	r1, r28
   1a2ba:	1d 06       	cpc	r1, r29
   1a2bc:	14 f0       	brlt	.+4      	; 0x1a2c2 <lif_e010_pad_sector+0x4e>
   1a2be:	c1 e0       	ldi	r28, 0x01	; 1
   1a2c0:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a2c2:	ce 01       	movw	r24, r28
   1a2c4:	0d 2e       	mov	r0, r29
   1a2c6:	00 0c       	add	r0, r0
   1a2c8:	aa 0b       	sbc	r26, r26
   1a2ca:	bb 0b       	sbc	r27, r27
   1a2cc:	bc 01       	movw	r22, r24
   1a2ce:	cd 01       	movw	r24, r26
   1a2d0:	6c 0d       	add	r22, r12
   1a2d2:	7d 1d       	adc	r23, r13
   1a2d4:	8e 1d       	adc	r24, r14
   1a2d6:	9f 1d       	adc	r25, r15
   1a2d8:	20 e0       	ldi	r18, 0x00	; 0
   1a2da:	31 e0       	ldi	r19, 0x01	; 1
   1a2dc:	40 e0       	ldi	r20, 0x00	; 0
   1a2de:	50 e0       	ldi	r21, 0x00	; 0
   1a2e0:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a2e4:	61 15       	cp	r22, r1
   1a2e6:	71 05       	cpc	r23, r1
   1a2e8:	b1 f0       	breq	.+44     	; 0x1a316 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a2ea:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a2ee:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2f2:	32 ff       	sbrs	r19, 2
   1a2f4:	12 c0       	rjmp	.+36     	; 0x1a31a <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a2f6:	ed b7       	in	r30, 0x3d	; 61
   1a2f8:	fe b7       	in	r31, 0x3e	; 62
   1a2fa:	75 83       	std	Z+5, r23	; 0x05
   1a2fc:	64 83       	std	Z+4, r22	; 0x04
   1a2fe:	8f eb       	ldi	r24, 0xBF	; 191
   1a300:	95 e3       	ldi	r25, 0x35	; 53
   1a302:	a0 e0       	ldi	r26, 0x00	; 0
   1a304:	81 83       	std	Z+1, r24	; 0x01
   1a306:	92 83       	std	Z+2, r25	; 0x02
   1a308:	a3 83       	std	Z+3, r26	; 0x03
   1a30a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1a30e:	05 c0       	rjmp	.+10     	; 0x1a31a <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a310:	80 e0       	ldi	r24, 0x00	; 0
   1a312:	90 e0       	ldi	r25, 0x00	; 0
   1a314:	04 c0       	rjmp	.+8      	; 0x1a31e <lif_e010_pad_sector+0xaa>
   1a316:	ce 01       	movw	r24, r28
   1a318:	02 c0       	rjmp	.+4      	; 0x1a31e <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a31a:	8f ef       	ldi	r24, 0xFF	; 255
   1a31c:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a31e:	cd b7       	in	r28, 0x3d	; 61
   1a320:	de b7       	in	r29, 0x3e	; 62
   1a322:	25 96       	adiw	r28, 0x05	; 5
   1a324:	e8 e0       	ldi	r30, 0x08	; 8
   1a326:	0c 94 7e e2 	jmp	0x1c4fc	; 0x1c4fc <__epilogue_restores__+0x14>

0001a32a <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a32a:	a5 e0       	ldi	r26, 0x05	; 5
   1a32c:	b0 e0       	ldi	r27, 0x00	; 0
   1a32e:	eb e9       	ldi	r30, 0x9B	; 155
   1a330:	f1 ed       	ldi	r31, 0xD1	; 209
   1a332:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   1a336:	ec 01       	movw	r28, r24
   1a338:	4a 01       	movw	r8, r20
   1a33a:	5b 01       	movw	r10, r22
   1a33c:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a33e:	fc 01       	movw	r30, r24
   1a340:	01 90       	ld	r0, Z+
   1a342:	00 20       	and	r0, r0
   1a344:	e9 f7       	brne	.-6      	; 0x1a340 <lif_ascii_string_to_e010+0x16>
   1a346:	31 97       	sbiw	r30, 0x01	; 1
   1a348:	6f 01       	movw	r12, r30
   1a34a:	c8 1a       	sub	r12, r24
   1a34c:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a34e:	41 2c       	mov	r4, r1
   1a350:	51 2c       	mov	r5, r1
   1a352:	32 01       	movw	r6, r4
   1a354:	53 94       	inc	r5
   1a356:	cb 01       	movw	r24, r22
   1a358:	ba 01       	movw	r22, r20
   1a35a:	a3 01       	movw	r20, r6
   1a35c:	92 01       	movw	r18, r4
   1a35e:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
   1a362:	21 2c       	mov	r2, r1
   1a364:	33 24       	eor	r3, r3
   1a366:	33 94       	inc	r3
   1a368:	c1 01       	movw	r24, r2
   1a36a:	86 1b       	sub	r24, r22
   1a36c:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a36e:	86 30       	cpi	r24, 0x06	; 6
   1a370:	91 05       	cpc	r25, r1
   1a372:	20 f0       	brcs	.+8      	; 0x1a37c <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a374:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a376:	00 e0       	ldi	r16, 0x00	; 0
   1a378:	10 e0       	ldi	r17, 0x00	; 0
   1a37a:	17 c0       	rjmp	.+46     	; 0x1a3aa <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a37c:	a7 01       	movw	r20, r14
   1a37e:	c5 01       	movw	r24, r10
   1a380:	b4 01       	movw	r22, r8
   1a382:	78 df       	rcall	.-272    	; 0x1a274 <lif_e010_pad_sector>
   1a384:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a386:	97 fd       	sbrc	r25, 7
   1a388:	83 c0       	rjmp	.+262    	; 0x1a490 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a38a:	09 2e       	mov	r0, r25
   1a38c:	00 0c       	add	r0, r0
   1a38e:	aa 0b       	sbc	r26, r26
   1a390:	bb 0b       	sbc	r27, r27
   1a392:	bc 01       	movw	r22, r24
   1a394:	cd 01       	movw	r24, r26
   1a396:	68 0d       	add	r22, r8
   1a398:	79 1d       	adc	r23, r9
   1a39a:	8a 1d       	adc	r24, r10
   1a39c:	9b 1d       	adc	r25, r11
   1a39e:	a3 01       	movw	r20, r6
   1a3a0:	92 01       	movw	r18, r4
   1a3a2:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
   1a3a6:	26 1a       	sub	r2, r22
   1a3a8:	37 0a       	sbc	r3, r23
   1a3aa:	f7 01       	movw	r30, r14
   1a3ac:	e0 0f       	add	r30, r16
   1a3ae:	f1 1f       	adc	r31, r17
   1a3b0:	0d 5f       	subi	r16, 0xFD	; 253
   1a3b2:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a3b4:	c6 01       	movw	r24, r12
   1a3b6:	02 96       	adiw	r24, 0x02	; 2
   1a3b8:	82 15       	cp	r24, r2
   1a3ba:	93 05       	cpc	r25, r3
   1a3bc:	84 f4       	brge	.+32     	; 0x1a3de <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a3be:	8f ed       	ldi	r24, 0xDF	; 223
   1a3c0:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a3c2:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a3c4:	d2 82       	std	Z+2, r13	; 0x02
   1a3c6:	f7 01       	movw	r30, r14
   1a3c8:	e0 0f       	add	r30, r16
   1a3ca:	f1 1f       	adc	r31, r17
   1a3cc:	cf 01       	movw	r24, r30
   1a3ce:	8e 19       	sub	r24, r14
   1a3d0:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a3d2:	29 91       	ld	r18, Y+
   1a3d4:	22 23       	and	r18, r18
   1a3d6:	09 f4       	brne	.+2      	; 0x1a3da <lif_ascii_string_to_e010+0xb0>
   1a3d8:	5b c0       	rjmp	.+182    	; 0x1a490 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a3da:	21 93       	st	Z+, r18
   1a3dc:	f7 cf       	rjmp	.-18     	; 0x1a3cc <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a3de:	8f ec       	ldi	r24, 0xCF	; 207
   1a3e0:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a3e2:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a3e4:	d2 82       	std	Z+2, r13	; 0x02
   1a3e6:	d7 01       	movw	r26, r14
   1a3e8:	a0 0f       	add	r26, r16
   1a3ea:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a3ec:	fe 01       	movw	r30, r28
   1a3ee:	81 91       	ld	r24, Z+
   1a3f0:	81 11       	cpse	r24, r1
   1a3f2:	0e c0       	rjmp	.+28     	; 0x1a410 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a3f4:	c8 01       	movw	r24, r16
   1a3f6:	01 2e       	mov	r0, r17
   1a3f8:	00 0c       	add	r0, r0
   1a3fa:	aa 0b       	sbc	r26, r26
   1a3fc:	bb 0b       	sbc	r27, r27
   1a3fe:	bc 01       	movw	r22, r24
   1a400:	cd 01       	movw	r24, r26
   1a402:	68 0d       	add	r22, r8
   1a404:	79 1d       	adc	r23, r9
   1a406:	8a 1d       	adc	r24, r10
   1a408:	9b 1d       	adc	r25, r11
   1a40a:	61 11       	cpse	r22, r1
   1a40c:	09 c0       	rjmp	.+18     	; 0x1a420 <lif_ascii_string_to_e010+0xf6>
   1a40e:	21 c0       	rjmp	.+66     	; 0x1a452 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a410:	02 15       	cp	r16, r2
   1a412:	13 05       	cpc	r17, r3
   1a414:	7c f7       	brge	.-34     	; 0x1a3f4 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a416:	0f 5f       	subi	r16, 0xFF	; 255
   1a418:	1f 4f       	sbci	r17, 0xFF	; 255
   1a41a:	8d 93       	st	X+, r24
   1a41c:	ef 01       	movw	r28, r30
   1a41e:	e6 cf       	rjmp	.-52     	; 0x1a3ec <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a420:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a424:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a428:	32 ff       	sbrs	r19, 2
   1a42a:	30 c0       	rjmp	.+96     	; 0x1a48c <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a42c:	20 e0       	ldi	r18, 0x00	; 0
   1a42e:	31 e0       	ldi	r19, 0x01	; 1
   1a430:	40 e0       	ldi	r20, 0x00	; 0
   1a432:	50 e0       	ldi	r21, 0x00	; 0
   1a434:	0e 94 0d e2 	call	0x1c41a	; 0x1c41a <__divmodsi4>
   1a438:	ed b7       	in	r30, 0x3d	; 61
   1a43a:	fe b7       	in	r31, 0x3e	; 62
   1a43c:	75 83       	std	Z+5, r23	; 0x05
   1a43e:	64 83       	std	Z+4, r22	; 0x04
   1a440:	8b e9       	ldi	r24, 0x9B	; 155
   1a442:	95 e3       	ldi	r25, 0x35	; 53
   1a444:	a0 e0       	ldi	r26, 0x00	; 0
   1a446:	81 83       	std	Z+1, r24	; 0x01
   1a448:	92 83       	std	Z+2, r25	; 0x02
   1a44a:	a3 83       	std	Z+3, r26	; 0x03
   1a44c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1a450:	1d c0       	rjmp	.+58     	; 0x1a48c <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a452:	fe 01       	movw	r30, r28
   1a454:	01 90       	ld	r0, Z+
   1a456:	00 20       	and	r0, r0
   1a458:	e9 f7       	brne	.-6      	; 0x1a454 <lif_ascii_string_to_e010+0x12a>
   1a45a:	31 97       	sbiw	r30, 0x01	; 1
   1a45c:	9f 01       	movw	r18, r30
   1a45e:	2c 1b       	sub	r18, r28
   1a460:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a462:	d7 01       	movw	r26, r14
   1a464:	a0 0f       	add	r26, r16
   1a466:	b1 1f       	adc	r27, r17
   1a468:	8f e6       	ldi	r24, 0x6F	; 111
   1a46a:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a46c:	fd 01       	movw	r30, r26
   1a46e:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a470:	32 83       	std	Z+2, r19	; 0x02
   1a472:	0d 5f       	subi	r16, 0xFD	; 253
   1a474:	1f 4f       	sbci	r17, 0xFF	; 255
   1a476:	f7 01       	movw	r30, r14
   1a478:	e0 0f       	add	r30, r16
   1a47a:	f1 1f       	adc	r31, r17
   1a47c:	cf 01       	movw	r24, r30
   1a47e:	8e 19       	sub	r24, r14
   1a480:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a482:	29 91       	ld	r18, Y+
   1a484:	22 23       	and	r18, r18
   1a486:	21 f0       	breq	.+8      	; 0x1a490 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a488:	21 93       	st	Z+, r18
   1a48a:	f8 cf       	rjmp	.-16     	; 0x1a47c <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a48c:	8f ef       	ldi	r24, 0xFF	; 255
   1a48e:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a490:	cd b7       	in	r28, 0x3d	; 61
   1a492:	de b7       	in	r29, 0x3e	; 62
   1a494:	25 96       	adiw	r28, 0x05	; 5
   1a496:	e2 e1       	ldi	r30, 0x12	; 18
   1a498:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0001a49c <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a49c:	ad e0       	ldi	r26, 0x0D	; 13
   1a49e:	b3 e0       	ldi	r27, 0x03	; 3
   1a4a0:	e4 e5       	ldi	r30, 0x54	; 84
   1a4a2:	f2 ed       	ldi	r31, 0xD2	; 210
   1a4a4:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   1a4a8:	5c 01       	movw	r10, r24
   1a4aa:	2a 01       	movw	r4, r20
   1a4ac:	3b 01       	movw	r6, r22
   1a4ae:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a4b0:	6e ef       	ldi	r22, 0xFE	; 254
   1a4b2:	78 e0       	ldi	r23, 0x08	; 8
   1a4b4:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <lif_open>
   1a4b8:	c7 5f       	subi	r28, 0xF7	; 247
   1a4ba:	dc 4f       	sbci	r29, 0xFC	; 252
   1a4bc:	99 83       	std	Y+1, r25	; 0x01
   1a4be:	88 83       	st	Y, r24
   1a4c0:	c9 50       	subi	r28, 0x09	; 9
   1a4c2:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a4c4:	89 2b       	or	r24, r25
   1a4c6:	09 f4       	brne	.+2      	; 0x1a4ca <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a4c8:	63 c0       	rjmp	.+198    	; 0x1a590 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a4ca:	81 2c       	mov	r8, r1
   1a4cc:	91 2c       	mov	r9, r1
   1a4ce:	c1 2c       	mov	r12, r1
   1a4d0:	d1 2c       	mov	r13, r1
   1a4d2:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a4d4:	8d e8       	ldi	r24, 0x8D	; 141
   1a4d6:	95 e3       	ldi	r25, 0x35	; 53
   1a4d8:	9c 01       	movw	r18, r24
   1a4da:	40 e0       	ldi	r20, 0x00	; 0
   1a4dc:	c5 5f       	subi	r28, 0xF5	; 245
   1a4de:	dc 4f       	sbci	r29, 0xFC	; 252
   1a4e0:	28 83       	st	Y, r18
   1a4e2:	39 83       	std	Y+1, r19	; 0x01
   1a4e4:	4a 83       	std	Y+2, r20	; 0x02
   1a4e6:	cb 50       	subi	r28, 0x0B	; 11
   1a4e8:	d3 40       	sbci	r29, 0x03	; 3
   1a4ea:	14 c0       	rjmp	.+40     	; 0x1a514 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a4ec:	c1 01       	movw	r24, r2
   1a4ee:	03 2c       	mov	r0, r3
   1a4f0:	00 0c       	add	r0, r0
   1a4f2:	aa 0b       	sbc	r26, r26
   1a4f4:	bb 0b       	sbc	r27, r27
   1a4f6:	48 0e       	add	r4, r24
   1a4f8:	59 1e       	adc	r5, r25
   1a4fa:	6a 1e       	adc	r6, r26
   1a4fc:	7b 1e       	adc	r7, r27
        bytes += size;
   1a4fe:	c8 0e       	add	r12, r24
   1a500:	d9 1e       	adc	r13, r25
   1a502:	ea 1e       	adc	r14, r26
   1a504:	fb 1e       	adc	r15, r27
        count += size;
   1a506:	82 0c       	add	r8, r2
   1a508:	93 1c       	adc	r9, r3

        if(count > 256)
   1a50a:	31 e0       	ldi	r19, 0x01	; 1
   1a50c:	83 16       	cp	r8, r19
   1a50e:	93 06       	cpc	r9, r19
   1a510:	0c f0       	brlt	.+2      	; 0x1a514 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a512:	43 c0       	rjmp	.+134    	; 0x1a59a <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a514:	c7 5f       	subi	r28, 0xF7	; 247
   1a516:	dc 4f       	sbci	r29, 0xFC	; 252
   1a518:	48 81       	ld	r20, Y
   1a51a:	59 81       	ldd	r21, Y+1	; 0x01
   1a51c:	c9 50       	subi	r28, 0x09	; 9
   1a51e:	d3 40       	sbci	r29, 0x03	; 3
   1a520:	6d ef       	ldi	r22, 0xFD	; 253
   1a522:	70 e0       	ldi	r23, 0x00	; 0
   1a524:	ce 01       	movw	r24, r28
   1a526:	88 5f       	subi	r24, 0xF8	; 248
   1a528:	9d 4f       	sbci	r25, 0xFD	; 253
   1a52a:	0e 94 09 75 	call	0xea12	; 0xea12 <fgets>
   1a52e:	89 2b       	or	r24, r25
   1a530:	09 f4       	brne	.+2      	; 0x1a534 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a532:	4b c0       	rjmp	.+150    	; 0x1a5ca <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a534:	ce 01       	movw	r24, r28
   1a536:	88 5f       	subi	r24, 0xF8	; 248
   1a538:	9d 4f       	sbci	r25, 0xFD	; 253
   1a53a:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a53e:	6a e5       	ldi	r22, 0x5A	; 90
   1a540:	76 e1       	ldi	r23, 0x16	; 22
   1a542:	ce 01       	movw	r24, r28
   1a544:	88 5f       	subi	r24, 0xF8	; 248
   1a546:	9d 4f       	sbci	r25, 0xFD	; 253
   1a548:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a54c:	9e 01       	movw	r18, r28
   1a54e:	28 5f       	subi	r18, 0xF8	; 248
   1a550:	3f 4f       	sbci	r19, 0xFF	; 255
   1a552:	b3 01       	movw	r22, r6
   1a554:	a2 01       	movw	r20, r4
   1a556:	ce 01       	movw	r24, r28
   1a558:	88 5f       	subi	r24, 0xF8	; 248
   1a55a:	9d 4f       	sbci	r25, 0xFD	; 253
   1a55c:	e6 de       	rcall	.-564    	; 0x1a32a <lif_ascii_string_to_e010>
   1a55e:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a560:	a1 14       	cp	r10, r1
   1a562:	b1 04       	cpc	r11, r1
   1a564:	19 f2       	breq	.-122    	; 0x1a4ec <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a566:	8c 01       	movw	r16, r24
   1a568:	a3 01       	movw	r20, r6
   1a56a:	92 01       	movw	r18, r4
   1a56c:	be 01       	movw	r22, r28
   1a56e:	68 5f       	subi	r22, 0xF8	; 248
   1a570:	7f 4f       	sbci	r23, 0xFF	; 255
   1a572:	c5 01       	movw	r24, r10
   1a574:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
            if(len < size)
   1a578:	82 15       	cp	r24, r2
   1a57a:	93 05       	cpc	r25, r3
   1a57c:	0c f0       	brlt	.+2      	; 0x1a580 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a57e:	b6 cf       	rjmp	.-148    	; 0x1a4ec <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a580:	c7 5f       	subi	r28, 0xF7	; 247
   1a582:	dc 4f       	sbci	r29, 0xFC	; 252
   1a584:	88 81       	ld	r24, Y
   1a586:	99 81       	ldd	r25, Y+1	; 0x01
   1a588:	c9 50       	subi	r28, 0x09	; 9
   1a58a:	d3 40       	sbci	r29, 0x03	; 3
   1a58c:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>
                return(-1);
   1a590:	6f ef       	ldi	r22, 0xFF	; 255
   1a592:	7f ef       	ldi	r23, 0xFF	; 255
   1a594:	8f ef       	ldi	r24, 0xFF	; 255
   1a596:	9f ef       	ldi	r25, 0xFF	; 255
   1a598:	84 c0       	rjmp	.+264    	; 0x1a6a2 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a59a:	a1 14       	cp	r10, r1
   1a59c:	b1 04       	cpc	r11, r1
   1a59e:	91 f0       	breq	.+36     	; 0x1a5c4 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a5a0:	ed b7       	in	r30, 0x3d	; 61
   1a5a2:	fe b7       	in	r31, 0x3e	; 62
   1a5a4:	c4 82       	std	Z+4, r12	; 0x04
   1a5a6:	d5 82       	std	Z+5, r13	; 0x05
   1a5a8:	e6 82       	std	Z+6, r14	; 0x06
   1a5aa:	f7 82       	std	Z+7, r15	; 0x07
   1a5ac:	c5 5f       	subi	r28, 0xF5	; 245
   1a5ae:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5b0:	28 81       	ld	r18, Y
   1a5b2:	39 81       	ldd	r19, Y+1	; 0x01
   1a5b4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a5b6:	cb 50       	subi	r28, 0x0B	; 11
   1a5b8:	d3 40       	sbci	r29, 0x03	; 3
   1a5ba:	21 83       	std	Z+1, r18	; 0x01
   1a5bc:	32 83       	std	Z+2, r19	; 0x02
   1a5be:	43 83       	std	Z+3, r20	; 0x03
   1a5c0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a5c4:	81 2c       	mov	r8, r1
   1a5c6:	91 2c       	mov	r9, r1
   1a5c8:	a5 cf       	rjmp	.-182    	; 0x1a514 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a5ca:	c7 5f       	subi	r28, 0xF7	; 247
   1a5cc:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5ce:	88 81       	ld	r24, Y
   1a5d0:	99 81       	ldd	r25, Y+1	; 0x01
   1a5d2:	c9 50       	subi	r28, 0x09	; 9
   1a5d4:	d3 40       	sbci	r29, 0x03	; 3
   1a5d6:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>

// Write EOF
    str[0] = 0;
   1a5da:	c8 5f       	subi	r28, 0xF8	; 248
   1a5dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1a5de:	18 82       	st	Y, r1
   1a5e0:	c8 50       	subi	r28, 0x08	; 8
   1a5e2:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a5e4:	9e 01       	movw	r18, r28
   1a5e6:	28 5f       	subi	r18, 0xF8	; 248
   1a5e8:	3f 4f       	sbci	r19, 0xFF	; 255
   1a5ea:	b3 01       	movw	r22, r6
   1a5ec:	a2 01       	movw	r20, r4
   1a5ee:	ce 01       	movw	r24, r28
   1a5f0:	88 5f       	subi	r24, 0xF8	; 248
   1a5f2:	9d 4f       	sbci	r25, 0xFD	; 253
   1a5f4:	9a de       	rcall	.-716    	; 0x1a32a <lif_ascii_string_to_e010>
   1a5f6:	4c 01       	movw	r8, r24

    if(LIF)
   1a5f8:	a1 14       	cp	r10, r1
   1a5fa:	b1 04       	cpc	r11, r1
   1a5fc:	d1 f4       	brne	.+52     	; 0x1a632 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a5fe:	c4 01       	movw	r24, r8
   1a600:	09 2c       	mov	r0, r9
   1a602:	00 0c       	add	r0, r0
   1a604:	aa 0b       	sbc	r26, r26
   1a606:	bb 0b       	sbc	r27, r27
   1a608:	c8 0e       	add	r12, r24
   1a60a:	d9 1e       	adc	r13, r25
   1a60c:	ea 1e       	adc	r14, r26
   1a60e:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a610:	12 01       	movw	r2, r4
   1a612:	23 01       	movw	r4, r6
   1a614:	28 0e       	add	r2, r24
   1a616:	39 1e       	adc	r3, r25
   1a618:	4a 1e       	adc	r4, r26
   1a61a:	5b 1e       	adc	r5, r27
   1a61c:	ae 01       	movw	r20, r28
   1a61e:	48 5f       	subi	r20, 0xF8	; 248
   1a620:	5f 4f       	sbci	r21, 0xFF	; 255
   1a622:	c2 01       	movw	r24, r4
   1a624:	b1 01       	movw	r22, r2
   1a626:	26 de       	rcall	.-948    	; 0x1a274 <lif_e010_pad_sector>
   1a628:	3c 01       	movw	r6, r24
    if(LIF)
   1a62a:	a1 14       	cp	r10, r1
   1a62c:	b1 04       	cpc	r11, r1
   1a62e:	e1 f4       	brne	.+56     	; 0x1a668 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a630:	36 c0       	rjmp	.+108    	; 0x1a69e <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a632:	ed b7       	in	r30, 0x3d	; 61
   1a634:	fe b7       	in	r31, 0x3e	; 62
   1a636:	c4 82       	std	Z+4, r12	; 0x04
   1a638:	d5 82       	std	Z+5, r13	; 0x05
   1a63a:	e6 82       	std	Z+6, r14	; 0x06
   1a63c:	f7 82       	std	Z+7, r15	; 0x07
   1a63e:	8f e7       	ldi	r24, 0x7F	; 127
   1a640:	95 e3       	ldi	r25, 0x35	; 53
   1a642:	a0 e0       	ldi	r26, 0x00	; 0
   1a644:	81 83       	std	Z+1, r24	; 0x01
   1a646:	92 83       	std	Z+2, r25	; 0x02
   1a648:	a3 83       	std	Z+3, r26	; 0x03
   1a64a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a64e:	84 01       	movw	r16, r8
   1a650:	a3 01       	movw	r20, r6
   1a652:	92 01       	movw	r18, r4
   1a654:	be 01       	movw	r22, r28
   1a656:	68 5f       	subi	r22, 0xF8	; 248
   1a658:	7f 4f       	sbci	r23, 0xFF	; 255
   1a65a:	c5 01       	movw	r24, r10
   1a65c:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
        if(len < size)
   1a660:	88 15       	cp	r24, r8
   1a662:	99 05       	cpc	r25, r9
   1a664:	64 f6       	brge	.-104    	; 0x1a5fe <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a666:	94 cf       	rjmp	.-216    	; 0x1a590 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a668:	8c 01       	movw	r16, r24
   1a66a:	a2 01       	movw	r20, r4
   1a66c:	91 01       	movw	r18, r2
   1a66e:	be 01       	movw	r22, r28
   1a670:	68 5f       	subi	r22, 0xF8	; 248
   1a672:	7f 4f       	sbci	r23, 0xFF	; 255
   1a674:	c5 01       	movw	r24, r10
   1a676:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
        if(len < size)
   1a67a:	86 15       	cp	r24, r6
   1a67c:	97 05       	cpc	r25, r7
   1a67e:	0c f4       	brge	.+2      	; 0x1a682 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a680:	87 cf       	rjmp	.-242    	; 0x1a590 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a682:	ed b7       	in	r30, 0x3d	; 61
   1a684:	fe b7       	in	r31, 0x3e	; 62
   1a686:	c4 82       	std	Z+4, r12	; 0x04
   1a688:	d5 82       	std	Z+5, r13	; 0x05
   1a68a:	e6 82       	std	Z+6, r14	; 0x06
   1a68c:	f7 82       	std	Z+7, r15	; 0x07
   1a68e:	81 e7       	ldi	r24, 0x71	; 113
   1a690:	95 e3       	ldi	r25, 0x35	; 53
   1a692:	a0 e0       	ldi	r26, 0x00	; 0
   1a694:	81 83       	std	Z+1, r24	; 0x01
   1a696:	92 83       	std	Z+2, r25	; 0x02
   1a698:	a3 83       	std	Z+3, r26	; 0x03
   1a69a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    return(bytes);
   1a69e:	b6 01       	movw	r22, r12
   1a6a0:	c7 01       	movw	r24, r14
}
   1a6a2:	c3 5f       	subi	r28, 0xF3	; 243
   1a6a4:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6a6:	e2 e1       	ldi	r30, 0x12	; 18
   1a6a8:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0001a6ac <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a6ac:	ab e3       	ldi	r26, 0x3B	; 59
   1a6ae:	b0 e0       	ldi	r27, 0x00	; 0
   1a6b0:	ec e5       	ldi	r30, 0x5C	; 92
   1a6b2:	f3 ed       	ldi	r31, 0xD3	; 211
   1a6b4:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   1a6b8:	6c 01       	movw	r12, r24
   1a6ba:	1b 01       	movw	r2, r22
   1a6bc:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a6be:	fc 01       	movw	r30, r24
   1a6c0:	80 81       	ld	r24, Z
   1a6c2:	81 11       	cpse	r24, r1
   1a6c4:	03 c0       	rjmp	.+6      	; 0x1a6cc <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a6c6:	8e e3       	ldi	r24, 0x3E	; 62
   1a6c8:	95 e3       	ldi	r25, 0x35	; 53
   1a6ca:	1a c0       	rjmp	.+52     	; 0x1a700 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a6cc:	fb 01       	movw	r30, r22
   1a6ce:	80 81       	ld	r24, Z
   1a6d0:	81 11       	cpse	r24, r1
   1a6d2:	03 c0       	rjmp	.+6      	; 0x1a6da <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a6d4:	80 e1       	ldi	r24, 0x10	; 16
   1a6d6:	95 e3       	ldi	r25, 0x35	; 53
   1a6d8:	13 c0       	rjmp	.+38     	; 0x1a700 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a6da:	fa 01       	movw	r30, r20
   1a6dc:	80 81       	ld	r24, Z
   1a6de:	81 11       	cpse	r24, r1
   1a6e0:	03 c0       	rjmp	.+6      	; 0x1a6e8 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a6e2:	81 ee       	ldi	r24, 0xE1	; 225
   1a6e4:	94 e3       	ldi	r25, 0x34	; 52
   1a6e6:	0c c0       	rjmp	.+24     	; 0x1a700 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a6e8:	be 01       	movw	r22, r28
   1a6ea:	66 5f       	subi	r22, 0xF6	; 246
   1a6ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6ee:	ca 01       	movw	r24, r20
   1a6f0:	0e 94 1d be 	call	0x17c3a	; 0x17c3a <lif_stat>
   1a6f4:	9b af       	std	Y+59, r25	; 0x3b
   1a6f6:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a6f8:	89 2b       	or	r24, r25
   1a6fa:	59 f4       	brne	.+22     	; 0x1a712 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a6fc:	81 eb       	ldi	r24, 0xB1	; 177
   1a6fe:	94 e3       	ldi	r25, 0x34	; 52
   1a700:	a0 e0       	ldi	r26, 0x00	; 0
   1a702:	ed b7       	in	r30, 0x3d	; 61
   1a704:	fe b7       	in	r31, 0x3e	; 62
   1a706:	81 83       	std	Z+1, r24	; 0x01
   1a708:	92 83       	std	Z+2, r25	; 0x02
   1a70a:	a3 83       	std	Z+3, r26	; 0x03
   1a70c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1a710:	01 c1       	rjmp	.+514    	; 0x1a914 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a712:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a716:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a71a:	92 ff       	sbrs	r25, 2
   1a71c:	10 c0       	rjmp	.+32     	; 0x1a73e <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a71e:	ed b7       	in	r30, 0x3d	; 61
   1a720:	fe b7       	in	r31, 0x3e	; 62
   1a722:	f1 86       	std	Z+9, r15	; 0x09
   1a724:	e0 86       	std	Z+8, r14	; 0x08
   1a726:	37 82       	std	Z+7, r3	; 0x07
   1a728:	26 82       	std	Z+6, r2	; 0x06
   1a72a:	d5 82       	std	Z+5, r13	; 0x05
   1a72c:	c4 82       	std	Z+4, r12	; 0x04
   1a72e:	82 e8       	ldi	r24, 0x82	; 130
   1a730:	94 e3       	ldi	r25, 0x34	; 52
   1a732:	a0 e0       	ldi	r26, 0x00	; 0
   1a734:	81 83       	std	Z+1, r24	; 0x01
   1a736:	92 83       	std	Z+2, r25	; 0x02
   1a738:	a3 83       	std	Z+3, r26	; 0x03
   1a73a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a73e:	97 01       	movw	r18, r14
   1a740:	40 e0       	ldi	r20, 0x00	; 0
   1a742:	50 e0       	ldi	r21, 0x00	; 0
   1a744:	ba 01       	movw	r22, r20
   1a746:	80 e0       	ldi	r24, 0x00	; 0
   1a748:	90 e0       	ldi	r25, 0x00	; 0
   1a74a:	a8 de       	rcall	.-688    	; 0x1a49c <lif_add_ascii_file_as_e010_wrapper>
   1a74c:	4b 01       	movw	r8, r22
   1a74e:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a750:	47 2e       	mov	r4, r23
   1a752:	58 2e       	mov	r5, r24
   1a754:	69 2e       	mov	r6, r25
   1a756:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a758:	66 23       	and	r22, r22
   1a75a:	29 f0       	breq	.+10     	; 0x1a766 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a75c:	ff ef       	ldi	r31, 0xFF	; 255
   1a75e:	4f 1a       	sub	r4, r31
   1a760:	5f 0a       	sbc	r5, r31
   1a762:	6f 0a       	sbc	r6, r31
   1a764:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a766:	61 e0       	ldi	r22, 0x01	; 1
   1a768:	79 e0       	ldi	r23, 0x09	; 9
   1a76a:	c6 01       	movw	r24, r12
   1a76c:	49 da       	rcall	.-2926   	; 0x19c00 <lif_open_volume>
   1a76e:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a770:	00 97       	sbiw	r24, 0x00	; 0
   1a772:	09 f4       	brne	.+2      	; 0x1a776 <lif_add_ascii_file_as_e010+0xca>
   1a774:	cf c0       	rjmp	.+414    	; 0x1a914 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a776:	b3 01       	movw	r22, r6
   1a778:	a2 01       	movw	r20, r4
   1a77a:	e2 d8       	rcall	.-3644   	; 0x19940 <lif_newdir>
   1a77c:	3c 01       	movw	r6, r24
    if(index == -1)
   1a77e:	8f ef       	ldi	r24, 0xFF	; 255
   1a780:	68 16       	cp	r6, r24
   1a782:	78 06       	cpc	r7, r24
   1a784:	79 f4       	brne	.+30     	; 0x1a7a4 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a786:	ed b7       	in	r30, 0x3d	; 61
   1a788:	fe b7       	in	r31, 0x3e	; 62
   1a78a:	f7 82       	std	Z+7, r15	; 0x07
   1a78c:	e6 82       	std	Z+6, r14	; 0x06
   1a78e:	d5 82       	std	Z+5, r13	; 0x05
   1a790:	c4 82       	std	Z+4, r12	; 0x04
   1a792:	82 e5       	ldi	r24, 0x52	; 82
   1a794:	94 e3       	ldi	r25, 0x34	; 52
   1a796:	a0 e0       	ldi	r26, 0x00	; 0
   1a798:	81 83       	std	Z+1, r24	; 0x01
   1a79a:	92 83       	std	Z+2, r25	; 0x02
   1a79c:	a3 83       	std	Z+3, r26	; 0x03
   1a79e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1a7a2:	a0 c0       	rjmp	.+320    	; 0x1a8e4 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a7a4:	68 01       	movw	r12, r16
   1a7a6:	ff e4       	ldi	r31, 0x4F	; 79
   1a7a8:	cf 0e       	add	r12, r31
   1a7aa:	d1 1c       	adc	r13, r1
   1a7ac:	4a e0       	ldi	r20, 0x0A	; 10
   1a7ae:	50 e0       	ldi	r21, 0x00	; 0
   1a7b0:	b1 01       	movw	r22, r2
   1a7b2:	c6 01       	movw	r24, r12
   1a7b4:	0e 94 cc bf 	call	0x17f98	; 0x17f98 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a7b8:	80 e1       	ldi	r24, 0x10	; 16
   1a7ba:	90 ee       	ldi	r25, 0xE0	; 224
   1a7bc:	f8 01       	movw	r30, r16
   1a7be:	e6 5a       	subi	r30, 0xA6	; 166
   1a7c0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a7c2:	91 83       	std	Z+1, r25	; 0x01
   1a7c4:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a7c6:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a7c8:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a7ca:	60 a5       	ldd	r22, Z+40	; 0x28
   1a7cc:	71 a5       	ldd	r23, Z+41	; 0x29
   1a7ce:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a7d0:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a7d2:	a8 01       	movw	r20, r16
   1a7d4:	4c 59       	subi	r20, 0x9C	; 156
   1a7d6:	5f 4f       	sbci	r21, 0xFF	; 255
   1a7d8:	0e 94 f1 c1 	call	0x183e2	; 0x183e2 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a7dc:	81 e0       	ldi	r24, 0x01	; 1
   1a7de:	90 e8       	ldi	r25, 0x80	; 128
   1a7e0:	f8 01       	movw	r30, r16
   1a7e2:	e6 59       	subi	r30, 0x96	; 150
   1a7e4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a7e6:	91 83       	std	Z+1, r25	; 0x01
   1a7e8:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a7ea:	32 96       	adiw	r30, 0x02	; 2
   1a7ec:	91 82       	std	Z+1, r9	; 0x01
   1a7ee:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a7f0:	80 e0       	ldi	r24, 0x00	; 0
   1a7f2:	91 e0       	ldi	r25, 0x01	; 1
   1a7f4:	32 96       	adiw	r30, 0x02	; 2
   1a7f6:	91 83       	std	Z+1, r25	; 0x01
   1a7f8:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a7fa:	58 01       	movw	r10, r16
   1a7fc:	fc e5       	ldi	r31, 0x5C	; 92
   1a7fe:	af 0e       	add	r10, r31
   1a800:	b1 1c       	adc	r11, r1
   1a802:	f5 01       	movw	r30, r10
   1a804:	80 81       	ld	r24, Z
   1a806:	91 81       	ldd	r25, Z+1	; 0x01
   1a808:	a2 81       	ldd	r26, Z+2	; 0x02
   1a80a:	b3 81       	ldd	r27, Z+3	; 0x03
   1a80c:	22 24       	eor	r2, r2
   1a80e:	38 2e       	mov	r3, r24
   1a810:	49 2e       	mov	r4, r25
   1a812:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a814:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a818:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a81c:	92 ff       	sbrs	r25, 2
   1a81e:	05 c0       	rjmp	.+10     	; 0x1a82a <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a820:	6c e5       	ldi	r22, 0x5C	; 92
   1a822:	76 e1       	ldi	r23, 0x16	; 22
   1a824:	c8 01       	movw	r24, r16
   1a826:	0e 94 dd c2 	call	0x185ba	; 0x185ba <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a82a:	97 01       	movw	r18, r14
   1a82c:	b2 01       	movw	r22, r4
   1a82e:	a1 01       	movw	r20, r2
   1a830:	c8 01       	movw	r24, r16
   1a832:	34 de       	rcall	.-920    	; 0x1a49c <lif_add_ascii_file_as_e010_wrapper>
   1a834:	4b 01       	movw	r8, r22
   1a836:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a838:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a83c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a840:	92 ff       	sbrs	r25, 2
   1a842:	4a c0       	rjmp	.+148    	; 0x1a8d8 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a844:	8b e2       	ldi	r24, 0x2B	; 43
   1a846:	94 e3       	ldi	r25, 0x34	; 52
   1a848:	a0 e0       	ldi	r26, 0x00	; 0
   1a84a:	ed b7       	in	r30, 0x3d	; 61
   1a84c:	fe b7       	in	r31, 0x3e	; 62
   1a84e:	81 83       	std	Z+1, r24	; 0x01
   1a850:	92 83       	std	Z+2, r25	; 0x02
   1a852:	a3 83       	std	Z+3, r26	; 0x03
   1a854:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a858:	ed b7       	in	r30, 0x3d	; 61
   1a85a:	fe b7       	in	r31, 0x3e	; 62
   1a85c:	d5 82       	std	Z+5, r13	; 0x05
   1a85e:	c4 82       	std	Z+4, r12	; 0x04
   1a860:	84 e1       	ldi	r24, 0x14	; 20
   1a862:	94 e3       	ldi	r25, 0x34	; 52
   1a864:	a0 e0       	ldi	r26, 0x00	; 0
   1a866:	81 83       	std	Z+1, r24	; 0x01
   1a868:	92 83       	std	Z+2, r25	; 0x02
   1a86a:	a3 83       	std	Z+3, r26	; 0x03
   1a86c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a870:	ed b7       	in	r30, 0x3d	; 61
   1a872:	fe b7       	in	r31, 0x3e	; 62
   1a874:	75 82       	std	Z+5, r7	; 0x05
   1a876:	64 82       	std	Z+4, r6	; 0x04
   1a878:	8d ef       	ldi	r24, 0xFD	; 253
   1a87a:	93 e3       	ldi	r25, 0x33	; 51
   1a87c:	a0 e0       	ldi	r26, 0x00	; 0
   1a87e:	81 83       	std	Z+1, r24	; 0x01
   1a880:	92 83       	std	Z+2, r25	; 0x02
   1a882:	a3 83       	std	Z+3, r26	; 0x03
   1a884:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a888:	f5 01       	movw	r30, r10
   1a88a:	80 81       	ld	r24, Z
   1a88c:	91 81       	ldd	r25, Z+1	; 0x01
   1a88e:	a2 81       	ldd	r26, Z+2	; 0x02
   1a890:	b3 81       	ldd	r27, Z+3	; 0x03
   1a892:	ed b7       	in	r30, 0x3d	; 61
   1a894:	fe b7       	in	r31, 0x3e	; 62
   1a896:	84 83       	std	Z+4, r24	; 0x04
   1a898:	95 83       	std	Z+5, r25	; 0x05
   1a89a:	a6 83       	std	Z+6, r26	; 0x06
   1a89c:	b7 83       	std	Z+7, r27	; 0x07
   1a89e:	84 ee       	ldi	r24, 0xE4	; 228
   1a8a0:	93 e3       	ldi	r25, 0x33	; 51
   1a8a2:	a0 e0       	ldi	r26, 0x00	; 0
   1a8a4:	81 83       	std	Z+1, r24	; 0x01
   1a8a6:	92 83       	std	Z+2, r25	; 0x02
   1a8a8:	a3 83       	std	Z+3, r26	; 0x03
   1a8aa:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a8ae:	f8 01       	movw	r30, r16
   1a8b0:	e0 5a       	subi	r30, 0xA0	; 160
   1a8b2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8b4:	80 81       	ld	r24, Z
   1a8b6:	91 81       	ldd	r25, Z+1	; 0x01
   1a8b8:	a2 81       	ldd	r26, Z+2	; 0x02
   1a8ba:	b3 81       	ldd	r27, Z+3	; 0x03
   1a8bc:	ed b7       	in	r30, 0x3d	; 61
   1a8be:	fe b7       	in	r31, 0x3e	; 62
   1a8c0:	84 83       	std	Z+4, r24	; 0x04
   1a8c2:	95 83       	std	Z+5, r25	; 0x05
   1a8c4:	a6 83       	std	Z+6, r26	; 0x06
   1a8c6:	b7 83       	std	Z+7, r27	; 0x07
   1a8c8:	8b ec       	ldi	r24, 0xCB	; 203
   1a8ca:	93 e3       	ldi	r25, 0x33	; 51
   1a8cc:	a0 e0       	ldi	r26, 0x00	; 0
   1a8ce:	81 83       	std	Z+1, r24	; 0x01
   1a8d0:	92 83       	std	Z+2, r25	; 0x02
   1a8d2:	a3 83       	std	Z+3, r26	; 0x03
   1a8d4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a8d8:	b3 01       	movw	r22, r6
   1a8da:	c8 01       	movw	r24, r16
   1a8dc:	0e 94 38 c8 	call	0x19070	; 0x19070 <lif_writedirindex>
   1a8e0:	89 2b       	or	r24, r25
   1a8e2:	21 f4       	brne	.+8      	; 0x1a8ec <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a8e4:	c8 01       	movw	r24, r16
   1a8e6:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
   1a8ea:	14 c0       	rjmp	.+40     	; 0x1a914 <lif_add_ascii_file_as_e010+0x268>
   1a8ec:	c8 01       	movw	r24, r16
   1a8ee:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a8f2:	ed b7       	in	r30, 0x3d	; 61
   1a8f4:	fe b7       	in	r31, 0x3e	; 62
   1a8f6:	84 82       	std	Z+4, r8	; 0x04
   1a8f8:	95 82       	std	Z+5, r9	; 0x05
   1a8fa:	e6 82       	std	Z+6, r14	; 0x06
   1a8fc:	f7 82       	std	Z+7, r15	; 0x07
   1a8fe:	8d eb       	ldi	r24, 0xBD	; 189
   1a900:	93 e3       	ldi	r25, 0x33	; 51
   1a902:	a0 e0       	ldi	r26, 0x00	; 0
   1a904:	81 83       	std	Z+1, r24	; 0x01
   1a906:	92 83       	std	Z+2, r25	; 0x02
   1a908:	a3 83       	std	Z+3, r26	; 0x03
   1a90a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

// Return file size
    return(bytes);
   1a90e:	b4 01       	movw	r22, r8
   1a910:	c7 01       	movw	r24, r14
   1a912:	04 c0       	rjmp	.+8      	; 0x1a91c <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a914:	6f ef       	ldi	r22, 0xFF	; 255
   1a916:	7f ef       	ldi	r23, 0xFF	; 255
   1a918:	8f ef       	ldi	r24, 0xFF	; 255
   1a91a:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a91c:	eb 96       	adiw	r28, 0x3b	; 59
   1a91e:	e2 e1       	ldi	r30, 0x12	; 18
   1a920:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0001a924 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a924:	a7 e3       	ldi	r26, 0x37	; 55
   1a926:	b2 e0       	ldi	r27, 0x02	; 2
   1a928:	e8 e9       	ldi	r30, 0x98	; 152
   1a92a:	f4 ed       	ldi	r31, 0xD4	; 212
   1a92c:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   1a930:	7c 01       	movw	r14, r24
   1a932:	8b 01       	movw	r16, r22
   1a934:	ca 5d       	subi	r28, 0xDA	; 218
   1a936:	dd 4f       	sbci	r29, 0xFD	; 253
   1a938:	59 83       	std	Y+1, r21	; 0x01
   1a93a:	48 83       	st	Y, r20
   1a93c:	c6 52       	subi	r28, 0x26	; 38
   1a93e:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a940:	62 e4       	ldi	r22, 0x42	; 66
   1a942:	73 e0       	ldi	r23, 0x03	; 3
   1a944:	5d d9       	rcall	.-3398   	; 0x19c00 <lif_open_volume>
   1a946:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a948:	00 97       	sbiw	r24, 0x00	; 0
   1a94a:	69 f4       	brne	.+26     	; 0x1a966 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a94c:	ed b7       	in	r30, 0x3d	; 61
   1a94e:	fe b7       	in	r31, 0x3e	; 62
   1a950:	f5 82       	std	Z+5, r15	; 0x05
   1a952:	e4 82       	std	Z+4, r14	; 0x04
   1a954:	85 ea       	ldi	r24, 0xA5	; 165
   1a956:	93 e3       	ldi	r25, 0x33	; 51
   1a958:	a0 e0       	ldi	r26, 0x00	; 0
   1a95a:	81 83       	std	Z+1, r24	; 0x01
   1a95c:	92 83       	std	Z+2, r25	; 0x02
   1a95e:	a3 83       	std	Z+3, r26	; 0x03
   1a960:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1a964:	13 c0       	rjmp	.+38     	; 0x1a98c <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a966:	b8 01       	movw	r22, r16
   1a968:	20 dc       	rcall	.-1984   	; 0x1a1aa <lif_find_file>
    if(index == -1)
   1a96a:	01 96       	adiw	r24, 0x01	; 1
   1a96c:	91 f4       	brne	.+36     	; 0x1a992 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a96e:	ed b7       	in	r30, 0x3d	; 61
   1a970:	fe b7       	in	r31, 0x3e	; 62
   1a972:	15 83       	std	Z+5, r17	; 0x05
   1a974:	04 83       	std	Z+4, r16	; 0x04
   1a976:	8e e8       	ldi	r24, 0x8E	; 142
   1a978:	93 e3       	ldi	r25, 0x33	; 51
   1a97a:	a0 e0       	ldi	r26, 0x00	; 0
   1a97c:	81 83       	std	Z+1, r24	; 0x01
   1a97e:	92 83       	std	Z+2, r25	; 0x02
   1a980:	a3 83       	std	Z+3, r26	; 0x03
   1a982:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a986:	c6 01       	movw	r24, r12
   1a988:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a98c:	80 e0       	ldi	r24, 0x00	; 0
   1a98e:	90 e0       	ldi	r25, 0x00	; 0
   1a990:	73 c2       	rjmp	.+1254   	; 0x1ae78 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a992:	f6 01       	movw	r30, r12
   1a994:	e6 5a       	subi	r30, 0xA6	; 166
   1a996:	ff 4f       	sbci	r31, 0xFF	; 255
   1a998:	80 81       	ld	r24, Z
   1a99a:	91 81       	ldd	r25, Z+1	; 0x01
   1a99c:	9c 01       	movw	r18, r24
   1a99e:	2c 7f       	andi	r18, 0xFC	; 252
   1a9a0:	20 31       	cpi	r18, 0x10	; 16
   1a9a2:	30 4e       	sbci	r19, 0xE0	; 224
   1a9a4:	a9 f0       	breq	.+42     	; 0x1a9d0 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a9a6:	ed b7       	in	r30, 0x3d	; 61
   1a9a8:	fe b7       	in	r31, 0x3e	; 62
   1a9aa:	97 83       	std	Z+7, r25	; 0x07
   1a9ac:	86 83       	std	Z+6, r24	; 0x06
   1a9ae:	ca 5d       	subi	r28, 0xDA	; 218
   1a9b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9b2:	28 81       	ld	r18, Y
   1a9b4:	39 81       	ldd	r19, Y+1	; 0x01
   1a9b6:	c6 52       	subi	r28, 0x26	; 38
   1a9b8:	d2 40       	sbci	r29, 0x02	; 2
   1a9ba:	35 83       	std	Z+5, r19	; 0x05
   1a9bc:	24 83       	std	Z+4, r18	; 0x04
   1a9be:	86 e5       	ldi	r24, 0x56	; 86
   1a9c0:	93 e3       	ldi	r25, 0x33	; 51
   1a9c2:	a0 e0       	ldi	r26, 0x00	; 0
   1a9c4:	81 83       	std	Z+1, r24	; 0x01
   1a9c6:	92 83       	std	Z+2, r25	; 0x02
   1a9c8:	a3 83       	std	Z+3, r26	; 0x03
   1a9ca:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1a9ce:	db cf       	rjmp	.-74     	; 0x1a986 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a9d0:	f6 01       	movw	r30, r12
   1a9d2:	e4 5a       	subi	r30, 0xA4	; 164
   1a9d4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a9d6:	80 80       	ld	r8, Z
   1a9d8:	91 80       	ldd	r9, Z+1	; 0x01
   1a9da:	a2 80       	ldd	r10, Z+2	; 0x02
   1a9dc:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a9de:	34 96       	adiw	r30, 0x04	; 4
   1a9e0:	80 81       	ld	r24, Z
   1a9e2:	91 81       	ldd	r25, Z+1	; 0x01
   1a9e4:	a2 81       	ldd	r26, Z+2	; 0x02
   1a9e6:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9e8:	a5 01       	movw	r20, r10
   1a9ea:	94 01       	movw	r18, r8
   1a9ec:	28 0f       	add	r18, r24
   1a9ee:	39 1f       	adc	r19, r25
   1a9f0:	4a 1f       	adc	r20, r26
   1a9f2:	5b 1f       	adc	r21, r27
   1a9f4:	c4 5d       	subi	r28, 0xD4	; 212
   1a9f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9f8:	28 83       	st	Y, r18
   1a9fa:	39 83       	std	Y+1, r19	; 0x01
   1a9fc:	4a 83       	std	Y+2, r20	; 0x02
   1a9fe:	5b 83       	std	Y+3, r21	; 0x03
   1aa00:	cc 52       	subi	r28, 0x2C	; 44
   1aa02:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1aa04:	c6 01       	movw	r24, r12
   1aa06:	8c 59       	subi	r24, 0x9C	; 156
   1aa08:	9f 4f       	sbci	r25, 0xFF	; 255
   1aa0a:	0e 94 33 c2 	call	0x18466	; 0x18466 <lif_lifbcd2time>
   1aa0e:	c8 5d       	subi	r28, 0xD8	; 216
   1aa10:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa12:	68 83       	st	Y, r22
   1aa14:	79 83       	std	Y+1, r23	; 0x01
   1aa16:	8a 83       	std	Y+2, r24	; 0x02
   1aa18:	9b 83       	std	Y+3, r25	; 0x03
   1aa1a:	c8 52       	subi	r28, 0x28	; 40
   1aa1c:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1aa1e:	ba 2d       	mov	r27, r10
   1aa20:	a9 2d       	mov	r26, r9
   1aa22:	98 2d       	mov	r25, r8
   1aa24:	88 27       	eor	r24, r24
   1aa26:	c2 5e       	subi	r28, 0xE2	; 226
   1aa28:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa2a:	88 83       	st	Y, r24
   1aa2c:	99 83       	std	Y+1, r25	; 0x01
   1aa2e:	aa 83       	std	Y+2, r26	; 0x02
   1aa30:	bb 83       	std	Y+3, r27	; 0x03
   1aa32:	ce 51       	subi	r28, 0x1E	; 30
   1aa34:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1aa36:	6c e0       	ldi	r22, 0x0C	; 12
   1aa38:	79 e0       	ldi	r23, 0x09	; 9
   1aa3a:	ca 5d       	subi	r28, 0xDA	; 218
   1aa3c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa3e:	88 81       	ld	r24, Y
   1aa40:	99 81       	ldd	r25, Y+1	; 0x01
   1aa42:	c6 52       	subi	r28, 0x26	; 38
   1aa44:	d2 40       	sbci	r29, 0x02	; 2
   1aa46:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <lif_open>
   1aa4a:	cc 5d       	subi	r28, 0xDC	; 220
   1aa4c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa4e:	99 83       	std	Y+1, r25	; 0x01
   1aa50:	88 83       	st	Y, r24
   1aa52:	c4 52       	subi	r28, 0x24	; 36
   1aa54:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1aa56:	89 2b       	or	r24, r25
   1aa58:	09 f4       	brne	.+2      	; 0x1aa5c <lif_extract_e010_as_ascii+0x138>
   1aa5a:	95 cf       	rjmp	.-214    	; 0x1a986 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1aa5c:	ca 5d       	subi	r28, 0xDA	; 218
   1aa5e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa60:	28 81       	ld	r18, Y
   1aa62:	39 81       	ldd	r19, Y+1	; 0x01
   1aa64:	c6 52       	subi	r28, 0x26	; 38
   1aa66:	d2 40       	sbci	r29, 0x02	; 2
   1aa68:	ed b7       	in	r30, 0x3d	; 61
   1aa6a:	fe b7       	in	r31, 0x3e	; 62
   1aa6c:	35 83       	std	Z+5, r19	; 0x05
   1aa6e:	24 83       	std	Z+4, r18	; 0x04
   1aa70:	86 e4       	ldi	r24, 0x46	; 70
   1aa72:	93 e3       	ldi	r25, 0x33	; 51
   1aa74:	a0 e0       	ldi	r26, 0x00	; 0
   1aa76:	81 83       	std	Z+1, r24	; 0x01
   1aa78:	92 83       	std	Z+2, r25	; 0x02
   1aa7a:	a3 83       	std	Z+3, r26	; 0x03
   1aa7c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    bytes = 0;
    wind = 0;
   1aa80:	21 2c       	mov	r2, r1
   1aa82:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1aa84:	ce 5d       	subi	r28, 0xDE	; 222
   1aa86:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa88:	19 82       	std	Y+1, r1	; 0x01
   1aa8a:	18 82       	st	Y, r1
   1aa8c:	c2 52       	subi	r28, 0x22	; 34
   1aa8e:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1aa90:	ee 24       	eor	r14, r14
   1aa92:	e3 94       	inc	r14
   1aa94:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1aa96:	41 2c       	mov	r4, r1
   1aa98:	51 2c       	mov	r5, r1
   1aa9a:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1aa9c:	85 e8       	ldi	r24, 0x85	; 133
   1aa9e:	92 e3       	ldi	r25, 0x32	; 50
   1aaa0:	9c 01       	movw	r18, r24
   1aaa2:	40 e0       	ldi	r20, 0x00	; 0
   1aaa4:	ce 5c       	subi	r28, 0xCE	; 206
   1aaa6:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaa8:	28 83       	st	Y, r18
   1aaaa:	39 83       	std	Y+1, r19	; 0x01
   1aaac:	4a 83       	std	Y+2, r20	; 0x02
   1aaae:	c2 53       	subi	r28, 0x32	; 50
   1aab0:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1aab2:	83 e9       	ldi	r24, 0x93	; 147
   1aab4:	92 e3       	ldi	r25, 0x32	; 50
   1aab6:	9c 01       	movw	r18, r24
   1aab8:	40 e0       	ldi	r20, 0x00	; 0
   1aaba:	cb 5c       	subi	r28, 0xCB	; 203
   1aabc:	dd 4f       	sbci	r29, 0xFD	; 253
   1aabe:	28 83       	st	Y, r18
   1aac0:	39 83       	std	Y+1, r19	; 0x01
   1aac2:	4a 83       	std	Y+2, r20	; 0x02
   1aac4:	c5 53       	subi	r28, 0x35	; 53
   1aac6:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1aac8:	c2 5e       	subi	r28, 0xE2	; 226
   1aaca:	dd 4f       	sbci	r29, 0xFD	; 253
   1aacc:	28 81       	ld	r18, Y
   1aace:	39 81       	ldd	r19, Y+1	; 0x01
   1aad0:	4a 81       	ldd	r20, Y+2	; 0x02
   1aad2:	5b 81       	ldd	r21, Y+3	; 0x03
   1aad4:	ce 51       	subi	r28, 0x1E	; 30
   1aad6:	d2 40       	sbci	r29, 0x02	; 2
   1aad8:	bb 27       	eor	r27, r27
   1aada:	a5 2f       	mov	r26, r21
   1aadc:	94 2f       	mov	r25, r20
   1aade:	83 2f       	mov	r24, r19
   1aae0:	c4 5d       	subi	r28, 0xD4	; 212
   1aae2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aae4:	28 81       	ld	r18, Y
   1aae6:	39 81       	ldd	r19, Y+1	; 0x01
   1aae8:	4a 81       	ldd	r20, Y+2	; 0x02
   1aaea:	5b 81       	ldd	r21, Y+3	; 0x03
   1aaec:	cc 52       	subi	r28, 0x2C	; 44
   1aaee:	d2 40       	sbci	r29, 0x02	; 2
   1aaf0:	28 17       	cp	r18, r24
   1aaf2:	39 07       	cpc	r19, r25
   1aaf4:	4a 07       	cpc	r20, r26
   1aaf6:	5b 07       	cpc	r21, r27
   1aaf8:	08 f4       	brcc	.+2      	; 0x1aafc <lif_extract_e010_as_ascii+0x1d8>
   1aafa:	51 c1       	rjmp	.+674    	; 0x1ad9e <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1aafc:	00 e0       	ldi	r16, 0x00	; 0
   1aafe:	11 e0       	ldi	r17, 0x01	; 1
   1ab00:	c2 5e       	subi	r28, 0xE2	; 226
   1ab02:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab04:	28 81       	ld	r18, Y
   1ab06:	39 81       	ldd	r19, Y+1	; 0x01
   1ab08:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab0a:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab0c:	ce 51       	subi	r28, 0x1E	; 30
   1ab0e:	d2 40       	sbci	r29, 0x02	; 2
   1ab10:	be 01       	movw	r22, r28
   1ab12:	60 5f       	subi	r22, 0xF0	; 240
   1ab14:	7e 4f       	sbci	r23, 0xFE	; 254
   1ab16:	c6 01       	movw	r24, r12
   1ab18:	0e 94 77 be 	call	0x17cee	; 0x17cee <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ab1c:	6f 3f       	cpi	r22, 0xFF	; 255
   1ab1e:	71 05       	cpc	r23, r1
   1ab20:	09 f0       	breq	.+2      	; 0x1ab24 <lif_extract_e010_as_ascii+0x200>
   1ab22:	0c f4       	brge	.+2      	; 0x1ab26 <lif_extract_e010_as_ascii+0x202>
   1ab24:	3a c1       	rjmp	.+628    	; 0x1ad9a <lif_extract_e010_as_ascii+0x476>
   1ab26:	00 e0       	ldi	r16, 0x00	; 0
   1ab28:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ab2a:	ce 5d       	subi	r28, 0xDE	; 222
   1ab2c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab2e:	88 81       	ld	r24, Y
   1ab30:	99 81       	ldd	r25, Y+1	; 0x01
   1ab32:	c2 52       	subi	r28, 0x22	; 34
   1ab34:	d2 40       	sbci	r29, 0x02	; 2
   1ab36:	89 2b       	or	r24, r25
   1ab38:	09 f0       	breq	.+2      	; 0x1ab3c <lif_extract_e010_as_ascii+0x218>
   1ab3a:	1b c1       	rjmp	.+566    	; 0x1ad72 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1ab3c:	e0 e1       	ldi	r30, 0x10	; 16
   1ab3e:	f1 e0       	ldi	r31, 0x01	; 1
   1ab40:	ec 0f       	add	r30, r28
   1ab42:	fd 1f       	adc	r31, r29
   1ab44:	e0 0f       	add	r30, r16
   1ab46:	f1 1f       	adc	r31, r17
   1ab48:	80 81       	ld	r24, Z
   1ab4a:	98 2f       	mov	r25, r24
   1ab4c:	9f 7e       	andi	r25, 0xEF	; 239
   1ab4e:	9f 3c       	cpi	r25, 0xCF	; 207
   1ab50:	11 f0       	breq	.+4      	; 0x1ab56 <lif_extract_e010_as_ascii+0x232>
   1ab52:	8f 36       	cpi	r24, 0x6F	; 111
   1ab54:	c9 f5       	brne	.+114    	; 0x1abc8 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1ab56:	e0 e1       	ldi	r30, 0x10	; 16
   1ab58:	f1 e0       	ldi	r31, 0x01	; 1
   1ab5a:	ec 0f       	add	r30, r28
   1ab5c:	fd 1f       	adc	r31, r29
   1ab5e:	e0 0f       	add	r30, r16
   1ab60:	f1 1f       	adc	r31, r17
   1ab62:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1ab64:	f8 01       	movw	r30, r16
   1ab66:	32 96       	adiw	r30, 0x02	; 2
   1ab68:	40 e1       	ldi	r20, 0x10	; 16
   1ab6a:	51 e0       	ldi	r21, 0x01	; 1
   1ab6c:	4c 0f       	add	r20, r28
   1ab6e:	5d 1f       	adc	r21, r29
   1ab70:	e4 0f       	add	r30, r20
   1ab72:	f5 1f       	adc	r31, r21
   1ab74:	0d 5f       	subi	r16, 0xFD	; 253
   1ab76:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab78:	80 81       	ld	r24, Z
   1ab7a:	b1 2c       	mov	r11, r1
   1ab7c:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1ab7e:	a1 14       	cp	r10, r1
   1ab80:	b1 04       	cpc	r11, r1
   1ab82:	09 f4       	brne	.+2      	; 0x1ab86 <lif_extract_e010_as_ascii+0x262>
   1ab84:	ee c0       	rjmp	.+476    	; 0x1ad62 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1ab86:	5f ef       	ldi	r21, 0xFF	; 255
   1ab88:	a5 16       	cp	r10, r21
   1ab8a:	b1 04       	cpc	r11, r1
   1ab8c:	09 f0       	breq	.+2      	; 0x1ab90 <lif_extract_e010_as_ascii+0x26c>
   1ab8e:	7c f4       	brge	.+30     	; 0x1abae <lif_extract_e010_as_ascii+0x28a>
   1ab90:	c4 5e       	subi	r28, 0xE4	; 228
   1ab92:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab94:	19 82       	std	Y+1, r1	; 0x01
   1ab96:	18 82       	st	Y, r1
   1ab98:	cc 51       	subi	r28, 0x1C	; 28
   1ab9a:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1ab9c:	c5 01       	movw	r24, r10
   1ab9e:	01 97       	sbiw	r24, 0x01	; 1
   1aba0:	c0 5d       	subi	r28, 0xD0	; 208
   1aba2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aba4:	99 83       	std	Y+1, r25	; 0x01
   1aba6:	88 83       	st	Y, r24
   1aba8:	c0 53       	subi	r28, 0x30	; 48
   1abaa:	d2 40       	sbci	r29, 0x02	; 2
   1abac:	68 c0       	rjmp	.+208    	; 0x1ac7e <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1abae:	ed b7       	in	r30, 0x3d	; 61
   1abb0:	fe b7       	in	r31, 0x3e	; 62
   1abb2:	b5 82       	std	Z+5, r11	; 0x05
   1abb4:	a4 82       	std	Z+4, r10	; 0x04
   1abb6:	81 e1       	ldi	r24, 0x11	; 17
   1abb8:	93 e3       	ldi	r25, 0x33	; 51
   1abba:	a0 e0       	ldi	r26, 0x00	; 0
   1abbc:	81 83       	std	Z+1, r24	; 0x01
   1abbe:	92 83       	std	Z+2, r25	; 0x02
   1abc0:	a3 83       	std	Z+3, r26	; 0x03
   1abc2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1abc6:	1e c0       	rjmp	.+60     	; 0x1ac04 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1abc8:	8f 3e       	cpi	r24, 0xEF	; 239
   1abca:	09 f4       	brne	.+2      	; 0x1abce <lif_extract_e010_as_ascii+0x2aa>
   1abcc:	d2 c0       	rjmp	.+420    	; 0x1ad72 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1abce:	ed b7       	in	r30, 0x3d	; 61
   1abd0:	fe b7       	in	r31, 0x3e	; 62
   1abd2:	13 87       	std	Z+11, r17	; 0x0b
   1abd4:	02 87       	std	Z+10, r16	; 0x0a
   1abd6:	c2 5e       	subi	r28, 0xE2	; 226
   1abd8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abda:	28 81       	ld	r18, Y
   1abdc:	39 81       	ldd	r19, Y+1	; 0x01
   1abde:	4a 81       	ldd	r20, Y+2	; 0x02
   1abe0:	5b 81       	ldd	r21, Y+3	; 0x03
   1abe2:	ce 51       	subi	r28, 0x1E	; 30
   1abe4:	d2 40       	sbci	r29, 0x02	; 2
   1abe6:	26 83       	std	Z+6, r18	; 0x06
   1abe8:	37 83       	std	Z+7, r19	; 0x07
   1abea:	40 87       	std	Z+8, r20	; 0x08
   1abec:	51 87       	std	Z+9, r21	; 0x09
   1abee:	90 e0       	ldi	r25, 0x00	; 0
   1abf0:	95 83       	std	Z+5, r25	; 0x05
   1abf2:	84 83       	std	Z+4, r24	; 0x04
   1abf4:	8b eb       	ldi	r24, 0xBB	; 187
   1abf6:	92 e3       	ldi	r25, 0x32	; 50
   1abf8:	a0 e0       	ldi	r26, 0x00	; 0
   1abfa:	81 83       	std	Z+1, r24	; 0x01
   1abfc:	92 83       	std	Z+2, r25	; 0x02
   1abfe:	a3 83       	std	Z+3, r26	; 0x03
   1ac00:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                status = 0;
                done = 1;
   1ac04:	21 e0       	ldi	r18, 0x01	; 1
   1ac06:	30 e0       	ldi	r19, 0x00	; 0
   1ac08:	ce 5d       	subi	r28, 0xDE	; 222
   1ac0a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac0c:	39 83       	std	Y+1, r19	; 0x01
   1ac0e:	28 83       	st	Y, r18
   1ac10:	c2 52       	subi	r28, 0x22	; 34
   1ac12:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ac14:	e1 2c       	mov	r14, r1
   1ac16:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ac18:	ac c0       	rjmp	.+344    	; 0x1ad72 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ac1a:	0f 3f       	cpi	r16, 0xFF	; 255
   1ac1c:	11 05       	cpc	r17, r1
   1ac1e:	11 f0       	breq	.+4      	; 0x1ac24 <lif_extract_e010_as_ascii+0x300>
   1ac20:	0c f0       	brlt	.+2      	; 0x1ac24 <lif_extract_e010_as_ascii+0x300>
   1ac22:	a7 c0       	rjmp	.+334    	; 0x1ad72 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ac24:	e0 e1       	ldi	r30, 0x10	; 16
   1ac26:	f1 e0       	ldi	r31, 0x01	; 1
   1ac28:	ec 0f       	add	r30, r28
   1ac2a:	fd 1f       	adc	r31, r29
   1ac2c:	e0 0f       	add	r30, r16
   1ac2e:	f1 1f       	adc	r31, r17
   1ac30:	20 81       	ld	r18, Z
   1ac32:	a1 01       	movw	r20, r2
   1ac34:	4f 5f       	subi	r20, 0xFF	; 255
   1ac36:	5f 4f       	sbci	r21, 0xFF	; 255
   1ac38:	4a 01       	movw	r8, r20
   1ac3a:	2d 30       	cpi	r18, 0x0D	; 13
   1ac3c:	51 f1       	breq	.+84     	; 0x1ac92 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ac3e:	98 2d       	mov	r25, r8
   1ac40:	89 2d       	mov	r24, r9
   1ac42:	0f 5f       	subi	r16, 0xFF	; 255
   1ac44:	1f 4f       	sbci	r17, 0xFF	; 255
   1ac46:	ec e0       	ldi	r30, 0x0C	; 12
   1ac48:	f0 e0       	ldi	r31, 0x00	; 0
   1ac4a:	ec 0f       	add	r30, r28
   1ac4c:	fd 1f       	adc	r31, r29
   1ac4e:	e2 0d       	add	r30, r2
   1ac50:	f3 1d       	adc	r31, r3
   1ac52:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1ac54:	ef ef       	ldi	r30, 0xFF	; 255
   1ac56:	8e 16       	cp	r8, r30
   1ac58:	91 04       	cpc	r9, r1
   1ac5a:	09 f0       	breq	.+2      	; 0x1ac5e <lif_extract_e010_as_ascii+0x33a>
   1ac5c:	ac f5       	brge	.+106    	; 0x1acc8 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ac5e:	c4 5e       	subi	r28, 0xE4	; 228
   1ac60:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac62:	28 81       	ld	r18, Y
   1ac64:	39 81       	ldd	r19, Y+1	; 0x01
   1ac66:	cc 51       	subi	r28, 0x1C	; 28
   1ac68:	d2 40       	sbci	r29, 0x02	; 2
   1ac6a:	2f 5f       	subi	r18, 0xFF	; 255
   1ac6c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac6e:	c4 5e       	subi	r28, 0xE4	; 228
   1ac70:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac72:	39 83       	std	Y+1, r19	; 0x01
   1ac74:	28 83       	st	Y, r18
   1ac76:	cc 51       	subi	r28, 0x1C	; 28
   1ac78:	d2 40       	sbci	r29, 0x02	; 2
   1ac7a:	29 2e       	mov	r2, r25
   1ac7c:	38 2e       	mov	r3, r24
   1ac7e:	c4 5e       	subi	r28, 0xE4	; 228
   1ac80:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac82:	48 81       	ld	r20, Y
   1ac84:	59 81       	ldd	r21, Y+1	; 0x01
   1ac86:	cc 51       	subi	r28, 0x1C	; 28
   1ac88:	d2 40       	sbci	r29, 0x02	; 2
   1ac8a:	4a 15       	cp	r20, r10
   1ac8c:	5b 05       	cpc	r21, r11
   1ac8e:	2c f2       	brlt	.-118    	; 0x1ac1a <lif_extract_e010_as_ascii+0x2f6>
   1ac90:	62 c0       	rjmp	.+196    	; 0x1ad56 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ac92:	c4 5e       	subi	r28, 0xE4	; 228
   1ac94:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac96:	88 81       	ld	r24, Y
   1ac98:	99 81       	ldd	r25, Y+1	; 0x01
   1ac9a:	cc 51       	subi	r28, 0x1C	; 28
   1ac9c:	d2 40       	sbci	r29, 0x02	; 2
   1ac9e:	c0 5d       	subi	r28, 0xD0	; 208
   1aca0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aca2:	a8 81       	ld	r26, Y
   1aca4:	b9 81       	ldd	r27, Y+1	; 0x01
   1aca6:	c0 53       	subi	r28, 0x30	; 48
   1aca8:	d2 40       	sbci	r29, 0x02	; 2
   1acaa:	8a 17       	cp	r24, r26
   1acac:	9b 07       	cpc	r25, r27
   1acae:	39 f6       	brne	.-114    	; 0x1ac3e <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1acb0:	ec e0       	ldi	r30, 0x0C	; 12
   1acb2:	f0 e0       	ldi	r31, 0x00	; 0
   1acb4:	ec 0f       	add	r30, r28
   1acb6:	fd 1f       	adc	r31, r29
   1acb8:	e2 0d       	add	r30, r2
   1acba:	f3 1d       	adc	r31, r3
   1acbc:	ba e0       	ldi	r27, 0x0A	; 10
   1acbe:	b0 83       	st	Z, r27
                    ++ind;
   1acc0:	0f 5f       	subi	r16, 0xFF	; 255
   1acc2:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1acc4:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1acc6:	47 c0       	rjmp	.+142    	; 0x1ad56 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1acc8:	cc 5d       	subi	r28, 0xDC	; 220
   1acca:	dd 4f       	sbci	r29, 0xFD	; 253
   1accc:	28 81       	ld	r18, Y
   1acce:	39 81       	ldd	r19, Y+1	; 0x01
   1acd0:	c4 52       	subi	r28, 0x24	; 36
   1acd2:	d2 40       	sbci	r29, 0x02	; 2
   1acd4:	a4 01       	movw	r20, r8
   1acd6:	61 e0       	ldi	r22, 0x01	; 1
   1acd8:	70 e0       	ldi	r23, 0x00	; 0
   1acda:	ce 01       	movw	r24, r28
   1acdc:	0c 96       	adiw	r24, 0x0c	; 12
   1acde:	0e 94 19 7b 	call	0xf632	; 0xf632 <fwrite>
                    if(size < wind)
   1ace2:	88 15       	cp	r24, r8
   1ace4:	99 05       	cpc	r25, r9
   1ace6:	d4 f4       	brge	.+52     	; 0x1ad1c <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ace8:	cb 5c       	subi	r28, 0xCB	; 203
   1acea:	dd 4f       	sbci	r29, 0xFD	; 253
   1acec:	28 81       	ld	r18, Y
   1acee:	39 81       	ldd	r19, Y+1	; 0x01
   1acf0:	4a 81       	ldd	r20, Y+2	; 0x02
   1acf2:	c5 53       	subi	r28, 0x35	; 53
   1acf4:	d2 40       	sbci	r29, 0x02	; 2
   1acf6:	ed b7       	in	r30, 0x3d	; 61
   1acf8:	fe b7       	in	r31, 0x3e	; 62
   1acfa:	21 83       	std	Z+1, r18	; 0x01
   1acfc:	32 83       	std	Z+2, r19	; 0x02
   1acfe:	43 83       	std	Z+3, r20	; 0x03
   1ad00:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ad04:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ad06:	21 e0       	ldi	r18, 0x01	; 1
   1ad08:	30 e0       	ldi	r19, 0x00	; 0
   1ad0a:	ce 5d       	subi	r28, 0xDE	; 222
   1ad0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad0e:	39 83       	std	Y+1, r19	; 0x01
   1ad10:	28 83       	st	Y, r18
   1ad12:	c2 52       	subi	r28, 0x22	; 34
   1ad14:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ad16:	e1 2c       	mov	r14, r1
   1ad18:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ad1a:	1d c0       	rjmp	.+58     	; 0x1ad56 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ad1c:	09 2e       	mov	r0, r25
   1ad1e:	00 0c       	add	r0, r0
   1ad20:	aa 0b       	sbc	r26, r26
   1ad22:	bb 0b       	sbc	r27, r27
   1ad24:	48 0e       	add	r4, r24
   1ad26:	59 1e       	adc	r5, r25
   1ad28:	6a 1e       	adc	r6, r26
   1ad2a:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1ad2c:	ed b7       	in	r30, 0x3d	; 61
   1ad2e:	fe b7       	in	r31, 0x3e	; 62
   1ad30:	44 82       	std	Z+4, r4	; 0x04
   1ad32:	55 82       	std	Z+5, r5	; 0x05
   1ad34:	66 82       	std	Z+6, r6	; 0x06
   1ad36:	77 82       	std	Z+7, r7	; 0x07
   1ad38:	ce 5c       	subi	r28, 0xCE	; 206
   1ad3a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad3c:	28 81       	ld	r18, Y
   1ad3e:	39 81       	ldd	r19, Y+1	; 0x01
   1ad40:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad42:	c2 53       	subi	r28, 0x32	; 50
   1ad44:	d2 40       	sbci	r29, 0x02	; 2
   1ad46:	21 83       	std	Z+1, r18	; 0x01
   1ad48:	32 83       	std	Z+2, r19	; 0x02
   1ad4a:	43 83       	std	Z+3, r20	; 0x03
   1ad4c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
                    wind = 0;
   1ad50:	90 e0       	ldi	r25, 0x00	; 0
   1ad52:	80 e0       	ldi	r24, 0x00	; 0
   1ad54:	84 cf       	rjmp	.-248    	; 0x1ac5e <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ad56:	0f 3f       	cpi	r16, 0xFF	; 255
   1ad58:	11 05       	cpc	r17, r1
   1ad5a:	09 f0       	breq	.+2      	; 0x1ad5e <lif_extract_e010_as_ascii+0x43a>
   1ad5c:	0c f4       	brge	.+2      	; 0x1ad60 <lif_extract_e010_as_ascii+0x43c>
   1ad5e:	e5 ce       	rjmp	.-566    	; 0x1ab2a <lif_extract_e010_as_ascii+0x206>
   1ad60:	08 c0       	rjmp	.+16     	; 0x1ad72 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1ad62:	a1 e0       	ldi	r26, 0x01	; 1
   1ad64:	b0 e0       	ldi	r27, 0x00	; 0
   1ad66:	ce 5d       	subi	r28, 0xDE	; 222
   1ad68:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad6a:	b9 83       	std	Y+1, r27	; 0x01
   1ad6c:	a8 83       	st	Y, r26
   1ad6e:	c2 52       	subi	r28, 0x22	; 34
   1ad70:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1ad72:	c2 5e       	subi	r28, 0xE2	; 226
   1ad74:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad76:	28 81       	ld	r18, Y
   1ad78:	39 81       	ldd	r19, Y+1	; 0x01
   1ad7a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad7c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad7e:	ce 51       	subi	r28, 0x1E	; 30
   1ad80:	d2 40       	sbci	r29, 0x02	; 2
   1ad82:	3f 5f       	subi	r19, 0xFF	; 255
   1ad84:	4f 4f       	sbci	r20, 0xFF	; 255
   1ad86:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad88:	c2 5e       	subi	r28, 0xE2	; 226
   1ad8a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad8c:	28 83       	st	Y, r18
   1ad8e:	39 83       	std	Y+1, r19	; 0x01
   1ad90:	4a 83       	std	Y+2, r20	; 0x02
   1ad92:	5b 83       	std	Y+3, r21	; 0x03
   1ad94:	ce 51       	subi	r28, 0x1E	; 30
   1ad96:	d2 40       	sbci	r29, 0x02	; 2
   1ad98:	97 ce       	rjmp	.-722    	; 0x1aac8 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ad9a:	e1 2c       	mov	r14, r1
   1ad9c:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad9e:	c6 01       	movw	r24, r12
   1ada0:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1ada4:	21 14       	cp	r2, r1
   1ada6:	31 04       	cpc	r3, r1
   1ada8:	31 f1       	breq	.+76     	; 0x1adf6 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1adaa:	cc 5d       	subi	r28, 0xDC	; 220
   1adac:	dd 4f       	sbci	r29, 0xFD	; 253
   1adae:	28 81       	ld	r18, Y
   1adb0:	39 81       	ldd	r19, Y+1	; 0x01
   1adb2:	c4 52       	subi	r28, 0x24	; 36
   1adb4:	d2 40       	sbci	r29, 0x02	; 2
   1adb6:	a1 01       	movw	r20, r2
   1adb8:	61 e0       	ldi	r22, 0x01	; 1
   1adba:	70 e0       	ldi	r23, 0x00	; 0
   1adbc:	ce 01       	movw	r24, r28
   1adbe:	0c 96       	adiw	r24, 0x0c	; 12
   1adc0:	0e 94 19 7b 	call	0xf632	; 0xf632 <fwrite>
   1adc4:	8c 01       	movw	r16, r24
        if(size < wind)
   1adc6:	82 15       	cp	r24, r2
   1adc8:	93 05       	cpc	r25, r3
   1adca:	64 f4       	brge	.+24     	; 0x1ade4 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1adcc:	8d e5       	ldi	r24, 0x5D	; 93
   1adce:	92 e3       	ldi	r25, 0x32	; 50
   1add0:	a0 e0       	ldi	r26, 0x00	; 0
   1add2:	ed b7       	in	r30, 0x3d	; 61
   1add4:	fe b7       	in	r31, 0x3e	; 62
   1add6:	81 83       	std	Z+1, r24	; 0x01
   1add8:	92 83       	std	Z+2, r25	; 0x02
   1adda:	a3 83       	std	Z+3, r26	; 0x03
   1addc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            status = 0;
   1ade0:	e1 2c       	mov	r14, r1
   1ade2:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ade4:	c8 01       	movw	r24, r16
   1ade6:	01 2e       	mov	r0, r17
   1ade8:	00 0c       	add	r0, r0
   1adea:	aa 0b       	sbc	r26, r26
   1adec:	bb 0b       	sbc	r27, r27
   1adee:	48 0e       	add	r4, r24
   1adf0:	59 1e       	adc	r5, r25
   1adf2:	6a 1e       	adc	r6, r26
   1adf4:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1adf6:	cc 5d       	subi	r28, 0xDC	; 220
   1adf8:	dd 4f       	sbci	r29, 0xFD	; 253
   1adfa:	88 81       	ld	r24, Y
   1adfc:	99 81       	ldd	r25, Y+1	; 0x01
   1adfe:	c4 52       	subi	r28, 0x24	; 36
   1ae00:	d2 40       	sbci	r29, 0x02	; 2
   1ae02:	0e 94 9b 7b 	call	0xf736	; 0xf736 <fclose>
    if(t)
   1ae06:	c8 5d       	subi	r28, 0xD8	; 216
   1ae08:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae0a:	28 81       	ld	r18, Y
   1ae0c:	39 81       	ldd	r19, Y+1	; 0x01
   1ae0e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae10:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae12:	c8 52       	subi	r28, 0x28	; 40
   1ae14:	d2 40       	sbci	r29, 0x02	; 2
   1ae16:	21 15       	cp	r18, r1
   1ae18:	31 05       	cpc	r19, r1
   1ae1a:	41 05       	cpc	r20, r1
   1ae1c:	51 05       	cpc	r21, r1
   1ae1e:	d9 f0       	breq	.+54     	; 0x1ae56 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1ae20:	c8 5e       	subi	r28, 0xE8	; 232
   1ae22:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae24:	28 83       	st	Y, r18
   1ae26:	39 83       	std	Y+1, r19	; 0x01
   1ae28:	4a 83       	std	Y+2, r20	; 0x02
   1ae2a:	5b 83       	std	Y+3, r21	; 0x03
   1ae2c:	c8 51       	subi	r28, 0x18	; 24
   1ae2e:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1ae30:	cc 5e       	subi	r28, 0xEC	; 236
   1ae32:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae34:	28 83       	st	Y, r18
   1ae36:	39 83       	std	Y+1, r19	; 0x01
   1ae38:	4a 83       	std	Y+2, r20	; 0x02
   1ae3a:	5b 83       	std	Y+3, r21	; 0x03
   1ae3c:	c4 51       	subi	r28, 0x14	; 20
   1ae3e:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1ae40:	be 01       	movw	r22, r28
   1ae42:	6c 5e       	subi	r22, 0xEC	; 236
   1ae44:	7d 4f       	sbci	r23, 0xFD	; 253
   1ae46:	ca 5d       	subi	r28, 0xDA	; 218
   1ae48:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae4a:	88 81       	ld	r24, Y
   1ae4c:	99 81       	ldd	r25, Y+1	; 0x01
   1ae4e:	c6 52       	subi	r28, 0x26	; 38
   1ae50:	d2 40       	sbci	r29, 0x02	; 2
   1ae52:	0e 94 d8 78 	call	0xf1b0	; 0xf1b0 <utime>
    }
    sync();
   1ae56:	0e 94 96 7a 	call	0xf52c	; 0xf52c <sync>
    printf("\tWrote: %8ld\n", bytes);
   1ae5a:	ed b7       	in	r30, 0x3d	; 61
   1ae5c:	fe b7       	in	r31, 0x3e	; 62
   1ae5e:	44 82       	std	Z+4, r4	; 0x04
   1ae60:	55 82       	std	Z+5, r5	; 0x05
   1ae62:	66 82       	std	Z+6, r6	; 0x06
   1ae64:	77 82       	std	Z+7, r7	; 0x07
   1ae66:	8f e4       	ldi	r24, 0x4F	; 79
   1ae68:	92 e3       	ldi	r25, 0x32	; 50
   1ae6a:	a0 e0       	ldi	r26, 0x00	; 0
   1ae6c:	81 83       	std	Z+1, r24	; 0x01
   1ae6e:	92 83       	std	Z+2, r25	; 0x02
   1ae70:	a3 83       	std	Z+3, r26	; 0x03
   1ae72:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    return(status);
   1ae76:	c7 01       	movw	r24, r14
}
   1ae78:	c9 5c       	subi	r28, 0xC9	; 201
   1ae7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae7c:	e2 e1       	ldi	r30, 0x12	; 18
   1ae7e:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0001ae82 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1ae82:	a4 e1       	ldi	r26, 0x14	; 20
   1ae84:	b1 e0       	ldi	r27, 0x01	; 1
   1ae86:	e7 e4       	ldi	r30, 0x47	; 71
   1ae88:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae8a:	0c 94 58 e2 	jmp	0x1c4b0	; 0x1c4b0 <__prologue_saves__>
   1ae8e:	7c 01       	movw	r14, r24
   1ae90:	8b 01       	movw	r16, r22
   1ae92:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ae94:	62 e4       	ldi	r22, 0x42	; 66
   1ae96:	73 e0       	ldi	r23, 0x03	; 3
   1ae98:	0e 94 00 ce 	call	0x19c00	; 0x19c00 <lif_open_volume>
   1ae9c:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ae9e:	00 97       	sbiw	r24, 0x00	; 0
   1aea0:	69 f4       	brne	.+26     	; 0x1aebc <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1aea2:	ed b7       	in	r30, 0x3d	; 61
   1aea4:	fe b7       	in	r31, 0x3e	; 62
   1aea6:	f5 82       	std	Z+5, r15	; 0x05
   1aea8:	e4 82       	std	Z+4, r14	; 0x04
   1aeaa:	87 e3       	ldi	r24, 0x37	; 55
   1aeac:	92 e3       	ldi	r25, 0x32	; 50
   1aeae:	a0 e0       	ldi	r26, 0x00	; 0
   1aeb0:	81 83       	std	Z+1, r24	; 0x01
   1aeb2:	92 83       	std	Z+2, r25	; 0x02
   1aeb4:	a3 83       	std	Z+3, r26	; 0x03
   1aeb6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1aeba:	13 c0       	rjmp	.+38     	; 0x1aee2 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1aebc:	b8 01       	movw	r22, r16
   1aebe:	75 d9       	rcall	.-3350   	; 0x1a1aa <lif_find_file>
    if(index == -1)
   1aec0:	01 96       	adiw	r24, 0x01	; 1
   1aec2:	91 f4       	brne	.+36     	; 0x1aee8 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1aec4:	ed b7       	in	r30, 0x3d	; 61
   1aec6:	fe b7       	in	r31, 0x3e	; 62
   1aec8:	15 83       	std	Z+5, r17	; 0x05
   1aeca:	04 83       	std	Z+4, r16	; 0x04
   1aecc:	84 e2       	ldi	r24, 0x24	; 36
   1aece:	92 e3       	ldi	r25, 0x32	; 50
   1aed0:	a0 e0       	ldi	r26, 0x00	; 0
   1aed2:	81 83       	std	Z+1, r24	; 0x01
   1aed4:	92 83       	std	Z+2, r25	; 0x02
   1aed6:	a3 83       	std	Z+3, r26	; 0x03
   1aed8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aedc:	c4 01       	movw	r24, r8
   1aede:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1aee2:	00 e0       	ldi	r16, 0x00	; 0
   1aee4:	10 e0       	ldi	r17, 0x00	; 0
   1aee6:	ff c0       	rjmp	.+510    	; 0x1b0e6 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1aee8:	94 01       	movw	r18, r8
   1aeea:	20 5a       	subi	r18, 0xA0	; 160
   1aeec:	3f 4f       	sbci	r19, 0xFF	; 255
   1aeee:	c0 5f       	subi	r28, 0xF0	; 240
   1aef0:	de 4f       	sbci	r29, 0xFE	; 254
   1aef2:	39 83       	std	Y+1, r19	; 0x01
   1aef4:	28 83       	st	Y, r18
   1aef6:	c0 51       	subi	r28, 0x10	; 16
   1aef8:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1aefa:	f9 01       	movw	r30, r18
   1aefc:	a0 80       	ld	r10, Z
   1aefe:	b1 80       	ldd	r11, Z+1	; 0x01
   1af00:	0b 2c       	mov	r0, r11
   1af02:	00 0c       	add	r0, r0
   1af04:	cc 08       	sbc	r12, r12
   1af06:	dd 08       	sbc	r13, r13
   1af08:	e1 2c       	mov	r14, r1
   1af0a:	f1 2c       	mov	r15, r1
   1af0c:	87 01       	movw	r16, r14
   1af0e:	e3 94       	inc	r14
   1af10:	21 e0       	ldi	r18, 0x01	; 1
   1af12:	30 e0       	ldi	r19, 0x00	; 0
   1af14:	40 e0       	ldi	r20, 0x00	; 0
   1af16:	50 e0       	ldi	r21, 0x00	; 0
   1af18:	61 e7       	ldi	r22, 0x71	; 113
   1af1a:	76 e1       	ldi	r23, 0x16	; 22
   1af1c:	c3 01       	movw	r24, r6
   1af1e:	0e 94 b6 c9 	call	0x1936c	; 0x1936c <lif_create_volume>
   1af22:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1af24:	89 2b       	or	r24, r25
   1af26:	d1 f2       	breq	.-76     	; 0x1aedc <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1af28:	81 e2       	ldi	r24, 0x21	; 33
   1af2a:	f4 01       	movw	r30, r8
   1af2c:	e1 5b       	subi	r30, 0xB1	; 177
   1af2e:	ff 4f       	sbci	r31, 0xFF	; 255
   1af30:	d7 01       	movw	r26, r14
   1af32:	a1 5b       	subi	r26, 0xB1	; 177
   1af34:	bf 4f       	sbci	r27, 0xFF	; 255
   1af36:	01 90       	ld	r0, Z+
   1af38:	0d 92       	st	X+, r0
   1af3a:	8a 95       	dec	r24
   1af3c:	e1 f7       	brne	.-8      	; 0x1af36 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1af3e:	82 e0       	ldi	r24, 0x02	; 2
   1af40:	90 e0       	ldi	r25, 0x00	; 0
   1af42:	a0 e0       	ldi	r26, 0x00	; 0
   1af44:	b0 e0       	ldi	r27, 0x00	; 0
   1af46:	f7 01       	movw	r30, r14
   1af48:	e4 5a       	subi	r30, 0xA4	; 164
   1af4a:	ff 4f       	sbci	r31, 0xFF	; 255
   1af4c:	80 83       	st	Z, r24
   1af4e:	91 83       	std	Z+1, r25	; 0x01
   1af50:	a2 83       	std	Z+2, r26	; 0x02
   1af52:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1af54:	c0 5f       	subi	r28, 0xF0	; 240
   1af56:	de 4f       	sbci	r29, 0xFE	; 254
   1af58:	e8 81       	ld	r30, Y
   1af5a:	f9 81       	ldd	r31, Y+1	; 0x01
   1af5c:	c0 51       	subi	r28, 0x10	; 16
   1af5e:	d1 40       	sbci	r29, 0x01	; 1
   1af60:	80 81       	ld	r24, Z
   1af62:	91 81       	ldd	r25, Z+1	; 0x01
   1af64:	a2 81       	ldd	r26, Z+2	; 0x02
   1af66:	b3 81       	ldd	r27, Z+3	; 0x03
   1af68:	f7 01       	movw	r30, r14
   1af6a:	80 8b       	std	Z+16, r24	; 0x10
   1af6c:	91 8b       	std	Z+17, r25	; 0x11
   1af6e:	a2 8b       	std	Z+18, r26	; 0x12
   1af70:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1af72:	60 e0       	ldi	r22, 0x00	; 0
   1af74:	70 e0       	ldi	r23, 0x00	; 0
   1af76:	c7 01       	movw	r24, r14
   1af78:	0e 94 38 c8 	call	0x19070	; 0x19070 <lif_writedirindex>
   1af7c:	8c 01       	movw	r16, r24
   1af7e:	89 2b       	or	r24, r25
   1af80:	41 f0       	breq	.+16     	; 0x1af92 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1af82:	61 e0       	ldi	r22, 0x01	; 1
   1af84:	70 e0       	ldi	r23, 0x00	; 0
   1af86:	c7 01       	movw	r24, r14
   1af88:	0e 94 94 c8 	call	0x19128	; 0x19128 <lif_writedirEOF>
   1af8c:	8c 01       	movw	r16, r24
   1af8e:	89 2b       	or	r24, r25
   1af90:	39 f4       	brne	.+14     	; 0x1afa0 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af92:	c4 01       	movw	r24, r8
   1af94:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
   1af98:	c7 01       	movw	r24, r14
   1af9a:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1af9e:	a3 c0       	rjmp	.+326    	; 0x1b0e6 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1afa0:	f7 01       	movw	r30, r14
   1afa2:	44 84       	ldd	r4, Z+12	; 0x0c
   1afa4:	55 84       	ldd	r5, Z+13	; 0x0d
   1afa6:	66 84       	ldd	r6, Z+14	; 0x0e
   1afa8:	77 84       	ldd	r7, Z+15	; 0x0f
   1afaa:	76 2c       	mov	r7, r6
   1afac:	65 2c       	mov	r6, r5
   1afae:	54 2c       	mov	r5, r4
   1afb0:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1afb2:	f4 01       	movw	r30, r8
   1afb4:	e4 5a       	subi	r30, 0xA4	; 164
   1afb6:	ff 4f       	sbci	r31, 0xFF	; 255
   1afb8:	80 81       	ld	r24, Z
   1afba:	91 81       	ldd	r25, Z+1	; 0x01
   1afbc:	a2 81       	ldd	r26, Z+2	; 0x02
   1afbe:	b3 81       	ldd	r27, Z+3	; 0x03
   1afc0:	22 27       	eor	r18, r18
   1afc2:	38 2f       	mov	r19, r24
   1afc4:	49 2f       	mov	r20, r25
   1afc6:	5a 2f       	mov	r21, r26
   1afc8:	c4 5f       	subi	r28, 0xF4	; 244
   1afca:	de 4f       	sbci	r29, 0xFE	; 254
   1afcc:	28 83       	st	Y, r18
   1afce:	39 83       	std	Y+1, r19	; 0x01
   1afd0:	4a 83       	std	Y+2, r20	; 0x02
   1afd2:	5b 83       	std	Y+3, r21	; 0x03
   1afd4:	cc 50       	subi	r28, 0x0C	; 12
   1afd6:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1afd8:	21 2c       	mov	r2, r1
   1afda:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1afdc:	86 e1       	ldi	r24, 0x16	; 22
   1afde:	92 e3       	ldi	r25, 0x32	; 50
   1afe0:	9c 01       	movw	r18, r24
   1afe2:	40 e0       	ldi	r20, 0x00	; 0
   1afe4:	ce 5e       	subi	r28, 0xEE	; 238
   1afe6:	de 4f       	sbci	r29, 0xFE	; 254
   1afe8:	28 83       	st	Y, r18
   1afea:	39 83       	std	Y+1, r19	; 0x01
   1afec:	4a 83       	std	Y+2, r20	; 0x02
   1afee:	c2 51       	subi	r28, 0x12	; 18
   1aff0:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1aff2:	c0 5f       	subi	r28, 0xF0	; 240
   1aff4:	de 4f       	sbci	r29, 0xFE	; 254
   1aff6:	e8 81       	ld	r30, Y
   1aff8:	f9 81       	ldd	r31, Y+1	; 0x01
   1affa:	c0 51       	subi	r28, 0x10	; 16
   1affc:	d1 40       	sbci	r29, 0x01	; 1
   1affe:	80 81       	ld	r24, Z
   1b000:	91 81       	ldd	r25, Z+1	; 0x01
   1b002:	28 16       	cp	r2, r24
   1b004:	39 06       	cpc	r3, r25
   1b006:	0c f0       	brlt	.+2      	; 0x1b00a <lif_extract_lif_as_lif+0x188>
   1b008:	58 c0       	rjmp	.+176    	; 0x1b0ba <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b00a:	00 e0       	ldi	r16, 0x00	; 0
   1b00c:	11 e0       	ldi	r17, 0x01	; 1
   1b00e:	c4 5f       	subi	r28, 0xF4	; 244
   1b010:	de 4f       	sbci	r29, 0xFE	; 254
   1b012:	28 81       	ld	r18, Y
   1b014:	39 81       	ldd	r19, Y+1	; 0x01
   1b016:	4a 81       	ldd	r20, Y+2	; 0x02
   1b018:	5b 81       	ldd	r21, Y+3	; 0x03
   1b01a:	cc 50       	subi	r28, 0x0C	; 12
   1b01c:	d1 40       	sbci	r29, 0x01	; 1
   1b01e:	be 01       	movw	r22, r28
   1b020:	68 5f       	subi	r22, 0xF8	; 248
   1b022:	7f 4f       	sbci	r23, 0xFF	; 255
   1b024:	c4 01       	movw	r24, r8
   1b026:	0e 94 77 be 	call	0x17cee	; 0x17cee <lif_read>
   1b02a:	5b 01       	movw	r10, r22
   1b02c:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b02e:	6f 3f       	cpi	r22, 0xFF	; 255
   1b030:	71 05       	cpc	r23, r1
   1b032:	09 f0       	breq	.+2      	; 0x1b036 <lif_extract_lif_as_lif+0x1b4>
   1b034:	2c f4       	brge	.+10     	; 0x1b040 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b036:	c4 01       	movw	r24, r8
   1b038:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
   1b03c:	c7 01       	movw	r24, r14
   1b03e:	4f cf       	rjmp	.-354    	; 0x1aede <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b040:	00 e0       	ldi	r16, 0x00	; 0
   1b042:	11 e0       	ldi	r17, 0x01	; 1
   1b044:	a3 01       	movw	r20, r6
   1b046:	92 01       	movw	r18, r4
   1b048:	be 01       	movw	r22, r28
   1b04a:	68 5f       	subi	r22, 0xF8	; 248
   1b04c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b04e:	c7 01       	movw	r24, r14
   1b050:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b054:	c5 01       	movw	r24, r10
   1b056:	0b 2c       	mov	r0, r11
   1b058:	00 0c       	add	r0, r0
   1b05a:	aa 0b       	sbc	r26, r26
   1b05c:	bb 0b       	sbc	r27, r27
   1b05e:	48 0e       	add	r4, r24
   1b060:	59 1e       	adc	r5, r25
   1b062:	6a 1e       	adc	r6, r26
   1b064:	7b 1e       	adc	r7, r27
        offset += size;
   1b066:	c4 5f       	subi	r28, 0xF4	; 244
   1b068:	de 4f       	sbci	r29, 0xFE	; 254
   1b06a:	28 81       	ld	r18, Y
   1b06c:	39 81       	ldd	r19, Y+1	; 0x01
   1b06e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b070:	5b 81       	ldd	r21, Y+3	; 0x03
   1b072:	cc 50       	subi	r28, 0x0C	; 12
   1b074:	d1 40       	sbci	r29, 0x01	; 1
   1b076:	28 0f       	add	r18, r24
   1b078:	39 1f       	adc	r19, r25
   1b07a:	4a 1f       	adc	r20, r26
   1b07c:	5b 1f       	adc	r21, r27
   1b07e:	c4 5f       	subi	r28, 0xF4	; 244
   1b080:	de 4f       	sbci	r29, 0xFE	; 254
   1b082:	28 83       	st	Y, r18
   1b084:	39 83       	std	Y+1, r19	; 0x01
   1b086:	4a 83       	std	Y+2, r20	; 0x02
   1b088:	5b 83       	std	Y+3, r21	; 0x03
   1b08a:	cc 50       	subi	r28, 0x0C	; 12
   1b08c:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b08e:	ed b7       	in	r30, 0x3d	; 61
   1b090:	fe b7       	in	r31, 0x3e	; 62
   1b092:	44 82       	std	Z+4, r4	; 0x04
   1b094:	55 82       	std	Z+5, r5	; 0x05
   1b096:	66 82       	std	Z+6, r6	; 0x06
   1b098:	77 82       	std	Z+7, r7	; 0x07
   1b09a:	ce 5e       	subi	r28, 0xEE	; 238
   1b09c:	de 4f       	sbci	r29, 0xFE	; 254
   1b09e:	28 81       	ld	r18, Y
   1b0a0:	39 81       	ldd	r19, Y+1	; 0x01
   1b0a2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b0a4:	c2 51       	subi	r28, 0x12	; 18
   1b0a6:	d1 40       	sbci	r29, 0x01	; 1
   1b0a8:	21 83       	std	Z+1, r18	; 0x01
   1b0aa:	32 83       	std	Z+2, r19	; 0x02
   1b0ac:	43 83       	std	Z+3, r20	; 0x03
   1b0ae:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b0b2:	ff ef       	ldi	r31, 0xFF	; 255
   1b0b4:	2f 1a       	sub	r2, r31
   1b0b6:	3f 0a       	sbc	r3, r31
   1b0b8:	9c cf       	rjmp	.-200    	; 0x1aff2 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0ba:	c4 01       	movw	r24, r8
   1b0bc:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
   1b0c0:	c7 01       	movw	r24, r14
   1b0c2:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b0c6:	ed b7       	in	r30, 0x3d	; 61
   1b0c8:	fe b7       	in	r31, 0x3e	; 62
   1b0ca:	44 82       	std	Z+4, r4	; 0x04
   1b0cc:	55 82       	std	Z+5, r5	; 0x05
   1b0ce:	66 82       	std	Z+6, r6	; 0x06
   1b0d0:	77 82       	std	Z+7, r7	; 0x07
   1b0d2:	88 e0       	ldi	r24, 0x08	; 8
   1b0d4:	92 e3       	ldi	r25, 0x32	; 50
   1b0d6:	a0 e0       	ldi	r26, 0x00	; 0
   1b0d8:	81 83       	std	Z+1, r24	; 0x01
   1b0da:	92 83       	std	Z+2, r25	; 0x02
   1b0dc:	a3 83       	std	Z+3, r26	; 0x03
   1b0de:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    return(1);
   1b0e2:	01 e0       	ldi	r16, 0x01	; 1
   1b0e4:	10 e0       	ldi	r17, 0x00	; 0
}
   1b0e6:	c8 01       	movw	r24, r16
   1b0e8:	cc 5e       	subi	r28, 0xEC	; 236
   1b0ea:	de 4f       	sbci	r29, 0xFE	; 254
   1b0ec:	e2 e1       	ldi	r30, 0x12	; 18
   1b0ee:	0c 94 74 e2 	jmp	0x1c4e8	; 0x1c4e8 <__epilogue_restores__>

0001b0f2 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b0f2:	2f 92       	push	r2
   1b0f4:	3f 92       	push	r3
   1b0f6:	4f 92       	push	r4
   1b0f8:	5f 92       	push	r5
   1b0fa:	6f 92       	push	r6
   1b0fc:	8f 92       	push	r8
   1b0fe:	9f 92       	push	r9
   1b100:	af 92       	push	r10
   1b102:	bf 92       	push	r11
   1b104:	cf 92       	push	r12
   1b106:	df 92       	push	r13
   1b108:	ef 92       	push	r14
   1b10a:	ff 92       	push	r15
   1b10c:	0f 93       	push	r16
   1b10e:	1f 93       	push	r17
   1b110:	cf 93       	push	r28
   1b112:	df 93       	push	r29
   1b114:	cd b7       	in	r28, 0x3d	; 61
   1b116:	de b7       	in	r29, 0x3e	; 62
   1b118:	cd 51       	subi	r28, 0x1D	; 29
   1b11a:	d1 40       	sbci	r29, 0x01	; 1
   1b11c:	0f b6       	in	r0, 0x3f	; 63
   1b11e:	f8 94       	cli
   1b120:	de bf       	out	0x3e, r29	; 62
   1b122:	0f be       	out	0x3f, r0	; 63
   1b124:	cd bf       	out	0x3d, r28	; 61
   1b126:	5c 01       	movw	r10, r24
   1b128:	7b 01       	movw	r14, r22
   1b12a:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b12c:	dc 01       	movw	r26, r24
   1b12e:	8c 91       	ld	r24, X
   1b130:	81 11       	cpse	r24, r1
   1b132:	03 c0       	rjmp	.+6      	; 0x1b13a <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b134:	88 ee       	ldi	r24, 0xE8	; 232
   1b136:	91 e3       	ldi	r25, 0x31	; 49
   1b138:	06 c0       	rjmp	.+12     	; 0x1b146 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b13a:	db 01       	movw	r26, r22
   1b13c:	8c 91       	ld	r24, X
   1b13e:	81 11       	cpse	r24, r1
   1b140:	0b c0       	rjmp	.+22     	; 0x1b158 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b142:	8d ec       	ldi	r24, 0xCD	; 205
   1b144:	91 e3       	ldi	r25, 0x31	; 49
   1b146:	a0 e0       	ldi	r26, 0x00	; 0
   1b148:	ed b7       	in	r30, 0x3d	; 61
   1b14a:	fe b7       	in	r31, 0x3e	; 62
   1b14c:	81 83       	std	Z+1, r24	; 0x01
   1b14e:	92 83       	std	Z+2, r25	; 0x02
   1b150:	a3 83       	std	Z+3, r26	; 0x03
   1b152:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1b156:	25 c1       	rjmp	.+586    	; 0x1b3a2 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b158:	da 01       	movw	r26, r20
   1b15a:	8c 91       	ld	r24, X
   1b15c:	81 11       	cpse	r24, r1
   1b15e:	03 c0       	rjmp	.+6      	; 0x1b166 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b160:	81 eb       	ldi	r24, 0xB1	; 177
   1b162:	91 e3       	ldi	r25, 0x31	; 49
   1b164:	f0 cf       	rjmp	.-32     	; 0x1b146 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b166:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b16a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b16e:	92 ff       	sbrs	r25, 2
   1b170:	10 c0       	rjmp	.+32     	; 0x1b192 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b172:	ed b7       	in	r30, 0x3d	; 61
   1b174:	fe b7       	in	r31, 0x3e	; 62
   1b176:	51 87       	std	Z+9, r21	; 0x09
   1b178:	40 87       	std	Z+8, r20	; 0x08
   1b17a:	77 83       	std	Z+7, r23	; 0x07
   1b17c:	66 83       	std	Z+6, r22	; 0x06
   1b17e:	b5 82       	std	Z+5, r11	; 0x05
   1b180:	a4 82       	std	Z+4, r10	; 0x04
   1b182:	82 e8       	ldi	r24, 0x82	; 130
   1b184:	91 e3       	ldi	r25, 0x31	; 49
   1b186:	a0 e0       	ldi	r26, 0x00	; 0
   1b188:	81 83       	std	Z+1, r24	; 0x01
   1b18a:	92 83       	std	Z+2, r25	; 0x02
   1b18c:	a3 83       	std	Z+3, r26	; 0x03
   1b18e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b192:	68 e0       	ldi	r22, 0x08	; 8
   1b194:	79 e0       	ldi	r23, 0x09	; 9
   1b196:	c4 01       	movw	r24, r8
   1b198:	0e 94 00 ce 	call	0x19c00	; 0x19c00 <lif_open_volume>
   1b19c:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b19e:	00 97       	sbiw	r24, 0x00	; 0
   1b1a0:	09 f4       	brne	.+2      	; 0x1b1a4 <lif_add_lif_file+0xb2>
   1b1a2:	ff c0       	rjmp	.+510    	; 0x1b3a2 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b1a4:	b7 01       	movw	r22, r14
   1b1a6:	01 d8       	rcall	.-4094   	; 0x1a1aa <lif_find_file>
    if(index == -1)
   1b1a8:	01 96       	adiw	r24, 0x01	; 1
   1b1aa:	a1 f4       	brne	.+40     	; 0x1b1d4 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b1ac:	ed b7       	in	r30, 0x3d	; 61
   1b1ae:	fe b7       	in	r31, 0x3e	; 62
   1b1b0:	f5 82       	std	Z+5, r15	; 0x05
   1b1b2:	e4 82       	std	Z+4, r14	; 0x04
   1b1b4:	8f e6       	ldi	r24, 0x6F	; 111
   1b1b6:	91 e3       	ldi	r25, 0x31	; 49
   1b1b8:	a0 e0       	ldi	r26, 0x00	; 0
   1b1ba:	81 83       	std	Z+1, r24	; 0x01
   1b1bc:	92 83       	std	Z+2, r25	; 0x02
   1b1be:	a3 83       	std	Z+3, r26	; 0x03
   1b1c0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1c4:	c6 01       	movw	r24, r12
   1b1c6:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b1ca:	60 e0       	ldi	r22, 0x00	; 0
   1b1cc:	70 e0       	ldi	r23, 0x00	; 0
   1b1ce:	80 e0       	ldi	r24, 0x00	; 0
   1b1d0:	90 e0       	ldi	r25, 0x00	; 0
   1b1d2:	ff c0       	rjmp	.+510    	; 0x1b3d2 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b1d4:	68 e0       	ldi	r22, 0x08	; 8
   1b1d6:	79 e0       	ldi	r23, 0x09	; 9
   1b1d8:	c5 01       	movw	r24, r10
   1b1da:	0e 94 00 ce 	call	0x19c00	; 0x19c00 <lif_open_volume>
   1b1de:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b1e0:	00 97       	sbiw	r24, 0x00	; 0
   1b1e2:	09 f4       	brne	.+2      	; 0x1b1e6 <lif_add_lif_file+0xf4>
   1b1e4:	de c0       	rjmp	.+444    	; 0x1b3a2 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b1e6:	f6 01       	movw	r30, r12
   1b1e8:	e0 5a       	subi	r30, 0xA0	; 160
   1b1ea:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1ec:	40 81       	ld	r20, Z
   1b1ee:	51 81       	ldd	r21, Z+1	; 0x01
   1b1f0:	62 81       	ldd	r22, Z+2	; 0x02
   1b1f2:	73 81       	ldd	r23, Z+3	; 0x03
   1b1f4:	0e 94 a0 cc 	call	0x19940	; 0x19940 <lif_newdir>
   1b1f8:	ca 5e       	subi	r28, 0xEA	; 234
   1b1fa:	de 4f       	sbci	r29, 0xFE	; 254
   1b1fc:	99 83       	std	Y+1, r25	; 0x01
   1b1fe:	88 83       	st	Y, r24
   1b200:	c6 51       	subi	r28, 0x16	; 22
   1b202:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b204:	01 96       	adiw	r24, 0x01	; 1
   1b206:	79 f4       	brne	.+30     	; 0x1b226 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b208:	ed b7       	in	r30, 0x3d	; 61
   1b20a:	fe b7       	in	r31, 0x3e	; 62
   1b20c:	97 82       	std	Z+7, r9	; 0x07
   1b20e:	86 82       	std	Z+6, r8	; 0x06
   1b210:	b5 82       	std	Z+5, r11	; 0x05
   1b212:	a4 82       	std	Z+4, r10	; 0x04
   1b214:	8f e3       	ldi	r24, 0x3F	; 63
   1b216:	91 e3       	ldi	r25, 0x31	; 49
   1b218:	a0 e0       	ldi	r26, 0x00	; 0
   1b21a:	81 83       	std	Z+1, r24	; 0x01
   1b21c:	92 83       	std	Z+2, r25	; 0x02
   1b21e:	a3 83       	std	Z+3, r26	; 0x03
   1b220:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1b224:	a8 c0       	rjmp	.+336    	; 0x1b376 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b226:	c7 01       	movw	r24, r14
   1b228:	84 5a       	subi	r24, 0xA4	; 164
   1b22a:	9f 4f       	sbci	r25, 0xFF	; 255
   1b22c:	dc 01       	movw	r26, r24
   1b22e:	4d 91       	ld	r20, X+
   1b230:	5d 91       	ld	r21, X+
   1b232:	6d 91       	ld	r22, X+
   1b234:	7c 91       	ld	r23, X
   1b236:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b238:	21 e2       	ldi	r18, 0x21	; 33
   1b23a:	f6 01       	movw	r30, r12
   1b23c:	e1 5b       	subi	r30, 0xB1	; 177
   1b23e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b240:	1d 97       	sbiw	r26, 0x0d	; 13
   1b242:	01 90       	ld	r0, Z+
   1b244:	0d 92       	st	X+, r0
   1b246:	2a 95       	dec	r18
   1b248:	e1 f7       	brne	.-8      	; 0x1b242 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b24a:	fc 01       	movw	r30, r24
   1b24c:	40 83       	st	Z, r20
   1b24e:	51 83       	std	Z+1, r21	; 0x01
   1b250:	62 83       	std	Z+2, r22	; 0x02
   1b252:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b254:	b6 2f       	mov	r27, r22
   1b256:	a5 2f       	mov	r26, r21
   1b258:	94 2f       	mov	r25, r20
   1b25a:	88 27       	eor	r24, r24
   1b25c:	c2 5f       	subi	r28, 0xF2	; 242
   1b25e:	de 4f       	sbci	r29, 0xFE	; 254
   1b260:	88 83       	st	Y, r24
   1b262:	99 83       	std	Y+1, r25	; 0x01
   1b264:	aa 83       	std	Y+2, r26	; 0x02
   1b266:	bb 83       	std	Y+3, r27	; 0x03
   1b268:	ce 50       	subi	r28, 0x0E	; 14
   1b26a:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b26c:	f6 01       	movw	r30, r12
   1b26e:	e4 5a       	subi	r30, 0xA4	; 164
   1b270:	ff 4f       	sbci	r31, 0xFF	; 255
   1b272:	80 81       	ld	r24, Z
   1b274:	91 81       	ldd	r25, Z+1	; 0x01
   1b276:	a2 81       	ldd	r26, Z+2	; 0x02
   1b278:	b3 81       	ldd	r27, Z+3	; 0x03
   1b27a:	22 27       	eor	r18, r18
   1b27c:	38 2f       	mov	r19, r24
   1b27e:	49 2f       	mov	r20, r25
   1b280:	5a 2f       	mov	r21, r26
   1b282:	ce 5e       	subi	r28, 0xEE	; 238
   1b284:	de 4f       	sbci	r29, 0xFE	; 254
   1b286:	28 83       	st	Y, r18
   1b288:	39 83       	std	Y+1, r19	; 0x01
   1b28a:	4a 83       	std	Y+2, r20	; 0x02
   1b28c:	5b 83       	std	Y+3, r21	; 0x03
   1b28e:	c2 51       	subi	r28, 0x12	; 18
   1b290:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b292:	21 2c       	mov	r2, r1
   1b294:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b296:	81 2c       	mov	r8, r1
   1b298:	91 2c       	mov	r9, r1
   1b29a:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b29c:	a7 01       	movw	r20, r14
   1b29e:	40 5a       	subi	r20, 0xA0	; 160
   1b2a0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b2a2:	c4 5e       	subi	r28, 0xE4	; 228
   1b2a4:	de 4f       	sbci	r29, 0xFE	; 254
   1b2a6:	59 83       	std	Y+1, r21	; 0x01
   1b2a8:	48 83       	st	Y, r20
   1b2aa:	cc 51       	subi	r28, 0x1C	; 28
   1b2ac:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b2ae:	81 e3       	ldi	r24, 0x31	; 49
   1b2b0:	91 e3       	ldi	r25, 0x31	; 49
   1b2b2:	2c 01       	movw	r4, r24
   1b2b4:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b2b6:	27 c0       	rjmp	.+78     	; 0x1b306 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b2b8:	00 e0       	ldi	r16, 0x00	; 0
   1b2ba:	11 e0       	ldi	r17, 0x01	; 1
   1b2bc:	c8 5e       	subi	r28, 0xE8	; 232
   1b2be:	de 4f       	sbci	r29, 0xFE	; 254
   1b2c0:	28 81       	ld	r18, Y
   1b2c2:	39 81       	ldd	r19, Y+1	; 0x01
   1b2c4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2c6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2c8:	c8 51       	subi	r28, 0x18	; 24
   1b2ca:	d1 40       	sbci	r29, 0x01	; 1
   1b2cc:	be 01       	movw	r22, r28
   1b2ce:	66 5f       	subi	r22, 0xF6	; 246
   1b2d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2d2:	c7 01       	movw	r24, r14
   1b2d4:	0e 94 ca be 	call	0x17d94	; 0x17d94 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b2d8:	8f 3f       	cpi	r24, 0xFF	; 255
   1b2da:	91 05       	cpc	r25, r1
   1b2dc:	09 f0       	breq	.+2      	; 0x1b2e0 <lif_add_lif_file+0x1ee>
   1b2de:	0c f4       	brge	.+2      	; 0x1b2e2 <lif_add_lif_file+0x1f0>
   1b2e0:	4a c0       	rjmp	.+148    	; 0x1b376 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b2e2:	5f ef       	ldi	r21, 0xFF	; 255
   1b2e4:	95 1a       	sub	r9, r21
   1b2e6:	a5 0a       	sbc	r10, r21
   1b2e8:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b2ea:	ed b7       	in	r30, 0x3d	; 61
   1b2ec:	fe b7       	in	r31, 0x3e	; 62
   1b2ee:	84 82       	std	Z+4, r8	; 0x04
   1b2f0:	95 82       	std	Z+5, r9	; 0x05
   1b2f2:	a6 82       	std	Z+6, r10	; 0x06
   1b2f4:	b7 82       	std	Z+7, r11	; 0x07
   1b2f6:	41 82       	std	Z+1, r4	; 0x01
   1b2f8:	52 82       	std	Z+2, r5	; 0x02
   1b2fa:	63 82       	std	Z+3, r6	; 0x03
   1b2fc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b300:	ff ef       	ldi	r31, 0xFF	; 255
   1b302:	2f 1a       	sub	r2, r31
   1b304:	3f 0a       	sbc	r3, r31
   1b306:	ce 5e       	subi	r28, 0xEE	; 238
   1b308:	de 4f       	sbci	r29, 0xFE	; 254
   1b30a:	28 81       	ld	r18, Y
   1b30c:	39 81       	ldd	r19, Y+1	; 0x01
   1b30e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b310:	5b 81       	ldd	r21, Y+3	; 0x03
   1b312:	c2 51       	subi	r28, 0x12	; 18
   1b314:	d1 40       	sbci	r29, 0x01	; 1
   1b316:	28 0d       	add	r18, r8
   1b318:	39 1d       	adc	r19, r9
   1b31a:	4a 1d       	adc	r20, r10
   1b31c:	5b 1d       	adc	r21, r11
   1b31e:	c2 5f       	subi	r28, 0xF2	; 242
   1b320:	de 4f       	sbci	r29, 0xFE	; 254
   1b322:	88 81       	ld	r24, Y
   1b324:	99 81       	ldd	r25, Y+1	; 0x01
   1b326:	aa 81       	ldd	r26, Y+2	; 0x02
   1b328:	bb 81       	ldd	r27, Y+3	; 0x03
   1b32a:	ce 50       	subi	r28, 0x0E	; 14
   1b32c:	d1 40       	sbci	r29, 0x01	; 1
   1b32e:	88 0d       	add	r24, r8
   1b330:	99 1d       	adc	r25, r9
   1b332:	aa 1d       	adc	r26, r10
   1b334:	bb 1d       	adc	r27, r11
   1b336:	c8 5e       	subi	r28, 0xE8	; 232
   1b338:	de 4f       	sbci	r29, 0xFE	; 254
   1b33a:	88 83       	st	Y, r24
   1b33c:	99 83       	std	Y+1, r25	; 0x01
   1b33e:	aa 83       	std	Y+2, r26	; 0x02
   1b340:	bb 83       	std	Y+3, r27	; 0x03
   1b342:	c8 51       	subi	r28, 0x18	; 24
   1b344:	d1 40       	sbci	r29, 0x01	; 1
   1b346:	c4 5e       	subi	r28, 0xE4	; 228
   1b348:	de 4f       	sbci	r29, 0xFE	; 254
   1b34a:	a8 81       	ld	r26, Y
   1b34c:	b9 81       	ldd	r27, Y+1	; 0x01
   1b34e:	cc 51       	subi	r28, 0x1C	; 28
   1b350:	d1 40       	sbci	r29, 0x01	; 1
   1b352:	8d 91       	ld	r24, X+
   1b354:	9c 91       	ld	r25, X
   1b356:	28 16       	cp	r2, r24
   1b358:	39 06       	cpc	r3, r25
   1b35a:	94 f4       	brge	.+36     	; 0x1b380 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b35c:	00 e0       	ldi	r16, 0x00	; 0
   1b35e:	11 e0       	ldi	r17, 0x01	; 1
   1b360:	be 01       	movw	r22, r28
   1b362:	66 5f       	subi	r22, 0xF6	; 246
   1b364:	7f 4f       	sbci	r23, 0xFF	; 255
   1b366:	c6 01       	movw	r24, r12
   1b368:	0e 94 77 be 	call	0x17cee	; 0x17cee <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b36c:	6f 3f       	cpi	r22, 0xFF	; 255
   1b36e:	71 05       	cpc	r23, r1
   1b370:	11 f0       	breq	.+4      	; 0x1b376 <lif_add_lif_file+0x284>
   1b372:	0c f0       	brlt	.+2      	; 0x1b376 <lif_add_lif_file+0x284>
   1b374:	a1 cf       	rjmp	.-190    	; 0x1b2b8 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b376:	c7 01       	movw	r24, r14
   1b378:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
   1b37c:	c6 01       	movw	r24, r12
   1b37e:	0f c0       	rjmp	.+30     	; 0x1b39e <lif_add_lif_file+0x2ac>
   1b380:	c6 01       	movw	r24, r12
   1b382:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b386:	ca 5e       	subi	r28, 0xEA	; 234
   1b388:	de 4f       	sbci	r29, 0xFE	; 254
   1b38a:	68 81       	ld	r22, Y
   1b38c:	79 81       	ldd	r23, Y+1	; 0x01
   1b38e:	c6 51       	subi	r28, 0x16	; 22
   1b390:	d1 40       	sbci	r29, 0x01	; 1
   1b392:	c7 01       	movw	r24, r14
   1b394:	0e 94 38 c8 	call	0x19070	; 0x19070 <lif_writedirindex>
   1b398:	89 2b       	or	r24, r25
   1b39a:	41 f4       	brne	.+16     	; 0x1b3ac <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b39c:	c7 01       	movw	r24, r14
   1b39e:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b3a2:	6f ef       	ldi	r22, 0xFF	; 255
   1b3a4:	7f ef       	ldi	r23, 0xFF	; 255
   1b3a6:	8f ef       	ldi	r24, 0xFF	; 255
   1b3a8:	9f ef       	ldi	r25, 0xFF	; 255
   1b3aa:	13 c0       	rjmp	.+38     	; 0x1b3d2 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3ac:	c7 01       	movw	r24, r14
   1b3ae:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b3b2:	ed b7       	in	r30, 0x3d	; 61
   1b3b4:	fe b7       	in	r31, 0x3e	; 62
   1b3b6:	84 82       	std	Z+4, r8	; 0x04
   1b3b8:	95 82       	std	Z+5, r9	; 0x05
   1b3ba:	a6 82       	std	Z+6, r10	; 0x06
   1b3bc:	b7 82       	std	Z+7, r11	; 0x07
   1b3be:	83 e2       	ldi	r24, 0x23	; 35
   1b3c0:	91 e3       	ldi	r25, 0x31	; 49
   1b3c2:	a0 e0       	ldi	r26, 0x00	; 0
   1b3c4:	81 83       	std	Z+1, r24	; 0x01
   1b3c6:	92 83       	std	Z+2, r25	; 0x02
   1b3c8:	a3 83       	std	Z+3, r26	; 0x03
   1b3ca:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    return(bytes);
   1b3ce:	b4 01       	movw	r22, r8
   1b3d0:	c5 01       	movw	r24, r10
}
   1b3d2:	c3 5e       	subi	r28, 0xE3	; 227
   1b3d4:	de 4f       	sbci	r29, 0xFE	; 254
   1b3d6:	0f b6       	in	r0, 0x3f	; 63
   1b3d8:	f8 94       	cli
   1b3da:	de bf       	out	0x3e, r29	; 62
   1b3dc:	0f be       	out	0x3f, r0	; 63
   1b3de:	cd bf       	out	0x3d, r28	; 61
   1b3e0:	df 91       	pop	r29
   1b3e2:	cf 91       	pop	r28
   1b3e4:	1f 91       	pop	r17
   1b3e6:	0f 91       	pop	r16
   1b3e8:	ff 90       	pop	r15
   1b3ea:	ef 90       	pop	r14
   1b3ec:	df 90       	pop	r13
   1b3ee:	cf 90       	pop	r12
   1b3f0:	bf 90       	pop	r11
   1b3f2:	af 90       	pop	r10
   1b3f4:	9f 90       	pop	r9
   1b3f6:	8f 90       	pop	r8
   1b3f8:	6f 90       	pop	r6
   1b3fa:	5f 90       	pop	r5
   1b3fc:	4f 90       	pop	r4
   1b3fe:	3f 90       	pop	r3
   1b400:	2f 90       	pop	r2
   1b402:	08 95       	ret

0001b404 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b404:	ef 92       	push	r14
   1b406:	ff 92       	push	r15
   1b408:	0f 93       	push	r16
   1b40a:	1f 93       	push	r17
   1b40c:	cf 93       	push	r28
   1b40e:	df 93       	push	r29
   1b410:	ad b7       	in	r26, 0x3d	; 61
   1b412:	be b7       	in	r27, 0x3e	; 62
   1b414:	17 97       	sbiw	r26, 0x07	; 7
   1b416:	0f b6       	in	r0, 0x3f	; 63
   1b418:	f8 94       	cli
   1b41a:	be bf       	out	0x3e, r27	; 62
   1b41c:	0f be       	out	0x3f, r0	; 63
   1b41e:	ad bf       	out	0x3d, r26	; 61
   1b420:	7c 01       	movw	r14, r24
   1b422:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b424:	fc 01       	movw	r30, r24
   1b426:	80 81       	ld	r24, Z
   1b428:	81 11       	cpse	r24, r1
   1b42a:	03 c0       	rjmp	.+6      	; 0x1b432 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b42c:	8e ef       	ldi	r24, 0xFE	; 254
   1b42e:	90 e3       	ldi	r25, 0x30	; 48
   1b430:	06 c0       	rjmp	.+12     	; 0x1b43e <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b432:	fb 01       	movw	r30, r22
   1b434:	80 81       	ld	r24, Z
   1b436:	81 11       	cpse	r24, r1
   1b438:	0b c0       	rjmp	.+22     	; 0x1b450 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b43a:	8e ed       	ldi	r24, 0xDE	; 222
   1b43c:	90 e3       	ldi	r25, 0x30	; 48
   1b43e:	a0 e0       	ldi	r26, 0x00	; 0
   1b440:	ed b7       	in	r30, 0x3d	; 61
   1b442:	fe b7       	in	r31, 0x3e	; 62
   1b444:	81 83       	std	Z+1, r24	; 0x01
   1b446:	92 83       	std	Z+2, r25	; 0x02
   1b448:	a3 83       	std	Z+3, r26	; 0x03
   1b44a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1b44e:	68 c0       	rjmp	.+208    	; 0x1b520 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b450:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b454:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b458:	92 ff       	sbrs	r25, 2
   1b45a:	0e c0       	rjmp	.+28     	; 0x1b478 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b45c:	ed b7       	in	r30, 0x3d	; 61
   1b45e:	fe b7       	in	r31, 0x3e	; 62
   1b460:	77 83       	std	Z+7, r23	; 0x07
   1b462:	66 83       	std	Z+6, r22	; 0x06
   1b464:	f5 82       	std	Z+5, r15	; 0x05
   1b466:	e4 82       	std	Z+4, r14	; 0x04
   1b468:	8f eb       	ldi	r24, 0xBF	; 191
   1b46a:	90 e3       	ldi	r25, 0x30	; 48
   1b46c:	a0 e0       	ldi	r26, 0x00	; 0
   1b46e:	81 83       	std	Z+1, r24	; 0x01
   1b470:	92 83       	std	Z+2, r25	; 0x02
   1b472:	a3 83       	std	Z+3, r26	; 0x03
   1b474:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b478:	68 e0       	ldi	r22, 0x08	; 8
   1b47a:	79 e0       	ldi	r23, 0x09	; 9
   1b47c:	c7 01       	movw	r24, r14
   1b47e:	0e 94 00 ce 	call	0x19c00	; 0x19c00 <lif_open_volume>
   1b482:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b484:	00 97       	sbiw	r24, 0x00	; 0
   1b486:	09 f4       	brne	.+2      	; 0x1b48a <lif_del_file+0x86>
   1b488:	4b c0       	rjmp	.+150    	; 0x1b520 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b48a:	b8 01       	movw	r22, r16
   1b48c:	0e 94 d5 d0 	call	0x1a1aa	; 0x1a1aa <lif_find_file>
    if(index == -1)
   1b490:	8f 3f       	cpi	r24, 0xFF	; 255
   1b492:	ff ef       	ldi	r31, 0xFF	; 255
   1b494:	9f 07       	cpc	r25, r31
   1b496:	a1 f4       	brne	.+40     	; 0x1b4c0 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b498:	ce 01       	movw	r24, r28
   1b49a:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b49e:	ed b7       	in	r30, 0x3d	; 61
   1b4a0:	fe b7       	in	r31, 0x3e	; 62
   1b4a2:	17 83       	std	Z+7, r17	; 0x07
   1b4a4:	06 83       	std	Z+6, r16	; 0x06
   1b4a6:	f5 82       	std	Z+5, r15	; 0x05
   1b4a8:	e4 82       	std	Z+4, r14	; 0x04
   1b4aa:	87 e9       	ldi	r24, 0x97	; 151
   1b4ac:	90 e3       	ldi	r25, 0x30	; 48
   1b4ae:	a0 e0       	ldi	r26, 0x00	; 0
   1b4b0:	81 83       	std	Z+1, r24	; 0x01
   1b4b2:	92 83       	std	Z+2, r25	; 0x02
   1b4b4:	a3 83       	std	Z+3, r26	; 0x03
   1b4b6:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        return(0);
   1b4ba:	80 e0       	ldi	r24, 0x00	; 0
   1b4bc:	90 e0       	ldi	r25, 0x00	; 0
   1b4be:	32 c0       	rjmp	.+100    	; 0x1b524 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b4c0:	2a a1       	ldd	r18, Y+34	; 0x22
   1b4c2:	3b a1       	ldd	r19, Y+35	; 0x23
   1b4c4:	21 50       	subi	r18, 0x01	; 1
   1b4c6:	31 09       	sbc	r19, r1
   1b4c8:	fe 01       	movw	r30, r28
   1b4ca:	e6 5a       	subi	r30, 0xA6	; 166
   1b4cc:	ff 4f       	sbci	r31, 0xFF	; 255
   1b4ce:	82 17       	cp	r24, r18
   1b4d0:	93 07       	cpc	r25, r19
   1b4d2:	2c f0       	brlt	.+10     	; 0x1b4de <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b4d4:	2f ef       	ldi	r18, 0xFF	; 255
   1b4d6:	3f ef       	ldi	r19, 0xFF	; 255
   1b4d8:	31 83       	std	Z+1, r19	; 0x01
   1b4da:	20 83       	st	Z, r18
   1b4dc:	02 c0       	rjmp	.+4      	; 0x1b4e2 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b4de:	11 82       	std	Z+1, r1	; 0x01
   1b4e0:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b4e2:	bc 01       	movw	r22, r24
   1b4e4:	ce 01       	movw	r24, r28
   1b4e6:	0e 94 38 c8 	call	0x19070	; 0x19070 <lif_writedirindex>
   1b4ea:	89 2b       	or	r24, r25
   1b4ec:	21 f4       	brne	.+8      	; 0x1b4f6 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4ee:	ce 01       	movw	r24, r28
   1b4f0:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
   1b4f4:	15 c0       	rjmp	.+42     	; 0x1b520 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b4f6:	ce 01       	movw	r24, r28
   1b4f8:	0e 94 ac c8 	call	0x19158	; 0x19158 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4fc:	ce 01       	movw	r24, r28
   1b4fe:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b502:	ed b7       	in	r30, 0x3d	; 61
   1b504:	fe b7       	in	r31, 0x3e	; 62
   1b506:	15 83       	std	Z+5, r17	; 0x05
   1b508:	04 83       	std	Z+4, r16	; 0x04
   1b50a:	88 e8       	ldi	r24, 0x88	; 136
   1b50c:	90 e3       	ldi	r25, 0x30	; 48
   1b50e:	a0 e0       	ldi	r26, 0x00	; 0
   1b510:	81 83       	std	Z+1, r24	; 0x01
   1b512:	92 83       	std	Z+2, r25	; 0x02
   1b514:	a3 83       	std	Z+3, r26	; 0x03
   1b516:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    return(1);
   1b51a:	81 e0       	ldi	r24, 0x01	; 1
   1b51c:	90 e0       	ldi	r25, 0x00	; 0
   1b51e:	02 c0       	rjmp	.+4      	; 0x1b524 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b520:	8f ef       	ldi	r24, 0xFF	; 255
   1b522:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b524:	cd b7       	in	r28, 0x3d	; 61
   1b526:	de b7       	in	r29, 0x3e	; 62
   1b528:	27 96       	adiw	r28, 0x07	; 7
   1b52a:	e6 e0       	ldi	r30, 0x06	; 6
   1b52c:	e9 c7       	rjmp	.+4050   	; 0x1c500 <__epilogue_restores__+0x18>

0001b52e <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b52e:	a7 e0       	ldi	r26, 0x07	; 7
   1b530:	b0 e0       	ldi	r27, 0x00	; 0
   1b532:	ec e9       	ldi	r30, 0x9C	; 156
   1b534:	fa ed       	ldi	r31, 0xDA	; 218
   1b536:	c4 c7       	rjmp	.+3976   	; 0x1c4c0 <__prologue_saves__+0x10>
   1b538:	6c 01       	movw	r12, r24
   1b53a:	8b 01       	movw	r16, r22
   1b53c:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b53e:	fc 01       	movw	r30, r24
   1b540:	80 81       	ld	r24, Z
   1b542:	81 11       	cpse	r24, r1
   1b544:	03 c0       	rjmp	.+6      	; 0x1b54c <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b546:	80 e6       	ldi	r24, 0x60	; 96
   1b548:	90 e3       	ldi	r25, 0x30	; 48
   1b54a:	06 c0       	rjmp	.+12     	; 0x1b558 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b54c:	fb 01       	movw	r30, r22
   1b54e:	80 81       	ld	r24, Z
   1b550:	81 11       	cpse	r24, r1
   1b552:	0b c0       	rjmp	.+22     	; 0x1b56a <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b554:	89 e3       	ldi	r24, 0x39	; 57
   1b556:	90 e3       	ldi	r25, 0x30	; 48
   1b558:	a0 e0       	ldi	r26, 0x00	; 0
   1b55a:	ed b7       	in	r30, 0x3d	; 61
   1b55c:	fe b7       	in	r31, 0x3e	; 62
   1b55e:	81 83       	std	Z+1, r24	; 0x01
   1b560:	92 83       	std	Z+2, r25	; 0x02
   1b562:	a3 83       	std	Z+3, r26	; 0x03
   1b564:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1b568:	58 c0       	rjmp	.+176    	; 0x1b61a <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b56a:	fa 01       	movw	r30, r20
   1b56c:	80 81       	ld	r24, Z
   1b56e:	81 11       	cpse	r24, r1
   1b570:	03 c0       	rjmp	.+6      	; 0x1b578 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b572:	82 e1       	ldi	r24, 0x12	; 18
   1b574:	90 e3       	ldi	r25, 0x30	; 48
   1b576:	f0 cf       	rjmp	.-32     	; 0x1b558 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b578:	ca 01       	movw	r24, r20
   1b57a:	0e 94 92 bf 	call	0x17f24	; 0x17f24 <lif_checkname>
   1b57e:	89 2b       	or	r24, r25
   1b580:	19 f4       	brne	.+6      	; 0x1b588 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b582:	8c ed       	ldi	r24, 0xDC	; 220
   1b584:	9f e2       	ldi	r25, 0x2F	; 47
   1b586:	e8 cf       	rjmp	.-48     	; 0x1b558 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b588:	68 e0       	ldi	r22, 0x08	; 8
   1b58a:	79 e0       	ldi	r23, 0x09	; 9
   1b58c:	c6 01       	movw	r24, r12
   1b58e:	0e 94 00 ce 	call	0x19c00	; 0x19c00 <lif_open_volume>
   1b592:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b594:	00 97       	sbiw	r24, 0x00	; 0
   1b596:	09 f4       	brne	.+2      	; 0x1b59a <lif_rename_file+0x6c>
   1b598:	40 c0       	rjmp	.+128    	; 0x1b61a <lif_rename_file+0xec>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b59a:	b8 01       	movw	r22, r16
   1b59c:	0e 94 d5 d0 	call	0x1a1aa	; 0x1a1aa <lif_find_file>
   1b5a0:	5c 01       	movw	r10, r24
    if(index == -1)
   1b5a2:	01 96       	adiw	r24, 0x01	; 1
   1b5a4:	a1 f4       	brne	.+40     	; 0x1b5ce <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b5a6:	ed b7       	in	r30, 0x3d	; 61
   1b5a8:	fe b7       	in	r31, 0x3e	; 62
   1b5aa:	17 83       	std	Z+7, r17	; 0x07
   1b5ac:	06 83       	std	Z+6, r16	; 0x06
   1b5ae:	d5 82       	std	Z+5, r13	; 0x05
   1b5b0:	c4 82       	std	Z+4, r12	; 0x04
   1b5b2:	83 eb       	ldi	r24, 0xB3	; 179
   1b5b4:	9f e2       	ldi	r25, 0x2F	; 47
   1b5b6:	a0 e0       	ldi	r26, 0x00	; 0
   1b5b8:	81 83       	std	Z+1, r24	; 0x01
   1b5ba:	92 83       	std	Z+2, r25	; 0x02
   1b5bc:	a3 83       	std	Z+3, r26	; 0x03
   1b5be:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5c2:	ce 01       	movw	r24, r28
   1b5c4:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b5c8:	80 e0       	ldi	r24, 0x00	; 0
   1b5ca:	90 e0       	ldi	r25, 0x00	; 0
   1b5cc:	28 c0       	rjmp	.+80     	; 0x1b61e <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b5ce:	4a e0       	ldi	r20, 0x0A	; 10
   1b5d0:	50 e0       	ldi	r21, 0x00	; 0
   1b5d2:	b7 01       	movw	r22, r14
   1b5d4:	ce 01       	movw	r24, r28
   1b5d6:	81 5b       	subi	r24, 0xB1	; 177
   1b5d8:	9f 4f       	sbci	r25, 0xFF	; 255
   1b5da:	0e 94 cc bf 	call	0x17f98	; 0x17f98 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b5de:	b5 01       	movw	r22, r10
   1b5e0:	ce 01       	movw	r24, r28
   1b5e2:	0e 94 38 c8 	call	0x19070	; 0x19070 <lif_writedirindex>
   1b5e6:	89 2b       	or	r24, r25
   1b5e8:	21 f4       	brne	.+8      	; 0x1b5f2 <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5ea:	ce 01       	movw	r24, r28
   1b5ec:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
   1b5f0:	14 c0       	rjmp	.+40     	; 0x1b61a <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b5f2:	ed b7       	in	r30, 0x3d	; 61
   1b5f4:	fe b7       	in	r31, 0x3e	; 62
   1b5f6:	f7 82       	std	Z+7, r15	; 0x07
   1b5f8:	e6 82       	std	Z+6, r14	; 0x06
   1b5fa:	15 83       	std	Z+5, r17	; 0x05
   1b5fc:	04 83       	std	Z+4, r16	; 0x04
   1b5fe:	8c e9       	ldi	r24, 0x9C	; 156
   1b600:	9f e2       	ldi	r25, 0x2F	; 47
   1b602:	a0 e0       	ldi	r26, 0x00	; 0
   1b604:	81 83       	std	Z+1, r24	; 0x01
   1b606:	92 83       	std	Z+2, r25	; 0x02
   1b608:	a3 83       	std	Z+3, r26	; 0x03
   1b60a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b60e:	ce 01       	movw	r24, r28
   1b610:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b614:	81 e0       	ldi	r24, 0x01	; 1
   1b616:	90 e0       	ldi	r25, 0x00	; 0
   1b618:	02 c0       	rjmp	.+4      	; 0x1b61e <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b61a:	8f ef       	ldi	r24, 0xFF	; 255
   1b61c:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b61e:	cd b7       	in	r28, 0x3d	; 61
   1b620:	de b7       	in	r29, 0x3e	; 62
   1b622:	27 96       	adiw	r28, 0x07	; 7
   1b624:	ea e0       	ldi	r30, 0x0A	; 10
   1b626:	68 c7       	rjmp	.+3792   	; 0x1c4f8 <__epilogue_restores__+0x10>

0001b628 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b628:	4f 92       	push	r4
   1b62a:	5f 92       	push	r5
   1b62c:	6f 92       	push	r6
   1b62e:	7f 92       	push	r7
   1b630:	af 92       	push	r10
   1b632:	bf 92       	push	r11
   1b634:	cf 92       	push	r12
   1b636:	df 92       	push	r13
   1b638:	ef 92       	push	r14
   1b63a:	ff 92       	push	r15
   1b63c:	0f 93       	push	r16
   1b63e:	1f 93       	push	r17
   1b640:	cf 93       	push	r28
   1b642:	df 93       	push	r29
   1b644:	ad b7       	in	r26, 0x3d	; 61
   1b646:	be b7       	in	r27, 0x3e	; 62
   1b648:	17 97       	sbiw	r26, 0x07	; 7
   1b64a:	0f b6       	in	r0, 0x3f	; 63
   1b64c:	f8 94       	cli
   1b64e:	be bf       	out	0x3e, r27	; 62
   1b650:	0f be       	out	0x3f, r0	; 63
   1b652:	ad bf       	out	0x3d, r26	; 61
   1b654:	27 01       	movw	r4, r14
   1b656:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b658:	dc 01       	movw	r26, r24
   1b65a:	ec 91       	ld	r30, X
   1b65c:	e1 11       	cpse	r30, r1
   1b65e:	03 c0       	rjmp	.+6      	; 0x1b666 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b660:	83 e7       	ldi	r24, 0x73	; 115
   1b662:	9f e2       	ldi	r25, 0x2F	; 47
   1b664:	16 c0       	rjmp	.+44     	; 0x1b692 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b666:	db 01       	movw	r26, r22
   1b668:	ec 91       	ld	r30, X
   1b66a:	e1 11       	cpse	r30, r1
   1b66c:	03 c0       	rjmp	.+6      	; 0x1b674 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b66e:	8e e4       	ldi	r24, 0x4E	; 78
   1b670:	9f e2       	ldi	r25, 0x2F	; 47
   1b672:	0f c0       	rjmp	.+30     	; 0x1b692 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b674:	21 15       	cp	r18, r1
   1b676:	31 05       	cpc	r19, r1
   1b678:	41 05       	cpc	r20, r1
   1b67a:	51 05       	cpc	r21, r1
   1b67c:	19 f4       	brne	.+6      	; 0x1b684 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b67e:	8b e2       	ldi	r24, 0x2B	; 43
   1b680:	9f e2       	ldi	r25, 0x2F	; 47
   1b682:	07 c0       	rjmp	.+14     	; 0x1b692 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b684:	e1 14       	cp	r14, r1
   1b686:	f1 04       	cpc	r15, r1
   1b688:	01 05       	cpc	r16, r1
   1b68a:	11 05       	cpc	r17, r1
   1b68c:	59 f4       	brne	.+22     	; 0x1b6a4 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b68e:	8b e0       	ldi	r24, 0x0B	; 11
   1b690:	9f e2       	ldi	r25, 0x2F	; 47
   1b692:	a0 e0       	ldi	r26, 0x00	; 0
   1b694:	ed b7       	in	r30, 0x3d	; 61
   1b696:	fe b7       	in	r31, 0x3e	; 62
   1b698:	81 83       	std	Z+1, r24	; 0x01
   1b69a:	92 83       	std	Z+2, r25	; 0x02
   1b69c:	a3 83       	std	Z+3, r26	; 0x03
   1b69e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1b6a2:	2b c0       	rjmp	.+86     	; 0x1b6fa <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b6a4:	67 01       	movw	r12, r14
   1b6a6:	78 01       	movw	r14, r16
   1b6a8:	f2 e0       	ldi	r31, 0x02	; 2
   1b6aa:	cf 1a       	sub	r12, r31
   1b6ac:	d1 08       	sbc	r13, r1
   1b6ae:	e1 08       	sbc	r14, r1
   1b6b0:	f1 08       	sbc	r15, r1
   1b6b2:	56 01       	movw	r10, r12
   1b6b4:	67 01       	movw	r12, r14
   1b6b6:	a2 1a       	sub	r10, r18
   1b6b8:	b3 0a       	sbc	r11, r19
   1b6ba:	c4 0a       	sbc	r12, r20
   1b6bc:	d5 0a       	sbc	r13, r21
   1b6be:	79 01       	movw	r14, r18
   1b6c0:	8a 01       	movw	r16, r20
   1b6c2:	22 e0       	ldi	r18, 0x02	; 2
   1b6c4:	30 e0       	ldi	r19, 0x00	; 0
   1b6c6:	40 e0       	ldi	r20, 0x00	; 0
   1b6c8:	50 e0       	ldi	r21, 0x00	; 0
   1b6ca:	0e 94 b6 c9 	call	0x1936c	; 0x1936c <lif_create_volume>
    if(LIF == NULL)
   1b6ce:	00 97       	sbiw	r24, 0x00	; 0
   1b6d0:	a1 f0       	breq	.+40     	; 0x1b6fa <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b6d2:	0e 94 43 c7 	call	0x18e86	; 0x18e86 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b6d6:	82 01       	movw	r16, r4
   1b6d8:	d6 2d       	mov	r29, r6
   1b6da:	c7 2d       	mov	r28, r7
   1b6dc:	ed b7       	in	r30, 0x3d	; 61
   1b6de:	fe b7       	in	r31, 0x3e	; 62
   1b6e0:	44 82       	std	Z+4, r4	; 0x04
   1b6e2:	15 83       	std	Z+5, r17	; 0x05
   1b6e4:	66 82       	std	Z+6, r6	; 0x06
   1b6e6:	77 82       	std	Z+7, r7	; 0x07
   1b6e8:	8b ee       	ldi	r24, 0xEB	; 235
   1b6ea:	9e e2       	ldi	r25, 0x2E	; 46
   1b6ec:	a0 e0       	ldi	r26, 0x00	; 0
   1b6ee:	81 83       	std	Z+1, r24	; 0x01
   1b6f0:	92 83       	std	Z+2, r25	; 0x02
   1b6f2:	a3 83       	std	Z+3, r26	; 0x03
   1b6f4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    return(end);
   1b6f8:	04 c0       	rjmp	.+8      	; 0x1b702 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b6fa:	0f ef       	ldi	r16, 0xFF	; 255
   1b6fc:	1f ef       	ldi	r17, 0xFF	; 255
   1b6fe:	df ef       	ldi	r29, 0xFF	; 255
   1b700:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b702:	b8 01       	movw	r22, r16
   1b704:	8d 2f       	mov	r24, r29
   1b706:	9c 2f       	mov	r25, r28
   1b708:	ad b7       	in	r26, 0x3d	; 61
   1b70a:	be b7       	in	r27, 0x3e	; 62
   1b70c:	17 96       	adiw	r26, 0x07	; 7
   1b70e:	0f b6       	in	r0, 0x3f	; 63
   1b710:	f8 94       	cli
   1b712:	be bf       	out	0x3e, r27	; 62
   1b714:	0f be       	out	0x3f, r0	; 63
   1b716:	ad bf       	out	0x3d, r26	; 61
   1b718:	df 91       	pop	r29
   1b71a:	cf 91       	pop	r28
   1b71c:	1f 91       	pop	r17
   1b71e:	0f 91       	pop	r16
   1b720:	ff 90       	pop	r15
   1b722:	ef 90       	pop	r14
   1b724:	df 90       	pop	r13
   1b726:	cf 90       	pop	r12
   1b728:	bf 90       	pop	r11
   1b72a:	af 90       	pop	r10
   1b72c:	7f 90       	pop	r7
   1b72e:	6f 90       	pop	r6
   1b730:	5f 90       	pop	r5
   1b732:	4f 90       	pop	r4
   1b734:	08 95       	ret

0001b736 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b736:	a5 e0       	ldi	r26, 0x05	; 5
   1b738:	b0 e0       	ldi	r27, 0x00	; 0
   1b73a:	e0 ea       	ldi	r30, 0xA0	; 160
   1b73c:	fb ed       	ldi	r31, 0xDB	; 219
   1b73e:	be c6       	rjmp	.+3452   	; 0x1c4bc <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b740:	82 30       	cpi	r24, 0x02	; 2
   1b742:	91 05       	cpc	r25, r1
   1b744:	1c f4       	brge	.+6      	; 0x1b74c <lif_tests+0x16>
        return (0);
   1b746:	80 e0       	ldi	r24, 0x00	; 0
   1b748:	90 e0       	ldi	r25, 0x00	; 0
   1b74a:	5b c1       	rjmp	.+694    	; 0x1ba02 <lif_tests+0x2cc>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b74c:	fb 01       	movw	r30, r22
   1b74e:	e2 80       	ldd	r14, Z+2	; 0x02
   1b750:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b752:	e1 14       	cp	r14, r1
   1b754:	f1 04       	cpc	r15, r1
   1b756:	09 f4       	brne	.+2      	; 0x1b75a <lif_tests+0x24>
   1b758:	52 c1       	rjmp	.+676    	; 0x1b9fe <lif_tests+0x2c8>
   1b75a:	f7 01       	movw	r30, r14
   1b75c:	20 81       	ld	r18, Z
   1b75e:	22 23       	and	r18, r18
   1b760:	09 f4       	brne	.+2      	; 0x1b764 <lif_tests+0x2e>
   1b762:	4d c1       	rjmp	.+666    	; 0x1b9fe <lif_tests+0x2c8>
   1b764:	8b 01       	movw	r16, r22
   1b766:	6c 01       	movw	r12, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b768:	69 e7       	ldi	r22, 0x79	; 121
   1b76a:	76 e1       	ldi	r23, 0x16	; 22
   1b76c:	c7 01       	movw	r24, r14
   1b76e:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1b772:	89 2b       	or	r24, r25
   1b774:	29 f0       	breq	.+10     	; 0x1b780 <lif_tests+0x4a>
    {
        lif_help(1);
   1b776:	81 e0       	ldi	r24, 0x01	; 1
   1b778:	90 e0       	ldi	r25, 0x00	; 0
   1b77a:	0e 94 68 bd 	call	0x17ad0	; 0x17ad0 <lif_help>
   1b77e:	3f c1       	rjmp	.+638    	; 0x1b9fe <lif_tests+0x2c8>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b780:	68 e7       	ldi	r22, 0x78	; 120
   1b782:	76 e1       	ldi	r23, 0x16	; 22
   1b784:	c7 01       	movw	r24, r14
   1b786:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1b78a:	89 2b       	or	r24, r25
   1b78c:	a1 f7       	brne	.-24     	; 0x1b776 <lif_tests+0x40>
   1b78e:	6e e7       	ldi	r22, 0x7E	; 126
   1b790:	76 e1       	ldi	r23, 0x16	; 22
   1b792:	c7 01       	movw	r24, r14
   1b794:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1b798:	89 2b       	or	r24, r25
   1b79a:	69 f7       	brne	.-38     	; 0x1b776 <lif_tests+0x40>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b79c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b7a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b7a4:	9b 7f       	andi	r25, 0xFB	; 251
   1b7a6:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b7aa:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b7ae:	96 01       	movw	r18, r12
   1b7b0:	42 e0       	ldi	r20, 0x02	; 2
   1b7b2:	50 e0       	ldi	r21, 0x00	; 0
   1b7b4:	61 e8       	ldi	r22, 0x81	; 129
   1b7b6:	76 e1       	ldi	r23, 0x16	; 22
   1b7b8:	c7 01       	movw	r24, r14
   1b7ba:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b7be:	89 2b       	or	r24, r25
   1b7c0:	79 f0       	breq	.+30     	; 0x1b7e0 <lif_tests+0xaa>
    {
        debuglevel |= 0x400;
   1b7c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b7c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b7ca:	94 60       	ori	r25, 0x04	; 4
   1b7cc:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b7d0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b7d4:	f8 01       	movw	r30, r16
   1b7d6:	e4 80       	ldd	r14, Z+4	; 0x04
   1b7d8:	f5 80       	ldd	r15, Z+5	; 0x05
   1b7da:	c3 e0       	ldi	r28, 0x03	; 3
   1b7dc:	d0 e0       	ldi	r29, 0x00	; 0
   1b7de:	02 c0       	rjmp	.+4      	; 0x1b7e4 <lif_tests+0xae>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b7e0:	c2 e0       	ldi	r28, 0x02	; 2
   1b7e2:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b7e4:	5e 01       	movw	r10, r28
   1b7e6:	f3 e0       	ldi	r31, 0x03	; 3
   1b7e8:	af 0e       	add	r10, r31
   1b7ea:	b1 1c       	adc	r11, r1
   1b7ec:	96 01       	movw	r18, r12
   1b7ee:	a5 01       	movw	r20, r10
   1b7f0:	64 e8       	ldi	r22, 0x84	; 132
   1b7f2:	76 e1       	ldi	r23, 0x16	; 22
   1b7f4:	c7 01       	movw	r24, r14
   1b7f6:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b7fa:	89 2b       	or	r24, r25
   1b7fc:	61 f0       	breq	.+24     	; 0x1b816 <lif_tests+0xe0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b7fe:	cc 0f       	add	r28, r28
   1b800:	dd 1f       	adc	r29, r29
   1b802:	c0 0f       	add	r28, r16
   1b804:	d1 1f       	adc	r29, r17
   1b806:	4c 81       	ldd	r20, Y+4	; 0x04
   1b808:	5d 81       	ldd	r21, Y+5	; 0x05
   1b80a:	6a 81       	ldd	r22, Y+2	; 0x02
   1b80c:	7b 81       	ldd	r23, Y+3	; 0x03
   1b80e:	88 81       	ld	r24, Y
   1b810:	99 81       	ldd	r25, Y+1	; 0x01
   1b812:	6f dc       	rcall	.-1826   	; 0x1b0f2 <lif_add_lif_file>
   1b814:	f4 c0       	rjmp	.+488    	; 0x1b9fe <lif_tests+0x2c8>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b816:	96 01       	movw	r18, r12
   1b818:	a5 01       	movw	r20, r10
   1b81a:	6b e8       	ldi	r22, 0x8B	; 139
   1b81c:	76 e1       	ldi	r23, 0x16	; 22
   1b81e:	c7 01       	movw	r24, r14
   1b820:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b824:	89 2b       	or	r24, r25
   1b826:	69 f0       	breq	.+26     	; 0x1b842 <lif_tests+0x10c>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b828:	cc 0f       	add	r28, r28
   1b82a:	dd 1f       	adc	r29, r29
   1b82c:	c0 0f       	add	r28, r16
   1b82e:	d1 1f       	adc	r29, r17
   1b830:	4c 81       	ldd	r20, Y+4	; 0x04
   1b832:	5d 81       	ldd	r21, Y+5	; 0x05
   1b834:	6a 81       	ldd	r22, Y+2	; 0x02
   1b836:	7b 81       	ldd	r23, Y+3	; 0x03
   1b838:	88 81       	ld	r24, Y
   1b83a:	99 81       	ldd	r25, Y+1	; 0x01
   1b83c:	0e 94 56 d3 	call	0x1a6ac	; 0x1a6ac <lif_add_ascii_file_as_e010>
   1b840:	de c0       	rjmp	.+444    	; 0x1b9fe <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b842:	96 01       	movw	r18, r12
   1b844:	a5 01       	movw	r20, r10
   1b846:	6f e8       	ldi	r22, 0x8F	; 143
   1b848:	76 e1       	ldi	r23, 0x16	; 22
   1b84a:	c7 01       	movw	r24, r14
   1b84c:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b850:	89 2b       	or	r24, r25
   1b852:	09 f4       	brne	.+2      	; 0x1b856 <lif_tests+0x120>
   1b854:	42 c0       	rjmp	.+132    	; 0x1b8da <lif_tests+0x1a4>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b856:	ce 01       	movw	r24, r28
   1b858:	88 0f       	add	r24, r24
   1b85a:	99 1f       	adc	r25, r25
   1b85c:	e8 01       	movw	r28, r16
   1b85e:	c8 0f       	add	r28, r24
   1b860:	d9 1f       	adc	r29, r25
   1b862:	c8 80       	ld	r12, Y
   1b864:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b866:	aa 80       	ldd	r10, Y+2	; 0x02
   1b868:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b86a:	0c 80       	ldd	r0, Y+4	; 0x04
   1b86c:	dd 81       	ldd	r29, Y+5	; 0x05
   1b86e:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b870:	6a e9       	ldi	r22, 0x9A	; 154
   1b872:	76 e1       	ldi	r23, 0x16	; 22
   1b874:	ce 01       	movw	r24, r28
   1b876:	0e 94 38 30 	call	0x6070	; 0x6070 <MATCHI_LEN>
   1b87a:	89 2b       	or	r24, r25
   1b87c:	09 f0       	breq	.+2      	; 0x1b880 <lif_tests+0x14a>
            model +=2;
   1b87e:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b880:	40 e0       	ldi	r20, 0x00	; 0
   1b882:	50 e0       	ldi	r21, 0x00	; 0
   1b884:	60 e0       	ldi	r22, 0x00	; 0
   1b886:	70 e0       	ldi	r23, 0x00	; 0
   1b888:	ce 01       	movw	r24, r28
   1b88a:	0e 94 bf a0 	call	0x1417e	; 0x1417e <hpdir_find_drive>
   1b88e:	89 2b       	or	r24, r25
   1b890:	b9 f0       	breq	.+46     	; 0x1b8c0 <lif_tests+0x18a>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b892:	60 91 9a 21 	lds	r22, 0x219A	; 0x80219a <hpdir+0xac>
   1b896:	70 91 9b 21 	lds	r23, 0x219B	; 0x80219b <hpdir+0xad>
   1b89a:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <hpdir+0xae>
   1b89e:	90 91 9d 21 	lds	r25, 0x219D	; 0x80219d <hpdir+0xaf>
   1b8a2:	0e 94 a2 a0 	call	0x14144	; 0x14144 <lif_dir_count>
   1b8a6:	9b 01       	movw	r18, r22
   1b8a8:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b8aa:	e0 90 9a 21 	lds	r14, 0x219A	; 0x80219a <hpdir+0xac>
   1b8ae:	f0 90 9b 21 	lds	r15, 0x219B	; 0x80219b <hpdir+0xad>
   1b8b2:	00 91 9c 21 	lds	r16, 0x219C	; 0x80219c <hpdir+0xae>
   1b8b6:	10 91 9d 21 	lds	r17, 0x219D	; 0x80219d <hpdir+0xaf>
   1b8ba:	b5 01       	movw	r22, r10
   1b8bc:	c6 01       	movw	r24, r12
   1b8be:	2e c0       	rjmp	.+92     	; 0x1b91c <lif_tests+0x1e6>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b8c0:	ed b7       	in	r30, 0x3d	; 61
   1b8c2:	fe b7       	in	r31, 0x3e	; 62
   1b8c4:	d5 83       	std	Z+5, r29	; 0x05
   1b8c6:	c4 83       	std	Z+4, r28	; 0x04
   1b8c8:	8f e1       	ldi	r24, 0x1F	; 31
   1b8ca:	91 e4       	ldi	r25, 0x41	; 65
   1b8cc:	a0 e0       	ldi	r26, 0x00	; 0
   1b8ce:	81 83       	std	Z+1, r24	; 0x01
   1b8d0:	92 83       	std	Z+2, r25	; 0x02
   1b8d2:	a3 83       	std	Z+3, r26	; 0x03
   1b8d4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1b8d8:	92 c0       	rjmp	.+292    	; 0x1b9fe <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b8da:	96 01       	movw	r18, r12
   1b8dc:	ae 01       	movw	r20, r28
   1b8de:	4c 5f       	subi	r20, 0xFC	; 252
   1b8e0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8e2:	6d e9       	ldi	r22, 0x9D	; 157
   1b8e4:	76 e1       	ldi	r23, 0x16	; 22
   1b8e6:	c7 01       	movw	r24, r14
   1b8e8:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b8ec:	89 2b       	or	r24, r25
   1b8ee:	c1 f0       	breq	.+48     	; 0x1b920 <lif_tests+0x1ea>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b8f0:	cc 0f       	add	r28, r28
   1b8f2:	dd 1f       	adc	r29, r29
   1b8f4:	c0 0f       	add	r28, r16
   1b8f6:	d1 1f       	adc	r29, r17
   1b8f8:	8c 81       	ldd	r24, Y+4	; 0x04
   1b8fa:	9d 81       	ldd	r25, Y+5	; 0x05
   1b8fc:	0e 94 4d 45 	call	0x8a9a	; 0x8a9a <atol>
   1b900:	4b 01       	movw	r8, r22
   1b902:	5c 01       	movw	r10, r24
   1b904:	8e 81       	ldd	r24, Y+6	; 0x06
   1b906:	9f 81       	ldd	r25, Y+7	; 0x07
   1b908:	0e 94 4d 45 	call	0x8a9a	; 0x8a9a <atol>
   1b90c:	7b 01       	movw	r14, r22
   1b90e:	8c 01       	movw	r16, r24
   1b910:	6a 81       	ldd	r22, Y+2	; 0x02
   1b912:	7b 81       	ldd	r23, Y+3	; 0x03
   1b914:	a5 01       	movw	r20, r10
   1b916:	94 01       	movw	r18, r8
   1b918:	88 81       	ld	r24, Y
   1b91a:	99 81       	ldd	r25, Y+1	; 0x01
   1b91c:	85 de       	rcall	.-758    	; 0x1b628 <lif_create_image>
   1b91e:	6f c0       	rjmp	.+222    	; 0x1b9fe <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b920:	96 01       	movw	r18, r12
   1b922:	ae 01       	movw	r20, r28
   1b924:	4e 5f       	subi	r20, 0xFE	; 254
   1b926:	5f 4f       	sbci	r21, 0xFF	; 255
   1b928:	64 ea       	ldi	r22, 0xA4	; 164
   1b92a:	76 e1       	ldi	r23, 0x16	; 22
   1b92c:	c7 01       	movw	r24, r14
   1b92e:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b932:	89 2b       	or	r24, r25
   1b934:	51 f0       	breq	.+20     	; 0x1b94a <lif_tests+0x214>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b936:	cc 0f       	add	r28, r28
   1b938:	dd 1f       	adc	r29, r29
   1b93a:	c0 0f       	add	r28, r16
   1b93c:	d1 1f       	adc	r29, r17
   1b93e:	6a 81       	ldd	r22, Y+2	; 0x02
   1b940:	7b 81       	ldd	r23, Y+3	; 0x03
   1b942:	88 81       	ld	r24, Y
   1b944:	99 81       	ldd	r25, Y+1	; 0x01
   1b946:	5e dd       	rcall	.-1348   	; 0x1b404 <lif_del_file>
   1b948:	5a c0       	rjmp	.+180    	; 0x1b9fe <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b94a:	96 01       	movw	r18, r12
   1b94c:	ae 01       	movw	r20, r28
   1b94e:	4f 5f       	subi	r20, 0xFF	; 255
   1b950:	5f 4f       	sbci	r21, 0xFF	; 255
   1b952:	68 ed       	ldi	r22, 0xD8	; 216
   1b954:	7b e0       	ldi	r23, 0x0B	; 11
   1b956:	c7 01       	movw	r24, r14
   1b958:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b95c:	89 2b       	or	r24, r25
   1b95e:	49 f0       	breq	.+18     	; 0x1b972 <lif_tests+0x23c>
    {
        lif_dir(argv[ind]);
   1b960:	cc 0f       	add	r28, r28
   1b962:	dd 1f       	adc	r29, r29
   1b964:	c0 0f       	add	r28, r16
   1b966:	d1 1f       	adc	r29, r17
   1b968:	88 81       	ld	r24, Y
   1b96a:	99 81       	ldd	r25, Y+1	; 0x01
   1b96c:	0e 94 00 cf 	call	0x19e00	; 0x19e00 <lif_dir>
   1b970:	46 c0       	rjmp	.+140    	; 0x1b9fe <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b972:	96 01       	movw	r18, r12
   1b974:	a5 01       	movw	r20, r10
   1b976:	68 ea       	ldi	r22, 0xA8	; 168
   1b978:	76 e1       	ldi	r23, 0x16	; 22
   1b97a:	c7 01       	movw	r24, r14
   1b97c:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b980:	89 2b       	or	r24, r25
   1b982:	71 f0       	breq	.+28     	; 0x1b9a0 <lif_tests+0x26a>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b984:	ce 01       	movw	r24, r28
   1b986:	88 0f       	add	r24, r24
   1b988:	99 1f       	adc	r25, r25
   1b98a:	e8 01       	movw	r28, r16
   1b98c:	c8 0f       	add	r28, r24
   1b98e:	d9 1f       	adc	r29, r25
   1b990:	4c 81       	ldd	r20, Y+4	; 0x04
   1b992:	5d 81       	ldd	r21, Y+5	; 0x05
   1b994:	6a 81       	ldd	r22, Y+2	; 0x02
   1b996:	7b 81       	ldd	r23, Y+3	; 0x03
   1b998:	88 81       	ld	r24, Y
   1b99a:	99 81       	ldd	r25, Y+1	; 0x01
   1b99c:	72 da       	rcall	.-2844   	; 0x1ae82 <lif_extract_lif_as_lif>
   1b99e:	2f c0       	rjmp	.+94     	; 0x1b9fe <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b9a0:	96 01       	movw	r18, r12
   1b9a2:	a5 01       	movw	r20, r10
   1b9a4:	63 eb       	ldi	r22, 0xB3	; 179
   1b9a6:	76 e1       	ldi	r23, 0x16	; 22
   1b9a8:	c7 01       	movw	r24, r14
   1b9aa:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b9ae:	89 2b       	or	r24, r25
   1b9b0:	79 f0       	breq	.+30     	; 0x1b9d0 <lif_tests+0x29a>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b9b2:	ce 01       	movw	r24, r28
   1b9b4:	88 0f       	add	r24, r24
   1b9b6:	99 1f       	adc	r25, r25
   1b9b8:	e8 01       	movw	r28, r16
   1b9ba:	c8 0f       	add	r28, r24
   1b9bc:	d9 1f       	adc	r29, r25
   1b9be:	4c 81       	ldd	r20, Y+4	; 0x04
   1b9c0:	5d 81       	ldd	r21, Y+5	; 0x05
   1b9c2:	6a 81       	ldd	r22, Y+2	; 0x02
   1b9c4:	7b 81       	ldd	r23, Y+3	; 0x03
   1b9c6:	88 81       	ld	r24, Y
   1b9c8:	99 81       	ldd	r25, Y+1	; 0x01
   1b9ca:	0e 94 92 d4 	call	0x1a924	; 0x1a924 <lif_extract_e010_as_ascii>
   1b9ce:	17 c0       	rjmp	.+46     	; 0x1b9fe <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b9d0:	96 01       	movw	r18, r12
   1b9d2:	a5 01       	movw	r20, r10
   1b9d4:	65 ee       	ldi	r22, 0xE5	; 229
   1b9d6:	7b e0       	ldi	r23, 0x0B	; 11
   1b9d8:	c7 01       	movw	r24, r14
   1b9da:	0e 94 0e 30 	call	0x601c	; 0x601c <MATCHARGS>
   1b9de:	89 2b       	or	r24, r25
   1b9e0:	09 f4       	brne	.+2      	; 0x1b9e4 <lif_tests+0x2ae>
   1b9e2:	b1 ce       	rjmp	.-670    	; 0x1b746 <lif_tests+0x10>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b9e4:	ce 01       	movw	r24, r28
   1b9e6:	88 0f       	add	r24, r24
   1b9e8:	99 1f       	adc	r25, r25
   1b9ea:	e8 01       	movw	r28, r16
   1b9ec:	c8 0f       	add	r28, r24
   1b9ee:	d9 1f       	adc	r29, r25
   1b9f0:	4c 81       	ldd	r20, Y+4	; 0x04
   1b9f2:	5d 81       	ldd	r21, Y+5	; 0x05
   1b9f4:	6a 81       	ldd	r22, Y+2	; 0x02
   1b9f6:	7b 81       	ldd	r23, Y+3	; 0x03
   1b9f8:	88 81       	ld	r24, Y
   1b9fa:	99 81       	ldd	r25, Y+1	; 0x01
   1b9fc:	98 dd       	rcall	.-1232   	; 0x1b52e <lif_rename_file>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1b9fe:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1ba00:	90 e0       	ldi	r25, 0x00	; 0
   1ba02:	cd b7       	in	r28, 0x3d	; 61
   1ba04:	de b7       	in	r29, 0x3e	; 62
   1ba06:	25 96       	adiw	r28, 0x05	; 5
   1ba08:	ec e0       	ldi	r30, 0x0C	; 12
   1ba0a:	74 c5       	rjmp	.+2792   	; 0x1c4f4 <__epilogue_restores__+0xc>

0001ba0c <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1ba0c:	80 91 e1 19 	lds	r24, 0x19E1	; 0x8019e1 <lcd_display_time>
   1ba10:	90 91 e2 19 	lds	r25, 0x19E2	; 0x8019e2 <lcd_display_time+0x1>
   1ba14:	01 96       	adiw	r24, 0x01	; 1
   1ba16:	90 93 e2 19 	sts	0x19E2, r25	; 0x8019e2 <lcd_display_time+0x1>
   1ba1a:	80 93 e1 19 	sts	0x19E1, r24	; 0x8019e1 <lcd_display_time>
   1ba1e:	08 95       	ret

0001ba20 <copyright>:


///@brief Display Copyright
///@return void
void copyright()
{
   1ba20:	00 d0       	rcall	.+0      	; 0x1ba22 <copyright+0x2>
   1ba22:	00 d0       	rcall	.+0      	; 0x1ba24 <copyright+0x4>
   1ba24:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1ba26:	8c ef       	ldi	r24, 0xFC	; 252
   1ba28:	96 e4       	ldi	r25, 0x46	; 70
   1ba2a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba2c:	ed b7       	in	r30, 0x3d	; 61
   1ba2e:	fe b7       	in	r31, 0x3e	; 62
   1ba30:	81 83       	std	Z+1, r24	; 0x01
   1ba32:	92 83       	std	Z+2, r25	; 0x02
   1ba34:	a3 83       	std	Z+3, r26	; 0x03
   1ba36:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1ba3a:	8d ed       	ldi	r24, 0xDD	; 221
   1ba3c:	96 e4       	ldi	r25, 0x46	; 70
   1ba3e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba40:	ed b7       	in	r30, 0x3d	; 61
   1ba42:	fe b7       	in	r31, 0x3e	; 62
   1ba44:	81 83       	std	Z+1, r24	; 0x01
   1ba46:	92 83       	std	Z+2, r25	; 0x02
   1ba48:	a3 83       	std	Z+3, r26	; 0x03
   1ba4a:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1ba4e:	80 ec       	ldi	r24, 0xC0	; 192
   1ba50:	96 e4       	ldi	r25, 0x46	; 70
   1ba52:	a0 e0       	ldi	r26, 0x00	; 0
   1ba54:	ed b7       	in	r30, 0x3d	; 61
   1ba56:	fe b7       	in	r31, 0x3e	; 62
   1ba58:	81 83       	std	Z+1, r24	; 0x01
   1ba5a:	92 83       	std	Z+2, r25	; 0x02
   1ba5c:	a3 83       	std	Z+3, r26	; 0x03
   1ba5e:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf(" GNU version 3\n");
   1ba62:	80 eb       	ldi	r24, 0xB0	; 176
   1ba64:	96 e4       	ldi	r25, 0x46	; 70
   1ba66:	a0 e0       	ldi	r26, 0x00	; 0
   1ba68:	ed b7       	in	r30, 0x3d	; 61
   1ba6a:	fe b7       	in	r31, 0x3e	; 62
   1ba6c:	81 83       	std	Z+1, r24	; 0x01
   1ba6e:	92 83       	std	Z+2, r25	; 0x02
   1ba70:	a3 83       	std	Z+3, r26	; 0x03
   1ba72:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1ba76:	89 e8       	ldi	r24, 0x89	; 137
   1ba78:	96 e4       	ldi	r25, 0x46	; 70
   1ba7a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba7c:	ed b7       	in	r30, 0x3d	; 61
   1ba7e:	fe b7       	in	r31, 0x3e	; 62
   1ba80:	81 83       	std	Z+1, r24	; 0x01
   1ba82:	92 83       	std	Z+2, r25	; 0x02
   1ba84:	a3 83       	std	Z+3, r26	; 0x03
   1ba86:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ba8a:	8b eb       	ldi	r24, 0xBB	; 187
   1ba8c:	96 e1       	ldi	r25, 0x16	; 22
   1ba8e:	ed b7       	in	r30, 0x3d	; 61
   1ba90:	fe b7       	in	r31, 0x3e	; 62
   1ba92:	95 83       	std	Z+5, r25	; 0x05
   1ba94:	84 83       	std	Z+4, r24	; 0x04
   1ba96:	8f e6       	ldi	r24, 0x6F	; 111
   1ba98:	96 e4       	ldi	r25, 0x46	; 70
   1ba9a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba9c:	81 83       	std	Z+1, r24	; 0x01
   1ba9e:	92 83       	std	Z+2, r25	; 0x02
   1baa0:	a3 83       	std	Z+3, r26	; 0x03
   1baa2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1baa6:	8f ed       	ldi	r24, 0xDF	; 223
   1baa8:	96 e1       	ldi	r25, 0x16	; 22
   1baaa:	ed b7       	in	r30, 0x3d	; 61
   1baac:	fe b7       	in	r31, 0x3e	; 62
   1baae:	95 83       	std	Z+5, r25	; 0x05
   1bab0:	84 83       	std	Z+4, r24	; 0x04
   1bab2:	85 e5       	ldi	r24, 0x55	; 85
   1bab4:	96 e4       	ldi	r25, 0x46	; 70
   1bab6:	a0 e0       	ldi	r26, 0x00	; 0
   1bab8:	81 83       	std	Z+1, r24	; 0x01
   1baba:	92 83       	std	Z+2, r25	; 0x02
   1babc:	a3 83       	std	Z+3, r26	; 0x03
   1babe:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("\n");
   1bac2:	83 e5       	ldi	r24, 0x53	; 83
   1bac4:	96 e4       	ldi	r25, 0x46	; 70
   1bac6:	a0 e0       	ldi	r26, 0x00	; 0
   1bac8:	ed b7       	in	r30, 0x3d	; 61
   1baca:	fe b7       	in	r31, 0x3e	; 62
   1bacc:	81 83       	std	Z+1, r24	; 0x01
   1bace:	92 83       	std	Z+2, r25	; 0x02
   1bad0:	a3 83       	std	Z+3, r26	; 0x03
   1bad2:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
}
   1bad6:	0f 90       	pop	r0
   1bad8:	0f 90       	pop	r0
   1bada:	0f 90       	pop	r0
   1badc:	0f 90       	pop	r0
   1bade:	0f 90       	pop	r0
   1bae0:	08 95       	ret

0001bae2 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1bae2:	a1 e1       	ldi	r26, 0x11	; 17
   1bae4:	b0 e0       	ldi	r27, 0x00	; 0
   1bae6:	e6 e7       	ldi	r30, 0x76	; 118
   1bae8:	fd ed       	ldi	r31, 0xDD	; 221
   1baea:	ee c4       	rjmp	.+2524   	; 0x1c4c8 <__prologue_saves__+0x18>
   1baec:	ec 01       	movw	r28, r24
   1baee:	7b 01       	movw	r14, r22
   1baf0:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1baf2:	60 e0       	ldi	r22, 0x00	; 0
   1baf4:	70 e0       	ldi	r23, 0x00	; 0
   1baf6:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <normalize>
    memset(buf,0,max);
   1bafa:	a8 01       	movw	r20, r16
   1bafc:	60 e0       	ldi	r22, 0x00	; 0
   1bafe:	70 e0       	ldi	r23, 0x00	; 0
   1bb00:	c7 01       	movw	r24, r14
   1bb02:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1bb06:	88 85       	ldd	r24, Y+8	; 0x08
   1bb08:	99 85       	ldd	r25, Y+9	; 0x09
   1bb0a:	0e 94 31 34 	call	0x6862	; 0x6862 <tm_mon_to_ascii>
   1bb0e:	28 81       	ld	r18, Y
   1bb10:	39 81       	ldd	r19, Y+1	; 0x01
   1bb12:	ed b7       	in	r30, 0x3d	; 61
   1bb14:	fe b7       	in	r31, 0x3e	; 62
   1bb16:	31 8b       	std	Z+17, r19	; 0x11
   1bb18:	20 8b       	std	Z+16, r18	; 0x10
   1bb1a:	2a 81       	ldd	r18, Y+2	; 0x02
   1bb1c:	3b 81       	ldd	r19, Y+3	; 0x03
   1bb1e:	37 87       	std	Z+15, r19	; 0x0f
   1bb20:	26 87       	std	Z+14, r18	; 0x0e
   1bb22:	2c 81       	ldd	r18, Y+4	; 0x04
   1bb24:	3d 81       	ldd	r19, Y+5	; 0x05
   1bb26:	35 87       	std	Z+13, r19	; 0x0d
   1bb28:	24 87       	std	Z+12, r18	; 0x0c
   1bb2a:	2e 81       	ldd	r18, Y+6	; 0x06
   1bb2c:	3f 81       	ldd	r19, Y+7	; 0x07
   1bb2e:	33 87       	std	Z+11, r19	; 0x0b
   1bb30:	22 87       	std	Z+10, r18	; 0x0a
   1bb32:	91 87       	std	Z+9, r25	; 0x09
   1bb34:	80 87       	std	Z+8, r24	; 0x08
   1bb36:	8d e3       	ldi	r24, 0x3D	; 61
   1bb38:	96 e4       	ldi	r25, 0x46	; 70
   1bb3a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb3c:	85 83       	std	Z+5, r24	; 0x05
   1bb3e:	96 83       	std	Z+6, r25	; 0x06
   1bb40:	a7 83       	std	Z+7, r26	; 0x07
   1bb42:	01 50       	subi	r16, 0x01	; 1
   1bb44:	11 09       	sbc	r17, r1
   1bb46:	14 83       	std	Z+4, r17	; 0x04
   1bb48:	03 83       	std	Z+3, r16	; 0x03
   1bb4a:	f2 82       	std	Z+2, r15	; 0x02
   1bb4c:	e1 82       	std	Z+1, r14	; 0x01
   1bb4e:	0e 94 85 44 	call	0x890a	; 0x890a <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bb52:	c7 01       	movw	r24, r14
   1bb54:	cd b7       	in	r28, 0x3d	; 61
   1bb56:	de b7       	in	r29, 0x3e	; 62
   1bb58:	61 96       	adiw	r28, 0x11	; 17
   1bb5a:	e6 e0       	ldi	r30, 0x06	; 6
   1bb5c:	d1 c4       	rjmp	.+2466   	; 0x1c500 <__epilogue_restores__+0x18>

0001bb5e <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1bb5e:	cf 93       	push	r28
   1bb60:	00 d0       	rcall	.+0      	; 0x1bb62 <lcd_backlight+0x4>
   1bb62:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1bb64:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1bb68:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1bb6c:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1bb70:	25 e0       	ldi	r18, 0x05	; 5
   1bb72:	40 ef       	ldi	r20, 0xF0	; 240
   1bb74:	52 e0       	ldi	r21, 0x02	; 2
   1bb76:	60 e0       	ldi	r22, 0x00	; 0
   1bb78:	82 e7       	ldi	r24, 0x72	; 114
   1bb7a:	0e 94 c4 2a 	call	0x5588	; 0x5588 <i2c_fn>
   1bb7e:	c8 2f       	mov	r28, r24
   1bb80:	81 11       	cpse	r24, r1
   1bb82:	0d c0       	rjmp	.+26     	; 0x1bb9e <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1bb84:	0e 94 c8 2c 	call	0x5990	; 0x5990 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bb88:	83 e2       	ldi	r24, 0x23	; 35
   1bb8a:	96 e4       	ldi	r25, 0x46	; 70
   1bb8c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb8e:	ed b7       	in	r30, 0x3d	; 61
   1bb90:	fe b7       	in	r31, 0x3e	; 62
   1bb92:	81 83       	std	Z+1, r24	; 0x01
   1bb94:	92 83       	std	Z+2, r25	; 0x02
   1bb96:	a3 83       	std	Z+3, r26	; 0x03
   1bb98:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1bb9c:	01 c0       	rjmp	.+2      	; 0x1bba0 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1bb9e:	c1 e0       	ldi	r28, 0x01	; 1
}
   1bba0:	8c 2f       	mov	r24, r28
   1bba2:	0f 90       	pop	r0
   1bba4:	0f 90       	pop	r0
   1bba6:	0f 90       	pop	r0
   1bba8:	cf 91       	pop	r28
   1bbaa:	08 95       	ret

0001bbac <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1bbac:	cf 93       	push	r28
   1bbae:	ad b7       	in	r26, 0x3d	; 61
   1bbb0:	be b7       	in	r27, 0x3e	; 62
   1bbb2:	17 97       	sbiw	r26, 0x07	; 7
   1bbb4:	0f b6       	in	r0, 0x3f	; 63
   1bbb6:	f8 94       	cli
   1bbb8:	be bf       	out	0x3e, r27	; 62
   1bbba:	0f be       	out	0x3f, r0	; 63
   1bbbc:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bbbe:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bbc0:	85 e0       	ldi	r24, 0x05	; 5
   1bbc2:	96 e4       	ldi	r25, 0x46	; 70
   1bbc4:	a0 e0       	ldi	r26, 0x00	; 0
   1bbc6:	ed b7       	in	r30, 0x3d	; 61
   1bbc8:	fe b7       	in	r31, 0x3e	; 62
   1bbca:	81 83       	std	Z+1, r24	; 0x01
   1bbcc:	92 83       	std	Z+2, r25	; 0x02
   1bbce:	a3 83       	std	Z+3, r26	; 0x03
   1bbd0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bbd4:	61 e0       	ldi	r22, 0x01	; 1
   1bbd6:	70 e0       	ldi	r23, 0x00	; 0
   1bbd8:	86 e0       	ldi	r24, 0x06	; 6
   1bbda:	9d ed       	ldi	r25, 0xDD	; 221
   1bbdc:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <set_timers>
   1bbe0:	01 96       	adiw	r24, 0x01	; 1
   1bbe2:	51 f4       	brne	.+20     	; 0x1bbf8 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1bbe4:	8f ee       	ldi	r24, 0xEF	; 239
   1bbe6:	95 e4       	ldi	r25, 0x45	; 69
   1bbe8:	a0 e0       	ldi	r26, 0x00	; 0
   1bbea:	ed b7       	in	r30, 0x3d	; 61
   1bbec:	fe b7       	in	r31, 0x3e	; 62
   1bbee:	81 83       	std	Z+1, r24	; 0x01
   1bbf0:	92 83       	std	Z+2, r25	; 0x02
   1bbf2:	a3 83       	std	Z+3, r26	; 0x03
   1bbf4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

	i2c_init(100000);
   1bbf8:	60 ea       	ldi	r22, 0xA0	; 160
   1bbfa:	76 e8       	ldi	r23, 0x86	; 134
   1bbfc:	81 e0       	ldi	r24, 0x01	; 1
   1bbfe:	90 e0       	ldi	r25, 0x00	; 0
   1bc00:	0e 94 cb 29 	call	0x5396	; 0x5396 <i2c_init>

	i2c_task_init();
   1bc04:	0e 94 8c 29 	call	0x5318	; 0x5318 <i2c_task_init>

	cli();
   1bc08:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bc0a:	83 e0       	ldi	r24, 0x03	; 3
   1bc0c:	97 e1       	ldi	r25, 0x17	; 23
   1bc0e:	ed b7       	in	r30, 0x3d	; 61
   1bc10:	fe b7       	in	r31, 0x3e	; 62
   1bc12:	97 83       	std	Z+7, r25	; 0x07
   1bc14:	86 83       	std	Z+6, r24	; 0x06
   1bc16:	89 ee       	ldi	r24, 0xE9	; 233
   1bc18:	95 e4       	ldi	r25, 0x45	; 69
   1bc1a:	a0 e0       	ldi	r26, 0x00	; 0
   1bc1c:	83 83       	std	Z+3, r24	; 0x03
   1bc1e:	94 83       	std	Z+4, r25	; 0x04
   1bc20:	a5 83       	std	Z+5, r26	; 0x05
   1bc22:	8c e0       	ldi	r24, 0x0C	; 12
   1bc24:	93 e0       	ldi	r25, 0x03	; 3
   1bc26:	92 83       	std	Z+2, r25	; 0x02
   1bc28:	81 83       	std	Z+1, r24	; 0x01
   1bc2a:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bc2e:	8f e0       	ldi	r24, 0x0F	; 15
   1bc30:	97 e1       	ldi	r25, 0x17	; 23
   1bc32:	ed b7       	in	r30, 0x3d	; 61
   1bc34:	fe b7       	in	r31, 0x3e	; 62
   1bc36:	97 83       	std	Z+7, r25	; 0x07
   1bc38:	86 83       	std	Z+6, r24	; 0x06
   1bc3a:	83 ee       	ldi	r24, 0xE3	; 227
   1bc3c:	95 e4       	ldi	r25, 0x45	; 69
   1bc3e:	a0 e0       	ldi	r26, 0x00	; 0
   1bc40:	83 83       	std	Z+3, r24	; 0x03
   1bc42:	94 83       	std	Z+4, r25	; 0x04
   1bc44:	a5 83       	std	Z+5, r26	; 0x05
   1bc46:	85 ef       	ldi	r24, 0xF5	; 245
   1bc48:	92 e0       	ldi	r25, 0x02	; 2
   1bc4a:	92 83       	std	Z+2, r25	; 0x02
   1bc4c:	81 83       	std	Z+1, r24	; 0x01
   1bc4e:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bc52:	22 e0       	ldi	r18, 0x02	; 2
   1bc54:	41 e2       	ldi	r20, 0x21	; 33
   1bc56:	53 e0       	ldi	r21, 0x03	; 3
   1bc58:	60 e0       	ldi	r22, 0x00	; 0
   1bc5a:	82 e7       	ldi	r24, 0x72	; 114
   1bc5c:	0e 94 a1 29 	call	0x5342	; 0x5342 <i2c_task_op_add>
   1bc60:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <i2c_task_op+0x1>
   1bc64:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bc68:	20 e1       	ldi	r18, 0x10	; 16
   1bc6a:	4c e0       	ldi	r20, 0x0C	; 12
   1bc6c:	53 e0       	ldi	r21, 0x03	; 3
   1bc6e:	60 e0       	ldi	r22, 0x00	; 0
   1bc70:	82 e7       	ldi	r24, 0x72	; 114
   1bc72:	0e 94 a1 29 	call	0x5342	; 0x5342 <i2c_task_op_add>
   1bc76:	90 93 51 17 	sts	0x1751, r25	; 0x801751 <i2c_task_op+0x3>
   1bc7a:	80 93 50 17 	sts	0x1750, r24	; 0x801750 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bc7e:	22 e0       	ldi	r18, 0x02	; 2
   1bc80:	4a e0       	ldi	r20, 0x0A	; 10
   1bc82:	53 e0       	ldi	r21, 0x03	; 3
   1bc84:	60 e0       	ldi	r22, 0x00	; 0
   1bc86:	82 e7       	ldi	r24, 0x72	; 114
   1bc88:	0e 94 a1 29 	call	0x5342	; 0x5342 <i2c_task_op_add>
   1bc8c:	90 93 53 17 	sts	0x1753, r25	; 0x801753 <i2c_task_op+0x5>
   1bc90:	80 93 52 17 	sts	0x1752, r24	; 0x801752 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bc94:	20 e1       	ldi	r18, 0x10	; 16
   1bc96:	45 ef       	ldi	r20, 0xF5	; 245
   1bc98:	52 e0       	ldi	r21, 0x02	; 2
   1bc9a:	60 e0       	ldi	r22, 0x00	; 0
   1bc9c:	82 e7       	ldi	r24, 0x72	; 114
   1bc9e:	0e 94 a1 29 	call	0x5342	; 0x5342 <i2c_task_op_add>
   1bca2:	90 93 55 17 	sts	0x1755, r25	; 0x801755 <i2c_task_op+0x7>
   1bca6:	80 93 54 17 	sts	0x1754, r24	; 0x801754 <i2c_task_op+0x6>

	SREG = sreg;
   1bcaa:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1bcac:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1bcb0:	68 ee       	ldi	r22, 0xE8	; 232
   1bcb2:	73 e0       	ldi	r23, 0x03	; 3
   1bcb4:	80 e0       	ldi	r24, 0x00	; 0
   1bcb6:	90 e0       	ldi	r25, 0x00	; 0
   1bcb8:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1bcbc:	0e 94 42 2a 	call	0x5484	; 0x5484 <i2c_task_done>
   1bcc0:	81 11       	cpse	r24, r1
   1bcc2:	0c c0       	rjmp	.+24     	; 0x1bcdc <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1bcc4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bcc8:	89 ec       	ldi	r24, 0xC9	; 201
   1bcca:	95 e4       	ldi	r25, 0x45	; 69
   1bccc:	a0 e0       	ldi	r26, 0x00	; 0
   1bcce:	ed b7       	in	r30, 0x3d	; 61
   1bcd0:	fe b7       	in	r31, 0x3e	; 62
   1bcd2:	81 83       	std	Z+1, r24	; 0x01
   1bcd4:	92 83       	std	Z+2, r25	; 0x02
   1bcd6:	a3 83       	std	Z+3, r26	; 0x03
   1bcd8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
	}

    sep();
   1bcdc:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>
}
   1bce0:	ad b7       	in	r26, 0x3d	; 61
   1bce2:	be b7       	in	r27, 0x3e	; 62
   1bce4:	17 96       	adiw	r26, 0x07	; 7
   1bce6:	0f b6       	in	r0, 0x3f	; 63
   1bce8:	f8 94       	cli
   1bcea:	be bf       	out	0x3e, r27	; 62
   1bcec:	0f be       	out	0x3f, r0	; 63
   1bcee:	ad bf       	out	0x3d, r26	; 61
   1bcf0:	cf 91       	pop	r28
   1bcf2:	08 95       	ret

0001bcf4 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1bcf4:	af e2       	ldi	r26, 0x2F	; 47
   1bcf6:	b0 e0       	ldi	r27, 0x00	; 0
   1bcf8:	ef e7       	ldi	r30, 0x7F	; 127
   1bcfa:	fe ed       	ldi	r31, 0xDE	; 222
   1bcfc:	e8 c3       	rjmp	.+2000   	; 0x1c4ce <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1bcfe:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1bd00:	f8 94       	cli
	if(!mmc_ins_status())
   1bd02:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <mmc_ins_status>
   1bd06:	89 2b       	or	r24, r25
   1bd08:	49 f4       	brne	.+18     	; 0x1bd1c <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1bd0a:	8c e1       	ldi	r24, 0x1C	; 28
   1bd0c:	97 e1       	ldi	r25, 0x17	; 23
   1bd0e:	ed b7       	in	r30, 0x3d	; 61
   1bd10:	fe b7       	in	r31, 0x3e	; 62
   1bd12:	97 83       	std	Z+7, r25	; 0x07
   1bd14:	86 83       	std	Z+6, r24	; 0x06
   1bd16:	83 ec       	ldi	r24, 0xC3	; 195
   1bd18:	95 e4       	ldi	r25, 0x45	; 69
   1bd1a:	17 c0       	rjmp	.+46     	; 0x1bd4a <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1bd1c:	be 01       	movw	r22, r28
   1bd1e:	68 5d       	subi	r22, 0xD8	; 216
   1bd20:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd22:	80 e0       	ldi	r24, 0x00	; 0
   1bd24:	90 e0       	ldi	r25, 0x00	; 0
   1bd26:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1bd2a:	ce 01       	movw	r24, r28
   1bd2c:	88 96       	adiw	r24, 0x28	; 40
   1bd2e:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <gmtime>
   1bd32:	4f e1       	ldi	r20, 0x1F	; 31
   1bd34:	50 e0       	ldi	r21, 0x00	; 0
   1bd36:	be 01       	movw	r22, r28
   1bd38:	68 5f       	subi	r22, 0xF8	; 248
   1bd3a:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd3c:	d2 de       	rcall	.-604    	; 0x1bae2 <lcd_time>
   1bd3e:	ed b7       	in	r30, 0x3d	; 61
   1bd40:	fe b7       	in	r31, 0x3e	; 62
   1bd42:	97 83       	std	Z+7, r25	; 0x07
   1bd44:	86 83       	std	Z+6, r24	; 0x06
   1bd46:	8d eb       	ldi	r24, 0xBD	; 189
   1bd48:	95 e4       	ldi	r25, 0x45	; 69
   1bd4a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd4c:	83 83       	std	Z+3, r24	; 0x03
   1bd4e:	94 83       	std	Z+4, r25	; 0x04
   1bd50:	a5 83       	std	Z+5, r26	; 0x05
   1bd52:	85 ef       	ldi	r24, 0xF5	; 245
   1bd54:	92 e0       	ldi	r25, 0x02	; 2
   1bd56:	92 83       	std	Z+2, r25	; 0x02
   1bd58:	81 83       	std	Z+1, r24	; 0x01
   1bd5a:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1bd5e:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1bd60:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <i2c_task_run>
}
   1bd64:	af 96       	adiw	r28, 0x2f	; 47
   1bd66:	e3 e0       	ldi	r30, 0x03	; 3
   1bd68:	ce c3       	rjmp	.+1948   	; 0x1c506 <__epilogue_restores__+0x1e>

0001bd6a <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1bd6a:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1bd6c:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1bd6e:	20 91 e1 19 	lds	r18, 0x19E1	; 0x8019e1 <lcd_display_time>
   1bd72:	30 91 e2 19 	lds	r19, 0x19E2	; 0x8019e2 <lcd_display_time+0x1>
   1bd76:	25 36       	cpi	r18, 0x65	; 101
   1bd78:	31 05       	cpc	r19, r1
   1bd7a:	3c f0       	brlt	.+14     	; 0x1bd8a <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1bd7c:	10 92 e2 19 	sts	0x19E2, r1	; 0x8019e2 <lcd_display_time+0x1>
   1bd80:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <lcd_display_time>
		SREG = sreg;
   1bd84:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1bd86:	b6 cf       	rjmp	.-148    	; 0x1bcf4 <i2c_lcd_task>
		return;
   1bd88:	08 95       	ret
	}
	SREG = sreg;
   1bd8a:	8f bf       	out	0x3f, r24	; 63
   1bd8c:	08 95       	ret

0001bd8e <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1bd8e:	00 d0       	rcall	.+0      	; 0x1bd90 <help+0x2>
   1bd90:	1f 92       	push	r1

    copyright();
   1bd92:	46 de       	rcall	.-884    	; 0x1ba20 <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bd94:	80 e0       	ldi	r24, 0x00	; 0
   1bd96:	90 e0       	ldi	r25, 0x00	; 0
   1bd98:	0e 94 d0 71 	call	0xe3a0	; 0xe3a0 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1bd9c:	80 e0       	ldi	r24, 0x00	; 0
   1bd9e:	90 e0       	ldi	r25, 0x00	; 0
   1bda0:	0e 94 1d 7d 	call	0xfa3a	; 0xfa3a <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bda4:	80 e0       	ldi	r24, 0x00	; 0
   1bda6:	90 e0       	ldi	r25, 0x00	; 0
   1bda8:	0e 94 68 bd 	call	0x17ad0	; 0x17ad0 <lif_help>
#endif

    gpib_help(0);
   1bdac:	80 e0       	ldi	r24, 0x00	; 0
   1bdae:	90 e0       	ldi	r25, 0x00	; 0
   1bdb0:	0e 94 87 90 	call	0x1210e	; 0x1210e <gpib_help>

    printf(
   1bdb4:	8c e8       	ldi	r24, 0x8C	; 140
   1bdb6:	95 e4       	ldi	r25, 0x45	; 69
   1bdb8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdba:	ed b7       	in	r30, 0x3d	; 61
   1bdbc:	fe b7       	in	r31, 0x3e	; 62
   1bdbe:	81 83       	std	Z+1, r24	; 0x01
   1bdc0:	92 83       	std	Z+2, r25	; 0x02
   1bdc2:	a3 83       	std	Z+3, r26	; 0x03
   1bdc4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
        "reset\n"
        "setdate\n"
        "time\n"
        "\n"
        );
}
   1bdc8:	0f 90       	pop	r0
   1bdca:	0f 90       	pop	r0
   1bdcc:	0f 90       	pop	r0
   1bdce:	08 95       	ret

0001bdd0 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1bdd0:	a9 e6       	ldi	r26, 0x69	; 105
   1bdd2:	b1 e0       	ldi	r27, 0x01	; 1
   1bdd4:	ed ee       	ldi	r30, 0xED	; 237
   1bdd6:	fe ed       	ldi	r31, 0xDE	; 222
   1bdd8:	75 c3       	rjmp	.+1770   	; 0x1c4c4 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bdda:	89 e8       	ldi	r24, 0x89	; 137
   1bddc:	95 e4       	ldi	r25, 0x45	; 69
   1bdde:	a0 e0       	ldi	r26, 0x00	; 0
   1bde0:	ed b7       	in	r30, 0x3d	; 61
   1bde2:	fe b7       	in	r31, 0x3e	; 62
   1bde4:	81 83       	std	Z+1, r24	; 0x01
   1bde6:	92 83       	std	Z+2, r25	; 0x02
   1bde8:	a3 83       	std	Z+3, r26	; 0x03
   1bdea:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

	memset(line,0,sizeof(line)-1);
   1bdee:	ce 01       	movw	r24, r28
   1bdf0:	06 96       	adiw	r24, 0x06	; 6
   1bdf2:	7c 01       	movw	r14, r24
   1bdf4:	8f ef       	ldi	r24, 0xFF	; 255
   1bdf6:	f7 01       	movw	r30, r14
   1bdf8:	11 92       	st	Z+, r1
   1bdfa:	8a 95       	dec	r24
   1bdfc:	e9 f7       	brne	.-6      	; 0x1bdf8 <user_task.part.1+0x28>

    fgets(line,sizeof(line)-2,stdin);
   1bdfe:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <__iob>
   1be02:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <__iob+0x1>
   1be06:	6e ef       	ldi	r22, 0xFE	; 254
   1be08:	70 e0       	ldi	r23, 0x00	; 0
   1be0a:	c7 01       	movw	r24, r14
   1be0c:	0e 94 09 75 	call	0xea12	; 0xea12 <fgets>
    trim_tail(line);
   1be10:	c7 01       	movw	r24, r14
   1be12:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <trim_tail>
    argc = split_args(line,argv,50);
   1be16:	42 e3       	ldi	r20, 0x32	; 50
   1be18:	50 e0       	ldi	r21, 0x00	; 0
   1be1a:	be 01       	movw	r22, r28
   1be1c:	6a 5f       	subi	r22, 0xFA	; 250
   1be1e:	7e 4f       	sbci	r23, 0xFE	; 254
   1be20:	c7 01       	movw	r24, r14
   1be22:	0e 94 52 30 	call	0x60a4	; 0x60a4 <split_args>
   1be26:	6c 01       	movw	r12, r24
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1be28:	ca 5f       	subi	r28, 0xFA	; 250
   1be2a:	de 4f       	sbci	r29, 0xFE	; 254
   1be2c:	08 81       	ld	r16, Y
   1be2e:	19 81       	ldd	r17, Y+1	; 0x01
   1be30:	c6 50       	subi	r28, 0x06	; 6
   1be32:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1be34:	01 15       	cp	r16, r1
   1be36:	11 05       	cpc	r17, r1
   1be38:	09 f4       	brne	.+2      	; 0x1be3c <user_task.part.1+0x6c>
   1be3a:	98 c0       	rjmp	.+304    	; 0x1bf6c <user_task.part.1+0x19c>
   1be3c:	18 16       	cp	r1, r24
   1be3e:	19 06       	cpc	r1, r25
   1be40:	0c f0       	brlt	.+2      	; 0x1be44 <user_task.part.1+0x74>
   1be42:	94 c0       	rjmp	.+296    	; 0x1bf6c <user_task.part.1+0x19c>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1be44:	6a e2       	ldi	r22, 0x2A	; 42
   1be46:	77 e1       	ldi	r23, 0x17	; 23
   1be48:	c8 01       	movw	r24, r16
   1be4a:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1be4e:	89 2b       	or	r24, r25
   1be50:	f9 f0       	breq	.+62     	; 0x1be90 <user_task.part.1+0xc0>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1be52:	c8 5f       	subi	r28, 0xF8	; 248
   1be54:	de 4f       	sbci	r29, 0xFE	; 254
   1be56:	e8 81       	ld	r30, Y
   1be58:	f9 81       	ldd	r31, Y+1	; 0x01
   1be5a:	c8 50       	subi	r28, 0x08	; 8
   1be5c:	d1 40       	sbci	r29, 0x01	; 1
   1be5e:	80 81       	ld	r24, Z
   1be60:	8d 33       	cpi	r24, 0x3D	; 61
   1be62:	19 f4       	brne	.+6      	; 0x1be6a <user_task.part.1+0x9a>
            ++ind;
   1be64:	82 e0       	ldi	r24, 0x02	; 2
   1be66:	90 e0       	ldi	r25, 0x00	; 0
   1be68:	02 c0       	rjmp	.+4      	; 0x1be6e <user_task.part.1+0x9e>
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1be6a:	81 e0       	ldi	r24, 0x01	; 1
   1be6c:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1be6e:	88 0f       	add	r24, r24
   1be70:	99 1f       	adc	r25, r25
   1be72:	e6 e0       	ldi	r30, 0x06	; 6
   1be74:	f1 e0       	ldi	r31, 0x01	; 1
   1be76:	ec 0f       	add	r30, r28
   1be78:	fd 1f       	adc	r31, r29
   1be7a:	e8 0f       	add	r30, r24
   1be7c:	f9 1f       	adc	r31, r25
   1be7e:	80 81       	ld	r24, Z
   1be80:	91 81       	ldd	r25, Z+1	; 0x01
   1be82:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <get_value>
		result = lcd_backlight(rgb);
   1be86:	6b de       	rcall	.-810    	; 0x1bb5e <lcd_backlight>
    else if(lif_tests(argc,argv))
	{
        result = 1;
	}
#endif
    if(result)
   1be88:	88 23       	and	r24, r24
   1be8a:	09 f4       	brne	.+2      	; 0x1be8e <user_task.part.1+0xbe>
   1be8c:	62 c0       	rjmp	.+196    	; 0x1bf52 <user_task.part.1+0x182>
   1be8e:	6e c0       	rjmp	.+220    	; 0x1bf6c <user_task.part.1+0x19c>
        rgb = get_value(argv[ind]);
		result = lcd_backlight(rgb);
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1be90:	64 e3       	ldi	r22, 0x34	; 52
   1be92:	77 e1       	ldi	r23, 0x17	; 23
   1be94:	c8 01       	movw	r24, r16
   1be96:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <MATCH>
   1be9a:	89 2b       	or	r24, r25
   1be9c:	19 f0       	breq	.+6      	; 0x1bea4 <user_task.part.1+0xd4>
    {
        PrintFree();
   1be9e:	0e 94 c8 24 	call	0x4990	; 0x4990 <PrintFree>
   1bea2:	64 c0       	rjmp	.+200    	; 0x1bf6c <user_task.part.1+0x19c>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1bea4:	60 ee       	ldi	r22, 0xE0	; 224
   1bea6:	7d e0       	ldi	r23, 0x0D	; 13
   1bea8:	c8 01       	movw	r24, r16
   1beaa:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1beae:	89 2b       	or	r24, r25
   1beb0:	51 f0       	breq	.+20     	; 0x1bec6 <user_task.part.1+0xf6>
    {
        cli();
   1beb2:	f8 94       	cli
        uart_rx_flush(0);
   1beb4:	80 e0       	ldi	r24, 0x00	; 0
   1beb6:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_rx_flush>
        cli();
   1beba:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1bebc:	82 e0       	ldi	r24, 0x02	; 2
   1bebe:	84 bf       	out	0x34, r24	; 52
        RESET();
   1bec0:	e0 e0       	ldi	r30, 0x00	; 0
   1bec2:	fc ef       	ldi	r31, 0xFC	; 252
   1bec4:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1bec6:	68 e3       	ldi	r22, 0x38	; 56
   1bec8:	77 e1       	ldi	r23, 0x17	; 23
   1beca:	c8 01       	movw	r24, r16
   1becc:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1bed0:	89 2b       	or	r24, r25
   1bed2:	19 f0       	breq	.+6      	; 0x1beda <user_task.part.1+0x10a>
    {
        setdate();
   1bed4:	0e 94 35 39 	call	0x726a	; 0x726a <setdate>
   1bed8:	07 c0       	rjmp	.+14     	; 0x1bee8 <user_task.part.1+0x118>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1beda:	60 e4       	ldi	r22, 0x40	; 64
   1bedc:	77 e1       	ldi	r23, 0x17	; 23
   1bede:	c8 01       	movw	r24, r16
   1bee0:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1bee4:	89 2b       	or	r24, r25
   1bee6:	19 f0       	breq	.+6      	; 0x1beee <user_task.part.1+0x11e>
    {
        display_clock();
   1bee8:	0e 94 51 3b 	call	0x76a2	; 0x76a2 <display_clock>
   1beec:	3f c0       	rjmp	.+126    	; 0x1bf6c <user_task.part.1+0x19c>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1beee:	69 e7       	ldi	r22, 0x79	; 121
   1bef0:	76 e1       	ldi	r23, 0x16	; 22
   1bef2:	c8 01       	movw	r24, r16
   1bef4:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1bef8:	89 2b       	or	r24, r25
    {
        help();
   1befa:	11 f0       	breq	.+4      	; 0x1bf00 <user_task.part.1+0x130>
   1befc:	48 df       	rcall	.-368    	; 0x1bd8e <help>
   1befe:	36 c0       	rjmp	.+108    	; 0x1bf6c <user_task.part.1+0x19c>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bf00:	6f e7       	ldi	r22, 0x7F	; 127
   1bf02:	76 e1       	ldi	r23, 0x16	; 22
   1bf04:	c8 01       	movw	r24, r16
   1bf06:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <MATCHI>
   1bf0a:	89 2b       	or	r24, r25
   1bf0c:	b9 f7       	brne	.-18     	; 0x1befc <user_task.part.1+0x12c>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1bf0e:	be 01       	movw	r22, r28
   1bf10:	6a 5f       	subi	r22, 0xFA	; 250
   1bf12:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf14:	c6 01       	movw	r24, r12
   1bf16:	0e 94 a8 90 	call	0x12150	; 0x12150 <gpib_tests>
   1bf1a:	89 2b       	or	r24, r25
   1bf1c:	19 f0       	breq	.+6      	; 0x1bf24 <user_task.part.1+0x154>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1bf1e:	0e 94 bc 8b 	call	0x11778	; 0x11778 <gpib_init_devices>
   1bf22:	24 c0       	rjmp	.+72     	; 0x1bf6c <user_task.part.1+0x19c>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1bf24:	be 01       	movw	r22, r28
   1bf26:	6a 5f       	subi	r22, 0xFA	; 250
   1bf28:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf2a:	c6 01       	movw	r24, r12
   1bf2c:	0e 94 8f 80 	call	0x1011e	; 0x1011e <posix_tests>
   1bf30:	89 2b       	or	r24, r25
   1bf32:	e1 f4       	brne	.+56     	; 0x1bf6c <user_task.part.1+0x19c>
        result = 1;
	}
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1bf34:	be 01       	movw	r22, r28
   1bf36:	6a 5f       	subi	r22, 0xFA	; 250
   1bf38:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf3a:	c6 01       	movw	r24, r12
   1bf3c:	0e 94 ea 72 	call	0xe5d4	; 0xe5d4 <fatfs_tests>
   1bf40:	89 2b       	or	r24, r25
   1bf42:	a1 f4       	brne	.+40     	; 0x1bf6c <user_task.part.1+0x19c>
        result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1bf44:	be 01       	movw	r22, r28
   1bf46:	6a 5f       	subi	r22, 0xFA	; 250
   1bf48:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf4a:	c6 01       	movw	r24, r12
   1bf4c:	f4 db       	rcall	.-2072   	; 0x1b736 <lif_tests>
   1bf4e:	89 2b       	or	r24, r25
   1bf50:	69 f4       	brne	.+26     	; 0x1bf6c <user_task.part.1+0x19c>
	}
#endif
    if(result)
        printf("OK\n");
    else
        printf("Error:[%s]\n",line);
   1bf52:	ed b7       	in	r30, 0x3d	; 61
   1bf54:	fe b7       	in	r31, 0x3e	; 62
   1bf56:	f5 82       	std	Z+5, r15	; 0x05
   1bf58:	e4 82       	std	Z+4, r14	; 0x04
   1bf5a:	89 e7       	ldi	r24, 0x79	; 121
   1bf5c:	95 e4       	ldi	r25, 0x45	; 69
   1bf5e:	a0 e0       	ldi	r26, 0x00	; 0
   1bf60:	81 83       	std	Z+1, r24	; 0x01
   1bf62:	92 83       	std	Z+2, r25	; 0x02
   1bf64:	a3 83       	std	Z+3, r26	; 0x03
   1bf66:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
   1bf6a:	0a c0       	rjmp	.+20     	; 0x1bf80 <user_task.part.1+0x1b0>
	{
        result = 1;
	}
#endif
    if(result)
        printf("OK\n");
   1bf6c:	85 e8       	ldi	r24, 0x85	; 133
   1bf6e:	95 e4       	ldi	r25, 0x45	; 69
   1bf70:	a0 e0       	ldi	r26, 0x00	; 0
   1bf72:	ed b7       	in	r30, 0x3d	; 61
   1bf74:	fe b7       	in	r31, 0x3e	; 62
   1bf76:	81 83       	std	Z+1, r24	; 0x01
   1bf78:	92 83       	std	Z+2, r25	; 0x02
   1bf7a:	a3 83       	std	Z+3, r26	; 0x03
   1bf7c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    else
        printf("Error:[%s]\n",line);
}
   1bf80:	c7 59       	subi	r28, 0x97	; 151
   1bf82:	de 4f       	sbci	r29, 0xFE	; 254
   1bf84:	e8 e0       	ldi	r30, 0x08	; 8
   1bf86:	ba c2       	rjmp	.+1396   	; 0x1c4fc <__epilogue_restores__+0x14>

0001bf88 <user_task>:
    int result = 0;
    char *argv[50];
    char line[256];


    if(gpib)
   1bf88:	81 11       	cpse	r24, r1
        gpib_task();
   1bf8a:	0e 94 27 90 	call	0x1204e	; 0x1204e <gpib_task>

    if(!kbhit(0))
   1bf8e:	80 e0       	ldi	r24, 0x00	; 0
   1bf90:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <uart_rx_count>
   1bf94:	89 2b       	or	r24, r25
   1bf96:	09 f0       	breq	.+2      	; 0x1bf9a <user_task+0x12>
   1bf98:	1b cf       	rjmp	.-458    	; 0x1bdd0 <user_task.part.1>
   1bf9a:	08 95       	ret

0001bf9c <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1bf9c:	a3 e3       	ldi	r26, 0x33	; 51
   1bf9e:	b0 e0       	ldi	r27, 0x00	; 0
   1bfa0:	e3 ed       	ldi	r30, 0xD3	; 211
   1bfa2:	ff ed       	ldi	r31, 0xDF	; 223
   1bfa4:	8f c2       	rjmp	.+1310   	; 0x1c4c4 <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1bfa6:	0e 94 ac 24 	call	0x4958	; 0x4958 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1bfaa:	46 98       	cbi	0x08, 6	; 8
   1bfac:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1bfae:	0e 94 50 84 	call	0x108a0	; 0x108a0 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1bfb2:	40 e0       	ldi	r20, 0x00	; 0
   1bfb4:	52 ec       	ldi	r21, 0xC2	; 194
   1bfb6:	61 e0       	ldi	r22, 0x01	; 1
   1bfb8:	70 e0       	ldi	r23, 0x00	; 0
   1bfba:	80 e0       	ldi	r24, 0x00	; 0
   1bfbc:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <uart_init>
   1bfc0:	6b 01       	movw	r12, r22
   1bfc2:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1bfc4:	68 ec       	ldi	r22, 0xC8	; 200
   1bfc6:	70 e0       	ldi	r23, 0x00	; 0
   1bfc8:	80 e0       	ldi	r24, 0x00	; 0
   1bfca:	90 e0       	ldi	r25, 0x00	; 0
   1bfcc:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <delayms>

    sep();
   1bfd0:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>
    printf("Start\n");
   1bfd4:	82 e7       	ldi	r24, 0x72	; 114
   1bfd6:	95 e4       	ldi	r25, 0x45	; 69
   1bfd8:	a0 e0       	ldi	r26, 0x00	; 0
   1bfda:	ed b7       	in	r30, 0x3d	; 61
   1bfdc:	fe b7       	in	r31, 0x3e	; 62
   1bfde:	81 83       	std	Z+1, r24	; 0x01
   1bfe0:	92 83       	std	Z+2, r25	; 0x02
   1bfe2:	a3 83       	std	Z+3, r26	; 0x03
   1bfe4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1bfe8:	80 e0       	ldi	r24, 0x00	; 0
   1bfea:	9d e2       	ldi	r25, 0x2D	; 45
   1bfec:	a1 e3       	ldi	r26, 0x31	; 49
   1bfee:	b1 e0       	ldi	r27, 0x01	; 1
   1bff0:	ed b7       	in	r30, 0x3d	; 61
   1bff2:	fe b7       	in	r31, 0x3e	; 62
   1bff4:	84 83       	std	Z+4, r24	; 0x04
   1bff6:	95 83       	std	Z+5, r25	; 0x05
   1bff8:	a6 83       	std	Z+6, r26	; 0x06
   1bffa:	b7 83       	std	Z+7, r27	; 0x07
   1bffc:	81 e6       	ldi	r24, 0x61	; 97
   1bffe:	95 e4       	ldi	r25, 0x45	; 69
   1c000:	a0 e0       	ldi	r26, 0x00	; 0
   1c002:	81 83       	std	Z+1, r24	; 0x01
   1c004:	92 83       	std	Z+2, r25	; 0x02
   1c006:	a3 83       	std	Z+3, r26	; 0x03
   1c008:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c00c:	ed b7       	in	r30, 0x3d	; 61
   1c00e:	fe b7       	in	r31, 0x3e	; 62
   1c010:	c0 86       	std	Z+8, r12	; 0x08
   1c012:	d1 86       	std	Z+9, r13	; 0x09
   1c014:	e2 86       	std	Z+10, r14	; 0x0a
   1c016:	f3 86       	std	Z+11, r15	; 0x0b
   1c018:	80 e0       	ldi	r24, 0x00	; 0
   1c01a:	92 ec       	ldi	r25, 0xC2	; 194
   1c01c:	a1 e0       	ldi	r26, 0x01	; 1
   1c01e:	b0 e0       	ldi	r27, 0x00	; 0
   1c020:	84 83       	std	Z+4, r24	; 0x04
   1c022:	95 83       	std	Z+5, r25	; 0x05
   1c024:	a6 83       	std	Z+6, r26	; 0x06
   1c026:	b7 83       	std	Z+7, r27	; 0x07
   1c028:	8a e3       	ldi	r24, 0x3A	; 58
   1c02a:	95 e4       	ldi	r25, 0x45	; 69
   1c02c:	a0 e0       	ldi	r26, 0x00	; 0
   1c02e:	81 83       	std	Z+1, r24	; 0x01
   1c030:	92 83       	std	Z+2, r25	; 0x02
   1c032:	a3 83       	std	Z+3, r26	; 0x03
   1c034:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    init_timers();
   1c038:	0e 94 a2 33 	call	0x6744	; 0x6744 <init_timers>

    sep();
   1c03c:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c040:	8b e1       	ldi	r24, 0x1B	; 27
   1c042:	95 e4       	ldi	r25, 0x45	; 69
   1c044:	a0 e0       	ldi	r26, 0x00	; 0
   1c046:	ed b7       	in	r30, 0x3d	; 61
   1c048:	fe b7       	in	r31, 0x3e	; 62
   1c04a:	81 83       	std	Z+1, r24	; 0x01
   1c04c:	92 83       	std	Z+2, r25	; 0x02
   1c04e:	a3 83       	std	Z+3, r26	; 0x03
   1c050:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c054:	8e ef       	ldi	r24, 0xFE	; 254
   1c056:	94 e4       	ldi	r25, 0x44	; 68
   1c058:	a0 e0       	ldi	r26, 0x00	; 0
   1c05a:	ed b7       	in	r30, 0x3d	; 61
   1c05c:	fe b7       	in	r31, 0x3e	; 62
   1c05e:	81 83       	std	Z+1, r24	; 0x01
   1c060:	92 83       	std	Z+2, r25	; 0x02
   1c062:	a3 83       	std	Z+3, r26	; 0x03
   1c064:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf(" GNU version 3\n");
   1c068:	8e ee       	ldi	r24, 0xEE	; 238
   1c06a:	94 e4       	ldi	r25, 0x44	; 68
   1c06c:	a0 e0       	ldi	r26, 0x00	; 0
   1c06e:	ed b7       	in	r30, 0x3d	; 61
   1c070:	fe b7       	in	r31, 0x3e	; 62
   1c072:	81 83       	std	Z+1, r24	; 0x01
   1c074:	92 83       	std	Z+2, r25	; 0x02
   1c076:	a3 83       	std	Z+3, r26	; 0x03
   1c078:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c07c:	87 ec       	ldi	r24, 0xC7	; 199
   1c07e:	94 e4       	ldi	r25, 0x44	; 68
   1c080:	a0 e0       	ldi	r26, 0x00	; 0
   1c082:	ed b7       	in	r30, 0x3d	; 61
   1c084:	fe b7       	in	r31, 0x3e	; 62
   1c086:	81 83       	std	Z+1, r24	; 0x01
   1c088:	92 83       	std	Z+2, r25	; 0x02
   1c08a:	a3 83       	std	Z+3, r26	; 0x03
   1c08c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c090:	8b eb       	ldi	r24, 0xBB	; 187
   1c092:	96 e1       	ldi	r25, 0x16	; 22
   1c094:	ed b7       	in	r30, 0x3d	; 61
   1c096:	fe b7       	in	r31, 0x3e	; 62
   1c098:	95 83       	std	Z+5, r25	; 0x05
   1c09a:	84 83       	std	Z+4, r24	; 0x04
   1c09c:	8d ea       	ldi	r24, 0xAD	; 173
   1c09e:	94 e4       	ldi	r25, 0x44	; 68
   1c0a0:	a0 e0       	ldi	r26, 0x00	; 0
   1c0a2:	81 83       	std	Z+1, r24	; 0x01
   1c0a4:	92 83       	std	Z+2, r25	; 0x02
   1c0a6:	a3 83       	std	Z+3, r26	; 0x03
   1c0a8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c0ac:	8f ed       	ldi	r24, 0xDF	; 223
   1c0ae:	96 e1       	ldi	r25, 0x16	; 22
   1c0b0:	ed b7       	in	r30, 0x3d	; 61
   1c0b2:	fe b7       	in	r31, 0x3e	; 62
   1c0b4:	95 83       	std	Z+5, r25	; 0x05
   1c0b6:	84 83       	std	Z+4, r24	; 0x04
   1c0b8:	83 e9       	ldi	r24, 0x93	; 147
   1c0ba:	94 e4       	ldi	r25, 0x44	; 68
   1c0bc:	a0 e0       	ldi	r26, 0x00	; 0
   1c0be:	81 83       	std	Z+1, r24	; 0x01
   1c0c0:	92 83       	std	Z+2, r25	; 0x02
   1c0c2:	a3 83       	std	Z+3, r26	; 0x03
   1c0c4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

    sep();
   1c0c8:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>
    PrintFree();
   1c0cc:	0e 94 c8 24 	call	0x4990	; 0x4990 <PrintFree>

    sep();
   1c0d0:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c0d4:	8d e7       	ldi	r24, 0x7D	; 125
   1c0d6:	94 e4       	ldi	r25, 0x44	; 68
   1c0d8:	a0 e0       	ldi	r26, 0x00	; 0
   1c0da:	ed b7       	in	r30, 0x3d	; 61
   1c0dc:	fe b7       	in	r31, 0x3e	; 62
   1c0de:	81 83       	std	Z+1, r24	; 0x01
   1c0e0:	92 83       	std	Z+2, r25	; 0x02
   1c0e2:	a3 83       	std	Z+3, r26	; 0x03
   1c0e4:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c0e8:	4b e0       	ldi	r20, 0x0B	; 11
   1c0ea:	50 e0       	ldi	r21, 0x00	; 0
   1c0ec:	60 e2       	ldi	r22, 0x20	; 32
   1c0ee:	71 ea       	ldi	r23, 0xA1	; 161
   1c0f0:	87 e0       	ldi	r24, 0x07	; 7
   1c0f2:	90 e0       	ldi	r25, 0x00	; 0
   1c0f4:	0e 94 2e 24 	call	0x485c	; 0x485c <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c0f8:	87 e6       	ldi	r24, 0x67	; 103
   1c0fa:	94 e4       	ldi	r25, 0x44	; 68
   1c0fc:	a0 e0       	ldi	r26, 0x00	; 0
   1c0fe:	ed b7       	in	r30, 0x3d	; 61
   1c100:	fe b7       	in	r31, 0x3e	; 62
   1c102:	81 83       	std	Z+1, r24	; 0x01
   1c104:	92 83       	std	Z+2, r25	; 0x02
   1c106:	a3 83       	std	Z+3, r26	; 0x03
   1c108:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
	i2c_init(100000);
   1c10c:	60 ea       	ldi	r22, 0xA0	; 160
   1c10e:	76 e8       	ldi	r23, 0x86	; 134
   1c110:	81 e0       	ldi	r24, 0x01	; 1
   1c112:	90 e0       	ldi	r25, 0x00	; 0
   1c114:	0e 94 cb 29 	call	0x5396	; 0x5396 <i2c_init>
    sep();
   1c118:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c11c:	85 e5       	ldi	r24, 0x55	; 85
   1c11e:	94 e4       	ldi	r25, 0x44	; 68
   1c120:	a0 e0       	ldi	r26, 0x00	; 0
   1c122:	ed b7       	in	r30, 0x3d	; 61
   1c124:	fe b7       	in	r31, 0x3e	; 62
   1c126:	81 83       	std	Z+1, r24	; 0x01
   1c128:	92 83       	std	Z+2, r25	; 0x02
   1c12a:	a3 83       	std	Z+3, r26	; 0x03
   1c12c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    clock_clear();
   1c130:	0e 94 5f 33 	call	0x66be	; 0x66be <clock_clear>
    printf("Clock cleared\n");
   1c134:	86 e4       	ldi	r24, 0x46	; 70
   1c136:	94 e4       	ldi	r25, 0x44	; 68
   1c138:	a0 e0       	ldi	r26, 0x00	; 0
   1c13a:	ed b7       	in	r30, 0x3d	; 61
   1c13c:	fe b7       	in	r31, 0x3e	; 62
   1c13e:	81 83       	std	Z+1, r24	; 0x01
   1c140:	92 83       	std	Z+2, r25	; 0x02
   1c142:	a3 83       	std	Z+3, r26	; 0x03
   1c144:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c148:	be 01       	movw	r22, r28
   1c14a:	64 5d       	subi	r22, 0xD4	; 212
   1c14c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c14e:	80 e0       	ldi	r24, 0x00	; 0
   1c150:	90 e0       	ldi	r25, 0x00	; 0
   1c152:	0e 94 ff 33 	call	0x67fe	; 0x67fe <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c156:	88 a9       	ldd	r24, Y+48	; 0x30
   1c158:	99 a9       	ldd	r25, Y+49	; 0x31
   1c15a:	aa a9       	ldd	r26, Y+50	; 0x32
   1c15c:	bb a9       	ldd	r27, Y+51	; 0x33
   1c15e:	ed b7       	in	r30, 0x3d	; 61
   1c160:	fe b7       	in	r31, 0x3e	; 62
   1c162:	84 83       	std	Z+4, r24	; 0x04
   1c164:	95 83       	std	Z+5, r25	; 0x05
   1c166:	a6 83       	std	Z+6, r26	; 0x06
   1c168:	b7 83       	std	Z+7, r27	; 0x07
   1c16a:	88 e1       	ldi	r24, 0x18	; 24
   1c16c:	94 e4       	ldi	r25, 0x44	; 68
   1c16e:	a0 e0       	ldi	r26, 0x00	; 0
   1c170:	81 83       	std	Z+1, r24	; 0x01
   1c172:	92 83       	std	Z+2, r25	; 0x02
   1c174:	a3 83       	std	Z+3, r26	; 0x03
   1c176:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c17a:	80 e0       	ldi	r24, 0x00	; 0
   1c17c:	90 e0       	ldi	r25, 0x00	; 0
   1c17e:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <initialize_clock>
    display_clock();
   1c182:	0e 94 51 3b 	call	0x76a2	; 0x76a2 <display_clock>
    sep();
   1c186:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c18a:	10 dd       	rcall	.-1504   	; 0x1bbac <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c18c:	80 e0       	ldi	r24, 0x00	; 0
   1c18e:	94 e4       	ldi	r25, 0x44	; 68
   1c190:	a0 e0       	ldi	r26, 0x00	; 0
   1c192:	ed b7       	in	r30, 0x3d	; 61
   1c194:	fe b7       	in	r31, 0x3e	; 62
   1c196:	81 83       	std	Z+1, r24	; 0x01
   1c198:	92 83       	std	Z+2, r25	; 0x02
   1c19a:	a3 83       	std	Z+3, r26	; 0x03
   1c19c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    if ( !mmc_init(1) )
   1c1a0:	81 e0       	ldi	r24, 0x01	; 1
   1c1a2:	90 e0       	ldi	r25, 0x00	; 0
   1c1a4:	0e 94 fc 6d 	call	0xdbf8	; 0xdbf8 <mmc_init>
   1c1a8:	89 2b       	or	r24, r25
   1c1aa:	51 f4       	brne	.+20     	; 0x1c1c0 <main+0x224>
		printf("MMC initialized\n");
   1c1ac:	8f ee       	ldi	r24, 0xEF	; 239
   1c1ae:	93 e4       	ldi	r25, 0x43	; 67
   1c1b0:	a0 e0       	ldi	r26, 0x00	; 0
   1c1b2:	ed b7       	in	r30, 0x3d	; 61
   1c1b4:	fe b7       	in	r31, 0x3e	; 62
   1c1b6:	81 83       	std	Z+1, r24	; 0x01
   1c1b8:	92 83       	std	Z+2, r25	; 0x02
   1c1ba:	a3 83       	std	Z+3, r26	; 0x03
   1c1bc:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    sep();
   1c1c0:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c1c4:	0e 94 50 84 	call	0x108a0	; 0x108a0 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c1c8:	89 ed       	ldi	r24, 0xD9	; 217
   1c1ca:	93 e4       	ldi	r25, 0x43	; 67
   1c1cc:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ce:	ed b7       	in	r30, 0x3d	; 61
   1c1d0:	fe b7       	in	r31, 0x3e	; 62
   1c1d2:	81 83       	std	Z+1, r24	; 0x01
   1c1d4:	92 83       	std	Z+2, r25	; 0x02
   1c1d6:	a3 83       	std	Z+3, r26	; 0x03
   1c1d8:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c1dc:	0e 94 e4 ba 	call	0x175c8	; 0x175c8 <printer_init>
    printf("Printer initialized\n");
   1c1e0:	84 ec       	ldi	r24, 0xC4	; 196
   1c1e2:	93 e4       	ldi	r25, 0x43	; 67
   1c1e4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e6:	ed b7       	in	r30, 0x3d	; 61
   1c1e8:	fe b7       	in	r31, 0x3e	; 62
   1c1ea:	81 83       	std	Z+1, r24	; 0x01
   1c1ec:	92 83       	std	Z+2, r25	; 0x02
   1c1ee:	a3 83       	std	Z+3, r26	; 0x03
   1c1f0:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c1f4:	82 eb       	ldi	r24, 0xB2	; 178
   1c1f6:	93 e4       	ldi	r25, 0x43	; 67
   1c1f8:	a0 e0       	ldi	r26, 0x00	; 0
   1c1fa:	ed b7       	in	r30, 0x3d	; 61
   1c1fc:	fe b7       	in	r31, 0x3e	; 62
   1c1fe:	81 83       	std	Z+1, r24	; 0x01
   1c200:	92 83       	std	Z+2, r25	; 0x02
   1c202:	a3 83       	std	Z+3, r26	; 0x03
   1c204:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    gpib_timer_init();
   1c208:	0e 94 64 82 	call	0x104c8	; 0x104c8 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c20c:	8a e9       	ldi	r24, 0x9A	; 154
   1c20e:	93 e4       	ldi	r25, 0x43	; 67
   1c210:	a0 e0       	ldi	r26, 0x00	; 0
   1c212:	ed b7       	in	r30, 0x3d	; 61
   1c214:	fe b7       	in	r31, 0x3e	; 62
   1c216:	81 83       	std	Z+1, r24	; 0x01
   1c218:	92 83       	std	Z+2, r25	; 0x02
   1c21a:	a3 83       	std	Z+3, r26	; 0x03
   1c21c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c220:	0e 94 e7 8a 	call	0x115ce	; 0x115ce <gpib_file_init>
    printf("GPIB File init done\n");
   1c224:	85 e8       	ldi	r24, 0x85	; 133
   1c226:	93 e4       	ldi	r25, 0x43	; 67
   1c228:	a0 e0       	ldi	r26, 0x00	; 0
   1c22a:	ed b7       	in	r30, 0x3d	; 61
   1c22c:	fe b7       	in	r31, 0x3e	; 62
   1c22e:	81 83       	std	Z+1, r24	; 0x01
   1c230:	92 83       	std	Z+2, r25	; 0x02
   1c232:	a3 83       	std	Z+3, r26	; 0x03
   1c234:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c238:	0e 94 b8 84 	call	0x10970	; 0x10970 <gpib_state_init>
    printf("GPIB State init done\n");
   1c23c:	8f e6       	ldi	r24, 0x6F	; 111
   1c23e:	93 e4       	ldi	r25, 0x43	; 67
   1c240:	a0 e0       	ldi	r26, 0x00	; 0
   1c242:	ed b7       	in	r30, 0x3d	; 61
   1c244:	fe b7       	in	r31, 0x3e	; 62
   1c246:	81 83       	std	Z+1, r24	; 0x01
   1c248:	92 83       	std	Z+2, r25	; 0x02
   1c24a:	a3 83       	std	Z+3, r26	; 0x03
   1c24c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    sep();
   1c250:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c254:	80 e0       	ldi	r24, 0x00	; 0
   1c256:	90 e0       	ldi	r25, 0x00	; 0
   1c258:	0e 94 81 92 	call	0x12502	; 0x12502 <display_Addresses>
    sep();
   1c25c:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c260:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c264:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c268:	ed b7       	in	r30, 0x3d	; 61
   1c26a:	fe b7       	in	r31, 0x3e	; 62
   1c26c:	95 83       	std	Z+5, r25	; 0x05
   1c26e:	84 83       	std	Z+4, r24	; 0x04
   1c270:	89 e5       	ldi	r24, 0x59	; 89
   1c272:	93 e4       	ldi	r25, 0x43	; 67
   1c274:	a0 e0       	ldi	r26, 0x00	; 0
   1c276:	81 83       	std	Z+1, r24	; 0x01
   1c278:	92 83       	std	Z+2, r25	; 0x02
   1c27a:	a3 83       	std	Z+3, r26	; 0x03
   1c27c:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
    sep();
   1c280:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c284:	0e 94 19 9e 	call	0x13c32	; 0x13c32 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c288:	83 e0       	ldi	r24, 0x03	; 3
   1c28a:	0e 94 f6 95 	call	0x12bec	; 0x12bec <count_drive_types>
   1c28e:	8c 01       	movw	r16, r24
   1c290:	81 e0       	ldi	r24, 0x01	; 1
   1c292:	0e 94 f6 95 	call	0x12bec	; 0x12bec <count_drive_types>
   1c296:	ed b7       	in	r30, 0x3d	; 61
   1c298:	fe b7       	in	r31, 0x3e	; 62
   1c29a:	91 87       	std	Z+9, r25	; 0x09
   1c29c:	80 87       	std	Z+8, r24	; 0x08
   1c29e:	17 83       	std	Z+7, r17	; 0x07
   1c2a0:	06 83       	std	Z+6, r16	; 0x06
   1c2a2:	88 e4       	ldi	r24, 0x48	; 72
   1c2a4:	93 e4       	ldi	r25, 0x43	; 67
   1c2a6:	a0 e0       	ldi	r26, 0x00	; 0
   1c2a8:	83 83       	std	Z+3, r24	; 0x03
   1c2aa:	94 83       	std	Z+4, r25	; 0x04
   1c2ac:	a5 83       	std	Z+5, r26	; 0x05
   1c2ae:	8e 01       	movw	r16, r28
   1c2b0:	04 5f       	subi	r16, 0xF4	; 244
   1c2b2:	1f 4f       	sbci	r17, 0xFF	; 255
   1c2b4:	12 83       	std	Z+2, r17	; 0x02
   1c2b6:	01 83       	std	Z+1, r16	; 0x01
   1c2b8:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c2bc:	ed b7       	in	r30, 0x3d	; 61
   1c2be:	fe b7       	in	r31, 0x3e	; 62
   1c2c0:	17 83       	std	Z+7, r17	; 0x07
   1c2c2:	06 83       	std	Z+6, r16	; 0x06
   1c2c4:	82 e4       	ldi	r24, 0x42	; 66
   1c2c6:	93 e4       	ldi	r25, 0x43	; 67
   1c2c8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ca:	83 83       	std	Z+3, r24	; 0x03
   1c2cc:	94 83       	std	Z+4, r25	; 0x04
   1c2ce:	a5 83       	std	Z+5, r26	; 0x05
   1c2d0:	8c e0       	ldi	r24, 0x0C	; 12
   1c2d2:	93 e0       	ldi	r25, 0x03	; 3
   1c2d4:	92 83       	std	Z+2, r25	; 0x02
   1c2d6:	81 83       	std	Z+1, r24	; 0x01
   1c2d8:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c2dc:	8f e0       	ldi	r24, 0x0F	; 15
   1c2de:	97 e1       	ldi	r25, 0x17	; 23
   1c2e0:	ed b7       	in	r30, 0x3d	; 61
   1c2e2:	fe b7       	in	r31, 0x3e	; 62
   1c2e4:	97 83       	std	Z+7, r25	; 0x07
   1c2e6:	86 83       	std	Z+6, r24	; 0x06
   1c2e8:	8c e3       	ldi	r24, 0x3C	; 60
   1c2ea:	93 e4       	ldi	r25, 0x43	; 67
   1c2ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ee:	83 83       	std	Z+3, r24	; 0x03
   1c2f0:	94 83       	std	Z+4, r25	; 0x04
   1c2f2:	a5 83       	std	Z+5, r26	; 0x05
   1c2f4:	85 ef       	ldi	r24, 0xF5	; 245
   1c2f6:	92 e0       	ldi	r25, 0x02	; 2
   1c2f8:	92 83       	std	Z+2, r25	; 0x02
   1c2fa:	81 83       	std	Z+1, r24	; 0x01
   1c2fc:	0e 94 99 44 	call	0x8932	; 0x8932 <sprintf_P>

	i2c_task_run();
   1c300:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <i2c_task_run>
	delayms(1000);
   1c304:	68 ee       	ldi	r22, 0xE8	; 232
   1c306:	73 e0       	ldi	r23, 0x03	; 3
   1c308:	80 e0       	ldi	r24, 0x00	; 0
   1c30a:	90 e0       	ldi	r25, 0x00	; 0
   1c30c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c310:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <i2c_task+0x2>
   1c314:	88 23       	and	r24, r24
   1c316:	21 f0       	breq	.+8      	; 0x1c320 <main+0x384>
   1c318:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <i2c_task+0x3>
   1c31c:	88 23       	and	r24, r24
   1c31e:	61 f0       	breq	.+24     	; 0x1c338 <main+0x39c>
	{
		i2c_display_task_errors();
   1c320:	0e 94 c8 2c 	call	0x5990	; 0x5990 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c324:	82 e2       	ldi	r24, 0x22	; 34
   1c326:	93 e4       	ldi	r25, 0x43	; 67
   1c328:	a0 e0       	ldi	r26, 0x00	; 0
   1c32a:	ed b7       	in	r30, 0x3d	; 61
   1c32c:	fe b7       	in	r31, 0x3e	; 62
   1c32e:	81 83       	std	Z+1, r24	; 0x01
   1c330:	92 83       	std	Z+2, r25	; 0x02
   1c332:	a3 83       	std	Z+3, r26	; 0x03
   1c334:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c338:	8e e0       	ldi	r24, 0x0E	; 14
   1c33a:	93 e4       	ldi	r25, 0x43	; 67
   1c33c:	a0 e0       	ldi	r26, 0x00	; 0
   1c33e:	ed b7       	in	r30, 0x3d	; 61
   1c340:	fe b7       	in	r31, 0x3e	; 62
   1c342:	81 83       	std	Z+1, r24	; 0x01
   1c344:	92 83       	std	Z+2, r25	; 0x02
   1c346:	a3 83       	std	Z+3, r26	; 0x03
   1c348:	0e 94 ad 44 	call	0x895a	; 0x895a <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c34c:	81 e0       	ldi	r24, 0x01	; 1
   1c34e:	1c de       	rcall	.-968    	; 0x1bf88 <user_task>
   1c350:	fd cf       	rjmp	.-6      	; 0x1c34c <main+0x3b0>

0001c352 <__mulsi3>:
   1c352:	db 01       	movw	r26, r22
   1c354:	8f 93       	push	r24
   1c356:	9f 93       	push	r25
   1c358:	8b d0       	rcall	.+278    	; 0x1c470 <__muluhisi3>
   1c35a:	bf 91       	pop	r27
   1c35c:	af 91       	pop	r26
   1c35e:	a2 9f       	mul	r26, r18
   1c360:	80 0d       	add	r24, r0
   1c362:	91 1d       	adc	r25, r1
   1c364:	a3 9f       	mul	r26, r19
   1c366:	90 0d       	add	r25, r0
   1c368:	b2 9f       	mul	r27, r18
   1c36a:	90 0d       	add	r25, r0
   1c36c:	11 24       	eor	r1, r1
   1c36e:	08 95       	ret

0001c370 <__udivmodqi4>:
   1c370:	99 1b       	sub	r25, r25
   1c372:	79 e0       	ldi	r23, 0x09	; 9
   1c374:	04 c0       	rjmp	.+8      	; 0x1c37e <__udivmodqi4_ep>

0001c376 <__udivmodqi4_loop>:
   1c376:	99 1f       	adc	r25, r25
   1c378:	96 17       	cp	r25, r22
   1c37a:	08 f0       	brcs	.+2      	; 0x1c37e <__udivmodqi4_ep>
   1c37c:	96 1b       	sub	r25, r22

0001c37e <__udivmodqi4_ep>:
   1c37e:	88 1f       	adc	r24, r24
   1c380:	7a 95       	dec	r23
   1c382:	c9 f7       	brne	.-14     	; 0x1c376 <__udivmodqi4_loop>
   1c384:	80 95       	com	r24
   1c386:	08 95       	ret

0001c388 <__udivmodhi4>:
   1c388:	aa 1b       	sub	r26, r26
   1c38a:	bb 1b       	sub	r27, r27
   1c38c:	51 e1       	ldi	r21, 0x11	; 17
   1c38e:	07 c0       	rjmp	.+14     	; 0x1c39e <__udivmodhi4_ep>

0001c390 <__udivmodhi4_loop>:
   1c390:	aa 1f       	adc	r26, r26
   1c392:	bb 1f       	adc	r27, r27
   1c394:	a6 17       	cp	r26, r22
   1c396:	b7 07       	cpc	r27, r23
   1c398:	10 f0       	brcs	.+4      	; 0x1c39e <__udivmodhi4_ep>
   1c39a:	a6 1b       	sub	r26, r22
   1c39c:	b7 0b       	sbc	r27, r23

0001c39e <__udivmodhi4_ep>:
   1c39e:	88 1f       	adc	r24, r24
   1c3a0:	99 1f       	adc	r25, r25
   1c3a2:	5a 95       	dec	r21
   1c3a4:	a9 f7       	brne	.-22     	; 0x1c390 <__udivmodhi4_loop>
   1c3a6:	80 95       	com	r24
   1c3a8:	90 95       	com	r25
   1c3aa:	bc 01       	movw	r22, r24
   1c3ac:	cd 01       	movw	r24, r26
   1c3ae:	08 95       	ret

0001c3b0 <__divmodhi4>:
   1c3b0:	97 fb       	bst	r25, 7
   1c3b2:	07 2e       	mov	r0, r23
   1c3b4:	16 f4       	brtc	.+4      	; 0x1c3ba <__divmodhi4+0xa>
   1c3b6:	00 94       	com	r0
   1c3b8:	06 d0       	rcall	.+12     	; 0x1c3c6 <__divmodhi4_neg1>
   1c3ba:	77 fd       	sbrc	r23, 7
   1c3bc:	08 d0       	rcall	.+16     	; 0x1c3ce <__divmodhi4_neg2>
   1c3be:	e4 df       	rcall	.-56     	; 0x1c388 <__udivmodhi4>
   1c3c0:	07 fc       	sbrc	r0, 7
   1c3c2:	05 d0       	rcall	.+10     	; 0x1c3ce <__divmodhi4_neg2>
   1c3c4:	3e f4       	brtc	.+14     	; 0x1c3d4 <__divmodhi4_exit>

0001c3c6 <__divmodhi4_neg1>:
   1c3c6:	90 95       	com	r25
   1c3c8:	81 95       	neg	r24
   1c3ca:	9f 4f       	sbci	r25, 0xFF	; 255
   1c3cc:	08 95       	ret

0001c3ce <__divmodhi4_neg2>:
   1c3ce:	70 95       	com	r23
   1c3d0:	61 95       	neg	r22
   1c3d2:	7f 4f       	sbci	r23, 0xFF	; 255

0001c3d4 <__divmodhi4_exit>:
   1c3d4:	08 95       	ret

0001c3d6 <__udivmodsi4>:
   1c3d6:	a1 e2       	ldi	r26, 0x21	; 33
   1c3d8:	1a 2e       	mov	r1, r26
   1c3da:	aa 1b       	sub	r26, r26
   1c3dc:	bb 1b       	sub	r27, r27
   1c3de:	fd 01       	movw	r30, r26
   1c3e0:	0d c0       	rjmp	.+26     	; 0x1c3fc <__udivmodsi4_ep>

0001c3e2 <__udivmodsi4_loop>:
   1c3e2:	aa 1f       	adc	r26, r26
   1c3e4:	bb 1f       	adc	r27, r27
   1c3e6:	ee 1f       	adc	r30, r30
   1c3e8:	ff 1f       	adc	r31, r31
   1c3ea:	a2 17       	cp	r26, r18
   1c3ec:	b3 07       	cpc	r27, r19
   1c3ee:	e4 07       	cpc	r30, r20
   1c3f0:	f5 07       	cpc	r31, r21
   1c3f2:	20 f0       	brcs	.+8      	; 0x1c3fc <__udivmodsi4_ep>
   1c3f4:	a2 1b       	sub	r26, r18
   1c3f6:	b3 0b       	sbc	r27, r19
   1c3f8:	e4 0b       	sbc	r30, r20
   1c3fa:	f5 0b       	sbc	r31, r21

0001c3fc <__udivmodsi4_ep>:
   1c3fc:	66 1f       	adc	r22, r22
   1c3fe:	77 1f       	adc	r23, r23
   1c400:	88 1f       	adc	r24, r24
   1c402:	99 1f       	adc	r25, r25
   1c404:	1a 94       	dec	r1
   1c406:	69 f7       	brne	.-38     	; 0x1c3e2 <__udivmodsi4_loop>
   1c408:	60 95       	com	r22
   1c40a:	70 95       	com	r23
   1c40c:	80 95       	com	r24
   1c40e:	90 95       	com	r25
   1c410:	9b 01       	movw	r18, r22
   1c412:	ac 01       	movw	r20, r24
   1c414:	bd 01       	movw	r22, r26
   1c416:	cf 01       	movw	r24, r30
   1c418:	08 95       	ret

0001c41a <__divmodsi4>:
   1c41a:	05 2e       	mov	r0, r21
   1c41c:	97 fb       	bst	r25, 7
   1c41e:	16 f4       	brtc	.+4      	; 0x1c424 <__divmodsi4+0xa>
   1c420:	00 94       	com	r0
   1c422:	0f d0       	rcall	.+30     	; 0x1c442 <__negsi2>
   1c424:	57 fd       	sbrc	r21, 7
   1c426:	05 d0       	rcall	.+10     	; 0x1c432 <__divmodsi4_neg2>
   1c428:	d6 df       	rcall	.-84     	; 0x1c3d6 <__udivmodsi4>
   1c42a:	07 fc       	sbrc	r0, 7
   1c42c:	02 d0       	rcall	.+4      	; 0x1c432 <__divmodsi4_neg2>
   1c42e:	46 f4       	brtc	.+16     	; 0x1c440 <__divmodsi4_exit>
   1c430:	08 c0       	rjmp	.+16     	; 0x1c442 <__negsi2>

0001c432 <__divmodsi4_neg2>:
   1c432:	50 95       	com	r21
   1c434:	40 95       	com	r20
   1c436:	30 95       	com	r19
   1c438:	21 95       	neg	r18
   1c43a:	3f 4f       	sbci	r19, 0xFF	; 255
   1c43c:	4f 4f       	sbci	r20, 0xFF	; 255
   1c43e:	5f 4f       	sbci	r21, 0xFF	; 255

0001c440 <__divmodsi4_exit>:
   1c440:	08 95       	ret

0001c442 <__negsi2>:
   1c442:	90 95       	com	r25
   1c444:	80 95       	com	r24
   1c446:	70 95       	com	r23
   1c448:	61 95       	neg	r22
   1c44a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c44c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c44e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c450:	08 95       	ret

0001c452 <__tablejump2__>:
   1c452:	ee 0f       	add	r30, r30
   1c454:	ff 1f       	adc	r31, r31
   1c456:	00 24       	eor	r0, r0
   1c458:	00 1c       	adc	r0, r0
   1c45a:	0b be       	out	0x3b, r0	; 59
   1c45c:	07 90       	elpm	r0, Z+
   1c45e:	f6 91       	elpm	r31, Z
   1c460:	e0 2d       	mov	r30, r0
   1c462:	09 94       	ijmp

0001c464 <__usmulhisi3>:
   1c464:	6f d0       	rcall	.+222    	; 0x1c544 <__umulhisi3>

0001c466 <__usmulhisi3_tail>:
   1c466:	b7 ff       	sbrs	r27, 7
   1c468:	08 95       	ret
   1c46a:	82 1b       	sub	r24, r18
   1c46c:	93 0b       	sbc	r25, r19
   1c46e:	08 95       	ret

0001c470 <__muluhisi3>:
   1c470:	69 d0       	rcall	.+210    	; 0x1c544 <__umulhisi3>
   1c472:	a5 9f       	mul	r26, r21
   1c474:	90 0d       	add	r25, r0
   1c476:	b4 9f       	mul	r27, r20
   1c478:	90 0d       	add	r25, r0
   1c47a:	a4 9f       	mul	r26, r20
   1c47c:	80 0d       	add	r24, r0
   1c47e:	91 1d       	adc	r25, r1
   1c480:	11 24       	eor	r1, r1
   1c482:	08 95       	ret

0001c484 <__mulshisi3>:
   1c484:	b7 ff       	sbrs	r27, 7
   1c486:	f4 cf       	rjmp	.-24     	; 0x1c470 <__muluhisi3>

0001c488 <__mulohisi3>:
   1c488:	f3 df       	rcall	.-26     	; 0x1c470 <__muluhisi3>
   1c48a:	82 1b       	sub	r24, r18
   1c48c:	93 0b       	sbc	r25, r19
   1c48e:	08 95       	ret

0001c490 <__negdi2>:
   1c490:	60 95       	com	r22
   1c492:	70 95       	com	r23
   1c494:	80 95       	com	r24
   1c496:	90 95       	com	r25
   1c498:	30 95       	com	r19
   1c49a:	40 95       	com	r20
   1c49c:	50 95       	com	r21
   1c49e:	21 95       	neg	r18
   1c4a0:	3f 4f       	sbci	r19, 0xFF	; 255
   1c4a2:	4f 4f       	sbci	r20, 0xFF	; 255
   1c4a4:	5f 4f       	sbci	r21, 0xFF	; 255
   1c4a6:	6f 4f       	sbci	r22, 0xFF	; 255
   1c4a8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4aa:	8f 4f       	sbci	r24, 0xFF	; 255
   1c4ac:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4ae:	08 95       	ret

0001c4b0 <__prologue_saves__>:
   1c4b0:	2f 92       	push	r2
   1c4b2:	3f 92       	push	r3
   1c4b4:	4f 92       	push	r4
   1c4b6:	5f 92       	push	r5
   1c4b8:	6f 92       	push	r6
   1c4ba:	7f 92       	push	r7
   1c4bc:	8f 92       	push	r8
   1c4be:	9f 92       	push	r9
   1c4c0:	af 92       	push	r10
   1c4c2:	bf 92       	push	r11
   1c4c4:	cf 92       	push	r12
   1c4c6:	df 92       	push	r13
   1c4c8:	ef 92       	push	r14
   1c4ca:	ff 92       	push	r15
   1c4cc:	0f 93       	push	r16
   1c4ce:	1f 93       	push	r17
   1c4d0:	cf 93       	push	r28
   1c4d2:	df 93       	push	r29
   1c4d4:	cd b7       	in	r28, 0x3d	; 61
   1c4d6:	de b7       	in	r29, 0x3e	; 62
   1c4d8:	ca 1b       	sub	r28, r26
   1c4da:	db 0b       	sbc	r29, r27
   1c4dc:	0f b6       	in	r0, 0x3f	; 63
   1c4de:	f8 94       	cli
   1c4e0:	de bf       	out	0x3e, r29	; 62
   1c4e2:	0f be       	out	0x3f, r0	; 63
   1c4e4:	cd bf       	out	0x3d, r28	; 61
   1c4e6:	09 94       	ijmp

0001c4e8 <__epilogue_restores__>:
   1c4e8:	2a 88       	ldd	r2, Y+18	; 0x12
   1c4ea:	39 88       	ldd	r3, Y+17	; 0x11
   1c4ec:	48 88       	ldd	r4, Y+16	; 0x10
   1c4ee:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c4f0:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c4f2:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c4f4:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c4f6:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c4f8:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c4fa:	b9 84       	ldd	r11, Y+9	; 0x09
   1c4fc:	c8 84       	ldd	r12, Y+8	; 0x08
   1c4fe:	df 80       	ldd	r13, Y+7	; 0x07
   1c500:	ee 80       	ldd	r14, Y+6	; 0x06
   1c502:	fd 80       	ldd	r15, Y+5	; 0x05
   1c504:	0c 81       	ldd	r16, Y+4	; 0x04
   1c506:	1b 81       	ldd	r17, Y+3	; 0x03
   1c508:	aa 81       	ldd	r26, Y+2	; 0x02
   1c50a:	b9 81       	ldd	r27, Y+1	; 0x01
   1c50c:	ce 0f       	add	r28, r30
   1c50e:	d1 1d       	adc	r29, r1
   1c510:	0f b6       	in	r0, 0x3f	; 63
   1c512:	f8 94       	cli
   1c514:	de bf       	out	0x3e, r29	; 62
   1c516:	0f be       	out	0x3f, r0	; 63
   1c518:	cd bf       	out	0x3d, r28	; 61
   1c51a:	ed 01       	movw	r28, r26
   1c51c:	08 95       	ret

0001c51e <__xload_1>:
   1c51e:	57 fd       	sbrc	r21, 7
   1c520:	03 c0       	rjmp	.+6      	; 0x1c528 <__xload_1+0xa>
   1c522:	5b bf       	out	0x3b, r21	; 59
   1c524:	67 91       	elpm	r22, Z+
   1c526:	08 95       	ret
   1c528:	60 81       	ld	r22, Z
   1c52a:	08 95       	ret

0001c52c <__cmpdi2_s8>:
   1c52c:	00 24       	eor	r0, r0
   1c52e:	a7 fd       	sbrc	r26, 7
   1c530:	00 94       	com	r0
   1c532:	2a 17       	cp	r18, r26
   1c534:	30 05       	cpc	r19, r0
   1c536:	40 05       	cpc	r20, r0
   1c538:	50 05       	cpc	r21, r0
   1c53a:	60 05       	cpc	r22, r0
   1c53c:	70 05       	cpc	r23, r0
   1c53e:	80 05       	cpc	r24, r0
   1c540:	90 05       	cpc	r25, r0
   1c542:	08 95       	ret

0001c544 <__umulhisi3>:
   1c544:	a2 9f       	mul	r26, r18
   1c546:	b0 01       	movw	r22, r0
   1c548:	b3 9f       	mul	r27, r19
   1c54a:	c0 01       	movw	r24, r0
   1c54c:	a3 9f       	mul	r26, r19
   1c54e:	70 0d       	add	r23, r0
   1c550:	81 1d       	adc	r24, r1
   1c552:	11 24       	eor	r1, r1
   1c554:	91 1d       	adc	r25, r1
   1c556:	b2 9f       	mul	r27, r18
   1c558:	70 0d       	add	r23, r0
   1c55a:	81 1d       	adc	r24, r1
   1c55c:	11 24       	eor	r1, r1
   1c55e:	91 1d       	adc	r25, r1
   1c560:	08 95       	ret

0001c562 <__subsf3>:
   1c562:	50 58       	subi	r21, 0x80	; 128

0001c564 <__addsf3>:
   1c564:	bb 27       	eor	r27, r27
   1c566:	aa 27       	eor	r26, r26
   1c568:	0e d0       	rcall	.+28     	; 0x1c586 <__addsf3x>
   1c56a:	75 c1       	rjmp	.+746    	; 0x1c856 <__fp_round>
   1c56c:	66 d1       	rcall	.+716    	; 0x1c83a <__fp_pscA>
   1c56e:	30 f0       	brcs	.+12     	; 0x1c57c <__addsf3+0x18>
   1c570:	6b d1       	rcall	.+726    	; 0x1c848 <__fp_pscB>
   1c572:	20 f0       	brcs	.+8      	; 0x1c57c <__addsf3+0x18>
   1c574:	31 f4       	brne	.+12     	; 0x1c582 <__addsf3+0x1e>
   1c576:	9f 3f       	cpi	r25, 0xFF	; 255
   1c578:	11 f4       	brne	.+4      	; 0x1c57e <__addsf3+0x1a>
   1c57a:	1e f4       	brtc	.+6      	; 0x1c582 <__addsf3+0x1e>
   1c57c:	5b c1       	rjmp	.+694    	; 0x1c834 <__fp_nan>
   1c57e:	0e f4       	brtc	.+2      	; 0x1c582 <__addsf3+0x1e>
   1c580:	e0 95       	com	r30
   1c582:	e7 fb       	bst	r30, 7
   1c584:	51 c1       	rjmp	.+674    	; 0x1c828 <__fp_inf>

0001c586 <__addsf3x>:
   1c586:	e9 2f       	mov	r30, r25
   1c588:	77 d1       	rcall	.+750    	; 0x1c878 <__fp_split3>
   1c58a:	80 f3       	brcs	.-32     	; 0x1c56c <__addsf3+0x8>
   1c58c:	ba 17       	cp	r27, r26
   1c58e:	62 07       	cpc	r22, r18
   1c590:	73 07       	cpc	r23, r19
   1c592:	84 07       	cpc	r24, r20
   1c594:	95 07       	cpc	r25, r21
   1c596:	18 f0       	brcs	.+6      	; 0x1c59e <__addsf3x+0x18>
   1c598:	71 f4       	brne	.+28     	; 0x1c5b6 <__addsf3x+0x30>
   1c59a:	9e f5       	brtc	.+102    	; 0x1c602 <__addsf3x+0x7c>
   1c59c:	8f c1       	rjmp	.+798    	; 0x1c8bc <__fp_zero>
   1c59e:	0e f4       	brtc	.+2      	; 0x1c5a2 <__addsf3x+0x1c>
   1c5a0:	e0 95       	com	r30
   1c5a2:	0b 2e       	mov	r0, r27
   1c5a4:	ba 2f       	mov	r27, r26
   1c5a6:	a0 2d       	mov	r26, r0
   1c5a8:	0b 01       	movw	r0, r22
   1c5aa:	b9 01       	movw	r22, r18
   1c5ac:	90 01       	movw	r18, r0
   1c5ae:	0c 01       	movw	r0, r24
   1c5b0:	ca 01       	movw	r24, r20
   1c5b2:	a0 01       	movw	r20, r0
   1c5b4:	11 24       	eor	r1, r1
   1c5b6:	ff 27       	eor	r31, r31
   1c5b8:	59 1b       	sub	r21, r25
   1c5ba:	99 f0       	breq	.+38     	; 0x1c5e2 <__addsf3x+0x5c>
   1c5bc:	59 3f       	cpi	r21, 0xF9	; 249
   1c5be:	50 f4       	brcc	.+20     	; 0x1c5d4 <__addsf3x+0x4e>
   1c5c0:	50 3e       	cpi	r21, 0xE0	; 224
   1c5c2:	68 f1       	brcs	.+90     	; 0x1c61e <__addsf3x+0x98>
   1c5c4:	1a 16       	cp	r1, r26
   1c5c6:	f0 40       	sbci	r31, 0x00	; 0
   1c5c8:	a2 2f       	mov	r26, r18
   1c5ca:	23 2f       	mov	r18, r19
   1c5cc:	34 2f       	mov	r19, r20
   1c5ce:	44 27       	eor	r20, r20
   1c5d0:	58 5f       	subi	r21, 0xF8	; 248
   1c5d2:	f3 cf       	rjmp	.-26     	; 0x1c5ba <__addsf3x+0x34>
   1c5d4:	46 95       	lsr	r20
   1c5d6:	37 95       	ror	r19
   1c5d8:	27 95       	ror	r18
   1c5da:	a7 95       	ror	r26
   1c5dc:	f0 40       	sbci	r31, 0x00	; 0
   1c5de:	53 95       	inc	r21
   1c5e0:	c9 f7       	brne	.-14     	; 0x1c5d4 <__addsf3x+0x4e>
   1c5e2:	7e f4       	brtc	.+30     	; 0x1c602 <__addsf3x+0x7c>
   1c5e4:	1f 16       	cp	r1, r31
   1c5e6:	ba 0b       	sbc	r27, r26
   1c5e8:	62 0b       	sbc	r22, r18
   1c5ea:	73 0b       	sbc	r23, r19
   1c5ec:	84 0b       	sbc	r24, r20
   1c5ee:	ba f0       	brmi	.+46     	; 0x1c61e <__addsf3x+0x98>
   1c5f0:	91 50       	subi	r25, 0x01	; 1
   1c5f2:	a1 f0       	breq	.+40     	; 0x1c61c <__addsf3x+0x96>
   1c5f4:	ff 0f       	add	r31, r31
   1c5f6:	bb 1f       	adc	r27, r27
   1c5f8:	66 1f       	adc	r22, r22
   1c5fa:	77 1f       	adc	r23, r23
   1c5fc:	88 1f       	adc	r24, r24
   1c5fe:	c2 f7       	brpl	.-16     	; 0x1c5f0 <__addsf3x+0x6a>
   1c600:	0e c0       	rjmp	.+28     	; 0x1c61e <__addsf3x+0x98>
   1c602:	ba 0f       	add	r27, r26
   1c604:	62 1f       	adc	r22, r18
   1c606:	73 1f       	adc	r23, r19
   1c608:	84 1f       	adc	r24, r20
   1c60a:	48 f4       	brcc	.+18     	; 0x1c61e <__addsf3x+0x98>
   1c60c:	87 95       	ror	r24
   1c60e:	77 95       	ror	r23
   1c610:	67 95       	ror	r22
   1c612:	b7 95       	ror	r27
   1c614:	f7 95       	ror	r31
   1c616:	9e 3f       	cpi	r25, 0xFE	; 254
   1c618:	08 f0       	brcs	.+2      	; 0x1c61c <__addsf3x+0x96>
   1c61a:	b3 cf       	rjmp	.-154    	; 0x1c582 <__addsf3+0x1e>
   1c61c:	93 95       	inc	r25
   1c61e:	88 0f       	add	r24, r24
   1c620:	08 f0       	brcs	.+2      	; 0x1c624 <__addsf3x+0x9e>
   1c622:	99 27       	eor	r25, r25
   1c624:	ee 0f       	add	r30, r30
   1c626:	97 95       	ror	r25
   1c628:	87 95       	ror	r24
   1c62a:	08 95       	ret

0001c62c <__cmpsf2>:
   1c62c:	d9 d0       	rcall	.+434    	; 0x1c7e0 <__fp_cmp>
   1c62e:	08 f4       	brcc	.+2      	; 0x1c632 <__cmpsf2+0x6>
   1c630:	81 e0       	ldi	r24, 0x01	; 1
   1c632:	08 95       	ret

0001c634 <__divsf3>:
   1c634:	0c d0       	rcall	.+24     	; 0x1c64e <__divsf3x>
   1c636:	0f c1       	rjmp	.+542    	; 0x1c856 <__fp_round>
   1c638:	07 d1       	rcall	.+526    	; 0x1c848 <__fp_pscB>
   1c63a:	40 f0       	brcs	.+16     	; 0x1c64c <__divsf3+0x18>
   1c63c:	fe d0       	rcall	.+508    	; 0x1c83a <__fp_pscA>
   1c63e:	30 f0       	brcs	.+12     	; 0x1c64c <__divsf3+0x18>
   1c640:	21 f4       	brne	.+8      	; 0x1c64a <__divsf3+0x16>
   1c642:	5f 3f       	cpi	r21, 0xFF	; 255
   1c644:	19 f0       	breq	.+6      	; 0x1c64c <__divsf3+0x18>
   1c646:	f0 c0       	rjmp	.+480    	; 0x1c828 <__fp_inf>
   1c648:	51 11       	cpse	r21, r1
   1c64a:	39 c1       	rjmp	.+626    	; 0x1c8be <__fp_szero>
   1c64c:	f3 c0       	rjmp	.+486    	; 0x1c834 <__fp_nan>

0001c64e <__divsf3x>:
   1c64e:	14 d1       	rcall	.+552    	; 0x1c878 <__fp_split3>
   1c650:	98 f3       	brcs	.-26     	; 0x1c638 <__divsf3+0x4>

0001c652 <__divsf3_pse>:
   1c652:	99 23       	and	r25, r25
   1c654:	c9 f3       	breq	.-14     	; 0x1c648 <__divsf3+0x14>
   1c656:	55 23       	and	r21, r21
   1c658:	b1 f3       	breq	.-20     	; 0x1c646 <__divsf3+0x12>
   1c65a:	95 1b       	sub	r25, r21
   1c65c:	55 0b       	sbc	r21, r21
   1c65e:	bb 27       	eor	r27, r27
   1c660:	aa 27       	eor	r26, r26
   1c662:	62 17       	cp	r22, r18
   1c664:	73 07       	cpc	r23, r19
   1c666:	84 07       	cpc	r24, r20
   1c668:	38 f0       	brcs	.+14     	; 0x1c678 <__divsf3_pse+0x26>
   1c66a:	9f 5f       	subi	r25, 0xFF	; 255
   1c66c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c66e:	22 0f       	add	r18, r18
   1c670:	33 1f       	adc	r19, r19
   1c672:	44 1f       	adc	r20, r20
   1c674:	aa 1f       	adc	r26, r26
   1c676:	a9 f3       	breq	.-22     	; 0x1c662 <__divsf3_pse+0x10>
   1c678:	33 d0       	rcall	.+102    	; 0x1c6e0 <__divsf3_pse+0x8e>
   1c67a:	0e 2e       	mov	r0, r30
   1c67c:	3a f0       	brmi	.+14     	; 0x1c68c <__divsf3_pse+0x3a>
   1c67e:	e0 e8       	ldi	r30, 0x80	; 128
   1c680:	30 d0       	rcall	.+96     	; 0x1c6e2 <__divsf3_pse+0x90>
   1c682:	91 50       	subi	r25, 0x01	; 1
   1c684:	50 40       	sbci	r21, 0x00	; 0
   1c686:	e6 95       	lsr	r30
   1c688:	00 1c       	adc	r0, r0
   1c68a:	ca f7       	brpl	.-14     	; 0x1c67e <__divsf3_pse+0x2c>
   1c68c:	29 d0       	rcall	.+82     	; 0x1c6e0 <__divsf3_pse+0x8e>
   1c68e:	fe 2f       	mov	r31, r30
   1c690:	27 d0       	rcall	.+78     	; 0x1c6e0 <__divsf3_pse+0x8e>
   1c692:	66 0f       	add	r22, r22
   1c694:	77 1f       	adc	r23, r23
   1c696:	88 1f       	adc	r24, r24
   1c698:	bb 1f       	adc	r27, r27
   1c69a:	26 17       	cp	r18, r22
   1c69c:	37 07       	cpc	r19, r23
   1c69e:	48 07       	cpc	r20, r24
   1c6a0:	ab 07       	cpc	r26, r27
   1c6a2:	b0 e8       	ldi	r27, 0x80	; 128
   1c6a4:	09 f0       	breq	.+2      	; 0x1c6a8 <__divsf3_pse+0x56>
   1c6a6:	bb 0b       	sbc	r27, r27
   1c6a8:	80 2d       	mov	r24, r0
   1c6aa:	bf 01       	movw	r22, r30
   1c6ac:	ff 27       	eor	r31, r31
   1c6ae:	93 58       	subi	r25, 0x83	; 131
   1c6b0:	5f 4f       	sbci	r21, 0xFF	; 255
   1c6b2:	2a f0       	brmi	.+10     	; 0x1c6be <__divsf3_pse+0x6c>
   1c6b4:	9e 3f       	cpi	r25, 0xFE	; 254
   1c6b6:	51 05       	cpc	r21, r1
   1c6b8:	68 f0       	brcs	.+26     	; 0x1c6d4 <__divsf3_pse+0x82>
   1c6ba:	b6 c0       	rjmp	.+364    	; 0x1c828 <__fp_inf>
   1c6bc:	00 c1       	rjmp	.+512    	; 0x1c8be <__fp_szero>
   1c6be:	5f 3f       	cpi	r21, 0xFF	; 255
   1c6c0:	ec f3       	brlt	.-6      	; 0x1c6bc <__divsf3_pse+0x6a>
   1c6c2:	98 3e       	cpi	r25, 0xE8	; 232
   1c6c4:	dc f3       	brlt	.-10     	; 0x1c6bc <__divsf3_pse+0x6a>
   1c6c6:	86 95       	lsr	r24
   1c6c8:	77 95       	ror	r23
   1c6ca:	67 95       	ror	r22
   1c6cc:	b7 95       	ror	r27
   1c6ce:	f7 95       	ror	r31
   1c6d0:	9f 5f       	subi	r25, 0xFF	; 255
   1c6d2:	c9 f7       	brne	.-14     	; 0x1c6c6 <__divsf3_pse+0x74>
   1c6d4:	88 0f       	add	r24, r24
   1c6d6:	91 1d       	adc	r25, r1
   1c6d8:	96 95       	lsr	r25
   1c6da:	87 95       	ror	r24
   1c6dc:	97 f9       	bld	r25, 7
   1c6de:	08 95       	ret
   1c6e0:	e1 e0       	ldi	r30, 0x01	; 1
   1c6e2:	66 0f       	add	r22, r22
   1c6e4:	77 1f       	adc	r23, r23
   1c6e6:	88 1f       	adc	r24, r24
   1c6e8:	bb 1f       	adc	r27, r27
   1c6ea:	62 17       	cp	r22, r18
   1c6ec:	73 07       	cpc	r23, r19
   1c6ee:	84 07       	cpc	r24, r20
   1c6f0:	ba 07       	cpc	r27, r26
   1c6f2:	20 f0       	brcs	.+8      	; 0x1c6fc <__divsf3_pse+0xaa>
   1c6f4:	62 1b       	sub	r22, r18
   1c6f6:	73 0b       	sbc	r23, r19
   1c6f8:	84 0b       	sbc	r24, r20
   1c6fa:	ba 0b       	sbc	r27, r26
   1c6fc:	ee 1f       	adc	r30, r30
   1c6fe:	88 f7       	brcc	.-30     	; 0x1c6e2 <__divsf3_pse+0x90>
   1c700:	e0 95       	com	r30
   1c702:	08 95       	ret

0001c704 <__fixsfsi>:
   1c704:	04 d0       	rcall	.+8      	; 0x1c70e <__fixunssfsi>
   1c706:	68 94       	set
   1c708:	b1 11       	cpse	r27, r1
   1c70a:	d9 c0       	rjmp	.+434    	; 0x1c8be <__fp_szero>
   1c70c:	08 95       	ret

0001c70e <__fixunssfsi>:
   1c70e:	bc d0       	rcall	.+376    	; 0x1c888 <__fp_splitA>
   1c710:	88 f0       	brcs	.+34     	; 0x1c734 <__fixunssfsi+0x26>
   1c712:	9f 57       	subi	r25, 0x7F	; 127
   1c714:	90 f0       	brcs	.+36     	; 0x1c73a <__fixunssfsi+0x2c>
   1c716:	b9 2f       	mov	r27, r25
   1c718:	99 27       	eor	r25, r25
   1c71a:	b7 51       	subi	r27, 0x17	; 23
   1c71c:	a0 f0       	brcs	.+40     	; 0x1c746 <__fixunssfsi+0x38>
   1c71e:	d1 f0       	breq	.+52     	; 0x1c754 <__fixunssfsi+0x46>
   1c720:	66 0f       	add	r22, r22
   1c722:	77 1f       	adc	r23, r23
   1c724:	88 1f       	adc	r24, r24
   1c726:	99 1f       	adc	r25, r25
   1c728:	1a f0       	brmi	.+6      	; 0x1c730 <__fixunssfsi+0x22>
   1c72a:	ba 95       	dec	r27
   1c72c:	c9 f7       	brne	.-14     	; 0x1c720 <__fixunssfsi+0x12>
   1c72e:	12 c0       	rjmp	.+36     	; 0x1c754 <__fixunssfsi+0x46>
   1c730:	b1 30       	cpi	r27, 0x01	; 1
   1c732:	81 f0       	breq	.+32     	; 0x1c754 <__fixunssfsi+0x46>
   1c734:	c3 d0       	rcall	.+390    	; 0x1c8bc <__fp_zero>
   1c736:	b1 e0       	ldi	r27, 0x01	; 1
   1c738:	08 95       	ret
   1c73a:	c0 c0       	rjmp	.+384    	; 0x1c8bc <__fp_zero>
   1c73c:	67 2f       	mov	r22, r23
   1c73e:	78 2f       	mov	r23, r24
   1c740:	88 27       	eor	r24, r24
   1c742:	b8 5f       	subi	r27, 0xF8	; 248
   1c744:	39 f0       	breq	.+14     	; 0x1c754 <__fixunssfsi+0x46>
   1c746:	b9 3f       	cpi	r27, 0xF9	; 249
   1c748:	cc f3       	brlt	.-14     	; 0x1c73c <__fixunssfsi+0x2e>
   1c74a:	86 95       	lsr	r24
   1c74c:	77 95       	ror	r23
   1c74e:	67 95       	ror	r22
   1c750:	b3 95       	inc	r27
   1c752:	d9 f7       	brne	.-10     	; 0x1c74a <__fixunssfsi+0x3c>
   1c754:	3e f4       	brtc	.+14     	; 0x1c764 <__fixunssfsi+0x56>
   1c756:	90 95       	com	r25
   1c758:	80 95       	com	r24
   1c75a:	70 95       	com	r23
   1c75c:	61 95       	neg	r22
   1c75e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c760:	8f 4f       	sbci	r24, 0xFF	; 255
   1c762:	9f 4f       	sbci	r25, 0xFF	; 255
   1c764:	08 95       	ret

0001c766 <__floatunsisf>:
   1c766:	e8 94       	clt
   1c768:	09 c0       	rjmp	.+18     	; 0x1c77c <__floatsisf+0x12>

0001c76a <__floatsisf>:
   1c76a:	97 fb       	bst	r25, 7
   1c76c:	3e f4       	brtc	.+14     	; 0x1c77c <__floatsisf+0x12>
   1c76e:	90 95       	com	r25
   1c770:	80 95       	com	r24
   1c772:	70 95       	com	r23
   1c774:	61 95       	neg	r22
   1c776:	7f 4f       	sbci	r23, 0xFF	; 255
   1c778:	8f 4f       	sbci	r24, 0xFF	; 255
   1c77a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c77c:	99 23       	and	r25, r25
   1c77e:	a9 f0       	breq	.+42     	; 0x1c7aa <__floatsisf+0x40>
   1c780:	f9 2f       	mov	r31, r25
   1c782:	96 e9       	ldi	r25, 0x96	; 150
   1c784:	bb 27       	eor	r27, r27
   1c786:	93 95       	inc	r25
   1c788:	f6 95       	lsr	r31
   1c78a:	87 95       	ror	r24
   1c78c:	77 95       	ror	r23
   1c78e:	67 95       	ror	r22
   1c790:	b7 95       	ror	r27
   1c792:	f1 11       	cpse	r31, r1
   1c794:	f8 cf       	rjmp	.-16     	; 0x1c786 <__floatsisf+0x1c>
   1c796:	fa f4       	brpl	.+62     	; 0x1c7d6 <__floatsisf+0x6c>
   1c798:	bb 0f       	add	r27, r27
   1c79a:	11 f4       	brne	.+4      	; 0x1c7a0 <__floatsisf+0x36>
   1c79c:	60 ff       	sbrs	r22, 0
   1c79e:	1b c0       	rjmp	.+54     	; 0x1c7d6 <__floatsisf+0x6c>
   1c7a0:	6f 5f       	subi	r22, 0xFF	; 255
   1c7a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c7a4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c7a6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c7a8:	16 c0       	rjmp	.+44     	; 0x1c7d6 <__floatsisf+0x6c>
   1c7aa:	88 23       	and	r24, r24
   1c7ac:	11 f0       	breq	.+4      	; 0x1c7b2 <__floatsisf+0x48>
   1c7ae:	96 e9       	ldi	r25, 0x96	; 150
   1c7b0:	11 c0       	rjmp	.+34     	; 0x1c7d4 <__floatsisf+0x6a>
   1c7b2:	77 23       	and	r23, r23
   1c7b4:	21 f0       	breq	.+8      	; 0x1c7be <__floatsisf+0x54>
   1c7b6:	9e e8       	ldi	r25, 0x8E	; 142
   1c7b8:	87 2f       	mov	r24, r23
   1c7ba:	76 2f       	mov	r23, r22
   1c7bc:	05 c0       	rjmp	.+10     	; 0x1c7c8 <__floatsisf+0x5e>
   1c7be:	66 23       	and	r22, r22
   1c7c0:	71 f0       	breq	.+28     	; 0x1c7de <__floatsisf+0x74>
   1c7c2:	96 e8       	ldi	r25, 0x86	; 134
   1c7c4:	86 2f       	mov	r24, r22
   1c7c6:	70 e0       	ldi	r23, 0x00	; 0
   1c7c8:	60 e0       	ldi	r22, 0x00	; 0
   1c7ca:	2a f0       	brmi	.+10     	; 0x1c7d6 <__floatsisf+0x6c>
   1c7cc:	9a 95       	dec	r25
   1c7ce:	66 0f       	add	r22, r22
   1c7d0:	77 1f       	adc	r23, r23
   1c7d2:	88 1f       	adc	r24, r24
   1c7d4:	da f7       	brpl	.-10     	; 0x1c7cc <__floatsisf+0x62>
   1c7d6:	88 0f       	add	r24, r24
   1c7d8:	96 95       	lsr	r25
   1c7da:	87 95       	ror	r24
   1c7dc:	97 f9       	bld	r25, 7
   1c7de:	08 95       	ret

0001c7e0 <__fp_cmp>:
   1c7e0:	99 0f       	add	r25, r25
   1c7e2:	00 08       	sbc	r0, r0
   1c7e4:	55 0f       	add	r21, r21
   1c7e6:	aa 0b       	sbc	r26, r26
   1c7e8:	e0 e8       	ldi	r30, 0x80	; 128
   1c7ea:	fe ef       	ldi	r31, 0xFE	; 254
   1c7ec:	16 16       	cp	r1, r22
   1c7ee:	17 06       	cpc	r1, r23
   1c7f0:	e8 07       	cpc	r30, r24
   1c7f2:	f9 07       	cpc	r31, r25
   1c7f4:	c0 f0       	brcs	.+48     	; 0x1c826 <__fp_cmp+0x46>
   1c7f6:	12 16       	cp	r1, r18
   1c7f8:	13 06       	cpc	r1, r19
   1c7fa:	e4 07       	cpc	r30, r20
   1c7fc:	f5 07       	cpc	r31, r21
   1c7fe:	98 f0       	brcs	.+38     	; 0x1c826 <__fp_cmp+0x46>
   1c800:	62 1b       	sub	r22, r18
   1c802:	73 0b       	sbc	r23, r19
   1c804:	84 0b       	sbc	r24, r20
   1c806:	95 0b       	sbc	r25, r21
   1c808:	39 f4       	brne	.+14     	; 0x1c818 <__fp_cmp+0x38>
   1c80a:	0a 26       	eor	r0, r26
   1c80c:	61 f0       	breq	.+24     	; 0x1c826 <__fp_cmp+0x46>
   1c80e:	23 2b       	or	r18, r19
   1c810:	24 2b       	or	r18, r20
   1c812:	25 2b       	or	r18, r21
   1c814:	21 f4       	brne	.+8      	; 0x1c81e <__fp_cmp+0x3e>
   1c816:	08 95       	ret
   1c818:	0a 26       	eor	r0, r26
   1c81a:	09 f4       	brne	.+2      	; 0x1c81e <__fp_cmp+0x3e>
   1c81c:	a1 40       	sbci	r26, 0x01	; 1
   1c81e:	a6 95       	lsr	r26
   1c820:	8f ef       	ldi	r24, 0xFF	; 255
   1c822:	81 1d       	adc	r24, r1
   1c824:	81 1d       	adc	r24, r1
   1c826:	08 95       	ret

0001c828 <__fp_inf>:
   1c828:	97 f9       	bld	r25, 7
   1c82a:	9f 67       	ori	r25, 0x7F	; 127
   1c82c:	80 e8       	ldi	r24, 0x80	; 128
   1c82e:	70 e0       	ldi	r23, 0x00	; 0
   1c830:	60 e0       	ldi	r22, 0x00	; 0
   1c832:	08 95       	ret

0001c834 <__fp_nan>:
   1c834:	9f ef       	ldi	r25, 0xFF	; 255
   1c836:	80 ec       	ldi	r24, 0xC0	; 192
   1c838:	08 95       	ret

0001c83a <__fp_pscA>:
   1c83a:	00 24       	eor	r0, r0
   1c83c:	0a 94       	dec	r0
   1c83e:	16 16       	cp	r1, r22
   1c840:	17 06       	cpc	r1, r23
   1c842:	18 06       	cpc	r1, r24
   1c844:	09 06       	cpc	r0, r25
   1c846:	08 95       	ret

0001c848 <__fp_pscB>:
   1c848:	00 24       	eor	r0, r0
   1c84a:	0a 94       	dec	r0
   1c84c:	12 16       	cp	r1, r18
   1c84e:	13 06       	cpc	r1, r19
   1c850:	14 06       	cpc	r1, r20
   1c852:	05 06       	cpc	r0, r21
   1c854:	08 95       	ret

0001c856 <__fp_round>:
   1c856:	09 2e       	mov	r0, r25
   1c858:	03 94       	inc	r0
   1c85a:	00 0c       	add	r0, r0
   1c85c:	11 f4       	brne	.+4      	; 0x1c862 <__fp_round+0xc>
   1c85e:	88 23       	and	r24, r24
   1c860:	52 f0       	brmi	.+20     	; 0x1c876 <__fp_round+0x20>
   1c862:	bb 0f       	add	r27, r27
   1c864:	40 f4       	brcc	.+16     	; 0x1c876 <__fp_round+0x20>
   1c866:	bf 2b       	or	r27, r31
   1c868:	11 f4       	brne	.+4      	; 0x1c86e <__fp_round+0x18>
   1c86a:	60 ff       	sbrs	r22, 0
   1c86c:	04 c0       	rjmp	.+8      	; 0x1c876 <__fp_round+0x20>
   1c86e:	6f 5f       	subi	r22, 0xFF	; 255
   1c870:	7f 4f       	sbci	r23, 0xFF	; 255
   1c872:	8f 4f       	sbci	r24, 0xFF	; 255
   1c874:	9f 4f       	sbci	r25, 0xFF	; 255
   1c876:	08 95       	ret

0001c878 <__fp_split3>:
   1c878:	57 fd       	sbrc	r21, 7
   1c87a:	90 58       	subi	r25, 0x80	; 128
   1c87c:	44 0f       	add	r20, r20
   1c87e:	55 1f       	adc	r21, r21
   1c880:	59 f0       	breq	.+22     	; 0x1c898 <__fp_splitA+0x10>
   1c882:	5f 3f       	cpi	r21, 0xFF	; 255
   1c884:	71 f0       	breq	.+28     	; 0x1c8a2 <__fp_splitA+0x1a>
   1c886:	47 95       	ror	r20

0001c888 <__fp_splitA>:
   1c888:	88 0f       	add	r24, r24
   1c88a:	97 fb       	bst	r25, 7
   1c88c:	99 1f       	adc	r25, r25
   1c88e:	61 f0       	breq	.+24     	; 0x1c8a8 <__fp_splitA+0x20>
   1c890:	9f 3f       	cpi	r25, 0xFF	; 255
   1c892:	79 f0       	breq	.+30     	; 0x1c8b2 <__fp_splitA+0x2a>
   1c894:	87 95       	ror	r24
   1c896:	08 95       	ret
   1c898:	12 16       	cp	r1, r18
   1c89a:	13 06       	cpc	r1, r19
   1c89c:	14 06       	cpc	r1, r20
   1c89e:	55 1f       	adc	r21, r21
   1c8a0:	f2 cf       	rjmp	.-28     	; 0x1c886 <__fp_split3+0xe>
   1c8a2:	46 95       	lsr	r20
   1c8a4:	f1 df       	rcall	.-30     	; 0x1c888 <__fp_splitA>
   1c8a6:	08 c0       	rjmp	.+16     	; 0x1c8b8 <__fp_splitA+0x30>
   1c8a8:	16 16       	cp	r1, r22
   1c8aa:	17 06       	cpc	r1, r23
   1c8ac:	18 06       	cpc	r1, r24
   1c8ae:	99 1f       	adc	r25, r25
   1c8b0:	f1 cf       	rjmp	.-30     	; 0x1c894 <__fp_splitA+0xc>
   1c8b2:	86 95       	lsr	r24
   1c8b4:	71 05       	cpc	r23, r1
   1c8b6:	61 05       	cpc	r22, r1
   1c8b8:	08 94       	sec
   1c8ba:	08 95       	ret

0001c8bc <__fp_zero>:
   1c8bc:	e8 94       	clt

0001c8be <__fp_szero>:
   1c8be:	bb 27       	eor	r27, r27
   1c8c0:	66 27       	eor	r22, r22
   1c8c2:	77 27       	eor	r23, r23
   1c8c4:	cb 01       	movw	r24, r22
   1c8c6:	97 f9       	bld	r25, 7
   1c8c8:	08 95       	ret

0001c8ca <__gesf2>:
   1c8ca:	8a df       	rcall	.-236    	; 0x1c7e0 <__fp_cmp>
   1c8cc:	08 f4       	brcc	.+2      	; 0x1c8d0 <__gesf2+0x6>
   1c8ce:	8f ef       	ldi	r24, 0xFF	; 255
   1c8d0:	08 95       	ret

0001c8d2 <__mulsf3>:
   1c8d2:	0b d0       	rcall	.+22     	; 0x1c8ea <__mulsf3x>
   1c8d4:	c0 cf       	rjmp	.-128    	; 0x1c856 <__fp_round>
   1c8d6:	b1 df       	rcall	.-158    	; 0x1c83a <__fp_pscA>
   1c8d8:	28 f0       	brcs	.+10     	; 0x1c8e4 <__mulsf3+0x12>
   1c8da:	b6 df       	rcall	.-148    	; 0x1c848 <__fp_pscB>
   1c8dc:	18 f0       	brcs	.+6      	; 0x1c8e4 <__mulsf3+0x12>
   1c8de:	95 23       	and	r25, r21
   1c8e0:	09 f0       	breq	.+2      	; 0x1c8e4 <__mulsf3+0x12>
   1c8e2:	a2 cf       	rjmp	.-188    	; 0x1c828 <__fp_inf>
   1c8e4:	a7 cf       	rjmp	.-178    	; 0x1c834 <__fp_nan>
   1c8e6:	11 24       	eor	r1, r1
   1c8e8:	ea cf       	rjmp	.-44     	; 0x1c8be <__fp_szero>

0001c8ea <__mulsf3x>:
   1c8ea:	c6 df       	rcall	.-116    	; 0x1c878 <__fp_split3>
   1c8ec:	a0 f3       	brcs	.-24     	; 0x1c8d6 <__mulsf3+0x4>

0001c8ee <__mulsf3_pse>:
   1c8ee:	95 9f       	mul	r25, r21
   1c8f0:	d1 f3       	breq	.-12     	; 0x1c8e6 <__mulsf3+0x14>
   1c8f2:	95 0f       	add	r25, r21
   1c8f4:	50 e0       	ldi	r21, 0x00	; 0
   1c8f6:	55 1f       	adc	r21, r21
   1c8f8:	62 9f       	mul	r22, r18
   1c8fa:	f0 01       	movw	r30, r0
   1c8fc:	72 9f       	mul	r23, r18
   1c8fe:	bb 27       	eor	r27, r27
   1c900:	f0 0d       	add	r31, r0
   1c902:	b1 1d       	adc	r27, r1
   1c904:	63 9f       	mul	r22, r19
   1c906:	aa 27       	eor	r26, r26
   1c908:	f0 0d       	add	r31, r0
   1c90a:	b1 1d       	adc	r27, r1
   1c90c:	aa 1f       	adc	r26, r26
   1c90e:	64 9f       	mul	r22, r20
   1c910:	66 27       	eor	r22, r22
   1c912:	b0 0d       	add	r27, r0
   1c914:	a1 1d       	adc	r26, r1
   1c916:	66 1f       	adc	r22, r22
   1c918:	82 9f       	mul	r24, r18
   1c91a:	22 27       	eor	r18, r18
   1c91c:	b0 0d       	add	r27, r0
   1c91e:	a1 1d       	adc	r26, r1
   1c920:	62 1f       	adc	r22, r18
   1c922:	73 9f       	mul	r23, r19
   1c924:	b0 0d       	add	r27, r0
   1c926:	a1 1d       	adc	r26, r1
   1c928:	62 1f       	adc	r22, r18
   1c92a:	83 9f       	mul	r24, r19
   1c92c:	a0 0d       	add	r26, r0
   1c92e:	61 1d       	adc	r22, r1
   1c930:	22 1f       	adc	r18, r18
   1c932:	74 9f       	mul	r23, r20
   1c934:	33 27       	eor	r19, r19
   1c936:	a0 0d       	add	r26, r0
   1c938:	61 1d       	adc	r22, r1
   1c93a:	23 1f       	adc	r18, r19
   1c93c:	84 9f       	mul	r24, r20
   1c93e:	60 0d       	add	r22, r0
   1c940:	21 1d       	adc	r18, r1
   1c942:	82 2f       	mov	r24, r18
   1c944:	76 2f       	mov	r23, r22
   1c946:	6a 2f       	mov	r22, r26
   1c948:	11 24       	eor	r1, r1
   1c94a:	9f 57       	subi	r25, 0x7F	; 127
   1c94c:	50 40       	sbci	r21, 0x00	; 0
   1c94e:	8a f0       	brmi	.+34     	; 0x1c972 <__mulsf3_pse+0x84>
   1c950:	e1 f0       	breq	.+56     	; 0x1c98a <__mulsf3_pse+0x9c>
   1c952:	88 23       	and	r24, r24
   1c954:	4a f0       	brmi	.+18     	; 0x1c968 <__mulsf3_pse+0x7a>
   1c956:	ee 0f       	add	r30, r30
   1c958:	ff 1f       	adc	r31, r31
   1c95a:	bb 1f       	adc	r27, r27
   1c95c:	66 1f       	adc	r22, r22
   1c95e:	77 1f       	adc	r23, r23
   1c960:	88 1f       	adc	r24, r24
   1c962:	91 50       	subi	r25, 0x01	; 1
   1c964:	50 40       	sbci	r21, 0x00	; 0
   1c966:	a9 f7       	brne	.-22     	; 0x1c952 <__mulsf3_pse+0x64>
   1c968:	9e 3f       	cpi	r25, 0xFE	; 254
   1c96a:	51 05       	cpc	r21, r1
   1c96c:	70 f0       	brcs	.+28     	; 0x1c98a <__mulsf3_pse+0x9c>
   1c96e:	5c cf       	rjmp	.-328    	; 0x1c828 <__fp_inf>
   1c970:	a6 cf       	rjmp	.-180    	; 0x1c8be <__fp_szero>
   1c972:	5f 3f       	cpi	r21, 0xFF	; 255
   1c974:	ec f3       	brlt	.-6      	; 0x1c970 <__mulsf3_pse+0x82>
   1c976:	98 3e       	cpi	r25, 0xE8	; 232
   1c978:	dc f3       	brlt	.-10     	; 0x1c970 <__mulsf3_pse+0x82>
   1c97a:	86 95       	lsr	r24
   1c97c:	77 95       	ror	r23
   1c97e:	67 95       	ror	r22
   1c980:	b7 95       	ror	r27
   1c982:	f7 95       	ror	r31
   1c984:	e7 95       	ror	r30
   1c986:	9f 5f       	subi	r25, 0xFF	; 255
   1c988:	c1 f7       	brne	.-16     	; 0x1c97a <__mulsf3_pse+0x8c>
   1c98a:	fe 2b       	or	r31, r30
   1c98c:	88 0f       	add	r24, r24
   1c98e:	91 1d       	adc	r25, r1
   1c990:	96 95       	lsr	r25
   1c992:	87 95       	ror	r24
   1c994:	97 f9       	bld	r25, 7
   1c996:	08 95       	ret

0001c998 <round>:
   1c998:	77 df       	rcall	.-274    	; 0x1c888 <__fp_splitA>
   1c99a:	e0 f0       	brcs	.+56     	; 0x1c9d4 <round+0x3c>
   1c99c:	9e 37       	cpi	r25, 0x7E	; 126
   1c99e:	d8 f0       	brcs	.+54     	; 0x1c9d6 <round+0x3e>
   1c9a0:	96 39       	cpi	r25, 0x96	; 150
   1c9a2:	b8 f4       	brcc	.+46     	; 0x1c9d2 <round+0x3a>
   1c9a4:	9e 38       	cpi	r25, 0x8E	; 142
   1c9a6:	48 f4       	brcc	.+18     	; 0x1c9ba <round+0x22>
   1c9a8:	67 2f       	mov	r22, r23
   1c9aa:	78 2f       	mov	r23, r24
   1c9ac:	88 27       	eor	r24, r24
   1c9ae:	98 5f       	subi	r25, 0xF8	; 248
   1c9b0:	f9 cf       	rjmp	.-14     	; 0x1c9a4 <round+0xc>
   1c9b2:	86 95       	lsr	r24
   1c9b4:	77 95       	ror	r23
   1c9b6:	67 95       	ror	r22
   1c9b8:	93 95       	inc	r25
   1c9ba:	95 39       	cpi	r25, 0x95	; 149
   1c9bc:	d0 f3       	brcs	.-12     	; 0x1c9b2 <round+0x1a>
   1c9be:	b6 2f       	mov	r27, r22
   1c9c0:	b1 70       	andi	r27, 0x01	; 1
   1c9c2:	6b 0f       	add	r22, r27
   1c9c4:	71 1d       	adc	r23, r1
   1c9c6:	81 1d       	adc	r24, r1
   1c9c8:	20 f4       	brcc	.+8      	; 0x1c9d2 <round+0x3a>
   1c9ca:	87 95       	ror	r24
   1c9cc:	77 95       	ror	r23
   1c9ce:	67 95       	ror	r22
   1c9d0:	93 95       	inc	r25
   1c9d2:	02 c0       	rjmp	.+4      	; 0x1c9d8 <__fp_mintl>
   1c9d4:	1c c0       	rjmp	.+56     	; 0x1ca0e <__fp_mpack>
   1c9d6:	73 cf       	rjmp	.-282    	; 0x1c8be <__fp_szero>

0001c9d8 <__fp_mintl>:
   1c9d8:	88 23       	and	r24, r24
   1c9da:	71 f4       	brne	.+28     	; 0x1c9f8 <__fp_mintl+0x20>
   1c9dc:	77 23       	and	r23, r23
   1c9de:	21 f0       	breq	.+8      	; 0x1c9e8 <__fp_mintl+0x10>
   1c9e0:	98 50       	subi	r25, 0x08	; 8
   1c9e2:	87 2b       	or	r24, r23
   1c9e4:	76 2f       	mov	r23, r22
   1c9e6:	07 c0       	rjmp	.+14     	; 0x1c9f6 <__fp_mintl+0x1e>
   1c9e8:	66 23       	and	r22, r22
   1c9ea:	11 f4       	brne	.+4      	; 0x1c9f0 <__fp_mintl+0x18>
   1c9ec:	99 27       	eor	r25, r25
   1c9ee:	0d c0       	rjmp	.+26     	; 0x1ca0a <__fp_mintl+0x32>
   1c9f0:	90 51       	subi	r25, 0x10	; 16
   1c9f2:	86 2b       	or	r24, r22
   1c9f4:	70 e0       	ldi	r23, 0x00	; 0
   1c9f6:	60 e0       	ldi	r22, 0x00	; 0
   1c9f8:	2a f0       	brmi	.+10     	; 0x1ca04 <__fp_mintl+0x2c>
   1c9fa:	9a 95       	dec	r25
   1c9fc:	66 0f       	add	r22, r22
   1c9fe:	77 1f       	adc	r23, r23
   1ca00:	88 1f       	adc	r24, r24
   1ca02:	da f7       	brpl	.-10     	; 0x1c9fa <__fp_mintl+0x22>
   1ca04:	88 0f       	add	r24, r24
   1ca06:	96 95       	lsr	r25
   1ca08:	87 95       	ror	r24
   1ca0a:	97 f9       	bld	r25, 7
   1ca0c:	08 95       	ret

0001ca0e <__fp_mpack>:
   1ca0e:	9f 3f       	cpi	r25, 0xFF	; 255
   1ca10:	31 f0       	breq	.+12     	; 0x1ca1e <__fp_mpack_finite+0xc>

0001ca12 <__fp_mpack_finite>:
   1ca12:	91 50       	subi	r25, 0x01	; 1
   1ca14:	20 f4       	brcc	.+8      	; 0x1ca1e <__fp_mpack_finite+0xc>
   1ca16:	87 95       	ror	r24
   1ca18:	77 95       	ror	r23
   1ca1a:	67 95       	ror	r22
   1ca1c:	b7 95       	ror	r27
   1ca1e:	88 0f       	add	r24, r24
   1ca20:	91 1d       	adc	r25, r1
   1ca22:	96 95       	lsr	r25
   1ca24:	87 95       	ror	r24
   1ca26:	97 f9       	bld	r25, 7
   1ca28:	08 95       	ret

0001ca2a <calloc>:
   1ca2a:	0f 93       	push	r16
   1ca2c:	1f 93       	push	r17
   1ca2e:	cf 93       	push	r28
   1ca30:	df 93       	push	r29
   1ca32:	86 9f       	mul	r24, r22
   1ca34:	80 01       	movw	r16, r0
   1ca36:	87 9f       	mul	r24, r23
   1ca38:	10 0d       	add	r17, r0
   1ca3a:	96 9f       	mul	r25, r22
   1ca3c:	10 0d       	add	r17, r0
   1ca3e:	11 24       	eor	r1, r1
   1ca40:	c8 01       	movw	r24, r16
   1ca42:	0d d0       	rcall	.+26     	; 0x1ca5e <malloc>
   1ca44:	ec 01       	movw	r28, r24
   1ca46:	00 97       	sbiw	r24, 0x00	; 0
   1ca48:	21 f0       	breq	.+8      	; 0x1ca52 <calloc+0x28>
   1ca4a:	a8 01       	movw	r20, r16
   1ca4c:	60 e0       	ldi	r22, 0x00	; 0
   1ca4e:	70 e0       	ldi	r23, 0x00	; 0
   1ca50:	27 d1       	rcall	.+590    	; 0x1cca0 <memset>
   1ca52:	ce 01       	movw	r24, r28
   1ca54:	df 91       	pop	r29
   1ca56:	cf 91       	pop	r28
   1ca58:	1f 91       	pop	r17
   1ca5a:	0f 91       	pop	r16
   1ca5c:	08 95       	ret

0001ca5e <malloc>:
   1ca5e:	0f 93       	push	r16
   1ca60:	1f 93       	push	r17
   1ca62:	cf 93       	push	r28
   1ca64:	df 93       	push	r29
   1ca66:	82 30       	cpi	r24, 0x02	; 2
   1ca68:	91 05       	cpc	r25, r1
   1ca6a:	10 f4       	brcc	.+4      	; 0x1ca70 <malloc+0x12>
   1ca6c:	82 e0       	ldi	r24, 0x02	; 2
   1ca6e:	90 e0       	ldi	r25, 0x00	; 0
   1ca70:	e0 91 a4 21 	lds	r30, 0x21A4	; 0x8021a4 <__flp>
   1ca74:	f0 91 a5 21 	lds	r31, 0x21A5	; 0x8021a5 <__flp+0x1>
   1ca78:	20 e0       	ldi	r18, 0x00	; 0
   1ca7a:	30 e0       	ldi	r19, 0x00	; 0
   1ca7c:	a0 e0       	ldi	r26, 0x00	; 0
   1ca7e:	b0 e0       	ldi	r27, 0x00	; 0
   1ca80:	30 97       	sbiw	r30, 0x00	; 0
   1ca82:	19 f1       	breq	.+70     	; 0x1caca <malloc+0x6c>
   1ca84:	40 81       	ld	r20, Z
   1ca86:	51 81       	ldd	r21, Z+1	; 0x01
   1ca88:	02 81       	ldd	r16, Z+2	; 0x02
   1ca8a:	13 81       	ldd	r17, Z+3	; 0x03
   1ca8c:	48 17       	cp	r20, r24
   1ca8e:	59 07       	cpc	r21, r25
   1ca90:	c8 f0       	brcs	.+50     	; 0x1cac4 <malloc+0x66>
   1ca92:	84 17       	cp	r24, r20
   1ca94:	95 07       	cpc	r25, r21
   1ca96:	69 f4       	brne	.+26     	; 0x1cab2 <malloc+0x54>
   1ca98:	10 97       	sbiw	r26, 0x00	; 0
   1ca9a:	31 f0       	breq	.+12     	; 0x1caa8 <malloc+0x4a>
   1ca9c:	12 96       	adiw	r26, 0x02	; 2
   1ca9e:	0c 93       	st	X, r16
   1caa0:	12 97       	sbiw	r26, 0x02	; 2
   1caa2:	13 96       	adiw	r26, 0x03	; 3
   1caa4:	1c 93       	st	X, r17
   1caa6:	27 c0       	rjmp	.+78     	; 0x1caf6 <malloc+0x98>
   1caa8:	00 93 a4 21 	sts	0x21A4, r16	; 0x8021a4 <__flp>
   1caac:	10 93 a5 21 	sts	0x21A5, r17	; 0x8021a5 <__flp+0x1>
   1cab0:	22 c0       	rjmp	.+68     	; 0x1caf6 <malloc+0x98>
   1cab2:	21 15       	cp	r18, r1
   1cab4:	31 05       	cpc	r19, r1
   1cab6:	19 f0       	breq	.+6      	; 0x1cabe <malloc+0x60>
   1cab8:	42 17       	cp	r20, r18
   1caba:	53 07       	cpc	r21, r19
   1cabc:	18 f4       	brcc	.+6      	; 0x1cac4 <malloc+0x66>
   1cabe:	9a 01       	movw	r18, r20
   1cac0:	bd 01       	movw	r22, r26
   1cac2:	ef 01       	movw	r28, r30
   1cac4:	df 01       	movw	r26, r30
   1cac6:	f8 01       	movw	r30, r16
   1cac8:	db cf       	rjmp	.-74     	; 0x1ca80 <malloc+0x22>
   1caca:	21 15       	cp	r18, r1
   1cacc:	31 05       	cpc	r19, r1
   1cace:	f9 f0       	breq	.+62     	; 0x1cb0e <malloc+0xb0>
   1cad0:	28 1b       	sub	r18, r24
   1cad2:	39 0b       	sbc	r19, r25
   1cad4:	24 30       	cpi	r18, 0x04	; 4
   1cad6:	31 05       	cpc	r19, r1
   1cad8:	80 f4       	brcc	.+32     	; 0x1cafa <malloc+0x9c>
   1cada:	8a 81       	ldd	r24, Y+2	; 0x02
   1cadc:	9b 81       	ldd	r25, Y+3	; 0x03
   1cade:	61 15       	cp	r22, r1
   1cae0:	71 05       	cpc	r23, r1
   1cae2:	21 f0       	breq	.+8      	; 0x1caec <malloc+0x8e>
   1cae4:	fb 01       	movw	r30, r22
   1cae6:	93 83       	std	Z+3, r25	; 0x03
   1cae8:	82 83       	std	Z+2, r24	; 0x02
   1caea:	04 c0       	rjmp	.+8      	; 0x1caf4 <malloc+0x96>
   1caec:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <__flp+0x1>
   1caf0:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <__flp>
   1caf4:	fe 01       	movw	r30, r28
   1caf6:	32 96       	adiw	r30, 0x02	; 2
   1caf8:	44 c0       	rjmp	.+136    	; 0x1cb82 <malloc+0x124>
   1cafa:	fe 01       	movw	r30, r28
   1cafc:	e2 0f       	add	r30, r18
   1cafe:	f3 1f       	adc	r31, r19
   1cb00:	81 93       	st	Z+, r24
   1cb02:	91 93       	st	Z+, r25
   1cb04:	22 50       	subi	r18, 0x02	; 2
   1cb06:	31 09       	sbc	r19, r1
   1cb08:	39 83       	std	Y+1, r19	; 0x01
   1cb0a:	28 83       	st	Y, r18
   1cb0c:	3a c0       	rjmp	.+116    	; 0x1cb82 <malloc+0x124>
   1cb0e:	20 91 a2 21 	lds	r18, 0x21A2	; 0x8021a2 <__brkval>
   1cb12:	30 91 a3 21 	lds	r19, 0x21A3	; 0x8021a3 <__brkval+0x1>
   1cb16:	23 2b       	or	r18, r19
   1cb18:	41 f4       	brne	.+16     	; 0x1cb2a <malloc+0xcc>
   1cb1a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cb1e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cb22:	30 93 a3 21 	sts	0x21A3, r19	; 0x8021a3 <__brkval+0x1>
   1cb26:	20 93 a2 21 	sts	0x21A2, r18	; 0x8021a2 <__brkval>
   1cb2a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1cb2e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1cb32:	21 15       	cp	r18, r1
   1cb34:	31 05       	cpc	r19, r1
   1cb36:	41 f4       	brne	.+16     	; 0x1cb48 <malloc+0xea>
   1cb38:	2d b7       	in	r18, 0x3d	; 61
   1cb3a:	3e b7       	in	r19, 0x3e	; 62
   1cb3c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cb40:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cb44:	24 1b       	sub	r18, r20
   1cb46:	35 0b       	sbc	r19, r21
   1cb48:	e0 91 a2 21 	lds	r30, 0x21A2	; 0x8021a2 <__brkval>
   1cb4c:	f0 91 a3 21 	lds	r31, 0x21A3	; 0x8021a3 <__brkval+0x1>
   1cb50:	e2 17       	cp	r30, r18
   1cb52:	f3 07       	cpc	r31, r19
   1cb54:	a0 f4       	brcc	.+40     	; 0x1cb7e <malloc+0x120>
   1cb56:	2e 1b       	sub	r18, r30
   1cb58:	3f 0b       	sbc	r19, r31
   1cb5a:	28 17       	cp	r18, r24
   1cb5c:	39 07       	cpc	r19, r25
   1cb5e:	78 f0       	brcs	.+30     	; 0x1cb7e <malloc+0x120>
   1cb60:	ac 01       	movw	r20, r24
   1cb62:	4e 5f       	subi	r20, 0xFE	; 254
   1cb64:	5f 4f       	sbci	r21, 0xFF	; 255
   1cb66:	24 17       	cp	r18, r20
   1cb68:	35 07       	cpc	r19, r21
   1cb6a:	48 f0       	brcs	.+18     	; 0x1cb7e <malloc+0x120>
   1cb6c:	4e 0f       	add	r20, r30
   1cb6e:	5f 1f       	adc	r21, r31
   1cb70:	50 93 a3 21 	sts	0x21A3, r21	; 0x8021a3 <__brkval+0x1>
   1cb74:	40 93 a2 21 	sts	0x21A2, r20	; 0x8021a2 <__brkval>
   1cb78:	81 93       	st	Z+, r24
   1cb7a:	91 93       	st	Z+, r25
   1cb7c:	02 c0       	rjmp	.+4      	; 0x1cb82 <malloc+0x124>
   1cb7e:	e0 e0       	ldi	r30, 0x00	; 0
   1cb80:	f0 e0       	ldi	r31, 0x00	; 0
   1cb82:	cf 01       	movw	r24, r30
   1cb84:	df 91       	pop	r29
   1cb86:	cf 91       	pop	r28
   1cb88:	1f 91       	pop	r17
   1cb8a:	0f 91       	pop	r16
   1cb8c:	08 95       	ret

0001cb8e <free>:
   1cb8e:	cf 93       	push	r28
   1cb90:	df 93       	push	r29
   1cb92:	00 97       	sbiw	r24, 0x00	; 0
   1cb94:	09 f4       	brne	.+2      	; 0x1cb98 <free+0xa>
   1cb96:	81 c0       	rjmp	.+258    	; 0x1cc9a <free+0x10c>
   1cb98:	fc 01       	movw	r30, r24
   1cb9a:	32 97       	sbiw	r30, 0x02	; 2
   1cb9c:	13 82       	std	Z+3, r1	; 0x03
   1cb9e:	12 82       	std	Z+2, r1	; 0x02
   1cba0:	a0 91 a4 21 	lds	r26, 0x21A4	; 0x8021a4 <__flp>
   1cba4:	b0 91 a5 21 	lds	r27, 0x21A5	; 0x8021a5 <__flp+0x1>
   1cba8:	10 97       	sbiw	r26, 0x00	; 0
   1cbaa:	81 f4       	brne	.+32     	; 0x1cbcc <free+0x3e>
   1cbac:	20 81       	ld	r18, Z
   1cbae:	31 81       	ldd	r19, Z+1	; 0x01
   1cbb0:	82 0f       	add	r24, r18
   1cbb2:	93 1f       	adc	r25, r19
   1cbb4:	20 91 a2 21 	lds	r18, 0x21A2	; 0x8021a2 <__brkval>
   1cbb8:	30 91 a3 21 	lds	r19, 0x21A3	; 0x8021a3 <__brkval+0x1>
   1cbbc:	28 17       	cp	r18, r24
   1cbbe:	39 07       	cpc	r19, r25
   1cbc0:	51 f5       	brne	.+84     	; 0x1cc16 <free+0x88>
   1cbc2:	f0 93 a3 21 	sts	0x21A3, r31	; 0x8021a3 <__brkval+0x1>
   1cbc6:	e0 93 a2 21 	sts	0x21A2, r30	; 0x8021a2 <__brkval>
   1cbca:	67 c0       	rjmp	.+206    	; 0x1cc9a <free+0x10c>
   1cbcc:	ed 01       	movw	r28, r26
   1cbce:	20 e0       	ldi	r18, 0x00	; 0
   1cbd0:	30 e0       	ldi	r19, 0x00	; 0
   1cbd2:	ce 17       	cp	r28, r30
   1cbd4:	df 07       	cpc	r29, r31
   1cbd6:	40 f4       	brcc	.+16     	; 0x1cbe8 <free+0x5a>
   1cbd8:	4a 81       	ldd	r20, Y+2	; 0x02
   1cbda:	5b 81       	ldd	r21, Y+3	; 0x03
   1cbdc:	9e 01       	movw	r18, r28
   1cbde:	41 15       	cp	r20, r1
   1cbe0:	51 05       	cpc	r21, r1
   1cbe2:	f1 f0       	breq	.+60     	; 0x1cc20 <free+0x92>
   1cbe4:	ea 01       	movw	r28, r20
   1cbe6:	f5 cf       	rjmp	.-22     	; 0x1cbd2 <free+0x44>
   1cbe8:	d3 83       	std	Z+3, r29	; 0x03
   1cbea:	c2 83       	std	Z+2, r28	; 0x02
   1cbec:	40 81       	ld	r20, Z
   1cbee:	51 81       	ldd	r21, Z+1	; 0x01
   1cbf0:	84 0f       	add	r24, r20
   1cbf2:	95 1f       	adc	r25, r21
   1cbf4:	c8 17       	cp	r28, r24
   1cbf6:	d9 07       	cpc	r29, r25
   1cbf8:	59 f4       	brne	.+22     	; 0x1cc10 <free+0x82>
   1cbfa:	88 81       	ld	r24, Y
   1cbfc:	99 81       	ldd	r25, Y+1	; 0x01
   1cbfe:	84 0f       	add	r24, r20
   1cc00:	95 1f       	adc	r25, r21
   1cc02:	02 96       	adiw	r24, 0x02	; 2
   1cc04:	91 83       	std	Z+1, r25	; 0x01
   1cc06:	80 83       	st	Z, r24
   1cc08:	8a 81       	ldd	r24, Y+2	; 0x02
   1cc0a:	9b 81       	ldd	r25, Y+3	; 0x03
   1cc0c:	93 83       	std	Z+3, r25	; 0x03
   1cc0e:	82 83       	std	Z+2, r24	; 0x02
   1cc10:	21 15       	cp	r18, r1
   1cc12:	31 05       	cpc	r19, r1
   1cc14:	29 f4       	brne	.+10     	; 0x1cc20 <free+0x92>
   1cc16:	f0 93 a5 21 	sts	0x21A5, r31	; 0x8021a5 <__flp+0x1>
   1cc1a:	e0 93 a4 21 	sts	0x21A4, r30	; 0x8021a4 <__flp>
   1cc1e:	3d c0       	rjmp	.+122    	; 0x1cc9a <free+0x10c>
   1cc20:	e9 01       	movw	r28, r18
   1cc22:	fb 83       	std	Y+3, r31	; 0x03
   1cc24:	ea 83       	std	Y+2, r30	; 0x02
   1cc26:	49 91       	ld	r20, Y+
   1cc28:	59 91       	ld	r21, Y+
   1cc2a:	c4 0f       	add	r28, r20
   1cc2c:	d5 1f       	adc	r29, r21
   1cc2e:	ec 17       	cp	r30, r28
   1cc30:	fd 07       	cpc	r31, r29
   1cc32:	61 f4       	brne	.+24     	; 0x1cc4c <free+0xbe>
   1cc34:	80 81       	ld	r24, Z
   1cc36:	91 81       	ldd	r25, Z+1	; 0x01
   1cc38:	84 0f       	add	r24, r20
   1cc3a:	95 1f       	adc	r25, r21
   1cc3c:	02 96       	adiw	r24, 0x02	; 2
   1cc3e:	e9 01       	movw	r28, r18
   1cc40:	99 83       	std	Y+1, r25	; 0x01
   1cc42:	88 83       	st	Y, r24
   1cc44:	82 81       	ldd	r24, Z+2	; 0x02
   1cc46:	93 81       	ldd	r25, Z+3	; 0x03
   1cc48:	9b 83       	std	Y+3, r25	; 0x03
   1cc4a:	8a 83       	std	Y+2, r24	; 0x02
   1cc4c:	e0 e0       	ldi	r30, 0x00	; 0
   1cc4e:	f0 e0       	ldi	r31, 0x00	; 0
   1cc50:	12 96       	adiw	r26, 0x02	; 2
   1cc52:	8d 91       	ld	r24, X+
   1cc54:	9c 91       	ld	r25, X
   1cc56:	13 97       	sbiw	r26, 0x03	; 3
   1cc58:	00 97       	sbiw	r24, 0x00	; 0
   1cc5a:	19 f0       	breq	.+6      	; 0x1cc62 <free+0xd4>
   1cc5c:	fd 01       	movw	r30, r26
   1cc5e:	dc 01       	movw	r26, r24
   1cc60:	f7 cf       	rjmp	.-18     	; 0x1cc50 <free+0xc2>
   1cc62:	8d 91       	ld	r24, X+
   1cc64:	9c 91       	ld	r25, X
   1cc66:	11 97       	sbiw	r26, 0x01	; 1
   1cc68:	9d 01       	movw	r18, r26
   1cc6a:	2e 5f       	subi	r18, 0xFE	; 254
   1cc6c:	3f 4f       	sbci	r19, 0xFF	; 255
   1cc6e:	82 0f       	add	r24, r18
   1cc70:	93 1f       	adc	r25, r19
   1cc72:	20 91 a2 21 	lds	r18, 0x21A2	; 0x8021a2 <__brkval>
   1cc76:	30 91 a3 21 	lds	r19, 0x21A3	; 0x8021a3 <__brkval+0x1>
   1cc7a:	28 17       	cp	r18, r24
   1cc7c:	39 07       	cpc	r19, r25
   1cc7e:	69 f4       	brne	.+26     	; 0x1cc9a <free+0x10c>
   1cc80:	30 97       	sbiw	r30, 0x00	; 0
   1cc82:	29 f4       	brne	.+10     	; 0x1cc8e <free+0x100>
   1cc84:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <__flp+0x1>
   1cc88:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <__flp>
   1cc8c:	02 c0       	rjmp	.+4      	; 0x1cc92 <free+0x104>
   1cc8e:	13 82       	std	Z+3, r1	; 0x03
   1cc90:	12 82       	std	Z+2, r1	; 0x02
   1cc92:	b0 93 a3 21 	sts	0x21A3, r27	; 0x8021a3 <__brkval+0x1>
   1cc96:	a0 93 a2 21 	sts	0x21A2, r26	; 0x8021a2 <__brkval>
   1cc9a:	df 91       	pop	r29
   1cc9c:	cf 91       	pop	r28
   1cc9e:	08 95       	ret

0001cca0 <memset>:
   1cca0:	dc 01       	movw	r26, r24
   1cca2:	01 c0       	rjmp	.+2      	; 0x1cca6 <memset+0x6>
   1cca4:	6d 93       	st	X+, r22
   1cca6:	41 50       	subi	r20, 0x01	; 1
   1cca8:	50 40       	sbci	r21, 0x00	; 0
   1ccaa:	e0 f7       	brcc	.-8      	; 0x1cca4 <memset+0x4>
   1ccac:	08 95       	ret

0001ccae <_exit>:
   1ccae:	f8 94       	cli

0001ccb0 <__stop_program>:
   1ccb0:	ff cf       	rjmp	.-2      	; 0x1ccb0 <__stop_program>
