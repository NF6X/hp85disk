
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001656  00800100  0001cdda  0001ce6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001cdda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a62  00801756  00801756  0001e4c4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e4c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e4d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016d0  00000000  00000000  0001e518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028753  00000000  00000000  0001fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060bf  00000000  00000000  0004833b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012123  00000000  00000000  0004e3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000050d0  00000000  00000000  00060520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004832  00000000  00000000  000655f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023ea0  00000000  00000000  00069e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001700  00000000  00000000  0008dcc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 24 	jmp	0x487a	; 0x487a <__ctors_end>
       4:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
       8:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
       c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      10:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      14:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      18:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      1c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      20:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      24:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      28:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      2c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      30:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      34:	0c 94 eb 31 	jmp	0x63d6	; 0x63d6 <__vector_13>
      38:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      3c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      40:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      44:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      48:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      4c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      50:	0c 94 0c 28 	jmp	0x5018	; 0x5018 <__vector_20>
      54:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      58:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      5c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      60:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      64:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      68:	0c 94 0e 2c 	jmp	0x581c	; 0x581c <__vector_26>
      6c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      70:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      74:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      78:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      7c:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      80:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      84:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      88:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__bad_interrupt>
      8c:	1b 42       	sbci	r17, 0x2B	; 43
      8e:	6b 43       	sbci	r22, 0x3B	; 59
      90:	53 42       	sbci	r21, 0x23	; 35
      92:	3e 43       	sbci	r19, 0x3E	; 62
      94:	3e 43       	sbci	r19, 0x3E	; 62
      96:	6b 43       	sbci	r22, 0x3B	; 59
      98:	6b 43       	sbci	r22, 0x3B	; 59
      9a:	6b 43       	sbci	r22, 0x3B	; 59
      9c:	6b 43       	sbci	r22, 0x3B	; 59
      9e:	6b 43       	sbci	r22, 0x3B	; 59
      a0:	6b 43       	sbci	r22, 0x3B	; 59
      a2:	6b 43       	sbci	r22, 0x3B	; 59
      a4:	6b 43       	sbci	r22, 0x3B	; 59
      a6:	1b 42       	sbci	r17, 0x2B	; 43
      a8:	18 42       	sbci	r17, 0x28	; 40
      aa:	6b 43       	sbci	r22, 0x3B	; 59
      ac:	6b 43       	sbci	r22, 0x3B	; 59
      ae:	61 43       	sbci	r22, 0x31	; 49
      b0:	6b 43       	sbci	r22, 0x3B	; 59
      b2:	4d 42       	sbci	r20, 0x2D	; 45
      b4:	6b 43       	sbci	r22, 0x3B	; 59
      b6:	6b 43       	sbci	r22, 0x3B	; 59
      b8:	1b 42       	sbci	r17, 0x2B	; 43
      ba:	6b 43       	sbci	r22, 0x3B	; 59
      bc:	6b 43       	sbci	r22, 0x3B	; 59
      be:	6b 43       	sbci	r22, 0x3B	; 59
      c0:	6b 43       	sbci	r22, 0x3B	; 59
      c2:	6b 43       	sbci	r22, 0x3B	; 59
      c4:	6b 43       	sbci	r22, 0x3B	; 59
      c6:	6b 43       	sbci	r22, 0x3B	; 59
      c8:	6b 43       	sbci	r22, 0x3B	; 59
      ca:	6b 43       	sbci	r22, 0x3B	; 59
      cc:	1b 42       	sbci	r17, 0x2B	; 43
      ce:	66 43       	sbci	r22, 0x36	; 54
      d0:	53 42       	sbci	r21, 0x23	; 35
      d2:	3e 43       	sbci	r19, 0x3E	; 62
      d4:	3e 43       	sbci	r19, 0x3E	; 62
      d6:	6b 43       	sbci	r22, 0x3B	; 59
      d8:	6b 43       	sbci	r22, 0x3B	; 59
      da:	6b 43       	sbci	r22, 0x3B	; 59
      dc:	6b 43       	sbci	r22, 0x3B	; 59
      de:	6b 43       	sbci	r22, 0x3B	; 59
      e0:	6b 43       	sbci	r22, 0x3B	; 59
      e2:	6b 43       	sbci	r22, 0x3B	; 59
      e4:	6b 43       	sbci	r22, 0x3B	; 59
      e6:	1b 42       	sbci	r17, 0x2B	; 43
      e8:	18 42       	sbci	r17, 0x28	; 40
      ea:	6b 43       	sbci	r22, 0x3B	; 59
      ec:	6b 43       	sbci	r22, 0x3B	; 59
      ee:	5c 43       	sbci	r21, 0x3C	; 60
      f0:	6b 43       	sbci	r22, 0x3B	; 59
      f2:	4d 42       	sbci	r20, 0x2D	; 45
      f4:	6b 43       	sbci	r22, 0x3B	; 59
      f6:	6b 43       	sbci	r22, 0x3B	; 59
      f8:	1b 42       	sbci	r17, 0x2B	; 43
      fa:	90 43       	sbci	r25, 0x30	; 48
      fc:	d1 44       	sbci	r29, 0x41	; 65
      fe:	83 43       	sbci	r24, 0x33	; 51
     100:	eb 43       	sbci	r30, 0x3B	; 59
     102:	cf 43       	sbci	r28, 0x3F	; 63
     104:	d1 44       	sbci	r29, 0x41	; 65
     106:	d1 44       	sbci	r29, 0x41	; 65
     108:	d1 44       	sbci	r29, 0x41	; 65
     10a:	d1 44       	sbci	r29, 0x41	; 65
     10c:	d1 44       	sbci	r29, 0x41	; 65
     10e:	d1 44       	sbci	r29, 0x41	; 65
     110:	d1 44       	sbci	r29, 0x41	; 65
     112:	d1 44       	sbci	r29, 0x41	; 65
     114:	9d 43       	sbci	r25, 0x3D	; 61
     116:	b1 43       	sbci	r27, 0x31	; 49
     118:	d1 44       	sbci	r29, 0x41	; 65
     11a:	d1 44       	sbci	r29, 0x41	; 65
     11c:	77 44       	sbci	r23, 0x47	; 71
     11e:	d1 44       	sbci	r29, 0x41	; 65
     120:	7f 43       	sbci	r23, 0x3F	; 63
     122:	d1 44       	sbci	r29, 0x41	; 65
     124:	d1 44       	sbci	r29, 0x41	; 65
     126:	b1 43       	sbci	r27, 0x31	; 49
     128:	d1 44       	sbci	r29, 0x41	; 65
     12a:	d1 44       	sbci	r29, 0x41	; 65
     12c:	d1 44       	sbci	r29, 0x41	; 65
     12e:	d1 44       	sbci	r29, 0x41	; 65
     130:	d1 44       	sbci	r29, 0x41	; 65
     132:	d1 44       	sbci	r29, 0x41	; 65
     134:	d1 44       	sbci	r29, 0x41	; 65
     136:	d1 44       	sbci	r29, 0x41	; 65
     138:	d1 44       	sbci	r29, 0x41	; 65
     13a:	90 43       	sbci	r25, 0x30	; 48
     13c:	1f 44       	sbci	r17, 0x4F	; 79
     13e:	83 43       	sbci	r24, 0x33	; 51
     140:	eb 43       	sbci	r30, 0x3B	; 59
     142:	cf 43       	sbci	r28, 0x3F	; 63
     144:	d1 44       	sbci	r29, 0x41	; 65
     146:	d1 44       	sbci	r29, 0x41	; 65
     148:	d1 44       	sbci	r29, 0x41	; 65
     14a:	d1 44       	sbci	r29, 0x41	; 65
     14c:	d1 44       	sbci	r29, 0x41	; 65
     14e:	d1 44       	sbci	r29, 0x41	; 65
     150:	d1 44       	sbci	r29, 0x41	; 65
     152:	d1 44       	sbci	r29, 0x41	; 65
     154:	9d 43       	sbci	r25, 0x3D	; 61
     156:	b1 43       	sbci	r27, 0x31	; 49
     158:	d1 44       	sbci	r29, 0x41	; 65
     15a:	d1 44       	sbci	r29, 0x41	; 65
     15c:	1f 44       	sbci	r17, 0x4F	; 79
     15e:	d1 44       	sbci	r29, 0x41	; 65
     160:	7f 43       	sbci	r23, 0x3F	; 63
     162:	d1 44       	sbci	r29, 0x41	; 65
     164:	d1 44       	sbci	r29, 0x41	; 65
     166:	b1 43       	sbci	r27, 0x31	; 49
     168:	b0 67       	ori	r27, 0x70	; 112
     16a:	ba 67       	ori	r27, 0x7A	; 122
     16c:	c2 67       	ori	r28, 0x72	; 114
     16e:	c5 67       	ori	r28, 0x75	; 117
     170:	c8 67       	ori	r28, 0x78	; 120
     172:	cb 67       	ori	r28, 0x7B	; 123
     174:	ce 67       	ori	r28, 0x7E	; 126
     176:	d1 67       	ori	r29, 0x71	; 113
     178:	d4 67       	ori	r29, 0x74	; 116
     17a:	a7 85       	ldd	r26, Z+15	; 0x0f
     17c:	af 85       	ldd	r26, Y+15	; 0x0f
     17e:	e0 85       	ldd	r30, Z+8	; 0x08
     180:	f9 85       	ldd	r31, Y+9	; 0x09
     182:	15 86       	std	Z+13, r1	; 0x0d
     184:	22 86       	std	Z+10, r2	; 0x0a
     186:	3e 86       	std	Y+14, r3	; 0x0e
     188:	68 86       	std	Y+8, r6	; 0x08
     18a:	4b 86       	std	Y+11, r4	; 0x0b
     18c:	66 9a       	sbi	0x0c, 6	; 12
     18e:	38 9b       	sbis	0x07, 0	; 7
     190:	74 9b       	sbis	0x0e, 4	; 14
     192:	a3 9b       	sbis	0x14, 3	; 20
     194:	b3 9b       	sbis	0x16, 3	; 22
     196:	d0 9b       	sbis	0x1a, 0	; 26
     198:	30 9c       	mul	r3, r0
     19a:	3f 9d       	mul	r19, r15
     19c:	3f 9d       	mul	r19, r15
     19e:	3f 9d       	mul	r19, r15
     1a0:	64 9c       	mul	r6, r4
     1a2:	90 9c       	mul	r9, r0
     1a4:	de 9c       	mul	r13, r14
     1a6:	fa 9c       	mul	r15, r10
     1a8:	03 9b       	sbis	0x00, 3	; 0
     1aa:	16 9b       	sbis	0x02, 6	; 2
     1ac:	07 ba       	out	0x17, r0	; 23
     1ae:	c6 b9       	out	0x06, r28	; 6
     1b0:	c6 b9       	out	0x06, r28	; 6
     1b2:	c6 b9       	out	0x06, r28	; 6
     1b4:	c6 b9       	out	0x06, r28	; 6
     1b6:	8a b9       	out	0x0a, r24	; 10
     1b8:	91 b9       	out	0x01, r25	; 1
     1ba:	98 b9       	out	0x08, r25	; 8
     1bc:	a8 b9       	out	0x08, r26	; 8
     1be:	b6 b9       	out	0x06, r27	; 6
     1c0:	af b9       	out	0x0f, r26	; 15

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3650>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3648>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3646>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3643>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3641>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3639>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3637>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3635>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3632>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3630>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3626>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3613>:
     aef:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aff:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b0f <__c.3611>:
     b0f:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000b1d <__c.3609>:
     b1d:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b2d:	73 74 0a 00                                         st..

00000b31 <__c.3607>:
     b31:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b41 <__c.3605>:
     b41:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b51:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b61 <__c.3589>:
     b61:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b71:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b81:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b91:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     ba1:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     bb1:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     bc1:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     bd1:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000bde <__c.3587>:
     bde:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bea <__c.3919>:
     bea:	25 73 0a 00                                         %s..

00000bee <__c.3917>:
     bee:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bf6 <__c.3672>:
     bf6:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c02 <__c.3601>:
     c02:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c12:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c1a <__c.3594>:
     c1a:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c2a:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c32 <__c.3764>:
     c32:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c3d <__c.3760>:
     c3d:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c4d:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c5d:	68 0a 00                                            h..

00000c60 <__c.3757>:
     c60:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c70 <__c.3752>:
     c70:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c7e <__c.3750>:
     c7e:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c8e:	5b 25 73 5d 0a 00                                   [%s]..

00000c94 <__c.3748>:
     c94:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     ca4:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000cb5 <__c.3735>:
     cb5:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     cc5:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000ccf <__c.3730>:
     ccf:	25 73 0a 00                                         %s..

00000cd3 <__c.3728>:
     cd3:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ce3:	0a 00                                               ..

00000ce5 <__c.3716>:
     ce5:	0d 00                                               ..

00000ce7 <__c.3714>:
     ce7:	4d 6f 72 65 2e 2e 00                                More...

00000cee <__c.3704>:
     cee:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cfe:	2e 0a 00                                            ...

00000d01 <__c.3700>:
     d01:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d10 <__c.3697>:
     d10:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d1d <__c.3695>:
     d1d:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d2a <__c.3693>:
     d2a:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d3a <__c.3691>:
     d3a:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d47 <__c.3689>:
     d47:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d57 <__c.3687>:
     d57:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d63 <__c.3676>:
     d63:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d6e <__c.3674>:
     d6e:	0a 00                                               ..

00000d70 <__c.3669>:
     d70:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d80 <__c.3659>:
     d80:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d91 <__c.3657>:
     d91:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d9f <__c.3655>:
     d9f:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000db0 <__c.3653>:
     db0:	25 73 0a 00                                         %s..

00000db4 <__c.3651>:
     db4:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000dc0 <__c.3647>:
     dc0:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000dd1 <__c.3640>:
     dd1:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     de1:	74 20 23 20 25 64 0a 00                             t # %d..

00000de9 <__c.3636>:
     de9:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dfa <__c.3620>:
     dfa:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     e0a:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     e1a:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     e2a:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     e3a:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     e4a:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e5a:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e6a:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e7a:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e8a:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e9a:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     eaa:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     eba:	6e 65 77 0a 0a 00                                   new...

00000ec0 <__c.3618>:
     ec0:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000ecc <__c.3807>:
     ecc:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000eda <__c.3801>:
     eda:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ee7 <__c.3794>:
     ee7:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ef5 <__c.3785>:
     ef5:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000f02 <__c.3776>:
     f02:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000f13 <__c.3762>:
     f13:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f23:	5d 0a 00                                            ]..

00000f26 <__c.3744>:
     f26:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f36:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f43 <__c.4399>:
     f43:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f53:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f63:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f6b <__c.4391>:
     f6b:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f7b:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f85 <__c.4386>:
     f85:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f95:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     fa5:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000fb3 <__c.4384>:
     fb3:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     fc3:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000fcd <__c.4374>:
     fcd:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     fdd:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fed:	28 25 64 29 5d 0a 00                                (%d)]..

00000ff4 <__c.4370>:
     ff4:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    1004:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    1014:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00001021 <__c.4367>:
    1021:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    1031:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

0000103a <__c.4351>:
    103a:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00001045 <__c.4349>:
    1045:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001050 <__c.4347>:
    1050:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

0000105b <__c.4343>:
    105b:	20 20 20 20 20 00                                        .

00001061 <__c.4341>:
    1061:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000106a <__c.4315>:
    106a:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    107a:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001088 <__c.4299>:
    1088:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1098:	3e 0a 00                                            >..

0000109b <__c.4294>:
    109b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10ab:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10bb:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

000010ca <__c.4290>:
    10ca:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10da:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10ea:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10fa:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

00001106 <__c.4286>:
    1106:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1116:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1126:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    1136:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

00001142 <__c.4284>:
    1142:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1152:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1162:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1172:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001181 <__c.4279>:
    1181:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1191:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

000011a0 <__c.4263>:
    11a0:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11b0:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11c0:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011ce <__c.4247>:
    11ce:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    11de:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011e9 <__c.4245>:
    11e9:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11f9:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1209:	72 61 6e 67 65 0a 00                                range..

00001210 <__c.4240>:
    1210:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1220:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000122b <__c.4238>:
    122b:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    123b:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    124b:	61 6e 67 65 0a 00                                   ange..

00001251 <__c.4233>:
    1251:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1261:	5d 0a 00                                            ]..

00001264 <__c.4221>:
    1264:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001275 <__c.4398>:
    1275:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001286 <__c.4393>:
    1286:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1296:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12a6:	32 58 48 5d 0a 00                                   2XH]..

000012ac <__c.4391>:
    12ac:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    12bc:	0a 00                                               ..

000012be <__c.4389>:
    12be:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

000012cf <__c.4384>:
    12cf:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

000012db <__c.4382>:
    12db:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012eb <__c.4380>:
    12eb:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12fb:	52 5d 0a 00                                         R]..

000012ff <__c.4378>:
    12ff:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    130f:	0a 00                                               ..

00001311 <__c.4376>:
    1311:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001322 <__c.4374>:
    1322:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001329 <__c.4369>:
    1329:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

00001335 <__c.4367>:
    1335:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1345:	52 5d 0a 00                                         R]..

00001349 <__c.4365>:
    1349:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000135a <__c.4363>:
    135a:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    136a:	0a 00                                               ..

0000136c <__c.4361>:
    136c:	0a 00                                               ..

0000136e <__c.4359>:
    136e:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001375 <__c.4354>:
    1375:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1385:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001396 <__c.4352>:
    1396:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000139d <__c.4350>:
    139d:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013aa <__c.4348>:
    13aa:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000013b6 <__c.4346>:
    13b6:	5b 53 44 43 5d 0a 00                                [SDC]..

000013bd <__c.4344>:
    13bd:	5b 53 50 44 5d 0a 00                                [SPD]..

000013c4 <__c.4342>:
    13c4:	5b 53 50 45 5d 0a 00                                [SPE]..

000013cb <__c.4340>:
    13cb:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    13db:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013e3 <__c.4338>:
    13e3:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13f3:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013fb <__c.4333>:
    13fb:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    140b:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001415 <__c.4331>:
    1415:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1425:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001436 <__c.4304>:
    1436:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001447 <__c.4302>:
    1447:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001454 <__c.4300>:
    1454:	3c 42 55 53 3e 0a 00                                <BUS>..

0000145b <__c.4298>:
    145b:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001466 <__c.4296>:
    1466:	3c 49 46 43 3e 0a 00                                <IFC>..

0000146d <__c.4291>:
    146d:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    147d:	0a 00                                               ..

0000147f <__c.4289>:
    147f:	44 6f 6e 65 0a 00                                   Done..

00001485 <__c.4285>:
    1485:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001491 <__c.4283>:
    1491:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14a1:	20 65 78 69 74 0a 00                                 exit..

000014a8 <__c.4281>:
    14a8:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    14b8:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    14c8:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

000014d3 <__c.4279>:
    14d3:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14e3:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014ed <__c.4233>:
    14ed:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14fd:	6f 74 65 63 74 65 64 0a 00                          otected..

00001506 <__c.4231>:
    1506:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001517 <__c.4229>:
    1517:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1527:	0a 00                                               ..

00001529 <__c.4424>:
    1529:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001536 <__c.4416>:
    1536:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1546:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1556:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1566:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1576:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1586:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1596:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    15a6:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    15b6:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    15c6:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    15d6:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15e6:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15f6:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    1606:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    1616:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    1626:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    1636:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1646:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1656:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1666:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1676:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1686:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1696:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    16a6:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    16b6:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    16c6:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    16d6:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16e6:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16f6:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016ff <__c.4414>:
    16ff:	67 70 69 62 20 20 68 65 6c 70 0a 00                 gpib  help..

0000170b <__c.4835>:
    170b:	0a 00                                               ..

0000170d <__c.4830>:
    170d:	25 2d 31 36 73 20 20 20 20 20 20 20 25 32 64 0a     %-16s       %2d.
	...

0000171e <__c.4828>:
    171e:	25 2d 31 36 73 20 41 4d 49 47 4f 20 25 32 64 20     %-16s AMIGO %2d 
    172e:	25 73 0a 00                                         %s..

00001732 <__c.4826>:
    1732:	25 2d 31 36 73 20 53 53 38 30 20 20 25 32 64 20     %-16s SS80  %2d 
    1742:	25 73 0a 00                                         %s..

00001746 <__c.4814>:
    1746:	61 72 67 76 5b 25 64 5d 20 3d 20 25 73 0a 00        argv[%d] = %s..

00001755 <__c.4804>:
    1755:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000175d <__c.4802>:
    175d:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    176d:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001777 <__c.4800>:
    1777:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1787:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1797:	0a 00                                               ..

00001799 <__c.4798>:
    1799:	53 53 38 30 2d 25 64 00                             SS80-%d.

000017a1 <__c.4796>:
    17a1:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    17b1:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000017bb <__c.4794>:
    17bb:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    17cb:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    17db:	0a 00                                               ..

000017dd <__c.4777>:
    17dd:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17ed:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17fd:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    180d:	6f 20 32 35 36 0a 00                                o 256..

00001814 <__c.4775>:
    1814:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1824:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1834:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1844:	20 32 35 36 0a 00                                    256..

0000184a <__c.4762>:
    184a:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    185a:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001869 <__c.4726>:
    1869:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1879:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1889:	0a 00                                               ..

0000188b <__c.4718>:
    188b:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    189b:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    18ab:	6c 6c 0a 00                                         ll..

000018af <__c.4705>:
    18af:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18bf:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    18cf:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000018da <__c.4703>:
    18da:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18ea:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18fa:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    190a:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001912 <__c.4701>:
    1912:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1922:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1932:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1942:	3a 25 73 0a 00                                      :%s..

00001947 <__c.4699>:
    1947:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1957:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1967:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1977:	55 4c 4c 0a 00                                      ULL..

0000197c <__c.4697>:
    197c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    198c:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    199c:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    19ac:	66 20 72 61 6e 67 65 0a 00                          f range..

000019b5 <__c.4695>:
    19b5:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    19c5:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    19d5:	6e 67 65 0a 00                                      nge..

000019da <__c.4656>:
    19da:	0a 00                                               ..

000019dc <__c.4651>:
    19dc:	0a 00                                               ..

000019de <__c.4649>:
    19de:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19ee:	6c 64 0a 00                                         ld..

000019f2 <__c.4647>:
    19f2:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a02:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a11 <__c.4645>:
    1a11:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a1b <__c.4643>:
    1a1b:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1a2b:	6c 64 0a 00                                         ld..

00001a2f <__c.4641>:
    1a2f:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a3f:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a4e <__c.4639>:
    1a4e:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a57 <__c.4636>:
    1a57:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a67:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a77 <__c.4627>:
    1a77:	0a 00                                               ..

00001a79 <__c.4622>:
    1a79:	0a 00                                               ..

00001a7b <__c.4620>:
    1a7b:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a84 <__c.4618>:
    1a84:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a8e <__c.4616>:
    1a8e:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a97 <__c.4613>:
    1a97:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1aa7:	0a 00                                               ..

00001aa9 <__c.4607>:
    1aa9:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1ab9:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1ac9:	2a 2a 2a 2a 2a 0a 00                                *****..

00001ad0 <__c.4605>:
    1ad0:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1ae0:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001aed <__c.4603>:
    1aed:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1afd:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1b0d:	0a 00                                               ..

00001b0f <__c.4599>:
    1b0f:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1b1f:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b2f:	0a 00                                               ..

00001b31 <__c.4596>:
    1b31:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b41:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b51:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b61 <__c.4587>:
    1b61:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b71:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b81:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b90 <__c.4584>:
    1b90:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1ba0:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1bb0:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001bc0 <__c.4575>:
    1bc0:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1bd0:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1be0:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bee <__c.4567>:
    1bee:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bfe:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1c0e:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c1c <__c.4557>:
    1c1c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c2c:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1c3c:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001c48 <__c.4540>:
    1c48:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c58:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c68:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c78:	0a 00                                               ..

00001c7a <__c.4532>:
    1c7a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c8a:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c9a:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ca8 <__c.4529>:
    1ca8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1cb8:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1cc8:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001cd6 <__c.4521>:
    1cd6:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ce6:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1cf6:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001d03 <__c.4511>:
    1d03:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d13:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1d23:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001d34 <__c.4508>:
    1d34:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d44:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d54:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d5e <__c.4504>:
    1d5e:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d6e:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d7e:	0a 00                                               ..

00001d80 <__c.4493>:
    1d80:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d90:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1da0:	0a 00                                               ..

00001da2 <__c.4490>:
    1da2:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1db2:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001dc0 <__c.4488>:
    1dc0:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001dcd <__c.4469>:
    1dcd:	25 73 0a 00                                         %s..

00001dd1 <__c.4459>:
    1dd1:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001ddd <__c.4448>:
    1ddd:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1ded:	6c 64 29 0a 00                                      ld)..

00001df2 <__c.3643>:
    1df2:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001e03 <__c.3641>:
    1e03:	25 73 20 25 73 0a 00                                %s %s..

00001e0a <__c.3637>:
    1e0a:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1e1a:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001e27 <__c.4541>:
    1e27:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1e37:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e47:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e57:	48 5d 0a 00                                         H]..

00001e5b <__c.4539>:
    1e5b:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e6b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e7b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e8b:	48 5d 0a 00                                         H]..

00001e8f <__c.4537>:
    1e8f:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e9f:	74 5d 0a 00                                         t]..

00001ea3 <__c.4535>:
    1ea3:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001eb2 <__c.4533>:
    1eb2:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1ec2:	74 65 5d 0a 00                                      te]..

00001ec7 <__c.4531>:
    1ec7:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1ed7:	61 74 65 5d 0a 00                                   ate]..

00001edd <__c.4529>:
    1edd:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1eed:	61 74 65 5d 0a 00                                   ate]..

00001ef3 <__c.4524>:
    1ef3:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1f03:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1f13:	5d 0a 00                                            ]..

00001f16 <__c.4510>:
    1f16:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001f25 <__c.4508>:
    1f25:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f35:	5d 0a 00                                            ]..

00001f38 <__c.4501>:
    1f38:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001f44 <__c.4487>:
    1f44:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f54:	5d 0a 00                                            ]..

00001f57 <__c.4485>:
    1f57:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f67:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f71 <__c.4478>:
    1f71:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f81:	48 5d 0a 00                                         H]..

00001f85 <__c.4476>:
    1f85:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f95:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001fa5 <__c.4471>:
    1fa5:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1fb5:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1fc5:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1fd5:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001fe1 <__c.4468>:
    1fe1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1ff1:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002001 <__c.4466>:
    2001:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    2011:	29 5d 0a 00                                         )]..

00002015 <__c.4464>:
    2015:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2025:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2035:	28 25 64 29 5d 0a 00                                (%d)]..

0000203c <__c.4462>:
    203c:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    204c:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000205a <__c.4460>:
    205a:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    206a:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002077 <__c.4457>:
    2077:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2087:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2097:	44 4f 5d 0a 00                                      DO]..

0000209c <__c.4454>:
    209c:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    20ac:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000020b5 <__c.4452>:
    20b5:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    20c5:	5d 0a 00                                            ]..

000020c8 <__c.4443>:
    20c8:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    20d8:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    20e8:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20f8:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002100 <__c.4440>:
    2100:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2110:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002120 <__c.4438>:
    2120:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    2130:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2140:	5d 0a 00                                            ]..

00002143 <__c.4436>:
    2143:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2153:	61 74 75 73 5d 0a 00                                atus]..

0000215a <__c.4434>:
    215a:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    216a:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002173 <__c.4432>:
    2173:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2183:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000218e <__c.4430>:
    218e:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    219e:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000021ad <__c.4428>:
    21ad:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    21bd:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000021cb <__c.4426>:
    21cb:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000021dc <__c.4424>:
    21dc:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    21ec:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021f8 <__c.4422>:
    21f8:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2208:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002215 <__c.4420>:
    2215:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2225:	2d 4f 50 5d 0a 00                                   -OP]..

0000222b <__c.4418>:
    222b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    223b:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000224c <__c.4416>:
    224c:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    225c:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    226c:	44 4f 5d 0a 00                                      DO]..

00002271 <__c.4414>:
    2271:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2281:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000228b <__c.4412>:
    228b:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    229b:	2d 4f 50 5d 0a 00                                   -OP]..

000022a1 <__c.4410>:
    22a1:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000022af <__c.4408>:
    22af:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    22bf:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000022cb <__c.4406>:
    22cb:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    22db:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000022e8 <__c.4404>:
    22e8:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22f8:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002301 <__c.4401>:
    2301:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2311:	20 52 65 61 64 5d 0a 00                              Read]..

00002319 <__c.4399>:
    2319:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2329:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002332 <__c.4396>:
    2332:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2342:	25 64 29 5d 0a 00                                   %d)]..

00002348 <__c.4394>:
    2348:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2358:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002361 <__c.4392>:
    2361:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2371:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2381:	52 4f 52 5d 0a 00                                   ROR]..

00002387 <__c.4383>:
    2387:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2397:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000023a1 <__c.4378>:
    23a1:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    23b1:	76 61 6c 69 64 5d 0a 00                             valid]..

000023b9 <__c.4373>:
    23b9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    23c9:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000023d8 <__c.4371>:
    23d8:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    23e8:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023f5 <__c.4369>:
    23f5:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2405:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2415:	5d 0a 00                                            ]..

00002418 <__c.4367>:
    2418:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002429 <__c.4359>:
    2429:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2439:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002444 <__c.4357>:
    2444:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2454:	73 5d 0a 00                                         s]..

00002458 <__c.4347>:
    2458:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002463 <__c.4345>:
    2463:	25 73 3a 0a 00                                      %s:..

00002468 <__c.4320>:
    2468:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2478:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2488:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002493 <__c.4318>:
    2493:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24a3:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    24b3:	49 4e 49 53 48 5d 0a 00                             INISH]..

000024bb <__c.4314>:
    24bb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24cb:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    24db:	58 48 29 5d 0a 00                                   XH)]..

000024e1 <__c.4312>:
    24e1:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24f1:	72 5d 0a 00                                         r]..

000024f5 <__c.4308>:
    24f5:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2505:	5d 0a 00                                            ]..

00002508 <__c.4306>:
    2508:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2518:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2528:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002531 <__c.4294>:
    2531:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2541:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2551:	62 79 74 65 73 5d 0a 00                             bytes]..

00002559 <__c.4292>:
    2559:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2569:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2579:	53 48 5d 0a 00                                      SH]..

0000257e <__c.4287>:
    257e:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    258e:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002597 <__c.4285>:
    2597:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    25a7:	45 72 72 6f 72 5d 0a 00                             Error]..

000025af <__c.4283>:
    25af:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    25bf:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000025cd <__c.4281>:
    25cd:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25dd:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    25ed:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025f5 <__c.4264>:
    25f5:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2605:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002611 <__c.4248>:
    2611:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2621:	5d 0a 00                                            ]..

00002624 <__c.4364>:
    2624:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2634:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2644:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000264d <__c.4361>:
    264d:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    265d:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    266d:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002678 <__c.4358>:
    2678:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2688:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2698:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000026a1 <__c.4353>:
    26a1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26b1:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000026c1 <__c.4350>:
    26c1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    26d1:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000026dd <__c.4347>:
    26dd:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26ed:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26fd:	0a 00                                               ..

000026ff <__c.4344>:
    26ff:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    270f:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000271e <__c.4341>:
    271e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    272e:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

0000273f <__c.4338>:
    273f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    274f:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000275f <__c.4334>:
    275f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    276f:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    277f:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    278f:	0a 00                                               ..

00002791 <__c.4329>:
    2791:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000027a1 <__c.4326>:
    27a1:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    27b1:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000027c0 <__c.4324>:
    27c0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    27d0:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    27e0:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000027eb <__c.4322>:
    27eb:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27fb:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000280b <__c.4320>:
    280b:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    281b:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    282b:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002834 <__c.4318>:
    2834:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2844:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002850 <__c.4316>:
    2850:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2860:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2870:	0a 00                                               ..

00002872 <__c.4314>:
    2872:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002882 <__c.4311>:
    2882:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2892:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000028a3 <__c.4309>:
    28a3:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    28b3:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    28c3:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000028cc <__c.4307>:
    28cc:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28dc:	36 5d 0a 00                                         6]..

000028e0 <__c.4304>:
    28e0:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28f0:	35 5d 0a 00                                         5]..

000028f4 <__c.4301>:
    28f4:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2904:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002914 <__c.4298>:
    2914:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2924:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2934:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002943 <__c.4296>:
    2943:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2953:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002964 <__c.4294>:
    2964:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2974:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002985 <__c.4292>:
    2985:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2995:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    29a5:	0a 00                                               ..

000029a7 <__c.4290>:
    29a7:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    29b7:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    29c7:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    29d7:	0a 00                                               ..

000029d9 <__c.4278>:
    29d9:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    29e9:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29f9:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2a09:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2a19:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002a2a <__c.4276>:
    2a2a:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2a3a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a4a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a5a:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a6a:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a7a <__c.4274>:
    2a7a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a8a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a9a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2aaa:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2aba:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002aca <__c.4272>:
    2aca:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2ada:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2aea:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2afa:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2b0a:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002b1a <__c.4267>:
    2b1a:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2b2a:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2b3a:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2b4a:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b5a:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b6a:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b7a:	58 48 5d 0a 00                                      XH]..

00002b7f <__c.4265>:
    2b7f:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b8f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b9f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2baf:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2bbf:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bcf:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2bdf:	30 32 58 48 5d 0a 00                                02XH]..

00002be6 <__c.4263>:
    2be6:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bf6:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c06:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c16:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c26:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c36:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c46:	30 32 58 48 5d 0a 00                                02XH]..

00002c4d <__c.4261>:
    2c4d:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c5d:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c6d:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c7d:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c8d:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c9d:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2cad:	30 32 58 48 5d 0a 00                                02XH]..

00002cb4 <__c.4254>:
    2cb4:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002cc3 <__c.4241>:
    2cc3:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002cd0 <__c.4239>:
    2cd0:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2ce0:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002cea <__c.4232>:
    2cea:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2cfa:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002d0a <__c.4230>:
    2d0a:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2d1a:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002d29 <__c.4228>:
    2d29:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d39:	0a 00                                               ..

00002d3b <__c.4221>:
    2d3b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d4b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d55 <__c.4215>:
    2d55:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d65:	0a 00                                               ..

00002d67 <__c.4209>:
    2d67:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d77:	6e 65 5d 0a 00                                      ne]..

00002d7c <__c.4205>:
    2d7c:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d8c <__c.4164>:
    2d8c:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d9c:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2dac:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002db7 <__c.4194>:
    2db7:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2dc7:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2dd7:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002ddf <__c.4171>:
    2ddf:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2def:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002df8 <__c.4157>:
    2df8:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e08:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e12 <__c.4155>:
    2e12:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2e22:	75 73 5d 0a 00                                      us]..

00002e27 <__c.4149>:
    2e27:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e37:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e41 <__c.4147>:
    2e41:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e51:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e5f <__c.4141>:
    2e5f:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e6f:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e77 <__c.4126>:
    2e77:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e87:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e91 <__c.4124>:
    2e91:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2ea1:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002ead <__c.4119>:
    2ead:	25 30 38 6c 64 0d 00                                %08ld..

00002eb4 <__c.4113>:
    2eb4:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2ec4:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002ed5 <__c.4107>:
    2ed5:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002ee3 <__c.4105>:
    2ee3:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2ef3:	69 74 65 0a 00                                      ite..

00002ef8 <__c.4099>:
    2ef8:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002f04 <__c.4097>:
    2f04:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2f14:	6f 3a 25 73 0a 00                                   o:%s..

00002f1a <__c.4095>:
    2f1a:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2f2a:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2f3a:	74 00                                               t.

00002f3c <__c.4555>:
    2f3c:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2f4c:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f5c <__c.4553>:
    2f5c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f6c:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f7c <__c.4551>:
    2f7c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f8c:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f9c:	30 0a 00                                            0..

00002f9f <__c.4549>:
    2f9f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2faf:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2fbf:	70 74 79 0a 00                                      pty..

00002fc4 <__c.4547>:
    2fc4:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2fd4:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2fe4:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002fed <__c.4534>:
    2fed:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2ffd:	20 25 31 30 73 0a 00                                 %10s..

00003004 <__c.4532>:
    3004:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3014:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3024:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000302d <__c.4530>:
    302d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    303d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    304d:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    305d:	74 65 72 73 0a 00                                   ters..

00003063 <__c.4528>:
    3063:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3073:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3083:	65 6d 70 74 79 0a 00                                empty..

0000308a <__c.4526>:
    308a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    309a:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    30aa:	65 6d 70 74 79 0a 00                                empty..

000030b1 <__c.4524>:
    30b1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    30c1:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    30d1:	20 65 6d 70 74 79 0a 00                              empty..

000030d9 <__c.4515>:
    30d9:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000030e8 <__c.4513>:
    30e8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30f8:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3108:	20 66 6f 75 6e 64 0a 00                              found..

00003110 <__c.4511>:
    3110:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3120:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000312f <__c.4509>:
    312f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    313f:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000314f <__c.4507>:
    314f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    315f:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    316f:	70 74 79 0a 00                                      pty..

00003174 <__c.4499>:
    3174:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003182 <__c.4494>:
    3182:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003190 <__c.4492>:
    3190:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31a0:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    31b0:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000031c0 <__c.4490>:
    31c0:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    31d0:	73 0a 00                                            s..

000031d3 <__c.4488>:
    31d3:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31e3:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31f3:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003202 <__c.4486>:
    3202:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3212:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000321e <__c.4484>:
    321e:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    322e:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003239 <__c.4482>:
    3239:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3249:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003259 <__c.4465>:
    3259:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003267 <__c.4460>:
    3267:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003275 <__c.4458>:
    3275:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3285:	73 0a 00                                            s..

00003288 <__c.4456>:
    3288:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3298:	75 6e 64 3a 25 73 0a 00                             und:%s..

000032a0 <__c.4439>:
    32a0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000032ae <__c.4436>:
    32ae:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32be:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32ce:	20 65 72 72 6f 72 0a 00                              error..

000032d6 <__c.4428>:
    32d6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000032e4 <__c.4426>:
    32e4:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32f4:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3304:	20 65 72 72 6f 72 0a 00                              error..

0000330c <__c.4423>:
    330c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    331c:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    332c:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    333c:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    334c:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    335c:	30 32 58 48 0a 00                                   02XH..

00003362 <__c.4421>:
    3362:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3372:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3382:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3392:	20 25 64 0a 00                                       %d..

00003397 <__c.4417>:
    3397:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000033a7 <__c.4415>:
    33a7:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    33b7:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    33c7:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    33d7:	30 78 45 30 31 33 0a 00                             0xE013..

000033df <__c.4413>:
    33df:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    33ef:	6e 64 3a 25 73 0a 00                                nd:%s..

000033f6 <__c.4411>:
    33f6:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3406:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000340e <__c.4387>:
    340e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000341c <__c.4385>:
    341c:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    342c:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003435 <__c.4383>:
    3435:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3445:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000344e <__c.4381>:
    344e:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    345e:	20 20 25 34 64 0a 00                                  %4d..

00003465 <__c.4379>:
    3465:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3475:	20 20 20 25 73 0a 00                                   %s..

0000347c <__c.4377>:
    347c:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    348c:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    349c:	77 72 69 74 65 0a 00                                write..

000034a3 <__c.4375>:
    34a3:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34b3:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    34c3:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034d3 <__c.4373>:
    34d3:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34e3:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34f3:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003502 <__c.4371>:
    3502:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3512:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3522:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

00003532 <__c.4369>:
    3532:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3542:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3552:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003561 <__c.4367>:
    3561:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3571:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3581:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000358f <__c.4365>:
    358f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    359f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    35af:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    35bf:	79 0a 00                                            y..

000035c2 <__c.4351>:
    35c2:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035d0 <__c.4349>:
    35d0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035de <__c.4344>:
    35de:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035ec <__c.4327>:
    35ec:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35fc:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    360c:	25 64 0a 00                                         %d..

00003610 <__c.4310>:
    3610:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3620:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3630:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3640:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003649 <__c.4296>:
    3649:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3659:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3669:	62 69 67 0a 00                                      big..

0000366e <__c.4294>:
    366e:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    367e:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    368e:	63 74 65 72 73 0a 00                                cters..

00003695 <__c.4287>:
    3695:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    36a5:	73 0a 00                                            s..

000036a8 <__c.4285>:
    36a8:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    36b8:	73 0a 00                                            s..

000036bb <__c.4283>:
    36bb:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    36cb:	73 0a 00                                            s..

000036ce <__c.4281>:
    36ce:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000036df <__c.4279>:
    36df:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000036ec <__c.4277>:
    36ec:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036f8 <__c.4275>:
    36f8:	0a 00                                               ..

000036fa <__c.4272>:
    36fa:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    370a:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    371a:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

0000372a <__c.4270>:
    372a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    373a:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    374a:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    375a:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    376a:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003776 <__c.4267>:
    3776:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3786:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3796:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    37a6:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

000037b6 <__c.4265>:
    37b6:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    37c6:	3a 5b 25 73 5d 0a 00                                :[%s]..

000037cd <__c.4255>:
    37cd:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37dd:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    37ed:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37fd:	64 0a 00                                            d..

00003800 <__c.4253>:
    3800:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3810:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3820:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3830:	64 0a 00                                            d..

00003833 <__c.4251>:
    3833:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3843:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3853:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3863:	69 6c 65 64 0a 00                                   iled..

00003869 <__c.4249>:
    3869:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3879:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3889:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3899:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

000038a8 <__c.4236>:
    38a8:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    38b8:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    38c8:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    38d8:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    38e8:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038f9 <__c.4233>:
    38f9:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3909:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3919:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003922 <__c.4231>:
    3922:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3932:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3942:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3952:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000395a <__c.4219>:
    395a:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    396a:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    397a:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    398a:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    399a:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

000039a7 <__c.4194>:
    39a7:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    39b7:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

000039c7 <__c.4185>:
    39c7:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    39d7:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    39e7:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39f7:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003a01 <__c.4166>:
    3a01:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003a0e <__c.4161>:
    3a0e:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a1b <__c.4156>:
    3a1b:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a28 <__c.4148>:
    3a28:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a35 <__c.4146>:
    3a35:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3a45:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a55:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a65:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a75:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a85:	25 6c 64 0a 00                                      %ld..

00003a8a <__c.4130>:
    3a8a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a9a:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3aaa:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003ab6 <__c.4128>:
    3ab6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ac6:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ad6:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003ae1 <__c.4126>:
    3ae1:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3af1:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3b01:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b11:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3b21:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b2c <__c.4124>:
    3b2c:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b3c:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3b4c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b5c:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b6c:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b77 <__c.4122>:
    3b77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b87:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b97:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003ba5 <__c.4120>:
    3ba5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bb5:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3bc5:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3bd5:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003be6 <__c.4118>:
    3be6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bf6:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3c06:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3c16:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3c26:	58 68 0a 00                                         Xh..

00003c2a <__c.4116>:
    3c2a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c3a:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003c4b <__c.4110>:
    3c4b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c5b:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c6b:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c77 <__c.4108>:
    3c77:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c87:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c97:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003ca6 <__c.4106>:
    3ca6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cb6:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3cc6:	25 6c 64 0a 00                                      %ld..

00003ccb <__c.4104>:
    3ccb:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cdb:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ceb:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3cfb:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003d04 <__c.4102>:
    3d04:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d14:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3d24:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3d34:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003d3d <__c.4100>:
    3d3d:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3d4d:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d55 <__c.4098>:
    3d55:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d65:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d75:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d85:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d8e <__c.4096>:
    3d8e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d9e:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003dad <__c.4089>:
    3dad:	0a 00                                               ..

00003daf <__c.4087>:
    3daf:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3dbf:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003dc9 <__c.4085>:
    3dc9:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3dd9:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003de5 <__c.4083>:
    3de5:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3df5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e02 <__c.4081>:
    3e02:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3e12:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003e1f <__c.4079>:
    3e1f:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3e2f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e3c <__c.4077>:
    3e3c:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3e4c:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e58 <__c.4075>:
    3e58:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e68:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e74 <__c.4073>:
    3e74:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e84:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e8e <__c.4071>:
    3e8e:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e9e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ea8 <__c.4069>:
    3ea8:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3eb8:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ec4 <__c.4067>:
    3ec4:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3ed4:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ee0 <__c.4065>:
    3ee0:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3ef0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003efd <__c.4063>:
    3efd:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3f0d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f1a <__c.4061>:
    3f1a:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3f2a:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003f36 <__c.4059>:
    3f36:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3f46:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f50 <__c.4057>:
    3f50:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f60:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f6d <__c.4055>:
    3f6d:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f7d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f8a <__c.4053>:
    3f8a:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f9a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fa7 <__c.4051>:
    3fa7:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3fb7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fc4 <__c.4049>:
    3fc4:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3fd4:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fe1 <__c.4047>:
    3fe1:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3ff1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ffe <__c.4045>:
    3ffe:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    400e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000401b <__c.4043>:
    401b:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    402b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004038 <__c.4041>:
    4038:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4048:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004052 <__c.4039>:
    4052:	0a 25 73 0a 00                                      .%s..

00004057 <__c.3916>:
    4057:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4067:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4077:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4087:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004094 <__c.3907>:
    4094:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    40a4:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    40b4:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    40c4:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000040d0 <__c.3898>:
    40d0:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    40e0:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040f1 <__c.3891>:
    40f1:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4101:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000410a <__c.3885>:
    410a:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    411a:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    412a:	25 73 5d 0a 00                                      %s]..

0000412f <__c.3873>:
    412f:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    413f:	6f 69 6e 74 65 72 0a 00                             ointer..

00004147 <__c.3868>:
    4147:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4157:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4167:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004170 <__c.3862>:
    4170:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4180:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004191 <__c.3855>:
    4191:	74 64 30 32 6c 69 66 20 6e 6f 74 20 69 6e 63 6c     td02lif not incl
    41a1:	75 64 65 64 20 69 6e 20 66 69 72 6d 77 61 72 65     uded in firmware
    41b1:	0a 00                                               ..

000041b3 <__c.3847>:
    41b3:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    41c3:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    41d3:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    41e3:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    41f3:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4203:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4213:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4223:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4233:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    4243:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4253:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4263:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4273:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4283:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4293:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    42a3:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    42b3:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    42c3:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    42d3:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    42e3:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    42f3:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4303:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4313:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    4323:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    4333:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    4343:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    4353:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    4363:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4373:	67 0a 0a 00                                         g...

00004377 <__c.3845>:
    4377:	6c 69 66 20 20 20 68 65 6c 70 0a 00                 lif   help..

00004383 <__c.4610>:
    4383:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4393:	53 4b 0a 00                                         SK..

00004397 <__c.4608>:
    4397:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    43a7:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000043b1 <__c.4606>:
    43b1:	25 2d 31 36 73 00                                   %-16s.

000043b7 <__c.4604>:
    43b7:	25 2d 31 36 73 00                                   %-16s.

000043bd <__c.4602>:
    43bd:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

000043ce <__c.4600>:
    43ce:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    43de:	30 34 78 48 0a 00                                   04xH..

000043e4 <__c.4598>:
    43e4:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    43f4:	64 6f 6e 65 0a 00                                   done..

000043fa <__c.4596>:
    43fa:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    440a:	6f 6e 65 0a 00                                      one..

0000440f <__c.4594>:
    440f:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    441f:	61 6c 69 7a 65 64 0a 00                             alized..

00004427 <__c.4592>:
    4427:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4437:	0a 00                                               ..

00004439 <__c.4590>:
    4439:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4449:	7a 65 64 0a 00                                      zed..

0000444e <__c.4588>:
    444e:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    445e:	69 7a 65 64 0a 00                                   ized..

00004464 <__c.4586>:
    4464:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004475 <__c.4584>:
    4475:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4485:	20 73 74 61 72 74 0a 00                              start..

0000448d <__c.4582>:
    448d:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    449d:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    44ad:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

000044bb <__c.4580>:
    44bb:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000044ca <__c.4578>:
    44ca:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    44da:	0a 00                                               ..

000044dc <__c.4576>:
    44dc:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    44ec:	20 62 75 73 0a 00                                    bus..

000044f2 <__c.4574>:
    44f2:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    4502:	20 62 75 73 0a 00                                    bus..

00004508 <__c.4572>:
    4508:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4518:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004522 <__c.4570>:
    4522:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4532:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000453c <__c.4568>:
    453c:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    454c:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    455c:	35 64 69 73 6b 0a 00                                5disk..

00004563 <__c.4566>:
    4563:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004573 <__c.4564>:
    4573:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4583:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004590 <__c.4562>:
    4590:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    45a0:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000045af <__c.4560>:
    45af:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    45bf:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    45cf:	3a 20 25 6c 64 0a 00                                : %ld..

000045d6 <__c.4558>:
    45d6:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000045e7 <__c.4556>:
    45e7:	53 74 61 72 74 0a 00                                Start..

000045ee <__c.4544>:
    45ee:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000045f7 <__c.4542>:
    45f7:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    4607:	20 25 64 0a 00                                       %d..

0000460c <__c.4540>:
    460c:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

0000461d <__c.4538>:
    461d:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

0000462d <__c.4536>:
    462d:	4f 4b 0a 00                                         OK..

00004631 <__c.4533>:
    4631:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    4641:	20 25 73 0a 00                                       %s..

00004646 <__c.4528>:
    4646:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

0000464f <__c.4526>:
    464f:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    465f:	20 25 64 0a 00                                       %d..

00004664 <__c.4524>:
    4664:	0a 3e 00                                            .>.

00004667 <__c.4511>:
    4667:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4677:	42 42 0a 68 65 6c 70 0a 69 6e 70 75 74 20 20 20     BB.help.input   
    4687:	2d 20 74 6f 67 67 6c 65 20 69 6e 70 75 74 20 64     - toggle input d
    4697:	65 62 75 67 67 69 6e 67 0a 6d 65 6d 20 20 20 20     ebugging.mem    
    46a7:	20 2d 20 64 69 73 70 6c 61 79 20 66 72 65 65 20      - display free 
    46b7:	6d 65 6d 6f 72 79 0a 72 65 73 65 74 20 20 20 2d     memory.reset   -
    46c7:	20 72 65 73 65 74 20 65 6d 75 6c 61 74 6f 72 0a      reset emulator.
    46d7:	73 65 74 64 61 74 65 20 2d 20 73 65 74 20 64 61     setdate - set da
    46e7:	74 65 0a 74 69 6d 65 20 20 20 20 2d 20 64 69 73     te.time    - dis
    46f7:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 74 69 6d     play current tim
    4707:	65 0a 0a 00                                         e...

0000470b <__c.4504>:
    470b:	25 2d 31 36 73 00                                   %-16s.

00004711 <__c.4502>:
    4711:	25 2d 31 36 73 00                                   %-16s.

00004717 <__c.4495>:
    4717:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4727:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004731 <__c.4493>:
    4731:	25 2d 31 36 73 00                                   %-16s.

00004737 <__c.4491>:
    4737:	25 2d 31 36 73 00                                   %-16s.

0000473d <__c.4489>:
    473d:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    474d:	69 6c 65 64 0a 00                                   iled..

00004753 <__c.4487>:
    4753:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4763:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004771 <__c.4481>:
    4771:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4781:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000478b <__c.4475>:
    478b:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    479b:	3a 25 30 32 64 00                                   :%02d.

000047a1 <__c.4461>:
    47a1:	0a 00                                               ..

000047a3 <__c.4459>:
    47a3:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47b3:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047bd <__c.4457>:
    47bd:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47cd:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047d7 <__c.4455>:
    47d7:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47e7:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47f7:	35 64 69 73 6b 0a 00                                5disk..

000047fe <__c.4453>:
    47fe:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000480e <__c.4451>:
    480e:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    481e:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000482b <__c.4449>:
    482b:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    483b:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000484a <__c.4447>:
    484a:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    485a:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    486a:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

0000487a <__ctors_end>:
    487a:	11 24       	eor	r1, r1
    487c:	1f be       	out	0x3f, r1	; 63
    487e:	cf ef       	ldi	r28, 0xFF	; 255
    4880:	d0 e4       	ldi	r29, 0x40	; 64
    4882:	de bf       	out	0x3e, r29	; 62
    4884:	cd bf       	out	0x3d, r28	; 61

00004886 <__do_copy_data>:
    4886:	17 e1       	ldi	r17, 0x17	; 23
    4888:	a0 e0       	ldi	r26, 0x00	; 0
    488a:	b1 e0       	ldi	r27, 0x01	; 1
    488c:	ea ed       	ldi	r30, 0xDA	; 218
    488e:	fd ec       	ldi	r31, 0xCD	; 205
    4890:	01 e0       	ldi	r16, 0x01	; 1
    4892:	0b bf       	out	0x3b, r16	; 59
    4894:	02 c0       	rjmp	.+4      	; 0x489a <__do_copy_data+0x14>
    4896:	07 90       	elpm	r0, Z+
    4898:	0d 92       	st	X+, r0
    489a:	a6 35       	cpi	r26, 0x56	; 86
    489c:	b1 07       	cpc	r27, r17
    489e:	d9 f7       	brne	.-10     	; 0x4896 <__do_copy_data+0x10>

000048a0 <__do_clear_bss>:
    48a0:	21 e2       	ldi	r18, 0x21	; 33
    48a2:	a6 e5       	ldi	r26, 0x56	; 86
    48a4:	b7 e1       	ldi	r27, 0x17	; 23
    48a6:	01 c0       	rjmp	.+2      	; 0x48aa <.do_clear_bss_start>

000048a8 <.do_clear_bss_loop>:
    48a8:	1d 92       	st	X+, r1

000048aa <.do_clear_bss_start>:
    48aa:	a8 3b       	cpi	r26, 0xB8	; 184
    48ac:	b2 07       	cpc	r27, r18
    48ae:	e1 f7       	brne	.-8      	; 0x48a8 <.do_clear_bss_loop>
    48b0:	0e 94 62 e0 	call	0x1c0c4	; 0x1c0c4 <main>
    48b4:	0c 94 eb e6 	jmp	0x1cdd6	; 0x1cdd6 <_exit>

000048b8 <__bad_interrupt>:
    48b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048bc <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    48bc:	e8 2f       	mov	r30, r24
    48be:	e6 95       	lsr	r30
    48c0:	e6 95       	lsr	r30
    48c2:	e6 95       	lsr	r30
    48c4:	93 e0       	ldi	r25, 0x03	; 3
    48c6:	e9 9f       	mul	r30, r25
    48c8:	f0 01       	movw	r30, r0
    48ca:	11 24       	eor	r1, r1
    48cc:	32 a1       	ldd	r19, Z+34	; 0x22
    48ce:	28 2f       	mov	r18, r24
    48d0:	27 70       	andi	r18, 0x07	; 7
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	01 c0       	rjmp	.+2      	; 0x48da <chip_select+0x1e>
    48d8:	88 0f       	add	r24, r24
    48da:	2a 95       	dec	r18
    48dc:	ea f7       	brpl	.-6      	; 0x48d8 <chip_select+0x1c>
    48de:	98 2f       	mov	r25, r24
    48e0:	90 95       	com	r25
    48e2:	93 23       	and	r25, r19
    48e4:	92 a3       	std	Z+34, r25	; 0x22
    48e6:	91 a1       	ldd	r25, Z+33	; 0x21
    48e8:	89 2b       	or	r24, r25
    48ea:	81 a3       	std	Z+33, r24	; 0x21
    48ec:	08 95       	ret

000048ee <chip_deselect>:
    48ee:	e8 2f       	mov	r30, r24
    48f0:	e6 95       	lsr	r30
    48f2:	e6 95       	lsr	r30
    48f4:	e6 95       	lsr	r30
    48f6:	93 e0       	ldi	r25, 0x03	; 3
    48f8:	e9 9f       	mul	r30, r25
    48fa:	f0 01       	movw	r30, r0
    48fc:	11 24       	eor	r1, r1
    48fe:	32 a1       	ldd	r19, Z+34	; 0x22
    4900:	28 2f       	mov	r18, r24
    4902:	27 70       	andi	r18, 0x07	; 7
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	01 c0       	rjmp	.+2      	; 0x490c <chip_deselect+0x1e>
    490a:	88 0f       	add	r24, r24
    490c:	2a 95       	dec	r18
    490e:	ea f7       	brpl	.-6      	; 0x490a <chip_deselect+0x1c>
    4910:	93 2f       	mov	r25, r19
    4912:	98 2b       	or	r25, r24
    4914:	92 a3       	std	Z+34, r25	; 0x22
    4916:	91 a1       	ldd	r25, Z+33	; 0x21
    4918:	89 2b       	or	r24, r25
    491a:	81 a3       	std	Z+33, r24	; 0x21
    491c:	08 95       	ret

0000491e <chip_select_init>:
    491e:	e7 cf       	rjmp	.-50     	; 0x48ee <chip_deselect>
    4920:	08 95       	ret

00004922 <spi_end>:
    4922:	cf 93       	push	r28
    4924:	ad b7       	in	r26, 0x3d	; 61
    4926:	be b7       	in	r27, 0x3e	; 62
    4928:	17 97       	sbiw	r26, 0x07	; 7
    492a:	0f b6       	in	r0, 0x3f	; 63
    492c:	f8 94       	cli
    492e:	be bf       	out	0x3e, r27	; 62
    4930:	0f be       	out	0x3f, r0	; 63
    4932:	ad bf       	out	0x3d, r26	; 61
    4934:	c8 2f       	mov	r28, r24
    4936:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    493a:	8c 17       	cp	r24, r28
    493c:	99 f0       	breq	.+38     	; 0x4964 <spi_end+0x42>
    493e:	8f 3f       	cpi	r24, 0xFF	; 255
    4940:	89 f0       	breq	.+34     	; 0x4964 <spi_end+0x42>
    4942:	2c 2f       	mov	r18, r28
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	ed b7       	in	r30, 0x3d	; 61
    4948:	fe b7       	in	r31, 0x3e	; 62
    494a:	37 83       	std	Z+7, r19	; 0x07
    494c:	26 83       	std	Z+6, r18	; 0x06
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	95 83       	std	Z+5, r25	; 0x05
    4952:	84 83       	std	Z+4, r24	; 0x04
    4954:	82 ec       	ldi	r24, 0xC2	; 194
    4956:	91 e0       	ldi	r25, 0x01	; 1
    4958:	a0 e0       	ldi	r26, 0x00	; 0
    495a:	81 83       	std	Z+1, r24	; 0x01
    495c:	92 83       	std	Z+2, r25	; 0x02
    495e:	a3 83       	std	Z+3, r26	; 0x03
    4960:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    4964:	8c 2f       	mov	r24, r28
    4966:	c3 df       	rcall	.-122    	; 0x48ee <chip_deselect>
    4968:	8f ef       	ldi	r24, 0xFF	; 255
    496a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    496e:	ad b7       	in	r26, 0x3d	; 61
    4970:	be b7       	in	r27, 0x3e	; 62
    4972:	17 96       	adiw	r26, 0x07	; 7
    4974:	0f b6       	in	r0, 0x3f	; 63
    4976:	f8 94       	cli
    4978:	be bf       	out	0x3e, r27	; 62
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	ad bf       	out	0x3d, r26	; 61
    497e:	cf 91       	pop	r28
    4980:	08 95       	ret

00004982 <spi_TX_buffer>:
    4982:	cd c4       	rjmp	.+2458   	; 0x531e <SPI0_TX>
    4984:	08 95       	ret

00004986 <spi_RX_buffer>:
    4986:	f5 c4       	rjmp	.+2538   	; 0x5372 <SPI0_RX>
    4988:	08 95       	ret

0000498a <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    498a:	a1 e0       	ldi	r26, 0x01	; 1
    498c:	b0 e0       	ldi	r27, 0x00	; 0
    498e:	eb ec       	ldi	r30, 0xCB	; 203
    4990:	f4 e2       	ldi	r31, 0x24	; 36
    4992:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    4996:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4998:	61 e0       	ldi	r22, 0x01	; 1
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	ce 01       	movw	r24, r28
    499e:	01 96       	adiw	r24, 0x01	; 1
    49a0:	be d4       	rcall	.+2428   	; 0x531e <SPI0_TX>
#endif
}
    49a2:	21 96       	adiw	r28, 0x01	; 1
    49a4:	e2 e0       	ldi	r30, 0x02	; 2
    49a6:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000049aa <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    49aa:	cf 92       	push	r12
    49ac:	df 92       	push	r13
    49ae:	ef 92       	push	r14
    49b0:	ff 92       	push	r15
    49b2:	6b 01       	movw	r12, r22
    49b4:	7c 01       	movw	r14, r24
    49b6:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    49b8:	9a df       	rcall	.-204    	; 0x48ee <chip_deselect>
    _cs_pin = 0xff;
    49ba:	8f ef       	ldi	r24, 0xFF	; 255
    49bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    49c0:	c7 01       	movw	r24, r14
    49c2:	b6 01       	movw	r22, r12
    49c4:	7f d4       	rcall	.+2302   	; 0x52c4 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    49ca:	3c d4       	rcall	.+2168   	; 0x5244 <SPI0_Mode>
    49cc:	8f ef       	ldi	r24, 0xFF	; 255
    49ce:	dd df       	rcall	.-70     	; 0x498a <spi_TX>
    _spi_clock = clock;
    49d0:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    49d4:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    49d8:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    49dc:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    49e0:	ff 90       	pop	r15
    49e2:	ef 90       	pop	r14
    49e4:	df 90       	pop	r13
    49e6:	cf 90       	pop	r12
    49e8:	08 95       	ret

000049ea <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    49ea:	cf 92       	push	r12
    49ec:	df 92       	push	r13
    49ee:	ef 92       	push	r14
    49f0:	ff 92       	push	r15
    49f2:	cf 93       	push	r28
    49f4:	df 93       	push	r29
    49f6:	ad b7       	in	r26, 0x3d	; 61
    49f8:	be b7       	in	r27, 0x3e	; 62
    49fa:	17 97       	sbiw	r26, 0x07	; 7
    49fc:	0f b6       	in	r0, 0x3f	; 63
    49fe:	f8 94       	cli
    4a00:	be bf       	out	0x3e, r27	; 62
    4a02:	0f be       	out	0x3f, r0	; 63
    4a04:	ad bf       	out	0x3d, r26	; 61
    4a06:	6b 01       	movw	r12, r22
    4a08:	7c 01       	movw	r14, r24
    4a0a:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4a0c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4a10:	8f 3f       	cpi	r24, 0xFF	; 255
    4a12:	79 f0       	breq	.+30     	; 0x4a32 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4a14:	ed b7       	in	r30, 0x3d	; 61
    4a16:	fe b7       	in	r31, 0x3e	; 62
    4a18:	46 83       	std	Z+6, r20	; 0x06
    4a1a:	d7 83       	std	Z+7, r29	; 0x07
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	95 83       	std	Z+5, r25	; 0x05
    4a20:	84 83       	std	Z+4, r24	; 0x04
    4a22:	80 ee       	ldi	r24, 0xE0	; 224
    4a24:	91 e0       	ldi	r25, 0x01	; 1
    4a26:	a0 e0       	ldi	r26, 0x00	; 0
    4a28:	81 83       	std	Z+1, r24	; 0x01
    4a2a:	92 83       	std	Z+2, r25	; 0x02
    4a2c:	a3 83       	std	Z+3, r26	; 0x03
    4a2e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4a32:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4a36:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4a3a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4a3e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4a42:	8c 15       	cp	r24, r12
    4a44:	9d 05       	cpc	r25, r13
    4a46:	ae 05       	cpc	r26, r14
    4a48:	bf 05       	cpc	r27, r15
    4a4a:	21 f0       	breq	.+8      	; 0x4a54 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4a4c:	ae 01       	movw	r20, r28
    4a4e:	c7 01       	movw	r24, r14
    4a50:	b6 01       	movw	r22, r12
    4a52:	ab df       	rcall	.-170    	; 0x49aa <spi_init>
    }

    chip_select(pin);
    4a54:	8c 2f       	mov	r24, r28
    4a56:	32 df       	rcall	.-412    	; 0x48bc <chip_select>
    _cs_pin = pin;
    4a58:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4a5c:	ad b7       	in	r26, 0x3d	; 61
    4a5e:	be b7       	in	r27, 0x3e	; 62
    4a60:	17 96       	adiw	r26, 0x07	; 7
    4a62:	0f b6       	in	r0, 0x3f	; 63
    4a64:	f8 94       	cli
    4a66:	be bf       	out	0x3e, r27	; 62
    4a68:	0f be       	out	0x3f, r0	; 63
    4a6a:	ad bf       	out	0x3d, r26	; 61
    4a6c:	df 91       	pop	r29
    4a6e:	cf 91       	pop	r28
    4a70:	ff 90       	pop	r15
    4a72:	ef 90       	pop	r14
    4a74:	df 90       	pop	r13
    4a76:	cf 90       	pop	r12
    4a78:	08 95       	ret

00004a7a <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4a7a:	a1 e0       	ldi	r26, 0x01	; 1
    4a7c:	b0 e0       	ldi	r27, 0x00	; 0
    4a7e:	e3 e4       	ldi	r30, 0x43	; 67
    4a80:	f5 e2       	ldi	r31, 0x25	; 37
    4a82:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    4a86:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4a88:	61 e0       	ldi	r22, 0x01	; 1
    4a8a:	70 e0       	ldi	r23, 0x00	; 0
    4a8c:	ce 01       	movw	r24, r28
    4a8e:	01 96       	adiw	r24, 0x01	; 1
    4a90:	5a d4       	rcall	.+2228   	; 0x5346 <SPI0_TXRX>
#endif
    return(data);
}
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	21 96       	adiw	r28, 0x01	; 1
    4a96:	e2 e0       	ldi	r30, 0x02	; 2
    4a98:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00004a9c <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4a9c:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <__data_end>
    GPIO_PIN_HI(LED2);
    4aa0:	2c 9a       	sbi	0x05, 4	; 5
    4aa2:	24 9a       	sbi	0x04, 4	; 4
    4aa4:	08 95       	ret

00004aa6 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4aa6:	10 92 56 17 	sts	0x1756, r1	; 0x801756 <__data_end>
    GPIO_PIN_LOW(LED2);
    4aaa:	2c 98       	cbi	0x05, 4	; 5
    4aac:	24 9a       	sbi	0x04, 4	; 4
    4aae:	08 95       	ret

00004ab0 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4ab0:	a2 e0       	ldi	r26, 0x02	; 2
    4ab2:	b0 e0       	ldi	r27, 0x00	; 0
    4ab4:	ee e5       	ldi	r30, 0x5E	; 94
    4ab6:	f5 e2       	ldi	r31, 0x25	; 37
    4ab8:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4abc:	20 91 b4 21 	lds	r18, 0x21B4	; 0x8021b4 <__brkval>
    4ac0:	30 91 b5 21 	lds	r19, 0x21B5	; 0x8021b5 <__brkval+0x1>
    4ac4:	21 15       	cp	r18, r1
    4ac6:	31 05       	cpc	r19, r1
    4ac8:	11 f4       	brne	.+4      	; 0x4ace <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4aca:	28 eb       	ldi	r18, 0xB8	; 184
    4acc:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4ace:	ce 01       	movw	r24, r28
    4ad0:	01 96       	adiw	r24, 0x01	; 1
    4ad2:	82 1b       	sub	r24, r18
    4ad4:	93 0b       	sbc	r25, r19
    4ad6:	22 96       	adiw	r28, 0x02	; 2
    4ad8:	e2 e0       	ldi	r30, 0x02	; 2
    4ada:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00004ade <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4ade:	a9 e0       	ldi	r26, 0x09	; 9
    4ae0:	b0 e0       	ldi	r27, 0x00	; 0
    4ae2:	e5 e7       	ldi	r30, 0x75	; 117
    4ae4:	f5 e2       	ldi	r31, 0x25	; 37
    4ae6:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4aea:	e2 df       	rcall	.-60     	; 0x4ab0 <freeRam>
    4aec:	99 87       	std	Y+9, r25	; 0x09
    4aee:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4af0:	ed b7       	in	r30, 0x3d	; 61
    4af2:	fe b7       	in	r31, 0x3e	; 62
    4af4:	95 83       	std	Z+5, r25	; 0x05
    4af6:	84 83       	std	Z+4, r24	; 0x04
    4af8:	87 e0       	ldi	r24, 0x07	; 7
    4afa:	93 e0       	ldi	r25, 0x03	; 3
    4afc:	a0 e0       	ldi	r26, 0x00	; 0
    4afe:	81 83       	std	Z+1, r24	; 0x01
    4b00:	92 83       	std	Z+2, r25	; 0x02
    4b02:	a3 83       	std	Z+3, r26	; 0x03
    4b04:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4b08:	8f ef       	ldi	r24, 0xFF	; 255
    4b0a:	90 e4       	ldi	r25, 0x40	; 64
    4b0c:	ed b7       	in	r30, 0x3d	; 61
    4b0e:	fe b7       	in	r31, 0x3e	; 62
    4b10:	95 83       	std	Z+5, r25	; 0x05
    4b12:	84 83       	std	Z+4, r24	; 0x04
    4b14:	84 ef       	ldi	r24, 0xF4	; 244
    4b16:	92 e0       	ldi	r25, 0x02	; 2
    4b18:	a0 e0       	ldi	r26, 0x00	; 0
    4b1a:	81 83       	std	Z+1, r24	; 0x01
    4b1c:	92 83       	std	Z+2, r25	; 0x02
    4b1e:	a3 83       	std	Z+3, r26	; 0x03
    4b20:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4b24:	ce 01       	movw	r24, r28
    4b26:	08 96       	adiw	r24, 0x08	; 8
    4b28:	ed b7       	in	r30, 0x3d	; 61
    4b2a:	fe b7       	in	r31, 0x3e	; 62
    4b2c:	95 83       	std	Z+5, r25	; 0x05
    4b2e:	84 83       	std	Z+4, r24	; 0x04
    4b30:	81 ee       	ldi	r24, 0xE1	; 225
    4b32:	92 e0       	ldi	r25, 0x02	; 2
    4b34:	a0 e0       	ldi	r26, 0x00	; 0
    4b36:	81 83       	std	Z+1, r24	; 0x01
    4b38:	92 83       	std	Z+2, r25	; 0x02
    4b3a:	a3 83       	std	Z+3, r26	; 0x03
    4b3c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4b40:	88 eb       	ldi	r24, 0xB8	; 184
    4b42:	91 e2       	ldi	r25, 0x21	; 33
    4b44:	ed b7       	in	r30, 0x3d	; 61
    4b46:	fe b7       	in	r31, 0x3e	; 62
    4b48:	97 83       	std	Z+7, r25	; 0x07
    4b4a:	86 83       	std	Z+6, r24	; 0x06
    4b4c:	86 e5       	ldi	r24, 0x56	; 86
    4b4e:	97 e1       	ldi	r25, 0x17	; 23
    4b50:	95 83       	std	Z+5, r25	; 0x05
    4b52:	84 83       	std	Z+4, r24	; 0x04
    4b54:	83 ec       	ldi	r24, 0xC3	; 195
    4b56:	92 e0       	ldi	r25, 0x02	; 2
    4b58:	a0 e0       	ldi	r26, 0x00	; 0
    4b5a:	81 83       	std	Z+1, r24	; 0x01
    4b5c:	92 83       	std	Z+2, r25	; 0x02
    4b5e:	a3 83       	std	Z+3, r26	; 0x03
    4b60:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4b64:	86 e5       	ldi	r24, 0x56	; 86
    4b66:	97 e1       	ldi	r25, 0x17	; 23
    4b68:	ed b7       	in	r30, 0x3d	; 61
    4b6a:	fe b7       	in	r31, 0x3e	; 62
    4b6c:	97 83       	std	Z+7, r25	; 0x07
    4b6e:	86 83       	std	Z+6, r24	; 0x06
    4b70:	80 e0       	ldi	r24, 0x00	; 0
    4b72:	91 e0       	ldi	r25, 0x01	; 1
    4b74:	95 83       	std	Z+5, r25	; 0x05
    4b76:	84 83       	std	Z+4, r24	; 0x04
    4b78:	85 ea       	ldi	r24, 0xA5	; 165
    4b7a:	92 e0       	ldi	r25, 0x02	; 2
    4b7c:	a0 e0       	ldi	r26, 0x00	; 0
    4b7e:	81 83       	std	Z+1, r24	; 0x01
    4b80:	92 83       	std	Z+2, r25	; 0x02
    4b82:	a3 83       	std	Z+3, r26	; 0x03
    4b84:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	ed b7       	in	r30, 0x3d	; 61
    4b8e:	fe b7       	in	r31, 0x3e	; 62
    4b90:	97 83       	std	Z+7, r25	; 0x07
    4b92:	86 83       	std	Z+6, r24	; 0x06
    4b94:	88 eb       	ldi	r24, 0xB8	; 184
    4b96:	91 e2       	ldi	r25, 0x21	; 33
    4b98:	95 83       	std	Z+5, r25	; 0x05
    4b9a:	84 83       	std	Z+4, r24	; 0x04
    4b9c:	87 e8       	ldi	r24, 0x87	; 135
    4b9e:	92 e0       	ldi	r25, 0x02	; 2
    4ba0:	a0 e0       	ldi	r26, 0x00	; 0
    4ba2:	81 83       	std	Z+1, r24	; 0x01
    4ba4:	92 83       	std	Z+2, r25	; 0x02
    4ba6:	a3 83       	std	Z+3, r26	; 0x03
    4ba8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4bac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4bb0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4bb4:	ed b7       	in	r30, 0x3d	; 61
    4bb6:	fe b7       	in	r31, 0x3e	; 62
    4bb8:	97 83       	std	Z+7, r25	; 0x07
    4bba:	86 83       	std	Z+6, r24	; 0x06
    4bbc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4bc0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4bc4:	95 83       	std	Z+5, r25	; 0x05
    4bc6:	84 83       	std	Z+4, r24	; 0x04
    4bc8:	89 e6       	ldi	r24, 0x69	; 105
    4bca:	92 e0       	ldi	r25, 0x02	; 2
    4bcc:	a0 e0       	ldi	r26, 0x00	; 0
    4bce:	81 83       	std	Z+1, r24	; 0x01
    4bd0:	92 83       	std	Z+2, r25	; 0x02
    4bd2:	a3 83       	std	Z+3, r26	; 0x03
    4bd4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4bd8:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <__brkval>
    4bdc:	90 91 b5 21 	lds	r25, 0x21B5	; 0x8021b5 <__brkval+0x1>
    4be0:	ed b7       	in	r30, 0x3d	; 61
    4be2:	fe b7       	in	r31, 0x3e	; 62
    4be4:	95 83       	std	Z+5, r25	; 0x05
    4be6:	84 83       	std	Z+4, r24	; 0x04
    4be8:	85 e5       	ldi	r24, 0x55	; 85
    4bea:	92 e0       	ldi	r25, 0x02	; 2
    4bec:	a0 e0       	ldi	r26, 0x00	; 0
    4bee:	81 83       	std	Z+1, r24	; 0x01
    4bf0:	92 83       	std	Z+2, r25	; 0x02
    4bf2:	a3 83       	std	Z+3, r26	; 0x03
    4bf4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

}
    4bf8:	29 96       	adiw	r28, 0x09	; 9
    4bfa:	e2 e0       	ldi	r30, 0x02	; 2
    4bfc:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00004c00 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	cf 93       	push	r28
    4c0a:	df 93       	push	r29
    4c0c:	ad b7       	in	r26, 0x3d	; 61
    4c0e:	be b7       	in	r27, 0x3e	; 62
    4c10:	17 97       	sbiw	r26, 0x07	; 7
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	be bf       	out	0x3e, r27	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	ad bf       	out	0x3d, r26	; 61
    4c1c:	8c 01       	movw	r16, r24
    4c1e:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4c20:	0e 94 a9 e5 	call	0x1cb52	; 0x1cb52 <calloc>
    4c24:	ec 01       	movw	r28, r24
    if(!p)
    4c26:	89 2b       	or	r24, r25
    4c28:	71 f4       	brne	.+28     	; 0x4c46 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4c2a:	ed b7       	in	r30, 0x3d	; 61
    4c2c:	fe b7       	in	r31, 0x3e	; 62
    4c2e:	f7 82       	std	Z+7, r15	; 0x07
    4c30:	e6 82       	std	Z+6, r14	; 0x06
    4c32:	15 83       	std	Z+5, r17	; 0x05
    4c34:	04 83       	std	Z+4, r16	; 0x04
    4c36:	8a e3       	ldi	r24, 0x3A	; 58
    4c38:	92 e0       	ldi	r25, 0x02	; 2
    4c3a:	a0 e0       	ldi	r26, 0x00	; 0
    4c3c:	81 83       	std	Z+1, r24	; 0x01
    4c3e:	92 83       	std	Z+2, r25	; 0x02
    4c40:	a3 83       	std	Z+3, r26	; 0x03
    4c42:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }
    return(p);
}
    4c46:	ce 01       	movw	r24, r28
    4c48:	cd b7       	in	r28, 0x3d	; 61
    4c4a:	de b7       	in	r29, 0x3e	; 62
    4c4c:	27 96       	adiw	r28, 0x07	; 7
    4c4e:	e6 e0       	ldi	r30, 0x06	; 6
    4c50:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00004c54 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4c54:	0f 93       	push	r16
    4c56:	1f 93       	push	r17
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	00 d0       	rcall	.+0      	; 0x4c5e <safemalloc+0xa>
    4c5e:	00 d0       	rcall	.+0      	; 0x4c60 <safemalloc+0xc>
    4c60:	1f 92       	push	r1
    4c62:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4c64:	61 e0       	ldi	r22, 0x01	; 1
    4c66:	70 e0       	ldi	r23, 0x00	; 0
    4c68:	0e 94 a9 e5 	call	0x1cb52	; 0x1cb52 <calloc>
    4c6c:	ec 01       	movw	r28, r24
    if(!p)
    4c6e:	89 2b       	or	r24, r25
    4c70:	61 f4       	brne	.+24     	; 0x4c8a <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4c72:	ed b7       	in	r30, 0x3d	; 61
    4c74:	fe b7       	in	r31, 0x3e	; 62
    4c76:	15 83       	std	Z+5, r17	; 0x05
    4c78:	04 83       	std	Z+4, r16	; 0x04
    4c7a:	82 e2       	ldi	r24, 0x22	; 34
    4c7c:	92 e0       	ldi	r25, 0x02	; 2
    4c7e:	a0 e0       	ldi	r26, 0x00	; 0
    4c80:	81 83       	std	Z+1, r24	; 0x01
    4c82:	92 83       	std	Z+2, r25	; 0x02
    4c84:	a3 83       	std	Z+3, r26	; 0x03
    4c86:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }
    return(p);
}
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
    4c90:	25 96       	adiw	r28, 0x05	; 5
    4c92:	e4 e0       	ldi	r30, 0x04	; 4
    4c94:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00004c98 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4c98:	ad b7       	in	r26, 0x3d	; 61
    4c9a:	be b7       	in	r27, 0x3e	; 62
    4c9c:	17 97       	sbiw	r26, 0x07	; 7
    4c9e:	0f b6       	in	r0, 0x3f	; 63
    4ca0:	f8 94       	cli
    4ca2:	be bf       	out	0x3e, r27	; 62
    4ca4:	0f be       	out	0x3f, r0	; 63
    4ca6:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4ca8:	00 97       	sbiw	r24, 0x00	; 0
    4caa:	11 f1       	breq	.+68     	; 0x4cf0 <safefree+0x58>
        return;

    if(__brkval)
    4cac:	20 91 b4 21 	lds	r18, 0x21B4	; 0x8021b4 <__brkval>
    4cb0:	30 91 b5 21 	lds	r19, 0x21B5	; 0x8021b5 <__brkval+0x1>
    4cb4:	21 15       	cp	r18, r1
    4cb6:	31 05       	cpc	r19, r1
    4cb8:	11 f4       	brne	.+4      	; 0x4cbe <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4cba:	28 eb       	ldi	r18, 0xB8	; 184
    4cbc:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4cbe:	41 e2       	ldi	r20, 0x21	; 33
    4cc0:	88 3b       	cpi	r24, 0xB8	; 184
    4cc2:	94 07       	cpc	r25, r20
    4cc4:	30 f0       	brcs	.+12     	; 0x4cd2 <safefree+0x3a>
    4cc6:	28 17       	cp	r18, r24
    4cc8:	39 07       	cpc	r19, r25
    4cca:	18 f0       	brcs	.+6      	; 0x4cd2 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4ccc:	0e 94 5b e6 	call	0x1ccb6	; 0x1ccb6 <free>
        return;
    4cd0:	0f c0       	rjmp	.+30     	; 0x4cf0 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4cd2:	ed b7       	in	r30, 0x3d	; 61
    4cd4:	fe b7       	in	r31, 0x3e	; 62
    4cd6:	37 83       	std	Z+7, r19	; 0x07
    4cd8:	26 83       	std	Z+6, r18	; 0x06
    4cda:	95 83       	std	Z+5, r25	; 0x05
    4cdc:	84 83       	std	Z+4, r24	; 0x04
    4cde:	8d ef       	ldi	r24, 0xFD	; 253
    4ce0:	91 e0       	ldi	r25, 0x01	; 1
    4ce2:	a0 e0       	ldi	r26, 0x00	; 0
    4ce4:	81 83       	std	Z+1, r24	; 0x01
    4ce6:	92 83       	std	Z+2, r25	; 0x02
    4ce8:	a3 83       	std	Z+3, r26	; 0x03
    4cea:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    PrintFree();
    4cee:	f7 de       	rcall	.-530    	; 0x4ade <PrintFree>
}
    4cf0:	ad b7       	in	r26, 0x3d	; 61
    4cf2:	be b7       	in	r27, 0x3e	; 62
    4cf4:	17 96       	adiw	r26, 0x07	; 7
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	be bf       	out	0x3e, r27	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	ad bf       	out	0x3d, r26	; 61
    4d00:	08 95       	ret

00004d02 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4d02:	64 36       	cpi	r22, 0x64	; 100
    4d04:	71 05       	cpc	r23, r1
    4d06:	81 05       	cpc	r24, r1
    4d08:	91 05       	cpc	r25, r1
    4d0a:	58 f0       	brcs	.+22     	; 0x4d22 <delayus+0x20>
    {
        us -= 100U;
    4d0c:	64 56       	subi	r22, 0x64	; 100
    4d0e:	71 09       	sbc	r23, r1
    4d10:	81 09       	sbc	r24, r1
    4d12:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4d14:	e3 ef       	ldi	r30, 0xF3	; 243
    4d16:	f1 e0       	ldi	r31, 0x01	; 1
    4d18:	31 97       	sbiw	r30, 0x01	; 1
    4d1a:	f1 f7       	brne	.-4      	; 0x4d18 <delayus+0x16>
    4d1c:	00 c0       	rjmp	.+0      	; 0x4d1e <delayus+0x1c>
    4d1e:	00 00       	nop
    4d20:	f0 cf       	rjmp	.-32     	; 0x4d02 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4d22:	6a 30       	cpi	r22, 0x0A	; 10
    4d24:	71 05       	cpc	r23, r1
    4d26:	81 05       	cpc	r24, r1
    4d28:	91 05       	cpc	r25, r1
    4d2a:	48 f0       	brcs	.+18     	; 0x4d3e <delayus+0x3c>
    {
        us -= 10U;
    4d2c:	6a 50       	subi	r22, 0x0A	; 10
    4d2e:	71 09       	sbc	r23, r1
    4d30:	81 09       	sbc	r24, r1
    4d32:	91 09       	sbc	r25, r1
    4d34:	f2 e4       	ldi	r31, 0x42	; 66
    4d36:	fa 95       	dec	r31
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <delayus+0x34>
    4d3a:	00 c0       	rjmp	.+0      	; 0x4d3c <delayus+0x3a>
    4d3c:	f2 cf       	rjmp	.-28     	; 0x4d22 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4d3e:	61 15       	cp	r22, r1
    4d40:	71 05       	cpc	r23, r1
    4d42:	81 05       	cpc	r24, r1
    4d44:	91 05       	cpc	r25, r1
    4d46:	49 f0       	breq	.+18     	; 0x4d5a <delayus+0x58>
    {
        --us;
    4d48:	61 50       	subi	r22, 0x01	; 1
    4d4a:	71 09       	sbc	r23, r1
    4d4c:	81 09       	sbc	r24, r1
    4d4e:	91 09       	sbc	r25, r1
    4d50:	26 e0       	ldi	r18, 0x06	; 6
    4d52:	2a 95       	dec	r18
    4d54:	f1 f7       	brne	.-4      	; 0x4d52 <delayus+0x50>
    4d56:	00 c0       	rjmp	.+0      	; 0x4d58 <delayus+0x56>
    4d58:	f2 cf       	rjmp	.-28     	; 0x4d3e <delayus+0x3c>
        _delay_us(1);
    }
}
    4d5a:	08 95       	ret

00004d5c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4d5c:	61 15       	cp	r22, r1
    4d5e:	71 05       	cpc	r23, r1
    4d60:	81 05       	cpc	r24, r1
    4d62:	91 05       	cpc	r25, r1
    4d64:	09 f4       	brne	.+2      	; 0x4d68 <delayms+0xc>
    4d66:	41 c0       	rjmp	.+130    	; 0x4dea <delayms+0x8e>
    4d68:	e3 ef       	ldi	r30, 0xF3	; 243
    4d6a:	f1 e0       	ldi	r31, 0x01	; 1
    4d6c:	31 97       	sbiw	r30, 0x01	; 1
    4d6e:	f1 f7       	brne	.-4      	; 0x4d6c <delayms+0x10>
    4d70:	00 c0       	rjmp	.+0      	; 0x4d72 <delayms+0x16>
    4d72:	00 00       	nop
    4d74:	e3 ef       	ldi	r30, 0xF3	; 243
    4d76:	f1 e0       	ldi	r31, 0x01	; 1
    4d78:	31 97       	sbiw	r30, 0x01	; 1
    4d7a:	f1 f7       	brne	.-4      	; 0x4d78 <delayms+0x1c>
    4d7c:	00 c0       	rjmp	.+0      	; 0x4d7e <delayms+0x22>
    4d7e:	00 00       	nop
    4d80:	e3 ef       	ldi	r30, 0xF3	; 243
    4d82:	f1 e0       	ldi	r31, 0x01	; 1
    4d84:	31 97       	sbiw	r30, 0x01	; 1
    4d86:	f1 f7       	brne	.-4      	; 0x4d84 <delayms+0x28>
    4d88:	00 c0       	rjmp	.+0      	; 0x4d8a <delayms+0x2e>
    4d8a:	00 00       	nop
    4d8c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d8e:	f1 e0       	ldi	r31, 0x01	; 1
    4d90:	31 97       	sbiw	r30, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <delayms+0x34>
    4d94:	00 c0       	rjmp	.+0      	; 0x4d96 <delayms+0x3a>
    4d96:	00 00       	nop
    4d98:	e3 ef       	ldi	r30, 0xF3	; 243
    4d9a:	f1 e0       	ldi	r31, 0x01	; 1
    4d9c:	31 97       	sbiw	r30, 0x01	; 1
    4d9e:	f1 f7       	brne	.-4      	; 0x4d9c <delayms+0x40>
    4da0:	00 c0       	rjmp	.+0      	; 0x4da2 <delayms+0x46>
    4da2:	00 00       	nop
    4da4:	e3 ef       	ldi	r30, 0xF3	; 243
    4da6:	f1 e0       	ldi	r31, 0x01	; 1
    4da8:	31 97       	sbiw	r30, 0x01	; 1
    4daa:	f1 f7       	brne	.-4      	; 0x4da8 <delayms+0x4c>
    4dac:	00 c0       	rjmp	.+0      	; 0x4dae <delayms+0x52>
    4dae:	00 00       	nop
    4db0:	e3 ef       	ldi	r30, 0xF3	; 243
    4db2:	f1 e0       	ldi	r31, 0x01	; 1
    4db4:	31 97       	sbiw	r30, 0x01	; 1
    4db6:	f1 f7       	brne	.-4      	; 0x4db4 <delayms+0x58>
    4db8:	00 c0       	rjmp	.+0      	; 0x4dba <delayms+0x5e>
    4dba:	00 00       	nop
    4dbc:	e3 ef       	ldi	r30, 0xF3	; 243
    4dbe:	f1 e0       	ldi	r31, 0x01	; 1
    4dc0:	31 97       	sbiw	r30, 0x01	; 1
    4dc2:	f1 f7       	brne	.-4      	; 0x4dc0 <delayms+0x64>
    4dc4:	00 c0       	rjmp	.+0      	; 0x4dc6 <delayms+0x6a>
    4dc6:	00 00       	nop
    4dc8:	e3 ef       	ldi	r30, 0xF3	; 243
    4dca:	f1 e0       	ldi	r31, 0x01	; 1
    4dcc:	31 97       	sbiw	r30, 0x01	; 1
    4dce:	f1 f7       	brne	.-4      	; 0x4dcc <delayms+0x70>
    4dd0:	00 c0       	rjmp	.+0      	; 0x4dd2 <delayms+0x76>
    4dd2:	00 00       	nop
    4dd4:	e3 ef       	ldi	r30, 0xF3	; 243
    4dd6:	f1 e0       	ldi	r31, 0x01	; 1
    4dd8:	31 97       	sbiw	r30, 0x01	; 1
    4dda:	f1 f7       	brne	.-4      	; 0x4dd8 <delayms+0x7c>
    4ddc:	00 c0       	rjmp	.+0      	; 0x4dde <delayms+0x82>
    4dde:	00 00       	nop
    4de0:	61 50       	subi	r22, 0x01	; 1
    4de2:	71 09       	sbc	r23, r1
    4de4:	81 09       	sbc	r24, r1
    4de6:	91 09       	sbc	r25, r1
    4de8:	b9 cf       	rjmp	.-142    	; 0x4d5c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4dea:	08 95       	ret

00004dec <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4dec:	81 11       	cpse	r24, r1
    4dee:	0e c0       	rjmp	.+28     	; 0x4e0c <uart_rx_flush+0x20>
    4df0:	f8 94       	cli
    4df2:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts+0x4>
    4df6:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <uarts+0x3>
    4dfa:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts>
    4dfe:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    4e02:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <uarts+0x2>
    4e06:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x5>
    4e0a:	78 94       	sei
    4e0c:	08 95       	ret

00004e0e <uart_ubr>:
    4e0e:	4f 92       	push	r4
    4e10:	5f 92       	push	r5
    4e12:	6f 92       	push	r6
    4e14:	7f 92       	push	r7
    4e16:	8f 92       	push	r8
    4e18:	9f 92       	push	r9
    4e1a:	af 92       	push	r10
    4e1c:	bf 92       	push	r11
    4e1e:	cf 92       	push	r12
    4e20:	df 92       	push	r13
    4e22:	ef 92       	push	r14
    4e24:	ff 92       	push	r15
    4e26:	cf 93       	push	r28
    4e28:	df 93       	push	r29
    4e2a:	5a 01       	movw	r10, r20
    4e2c:	e9 01       	movw	r28, r18
    4e2e:	0e 94 47 e4 	call	0x1c88e	; 0x1c88e <__floatunsisf>
    4e32:	2b 01       	movw	r4, r22
    4e34:	3c 01       	movw	r6, r24
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	40 e0       	ldi	r20, 0x00	; 0
    4e3c:	51 e4       	ldi	r21, 0x41	; 65
    4e3e:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    4e42:	9b 01       	movw	r18, r22
    4e44:	ac 01       	movw	r20, r24
    4e46:	60 e8       	ldi	r22, 0x80	; 128
    4e48:	76 e9       	ldi	r23, 0x96	; 150
    4e4a:	88 e9       	ldi	r24, 0x98	; 152
    4e4c:	9b e4       	ldi	r25, 0x4B	; 75
    4e4e:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e8       	ldi	r20, 0x80	; 128
    4e58:	5f e3       	ldi	r21, 0x3F	; 63
    4e5a:	0e 94 45 e3 	call	0x1c68a	; 0x1c68a <__subsf3>
    4e5e:	0e 94 60 e5 	call	0x1cac0	; 0x1cac0 <round>
    4e62:	0e 94 1b e4 	call	0x1c836	; 0x1c836 <__fixunssfsi>
    4e66:	6b 01       	movw	r12, r22
    4e68:	7c 01       	movw	r14, r24
    4e6a:	c1 14       	cp	r12, r1
    4e6c:	80 e1       	ldi	r24, 0x10	; 16
    4e6e:	d8 06       	cpc	r13, r24
    4e70:	e1 04       	cpc	r14, r1
    4e72:	f1 04       	cpc	r15, r1
    4e74:	58 f4       	brcc	.+22     	; 0x4e8c <uart_ubr+0x7e>
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	f5 01       	movw	r30, r10
    4e7c:	91 83       	std	Z+1, r25	; 0x01
    4e7e:	80 83       	st	Z, r24
    4e80:	81 2c       	mov	r8, r1
    4e82:	91 2c       	mov	r9, r1
    4e84:	a1 2c       	mov	r10, r1
    4e86:	21 e4       	ldi	r18, 0x41	; 65
    4e88:	b2 2e       	mov	r11, r18
    4e8a:	31 c0       	rjmp	.+98     	; 0x4eee <uart_ubr+0xe0>
    4e8c:	f5 01       	movw	r30, r10
    4e8e:	11 82       	std	Z+1, r1	; 0x01
    4e90:	10 82       	st	Z, r1
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	40 e8       	ldi	r20, 0x80	; 128
    4e98:	51 e4       	ldi	r21, 0x41	; 65
    4e9a:	c3 01       	movw	r24, r6
    4e9c:	b2 01       	movw	r22, r4
    4e9e:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    4ea2:	9b 01       	movw	r18, r22
    4ea4:	ac 01       	movw	r20, r24
    4ea6:	60 e8       	ldi	r22, 0x80	; 128
    4ea8:	76 e9       	ldi	r23, 0x96	; 150
    4eaa:	88 e9       	ldi	r24, 0x98	; 152
    4eac:	9b e4       	ldi	r25, 0x4B	; 75
    4eae:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e8       	ldi	r20, 0x80	; 128
    4eb8:	5f e3       	ldi	r21, 0x3F	; 63
    4eba:	0e 94 45 e3 	call	0x1c68a	; 0x1c68a <__subsf3>
    4ebe:	0e 94 60 e5 	call	0x1cac0	; 0x1cac0 <round>
    4ec2:	0e 94 1b e4 	call	0x1c836	; 0x1c836 <__fixunssfsi>
    4ec6:	6b 01       	movw	r12, r22
    4ec8:	7c 01       	movw	r14, r24
    4eca:	81 2c       	mov	r8, r1
    4ecc:	91 2c       	mov	r9, r1
    4ece:	90 e8       	ldi	r25, 0x80	; 128
    4ed0:	a9 2e       	mov	r10, r25
    4ed2:	91 e4       	ldi	r25, 0x41	; 65
    4ed4:	b9 2e       	mov	r11, r25
    4ed6:	c1 14       	cp	r12, r1
    4ed8:	f0 e1       	ldi	r31, 0x10	; 16
    4eda:	df 06       	cpc	r13, r31
    4edc:	e1 04       	cpc	r14, r1
    4ede:	f1 04       	cpc	r15, r1
    4ee0:	30 f0       	brcs	.+12     	; 0x4eee <uart_ubr+0xe0>
    4ee2:	cc 24       	eor	r12, r12
    4ee4:	ca 94       	dec	r12
    4ee6:	8f e0       	ldi	r24, 0x0F	; 15
    4ee8:	d8 2e       	mov	r13, r24
    4eea:	e1 2c       	mov	r14, r1
    4eec:	f1 2c       	mov	r15, r1
    4eee:	c7 01       	movw	r24, r14
    4ef0:	b6 01       	movw	r22, r12
    4ef2:	6f 5f       	subi	r22, 0xFF	; 255
    4ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    4efa:	0e 94 47 e4 	call	0x1c88e	; 0x1c88e <__floatunsisf>
    4efe:	a5 01       	movw	r20, r10
    4f00:	94 01       	movw	r18, r8
    4f02:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    4f06:	9b 01       	movw	r18, r22
    4f08:	ac 01       	movw	r20, r24
    4f0a:	60 e8       	ldi	r22, 0x80	; 128
    4f0c:	76 e9       	ldi	r23, 0x96	; 150
    4f0e:	88 e9       	ldi	r24, 0x98	; 152
    4f10:	9b e4       	ldi	r25, 0x4B	; 75
    4f12:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    4f16:	0e 94 1b e4 	call	0x1c836	; 0x1c836 <__fixunssfsi>
    4f1a:	68 83       	st	Y, r22
    4f1c:	79 83       	std	Y+1, r23	; 0x01
    4f1e:	8a 83       	std	Y+2, r24	; 0x02
    4f20:	9b 83       	std	Y+3, r25	; 0x03
    4f22:	c6 01       	movw	r24, r12
    4f24:	df 91       	pop	r29
    4f26:	cf 91       	pop	r28
    4f28:	ff 90       	pop	r15
    4f2a:	ef 90       	pop	r14
    4f2c:	df 90       	pop	r13
    4f2e:	cf 90       	pop	r12
    4f30:	bf 90       	pop	r11
    4f32:	af 90       	pop	r10
    4f34:	9f 90       	pop	r9
    4f36:	8f 90       	pop	r8
    4f38:	7f 90       	pop	r7
    4f3a:	6f 90       	pop	r6
    4f3c:	5f 90       	pop	r5
    4f3e:	4f 90       	pop	r4
    4f40:	08 95       	ret

00004f42 <uart_init>:
    4f42:	a6 e0       	ldi	r26, 0x06	; 6
    4f44:	b0 e0       	ldi	r27, 0x00	; 0
    4f46:	e7 ea       	ldi	r30, 0xA7	; 167
    4f48:	f7 e2       	ldi	r31, 0x27	; 39
    4f4a:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    4f4e:	1e 82       	std	Y+6, r1	; 0x06
    4f50:	1d 82       	std	Y+5, r1	; 0x05
    4f52:	81 11       	cpse	r24, r1
    4f54:	36 c0       	rjmp	.+108    	; 0x4fc2 <uart_init+0x80>
    4f56:	cb 01       	movw	r24, r22
    4f58:	ba 01       	movw	r22, r20
    4f5a:	9e 01       	movw	r18, r28
    4f5c:	2f 5f       	subi	r18, 0xFF	; 255
    4f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f60:	ae 01       	movw	r20, r28
    4f62:	4b 5f       	subi	r20, 0xFB	; 251
    4f64:	5f 4f       	sbci	r21, 0xFF	; 255
    4f66:	53 df       	rcall	.-346    	; 0x4e0e <uart_ubr>
    4f68:	f8 94       	cli
    4f6a:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts+0x4>
    4f6e:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <uarts+0x3>
    4f72:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts>
    4f76:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    4f7a:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <uarts+0x2>
    4f7e:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x5>
    4f82:	78 94       	sei
    4f84:	f8 94       	cli
    4f86:	58 9a       	sbi	0x0b, 0	; 11
    4f88:	59 9a       	sbi	0x0b, 1	; 11
    4f8a:	50 98       	cbi	0x0a, 0	; 10
    4f8c:	51 9a       	sbi	0x0a, 1	; 10
    4f8e:	28 e9       	ldi	r18, 0x98	; 152
    4f90:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4f94:	2d 81       	ldd	r18, Y+5	; 0x05
    4f96:	3e 81       	ldd	r19, Y+6	; 0x06
    4f98:	23 2b       	or	r18, r19
    4f9a:	19 f0       	breq	.+6      	; 0x4fa2 <uart_init+0x60>
    4f9c:	22 e0       	ldi	r18, 0x02	; 2
    4f9e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4fa2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4fa6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4faa:	78 94       	sei
    4fac:	6a e9       	ldi	r22, 0x9A	; 154
    4fae:	78 e2       	ldi	r23, 0x28	; 40
    4fb0:	8f ea       	ldi	r24, 0xAF	; 175
    4fb2:	98 e2       	ldi	r25, 0x28	; 40
    4fb4:	0e 94 03 77 	call	0xee06	; 0xee06 <fdevopen>
    4fb8:	69 81       	ldd	r22, Y+1	; 0x01
    4fba:	7a 81       	ldd	r23, Y+2	; 0x02
    4fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4fc0:	03 c0       	rjmp	.+6      	; 0x4fc8 <uart_init+0x86>
    4fc2:	60 e0       	ldi	r22, 0x00	; 0
    4fc4:	70 e0       	ldi	r23, 0x00	; 0
    4fc6:	cb 01       	movw	r24, r22
    4fc8:	26 96       	adiw	r28, 0x06	; 6
    4fca:	e2 e0       	ldi	r30, 0x02	; 2
    4fcc:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00004fd0 <uart_rx_interrupt>:
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	27 e5       	ldi	r18, 0x57	; 87
    4fd6:	82 9f       	mul	r24, r18
    4fd8:	c0 01       	movw	r24, r0
    4fda:	11 24       	eor	r1, r1
    4fdc:	fc 01       	movw	r30, r24
    4fde:	e9 50       	subi	r30, 0x09	; 9
    4fe0:	f6 4e       	sbci	r31, 0xE6	; 230
    4fe2:	83 81       	ldd	r24, Z+3	; 0x03
    4fe4:	94 81       	ldd	r25, Z+4	; 0x04
    4fe6:	80 35       	cpi	r24, 0x50	; 80
    4fe8:	91 05       	cpc	r25, r1
    4fea:	84 f4       	brge	.+32     	; 0x500c <uart_rx_interrupt+0x3c>
    4fec:	30 81       	ld	r19, Z
    4fee:	21 e0       	ldi	r18, 0x01	; 1
    4ff0:	23 0f       	add	r18, r19
    4ff2:	20 83       	st	Z, r18
    4ff4:	ef 01       	movw	r28, r30
    4ff6:	c3 0f       	add	r28, r19
    4ff8:	d1 1d       	adc	r29, r1
    4ffa:	6f 77       	andi	r22, 0x7F	; 127
    4ffc:	6e 83       	std	Y+6, r22	; 0x06
    4ffe:	01 96       	adiw	r24, 0x01	; 1
    5000:	94 83       	std	Z+4, r25	; 0x04
    5002:	83 83       	std	Z+3, r24	; 0x03
    5004:	20 35       	cpi	r18, 0x50	; 80
    5006:	28 f0       	brcs	.+10     	; 0x5012 <uart_rx_interrupt+0x42>
    5008:	10 82       	st	Z, r1
    500a:	03 c0       	rjmp	.+6      	; 0x5012 <uart_rx_interrupt+0x42>
    500c:	85 81       	ldd	r24, Z+5	; 0x05
    500e:	81 60       	ori	r24, 0x01	; 1
    5010:	85 83       	std	Z+5, r24	; 0x05
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	08 95       	ret

00005018 <__vector_20>:
    5018:	1f 92       	push	r1
    501a:	0f 92       	push	r0
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	0f 92       	push	r0
    5020:	11 24       	eor	r1, r1
    5022:	0b b6       	in	r0, 0x3b	; 59
    5024:	0f 92       	push	r0
    5026:	2f 93       	push	r18
    5028:	3f 93       	push	r19
    502a:	4f 93       	push	r20
    502c:	5f 93       	push	r21
    502e:	6f 93       	push	r22
    5030:	7f 93       	push	r23
    5032:	8f 93       	push	r24
    5034:	9f 93       	push	r25
    5036:	af 93       	push	r26
    5038:	bf 93       	push	r27
    503a:	ef 93       	push	r30
    503c:	ff 93       	push	r31
    503e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	c5 df       	rcall	.-118    	; 0x4fd0 <uart_rx_interrupt>
    5046:	ff 91       	pop	r31
    5048:	ef 91       	pop	r30
    504a:	bf 91       	pop	r27
    504c:	af 91       	pop	r26
    504e:	9f 91       	pop	r25
    5050:	8f 91       	pop	r24
    5052:	7f 91       	pop	r23
    5054:	6f 91       	pop	r22
    5056:	5f 91       	pop	r21
    5058:	4f 91       	pop	r20
    505a:	3f 91       	pop	r19
    505c:	2f 91       	pop	r18
    505e:	0f 90       	pop	r0
    5060:	0b be       	out	0x3b, r0	; 59
    5062:	0f 90       	pop	r0
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	0f 90       	pop	r0
    5068:	1f 90       	pop	r1
    506a:	18 95       	reti

0000506c <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    506c:	81 11       	cpse	r24, r1
    506e:	07 c0       	rjmp	.+14     	; 0x507e <uart_rx_count+0x12>
        return(EOF);

    cli();
    5070:	f8 94       	cli

    count = uarts[uart].rx_count;
    5072:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <uarts+0x3>
    5076:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <uarts+0x4>

    sei();
    507a:	78 94       	sei

    return (count );
    507c:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    507e:	8f ef       	ldi	r24, 0xFF	; 255
    5080:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5082:	08 95       	ret

00005084 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5084:	81 11       	cpse	r24, r1
    5086:	21 c0       	rjmp	.+66     	; 0x50ca <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5088:	80 e0       	ldi	r24, 0x00	; 0
    508a:	f0 df       	rcall	.-32     	; 0x506c <uart_rx_count>
    508c:	18 16       	cp	r1, r24
    508e:	19 06       	cpc	r1, r25
    5090:	dc f7       	brge	.-10     	; 0x5088 <uart_get_tail+0x4>
        ;

    cli();
    5092:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5094:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <uarts+0x1>
    5098:	91 e0       	ldi	r25, 0x01	; 1
    509a:	9e 0f       	add	r25, r30
    509c:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <uarts+0x1>
    50a0:	f0 e0       	ldi	r31, 0x00	; 0
    50a2:	e9 50       	subi	r30, 0x09	; 9
    50a4:	f6 4e       	sbci	r31, 0xE6	; 230
    50a6:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    50a8:	90 35       	cpi	r25, 0x50	; 80
    50aa:	10 f0       	brcs	.+4      	; 0x50b0 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    50ac:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <uarts+0x1>
    uarts[uart].rx_count--;
    50b0:	20 91 fa 19 	lds	r18, 0x19FA	; 0x8019fa <uarts+0x3>
    50b4:	30 91 fb 19 	lds	r19, 0x19FB	; 0x8019fb <uarts+0x4>
    50b8:	21 50       	subi	r18, 0x01	; 1
    50ba:	31 09       	sbc	r19, r1
    50bc:	30 93 fb 19 	sts	0x19FB, r19	; 0x8019fb <uarts+0x4>
    50c0:	20 93 fa 19 	sts	0x19FA, r18	; 0x8019fa <uarts+0x3>
    sei();
    50c4:	78 94       	sei

    return (c & 0xff);
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    50ca:	8f ef       	ldi	r24, 0xFF	; 255
    50cc:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    50ce:	08 95       	ret

000050d0 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    50d0:	d9 df       	rcall	.-78     	; 0x5084 <uart_get_tail>
}
    50d2:	99 27       	eor	r25, r25
    50d4:	08 95       	ret

000050d6 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    50d6:	61 11       	cpse	r22, r1
    50d8:	09 c0       	rjmp	.+18     	; 0x50ec <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    50da:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    50de:	25 ff       	sbrs	r18, 5
    50e0:	fc cf       	rjmp	.-8      	; 0x50da <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    50e2:	28 2f       	mov	r18, r24
    50e4:	2f 77       	andi	r18, 0x7F	; 127
    50e6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    50ea:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    50ec:	61 30       	cpi	r22, 0x01	; 1
    50ee:	49 f4       	brne	.+18     	; 0x5102 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    50f0:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    50f4:	25 ff       	sbrs	r18, 5
    50f6:	fc cf       	rjmp	.-8      	; 0x50f0 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    50f8:	28 2f       	mov	r18, r24
    50fa:	2f 77       	andi	r18, 0x7F	; 127
    50fc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5100:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    5102:	8f ef       	ldi	r24, 0xFF	; 255
    5104:	9f ef       	ldi	r25, 0xFF	; 255
}
    5106:	08 95       	ret

00005108 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5108:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    510a:	81 11       	cpse	r24, r1
    510c:	0f c0       	rjmp	.+30     	; 0x512c <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    510e:	e0 df       	rcall	.-64     	; 0x50d0 <uart_rx_byte>
    5110:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    5112:	60 e0       	ldi	r22, 0x00	; 0
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	df df       	rcall	.-66     	; 0x50d6 <uart_tx_byte>
    if(c == '\r')
    5118:	cd 30       	cpi	r28, 0x0D	; 13
    511a:	29 f4       	brne	.+10     	; 0x5126 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    511c:	60 e0       	ldi	r22, 0x00	; 0
    511e:	8a e0       	ldi	r24, 0x0A	; 10
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	d9 df       	rcall	.-78     	; 0x50d6 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    5124:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    5126:	8c 2f       	mov	r24, r28
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	02 c0       	rjmp	.+4      	; 0x5130 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    512c:	8f ef       	ldi	r24, 0xFF	; 255
    512e:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    5130:	cf 91       	pop	r28
    5132:	08 95       	ret

00005134 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    5134:	80 e0       	ldi	r24, 0x00	; 0
    5136:	e8 cf       	rjmp	.-48     	; 0x5108 <uart_getchar>
}
    5138:	08 95       	ret

0000513a <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    513a:	1f 93       	push	r17
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	ec 01       	movw	r28, r24
    5142:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    5144:	c8 df       	rcall	.-112    	; 0x50d6 <uart_tx_byte>

    if( c == '\n' )
    5146:	ca 30       	cpi	r28, 0x0A	; 10
    5148:	d1 05       	cpc	r29, r1
    514a:	21 f4       	brne	.+8      	; 0x5154 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    514c:	61 2f       	mov	r22, r17
    514e:	8d e0       	ldi	r24, 0x0D	; 13
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	c1 df       	rcall	.-126    	; 0x50d6 <uart_tx_byte>

    return(c);
}
    5154:	ce 01       	movw	r24, r28
    5156:	df 91       	pop	r29
    5158:	cf 91       	pop	r28
    515a:	1f 91       	pop	r17
    515c:	08 95       	ret

0000515e <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    515e:	cf 93       	push	r28
    5160:	df 93       	push	r29
    5162:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5164:	60 e0       	ldi	r22, 0x00	; 0
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	e8 df       	rcall	.-48     	; 0x513a <uart_putchar>
    return(c);
}
    516a:	ce 01       	movw	r24, r28
    516c:	df 91       	pop	r29
    516e:	cf 91       	pop	r28
    5170:	08 95       	ret

00005172 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    5172:	7c cf       	rjmp	.-264    	; 0x506c <uart_rx_count>
}
    5174:	08 95       	ret

00005176 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5176:	cf 92       	push	r12
    5178:	df 92       	push	r13
    517a:	ef 92       	push	r14
    517c:	ff 92       	push	r15
    517e:	6b 01       	movw	r12, r22
    5180:	7c 01       	movw	r14, r24
    5182:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <SPI0_Speed_value>
    5186:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <SPI0_Speed_value+0x1>
    518a:	a0 91 5b 17 	lds	r26, 0x175B	; 0x80175b <SPI0_Speed_value+0x2>
    518e:	b0 91 5c 17 	lds	r27, 0x175C	; 0x80175c <SPI0_Speed_value+0x3>
    5192:	8c 15       	cp	r24, r12
    5194:	9d 05       	cpc	r25, r13
    5196:	ae 05       	cpc	r26, r14
    5198:	bf 05       	cpc	r27, r15
    519a:	09 f4       	brne	.+2      	; 0x519e <SPI0_Speed+0x28>
    519c:	4e c0       	rjmp	.+156    	; 0x523a <SPI0_Speed+0xc4>
    519e:	60 e0       	ldi	r22, 0x00	; 0
    51a0:	7d e2       	ldi	r23, 0x2D	; 45
    51a2:	81 e3       	ldi	r24, 0x31	; 49
    51a4:	91 e0       	ldi	r25, 0x01	; 1
    51a6:	a7 01       	movw	r20, r14
    51a8:	96 01       	movw	r18, r12
    51aa:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    51ae:	20 38       	cpi	r18, 0x80	; 128
    51b0:	31 05       	cpc	r19, r1
    51b2:	41 05       	cpc	r20, r1
    51b4:	51 05       	cpc	r21, r1
    51b6:	28 f4       	brcc	.+10     	; 0x51c2 <SPI0_Speed+0x4c>
    51b8:	20 34       	cpi	r18, 0x40	; 64
    51ba:	31 05       	cpc	r19, r1
    51bc:	41 05       	cpc	r20, r1
    51be:	51 05       	cpc	r21, r1
    51c0:	30 f0       	brcs	.+12     	; 0x51ce <SPI0_Speed+0x58>
    51c2:	8d b5       	in	r24, 0x2d	; 45
    51c4:	8e 7f       	andi	r24, 0xFE	; 254
    51c6:	8d bd       	out	0x2d, r24	; 45
    51c8:	8c b5       	in	r24, 0x2c	; 44
    51ca:	82 60       	ori	r24, 0x02	; 2
    51cc:	1b c0       	rjmp	.+54     	; 0x5204 <SPI0_Speed+0x8e>
    51ce:	8d b5       	in	r24, 0x2d	; 45
    51d0:	20 32       	cpi	r18, 0x20	; 32
    51d2:	31 05       	cpc	r19, r1
    51d4:	41 05       	cpc	r20, r1
    51d6:	51 05       	cpc	r21, r1
    51d8:	28 f0       	brcs	.+10     	; 0x51e4 <SPI0_Speed+0x6e>
    51da:	81 60       	ori	r24, 0x01	; 1
    51dc:	8d bd       	out	0x2d, r24	; 45
    51de:	8c b5       	in	r24, 0x2c	; 44
    51e0:	82 60       	ori	r24, 0x02	; 2
    51e2:	1f c0       	rjmp	.+62     	; 0x5222 <SPI0_Speed+0xac>
    51e4:	20 31       	cpi	r18, 0x10	; 16
    51e6:	31 05       	cpc	r19, r1
    51e8:	41 05       	cpc	r20, r1
    51ea:	51 05       	cpc	r21, r1
    51ec:	10 f0       	brcs	.+4      	; 0x51f2 <SPI0_Speed+0x7c>
    51ee:	8e 7f       	andi	r24, 0xFE	; 254
    51f0:	06 c0       	rjmp	.+12     	; 0x51fe <SPI0_Speed+0x88>
    51f2:	28 30       	cpi	r18, 0x08	; 8
    51f4:	31 05       	cpc	r19, r1
    51f6:	41 05       	cpc	r20, r1
    51f8:	51 05       	cpc	r21, r1
    51fa:	40 f0       	brcs	.+16     	; 0x520c <SPI0_Speed+0x96>
    51fc:	81 60       	ori	r24, 0x01	; 1
    51fe:	8d bd       	out	0x2d, r24	; 45
    5200:	8c b5       	in	r24, 0x2c	; 44
    5202:	8d 7f       	andi	r24, 0xFD	; 253
    5204:	8c bd       	out	0x2c, r24	; 44
    5206:	8c b5       	in	r24, 0x2c	; 44
    5208:	81 60       	ori	r24, 0x01	; 1
    520a:	0e c0       	rjmp	.+28     	; 0x5228 <SPI0_Speed+0xb2>
    520c:	24 30       	cpi	r18, 0x04	; 4
    520e:	31 05       	cpc	r19, r1
    5210:	41 05       	cpc	r20, r1
    5212:	51 05       	cpc	r21, r1
    5214:	10 f0       	brcs	.+4      	; 0x521a <SPI0_Speed+0xa4>
    5216:	8e 7f       	andi	r24, 0xFE	; 254
    5218:	01 c0       	rjmp	.+2      	; 0x521c <SPI0_Speed+0xa6>
    521a:	81 60       	ori	r24, 0x01	; 1
    521c:	8d bd       	out	0x2d, r24	; 45
    521e:	8c b5       	in	r24, 0x2c	; 44
    5220:	8d 7f       	andi	r24, 0xFD	; 253
    5222:	8c bd       	out	0x2c, r24	; 44
    5224:	8c b5       	in	r24, 0x2c	; 44
    5226:	8e 7f       	andi	r24, 0xFE	; 254
    5228:	8c bd       	out	0x2c, r24	; 44
    522a:	c0 92 59 17 	sts	0x1759, r12	; 0x801759 <SPI0_Speed_value>
    522e:	d0 92 5a 17 	sts	0x175A, r13	; 0x80175a <SPI0_Speed_value+0x1>
    5232:	e0 92 5b 17 	sts	0x175B, r14	; 0x80175b <SPI0_Speed_value+0x2>
    5236:	f0 92 5c 17 	sts	0x175C, r15	; 0x80175c <SPI0_Speed_value+0x3>
    523a:	ff 90       	pop	r15
    523c:	ef 90       	pop	r14
    523e:	df 90       	pop	r13
    5240:	cf 90       	pop	r12
    5242:	08 95       	ret

00005244 <SPI0_Mode>:
    5244:	cf 93       	push	r28
    5246:	df 93       	push	r29
    5248:	00 d0       	rcall	.+0      	; 0x524a <SPI0_Mode+0x6>
    524a:	00 d0       	rcall	.+0      	; 0x524c <SPI0_Mode+0x8>
    524c:	1f 92       	push	r1
    524e:	ec 01       	movw	r28, r24
    5250:	81 30       	cpi	r24, 0x01	; 1
    5252:	91 05       	cpc	r25, r1
    5254:	71 f0       	breq	.+28     	; 0x5272 <SPI0_Mode+0x2e>
    5256:	2c f4       	brge	.+10     	; 0x5262 <SPI0_Mode+0x1e>
    5258:	89 2b       	or	r24, r25
    525a:	c1 f4       	brne	.+48     	; 0x528c <SPI0_Mode+0x48>
    525c:	8c b5       	in	r24, 0x2c	; 44
    525e:	87 7f       	andi	r24, 0xF7	; 247
    5260:	11 c0       	rjmp	.+34     	; 0x5284 <SPI0_Mode+0x40>
    5262:	82 30       	cpi	r24, 0x02	; 2
    5264:	91 05       	cpc	r25, r1
    5266:	61 f0       	breq	.+24     	; 0x5280 <SPI0_Mode+0x3c>
    5268:	03 97       	sbiw	r24, 0x03	; 3
    526a:	81 f4       	brne	.+32     	; 0x528c <SPI0_Mode+0x48>
    526c:	8c b5       	in	r24, 0x2c	; 44
    526e:	88 60       	ori	r24, 0x08	; 8
    5270:	02 c0       	rjmp	.+4      	; 0x5276 <SPI0_Mode+0x32>
    5272:	8c b5       	in	r24, 0x2c	; 44
    5274:	87 7f       	andi	r24, 0xF7	; 247
    5276:	8c bd       	out	0x2c, r24	; 44
    5278:	8c b5       	in	r24, 0x2c	; 44
    527a:	84 60       	ori	r24, 0x04	; 4
    527c:	8c bd       	out	0x2c, r24	; 44
    527e:	12 c0       	rjmp	.+36     	; 0x52a4 <SPI0_Mode+0x60>
    5280:	8c b5       	in	r24, 0x2c	; 44
    5282:	88 60       	ori	r24, 0x08	; 8
    5284:	8c bd       	out	0x2c, r24	; 44
    5286:	8c b5       	in	r24, 0x2c	; 44
    5288:	8b 7f       	andi	r24, 0xFB	; 251
    528a:	f8 cf       	rjmp	.-16     	; 0x527c <SPI0_Mode+0x38>
    528c:	ed b7       	in	r30, 0x3d	; 61
    528e:	fe b7       	in	r31, 0x3e	; 62
    5290:	d5 83       	std	Z+5, r29	; 0x05
    5292:	c4 83       	std	Z+4, r28	; 0x04
    5294:	84 e1       	ldi	r24, 0x14	; 20
    5296:	93 e0       	ldi	r25, 0x03	; 3
    5298:	a0 e0       	ldi	r26, 0x00	; 0
    529a:	81 83       	std	Z+1, r24	; 0x01
    529c:	92 83       	std	Z+2, r25	; 0x02
    529e:	a3 83       	std	Z+3, r26	; 0x03
    52a0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    52a4:	d0 93 58 17 	sts	0x1758, r29	; 0x801758 <SPI0_Mode_value+0x1>
    52a8:	c0 93 57 17 	sts	0x1757, r28	; 0x801757 <SPI0_Mode_value>
    52ac:	cd b7       	in	r28, 0x3d	; 61
    52ae:	de b7       	in	r29, 0x3e	; 62
    52b0:	25 96       	adiw	r28, 0x05	; 5
    52b2:	e2 e0       	ldi	r30, 0x02	; 2
    52b4:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000052b8 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    52b8:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    52ba:	0d b4       	in	r0, 0x2d	; 45
    52bc:	07 fe       	sbrs	r0, 7
    52be:	fd cf       	rjmp	.-6      	; 0x52ba <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    52c0:	8e b5       	in	r24, 0x2e	; 46
}
    52c2:	08 95       	ret

000052c4 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    52c4:	cf 92       	push	r12
    52c6:	df 92       	push	r13
    52c8:	ef 92       	push	r14
    52ca:	ff 92       	push	r15
    52cc:	cf 93       	push	r28
    52ce:	df 93       	push	r29
    52d0:	1f 92       	push	r1
    52d2:	cd b7       	in	r28, 0x3d	; 61
    52d4:	de b7       	in	r29, 0x3e	; 62
    52d6:	6b 01       	movw	r12, r22
    52d8:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    52da:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    52dc:	2f 9a       	sbi	0x05, 7	; 5
    52de:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    52e0:	2d 9a       	sbi	0x05, 5	; 5
    52e2:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    52e4:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    52e6:	2c 98       	cbi	0x05, 4	; 5
    52e8:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    52ea:	8c b5       	in	r24, 0x2c	; 44
    52ec:	80 61       	ori	r24, 0x10	; 16
    52ee:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    52f0:	8c b5       	in	r24, 0x2c	; 44
    52f2:	80 64       	ori	r24, 0x40	; 64
    52f4:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    52f6:	8d b5       	in	r24, 0x2d	; 45
    52f8:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    52fa:	8e b5       	in	r24, 0x2e	; 46
    52fc:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    52fe:	80 e0       	ldi	r24, 0x00	; 0
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	a0 df       	rcall	.-192    	; 0x5244 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    5304:	c7 01       	movw	r24, r14
    5306:	b6 01       	movw	r22, r12
    5308:	36 df       	rcall	.-404    	; 0x5176 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    530a:	8f ef       	ldi	r24, 0xFF	; 255
    530c:	d5 df       	rcall	.-86     	; 0x52b8 <SPI0_TXRX_Byte>
    530e:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    5310:	df 91       	pop	r29
    5312:	cf 91       	pop	r28
    5314:	ff 90       	pop	r15
    5316:	ef 90       	pop	r14
    5318:	df 90       	pop	r13
    531a:	cf 90       	pop	r12
    531c:	08 95       	ret

0000531e <SPI0_TX>:
    531e:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5320:	1f 93       	push	r17
    5322:	cf 93       	push	r28
    5324:	df 93       	push	r29
    5326:	8c 01       	movw	r16, r24
    5328:	eb 01       	movw	r28, r22

    while(count > 0)
    532a:	1c 16       	cp	r1, r28
    532c:	1d 06       	cpc	r1, r29
    532e:	34 f4       	brge	.+12     	; 0x533c <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    5330:	f8 01       	movw	r30, r16
    5332:	81 91       	ld	r24, Z+
    5334:	8f 01       	movw	r16, r30
    5336:	c0 df       	rcall	.-128    	; 0x52b8 <SPI0_TXRX_Byte>
        ++data;
        --count;
    5338:	21 97       	sbiw	r28, 0x01	; 1
    533a:	f7 cf       	rjmp	.-18     	; 0x532a <SPI0_TX+0xc>
    }
}
    533c:	df 91       	pop	r29
    533e:	cf 91       	pop	r28
    5340:	1f 91       	pop	r17
    5342:	0f 91       	pop	r16
    5344:	08 95       	ret

00005346 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5346:	0f 93       	push	r16
    5348:	1f 93       	push	r17
    534a:	cf 93       	push	r28
    534c:	df 93       	push	r29
    534e:	8c 01       	movw	r16, r24
    5350:	eb 01       	movw	r28, r22

    while(count > 0)
    5352:	1c 16       	cp	r1, r28
    5354:	1d 06       	cpc	r1, r29
    5356:	44 f4       	brge	.+16     	; 0x5368 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5358:	f8 01       	movw	r30, r16
    535a:	80 81       	ld	r24, Z
    535c:	ad df       	rcall	.-166    	; 0x52b8 <SPI0_TXRX_Byte>
    535e:	f8 01       	movw	r30, r16
    5360:	81 93       	st	Z+, r24
    5362:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5364:	21 97       	sbiw	r28, 0x01	; 1
    5366:	f5 cf       	rjmp	.-22     	; 0x5352 <SPI0_TXRX+0xc>
    }
}
    5368:	df 91       	pop	r29
    536a:	cf 91       	pop	r28
    536c:	1f 91       	pop	r17
    536e:	0f 91       	pop	r16
    5370:	08 95       	ret

00005372 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5372:	0f 93       	push	r16
    5374:	1f 93       	push	r17
    5376:	cf 93       	push	r28
    5378:	df 93       	push	r29
    537a:	8c 01       	movw	r16, r24
    537c:	eb 01       	movw	r28, r22

    while(count > 0)
    537e:	1c 16       	cp	r1, r28
    5380:	1d 06       	cpc	r1, r29
    5382:	3c f4       	brge	.+14     	; 0x5392 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5384:	8f ef       	ldi	r24, 0xFF	; 255
    5386:	98 df       	rcall	.-208    	; 0x52b8 <SPI0_TXRX_Byte>
    5388:	f8 01       	movw	r30, r16
    538a:	81 93       	st	Z+, r24
    538c:	8f 01       	movw	r16, r30
        ++data;
        --count;
    538e:	21 97       	sbiw	r28, 0x01	; 1
    5390:	f6 cf       	rjmp	.-20     	; 0x537e <SPI0_RX+0xc>
    }
}
    5392:	df 91       	pop	r29
    5394:	cf 91       	pop	r28
    5396:	1f 91       	pop	r17
    5398:	0f 91       	pop	r16
    539a:	08 95       	ret

0000539c <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    539c:	2f b7       	in	r18, 0x3f	; 63
    539e:	80 91 4f 1a 	lds	r24, 0x1A4F	; 0x801a4f <i2c+0x1>
    53a2:	81 11       	cpse	r24, r1
    53a4:	04 c0       	rjmp	.+8      	; 0x53ae <i2c_timer+0x12>
    53a6:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x2>
    53aa:	81 11       	cpse	r24, r1
    53ac:	0b c0       	rjmp	.+22     	; 0x53c4 <i2c_timer+0x28>
    53ae:	80 91 52 1a 	lds	r24, 0x1A52	; 0x801a52 <i2c+0x4>
    53b2:	90 91 53 1a 	lds	r25, 0x1A53	; 0x801a53 <i2c+0x5>
    53b6:	00 97       	sbiw	r24, 0x00	; 0
    53b8:	29 f0       	breq	.+10     	; 0x53c4 <i2c_timer+0x28>
    53ba:	01 97       	sbiw	r24, 0x01	; 1
    53bc:	90 93 53 1a 	sts	0x1A53, r25	; 0x801a53 <i2c+0x5>
    53c0:	80 93 52 1a 	sts	0x1A52, r24	; 0x801a52 <i2c+0x4>
    53c4:	2f bf       	out	0x3f, r18	; 63
    53c6:	08 95       	ret

000053c8 <i2c_check_op>:
    53c8:	ad b7       	in	r26, 0x3d	; 61
    53ca:	be b7       	in	r27, 0x3e	; 62
    53cc:	17 97       	sbiw	r26, 0x07	; 7
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	f8 94       	cli
    53d2:	be bf       	out	0x3e, r27	; 62
    53d4:	0f be       	out	0x3f, r0	; 63
    53d6:	ad bf       	out	0x3d, r26	; 61
    53d8:	28 2f       	mov	r18, r24
    53da:	08 2e       	mov	r0, r24
    53dc:	00 0c       	add	r0, r0
    53de:	33 0b       	sbc	r19, r19
    53e0:	80 31       	cpi	r24, 0x10	; 16
    53e2:	88 f0       	brcs	.+34     	; 0x5406 <i2c_check_op+0x3e>
    53e4:	80 e1       	ldi	r24, 0x10	; 16
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	ed b7       	in	r30, 0x3d	; 61
    53ea:	fe b7       	in	r31, 0x3e	; 62
    53ec:	97 83       	std	Z+7, r25	; 0x07
    53ee:	86 83       	std	Z+6, r24	; 0x06
    53f0:	35 83       	std	Z+5, r19	; 0x05
    53f2:	24 83       	std	Z+4, r18	; 0x04
    53f4:	89 e2       	ldi	r24, 0x29	; 41
    53f6:	94 e0       	ldi	r25, 0x04	; 4
    53f8:	a0 e0       	ldi	r26, 0x00	; 0
    53fa:	81 83       	std	Z+1, r24	; 0x01
    53fc:	92 83       	std	Z+2, r25	; 0x02
    53fe:	a3 83       	std	Z+3, r26	; 0x03
    5400:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5404:	24 c0       	rjmp	.+72     	; 0x544e <i2c_check_op+0x86>
    5406:	f9 01       	movw	r30, r18
    5408:	ee 0f       	add	r30, r30
    540a:	ff 1f       	adc	r31, r31
    540c:	e2 5a       	subi	r30, 0xA2	; 162
    540e:	f8 4e       	sbci	r31, 0xE8	; 232
    5410:	01 90       	ld	r0, Z+
    5412:	f0 81       	ld	r31, Z
    5414:	e0 2d       	mov	r30, r0
    5416:	30 97       	sbiw	r30, 0x00	; 0
    5418:	d1 f0       	breq	.+52     	; 0x544e <i2c_check_op+0x86>
    541a:	80 85       	ldd	r24, Z+8	; 0x08
    541c:	91 85       	ldd	r25, Z+9	; 0x09
    541e:	89 2b       	or	r24, r25
    5420:	39 f4       	brne	.+14     	; 0x5430 <i2c_check_op+0x68>
    5422:	ed b7       	in	r30, 0x3d	; 61
    5424:	fe b7       	in	r31, 0x3e	; 62
    5426:	35 83       	std	Z+5, r19	; 0x05
    5428:	24 83       	std	Z+4, r18	; 0x04
    542a:	80 e1       	ldi	r24, 0x10	; 16
    542c:	94 e0       	ldi	r25, 0x04	; 4
    542e:	09 c0       	rjmp	.+18     	; 0x5442 <i2c_check_op+0x7a>
    5430:	86 81       	ldd	r24, Z+6	; 0x06
    5432:	81 11       	cpse	r24, r1
    5434:	0e c0       	rjmp	.+28     	; 0x5452 <i2c_check_op+0x8a>
    5436:	ed b7       	in	r30, 0x3d	; 61
    5438:	fe b7       	in	r31, 0x3e	; 62
    543a:	35 83       	std	Z+5, r19	; 0x05
    543c:	24 83       	std	Z+4, r18	; 0x04
    543e:	8a ef       	ldi	r24, 0xFA	; 250
    5440:	93 e0       	ldi	r25, 0x03	; 3
    5442:	a0 e0       	ldi	r26, 0x00	; 0
    5444:	81 83       	std	Z+1, r24	; 0x01
    5446:	92 83       	std	Z+2, r25	; 0x02
    5448:	a3 83       	std	Z+3, r26	; 0x03
    544a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    544e:	80 e0       	ldi	r24, 0x00	; 0
    5450:	01 c0       	rjmp	.+2      	; 0x5454 <i2c_check_op+0x8c>
    5452:	81 e0       	ldi	r24, 0x01	; 1
    5454:	ad b7       	in	r26, 0x3d	; 61
    5456:	be b7       	in	r27, 0x3e	; 62
    5458:	17 96       	adiw	r26, 0x07	; 7
    545a:	0f b6       	in	r0, 0x3f	; 63
    545c:	f8 94       	cli
    545e:	be bf       	out	0x3e, r27	; 62
    5460:	0f be       	out	0x3f, r0	; 63
    5462:	ad bf       	out	0x3d, r26	; 61
    5464:	08 95       	ret

00005466 <i2c_task_init>:
    5466:	8f b7       	in	r24, 0x3f	; 63
    5468:	f8 94       	cli
    546a:	ee e5       	ldi	r30, 0x5E	; 94
    546c:	f7 e1       	ldi	r31, 0x17	; 23
    546e:	11 92       	st	Z+, r1
    5470:	11 92       	st	Z+, r1
    5472:	97 e1       	ldi	r25, 0x17	; 23
    5474:	ee 37       	cpi	r30, 0x7E	; 126
    5476:	f9 07       	cpc	r31, r25
    5478:	d1 f7       	brne	.-12     	; 0x546e <i2c_task_init+0x8>
    547a:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    547e:	91 e0       	ldi	r25, 0x01	; 1
    5480:	90 93 80 17 	sts	0x1780, r25	; 0x801780 <i2c_task+0x2>
    5484:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>
    5488:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
    548c:	8f bf       	out	0x3f, r24	; 63
    548e:	08 95       	ret

00005490 <i2c_task_op_add>:
    5490:	ef 92       	push	r14
    5492:	ff 92       	push	r15
    5494:	0f 93       	push	r16
    5496:	1f 93       	push	r17
    5498:	cf 93       	push	r28
    549a:	df 93       	push	r29
    549c:	d8 2f       	mov	r29, r24
    549e:	c6 2f       	mov	r28, r22
    54a0:	7a 01       	movw	r14, r20
    54a2:	02 2f       	mov	r16, r18
    54a4:	1f b7       	in	r17, 0x3f	; 63
    54a6:	6a e0       	ldi	r22, 0x0A	; 10
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	a8 db       	rcall	.-2224   	; 0x4c00 <safecalloc>
    54b0:	fc 01       	movw	r30, r24
    54b2:	89 2b       	or	r24, r25
    54b4:	89 f0       	breq	.+34     	; 0x54d8 <i2c_task_op_add+0x48>
    54b6:	f8 94       	cli
    54b8:	11 82       	std	Z+1, r1	; 0x01
    54ba:	12 82       	std	Z+2, r1	; 0x02
    54bc:	dd 0f       	add	r29, r29
    54be:	c1 70       	andi	r28, 0x01	; 1
    54c0:	cd 2b       	or	r28, r29
    54c2:	c0 83       	st	Z, r28
    54c4:	8a e0       	ldi	r24, 0x0A	; 10
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	95 83       	std	Z+5, r25	; 0x05
    54ca:	84 83       	std	Z+4, r24	; 0x04
    54cc:	13 82       	std	Z+3, r1	; 0x03
    54ce:	06 83       	std	Z+6, r16	; 0x06
    54d0:	17 82       	std	Z+7, r1	; 0x07
    54d2:	f1 86       	std	Z+9, r15	; 0x09
    54d4:	e0 86       	std	Z+8, r14	; 0x08
    54d6:	1f bf       	out	0x3f, r17	; 63
    54d8:	cf 01       	movw	r24, r30
    54da:	cd b7       	in	r28, 0x3d	; 61
    54dc:	de b7       	in	r29, 0x3e	; 62
    54de:	e6 e0       	ldi	r30, 0x06	; 6
    54e0:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

000054e4 <i2c_init>:
    54e4:	cf 93       	push	r28
    54e6:	00 d0       	rcall	.+0      	; 0x54e8 <i2c_init+0x4>
    54e8:	1f 92       	push	r1
    54ea:	9b 01       	movw	r18, r22
    54ec:	ac 01       	movw	r20, r24
    54ee:	cf b7       	in	r28, 0x3f	; 63
    54f0:	60 e0       	ldi	r22, 0x00	; 0
    54f2:	7d e2       	ldi	r23, 0x2D	; 45
    54f4:	81 e3       	ldi	r24, 0x31	; 49
    54f6:	91 e0       	ldi	r25, 0x01	; 1
    54f8:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    54fc:	da 01       	movw	r26, r20
    54fe:	c9 01       	movw	r24, r18
    5500:	40 97       	sbiw	r24, 0x10	; 16
    5502:	a1 09       	sbc	r26, r1
    5504:	b1 09       	sbc	r27, r1
    5506:	ac 01       	movw	r20, r24
    5508:	bd 01       	movw	r22, r26
    550a:	76 95       	lsr	r23
    550c:	67 95       	ror	r22
    550e:	57 95       	ror	r21
    5510:	47 95       	ror	r20
    5512:	ca 01       	movw	r24, r20
    5514:	88 27       	eor	r24, r24
    5516:	89 2b       	or	r24, r25
    5518:	59 f0       	breq	.+22     	; 0x5530 <i2c_init+0x4c>
    551a:	8e ed       	ldi	r24, 0xDE	; 222
    551c:	93 e0       	ldi	r25, 0x03	; 3
    551e:	a0 e0       	ldi	r26, 0x00	; 0
    5520:	ed b7       	in	r30, 0x3d	; 61
    5522:	fe b7       	in	r31, 0x3e	; 62
    5524:	81 83       	std	Z+1, r24	; 0x01
    5526:	92 83       	std	Z+2, r25	; 0x02
    5528:	a3 83       	std	Z+3, r26	; 0x03
    552a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    552e:	3a c0       	rjmp	.+116    	; 0x55a4 <i2c_init+0xc0>
    5530:	f8 94       	cli
    5532:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5536:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
    553a:	81 e0       	ldi	r24, 0x01	; 1
    553c:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
    5540:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
    5544:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
    5548:	40 9a       	sbi	0x08, 0	; 8
    554a:	41 9a       	sbi	0x08, 1	; 8
    554c:	84 e8       	ldi	r24, 0x84	; 132
    554e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5552:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5556:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    555a:	8c 7f       	andi	r24, 0xFC	; 252
    555c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5560:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <i2c_init_status>
    5564:	81 11       	cpse	r24, r1
    5566:	1d c0       	rjmp	.+58     	; 0x55a2 <i2c_init+0xbe>
    5568:	ee e5       	ldi	r30, 0x5E	; 94
    556a:	f7 e1       	ldi	r31, 0x17	; 23
    556c:	11 92       	st	Z+, r1
    556e:	11 92       	st	Z+, r1
    5570:	27 e1       	ldi	r18, 0x17	; 23
    5572:	ee 37       	cpi	r30, 0x7E	; 126
    5574:	f2 07       	cpc	r31, r18
    5576:	d1 f7       	brne	.-12     	; 0x556c <i2c_init+0x88>
    5578:	61 e0       	ldi	r22, 0x01	; 1
    557a:	70 e0       	ldi	r23, 0x00	; 0
    557c:	8e ec       	ldi	r24, 0xCE	; 206
    557e:	99 e2       	ldi	r25, 0x29	; 41
    5580:	0e 94 02 33 	call	0x6604	; 0x6604 <set_timers>
    5584:	01 96       	adiw	r24, 0x01	; 1
    5586:	51 f4       	brne	.+20     	; 0x559c <i2c_init+0xb8>
    5588:	87 ec       	ldi	r24, 0xC7	; 199
    558a:	93 e0       	ldi	r25, 0x03	; 3
    558c:	a0 e0       	ldi	r26, 0x00	; 0
    558e:	ed b7       	in	r30, 0x3d	; 61
    5590:	fe b7       	in	r31, 0x3e	; 62
    5592:	81 83       	std	Z+1, r24	; 0x01
    5594:	92 83       	std	Z+2, r25	; 0x02
    5596:	a3 83       	std	Z+3, r26	; 0x03
    5598:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <i2c_init_status>
    55a2:	cf bf       	out	0x3f, r28	; 63
    55a4:	0f 90       	pop	r0
    55a6:	0f 90       	pop	r0
    55a8:	0f 90       	pop	r0
    55aa:	cf 91       	pop	r28
    55ac:	08 95       	ret

000055ae <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    55ae:	61 e0       	ldi	r22, 0x01	; 1
    55b0:	70 e0       	ldi	r23, 0x00	; 0
    55b2:	80 e0       	ldi	r24, 0x00	; 0
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	a5 db       	rcall	.-2230   	; 0x4d02 <delayus>
	if(!i2c.enable || i2c.done )
    55b8:	80 91 4f 1a 	lds	r24, 0x1A4F	; 0x801a4f <i2c+0x1>
    55bc:	88 23       	and	r24, r24
    55be:	39 f0       	breq	.+14     	; 0x55ce <i2c_done+0x20>
		return(1);
    55c0:	81 e0       	ldi	r24, 0x01	; 1
    55c2:	90 91 50 1a 	lds	r25, 0x1A50	; 0x801a50 <i2c+0x2>
    55c6:	91 11       	cpse	r25, r1
    55c8:	03 c0       	rjmp	.+6      	; 0x55d0 <i2c_done+0x22>
    55ca:	80 e0       	ldi	r24, 0x00	; 0
    55cc:	08 95       	ret
    55ce:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    55d0:	08 95       	ret

000055d2 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    55d2:	61 e0       	ldi	r22, 0x01	; 1
    55d4:	70 e0       	ldi	r23, 0x00	; 0
    55d6:	80 e0       	ldi	r24, 0x00	; 0
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	93 db       	rcall	.-2266   	; 0x4d02 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    55dc:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    55e0:	88 23       	and	r24, r24
    55e2:	39 f0       	breq	.+14     	; 0x55f2 <i2c_task_done+0x20>
		return(1);
    55e4:	81 e0       	ldi	r24, 0x01	; 1
    55e6:	90 91 80 17 	lds	r25, 0x1780	; 0x801780 <i2c_task+0x2>
    55ea:	91 11       	cpse	r25, r1
    55ec:	03 c0       	rjmp	.+6      	; 0x55f4 <i2c_task_done+0x22>
    55ee:	80 e0       	ldi	r24, 0x00	; 0
    55f0:	08 95       	ret
    55f2:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    55f4:	08 95       	ret

000055f6 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    55f6:	ee e4       	ldi	r30, 0x4E	; 78
    55f8:	fa e1       	ldi	r31, 0x1A	; 26
    55fa:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    55fc:	81 e0       	ldi	r24, 0x01	; 1
    55fe:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    5600:	8a e0       	ldi	r24, 0x0A	; 10
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	95 83       	std	Z+5, r25	; 0x05
    5606:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5608:	85 ea       	ldi	r24, 0xA5	; 165
    560a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    560e:	08 95       	ret

00005610 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    5610:	ef 92       	push	r14
    5612:	ff 92       	push	r15
    5614:	0f 93       	push	r16
    5616:	1f 93       	push	r17
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
	uint8_t sreg = SREG;
    561c:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    561e:	f8 94       	cli
	i2c_task.done = 0;
    5620:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>
	i2c_task.error = 0;
    5624:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <i2c_task+0x3>
	i2c_task.ind = 0;
    5628:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    562c:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    562e:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    5630:	ee 24       	eor	r14, r14
    5632:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    5634:	0a e0       	ldi	r16, 0x0A	; 10
    5636:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5638:	8c 2f       	mov	r24, r28
    563a:	c6 de       	rcall	.-628    	; 0x53c8 <i2c_check_op>
    563c:	88 23       	and	r24, r24
    563e:	d1 f0       	breq	.+52     	; 0x5674 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    5640:	ec 2f       	mov	r30, r28
    5642:	ee 0f       	add	r30, r30
    5644:	ff 0b       	sbc	r31, r31
    5646:	e2 5a       	subi	r30, 0xA2	; 162
    5648:	f8 4e       	sbci	r31, 0xE8	; 232
    564a:	01 90       	ld	r0, Z+
    564c:	f0 81       	ld	r31, Z
    564e:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5650:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5652:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5654:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5656:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5658:	15 83       	std	Z+5, r17	; 0x05
    565a:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    565c:	d1 11       	cpse	r29, r1
    565e:	07 c0       	rjmp	.+14     	; 0x566e <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5660:	8a e0       	ldi	r24, 0x0A	; 10
    5662:	ae e4       	ldi	r26, 0x4E	; 78
    5664:	ba e1       	ldi	r27, 0x1A	; 26
    5666:	01 90       	ld	r0, Z+
    5668:	0d 92       	st	X+, r0
    566a:	8a 95       	dec	r24
    566c:	e1 f7       	brne	.-8      	; 0x5666 <i2c_task_run+0x56>
    566e:	cf 5f       	subi	r28, 0xFF	; 255
    5670:	d1 e0       	ldi	r29, 0x01	; 1
    5672:	e2 cf       	rjmp	.-60     	; 0x5638 <i2c_task_run+0x28>
		}
	}

	if(run)
    5674:	dd 23       	and	r29, r29
    5676:	91 f0       	breq	.+36     	; 0x569c <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5678:	85 ea       	ldi	r24, 0xA5	; 165
    567a:	9b e2       	ldi	r25, 0x2B	; 43
    567c:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <i2c_callback+0x1>
    5680:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <i2c_callback>

		i2c_task.enable = 1;
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <i2c_task>
		i2c_task.done = 0;
    568a:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    568e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5692:	8c 7f       	andi	r24, 0xFC	; 252
    5694:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5698:	ae df       	rcall	.-164    	; 0x55f6 <i2c_send_start>
    569a:	15 c0       	rjmp	.+42     	; 0x56c6 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    569c:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    56a0:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    56a4:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    56a8:	81 e0       	ldi	r24, 0x01	; 1
    56aa:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    56ae:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
        i2c.enable = 0;
    56b2:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    56b6:	84 e8       	ldi	r24, 0x84	; 132
    56b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    56bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    56c0:	8c 7f       	andi	r24, 0xFC	; 252
    56c2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    56c6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    56ca:	ff be       	out	0x3f, r15	; 63

}
    56cc:	cd b7       	in	r28, 0x3d	; 61
    56ce:	de b7       	in	r29, 0x3e	; 62
    56d0:	e6 e0       	ldi	r30, 0x06	; 6
    56d2:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

000056d6 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    56d6:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    56d8:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    56da:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_callback+0x1>
    56de:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_callback>

	i2c.enable = 1; // Enabled
    56e2:	31 e0       	ldi	r19, 0x01	; 1
    56e4:	30 93 4f 1a 	sts	0x1A4F, r19	; 0x801a4f <i2c+0x1>
	i2c.done = 0;
    56e8:	10 92 50 1a 	sts	0x1A50, r1	; 0x801a50 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    56ec:	88 0f       	add	r24, r24
    56ee:	61 70       	andi	r22, 0x01	; 1
    56f0:	68 2b       	or	r22, r24
    56f2:	60 93 4e 1a 	sts	0x1A4E, r22	; 0x801a4e <i2c>
	i2c.flags = 0;
    56f6:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <i2c+0x3>
    i2c.len = len;
    56fa:	20 93 54 1a 	sts	0x1A54, r18	; 0x801a54 <i2c+0x6>
    i2c.ind = 0;
    56fe:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>
    i2c.buf = buf;
    5702:	50 93 57 1a 	sts	0x1A57, r21	; 0x801a57 <i2c+0x9>
    5706:	40 93 56 1a 	sts	0x1A56, r20	; 0x801a56 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    570a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    570e:	8c 7f       	andi	r24, 0xFC	; 252
    5710:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5714:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5718:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    571a:	6d df       	rcall	.-294    	; 0x55f6 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    571c:	48 df       	rcall	.-368    	; 0x55ae <i2c_done>
    571e:	88 23       	and	r24, r24
    5720:	e9 f3       	breq	.-6      	; 0x571c <i2c_fn+0x46>
    5722:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5724:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <i2c+0x3>
    5728:	91 11       	cpse	r25, r1
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	08 95       	ret

0000572e <i2c_send_stop>:
}
    572e:	ee e4       	ldi	r30, 0x4E	; 78
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5730:	fa e1       	ldi	r31, 0x1A	; 26
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5736:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5738:	84 e9       	ldi	r24, 0x94	; 148
    573a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    573e:	6a e0       	ldi	r22, 0x0A	; 10
    5740:	70 e0       	ldi	r23, 0x00	; 0
    5742:	80 e0       	ldi	r24, 0x00	; 0
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	dd ca       	rjmp	.-2630   	; 0x4d02 <delayus>
    5748:	08 95       	ret

0000574a <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    574a:	cf 93       	push	r28
    574c:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    574e:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <i2c_task>
    5752:	88 23       	and	r24, r24
    5754:	09 f4       	brne	.+2      	; 0x5758 <i2c_task_next_op+0xe>
    5756:	46 c0       	rjmp	.+140    	; 0x57e4 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5758:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    575c:	35 de       	rcall	.-918    	; 0x53c8 <i2c_check_op>
    575e:	88 23       	and	r24, r24
    5760:	b1 f0       	breq	.+44     	; 0x578e <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5762:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    5766:	ee 0f       	add	r30, r30
    5768:	ff 0b       	sbc	r31, r31
    576a:	e2 5a       	subi	r30, 0xA2	; 162
    576c:	f8 4e       	sbci	r31, 0xE8	; 232
    576e:	c0 81       	ld	r28, Z
    5770:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5772:	8a e0       	ldi	r24, 0x0A	; 10
    5774:	ee e4       	ldi	r30, 0x4E	; 78
    5776:	fa e1       	ldi	r31, 0x1A	; 26
    5778:	de 01       	movw	r26, r28
    577a:	01 90       	ld	r0, Z+
    577c:	0d 92       	st	X+, r0
    577e:	8a 95       	dec	r24
    5780:	e1 f7       	brne	.-8      	; 0x577a <i2c_task_next_op+0x30>
			if(o->flags)
    5782:	8b 81       	ldd	r24, Y+3	; 0x03
    5784:	88 23       	and	r24, r24
    5786:	19 f0       	breq	.+6      	; 0x578e <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    578e:	80 91 7f 17 	lds	r24, 0x177F	; 0x80177f <i2c_task+0x1>
    5792:	8f 5f       	subi	r24, 0xFF	; 255
    5794:	19 de       	rcall	.-974    	; 0x53c8 <i2c_check_op>
    5796:	88 23       	and	r24, r24
    5798:	29 f1       	breq	.+74     	; 0x57e4 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    579a:	e0 91 7f 17 	lds	r30, 0x177F	; 0x80177f <i2c_task+0x1>
    579e:	ef 5f       	subi	r30, 0xFF	; 255
    57a0:	e0 93 7f 17 	sts	0x177F, r30	; 0x80177f <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    57a4:	ee 0f       	add	r30, r30
    57a6:	ff 0b       	sbc	r31, r31
    57a8:	e2 5a       	subi	r30, 0xA2	; 162
    57aa:	f8 4e       	sbci	r31, 0xE8	; 232
    57ac:	01 90       	ld	r0, Z+
    57ae:	f0 81       	ld	r31, Z
    57b0:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    57b2:	81 81       	ldd	r24, Z+1	; 0x01
    57b4:	81 30       	cpi	r24, 0x01	; 1
    57b6:	19 f0       	breq	.+6      	; 0x57be <i2c_task_next_op+0x74>
    57b8:	82 81       	ldd	r24, Z+2	; 0x02
    57ba:	81 11       	cpse	r24, r1
    57bc:	13 c0       	rjmp	.+38     	; 0x57e4 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    57be:	8a e0       	ldi	r24, 0x0A	; 10
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	95 83       	std	Z+5, r25	; 0x05
    57c4:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    57c6:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    57c8:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    57ce:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    57d0:	8a e0       	ldi	r24, 0x0A	; 10
    57d2:	ae e4       	ldi	r26, 0x4E	; 78
    57d4:	ba e1       	ldi	r27, 0x1A	; 26
    57d6:	01 90       	ld	r0, Z+
    57d8:	0d 92       	st	X+, r0
    57da:	8a 95       	dec	r24

				i2c_send_start();
    57dc:	e1 f7       	brne	.-8      	; 0x57d6 <i2c_task_next_op+0x8c>
    57de:	0b df       	rcall	.-490    	; 0x55f6 <i2c_send_start>

				return(1);
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	0f c0       	rjmp	.+30     	; 0x5802 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    57e4:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
	i2c_task.done = 1;
    57e8:	81 e0       	ldi	r24, 0x01	; 1
    57ea:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    57ee:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
	i2c.enable = 0;
    57f2:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
	i2c.flags = 0;
    57f6:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <i2c+0x3>
	i2c.ind = 0;
    57fa:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>

	i2c_send_stop();
    57fe:	97 df       	rcall	.-210    	; 0x572e <i2c_send_stop>

	return(0);
    5800:	80 e0       	ldi	r24, 0x00	; 0
}
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	08 95       	ret

00005808 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5808:	e0 91 82 17 	lds	r30, 0x1782	; 0x801782 <i2c_callback>
    580c:	f0 91 83 17 	lds	r31, 0x1783	; 0x801783 <i2c_callback+0x1>
    5810:	30 97       	sbiw	r30, 0x00	; 0
    5812:	11 f0       	breq	.+4      	; 0x5818 <i2c_next+0x10>
	    i2c_callback();
    5814:	09 95       	icall
    5816:	08 95       	ret
	else
		i2c_send_stop();
    5818:	8a cf       	rjmp	.-236    	; 0x572e <i2c_send_stop>
    581a:	08 95       	ret

0000581c <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    581c:	1f 92       	push	r1
    581e:	0f 92       	push	r0
    5820:	0f b6       	in	r0, 0x3f	; 63
    5822:	0f 92       	push	r0
    5824:	11 24       	eor	r1, r1
    5826:	0b b6       	in	r0, 0x3b	; 59
    5828:	0f 92       	push	r0
    582a:	2f 93       	push	r18
    582c:	3f 93       	push	r19
    582e:	4f 93       	push	r20
    5830:	5f 93       	push	r21
    5832:	6f 93       	push	r22
    5834:	7f 93       	push	r23
    5836:	8f 93       	push	r24
    5838:	9f 93       	push	r25
    583a:	af 93       	push	r26
    583c:	bf 93       	push	r27
    583e:	ef 93       	push	r30
    5840:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5842:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5846:	90 91 4f 1a 	lds	r25, 0x1A4F	; 0x801a4f <i2c+0x1>
    584a:	99 23       	and	r25, r25
    584c:	09 f1       	breq	.+66     	; 0x5890 <__vector_26+0x74>
    584e:	90 91 50 1a 	lds	r25, 0x1A50	; 0x801a50 <i2c+0x2>
    5852:	91 11       	cpse	r25, r1
    5854:	1d c0       	rjmp	.+58     	; 0x5890 <__vector_26+0x74>
    5856:	20 91 56 1a 	lds	r18, 0x1A56	; 0x801a56 <i2c+0x8>
    585a:	30 91 57 1a 	lds	r19, 0x1A57	; 0x801a57 <i2c+0x9>
    585e:	21 15       	cp	r18, r1
    5860:	31 05       	cpc	r19, r1
    5862:	b1 f0       	breq	.+44     	; 0x5890 <__vector_26+0x74>
    5864:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x6>
    5868:	99 23       	and	r25, r25
    586a:	91 f0       	breq	.+36     	; 0x5890 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    586c:	40 91 52 1a 	lds	r20, 0x1A52	; 0x801a52 <i2c+0x4>
    5870:	50 91 53 1a 	lds	r21, 0x1A53	; 0x801a53 <i2c+0x5>
    5874:	45 2b       	or	r20, r21
    5876:	71 f4       	brne	.+28     	; 0x5894 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5878:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    587c:	81 60       	ori	r24, 0x01	; 1
    587e:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <i2c+0x3>
		i2c_task.enable = 0;
    5882:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_task>
		i2c_task.done = 1;
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <i2c_task+0x2>
		i2c_task.error = 1;
    588c:	80 93 81 17 	sts	0x1781, r24	; 0x801781 <i2c_task+0x3>
		i2c_send_stop();
    5890:	4e df       	rcall	.-356    	; 0x572e <i2c_send_stop>
		return;
    5892:	9b c0       	rjmp	.+310    	; 0x59ca <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5894:	88 7f       	andi	r24, 0xF8	; 248
    5896:	80 33       	cpi	r24, 0x30	; 48
    5898:	09 f4       	brne	.+2      	; 0x589c <__vector_26+0x80>
    589a:	83 c0       	rjmp	.+262    	; 0x59a2 <__vector_26+0x186>
    589c:	70 f4       	brcc	.+28     	; 0x58ba <__vector_26+0x9e>
    589e:	88 31       	cpi	r24, 0x18	; 24
    58a0:	09 f1       	breq	.+66     	; 0x58e4 <__vector_26+0xc8>
    58a2:	28 f4       	brcc	.+10     	; 0x58ae <__vector_26+0x92>
    58a4:	88 30       	cpi	r24, 0x08	; 8
    58a6:	c9 f0       	breq	.+50     	; 0x58da <__vector_26+0xbe>
    58a8:	80 31       	cpi	r24, 0x10	; 16
    58aa:	b9 f0       	breq	.+46     	; 0x58da <__vector_26+0xbe>
    58ac:	83 c0       	rjmp	.+262    	; 0x59b4 <__vector_26+0x198>
    58ae:	80 32       	cpi	r24, 0x20	; 32
    58b0:	09 f4       	brne	.+2      	; 0x58b4 <__vector_26+0x98>
    58b2:	65 c0       	rjmp	.+202    	; 0x597e <__vector_26+0x162>
    58b4:	88 32       	cpi	r24, 0x28	; 40
    58b6:	b1 f0       	breq	.+44     	; 0x58e4 <__vector_26+0xc8>
    58b8:	7d c0       	rjmp	.+250    	; 0x59b4 <__vector_26+0x198>
    58ba:	88 34       	cpi	r24, 0x48	; 72
    58bc:	09 f4       	brne	.+2      	; 0x58c0 <__vector_26+0xa4>
    58be:	68 c0       	rjmp	.+208    	; 0x5990 <__vector_26+0x174>
    58c0:	38 f4       	brcc	.+14     	; 0x58d0 <__vector_26+0xb4>
    58c2:	88 33       	cpi	r24, 0x38	; 56
    58c4:	09 f4       	brne	.+2      	; 0x58c8 <__vector_26+0xac>
    58c6:	57 c0       	rjmp	.+174    	; 0x5976 <__vector_26+0x15a>
    58c8:	80 34       	cpi	r24, 0x40	; 64
    58ca:	09 f4       	brne	.+2      	; 0x58ce <__vector_26+0xb2>
    58cc:	42 c0       	rjmp	.+132    	; 0x5952 <__vector_26+0x136>
    58ce:	72 c0       	rjmp	.+228    	; 0x59b4 <__vector_26+0x198>
    58d0:	80 35       	cpi	r24, 0x50	; 80
    58d2:	79 f1       	breq	.+94     	; 0x5932 <__vector_26+0x116>
    58d4:	88 35       	cpi	r24, 0x58	; 88
    58d6:	b9 f0       	breq	.+46     	; 0x5906 <__vector_26+0xea>
    58d8:	6d c0       	rjmp	.+218    	; 0x59b4 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    58da:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x7>
			TWDR = i2c.address;
    58de:	80 91 4e 1a 	lds	r24, 0x1A4E	; 0x801a4e <i2c>
    58e2:	0e c0       	rjmp	.+28     	; 0x5900 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    58e4:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    58e8:	89 17       	cp	r24, r25
    58ea:	ec f4       	brge	.+58     	; 0x5926 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    58ec:	91 e0       	ldi	r25, 0x01	; 1
    58ee:	98 0f       	add	r25, r24
    58f0:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    58f4:	f9 01       	movw	r30, r18
    58f6:	e8 0f       	add	r30, r24
    58f8:	f1 1d       	adc	r31, r1
    58fa:	87 fd       	sbrc	r24, 7
    58fc:	fa 95       	dec	r31
    58fe:	80 81       	ld	r24, Z
    5900:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5904:	36 c0       	rjmp	.+108    	; 0x5972 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5906:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    590a:	89 17       	cp	r24, r25
    590c:	64 f4       	brge	.+24     	; 0x5926 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    590e:	91 e0       	ldi	r25, 0x01	; 1
    5910:	98 0f       	add	r25, r24
    5912:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5916:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    591a:	f9 01       	movw	r30, r18
    591c:	e8 0f       	add	r30, r24
    591e:	f1 1d       	adc	r31, r1
    5920:	87 fd       	sbrc	r24, 7
    5922:	fa 95       	dec	r31
    5924:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
				i2c.enable = 0;
    592c:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
    5930:	4b c0       	rjmp	.+150    	; 0x59c8 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5932:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5936:	89 17       	cp	r24, r25
    5938:	64 f4       	brge	.+24     	; 0x5952 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    593a:	91 e0       	ldi	r25, 0x01	; 1
    593c:	98 0f       	add	r25, r24
    593e:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <i2c+0x7>
    5942:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5946:	f9 01       	movw	r30, r18
    5948:	e8 0f       	add	r30, r24
    594a:	f1 1d       	adc	r31, r1
    594c:	87 fd       	sbrc	r24, 7
    594e:	fa 95       	dec	r31
    5950:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5952:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x7>
    5956:	08 2e       	mov	r0, r24
    5958:	00 0c       	add	r0, r0
    595a:	99 0b       	sbc	r25, r25
    595c:	01 96       	adiw	r24, 0x01	; 1
    595e:	20 91 54 1a 	lds	r18, 0x1A54	; 0x801a54 <i2c+0x6>
    5962:	02 2e       	mov	r0, r18
    5964:	00 0c       	add	r0, r0
    5966:	33 0b       	sbc	r19, r19
    5968:	82 17       	cp	r24, r18
    596a:	93 07       	cpc	r25, r19
    596c:	14 f4       	brge	.+4      	; 0x5972 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    596e:	85 ec       	ldi	r24, 0xC5	; 197
    5970:	03 c0       	rjmp	.+6      	; 0x5978 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5972:	85 e8       	ldi	r24, 0x85	; 133
    5974:	01 c0       	rjmp	.+2      	; 0x5978 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5976:	85 ea       	ldi	r24, 0xA5	; 165
    5978:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    597c:	26 c0       	rjmp	.+76     	; 0x59ca <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5984:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5988:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    598c:	88 60       	ori	r24, 0x08	; 8
    598e:	1a c0       	rjmp	.+52     	; 0x59c4 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    5996:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    599a:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    599e:	80 61       	ori	r24, 0x10	; 16
    59a0:	11 c0       	rjmp	.+34     	; 0x59c4 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    59a8:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    59ac:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    59b0:	80 62       	ori	r24, 0x20	; 32
    59b2:	08 c0       	rjmp	.+16     	; 0x59c4 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    59b4:	81 e0       	ldi	r24, 0x01	; 1
    59b6:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <i2c+0x2>
			i2c.enable = 0;
    59ba:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    59be:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <i2c+0x3>
    59c2:	80 64       	ori	r24, 0x40	; 64
    59c4:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <i2c+0x3>
			i2c_next();
    59c8:	1f df       	rcall	.-450    	; 0x5808 <i2c_next>
			break;
	}
}
    59ca:	ff 91       	pop	r31
    59cc:	ef 91       	pop	r30
    59ce:	bf 91       	pop	r27
    59d0:	af 91       	pop	r26
    59d2:	9f 91       	pop	r25
    59d4:	8f 91       	pop	r24
    59d6:	7f 91       	pop	r23
    59d8:	6f 91       	pop	r22
    59da:	5f 91       	pop	r21
    59dc:	4f 91       	pop	r20
    59de:	3f 91       	pop	r19
    59e0:	2f 91       	pop	r18
    59e2:	0f 90       	pop	r0
    59e4:	0b be       	out	0x3b, r0	; 59
    59e6:	0f 90       	pop	r0
    59e8:	0f be       	out	0x3f, r0	; 63
    59ea:	0f 90       	pop	r0
    59ec:	1f 90       	pop	r1
    59ee:	18 95       	reti

000059f0 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    59f0:	cf 93       	push	r28
    59f2:	00 d0       	rcall	.+0      	; 0x59f4 <i2c_print_error+0x4>
    59f4:	00 d0       	rcall	.+0      	; 0x59f6 <i2c_print_error+0x6>
    59f6:	1f 92       	push	r1
    int flags = o->flags;
    59f8:	fc 01       	movw	r30, r24
    59fa:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    59fc:	cc 23       	and	r28, r28
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <i2c_print_error+0x12>
    5a00:	67 c0       	rjmp	.+206    	; 0x5ad0 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5a02:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x2>
    5a06:	81 11       	cpse	r24, r1
    5a08:	03 c0       	rjmp	.+6      	; 0x5a10 <i2c_print_error+0x20>
    5a0a:	88 e2       	ldi	r24, 0x28	; 40
    5a0c:	93 e0       	ldi	r25, 0x03	; 3
    5a0e:	02 c0       	rjmp	.+4      	; 0x5a14 <i2c_print_error+0x24>
    5a10:	83 e2       	ldi	r24, 0x23	; 35
    5a12:	93 e0       	ldi	r25, 0x03	; 3
    5a14:	ed b7       	in	r30, 0x3d	; 61
    5a16:	fe b7       	in	r31, 0x3e	; 62
    5a18:	95 83       	std	Z+5, r25	; 0x05
    5a1a:	84 83       	std	Z+4, r24	; 0x04
    5a1c:	81 ec       	ldi	r24, 0xC1	; 193
    5a1e:	93 e0       	ldi	r25, 0x03	; 3
    5a20:	a0 e0       	ldi	r26, 0x00	; 0
    5a22:	81 83       	std	Z+1, r24	; 0x01
    5a24:	92 83       	std	Z+2, r25	; 0x02
    5a26:	a3 83       	std	Z+3, r26	; 0x03
    5a28:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5a2c:	c0 ff       	sbrs	r28, 0
    5a2e:	0a c0       	rjmp	.+20     	; 0x5a44 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5a30:	83 eb       	ldi	r24, 0xB3	; 179
    5a32:	93 e0       	ldi	r25, 0x03	; 3
    5a34:	a0 e0       	ldi	r26, 0x00	; 0
    5a36:	ed b7       	in	r30, 0x3d	; 61
    5a38:	fe b7       	in	r31, 0x3e	; 62
    5a3a:	81 83       	std	Z+1, r24	; 0x01
    5a3c:	92 83       	std	Z+2, r25	; 0x02
    5a3e:	a3 83       	std	Z+3, r26	; 0x03
    5a40:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		if(flags & I2C_OP_LEN)
    5a44:	c1 ff       	sbrs	r28, 1
    5a46:	0a c0       	rjmp	.+20     	; 0x5a5c <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5a48:	89 ea       	ldi	r24, 0xA9	; 169
    5a4a:	93 e0       	ldi	r25, 0x03	; 3
    5a4c:	a0 e0       	ldi	r26, 0x00	; 0
    5a4e:	ed b7       	in	r30, 0x3d	; 61
    5a50:	fe b7       	in	r31, 0x3e	; 62
    5a52:	81 83       	std	Z+1, r24	; 0x01
    5a54:	92 83       	std	Z+2, r25	; 0x02
    5a56:	a3 83       	std	Z+3, r26	; 0x03
    5a58:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		if(flags & I2C_OP_ERROR)
    5a5c:	c2 ff       	sbrs	r28, 2
    5a5e:	0a c0       	rjmp	.+20     	; 0x5a74 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5a60:	8d e9       	ldi	r24, 0x9D	; 157
    5a62:	93 e0       	ldi	r25, 0x03	; 3
    5a64:	a0 e0       	ldi	r26, 0x00	; 0
    5a66:	ed b7       	in	r30, 0x3d	; 61
    5a68:	fe b7       	in	r31, 0x3e	; 62
    5a6a:	81 83       	std	Z+1, r24	; 0x01
    5a6c:	92 83       	std	Z+2, r25	; 0x02
    5a6e:	a3 83       	std	Z+3, r26	; 0x03
    5a70:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5a74:	c4 ff       	sbrs	r28, 4
    5a76:	0a c0       	rjmp	.+20     	; 0x5a8c <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5a78:	8b e8       	ldi	r24, 0x8B	; 139
    5a7a:	93 e0       	ldi	r25, 0x03	; 3
    5a7c:	a0 e0       	ldi	r26, 0x00	; 0
    5a7e:	ed b7       	in	r30, 0x3d	; 61
    5a80:	fe b7       	in	r31, 0x3e	; 62
    5a82:	81 83       	std	Z+1, r24	; 0x01
    5a84:	92 83       	std	Z+2, r25	; 0x02
    5a86:	a3 83       	std	Z+3, r26	; 0x03
    5a88:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5a8c:	c3 ff       	sbrs	r28, 3
    5a8e:	0a c0       	rjmp	.+20     	; 0x5aa4 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5a90:	89 e7       	ldi	r24, 0x79	; 121
    5a92:	93 e0       	ldi	r25, 0x03	; 3
    5a94:	a0 e0       	ldi	r26, 0x00	; 0
    5a96:	ed b7       	in	r30, 0x3d	; 61
    5a98:	fe b7       	in	r31, 0x3e	; 62
    5a9a:	81 83       	std	Z+1, r24	; 0x01
    5a9c:	92 83       	std	Z+2, r25	; 0x02
    5a9e:	a3 83       	std	Z+3, r26	; 0x03
    5aa0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5aa4:	c5 ff       	sbrs	r28, 5
    5aa6:	0a c0       	rjmp	.+20     	; 0x5abc <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5aa8:	86 e6       	ldi	r24, 0x66	; 102
    5aaa:	93 e0       	ldi	r25, 0x03	; 3
    5aac:	a0 e0       	ldi	r26, 0x00	; 0
    5aae:	ed b7       	in	r30, 0x3d	; 61
    5ab0:	fe b7       	in	r31, 0x3e	; 62
    5ab2:	81 83       	std	Z+1, r24	; 0x01
    5ab4:	92 83       	std	Z+2, r25	; 0x02
    5ab6:	a3 83       	std	Z+3, r26	; 0x03
    5ab8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		printf("\n");
    5abc:	84 e6       	ldi	r24, 0x64	; 100
    5abe:	93 e0       	ldi	r25, 0x03	; 3
    5ac0:	a0 e0       	ldi	r26, 0x00	; 0
    5ac2:	ed b7       	in	r30, 0x3d	; 61
    5ac4:	fe b7       	in	r31, 0x3e	; 62
    5ac6:	81 83       	std	Z+1, r24	; 0x01
    5ac8:	92 83       	std	Z+2, r25	; 0x02
    5aca:	a3 83       	std	Z+3, r26	; 0x03
    5acc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
	}
}
    5ad0:	0f 90       	pop	r0
    5ad2:	0f 90       	pop	r0
    5ad4:	0f 90       	pop	r0
    5ad6:	0f 90       	pop	r0
    5ad8:	0f 90       	pop	r0
    5ada:	cf 91       	pop	r28
    5adc:	08 95       	ret

00005ade <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5ade:	6f 92       	push	r6
    5ae0:	7f 92       	push	r7
    5ae2:	8f 92       	push	r8
    5ae4:	af 92       	push	r10
    5ae6:	bf 92       	push	r11
    5ae8:	cf 92       	push	r12
    5aea:	df 92       	push	r13
    5aec:	ef 92       	push	r14
    5aee:	0f 93       	push	r16
    5af0:	1f 93       	push	r17
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	00 d0       	rcall	.+0      	; 0x5af8 <i2c_display_task_errors+0x1a>
    5af8:	00 d0       	rcall	.+0      	; 0x5afa <i2c_display_task_errors+0x1c>
    5afa:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5afc:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	ed b7       	in	r30, 0x3d	; 61
    5b04:	fe b7       	in	r31, 0x3e	; 62
    5b06:	95 83       	std	Z+5, r25	; 0x05
    5b08:	84 83       	std	Z+4, r24	; 0x04
    5b0a:	81 e5       	ldi	r24, 0x51	; 81
    5b0c:	93 e0       	ldi	r25, 0x03	; 3
    5b0e:	a0 e0       	ldi	r26, 0x00	; 0
    5b10:	81 83       	std	Z+1, r24	; 0x01
    5b12:	92 83       	std	Z+2, r25	; 0x02
    5b14:	a3 83       	std	Z+3, r26	; 0x03
    5b16:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5b1a:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	ed b7       	in	r30, 0x3d	; 61
    5b22:	fe b7       	in	r31, 0x3e	; 62
    5b24:	95 83       	std	Z+5, r25	; 0x05
    5b26:	84 83       	std	Z+4, r24	; 0x04
    5b28:	8d e3       	ldi	r24, 0x3D	; 61
    5b2a:	93 e0       	ldi	r25, 0x03	; 3
    5b2c:	a0 e0       	ldi	r26, 0x00	; 0
    5b2e:	81 83       	std	Z+1, r24	; 0x01
    5b30:	92 83       	std	Z+2, r25	; 0x02
    5b32:	a3 83       	std	Z+3, r26	; 0x03
    5b34:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5b38:	ce e5       	ldi	r28, 0x5E	; 94
    5b3a:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5b3c:	00 e0       	ldi	r16, 0x00	; 0
    5b3e:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5b40:	83 e3       	ldi	r24, 0x33	; 51
    5b42:	93 e0       	ldi	r25, 0x03	; 3
    5b44:	6c 01       	movw	r12, r24
    5b46:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5b48:	81 e3       	ldi	r24, 0x31	; 49
    5b4a:	93 e0       	ldi	r25, 0x03	; 3
    5b4c:	3c 01       	movw	r6, r24
    5b4e:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5b50:	30 2f       	mov	r19, r16
    5b52:	21 2f       	mov	r18, r17
    5b54:	5e 01       	movw	r10, r28
    5b56:	0f 5f       	subi	r16, 0xFF	; 255
    5b58:	1f 4f       	sbci	r17, 0xFF	; 255
    5b5a:	88 81       	ld	r24, Y
    5b5c:	99 81       	ldd	r25, Y+1	; 0x01
    5b5e:	89 2b       	or	r24, r25
    5b60:	b1 f0       	breq	.+44     	; 0x5b8e <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5b62:	ed b7       	in	r30, 0x3d	; 61
    5b64:	fe b7       	in	r31, 0x3e	; 62
    5b66:	34 83       	std	Z+4, r19	; 0x04
    5b68:	25 83       	std	Z+5, r18	; 0x05
    5b6a:	c1 82       	std	Z+1, r12	; 0x01
    5b6c:	d2 82       	std	Z+2, r13	; 0x02
    5b6e:	e3 82       	std	Z+3, r14	; 0x03
    5b70:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5b74:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5b76:	f5 01       	movw	r30, r10
    5b78:	80 81       	ld	r24, Z
    5b7a:	91 81       	ldd	r25, Z+1	; 0x01
    5b7c:	39 df       	rcall	.-398    	; 0x59f0 <i2c_print_error>
		printf("\n");
    5b7e:	ed b7       	in	r30, 0x3d	; 61
    5b80:	fe b7       	in	r31, 0x3e	; 62
    5b82:	61 82       	std	Z+1, r6	; 0x01
    5b84:	72 82       	std	Z+2, r7	; 0x02
    5b86:	83 82       	std	Z+3, r8	; 0x03
    5b88:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5b8c:	e1 cf       	rjmp	.-62     	; 0x5b50 <i2c_display_task_errors+0x72>
	}
}
    5b8e:	0f 90       	pop	r0
    5b90:	0f 90       	pop	r0
    5b92:	0f 90       	pop	r0
    5b94:	0f 90       	pop	r0
    5b96:	0f 90       	pop	r0
    5b98:	df 91       	pop	r29
    5b9a:	cf 91       	pop	r28
    5b9c:	1f 91       	pop	r17
    5b9e:	0f 91       	pop	r16
    5ba0:	ef 90       	pop	r14
    5ba2:	df 90       	pop	r13
    5ba4:	cf 90       	pop	r12
    5ba6:	bf 90       	pop	r11
    5ba8:	af 90       	pop	r10
    5baa:	8f 90       	pop	r8
    5bac:	7f 90       	pop	r7
    5bae:	6f 90       	pop	r6
    5bb0:	08 95       	ret

00005bb2 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5bb2:	6a e0       	ldi	r22, 0x0A	; 10
    5bb4:	0e 94 4c e2 	call	0x1c498	; 0x1c498 <__udivmodqi4>
    5bb8:	82 95       	swap	r24
    5bba:	80 7f       	andi	r24, 0xF0	; 240
    5bbc:	89 2b       	or	r24, r25
    5bbe:	08 95       	ret

00005bc0 <BCDtoBIN>:
    5bc0:	98 2f       	mov	r25, r24
    5bc2:	92 95       	swap	r25
    5bc4:	9f 70       	andi	r25, 0x0F	; 15
    5bc6:	8f 70       	andi	r24, 0x0F	; 15
    5bc8:	2a e0       	ldi	r18, 0x0A	; 10
    5bca:	92 9f       	mul	r25, r18
    5bcc:	80 0d       	add	r24, r0
    5bce:	11 24       	eor	r1, r1
    5bd0:	08 95       	ret

00005bd2 <i2c_rtc_write>:
    5bd2:	ac e0       	ldi	r26, 0x0C	; 12
    5bd4:	b0 e0       	ldi	r27, 0x00	; 0
    5bd6:	ef ee       	ldi	r30, 0xEF	; 239
    5bd8:	fd e2       	ldi	r31, 0x2D	; 45
    5bda:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    5bde:	9f ef       	ldi	r25, 0xFF	; 255
    5be0:	92 0f       	add	r25, r18
    5be2:	98 30       	cpi	r25, 0x08	; 8
    5be4:	50 f5       	brcc	.+84     	; 0x5c3a <i2c_rtc_write+0x68>
    5be6:	6c 83       	std	Y+4, r22	; 0x04
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	02 2f       	mov	r16, r18
    5bec:	10 e0       	ldi	r17, 0x00	; 0
    5bee:	69 2f       	mov	r22, r25
    5bf0:	09 2e       	mov	r0, r25
    5bf2:	00 0c       	add	r0, r0
    5bf4:	77 0b       	sbc	r23, r23
    5bf6:	60 17       	cp	r22, r16
    5bf8:	71 07       	cpc	r23, r17
    5bfa:	6c f4       	brge	.+26     	; 0x5c16 <i2c_rtc_write+0x44>
    5bfc:	a5 e0       	ldi	r26, 0x05	; 5
    5bfe:	b0 e0       	ldi	r27, 0x00	; 0
    5c00:	ac 0f       	add	r26, r28
    5c02:	bd 1f       	adc	r27, r29
    5c04:	a6 0f       	add	r26, r22
    5c06:	b7 1f       	adc	r27, r23
    5c08:	64 0f       	add	r22, r20
    5c0a:	75 1f       	adc	r23, r21
    5c0c:	fb 01       	movw	r30, r22
    5c0e:	30 81       	ld	r19, Z
    5c10:	3c 93       	st	X, r19
    5c12:	9f 5f       	subi	r25, 0xFF	; 255
    5c14:	ec cf       	rjmp	.-40     	; 0x5bee <i2c_rtc_write+0x1c>
    5c16:	2f 5f       	subi	r18, 0xFF	; 255
    5c18:	ae 01       	movw	r20, r28
    5c1a:	4c 5f       	subi	r20, 0xFC	; 252
    5c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c1e:	60 e0       	ldi	r22, 0x00	; 0
    5c20:	5a dd       	rcall	.-1356   	; 0x56d6 <i2c_fn>
    5c22:	81 11       	cpse	r24, r1
    5c24:	0c c0       	rjmp	.+24     	; 0x5c3e <i2c_rtc_write+0x6c>
    5c26:	8e ed       	ldi	r24, 0xDE	; 222
    5c28:	94 e0       	ldi	r25, 0x04	; 4
    5c2a:	a0 e0       	ldi	r26, 0x00	; 0
    5c2c:	ed b7       	in	r30, 0x3d	; 61
    5c2e:	fe b7       	in	r31, 0x3e	; 62
    5c30:	81 83       	std	Z+1, r24	; 0x01
    5c32:	92 83       	std	Z+2, r25	; 0x02
    5c34:	a3 83       	std	Z+3, r26	; 0x03
    5c36:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5c3a:	80 e0       	ldi	r24, 0x00	; 0
    5c3c:	01 c0       	rjmp	.+2      	; 0x5c40 <i2c_rtc_write+0x6e>
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	2c 96       	adiw	r28, 0x0c	; 12
    5c42:	e4 e0       	ldi	r30, 0x04	; 4
    5c44:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00005c48 <i2c_rtc_read>:
    5c48:	a4 e0       	ldi	r26, 0x04	; 4
    5c4a:	b0 e0       	ldi	r27, 0x00	; 0
    5c4c:	ea e2       	ldi	r30, 0x2A	; 42
    5c4e:	fe e2       	ldi	r31, 0x2E	; 46
    5c50:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
    5c54:	6c 83       	std	Y+4, r22	; 0x04
    5c56:	9f ef       	ldi	r25, 0xFF	; 255
    5c58:	92 0f       	add	r25, r18
    5c5a:	98 30       	cpi	r25, 0x08	; 8
    5c5c:	f8 f4       	brcc	.+62     	; 0x5c9c <i2c_rtc_read+0x54>
    5c5e:	02 2f       	mov	r16, r18
    5c60:	7a 01       	movw	r14, r20
    5c62:	18 2f       	mov	r17, r24
    5c64:	21 e0       	ldi	r18, 0x01	; 1
    5c66:	ae 01       	movw	r20, r28
    5c68:	4c 5f       	subi	r20, 0xFC	; 252
    5c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c6c:	60 e0       	ldi	r22, 0x00	; 0
    5c6e:	33 dd       	rcall	.-1434   	; 0x56d6 <i2c_fn>
    5c70:	81 11       	cpse	r24, r1
    5c72:	03 c0       	rjmp	.+6      	; 0x5c7a <i2c_rtc_read+0x32>
    5c74:	82 ec       	ldi	r24, 0xC2	; 194
    5c76:	94 e0       	ldi	r25, 0x04	; 4
    5c78:	09 c0       	rjmp	.+18     	; 0x5c8c <i2c_rtc_read+0x44>
    5c7a:	20 2f       	mov	r18, r16
    5c7c:	a7 01       	movw	r20, r14
    5c7e:	61 e0       	ldi	r22, 0x01	; 1
    5c80:	81 2f       	mov	r24, r17
    5c82:	29 dd       	rcall	.-1454   	; 0x56d6 <i2c_fn>
    5c84:	81 11       	cpse	r24, r1
    5c86:	0c c0       	rjmp	.+24     	; 0x5ca0 <i2c_rtc_read+0x58>
    5c88:	89 ea       	ldi	r24, 0xA9	; 169
    5c8a:	94 e0       	ldi	r25, 0x04	; 4
    5c8c:	a0 e0       	ldi	r26, 0x00	; 0
    5c8e:	ed b7       	in	r30, 0x3d	; 61
    5c90:	fe b7       	in	r31, 0x3e	; 62
    5c92:	81 83       	std	Z+1, r24	; 0x01
    5c94:	92 83       	std	Z+2, r25	; 0x02
    5c96:	a3 83       	std	Z+3, r26	; 0x03
    5c98:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5c9c:	80 e0       	ldi	r24, 0x00	; 0
    5c9e:	01 c0       	rjmp	.+2      	; 0x5ca2 <i2c_rtc_read+0x5a>
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	24 96       	adiw	r28, 0x04	; 4
    5ca4:	e6 e0       	ldi	r30, 0x06	; 6
    5ca6:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00005caa <i2c_rtc_init>:
    5caa:	60 ea       	ldi	r22, 0xA0	; 160
    5cac:	76 e8       	ldi	r23, 0x86	; 134
    5cae:	81 e0       	ldi	r24, 0x01	; 1
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	18 cc       	rjmp	.-2000   	; 0x54e4 <i2c_init>
    5cb4:	08 95       	ret

00005cb6 <rtc_write>:
    5cb6:	ab e0       	ldi	r26, 0x0B	; 11
    5cb8:	b0 e0       	ldi	r27, 0x00	; 0
    5cba:	e1 e6       	ldi	r30, 0x61	; 97
    5cbc:	fe e2       	ldi	r31, 0x2E	; 46
    5cbe:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    5cc2:	8c 01       	movw	r16, r24
    5cc4:	fc 01       	movw	r30, r24
    5cc6:	80 81       	ld	r24, Z
    5cc8:	74 df       	rcall	.-280    	; 0x5bb2 <BINtoBCD>
    5cca:	8f 77       	andi	r24, 0x7F	; 127
    5ccc:	8c 83       	std	Y+4, r24	; 0x04
    5cce:	f8 01       	movw	r30, r16
    5cd0:	82 81       	ldd	r24, Z+2	; 0x02
    5cd2:	6f df       	rcall	.-290    	; 0x5bb2 <BINtoBCD>
    5cd4:	8f 77       	andi	r24, 0x7F	; 127
    5cd6:	8d 83       	std	Y+5, r24	; 0x05
    5cd8:	f8 01       	movw	r30, r16
    5cda:	84 81       	ldd	r24, Z+4	; 0x04
    5cdc:	6a df       	rcall	.-300    	; 0x5bb2 <BINtoBCD>
    5cde:	8f 73       	andi	r24, 0x3F	; 63
    5ce0:	8e 83       	std	Y+6, r24	; 0x06
    5ce2:	f8 01       	movw	r30, r16
    5ce4:	84 85       	ldd	r24, Z+12	; 0x0c
    5ce6:	87 70       	andi	r24, 0x07	; 7
    5ce8:	8f 5f       	subi	r24, 0xFF	; 255
    5cea:	8f 83       	std	Y+7, r24	; 0x07
    5cec:	86 81       	ldd	r24, Z+6	; 0x06
    5cee:	61 df       	rcall	.-318    	; 0x5bb2 <BINtoBCD>
    5cf0:	8f 73       	andi	r24, 0x3F	; 63
    5cf2:	88 87       	std	Y+8, r24	; 0x08
    5cf4:	f8 01       	movw	r30, r16
    5cf6:	80 85       	ldd	r24, Z+8	; 0x08
    5cf8:	8f 5f       	subi	r24, 0xFF	; 255
    5cfa:	5b df       	rcall	.-330    	; 0x5bb2 <BINtoBCD>
    5cfc:	8f 71       	andi	r24, 0x1F	; 31
    5cfe:	89 87       	std	Y+9, r24	; 0x09
    5d00:	f8 01       	movw	r30, r16
    5d02:	82 85       	ldd	r24, Z+10	; 0x0a
    5d04:	84 56       	subi	r24, 0x64	; 100
    5d06:	55 df       	rcall	.-342    	; 0x5bb2 <BINtoBCD>
    5d08:	8a 87       	std	Y+10, r24	; 0x0a
    5d0a:	83 e9       	ldi	r24, 0x93	; 147
    5d0c:	8b 87       	std	Y+11, r24	; 0x0b
    5d0e:	28 e0       	ldi	r18, 0x08	; 8
    5d10:	ae 01       	movw	r20, r28
    5d12:	4c 5f       	subi	r20, 0xFC	; 252
    5d14:	5f 4f       	sbci	r21, 0xFF	; 255
    5d16:	60 e0       	ldi	r22, 0x00	; 0
    5d18:	88 e6       	ldi	r24, 0x68	; 104
    5d1a:	5b df       	rcall	.-330    	; 0x5bd2 <i2c_rtc_write>
    5d1c:	81 11       	cpse	r24, r1
    5d1e:	0c c0       	rjmp	.+24     	; 0x5d38 <rtc_write+0x82>
    5d20:	88 e9       	ldi	r24, 0x98	; 152
    5d22:	94 e0       	ldi	r25, 0x04	; 4
    5d24:	a0 e0       	ldi	r26, 0x00	; 0
    5d26:	ed b7       	in	r30, 0x3d	; 61
    5d28:	fe b7       	in	r31, 0x3e	; 62
    5d2a:	81 83       	std	Z+1, r24	; 0x01
    5d2c:	92 83       	std	Z+2, r25	; 0x02
    5d2e:	a3 83       	std	Z+3, r26	; 0x03
    5d30:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	01 c0       	rjmp	.+2      	; 0x5d3a <rtc_write+0x84>
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	2b 96       	adiw	r28, 0x0b	; 11
    5d3c:	e4 e0       	ldi	r30, 0x04	; 4
    5d3e:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00005d42 <rtc_read>:
    5d42:	ab e0       	ldi	r26, 0x0B	; 11
    5d44:	b0 e0       	ldi	r27, 0x00	; 0
    5d46:	e7 ea       	ldi	r30, 0xA7	; 167
    5d48:	fe e2       	ldi	r31, 0x2E	; 46
    5d4a:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    5d4e:	8c 01       	movw	r16, r24
    5d50:	28 e0       	ldi	r18, 0x08	; 8
    5d52:	ae 01       	movw	r20, r28
    5d54:	4c 5f       	subi	r20, 0xFC	; 252
    5d56:	5f 4f       	sbci	r21, 0xFF	; 255
    5d58:	60 e0       	ldi	r22, 0x00	; 0
    5d5a:	88 e6       	ldi	r24, 0x68	; 104
    5d5c:	75 df       	rcall	.-278    	; 0x5c48 <i2c_rtc_read>
    5d5e:	81 11       	cpse	r24, r1
    5d60:	0c c0       	rjmp	.+24     	; 0x5d7a <rtc_read+0x38>
    5d62:	88 e8       	ldi	r24, 0x88	; 136
    5d64:	94 e0       	ldi	r25, 0x04	; 4
    5d66:	a0 e0       	ldi	r26, 0x00	; 0
    5d68:	ed b7       	in	r30, 0x3d	; 61
    5d6a:	fe b7       	in	r31, 0x3e	; 62
    5d6c:	81 83       	std	Z+1, r24	; 0x01
    5d6e:	92 83       	std	Z+2, r25	; 0x02
    5d70:	a3 83       	std	Z+3, r26	; 0x03
    5d72:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5d76:	80 e0       	ldi	r24, 0x00	; 0
    5d78:	33 c0       	rjmp	.+102    	; 0x5de0 <rtc_read+0x9e>
    5d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    5d7c:	8f 77       	andi	r24, 0x7F	; 127
    5d7e:	20 df       	rcall	.-448    	; 0x5bc0 <BCDtoBIN>
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	f8 01       	movw	r30, r16
    5d84:	91 83       	std	Z+1, r25	; 0x01
    5d86:	80 83       	st	Z, r24
    5d88:	8d 81       	ldd	r24, Y+5	; 0x05
    5d8a:	8f 77       	andi	r24, 0x7F	; 127
    5d8c:	19 df       	rcall	.-462    	; 0x5bc0 <BCDtoBIN>
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	f8 01       	movw	r30, r16
    5d92:	93 83       	std	Z+3, r25	; 0x03
    5d94:	82 83       	std	Z+2, r24	; 0x02
    5d96:	8e 81       	ldd	r24, Y+6	; 0x06
    5d98:	8f 73       	andi	r24, 0x3F	; 63
    5d9a:	12 df       	rcall	.-476    	; 0x5bc0 <BCDtoBIN>
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	f8 01       	movw	r30, r16
    5da0:	95 83       	std	Z+5, r25	; 0x05
    5da2:	84 83       	std	Z+4, r24	; 0x04
    5da4:	8f 81       	ldd	r24, Y+7	; 0x07
    5da6:	87 70       	andi	r24, 0x07	; 7
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	01 97       	sbiw	r24, 0x01	; 1
    5dac:	95 87       	std	Z+13, r25	; 0x0d
    5dae:	84 87       	std	Z+12, r24	; 0x0c
    5db0:	88 85       	ldd	r24, Y+8	; 0x08
    5db2:	8f 73       	andi	r24, 0x3F	; 63
    5db4:	05 df       	rcall	.-502    	; 0x5bc0 <BCDtoBIN>
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	f8 01       	movw	r30, r16
    5dba:	97 83       	std	Z+7, r25	; 0x07
    5dbc:	86 83       	std	Z+6, r24	; 0x06
    5dbe:	89 85       	ldd	r24, Y+9	; 0x09
    5dc0:	8f 71       	andi	r24, 0x1F	; 31
    5dc2:	fe de       	rcall	.-516    	; 0x5bc0 <BCDtoBIN>
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	01 97       	sbiw	r24, 0x01	; 1
    5dc8:	f8 01       	movw	r30, r16
    5dca:	91 87       	std	Z+9, r25	; 0x09
    5dcc:	80 87       	std	Z+8, r24	; 0x08
    5dce:	8a 85       	ldd	r24, Y+10	; 0x0a
    5dd0:	f7 de       	rcall	.-530    	; 0x5bc0 <BCDtoBIN>
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	8c 59       	subi	r24, 0x9C	; 156
    5dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd8:	f8 01       	movw	r30, r16
    5dda:	93 87       	std	Z+11, r25	; 0x0b
    5ddc:	82 87       	std	Z+10, r24	; 0x0a
    5dde:	81 e0       	ldi	r24, 0x01	; 1
    5de0:	2b 96       	adiw	r28, 0x0b	; 11
    5de2:	e4 e0       	ldi	r30, 0x04	; 4
    5de4:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00005de8 <rtc_run>:
    5de8:	a4 e0       	ldi	r26, 0x04	; 4
    5dea:	b0 e0       	ldi	r27, 0x00	; 0
    5dec:	ea ef       	ldi	r30, 0xFA	; 250
    5dee:	fe e2       	ldi	r31, 0x2E	; 46
    5df0:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    5df4:	8c 01       	movw	r16, r24
    5df6:	21 e0       	ldi	r18, 0x01	; 1
    5df8:	ae 01       	movw	r20, r28
    5dfa:	4c 5f       	subi	r20, 0xFC	; 252
    5dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    5dfe:	60 e0       	ldi	r22, 0x00	; 0
    5e00:	88 e6       	ldi	r24, 0x68	; 104
    5e02:	22 df       	rcall	.-444    	; 0x5c48 <i2c_rtc_read>
    5e04:	81 11       	cpse	r24, r1
    5e06:	03 c0       	rjmp	.+6      	; 0x5e0e <rtc_run+0x26>
    5e08:	84 e7       	ldi	r24, 0x74	; 116
    5e0a:	94 e0       	ldi	r25, 0x04	; 4
    5e0c:	24 c0       	rjmp	.+72     	; 0x5e56 <rtc_run+0x6e>
    5e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    5e10:	0f 3f       	cpi	r16, 0xFF	; 255
    5e12:	ff ef       	ldi	r31, 0xFF	; 255
    5e14:	1f 07       	cpc	r17, r31
    5e16:	59 f4       	brne	.+22     	; 0x5e2e <rtc_run+0x46>
    5e18:	08 2e       	mov	r0, r24
    5e1a:	00 0c       	add	r0, r0
    5e1c:	99 0b       	sbc	r25, r25
    5e1e:	80 95       	com	r24
    5e20:	90 95       	com	r25
    5e22:	89 2f       	mov	r24, r25
    5e24:	88 1f       	adc	r24, r24
    5e26:	88 27       	eor	r24, r24
    5e28:	88 1f       	adc	r24, r24
    5e2a:	90 e0       	ldi	r25, 0x00	; 0
    5e2c:	20 c0       	rjmp	.+64     	; 0x5e6e <rtc_run+0x86>
    5e2e:	8f 77       	andi	r24, 0x7F	; 127
    5e30:	01 15       	cp	r16, r1
    5e32:	11 05       	cpc	r17, r1
    5e34:	11 f4       	brne	.+4      	; 0x5e3a <rtc_run+0x52>
    5e36:	90 e8       	ldi	r25, 0x80	; 128
    5e38:	01 c0       	rjmp	.+2      	; 0x5e3c <rtc_run+0x54>
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	89 2b       	or	r24, r25
    5e3e:	8c 83       	std	Y+4, r24	; 0x04
    5e40:	21 e0       	ldi	r18, 0x01	; 1
    5e42:	ae 01       	movw	r20, r28
    5e44:	4c 5f       	subi	r20, 0xFC	; 252
    5e46:	5f 4f       	sbci	r21, 0xFF	; 255
    5e48:	60 e0       	ldi	r22, 0x00	; 0
    5e4a:	88 e6       	ldi	r24, 0x68	; 104
    5e4c:	c2 de       	rcall	.-636    	; 0x5bd2 <i2c_rtc_write>
    5e4e:	81 11       	cpse	r24, r1
    5e50:	0d c0       	rjmp	.+26     	; 0x5e6c <rtc_run+0x84>
    5e52:	8f e5       	ldi	r24, 0x5F	; 95
    5e54:	94 e0       	ldi	r25, 0x04	; 4
    5e56:	a0 e0       	ldi	r26, 0x00	; 0
    5e58:	ed b7       	in	r30, 0x3d	; 61
    5e5a:	fe b7       	in	r31, 0x3e	; 62
    5e5c:	81 83       	std	Z+1, r24	; 0x01
    5e5e:	92 83       	std	Z+2, r25	; 0x02
    5e60:	a3 83       	std	Z+3, r26	; 0x03
    5e62:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5e66:	8f ef       	ldi	r24, 0xFF	; 255
    5e68:	9f ef       	ldi	r25, 0xFF	; 255
    5e6a:	01 c0       	rjmp	.+2      	; 0x5e6e <rtc_run+0x86>
    5e6c:	c8 01       	movw	r24, r16
    5e6e:	24 96       	adiw	r28, 0x04	; 4
    5e70:	e4 e0       	ldi	r30, 0x04	; 4
    5e72:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00005e76 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5e76:	a7 e0       	ldi	r26, 0x07	; 7
    5e78:	b0 e0       	ldi	r27, 0x00	; 0
    5e7a:	e1 e4       	ldi	r30, 0x41	; 65
    5e7c:	ff e2       	ldi	r31, 0x2F	; 47
    5e7e:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    5e82:	8c 01       	movw	r16, r24
    5e84:	4c 83       	std	Y+4, r20	; 0x04
    5e86:	5d 83       	std	Y+5, r21	; 0x05
    5e88:	6e 83       	std	Y+6, r22	; 0x06
    5e8a:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5e8c:	0e df       	rcall	.-484    	; 0x5caa <i2c_rtc_init>

    if(!force)
    5e8e:	01 15       	cp	r16, r1
    5e90:	11 05       	cpc	r17, r1
    5e92:	39 f4       	brne	.+14     	; 0x5ea2 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5e94:	8f ef       	ldi	r24, 0xFF	; 255
    5e96:	9f ef       	ldi	r25, 0xFF	; 255
    5e98:	a7 df       	rcall	.-178    	; 0x5de8 <rtc_run>
        if(state < 0)
    5e9a:	87 fd       	sbrc	r24, 7
    5e9c:	16 c0       	rjmp	.+44     	; 0x5eca <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5e9e:	81 11       	cpse	r24, r1
    5ea0:	22 c0       	rjmp	.+68     	; 0x5ee6 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5ea2:	80 e0       	ldi	r24, 0x00	; 0
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	a0 df       	rcall	.-192    	; 0x5de8 <rtc_run>
    5ea8:	97 fd       	sbrc	r25, 7
    5eaa:	0f c0       	rjmp	.+30     	; 0x5eca <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5eac:	ce 01       	movw	r24, r28
    5eae:	04 96       	adiw	r24, 0x04	; 4
    5eb0:	a3 d6       	rcall	.+3398   	; 0x6bf8 <gmtime>
    5eb2:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5eb4:	81 f4       	brne	.+32     	; 0x5ed6 <rtc_init+0x60>
    5eb6:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5eb8:	94 e0       	ldi	r25, 0x04	; 4
    5eba:	a0 e0       	ldi	r26, 0x00	; 0
    5ebc:	ed b7       	in	r30, 0x3d	; 61
    5ebe:	fe b7       	in	r31, 0x3e	; 62
    5ec0:	81 83       	std	Z+1, r24	; 0x01
    5ec2:	92 83       	std	Z+2, r25	; 0x02
    5ec4:	a3 83       	std	Z+3, r26	; 0x03
    5ec6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    5eca:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <rtc_ok+0x1>
            rtc_ok = 0;
    5ece:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <rtc_ok>
            return 0;
    5ed2:	80 e0       	ldi	r24, 0x00	; 0
    5ed4:	0e c0       	rjmp	.+28     	; 0x5ef2 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5ed6:	ef de       	rcall	.-546    	; 0x5cb6 <rtc_write>
    5ed8:	88 23       	and	r24, r24
    5eda:	69 f3       	breq	.-38     	; 0x5eb6 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5edc:	81 e0       	ldi	r24, 0x01	; 1
    5ede:	90 e0       	ldi	r25, 0x00	; 0
    5ee0:	83 df       	rcall	.-250    	; 0x5de8 <rtc_run>
    5ee2:	97 fd       	sbrc	r25, 7
    5ee4:	f2 cf       	rjmp	.-28     	; 0x5eca <rtc_init+0x54>
    5ee6:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5ee8:	90 e0       	ldi	r25, 0x00	; 0
    5eea:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <rtc_ok+0x1>
    5eee:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <rtc_ok>
    5ef2:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5ef4:	e4 e0       	ldi	r30, 0x04	; 4
    5ef6:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00005efa <islower>:
    5efa:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5efc:	21 56       	subi	r18, 0x61	; 97
    5efe:	31 09       	sbc	r19, r1
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	2a 31       	cpi	r18, 0x1A	; 26
    5f06:	31 05       	cpc	r19, r1
    5f08:	10 f0       	brcs	.+4      	; 0x5f0e <islower+0x14>
    5f0a:	80 e0       	ldi	r24, 0x00	; 0
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	08 95       	ret

00005f10 <toupper>:
    5f10:	cf 93       	push	r28
    5f12:	df 93       	push	r29
    5f14:	ec 01       	movw	r28, r24
    5f16:	f1 df       	rcall	.-30     	; 0x5efa <islower>
    5f18:	89 2b       	or	r24, r25
    5f1a:	19 f0       	breq	.+6      	; 0x5f22 <toupper+0x12>
    5f1c:	ce 01       	movw	r24, r28
    5f1e:	80 97       	sbiw	r24, 0x20	; 32
    5f20:	01 c0       	rjmp	.+2      	; 0x5f24 <toupper+0x14>
    5f22:	ce 01       	movw	r24, r28
    5f24:	df 91       	pop	r29
    5f26:	cf 91       	pop	r28
    5f28:	08 95       	ret

00005f2a <strcpy>:
    5f2a:	fc 01       	movw	r30, r24
    5f2c:	db 01       	movw	r26, r22
    5f2e:	2d 91       	ld	r18, X+
    5f30:	bd 01       	movw	r22, r26
    5f32:	01 96       	adiw	r24, 0x01	; 1
    5f34:	22 23       	and	r18, r18
    5f36:	11 f0       	breq	.+4      	; 0x5f3c <strcpy+0x12>
    5f38:	20 83       	st	Z, r18
    5f3a:	f7 cf       	rjmp	.-18     	; 0x5f2a <strcpy>
    5f3c:	10 82       	st	Z, r1
    5f3e:	08 95       	ret

00005f40 <strncpy>:
    5f40:	db 01       	movw	r26, r22
    5f42:	fc 01       	movw	r30, r24
    5f44:	2d 91       	ld	r18, X+
    5f46:	21 11       	cpse	r18, r1
    5f48:	03 c0       	rjmp	.+6      	; 0x5f50 <strncpy+0x10>
    5f4a:	4e 0f       	add	r20, r30
    5f4c:	5f 1f       	adc	r21, r31
    5f4e:	08 c0       	rjmp	.+16     	; 0x5f60 <strncpy+0x20>
    5f50:	41 15       	cp	r20, r1
    5f52:	51 05       	cpc	r21, r1
    5f54:	21 f0       	breq	.+8      	; 0x5f5e <strncpy+0x1e>
    5f56:	21 93       	st	Z+, r18
    5f58:	41 50       	subi	r20, 0x01	; 1
    5f5a:	51 09       	sbc	r21, r1
    5f5c:	f3 cf       	rjmp	.-26     	; 0x5f44 <strncpy+0x4>
    5f5e:	08 95       	ret
    5f60:	4e 17       	cp	r20, r30
    5f62:	5f 07       	cpc	r21, r31
    5f64:	11 f0       	breq	.+4      	; 0x5f6a <strncpy+0x2a>
    5f66:	11 92       	st	Z+, r1
    5f68:	fb cf       	rjmp	.-10     	; 0x5f60 <strncpy+0x20>
    5f6a:	08 95       	ret

00005f6c <strcat>:
    5f6c:	cf 93       	push	r28
    5f6e:	df 93       	push	r29
    5f70:	d8 2f       	mov	r29, r24
    5f72:	c9 2f       	mov	r28, r25
    5f74:	28 2f       	mov	r18, r24
    5f76:	39 2f       	mov	r19, r25
    5f78:	c9 01       	movw	r24, r18
    5f7a:	2f 5f       	subi	r18, 0xFF	; 255
    5f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f7e:	fc 01       	movw	r30, r24
    5f80:	40 81       	ld	r20, Z
    5f82:	41 11       	cpse	r20, r1
    5f84:	f9 cf       	rjmp	.-14     	; 0x5f78 <strcat+0xc>
    5f86:	d1 df       	rcall	.-94     	; 0x5f2a <strcpy>
    5f88:	8d 2f       	mov	r24, r29
    5f8a:	9c 2f       	mov	r25, r28
    5f8c:	df 91       	pop	r29
    5f8e:	cf 91       	pop	r28
    5f90:	08 95       	ret

00005f92 <reverse>:
    5f92:	fc 01       	movw	r30, r24
    5f94:	01 90       	ld	r0, Z+
    5f96:	00 20       	and	r0, r0
    5f98:	e9 f7       	brne	.-6      	; 0x5f94 <reverse+0x2>
    5f9a:	31 97       	sbiw	r30, 0x01	; 1
    5f9c:	e8 1b       	sub	r30, r24
    5f9e:	f9 0b       	sbc	r31, r25
    5fa0:	af 01       	movw	r20, r30
    5fa2:	55 95       	asr	r21
    5fa4:	47 95       	ror	r20
    5fa6:	e8 0f       	add	r30, r24
    5fa8:	f9 1f       	adc	r31, r25
    5faa:	dc 01       	movw	r26, r24
    5fac:	9d 01       	movw	r18, r26
    5fae:	28 1b       	sub	r18, r24
    5fb0:	39 0b       	sbc	r19, r25
    5fb2:	24 17       	cp	r18, r20
    5fb4:	35 07       	cpc	r19, r21
    5fb6:	2c f4       	brge	.+10     	; 0x5fc2 <reverse+0x30>
    5fb8:	22 91       	ld	r18, -Z
    5fba:	3c 91       	ld	r19, X
    5fbc:	30 83       	st	Z, r19
    5fbe:	2d 93       	st	X+, r18
    5fc0:	f5 cf       	rjmp	.-22     	; 0x5fac <reverse+0x1a>
    5fc2:	08 95       	ret

00005fc4 <strupper>:
    5fc4:	cf 93       	push	r28
    5fc6:	df 93       	push	r29
    5fc8:	ec 01       	movw	r28, r24
    5fca:	88 81       	ld	r24, Y
    5fcc:	88 23       	and	r24, r24
    5fce:	21 f0       	breq	.+8      	; 0x5fd8 <strupper+0x14>
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	9e df       	rcall	.-196    	; 0x5f10 <toupper>
    5fd4:	89 93       	st	Y+, r24
    5fd6:	f9 cf       	rjmp	.-14     	; 0x5fca <strupper+0x6>
    5fd8:	df 91       	pop	r29
    5fda:	cf 91       	pop	r28
    5fdc:	08 95       	ret

00005fde <strcmp>:
    5fde:	dc 01       	movw	r26, r24
    5fe0:	fb 01       	movw	r30, r22
    5fe2:	2d 91       	ld	r18, X+
    5fe4:	41 91       	ld	r20, Z+
    5fe6:	50 e0       	ldi	r21, 0x00	; 0
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	c9 01       	movw	r24, r18
    5fec:	84 1b       	sub	r24, r20
    5fee:	95 0b       	sbc	r25, r21
    5ff0:	11 f4       	brne	.+4      	; 0x5ff6 <strcmp+0x18>
    5ff2:	45 2b       	or	r20, r21
    5ff4:	b1 f7       	brne	.-20     	; 0x5fe2 <strcmp+0x4>
    5ff6:	08 95       	ret

00005ff8 <strcasecmp>:
    5ff8:	ef 92       	push	r14
    5ffa:	ff 92       	push	r15
    5ffc:	0f 93       	push	r16
    5ffe:	1f 93       	push	r17
    6000:	cf 93       	push	r28
    6002:	df 93       	push	r29
    6004:	7c 01       	movw	r14, r24
    6006:	8b 01       	movw	r16, r22
    6008:	f7 01       	movw	r30, r14
    600a:	81 91       	ld	r24, Z+
    600c:	7f 01       	movw	r14, r30
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	7f df       	rcall	.-258    	; 0x5f10 <toupper>
    6012:	ec 01       	movw	r28, r24
    6014:	f8 01       	movw	r30, r16
    6016:	81 91       	ld	r24, Z+
    6018:	8f 01       	movw	r16, r30
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	79 df       	rcall	.-270    	; 0x5f10 <toupper>
    601e:	9c 01       	movw	r18, r24
    6020:	ce 01       	movw	r24, r28
    6022:	82 1b       	sub	r24, r18
    6024:	93 0b       	sbc	r25, r19
    6026:	11 f4       	brne	.+4      	; 0x602c <strcasecmp+0x34>
    6028:	23 2b       	or	r18, r19
    602a:	71 f7       	brne	.-36     	; 0x6008 <strcasecmp+0x10>
    602c:	cd b7       	in	r28, 0x3d	; 61
    602e:	de b7       	in	r29, 0x3e	; 62
    6030:	e6 e0       	ldi	r30, 0x06	; 6
    6032:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00006036 <strncasecmp>:
    6036:	a0 e0       	ldi	r26, 0x00	; 0
    6038:	b0 e0       	ldi	r27, 0x00	; 0
    603a:	e1 e2       	ldi	r30, 0x21	; 33
    603c:	f0 e3       	ldi	r31, 0x30	; 48
    603e:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    6042:	8c 01       	movw	r16, r24
    6044:	7b 01       	movw	r14, r22
    6046:	6c 01       	movw	r12, r24
    6048:	c4 0e       	add	r12, r20
    604a:	d5 1e       	adc	r13, r21
    604c:	0c 15       	cp	r16, r12
    604e:	1d 05       	cpc	r17, r13
    6050:	99 f0       	breq	.+38     	; 0x6078 <strncasecmp+0x42>
    6052:	f8 01       	movw	r30, r16
    6054:	81 91       	ld	r24, Z+
    6056:	8f 01       	movw	r16, r30
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	5a df       	rcall	.-332    	; 0x5f10 <toupper>
    605c:	ec 01       	movw	r28, r24
    605e:	f7 01       	movw	r30, r14
    6060:	81 91       	ld	r24, Z+
    6062:	7f 01       	movw	r14, r30
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	54 df       	rcall	.-344    	; 0x5f10 <toupper>
    6068:	9c 01       	movw	r18, r24
    606a:	ce 01       	movw	r24, r28
    606c:	82 1b       	sub	r24, r18
    606e:	93 0b       	sbc	r25, r19
    6070:	29 f4       	brne	.+10     	; 0x607c <strncasecmp+0x46>
    6072:	23 2b       	or	r18, r19
    6074:	59 f7       	brne	.-42     	; 0x604c <strncasecmp+0x16>
    6076:	02 c0       	rjmp	.+4      	; 0x607c <strncasecmp+0x46>
    6078:	80 e0       	ldi	r24, 0x00	; 0
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	cd b7       	in	r28, 0x3d	; 61
    607e:	de b7       	in	r29, 0x3e	; 62
    6080:	e8 e0       	ldi	r30, 0x08	; 8
    6082:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

00006086 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6086:	0f 93       	push	r16
    6088:	1f 93       	push	r17
    608a:	cf 93       	push	r28
    608c:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    608e:	00 97       	sbiw	r24, 0x00	; 0
    6090:	99 f0       	breq	.+38     	; 0x60b8 <stralloc+0x32>
    6092:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6094:	fc 01       	movw	r30, r24
    6096:	01 90       	ld	r0, Z+
    6098:	00 20       	and	r0, r0
    609a:	e9 f7       	brne	.-6      	; 0x6096 <stralloc+0x10>
    609c:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    609e:	61 e0       	ldi	r22, 0x01	; 1
    60a0:	70 e0       	ldi	r23, 0x00	; 0
    60a2:	8c 1b       	sub	r24, r28
    60a4:	9d 0b       	sbc	r25, r29
    60a6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
    60aa:	8c 01       	movw	r16, r24
    if(!ptr)
    60ac:	00 97       	sbiw	r24, 0x00	; 0
    60ae:	21 f0       	breq	.+8      	; 0x60b8 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    60b0:	be 01       	movw	r22, r28
    60b2:	3b df       	rcall	.-394    	; 0x5f2a <strcpy>
    return(ptr);
    60b4:	c8 01       	movw	r24, r16
    60b6:	02 c0       	rjmp	.+4      	; 0x60bc <stralloc+0x36>
    60b8:	80 e0       	ldi	r24, 0x00	; 0
    60ba:	90 e0       	ldi	r25, 0x00	; 0
}
    60bc:	df 91       	pop	r29
    60be:	cf 91       	pop	r28
    60c0:	1f 91       	pop	r17
    60c2:	0f 91       	pop	r16
    60c4:	08 95       	ret

000060c6 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    60c6:	00 d0       	rcall	.+0      	; 0x60c8 <sep+0x2>
    60c8:	1f 92       	push	r1
    60ca:	8e e1       	ldi	r24, 0x1E	; 30
    60cc:	95 e0       	ldi	r25, 0x05	; 5
    60ce:	a0 e0       	ldi	r26, 0x00	; 0
    60d0:	ed b7       	in	r30, 0x3d	; 61
    60d2:	fe b7       	in	r31, 0x3e	; 62
    60d4:	81 83       	std	Z+1, r24	; 0x01
    60d6:	92 83       	std	Z+2, r25	; 0x02
    60d8:	a3 83       	std	Z+3, r26	; 0x03
    60da:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    60de:	0f 90       	pop	r0
    60e0:	0f 90       	pop	r0
    60e2:	0f 90       	pop	r0
    60e4:	08 95       	ret

000060e6 <trim_tail>:
    60e6:	00 97       	sbiw	r24, 0x00	; 0
    60e8:	69 f0       	breq	.+26     	; 0x6104 <trim_tail+0x1e>
    60ea:	fc 01       	movw	r30, r24
    60ec:	01 90       	ld	r0, Z+
    60ee:	00 20       	and	r0, r0
    60f0:	e9 f7       	brne	.-6      	; 0x60ec <trim_tail+0x6>
    60f2:	31 97       	sbiw	r30, 0x01	; 1
    60f4:	e8 17       	cp	r30, r24
    60f6:	f9 07       	cpc	r31, r25
    60f8:	29 f0       	breq	.+10     	; 0x6104 <trim_tail+0x1e>
    60fa:	22 91       	ld	r18, -Z
    60fc:	21 32       	cpi	r18, 0x21	; 33
    60fe:	10 f4       	brcc	.+4      	; 0x6104 <trim_tail+0x1e>
    6100:	10 82       	st	Z, r1
    6102:	f8 cf       	rjmp	.-16     	; 0x60f4 <trim_tail+0xe>
    6104:	08 95       	ret

00006106 <skipspaces>:
    6106:	00 97       	sbiw	r24, 0x00	; 0
    6108:	39 f0       	breq	.+14     	; 0x6118 <skipspaces+0x12>
    610a:	fc 01       	movw	r30, r24
    610c:	cf 01       	movw	r24, r30
    610e:	21 91       	ld	r18, Z+
    6110:	20 32       	cpi	r18, 0x20	; 32
    6112:	e1 f3       	breq	.-8      	; 0x610c <skipspaces+0x6>
    6114:	29 30       	cpi	r18, 0x09	; 9
    6116:	d1 f3       	breq	.-12     	; 0x610c <skipspaces+0x6>
    6118:	08 95       	ret

0000611a <MATCH>:
    611a:	cf 93       	push	r28
    611c:	df 93       	push	r29
    611e:	fb 01       	movw	r30, r22
    6120:	01 90       	ld	r0, Z+
    6122:	00 20       	and	r0, r0
    6124:	e9 f7       	brne	.-6      	; 0x6120 <MATCH+0x6>
    6126:	31 97       	sbiw	r30, 0x01	; 1
    6128:	ef 01       	movw	r28, r30
    612a:	c6 1b       	sub	r28, r22
    612c:	d7 0b       	sbc	r29, r23
    612e:	57 df       	rcall	.-338    	; 0x5fde <strcmp>
    6130:	89 2b       	or	r24, r25
    6132:	11 f4       	brne	.+4      	; 0x6138 <MATCH+0x1e>
    6134:	ce 01       	movw	r24, r28
    6136:	02 c0       	rjmp	.+4      	; 0x613c <MATCH+0x22>
    6138:	80 e0       	ldi	r24, 0x00	; 0
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	df 91       	pop	r29
    613e:	cf 91       	pop	r28
    6140:	08 95       	ret

00006142 <MATCHI>:
    6142:	cf 93       	push	r28
    6144:	df 93       	push	r29
    6146:	fb 01       	movw	r30, r22
    6148:	01 90       	ld	r0, Z+
    614a:	00 20       	and	r0, r0
    614c:	e9 f7       	brne	.-6      	; 0x6148 <MATCHI+0x6>
    614e:	31 97       	sbiw	r30, 0x01	; 1
    6150:	ef 01       	movw	r28, r30
    6152:	c6 1b       	sub	r28, r22
    6154:	d7 0b       	sbc	r29, r23
    6156:	50 df       	rcall	.-352    	; 0x5ff8 <strcasecmp>
    6158:	89 2b       	or	r24, r25
    615a:	11 f4       	brne	.+4      	; 0x6160 <MATCHI+0x1e>
    615c:	ce 01       	movw	r24, r28
    615e:	02 c0       	rjmp	.+4      	; 0x6164 <MATCHI+0x22>
    6160:	80 e0       	ldi	r24, 0x00	; 0
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	df 91       	pop	r29
    6166:	cf 91       	pop	r28
    6168:	08 95       	ret

0000616a <MATCHARGS>:
    616a:	a9 e0       	ldi	r26, 0x09	; 9
    616c:	b0 e0       	ldi	r27, 0x00	; 0
    616e:	eb eb       	ldi	r30, 0xBB	; 187
    6170:	f0 e3       	ldi	r31, 0x30	; 48
    6172:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
    6176:	eb 01       	movw	r28, r22
    6178:	8a 01       	movw	r16, r20
    617a:	79 01       	movw	r14, r18
    617c:	e2 df       	rcall	.-60     	; 0x6142 <MATCHI>
    617e:	00 97       	sbiw	r24, 0x00	; 0
    6180:	c1 f0       	breq	.+48     	; 0x61b2 <MATCHARGS+0x48>
    6182:	e0 16       	cp	r14, r16
    6184:	f1 06       	cpc	r15, r17
    6186:	9c f4       	brge	.+38     	; 0x61ae <MATCHARGS+0x44>
    6188:	ed b7       	in	r30, 0x3d	; 61
    618a:	fe b7       	in	r31, 0x3e	; 62
    618c:	f1 86       	std	Z+9, r15	; 0x09
    618e:	e0 86       	std	Z+8, r14	; 0x08
    6190:	17 83       	std	Z+7, r17	; 0x07
    6192:	06 83       	std	Z+6, r16	; 0x06
    6194:	d5 83       	std	Z+5, r29	; 0x05
    6196:	c4 83       	std	Z+4, r28	; 0x04
    6198:	88 ef       	ldi	r24, 0xF8	; 248
    619a:	94 e0       	ldi	r25, 0x04	; 4
    619c:	a0 e0       	ldi	r26, 0x00	; 0
    619e:	81 83       	std	Z+1, r24	; 0x01
    61a0:	92 83       	std	Z+2, r25	; 0x02
    61a2:	a3 83       	std	Z+3, r26	; 0x03
    61a4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	02 c0       	rjmp	.+4      	; 0x61b2 <MATCHARGS+0x48>
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	cd b7       	in	r28, 0x3d	; 61
    61b4:	de b7       	in	r29, 0x3e	; 62
    61b6:	29 96       	adiw	r28, 0x09	; 9
    61b8:	e6 e0       	ldi	r30, 0x06	; 6
    61ba:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

000061be <MATCHI_LEN>:
    61be:	cf 93       	push	r28
    61c0:	df 93       	push	r29
    61c2:	00 97       	sbiw	r24, 0x00	; 0
    61c4:	89 f0       	breq	.+34     	; 0x61e8 <MATCHI_LEN+0x2a>
    61c6:	61 15       	cp	r22, r1
    61c8:	71 05       	cpc	r23, r1
    61ca:	71 f0       	breq	.+28     	; 0x61e8 <MATCHI_LEN+0x2a>
    61cc:	eb 01       	movw	r28, r22
    61ce:	09 90       	ld	r0, Y+
    61d0:	00 20       	and	r0, r0
    61d2:	e9 f7       	brne	.-6      	; 0x61ce <MATCHI_LEN+0x10>
    61d4:	21 97       	sbiw	r28, 0x01	; 1
    61d6:	c6 1b       	sub	r28, r22
    61d8:	d7 0b       	sbc	r29, r23
    61da:	31 f0       	breq	.+12     	; 0x61e8 <MATCHI_LEN+0x2a>
    61dc:	ae 01       	movw	r20, r28
    61de:	2b df       	rcall	.-426    	; 0x6036 <strncasecmp>
    61e0:	89 2b       	or	r24, r25
    61e2:	11 f4       	brne	.+4      	; 0x61e8 <MATCHI_LEN+0x2a>
    61e4:	ce 01       	movw	r24, r28
    61e6:	02 c0       	rjmp	.+4      	; 0x61ec <MATCHI_LEN+0x2e>
    61e8:	80 e0       	ldi	r24, 0x00	; 0
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	df 91       	pop	r29
    61ee:	cf 91       	pop	r28
    61f0:	08 95       	ret

000061f2 <split_args>:
    61f2:	a0 e0       	ldi	r26, 0x00	; 0
    61f4:	b0 e0       	ldi	r27, 0x00	; 0
    61f6:	ef ef       	ldi	r30, 0xFF	; 255
    61f8:	f0 e3       	ldi	r31, 0x30	; 48
    61fa:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    61fe:	dc 01       	movw	r26, r24
    6200:	6a 01       	movw	r12, r20
    6202:	8b 01       	movw	r16, r22
    6204:	fb 01       	movw	r30, r22
    6206:	80 e0       	ldi	r24, 0x00	; 0
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	8c 15       	cp	r24, r12
    620c:	9d 05       	cpc	r25, r13
    620e:	24 f4       	brge	.+8      	; 0x6218 <split_args+0x26>
    6210:	11 92       	st	Z+, r1
    6212:	11 92       	st	Z+, r1
    6214:	01 96       	adiw	r24, 0x01	; 1
    6216:	f9 cf       	rjmp	.-14     	; 0x620a <split_args+0x18>
    6218:	c1 14       	cp	r12, r1
    621a:	d1 04       	cpc	r13, r1
    621c:	d9 f1       	breq	.+118    	; 0x6294 <split_args+0xa2>
    621e:	10 97       	sbiw	r26, 0x00	; 0
    6220:	c9 f1       	breq	.+114    	; 0x6294 <split_args+0xa2>
    6222:	ee 24       	eor	r14, r14
    6224:	e3 94       	inc	r14
    6226:	f1 2c       	mov	r15, r1
    6228:	c0 e0       	ldi	r28, 0x00	; 0
    622a:	d0 e0       	ldi	r29, 0x00	; 0
    622c:	8c 91       	ld	r24, X
    622e:	88 23       	and	r24, r24
    6230:	b1 f1       	breq	.+108    	; 0x629e <split_args+0xac>
    6232:	cc 15       	cp	r28, r12
    6234:	dd 05       	cpc	r29, r13
    6236:	9c f5       	brge	.+102    	; 0x629e <split_args+0xac>
    6238:	cd 01       	movw	r24, r26
    623a:	65 df       	rcall	.-310    	; 0x6106 <skipspaces>
    623c:	dc 01       	movw	r26, r24
    623e:	2c 91       	ld	r18, X
    6240:	22 23       	and	r18, r18
    6242:	69 f1       	breq	.+90     	; 0x629e <split_args+0xac>
    6244:	22 32       	cpi	r18, 0x22	; 34
    6246:	79 f4       	brne	.+30     	; 0x6266 <split_args+0x74>
    6248:	fc 01       	movw	r30, r24
    624a:	31 96       	adiw	r30, 0x01	; 1
    624c:	d8 01       	movw	r26, r16
    624e:	ed 93       	st	X+, r30
    6250:	fc 93       	st	X, r31
    6252:	df 01       	movw	r26, r30
    6254:	80 81       	ld	r24, Z
    6256:	31 96       	adiw	r30, 0x01	; 1
    6258:	88 23       	and	r24, r24
    625a:	a9 f0       	breq	.+42     	; 0x6286 <split_args+0x94>
    625c:	82 32       	cpi	r24, 0x22	; 34
    625e:	c9 f7       	brne	.-14     	; 0x6252 <split_args+0x60>
    6260:	1c 92       	st	X, r1
    6262:	df 01       	movw	r26, r30
    6264:	10 c0       	rjmp	.+32     	; 0x6286 <split_args+0x94>
    6266:	f8 01       	movw	r30, r16
    6268:	91 83       	std	Z+1, r25	; 0x01
    626a:	80 83       	st	Z, r24
    626c:	fc 01       	movw	r30, r24
    626e:	2e 2f       	mov	r18, r30
    6270:	9f 2f       	mov	r25, r31
    6272:	81 91       	ld	r24, Z+
    6274:	3f ed       	ldi	r19, 0xDF	; 223
    6276:	38 0f       	add	r19, r24
    6278:	3e 35       	cpi	r19, 0x5E	; 94
    627a:	c8 f3       	brcs	.-14     	; 0x626e <split_args+0x7c>
    627c:	88 23       	and	r24, r24
    627e:	69 f0       	breq	.+26     	; 0x629a <split_args+0xa8>
    6280:	a2 2f       	mov	r26, r18
    6282:	b9 2f       	mov	r27, r25
    6284:	1d 92       	st	X+, r1
    6286:	21 96       	adiw	r28, 0x01	; 1
    6288:	ff ef       	ldi	r31, 0xFF	; 255
    628a:	ef 1a       	sub	r14, r31
    628c:	ff 0a       	sbc	r15, r31
    628e:	0e 5f       	subi	r16, 0xFE	; 254
    6290:	1f 4f       	sbci	r17, 0xFF	; 255
    6292:	cc cf       	rjmp	.-104    	; 0x622c <split_args+0x3a>
    6294:	80 e0       	ldi	r24, 0x00	; 0
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	03 c0       	rjmp	.+6      	; 0x62a0 <split_args+0xae>
    629a:	c7 01       	movw	r24, r14
    629c:	01 c0       	rjmp	.+2      	; 0x62a0 <split_args+0xae>
    629e:	ce 01       	movw	r24, r28
    62a0:	cd b7       	in	r28, 0x3d	; 61
    62a2:	de b7       	in	r29, 0x3e	; 62
    62a4:	e8 e0       	ldi	r30, 0x08	; 8
    62a6:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

000062aa <get_token>:
    62aa:	ef 92       	push	r14
    62ac:	ff 92       	push	r15
    62ae:	0f 93       	push	r16
    62b0:	1f 93       	push	r17
    62b2:	cf 93       	push	r28
    62b4:	df 93       	push	r29
    62b6:	eb 01       	movw	r28, r22
    62b8:	8a 01       	movw	r16, r20
    62ba:	18 82       	st	Y, r1
    62bc:	00 97       	sbiw	r24, 0x00	; 0
    62be:	89 f1       	breq	.+98     	; 0x6322 <get_token+0x78>
    62c0:	fc 01       	movw	r30, r24
    62c2:	20 81       	ld	r18, Z
    62c4:	22 23       	and	r18, r18
    62c6:	79 f1       	breq	.+94     	; 0x6326 <get_token+0x7c>
    62c8:	1e df       	rcall	.-452    	; 0x6106 <skipspaces>
    62ca:	7c 01       	movw	r14, r24
    62cc:	0c df       	rcall	.-488    	; 0x60e6 <trim_tail>
    62ce:	f7 01       	movw	r30, r14
    62d0:	cf 01       	movw	r24, r30
    62d2:	21 91       	ld	r18, Z+
    62d4:	21 32       	cpi	r18, 0x21	; 33
    62d6:	e0 f0       	brcs	.+56     	; 0x6310 <get_token+0x66>
    62d8:	10 16       	cp	r1, r16
    62da:	11 06       	cpc	r1, r17
    62dc:	cc f4       	brge	.+50     	; 0x6310 <get_token+0x66>
    62de:	22 32       	cpi	r18, 0x22	; 34
    62e0:	79 f4       	brne	.+30     	; 0x6300 <get_token+0x56>
    62e2:	fc 01       	movw	r30, r24
    62e4:	31 96       	adiw	r30, 0x01	; 1
    62e6:	0c 0f       	add	r16, r28
    62e8:	1d 1f       	adc	r17, r29
    62ea:	cf 01       	movw	r24, r30
    62ec:	21 91       	ld	r18, Z+
    62ee:	22 23       	and	r18, r18
    62f0:	79 f0       	breq	.+30     	; 0x6310 <get_token+0x66>
    62f2:	22 32       	cpi	r18, 0x22	; 34
    62f4:	59 f0       	breq	.+22     	; 0x630c <get_token+0x62>
    62f6:	c0 17       	cp	r28, r16
    62f8:	d1 07       	cpc	r29, r17
    62fa:	51 f0       	breq	.+20     	; 0x6310 <get_token+0x66>
    62fc:	29 93       	st	Y+, r18
    62fe:	f5 cf       	rjmp	.-22     	; 0x62ea <get_token+0x40>
    6300:	2c 32       	cpi	r18, 0x2C	; 44
    6302:	31 f0       	breq	.+12     	; 0x6310 <get_token+0x66>
    6304:	29 93       	st	Y+, r18
    6306:	01 50       	subi	r16, 0x01	; 1
    6308:	11 09       	sbc	r17, r1
    630a:	e2 cf       	rjmp	.-60     	; 0x62d0 <get_token+0x26>
    630c:	cf 01       	movw	r24, r30
    630e:	18 82       	st	Y, r1
    6310:	fa de       	rcall	.-524    	; 0x6106 <skipspaces>
    6312:	fc 01       	movw	r30, r24
    6314:	80 81       	ld	r24, Z
    6316:	8c 32       	cpi	r24, 0x2C	; 44
    6318:	09 f4       	brne	.+2      	; 0x631c <get_token+0x72>
    631a:	31 96       	adiw	r30, 0x01	; 1
    631c:	18 82       	st	Y, r1
    631e:	cf 01       	movw	r24, r30
    6320:	02 c0       	rjmp	.+4      	; 0x6326 <get_token+0x7c>
    6322:	80 e0       	ldi	r24, 0x00	; 0
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	cd b7       	in	r28, 0x3d	; 61
    6328:	de b7       	in	r29, 0x3e	; 62
    632a:	e6 e0       	ldi	r30, 0x06	; 6
    632c:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00006330 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    6330:	a2 e0       	ldi	r26, 0x02	; 2
    6332:	b0 e0       	ldi	r27, 0x00	; 0
    6334:	ee e9       	ldi	r30, 0x9E	; 158
    6336:	f1 e3       	ldi	r31, 0x31	; 49
    6338:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    633c:	00 97       	sbiw	r24, 0x00	; 0
    633e:	79 f1       	breq	.+94     	; 0x639e <get_value+0x6e>
    6340:	fc 01       	movw	r30, r24
    6342:	20 81       	ld	r18, Z
    6344:	22 23       	and	r18, r18
    6346:	59 f1       	breq	.+86     	; 0x639e <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6348:	de de       	rcall	.-580    	; 0x6106 <skipspaces>
    634a:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    634c:	6f e2       	ldi	r22, 0x2F	; 47
    634e:	73 e0       	ldi	r23, 0x03	; 3
    6350:	36 df       	rcall	.-404    	; 0x61be <MATCHI_LEN>
    6352:	00 97       	sbiw	r24, 0x00	; 0
    6354:	29 f0       	breq	.+10     	; 0x6360 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6356:	08 0f       	add	r16, r24
    6358:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    635a:	40 e1       	ldi	r20, 0x10	; 16
    635c:	50 e0       	ldi	r21, 0x00	; 0
    635e:	18 c0       	rjmp	.+48     	; 0x6390 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6360:	62 e3       	ldi	r22, 0x32	; 50
    6362:	73 e0       	ldi	r23, 0x03	; 3
    6364:	c8 01       	movw	r24, r16
    6366:	2b df       	rcall	.-426    	; 0x61be <MATCHI_LEN>
    6368:	00 97       	sbiw	r24, 0x00	; 0
    636a:	29 f0       	breq	.+10     	; 0x6376 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    636c:	08 0f       	add	r16, r24
    636e:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6370:	48 e0       	ldi	r20, 0x08	; 8
    6372:	50 e0       	ldi	r21, 0x00	; 0
    6374:	0d c0       	rjmp	.+26     	; 0x6390 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6376:	65 e3       	ldi	r22, 0x35	; 53
    6378:	73 e0       	ldi	r23, 0x03	; 3
    637a:	c8 01       	movw	r24, r16
    637c:	20 df       	rcall	.-448    	; 0x61be <MATCHI_LEN>
    637e:	00 97       	sbiw	r24, 0x00	; 0
    6380:	29 f0       	breq	.+10     	; 0x638c <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    6382:	08 0f       	add	r16, r24
    6384:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6386:	42 e0       	ldi	r20, 0x02	; 2
    6388:	50 e0       	ldi	r21, 0x00	; 0
    638a:	02 c0       	rjmp	.+4      	; 0x6390 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    638c:	4a e0       	ldi	r20, 0x0A	; 10
    638e:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6390:	be 01       	movw	r22, r28
    6392:	6f 5f       	subi	r22, 0xFF	; 255
    6394:	7f 4f       	sbci	r23, 0xFF	; 255
    6396:	c8 01       	movw	r24, r16
    6398:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
    639c:	03 c0       	rjmp	.+6      	; 0x63a4 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    639e:	60 e0       	ldi	r22, 0x00	; 0
    63a0:	70 e0       	ldi	r23, 0x00	; 0
    63a2:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    63a4:	22 96       	adiw	r28, 0x02	; 2
    63a6:	e4 e0       	ldi	r30, 0x04	; 4
    63a8:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

000063ac <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    63ac:	78 94       	sei
    63ae:	08 95       	ret

000063b0 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    63b0:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    63b2:	89 e0       	ldi	r24, 0x09	; 9
    63b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    63b8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    63bc:	8f e1       	ldi	r24, 0x1F	; 31
    63be:	9e e4       	ldi	r25, 0x4E	; 78
    63c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    63c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    63c8:	ef e6       	ldi	r30, 0x6F	; 111
    63ca:	f0 e0       	ldi	r31, 0x00	; 0
    63cc:	80 81       	ld	r24, Z
    63ce:	82 60       	ori	r24, 0x02	; 2
    63d0:	80 83       	st	Z, r24
    sei();
    63d2:	78 94       	sei
    63d4:	08 95       	ret

000063d6 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    63d6:	1f 92       	push	r1
    63d8:	0f 92       	push	r0
    63da:	0f b6       	in	r0, 0x3f	; 63
    63dc:	0f 92       	push	r0
    63de:	11 24       	eor	r1, r1
    63e0:	0b b6       	in	r0, 0x3b	; 59
    63e2:	0f 92       	push	r0
    63e4:	2f 93       	push	r18
    63e6:	3f 93       	push	r19
    63e8:	4f 93       	push	r20
    63ea:	5f 93       	push	r21
    63ec:	6f 93       	push	r22
    63ee:	7f 93       	push	r23
    63f0:	8f 93       	push	r24
    63f2:	9f 93       	push	r25
    63f4:	af 93       	push	r26
    63f6:	bf 93       	push	r27
    63f8:	ef 93       	push	r30
    63fa:	ff 93       	push	r31
    execute_timers();
    63fc:	36 d2       	rcall	.+1132   	; 0x686a <execute_timers>
}
    63fe:	ff 91       	pop	r31
    6400:	ef 91       	pop	r30
    6402:	bf 91       	pop	r27
    6404:	af 91       	pop	r26
    6406:	9f 91       	pop	r25
    6408:	8f 91       	pop	r24
    640a:	7f 91       	pop	r23
    640c:	6f 91       	pop	r22
    640e:	5f 91       	pop	r21
    6410:	4f 91       	pop	r20
    6412:	3f 91       	pop	r19
    6414:	2f 91       	pop	r18
    6416:	0f 90       	pop	r0
    6418:	0b be       	out	0x3b, r0	; 59
    641a:	0f 90       	pop	r0
    641c:	0f be       	out	0x3f, r0	; 63
    641e:	0f 90       	pop	r0
    6420:	1f 90       	pop	r1
    6422:	18 95       	reti

00006424 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6424:	0f 93       	push	r16
    6426:	1f 93       	push	r17
    6428:	cf 93       	push	r28
    642a:	df 93       	push	r29
    642c:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    642e:	f8 94       	cli

    count1 = TCNT1;
    6430:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6434:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6438:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    643c:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6440:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    6444:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6448:	80 83       	st	Z, r24
    644a:	91 83       	std	Z+1, r25	; 0x01
    644c:	a2 83       	std	Z+2, r26	; 0x02
    644e:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6450:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6454:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6458:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    645c:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6460:	84 83       	std	Z+4, r24	; 0x04
    6462:	95 83       	std	Z+5, r25	; 0x05
    6464:	a6 83       	std	Z+6, r26	; 0x06
    6466:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6468:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    646c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6470:	b1 9b       	sbis	0x16, 1	; 22
    6472:	03 c0       	rjmp	.+6      	; 0x647a <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6474:	c0 e0       	ldi	r28, 0x00	; 0
    6476:	d0 e0       	ldi	r29, 0x00	; 0
    6478:	3f c0       	rjmp	.+126    	; 0x64f8 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    647a:	82 17       	cp	r24, r18
    647c:	93 07       	cpc	r25, r19
    647e:	d0 f1       	brcs	.+116    	; 0x64f4 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6480:	c0 e0       	ldi	r28, 0x00	; 0
    6482:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6484:	40 e0       	ldi	r20, 0x00	; 0
    6486:	50 e0       	ldi	r21, 0x00	; 0
    6488:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    648a:	9a 01       	movw	r18, r20
    648c:	ab 01       	movw	r20, r22
    648e:	28 0f       	add	r18, r24
    6490:	39 1f       	adc	r19, r25
    6492:	41 1d       	adc	r20, r1
    6494:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6496:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6498:	a2 e3       	ldi	r26, 0x32	; 50
    649a:	b0 e0       	ldi	r27, 0x00	; 0
    649c:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    64a0:	04 81       	ldd	r16, Z+4	; 0x04
    64a2:	15 81       	ldd	r17, Z+5	; 0x05
    64a4:	26 81       	ldd	r18, Z+6	; 0x06
    64a6:	37 81       	ldd	r19, Z+7	; 0x07
    64a8:	dc 01       	movw	r26, r24
    64aa:	cb 01       	movw	r24, r22
    64ac:	80 0f       	add	r24, r16
    64ae:	91 1f       	adc	r25, r17
    64b0:	a2 1f       	adc	r26, r18
    64b2:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    64b4:	81 15       	cp	r24, r1
    64b6:	2a ec       	ldi	r18, 0xCA	; 202
    64b8:	92 07       	cpc	r25, r18
    64ba:	2a e9       	ldi	r18, 0x9A	; 154
    64bc:	a2 07       	cpc	r26, r18
    64be:	2b e3       	ldi	r18, 0x3B	; 59
    64c0:	b2 07       	cpc	r27, r18
    64c2:	2c f4       	brge	.+10     	; 0x64ce <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    64c4:	84 83       	std	Z+4, r24	; 0x04
    64c6:	95 83       	std	Z+5, r25	; 0x05
    64c8:	a6 83       	std	Z+6, r26	; 0x06
    64ca:	b7 83       	std	Z+7, r27	; 0x07
    64cc:	1a c0       	rjmp	.+52     	; 0x6502 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    64ce:	9a 5c       	subi	r25, 0xCA	; 202
    64d0:	aa 49       	sbci	r26, 0x9A	; 154
    64d2:	bb 43       	sbci	r27, 0x3B	; 59
    64d4:	84 83       	std	Z+4, r24	; 0x04
    64d6:	95 83       	std	Z+5, r25	; 0x05
    64d8:	a6 83       	std	Z+6, r26	; 0x06
    64da:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    64dc:	80 81       	ld	r24, Z
    64de:	91 81       	ldd	r25, Z+1	; 0x01
    64e0:	a2 81       	ldd	r26, Z+2	; 0x02
    64e2:	b3 81       	ldd	r27, Z+3	; 0x03
    64e4:	01 96       	adiw	r24, 0x01	; 1
    64e6:	a1 1d       	adc	r26, r1
    64e8:	b1 1d       	adc	r27, r1
    64ea:	80 83       	st	Z, r24
    64ec:	91 83       	std	Z+1, r25	; 0x01
    64ee:	a2 83       	std	Z+2, r26	; 0x02
    64f0:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    64f2:	07 c0       	rjmp	.+14     	; 0x6502 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    64f4:	cf ef       	ldi	r28, 0xFF	; 255
    64f6:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    64f8:	40 e2       	ldi	r20, 0x20	; 32
    64fa:	5e e4       	ldi	r21, 0x4E	; 78
    64fc:	60 e0       	ldi	r22, 0x00	; 0
    64fe:	70 e0       	ldi	r23, 0x00	; 0
    6500:	c4 cf       	rjmp	.-120    	; 0x648a <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6502:	ce 01       	movw	r24, r28
    6504:	df 91       	pop	r29
    6506:	cf 91       	pop	r28
    6508:	1f 91       	pop	r17
    650a:	0f 91       	pop	r16
    650c:	08 95       	ret

0000650e <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    650e:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6512:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6516:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    651a:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    651e:	80 5c       	subi	r24, 0xC0	; 192
    6520:	9d 4b       	sbci	r25, 0xBD	; 189
    6522:	a0 4f       	sbci	r26, 0xF0	; 240
    6524:	bf 4f       	sbci	r27, 0xFF	; 255
    6526:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    652a:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    652e:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    6532:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    6536:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    653a:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    653e:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6542:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6546:	81 15       	cp	r24, r1
    6548:	9a 4c       	sbci	r25, 0xCA	; 202
    654a:	aa 49       	sbci	r26, 0x9A	; 154
    654c:	bb 43       	sbci	r27, 0x3B	; 59
    654e:	dc f0       	brlt	.+54     	; 0x6586 <clock_task+0x78>
    6550:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    6554:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6558:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    655c:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6560:	01 96       	adiw	r24, 0x01	; 1
    6562:	a1 1d       	adc	r26, r1
    6564:	b1 1d       	adc	r27, r1
    6566:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    656a:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    656e:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    6572:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    6576:	10 92 5c 1a 	sts	0x1A5C, r1	; 0x801a5c <__clock+0x4>
    657a:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <__clock+0x5>
    657e:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <__clock+0x6>
    6582:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <__clock+0x7>
    6586:	08 95       	ret

00006588 <clock_settime.part.2>:
    6588:	fc 01       	movw	r30, r24
    658a:	84 81       	ldd	r24, Z+4	; 0x04
    658c:	95 81       	ldd	r25, Z+5	; 0x05
    658e:	a6 81       	ldd	r26, Z+6	; 0x06
    6590:	b7 81       	ldd	r27, Z+7	; 0x07
    6592:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    6596:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    659a:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    659e:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    65a2:	80 81       	ld	r24, Z
    65a4:	91 81       	ldd	r25, Z+1	; 0x01
    65a6:	a2 81       	ldd	r26, Z+2	; 0x02
    65a8:	b3 81       	ldd	r27, Z+3	; 0x03
    65aa:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    65ae:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    65b2:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    65b6:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    65ba:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    65be:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    65c2:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    65c6:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    65ca:	44 81       	ldd	r20, Z+4	; 0x04
    65cc:	55 81       	ldd	r21, Z+5	; 0x05
    65ce:	66 81       	ldd	r22, Z+6	; 0x06
    65d0:	77 81       	ldd	r23, Z+7	; 0x07
    65d2:	48 17       	cp	r20, r24
    65d4:	59 07       	cpc	r21, r25
    65d6:	6a 07       	cpc	r22, r26
    65d8:	7b 07       	cpc	r23, r27
    65da:	b9 f6       	brne	.-82     	; 0x658a <clock_settime.part.2+0x2>
    65dc:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    65e0:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    65e4:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    65e8:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    65ec:	40 81       	ld	r20, Z
    65ee:	51 81       	ldd	r21, Z+1	; 0x01
    65f0:	62 81       	ldd	r22, Z+2	; 0x02
    65f2:	73 81       	ldd	r23, Z+3	; 0x03
    65f4:	48 17       	cp	r20, r24
    65f6:	59 07       	cpc	r21, r25
    65f8:	6a 07       	cpc	r22, r26
    65fa:	7b 07       	cpc	r23, r27
    65fc:	31 f6       	brne	.-116    	; 0x658a <clock_settime.part.2+0x2>
    65fe:	80 e0       	ldi	r24, 0x00	; 0
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	08 95       	ret

00006604 <set_timers>:
    6604:	00 d0       	rcall	.+0      	; 0x6606 <set_timers+0x2>
    6606:	1f 92       	push	r1
    6608:	00 97       	sbiw	r24, 0x00	; 0
    660a:	79 f1       	breq	.+94     	; 0x666a <set_timers+0x66>
    660c:	e0 e6       	ldi	r30, 0x60	; 96
    660e:	fa e1       	ldi	r31, 0x1A	; 26
    6610:	4f ef       	ldi	r20, 0xFF	; 255
    6612:	5f ef       	ldi	r21, 0xFF	; 255
    6614:	20 e0       	ldi	r18, 0x00	; 0
    6616:	30 e0       	ldi	r19, 0x00	; 0
    6618:	60 81       	ld	r22, Z
    661a:	71 81       	ldd	r23, Z+1	; 0x01
    661c:	86 17       	cp	r24, r22
    661e:	97 07       	cpc	r25, r23
    6620:	79 f0       	breq	.+30     	; 0x6640 <set_timers+0x3c>
    6622:	67 2b       	or	r22, r23
    6624:	71 f4       	brne	.+28     	; 0x6642 <set_timers+0x3e>
    6626:	f9 01       	movw	r30, r18
    6628:	ee 0f       	add	r30, r30
    662a:	ff 1f       	adc	r31, r31
    662c:	e2 0f       	add	r30, r18
    662e:	f3 1f       	adc	r31, r19
    6630:	e0 5a       	subi	r30, 0xA0	; 160
    6632:	f5 4e       	sbci	r31, 0xE5	; 229
    6634:	91 83       	std	Z+1, r25	; 0x01
    6636:	80 83       	st	Z, r24
    6638:	81 e0       	ldi	r24, 0x01	; 1
    663a:	82 83       	std	Z+2, r24	; 0x02
    663c:	c9 01       	movw	r24, r18
    663e:	19 c0       	rjmp	.+50     	; 0x6672 <set_timers+0x6e>
    6640:	a9 01       	movw	r20, r18
    6642:	2f 5f       	subi	r18, 0xFF	; 255
    6644:	3f 4f       	sbci	r19, 0xFF	; 255
    6646:	33 96       	adiw	r30, 0x03	; 3
    6648:	28 30       	cpi	r18, 0x08	; 8
    664a:	31 05       	cpc	r19, r1
    664c:	29 f7       	brne	.-54     	; 0x6618 <set_timers+0x14>
    664e:	4f 3f       	cpi	r20, 0xFF	; 255
    6650:	8f ef       	ldi	r24, 0xFF	; 255
    6652:	58 07       	cpc	r21, r24
    6654:	69 f4       	brne	.+26     	; 0x6670 <set_timers+0x6c>
    6656:	8d ec       	ldi	r24, 0xCD	; 205
    6658:	95 e0       	ldi	r25, 0x05	; 5
    665a:	a0 e0       	ldi	r26, 0x00	; 0
    665c:	ed b7       	in	r30, 0x3d	; 61
    665e:	fe b7       	in	r31, 0x3e	; 62
    6660:	81 83       	std	Z+1, r24	; 0x01
    6662:	92 83       	std	Z+2, r25	; 0x02
    6664:	a3 83       	std	Z+3, r26	; 0x03
    6666:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    666a:	8f ef       	ldi	r24, 0xFF	; 255
    666c:	9f ef       	ldi	r25, 0xFF	; 255
    666e:	01 c0       	rjmp	.+2      	; 0x6672 <set_timers+0x6e>
    6670:	ca 01       	movw	r24, r20
    6672:	0f 90       	pop	r0
    6674:	0f 90       	pop	r0
    6676:	0f 90       	pop	r0
    6678:	08 95       	ret

0000667a <delete_all_timers>:
    667a:	e0 e6       	ldi	r30, 0x60	; 96
    667c:	fa e1       	ldi	r31, 0x1A	; 26
    667e:	12 82       	std	Z+2, r1	; 0x02
    6680:	11 82       	std	Z+1, r1	; 0x01
    6682:	10 82       	st	Z, r1
    6684:	33 96       	adiw	r30, 0x03	; 3
    6686:	8a e1       	ldi	r24, 0x1A	; 26
    6688:	e8 37       	cpi	r30, 0x78	; 120
    668a:	f8 07       	cpc	r31, r24
    668c:	c1 f7       	brne	.-16     	; 0x667e <delete_all_timers+0x4>
    668e:	08 95       	ret

00006690 <subtract_timespec>:
    6690:	0f 93       	push	r16
    6692:	1f 93       	push	r17
    6694:	cf 93       	push	r28
    6696:	df 93       	push	r29
    6698:	fc 01       	movw	r30, r24
    669a:	84 81       	ldd	r24, Z+4	; 0x04
    669c:	95 81       	ldd	r25, Z+5	; 0x05
    669e:	a6 81       	ldd	r26, Z+6	; 0x06
    66a0:	b7 81       	ldd	r27, Z+7	; 0x07
    66a2:	eb 01       	movw	r28, r22
    66a4:	0c 81       	ldd	r16, Y+4	; 0x04
    66a6:	1d 81       	ldd	r17, Y+5	; 0x05
    66a8:	2e 81       	ldd	r18, Y+6	; 0x06
    66aa:	3f 81       	ldd	r19, Y+7	; 0x07
    66ac:	80 1b       	sub	r24, r16
    66ae:	91 0b       	sbc	r25, r17
    66b0:	a2 0b       	sbc	r26, r18
    66b2:	b3 0b       	sbc	r27, r19
    66b4:	b7 fd       	sbrc	r27, 7
    66b6:	05 c0       	rjmp	.+10     	; 0x66c2 <subtract_timespec+0x32>
    66b8:	84 83       	std	Z+4, r24	; 0x04
    66ba:	95 83       	std	Z+5, r25	; 0x05
    66bc:	a6 83       	std	Z+6, r26	; 0x06
    66be:	b7 83       	std	Z+7, r27	; 0x07
    66c0:	12 c0       	rjmp	.+36     	; 0x66e6 <subtract_timespec+0x56>
    66c2:	96 53       	subi	r25, 0x36	; 54
    66c4:	a5 46       	sbci	r26, 0x65	; 101
    66c6:	b4 4c       	sbci	r27, 0xC4	; 196
    66c8:	84 83       	std	Z+4, r24	; 0x04
    66ca:	95 83       	std	Z+5, r25	; 0x05
    66cc:	a6 83       	std	Z+6, r26	; 0x06
    66ce:	b7 83       	std	Z+7, r27	; 0x07
    66d0:	80 81       	ld	r24, Z
    66d2:	91 81       	ldd	r25, Z+1	; 0x01
    66d4:	a2 81       	ldd	r26, Z+2	; 0x02
    66d6:	b3 81       	ldd	r27, Z+3	; 0x03
    66d8:	01 97       	sbiw	r24, 0x01	; 1
    66da:	a1 09       	sbc	r26, r1
    66dc:	b1 09       	sbc	r27, r1
    66de:	80 83       	st	Z, r24
    66e0:	91 83       	std	Z+1, r25	; 0x01
    66e2:	a2 83       	std	Z+2, r26	; 0x02
    66e4:	b3 83       	std	Z+3, r27	; 0x03
    66e6:	80 81       	ld	r24, Z
    66e8:	91 81       	ldd	r25, Z+1	; 0x01
    66ea:	a2 81       	ldd	r26, Z+2	; 0x02
    66ec:	b3 81       	ldd	r27, Z+3	; 0x03
    66ee:	eb 01       	movw	r28, r22
    66f0:	48 81       	ld	r20, Y
    66f2:	59 81       	ldd	r21, Y+1	; 0x01
    66f4:	6a 81       	ldd	r22, Y+2	; 0x02
    66f6:	7b 81       	ldd	r23, Y+3	; 0x03
    66f8:	84 1b       	sub	r24, r20
    66fa:	95 0b       	sbc	r25, r21
    66fc:	a6 0b       	sbc	r26, r22
    66fe:	b7 0b       	sbc	r27, r23
    6700:	80 83       	st	Z, r24
    6702:	91 83       	std	Z+1, r25	; 0x01
    6704:	a2 83       	std	Z+2, r26	; 0x02
    6706:	b3 83       	std	Z+3, r27	; 0x03
    6708:	df 91       	pop	r29
    670a:	cf 91       	pop	r28
    670c:	1f 91       	pop	r17
    670e:	0f 91       	pop	r16
    6710:	08 95       	ret

00006712 <ts_to_str>:
    6712:	ad b7       	in	r26, 0x3d	; 61
    6714:	be b7       	in	r27, 0x3e	; 62
    6716:	1f 97       	sbiw	r26, 0x0f	; 15
    6718:	0f b6       	in	r0, 0x3f	; 63
    671a:	f8 94       	cli
    671c:	be bf       	out	0x3e, r27	; 62
    671e:	0f be       	out	0x3f, r0	; 63
    6720:	ad bf       	out	0x3d, r26	; 61
    6722:	fc 01       	movw	r30, r24
    6724:	44 81       	ldd	r20, Z+4	; 0x04
    6726:	55 81       	ldd	r21, Z+5	; 0x05
    6728:	66 81       	ldd	r22, Z+6	; 0x06
    672a:	77 81       	ldd	r23, Z+7	; 0x07
    672c:	ed b7       	in	r30, 0x3d	; 61
    672e:	fe b7       	in	r31, 0x3e	; 62
    6730:	44 87       	std	Z+12, r20	; 0x0c
    6732:	55 87       	std	Z+13, r21	; 0x0d
    6734:	66 87       	std	Z+14, r22	; 0x0e
    6736:	77 87       	std	Z+15, r23	; 0x0f
    6738:	fc 01       	movw	r30, r24
    673a:	80 81       	ld	r24, Z
    673c:	91 81       	ldd	r25, Z+1	; 0x01
    673e:	a2 81       	ldd	r26, Z+2	; 0x02
    6740:	b3 81       	ldd	r27, Z+3	; 0x03
    6742:	ed b7       	in	r30, 0x3d	; 61
    6744:	fe b7       	in	r31, 0x3e	; 62
    6746:	80 87       	std	Z+8, r24	; 0x08
    6748:	91 87       	std	Z+9, r25	; 0x09
    674a:	a2 87       	std	Z+10, r26	; 0x0a
    674c:	b3 87       	std	Z+11, r27	; 0x0b
    674e:	83 ec       	ldi	r24, 0xC3	; 195
    6750:	95 e0       	ldi	r25, 0x05	; 5
    6752:	a0 e0       	ldi	r26, 0x00	; 0
    6754:	85 83       	std	Z+5, r24	; 0x05
    6756:	96 83       	std	Z+6, r25	; 0x06
    6758:	a7 83       	std	Z+7, r26	; 0x07
    675a:	8f e1       	ldi	r24, 0x1F	; 31
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	94 83       	std	Z+4, r25	; 0x04
    6760:	83 83       	std	Z+3, r24	; 0x03
    6762:	8c e8       	ldi	r24, 0x8C	; 140
    6764:	97 e1       	ldi	r25, 0x17	; 23
    6766:	92 83       	std	Z+2, r25	; 0x02
    6768:	81 83       	std	Z+1, r24	; 0x01
    676a:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <snprintf_P>
    676e:	8c e8       	ldi	r24, 0x8C	; 140
    6770:	97 e1       	ldi	r25, 0x17	; 23
    6772:	ad b7       	in	r26, 0x3d	; 61
    6774:	be b7       	in	r27, 0x3e	; 62
    6776:	1f 96       	adiw	r26, 0x0f	; 15
    6778:	0f b6       	in	r0, 0x3f	; 63
    677a:	f8 94       	cli
    677c:	be bf       	out	0x3e, r27	; 62
    677e:	0f be       	out	0x3f, r0	; 63
    6780:	ad bf       	out	0x3d, r26	; 61
    6782:	08 95       	ret

00006784 <clock_elapsed_begin>:
    6784:	64 e8       	ldi	r22, 0x84	; 132
    6786:	77 e1       	ldi	r23, 0x17	; 23
    6788:	80 e0       	ldi	r24, 0x00	; 0
    678a:	90 e0       	ldi	r25, 0x00	; 0
    678c:	4b ce       	rjmp	.-874    	; 0x6424 <clock_gettime>
    678e:	08 95       	ret

00006790 <clock_elapsed_end>:
    6790:	af e0       	ldi	r26, 0x0F	; 15
    6792:	b0 e0       	ldi	r27, 0x00	; 0
    6794:	ee ec       	ldi	r30, 0xCE	; 206
    6796:	f3 e3       	ldi	r31, 0x33	; 51
    6798:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    679c:	8c 01       	movw	r16, r24
    679e:	be 01       	movw	r22, r28
    67a0:	68 5f       	subi	r22, 0xF8	; 248
    67a2:	7f 4f       	sbci	r23, 0xFF	; 255
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	90 e0       	ldi	r25, 0x00	; 0
    67a8:	3d de       	rcall	.-902    	; 0x6424 <clock_gettime>
    67aa:	64 e8       	ldi	r22, 0x84	; 132
    67ac:	77 e1       	ldi	r23, 0x17	; 23
    67ae:	ce 01       	movw	r24, r28
    67b0:	08 96       	adiw	r24, 0x08	; 8
    67b2:	6e df       	rcall	.-292    	; 0x6690 <subtract_timespec>
    67b4:	01 15       	cp	r16, r1
    67b6:	11 05       	cpc	r17, r1
    67b8:	b1 f0       	breq	.+44     	; 0x67e6 <clock_elapsed_end+0x56>
    67ba:	f8 01       	movw	r30, r16
    67bc:	80 81       	ld	r24, Z
    67be:	88 23       	and	r24, r24
    67c0:	91 f0       	breq	.+36     	; 0x67e6 <clock_elapsed_end+0x56>
    67c2:	ce 01       	movw	r24, r28
    67c4:	08 96       	adiw	r24, 0x08	; 8
    67c6:	a5 df       	rcall	.-182    	; 0x6712 <ts_to_str>
    67c8:	ed b7       	in	r30, 0x3d	; 61
    67ca:	fe b7       	in	r31, 0x3e	; 62
    67cc:	97 83       	std	Z+7, r25	; 0x07
    67ce:	86 83       	std	Z+6, r24	; 0x06
    67d0:	15 83       	std	Z+5, r17	; 0x05
    67d2:	04 83       	std	Z+4, r16	; 0x04
    67d4:	85 eb       	ldi	r24, 0xB5	; 181
    67d6:	95 e0       	ldi	r25, 0x05	; 5
    67d8:	a0 e0       	ldi	r26, 0x00	; 0
    67da:	81 83       	std	Z+1, r24	; 0x01
    67dc:	92 83       	std	Z+2, r25	; 0x02
    67de:	a3 83       	std	Z+3, r26	; 0x03
    67e0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    67e4:	0f c0       	rjmp	.+30     	; 0x6804 <clock_elapsed_end+0x74>
    67e6:	ce 01       	movw	r24, r28
    67e8:	08 96       	adiw	r24, 0x08	; 8
    67ea:	93 df       	rcall	.-218    	; 0x6712 <ts_to_str>
    67ec:	ed b7       	in	r30, 0x3d	; 61
    67ee:	fe b7       	in	r31, 0x3e	; 62
    67f0:	95 83       	std	Z+5, r25	; 0x05
    67f2:	84 83       	std	Z+4, r24	; 0x04
    67f4:	8a ea       	ldi	r24, 0xAA	; 170
    67f6:	95 e0       	ldi	r25, 0x05	; 5
    67f8:	a0 e0       	ldi	r26, 0x00	; 0
    67fa:	81 83       	std	Z+1, r24	; 0x01
    67fc:	92 83       	std	Z+2, r25	; 0x02
    67fe:	a3 83       	std	Z+3, r26	; 0x03
    6800:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    6804:	2f 96       	adiw	r28, 0x0f	; 15
    6806:	e4 e0       	ldi	r30, 0x04	; 4
    6808:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

0000680c <clock_clear>:
    680c:	a8 e0       	ldi	r26, 0x08	; 8
    680e:	b0 e0       	ldi	r27, 0x00	; 0
    6810:	ec e0       	ldi	r30, 0x0C	; 12
    6812:	f4 e3       	ldi	r31, 0x34	; 52
    6814:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    6818:	1d 82       	std	Y+5, r1	; 0x05
    681a:	1e 82       	std	Y+6, r1	; 0x06
    681c:	1f 82       	std	Y+7, r1	; 0x07
    681e:	18 86       	std	Y+8, r1	; 0x08
    6820:	19 82       	std	Y+1, r1	; 0x01
    6822:	1a 82       	std	Y+2, r1	; 0x02
    6824:	1b 82       	std	Y+3, r1	; 0x03
    6826:	1c 82       	std	Y+4, r1	; 0x04
    6828:	ce 01       	movw	r24, r28
    682a:	01 96       	adiw	r24, 0x01	; 1
    682c:	ad de       	rcall	.-678    	; 0x6588 <clock_settime.part.2>
    682e:	e8 e7       	ldi	r30, 0x78	; 120
    6830:	fa e1       	ldi	r31, 0x1A	; 26
    6832:	11 82       	std	Z+1, r1	; 0x01
    6834:	10 82       	st	Z, r1
    6836:	13 82       	std	Z+3, r1	; 0x03
    6838:	12 82       	std	Z+2, r1	; 0x02
    683a:	28 96       	adiw	r28, 0x08	; 8
    683c:	e2 e0       	ldi	r30, 0x02	; 2
    683e:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00006842 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6842:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    6846:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    684a:	89 2b       	or	r24, r25
    684c:	69 f0       	breq	.+26     	; 0x6868 <enable_timers+0x26>
    684e:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <timers_enabled>
    6852:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <timers_enabled+0x1>
    6856:	89 2b       	or	r24, r25
    6858:	39 f4       	brne	.+14     	; 0x6868 <enable_timers+0x26>
    {
        enable_system_task();
    685a:	a8 dd       	rcall	.-1200   	; 0x63ac <enable_system_task>
        timers_enabled = 1;
    685c:	81 e0       	ldi	r24, 0x01	; 1
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	90 93 af 17 	sts	0x17AF, r25	; 0x8017af <timers_enabled+0x1>
    6864:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <timers_enabled>
    6868:	08 95       	ret

0000686a <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    686a:	cf 93       	push	r28
    686c:	df 93       	push	r29
    686e:	c0 e6       	ldi	r28, 0x60	; 96
    6870:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6872:	8a 81       	ldd	r24, Y+2	; 0x02
    6874:	88 23       	and	r24, r24
    6876:	29 f0       	breq	.+10     	; 0x6882 <execute_timers+0x18>
    6878:	e8 81       	ld	r30, Y
    687a:	f9 81       	ldd	r31, Y+1	; 0x01
    687c:	30 97       	sbiw	r30, 0x00	; 0
    687e:	09 f0       	breq	.+2      	; 0x6882 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6880:	09 95       	icall
    6882:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6884:	8a e1       	ldi	r24, 0x1A	; 26
    6886:	c8 37       	cpi	r28, 0x78	; 120
    6888:	d8 07       	cpc	r29, r24
    688a:	99 f7       	brne	.-26     	; 0x6872 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    688c:	df 91       	pop	r29
    688e:	cf 91       	pop	r28
    6890:	08 95       	ret

00006892 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6892:	00 d0       	rcall	.+0      	; 0x6894 <init_timers+0x2>
    6894:	1f 92       	push	r1
    printf("Timers init called\n");
    6896:	86 e9       	ldi	r24, 0x96	; 150
    6898:	95 e0       	ldi	r25, 0x05	; 5
    689a:	a0 e0       	ldi	r26, 0x00	; 0
    689c:	ed b7       	in	r30, 0x3d	; 61
    689e:	fe b7       	in	r31, 0x3e	; 62
    68a0:	81 83       	std	Z+1, r24	; 0x01
    68a2:	92 83       	std	Z+2, r25	; 0x02
    68a4:	a3 83       	std	Z+3, r26	; 0x03
    68a6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    if(!timers_configured)
    68aa:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <timers_configured>
    68ae:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <timers_configured+0x1>
    68b2:	89 2b       	or	r24, r25
    68b4:	a9 f4       	brne	.+42     	; 0x68e0 <init_timers+0x4e>
    {
        install_timers_isr();
    68b6:	7c dd       	rcall	.-1288   	; 0x63b0 <install_timers_isr>
        timers_configured = 1;
    68b8:	81 e0       	ldi	r24, 0x01	; 1
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	90 93 ad 17 	sts	0x17AD, r25	; 0x8017ad <timers_configured+0x1>
    68c0:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <timers_configured>
        timers_enabled = 0;
    68c4:	10 92 af 17 	sts	0x17AF, r1	; 0x8017af <timers_enabled+0x1>
    68c8:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <timers_enabled>
        printf("Timers configured\n");
    68cc:	83 e8       	ldi	r24, 0x83	; 131
    68ce:	95 e0       	ldi	r25, 0x05	; 5
    68d0:	a0 e0       	ldi	r26, 0x00	; 0
    68d2:	ed b7       	in	r30, 0x3d	; 61
    68d4:	fe b7       	in	r31, 0x3e	; 62
    68d6:	81 83       	std	Z+1, r24	; 0x01
    68d8:	92 83       	std	Z+2, r25	; 0x02
    68da:	a3 83       	std	Z+3, r26	; 0x03
    68dc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    68e0:	cc de       	rcall	.-616    	; 0x667a <delete_all_timers>
    68e2:	94 df       	rcall	.-216    	; 0x680c <clock_clear>
    printf("Clock Init\n");
    68e4:	87 e7       	ldi	r24, 0x77	; 119
    68e6:	95 e0       	ldi	r25, 0x05	; 5
    68e8:	a0 e0       	ldi	r26, 0x00	; 0
    68ea:	ed b7       	in	r30, 0x3d	; 61
    68ec:	fe b7       	in	r31, 0x3e	; 62
    68ee:	81 83       	std	Z+1, r24	; 0x01
    68f0:	92 83       	std	Z+2, r25	; 0x02
    68f2:	a3 83       	std	Z+3, r26	; 0x03
    68f4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    68f8:	61 e0       	ldi	r22, 0x01	; 1
    68fa:	70 e0       	ldi	r23, 0x00	; 0
    68fc:	87 e8       	ldi	r24, 0x87	; 135
    68fe:	92 e3       	ldi	r25, 0x32	; 50
    6900:	81 de       	rcall	.-766    	; 0x6604 <set_timers>
    6902:	01 96       	adiw	r24, 0x01	; 1
    6904:	51 f4       	brne	.+20     	; 0x691a <init_timers+0x88>
        printf("Clock task init failed\n");
    6906:	8f e5       	ldi	r24, 0x5F	; 95
    6908:	95 e0       	ldi	r25, 0x05	; 5
    690a:	a0 e0       	ldi	r26, 0x00	; 0
    690c:	ed b7       	in	r30, 0x3d	; 61
    690e:	fe b7       	in	r31, 0x3e	; 62
    6910:	81 83       	std	Z+1, r24	; 0x01
    6912:	92 83       	std	Z+2, r25	; 0x02
    6914:	a3 83       	std	Z+3, r26	; 0x03
    6916:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Clock Installed\n");
    691a:	8e e4       	ldi	r24, 0x4E	; 78
    691c:	95 e0       	ldi	r25, 0x05	; 5
    691e:	a0 e0       	ldi	r26, 0x00	; 0
    6920:	ed b7       	in	r30, 0x3d	; 61
    6922:	fe b7       	in	r31, 0x3e	; 62
    6924:	81 83       	std	Z+1, r24	; 0x01
    6926:	92 83       	std	Z+2, r25	; 0x02
    6928:	a3 83       	std	Z+3, r26	; 0x03
    692a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    enable_timers();
    692e:	89 df       	rcall	.-238    	; 0x6842 <enable_timers>

    printf("Timers enabled\n");
    6930:	8e e3       	ldi	r24, 0x3E	; 62
    6932:	95 e0       	ldi	r25, 0x05	; 5
    6934:	a0 e0       	ldi	r26, 0x00	; 0
    6936:	ed b7       	in	r30, 0x3d	; 61
    6938:	fe b7       	in	r31, 0x3e	; 62
    693a:	81 83       	std	Z+1, r24	; 0x01
    693c:	92 83       	std	Z+2, r25	; 0x02
    693e:	a3 83       	std	Z+3, r26	; 0x03
    6940:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
}
    6944:	0f 90       	pop	r0
    6946:	0f 90       	pop	r0
    6948:	0f 90       	pop	r0
    694a:	08 95       	ret

0000694c <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    694c:	89 2b       	or	r24, r25
    694e:	81 f4       	brne	.+32     	; 0x6970 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6950:	fb 01       	movw	r30, r22
    6952:	10 82       	st	Z, r1
    6954:	11 82       	std	Z+1, r1	; 0x01
    6956:	12 82       	std	Z+2, r1	; 0x02
    6958:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    695a:	80 e4       	ldi	r24, 0x40	; 64
    695c:	92 e4       	ldi	r25, 0x42	; 66
    695e:	af e0       	ldi	r26, 0x0F	; 15
    6960:	b0 e0       	ldi	r27, 0x00	; 0
    6962:	84 83       	std	Z+4, r24	; 0x04
    6964:	95 83       	std	Z+5, r25	; 0x05
    6966:	a6 83       	std	Z+6, r26	; 0x06
    6968:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    696a:	80 e0       	ldi	r24, 0x00	; 0
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6970:	8f ef       	ldi	r24, 0xFF	; 255
    6972:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6974:	08 95       	ret

00006976 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6976:	89 2b       	or	r24, r25
    6978:	19 f4       	brne	.+6      	; 0x6980 <clock_settime+0xa>
    697a:	cb 01       	movw	r24, r22
    697c:	05 ce       	rjmp	.-1014   	; 0x6588 <clock_settime.part.2>
    697e:	08 95       	ret
        return(-1);
    6980:	8f ef       	ldi	r24, 0xFF	; 255
    6982:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6984:	08 95       	ret

00006986 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6986:	9c 01       	movw	r18, r24
    6988:	83 70       	andi	r24, 0x03	; 3
    698a:	99 27       	eor	r25, r25
    698c:	00 97       	sbiw	r24, 0x00	; 0
    698e:	69 f4       	brne	.+26     	; 0x69aa <IS_Leap+0x24>
    6990:	2c 36       	cpi	r18, 0x6C	; 108
    6992:	47 e0       	ldi	r20, 0x07	; 7
    6994:	34 07       	cpc	r19, r20
    6996:	59 f0       	breq	.+22     	; 0x69ae <IS_Leap+0x28>
    6998:	51 e0       	ldi	r21, 0x01	; 1
    699a:	40 e0       	ldi	r20, 0x00	; 0
    699c:	24 33       	cpi	r18, 0x34	; 52
    699e:	38 40       	sbci	r19, 0x08	; 8
    69a0:	09 f4       	brne	.+2      	; 0x69a4 <IS_Leap+0x1e>
    69a2:	50 e0       	ldi	r21, 0x00	; 0
    69a4:	85 2f       	mov	r24, r21
    69a6:	94 2f       	mov	r25, r20
    69a8:	08 95       	ret
    69aa:	80 e0       	ldi	r24, 0x00	; 0
    69ac:	90 e0       	ldi	r25, 0x00	; 0
    69ae:	08 95       	ret

000069b0 <tm_mon_to_ascii>:
    69b0:	8c 30       	cpi	r24, 0x0C	; 12
    69b2:	91 05       	cpc	r25, r1
    69b4:	40 f4       	brcc	.+16     	; 0x69c6 <tm_mon_to_ascii+0x16>
    69b6:	88 0f       	add	r24, r24
    69b8:	99 1f       	adc	r25, r25
    69ba:	fc 01       	movw	r30, r24
    69bc:	e5 5f       	subi	r30, 0xF5	; 245
    69be:	fe 4f       	sbci	r31, 0xFE	; 254
    69c0:	80 81       	ld	r24, Z
    69c2:	91 81       	ldd	r25, Z+1	; 0x01
    69c4:	08 95       	ret
    69c6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    69ca:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    69ce:	08 95       	ret

000069d0 <Days_Per_Month>:
    69d0:	cf 93       	push	r28
    69d2:	df 93       	push	r29
    69d4:	8c 30       	cpi	r24, 0x0C	; 12
    69d6:	91 05       	cpc	r25, r1
    69d8:	24 f0       	brlt	.+8      	; 0x69e2 <Days_Per_Month+0x12>
    69da:	6f 5f       	subi	r22, 0xFF	; 255
    69dc:	7f 4f       	sbci	r23, 0xFF	; 255
    69de:	0c 97       	sbiw	r24, 0x0c	; 12
    69e0:	f9 cf       	rjmp	.-14     	; 0x69d4 <Days_Per_Month+0x4>
    69e2:	97 ff       	sbrs	r25, 7
    69e4:	04 c0       	rjmp	.+8      	; 0x69ee <Days_Per_Month+0x1e>
    69e6:	61 50       	subi	r22, 0x01	; 1
    69e8:	71 09       	sbc	r23, r1
    69ea:	0c 96       	adiw	r24, 0x0c	; 12
    69ec:	fa cf       	rjmp	.-12     	; 0x69e2 <Days_Per_Month+0x12>
    69ee:	fc 01       	movw	r30, r24
    69f0:	ee 0f       	add	r30, r30
    69f2:	ff 1f       	adc	r31, r31
    69f4:	e8 57       	subi	r30, 0x78	; 120
    69f6:	fc 4f       	sbci	r31, 0xFC	; 252
    69f8:	c0 81       	ld	r28, Z
    69fa:	d1 81       	ldd	r29, Z+1	; 0x01
    69fc:	01 97       	sbiw	r24, 0x01	; 1
    69fe:	29 f4       	brne	.+10     	; 0x6a0a <Days_Per_Month+0x3a>
    6a00:	cb 01       	movw	r24, r22
    6a02:	c1 df       	rcall	.-126    	; 0x6986 <IS_Leap>
    6a04:	89 2b       	or	r24, r25
    6a06:	09 f0       	breq	.+2      	; 0x6a0a <Days_Per_Month+0x3a>
    6a08:	21 96       	adiw	r28, 0x01	; 1
    6a0a:	ce 01       	movw	r24, r28
    6a0c:	df 91       	pop	r29
    6a0e:	cf 91       	pop	r28
    6a10:	08 95       	ret

00006a12 <time_to_tm>:
    6a12:	a0 e0       	ldi	r26, 0x00	; 0
    6a14:	b0 e0       	ldi	r27, 0x00	; 0
    6a16:	ef e0       	ldi	r30, 0x0F	; 15
    6a18:	f5 e3       	ldi	r31, 0x35	; 53
    6a1a:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x4>
    6a1e:	e8 01       	movw	r28, r16
    6a20:	e6 e1       	ldi	r30, 0x16	; 22
    6a22:	d8 01       	movw	r26, r16
    6a24:	1d 92       	st	X+, r1
    6a26:	ea 95       	dec	r30
    6a28:	e9 f7       	brne	.-6      	; 0x6a24 <time_to_tm+0x12>
    6a2a:	61 15       	cp	r22, r1
    6a2c:	bd e5       	ldi	r27, 0x5D	; 93
    6a2e:	7b 07       	cpc	r23, r27
    6a30:	bd ef       	ldi	r27, 0xFD	; 253
    6a32:	8b 07       	cpc	r24, r27
    6a34:	bf ef       	ldi	r27, 0xFF	; 255
    6a36:	9b 07       	cpc	r25, r27
    6a38:	08 f0       	brcs	.+2      	; 0x6a3c <time_to_tm+0x2a>
    6a3a:	c0 c0       	rjmp	.+384    	; 0x6bbc <time_to_tm+0x1aa>
    6a3c:	6b 01       	movw	r12, r22
    6a3e:	7c 01       	movw	r14, r24
    6a40:	c2 1a       	sub	r12, r18
    6a42:	d3 0a       	sbc	r13, r19
    6a44:	e4 0a       	sbc	r14, r20
    6a46:	f5 0a       	sbc	r15, r21
    6a48:	46 01       	movw	r8, r12
    6a4a:	57 01       	movw	r10, r14
    6a4c:	e0 e8       	ldi	r30, 0x80	; 128
    6a4e:	ce 16       	cp	r12, r30
    6a50:	ee ea       	ldi	r30, 0xAE	; 174
    6a52:	de 06       	cpc	r13, r30
    6a54:	ee ef       	ldi	r30, 0xFE	; 254
    6a56:	ee 06       	cpc	r14, r30
    6a58:	ef ef       	ldi	r30, 0xFF	; 255
    6a5a:	fe 06       	cpc	r15, r30
    6a5c:	50 f0       	brcs	.+20     	; 0x6a72 <time_to_tm+0x60>
    6a5e:	80 e8       	ldi	r24, 0x80	; 128
    6a60:	88 0e       	add	r8, r24
    6a62:	81 e5       	ldi	r24, 0x51	; 81
    6a64:	98 1e       	adc	r9, r24
    6a66:	81 e0       	ldi	r24, 0x01	; 1
    6a68:	a8 1e       	adc	r10, r24
    6a6a:	b1 1c       	adc	r11, r1
    6a6c:	01 e0       	ldi	r16, 0x01	; 1
    6a6e:	10 e0       	ldi	r17, 0x00	; 0
    6a70:	02 c0       	rjmp	.+4      	; 0x6a76 <time_to_tm+0x64>
    6a72:	00 e0       	ldi	r16, 0x00	; 0
    6a74:	10 e0       	ldi	r17, 0x00	; 0
    6a76:	8c e3       	ldi	r24, 0x3C	; 60
    6a78:	48 2e       	mov	r4, r24
    6a7a:	51 2c       	mov	r5, r1
    6a7c:	61 2c       	mov	r6, r1
    6a7e:	71 2c       	mov	r7, r1
    6a80:	c5 01       	movw	r24, r10
    6a82:	b4 01       	movw	r22, r8
    6a84:	a3 01       	movw	r20, r6
    6a86:	92 01       	movw	r18, r4
    6a88:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    6a8c:	79 83       	std	Y+1, r23	; 0x01
    6a8e:	68 83       	st	Y, r22
    6a90:	ca 01       	movw	r24, r20
    6a92:	b9 01       	movw	r22, r18
    6a94:	a3 01       	movw	r20, r6
    6a96:	92 01       	movw	r18, r4
    6a98:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    6a9c:	7b 83       	std	Y+3, r23	; 0x03
    6a9e:	6a 83       	std	Y+2, r22	; 0x02
    6aa0:	c5 01       	movw	r24, r10
    6aa2:	b4 01       	movw	r22, r8
    6aa4:	20 e1       	ldi	r18, 0x10	; 16
    6aa6:	3e e0       	ldi	r19, 0x0E	; 14
    6aa8:	40 e0       	ldi	r20, 0x00	; 0
    6aaa:	50 e0       	ldi	r21, 0x00	; 0
    6aac:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    6ab0:	ca 01       	movw	r24, r20
    6ab2:	b9 01       	movw	r22, r18
    6ab4:	28 e1       	ldi	r18, 0x18	; 24
    6ab6:	30 e0       	ldi	r19, 0x00	; 0
    6ab8:	40 e0       	ldi	r20, 0x00	; 0
    6aba:	50 e0       	ldi	r21, 0x00	; 0
    6abc:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    6ac0:	7d 83       	std	Y+5, r23	; 0x05
    6ac2:	6c 83       	std	Y+4, r22	; 0x04
    6ac4:	01 15       	cp	r16, r1
    6ac6:	11 05       	cpc	r17, r1
    6ac8:	89 f0       	breq	.+34     	; 0x6aec <time_to_tm+0xda>
    6aca:	85 e4       	ldi	r24, 0x45	; 69
    6acc:	90 e0       	ldi	r25, 0x00	; 0
    6ace:	9b 87       	std	Y+11, r25	; 0x0b
    6ad0:	8a 87       	std	Y+10, r24	; 0x0a
    6ad2:	8b e0       	ldi	r24, 0x0B	; 11
    6ad4:	90 e0       	ldi	r25, 0x00	; 0
    6ad6:	99 87       	std	Y+9, r25	; 0x09
    6ad8:	88 87       	std	Y+8, r24	; 0x08
    6ada:	8f e1       	ldi	r24, 0x1F	; 31
    6adc:	90 e0       	ldi	r25, 0x00	; 0
    6ade:	9f 83       	std	Y+7, r25	; 0x07
    6ae0:	8e 83       	std	Y+6, r24	; 0x06
    6ae2:	83 e0       	ldi	r24, 0x03	; 3
    6ae4:	90 e0       	ldi	r25, 0x00	; 0
    6ae6:	9d 87       	std	Y+13, r25	; 0x0d
    6ae8:	8c 87       	std	Y+12, r24	; 0x0c
    6aea:	65 c0       	rjmp	.+202    	; 0x6bb6 <time_to_tm+0x1a4>
    6aec:	c5 01       	movw	r24, r10
    6aee:	b4 01       	movw	r22, r8
    6af0:	20 e8       	ldi	r18, 0x80	; 128
    6af2:	31 e5       	ldi	r19, 0x51	; 81
    6af4:	41 e0       	ldi	r20, 0x01	; 1
    6af6:	50 e0       	ldi	r21, 0x00	; 0
    6af8:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    6afc:	49 01       	movw	r8, r18
    6afe:	5a 01       	movw	r10, r20
    6b00:	ca 01       	movw	r24, r20
    6b02:	b9 01       	movw	r22, r18
    6b04:	6c 5f       	subi	r22, 0xFC	; 252
    6b06:	7f 4f       	sbci	r23, 0xFF	; 255
    6b08:	8f 4f       	sbci	r24, 0xFF	; 255
    6b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b0c:	27 e0       	ldi	r18, 0x07	; 7
    6b0e:	30 e0       	ldi	r19, 0x00	; 0
    6b10:	40 e0       	ldi	r20, 0x00	; 0
    6b12:	50 e0       	ldi	r21, 0x00	; 0
    6b14:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
    6b18:	7d 87       	std	Y+13, r23	; 0x0d
    6b1a:	6c 87       	std	Y+12, r22	; 0x0c
    6b1c:	02 eb       	ldi	r16, 0xB2	; 178
    6b1e:	17 e0       	ldi	r17, 0x07	; 7
    6b20:	c8 01       	movw	r24, r16
    6b22:	31 df       	rcall	.-414    	; 0x6986 <IS_Leap>
    6b24:	00 97       	sbiw	r24, 0x00	; 0
    6b26:	19 f4       	brne	.+6      	; 0x6b2e <time_to_tm+0x11c>
    6b28:	4d e6       	ldi	r20, 0x6D	; 109
    6b2a:	51 e0       	ldi	r21, 0x01	; 1
    6b2c:	02 c0       	rjmp	.+4      	; 0x6b32 <time_to_tm+0x120>
    6b2e:	4e e6       	ldi	r20, 0x6E	; 110
    6b30:	51 e0       	ldi	r21, 0x01	; 1
    6b32:	05 2e       	mov	r0, r21
    6b34:	00 0c       	add	r0, r0
    6b36:	66 0b       	sbc	r22, r22
    6b38:	77 0b       	sbc	r23, r23
    6b3a:	84 16       	cp	r8, r20
    6b3c:	95 06       	cpc	r9, r21
    6b3e:	a6 06       	cpc	r10, r22
    6b40:	b7 06       	cpc	r11, r23
    6b42:	3c f0       	brlt	.+14     	; 0x6b52 <time_to_tm+0x140>
    6b44:	0f 5f       	subi	r16, 0xFF	; 255
    6b46:	1f 4f       	sbci	r17, 0xFF	; 255
    6b48:	84 1a       	sub	r8, r20
    6b4a:	95 0a       	sbc	r9, r21
    6b4c:	a6 0a       	sbc	r10, r22
    6b4e:	b7 0a       	sbc	r11, r23
    6b50:	e7 cf       	rjmp	.-50     	; 0x6b20 <time_to_tm+0x10e>
    6b52:	0c 56       	subi	r16, 0x6C	; 108
    6b54:	17 40       	sbci	r17, 0x07	; 7
    6b56:	1b 87       	std	Y+11, r17	; 0x0b
    6b58:	0a 87       	std	Y+10, r16	; 0x0a
    6b5a:	9f 86       	std	Y+15, r9	; 0x0f
    6b5c:	8e 86       	std	Y+14, r8	; 0x0e
    6b5e:	e8 e8       	ldi	r30, 0x88	; 136
    6b60:	f3 e0       	ldi	r31, 0x03	; 3
    6b62:	20 e0       	ldi	r18, 0x00	; 0
    6b64:	30 e0       	ldi	r19, 0x00	; 0
    6b66:	18 14       	cp	r1, r8
    6b68:	19 04       	cpc	r1, r9
    6b6a:	1a 04       	cpc	r1, r10
    6b6c:	1b 04       	cpc	r1, r11
    6b6e:	e4 f4       	brge	.+56     	; 0x6ba8 <time_to_tm+0x196>
    6b70:	2c 30       	cpi	r18, 0x0C	; 12
    6b72:	31 05       	cpc	r19, r1
    6b74:	c9 f0       	breq	.+50     	; 0x6ba8 <time_to_tm+0x196>
    6b76:	41 91       	ld	r20, Z+
    6b78:	51 91       	ld	r21, Z+
    6b7a:	21 30       	cpi	r18, 0x01	; 1
    6b7c:	31 05       	cpc	r19, r1
    6b7e:	21 f4       	brne	.+8      	; 0x6b88 <time_to_tm+0x176>
    6b80:	00 97       	sbiw	r24, 0x00	; 0
    6b82:	11 f0       	breq	.+4      	; 0x6b88 <time_to_tm+0x176>
    6b84:	4f 5f       	subi	r20, 0xFF	; 255
    6b86:	5f 4f       	sbci	r21, 0xFF	; 255
    6b88:	05 2e       	mov	r0, r21
    6b8a:	00 0c       	add	r0, r0
    6b8c:	66 0b       	sbc	r22, r22
    6b8e:	77 0b       	sbc	r23, r23
    6b90:	84 16       	cp	r8, r20
    6b92:	95 06       	cpc	r9, r21
    6b94:	a6 06       	cpc	r10, r22
    6b96:	b7 06       	cpc	r11, r23
    6b98:	3c f0       	brlt	.+14     	; 0x6ba8 <time_to_tm+0x196>
    6b9a:	84 1a       	sub	r8, r20
    6b9c:	95 0a       	sbc	r9, r21
    6b9e:	a6 0a       	sbc	r10, r22
    6ba0:	b7 0a       	sbc	r11, r23
    6ba2:	2f 5f       	subi	r18, 0xFF	; 255
    6ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba6:	df cf       	rjmp	.-66     	; 0x6b66 <time_to_tm+0x154>
    6ba8:	39 87       	std	Y+9, r19	; 0x09
    6baa:	28 87       	std	Y+8, r18	; 0x08
    6bac:	af ef       	ldi	r26, 0xFF	; 255
    6bae:	8a 1a       	sub	r8, r26
    6bb0:	9a 0a       	sbc	r9, r26
    6bb2:	9f 82       	std	Y+7, r9	; 0x07
    6bb4:	8e 82       	std	Y+6, r8	; 0x06
    6bb6:	b6 01       	movw	r22, r12
    6bb8:	c7 01       	movw	r24, r14
    6bba:	04 c0       	rjmp	.+8      	; 0x6bc4 <time_to_tm+0x1b2>
    6bbc:	6f ef       	ldi	r22, 0xFF	; 255
    6bbe:	7f ef       	ldi	r23, 0xFF	; 255
    6bc0:	8f ef       	ldi	r24, 0xFF	; 255
    6bc2:	9f ef       	ldi	r25, 0xFF	; 255
    6bc4:	cd b7       	in	r28, 0x3d	; 61
    6bc6:	de b7       	in	r29, 0x3e	; 62
    6bc8:	e0 e1       	ldi	r30, 0x10	; 16
    6bca:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x4>

00006bce <gmtime_r>:
    6bce:	0f 93       	push	r16
    6bd0:	1f 93       	push	r17
    6bd2:	cf 93       	push	r28
    6bd4:	df 93       	push	r29
    6bd6:	eb 01       	movw	r28, r22
    6bd8:	fc 01       	movw	r30, r24
    6bda:	60 81       	ld	r22, Z
    6bdc:	71 81       	ldd	r23, Z+1	; 0x01
    6bde:	82 81       	ldd	r24, Z+2	; 0x02
    6be0:	93 81       	ldd	r25, Z+3	; 0x03
    6be2:	8e 01       	movw	r16, r28
    6be4:	20 e0       	ldi	r18, 0x00	; 0
    6be6:	30 e0       	ldi	r19, 0x00	; 0
    6be8:	a9 01       	movw	r20, r18
    6bea:	13 df       	rcall	.-474    	; 0x6a12 <time_to_tm>
    6bec:	ce 01       	movw	r24, r28
    6bee:	df 91       	pop	r29
    6bf0:	cf 91       	pop	r28
    6bf2:	1f 91       	pop	r17
    6bf4:	0f 91       	pop	r16
    6bf6:	08 95       	ret

00006bf8 <gmtime>:
    6bf8:	2e ec       	ldi	r18, 0xCE	; 206
    6bfa:	37 e1       	ldi	r19, 0x17	; 23
    6bfc:	30 93 e5 17 	sts	0x17E5, r19	; 0x8017e5 <p.3677+0x1>
    6c00:	20 93 e4 17 	sts	0x17E4, r18	; 0x8017e4 <p.3677>
    6c04:	b9 01       	movw	r22, r18
    6c06:	e3 df       	rcall	.-58     	; 0x6bce <gmtime_r>
    6c08:	8e ec       	ldi	r24, 0xCE	; 206
    6c0a:	97 e1       	ldi	r25, 0x17	; 23
    6c0c:	08 95       	ret

00006c0e <gettimezone>:
    6c0e:	e8 e7       	ldi	r30, 0x78	; 120
    6c10:	fa e1       	ldi	r31, 0x1A	; 26
    6c12:	20 81       	ld	r18, Z
    6c14:	31 81       	ldd	r19, Z+1	; 0x01
    6c16:	dc 01       	movw	r26, r24
    6c18:	2d 93       	st	X+, r18
    6c1a:	3c 93       	st	X, r19
    6c1c:	22 81       	ldd	r18, Z+2	; 0x02
    6c1e:	33 81       	ldd	r19, Z+3	; 0x03
    6c20:	fc 01       	movw	r30, r24
    6c22:	33 83       	std	Z+3, r19	; 0x03
    6c24:	22 83       	std	Z+2, r18	; 0x02
    6c26:	80 e0       	ldi	r24, 0x00	; 0
    6c28:	90 e0       	ldi	r25, 0x00	; 0
    6c2a:	08 95       	ret

00006c2c <settimezone>:
    6c2c:	cf 93       	push	r28
    6c2e:	df 93       	push	r29
    6c30:	ec 01       	movw	r28, r24
    6c32:	28 81       	ld	r18, Y
    6c34:	39 81       	ldd	r19, Y+1	; 0x01
    6c36:	e8 e7       	ldi	r30, 0x78	; 120
    6c38:	fa e1       	ldi	r31, 0x1A	; 26
    6c3a:	31 83       	std	Z+1, r19	; 0x01
    6c3c:	20 83       	st	Z, r18
    6c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c40:	9b 81       	ldd	r25, Y+3	; 0x03
    6c42:	93 83       	std	Z+3, r25	; 0x03
    6c44:	82 83       	std	Z+2, r24	; 0x02
    6c46:	80 e0       	ldi	r24, 0x00	; 0
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	df 91       	pop	r29
    6c4c:	cf 91       	pop	r28
    6c4e:	08 95       	ret

00006c50 <gettimeofday>:
    6c50:	a8 e0       	ldi	r26, 0x08	; 8
    6c52:	b0 e0       	ldi	r27, 0x00	; 0
    6c54:	ee e2       	ldi	r30, 0x2E	; 46
    6c56:	f6 e3       	ldi	r31, 0x36	; 54
    6c58:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
    6c5c:	8c 01       	movw	r16, r24
    6c5e:	7b 01       	movw	r14, r22
    6c60:	be 01       	movw	r22, r28
    6c62:	6f 5f       	subi	r22, 0xFF	; 255
    6c64:	7f 4f       	sbci	r23, 0xFF	; 255
    6c66:	80 e0       	ldi	r24, 0x00	; 0
    6c68:	90 e0       	ldi	r25, 0x00	; 0
    6c6a:	dc db       	rcall	.-2120   	; 0x6424 <clock_gettime>
    6c6c:	89 81       	ldd	r24, Y+1	; 0x01
    6c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    6c70:	ab 81       	ldd	r26, Y+3	; 0x03
    6c72:	bc 81       	ldd	r27, Y+4	; 0x04
    6c74:	f8 01       	movw	r30, r16
    6c76:	80 83       	st	Z, r24
    6c78:	91 83       	std	Z+1, r25	; 0x01
    6c7a:	a2 83       	std	Z+2, r26	; 0x02
    6c7c:	b3 83       	std	Z+3, r27	; 0x03
    6c7e:	6d 81       	ldd	r22, Y+5	; 0x05
    6c80:	7e 81       	ldd	r23, Y+6	; 0x06
    6c82:	8f 81       	ldd	r24, Y+7	; 0x07
    6c84:	98 85       	ldd	r25, Y+8	; 0x08
    6c86:	28 ee       	ldi	r18, 0xE8	; 232
    6c88:	33 e0       	ldi	r19, 0x03	; 3
    6c8a:	40 e0       	ldi	r20, 0x00	; 0
    6c8c:	50 e0       	ldi	r21, 0x00	; 0
    6c8e:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
    6c92:	f8 01       	movw	r30, r16
    6c94:	24 83       	std	Z+4, r18	; 0x04
    6c96:	35 83       	std	Z+5, r19	; 0x05
    6c98:	46 83       	std	Z+6, r20	; 0x06
    6c9a:	57 83       	std	Z+7, r21	; 0x07
    6c9c:	c7 01       	movw	r24, r14
    6c9e:	b7 df       	rcall	.-146    	; 0x6c0e <gettimezone>
    6ca0:	80 e0       	ldi	r24, 0x00	; 0
    6ca2:	90 e0       	ldi	r25, 0x00	; 0
    6ca4:	28 96       	adiw	r28, 0x08	; 8
    6ca6:	e6 e0       	ldi	r30, 0x06	; 6
    6ca8:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00006cac <time>:
    6cac:	cf 93       	push	r28
    6cae:	df 93       	push	r29
    6cb0:	ec 01       	movw	r28, r24
    6cb2:	60 eb       	ldi	r22, 0xB0	; 176
    6cb4:	77 e1       	ldi	r23, 0x17	; 23
    6cb6:	80 e0       	ldi	r24, 0x00	; 0
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	b4 db       	rcall	.-2200   	; 0x6424 <clock_gettime>
    6cbc:	20 97       	sbiw	r28, 0x00	; 0
    6cbe:	61 f0       	breq	.+24     	; 0x6cd8 <time+0x2c>
    6cc0:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <ts.3755>
    6cc4:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    6cc8:	a0 91 b2 17 	lds	r26, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    6ccc:	b0 91 b3 17 	lds	r27, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    6cd0:	88 83       	st	Y, r24
    6cd2:	99 83       	std	Y+1, r25	; 0x01
    6cd4:	aa 83       	std	Y+2, r26	; 0x02
    6cd6:	bb 83       	std	Y+3, r27	; 0x03
    6cd8:	60 91 b0 17 	lds	r22, 0x17B0	; 0x8017b0 <ts.3755>
    6cdc:	70 91 b1 17 	lds	r23, 0x17B1	; 0x8017b1 <ts.3755+0x1>
    6ce0:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <ts.3755+0x2>
    6ce4:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <ts.3755+0x3>
    6ce8:	df 91       	pop	r29
    6cea:	cf 91       	pop	r28
    6cec:	08 95       	ret

00006cee <is_dst>:
    6cee:	cf 92       	push	r12
    6cf0:	df 92       	push	r13
    6cf2:	ef 92       	push	r14
    6cf4:	ff 92       	push	r15
    6cf6:	6b 01       	movw	r12, r22
    6cf8:	7c 01       	movw	r14, r24
    6cfa:	05 d4       	rcall	.+2058   	; 0x7506 <set_dst>
    6cfc:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst>
    6d00:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x1>
    6d04:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0x2>
    6d08:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0x3>
    6d0c:	c8 16       	cp	r12, r24
    6d0e:	d9 06       	cpc	r13, r25
    6d10:	ea 06       	cpc	r14, r26
    6d12:	fb 06       	cpc	r15, r27
    6d14:	88 f0       	brcs	.+34     	; 0x6d38 <is_dst+0x4a>
    6d16:	81 e0       	ldi	r24, 0x01	; 1
    6d18:	90 e0       	ldi	r25, 0x00	; 0
    6d1a:	40 91 80 1a 	lds	r20, 0x1A80	; 0x801a80 <dst+0x4>
    6d1e:	50 91 81 1a 	lds	r21, 0x1A81	; 0x801a81 <dst+0x5>
    6d22:	60 91 82 1a 	lds	r22, 0x1A82	; 0x801a82 <dst+0x6>
    6d26:	70 91 83 1a 	lds	r23, 0x1A83	; 0x801a83 <dst+0x7>
    6d2a:	4c 15       	cp	r20, r12
    6d2c:	5d 05       	cpc	r21, r13
    6d2e:	6e 05       	cpc	r22, r14
    6d30:	7f 05       	cpc	r23, r15
    6d32:	20 f4       	brcc	.+8      	; 0x6d3c <is_dst+0x4e>
    6d34:	80 e0       	ldi	r24, 0x00	; 0
    6d36:	02 c0       	rjmp	.+4      	; 0x6d3c <is_dst+0x4e>
    6d38:	80 e0       	ldi	r24, 0x00	; 0
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	ff 90       	pop	r15
    6d3e:	ef 90       	pop	r14
    6d40:	df 90       	pop	r13
    6d42:	cf 90       	pop	r12
    6d44:	08 95       	ret

00006d46 <localtime_r>:
    6d46:	4f 92       	push	r4
    6d48:	5f 92       	push	r5
    6d4a:	6f 92       	push	r6
    6d4c:	7f 92       	push	r7
    6d4e:	af 92       	push	r10
    6d50:	bf 92       	push	r11
    6d52:	cf 92       	push	r12
    6d54:	df 92       	push	r13
    6d56:	ef 92       	push	r14
    6d58:	ff 92       	push	r15
    6d5a:	0f 93       	push	r16
    6d5c:	1f 93       	push	r17
    6d5e:	cf 93       	push	r28
    6d60:	df 93       	push	r29
    6d62:	00 d0       	rcall	.+0      	; 0x6d64 <localtime_r+0x1e>
    6d64:	00 d0       	rcall	.+0      	; 0x6d66 <localtime_r+0x20>
    6d66:	cd b7       	in	r28, 0x3d	; 61
    6d68:	de b7       	in	r29, 0x3e	; 62
    6d6a:	5b 01       	movw	r10, r22
    6d6c:	fc 01       	movw	r30, r24
    6d6e:	40 80       	ld	r4, Z
    6d70:	51 80       	ldd	r5, Z+1	; 0x01
    6d72:	62 80       	ldd	r6, Z+2	; 0x02
    6d74:	73 80       	ldd	r7, Z+3	; 0x03
    6d76:	ce 01       	movw	r24, r28
    6d78:	01 96       	adiw	r24, 0x01	; 1
    6d7a:	49 df       	rcall	.-366    	; 0x6c0e <gettimezone>
    6d7c:	a9 81       	ldd	r26, Y+1	; 0x01
    6d7e:	ba 81       	ldd	r27, Y+2	; 0x02
    6d80:	2c e3       	ldi	r18, 0x3C	; 60
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	0e 94 c6 e2 	call	0x1c58c	; 0x1c58c <__usmulhisi3>
    6d88:	6b 01       	movw	r12, r22
    6d8a:	7c 01       	movw	r14, r24
    6d8c:	c3 01       	movw	r24, r6
    6d8e:	b2 01       	movw	r22, r4
    6d90:	6c 19       	sub	r22, r12
    6d92:	7d 09       	sbc	r23, r13
    6d94:	8e 09       	sbc	r24, r14
    6d96:	9f 09       	sbc	r25, r15
    6d98:	aa df       	rcall	.-172    	; 0x6cee <is_dst>
    6d9a:	89 2b       	or	r24, r25
    6d9c:	31 f0       	breq	.+12     	; 0x6daa <localtime_r+0x64>
    6d9e:	f0 e1       	ldi	r31, 0x10	; 16
    6da0:	cf 1a       	sub	r12, r31
    6da2:	fe e0       	ldi	r31, 0x0E	; 14
    6da4:	df 0a       	sbc	r13, r31
    6da6:	e1 08       	sbc	r14, r1
    6da8:	f1 08       	sbc	r15, r1
    6daa:	85 01       	movw	r16, r10
    6dac:	a7 01       	movw	r20, r14
    6dae:	96 01       	movw	r18, r12
    6db0:	c3 01       	movw	r24, r6
    6db2:	b2 01       	movw	r22, r4
    6db4:	2e de       	rcall	.-932    	; 0x6a12 <time_to_tm>
    6db6:	c5 01       	movw	r24, r10
    6db8:	0f 90       	pop	r0
    6dba:	0f 90       	pop	r0
    6dbc:	0f 90       	pop	r0
    6dbe:	0f 90       	pop	r0
    6dc0:	df 91       	pop	r29
    6dc2:	cf 91       	pop	r28
    6dc4:	1f 91       	pop	r17
    6dc6:	0f 91       	pop	r16
    6dc8:	ff 90       	pop	r15
    6dca:	ef 90       	pop	r14
    6dcc:	df 90       	pop	r13
    6dce:	cf 90       	pop	r12
    6dd0:	bf 90       	pop	r11
    6dd2:	af 90       	pop	r10
    6dd4:	7f 90       	pop	r7
    6dd6:	6f 90       	pop	r6
    6dd8:	5f 90       	pop	r5
    6dda:	4f 90       	pop	r4
    6ddc:	08 95       	ret

00006dde <localtime>:
    6dde:	68 eb       	ldi	r22, 0xB8	; 184
    6de0:	77 e1       	ldi	r23, 0x17	; 23
    6de2:	b1 cf       	rjmp	.-158    	; 0x6d46 <localtime_r>
    6de4:	08 95       	ret

00006de6 <normalize>:
    6de6:	aa e0       	ldi	r26, 0x0A	; 10
    6de8:	b0 e0       	ldi	r27, 0x00	; 0
    6dea:	e9 ef       	ldi	r30, 0xF9	; 249
    6dec:	f6 e3       	ldi	r31, 0x36	; 54
    6dee:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    6df2:	7c 01       	movw	r14, r24
    6df4:	7a 87       	std	Y+10, r23	; 0x0a
    6df6:	69 87       	std	Y+9, r22	; 0x09
    6df8:	f7 01       	movw	r30, r14
    6dfa:	80 81       	ld	r24, Z
    6dfc:	91 81       	ldd	r25, Z+1	; 0x01
    6dfe:	8c 33       	cpi	r24, 0x3C	; 60
    6e00:	91 05       	cpc	r25, r1
    6e02:	5c f0       	brlt	.+22     	; 0x6e1a <normalize+0x34>
    6e04:	f7 01       	movw	r30, r14
    6e06:	22 81       	ldd	r18, Z+2	; 0x02
    6e08:	33 81       	ldd	r19, Z+3	; 0x03
    6e0a:	2f 5f       	subi	r18, 0xFF	; 255
    6e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6e0e:	33 83       	std	Z+3, r19	; 0x03
    6e10:	22 83       	std	Z+2, r18	; 0x02
    6e12:	cc 97       	sbiw	r24, 0x3c	; 60
    6e14:	91 83       	std	Z+1, r25	; 0x01
    6e16:	80 83       	st	Z, r24
    6e18:	ef cf       	rjmp	.-34     	; 0x6df8 <normalize+0x12>
    6e1a:	f7 01       	movw	r30, r14
    6e1c:	01 90       	ld	r0, Z+
    6e1e:	f0 81       	ld	r31, Z
    6e20:	e0 2d       	mov	r30, r0
    6e22:	fe 83       	std	Y+6, r31	; 0x06
    6e24:	ed 83       	std	Y+5, r30	; 0x05
    6e26:	f7 ff       	sbrs	r31, 7
    6e28:	0d c0       	rjmp	.+26     	; 0x6e44 <normalize+0x5e>
    6e2a:	f7 01       	movw	r30, r14
    6e2c:	82 81       	ldd	r24, Z+2	; 0x02
    6e2e:	93 81       	ldd	r25, Z+3	; 0x03
    6e30:	01 97       	sbiw	r24, 0x01	; 1
    6e32:	93 83       	std	Z+3, r25	; 0x03
    6e34:	82 83       	std	Z+2, r24	; 0x02
    6e36:	6d 81       	ldd	r22, Y+5	; 0x05
    6e38:	7e 81       	ldd	r23, Y+6	; 0x06
    6e3a:	64 5c       	subi	r22, 0xC4	; 196
    6e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3e:	71 83       	std	Z+1, r23	; 0x01
    6e40:	60 83       	st	Z, r22
    6e42:	eb cf       	rjmp	.-42     	; 0x6e1a <normalize+0x34>
    6e44:	f7 01       	movw	r30, r14
    6e46:	82 81       	ldd	r24, Z+2	; 0x02
    6e48:	93 81       	ldd	r25, Z+3	; 0x03
    6e4a:	8c 33       	cpi	r24, 0x3C	; 60
    6e4c:	91 05       	cpc	r25, r1
    6e4e:	5c f0       	brlt	.+22     	; 0x6e66 <normalize+0x80>
    6e50:	f7 01       	movw	r30, r14
    6e52:	24 81       	ldd	r18, Z+4	; 0x04
    6e54:	35 81       	ldd	r19, Z+5	; 0x05
    6e56:	2f 5f       	subi	r18, 0xFF	; 255
    6e58:	3f 4f       	sbci	r19, 0xFF	; 255
    6e5a:	35 83       	std	Z+5, r19	; 0x05
    6e5c:	24 83       	std	Z+4, r18	; 0x04
    6e5e:	cc 97       	sbiw	r24, 0x3c	; 60
    6e60:	93 83       	std	Z+3, r25	; 0x03
    6e62:	82 83       	std	Z+2, r24	; 0x02
    6e64:	ef cf       	rjmp	.-34     	; 0x6e44 <normalize+0x5e>
    6e66:	f7 01       	movw	r30, r14
    6e68:	22 80       	ldd	r2, Z+2	; 0x02
    6e6a:	33 80       	ldd	r3, Z+3	; 0x03
    6e6c:	37 fe       	sbrs	r3, 7
    6e6e:	0d c0       	rjmp	.+26     	; 0x6e8a <normalize+0xa4>
    6e70:	f7 01       	movw	r30, r14
    6e72:	84 81       	ldd	r24, Z+4	; 0x04
    6e74:	95 81       	ldd	r25, Z+5	; 0x05
    6e76:	01 97       	sbiw	r24, 0x01	; 1
    6e78:	95 83       	std	Z+5, r25	; 0x05
    6e7a:	84 83       	std	Z+4, r24	; 0x04
    6e7c:	fc e3       	ldi	r31, 0x3C	; 60
    6e7e:	2f 0e       	add	r2, r31
    6e80:	31 1c       	adc	r3, r1
    6e82:	f7 01       	movw	r30, r14
    6e84:	33 82       	std	Z+3, r3	; 0x03
    6e86:	22 82       	std	Z+2, r2	; 0x02
    6e88:	ee cf       	rjmp	.-36     	; 0x6e66 <normalize+0x80>
    6e8a:	f7 01       	movw	r30, r14
    6e8c:	84 81       	ldd	r24, Z+4	; 0x04
    6e8e:	95 81       	ldd	r25, Z+5	; 0x05
    6e90:	88 31       	cpi	r24, 0x18	; 24
    6e92:	91 05       	cpc	r25, r1
    6e94:	5c f0       	brlt	.+22     	; 0x6eac <normalize+0xc6>
    6e96:	f7 01       	movw	r30, r14
    6e98:	26 81       	ldd	r18, Z+6	; 0x06
    6e9a:	37 81       	ldd	r19, Z+7	; 0x07
    6e9c:	2f 5f       	subi	r18, 0xFF	; 255
    6e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6ea0:	37 83       	std	Z+7, r19	; 0x07
    6ea2:	26 83       	std	Z+6, r18	; 0x06
    6ea4:	48 97       	sbiw	r24, 0x18	; 24
    6ea6:	95 83       	std	Z+5, r25	; 0x05
    6ea8:	84 83       	std	Z+4, r24	; 0x04
    6eaa:	ef cf       	rjmp	.-34     	; 0x6e8a <normalize+0xa4>
    6eac:	f7 01       	movw	r30, r14
    6eae:	04 81       	ldd	r16, Z+4	; 0x04
    6eb0:	15 81       	ldd	r17, Z+5	; 0x05
    6eb2:	17 ff       	sbrs	r17, 7
    6eb4:	0b c0       	rjmp	.+22     	; 0x6ecc <normalize+0xe6>
    6eb6:	f7 01       	movw	r30, r14
    6eb8:	86 81       	ldd	r24, Z+6	; 0x06
    6eba:	97 81       	ldd	r25, Z+7	; 0x07
    6ebc:	01 97       	sbiw	r24, 0x01	; 1
    6ebe:	97 83       	std	Z+7, r25	; 0x07
    6ec0:	86 83       	std	Z+6, r24	; 0x06
    6ec2:	08 5e       	subi	r16, 0xE8	; 232
    6ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    6ec6:	15 83       	std	Z+5, r17	; 0x05
    6ec8:	04 83       	std	Z+4, r16	; 0x04
    6eca:	f0 cf       	rjmp	.-32     	; 0x6eac <normalize+0xc6>
    6ecc:	f7 01       	movw	r30, r14
    6ece:	80 85       	ldd	r24, Z+8	; 0x08
    6ed0:	91 85       	ldd	r25, Z+9	; 0x09
    6ed2:	8c 30       	cpi	r24, 0x0C	; 12
    6ed4:	91 05       	cpc	r25, r1
    6ed6:	5c f0       	brlt	.+22     	; 0x6eee <normalize+0x108>
    6ed8:	f7 01       	movw	r30, r14
    6eda:	22 85       	ldd	r18, Z+10	; 0x0a
    6edc:	33 85       	ldd	r19, Z+11	; 0x0b
    6ede:	2f 5f       	subi	r18, 0xFF	; 255
    6ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ee2:	33 87       	std	Z+11, r19	; 0x0b
    6ee4:	22 87       	std	Z+10, r18	; 0x0a
    6ee6:	0c 97       	sbiw	r24, 0x0c	; 12
    6ee8:	91 87       	std	Z+9, r25	; 0x09
    6eea:	80 87       	std	Z+8, r24	; 0x08
    6eec:	ef cf       	rjmp	.-34     	; 0x6ecc <normalize+0xe6>
    6eee:	f7 01       	movw	r30, r14
    6ef0:	80 85       	ldd	r24, Z+8	; 0x08
    6ef2:	91 85       	ldd	r25, Z+9	; 0x09
    6ef4:	97 ff       	sbrs	r25, 7
    6ef6:	2d c0       	rjmp	.+90     	; 0x6f52 <normalize+0x16c>
    6ef8:	f7 01       	movw	r30, r14
    6efa:	22 85       	ldd	r18, Z+10	; 0x0a
    6efc:	33 85       	ldd	r19, Z+11	; 0x0b
    6efe:	21 50       	subi	r18, 0x01	; 1
    6f00:	31 09       	sbc	r19, r1
    6f02:	33 87       	std	Z+11, r19	; 0x0b
    6f04:	22 87       	std	Z+10, r18	; 0x0a
    6f06:	0c 96       	adiw	r24, 0x0c	; 12
    6f08:	91 87       	std	Z+9, r25	; 0x09
    6f0a:	80 87       	std	Z+8, r24	; 0x08
    6f0c:	f0 cf       	rjmp	.-32     	; 0x6eee <normalize+0x108>
    6f0e:	f7 01       	movw	r30, r14
    6f10:	c6 80       	ldd	r12, Z+6	; 0x06
    6f12:	d7 80       	ldd	r13, Z+7	; 0x07
    6f14:	a0 84       	ldd	r10, Z+8	; 0x08
    6f16:	b1 84       	ldd	r11, Z+9	; 0x09
    6f18:	b4 01       	movw	r22, r8
    6f1a:	c5 01       	movw	r24, r10
    6f1c:	59 dd       	rcall	.-1358   	; 0x69d0 <Days_Per_Month>
    6f1e:	8c 15       	cp	r24, r12
    6f20:	9d 05       	cpc	r25, r13
    6f22:	84 f5       	brge	.+96     	; 0x6f84 <normalize+0x19e>
    6f24:	c8 1a       	sub	r12, r24
    6f26:	d9 0a       	sbc	r13, r25
    6f28:	f7 01       	movw	r30, r14
    6f2a:	d7 82       	std	Z+7, r13	; 0x07
    6f2c:	c6 82       	std	Z+6, r12	; 0x06
    6f2e:	c5 01       	movw	r24, r10
    6f30:	01 96       	adiw	r24, 0x01	; 1
    6f32:	91 87       	std	Z+9, r25	; 0x09
    6f34:	80 87       	std	Z+8, r24	; 0x08
    6f36:	0c 97       	sbiw	r24, 0x0c	; 12
    6f38:	54 f3       	brlt	.-44     	; 0x6f0e <normalize+0x128>
    6f3a:	fb e0       	ldi	r31, 0x0B	; 11
    6f3c:	af 1a       	sub	r10, r31
    6f3e:	b1 08       	sbc	r11, r1
    6f40:	f7 01       	movw	r30, r14
    6f42:	b1 86       	std	Z+9, r11	; 0x09
    6f44:	a0 86       	std	Z+8, r10	; 0x08
    6f46:	ff ef       	ldi	r31, 0xFF	; 255
    6f48:	8f 1a       	sub	r8, r31
    6f4a:	9f 0a       	sbc	r9, r31
    6f4c:	f7 01       	movw	r30, r14
    6f4e:	93 86       	std	Z+11, r9	; 0x0b
    6f50:	82 86       	std	Z+10, r8	; 0x0a
    6f52:	f7 01       	movw	r30, r14
    6f54:	82 84       	ldd	r8, Z+10	; 0x0a
    6f56:	93 84       	ldd	r9, Z+11	; 0x0b
    6f58:	da cf       	rjmp	.-76     	; 0x6f0e <normalize+0x128>
    6f5a:	f7 01       	movw	r30, r14
    6f5c:	80 85       	ldd	r24, Z+8	; 0x08
    6f5e:	91 85       	ldd	r25, Z+9	; 0x09
    6f60:	9c 01       	movw	r18, r24
    6f62:	21 50       	subi	r18, 0x01	; 1
    6f64:	31 09       	sbc	r19, r1
    6f66:	37 fd       	sbrc	r19, 7
    6f68:	16 c0       	rjmp	.+44     	; 0x6f96 <normalize+0x1b0>
    6f6a:	31 87       	std	Z+9, r19	; 0x09
    6f6c:	20 87       	std	Z+8, r18	; 0x08
    6f6e:	f7 01       	movw	r30, r14
    6f70:	62 85       	ldd	r22, Z+10	; 0x0a
    6f72:	73 85       	ldd	r23, Z+11	; 0x0b
    6f74:	80 85       	ldd	r24, Z+8	; 0x08
    6f76:	91 85       	ldd	r25, Z+9	; 0x09
    6f78:	2b dd       	rcall	.-1450   	; 0x69d0 <Days_Per_Month>
    6f7a:	88 0d       	add	r24, r8
    6f7c:	99 1d       	adc	r25, r9
    6f7e:	f7 01       	movw	r30, r14
    6f80:	97 83       	std	Z+7, r25	; 0x07
    6f82:	86 83       	std	Z+6, r24	; 0x06
    6f84:	f7 01       	movw	r30, r14
    6f86:	86 80       	ldd	r8, Z+6	; 0x06
    6f88:	97 80       	ldd	r9, Z+7	; 0x07
    6f8a:	a2 84       	ldd	r10, Z+10	; 0x0a
    6f8c:	b3 84       	ldd	r11, Z+11	; 0x0b
    6f8e:	18 14       	cp	r1, r8
    6f90:	19 04       	cpc	r1, r9
    6f92:	1c f7       	brge	.-58     	; 0x6f5a <normalize+0x174>
    6f94:	0b c0       	rjmp	.+22     	; 0x6fac <normalize+0x1c6>
    6f96:	0b 96       	adiw	r24, 0x0b	; 11
    6f98:	f7 01       	movw	r30, r14
    6f9a:	91 87       	std	Z+9, r25	; 0x09
    6f9c:	80 87       	std	Z+8, r24	; 0x08
    6f9e:	f1 e0       	ldi	r31, 0x01	; 1
    6fa0:	af 1a       	sub	r10, r31
    6fa2:	b1 08       	sbc	r11, r1
    6fa4:	f7 01       	movw	r30, r14
    6fa6:	b3 86       	std	Z+11, r11	; 0x0b
    6fa8:	a2 86       	std	Z+10, r10	; 0x0a
    6faa:	e1 cf       	rjmp	.-62     	; 0x6f6e <normalize+0x188>
    6fac:	a5 01       	movw	r20, r10
    6fae:	44 59       	subi	r20, 0x94	; 148
    6fb0:	58 4f       	sbci	r21, 0xF8	; 248
    6fb2:	58 87       	std	Y+8, r21	; 0x08
    6fb4:	4f 83       	std	Y+7, r20	; 0x07
    6fb6:	35 01       	movw	r6, r10
    6fb8:	56 e4       	ldi	r21, 0x46	; 70
    6fba:	65 1a       	sub	r6, r21
    6fbc:	71 08       	sbc	r7, r1
    6fbe:	89 e8       	ldi	r24, 0x89	; 137
    6fc0:	68 16       	cp	r6, r24
    6fc2:	71 04       	cpc	r7, r1
    6fc4:	08 f0       	brcs	.+2      	; 0x6fc8 <normalize+0x1e2>
    6fc6:	9b c0       	rjmp	.+310    	; 0x70fe <normalize+0x318>
    6fc8:	c0 84       	ldd	r12, Z+8	; 0x08
    6fca:	d1 84       	ldd	r13, Z+9	; 0x09
    6fcc:	9c e0       	ldi	r25, 0x0C	; 12
    6fce:	c9 16       	cp	r12, r25
    6fd0:	d1 04       	cpc	r13, r1
    6fd2:	08 f0       	brcs	.+2      	; 0x6fd6 <normalize+0x1f0>
    6fd4:	94 c0       	rjmp	.+296    	; 0x70fe <normalize+0x318>
    6fd6:	24 01       	movw	r4, r8
    6fd8:	e1 e0       	ldi	r30, 0x01	; 1
    6fda:	4e 1a       	sub	r4, r30
    6fdc:	51 08       	sbc	r5, r1
    6fde:	6f 81       	ldd	r22, Y+7	; 0x07
    6fe0:	78 85       	ldd	r23, Y+8	; 0x08
    6fe2:	c6 01       	movw	r24, r12
    6fe4:	f5 dc       	rcall	.-1558   	; 0x69d0 <Days_Per_Month>
    6fe6:	48 16       	cp	r4, r24
    6fe8:	59 06       	cpc	r5, r25
    6fea:	0c f0       	brlt	.+2      	; 0x6fee <normalize+0x208>
    6fec:	88 c0       	rjmp	.+272    	; 0x70fe <normalize+0x318>
    6fee:	08 31       	cpi	r16, 0x18	; 24
    6ff0:	11 05       	cpc	r17, r1
    6ff2:	0c f0       	brlt	.+2      	; 0x6ff6 <normalize+0x210>
    6ff4:	84 c0       	rjmp	.+264    	; 0x70fe <normalize+0x318>
    6ff6:	fc e3       	ldi	r31, 0x3C	; 60
    6ff8:	2f 16       	cp	r2, r31
    6ffa:	31 04       	cpc	r3, r1
    6ffc:	0c f0       	brlt	.+2      	; 0x7000 <normalize+0x21a>
    6ffe:	7f c0       	rjmp	.+254    	; 0x70fe <normalize+0x318>
    7000:	4d 81       	ldd	r20, Y+5	; 0x05
    7002:	5e 81       	ldd	r21, Y+6	; 0x06
    7004:	4c 33       	cpi	r20, 0x3C	; 60
    7006:	51 05       	cpc	r21, r1
    7008:	0c f0       	brlt	.+2      	; 0x700c <normalize+0x226>
    700a:	79 c0       	rjmp	.+242    	; 0x70fe <normalize+0x318>
    700c:	2d e6       	ldi	r18, 0x6D	; 109
    700e:	31 e0       	ldi	r19, 0x01	; 1
    7010:	d3 01       	movw	r26, r6
    7012:	0e 94 c6 e2 	call	0x1c58c	; 0x1c58c <__usmulhisi3>
    7016:	f6 01       	movw	r30, r12
    7018:	ee 0f       	add	r30, r30
    701a:	ff 1f       	adc	r31, r31
    701c:	e0 56       	subi	r30, 0x60	; 96
    701e:	fc 4f       	sbci	r31, 0xFC	; 252
    7020:	20 81       	ld	r18, Z
    7022:	31 81       	ldd	r19, Z+1	; 0x01
    7024:	dc 01       	movw	r26, r24
    7026:	cb 01       	movw	r24, r22
    7028:	82 0f       	add	r24, r18
    702a:	93 1f       	adc	r25, r19
    702c:	a1 1d       	adc	r26, r1
    702e:	b1 1d       	adc	r27, r1
    7030:	05 2c       	mov	r0, r5
    7032:	00 0c       	add	r0, r0
    7034:	66 08       	sbc	r6, r6
    7036:	77 08       	sbc	r7, r7
    7038:	48 0e       	add	r4, r24
    703a:	59 1e       	adc	r5, r25
    703c:	6a 1e       	adc	r6, r26
    703e:	7b 1e       	adc	r7, r27
    7040:	1a 14       	cp	r1, r10
    7042:	1b 04       	cpc	r1, r11
    7044:	1c f4       	brge	.+6      	; 0x704c <normalize+0x266>
    7046:	51 e0       	ldi	r21, 0x01	; 1
    7048:	a5 1a       	sub	r10, r21
    704a:	b1 08       	sbc	r11, r1
    704c:	45 01       	movw	r8, r10
    704e:	95 94       	asr	r9
    7050:	87 94       	ror	r8
    7052:	95 94       	asr	r9
    7054:	87 94       	ror	r8
    7056:	88 ec       	ldi	r24, 0xC8	; 200
    7058:	a8 16       	cp	r10, r24
    705a:	b1 04       	cpc	r11, r1
    705c:	1c f0       	brlt	.+6      	; 0x7064 <normalize+0x27e>
    705e:	91 e0       	ldi	r25, 0x01	; 1
    7060:	89 1a       	sub	r8, r25
    7062:	91 08       	sbc	r9, r1
    7064:	09 2c       	mov	r0, r9
    7066:	00 0c       	add	r0, r0
    7068:	aa 08       	sbc	r10, r10
    706a:	bb 08       	sbc	r11, r11
    706c:	84 0c       	add	r8, r4
    706e:	95 1c       	adc	r9, r5
    7070:	a6 1c       	adc	r10, r6
    7072:	b7 1c       	adc	r11, r7
    7074:	24 01       	movw	r4, r8
    7076:	35 01       	movw	r6, r10
    7078:	e1 e1       	ldi	r30, 0x11	; 17
    707a:	4e 1a       	sub	r4, r30
    707c:	51 08       	sbc	r5, r1
    707e:	61 08       	sbc	r6, r1
    7080:	71 08       	sbc	r7, r1
    7082:	f2 e0       	ldi	r31, 0x02	; 2
    7084:	cf 16       	cp	r12, r31
    7086:	d1 04       	cpc	r13, r1
    7088:	64 f0       	brlt	.+24     	; 0x70a2 <normalize+0x2bc>
    708a:	8f 81       	ldd	r24, Y+7	; 0x07
    708c:	98 85       	ldd	r25, Y+8	; 0x08
    708e:	7b dc       	rcall	.-1802   	; 0x6986 <IS_Leap>
    7090:	89 2b       	or	r24, r25
    7092:	39 f0       	breq	.+14     	; 0x70a2 <normalize+0x2bc>
    7094:	24 01       	movw	r4, r8
    7096:	35 01       	movw	r6, r10
    7098:	40 e1       	ldi	r20, 0x10	; 16
    709a:	44 1a       	sub	r4, r20
    709c:	51 08       	sbc	r5, r1
    709e:	61 08       	sbc	r6, r1
    70a0:	71 08       	sbc	r7, r1
    70a2:	a8 e1       	ldi	r26, 0x18	; 24
    70a4:	b0 e0       	ldi	r27, 0x00	; 0
    70a6:	a3 01       	movw	r20, r6
    70a8:	92 01       	movw	r18, r4
    70aa:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    70ae:	01 2e       	mov	r0, r17
    70b0:	00 0c       	add	r0, r0
    70b2:	22 0b       	sbc	r18, r18
    70b4:	33 0b       	sbc	r19, r19
    70b6:	a9 01       	movw	r20, r18
    70b8:	98 01       	movw	r18, r16
    70ba:	26 0f       	add	r18, r22
    70bc:	37 1f       	adc	r19, r23
    70be:	48 1f       	adc	r20, r24
    70c0:	59 1f       	adc	r21, r25
    70c2:	ac e3       	ldi	r26, 0x3C	; 60
    70c4:	b0 e0       	ldi	r27, 0x00	; 0
    70c6:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    70ca:	81 01       	movw	r16, r2
    70cc:	03 2c       	mov	r0, r3
    70ce:	00 0c       	add	r0, r0
    70d0:	22 0b       	sbc	r18, r18
    70d2:	33 0b       	sbc	r19, r19
    70d4:	a9 01       	movw	r20, r18
    70d6:	98 01       	movw	r18, r16
    70d8:	26 0f       	add	r18, r22
    70da:	37 1f       	adc	r19, r23
    70dc:	48 1f       	adc	r20, r24
    70de:	59 1f       	adc	r21, r25
    70e0:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    70e4:	ed 81       	ldd	r30, Y+5	; 0x05
    70e6:	fe 81       	ldd	r31, Y+6	; 0x06
    70e8:	8f 01       	movw	r16, r30
    70ea:	ff 0f       	add	r31, r31
    70ec:	22 0b       	sbc	r18, r18
    70ee:	33 0b       	sbc	r19, r19
    70f0:	48 01       	movw	r8, r16
    70f2:	59 01       	movw	r10, r18
    70f4:	86 0e       	add	r8, r22
    70f6:	97 1e       	adc	r9, r23
    70f8:	a8 1e       	adc	r10, r24
    70fa:	b9 1e       	adc	r11, r25
    70fc:	04 c0       	rjmp	.+8      	; 0x7106 <normalize+0x320>
    70fe:	88 24       	eor	r8, r8
    7100:	8a 94       	dec	r8
    7102:	98 2c       	mov	r9, r8
    7104:	54 01       	movw	r10, r8
    7106:	49 85       	ldd	r20, Y+9	; 0x09
    7108:	5a 85       	ldd	r21, Y+10	; 0x0a
    710a:	45 2b       	or	r20, r21
    710c:	e9 f0       	breq	.+58     	; 0x7148 <normalize+0x362>
    710e:	ce 01       	movw	r24, r28
    7110:	01 96       	adiw	r24, 0x01	; 1
    7112:	7d dd       	rcall	.-1286   	; 0x6c0e <gettimezone>
    7114:	a9 81       	ldd	r26, Y+1	; 0x01
    7116:	ba 81       	ldd	r27, Y+2	; 0x02
    7118:	2c e3       	ldi	r18, 0x3C	; 60
    711a:	30 e0       	ldi	r19, 0x00	; 0
    711c:	0e 94 c6 e2 	call	0x1c58c	; 0x1c58c <__usmulhisi3>
    7120:	2b 01       	movw	r4, r22
    7122:	3c 01       	movw	r6, r24
    7124:	c5 01       	movw	r24, r10
    7126:	b4 01       	movw	r22, r8
    7128:	e2 dd       	rcall	.-1084   	; 0x6cee <is_dst>
    712a:	89 2b       	or	r24, r25
    712c:	51 f0       	breq	.+20     	; 0x7142 <normalize+0x35c>
    712e:	50 e1       	ldi	r21, 0x10	; 16
    7130:	45 1a       	sub	r4, r21
    7132:	5e e0       	ldi	r21, 0x0E	; 14
    7134:	55 0a       	sbc	r5, r21
    7136:	61 08       	sbc	r6, r1
    7138:	71 08       	sbc	r7, r1
    713a:	cc 24       	eor	r12, r12
    713c:	c3 94       	inc	r12
    713e:	d1 2c       	mov	r13, r1
    7140:	08 c0       	rjmp	.+16     	; 0x7152 <normalize+0x36c>
    7142:	c1 2c       	mov	r12, r1
    7144:	d1 2c       	mov	r13, r1
    7146:	05 c0       	rjmp	.+10     	; 0x7152 <normalize+0x36c>
    7148:	c1 2c       	mov	r12, r1
    714a:	d1 2c       	mov	r13, r1
    714c:	41 2c       	mov	r4, r1
    714e:	51 2c       	mov	r5, r1
    7150:	32 01       	movw	r6, r4
    7152:	87 01       	movw	r16, r14
    7154:	a3 01       	movw	r20, r6
    7156:	92 01       	movw	r18, r4
    7158:	c5 01       	movw	r24, r10
    715a:	b4 01       	movw	r22, r8
    715c:	5a dc       	rcall	.-1868   	; 0x6a12 <time_to_tm>
    715e:	c1 14       	cp	r12, r1
    7160:	d1 04       	cpc	r13, r1
    7162:	29 f0       	breq	.+10     	; 0x716e <normalize+0x388>
    7164:	21 e0       	ldi	r18, 0x01	; 1
    7166:	30 e0       	ldi	r19, 0x00	; 0
    7168:	f7 01       	movw	r30, r14
    716a:	31 8b       	std	Z+17, r19	; 0x11
    716c:	20 8b       	std	Z+16, r18	; 0x10
    716e:	2a 96       	adiw	r28, 0x0a	; 10
    7170:	e2 e1       	ldi	r30, 0x12	; 18
    7172:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00007176 <timegm>:
    7176:	60 e0       	ldi	r22, 0x00	; 0
    7178:	70 e0       	ldi	r23, 0x00	; 0
    717a:	35 ce       	rjmp	.-918    	; 0x6de6 <normalize>
    717c:	08 95       	ret

0000717e <setdate_r>:
    717e:	cf 92       	push	r12
    7180:	df 92       	push	r13
    7182:	ef 92       	push	r14
    7184:	ff 92       	push	r15
    7186:	cf 93       	push	r28
    7188:	df 93       	push	r29
    718a:	cd b7       	in	r28, 0x3d	; 61
    718c:	de b7       	in	r29, 0x3e	; 62
    718e:	a5 97       	sbiw	r28, 0x25	; 37
    7190:	0f b6       	in	r0, 0x3f	; 63
    7192:	f8 94       	cli
    7194:	de bf       	out	0x3e, r29	; 62
    7196:	0f be       	out	0x3f, r0	; 63
    7198:	cd bf       	out	0x3d, r28	; 61
    719a:	9d a3       	std	Y+37, r25	; 0x25
    719c:	8c a3       	std	Y+36, r24	; 0x24
    719e:	1f 82       	std	Y+7, r1	; 0x07
    71a0:	1e 82       	std	Y+6, r1	; 0x06
    71a2:	19 86       	std	Y+9, r1	; 0x09
    71a4:	18 86       	std	Y+8, r1	; 0x08
    71a6:	1b 86       	std	Y+11, r1	; 0x0b
    71a8:	1a 86       	std	Y+10, r1	; 0x0a
    71aa:	1d 86       	std	Y+13, r1	; 0x0d
    71ac:	1c 86       	std	Y+12, r1	; 0x0c
    71ae:	1f 86       	std	Y+15, r1	; 0x0f
    71b0:	1e 86       	std	Y+14, r1	; 0x0e
    71b2:	19 8a       	std	Y+17, r1	; 0x11
    71b4:	18 8a       	std	Y+16, r1	; 0x10
    71b6:	8c a1       	ldd	r24, Y+36	; 0x24
    71b8:	9d a1       	ldd	r25, Y+37	; 0x25
    71ba:	fc 01       	movw	r30, r24
    71bc:	20 81       	ld	r18, Z
    71be:	20 32       	cpi	r18, 0x20	; 32
    71c0:	21 f4       	brne	.+8      	; 0x71ca <setdate_r+0x4c>
    71c2:	01 96       	adiw	r24, 0x01	; 1
    71c4:	9d a3       	std	Y+37, r25	; 0x25
    71c6:	8c a3       	std	Y+36, r24	; 0x24
    71c8:	f6 cf       	rjmp	.-20     	; 0x71b6 <setdate_r+0x38>
    71ca:	4a e0       	ldi	r20, 0x0A	; 10
    71cc:	50 e0       	ldi	r21, 0x00	; 0
    71ce:	be 01       	movw	r22, r28
    71d0:	6c 5d       	subi	r22, 0xDC	; 220
    71d2:	7f 4f       	sbci	r23, 0xFF	; 255
    71d4:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
    71d8:	79 8b       	std	Y+17, r23	; 0x11
    71da:	68 8b       	std	Y+16, r22	; 0x10
    71dc:	8c a1       	ldd	r24, Y+36	; 0x24
    71de:	9d a1       	ldd	r25, Y+37	; 0x25
    71e0:	fc 01       	movw	r30, r24
    71e2:	20 81       	ld	r18, Z
    71e4:	20 32       	cpi	r18, 0x20	; 32
    71e6:	21 f4       	brne	.+8      	; 0x71f0 <setdate_r+0x72>
    71e8:	01 96       	adiw	r24, 0x01	; 1
    71ea:	9d a3       	std	Y+37, r25	; 0x25
    71ec:	8c a3       	std	Y+36, r24	; 0x24
    71ee:	f6 cf       	rjmp	.-20     	; 0x71dc <setdate_r+0x5e>
    71f0:	4a e0       	ldi	r20, 0x0A	; 10
    71f2:	50 e0       	ldi	r21, 0x00	; 0
    71f4:	be 01       	movw	r22, r28
    71f6:	6c 5d       	subi	r22, 0xDC	; 220
    71f8:	7f 4f       	sbci	r23, 0xFF	; 255
    71fa:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
    71fe:	7f 87       	std	Y+15, r23	; 0x0f
    7200:	6e 87       	std	Y+14, r22	; 0x0e
    7202:	8c a1       	ldd	r24, Y+36	; 0x24
    7204:	9d a1       	ldd	r25, Y+37	; 0x25
    7206:	fc 01       	movw	r30, r24
    7208:	20 81       	ld	r18, Z
    720a:	20 32       	cpi	r18, 0x20	; 32
    720c:	21 f4       	brne	.+8      	; 0x7216 <setdate_r+0x98>
    720e:	01 96       	adiw	r24, 0x01	; 1
    7210:	9d a3       	std	Y+37, r25	; 0x25
    7212:	8c a3       	std	Y+36, r24	; 0x24
    7214:	f6 cf       	rjmp	.-20     	; 0x7202 <setdate_r+0x84>
    7216:	4a e0       	ldi	r20, 0x0A	; 10
    7218:	50 e0       	ldi	r21, 0x00	; 0
    721a:	be 01       	movw	r22, r28
    721c:	6c 5d       	subi	r22, 0xDC	; 220
    721e:	7f 4f       	sbci	r23, 0xFF	; 255
    7220:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
    7224:	7d 87       	std	Y+13, r23	; 0x0d
    7226:	6c 87       	std	Y+12, r22	; 0x0c
    7228:	8c a1       	ldd	r24, Y+36	; 0x24
    722a:	9d a1       	ldd	r25, Y+37	; 0x25
    722c:	fc 01       	movw	r30, r24
    722e:	20 81       	ld	r18, Z
    7230:	20 32       	cpi	r18, 0x20	; 32
    7232:	21 f4       	brne	.+8      	; 0x723c <setdate_r+0xbe>
    7234:	01 96       	adiw	r24, 0x01	; 1
    7236:	9d a3       	std	Y+37, r25	; 0x25
    7238:	8c a3       	std	Y+36, r24	; 0x24
    723a:	f6 cf       	rjmp	.-20     	; 0x7228 <setdate_r+0xaa>
    723c:	4a e0       	ldi	r20, 0x0A	; 10
    723e:	50 e0       	ldi	r21, 0x00	; 0
    7240:	be 01       	movw	r22, r28
    7242:	6c 5d       	subi	r22, 0xDC	; 220
    7244:	7f 4f       	sbci	r23, 0xFF	; 255
    7246:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
    724a:	7b 87       	std	Y+11, r23	; 0x0b
    724c:	6a 87       	std	Y+10, r22	; 0x0a
    724e:	ec a1       	ldd	r30, Y+36	; 0x24
    7250:	fd a1       	ldd	r31, Y+37	; 0x25
    7252:	80 81       	ld	r24, Z
    7254:	88 23       	and	r24, r24
    7256:	39 f0       	breq	.+14     	; 0x7266 <setdate_r+0xe8>
    7258:	80 32       	cpi	r24, 0x20	; 32
    725a:	11 f0       	breq	.+4      	; 0x7260 <setdate_r+0xe2>
    725c:	8a 33       	cpi	r24, 0x3A	; 58
    725e:	19 f4       	brne	.+6      	; 0x7266 <setdate_r+0xe8>
    7260:	31 96       	adiw	r30, 0x01	; 1
    7262:	fd a3       	std	Y+37, r31	; 0x25
    7264:	ec a3       	std	Y+36, r30	; 0x24
    7266:	4a e0       	ldi	r20, 0x0A	; 10
    7268:	50 e0       	ldi	r21, 0x00	; 0
    726a:	be 01       	movw	r22, r28
    726c:	6c 5d       	subi	r22, 0xDC	; 220
    726e:	7f 4f       	sbci	r23, 0xFF	; 255
    7270:	8c a1       	ldd	r24, Y+36	; 0x24
    7272:	9d a1       	ldd	r25, Y+37	; 0x25
    7274:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
    7278:	79 87       	std	Y+9, r23	; 0x09
    727a:	68 87       	std	Y+8, r22	; 0x08
    727c:	ec a1       	ldd	r30, Y+36	; 0x24
    727e:	fd a1       	ldd	r31, Y+37	; 0x25
    7280:	80 81       	ld	r24, Z
    7282:	88 23       	and	r24, r24
    7284:	39 f0       	breq	.+14     	; 0x7294 <setdate_r+0x116>
    7286:	80 32       	cpi	r24, 0x20	; 32
    7288:	11 f0       	breq	.+4      	; 0x728e <setdate_r+0x110>
    728a:	8a 33       	cpi	r24, 0x3A	; 58
    728c:	19 f4       	brne	.+6      	; 0x7294 <setdate_r+0x116>
    728e:	31 96       	adiw	r30, 0x01	; 1
    7290:	fd a3       	std	Y+37, r31	; 0x25
    7292:	ec a3       	std	Y+36, r30	; 0x24
    7294:	4a e0       	ldi	r20, 0x0A	; 10
    7296:	50 e0       	ldi	r21, 0x00	; 0
    7298:	be 01       	movw	r22, r28
    729a:	6c 5d       	subi	r22, 0xDC	; 220
    729c:	7f 4f       	sbci	r23, 0xFF	; 255
    729e:	8c a1       	ldd	r24, Y+36	; 0x24
    72a0:	9d a1       	ldd	r25, Y+37	; 0x25
    72a2:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
    72a6:	7f 83       	std	Y+7, r23	; 0x07
    72a8:	6e 83       	std	Y+6, r22	; 0x06
    72aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    72ac:	3f 85       	ldd	r19, Y+15	; 0x0f
    72ae:	21 50       	subi	r18, 0x01	; 1
    72b0:	31 09       	sbc	r19, r1
    72b2:	3f 87       	std	Y+15, r19	; 0x0f
    72b4:	2e 87       	std	Y+14, r18	; 0x0e
    72b6:	88 89       	ldd	r24, Y+16	; 0x10
    72b8:	99 89       	ldd	r25, Y+17	; 0x11
    72ba:	ac 01       	movw	r20, r24
    72bc:	42 5b       	subi	r20, 0xB2	; 178
    72be:	57 40       	sbci	r21, 0x07	; 7
    72c0:	45 34       	cpi	r20, 0x45	; 69
    72c2:	51 05       	cpc	r21, r1
    72c4:	38 f0       	brcs	.+14     	; 0x72d4 <setdate_r+0x156>
    72c6:	ed b7       	in	r30, 0x3d	; 61
    72c8:	fe b7       	in	r31, 0x3e	; 62
    72ca:	95 83       	std	Z+5, r25	; 0x05
    72cc:	84 83       	std	Z+4, r24	; 0x04
    72ce:	89 e1       	ldi	r24, 0x19	; 25
    72d0:	97 e0       	ldi	r25, 0x07	; 7
    72d2:	34 c0       	rjmp	.+104    	; 0x733c <setdate_r+0x1be>
    72d4:	8c 56       	subi	r24, 0x6C	; 108
    72d6:	97 40       	sbci	r25, 0x07	; 7
    72d8:	99 8b       	std	Y+17, r25	; 0x11
    72da:	88 8b       	std	Y+16, r24	; 0x10
    72dc:	2c 30       	cpi	r18, 0x0C	; 12
    72de:	31 05       	cpc	r19, r1
    72e0:	38 f0       	brcs	.+14     	; 0x72f0 <setdate_r+0x172>
    72e2:	ed b7       	in	r30, 0x3d	; 61
    72e4:	fe b7       	in	r31, 0x3e	; 62
    72e6:	95 83       	std	Z+5, r25	; 0x05
    72e8:	84 83       	std	Z+4, r24	; 0x04
    72ea:	88 e0       	ldi	r24, 0x08	; 8
    72ec:	97 e0       	ldi	r25, 0x07	; 7
    72ee:	26 c0       	rjmp	.+76     	; 0x733c <setdate_r+0x1be>
    72f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    72f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    72f4:	9c 01       	movw	r18, r24
    72f6:	21 50       	subi	r18, 0x01	; 1
    72f8:	31 09       	sbc	r19, r1
    72fa:	2f 31       	cpi	r18, 0x1F	; 31
    72fc:	31 05       	cpc	r19, r1
    72fe:	38 f0       	brcs	.+14     	; 0x730e <setdate_r+0x190>
    7300:	ed b7       	in	r30, 0x3d	; 61
    7302:	fe b7       	in	r31, 0x3e	; 62
    7304:	95 83       	std	Z+5, r25	; 0x05
    7306:	84 83       	std	Z+4, r24	; 0x04
    7308:	87 ef       	ldi	r24, 0xF7	; 247
    730a:	96 e0       	ldi	r25, 0x06	; 6
    730c:	17 c0       	rjmp	.+46     	; 0x733c <setdate_r+0x1be>
    730e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7310:	9b 85       	ldd	r25, Y+11	; 0x0b
    7312:	88 31       	cpi	r24, 0x18	; 24
    7314:	91 05       	cpc	r25, r1
    7316:	38 f0       	brcs	.+14     	; 0x7326 <setdate_r+0x1a8>
    7318:	ed b7       	in	r30, 0x3d	; 61
    731a:	fe b7       	in	r31, 0x3e	; 62
    731c:	95 83       	std	Z+5, r25	; 0x05
    731e:	84 83       	std	Z+4, r24	; 0x04
    7320:	85 ee       	ldi	r24, 0xE5	; 229
    7322:	96 e0       	ldi	r25, 0x06	; 6
    7324:	0b c0       	rjmp	.+22     	; 0x733c <setdate_r+0x1be>
    7326:	88 85       	ldd	r24, Y+8	; 0x08
    7328:	99 85       	ldd	r25, Y+9	; 0x09
    732a:	8c 33       	cpi	r24, 0x3C	; 60
    732c:	91 05       	cpc	r25, r1
    732e:	68 f0       	brcs	.+26     	; 0x734a <setdate_r+0x1cc>
    7330:	ed b7       	in	r30, 0x3d	; 61
    7332:	fe b7       	in	r31, 0x3e	; 62
    7334:	95 83       	std	Z+5, r25	; 0x05
    7336:	84 83       	std	Z+4, r24	; 0x04
    7338:	84 ed       	ldi	r24, 0xD4	; 212
    733a:	96 e0       	ldi	r25, 0x06	; 6
    733c:	a0 e0       	ldi	r26, 0x00	; 0
    733e:	81 83       	std	Z+1, r24	; 0x01
    7340:	92 83       	std	Z+2, r25	; 0x02
    7342:	a3 83       	std	Z+3, r26	; 0x03
    7344:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    7348:	25 c0       	rjmp	.+74     	; 0x7394 <setdate_r+0x216>
    734a:	ce 01       	movw	r24, r28
    734c:	06 96       	adiw	r24, 0x06	; 6
    734e:	13 df       	rcall	.-474    	; 0x7176 <timegm>
    7350:	6b 01       	movw	r12, r22
    7352:	7c 01       	movw	r14, r24
    7354:	6c 8f       	std	Y+28, r22	; 0x1c
    7356:	7d 8f       	std	Y+29, r23	; 0x1d
    7358:	8e 8f       	std	Y+30, r24	; 0x1e
    735a:	9f 8f       	std	Y+31, r25	; 0x1f
    735c:	18 a2       	std	Y+32, r1	; 0x20
    735e:	19 a2       	std	Y+33, r1	; 0x21
    7360:	1a a2       	std	Y+34, r1	; 0x22
    7362:	1b a2       	std	Y+35, r1	; 0x23
    7364:	be 01       	movw	r22, r28
    7366:	64 5e       	subi	r22, 0xE4	; 228
    7368:	7f 4f       	sbci	r23, 0xFF	; 255
    736a:	80 e0       	ldi	r24, 0x00	; 0
    736c:	90 e0       	ldi	r25, 0x00	; 0
    736e:	03 db       	rcall	.-2554   	; 0x6976 <clock_settime>
    7370:	b7 01       	movw	r22, r14
    7372:	a6 01       	movw	r20, r12
    7374:	81 e0       	ldi	r24, 0x01	; 1
    7376:	90 e0       	ldi	r25, 0x00	; 0
    7378:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <rtc_init>
    737c:	81 11       	cpse	r24, r1
    737e:	0d c0       	rjmp	.+26     	; 0x739a <setdate_r+0x21c>
    7380:	8d eb       	ldi	r24, 0xBD	; 189
    7382:	96 e0       	ldi	r25, 0x06	; 6
    7384:	a0 e0       	ldi	r26, 0x00	; 0
    7386:	ed b7       	in	r30, 0x3d	; 61
    7388:	fe b7       	in	r31, 0x3e	; 62
    738a:	81 83       	std	Z+1, r24	; 0x01
    738c:	92 83       	std	Z+2, r25	; 0x02
    738e:	a3 83       	std	Z+3, r26	; 0x03
    7390:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    7394:	8f ef       	ldi	r24, 0xFF	; 255
    7396:	9f ef       	ldi	r25, 0xFF	; 255
    7398:	02 c0       	rjmp	.+4      	; 0x739e <setdate_r+0x220>
    739a:	80 e0       	ldi	r24, 0x00	; 0
    739c:	90 e0       	ldi	r25, 0x00	; 0
    739e:	a5 96       	adiw	r28, 0x25	; 37
    73a0:	0f b6       	in	r0, 0x3f	; 63
    73a2:	f8 94       	cli
    73a4:	de bf       	out	0x3e, r29	; 62
    73a6:	0f be       	out	0x3f, r0	; 63
    73a8:	cd bf       	out	0x3d, r28	; 61
    73aa:	df 91       	pop	r29
    73ac:	cf 91       	pop	r28
    73ae:	ff 90       	pop	r15
    73b0:	ef 90       	pop	r14
    73b2:	df 90       	pop	r13
    73b4:	cf 90       	pop	r12
    73b6:	08 95       	ret

000073b8 <setdate>:
    73b8:	ab e2       	ldi	r26, 0x2B	; 43
    73ba:	b0 e0       	ldi	r27, 0x00	; 0
    73bc:	e2 ee       	ldi	r30, 0xE2	; 226
    73be:	f9 e3       	ldi	r31, 0x39	; 57
    73c0:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    73c4:	8b e2       	ldi	r24, 0x2B	; 43
    73c6:	97 e0       	ldi	r25, 0x07	; 7
    73c8:	a0 e0       	ldi	r26, 0x00	; 0
    73ca:	ed b7       	in	r30, 0x3d	; 61
    73cc:	fe b7       	in	r31, 0x3e	; 62
    73ce:	81 83       	std	Z+1, r24	; 0x01
    73d0:	92 83       	std	Z+2, r25	; 0x02
    73d2:	a3 83       	std	Z+3, r26	; 0x03
    73d4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    73d8:	40 91 c7 1c 	lds	r20, 0x1CC7	; 0x801cc7 <__iob>
    73dc:	50 91 c8 1c 	lds	r21, 0x1CC8	; 0x801cc8 <__iob+0x1>
    73e0:	66 e2       	ldi	r22, 0x26	; 38
    73e2:	70 e0       	ldi	r23, 0x00	; 0
    73e4:	ce 01       	movw	r24, r28
    73e6:	04 96       	adiw	r24, 0x04	; 4
    73e8:	0e 94 a5 74 	call	0xe94a	; 0xe94a <fgets>
    73ec:	ce 01       	movw	r24, r28
    73ee:	04 96       	adiw	r24, 0x04	; 4
    73f0:	c6 de       	rcall	.-628    	; 0x717e <setdate_r>
    73f2:	ab 96       	adiw	r28, 0x2b	; 43
    73f4:	e2 e0       	ldi	r30, 0x02	; 2
    73f6:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000073fa <find_dst>:
    73fa:	a8 e2       	ldi	r26, 0x28	; 40
    73fc:	b0 e0       	ldi	r27, 0x00	; 0
    73fe:	e3 e0       	ldi	r30, 0x03	; 3
    7400:	fa e3       	ldi	r31, 0x3A	; 58
    7402:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    7406:	3c 01       	movw	r6, r24
    7408:	1a 01       	movw	r2, r20
    740a:	2b 01       	movw	r4, r22
    740c:	49 01       	movw	r8, r18
    740e:	1c a3       	std	Y+36, r17	; 0x24
    7410:	0b a3       	std	Y+35, r16	; 0x23
    7412:	de a2       	std	Y+38, r13	; 0x26
    7414:	cd a2       	std	Y+37, r12	; 0x25
    7416:	b8 a6       	std	Y+40, r11	; 0x28
    7418:	af a2       	std	Y+39, r10	; 0x27
    741a:	be 01       	movw	r22, r28
    741c:	61 5e       	subi	r22, 0xE1	; 225
    741e:	7f 4f       	sbci	r23, 0xFF	; 255
    7420:	ce 01       	movw	r24, r28
    7422:	47 96       	adiw	r24, 0x17	; 23
    7424:	15 dc       	rcall	.-2006   	; 0x6c50 <gettimeofday>
    7426:	af 8d       	ldd	r26, Y+31	; 0x1f
    7428:	b8 a1       	ldd	r27, Y+32	; 0x20
    742a:	2c e3       	ldi	r18, 0x3C	; 60
    742c:	30 e0       	ldi	r19, 0x00	; 0
    742e:	0e 94 c6 e2 	call	0x1c58c	; 0x1c58c <__usmulhisi3>
    7432:	5b 01       	movw	r10, r22
    7434:	6c 01       	movw	r12, r24
    7436:	61 14       	cp	r6, r1
    7438:	71 04       	cpc	r7, r1
    743a:	31 f0       	breq	.+12     	; 0x7448 <find_dst+0x4e>
    743c:	20 e1       	ldi	r18, 0x10	; 16
    743e:	a2 1a       	sub	r10, r18
    7440:	2e e0       	ldi	r18, 0x0E	; 14
    7442:	b2 0a       	sbc	r11, r18
    7444:	c1 08       	sbc	r12, r1
    7446:	d1 08       	sbc	r13, r1
    7448:	81 14       	cp	r8, r1
    744a:	91 04       	cpc	r9, r1
    744c:	39 f0       	breq	.+14     	; 0x745c <find_dst+0x62>
    744e:	4c e6       	ldi	r20, 0x6C	; 108
    7450:	84 1a       	sub	r8, r20
    7452:	47 e0       	ldi	r20, 0x07	; 7
    7454:	94 0a       	sbc	r9, r20
    7456:	9c 86       	std	Y+12, r9	; 0x0c
    7458:	8b 86       	std	Y+11, r8	; 0x0b
    745a:	11 c0       	rjmp	.+34     	; 0x747e <find_dst+0x84>
    745c:	21 14       	cp	r2, r1
    745e:	31 04       	cpc	r3, r1
    7460:	41 04       	cpc	r4, r1
    7462:	51 04       	cpc	r5, r1
    7464:	21 f4       	brne	.+8      	; 0x746e <find_dst+0x74>
    7466:	2f 88       	ldd	r2, Y+23	; 0x17
    7468:	38 8c       	ldd	r3, Y+24	; 0x18
    746a:	49 8c       	ldd	r4, Y+25	; 0x19
    746c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    746e:	8e 01       	movw	r16, r28
    7470:	0f 5f       	subi	r16, 0xFF	; 255
    7472:	1f 4f       	sbci	r17, 0xFF	; 255
    7474:	a6 01       	movw	r20, r12
    7476:	95 01       	movw	r18, r10
    7478:	c2 01       	movw	r24, r4
    747a:	b1 01       	movw	r22, r2
    747c:	ca da       	rcall	.-2668   	; 0x6a12 <time_to_tm>
    747e:	8b a1       	ldd	r24, Y+35	; 0x23
    7480:	9c a1       	ldd	r25, Y+36	; 0x24
    7482:	01 97       	sbiw	r24, 0x01	; 1
    7484:	9a 87       	std	Y+10, r25	; 0x0a
    7486:	89 87       	std	Y+9, r24	; 0x09
    7488:	81 e0       	ldi	r24, 0x01	; 1
    748a:	90 e0       	ldi	r25, 0x00	; 0
    748c:	98 87       	std	Y+8, r25	; 0x08
    748e:	8f 83       	std	Y+7, r24	; 0x07
    7490:	8f a1       	ldd	r24, Y+39	; 0x27
    7492:	98 a5       	ldd	r25, Y+40	; 0x28
    7494:	9e 83       	std	Y+6, r25	; 0x06
    7496:	8d 83       	std	Y+5, r24	; 0x05
    7498:	1c 82       	std	Y+4, r1	; 0x04
    749a:	1b 82       	std	Y+3, r1	; 0x03
    749c:	1a 82       	std	Y+2, r1	; 0x02
    749e:	19 82       	std	Y+1, r1	; 0x01
    74a0:	ce 01       	movw	r24, r28
    74a2:	01 96       	adiw	r24, 0x01	; 1
    74a4:	68 de       	rcall	.-816    	; 0x7176 <timegm>
    74a6:	45 01       	movw	r8, r10
    74a8:	56 01       	movw	r10, r12
    74aa:	86 0e       	add	r8, r22
    74ac:	97 1e       	adc	r9, r23
    74ae:	a8 1e       	adc	r10, r24
    74b0:	b9 1e       	adc	r11, r25
    74b2:	8e 01       	movw	r16, r28
    74b4:	0f 5f       	subi	r16, 0xFF	; 255
    74b6:	1f 4f       	sbci	r17, 0xFF	; 255
    74b8:	20 e0       	ldi	r18, 0x00	; 0
    74ba:	30 e0       	ldi	r19, 0x00	; 0
    74bc:	a9 01       	movw	r20, r18
    74be:	c5 01       	movw	r24, r10
    74c0:	b4 01       	movw	r22, r8
    74c2:	a7 da       	rcall	.-2738   	; 0x6a12 <time_to_tm>
    74c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    74c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    74c8:	e7 e0       	ldi	r30, 0x07	; 7
    74ca:	f0 e0       	ldi	r31, 0x00	; 0
    74cc:	c9 01       	movw	r24, r18
    74ce:	bf 01       	movw	r22, r30
    74d0:	0e 94 6c e2 	call	0x1c4d8	; 0x1c4d8 <__divmodhi4>
    74d4:	4d a1       	ldd	r20, Y+37	; 0x25
    74d6:	5e a1       	ldd	r21, Y+38	; 0x26
    74d8:	48 17       	cp	r20, r24
    74da:	59 07       	cpc	r21, r25
    74dc:	21 f4       	brne	.+8      	; 0x74e6 <find_dst+0xec>
    74de:	51 e0       	ldi	r21, 0x01	; 1
    74e0:	e5 1a       	sub	r14, r21
    74e2:	f1 08       	sbc	r15, r1
    74e4:	51 f0       	breq	.+20     	; 0x74fa <find_dst+0x100>
    74e6:	80 e8       	ldi	r24, 0x80	; 128
    74e8:	88 0e       	add	r8, r24
    74ea:	81 e5       	ldi	r24, 0x51	; 81
    74ec:	98 1e       	adc	r9, r24
    74ee:	81 e0       	ldi	r24, 0x01	; 1
    74f0:	a8 1e       	adc	r10, r24
    74f2:	b1 1c       	adc	r11, r1
    74f4:	2f 5f       	subi	r18, 0xFF	; 255
    74f6:	3f 4f       	sbci	r19, 0xFF	; 255
    74f8:	e9 cf       	rjmp	.-46     	; 0x74cc <find_dst+0xd2>
    74fa:	c5 01       	movw	r24, r10
    74fc:	b4 01       	movw	r22, r8
    74fe:	a8 96       	adiw	r28, 0x28	; 40
    7500:	e2 e1       	ldi	r30, 0x12	; 18
    7502:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00007506 <set_dst>:
    7506:	4f 92       	push	r4
    7508:	5f 92       	push	r5
    750a:	6f 92       	push	r6
    750c:	7f 92       	push	r7
    750e:	af 92       	push	r10
    7510:	bf 92       	push	r11
    7512:	cf 92       	push	r12
    7514:	df 92       	push	r13
    7516:	ef 92       	push	r14
    7518:	ff 92       	push	r15
    751a:	0f 93       	push	r16
    751c:	1f 93       	push	r17
    751e:	cf 93       	push	r28
    7520:	df 93       	push	r29
    7522:	cd b7       	in	r28, 0x3d	; 61
    7524:	de b7       	in	r29, 0x3e	; 62
    7526:	2c 97       	sbiw	r28, 0x0c	; 12
    7528:	0f b6       	in	r0, 0x3f	; 63
    752a:	f8 94       	cli
    752c:	de bf       	out	0x3e, r29	; 62
    752e:	0f be       	out	0x3f, r0	; 63
    7530:	cd bf       	out	0x3d, r28	; 61
    7532:	2b 01       	movw	r4, r22
    7534:	3c 01       	movw	r6, r24
    7536:	67 2b       	or	r22, r23
    7538:	68 2b       	or	r22, r24
    753a:	69 2b       	or	r22, r25
    753c:	51 f4       	brne	.+20     	; 0x7552 <set_dst+0x4c>
    753e:	be 01       	movw	r22, r28
    7540:	67 5f       	subi	r22, 0xF7	; 247
    7542:	7f 4f       	sbci	r23, 0xFF	; 255
    7544:	ce 01       	movw	r24, r28
    7546:	01 96       	adiw	r24, 0x01	; 1
    7548:	83 db       	rcall	.-2298   	; 0x6c50 <gettimeofday>
    754a:	49 80       	ldd	r4, Y+1	; 0x01
    754c:	5a 80       	ldd	r5, Y+2	; 0x02
    754e:	6b 80       	ldd	r6, Y+3	; 0x03
    7550:	7c 80       	ldd	r7, Y+4	; 0x04
    7552:	80 91 84 1a 	lds	r24, 0x1A84	; 0x801a84 <dst+0x8>
    7556:	90 91 85 1a 	lds	r25, 0x1A85	; 0x801a85 <dst+0x9>
    755a:	a0 91 86 1a 	lds	r26, 0x1A86	; 0x801a86 <dst+0xa>
    755e:	b0 91 87 1a 	lds	r27, 0x1A87	; 0x801a87 <dst+0xb>
    7562:	84 15       	cp	r24, r4
    7564:	95 05       	cpc	r25, r5
    7566:	a6 05       	cpc	r26, r6
    7568:	b7 05       	cpc	r27, r7
    756a:	50 f0       	brcs	.+20     	; 0x7580 <set_dst+0x7a>
    756c:	84 19       	sub	r24, r4
    756e:	95 09       	sbc	r25, r5
    7570:	a6 09       	sbc	r26, r6
    7572:	b7 09       	sbc	r27, r7
    7574:	80 38       	cpi	r24, 0x80	; 128
    7576:	91 45       	sbci	r25, 0x51	; 81
    7578:	a1 40       	sbci	r26, 0x01	; 1
    757a:	b1 05       	cpc	r27, r1
    757c:	70 f4       	brcc	.+28     	; 0x759a <set_dst+0x94>
    757e:	42 c0       	rjmp	.+132    	; 0x7604 <set_dst+0xfe>
    7580:	a3 01       	movw	r20, r6
    7582:	92 01       	movw	r18, r4
    7584:	28 1b       	sub	r18, r24
    7586:	39 0b       	sbc	r19, r25
    7588:	4a 0b       	sbc	r20, r26
    758a:	5b 0b       	sbc	r21, r27
    758c:	da 01       	movw	r26, r20
    758e:	c9 01       	movw	r24, r18
    7590:	80 38       	cpi	r24, 0x80	; 128
    7592:	91 45       	sbci	r25, 0x51	; 81
    7594:	a1 40       	sbci	r26, 0x01	; 1
    7596:	b1 05       	cpc	r27, r1
    7598:	a8 f1       	brcs	.+106    	; 0x7604 <set_dst+0xfe>
    759a:	40 92 84 1a 	sts	0x1A84, r4	; 0x801a84 <dst+0x8>
    759e:	50 92 85 1a 	sts	0x1A85, r5	; 0x801a85 <dst+0x9>
    75a2:	60 92 86 1a 	sts	0x1A86, r6	; 0x801a86 <dst+0xa>
    75a6:	70 92 87 1a 	sts	0x1A87, r7	; 0x801a87 <dst+0xb>
    75aa:	82 e0       	ldi	r24, 0x02	; 2
    75ac:	a8 2e       	mov	r10, r24
    75ae:	b1 2c       	mov	r11, r1
    75b0:	c1 2c       	mov	r12, r1
    75b2:	d1 2c       	mov	r13, r1
    75b4:	92 e0       	ldi	r25, 0x02	; 2
    75b6:	e9 2e       	mov	r14, r25
    75b8:	f1 2c       	mov	r15, r1
    75ba:	03 e0       	ldi	r16, 0x03	; 3
    75bc:	10 e0       	ldi	r17, 0x00	; 0
    75be:	20 e0       	ldi	r18, 0x00	; 0
    75c0:	30 e0       	ldi	r19, 0x00	; 0
    75c2:	b3 01       	movw	r22, r6
    75c4:	a2 01       	movw	r20, r4
    75c6:	80 e0       	ldi	r24, 0x00	; 0
    75c8:	90 e0       	ldi	r25, 0x00	; 0
    75ca:	17 df       	rcall	.-466    	; 0x73fa <find_dst>
    75cc:	60 93 7c 1a 	sts	0x1A7C, r22	; 0x801a7c <dst>
    75d0:	70 93 7d 1a 	sts	0x1A7D, r23	; 0x801a7d <dst+0x1>
    75d4:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <dst+0x2>
    75d8:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <dst+0x3>
    75dc:	ee 24       	eor	r14, r14
    75de:	e3 94       	inc	r14
    75e0:	f1 2c       	mov	r15, r1
    75e2:	0b e0       	ldi	r16, 0x0B	; 11
    75e4:	10 e0       	ldi	r17, 0x00	; 0
    75e6:	20 e0       	ldi	r18, 0x00	; 0
    75e8:	30 e0       	ldi	r19, 0x00	; 0
    75ea:	b3 01       	movw	r22, r6
    75ec:	a2 01       	movw	r20, r4
    75ee:	81 e0       	ldi	r24, 0x01	; 1
    75f0:	90 e0       	ldi	r25, 0x00	; 0
    75f2:	03 df       	rcall	.-506    	; 0x73fa <find_dst>
    75f4:	60 93 80 1a 	sts	0x1A80, r22	; 0x801a80 <dst+0x4>
    75f8:	70 93 81 1a 	sts	0x1A81, r23	; 0x801a81 <dst+0x5>
    75fc:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <dst+0x6>
    7600:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <dst+0x7>
    7604:	2c 96       	adiw	r28, 0x0c	; 12
    7606:	0f b6       	in	r0, 0x3f	; 63
    7608:	f8 94       	cli
    760a:	de bf       	out	0x3e, r29	; 62
    760c:	0f be       	out	0x3f, r0	; 63
    760e:	cd bf       	out	0x3d, r28	; 61
    7610:	df 91       	pop	r29
    7612:	cf 91       	pop	r28
    7614:	1f 91       	pop	r17
    7616:	0f 91       	pop	r16
    7618:	ff 90       	pop	r15
    761a:	ef 90       	pop	r14
    761c:	df 90       	pop	r13
    761e:	cf 90       	pop	r12
    7620:	bf 90       	pop	r11
    7622:	af 90       	pop	r10
    7624:	7f 90       	pop	r7
    7626:	6f 90       	pop	r6
    7628:	5f 90       	pop	r5
    762a:	4f 90       	pop	r4
    762c:	08 95       	ret

0000762e <asctime_r>:
    762e:	a5 e1       	ldi	r26, 0x15	; 21
    7630:	b0 e0       	ldi	r27, 0x00	; 0
    7632:	ed e1       	ldi	r30, 0x1D	; 29
    7634:	fb e3       	ldi	r31, 0x3B	; 59
    7636:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    763a:	ec 01       	movw	r28, r24
    763c:	8b 01       	movw	r16, r22
    763e:	60 e0       	ldi	r22, 0x00	; 0
    7640:	70 e0       	ldi	r23, 0x00	; 0
    7642:	d1 db       	rcall	.-2142   	; 0x6de6 <normalize>
    7644:	80 e2       	ldi	r24, 0x20	; 32
    7646:	f8 01       	movw	r30, r16
    7648:	11 92       	st	Z+, r1
    764a:	8a 95       	dec	r24
    764c:	e9 f7       	brne	.-6      	; 0x7648 <asctime_r+0x1a>
    764e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7650:	9b 85       	ldd	r25, Y+11	; 0x0b
    7652:	84 59       	subi	r24, 0x94	; 148
    7654:	98 4f       	sbci	r25, 0xF8	; 248
    7656:	ed b7       	in	r30, 0x3d	; 61
    7658:	fe b7       	in	r31, 0x3e	; 62
    765a:	95 8b       	std	Z+21, r25	; 0x15
    765c:	84 8b       	std	Z+20, r24	; 0x14
    765e:	88 81       	ld	r24, Y
    7660:	99 81       	ldd	r25, Y+1	; 0x01
    7662:	93 8b       	std	Z+19, r25	; 0x13
    7664:	82 8b       	std	Z+18, r24	; 0x12
    7666:	8a 81       	ldd	r24, Y+2	; 0x02
    7668:	9b 81       	ldd	r25, Y+3	; 0x03
    766a:	91 8b       	std	Z+17, r25	; 0x11
    766c:	80 8b       	std	Z+16, r24	; 0x10
    766e:	8c 81       	ldd	r24, Y+4	; 0x04
    7670:	9d 81       	ldd	r25, Y+5	; 0x05
    7672:	97 87       	std	Z+15, r25	; 0x0f
    7674:	86 87       	std	Z+14, r24	; 0x0e
    7676:	8e 81       	ldd	r24, Y+6	; 0x06
    7678:	9f 81       	ldd	r25, Y+7	; 0x07
    767a:	95 87       	std	Z+13, r25	; 0x0d
    767c:	84 87       	std	Z+12, r24	; 0x0c
    767e:	e8 85       	ldd	r30, Y+8	; 0x08
    7680:	f9 85       	ldd	r31, Y+9	; 0x09
    7682:	ee 0f       	add	r30, r30
    7684:	ff 1f       	adc	r31, r31
    7686:	e5 5f       	subi	r30, 0xF5	; 245
    7688:	fe 4f       	sbci	r31, 0xFE	; 254
    768a:	80 81       	ld	r24, Z
    768c:	91 81       	ldd	r25, Z+1	; 0x01
    768e:	ed b7       	in	r30, 0x3d	; 61
    7690:	fe b7       	in	r31, 0x3e	; 62
    7692:	93 87       	std	Z+11, r25	; 0x0b
    7694:	82 87       	std	Z+10, r24	; 0x0a
    7696:	ec 85       	ldd	r30, Y+12	; 0x0c
    7698:	fd 85       	ldd	r31, Y+13	; 0x0d
    769a:	ee 0f       	add	r30, r30
    769c:	ff 1f       	adc	r31, r31
    769e:	eb 5d       	subi	r30, 0xDB	; 219
    76a0:	fe 4f       	sbci	r31, 0xFE	; 254
    76a2:	80 81       	ld	r24, Z
    76a4:	91 81       	ldd	r25, Z+1	; 0x01
    76a6:	ed b7       	in	r30, 0x3d	; 61
    76a8:	fe b7       	in	r31, 0x3e	; 62
    76aa:	91 87       	std	Z+9, r25	; 0x09
    76ac:	80 87       	std	Z+8, r24	; 0x08
    76ae:	8c e4       	ldi	r24, 0x4C	; 76
    76b0:	97 e0       	ldi	r25, 0x07	; 7
    76b2:	a0 e0       	ldi	r26, 0x00	; 0
    76b4:	85 83       	std	Z+5, r24	; 0x05
    76b6:	96 83       	std	Z+6, r25	; 0x06
    76b8:	a7 83       	std	Z+7, r26	; 0x07
    76ba:	80 e2       	ldi	r24, 0x20	; 32
    76bc:	90 e0       	ldi	r25, 0x00	; 0
    76be:	94 83       	std	Z+4, r25	; 0x04
    76c0:	83 83       	std	Z+3, r24	; 0x03
    76c2:	12 83       	std	Z+2, r17	; 0x02
    76c4:	01 83       	std	Z+1, r16	; 0x01
    76c6:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <snprintf_P>
    76ca:	c8 01       	movw	r24, r16
    76cc:	cd b7       	in	r28, 0x3d	; 61
    76ce:	de b7       	in	r29, 0x3e	; 62
    76d0:	65 96       	adiw	r28, 0x15	; 21
    76d2:	e4 e0       	ldi	r30, 0x04	; 4
    76d4:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

000076d8 <asctime>:
    76d8:	66 e0       	ldi	r22, 0x06	; 6
    76da:	78 e1       	ldi	r23, 0x18	; 24
    76dc:	a8 cf       	rjmp	.-176    	; 0x762e <asctime_r>
    76de:	08 95       	ret

000076e0 <ctime_gm>:
    76e0:	a6 e1       	ldi	r26, 0x16	; 22
    76e2:	b0 e0       	ldi	r27, 0x00	; 0
    76e4:	e6 e7       	ldi	r30, 0x76	; 118
    76e6:	fb e3       	ldi	r31, 0x3B	; 59
    76e8:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    76ec:	be 01       	movw	r22, r28
    76ee:	6f 5f       	subi	r22, 0xFF	; 255
    76f0:	7f 4f       	sbci	r23, 0xFF	; 255
    76f2:	6d da       	rcall	.-2854   	; 0x6bce <gmtime_r>
    76f4:	66 ee       	ldi	r22, 0xE6	; 230
    76f6:	77 e1       	ldi	r23, 0x17	; 23
    76f8:	9a df       	rcall	.-204    	; 0x762e <asctime_r>
    76fa:	66 96       	adiw	r28, 0x16	; 22
    76fc:	e2 e0       	ldi	r30, 0x02	; 2
    76fe:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00007702 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7702:	a5 e2       	ldi	r26, 0x25	; 37
    7704:	b0 e0       	ldi	r27, 0x00	; 0
    7706:	e7 e8       	ldi	r30, 0x87	; 135
    7708:	fb e3       	ldi	r31, 0x3B	; 59
    770a:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    770e:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7710:	40 e0       	ldi	r20, 0x00	; 0
    7712:	50 e0       	ldi	r21, 0x00	; 0
    7714:	ba 01       	movw	r22, r20
    7716:	80 e0       	ldi	r24, 0x00	; 0
    7718:	90 e0       	ldi	r25, 0x00	; 0
    771a:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <rtc_init>
    771e:	81 11       	cpse	r24, r1
    7720:	27 c0       	rjmp	.+78     	; 0x7770 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7722:	8b ea       	ldi	r24, 0xAB	; 171
    7724:	96 e0       	ldi	r25, 0x06	; 6
    7726:	a0 e0       	ldi	r26, 0x00	; 0
    7728:	ed b7       	in	r30, 0x3d	; 61
    772a:	fe b7       	in	r31, 0x3e	; 62
    772c:	81 83       	std	Z+1, r24	; 0x01
    772e:	92 83       	std	Z+2, r25	; 0x02
    7730:	a3 83       	std	Z+3, r26	; 0x03
    7732:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("attempting rtc init\n");
    7736:	86 e9       	ldi	r24, 0x96	; 150
    7738:	96 e0       	ldi	r25, 0x06	; 6
    773a:	a0 e0       	ldi	r26, 0x00	; 0
    773c:	ed b7       	in	r30, 0x3d	; 61
    773e:	fe b7       	in	r31, 0x3e	; 62
    7740:	81 83       	std	Z+1, r24	; 0x01
    7742:	92 83       	std	Z+2, r25	; 0x02
    7744:	a3 83       	std	Z+3, r26	; 0x03
    7746:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    774a:	40 e0       	ldi	r20, 0x00	; 0
    774c:	50 e0       	ldi	r21, 0x00	; 0
    774e:	ba 01       	movw	r22, r20
    7750:	81 e0       	ldi	r24, 0x01	; 1
    7752:	90 e0       	ldi	r25, 0x00	; 0
    7754:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <rtc_init>
    7758:	81 11       	cpse	r24, r1
    775a:	0a c0       	rjmp	.+20     	; 0x7770 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    775c:	8f e7       	ldi	r24, 0x7F	; 127
    775e:	96 e0       	ldi	r25, 0x06	; 6
    7760:	a0 e0       	ldi	r26, 0x00	; 0
    7762:	ed b7       	in	r30, 0x3d	; 61
    7764:	fe b7       	in	r31, 0x3e	; 62
    7766:	81 83       	std	Z+1, r24	; 0x01
    7768:	92 83       	std	Z+2, r25	; 0x02
    776a:	a3 83       	std	Z+3, r26	; 0x03
    776c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7770:	ce 01       	movw	r24, r28
    7772:	04 96       	adiw	r24, 0x04	; 4
    7774:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <rtc_read>
    7778:	88 23       	and	r24, r24
    777a:	51 f0       	breq	.+20     	; 0x7790 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    777c:	ce 01       	movw	r24, r28
    777e:	04 96       	adiw	r24, 0x04	; 4
    7780:	fa dc       	rcall	.-1548   	; 0x7176 <timegm>
    7782:	6b 01       	movw	r12, r22
    7784:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7786:	67 2b       	or	r22, r23
    7788:	68 2b       	or	r22, r24
    778a:	69 2b       	or	r22, r25
    778c:	c1 f4       	brne	.+48     	; 0x77be <initialize_clock+0xbc>
    778e:	0a c0       	rjmp	.+20     	; 0x77a4 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7790:	85 e6       	ldi	r24, 0x65	; 101
    7792:	96 e0       	ldi	r25, 0x06	; 6
    7794:	a0 e0       	ldi	r26, 0x00	; 0
    7796:	ed b7       	in	r30, 0x3d	; 61
    7798:	fe b7       	in	r31, 0x3e	; 62
    779a:	81 83       	std	Z+1, r24	; 0x01
    779c:	92 83       	std	Z+2, r25	; 0x02
    779e:	a3 83       	std	Z+3, r26	; 0x03
    77a0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    77a4:	81 e4       	ldi	r24, 0x41	; 65
    77a6:	96 e0       	ldi	r25, 0x06	; 6
    77a8:	a0 e0       	ldi	r26, 0x00	; 0
    77aa:	ed b7       	in	r30, 0x3d	; 61
    77ac:	fe b7       	in	r31, 0x3e	; 62
    77ae:	81 83       	std	Z+1, r24	; 0x01
    77b0:	92 83       	std	Z+2, r25	; 0x02
    77b2:	a3 83       	std	Z+3, r26	; 0x03
    77b4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    77b8:	c1 2c       	mov	r12, r1
    77ba:	d1 2c       	mov	r13, r1
    77bc:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    77be:	1b a3       	std	Y+35, r17	; 0x23
    77c0:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    77c2:	1d a2       	std	Y+37, r1	; 0x25
    77c4:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    77c6:	ce 01       	movw	r24, r28
    77c8:	82 96       	adiw	r24, 0x22	; 34
    77ca:	30 da       	rcall	.-2976   	; 0x6c2c <settimezone>

    ts.tv_sec = seconds;
    77cc:	ca 8e       	std	Y+26, r12	; 0x1a
    77ce:	db 8e       	std	Y+27, r13	; 0x1b
    77d0:	ec 8e       	std	Y+28, r14	; 0x1c
    77d2:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    77d4:	1e 8e       	std	Y+30, r1	; 0x1e
    77d6:	1f 8e       	std	Y+31, r1	; 0x1f
    77d8:	18 a2       	std	Y+32, r1	; 0x20
    77da:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    77dc:	be 01       	movw	r22, r28
    77de:	66 5e       	subi	r22, 0xE6	; 230
    77e0:	7f 4f       	sbci	r23, 0xFF	; 255
    77e2:	80 e0       	ldi	r24, 0x00	; 0
    77e4:	90 e0       	ldi	r25, 0x00	; 0
    77e6:	c7 d8       	rcall	.-3698   	; 0x6976 <clock_settime>
}
    77e8:	a5 96       	adiw	r28, 0x25	; 37
    77ea:	e8 e0       	ldi	r30, 0x08	; 8
    77ec:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

000077f0 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    77f0:	a9 e2       	ldi	r26, 0x29	; 41
    77f2:	b0 e0       	ldi	r27, 0x00	; 0
    77f4:	ee ef       	ldi	r30, 0xFE	; 254
    77f6:	fb e3       	ldi	r31, 0x3B	; 59
    77f8:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    77fc:	ce 01       	movw	r24, r28
    77fe:	08 96       	adiw	r24, 0x08	; 8
    7800:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <rtc_read>
    7804:	88 23       	and	r24, r24
    7806:	29 f1       	breq	.+74     	; 0x7852 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7808:	ce 01       	movw	r24, r28
    780a:	08 96       	adiw	r24, 0x08	; 8
    780c:	b4 dc       	rcall	.-1688   	; 0x7176 <timegm>
    780e:	6e a3       	std	Y+38, r22	; 0x26
    7810:	7f a3       	std	Y+39, r23	; 0x27
    7812:	88 a7       	std	Y+40, r24	; 0x28
    7814:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7816:	ed b7       	in	r30, 0x3d	; 61
    7818:	fe b7       	in	r31, 0x3e	; 62
    781a:	64 83       	std	Z+4, r22	; 0x04
    781c:	75 83       	std	Z+5, r23	; 0x05
    781e:	86 83       	std	Z+6, r24	; 0x06
    7820:	97 83       	std	Z+7, r25	; 0x07
    7822:	8f e2       	ldi	r24, 0x2F	; 47
    7824:	96 e0       	ldi	r25, 0x06	; 6
    7826:	a0 e0       	ldi	r26, 0x00	; 0
    7828:	81 83       	std	Z+1, r24	; 0x01
    782a:	92 83       	std	Z+2, r25	; 0x02
    782c:	a3 83       	std	Z+3, r26	; 0x03
    782e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7832:	ce 01       	movw	r24, r28
    7834:	08 96       	adiw	r24, 0x08	; 8
    7836:	50 df       	rcall	.-352    	; 0x76d8 <asctime>
    7838:	ed b7       	in	r30, 0x3d	; 61
    783a:	fe b7       	in	r31, 0x3e	; 62
    783c:	95 83       	std	Z+5, r25	; 0x05
    783e:	84 83       	std	Z+4, r24	; 0x04
    7840:	8e e1       	ldi	r24, 0x1E	; 30
    7842:	96 e0       	ldi	r25, 0x06	; 6
    7844:	a0 e0       	ldi	r26, 0x00	; 0
    7846:	81 83       	std	Z+1, r24	; 0x01
    7848:	92 83       	std	Z+2, r25	; 0x02
    784a:	a3 83       	std	Z+3, r26	; 0x03
    784c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    7850:	0a c0       	rjmp	.+20     	; 0x7866 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7852:	8d e0       	ldi	r24, 0x0D	; 13
    7854:	96 e0       	ldi	r25, 0x06	; 6
    7856:	a0 e0       	ldi	r26, 0x00	; 0
    7858:	ed b7       	in	r30, 0x3d	; 61
    785a:	fe b7       	in	r31, 0x3e	; 62
    785c:	81 83       	std	Z+1, r24	; 0x01
    785e:	92 83       	std	Z+2, r25	; 0x02
    7860:	a3 83       	std	Z+3, r26	; 0x03
    7862:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7866:	be 01       	movw	r22, r28
    7868:	62 5e       	subi	r22, 0xE2	; 226
    786a:	7f 4f       	sbci	r23, 0xFF	; 255
    786c:	80 e0       	ldi	r24, 0x00	; 0
    786e:	90 e0       	ldi	r25, 0x00	; 0
    7870:	0e 94 12 32 	call	0x6424	; 0x6424 <clock_gettime>
    seconds = ts.tv_sec;
    7874:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7876:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7878:	a8 a1       	ldd	r26, Y+32	; 0x20
    787a:	b9 a1       	ldd	r27, Y+33	; 0x21
    787c:	8e a3       	std	Y+38, r24	; 0x26
    787e:	9f a3       	std	Y+39, r25	; 0x27
    7880:	a8 a7       	std	Y+40, r26	; 0x28
    7882:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7884:	ed b7       	in	r30, 0x3d	; 61
    7886:	fe b7       	in	r31, 0x3e	; 62
    7888:	84 83       	std	Z+4, r24	; 0x04
    788a:	95 83       	std	Z+5, r25	; 0x05
    788c:	a6 83       	std	Z+6, r26	; 0x06
    788e:	b7 83       	std	Z+7, r27	; 0x07
    7890:	8b ef       	ldi	r24, 0xFB	; 251
    7892:	95 e0       	ldi	r25, 0x05	; 5
    7894:	a0 e0       	ldi	r26, 0x00	; 0
    7896:	81 83       	std	Z+1, r24	; 0x01
    7898:	92 83       	std	Z+2, r25	; 0x02
    789a:	a3 83       	std	Z+3, r26	; 0x03
    789c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    78a0:	ce 01       	movw	r24, r28
    78a2:	86 96       	adiw	r24, 0x26	; 38
    78a4:	a9 d9       	rcall	.-3246   	; 0x6bf8 <gmtime>
    78a6:	18 df       	rcall	.-464    	; 0x76d8 <asctime>
    78a8:	ed b7       	in	r30, 0x3d	; 61
    78aa:	fe b7       	in	r31, 0x3e	; 62
    78ac:	95 83       	std	Z+5, r25	; 0x05
    78ae:	84 83       	std	Z+4, r24	; 0x04
    78b0:	8a ee       	ldi	r24, 0xEA	; 234
    78b2:	95 e0       	ldi	r25, 0x05	; 5
    78b4:	a0 e0       	ldi	r26, 0x00	; 0
    78b6:	81 83       	std	Z+1, r24	; 0x01
    78b8:	92 83       	std	Z+2, r25	; 0x02
    78ba:	a3 83       	std	Z+3, r26	; 0x03
    78bc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
}
    78c0:	a9 96       	adiw	r28, 0x29	; 41
    78c2:	e2 e0       	ldi	r30, 0x02	; 2
    78c4:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000078c8 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    78c8:	fc 01       	movw	r30, r24
    78ca:	84 81       	ldd	r24, Z+4	; 0x04
    78cc:	95 81       	ldd	r25, Z+5	; 0x05
    78ce:	00 97       	sbiw	r24, 0x00	; 0
    78d0:	79 f0       	breq	.+30     	; 0x78f0 <_putc_buffer_fn+0x28>
    78d2:	66 23       	and	r22, r22
    78d4:	69 f0       	breq	.+26     	; 0x78f0 <_putc_buffer_fn+0x28>
    78d6:	01 97       	sbiw	r24, 0x01	; 1
    78d8:	95 83       	std	Z+5, r25	; 0x05
    78da:	84 83       	std	Z+4, r24	; 0x04
    78dc:	86 81       	ldd	r24, Z+6	; 0x06
    78de:	97 81       	ldd	r25, Z+7	; 0x07
    78e0:	01 96       	adiw	r24, 0x01	; 1
    78e2:	97 83       	std	Z+7, r25	; 0x07
    78e4:	86 83       	std	Z+6, r24	; 0x06
    78e6:	a2 81       	ldd	r26, Z+2	; 0x02
    78e8:	b3 81       	ldd	r27, Z+3	; 0x03
    78ea:	6d 93       	st	X+, r22
    78ec:	b3 83       	std	Z+3, r27	; 0x03
    78ee:	a2 83       	std	Z+2, r26	; 0x02
    78f0:	02 80       	ldd	r0, Z+2	; 0x02
    78f2:	f3 81       	ldd	r31, Z+3	; 0x03
    78f4:	e0 2d       	mov	r30, r0
    78f6:	10 82       	st	Z, r1
    78f8:	08 95       	ret

000078fa <_putc_fn>:
    78fa:	fc 01       	movw	r30, r24
    78fc:	26 81       	ldd	r18, Z+6	; 0x06
    78fe:	37 81       	ldd	r19, Z+7	; 0x07
    7900:	2f 5f       	subi	r18, 0xFF	; 255
    7902:	3f 4f       	sbci	r19, 0xFF	; 255
    7904:	37 83       	std	Z+7, r19	; 0x07
    7906:	26 83       	std	Z+6, r18	; 0x06
    7908:	86 2f       	mov	r24, r22
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	0c 94 9f 74 	jmp	0xe93e	; 0xe93e <putchar>
    7910:	08 95       	ret

00007912 <bin2num>:
    7912:	a0 e0       	ldi	r26, 0x00	; 0
    7914:	b0 e0       	ldi	r27, 0x00	; 0
    7916:	ef e8       	ldi	r30, 0x8F	; 143
    7918:	fc e3       	ldi	r31, 0x3C	; 60
    791a:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xe>
    791e:	ea 01       	movw	r28, r20
    7920:	53 e0       	ldi	r21, 0x03	; 3
    7922:	ee 0c       	add	r14, r14
    7924:	ff 1c       	adc	r15, r15
    7926:	5a 95       	dec	r21
    7928:	e1 f7       	brne	.-8      	; 0x7922 <bin2num+0x10>
    792a:	fc 01       	movw	r30, r24
    792c:	af 01       	movw	r20, r30
    792e:	48 1b       	sub	r20, r24
    7930:	59 0b       	sbc	r21, r25
    7932:	c4 17       	cp	r28, r20
    7934:	d5 07       	cpc	r29, r21
    7936:	14 f0       	brlt	.+4      	; 0x793c <bin2num+0x2a>
    7938:	11 92       	st	Z+, r1
    793a:	f8 cf       	rjmp	.-16     	; 0x792c <bin2num+0x1a>
    793c:	41 e0       	ldi	r20, 0x01	; 1
    793e:	e4 1a       	sub	r14, r20
    7940:	f1 08       	sbc	r15, r1
    7942:	5b 01       	movw	r10, r22
    7944:	42 e0       	ldi	r20, 0x02	; 2
    7946:	a4 1a       	sub	r10, r20
    7948:	b1 08       	sbc	r11, r1
    794a:	f7 fc       	sbrc	r15, 7
    794c:	3b c0       	rjmp	.+118    	; 0x79c4 <bin2num+0xb2>
    794e:	f7 01       	movw	r30, r14
    7950:	43 e0       	ldi	r20, 0x03	; 3
    7952:	f5 95       	asr	r31
    7954:	e7 95       	ror	r30
    7956:	4a 95       	dec	r20
    7958:	e1 f7       	brne	.-8      	; 0x7952 <bin2num+0x40>
    795a:	e0 0f       	add	r30, r16
    795c:	f1 1f       	adc	r31, r17
    795e:	40 81       	ld	r20, Z
    7960:	50 e0       	ldi	r21, 0x00	; 0
    7962:	f7 01       	movw	r30, r14
    7964:	e7 70       	andi	r30, 0x07	; 7
    7966:	ff 27       	eor	r31, r31
    7968:	02 c0       	rjmp	.+4      	; 0x796e <bin2num+0x5c>
    796a:	55 95       	asr	r21
    796c:	47 95       	ror	r20
    796e:	ea 95       	dec	r30
    7970:	e2 f7       	brpl	.-8      	; 0x796a <bin2num+0x58>
    7972:	41 70       	andi	r20, 0x01	; 1
    7974:	55 27       	eor	r21, r21
    7976:	dc 01       	movw	r26, r24
    7978:	e0 e0       	ldi	r30, 0x00	; 0
    797a:	f0 e0       	ldi	r31, 0x00	; 0
    797c:	ec 17       	cp	r30, r28
    797e:	fd 07       	cpc	r31, r29
    7980:	ec f4       	brge	.+58     	; 0x79bc <bin2num+0xaa>
    7982:	ea 15       	cp	r30, r10
    7984:	fb 05       	cpc	r31, r11
    7986:	4c f0       	brlt	.+18     	; 0x799a <bin2num+0x88>
    7988:	dc 01       	movw	r26, r24
    798a:	ae 0f       	add	r26, r30
    798c:	bf 1f       	adc	r27, r31
    798e:	1c 92       	st	X, r1
    7990:	41 e0       	ldi	r20, 0x01	; 1
    7992:	e4 1a       	sub	r14, r20
    7994:	f1 08       	sbc	r15, r1
    7996:	ef 01       	movw	r28, r30
    7998:	d8 cf       	rjmp	.-80     	; 0x794a <bin2num+0x38>
    799a:	9c 90       	ld	r9, X
    799c:	99 0c       	add	r9, r9
    799e:	94 2a       	or	r9, r20
    79a0:	49 2d       	mov	r20, r9
    79a2:	50 e0       	ldi	r21, 0x00	; 0
    79a4:	42 17       	cp	r20, r18
    79a6:	53 07       	cpc	r21, r19
    79a8:	24 f0       	brlt	.+8      	; 0x79b2 <bin2num+0xa0>
    79aa:	92 1a       	sub	r9, r18
    79ac:	41 e0       	ldi	r20, 0x01	; 1
    79ae:	50 e0       	ldi	r21, 0x00	; 0
    79b0:	02 c0       	rjmp	.+4      	; 0x79b6 <bin2num+0xa4>
    79b2:	40 e0       	ldi	r20, 0x00	; 0
    79b4:	50 e0       	ldi	r21, 0x00	; 0
    79b6:	9d 92       	st	X+, r9
    79b8:	31 96       	adiw	r30, 0x01	; 1
    79ba:	e0 cf       	rjmp	.-64     	; 0x797c <bin2num+0x6a>
    79bc:	41 15       	cp	r20, r1
    79be:	51 05       	cpc	r21, r1
    79c0:	01 f7       	brne	.-64     	; 0x7982 <bin2num+0x70>
    79c2:	e2 cf       	rjmp	.-60     	; 0x7988 <bin2num+0x76>
    79c4:	fc 01       	movw	r30, r24
    79c6:	9f 01       	movw	r18, r30
    79c8:	28 1b       	sub	r18, r24
    79ca:	39 0b       	sbc	r19, r25
    79cc:	2c 17       	cp	r18, r28
    79ce:	3d 07       	cpc	r19, r29
    79d0:	4c f4       	brge	.+18     	; 0x79e4 <bin2num+0xd2>
    79d2:	20 81       	ld	r18, Z
    79d4:	2a 30       	cpi	r18, 0x0A	; 10
    79d6:	10 f4       	brcc	.+4      	; 0x79dc <bin2num+0xca>
    79d8:	20 5d       	subi	r18, 0xD0	; 208
    79da:	01 c0       	rjmp	.+2      	; 0x79de <bin2num+0xcc>
    79dc:	29 5a       	subi	r18, 0xA9	; 169
    79de:	20 83       	st	Z, r18
    79e0:	31 96       	adiw	r30, 0x01	; 1
    79e2:	f1 cf       	rjmp	.-30     	; 0x79c6 <bin2num+0xb4>
    79e4:	9e 01       	movw	r18, r28
    79e6:	d7 ff       	sbrs	r29, 7
    79e8:	02 c0       	rjmp	.+4      	; 0x79ee <bin2num+0xdc>
    79ea:	20 e0       	ldi	r18, 0x00	; 0
    79ec:	30 e0       	ldi	r19, 0x00	; 0
    79ee:	c1 14       	cp	r12, r1
    79f0:	d1 04       	cpc	r13, r1
    79f2:	61 f0       	breq	.+24     	; 0x7a0c <bin2num+0xfa>
    79f4:	61 50       	subi	r22, 0x01	; 1
    79f6:	71 09       	sbc	r23, r1
    79f8:	26 17       	cp	r18, r22
    79fa:	37 07       	cpc	r19, r23
    79fc:	3c f4       	brge	.+14     	; 0x7a0c <bin2num+0xfa>
    79fe:	fc 01       	movw	r30, r24
    7a00:	e2 0f       	add	r30, r18
    7a02:	f3 1f       	adc	r31, r19
    7a04:	c0 82       	st	Z, r12
    7a06:	21 96       	adiw	r28, 0x01	; 1
    7a08:	2f 5f       	subi	r18, 0xFF	; 255
    7a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a0c:	fc 01       	movw	r30, r24
    7a0e:	e2 0f       	add	r30, r18
    7a10:	f3 1f       	adc	r31, r19
    7a12:	10 82       	st	Z, r1
    7a14:	0e 94 c9 2f 	call	0x5f92	; 0x5f92 <reverse>
    7a18:	ce 01       	movw	r24, r28
    7a1a:	cd b7       	in	r28, 0x3d	; 61
    7a1c:	de b7       	in	r29, 0x3e	; 62
    7a1e:	eb e0       	ldi	r30, 0x0B	; 11
    7a20:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xe>

00007a24 <pch>:
    7a24:	fc 01       	movw	r30, r24
    7a26:	22 81       	ldd	r18, Z+2	; 0x02
    7a28:	33 81       	ldd	r19, Z+3	; 0x03
    7a2a:	44 81       	ldd	r20, Z+4	; 0x04
    7a2c:	55 81       	ldd	r21, Z+5	; 0x05
    7a2e:	80 81       	ld	r24, Z
    7a30:	91 81       	ldd	r25, Z+1	; 0x01
    7a32:	24 17       	cp	r18, r20
    7a34:	35 07       	cpc	r19, r21
    7a36:	54 f4       	brge	.+20     	; 0x7a4c <pch+0x28>
    7a38:	a9 01       	movw	r20, r18
    7a3a:	4f 5f       	subi	r20, 0xFF	; 255
    7a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    7a3e:	53 83       	std	Z+3, r21	; 0x03
    7a40:	42 83       	std	Z+2, r20	; 0x02
    7a42:	dc 01       	movw	r26, r24
    7a44:	a2 0f       	add	r26, r18
    7a46:	b3 1f       	adc	r27, r19
    7a48:	6c 93       	st	X, r22
    7a4a:	04 c0       	rjmp	.+8      	; 0x7a54 <pch+0x30>
    7a4c:	dc 01       	movw	r26, r24
    7a4e:	a2 0f       	add	r26, r18
    7a50:	b3 1f       	adc	r27, r19
    7a52:	1c 92       	st	X, r1
    7a54:	82 81       	ldd	r24, Z+2	; 0x02
    7a56:	93 81       	ldd	r25, Z+3	; 0x03
    7a58:	08 95       	ret

00007a5a <p_ntoa>:
    7a5a:	af 92       	push	r10
    7a5c:	cf 92       	push	r12
    7a5e:	df 92       	push	r13
    7a60:	ef 92       	push	r14
    7a62:	ff 92       	push	r15
    7a64:	0f 93       	push	r16
    7a66:	1f 93       	push	r17
    7a68:	cf 93       	push	r28
    7a6a:	df 93       	push	r29
    7a6c:	dc 01       	movw	r26, r24
    7a6e:	eb 01       	movw	r28, r22
    7a70:	fa 01       	movw	r30, r20
    7a72:	b9 01       	movw	r22, r18
    7a74:	98 01       	movw	r18, r16
    7a76:	a6 01       	movw	r20, r12
    7a78:	9a 2d       	mov	r25, r10
    7a7a:	a5 fa       	bst	r10, 5
    7a7c:	cc 24       	eor	r12, r12
    7a7e:	c0 f8       	bld	r12, 0
    7a80:	a6 fc       	sbrc	r10, 6
    7a82:	07 c0       	rjmp	.+14     	; 0x7a92 <p_ntoa+0x38>
    7a84:	a2 fc       	sbrc	r10, 2
    7a86:	08 c0       	rjmp	.+16     	; 0x7a98 <p_ntoa+0x3e>
    7a88:	a4 fe       	sbrs	r10, 4
    7a8a:	09 c0       	rjmp	.+18     	; 0x7a9e <p_ntoa+0x44>
    7a8c:	00 e2       	ldi	r16, 0x20	; 32
    7a8e:	10 e0       	ldi	r17, 0x00	; 0
    7a90:	08 c0       	rjmp	.+16     	; 0x7aa2 <p_ntoa+0x48>
    7a92:	0d e2       	ldi	r16, 0x2D	; 45
    7a94:	10 e0       	ldi	r17, 0x00	; 0
    7a96:	05 c0       	rjmp	.+10     	; 0x7aa2 <p_ntoa+0x48>
    7a98:	0b e2       	ldi	r16, 0x2B	; 43
    7a9a:	10 e0       	ldi	r17, 0x00	; 0
    7a9c:	02 c0       	rjmp	.+4      	; 0x7aa2 <p_ntoa+0x48>
    7a9e:	00 e0       	ldi	r16, 0x00	; 0
    7aa0:	10 e0       	ldi	r17, 0x00	; 0
    7aa2:	95 ff       	sbrs	r25, 5
    7aa4:	04 c0       	rjmp	.+8      	; 0x7aae <p_ntoa+0x54>
    7aa6:	89 2f       	mov	r24, r25
    7aa8:	8a 70       	andi	r24, 0x0A	; 10
    7aaa:	09 f0       	breq	.+2      	; 0x7aae <p_ntoa+0x54>
    7aac:	c1 2c       	mov	r12, r1
    7aae:	c0 fa       	bst	r12, 0
    7ab0:	95 f9       	bld	r25, 5
    7ab2:	89 2f       	mov	r24, r25
    7ab4:	82 70       	andi	r24, 0x02	; 2
    7ab6:	c8 2e       	mov	r12, r24
    7ab8:	91 fd       	sbrc	r25, 1
    7aba:	02 c0       	rjmp	.+4      	; 0x7ac0 <p_ntoa+0x66>
    7abc:	40 e0       	ldi	r20, 0x00	; 0
    7abe:	50 e0       	ldi	r21, 0x00	; 0
    7ac0:	89 2f       	mov	r24, r25
    7ac2:	83 70       	andi	r24, 0x03	; 3
    7ac4:	11 f4       	brne	.+4      	; 0x7aca <p_ntoa+0x70>
    7ac6:	41 e0       	ldi	r20, 0x01	; 1
    7ac8:	50 e0       	ldi	r21, 0x00	; 0
    7aca:	90 ff       	sbrs	r25, 0
    7acc:	0c c0       	rjmp	.+24     	; 0x7ae6 <p_ntoa+0x8c>
    7ace:	95 fd       	sbrc	r25, 5
    7ad0:	05 c0       	rjmp	.+10     	; 0x7adc <p_ntoa+0x82>
    7ad2:	c1 10       	cpse	r12, r1
    7ad4:	08 c0       	rjmp	.+16     	; 0x7ae6 <p_ntoa+0x8c>
    7ad6:	41 e0       	ldi	r20, 0x01	; 1
    7ad8:	50 e0       	ldi	r21, 0x00	; 0
    7ada:	05 c0       	rjmp	.+10     	; 0x7ae6 <p_ntoa+0x8c>
    7adc:	94 75       	andi	r25, 0x54	; 84
    7ade:	a7 01       	movw	r20, r14
    7ae0:	11 f0       	breq	.+4      	; 0x7ae6 <p_ntoa+0x8c>
    7ae2:	41 50       	subi	r20, 0x01	; 1
    7ae4:	51 09       	sbc	r21, r1
    7ae6:	68 01       	movw	r12, r16
    7ae8:	7e 01       	movw	r14, r28
    7aea:	8d 01       	movw	r16, r26
    7aec:	cf 01       	movw	r24, r30
    7aee:	11 df       	rcall	.-478    	; 0x7912 <bin2num>
    7af0:	df 91       	pop	r29
    7af2:	cf 91       	pop	r28
    7af4:	1f 91       	pop	r17
    7af6:	0f 91       	pop	r16
    7af8:	ff 90       	pop	r15
    7afa:	ef 90       	pop	r14
    7afc:	df 90       	pop	r13
    7afe:	cf 90       	pop	r12
    7b00:	af 90       	pop	r10
    7b02:	08 95       	ret

00007b04 <p_ftoa>:
    7b04:	aa e0       	ldi	r26, 0x0A	; 10
    7b06:	b0 e0       	ldi	r27, 0x00	; 0
    7b08:	e8 e8       	ldi	r30, 0x88	; 136
    7b0a:	fd e3       	ldi	r31, 0x3D	; 61
    7b0c:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    7b10:	4b 01       	movw	r8, r22
    7b12:	5c 01       	movw	r10, r24
    7b14:	1a 01       	movw	r2, r20
    7b16:	28 01       	movw	r4, r16
    7b18:	c6 fa       	bst	r12, 6
    7b1a:	11 27       	eor	r17, r17
    7b1c:	10 f9       	bld	r17, 0
    7b1e:	5a 83       	std	Y+2, r21	; 0x02
    7b20:	49 83       	std	Y+1, r20	; 0x01
    7b22:	1c 82       	std	Y+4, r1	; 0x04
    7b24:	1b 82       	std	Y+3, r1	; 0x03
    7b26:	21 50       	subi	r18, 0x01	; 1
    7b28:	31 09       	sbc	r19, r1
    7b2a:	3e 83       	std	Y+6, r19	; 0x06
    7b2c:	2d 83       	std	Y+5, r18	; 0x05
    7b2e:	fa 01       	movw	r30, r20
    7b30:	10 82       	st	Z, r1
    7b32:	20 e0       	ldi	r18, 0x00	; 0
    7b34:	30 e0       	ldi	r19, 0x00	; 0
    7b36:	a9 01       	movw	r20, r18
    7b38:	0e 94 aa e3 	call	0x1c754	; 0x1c754 <__cmpsf2>
    7b3c:	87 ff       	sbrs	r24, 7
    7b3e:	05 c0       	rjmp	.+10     	; 0x7b4a <p_ftoa+0x46>
    7b40:	b7 fa       	bst	r11, 7
    7b42:	b0 94       	com	r11
    7b44:	b7 f8       	bld	r11, 7
    7b46:	b0 94       	com	r11
    7b48:	11 e0       	ldi	r17, 0x01	; 1
    7b4a:	10 fb       	bst	r17, 0
    7b4c:	c6 f8       	bld	r12, 6
    7b4e:	c6 fe       	sbrs	r12, 6
    7b50:	02 c0       	rjmp	.+4      	; 0x7b56 <p_ftoa+0x52>
    7b52:	6d e2       	ldi	r22, 0x2D	; 45
    7b54:	07 c0       	rjmp	.+14     	; 0x7b64 <p_ftoa+0x60>
    7b56:	c2 fe       	sbrs	r12, 2
    7b58:	02 c0       	rjmp	.+4      	; 0x7b5e <p_ftoa+0x5a>
    7b5a:	6b e2       	ldi	r22, 0x2B	; 43
    7b5c:	03 c0       	rjmp	.+6      	; 0x7b64 <p_ftoa+0x60>
    7b5e:	c4 fe       	sbrs	r12, 4
    7b60:	04 c0       	rjmp	.+8      	; 0x7b6a <p_ftoa+0x66>
    7b62:	60 e2       	ldi	r22, 0x20	; 32
    7b64:	ce 01       	movw	r24, r28
    7b66:	01 96       	adiw	r24, 0x01	; 1
    7b68:	5d df       	rcall	.-326    	; 0x7a24 <pch>
    7b6a:	37 01       	movw	r6, r14
    7b6c:	f7 fe       	sbrs	r15, 7
    7b6e:	02 c0       	rjmp	.+4      	; 0x7b74 <p_ftoa+0x70>
    7b70:	61 2c       	mov	r6, r1
    7b72:	71 2c       	mov	r7, r1
    7b74:	20 e0       	ldi	r18, 0x00	; 0
    7b76:	30 e0       	ldi	r19, 0x00	; 0
    7b78:	a9 01       	movw	r20, r18
    7b7a:	c5 01       	movw	r24, r10
    7b7c:	b4 01       	movw	r22, r8
    7b7e:	0e 94 aa e3 	call	0x1c754	; 0x1c754 <__cmpsf2>
    7b82:	88 23       	and	r24, r24
    7b84:	d1 f1       	breq	.+116    	; 0x7bfa <p_ftoa+0xf6>
    7b86:	c1 fe       	sbrs	r12, 1
    7b88:	11 c0       	rjmp	.+34     	; 0x7bac <p_ftoa+0xa8>
    7b8a:	83 01       	movw	r16, r6
    7b8c:	60 e0       	ldi	r22, 0x00	; 0
    7b8e:	70 e0       	ldi	r23, 0x00	; 0
    7b90:	80 e0       	ldi	r24, 0x00	; 0
    7b92:	9f e3       	ldi	r25, 0x3F	; 63
    7b94:	01 15       	cp	r16, r1
    7b96:	11 05       	cpc	r17, r1
    7b98:	69 f0       	breq	.+26     	; 0x7bb4 <p_ftoa+0xb0>
    7b9a:	20 e0       	ldi	r18, 0x00	; 0
    7b9c:	30 e0       	ldi	r19, 0x00	; 0
    7b9e:	40 e2       	ldi	r20, 0x20	; 32
    7ba0:	51 e4       	ldi	r21, 0x41	; 65
    7ba2:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    7ba6:	01 50       	subi	r16, 0x01	; 1
    7ba8:	11 09       	sbc	r17, r1
    7baa:	f4 cf       	rjmp	.-24     	; 0x7b94 <p_ftoa+0x90>
    7bac:	60 e0       	ldi	r22, 0x00	; 0
    7bae:	70 e0       	ldi	r23, 0x00	; 0
    7bb0:	80 e0       	ldi	r24, 0x00	; 0
    7bb2:	9f e3       	ldi	r25, 0x3F	; 63
    7bb4:	9b 01       	movw	r18, r22
    7bb6:	ac 01       	movw	r20, r24
    7bb8:	c5 01       	movw	r24, r10
    7bba:	b4 01       	movw	r22, r8
    7bbc:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__addsf3>
    7bc0:	4b 01       	movw	r8, r22
    7bc2:	5c 01       	movw	r10, r24
    7bc4:	ee 24       	eor	r14, r14
    7bc6:	e3 94       	inc	r14
    7bc8:	f1 2c       	mov	r15, r1
    7bca:	20 e0       	ldi	r18, 0x00	; 0
    7bcc:	30 e0       	ldi	r19, 0x00	; 0
    7bce:	40 e2       	ldi	r20, 0x20	; 32
    7bd0:	51 e4       	ldi	r21, 0x41	; 65
    7bd2:	c5 01       	movw	r24, r10
    7bd4:	b4 01       	movw	r22, r8
    7bd6:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__gesf2>
    7bda:	87 fd       	sbrc	r24, 7
    7bdc:	11 c0       	rjmp	.+34     	; 0x7c00 <p_ftoa+0xfc>
    7bde:	ff ef       	ldi	r31, 0xFF	; 255
    7be0:	ef 1a       	sub	r14, r31
    7be2:	ff 0a       	sbc	r15, r31
    7be4:	20 e0       	ldi	r18, 0x00	; 0
    7be6:	30 e0       	ldi	r19, 0x00	; 0
    7be8:	40 e2       	ldi	r20, 0x20	; 32
    7bea:	51 e4       	ldi	r21, 0x41	; 65
    7bec:	c5 01       	movw	r24, r10
    7bee:	b4 01       	movw	r22, r8
    7bf0:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    7bf4:	4b 01       	movw	r8, r22
    7bf6:	5c 01       	movw	r10, r24
    7bf8:	e8 cf       	rjmp	.-48     	; 0x7bca <p_ftoa+0xc6>
    7bfa:	ee 24       	eor	r14, r14
    7bfc:	e3 94       	inc	r14
    7bfe:	f1 2c       	mov	r15, r1
    7c00:	8c 2d       	mov	r24, r12
    7c02:	88 72       	andi	r24, 0x28	; 40
    7c04:	80 32       	cpi	r24, 0x20	; 32
    7c06:	c1 f4       	brne	.+48     	; 0x7c38 <p_ftoa+0x134>
    7c08:	82 01       	movw	r16, r4
    7c0a:	0e 19       	sub	r16, r14
    7c0c:	1f 09       	sbc	r17, r15
    7c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    7c10:	9c 81       	ldd	r25, Y+4	; 0x04
    7c12:	08 1b       	sub	r16, r24
    7c14:	19 0b       	sbc	r17, r25
    7c16:	c1 fe       	sbrs	r12, 1
    7c18:	07 c0       	rjmp	.+14     	; 0x7c28 <p_ftoa+0x124>
    7c1a:	61 14       	cp	r6, r1
    7c1c:	71 04       	cpc	r7, r1
    7c1e:	21 f0       	breq	.+8      	; 0x7c28 <p_ftoa+0x124>
    7c20:	06 19       	sub	r16, r6
    7c22:	17 09       	sbc	r17, r7
    7c24:	01 50       	subi	r16, 0x01	; 1
    7c26:	11 09       	sbc	r17, r1
    7c28:	10 16       	cp	r1, r16
    7c2a:	11 06       	cpc	r1, r17
    7c2c:	2c f4       	brge	.+10     	; 0x7c38 <p_ftoa+0x134>
    7c2e:	60 e3       	ldi	r22, 0x30	; 48
    7c30:	ce 01       	movw	r24, r28
    7c32:	01 96       	adiw	r24, 0x01	; 1
    7c34:	f7 de       	rcall	.-530    	; 0x7a24 <pch>
    7c36:	f6 cf       	rjmp	.-20     	; 0x7c24 <p_ftoa+0x120>
    7c38:	c5 01       	movw	r24, r10
    7c3a:	b4 01       	movw	r22, r8
    7c3c:	0e 94 16 e4 	call	0x1c82c	; 0x1c82c <__fixsfsi>
    7c40:	6f 83       	std	Y+7, r22	; 0x07
    7c42:	78 87       	std	Y+8, r23	; 0x08
    7c44:	89 87       	std	Y+9, r24	; 0x09
    7c46:	9a 87       	std	Y+10, r25	; 0x0a
    7c48:	6f 81       	ldd	r22, Y+7	; 0x07
    7c4a:	60 5d       	subi	r22, 0xD0	; 208
    7c4c:	ce 01       	movw	r24, r28
    7c4e:	01 96       	adiw	r24, 0x01	; 1
    7c50:	e9 de       	rcall	.-558    	; 0x7a24 <pch>
    7c52:	2f 81       	ldd	r18, Y+7	; 0x07
    7c54:	38 85       	ldd	r19, Y+8	; 0x08
    7c56:	b9 01       	movw	r22, r18
    7c58:	33 0f       	add	r19, r19
    7c5a:	88 0b       	sbc	r24, r24
    7c5c:	99 0b       	sbc	r25, r25
    7c5e:	0e 94 49 e4 	call	0x1c892	; 0x1c892 <__floatsisf>
    7c62:	9b 01       	movw	r18, r22
    7c64:	ac 01       	movw	r20, r24
    7c66:	c5 01       	movw	r24, r10
    7c68:	b4 01       	movw	r22, r8
    7c6a:	0e 94 45 e3 	call	0x1c68a	; 0x1c68a <__subsf3>
    7c6e:	31 e0       	ldi	r19, 0x01	; 1
    7c70:	e3 1a       	sub	r14, r19
    7c72:	f1 08       	sbc	r15, r1
    7c74:	20 e0       	ldi	r18, 0x00	; 0
    7c76:	30 e0       	ldi	r19, 0x00	; 0
    7c78:	40 e2       	ldi	r20, 0x20	; 32
    7c7a:	51 e4       	ldi	r21, 0x41	; 65
    7c7c:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    7c80:	4b 01       	movw	r8, r22
    7c82:	5c 01       	movw	r10, r24
    7c84:	e1 14       	cp	r14, r1
    7c86:	f1 04       	cpc	r15, r1
    7c88:	b9 f6       	brne	.-82     	; 0x7c38 <p_ftoa+0x134>
    7c8a:	c1 fc       	sbrc	r12, 1
    7c8c:	10 c0       	rjmp	.+32     	; 0x7cae <p_ftoa+0x1aa>
    7c8e:	60 e0       	ldi	r22, 0x00	; 0
    7c90:	ce 01       	movw	r24, r28
    7c92:	01 96       	adiw	r24, 0x01	; 1
    7c94:	c7 de       	rcall	.-626    	; 0x7a24 <pch>
    7c96:	f1 01       	movw	r30, r2
    7c98:	01 90       	ld	r0, Z+
    7c9a:	00 20       	and	r0, r0
    7c9c:	e9 f7       	brne	.-6      	; 0x7c98 <p_ftoa+0x194>
    7c9e:	31 97       	sbiw	r30, 0x01	; 1
    7ca0:	cf 01       	movw	r24, r30
    7ca2:	82 19       	sub	r24, r2
    7ca4:	93 09       	sbc	r25, r3
    7ca6:	2a 96       	adiw	r28, 0x0a	; 10
    7ca8:	e2 e1       	ldi	r30, 0x12	; 18
    7caa:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>
    7cae:	61 14       	cp	r6, r1
    7cb0:	71 04       	cpc	r7, r1
    7cb2:	69 f3       	breq	.-38     	; 0x7c8e <p_ftoa+0x18a>
    7cb4:	6e e2       	ldi	r22, 0x2E	; 46
    7cb6:	ce 01       	movw	r24, r28
    7cb8:	01 96       	adiw	r24, 0x01	; 1
    7cba:	b4 de       	rcall	.-664    	; 0x7a24 <pch>
    7cbc:	c5 01       	movw	r24, r10
    7cbe:	b4 01       	movw	r22, r8
    7cc0:	0e 94 16 e4 	call	0x1c82c	; 0x1c82c <__fixsfsi>
    7cc4:	6b 01       	movw	r12, r22
    7cc6:	7c 01       	movw	r14, r24
    7cc8:	07 2e       	mov	r0, r23
    7cca:	00 0c       	add	r0, r0
    7ccc:	88 0b       	sbc	r24, r24
    7cce:	99 0b       	sbc	r25, r25
    7cd0:	0e 94 49 e4 	call	0x1c892	; 0x1c892 <__floatsisf>
    7cd4:	9b 01       	movw	r18, r22
    7cd6:	ac 01       	movw	r20, r24
    7cd8:	c5 01       	movw	r24, r10
    7cda:	b4 01       	movw	r22, r8
    7cdc:	0e 94 45 e3 	call	0x1c68a	; 0x1c68a <__subsf3>
    7ce0:	4b 01       	movw	r8, r22
    7ce2:	5c 01       	movw	r10, r24
    7ce4:	b6 01       	movw	r22, r12
    7ce6:	60 5d       	subi	r22, 0xD0	; 208
    7ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    7cea:	ce 01       	movw	r24, r28
    7cec:	01 96       	adiw	r24, 0x01	; 1
    7cee:	9a de       	rcall	.-716    	; 0x7a24 <pch>
    7cf0:	81 e0       	ldi	r24, 0x01	; 1
    7cf2:	68 1a       	sub	r6, r24
    7cf4:	71 08       	sbc	r7, r1
    7cf6:	20 e0       	ldi	r18, 0x00	; 0
    7cf8:	30 e0       	ldi	r19, 0x00	; 0
    7cfa:	40 e2       	ldi	r20, 0x20	; 32
    7cfc:	51 e4       	ldi	r21, 0x41	; 65
    7cfe:	c5 01       	movw	r24, r10
    7d00:	b4 01       	movw	r22, r8
    7d02:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    7d06:	4b 01       	movw	r8, r22
    7d08:	5c 01       	movw	r10, r24
    7d0a:	61 14       	cp	r6, r1
    7d0c:	71 04       	cpc	r7, r1
    7d0e:	b1 f6       	brne	.-84     	; 0x7cbc <p_ftoa+0x1b8>
    7d10:	be cf       	rjmp	.-132    	; 0x7c8e <p_ftoa+0x18a>

00007d12 <p_etoa>:
    7d12:	a3 e1       	ldi	r26, 0x13	; 19
    7d14:	b0 e0       	ldi	r27, 0x00	; 0
    7d16:	ef e8       	ldi	r30, 0x8F	; 143
    7d18:	fe e3       	ldi	r31, 0x3E	; 62
    7d1a:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    7d1e:	4b 01       	movw	r8, r22
    7d20:	5c 01       	movw	r10, r24
    7d22:	59 8b       	std	Y+17, r21	; 0x11
    7d24:	48 8b       	std	Y+16, r20	; 0x10
    7d26:	1b 8b       	std	Y+19, r17	; 0x13
    7d28:	0a 8b       	std	Y+18, r16	; 0x12
    7d2a:	3c 2c       	mov	r3, r12
    7d2c:	c6 fa       	bst	r12, 6
    7d2e:	11 27       	eor	r17, r17
    7d30:	10 f9       	bld	r17, 0
    7d32:	59 87       	std	Y+9, r21	; 0x09
    7d34:	48 87       	std	Y+8, r20	; 0x08
    7d36:	1b 86       	std	Y+11, r1	; 0x0b
    7d38:	1a 86       	std	Y+10, r1	; 0x0a
    7d3a:	21 50       	subi	r18, 0x01	; 1
    7d3c:	31 09       	sbc	r19, r1
    7d3e:	3d 87       	std	Y+13, r19	; 0x0d
    7d40:	2c 87       	std	Y+12, r18	; 0x0c
    7d42:	fa 01       	movw	r30, r20
    7d44:	10 82       	st	Z, r1
    7d46:	20 e0       	ldi	r18, 0x00	; 0
    7d48:	30 e0       	ldi	r19, 0x00	; 0
    7d4a:	a9 01       	movw	r20, r18
    7d4c:	0e 94 aa e3 	call	0x1c754	; 0x1c754 <__cmpsf2>
    7d50:	87 ff       	sbrs	r24, 7
    7d52:	05 c0       	rjmp	.+10     	; 0x7d5e <p_etoa+0x4c>
    7d54:	b7 fa       	bst	r11, 7
    7d56:	b0 94       	com	r11
    7d58:	b7 f8       	bld	r11, 7
    7d5a:	b0 94       	com	r11
    7d5c:	11 e0       	ldi	r17, 0x01	; 1
    7d5e:	10 fb       	bst	r17, 0
    7d60:	36 f8       	bld	r3, 6
    7d62:	36 fe       	sbrs	r3, 6
    7d64:	02 c0       	rjmp	.+4      	; 0x7d6a <p_etoa+0x58>
    7d66:	6d e2       	ldi	r22, 0x2D	; 45
    7d68:	07 c0       	rjmp	.+14     	; 0x7d78 <p_etoa+0x66>
    7d6a:	32 fe       	sbrs	r3, 2
    7d6c:	02 c0       	rjmp	.+4      	; 0x7d72 <p_etoa+0x60>
    7d6e:	6b e2       	ldi	r22, 0x2B	; 43
    7d70:	03 c0       	rjmp	.+6      	; 0x7d78 <p_etoa+0x66>
    7d72:	34 fe       	sbrs	r3, 4
    7d74:	04 c0       	rjmp	.+8      	; 0x7d7e <p_etoa+0x6c>
    7d76:	60 e2       	ldi	r22, 0x20	; 32
    7d78:	ce 01       	movw	r24, r28
    7d7a:	08 96       	adiw	r24, 0x08	; 8
    7d7c:	53 de       	rcall	.-858    	; 0x7a24 <pch>
    7d7e:	37 01       	movw	r6, r14
    7d80:	f7 fe       	sbrs	r15, 7
    7d82:	02 c0       	rjmp	.+4      	; 0x7d88 <p_etoa+0x76>
    7d84:	61 2c       	mov	r6, r1
    7d86:	71 2c       	mov	r7, r1
    7d88:	1f 86       	std	Y+15, r1	; 0x0f
    7d8a:	1e 86       	std	Y+14, r1	; 0x0e
    7d8c:	20 e0       	ldi	r18, 0x00	; 0
    7d8e:	30 e0       	ldi	r19, 0x00	; 0
    7d90:	a9 01       	movw	r20, r18
    7d92:	c5 01       	movw	r24, r10
    7d94:	b4 01       	movw	r22, r8
    7d96:	0e 94 aa e3 	call	0x1c754	; 0x1c754 <__cmpsf2>
    7d9a:	f3 2d       	mov	r31, r3
    7d9c:	f2 70       	andi	r31, 0x02	; 2
    7d9e:	2f 2e       	mov	r2, r31
    7da0:	88 23       	and	r24, r24
    7da2:	09 f4       	brne	.+2      	; 0x7da6 <p_etoa+0x94>
    7da4:	70 c0       	rjmp	.+224    	; 0x7e86 <p_etoa+0x174>
    7da6:	ff 23       	and	r31, r31
    7da8:	b1 f0       	breq	.+44     	; 0x7dd6 <p_etoa+0xc4>
    7daa:	83 01       	movw	r16, r6
    7dac:	c1 2c       	mov	r12, r1
    7dae:	d1 2c       	mov	r13, r1
    7db0:	e1 2c       	mov	r14, r1
    7db2:	2f e3       	ldi	r18, 0x3F	; 63
    7db4:	f2 2e       	mov	r15, r18
    7db6:	01 15       	cp	r16, r1
    7db8:	11 05       	cpc	r17, r1
    7dba:	91 f0       	breq	.+36     	; 0x7de0 <p_etoa+0xce>
    7dbc:	20 e0       	ldi	r18, 0x00	; 0
    7dbe:	30 e0       	ldi	r19, 0x00	; 0
    7dc0:	40 e2       	ldi	r20, 0x20	; 32
    7dc2:	51 e4       	ldi	r21, 0x41	; 65
    7dc4:	c7 01       	movw	r24, r14
    7dc6:	b6 01       	movw	r22, r12
    7dc8:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    7dcc:	6b 01       	movw	r12, r22
    7dce:	7c 01       	movw	r14, r24
    7dd0:	01 50       	subi	r16, 0x01	; 1
    7dd2:	11 09       	sbc	r17, r1
    7dd4:	f0 cf       	rjmp	.-32     	; 0x7db6 <p_etoa+0xa4>
    7dd6:	c1 2c       	mov	r12, r1
    7dd8:	d1 2c       	mov	r13, r1
    7dda:	e1 2c       	mov	r14, r1
    7ddc:	9f e3       	ldi	r25, 0x3F	; 63
    7dde:	f9 2e       	mov	r15, r25
    7de0:	41 2c       	mov	r4, r1
    7de2:	51 2c       	mov	r5, r1
    7de4:	82 01       	movw	r16, r4
    7de6:	01 50       	subi	r16, 0x01	; 1
    7de8:	11 09       	sbc	r17, r1
    7dea:	20 e0       	ldi	r18, 0x00	; 0
    7dec:	30 e0       	ldi	r19, 0x00	; 0
    7dee:	40 e8       	ldi	r20, 0x80	; 128
    7df0:	5f e3       	ldi	r21, 0x3F	; 63
    7df2:	c5 01       	movw	r24, r10
    7df4:	b4 01       	movw	r22, r8
    7df6:	0e 94 aa e3 	call	0x1c754	; 0x1c754 <__cmpsf2>
    7dfa:	87 ff       	sbrs	r24, 7
    7dfc:	0c c0       	rjmp	.+24     	; 0x7e16 <p_etoa+0x104>
    7dfe:	20 e0       	ldi	r18, 0x00	; 0
    7e00:	30 e0       	ldi	r19, 0x00	; 0
    7e02:	40 e2       	ldi	r20, 0x20	; 32
    7e04:	51 e4       	ldi	r21, 0x41	; 65
    7e06:	c5 01       	movw	r24, r10
    7e08:	b4 01       	movw	r22, r8
    7e0a:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    7e0e:	4b 01       	movw	r8, r22
    7e10:	5c 01       	movw	r10, r24
    7e12:	28 01       	movw	r4, r16
    7e14:	e7 cf       	rjmp	.-50     	; 0x7de4 <p_etoa+0xd2>
    7e16:	82 01       	movw	r16, r4
    7e18:	0f 5f       	subi	r16, 0xFF	; 255
    7e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    7e1c:	20 e0       	ldi	r18, 0x00	; 0
    7e1e:	30 e0       	ldi	r19, 0x00	; 0
    7e20:	40 e2       	ldi	r20, 0x20	; 32
    7e22:	51 e4       	ldi	r21, 0x41	; 65
    7e24:	c5 01       	movw	r24, r10
    7e26:	b4 01       	movw	r22, r8
    7e28:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__gesf2>
    7e2c:	87 fd       	sbrc	r24, 7
    7e2e:	0c c0       	rjmp	.+24     	; 0x7e48 <p_etoa+0x136>
    7e30:	20 e0       	ldi	r18, 0x00	; 0
    7e32:	30 e0       	ldi	r19, 0x00	; 0
    7e34:	40 e2       	ldi	r20, 0x20	; 32
    7e36:	51 e4       	ldi	r21, 0x41	; 65
    7e38:	c5 01       	movw	r24, r10
    7e3a:	b4 01       	movw	r22, r8
    7e3c:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    7e40:	4b 01       	movw	r8, r22
    7e42:	5c 01       	movw	r10, r24
    7e44:	28 01       	movw	r4, r16
    7e46:	e7 cf       	rjmp	.-50     	; 0x7e16 <p_etoa+0x104>
    7e48:	a7 01       	movw	r20, r14
    7e4a:	96 01       	movw	r18, r12
    7e4c:	c5 01       	movw	r24, r10
    7e4e:	b4 01       	movw	r22, r8
    7e50:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__addsf3>
    7e54:	4b 01       	movw	r8, r22
    7e56:	5c 01       	movw	r10, r24
    7e58:	82 01       	movw	r16, r4
    7e5a:	2f ef       	ldi	r18, 0xFF	; 255
    7e5c:	42 1a       	sub	r4, r18
    7e5e:	52 0a       	sbc	r5, r18
    7e60:	20 e0       	ldi	r18, 0x00	; 0
    7e62:	30 e0       	ldi	r19, 0x00	; 0
    7e64:	40 e2       	ldi	r20, 0x20	; 32
    7e66:	51 e4       	ldi	r21, 0x41	; 65
    7e68:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__gesf2>
    7e6c:	87 fd       	sbrc	r24, 7
    7e6e:	09 c0       	rjmp	.+18     	; 0x7e82 <p_etoa+0x170>
    7e70:	20 e0       	ldi	r18, 0x00	; 0
    7e72:	30 e0       	ldi	r19, 0x00	; 0
    7e74:	40 e2       	ldi	r20, 0x20	; 32
    7e76:	51 e4       	ldi	r21, 0x41	; 65
    7e78:	c5 01       	movw	r24, r10
    7e7a:	b4 01       	movw	r22, r8
    7e7c:	0e 94 ae e3 	call	0x1c75c	; 0x1c75c <__divsf3>
    7e80:	e9 cf       	rjmp	.-46     	; 0x7e54 <p_etoa+0x142>
    7e82:	0e 87       	std	Y+14, r16	; 0x0e
    7e84:	1f 87       	std	Y+15, r17	; 0x0f
    7e86:	85 e6       	ldi	r24, 0x65	; 101
    7e88:	89 83       	std	Y+1, r24	; 0x01
    7e8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    7e8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    7e8e:	97 ff       	sbrs	r25, 7
    7e90:	08 c0       	rjmp	.+16     	; 0x7ea2 <p_etoa+0x190>
    7e92:	91 95       	neg	r25
    7e94:	81 95       	neg	r24
    7e96:	91 09       	sbc	r25, r1
    7e98:	9f 87       	std	Y+15, r25	; 0x0f
    7e9a:	8e 87       	std	Y+14, r24	; 0x0e
    7e9c:	8d e2       	ldi	r24, 0x2D	; 45
    7e9e:	90 e0       	ldi	r25, 0x00	; 0
    7ea0:	02 c0       	rjmp	.+4      	; 0x7ea6 <p_etoa+0x194>
    7ea2:	8b e2       	ldi	r24, 0x2B	; 43
    7ea4:	90 e0       	ldi	r25, 0x00	; 0
    7ea6:	6c 01       	movw	r12, r24
    7ea8:	82 e0       	ldi	r24, 0x02	; 2
    7eaa:	e8 2e       	mov	r14, r24
    7eac:	f1 2c       	mov	r15, r1
    7eae:	8e 01       	movw	r16, r28
    7eb0:	02 5f       	subi	r16, 0xF2	; 242
    7eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    7eb4:	2a e0       	ldi	r18, 0x0A	; 10
    7eb6:	30 e0       	ldi	r19, 0x00	; 0
    7eb8:	42 e0       	ldi	r20, 0x02	; 2
    7eba:	50 e0       	ldi	r21, 0x00	; 0
    7ebc:	65 e0       	ldi	r22, 0x05	; 5
    7ebe:	70 e0       	ldi	r23, 0x00	; 0
    7ec0:	ce 01       	movw	r24, r28
    7ec2:	02 96       	adiw	r24, 0x02	; 2
    7ec4:	26 dd       	rcall	.-1460   	; 0x7912 <bin2num>
    7ec6:	9c 01       	movw	r18, r24
    7ec8:	93 2d       	mov	r25, r3
    7eca:	98 72       	andi	r25, 0x28	; 40
    7ecc:	90 32       	cpi	r25, 0x20	; 32
    7ece:	71 f0       	breq	.+28     	; 0x7eec <p_etoa+0x1da>
    7ed0:	c5 01       	movw	r24, r10
    7ed2:	b4 01       	movw	r22, r8
    7ed4:	0e 94 16 e4 	call	0x1c82c	; 0x1c82c <__fixsfsi>
    7ed8:	6b 01       	movw	r12, r22
    7eda:	7c 01       	movw	r14, r24
    7edc:	60 e3       	ldi	r22, 0x30	; 48
    7ede:	6c 0d       	add	r22, r12
    7ee0:	ce 01       	movw	r24, r28
    7ee2:	08 96       	adiw	r24, 0x08	; 8
    7ee4:	9f dd       	rcall	.-1218   	; 0x7a24 <pch>
    7ee6:	21 10       	cpse	r2, r1
    7ee8:	20 c0       	rjmp	.+64     	; 0x7f2a <p_etoa+0x218>
    7eea:	63 c0       	rjmp	.+198    	; 0x7fb2 <p_etoa+0x2a0>
    7eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    7eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ef0:	0a 89       	ldd	r16, Y+18	; 0x12
    7ef2:	1b 89       	ldd	r17, Y+19	; 0x13
    7ef4:	08 1b       	sub	r16, r24
    7ef6:	19 0b       	sbc	r17, r25
    7ef8:	22 20       	and	r2, r2
    7efa:	41 f0       	breq	.+16     	; 0x7f0c <p_etoa+0x1fa>
    7efc:	61 14       	cp	r6, r1
    7efe:	71 04       	cpc	r7, r1
    7f00:	29 f0       	breq	.+10     	; 0x7f0c <p_etoa+0x1fa>
    7f02:	06 19       	sub	r16, r6
    7f04:	17 09       	sbc	r17, r7
    7f06:	06 50       	subi	r16, 0x06	; 6
    7f08:	11 09       	sbc	r17, r1
    7f0a:	02 c0       	rjmp	.+4      	; 0x7f10 <p_etoa+0x1fe>
    7f0c:	05 50       	subi	r16, 0x05	; 5
    7f0e:	11 09       	sbc	r17, r1
    7f10:	24 30       	cpi	r18, 0x04	; 4
    7f12:	31 05       	cpc	r19, r1
    7f14:	14 f0       	brlt	.+4      	; 0x7f1a <p_etoa+0x208>
    7f16:	01 50       	subi	r16, 0x01	; 1
    7f18:	11 09       	sbc	r17, r1
    7f1a:	10 16       	cp	r1, r16
    7f1c:	11 06       	cpc	r1, r17
    7f1e:	c4 f6       	brge	.-80     	; 0x7ed0 <p_etoa+0x1be>
    7f20:	60 e3       	ldi	r22, 0x30	; 48
    7f22:	ce 01       	movw	r24, r28
    7f24:	08 96       	adiw	r24, 0x08	; 8
    7f26:	7e dd       	rcall	.-1284   	; 0x7a24 <pch>
    7f28:	f6 cf       	rjmp	.-20     	; 0x7f16 <p_etoa+0x204>
    7f2a:	61 14       	cp	r6, r1
    7f2c:	71 04       	cpc	r7, r1
    7f2e:	09 f4       	brne	.+2      	; 0x7f32 <p_etoa+0x220>
    7f30:	40 c0       	rjmp	.+128    	; 0x7fb2 <p_etoa+0x2a0>
    7f32:	b6 01       	movw	r22, r12
    7f34:	dd 0c       	add	r13, r13
    7f36:	88 0b       	sbc	r24, r24
    7f38:	99 0b       	sbc	r25, r25
    7f3a:	0e 94 49 e4 	call	0x1c892	; 0x1c892 <__floatsisf>
    7f3e:	9b 01       	movw	r18, r22
    7f40:	ac 01       	movw	r20, r24
    7f42:	c5 01       	movw	r24, r10
    7f44:	b4 01       	movw	r22, r8
    7f46:	0e 94 45 e3 	call	0x1c68a	; 0x1c68a <__subsf3>
    7f4a:	20 e0       	ldi	r18, 0x00	; 0
    7f4c:	30 e0       	ldi	r19, 0x00	; 0
    7f4e:	40 e2       	ldi	r20, 0x20	; 32
    7f50:	51 e4       	ldi	r21, 0x41	; 65
    7f52:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    7f56:	4b 01       	movw	r8, r22
    7f58:	5c 01       	movw	r10, r24
    7f5a:	6e e2       	ldi	r22, 0x2E	; 46
    7f5c:	ce 01       	movw	r24, r28
    7f5e:	08 96       	adiw	r24, 0x08	; 8
    7f60:	61 dd       	rcall	.-1342   	; 0x7a24 <pch>
    7f62:	c5 01       	movw	r24, r10
    7f64:	b4 01       	movw	r22, r8
    7f66:	0e 94 16 e4 	call	0x1c82c	; 0x1c82c <__fixsfsi>
    7f6a:	6b 01       	movw	r12, r22
    7f6c:	7c 01       	movw	r14, r24
    7f6e:	07 2e       	mov	r0, r23
    7f70:	00 0c       	add	r0, r0
    7f72:	88 0b       	sbc	r24, r24
    7f74:	99 0b       	sbc	r25, r25
    7f76:	0e 94 49 e4 	call	0x1c892	; 0x1c892 <__floatsisf>
    7f7a:	9b 01       	movw	r18, r22
    7f7c:	ac 01       	movw	r20, r24
    7f7e:	c5 01       	movw	r24, r10
    7f80:	b4 01       	movw	r22, r8
    7f82:	0e 94 45 e3 	call	0x1c68a	; 0x1c68a <__subsf3>
    7f86:	4b 01       	movw	r8, r22
    7f88:	5c 01       	movw	r10, r24
    7f8a:	b6 01       	movw	r22, r12
    7f8c:	60 5d       	subi	r22, 0xD0	; 208
    7f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    7f90:	ce 01       	movw	r24, r28
    7f92:	08 96       	adiw	r24, 0x08	; 8
    7f94:	47 dd       	rcall	.-1394   	; 0x7a24 <pch>
    7f96:	20 e0       	ldi	r18, 0x00	; 0
    7f98:	30 e0       	ldi	r19, 0x00	; 0
    7f9a:	40 e2       	ldi	r20, 0x20	; 32
    7f9c:	51 e4       	ldi	r21, 0x41	; 65
    7f9e:	c5 01       	movw	r24, r10
    7fa0:	b4 01       	movw	r22, r8
    7fa2:	0e 94 fd e4 	call	0x1c9fa	; 0x1c9fa <__mulsf3>
    7fa6:	4b 01       	movw	r8, r22
    7fa8:	5c 01       	movw	r10, r24
    7faa:	31 e0       	ldi	r19, 0x01	; 1
    7fac:	63 1a       	sub	r6, r19
    7fae:	71 08       	sbc	r7, r1
    7fb0:	c1 f6       	brne	.-80     	; 0x7f62 <p_etoa+0x250>
    7fb2:	8e 01       	movw	r16, r28
    7fb4:	0f 5f       	subi	r16, 0xFF	; 255
    7fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    7fb8:	f8 01       	movw	r30, r16
    7fba:	61 91       	ld	r22, Z+
    7fbc:	8f 01       	movw	r16, r30
    7fbe:	ce 01       	movw	r24, r28
    7fc0:	08 96       	adiw	r24, 0x08	; 8
    7fc2:	66 23       	and	r22, r22
    7fc4:	11 f0       	breq	.+4      	; 0x7fca <p_etoa+0x2b8>
    7fc6:	2e dd       	rcall	.-1444   	; 0x7a24 <pch>
    7fc8:	f7 cf       	rjmp	.-18     	; 0x7fb8 <p_etoa+0x2a6>
    7fca:	2c dd       	rcall	.-1448   	; 0x7a24 <pch>
    7fcc:	e8 89       	ldd	r30, Y+16	; 0x10
    7fce:	f9 89       	ldd	r31, Y+17	; 0x11
    7fd0:	01 90       	ld	r0, Z+
    7fd2:	00 20       	and	r0, r0
    7fd4:	e9 f7       	brne	.-6      	; 0x7fd0 <p_etoa+0x2be>
    7fd6:	cf 01       	movw	r24, r30
    7fd8:	01 97       	sbiw	r24, 0x01	; 1
    7fda:	28 89       	ldd	r18, Y+16	; 0x10
    7fdc:	39 89       	ldd	r19, Y+17	; 0x11
    7fde:	82 1b       	sub	r24, r18
    7fe0:	93 0b       	sbc	r25, r19
    7fe2:	63 96       	adiw	r28, 0x13	; 19
    7fe4:	e2 e1       	ldi	r30, 0x12	; 18
    7fe6:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00007fea <_puts_pad>:
    7fea:	a0 e0       	ldi	r26, 0x00	; 0
    7fec:	b0 e0       	ldi	r27, 0x00	; 0
    7fee:	eb ef       	ldi	r30, 0xFB	; 251
    7ff0:	ff e3       	ldi	r31, 0x3F	; 63
    7ff2:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
    7ff6:	6c 01       	movw	r12, r24
    7ff8:	4b 01       	movw	r8, r22
    7ffa:	79 01       	movw	r14, r18
    7ffc:	24 17       	cp	r18, r20
    7ffe:	35 07       	cpc	r19, r21
    8000:	24 f4       	brge	.+8      	; 0x800a <_puts_pad+0x20>
    8002:	ea 01       	movw	r28, r20
    8004:	c2 1b       	sub	r28, r18
    8006:	d3 0b       	sbc	r29, r19
    8008:	02 c0       	rjmp	.+4      	; 0x800e <_puts_pad+0x24>
    800a:	c0 e0       	ldi	r28, 0x00	; 0
    800c:	d0 e0       	ldi	r29, 0x00	; 0
    800e:	01 15       	cp	r16, r1
    8010:	11 05       	cpc	r17, r1
    8012:	49 f4       	brne	.+18     	; 0x8026 <_puts_pad+0x3c>
    8014:	21 97       	sbiw	r28, 0x01	; 1
    8016:	38 f0       	brcs	.+14     	; 0x8026 <_puts_pad+0x3c>
    8018:	d6 01       	movw	r26, r12
    801a:	ed 91       	ld	r30, X+
    801c:	fc 91       	ld	r31, X
    801e:	60 e2       	ldi	r22, 0x20	; 32
    8020:	c6 01       	movw	r24, r12
    8022:	09 95       	icall
    8024:	f7 cf       	rjmp	.-18     	; 0x8014 <_puts_pad+0x2a>
    8026:	54 01       	movw	r10, r8
    8028:	f5 01       	movw	r30, r10
    802a:	61 91       	ld	r22, Z+
    802c:	5f 01       	movw	r10, r30
    802e:	66 23       	and	r22, r22
    8030:	61 f0       	breq	.+24     	; 0x804a <_puts_pad+0x60>
    8032:	e1 14       	cp	r14, r1
    8034:	f1 04       	cpc	r15, r1
    8036:	49 f0       	breq	.+18     	; 0x804a <_puts_pad+0x60>
    8038:	d6 01       	movw	r26, r12
    803a:	ed 91       	ld	r30, X+
    803c:	fc 91       	ld	r31, X
    803e:	c6 01       	movw	r24, r12
    8040:	09 95       	icall
    8042:	b1 e0       	ldi	r27, 0x01	; 1
    8044:	eb 1a       	sub	r14, r27
    8046:	f1 08       	sbc	r15, r1
    8048:	ef cf       	rjmp	.-34     	; 0x8028 <_puts_pad+0x3e>
    804a:	01 15       	cp	r16, r1
    804c:	11 05       	cpc	r17, r1
    804e:	51 f0       	breq	.+20     	; 0x8064 <_puts_pad+0x7a>
    8050:	20 97       	sbiw	r28, 0x00	; 0
    8052:	41 f0       	breq	.+16     	; 0x8064 <_puts_pad+0x7a>
    8054:	d6 01       	movw	r26, r12
    8056:	ed 91       	ld	r30, X+
    8058:	fc 91       	ld	r31, X
    805a:	60 e2       	ldi	r22, 0x20	; 32
    805c:	c6 01       	movw	r24, r12
    805e:	09 95       	icall
    8060:	21 97       	sbiw	r28, 0x01	; 1
    8062:	f6 cf       	rjmp	.-20     	; 0x8050 <_puts_pad+0x66>
    8064:	cd b7       	in	r28, 0x3d	; 61
    8066:	de b7       	in	r29, 0x3e	; 62
    8068:	ec e0       	ldi	r30, 0x0C	; 12
    806a:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

0000806e <_puts_pad_X>:
    806e:	2f 92       	push	r2
    8070:	3f 92       	push	r3
    8072:	4f 92       	push	r4
    8074:	6f 92       	push	r6
    8076:	7f 92       	push	r7
    8078:	8f 92       	push	r8
    807a:	cf 92       	push	r12
    807c:	df 92       	push	r13
    807e:	ef 92       	push	r14
    8080:	ff 92       	push	r15
    8082:	0f 93       	push	r16
    8084:	1f 93       	push	r17
    8086:	cf 93       	push	r28
    8088:	df 93       	push	r29
    808a:	6c 01       	movw	r12, r24
    808c:	3a 01       	movw	r6, r20
    808e:	86 2e       	mov	r8, r22
    8090:	02 17       	cp	r16, r18
    8092:	13 07       	cpc	r17, r19
    8094:	24 f4       	brge	.+8      	; 0x809e <_puts_pad_X+0x30>
    8096:	e9 01       	movw	r28, r18
    8098:	c0 1b       	sub	r28, r16
    809a:	d1 0b       	sbc	r29, r17
    809c:	02 c0       	rjmp	.+4      	; 0x80a2 <_puts_pad_X+0x34>
    809e:	c0 e0       	ldi	r28, 0x00	; 0
    80a0:	d0 e0       	ldi	r29, 0x00	; 0
    80a2:	e1 14       	cp	r14, r1
    80a4:	f1 04       	cpc	r15, r1
    80a6:	49 f4       	brne	.+18     	; 0x80ba <_puts_pad_X+0x4c>
    80a8:	21 97       	sbiw	r28, 0x01	; 1
    80aa:	38 f0       	brcs	.+14     	; 0x80ba <_puts_pad_X+0x4c>
    80ac:	d6 01       	movw	r26, r12
    80ae:	ed 91       	ld	r30, X+
    80b0:	fc 91       	ld	r31, X
    80b2:	60 e2       	ldi	r22, 0x20	; 32
    80b4:	c6 01       	movw	r24, r12
    80b6:	09 95       	icall
    80b8:	f7 cf       	rjmp	.-18     	; 0x80a8 <_puts_pad_X+0x3a>
    80ba:	13 01       	movw	r2, r6
    80bc:	48 2c       	mov	r4, r8
    80be:	20 0e       	add	r2, r16
    80c0:	31 1e       	adc	r3, r17
    80c2:	41 1c       	adc	r4, r1
    80c4:	17 fd       	sbrc	r17, 7
    80c6:	4a 94       	dec	r4
    80c8:	f3 01       	movw	r30, r6
    80ca:	58 2d       	mov	r21, r8
    80cc:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    80d0:	66 23       	and	r22, r22
    80d2:	71 f0       	breq	.+28     	; 0x80f0 <_puts_pad_X+0x82>
    80d4:	62 14       	cp	r6, r2
    80d6:	73 04       	cpc	r7, r3
    80d8:	84 04       	cpc	r8, r4
    80da:	51 f0       	breq	.+20     	; 0x80f0 <_puts_pad_X+0x82>
    80dc:	d6 01       	movw	r26, r12
    80de:	ed 91       	ld	r30, X+
    80e0:	fc 91       	ld	r31, X
    80e2:	c6 01       	movw	r24, r12
    80e4:	09 95       	icall
    80e6:	bf ef       	ldi	r27, 0xFF	; 255
    80e8:	6b 1a       	sub	r6, r27
    80ea:	7b 0a       	sbc	r7, r27
    80ec:	8b 0a       	sbc	r8, r27
    80ee:	ec cf       	rjmp	.-40     	; 0x80c8 <_puts_pad_X+0x5a>
    80f0:	ef 28       	or	r14, r15
    80f2:	51 f0       	breq	.+20     	; 0x8108 <_puts_pad_X+0x9a>
    80f4:	20 97       	sbiw	r28, 0x00	; 0
    80f6:	41 f0       	breq	.+16     	; 0x8108 <_puts_pad_X+0x9a>
    80f8:	d6 01       	movw	r26, r12
    80fa:	ed 91       	ld	r30, X+
    80fc:	fc 91       	ld	r31, X
    80fe:	60 e2       	ldi	r22, 0x20	; 32
    8100:	c6 01       	movw	r24, r12
    8102:	09 95       	icall
    8104:	21 97       	sbiw	r28, 0x01	; 1
    8106:	f6 cf       	rjmp	.-20     	; 0x80f4 <_puts_pad_X+0x86>
    8108:	df 91       	pop	r29
    810a:	cf 91       	pop	r28
    810c:	1f 91       	pop	r17
    810e:	0f 91       	pop	r16
    8110:	ff 90       	pop	r15
    8112:	ef 90       	pop	r14
    8114:	df 90       	pop	r13
    8116:	cf 90       	pop	r12
    8118:	8f 90       	pop	r8
    811a:	7f 90       	pop	r7
    811c:	6f 90       	pop	r6
    811e:	4f 90       	pop	r4
    8120:	3f 90       	pop	r3
    8122:	2f 90       	pop	r2
    8124:	08 95       	ret

00008126 <strlen_X>:
    8126:	cf 92       	push	r12
    8128:	df 92       	push	r13
    812a:	ef 92       	push	r14
    812c:	9b 01       	movw	r18, r22
    812e:	48 2f       	mov	r20, r24
    8130:	80 e0       	ldi	r24, 0x00	; 0
    8132:	90 e0       	ldi	r25, 0x00	; 0
    8134:	2f 5f       	subi	r18, 0xFF	; 255
    8136:	3f 4f       	sbci	r19, 0xFF	; 255
    8138:	4f 4f       	sbci	r20, 0xFF	; 255
    813a:	69 01       	movw	r12, r18
    813c:	e4 2e       	mov	r14, r20
    813e:	51 e0       	ldi	r21, 0x01	; 1
    8140:	c5 1a       	sub	r12, r21
    8142:	d1 08       	sbc	r13, r1
    8144:	e1 08       	sbc	r14, r1
    8146:	f6 01       	movw	r30, r12
    8148:	5e 2d       	mov	r21, r14
    814a:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    814e:	66 23       	and	r22, r22
    8150:	11 f0       	breq	.+4      	; 0x8156 <strlen_X+0x30>
    8152:	01 96       	adiw	r24, 0x01	; 1
    8154:	ef cf       	rjmp	.-34     	; 0x8134 <strlen_X+0xe>
    8156:	ef 90       	pop	r14
    8158:	df 90       	pop	r13
    815a:	cf 90       	pop	r12
    815c:	08 95       	ret

0000815e <_printf_fn>:
    815e:	ae e6       	ldi	r26, 0x6E	; 110
    8160:	b0 e0       	ldi	r27, 0x00	; 0
    8162:	e5 eb       	ldi	r30, 0xB5	; 181
    8164:	f0 e4       	ldi	r31, 0x40	; 64
    8166:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    816a:	a5 96       	adiw	r28, 0x25	; 37
    816c:	9f af       	std	Y+63, r25	; 0x3f
    816e:	8e af       	std	Y+62, r24	; 0x3e
    8170:	a5 97       	sbiw	r28, 0x25	; 37
    8172:	6a 01       	movw	r12, r20
    8174:	e6 2e       	mov	r14, r22
    8176:	19 01       	movw	r2, r18
    8178:	a9 96       	adiw	r28, 0x29	; 41
    817a:	1c ae       	std	Y+60, r1	; 0x3c
    817c:	1d ae       	std	Y+61, r1	; 0x3d
    817e:	1e ae       	std	Y+62, r1	; 0x3e
    8180:	1f ae       	std	Y+63, r1	; 0x3f
    8182:	a9 97       	sbiw	r28, 0x29	; 41
    8184:	8a e1       	ldi	r24, 0x1A	; 26
    8186:	94 e0       	ldi	r25, 0x04	; 4
    8188:	9c 01       	movw	r18, r24
    818a:	40 e8       	ldi	r20, 0x80	; 128
    818c:	ae 96       	adiw	r28, 0x2e	; 46
    818e:	2d af       	std	Y+61, r18	; 0x3d
    8190:	3e af       	std	Y+62, r19	; 0x3e
    8192:	4f af       	std	Y+63, r20	; 0x3f
    8194:	ae 97       	sbiw	r28, 0x2e	; 46
    8196:	ae 01       	movw	r20, r28
    8198:	4f 5a       	subi	r20, 0xAF	; 175
    819a:	5f 4f       	sbci	r21, 0xFF	; 255
    819c:	67 96       	adiw	r28, 0x17	; 23
    819e:	5f af       	std	Y+63, r21	; 0x3f
    81a0:	4e af       	std	Y+62, r20	; 0x3e
    81a2:	67 97       	sbiw	r28, 0x17	; 23
    81a4:	ce 01       	movw	r24, r28
    81a6:	8d 5b       	subi	r24, 0xBD	; 189
    81a8:	9f 4f       	sbci	r25, 0xFF	; 255
    81aa:	69 96       	adiw	r28, 0x19	; 25
    81ac:	9f af       	std	Y+63, r25	; 0x3f
    81ae:	8e af       	std	Y+62, r24	; 0x3e
    81b0:	69 97       	sbiw	r28, 0x19	; 25
    81b2:	de 01       	movw	r26, r28
    81b4:	a5 5b       	subi	r26, 0xB5	; 181
    81b6:	bf 4f       	sbci	r27, 0xFF	; 255
    81b8:	6b 96       	adiw	r28, 0x1b	; 27
    81ba:	bf af       	std	Y+63, r27	; 0x3f
    81bc:	ae af       	std	Y+62, r26	; 0x3e
    81be:	6b 97       	sbiw	r28, 0x1b	; 27
    81c0:	fe 01       	movw	r30, r28
    81c2:	ed 5a       	subi	r30, 0xAD	; 173
    81c4:	ff 4f       	sbci	r31, 0xFF	; 255
    81c6:	6d 96       	adiw	r28, 0x1d	; 29
    81c8:	ff af       	std	Y+63, r31	; 0x3f
    81ca:	ee af       	std	Y+62, r30	; 0x3e
    81cc:	6d 97       	sbiw	r28, 0x1d	; 29
    81ce:	f6 01       	movw	r30, r12
    81d0:	5e 2d       	mov	r21, r14
    81d2:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    81d6:	66 23       	and	r22, r22
    81d8:	09 f4       	brne	.+2      	; 0x81dc <_printf_fn+0x7e>
    81da:	13 c4       	rjmp	.+2086   	; 0x8a02 <_printf_fn+0x8a4>
    81dc:	ae 2d       	mov	r26, r14
    81de:	c6 01       	movw	r24, r12
    81e0:	01 96       	adiw	r24, 0x01	; 1
    81e2:	a1 1d       	adc	r26, r1
    81e4:	3c 01       	movw	r6, r24
    81e6:	8a 2e       	mov	r8, r26
    81e8:	65 32       	cpi	r22, 0x25	; 37
    81ea:	51 f0       	breq	.+20     	; 0x8200 <_printf_fn+0xa2>
    81ec:	a5 96       	adiw	r28, 0x25	; 37
    81ee:	ae ad       	ldd	r26, Y+62	; 0x3e
    81f0:	bf ad       	ldd	r27, Y+63	; 0x3f
    81f2:	a5 97       	sbiw	r28, 0x25	; 37
    81f4:	ed 91       	ld	r30, X+
    81f6:	fc 91       	ld	r31, X
    81f8:	11 97       	sbiw	r26, 0x01	; 1
    81fa:	cd 01       	movw	r24, r26
    81fc:	09 95       	icall
    81fe:	d5 c3       	rjmp	.+1962   	; 0x89aa <_printf_fn+0x84c>
    8200:	91 2c       	mov	r9, r1
    8202:	f3 01       	movw	r30, r6
    8204:	58 2d       	mov	r21, r8
    8206:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    820a:	63 32       	cpi	r22, 0x23	; 35
    820c:	19 f4       	brne	.+6      	; 0x8214 <_printf_fn+0xb6>
    820e:	68 94       	set
    8210:	97 f8       	bld	r9, 7
    8212:	04 c0       	rjmp	.+8      	; 0x821c <_printf_fn+0xbe>
    8214:	6b 32       	cpi	r22, 0x2B	; 43
    8216:	39 f4       	brne	.+14     	; 0x8226 <_printf_fn+0xc8>
    8218:	68 94       	set
    821a:	92 f8       	bld	r9, 2
    821c:	bf ef       	ldi	r27, 0xFF	; 255
    821e:	6b 1a       	sub	r6, r27
    8220:	7b 0a       	sbc	r7, r27
    8222:	8b 0a       	sbc	r8, r27
    8224:	ee cf       	rjmp	.-36     	; 0x8202 <_printf_fn+0xa4>
    8226:	6d 32       	cpi	r22, 0x2D	; 45
    8228:	a9 f4       	brne	.+42     	; 0x8254 <_printf_fn+0xf6>
    822a:	93 fc       	sbrc	r9, 3
    822c:	05 c0       	rjmp	.+10     	; 0x8238 <_printf_fn+0xda>
    822e:	6d 32       	cpi	r22, 0x2D	; 45
    8230:	19 f4       	brne	.+6      	; 0x8238 <_printf_fn+0xda>
    8232:	68 94       	set
    8234:	93 f8       	bld	r9, 3
    8236:	f2 cf       	rjmp	.-28     	; 0x821c <_printf_fn+0xbe>
    8238:	94 fc       	sbrc	r9, 4
    823a:	05 c0       	rjmp	.+10     	; 0x8246 <_printf_fn+0xe8>
    823c:	60 32       	cpi	r22, 0x20	; 32
    823e:	19 f4       	brne	.+6      	; 0x8246 <_printf_fn+0xe8>
    8240:	68 94       	set
    8242:	94 f8       	bld	r9, 4
    8244:	eb cf       	rjmp	.-42     	; 0x821c <_printf_fn+0xbe>
    8246:	95 fc       	sbrc	r9, 5
    8248:	e9 cf       	rjmp	.-46     	; 0x821c <_printf_fn+0xbe>
    824a:	60 33       	cpi	r22, 0x30	; 48
    824c:	39 f7       	brne	.-50     	; 0x821c <_printf_fn+0xbe>
    824e:	68 94       	set
    8250:	95 f8       	bld	r9, 5
    8252:	e4 cf       	rjmp	.-56     	; 0x821c <_printf_fn+0xbe>
    8254:	86 2f       	mov	r24, r22
    8256:	8f 7e       	andi	r24, 0xEF	; 239
    8258:	80 32       	cpi	r24, 0x20	; 32
    825a:	39 f3       	breq	.-50     	; 0x822a <_printf_fn+0xcc>
    825c:	70 e0       	ldi	r23, 0x00	; 0
    825e:	60 53       	subi	r22, 0x30	; 48
    8260:	71 09       	sbc	r23, r1
    8262:	6f 96       	adiw	r28, 0x1f	; 31
    8264:	1f ae       	std	Y+63, r1	; 0x3f
    8266:	1e ae       	std	Y+62, r1	; 0x3e
    8268:	6f 97       	sbiw	r28, 0x1f	; 31
    826a:	6a 30       	cpi	r22, 0x0A	; 10
    826c:	71 05       	cpc	r23, r1
    826e:	10 f5       	brcc	.+68     	; 0x82b4 <_printf_fn+0x156>
    8270:	2a e0       	ldi	r18, 0x0A	; 10
    8272:	f3 01       	movw	r30, r6
    8274:	58 2d       	mov	r21, r8
    8276:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    827a:	70 e0       	ldi	r23, 0x00	; 0
    827c:	cb 01       	movw	r24, r22
    827e:	c0 97       	sbiw	r24, 0x30	; 48
    8280:	0a 97       	sbiw	r24, 0x0a	; 10
    8282:	b0 f4       	brcc	.+44     	; 0x82b0 <_printf_fn+0x152>
    8284:	ef ef       	ldi	r30, 0xFF	; 255
    8286:	6e 1a       	sub	r6, r30
    8288:	7e 0a       	sbc	r7, r30
    828a:	8e 0a       	sbc	r8, r30
    828c:	6f 96       	adiw	r28, 0x1f	; 31
    828e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8290:	5f ad       	ldd	r21, Y+63	; 0x3f
    8292:	6f 97       	sbiw	r28, 0x1f	; 31
    8294:	24 9f       	mul	r18, r20
    8296:	c0 01       	movw	r24, r0
    8298:	25 9f       	mul	r18, r21
    829a:	90 0d       	add	r25, r0
    829c:	11 24       	eor	r1, r1
    829e:	68 0f       	add	r22, r24
    82a0:	79 1f       	adc	r23, r25
    82a2:	cb 01       	movw	r24, r22
    82a4:	c0 97       	sbiw	r24, 0x30	; 48
    82a6:	6f 96       	adiw	r28, 0x1f	; 31
    82a8:	9f af       	std	Y+63, r25	; 0x3f
    82aa:	8e af       	std	Y+62, r24	; 0x3e
    82ac:	6f 97       	sbiw	r28, 0x1f	; 31
    82ae:	e1 cf       	rjmp	.-62     	; 0x8272 <_printf_fn+0x114>
    82b0:	68 94       	set
    82b2:	90 f8       	bld	r9, 0
    82b4:	f3 01       	movw	r30, r6
    82b6:	58 2d       	mov	r21, r8
    82b8:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    82bc:	6e 32       	cpi	r22, 0x2E	; 46
    82be:	61 f5       	brne	.+88     	; 0x8318 <_printf_fn+0x1ba>
    82c0:	9f ef       	ldi	r25, 0xFF	; 255
    82c2:	69 1a       	sub	r6, r25
    82c4:	79 0a       	sbc	r7, r25
    82c6:	89 0a       	sbc	r8, r25
    82c8:	a1 96       	adiw	r28, 0x21	; 33
    82ca:	1f ae       	std	Y+63, r1	; 0x3f
    82cc:	1e ae       	std	Y+62, r1	; 0x3e
    82ce:	a1 97       	sbiw	r28, 0x21	; 33
    82d0:	2a e0       	ldi	r18, 0x0A	; 10
    82d2:	f3 01       	movw	r30, r6
    82d4:	58 2d       	mov	r21, r8
    82d6:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    82da:	70 e0       	ldi	r23, 0x00	; 0
    82dc:	cb 01       	movw	r24, r22
    82de:	c0 97       	sbiw	r24, 0x30	; 48
    82e0:	0a 97       	sbiw	r24, 0x0a	; 10
    82e2:	b8 f4       	brcc	.+46     	; 0x8312 <_printf_fn+0x1b4>
    82e4:	af ef       	ldi	r26, 0xFF	; 255
    82e6:	6a 1a       	sub	r6, r26
    82e8:	7a 0a       	sbc	r7, r26
    82ea:	8a 0a       	sbc	r8, r26
    82ec:	a1 96       	adiw	r28, 0x21	; 33
    82ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    82f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    82f2:	a1 97       	sbiw	r28, 0x21	; 33
    82f4:	2e 9f       	mul	r18, r30
    82f6:	c0 01       	movw	r24, r0
    82f8:	2f 9f       	mul	r18, r31
    82fa:	90 0d       	add	r25, r0
    82fc:	11 24       	eor	r1, r1
    82fe:	68 0f       	add	r22, r24
    8300:	79 1f       	adc	r23, r25
    8302:	ab 01       	movw	r20, r22
    8304:	40 53       	subi	r20, 0x30	; 48
    8306:	51 09       	sbc	r21, r1
    8308:	a1 96       	adiw	r28, 0x21	; 33
    830a:	5f af       	std	Y+63, r21	; 0x3f
    830c:	4e af       	std	Y+62, r20	; 0x3e
    830e:	a1 97       	sbiw	r28, 0x21	; 33
    8310:	e0 cf       	rjmp	.-64     	; 0x82d2 <_printf_fn+0x174>
    8312:	68 94       	set
    8314:	91 f8       	bld	r9, 1
    8316:	04 c0       	rjmp	.+8      	; 0x8320 <_printf_fn+0x1c2>
    8318:	a1 96       	adiw	r28, 0x21	; 33
    831a:	1f ae       	std	Y+63, r1	; 0x3f
    831c:	1e ae       	std	Y+62, r1	; 0x3e
    831e:	a1 97       	sbiw	r28, 0x21	; 33
    8320:	f3 01       	movw	r30, r6
    8322:	58 2d       	mov	r21, r8
    8324:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    8328:	69 34       	cpi	r22, 0x49	; 73
    832a:	91 f5       	brne	.+100    	; 0x8390 <_printf_fn+0x232>
    832c:	5f ef       	ldi	r21, 0xFF	; 255
    832e:	65 1a       	sub	r6, r21
    8330:	75 0a       	sbc	r7, r21
    8332:	85 0a       	sbc	r8, r21
    8334:	41 2c       	mov	r4, r1
    8336:	51 2c       	mov	r5, r1
    8338:	2a e0       	ldi	r18, 0x0A	; 10
    833a:	f3 01       	movw	r30, r6
    833c:	58 2d       	mov	r21, r8
    833e:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    8342:	70 e0       	ldi	r23, 0x00	; 0
    8344:	cb 01       	movw	r24, r22
    8346:	c0 97       	sbiw	r24, 0x30	; 48
    8348:	0a 97       	sbiw	r24, 0x0a	; 10
    834a:	80 f4       	brcc	.+32     	; 0x836c <_printf_fn+0x20e>
    834c:	8f ef       	ldi	r24, 0xFF	; 255
    834e:	68 1a       	sub	r6, r24
    8350:	78 0a       	sbc	r7, r24
    8352:	88 0a       	sbc	r8, r24
    8354:	24 9d       	mul	r18, r4
    8356:	c0 01       	movw	r24, r0
    8358:	25 9d       	mul	r18, r5
    835a:	90 0d       	add	r25, r0
    835c:	11 24       	eor	r1, r1
    835e:	68 0f       	add	r22, r24
    8360:	79 1f       	adc	r23, r25
    8362:	2b 01       	movw	r4, r22
    8364:	90 e3       	ldi	r25, 0x30	; 48
    8366:	49 1a       	sub	r4, r25
    8368:	51 08       	sbc	r5, r1
    836a:	e7 cf       	rjmp	.-50     	; 0x833a <_printf_fn+0x1dc>
    836c:	41 14       	cp	r4, r1
    836e:	51 04       	cpc	r5, r1
    8370:	09 f4       	brne	.+2      	; 0x8374 <_printf_fn+0x216>
    8372:	40 c0       	rjmp	.+128    	; 0x83f4 <_printf_fn+0x296>
    8374:	c2 01       	movw	r24, r4
    8376:	87 70       	andi	r24, 0x07	; 7
    8378:	99 27       	eor	r25, r25
    837a:	89 2b       	or	r24, r25
    837c:	c9 f5       	brne	.+114    	; 0x83f0 <_printf_fn+0x292>
    837e:	63 e0       	ldi	r22, 0x03	; 3
    8380:	55 94       	asr	r5
    8382:	47 94       	ror	r4
    8384:	6a 95       	dec	r22
    8386:	e1 f7       	brne	.-8      	; 0x8380 <_printf_fn+0x222>
    8388:	41 14       	cp	r4, r1
    838a:	51 04       	cpc	r5, r1
    838c:	99 f1       	breq	.+102    	; 0x83f4 <_printf_fn+0x296>
    838e:	21 c0       	rjmp	.+66     	; 0x83d2 <_printf_fn+0x274>
    8390:	68 36       	cpi	r22, 0x68	; 104
    8392:	29 f4       	brne	.+10     	; 0x839e <_printf_fn+0x240>
    8394:	af ef       	ldi	r26, 0xFF	; 255
    8396:	6a 1a       	sub	r6, r26
    8398:	7a 0a       	sbc	r7, r26
    839a:	8a 0a       	sbc	r8, r26
    839c:	09 c3       	rjmp	.+1554   	; 0x89b0 <_printf_fn+0x852>
    839e:	6c 36       	cpi	r22, 0x6C	; 108
    83a0:	09 f0       	breq	.+2      	; 0x83a4 <_printf_fn+0x246>
    83a2:	06 c3       	rjmp	.+1548   	; 0x89b0 <_printf_fn+0x852>
    83a4:	a8 2d       	mov	r26, r8
    83a6:	c3 01       	movw	r24, r6
    83a8:	01 96       	adiw	r24, 0x01	; 1
    83aa:	a1 1d       	adc	r26, r1
    83ac:	fc 01       	movw	r30, r24
    83ae:	5a 2f       	mov	r21, r26
    83b0:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    83b4:	6c 36       	cpi	r22, 0x6C	; 108
    83b6:	31 f0       	breq	.+12     	; 0x83c4 <_printf_fn+0x266>
    83b8:	3c 01       	movw	r6, r24
    83ba:	8a 2e       	mov	r8, r26
    83bc:	54 e0       	ldi	r21, 0x04	; 4
    83be:	45 2e       	mov	r4, r21
    83c0:	51 2c       	mov	r5, r1
    83c2:	07 c0       	rjmp	.+14     	; 0x83d2 <_printf_fn+0x274>
    83c4:	b2 e0       	ldi	r27, 0x02	; 2
    83c6:	6b 0e       	add	r6, r27
    83c8:	71 1c       	adc	r7, r1
    83ca:	81 1c       	adc	r8, r1
    83cc:	48 e0       	ldi	r20, 0x08	; 8
    83ce:	44 2e       	mov	r4, r20
    83d0:	51 2c       	mov	r5, r1
    83d2:	f3 01       	movw	r30, r6
    83d4:	58 2d       	mov	r21, r8
    83d6:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    83da:	e6 2f       	mov	r30, r22
    83dc:	f0 e0       	ldi	r31, 0x00	; 0
    83de:	a3 96       	adiw	r28, 0x23	; 35
    83e0:	ff af       	std	Y+63, r31	; 0x3f
    83e2:	ee af       	std	Y+62, r30	; 0x3e
    83e4:	a3 97       	sbiw	r28, 0x23	; 35
    83e6:	e4 36       	cpi	r30, 0x64	; 100
    83e8:	f1 05       	cpc	r31, r1
    83ea:	09 f4       	brne	.+2      	; 0x83ee <_printf_fn+0x290>
    83ec:	e5 c2       	rjmp	.+1482   	; 0x89b8 <_printf_fn+0x85a>
    83ee:	06 c0       	rjmp	.+12     	; 0x83fc <_printf_fn+0x29e>
    83f0:	41 2c       	mov	r4, r1
    83f2:	51 2c       	mov	r5, r1
    83f4:	a3 96       	adiw	r28, 0x23	; 35
    83f6:	1f ae       	std	Y+63, r1	; 0x3f
    83f8:	1e ae       	std	Y+62, r1	; 0x3e
    83fa:	a3 97       	sbiw	r28, 0x23	; 35
    83fc:	31 e0       	ldi	r19, 0x01	; 1
    83fe:	20 e0       	ldi	r18, 0x00	; 0
    8400:	a3 96       	adiw	r28, 0x23	; 35
    8402:	4e ad       	ldd	r20, Y+62	; 0x3e
    8404:	5f ad       	ldd	r21, Y+63	; 0x3f
    8406:	a3 97       	sbiw	r28, 0x23	; 35
    8408:	44 34       	cpi	r20, 0x44	; 68
    840a:	51 05       	cpc	r21, r1
    840c:	09 f0       	breq	.+2      	; 0x8410 <_printf_fn+0x2b2>
    840e:	30 e0       	ldi	r19, 0x00	; 0
    8410:	83 2f       	mov	r24, r19
    8412:	92 2f       	mov	r25, r18
    8414:	a3 96       	adiw	r28, 0x23	; 35
    8416:	ee ad       	ldd	r30, Y+62	; 0x3e
    8418:	ff ad       	ldd	r31, Y+63	; 0x3f
    841a:	a3 97       	sbiw	r28, 0x23	; 35
    841c:	e2 54       	subi	r30, 0x42	; 66
    841e:	f1 09       	sbc	r31, r1
    8420:	e7 33       	cpi	r30, 0x37	; 55
    8422:	f1 05       	cpc	r31, r1
    8424:	08 f0       	brcs	.+2      	; 0x8428 <_printf_fn+0x2ca>
    8426:	57 c1       	rjmp	.+686    	; 0x86d6 <_printf_fn+0x578>
    8428:	ea 5b       	subi	r30, 0xBA	; 186
    842a:	ff 4f       	sbci	r31, 0xFF	; 255
    842c:	0c 94 bd e2 	jmp	0x1c57a	; 0x1c57a <__tablejump2__>
    8430:	32 e0       	ldi	r19, 0x02	; 2
    8432:	43 2e       	mov	r4, r19
    8434:	51 2c       	mov	r5, r1
    8436:	29 2d       	mov	r18, r9
    8438:	28 72       	andi	r18, 0x28	; 40
    843a:	28 32       	cpi	r18, 0x28	; 40
    843c:	11 f4       	brne	.+4      	; 0x8442 <_printf_fn+0x2e4>
    843e:	e8 94       	clt
    8440:	95 f8       	bld	r9, 5
    8442:	29 2d       	mov	r18, r9
    8444:	22 72       	andi	r18, 0x22	; 34
    8446:	22 32       	cpi	r18, 0x22	; 34
    8448:	11 f4       	brne	.+4      	; 0x844e <_printf_fn+0x2f0>
    844a:	e8 94       	clt
    844c:	95 f8       	bld	r9, 5
    844e:	29 2d       	mov	r18, r9
    8450:	21 72       	andi	r18, 0x21	; 33
    8452:	21 32       	cpi	r18, 0x21	; 33
    8454:	79 f4       	brne	.+30     	; 0x8474 <_printf_fn+0x316>
    8456:	a1 96       	adiw	r28, 0x21	; 33
    8458:	ae ad       	ldd	r26, Y+62	; 0x3e
    845a:	bf ad       	ldd	r27, Y+63	; 0x3f
    845c:	a1 97       	sbiw	r28, 0x21	; 33
    845e:	6f 96       	adiw	r28, 0x1f	; 31
    8460:	ee ad       	ldd	r30, Y+62	; 0x3e
    8462:	ff ad       	ldd	r31, Y+63	; 0x3f
    8464:	6f 97       	sbiw	r28, 0x1f	; 31
    8466:	ae 17       	cp	r26, r30
    8468:	bf 07       	cpc	r27, r31
    846a:	24 f4       	brge	.+8      	; 0x8474 <_printf_fn+0x316>
    846c:	a1 96       	adiw	r28, 0x21	; 33
    846e:	ff af       	std	Y+63, r31	; 0x3f
    8470:	ee af       	std	Y+62, r30	; 0x3e
    8472:	a1 97       	sbiw	r28, 0x21	; 33
    8474:	29 2d       	mov	r18, r9
    8476:	23 72       	andi	r18, 0x23	; 35
    8478:	23 32       	cpi	r18, 0x23	; 35
    847a:	79 f4       	brne	.+30     	; 0x849a <_printf_fn+0x33c>
    847c:	a1 96       	adiw	r28, 0x21	; 33
    847e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8480:	3f ad       	ldd	r19, Y+63	; 0x3f
    8482:	a1 97       	sbiw	r28, 0x21	; 33
    8484:	6f 96       	adiw	r28, 0x1f	; 31
    8486:	4e ad       	ldd	r20, Y+62	; 0x3e
    8488:	5f ad       	ldd	r21, Y+63	; 0x3f
    848a:	6f 97       	sbiw	r28, 0x1f	; 31
    848c:	24 17       	cp	r18, r20
    848e:	35 07       	cpc	r19, r21
    8490:	24 f4       	brge	.+8      	; 0x849a <_printf_fn+0x33c>
    8492:	a1 96       	adiw	r28, 0x21	; 33
    8494:	5f af       	std	Y+63, r21	; 0x3f
    8496:	4e af       	std	Y+62, r20	; 0x3e
    8498:	a1 97       	sbiw	r28, 0x21	; 33
    849a:	e8 94       	clt
    849c:	94 f8       	bld	r9, 4
    849e:	e8 94       	clt
    84a0:	92 f8       	bld	r9, 2
    84a2:	e8 94       	clt
    84a4:	96 f8       	bld	r9, 6
    84a6:	52 e0       	ldi	r21, 0x02	; 2
    84a8:	45 16       	cp	r4, r21
    84aa:	51 04       	cpc	r5, r1
    84ac:	f9 f4       	brne	.+62     	; 0x84ec <_printf_fn+0x38e>
    84ae:	51 01       	movw	r10, r2
    84b0:	82 e0       	ldi	r24, 0x02	; 2
    84b2:	a8 0e       	add	r10, r24
    84b4:	b1 1c       	adc	r11, r1
    84b6:	d1 01       	movw	r26, r2
    84b8:	8d 91       	ld	r24, X+
    84ba:	9c 91       	ld	r25, X
    84bc:	65 96       	adiw	r28, 0x15	; 21
    84be:	9f af       	std	Y+63, r25	; 0x3f
    84c0:	8e af       	std	Y+62, r24	; 0x3e
    84c2:	65 97       	sbiw	r28, 0x15	; 21
    84c4:	a3 96       	adiw	r28, 0x23	; 35
    84c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    84c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    84ca:	a3 97       	sbiw	r28, 0x23	; 35
    84cc:	e4 34       	cpi	r30, 0x44	; 68
    84ce:	f1 05       	cpc	r31, r1
    84d0:	09 f0       	breq	.+2      	; 0x84d4 <_printf_fn+0x376>
    84d2:	ac c0       	rjmp	.+344    	; 0x862c <_printf_fn+0x4ce>
    84d4:	97 ff       	sbrs	r25, 7
    84d6:	a7 c0       	rjmp	.+334    	; 0x8626 <_printf_fn+0x4c8>
    84d8:	68 94       	set
    84da:	96 f8       	bld	r9, 6
    84dc:	91 95       	neg	r25
    84de:	81 95       	neg	r24
    84e0:	91 09       	sbc	r25, r1
    84e2:	65 96       	adiw	r28, 0x15	; 21
    84e4:	9f af       	std	Y+63, r25	; 0x3f
    84e6:	8e af       	std	Y+62, r24	; 0x3e
    84e8:	65 97       	sbiw	r28, 0x15	; 21
    84ea:	9d c0       	rjmp	.+314    	; 0x8626 <_printf_fn+0x4c8>
    84ec:	f4 e0       	ldi	r31, 0x04	; 4
    84ee:	4f 16       	cp	r4, r31
    84f0:	51 04       	cpc	r5, r1
    84f2:	59 f5       	brne	.+86     	; 0x854a <_printf_fn+0x3ec>
    84f4:	51 01       	movw	r10, r2
    84f6:	24 e0       	ldi	r18, 0x04	; 4
    84f8:	a2 0e       	add	r10, r18
    84fa:	b1 1c       	adc	r11, r1
    84fc:	f1 01       	movw	r30, r2
    84fe:	80 81       	ld	r24, Z
    8500:	91 81       	ldd	r25, Z+1	; 0x01
    8502:	a2 81       	ldd	r26, Z+2	; 0x02
    8504:	b3 81       	ldd	r27, Z+3	; 0x03
    8506:	2f 96       	adiw	r28, 0x0f	; 15
    8508:	8c af       	std	Y+60, r24	; 0x3c
    850a:	9d af       	std	Y+61, r25	; 0x3d
    850c:	ae af       	std	Y+62, r26	; 0x3e
    850e:	bf af       	std	Y+63, r27	; 0x3f
    8510:	2f 97       	sbiw	r28, 0x0f	; 15
    8512:	a3 96       	adiw	r28, 0x23	; 35
    8514:	2e ad       	ldd	r18, Y+62	; 0x3e
    8516:	3f ad       	ldd	r19, Y+63	; 0x3f
    8518:	a3 97       	sbiw	r28, 0x23	; 35
    851a:	24 34       	cpi	r18, 0x44	; 68
    851c:	31 05       	cpc	r19, r1
    851e:	09 f0       	breq	.+2      	; 0x8522 <_printf_fn+0x3c4>
    8520:	8f c0       	rjmp	.+286    	; 0x8640 <_printf_fn+0x4e2>
    8522:	b7 ff       	sbrs	r27, 7
    8524:	8a c0       	rjmp	.+276    	; 0x863a <_printf_fn+0x4dc>
    8526:	68 94       	set
    8528:	96 f8       	bld	r9, 6
    852a:	b0 95       	com	r27
    852c:	a0 95       	com	r26
    852e:	90 95       	com	r25
    8530:	81 95       	neg	r24
    8532:	9f 4f       	sbci	r25, 0xFF	; 255
    8534:	af 4f       	sbci	r26, 0xFF	; 255
    8536:	bf 4f       	sbci	r27, 0xFF	; 255
    8538:	2f 96       	adiw	r28, 0x0f	; 15
    853a:	8c af       	std	Y+60, r24	; 0x3c
    853c:	9d af       	std	Y+61, r25	; 0x3d
    853e:	ae af       	std	Y+62, r26	; 0x3e
    8540:	bf af       	std	Y+63, r27	; 0x3f
    8542:	2f 97       	sbiw	r28, 0x0f	; 15
    8544:	7a c0       	rjmp	.+244    	; 0x863a <_printf_fn+0x4dc>
    8546:	81 e0       	ldi	r24, 0x01	; 1
    8548:	90 e0       	ldi	r25, 0x00	; 0
    854a:	51 01       	movw	r10, r2
    854c:	38 e0       	ldi	r19, 0x08	; 8
    854e:	43 16       	cp	r4, r19
    8550:	51 04       	cpc	r5, r1
    8552:	09 f0       	breq	.+2      	; 0x8556 <_printf_fn+0x3f8>
    8554:	7c c0       	rjmp	.+248    	; 0x864e <_printf_fn+0x4f0>
    8556:	48 e0       	ldi	r20, 0x08	; 8
    8558:	a4 0e       	add	r10, r20
    855a:	b1 1c       	adc	r11, r1
    855c:	d1 01       	movw	r26, r2
    855e:	fc 90       	ld	r15, X
    8560:	f1 01       	movw	r30, r2
    8562:	01 81       	ldd	r16, Z+1	; 0x01
    8564:	12 81       	ldd	r17, Z+2	; 0x02
    8566:	f3 81       	ldd	r31, Z+3	; 0x03
    8568:	aa 96       	adiw	r28, 0x2a	; 42
    856a:	ff af       	std	Y+63, r31	; 0x3f
    856c:	aa 97       	sbiw	r28, 0x2a	; 42
    856e:	f1 01       	movw	r30, r2
    8570:	f4 81       	ldd	r31, Z+4	; 0x04
    8572:	ab 96       	adiw	r28, 0x2b	; 43
    8574:	ff af       	std	Y+63, r31	; 0x3f
    8576:	ab 97       	sbiw	r28, 0x2b	; 43
    8578:	f1 01       	movw	r30, r2
    857a:	b5 81       	ldd	r27, Z+5	; 0x05
    857c:	f6 81       	ldd	r31, Z+6	; 0x06
    857e:	af 96       	adiw	r28, 0x2f	; 47
    8580:	ff af       	std	Y+63, r31	; 0x3f
    8582:	af 97       	sbiw	r28, 0x2f	; 47
    8584:	f1 01       	movw	r30, r2
    8586:	37 80       	ldd	r3, Z+7	; 0x07
    8588:	24 96       	adiw	r28, 0x04	; 4
    858a:	ff ae       	std	Y+63, r15	; 0x3f
    858c:	24 97       	sbiw	r28, 0x04	; 4
    858e:	25 96       	adiw	r28, 0x05	; 5
    8590:	0f af       	std	Y+63, r16	; 0x3f
    8592:	25 97       	sbiw	r28, 0x05	; 5
    8594:	26 96       	adiw	r28, 0x06	; 6
    8596:	1f af       	std	Y+63, r17	; 0x3f
    8598:	26 97       	sbiw	r28, 0x06	; 6
    859a:	aa 96       	adiw	r28, 0x2a	; 42
    859c:	ff ad       	ldd	r31, Y+63	; 0x3f
    859e:	aa 97       	sbiw	r28, 0x2a	; 42
    85a0:	27 96       	adiw	r28, 0x07	; 7
    85a2:	ff af       	std	Y+63, r31	; 0x3f
    85a4:	27 97       	sbiw	r28, 0x07	; 7
    85a6:	ab 96       	adiw	r28, 0x2b	; 43
    85a8:	ef ad       	ldd	r30, Y+63	; 0x3f
    85aa:	ab 97       	sbiw	r28, 0x2b	; 43
    85ac:	28 96       	adiw	r28, 0x08	; 8
    85ae:	ef af       	std	Y+63, r30	; 0x3f
    85b0:	28 97       	sbiw	r28, 0x08	; 8
    85b2:	29 96       	adiw	r28, 0x09	; 9
    85b4:	bf af       	std	Y+63, r27	; 0x3f
    85b6:	29 97       	sbiw	r28, 0x09	; 9
    85b8:	af 96       	adiw	r28, 0x2f	; 47
    85ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    85bc:	af 97       	sbiw	r28, 0x2f	; 47
    85be:	2a 96       	adiw	r28, 0x0a	; 10
    85c0:	ff af       	std	Y+63, r31	; 0x3f
    85c2:	2a 97       	sbiw	r28, 0x0a	; 10
    85c4:	2b 96       	adiw	r28, 0x0b	; 11
    85c6:	3f ae       	std	Y+63, r3	; 0x3f
    85c8:	2b 97       	sbiw	r28, 0x0b	; 11
    85ca:	89 2b       	or	r24, r25
    85cc:	09 f4       	brne	.+2      	; 0x85d0 <_printf_fn+0x472>
    85ce:	4a c0       	rjmp	.+148    	; 0x8664 <_printf_fn+0x506>
    85d0:	2f 2d       	mov	r18, r15
    85d2:	30 2f       	mov	r19, r16
    85d4:	41 2f       	mov	r20, r17
    85d6:	aa 96       	adiw	r28, 0x2a	; 42
    85d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    85da:	aa 97       	sbiw	r28, 0x2a	; 42
    85dc:	6e 2f       	mov	r22, r30
    85de:	7b 2f       	mov	r23, r27
    85e0:	8f 2f       	mov	r24, r31
    85e2:	93 2d       	mov	r25, r3
    85e4:	a0 e0       	ldi	r26, 0x00	; 0
    85e6:	0e 94 2a e3 	call	0x1c654	; 0x1c654 <__cmpdi2_s8>
    85ea:	e4 f5       	brge	.+120    	; 0x8664 <_printf_fn+0x506>
    85ec:	68 94       	set
    85ee:	96 f8       	bld	r9, 6
    85f0:	0e 94 dc e2 	call	0x1c5b8	; 0x1c5b8 <__negdi2>
    85f4:	24 96       	adiw	r28, 0x04	; 4
    85f6:	2f af       	std	Y+63, r18	; 0x3f
    85f8:	24 97       	sbiw	r28, 0x04	; 4
    85fa:	25 96       	adiw	r28, 0x05	; 5
    85fc:	3f af       	std	Y+63, r19	; 0x3f
    85fe:	25 97       	sbiw	r28, 0x05	; 5
    8600:	26 96       	adiw	r28, 0x06	; 6
    8602:	4f af       	std	Y+63, r20	; 0x3f
    8604:	26 97       	sbiw	r28, 0x06	; 6
    8606:	27 96       	adiw	r28, 0x07	; 7
    8608:	5f af       	std	Y+63, r21	; 0x3f
    860a:	27 97       	sbiw	r28, 0x07	; 7
    860c:	28 96       	adiw	r28, 0x08	; 8
    860e:	6f af       	std	Y+63, r22	; 0x3f
    8610:	28 97       	sbiw	r28, 0x08	; 8
    8612:	29 96       	adiw	r28, 0x09	; 9
    8614:	7f af       	std	Y+63, r23	; 0x3f
    8616:	29 97       	sbiw	r28, 0x09	; 9
    8618:	2a 96       	adiw	r28, 0x0a	; 10
    861a:	8f af       	std	Y+63, r24	; 0x3f
    861c:	2a 97       	sbiw	r28, 0x0a	; 10
    861e:	2b 96       	adiw	r28, 0x0b	; 11
    8620:	9f af       	std	Y+63, r25	; 0x3f
    8622:	2b 97       	sbiw	r28, 0x0b	; 11
    8624:	1f c0       	rjmp	.+62     	; 0x8664 <_printf_fn+0x506>
    8626:	22 e0       	ldi	r18, 0x02	; 2
    8628:	42 2e       	mov	r4, r18
    862a:	51 2c       	mov	r5, r1
    862c:	6c 96       	adiw	r28, 0x1c	; 28
    862e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8630:	6c 97       	sbiw	r28, 0x1c	; 28
    8632:	6d 96       	adiw	r28, 0x1d	; 29
    8634:	9f ad       	ldd	r25, Y+63	; 0x3f
    8636:	6d 97       	sbiw	r28, 0x1d	; 29
    8638:	1b c0       	rjmp	.+54     	; 0x8670 <_printf_fn+0x512>
    863a:	94 e0       	ldi	r25, 0x04	; 4
    863c:	49 2e       	mov	r4, r25
    863e:	51 2c       	mov	r5, r1
    8640:	6a 96       	adiw	r28, 0x1a	; 26
    8642:	8f ad       	ldd	r24, Y+63	; 0x3f
    8644:	6a 97       	sbiw	r28, 0x1a	; 26
    8646:	6b 96       	adiw	r28, 0x1b	; 27
    8648:	9f ad       	ldd	r25, Y+63	; 0x3f
    864a:	6b 97       	sbiw	r28, 0x1b	; 27
    864c:	11 c0       	rjmp	.+34     	; 0x8670 <_printf_fn+0x512>
    864e:	66 96       	adiw	r28, 0x16	; 22
    8650:	8f ad       	ldd	r24, Y+63	; 0x3f
    8652:	66 97       	sbiw	r28, 0x16	; 22
    8654:	67 96       	adiw	r28, 0x17	; 23
    8656:	9f ad       	ldd	r25, Y+63	; 0x3f
    8658:	67 97       	sbiw	r28, 0x17	; 23
    865a:	a3 96       	adiw	r28, 0x23	; 35
    865c:	1f ae       	std	Y+63, r1	; 0x3f
    865e:	1e ae       	std	Y+62, r1	; 0x3e
    8660:	a3 97       	sbiw	r28, 0x23	; 35
    8662:	06 c0       	rjmp	.+12     	; 0x8670 <_printf_fn+0x512>
    8664:	68 96       	adiw	r28, 0x18	; 24
    8666:	8f ad       	ldd	r24, Y+63	; 0x3f
    8668:	68 97       	sbiw	r28, 0x18	; 24
    866a:	69 96       	adiw	r28, 0x19	; 25
    866c:	9f ad       	ldd	r25, Y+63	; 0x3f
    866e:	69 97       	sbiw	r28, 0x19	; 25
    8670:	2f ef       	ldi	r18, 0xFF	; 255
    8672:	62 1a       	sub	r6, r18
    8674:	72 0a       	sbc	r7, r18
    8676:	82 0a       	sbc	r8, r18
    8678:	15 01       	movw	r2, r10
    867a:	33 c0       	rjmp	.+102    	; 0x86e2 <_printf_fn+0x584>
    867c:	91 fc       	sbrc	r9, 1
    867e:	08 c0       	rjmp	.+16     	; 0x8690 <_printf_fn+0x532>
    8680:	68 94       	set
    8682:	91 f8       	bld	r9, 1
    8684:	46 e0       	ldi	r20, 0x06	; 6
    8686:	50 e0       	ldi	r21, 0x00	; 0
    8688:	a1 96       	adiw	r28, 0x21	; 33
    868a:	5f af       	std	Y+63, r21	; 0x3f
    868c:	4e af       	std	Y+62, r20	; 0x3e
    868e:	a1 97       	sbiw	r28, 0x21	; 33
    8690:	d1 01       	movw	r26, r2
    8692:	8d 91       	ld	r24, X+
    8694:	9d 91       	ld	r25, X+
    8696:	0d 90       	ld	r0, X+
    8698:	bc 91       	ld	r27, X
    869a:	a0 2d       	mov	r26, r0
    869c:	a9 96       	adiw	r28, 0x29	; 41
    869e:	8c af       	std	Y+60, r24	; 0x3c
    86a0:	9d af       	std	Y+61, r25	; 0x3d
    86a2:	ae af       	std	Y+62, r26	; 0x3e
    86a4:	bf af       	std	Y+63, r27	; 0x3f
    86a6:	a9 97       	sbiw	r28, 0x29	; 41
    86a8:	bf ef       	ldi	r27, 0xFF	; 255
    86aa:	6b 1a       	sub	r6, r27
    86ac:	7b 0a       	sbc	r7, r27
    86ae:	8b 0a       	sbc	r8, r27
    86b0:	f1 01       	movw	r30, r2
    86b2:	34 96       	adiw	r30, 0x04	; 4
    86b4:	1f 01       	movw	r2, r30
    86b6:	0f c0       	rjmp	.+30     	; 0x86d6 <_printf_fn+0x578>
    86b8:	ff ef       	ldi	r31, 0xFF	; 255
    86ba:	6f 1a       	sub	r6, r31
    86bc:	7f 0a       	sbc	r7, r31
    86be:	8f 0a       	sbc	r8, r31
    86c0:	c5 c0       	rjmp	.+394    	; 0x884c <_printf_fn+0x6ee>
    86c2:	2f ef       	ldi	r18, 0xFF	; 255
    86c4:	62 1a       	sub	r6, r18
    86c6:	72 0a       	sbc	r7, r18
    86c8:	82 0a       	sbc	r8, r18
    86ca:	11 c1       	rjmp	.+546    	; 0x88ee <_printf_fn+0x790>
    86cc:	3f ef       	ldi	r19, 0xFF	; 255
    86ce:	63 1a       	sub	r6, r19
    86d0:	73 0a       	sbc	r7, r19
    86d2:	83 0a       	sbc	r8, r19
    86d4:	c8 c0       	rjmp	.+400    	; 0x8866 <_printf_fn+0x708>
    86d6:	66 96       	adiw	r28, 0x16	; 22
    86d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    86da:	66 97       	sbiw	r28, 0x16	; 22
    86dc:	67 96       	adiw	r28, 0x17	; 23
    86de:	9f ad       	ldd	r25, Y+63	; 0x3f
    86e0:	67 97       	sbiw	r28, 0x17	; 23
    86e2:	a3 96       	adiw	r28, 0x23	; 35
    86e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    86e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    86e8:	a3 97       	sbiw	r28, 0x23	; 35
    86ea:	e2 54       	subi	r30, 0x42	; 66
    86ec:	f1 09       	sbc	r31, r1
    86ee:	e7 33       	cpi	r30, 0x37	; 55
    86f0:	f1 05       	cpc	r31, r1
    86f2:	08 f0       	brcs	.+2      	; 0x86f6 <_printf_fn+0x598>
    86f4:	56 c1       	rjmp	.+684    	; 0x89a2 <_printf_fn+0x844>
    86f6:	e3 58       	subi	r30, 0x83	; 131
    86f8:	ff 4f       	sbci	r31, 0xFF	; 255
    86fa:	0c 94 bd e2 	jmp	0x1c57a	; 0x1c57a <__tablejump2__>
    86fe:	e8 94       	clt
    8700:	94 f8       	bld	r9, 4
    8702:	e8 94       	clt
    8704:	92 f8       	bld	r9, 2
    8706:	a9 2c       	mov	r10, r9
    8708:	b1 2c       	mov	r11, r1
    870a:	a1 96       	adiw	r28, 0x21	; 33
    870c:	ce ac       	ldd	r12, Y+62	; 0x3e
    870e:	df ac       	ldd	r13, Y+63	; 0x3f
    8710:	a1 97       	sbiw	r28, 0x21	; 33
    8712:	6f 96       	adiw	r28, 0x1f	; 31
    8714:	ee ac       	ldd	r14, Y+62	; 0x3e
    8716:	ff ac       	ldd	r15, Y+63	; 0x3f
    8718:	6f 97       	sbiw	r28, 0x1f	; 31
    871a:	0a e0       	ldi	r16, 0x0A	; 10
    871c:	10 e0       	ldi	r17, 0x00	; 0
    871e:	19 c0       	rjmp	.+50     	; 0x8752 <_printf_fn+0x5f4>
    8720:	a9 2c       	mov	r10, r9
    8722:	b1 2c       	mov	r11, r1
    8724:	a1 96       	adiw	r28, 0x21	; 33
    8726:	ce ac       	ldd	r12, Y+62	; 0x3e
    8728:	df ac       	ldd	r13, Y+63	; 0x3f
    872a:	a1 97       	sbiw	r28, 0x21	; 33
    872c:	6f 96       	adiw	r28, 0x1f	; 31
    872e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8730:	ff ac       	ldd	r15, Y+63	; 0x3f
    8732:	6f 97       	sbiw	r28, 0x1f	; 31
    8734:	02 e0       	ldi	r16, 0x02	; 2
    8736:	10 e0       	ldi	r17, 0x00	; 0
    8738:	0c c0       	rjmp	.+24     	; 0x8752 <_printf_fn+0x5f4>
    873a:	a9 2c       	mov	r10, r9
    873c:	b1 2c       	mov	r11, r1
    873e:	a1 96       	adiw	r28, 0x21	; 33
    8740:	ce ac       	ldd	r12, Y+62	; 0x3e
    8742:	df ac       	ldd	r13, Y+63	; 0x3f
    8744:	a1 97       	sbiw	r28, 0x21	; 33
    8746:	6f 96       	adiw	r28, 0x1f	; 31
    8748:	ee ac       	ldd	r14, Y+62	; 0x3e
    874a:	ff ac       	ldd	r15, Y+63	; 0x3f
    874c:	6f 97       	sbiw	r28, 0x1f	; 31
    874e:	08 e0       	ldi	r16, 0x08	; 8
    8750:	10 e0       	ldi	r17, 0x00	; 0
    8752:	22 e4       	ldi	r18, 0x42	; 66
    8754:	30 e0       	ldi	r19, 0x00	; 0
    8756:	ae 01       	movw	r20, r28
    8758:	4f 5f       	subi	r20, 0xFF	; 255
    875a:	5f 4f       	sbci	r21, 0xFF	; 255
    875c:	b2 01       	movw	r22, r4
    875e:	7d d9       	rcall	.-3334   	; 0x7a5a <p_ntoa>
    8760:	34 c0       	rjmp	.+104    	; 0x87ca <_printf_fn+0x66c>
    8762:	a9 2c       	mov	r10, r9
    8764:	b1 2c       	mov	r11, r1
    8766:	a1 96       	adiw	r28, 0x21	; 33
    8768:	ce ac       	ldd	r12, Y+62	; 0x3e
    876a:	df ac       	ldd	r13, Y+63	; 0x3f
    876c:	a1 97       	sbiw	r28, 0x21	; 33
    876e:	6f 96       	adiw	r28, 0x1f	; 31
    8770:	ee ac       	ldd	r14, Y+62	; 0x3e
    8772:	ff ac       	ldd	r15, Y+63	; 0x3f
    8774:	6f 97       	sbiw	r28, 0x1f	; 31
    8776:	00 e1       	ldi	r16, 0x10	; 16
    8778:	10 e0       	ldi	r17, 0x00	; 0
    877a:	22 e4       	ldi	r18, 0x42	; 66
    877c:	30 e0       	ldi	r19, 0x00	; 0
    877e:	ae 01       	movw	r20, r28
    8780:	4f 5f       	subi	r20, 0xFF	; 255
    8782:	5f 4f       	sbci	r21, 0xFF	; 255
    8784:	b2 01       	movw	r22, r4
    8786:	69 d9       	rcall	.-3374   	; 0x7a5a <p_ntoa>
    8788:	6c 01       	movw	r12, r24
    878a:	a3 96       	adiw	r28, 0x23	; 35
    878c:	6e ad       	ldd	r22, Y+62	; 0x3e
    878e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8790:	a3 97       	sbiw	r28, 0x23	; 35
    8792:	67 7f       	andi	r22, 0xF7	; 247
    8794:	60 35       	cpi	r22, 0x50	; 80
    8796:	71 05       	cpc	r23, r1
    8798:	09 f0       	breq	.+2      	; 0x879c <_printf_fn+0x63e>
    879a:	3f c0       	rjmp	.+126    	; 0x881a <_printf_fn+0x6bc>
    879c:	3a c0       	rjmp	.+116    	; 0x8812 <_printf_fn+0x6b4>
    879e:	c9 2c       	mov	r12, r9
    87a0:	d1 2c       	mov	r13, r1
    87a2:	a1 96       	adiw	r28, 0x21	; 33
    87a4:	ee ac       	ldd	r14, Y+62	; 0x3e
    87a6:	ff ac       	ldd	r15, Y+63	; 0x3f
    87a8:	a1 97       	sbiw	r28, 0x21	; 33
    87aa:	6f 96       	adiw	r28, 0x1f	; 31
    87ac:	0e ad       	ldd	r16, Y+62	; 0x3e
    87ae:	1f ad       	ldd	r17, Y+63	; 0x3f
    87b0:	6f 97       	sbiw	r28, 0x1f	; 31
    87b2:	22 e4       	ldi	r18, 0x42	; 66
    87b4:	30 e0       	ldi	r19, 0x00	; 0
    87b6:	ae 01       	movw	r20, r28
    87b8:	4f 5f       	subi	r20, 0xFF	; 255
    87ba:	5f 4f       	sbci	r21, 0xFF	; 255
    87bc:	a9 96       	adiw	r28, 0x29	; 41
    87be:	6c ad       	ldd	r22, Y+60	; 0x3c
    87c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    87c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    87c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    87c6:	a9 97       	sbiw	r28, 0x29	; 41
    87c8:	9d d9       	rcall	.-3270   	; 0x7b04 <p_ftoa>
    87ca:	93 fa       	bst	r9, 3
    87cc:	00 27       	eor	r16, r16
    87ce:	00 f9       	bld	r16, 0
    87d0:	10 e0       	ldi	r17, 0x00	; 0
    87d2:	9c 01       	movw	r18, r24
    87d4:	27 c0       	rjmp	.+78     	; 0x8824 <_printf_fn+0x6c6>
    87d6:	c9 2c       	mov	r12, r9
    87d8:	d1 2c       	mov	r13, r1
    87da:	a1 96       	adiw	r28, 0x21	; 33
    87dc:	ee ac       	ldd	r14, Y+62	; 0x3e
    87de:	ff ac       	ldd	r15, Y+63	; 0x3f
    87e0:	a1 97       	sbiw	r28, 0x21	; 33
    87e2:	6f 96       	adiw	r28, 0x1f	; 31
    87e4:	0e ad       	ldd	r16, Y+62	; 0x3e
    87e6:	1f ad       	ldd	r17, Y+63	; 0x3f
    87e8:	6f 97       	sbiw	r28, 0x1f	; 31
    87ea:	22 e4       	ldi	r18, 0x42	; 66
    87ec:	30 e0       	ldi	r19, 0x00	; 0
    87ee:	ae 01       	movw	r20, r28
    87f0:	4f 5f       	subi	r20, 0xFF	; 255
    87f2:	5f 4f       	sbci	r21, 0xFF	; 255
    87f4:	a9 96       	adiw	r28, 0x29	; 41
    87f6:	6c ad       	ldd	r22, Y+60	; 0x3c
    87f8:	7d ad       	ldd	r23, Y+61	; 0x3d
    87fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    87fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    87fe:	a9 97       	sbiw	r28, 0x29	; 41
    8800:	88 da       	rcall	.-2800   	; 0x7d12 <p_etoa>
    8802:	6c 01       	movw	r12, r24
    8804:	a3 96       	adiw	r28, 0x23	; 35
    8806:	4e ad       	ldd	r20, Y+62	; 0x3e
    8808:	5f ad       	ldd	r21, Y+63	; 0x3f
    880a:	a3 97       	sbiw	r28, 0x23	; 35
    880c:	45 34       	cpi	r20, 0x45	; 69
    880e:	51 05       	cpc	r21, r1
    8810:	21 f4       	brne	.+8      	; 0x881a <_printf_fn+0x6bc>
    8812:	ce 01       	movw	r24, r28
    8814:	01 96       	adiw	r24, 0x01	; 1
    8816:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <strupper>
    881a:	93 fa       	bst	r9, 3
    881c:	00 27       	eor	r16, r16
    881e:	00 f9       	bld	r16, 0
    8820:	10 e0       	ldi	r17, 0x00	; 0
    8822:	96 01       	movw	r18, r12
    8824:	6f 96       	adiw	r28, 0x1f	; 31
    8826:	4e ad       	ldd	r20, Y+62	; 0x3e
    8828:	5f ad       	ldd	r21, Y+63	; 0x3f
    882a:	6f 97       	sbiw	r28, 0x1f	; 31
    882c:	be 01       	movw	r22, r28
    882e:	6f 5f       	subi	r22, 0xFF	; 255
    8830:	7f 4f       	sbci	r23, 0xFF	; 255
    8832:	a5 96       	adiw	r28, 0x25	; 37
    8834:	8e ad       	ldd	r24, Y+62	; 0x3e
    8836:	9f ad       	ldd	r25, Y+63	; 0x3f
    8838:	a5 97       	sbiw	r28, 0x25	; 37
    883a:	d7 db       	rcall	.-2130   	; 0x7fea <_puts_pad>
    883c:	b6 c0       	rjmp	.+364    	; 0x89aa <_printf_fn+0x84c>
    883e:	a3 96       	adiw	r28, 0x23	; 35
    8840:	8e ad       	ldd	r24, Y+62	; 0x3e
    8842:	9f ad       	ldd	r25, Y+63	; 0x3f
    8844:	a3 97       	sbiw	r28, 0x23	; 35
    8846:	83 37       	cpi	r24, 0x73	; 115
    8848:	91 05       	cpc	r25, r1
    884a:	69 f4       	brne	.+26     	; 0x8866 <_printf_fn+0x708>
    884c:	61 01       	movw	r12, r2
    884e:	92 e0       	ldi	r25, 0x02	; 2
    8850:	c9 0e       	add	r12, r25
    8852:	d1 1c       	adc	r13, r1
    8854:	d1 01       	movw	r26, r2
    8856:	6d 91       	ld	r22, X+
    8858:	7c 91       	ld	r23, X
    885a:	61 15       	cp	r22, r1
    885c:	71 05       	cpc	r23, r1
    885e:	91 f4       	brne	.+36     	; 0x8884 <_printf_fn+0x726>
    8860:	6a e1       	ldi	r22, 0x1A	; 26
    8862:	74 e0       	ldi	r23, 0x04	; 4
    8864:	0f c0       	rjmp	.+30     	; 0x8884 <_printf_fn+0x726>
    8866:	61 01       	movw	r12, r2
    8868:	b2 e0       	ldi	r27, 0x02	; 2
    886a:	cb 0e       	add	r12, r27
    886c:	d1 1c       	adc	r13, r1
    886e:	f1 01       	movw	r30, r2
    8870:	80 81       	ld	r24, Z
    8872:	60 96       	adiw	r28, 0x10	; 16
    8874:	8f af       	std	Y+63, r24	; 0x3f
    8876:	60 97       	sbiw	r28, 0x10	; 16
    8878:	61 96       	adiw	r28, 0x11	; 17
    887a:	1f ae       	std	Y+63, r1	; 0x3f
    887c:	61 97       	sbiw	r28, 0x11	; 17
    887e:	be 01       	movw	r22, r28
    8880:	61 5b       	subi	r22, 0xB1	; 177
    8882:	7f 4f       	sbci	r23, 0xFF	; 255
    8884:	fb 01       	movw	r30, r22
    8886:	01 90       	ld	r0, Z+
    8888:	00 20       	and	r0, r0
    888a:	e9 f7       	brne	.-6      	; 0x8886 <_printf_fn+0x728>
    888c:	31 97       	sbiw	r30, 0x01	; 1
    888e:	e6 1b       	sub	r30, r22
    8890:	f7 0b       	sbc	r31, r23
    8892:	a1 96       	adiw	r28, 0x21	; 33
    8894:	2e ad       	ldd	r18, Y+62	; 0x3e
    8896:	3f ad       	ldd	r19, Y+63	; 0x3f
    8898:	a1 97       	sbiw	r28, 0x21	; 33
    889a:	23 2b       	or	r18, r19
    889c:	21 f4       	brne	.+8      	; 0x88a6 <_printf_fn+0x748>
    889e:	a1 96       	adiw	r28, 0x21	; 33
    88a0:	ff af       	std	Y+63, r31	; 0x3f
    88a2:	ee af       	std	Y+62, r30	; 0x3e
    88a4:	a1 97       	sbiw	r28, 0x21	; 33
    88a6:	6f 96       	adiw	r28, 0x1f	; 31
    88a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    88aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    88ac:	6f 97       	sbiw	r28, 0x1f	; 31
    88ae:	a1 96       	adiw	r28, 0x21	; 33
    88b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    88b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    88b4:	a1 97       	sbiw	r28, 0x21	; 33
    88b6:	48 17       	cp	r20, r24
    88b8:	59 07       	cpc	r21, r25
    88ba:	3c f4       	brge	.+14     	; 0x88ca <_printf_fn+0x76c>
    88bc:	41 15       	cp	r20, r1
    88be:	51 05       	cpc	r21, r1
    88c0:	21 f0       	breq	.+8      	; 0x88ca <_printf_fn+0x76c>
    88c2:	a1 96       	adiw	r28, 0x21	; 33
    88c4:	5f af       	std	Y+63, r21	; 0x3f
    88c6:	4e af       	std	Y+62, r20	; 0x3e
    88c8:	a1 97       	sbiw	r28, 0x21	; 33
    88ca:	93 fa       	bst	r9, 3
    88cc:	00 27       	eor	r16, r16
    88ce:	00 f9       	bld	r16, 0
    88d0:	10 e0       	ldi	r17, 0x00	; 0
    88d2:	a1 96       	adiw	r28, 0x21	; 33
    88d4:	2e ad       	ldd	r18, Y+62	; 0x3e
    88d6:	3f ad       	ldd	r19, Y+63	; 0x3f
    88d8:	a1 97       	sbiw	r28, 0x21	; 33
    88da:	6f 96       	adiw	r28, 0x1f	; 31
    88dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    88de:	5f ad       	ldd	r21, Y+63	; 0x3f
    88e0:	6f 97       	sbiw	r28, 0x1f	; 31
    88e2:	a5 96       	adiw	r28, 0x25	; 37
    88e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    88e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    88e8:	a5 97       	sbiw	r28, 0x25	; 37
    88ea:	7f db       	rcall	.-2306   	; 0x7fea <_puts_pad>
    88ec:	45 c0       	rjmp	.+138    	; 0x8978 <_printf_fn+0x81a>
    88ee:	61 01       	movw	r12, r2
    88f0:	92 e0       	ldi	r25, 0x02	; 2
    88f2:	c9 0e       	add	r12, r25
    88f4:	d1 1c       	adc	r13, r1
    88f6:	d1 01       	movw	r26, r2
    88f8:	2d 90       	ld	r2, X+
    88fa:	3c 90       	ld	r3, X
    88fc:	41 2c       	mov	r4, r1
    88fe:	21 14       	cp	r2, r1
    8900:	31 04       	cpc	r3, r1
    8902:	41 04       	cpc	r4, r1
    8904:	29 f4       	brne	.+10     	; 0x8910 <_printf_fn+0x7b2>
    8906:	ae 96       	adiw	r28, 0x2e	; 46
    8908:	2d ac       	ldd	r2, Y+61	; 0x3d
    890a:	3e ac       	ldd	r3, Y+62	; 0x3e
    890c:	4f ac       	ldd	r4, Y+63	; 0x3f
    890e:	ae 97       	sbiw	r28, 0x2e	; 46
    8910:	84 2d       	mov	r24, r4
    8912:	b1 01       	movw	r22, r2
    8914:	08 dc       	rcall	.-2032   	; 0x8126 <strlen_X>
    8916:	a1 96       	adiw	r28, 0x21	; 33
    8918:	ee ad       	ldd	r30, Y+62	; 0x3e
    891a:	ff ad       	ldd	r31, Y+63	; 0x3f
    891c:	a1 97       	sbiw	r28, 0x21	; 33
    891e:	ef 2b       	or	r30, r31
    8920:	31 f4       	brne	.+12     	; 0x892e <_printf_fn+0x7d0>
    8922:	a0 96       	adiw	r28, 0x20	; 32
    8924:	8f af       	std	Y+63, r24	; 0x3f
    8926:	a0 97       	sbiw	r28, 0x20	; 32
    8928:	a1 96       	adiw	r28, 0x21	; 33
    892a:	9f af       	std	Y+63, r25	; 0x3f
    892c:	a1 97       	sbiw	r28, 0x21	; 33
    892e:	6f 96       	adiw	r28, 0x1f	; 31
    8930:	2e ad       	ldd	r18, Y+62	; 0x3e
    8932:	3f ad       	ldd	r19, Y+63	; 0x3f
    8934:	6f 97       	sbiw	r28, 0x1f	; 31
    8936:	a1 96       	adiw	r28, 0x21	; 33
    8938:	4e ad       	ldd	r20, Y+62	; 0x3e
    893a:	5f ad       	ldd	r21, Y+63	; 0x3f
    893c:	a1 97       	sbiw	r28, 0x21	; 33
    893e:	24 17       	cp	r18, r20
    8940:	35 07       	cpc	r19, r21
    8942:	3c f4       	brge	.+14     	; 0x8952 <_printf_fn+0x7f4>
    8944:	21 15       	cp	r18, r1
    8946:	31 05       	cpc	r19, r1
    8948:	21 f0       	breq	.+8      	; 0x8952 <_printf_fn+0x7f4>
    894a:	a1 96       	adiw	r28, 0x21	; 33
    894c:	3f af       	std	Y+63, r19	; 0x3f
    894e:	2e af       	std	Y+62, r18	; 0x3e
    8950:	a1 97       	sbiw	r28, 0x21	; 33
    8952:	93 fa       	bst	r9, 3
    8954:	ee 24       	eor	r14, r14
    8956:	e0 f8       	bld	r14, 0
    8958:	f1 2c       	mov	r15, r1
    895a:	a1 96       	adiw	r28, 0x21	; 33
    895c:	0e ad       	ldd	r16, Y+62	; 0x3e
    895e:	1f ad       	ldd	r17, Y+63	; 0x3f
    8960:	a1 97       	sbiw	r28, 0x21	; 33
    8962:	6f 96       	adiw	r28, 0x1f	; 31
    8964:	2e ad       	ldd	r18, Y+62	; 0x3e
    8966:	3f ad       	ldd	r19, Y+63	; 0x3f
    8968:	6f 97       	sbiw	r28, 0x1f	; 31
    896a:	64 2d       	mov	r22, r4
    896c:	a1 01       	movw	r20, r2
    896e:	a5 96       	adiw	r28, 0x25	; 37
    8970:	8e ad       	ldd	r24, Y+62	; 0x3e
    8972:	9f ad       	ldd	r25, Y+63	; 0x3f
    8974:	a5 97       	sbiw	r28, 0x25	; 37
    8976:	7b db       	rcall	.-2314   	; 0x806e <_puts_pad_X>
    8978:	16 01       	movw	r2, r12
    897a:	17 c0       	rjmp	.+46     	; 0x89aa <_printf_fn+0x84c>
    897c:	f6 01       	movw	r30, r12
    897e:	5e 2d       	mov	r21, r14
    8980:	0e 94 23 e3 	call	0x1c646	; 0x1c646 <__xload_1>
    8984:	66 23       	and	r22, r22
    8986:	89 f0       	breq	.+34     	; 0x89aa <_printf_fn+0x84c>
    8988:	5f ef       	ldi	r21, 0xFF	; 255
    898a:	c5 1a       	sub	r12, r21
    898c:	d5 0a       	sbc	r13, r21
    898e:	e5 0a       	sbc	r14, r21
    8990:	a5 96       	adiw	r28, 0x25	; 37
    8992:	ae ad       	ldd	r26, Y+62	; 0x3e
    8994:	bf ad       	ldd	r27, Y+63	; 0x3f
    8996:	a5 97       	sbiw	r28, 0x25	; 37
    8998:	ed 91       	ld	r30, X+
    899a:	fc 91       	ld	r31, X
    899c:	11 97       	sbiw	r26, 0x01	; 1
    899e:	cd 01       	movw	r24, r26
    89a0:	09 95       	icall
    89a2:	6c 14       	cp	r6, r12
    89a4:	7d 04       	cpc	r7, r13
    89a6:	8e 04       	cpc	r8, r14
    89a8:	48 f7       	brcc	.-46     	; 0x897c <_printf_fn+0x81e>
    89aa:	e8 2c       	mov	r14, r8
    89ac:	63 01       	movw	r12, r6
    89ae:	0f cc       	rjmp	.-2018   	; 0x81ce <_printf_fn+0x70>
    89b0:	82 e0       	ldi	r24, 0x02	; 2
    89b2:	48 2e       	mov	r4, r24
    89b4:	51 2c       	mov	r5, r1
    89b6:	0d cd       	rjmp	.-1510   	; 0x83d2 <_printf_fn+0x274>
    89b8:	f2 e0       	ldi	r31, 0x02	; 2
    89ba:	4f 16       	cp	r4, r31
    89bc:	51 04       	cpc	r5, r1
    89be:	61 f4       	brne	.+24     	; 0x89d8 <_printf_fn+0x87a>
    89c0:	51 01       	movw	r10, r2
    89c2:	b2 e0       	ldi	r27, 0x02	; 2
    89c4:	ab 0e       	add	r10, r27
    89c6:	b1 1c       	adc	r11, r1
    89c8:	f1 01       	movw	r30, r2
    89ca:	80 81       	ld	r24, Z
    89cc:	91 81       	ldd	r25, Z+1	; 0x01
    89ce:	65 96       	adiw	r28, 0x15	; 21
    89d0:	9f af       	std	Y+63, r25	; 0x3f
    89d2:	8e af       	std	Y+62, r24	; 0x3e
    89d4:	65 97       	sbiw	r28, 0x15	; 21
    89d6:	7e cd       	rjmp	.-1284   	; 0x84d4 <_printf_fn+0x376>
    89d8:	f4 e0       	ldi	r31, 0x04	; 4
    89da:	4f 16       	cp	r4, r31
    89dc:	51 04       	cpc	r5, r1
    89de:	09 f0       	breq	.+2      	; 0x89e2 <_printf_fn+0x884>
    89e0:	b2 cd       	rjmp	.-1180   	; 0x8546 <_printf_fn+0x3e8>
    89e2:	51 01       	movw	r10, r2
    89e4:	24 e0       	ldi	r18, 0x04	; 4
    89e6:	a2 0e       	add	r10, r18
    89e8:	b1 1c       	adc	r11, r1
    89ea:	f1 01       	movw	r30, r2
    89ec:	80 81       	ld	r24, Z
    89ee:	91 81       	ldd	r25, Z+1	; 0x01
    89f0:	a2 81       	ldd	r26, Z+2	; 0x02
    89f2:	b3 81       	ldd	r27, Z+3	; 0x03
    89f4:	2f 96       	adiw	r28, 0x0f	; 15
    89f6:	8c af       	std	Y+60, r24	; 0x3c
    89f8:	9d af       	std	Y+61, r25	; 0x3d
    89fa:	ae af       	std	Y+62, r26	; 0x3e
    89fc:	bf af       	std	Y+63, r27	; 0x3f
    89fe:	2f 97       	sbiw	r28, 0x0f	; 15
    8a00:	90 cd       	rjmp	.-1248   	; 0x8522 <_printf_fn+0x3c4>
    8a02:	c2 59       	subi	r28, 0x92	; 146
    8a04:	df 4f       	sbci	r29, 0xFF	; 255
    8a06:	e2 e1       	ldi	r30, 0x12	; 18
    8a08:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00008a0c <vsnprintf_P>:
    8a0c:	a8 e0       	ldi	r26, 0x08	; 8
    8a0e:	b0 e0       	ldi	r27, 0x00	; 0
    8a10:	ec e0       	ldi	r30, 0x0C	; 12
    8a12:	f5 e4       	ldi	r31, 0x45	; 69
    8a14:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
    8a18:	7c 01       	movw	r14, r24
    8a1a:	cb 01       	movw	r24, r22
    8a1c:	64 2f       	mov	r22, r20
    8a1e:	a9 01       	movw	r20, r18
    8a20:	98 01       	movw	r18, r16
    8a22:	f7 01       	movw	r30, r14
    8a24:	10 82       	st	Z, r1
    8a26:	e4 e6       	ldi	r30, 0x64	; 100
    8a28:	fc e3       	ldi	r31, 0x3C	; 60
    8a2a:	fa 83       	std	Y+2, r31	; 0x02
    8a2c:	e9 83       	std	Y+1, r30	; 0x01
    8a2e:	9e 83       	std	Y+6, r25	; 0x06
    8a30:	8d 83       	std	Y+5, r24	; 0x05
    8a32:	18 86       	std	Y+8, r1	; 0x08
    8a34:	1f 82       	std	Y+7, r1	; 0x07
    8a36:	fc 82       	std	Y+4, r15	; 0x04
    8a38:	eb 82       	std	Y+3, r14	; 0x03
    8a3a:	ce 01       	movw	r24, r28
    8a3c:	01 96       	adiw	r24, 0x01	; 1
    8a3e:	8f db       	rcall	.-2274   	; 0x815e <_printf_fn>
    8a40:	f7 01       	movw	r30, r14
    8a42:	01 90       	ld	r0, Z+
    8a44:	00 20       	and	r0, r0
    8a46:	e9 f7       	brne	.-6      	; 0x8a42 <vsnprintf_P+0x36>
    8a48:	cf 01       	movw	r24, r30
    8a4a:	01 97       	sbiw	r24, 0x01	; 1
    8a4c:	8e 19       	sub	r24, r14
    8a4e:	9f 09       	sbc	r25, r15
    8a50:	28 96       	adiw	r28, 0x08	; 8
    8a52:	e6 e0       	ldi	r30, 0x06	; 6
    8a54:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00008a58 <snprintf_P>:
    8a58:	a0 e0       	ldi	r26, 0x00	; 0
    8a5a:	b0 e0       	ldi	r27, 0x00	; 0
    8a5c:	e2 e3       	ldi	r30, 0x32	; 50
    8a5e:	f5 e4       	ldi	r31, 0x45	; 69
    8a60:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    8a64:	8e 01       	movw	r16, r28
    8a66:	02 5f       	subi	r16, 0xF2	; 242
    8a68:	1f 4f       	sbci	r17, 0xFF	; 255
    8a6a:	2b 85       	ldd	r18, Y+11	; 0x0b
    8a6c:	3c 85       	ldd	r19, Y+12	; 0x0c
    8a6e:	4d 85       	ldd	r20, Y+13	; 0x0d
    8a70:	69 85       	ldd	r22, Y+9	; 0x09
    8a72:	7a 85       	ldd	r23, Y+10	; 0x0a
    8a74:	8f 81       	ldd	r24, Y+7	; 0x07
    8a76:	98 85       	ldd	r25, Y+8	; 0x08
    8a78:	c9 df       	rcall	.-110    	; 0x8a0c <vsnprintf_P>
    8a7a:	e4 e0       	ldi	r30, 0x04	; 4
    8a7c:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00008a80 <sprintf_P>:
    8a80:	a0 e0       	ldi	r26, 0x00	; 0
    8a82:	b0 e0       	ldi	r27, 0x00	; 0
    8a84:	e6 e4       	ldi	r30, 0x46	; 70
    8a86:	f5 e4       	ldi	r31, 0x45	; 69
    8a88:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    8a8c:	8e 01       	movw	r16, r28
    8a8e:	04 5f       	subi	r16, 0xF4	; 244
    8a90:	1f 4f       	sbci	r17, 0xFF	; 255
    8a92:	29 85       	ldd	r18, Y+9	; 0x09
    8a94:	3a 85       	ldd	r19, Y+10	; 0x0a
    8a96:	4b 85       	ldd	r20, Y+11	; 0x0b
    8a98:	60 e0       	ldi	r22, 0x00	; 0
    8a9a:	74 e0       	ldi	r23, 0x04	; 4
    8a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    8a9e:	98 85       	ldd	r25, Y+8	; 0x08
    8aa0:	b5 df       	rcall	.-150    	; 0x8a0c <vsnprintf_P>
    8aa2:	e4 e0       	ldi	r30, 0x04	; 4
    8aa4:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00008aa8 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8aa8:	a8 e0       	ldi	r26, 0x08	; 8
    8aaa:	b0 e0       	ldi	r27, 0x00	; 0
    8aac:	ea e5       	ldi	r30, 0x5A	; 90
    8aae:	f5 e4       	ldi	r31, 0x45	; 69
    8ab0:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    8ab4:	9e 01       	movw	r18, r28
    8ab6:	23 5f       	subi	r18, 0xF3	; 243
    8ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    8aba:	f9 01       	movw	r30, r18
    8abc:	41 91       	ld	r20, Z+
    8abe:	51 91       	ld	r21, Z+
    8ac0:	61 91       	ld	r22, Z+
    8ac2:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8ac4:	8d e7       	ldi	r24, 0x7D	; 125
    8ac6:	9c e3       	ldi	r25, 0x3C	; 60
    8ac8:	9a 83       	std	Y+2, r25	; 0x02
    8aca:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8acc:	18 86       	std	Y+8, r1	; 0x08
    8ace:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8ad0:	ce 01       	movw	r24, r28
    8ad2:	01 96       	adiw	r24, 0x01	; 1
    8ad4:	44 db       	rcall	.-2424   	; 0x815e <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8ad6:	8f 81       	ldd	r24, Y+7	; 0x07
    8ad8:	98 85       	ldd	r25, Y+8	; 0x08
    8ada:	28 96       	adiw	r28, 0x08	; 8
    8adc:	e2 e0       	ldi	r30, 0x02	; 2
    8ade:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00008ae2 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8ae2:	9c 01       	movw	r18, r24
    8ae4:	20 53       	subi	r18, 0x30	; 48
    8ae6:	31 09       	sbc	r19, r1
    8ae8:	2a 30       	cpi	r18, 0x0A	; 10
    8aea:	31 05       	cpc	r19, r1
    8aec:	10 f4       	brcc	.+4      	; 0x8af2 <atodigit+0x10>
    8aee:	c9 01       	movw	r24, r18
    8af0:	10 c0       	rjmp	.+32     	; 0x8b12 <atodigit+0x30>
    8af2:	9c 01       	movw	r18, r24
    8af4:	21 54       	subi	r18, 0x41	; 65
    8af6:	31 09       	sbc	r19, r1
    8af8:	26 30       	cpi	r18, 0x06	; 6
    8afa:	31 05       	cpc	r19, r1
    8afc:	10 f4       	brcc	.+4      	; 0x8b02 <atodigit+0x20>
    8afe:	c7 97       	sbiw	r24, 0x37	; 55
    8b00:	08 c0       	rjmp	.+16     	; 0x8b12 <atodigit+0x30>
    8b02:	9c 01       	movw	r18, r24
    8b04:	21 56       	subi	r18, 0x61	; 97
    8b06:	31 09       	sbc	r19, r1
    8b08:	26 30       	cpi	r18, 0x06	; 6
    8b0a:	31 05       	cpc	r19, r1
    8b0c:	28 f4       	brcc	.+10     	; 0x8b18 <atodigit+0x36>
    8b0e:	87 55       	subi	r24, 0x57	; 87
    8b10:	91 09       	sbc	r25, r1
    8b12:	86 17       	cp	r24, r22
    8b14:	97 07       	cpc	r25, r23
    8b16:	14 f0       	brlt	.+4      	; 0x8b1c <atodigit+0x3a>
    8b18:	8f ef       	ldi	r24, 0xFF	; 255
    8b1a:	9f ef       	ldi	r25, 0xFF	; 255
    8b1c:	08 95       	ret

00008b1e <strtol>:
    8b1e:	a0 e0       	ldi	r26, 0x00	; 0
    8b20:	b0 e0       	ldi	r27, 0x00	; 0
    8b22:	e5 e9       	ldi	r30, 0x95	; 149
    8b24:	f5 e4       	ldi	r31, 0x45	; 69
    8b26:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    8b2a:	2b 01       	movw	r4, r22
    8b2c:	8a 01       	movw	r16, r20
    8b2e:	ec 01       	movw	r28, r24
    8b30:	28 81       	ld	r18, Y
    8b32:	01 96       	adiw	r24, 0x01	; 1
    8b34:	20 32       	cpi	r18, 0x20	; 32
    8b36:	d9 f3       	breq	.-10     	; 0x8b2e <strtol+0x10>
    8b38:	29 30       	cpi	r18, 0x09	; 9
    8b3a:	c9 f3       	breq	.-14     	; 0x8b2e <strtol+0x10>
    8b3c:	2d 32       	cpi	r18, 0x2D	; 45
    8b3e:	29 f4       	brne	.+10     	; 0x8b4a <strtol+0x2c>
    8b40:	ec 01       	movw	r28, r24
    8b42:	66 24       	eor	r6, r6
    8b44:	63 94       	inc	r6
    8b46:	71 2c       	mov	r7, r1
    8b48:	05 c0       	rjmp	.+10     	; 0x8b54 <strtol+0x36>
    8b4a:	2b 32       	cpi	r18, 0x2B	; 43
    8b4c:	09 f4       	brne	.+2      	; 0x8b50 <strtol+0x32>
    8b4e:	ec 01       	movw	r28, r24
    8b50:	61 2c       	mov	r6, r1
    8b52:	71 2c       	mov	r7, r1
    8b54:	9e 01       	movw	r18, r28
    8b56:	2f 5f       	subi	r18, 0xFF	; 255
    8b58:	3f 4f       	sbci	r19, 0xFF	; 255
    8b5a:	88 81       	ld	r24, Y
    8b5c:	80 33       	cpi	r24, 0x30	; 48
    8b5e:	11 f4       	brne	.+4      	; 0x8b64 <strtol+0x46>
    8b60:	e9 01       	movw	r28, r18
    8b62:	f8 cf       	rjmp	.-16     	; 0x8b54 <strtol+0x36>
    8b64:	c1 2c       	mov	r12, r1
    8b66:	d1 2c       	mov	r13, r1
    8b68:	76 01       	movw	r14, r12
    8b6a:	48 01       	movw	r8, r16
    8b6c:	01 2e       	mov	r0, r17
    8b6e:	00 0c       	add	r0, r0
    8b70:	aa 08       	sbc	r10, r10
    8b72:	bb 08       	sbc	r11, r11
    8b74:	3c 2e       	mov	r3, r28
    8b76:	2d 2e       	mov	r2, r29
    8b78:	89 91       	ld	r24, Y+
    8b7a:	88 23       	and	r24, r24
    8b7c:	31 f0       	breq	.+12     	; 0x8b8a <strtol+0x6c>
    8b7e:	b8 01       	movw	r22, r16
    8b80:	90 e0       	ldi	r25, 0x00	; 0
    8b82:	af df       	rcall	.-162    	; 0x8ae2 <atodigit>
    8b84:	fc 01       	movw	r30, r24
    8b86:	97 ff       	sbrs	r25, 7
    8b88:	0c c0       	rjmp	.+24     	; 0x8ba2 <strtol+0x84>
    8b8a:	61 14       	cp	r6, r1
    8b8c:	71 04       	cpc	r7, r1
    8b8e:	c1 f0       	breq	.+48     	; 0x8bc0 <strtol+0xa2>
    8b90:	f0 94       	com	r15
    8b92:	e0 94       	com	r14
    8b94:	d0 94       	com	r13
    8b96:	c0 94       	com	r12
    8b98:	c1 1c       	adc	r12, r1
    8b9a:	d1 1c       	adc	r13, r1
    8b9c:	e1 1c       	adc	r14, r1
    8b9e:	f1 1c       	adc	r15, r1
    8ba0:	0f c0       	rjmp	.+30     	; 0x8bc0 <strtol+0xa2>
    8ba2:	a5 01       	movw	r20, r10
    8ba4:	94 01       	movw	r18, r8
    8ba6:	c7 01       	movw	r24, r14
    8ba8:	b6 01       	movw	r22, r12
    8baa:	0e 94 3d e2 	call	0x1c47a	; 0x1c47a <__mulsi3>
    8bae:	6f 01       	movw	r12, r30
    8bb0:	ff 0f       	add	r31, r31
    8bb2:	ee 08       	sbc	r14, r14
    8bb4:	ff 08       	sbc	r15, r15
    8bb6:	c6 0e       	add	r12, r22
    8bb8:	d7 1e       	adc	r13, r23
    8bba:	e8 1e       	adc	r14, r24
    8bbc:	f9 1e       	adc	r15, r25
    8bbe:	da cf       	rjmp	.-76     	; 0x8b74 <strtol+0x56>
    8bc0:	41 14       	cp	r4, r1
    8bc2:	51 04       	cpc	r5, r1
    8bc4:	19 f0       	breq	.+6      	; 0x8bcc <strtol+0xae>
    8bc6:	f2 01       	movw	r30, r4
    8bc8:	30 82       	st	Z, r3
    8bca:	21 82       	std	Z+1, r2	; 0x01
    8bcc:	c7 01       	movw	r24, r14
    8bce:	b6 01       	movw	r22, r12
    8bd0:	cd b7       	in	r28, 0x3d	; 61
    8bd2:	de b7       	in	r29, 0x3e	; 62
    8bd4:	e2 e1       	ldi	r30, 0x12	; 18
    8bd6:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00008bda <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8bda:	4a e0       	ldi	r20, 0x0A	; 10
    8bdc:	50 e0       	ldi	r21, 0x00	; 0
    8bde:	60 e0       	ldi	r22, 0x00	; 0
    8be0:	70 e0       	ldi	r23, 0x00	; 0
    8be2:	9d df       	rcall	.-198    	; 0x8b1e <strtol>
    return((int)num);
}
    8be4:	cb 01       	movw	r24, r22
    8be6:	08 95       	ret

00008be8 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8be8:	4a e0       	ldi	r20, 0x0A	; 10
    8bea:	50 e0       	ldi	r21, 0x00	; 0
    8bec:	60 e0       	ldi	r22, 0x00	; 0
    8bee:	70 e0       	ldi	r23, 0x00	; 0
    8bf0:	96 cf       	rjmp	.-212    	; 0x8b1e <strtol>
    return(num);
}
    8bf2:	08 95       	ret

00008bf4 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8bf4:	fc 01       	movw	r30, r24
    8bf6:	62 81       	ldd	r22, Z+2	; 0x02
    8bf8:	73 81       	ldd	r23, Z+3	; 0x03
    8bfa:	cb 01       	movw	r24, r22
    8bfc:	a0 e0       	ldi	r26, 0x00	; 0
    8bfe:	b0 e0       	ldi	r27, 0x00	; 0
    8c00:	ba 2f       	mov	r27, r26
    8c02:	a9 2f       	mov	r26, r25
    8c04:	98 2f       	mov	r25, r24
    8c06:	88 27       	eor	r24, r24
    8c08:	21 81       	ldd	r18, Z+1	; 0x01
    8c0a:	82 2b       	or	r24, r18
    8c0c:	ba 2f       	mov	r27, r26
    8c0e:	a9 2f       	mov	r26, r25
    8c10:	98 2f       	mov	r25, r24
    8c12:	88 27       	eor	r24, r24
    8c14:	20 81       	ld	r18, Z
    8c16:	bc 01       	movw	r22, r24
    8c18:	cd 01       	movw	r24, r26
    8c1a:	62 2b       	or	r22, r18
    8c1c:	08 95       	ret

00008c1e <st_dword>:
    8c1e:	fc 01       	movw	r30, r24
    8c20:	40 83       	st	Z, r20
    8c22:	51 83       	std	Z+1, r21	; 0x01
    8c24:	62 83       	std	Z+2, r22	; 0x02
    8c26:	73 83       	std	Z+3, r23	; 0x03
    8c28:	08 95       	ret

00008c2a <mem_set>:
    8c2a:	48 0f       	add	r20, r24
    8c2c:	59 1f       	adc	r21, r25
    8c2e:	fc 01       	movw	r30, r24
    8c30:	61 93       	st	Z+, r22
    8c32:	cf 01       	movw	r24, r30
    8c34:	e4 17       	cp	r30, r20
    8c36:	f5 07       	cpc	r31, r21
    8c38:	d1 f7       	brne	.-12     	; 0x8c2e <mem_set+0x4>
    8c3a:	08 95       	ret

00008c3c <mem_cmp>:
    8c3c:	dc 01       	movw	r26, r24
    8c3e:	fb 01       	movw	r30, r22
    8c40:	2d 91       	ld	r18, X+
    8c42:	81 91       	ld	r24, Z+
    8c44:	30 e0       	ldi	r19, 0x00	; 0
    8c46:	b9 01       	movw	r22, r18
    8c48:	68 1b       	sub	r22, r24
    8c4a:	71 09       	sbc	r23, r1
    8c4c:	cb 01       	movw	r24, r22
    8c4e:	41 50       	subi	r20, 0x01	; 1
    8c50:	51 09       	sbc	r21, r1
    8c52:	11 f0       	breq	.+4      	; 0x8c58 <mem_cmp+0x1c>
    8c54:	00 97       	sbiw	r24, 0x00	; 0
    8c56:	a1 f3       	breq	.-24     	; 0x8c40 <mem_cmp+0x4>
    8c58:	08 95       	ret

00008c5a <clst2sect>:
    8c5a:	0f 93       	push	r16
    8c5c:	1f 93       	push	r17
    8c5e:	fc 01       	movw	r30, r24
    8c60:	9a 01       	movw	r18, r20
    8c62:	ab 01       	movw	r20, r22
    8c64:	22 50       	subi	r18, 0x02	; 2
    8c66:	31 09       	sbc	r19, r1
    8c68:	41 09       	sbc	r20, r1
    8c6a:	51 09       	sbc	r21, r1
    8c6c:	81 8d       	ldd	r24, Z+25	; 0x19
    8c6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    8c70:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8c72:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8c74:	02 97       	sbiw	r24, 0x02	; 2
    8c76:	a1 09       	sbc	r26, r1
    8c78:	b1 09       	sbc	r27, r1
    8c7a:	28 17       	cp	r18, r24
    8c7c:	39 07       	cpc	r19, r25
    8c7e:	4a 07       	cpc	r20, r26
    8c80:	5b 07       	cpc	r21, r27
    8c82:	68 f4       	brcc	.+26     	; 0x8c9e <clst2sect+0x44>
    8c84:	a1 85       	ldd	r26, Z+9	; 0x09
    8c86:	b2 85       	ldd	r27, Z+10	; 0x0a
    8c88:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    8c8c:	05 a5       	ldd	r16, Z+45	; 0x2d
    8c8e:	16 a5       	ldd	r17, Z+46	; 0x2e
    8c90:	27 a5       	ldd	r18, Z+47	; 0x2f
    8c92:	30 a9       	ldd	r19, Z+48	; 0x30
    8c94:	60 0f       	add	r22, r16
    8c96:	71 1f       	adc	r23, r17
    8c98:	82 1f       	adc	r24, r18
    8c9a:	93 1f       	adc	r25, r19
    8c9c:	03 c0       	rjmp	.+6      	; 0x8ca4 <clst2sect+0x4a>
    8c9e:	60 e0       	ldi	r22, 0x00	; 0
    8ca0:	70 e0       	ldi	r23, 0x00	; 0
    8ca2:	cb 01       	movw	r24, r22
    8ca4:	1f 91       	pop	r17
    8ca6:	0f 91       	pop	r16
    8ca8:	08 95       	ret

00008caa <clmt_clust>:
    8caa:	cf 93       	push	r28
    8cac:	df 93       	push	r29
    8cae:	fc 01       	movw	r30, r24
    8cb0:	c2 a1       	ldd	r28, Z+34	; 0x22
    8cb2:	d3 a1       	ldd	r29, Z+35	; 0x23
    8cb4:	24 96       	adiw	r28, 0x04	; 4
    8cb6:	cb 01       	movw	r24, r22
    8cb8:	ba 01       	movw	r22, r20
    8cba:	29 e0       	ldi	r18, 0x09	; 9
    8cbc:	96 95       	lsr	r25
    8cbe:	87 95       	ror	r24
    8cc0:	77 95       	ror	r23
    8cc2:	67 95       	ror	r22
    8cc4:	2a 95       	dec	r18
    8cc6:	d1 f7       	brne	.-12     	; 0x8cbc <clmt_clust+0x12>
    8cc8:	01 90       	ld	r0, Z+
    8cca:	f0 81       	ld	r31, Z
    8ccc:	e0 2d       	mov	r30, r0
    8cce:	21 85       	ldd	r18, Z+9	; 0x09
    8cd0:	32 85       	ldd	r19, Z+10	; 0x0a
    8cd2:	40 e0       	ldi	r20, 0x00	; 0
    8cd4:	50 e0       	ldi	r21, 0x00	; 0
    8cd6:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    8cda:	88 81       	ld	r24, Y
    8cdc:	99 81       	ldd	r25, Y+1	; 0x01
    8cde:	aa 81       	ldd	r26, Y+2	; 0x02
    8ce0:	bb 81       	ldd	r27, Y+3	; 0x03
    8ce2:	00 97       	sbiw	r24, 0x00	; 0
    8ce4:	a1 05       	cpc	r26, r1
    8ce6:	b1 05       	cpc	r27, r1
    8ce8:	b1 f0       	breq	.+44     	; 0x8d16 <clmt_clust+0x6c>
    8cea:	28 17       	cp	r18, r24
    8cec:	39 07       	cpc	r19, r25
    8cee:	4a 07       	cpc	r20, r26
    8cf0:	5b 07       	cpc	r21, r27
    8cf2:	30 f0       	brcs	.+12     	; 0x8d00 <clmt_clust+0x56>
    8cf4:	28 1b       	sub	r18, r24
    8cf6:	39 0b       	sbc	r19, r25
    8cf8:	4a 0b       	sbc	r20, r26
    8cfa:	5b 0b       	sbc	r21, r27
    8cfc:	28 96       	adiw	r28, 0x08	; 8
    8cfe:	ed cf       	rjmp	.-38     	; 0x8cda <clmt_clust+0x30>
    8d00:	8c 81       	ldd	r24, Y+4	; 0x04
    8d02:	9d 81       	ldd	r25, Y+5	; 0x05
    8d04:	ae 81       	ldd	r26, Y+6	; 0x06
    8d06:	bf 81       	ldd	r27, Y+7	; 0x07
    8d08:	bc 01       	movw	r22, r24
    8d0a:	cd 01       	movw	r24, r26
    8d0c:	62 0f       	add	r22, r18
    8d0e:	73 1f       	adc	r23, r19
    8d10:	84 1f       	adc	r24, r20
    8d12:	95 1f       	adc	r25, r21
    8d14:	03 c0       	rjmp	.+6      	; 0x8d1c <clmt_clust+0x72>
    8d16:	60 e0       	ldi	r22, 0x00	; 0
    8d18:	70 e0       	ldi	r23, 0x00	; 0
    8d1a:	cb 01       	movw	r24, r22
    8d1c:	df 91       	pop	r29
    8d1e:	cf 91       	pop	r28
    8d20:	08 95       	ret

00008d22 <sum_sfn>:
    8d22:	fc 01       	movw	r30, r24
    8d24:	9c 01       	movw	r18, r24
    8d26:	25 5f       	subi	r18, 0xF5	; 245
    8d28:	3f 4f       	sbci	r19, 0xFF	; 255
    8d2a:	80 e0       	ldi	r24, 0x00	; 0
    8d2c:	98 2f       	mov	r25, r24
    8d2e:	90 fb       	bst	r25, 0
    8d30:	97 95       	ror	r25
    8d32:	97 f9       	bld	r25, 7
    8d34:	81 91       	ld	r24, Z+
    8d36:	89 0f       	add	r24, r25
    8d38:	e2 17       	cp	r30, r18
    8d3a:	f3 07       	cpc	r31, r19
    8d3c:	b9 f7       	brne	.-18     	; 0x8d2c <sum_sfn+0xa>
    8d3e:	08 95       	ret

00008d40 <get_ldnumber>:
    8d40:	cf 93       	push	r28
    8d42:	df 93       	push	r29
    8d44:	dc 01       	movw	r26, r24
    8d46:	ed 91       	ld	r30, X+
    8d48:	fc 91       	ld	r31, X
    8d4a:	11 97       	sbiw	r26, 0x01	; 1
    8d4c:	30 97       	sbiw	r30, 0x00	; 0
    8d4e:	f9 f0       	breq	.+62     	; 0x8d8e <get_ldnumber+0x4e>
    8d50:	9f 01       	movw	r18, r30
    8d52:	2f 5f       	subi	r18, 0xFF	; 255
    8d54:	3f 4f       	sbci	r19, 0xFF	; 255
    8d56:	e9 01       	movw	r28, r18
    8d58:	21 97       	sbiw	r28, 0x01	; 1
    8d5a:	88 81       	ld	r24, Y
    8d5c:	80 32       	cpi	r24, 0x20	; 32
    8d5e:	18 f0       	brcs	.+6      	; 0x8d66 <get_ldnumber+0x26>
    8d60:	8a 33       	cpi	r24, 0x3A	; 58
    8d62:	b9 f7       	brne	.-18     	; 0x8d52 <get_ldnumber+0x12>
    8d64:	04 c0       	rjmp	.+8      	; 0x8d6e <get_ldnumber+0x2e>
    8d66:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <CurrVol>
    8d6a:	90 e0       	ldi	r25, 0x00	; 0
    8d6c:	12 c0       	rjmp	.+36     	; 0x8d92 <get_ldnumber+0x52>
    8d6e:	90 81       	ld	r25, Z
    8d70:	80 ed       	ldi	r24, 0xD0	; 208
    8d72:	89 0f       	add	r24, r25
    8d74:	8a 30       	cpi	r24, 0x0A	; 10
    8d76:	58 f4       	brcc	.+22     	; 0x8d8e <get_ldnumber+0x4e>
    8d78:	32 96       	adiw	r30, 0x02	; 2
    8d7a:	2e 17       	cp	r18, r30
    8d7c:	3f 07       	cpc	r19, r31
    8d7e:	39 f4       	brne	.+14     	; 0x8d8e <get_ldnumber+0x4e>
    8d80:	90 33       	cpi	r25, 0x30	; 48
    8d82:	29 f4       	brne	.+10     	; 0x8d8e <get_ldnumber+0x4e>
    8d84:	2d 93       	st	X+, r18
    8d86:	3c 93       	st	X, r19
    8d88:	80 e0       	ldi	r24, 0x00	; 0
    8d8a:	90 e0       	ldi	r25, 0x00	; 0
    8d8c:	02 c0       	rjmp	.+4      	; 0x8d92 <get_ldnumber+0x52>
    8d8e:	8f ef       	ldi	r24, 0xFF	; 255
    8d90:	9f ef       	ldi	r25, 0xFF	; 255
    8d92:	df 91       	pop	r29
    8d94:	cf 91       	pop	r28
    8d96:	08 95       	ret

00008d98 <validate>:
    8d98:	0f 93       	push	r16
    8d9a:	1f 93       	push	r17
    8d9c:	cf 93       	push	r28
    8d9e:	df 93       	push	r29
    8da0:	ec 01       	movw	r28, r24
    8da2:	8b 01       	movw	r16, r22
    8da4:	89 2b       	or	r24, r25
    8da6:	f9 f0       	breq	.+62     	; 0x8de6 <validate+0x4e>
    8da8:	e8 81       	ld	r30, Y
    8daa:	f9 81       	ldd	r31, Y+1	; 0x01
    8dac:	30 97       	sbiw	r30, 0x00	; 0
    8dae:	d9 f0       	breq	.+54     	; 0x8de6 <validate+0x4e>
    8db0:	80 81       	ld	r24, Z
    8db2:	88 23       	and	r24, r24
    8db4:	c1 f0       	breq	.+48     	; 0x8de6 <validate+0x4e>
    8db6:	2a 81       	ldd	r18, Y+2	; 0x02
    8db8:	3b 81       	ldd	r19, Y+3	; 0x03
    8dba:	85 81       	ldd	r24, Z+5	; 0x05
    8dbc:	96 81       	ldd	r25, Z+6	; 0x06
    8dbe:	28 17       	cp	r18, r24
    8dc0:	39 07       	cpc	r19, r25
    8dc2:	89 f4       	brne	.+34     	; 0x8de6 <validate+0x4e>
    8dc4:	81 81       	ldd	r24, Z+1	; 0x01
    8dc6:	0e 94 e2 67 	call	0xcfc4	; 0xcfc4 <disk_status>
    8dca:	80 fd       	sbrc	r24, 0
    8dcc:	0c c0       	rjmp	.+24     	; 0x8de6 <validate+0x4e>
    8dce:	28 81       	ld	r18, Y
    8dd0:	39 81       	ldd	r19, Y+1	; 0x01
    8dd2:	80 e0       	ldi	r24, 0x00	; 0
    8dd4:	90 e0       	ldi	r25, 0x00	; 0
    8dd6:	f8 01       	movw	r30, r16
    8dd8:	31 83       	std	Z+1, r19	; 0x01
    8dda:	20 83       	st	Z, r18
    8ddc:	df 91       	pop	r29
    8dde:	cf 91       	pop	r28
    8de0:	1f 91       	pop	r17
    8de2:	0f 91       	pop	r16
    8de4:	08 95       	ret
    8de6:	89 e0       	ldi	r24, 0x09	; 9
    8de8:	90 e0       	ldi	r25, 0x00	; 0
    8dea:	20 e0       	ldi	r18, 0x00	; 0
    8dec:	30 e0       	ldi	r19, 0x00	; 0
    8dee:	f3 cf       	rjmp	.-26     	; 0x8dd6 <validate+0x3e>

00008df0 <get_fileinfo>:
    8df0:	a8 e0       	ldi	r26, 0x08	; 8
    8df2:	b0 e0       	ldi	r27, 0x00	; 0
    8df4:	ee ef       	ldi	r30, 0xFE	; 254
    8df6:	f6 e4       	ldi	r31, 0x46	; 70
    8df8:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    8dfc:	fc 01       	movw	r30, r24
    8dfe:	01 90       	ld	r0, Z+
    8e00:	f0 81       	ld	r31, Z
    8e02:	e0 2d       	mov	r30, r0
    8e04:	f8 87       	std	Y+8, r31	; 0x08
    8e06:	ef 83       	std	Y+7, r30	; 0x07
    8e08:	fb 01       	movw	r30, r22
    8e0a:	16 8a       	std	Z+22, r1	; 0x16
    8e0c:	fc 01       	movw	r30, r24
    8e0e:	06 89       	ldd	r16, Z+22	; 0x16
    8e10:	17 89       	ldd	r17, Z+23	; 0x17
    8e12:	20 8d       	ldd	r18, Z+24	; 0x18
    8e14:	31 8d       	ldd	r19, Z+25	; 0x19
    8e16:	01 15       	cp	r16, r1
    8e18:	11 05       	cpc	r17, r1
    8e1a:	21 05       	cpc	r18, r1
    8e1c:	31 05       	cpc	r19, r1
    8e1e:	09 f4       	brne	.+2      	; 0x8e22 <get_fileinfo+0x32>
    8e20:	0d c1       	rjmp	.+538    	; 0x903c <get_fileinfo+0x24c>
    8e22:	7e 83       	std	Y+6, r23	; 0x06
    8e24:	6d 83       	std	Y+5, r22	; 0x05
    8e26:	7c 01       	movw	r14, r24
    8e28:	80 a5       	ldd	r24, Z+40	; 0x28
    8e2a:	91 a5       	ldd	r25, Z+41	; 0x29
    8e2c:	a2 a5       	ldd	r26, Z+42	; 0x2a
    8e2e:	b3 a5       	ldd	r27, Z+43	; 0x2b
    8e30:	8f 3f       	cpi	r24, 0xFF	; 255
    8e32:	9f 4f       	sbci	r25, 0xFF	; 255
    8e34:	af 4f       	sbci	r26, 0xFF	; 255
    8e36:	bf 4f       	sbci	r27, 0xFF	; 255
    8e38:	09 f4       	brne	.+2      	; 0x8e3c <get_fileinfo+0x4c>
    8e3a:	6c c0       	rjmp	.+216    	; 0x8f14 <get_fileinfo+0x124>
    8e3c:	a1 2c       	mov	r10, r1
    8e3e:	b1 2c       	mov	r11, r1
    8e40:	c1 2c       	mov	r12, r1
    8e42:	d1 2c       	mov	r13, r1
    8e44:	00 e0       	ldi	r16, 0x00	; 0
    8e46:	10 e0       	ldi	r17, 0x00	; 0
    8e48:	66 24       	eor	r6, r6
    8e4a:	6a 94       	dec	r6
    8e4c:	71 2c       	mov	r7, r1
    8e4e:	ef 81       	ldd	r30, Y+7	; 0x07
    8e50:	f8 85       	ldd	r31, Y+8	; 0x08
    8e52:	83 85       	ldd	r24, Z+11	; 0x0b
    8e54:	94 85       	ldd	r25, Z+12	; 0x0c
    8e56:	fc 01       	movw	r30, r24
    8e58:	ea 0d       	add	r30, r10
    8e5a:	fb 1d       	adc	r31, r11
    8e5c:	80 81       	ld	r24, Z
    8e5e:	91 81       	ldd	r25, Z+1	; 0x01
    8e60:	00 97       	sbiw	r24, 0x00	; 0
    8e62:	09 f4       	brne	.+2      	; 0x8e66 <get_fileinfo+0x76>
    8e64:	4d c0       	rjmp	.+154    	; 0x8f00 <get_fileinfo+0x110>
    8e66:	c1 14       	cp	r12, r1
    8e68:	d1 04       	cpc	r13, r1
    8e6a:	29 f4       	brne	.+10     	; 0x8e76 <get_fileinfo+0x86>
    8e6c:	9c 01       	movw	r18, r24
    8e6e:	38 5d       	subi	r19, 0xD8	; 216
    8e70:	21 15       	cp	r18, r1
    8e72:	38 40       	sbci	r19, 0x08	; 8
    8e74:	f0 f1       	brcs	.+124    	; 0x8ef2 <get_fileinfo+0x102>
    8e76:	43 01       	movw	r8, r6
    8e78:	80 1a       	sub	r8, r16
    8e7a:	91 0a       	sbc	r9, r17
    8e7c:	a6 01       	movw	r20, r12
    8e7e:	60 e0       	ldi	r22, 0x00	; 0
    8e80:	70 e0       	ldi	r23, 0x00	; 0
    8e82:	2a 01       	movw	r4, r20
    8e84:	33 24       	eor	r3, r3
    8e86:	22 24       	eor	r2, r2
    8e88:	a0 e0       	ldi	r26, 0x00	; 0
    8e8a:	b0 e0       	ldi	r27, 0x00	; 0
    8e8c:	28 2a       	or	r2, r24
    8e8e:	39 2a       	or	r3, r25
    8e90:	4a 2a       	or	r4, r26
    8e92:	5b 2a       	or	r5, r27
    8e94:	c2 01       	movw	r24, r4
    8e96:	b1 01       	movw	r22, r2
    8e98:	45 eb       	ldi	r20, 0xB5	; 181
    8e9a:	51 e0       	ldi	r21, 0x01	; 1
    8e9c:	0e 94 38 67 	call	0xce70	; 0xce70 <ff_uni2oem>
    8ea0:	8f 3f       	cpi	r24, 0xFF	; 255
    8ea2:	91 05       	cpc	r25, r1
    8ea4:	89 f0       	breq	.+34     	; 0x8ec8 <get_fileinfo+0xd8>
    8ea6:	80 f0       	brcs	.+32     	; 0x8ec8 <get_fileinfo+0xd8>
    8ea8:	22 e0       	ldi	r18, 0x02	; 2
    8eaa:	82 16       	cp	r8, r18
    8eac:	91 04       	cpc	r9, r1
    8eae:	c0 f0       	brcs	.+48     	; 0x8ee0 <get_fileinfo+0xf0>
    8eb0:	ed 81       	ldd	r30, Y+5	; 0x05
    8eb2:	fe 81       	ldd	r31, Y+6	; 0x06
    8eb4:	e0 0f       	add	r30, r16
    8eb6:	f1 1f       	adc	r31, r17
    8eb8:	96 8b       	std	Z+22, r25	; 0x16
    8eba:	ed 81       	ldd	r30, Y+5	; 0x05
    8ebc:	fe 81       	ldd	r31, Y+6	; 0x06
    8ebe:	e0 0f       	add	r30, r16
    8ec0:	f1 1f       	adc	r31, r17
    8ec2:	87 8b       	std	Z+23, r24	; 0x17
    8ec4:	82 e0       	ldi	r24, 0x02	; 2
    8ec6:	0d c0       	rjmp	.+26     	; 0x8ee2 <get_fileinfo+0xf2>
    8ec8:	00 97       	sbiw	r24, 0x00	; 0
    8eca:	51 f0       	breq	.+20     	; 0x8ee0 <get_fileinfo+0xf0>
    8ecc:	81 14       	cp	r8, r1
    8ece:	91 04       	cpc	r9, r1
    8ed0:	39 f0       	breq	.+14     	; 0x8ee0 <get_fileinfo+0xf0>
    8ed2:	ed 81       	ldd	r30, Y+5	; 0x05
    8ed4:	fe 81       	ldd	r31, Y+6	; 0x06
    8ed6:	e0 0f       	add	r30, r16
    8ed8:	f1 1f       	adc	r31, r17
    8eda:	86 8b       	std	Z+22, r24	; 0x16
    8edc:	81 e0       	ldi	r24, 0x01	; 1
    8ede:	01 c0       	rjmp	.+2      	; 0x8ee2 <get_fileinfo+0xf2>
    8ee0:	80 e0       	ldi	r24, 0x00	; 0
    8ee2:	28 2f       	mov	r18, r24
    8ee4:	30 e0       	ldi	r19, 0x00	; 0
    8ee6:	88 23       	and	r24, r24
    8ee8:	49 f0       	breq	.+18     	; 0x8efc <get_fileinfo+0x10c>
    8eea:	02 0f       	add	r16, r18
    8eec:	13 1f       	adc	r17, r19
    8eee:	80 e0       	ldi	r24, 0x00	; 0
    8ef0:	90 e0       	ldi	r25, 0x00	; 0
    8ef2:	32 e0       	ldi	r19, 0x02	; 2
    8ef4:	a3 0e       	add	r10, r19
    8ef6:	b1 1c       	adc	r11, r1
    8ef8:	6c 01       	movw	r12, r24
    8efa:	a9 cf       	rjmp	.-174    	; 0x8e4e <get_fileinfo+0x5e>
    8efc:	00 e0       	ldi	r16, 0x00	; 0
    8efe:	10 e0       	ldi	r17, 0x00	; 0
    8f00:	c1 14       	cp	r12, r1
    8f02:	d1 04       	cpc	r13, r1
    8f04:	11 f0       	breq	.+4      	; 0x8f0a <get_fileinfo+0x11a>
    8f06:	00 e0       	ldi	r16, 0x00	; 0
    8f08:	10 e0       	ldi	r17, 0x00	; 0
    8f0a:	ed 81       	ldd	r30, Y+5	; 0x05
    8f0c:	fe 81       	ldd	r31, Y+6	; 0x06
    8f0e:	e0 0f       	add	r30, r16
    8f10:	f1 1f       	adc	r31, r17
    8f12:	16 8a       	std	Z+22, r1	; 0x16
    8f14:	80 e0       	ldi	r24, 0x00	; 0
    8f16:	90 e0       	ldi	r25, 0x00	; 0
    8f18:	20 e0       	ldi	r18, 0x00	; 0
    8f1a:	30 e0       	ldi	r19, 0x00	; 0
    8f1c:	6e e2       	ldi	r22, 0x2E	; 46
    8f1e:	a9 01       	movw	r20, r18
    8f20:	4f 5f       	subi	r20, 0xFF	; 255
    8f22:	5f 4f       	sbci	r21, 0xFF	; 255
    8f24:	f7 01       	movw	r30, r14
    8f26:	a2 8d       	ldd	r26, Z+26	; 0x1a
    8f28:	b3 8d       	ldd	r27, Z+27	; 0x1b
    8f2a:	fd 01       	movw	r30, r26
    8f2c:	e2 0f       	add	r30, r18
    8f2e:	f3 1f       	adc	r31, r19
    8f30:	20 81       	ld	r18, Z
    8f32:	30 e0       	ldi	r19, 0x00	; 0
    8f34:	20 32       	cpi	r18, 0x20	; 32
    8f36:	31 05       	cpc	r19, r1
    8f38:	b9 f0       	breq	.+46     	; 0x8f68 <get_fileinfo+0x178>
    8f3a:	25 30       	cpi	r18, 0x05	; 5
    8f3c:	31 05       	cpc	r19, r1
    8f3e:	11 f4       	brne	.+4      	; 0x8f44 <get_fileinfo+0x154>
    8f40:	25 ee       	ldi	r18, 0xE5	; 229
    8f42:	30 e0       	ldi	r19, 0x00	; 0
    8f44:	49 30       	cpi	r20, 0x09	; 9
    8f46:	51 05       	cpc	r21, r1
    8f48:	49 f4       	brne	.+18     	; 0x8f5c <get_fileinfo+0x16c>
    8f4a:	8c 30       	cpi	r24, 0x0C	; 12
    8f4c:	91 05       	cpc	r25, r1
    8f4e:	30 f4       	brcc	.+12     	; 0x8f5c <get_fileinfo+0x16c>
    8f50:	ed 81       	ldd	r30, Y+5	; 0x05
    8f52:	fe 81       	ldd	r31, Y+6	; 0x06
    8f54:	e8 0f       	add	r30, r24
    8f56:	f9 1f       	adc	r31, r25
    8f58:	61 87       	std	Z+9, r22	; 0x09
    8f5a:	01 96       	adiw	r24, 0x01	; 1
    8f5c:	ed 81       	ldd	r30, Y+5	; 0x05
    8f5e:	fe 81       	ldd	r31, Y+6	; 0x06
    8f60:	e8 0f       	add	r30, r24
    8f62:	f9 1f       	adc	r31, r25
    8f64:	21 87       	std	Z+9, r18	; 0x09
    8f66:	01 96       	adiw	r24, 0x01	; 1
    8f68:	9a 01       	movw	r18, r20
    8f6a:	4b 30       	cpi	r20, 0x0B	; 11
    8f6c:	51 05       	cpc	r21, r1
    8f6e:	b9 f6       	brne	.-82     	; 0x8f1e <get_fileinfo+0x12e>
    8f70:	ed 81       	ldd	r30, Y+5	; 0x05
    8f72:	fe 81       	ldd	r31, Y+6	; 0x06
    8f74:	e8 0f       	add	r30, r24
    8f76:	f9 1f       	adc	r31, r25
    8f78:	11 86       	std	Z+9, r1	; 0x09
    8f7a:	ed 81       	ldd	r30, Y+5	; 0x05
    8f7c:	fe 81       	ldd	r31, Y+6	; 0x06
    8f7e:	26 89       	ldd	r18, Z+22	; 0x16
    8f80:	21 11       	cpse	r18, r1
    8f82:	3a c0       	rjmp	.+116    	; 0x8ff8 <get_fileinfo+0x208>
    8f84:	89 2b       	or	r24, r25
    8f86:	31 f0       	breq	.+12     	; 0x8f94 <get_fileinfo+0x1a4>
    8f88:	df 01       	movw	r26, r30
    8f8a:	19 96       	adiw	r26, 0x09	; 9
    8f8c:	58 e0       	ldi	r21, 0x08	; 8
    8f8e:	20 e0       	ldi	r18, 0x00	; 0
    8f90:	30 e0       	ldi	r19, 0x00	; 0
    8f92:	16 c0       	rjmp	.+44     	; 0x8fc0 <get_fileinfo+0x1d0>
    8f94:	8f e3       	ldi	r24, 0x3F	; 63
    8f96:	ed 81       	ldd	r30, Y+5	; 0x05
    8f98:	fe 81       	ldd	r31, Y+6	; 0x06
    8f9a:	86 8b       	std	Z+22, r24	; 0x16
    8f9c:	21 e0       	ldi	r18, 0x01	; 1
    8f9e:	30 e0       	ldi	r19, 0x00	; 0
    8fa0:	1c c0       	rjmp	.+56     	; 0x8fda <get_fileinfo+0x1ea>
    8fa2:	90 e0       	ldi	r25, 0x00	; 0
    8fa4:	8e 32       	cpi	r24, 0x2E	; 46
    8fa6:	91 05       	cpc	r25, r1
    8fa8:	09 f4       	brne	.+2      	; 0x8fac <get_fileinfo+0x1bc>
    8faa:	50 e1       	ldi	r21, 0x10	; 16
    8fac:	bc 01       	movw	r22, r24
    8fae:	61 54       	subi	r22, 0x41	; 65
    8fb0:	71 09       	sbc	r23, r1
    8fb2:	6a 31       	cpi	r22, 0x1A	; 26
    8fb4:	71 05       	cpc	r23, r1
    8fb6:	40 f0       	brcs	.+16     	; 0x8fc8 <get_fileinfo+0x1d8>
    8fb8:	fd 01       	movw	r30, r26
    8fba:	84 87       	std	Z+12, r24	; 0x0c
    8fbc:	2f 5f       	subi	r18, 0xFF	; 255
    8fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    8fc0:	8d 91       	ld	r24, X+
    8fc2:	81 11       	cpse	r24, r1
    8fc4:	ee cf       	rjmp	.-36     	; 0x8fa2 <get_fileinfo+0x1b2>
    8fc6:	09 c0       	rjmp	.+18     	; 0x8fda <get_fileinfo+0x1ea>
    8fc8:	f7 01       	movw	r30, r14
    8fca:	62 8d       	ldd	r22, Z+26	; 0x1a
    8fcc:	73 8d       	ldd	r23, Z+27	; 0x1b
    8fce:	fb 01       	movw	r30, r22
    8fd0:	44 85       	ldd	r20, Z+12	; 0x0c
    8fd2:	45 23       	and	r20, r21
    8fd4:	89 f3       	breq	.-30     	; 0x8fb8 <get_fileinfo+0x1c8>
    8fd6:	80 96       	adiw	r24, 0x20	; 32
    8fd8:	ef cf       	rjmp	.-34     	; 0x8fb8 <get_fileinfo+0x1c8>
    8fda:	ed 81       	ldd	r30, Y+5	; 0x05
    8fdc:	fe 81       	ldd	r31, Y+6	; 0x06
    8fde:	e2 0f       	add	r30, r18
    8fe0:	f3 1f       	adc	r31, r19
    8fe2:	16 8a       	std	Z+22, r1	; 0x16
    8fe4:	f7 01       	movw	r30, r14
    8fe6:	82 8d       	ldd	r24, Z+26	; 0x1a
    8fe8:	93 8d       	ldd	r25, Z+27	; 0x1b
    8fea:	fc 01       	movw	r30, r24
    8fec:	84 85       	ldd	r24, Z+12	; 0x0c
    8fee:	81 11       	cpse	r24, r1
    8ff0:	03 c0       	rjmp	.+6      	; 0x8ff8 <get_fileinfo+0x208>
    8ff2:	ed 81       	ldd	r30, Y+5	; 0x05
    8ff4:	fe 81       	ldd	r31, Y+6	; 0x06
    8ff6:	11 86       	std	Z+9, r1	; 0x09
    8ff8:	f7 01       	movw	r30, r14
    8ffa:	82 8d       	ldd	r24, Z+26	; 0x1a
    8ffc:	93 8d       	ldd	r25, Z+27	; 0x1b
    8ffe:	fc 01       	movw	r30, r24
    9000:	83 85       	ldd	r24, Z+11	; 0x0b
    9002:	ed 81       	ldd	r30, Y+5	; 0x05
    9004:	fe 81       	ldd	r31, Y+6	; 0x06
    9006:	80 87       	std	Z+8, r24	; 0x08
    9008:	f7 01       	movw	r30, r14
    900a:	02 8d       	ldd	r16, Z+26	; 0x1a
    900c:	13 8d       	ldd	r17, Z+27	; 0x1b
    900e:	c8 01       	movw	r24, r16
    9010:	4c 96       	adiw	r24, 0x1c	; 28
    9012:	f0 dd       	rcall	.-1056   	; 0x8bf4 <ld_dword>
    9014:	ed 81       	ldd	r30, Y+5	; 0x05
    9016:	fe 81       	ldd	r31, Y+6	; 0x06
    9018:	60 83       	st	Z, r22
    901a:	71 83       	std	Z+1, r23	; 0x01
    901c:	82 83       	std	Z+2, r24	; 0x02
    901e:	93 83       	std	Z+3, r25	; 0x03
    9020:	f8 01       	movw	r30, r16
    9022:	86 89       	ldd	r24, Z+22	; 0x16
    9024:	97 89       	ldd	r25, Z+23	; 0x17
    9026:	ed 81       	ldd	r30, Y+5	; 0x05
    9028:	fe 81       	ldd	r31, Y+6	; 0x06
    902a:	97 83       	std	Z+7, r25	; 0x07
    902c:	86 83       	std	Z+6, r24	; 0x06
    902e:	f8 01       	movw	r30, r16
    9030:	80 8d       	ldd	r24, Z+24	; 0x18
    9032:	91 8d       	ldd	r25, Z+25	; 0x19
    9034:	ed 81       	ldd	r30, Y+5	; 0x05
    9036:	fe 81       	ldd	r31, Y+6	; 0x06
    9038:	95 83       	std	Z+5, r25	; 0x05
    903a:	84 83       	std	Z+4, r24	; 0x04
    903c:	28 96       	adiw	r28, 0x08	; 8
    903e:	e2 e1       	ldi	r30, 0x12	; 18
    9040:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00009044 <mem_cpy.part.0>:
    9044:	fb 01       	movw	r30, r22
    9046:	48 0f       	add	r20, r24
    9048:	59 1f       	adc	r21, r25
    904a:	21 91       	ld	r18, Z+
    904c:	dc 01       	movw	r26, r24
    904e:	2d 93       	st	X+, r18
    9050:	cd 01       	movw	r24, r26
    9052:	a4 17       	cp	r26, r20
    9054:	b5 07       	cpc	r27, r21
    9056:	c9 f7       	brne	.-14     	; 0x904a <mem_cpy.part.0+0x6>
    9058:	08 95       	ret

0000905a <ld_clust.isra.3>:
    905a:	fb 01       	movw	r30, r22
    905c:	42 8d       	ldd	r20, Z+26	; 0x1a
    905e:	53 8d       	ldd	r21, Z+27	; 0x1b
    9060:	60 e0       	ldi	r22, 0x00	; 0
    9062:	70 e0       	ldi	r23, 0x00	; 0
    9064:	83 30       	cpi	r24, 0x03	; 3
    9066:	59 f4       	brne	.+22     	; 0x907e <ld_clust.isra.3+0x24>
    9068:	84 89       	ldd	r24, Z+20	; 0x14
    906a:	95 89       	ldd	r25, Z+21	; 0x15
    906c:	a0 e0       	ldi	r26, 0x00	; 0
    906e:	b0 e0       	ldi	r27, 0x00	; 0
    9070:	dc 01       	movw	r26, r24
    9072:	99 27       	eor	r25, r25
    9074:	88 27       	eor	r24, r24
    9076:	48 2b       	or	r20, r24
    9078:	59 2b       	or	r21, r25
    907a:	6a 2b       	or	r22, r26
    907c:	7b 2b       	or	r23, r27
    907e:	cb 01       	movw	r24, r22
    9080:	ba 01       	movw	r22, r20
    9082:	08 95       	ret

00009084 <st_clust.isra.4>:
    9084:	fb 01       	movw	r30, r22
    9086:	22 8f       	std	Z+26, r18	; 0x1a
    9088:	33 8f       	std	Z+27, r19	; 0x1b
    908a:	dc 01       	movw	r26, r24
    908c:	8c 91       	ld	r24, X
    908e:	83 30       	cpi	r24, 0x03	; 3
    9090:	29 f4       	brne	.+10     	; 0x909c <st_clust.isra.4+0x18>
    9092:	ca 01       	movw	r24, r20
    9094:	aa 27       	eor	r26, r26
    9096:	bb 27       	eor	r27, r27
    9098:	84 8b       	std	Z+20, r24	; 0x14
    909a:	95 8b       	std	Z+21, r25	; 0x15
    909c:	08 95       	ret

0000909e <sync_window.part.5>:
    909e:	8f 92       	push	r8
    90a0:	9f 92       	push	r9
    90a2:	af 92       	push	r10
    90a4:	bf 92       	push	r11
    90a6:	ef 92       	push	r14
    90a8:	ff 92       	push	r15
    90aa:	0f 93       	push	r16
    90ac:	1f 93       	push	r17
    90ae:	cf 93       	push	r28
    90b0:	df 93       	push	r29
    90b2:	ec 01       	movw	r28, r24
    90b4:	7c 01       	movw	r14, r24
    90b6:	45 e3       	ldi	r20, 0x35	; 53
    90b8:	e4 0e       	add	r14, r20
    90ba:	f1 1c       	adc	r15, r1
    90bc:	29 a9       	ldd	r18, Y+49	; 0x31
    90be:	3a a9       	ldd	r19, Y+50	; 0x32
    90c0:	4b a9       	ldd	r20, Y+51	; 0x33
    90c2:	5c a9       	ldd	r21, Y+52	; 0x34
    90c4:	01 e0       	ldi	r16, 0x01	; 1
    90c6:	10 e0       	ldi	r17, 0x00	; 0
    90c8:	b7 01       	movw	r22, r14
    90ca:	89 81       	ldd	r24, Y+1	; 0x01
    90cc:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    90d0:	89 2b       	or	r24, r25
    90d2:	41 f5       	brne	.+80     	; 0x9124 <sync_window.part.5+0x86>
    90d4:	1b 82       	std	Y+3, r1	; 0x03
    90d6:	09 a9       	ldd	r16, Y+49	; 0x31
    90d8:	1a a9       	ldd	r17, Y+50	; 0x32
    90da:	2b a9       	ldd	r18, Y+51	; 0x33
    90dc:	3c a9       	ldd	r19, Y+52	; 0x34
    90de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    90e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    90e2:	af 8d       	ldd	r26, Y+31	; 0x1f
    90e4:	b8 a1       	ldd	r27, Y+32	; 0x20
    90e6:	8d a0       	ldd	r8, Y+37	; 0x25
    90e8:	9e a0       	ldd	r9, Y+38	; 0x26
    90ea:	af a0       	ldd	r10, Y+39	; 0x27
    90ec:	b8 a4       	ldd	r11, Y+40	; 0x28
    90ee:	b9 01       	movw	r22, r18
    90f0:	a8 01       	movw	r20, r16
    90f2:	48 19       	sub	r20, r8
    90f4:	59 09       	sbc	r21, r9
    90f6:	6a 09       	sbc	r22, r10
    90f8:	7b 09       	sbc	r23, r11
    90fa:	48 17       	cp	r20, r24
    90fc:	59 07       	cpc	r21, r25
    90fe:	6a 07       	cpc	r22, r26
    9100:	7b 07       	cpc	r23, r27
    9102:	98 f4       	brcc	.+38     	; 0x912a <sync_window.part.5+0x8c>
    9104:	6a 81       	ldd	r22, Y+2	; 0x02
    9106:	62 30       	cpi	r22, 0x02	; 2
    9108:	81 f4       	brne	.+32     	; 0x912a <sync_window.part.5+0x8c>
    910a:	a9 01       	movw	r20, r18
    910c:	98 01       	movw	r18, r16
    910e:	28 0f       	add	r18, r24
    9110:	39 1f       	adc	r19, r25
    9112:	4a 1f       	adc	r20, r26
    9114:	5b 1f       	adc	r21, r27
    9116:	01 e0       	ldi	r16, 0x01	; 1
    9118:	10 e0       	ldi	r17, 0x00	; 0
    911a:	b7 01       	movw	r22, r14
    911c:	89 81       	ldd	r24, Y+1	; 0x01
    911e:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    9122:	03 c0       	rjmp	.+6      	; 0x912a <sync_window.part.5+0x8c>
    9124:	81 e0       	ldi	r24, 0x01	; 1
    9126:	90 e0       	ldi	r25, 0x00	; 0
    9128:	02 c0       	rjmp	.+4      	; 0x912e <sync_window.part.5+0x90>
    912a:	80 e0       	ldi	r24, 0x00	; 0
    912c:	90 e0       	ldi	r25, 0x00	; 0
    912e:	df 91       	pop	r29
    9130:	cf 91       	pop	r28
    9132:	1f 91       	pop	r17
    9134:	0f 91       	pop	r16
    9136:	ff 90       	pop	r15
    9138:	ef 90       	pop	r14
    913a:	bf 90       	pop	r11
    913c:	af 90       	pop	r10
    913e:	9f 90       	pop	r9
    9140:	8f 90       	pop	r8
    9142:	08 95       	ret

00009144 <sync_fs>:
    9144:	ef 92       	push	r14
    9146:	ff 92       	push	r15
    9148:	0f 93       	push	r16
    914a:	1f 93       	push	r17
    914c:	cf 93       	push	r28
    914e:	df 93       	push	r29
    9150:	ec 01       	movw	r28, r24
    9152:	8b 81       	ldd	r24, Y+3	; 0x03
    9154:	81 11       	cpse	r24, r1
    9156:	05 c0       	rjmp	.+10     	; 0x9162 <sync_fs+0x1e>
    9158:	88 81       	ld	r24, Y
    915a:	83 30       	cpi	r24, 0x03	; 3
    915c:	09 f0       	breq	.+2      	; 0x9160 <sync_fs+0x1c>
    915e:	52 c0       	rjmp	.+164    	; 0x9204 <sync_fs+0xc0>
    9160:	06 c0       	rjmp	.+12     	; 0x916e <sync_fs+0x2a>
    9162:	ce 01       	movw	r24, r28
    9164:	9c df       	rcall	.-200    	; 0x909e <sync_window.part.5>
    9166:	00 97       	sbiw	r24, 0x00	; 0
    9168:	09 f0       	breq	.+2      	; 0x916c <sync_fs+0x28>
    916a:	59 c0       	rjmp	.+178    	; 0x921e <sync_fs+0xda>
    916c:	f5 cf       	rjmp	.-22     	; 0x9158 <sync_fs+0x14>
    916e:	8c 81       	ldd	r24, Y+4	; 0x04
    9170:	81 30       	cpi	r24, 0x01	; 1
    9172:	09 f0       	breq	.+2      	; 0x9176 <sync_fs+0x32>
    9174:	47 c0       	rjmp	.+142    	; 0x9204 <sync_fs+0xc0>
    9176:	40 e0       	ldi	r20, 0x00	; 0
    9178:	52 e0       	ldi	r21, 0x02	; 2
    917a:	60 e0       	ldi	r22, 0x00	; 0
    917c:	70 e0       	ldi	r23, 0x00	; 0
    917e:	7e 01       	movw	r14, r28
    9180:	85 e3       	ldi	r24, 0x35	; 53
    9182:	e8 0e       	add	r14, r24
    9184:	f1 1c       	adc	r15, r1
    9186:	c7 01       	movw	r24, r14
    9188:	50 dd       	rcall	.-1376   	; 0x8c2a <mem_set>
    918a:	85 e5       	ldi	r24, 0x55	; 85
    918c:	fe 01       	movw	r30, r28
    918e:	ed 5c       	subi	r30, 0xCD	; 205
    9190:	fd 4f       	sbci	r31, 0xFD	; 253
    9192:	80 83       	st	Z, r24
    9194:	8a ea       	ldi	r24, 0xAA	; 170
    9196:	31 96       	adiw	r30, 0x01	; 1
    9198:	80 83       	st	Z, r24
    919a:	82 e5       	ldi	r24, 0x52	; 82
    919c:	8d ab       	std	Y+53, r24	; 0x35
    919e:	8e ab       	std	Y+54, r24	; 0x36
    91a0:	81 e6       	ldi	r24, 0x61	; 97
    91a2:	8f ab       	std	Y+55, r24	; 0x37
    91a4:	91 e4       	ldi	r25, 0x41	; 65
    91a6:	98 af       	std	Y+56, r25	; 0x38
    91a8:	22 e7       	ldi	r18, 0x72	; 114
    91aa:	7b 97       	sbiw	r30, 0x1b	; 27
    91ac:	20 83       	st	Z, r18
    91ae:	31 96       	adiw	r30, 0x01	; 1
    91b0:	20 83       	st	Z, r18
    91b2:	31 96       	adiw	r30, 0x01	; 1
    91b4:	90 83       	st	Z, r25
    91b6:	31 96       	adiw	r30, 0x01	; 1
    91b8:	80 83       	st	Z, r24
    91ba:	49 89       	ldd	r20, Y+17	; 0x11
    91bc:	5a 89       	ldd	r21, Y+18	; 0x12
    91be:	6b 89       	ldd	r22, Y+19	; 0x13
    91c0:	7c 89       	ldd	r23, Y+20	; 0x14
    91c2:	ce 01       	movw	r24, r28
    91c4:	83 5e       	subi	r24, 0xE3	; 227
    91c6:	9d 4f       	sbci	r25, 0xFD	; 253
    91c8:	2a dd       	rcall	.-1452   	; 0x8c1e <st_dword>
    91ca:	4d 85       	ldd	r20, Y+13	; 0x0d
    91cc:	5e 85       	ldd	r21, Y+14	; 0x0e
    91ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    91d0:	78 89       	ldd	r23, Y+16	; 0x10
    91d2:	ce 01       	movw	r24, r28
    91d4:	8f 5d       	subi	r24, 0xDF	; 223
    91d6:	9d 4f       	sbci	r25, 0xFD	; 253
    91d8:	22 dd       	rcall	.-1468   	; 0x8c1e <st_dword>
    91da:	89 a1       	ldd	r24, Y+33	; 0x21
    91dc:	9a a1       	ldd	r25, Y+34	; 0x22
    91de:	ab a1       	ldd	r26, Y+35	; 0x23
    91e0:	bc a1       	ldd	r27, Y+36	; 0x24
    91e2:	9c 01       	movw	r18, r24
    91e4:	ad 01       	movw	r20, r26
    91e6:	2f 5f       	subi	r18, 0xFF	; 255
    91e8:	3f 4f       	sbci	r19, 0xFF	; 255
    91ea:	4f 4f       	sbci	r20, 0xFF	; 255
    91ec:	5f 4f       	sbci	r21, 0xFF	; 255
    91ee:	29 ab       	std	Y+49, r18	; 0x31
    91f0:	3a ab       	std	Y+50, r19	; 0x32
    91f2:	4b ab       	std	Y+51, r20	; 0x33
    91f4:	5c ab       	std	Y+52, r21	; 0x34
    91f6:	01 e0       	ldi	r16, 0x01	; 1
    91f8:	10 e0       	ldi	r17, 0x00	; 0
    91fa:	b7 01       	movw	r22, r14
    91fc:	89 81       	ldd	r24, Y+1	; 0x01
    91fe:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    9202:	1c 82       	std	Y+4, r1	; 0x04
    9204:	40 e0       	ldi	r20, 0x00	; 0
    9206:	50 e0       	ldi	r21, 0x00	; 0
    9208:	60 e0       	ldi	r22, 0x00	; 0
    920a:	89 81       	ldd	r24, Y+1	; 0x01
    920c:	0e 94 0e 68 	call	0xd01c	; 0xd01c <disk_ioctl>
    9210:	31 e0       	ldi	r19, 0x01	; 1
    9212:	20 e0       	ldi	r18, 0x00	; 0
    9214:	89 2b       	or	r24, r25
    9216:	09 f4       	brne	.+2      	; 0x921a <sync_fs+0xd6>
    9218:	30 e0       	ldi	r19, 0x00	; 0
    921a:	83 2f       	mov	r24, r19
    921c:	92 2f       	mov	r25, r18
    921e:	cd b7       	in	r28, 0x3d	; 61
    9220:	de b7       	in	r29, 0x3e	; 62
    9222:	e6 e0       	ldi	r30, 0x06	; 6
    9224:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00009228 <dir_clear>:
    9228:	4f 92       	push	r4
    922a:	5f 92       	push	r5
    922c:	6f 92       	push	r6
    922e:	7f 92       	push	r7
    9230:	af 92       	push	r10
    9232:	bf 92       	push	r11
    9234:	cf 92       	push	r12
    9236:	df 92       	push	r13
    9238:	ef 92       	push	r14
    923a:	ff 92       	push	r15
    923c:	0f 93       	push	r16
    923e:	1f 93       	push	r17
    9240:	cf 93       	push	r28
    9242:	df 93       	push	r29
    9244:	ec 01       	movw	r28, r24
    9246:	6a 01       	movw	r12, r20
    9248:	7b 01       	movw	r14, r22
    924a:	8b 81       	ldd	r24, Y+3	; 0x03
    924c:	81 11       	cpse	r24, r1
    924e:	28 c0       	rjmp	.+80     	; 0x92a0 <dir_clear+0x78>
    9250:	b7 01       	movw	r22, r14
    9252:	a6 01       	movw	r20, r12
    9254:	ce 01       	movw	r24, r28
    9256:	01 dd       	rcall	.-1534   	; 0x8c5a <clst2sect>
    9258:	2b 01       	movw	r4, r22
    925a:	3c 01       	movw	r6, r24
    925c:	69 ab       	std	Y+49, r22	; 0x31
    925e:	7a ab       	std	Y+50, r23	; 0x32
    9260:	8b ab       	std	Y+51, r24	; 0x33
    9262:	9c ab       	std	Y+52, r25	; 0x34
    9264:	5e 01       	movw	r10, r28
    9266:	25 e3       	ldi	r18, 0x35	; 53
    9268:	a2 0e       	add	r10, r18
    926a:	b1 1c       	adc	r11, r1
    926c:	40 e0       	ldi	r20, 0x00	; 0
    926e:	52 e0       	ldi	r21, 0x02	; 2
    9270:	60 e0       	ldi	r22, 0x00	; 0
    9272:	70 e0       	ldi	r23, 0x00	; 0
    9274:	c5 01       	movw	r24, r10
    9276:	d9 dc       	rcall	.-1614   	; 0x8c2a <mem_set>
    9278:	09 85       	ldd	r16, Y+9	; 0x09
    927a:	1a 85       	ldd	r17, Y+10	; 0x0a
    927c:	c8 01       	movw	r24, r16
    927e:	a0 e0       	ldi	r26, 0x00	; 0
    9280:	b0 e0       	ldi	r27, 0x00	; 0
    9282:	39 e0       	ldi	r19, 0x09	; 9
    9284:	88 0f       	add	r24, r24
    9286:	99 1f       	adc	r25, r25
    9288:	aa 1f       	adc	r26, r26
    928a:	bb 1f       	adc	r27, r27
    928c:	3a 95       	dec	r19
    928e:	d1 f7       	brne	.-12     	; 0x9284 <dir_clear+0x5c>
    9290:	81 15       	cp	r24, r1
    9292:	90 48       	sbci	r25, 0x80	; 128
    9294:	a1 05       	cpc	r26, r1
    9296:	b1 05       	cpc	r27, r1
    9298:	50 f0       	brcs	.+20     	; 0x92ae <dir_clear+0x86>
    929a:	00 e0       	ldi	r16, 0x00	; 0
    929c:	10 e8       	ldi	r17, 0x80	; 128
    929e:	14 c0       	rjmp	.+40     	; 0x92c8 <dir_clear+0xa0>
    92a0:	ce 01       	movw	r24, r28
    92a2:	fd de       	rcall	.-518    	; 0x909e <sync_window.part.5>
    92a4:	89 2b       	or	r24, r25
    92a6:	a1 f2       	breq	.-88     	; 0x9250 <dir_clear+0x28>
    92a8:	81 e0       	ldi	r24, 0x01	; 1
    92aa:	90 e0       	ldi	r25, 0x00	; 0
    92ac:	56 c0       	rjmp	.+172    	; 0x935a <dir_clear+0x132>
    92ae:	10 2f       	mov	r17, r16
    92b0:	00 27       	eor	r16, r16
    92b2:	11 0f       	add	r17, r17
    92b4:	09 c0       	rjmp	.+18     	; 0x92c8 <dir_clear+0xa0>
    92b6:	c8 01       	movw	r24, r16
    92b8:	0e 94 32 67 	call	0xce64	; 0xce64 <ff_memalloc>
    92bc:	6c 01       	movw	r12, r24
    92be:	00 97       	sbiw	r24, 0x00	; 0
    92c0:	09 f0       	breq	.+2      	; 0x92c4 <dir_clear+0x9c>
    92c2:	40 c0       	rjmp	.+128    	; 0x9344 <dir_clear+0x11c>
    92c4:	16 95       	lsr	r17
    92c6:	07 95       	ror	r16
    92c8:	01 30       	cpi	r16, 0x01	; 1
    92ca:	82 e0       	ldi	r24, 0x02	; 2
    92cc:	18 07       	cpc	r17, r24
    92ce:	98 f7       	brcc	.-26     	; 0x92b6 <dir_clear+0x8e>
    92d0:	e1 2c       	mov	r14, r1
    92d2:	f1 2c       	mov	r15, r1
    92d4:	11 c0       	rjmp	.+34     	; 0x92f8 <dir_clear+0xd0>
    92d6:	01 e0       	ldi	r16, 0x01	; 1
    92d8:	10 e0       	ldi	r17, 0x00	; 0
    92da:	a3 01       	movw	r20, r6
    92dc:	92 01       	movw	r18, r4
    92de:	2e 0d       	add	r18, r14
    92e0:	3f 1d       	adc	r19, r15
    92e2:	41 1d       	adc	r20, r1
    92e4:	51 1d       	adc	r21, r1
    92e6:	b5 01       	movw	r22, r10
    92e8:	89 81       	ldd	r24, Y+1	; 0x01
    92ea:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    92ee:	89 2b       	or	r24, r25
    92f0:	01 f5       	brne	.+64     	; 0x9332 <dir_clear+0x10a>
    92f2:	2f ef       	ldi	r18, 0xFF	; 255
    92f4:	e2 1a       	sub	r14, r18
    92f6:	f2 0a       	sbc	r15, r18
    92f8:	89 85       	ldd	r24, Y+9	; 0x09
    92fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    92fc:	e8 16       	cp	r14, r24
    92fe:	f9 06       	cpc	r15, r25
    9300:	50 f3       	brcs	.-44     	; 0x92d6 <dir_clear+0xae>
    9302:	17 c0       	rjmp	.+46     	; 0x9332 <dir_clear+0x10a>
    9304:	85 01       	movw	r16, r10
    9306:	a3 01       	movw	r20, r6
    9308:	92 01       	movw	r18, r4
    930a:	2e 0d       	add	r18, r14
    930c:	3f 1d       	adc	r19, r15
    930e:	41 1d       	adc	r20, r1
    9310:	51 1d       	adc	r21, r1
    9312:	b6 01       	movw	r22, r12
    9314:	89 81       	ldd	r24, Y+1	; 0x01
    9316:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    931a:	89 2b       	or	r24, r25
    931c:	39 f4       	brne	.+14     	; 0x932c <dir_clear+0x104>
    931e:	ea 0c       	add	r14, r10
    9320:	fb 1c       	adc	r15, r11
    9322:	89 85       	ldd	r24, Y+9	; 0x09
    9324:	9a 85       	ldd	r25, Y+10	; 0x0a
    9326:	e8 16       	cp	r14, r24
    9328:	f9 06       	cpc	r15, r25
    932a:	60 f3       	brcs	.-40     	; 0x9304 <dir_clear+0xdc>
    932c:	c6 01       	movw	r24, r12
    932e:	0e 94 35 67 	call	0xce6a	; 0xce6a <ff_memfree>
    9332:	81 e0       	ldi	r24, 0x01	; 1
    9334:	90 e0       	ldi	r25, 0x00	; 0
    9336:	29 85       	ldd	r18, Y+9	; 0x09
    9338:	3a 85       	ldd	r19, Y+10	; 0x0a
    933a:	2e 15       	cp	r18, r14
    933c:	3f 05       	cpc	r19, r15
    933e:	69 f4       	brne	.+26     	; 0x935a <dir_clear+0x132>
    9340:	80 e0       	ldi	r24, 0x00	; 0
    9342:	0b c0       	rjmp	.+22     	; 0x935a <dir_clear+0x132>
    9344:	a8 01       	movw	r20, r16
    9346:	60 e0       	ldi	r22, 0x00	; 0
    9348:	70 e0       	ldi	r23, 0x00	; 0
    934a:	6f dc       	rcall	.-1826   	; 0x8c2a <mem_set>
    934c:	58 01       	movw	r10, r16
    934e:	ab 2c       	mov	r10, r11
    9350:	bb 24       	eor	r11, r11
    9352:	a6 94       	lsr	r10
    9354:	e1 2c       	mov	r14, r1
    9356:	f1 2c       	mov	r15, r1
    9358:	e4 cf       	rjmp	.-56     	; 0x9322 <dir_clear+0xfa>
    935a:	df 91       	pop	r29
    935c:	cf 91       	pop	r28
    935e:	1f 91       	pop	r17
    9360:	0f 91       	pop	r16
    9362:	ff 90       	pop	r15
    9364:	ef 90       	pop	r14
    9366:	df 90       	pop	r13
    9368:	cf 90       	pop	r12
    936a:	bf 90       	pop	r11
    936c:	af 90       	pop	r10
    936e:	7f 90       	pop	r7
    9370:	6f 90       	pop	r6
    9372:	5f 90       	pop	r5
    9374:	4f 90       	pop	r4
    9376:	08 95       	ret

00009378 <move_window>:
    9378:	a0 e0       	ldi	r26, 0x00	; 0
    937a:	b0 e0       	ldi	r27, 0x00	; 0
    937c:	e2 ec       	ldi	r30, 0xC2	; 194
    937e:	f9 e4       	ldi	r31, 0x49	; 73
    9380:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    9384:	ec 01       	movw	r28, r24
    9386:	6a 01       	movw	r12, r20
    9388:	7b 01       	movw	r14, r22
    938a:	89 a9       	ldd	r24, Y+49	; 0x31
    938c:	9a a9       	ldd	r25, Y+50	; 0x32
    938e:	ab a9       	ldd	r26, Y+51	; 0x33
    9390:	bc a9       	ldd	r27, Y+52	; 0x34
    9392:	84 17       	cp	r24, r20
    9394:	95 07       	cpc	r25, r21
    9396:	a6 07       	cpc	r26, r22
    9398:	b7 07       	cpc	r27, r23
    939a:	11 f1       	breq	.+68     	; 0x93e0 <move_window+0x68>
    939c:	8b 81       	ldd	r24, Y+3	; 0x03
    939e:	81 11       	cpse	r24, r1
    93a0:	13 c0       	rjmp	.+38     	; 0x93c8 <move_window+0x50>
    93a2:	01 e0       	ldi	r16, 0x01	; 1
    93a4:	10 e0       	ldi	r17, 0x00	; 0
    93a6:	a7 01       	movw	r20, r14
    93a8:	96 01       	movw	r18, r12
    93aa:	be 01       	movw	r22, r28
    93ac:	6b 5c       	subi	r22, 0xCB	; 203
    93ae:	7f 4f       	sbci	r23, 0xFF	; 255
    93b0:	89 81       	ldd	r24, Y+1	; 0x01
    93b2:	0e 94 ee 67 	call	0xcfdc	; 0xcfdc <disk_read>
    93b6:	89 2b       	or	r24, r25
    93b8:	61 f0       	breq	.+24     	; 0x93d2 <move_window+0x5a>
    93ba:	81 e0       	ldi	r24, 0x01	; 1
    93bc:	90 e0       	ldi	r25, 0x00	; 0
    93be:	cc 24       	eor	r12, r12
    93c0:	ca 94       	dec	r12
    93c2:	dc 2c       	mov	r13, r12
    93c4:	76 01       	movw	r14, r12
    93c6:	07 c0       	rjmp	.+14     	; 0x93d6 <move_window+0x5e>
    93c8:	ce 01       	movw	r24, r28
    93ca:	69 de       	rcall	.-814    	; 0x909e <sync_window.part.5>
    93cc:	00 97       	sbiw	r24, 0x00	; 0
    93ce:	51 f4       	brne	.+20     	; 0x93e4 <move_window+0x6c>
    93d0:	e8 cf       	rjmp	.-48     	; 0x93a2 <move_window+0x2a>
    93d2:	80 e0       	ldi	r24, 0x00	; 0
    93d4:	90 e0       	ldi	r25, 0x00	; 0
    93d6:	c9 aa       	std	Y+49, r12	; 0x31
    93d8:	da aa       	std	Y+50, r13	; 0x32
    93da:	eb aa       	std	Y+51, r14	; 0x33
    93dc:	fc aa       	std	Y+52, r15	; 0x34
    93de:	02 c0       	rjmp	.+4      	; 0x93e4 <move_window+0x6c>
    93e0:	80 e0       	ldi	r24, 0x00	; 0
    93e2:	90 e0       	ldi	r25, 0x00	; 0
    93e4:	cd b7       	in	r28, 0x3d	; 61
    93e6:	de b7       	in	r29, 0x3e	; 62
    93e8:	e8 e0       	ldi	r30, 0x08	; 8
    93ea:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

000093ee <check_fs>:
    93ee:	cf 93       	push	r28
    93f0:	df 93       	push	r29
    93f2:	ec 01       	movw	r28, r24
    93f4:	1b 82       	std	Y+3, r1	; 0x03
    93f6:	8f ef       	ldi	r24, 0xFF	; 255
    93f8:	9f ef       	ldi	r25, 0xFF	; 255
    93fa:	dc 01       	movw	r26, r24
    93fc:	89 ab       	std	Y+49, r24	; 0x31
    93fe:	9a ab       	std	Y+50, r25	; 0x32
    9400:	ab ab       	std	Y+51, r26	; 0x33
    9402:	bc ab       	std	Y+52, r27	; 0x34
    9404:	ce 01       	movw	r24, r28
    9406:	b8 df       	rcall	.-144    	; 0x9378 <move_window>
    9408:	89 2b       	or	r24, r25
    940a:	19 f5       	brne	.+70     	; 0x9452 <check_fs+0x64>
    940c:	fe 01       	movw	r30, r28
    940e:	ed 5c       	subi	r30, 0xCD	; 205
    9410:	fd 4f       	sbci	r31, 0xFD	; 253
    9412:	80 81       	ld	r24, Z
    9414:	91 81       	ldd	r25, Z+1	; 0x01
    9416:	85 35       	cpi	r24, 0x55	; 85
    9418:	9a 4a       	sbci	r25, 0xAA	; 170
    941a:	f1 f4       	brne	.+60     	; 0x9458 <check_fs+0x6a>
    941c:	8d a9       	ldd	r24, Y+53	; 0x35
    941e:	8b 3e       	cpi	r24, 0xEB	; 235
    9420:	19 f0       	breq	.+6      	; 0x9428 <check_fs+0x3a>
    9422:	88 5e       	subi	r24, 0xE8	; 232
    9424:	82 30       	cpi	r24, 0x02	; 2
    9426:	f0 f4       	brcc	.+60     	; 0x9464 <check_fs+0x76>
    9428:	43 e0       	ldi	r20, 0x03	; 3
    942a:	50 e0       	ldi	r21, 0x00	; 0
    942c:	66 ec       	ldi	r22, 0xC6	; 198
    942e:	78 e0       	ldi	r23, 0x08	; 8
    9430:	ce 01       	movw	r24, r28
    9432:	85 59       	subi	r24, 0x95	; 149
    9434:	9f 4f       	sbci	r25, 0xFF	; 255
    9436:	02 dc       	rcall	.-2044   	; 0x8c3c <mem_cmp>
    9438:	89 2b       	or	r24, r25
    943a:	89 f0       	breq	.+34     	; 0x945e <check_fs+0x70>
    943c:	45 e0       	ldi	r20, 0x05	; 5
    943e:	50 e0       	ldi	r21, 0x00	; 0
    9440:	61 e2       	ldi	r22, 0x21	; 33
    9442:	74 e0       	ldi	r23, 0x04	; 4
    9444:	ce 01       	movw	r24, r28
    9446:	89 57       	subi	r24, 0x79	; 121
    9448:	9f 4f       	sbci	r25, 0xFF	; 255
    944a:	f8 db       	rcall	.-2064   	; 0x8c3c <mem_cmp>
    944c:	89 2b       	or	r24, r25
    944e:	51 f4       	brne	.+20     	; 0x9464 <check_fs+0x76>
    9450:	06 c0       	rjmp	.+12     	; 0x945e <check_fs+0x70>
    9452:	84 e0       	ldi	r24, 0x04	; 4
    9454:	90 e0       	ldi	r25, 0x00	; 0
    9456:	08 c0       	rjmp	.+16     	; 0x9468 <check_fs+0x7a>
    9458:	83 e0       	ldi	r24, 0x03	; 3
    945a:	90 e0       	ldi	r25, 0x00	; 0
    945c:	05 c0       	rjmp	.+10     	; 0x9468 <check_fs+0x7a>
    945e:	80 e0       	ldi	r24, 0x00	; 0
    9460:	90 e0       	ldi	r25, 0x00	; 0
    9462:	02 c0       	rjmp	.+4      	; 0x9468 <check_fs+0x7a>
    9464:	82 e0       	ldi	r24, 0x02	; 2
    9466:	90 e0       	ldi	r25, 0x00	; 0
    9468:	df 91       	pop	r29
    946a:	cf 91       	pop	r28
    946c:	08 95       	ret

0000946e <mount_volume>:
    946e:	a0 e2       	ldi	r26, 0x20	; 32
    9470:	b0 e0       	ldi	r27, 0x00	; 0
    9472:	ed e3       	ldi	r30, 0x3D	; 61
    9474:	fa e4       	ldi	r31, 0x4A	; 74
    9476:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x4>
    947a:	5b 01       	movw	r10, r22
    947c:	f4 2e       	mov	r15, r20
    947e:	db 01       	movw	r26, r22
    9480:	1d 92       	st	X+, r1
    9482:	1c 92       	st	X, r1
    9484:	5d dc       	rcall	.-1862   	; 0x8d40 <get_ldnumber>
    9486:	6c 01       	movw	r12, r24
    9488:	97 fd       	sbrc	r25, 7
    948a:	39 c2       	rjmp	.+1138   	; 0x98fe <mount_volume+0x490>
    948c:	fc 01       	movw	r30, r24
    948e:	ee 0f       	add	r30, r30
    9490:	ff 1f       	adc	r31, r31
    9492:	e7 5d       	subi	r30, 0xD7	; 215
    9494:	f7 4e       	sbci	r31, 0xE7	; 231
    9496:	00 81       	ld	r16, Z
    9498:	11 81       	ldd	r17, Z+1	; 0x01
    949a:	01 15       	cp	r16, r1
    949c:	11 05       	cpc	r17, r1
    949e:	09 f4       	brne	.+2      	; 0x94a2 <mount_volume+0x34>
    94a0:	31 c2       	rjmp	.+1122   	; 0x9904 <mount_volume+0x496>
    94a2:	f5 01       	movw	r30, r10
    94a4:	11 83       	std	Z+1, r17	; 0x01
    94a6:	00 83       	st	Z, r16
    94a8:	ff 2d       	mov	r31, r15
    94aa:	fe 7f       	andi	r31, 0xFE	; 254
    94ac:	ff 2e       	mov	r15, r31
    94ae:	d8 01       	movw	r26, r16
    94b0:	8c 91       	ld	r24, X
    94b2:	88 23       	and	r24, r24
    94b4:	71 f0       	breq	.+28     	; 0x94d2 <mount_volume+0x64>
    94b6:	f8 01       	movw	r30, r16
    94b8:	81 81       	ldd	r24, Z+1	; 0x01
    94ba:	0e 94 e2 67 	call	0xcfc4	; 0xcfc4 <disk_status>
    94be:	80 fd       	sbrc	r24, 0
    94c0:	08 c0       	rjmp	.+16     	; 0x94d2 <mount_volume+0x64>
    94c2:	ff 20       	and	r15, r15
    94c4:	09 f4       	brne	.+2      	; 0x94c8 <mount_volume+0x5a>
    94c6:	21 c2       	rjmp	.+1090   	; 0x990a <mount_volume+0x49c>
    94c8:	82 ff       	sbrs	r24, 2
    94ca:	1f c2       	rjmp	.+1086   	; 0x990a <mount_volume+0x49c>
    94cc:	8a e0       	ldi	r24, 0x0A	; 10
    94ce:	90 e0       	ldi	r25, 0x00	; 0
    94d0:	24 c2       	rjmp	.+1096   	; 0x991a <mount_volume+0x4ac>
    94d2:	d8 01       	movw	r26, r16
    94d4:	1c 92       	st	X, r1
    94d6:	f8 01       	movw	r30, r16
    94d8:	c1 82       	std	Z+1, r12	; 0x01
    94da:	8c 2d       	mov	r24, r12
    94dc:	0e 94 e8 67 	call	0xcfd0	; 0xcfd0 <disk_initialize>
    94e0:	80 fd       	sbrc	r24, 0
    94e2:	16 c2       	rjmp	.+1068   	; 0x9910 <mount_volume+0x4a2>
    94e4:	ff 20       	and	r15, r15
    94e6:	11 f0       	breq	.+4      	; 0x94ec <mount_volume+0x7e>
    94e8:	82 fd       	sbrc	r24, 2
    94ea:	f0 cf       	rjmp	.-32     	; 0x94cc <mount_volume+0x5e>
    94ec:	40 e0       	ldi	r20, 0x00	; 0
    94ee:	50 e0       	ldi	r21, 0x00	; 0
    94f0:	ba 01       	movw	r22, r20
    94f2:	c8 01       	movw	r24, r16
    94f4:	7c df       	rcall	.-264    	; 0x93ee <check_fs>
    94f6:	82 30       	cpi	r24, 0x02	; 2
    94f8:	91 05       	cpc	r25, r1
    94fa:	b9 f5       	brne	.+110    	; 0x956a <mount_volume+0xfc>
    94fc:	68 01       	movw	r12, r16
    94fe:	f5 e0       	ldi	r31, 0x05	; 5
    9500:	cf 1a       	sub	r12, r31
    9502:	fe ef       	ldi	r31, 0xFE	; 254
    9504:	df 0a       	sbc	r13, r31
    9506:	9e 01       	movw	r18, r28
    9508:	2f 5f       	subi	r18, 0xFF	; 255
    950a:	3f 4f       	sbci	r19, 0xFF	; 255
    950c:	79 01       	movw	r14, r18
    950e:	48 01       	movw	r8, r16
    9510:	35 ec       	ldi	r19, 0xC5	; 197
    9512:	83 1a       	sub	r8, r19
    9514:	3d ef       	ldi	r19, 0xFD	; 253
    9516:	93 0a       	sbc	r9, r19
    9518:	57 01       	movw	r10, r14
    951a:	c6 01       	movw	r24, r12
    951c:	6b db       	rcall	.-2346   	; 0x8bf4 <ld_dword>
    951e:	d5 01       	movw	r26, r10
    9520:	6d 93       	st	X+, r22
    9522:	7d 93       	st	X+, r23
    9524:	8d 93       	st	X+, r24
    9526:	9d 93       	st	X+, r25
    9528:	5d 01       	movw	r10, r26
    952a:	b0 e1       	ldi	r27, 0x10	; 16
    952c:	cb 0e       	add	r12, r27
    952e:	d1 1c       	adc	r13, r1
    9530:	c8 14       	cp	r12, r8
    9532:	d9 04       	cpc	r13, r9
    9534:	91 f7       	brne	.-28     	; 0x951a <mount_volume+0xac>
    9536:	6e 01       	movw	r12, r28
    9538:	e1 e1       	ldi	r30, 0x11	; 17
    953a:	ce 0e       	add	r12, r30
    953c:	d1 1c       	adc	r13, r1
    953e:	d7 01       	movw	r26, r14
    9540:	4d 91       	ld	r20, X+
    9542:	5d 91       	ld	r21, X+
    9544:	6d 91       	ld	r22, X+
    9546:	7d 91       	ld	r23, X+
    9548:	7d 01       	movw	r14, r26
    954a:	41 15       	cp	r20, r1
    954c:	51 05       	cpc	r21, r1
    954e:	61 05       	cpc	r22, r1
    9550:	71 05       	cpc	r23, r1
    9552:	31 f0       	breq	.+12     	; 0x9560 <mount_volume+0xf2>
    9554:	c8 01       	movw	r24, r16
    9556:	4b df       	rcall	.-362    	; 0x93ee <check_fs>
    9558:	82 30       	cpi	r24, 0x02	; 2
    955a:	91 05       	cpc	r25, r1
    955c:	18 f4       	brcc	.+6      	; 0x9564 <mount_volume+0xf6>
    955e:	05 c0       	rjmp	.+10     	; 0x956a <mount_volume+0xfc>
    9560:	83 e0       	ldi	r24, 0x03	; 3
    9562:	90 e0       	ldi	r25, 0x00	; 0
    9564:	ce 14       	cp	r12, r14
    9566:	df 04       	cpc	r13, r15
    9568:	51 f7       	brne	.-44     	; 0x953e <mount_volume+0xd0>
    956a:	84 30       	cpi	r24, 0x04	; 4
    956c:	91 05       	cpc	r25, r1
    956e:	09 f4       	brne	.+2      	; 0x9572 <mount_volume+0x104>
    9570:	d2 c1       	rjmp	.+932    	; 0x9916 <mount_volume+0x4a8>
    9572:	02 97       	sbiw	r24, 0x02	; 2
    9574:	18 f0       	brcs	.+6      	; 0x957c <mount_volume+0x10e>
    9576:	8d e0       	ldi	r24, 0x0D	; 13
    9578:	90 e0       	ldi	r25, 0x00	; 0
    957a:	cf c1       	rjmp	.+926    	; 0x991a <mount_volume+0x4ac>
    957c:	f8 01       	movw	r30, r16
    957e:	e0 5c       	subi	r30, 0xC0	; 192
    9580:	ff 4f       	sbci	r31, 0xFF	; 255
    9582:	80 81       	ld	r24, Z
    9584:	91 81       	ldd	r25, Z+1	; 0x01
    9586:	81 15       	cp	r24, r1
    9588:	92 40       	sbci	r25, 0x02	; 2
    958a:	a9 f7       	brne	.-22     	; 0x9576 <mount_volume+0x108>
    958c:	3b 96       	adiw	r30, 0x0b	; 11
    958e:	40 80       	ld	r4, Z
    9590:	51 80       	ldd	r5, Z+1	; 0x01
    9592:	41 14       	cp	r4, r1
    9594:	51 04       	cpc	r5, r1
    9596:	19 f0       	breq	.+6      	; 0x959e <mount_volume+0x130>
    9598:	61 2c       	mov	r6, r1
    959a:	71 2c       	mov	r7, r1
    959c:	06 c0       	rjmp	.+12     	; 0x95aa <mount_volume+0x13c>
    959e:	c8 01       	movw	r24, r16
    95a0:	87 5a       	subi	r24, 0xA7	; 167
    95a2:	9f 4f       	sbci	r25, 0xFF	; 255
    95a4:	27 db       	rcall	.-2482   	; 0x8bf4 <ld_dword>
    95a6:	2b 01       	movw	r4, r22
    95a8:	3c 01       	movw	r6, r24
    95aa:	f8 01       	movw	r30, r16
    95ac:	21 a9       	ldd	r18, Z+49	; 0x31
    95ae:	32 a9       	ldd	r19, Z+50	; 0x32
    95b0:	43 a9       	ldd	r20, Z+51	; 0x33
    95b2:	54 a9       	ldd	r21, Z+52	; 0x34
    95b4:	29 8b       	std	Y+17, r18	; 0x11
    95b6:	3a 8b       	std	Y+18, r19	; 0x12
    95b8:	4b 8b       	std	Y+19, r20	; 0x13
    95ba:	5c 8b       	std	Y+20, r21	; 0x14
    95bc:	45 8e       	std	Z+29, r4	; 0x1d
    95be:	56 8e       	std	Z+30, r5	; 0x1e
    95c0:	67 8e       	std	Z+31, r6	; 0x1f
    95c2:	70 a2       	std	Z+32, r7	; 0x20
    95c4:	eb 5b       	subi	r30, 0xBB	; 187
    95c6:	ff 4f       	sbci	r31, 0xFF	; 255
    95c8:	a0 80       	ld	r10, Z
    95ca:	f8 01       	movw	r30, r16
    95cc:	a2 82       	std	Z+2, r10	; 0x02
    95ce:	8f ef       	ldi	r24, 0xFF	; 255
    95d0:	8a 0d       	add	r24, r10
    95d2:	82 30       	cpi	r24, 0x02	; 2
    95d4:	80 f6       	brcc	.-96     	; 0x9576 <mount_volume+0x108>
    95d6:	ee 5b       	subi	r30, 0xBE	; 190
    95d8:	ff 4f       	sbci	r31, 0xFF	; 255
    95da:	b0 80       	ld	r11, Z
    95dc:	8b 2d       	mov	r24, r11
    95de:	90 e0       	ldi	r25, 0x00	; 0
    95e0:	f8 01       	movw	r30, r16
    95e2:	92 87       	std	Z+10, r25	; 0x0a
    95e4:	81 87       	std	Z+9, r24	; 0x09
    95e6:	00 97       	sbiw	r24, 0x00	; 0
    95e8:	31 f2       	breq	.-116    	; 0x9576 <mount_volume+0x108>
    95ea:	9c 01       	movw	r18, r24
    95ec:	21 50       	subi	r18, 0x01	; 1
    95ee:	31 09       	sbc	r19, r1
    95f0:	82 23       	and	r24, r18
    95f2:	93 23       	and	r25, r19
    95f4:	89 2b       	or	r24, r25
    95f6:	09 f0       	breq	.+2      	; 0x95fa <mount_volume+0x18c>
    95f8:	be cf       	rjmp	.-132    	; 0x9576 <mount_volume+0x108>
    95fa:	ea 5b       	subi	r30, 0xBA	; 186
    95fc:	ff 4f       	sbci	r31, 0xFF	; 255
    95fe:	80 80       	ld	r8, Z
    9600:	91 80       	ldd	r9, Z+1	; 0x01
    9602:	f8 01       	movw	r30, r16
    9604:	90 86       	std	Z+8, r9	; 0x08
    9606:	87 82       	std	Z+7, r8	; 0x07
    9608:	c4 01       	movw	r24, r8
    960a:	8f 70       	andi	r24, 0x0F	; 15
    960c:	99 27       	eor	r25, r25
    960e:	89 2b       	or	r24, r25
    9610:	09 f0       	breq	.+2      	; 0x9614 <mount_volume+0x1a6>
    9612:	b1 cf       	rjmp	.-158    	; 0x9576 <mount_volume+0x108>
    9614:	e8 5b       	subi	r30, 0xB8	; 184
    9616:	ff 4f       	sbci	r31, 0xFF	; 255
    9618:	80 81       	ld	r24, Z
    961a:	91 81       	ldd	r25, Z+1	; 0x01
    961c:	6c 01       	movw	r12, r24
    961e:	e1 2c       	mov	r14, r1
    9620:	f1 2c       	mov	r15, r1
    9622:	89 2b       	or	r24, r25
    9624:	31 f4       	brne	.+12     	; 0x9632 <mount_volume+0x1c4>
    9626:	c8 01       	movw	r24, r16
    9628:	8b 5a       	subi	r24, 0xAB	; 171
    962a:	9f 4f       	sbci	r25, 0xFF	; 255
    962c:	e3 da       	rcall	.-2618   	; 0x8bf4 <ld_dword>
    962e:	6b 01       	movw	r12, r22
    9630:	7c 01       	movw	r14, r24
    9632:	f8 01       	movw	r30, r16
    9634:	ed 5b       	subi	r30, 0xBD	; 189
    9636:	ff 4f       	sbci	r31, 0xFF	; 255
    9638:	01 90       	ld	r0, Z+
    963a:	f0 81       	ld	r31, Z
    963c:	e0 2d       	mov	r30, r0
    963e:	30 97       	sbiw	r30, 0x00	; 0
    9640:	09 f4       	brne	.+2      	; 0x9644 <mount_volume+0x1d6>
    9642:	99 cf       	rjmp	.-206    	; 0x9576 <mount_volume+0x108>
    9644:	aa 2d       	mov	r26, r10
    9646:	b0 e0       	ldi	r27, 0x00	; 0
    9648:	a3 01       	movw	r20, r6
    964a:	92 01       	movw	r18, r4
    964c:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    9650:	69 8f       	std	Y+25, r22	; 0x19
    9652:	7a 8f       	std	Y+26, r23	; 0x1a
    9654:	8b 8f       	std	Y+27, r24	; 0x1b
    9656:	9c 8f       	std	Y+28, r25	; 0x1c
    9658:	9f 01       	movw	r18, r30
    965a:	40 e0       	ldi	r20, 0x00	; 0
    965c:	50 e0       	ldi	r21, 0x00	; 0
    965e:	2d 8f       	std	Y+29, r18	; 0x1d
    9660:	3e 8f       	std	Y+30, r19	; 0x1e
    9662:	4f 8f       	std	Y+31, r20	; 0x1f
    9664:	58 a3       	std	Y+32, r21	; 0x20
    9666:	c4 01       	movw	r24, r8
    9668:	f4 e0       	ldi	r31, 0x04	; 4
    966a:	96 95       	lsr	r25
    966c:	87 95       	ror	r24
    966e:	fa 95       	dec	r31
    9670:	e1 f7       	brne	.-8      	; 0x966a <mount_volume+0x1fc>
    9672:	28 0f       	add	r18, r24
    9674:	39 1f       	adc	r19, r25
    9676:	41 1d       	adc	r20, r1
    9678:	51 1d       	adc	r21, r1
    967a:	da 01       	movw	r26, r20
    967c:	c9 01       	movw	r24, r18
    967e:	29 8d       	ldd	r18, Y+25	; 0x19
    9680:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9682:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9684:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9686:	28 0f       	add	r18, r24
    9688:	39 1f       	adc	r19, r25
    968a:	4a 1f       	adc	r20, r26
    968c:	5b 1f       	adc	r21, r27
    968e:	2d 8b       	std	Y+21, r18	; 0x15
    9690:	3e 8b       	std	Y+22, r19	; 0x16
    9692:	4f 8b       	std	Y+23, r20	; 0x17
    9694:	58 8f       	std	Y+24, r21	; 0x18
    9696:	c2 16       	cp	r12, r18
    9698:	d3 06       	cpc	r13, r19
    969a:	e4 06       	cpc	r14, r20
    969c:	f5 06       	cpc	r15, r21
    969e:	08 f4       	brcc	.+2      	; 0x96a2 <mount_volume+0x234>
    96a0:	6a cf       	rjmp	.-300    	; 0x9576 <mount_volume+0x108>
    96a2:	c7 01       	movw	r24, r14
    96a4:	b6 01       	movw	r22, r12
    96a6:	62 1b       	sub	r22, r18
    96a8:	73 0b       	sbc	r23, r19
    96aa:	84 0b       	sbc	r24, r20
    96ac:	95 0b       	sbc	r25, r21
    96ae:	2b 2d       	mov	r18, r11
    96b0:	30 e0       	ldi	r19, 0x00	; 0
    96b2:	40 e0       	ldi	r20, 0x00	; 0
    96b4:	50 e0       	ldi	r21, 0x00	; 0
    96b6:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    96ba:	da 01       	movw	r26, r20
    96bc:	c9 01       	movw	r24, r18
    96be:	01 97       	sbiw	r24, 0x01	; 1
    96c0:	a1 09       	sbc	r26, r1
    96c2:	b1 09       	sbc	r27, r1
    96c4:	85 3f       	cpi	r24, 0xF5	; 245
    96c6:	9f 4f       	sbci	r25, 0xFF	; 255
    96c8:	af 4f       	sbci	r26, 0xFF	; 255
    96ca:	bf 40       	sbci	r27, 0x0F	; 15
    96cc:	08 f0       	brcs	.+2      	; 0x96d0 <mount_volume+0x262>
    96ce:	53 cf       	rjmp	.-346    	; 0x9576 <mount_volume+0x108>
    96d0:	26 3f       	cpi	r18, 0xF6	; 246
    96d2:	8f ef       	ldi	r24, 0xFF	; 255
    96d4:	38 07       	cpc	r19, r24
    96d6:	41 05       	cpc	r20, r1
    96d8:	51 05       	cpc	r21, r1
    96da:	50 f4       	brcc	.+20     	; 0x96f0 <mount_volume+0x282>
    96dc:	26 3f       	cpi	r18, 0xF6	; 246
    96de:	9f e0       	ldi	r25, 0x0F	; 15
    96e0:	39 07       	cpc	r19, r25
    96e2:	41 05       	cpc	r20, r1
    96e4:	51 05       	cpc	r21, r1
    96e6:	40 f4       	brcc	.+16     	; 0x96f8 <mount_volume+0x28a>
    96e8:	aa 24       	eor	r10, r10
    96ea:	a3 94       	inc	r10
    96ec:	b1 2c       	mov	r11, r1
    96ee:	07 c0       	rjmp	.+14     	; 0x96fe <mount_volume+0x290>
    96f0:	73 e0       	ldi	r23, 0x03	; 3
    96f2:	a7 2e       	mov	r10, r23
    96f4:	b1 2c       	mov	r11, r1
    96f6:	03 c0       	rjmp	.+6      	; 0x96fe <mount_volume+0x290>
    96f8:	62 e0       	ldi	r22, 0x02	; 2
    96fa:	a6 2e       	mov	r10, r22
    96fc:	b1 2c       	mov	r11, r1
    96fe:	69 01       	movw	r12, r18
    9700:	7a 01       	movw	r14, r20
    9702:	a2 e0       	ldi	r26, 0x02	; 2
    9704:	ca 0e       	add	r12, r26
    9706:	d1 1c       	adc	r13, r1
    9708:	e1 1c       	adc	r14, r1
    970a:	f1 1c       	adc	r15, r1
    970c:	f8 01       	movw	r30, r16
    970e:	c1 8e       	std	Z+25, r12	; 0x19
    9710:	d2 8e       	std	Z+26, r13	; 0x1a
    9712:	e3 8e       	std	Z+27, r14	; 0x1b
    9714:	f4 8e       	std	Z+28, r15	; 0x1c
    9716:	29 89       	ldd	r18, Y+17	; 0x11
    9718:	3a 89       	ldd	r19, Y+18	; 0x12
    971a:	4b 89       	ldd	r20, Y+19	; 0x13
    971c:	5c 89       	ldd	r21, Y+20	; 0x14
    971e:	21 a3       	std	Z+33, r18	; 0x21
    9720:	32 a3       	std	Z+34, r19	; 0x22
    9722:	43 a3       	std	Z+35, r20	; 0x23
    9724:	54 a3       	std	Z+36, r21	; 0x24
    9726:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9728:	9e 8d       	ldd	r25, Y+30	; 0x1e
    972a:	af 8d       	ldd	r26, Y+31	; 0x1f
    972c:	b8 a1       	ldd	r27, Y+32	; 0x20
    972e:	28 0f       	add	r18, r24
    9730:	39 1f       	adc	r19, r25
    9732:	4a 1f       	adc	r20, r26
    9734:	5b 1f       	adc	r21, r27
    9736:	2d 8f       	std	Y+29, r18	; 0x1d
    9738:	3e 8f       	std	Y+30, r19	; 0x1e
    973a:	4f 8f       	std	Y+31, r20	; 0x1f
    973c:	58 a3       	std	Y+32, r21	; 0x20
    973e:	25 a3       	std	Z+37, r18	; 0x25
    9740:	36 a3       	std	Z+38, r19	; 0x26
    9742:	47 a3       	std	Z+39, r20	; 0x27
    9744:	50 a7       	std	Z+40, r21	; 0x28
    9746:	49 89       	ldd	r20, Y+17	; 0x11
    9748:	5a 89       	ldd	r21, Y+18	; 0x12
    974a:	6b 89       	ldd	r22, Y+19	; 0x13
    974c:	7c 89       	ldd	r23, Y+20	; 0x14
    974e:	8d 89       	ldd	r24, Y+21	; 0x15
    9750:	9e 89       	ldd	r25, Y+22	; 0x16
    9752:	af 89       	ldd	r26, Y+23	; 0x17
    9754:	b8 8d       	ldd	r27, Y+24	; 0x18
    9756:	48 0f       	add	r20, r24
    9758:	59 1f       	adc	r21, r25
    975a:	6a 1f       	adc	r22, r26
    975c:	7b 1f       	adc	r23, r27
    975e:	45 a7       	std	Z+45, r20	; 0x2d
    9760:	56 a7       	std	Z+46, r21	; 0x2e
    9762:	67 a7       	std	Z+47, r22	; 0x2f
    9764:	70 ab       	std	Z+48, r23	; 0x30
    9766:	f3 e0       	ldi	r31, 0x03	; 3
    9768:	af 16       	cp	r10, r31
    976a:	b1 04       	cpc	r11, r1
    976c:	e9 f4       	brne	.+58     	; 0x97a8 <mount_volume+0x33a>
    976e:	f8 01       	movw	r30, r16
    9770:	e1 5a       	subi	r30, 0xA1	; 161
    9772:	ff 4f       	sbci	r31, 0xFF	; 255
    9774:	80 81       	ld	r24, Z
    9776:	91 81       	ldd	r25, Z+1	; 0x01
    9778:	89 2b       	or	r24, r25
    977a:	09 f0       	breq	.+2      	; 0x977e <mount_volume+0x310>
    977c:	fc ce       	rjmp	.-520    	; 0x9576 <mount_volume+0x108>
    977e:	81 14       	cp	r8, r1
    9780:	91 04       	cpc	r9, r1
    9782:	09 f0       	breq	.+2      	; 0x9786 <mount_volume+0x318>
    9784:	f8 ce       	rjmp	.-528    	; 0x9576 <mount_volume+0x108>
    9786:	c8 01       	movw	r24, r16
    9788:	8f 59       	subi	r24, 0x9F	; 159
    978a:	9f 4f       	sbci	r25, 0xFF	; 255
    978c:	33 da       	rcall	.-2970   	; 0x8bf4 <ld_dword>
    978e:	f8 01       	movw	r30, r16
    9790:	61 a7       	std	Z+41, r22	; 0x29
    9792:	72 a7       	std	Z+42, r23	; 0x2a
    9794:	83 a7       	std	Z+43, r24	; 0x2b
    9796:	94 a7       	std	Z+44, r25	; 0x2c
    9798:	42 e0       	ldi	r20, 0x02	; 2
    979a:	cc 0c       	add	r12, r12
    979c:	dd 1c       	adc	r13, r13
    979e:	ee 1c       	adc	r14, r14
    97a0:	ff 1c       	adc	r15, r15
    97a2:	4a 95       	dec	r20
    97a4:	d1 f7       	brne	.-12     	; 0x979a <mount_volume+0x32c>
    97a6:	33 c0       	rjmp	.+102    	; 0x980e <mount_volume+0x3a0>
    97a8:	81 14       	cp	r8, r1
    97aa:	91 04       	cpc	r9, r1
    97ac:	09 f4       	brne	.+2      	; 0x97b0 <mount_volume+0x342>
    97ae:	e3 ce       	rjmp	.-570    	; 0x9576 <mount_volume+0x108>
    97b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    97b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    97b4:	af 8d       	ldd	r26, Y+31	; 0x1f
    97b6:	b8 a1       	ldd	r27, Y+32	; 0x20
    97b8:	29 8d       	ldd	r18, Y+25	; 0x19
    97ba:	3a 8d       	ldd	r19, Y+26	; 0x1a
    97bc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    97be:	5c 8d       	ldd	r21, Y+28	; 0x1c
    97c0:	82 0f       	add	r24, r18
    97c2:	93 1f       	adc	r25, r19
    97c4:	a4 1f       	adc	r26, r20
    97c6:	b5 1f       	adc	r27, r21
    97c8:	f8 01       	movw	r30, r16
    97ca:	81 a7       	std	Z+41, r24	; 0x29
    97cc:	92 a7       	std	Z+42, r25	; 0x2a
    97ce:	a3 a7       	std	Z+43, r26	; 0x2b
    97d0:	b4 a7       	std	Z+44, r27	; 0x2c
    97d2:	f2 e0       	ldi	r31, 0x02	; 2
    97d4:	af 16       	cp	r10, r31
    97d6:	b1 04       	cpc	r11, r1
    97d8:	29 f4       	brne	.+10     	; 0x97e4 <mount_volume+0x376>
    97da:	cc 0c       	add	r12, r12
    97dc:	dd 1c       	adc	r13, r13
    97de:	ee 1c       	adc	r14, r14
    97e0:	ff 1c       	adc	r15, r15
    97e2:	15 c0       	rjmp	.+42     	; 0x980e <mount_volume+0x3a0>
    97e4:	a3 e0       	ldi	r26, 0x03	; 3
    97e6:	b0 e0       	ldi	r27, 0x00	; 0
    97e8:	a7 01       	movw	r20, r14
    97ea:	96 01       	movw	r18, r12
    97ec:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    97f0:	dc 01       	movw	r26, r24
    97f2:	cb 01       	movw	r24, r22
    97f4:	b6 95       	lsr	r27
    97f6:	a7 95       	ror	r26
    97f8:	97 95       	ror	r25
    97fa:	87 95       	ror	r24
    97fc:	21 e0       	ldi	r18, 0x01	; 1
    97fe:	c2 22       	and	r12, r18
    9800:	dd 24       	eor	r13, r13
    9802:	ee 24       	eor	r14, r14
    9804:	ff 24       	eor	r15, r15
    9806:	c8 0e       	add	r12, r24
    9808:	d9 1e       	adc	r13, r25
    980a:	ea 1e       	adc	r14, r26
    980c:	fb 1e       	adc	r15, r27
    980e:	3f ef       	ldi	r19, 0xFF	; 255
    9810:	c3 0e       	add	r12, r19
    9812:	31 e0       	ldi	r19, 0x01	; 1
    9814:	d3 1e       	adc	r13, r19
    9816:	e1 1c       	adc	r14, r1
    9818:	f1 1c       	adc	r15, r1
    981a:	89 e0       	ldi	r24, 0x09	; 9
    981c:	f6 94       	lsr	r15
    981e:	e7 94       	ror	r14
    9820:	d7 94       	ror	r13
    9822:	c7 94       	ror	r12
    9824:	8a 95       	dec	r24
    9826:	d1 f7       	brne	.-12     	; 0x981c <mount_volume+0x3ae>
    9828:	4c 14       	cp	r4, r12
    982a:	5d 04       	cpc	r5, r13
    982c:	6e 04       	cpc	r6, r14
    982e:	7f 04       	cpc	r7, r15
    9830:	08 f4       	brcc	.+2      	; 0x9834 <mount_volume+0x3c6>
    9832:	a1 ce       	rjmp	.-702    	; 0x9576 <mount_volume+0x108>
    9834:	8f ef       	ldi	r24, 0xFF	; 255
    9836:	9f ef       	ldi	r25, 0xFF	; 255
    9838:	dc 01       	movw	r26, r24
    983a:	f8 01       	movw	r30, r16
    983c:	81 8b       	std	Z+17, r24	; 0x11
    983e:	92 8b       	std	Z+18, r25	; 0x12
    9840:	a3 8b       	std	Z+19, r26	; 0x13
    9842:	b4 8b       	std	Z+20, r27	; 0x14
    9844:	85 87       	std	Z+13, r24	; 0x0d
    9846:	96 87       	std	Z+14, r25	; 0x0e
    9848:	a7 87       	std	Z+15, r26	; 0x0f
    984a:	b0 8b       	std	Z+16, r27	; 0x10
    984c:	80 e8       	ldi	r24, 0x80	; 128
    984e:	84 83       	std	Z+4, r24	; 0x04
    9850:	f3 e0       	ldi	r31, 0x03	; 3
    9852:	af 16       	cp	r10, r31
    9854:	b1 04       	cpc	r11, r1
    9856:	09 f0       	breq	.+2      	; 0x985a <mount_volume+0x3ec>
    9858:	3f c0       	rjmp	.+126    	; 0x98d8 <mount_volume+0x46a>
    985a:	f8 01       	movw	r30, r16
    985c:	eb 59       	subi	r30, 0x9B	; 155
    985e:	ff 4f       	sbci	r31, 0xFF	; 255
    9860:	80 81       	ld	r24, Z
    9862:	91 81       	ldd	r25, Z+1	; 0x01
    9864:	01 97       	sbiw	r24, 0x01	; 1
    9866:	c1 f5       	brne	.+112    	; 0x98d8 <mount_volume+0x46a>
    9868:	49 89       	ldd	r20, Y+17	; 0x11
    986a:	5a 89       	ldd	r21, Y+18	; 0x12
    986c:	6b 89       	ldd	r22, Y+19	; 0x13
    986e:	7c 89       	ldd	r23, Y+20	; 0x14
    9870:	4f 5f       	subi	r20, 0xFF	; 255
    9872:	5f 4f       	sbci	r21, 0xFF	; 255
    9874:	6f 4f       	sbci	r22, 0xFF	; 255
    9876:	7f 4f       	sbci	r23, 0xFF	; 255
    9878:	c8 01       	movw	r24, r16
    987a:	7e dd       	rcall	.-1284   	; 0x9378 <move_window>
    987c:	89 2b       	or	r24, r25
    987e:	61 f5       	brne	.+88     	; 0x98d8 <mount_volume+0x46a>
    9880:	f8 01       	movw	r30, r16
    9882:	14 82       	std	Z+4, r1	; 0x04
    9884:	ed 5c       	subi	r30, 0xCD	; 205
    9886:	fd 4f       	sbci	r31, 0xFD	; 253
    9888:	80 81       	ld	r24, Z
    988a:	91 81       	ldd	r25, Z+1	; 0x01
    988c:	85 35       	cpi	r24, 0x55	; 85
    988e:	9a 4a       	sbci	r25, 0xAA	; 170
    9890:	19 f5       	brne	.+70     	; 0x98d8 <mount_volume+0x46a>
    9892:	c8 01       	movw	r24, r16
    9894:	c5 96       	adiw	r24, 0x35	; 53
    9896:	ae d9       	rcall	.-3236   	; 0x8bf4 <ld_dword>
    9898:	62 35       	cpi	r22, 0x52	; 82
    989a:	72 45       	sbci	r23, 0x52	; 82
    989c:	81 46       	sbci	r24, 0x61	; 97
    989e:	91 44       	sbci	r25, 0x41	; 65
    98a0:	d9 f4       	brne	.+54     	; 0x98d8 <mount_volume+0x46a>
    98a2:	c8 01       	movw	r24, r16
    98a4:	87 5e       	subi	r24, 0xE7	; 231
    98a6:	9d 4f       	sbci	r25, 0xFD	; 253
    98a8:	a5 d9       	rcall	.-3254   	; 0x8bf4 <ld_dword>
    98aa:	62 37       	cpi	r22, 0x72	; 114
    98ac:	72 47       	sbci	r23, 0x72	; 114
    98ae:	81 44       	sbci	r24, 0x41	; 65
    98b0:	91 46       	sbci	r25, 0x61	; 97
    98b2:	91 f4       	brne	.+36     	; 0x98d8 <mount_volume+0x46a>
    98b4:	c8 01       	movw	r24, r16
    98b6:	83 5e       	subi	r24, 0xE3	; 227
    98b8:	9d 4f       	sbci	r25, 0xFD	; 253
    98ba:	9c d9       	rcall	.-3272   	; 0x8bf4 <ld_dword>
    98bc:	f8 01       	movw	r30, r16
    98be:	61 8b       	std	Z+17, r22	; 0x11
    98c0:	72 8b       	std	Z+18, r23	; 0x12
    98c2:	83 8b       	std	Z+19, r24	; 0x13
    98c4:	94 8b       	std	Z+20, r25	; 0x14
    98c6:	c8 01       	movw	r24, r16
    98c8:	8f 5d       	subi	r24, 0xDF	; 223
    98ca:	9d 4f       	sbci	r25, 0xFD	; 253
    98cc:	93 d9       	rcall	.-3290   	; 0x8bf4 <ld_dword>
    98ce:	f8 01       	movw	r30, r16
    98d0:	65 87       	std	Z+13, r22	; 0x0d
    98d2:	76 87       	std	Z+14, r23	; 0x0e
    98d4:	87 87       	std	Z+15, r24	; 0x0f
    98d6:	90 8b       	std	Z+16, r25	; 0x10
    98d8:	d8 01       	movw	r26, r16
    98da:	ac 92       	st	X, r10
    98dc:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <Fsid>
    98e0:	90 91 28 18 	lds	r25, 0x1828	; 0x801828 <Fsid+0x1>
    98e4:	01 96       	adiw	r24, 0x01	; 1
    98e6:	90 93 28 18 	sts	0x1828, r25	; 0x801828 <Fsid+0x1>
    98ea:	80 93 27 18 	sts	0x1827, r24	; 0x801827 <Fsid>
    98ee:	f8 01       	movw	r30, r16
    98f0:	96 83       	std	Z+6, r25	; 0x06
    98f2:	85 83       	std	Z+5, r24	; 0x05
    98f4:	15 8a       	std	Z+21, r1	; 0x15
    98f6:	16 8a       	std	Z+22, r1	; 0x16
    98f8:	17 8a       	std	Z+23, r1	; 0x17
    98fa:	10 8e       	std	Z+24, r1	; 0x18
    98fc:	06 c0       	rjmp	.+12     	; 0x990a <mount_volume+0x49c>
    98fe:	8b e0       	ldi	r24, 0x0B	; 11
    9900:	90 e0       	ldi	r25, 0x00	; 0
    9902:	0b c0       	rjmp	.+22     	; 0x991a <mount_volume+0x4ac>
    9904:	8c e0       	ldi	r24, 0x0C	; 12
    9906:	90 e0       	ldi	r25, 0x00	; 0
    9908:	08 c0       	rjmp	.+16     	; 0x991a <mount_volume+0x4ac>
    990a:	80 e0       	ldi	r24, 0x00	; 0
    990c:	90 e0       	ldi	r25, 0x00	; 0
    990e:	05 c0       	rjmp	.+10     	; 0x991a <mount_volume+0x4ac>
    9910:	83 e0       	ldi	r24, 0x03	; 3
    9912:	90 e0       	ldi	r25, 0x00	; 0
    9914:	02 c0       	rjmp	.+4      	; 0x991a <mount_volume+0x4ac>
    9916:	81 e0       	ldi	r24, 0x01	; 1
    9918:	90 e0       	ldi	r25, 0x00	; 0
    991a:	a0 96       	adiw	r28, 0x20	; 32
    991c:	e0 e1       	ldi	r30, 0x10	; 16
    991e:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x4>

00009922 <put_fat>:
    9922:	a6 e0       	ldi	r26, 0x06	; 6
    9924:	b0 e0       	ldi	r27, 0x00	; 0
    9926:	e7 e9       	ldi	r30, 0x97	; 151
    9928:	fc e4       	ldi	r31, 0x4C	; 76
    992a:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    992e:	42 30       	cpi	r20, 0x02	; 2
    9930:	51 05       	cpc	r21, r1
    9932:	61 05       	cpc	r22, r1
    9934:	71 05       	cpc	r23, r1
    9936:	08 f4       	brcc	.+2      	; 0x993a <put_fat+0x18>
    9938:	e5 c0       	rjmp	.+458    	; 0x9b04 <put_fat+0x1e2>
    993a:	fc 01       	movw	r30, r24
    993c:	c1 8c       	ldd	r12, Z+25	; 0x19
    993e:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9940:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9942:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9944:	4c 15       	cp	r20, r12
    9946:	5d 05       	cpc	r21, r13
    9948:	6e 05       	cpc	r22, r14
    994a:	7f 05       	cpc	r23, r15
    994c:	08 f0       	brcs	.+2      	; 0x9950 <put_fat+0x2e>
    994e:	da c0       	rjmp	.+436    	; 0x9b04 <put_fat+0x1e2>
    9950:	28 01       	movw	r4, r16
    9952:	39 01       	movw	r6, r18
    9954:	6a 01       	movw	r12, r20
    9956:	7b 01       	movw	r14, r22
    9958:	9e 83       	std	Y+6, r25	; 0x06
    995a:	8d 83       	std	Y+5, r24	; 0x05
    995c:	80 81       	ld	r24, Z
    995e:	82 30       	cpi	r24, 0x02	; 2
    9960:	09 f4       	brne	.+2      	; 0x9964 <put_fat+0x42>
    9962:	73 c0       	rjmp	.+230    	; 0x9a4a <put_fat+0x128>
    9964:	83 30       	cpi	r24, 0x03	; 3
    9966:	09 f4       	brne	.+2      	; 0x996a <put_fat+0x48>
    9968:	92 c0       	rjmp	.+292    	; 0x9a8e <put_fat+0x16c>
    996a:	81 30       	cpi	r24, 0x01	; 1
    996c:	09 f0       	breq	.+2      	; 0x9970 <put_fat+0x4e>
    996e:	ca c0       	rjmp	.+404    	; 0x9b04 <put_fat+0x1e2>
    9970:	4a 01       	movw	r8, r20
    9972:	96 94       	lsr	r9
    9974:	87 94       	ror	r8
    9976:	84 0e       	add	r8, r20
    9978:	95 1e       	adc	r9, r21
    997a:	c4 01       	movw	r24, r8
    997c:	89 2f       	mov	r24, r25
    997e:	99 27       	eor	r25, r25
    9980:	86 95       	lsr	r24
    9982:	45 a1       	ldd	r20, Z+37	; 0x25
    9984:	56 a1       	ldd	r21, Z+38	; 0x26
    9986:	67 a1       	ldd	r22, Z+39	; 0x27
    9988:	70 a5       	ldd	r23, Z+40	; 0x28
    998a:	48 0f       	add	r20, r24
    998c:	59 1f       	adc	r21, r25
    998e:	61 1d       	adc	r22, r1
    9990:	71 1d       	adc	r23, r1
    9992:	cf 01       	movw	r24, r30
    9994:	f1 dc       	rcall	.-1566   	; 0x9378 <move_window>
    9996:	5c 01       	movw	r10, r24
    9998:	89 2b       	or	r24, r25
    999a:	09 f0       	breq	.+2      	; 0x999e <put_fat+0x7c>
    999c:	b6 c0       	rjmp	.+364    	; 0x9b0a <put_fat+0x1e8>
    999e:	2d 80       	ldd	r2, Y+5	; 0x05
    99a0:	3e 80       	ldd	r3, Y+6	; 0x06
    99a2:	f5 e3       	ldi	r31, 0x35	; 53
    99a4:	2f 0e       	add	r2, r31
    99a6:	31 1c       	adc	r3, r1
    99a8:	84 01       	movw	r16, r8
    99aa:	0f 5f       	subi	r16, 0xFF	; 255
    99ac:	1f 4f       	sbci	r17, 0xFF	; 255
    99ae:	21 e0       	ldi	r18, 0x01	; 1
    99b0:	92 22       	and	r9, r18
    99b2:	f1 01       	movw	r30, r2
    99b4:	e8 0d       	add	r30, r8
    99b6:	f9 1d       	adc	r31, r9
    99b8:	d7 01       	movw	r26, r14
    99ba:	c6 01       	movw	r24, r12
    99bc:	81 70       	andi	r24, 0x01	; 1
    99be:	99 27       	eor	r25, r25
    99c0:	aa 27       	eor	r26, r26
    99c2:	bb 27       	eor	r27, r27
    99c4:	89 83       	std	Y+1, r24	; 0x01
    99c6:	9a 83       	std	Y+2, r25	; 0x02
    99c8:	ab 83       	std	Y+3, r26	; 0x03
    99ca:	bc 83       	std	Y+4, r27	; 0x04
    99cc:	c0 fe       	sbrs	r12, 0
    99ce:	09 c0       	rjmp	.+18     	; 0x99e2 <put_fat+0xc0>
    99d0:	80 81       	ld	r24, Z
    99d2:	28 2f       	mov	r18, r24
    99d4:	2f 70       	andi	r18, 0x0F	; 15
    99d6:	a0 e1       	ldi	r26, 0x10	; 16
    99d8:	4a 9e       	mul	r4, r26
    99da:	c0 01       	movw	r24, r0
    99dc:	11 24       	eor	r1, r1
    99de:	82 2b       	or	r24, r18
    99e0:	01 c0       	rjmp	.+2      	; 0x99e4 <put_fat+0xc2>
    99e2:	84 2d       	mov	r24, r4
    99e4:	80 83       	st	Z, r24
    99e6:	81 e0       	ldi	r24, 0x01	; 1
    99e8:	ed 81       	ldd	r30, Y+5	; 0x05
    99ea:	fe 81       	ldd	r31, Y+6	; 0x06
    99ec:	83 83       	std	Z+3, r24	; 0x03
    99ee:	45 a1       	ldd	r20, Z+37	; 0x25
    99f0:	56 a1       	ldd	r21, Z+38	; 0x26
    99f2:	67 a1       	ldd	r22, Z+39	; 0x27
    99f4:	70 a5       	ldd	r23, Z+40	; 0x28
    99f6:	c8 01       	movw	r24, r16
    99f8:	89 2f       	mov	r24, r25
    99fa:	99 27       	eor	r25, r25
    99fc:	86 95       	lsr	r24
    99fe:	48 0f       	add	r20, r24
    9a00:	59 1f       	adc	r21, r25
    9a02:	61 1d       	adc	r22, r1
    9a04:	71 1d       	adc	r23, r1
    9a06:	cf 01       	movw	r24, r30
    9a08:	b7 dc       	rcall	.-1682   	; 0x9378 <move_window>
    9a0a:	5c 01       	movw	r10, r24
    9a0c:	89 2b       	or	r24, r25
    9a0e:	09 f0       	breq	.+2      	; 0x9a12 <put_fat+0xf0>
    9a10:	7c c0       	rjmp	.+248    	; 0x9b0a <put_fat+0x1e8>
    9a12:	11 70       	andi	r17, 0x01	; 1
    9a14:	f1 01       	movw	r30, r2
    9a16:	e0 0f       	add	r30, r16
    9a18:	f1 1f       	adc	r31, r17
    9a1a:	89 81       	ldd	r24, Y+1	; 0x01
    9a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    9a1e:	ab 81       	ldd	r26, Y+3	; 0x03
    9a20:	bc 81       	ldd	r27, Y+4	; 0x04
    9a22:	89 2b       	or	r24, r25
    9a24:	8a 2b       	or	r24, r26
    9a26:	8b 2b       	or	r24, r27
    9a28:	41 f0       	breq	.+16     	; 0x9a3a <put_fat+0x118>
    9a2a:	54 e0       	ldi	r21, 0x04	; 4
    9a2c:	76 94       	lsr	r7
    9a2e:	67 94       	ror	r6
    9a30:	57 94       	ror	r5
    9a32:	47 94       	ror	r4
    9a34:	5a 95       	dec	r21
    9a36:	d1 f7       	brne	.-12     	; 0x9a2c <put_fat+0x10a>
    9a38:	06 c0       	rjmp	.+12     	; 0x9a46 <put_fat+0x124>
    9a3a:	00 81       	ld	r16, Z
    9a3c:	00 7f       	andi	r16, 0xF0	; 240
    9a3e:	85 2d       	mov	r24, r5
    9a40:	8f 70       	andi	r24, 0x0F	; 15
    9a42:	40 2e       	mov	r4, r16
    9a44:	48 2a       	or	r4, r24
    9a46:	40 82       	st	Z, r4
    9a48:	58 c0       	rjmp	.+176    	; 0x9afa <put_fat+0x1d8>
    9a4a:	77 27       	eor	r23, r23
    9a4c:	6f 2d       	mov	r22, r15
    9a4e:	5e 2d       	mov	r21, r14
    9a50:	4d 2d       	mov	r20, r13
    9a52:	ed 81       	ldd	r30, Y+5	; 0x05
    9a54:	fe 81       	ldd	r31, Y+6	; 0x06
    9a56:	85 a1       	ldd	r24, Z+37	; 0x25
    9a58:	96 a1       	ldd	r25, Z+38	; 0x26
    9a5a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a5c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a5e:	48 0f       	add	r20, r24
    9a60:	59 1f       	adc	r21, r25
    9a62:	6a 1f       	adc	r22, r26
    9a64:	7b 1f       	adc	r23, r27
    9a66:	cf 01       	movw	r24, r30
    9a68:	87 dc       	rcall	.-1778   	; 0x9378 <move_window>
    9a6a:	5c 01       	movw	r10, r24
    9a6c:	89 2b       	or	r24, r25
    9a6e:	09 f0       	breq	.+2      	; 0x9a72 <put_fat+0x150>
    9a70:	4c c0       	rjmp	.+152    	; 0x9b0a <put_fat+0x1e8>
    9a72:	ed 81       	ldd	r30, Y+5	; 0x05
    9a74:	fe 81       	ldd	r31, Y+6	; 0x06
    9a76:	f5 96       	adiw	r30, 0x35	; 53
    9a78:	cc 0c       	add	r12, r12
    9a7a:	dd 1c       	adc	r13, r13
    9a7c:	e8 94       	clt
    9a7e:	c0 f8       	bld	r12, 0
    9a80:	21 e0       	ldi	r18, 0x01	; 1
    9a82:	d2 22       	and	r13, r18
    9a84:	ec 0d       	add	r30, r12
    9a86:	fd 1d       	adc	r31, r13
    9a88:	40 82       	st	Z, r4
    9a8a:	51 82       	std	Z+1, r5	; 0x01
    9a8c:	36 c0       	rjmp	.+108    	; 0x9afa <put_fat+0x1d8>
    9a8e:	ed 81       	ldd	r30, Y+5	; 0x05
    9a90:	fe 81       	ldd	r31, Y+6	; 0x06
    9a92:	85 a1       	ldd	r24, Z+37	; 0x25
    9a94:	96 a1       	ldd	r25, Z+38	; 0x26
    9a96:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a98:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a9a:	27 e0       	ldi	r18, 0x07	; 7
    9a9c:	76 95       	lsr	r23
    9a9e:	67 95       	ror	r22
    9aa0:	57 95       	ror	r21
    9aa2:	47 95       	ror	r20
    9aa4:	2a 95       	dec	r18
    9aa6:	d1 f7       	brne	.-12     	; 0x9a9c <put_fat+0x17a>
    9aa8:	48 0f       	add	r20, r24
    9aaa:	59 1f       	adc	r21, r25
    9aac:	6a 1f       	adc	r22, r26
    9aae:	7b 1f       	adc	r23, r27
    9ab0:	cf 01       	movw	r24, r30
    9ab2:	62 dc       	rcall	.-1852   	; 0x9378 <move_window>
    9ab4:	5c 01       	movw	r10, r24
    9ab6:	89 2b       	or	r24, r25
    9ab8:	41 f5       	brne	.+80     	; 0x9b0a <put_fat+0x1e8>
    9aba:	4d 81       	ldd	r20, Y+5	; 0x05
    9abc:	5e 81       	ldd	r21, Y+6	; 0x06
    9abe:	4b 5c       	subi	r20, 0xCB	; 203
    9ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ac2:	cc 0c       	add	r12, r12
    9ac4:	dd 1c       	adc	r13, r13
    9ac6:	cc 0c       	add	r12, r12
    9ac8:	dd 1c       	adc	r13, r13
    9aca:	fc ef       	ldi	r31, 0xFC	; 252
    9acc:	cf 22       	and	r12, r31
    9ace:	f1 e0       	ldi	r31, 0x01	; 1
    9ad0:	df 22       	and	r13, r31
    9ad2:	c4 0e       	add	r12, r20
    9ad4:	d5 1e       	adc	r13, r21
    9ad6:	c6 01       	movw	r24, r12
    9ad8:	8d d8       	rcall	.-3814   	; 0x8bf4 <ld_dword>
    9ada:	2f e0       	ldi	r18, 0x0F	; 15
    9adc:	72 22       	and	r7, r18
    9ade:	dc 01       	movw	r26, r24
    9ae0:	cb 01       	movw	r24, r22
    9ae2:	88 27       	eor	r24, r24
    9ae4:	99 27       	eor	r25, r25
    9ae6:	aa 27       	eor	r26, r26
    9ae8:	b0 7f       	andi	r27, 0xF0	; 240
    9aea:	b3 01       	movw	r22, r6
    9aec:	a2 01       	movw	r20, r4
    9aee:	48 2b       	or	r20, r24
    9af0:	59 2b       	or	r21, r25
    9af2:	6a 2b       	or	r22, r26
    9af4:	7b 2b       	or	r23, r27
    9af6:	c6 01       	movw	r24, r12
    9af8:	92 d8       	rcall	.-3804   	; 0x8c1e <st_dword>
    9afa:	81 e0       	ldi	r24, 0x01	; 1
    9afc:	ed 81       	ldd	r30, Y+5	; 0x05
    9afe:	fe 81       	ldd	r31, Y+6	; 0x06
    9b00:	83 83       	std	Z+3, r24	; 0x03
    9b02:	03 c0       	rjmp	.+6      	; 0x9b0a <put_fat+0x1e8>
    9b04:	82 e0       	ldi	r24, 0x02	; 2
    9b06:	a8 2e       	mov	r10, r24
    9b08:	b1 2c       	mov	r11, r1
    9b0a:	c5 01       	movw	r24, r10
    9b0c:	26 96       	adiw	r28, 0x06	; 6
    9b0e:	e2 e1       	ldi	r30, 0x12	; 18
    9b10:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00009b14 <get_fat.isra.9>:
    9b14:	a0 e0       	ldi	r26, 0x00	; 0
    9b16:	b0 e0       	ldi	r27, 0x00	; 0
    9b18:	e0 e9       	ldi	r30, 0x90	; 144
    9b1a:	fd e4       	ldi	r31, 0x4D	; 77
    9b1c:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
    9b20:	42 30       	cpi	r20, 0x02	; 2
    9b22:	51 05       	cpc	r21, r1
    9b24:	61 05       	cpc	r22, r1
    9b26:	71 05       	cpc	r23, r1
    9b28:	08 f4       	brcc	.+2      	; 0x9b2c <get_fat.isra.9+0x18>
    9b2a:	9f c0       	rjmp	.+318    	; 0x9c6a <get_fat.isra.9+0x156>
    9b2c:	fc 01       	movw	r30, r24
    9b2e:	01 8d       	ldd	r16, Z+25	; 0x19
    9b30:	12 8d       	ldd	r17, Z+26	; 0x1a
    9b32:	23 8d       	ldd	r18, Z+27	; 0x1b
    9b34:	34 8d       	ldd	r19, Z+28	; 0x1c
    9b36:	40 17       	cp	r20, r16
    9b38:	51 07       	cpc	r21, r17
    9b3a:	62 07       	cpc	r22, r18
    9b3c:	73 07       	cpc	r23, r19
    9b3e:	08 f0       	brcs	.+2      	; 0x9b42 <get_fat.isra.9+0x2e>
    9b40:	94 c0       	rjmp	.+296    	; 0x9c6a <get_fat.isra.9+0x156>
    9b42:	6a 01       	movw	r12, r20
    9b44:	7b 01       	movw	r14, r22
    9b46:	8c 01       	movw	r16, r24
    9b48:	80 81       	ld	r24, Z
    9b4a:	82 30       	cpi	r24, 0x02	; 2
    9b4c:	09 f4       	brne	.+2      	; 0x9b50 <get_fat.isra.9+0x3c>
    9b4e:	4b c0       	rjmp	.+150    	; 0x9be6 <get_fat.isra.9+0xd2>
    9b50:	83 30       	cpi	r24, 0x03	; 3
    9b52:	09 f4       	brne	.+2      	; 0x9b56 <get_fat.isra.9+0x42>
    9b54:	67 c0       	rjmp	.+206    	; 0x9c24 <get_fat.isra.9+0x110>
    9b56:	81 30       	cpi	r24, 0x01	; 1
    9b58:	09 f0       	breq	.+2      	; 0x9b5c <get_fat.isra.9+0x48>
    9b5a:	87 c0       	rjmp	.+270    	; 0x9c6a <get_fat.isra.9+0x156>
    9b5c:	ea 01       	movw	r28, r20
    9b5e:	d6 95       	lsr	r29
    9b60:	c7 95       	ror	r28
    9b62:	cc 0d       	add	r28, r12
    9b64:	dd 1d       	adc	r29, r13
    9b66:	ce 01       	movw	r24, r28
    9b68:	89 2f       	mov	r24, r25
    9b6a:	99 27       	eor	r25, r25
    9b6c:	86 95       	lsr	r24
    9b6e:	45 a1       	ldd	r20, Z+37	; 0x25
    9b70:	56 a1       	ldd	r21, Z+38	; 0x26
    9b72:	67 a1       	ldd	r22, Z+39	; 0x27
    9b74:	70 a5       	ldd	r23, Z+40	; 0x28
    9b76:	48 0f       	add	r20, r24
    9b78:	59 1f       	adc	r21, r25
    9b7a:	61 1d       	adc	r22, r1
    9b7c:	71 1d       	adc	r23, r1
    9b7e:	cf 01       	movw	r24, r30
    9b80:	fb db       	rcall	.-2058   	; 0x9378 <move_window>
    9b82:	89 2b       	or	r24, r25
    9b84:	21 f0       	breq	.+8      	; 0x9b8e <get_fat.isra.9+0x7a>
    9b86:	6f ef       	ldi	r22, 0xFF	; 255
    9b88:	7f ef       	ldi	r23, 0xFF	; 255
    9b8a:	cb 01       	movw	r24, r22
    9b8c:	72 c0       	rjmp	.+228    	; 0x9c72 <get_fat.isra.9+0x15e>
    9b8e:	5e 01       	movw	r10, r28
    9b90:	ff ef       	ldi	r31, 0xFF	; 255
    9b92:	af 1a       	sub	r10, r31
    9b94:	bf 0a       	sbc	r11, r31
    9b96:	d1 70       	andi	r29, 0x01	; 1
    9b98:	c0 0f       	add	r28, r16
    9b9a:	d1 1f       	adc	r29, r17
    9b9c:	cd a9       	ldd	r28, Y+53	; 0x35
    9b9e:	c5 01       	movw	r24, r10
    9ba0:	89 2f       	mov	r24, r25
    9ba2:	99 27       	eor	r25, r25
    9ba4:	86 95       	lsr	r24
    9ba6:	f8 01       	movw	r30, r16
    9ba8:	45 a1       	ldd	r20, Z+37	; 0x25
    9baa:	56 a1       	ldd	r21, Z+38	; 0x26
    9bac:	67 a1       	ldd	r22, Z+39	; 0x27
    9bae:	70 a5       	ldd	r23, Z+40	; 0x28
    9bb0:	48 0f       	add	r20, r24
    9bb2:	59 1f       	adc	r21, r25
    9bb4:	61 1d       	adc	r22, r1
    9bb6:	71 1d       	adc	r23, r1
    9bb8:	c8 01       	movw	r24, r16
    9bba:	de db       	rcall	.-2116   	; 0x9378 <move_window>
    9bbc:	89 2b       	or	r24, r25
    9bbe:	19 f7       	brne	.-58     	; 0x9b86 <get_fat.isra.9+0x72>
    9bc0:	f1 e0       	ldi	r31, 0x01	; 1
    9bc2:	bf 22       	and	r11, r31
    9bc4:	f8 01       	movw	r30, r16
    9bc6:	ea 0d       	add	r30, r10
    9bc8:	fb 1d       	adc	r31, r11
    9bca:	85 a9       	ldd	r24, Z+53	; 0x35
    9bcc:	6c 2f       	mov	r22, r28
    9bce:	70 e0       	ldi	r23, 0x00	; 0
    9bd0:	78 2b       	or	r23, r24
    9bd2:	c0 fe       	sbrs	r12, 0
    9bd4:	06 c0       	rjmp	.+12     	; 0x9be2 <get_fat.isra.9+0xce>
    9bd6:	54 e0       	ldi	r21, 0x04	; 4
    9bd8:	76 95       	lsr	r23
    9bda:	67 95       	ror	r22
    9bdc:	5a 95       	dec	r21
    9bde:	e1 f7       	brne	.-8      	; 0x9bd8 <get_fat.isra.9+0xc4>
    9be0:	1e c0       	rjmp	.+60     	; 0x9c1e <get_fat.isra.9+0x10a>
    9be2:	7f 70       	andi	r23, 0x0F	; 15
    9be4:	1c c0       	rjmp	.+56     	; 0x9c1e <get_fat.isra.9+0x10a>
    9be6:	77 27       	eor	r23, r23
    9be8:	6f 2d       	mov	r22, r15
    9bea:	5e 2d       	mov	r21, r14
    9bec:	4d 2d       	mov	r20, r13
    9bee:	85 a1       	ldd	r24, Z+37	; 0x25
    9bf0:	96 a1       	ldd	r25, Z+38	; 0x26
    9bf2:	a7 a1       	ldd	r26, Z+39	; 0x27
    9bf4:	b0 a5       	ldd	r27, Z+40	; 0x28
    9bf6:	48 0f       	add	r20, r24
    9bf8:	59 1f       	adc	r21, r25
    9bfa:	6a 1f       	adc	r22, r26
    9bfc:	7b 1f       	adc	r23, r27
    9bfe:	cf 01       	movw	r24, r30
    9c00:	bb db       	rcall	.-2186   	; 0x9378 <move_window>
    9c02:	89 2b       	or	r24, r25
    9c04:	09 f0       	breq	.+2      	; 0x9c08 <get_fat.isra.9+0xf4>
    9c06:	bf cf       	rjmp	.-130    	; 0x9b86 <get_fat.isra.9+0x72>
    9c08:	cc 0c       	add	r12, r12
    9c0a:	dd 1c       	adc	r13, r13
    9c0c:	e8 94       	clt
    9c0e:	c0 f8       	bld	r12, 0
    9c10:	f1 e0       	ldi	r31, 0x01	; 1
    9c12:	df 22       	and	r13, r31
    9c14:	f8 01       	movw	r30, r16
    9c16:	ec 0d       	add	r30, r12
    9c18:	fd 1d       	adc	r31, r13
    9c1a:	65 a9       	ldd	r22, Z+53	; 0x35
    9c1c:	76 a9       	ldd	r23, Z+54	; 0x36
    9c1e:	80 e0       	ldi	r24, 0x00	; 0
    9c20:	90 e0       	ldi	r25, 0x00	; 0
    9c22:	27 c0       	rjmp	.+78     	; 0x9c72 <get_fat.isra.9+0x15e>
    9c24:	85 a1       	ldd	r24, Z+37	; 0x25
    9c26:	96 a1       	ldd	r25, Z+38	; 0x26
    9c28:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c2a:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c2c:	27 e0       	ldi	r18, 0x07	; 7
    9c2e:	76 95       	lsr	r23
    9c30:	67 95       	ror	r22
    9c32:	57 95       	ror	r21
    9c34:	47 95       	ror	r20
    9c36:	2a 95       	dec	r18
    9c38:	d1 f7       	brne	.-12     	; 0x9c2e <get_fat.isra.9+0x11a>
    9c3a:	48 0f       	add	r20, r24
    9c3c:	59 1f       	adc	r21, r25
    9c3e:	6a 1f       	adc	r22, r26
    9c40:	7b 1f       	adc	r23, r27
    9c42:	cf 01       	movw	r24, r30
    9c44:	99 db       	rcall	.-2254   	; 0x9378 <move_window>
    9c46:	89 2b       	or	r24, r25
    9c48:	09 f0       	breq	.+2      	; 0x9c4c <get_fat.isra.9+0x138>
    9c4a:	9d cf       	rjmp	.-198    	; 0x9b86 <get_fat.isra.9+0x72>
    9c4c:	0b 5c       	subi	r16, 0xCB	; 203
    9c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    9c50:	cc 0c       	add	r12, r12
    9c52:	dd 1c       	adc	r13, r13
    9c54:	cc 0c       	add	r12, r12
    9c56:	dd 1c       	adc	r13, r13
    9c58:	c6 01       	movw	r24, r12
    9c5a:	8c 7f       	andi	r24, 0xFC	; 252
    9c5c:	91 70       	andi	r25, 0x01	; 1
    9c5e:	80 0f       	add	r24, r16
    9c60:	91 1f       	adc	r25, r17
    9c62:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_dword>
    9c66:	9f 70       	andi	r25, 0x0F	; 15
    9c68:	04 c0       	rjmp	.+8      	; 0x9c72 <get_fat.isra.9+0x15e>
    9c6a:	61 e0       	ldi	r22, 0x01	; 1
    9c6c:	70 e0       	ldi	r23, 0x00	; 0
    9c6e:	80 e0       	ldi	r24, 0x00	; 0
    9c70:	90 e0       	ldi	r25, 0x00	; 0
    9c72:	cd b7       	in	r28, 0x3d	; 61
    9c74:	de b7       	in	r29, 0x3e	; 62
    9c76:	ea e0       	ldi	r30, 0x0A	; 10
    9c78:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

00009c7c <dir_sdi>:
    9c7c:	a0 e0       	ldi	r26, 0x00	; 0
    9c7e:	b0 e0       	ldi	r27, 0x00	; 0
    9c80:	e4 e4       	ldi	r30, 0x44	; 68
    9c82:	fe e4       	ldi	r31, 0x4E	; 78
    9c84:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x4>
    9c88:	ec 01       	movw	r28, r24
    9c8a:	6a 01       	movw	r12, r20
    9c8c:	7b 01       	movw	r14, r22
    9c8e:	41 15       	cp	r20, r1
    9c90:	51 05       	cpc	r21, r1
    9c92:	80 e2       	ldi	r24, 0x20	; 32
    9c94:	68 07       	cpc	r22, r24
    9c96:	71 05       	cpc	r23, r1
    9c98:	18 f0       	brcs	.+6      	; 0x9ca0 <dir_sdi+0x24>
    9c9a:	82 e0       	ldi	r24, 0x02	; 2
    9c9c:	90 e0       	ldi	r25, 0x00	; 0
    9c9e:	aa c0       	rjmp	.+340    	; 0x9df4 <dir_sdi+0x178>
    9ca0:	db 01       	movw	r26, r22
    9ca2:	ca 01       	movw	r24, r20
    9ca4:	8f 71       	andi	r24, 0x1F	; 31
    9ca6:	99 27       	eor	r25, r25
    9ca8:	aa 27       	eor	r26, r26
    9caa:	bb 27       	eor	r27, r27
    9cac:	89 2b       	or	r24, r25
    9cae:	8a 2b       	or	r24, r26
    9cb0:	8b 2b       	or	r24, r27
    9cb2:	99 f7       	brne	.-26     	; 0x9c9a <dir_sdi+0x1e>
    9cb4:	08 81       	ld	r16, Y
    9cb6:	19 81       	ldd	r17, Y+1	; 0x01
    9cb8:	4e 87       	std	Y+14, r20	; 0x0e
    9cba:	5f 87       	std	Y+15, r21	; 0x0f
    9cbc:	68 8b       	std	Y+16, r22	; 0x10
    9cbe:	79 8b       	std	Y+17, r23	; 0x11
    9cc0:	8e 80       	ldd	r8, Y+6	; 0x06
    9cc2:	9f 80       	ldd	r9, Y+7	; 0x07
    9cc4:	a8 84       	ldd	r10, Y+8	; 0x08
    9cc6:	b9 84       	ldd	r11, Y+9	; 0x09
    9cc8:	81 14       	cp	r8, r1
    9cca:	91 04       	cpc	r9, r1
    9ccc:	a1 04       	cpc	r10, r1
    9cce:	b1 04       	cpc	r11, r1
    9cd0:	51 f5       	brne	.+84     	; 0x9d26 <dir_sdi+0xaa>
    9cd2:	f8 01       	movw	r30, r16
    9cd4:	80 81       	ld	r24, Z
    9cd6:	83 30       	cpi	r24, 0x03	; 3
    9cd8:	40 f0       	brcs	.+16     	; 0x9cea <dir_sdi+0x6e>
    9cda:	81 a5       	ldd	r24, Z+41	; 0x29
    9cdc:	92 a5       	ldd	r25, Z+42	; 0x2a
    9cde:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ce0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9ce2:	00 97       	sbiw	r24, 0x00	; 0
    9ce4:	a1 05       	cpc	r26, r1
    9ce6:	b1 05       	cpc	r27, r1
    9ce8:	e1 f4       	brne	.+56     	; 0x9d22 <dir_sdi+0xa6>
    9cea:	f8 01       	movw	r30, r16
    9cec:	87 81       	ldd	r24, Z+7	; 0x07
    9cee:	90 85       	ldd	r25, Z+8	; 0x08
    9cf0:	a0 e0       	ldi	r26, 0x00	; 0
    9cf2:	b0 e0       	ldi	r27, 0x00	; 0
    9cf4:	b7 01       	movw	r22, r14
    9cf6:	a6 01       	movw	r20, r12
    9cf8:	25 e0       	ldi	r18, 0x05	; 5
    9cfa:	76 95       	lsr	r23
    9cfc:	67 95       	ror	r22
    9cfe:	57 95       	ror	r21
    9d00:	47 95       	ror	r20
    9d02:	2a 95       	dec	r18
    9d04:	d1 f7       	brne	.-12     	; 0x9cfa <dir_sdi+0x7e>
    9d06:	48 17       	cp	r20, r24
    9d08:	59 07       	cpc	r21, r25
    9d0a:	6a 07       	cpc	r22, r26
    9d0c:	7b 07       	cpc	r23, r27
    9d0e:	28 f6       	brcc	.-118    	; 0x9c9a <dir_sdi+0x1e>
    9d10:	81 a5       	ldd	r24, Z+41	; 0x29
    9d12:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d14:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d16:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d18:	8e 8b       	std	Y+22, r24	; 0x16
    9d1a:	9f 8b       	std	Y+23, r25	; 0x17
    9d1c:	a8 8f       	std	Y+24, r26	; 0x18
    9d1e:	b9 8f       	std	Y+25, r27	; 0x19
    9d20:	3e c0       	rjmp	.+124    	; 0x9d9e <dir_sdi+0x122>
    9d22:	4c 01       	movw	r8, r24
    9d24:	5d 01       	movw	r10, r26
    9d26:	f8 01       	movw	r30, r16
    9d28:	41 84       	ldd	r4, Z+9	; 0x09
    9d2a:	52 84       	ldd	r5, Z+10	; 0x0a
    9d2c:	61 2c       	mov	r6, r1
    9d2e:	71 2c       	mov	r7, r1
    9d30:	39 e0       	ldi	r19, 0x09	; 9
    9d32:	44 0c       	add	r4, r4
    9d34:	55 1c       	adc	r5, r5
    9d36:	66 1c       	adc	r6, r6
    9d38:	77 1c       	adc	r7, r7
    9d3a:	3a 95       	dec	r19
    9d3c:	d1 f7       	brne	.-12     	; 0x9d32 <dir_sdi+0xb6>
    9d3e:	b5 01       	movw	r22, r10
    9d40:	a4 01       	movw	r20, r8
    9d42:	c4 14       	cp	r12, r4
    9d44:	d5 04       	cpc	r13, r5
    9d46:	e6 04       	cpc	r14, r6
    9d48:	f7 04       	cpc	r15, r7
    9d4a:	10 f1       	brcs	.+68     	; 0x9d90 <dir_sdi+0x114>
    9d4c:	88 81       	ld	r24, Y
    9d4e:	99 81       	ldd	r25, Y+1	; 0x01
    9d50:	e1 de       	rcall	.-574    	; 0x9b14 <get_fat.isra.9>
    9d52:	4b 01       	movw	r8, r22
    9d54:	5c 01       	movw	r10, r24
    9d56:	6f 3f       	cpi	r22, 0xFF	; 255
    9d58:	7f 4f       	sbci	r23, 0xFF	; 255
    9d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    9d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    9d5e:	09 f4       	brne	.+2      	; 0x9d62 <dir_sdi+0xe6>
    9d60:	47 c0       	rjmp	.+142    	; 0x9df0 <dir_sdi+0x174>
    9d62:	82 e0       	ldi	r24, 0x02	; 2
    9d64:	88 16       	cp	r8, r24
    9d66:	91 04       	cpc	r9, r1
    9d68:	a1 04       	cpc	r10, r1
    9d6a:	b1 04       	cpc	r11, r1
    9d6c:	08 f4       	brcc	.+2      	; 0x9d70 <dir_sdi+0xf4>
    9d6e:	95 cf       	rjmp	.-214    	; 0x9c9a <dir_sdi+0x1e>
    9d70:	f8 01       	movw	r30, r16
    9d72:	81 8d       	ldd	r24, Z+25	; 0x19
    9d74:	92 8d       	ldd	r25, Z+26	; 0x1a
    9d76:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9d78:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9d7a:	88 16       	cp	r8, r24
    9d7c:	99 06       	cpc	r9, r25
    9d7e:	aa 06       	cpc	r10, r26
    9d80:	bb 06       	cpc	r11, r27
    9d82:	08 f0       	brcs	.+2      	; 0x9d86 <dir_sdi+0x10a>
    9d84:	8a cf       	rjmp	.-236    	; 0x9c9a <dir_sdi+0x1e>
    9d86:	c4 18       	sub	r12, r4
    9d88:	d5 08       	sbc	r13, r5
    9d8a:	e6 08       	sbc	r14, r6
    9d8c:	f7 08       	sbc	r15, r7
    9d8e:	d7 cf       	rjmp	.-82     	; 0x9d3e <dir_sdi+0xc2>
    9d90:	c8 01       	movw	r24, r16
    9d92:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    9d96:	6e 8b       	std	Y+22, r22	; 0x16
    9d98:	7f 8b       	std	Y+23, r23	; 0x17
    9d9a:	88 8f       	std	Y+24, r24	; 0x18
    9d9c:	99 8f       	std	Y+25, r25	; 0x19
    9d9e:	8a 8a       	std	Y+18, r8	; 0x12
    9da0:	9b 8a       	std	Y+19, r9	; 0x13
    9da2:	ac 8a       	std	Y+20, r10	; 0x14
    9da4:	bd 8a       	std	Y+21, r11	; 0x15
    9da6:	8e 89       	ldd	r24, Y+22	; 0x16
    9da8:	9f 89       	ldd	r25, Y+23	; 0x17
    9daa:	a8 8d       	ldd	r26, Y+24	; 0x18
    9dac:	b9 8d       	ldd	r27, Y+25	; 0x19
    9dae:	00 97       	sbiw	r24, 0x00	; 0
    9db0:	a1 05       	cpc	r26, r1
    9db2:	b1 05       	cpc	r27, r1
    9db4:	09 f4       	brne	.+2      	; 0x9db8 <dir_sdi+0x13c>
    9db6:	71 cf       	rjmp	.-286    	; 0x9c9a <dir_sdi+0x1e>
    9db8:	b7 01       	movw	r22, r14
    9dba:	a6 01       	movw	r20, r12
    9dbc:	29 e0       	ldi	r18, 0x09	; 9
    9dbe:	76 95       	lsr	r23
    9dc0:	67 95       	ror	r22
    9dc2:	57 95       	ror	r21
    9dc4:	47 95       	ror	r20
    9dc6:	2a 95       	dec	r18
    9dc8:	d1 f7       	brne	.-12     	; 0x9dbe <dir_sdi+0x142>
    9dca:	84 0f       	add	r24, r20
    9dcc:	95 1f       	adc	r25, r21
    9dce:	a6 1f       	adc	r26, r22
    9dd0:	b7 1f       	adc	r27, r23
    9dd2:	8e 8b       	std	Y+22, r24	; 0x16
    9dd4:	9f 8b       	std	Y+23, r25	; 0x17
    9dd6:	a8 8f       	std	Y+24, r26	; 0x18
    9dd8:	b9 8f       	std	Y+25, r27	; 0x19
    9dda:	0b 5c       	subi	r16, 0xCB	; 203
    9ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    9dde:	f1 e0       	ldi	r31, 0x01	; 1
    9de0:	df 22       	and	r13, r31
    9de2:	c0 0e       	add	r12, r16
    9de4:	d1 1e       	adc	r13, r17
    9de6:	db 8e       	std	Y+27, r13	; 0x1b
    9de8:	ca 8e       	std	Y+26, r12	; 0x1a
    9dea:	80 e0       	ldi	r24, 0x00	; 0
    9dec:	90 e0       	ldi	r25, 0x00	; 0
    9dee:	02 c0       	rjmp	.+4      	; 0x9df4 <dir_sdi+0x178>
    9df0:	81 e0       	ldi	r24, 0x01	; 1
    9df2:	90 e0       	ldi	r25, 0x00	; 0
    9df4:	cd b7       	in	r28, 0x3d	; 61
    9df6:	de b7       	in	r29, 0x3e	; 62
    9df8:	e0 e1       	ldi	r30, 0x10	; 16
    9dfa:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x4>

00009dfe <create_chain>:
    9dfe:	a0 e0       	ldi	r26, 0x00	; 0
    9e00:	b0 e0       	ldi	r27, 0x00	; 0
    9e02:	e5 e0       	ldi	r30, 0x05	; 5
    9e04:	ff e4       	ldi	r31, 0x4F	; 79
    9e06:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x4>
    9e0a:	8c 01       	movw	r16, r24
    9e0c:	2a 01       	movw	r4, r20
    9e0e:	3b 01       	movw	r6, r22
    9e10:	fc 01       	movw	r30, r24
    9e12:	c0 81       	ld	r28, Z
    9e14:	d1 81       	ldd	r29, Z+1	; 0x01
    9e16:	41 15       	cp	r20, r1
    9e18:	51 05       	cpc	r21, r1
    9e1a:	61 05       	cpc	r22, r1
    9e1c:	71 05       	cpc	r23, r1
    9e1e:	99 f4       	brne	.+38     	; 0x9e46 <create_chain+0x48>
    9e20:	8d 84       	ldd	r8, Y+13	; 0x0d
    9e22:	9e 84       	ldd	r9, Y+14	; 0x0e
    9e24:	af 84       	ldd	r10, Y+15	; 0x0f
    9e26:	b8 88       	ldd	r11, Y+16	; 0x10
    9e28:	81 14       	cp	r8, r1
    9e2a:	91 04       	cpc	r9, r1
    9e2c:	a1 04       	cpc	r10, r1
    9e2e:	b1 04       	cpc	r11, r1
    9e30:	51 f1       	breq	.+84     	; 0x9e86 <create_chain+0x88>
    9e32:	89 8d       	ldd	r24, Y+25	; 0x19
    9e34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e36:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e38:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e3a:	88 16       	cp	r8, r24
    9e3c:	99 06       	cpc	r9, r25
    9e3e:	aa 06       	cpc	r10, r26
    9e40:	bb 06       	cpc	r11, r27
    9e42:	28 f1       	brcs	.+74     	; 0x9e8e <create_chain+0x90>
    9e44:	20 c0       	rjmp	.+64     	; 0x9e86 <create_chain+0x88>
    9e46:	ce 01       	movw	r24, r28
    9e48:	65 de       	rcall	.-822    	; 0x9b14 <get_fat.isra.9>
    9e4a:	62 30       	cpi	r22, 0x02	; 2
    9e4c:	71 05       	cpc	r23, r1
    9e4e:	81 05       	cpc	r24, r1
    9e50:	91 05       	cpc	r25, r1
    9e52:	08 f4       	brcc	.+2      	; 0x9e56 <create_chain+0x58>
    9e54:	ea c0       	rjmp	.+468    	; 0xa02a <create_chain+0x22c>
    9e56:	6f 3f       	cpi	r22, 0xFF	; 255
    9e58:	ff ef       	ldi	r31, 0xFF	; 255
    9e5a:	7f 07       	cpc	r23, r31
    9e5c:	8f 07       	cpc	r24, r31
    9e5e:	9f 07       	cpc	r25, r31
    9e60:	29 f4       	brne	.+10     	; 0x9e6c <create_chain+0x6e>
    9e62:	4f ef       	ldi	r20, 0xFF	; 255
    9e64:	3f ef       	ldi	r19, 0xFF	; 255
    9e66:	2f ef       	ldi	r18, 0xFF	; 255
    9e68:	9f ef       	ldi	r25, 0xFF	; 255
    9e6a:	e7 c0       	rjmp	.+462    	; 0xa03a <create_chain+0x23c>
    9e6c:	c9 8c       	ldd	r12, Y+25	; 0x19
    9e6e:	da 8c       	ldd	r13, Y+26	; 0x1a
    9e70:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9e72:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9e74:	6c 15       	cp	r22, r12
    9e76:	7d 05       	cpc	r23, r13
    9e78:	8e 05       	cpc	r24, r14
    9e7a:	9f 05       	cpc	r25, r15
    9e7c:	08 f4       	brcc	.+2      	; 0x9e80 <create_chain+0x82>
    9e7e:	da c0       	rjmp	.+436    	; 0xa034 <create_chain+0x236>
    9e80:	53 01       	movw	r10, r6
    9e82:	42 01       	movw	r8, r4
    9e84:	04 c0       	rjmp	.+8      	; 0x9e8e <create_chain+0x90>
    9e86:	81 2c       	mov	r8, r1
    9e88:	91 2c       	mov	r9, r1
    9e8a:	54 01       	movw	r10, r8
    9e8c:	83 94       	inc	r8
    9e8e:	89 89       	ldd	r24, Y+17	; 0x11
    9e90:	9a 89       	ldd	r25, Y+18	; 0x12
    9e92:	ab 89       	ldd	r26, Y+19	; 0x13
    9e94:	bc 89       	ldd	r27, Y+20	; 0x14
    9e96:	89 2b       	or	r24, r25
    9e98:	8a 2b       	or	r24, r26
    9e9a:	8b 2b       	or	r24, r27
    9e9c:	11 f4       	brne	.+4      	; 0x9ea2 <create_chain+0xa4>
    9e9e:	40 e0       	ldi	r20, 0x00	; 0
    9ea0:	c5 c0       	rjmp	.+394    	; 0xa02c <create_chain+0x22e>
    9ea2:	84 14       	cp	r8, r4
    9ea4:	95 04       	cpc	r9, r5
    9ea6:	a6 04       	cpc	r10, r6
    9ea8:	b7 04       	cpc	r11, r7
    9eaa:	09 f0       	breq	.+2      	; 0x9eae <create_chain+0xb0>
    9eac:	46 c0       	rjmp	.+140    	; 0x9f3a <create_chain+0x13c>
    9eae:	75 01       	movw	r14, r10
    9eb0:	64 01       	movw	r12, r8
    9eb2:	2f ef       	ldi	r18, 0xFF	; 255
    9eb4:	c2 1a       	sub	r12, r18
    9eb6:	d2 0a       	sbc	r13, r18
    9eb8:	e2 0a       	sbc	r14, r18
    9eba:	f2 0a       	sbc	r15, r18
    9ebc:	89 8d       	ldd	r24, Y+25	; 0x19
    9ebe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ec0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ec2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ec4:	c8 16       	cp	r12, r24
    9ec6:	d9 06       	cpc	r13, r25
    9ec8:	ea 06       	cpc	r14, r26
    9eca:	fb 06       	cpc	r15, r27
    9ecc:	28 f0       	brcs	.+10     	; 0x9ed8 <create_chain+0xda>
    9ece:	92 e0       	ldi	r25, 0x02	; 2
    9ed0:	c9 2e       	mov	r12, r25
    9ed2:	d1 2c       	mov	r13, r1
    9ed4:	e1 2c       	mov	r14, r1
    9ed6:	f1 2c       	mov	r15, r1
    9ed8:	b7 01       	movw	r22, r14
    9eda:	a6 01       	movw	r20, r12
    9edc:	f8 01       	movw	r30, r16
    9ede:	80 81       	ld	r24, Z
    9ee0:	91 81       	ldd	r25, Z+1	; 0x01
    9ee2:	18 de       	rcall	.-976    	; 0x9b14 <get_fat.isra.9>
    9ee4:	61 30       	cpi	r22, 0x01	; 1
    9ee6:	71 05       	cpc	r23, r1
    9ee8:	81 05       	cpc	r24, r1
    9eea:	91 05       	cpc	r25, r1
    9eec:	09 f4       	brne	.+2      	; 0x9ef0 <create_chain+0xf2>
    9eee:	9d c0       	rjmp	.+314    	; 0xa02a <create_chain+0x22c>
    9ef0:	6f 3f       	cpi	r22, 0xFF	; 255
    9ef2:	ff ef       	ldi	r31, 0xFF	; 255
    9ef4:	7f 07       	cpc	r23, r31
    9ef6:	8f 07       	cpc	r24, r31
    9ef8:	9f 07       	cpc	r25, r31
    9efa:	09 f4       	brne	.+2      	; 0x9efe <create_chain+0x100>
    9efc:	b2 cf       	rjmp	.-156    	; 0x9e62 <create_chain+0x64>
    9efe:	67 2b       	or	r22, r23
    9f00:	68 2b       	or	r22, r24
    9f02:	69 2b       	or	r22, r25
    9f04:	a9 f0       	breq	.+42     	; 0x9f30 <create_chain+0x132>
    9f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    9f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    9f0a:	af 85       	ldd	r26, Y+15	; 0x0f
    9f0c:	b8 89       	ldd	r27, Y+16	; 0x10
    9f0e:	82 30       	cpi	r24, 0x02	; 2
    9f10:	91 05       	cpc	r25, r1
    9f12:	a1 05       	cpc	r26, r1
    9f14:	b1 05       	cpc	r27, r1
    9f16:	88 f0       	brcs	.+34     	; 0x9f3a <create_chain+0x13c>
    9f18:	49 8d       	ldd	r20, Y+25	; 0x19
    9f1a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9f1c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9f1e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9f20:	84 17       	cp	r24, r20
    9f22:	95 07       	cpc	r25, r21
    9f24:	a6 07       	cpc	r26, r22
    9f26:	b7 07       	cpc	r27, r23
    9f28:	40 f4       	brcc	.+16     	; 0x9f3a <create_chain+0x13c>
    9f2a:	4c 01       	movw	r8, r24
    9f2c:	5d 01       	movw	r10, r26
    9f2e:	05 c0       	rjmp	.+10     	; 0x9f3a <create_chain+0x13c>
    9f30:	c1 14       	cp	r12, r1
    9f32:	d1 04       	cpc	r13, r1
    9f34:	e1 04       	cpc	r14, r1
    9f36:	f1 04       	cpc	r15, r1
    9f38:	c9 f5       	brne	.+114    	; 0x9fac <create_chain+0x1ae>
    9f3a:	75 01       	movw	r14, r10
    9f3c:	64 01       	movw	r12, r8
    9f3e:	2f ef       	ldi	r18, 0xFF	; 255
    9f40:	c2 1a       	sub	r12, r18
    9f42:	d2 0a       	sbc	r13, r18
    9f44:	e2 0a       	sbc	r14, r18
    9f46:	f2 0a       	sbc	r15, r18
    9f48:	89 8d       	ldd	r24, Y+25	; 0x19
    9f4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f4c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f4e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f50:	c8 16       	cp	r12, r24
    9f52:	d9 06       	cpc	r13, r25
    9f54:	ea 06       	cpc	r14, r26
    9f56:	fb 06       	cpc	r15, r27
    9f58:	60 f0       	brcs	.+24     	; 0x9f72 <create_chain+0x174>
    9f5a:	82 e0       	ldi	r24, 0x02	; 2
    9f5c:	88 16       	cp	r8, r24
    9f5e:	91 04       	cpc	r9, r1
    9f60:	a1 04       	cpc	r10, r1
    9f62:	b1 04       	cpc	r11, r1
    9f64:	08 f4       	brcc	.+2      	; 0x9f68 <create_chain+0x16a>
    9f66:	9b cf       	rjmp	.-202    	; 0x9e9e <create_chain+0xa0>
    9f68:	82 e0       	ldi	r24, 0x02	; 2
    9f6a:	c8 2e       	mov	r12, r24
    9f6c:	d1 2c       	mov	r13, r1
    9f6e:	e1 2c       	mov	r14, r1
    9f70:	f1 2c       	mov	r15, r1
    9f72:	b7 01       	movw	r22, r14
    9f74:	a6 01       	movw	r20, r12
    9f76:	f8 01       	movw	r30, r16
    9f78:	80 81       	ld	r24, Z
    9f7a:	91 81       	ldd	r25, Z+1	; 0x01
    9f7c:	cb dd       	rcall	.-1130   	; 0x9b14 <get_fat.isra.9>
    9f7e:	61 15       	cp	r22, r1
    9f80:	71 05       	cpc	r23, r1
    9f82:	81 05       	cpc	r24, r1
    9f84:	91 05       	cpc	r25, r1
    9f86:	91 f0       	breq	.+36     	; 0x9fac <create_chain+0x1ae>
    9f88:	61 30       	cpi	r22, 0x01	; 1
    9f8a:	71 05       	cpc	r23, r1
    9f8c:	81 05       	cpc	r24, r1
    9f8e:	91 05       	cpc	r25, r1
    9f90:	09 f4       	brne	.+2      	; 0x9f94 <create_chain+0x196>
    9f92:	4b c0       	rjmp	.+150    	; 0xa02a <create_chain+0x22c>
    9f94:	6f 3f       	cpi	r22, 0xFF	; 255
    9f96:	7f 4f       	sbci	r23, 0xFF	; 255
    9f98:	8f 4f       	sbci	r24, 0xFF	; 255
    9f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    9f9c:	09 f4       	brne	.+2      	; 0x9fa0 <create_chain+0x1a2>
    9f9e:	61 cf       	rjmp	.-318    	; 0x9e62 <create_chain+0x64>
    9fa0:	c8 14       	cp	r12, r8
    9fa2:	d9 04       	cpc	r13, r9
    9fa4:	ea 04       	cpc	r14, r10
    9fa6:	fb 04       	cpc	r15, r11
    9fa8:	51 f6       	brne	.-108    	; 0x9f3e <create_chain+0x140>
    9faa:	79 cf       	rjmp	.-270    	; 0x9e9e <create_chain+0xa0>
    9fac:	0f ef       	ldi	r16, 0xFF	; 255
    9fae:	1f ef       	ldi	r17, 0xFF	; 255
    9fb0:	98 01       	movw	r18, r16
    9fb2:	b7 01       	movw	r22, r14
    9fb4:	a6 01       	movw	r20, r12
    9fb6:	ce 01       	movw	r24, r28
    9fb8:	b4 dc       	rcall	.-1688   	; 0x9922 <put_fat>
    9fba:	00 97       	sbiw	r24, 0x00	; 0
    9fbc:	99 f5       	brne	.+102    	; 0xa024 <create_chain+0x226>
    9fbe:	41 14       	cp	r4, r1
    9fc0:	51 04       	cpc	r5, r1
    9fc2:	61 04       	cpc	r6, r1
    9fc4:	71 04       	cpc	r7, r1
    9fc6:	e9 f4       	brne	.+58     	; 0xa002 <create_chain+0x204>
    9fc8:	cd 86       	std	Y+13, r12	; 0x0d
    9fca:	de 86       	std	Y+14, r13	; 0x0e
    9fcc:	ef 86       	std	Y+15, r14	; 0x0f
    9fce:	f8 8a       	std	Y+16, r15	; 0x10
    9fd0:	89 89       	ldd	r24, Y+17	; 0x11
    9fd2:	9a 89       	ldd	r25, Y+18	; 0x12
    9fd4:	ab 89       	ldd	r26, Y+19	; 0x13
    9fd6:	bc 89       	ldd	r27, Y+20	; 0x14
    9fd8:	49 8d       	ldd	r20, Y+25	; 0x19
    9fda:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9fdc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9fde:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9fe0:	42 50       	subi	r20, 0x02	; 2
    9fe2:	51 09       	sbc	r21, r1
    9fe4:	61 09       	sbc	r22, r1
    9fe6:	71 09       	sbc	r23, r1
    9fe8:	48 17       	cp	r20, r24
    9fea:	59 07       	cpc	r21, r25
    9fec:	6a 07       	cpc	r22, r26
    9fee:	7b 07       	cpc	r23, r27
    9ff0:	88 f0       	brcs	.+34     	; 0xa014 <create_chain+0x216>
    9ff2:	01 97       	sbiw	r24, 0x01	; 1
    9ff4:	a1 09       	sbc	r26, r1
    9ff6:	b1 09       	sbc	r27, r1
    9ff8:	89 8b       	std	Y+17, r24	; 0x11
    9ffa:	9a 8b       	std	Y+18, r25	; 0x12
    9ffc:	ab 8b       	std	Y+19, r26	; 0x13
    9ffe:	bc 8b       	std	Y+20, r27	; 0x14
    a000:	09 c0       	rjmp	.+18     	; 0xa014 <create_chain+0x216>
    a002:	97 01       	movw	r18, r14
    a004:	86 01       	movw	r16, r12
    a006:	b3 01       	movw	r22, r6
    a008:	a2 01       	movw	r20, r4
    a00a:	ce 01       	movw	r24, r28
    a00c:	8a dc       	rcall	.-1772   	; 0x9922 <put_fat>
    a00e:	00 97       	sbiw	r24, 0x00	; 0
    a010:	d9 f2       	breq	.-74     	; 0x9fc8 <create_chain+0x1ca>
    a012:	08 c0       	rjmp	.+16     	; 0xa024 <create_chain+0x226>
    a014:	8c 81       	ldd	r24, Y+4	; 0x04
    a016:	81 60       	ori	r24, 0x01	; 1
    a018:	8c 83       	std	Y+4, r24	; 0x04
    a01a:	4c 2d       	mov	r20, r12
    a01c:	3d 2d       	mov	r19, r13
    a01e:	2e 2d       	mov	r18, r14
    a020:	9f 2d       	mov	r25, r15
    a022:	0b c0       	rjmp	.+22     	; 0xa03a <create_chain+0x23c>
    a024:	01 97       	sbiw	r24, 0x01	; 1
    a026:	09 f4       	brne	.+2      	; 0xa02a <create_chain+0x22c>
    a028:	1c cf       	rjmp	.-456    	; 0x9e62 <create_chain+0x64>
    a02a:	41 e0       	ldi	r20, 0x01	; 1
    a02c:	30 e0       	ldi	r19, 0x00	; 0
    a02e:	20 e0       	ldi	r18, 0x00	; 0
    a030:	90 e0       	ldi	r25, 0x00	; 0
    a032:	03 c0       	rjmp	.+6      	; 0xa03a <create_chain+0x23c>
    a034:	46 2f       	mov	r20, r22
    a036:	37 2f       	mov	r19, r23
    a038:	28 2f       	mov	r18, r24
    a03a:	64 2f       	mov	r22, r20
    a03c:	73 2f       	mov	r23, r19
    a03e:	82 2f       	mov	r24, r18
    a040:	cd b7       	in	r28, 0x3d	; 61
    a042:	de b7       	in	r29, 0x3e	; 62
    a044:	e0 e1       	ldi	r30, 0x10	; 16
    a046:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x4>

0000a04a <remove_chain>:
    a04a:	4f 92       	push	r4
    a04c:	5f 92       	push	r5
    a04e:	6f 92       	push	r6
    a050:	7f 92       	push	r7
    a052:	af 92       	push	r10
    a054:	bf 92       	push	r11
    a056:	cf 92       	push	r12
    a058:	df 92       	push	r13
    a05a:	ef 92       	push	r14
    a05c:	ff 92       	push	r15
    a05e:	0f 93       	push	r16
    a060:	1f 93       	push	r17
    a062:	cf 93       	push	r28
    a064:	df 93       	push	r29
    a066:	5c 01       	movw	r10, r24
    a068:	6a 01       	movw	r12, r20
    a06a:	7b 01       	movw	r14, r22
    a06c:	b9 01       	movw	r22, r18
    a06e:	a8 01       	movw	r20, r16
    a070:	22 e0       	ldi	r18, 0x02	; 2
    a072:	c2 16       	cp	r12, r18
    a074:	d1 04       	cpc	r13, r1
    a076:	e1 04       	cpc	r14, r1
    a078:	f1 04       	cpc	r15, r1
    a07a:	10 f4       	brcc	.+4      	; 0xa080 <remove_chain+0x36>
    a07c:	22 e0       	ldi	r18, 0x02	; 2
    a07e:	27 c0       	rjmp	.+78     	; 0xa0ce <remove_chain+0x84>
    a080:	fc 01       	movw	r30, r24
    a082:	c0 81       	ld	r28, Z
    a084:	d1 81       	ldd	r29, Z+1	; 0x01
    a086:	89 8d       	ldd	r24, Y+25	; 0x19
    a088:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a08a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a08c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a08e:	c8 16       	cp	r12, r24
    a090:	d9 06       	cpc	r13, r25
    a092:	ea 06       	cpc	r14, r26
    a094:	fb 06       	cpc	r15, r27
    a096:	90 f7       	brcc	.-28     	; 0xa07c <remove_chain+0x32>
    a098:	41 15       	cp	r20, r1
    a09a:	51 05       	cpc	r21, r1
    a09c:	61 05       	cpc	r22, r1
    a09e:	71 05       	cpc	r23, r1
    a0a0:	41 f0       	breq	.+16     	; 0xa0b2 <remove_chain+0x68>
    a0a2:	0f ef       	ldi	r16, 0xFF	; 255
    a0a4:	1f ef       	ldi	r17, 0xFF	; 255
    a0a6:	98 01       	movw	r18, r16
    a0a8:	ce 01       	movw	r24, r28
    a0aa:	3b dc       	rcall	.-1930   	; 0x9922 <put_fat>
    a0ac:	00 97       	sbiw	r24, 0x00	; 0
    a0ae:	09 f0       	breq	.+2      	; 0xa0b2 <remove_chain+0x68>
    a0b0:	4c c0       	rjmp	.+152    	; 0xa14a <remove_chain+0x100>
    a0b2:	b7 01       	movw	r22, r14
    a0b4:	a6 01       	movw	r20, r12
    a0b6:	f5 01       	movw	r30, r10
    a0b8:	80 81       	ld	r24, Z
    a0ba:	91 81       	ldd	r25, Z+1	; 0x01
    a0bc:	2b dd       	rcall	.-1450   	; 0x9b14 <get_fat.isra.9>
    a0be:	2b 01       	movw	r4, r22
    a0c0:	3c 01       	movw	r6, r24
    a0c2:	61 15       	cp	r22, r1
    a0c4:	71 05       	cpc	r23, r1
    a0c6:	81 05       	cpc	r24, r1
    a0c8:	91 05       	cpc	r25, r1
    a0ca:	19 f4       	brne	.+6      	; 0xa0d2 <remove_chain+0x88>
    a0cc:	20 e0       	ldi	r18, 0x00	; 0
    a0ce:	90 e0       	ldi	r25, 0x00	; 0
    a0d0:	3d c0       	rjmp	.+122    	; 0xa14c <remove_chain+0x102>
    a0d2:	61 30       	cpi	r22, 0x01	; 1
    a0d4:	71 05       	cpc	r23, r1
    a0d6:	81 05       	cpc	r24, r1
    a0d8:	91 05       	cpc	r25, r1
    a0da:	81 f2       	breq	.-96     	; 0xa07c <remove_chain+0x32>
    a0dc:	6f 3f       	cpi	r22, 0xFF	; 255
    a0de:	7f 4f       	sbci	r23, 0xFF	; 255
    a0e0:	8f 4f       	sbci	r24, 0xFF	; 255
    a0e2:	9f 4f       	sbci	r25, 0xFF	; 255
    a0e4:	81 f1       	breq	.+96     	; 0xa146 <remove_chain+0xfc>
    a0e6:	00 e0       	ldi	r16, 0x00	; 0
    a0e8:	10 e0       	ldi	r17, 0x00	; 0
    a0ea:	98 01       	movw	r18, r16
    a0ec:	b7 01       	movw	r22, r14
    a0ee:	a6 01       	movw	r20, r12
    a0f0:	ce 01       	movw	r24, r28
    a0f2:	17 dc       	rcall	.-2002   	; 0x9922 <put_fat>
    a0f4:	00 97       	sbiw	r24, 0x00	; 0
    a0f6:	49 f5       	brne	.+82     	; 0xa14a <remove_chain+0x100>
    a0f8:	89 89       	ldd	r24, Y+17	; 0x11
    a0fa:	9a 89       	ldd	r25, Y+18	; 0x12
    a0fc:	ab 89       	ldd	r26, Y+19	; 0x13
    a0fe:	bc 89       	ldd	r27, Y+20	; 0x14
    a100:	49 8d       	ldd	r20, Y+25	; 0x19
    a102:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a104:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a106:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a108:	6a 01       	movw	r12, r20
    a10a:	7b 01       	movw	r14, r22
    a10c:	e2 e0       	ldi	r30, 0x02	; 2
    a10e:	ce 1a       	sub	r12, r30
    a110:	d1 08       	sbc	r13, r1
    a112:	e1 08       	sbc	r14, r1
    a114:	f1 08       	sbc	r15, r1
    a116:	8c 15       	cp	r24, r12
    a118:	9d 05       	cpc	r25, r13
    a11a:	ae 05       	cpc	r26, r14
    a11c:	bf 05       	cpc	r27, r15
    a11e:	50 f4       	brcc	.+20     	; 0xa134 <remove_chain+0xea>
    a120:	01 96       	adiw	r24, 0x01	; 1
    a122:	a1 1d       	adc	r26, r1
    a124:	b1 1d       	adc	r27, r1
    a126:	89 8b       	std	Y+17, r24	; 0x11
    a128:	9a 8b       	std	Y+18, r25	; 0x12
    a12a:	ab 8b       	std	Y+19, r26	; 0x13
    a12c:	bc 8b       	std	Y+20, r27	; 0x14
    a12e:	8c 81       	ldd	r24, Y+4	; 0x04
    a130:	81 60       	ori	r24, 0x01	; 1
    a132:	8c 83       	std	Y+4, r24	; 0x04
    a134:	73 01       	movw	r14, r6
    a136:	62 01       	movw	r12, r4
    a138:	44 16       	cp	r4, r20
    a13a:	55 06       	cpc	r5, r21
    a13c:	66 06       	cpc	r6, r22
    a13e:	77 06       	cpc	r7, r23
    a140:	08 f4       	brcc	.+2      	; 0xa144 <remove_chain+0xfa>
    a142:	b7 cf       	rjmp	.-146    	; 0xa0b2 <remove_chain+0x68>
    a144:	c3 cf       	rjmp	.-122    	; 0xa0cc <remove_chain+0x82>
    a146:	21 e0       	ldi	r18, 0x01	; 1
    a148:	c2 cf       	rjmp	.-124    	; 0xa0ce <remove_chain+0x84>
    a14a:	28 2f       	mov	r18, r24
    a14c:	82 2f       	mov	r24, r18
    a14e:	df 91       	pop	r29
    a150:	cf 91       	pop	r28
    a152:	1f 91       	pop	r17
    a154:	0f 91       	pop	r16
    a156:	ff 90       	pop	r15
    a158:	ef 90       	pop	r14
    a15a:	df 90       	pop	r13
    a15c:	cf 90       	pop	r12
    a15e:	bf 90       	pop	r11
    a160:	af 90       	pop	r10
    a162:	7f 90       	pop	r7
    a164:	6f 90       	pop	r6
    a166:	5f 90       	pop	r5
    a168:	4f 90       	pop	r4
    a16a:	08 95       	ret

0000a16c <dir_next>:
    a16c:	4f 92       	push	r4
    a16e:	5f 92       	push	r5
    a170:	6f 92       	push	r6
    a172:	7f 92       	push	r7
    a174:	af 92       	push	r10
    a176:	bf 92       	push	r11
    a178:	cf 92       	push	r12
    a17a:	df 92       	push	r13
    a17c:	ef 92       	push	r14
    a17e:	ff 92       	push	r15
    a180:	0f 93       	push	r16
    a182:	1f 93       	push	r17
    a184:	cf 93       	push	r28
    a186:	df 93       	push	r29
    a188:	ec 01       	movw	r28, r24
    a18a:	08 81       	ld	r16, Y
    a18c:	19 81       	ldd	r17, Y+1	; 0x01
    a18e:	ce 84       	ldd	r12, Y+14	; 0x0e
    a190:	df 84       	ldd	r13, Y+15	; 0x0f
    a192:	e8 88       	ldd	r14, Y+16	; 0x10
    a194:	f9 88       	ldd	r15, Y+17	; 0x11
    a196:	80 e2       	ldi	r24, 0x20	; 32
    a198:	c8 0e       	add	r12, r24
    a19a:	d1 1c       	adc	r13, r1
    a19c:	e1 1c       	adc	r14, r1
    a19e:	f1 1c       	adc	r15, r1
    a1a0:	c1 14       	cp	r12, r1
    a1a2:	d1 04       	cpc	r13, r1
    a1a4:	e0 e2       	ldi	r30, 0x20	; 32
    a1a6:	ee 06       	cpc	r14, r30
    a1a8:	f1 04       	cpc	r15, r1
    a1aa:	20 f0       	brcs	.+8      	; 0xa1b4 <dir_next+0x48>
    a1ac:	1e 8a       	std	Y+22, r1	; 0x16
    a1ae:	1f 8a       	std	Y+23, r1	; 0x17
    a1b0:	18 8e       	std	Y+24, r1	; 0x18
    a1b2:	19 8e       	std	Y+25, r1	; 0x19
    a1b4:	8e 89       	ldd	r24, Y+22	; 0x16
    a1b6:	9f 89       	ldd	r25, Y+23	; 0x17
    a1b8:	a8 8d       	ldd	r26, Y+24	; 0x18
    a1ba:	b9 8d       	ldd	r27, Y+25	; 0x19
    a1bc:	00 97       	sbiw	r24, 0x00	; 0
    a1be:	a1 05       	cpc	r26, r1
    a1c0:	b1 05       	cpc	r27, r1
    a1c2:	09 f4       	brne	.+2      	; 0xa1c6 <dir_next+0x5a>
    a1c4:	a7 c0       	rjmp	.+334    	; 0xa314 <dir_next+0x1a8>
    a1c6:	5b 01       	movw	r10, r22
    a1c8:	b7 01       	movw	r22, r14
    a1ca:	a6 01       	movw	r20, r12
    a1cc:	51 70       	andi	r21, 0x01	; 1
    a1ce:	66 27       	eor	r22, r22
    a1d0:	77 27       	eor	r23, r23
    a1d2:	45 2b       	or	r20, r21
    a1d4:	46 2b       	or	r20, r22
    a1d6:	47 2b       	or	r20, r23
    a1d8:	09 f0       	breq	.+2      	; 0xa1dc <dir_next+0x70>
    a1da:	8d c0       	rjmp	.+282    	; 0xa2f6 <dir_next+0x18a>
    a1dc:	01 96       	adiw	r24, 0x01	; 1
    a1de:	a1 1d       	adc	r26, r1
    a1e0:	b1 1d       	adc	r27, r1
    a1e2:	8e 8b       	std	Y+22, r24	; 0x16
    a1e4:	9f 8b       	std	Y+23, r25	; 0x17
    a1e6:	a8 8f       	std	Y+24, r26	; 0x18
    a1e8:	b9 8f       	std	Y+25, r27	; 0x19
    a1ea:	4a 89       	ldd	r20, Y+18	; 0x12
    a1ec:	5b 89       	ldd	r21, Y+19	; 0x13
    a1ee:	6c 89       	ldd	r22, Y+20	; 0x14
    a1f0:	7d 89       	ldd	r23, Y+21	; 0x15
    a1f2:	f8 01       	movw	r30, r16
    a1f4:	41 15       	cp	r20, r1
    a1f6:	51 05       	cpc	r21, r1
    a1f8:	61 05       	cpc	r22, r1
    a1fa:	71 05       	cpc	r23, r1
    a1fc:	c1 f4       	brne	.+48     	; 0xa22e <dir_next+0xc2>
    a1fe:	87 81       	ldd	r24, Z+7	; 0x07
    a200:	90 85       	ldd	r25, Z+8	; 0x08
    a202:	a0 e0       	ldi	r26, 0x00	; 0
    a204:	b0 e0       	ldi	r27, 0x00	; 0
    a206:	b7 01       	movw	r22, r14
    a208:	a6 01       	movw	r20, r12
    a20a:	35 e0       	ldi	r19, 0x05	; 5
    a20c:	76 95       	lsr	r23
    a20e:	67 95       	ror	r22
    a210:	57 95       	ror	r21
    a212:	47 95       	ror	r20
    a214:	3a 95       	dec	r19
    a216:	d1 f7       	brne	.-12     	; 0xa20c <dir_next+0xa0>
    a218:	48 17       	cp	r20, r24
    a21a:	59 07       	cpc	r21, r25
    a21c:	6a 07       	cpc	r22, r26
    a21e:	7b 07       	cpc	r23, r27
    a220:	08 f4       	brcc	.+2      	; 0xa224 <dir_next+0xb8>
    a222:	69 c0       	rjmp	.+210    	; 0xa2f6 <dir_next+0x18a>
    a224:	1e 8a       	std	Y+22, r1	; 0x16
    a226:	1f 8a       	std	Y+23, r1	; 0x17
    a228:	18 8e       	std	Y+24, r1	; 0x18
    a22a:	19 8e       	std	Y+25, r1	; 0x19
    a22c:	73 c0       	rjmp	.+230    	; 0xa314 <dir_next+0x1a8>
    a22e:	81 85       	ldd	r24, Z+9	; 0x09
    a230:	92 85       	ldd	r25, Z+10	; 0x0a
    a232:	01 97       	sbiw	r24, 0x01	; 1
    a234:	a0 e0       	ldi	r26, 0x00	; 0
    a236:	b0 e0       	ldi	r27, 0x00	; 0
    a238:	26 01       	movw	r4, r12
    a23a:	37 01       	movw	r6, r14
    a23c:	29 e0       	ldi	r18, 0x09	; 9
    a23e:	76 94       	lsr	r7
    a240:	67 94       	ror	r6
    a242:	57 94       	ror	r5
    a244:	47 94       	ror	r4
    a246:	2a 95       	dec	r18
    a248:	d1 f7       	brne	.-12     	; 0xa23e <dir_next+0xd2>
    a24a:	84 21       	and	r24, r4
    a24c:	95 21       	and	r25, r5
    a24e:	a6 21       	and	r26, r6
    a250:	b7 21       	and	r27, r7
    a252:	89 2b       	or	r24, r25
    a254:	8a 2b       	or	r24, r26
    a256:	8b 2b       	or	r24, r27
    a258:	09 f0       	breq	.+2      	; 0xa25c <dir_next+0xf0>
    a25a:	4d c0       	rjmp	.+154    	; 0xa2f6 <dir_next+0x18a>
    a25c:	c8 01       	movw	r24, r16
    a25e:	5a dc       	rcall	.-1868   	; 0x9b14 <get_fat.isra.9>
    a260:	2b 01       	movw	r4, r22
    a262:	3c 01       	movw	r6, r24
    a264:	62 30       	cpi	r22, 0x02	; 2
    a266:	71 05       	cpc	r23, r1
    a268:	81 05       	cpc	r24, r1
    a26a:	91 05       	cpc	r25, r1
    a26c:	18 f4       	brcc	.+6      	; 0xa274 <dir_next+0x108>
    a26e:	82 e0       	ldi	r24, 0x02	; 2
    a270:	90 e0       	ldi	r25, 0x00	; 0
    a272:	55 c0       	rjmp	.+170    	; 0xa31e <dir_next+0x1b2>
    a274:	8f ef       	ldi	r24, 0xFF	; 255
    a276:	48 16       	cp	r4, r24
    a278:	58 06       	cpc	r5, r24
    a27a:	68 06       	cpc	r6, r24
    a27c:	78 06       	cpc	r7, r24
    a27e:	19 f4       	brne	.+6      	; 0xa286 <dir_next+0x11a>
    a280:	81 e0       	ldi	r24, 0x01	; 1
    a282:	90 e0       	ldi	r25, 0x00	; 0
    a284:	4c c0       	rjmp	.+152    	; 0xa31e <dir_next+0x1b2>
    a286:	f8 01       	movw	r30, r16
    a288:	81 8d       	ldd	r24, Z+25	; 0x19
    a28a:	92 8d       	ldd	r25, Z+26	; 0x1a
    a28c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a28e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a290:	48 16       	cp	r4, r24
    a292:	59 06       	cpc	r5, r25
    a294:	6a 06       	cpc	r6, r26
    a296:	7b 06       	cpc	r7, r27
    a298:	08 f1       	brcs	.+66     	; 0xa2dc <dir_next+0x170>
    a29a:	ab 28       	or	r10, r11
    a29c:	19 f2       	breq	.-122    	; 0xa224 <dir_next+0xb8>
    a29e:	4a 89       	ldd	r20, Y+18	; 0x12
    a2a0:	5b 89       	ldd	r21, Y+19	; 0x13
    a2a2:	6c 89       	ldd	r22, Y+20	; 0x14
    a2a4:	7d 89       	ldd	r23, Y+21	; 0x15
    a2a6:	ce 01       	movw	r24, r28
    a2a8:	aa dd       	rcall	.-1196   	; 0x9dfe <create_chain>
    a2aa:	2b 01       	movw	r4, r22
    a2ac:	3c 01       	movw	r6, r24
    a2ae:	61 15       	cp	r22, r1
    a2b0:	71 05       	cpc	r23, r1
    a2b2:	81 05       	cpc	r24, r1
    a2b4:	91 05       	cpc	r25, r1
    a2b6:	89 f1       	breq	.+98     	; 0xa31a <dir_next+0x1ae>
    a2b8:	61 30       	cpi	r22, 0x01	; 1
    a2ba:	71 05       	cpc	r23, r1
    a2bc:	81 05       	cpc	r24, r1
    a2be:	91 05       	cpc	r25, r1
    a2c0:	b1 f2       	breq	.-84     	; 0xa26e <dir_next+0x102>
    a2c2:	8f ef       	ldi	r24, 0xFF	; 255
    a2c4:	48 16       	cp	r4, r24
    a2c6:	58 06       	cpc	r5, r24
    a2c8:	68 06       	cpc	r6, r24
    a2ca:	78 06       	cpc	r7, r24
    a2cc:	c9 f2       	breq	.-78     	; 0xa280 <dir_next+0x114>
    a2ce:	b3 01       	movw	r22, r6
    a2d0:	a2 01       	movw	r20, r4
    a2d2:	c8 01       	movw	r24, r16
    a2d4:	0e 94 14 49 	call	0x9228	; 0x9228 <dir_clear>
    a2d8:	89 2b       	or	r24, r25
    a2da:	91 f6       	brne	.-92     	; 0xa280 <dir_next+0x114>
    a2dc:	4a 8a       	std	Y+18, r4	; 0x12
    a2de:	5b 8a       	std	Y+19, r5	; 0x13
    a2e0:	6c 8a       	std	Y+20, r6	; 0x14
    a2e2:	7d 8a       	std	Y+21, r7	; 0x15
    a2e4:	b3 01       	movw	r22, r6
    a2e6:	a2 01       	movw	r20, r4
    a2e8:	c8 01       	movw	r24, r16
    a2ea:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    a2ee:	6e 8b       	std	Y+22, r22	; 0x16
    a2f0:	7f 8b       	std	Y+23, r23	; 0x17
    a2f2:	88 8f       	std	Y+24, r24	; 0x18
    a2f4:	99 8f       	std	Y+25, r25	; 0x19
    a2f6:	ce 86       	std	Y+14, r12	; 0x0e
    a2f8:	df 86       	std	Y+15, r13	; 0x0f
    a2fa:	e8 8a       	std	Y+16, r14	; 0x10
    a2fc:	f9 8a       	std	Y+17, r15	; 0x11
    a2fe:	0b 5c       	subi	r16, 0xCB	; 203
    a300:	1f 4f       	sbci	r17, 0xFF	; 255
    a302:	e1 e0       	ldi	r30, 0x01	; 1
    a304:	de 22       	and	r13, r30
    a306:	c0 0e       	add	r12, r16
    a308:	d1 1e       	adc	r13, r17
    a30a:	db 8e       	std	Y+27, r13	; 0x1b
    a30c:	ca 8e       	std	Y+26, r12	; 0x1a
    a30e:	80 e0       	ldi	r24, 0x00	; 0
    a310:	90 e0       	ldi	r25, 0x00	; 0
    a312:	05 c0       	rjmp	.+10     	; 0xa31e <dir_next+0x1b2>
    a314:	84 e0       	ldi	r24, 0x04	; 4
    a316:	90 e0       	ldi	r25, 0x00	; 0
    a318:	02 c0       	rjmp	.+4      	; 0xa31e <dir_next+0x1b2>
    a31a:	87 e0       	ldi	r24, 0x07	; 7
    a31c:	90 e0       	ldi	r25, 0x00	; 0
    a31e:	df 91       	pop	r29
    a320:	cf 91       	pop	r28
    a322:	1f 91       	pop	r17
    a324:	0f 91       	pop	r16
    a326:	ff 90       	pop	r15
    a328:	ef 90       	pop	r14
    a32a:	df 90       	pop	r13
    a32c:	cf 90       	pop	r12
    a32e:	bf 90       	pop	r11
    a330:	af 90       	pop	r10
    a332:	7f 90       	pop	r7
    a334:	6f 90       	pop	r6
    a336:	5f 90       	pop	r5
    a338:	4f 90       	pop	r4
    a33a:	08 95       	ret

0000a33c <dir_alloc>:
    a33c:	a0 e0       	ldi	r26, 0x00	; 0
    a33e:	b0 e0       	ldi	r27, 0x00	; 0
    a340:	e4 ea       	ldi	r30, 0xA4	; 164
    a342:	f1 e5       	ldi	r31, 0x51	; 81
    a344:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    a348:	ec 01       	movw	r28, r24
    a34a:	6b 01       	movw	r12, r22
    a34c:	e8 80       	ld	r14, Y
    a34e:	f9 80       	ldd	r15, Y+1	; 0x01
    a350:	40 e0       	ldi	r20, 0x00	; 0
    a352:	50 e0       	ldi	r21, 0x00	; 0
    a354:	ba 01       	movw	r22, r20
    a356:	92 dc       	rcall	.-1756   	; 0x9c7c <dir_sdi>
    a358:	00 97       	sbiw	r24, 0x00	; 0
    a35a:	f9 f4       	brne	.+62     	; 0xa39a <dir_alloc+0x5e>
    a35c:	00 e0       	ldi	r16, 0x00	; 0
    a35e:	10 e0       	ldi	r17, 0x00	; 0
    a360:	4e 89       	ldd	r20, Y+22	; 0x16
    a362:	5f 89       	ldd	r21, Y+23	; 0x17
    a364:	68 8d       	ldd	r22, Y+24	; 0x18
    a366:	79 8d       	ldd	r23, Y+25	; 0x19
    a368:	c7 01       	movw	r24, r14
    a36a:	06 d8       	rcall	.-4084   	; 0x9378 <move_window>
    a36c:	00 97       	sbiw	r24, 0x00	; 0
    a36e:	a9 f4       	brne	.+42     	; 0xa39a <dir_alloc+0x5e>
    a370:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a372:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a374:	20 81       	ld	r18, Z
    a376:	25 3e       	cpi	r18, 0xE5	; 229
    a378:	11 f0       	breq	.+4      	; 0xa37e <dir_alloc+0x42>
    a37a:	21 11       	cpse	r18, r1
    a37c:	06 c0       	rjmp	.+12     	; 0xa38a <dir_alloc+0x4e>
    a37e:	0f 5f       	subi	r16, 0xFF	; 255
    a380:	1f 4f       	sbci	r17, 0xFF	; 255
    a382:	0c 15       	cp	r16, r12
    a384:	1d 05       	cpc	r17, r13
    a386:	19 f4       	brne	.+6      	; 0xa38e <dir_alloc+0x52>
    a388:	0d c0       	rjmp	.+26     	; 0xa3a4 <dir_alloc+0x68>
    a38a:	00 e0       	ldi	r16, 0x00	; 0
    a38c:	10 e0       	ldi	r17, 0x00	; 0
    a38e:	61 e0       	ldi	r22, 0x01	; 1
    a390:	70 e0       	ldi	r23, 0x00	; 0
    a392:	ce 01       	movw	r24, r28
    a394:	eb de       	rcall	.-554    	; 0xa16c <dir_next>
    a396:	00 97       	sbiw	r24, 0x00	; 0
    a398:	19 f3       	breq	.-58     	; 0xa360 <dir_alloc+0x24>
    a39a:	84 30       	cpi	r24, 0x04	; 4
    a39c:	91 05       	cpc	r25, r1
    a39e:	11 f4       	brne	.+4      	; 0xa3a4 <dir_alloc+0x68>
    a3a0:	87 e0       	ldi	r24, 0x07	; 7
    a3a2:	90 e0       	ldi	r25, 0x00	; 0
    a3a4:	cd b7       	in	r28, 0x3d	; 61
    a3a6:	de b7       	in	r29, 0x3e	; 62
    a3a8:	e8 e0       	ldi	r30, 0x08	; 8
    a3aa:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000a3ae <dir_read>:
    a3ae:	a0 e0       	ldi	r26, 0x00	; 0
    a3b0:	b0 e0       	ldi	r27, 0x00	; 0
    a3b2:	ed ed       	ldi	r30, 0xDD	; 221
    a3b4:	f1 e5       	ldi	r31, 0x51	; 81
    a3b6:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
    a3ba:	ec 01       	movw	r28, r24
    a3bc:	7b 01       	movw	r14, r22
    a3be:	a8 80       	ld	r10, Y
    a3c0:	b9 80       	ldd	r11, Y+1	; 0x01
    a3c2:	dd 24       	eor	r13, r13
    a3c4:	da 94       	dec	r13
    a3c6:	1f ef       	ldi	r17, 0xFF	; 255
    a3c8:	84 e0       	ldi	r24, 0x04	; 4
    a3ca:	90 e0       	ldi	r25, 0x00	; 0
    a3cc:	fd e0       	ldi	r31, 0x0D	; 13
    a3ce:	cf 2e       	mov	r12, r31
    a3d0:	4e 89       	ldd	r20, Y+22	; 0x16
    a3d2:	5f 89       	ldd	r21, Y+23	; 0x17
    a3d4:	68 8d       	ldd	r22, Y+24	; 0x18
    a3d6:	79 8d       	ldd	r23, Y+25	; 0x19
    a3d8:	41 15       	cp	r20, r1
    a3da:	51 05       	cpc	r21, r1
    a3dc:	61 05       	cpc	r22, r1
    a3de:	71 05       	cpc	r23, r1
    a3e0:	09 f4       	brne	.+2      	; 0xa3e4 <dir_read+0x36>
    a3e2:	9a c0       	rjmp	.+308    	; 0xa518 <dir_read+0x16a>
    a3e4:	c5 01       	movw	r24, r10
    a3e6:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    a3ea:	00 97       	sbiw	r24, 0x00	; 0
    a3ec:	09 f0       	breq	.+2      	; 0xa3f0 <dir_read+0x42>
    a3ee:	96 c0       	rjmp	.+300    	; 0xa51c <dir_read+0x16e>
    a3f0:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a3f2:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a3f4:	f4 01       	movw	r30, r8
    a3f6:	00 81       	ld	r16, Z
    a3f8:	00 23       	and	r16, r16
    a3fa:	09 f4       	brne	.+2      	; 0xa3fe <dir_read+0x50>
    a3fc:	97 c0       	rjmp	.+302    	; 0xa52c <dir_read+0x17e>
    a3fe:	83 85       	ldd	r24, Z+11	; 0x0b
    a400:	8f 73       	andi	r24, 0x3F	; 63
    a402:	8c 83       	std	Y+4, r24	; 0x04
    a404:	05 3e       	cpi	r16, 0xE5	; 229
    a406:	09 f4       	brne	.+2      	; 0xa40a <dir_read+0x5c>
    a408:	7e c0       	rjmp	.+252    	; 0xa506 <dir_read+0x158>
    a40a:	0e 32       	cpi	r16, 0x2E	; 46
    a40c:	09 f4       	brne	.+2      	; 0xa410 <dir_read+0x62>
    a40e:	7b c0       	rjmp	.+246    	; 0xa506 <dir_read+0x158>
    a410:	21 e0       	ldi	r18, 0x01	; 1
    a412:	30 e0       	ldi	r19, 0x00	; 0
    a414:	98 2f       	mov	r25, r24
    a416:	9f 71       	andi	r25, 0x1F	; 31
    a418:	98 30       	cpi	r25, 0x08	; 8
    a41a:	11 f0       	breq	.+4      	; 0xa420 <dir_read+0x72>
    a41c:	20 e0       	ldi	r18, 0x00	; 0
    a41e:	30 e0       	ldi	r19, 0x00	; 0
    a420:	2e 15       	cp	r18, r14
    a422:	3f 05       	cpc	r19, r15
    a424:	09 f0       	breq	.+2      	; 0xa428 <dir_read+0x7a>
    a426:	6f c0       	rjmp	.+222    	; 0xa506 <dir_read+0x158>
    a428:	8f 30       	cpi	r24, 0x0F	; 15
    a42a:	09 f0       	breq	.+2      	; 0xa42e <dir_read+0x80>
    a42c:	5c c0       	rjmp	.+184    	; 0xa4e6 <dir_read+0x138>
    a42e:	06 ff       	sbrs	r16, 6
    a430:	0c c0       	rjmp	.+24     	; 0xa44a <dir_read+0x9c>
    a432:	f4 01       	movw	r30, r8
    a434:	85 85       	ldd	r24, Z+13	; 0x0d
    a436:	0f 7b       	andi	r16, 0xBF	; 191
    a438:	4e 85       	ldd	r20, Y+14	; 0x0e
    a43a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a43c:	68 89       	ldd	r22, Y+16	; 0x10
    a43e:	79 89       	ldd	r23, Y+17	; 0x11
    a440:	48 a7       	std	Y+40, r20	; 0x28
    a442:	59 a7       	std	Y+41, r21	; 0x29
    a444:	6a a7       	std	Y+42, r22	; 0x2a
    a446:	7b a7       	std	Y+43, r23	; 0x2b
    a448:	03 c0       	rjmp	.+6      	; 0xa450 <dir_read+0xa2>
    a44a:	10 13       	cpse	r17, r16
    a44c:	5c c0       	rjmp	.+184    	; 0xa506 <dir_read+0x158>
    a44e:	8d 2d       	mov	r24, r13
    a450:	f4 01       	movw	r30, r8
    a452:	d5 84       	ldd	r13, Z+13	; 0x0d
    a454:	d8 12       	cpse	r13, r24
    a456:	56 c0       	rjmp	.+172    	; 0xa504 <dir_read+0x156>
    a458:	82 8d       	ldd	r24, Z+26	; 0x1a
    a45a:	93 8d       	ldd	r25, Z+27	; 0x1b
    a45c:	89 2b       	or	r24, r25
    a45e:	09 f0       	breq	.+2      	; 0xa462 <dir_read+0xb4>
    a460:	52 c0       	rjmp	.+164    	; 0xa506 <dir_read+0x158>
    a462:	f5 01       	movw	r30, r10
    a464:	63 85       	ldd	r22, Z+11	; 0x0b
    a466:	74 85       	ldd	r23, Z+12	; 0x0c
    a468:	f4 01       	movw	r30, r8
    a46a:	80 81       	ld	r24, Z
    a46c:	90 e0       	ldi	r25, 0x00	; 0
    a46e:	8f 7b       	andi	r24, 0xBF	; 191
    a470:	01 97       	sbiw	r24, 0x01	; 1
    a472:	c8 9e       	mul	r12, r24
    a474:	90 01       	movw	r18, r0
    a476:	c9 9e       	mul	r12, r25
    a478:	30 0d       	add	r19, r0
    a47a:	11 24       	eor	r1, r1
    a47c:	ab ee       	ldi	r26, 0xEB	; 235
    a47e:	b4 e0       	ldi	r27, 0x04	; 4
    a480:	81 e0       	ldi	r24, 0x01	; 1
    a482:	90 e0       	ldi	r25, 0x00	; 0
    a484:	4d 91       	ld	r20, X+
    a486:	f4 01       	movw	r30, r8
    a488:	e4 0f       	add	r30, r20
    a48a:	f1 1d       	adc	r31, r1
    a48c:	40 81       	ld	r20, Z
    a48e:	51 81       	ldd	r21, Z+1	; 0x01
    a490:	00 97       	sbiw	r24, 0x00	; 0
    a492:	81 f0       	breq	.+32     	; 0xa4b4 <dir_read+0x106>
    a494:	2f 3f       	cpi	r18, 0xFF	; 255
    a496:	31 05       	cpc	r19, r1
    a498:	09 f0       	breq	.+2      	; 0xa49c <dir_read+0xee>
    a49a:	a8 f5       	brcc	.+106    	; 0xa506 <dir_read+0x158>
    a49c:	c9 01       	movw	r24, r18
    a49e:	88 0f       	add	r24, r24
    a4a0:	99 1f       	adc	r25, r25
    a4a2:	86 0f       	add	r24, r22
    a4a4:	97 1f       	adc	r25, r23
    a4a6:	fc 01       	movw	r30, r24
    a4a8:	51 83       	std	Z+1, r21	; 0x01
    a4aa:	40 83       	st	Z, r20
    a4ac:	ca 01       	movw	r24, r20
    a4ae:	2f 5f       	subi	r18, 0xFF	; 255
    a4b0:	3f 4f       	sbci	r19, 0xFF	; 255
    a4b2:	03 c0       	rjmp	.+6      	; 0xa4ba <dir_read+0x10c>
    a4b4:	4f 3f       	cpi	r20, 0xFF	; 255
    a4b6:	5f 4f       	sbci	r21, 0xFF	; 255
    a4b8:	31 f5       	brne	.+76     	; 0xa506 <dir_read+0x158>
    a4ba:	44 e0       	ldi	r20, 0x04	; 4
    a4bc:	a8 3f       	cpi	r26, 0xF8	; 248
    a4be:	b4 07       	cpc	r27, r20
    a4c0:	09 f7       	brne	.-62     	; 0xa484 <dir_read+0xd6>
    a4c2:	f4 01       	movw	r30, r8
    a4c4:	40 81       	ld	r20, Z
    a4c6:	46 ff       	sbrs	r20, 6
    a4c8:	2e c0       	rjmp	.+92     	; 0xa526 <dir_read+0x178>
    a4ca:	89 2b       	or	r24, r25
    a4cc:	61 f1       	breq	.+88     	; 0xa526 <dir_read+0x178>
    a4ce:	2f 3f       	cpi	r18, 0xFF	; 255
    a4d0:	31 05       	cpc	r19, r1
    a4d2:	09 f0       	breq	.+2      	; 0xa4d6 <dir_read+0x128>
    a4d4:	c0 f4       	brcc	.+48     	; 0xa506 <dir_read+0x158>
    a4d6:	22 0f       	add	r18, r18
    a4d8:	33 1f       	adc	r19, r19
    a4da:	fb 01       	movw	r30, r22
    a4dc:	e2 0f       	add	r30, r18
    a4de:	f3 1f       	adc	r31, r19
    a4e0:	11 82       	std	Z+1, r1	; 0x01
    a4e2:	10 82       	st	Z, r1
    a4e4:	20 c0       	rjmp	.+64     	; 0xa526 <dir_read+0x178>
    a4e6:	11 11       	cpse	r17, r1
    a4e8:	05 c0       	rjmp	.+10     	; 0xa4f4 <dir_read+0x146>
    a4ea:	c4 01       	movw	r24, r8
    a4ec:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sum_sfn>
    a4f0:	d8 16       	cp	r13, r24
    a4f2:	f9 f0       	breq	.+62     	; 0xa532 <dir_read+0x184>
    a4f4:	8f ef       	ldi	r24, 0xFF	; 255
    a4f6:	9f ef       	ldi	r25, 0xFF	; 255
    a4f8:	dc 01       	movw	r26, r24
    a4fa:	88 a7       	std	Y+40, r24	; 0x28
    a4fc:	99 a7       	std	Y+41, r25	; 0x29
    a4fe:	aa a7       	std	Y+42, r26	; 0x2a
    a500:	bb a7       	std	Y+43, r27	; 0x2b
    a502:	17 c0       	rjmp	.+46     	; 0xa532 <dir_read+0x184>
    a504:	d8 2e       	mov	r13, r24
    a506:	1f ef       	ldi	r17, 0xFF	; 255
    a508:	60 e0       	ldi	r22, 0x00	; 0
    a50a:	70 e0       	ldi	r23, 0x00	; 0
    a50c:	ce 01       	movw	r24, r28
    a50e:	2e de       	rcall	.-932    	; 0xa16c <dir_next>
    a510:	00 97       	sbiw	r24, 0x00	; 0
    a512:	09 f4       	brne	.+2      	; 0xa516 <dir_read+0x168>
    a514:	5d cf       	rjmp	.-326    	; 0xa3d0 <dir_read+0x22>
    a516:	02 c0       	rjmp	.+4      	; 0xa51c <dir_read+0x16e>
    a518:	00 97       	sbiw	r24, 0x00	; 0
    a51a:	59 f0       	breq	.+22     	; 0xa532 <dir_read+0x184>
    a51c:	1e 8a       	std	Y+22, r1	; 0x16
    a51e:	1f 8a       	std	Y+23, r1	; 0x17
    a520:	18 8e       	std	Y+24, r1	; 0x18
    a522:	19 8e       	std	Y+25, r1	; 0x19
    a524:	08 c0       	rjmp	.+16     	; 0xa536 <dir_read+0x188>
    a526:	1f ef       	ldi	r17, 0xFF	; 255
    a528:	10 0f       	add	r17, r16
    a52a:	ee cf       	rjmp	.-36     	; 0xa508 <dir_read+0x15a>
    a52c:	84 e0       	ldi	r24, 0x04	; 4
    a52e:	90 e0       	ldi	r25, 0x00	; 0
    a530:	f5 cf       	rjmp	.-22     	; 0xa51c <dir_read+0x16e>
    a532:	80 e0       	ldi	r24, 0x00	; 0
    a534:	90 e0       	ldi	r25, 0x00	; 0
    a536:	cd b7       	in	r28, 0x3d	; 61
    a538:	de b7       	in	r29, 0x3e	; 62
    a53a:	ec e0       	ldi	r30, 0x0C	; 12
    a53c:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

0000a540 <dir_remove>:
    a540:	a0 e0       	ldi	r26, 0x00	; 0
    a542:	b0 e0       	ldi	r27, 0x00	; 0
    a544:	e6 ea       	ldi	r30, 0xA6	; 166
    a546:	f2 e5       	ldi	r31, 0x52	; 82
    a548:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
    a54c:	ec 01       	movw	r28, r24
    a54e:	08 81       	ld	r16, Y
    a550:	19 81       	ldd	r17, Y+1	; 0x01
    a552:	ce 84       	ldd	r12, Y+14	; 0x0e
    a554:	df 84       	ldd	r13, Y+15	; 0x0f
    a556:	e8 88       	ldd	r14, Y+16	; 0x10
    a558:	f9 88       	ldd	r15, Y+17	; 0x11
    a55a:	48 a5       	ldd	r20, Y+40	; 0x28
    a55c:	59 a5       	ldd	r21, Y+41	; 0x29
    a55e:	6a a5       	ldd	r22, Y+42	; 0x2a
    a560:	7b a5       	ldd	r23, Y+43	; 0x2b
    a562:	4f 3f       	cpi	r20, 0xFF	; 255
    a564:	8f ef       	ldi	r24, 0xFF	; 255
    a566:	58 07       	cpc	r21, r24
    a568:	68 07       	cpc	r22, r24
    a56a:	78 07       	cpc	r23, r24
    a56c:	29 f4       	brne	.+10     	; 0xa578 <dir_remove+0x38>
    a56e:	85 ee       	ldi	r24, 0xE5	; 229
    a570:	b8 2e       	mov	r11, r24
    a572:	aa 24       	eor	r10, r10
    a574:	a3 94       	inc	r10
    a576:	19 c0       	rjmp	.+50     	; 0xa5aa <dir_remove+0x6a>
    a578:	ce 01       	movw	r24, r28
    a57a:	80 db       	rcall	.-2304   	; 0x9c7c <dir_sdi>
    a57c:	00 97       	sbiw	r24, 0x00	; 0
    a57e:	19 f5       	brne	.+70     	; 0xa5c6 <dir_remove+0x86>
    a580:	f6 cf       	rjmp	.-20     	; 0xa56e <dir_remove+0x2e>
    a582:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a584:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a586:	b0 82       	st	Z, r11
    a588:	f8 01       	movw	r30, r16
    a58a:	a3 82       	std	Z+3, r10	; 0x03
    a58c:	4e 85       	ldd	r20, Y+14	; 0x0e
    a58e:	5f 85       	ldd	r21, Y+15	; 0x0f
    a590:	68 89       	ldd	r22, Y+16	; 0x10
    a592:	79 89       	ldd	r23, Y+17	; 0x11
    a594:	4c 15       	cp	r20, r12
    a596:	5d 05       	cpc	r21, r13
    a598:	6e 05       	cpc	r22, r14
    a59a:	7f 05       	cpc	r23, r15
    a59c:	a0 f4       	brcc	.+40     	; 0xa5c6 <dir_remove+0x86>
    a59e:	60 e0       	ldi	r22, 0x00	; 0
    a5a0:	70 e0       	ldi	r23, 0x00	; 0
    a5a2:	ce 01       	movw	r24, r28
    a5a4:	e3 dd       	rcall	.-1082   	; 0xa16c <dir_next>
    a5a6:	00 97       	sbiw	r24, 0x00	; 0
    a5a8:	49 f4       	brne	.+18     	; 0xa5bc <dir_remove+0x7c>
    a5aa:	4e 89       	ldd	r20, Y+22	; 0x16
    a5ac:	5f 89       	ldd	r21, Y+23	; 0x17
    a5ae:	68 8d       	ldd	r22, Y+24	; 0x18
    a5b0:	79 8d       	ldd	r23, Y+25	; 0x19
    a5b2:	c8 01       	movw	r24, r16
    a5b4:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    a5b8:	00 97       	sbiw	r24, 0x00	; 0
    a5ba:	19 f3       	breq	.-58     	; 0xa582 <dir_remove+0x42>
    a5bc:	84 30       	cpi	r24, 0x04	; 4
    a5be:	91 05       	cpc	r25, r1
    a5c0:	11 f4       	brne	.+4      	; 0xa5c6 <dir_remove+0x86>
    a5c2:	82 e0       	ldi	r24, 0x02	; 2
    a5c4:	90 e0       	ldi	r25, 0x00	; 0
    a5c6:	cd b7       	in	r28, 0x3d	; 61
    a5c8:	de b7       	in	r29, 0x3e	; 62
    a5ca:	ea e0       	ldi	r30, 0x0A	; 10
    a5cc:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0000a5d0 <dir_find>:
    a5d0:	ac e0       	ldi	r26, 0x0C	; 12
    a5d2:	b0 e0       	ldi	r27, 0x00	; 0
    a5d4:	ee ee       	ldi	r30, 0xEE	; 238
    a5d6:	f2 e5       	ldi	r31, 0x52	; 82
    a5d8:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    a5dc:	9c 87       	std	Y+12, r25	; 0x0c
    a5de:	8b 87       	std	Y+11, r24	; 0x0b
    a5e0:	fc 01       	movw	r30, r24
    a5e2:	01 90       	ld	r0, Z+
    a5e4:	f0 81       	ld	r31, Z
    a5e6:	e0 2d       	mov	r30, r0
    a5e8:	fc 83       	std	Y+4, r31	; 0x04
    a5ea:	eb 83       	std	Y+3, r30	; 0x03
    a5ec:	40 e0       	ldi	r20, 0x00	; 0
    a5ee:	50 e0       	ldi	r21, 0x00	; 0
    a5f0:	ba 01       	movw	r22, r20
    a5f2:	44 db       	rcall	.-2424   	; 0x9c7c <dir_sdi>
    a5f4:	00 97       	sbiw	r24, 0x00	; 0
    a5f6:	09 f0       	breq	.+2      	; 0xa5fa <dir_find+0x2a>
    a5f8:	e7 c0       	rjmp	.+462    	; 0xa7c8 <dir_find+0x1f8>
    a5fa:	8f ef       	ldi	r24, 0xFF	; 255
    a5fc:	9f ef       	ldi	r25, 0xFF	; 255
    a5fe:	dc 01       	movw	r26, r24
    a600:	eb 85       	ldd	r30, Y+11	; 0x0b
    a602:	fc 85       	ldd	r31, Y+12	; 0x0c
    a604:	80 a7       	std	Z+40, r24	; 0x28
    a606:	91 a7       	std	Z+41, r25	; 0x29
    a608:	a2 a7       	std	Z+42, r26	; 0x2a
    a60a:	b3 a7       	std	Z+43, r27	; 0x2b
    a60c:	0f ef       	ldi	r16, 0xFF	; 255
    a60e:	1f ef       	ldi	r17, 0xFF	; 255
    a610:	44 24       	eor	r4, r4
    a612:	4a 94       	dec	r4
    a614:	54 2c       	mov	r5, r4
    a616:	32 01       	movw	r6, r4
    a618:	7c 96       	adiw	r30, 0x1c	; 28
    a61a:	fa 87       	std	Y+10, r31	; 0x0a
    a61c:	e9 87       	std	Y+9, r30	; 0x09
    a61e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a620:	fc 85       	ldd	r31, Y+12	; 0x0c
    a622:	46 89       	ldd	r20, Z+22	; 0x16
    a624:	57 89       	ldd	r21, Z+23	; 0x17
    a626:	60 8d       	ldd	r22, Z+24	; 0x18
    a628:	71 8d       	ldd	r23, Z+25	; 0x19
    a62a:	8b 81       	ldd	r24, Y+3	; 0x03
    a62c:	9c 81       	ldd	r25, Y+4	; 0x04
    a62e:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    a632:	00 97       	sbiw	r24, 0x00	; 0
    a634:	09 f0       	breq	.+2      	; 0xa638 <dir_find+0x68>
    a636:	c8 c0       	rjmp	.+400    	; 0xa7c8 <dir_find+0x1f8>
    a638:	eb 85       	ldd	r30, Y+11	; 0x0b
    a63a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a63c:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a63e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a640:	f7 01       	movw	r30, r14
    a642:	d0 80       	ld	r13, Z
    a644:	dd 20       	and	r13, r13
    a646:	09 f4       	brne	.+2      	; 0xa64a <dir_find+0x7a>
    a648:	c1 c0       	rjmp	.+386    	; 0xa7cc <dir_find+0x1fc>
    a64a:	93 85       	ldd	r25, Z+11	; 0x0b
    a64c:	89 2f       	mov	r24, r25
    a64e:	8f 73       	andi	r24, 0x3F	; 63
    a650:	eb 85       	ldd	r30, Y+11	; 0x0b
    a652:	fc 85       	ldd	r31, Y+12	; 0x0c
    a654:	84 83       	std	Z+4, r24	; 0x04
    a656:	f5 ee       	ldi	r31, 0xE5	; 229
    a658:	df 16       	cp	r13, r31
    a65a:	09 f4       	brne	.+2      	; 0xa65e <dir_find+0x8e>
    a65c:	a6 c0       	rjmp	.+332    	; 0xa7aa <dir_find+0x1da>
    a65e:	93 ff       	sbrs	r25, 3
    a660:	04 c0       	rjmp	.+8      	; 0xa66a <dir_find+0x9a>
    a662:	8f 30       	cpi	r24, 0x0F	; 15
    a664:	09 f0       	breq	.+2      	; 0xa668 <dir_find+0x98>
    a666:	a1 c0       	rjmp	.+322    	; 0xa7aa <dir_find+0x1da>
    a668:	03 c0       	rjmp	.+6      	; 0xa670 <dir_find+0xa0>
    a66a:	8f 30       	cpi	r24, 0x0F	; 15
    a66c:	09 f0       	breq	.+2      	; 0xa670 <dir_find+0xa0>
    a66e:	88 c0       	rjmp	.+272    	; 0xa780 <dir_find+0x1b0>
    a670:	eb 85       	ldd	r30, Y+11	; 0x0b
    a672:	fc 85       	ldd	r31, Y+12	; 0x0c
    a674:	87 a1       	ldd	r24, Z+39	; 0x27
    a676:	86 fd       	sbrc	r24, 6
    a678:	9f c0       	rjmp	.+318    	; 0xa7b8 <dir_find+0x1e8>
    a67a:	d6 fe       	sbrs	r13, 6
    a67c:	10 c0       	rjmp	.+32     	; 0xa69e <dir_find+0xce>
    a67e:	f7 01       	movw	r30, r14
    a680:	05 85       	ldd	r16, Z+13	; 0x0d
    a682:	fd 2d       	mov	r31, r13
    a684:	ff 7b       	andi	r31, 0xBF	; 191
    a686:	df 2e       	mov	r13, r31
    a688:	eb 85       	ldd	r30, Y+11	; 0x0b
    a68a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a68c:	86 85       	ldd	r24, Z+14	; 0x0e
    a68e:	97 85       	ldd	r25, Z+15	; 0x0f
    a690:	a0 89       	ldd	r26, Z+16	; 0x10
    a692:	b1 89       	ldd	r27, Z+17	; 0x11
    a694:	80 a7       	std	Z+40, r24	; 0x28
    a696:	91 a7       	std	Z+41, r25	; 0x29
    a698:	a2 a7       	std	Z+42, r26	; 0x2a
    a69a:	b3 a7       	std	Z+43, r27	; 0x2b
    a69c:	02 c0       	rjmp	.+4      	; 0xa6a2 <dir_find+0xd2>
    a69e:	1d 11       	cpse	r17, r13
    a6a0:	8a c0       	rjmp	.+276    	; 0xa7b6 <dir_find+0x1e6>
    a6a2:	f7 01       	movw	r30, r14
    a6a4:	c5 84       	ldd	r12, Z+13	; 0x0d
    a6a6:	c0 12       	cpse	r12, r16
    a6a8:	86 c0       	rjmp	.+268    	; 0xa7b6 <dir_find+0x1e6>
    a6aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    a6ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    a6ae:	89 2b       	or	r24, r25
    a6b0:	09 f0       	breq	.+2      	; 0xa6b4 <dir_find+0xe4>
    a6b2:	91 c0       	rjmp	.+290    	; 0xa7d6 <dir_find+0x206>
    a6b4:	eb 81       	ldd	r30, Y+3	; 0x03
    a6b6:	fc 81       	ldd	r31, Y+4	; 0x04
    a6b8:	03 84       	ldd	r0, Z+11	; 0x0b
    a6ba:	f4 85       	ldd	r31, Z+12	; 0x0c
    a6bc:	e0 2d       	mov	r30, r0
    a6be:	fe 83       	std	Y+6, r31	; 0x06
    a6c0:	ed 83       	std	Y+5, r30	; 0x05
    a6c2:	f7 01       	movw	r30, r14
    a6c4:	80 81       	ld	r24, Z
    a6c6:	8f 73       	andi	r24, 0x3F	; 63
    a6c8:	90 e0       	ldi	r25, 0x00	; 0
    a6ca:	01 97       	sbiw	r24, 0x01	; 1
    a6cc:	fd e0       	ldi	r31, 0x0D	; 13
    a6ce:	f8 9f       	mul	r31, r24
    a6d0:	80 01       	movw	r16, r0
    a6d2:	f9 9f       	mul	r31, r25
    a6d4:	10 0d       	add	r17, r0
    a6d6:	11 24       	eor	r1, r1
    a6d8:	2b ee       	ldi	r18, 0xEB	; 235
    a6da:	34 e0       	ldi	r19, 0x04	; 4
    a6dc:	3a 83       	std	Y+2, r19	; 0x02
    a6de:	29 83       	std	Y+1, r18	; 0x01
    a6e0:	81 e0       	ldi	r24, 0x01	; 1
    a6e2:	90 e0       	ldi	r25, 0x00	; 0
    a6e4:	e9 81       	ldd	r30, Y+1	; 0x01
    a6e6:	fa 81       	ldd	r31, Y+2	; 0x02
    a6e8:	21 91       	ld	r18, Z+
    a6ea:	fa 83       	std	Y+2, r31	; 0x02
    a6ec:	e9 83       	std	Y+1, r30	; 0x01
    a6ee:	f7 01       	movw	r30, r14
    a6f0:	e2 0f       	add	r30, r18
    a6f2:	f1 1d       	adc	r31, r1
    a6f4:	20 80       	ld	r2, Z
    a6f6:	31 80       	ldd	r3, Z+1	; 0x01
    a6f8:	00 97       	sbiw	r24, 0x00	; 0
    a6fa:	39 f1       	breq	.+78     	; 0xa74a <dir_find+0x17a>
    a6fc:	0f 3f       	cpi	r16, 0xFF	; 255
    a6fe:	11 05       	cpc	r17, r1
    a700:	11 f0       	breq	.+4      	; 0xa706 <dir_find+0x136>
    a702:	08 f0       	brcs	.+2      	; 0xa706 <dir_find+0x136>
    a704:	68 c0       	rjmp	.+208    	; 0xa7d6 <dir_find+0x206>
    a706:	b1 01       	movw	r22, r2
    a708:	80 e0       	ldi	r24, 0x00	; 0
    a70a:	90 e0       	ldi	r25, 0x00	; 0
    a70c:	0e 94 80 67 	call	0xcf00	; 0xcf00 <ff_wtoupper>
    a710:	4b 01       	movw	r8, r22
    a712:	5c 01       	movw	r10, r24
    a714:	98 01       	movw	r18, r16
    a716:	2f 5f       	subi	r18, 0xFF	; 255
    a718:	3f 4f       	sbci	r19, 0xFF	; 255
    a71a:	38 87       	std	Y+8, r19	; 0x08
    a71c:	2f 83       	std	Y+7, r18	; 0x07
    a71e:	00 0f       	add	r16, r16
    a720:	11 1f       	adc	r17, r17
    a722:	ed 81       	ldd	r30, Y+5	; 0x05
    a724:	fe 81       	ldd	r31, Y+6	; 0x06
    a726:	e0 0f       	add	r30, r16
    a728:	f1 1f       	adc	r31, r17
    a72a:	60 81       	ld	r22, Z
    a72c:	71 81       	ldd	r23, Z+1	; 0x01
    a72e:	80 e0       	ldi	r24, 0x00	; 0
    a730:	90 e0       	ldi	r25, 0x00	; 0
    a732:	0e 94 80 67 	call	0xcf00	; 0xcf00 <ff_wtoupper>
    a736:	86 16       	cp	r8, r22
    a738:	97 06       	cpc	r9, r23
    a73a:	a8 06       	cpc	r10, r24
    a73c:	b9 06       	cpc	r11, r25
    a73e:	09 f0       	breq	.+2      	; 0xa742 <dir_find+0x172>
    a740:	4a c0       	rjmp	.+148    	; 0xa7d6 <dir_find+0x206>
    a742:	c1 01       	movw	r24, r2
    a744:	0f 81       	ldd	r16, Y+7	; 0x07
    a746:	18 85       	ldd	r17, Y+8	; 0x08
    a748:	05 c0       	rjmp	.+10     	; 0xa754 <dir_find+0x184>
    a74a:	3f ef       	ldi	r19, 0xFF	; 255
    a74c:	23 16       	cp	r2, r19
    a74e:	33 06       	cpc	r3, r19
    a750:	09 f0       	breq	.+2      	; 0xa754 <dir_find+0x184>
    a752:	41 c0       	rjmp	.+130    	; 0xa7d6 <dir_find+0x206>
    a754:	e9 81       	ldd	r30, Y+1	; 0x01
    a756:	fa 81       	ldd	r31, Y+2	; 0x02
    a758:	e8 5f       	subi	r30, 0xF8	; 248
    a75a:	f4 40       	sbci	r31, 0x04	; 4
    a75c:	19 f6       	brne	.-122    	; 0xa6e4 <dir_find+0x114>
    a75e:	f7 01       	movw	r30, r14
    a760:	20 81       	ld	r18, Z
    a762:	26 ff       	sbrs	r18, 6
    a764:	3a c0       	rjmp	.+116    	; 0xa7da <dir_find+0x20a>
    a766:	89 2b       	or	r24, r25
    a768:	c1 f1       	breq	.+112    	; 0xa7da <dir_find+0x20a>
    a76a:	00 0f       	add	r16, r16
    a76c:	11 1f       	adc	r17, r17
    a76e:	ed 81       	ldd	r30, Y+5	; 0x05
    a770:	fe 81       	ldd	r31, Y+6	; 0x06
    a772:	e0 0f       	add	r30, r16
    a774:	f1 1f       	adc	r31, r17
    a776:	80 81       	ld	r24, Z
    a778:	91 81       	ldd	r25, Z+1	; 0x01
    a77a:	89 2b       	or	r24, r25
    a77c:	71 f1       	breq	.+92     	; 0xa7da <dir_find+0x20a>
    a77e:	2b c0       	rjmp	.+86     	; 0xa7d6 <dir_find+0x206>
    a780:	11 11       	cpse	r17, r1
    a782:	05 c0       	rjmp	.+10     	; 0xa78e <dir_find+0x1be>
    a784:	c7 01       	movw	r24, r14
    a786:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sum_sfn>
    a78a:	08 17       	cp	r16, r24
    a78c:	09 f1       	breq	.+66     	; 0xa7d0 <dir_find+0x200>
    a78e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a790:	fc 85       	ldd	r31, Y+12	; 0x0c
    a792:	87 a1       	ldd	r24, Z+39	; 0x27
    a794:	80 fd       	sbrc	r24, 0
    a796:	09 c0       	rjmp	.+18     	; 0xa7aa <dir_find+0x1da>
    a798:	4b e0       	ldi	r20, 0x0B	; 11
    a79a:	50 e0       	ldi	r21, 0x00	; 0
    a79c:	69 85       	ldd	r22, Y+9	; 0x09
    a79e:	7a 85       	ldd	r23, Y+10	; 0x0a
    a7a0:	c7 01       	movw	r24, r14
    a7a2:	0e 94 1e 46 	call	0x8c3c	; 0x8c3c <mem_cmp>
    a7a6:	89 2b       	or	r24, r25
    a7a8:	99 f0       	breq	.+38     	; 0xa7d0 <dir_find+0x200>
    a7aa:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7ac:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7ae:	40 a6       	std	Z+40, r4	; 0x28
    a7b0:	51 a6       	std	Z+41, r5	; 0x29
    a7b2:	62 a6       	std	Z+42, r6	; 0x2a
    a7b4:	73 a6       	std	Z+43, r7	; 0x2b
    a7b6:	1f ef       	ldi	r17, 0xFF	; 255
    a7b8:	60 e0       	ldi	r22, 0x00	; 0
    a7ba:	70 e0       	ldi	r23, 0x00	; 0
    a7bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    a7be:	9c 85       	ldd	r25, Y+12	; 0x0c
    a7c0:	d5 dc       	rcall	.-1622   	; 0xa16c <dir_next>
    a7c2:	00 97       	sbiw	r24, 0x00	; 0
    a7c4:	09 f4       	brne	.+2      	; 0xa7c8 <dir_find+0x1f8>
    a7c6:	2b cf       	rjmp	.-426    	; 0xa61e <dir_find+0x4e>
    a7c8:	28 2f       	mov	r18, r24
    a7ca:	0b c0       	rjmp	.+22     	; 0xa7e2 <dir_find+0x212>
    a7cc:	24 e0       	ldi	r18, 0x04	; 4
    a7ce:	01 c0       	rjmp	.+2      	; 0xa7d2 <dir_find+0x202>
    a7d0:	20 e0       	ldi	r18, 0x00	; 0
    a7d2:	90 e0       	ldi	r25, 0x00	; 0
    a7d4:	06 c0       	rjmp	.+12     	; 0xa7e2 <dir_find+0x212>
    a7d6:	0c 2d       	mov	r16, r12
    a7d8:	ee cf       	rjmp	.-36     	; 0xa7b6 <dir_find+0x1e6>
    a7da:	1f ef       	ldi	r17, 0xFF	; 255
    a7dc:	1d 0d       	add	r17, r13
    a7de:	0c 2d       	mov	r16, r12
    a7e0:	eb cf       	rjmp	.-42     	; 0xa7b8 <dir_find+0x1e8>
    a7e2:	82 2f       	mov	r24, r18
    a7e4:	2c 96       	adiw	r28, 0x0c	; 12
    a7e6:	e2 e1       	ldi	r30, 0x12	; 18
    a7e8:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000a7ec <dir_register>:
    a7ec:	a6 e1       	ldi	r26, 0x16	; 22
    a7ee:	b0 e0       	ldi	r27, 0x00	; 0
    a7f0:	ec ef       	ldi	r30, 0xFC	; 252
    a7f2:	f3 e5       	ldi	r31, 0x53	; 83
    a7f4:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    a7f8:	fc 01       	movw	r30, r24
    a7fa:	27 a1       	ldd	r18, Z+39	; 0x27
    a7fc:	20 7a       	andi	r18, 0xA0	; 160
    a7fe:	09 f0       	breq	.+2      	; 0xa802 <dir_register+0x16>
    a800:	53 c1       	rjmp	.+678    	; 0xaaa8 <dir_register+0x2bc>
    a802:	c0 80       	ld	r12, Z
    a804:	d1 80       	ldd	r13, Z+1	; 0x01
    a806:	f6 01       	movw	r30, r12
    a808:	a3 85       	ldd	r26, Z+11	; 0x0b
    a80a:	b4 85       	ldd	r27, Z+12	; 0x0c
    a80c:	81 2c       	mov	r8, r1
    a80e:	91 2c       	mov	r9, r1
    a810:	2d 91       	ld	r18, X+
    a812:	3d 91       	ld	r19, X+
    a814:	23 2b       	or	r18, r19
    a816:	21 f0       	breq	.+8      	; 0xa820 <dir_register+0x34>
    a818:	ff ef       	ldi	r31, 0xFF	; 255
    a81a:	8f 1a       	sub	r8, r31
    a81c:	9f 0a       	sbc	r9, r31
    a81e:	f8 cf       	rjmp	.-16     	; 0xa810 <dir_register+0x24>
    a820:	8c 01       	movw	r16, r24
    a822:	5c 01       	movw	r10, r24
    a824:	2c e1       	ldi	r18, 0x1C	; 28
    a826:	a2 0e       	add	r10, r18
    a828:	b1 1c       	adc	r11, r1
    a82a:	4c e0       	ldi	r20, 0x0C	; 12
    a82c:	50 e0       	ldi	r21, 0x00	; 0
    a82e:	b5 01       	movw	r22, r10
    a830:	ce 01       	movw	r24, r28
    a832:	01 96       	adiw	r24, 0x01	; 1
    a834:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    a838:	8c 85       	ldd	r24, Y+12	; 0x0c
    a83a:	80 ff       	sbrs	r24, 0
    a83c:	94 c0       	rjmp	.+296    	; 0xa966 <dir_register+0x17a>
    a83e:	80 e4       	ldi	r24, 0x40	; 64
    a840:	f8 01       	movw	r30, r16
    a842:	87 a3       	std	Z+39, r24	; 0x27
    a844:	41 2c       	mov	r4, r1
    a846:	51 2c       	mov	r5, r1
    a848:	32 01       	movw	r6, r4
    a84a:	43 94       	inc	r4
    a84c:	72 01       	movw	r14, r4
    a84e:	f6 01       	movw	r30, r12
    a850:	23 84       	ldd	r2, Z+11	; 0x0b
    a852:	34 84       	ldd	r3, Z+12	; 0x0c
    a854:	4b e0       	ldi	r20, 0x0B	; 11
    a856:	50 e0       	ldi	r21, 0x00	; 0
    a858:	be 01       	movw	r22, r28
    a85a:	6f 5f       	subi	r22, 0xFF	; 255
    a85c:	7f 4f       	sbci	r23, 0xFF	; 255
    a85e:	c5 01       	movw	r24, r10
    a860:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    a864:	f6 e0       	ldi	r31, 0x06	; 6
    a866:	4f 16       	cp	r4, r31
    a868:	51 04       	cpc	r5, r1
    a86a:	18 f1       	brcs	.+70     	; 0xa8b2 <dir_register+0xc6>
    a86c:	f1 01       	movw	r30, r2
    a86e:	b3 01       	movw	r22, r6
    a870:	a2 01       	movw	r20, r4
    a872:	81 91       	ld	r24, Z+
    a874:	91 91       	ld	r25, Z+
    a876:	00 97       	sbiw	r24, 0x00	; 0
    a878:	d9 f0       	breq	.+54     	; 0xa8b0 <dir_register+0xc4>
    a87a:	20 e1       	ldi	r18, 0x10	; 16
    a87c:	30 e0       	ldi	r19, 0x00	; 0
    a87e:	44 0f       	add	r20, r20
    a880:	55 1f       	adc	r21, r21
    a882:	66 1f       	adc	r22, r22
    a884:	77 1f       	adc	r23, r23
    a886:	dc 01       	movw	r26, r24
    a888:	a1 70       	andi	r26, 0x01	; 1
    a88a:	bb 27       	eor	r27, r27
    a88c:	4a 0f       	add	r20, r26
    a88e:	5b 1f       	adc	r21, r27
    a890:	61 1d       	adc	r22, r1
    a892:	71 1d       	adc	r23, r1
    a894:	96 95       	lsr	r25
    a896:	87 95       	ror	r24
    a898:	60 ff       	sbrs	r22, 0
    a89a:	06 c0       	rjmp	.+12     	; 0xa8a8 <dir_register+0xbc>
    a89c:	a1 e2       	ldi	r26, 0x21	; 33
    a89e:	4a 27       	eor	r20, r26
    a8a0:	a0 e1       	ldi	r26, 0x10	; 16
    a8a2:	5a 27       	eor	r21, r26
    a8a4:	a1 e0       	ldi	r26, 0x01	; 1
    a8a6:	6a 27       	eor	r22, r26
    a8a8:	21 50       	subi	r18, 0x01	; 1
    a8aa:	31 09       	sbc	r19, r1
    a8ac:	41 f7       	brne	.-48     	; 0xa87e <dir_register+0x92>
    a8ae:	e1 cf       	rjmp	.-62     	; 0xa872 <dir_register+0x86>
    a8b0:	7a 01       	movw	r14, r20
    a8b2:	fe 01       	movw	r30, r28
    a8b4:	75 96       	adiw	r30, 0x15	; 21
    a8b6:	27 e0       	ldi	r18, 0x07	; 7
    a8b8:	30 e0       	ldi	r19, 0x00	; 0
    a8ba:	9e 2d       	mov	r25, r14
    a8bc:	9f 70       	andi	r25, 0x0F	; 15
    a8be:	80 e3       	ldi	r24, 0x30	; 48
    a8c0:	89 0f       	add	r24, r25
    a8c2:	8a 33       	cpi	r24, 0x3A	; 58
    a8c4:	10 f0       	brcs	.+4      	; 0xa8ca <dir_register+0xde>
    a8c6:	87 e3       	ldi	r24, 0x37	; 55
    a8c8:	89 0f       	add	r24, r25
    a8ca:	21 50       	subi	r18, 0x01	; 1
    a8cc:	31 09       	sbc	r19, r1
    a8ce:	82 93       	st	-Z, r24
    a8d0:	a4 e0       	ldi	r26, 0x04	; 4
    a8d2:	f6 94       	lsr	r15
    a8d4:	e7 94       	ror	r14
    a8d6:	aa 95       	dec	r26
    a8d8:	e1 f7       	brne	.-8      	; 0xa8d2 <dir_register+0xe6>
    a8da:	e1 14       	cp	r14, r1
    a8dc:	f1 04       	cpc	r15, r1
    a8de:	69 f7       	brne	.-38     	; 0xa8ba <dir_register+0xce>
    a8e0:	ed e0       	ldi	r30, 0x0D	; 13
    a8e2:	f0 e0       	ldi	r31, 0x00	; 0
    a8e4:	ec 0f       	add	r30, r28
    a8e6:	fd 1f       	adc	r31, r29
    a8e8:	e2 0f       	add	r30, r18
    a8ea:	f3 1f       	adc	r31, r19
    a8ec:	4e e7       	ldi	r20, 0x7E	; 126
    a8ee:	40 83       	st	Z, r20
    a8f0:	f5 01       	movw	r30, r10
    a8f2:	80 e0       	ldi	r24, 0x00	; 0
    a8f4:	90 e0       	ldi	r25, 0x00	; 0
    a8f6:	28 17       	cp	r18, r24
    a8f8:	39 07       	cpc	r19, r25
    a8fa:	29 f0       	breq	.+10     	; 0xa906 <dir_register+0x11a>
    a8fc:	41 91       	ld	r20, Z+
    a8fe:	40 32       	cpi	r20, 0x20	; 32
    a900:	11 f0       	breq	.+4      	; 0xa906 <dir_register+0x11a>
    a902:	01 96       	adiw	r24, 0x01	; 1
    a904:	f8 cf       	rjmp	.-16     	; 0xa8f6 <dir_register+0x10a>
    a906:	f5 01       	movw	r30, r10
    a908:	e8 0f       	add	r30, r24
    a90a:	f9 1f       	adc	r31, r25
    a90c:	28 30       	cpi	r18, 0x08	; 8
    a90e:	31 05       	cpc	r19, r1
    a910:	50 f4       	brcc	.+20     	; 0xa926 <dir_register+0x13a>
    a912:	ad e0       	ldi	r26, 0x0D	; 13
    a914:	b0 e0       	ldi	r27, 0x00	; 0
    a916:	ac 0f       	add	r26, r28
    a918:	bd 1f       	adc	r27, r29
    a91a:	a2 0f       	add	r26, r18
    a91c:	b3 1f       	adc	r27, r19
    a91e:	8c 91       	ld	r24, X
    a920:	2f 5f       	subi	r18, 0xFF	; 255
    a922:	3f 4f       	sbci	r19, 0xFF	; 255
    a924:	01 c0       	rjmp	.+2      	; 0xa928 <dir_register+0x13c>
    a926:	80 e2       	ldi	r24, 0x20	; 32
    a928:	81 93       	st	Z+, r24
    a92a:	cf 01       	movw	r24, r30
    a92c:	8a 19       	sub	r24, r10
    a92e:	9b 09       	sbc	r25, r11
    a930:	08 97       	sbiw	r24, 0x08	; 8
    a932:	60 f3       	brcs	.-40     	; 0xa90c <dir_register+0x120>
    a934:	c8 01       	movw	r24, r16
    a936:	4c de       	rcall	.-872    	; 0xa5d0 <dir_find>
    a938:	00 97       	sbiw	r24, 0x00	; 0
    a93a:	71 f4       	brne	.+28     	; 0xa958 <dir_register+0x16c>
    a93c:	8f ef       	ldi	r24, 0xFF	; 255
    a93e:	48 1a       	sub	r4, r24
    a940:	58 0a       	sbc	r5, r24
    a942:	68 0a       	sbc	r6, r24
    a944:	78 0a       	sbc	r7, r24
    a946:	94 e6       	ldi	r25, 0x64	; 100
    a948:	49 16       	cp	r4, r25
    a94a:	51 04       	cpc	r5, r1
    a94c:	61 04       	cpc	r6, r1
    a94e:	71 04       	cpc	r7, r1
    a950:	09 f0       	breq	.+2      	; 0xa954 <dir_register+0x168>
    a952:	7c cf       	rjmp	.-264    	; 0xa84c <dir_register+0x60>
    a954:	27 e0       	ldi	r18, 0x07	; 7
    a956:	a9 c0       	rjmp	.+338    	; 0xaaaa <dir_register+0x2be>
    a958:	84 30       	cpi	r24, 0x04	; 4
    a95a:	91 05       	cpc	r25, r1
    a95c:	09 f0       	breq	.+2      	; 0xa960 <dir_register+0x174>
    a95e:	ce c0       	rjmp	.+412    	; 0xaafc <dir_register+0x310>
    a960:	8c 85       	ldd	r24, Y+12	; 0x0c
    a962:	f8 01       	movw	r30, r16
    a964:	87 a3       	std	Z+39, r24	; 0x27
    a966:	8c 85       	ldd	r24, Y+12	; 0x0c
    a968:	81 ff       	sbrs	r24, 1
    a96a:	0b c0       	rjmp	.+22     	; 0xa982 <dir_register+0x196>
    a96c:	c4 01       	movw	r24, r8
    a96e:	0c 96       	adiw	r24, 0x0c	; 12
    a970:	6d e0       	ldi	r22, 0x0D	; 13
    a972:	70 e0       	ldi	r23, 0x00	; 0
    a974:	0e 94 58 e2 	call	0x1c4b0	; 0x1c4b0 <__udivmodhi4>
    a978:	7b 01       	movw	r14, r22
    a97a:	ff ef       	ldi	r31, 0xFF	; 255
    a97c:	ef 1a       	sub	r14, r31
    a97e:	ff 0a       	sbc	r15, r31
    a980:	03 c0       	rjmp	.+6      	; 0xa988 <dir_register+0x19c>
    a982:	ee 24       	eor	r14, r14
    a984:	e3 94       	inc	r14
    a986:	f1 2c       	mov	r15, r1
    a988:	b7 01       	movw	r22, r14
    a98a:	c8 01       	movw	r24, r16
    a98c:	d7 dc       	rcall	.-1618   	; 0xa33c <dir_alloc>
    a98e:	00 97       	sbiw	r24, 0x00	; 0
    a990:	09 f0       	breq	.+2      	; 0xa994 <dir_register+0x1a8>
    a992:	b4 c0       	rjmp	.+360    	; 0xaafc <dir_register+0x310>
    a994:	21 e0       	ldi	r18, 0x01	; 1
    a996:	e2 1a       	sub	r14, r18
    a998:	f1 08       	sbc	r15, r1
    a99a:	09 f4       	brne	.+2      	; 0xa99e <dir_register+0x1b2>
    a99c:	88 c0       	rjmp	.+272    	; 0xaaae <dir_register+0x2c2>
    a99e:	f8 01       	movw	r30, r16
    a9a0:	46 85       	ldd	r20, Z+14	; 0x0e
    a9a2:	57 85       	ldd	r21, Z+15	; 0x0f
    a9a4:	60 89       	ldd	r22, Z+16	; 0x10
    a9a6:	71 89       	ldd	r23, Z+17	; 0x11
    a9a8:	c7 01       	movw	r24, r14
    a9aa:	e5 e0       	ldi	r30, 0x05	; 5
    a9ac:	88 0f       	add	r24, r24
    a9ae:	99 1f       	adc	r25, r25
    a9b0:	ea 95       	dec	r30
    a9b2:	e1 f7       	brne	.-8      	; 0xa9ac <dir_register+0x1c0>
    a9b4:	48 1b       	sub	r20, r24
    a9b6:	59 0b       	sbc	r21, r25
    a9b8:	61 09       	sbc	r22, r1
    a9ba:	71 09       	sbc	r23, r1
    a9bc:	c8 01       	movw	r24, r16
    a9be:	5e d9       	rcall	.-3396   	; 0x9c7c <dir_sdi>
    a9c0:	00 97       	sbiw	r24, 0x00	; 0
    a9c2:	09 f0       	breq	.+2      	; 0xa9c6 <dir_register+0x1da>
    a9c4:	9b c0       	rjmp	.+310    	; 0xaafc <dir_register+0x310>
    a9c6:	c5 01       	movw	r24, r10
    a9c8:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sum_sfn>
    a9cc:	68 2e       	mov	r6, r24
    a9ce:	5f e0       	ldi	r21, 0x0F	; 15
    a9d0:	35 2e       	mov	r3, r21
    a9d2:	6d e0       	ldi	r22, 0x0D	; 13
    a9d4:	46 2e       	mov	r4, r22
    a9d6:	78 ef       	ldi	r23, 0xF8	; 248
    a9d8:	87 2e       	mov	r8, r23
    a9da:	74 e0       	ldi	r23, 0x04	; 4
    a9dc:	97 2e       	mov	r9, r23
    a9de:	55 24       	eor	r5, r5
    a9e0:	53 94       	inc	r5
    a9e2:	f8 01       	movw	r30, r16
    a9e4:	46 89       	ldd	r20, Z+22	; 0x16
    a9e6:	57 89       	ldd	r21, Z+23	; 0x17
    a9e8:	60 8d       	ldd	r22, Z+24	; 0x18
    a9ea:	71 8d       	ldd	r23, Z+25	; 0x19
    a9ec:	c6 01       	movw	r24, r12
    a9ee:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    a9f2:	00 97       	sbiw	r24, 0x00	; 0
    a9f4:	09 f0       	breq	.+2      	; 0xa9f8 <dir_register+0x20c>
    a9f6:	82 c0       	rjmp	.+260    	; 0xaafc <dir_register+0x310>
    a9f8:	f6 01       	movw	r30, r12
    a9fa:	63 85       	ldd	r22, Z+11	; 0x0b
    a9fc:	74 85       	ldd	r23, Z+12	; 0x0c
    a9fe:	f8 01       	movw	r30, r16
    aa00:	02 8c       	ldd	r0, Z+26	; 0x1a
    aa02:	f3 8d       	ldd	r31, Z+27	; 0x1b
    aa04:	e0 2d       	mov	r30, r0
    aa06:	fe 8b       	std	Y+22, r31	; 0x16
    aa08:	ed 8b       	std	Y+21, r30	; 0x15
    aa0a:	7e 2c       	mov	r7, r14
    aa0c:	65 86       	std	Z+13, r6	; 0x0d
    aa0e:	33 86       	std	Z+11, r3	; 0x0b
    aa10:	14 86       	std	Z+12, r1	; 0x0c
    aa12:	12 8e       	std	Z+26, r1	; 0x1a
    aa14:	13 8e       	std	Z+27, r1	; 0x1b
    aa16:	97 01       	movw	r18, r14
    aa18:	33 27       	eor	r19, r19
    aa1a:	21 50       	subi	r18, 0x01	; 1
    aa1c:	31 09       	sbc	r19, r1
    aa1e:	42 9e       	mul	r4, r18
    aa20:	c0 01       	movw	r24, r0
    aa22:	43 9e       	mul	r4, r19
    aa24:	90 0d       	add	r25, r0
    aa26:	11 24       	eor	r1, r1
    aa28:	ab ee       	ldi	r26, 0xEB	; 235
    aa2a:	b4 e0       	ldi	r27, 0x04	; 4
    aa2c:	20 e0       	ldi	r18, 0x00	; 0
    aa2e:	30 e0       	ldi	r19, 0x00	; 0
    aa30:	2f 3f       	cpi	r18, 0xFF	; 255
    aa32:	ff ef       	ldi	r31, 0xFF	; 255
    aa34:	3f 07       	cpc	r19, r31
    aa36:	49 f0       	breq	.+18     	; 0xaa4a <dir_register+0x25e>
    aa38:	9c 01       	movw	r18, r24
    aa3a:	22 0f       	add	r18, r18
    aa3c:	33 1f       	adc	r19, r19
    aa3e:	26 0f       	add	r18, r22
    aa40:	37 1f       	adc	r19, r23
    aa42:	f9 01       	movw	r30, r18
    aa44:	20 81       	ld	r18, Z
    aa46:	31 81       	ldd	r19, Z+1	; 0x01
    aa48:	01 96       	adiw	r24, 0x01	; 1
    aa4a:	4d 91       	ld	r20, X+
    aa4c:	ed 89       	ldd	r30, Y+21	; 0x15
    aa4e:	fe 89       	ldd	r31, Y+22	; 0x16
    aa50:	e4 0f       	add	r30, r20
    aa52:	f1 1d       	adc	r31, r1
    aa54:	20 83       	st	Z, r18
    aa56:	31 83       	std	Z+1, r19	; 0x01
    aa58:	21 15       	cp	r18, r1
    aa5a:	31 05       	cpc	r19, r1
    aa5c:	11 f4       	brne	.+4      	; 0xaa62 <dir_register+0x276>
    aa5e:	2f ef       	ldi	r18, 0xFF	; 255
    aa60:	3f ef       	ldi	r19, 0xFF	; 255
    aa62:	8a 16       	cp	r8, r26
    aa64:	9b 06       	cpc	r9, r27
    aa66:	21 f7       	brne	.-56     	; 0xaa30 <dir_register+0x244>
    aa68:	2f 3f       	cpi	r18, 0xFF	; 255
    aa6a:	3f 4f       	sbci	r19, 0xFF	; 255
    aa6c:	49 f0       	breq	.+18     	; 0xaa80 <dir_register+0x294>
    aa6e:	88 0f       	add	r24, r24
    aa70:	99 1f       	adc	r25, r25
    aa72:	db 01       	movw	r26, r22
    aa74:	a8 0f       	add	r26, r24
    aa76:	b9 1f       	adc	r27, r25
    aa78:	8d 91       	ld	r24, X+
    aa7a:	9c 91       	ld	r25, X
    aa7c:	89 2b       	or	r24, r25
    aa7e:	19 f4       	brne	.+6      	; 0xaa86 <dir_register+0x29a>
    aa80:	27 2d       	mov	r18, r7
    aa82:	20 64       	ori	r18, 0x40	; 64
    aa84:	72 2e       	mov	r7, r18
    aa86:	ed 89       	ldd	r30, Y+21	; 0x15
    aa88:	fe 89       	ldd	r31, Y+22	; 0x16
    aa8a:	70 82       	st	Z, r7
    aa8c:	f6 01       	movw	r30, r12
    aa8e:	53 82       	std	Z+3, r5	; 0x03
    aa90:	60 e0       	ldi	r22, 0x00	; 0
    aa92:	70 e0       	ldi	r23, 0x00	; 0
    aa94:	c8 01       	movw	r24, r16
    aa96:	6a db       	rcall	.-2348   	; 0xa16c <dir_next>
    aa98:	00 97       	sbiw	r24, 0x00	; 0
    aa9a:	81 f5       	brne	.+96     	; 0xaafc <dir_register+0x310>
    aa9c:	f1 e0       	ldi	r31, 0x01	; 1
    aa9e:	ef 1a       	sub	r14, r31
    aaa0:	f1 08       	sbc	r15, r1
    aaa2:	09 f0       	breq	.+2      	; 0xaaa6 <dir_register+0x2ba>
    aaa4:	9e cf       	rjmp	.-196    	; 0xa9e2 <dir_register+0x1f6>
    aaa6:	03 c0       	rjmp	.+6      	; 0xaaae <dir_register+0x2c2>
    aaa8:	26 e0       	ldi	r18, 0x06	; 6
    aaaa:	90 e0       	ldi	r25, 0x00	; 0
    aaac:	28 c0       	rjmp	.+80     	; 0xaafe <dir_register+0x312>
    aaae:	f8 01       	movw	r30, r16
    aab0:	46 89       	ldd	r20, Z+22	; 0x16
    aab2:	57 89       	ldd	r21, Z+23	; 0x17
    aab4:	60 8d       	ldd	r22, Z+24	; 0x18
    aab6:	71 8d       	ldd	r23, Z+25	; 0x19
    aab8:	c6 01       	movw	r24, r12
    aaba:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    aabe:	00 97       	sbiw	r24, 0x00	; 0
    aac0:	e9 f4       	brne	.+58     	; 0xaafc <dir_register+0x310>
    aac2:	40 e2       	ldi	r20, 0x20	; 32
    aac4:	50 e0       	ldi	r21, 0x00	; 0
    aac6:	60 e0       	ldi	r22, 0x00	; 0
    aac8:	70 e0       	ldi	r23, 0x00	; 0
    aaca:	f8 01       	movw	r30, r16
    aacc:	82 8d       	ldd	r24, Z+26	; 0x1a
    aace:	93 8d       	ldd	r25, Z+27	; 0x1b
    aad0:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <mem_set>
    aad4:	4b e0       	ldi	r20, 0x0B	; 11
    aad6:	50 e0       	ldi	r21, 0x00	; 0
    aad8:	b5 01       	movw	r22, r10
    aada:	f8 01       	movw	r30, r16
    aadc:	82 8d       	ldd	r24, Z+26	; 0x1a
    aade:	93 8d       	ldd	r25, Z+27	; 0x1b
    aae0:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    aae4:	f8 01       	movw	r30, r16
    aae6:	22 8d       	ldd	r18, Z+26	; 0x1a
    aae8:	33 8d       	ldd	r19, Z+27	; 0x1b
    aaea:	87 a1       	ldd	r24, Z+39	; 0x27
    aaec:	88 71       	andi	r24, 0x18	; 24
    aaee:	f9 01       	movw	r30, r18
    aaf0:	84 87       	std	Z+12, r24	; 0x0c
    aaf2:	81 e0       	ldi	r24, 0x01	; 1
    aaf4:	f6 01       	movw	r30, r12
    aaf6:	83 83       	std	Z+3, r24	; 0x03
    aaf8:	20 e0       	ldi	r18, 0x00	; 0
    aafa:	d7 cf       	rjmp	.-82     	; 0xaaaa <dir_register+0x2be>
    aafc:	28 2f       	mov	r18, r24
    aafe:	82 2f       	mov	r24, r18
    ab00:	66 96       	adiw	r28, 0x16	; 22
    ab02:	e2 e1       	ldi	r30, 0x12	; 18
    ab04:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000ab08 <follow_path>:
    ab08:	a8 e0       	ldi	r26, 0x08	; 8
    ab0a:	b0 e0       	ldi	r27, 0x00	; 0
    ab0c:	ea e8       	ldi	r30, 0x8A	; 138
    ab0e:	f5 e5       	ldi	r31, 0x55	; 85
    ab10:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    ab14:	8c 01       	movw	r16, r24
    ab16:	78 87       	std	Y+8, r23	; 0x08
    ab18:	6f 83       	std	Y+7, r22	; 0x07
    ab1a:	dc 01       	movw	r26, r24
    ab1c:	0d 90       	ld	r0, X+
    ab1e:	bc 91       	ld	r27, X
    ab20:	a0 2d       	mov	r26, r0
    ab22:	ba 83       	std	Y+2, r27	; 0x02
    ab24:	a9 83       	std	Y+1, r26	; 0x01
    ab26:	fb 01       	movw	r30, r22
    ab28:	80 81       	ld	r24, Z
    ab2a:	8f 32       	cpi	r24, 0x2F	; 47
    ab2c:	11 f0       	breq	.+4      	; 0xab32 <follow_path+0x2a>
    ab2e:	8c 35       	cpi	r24, 0x5C	; 92
    ab30:	19 f4       	brne	.+6      	; 0xab38 <follow_path+0x30>
    ab32:	2f 81       	ldd	r18, Y+7	; 0x07
    ab34:	38 85       	ldd	r19, Y+8	; 0x08
    ab36:	0c c0       	rjmp	.+24     	; 0xab50 <follow_path+0x48>
    ab38:	e9 81       	ldd	r30, Y+1	; 0x01
    ab3a:	fa 81       	ldd	r31, Y+2	; 0x02
    ab3c:	85 89       	ldd	r24, Z+21	; 0x15
    ab3e:	96 89       	ldd	r25, Z+22	; 0x16
    ab40:	a7 89       	ldd	r26, Z+23	; 0x17
    ab42:	b0 8d       	ldd	r27, Z+24	; 0x18
    ab44:	f8 01       	movw	r30, r16
    ab46:	86 83       	std	Z+6, r24	; 0x06
    ab48:	97 83       	std	Z+7, r25	; 0x07
    ab4a:	a0 87       	std	Z+8, r26	; 0x08
    ab4c:	b1 87       	std	Z+9, r27	; 0x09
    ab4e:	0f c0       	rjmp	.+30     	; 0xab6e <follow_path+0x66>
    ab50:	38 87       	std	Y+8, r19	; 0x08
    ab52:	2f 83       	std	Y+7, r18	; 0x07
    ab54:	d9 01       	movw	r26, r18
    ab56:	8c 91       	ld	r24, X
    ab58:	2f 5f       	subi	r18, 0xFF	; 255
    ab5a:	3f 4f       	sbci	r19, 0xFF	; 255
    ab5c:	8f 32       	cpi	r24, 0x2F	; 47
    ab5e:	c1 f3       	breq	.-16     	; 0xab50 <follow_path+0x48>
    ab60:	8c 35       	cpi	r24, 0x5C	; 92
    ab62:	b1 f3       	breq	.-20     	; 0xab50 <follow_path+0x48>
    ab64:	f8 01       	movw	r30, r16
    ab66:	16 82       	std	Z+6, r1	; 0x06
    ab68:	17 82       	std	Z+7, r1	; 0x07
    ab6a:	10 86       	std	Z+8, r1	; 0x08
    ab6c:	11 86       	std	Z+9, r1	; 0x09
    ab6e:	af 81       	ldd	r26, Y+7	; 0x07
    ab70:	b8 85       	ldd	r27, Y+8	; 0x08
    ab72:	8c 91       	ld	r24, X
    ab74:	80 32       	cpi	r24, 0x20	; 32
    ab76:	58 f0       	brcs	.+22     	; 0xab8e <follow_path+0x86>
    ab78:	f8 01       	movw	r30, r16
    ab7a:	7c 96       	adiw	r30, 0x1c	; 28
    ab7c:	fc 83       	std	Y+4, r31	; 0x04
    ab7e:	eb 83       	std	Y+3, r30	; 0x03
    ab80:	29 81       	ldd	r18, Y+1	; 0x01
    ab82:	3a 81       	ldd	r19, Y+2	; 0x02
    ab84:	2b 5c       	subi	r18, 0xCB	; 203
    ab86:	3f 4f       	sbci	r19, 0xFF	; 255
    ab88:	3e 83       	std	Y+6, r19	; 0x06
    ab8a:	2d 83       	std	Y+5, r18	; 0x05
    ab8c:	76 c0       	rjmp	.+236    	; 0xac7a <follow_path+0x172>
    ab8e:	80 e8       	ldi	r24, 0x80	; 128
    ab90:	f8 01       	movw	r30, r16
    ab92:	87 a3       	std	Z+39, r24	; 0x27
    ab94:	40 e0       	ldi	r20, 0x00	; 0
    ab96:	50 e0       	ldi	r21, 0x00	; 0
    ab98:	ba 01       	movw	r22, r20
    ab9a:	c8 01       	movw	r24, r16
    ab9c:	6f d8       	rcall	.-3874   	; 0x9c7c <dir_sdi>
    ab9e:	ec c1       	rjmp	.+984    	; 0xaf78 <follow_path+0x470>
    aba0:	65 eb       	ldi	r22, 0xB5	; 181
    aba2:	71 e0       	ldi	r23, 0x01	; 1
    aba4:	0e 94 6b 67 	call	0xced6	; 0xced6 <ff_oem2uni>
    aba8:	00 97       	sbiw	r24, 0x00	; 0
    abaa:	09 f4       	brne	.+2      	; 0xabae <follow_path+0xa6>
    abac:	b8 c1       	rjmp	.+880    	; 0xaf1e <follow_path+0x416>
    abae:	80 32       	cpi	r24, 0x20	; 32
    abb0:	91 05       	cpc	r25, r1
    abb2:	30 f1       	brcs	.+76     	; 0xac00 <follow_path+0xf8>
    abb4:	8f 32       	cpi	r24, 0x2F	; 47
    abb6:	91 05       	cpc	r25, r1
    abb8:	09 f4       	brne	.+2      	; 0xabbc <follow_path+0xb4>
    abba:	6b c0       	rjmp	.+214    	; 0xac92 <follow_path+0x18a>
    abbc:	8c 35       	cpi	r24, 0x5C	; 92
    abbe:	91 05       	cpc	r25, r1
    abc0:	09 f4       	brne	.+2      	; 0xabc4 <follow_path+0xbc>
    abc2:	67 c0       	rjmp	.+206    	; 0xac92 <follow_path+0x18a>
    abc4:	80 38       	cpi	r24, 0x80	; 128
    abc6:	91 05       	cpc	r25, r1
    abc8:	28 f4       	brcc	.+10     	; 0xabd4 <follow_path+0xcc>
    abca:	e7 e2       	ldi	r30, 0x27	; 39
    abcc:	f4 e0       	ldi	r31, 0x04	; 4
    abce:	21 91       	ld	r18, Z+
    abd0:	21 11       	cpse	r18, r1
    abd2:	61 c0       	rjmp	.+194    	; 0xac96 <follow_path+0x18e>
    abd4:	ef 81       	ldd	r30, Y+7	; 0x07
    abd6:	f8 85       	ldd	r31, Y+8	; 0x08
    abd8:	ef 3f       	cpi	r30, 0xFF	; 255
    abda:	f1 05       	cpc	r31, r1
    abdc:	09 f4       	brne	.+2      	; 0xabe0 <follow_path+0xd8>
    abde:	9f c1       	rjmp	.+830    	; 0xaf1e <follow_path+0x416>
    abe0:	31 96       	adiw	r30, 0x01	; 1
    abe2:	f8 87       	std	Y+8, r31	; 0x08
    abe4:	ef 83       	std	Y+7, r30	; 0x07
    abe6:	d6 01       	movw	r26, r12
    abe8:	8d 93       	st	X+, r24
    abea:	9d 93       	st	X+, r25
    abec:	6d 01       	movw	r12, r26
    abee:	bf ef       	ldi	r27, 0xFF	; 255
    abf0:	eb 1a       	sub	r14, r27
    abf2:	fb 0a       	sbc	r15, r27
    abf4:	f7 01       	movw	r30, r14
    abf6:	31 97       	sbiw	r30, 0x01	; 1
    abf8:	80 81       	ld	r24, Z
    abfa:	90 e0       	ldi	r25, 0x00	; 0
    abfc:	00 97       	sbiw	r24, 0x00	; 0
    abfe:	81 f6       	brne	.-96     	; 0xaba0 <follow_path+0x98>
    ac00:	74 e0       	ldi	r23, 0x04	; 4
    ac02:	37 2e       	mov	r3, r23
    ac04:	2f 81       	ldd	r18, Y+7	; 0x07
    ac06:	38 85       	ldd	r19, Y+8	; 0x08
    ac08:	22 0f       	add	r18, r18
    ac0a:	33 1f       	adc	r19, r19
    ac0c:	8f 81       	ldd	r24, Y+7	; 0x07
    ac0e:	98 85       	ldd	r25, Y+8	; 0x08
    ac10:	01 97       	sbiw	r24, 0x01	; 1
    ac12:	09 f0       	breq	.+2      	; 0xac16 <follow_path+0x10e>
    ac14:	51 c0       	rjmp	.+162    	; 0xacb8 <follow_path+0x1b0>
    ac16:	d5 01       	movw	r26, r10
    ac18:	8d 91       	ld	r24, X+
    ac1a:	9c 91       	ld	r25, X
    ac1c:	8e 97       	sbiw	r24, 0x2e	; 46
    ac1e:	09 f0       	breq	.+2      	; 0xac22 <follow_path+0x11a>
    ac20:	57 c0       	rjmp	.+174    	; 0xacd0 <follow_path+0x1c8>
    ac22:	f9 01       	movw	r30, r18
    ac24:	ea 0d       	add	r30, r10
    ac26:	fb 1d       	adc	r31, r11
    ac28:	11 82       	std	Z+1, r1	; 0x01
    ac2a:	10 82       	st	Z, r1
    ac2c:	f8 01       	movw	r30, r16
    ac2e:	7c 96       	adiw	r30, 0x1c	; 28
    ac30:	80 e0       	ldi	r24, 0x00	; 0
    ac32:	90 e0       	ldi	r25, 0x00	; 0
    ac34:	2f 81       	ldd	r18, Y+7	; 0x07
    ac36:	38 85       	ldd	r19, Y+8	; 0x08
    ac38:	82 17       	cp	r24, r18
    ac3a:	93 07       	cpc	r25, r19
    ac3c:	08 f0       	brcs	.+2      	; 0xac40 <follow_path+0x138>
    ac3e:	4c c0       	rjmp	.+152    	; 0xacd8 <follow_path+0x1d0>
    ac40:	2e e2       	ldi	r18, 0x2E	; 46
    ac42:	21 93       	st	Z+, r18
    ac44:	01 96       	adiw	r24, 0x01	; 1
    ac46:	8b 30       	cpi	r24, 0x0B	; 11
    ac48:	91 05       	cpc	r25, r1
    ac4a:	a1 f7       	brne	.-24     	; 0xac34 <follow_path+0x12c>
    ac4c:	83 2d       	mov	r24, r3
    ac4e:	80 62       	ori	r24, 0x20	; 32
    ac50:	f8 01       	movw	r30, r16
    ac52:	87 a3       	std	Z+39, r24	; 0x27
    ac54:	c8 01       	movw	r24, r16
    ac56:	bc dc       	rcall	.-1672   	; 0xa5d0 <dir_find>
    ac58:	f8 01       	movw	r30, r16
    ac5a:	27 a1       	ldd	r18, Z+39	; 0x27
    ac5c:	00 97       	sbiw	r24, 0x00	; 0
    ac5e:	09 f4       	brne	.+2      	; 0xac62 <follow_path+0x15a>
    ac60:	6a c1       	rjmp	.+724    	; 0xaf36 <follow_path+0x42e>
    ac62:	84 30       	cpi	r24, 0x04	; 4
    ac64:	91 05       	cpc	r25, r1
    ac66:	09 f0       	breq	.+2      	; 0xac6a <follow_path+0x162>
    ac68:	87 c1       	rjmp	.+782    	; 0xaf78 <follow_path+0x470>
    ac6a:	32 2f       	mov	r19, r18
    ac6c:	34 70       	andi	r19, 0x04	; 4
    ac6e:	25 ff       	sbrs	r18, 5
    ac70:	5f c1       	rjmp	.+702    	; 0xaf30 <follow_path+0x428>
    ac72:	31 11       	cpse	r19, r1
    ac74:	57 c1       	rjmp	.+686    	; 0xaf24 <follow_path+0x41c>
    ac76:	f8 86       	std	Y+8, r15	; 0x08
    ac78:	ef 82       	std	Y+7, r14	; 0x07
    ac7a:	d8 01       	movw	r26, r16
    ac7c:	ed 91       	ld	r30, X+
    ac7e:	fc 91       	ld	r31, X
    ac80:	a3 84       	ldd	r10, Z+11	; 0x0b
    ac82:	b4 84       	ldd	r11, Z+12	; 0x0c
    ac84:	45 01       	movw	r8, r10
    ac86:	65 01       	movw	r12, r10
    ac88:	ef 80       	ldd	r14, Y+7	; 0x07
    ac8a:	f8 84       	ldd	r15, Y+8	; 0x08
    ac8c:	18 86       	std	Y+8, r1	; 0x08
    ac8e:	1f 82       	std	Y+7, r1	; 0x07
    ac90:	ae cf       	rjmp	.-164    	; 0xabee <follow_path+0xe6>
    ac92:	97 01       	movw	r18, r14
    ac94:	06 c0       	rjmp	.+12     	; 0xaca2 <follow_path+0x19a>
    ac96:	30 e0       	ldi	r19, 0x00	; 0
    ac98:	82 17       	cp	r24, r18
    ac9a:	93 07       	cpc	r25, r19
    ac9c:	09 f0       	breq	.+2      	; 0xaca0 <follow_path+0x198>
    ac9e:	97 cf       	rjmp	.-210    	; 0xabce <follow_path+0xc6>
    aca0:	3e c1       	rjmp	.+636    	; 0xaf1e <follow_path+0x416>
    aca2:	79 01       	movw	r14, r18
    aca4:	f9 01       	movw	r30, r18
    aca6:	80 81       	ld	r24, Z
    aca8:	2f 5f       	subi	r18, 0xFF	; 255
    acaa:	3f 4f       	sbci	r19, 0xFF	; 255
    acac:	8f 32       	cpi	r24, 0x2F	; 47
    acae:	c9 f3       	breq	.-14     	; 0xaca2 <follow_path+0x19a>
    acb0:	8c 35       	cpi	r24, 0x5C	; 92
    acb2:	b9 f3       	breq	.-18     	; 0xaca2 <follow_path+0x19a>
    acb4:	31 2c       	mov	r3, r1
    acb6:	a6 cf       	rjmp	.-180    	; 0xac04 <follow_path+0xfc>
    acb8:	ef 81       	ldd	r30, Y+7	; 0x07
    acba:	f8 85       	ldd	r31, Y+8	; 0x08
    acbc:	32 97       	sbiw	r30, 0x02	; 2
    acbe:	41 f4       	brne	.+16     	; 0xacd0 <follow_path+0x1c8>
    acc0:	f5 01       	movw	r30, r10
    acc2:	82 81       	ldd	r24, Z+2	; 0x02
    acc4:	93 81       	ldd	r25, Z+3	; 0x03
    acc6:	8e 97       	sbiw	r24, 0x2e	; 46
    acc8:	19 f4       	brne	.+6      	; 0xacd0 <follow_path+0x1c8>
    acca:	80 81       	ld	r24, Z
    accc:	91 81       	ldd	r25, Z+1	; 0x01
    acce:	a6 cf       	rjmp	.-180    	; 0xac1c <follow_path+0x114>
    acd0:	f9 01       	movw	r30, r18
    acd2:	ea 0d       	add	r30, r10
    acd4:	fb 1d       	adc	r31, r11
    acd6:	0d c0       	rjmp	.+26     	; 0xacf2 <follow_path+0x1ea>
    acd8:	20 e2       	ldi	r18, 0x20	; 32
    acda:	b3 cf       	rjmp	.-154    	; 0xac42 <follow_path+0x13a>
    acdc:	92 91       	ld	r25, -Z
    acde:	82 91       	ld	r24, -Z
    ace0:	80 32       	cpi	r24, 0x20	; 32
    ace2:	91 05       	cpc	r25, r1
    ace4:	59 f4       	brne	.+22     	; 0xacfc <follow_path+0x1f4>
    ace6:	2f 81       	ldd	r18, Y+7	; 0x07
    ace8:	38 85       	ldd	r19, Y+8	; 0x08
    acea:	21 50       	subi	r18, 0x01	; 1
    acec:	31 09       	sbc	r19, r1
    acee:	38 87       	std	Y+8, r19	; 0x08
    acf0:	2f 83       	std	Y+7, r18	; 0x07
    acf2:	8f 81       	ldd	r24, Y+7	; 0x07
    acf4:	98 85       	ldd	r25, Y+8	; 0x08
    acf6:	89 2b       	or	r24, r25
    acf8:	89 f7       	brne	.-30     	; 0xacdc <follow_path+0x1d4>
    acfa:	02 c0       	rjmp	.+4      	; 0xad00 <follow_path+0x1f8>
    acfc:	8e 97       	sbiw	r24, 0x2e	; 46
    acfe:	99 f3       	breq	.-26     	; 0xace6 <follow_path+0x1de>
    ad00:	ef 81       	ldd	r30, Y+7	; 0x07
    ad02:	f8 85       	ldd	r31, Y+8	; 0x08
    ad04:	ee 0f       	add	r30, r30
    ad06:	ff 1f       	adc	r31, r31
    ad08:	ea 0d       	add	r30, r10
    ad0a:	fb 1d       	adc	r31, r11
    ad0c:	11 82       	std	Z+1, r1	; 0x01
    ad0e:	10 82       	st	Z, r1
    ad10:	af 81       	ldd	r26, Y+7	; 0x07
    ad12:	b8 85       	ldd	r27, Y+8	; 0x08
    ad14:	ab 2b       	or	r26, r27
    ad16:	09 f4       	brne	.+2      	; 0xad1a <follow_path+0x212>
    ad18:	02 c1       	rjmp	.+516    	; 0xaf1e <follow_path+0x416>
    ad1a:	61 2c       	mov	r6, r1
    ad1c:	71 2c       	mov	r7, r1
    ad1e:	d4 01       	movw	r26, r8
    ad20:	8d 91       	ld	r24, X+
    ad22:	9d 91       	ld	r25, X+
    ad24:	4d 01       	movw	r8, r26
    ad26:	80 32       	cpi	r24, 0x20	; 32
    ad28:	91 05       	cpc	r25, r1
    ad2a:	21 f4       	brne	.+8      	; 0xad34 <follow_path+0x22c>
    ad2c:	bf ef       	ldi	r27, 0xFF	; 255
    ad2e:	6b 1a       	sub	r6, r27
    ad30:	7b 0a       	sbc	r7, r27
    ad32:	f5 cf       	rjmp	.-22     	; 0xad1e <follow_path+0x216>
    ad34:	61 14       	cp	r6, r1
    ad36:	71 04       	cpc	r7, r1
    ad38:	11 f4       	brne	.+4      	; 0xad3e <follow_path+0x236>
    ad3a:	8e 97       	sbiw	r24, 0x2e	; 46
    ad3c:	61 f4       	brne	.+24     	; 0xad56 <follow_path+0x24e>
    ad3e:	b3 2d       	mov	r27, r3
    ad40:	b3 60       	ori	r27, 0x03	; 3
    ad42:	3b 2e       	mov	r3, r27
    ad44:	08 c0       	rjmp	.+16     	; 0xad56 <follow_path+0x24e>
    ad46:	2f 81       	ldd	r18, Y+7	; 0x07
    ad48:	38 85       	ldd	r19, Y+8	; 0x08
    ad4a:	21 50       	subi	r18, 0x01	; 1
    ad4c:	31 09       	sbc	r19, r1
    ad4e:	38 87       	std	Y+8, r19	; 0x08
    ad50:	2f 83       	std	Y+7, r18	; 0x07
    ad52:	23 2b       	or	r18, r19
    ad54:	21 f0       	breq	.+8      	; 0xad5e <follow_path+0x256>
    ad56:	92 91       	ld	r25, -Z
    ad58:	82 91       	ld	r24, -Z
    ad5a:	8e 97       	sbiw	r24, 0x2e	; 46
    ad5c:	a1 f7       	brne	.-24     	; 0xad46 <follow_path+0x23e>
    ad5e:	4b e0       	ldi	r20, 0x0B	; 11
    ad60:	50 e0       	ldi	r21, 0x00	; 0
    ad62:	60 e2       	ldi	r22, 0x20	; 32
    ad64:	70 e0       	ldi	r23, 0x00	; 0
    ad66:	8b 81       	ldd	r24, Y+3	; 0x03
    ad68:	9c 81       	ldd	r25, Y+4	; 0x04
    ad6a:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <mem_set>
    ad6e:	48 e0       	ldi	r20, 0x08	; 8
    ad70:	84 2e       	mov	r8, r20
    ad72:	91 2c       	mov	r9, r1
    ad74:	c1 2c       	mov	r12, r1
    ad76:	d1 2c       	mov	r13, r1
    ad78:	21 2c       	mov	r2, r1
    ad7a:	23 01       	movw	r4, r6
    ad7c:	3f ef       	ldi	r19, 0xFF	; 255
    ad7e:	43 1a       	sub	r4, r19
    ad80:	53 0a       	sbc	r5, r19
    ad82:	66 0c       	add	r6, r6
    ad84:	77 1c       	adc	r7, r7
    ad86:	f5 01       	movw	r30, r10
    ad88:	e6 0d       	add	r30, r6
    ad8a:	f7 1d       	adc	r31, r7
    ad8c:	80 81       	ld	r24, Z
    ad8e:	91 81       	ldd	r25, Z+1	; 0x01
    ad90:	00 97       	sbiw	r24, 0x00	; 0
    ad92:	09 f4       	brne	.+2      	; 0xad96 <follow_path+0x28e>
    ad94:	9e c0       	rjmp	.+316    	; 0xaed2 <follow_path+0x3ca>
    ad96:	80 32       	cpi	r24, 0x20	; 32
    ad98:	91 05       	cpc	r25, r1
    ad9a:	41 f0       	breq	.+16     	; 0xadac <follow_path+0x2a4>
    ad9c:	8e 32       	cpi	r24, 0x2E	; 46
    ad9e:	91 05       	cpc	r25, r1
    ada0:	51 f4       	brne	.+20     	; 0xadb6 <follow_path+0x2ae>
    ada2:	8f 81       	ldd	r24, Y+7	; 0x07
    ada4:	98 85       	ldd	r25, Y+8	; 0x08
    ada6:	84 15       	cp	r24, r4
    ada8:	95 05       	cpc	r25, r5
    adaa:	71 f0       	breq	.+28     	; 0xadc8 <follow_path+0x2c0>
    adac:	93 2d       	mov	r25, r3
    adae:	93 60       	ori	r25, 0x03	; 3
    adb0:	39 2e       	mov	r3, r25
    adb2:	32 01       	movw	r6, r4
    adb4:	e2 cf       	rjmp	.-60     	; 0xad7a <follow_path+0x272>
    adb6:	c8 14       	cp	r12, r8
    adb8:	d9 04       	cpc	r13, r9
    adba:	50 f4       	brcc	.+20     	; 0xadd0 <follow_path+0x2c8>
    adbc:	af 81       	ldd	r26, Y+7	; 0x07
    adbe:	b8 85       	ldd	r27, Y+8	; 0x08
    adc0:	a4 15       	cp	r26, r4
    adc2:	b5 05       	cpc	r27, r5
    adc4:	49 f5       	brne	.+82     	; 0xae18 <follow_path+0x310>
    adc6:	d2 c0       	rjmp	.+420    	; 0xaf6c <follow_path+0x464>
    adc8:	c8 14       	cp	r12, r8
    adca:	d9 04       	cpc	r13, r9
    adcc:	08 f4       	brcc	.+2      	; 0xadd0 <follow_path+0x2c8>
    adce:	ce c0       	rjmp	.+412    	; 0xaf6c <follow_path+0x464>
    add0:	bb e0       	ldi	r27, 0x0B	; 11
    add2:	8b 16       	cp	r8, r27
    add4:	91 04       	cpc	r9, r1
    add6:	39 f4       	brne	.+14     	; 0xade6 <follow_path+0x2de>
    add8:	e3 2d       	mov	r30, r3
    adda:	e3 60       	ori	r30, 0x03	; 3
    addc:	3e 2e       	mov	r3, r30
    adde:	2b e0       	ldi	r18, 0x0B	; 11
    ade0:	82 2e       	mov	r8, r18
    ade2:	91 2c       	mov	r9, r1
    ade4:	76 c0       	rjmp	.+236    	; 0xaed2 <follow_path+0x3ca>
    ade6:	2f 81       	ldd	r18, Y+7	; 0x07
    ade8:	38 85       	ldd	r19, Y+8	; 0x08
    adea:	24 15       	cp	r18, r4
    adec:	35 05       	cpc	r19, r5
    adee:	49 f0       	breq	.+18     	; 0xae02 <follow_path+0x2fa>
    adf0:	33 2d       	mov	r19, r3
    adf2:	33 60       	ori	r19, 0x03	; 3
    adf4:	33 2e       	mov	r3, r19
    adf6:	8f 81       	ldd	r24, Y+7	; 0x07
    adf8:	98 85       	ldd	r25, Y+8	; 0x08
    adfa:	84 15       	cp	r24, r4
    adfc:	95 05       	cpc	r25, r5
    adfe:	08 f4       	brcc	.+2      	; 0xae02 <follow_path+0x2fa>
    ae00:	68 c0       	rjmp	.+208    	; 0xaed2 <follow_path+0x3ca>
    ae02:	22 0c       	add	r2, r2
    ae04:	22 0c       	add	r2, r2
    ae06:	4f 80       	ldd	r4, Y+7	; 0x07
    ae08:	58 84       	ldd	r5, Y+8	; 0x08
    ae0a:	8b e0       	ldi	r24, 0x0B	; 11
    ae0c:	88 2e       	mov	r8, r24
    ae0e:	91 2c       	mov	r9, r1
    ae10:	98 e0       	ldi	r25, 0x08	; 8
    ae12:	c9 2e       	mov	r12, r25
    ae14:	d1 2c       	mov	r13, r1
    ae16:	cd cf       	rjmp	.-102    	; 0xadb2 <follow_path+0x2aa>
    ae18:	80 38       	cpi	r24, 0x80	; 128
    ae1a:	91 05       	cpc	r25, r1
    ae1c:	70 f1       	brcs	.+92     	; 0xae7a <follow_path+0x372>
    ae1e:	a3 2d       	mov	r26, r3
    ae20:	a2 60       	ori	r26, 0x02	; 2
    ae22:	7a 2e       	mov	r7, r26
    ae24:	bc 01       	movw	r22, r24
    ae26:	80 e0       	ldi	r24, 0x00	; 0
    ae28:	90 e0       	ldi	r25, 0x00	; 0
    ae2a:	45 eb       	ldi	r20, 0xB5	; 181
    ae2c:	51 e0       	ldi	r21, 0x01	; 1
    ae2e:	0e 94 38 67 	call	0xce70	; 0xce70 <ff_uni2oem>
    ae32:	87 ff       	sbrs	r24, 7
    ae34:	08 c0       	rjmp	.+16     	; 0xae46 <follow_path+0x33e>
    ae36:	8f 77       	andi	r24, 0x7F	; 127
    ae38:	99 27       	eor	r25, r25
    ae3a:	fc 01       	movw	r30, r24
    ae3c:	e5 59       	subi	r30, 0x95	; 149
    ae3e:	fb 4f       	sbci	r31, 0xFB	; 251
    ae40:	80 81       	ld	r24, Z
    ae42:	90 e0       	ldi	r25, 0x00	; 0
    ae44:	17 c0       	rjmp	.+46     	; 0xae74 <follow_path+0x36c>
    ae46:	8f 3f       	cpi	r24, 0xFF	; 255
    ae48:	91 05       	cpc	r25, r1
    ae4a:	a1 f0       	breq	.+40     	; 0xae74 <follow_path+0x36c>
    ae4c:	98 f0       	brcs	.+38     	; 0xae74 <follow_path+0x36c>
    ae4e:	94 01       	movw	r18, r8
    ae50:	21 50       	subi	r18, 0x01	; 1
    ae52:	31 09       	sbc	r19, r1
    ae54:	c2 16       	cp	r12, r18
    ae56:	d3 06       	cpc	r13, r19
    ae58:	28 f0       	brcs	.+10     	; 0xae64 <follow_path+0x35c>
    ae5a:	b3 2d       	mov	r27, r3
    ae5c:	b3 60       	ori	r27, 0x03	; 3
    ae5e:	3b 2e       	mov	r3, r27
    ae60:	64 01       	movw	r12, r8
    ae62:	a7 cf       	rjmp	.-178    	; 0xadb2 <follow_path+0x2aa>
    ae64:	f8 01       	movw	r30, r16
    ae66:	ec 0d       	add	r30, r12
    ae68:	fd 1d       	adc	r31, r13
    ae6a:	94 8f       	std	Z+28, r25	; 0x1c
    ae6c:	f6 01       	movw	r30, r12
    ae6e:	31 96       	adiw	r30, 0x01	; 1
    ae70:	6f 01       	movw	r12, r30
    ae72:	26 c0       	rjmp	.+76     	; 0xaec0 <follow_path+0x3b8>
    ae74:	00 97       	sbiw	r24, 0x00	; 0
    ae76:	59 f0       	breq	.+22     	; 0xae8e <follow_path+0x386>
    ae78:	01 c0       	rjmp	.+2      	; 0xae7c <follow_path+0x374>
    ae7a:	73 2c       	mov	r7, r3
    ae7c:	e0 e3       	ldi	r30, 0x30	; 48
    ae7e:	f4 e0       	ldi	r31, 0x04	; 4
    ae80:	21 91       	ld	r18, Z+
    ae82:	22 23       	and	r18, r18
    ae84:	51 f0       	breq	.+20     	; 0xae9a <follow_path+0x392>
    ae86:	30 e0       	ldi	r19, 0x00	; 0
    ae88:	82 17       	cp	r24, r18
    ae8a:	93 07       	cpc	r25, r19
    ae8c:	c9 f7       	brne	.-14     	; 0xae80 <follow_path+0x378>
    ae8e:	f7 2d       	mov	r31, r7
    ae90:	f3 60       	ori	r31, 0x03	; 3
    ae92:	7f 2e       	mov	r7, r31
    ae94:	8f e5       	ldi	r24, 0x5F	; 95
    ae96:	90 e0       	ldi	r25, 0x00	; 0
    ae98:	13 c0       	rjmp	.+38     	; 0xaec0 <follow_path+0x3b8>
    ae9a:	9c 01       	movw	r18, r24
    ae9c:	21 54       	subi	r18, 0x41	; 65
    ae9e:	31 09       	sbc	r19, r1
    aea0:	2a 31       	cpi	r18, 0x1A	; 26
    aea2:	31 05       	cpc	r19, r1
    aea4:	18 f4       	brcc	.+6      	; 0xaeac <follow_path+0x3a4>
    aea6:	22 2d       	mov	r18, r2
    aea8:	22 60       	ori	r18, 0x02	; 2
    aeaa:	22 2e       	mov	r2, r18
    aeac:	9c 01       	movw	r18, r24
    aeae:	21 56       	subi	r18, 0x61	; 97
    aeb0:	31 09       	sbc	r19, r1
    aeb2:	2a 31       	cpi	r18, 0x1A	; 26
    aeb4:	31 05       	cpc	r19, r1
    aeb6:	20 f4       	brcc	.+8      	; 0xaec0 <follow_path+0x3b8>
    aeb8:	32 2d       	mov	r19, r2
    aeba:	31 60       	ori	r19, 0x01	; 1
    aebc:	23 2e       	mov	r2, r19
    aebe:	80 97       	sbiw	r24, 0x20	; 32
    aec0:	f8 01       	movw	r30, r16
    aec2:	ec 0d       	add	r30, r12
    aec4:	fd 1d       	adc	r31, r13
    aec6:	84 8f       	std	Z+28, r24	; 0x1c
    aec8:	c6 01       	movw	r24, r12
    aeca:	01 96       	adiw	r24, 0x01	; 1
    aecc:	6c 01       	movw	r12, r24
    aece:	37 2c       	mov	r3, r7
    aed0:	70 cf       	rjmp	.-288    	; 0xadb2 <follow_path+0x2aa>
    aed2:	f8 01       	movw	r30, r16
    aed4:	84 8d       	ldd	r24, Z+28	; 0x1c
    aed6:	85 3e       	cpi	r24, 0xE5	; 229
    aed8:	11 f4       	brne	.+4      	; 0xaede <follow_path+0x3d6>
    aeda:	25 e0       	ldi	r18, 0x05	; 5
    aedc:	24 8f       	std	Z+28, r18	; 0x1c
    aede:	38 e0       	ldi	r19, 0x08	; 8
    aee0:	83 16       	cp	r8, r19
    aee2:	91 04       	cpc	r9, r1
    aee4:	11 f4       	brne	.+4      	; 0xaeea <follow_path+0x3e2>
    aee6:	22 0c       	add	r2, r2
    aee8:	22 0c       	add	r2, r2
    aeea:	82 2d       	mov	r24, r2
    aeec:	8c 70       	andi	r24, 0x0C	; 12
    aeee:	8c 30       	cpi	r24, 0x0C	; 12
    aef0:	21 f0       	breq	.+8      	; 0xaefa <follow_path+0x3f2>
    aef2:	82 2d       	mov	r24, r2
    aef4:	83 70       	andi	r24, 0x03	; 3
    aef6:	83 30       	cpi	r24, 0x03	; 3
    aef8:	19 f4       	brne	.+6      	; 0xaf00 <follow_path+0x3f8>
    aefa:	83 2d       	mov	r24, r3
    aefc:	82 60       	ori	r24, 0x02	; 2
    aefe:	38 2e       	mov	r3, r24
    af00:	31 fc       	sbrc	r3, 1
    af02:	0a c0       	rjmp	.+20     	; 0xaf18 <follow_path+0x410>
    af04:	20 fe       	sbrs	r2, 0
    af06:	03 c0       	rjmp	.+6      	; 0xaf0e <follow_path+0x406>
    af08:	93 2d       	mov	r25, r3
    af0a:	90 61       	ori	r25, 0x10	; 16
    af0c:	39 2e       	mov	r3, r25
    af0e:	22 fe       	sbrs	r2, 2
    af10:	03 c0       	rjmp	.+6      	; 0xaf18 <follow_path+0x410>
    af12:	a3 2d       	mov	r26, r3
    af14:	a8 60       	ori	r26, 0x08	; 8
    af16:	3a 2e       	mov	r3, r26
    af18:	f8 01       	movw	r30, r16
    af1a:	37 a2       	std	Z+39, r3	; 0x27
    af1c:	9b ce       	rjmp	.-714    	; 0xac54 <follow_path+0x14c>
    af1e:	86 e0       	ldi	r24, 0x06	; 6
    af20:	90 e0       	ldi	r25, 0x00	; 0
    af22:	2a c0       	rjmp	.+84     	; 0xaf78 <follow_path+0x470>
    af24:	80 e8       	ldi	r24, 0x80	; 128
    af26:	f8 01       	movw	r30, r16
    af28:	87 a3       	std	Z+39, r24	; 0x27
    af2a:	80 e0       	ldi	r24, 0x00	; 0
    af2c:	90 e0       	ldi	r25, 0x00	; 0
    af2e:	24 c0       	rjmp	.+72     	; 0xaf78 <follow_path+0x470>
    af30:	33 23       	and	r19, r19
    af32:	c9 f0       	breq	.+50     	; 0xaf66 <follow_path+0x45e>
    af34:	21 c0       	rjmp	.+66     	; 0xaf78 <follow_path+0x470>
    af36:	22 fd       	sbrc	r18, 2
    af38:	1f c0       	rjmp	.+62     	; 0xaf78 <follow_path+0x470>
    af3a:	f8 01       	movw	r30, r16
    af3c:	84 81       	ldd	r24, Z+4	; 0x04
    af3e:	84 ff       	sbrs	r24, 4
    af40:	12 c0       	rjmp	.+36     	; 0xaf66 <follow_path+0x45e>
    af42:	66 85       	ldd	r22, Z+14	; 0x0e
    af44:	77 85       	ldd	r23, Z+15	; 0x0f
    af46:	71 70       	andi	r23, 0x01	; 1
    af48:	2d 81       	ldd	r18, Y+5	; 0x05
    af4a:	3e 81       	ldd	r19, Y+6	; 0x06
    af4c:	62 0f       	add	r22, r18
    af4e:	73 1f       	adc	r23, r19
    af50:	a9 81       	ldd	r26, Y+1	; 0x01
    af52:	ba 81       	ldd	r27, Y+2	; 0x02
    af54:	8c 91       	ld	r24, X
    af56:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    af5a:	f8 01       	movw	r30, r16
    af5c:	66 83       	std	Z+6, r22	; 0x06
    af5e:	77 83       	std	Z+7, r23	; 0x07
    af60:	80 87       	std	Z+8, r24	; 0x08
    af62:	91 87       	std	Z+9, r25	; 0x09
    af64:	88 ce       	rjmp	.-752    	; 0xac76 <follow_path+0x16e>
    af66:	85 e0       	ldi	r24, 0x05	; 5
    af68:	90 e0       	ldi	r25, 0x00	; 0
    af6a:	06 c0       	rjmp	.+12     	; 0xaf78 <follow_path+0x470>
    af6c:	fb e0       	ldi	r31, 0x0B	; 11
    af6e:	8f 16       	cp	r8, r31
    af70:	91 04       	cpc	r9, r1
    af72:	09 f0       	breq	.+2      	; 0xaf76 <follow_path+0x46e>
    af74:	46 cf       	rjmp	.-372    	; 0xae02 <follow_path+0x2fa>
    af76:	30 cf       	rjmp	.-416    	; 0xadd8 <follow_path+0x2d0>
    af78:	28 96       	adiw	r28, 0x08	; 8
    af7a:	e2 e1       	ldi	r30, 0x12	; 18
    af7c:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000af80 <f_mount>:
    af80:	a6 e0       	ldi	r26, 0x06	; 6
    af82:	b0 e0       	ldi	r27, 0x00	; 0
    af84:	e6 ec       	ldi	r30, 0xC6	; 198
    af86:	f7 e5       	ldi	r31, 0x57	; 87
    af88:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1e>
    af8c:	9c 83       	std	Y+4, r25	; 0x04
    af8e:	8b 83       	std	Y+3, r24	; 0x03
    af90:	7e 83       	std	Y+6, r23	; 0x06
    af92:	6d 83       	std	Y+5, r22	; 0x05
    af94:	14 2f       	mov	r17, r20
    af96:	7a 83       	std	Y+2, r23	; 0x02
    af98:	69 83       	std	Y+1, r22	; 0x01
    af9a:	ce 01       	movw	r24, r28
    af9c:	01 96       	adiw	r24, 0x01	; 1
    af9e:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <get_ldnumber>
    afa2:	97 fd       	sbrc	r25, 7
    afa4:	20 c0       	rjmp	.+64     	; 0xafe6 <f_mount+0x66>
    afa6:	88 0f       	add	r24, r24
    afa8:	99 1f       	adc	r25, r25
    afaa:	fc 01       	movw	r30, r24
    afac:	e7 5d       	subi	r30, 0xD7	; 215
    afae:	f7 4e       	sbci	r31, 0xE7	; 231
    afb0:	01 90       	ld	r0, Z+
    afb2:	f0 81       	ld	r31, Z
    afb4:	e0 2d       	mov	r30, r0
    afb6:	30 97       	sbiw	r30, 0x00	; 0
    afb8:	09 f0       	breq	.+2      	; 0xafbc <f_mount+0x3c>
    afba:	10 82       	st	Z, r1
    afbc:	eb 81       	ldd	r30, Y+3	; 0x03
    afbe:	fc 81       	ldd	r31, Y+4	; 0x04
    afc0:	30 97       	sbiw	r30, 0x00	; 0
    afc2:	09 f0       	breq	.+2      	; 0xafc6 <f_mount+0x46>
    afc4:	10 82       	st	Z, r1
    afc6:	dc 01       	movw	r26, r24
    afc8:	a7 5d       	subi	r26, 0xD7	; 215
    afca:	b7 4e       	sbci	r27, 0xE7	; 231
    afcc:	ed 93       	st	X+, r30
    afce:	fc 93       	st	X, r31
    afd0:	11 23       	and	r17, r17
    afd2:	61 f0       	breq	.+24     	; 0xafec <f_mount+0x6c>
    afd4:	40 e0       	ldi	r20, 0x00	; 0
    afd6:	be 01       	movw	r22, r28
    afd8:	6d 5f       	subi	r22, 0xFD	; 253
    afda:	7f 4f       	sbci	r23, 0xFF	; 255
    afdc:	ce 01       	movw	r24, r28
    afde:	05 96       	adiw	r24, 0x05	; 5
    afe0:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    afe4:	05 c0       	rjmp	.+10     	; 0xaff0 <f_mount+0x70>
    afe6:	8b e0       	ldi	r24, 0x0B	; 11
    afe8:	90 e0       	ldi	r25, 0x00	; 0
    afea:	02 c0       	rjmp	.+4      	; 0xaff0 <f_mount+0x70>
    afec:	80 e0       	ldi	r24, 0x00	; 0
    afee:	90 e0       	ldi	r25, 0x00	; 0
    aff0:	26 96       	adiw	r28, 0x06	; 6
    aff2:	e3 e0       	ldi	r30, 0x03	; 3
    aff4:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1e>

0000aff8 <f_open>:
    aff8:	a6 e3       	ldi	r26, 0x36	; 54
    affa:	b0 e0       	ldi	r27, 0x00	; 0
    affc:	e2 e0       	ldi	r30, 0x02	; 2
    affe:	f8 e5       	ldi	r31, 0x58	; 88
    b000:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    b004:	7a ab       	std	Y+50, r23	; 0x32
    b006:	69 ab       	std	Y+49, r22	; 0x31
    b008:	00 97       	sbiw	r24, 0x00	; 0
    b00a:	09 f4       	brne	.+2      	; 0xb00e <f_open+0x16>
    b00c:	93 c1       	rjmp	.+806    	; 0xb334 <f_open+0x33c>
    b00e:	74 2e       	mov	r7, r20
    b010:	7c 01       	movw	r14, r24
    b012:	24 2f       	mov	r18, r20
    b014:	2f 73       	andi	r18, 0x3F	; 63
    b016:	32 2e       	mov	r3, r18
    b018:	42 2f       	mov	r20, r18
    b01a:	be 01       	movw	r22, r28
    b01c:	61 5d       	subi	r22, 0xD1	; 209
    b01e:	7f 4f       	sbci	r23, 0xFF	; 255
    b020:	ce 01       	movw	r24, r28
    b022:	c1 96       	adiw	r24, 0x31	; 49
    b024:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    b028:	00 97       	sbiw	r24, 0x00	; 0
    b02a:	09 f0       	breq	.+2      	; 0xb02e <f_open+0x36>
    b02c:	7d c1       	rjmp	.+762    	; 0xb328 <f_open+0x330>
    b02e:	8f a5       	ldd	r24, Y+47	; 0x2f
    b030:	98 a9       	ldd	r25, Y+48	; 0x30
    b032:	9a 83       	std	Y+2, r25	; 0x02
    b034:	89 83       	std	Y+1, r24	; 0x01
    b036:	80 e0       	ldi	r24, 0x00	; 0
    b038:	92 e0       	ldi	r25, 0x02	; 2
    b03a:	0e 94 32 67 	call	0xce64	; 0xce64 <ff_memalloc>
    b03e:	5c 01       	movw	r10, r24
    b040:	00 97       	sbiw	r24, 0x00	; 0
    b042:	09 f4       	brne	.+2      	; 0xb046 <f_open+0x4e>
    b044:	79 c1       	rjmp	.+754    	; 0xb338 <f_open+0x340>
    b046:	ef a5       	ldd	r30, Y+47	; 0x2f
    b048:	f8 a9       	ldd	r31, Y+48	; 0x30
    b04a:	94 87       	std	Z+12, r25	; 0x0c
    b04c:	83 87       	std	Z+11, r24	; 0x0b
    b04e:	69 a9       	ldd	r22, Y+49	; 0x31
    b050:	7a a9       	ldd	r23, Y+50	; 0x32
    b052:	ce 01       	movw	r24, r28
    b054:	01 96       	adiw	r24, 0x01	; 1
    b056:	58 dd       	rcall	.-1360   	; 0xab08 <follow_path>
    b058:	8c 01       	movw	r16, r24
    b05a:	89 2b       	or	r24, r25
    b05c:	29 f4       	brne	.+10     	; 0xb068 <f_open+0x70>
    b05e:	88 a5       	ldd	r24, Y+40	; 0x28
    b060:	87 ff       	sbrs	r24, 7
    b062:	02 c0       	rjmp	.+4      	; 0xb068 <f_open+0x70>
    b064:	06 e0       	ldi	r16, 0x06	; 6
    b066:	10 e0       	ldi	r17, 0x00	; 0
    b068:	87 2d       	mov	r24, r7
    b06a:	8c 71       	andi	r24, 0x1C	; 28
    b06c:	09 f4       	brne	.+2      	; 0xb070 <f_open+0x78>
    b06e:	75 c0       	rjmp	.+234    	; 0xb15a <f_open+0x162>
    b070:	01 15       	cp	r16, r1
    b072:	11 05       	cpc	r17, r1
    b074:	79 f0       	breq	.+30     	; 0xb094 <f_open+0x9c>
    b076:	04 30       	cpi	r16, 0x04	; 4
    b078:	11 05       	cpc	r17, r1
    b07a:	09 f0       	breq	.+2      	; 0xb07e <f_open+0x86>
    b07c:	6d c1       	rjmp	.+730    	; 0xb358 <f_open+0x360>
    b07e:	ce 01       	movw	r24, r28
    b080:	01 96       	adiw	r24, 0x01	; 1
    b082:	b4 db       	rcall	.-2200   	; 0xa7ec <dir_register>
    b084:	8c 01       	movw	r16, r24
    b086:	89 2b       	or	r24, r25
    b088:	09 f0       	breq	.+2      	; 0xb08c <f_open+0x94>
    b08a:	66 c1       	rjmp	.+716    	; 0xb358 <f_open+0x360>
    b08c:	33 2d       	mov	r19, r3
    b08e:	38 60       	ori	r19, 0x08	; 8
    b090:	33 2e       	mov	r3, r19
    b092:	06 c0       	rjmp	.+12     	; 0xb0a0 <f_open+0xa8>
    b094:	8d 81       	ldd	r24, Y+5	; 0x05
    b096:	81 71       	andi	r24, 0x11	; 17
    b098:	09 f0       	breq	.+2      	; 0xb09c <f_open+0xa4>
    b09a:	5c c1       	rjmp	.+696    	; 0xb354 <f_open+0x35c>
    b09c:	72 fc       	sbrc	r7, 2
    b09e:	51 c1       	rjmp	.+674    	; 0xb342 <f_open+0x34a>
    b0a0:	33 fe       	sbrs	r3, 3
    b0a2:	6b c0       	rjmp	.+214    	; 0xb17a <f_open+0x182>
    b0a4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b0a6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b0a8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b0aa:	f8 a9       	ldd	r31, Y+48	; 0x30
    b0ac:	b8 01       	movw	r22, r16
    b0ae:	80 81       	ld	r24, Z
    b0b0:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    b0b4:	2b 01       	movw	r4, r22
    b0b6:	3c 01       	movw	r6, r24
    b0b8:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <get_fattime>
    b0bc:	ab 01       	movw	r20, r22
    b0be:	bc 01       	movw	r22, r24
    b0c0:	c8 01       	movw	r24, r16
    b0c2:	0e 96       	adiw	r24, 0x0e	; 14
    b0c4:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <st_dword>
    b0c8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0ca:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0cc:	80 e2       	ldi	r24, 0x20	; 32
    b0ce:	83 87       	std	Z+11, r24	; 0x0b
    b0d0:	af a5       	ldd	r26, Y+47	; 0x2f
    b0d2:	b8 a9       	ldd	r27, Y+48	; 0x30
    b0d4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0d6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0d8:	12 8e       	std	Z+26, r1	; 0x1a
    b0da:	13 8e       	std	Z+27, r1	; 0x1b
    b0dc:	8c 91       	ld	r24, X
    b0de:	83 30       	cpi	r24, 0x03	; 3
    b0e0:	11 f4       	brne	.+4      	; 0xb0e6 <f_open+0xee>
    b0e2:	14 8a       	std	Z+20, r1	; 0x14
    b0e4:	15 8a       	std	Z+21, r1	; 0x15
    b0e6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0e8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0ea:	14 8e       	std	Z+28, r1	; 0x1c
    b0ec:	15 8e       	std	Z+29, r1	; 0x1d
    b0ee:	16 8e       	std	Z+30, r1	; 0x1e
    b0f0:	17 8e       	std	Z+31, r1	; 0x1f
    b0f2:	81 e0       	ldi	r24, 0x01	; 1
    b0f4:	fd 01       	movw	r30, r26
    b0f6:	83 83       	std	Z+3, r24	; 0x03
    b0f8:	41 14       	cp	r4, r1
    b0fa:	51 04       	cpc	r5, r1
    b0fc:	61 04       	cpc	r6, r1
    b0fe:	71 04       	cpc	r7, r1
    b100:	c9 f1       	breq	.+114    	; 0xb174 <f_open+0x17c>
    b102:	21 a9       	ldd	r18, Z+49	; 0x31
    b104:	32 a9       	ldd	r19, Z+50	; 0x32
    b106:	43 a9       	ldd	r20, Z+51	; 0x33
    b108:	54 a9       	ldd	r21, Z+52	; 0x34
    b10a:	2b ab       	std	Y+51, r18	; 0x33
    b10c:	3c ab       	std	Y+52, r19	; 0x34
    b10e:	4d ab       	std	Y+53, r20	; 0x35
    b110:	5e ab       	std	Y+54, r21	; 0x36
    b112:	00 e0       	ldi	r16, 0x00	; 0
    b114:	10 e0       	ldi	r17, 0x00	; 0
    b116:	98 01       	movw	r18, r16
    b118:	b3 01       	movw	r22, r6
    b11a:	a2 01       	movw	r20, r4
    b11c:	ce 01       	movw	r24, r28
    b11e:	01 96       	adiw	r24, 0x01	; 1
    b120:	0e 94 25 50 	call	0xa04a	; 0xa04a <remove_chain>
    b124:	8c 01       	movw	r16, r24
    b126:	89 2b       	or	r24, r25
    b128:	09 f0       	breq	.+2      	; 0xb12c <f_open+0x134>
    b12a:	16 c1       	rjmp	.+556    	; 0xb358 <f_open+0x360>
    b12c:	4b a9       	ldd	r20, Y+51	; 0x33
    b12e:	5c a9       	ldd	r21, Y+52	; 0x34
    b130:	6d a9       	ldd	r22, Y+53	; 0x35
    b132:	7e a9       	ldd	r23, Y+54	; 0x36
    b134:	8f a5       	ldd	r24, Y+47	; 0x2f
    b136:	98 a9       	ldd	r25, Y+48	; 0x30
    b138:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    b13c:	8c 01       	movw	r16, r24
    b13e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b140:	f8 a9       	ldd	r31, Y+48	; 0x30
    b142:	21 e0       	ldi	r18, 0x01	; 1
    b144:	42 1a       	sub	r4, r18
    b146:	51 08       	sbc	r5, r1
    b148:	61 08       	sbc	r6, r1
    b14a:	71 08       	sbc	r7, r1
    b14c:	45 86       	std	Z+13, r4	; 0x0d
    b14e:	56 86       	std	Z+14, r5	; 0x0e
    b150:	67 86       	std	Z+15, r6	; 0x0f
    b152:	70 8a       	std	Z+16, r7	; 0x10
    b154:	89 2b       	or	r24, r25
    b156:	61 f0       	breq	.+24     	; 0xb170 <f_open+0x178>
    b158:	ff c0       	rjmp	.+510    	; 0xb358 <f_open+0x360>
    b15a:	01 15       	cp	r16, r1
    b15c:	11 05       	cpc	r17, r1
    b15e:	09 f0       	breq	.+2      	; 0xb162 <f_open+0x16a>
    b160:	fb c0       	rjmp	.+502    	; 0xb358 <f_open+0x360>
    b162:	8d 81       	ldd	r24, Y+5	; 0x05
    b164:	84 fd       	sbrc	r24, 4
    b166:	f3 c0       	rjmp	.+486    	; 0xb34e <f_open+0x356>
    b168:	71 fe       	sbrs	r7, 1
    b16a:	02 c0       	rjmp	.+4      	; 0xb170 <f_open+0x178>
    b16c:	80 fd       	sbrc	r24, 0
    b16e:	f2 c0       	rjmp	.+484    	; 0xb354 <f_open+0x35c>
    b170:	33 fe       	sbrs	r3, 3
    b172:	03 c0       	rjmp	.+6      	; 0xb17a <f_open+0x182>
    b174:	33 2d       	mov	r19, r3
    b176:	30 64       	ori	r19, 0x40	; 64
    b178:	33 2e       	mov	r3, r19
    b17a:	0f a5       	ldd	r16, Y+47	; 0x2f
    b17c:	18 a9       	ldd	r17, Y+48	; 0x30
    b17e:	f8 01       	movw	r30, r16
    b180:	81 a9       	ldd	r24, Z+49	; 0x31
    b182:	92 a9       	ldd	r25, Z+50	; 0x32
    b184:	a3 a9       	ldd	r26, Z+51	; 0x33
    b186:	b4 a9       	ldd	r27, Z+52	; 0x34
    b188:	f7 01       	movw	r30, r14
    b18a:	84 8f       	std	Z+28, r24	; 0x1c
    b18c:	95 8f       	std	Z+29, r25	; 0x1d
    b18e:	a6 8f       	std	Z+30, r26	; 0x1e
    b190:	b7 8f       	std	Z+31, r27	; 0x1f
    b192:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b194:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b196:	71 a2       	std	Z+33, r7	; 0x21
    b198:	60 a2       	std	Z+32, r6	; 0x20
    b19a:	b3 01       	movw	r22, r6
    b19c:	f8 01       	movw	r30, r16
    b19e:	80 81       	ld	r24, Z
    b1a0:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    b1a4:	f7 01       	movw	r30, r14
    b1a6:	66 83       	std	Z+6, r22	; 0x06
    b1a8:	77 83       	std	Z+7, r23	; 0x07
    b1aa:	80 87       	std	Z+8, r24	; 0x08
    b1ac:	91 87       	std	Z+9, r25	; 0x09
    b1ae:	c3 01       	movw	r24, r6
    b1b0:	4c 96       	adiw	r24, 0x1c	; 28
    b1b2:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_dword>
    b1b6:	f7 01       	movw	r30, r14
    b1b8:	62 87       	std	Z+10, r22	; 0x0a
    b1ba:	73 87       	std	Z+11, r23	; 0x0b
    b1bc:	84 87       	std	Z+12, r24	; 0x0c
    b1be:	95 87       	std	Z+13, r25	; 0x0d
    b1c0:	13 a2       	std	Z+35, r1	; 0x23
    b1c2:	12 a2       	std	Z+34, r1	; 0x22
    b1c4:	11 83       	std	Z+1, r17	; 0x01
    b1c6:	00 83       	st	Z, r16
    b1c8:	f8 01       	movw	r30, r16
    b1ca:	85 81       	ldd	r24, Z+5	; 0x05
    b1cc:	96 81       	ldd	r25, Z+6	; 0x06
    b1ce:	f7 01       	movw	r30, r14
    b1d0:	93 83       	std	Z+3, r25	; 0x03
    b1d2:	82 83       	std	Z+2, r24	; 0x02
    b1d4:	36 86       	std	Z+14, r3	; 0x0e
    b1d6:	17 86       	std	Z+15, r1	; 0x0f
    b1d8:	10 8e       	std	Z+24, r1	; 0x18
    b1da:	11 8e       	std	Z+25, r1	; 0x19
    b1dc:	12 8e       	std	Z+26, r1	; 0x1a
    b1de:	13 8e       	std	Z+27, r1	; 0x1b
    b1e0:	10 8a       	std	Z+16, r1	; 0x10
    b1e2:	11 8a       	std	Z+17, r1	; 0x11
    b1e4:	12 8a       	std	Z+18, r1	; 0x12
    b1e6:	13 8a       	std	Z+19, r1	; 0x13
    b1e8:	67 01       	movw	r12, r14
    b1ea:	f4 e2       	ldi	r31, 0x24	; 36
    b1ec:	cf 0e       	add	r12, r31
    b1ee:	d1 1c       	adc	r13, r1
    b1f0:	40 e0       	ldi	r20, 0x00	; 0
    b1f2:	52 e0       	ldi	r21, 0x02	; 2
    b1f4:	60 e0       	ldi	r22, 0x00	; 0
    b1f6:	70 e0       	ldi	r23, 0x00	; 0
    b1f8:	c6 01       	movw	r24, r12
    b1fa:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <mem_set>
    b1fe:	35 fc       	sbrc	r3, 5
    b200:	03 c0       	rjmp	.+6      	; 0xb208 <f_open+0x210>
    b202:	00 e0       	ldi	r16, 0x00	; 0
    b204:	10 e0       	ldi	r17, 0x00	; 0
    b206:	89 c0       	rjmp	.+274    	; 0xb31a <f_open+0x322>
    b208:	f7 01       	movw	r30, r14
    b20a:	62 84       	ldd	r6, Z+10	; 0x0a
    b20c:	73 84       	ldd	r7, Z+11	; 0x0b
    b20e:	84 84       	ldd	r8, Z+12	; 0x0c
    b210:	95 84       	ldd	r9, Z+13	; 0x0d
    b212:	61 14       	cp	r6, r1
    b214:	71 04       	cpc	r7, r1
    b216:	81 04       	cpc	r8, r1
    b218:	91 04       	cpc	r9, r1
    b21a:	99 f3       	breq	.-26     	; 0xb202 <f_open+0x20a>
    b21c:	60 8a       	std	Z+16, r6	; 0x10
    b21e:	71 8a       	std	Z+17, r7	; 0x11
    b220:	82 8a       	std	Z+18, r8	; 0x12
    b222:	93 8a       	std	Z+19, r9	; 0x13
    b224:	ef a5       	ldd	r30, Y+47	; 0x2f
    b226:	f8 a9       	ldd	r31, Y+48	; 0x30
    b228:	21 84       	ldd	r2, Z+9	; 0x09
    b22a:	32 84       	ldd	r3, Z+10	; 0x0a
    b22c:	c1 01       	movw	r24, r2
    b22e:	a0 e0       	ldi	r26, 0x00	; 0
    b230:	b0 e0       	ldi	r27, 0x00	; 0
    b232:	1c 01       	movw	r2, r24
    b234:	2d 01       	movw	r4, r26
    b236:	59 e0       	ldi	r21, 0x09	; 9
    b238:	22 0c       	add	r2, r2
    b23a:	33 1c       	adc	r3, r3
    b23c:	44 1c       	adc	r4, r4
    b23e:	55 1c       	adc	r5, r5
    b240:	5a 95       	dec	r21
    b242:	d1 f7       	brne	.-12     	; 0xb238 <f_open+0x240>
    b244:	f7 01       	movw	r30, r14
    b246:	46 81       	ldd	r20, Z+6	; 0x06
    b248:	57 81       	ldd	r21, Z+7	; 0x07
    b24a:	60 85       	ldd	r22, Z+8	; 0x08
    b24c:	71 85       	ldd	r23, Z+9	; 0x09
    b24e:	26 14       	cp	r2, r6
    b250:	37 04       	cpc	r3, r7
    b252:	48 04       	cpc	r4, r8
    b254:	59 04       	cpc	r5, r9
    b256:	f0 f4       	brcc	.+60     	; 0xb294 <f_open+0x29c>
    b258:	f7 01       	movw	r30, r14
    b25a:	80 81       	ld	r24, Z
    b25c:	91 81       	ldd	r25, Z+1	; 0x01
    b25e:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <get_fat.isra.9>
    b262:	ab 01       	movw	r20, r22
    b264:	bc 01       	movw	r22, r24
    b266:	d4 01       	movw	r26, r8
    b268:	c3 01       	movw	r24, r6
    b26a:	82 19       	sub	r24, r2
    b26c:	93 09       	sbc	r25, r3
    b26e:	a4 09       	sbc	r26, r4
    b270:	b5 09       	sbc	r27, r5
    b272:	3c 01       	movw	r6, r24
    b274:	4d 01       	movw	r8, r26
    b276:	42 30       	cpi	r20, 0x02	; 2
    b278:	51 05       	cpc	r21, r1
    b27a:	61 05       	cpc	r22, r1
    b27c:	71 05       	cpc	r23, r1
    b27e:	08 f4       	brcc	.+2      	; 0xb282 <f_open+0x28a>
    b280:	63 c0       	rjmp	.+198    	; 0xb348 <f_open+0x350>
    b282:	4f 3f       	cpi	r20, 0xFF	; 255
    b284:	ff ef       	ldi	r31, 0xFF	; 255
    b286:	5f 07       	cpc	r21, r31
    b288:	6f 07       	cpc	r22, r31
    b28a:	7f 07       	cpc	r23, r31
    b28c:	01 f7       	brne	.-64     	; 0xb24e <f_open+0x256>
    b28e:	01 e0       	ldi	r16, 0x01	; 1
    b290:	10 e0       	ldi	r17, 0x00	; 0
    b292:	02 c0       	rjmp	.+4      	; 0xb298 <f_open+0x2a0>
    b294:	00 e0       	ldi	r16, 0x00	; 0
    b296:	10 e0       	ldi	r17, 0x00	; 0
    b298:	f7 01       	movw	r30, r14
    b29a:	44 8b       	std	Z+20, r20	; 0x14
    b29c:	55 8b       	std	Z+21, r21	; 0x15
    b29e:	66 8b       	std	Z+22, r22	; 0x16
    b2a0:	77 8b       	std	Z+23, r23	; 0x17
    b2a2:	01 15       	cp	r16, r1
    b2a4:	11 05       	cpc	r17, r1
    b2a6:	c9 f5       	brne	.+114    	; 0xb31a <f_open+0x322>
    b2a8:	d4 01       	movw	r26, r8
    b2aa:	c3 01       	movw	r24, r6
    b2ac:	91 70       	andi	r25, 0x01	; 1
    b2ae:	aa 27       	eor	r26, r26
    b2b0:	bb 27       	eor	r27, r27
    b2b2:	89 2b       	or	r24, r25
    b2b4:	8a 2b       	or	r24, r26
    b2b6:	8b 2b       	or	r24, r27
    b2b8:	09 f4       	brne	.+2      	; 0xb2bc <f_open+0x2c4>
    b2ba:	a3 cf       	rjmp	.-186    	; 0xb202 <f_open+0x20a>
    b2bc:	4f a4       	ldd	r4, Y+47	; 0x2f
    b2be:	58 a8       	ldd	r5, Y+48	; 0x30
    b2c0:	c2 01       	movw	r24, r4
    b2c2:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    b2c6:	61 15       	cp	r22, r1
    b2c8:	71 05       	cpc	r23, r1
    b2ca:	81 05       	cpc	r24, r1
    b2cc:	91 05       	cpc	r25, r1
    b2ce:	19 f1       	breq	.+70     	; 0xb316 <f_open+0x31e>
    b2d0:	94 01       	movw	r18, r8
    b2d2:	83 01       	movw	r16, r6
    b2d4:	49 e0       	ldi	r20, 0x09	; 9
    b2d6:	36 95       	lsr	r19
    b2d8:	27 95       	ror	r18
    b2da:	17 95       	ror	r17
    b2dc:	07 95       	ror	r16
    b2de:	4a 95       	dec	r20
    b2e0:	d1 f7       	brne	.-12     	; 0xb2d6 <f_open+0x2de>
    b2e2:	a9 01       	movw	r20, r18
    b2e4:	98 01       	movw	r18, r16
    b2e6:	26 0f       	add	r18, r22
    b2e8:	37 1f       	adc	r19, r23
    b2ea:	48 1f       	adc	r20, r24
    b2ec:	59 1f       	adc	r21, r25
    b2ee:	f7 01       	movw	r30, r14
    b2f0:	20 8f       	std	Z+24, r18	; 0x18
    b2f2:	31 8f       	std	Z+25, r19	; 0x19
    b2f4:	42 8f       	std	Z+26, r20	; 0x1a
    b2f6:	53 8f       	std	Z+27, r21	; 0x1b
    b2f8:	01 e0       	ldi	r16, 0x01	; 1
    b2fa:	10 e0       	ldi	r17, 0x00	; 0
    b2fc:	b6 01       	movw	r22, r12
    b2fe:	f2 01       	movw	r30, r4
    b300:	81 81       	ldd	r24, Z+1	; 0x01
    b302:	0e 94 ee 67 	call	0xcfdc	; 0xcfdc <disk_read>
    b306:	31 e0       	ldi	r19, 0x01	; 1
    b308:	20 e0       	ldi	r18, 0x00	; 0
    b30a:	89 2b       	or	r24, r25
    b30c:	09 f4       	brne	.+2      	; 0xb310 <f_open+0x318>
    b30e:	30 e0       	ldi	r19, 0x00	; 0
    b310:	03 2f       	mov	r16, r19
    b312:	12 2f       	mov	r17, r18
    b314:	02 c0       	rjmp	.+4      	; 0xb31a <f_open+0x322>
    b316:	02 e0       	ldi	r16, 0x02	; 2
    b318:	10 e0       	ldi	r17, 0x00	; 0
    b31a:	c5 01       	movw	r24, r10
    b31c:	0e 94 35 67 	call	0xce6a	; 0xce6a <ff_memfree>
    b320:	01 15       	cp	r16, r1
    b322:	11 05       	cpc	r17, r1
    b324:	59 f0       	breq	.+22     	; 0xb33c <f_open+0x344>
    b326:	01 c0       	rjmp	.+2      	; 0xb32a <f_open+0x332>
    b328:	8c 01       	movw	r16, r24
    b32a:	f7 01       	movw	r30, r14
    b32c:	11 82       	std	Z+1, r1	; 0x01
    b32e:	10 82       	st	Z, r1
    b330:	c8 01       	movw	r24, r16
    b332:	16 c0       	rjmp	.+44     	; 0xb360 <f_open+0x368>
    b334:	89 e0       	ldi	r24, 0x09	; 9
    b336:	03 c0       	rjmp	.+6      	; 0xb33e <f_open+0x346>
    b338:	81 e1       	ldi	r24, 0x11	; 17
    b33a:	01 c0       	rjmp	.+2      	; 0xb33e <f_open+0x346>
    b33c:	80 e0       	ldi	r24, 0x00	; 0
    b33e:	90 e0       	ldi	r25, 0x00	; 0
    b340:	0f c0       	rjmp	.+30     	; 0xb360 <f_open+0x368>
    b342:	08 e0       	ldi	r16, 0x08	; 8
    b344:	10 e0       	ldi	r17, 0x00	; 0
    b346:	08 c0       	rjmp	.+16     	; 0xb358 <f_open+0x360>
    b348:	02 e0       	ldi	r16, 0x02	; 2
    b34a:	10 e0       	ldi	r17, 0x00	; 0
    b34c:	a5 cf       	rjmp	.-182    	; 0xb298 <f_open+0x2a0>
    b34e:	04 e0       	ldi	r16, 0x04	; 4
    b350:	10 e0       	ldi	r17, 0x00	; 0
    b352:	02 c0       	rjmp	.+4      	; 0xb358 <f_open+0x360>
    b354:	07 e0       	ldi	r16, 0x07	; 7
    b356:	10 e0       	ldi	r17, 0x00	; 0
    b358:	c5 01       	movw	r24, r10
    b35a:	0e 94 35 67 	call	0xce6a	; 0xce6a <ff_memfree>
    b35e:	e5 cf       	rjmp	.-54     	; 0xb32a <f_open+0x332>
    b360:	e6 96       	adiw	r28, 0x36	; 54
    b362:	e2 e1       	ldi	r30, 0x12	; 18
    b364:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000b368 <f_read>:
    b368:	a6 e0       	ldi	r26, 0x06	; 6
    b36a:	b0 e0       	ldi	r27, 0x00	; 0
    b36c:	ea eb       	ldi	r30, 0xBA	; 186
    b36e:	f9 e5       	ldi	r31, 0x59	; 89
    b370:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    b374:	7c 01       	movw	r14, r24
    b376:	4b 01       	movw	r8, r22
    b378:	5a 01       	movw	r10, r20
    b37a:	3e 83       	std	Y+6, r19	; 0x06
    b37c:	2d 83       	std	Y+5, r18	; 0x05
    b37e:	f9 01       	movw	r30, r18
    b380:	11 82       	std	Z+1, r1	; 0x01
    b382:	10 82       	st	Z, r1
    b384:	be 01       	movw	r22, r28
    b386:	6f 5f       	subi	r22, 0xFF	; 255
    b388:	7f 4f       	sbci	r23, 0xFF	; 255
    b38a:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <validate>
    b38e:	00 97       	sbiw	r24, 0x00	; 0
    b390:	09 f0       	breq	.+2      	; 0xb394 <f_read+0x2c>
    b392:	31 c1       	rjmp	.+610    	; 0xb5f6 <f_read+0x28e>
    b394:	f7 01       	movw	r30, r14
    b396:	87 85       	ldd	r24, Z+15	; 0x0f
    b398:	90 e0       	ldi	r25, 0x00	; 0
    b39a:	00 97       	sbiw	r24, 0x00	; 0
    b39c:	09 f0       	breq	.+2      	; 0xb3a0 <f_read+0x38>
    b39e:	2b c1       	rjmp	.+598    	; 0xb5f6 <f_read+0x28e>
    b3a0:	86 85       	ldd	r24, Z+14	; 0x0e
    b3a2:	80 ff       	sbrs	r24, 0
    b3a4:	26 c1       	rjmp	.+588    	; 0xb5f2 <f_read+0x28a>
    b3a6:	82 85       	ldd	r24, Z+10	; 0x0a
    b3a8:	93 85       	ldd	r25, Z+11	; 0x0b
    b3aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    b3ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    b3ae:	40 89       	ldd	r20, Z+16	; 0x10
    b3b0:	51 89       	ldd	r21, Z+17	; 0x11
    b3b2:	62 89       	ldd	r22, Z+18	; 0x12
    b3b4:	73 89       	ldd	r23, Z+19	; 0x13
    b3b6:	84 1b       	sub	r24, r20
    b3b8:	95 0b       	sbc	r25, r21
    b3ba:	a6 0b       	sbc	r26, r22
    b3bc:	b7 0b       	sbc	r27, r23
    b3be:	a5 01       	movw	r20, r10
    b3c0:	60 e0       	ldi	r22, 0x00	; 0
    b3c2:	70 e0       	ldi	r23, 0x00	; 0
    b3c4:	84 17       	cp	r24, r20
    b3c6:	95 07       	cpc	r25, r21
    b3c8:	a6 07       	cpc	r26, r22
    b3ca:	b7 07       	cpc	r27, r23
    b3cc:	08 f4       	brcc	.+2      	; 0xb3d0 <f_read+0x68>
    b3ce:	5c 01       	movw	r10, r24
    b3d0:	17 01       	movw	r2, r14
    b3d2:	f4 e2       	ldi	r31, 0x24	; 36
    b3d4:	2f 0e       	add	r2, r31
    b3d6:	31 1c       	adc	r3, r1
    b3d8:	a1 14       	cp	r10, r1
    b3da:	b1 04       	cpc	r11, r1
    b3dc:	09 f4       	brne	.+2      	; 0xb3e0 <f_read+0x78>
    b3de:	07 c1       	rjmp	.+526    	; 0xb5ee <f_read+0x286>
    b3e0:	f7 01       	movw	r30, r14
    b3e2:	40 89       	ldd	r20, Z+16	; 0x10
    b3e4:	51 89       	ldd	r21, Z+17	; 0x11
    b3e6:	62 89       	ldd	r22, Z+18	; 0x12
    b3e8:	73 89       	ldd	r23, Z+19	; 0x13
    b3ea:	db 01       	movw	r26, r22
    b3ec:	ca 01       	movw	r24, r20
    b3ee:	91 70       	andi	r25, 0x01	; 1
    b3f0:	aa 27       	eor	r26, r26
    b3f2:	bb 27       	eor	r27, r27
    b3f4:	89 2b       	or	r24, r25
    b3f6:	8a 2b       	or	r24, r26
    b3f8:	8b 2b       	or	r24, r27
    b3fa:	09 f0       	breq	.+2      	; 0xb3fe <f_read+0x96>
    b3fc:	cb c0       	rjmp	.+406    	; 0xb594 <f_read+0x22c>
    b3fe:	e9 81       	ldd	r30, Y+1	; 0x01
    b400:	fa 81       	ldd	r31, Y+2	; 0x02
    b402:	01 85       	ldd	r16, Z+9	; 0x09
    b404:	12 85       	ldd	r17, Z+10	; 0x0a
    b406:	01 50       	subi	r16, 0x01	; 1
    b408:	11 09       	sbc	r17, r1
    b40a:	db 01       	movw	r26, r22
    b40c:	ca 01       	movw	r24, r20
    b40e:	e9 e0       	ldi	r30, 0x09	; 9
    b410:	b6 95       	lsr	r27
    b412:	a7 95       	ror	r26
    b414:	97 95       	ror	r25
    b416:	87 95       	ror	r24
    b418:	ea 95       	dec	r30
    b41a:	d1 f7       	brne	.-12     	; 0xb410 <f_read+0xa8>
    b41c:	08 23       	and	r16, r24
    b41e:	19 23       	and	r17, r25
    b420:	01 15       	cp	r16, r1
    b422:	11 05       	cpc	r17, r1
    b424:	91 f5       	brne	.+100    	; 0xb48a <f_read+0x122>
    b426:	f7 01       	movw	r30, r14
    b428:	41 15       	cp	r20, r1
    b42a:	51 05       	cpc	r21, r1
    b42c:	61 05       	cpc	r22, r1
    b42e:	71 05       	cpc	r23, r1
    b430:	29 f4       	brne	.+10     	; 0xb43c <f_read+0xd4>
    b432:	66 81       	ldd	r22, Z+6	; 0x06
    b434:	77 81       	ldd	r23, Z+7	; 0x07
    b436:	80 85       	ldd	r24, Z+8	; 0x08
    b438:	91 85       	ldd	r25, Z+9	; 0x09
    b43a:	11 c0       	rjmp	.+34     	; 0xb45e <f_read+0xf6>
    b43c:	82 a1       	ldd	r24, Z+34	; 0x22
    b43e:	93 a1       	ldd	r25, Z+35	; 0x23
    b440:	89 2b       	or	r24, r25
    b442:	21 f0       	breq	.+8      	; 0xb44c <f_read+0xe4>
    b444:	c7 01       	movw	r24, r14
    b446:	0e 94 55 46 	call	0x8caa	; 0x8caa <clmt_clust>
    b44a:	09 c0       	rjmp	.+18     	; 0xb45e <f_read+0xf6>
    b44c:	f7 01       	movw	r30, r14
    b44e:	44 89       	ldd	r20, Z+20	; 0x14
    b450:	55 89       	ldd	r21, Z+21	; 0x15
    b452:	66 89       	ldd	r22, Z+22	; 0x16
    b454:	77 89       	ldd	r23, Z+23	; 0x17
    b456:	80 81       	ld	r24, Z
    b458:	91 81       	ldd	r25, Z+1	; 0x01
    b45a:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <get_fat.isra.9>
    b45e:	62 30       	cpi	r22, 0x02	; 2
    b460:	71 05       	cpc	r23, r1
    b462:	81 05       	cpc	r24, r1
    b464:	91 05       	cpc	r25, r1
    b466:	10 f4       	brcc	.+4      	; 0xb46c <f_read+0x104>
    b468:	82 e0       	ldi	r24, 0x02	; 2
    b46a:	07 c0       	rjmp	.+14     	; 0xb47a <f_read+0x112>
    b46c:	6f 3f       	cpi	r22, 0xFF	; 255
    b46e:	ff ef       	ldi	r31, 0xFF	; 255
    b470:	7f 07       	cpc	r23, r31
    b472:	8f 07       	cpc	r24, r31
    b474:	9f 07       	cpc	r25, r31
    b476:	21 f4       	brne	.+8      	; 0xb480 <f_read+0x118>
    b478:	81 e0       	ldi	r24, 0x01	; 1
    b47a:	f7 01       	movw	r30, r14
    b47c:	87 87       	std	Z+15, r24	; 0x0f
    b47e:	ba c0       	rjmp	.+372    	; 0xb5f4 <f_read+0x28c>
    b480:	f7 01       	movw	r30, r14
    b482:	64 8b       	std	Z+20, r22	; 0x14
    b484:	75 8b       	std	Z+21, r23	; 0x15
    b486:	86 8b       	std	Z+22, r24	; 0x16
    b488:	97 8b       	std	Z+23, r25	; 0x17
    b48a:	89 81       	ldd	r24, Y+1	; 0x01
    b48c:	9a 81       	ldd	r25, Y+2	; 0x02
    b48e:	9c 83       	std	Y+4, r25	; 0x04
    b490:	8b 83       	std	Y+3, r24	; 0x03
    b492:	f7 01       	movw	r30, r14
    b494:	44 89       	ldd	r20, Z+20	; 0x14
    b496:	55 89       	ldd	r21, Z+21	; 0x15
    b498:	66 89       	ldd	r22, Z+22	; 0x16
    b49a:	77 89       	ldd	r23, Z+23	; 0x17
    b49c:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    b4a0:	61 15       	cp	r22, r1
    b4a2:	71 05       	cpc	r23, r1
    b4a4:	81 05       	cpc	r24, r1
    b4a6:	91 05       	cpc	r25, r1
    b4a8:	f9 f2       	breq	.-66     	; 0xb468 <f_read+0x100>
    b4aa:	2b 01       	movw	r4, r22
    b4ac:	3c 01       	movw	r6, r24
    b4ae:	40 0e       	add	r4, r16
    b4b0:	51 1e       	adc	r5, r17
    b4b2:	61 1c       	adc	r6, r1
    b4b4:	71 1c       	adc	r7, r1
    b4b6:	65 01       	movw	r12, r10
    b4b8:	cd 2c       	mov	r12, r13
    b4ba:	dd 24       	eor	r13, r13
    b4bc:	c6 94       	lsr	r12
    b4be:	c1 14       	cp	r12, r1
    b4c0:	d1 04       	cpc	r13, r1
    b4c2:	d1 f1       	breq	.+116    	; 0xb538 <f_read+0x1d0>
    b4c4:	eb 81       	ldd	r30, Y+3	; 0x03
    b4c6:	fc 81       	ldd	r31, Y+4	; 0x04
    b4c8:	81 85       	ldd	r24, Z+9	; 0x09
    b4ca:	92 85       	ldd	r25, Z+10	; 0x0a
    b4cc:	98 01       	movw	r18, r16
    b4ce:	2c 0d       	add	r18, r12
    b4d0:	3d 1d       	adc	r19, r13
    b4d2:	82 17       	cp	r24, r18
    b4d4:	93 07       	cpc	r25, r19
    b4d6:	18 f4       	brcc	.+6      	; 0xb4de <f_read+0x176>
    b4d8:	6c 01       	movw	r12, r24
    b4da:	c0 1a       	sub	r12, r16
    b4dc:	d1 0a       	sbc	r13, r17
    b4de:	86 01       	movw	r16, r12
    b4e0:	a3 01       	movw	r20, r6
    b4e2:	92 01       	movw	r18, r4
    b4e4:	b4 01       	movw	r22, r8
    b4e6:	eb 81       	ldd	r30, Y+3	; 0x03
    b4e8:	fc 81       	ldd	r31, Y+4	; 0x04
    b4ea:	81 81       	ldd	r24, Z+1	; 0x01
    b4ec:	0e 94 ee 67 	call	0xcfdc	; 0xcfdc <disk_read>
    b4f0:	89 2b       	or	r24, r25
    b4f2:	11 f6       	brne	.-124    	; 0xb478 <f_read+0x110>
    b4f4:	f7 01       	movw	r30, r14
    b4f6:	86 85       	ldd	r24, Z+14	; 0x0e
    b4f8:	87 ff       	sbrs	r24, 7
    b4fa:	1a c0       	rjmp	.+52     	; 0xb530 <f_read+0x1c8>
    b4fc:	80 8d       	ldd	r24, Z+24	; 0x18
    b4fe:	91 8d       	ldd	r25, Z+25	; 0x19
    b500:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b502:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b504:	84 19       	sub	r24, r4
    b506:	95 09       	sbc	r25, r5
    b508:	a6 09       	sbc	r26, r6
    b50a:	b7 09       	sbc	r27, r7
    b50c:	a6 01       	movw	r20, r12
    b50e:	60 e0       	ldi	r22, 0x00	; 0
    b510:	70 e0       	ldi	r23, 0x00	; 0
    b512:	84 17       	cp	r24, r20
    b514:	95 07       	cpc	r25, r21
    b516:	a6 07       	cpc	r26, r22
    b518:	b7 07       	cpc	r27, r23
    b51a:	50 f4       	brcc	.+20     	; 0xb530 <f_read+0x1c8>
    b51c:	98 2f       	mov	r25, r24
    b51e:	88 27       	eor	r24, r24
    b520:	99 0f       	add	r25, r25
    b522:	40 e0       	ldi	r20, 0x00	; 0
    b524:	52 e0       	ldi	r21, 0x02	; 2
    b526:	b1 01       	movw	r22, r2
    b528:	88 0d       	add	r24, r8
    b52a:	99 1d       	adc	r25, r9
    b52c:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    b530:	dc 2c       	mov	r13, r12
    b532:	cc 24       	eor	r12, r12
    b534:	dd 0c       	add	r13, r13
    b536:	41 c0       	rjmp	.+130    	; 0xb5ba <f_read+0x252>
    b538:	f7 01       	movw	r30, r14
    b53a:	20 8d       	ldd	r18, Z+24	; 0x18
    b53c:	31 8d       	ldd	r19, Z+25	; 0x19
    b53e:	42 8d       	ldd	r20, Z+26	; 0x1a
    b540:	53 8d       	ldd	r21, Z+27	; 0x1b
    b542:	42 16       	cp	r4, r18
    b544:	53 06       	cpc	r5, r19
    b546:	64 06       	cpc	r6, r20
    b548:	75 06       	cpc	r7, r21
    b54a:	f9 f0       	breq	.+62     	; 0xb58a <f_read+0x222>
    b54c:	86 85       	ldd	r24, Z+14	; 0x0e
    b54e:	87 ff       	sbrs	r24, 7
    b550:	0f c0       	rjmp	.+30     	; 0xb570 <f_read+0x208>
    b552:	01 e0       	ldi	r16, 0x01	; 1
    b554:	10 e0       	ldi	r17, 0x00	; 0
    b556:	b1 01       	movw	r22, r2
    b558:	eb 81       	ldd	r30, Y+3	; 0x03
    b55a:	fc 81       	ldd	r31, Y+4	; 0x04
    b55c:	81 81       	ldd	r24, Z+1	; 0x01
    b55e:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    b562:	89 2b       	or	r24, r25
    b564:	09 f0       	breq	.+2      	; 0xb568 <f_read+0x200>
    b566:	88 cf       	rjmp	.-240    	; 0xb478 <f_read+0x110>
    b568:	f7 01       	movw	r30, r14
    b56a:	86 85       	ldd	r24, Z+14	; 0x0e
    b56c:	8f 77       	andi	r24, 0x7F	; 127
    b56e:	86 87       	std	Z+14, r24	; 0x0e
    b570:	e9 81       	ldd	r30, Y+1	; 0x01
    b572:	fa 81       	ldd	r31, Y+2	; 0x02
    b574:	01 e0       	ldi	r16, 0x01	; 1
    b576:	10 e0       	ldi	r17, 0x00	; 0
    b578:	a3 01       	movw	r20, r6
    b57a:	92 01       	movw	r18, r4
    b57c:	b1 01       	movw	r22, r2
    b57e:	81 81       	ldd	r24, Z+1	; 0x01
    b580:	0e 94 ee 67 	call	0xcfdc	; 0xcfdc <disk_read>
    b584:	89 2b       	or	r24, r25
    b586:	09 f0       	breq	.+2      	; 0xb58a <f_read+0x222>
    b588:	77 cf       	rjmp	.-274    	; 0xb478 <f_read+0x110>
    b58a:	f7 01       	movw	r30, r14
    b58c:	40 8e       	std	Z+24, r4	; 0x18
    b58e:	51 8e       	std	Z+25, r5	; 0x19
    b590:	62 8e       	std	Z+26, r6	; 0x1a
    b592:	73 8e       	std	Z+27, r7	; 0x1b
    b594:	f7 01       	movw	r30, r14
    b596:	60 89       	ldd	r22, Z+16	; 0x10
    b598:	71 89       	ldd	r23, Z+17	; 0x11
    b59a:	71 70       	andi	r23, 0x01	; 1
    b59c:	80 e0       	ldi	r24, 0x00	; 0
    b59e:	92 e0       	ldi	r25, 0x02	; 2
    b5a0:	86 1b       	sub	r24, r22
    b5a2:	97 0b       	sbc	r25, r23
    b5a4:	65 01       	movw	r12, r10
    b5a6:	8a 15       	cp	r24, r10
    b5a8:	9b 05       	cpc	r25, r11
    b5aa:	08 f4       	brcc	.+2      	; 0xb5ae <f_read+0x246>
    b5ac:	6c 01       	movw	r12, r24
    b5ae:	62 0d       	add	r22, r2
    b5b0:	73 1d       	adc	r23, r3
    b5b2:	a6 01       	movw	r20, r12
    b5b4:	c4 01       	movw	r24, r8
    b5b6:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    b5ba:	ac 18       	sub	r10, r12
    b5bc:	bd 08       	sbc	r11, r13
    b5be:	ed 81       	ldd	r30, Y+5	; 0x05
    b5c0:	fe 81       	ldd	r31, Y+6	; 0x06
    b5c2:	80 81       	ld	r24, Z
    b5c4:	91 81       	ldd	r25, Z+1	; 0x01
    b5c6:	8c 0d       	add	r24, r12
    b5c8:	9d 1d       	adc	r25, r13
    b5ca:	91 83       	std	Z+1, r25	; 0x01
    b5cc:	80 83       	st	Z, r24
    b5ce:	8c 0c       	add	r8, r12
    b5d0:	9d 1c       	adc	r9, r13
    b5d2:	f7 01       	movw	r30, r14
    b5d4:	80 89       	ldd	r24, Z+16	; 0x10
    b5d6:	91 89       	ldd	r25, Z+17	; 0x11
    b5d8:	a2 89       	ldd	r26, Z+18	; 0x12
    b5da:	b3 89       	ldd	r27, Z+19	; 0x13
    b5dc:	8c 0d       	add	r24, r12
    b5de:	9d 1d       	adc	r25, r13
    b5e0:	a1 1d       	adc	r26, r1
    b5e2:	b1 1d       	adc	r27, r1
    b5e4:	80 8b       	std	Z+16, r24	; 0x10
    b5e6:	91 8b       	std	Z+17, r25	; 0x11
    b5e8:	a2 8b       	std	Z+18, r26	; 0x12
    b5ea:	b3 8b       	std	Z+19, r27	; 0x13
    b5ec:	f5 ce       	rjmp	.-534    	; 0xb3d8 <f_read+0x70>
    b5ee:	80 e0       	ldi	r24, 0x00	; 0
    b5f0:	01 c0       	rjmp	.+2      	; 0xb5f4 <f_read+0x28c>
    b5f2:	87 e0       	ldi	r24, 0x07	; 7
    b5f4:	90 e0       	ldi	r25, 0x00	; 0
    b5f6:	26 96       	adiw	r28, 0x06	; 6
    b5f8:	e2 e1       	ldi	r30, 0x12	; 18
    b5fa:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000b5fe <f_write>:
    b5fe:	a8 e0       	ldi	r26, 0x08	; 8
    b600:	b0 e0       	ldi	r27, 0x00	; 0
    b602:	e5 e0       	ldi	r30, 0x05	; 5
    b604:	fb e5       	ldi	r31, 0x5B	; 91
    b606:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    b60a:	7c 01       	movw	r14, r24
    b60c:	3b 01       	movw	r6, r22
    b60e:	5a 01       	movw	r10, r20
    b610:	38 87       	std	Y+8, r19	; 0x08
    b612:	2f 83       	std	Y+7, r18	; 0x07
    b614:	f9 01       	movw	r30, r18
    b616:	11 82       	std	Z+1, r1	; 0x01
    b618:	10 82       	st	Z, r1
    b61a:	be 01       	movw	r22, r28
    b61c:	6f 5f       	subi	r22, 0xFF	; 255
    b61e:	7f 4f       	sbci	r23, 0xFF	; 255
    b620:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <validate>
    b624:	00 97       	sbiw	r24, 0x00	; 0
    b626:	09 f0       	breq	.+2      	; 0xb62a <f_write+0x2c>
    b628:	7d c1       	rjmp	.+762    	; 0xb924 <f_write+0x326>
    b62a:	f7 01       	movw	r30, r14
    b62c:	87 85       	ldd	r24, Z+15	; 0x0f
    b62e:	90 e0       	ldi	r25, 0x00	; 0
    b630:	00 97       	sbiw	r24, 0x00	; 0
    b632:	09 f0       	breq	.+2      	; 0xb636 <f_write+0x38>
    b634:	77 c1       	rjmp	.+750    	; 0xb924 <f_write+0x326>
    b636:	86 85       	ldd	r24, Z+14	; 0x0e
    b638:	81 ff       	sbrs	r24, 1
    b63a:	72 c1       	rjmp	.+740    	; 0xb920 <f_write+0x322>
    b63c:	80 89       	ldd	r24, Z+16	; 0x10
    b63e:	91 89       	ldd	r25, Z+17	; 0x11
    b640:	a2 89       	ldd	r26, Z+18	; 0x12
    b642:	b3 89       	ldd	r27, Z+19	; 0x13
    b644:	ac 01       	movw	r20, r24
    b646:	bd 01       	movw	r22, r26
    b648:	4a 0d       	add	r20, r10
    b64a:	5b 1d       	adc	r21, r11
    b64c:	61 1d       	adc	r22, r1
    b64e:	71 1d       	adc	r23, r1
    b650:	48 17       	cp	r20, r24
    b652:	59 07       	cpc	r21, r25
    b654:	6a 07       	cpc	r22, r26
    b656:	7b 07       	cpc	r23, r27
    b658:	18 f4       	brcc	.+6      	; 0xb660 <f_write+0x62>
    b65a:	5c 01       	movw	r10, r24
    b65c:	a0 94       	com	r10
    b65e:	b0 94       	com	r11
    b660:	97 01       	movw	r18, r14
    b662:	2c 5d       	subi	r18, 0xDC	; 220
    b664:	3f 4f       	sbci	r19, 0xFF	; 255
    b666:	3e 83       	std	Y+6, r19	; 0x06
    b668:	2d 83       	std	Y+5, r18	; 0x05
    b66a:	a1 14       	cp	r10, r1
    b66c:	b1 04       	cpc	r11, r1
    b66e:	09 f4       	brne	.+2      	; 0xb672 <f_write+0x74>
    b670:	4d c0       	rjmp	.+154    	; 0xb70c <f_write+0x10e>
    b672:	f7 01       	movw	r30, r14
    b674:	40 89       	ldd	r20, Z+16	; 0x10
    b676:	51 89       	ldd	r21, Z+17	; 0x11
    b678:	62 89       	ldd	r22, Z+18	; 0x12
    b67a:	73 89       	ldd	r23, Z+19	; 0x13
    b67c:	db 01       	movw	r26, r22
    b67e:	ca 01       	movw	r24, r20
    b680:	91 70       	andi	r25, 0x01	; 1
    b682:	aa 27       	eor	r26, r26
    b684:	bb 27       	eor	r27, r27
    b686:	89 2b       	or	r24, r25
    b688:	8a 2b       	or	r24, r26
    b68a:	8b 2b       	or	r24, r27
    b68c:	09 f0       	breq	.+2      	; 0xb690 <f_write+0x92>
    b68e:	05 c1       	rjmp	.+522    	; 0xb89a <f_write+0x29c>
    b690:	e9 81       	ldd	r30, Y+1	; 0x01
    b692:	fa 81       	ldd	r31, Y+2	; 0x02
    b694:	81 84       	ldd	r8, Z+9	; 0x09
    b696:	92 84       	ldd	r9, Z+10	; 0x0a
    b698:	f1 e0       	ldi	r31, 0x01	; 1
    b69a:	8f 1a       	sub	r8, r31
    b69c:	91 08       	sbc	r9, r1
    b69e:	db 01       	movw	r26, r22
    b6a0:	ca 01       	movw	r24, r20
    b6a2:	e9 e0       	ldi	r30, 0x09	; 9
    b6a4:	b6 95       	lsr	r27
    b6a6:	a7 95       	ror	r26
    b6a8:	97 95       	ror	r25
    b6aa:	87 95       	ror	r24
    b6ac:	ea 95       	dec	r30
    b6ae:	d1 f7       	brne	.-12     	; 0xb6a4 <f_write+0xa6>
    b6b0:	88 22       	and	r8, r24
    b6b2:	99 22       	and	r9, r25
    b6b4:	81 14       	cp	r8, r1
    b6b6:	91 04       	cpc	r9, r1
    b6b8:	09 f0       	breq	.+2      	; 0xb6bc <f_write+0xbe>
    b6ba:	51 c0       	rjmp	.+162    	; 0xb75e <f_write+0x160>
    b6bc:	f7 01       	movw	r30, r14
    b6be:	41 15       	cp	r20, r1
    b6c0:	51 05       	cpc	r21, r1
    b6c2:	61 05       	cpc	r22, r1
    b6c4:	71 05       	cpc	r23, r1
    b6c6:	69 f4       	brne	.+26     	; 0xb6e2 <f_write+0xe4>
    b6c8:	66 81       	ldd	r22, Z+6	; 0x06
    b6ca:	77 81       	ldd	r23, Z+7	; 0x07
    b6cc:	80 85       	ldd	r24, Z+8	; 0x08
    b6ce:	91 85       	ldd	r25, Z+9	; 0x09
    b6d0:	61 15       	cp	r22, r1
    b6d2:	71 05       	cpc	r23, r1
    b6d4:	81 05       	cpc	r24, r1
    b6d6:	91 05       	cpc	r25, r1
    b6d8:	f9 f4       	brne	.+62     	; 0xb718 <f_write+0x11a>
    b6da:	40 e0       	ldi	r20, 0x00	; 0
    b6dc:	50 e0       	ldi	r21, 0x00	; 0
    b6de:	ba 01       	movw	r22, r20
    b6e0:	0d c0       	rjmp	.+26     	; 0xb6fc <f_write+0xfe>
    b6e2:	82 a1       	ldd	r24, Z+34	; 0x22
    b6e4:	93 a1       	ldd	r25, Z+35	; 0x23
    b6e6:	89 2b       	or	r24, r25
    b6e8:	21 f0       	breq	.+8      	; 0xb6f2 <f_write+0xf4>
    b6ea:	c7 01       	movw	r24, r14
    b6ec:	0e 94 55 46 	call	0x8caa	; 0x8caa <clmt_clust>
    b6f0:	08 c0       	rjmp	.+16     	; 0xb702 <f_write+0x104>
    b6f2:	f7 01       	movw	r30, r14
    b6f4:	44 89       	ldd	r20, Z+20	; 0x14
    b6f6:	55 89       	ldd	r21, Z+21	; 0x15
    b6f8:	66 89       	ldd	r22, Z+22	; 0x16
    b6fa:	77 89       	ldd	r23, Z+23	; 0x17
    b6fc:	c7 01       	movw	r24, r14
    b6fe:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <create_chain>
    b702:	61 15       	cp	r22, r1
    b704:	71 05       	cpc	r23, r1
    b706:	81 05       	cpc	r24, r1
    b708:	91 05       	cpc	r25, r1
    b70a:	31 f4       	brne	.+12     	; 0xb718 <f_write+0x11a>
    b70c:	f7 01       	movw	r30, r14
    b70e:	86 85       	ldd	r24, Z+14	; 0x0e
    b710:	80 64       	ori	r24, 0x40	; 64
    b712:	86 87       	std	Z+14, r24	; 0x0e
    b714:	80 e0       	ldi	r24, 0x00	; 0
    b716:	05 c1       	rjmp	.+522    	; 0xb922 <f_write+0x324>
    b718:	61 30       	cpi	r22, 0x01	; 1
    b71a:	71 05       	cpc	r23, r1
    b71c:	81 05       	cpc	r24, r1
    b71e:	91 05       	cpc	r25, r1
    b720:	11 f4       	brne	.+4      	; 0xb726 <f_write+0x128>
    b722:	82 e0       	ldi	r24, 0x02	; 2
    b724:	07 c0       	rjmp	.+14     	; 0xb734 <f_write+0x136>
    b726:	6f 3f       	cpi	r22, 0xFF	; 255
    b728:	ff ef       	ldi	r31, 0xFF	; 255
    b72a:	7f 07       	cpc	r23, r31
    b72c:	8f 07       	cpc	r24, r31
    b72e:	9f 07       	cpc	r25, r31
    b730:	21 f4       	brne	.+8      	; 0xb73a <f_write+0x13c>
    b732:	81 e0       	ldi	r24, 0x01	; 1
    b734:	f7 01       	movw	r30, r14
    b736:	87 87       	std	Z+15, r24	; 0x0f
    b738:	f4 c0       	rjmp	.+488    	; 0xb922 <f_write+0x324>
    b73a:	f7 01       	movw	r30, r14
    b73c:	64 8b       	std	Z+20, r22	; 0x14
    b73e:	75 8b       	std	Z+21, r23	; 0x15
    b740:	86 8b       	std	Z+22, r24	; 0x16
    b742:	97 8b       	std	Z+23, r25	; 0x17
    b744:	06 81       	ldd	r16, Z+6	; 0x06
    b746:	17 81       	ldd	r17, Z+7	; 0x07
    b748:	20 85       	ldd	r18, Z+8	; 0x08
    b74a:	31 85       	ldd	r19, Z+9	; 0x09
    b74c:	01 15       	cp	r16, r1
    b74e:	11 05       	cpc	r17, r1
    b750:	21 05       	cpc	r18, r1
    b752:	31 05       	cpc	r19, r1
    b754:	21 f4       	brne	.+8      	; 0xb75e <f_write+0x160>
    b756:	66 83       	std	Z+6, r22	; 0x06
    b758:	77 83       	std	Z+7, r23	; 0x07
    b75a:	80 87       	std	Z+8, r24	; 0x08
    b75c:	91 87       	std	Z+9, r25	; 0x09
    b75e:	f7 01       	movw	r30, r14
    b760:	86 85       	ldd	r24, Z+14	; 0x0e
    b762:	87 ff       	sbrs	r24, 7
    b764:	13 c0       	rjmp	.+38     	; 0xb78c <f_write+0x18e>
    b766:	20 8d       	ldd	r18, Z+24	; 0x18
    b768:	31 8d       	ldd	r19, Z+25	; 0x19
    b76a:	42 8d       	ldd	r20, Z+26	; 0x1a
    b76c:	53 8d       	ldd	r21, Z+27	; 0x1b
    b76e:	e9 81       	ldd	r30, Y+1	; 0x01
    b770:	fa 81       	ldd	r31, Y+2	; 0x02
    b772:	01 e0       	ldi	r16, 0x01	; 1
    b774:	10 e0       	ldi	r17, 0x00	; 0
    b776:	6d 81       	ldd	r22, Y+5	; 0x05
    b778:	7e 81       	ldd	r23, Y+6	; 0x06
    b77a:	81 81       	ldd	r24, Z+1	; 0x01
    b77c:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    b780:	89 2b       	or	r24, r25
    b782:	b9 f6       	brne	.-82     	; 0xb732 <f_write+0x134>
    b784:	f7 01       	movw	r30, r14
    b786:	86 85       	ldd	r24, Z+14	; 0x0e
    b788:	8f 77       	andi	r24, 0x7F	; 127
    b78a:	86 87       	std	Z+14, r24	; 0x0e
    b78c:	29 81       	ldd	r18, Y+1	; 0x01
    b78e:	3a 81       	ldd	r19, Y+2	; 0x02
    b790:	3c 83       	std	Y+4, r19	; 0x04
    b792:	2b 83       	std	Y+3, r18	; 0x03
    b794:	f7 01       	movw	r30, r14
    b796:	44 89       	ldd	r20, Z+20	; 0x14
    b798:	55 89       	ldd	r21, Z+21	; 0x15
    b79a:	66 89       	ldd	r22, Z+22	; 0x16
    b79c:	77 89       	ldd	r23, Z+23	; 0x17
    b79e:	c9 01       	movw	r24, r18
    b7a0:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    b7a4:	61 15       	cp	r22, r1
    b7a6:	71 05       	cpc	r23, r1
    b7a8:	81 05       	cpc	r24, r1
    b7aa:	91 05       	cpc	r25, r1
    b7ac:	09 f4       	brne	.+2      	; 0xb7b0 <f_write+0x1b2>
    b7ae:	b9 cf       	rjmp	.-142    	; 0xb722 <f_write+0x124>
    b7b0:	1b 01       	movw	r2, r22
    b7b2:	2c 01       	movw	r4, r24
    b7b4:	28 0c       	add	r2, r8
    b7b6:	39 1c       	adc	r3, r9
    b7b8:	41 1c       	adc	r4, r1
    b7ba:	51 1c       	adc	r5, r1
    b7bc:	65 01       	movw	r12, r10
    b7be:	cd 2c       	mov	r12, r13
    b7c0:	dd 24       	eor	r13, r13
    b7c2:	c6 94       	lsr	r12
    b7c4:	c1 14       	cp	r12, r1
    b7c6:	d1 04       	cpc	r13, r1
    b7c8:	f1 f1       	breq	.+124    	; 0xb846 <f_write+0x248>
    b7ca:	eb 81       	ldd	r30, Y+3	; 0x03
    b7cc:	fc 81       	ldd	r31, Y+4	; 0x04
    b7ce:	81 85       	ldd	r24, Z+9	; 0x09
    b7d0:	92 85       	ldd	r25, Z+10	; 0x0a
    b7d2:	94 01       	movw	r18, r8
    b7d4:	2c 0d       	add	r18, r12
    b7d6:	3d 1d       	adc	r19, r13
    b7d8:	82 17       	cp	r24, r18
    b7da:	93 07       	cpc	r25, r19
    b7dc:	18 f4       	brcc	.+6      	; 0xb7e4 <f_write+0x1e6>
    b7de:	6c 01       	movw	r12, r24
    b7e0:	c8 18       	sub	r12, r8
    b7e2:	d9 08       	sbc	r13, r9
    b7e4:	86 01       	movw	r16, r12
    b7e6:	a2 01       	movw	r20, r4
    b7e8:	91 01       	movw	r18, r2
    b7ea:	b3 01       	movw	r22, r6
    b7ec:	eb 81       	ldd	r30, Y+3	; 0x03
    b7ee:	fc 81       	ldd	r31, Y+4	; 0x04
    b7f0:	81 81       	ldd	r24, Z+1	; 0x01
    b7f2:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    b7f6:	89 2b       	or	r24, r25
    b7f8:	09 f0       	breq	.+2      	; 0xb7fc <f_write+0x1fe>
    b7fa:	9b cf       	rjmp	.-202    	; 0xb732 <f_write+0x134>
    b7fc:	f7 01       	movw	r30, r14
    b7fe:	80 8d       	ldd	r24, Z+24	; 0x18
    b800:	91 8d       	ldd	r25, Z+25	; 0x19
    b802:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b804:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b806:	82 19       	sub	r24, r2
    b808:	93 09       	sbc	r25, r3
    b80a:	a4 09       	sbc	r26, r4
    b80c:	b5 09       	sbc	r27, r5
    b80e:	a6 01       	movw	r20, r12
    b810:	60 e0       	ldi	r22, 0x00	; 0
    b812:	70 e0       	ldi	r23, 0x00	; 0
    b814:	84 17       	cp	r24, r20
    b816:	95 07       	cpc	r25, r21
    b818:	a6 07       	cpc	r26, r22
    b81a:	b7 07       	cpc	r27, r23
    b81c:	80 f4       	brcc	.+32     	; 0xb83e <f_write+0x240>
    b81e:	98 2f       	mov	r25, r24
    b820:	88 27       	eor	r24, r24
    b822:	99 0f       	add	r25, r25
    b824:	b3 01       	movw	r22, r6
    b826:	68 0f       	add	r22, r24
    b828:	79 1f       	adc	r23, r25
    b82a:	40 e0       	ldi	r20, 0x00	; 0
    b82c:	52 e0       	ldi	r21, 0x02	; 2
    b82e:	8d 81       	ldd	r24, Y+5	; 0x05
    b830:	9e 81       	ldd	r25, Y+6	; 0x06
    b832:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    b836:	f7 01       	movw	r30, r14
    b838:	86 85       	ldd	r24, Z+14	; 0x0e
    b83a:	8f 77       	andi	r24, 0x7F	; 127
    b83c:	86 87       	std	Z+14, r24	; 0x0e
    b83e:	dc 2c       	mov	r13, r12
    b840:	cc 24       	eor	r12, r12
    b842:	dd 0c       	add	r13, r13
    b844:	43 c0       	rjmp	.+134    	; 0xb8cc <f_write+0x2ce>
    b846:	f7 01       	movw	r30, r14
    b848:	80 8d       	ldd	r24, Z+24	; 0x18
    b84a:	91 8d       	ldd	r25, Z+25	; 0x19
    b84c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b84e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b850:	28 16       	cp	r2, r24
    b852:	39 06       	cpc	r3, r25
    b854:	4a 06       	cpc	r4, r26
    b856:	5b 06       	cpc	r5, r27
    b858:	d9 f0       	breq	.+54     	; 0xb890 <f_write+0x292>
    b85a:	40 89       	ldd	r20, Z+16	; 0x10
    b85c:	51 89       	ldd	r21, Z+17	; 0x11
    b85e:	62 89       	ldd	r22, Z+18	; 0x12
    b860:	73 89       	ldd	r23, Z+19	; 0x13
    b862:	82 85       	ldd	r24, Z+10	; 0x0a
    b864:	93 85       	ldd	r25, Z+11	; 0x0b
    b866:	a4 85       	ldd	r26, Z+12	; 0x0c
    b868:	b5 85       	ldd	r27, Z+13	; 0x0d
    b86a:	48 17       	cp	r20, r24
    b86c:	59 07       	cpc	r21, r25
    b86e:	6a 07       	cpc	r22, r26
    b870:	7b 07       	cpc	r23, r27
    b872:	70 f4       	brcc	.+28     	; 0xb890 <f_write+0x292>
    b874:	01 e0       	ldi	r16, 0x01	; 1
    b876:	10 e0       	ldi	r17, 0x00	; 0
    b878:	a2 01       	movw	r20, r4
    b87a:	91 01       	movw	r18, r2
    b87c:	6d 81       	ldd	r22, Y+5	; 0x05
    b87e:	7e 81       	ldd	r23, Y+6	; 0x06
    b880:	eb 81       	ldd	r30, Y+3	; 0x03
    b882:	fc 81       	ldd	r31, Y+4	; 0x04
    b884:	81 81       	ldd	r24, Z+1	; 0x01
    b886:	0e 94 ee 67 	call	0xcfdc	; 0xcfdc <disk_read>
    b88a:	89 2b       	or	r24, r25
    b88c:	09 f0       	breq	.+2      	; 0xb890 <f_write+0x292>
    b88e:	51 cf       	rjmp	.-350    	; 0xb732 <f_write+0x134>
    b890:	f7 01       	movw	r30, r14
    b892:	20 8e       	std	Z+24, r2	; 0x18
    b894:	31 8e       	std	Z+25, r3	; 0x19
    b896:	42 8e       	std	Z+26, r4	; 0x1a
    b898:	53 8e       	std	Z+27, r5	; 0x1b
    b89a:	f7 01       	movw	r30, r14
    b89c:	80 89       	ldd	r24, Z+16	; 0x10
    b89e:	91 89       	ldd	r25, Z+17	; 0x11
    b8a0:	91 70       	andi	r25, 0x01	; 1
    b8a2:	20 e0       	ldi	r18, 0x00	; 0
    b8a4:	32 e0       	ldi	r19, 0x02	; 2
    b8a6:	28 1b       	sub	r18, r24
    b8a8:	39 0b       	sbc	r19, r25
    b8aa:	65 01       	movw	r12, r10
    b8ac:	2a 15       	cp	r18, r10
    b8ae:	3b 05       	cpc	r19, r11
    b8b0:	08 f4       	brcc	.+2      	; 0xb8b4 <f_write+0x2b6>
    b8b2:	69 01       	movw	r12, r18
    b8b4:	a6 01       	movw	r20, r12
    b8b6:	b3 01       	movw	r22, r6
    b8b8:	2d 81       	ldd	r18, Y+5	; 0x05
    b8ba:	3e 81       	ldd	r19, Y+6	; 0x06
    b8bc:	82 0f       	add	r24, r18
    b8be:	93 1f       	adc	r25, r19
    b8c0:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    b8c4:	f7 01       	movw	r30, r14
    b8c6:	86 85       	ldd	r24, Z+14	; 0x0e
    b8c8:	80 68       	ori	r24, 0x80	; 128
    b8ca:	86 87       	std	Z+14, r24	; 0x0e
    b8cc:	ac 18       	sub	r10, r12
    b8ce:	bd 08       	sbc	r11, r13
    b8d0:	ef 81       	ldd	r30, Y+7	; 0x07
    b8d2:	f8 85       	ldd	r31, Y+8	; 0x08
    b8d4:	80 81       	ld	r24, Z
    b8d6:	91 81       	ldd	r25, Z+1	; 0x01
    b8d8:	8c 0d       	add	r24, r12
    b8da:	9d 1d       	adc	r25, r13
    b8dc:	91 83       	std	Z+1, r25	; 0x01
    b8de:	80 83       	st	Z, r24
    b8e0:	6c 0c       	add	r6, r12
    b8e2:	7d 1c       	adc	r7, r13
    b8e4:	f7 01       	movw	r30, r14
    b8e6:	80 89       	ldd	r24, Z+16	; 0x10
    b8e8:	91 89       	ldd	r25, Z+17	; 0x11
    b8ea:	a2 89       	ldd	r26, Z+18	; 0x12
    b8ec:	b3 89       	ldd	r27, Z+19	; 0x13
    b8ee:	8c 0d       	add	r24, r12
    b8f0:	9d 1d       	adc	r25, r13
    b8f2:	a1 1d       	adc	r26, r1
    b8f4:	b1 1d       	adc	r27, r1
    b8f6:	80 8b       	std	Z+16, r24	; 0x10
    b8f8:	91 8b       	std	Z+17, r25	; 0x11
    b8fa:	a2 8b       	std	Z+18, r26	; 0x12
    b8fc:	b3 8b       	std	Z+19, r27	; 0x13
    b8fe:	42 85       	ldd	r20, Z+10	; 0x0a
    b900:	53 85       	ldd	r21, Z+11	; 0x0b
    b902:	64 85       	ldd	r22, Z+12	; 0x0c
    b904:	75 85       	ldd	r23, Z+13	; 0x0d
    b906:	48 17       	cp	r20, r24
    b908:	59 07       	cpc	r21, r25
    b90a:	6a 07       	cpc	r22, r26
    b90c:	7b 07       	cpc	r23, r27
    b90e:	10 f4       	brcc	.+4      	; 0xb914 <f_write+0x316>
    b910:	ac 01       	movw	r20, r24
    b912:	bd 01       	movw	r22, r26
    b914:	f7 01       	movw	r30, r14
    b916:	42 87       	std	Z+10, r20	; 0x0a
    b918:	53 87       	std	Z+11, r21	; 0x0b
    b91a:	64 87       	std	Z+12, r22	; 0x0c
    b91c:	75 87       	std	Z+13, r23	; 0x0d
    b91e:	a5 ce       	rjmp	.-694    	; 0xb66a <f_write+0x6c>
    b920:	87 e0       	ldi	r24, 0x07	; 7
    b922:	90 e0       	ldi	r25, 0x00	; 0
    b924:	28 96       	adiw	r28, 0x08	; 8
    b926:	e2 e1       	ldi	r30, 0x12	; 18
    b928:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000b92c <f_sync>:
    b92c:	8f 92       	push	r8
    b92e:	9f 92       	push	r9
    b930:	af 92       	push	r10
    b932:	bf 92       	push	r11
    b934:	ef 92       	push	r14
    b936:	ff 92       	push	r15
    b938:	0f 93       	push	r16
    b93a:	1f 93       	push	r17
    b93c:	cf 93       	push	r28
    b93e:	df 93       	push	r29
    b940:	00 d0       	rcall	.+0      	; 0xb942 <f_sync+0x16>
    b942:	cd b7       	in	r28, 0x3d	; 61
    b944:	de b7       	in	r29, 0x3e	; 62
    b946:	7c 01       	movw	r14, r24
    b948:	be 01       	movw	r22, r28
    b94a:	6f 5f       	subi	r22, 0xFF	; 255
    b94c:	7f 4f       	sbci	r23, 0xFF	; 255
    b94e:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <validate>
    b952:	00 97       	sbiw	r24, 0x00	; 0
    b954:	09 f0       	breq	.+2      	; 0xb958 <f_sync+0x2c>
    b956:	5d c0       	rjmp	.+186    	; 0xba12 <f_sync+0xe6>
    b958:	f7 01       	movw	r30, r14
    b95a:	86 85       	ldd	r24, Z+14	; 0x0e
    b95c:	86 ff       	sbrs	r24, 6
    b95e:	55 c0       	rjmp	.+170    	; 0xba0a <f_sync+0xde>
    b960:	87 ff       	sbrs	r24, 7
    b962:	15 c0       	rjmp	.+42     	; 0xb98e <f_sync+0x62>
    b964:	20 8d       	ldd	r18, Z+24	; 0x18
    b966:	31 8d       	ldd	r19, Z+25	; 0x19
    b968:	42 8d       	ldd	r20, Z+26	; 0x1a
    b96a:	53 8d       	ldd	r21, Z+27	; 0x1b
    b96c:	e9 81       	ldd	r30, Y+1	; 0x01
    b96e:	fa 81       	ldd	r31, Y+2	; 0x02
    b970:	01 e0       	ldi	r16, 0x01	; 1
    b972:	10 e0       	ldi	r17, 0x00	; 0
    b974:	b7 01       	movw	r22, r14
    b976:	6c 5d       	subi	r22, 0xDC	; 220
    b978:	7f 4f       	sbci	r23, 0xFF	; 255
    b97a:	81 81       	ldd	r24, Z+1	; 0x01
    b97c:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    b980:	89 2b       	or	r24, r25
    b982:	09 f0       	breq	.+2      	; 0xb986 <f_sync+0x5a>
    b984:	44 c0       	rjmp	.+136    	; 0xba0e <f_sync+0xe2>
    b986:	f7 01       	movw	r30, r14
    b988:	86 85       	ldd	r24, Z+14	; 0x0e
    b98a:	8f 77       	andi	r24, 0x7F	; 127
    b98c:	86 87       	std	Z+14, r24	; 0x0e
    b98e:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <get_fattime>
    b992:	4b 01       	movw	r8, r22
    b994:	5c 01       	movw	r10, r24
    b996:	f7 01       	movw	r30, r14
    b998:	44 8d       	ldd	r20, Z+28	; 0x1c
    b99a:	55 8d       	ldd	r21, Z+29	; 0x1d
    b99c:	66 8d       	ldd	r22, Z+30	; 0x1e
    b99e:	77 8d       	ldd	r23, Z+31	; 0x1f
    b9a0:	89 81       	ldd	r24, Y+1	; 0x01
    b9a2:	9a 81       	ldd	r25, Y+2	; 0x02
    b9a4:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    b9a8:	00 97       	sbiw	r24, 0x00	; 0
    b9aa:	99 f5       	brne	.+102    	; 0xba12 <f_sync+0xe6>
    b9ac:	f7 01       	movw	r30, r14
    b9ae:	00 a1       	ldd	r16, Z+32	; 0x20
    b9b0:	11 a1       	ldd	r17, Z+33	; 0x21
    b9b2:	f8 01       	movw	r30, r16
    b9b4:	83 85       	ldd	r24, Z+11	; 0x0b
    b9b6:	80 62       	ori	r24, 0x20	; 32
    b9b8:	83 87       	std	Z+11, r24	; 0x0b
    b9ba:	f7 01       	movw	r30, r14
    b9bc:	26 81       	ldd	r18, Z+6	; 0x06
    b9be:	37 81       	ldd	r19, Z+7	; 0x07
    b9c0:	40 85       	ldd	r20, Z+8	; 0x08
    b9c2:	51 85       	ldd	r21, Z+9	; 0x09
    b9c4:	b8 01       	movw	r22, r16
    b9c6:	80 81       	ld	r24, Z
    b9c8:	91 81       	ldd	r25, Z+1	; 0x01
    b9ca:	0e 94 42 48 	call	0x9084	; 0x9084 <st_clust.isra.4>
    b9ce:	f7 01       	movw	r30, r14
    b9d0:	42 85       	ldd	r20, Z+10	; 0x0a
    b9d2:	53 85       	ldd	r21, Z+11	; 0x0b
    b9d4:	64 85       	ldd	r22, Z+12	; 0x0c
    b9d6:	75 85       	ldd	r23, Z+13	; 0x0d
    b9d8:	c8 01       	movw	r24, r16
    b9da:	4c 96       	adiw	r24, 0x1c	; 28
    b9dc:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <st_dword>
    b9e0:	b5 01       	movw	r22, r10
    b9e2:	a4 01       	movw	r20, r8
    b9e4:	c8 01       	movw	r24, r16
    b9e6:	46 96       	adiw	r24, 0x16	; 22
    b9e8:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <st_dword>
    b9ec:	f8 01       	movw	r30, r16
    b9ee:	12 8a       	std	Z+18, r1	; 0x12
    b9f0:	13 8a       	std	Z+19, r1	; 0x13
    b9f2:	89 81       	ldd	r24, Y+1	; 0x01
    b9f4:	9a 81       	ldd	r25, Y+2	; 0x02
    b9f6:	21 e0       	ldi	r18, 0x01	; 1
    b9f8:	fc 01       	movw	r30, r24
    b9fa:	23 83       	std	Z+3, r18	; 0x03
    b9fc:	0e 94 a2 48 	call	0x9144	; 0x9144 <sync_fs>
    ba00:	f7 01       	movw	r30, r14
    ba02:	26 85       	ldd	r18, Z+14	; 0x0e
    ba04:	2f 7b       	andi	r18, 0xBF	; 191
    ba06:	26 87       	std	Z+14, r18	; 0x0e
    ba08:	04 c0       	rjmp	.+8      	; 0xba12 <f_sync+0xe6>
    ba0a:	80 e0       	ldi	r24, 0x00	; 0
    ba0c:	01 c0       	rjmp	.+2      	; 0xba10 <f_sync+0xe4>
    ba0e:	81 e0       	ldi	r24, 0x01	; 1
    ba10:	90 e0       	ldi	r25, 0x00	; 0
    ba12:	0f 90       	pop	r0
    ba14:	0f 90       	pop	r0
    ba16:	df 91       	pop	r29
    ba18:	cf 91       	pop	r28
    ba1a:	1f 91       	pop	r17
    ba1c:	0f 91       	pop	r16
    ba1e:	ff 90       	pop	r15
    ba20:	ef 90       	pop	r14
    ba22:	bf 90       	pop	r11
    ba24:	af 90       	pop	r10
    ba26:	9f 90       	pop	r9
    ba28:	8f 90       	pop	r8
    ba2a:	08 95       	ret

0000ba2c <f_close>:
    ba2c:	a2 e0       	ldi	r26, 0x02	; 2
    ba2e:	b0 e0       	ldi	r27, 0x00	; 0
    ba30:	ec e1       	ldi	r30, 0x1C	; 28
    ba32:	fd e5       	ldi	r31, 0x5D	; 93
    ba34:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    ba38:	8c 01       	movw	r16, r24
    ba3a:	78 df       	rcall	.-272    	; 0xb92c <f_sync>
    ba3c:	00 97       	sbiw	r24, 0x00	; 0
    ba3e:	59 f4       	brne	.+22     	; 0xba56 <f_close+0x2a>
    ba40:	be 01       	movw	r22, r28
    ba42:	6f 5f       	subi	r22, 0xFF	; 255
    ba44:	7f 4f       	sbci	r23, 0xFF	; 255
    ba46:	c8 01       	movw	r24, r16
    ba48:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <validate>
    ba4c:	00 97       	sbiw	r24, 0x00	; 0
    ba4e:	19 f4       	brne	.+6      	; 0xba56 <f_close+0x2a>
    ba50:	f8 01       	movw	r30, r16
    ba52:	11 82       	std	Z+1, r1	; 0x01
    ba54:	10 82       	st	Z, r1
    ba56:	22 96       	adiw	r28, 0x02	; 2
    ba58:	e4 e0       	ldi	r30, 0x04	; 4
    ba5a:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

0000ba5e <f_chdir>:
    ba5e:	a2 e3       	ldi	r26, 0x32	; 50
    ba60:	b0 e0       	ldi	r27, 0x00	; 0
    ba62:	e5 e3       	ldi	r30, 0x35	; 53
    ba64:	fd e5       	ldi	r31, 0x5D	; 93
    ba66:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    ba6a:	9a ab       	std	Y+50, r25	; 0x32
    ba6c:	89 ab       	std	Y+49, r24	; 0x31
    ba6e:	40 e0       	ldi	r20, 0x00	; 0
    ba70:	be 01       	movw	r22, r28
    ba72:	61 5d       	subi	r22, 0xD1	; 209
    ba74:	7f 4f       	sbci	r23, 0xFF	; 255
    ba76:	ce 01       	movw	r24, r28
    ba78:	c1 96       	adiw	r24, 0x31	; 49
    ba7a:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    ba7e:	00 97       	sbiw	r24, 0x00	; 0
    ba80:	09 f0       	breq	.+2      	; 0xba84 <f_chdir+0x26>
    ba82:	44 c0       	rjmp	.+136    	; 0xbb0c <f_chdir+0xae>
    ba84:	8f a5       	ldd	r24, Y+47	; 0x2f
    ba86:	98 a9       	ldd	r25, Y+48	; 0x30
    ba88:	9a 83       	std	Y+2, r25	; 0x02
    ba8a:	89 83       	std	Y+1, r24	; 0x01
    ba8c:	80 e0       	ldi	r24, 0x00	; 0
    ba8e:	92 e0       	ldi	r25, 0x02	; 2
    ba90:	0e 94 32 67 	call	0xce64	; 0xce64 <ff_memalloc>
    ba94:	7c 01       	movw	r14, r24
    ba96:	00 97       	sbiw	r24, 0x00	; 0
    ba98:	a9 f1       	breq	.+106    	; 0xbb04 <f_chdir+0xa6>
    ba9a:	ef a5       	ldd	r30, Y+47	; 0x2f
    ba9c:	f8 a9       	ldd	r31, Y+48	; 0x30
    ba9e:	94 87       	std	Z+12, r25	; 0x0c
    baa0:	83 87       	std	Z+11, r24	; 0x0b
    baa2:	69 a9       	ldd	r22, Y+49	; 0x31
    baa4:	7a a9       	ldd	r23, Y+50	; 0x32
    baa6:	ce 01       	movw	r24, r28
    baa8:	01 96       	adiw	r24, 0x01	; 1
    baaa:	2e d8       	rcall	.-4004   	; 0xab08 <follow_path>
    baac:	8c 01       	movw	r16, r24
    baae:	89 2b       	or	r24, r25
    bab0:	09 f5       	brne	.+66     	; 0xbaf4 <f_chdir+0x96>
    bab2:	88 a5       	ldd	r24, Y+40	; 0x28
    bab4:	87 ff       	sbrs	r24, 7
    bab6:	0b c0       	rjmp	.+22     	; 0xbace <f_chdir+0x70>
    bab8:	ef a5       	ldd	r30, Y+47	; 0x2f
    baba:	f8 a9       	ldd	r31, Y+48	; 0x30
    babc:	8f 81       	ldd	r24, Y+7	; 0x07
    babe:	98 85       	ldd	r25, Y+8	; 0x08
    bac0:	a9 85       	ldd	r26, Y+9	; 0x09
    bac2:	ba 85       	ldd	r27, Y+10	; 0x0a
    bac4:	85 8b       	std	Z+21, r24	; 0x15
    bac6:	96 8b       	std	Z+22, r25	; 0x16
    bac8:	a7 8b       	std	Z+23, r26	; 0x17
    baca:	b0 8f       	std	Z+24, r27	; 0x18
    bacc:	13 c0       	rjmp	.+38     	; 0xbaf4 <f_chdir+0x96>
    bace:	8d 81       	ldd	r24, Y+5	; 0x05
    bad0:	84 ff       	sbrs	r24, 4
    bad2:	0e c0       	rjmp	.+28     	; 0xbaf0 <f_chdir+0x92>
    bad4:	cf a4       	ldd	r12, Y+47	; 0x2f
    bad6:	d8 a8       	ldd	r13, Y+48	; 0x30
    bad8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bada:	7c 8d       	ldd	r23, Y+28	; 0x1c
    badc:	f6 01       	movw	r30, r12
    bade:	80 81       	ld	r24, Z
    bae0:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    bae4:	f6 01       	movw	r30, r12
    bae6:	65 8b       	std	Z+21, r22	; 0x15
    bae8:	76 8b       	std	Z+22, r23	; 0x16
    baea:	87 8b       	std	Z+23, r24	; 0x17
    baec:	90 8f       	std	Z+24, r25	; 0x18
    baee:	02 c0       	rjmp	.+4      	; 0xbaf4 <f_chdir+0x96>
    baf0:	05 e0       	ldi	r16, 0x05	; 5
    baf2:	10 e0       	ldi	r17, 0x00	; 0
    baf4:	c7 01       	movw	r24, r14
    baf6:	0e 94 35 67 	call	0xce6a	; 0xce6a <ff_memfree>
    bafa:	04 30       	cpi	r16, 0x04	; 4
    bafc:	11 05       	cpc	r17, r1
    bafe:	29 f4       	brne	.+10     	; 0xbb0a <f_chdir+0xac>
    bb00:	85 e0       	ldi	r24, 0x05	; 5
    bb02:	01 c0       	rjmp	.+2      	; 0xbb06 <f_chdir+0xa8>
    bb04:	81 e1       	ldi	r24, 0x11	; 17
    bb06:	90 e0       	ldi	r25, 0x00	; 0
    bb08:	01 c0       	rjmp	.+2      	; 0xbb0c <f_chdir+0xae>
    bb0a:	c8 01       	movw	r24, r16
    bb0c:	e2 96       	adiw	r28, 0x32	; 50
    bb0e:	e8 e0       	ldi	r30, 0x08	; 8
    bb10:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000bb14 <f_getcwd>:
    bb14:	a8 e4       	ldi	r26, 0x48	; 72
    bb16:	b1 e0       	ldi	r27, 0x01	; 1
    bb18:	e0 e9       	ldi	r30, 0x90	; 144
    bb1a:	fd e5       	ldi	r31, 0x5D	; 93
    bb1c:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    bb20:	c9 5b       	subi	r28, 0xB9	; 185
    bb22:	de 4f       	sbci	r29, 0xFE	; 254
    bb24:	99 83       	std	Y+1, r25	; 0x01
    bb26:	88 83       	st	Y, r24
    bb28:	c7 54       	subi	r28, 0x47	; 71
    bb2a:	d1 40       	sbci	r29, 0x01	; 1
    bb2c:	4b 01       	movw	r8, r22
    bb2e:	7c 01       	movw	r14, r24
    bb30:	fc 01       	movw	r30, r24
    bb32:	10 82       	st	Z, r1
    bb34:	40 e0       	ldi	r20, 0x00	; 0
    bb36:	be 01       	movw	r22, r28
    bb38:	6b 5b       	subi	r22, 0xBB	; 187
    bb3a:	7e 4f       	sbci	r23, 0xFE	; 254
    bb3c:	ce 01       	movw	r24, r28
    bb3e:	89 5b       	subi	r24, 0xB9	; 185
    bb40:	9e 4f       	sbci	r25, 0xFE	; 254
    bb42:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    bb46:	1c 01       	movw	r2, r24
    bb48:	89 2b       	or	r24, r25
    bb4a:	09 f0       	breq	.+2      	; 0xbb4e <f_getcwd+0x3a>
    bb4c:	03 c1       	rjmp	.+518    	; 0xbd54 <f_getcwd+0x240>
    bb4e:	cb 5b       	subi	r28, 0xBB	; 187
    bb50:	de 4f       	sbci	r29, 0xFE	; 254
    bb52:	88 81       	ld	r24, Y
    bb54:	99 81       	ldd	r25, Y+1	; 0x01
    bb56:	c5 54       	subi	r28, 0x45	; 69
    bb58:	d1 40       	sbci	r29, 0x01	; 1
    bb5a:	c9 5e       	subi	r28, 0xE9	; 233
    bb5c:	de 4f       	sbci	r29, 0xFE	; 254
    bb5e:	99 83       	std	Y+1, r25	; 0x01
    bb60:	88 83       	st	Y, r24
    bb62:	c7 51       	subi	r28, 0x17	; 23
    bb64:	d1 40       	sbci	r29, 0x01	; 1
    bb66:	80 e0       	ldi	r24, 0x00	; 0
    bb68:	92 e0       	ldi	r25, 0x02	; 2
    bb6a:	0e 94 32 67 	call	0xce64	; 0xce64 <ff_memalloc>
    bb6e:	5c 01       	movw	r10, r24
    bb70:	00 97       	sbiw	r24, 0x00	; 0
    bb72:	09 f4       	brne	.+2      	; 0xbb76 <f_getcwd+0x62>
    bb74:	f3 c0       	rjmp	.+486    	; 0xbd5c <f_getcwd+0x248>
    bb76:	cb 5b       	subi	r28, 0xBB	; 187
    bb78:	de 4f       	sbci	r29, 0xFE	; 254
    bb7a:	e8 81       	ld	r30, Y
    bb7c:	f9 81       	ldd	r31, Y+1	; 0x01
    bb7e:	c5 54       	subi	r28, 0x45	; 69
    bb80:	d1 40       	sbci	r29, 0x01	; 1
    bb82:	94 87       	std	Z+12, r25	; 0x0c
    bb84:	83 87       	std	Z+11, r24	; 0x0b
    bb86:	85 89       	ldd	r24, Z+21	; 0x15
    bb88:	96 89       	ldd	r25, Z+22	; 0x16
    bb8a:	a7 89       	ldd	r26, Z+23	; 0x17
    bb8c:	b0 8d       	ldd	r27, Z+24	; 0x18
    bb8e:	c3 5e       	subi	r28, 0xE3	; 227
    bb90:	de 4f       	sbci	r29, 0xFE	; 254
    bb92:	88 83       	st	Y, r24
    bb94:	99 83       	std	Y+1, r25	; 0x01
    bb96:	aa 83       	std	Y+2, r26	; 0x02
    bb98:	bb 83       	std	Y+3, r27	; 0x03
    bb9a:	cd 51       	subi	r28, 0x1D	; 29
    bb9c:	d1 40       	sbci	r29, 0x01	; 1
    bb9e:	84 01       	movw	r16, r8
    bba0:	ce 01       	movw	r24, r28
    bba2:	01 96       	adiw	r24, 0x01	; 1
    bba4:	6c 01       	movw	r12, r24
    bba6:	c3 5e       	subi	r28, 0xE3	; 227
    bba8:	de 4f       	sbci	r29, 0xFE	; 254
    bbaa:	48 80       	ld	r4, Y
    bbac:	59 80       	ldd	r5, Y+1	; 0x01
    bbae:	6a 80       	ldd	r6, Y+2	; 0x02
    bbb0:	7b 80       	ldd	r7, Y+3	; 0x03
    bbb2:	cd 51       	subi	r28, 0x1D	; 29
    bbb4:	d1 40       	sbci	r29, 0x01	; 1
    bbb6:	41 14       	cp	r4, r1
    bbb8:	51 04       	cpc	r5, r1
    bbba:	61 04       	cpc	r6, r1
    bbbc:	71 04       	cpc	r7, r1
    bbbe:	09 f4       	brne	.+2      	; 0xbbc2 <f_getcwd+0xae>
    bbc0:	a3 c0       	rjmp	.+326    	; 0xbd08 <f_getcwd+0x1f4>
    bbc2:	40 e2       	ldi	r20, 0x20	; 32
    bbc4:	50 e0       	ldi	r21, 0x00	; 0
    bbc6:	60 e0       	ldi	r22, 0x00	; 0
    bbc8:	70 e0       	ldi	r23, 0x00	; 0
    bbca:	ce 01       	movw	r24, r28
    bbcc:	89 5e       	subi	r24, 0xE9	; 233
    bbce:	9e 4f       	sbci	r25, 0xFE	; 254
    bbd0:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <dir_sdi>
    bbd4:	00 97       	sbiw	r24, 0x00	; 0
    bbd6:	09 f0       	breq	.+2      	; 0xbbda <f_getcwd+0xc6>
    bbd8:	c6 c0       	rjmp	.+396    	; 0xbd66 <f_getcwd+0x252>
    bbda:	c3 5d       	subi	r28, 0xD3	; 211
    bbdc:	de 4f       	sbci	r29, 0xFE	; 254
    bbde:	48 81       	ld	r20, Y
    bbe0:	59 81       	ldd	r21, Y+1	; 0x01
    bbe2:	6a 81       	ldd	r22, Y+2	; 0x02
    bbe4:	7b 81       	ldd	r23, Y+3	; 0x03
    bbe6:	cd 52       	subi	r28, 0x2D	; 45
    bbe8:	d1 40       	sbci	r29, 0x01	; 1
    bbea:	cb 5b       	subi	r28, 0xBB	; 187
    bbec:	de 4f       	sbci	r29, 0xFE	; 254
    bbee:	88 81       	ld	r24, Y
    bbf0:	99 81       	ldd	r25, Y+1	; 0x01
    bbf2:	c5 54       	subi	r28, 0x45	; 69
    bbf4:	d1 40       	sbci	r29, 0x01	; 1
    bbf6:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    bbfa:	00 97       	sbiw	r24, 0x00	; 0
    bbfc:	09 f0       	breq	.+2      	; 0xbc00 <f_getcwd+0xec>
    bbfe:	b3 c0       	rjmp	.+358    	; 0xbd66 <f_getcwd+0x252>
    bc00:	cf 5c       	subi	r28, 0xCF	; 207
    bc02:	de 4f       	sbci	r29, 0xFE	; 254
    bc04:	68 81       	ld	r22, Y
    bc06:	79 81       	ldd	r23, Y+1	; 0x01
    bc08:	c1 53       	subi	r28, 0x31	; 49
    bc0a:	d1 40       	sbci	r29, 0x01	; 1
    bc0c:	cb 5b       	subi	r28, 0xBB	; 187
    bc0e:	de 4f       	sbci	r29, 0xFE	; 254
    bc10:	e8 81       	ld	r30, Y
    bc12:	f9 81       	ldd	r31, Y+1	; 0x01
    bc14:	c5 54       	subi	r28, 0x45	; 69
    bc16:	d1 40       	sbci	r29, 0x01	; 1
    bc18:	80 81       	ld	r24, Z
    bc1a:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    bc1e:	c3 5e       	subi	r28, 0xE3	; 227
    bc20:	de 4f       	sbci	r29, 0xFE	; 254
    bc22:	68 83       	st	Y, r22
    bc24:	79 83       	std	Y+1, r23	; 0x01
    bc26:	8a 83       	std	Y+2, r24	; 0x02
    bc28:	9b 83       	std	Y+3, r25	; 0x03
    bc2a:	cd 51       	subi	r28, 0x1D	; 29
    bc2c:	d1 40       	sbci	r29, 0x01	; 1
    bc2e:	40 e0       	ldi	r20, 0x00	; 0
    bc30:	50 e0       	ldi	r21, 0x00	; 0
    bc32:	ba 01       	movw	r22, r20
    bc34:	ce 01       	movw	r24, r28
    bc36:	89 5e       	subi	r24, 0xE9	; 233
    bc38:	9e 4f       	sbci	r25, 0xFE	; 254
    bc3a:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <dir_sdi>
    bc3e:	00 97       	sbiw	r24, 0x00	; 0
    bc40:	09 f0       	breq	.+2      	; 0xbc44 <f_getcwd+0x130>
    bc42:	91 c0       	rjmp	.+290    	; 0xbd66 <f_getcwd+0x252>
    bc44:	60 e0       	ldi	r22, 0x00	; 0
    bc46:	70 e0       	ldi	r23, 0x00	; 0
    bc48:	ce 01       	movw	r24, r28
    bc4a:	89 5e       	subi	r24, 0xE9	; 233
    bc4c:	9e 4f       	sbci	r25, 0xFE	; 254
    bc4e:	0e 94 d7 51 	call	0xa3ae	; 0xa3ae <dir_read>
    bc52:	00 97       	sbiw	r24, 0x00	; 0
    bc54:	09 f0       	breq	.+2      	; 0xbc58 <f_getcwd+0x144>
    bc56:	89 c0       	rjmp	.+274    	; 0xbd6a <f_getcwd+0x256>
    bc58:	cf 5c       	subi	r28, 0xCF	; 207
    bc5a:	de 4f       	sbci	r29, 0xFE	; 254
    bc5c:	68 81       	ld	r22, Y
    bc5e:	79 81       	ldd	r23, Y+1	; 0x01
    bc60:	c1 53       	subi	r28, 0x31	; 49
    bc62:	d1 40       	sbci	r29, 0x01	; 1
    bc64:	cb 5b       	subi	r28, 0xBB	; 187
    bc66:	de 4f       	sbci	r29, 0xFE	; 254
    bc68:	e8 81       	ld	r30, Y
    bc6a:	f9 81       	ldd	r31, Y+1	; 0x01
    bc6c:	c5 54       	subi	r28, 0x45	; 69
    bc6e:	d1 40       	sbci	r29, 0x01	; 1
    bc70:	80 81       	ld	r24, Z
    bc72:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    bc76:	46 16       	cp	r4, r22
    bc78:	57 06       	cpc	r5, r23
    bc7a:	68 06       	cpc	r6, r24
    bc7c:	79 06       	cpc	r7, r25
    bc7e:	41 f4       	brne	.+16     	; 0xbc90 <f_getcwd+0x17c>
    bc80:	b6 01       	movw	r22, r12
    bc82:	ce 01       	movw	r24, r28
    bc84:	89 5e       	subi	r24, 0xE9	; 233
    bc86:	9e 4f       	sbci	r25, 0xFE	; 254
    bc88:	0e 94 f8 46 	call	0x8df0	; 0x8df0 <get_fileinfo>
    bc8c:	f6 01       	movw	r30, r12
    bc8e:	0a c0       	rjmp	.+20     	; 0xbca4 <f_getcwd+0x190>
    bc90:	60 e0       	ldi	r22, 0x00	; 0
    bc92:	70 e0       	ldi	r23, 0x00	; 0
    bc94:	ce 01       	movw	r24, r28
    bc96:	89 5e       	subi	r24, 0xE9	; 233
    bc98:	9e 4f       	sbci	r25, 0xFE	; 254
    bc9a:	0e 94 b6 50 	call	0xa16c	; 0xa16c <dir_next>
    bc9e:	00 97       	sbiw	r24, 0x00	; 0
    bca0:	89 f2       	breq	.-94     	; 0xbc44 <f_getcwd+0x130>
    bca2:	63 c0       	rjmp	.+198    	; 0xbd6a <f_getcwd+0x256>
    bca4:	cf 01       	movw	r24, r30
    bca6:	8c 19       	sub	r24, r12
    bca8:	9d 09       	sbc	r25, r13
    bcaa:	31 96       	adiw	r30, 0x01	; 1
    bcac:	25 89       	ldd	r18, Z+21	; 0x15
    bcae:	21 11       	cpse	r18, r1
    bcb0:	f9 cf       	rjmp	.-14     	; 0xbca4 <f_getcwd+0x190>
    bcb2:	9c 01       	movw	r18, r24
    bcb4:	2f 5f       	subi	r18, 0xFF	; 255
    bcb6:	3f 4f       	sbci	r19, 0xFF	; 255
    bcb8:	02 17       	cp	r16, r18
    bcba:	13 07       	cpc	r17, r19
    bcbc:	08 f4       	brcc	.+2      	; 0xbcc0 <f_getcwd+0x1ac>
    bcbe:	51 c0       	rjmp	.+162    	; 0xbd62 <f_getcwd+0x24e>
    bcc0:	f6 01       	movw	r30, r12
    bcc2:	e8 0f       	add	r30, r24
    bcc4:	f9 1f       	adc	r31, r25
    bcc6:	98 01       	movw	r18, r16
    bcc8:	ce 16       	cp	r12, r30
    bcca:	df 06       	cpc	r13, r31
    bccc:	71 f0       	breq	.+28     	; 0xbcea <f_getcwd+0x1d6>
    bcce:	21 50       	subi	r18, 0x01	; 1
    bcd0:	31 09       	sbc	r19, r1
    bcd2:	45 89       	ldd	r20, Z+21	; 0x15
    bcd4:	c9 5b       	subi	r28, 0xB9	; 185
    bcd6:	de 4f       	sbci	r29, 0xFE	; 254
    bcd8:	a8 81       	ld	r26, Y
    bcda:	b9 81       	ldd	r27, Y+1	; 0x01
    bcdc:	c7 54       	subi	r28, 0x47	; 71
    bcde:	d1 40       	sbci	r29, 0x01	; 1
    bce0:	a2 0f       	add	r26, r18
    bce2:	b3 1f       	adc	r27, r19
    bce4:	4c 93       	st	X, r20
    bce6:	31 97       	sbiw	r30, 0x01	; 1
    bce8:	ef cf       	rjmp	.-34     	; 0xbcc8 <f_getcwd+0x1b4>
    bcea:	80 95       	com	r24
    bcec:	90 95       	com	r25
    bcee:	08 0f       	add	r16, r24
    bcf0:	19 1f       	adc	r17, r25
    bcf2:	c9 5b       	subi	r28, 0xB9	; 185
    bcf4:	de 4f       	sbci	r29, 0xFE	; 254
    bcf6:	e8 81       	ld	r30, Y
    bcf8:	f9 81       	ldd	r31, Y+1	; 0x01
    bcfa:	c7 54       	subi	r28, 0x47	; 71
    bcfc:	d1 40       	sbci	r29, 0x01	; 1
    bcfe:	e0 0f       	add	r30, r16
    bd00:	f1 1f       	adc	r31, r17
    bd02:	9f e2       	ldi	r25, 0x2F	; 47
    bd04:	90 83       	st	Z, r25
    bd06:	4f cf       	rjmp	.-354    	; 0xbba6 <f_getcwd+0x92>
    bd08:	08 15       	cp	r16, r8
    bd0a:	19 05       	cpc	r17, r9
    bd0c:	61 f4       	brne	.+24     	; 0xbd26 <f_getcwd+0x212>
    bd0e:	01 50       	subi	r16, 0x01	; 1
    bd10:	11 09       	sbc	r17, r1
    bd12:	c9 5b       	subi	r28, 0xB9	; 185
    bd14:	de 4f       	sbci	r29, 0xFE	; 254
    bd16:	e8 81       	ld	r30, Y
    bd18:	f9 81       	ldd	r31, Y+1	; 0x01
    bd1a:	c7 54       	subi	r28, 0x47	; 71
    bd1c:	d1 40       	sbci	r29, 0x01	; 1
    bd1e:	e0 0f       	add	r30, r16
    bd20:	f1 1f       	adc	r31, r17
    bd22:	8f e2       	ldi	r24, 0x2F	; 47
    bd24:	80 83       	st	Z, r24
    bd26:	ef ef       	ldi	r30, 0xFF	; 255
    bd28:	ee 1a       	sub	r14, r30
    bd2a:	fe 0a       	sbc	r15, r30
    bd2c:	c9 5b       	subi	r28, 0xB9	; 185
    bd2e:	de 4f       	sbci	r29, 0xFE	; 254
    bd30:	e8 81       	ld	r30, Y
    bd32:	f9 81       	ldd	r31, Y+1	; 0x01
    bd34:	c7 54       	subi	r28, 0x47	; 71
    bd36:	d1 40       	sbci	r29, 0x01	; 1
    bd38:	e0 0f       	add	r30, r16
    bd3a:	f1 1f       	adc	r31, r17
    bd3c:	80 81       	ld	r24, Z
    bd3e:	f7 01       	movw	r30, r14
    bd40:	31 97       	sbiw	r30, 0x01	; 1
    bd42:	80 83       	st	Z, r24
    bd44:	0f 5f       	subi	r16, 0xFF	; 255
    bd46:	1f 4f       	sbci	r17, 0xFF	; 255
    bd48:	08 15       	cp	r16, r8
    bd4a:	19 05       	cpc	r17, r9
    bd4c:	60 f3       	brcs	.-40     	; 0xbd26 <f_getcwd+0x212>
    bd4e:	c5 01       	movw	r24, r10
    bd50:	0e 94 35 67 	call	0xce6a	; 0xce6a <ff_memfree>
    bd54:	f7 01       	movw	r30, r14
    bd56:	10 82       	st	Z, r1
    bd58:	c1 01       	movw	r24, r2
    bd5a:	0d c0       	rjmp	.+26     	; 0xbd76 <f_getcwd+0x262>
    bd5c:	81 e1       	ldi	r24, 0x11	; 17
    bd5e:	90 e0       	ldi	r25, 0x00	; 0
    bd60:	0a c0       	rjmp	.+20     	; 0xbd76 <f_getcwd+0x262>
    bd62:	81 e1       	ldi	r24, 0x11	; 17
    bd64:	90 e0       	ldi	r25, 0x00	; 0
    bd66:	1c 01       	movw	r2, r24
    bd68:	f2 cf       	rjmp	.-28     	; 0xbd4e <f_getcwd+0x23a>
    bd6a:	84 30       	cpi	r24, 0x04	; 4
    bd6c:	91 05       	cpc	r25, r1
    bd6e:	d9 f7       	brne	.-10     	; 0xbd66 <f_getcwd+0x252>
    bd70:	82 e0       	ldi	r24, 0x02	; 2
    bd72:	90 e0       	ldi	r25, 0x00	; 0
    bd74:	f8 cf       	rjmp	.-16     	; 0xbd66 <f_getcwd+0x252>
    bd76:	c8 5b       	subi	r28, 0xB8	; 184
    bd78:	de 4f       	sbci	r29, 0xFE	; 254
    bd7a:	e2 e1       	ldi	r30, 0x12	; 18
    bd7c:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000bd80 <f_lseek>:
    bd80:	aa e0       	ldi	r26, 0x0A	; 10
    bd82:	b0 e0       	ldi	r27, 0x00	; 0
    bd84:	e6 ec       	ldi	r30, 0xC6	; 198
    bd86:	fe e5       	ldi	r31, 0x5E	; 94
    bd88:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    bd8c:	1c 01       	movw	r2, r24
    bd8e:	6a 01       	movw	r12, r20
    bd90:	7b 01       	movw	r14, r22
    bd92:	be 01       	movw	r22, r28
    bd94:	6f 5f       	subi	r22, 0xFF	; 255
    bd96:	7f 4f       	sbci	r23, 0xFF	; 255
    bd98:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <validate>
    bd9c:	00 97       	sbiw	r24, 0x00	; 0
    bd9e:	09 f0       	breq	.+2      	; 0xbda2 <f_lseek+0x22>
    bda0:	a6 c2       	rjmp	.+1356   	; 0xc2ee <f_lseek+0x56e>
    bda2:	f1 01       	movw	r30, r2
    bda4:	87 85       	ldd	r24, Z+15	; 0x0f
    bda6:	90 e0       	ldi	r25, 0x00	; 0
    bda8:	00 97       	sbiw	r24, 0x00	; 0
    bdaa:	09 f0       	breq	.+2      	; 0xbdae <f_lseek+0x2e>
    bdac:	a0 c2       	rjmp	.+1344   	; 0xc2ee <f_lseek+0x56e>
    bdae:	22 a1       	ldd	r18, Z+34	; 0x22
    bdb0:	33 a1       	ldd	r19, Z+35	; 0x23
    bdb2:	21 15       	cp	r18, r1
    bdb4:	31 05       	cpc	r19, r1
    bdb6:	09 f4       	brne	.+2      	; 0xbdba <f_lseek+0x3a>
    bdb8:	2d c1       	rjmp	.+602    	; 0xc014 <f_lseek+0x294>
    bdba:	ff ef       	ldi	r31, 0xFF	; 255
    bdbc:	cf 16       	cp	r12, r31
    bdbe:	df 06       	cpc	r13, r31
    bdc0:	ef 06       	cpc	r14, r31
    bdc2:	ff 06       	cpc	r15, r31
    bdc4:	09 f0       	breq	.+2      	; 0xbdc8 <f_lseek+0x48>
    bdc6:	9a c0       	rjmp	.+308    	; 0xbefc <f_lseek+0x17c>
    bdc8:	89 01       	movw	r16, r18
    bdca:	0c 5f       	subi	r16, 0xFC	; 252
    bdcc:	1f 4f       	sbci	r17, 0xFF	; 255
    bdce:	d9 01       	movw	r26, r18
    bdd0:	4d 91       	ld	r20, X+
    bdd2:	5d 91       	ld	r21, X+
    bdd4:	6d 91       	ld	r22, X+
    bdd6:	7c 91       	ld	r23, X
    bdd8:	4f 83       	std	Y+7, r20	; 0x07
    bdda:	58 87       	std	Y+8, r21	; 0x08
    bddc:	69 87       	std	Y+9, r22	; 0x09
    bdde:	7a 87       	std	Y+10, r23	; 0x0a
    bde0:	f1 01       	movw	r30, r2
    bde2:	86 80       	ldd	r8, Z+6	; 0x06
    bde4:	97 80       	ldd	r9, Z+7	; 0x07
    bde6:	a0 84       	ldd	r10, Z+8	; 0x08
    bde8:	b1 84       	ldd	r11, Z+9	; 0x09
    bdea:	52 e0       	ldi	r21, 0x02	; 2
    bdec:	c5 2e       	mov	r12, r21
    bdee:	d1 2c       	mov	r13, r1
    bdf0:	e1 2c       	mov	r14, r1
    bdf2:	f1 2c       	mov	r15, r1
    bdf4:	81 14       	cp	r8, r1
    bdf6:	91 04       	cpc	r9, r1
    bdf8:	a1 04       	cpc	r10, r1
    bdfa:	b1 04       	cpc	r11, r1
    bdfc:	09 f4       	brne	.+2      	; 0xbe00 <f_lseek+0x80>
    bdfe:	65 c0       	rjmp	.+202    	; 0xbeca <f_lseek+0x14a>
    be00:	24 01       	movw	r4, r8
    be02:	35 01       	movw	r6, r10
    be04:	1b 82       	std	Y+3, r1	; 0x03
    be06:	1c 82       	std	Y+4, r1	; 0x04
    be08:	1d 82       	std	Y+5, r1	; 0x05
    be0a:	1e 82       	std	Y+6, r1	; 0x06
    be0c:	2b 81       	ldd	r18, Y+3	; 0x03
    be0e:	3c 81       	ldd	r19, Y+4	; 0x04
    be10:	4d 81       	ldd	r20, Y+5	; 0x05
    be12:	5e 81       	ldd	r21, Y+6	; 0x06
    be14:	2f 5f       	subi	r18, 0xFF	; 255
    be16:	3f 4f       	sbci	r19, 0xFF	; 255
    be18:	4f 4f       	sbci	r20, 0xFF	; 255
    be1a:	5f 4f       	sbci	r21, 0xFF	; 255
    be1c:	2b 83       	std	Y+3, r18	; 0x03
    be1e:	3c 83       	std	Y+4, r19	; 0x04
    be20:	4d 83       	std	Y+5, r20	; 0x05
    be22:	5e 83       	std	Y+6, r21	; 0x06
    be24:	b3 01       	movw	r22, r6
    be26:	a2 01       	movw	r20, r4
    be28:	d1 01       	movw	r26, r2
    be2a:	8d 91       	ld	r24, X+
    be2c:	9c 91       	ld	r25, X
    be2e:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <get_fat.isra.9>
    be32:	62 30       	cpi	r22, 0x02	; 2
    be34:	71 05       	cpc	r23, r1
    be36:	81 05       	cpc	r24, r1
    be38:	91 05       	cpc	r25, r1
    be3a:	10 f4       	brcc	.+4      	; 0xbe40 <f_lseek+0xc0>
    be3c:	82 e0       	ldi	r24, 0x02	; 2
    be3e:	07 c0       	rjmp	.+14     	; 0xbe4e <f_lseek+0xce>
    be40:	6f 3f       	cpi	r22, 0xFF	; 255
    be42:	ff ef       	ldi	r31, 0xFF	; 255
    be44:	7f 07       	cpc	r23, r31
    be46:	8f 07       	cpc	r24, r31
    be48:	9f 07       	cpc	r25, r31
    be4a:	29 f4       	brne	.+10     	; 0xbe56 <f_lseek+0xd6>
    be4c:	81 e0       	ldi	r24, 0x01	; 1
    be4e:	f1 01       	movw	r30, r2
    be50:	87 87       	std	Z+15, r24	; 0x0f
    be52:	90 e0       	ldi	r25, 0x00	; 0
    be54:	4c c2       	rjmp	.+1176   	; 0xc2ee <f_lseek+0x56e>
    be56:	a3 01       	movw	r20, r6
    be58:	92 01       	movw	r18, r4
    be5a:	2f 5f       	subi	r18, 0xFF	; 255
    be5c:	3f 4f       	sbci	r19, 0xFF	; 255
    be5e:	4f 4f       	sbci	r20, 0xFF	; 255
    be60:	5f 4f       	sbci	r21, 0xFF	; 255
    be62:	2b 01       	movw	r4, r22
    be64:	3c 01       	movw	r6, r24
    be66:	62 17       	cp	r22, r18
    be68:	73 07       	cpc	r23, r19
    be6a:	84 07       	cpc	r24, r20
    be6c:	95 07       	cpc	r25, r21
    be6e:	71 f2       	breq	.-100    	; 0xbe0c <f_lseek+0x8c>
    be70:	f2 e0       	ldi	r31, 0x02	; 2
    be72:	cf 0e       	add	r12, r31
    be74:	d1 1c       	adc	r13, r1
    be76:	e1 1c       	adc	r14, r1
    be78:	f1 1c       	adc	r15, r1
    be7a:	2f 81       	ldd	r18, Y+7	; 0x07
    be7c:	38 85       	ldd	r19, Y+8	; 0x08
    be7e:	49 85       	ldd	r20, Y+9	; 0x09
    be80:	5a 85       	ldd	r21, Y+10	; 0x0a
    be82:	2c 15       	cp	r18, r12
    be84:	3d 05       	cpc	r19, r13
    be86:	4e 05       	cpc	r20, r14
    be88:	5f 05       	cpc	r21, r15
    be8a:	88 f0       	brcs	.+34     	; 0xbeae <f_lseek+0x12e>
    be8c:	2b 81       	ldd	r18, Y+3	; 0x03
    be8e:	3c 81       	ldd	r19, Y+4	; 0x04
    be90:	4d 81       	ldd	r20, Y+5	; 0x05
    be92:	5e 81       	ldd	r21, Y+6	; 0x06
    be94:	d8 01       	movw	r26, r16
    be96:	2d 93       	st	X+, r18
    be98:	3d 93       	st	X+, r19
    be9a:	4d 93       	st	X+, r20
    be9c:	5c 93       	st	X, r21
    be9e:	13 97       	sbiw	r26, 0x03	; 3
    bea0:	f8 01       	movw	r30, r16
    bea2:	84 82       	std	Z+4, r8	; 0x04
    bea4:	95 82       	std	Z+5, r9	; 0x05
    bea6:	a6 82       	std	Z+6, r10	; 0x06
    bea8:	b7 82       	std	Z+7, r11	; 0x07
    beaa:	08 5f       	subi	r16, 0xF8	; 248
    beac:	1f 4f       	sbci	r17, 0xFF	; 255
    beae:	e9 81       	ldd	r30, Y+1	; 0x01
    beb0:	fa 81       	ldd	r31, Y+2	; 0x02
    beb2:	81 8c       	ldd	r8, Z+25	; 0x19
    beb4:	92 8c       	ldd	r9, Z+26	; 0x1a
    beb6:	a3 8c       	ldd	r10, Z+27	; 0x1b
    beb8:	b4 8c       	ldd	r11, Z+28	; 0x1c
    beba:	68 15       	cp	r22, r8
    bebc:	79 05       	cpc	r23, r9
    bebe:	8a 05       	cpc	r24, r10
    bec0:	9b 05       	cpc	r25, r11
    bec2:	18 f4       	brcc	.+6      	; 0xbeca <f_lseek+0x14a>
    bec4:	4b 01       	movw	r8, r22
    bec6:	5c 01       	movw	r10, r24
    bec8:	9b cf       	rjmp	.-202    	; 0xbe00 <f_lseek+0x80>
    beca:	f1 01       	movw	r30, r2
    becc:	a2 a1       	ldd	r26, Z+34	; 0x22
    bece:	b3 a1       	ldd	r27, Z+35	; 0x23
    bed0:	cd 92       	st	X+, r12
    bed2:	dd 92       	st	X+, r13
    bed4:	ed 92       	st	X+, r14
    bed6:	fc 92       	st	X, r15
    bed8:	13 97       	sbiw	r26, 0x03	; 3
    beda:	2f 81       	ldd	r18, Y+7	; 0x07
    bedc:	38 85       	ldd	r19, Y+8	; 0x08
    bede:	49 85       	ldd	r20, Y+9	; 0x09
    bee0:	5a 85       	ldd	r21, Y+10	; 0x0a
    bee2:	2c 15       	cp	r18, r12
    bee4:	3d 05       	cpc	r19, r13
    bee6:	4e 05       	cpc	r20, r14
    bee8:	5f 05       	cpc	r21, r15
    beea:	08 f4       	brcc	.+2      	; 0xbeee <f_lseek+0x16e>
    beec:	f7 c1       	rjmp	.+1006   	; 0xc2dc <f_lseek+0x55c>
    beee:	d8 01       	movw	r26, r16
    bef0:	1d 92       	st	X+, r1
    bef2:	1d 92       	st	X+, r1
    bef4:	1d 92       	st	X+, r1
    bef6:	1c 92       	st	X, r1
    bef8:	13 97       	sbiw	r26, 0x03	; 3
    befa:	ee c1       	rjmp	.+988    	; 0xc2d8 <f_lseek+0x558>
    befc:	f1 01       	movw	r30, r2
    befe:	82 85       	ldd	r24, Z+10	; 0x0a
    bf00:	93 85       	ldd	r25, Z+11	; 0x0b
    bf02:	a4 85       	ldd	r26, Z+12	; 0x0c
    bf04:	b5 85       	ldd	r27, Z+13	; 0x0d
    bf06:	46 01       	movw	r8, r12
    bf08:	57 01       	movw	r10, r14
    bf0a:	8c 15       	cp	r24, r12
    bf0c:	9d 05       	cpc	r25, r13
    bf0e:	ae 05       	cpc	r26, r14
    bf10:	bf 05       	cpc	r27, r15
    bf12:	10 f4       	brcc	.+4      	; 0xbf18 <f_lseek+0x198>
    bf14:	4c 01       	movw	r8, r24
    bf16:	5d 01       	movw	r10, r26
    bf18:	f1 01       	movw	r30, r2
    bf1a:	80 8a       	std	Z+16, r8	; 0x10
    bf1c:	91 8a       	std	Z+17, r9	; 0x11
    bf1e:	a2 8a       	std	Z+18, r10	; 0x12
    bf20:	b3 8a       	std	Z+19, r11	; 0x13
    bf22:	81 14       	cp	r8, r1
    bf24:	91 04       	cpc	r9, r1
    bf26:	a1 04       	cpc	r10, r1
    bf28:	b1 04       	cpc	r11, r1
    bf2a:	09 f4       	brne	.+2      	; 0xbf2e <f_lseek+0x1ae>
    bf2c:	d5 c1       	rjmp	.+938    	; 0xc2d8 <f_lseek+0x558>
    bf2e:	24 01       	movw	r4, r8
    bf30:	35 01       	movw	r6, r10
    bf32:	f1 e0       	ldi	r31, 0x01	; 1
    bf34:	4f 1a       	sub	r4, r31
    bf36:	51 08       	sbc	r5, r1
    bf38:	61 08       	sbc	r6, r1
    bf3a:	71 08       	sbc	r7, r1
    bf3c:	b3 01       	movw	r22, r6
    bf3e:	a2 01       	movw	r20, r4
    bf40:	c1 01       	movw	r24, r2
    bf42:	0e 94 55 46 	call	0x8caa	; 0x8caa <clmt_clust>
    bf46:	ab 01       	movw	r20, r22
    bf48:	bc 01       	movw	r22, r24
    bf4a:	f1 01       	movw	r30, r2
    bf4c:	44 8b       	std	Z+20, r20	; 0x14
    bf4e:	55 8b       	std	Z+21, r21	; 0x15
    bf50:	66 8b       	std	Z+22, r22	; 0x16
    bf52:	77 8b       	std	Z+23, r23	; 0x17
    bf54:	e9 80       	ldd	r14, Y+1	; 0x01
    bf56:	fa 80       	ldd	r15, Y+2	; 0x02
    bf58:	c7 01       	movw	r24, r14
    bf5a:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    bf5e:	61 15       	cp	r22, r1
    bf60:	71 05       	cpc	r23, r1
    bf62:	81 05       	cpc	r24, r1
    bf64:	91 05       	cpc	r25, r1
    bf66:	09 f4       	brne	.+2      	; 0xbf6a <f_lseek+0x1ea>
    bf68:	69 cf       	rjmp	.-302    	; 0xbe3c <f_lseek+0xbc>
    bf6a:	95 01       	movw	r18, r10
    bf6c:	84 01       	movw	r16, r8
    bf6e:	11 70       	andi	r17, 0x01	; 1
    bf70:	22 27       	eor	r18, r18
    bf72:	33 27       	eor	r19, r19
    bf74:	01 15       	cp	r16, r1
    bf76:	11 05       	cpc	r17, r1
    bf78:	21 05       	cpc	r18, r1
    bf7a:	31 05       	cpc	r19, r1
    bf7c:	09 f4       	brne	.+2      	; 0xbf80 <f_lseek+0x200>
    bf7e:	ac c1       	rjmp	.+856    	; 0xc2d8 <f_lseek+0x558>
    bf80:	f7 01       	movw	r30, r14
    bf82:	81 84       	ldd	r8, Z+9	; 0x09
    bf84:	92 84       	ldd	r9, Z+10	; 0x0a
    bf86:	f1 e0       	ldi	r31, 0x01	; 1
    bf88:	8f 1a       	sub	r8, r31
    bf8a:	91 08       	sbc	r9, r1
    bf8c:	a1 2c       	mov	r10, r1
    bf8e:	b1 2c       	mov	r11, r1
    bf90:	49 e0       	ldi	r20, 0x09	; 9
    bf92:	76 94       	lsr	r7
    bf94:	67 94       	ror	r6
    bf96:	57 94       	ror	r5
    bf98:	47 94       	ror	r4
    bf9a:	4a 95       	dec	r20
    bf9c:	d1 f7       	brne	.-12     	; 0xbf92 <f_lseek+0x212>
    bf9e:	48 20       	and	r4, r8
    bfa0:	59 20       	and	r5, r9
    bfa2:	6a 20       	and	r6, r10
    bfa4:	7b 20       	and	r7, r11
    bfa6:	53 01       	movw	r10, r6
    bfa8:	42 01       	movw	r8, r4
    bfaa:	86 0e       	add	r8, r22
    bfac:	97 1e       	adc	r9, r23
    bfae:	a8 1e       	adc	r10, r24
    bfb0:	b9 1e       	adc	r11, r25
    bfb2:	f1 01       	movw	r30, r2
    bfb4:	20 8d       	ldd	r18, Z+24	; 0x18
    bfb6:	31 8d       	ldd	r19, Z+25	; 0x19
    bfb8:	42 8d       	ldd	r20, Z+26	; 0x1a
    bfba:	53 8d       	ldd	r21, Z+27	; 0x1b
    bfbc:	82 16       	cp	r8, r18
    bfbe:	93 06       	cpc	r9, r19
    bfc0:	a4 06       	cpc	r10, r20
    bfc2:	b5 06       	cpc	r11, r21
    bfc4:	09 f4       	brne	.+2      	; 0xbfc8 <f_lseek+0x248>
    bfc6:	88 c1       	rjmp	.+784    	; 0xc2d8 <f_lseek+0x558>
    bfc8:	86 85       	ldd	r24, Z+14	; 0x0e
    bfca:	b1 01       	movw	r22, r2
    bfcc:	6c 5d       	subi	r22, 0xDC	; 220
    bfce:	7f 4f       	sbci	r23, 0xFF	; 255
    bfd0:	6b 01       	movw	r12, r22
    bfd2:	87 ff       	sbrs	r24, 7
    bfd4:	0d c0       	rjmp	.+26     	; 0xbff0 <f_lseek+0x270>
    bfd6:	01 e0       	ldi	r16, 0x01	; 1
    bfd8:	10 e0       	ldi	r17, 0x00	; 0
    bfda:	f7 01       	movw	r30, r14
    bfdc:	81 81       	ldd	r24, Z+1	; 0x01
    bfde:	0e 94 fe 67 	call	0xcffc	; 0xcffc <disk_write>
    bfe2:	89 2b       	or	r24, r25
    bfe4:	09 f0       	breq	.+2      	; 0xbfe8 <f_lseek+0x268>
    bfe6:	32 cf       	rjmp	.-412    	; 0xbe4c <f_lseek+0xcc>
    bfe8:	f1 01       	movw	r30, r2
    bfea:	86 85       	ldd	r24, Z+14	; 0x0e
    bfec:	8f 77       	andi	r24, 0x7F	; 127
    bfee:	86 87       	std	Z+14, r24	; 0x0e
    bff0:	e9 81       	ldd	r30, Y+1	; 0x01
    bff2:	fa 81       	ldd	r31, Y+2	; 0x02
    bff4:	01 e0       	ldi	r16, 0x01	; 1
    bff6:	10 e0       	ldi	r17, 0x00	; 0
    bff8:	a5 01       	movw	r20, r10
    bffa:	94 01       	movw	r18, r8
    bffc:	b6 01       	movw	r22, r12
    bffe:	81 81       	ldd	r24, Z+1	; 0x01
    c000:	ed d7       	rcall	.+4058   	; 0xcfdc <disk_read>
    c002:	89 2b       	or	r24, r25
    c004:	09 f0       	breq	.+2      	; 0xc008 <f_lseek+0x288>
    c006:	22 cf       	rjmp	.-444    	; 0xbe4c <f_lseek+0xcc>
    c008:	f1 01       	movw	r30, r2
    c00a:	80 8e       	std	Z+24, r8	; 0x18
    c00c:	91 8e       	std	Z+25, r9	; 0x19
    c00e:	a2 8e       	std	Z+26, r10	; 0x1a
    c010:	b3 8e       	std	Z+27, r11	; 0x1b
    c012:	62 c1       	rjmp	.+708    	; 0xc2d8 <f_lseek+0x558>
    c014:	f1 01       	movw	r30, r2
    c016:	82 85       	ldd	r24, Z+10	; 0x0a
    c018:	93 85       	ldd	r25, Z+11	; 0x0b
    c01a:	a4 85       	ldd	r26, Z+12	; 0x0c
    c01c:	b5 85       	ldd	r27, Z+13	; 0x0d
    c01e:	8c 15       	cp	r24, r12
    c020:	9d 05       	cpc	r25, r13
    c022:	ae 05       	cpc	r26, r14
    c024:	bf 05       	cpc	r27, r15
    c026:	28 f4       	brcc	.+10     	; 0xc032 <f_lseek+0x2b2>
    c028:	26 85       	ldd	r18, Z+14	; 0x0e
    c02a:	21 fd       	sbrc	r18, 1
    c02c:	02 c0       	rjmp	.+4      	; 0xc032 <f_lseek+0x2b2>
    c02e:	6c 01       	movw	r12, r24
    c030:	7d 01       	movw	r14, r26
    c032:	f1 01       	movw	r30, r2
    c034:	40 88       	ldd	r4, Z+16	; 0x10
    c036:	51 88       	ldd	r5, Z+17	; 0x11
    c038:	62 88       	ldd	r6, Z+18	; 0x12
    c03a:	73 88       	ldd	r7, Z+19	; 0x13
    c03c:	10 8a       	std	Z+16, r1	; 0x10
    c03e:	11 8a       	std	Z+17, r1	; 0x11
    c040:	12 8a       	std	Z+18, r1	; 0x12
    c042:	13 8a       	std	Z+19, r1	; 0x13
    c044:	c1 14       	cp	r12, r1
    c046:	d1 04       	cpc	r13, r1
    c048:	e1 04       	cpc	r14, r1
    c04a:	f1 04       	cpc	r15, r1
    c04c:	09 f4       	brne	.+2      	; 0xc050 <f_lseek+0x2d0>
    c04e:	48 c1       	rjmp	.+656    	; 0xc2e0 <f_lseek+0x560>
    c050:	e9 81       	ldd	r30, Y+1	; 0x01
    c052:	fa 81       	ldd	r31, Y+2	; 0x02
    c054:	81 84       	ldd	r8, Z+9	; 0x09
    c056:	92 84       	ldd	r9, Z+10	; 0x0a
    c058:	a1 2c       	mov	r10, r1
    c05a:	b1 2c       	mov	r11, r1
    c05c:	39 e0       	ldi	r19, 0x09	; 9
    c05e:	88 0c       	add	r8, r8
    c060:	99 1c       	adc	r9, r9
    c062:	aa 1c       	adc	r10, r10
    c064:	bb 1c       	adc	r11, r11
    c066:	3a 95       	dec	r19
    c068:	d1 f7       	brne	.-12     	; 0xc05e <f_lseek+0x2de>
    c06a:	41 14       	cp	r4, r1
    c06c:	51 04       	cpc	r5, r1
    c06e:	61 04       	cpc	r6, r1
    c070:	71 04       	cpc	r7, r1
    c072:	d9 f1       	breq	.+118    	; 0xc0ea <f_lseek+0x36a>
    c074:	f1 e0       	ldi	r31, 0x01	; 1
    c076:	4f 1a       	sub	r4, r31
    c078:	51 08       	sbc	r5, r1
    c07a:	61 08       	sbc	r6, r1
    c07c:	71 08       	sbc	r7, r1
    c07e:	c7 01       	movw	r24, r14
    c080:	b6 01       	movw	r22, r12
    c082:	61 50       	subi	r22, 0x01	; 1
    c084:	71 09       	sbc	r23, r1
    c086:	81 09       	sbc	r24, r1
    c088:	91 09       	sbc	r25, r1
    c08a:	a5 01       	movw	r20, r10
    c08c:	94 01       	movw	r18, r8
    c08e:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    c092:	2b 83       	std	Y+3, r18	; 0x03
    c094:	3c 83       	std	Y+4, r19	; 0x04
    c096:	4d 83       	std	Y+5, r20	; 0x05
    c098:	5e 83       	std	Y+6, r21	; 0x06
    c09a:	c3 01       	movw	r24, r6
    c09c:	b2 01       	movw	r22, r4
    c09e:	a5 01       	movw	r20, r10
    c0a0:	94 01       	movw	r18, r8
    c0a2:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
    c0a6:	6b 81       	ldd	r22, Y+3	; 0x03
    c0a8:	7c 81       	ldd	r23, Y+4	; 0x04
    c0aa:	8d 81       	ldd	r24, Y+5	; 0x05
    c0ac:	9e 81       	ldd	r25, Y+6	; 0x06
    c0ae:	62 17       	cp	r22, r18
    c0b0:	73 07       	cpc	r23, r19
    c0b2:	84 07       	cpc	r24, r20
    c0b4:	95 07       	cpc	r25, r21
    c0b6:	c8 f0       	brcs	.+50     	; 0xc0ea <f_lseek+0x36a>
    c0b8:	88 27       	eor	r24, r24
    c0ba:	99 27       	eor	r25, r25
    c0bc:	dc 01       	movw	r26, r24
    c0be:	88 19       	sub	r24, r8
    c0c0:	99 09       	sbc	r25, r9
    c0c2:	aa 09       	sbc	r26, r10
    c0c4:	bb 09       	sbc	r27, r11
    c0c6:	48 22       	and	r4, r24
    c0c8:	59 22       	and	r5, r25
    c0ca:	6a 22       	and	r6, r26
    c0cc:	7b 22       	and	r7, r27
    c0ce:	f1 01       	movw	r30, r2
    c0d0:	40 8a       	std	Z+16, r4	; 0x10
    c0d2:	51 8a       	std	Z+17, r5	; 0x11
    c0d4:	62 8a       	std	Z+18, r6	; 0x12
    c0d6:	73 8a       	std	Z+19, r7	; 0x13
    c0d8:	c4 18       	sub	r12, r4
    c0da:	d5 08       	sbc	r13, r5
    c0dc:	e6 08       	sbc	r14, r6
    c0de:	f7 08       	sbc	r15, r7
    c0e0:	44 89       	ldd	r20, Z+20	; 0x14
    c0e2:	55 89       	ldd	r21, Z+21	; 0x15
    c0e4:	66 89       	ldd	r22, Z+22	; 0x16
    c0e6:	77 89       	ldd	r23, Z+23	; 0x17
    c0e8:	29 c0       	rjmp	.+82     	; 0xc13c <f_lseek+0x3bc>
    c0ea:	f1 01       	movw	r30, r2
    c0ec:	46 81       	ldd	r20, Z+6	; 0x06
    c0ee:	57 81       	ldd	r21, Z+7	; 0x07
    c0f0:	60 85       	ldd	r22, Z+8	; 0x08
    c0f2:	71 85       	ldd	r23, Z+9	; 0x09
    c0f4:	41 15       	cp	r20, r1
    c0f6:	51 05       	cpc	r21, r1
    c0f8:	61 05       	cpc	r22, r1
    c0fa:	71 05       	cpc	r23, r1
    c0fc:	d1 f4       	brne	.+52     	; 0xc132 <f_lseek+0x3b2>
    c0fe:	40 e0       	ldi	r20, 0x00	; 0
    c100:	50 e0       	ldi	r21, 0x00	; 0
    c102:	ba 01       	movw	r22, r20
    c104:	c1 01       	movw	r24, r2
    c106:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <create_chain>
    c10a:	ab 01       	movw	r20, r22
    c10c:	bc 01       	movw	r22, r24
    c10e:	41 30       	cpi	r20, 0x01	; 1
    c110:	51 05       	cpc	r21, r1
    c112:	61 05       	cpc	r22, r1
    c114:	71 05       	cpc	r23, r1
    c116:	09 f4       	brne	.+2      	; 0xc11a <f_lseek+0x39a>
    c118:	91 ce       	rjmp	.-734    	; 0xbe3c <f_lseek+0xbc>
    c11a:	4f 3f       	cpi	r20, 0xFF	; 255
    c11c:	ff ef       	ldi	r31, 0xFF	; 255
    c11e:	5f 07       	cpc	r21, r31
    c120:	6f 07       	cpc	r22, r31
    c122:	7f 07       	cpc	r23, r31
    c124:	09 f4       	brne	.+2      	; 0xc128 <f_lseek+0x3a8>
    c126:	92 ce       	rjmp	.-732    	; 0xbe4c <f_lseek+0xcc>
    c128:	f1 01       	movw	r30, r2
    c12a:	46 83       	std	Z+6, r20	; 0x06
    c12c:	57 83       	std	Z+7, r21	; 0x07
    c12e:	60 87       	std	Z+8, r22	; 0x08
    c130:	71 87       	std	Z+9, r23	; 0x09
    c132:	f1 01       	movw	r30, r2
    c134:	44 8b       	std	Z+20, r20	; 0x14
    c136:	55 8b       	std	Z+21, r21	; 0x15
    c138:	66 8b       	std	Z+22, r22	; 0x16
    c13a:	77 8b       	std	Z+23, r23	; 0x17
    c13c:	41 15       	cp	r20, r1
    c13e:	51 05       	cpc	r21, r1
    c140:	61 05       	cpc	r22, r1
    c142:	71 05       	cpc	r23, r1
    c144:	09 f0       	breq	.+2      	; 0xc148 <f_lseek+0x3c8>
    c146:	40 c0       	rjmp	.+128    	; 0xc1c8 <f_lseek+0x448>
    c148:	c1 2c       	mov	r12, r1
    c14a:	d1 2c       	mov	r13, r1
    c14c:	76 01       	movw	r14, r12
    c14e:	79 c0       	rjmp	.+242    	; 0xc242 <f_lseek+0x4c2>
    c150:	c8 18       	sub	r12, r8
    c152:	d9 08       	sbc	r13, r9
    c154:	ea 08       	sbc	r14, r10
    c156:	fb 08       	sbc	r15, r11
    c158:	f1 01       	movw	r30, r2
    c15a:	80 89       	ldd	r24, Z+16	; 0x10
    c15c:	91 89       	ldd	r25, Z+17	; 0x11
    c15e:	a2 89       	ldd	r26, Z+18	; 0x12
    c160:	b3 89       	ldd	r27, Z+19	; 0x13
    c162:	88 0d       	add	r24, r8
    c164:	99 1d       	adc	r25, r9
    c166:	aa 1d       	adc	r26, r10
    c168:	bb 1d       	adc	r27, r11
    c16a:	80 8b       	std	Z+16, r24	; 0x10
    c16c:	91 8b       	std	Z+17, r25	; 0x11
    c16e:	a2 8b       	std	Z+18, r26	; 0x12
    c170:	b3 8b       	std	Z+19, r27	; 0x13
    c172:	86 85       	ldd	r24, Z+14	; 0x0e
    c174:	81 ff       	sbrs	r24, 1
    c176:	2f c0       	rjmp	.+94     	; 0xc1d6 <f_lseek+0x456>
    c178:	c1 01       	movw	r24, r2
    c17a:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <create_chain>
    c17e:	ab 01       	movw	r20, r22
    c180:	bc 01       	movw	r22, r24
    c182:	41 15       	cp	r20, r1
    c184:	51 05       	cpc	r21, r1
    c186:	61 05       	cpc	r22, r1
    c188:	71 05       	cpc	r23, r1
    c18a:	61 f1       	breq	.+88     	; 0xc1e4 <f_lseek+0x464>
    c18c:	4f 3f       	cpi	r20, 0xFF	; 255
    c18e:	bf ef       	ldi	r27, 0xFF	; 255
    c190:	5b 07       	cpc	r21, r27
    c192:	6b 07       	cpc	r22, r27
    c194:	7b 07       	cpc	r23, r27
    c196:	09 f4       	brne	.+2      	; 0xc19a <f_lseek+0x41a>
    c198:	59 ce       	rjmp	.-846    	; 0xbe4c <f_lseek+0xcc>
    c19a:	42 30       	cpi	r20, 0x02	; 2
    c19c:	51 05       	cpc	r21, r1
    c19e:	61 05       	cpc	r22, r1
    c1a0:	71 05       	cpc	r23, r1
    c1a2:	08 f4       	brcc	.+2      	; 0xc1a6 <f_lseek+0x426>
    c1a4:	4b ce       	rjmp	.-874    	; 0xbe3c <f_lseek+0xbc>
    c1a6:	e9 81       	ldd	r30, Y+1	; 0x01
    c1a8:	fa 81       	ldd	r31, Y+2	; 0x02
    c1aa:	81 8d       	ldd	r24, Z+25	; 0x19
    c1ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    c1ae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c1b0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c1b2:	48 17       	cp	r20, r24
    c1b4:	59 07       	cpc	r21, r25
    c1b6:	6a 07       	cpc	r22, r26
    c1b8:	7b 07       	cpc	r23, r27
    c1ba:	08 f0       	brcs	.+2      	; 0xc1be <f_lseek+0x43e>
    c1bc:	3f ce       	rjmp	.-898    	; 0xbe3c <f_lseek+0xbc>
    c1be:	f1 01       	movw	r30, r2
    c1c0:	44 8b       	std	Z+20, r20	; 0x14
    c1c2:	55 8b       	std	Z+21, r21	; 0x15
    c1c4:	66 8b       	std	Z+22, r22	; 0x16
    c1c6:	77 8b       	std	Z+23, r23	; 0x17
    c1c8:	8c 14       	cp	r8, r12
    c1ca:	9d 04       	cpc	r9, r13
    c1cc:	ae 04       	cpc	r10, r14
    c1ce:	bf 04       	cpc	r11, r15
    c1d0:	08 f4       	brcc	.+2      	; 0xc1d4 <f_lseek+0x454>
    c1d2:	be cf       	rjmp	.-132    	; 0xc150 <f_lseek+0x3d0>
    c1d4:	0a c0       	rjmp	.+20     	; 0xc1ea <f_lseek+0x46a>
    c1d6:	80 81       	ld	r24, Z
    c1d8:	91 81       	ldd	r25, Z+1	; 0x01
    c1da:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <get_fat.isra.9>
    c1de:	ab 01       	movw	r20, r22
    c1e0:	bc 01       	movw	r22, r24
    c1e2:	d4 cf       	rjmp	.-88     	; 0xc18c <f_lseek+0x40c>
    c1e4:	c1 2c       	mov	r12, r1
    c1e6:	d1 2c       	mov	r13, r1
    c1e8:	76 01       	movw	r14, r12
    c1ea:	f1 01       	movw	r30, r2
    c1ec:	80 89       	ldd	r24, Z+16	; 0x10
    c1ee:	91 89       	ldd	r25, Z+17	; 0x11
    c1f0:	a2 89       	ldd	r26, Z+18	; 0x12
    c1f2:	b3 89       	ldd	r27, Z+19	; 0x13
    c1f4:	8c 0d       	add	r24, r12
    c1f6:	9d 1d       	adc	r25, r13
    c1f8:	ae 1d       	adc	r26, r14
    c1fa:	bf 1d       	adc	r27, r15
    c1fc:	80 8b       	std	Z+16, r24	; 0x10
    c1fe:	91 8b       	std	Z+17, r25	; 0x11
    c200:	a2 8b       	std	Z+18, r26	; 0x12
    c202:	b3 8b       	std	Z+19, r27	; 0x13
    c204:	d7 01       	movw	r26, r14
    c206:	c6 01       	movw	r24, r12
    c208:	91 70       	andi	r25, 0x01	; 1
    c20a:	aa 27       	eor	r26, r26
    c20c:	bb 27       	eor	r27, r27
    c20e:	89 2b       	or	r24, r25
    c210:	8a 2b       	or	r24, r26
    c212:	8b 2b       	or	r24, r27
    c214:	09 f4       	brne	.+2      	; 0xc218 <f_lseek+0x498>
    c216:	98 cf       	rjmp	.-208    	; 0xc148 <f_lseek+0x3c8>
    c218:	89 81       	ldd	r24, Y+1	; 0x01
    c21a:	9a 81       	ldd	r25, Y+2	; 0x02
    c21c:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    c220:	61 15       	cp	r22, r1
    c222:	71 05       	cpc	r23, r1
    c224:	81 05       	cpc	r24, r1
    c226:	91 05       	cpc	r25, r1
    c228:	09 f4       	brne	.+2      	; 0xc22c <f_lseek+0x4ac>
    c22a:	08 ce       	rjmp	.-1008   	; 0xbe3c <f_lseek+0xbc>
    c22c:	29 e0       	ldi	r18, 0x09	; 9
    c22e:	f6 94       	lsr	r15
    c230:	e7 94       	ror	r14
    c232:	d7 94       	ror	r13
    c234:	c7 94       	ror	r12
    c236:	2a 95       	dec	r18
    c238:	d1 f7       	brne	.-12     	; 0xc22e <f_lseek+0x4ae>
    c23a:	c6 0e       	add	r12, r22
    c23c:	d7 1e       	adc	r13, r23
    c23e:	e8 1e       	adc	r14, r24
    c240:	f9 1e       	adc	r15, r25
    c242:	f1 01       	movw	r30, r2
    c244:	80 89       	ldd	r24, Z+16	; 0x10
    c246:	91 89       	ldd	r25, Z+17	; 0x11
    c248:	a2 89       	ldd	r26, Z+18	; 0x12
    c24a:	b3 89       	ldd	r27, Z+19	; 0x13
    c24c:	42 85       	ldd	r20, Z+10	; 0x0a
    c24e:	53 85       	ldd	r21, Z+11	; 0x0b
    c250:	64 85       	ldd	r22, Z+12	; 0x0c
    c252:	75 85       	ldd	r23, Z+13	; 0x0d
    c254:	48 17       	cp	r20, r24
    c256:	59 07       	cpc	r21, r25
    c258:	6a 07       	cpc	r22, r26
    c25a:	7b 07       	cpc	r23, r27
    c25c:	38 f4       	brcc	.+14     	; 0xc26c <f_lseek+0x4ec>
    c25e:	82 87       	std	Z+10, r24	; 0x0a
    c260:	93 87       	std	Z+11, r25	; 0x0b
    c262:	a4 87       	std	Z+12, r26	; 0x0c
    c264:	b5 87       	std	Z+13, r27	; 0x0d
    c266:	26 85       	ldd	r18, Z+14	; 0x0e
    c268:	20 64       	ori	r18, 0x40	; 64
    c26a:	26 87       	std	Z+14, r18	; 0x0e
    c26c:	91 70       	andi	r25, 0x01	; 1
    c26e:	aa 27       	eor	r26, r26
    c270:	bb 27       	eor	r27, r27
    c272:	89 2b       	or	r24, r25
    c274:	8a 2b       	or	r24, r26
    c276:	8b 2b       	or	r24, r27
    c278:	79 f1       	breq	.+94     	; 0xc2d8 <f_lseek+0x558>
    c27a:	f1 01       	movw	r30, r2
    c27c:	20 8d       	ldd	r18, Z+24	; 0x18
    c27e:	31 8d       	ldd	r19, Z+25	; 0x19
    c280:	42 8d       	ldd	r20, Z+26	; 0x1a
    c282:	53 8d       	ldd	r21, Z+27	; 0x1b
    c284:	2c 15       	cp	r18, r12
    c286:	3d 05       	cpc	r19, r13
    c288:	4e 05       	cpc	r20, r14
    c28a:	5f 05       	cpc	r21, r15
    c28c:	29 f1       	breq	.+74     	; 0xc2d8 <f_lseek+0x558>
    c28e:	86 85       	ldd	r24, Z+14	; 0x0e
    c290:	b1 01       	movw	r22, r2
    c292:	6c 5d       	subi	r22, 0xDC	; 220
    c294:	7f 4f       	sbci	r23, 0xFF	; 255
    c296:	5b 01       	movw	r10, r22
    c298:	87 ff       	sbrs	r24, 7
    c29a:	0d c0       	rjmp	.+26     	; 0xc2b6 <f_lseek+0x536>
    c29c:	e9 81       	ldd	r30, Y+1	; 0x01
    c29e:	fa 81       	ldd	r31, Y+2	; 0x02
    c2a0:	01 e0       	ldi	r16, 0x01	; 1
    c2a2:	10 e0       	ldi	r17, 0x00	; 0
    c2a4:	81 81       	ldd	r24, Z+1	; 0x01
    c2a6:	aa d6       	rcall	.+3412   	; 0xcffc <disk_write>
    c2a8:	89 2b       	or	r24, r25
    c2aa:	09 f0       	breq	.+2      	; 0xc2ae <f_lseek+0x52e>
    c2ac:	cf cd       	rjmp	.-1122   	; 0xbe4c <f_lseek+0xcc>
    c2ae:	f1 01       	movw	r30, r2
    c2b0:	86 85       	ldd	r24, Z+14	; 0x0e
    c2b2:	8f 77       	andi	r24, 0x7F	; 127
    c2b4:	86 87       	std	Z+14, r24	; 0x0e
    c2b6:	e9 81       	ldd	r30, Y+1	; 0x01
    c2b8:	fa 81       	ldd	r31, Y+2	; 0x02
    c2ba:	01 e0       	ldi	r16, 0x01	; 1
    c2bc:	10 e0       	ldi	r17, 0x00	; 0
    c2be:	a7 01       	movw	r20, r14
    c2c0:	96 01       	movw	r18, r12
    c2c2:	b5 01       	movw	r22, r10
    c2c4:	81 81       	ldd	r24, Z+1	; 0x01
    c2c6:	8a d6       	rcall	.+3348   	; 0xcfdc <disk_read>
    c2c8:	89 2b       	or	r24, r25
    c2ca:	09 f0       	breq	.+2      	; 0xc2ce <f_lseek+0x54e>
    c2cc:	bf cd       	rjmp	.-1154   	; 0xbe4c <f_lseek+0xcc>
    c2ce:	f1 01       	movw	r30, r2
    c2d0:	c0 8e       	std	Z+24, r12	; 0x18
    c2d2:	d1 8e       	std	Z+25, r13	; 0x19
    c2d4:	e2 8e       	std	Z+26, r14	; 0x1a
    c2d6:	f3 8e       	std	Z+27, r15	; 0x1b
    c2d8:	80 e0       	ldi	r24, 0x00	; 0
    c2da:	bb cd       	rjmp	.-1162   	; 0xbe52 <f_lseek+0xd2>
    c2dc:	81 e1       	ldi	r24, 0x11	; 17
    c2de:	b9 cd       	rjmp	.-1166   	; 0xbe52 <f_lseek+0xd2>
    c2e0:	80 e0       	ldi	r24, 0x00	; 0
    c2e2:	90 e0       	ldi	r25, 0x00	; 0
    c2e4:	dc 01       	movw	r26, r24
    c2e6:	c1 2c       	mov	r12, r1
    c2e8:	d1 2c       	mov	r13, r1
    c2ea:	76 01       	movw	r14, r12
    c2ec:	bf cf       	rjmp	.-130    	; 0xc26c <f_lseek+0x4ec>
    c2ee:	2a 96       	adiw	r28, 0x0a	; 10
    c2f0:	e2 e1       	ldi	r30, 0x12	; 18
    c2f2:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000c2f6 <f_opendir>:
    c2f6:	a4 e0       	ldi	r26, 0x04	; 4
    c2f8:	b0 e0       	ldi	r27, 0x00	; 0
    c2fa:	e1 e8       	ldi	r30, 0x81	; 129
    c2fc:	f1 e6       	ldi	r31, 0x61	; 97
    c2fe:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    c302:	7c 83       	std	Y+4, r23	; 0x04
    c304:	6b 83       	std	Y+3, r22	; 0x03
    c306:	00 97       	sbiw	r24, 0x00	; 0
    c308:	09 f4       	brne	.+2      	; 0xc30c <f_opendir+0x16>
    c30a:	48 c0       	rjmp	.+144    	; 0xc39c <f_opendir+0xa6>
    c30c:	8c 01       	movw	r16, r24
    c30e:	40 e0       	ldi	r20, 0x00	; 0
    c310:	be 01       	movw	r22, r28
    c312:	6f 5f       	subi	r22, 0xFF	; 255
    c314:	7f 4f       	sbci	r23, 0xFF	; 255
    c316:	ce 01       	movw	r24, r28
    c318:	03 96       	adiw	r24, 0x03	; 3
    c31a:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    c31e:	7c 01       	movw	r14, r24
    c320:	89 2b       	or	r24, r25
    c322:	b9 f5       	brne	.+110    	; 0xc392 <f_opendir+0x9c>
    c324:	89 81       	ldd	r24, Y+1	; 0x01
    c326:	9a 81       	ldd	r25, Y+2	; 0x02
    c328:	f8 01       	movw	r30, r16
    c32a:	91 83       	std	Z+1, r25	; 0x01
    c32c:	80 83       	st	Z, r24
    c32e:	80 e0       	ldi	r24, 0x00	; 0
    c330:	92 e0       	ldi	r25, 0x02	; 2
    c332:	98 d5       	rcall	.+2864   	; 0xce64 <ff_memalloc>
    c334:	6c 01       	movw	r12, r24
    c336:	00 97       	sbiw	r24, 0x00	; 0
    c338:	99 f1       	breq	.+102    	; 0xc3a0 <f_opendir+0xaa>
    c33a:	e9 81       	ldd	r30, Y+1	; 0x01
    c33c:	fa 81       	ldd	r31, Y+2	; 0x02
    c33e:	94 87       	std	Z+12, r25	; 0x0c
    c340:	83 87       	std	Z+11, r24	; 0x0b
    c342:	6b 81       	ldd	r22, Y+3	; 0x03
    c344:	7c 81       	ldd	r23, Y+4	; 0x04
    c346:	c8 01       	movw	r24, r16
    c348:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    c34c:	7c 01       	movw	r14, r24
    c34e:	89 2b       	or	r24, r25
    c350:	b9 f4       	brne	.+46     	; 0xc380 <f_opendir+0x8a>
    c352:	f8 01       	movw	r30, r16
    c354:	87 a1       	ldd	r24, Z+39	; 0x27
    c356:	87 fd       	sbrc	r24, 7
    c358:	28 c0       	rjmp	.+80     	; 0xc3aa <f_opendir+0xb4>
    c35a:	84 81       	ldd	r24, Z+4	; 0x04
    c35c:	84 ff       	sbrs	r24, 4
    c35e:	0d c0       	rjmp	.+26     	; 0xc37a <f_opendir+0x84>
    c360:	62 8d       	ldd	r22, Z+26	; 0x1a
    c362:	73 8d       	ldd	r23, Z+27	; 0x1b
    c364:	e9 81       	ldd	r30, Y+1	; 0x01
    c366:	fa 81       	ldd	r31, Y+2	; 0x02
    c368:	80 81       	ld	r24, Z
    c36a:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    c36e:	f8 01       	movw	r30, r16
    c370:	66 83       	std	Z+6, r22	; 0x06
    c372:	77 83       	std	Z+7, r23	; 0x07
    c374:	80 87       	std	Z+8, r24	; 0x08
    c376:	91 87       	std	Z+9, r25	; 0x09
    c378:	18 c0       	rjmp	.+48     	; 0xc3aa <f_opendir+0xb4>
    c37a:	95 e0       	ldi	r25, 0x05	; 5
    c37c:	e9 2e       	mov	r14, r25
    c37e:	f1 2c       	mov	r15, r1
    c380:	c6 01       	movw	r24, r12
    c382:	73 d5       	rcall	.+2790   	; 0xce6a <ff_memfree>
    c384:	f4 e0       	ldi	r31, 0x04	; 4
    c386:	ef 16       	cp	r14, r31
    c388:	f1 04       	cpc	r15, r1
    c38a:	f1 f0       	breq	.+60     	; 0xc3c8 <f_opendir+0xd2>
    c38c:	e1 14       	cp	r14, r1
    c38e:	f1 04       	cpc	r15, r1
    c390:	49 f0       	breq	.+18     	; 0xc3a4 <f_opendir+0xae>
    c392:	f8 01       	movw	r30, r16
    c394:	11 82       	std	Z+1, r1	; 0x01
    c396:	10 82       	st	Z, r1
    c398:	c7 01       	movw	r24, r14
    c39a:	1a c0       	rjmp	.+52     	; 0xc3d0 <f_opendir+0xda>
    c39c:	89 e0       	ldi	r24, 0x09	; 9
    c39e:	03 c0       	rjmp	.+6      	; 0xc3a6 <f_opendir+0xb0>
    c3a0:	81 e1       	ldi	r24, 0x11	; 17
    c3a2:	01 c0       	rjmp	.+2      	; 0xc3a6 <f_opendir+0xb0>
    c3a4:	80 e0       	ldi	r24, 0x00	; 0
    c3a6:	90 e0       	ldi	r25, 0x00	; 0
    c3a8:	13 c0       	rjmp	.+38     	; 0xc3d0 <f_opendir+0xda>
    c3aa:	e9 81       	ldd	r30, Y+1	; 0x01
    c3ac:	fa 81       	ldd	r31, Y+2	; 0x02
    c3ae:	85 81       	ldd	r24, Z+5	; 0x05
    c3b0:	96 81       	ldd	r25, Z+6	; 0x06
    c3b2:	f8 01       	movw	r30, r16
    c3b4:	93 83       	std	Z+3, r25	; 0x03
    c3b6:	82 83       	std	Z+2, r24	; 0x02
    c3b8:	40 e0       	ldi	r20, 0x00	; 0
    c3ba:	50 e0       	ldi	r21, 0x00	; 0
    c3bc:	ba 01       	movw	r22, r20
    c3be:	c8 01       	movw	r24, r16
    c3c0:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <dir_sdi>
    c3c4:	7c 01       	movw	r14, r24
    c3c6:	dc cf       	rjmp	.-72     	; 0xc380 <f_opendir+0x8a>
    c3c8:	85 e0       	ldi	r24, 0x05	; 5
    c3ca:	e8 2e       	mov	r14, r24
    c3cc:	f1 2c       	mov	r15, r1
    c3ce:	e1 cf       	rjmp	.-62     	; 0xc392 <f_opendir+0x9c>
    c3d0:	24 96       	adiw	r28, 0x04	; 4
    c3d2:	e8 e0       	ldi	r30, 0x08	; 8
    c3d4:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000c3d8 <f_closedir>:
    c3d8:	a2 e0       	ldi	r26, 0x02	; 2
    c3da:	b0 e0       	ldi	r27, 0x00	; 0
    c3dc:	e2 ef       	ldi	r30, 0xF2	; 242
    c3de:	f1 e6       	ldi	r31, 0x61	; 97
    c3e0:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    c3e4:	8c 01       	movw	r16, r24
    c3e6:	be 01       	movw	r22, r28
    c3e8:	6f 5f       	subi	r22, 0xFF	; 255
    c3ea:	7f 4f       	sbci	r23, 0xFF	; 255
    c3ec:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <validate>
    c3f0:	00 97       	sbiw	r24, 0x00	; 0
    c3f2:	19 f4       	brne	.+6      	; 0xc3fa <f_closedir+0x22>
    c3f4:	f8 01       	movw	r30, r16
    c3f6:	11 82       	std	Z+1, r1	; 0x01
    c3f8:	10 82       	st	Z, r1
    c3fa:	22 96       	adiw	r28, 0x02	; 2
    c3fc:	e4 e0       	ldi	r30, 0x04	; 4
    c3fe:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

0000c402 <f_readdir>:
    c402:	a2 e0       	ldi	r26, 0x02	; 2
    c404:	b0 e0       	ldi	r27, 0x00	; 0
    c406:	e7 e0       	ldi	r30, 0x07	; 7
    c408:	f2 e6       	ldi	r31, 0x62	; 98
    c40a:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
    c40e:	7c 01       	movw	r14, r24
    c410:	5b 01       	movw	r10, r22
    c412:	be 01       	movw	r22, r28
    c414:	6f 5f       	subi	r22, 0xFF	; 255
    c416:	7f 4f       	sbci	r23, 0xFF	; 255
    c418:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <validate>
    c41c:	00 97       	sbiw	r24, 0x00	; 0
    c41e:	89 f5       	brne	.+98     	; 0xc482 <f_readdir+0x80>
    c420:	a1 14       	cp	r10, r1
    c422:	b1 04       	cpc	r11, r1
    c424:	39 f4       	brne	.+14     	; 0xc434 <f_readdir+0x32>
    c426:	40 e0       	ldi	r20, 0x00	; 0
    c428:	50 e0       	ldi	r21, 0x00	; 0
    c42a:	ba 01       	movw	r22, r20
    c42c:	c7 01       	movw	r24, r14
    c42e:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <dir_sdi>
    c432:	27 c0       	rjmp	.+78     	; 0xc482 <f_readdir+0x80>
    c434:	80 e0       	ldi	r24, 0x00	; 0
    c436:	92 e0       	ldi	r25, 0x02	; 2
    c438:	15 d5       	rcall	.+2602   	; 0xce64 <ff_memalloc>
    c43a:	6c 01       	movw	r12, r24
    c43c:	00 97       	sbiw	r24, 0x00	; 0
    c43e:	f9 f0       	breq	.+62     	; 0xc47e <f_readdir+0x7c>
    c440:	e9 81       	ldd	r30, Y+1	; 0x01
    c442:	fa 81       	ldd	r31, Y+2	; 0x02
    c444:	94 87       	std	Z+12, r25	; 0x0c
    c446:	83 87       	std	Z+11, r24	; 0x0b
    c448:	60 e0       	ldi	r22, 0x00	; 0
    c44a:	70 e0       	ldi	r23, 0x00	; 0
    c44c:	c7 01       	movw	r24, r14
    c44e:	0e 94 d7 51 	call	0xa3ae	; 0xa3ae <dir_read>
    c452:	8c 01       	movw	r16, r24
    c454:	8b 7f       	andi	r24, 0xFB	; 251
    c456:	89 2b       	or	r24, r25
    c458:	71 f4       	brne	.+28     	; 0xc476 <f_readdir+0x74>
    c45a:	b5 01       	movw	r22, r10
    c45c:	c7 01       	movw	r24, r14
    c45e:	0e 94 f8 46 	call	0x8df0	; 0x8df0 <get_fileinfo>
    c462:	60 e0       	ldi	r22, 0x00	; 0
    c464:	70 e0       	ldi	r23, 0x00	; 0
    c466:	c7 01       	movw	r24, r14
    c468:	0e 94 b6 50 	call	0xa16c	; 0xa16c <dir_next>
    c46c:	8c 01       	movw	r16, r24
    c46e:	04 97       	sbiw	r24, 0x04	; 4
    c470:	11 f4       	brne	.+4      	; 0xc476 <f_readdir+0x74>
    c472:	00 e0       	ldi	r16, 0x00	; 0
    c474:	10 e0       	ldi	r17, 0x00	; 0
    c476:	c6 01       	movw	r24, r12
    c478:	f8 d4       	rcall	.+2544   	; 0xce6a <ff_memfree>
    c47a:	c8 01       	movw	r24, r16
    c47c:	02 c0       	rjmp	.+4      	; 0xc482 <f_readdir+0x80>
    c47e:	81 e1       	ldi	r24, 0x11	; 17
    c480:	90 e0       	ldi	r25, 0x00	; 0
    c482:	22 96       	adiw	r28, 0x02	; 2
    c484:	ea e0       	ldi	r30, 0x0A	; 10
    c486:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0000c48a <f_stat>:
    c48a:	a0 e3       	ldi	r26, 0x30	; 48
    c48c:	b0 e0       	ldi	r27, 0x00	; 0
    c48e:	eb e4       	ldi	r30, 0x4B	; 75
    c490:	f2 e6       	ldi	r31, 0x62	; 98
    c492:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    c496:	98 ab       	std	Y+48, r25	; 0x30
    c498:	8f a7       	std	Y+47, r24	; 0x2f
    c49a:	6b 01       	movw	r12, r22
    c49c:	40 e0       	ldi	r20, 0x00	; 0
    c49e:	be 01       	movw	r22, r28
    c4a0:	6f 5f       	subi	r22, 0xFF	; 255
    c4a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c4a4:	ce 01       	movw	r24, r28
    c4a6:	8f 96       	adiw	r24, 0x2f	; 47
    c4a8:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    c4ac:	00 97       	sbiw	r24, 0x00	; 0
    c4ae:	39 f5       	brne	.+78     	; 0xc4fe <f_stat+0x74>
    c4b0:	80 e0       	ldi	r24, 0x00	; 0
    c4b2:	92 e0       	ldi	r25, 0x02	; 2
    c4b4:	d7 d4       	rcall	.+2478   	; 0xce64 <ff_memalloc>
    c4b6:	7c 01       	movw	r14, r24
    c4b8:	00 97       	sbiw	r24, 0x00	; 0
    c4ba:	f9 f0       	breq	.+62     	; 0xc4fa <f_stat+0x70>
    c4bc:	e9 81       	ldd	r30, Y+1	; 0x01
    c4be:	fa 81       	ldd	r31, Y+2	; 0x02
    c4c0:	94 87       	std	Z+12, r25	; 0x0c
    c4c2:	83 87       	std	Z+11, r24	; 0x0b
    c4c4:	6f a5       	ldd	r22, Y+47	; 0x2f
    c4c6:	78 a9       	ldd	r23, Y+48	; 0x30
    c4c8:	ce 01       	movw	r24, r28
    c4ca:	01 96       	adiw	r24, 0x01	; 1
    c4cc:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    c4d0:	8c 01       	movw	r16, r24
    c4d2:	89 2b       	or	r24, r25
    c4d4:	71 f4       	brne	.+28     	; 0xc4f2 <f_stat+0x68>
    c4d6:	88 a5       	ldd	r24, Y+40	; 0x28
    c4d8:	87 fd       	sbrc	r24, 7
    c4da:	09 c0       	rjmp	.+18     	; 0xc4ee <f_stat+0x64>
    c4dc:	c1 14       	cp	r12, r1
    c4de:	d1 04       	cpc	r13, r1
    c4e0:	41 f0       	breq	.+16     	; 0xc4f2 <f_stat+0x68>
    c4e2:	b6 01       	movw	r22, r12
    c4e4:	ce 01       	movw	r24, r28
    c4e6:	01 96       	adiw	r24, 0x01	; 1
    c4e8:	0e 94 f8 46 	call	0x8df0	; 0x8df0 <get_fileinfo>
    c4ec:	02 c0       	rjmp	.+4      	; 0xc4f2 <f_stat+0x68>
    c4ee:	06 e0       	ldi	r16, 0x06	; 6
    c4f0:	10 e0       	ldi	r17, 0x00	; 0
    c4f2:	c7 01       	movw	r24, r14
    c4f4:	ba d4       	rcall	.+2420   	; 0xce6a <ff_memfree>
    c4f6:	c8 01       	movw	r24, r16
    c4f8:	02 c0       	rjmp	.+4      	; 0xc4fe <f_stat+0x74>
    c4fa:	81 e1       	ldi	r24, 0x11	; 17
    c4fc:	90 e0       	ldi	r25, 0x00	; 0
    c4fe:	e0 96       	adiw	r28, 0x30	; 48
    c500:	e8 e0       	ldi	r30, 0x08	; 8
    c502:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000c506 <f_getfree>:
    c506:	aa e0       	ldi	r26, 0x0A	; 10
    c508:	b0 e0       	ldi	r27, 0x00	; 0
    c50a:	e9 e8       	ldi	r30, 0x89	; 137
    c50c:	f2 e6       	ldi	r31, 0x62	; 98
    c50e:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
    c512:	9c 83       	std	Y+4, r25	; 0x04
    c514:	8b 83       	std	Y+3, r24	; 0x03
    c516:	7e 83       	std	Y+6, r23	; 0x06
    c518:	6d 83       	std	Y+5, r22	; 0x05
    c51a:	7a 01       	movw	r14, r20
    c51c:	40 e0       	ldi	r20, 0x00	; 0
    c51e:	be 01       	movw	r22, r28
    c520:	6f 5f       	subi	r22, 0xFF	; 255
    c522:	7f 4f       	sbci	r23, 0xFF	; 255
    c524:	ce 01       	movw	r24, r28
    c526:	03 96       	adiw	r24, 0x03	; 3
    c528:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    c52c:	8c 01       	movw	r16, r24
    c52e:	89 2b       	or	r24, r25
    c530:	09 f0       	breq	.+2      	; 0xc534 <f_getfree+0x2e>
    c532:	c4 c0       	rjmp	.+392    	; 0xc6bc <f_getfree+0x1b6>
    c534:	69 80       	ldd	r6, Y+1	; 0x01
    c536:	7a 80       	ldd	r7, Y+2	; 0x02
    c538:	d7 01       	movw	r26, r14
    c53a:	6d 92       	st	X+, r6
    c53c:	7c 92       	st	X, r7
    c53e:	f3 01       	movw	r30, r6
    c540:	81 89       	ldd	r24, Z+17	; 0x11
    c542:	92 89       	ldd	r25, Z+18	; 0x12
    c544:	a3 89       	ldd	r26, Z+19	; 0x13
    c546:	b4 89       	ldd	r27, Z+20	; 0x14
    c548:	81 8c       	ldd	r8, Z+25	; 0x19
    c54a:	92 8c       	ldd	r9, Z+26	; 0x1a
    c54c:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c54e:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c550:	b5 01       	movw	r22, r10
    c552:	a4 01       	movw	r20, r8
    c554:	42 50       	subi	r20, 0x02	; 2
    c556:	51 09       	sbc	r21, r1
    c558:	61 09       	sbc	r22, r1
    c55a:	71 09       	sbc	r23, r1
    c55c:	48 17       	cp	r20, r24
    c55e:	59 07       	cpc	r21, r25
    c560:	6a 07       	cpc	r22, r26
    c562:	7b 07       	cpc	r23, r27
    c564:	38 f0       	brcs	.+14     	; 0xc574 <f_getfree+0x6e>
    c566:	ed 81       	ldd	r30, Y+5	; 0x05
    c568:	fe 81       	ldd	r31, Y+6	; 0x06
    c56a:	80 83       	st	Z, r24
    c56c:	91 83       	std	Z+1, r25	; 0x01
    c56e:	a2 83       	std	Z+2, r26	; 0x02
    c570:	b3 83       	std	Z+3, r27	; 0x03
    c572:	a4 c0       	rjmp	.+328    	; 0xc6bc <f_getfree+0x1b6>
    c574:	80 81       	ld	r24, Z
    c576:	81 30       	cpi	r24, 0x01	; 1
    c578:	a1 f5       	brne	.+104    	; 0xc5e2 <f_getfree+0xdc>
    c57a:	82 e0       	ldi	r24, 0x02	; 2
    c57c:	88 2e       	mov	r8, r24
    c57e:	91 2c       	mov	r9, r1
    c580:	a1 2c       	mov	r10, r1
    c582:	b1 2c       	mov	r11, r1
    c584:	c1 2c       	mov	r12, r1
    c586:	d1 2c       	mov	r13, r1
    c588:	76 01       	movw	r14, r12
    c58a:	b5 01       	movw	r22, r10
    c58c:	a4 01       	movw	r20, r8
    c58e:	c3 01       	movw	r24, r6
    c590:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <get_fat.isra.9>
    c594:	6f 3f       	cpi	r22, 0xFF	; 255
    c596:	bf ef       	ldi	r27, 0xFF	; 255
    c598:	7b 07       	cpc	r23, r27
    c59a:	8b 07       	cpc	r24, r27
    c59c:	9b 07       	cpc	r25, r27
    c59e:	09 f4       	brne	.+2      	; 0xc5a2 <f_getfree+0x9c>
    c5a0:	76 c0       	rjmp	.+236    	; 0xc68e <f_getfree+0x188>
    c5a2:	61 30       	cpi	r22, 0x01	; 1
    c5a4:	71 05       	cpc	r23, r1
    c5a6:	81 05       	cpc	r24, r1
    c5a8:	91 05       	cpc	r25, r1
    c5aa:	09 f4       	brne	.+2      	; 0xc5ae <f_getfree+0xa8>
    c5ac:	73 c0       	rjmp	.+230    	; 0xc694 <f_getfree+0x18e>
    c5ae:	67 2b       	or	r22, r23
    c5b0:	68 2b       	or	r22, r24
    c5b2:	69 2b       	or	r22, r25
    c5b4:	29 f4       	brne	.+10     	; 0xc5c0 <f_getfree+0xba>
    c5b6:	ef ef       	ldi	r30, 0xFF	; 255
    c5b8:	ce 1a       	sub	r12, r30
    c5ba:	de 0a       	sbc	r13, r30
    c5bc:	ee 0a       	sbc	r14, r30
    c5be:	fe 0a       	sbc	r15, r30
    c5c0:	ff ef       	ldi	r31, 0xFF	; 255
    c5c2:	8f 1a       	sub	r8, r31
    c5c4:	9f 0a       	sbc	r9, r31
    c5c6:	af 0a       	sbc	r10, r31
    c5c8:	bf 0a       	sbc	r11, r31
    c5ca:	e9 81       	ldd	r30, Y+1	; 0x01
    c5cc:	fa 81       	ldd	r31, Y+2	; 0x02
    c5ce:	81 8d       	ldd	r24, Z+25	; 0x19
    c5d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    c5d2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c5d4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c5d6:	88 16       	cp	r8, r24
    c5d8:	99 06       	cpc	r9, r25
    c5da:	aa 06       	cpc	r10, r26
    c5dc:	bb 06       	cpc	r11, r27
    c5de:	a8 f2       	brcs	.-86     	; 0xc58a <f_getfree+0x84>
    c5e0:	5d c0       	rjmp	.+186    	; 0xc69c <f_getfree+0x196>
    c5e2:	f3 01       	movw	r30, r6
    c5e4:	45 a0       	ldd	r4, Z+37	; 0x25
    c5e6:	56 a0       	ldd	r5, Z+38	; 0x26
    c5e8:	67 a0       	ldd	r6, Z+39	; 0x27
    c5ea:	70 a4       	ldd	r7, Z+40	; 0x28
    c5ec:	21 2c       	mov	r2, r1
    c5ee:	31 2c       	mov	r3, r1
    c5f0:	c1 2c       	mov	r12, r1
    c5f2:	d1 2c       	mov	r13, r1
    c5f4:	76 01       	movw	r14, r12
    c5f6:	21 14       	cp	r2, r1
    c5f8:	31 04       	cpc	r3, r1
    c5fa:	b1 f4       	brne	.+44     	; 0xc628 <f_getfree+0x122>
    c5fc:	d3 01       	movw	r26, r6
    c5fe:	c2 01       	movw	r24, r4
    c600:	01 96       	adiw	r24, 0x01	; 1
    c602:	a1 1d       	adc	r26, r1
    c604:	b1 1d       	adc	r27, r1
    c606:	8f 83       	std	Y+7, r24	; 0x07
    c608:	98 87       	std	Y+8, r25	; 0x08
    c60a:	a9 87       	std	Y+9, r26	; 0x09
    c60c:	ba 87       	std	Y+10, r27	; 0x0a
    c60e:	b3 01       	movw	r22, r6
    c610:	a2 01       	movw	r20, r4
    c612:	89 81       	ldd	r24, Y+1	; 0x01
    c614:	9a 81       	ldd	r25, Y+2	; 0x02
    c616:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    c61a:	00 97       	sbiw	r24, 0x00	; 0
    c61c:	09 f0       	breq	.+2      	; 0xc620 <f_getfree+0x11a>
    c61e:	3d c0       	rjmp	.+122    	; 0xc69a <f_getfree+0x194>
    c620:	4f 80       	ldd	r4, Y+7	; 0x07
    c622:	58 84       	ldd	r5, Y+8	; 0x08
    c624:	69 84       	ldd	r6, Y+9	; 0x09
    c626:	7a 84       	ldd	r7, Y+10	; 0x0a
    c628:	e9 81       	ldd	r30, Y+1	; 0x01
    c62a:	fa 81       	ldd	r31, Y+2	; 0x02
    c62c:	80 81       	ld	r24, Z
    c62e:	82 30       	cpi	r24, 0x02	; 2
    c630:	79 f4       	brne	.+30     	; 0xc650 <f_getfree+0x14a>
    c632:	e2 0d       	add	r30, r2
    c634:	f3 1d       	adc	r31, r3
    c636:	85 a9       	ldd	r24, Z+53	; 0x35
    c638:	96 a9       	ldd	r25, Z+54	; 0x36
    c63a:	89 2b       	or	r24, r25
    c63c:	29 f4       	brne	.+10     	; 0xc648 <f_getfree+0x142>
    c63e:	9f ef       	ldi	r25, 0xFF	; 255
    c640:	c9 1a       	sub	r12, r25
    c642:	d9 0a       	sbc	r13, r25
    c644:	e9 0a       	sbc	r14, r25
    c646:	f9 0a       	sbc	r15, r25
    c648:	a2 e0       	ldi	r26, 0x02	; 2
    c64a:	2a 0e       	add	r2, r26
    c64c:	31 1c       	adc	r3, r1
    c64e:	15 c0       	rjmp	.+42     	; 0xc67a <f_getfree+0x174>
    c650:	cf 01       	movw	r24, r30
    c652:	c5 96       	adiw	r24, 0x35	; 53
    c654:	82 0d       	add	r24, r2
    c656:	93 1d       	adc	r25, r3
    c658:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_dword>
    c65c:	dc 01       	movw	r26, r24
    c65e:	cb 01       	movw	r24, r22
    c660:	bf 70       	andi	r27, 0x0F	; 15
    c662:	89 2b       	or	r24, r25
    c664:	8a 2b       	or	r24, r26
    c666:	8b 2b       	or	r24, r27
    c668:	29 f4       	brne	.+10     	; 0xc674 <f_getfree+0x16e>
    c66a:	bf ef       	ldi	r27, 0xFF	; 255
    c66c:	cb 1a       	sub	r12, r27
    c66e:	db 0a       	sbc	r13, r27
    c670:	eb 0a       	sbc	r14, r27
    c672:	fb 0a       	sbc	r15, r27
    c674:	e4 e0       	ldi	r30, 0x04	; 4
    c676:	2e 0e       	add	r2, r30
    c678:	31 1c       	adc	r3, r1
    c67a:	f1 e0       	ldi	r31, 0x01	; 1
    c67c:	3f 22       	and	r3, r31
    c67e:	21 e0       	ldi	r18, 0x01	; 1
    c680:	82 1a       	sub	r8, r18
    c682:	91 08       	sbc	r9, r1
    c684:	a1 08       	sbc	r10, r1
    c686:	b1 08       	sbc	r11, r1
    c688:	09 f0       	breq	.+2      	; 0xc68c <f_getfree+0x186>
    c68a:	b5 cf       	rjmp	.-150    	; 0xc5f6 <f_getfree+0xf0>
    c68c:	07 c0       	rjmp	.+14     	; 0xc69c <f_getfree+0x196>
    c68e:	01 e0       	ldi	r16, 0x01	; 1
    c690:	10 e0       	ldi	r17, 0x00	; 0
    c692:	04 c0       	rjmp	.+8      	; 0xc69c <f_getfree+0x196>
    c694:	02 e0       	ldi	r16, 0x02	; 2
    c696:	10 e0       	ldi	r17, 0x00	; 0
    c698:	01 c0       	rjmp	.+2      	; 0xc69c <f_getfree+0x196>
    c69a:	8c 01       	movw	r16, r24
    c69c:	ad 81       	ldd	r26, Y+5	; 0x05
    c69e:	be 81       	ldd	r27, Y+6	; 0x06
    c6a0:	cd 92       	st	X+, r12
    c6a2:	dd 92       	st	X+, r13
    c6a4:	ed 92       	st	X+, r14
    c6a6:	fc 92       	st	X, r15
    c6a8:	13 97       	sbiw	r26, 0x03	; 3
    c6aa:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ac:	fa 81       	ldd	r31, Y+2	; 0x02
    c6ae:	c1 8a       	std	Z+17, r12	; 0x11
    c6b0:	d2 8a       	std	Z+18, r13	; 0x12
    c6b2:	e3 8a       	std	Z+19, r14	; 0x13
    c6b4:	f4 8a       	std	Z+20, r15	; 0x14
    c6b6:	84 81       	ldd	r24, Z+4	; 0x04
    c6b8:	81 60       	ori	r24, 0x01	; 1
    c6ba:	84 83       	std	Z+4, r24	; 0x04
    c6bc:	c8 01       	movw	r24, r16
    c6be:	2a 96       	adiw	r28, 0x0a	; 10
    c6c0:	e2 e1       	ldi	r30, 0x12	; 18
    c6c2:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0000c6c6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c6c6:	a0 e6       	ldi	r26, 0x60	; 96
    c6c8:	b0 e0       	ldi	r27, 0x00	; 0
    c6ca:	e9 e6       	ldi	r30, 0x69	; 105
    c6cc:	f3 e6       	ldi	r31, 0x63	; 99
    c6ce:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xe>
    c6d2:	a1 96       	adiw	r28, 0x21	; 33
    c6d4:	9f af       	std	Y+63, r25	; 0x3f
    c6d6:	8e af       	std	Y+62, r24	; 0x3e
    c6d8:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c6da:	42 e0       	ldi	r20, 0x02	; 2
    c6dc:	be 01       	movw	r22, r28
    c6de:	63 5a       	subi	r22, 0xA3	; 163
    c6e0:	7f 4f       	sbci	r23, 0xFF	; 255
    c6e2:	ce 01       	movw	r24, r28
    c6e4:	81 5a       	subi	r24, 0xA1	; 161
    c6e6:	9f 4f       	sbci	r25, 0xFF	; 255
    c6e8:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
	if (res == FR_OK) {
    c6ec:	00 97       	sbiw	r24, 0x00	; 0
    c6ee:	09 f0       	breq	.+2      	; 0xc6f2 <f_unlink+0x2c>
    c6f0:	8c c0       	rjmp	.+280    	; 0xc80a <f_unlink+0x144>
		dj.obj.fs = fs;
    c6f2:	6f 96       	adiw	r28, 0x1f	; 31
    c6f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    c6f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    c6f8:	6f 97       	sbiw	r28, 0x1f	; 31
    c6fa:	98 ab       	std	Y+48, r25	; 0x30
    c6fc:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c6fe:	80 e0       	ldi	r24, 0x00	; 0
    c700:	92 e0       	ldi	r25, 0x02	; 2
    c702:	b0 d3       	rcall	.+1888   	; 0xce64 <ff_memalloc>
    c704:	5c 01       	movw	r10, r24
    c706:	00 97       	sbiw	r24, 0x00	; 0
    c708:	09 f4       	brne	.+2      	; 0xc70c <f_unlink+0x46>
    c70a:	49 c0       	rjmp	.+146    	; 0xc79e <f_unlink+0xd8>
    c70c:	6f 96       	adiw	r28, 0x1f	; 31
    c70e:	ee ad       	ldd	r30, Y+62	; 0x3e
    c710:	ff ad       	ldd	r31, Y+63	; 0x3f
    c712:	6f 97       	sbiw	r28, 0x1f	; 31
    c714:	94 87       	std	Z+12, r25	; 0x0c
    c716:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c718:	a1 96       	adiw	r28, 0x21	; 33
    c71a:	6e ad       	ldd	r22, Y+62	; 0x3e
    c71c:	7f ad       	ldd	r23, Y+63	; 0x3f
    c71e:	a1 97       	sbiw	r28, 0x21	; 33
    c720:	ce 01       	movw	r24, r28
    c722:	8f 96       	adiw	r24, 0x2f	; 47
    c724:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    c728:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c72a:	89 2b       	or	r24, r25
    c72c:	a1 f5       	brne	.+104    	; 0xc796 <f_unlink+0xd0>
    c72e:	67 96       	adiw	r28, 0x17	; 23
    c730:	8f ad       	ldd	r24, Y+63	; 0x3f
    c732:	67 97       	sbiw	r28, 0x17	; 23
    c734:	85 fd       	sbrc	r24, 5
    c736:	36 c0       	rjmp	.+108    	; 0xc7a4 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c738:	87 fd       	sbrc	r24, 7
    c73a:	34 c0       	rjmp	.+104    	; 0xc7a4 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c73c:	9b a8       	ldd	r9, Y+51	; 0x33
    c73e:	90 fc       	sbrc	r9, 0
    c740:	40 c0       	rjmp	.+128    	; 0xc7c2 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c742:	6f 96       	adiw	r28, 0x1f	; 31
    c744:	0e ad       	ldd	r16, Y+62	; 0x3e
    c746:	1f ad       	ldd	r17, Y+63	; 0x3f
    c748:	6f 97       	sbiw	r28, 0x1f	; 31
    c74a:	2b 96       	adiw	r28, 0x0b	; 11
    c74c:	6e ad       	ldd	r22, Y+62	; 0x3e
    c74e:	7f ad       	ldd	r23, Y+63	; 0x3f
    c750:	2b 97       	sbiw	r28, 0x0b	; 11
    c752:	f8 01       	movw	r30, r16
    c754:	80 81       	ld	r24, Z
    c756:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    c75a:	6b 01       	movw	r12, r22
    c75c:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c75e:	94 fe       	sbrs	r9, 4
    c760:	33 c0       	rjmp	.+102    	; 0xc7c8 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c762:	f8 01       	movw	r30, r16
    c764:	85 89       	ldd	r24, Z+21	; 0x15
    c766:	96 89       	ldd	r25, Z+22	; 0x16
    c768:	a7 89       	ldd	r26, Z+23	; 0x17
    c76a:	b0 8d       	ldd	r27, Z+24	; 0x18
    c76c:	c8 16       	cp	r12, r24
    c76e:	d9 06       	cpc	r13, r25
    c770:	ea 06       	cpc	r14, r26
    c772:	fb 06       	cpc	r15, r27
    c774:	31 f1       	breq	.+76     	; 0xc7c2 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c776:	1a 83       	std	Y+2, r17	; 0x02
    c778:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c77a:	cf 82       	std	Y+7, r12	; 0x07
    c77c:	d8 86       	std	Y+8, r13	; 0x08
    c77e:	e9 86       	std	Y+9, r14	; 0x09
    c780:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c782:	40 e0       	ldi	r20, 0x00	; 0
    c784:	50 e0       	ldi	r21, 0x00	; 0
    c786:	ba 01       	movw	r22, r20
    c788:	ce 01       	movw	r24, r28
    c78a:	01 96       	adiw	r24, 0x01	; 1
    c78c:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <dir_sdi>
    c790:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c792:	89 2b       	or	r24, r25
    c794:	51 f0       	breq	.+20     	; 0xc7aa <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c796:	c5 01       	movw	r24, r10
    c798:	68 d3       	rcall	.+1744   	; 0xce6a <ff_memfree>
    c79a:	c8 01       	movw	r24, r16
    c79c:	36 c0       	rjmp	.+108    	; 0xc80a <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c79e:	81 e1       	ldi	r24, 0x11	; 17
    c7a0:	90 e0       	ldi	r25, 0x00	; 0
    c7a2:	33 c0       	rjmp	.+102    	; 0xc80a <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c7a4:	06 e0       	ldi	r16, 0x06	; 6
    c7a6:	10 e0       	ldi	r17, 0x00	; 0
    c7a8:	f6 cf       	rjmp	.-20     	; 0xc796 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c7aa:	60 e0       	ldi	r22, 0x00	; 0
    c7ac:	70 e0       	ldi	r23, 0x00	; 0
    c7ae:	ce 01       	movw	r24, r28
    c7b0:	01 96       	adiw	r24, 0x01	; 1
    c7b2:	0e 94 d7 51 	call	0xa3ae	; 0xa3ae <dir_read>
    c7b6:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c7b8:	00 97       	sbiw	r24, 0x00	; 0
    c7ba:	19 f0       	breq	.+6      	; 0xc7c2 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c7bc:	04 97       	sbiw	r24, 0x04	; 4
    c7be:	21 f0       	breq	.+8      	; 0xc7c8 <f_unlink+0x102>
    c7c0:	ea cf       	rjmp	.-44     	; 0xc796 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c7c2:	07 e0       	ldi	r16, 0x07	; 7
    c7c4:	10 e0       	ldi	r17, 0x00	; 0
    c7c6:	e7 cf       	rjmp	.-50     	; 0xc796 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c7c8:	ce 01       	movw	r24, r28
    c7ca:	8f 96       	adiw	r24, 0x2f	; 47
    c7cc:	0e 94 a0 52 	call	0xa540	; 0xa540 <dir_remove>
    c7d0:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c7d2:	89 2b       	or	r24, r25
    c7d4:	01 f7       	brne	.-64     	; 0xc796 <f_unlink+0xd0>
    c7d6:	c1 14       	cp	r12, r1
    c7d8:	d1 04       	cpc	r13, r1
    c7da:	e1 04       	cpc	r14, r1
    c7dc:	f1 04       	cpc	r15, r1
    c7de:	41 f4       	brne	.+16     	; 0xc7f0 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c7e0:	6f 96       	adiw	r28, 0x1f	; 31
    c7e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    c7e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    c7e6:	6f 97       	sbiw	r28, 0x1f	; 31
    c7e8:	0e 94 a2 48 	call	0x9144	; 0x9144 <sync_fs>
    c7ec:	8c 01       	movw	r16, r24
    c7ee:	d3 cf       	rjmp	.-90     	; 0xc796 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c7f0:	00 e0       	ldi	r16, 0x00	; 0
    c7f2:	10 e0       	ldi	r17, 0x00	; 0
    c7f4:	98 01       	movw	r18, r16
    c7f6:	b7 01       	movw	r22, r14
    c7f8:	a6 01       	movw	r20, r12
    c7fa:	ce 01       	movw	r24, r28
    c7fc:	8f 96       	adiw	r24, 0x2f	; 47
    c7fe:	0e 94 25 50 	call	0xa04a	; 0xa04a <remove_chain>
    c802:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c804:	89 2b       	or	r24, r25
    c806:	39 f6       	brne	.-114    	; 0xc796 <f_unlink+0xd0>
    c808:	eb cf       	rjmp	.-42     	; 0xc7e0 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c80a:	c0 5a       	subi	r28, 0xA0	; 160
    c80c:	df 4f       	sbci	r29, 0xFF	; 255
    c80e:	eb e0       	ldi	r30, 0x0B	; 11
    c810:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xe>

0000c814 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c814:	a0 e4       	ldi	r26, 0x40	; 64
    c816:	b0 e0       	ldi	r27, 0x00	; 0
    c818:	e0 e1       	ldi	r30, 0x10	; 16
    c81a:	f4 e6       	ldi	r31, 0x64	; 100
    c81c:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x4>
    c820:	21 96       	adiw	r28, 0x01	; 1
    c822:	9f af       	std	Y+63, r25	; 0x3f
    c824:	8e af       	std	Y+62, r24	; 0x3e
    c826:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c828:	42 e0       	ldi	r20, 0x02	; 2
    c82a:	be 01       	movw	r22, r28
    c82c:	63 5c       	subi	r22, 0xC3	; 195
    c82e:	7f 4f       	sbci	r23, 0xFF	; 255
    c830:	ce 01       	movw	r24, r28
    c832:	cf 96       	adiw	r24, 0x3f	; 63
    c834:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
	if (res == FR_OK) {
    c838:	00 97       	sbiw	r24, 0x00	; 0
    c83a:	09 f0       	breq	.+2      	; 0xc83e <f_mkdir+0x2a>
    c83c:	d6 c0       	rjmp	.+428    	; 0xc9ea <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c83e:	8d ad       	ldd	r24, Y+61	; 0x3d
    c840:	9e ad       	ldd	r25, Y+62	; 0x3e
    c842:	9a 83       	std	Y+2, r25	; 0x02
    c844:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c846:	80 e0       	ldi	r24, 0x00	; 0
    c848:	92 e0       	ldi	r25, 0x02	; 2
    c84a:	0c d3       	rcall	.+1560   	; 0xce64 <ff_memalloc>
    c84c:	6c 01       	movw	r12, r24
    c84e:	00 97       	sbiw	r24, 0x00	; 0
    c850:	e9 f0       	breq	.+58     	; 0xc88c <f_mkdir+0x78>
    c852:	ed ad       	ldd	r30, Y+61	; 0x3d
    c854:	fe ad       	ldd	r31, Y+62	; 0x3e
    c856:	94 87       	std	Z+12, r25	; 0x0c
    c858:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c85a:	21 96       	adiw	r28, 0x01	; 1
    c85c:	6e ad       	ldd	r22, Y+62	; 0x3e
    c85e:	7f ad       	ldd	r23, Y+63	; 0x3f
    c860:	21 97       	sbiw	r28, 0x01	; 1
    c862:	ce 01       	movw	r24, r28
    c864:	01 96       	adiw	r24, 0x01	; 1
    c866:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    c86a:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c86c:	89 2b       	or	r24, r25
    c86e:	89 f0       	breq	.+34     	; 0xc892 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c870:	84 e0       	ldi	r24, 0x04	; 4
    c872:	e8 16       	cp	r14, r24
    c874:	f1 04       	cpc	r15, r1
    c876:	31 f4       	brne	.+12     	; 0xc884 <f_mkdir+0x70>
    c878:	88 a5       	ldd	r24, Y+40	; 0x28
    c87a:	85 ff       	sbrs	r24, 5
    c87c:	0e c0       	rjmp	.+28     	; 0xc89a <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c87e:	26 e0       	ldi	r18, 0x06	; 6
    c880:	e2 2e       	mov	r14, r18
    c882:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    c884:	c6 01       	movw	r24, r12
    c886:	f1 d2       	rcall	.+1506   	; 0xce6a <ff_memfree>
    c888:	c7 01       	movw	r24, r14
    c88a:	af c0       	rjmp	.+350    	; 0xc9ea <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c88c:	81 e1       	ldi	r24, 0x11	; 17
    c88e:	90 e0       	ldi	r25, 0x00	; 0
    c890:	ac c0       	rjmp	.+344    	; 0xc9ea <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c892:	38 e0       	ldi	r19, 0x08	; 8
    c894:	e3 2e       	mov	r14, r19
    c896:	f1 2c       	mov	r15, r1
    c898:	f5 cf       	rjmp	.-22     	; 0xc884 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    c89a:	8d ad       	ldd	r24, Y+61	; 0x3d
    c89c:	9e ad       	ldd	r25, Y+62	; 0x3e
    c89e:	98 ab       	std	Y+48, r25	; 0x30
    c8a0:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    c8a2:	40 e0       	ldi	r20, 0x00	; 0
    c8a4:	50 e0       	ldi	r21, 0x00	; 0
    c8a6:	ba 01       	movw	r22, r20
    c8a8:	ce 01       	movw	r24, r28
    c8aa:	8f 96       	adiw	r24, 0x2f	; 47
    c8ac:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <create_chain>
    c8b0:	4b 01       	movw	r8, r22
    c8b2:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c8b4:	67 2b       	or	r22, r23
    c8b6:	68 2b       	or	r22, r24
    c8b8:	69 2b       	or	r22, r25
    c8ba:	09 f1       	breq	.+66     	; 0xc8fe <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c8bc:	e1 e0       	ldi	r30, 0x01	; 1
    c8be:	8e 16       	cp	r8, r30
    c8c0:	91 04       	cpc	r9, r1
    c8c2:	a1 04       	cpc	r10, r1
    c8c4:	b1 04       	cpc	r11, r1
    c8c6:	61 f0       	breq	.+24     	; 0xc8e0 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    c8c8:	ff ef       	ldi	r31, 0xFF	; 255
    c8ca:	8f 16       	cp	r8, r31
    c8cc:	9f 06       	cpc	r9, r31
    c8ce:	af 06       	cpc	r10, r31
    c8d0:	bf 06       	cpc	r11, r31
    c8d2:	d9 f4       	brne	.+54     	; 0xc90a <f_mkdir+0xf6>
			tm = GET_FATTIME();
    c8d4:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <get_fattime>
    c8d8:	ee 24       	eor	r14, r14
    c8da:	e3 94       	inc	r14
    c8dc:	f1 2c       	mov	r15, r1
    c8de:	05 c0       	rjmp	.+10     	; 0xc8ea <f_mkdir+0xd6>
    c8e0:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c8e4:	92 e0       	ldi	r25, 0x02	; 2
    c8e6:	e9 2e       	mov	r14, r25
    c8e8:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    c8ea:	00 e0       	ldi	r16, 0x00	; 0
    c8ec:	10 e0       	ldi	r17, 0x00	; 0
    c8ee:	98 01       	movw	r18, r16
    c8f0:	b5 01       	movw	r22, r10
    c8f2:	a4 01       	movw	r20, r8
    c8f4:	ce 01       	movw	r24, r28
    c8f6:	8f 96       	adiw	r24, 0x2f	; 47
    c8f8:	0e 94 25 50 	call	0xa04a	; 0xa04a <remove_chain>
    c8fc:	c3 cf       	rjmp	.-122    	; 0xc884 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c8fe:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c902:	87 e0       	ldi	r24, 0x07	; 7
    c904:	e8 2e       	mov	r14, r24
    c906:	f1 2c       	mov	r15, r1
    c908:	f0 cf       	rjmp	.-32     	; 0xc8ea <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c90a:	0e 94 a3 6e 	call	0xdd46	; 0xdd46 <get_fattime>
    c90e:	2b 01       	movw	r4, r22
    c910:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    c912:	b5 01       	movw	r22, r10
    c914:	a4 01       	movw	r20, r8
    c916:	8d ad       	ldd	r24, Y+61	; 0x3d
    c918:	9e ad       	ldd	r25, Y+62	; 0x3e
    c91a:	0e 94 14 49 	call	0x9228	; 0x9228 <dir_clear>
    c91e:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    c920:	89 2b       	or	r24, r25
    c922:	19 f7       	brne	.-58     	; 0xc8ea <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    c924:	8d ad       	ldd	r24, Y+61	; 0x3d
    c926:	9e ad       	ldd	r25, Y+62	; 0x3e
    c928:	4b e0       	ldi	r20, 0x0B	; 11
    c92a:	50 e0       	ldi	r21, 0x00	; 0
    c92c:	60 e2       	ldi	r22, 0x20	; 32
    c92e:	70 e0       	ldi	r23, 0x00	; 0
    c930:	c5 96       	adiw	r24, 0x35	; 53
    c932:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <mem_set>
						fs->win[DIR_Name] = '.';
    c936:	8d ad       	ldd	r24, Y+61	; 0x3d
    c938:	9e ad       	ldd	r25, Y+62	; 0x3e
    c93a:	1e e2       	ldi	r17, 0x2E	; 46
    c93c:	fc 01       	movw	r30, r24
    c93e:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    c940:	e0 5c       	subi	r30, 0xC0	; 192
    c942:	ff 4f       	sbci	r31, 0xFF	; 255
    c944:	20 e1       	ldi	r18, 0x10	; 16
    c946:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    c948:	b3 01       	movw	r22, r6
    c94a:	a2 01       	movw	r20, r4
    c94c:	85 5b       	subi	r24, 0xB5	; 181
    c94e:	9f 4f       	sbci	r25, 0xFF	; 255
    c950:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <st_dword>
						st_clust(fs, fs->win, dcl);
    c954:	8d ad       	ldd	r24, Y+61	; 0x3d
    c956:	9e ad       	ldd	r25, Y+62	; 0x3e
    c958:	bc 01       	movw	r22, r24
    c95a:	6b 5c       	subi	r22, 0xCB	; 203
    c95c:	7f 4f       	sbci	r23, 0xFF	; 255
    c95e:	a5 01       	movw	r20, r10
    c960:	94 01       	movw	r18, r8
    c962:	0e 94 42 48 	call	0x9084	; 0x9084 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    c966:	8d ad       	ldd	r24, Y+61	; 0x3d
    c968:	9e ad       	ldd	r25, Y+62	; 0x3e
    c96a:	bc 01       	movw	r22, r24
    c96c:	6b 5c       	subi	r22, 0xCB	; 203
    c96e:	7f 4f       	sbci	r23, 0xFF	; 255
    c970:	40 e2       	ldi	r20, 0x20	; 32
    c972:	50 e0       	ldi	r21, 0x00	; 0
    c974:	8b 5a       	subi	r24, 0xAB	; 171
    c976:	9f 4f       	sbci	r25, 0xFF	; 255
    c978:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    c97c:	8d ad       	ldd	r24, Y+61	; 0x3d
    c97e:	9e ad       	ldd	r25, Y+62	; 0x3e
    c980:	fc 01       	movw	r30, r24
    c982:	ea 5a       	subi	r30, 0xAA	; 170
    c984:	ff 4f       	sbci	r31, 0xFF	; 255
    c986:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    c988:	2f 81       	ldd	r18, Y+7	; 0x07
    c98a:	38 85       	ldd	r19, Y+8	; 0x08
    c98c:	49 85       	ldd	r20, Y+9	; 0x09
    c98e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c990:	bc 01       	movw	r22, r24
    c992:	6b 5a       	subi	r22, 0xAB	; 171
    c994:	7f 4f       	sbci	r23, 0xFF	; 255
    c996:	0e 94 42 48 	call	0x9084	; 0x9084 <st_clust.isra.4>
						fs->wflag = 1;
    c99a:	ed ad       	ldd	r30, Y+61	; 0x3d
    c99c:	fe ad       	ldd	r31, Y+62	; 0x3e
    c99e:	81 e0       	ldi	r24, 0x01	; 1
    c9a0:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    c9a2:	ce 01       	movw	r24, r28
    c9a4:	01 96       	adiw	r24, 0x01	; 1
    c9a6:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <dir_register>
    c9aa:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    c9ac:	89 2b       	or	r24, r25
    c9ae:	09 f0       	breq	.+2      	; 0xc9b2 <f_mkdir+0x19e>
    c9b0:	9c cf       	rjmp	.-200    	; 0xc8ea <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    c9b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c9b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c9b6:	b3 01       	movw	r22, r6
    c9b8:	a2 01       	movw	r20, r4
    c9ba:	46 96       	adiw	r24, 0x16	; 22
    c9bc:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    c9c0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c9c2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c9c4:	a5 01       	movw	r20, r10
    c9c6:	94 01       	movw	r18, r8
    c9c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9cc:	0e 94 42 48 	call	0x9084	; 0x9084 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    c9d0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    c9d2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    c9d4:	80 e1       	ldi	r24, 0x10	; 16
    c9d6:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    c9d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9da:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9dc:	21 e0       	ldi	r18, 0x01	; 1
    c9de:	fc 01       	movw	r30, r24
    c9e0:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    c9e2:	0e 94 a2 48 	call	0x9144	; 0x9144 <sync_fs>
    c9e6:	7c 01       	movw	r14, r24
    c9e8:	4d cf       	rjmp	.-358    	; 0xc884 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c9ea:	c0 5c       	subi	r28, 0xC0	; 192
    c9ec:	df 4f       	sbci	r29, 0xFF	; 255
    c9ee:	e0 e1       	ldi	r30, 0x10	; 16
    c9f0:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x4>

0000c9f4 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    c9f4:	a2 e8       	ldi	r26, 0x82	; 130
    c9f6:	b0 e0       	ldi	r27, 0x00	; 0
    c9f8:	e0 e0       	ldi	r30, 0x00	; 0
    c9fa:	f5 e6       	ldi	r31, 0x65	; 101
    c9fc:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x12>
    ca00:	c1 58       	subi	r28, 0x81	; 129
    ca02:	df 4f       	sbci	r29, 0xFF	; 255
    ca04:	99 83       	std	Y+1, r25	; 0x01
    ca06:	88 83       	st	Y, r24
    ca08:	cf 57       	subi	r28, 0x7F	; 127
    ca0a:	d0 40       	sbci	r29, 0x00	; 0
    ca0c:	cf 57       	subi	r28, 0x7F	; 127
    ca0e:	df 4f       	sbci	r29, 0xFF	; 255
    ca10:	79 83       	std	Y+1, r23	; 0x01
    ca12:	68 83       	st	Y, r22
    ca14:	c1 58       	subi	r28, 0x81	; 129
    ca16:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    ca18:	ce 01       	movw	r24, r28
    ca1a:	8f 57       	subi	r24, 0x7F	; 127
    ca1c:	9f 4f       	sbci	r25, 0xFF	; 255
    ca1e:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    ca22:	42 e0       	ldi	r20, 0x02	; 2
    ca24:	be 01       	movw	r22, r28
    ca26:	63 58       	subi	r22, 0x83	; 131
    ca28:	7f 4f       	sbci	r23, 0xFF	; 255
    ca2a:	ce 01       	movw	r24, r28
    ca2c:	81 58       	subi	r24, 0x81	; 129
    ca2e:	9f 4f       	sbci	r25, 0xFF	; 255
    ca30:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
	if (res == FR_OK) {
    ca34:	00 97       	sbiw	r24, 0x00	; 0
    ca36:	09 f0       	breq	.+2      	; 0xca3a <f_rename+0x46>
    ca38:	ed c0       	rjmp	.+474    	; 0xcc14 <f_rename+0x220>
		djo.obj.fs = fs;
    ca3a:	ef 96       	adiw	r28, 0x3f	; 63
    ca3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca40:	ef 97       	sbiw	r28, 0x3f	; 63
    ca42:	98 ab       	std	Y+48, r25	; 0x30
    ca44:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ca46:	80 e0       	ldi	r24, 0x00	; 0
    ca48:	92 e0       	ldi	r25, 0x02	; 2
    ca4a:	0c d2       	rcall	.+1048   	; 0xce64 <ff_memalloc>
    ca4c:	6c 01       	movw	r12, r24
    ca4e:	00 97       	sbiw	r24, 0x00	; 0
    ca50:	f1 f0       	breq	.+60     	; 0xca8e <f_rename+0x9a>
    ca52:	ef 96       	adiw	r28, 0x3f	; 63
    ca54:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca56:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca58:	ef 97       	sbiw	r28, 0x3f	; 63
    ca5a:	94 87       	std	Z+12, r25	; 0x0c
    ca5c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ca5e:	c1 58       	subi	r28, 0x81	; 129
    ca60:	df 4f       	sbci	r29, 0xFF	; 255
    ca62:	68 81       	ld	r22, Y
    ca64:	79 81       	ldd	r23, Y+1	; 0x01
    ca66:	cf 57       	subi	r28, 0x7F	; 127
    ca68:	d0 40       	sbci	r29, 0x00	; 0
    ca6a:	ce 01       	movw	r24, r28
    ca6c:	8f 96       	adiw	r24, 0x2f	; 47
    ca6e:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    ca72:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ca74:	89 2b       	or	r24, r25
    ca76:	39 f4       	brne	.+14     	; 0xca86 <f_rename+0x92>
    ca78:	67 96       	adiw	r28, 0x17	; 23
    ca7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca7c:	67 97       	sbiw	r28, 0x17	; 23
    ca7e:	80 7a       	andi	r24, 0xA0	; 160
    ca80:	49 f0       	breq	.+18     	; 0xca94 <f_rename+0xa0>
    ca82:	06 e0       	ldi	r16, 0x06	; 6
    ca84:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    ca86:	c6 01       	movw	r24, r12
    ca88:	f0 d1       	rcall	.+992    	; 0xce6a <ff_memfree>
    ca8a:	c8 01       	movw	r24, r16
    ca8c:	c3 c0       	rjmp	.+390    	; 0xcc14 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca8e:	81 e1       	ldi	r24, 0x11	; 17
    ca90:	90 e0       	ldi	r25, 0x00	; 0
    ca92:	c0 c0       	rjmp	.+384    	; 0xcc14 <f_rename+0x220>
    ca94:	2b 96       	adiw	r28, 0x0b	; 11
    ca96:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca98:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca9a:	2b 97       	sbiw	r28, 0x0b	; 11
    ca9c:	40 e2       	ldi	r20, 0x20	; 32
    ca9e:	50 e0       	ldi	r21, 0x00	; 0
    caa0:	ce 01       	movw	r24, r28
    caa2:	83 5a       	subi	r24, 0xA3	; 163
    caa4:	9f 4f       	sbci	r25, 0xFF	; 255
    caa6:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
    caaa:	4e e2       	ldi	r20, 0x2E	; 46
    caac:	50 e0       	ldi	r21, 0x00	; 0
    caae:	be 01       	movw	r22, r28
    cab0:	61 5d       	subi	r22, 0xD1	; 209
    cab2:	7f 4f       	sbci	r23, 0xFF	; 255
    cab4:	ce 01       	movw	r24, r28
    cab6:	01 96       	adiw	r24, 0x01	; 1
    cab8:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cabc:	cf 57       	subi	r28, 0x7F	; 127
    cabe:	df 4f       	sbci	r29, 0xFF	; 255
    cac0:	68 81       	ld	r22, Y
    cac2:	79 81       	ldd	r23, Y+1	; 0x01
    cac4:	c1 58       	subi	r28, 0x81	; 129
    cac6:	d0 40       	sbci	r29, 0x00	; 0
    cac8:	ce 01       	movw	r24, r28
    caca:	01 96       	adiw	r24, 0x01	; 1
    cacc:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    cad0:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cad2:	89 2b       	or	r24, r25
    cad4:	f9 f4       	brne	.+62     	; 0xcb14 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cad6:	4f 81       	ldd	r20, Y+7	; 0x07
    cad8:	58 85       	ldd	r21, Y+8	; 0x08
    cada:	69 85       	ldd	r22, Y+9	; 0x09
    cadc:	7a 85       	ldd	r23, Y+10	; 0x0a
    cade:	8d a9       	ldd	r24, Y+53	; 0x35
    cae0:	9e a9       	ldd	r25, Y+54	; 0x36
    cae2:	af a9       	ldd	r26, Y+55	; 0x37
    cae4:	b8 ad       	ldd	r27, Y+56	; 0x38
    cae6:	48 17       	cp	r20, r24
    cae8:	59 07       	cpc	r21, r25
    caea:	6a 07       	cpc	r22, r26
    caec:	7b 07       	cpc	r23, r27
    caee:	09 f0       	breq	.+2      	; 0xcaf2 <f_rename+0xfe>
    caf0:	8b c0       	rjmp	.+278    	; 0xcc08 <f_rename+0x214>
    caf2:	4f 85       	ldd	r20, Y+15	; 0x0f
    caf4:	58 89       	ldd	r21, Y+16	; 0x10
    caf6:	69 89       	ldd	r22, Y+17	; 0x11
    caf8:	7a 89       	ldd	r23, Y+18	; 0x12
    cafa:	21 96       	adiw	r28, 0x01	; 1
    cafc:	8c ad       	ldd	r24, Y+60	; 0x3c
    cafe:	9d ad       	ldd	r25, Y+61	; 0x3d
    cb00:	ae ad       	ldd	r26, Y+62	; 0x3e
    cb02:	bf ad       	ldd	r27, Y+63	; 0x3f
    cb04:	21 97       	sbiw	r28, 0x01	; 1
    cb06:	48 17       	cp	r20, r24
    cb08:	59 07       	cpc	r21, r25
    cb0a:	6a 07       	cpc	r22, r26
    cb0c:	7b 07       	cpc	r23, r27
    cb0e:	09 f0       	breq	.+2      	; 0xcb12 <f_rename+0x11e>
    cb10:	7b c0       	rjmp	.+246    	; 0xcc08 <f_rename+0x214>
    cb12:	04 c0       	rjmp	.+8      	; 0xcb1c <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cb14:	04 30       	cpi	r16, 0x04	; 4
    cb16:	11 05       	cpc	r17, r1
    cb18:	09 f0       	breq	.+2      	; 0xcb1c <f_rename+0x128>
    cb1a:	b5 cf       	rjmp	.-150    	; 0xca86 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cb1c:	ce 01       	movw	r24, r28
    cb1e:	01 96       	adiw	r24, 0x01	; 1
    cb20:	0e 94 f6 53 	call	0xa7ec	; 0xa7ec <dir_register>
    cb24:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cb26:	89 2b       	or	r24, r25
    cb28:	09 f0       	breq	.+2      	; 0xcb2c <f_rename+0x138>
    cb2a:	ad cf       	rjmp	.-166    	; 0xca86 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cb2c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cb2e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cb30:	6d e5       	ldi	r22, 0x5D	; 93
    cb32:	70 e0       	ldi	r23, 0x00	; 0
    cb34:	6c 0f       	add	r22, r28
    cb36:	7d 1f       	adc	r23, r29
    cb38:	63 5f       	subi	r22, 0xF3	; 243
    cb3a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb3c:	43 e1       	ldi	r20, 0x13	; 19
    cb3e:	50 e0       	ldi	r21, 0x00	; 0
    cb40:	c8 01       	movw	r24, r16
    cb42:	0d 96       	adiw	r24, 0x0d	; 13
    cb44:	0e 94 22 48 	call	0x9044	; 0x9044 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cb48:	a9 96       	adiw	r28, 0x29	; 41
    cb4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb4c:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cb4e:	84 ff       	sbrs	r24, 4
    cb50:	80 62       	ori	r24, 0x20	; 32
    cb52:	f8 01       	movw	r30, r16
    cb54:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cb56:	ef 96       	adiw	r28, 0x3f	; 63
    cb58:	ee ac       	ldd	r14, Y+62	; 0x3e
    cb5a:	ff ac       	ldd	r15, Y+63	; 0x3f
    cb5c:	ef 97       	sbiw	r28, 0x3f	; 63
    cb5e:	bb 24       	eor	r11, r11
    cb60:	b3 94       	inc	r11
    cb62:	f7 01       	movw	r30, r14
    cb64:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cb66:	f8 01       	movw	r30, r16
    cb68:	83 85       	ldd	r24, Z+11	; 0x0b
    cb6a:	84 ff       	sbrs	r24, 4
    cb6c:	3d c0       	rjmp	.+122    	; 0xcbe8 <f_rename+0x1f4>
    cb6e:	4d a9       	ldd	r20, Y+53	; 0x35
    cb70:	5e a9       	ldd	r21, Y+54	; 0x36
    cb72:	6f a9       	ldd	r22, Y+55	; 0x37
    cb74:	78 ad       	ldd	r23, Y+56	; 0x38
    cb76:	8f 81       	ldd	r24, Y+7	; 0x07
    cb78:	98 85       	ldd	r25, Y+8	; 0x08
    cb7a:	a9 85       	ldd	r26, Y+9	; 0x09
    cb7c:	ba 85       	ldd	r27, Y+10	; 0x0a
    cb7e:	48 17       	cp	r20, r24
    cb80:	59 07       	cpc	r21, r25
    cb82:	6a 07       	cpc	r22, r26
    cb84:	7b 07       	cpc	r23, r27
    cb86:	81 f1       	breq	.+96     	; 0xcbe8 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cb88:	b8 01       	movw	r22, r16
    cb8a:	f7 01       	movw	r30, r14
    cb8c:	80 81       	ld	r24, Z
    cb8e:	0e 94 2d 48 	call	0x905a	; 0x905a <ld_clust.isra.3>
    cb92:	ab 01       	movw	r20, r22
    cb94:	bc 01       	movw	r22, r24
    cb96:	c7 01       	movw	r24, r14
    cb98:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <clst2sect>
    cb9c:	ab 01       	movw	r20, r22
    cb9e:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cba0:	41 15       	cp	r20, r1
    cba2:	51 05       	cpc	r21, r1
    cba4:	61 05       	cpc	r22, r1
    cba6:	71 05       	cpc	r23, r1
    cba8:	91 f1       	breq	.+100    	; 0xcc0e <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cbaa:	c7 01       	movw	r24, r14
    cbac:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    cbb0:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cbb2:	89 2b       	or	r24, r25
    cbb4:	09 f0       	breq	.+2      	; 0xcbb8 <f_rename+0x1c4>
    cbb6:	67 cf       	rjmp	.-306    	; 0xca86 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cbb8:	ef 96       	adiw	r28, 0x3f	; 63
    cbba:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbbe:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cbc0:	fc 01       	movw	r30, r24
    cbc2:	ea 5a       	subi	r30, 0xAA	; 170
    cbc4:	ff 4f       	sbci	r31, 0xFF	; 255
    cbc6:	20 81       	ld	r18, Z
    cbc8:	2e 32       	cpi	r18, 0x2E	; 46
    cbca:	71 f4       	brne	.+28     	; 0xcbe8 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cbcc:	2f 81       	ldd	r18, Y+7	; 0x07
    cbce:	38 85       	ldd	r19, Y+8	; 0x08
    cbd0:	49 85       	ldd	r20, Y+9	; 0x09
    cbd2:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cbd4:	bc 01       	movw	r22, r24
    cbd6:	6b 5a       	subi	r22, 0xAB	; 171
    cbd8:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cbda:	0e 94 42 48 	call	0x9084	; 0x9084 <st_clust.isra.4>
									fs->wflag = 1;
    cbde:	ef 96       	adiw	r28, 0x3f	; 63
    cbe0:	ee ad       	ldd	r30, Y+62	; 0x3e
    cbe2:	ff ad       	ldd	r31, Y+63	; 0x3f
    cbe4:	ef 97       	sbiw	r28, 0x3f	; 63
    cbe6:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cbe8:	ce 01       	movw	r24, r28
    cbea:	8f 96       	adiw	r24, 0x2f	; 47
    cbec:	0e 94 a0 52 	call	0xa540	; 0xa540 <dir_remove>
    cbf0:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cbf2:	89 2b       	or	r24, r25
    cbf4:	09 f0       	breq	.+2      	; 0xcbf8 <f_rename+0x204>
    cbf6:	47 cf       	rjmp	.-370    	; 0xca86 <f_rename+0x92>
					res = sync_fs(fs);
    cbf8:	ef 96       	adiw	r28, 0x3f	; 63
    cbfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbfe:	ef 97       	sbiw	r28, 0x3f	; 63
    cc00:	0e 94 a2 48 	call	0x9144	; 0x9144 <sync_fs>
    cc04:	8c 01       	movw	r16, r24
    cc06:	3f cf       	rjmp	.-386    	; 0xca86 <f_rename+0x92>
    cc08:	08 e0       	ldi	r16, 0x08	; 8
    cc0a:	10 e0       	ldi	r17, 0x00	; 0
    cc0c:	3c cf       	rjmp	.-392    	; 0xca86 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cc0e:	02 e0       	ldi	r16, 0x02	; 2
    cc10:	10 e0       	ldi	r17, 0x00	; 0
    cc12:	39 cf       	rjmp	.-398    	; 0xca86 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cc14:	ce 57       	subi	r28, 0x7E	; 126
    cc16:	df 4f       	sbci	r29, 0xFF	; 255
    cc18:	e9 e0       	ldi	r30, 0x09	; 9
    cc1a:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x12>

0000cc1e <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cc1e:	a2 e3       	ldi	r26, 0x32	; 50
    cc20:	b0 e0       	ldi	r27, 0x00	; 0
    cc22:	e5 e1       	ldi	r30, 0x15	; 21
    cc24:	f6 e6       	ldi	r31, 0x66	; 102
    cc26:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    cc2a:	9a ab       	std	Y+50, r25	; 0x32
    cc2c:	89 ab       	std	Y+49, r24	; 0x31
    cc2e:	e6 2e       	mov	r14, r22
    cc30:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cc32:	42 e0       	ldi	r20, 0x02	; 2
    cc34:	be 01       	movw	r22, r28
    cc36:	61 5d       	subi	r22, 0xD1	; 209
    cc38:	7f 4f       	sbci	r23, 0xFF	; 255
    cc3a:	ce 01       	movw	r24, r28
    cc3c:	c1 96       	adiw	r24, 0x31	; 49
    cc3e:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
	if (res == FR_OK) {
    cc42:	00 97       	sbiw	r24, 0x00	; 0
    cc44:	a9 f5       	brne	.+106    	; 0xccb0 <f_chmod+0x92>
		dj.obj.fs = fs;
    cc46:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc48:	98 a9       	ldd	r25, Y+48	; 0x30
    cc4a:	9a 83       	std	Y+2, r25	; 0x02
    cc4c:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cc4e:	80 e0       	ldi	r24, 0x00	; 0
    cc50:	92 e0       	ldi	r25, 0x02	; 2
    cc52:	08 d1       	rcall	.+528    	; 0xce64 <ff_memalloc>
    cc54:	6c 01       	movw	r12, r24
    cc56:	00 97       	sbiw	r24, 0x00	; 0
    cc58:	b1 f0       	breq	.+44     	; 0xcc86 <f_chmod+0x68>
    cc5a:	ef a5       	ldd	r30, Y+47	; 0x2f
    cc5c:	f8 a9       	ldd	r31, Y+48	; 0x30
    cc5e:	94 87       	std	Z+12, r25	; 0x0c
    cc60:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cc62:	69 a9       	ldd	r22, Y+49	; 0x31
    cc64:	7a a9       	ldd	r23, Y+50	; 0x32
    cc66:	ce 01       	movw	r24, r28
    cc68:	01 96       	adiw	r24, 0x01	; 1
    cc6a:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    cc6e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cc70:	89 2b       	or	r24, r25
    cc72:	29 f4       	brne	.+10     	; 0xcc7e <f_chmod+0x60>
    cc74:	88 a5       	ldd	r24, Y+40	; 0x28
    cc76:	80 7a       	andi	r24, 0xA0	; 160
    cc78:	49 f0       	breq	.+18     	; 0xcc8c <f_chmod+0x6e>
    cc7a:	06 e0       	ldi	r16, 0x06	; 6
    cc7c:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cc7e:	c6 01       	movw	r24, r12
    cc80:	f4 d0       	rcall	.+488    	; 0xce6a <ff_memfree>
    cc82:	c8 01       	movw	r24, r16
    cc84:	15 c0       	rjmp	.+42     	; 0xccb0 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc86:	81 e1       	ldi	r24, 0x11	; 17
    cc88:	90 e0       	ldi	r25, 0x00	; 0
    cc8a:	12 c0       	rjmp	.+36     	; 0xccb0 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cc8c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc8e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc90:	83 85       	ldd	r24, Z+11	; 0x0b
    cc92:	6e 2d       	mov	r22, r14
    cc94:	68 27       	eor	r22, r24
    cc96:	6f 21       	and	r22, r15
    cc98:	67 72       	andi	r22, 0x27	; 39
    cc9a:	68 27       	eor	r22, r24
    cc9c:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cc9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cca0:	98 a9       	ldd	r25, Y+48	; 0x30
    cca2:	21 e0       	ldi	r18, 0x01	; 1
    cca4:	fc 01       	movw	r30, r24
    cca6:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cca8:	0e 94 a2 48 	call	0x9144	; 0x9144 <sync_fs>
    ccac:	8c 01       	movw	r16, r24
    ccae:	e7 cf       	rjmp	.-50     	; 0xcc7e <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ccb0:	e2 96       	adiw	r28, 0x32	; 50
    ccb2:	e8 e0       	ldi	r30, 0x08	; 8
    ccb4:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000ccb8 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    ccb8:	a2 e3       	ldi	r26, 0x32	; 50
    ccba:	b0 e0       	ldi	r27, 0x00	; 0
    ccbc:	e2 e6       	ldi	r30, 0x62	; 98
    ccbe:	f6 e6       	ldi	r31, 0x66	; 102
    ccc0:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    ccc4:	9a ab       	std	Y+50, r25	; 0x32
    ccc6:	89 ab       	std	Y+49, r24	; 0x31
    ccc8:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ccca:	42 e0       	ldi	r20, 0x02	; 2
    cccc:	be 01       	movw	r22, r28
    ccce:	61 5d       	subi	r22, 0xD1	; 209
    ccd0:	7f 4f       	sbci	r23, 0xFF	; 255
    ccd2:	ce 01       	movw	r24, r28
    ccd4:	c1 96       	adiw	r24, 0x31	; 49
    ccd6:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
	if (res == FR_OK) {
    ccda:	00 97       	sbiw	r24, 0x00	; 0
    ccdc:	09 f0       	breq	.+2      	; 0xcce0 <f_utime+0x28>
    ccde:	41 c0       	rjmp	.+130    	; 0xcd62 <f_utime+0xaa>
		dj.obj.fs = fs;
    cce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    cce2:	98 a9       	ldd	r25, Y+48	; 0x30
    cce4:	9a 83       	std	Y+2, r25	; 0x02
    cce6:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cce8:	80 e0       	ldi	r24, 0x00	; 0
    ccea:	92 e0       	ldi	r25, 0x02	; 2
    ccec:	bb d0       	rcall	.+374    	; 0xce64 <ff_memalloc>
    ccee:	7c 01       	movw	r14, r24
    ccf0:	00 97       	sbiw	r24, 0x00	; 0
    ccf2:	b1 f0       	breq	.+44     	; 0xcd20 <f_utime+0x68>
    ccf4:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccf6:	f8 a9       	ldd	r31, Y+48	; 0x30
    ccf8:	94 87       	std	Z+12, r25	; 0x0c
    ccfa:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ccfc:	69 a9       	ldd	r22, Y+49	; 0x31
    ccfe:	7a a9       	ldd	r23, Y+50	; 0x32
    cd00:	ce 01       	movw	r24, r28
    cd02:	01 96       	adiw	r24, 0x01	; 1
    cd04:	0e 94 84 55 	call	0xab08	; 0xab08 <follow_path>
    cd08:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cd0a:	89 2b       	or	r24, r25
    cd0c:	29 f4       	brne	.+10     	; 0xcd18 <f_utime+0x60>
    cd0e:	88 a5       	ldd	r24, Y+40	; 0x28
    cd10:	80 7a       	andi	r24, 0xA0	; 160
    cd12:	49 f0       	breq	.+18     	; 0xcd26 <f_utime+0x6e>
    cd14:	06 e0       	ldi	r16, 0x06	; 6
    cd16:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd18:	c7 01       	movw	r24, r14
    cd1a:	a7 d0       	rcall	.+334    	; 0xce6a <ff_memfree>
    cd1c:	c8 01       	movw	r24, r16
    cd1e:	21 c0       	rjmp	.+66     	; 0xcd62 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd20:	81 e1       	ldi	r24, 0x11	; 17
    cd22:	90 e0       	ldi	r25, 0x00	; 0
    cd24:	1e c0       	rjmp	.+60     	; 0xcd62 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cd26:	f6 01       	movw	r30, r12
    cd28:	44 81       	ldd	r20, Z+4	; 0x04
    cd2a:	55 81       	ldd	r21, Z+5	; 0x05
    cd2c:	60 e0       	ldi	r22, 0x00	; 0
    cd2e:	70 e0       	ldi	r23, 0x00	; 0
    cd30:	ba 01       	movw	r22, r20
    cd32:	55 27       	eor	r21, r21
    cd34:	44 27       	eor	r20, r20
    cd36:	86 81       	ldd	r24, Z+6	; 0x06
    cd38:	97 81       	ldd	r25, Z+7	; 0x07
    cd3a:	a0 e0       	ldi	r26, 0x00	; 0
    cd3c:	b0 e0       	ldi	r27, 0x00	; 0
    cd3e:	48 2b       	or	r20, r24
    cd40:	59 2b       	or	r21, r25
    cd42:	6a 2b       	or	r22, r26
    cd44:	7b 2b       	or	r23, r27
    cd46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd4a:	46 96       	adiw	r24, 0x16	; 22
    cd4c:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <st_dword>
				fs->wflag = 1;
    cd50:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd52:	98 a9       	ldd	r25, Y+48	; 0x30
    cd54:	21 e0       	ldi	r18, 0x01	; 1
    cd56:	fc 01       	movw	r30, r24
    cd58:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cd5a:	0e 94 a2 48 	call	0x9144	; 0x9144 <sync_fs>
    cd5e:	8c 01       	movw	r16, r24
    cd60:	db cf       	rjmp	.-74     	; 0xcd18 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd62:	e2 96       	adiw	r28, 0x32	; 50
    cd64:	e8 e0       	ldi	r30, 0x08	; 8
    cd66:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000cd6a <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    cd6a:	a2 e3       	ldi	r26, 0x32	; 50
    cd6c:	b0 e0       	ldi	r27, 0x00	; 0
    cd6e:	eb eb       	ldi	r30, 0xBB	; 187
    cd70:	f6 e6       	ldi	r31, 0x66	; 102
    cd72:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    cd76:	9a ab       	std	Y+50, r25	; 0x32
    cd78:	89 ab       	std	Y+49, r24	; 0x31
    cd7a:	7b 01       	movw	r14, r22
    cd7c:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cd7e:	40 e0       	ldi	r20, 0x00	; 0
    cd80:	be 01       	movw	r22, r28
    cd82:	61 5d       	subi	r22, 0xD1	; 209
    cd84:	7f 4f       	sbci	r23, 0xFF	; 255
    cd86:	ce 01       	movw	r24, r28
    cd88:	c1 96       	adiw	r24, 0x31	; 49
    cd8a:	0e 94 37 4a 	call	0x946e	; 0x946e <mount_volume>
    cd8e:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cd90:	89 2b       	or	r24, r25
    cd92:	09 f0       	breq	.+2      	; 0xcd96 <f_getlabel+0x2c>
    cd94:	62 c0       	rjmp	.+196    	; 0xce5a <f_getlabel+0xf0>
    cd96:	e1 14       	cp	r14, r1
    cd98:	f1 04       	cpc	r15, r1
    cd9a:	a1 f1       	breq	.+104    	; 0xce04 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cd9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd9e:	98 a9       	ldd	r25, Y+48	; 0x30
    cda0:	9a 83       	std	Y+2, r25	; 0x02
    cda2:	89 83       	std	Y+1, r24	; 0x01
    cda4:	1f 82       	std	Y+7, r1	; 0x07
    cda6:	18 86       	std	Y+8, r1	; 0x08
    cda8:	19 86       	std	Y+9, r1	; 0x09
    cdaa:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cdac:	40 e0       	ldi	r20, 0x00	; 0
    cdae:	50 e0       	ldi	r21, 0x00	; 0
    cdb0:	ba 01       	movw	r22, r20
    cdb2:	ce 01       	movw	r24, r28
    cdb4:	01 96       	adiw	r24, 0x01	; 1
    cdb6:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <dir_sdi>
		if (res == FR_OK) {
    cdba:	00 97       	sbiw	r24, 0x00	; 0
    cdbc:	f1 f4       	brne	.+60     	; 0xcdfa <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cdbe:	61 e0       	ldi	r22, 0x01	; 1
    cdc0:	70 e0       	ldi	r23, 0x00	; 0
    cdc2:	ce 01       	movw	r24, r28
    cdc4:	01 96       	adiw	r24, 0x01	; 1
    cdc6:	0e 94 d7 51 	call	0xa3ae	; 0xa3ae <dir_read>
		 	if (res == FR_OK) {
    cdca:	00 97       	sbiw	r24, 0x00	; 0
    cdcc:	b1 f4       	brne	.+44     	; 0xcdfa <f_getlabel+0x90>
    cdce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cdd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cdd2:	f7 01       	movw	r30, r14
    cdd4:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cdd6:	a7 01       	movw	r20, r14
    cdd8:	dc 01       	movw	r26, r24
    cdda:	2d 91       	ld	r18, X+
    cddc:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    cdde:	da 01       	movw	r26, r20
    cde0:	2d 93       	st	X+, r18
    cde2:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cde4:	ae 17       	cp	r26, r30
    cde6:	bf 07       	cpc	r27, r31
    cde8:	b9 f7       	brne	.-18     	; 0xcdd8 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cdea:	10 82       	st	Z, r1
						if (di == 0) break;
    cdec:	ee 16       	cp	r14, r30
    cdee:	ff 06       	cpc	r15, r31
    cdf0:	49 f0       	breq	.+18     	; 0xce04 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    cdf2:	82 91       	ld	r24, -Z
    cdf4:	80 32       	cpi	r24, 0x20	; 32
    cdf6:	c9 f3       	breq	.-14     	; 0xcdea <f_getlabel+0x80>
    cdf8:	05 c0       	rjmp	.+10     	; 0xce04 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cdfa:	84 30       	cpi	r24, 0x04	; 4
    cdfc:	91 05       	cpc	r25, r1
    cdfe:	61 f5       	brne	.+88     	; 0xce58 <f_getlabel+0xee>
			label[0] = 0;
    ce00:	f7 01       	movw	r30, r14
    ce02:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    ce04:	c1 14       	cp	r12, r1
    ce06:	d1 04       	cpc	r13, r1
    ce08:	41 f1       	breq	.+80     	; 0xce5a <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    ce0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce0c:	98 a9       	ldd	r25, Y+48	; 0x30
    ce0e:	fc 01       	movw	r30, r24
    ce10:	41 a1       	ldd	r20, Z+33	; 0x21
    ce12:	52 a1       	ldd	r21, Z+34	; 0x22
    ce14:	63 a1       	ldd	r22, Z+35	; 0x23
    ce16:	74 a1       	ldd	r23, Z+36	; 0x24
    ce18:	0e 94 bc 49 	call	0x9378	; 0x9378 <move_window>
    ce1c:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    ce1e:	89 2b       	or	r24, r25
    ce20:	e1 f4       	brne	.+56     	; 0xce5a <f_getlabel+0xf0>
			switch (fs->fs_type) {
    ce22:	ef a5       	ldd	r30, Y+47	; 0x2f
    ce24:	f8 a9       	ldd	r31, Y+48	; 0x30
    ce26:	80 81       	ld	r24, Z
    ce28:	83 30       	cpi	r24, 0x03	; 3
    ce2a:	29 f0       	breq	.+10     	; 0xce36 <f_getlabel+0xcc>
    ce2c:	84 30       	cpi	r24, 0x04	; 4
    ce2e:	31 f0       	breq	.+12     	; 0xce3c <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    ce30:	87 e2       	ldi	r24, 0x27	; 39
    ce32:	90 e0       	ldi	r25, 0x00	; 0
    ce34:	05 c0       	rjmp	.+10     	; 0xce40 <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    ce36:	83 e4       	ldi	r24, 0x43	; 67
    ce38:	90 e0       	ldi	r25, 0x00	; 0
    ce3a:	02 c0       	rjmp	.+4      	; 0xce40 <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    ce3c:	84 e6       	ldi	r24, 0x64	; 100
    ce3e:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    ce40:	f5 96       	adiw	r30, 0x35	; 53
    ce42:	8e 0f       	add	r24, r30
    ce44:	9f 1f       	adc	r25, r31
    ce46:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_dword>
    ce4a:	d6 01       	movw	r26, r12
    ce4c:	6d 93       	st	X+, r22
    ce4e:	7d 93       	st	X+, r23
    ce50:	8d 93       	st	X+, r24
    ce52:	9c 93       	st	X, r25
    ce54:	13 97       	sbiw	r26, 0x03	; 3
    ce56:	01 c0       	rjmp	.+2      	; 0xce5a <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    ce58:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    ce5a:	c8 01       	movw	r24, r16
    ce5c:	e2 96       	adiw	r28, 0x32	; 50
    ce5e:	e8 e0       	ldi	r30, 0x08	; 8
    ce60:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000ce64 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    ce64:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <safemalloc>
}
    ce68:	08 95       	ret

0000ce6a <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    ce6a:	0c 94 4c 26 	jmp	0x4c98	; 0x4c98 <safefree>
    ce6e:	08 95       	ret

0000ce70 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    ce70:	cf 92       	push	r12
    ce72:	df 92       	push	r13
    ce74:	ef 92       	push	r14
    ce76:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    ce78:	60 38       	cpi	r22, 0x80	; 128
    ce7a:	71 05       	cpc	r23, r1
    ce7c:	81 05       	cpc	r24, r1
    ce7e:	91 05       	cpc	r25, r1
    ce80:	10 f4       	brcc	.+4      	; 0xce86 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    ce82:	cb 01       	movw	r24, r22
    ce84:	23 c0       	rjmp	.+70     	; 0xcecc <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    ce86:	61 15       	cp	r22, r1
    ce88:	71 05       	cpc	r23, r1
    ce8a:	21 e0       	ldi	r18, 0x01	; 1
    ce8c:	82 07       	cpc	r24, r18
    ce8e:	91 05       	cpc	r25, r1
    ce90:	d8 f4       	brcc	.+54     	; 0xcec8 <ff_uni2oem+0x58>
    ce92:	45 3b       	cpi	r20, 0xB5	; 181
    ce94:	51 40       	sbci	r21, 0x01	; 1
    ce96:	c1 f4       	brne	.+48     	; 0xcec8 <ff_uni2oem+0x58>
    ce98:	e6 ea       	ldi	r30, 0xA6	; 166
    ce9a:	f7 e0       	ldi	r31, 0x07	; 7
    ce9c:	20 e0       	ldi	r18, 0x00	; 0
    ce9e:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    cea0:	c1 90       	ld	r12, Z+
    cea2:	d1 90       	ld	r13, Z+
    cea4:	e1 2c       	mov	r14, r1
    cea6:	f1 2c       	mov	r15, r1
    cea8:	6c 15       	cp	r22, r12
    ceaa:	7d 05       	cpc	r23, r13
    ceac:	8e 05       	cpc	r24, r14
    ceae:	9f 05       	cpc	r25, r15
    ceb0:	29 f0       	breq	.+10     	; 0xcebc <ff_uni2oem+0x4c>
    ceb2:	2f 5f       	subi	r18, 0xFF	; 255
    ceb4:	3f 4f       	sbci	r19, 0xFF	; 255
    ceb6:	20 38       	cpi	r18, 0x80	; 128
    ceb8:	31 05       	cpc	r19, r1
    ceba:	91 f7       	brne	.-28     	; 0xcea0 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    cebc:	b9 01       	movw	r22, r18
    cebe:	60 58       	subi	r22, 0x80	; 128
    cec0:	7f 4f       	sbci	r23, 0xFF	; 255
    cec2:	cb 01       	movw	r24, r22
    cec4:	99 27       	eor	r25, r25
    cec6:	02 c0       	rjmp	.+4      	; 0xcecc <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cec8:	80 e0       	ldi	r24, 0x00	; 0
    ceca:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    cecc:	ff 90       	pop	r15
    cece:	ef 90       	pop	r14
    ced0:	df 90       	pop	r13
    ced2:	cf 90       	pop	r12
    ced4:	08 95       	ret

0000ced6 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    ced6:	80 38       	cpi	r24, 0x80	; 128
    ced8:	91 05       	cpc	r25, r1
    ceda:	88 f0       	brcs	.+34     	; 0xcefe <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    cedc:	65 3b       	cpi	r22, 0xB5	; 181
    cede:	71 40       	sbci	r23, 0x01	; 1
    cee0:	61 f4       	brne	.+24     	; 0xcefa <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    cee2:	8f 3f       	cpi	r24, 0xFF	; 255
    cee4:	91 05       	cpc	r25, r1
    cee6:	09 f0       	breq	.+2      	; 0xceea <ff_oem2uni+0x14>
    cee8:	40 f4       	brcc	.+16     	; 0xcefa <ff_oem2uni+0x24>
    ceea:	88 0f       	add	r24, r24
    ceec:	99 1f       	adc	r25, r25
    ceee:	fc 01       	movw	r30, r24
    cef0:	ea 55       	subi	r30, 0x5A	; 90
    cef2:	f9 4f       	sbci	r31, 0xF9	; 249
    cef4:	80 81       	ld	r24, Z
    cef6:	91 81       	ldd	r25, Z+1	; 0x01
    cef8:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cefa:	80 e0       	ldi	r24, 0x00	; 0
    cefc:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    cefe:	08 95       	ret

0000cf00 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    cf00:	61 15       	cp	r22, r1
    cf02:	71 05       	cpc	r23, r1
    cf04:	21 e0       	ldi	r18, 0x01	; 1
    cf06:	82 07       	cpc	r24, r18
    cf08:	91 05       	cpc	r25, r1
    cf0a:	08 f0       	brcs	.+2      	; 0xcf0e <ff_wtoupper+0xe>
    cf0c:	5a c0       	rjmp	.+180    	; 0xcfc2 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    cf0e:	61 15       	cp	r22, r1
    cf10:	80 e1       	ldi	r24, 0x10	; 16
    cf12:	78 07       	cpc	r23, r24
    cf14:	18 f0       	brcs	.+6      	; 0xcf1c <ff_wtoupper+0x1c>
    cf16:	a8 ef       	ldi	r26, 0xF8	; 248
    cf18:	b4 e0       	ldi	r27, 0x04	; 4
    cf1a:	02 c0       	rjmp	.+4      	; 0xcf20 <ff_wtoupper+0x20>
    cf1c:	a4 eb       	ldi	r26, 0xB4	; 180
    cf1e:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    cf20:	2d 91       	ld	r18, X+
    cf22:	3c 91       	ld	r19, X
    cf24:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    cf26:	21 15       	cp	r18, r1
    cf28:	31 05       	cpc	r19, r1
    cf2a:	09 f4       	brne	.+2      	; 0xcf2e <ff_wtoupper+0x2e>
    cf2c:	48 c0       	rjmp	.+144    	; 0xcfbe <ff_wtoupper+0xbe>
    cf2e:	62 17       	cp	r22, r18
    cf30:	73 07       	cpc	r23, r19
    cf32:	08 f4       	brcc	.+2      	; 0xcf36 <ff_wtoupper+0x36>
    cf34:	44 c0       	rjmp	.+136    	; 0xcfbe <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    cf36:	14 96       	adiw	r26, 0x04	; 4
    cf38:	fd 01       	movw	r30, r26
    cf3a:	32 97       	sbiw	r30, 0x02	; 2
    cf3c:	80 81       	ld	r24, Z
    cf3e:	91 81       	ldd	r25, Z+1	; 0x01
    cf40:	e9 2f       	mov	r30, r25
    cf42:	ff 27       	eor	r31, r31
    cf44:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    cf46:	a9 01       	movw	r20, r18
    cf48:	48 0f       	add	r20, r24
    cf4a:	59 1f       	adc	r21, r25
    cf4c:	64 17       	cp	r22, r20
    cf4e:	75 07       	cpc	r23, r21
    cf50:	70 f5       	brcc	.+92     	; 0xcfae <ff_wtoupper+0xae>
				switch (cmd) {
    cf52:	e9 30       	cpi	r30, 0x09	; 9
    cf54:	f1 05       	cpc	r31, r1
    cf56:	98 f5       	brcc	.+102    	; 0xcfbe <ff_wtoupper+0xbe>
    cf58:	ec 54       	subi	r30, 0x4C	; 76
    cf5a:	ff 4f       	sbci	r31, 0xFF	; 255
    cf5c:	0c 94 bd e2 	jmp	0x1c57a	; 0x1c57a <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    cf60:	62 1b       	sub	r22, r18
    cf62:	73 0b       	sbc	r23, r19
    cf64:	fb 01       	movw	r30, r22
    cf66:	ee 0f       	add	r30, r30
    cf68:	ff 1f       	adc	r31, r31
    cf6a:	ea 0f       	add	r30, r26
    cf6c:	fb 1f       	adc	r31, r27
    cf6e:	60 81       	ld	r22, Z
    cf70:	71 81       	ldd	r23, Z+1	; 0x01
    cf72:	25 c0       	rjmp	.+74     	; 0xcfbe <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    cf74:	cb 01       	movw	r24, r22
    cf76:	82 1b       	sub	r24, r18
    cf78:	93 0b       	sbc	r25, r19
    cf7a:	81 70       	andi	r24, 0x01	; 1
    cf7c:	99 27       	eor	r25, r25
    cf7e:	68 1b       	sub	r22, r24
    cf80:	79 0b       	sbc	r23, r25
    cf82:	1d c0       	rjmp	.+58     	; 0xcfbe <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    cf84:	60 51       	subi	r22, 0x10	; 16
    cf86:	71 09       	sbc	r23, r1
    cf88:	1a c0       	rjmp	.+52     	; 0xcfbe <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    cf8a:	60 52       	subi	r22, 0x20	; 32
    cf8c:	71 09       	sbc	r23, r1
    cf8e:	17 c0       	rjmp	.+46     	; 0xcfbe <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    cf90:	60 53       	subi	r22, 0x30	; 48
    cf92:	71 09       	sbc	r23, r1
    cf94:	14 c0       	rjmp	.+40     	; 0xcfbe <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    cf96:	6a 51       	subi	r22, 0x1A	; 26
    cf98:	71 09       	sbc	r23, r1
    cf9a:	11 c0       	rjmp	.+34     	; 0xcfbe <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    cf9c:	68 5f       	subi	r22, 0xF8	; 248
    cf9e:	7f 4f       	sbci	r23, 0xFF	; 255
    cfa0:	0e c0       	rjmp	.+28     	; 0xcfbe <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    cfa2:	60 55       	subi	r22, 0x50	; 80
    cfa4:	71 09       	sbc	r23, r1
    cfa6:	0b c0       	rjmp	.+22     	; 0xcfbe <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    cfa8:	60 56       	subi	r22, 0x60	; 96
    cfaa:	7c 41       	sbci	r23, 0x1C	; 28
    cfac:	08 c0       	rjmp	.+16     	; 0xcfbe <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    cfae:	ef 2b       	or	r30, r31
    cfb0:	09 f0       	breq	.+2      	; 0xcfb4 <ff_wtoupper+0xb4>
    cfb2:	b6 cf       	rjmp	.-148    	; 0xcf20 <ff_wtoupper+0x20>
    cfb4:	88 0f       	add	r24, r24
    cfb6:	99 1f       	adc	r25, r25
    cfb8:	a8 0f       	add	r26, r24
    cfba:	b9 1f       	adc	r27, r25
    cfbc:	b1 cf       	rjmp	.-158    	; 0xcf20 <ff_wtoupper+0x20>
		}
		uni = uc;
    cfbe:	80 e0       	ldi	r24, 0x00	; 0
    cfc0:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    cfc2:	08 95       	ret

0000cfc4 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    cfc4:	81 11       	cpse	r24, r1
    cfc6:	02 c0       	rjmp	.+4      	; 0xcfcc <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    cfc8:	a1 c1       	rjmp	.+834    	; 0xd30c <mmc_disk_status>
    cfca:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    cfcc:	81 e0       	ldi	r24, 0x01	; 1
}
    cfce:	08 95       	ret

0000cfd0 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    cfd0:	81 11       	cpse	r24, r1
    cfd2:	02 c0       	rjmp	.+4      	; 0xcfd8 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    cfd4:	f6 c0       	rjmp	.+492    	; 0xd1c2 <mmc_disk_initialize>
    cfd6:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    cfd8:	81 e0       	ldi	r24, 0x01	; 1
}
    cfda:	08 95       	ret

0000cfdc <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    cfdc:	0f 93       	push	r16
    cfde:	1f 93       	push	r17
    cfe0:	fb 01       	movw	r30, r22
    switch (pdrv)
    cfe2:	81 11       	cpse	r24, r1
    cfe4:	06 c0       	rjmp	.+12     	; 0xcff2 <disk_read+0x16>
    cfe6:	ba 01       	movw	r22, r20
    cfe8:	a9 01       	movw	r20, r18
    cfea:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    cfec:	98 01       	movw	r18, r16
    cfee:	91 d1       	rcall	.+802    	; 0xd312 <mmc_disk_read>
    cff0:	02 c0       	rjmp	.+4      	; 0xcff6 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    cff2:	84 e0       	ldi	r24, 0x04	; 4
    cff4:	90 e0       	ldi	r25, 0x00	; 0
}
    cff6:	1f 91       	pop	r17
    cff8:	0f 91       	pop	r16
    cffa:	08 95       	ret

0000cffc <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    cffc:	0f 93       	push	r16
    cffe:	1f 93       	push	r17
    d000:	fb 01       	movw	r30, r22
    switch (pdrv)
    d002:	81 11       	cpse	r24, r1
    d004:	06 c0       	rjmp	.+12     	; 0xd012 <disk_write+0x16>
    d006:	ba 01       	movw	r22, r20
    d008:	a9 01       	movw	r20, r18
    d00a:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d00c:	98 01       	movw	r18, r16
    d00e:	e2 d1       	rcall	.+964    	; 0xd3d4 <mmc_disk_write>
    d010:	02 c0       	rjmp	.+4      	; 0xd016 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d012:	84 e0       	ldi	r24, 0x04	; 4
    d014:	90 e0       	ldi	r25, 0x00	; 0
}
    d016:	1f 91       	pop	r17
    d018:	0f 91       	pop	r16
    d01a:	08 95       	ret

0000d01c <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d01c:	96 2f       	mov	r25, r22
    switch (pdrv)
    d01e:	81 11       	cpse	r24, r1
    d020:	04 c0       	rjmp	.+8      	; 0xd02a <disk_ioctl+0xe>
    d022:	ba 01       	movw	r22, r20
    d024:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d026:	4a c2       	rjmp	.+1172   	; 0xd4bc <mmc_disk_ioctl>
    d028:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d02a:	84 e0       	ldi	r24, 0x04	; 4
    d02c:	90 e0       	ldi	r25, 0x00	; 0
}
    d02e:	08 95       	ret

0000d030 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d030:	f9 c4       	rjmp	.+2546   	; 0xda24 <mmc_spi_TXRX>
    return dat;
}
    d032:	08 95       	ret

0000d034 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d034:	ce d4       	rcall	.+2460   	; 0xd9d2 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d036:	8f ef       	ldi	r24, 0xFF	; 255
    d038:	fb df       	rcall	.-10     	; 0xd030 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d03a:	8f ef       	ldi	r24, 0xFF	; 255
    d03c:	f9 cf       	rjmp	.-14     	; 0xd030 <xchg_spi>
    d03e:	08 95       	ret

0000d040 <rcvr_datablock>:
    d040:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d042:	1f 93       	push	r17
    d044:	cf 93       	push	r28
    d046:	df 93       	push	r29
    d048:	ec 01       	movw	r28, r24
    d04a:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d04c:	88 ee       	ldi	r24, 0xE8	; 232
    d04e:	93 e0       	ldi	r25, 0x03	; 3
    d050:	ec d4       	rcall	.+2520   	; 0xda2a <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d052:	8f ef       	ldi	r24, 0xFF	; 255
    d054:	e7 d4       	rcall	.+2510   	; 0xda24 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d056:	8f 3f       	cpi	r24, 0xFF	; 255
    d058:	31 f4       	brne	.+12     	; 0xd066 <rcvr_datablock+0x26>
    d05a:	ee d4       	rcall	.+2524   	; 0xda38 <mmc_test_timeout>
    d05c:	89 2b       	or	r24, r25
    d05e:	c9 f3       	breq	.-14     	; 0xd052 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d060:	80 e0       	ldi	r24, 0x00	; 0
    d062:	90 e0       	ldi	r25, 0x00	; 0
    d064:	0b c0       	rjmp	.+22     	; 0xd07c <rcvr_datablock+0x3c>
    d066:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d068:	d9 f7       	brne	.-10     	; 0xd060 <rcvr_datablock+0x20>
    d06a:	b8 01       	movw	r22, r16
    d06c:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d06e:	d7 d4       	rcall	.+2478   	; 0xda1e <mmc_spi_RX_buffer>
    d070:	8f ef       	ldi	r24, 0xFF	; 255
    d072:	de df       	rcall	.-68     	; 0xd030 <xchg_spi>
    xchg_spi(0xFF);
    d074:	8f ef       	ldi	r24, 0xFF	; 255
    d076:	dc df       	rcall	.-72     	; 0xd030 <xchg_spi>
    d078:	81 e0       	ldi	r24, 0x01	; 1
    d07a:	90 e0       	ldi	r25, 0x00	; 0
    d07c:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d07e:	cf 91       	pop	r28
    d080:	1f 91       	pop	r17
    d082:	0f 91       	pop	r16
    d084:	08 95       	ret

0000d086 <wait_ready>:
    d086:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d088:	d0 d4       	rcall	.+2464   	; 0xda2a <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d08a:	8f ef       	ldi	r24, 0xFF	; 255
    d08c:	cb d4       	rcall	.+2454   	; 0xda24 <mmc_spi_TXRX>
    d08e:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d090:	8f 3f       	cpi	r24, 0xFF	; 255
    d092:	19 f0       	breq	.+6      	; 0xd09a <wait_ready+0x14>
    d094:	d1 d4       	rcall	.+2466   	; 0xda38 <mmc_test_timeout>
    d096:	89 2b       	or	r24, r25
    d098:	c1 f3       	breq	.-16     	; 0xd08a <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d09a:	81 e0       	ldi	r24, 0x01	; 1
    d09c:	90 e0       	ldi	r25, 0x00	; 0
    d09e:	cf 3f       	cpi	r28, 0xFF	; 255
    d0a0:	11 f0       	breq	.+4      	; 0xd0a6 <wait_ready+0x20>
    d0a2:	80 e0       	ldi	r24, 0x00	; 0
    d0a4:	90 e0       	ldi	r25, 0x00	; 0
}
    d0a6:	cf 91       	pop	r28
    d0a8:	08 95       	ret

0000d0aa <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d0aa:	cf 93       	push	r28
    d0ac:	df 93       	push	r29
    d0ae:	00 d0       	rcall	.+0      	; 0xd0b0 <select+0x6>
    d0b0:	1f 92       	push	r1
    CS_LOW();
    d0b2:	82 d4       	rcall	.+2308   	; 0xd9b8 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d0b4:	8f ef       	ldi	r24, 0xFF	; 255
    d0b6:	bc df       	rcall	.-136    	; 0xd030 <xchg_spi>

    if (wait_ready(1000))
    d0b8:	88 ee       	ldi	r24, 0xE8	; 232
    d0ba:	93 e0       	ldi	r25, 0x03	; 3
    d0bc:	e4 df       	rcall	.-56     	; 0xd086 <wait_ready>
    d0be:	ec 01       	movw	r28, r24
    d0c0:	89 2b       	or	r24, r25
    d0c2:	61 f4       	brne	.+24     	; 0xd0dc <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d0c4:	89 e6       	ldi	r24, 0x69	; 105
    d0c6:	97 e0       	ldi	r25, 0x07	; 7
    d0c8:	a0 e0       	ldi	r26, 0x00	; 0
    d0ca:	ed b7       	in	r30, 0x3d	; 61
    d0cc:	fe b7       	in	r31, 0x3e	; 62
    d0ce:	81 83       	std	Z+1, r24	; 0x01
    d0d0:	92 83       	std	Z+2, r25	; 0x02
    d0d2:	a3 83       	std	Z+3, r26	; 0x03
    d0d4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    deselect();
    d0d8:	ad df       	rcall	.-166    	; 0xd034 <deselect>
    d0da:	02 c0       	rjmp	.+4      	; 0xd0e0 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d0dc:	c1 e0       	ldi	r28, 0x01	; 1
    d0de:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d0e0:	ce 01       	movw	r24, r28
    d0e2:	cd b7       	in	r28, 0x3d	; 61
    d0e4:	de b7       	in	r29, 0x3e	; 62
    d0e6:	23 96       	adiw	r28, 0x03	; 3
    d0e8:	e2 e0       	ldi	r30, 0x02	; 2
    d0ea:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000d0ee <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d0ee:	ff 92       	push	r15
    d0f0:	0f 93       	push	r16
    d0f2:	1f 93       	push	r17
    d0f4:	cf 93       	push	r28
    d0f6:	df 93       	push	r29
    d0f8:	c8 2f       	mov	r28, r24
    d0fa:	d4 2f       	mov	r29, r20
    d0fc:	15 2f       	mov	r17, r21
    d0fe:	06 2f       	mov	r16, r22
    d100:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d102:	87 ff       	sbrs	r24, 7
    d104:	08 c0       	rjmp	.+16     	; 0xd116 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d106:	40 e0       	ldi	r20, 0x00	; 0
    d108:	50 e0       	ldi	r21, 0x00	; 0
    d10a:	ba 01       	movw	r22, r20
    d10c:	87 e3       	ldi	r24, 0x37	; 55
    d10e:	ef df       	rcall	.-34     	; 0xd0ee <send_cmd>
        if (res > 1) return res;
    d110:	82 30       	cpi	r24, 0x02	; 2
    d112:	58 f5       	brcc	.+86     	; 0xd16a <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d114:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d116:	cc 30       	cpi	r28, 0x0C	; 12
    d118:	71 f4       	brne	.+28     	; 0xd136 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d11a:	8c 2f       	mov	r24, r28
    d11c:	80 64       	ori	r24, 0x40	; 64
    d11e:	88 df       	rcall	.-240    	; 0xd030 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d120:	8f 2d       	mov	r24, r15
    d122:	86 df       	rcall	.-244    	; 0xd030 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d124:	80 2f       	mov	r24, r16
    d126:	84 df       	rcall	.-248    	; 0xd030 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d128:	81 2f       	mov	r24, r17
    d12a:	82 df       	rcall	.-252    	; 0xd030 <xchg_spi>
    d12c:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d12e:	80 df       	rcall	.-256    	; 0xd030 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d130:	cc 23       	and	r28, r28
    d132:	c9 f0       	breq	.+50     	; 0xd166 <send_cmd+0x78>
    d134:	06 c0       	rjmp	.+12     	; 0xd142 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d136:	7e df       	rcall	.-260    	; 0xd034 <deselect>
    d138:	b8 df       	rcall	.-144    	; 0xd0aa <select>
        if (!select()) return 0xFF;
    d13a:	89 2b       	or	r24, r25
    d13c:	71 f7       	brne	.-36     	; 0xd11a <send_cmd+0x2c>
    d13e:	8f ef       	ldi	r24, 0xFF	; 255
    d140:	14 c0       	rjmp	.+40     	; 0xd16a <send_cmd+0x7c>
    d142:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d144:	11 f4       	brne	.+4      	; 0xd14a <send_cmd+0x5c>
    d146:	87 e8       	ldi	r24, 0x87	; 135
    d148:	01 c0       	rjmp	.+2      	; 0xd14c <send_cmd+0x5e>

    xchg_spi(n);
    d14a:	81 e0       	ldi	r24, 0x01	; 1
    d14c:	71 df       	rcall	.-286    	; 0xd030 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d14e:	cc 30       	cpi	r28, 0x0C	; 12
    d150:	11 f4       	brne	.+4      	; 0xd156 <send_cmd+0x68>
    d152:	8f ef       	ldi	r24, 0xFF	; 255
    d154:	6d df       	rcall	.-294    	; 0xd030 <xchg_spi>
    d156:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d158:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d15a:	64 d4       	rcall	.+2248   	; 0xda24 <mmc_spi_TXRX>
    d15c:	87 ff       	sbrs	r24, 7
    d15e:	05 c0       	rjmp	.+10     	; 0xd16a <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d160:	c1 50       	subi	r28, 0x01	; 1
    d162:	d1 f7       	brne	.-12     	; 0xd158 <send_cmd+0x6a>
    d164:	02 c0       	rjmp	.+4      	; 0xd16a <send_cmd+0x7c>
    d166:	85 e9       	ldi	r24, 0x95	; 149
    d168:	f5 cf       	rjmp	.-22     	; 0xd154 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d16a:	cd b7       	in	r28, 0x3d	; 61
    d16c:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d16e:	e5 e0       	ldi	r30, 0x05	; 5
    d170:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x1a>

0000d174 <xmit_datablock>:
    d174:	0f 93       	push	r16
    d176:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d178:	cf 93       	push	r28
    d17a:	8c 01       	movw	r16, r24
    d17c:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d17e:	88 ee       	ldi	r24, 0xE8	; 232
    d180:	93 e0       	ldi	r25, 0x03	; 3
    d182:	81 df       	rcall	.-254    	; 0xd086 <wait_ready>
    d184:	00 97       	sbiw	r24, 0x00	; 0
    d186:	c9 f0       	breq	.+50     	; 0xd1ba <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d188:	8c 2f       	mov	r24, r28
    d18a:	52 df       	rcall	.-348    	; 0xd030 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d18c:	cd 3f       	cpi	r28, 0xFD	; 253
    d18e:	99 f0       	breq	.+38     	; 0xd1b6 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d190:	60 e0       	ldi	r22, 0x00	; 0
    d192:	72 e0       	ldi	r23, 0x02	; 2
    d194:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d196:	40 d4       	rcall	.+2176   	; 0xda18 <mmc_spi_TX_buffer>
    d198:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d19a:	4a df       	rcall	.-364    	; 0xd030 <xchg_spi>
    d19c:	8f ef       	ldi	r24, 0xFF	; 255
    d19e:	48 df       	rcall	.-368    	; 0xd030 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d1a0:	8f ef       	ldi	r24, 0xFF	; 255
    d1a2:	40 d4       	rcall	.+2176   	; 0xda24 <mmc_spi_TXRX>
    d1a4:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d1a6:	31 e0       	ldi	r19, 0x01	; 1
    d1a8:	20 e0       	ldi	r18, 0x00	; 0
    d1aa:	85 30       	cpi	r24, 0x05	; 5
    d1ac:	09 f0       	breq	.+2      	; 0xd1b0 <xmit_datablock+0x3c>
    d1ae:	30 e0       	ldi	r19, 0x00	; 0
    d1b0:	83 2f       	mov	r24, r19
    d1b2:	92 2f       	mov	r25, r18
    d1b4:	02 c0       	rjmp	.+4      	; 0xd1ba <xmit_datablock+0x46>
    d1b6:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d1b8:	90 e0       	ldi	r25, 0x00	; 0
    d1ba:	cf 91       	pop	r28
}
    d1bc:	1f 91       	pop	r17
    d1be:	0f 91       	pop	r16
    d1c0:	08 95       	ret

0000d1c2 <mmc_disk_initialize>:
    d1c2:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d1c4:	b0 e0       	ldi	r27, 0x00	; 0
    d1c6:	e7 ee       	ldi	r30, 0xE7	; 231
    d1c8:	f8 e6       	ldi	r31, 0x68	; 104
    d1ca:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d1ce:	59 d4       	rcall	.+2226   	; 0xda82 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d1d0:	64 e6       	ldi	r22, 0x64	; 100
    d1d2:	70 e0       	ldi	r23, 0x00	; 0
    d1d4:	80 e0       	ldi	r24, 0x00	; 0
    d1d6:	90 e0       	ldi	r25, 0x00	; 0
    d1d8:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d1dc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d1e0:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d1e2:	8e c0       	rjmp	.+284    	; 0xd300 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d1e4:	4d d4       	rcall	.+2202   	; 0xda80 <mmc_power_on>
    d1e6:	f9 d3       	rcall	.+2034   	; 0xd9da <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d1e8:	1a e0       	ldi	r17, 0x0A	; 10
    d1ea:	8f ef       	ldi	r24, 0xFF	; 255
    d1ec:	21 df       	rcall	.-446    	; 0xd030 <xchg_spi>
    d1ee:	11 50       	subi	r17, 0x01	; 1
    d1f0:	e1 f7       	brne	.-8      	; 0xd1ea <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d1f2:	40 e0       	ldi	r20, 0x00	; 0
    d1f4:	50 e0       	ldi	r21, 0x00	; 0
    d1f6:	ba 01       	movw	r22, r20
    d1f8:	80 e0       	ldi	r24, 0x00	; 0
    d1fa:	79 df       	rcall	.-270    	; 0xd0ee <send_cmd>
    d1fc:	81 30       	cpi	r24, 0x01	; 1
    d1fe:	09 f0       	breq	.+2      	; 0xd202 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d200:	6f c0       	rjmp	.+222    	; 0xd2e0 <mmc_disk_initialize+0x11e>
    d202:	80 ed       	ldi	r24, 0xD0	; 208
    d204:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d206:	11 d4       	rcall	.+2082   	; 0xda2a <mmc_set_ms_timeout>
    d208:	4a ea       	ldi	r20, 0xAA	; 170
    d20a:	51 e0       	ldi	r21, 0x01	; 1
    d20c:	60 e0       	ldi	r22, 0x00	; 0
    d20e:	70 e0       	ldi	r23, 0x00	; 0
    d210:	88 e0       	ldi	r24, 0x08	; 8
    d212:	6d df       	rcall	.-294    	; 0xd0ee <send_cmd>
    d214:	81 30       	cpi	r24, 0x01	; 1
    d216:	09 f0       	breq	.+2      	; 0xd21a <mmc_disk_initialize+0x58>
    d218:	3d c0       	rjmp	.+122    	; 0xd294 <mmc_disk_initialize+0xd2>
    d21a:	8e 01       	movw	r16, r28
    d21c:	0f 5f       	subi	r16, 0xFF	; 255
    d21e:	1f 4f       	sbci	r17, 0xFF	; 255
    d220:	6e 01       	movw	r12, r28
    d222:	85 e0       	ldi	r24, 0x05	; 5
    d224:	c8 0e       	add	r12, r24
    d226:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d228:	78 01       	movw	r14, r16
    d22a:	8f ef       	ldi	r24, 0xFF	; 255
    d22c:	fb d3       	rcall	.+2038   	; 0xda24 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d22e:	f7 01       	movw	r30, r14
    d230:	81 93       	st	Z+, r24
    d232:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d234:	ce 16       	cp	r12, r30
    d236:	df 06       	cpc	r13, r31
    d238:	c1 f7       	brne	.-16     	; 0xd22a <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d23a:	8b 81       	ldd	r24, Y+3	; 0x03
    d23c:	81 30       	cpi	r24, 0x01	; 1
    d23e:	09 f0       	breq	.+2      	; 0xd242 <mmc_disk_initialize+0x80>
    d240:	4f c0       	rjmp	.+158    	; 0xd2e0 <mmc_disk_initialize+0x11e>
    d242:	8c 81       	ldd	r24, Y+4	; 0x04
    d244:	8a 3a       	cpi	r24, 0xAA	; 170
    d246:	09 f0       	breq	.+2      	; 0xd24a <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d248:	4b c0       	rjmp	.+150    	; 0xd2e0 <mmc_disk_initialize+0x11e>
    d24a:	f6 d3       	rcall	.+2028   	; 0xda38 <mmc_test_timeout>
    d24c:	89 2b       	or	r24, r25
    d24e:	29 f0       	breq	.+10     	; 0xd25a <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d250:	f3 d3       	rcall	.+2022   	; 0xda38 <mmc_test_timeout>
    d252:	89 2b       	or	r24, r25
    d254:	09 f0       	breq	.+2      	; 0xd258 <mmc_disk_initialize+0x96>
    d256:	44 c0       	rjmp	.+136    	; 0xd2e0 <mmc_disk_initialize+0x11e>
    d258:	09 c0       	rjmp	.+18     	; 0xd26c <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d25a:	40 e0       	ldi	r20, 0x00	; 0
    d25c:	50 e0       	ldi	r21, 0x00	; 0
    d25e:	60 e0       	ldi	r22, 0x00	; 0
    d260:	70 e4       	ldi	r23, 0x40	; 64
    d262:	89 ea       	ldi	r24, 0xA9	; 169
    d264:	44 df       	rcall	.-376    	; 0xd0ee <send_cmd>
    d266:	81 11       	cpse	r24, r1
    d268:	f0 cf       	rjmp	.-32     	; 0xd24a <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d26a:	f2 cf       	rjmp	.-28     	; 0xd250 <mmc_disk_initialize+0x8e>
    d26c:	40 e0       	ldi	r20, 0x00	; 0
    d26e:	50 e0       	ldi	r21, 0x00	; 0
    d270:	ba 01       	movw	r22, r20
    d272:	8a e3       	ldi	r24, 0x3A	; 58
    d274:	3c df       	rcall	.-392    	; 0xd0ee <send_cmd>
    d276:	81 11       	cpse	r24, r1
    d278:	33 c0       	rjmp	.+102    	; 0xd2e0 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d27a:	8f ef       	ldi	r24, 0xFF	; 255
    d27c:	d3 d3       	rcall	.+1958   	; 0xda24 <mmc_spi_TXRX>
    d27e:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d280:	81 93       	st	Z+, r24
    d282:	8f 01       	movw	r16, r30
    d284:	ce 16       	cp	r12, r30
    d286:	df 06       	cpc	r13, r31
    d288:	c1 f7       	brne	.-16     	; 0xd27a <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d28a:	89 81       	ldd	r24, Y+1	; 0x01
    d28c:	86 fd       	sbrc	r24, 6
    d28e:	2a c0       	rjmp	.+84     	; 0xd2e4 <mmc_disk_initialize+0x122>
    d290:	14 e0       	ldi	r17, 0x04	; 4
    d292:	29 c0       	rjmp	.+82     	; 0xd2e6 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d294:	80 ed       	ldi	r24, 0xD0	; 208
    d296:	97 e0       	ldi	r25, 0x07	; 7
    d298:	c8 d3       	rcall	.+1936   	; 0xda2a <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d29a:	40 e0       	ldi	r20, 0x00	; 0
    d29c:	50 e0       	ldi	r21, 0x00	; 0
    d29e:	ba 01       	movw	r22, r20
    d2a0:	89 ea       	ldi	r24, 0xA9	; 169
    d2a2:	25 df       	rcall	.-438    	; 0xd0ee <send_cmd>
    d2a4:	82 30       	cpi	r24, 0x02	; 2
    d2a6:	18 f0       	brcs	.+6      	; 0xd2ae <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d2a8:	11 e0       	ldi	r17, 0x01	; 1
    d2aa:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d2ac:	02 c0       	rjmp	.+4      	; 0xd2b2 <mmc_disk_initialize+0xf0>
    d2ae:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d2b0:	09 ea       	ldi	r16, 0xA9	; 169
    d2b2:	c2 d3       	rcall	.+1924   	; 0xda38 <mmc_test_timeout>
    d2b4:	89 2b       	or	r24, r25
    d2b6:	21 f0       	breq	.+8      	; 0xd2c0 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d2b8:	bf d3       	rcall	.+1918   	; 0xda38 <mmc_test_timeout>
    d2ba:	89 2b       	or	r24, r25
    d2bc:	89 f4       	brne	.+34     	; 0xd2e0 <mmc_disk_initialize+0x11e>
    d2be:	08 c0       	rjmp	.+16     	; 0xd2d0 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d2c0:	40 e0       	ldi	r20, 0x00	; 0
    d2c2:	50 e0       	ldi	r21, 0x00	; 0
    d2c4:	ba 01       	movw	r22, r20
    d2c6:	80 2f       	mov	r24, r16
    d2c8:	12 df       	rcall	.-476    	; 0xd0ee <send_cmd>
    d2ca:	81 11       	cpse	r24, r1
    d2cc:	f2 cf       	rjmp	.-28     	; 0xd2b2 <mmc_disk_initialize+0xf0>
    d2ce:	f4 cf       	rjmp	.-24     	; 0xd2b8 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d2d0:	40 e0       	ldi	r20, 0x00	; 0
    d2d2:	52 e0       	ldi	r21, 0x02	; 2
    d2d4:	60 e0       	ldi	r22, 0x00	; 0
    d2d6:	70 e0       	ldi	r23, 0x00	; 0
    d2d8:	80 e1       	ldi	r24, 0x10	; 16
    d2da:	09 df       	rcall	.-494    	; 0xd0ee <send_cmd>
    d2dc:	88 23       	and	r24, r24
                ty = 0;
    d2de:	19 f0       	breq	.+6      	; 0xd2e6 <mmc_disk_initialize+0x124>
    d2e0:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d2e2:	01 c0       	rjmp	.+2      	; 0xd2e6 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d2e4:	1c e0       	ldi	r17, 0x0C	; 12
    d2e6:	10 93 2b 18 	sts	0x182B, r17	; 0x80182b <CardType>
    deselect();
    d2ea:	a4 de       	rcall	.-696    	; 0xd034 <deselect>

    if (ty)                                       /* Initialization succeded */
    d2ec:	11 23       	and	r17, r17
    d2ee:	39 f0       	breq	.+14     	; 0xd2fe <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d2f0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2f4:	8e 7f       	andi	r24, 0xFE	; 254
    d2f6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d2fa:	81 d3       	rcall	.+1794   	; 0xd9fe <mmc_fast>
    d2fc:	01 c0       	rjmp	.+2      	; 0xd300 <mmc_disk_initialize+0x13e>
    d2fe:	c1 d3       	rcall	.+1922   	; 0xda82 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d300:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d304:	24 96       	adiw	r28, 0x04	; 4
    d306:	e8 e0       	ldi	r30, 0x08	; 8
}
    d308:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000d30c <mmc_disk_status>:
    d30c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d310:	08 95       	ret

0000d312 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d312:	8f 92       	push	r8
    d314:	9f 92       	push	r9
    d316:	af 92       	push	r10
    d318:	bf 92       	push	r11
    d31a:	ef 92       	push	r14
    d31c:	ff 92       	push	r15
    d31e:	1f 93       	push	r17
    d320:	cf 93       	push	r28
    d322:	df 93       	push	r29
    d324:	7c 01       	movw	r14, r24
    d326:	4a 01       	movw	r8, r20
    d328:	5b 01       	movw	r10, r22
    d32a:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d32c:	20 97       	sbiw	r28, 0x00	; 0
    d32e:	19 f4       	brne	.+6      	; 0xd336 <mmc_disk_read+0x24>
    {
        deselect();
    d330:	81 de       	rcall	.-766    	; 0xd034 <deselect>
        return RES_PARERR;
    d332:	84 e0       	ldi	r24, 0x04	; 4
    d334:	0d c0       	rjmp	.+26     	; 0xd350 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d336:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d33a:	88 23       	and	r24, r24
    d33c:	19 f0       	breq	.+6      	; 0xd344 <mmc_disk_read+0x32>
		set_error(1);
    d33e:	81 e0       	ldi	r24, 0x01	; 1
    d340:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <set_error>

    if (Stat & STA_NOINIT)
    d344:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d348:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d34a:	04 c0       	rjmp	.+8      	; 0xd354 <mmc_disk_read+0x42>
    d34c:	73 de       	rcall	.-794    	; 0xd034 <deselect>
        return RES_NOTRDY;
    d34e:	83 e0       	ldi	r24, 0x03	; 3
    d350:	90 e0       	ldi	r25, 0x00	; 0
    d352:	36 c0       	rjmp	.+108    	; 0xd3c0 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d354:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d358:	81 fd       	sbrc	r24, 1
    d35a:	f8 cf       	rjmp	.-16     	; 0xd34c <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d35c:	46 9a       	sbi	0x08, 6	; 8
    d35e:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d360:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d364:	83 fd       	sbrc	r24, 3
    d366:	07 c0       	rjmp	.+14     	; 0xd376 <mmc_disk_read+0x64>
    d368:	89 e0       	ldi	r24, 0x09	; 9
    d36a:	88 0c       	add	r8, r8
    d36c:	99 1c       	adc	r9, r9
    d36e:	aa 1c       	adc	r10, r10
    d370:	bb 1c       	adc	r11, r11
    d372:	8a 95       	dec	r24
    d374:	d1 f7       	brne	.-12     	; 0xd36a <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d376:	c2 30       	cpi	r28, 0x02	; 2
    d378:	d1 05       	cpc	r29, r1
    d37a:	10 f4       	brcc	.+4      	; 0xd380 <mmc_disk_read+0x6e>
    d37c:	11 e1       	ldi	r17, 0x11	; 17
    d37e:	01 c0       	rjmp	.+2      	; 0xd382 <mmc_disk_read+0x70>
    d380:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d382:	b5 01       	movw	r22, r10
    d384:	a4 01       	movw	r20, r8
    d386:	81 2f       	mov	r24, r17
    d388:	b2 de       	rcall	.-668    	; 0xd0ee <send_cmd>
    d38a:	81 11       	cpse	r24, r1
    d38c:	11 c0       	rjmp	.+34     	; 0xd3b0 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d38e:	60 e0       	ldi	r22, 0x00	; 0
    d390:	72 e0       	ldi	r23, 0x02	; 2
    d392:	c7 01       	movw	r24, r14
    d394:	55 de       	rcall	.-854    	; 0xd040 <rcvr_datablock>
    d396:	89 2b       	or	r24, r25
    d398:	21 f0       	breq	.+8      	; 0xd3a2 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d39a:	8e ef       	ldi	r24, 0xFE	; 254
    d39c:	f8 1a       	sub	r15, r24
        } while (--count);
    d39e:	21 97       	sbiw	r28, 0x01	; 1
    d3a0:	b1 f7       	brne	.-20     	; 0xd38e <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d3a2:	12 31       	cpi	r17, 0x12	; 18
    d3a4:	29 f4       	brne	.+10     	; 0xd3b0 <mmc_disk_read+0x9e>
    d3a6:	40 e0       	ldi	r20, 0x00	; 0
    d3a8:	50 e0       	ldi	r21, 0x00	; 0
    d3aa:	ba 01       	movw	r22, r20
    d3ac:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d3ae:	9f de       	rcall	.-706    	; 0xd0ee <send_cmd>
    d3b0:	41 de       	rcall	.-894    	; 0xd034 <deselect>
    GPIO_PIN_LOW(LED1);
    d3b2:	46 98       	cbi	0x08, 6	; 8
    d3b4:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d3b6:	81 e0       	ldi	r24, 0x01	; 1
    d3b8:	90 e0       	ldi	r25, 0x00	; 0
    d3ba:	cd 2b       	or	r28, r29
    d3bc:	09 f4       	brne	.+2      	; 0xd3c0 <mmc_disk_read+0xae>
    d3be:	80 e0       	ldi	r24, 0x00	; 0
}
    d3c0:	df 91       	pop	r29
    d3c2:	cf 91       	pop	r28
    d3c4:	1f 91       	pop	r17
    d3c6:	ff 90       	pop	r15
    d3c8:	ef 90       	pop	r14
    d3ca:	bf 90       	pop	r11
    d3cc:	af 90       	pop	r10
    d3ce:	9f 90       	pop	r9
    d3d0:	8f 90       	pop	r8
    d3d2:	08 95       	ret

0000d3d4 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d3d4:	a0 e0       	ldi	r26, 0x00	; 0
    d3d6:	b0 e0       	ldi	r27, 0x00	; 0
    d3d8:	e0 ef       	ldi	r30, 0xF0	; 240
    d3da:	f9 e6       	ldi	r31, 0x69	; 105
    d3dc:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    d3e0:	8c 01       	movw	r16, r24
    d3e2:	6a 01       	movw	r12, r20
    d3e4:	7b 01       	movw	r14, r22
    d3e6:	e9 01       	movw	r28, r18
    if (!count)
    d3e8:	20 97       	sbiw	r28, 0x00	; 0
    d3ea:	19 f4       	brne	.+6      	; 0xd3f2 <mmc_disk_write+0x1e>
    {
        deselect();
    d3ec:	23 de       	rcall	.-954    	; 0xd034 <deselect>
        return RES_PARERR;
    d3ee:	84 e0       	ldi	r24, 0x04	; 4
    d3f0:	18 c0       	rjmp	.+48     	; 0xd422 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d3f2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3f6:	88 23       	and	r24, r24
    d3f8:	19 f0       	breq	.+6      	; 0xd400 <mmc_disk_write+0x2c>
		set_error(1);
    d3fa:	81 e0       	ldi	r24, 0x01	; 1
    d3fc:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <set_error>

    if (Stat & STA_NOINIT)
    d400:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d404:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d406:	03 c0       	rjmp	.+6      	; 0xd40e <mmc_disk_write+0x3a>
    d408:	15 de       	rcall	.-982    	; 0xd034 <deselect>
        return RES_NOTRDY;
    d40a:	83 e0       	ldi	r24, 0x03	; 3
    d40c:	0a c0       	rjmp	.+20     	; 0xd422 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d40e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d412:	81 fd       	sbrc	r24, 1
    d414:	f9 cf       	rjmp	.-14     	; 0xd408 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d416:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d41a:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d41c:	04 c0       	rjmp	.+8      	; 0xd426 <mmc_disk_write+0x52>
    d41e:	0a de       	rcall	.-1004   	; 0xd034 <deselect>
        return RES_WRPRT;
    d420:	82 e0       	ldi	r24, 0x02	; 2
    d422:	90 e0       	ldi	r25, 0x00	; 0
    d424:	46 c0       	rjmp	.+140    	; 0xd4b2 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d426:	46 9a       	sbi	0x08, 6	; 8
    d428:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d42a:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d42e:	83 fd       	sbrc	r24, 3
    d430:	07 c0       	rjmp	.+14     	; 0xd440 <mmc_disk_write+0x6c>
    d432:	99 e0       	ldi	r25, 0x09	; 9
    d434:	cc 0c       	add	r12, r12
    d436:	dd 1c       	adc	r13, r13
    d438:	ee 1c       	adc	r14, r14
    d43a:	ff 1c       	adc	r15, r15
    d43c:	9a 95       	dec	r25
    d43e:	d1 f7       	brne	.-12     	; 0xd434 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d440:	c1 30       	cpi	r28, 0x01	; 1
    d442:	d1 05       	cpc	r29, r1
    d444:	89 f4       	brne	.+34     	; 0xd468 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d446:	b7 01       	movw	r22, r14
    d448:	a6 01       	movw	r20, r12
    d44a:	88 e1       	ldi	r24, 0x18	; 24
    d44c:	50 de       	rcall	.-864    	; 0xd0ee <send_cmd>
    d44e:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d450:	26 c0       	rjmp	.+76     	; 0xd49e <mmc_disk_write+0xca>
    d452:	6e ef       	ldi	r22, 0xFE	; 254
    d454:	c8 01       	movw	r24, r16
    d456:	8e de       	rcall	.-740    	; 0xd174 <xmit_datablock>
    d458:	31 e0       	ldi	r19, 0x01	; 1
    d45a:	20 e0       	ldi	r18, 0x00	; 0
    d45c:	89 2b       	or	r24, r25
    d45e:	09 f0       	breq	.+2      	; 0xd462 <mmc_disk_write+0x8e>
    d460:	30 e0       	ldi	r19, 0x00	; 0
    d462:	c3 2f       	mov	r28, r19
    d464:	d2 2f       	mov	r29, r18
    d466:	1d c0       	rjmp	.+58     	; 0xd4a2 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d468:	86 70       	andi	r24, 0x06	; 6
    d46a:	29 f0       	breq	.+10     	; 0xd476 <mmc_disk_write+0xa2>
    d46c:	ae 01       	movw	r20, r28
    d46e:	60 e0       	ldi	r22, 0x00	; 0
    d470:	70 e0       	ldi	r23, 0x00	; 0
    d472:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d474:	3c de       	rcall	.-904    	; 0xd0ee <send_cmd>
    d476:	b7 01       	movw	r22, r14
    d478:	a6 01       	movw	r20, r12
    d47a:	89 e1       	ldi	r24, 0x19	; 25
    d47c:	38 de       	rcall	.-912    	; 0xd0ee <send_cmd>
    d47e:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d480:	10 c0       	rjmp	.+32     	; 0xd4a2 <mmc_disk_write+0xce>
    d482:	6c ef       	ldi	r22, 0xFC	; 252
    d484:	c8 01       	movw	r24, r16
    d486:	76 de       	rcall	.-788    	; 0xd174 <xmit_datablock>
    d488:	89 2b       	or	r24, r25
                buff += 512;
    d48a:	19 f0       	breq	.+6      	; 0xd492 <mmc_disk_write+0xbe>
            } while (--count);
    d48c:	1e 5f       	subi	r17, 0xFE	; 254
    d48e:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d490:	c1 f7       	brne	.-16     	; 0xd482 <mmc_disk_write+0xae>
    d492:	6d ef       	ldi	r22, 0xFD	; 253
    d494:	80 e0       	ldi	r24, 0x00	; 0
    d496:	90 e0       	ldi	r25, 0x00	; 0
    d498:	6d de       	rcall	.-806    	; 0xd174 <xmit_datablock>
    d49a:	89 2b       	or	r24, r25
                count = 1;
    d49c:	11 f4       	brne	.+4      	; 0xd4a2 <mmc_disk_write+0xce>
    d49e:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d4a0:	d0 e0       	ldi	r29, 0x00	; 0
    d4a2:	c8 dd       	rcall	.-1136   	; 0xd034 <deselect>
    GPIO_PIN_LOW(LED1);
    d4a4:	46 98       	cbi	0x08, 6	; 8
    d4a6:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d4a8:	81 e0       	ldi	r24, 0x01	; 1
    d4aa:	90 e0       	ldi	r25, 0x00	; 0
    d4ac:	cd 2b       	or	r28, r29
    d4ae:	09 f4       	brne	.+2      	; 0xd4b2 <mmc_disk_write+0xde>
    d4b0:	80 e0       	ldi	r24, 0x00	; 0
}
    d4b2:	cd b7       	in	r28, 0x3d	; 61
    d4b4:	de b7       	in	r29, 0x3e	; 62
    d4b6:	e8 e0       	ldi	r30, 0x08	; 8
    d4b8:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000d4bc <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d4bc:	a0 e1       	ldi	r26, 0x10	; 16
    d4be:	b0 e0       	ldi	r27, 0x00	; 0
    d4c0:	e4 e6       	ldi	r30, 0x64	; 100
    d4c2:	fa e6       	ldi	r31, 0x6A	; 106
    d4c4:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d4c8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d4cc:	90 fd       	sbrc	r25, 0
    d4ce:	31 c2       	rjmp	.+1122   	; 0xd932 <mmc_disk_ioctl+0x476>
    d4d0:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d4d2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d4d6:	91 ff       	sbrs	r25, 1
    d4d8:	02 c0       	rjmp	.+4      	; 0xd4de <mmc_disk_ioctl+0x22>
    {
        deselect();
    d4da:	ac dd       	rcall	.-1192   	; 0xd034 <deselect>
    d4dc:	2a c2       	rjmp	.+1108   	; 0xd932 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d4de:	83 33       	cpi	r24, 0x33	; 51
    d4e0:	09 f4       	brne	.+2      	; 0xd4e4 <mmc_disk_ioctl+0x28>
    d4e2:	01 c1       	rjmp	.+514    	; 0xd6e6 <mmc_disk_ioctl+0x22a>
    d4e4:	a0 f4       	brcc	.+40     	; 0xd50e <mmc_disk_ioctl+0x52>
    d4e6:	83 30       	cpi	r24, 0x03	; 3
    d4e8:	09 f4       	brne	.+2      	; 0xd4ec <mmc_disk_ioctl+0x30>
    d4ea:	85 c0       	rjmp	.+266    	; 0xd5f6 <mmc_disk_ioctl+0x13a>
    d4ec:	28 f4       	brcc	.+10     	; 0xd4f8 <mmc_disk_ioctl+0x3c>
    d4ee:	88 23       	and	r24, r24
    d4f0:	11 f1       	breq	.+68     	; 0xd536 <mmc_disk_ioctl+0x7a>
    d4f2:	81 30       	cpi	r24, 0x01	; 1
    d4f4:	11 f1       	breq	.+68     	; 0xd53a <mmc_disk_ioctl+0x7e>
    d4f6:	1f c2       	rjmp	.+1086   	; 0xd936 <mmc_disk_ioctl+0x47a>
    d4f8:	87 30       	cpi	r24, 0x07	; 7
    d4fa:	09 f4       	brne	.+2      	; 0xd4fe <mmc_disk_ioctl+0x42>
    d4fc:	2a c1       	rjmp	.+596    	; 0xd752 <mmc_disk_ioctl+0x296>
    d4fe:	82 33       	cpi	r24, 0x32	; 50
    d500:	09 f0       	breq	.+2      	; 0xd504 <mmc_disk_ioctl+0x48>
    d502:	19 c2       	rjmp	.+1074   	; 0xd936 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d504:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
    d508:	fb 01       	movw	r30, r22
    d50a:	80 83       	st	Z, r24
    d50c:	28 c1       	rjmp	.+592    	; 0xd75e <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d50e:	86 33       	cpi	r24, 0x36	; 54
    d510:	09 f4       	brne	.+2      	; 0xd514 <mmc_disk_ioctl+0x58>
    d512:	0c c1       	rjmp	.+536    	; 0xd72c <mmc_disk_ioctl+0x270>
    d514:	38 f4       	brcc	.+14     	; 0xd524 <mmc_disk_ioctl+0x68>
    d516:	84 33       	cpi	r24, 0x34	; 52
    d518:	09 f4       	brne	.+2      	; 0xd51c <mmc_disk_ioctl+0x60>
    d51a:	ea c0       	rjmp	.+468    	; 0xd6f0 <mmc_disk_ioctl+0x234>
    d51c:	85 33       	cpi	r24, 0x35	; 53
    d51e:	09 f4       	brne	.+2      	; 0xd522 <mmc_disk_ioctl+0x66>
    d520:	f1 c0       	rjmp	.+482    	; 0xd704 <mmc_disk_ioctl+0x248>
    d522:	09 c2       	rjmp	.+1042   	; 0xd936 <mmc_disk_ioctl+0x47a>
    d524:	88 33       	cpi	r24, 0x38	; 56
    d526:	09 f4       	brne	.+2      	; 0xd52a <mmc_disk_ioctl+0x6e>
    d528:	74 c1       	rjmp	.+744    	; 0xd812 <mmc_disk_ioctl+0x356>
    d52a:	08 f4       	brcc	.+2      	; 0xd52e <mmc_disk_ioctl+0x72>
    d52c:	1a c1       	rjmp	.+564    	; 0xd762 <mmc_disk_ioctl+0x2a6>
    d52e:	89 33       	cpi	r24, 0x39	; 57
    d530:	09 f4       	brne	.+2      	; 0xd534 <mmc_disk_ioctl+0x78>
    d532:	bc c1       	rjmp	.+888    	; 0xd8ac <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d534:	00 c2       	rjmp	.+1024   	; 0xd936 <mmc_disk_ioctl+0x47a>
    d536:	b9 dd       	rcall	.-1166   	; 0xd0aa <select>
    d538:	06 c1       	rjmp	.+524    	; 0xd746 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d53a:	40 e0       	ldi	r20, 0x00	; 0
    d53c:	50 e0       	ldi	r21, 0x00	; 0
    d53e:	ba 01       	movw	r22, r20
    d540:	89 e0       	ldi	r24, 0x09	; 9
    d542:	d5 dd       	rcall	.-1110   	; 0xd0ee <send_cmd>
    d544:	81 11       	cpse	r24, r1
    d546:	f1 c1       	rjmp	.+994    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d548:	60 e1       	ldi	r22, 0x10	; 16
    d54a:	70 e0       	ldi	r23, 0x00	; 0
    d54c:	ce 01       	movw	r24, r28
    d54e:	01 96       	adiw	r24, 0x01	; 1
    d550:	77 dd       	rcall	.-1298   	; 0xd040 <rcvr_datablock>
    d552:	89 2b       	or	r24, r25
    d554:	09 f4       	brne	.+2      	; 0xd558 <mmc_disk_ioctl+0x9c>
    d556:	e9 c1       	rjmp	.+978    	; 0xd92a <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d558:	99 81       	ldd	r25, Y+1	; 0x01
    d55a:	92 95       	swap	r25
    d55c:	96 95       	lsr	r25
    d55e:	96 95       	lsr	r25
    d560:	93 70       	andi	r25, 0x03	; 3
    d562:	29 85       	ldd	r18, Y+9	; 0x09
    d564:	4a 85       	ldd	r20, Y+10	; 0x0a
    d566:	88 85       	ldd	r24, Y+8	; 0x08
    d568:	91 30       	cpi	r25, 0x01	; 1
    d56a:	d9 f4       	brne	.+54     	; 0xd5a2 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d56c:	30 e0       	ldi	r19, 0x00	; 0
    d56e:	32 2f       	mov	r19, r18
    d570:	22 27       	eor	r18, r18
    d572:	24 0f       	add	r18, r20
    d574:	31 1d       	adc	r19, r1
    d576:	8f 73       	andi	r24, 0x3F	; 63
    d578:	90 e0       	ldi	r25, 0x00	; 0
    d57a:	a0 e0       	ldi	r26, 0x00	; 0
    d57c:	b0 e0       	ldi	r27, 0x00	; 0
    d57e:	dc 01       	movw	r26, r24
    d580:	99 27       	eor	r25, r25
    d582:	88 27       	eor	r24, r24
    d584:	01 96       	adiw	r24, 0x01	; 1
    d586:	a1 1d       	adc	r26, r1
    d588:	b1 1d       	adc	r27, r1
    d58a:	82 0f       	add	r24, r18
    d58c:	93 1f       	adc	r25, r19
    d58e:	a1 1d       	adc	r26, r1
    d590:	b1 1d       	adc	r27, r1
    d592:	fa e0       	ldi	r31, 0x0A	; 10
    d594:	88 0f       	add	r24, r24
    d596:	99 1f       	adc	r25, r25
    d598:	aa 1f       	adc	r26, r26
    d59a:	bb 1f       	adc	r27, r27
    d59c:	fa 95       	dec	r31
    d59e:	d1 f7       	brne	.-12     	; 0xd594 <mmc_disk_ioctl+0xd8>
    d5a0:	9b c0       	rjmp	.+310    	; 0xd6d8 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d5a2:	22 95       	swap	r18
    d5a4:	26 95       	lsr	r18
    d5a6:	26 95       	lsr	r18
    d5a8:	23 70       	andi	r18, 0x03	; 3
    d5aa:	f4 e0       	ldi	r31, 0x04	; 4
    d5ac:	8f 9f       	mul	r24, r31
    d5ae:	c0 01       	movw	r24, r0
    d5b0:	11 24       	eor	r1, r1
    d5b2:	82 0f       	add	r24, r18
    d5b4:	91 1d       	adc	r25, r1
    d5b6:	01 96       	adiw	r24, 0x01	; 1
    d5b8:	2f 81       	ldd	r18, Y+7	; 0x07
    d5ba:	23 70       	andi	r18, 0x03	; 3
    d5bc:	30 e0       	ldi	r19, 0x00	; 0
    d5be:	32 2f       	mov	r19, r18
    d5c0:	22 27       	eor	r18, r18
    d5c2:	33 0f       	add	r19, r19
    d5c4:	33 0f       	add	r19, r19
    d5c6:	82 0f       	add	r24, r18
    d5c8:	93 1f       	adc	r25, r19
    d5ca:	a0 e0       	ldi	r26, 0x00	; 0
    d5cc:	b0 e0       	ldi	r27, 0x00	; 0
    d5ce:	2e 81       	ldd	r18, Y+6	; 0x06
    d5d0:	32 2f       	mov	r19, r18
    d5d2:	3f 70       	andi	r19, 0x0F	; 15
    d5d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    d5d6:	22 1f       	adc	r18, r18
    d5d8:	22 27       	eor	r18, r18
    d5da:	22 1f       	adc	r18, r18
    d5dc:	23 0f       	add	r18, r19
    d5de:	43 70       	andi	r20, 0x03	; 3
    d5e0:	44 0f       	add	r20, r20
    d5e2:	42 0f       	add	r20, r18
    d5e4:	47 50       	subi	r20, 0x07	; 7
    d5e6:	04 c0       	rjmp	.+8      	; 0xd5f0 <mmc_disk_ioctl+0x134>
    d5e8:	88 0f       	add	r24, r24
    d5ea:	99 1f       	adc	r25, r25
    d5ec:	aa 1f       	adc	r26, r26
    d5ee:	bb 1f       	adc	r27, r27
    d5f0:	4a 95       	dec	r20
    d5f2:	d2 f7       	brpl	.-12     	; 0xd5e8 <mmc_disk_ioctl+0x12c>
    d5f4:	71 c0       	rjmp	.+226    	; 0xd6d8 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d5f6:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d5fa:	40 e0       	ldi	r20, 0x00	; 0
    d5fc:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d5fe:	ba 01       	movw	r22, r20
    d600:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d602:	24 c0       	rjmp	.+72     	; 0xd64c <mmc_disk_ioctl+0x190>
    d604:	8d e8       	ldi	r24, 0x8D	; 141
    d606:	73 dd       	rcall	.-1306   	; 0xd0ee <send_cmd>
    d608:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d60a:	8f c1       	rjmp	.+798    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d60c:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d60e:	10 dd       	rcall	.-1504   	; 0xd030 <xchg_spi>
    d610:	60 e1       	ldi	r22, 0x10	; 16
    d612:	70 e0       	ldi	r23, 0x00	; 0
    d614:	ce 01       	movw	r24, r28
    d616:	01 96       	adiw	r24, 0x01	; 1
    d618:	13 dd       	rcall	.-1498   	; 0xd040 <rcvr_datablock>
    d61a:	89 2b       	or	r24, r25
    d61c:	09 f4       	brne	.+2      	; 0xd620 <mmc_disk_ioctl+0x164>
    d61e:	85 c1       	rjmp	.+778    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d620:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d622:	f5 2e       	mov	r15, r21
    d624:	8f ef       	ldi	r24, 0xFF	; 255
    d626:	04 dd       	rcall	.-1528   	; 0xd030 <xchg_spi>
    d628:	fa 94       	dec	r15
    d62a:	f1 10       	cpse	r15, r1
    d62c:	fb cf       	rjmp	.-10     	; 0xd624 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d62e:	2b 85       	ldd	r18, Y+11	; 0x0b
    d630:	22 95       	swap	r18
    d632:	2f 70       	andi	r18, 0x0F	; 15
    d634:	80 e1       	ldi	r24, 0x10	; 16
    d636:	90 e0       	ldi	r25, 0x00	; 0
    d638:	a0 e0       	ldi	r26, 0x00	; 0
    d63a:	b0 e0       	ldi	r27, 0x00	; 0
    d63c:	04 c0       	rjmp	.+8      	; 0xd646 <mmc_disk_ioctl+0x18a>
    d63e:	88 0f       	add	r24, r24
    d640:	99 1f       	adc	r25, r25
    d642:	aa 1f       	adc	r26, r26
    d644:	bb 1f       	adc	r27, r27
    d646:	2a 95       	dec	r18
    d648:	d2 f7       	brpl	.-12     	; 0xd63e <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d64a:	46 c0       	rjmp	.+140    	; 0xd6d8 <mmc_disk_ioctl+0x21c>
    d64c:	89 e0       	ldi	r24, 0x09	; 9
    d64e:	4f dd       	rcall	.-1378   	; 0xd0ee <send_cmd>
    d650:	81 11       	cpse	r24, r1
    d652:	6b c1       	rjmp	.+726    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d654:	60 e1       	ldi	r22, 0x10	; 16
    d656:	70 e0       	ldi	r23, 0x00	; 0
    d658:	ce 01       	movw	r24, r28
    d65a:	01 96       	adiw	r24, 0x01	; 1
    d65c:	f1 dc       	rcall	.-1566   	; 0xd040 <rcvr_datablock>
    d65e:	89 2b       	or	r24, r25
    d660:	09 f4       	brne	.+2      	; 0xd664 <mmc_disk_ioctl+0x1a8>
    d662:	63 c1       	rjmp	.+710    	; 0xd92a <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d664:	90 91 2b 18 	lds	r25, 0x182B	; 0x80182b <CardType>
    d668:	2b 85       	ldd	r18, Y+11	; 0x0b
    d66a:	8c 85       	ldd	r24, Y+12	; 0x0c
    d66c:	91 ff       	sbrs	r25, 1
    d66e:	16 c0       	rjmp	.+44     	; 0xd69c <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d670:	2f 73       	andi	r18, 0x3F	; 63
    d672:	88 1f       	adc	r24, r24
    d674:	88 27       	eor	r24, r24
    d676:	88 1f       	adc	r24, r24
    d678:	90 e0       	ldi	r25, 0x00	; 0
    d67a:	01 96       	adiw	r24, 0x01	; 1
    d67c:	82 0f       	add	r24, r18
    d67e:	91 1d       	adc	r25, r1
    d680:	82 0f       	add	r24, r18
    d682:	91 1d       	adc	r25, r1
    d684:	2e 85       	ldd	r18, Y+14	; 0x0e
    d686:	22 95       	swap	r18
    d688:	26 95       	lsr	r18
    d68a:	26 95       	lsr	r18
    d68c:	23 70       	andi	r18, 0x03	; 3
    d68e:	21 50       	subi	r18, 0x01	; 1
    d690:	02 c0       	rjmp	.+4      	; 0xd696 <mmc_disk_ioctl+0x1da>
    d692:	88 0f       	add	r24, r24
    d694:	99 1f       	adc	r25, r25
    d696:	2a 95       	dec	r18
    d698:	e2 f7       	brpl	.-8      	; 0xd692 <mmc_disk_ioctl+0x1d6>
    d69a:	1c c0       	rjmp	.+56     	; 0xd6d4 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d69c:	38 2f       	mov	r19, r24
    d69e:	33 70       	andi	r19, 0x03	; 3
    d6a0:	82 95       	swap	r24
    d6a2:	86 95       	lsr	r24
    d6a4:	87 70       	andi	r24, 0x07	; 7
    d6a6:	90 e0       	ldi	r25, 0x00	; 0
    d6a8:	f8 e0       	ldi	r31, 0x08	; 8
    d6aa:	3f 9f       	mul	r19, r31
    d6ac:	80 0d       	add	r24, r0
    d6ae:	91 1d       	adc	r25, r1
    d6b0:	11 24       	eor	r1, r1
    d6b2:	01 96       	adiw	r24, 0x01	; 1
    d6b4:	2c 77       	andi	r18, 0x7C	; 124
    d6b6:	30 e0       	ldi	r19, 0x00	; 0
    d6b8:	35 95       	asr	r19
    d6ba:	27 95       	ror	r18
    d6bc:	35 95       	asr	r19
    d6be:	27 95       	ror	r18
    d6c0:	2f 5f       	subi	r18, 0xFF	; 255
    d6c2:	3f 4f       	sbci	r19, 0xFF	; 255
    d6c4:	82 9f       	mul	r24, r18
    d6c6:	a0 01       	movw	r20, r0
    d6c8:	83 9f       	mul	r24, r19
    d6ca:	50 0d       	add	r21, r0
    d6cc:	92 9f       	mul	r25, r18
    d6ce:	50 0d       	add	r21, r0
    d6d0:	11 24       	eor	r1, r1
    d6d2:	ca 01       	movw	r24, r20
    d6d4:	a0 e0       	ldi	r26, 0x00	; 0
    d6d6:	b0 e0       	ldi	r27, 0x00	; 0
    d6d8:	f8 01       	movw	r30, r16
    d6da:	80 83       	st	Z, r24
    d6dc:	91 83       	std	Z+1, r25	; 0x01
    d6de:	a2 83       	std	Z+2, r26	; 0x02
    d6e0:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d6e2:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d6e4:	23 c1       	rjmp	.+582    	; 0xd92c <mmc_disk_ioctl+0x470>
    d6e6:	40 e0       	ldi	r20, 0x00	; 0
    d6e8:	50 e0       	ldi	r21, 0x00	; 0
    d6ea:	ba 01       	movw	r22, r20
    d6ec:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d6ee:	04 c0       	rjmp	.+8      	; 0xd6f8 <mmc_disk_ioctl+0x23c>
    d6f0:	40 e0       	ldi	r20, 0x00	; 0
    d6f2:	50 e0       	ldi	r21, 0x00	; 0
    d6f4:	ba 01       	movw	r22, r20
    d6f6:	8a e0       	ldi	r24, 0x0A	; 10
    d6f8:	fa dc       	rcall	.-1548   	; 0xd0ee <send_cmd>
    d6fa:	81 11       	cpse	r24, r1
    d6fc:	16 c1       	rjmp	.+556    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d6fe:	60 e1       	ldi	r22, 0x10	; 16
    d700:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d702:	1f c0       	rjmp	.+62     	; 0xd742 <mmc_disk_ioctl+0x286>
    d704:	40 e0       	ldi	r20, 0x00	; 0
    d706:	50 e0       	ldi	r21, 0x00	; 0
    d708:	ba 01       	movw	r22, r20
    d70a:	8a e3       	ldi	r24, 0x3A	; 58
    d70c:	f0 dc       	rcall	.-1568   	; 0xd0ee <send_cmd>
    d70e:	81 11       	cpse	r24, r1
    d710:	0c c1       	rjmp	.+536    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d712:	78 01       	movw	r14, r16
    d714:	f4 e0       	ldi	r31, 0x04	; 4
    d716:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d718:	f1 1c       	adc	r15, r1
    d71a:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d71c:	83 d1       	rcall	.+774    	; 0xda24 <mmc_spi_TXRX>
    d71e:	f8 01       	movw	r30, r16
    d720:	81 93       	st	Z+, r24
    d722:	8f 01       	movw	r16, r30
    d724:	ee 15       	cp	r30, r14
    d726:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d728:	c1 f7       	brne	.-16     	; 0xd71a <mmc_disk_ioctl+0x25e>
    d72a:	db cf       	rjmp	.-74     	; 0xd6e2 <mmc_disk_ioctl+0x226>
    d72c:	40 e0       	ldi	r20, 0x00	; 0
    d72e:	50 e0       	ldi	r21, 0x00	; 0
    d730:	ba 01       	movw	r22, r20
    d732:	8d e8       	ldi	r24, 0x8D	; 141
    d734:	dc dc       	rcall	.-1608   	; 0xd0ee <send_cmd>
            {
                xchg_spi(0xFF);
    d736:	81 11       	cpse	r24, r1
    d738:	f8 c0       	rjmp	.+496    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d73a:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d73c:	79 dc       	rcall	.-1806   	; 0xd030 <xchg_spi>
    d73e:	60 e4       	ldi	r22, 0x40	; 64
    d740:	70 e0       	ldi	r23, 0x00	; 0
    d742:	c8 01       	movw	r24, r16
    d744:	7d dc       	rcall	.-1798   	; 0xd040 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d746:	01 e0       	ldi	r16, 0x01	; 1
    d748:	10 e0       	ldi	r17, 0x00	; 0
    d74a:	89 2b       	or	r24, r25
    d74c:	09 f4       	brne	.+2      	; 0xd750 <mmc_disk_ioctl+0x294>
    d74e:	ef c0       	rjmp	.+478    	; 0xd92e <mmc_disk_ioctl+0x472>
    d750:	ea c0       	rjmp	.+468    	; 0xd926 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d752:	97 d1       	rcall	.+814    	; 0xda82 <mmc_power_off>
    d754:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d758:	81 60       	ori	r24, 0x01	; 1
    d75a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d75e:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d760:	eb c0       	rjmp	.+470    	; 0xd938 <mmc_disk_ioctl+0x47c>
    d762:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d764:	43 81       	ldd	r20, Z+3	; 0x03
    d766:	54 81       	ldd	r21, Z+4	; 0x04
    d768:	65 81       	ldd	r22, Z+5	; 0x05
    d76a:	76 81       	ldd	r23, Z+6	; 0x06
    d76c:	39 e0       	ldi	r19, 0x09	; 9
    d76e:	44 0f       	add	r20, r20
    d770:	55 1f       	adc	r21, r21
    d772:	66 1f       	adc	r22, r22
    d774:	77 1f       	adc	r23, r23
    d776:	3a 95       	dec	r19
    d778:	d1 f7       	brne	.-12     	; 0xd76e <mmc_disk_ioctl+0x2b2>
    d77a:	70 68       	ori	r23, 0x80	; 128
    d77c:	80 81       	ld	r24, Z
    d77e:	90 e0       	ldi	r25, 0x00	; 0
    d780:	a0 e0       	ldi	r26, 0x00	; 0
    d782:	b0 e0       	ldi	r27, 0x00	; 0
    d784:	2c e1       	ldi	r18, 0x1C	; 28
    d786:	88 0f       	add	r24, r24
    d788:	99 1f       	adc	r25, r25
    d78a:	aa 1f       	adc	r26, r26
    d78c:	bb 1f       	adc	r27, r27
    d78e:	2a 95       	dec	r18
    d790:	d1 f7       	brne	.-12     	; 0xd786 <mmc_disk_ioctl+0x2ca>
    d792:	48 2b       	or	r20, r24
    d794:	59 2b       	or	r21, r25
    d796:	6a 2b       	or	r22, r26
    d798:	7b 2b       	or	r23, r27
    d79a:	81 81       	ldd	r24, Z+1	; 0x01
    d79c:	92 81       	ldd	r25, Z+2	; 0x02
    d79e:	01 97       	sbiw	r24, 0x01	; 1
    d7a0:	91 70       	andi	r25, 0x01	; 1
    d7a2:	a0 e0       	ldi	r26, 0x00	; 0
    d7a4:	b0 e0       	ldi	r27, 0x00	; 0
    d7a6:	48 2b       	or	r20, r24
    d7a8:	59 2b       	or	r21, r25
    d7aa:	6a 2b       	or	r22, r26
    d7ac:	7b 2b       	or	r23, r27
    d7ae:	80 e3       	ldi	r24, 0x30	; 48
    d7b0:	9e dc       	rcall	.-1732   	; 0xd0ee <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d7b2:	81 11       	cpse	r24, r1
    d7b4:	ba c0       	rjmp	.+372    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d7b6:	88 ee       	ldi	r24, 0xE8	; 232
    d7b8:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d7ba:	37 d1       	rcall	.+622    	; 0xda2a <mmc_set_ms_timeout>
    d7bc:	8f ef       	ldi	r24, 0xFF	; 255
    d7be:	32 d1       	rcall	.+612    	; 0xda24 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d7c0:	8f 3f       	cpi	r24, 0xFF	; 255
    d7c2:	21 f4       	brne	.+8      	; 0xd7cc <mmc_disk_ioctl+0x310>
    d7c4:	39 d1       	rcall	.+626    	; 0xda38 <mmc_test_timeout>
    d7c6:	89 2b       	or	r24, r25
    d7c8:	c9 f3       	breq	.-14     	; 0xd7bc <mmc_disk_ioctl+0x300>
    d7ca:	af c0       	rjmp	.+350    	; 0xd92a <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d7cc:	8e 3f       	cpi	r24, 0xFE	; 254
    d7ce:	09 f0       	breq	.+2      	; 0xd7d2 <mmc_disk_ioctl+0x316>
    d7d0:	ac c0       	rjmp	.+344    	; 0xd92a <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d7d2:	f8 01       	movw	r30, r16
    d7d4:	e7 80       	ldd	r14, Z+7	; 0x07
    d7d6:	f0 84       	ldd	r15, Z+8	; 0x08
    d7d8:	c1 80       	ldd	r12, Z+1	; 0x01
    d7da:	d2 80       	ldd	r13, Z+2	; 0x02
    d7dc:	ce 0c       	add	r12, r14
    d7de:	df 1c       	adc	r13, r15
    d7e0:	ce 14       	cp	r12, r14
    d7e2:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d7e4:	31 f0       	breq	.+12     	; 0xd7f2 <mmc_disk_ioctl+0x336>
    d7e6:	8f ef       	ldi	r24, 0xFF	; 255
    d7e8:	1d d1       	rcall	.+570    	; 0xda24 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d7ea:	f7 01       	movw	r30, r14
    d7ec:	81 93       	st	Z+, r24
    d7ee:	7f 01       	movw	r14, r30
    d7f0:	f7 cf       	rjmp	.-18     	; 0xd7e0 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d7f2:	f8 01       	movw	r30, r16
    d7f4:	81 81       	ldd	r24, Z+1	; 0x01
    d7f6:	92 81       	ldd	r25, Z+2	; 0x02
    d7f8:	02 e0       	ldi	r16, 0x02	; 2
    d7fa:	12 e0       	ldi	r17, 0x02	; 2
    d7fc:	08 1b       	sub	r16, r24
    d7fe:	19 0b       	sbc	r17, r25
    d800:	01 15       	cp	r16, r1
    d802:	11 05       	cpc	r17, r1
    d804:	09 f4       	brne	.+2      	; 0xd808 <mmc_disk_ioctl+0x34c>
    d806:	6d cf       	rjmp	.-294    	; 0xd6e2 <mmc_disk_ioctl+0x226>
    d808:	8f ef       	ldi	r24, 0xFF	; 255
    d80a:	12 dc       	rcall	.-2012   	; 0xd030 <xchg_spi>
    d80c:	01 50       	subi	r16, 0x01	; 1
    d80e:	11 09       	sbc	r17, r1
    d810:	f7 cf       	rjmp	.-18     	; 0xd800 <mmc_disk_ioctl+0x344>
    d812:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d814:	43 81       	ldd	r20, Z+3	; 0x03
    d816:	54 81       	ldd	r21, Z+4	; 0x04
    d818:	65 81       	ldd	r22, Z+5	; 0x05
    d81a:	76 81       	ldd	r23, Z+6	; 0x06
    d81c:	39 e0       	ldi	r19, 0x09	; 9
    d81e:	44 0f       	add	r20, r20
    d820:	55 1f       	adc	r21, r21
    d822:	66 1f       	adc	r22, r22
    d824:	77 1f       	adc	r23, r23
    d826:	3a 95       	dec	r19
    d828:	d1 f7       	brne	.-12     	; 0xd81e <mmc_disk_ioctl+0x362>
    d82a:	70 68       	ori	r23, 0x80	; 128
    d82c:	80 81       	ld	r24, Z
    d82e:	90 e0       	ldi	r25, 0x00	; 0
    d830:	a0 e0       	ldi	r26, 0x00	; 0
    d832:	b0 e0       	ldi	r27, 0x00	; 0
    d834:	2c e1       	ldi	r18, 0x1C	; 28
    d836:	88 0f       	add	r24, r24
    d838:	99 1f       	adc	r25, r25
    d83a:	aa 1f       	adc	r26, r26
    d83c:	bb 1f       	adc	r27, r27
    d83e:	2a 95       	dec	r18
    d840:	d1 f7       	brne	.-12     	; 0xd836 <mmc_disk_ioctl+0x37a>
    d842:	48 2b       	or	r20, r24
    d844:	59 2b       	or	r21, r25
    d846:	6a 2b       	or	r22, r26
    d848:	7b 2b       	or	r23, r27
    d84a:	81 81       	ldd	r24, Z+1	; 0x01
    d84c:	92 81       	ldd	r25, Z+2	; 0x02
    d84e:	01 97       	sbiw	r24, 0x01	; 1
    d850:	91 70       	andi	r25, 0x01	; 1
    d852:	a0 e0       	ldi	r26, 0x00	; 0
    d854:	b0 e0       	ldi	r27, 0x00	; 0
    d856:	48 2b       	or	r20, r24
    d858:	59 2b       	or	r21, r25
    d85a:	6a 2b       	or	r22, r26
    d85c:	7b 2b       	or	r23, r27
    d85e:	81 e3       	ldi	r24, 0x31	; 49
    d860:	46 dc       	rcall	.-1908   	; 0xd0ee <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d862:	81 11       	cpse	r24, r1
    d864:	62 c0       	rjmp	.+196    	; 0xd92a <mmc_disk_ioctl+0x46e>
    d866:	8f ef       	ldi	r24, 0xFF	; 255
    d868:	e3 db       	rcall	.-2106   	; 0xd030 <xchg_spi>
    d86a:	8e ef       	ldi	r24, 0xFE	; 254
    d86c:	e1 db       	rcall	.-2110   	; 0xd030 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    d86e:	f8 01       	movw	r30, r16
    d870:	e7 80       	ldd	r14, Z+7	; 0x07
    d872:	f0 84       	ldd	r15, Z+8	; 0x08
    d874:	c1 80       	ldd	r12, Z+1	; 0x01
    d876:	d2 80       	ldd	r13, Z+2	; 0x02
    d878:	ce 0c       	add	r12, r14
    d87a:	df 1c       	adc	r13, r15
    d87c:	ec 14       	cp	r14, r12
    d87e:	fd 04       	cpc	r15, r13
    d880:	29 f0       	breq	.+10     	; 0xd88c <mmc_disk_ioctl+0x3d0>
    d882:	f7 01       	movw	r30, r14
    d884:	81 91       	ld	r24, Z+
    d886:	7f 01       	movw	r14, r30
    d888:	d3 db       	rcall	.-2138   	; 0xd030 <xchg_spi>
    d88a:	f8 cf       	rjmp	.-16     	; 0xd87c <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d88c:	f8 01       	movw	r30, r16
    d88e:	81 81       	ldd	r24, Z+1	; 0x01
    d890:	92 81       	ldd	r25, Z+2	; 0x02
    d892:	02 e0       	ldi	r16, 0x02	; 2
    d894:	12 e0       	ldi	r17, 0x02	; 2
    d896:	08 1b       	sub	r16, r24
    d898:	19 0b       	sbc	r17, r25
    d89a:	8f ef       	ldi	r24, 0xFF	; 255
    d89c:	01 15       	cp	r16, r1
    d89e:	11 05       	cpc	r17, r1
    d8a0:	09 f4       	brne	.+2      	; 0xd8a4 <mmc_disk_ioctl+0x3e8>
    d8a2:	3b c0       	rjmp	.+118    	; 0xd91a <mmc_disk_ioctl+0x45e>
    d8a4:	c5 db       	rcall	.-2166   	; 0xd030 <xchg_spi>
    d8a6:	01 50       	subi	r16, 0x01	; 1
    d8a8:	11 09       	sbc	r17, r1
    d8aa:	f7 cf       	rjmp	.-18     	; 0xd89a <mmc_disk_ioctl+0x3de>
    d8ac:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    d8ae:	43 81       	ldd	r20, Z+3	; 0x03
    d8b0:	54 81       	ldd	r21, Z+4	; 0x04
    d8b2:	65 81       	ldd	r22, Z+5	; 0x05
    d8b4:	76 81       	ldd	r23, Z+6	; 0x06
    d8b6:	89 e0       	ldi	r24, 0x09	; 9
    d8b8:	44 0f       	add	r20, r20
    d8ba:	55 1f       	adc	r21, r21
    d8bc:	66 1f       	adc	r22, r22
    d8be:	77 1f       	adc	r23, r23
    d8c0:	8a 95       	dec	r24
    d8c2:	d1 f7       	brne	.-12     	; 0xd8b8 <mmc_disk_ioctl+0x3fc>
    d8c4:	74 68       	ori	r23, 0x84	; 132
    d8c6:	80 81       	ld	r24, Z
    d8c8:	90 e0       	ldi	r25, 0x00	; 0
    d8ca:	a0 e0       	ldi	r26, 0x00	; 0
    d8cc:	b0 e0       	ldi	r27, 0x00	; 0
    d8ce:	2c e1       	ldi	r18, 0x1C	; 28
    d8d0:	88 0f       	add	r24, r24
    d8d2:	99 1f       	adc	r25, r25
    d8d4:	aa 1f       	adc	r26, r26
    d8d6:	bb 1f       	adc	r27, r27
    d8d8:	2a 95       	dec	r18
    d8da:	d1 f7       	brne	.-12     	; 0xd8d0 <mmc_disk_ioctl+0x414>
    d8dc:	48 2b       	or	r20, r24
    d8de:	59 2b       	or	r21, r25
    d8e0:	6a 2b       	or	r22, r26
    d8e2:	7b 2b       	or	r23, r27
    d8e4:	82 81       	ldd	r24, Z+2	; 0x02
    d8e6:	90 e0       	ldi	r25, 0x00	; 0
    d8e8:	a0 e0       	ldi	r26, 0x00	; 0
    d8ea:	b0 e0       	ldi	r27, 0x00	; 0
    d8ec:	48 2b       	or	r20, r24
    d8ee:	59 2b       	or	r21, r25
    d8f0:	6a 2b       	or	r22, r26
    d8f2:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d8f4:	81 e3       	ldi	r24, 0x31	; 49
    d8f6:	fb db       	rcall	.-2058   	; 0xd0ee <send_cmd>
    d8f8:	81 11       	cpse	r24, r1
    d8fa:	17 c0       	rjmp	.+46     	; 0xd92a <mmc_disk_ioctl+0x46e>
    d8fc:	8f ef       	ldi	r24, 0xFF	; 255
    d8fe:	98 db       	rcall	.-2256   	; 0xd030 <xchg_spi>
                xchg_spi(sdi->ndata);
    d900:	8e ef       	ldi	r24, 0xFE	; 254
    d902:	96 db       	rcall	.-2260   	; 0xd030 <xchg_spi>
    d904:	f8 01       	movw	r30, r16
    d906:	81 81       	ldd	r24, Z+1	; 0x01
    d908:	93 db       	rcall	.-2266   	; 0xd030 <xchg_spi>
    d90a:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    d90c:	12 e0       	ldi	r17, 0x02	; 2
    d90e:	8f ef       	ldi	r24, 0xFF	; 255
    d910:	8f db       	rcall	.-2274   	; 0xd030 <xchg_spi>
    d912:	01 50       	subi	r16, 0x01	; 1
    d914:	11 09       	sbc	r17, r1
    d916:	d9 f7       	brne	.-10     	; 0xd90e <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d918:	8f ef       	ldi	r24, 0xFF	; 255
    d91a:	84 d0       	rcall	.+264    	; 0xda24 <mmc_spi_TXRX>
    d91c:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d91e:	01 e0       	ldi	r16, 0x01	; 1
    d920:	10 e0       	ldi	r17, 0x00	; 0
    d922:	85 30       	cpi	r24, 0x05	; 5
    d924:	21 f4       	brne	.+8      	; 0xd92e <mmc_disk_ioctl+0x472>
    d926:	00 e0       	ldi	r16, 0x00	; 0
    d928:	02 c0       	rjmp	.+4      	; 0xd92e <mmc_disk_ioctl+0x472>
    d92a:	01 e0       	ldi	r16, 0x01	; 1
    d92c:	10 e0       	ldi	r17, 0x00	; 0
    d92e:	82 db       	rcall	.-2300   	; 0xd034 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    d930:	04 c0       	rjmp	.+8      	; 0xd93a <mmc_disk_ioctl+0x47e>
    d932:	03 e0       	ldi	r16, 0x03	; 3
            break;
    d934:	01 c0       	rjmp	.+2      	; 0xd938 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    d936:	04 e0       	ldi	r16, 0x04	; 4
    d938:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    d93a:	c8 01       	movw	r24, r16
    d93c:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    d93e:	e8 e0       	ldi	r30, 0x08	; 8
    d940:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000d944 <mmc_disk_timerproc>:
    d944:	cf 93       	push	r28
    d946:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    d94a:	88 23       	and	r24, r24
    d94c:	19 f0       	breq	.+6      	; 0xd954 <mmc_disk_timerproc+0x10>
    d94e:	81 50       	subi	r24, 0x01	; 1
    d950:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <Timer1>
    n = Timer2;
    d954:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <Timer2>
    if (n) Timer2 = --n;
    d958:	88 23       	and	r24, r24
    d95a:	19 f0       	breq	.+6      	; 0xd962 <mmc_disk_timerproc+0x1e>
    d95c:	81 50       	subi	r24, 0x01	; 1
    d95e:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <Timer2>

    s = Stat;
    d962:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    d966:	8e d0       	rcall	.+284    	; 0xda84 <mmc_ins_status>
    d968:	89 2b       	or	r24, r25
    d96a:	11 f0       	breq	.+4      	; 0xd970 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    d96c:	cd 7f       	andi	r28, 0xFD	; 253
    d96e:	04 c0       	rjmp	.+8      	; 0xd978 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    d970:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    d972:	81 e0       	ldi	r24, 0x01	; 1
    d974:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    d978:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    d97c:	cf 91       	pop	r28
    d97e:	08 95       	ret

0000d980 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    d980:	00 d0       	rcall	.+0      	; 0xd982 <mmc_install_timer+0x2>
    d982:	1f 92       	push	r1
    d984:	10 92 37 18 	sts	0x1837, r1	; 0x801837 <_mmc_timeout+0x1>
    d988:	10 92 36 18 	sts	0x1836, r1	; 0x801836 <_mmc_timeout>
    d98c:	61 e0       	ldi	r22, 0x01	; 1
    d98e:	70 e0       	ldi	r23, 0x00	; 0
    d990:	8f e4       	ldi	r24, 0x4F	; 79
    d992:	9d e6       	ldi	r25, 0x6D	; 109
    d994:	0e 94 02 33 	call	0x6604	; 0x6604 <set_timers>
    d998:	01 96       	adiw	r24, 0x01	; 1
    d99a:	51 f4       	brne	.+20     	; 0xd9b0 <mmc_install_timer+0x30>
    d99c:	87 e2       	ldi	r24, 0x27	; 39
    d99e:	98 e0       	ldi	r25, 0x08	; 8
    d9a0:	a0 e0       	ldi	r26, 0x00	; 0
    d9a2:	ed b7       	in	r30, 0x3d	; 61
    d9a4:	fe b7       	in	r31, 0x3e	; 62
    d9a6:	81 83       	std	Z+1, r24	; 0x01
    d9a8:	92 83       	std	Z+2, r25	; 0x02
    d9aa:	a3 83       	std	Z+3, r26	; 0x03
    d9ac:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    d9b0:	0f 90       	pop	r0
    d9b2:	0f 90       	pop	r0
    d9b4:	0f 90       	pop	r0
    d9b6:	08 95       	ret

0000d9b8 <mmc_spi_begin>:
    d9b8:	60 91 32 18 	lds	r22, 0x1832	; 0x801832 <_mmc_clock>
    d9bc:	70 91 33 18 	lds	r23, 0x1833	; 0x801833 <_mmc_clock+0x1>
    d9c0:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <_mmc_clock+0x2>
    d9c4:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <_mmc_clock+0x3>
    d9c8:	4b e0       	ldi	r20, 0x0B	; 11
    d9ca:	50 e0       	ldi	r21, 0x00	; 0
    d9cc:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <spi_begin>
    d9d0:	08 95       	ret

0000d9d2 <mmc_spi_end>:
    d9d2:	8b e0       	ldi	r24, 0x0B	; 11
    d9d4:	0c 94 91 24 	jmp	0x4922	; 0x4922 <spi_end>
    d9d8:	08 95       	ret

0000d9da <mmc_slow>:
    d9da:	80 e2       	ldi	r24, 0x20	; 32
    d9dc:	91 ea       	ldi	r25, 0xA1	; 161
    d9de:	a7 e0       	ldi	r26, 0x07	; 7
    d9e0:	b0 e0       	ldi	r27, 0x00	; 0
    d9e2:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    d9e6:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    d9ea:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    d9ee:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    d9f2:	08 95       	ret

0000d9f4 <mmc_spi_init>:
    d9f4:	8b e0       	ldi	r24, 0x0B	; 11
    d9f6:	0e 94 8f 24 	call	0x491e	; 0x491e <chip_select_init>
    d9fa:	ef cf       	rjmp	.-34     	; 0xd9da <mmc_slow>
    d9fc:	08 95       	ret

0000d9fe <mmc_fast>:
    d9fe:	80 ea       	ldi	r24, 0xA0	; 160
    da00:	95 e2       	ldi	r25, 0x25	; 37
    da02:	a6 e2       	ldi	r26, 0x26	; 38
    da04:	b0 e0       	ldi	r27, 0x00	; 0
    da06:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_clock>
    da0a:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_clock+0x1>
    da0e:	a0 93 34 18 	sts	0x1834, r26	; 0x801834 <_mmc_clock+0x2>
    da12:	b0 93 35 18 	sts	0x1835, r27	; 0x801835 <_mmc_clock+0x3>
    da16:	08 95       	ret

0000da18 <mmc_spi_TX_buffer>:
    da18:	0c 94 c1 24 	jmp	0x4982	; 0x4982 <spi_TX_buffer>
    da1c:	08 95       	ret

0000da1e <mmc_spi_RX_buffer>:
    da1e:	0c 94 c3 24 	jmp	0x4986	; 0x4986 <spi_RX_buffer>
    da22:	08 95       	ret

0000da24 <mmc_spi_TXRX>:
    da24:	0c 94 3d 25 	jmp	0x4a7a	; 0x4a7a <spi_TXRX>
    da28:	08 95       	ret

0000da2a <mmc_set_ms_timeout>:
    da2a:	f8 94       	cli
    da2c:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    da30:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>
    da34:	78 94       	sei
    da36:	08 95       	ret

0000da38 <mmc_test_timeout>:
    da38:	00 d0       	rcall	.+0      	; 0xda3a <mmc_test_timeout+0x2>
    da3a:	1f 92       	push	r1
    da3c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da40:	81 fd       	sbrc	r24, 1
    da42:	15 c0       	rjmp	.+42     	; 0xda6e <mmc_test_timeout+0x36>
    da44:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    da48:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    da4c:	89 2b       	or	r24, r25
    da4e:	91 f4       	brne	.+36     	; 0xda74 <mmc_test_timeout+0x3c>
    da50:	8a e1       	ldi	r24, 0x1A	; 26
    da52:	98 e0       	ldi	r25, 0x08	; 8
    da54:	a0 e0       	ldi	r26, 0x00	; 0
    da56:	ed b7       	in	r30, 0x3d	; 61
    da58:	fe b7       	in	r31, 0x3e	; 62
    da5a:	81 83       	std	Z+1, r24	; 0x01
    da5c:	92 83       	std	Z+2, r25	; 0x02
    da5e:	a3 83       	std	Z+3, r26	; 0x03
    da60:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    da64:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da68:	83 60       	ori	r24, 0x03	; 3
    da6a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    da6e:	81 e0       	ldi	r24, 0x01	; 1
    da70:	90 e0       	ldi	r25, 0x00	; 0
    da72:	02 c0       	rjmp	.+4      	; 0xda78 <mmc_test_timeout+0x40>
    da74:	80 e0       	ldi	r24, 0x00	; 0
    da76:	90 e0       	ldi	r25, 0x00	; 0
    da78:	0f 90       	pop	r0
    da7a:	0f 90       	pop	r0
    da7c:	0f 90       	pop	r0
    da7e:	08 95       	ret

0000da80 <mmc_power_on>:
    da80:	08 95       	ret

0000da82 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    da82:	08 95       	ret

0000da84 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    da84:	3f 98       	cbi	0x07, 7	; 7
    da86:	86 b1       	in	r24, 0x06	; 6
    da88:	08 2e       	mov	r0, r24
    da8a:	00 0c       	add	r0, r0
    da8c:	99 0b       	sbc	r25, r25
    da8e:	80 95       	com	r24
    da90:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    da92:	89 2f       	mov	r24, r25
    da94:	88 1f       	adc	r24, r24
    da96:	88 27       	eor	r24, r24
    da98:	88 1f       	adc	r24, r24
    da9a:	90 e0       	ldi	r25, 0x00	; 0
    da9c:	08 95       	ret

0000da9e <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    da9e:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <_mmc_timeout>
    daa2:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <_mmc_timeout+0x1>
    daa6:	00 97       	sbiw	r24, 0x00	; 0
    daa8:	29 f0       	breq	.+10     	; 0xdab4 <mmc_task+0x16>
        _mmc_timeout--;
    daaa:	01 97       	sbiw	r24, 0x01	; 1
    daac:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_timeout+0x1>
    dab0:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dab4:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_mmc_pre>
    dab8:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_mmc_pre+0x1>
    dabc:	8a 30       	cpi	r24, 0x0A	; 10
    dabe:	91 05       	cpc	r25, r1
    dac0:	30 f4       	brcc	.+12     	; 0xdace <mmc_task+0x30>
    dac2:	01 96       	adiw	r24, 0x01	; 1
    dac4:	90 93 31 18 	sts	0x1831, r25	; 0x801831 <_mmc_pre+0x1>
    dac8:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <_mmc_pre>
    dacc:	08 95       	ret
        return;

    _mmc_pre = 0;
    dace:	10 92 31 18 	sts	0x1831, r1	; 0x801831 <_mmc_pre+0x1>
    dad2:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_mmc_pre>

	if(!mmc_ins_status())
    dad6:	d6 df       	rcall	.-84     	; 0xda84 <mmc_ins_status>
    dad8:	89 2b       	or	r24, r25
    dada:	19 f4       	brne	.+6      	; 0xdae2 <mmc_task+0x44>
		set_error(1);
    dadc:	81 e0       	ldi	r24, 0x01	; 1
    dade:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <set_error>

    mmc_disk_timerproc();
    dae2:	30 cf       	rjmp	.-416    	; 0xd944 <mmc_disk_timerproc>
    dae4:	08 95       	ret

0000dae6 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dae6:	ab e0       	ldi	r26, 0x0B	; 11
    dae8:	b0 e0       	ldi	r27, 0x00	; 0
    daea:	e9 e7       	ldi	r30, 0x79	; 121
    daec:	fd e6       	ldi	r31, 0x6D	; 109
    daee:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
    daf2:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    daf4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    daf8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dafc:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dafe:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    db00:	79 df       	rcall	.-270    	; 0xd9f4 <mmc_spi_init>

    if( verbose)
    db02:	e1 14       	cp	r14, r1
    db04:	f1 04       	cpc	r15, r1
    db06:	51 f0       	breq	.+20     	; 0xdb1c <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    db08:	8a e0       	ldi	r24, 0x0A	; 10
    db0a:	98 e0       	ldi	r25, 0x08	; 8
    db0c:	a0 e0       	ldi	r26, 0x00	; 0
    db0e:	ed b7       	in	r30, 0x3d	; 61
    db10:	fe b7       	in	r31, 0x3e	; 62
    db12:	81 83       	std	Z+1, r24	; 0x01
    db14:	92 83       	std	Z+2, r25	; 0x02
    db16:	a3 83       	std	Z+3, r26	; 0x03
    db18:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    db1c:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <mmc_init_flag>
    db20:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <mmc_init_flag+0x1>
    db24:	89 2b       	or	r24, r25
        mmc_install_timer();
    db26:	09 f4       	brne	.+2      	; 0xdb2a <mmc_init+0x44>

	if(!mmc_ins_status())
    db28:	2b df       	rcall	.-426    	; 0xd980 <mmc_install_timer>
    db2a:	ac df       	rcall	.-168    	; 0xda84 <mmc_ins_status>
    db2c:	89 2b       	or	r24, r25
    db2e:	61 f4       	brne	.+24     	; 0xdb48 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    db30:	8a ee       	ldi	r24, 0xEA	; 234
    db32:	97 e0       	ldi	r25, 0x07	; 7
    db34:	a0 e0       	ldi	r26, 0x00	; 0
    db36:	ed b7       	in	r30, 0x3d	; 61
    db38:	fe b7       	in	r31, 0x3e	; 62
    db3a:	81 83       	std	Z+1, r24	; 0x01
    db3c:	92 83       	std	Z+2, r25	; 0x02
    db3e:	a3 83       	std	Z+3, r26	; 0x03
    db40:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		return(RES_NOTRDY);	
    db44:	83 e0       	ldi	r24, 0x03	; 3
    db46:	8b c0       	rjmp	.+278    	; 0xdc5e <mmc_init+0x178>
	}


    if( verbose)
    db48:	e1 14       	cp	r14, r1
    db4a:	f1 04       	cpc	r15, r1
    db4c:	11 f1       	breq	.+68     	; 0xdb92 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    db4e:	87 ed       	ldi	r24, 0xD7	; 215
    db50:	97 e0       	ldi	r25, 0x07	; 7
    db52:	a0 e0       	ldi	r26, 0x00	; 0
    db54:	ed b7       	in	r30, 0x3d	; 61
    db56:	fe b7       	in	r31, 0x3e	; 62
    db58:	81 83       	std	Z+1, r24	; 0x01
    db5a:	92 83       	std	Z+2, r25	; 0x02
    db5c:	a3 83       	std	Z+3, r26	; 0x03
    db5e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    db62:	8b ec       	ldi	r24, 0xCB	; 203
    db64:	97 e0       	ldi	r25, 0x07	; 7
    db66:	a0 e0       	ldi	r26, 0x00	; 0
    db68:	ed b7       	in	r30, 0x3d	; 61
    db6a:	fe b7       	in	r31, 0x3e	; 62
    db6c:	81 83       	std	Z+1, r24	; 0x01
    db6e:	92 83       	std	Z+2, r25	; 0x02
    db70:	a3 83       	std	Z+3, r26	; 0x03
    db72:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    db76:	85 eb       	ldi	r24, 0xB5	; 181
    db78:	91 e0       	ldi	r25, 0x01	; 1
    db7a:	ed b7       	in	r30, 0x3d	; 61
    db7c:	fe b7       	in	r31, 0x3e	; 62
    db7e:	95 83       	std	Z+5, r25	; 0x05
    db80:	84 83       	std	Z+4, r24	; 0x04
    db82:	8a eb       	ldi	r24, 0xBA	; 186
    db84:	97 e0       	ldi	r25, 0x07	; 7
    db86:	a0 e0       	ldi	r26, 0x00	; 0
    db88:	81 83       	std	Z+1, r24	; 0x01
    db8a:	92 83       	std	Z+2, r25	; 0x02
    db8c:	a3 83       	std	Z+3, r26	; 0x03
    db8e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    db92:	80 e0       	ldi	r24, 0x00	; 0
    db94:	1d da       	rcall	.-3014   	; 0xcfd0 <disk_initialize>
    db96:	08 2f       	mov	r16, r24
    db98:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    db9a:	01 15       	cp	r16, r1
    db9c:	11 05       	cpc	r17, r1
        put_rc(rc);
    db9e:	19 f0       	breq	.+6      	; 0xdba6 <mmc_init+0xc0>
    dba0:	c8 01       	movw	r24, r16
    dba2:	e4 d0       	rcall	.+456    	; 0xdd6c <put_rc>
    dba4:	0e c0       	rjmp	.+28     	; 0xdbc2 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dba6:	40 e0       	ldi	r20, 0x00	; 0
    dba8:	66 ea       	ldi	r22, 0xA6	; 166
    dbaa:	78 e0       	ldi	r23, 0x08	; 8
    dbac:	88 e8       	ldi	r24, 0x88	; 136
    dbae:	9a e1       	ldi	r25, 0x1A	; 26
    dbb0:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <f_mount>
    dbb4:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dbb6:	89 2b       	or	r24, r25
    dbb8:	21 f4       	brne	.+8      	; 0xdbc2 <mmc_init+0xdc>
    dbba:	e1 14       	cp	r14, r1
    dbbc:	f1 04       	cpc	r15, r1
    dbbe:	09 f4       	brne	.+2      	; 0xdbc2 <mmc_init+0xdc>
        put_rc( rc );
    dbc0:	40 c0       	rjmp	.+128    	; 0xdc42 <mmc_init+0x15c>
    dbc2:	c8 01       	movw	r24, r16
    dbc4:	d3 d0       	rcall	.+422    	; 0xdd6c <put_rc>

    if (verbose )
    dbc6:	e1 14       	cp	r14, r1
    dbc8:	f1 04       	cpc	r15, r1
    dbca:	d9 f1       	breq	.+118    	; 0xdc42 <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    dbcc:	18 86       	std	Y+8, r1	; 0x08
    dbce:	19 86       	std	Y+9, r1	; 0x09
    dbd0:	1a 86       	std	Y+10, r1	; 0x0a
    dbd2:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    dbd4:	01 15       	cp	r16, r1
    dbd6:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    dbd8:	51 f5       	brne	.+84     	; 0xdc2e <mmc_init+0x148>
    dbda:	ae 01       	movw	r20, r28
    dbdc:	48 5f       	subi	r20, 0xF8	; 248
    dbde:	5f 4f       	sbci	r21, 0xFF	; 255
    dbe0:	63 e0       	ldi	r22, 0x03	; 3
    dbe2:	80 e0       	ldi	r24, 0x00	; 0
    dbe4:	1b da       	rcall	.-3018   	; 0xd01c <disk_ioctl>
            if( rc != RES_OK)
    dbe6:	8c 01       	movw	r16, r24
    dbe8:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dbea:	61 f0       	breq	.+24     	; 0xdc04 <mmc_init+0x11e>
    dbec:	bf d0       	rcall	.+382    	; 0xdd6c <put_rc>
                printf("MMC Block Size - read failed\n");
    dbee:	8c e9       	ldi	r24, 0x9C	; 156
    dbf0:	97 e0       	ldi	r25, 0x07	; 7
    dbf2:	a0 e0       	ldi	r26, 0x00	; 0
    dbf4:	ed b7       	in	r30, 0x3d	; 61
    dbf6:	fe b7       	in	r31, 0x3e	; 62
    dbf8:	81 83       	std	Z+1, r24	; 0x01
    dbfa:	92 83       	std	Z+2, r25	; 0x02
    dbfc:	a3 83       	std	Z+3, r26	; 0x03
    dbfe:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    dc02:	15 c0       	rjmp	.+42     	; 0xdc2e <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dc04:	88 85       	ldd	r24, Y+8	; 0x08
    dc06:	99 85       	ldd	r25, Y+9	; 0x09
    dc08:	aa 85       	ldd	r26, Y+10	; 0x0a
    dc0a:	bb 85       	ldd	r27, Y+11	; 0x0b
    dc0c:	ed b7       	in	r30, 0x3d	; 61
    dc0e:	fe b7       	in	r31, 0x3e	; 62
    dc10:	84 83       	std	Z+4, r24	; 0x04
    dc12:	95 83       	std	Z+5, r25	; 0x05
    dc14:	a6 83       	std	Z+6, r26	; 0x06
    dc16:	b7 83       	std	Z+7, r27	; 0x07
    dc18:	87 e8       	ldi	r24, 0x87	; 135
    dc1a:	97 e0       	ldi	r25, 0x07	; 7
    dc1c:	a0 e0       	ldi	r26, 0x00	; 0
    dc1e:	81 83       	std	Z+1, r24	; 0x01
    dc20:	92 83       	std	Z+2, r25	; 0x02
    dc22:	a3 83       	std	Z+3, r26	; 0x03
    dc24:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    dc28:	86 ea       	ldi	r24, 0xA6	; 166
    dc2a:	98 e0       	ldi	r25, 0x08	; 8
    dc2c:	33 d1       	rcall	.+614    	; 0xde94 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dc2e:	89 e7       	ldi	r24, 0x79	; 121
    dc30:	97 e0       	ldi	r25, 0x07	; 7
    dc32:	a0 e0       	ldi	r26, 0x00	; 0
    dc34:	ed b7       	in	r30, 0x3d	; 61
    dc36:	fe b7       	in	r31, 0x3e	; 62
    dc38:	81 83       	std	Z+1, r24	; 0x01
    dc3a:	92 83       	std	Z+2, r25	; 0x02
    dc3c:	a3 83       	std	Z+3, r26	; 0x03
    dc3e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }
    mmc_init_flag = 1;
    dc42:	81 e0       	ldi	r24, 0x01	; 1
    dc44:	90 e0       	ldi	r25, 0x00	; 0
    dc46:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <mmc_init_flag+0x1>
    dc4a:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <mmc_init_flag>

	if(rc != RES_OK)
    dc4e:	01 15       	cp	r16, r1
    dc50:	11 05       	cpc	r17, r1
    dc52:	21 f0       	breq	.+8      	; 0xdc5c <mmc_init+0x176>
		set_error(1);
    dc54:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <set_error>
    dc58:	c8 01       	movw	r24, r16
    dc5a:	02 c0       	rjmp	.+4      	; 0xdc60 <mmc_init+0x17a>
    dc5c:	80 e0       	ldi	r24, 0x00	; 0
    dc5e:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dc60:	2b 96       	adiw	r28, 0x0b	; 11
    dc62:	e6 e0       	ldi	r30, 0x06	; 6
    dc64:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

0000dc68 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dc68:	80 e0       	ldi	r24, 0x00	; 0
    dc6a:	90 e0       	ldi	r25, 0x00	; 0
    dc6c:	08 95       	ret

0000dc6e <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dc6e:	0f 93       	push	r16
    dc70:	1f 93       	push	r17
    dc72:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dc74:	46 81       	ldd	r20, Z+6	; 0x06
    dc76:	57 81       	ldd	r21, Z+7	; 0x07
    dc78:	05 2e       	mov	r0, r21
    dc7a:	00 0c       	add	r0, r0
    dc7c:	66 0b       	sbc	r22, r22
    dc7e:	77 0b       	sbc	r23, r23
    dc80:	ba 01       	movw	r22, r20
    dc82:	55 27       	eor	r21, r21
    dc84:	44 27       	eor	r20, r20
    dc86:	84 81       	ldd	r24, Z+4	; 0x04
    dc88:	95 81       	ldd	r25, Z+5	; 0x05
    dc8a:	09 2e       	mov	r0, r25
    dc8c:	00 0c       	add	r0, r0
    dc8e:	aa 0b       	sbc	r26, r26
    dc90:	bb 0b       	sbc	r27, r27
    dc92:	2b e0       	ldi	r18, 0x0B	; 11
    dc94:	88 0f       	add	r24, r24
    dc96:	99 1f       	adc	r25, r25
    dc98:	aa 1f       	adc	r26, r26
    dc9a:	bb 1f       	adc	r27, r27
    dc9c:	2a 95       	dec	r18
    dc9e:	d1 f7       	brne	.-12     	; 0xdc94 <tm_to_fat+0x26>
    dca0:	48 2b       	or	r20, r24
    dca2:	59 2b       	or	r21, r25
    dca4:	6a 2b       	or	r22, r26
    dca6:	7b 2b       	or	r23, r27
    dca8:	82 81       	ldd	r24, Z+2	; 0x02
    dcaa:	93 81       	ldd	r25, Z+3	; 0x03
    dcac:	09 2e       	mov	r0, r25
    dcae:	00 0c       	add	r0, r0
    dcb0:	aa 0b       	sbc	r26, r26
    dcb2:	bb 0b       	sbc	r27, r27
    dcb4:	35 e0       	ldi	r19, 0x05	; 5
    dcb6:	88 0f       	add	r24, r24
    dcb8:	99 1f       	adc	r25, r25
    dcba:	aa 1f       	adc	r26, r26
    dcbc:	bb 1f       	adc	r27, r27
    dcbe:	3a 95       	dec	r19
    dcc0:	d1 f7       	brne	.-12     	; 0xdcb6 <tm_to_fat+0x48>
    dcc2:	48 2b       	or	r20, r24
    dcc4:	59 2b       	or	r21, r25
    dcc6:	6a 2b       	or	r22, r26
    dcc8:	7b 2b       	or	r23, r27
    dcca:	80 81       	ld	r24, Z
    dccc:	91 81       	ldd	r25, Z+1	; 0x01
    dcce:	09 2e       	mov	r0, r25
    dcd0:	00 0c       	add	r0, r0
    dcd2:	aa 0b       	sbc	r26, r26
    dcd4:	bb 0b       	sbc	r27, r27
    dcd6:	b6 95       	lsr	r27
    dcd8:	a7 95       	ror	r26
    dcda:	97 95       	ror	r25
    dcdc:	87 95       	ror	r24
    dcde:	84 2b       	or	r24, r20
    dce0:	95 2b       	or	r25, r21
    dce2:	a6 2b       	or	r26, r22
    dce4:	b7 2b       	or	r27, r23
    dce6:	02 85       	ldd	r16, Z+10	; 0x0a
    dce8:	13 85       	ldd	r17, Z+11	; 0x0b
    dcea:	00 55       	subi	r16, 0x50	; 80
    dcec:	11 09       	sbc	r17, r1
    dcee:	01 2e       	mov	r0, r17
    dcf0:	00 0c       	add	r0, r0
    dcf2:	22 0b       	sbc	r18, r18
    dcf4:	33 0b       	sbc	r19, r19
    dcf6:	49 e1       	ldi	r20, 0x19	; 25
    dcf8:	00 0f       	add	r16, r16
    dcfa:	11 1f       	adc	r17, r17
    dcfc:	22 1f       	adc	r18, r18
    dcfe:	33 1f       	adc	r19, r19
    dd00:	4a 95       	dec	r20
    dd02:	d1 f7       	brne	.-12     	; 0xdcf8 <tm_to_fat+0x8a>
    dd04:	ac 01       	movw	r20, r24
    dd06:	bd 01       	movw	r22, r26
    dd08:	40 2b       	or	r20, r16
    dd0a:	51 2b       	or	r21, r17
    dd0c:	62 2b       	or	r22, r18
    dd0e:	73 2b       	or	r23, r19
    dd10:	80 85       	ldd	r24, Z+8	; 0x08
    dd12:	91 85       	ldd	r25, Z+9	; 0x09
    dd14:	09 2e       	mov	r0, r25
    dd16:	00 0c       	add	r0, r0
    dd18:	aa 0b       	sbc	r26, r26
    dd1a:	bb 0b       	sbc	r27, r27
    dd1c:	01 96       	adiw	r24, 0x01	; 1
    dd1e:	a1 1d       	adc	r26, r1
    dd20:	b1 1d       	adc	r27, r1
    dd22:	e5 e1       	ldi	r30, 0x15	; 21
    dd24:	88 0f       	add	r24, r24
    dd26:	99 1f       	adc	r25, r25
    dd28:	aa 1f       	adc	r26, r26
    dd2a:	bb 1f       	adc	r27, r27
    dd2c:	ea 95       	dec	r30
    dd2e:	d1 f7       	brne	.-12     	; 0xdd24 <tm_to_fat+0xb6>
    dd30:	8a 01       	movw	r16, r20
    dd32:	9b 01       	movw	r18, r22
    dd34:	08 2b       	or	r16, r24
    dd36:	19 2b       	or	r17, r25
    dd38:	2a 2b       	or	r18, r26
    dd3a:	3b 2b       	or	r19, r27
    dd3c:	c9 01       	movw	r24, r18
    dd3e:	b8 01       	movw	r22, r16
}
    dd40:	1f 91       	pop	r17
    dd42:	0f 91       	pop	r16
    dd44:	08 95       	ret

0000dd46 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    dd46:	a4 e0       	ldi	r26, 0x04	; 4
    dd48:	b0 e0       	ldi	r27, 0x00	; 0
    dd4a:	e9 ea       	ldi	r30, 0xA9	; 169
    dd4c:	fe e6       	ldi	r31, 0x6E	; 110
    dd4e:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    dd52:	ce 01       	movw	r24, r28
    dd54:	01 96       	adiw	r24, 0x01	; 1
    dd56:	0e 94 56 36 	call	0x6cac	; 0x6cac <time>
    return( tm_to_fat(localtime(&t)));
    dd5a:	ce 01       	movw	r24, r28
    dd5c:	01 96       	adiw	r24, 0x01	; 1
    dd5e:	0e 94 ef 36 	call	0x6dde	; 0x6dde <localtime>
    dd62:	85 df       	rcall	.-246    	; 0xdc6e <tm_to_fat>
}
    dd64:	24 96       	adiw	r28, 0x04	; 4
    dd66:	e2 e0       	ldi	r30, 0x02	; 2
    dd68:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000dd6c <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    dd6c:	00 d0       	rcall	.+0      	; 0xdd6e <put_rc+0x2>
    dd6e:	00 d0       	rcall	.+0      	; 0xdd70 <put_rc+0x4>
    dd70:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    dd72:	ed b7       	in	r30, 0x3d	; 61
    dd74:	fe b7       	in	r31, 0x3e	; 62
    dd76:	95 83       	std	Z+5, r25	; 0x05
    dd78:	84 83       	std	Z+4, r24	; 0x04
    dd7a:	8c e9       	ldi	r24, 0x9C	; 156
    dd7c:	9a e0       	ldi	r25, 0x0A	; 10
    dd7e:	a0 e0       	ldi	r26, 0x00	; 0
    dd80:	81 83       	std	Z+1, r24	; 0x01
    dd82:	92 83       	std	Z+2, r25	; 0x02
    dd84:	a3 83       	std	Z+3, r26	; 0x03
    dd86:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
}
    dd8a:	0f 90       	pop	r0
    dd8c:	0f 90       	pop	r0
    dd8e:	0f 90       	pop	r0
    dd90:	0f 90       	pop	r0
    dd92:	0f 90       	pop	r0
    dd94:	08 95       	ret

0000dd96 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    dd96:	a4 e4       	ldi	r26, 0x44	; 68
    dd98:	b1 e0       	ldi	r27, 0x01	; 1
    dd9a:	e1 ed       	ldi	r30, 0xD1	; 209
    dd9c:	fe e6       	ldi	r31, 0x6E	; 110
    dd9e:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x16>
    dda2:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    dda4:	bc 01       	movw	r22, r24
    dda6:	ce 01       	movw	r24, r28
    dda8:	89 5e       	subi	r24, 0xE9	; 233
    ddaa:	9e 4f       	sbci	r25, 0xFE	; 254
    ddac:	0e 94 7b 61 	call	0xc2f6	; 0xc2f6 <f_opendir>
    if (fr == FR_OK)
    ddb0:	00 97       	sbiw	r24, 0x00	; 0
    ddb2:	09 f0       	breq	.+2      	; 0xddb6 <fatfs_scan_files+0x20>
    ddb4:	5b c0       	rjmp	.+182    	; 0xde6c <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ddb6:	8f e2       	ldi	r24, 0x2F	; 47
    ddb8:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    ddba:	be 01       	movw	r22, r28
    ddbc:	6f 5f       	subi	r22, 0xFF	; 255
    ddbe:	7f 4f       	sbci	r23, 0xFF	; 255
    ddc0:	ce 01       	movw	r24, r28
    ddc2:	89 5e       	subi	r24, 0xE9	; 233
    ddc4:	9e 4f       	sbci	r25, 0xFE	; 254
    ddc6:	0e 94 01 62 	call	0xc402	; 0xc402 <f_readdir>
    ddca:	00 97       	sbiw	r24, 0x00	; 0
    ddcc:	09 f0       	breq	.+2      	; 0xddd0 <fatfs_scan_files+0x3a>
    ddce:	4e c0       	rjmp	.+156    	; 0xde6c <fatfs_scan_files+0xd6>
    ddd0:	2f 89       	ldd	r18, Y+23	; 0x17
    ddd2:	22 23       	and	r18, r18
    ddd4:	09 f4       	brne	.+2      	; 0xddd8 <fatfs_scan_files+0x42>
    ddd6:	4a c0       	rjmp	.+148    	; 0xde6c <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    ddd8:	89 85       	ldd	r24, Y+9	; 0x09
    ddda:	84 ff       	sbrs	r24, 4
    dddc:	25 c0       	rjmp	.+74     	; 0xde28 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    ddde:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccDirs>
    dde2:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccDirs+0x1>
    dde6:	01 96       	adiw	r24, 0x01	; 1
    dde8:	90 93 c2 1c 	sts	0x1CC2, r25	; 0x801cc2 <AccDirs+0x1>
    ddec:	80 93 c1 1c 	sts	0x1CC1, r24	; 0x801cc1 <AccDirs>
                i = strlen(path);
    ddf0:	f8 01       	movw	r30, r16
    ddf2:	01 90       	ld	r0, Z+
    ddf4:	00 20       	and	r0, r0
    ddf6:	e9 f7       	brne	.-6      	; 0xddf2 <fatfs_scan_files+0x5c>
    ddf8:	31 97       	sbiw	r30, 0x01	; 1
    ddfa:	e0 1b       	sub	r30, r16
    ddfc:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ddfe:	78 01       	movw	r14, r16
    de00:	ee 0e       	add	r14, r30
    de02:	ff 1e       	adc	r15, r31
    de04:	d7 01       	movw	r26, r14
    de06:	dc 92       	st	X, r13
    de08:	cf 01       	movw	r24, r30
    de0a:	01 96       	adiw	r24, 0x01	; 1
    de0c:	be 01       	movw	r22, r28
    de0e:	69 5e       	subi	r22, 0xE9	; 233
    de10:	7f 4f       	sbci	r23, 0xFF	; 255
    de12:	80 0f       	add	r24, r16
    de14:	91 1f       	adc	r25, r17
    de16:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <strcpy>
                fr = fatfs_scan_files(path);
    de1a:	c8 01       	movw	r24, r16
    de1c:	bc df       	rcall	.-136    	; 0xdd96 <fatfs_scan_files>
                path[i] = 0;
    de1e:	f7 01       	movw	r30, r14
    de20:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    de22:	00 97       	sbiw	r24, 0x00	; 0
    de24:	51 f2       	breq	.-108    	; 0xddba <fatfs_scan_files+0x24>
    de26:	22 c0       	rjmp	.+68     	; 0xde6c <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    de28:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <AccFiles>
    de2c:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <AccFiles+0x1>
    de30:	01 96       	adiw	r24, 0x01	; 1
    de32:	90 93 c4 1c 	sts	0x1CC4, r25	; 0x801cc4 <AccFiles+0x1>
    de36:	80 93 c3 1c 	sts	0x1CC3, r24	; 0x801cc3 <AccFiles>
                AccSize += info.fsize;
    de3a:	40 91 bd 1c 	lds	r20, 0x1CBD	; 0x801cbd <AccSize>
    de3e:	50 91 be 1c 	lds	r21, 0x1CBE	; 0x801cbe <AccSize+0x1>
    de42:	60 91 bf 1c 	lds	r22, 0x1CBF	; 0x801cbf <AccSize+0x2>
    de46:	70 91 c0 1c 	lds	r23, 0x1CC0	; 0x801cc0 <AccSize+0x3>
    de4a:	89 81       	ldd	r24, Y+1	; 0x01
    de4c:	9a 81       	ldd	r25, Y+2	; 0x02
    de4e:	ab 81       	ldd	r26, Y+3	; 0x03
    de50:	bc 81       	ldd	r27, Y+4	; 0x04
    de52:	84 0f       	add	r24, r20
    de54:	95 1f       	adc	r25, r21
    de56:	a6 1f       	adc	r26, r22
    de58:	b7 1f       	adc	r27, r23
    de5a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <AccSize>
    de5e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <AccSize+0x1>
    de62:	a0 93 bf 1c 	sts	0x1CBF, r26	; 0x801cbf <AccSize+0x2>
    de66:	b0 93 c0 1c 	sts	0x1CC0, r27	; 0x801cc0 <AccSize+0x3>
    de6a:	a7 cf       	rjmp	.-178    	; 0xddba <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    de6c:	cc 5b       	subi	r28, 0xBC	; 188
    de6e:	de 4f       	sbci	r29, 0xFE	; 254
    de70:	e7 e0       	ldi	r30, 0x07	; 7
    de72:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x16>

0000de76 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    de76:	01 97       	sbiw	r24, 0x01	; 1
    de78:	84 30       	cpi	r24, 0x04	; 4
    de7a:	91 05       	cpc	r25, r1
    de7c:	40 f4       	brcc	.+16     	; 0xde8e <fatfs_fstype+0x18>
    de7e:	88 0f       	add	r24, r24
    de80:	99 1f       	adc	r25, r25
    de82:	fc 01       	movw	r30, r24
    de84:	e6 53       	subi	r30, 0x36	; 54
    de86:	f7 4f       	sbci	r31, 0xF7	; 247
    de88:	80 81       	ld	r24, Z
    de8a:	91 81       	ldd	r25, Z+1	; 0x01
    de8c:	08 95       	ret
    char *ptr;
    switch(type)
    de8e:	88 ea       	ldi	r24, 0xA8	; 168
    de90:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    de92:	08 95       	ret

0000de94 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    de94:	a7 e3       	ldi	r26, 0x37	; 55
    de96:	b0 e0       	ldi	r27, 0x00	; 0
    de98:	e0 e5       	ldi	r30, 0x50	; 80
    de9a:	ff e6       	ldi	r31, 0x6F	; 111
    de9c:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    dea0:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    dea2:	fc 01       	movw	r30, r24
    dea4:	21 91       	ld	r18, Z+
    dea6:	cf 01       	movw	r24, r30
    dea8:	20 32       	cpi	r18, 0x20	; 32
    deaa:	d1 f3       	breq	.-12     	; 0xdea0 <fatfs_status+0xc>
    deac:	29 30       	cpi	r18, 0x09	; 9
    deae:	c1 f3       	breq	.-16     	; 0xdea0 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    deb0:	ed b7       	in	r30, 0x3d	; 61
    deb2:	fe b7       	in	r31, 0x3e	; 62
    deb4:	e4 82       	std	Z+4, r14	; 0x04
    deb6:	f5 82       	std	Z+5, r15	; 0x05
    deb8:	8b e8       	ldi	r24, 0x8B	; 139
    deba:	9a e0       	ldi	r25, 0x0A	; 10
    debc:	a0 e0       	ldi	r26, 0x00	; 0
    debe:	81 83       	std	Z+1, r24	; 0x01
    dec0:	92 83       	std	Z+2, r25	; 0x02
    dec2:	a3 83       	std	Z+3, r26	; 0x03
    dec4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    dec8:	ae 01       	movw	r20, r28
    deca:	4a 5c       	subi	r20, 0xCA	; 202
    decc:	5f 4f       	sbci	r21, 0xFF	; 255
    dece:	be 01       	movw	r22, r28
    ded0:	6e 5c       	subi	r22, 0xCE	; 206
    ded2:	7f 4f       	sbci	r23, 0xFF	; 255
    ded4:	c7 01       	movw	r24, r14
    ded6:	0e 94 83 62 	call	0xc506	; 0xc506 <f_getfree>
    if (res)
    deda:	89 2b       	or	r24, r25
    dedc:	19 f0       	breq	.+6      	; 0xdee4 <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    dede:	8c e6       	ldi	r24, 0x6C	; 108
    dee0:	9a e0       	ldi	r25, 0x0A	; 10
    dee2:	c0 c0       	rjmp	.+384    	; 0xe064 <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    dee4:	ee a9       	ldd	r30, Y+54	; 0x36
    dee6:	ff a9       	ldd	r31, Y+55	; 0x37
    dee8:	80 81       	ld	r24, Z
    deea:	90 e0       	ldi	r25, 0x00	; 0
    deec:	c4 df       	rcall	.-120    	; 0xde76 <fatfs_fstype>
    deee:	ed b7       	in	r30, 0x3d	; 61
    def0:	fe b7       	in	r31, 0x3e	; 62
    def2:	95 83       	std	Z+5, r25	; 0x05
    def4:	84 83       	std	Z+4, r24	; 0x04
    def6:	8e e4       	ldi	r24, 0x4E	; 78
    def8:	9a e0       	ldi	r25, 0x0A	; 10
    defa:	a0 e0       	ldi	r26, 0x00	; 0
    defc:	81 83       	std	Z+1, r24	; 0x01
    defe:	92 83       	std	Z+2, r25	; 0x02
    df00:	a3 83       	std	Z+3, r26	; 0x03
    df02:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    df06:	ee a9       	ldd	r30, Y+54	; 0x36
    df08:	ff a9       	ldd	r31, Y+55	; 0x37
    df0a:	81 85       	ldd	r24, Z+9	; 0x09
    df0c:	92 85       	ldd	r25, Z+10	; 0x0a
    df0e:	a0 e0       	ldi	r26, 0x00	; 0
    df10:	b0 e0       	ldi	r27, 0x00	; 0
    df12:	39 e0       	ldi	r19, 0x09	; 9
    df14:	88 0f       	add	r24, r24
    df16:	99 1f       	adc	r25, r25
    df18:	aa 1f       	adc	r26, r26
    df1a:	bb 1f       	adc	r27, r27
    df1c:	3a 95       	dec	r19
    df1e:	d1 f7       	brne	.-12     	; 0xdf14 <fatfs_status+0x80>
    df20:	ed b7       	in	r30, 0x3d	; 61
    df22:	fe b7       	in	r31, 0x3e	; 62
    df24:	84 83       	std	Z+4, r24	; 0x04
    df26:	95 83       	std	Z+5, r25	; 0x05
    df28:	a6 83       	std	Z+6, r26	; 0x06
    df2a:	b7 83       	std	Z+7, r27	; 0x07
    df2c:	8f e2       	ldi	r24, 0x2F	; 47
    df2e:	9a e0       	ldi	r25, 0x0A	; 10
    df30:	a0 e0       	ldi	r26, 0x00	; 0
    df32:	81 83       	std	Z+1, r24	; 0x01
    df34:	92 83       	std	Z+2, r25	; 0x02
    df36:	a3 83       	std	Z+3, r26	; 0x03
    df38:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    df3c:	ee a9       	ldd	r30, Y+54	; 0x36
    df3e:	ff a9       	ldd	r31, Y+55	; 0x37
    df40:	82 81       	ldd	r24, Z+2	; 0x02
    df42:	90 e0       	ldi	r25, 0x00	; 0
    df44:	ed b7       	in	r30, 0x3d	; 61
    df46:	fe b7       	in	r31, 0x3e	; 62
    df48:	95 83       	std	Z+5, r25	; 0x05
    df4a:	84 83       	std	Z+4, r24	; 0x04
    df4c:	81 e1       	ldi	r24, 0x11	; 17
    df4e:	9a e0       	ldi	r25, 0x0A	; 10
    df50:	a0 e0       	ldi	r26, 0x00	; 0
    df52:	81 83       	std	Z+1, r24	; 0x01
    df54:	92 83       	std	Z+2, r25	; 0x02
    df56:	a3 83       	std	Z+3, r26	; 0x03
    df58:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    df5c:	ee a9       	ldd	r30, Y+54	; 0x36
    df5e:	ff a9       	ldd	r31, Y+55	; 0x37
    df60:	87 81       	ldd	r24, Z+7	; 0x07
    df62:	90 85       	ldd	r25, Z+8	; 0x08
    df64:	ed b7       	in	r30, 0x3d	; 61
    df66:	fe b7       	in	r31, 0x3e	; 62
    df68:	95 83       	std	Z+5, r25	; 0x05
    df6a:	84 83       	std	Z+4, r24	; 0x04
    df6c:	83 ef       	ldi	r24, 0xF3	; 243
    df6e:	99 e0       	ldi	r25, 0x09	; 9
    df70:	a0 e0       	ldi	r26, 0x00	; 0
    df72:	81 83       	std	Z+1, r24	; 0x01
    df74:	92 83       	std	Z+2, r25	; 0x02
    df76:	a3 83       	std	Z+3, r26	; 0x03
    df78:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    df7c:	ee a9       	ldd	r30, Y+54	; 0x36
    df7e:	ff a9       	ldd	r31, Y+55	; 0x37
    df80:	85 8d       	ldd	r24, Z+29	; 0x1d
    df82:	96 8d       	ldd	r25, Z+30	; 0x1e
    df84:	a7 8d       	ldd	r26, Z+31	; 0x1f
    df86:	b0 a1       	ldd	r27, Z+32	; 0x20
    df88:	ed b7       	in	r30, 0x3d	; 61
    df8a:	fe b7       	in	r31, 0x3e	; 62
    df8c:	84 83       	std	Z+4, r24	; 0x04
    df8e:	95 83       	std	Z+5, r25	; 0x05
    df90:	a6 83       	std	Z+6, r26	; 0x06
    df92:	b7 83       	std	Z+7, r27	; 0x07
    df94:	84 ed       	ldi	r24, 0xD4	; 212
    df96:	99 e0       	ldi	r25, 0x09	; 9
    df98:	a0 e0       	ldi	r26, 0x00	; 0
    df9a:	81 83       	std	Z+1, r24	; 0x01
    df9c:	92 83       	std	Z+2, r25	; 0x02
    df9e:	a3 83       	std	Z+3, r26	; 0x03
    dfa0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    dfa4:	ee a9       	ldd	r30, Y+54	; 0x36
    dfa6:	ff a9       	ldd	r31, Y+55	; 0x37
    dfa8:	81 8d       	ldd	r24, Z+25	; 0x19
    dfaa:	92 8d       	ldd	r25, Z+26	; 0x1a
    dfac:	a3 8d       	ldd	r26, Z+27	; 0x1b
    dfae:	b4 8d       	ldd	r27, Z+28	; 0x1c
    dfb0:	02 97       	sbiw	r24, 0x02	; 2
    dfb2:	a1 09       	sbc	r26, r1
    dfb4:	b1 09       	sbc	r27, r1
    dfb6:	ed b7       	in	r30, 0x3d	; 61
    dfb8:	fe b7       	in	r31, 0x3e	; 62
    dfba:	84 83       	std	Z+4, r24	; 0x04
    dfbc:	95 83       	std	Z+5, r25	; 0x05
    dfbe:	a6 83       	std	Z+6, r26	; 0x06
    dfc0:	b7 83       	std	Z+7, r27	; 0x07
    dfc2:	85 eb       	ldi	r24, 0xB5	; 181
    dfc4:	99 e0       	ldi	r25, 0x09	; 9
    dfc6:	a0 e0       	ldi	r26, 0x00	; 0
    dfc8:	81 83       	std	Z+1, r24	; 0x01
    dfca:	92 83       	std	Z+2, r25	; 0x02
    dfcc:	a3 83       	std	Z+3, r26	; 0x03
    dfce:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    dfd2:	ee a9       	ldd	r30, Y+54	; 0x36
    dfd4:	ff a9       	ldd	r31, Y+55	; 0x37
    dfd6:	85 a1       	ldd	r24, Z+37	; 0x25
    dfd8:	96 a1       	ldd	r25, Z+38	; 0x26
    dfda:	a7 a1       	ldd	r26, Z+39	; 0x27
    dfdc:	b0 a5       	ldd	r27, Z+40	; 0x28
    dfde:	ed b7       	in	r30, 0x3d	; 61
    dfe0:	fe b7       	in	r31, 0x3e	; 62
    dfe2:	84 83       	std	Z+4, r24	; 0x04
    dfe4:	95 83       	std	Z+5, r25	; 0x05
    dfe6:	a6 83       	std	Z+6, r26	; 0x06
    dfe8:	b7 83       	std	Z+7, r27	; 0x07
    dfea:	86 e9       	ldi	r24, 0x96	; 150
    dfec:	99 e0       	ldi	r25, 0x09	; 9
    dfee:	a0 e0       	ldi	r26, 0x00	; 0
    dff0:	81 83       	std	Z+1, r24	; 0x01
    dff2:	92 83       	std	Z+2, r25	; 0x02
    dff4:	a3 83       	std	Z+3, r26	; 0x03
    dff6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    dffa:	ee a9       	ldd	r30, Y+54	; 0x36
    dffc:	ff a9       	ldd	r31, Y+55	; 0x37
    dffe:	81 a5       	ldd	r24, Z+41	; 0x29
    e000:	92 a5       	ldd	r25, Z+42	; 0x2a
    e002:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e004:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e006:	ed b7       	in	r30, 0x3d	; 61
    e008:	fe b7       	in	r31, 0x3e	; 62
    e00a:	84 83       	std	Z+4, r24	; 0x04
    e00c:	95 83       	std	Z+5, r25	; 0x05
    e00e:	a6 83       	std	Z+6, r26	; 0x06
    e010:	b7 83       	std	Z+7, r27	; 0x07
    e012:	87 e7       	ldi	r24, 0x77	; 119
    e014:	99 e0       	ldi	r25, 0x09	; 9
    e016:	a0 e0       	ldi	r26, 0x00	; 0
    e018:	81 83       	std	Z+1, r24	; 0x01
    e01a:	92 83       	std	Z+2, r25	; 0x02
    e01c:	a3 83       	std	Z+3, r26	; 0x03
    e01e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e022:	ee a9       	ldd	r30, Y+54	; 0x36
    e024:	ff a9       	ldd	r31, Y+55	; 0x37
    e026:	85 a5       	ldd	r24, Z+45	; 0x2d
    e028:	96 a5       	ldd	r25, Z+46	; 0x2e
    e02a:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e02c:	b0 a9       	ldd	r27, Z+48	; 0x30
    e02e:	ed b7       	in	r30, 0x3d	; 61
    e030:	fe b7       	in	r31, 0x3e	; 62
    e032:	84 83       	std	Z+4, r24	; 0x04
    e034:	95 83       	std	Z+5, r25	; 0x05
    e036:	a6 83       	std	Z+6, r26	; 0x06
    e038:	b7 83       	std	Z+7, r27	; 0x07
    e03a:	88 e5       	ldi	r24, 0x58	; 88
    e03c:	99 e0       	ldi	r25, 0x09	; 9
    e03e:	a0 e0       	ldi	r26, 0x00	; 0
    e040:	81 83       	std	Z+1, r24	; 0x01
    e042:	92 83       	std	Z+2, r25	; 0x02
    e044:	a3 83       	std	Z+3, r26	; 0x03
    e046:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e04a:	ae 01       	movw	r20, r28
    e04c:	42 5d       	subi	r20, 0xD2	; 210
    e04e:	5f 4f       	sbci	r21, 0xFF	; 255
    e050:	be 01       	movw	r22, r28
    e052:	6c 5e       	subi	r22, 0xEC	; 236
    e054:	7f 4f       	sbci	r23, 0xFF	; 255
    e056:	c7 01       	movw	r24, r14
    e058:	0e 94 b5 66 	call	0xcd6a	; 0xcd6a <f_getlabel>
    if (res)
    e05c:	89 2b       	or	r24, r25
    e05e:	69 f0       	breq	.+26     	; 0xe07a <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e060:	88 e3       	ldi	r24, 0x38	; 56
    e062:	99 e0       	ldi	r25, 0x09	; 9
    e064:	a0 e0       	ldi	r26, 0x00	; 0
    e066:	ed b7       	in	r30, 0x3d	; 61
    e068:	fe b7       	in	r31, 0x3e	; 62
    e06a:	81 83       	std	Z+1, r24	; 0x01
    e06c:	92 83       	std	Z+2, r25	; 0x02
    e06e:	a3 83       	std	Z+3, r26	; 0x03
    e070:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(0);
    e074:	80 e0       	ldi	r24, 0x00	; 0
    e076:	90 e0       	ldi	r25, 0x00	; 0
    e078:	95 c0       	rjmp	.+298    	; 0xe1a4 <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e07a:	8c 89       	ldd	r24, Y+20	; 0x14
    e07c:	81 11       	cpse	r24, r1
    e07e:	03 c0       	rjmp	.+6      	; 0xe086 <fatfs_status+0x1f2>
    e080:	80 eb       	ldi	r24, 0xB0	; 176
    e082:	98 e0       	ldi	r25, 0x08	; 8
    e084:	02 c0       	rjmp	.+4      	; 0xe08a <fatfs_status+0x1f6>
    e086:	ce 01       	movw	r24, r28
    e088:	44 96       	adiw	r24, 0x14	; 20
    e08a:	ed b7       	in	r30, 0x3d	; 61
    e08c:	fe b7       	in	r31, 0x3e	; 62
    e08e:	95 83       	std	Z+5, r25	; 0x05
    e090:	84 83       	std	Z+4, r24	; 0x04
    e092:	8a e1       	ldi	r24, 0x1A	; 26
    e094:	99 e0       	ldi	r25, 0x09	; 9
    e096:	a0 e0       	ldi	r26, 0x00	; 0
    e098:	81 83       	std	Z+1, r24	; 0x01
    e09a:	92 83       	std	Z+2, r25	; 0x02
    e09c:	a3 83       	std	Z+3, r26	; 0x03
    e09e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e0a2:	8e a5       	ldd	r24, Y+46	; 0x2e
    e0a4:	9f a5       	ldd	r25, Y+47	; 0x2f
    e0a6:	a8 a9       	ldd	r26, Y+48	; 0x30
    e0a8:	b9 a9       	ldd	r27, Y+49	; 0x31
    e0aa:	ed b7       	in	r30, 0x3d	; 61
    e0ac:	fe b7       	in	r31, 0x3e	; 62
    e0ae:	97 83       	std	Z+7, r25	; 0x07
    e0b0:	86 83       	std	Z+6, r24	; 0x06
    e0b2:	b5 83       	std	Z+5, r27	; 0x05
    e0b4:	a4 83       	std	Z+4, r26	; 0x04
    e0b6:	85 ef       	ldi	r24, 0xF5	; 245
    e0b8:	98 e0       	ldi	r25, 0x08	; 8
    e0ba:	a0 e0       	ldi	r26, 0x00	; 0
    e0bc:	81 83       	std	Z+1, r24	; 0x01
    e0be:	92 83       	std	Z+2, r25	; 0x02
    e0c0:	a3 83       	std	Z+3, r26	; 0x03
    e0c2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e0c6:	10 92 c2 1c 	sts	0x1CC2, r1	; 0x801cc2 <AccDirs+0x1>
    e0ca:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <AccDirs>
    e0ce:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccFiles+0x1>
    e0d2:	10 92 c3 1c 	sts	0x1CC3, r1	; 0x801cc3 <AccFiles>
    e0d6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <AccSize>
    e0da:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <AccSize+0x1>
    e0de:	10 92 bf 1c 	sts	0x1CBF, r1	; 0x801cbf <AccSize+0x2>
    e0e2:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e0e6:	c7 01       	movw	r24, r14
    e0e8:	56 de       	rcall	.-852    	; 0xdd96 <fatfs_scan_files>
    if (res)
    e0ea:	89 2b       	or	r24, r25
    e0ec:	19 f0       	breq	.+6      	; 0xe0f4 <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e0ee:	8f ec       	ldi	r24, 0xCF	; 207
    e0f0:	98 e0       	ldi	r25, 0x08	; 8
    e0f2:	b8 cf       	rjmp	.-144    	; 0xe064 <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e0f4:	0e a9       	ldd	r16, Y+54	; 0x36
    e0f6:	1f a9       	ldd	r17, Y+55	; 0x37
    e0f8:	f8 01       	movw	r30, r16
    e0fa:	c1 84       	ldd	r12, Z+9	; 0x09
    e0fc:	d2 84       	ldd	r13, Z+10	; 0x0a
    e0fe:	e1 2c       	mov	r14, r1
    e100:	f1 2c       	mov	r15, r1
    e102:	6a a9       	ldd	r22, Y+50	; 0x32
    e104:	7b a9       	ldd	r23, Y+51	; 0x33
    e106:	8c a9       	ldd	r24, Y+52	; 0x34
    e108:	9d a9       	ldd	r25, Y+53	; 0x35
    e10a:	a7 01       	movw	r20, r14
    e10c:	96 01       	movw	r18, r12
    e10e:	0e 94 3d e2 	call	0x1c47a	; 0x1c47a <__mulsi3>
    e112:	22 e0       	ldi	r18, 0x02	; 2
    e114:	30 e0       	ldi	r19, 0x00	; 0
    e116:	40 e0       	ldi	r20, 0x00	; 0
    e118:	50 e0       	ldi	r21, 0x00	; 0
    e11a:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
    e11e:	ed b7       	in	r30, 0x3d	; 61
    e120:	fe b7       	in	r31, 0x3e	; 62
    e122:	20 8b       	std	Z+16, r18	; 0x10
    e124:	31 8b       	std	Z+17, r19	; 0x11
    e126:	42 8b       	std	Z+18, r20	; 0x12
    e128:	53 8b       	std	Z+19, r21	; 0x13
    e12a:	f8 01       	movw	r30, r16
    e12c:	81 8d       	ldd	r24, Z+25	; 0x19
    e12e:	92 8d       	ldd	r25, Z+26	; 0x1a
    e130:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e132:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e134:	9c 01       	movw	r18, r24
    e136:	ad 01       	movw	r20, r26
    e138:	22 50       	subi	r18, 0x02	; 2
    e13a:	31 09       	sbc	r19, r1
    e13c:	41 09       	sbc	r20, r1
    e13e:	51 09       	sbc	r21, r1
    e140:	c7 01       	movw	r24, r14
    e142:	b6 01       	movw	r22, r12
    e144:	0e 94 3d e2 	call	0x1c47a	; 0x1c47a <__mulsi3>
    e148:	dc 01       	movw	r26, r24
    e14a:	cb 01       	movw	r24, r22
    e14c:	b6 95       	lsr	r27
    e14e:	a7 95       	ror	r26
    e150:	97 95       	ror	r25
    e152:	87 95       	ror	r24
    e154:	ed b7       	in	r30, 0x3d	; 61
    e156:	fe b7       	in	r31, 0x3e	; 62
    e158:	84 87       	std	Z+12, r24	; 0x0c
    e15a:	95 87       	std	Z+13, r25	; 0x0d
    e15c:	a6 87       	std	Z+14, r26	; 0x0e
    e15e:	b7 87       	std	Z+15, r27	; 0x0f
    e160:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccDirs>
    e164:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccDirs+0x1>
    e168:	93 87       	std	Z+11, r25	; 0x0b
    e16a:	82 87       	std	Z+10, r24	; 0x0a
    e16c:	80 91 bd 1c 	lds	r24, 0x1CBD	; 0x801cbd <AccSize>
    e170:	90 91 be 1c 	lds	r25, 0x1CBE	; 0x801cbe <AccSize+0x1>
    e174:	a0 91 bf 1c 	lds	r26, 0x1CBF	; 0x801cbf <AccSize+0x2>
    e178:	b0 91 c0 1c 	lds	r27, 0x1CC0	; 0x801cc0 <AccSize+0x3>
    e17c:	86 83       	std	Z+6, r24	; 0x06
    e17e:	97 83       	std	Z+7, r25	; 0x07
    e180:	a0 87       	std	Z+8, r26	; 0x08
    e182:	b1 87       	std	Z+9, r27	; 0x09
    e184:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <AccFiles>
    e188:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <AccFiles+0x1>
    e18c:	95 83       	std	Z+5, r25	; 0x05
    e18e:	84 83       	std	Z+4, r24	; 0x04
    e190:	82 e8       	ldi	r24, 0x82	; 130
    e192:	98 e0       	ldi	r25, 0x08	; 8
    e194:	a0 e0       	ldi	r26, 0x00	; 0
    e196:	81 83       	std	Z+1, r24	; 0x01
    e198:	92 83       	std	Z+2, r25	; 0x02
    e19a:	a3 83       	std	Z+3, r26	; 0x03
    e19c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e1a0:	81 e0       	ldi	r24, 0x01	; 1
    e1a2:	90 e0       	ldi	r25, 0x00	; 0
}
    e1a4:	e7 96       	adiw	r28, 0x37	; 55
    e1a6:	e8 e0       	ldi	r30, 0x08	; 8
    e1a8:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000e1ac <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e1ac:	ab e1       	ldi	r26, 0x1B	; 27
    e1ae:	b0 e0       	ldi	r27, 0x00	; 0
    e1b0:	ec ed       	ldi	r30, 0xDC	; 220
    e1b2:	f0 e7       	ldi	r31, 0x70	; 112
    e1b4:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    e1b8:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e1ba:	fc 01       	movw	r30, r24
    e1bc:	86 89       	ldd	r24, Z+22	; 0x16
    e1be:	81 11       	cpse	r24, r1
    e1c0:	03 c0       	rjmp	.+6      	; 0xe1c8 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e1c2:	87 e6       	ldi	r24, 0x67	; 103
    e1c4:	98 e0       	ldi	r25, 0x08	; 8
    e1c6:	69 c0       	rjmp	.+210    	; 0xe29a <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e1c8:	fd 01       	movw	r30, r26
    e1ca:	80 85       	ldd	r24, Z+8	; 0x08
    e1cc:	84 fd       	sbrc	r24, 4
    e1ce:	02 c0       	rjmp	.+4      	; 0xe1d4 <fatfs_filinfo_list+0x28>
    e1d0:	9d e2       	ldi	r25, 0x2D	; 45
    e1d2:	01 c0       	rjmp	.+2      	; 0xe1d6 <fatfs_filinfo_list+0x2a>
    e1d4:	94 e4       	ldi	r25, 0x44	; 68
    e1d6:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e1d8:	80 fd       	sbrc	r24, 0
    e1da:	02 c0       	rjmp	.+4      	; 0xe1e0 <fatfs_filinfo_list+0x34>
    e1dc:	9d e2       	ldi	r25, 0x2D	; 45
    e1de:	01 c0       	rjmp	.+2      	; 0xe1e2 <fatfs_filinfo_list+0x36>
    e1e0:	92 e5       	ldi	r25, 0x52	; 82
    e1e2:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e1e4:	81 fd       	sbrc	r24, 1
    e1e6:	02 c0       	rjmp	.+4      	; 0xe1ec <fatfs_filinfo_list+0x40>
    e1e8:	9d e2       	ldi	r25, 0x2D	; 45
    e1ea:	01 c0       	rjmp	.+2      	; 0xe1ee <fatfs_filinfo_list+0x42>
    e1ec:	98 e4       	ldi	r25, 0x48	; 72
    e1ee:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e1f0:	82 fd       	sbrc	r24, 2
    e1f2:	02 c0       	rjmp	.+4      	; 0xe1f8 <fatfs_filinfo_list+0x4c>
    e1f4:	9d e2       	ldi	r25, 0x2D	; 45
    e1f6:	01 c0       	rjmp	.+2      	; 0xe1fa <fatfs_filinfo_list+0x4e>
    e1f8:	93 e5       	ldi	r25, 0x53	; 83
    e1fa:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e1fc:	85 fd       	sbrc	r24, 5
    e1fe:	02 c0       	rjmp	.+4      	; 0xe204 <fatfs_filinfo_list+0x58>
    e200:	8d e2       	ldi	r24, 0x2D	; 45
    e202:	01 c0       	rjmp	.+2      	; 0xe206 <fatfs_filinfo_list+0x5a>
    e204:	81 e4       	ldi	r24, 0x41	; 65
    e206:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e208:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e20a:	fd 01       	movw	r30, r26
    e20c:	24 81       	ldd	r18, Z+4	; 0x04
    e20e:	35 81       	ldd	r19, Z+5	; 0x05
    e210:	46 81       	ldd	r20, Z+6	; 0x06
    e212:	57 81       	ldd	r21, Z+7	; 0x07
    e214:	cd 01       	movw	r24, r26
    e216:	46 96       	adiw	r24, 0x16	; 22
    e218:	ed b7       	in	r30, 0x3d	; 61
    e21a:	fe b7       	in	r31, 0x3e	; 62
    e21c:	95 8b       	std	Z+21, r25	; 0x15
    e21e:	84 8b       	std	Z+20, r24	; 0x14
    e220:	8d 91       	ld	r24, X+
    e222:	9d 91       	ld	r25, X+
    e224:	0d 90       	ld	r0, X+
    e226:	bc 91       	ld	r27, X
    e228:	a0 2d       	mov	r26, r0
    e22a:	80 8b       	std	Z+16, r24	; 0x10
    e22c:	91 8b       	std	Z+17, r25	; 0x11
    e22e:	a2 8b       	std	Z+18, r26	; 0x12
    e230:	b3 8b       	std	Z+19, r27	; 0x13
    e232:	ca 01       	movw	r24, r20
    e234:	45 e0       	ldi	r20, 0x05	; 5
    e236:	96 95       	lsr	r25
    e238:	87 95       	ror	r24
    e23a:	4a 95       	dec	r20
    e23c:	e1 f7       	brne	.-8      	; 0xe236 <fatfs_filinfo_list+0x8a>
    e23e:	8f 73       	andi	r24, 0x3F	; 63
    e240:	99 27       	eor	r25, r25
    e242:	97 87       	std	Z+15, r25	; 0x0f
    e244:	86 87       	std	Z+14, r24	; 0x0e
    e246:	85 2f       	mov	r24, r21
    e248:	86 95       	lsr	r24
    e24a:	86 95       	lsr	r24
    e24c:	86 95       	lsr	r24
    e24e:	84 87       	std	Z+12, r24	; 0x0c
    e250:	15 86       	std	Z+13, r1	; 0x0d
    e252:	c9 01       	movw	r24, r18
    e254:	8f 71       	andi	r24, 0x1F	; 31
    e256:	99 27       	eor	r25, r25
    e258:	93 87       	std	Z+11, r25	; 0x0b
    e25a:	82 87       	std	Z+10, r24	; 0x0a
    e25c:	c9 01       	movw	r24, r18
    e25e:	55 e0       	ldi	r21, 0x05	; 5
    e260:	96 95       	lsr	r25
    e262:	87 95       	ror	r24
    e264:	5a 95       	dec	r21
    e266:	e1 f7       	brne	.-8      	; 0xe260 <fatfs_filinfo_list+0xb4>
    e268:	8f 70       	andi	r24, 0x0F	; 15
    e26a:	99 27       	eor	r25, r25
    e26c:	91 87       	std	Z+9, r25	; 0x09
    e26e:	80 87       	std	Z+8, r24	; 0x08
    e270:	23 2f       	mov	r18, r19
    e272:	33 27       	eor	r19, r19
    e274:	26 95       	lsr	r18
    e276:	24 54       	subi	r18, 0x44	; 68
    e278:	38 4f       	sbci	r19, 0xF8	; 248
    e27a:	37 83       	std	Z+7, r19	; 0x07
    e27c:	26 83       	std	Z+6, r18	; 0x06
    e27e:	ce 01       	movw	r24, r28
    e280:	46 96       	adiw	r24, 0x16	; 22
    e282:	95 83       	std	Z+5, r25	; 0x05
    e284:	84 83       	std	Z+4, r24	; 0x04
    e286:	85 e4       	ldi	r24, 0x45	; 69
    e288:	98 e0       	ldi	r25, 0x08	; 8
    e28a:	a0 e0       	ldi	r26, 0x00	; 0
    e28c:	81 83       	std	Z+1, r24	; 0x01
    e28e:	92 83       	std	Z+2, r25	; 0x02
    e290:	a3 83       	std	Z+3, r26	; 0x03
    e292:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e296:	83 e4       	ldi	r24, 0x43	; 67
    e298:	98 e0       	ldi	r25, 0x08	; 8
    e29a:	a0 e0       	ldi	r26, 0x00	; 0
    e29c:	ed b7       	in	r30, 0x3d	; 61
    e29e:	fe b7       	in	r31, 0x3e	; 62
    e2a0:	81 83       	std	Z+1, r24	; 0x01
    e2a2:	92 83       	std	Z+2, r25	; 0x02
    e2a4:	a3 83       	std	Z+3, r26	; 0x03
    e2a6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
}
    e2aa:	6b 96       	adiw	r28, 0x1b	; 27
    e2ac:	e2 e0       	ldi	r30, 0x02	; 2
    e2ae:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000e2b2 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e2b2:	cf 93       	push	r28
    e2b4:	df 93       	push	r29
    e2b6:	00 d0       	rcall	.+0      	; 0xe2b8 <fatfs_help+0x6>
    e2b8:	1f 92       	push	r1
    e2ba:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e2bc:	8e ed       	ldi	r24, 0xDE	; 222
    e2be:	9b e0       	ldi	r25, 0x0B	; 11
    e2c0:	a0 e0       	ldi	r26, 0x00	; 0
    e2c2:	ed b7       	in	r30, 0x3d	; 61
    e2c4:	fe b7       	in	r31, 0x3e	; 62
    e2c6:	81 83       	std	Z+1, r24	; 0x01
    e2c8:	92 83       	std	Z+2, r25	; 0x02
    e2ca:	a3 83       	std	Z+3, r26	; 0x03
    e2cc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    if(full)
    e2d0:	cd 2b       	or	r28, r29
    e2d2:	51 f0       	breq	.+20     	; 0xe2e8 <fatfs_help+0x36>
    {
        printf(
    e2d4:	81 e6       	ldi	r24, 0x61	; 97
    e2d6:	9b e0       	ldi	r25, 0x0B	; 11
    e2d8:	a0 e0       	ldi	r26, 0x00	; 0
    e2da:	ed b7       	in	r30, 0x3d	; 61
    e2dc:	fe b7       	in	r31, 0x3e	; 62
    e2de:	81 83       	std	Z+1, r24	; 0x01
    e2e0:	92 83       	std	Z+2, r25	; 0x02
    e2e2:	a3 83       	std	Z+3, r26	; 0x03
    e2e4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    #endif
            "\n"
            );
    }

}
    e2e8:	cd b7       	in	r28, 0x3d	; 61
    e2ea:	de b7       	in	r29, 0x3e	; 62
    e2ec:	23 96       	adiw	r28, 0x03	; 3
    e2ee:	e2 e0       	ldi	r30, 0x02	; 2
    e2f0:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000e2f4 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e2f4:	a5 e5       	ldi	r26, 0x55	; 85
    e2f6:	b3 e0       	ldi	r27, 0x03	; 3
    e2f8:	e0 e8       	ldi	r30, 0x80	; 128
    e2fa:	f1 e7       	ldi	r31, 0x71	; 113
    e2fc:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[512];

	memset(buff,0,sizeof(buff)-1);
    e300:	8e 01       	movw	r16, r28
    e302:	04 5f       	subi	r16, 0xF4	; 244
    e304:	1f 4f       	sbci	r17, 0xFF	; 255
    e306:	2f ef       	ldi	r18, 0xFF	; 255
    e308:	31 e0       	ldi	r19, 0x01	; 1
    e30a:	f8 01       	movw	r30, r16
    e30c:	a9 01       	movw	r20, r18
    e30e:	11 92       	st	Z+, r1
    e310:	41 50       	subi	r20, 0x01	; 1
    e312:	50 40       	sbci	r21, 0x00	; 0
    e314:	e1 f7       	brne	.-8      	; 0xe30e <fatfs_ls+0x1a>

    if(!name || !*name)
    e316:	00 97       	sbiw	r24, 0x00	; 0
    e318:	21 f0       	breq	.+8      	; 0xe322 <fatfs_ls+0x2e>
    e31a:	fc 01       	movw	r30, r24
    e31c:	20 81       	ld	r18, Z
    e31e:	21 11       	cpse	r18, r1
    e320:	03 c0       	rjmp	.+6      	; 0xe328 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e322:	6d ef       	ldi	r22, 0xFD	; 253
    e324:	72 e1       	ldi	r23, 0x12	; 18
    e326:	01 c0       	rjmp	.+2      	; 0xe32a <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e328:	bc 01       	movw	r22, r24
    e32a:	c8 01       	movw	r24, r16
    e32c:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e330:	ed b7       	in	r30, 0x3d	; 61
    e332:	fe b7       	in	r31, 0x3e	; 62
    e334:	15 83       	std	Z+5, r17	; 0x05
    e336:	04 83       	std	Z+4, r16	; 0x04
    e338:	81 ee       	ldi	r24, 0xE1	; 225
    e33a:	9a e0       	ldi	r25, 0x0A	; 10
    e33c:	a0 e0       	ldi	r26, 0x00	; 0
    e33e:	81 83       	std	Z+1, r24	; 0x01
    e340:	92 83       	std	Z+2, r25	; 0x02
    e342:	a3 83       	std	Z+3, r26	; 0x03
    e344:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    res = f_opendir(&dirs, buff);
    e348:	b8 01       	movw	r22, r16
    e34a:	ce 01       	movw	r24, r28
    e34c:	8e 5d       	subi	r24, 0xDE	; 222
    e34e:	9c 4f       	sbci	r25, 0xFC	; 252
    e350:	0e 94 7b 61 	call	0xc2f6	; 0xc2f6 <f_opendir>
    if (res != FR_OK) 
    e354:	89 2b       	or	r24, r25
    e356:	09 f0       	breq	.+2      	; 0xe35a <fatfs_ls+0x66>
    e358:	a3 c0       	rjmp	.+326    	; 0xe4a0 <fatfs_ls+0x1ac>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e35a:	c0 5b       	subi	r28, 0xB0	; 176
    e35c:	dc 4f       	sbci	r29, 0xFC	; 252
    e35e:	18 82       	st	Y, r1
    e360:	19 82       	std	Y+1, r1	; 0x01
    e362:	1a 82       	std	Y+2, r1	; 0x02
    e364:	1b 82       	std	Y+3, r1	; 0x03
    e366:	c0 55       	subi	r28, 0x50	; 80
    e368:	d3 40       	sbci	r29, 0x03	; 3
    e36a:	a1 2c       	mov	r10, r1
    e36c:	b1 2c       	mov	r11, r1
    e36e:	c1 2c       	mov	r12, r1
    e370:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e372:	be 01       	movw	r22, r28
    e374:	64 5f       	subi	r22, 0xF4	; 244
    e376:	7d 4f       	sbci	r23, 0xFD	; 253
    e378:	ce 01       	movw	r24, r28
    e37a:	8e 5d       	subi	r24, 0xDE	; 222
    e37c:	9c 4f       	sbci	r25, 0xFC	; 252
    e37e:	0e 94 01 62 	call	0xc402	; 0xc402 <f_readdir>
    e382:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e384:	89 2b       	or	r24, r25
    e386:	b1 f5       	brne	.+108    	; 0xe3f4 <fatfs_ls+0x100>
			break;
		if(!fno.fname[0]) 
    e388:	ce 5d       	subi	r28, 0xDE	; 222
    e38a:	dd 4f       	sbci	r29, 0xFD	; 253
    e38c:	88 81       	ld	r24, Y
    e38e:	c2 52       	subi	r28, 0x22	; 34
    e390:	d2 40       	sbci	r29, 0x02	; 2
    e392:	88 23       	and	r24, r24
    e394:	79 f1       	breq	.+94     	; 0xe3f4 <fatfs_ls+0x100>
			break;
        if (fno.fattrib & AM_DIR)
    e396:	cc 5e       	subi	r28, 0xEC	; 236
    e398:	dd 4f       	sbci	r29, 0xFD	; 253
    e39a:	88 81       	ld	r24, Y
    e39c:	c4 51       	subi	r28, 0x14	; 20
    e39e:	d2 40       	sbci	r29, 0x02	; 2
    e3a0:	84 ff       	sbrs	r24, 4
    e3a2:	04 c0       	rjmp	.+8      	; 0xe3ac <fatfs_ls+0xb8>
        {
            s2++;
    e3a4:	ff ef       	ldi	r31, 0xFF	; 255
    e3a6:	af 1a       	sub	r10, r31
    e3a8:	bf 0a       	sbc	r11, r31
    e3aa:	1f c0       	rjmp	.+62     	; 0xe3ea <fatfs_ls+0xf6>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e3ac:	4f ef       	ldi	r20, 0xFF	; 255
    e3ae:	c4 1a       	sub	r12, r20
    e3b0:	d4 0a       	sbc	r13, r20
    e3b2:	c4 5f       	subi	r28, 0xF4	; 244
    e3b4:	dd 4f       	sbci	r29, 0xFD	; 253
    e3b6:	48 81       	ld	r20, Y
    e3b8:	59 81       	ldd	r21, Y+1	; 0x01
    e3ba:	6a 81       	ldd	r22, Y+2	; 0x02
    e3bc:	7b 81       	ldd	r23, Y+3	; 0x03
    e3be:	cc 50       	subi	r28, 0x0C	; 12
    e3c0:	d2 40       	sbci	r29, 0x02	; 2
    e3c2:	c0 5b       	subi	r28, 0xB0	; 176
    e3c4:	dc 4f       	sbci	r29, 0xFC	; 252
    e3c6:	88 81       	ld	r24, Y
    e3c8:	99 81       	ldd	r25, Y+1	; 0x01
    e3ca:	aa 81       	ldd	r26, Y+2	; 0x02
    e3cc:	bb 81       	ldd	r27, Y+3	; 0x03
    e3ce:	c0 55       	subi	r28, 0x50	; 80
    e3d0:	d3 40       	sbci	r29, 0x03	; 3
    e3d2:	84 0f       	add	r24, r20
    e3d4:	95 1f       	adc	r25, r21
    e3d6:	a6 1f       	adc	r26, r22
    e3d8:	b7 1f       	adc	r27, r23
    e3da:	c0 5b       	subi	r28, 0xB0	; 176
    e3dc:	dc 4f       	sbci	r29, 0xFC	; 252
    e3de:	88 83       	st	Y, r24
    e3e0:	99 83       	std	Y+1, r25	; 0x01
    e3e2:	aa 83       	std	Y+2, r26	; 0x02
    e3e4:	bb 83       	std	Y+3, r27	; 0x03
    e3e6:	c0 55       	subi	r28, 0x50	; 80
    e3e8:	d3 40       	sbci	r29, 0x03	; 3
        }
        fatfs_filinfo_list(&fno);
    e3ea:	ce 01       	movw	r24, r28
    e3ec:	84 5f       	subi	r24, 0xF4	; 244
    e3ee:	9d 4f       	sbci	r25, 0xFD	; 253
    e3f0:	dd de       	rcall	.-582    	; 0xe1ac <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e3f2:	bf cf       	rjmp	.-130    	; 0xe372 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e3f4:	ce 01       	movw	r24, r28
    e3f6:	8e 5d       	subi	r24, 0xDE	; 222
    e3f8:	9c 4f       	sbci	r25, 0xFC	; 252
    e3fa:	0e 94 ec 61 	call	0xc3d8	; 0xc3d8 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e3fe:	ed b7       	in	r30, 0x3d	; 61
    e400:	fe b7       	in	r31, 0x3e	; 62
    e402:	b3 86       	std	Z+11, r11	; 0x0b
    e404:	a2 86       	std	Z+10, r10	; 0x0a
    e406:	c0 5b       	subi	r28, 0xB0	; 176
    e408:	dc 4f       	sbci	r29, 0xFC	; 252
    e40a:	88 81       	ld	r24, Y
    e40c:	99 81       	ldd	r25, Y+1	; 0x01
    e40e:	aa 81       	ldd	r26, Y+2	; 0x02
    e410:	bb 81       	ldd	r27, Y+3	; 0x03
    e412:	c0 55       	subi	r28, 0x50	; 80
    e414:	d3 40       	sbci	r29, 0x03	; 3
    e416:	86 83       	std	Z+6, r24	; 0x06
    e418:	97 83       	std	Z+7, r25	; 0x07
    e41a:	a0 87       	std	Z+8, r26	; 0x08
    e41c:	b1 87       	std	Z+9, r27	; 0x09
    e41e:	d5 82       	std	Z+5, r13	; 0x05
    e420:	c4 82       	std	Z+4, r12	; 0x04
    e422:	88 eb       	ldi	r24, 0xB8	; 184
    e424:	9a e0       	ldi	r25, 0x0A	; 10
    e426:	a0 e0       	ldi	r26, 0x00	; 0
    e428:	81 83       	std	Z+1, r24	; 0x01
    e42a:	92 83       	std	Z+2, r25	; 0x02
    e42c:	a3 83       	std	Z+3, r26	; 0x03
    e42e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e432:	ae 01       	movw	r20, r28
    e434:	4c 5a       	subi	r20, 0xAC	; 172
    e436:	5c 4f       	sbci	r21, 0xFC	; 252
    e438:	be 01       	movw	r22, r28
    e43a:	60 5b       	subi	r22, 0xB0	; 176
    e43c:	7c 4f       	sbci	r23, 0xFC	; 252
    e43e:	c8 01       	movw	r24, r16
    e440:	0e 94 83 62 	call	0xc506	; 0xc506 <f_getfree>
    e444:	89 2b       	or	r24, r25
    e446:	31 f5       	brne	.+76     	; 0xe494 <fatfs_ls+0x1a0>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e448:	cc 5a       	subi	r28, 0xAC	; 172
    e44a:	dc 4f       	sbci	r29, 0xFC	; 252
    e44c:	e8 81       	ld	r30, Y
    e44e:	f9 81       	ldd	r31, Y+1	; 0x01
    e450:	c4 55       	subi	r28, 0x54	; 84
    e452:	d3 40       	sbci	r29, 0x03	; 3
    e454:	a1 85       	ldd	r26, Z+9	; 0x09
    e456:	b2 85       	ldd	r27, Z+10	; 0x0a
    e458:	c0 5b       	subi	r28, 0xB0	; 176
    e45a:	dc 4f       	sbci	r29, 0xFC	; 252
    e45c:	28 81       	ld	r18, Y
    e45e:	39 81       	ldd	r19, Y+1	; 0x01
    e460:	4a 81       	ldd	r20, Y+2	; 0x02
    e462:	5b 81       	ldd	r21, Y+3	; 0x03
    e464:	c0 55       	subi	r28, 0x50	; 80
    e466:	d3 40       	sbci	r29, 0x03	; 3
    e468:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
    e46c:	22 e0       	ldi	r18, 0x02	; 2
    e46e:	30 e0       	ldi	r19, 0x00	; 0
    e470:	40 e0       	ldi	r20, 0x00	; 0
    e472:	50 e0       	ldi	r21, 0x00	; 0
    e474:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
    e478:	ed b7       	in	r30, 0x3d	; 61
    e47a:	fe b7       	in	r31, 0x3e	; 62
    e47c:	24 83       	std	Z+4, r18	; 0x04
    e47e:	35 83       	std	Z+5, r19	; 0x05
    e480:	46 83       	std	Z+6, r20	; 0x06
    e482:	57 83       	std	Z+7, r21	; 0x07
    e484:	83 ea       	ldi	r24, 0xA3	; 163
    e486:	9a e0       	ldi	r25, 0x0A	; 10
    e488:	a0 e0       	ldi	r26, 0x00	; 0
    e48a:	81 83       	std	Z+1, r24	; 0x01
    e48c:	92 83       	std	Z+2, r25	; 0x02
    e48e:	a3 83       	std	Z+3, r26	; 0x03
    e490:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
	if(res)
    e494:	e1 14       	cp	r14, r1
    e496:	f1 04       	cpc	r15, r1
    e498:	31 f4       	brne	.+12     	; 0xe4a6 <fatfs_ls+0x1b2>
		return(-1);
	return(1);
    e49a:	81 e0       	ldi	r24, 0x01	; 1
    e49c:	90 e0       	ldi	r25, 0x00	; 0
    e49e:	05 c0       	rjmp	.+10     	; 0xe4aa <fatfs_ls+0x1b6>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e4a0:	80 e0       	ldi	r24, 0x00	; 0
    e4a2:	90 e0       	ldi	r25, 0x00	; 0
    e4a4:	02 c0       	rjmp	.+4      	; 0xe4aa <fatfs_ls+0x1b6>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e4a6:	8f ef       	ldi	r24, 0xFF	; 255
    e4a8:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e4aa:	cb 5a       	subi	r28, 0xAB	; 171
    e4ac:	dc 4f       	sbci	r29, 0xFC	; 252
    e4ae:	ea e0       	ldi	r30, 0x0A	; 10
    e4b0:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0000e4b4 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e4b4:	00 d0       	rcall	.+0      	; 0xe4b6 <mmc_test+0x2>
    e4b6:	1f 92       	push	r1
    printf("==============================\n");
    e4b8:	81 e4       	ldi	r24, 0x41	; 65
    e4ba:	9b e0       	ldi	r25, 0x0B	; 11
    e4bc:	a0 e0       	ldi	r26, 0x00	; 0
    e4be:	ed b7       	in	r30, 0x3d	; 61
    e4c0:	fe b7       	in	r31, 0x3e	; 62
    e4c2:	81 83       	std	Z+1, r24	; 0x01
    e4c4:	92 83       	std	Z+2, r25	; 0x02
    e4c6:	a3 83       	std	Z+3, r26	; 0x03
    e4c8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("START MMC TEST\n");
    e4cc:	81 e3       	ldi	r24, 0x31	; 49
    e4ce:	9b e0       	ldi	r25, 0x0B	; 11
    e4d0:	a0 e0       	ldi	r26, 0x00	; 0
    e4d2:	ed b7       	in	r30, 0x3d	; 61
    e4d4:	fe b7       	in	r31, 0x3e	; 62
    e4d6:	81 83       	std	Z+1, r24	; 0x01
    e4d8:	92 83       	std	Z+2, r25	; 0x02
    e4da:	a3 83       	std	Z+3, r26	; 0x03
    e4dc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fatfs_status("/");
    e4e0:	86 ea       	ldi	r24, 0xA6	; 166
    e4e2:	98 e0       	ldi	r25, 0x08	; 8
    e4e4:	d7 dc       	rcall	.-1618   	; 0xde94 <fatfs_status>
    printf("MMC Directory List\n");
    e4e6:	8d e1       	ldi	r24, 0x1D	; 29
    e4e8:	9b e0       	ldi	r25, 0x0B	; 11
    e4ea:	a0 e0       	ldi	r26, 0x00	; 0
    e4ec:	ed b7       	in	r30, 0x3d	; 61
    e4ee:	fe b7       	in	r31, 0x3e	; 62
    e4f0:	81 83       	std	Z+1, r24	; 0x01
    e4f2:	92 83       	std	Z+2, r25	; 0x02
    e4f4:	a3 83       	std	Z+3, r26	; 0x03
    e4f6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fatfs_ls("/");
    e4fa:	86 ea       	ldi	r24, 0xA6	; 166
    e4fc:	98 e0       	ldi	r25, 0x08	; 8
    e4fe:	fa de       	rcall	.-524    	; 0xe2f4 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e500:	8f e0       	ldi	r24, 0x0F	; 15
    e502:	9b e0       	ldi	r25, 0x0B	; 11
    e504:	a0 e0       	ldi	r26, 0x00	; 0
    e506:	ed b7       	in	r30, 0x3d	; 61
    e508:	fe b7       	in	r31, 0x3e	; 62
    e50a:	81 83       	std	Z+1, r24	; 0x01
    e50c:	92 83       	std	Z+2, r25	; 0x02
    e50e:	a3 83       	std	Z+3, r26	; 0x03
    e510:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("==============================\n");
    e514:	8f ee       	ldi	r24, 0xEF	; 239
    e516:	9a e0       	ldi	r25, 0x0A	; 10
    e518:	a0 e0       	ldi	r26, 0x00	; 0
    e51a:	ed b7       	in	r30, 0x3d	; 61
    e51c:	fe b7       	in	r31, 0x3e	; 62
    e51e:	81 83       	std	Z+1, r24	; 0x01
    e520:	92 83       	std	Z+2, r25	; 0x02
    e522:	a3 83       	std	Z+3, r26	; 0x03
    e524:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
}
    e528:	0f 90       	pop	r0
    e52a:	0f 90       	pop	r0
    e52c:	0f 90       	pop	r0
    e52e:	08 95       	ret

0000e530 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e530:	ef 92       	push	r14
    e532:	ff 92       	push	r15
    e534:	0f 93       	push	r16
    e536:	1f 93       	push	r17
    e538:	cf 93       	push	r28
    e53a:	df 93       	push	r29
    e53c:	7c 01       	movw	r14, r24
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e53e:	fb 01       	movw	r30, r22
    e540:	80 81       	ld	r24, Z
    e542:	91 81       	ldd	r25, Z+1	; 0x01

    if(!ptr)
    e544:	00 97       	sbiw	r24, 0x00	; 0
    e546:	19 f4       	brne	.+6      	; 0xe54e <fatfs_tests+0x1e>
        return(0);
    e548:	80 e0       	ldi	r24, 0x00	; 0
    e54a:	90 e0       	ldi	r25, 0x00	; 0
    e54c:	6a c0       	rjmp	.+212    	; 0xe622 <fatfs_tests+0xf2>
    e54e:	eb 01       	movw	r28, r22

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e550:	62 ed       	ldi	r22, 0xD2	; 210
    e552:	78 e0       	ldi	r23, 0x08	; 8
    e554:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
    e558:	89 2b       	or	r24, r25
    e55a:	b1 f3       	breq	.-20     	; 0xe548 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e55c:	0a 81       	ldd	r16, Y+2	; 0x02
    e55e:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e560:	01 15       	cp	r16, r1
    e562:	11 05       	cpc	r17, r1
    e564:	21 f4       	brne	.+8      	; 0xe56e <fatfs_tests+0x3e>
        {
            fatfs_help(1);
    e566:	81 e0       	ldi	r24, 0x01	; 1
    e568:	90 e0       	ldi	r25, 0x00	; 0
    e56a:	a3 de       	rcall	.-698    	; 0xe2b2 <fatfs_help>
    e56c:	3a c0       	rjmp	.+116    	; 0xe5e2 <fatfs_tests+0xb2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e56e:	6d e7       	ldi	r22, 0x7D	; 125
    e570:	76 e1       	ldi	r23, 0x16	; 22
    e572:	c8 01       	movw	r24, r16
    e574:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
    e578:	89 2b       	or	r24, r25
    e57a:	a9 f7       	brne	.-22     	; 0xe566 <fatfs_tests+0x36>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e57c:	68 ed       	ldi	r22, 0xD8	; 216
    e57e:	78 e0       	ldi	r23, 0x08	; 8
    e580:	c8 01       	movw	r24, r16
    e582:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
    e586:	89 2b       	or	r24, r25
    e588:	21 f0       	breq	.+8      	; 0xe592 <fatfs_tests+0x62>
    e58a:	24 96       	adiw	r28, 0x04	; 4
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e58c:	02 e0       	ldi	r16, 0x02	; 2
    e58e:	10 e0       	ldi	r17, 0x00	; 0
    e590:	0f c0       	rjmp	.+30     	; 0xe5b0 <fatfs_tests+0x80>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e592:	68 ed       	ldi	r22, 0xD8	; 216
    e594:	7b e0       	ldi	r23, 0x0B	; 11
    e596:	c8 01       	movw	r24, r16
    e598:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
    e59c:	89 2b       	or	r24, r25
    e59e:	a9 f7       	brne	.-22     	; 0xe58a <fatfs_tests+0x5a>
    e5a0:	15 c0       	rjmp	.+42     	; 0xe5cc <fatfs_tests+0x9c>
        int args = 0;
//printf("argc:%d\n", argc);
        for(i=ind;i<argc;++i)
        {
//printf("%d:%s\n", i, argv[i]);
            if(fatfs_ls(argv[i]) == 0)
    e5a2:	89 91       	ld	r24, Y+
    e5a4:	99 91       	ld	r25, Y+
    e5a6:	a6 de       	rcall	.-692    	; 0xe2f4 <fatfs_ls>
    e5a8:	89 2b       	or	r24, r25
    e5aa:	69 f0       	breq	.+26     	; 0xe5c6 <fatfs_tests+0x96>
    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
//printf("argc:%d\n", argc);
        for(i=ind;i<argc;++i)
    e5ac:	0f 5f       	subi	r16, 0xFF	; 255
    e5ae:	1f 4f       	sbci	r17, 0xFF	; 255
    e5b0:	0e 15       	cp	r16, r14
    e5b2:	1f 05       	cpc	r17, r15
    e5b4:	b4 f3       	brlt	.-20     	; 0xe5a2 <fatfs_tests+0x72>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e5b6:	02 30       	cpi	r16, 0x02	; 2
    e5b8:	11 05       	cpc	r17, r1
    e5ba:	99 f4       	brne	.+38     	; 0xe5e2 <fatfs_tests+0xb2>
        {
            if(fatfs_ls("") == 0)
    e5bc:	8d e2       	ldi	r24, 0x2D	; 45
    e5be:	9c e0       	ldi	r25, 0x0C	; 12
    e5c0:	99 de       	rcall	.-718    	; 0xe2f4 <fatfs_ls>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        if(fatfs_status(argv[ind]) == 0)
    e5c2:	89 2b       	or	r24, r25
    e5c4:	71 f4       	brne	.+28     	; 0xe5e2 <fatfs_tests+0xb2>
        for(i=ind;i<argc;++i)
        {
//printf("%d:%s\n", i, argv[i]);
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e5c6:	8f ef       	ldi	r24, 0xFF	; 255
    e5c8:	9f ef       	ldi	r25, 0xFF	; 255
    e5ca:	2b c0       	rjmp	.+86     	; 0xe622 <fatfs_tests+0xf2>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e5cc:	97 01       	movw	r18, r14
    e5ce:	42 e0       	ldi	r20, 0x02	; 2
    e5d0:	50 e0       	ldi	r21, 0x00	; 0
    e5d2:	6b ed       	ldi	r22, 0xDB	; 219
    e5d4:	78 e0       	ldi	r23, 0x08	; 8
    e5d6:	c8 01       	movw	r24, r16
    e5d8:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
    e5dc:	89 2b       	or	r24, r25
    {
        mmc_test();
    e5de:	21 f0       	breq	.+8      	; 0xe5e8 <fatfs_tests+0xb8>
    e5e0:	69 df       	rcall	.-302    	; 0xe4b4 <mmc_test>
        return(1);
    e5e2:	81 e0       	ldi	r24, 0x01	; 1
    e5e4:	90 e0       	ldi	r25, 0x00	; 0
    e5e6:	1d c0       	rjmp	.+58     	; 0xe622 <fatfs_tests+0xf2>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e5e8:	97 01       	movw	r18, r14
    e5ea:	42 e0       	ldi	r20, 0x02	; 2
    e5ec:	50 e0       	ldi	r21, 0x00	; 0
    e5ee:	64 ee       	ldi	r22, 0xE4	; 228
    e5f0:	78 e0       	ldi	r23, 0x08	; 8
    e5f2:	c8 01       	movw	r24, r16
    e5f4:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
    e5f8:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e5fa:	21 f0       	breq	.+8      	; 0xe604 <fatfs_tests+0xd4>
    e5fc:	81 e0       	ldi	r24, 0x01	; 1
    e5fe:	90 e0       	ldi	r25, 0x00	; 0
    e600:	72 da       	rcall	.-2844   	; 0xdae6 <mmc_init>
    e602:	ef cf       	rjmp	.-34     	; 0xe5e2 <fatfs_tests+0xb2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e604:	97 01       	movw	r18, r14
    e606:	43 e0       	ldi	r20, 0x03	; 3
    e608:	50 e0       	ldi	r21, 0x00	; 0
    e60a:	6d ee       	ldi	r22, 0xED	; 237
    e60c:	78 e0       	ldi	r23, 0x08	; 8
    e60e:	c8 01       	movw	r24, r16
    e610:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
    e614:	89 2b       	or	r24, r25
    e616:	09 f4       	brne	.+2      	; 0xe61a <fatfs_tests+0xea>
    {
        if(fatfs_status(argv[ind]) == 0)
    e618:	97 cf       	rjmp	.-210    	; 0xe548 <fatfs_tests+0x18>
    e61a:	8c 81       	ldd	r24, Y+4	; 0x04
    e61c:	9d 81       	ldd	r25, Y+5	; 0x05
    e61e:	3a dc       	rcall	.-1932   	; 0xde94 <fatfs_status>
    e620:	d0 cf       	rjmp	.-96     	; 0xe5c2 <fatfs_tests+0x92>
        return(1);
    }
#endif

    return(0);
}
    e622:	cd b7       	in	r28, 0x3d	; 61
    e624:	de b7       	in	r29, 0x3e	; 62
    e626:	e6 e0       	ldi	r30, 0x06	; 6
    e628:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

0000e62c <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e62c:	8f 92       	push	r8
    e62e:	9f 92       	push	r9
    e630:	af 92       	push	r10
    e632:	bf 92       	push	r11
    e634:	ef 92       	push	r14
    e636:	ff 92       	push	r15
    e638:	0f 93       	push	r16
    e63a:	1f 93       	push	r17
    e63c:	cf 93       	push	r28
    e63e:	df 93       	push	r29
    e640:	00 d0       	rcall	.+0      	; 0xe642 <fatfs_getc+0x16>
    e642:	1f 92       	push	r1
    e644:	cd b7       	in	r28, 0x3d	; 61
    e646:	de b7       	in	r29, 0x3e	; 62
    e648:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    e64c:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    e650:	00 97       	sbiw	r24, 0x00	; 0
    e652:	39 f4       	brne	.+14     	; 0xe662 <fatfs_getc+0x36>
    e654:	89 e0       	ldi	r24, 0x09	; 9
    e656:	90 e0       	ldi	r25, 0x00	; 0
    e658:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    e65c:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    e660:	2f c0       	rjmp	.+94     	; 0xe6c0 <fatfs_getc+0x94>
    e662:	fc 01       	movw	r30, r24
    e664:	e4 84       	ldd	r14, Z+12	; 0x0c
    e666:	f5 84       	ldd	r15, Z+13	; 0x0d
    e668:	e1 14       	cp	r14, r1
    e66a:	f1 04       	cpc	r15, r1
    e66c:	99 f3       	breq	.-26     	; 0xe654 <fatfs_getc+0x28>
    e66e:	8c 01       	movw	r16, r24
    e670:	9e 01       	movw	r18, r28
    e672:	2f 5f       	subi	r18, 0xFF	; 255
    e674:	3f 4f       	sbci	r19, 0xFF	; 255
    e676:	41 e0       	ldi	r20, 0x01	; 1
    e678:	50 e0       	ldi	r21, 0x00	; 0
    e67a:	be 01       	movw	r22, r28
    e67c:	6d 5f       	subi	r22, 0xFD	; 253
    e67e:	7f 4f       	sbci	r23, 0xFF	; 255
    e680:	c7 01       	movw	r24, r14
    e682:	0e 94 b4 59 	call	0xb368	; 0xb368 <f_read>
    e686:	00 97       	sbiw	r24, 0x00	; 0
    e688:	31 f4       	brne	.+12     	; 0xe696 <fatfs_getc+0x6a>
    e68a:	29 81       	ldd	r18, Y+1	; 0x01
    e68c:	3a 81       	ldd	r19, Y+2	; 0x02
    e68e:	21 30       	cpi	r18, 0x01	; 1
    e690:	31 05       	cpc	r19, r1
    e692:	c9 f0       	breq	.+50     	; 0xe6c6 <fatfs_getc+0x9a>
    e694:	03 c0       	rjmp	.+6      	; 0xe69c <fatfs_getc+0x70>
    e696:	84 31       	cpi	r24, 0x14	; 20
    e698:	91 05       	cpc	r25, r1
    e69a:	40 f4       	brcc	.+16     	; 0xe6ac <fatfs_getc+0x80>
    e69c:	fc 01       	movw	r30, r24
    e69e:	ea 55       	subi	r30, 0x5A	; 90
    e6a0:	f4 4f       	sbci	r31, 0xF4	; 244
    e6a2:	80 81       	ld	r24, Z
    e6a4:	08 2e       	mov	r0, r24
    e6a6:	00 0c       	add	r0, r0
    e6a8:	99 0b       	sbc	r25, r25
    e6aa:	02 c0       	rjmp	.+4      	; 0xe6b0 <fatfs_getc+0x84>
    e6ac:	83 e2       	ldi	r24, 0x23	; 35
    e6ae:	90 e0       	ldi	r25, 0x00	; 0
    e6b0:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    e6b4:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    e6b8:	f8 01       	movw	r30, r16
    e6ba:	83 81       	ldd	r24, Z+3	; 0x03
    e6bc:	80 62       	ori	r24, 0x20	; 32
    e6be:	83 83       	std	Z+3, r24	; 0x03
    e6c0:	8f ef       	ldi	r24, 0xFF	; 255
    e6c2:	9f ef       	ldi	r25, 0xFF	; 255
    e6c4:	28 c0       	rjmp	.+80     	; 0xe716 <fatfs_getc+0xea>
    e6c6:	8b 81       	ldd	r24, Y+3	; 0x03
    e6c8:	8d 30       	cpi	r24, 0x0D	; 13
    e6ca:	01 f5       	brne	.+64     	; 0xe70c <fatfs_getc+0xe0>
    e6cc:	f7 01       	movw	r30, r14
    e6ce:	80 88       	ldd	r8, Z+16	; 0x10
    e6d0:	91 88       	ldd	r9, Z+17	; 0x11
    e6d2:	a2 88       	ldd	r10, Z+18	; 0x12
    e6d4:	b3 88       	ldd	r11, Z+19	; 0x13
    e6d6:	9e 01       	movw	r18, r28
    e6d8:	2f 5f       	subi	r18, 0xFF	; 255
    e6da:	3f 4f       	sbci	r19, 0xFF	; 255
    e6dc:	41 e0       	ldi	r20, 0x01	; 1
    e6de:	50 e0       	ldi	r21, 0x00	; 0
    e6e0:	be 01       	movw	r22, r28
    e6e2:	6d 5f       	subi	r22, 0xFD	; 253
    e6e4:	7f 4f       	sbci	r23, 0xFF	; 255
    e6e6:	c7 01       	movw	r24, r14
    e6e8:	0e 94 b4 59 	call	0xb368	; 0xb368 <f_read>
    e6ec:	89 2b       	or	r24, r25
    e6ee:	89 f4       	brne	.+34     	; 0xe712 <fatfs_getc+0xe6>
    e6f0:	89 81       	ldd	r24, Y+1	; 0x01
    e6f2:	9a 81       	ldd	r25, Y+2	; 0x02
    e6f4:	01 97       	sbiw	r24, 0x01	; 1
    e6f6:	69 f4       	brne	.+26     	; 0xe712 <fatfs_getc+0xe6>
    e6f8:	8b 81       	ldd	r24, Y+3	; 0x03
    e6fa:	8a 30       	cpi	r24, 0x0A	; 10
    e6fc:	31 f0       	breq	.+12     	; 0xe70a <fatfs_getc+0xde>
    e6fe:	b5 01       	movw	r22, r10
    e700:	a4 01       	movw	r20, r8
    e702:	c7 01       	movw	r24, r14
    e704:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <f_lseek>
    e708:	04 c0       	rjmp	.+8      	; 0xe712 <fatfs_getc+0xe6>
    e70a:	8b 83       	std	Y+3, r24	; 0x03
    e70c:	8b 81       	ldd	r24, Y+3	; 0x03
    e70e:	90 e0       	ldi	r25, 0x00	; 0
    e710:	02 c0       	rjmp	.+4      	; 0xe716 <fatfs_getc+0xea>
    e712:	8a e0       	ldi	r24, 0x0A	; 10
    e714:	90 e0       	ldi	r25, 0x00	; 0
    e716:	0f 90       	pop	r0
    e718:	0f 90       	pop	r0
    e71a:	0f 90       	pop	r0
    e71c:	df 91       	pop	r29
    e71e:	cf 91       	pop	r28
    e720:	1f 91       	pop	r17
    e722:	0f 91       	pop	r16
    e724:	ff 90       	pop	r15
    e726:	ef 90       	pop	r14
    e728:	bf 90       	pop	r11
    e72a:	af 90       	pop	r10
    e72c:	9f 90       	pop	r9
    e72e:	8f 90       	pop	r8
    e730:	08 95       	ret

0000e732 <fatfs_putc>:
    e732:	a3 e0       	ldi	r26, 0x03	; 3
    e734:	b0 e0       	ldi	r27, 0x00	; 0
    e736:	ef e9       	ldi	r30, 0x9F	; 159
    e738:	f3 e7       	ldi	r31, 0x73	; 115
    e73a:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    e73e:	8b 83       	std	Y+3, r24	; 0x03
    e740:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    e744:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    e748:	61 15       	cp	r22, r1
    e74a:	71 05       	cpc	r23, r1
    e74c:	39 f4       	brne	.+14     	; 0xe75c <fatfs_putc+0x2a>
    e74e:	89 e0       	ldi	r24, 0x09	; 9
    e750:	90 e0       	ldi	r25, 0x00	; 0
    e752:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    e756:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    e75a:	2d c0       	rjmp	.+90     	; 0xe7b6 <fatfs_putc+0x84>
    e75c:	fb 01       	movw	r30, r22
    e75e:	84 85       	ldd	r24, Z+12	; 0x0c
    e760:	95 85       	ldd	r25, Z+13	; 0x0d
    e762:	00 97       	sbiw	r24, 0x00	; 0
    e764:	a1 f3       	breq	.-24     	; 0xe74e <fatfs_putc+0x1c>
    e766:	8b 01       	movw	r16, r22
    e768:	9e 01       	movw	r18, r28
    e76a:	2f 5f       	subi	r18, 0xFF	; 255
    e76c:	3f 4f       	sbci	r19, 0xFF	; 255
    e76e:	41 e0       	ldi	r20, 0x01	; 1
    e770:	50 e0       	ldi	r21, 0x00	; 0
    e772:	be 01       	movw	r22, r28
    e774:	6d 5f       	subi	r22, 0xFD	; 253
    e776:	7f 4f       	sbci	r23, 0xFF	; 255
    e778:	0e 94 ff 5a 	call	0xb5fe	; 0xb5fe <f_write>
    e77c:	00 97       	sbiw	r24, 0x00	; 0
    e77e:	31 f4       	brne	.+12     	; 0xe78c <fatfs_putc+0x5a>
    e780:	29 81       	ldd	r18, Y+1	; 0x01
    e782:	3a 81       	ldd	r19, Y+2	; 0x02
    e784:	21 30       	cpi	r18, 0x01	; 1
    e786:	31 05       	cpc	r19, r1
    e788:	c9 f0       	breq	.+50     	; 0xe7bc <fatfs_putc+0x8a>
    e78a:	03 c0       	rjmp	.+6      	; 0xe792 <fatfs_putc+0x60>
    e78c:	84 31       	cpi	r24, 0x14	; 20
    e78e:	91 05       	cpc	r25, r1
    e790:	40 f4       	brcc	.+16     	; 0xe7a2 <fatfs_putc+0x70>
    e792:	fc 01       	movw	r30, r24
    e794:	ea 55       	subi	r30, 0x5A	; 90
    e796:	f4 4f       	sbci	r31, 0xF4	; 244
    e798:	80 81       	ld	r24, Z
    e79a:	08 2e       	mov	r0, r24
    e79c:	00 0c       	add	r0, r0
    e79e:	99 0b       	sbc	r25, r25
    e7a0:	02 c0       	rjmp	.+4      	; 0xe7a6 <fatfs_putc+0x74>
    e7a2:	83 e2       	ldi	r24, 0x23	; 35
    e7a4:	90 e0       	ldi	r25, 0x00	; 0
    e7a6:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    e7aa:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    e7ae:	f8 01       	movw	r30, r16
    e7b0:	83 81       	ldd	r24, Z+3	; 0x03
    e7b2:	80 62       	ori	r24, 0x20	; 32
    e7b4:	83 83       	std	Z+3, r24	; 0x03
    e7b6:	8f ef       	ldi	r24, 0xFF	; 255
    e7b8:	9f ef       	ldi	r25, 0xFF	; 255
    e7ba:	02 c0       	rjmp	.+4      	; 0xe7c0 <fatfs_putc+0x8e>
    e7bc:	8b 81       	ldd	r24, Y+3	; 0x03
    e7be:	90 e0       	ldi	r25, 0x00	; 0
    e7c0:	23 96       	adiw	r28, 0x03	; 3
    e7c2:	e4 e0       	ldi	r30, 0x04	; 4
    e7c4:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

0000e7c8 <fgetc>:
    e7c8:	cf 93       	push	r28
    e7ca:	df 93       	push	r29
    e7cc:	00 d0       	rcall	.+0      	; 0xe7ce <fgetc+0x6>
    e7ce:	1f 92       	push	r1
    e7d0:	ec 01       	movw	r28, r24
    e7d2:	00 97       	sbiw	r24, 0x00	; 0
    e7d4:	39 f4       	brne	.+14     	; 0xe7e4 <fgetc+0x1c>
    e7d6:	89 e0       	ldi	r24, 0x09	; 9
    e7d8:	90 e0       	ldi	r25, 0x00	; 0
    e7da:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    e7de:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    e7e2:	40 c0       	rjmp	.+128    	; 0xe864 <fgetc+0x9c>
    e7e4:	2b 81       	ldd	r18, Y+3	; 0x03
    e7e6:	20 ff       	sbrs	r18, 0
    e7e8:	3d c0       	rjmp	.+122    	; 0xe864 <fgetc+0x9c>
    e7ea:	26 ff       	sbrs	r18, 6
    e7ec:	0a c0       	rjmp	.+20     	; 0xe802 <fgetc+0x3a>
    e7ee:	2f 7b       	andi	r18, 0xBF	; 191
    e7f0:	2b 83       	std	Y+3, r18	; 0x03
    e7f2:	8e 81       	ldd	r24, Y+6	; 0x06
    e7f4:	9f 81       	ldd	r25, Y+7	; 0x07
    e7f6:	01 96       	adiw	r24, 0x01	; 1
    e7f8:	9f 83       	std	Y+7, r25	; 0x07
    e7fa:	8e 83       	std	Y+6, r24	; 0x06
    e7fc:	8a 81       	ldd	r24, Y+2	; 0x02
    e7fe:	90 e0       	ldi	r25, 0x00	; 0
    e800:	33 c0       	rjmp	.+102    	; 0xe868 <fgetc+0xa0>
    e802:	22 ff       	sbrs	r18, 2
    e804:	0d c0       	rjmp	.+26     	; 0xe820 <fgetc+0x58>
    e806:	e8 81       	ld	r30, Y
    e808:	f9 81       	ldd	r31, Y+1	; 0x01
    e80a:	80 81       	ld	r24, Z
    e80c:	90 e0       	ldi	r25, 0x00	; 0
    e80e:	00 97       	sbiw	r24, 0x00	; 0
    e810:	19 f4       	brne	.+6      	; 0xe818 <fgetc+0x50>
    e812:	20 62       	ori	r18, 0x20	; 32
    e814:	2b 83       	std	Y+3, r18	; 0x03
    e816:	26 c0       	rjmp	.+76     	; 0xe864 <fgetc+0x9c>
    e818:	31 96       	adiw	r30, 0x01	; 1
    e81a:	f9 83       	std	Y+1, r31	; 0x01
    e81c:	e8 83       	st	Y, r30
    e81e:	1b c0       	rjmp	.+54     	; 0xe856 <fgetc+0x8e>
    e820:	ea 85       	ldd	r30, Y+10	; 0x0a
    e822:	fb 85       	ldd	r31, Y+11	; 0x0b
    e824:	30 97       	sbiw	r30, 0x00	; 0
    e826:	59 f4       	brne	.+22     	; 0xe83e <fgetc+0x76>
    e828:	8a e1       	ldi	r24, 0x1A	; 26
    e82a:	9c e0       	ldi	r25, 0x0C	; 12
    e82c:	a0 e0       	ldi	r26, 0x00	; 0
    e82e:	ed b7       	in	r30, 0x3d	; 61
    e830:	fe b7       	in	r31, 0x3e	; 62
    e832:	81 83       	std	Z+1, r24	; 0x01
    e834:	92 83       	std	Z+2, r25	; 0x02
    e836:	a3 83       	std	Z+3, r26	; 0x03
    e838:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    e83c:	13 c0       	rjmp	.+38     	; 0xe864 <fgetc+0x9c>
    e83e:	09 95       	icall
    e840:	97 ff       	sbrs	r25, 7
    e842:	09 c0       	rjmp	.+18     	; 0xe856 <fgetc+0x8e>
    e844:	2b 81       	ldd	r18, Y+3	; 0x03
    e846:	02 96       	adiw	r24, 0x02	; 2
    e848:	11 f0       	breq	.+4      	; 0xe84e <fgetc+0x86>
    e84a:	80 e2       	ldi	r24, 0x20	; 32
    e84c:	01 c0       	rjmp	.+2      	; 0xe850 <fgetc+0x88>
    e84e:	80 e1       	ldi	r24, 0x10	; 16
    e850:	82 2b       	or	r24, r18
    e852:	8b 83       	std	Y+3, r24	; 0x03
    e854:	07 c0       	rjmp	.+14     	; 0xe864 <fgetc+0x9c>
    e856:	2e 81       	ldd	r18, Y+6	; 0x06
    e858:	3f 81       	ldd	r19, Y+7	; 0x07
    e85a:	2f 5f       	subi	r18, 0xFF	; 255
    e85c:	3f 4f       	sbci	r19, 0xFF	; 255
    e85e:	3f 83       	std	Y+7, r19	; 0x07
    e860:	2e 83       	std	Y+6, r18	; 0x06
    e862:	02 c0       	rjmp	.+4      	; 0xe868 <fgetc+0xa0>
    e864:	8f ef       	ldi	r24, 0xFF	; 255
    e866:	9f ef       	ldi	r25, 0xFF	; 255
    e868:	cd b7       	in	r28, 0x3d	; 61
    e86a:	de b7       	in	r29, 0x3e	; 62
    e86c:	23 96       	adiw	r28, 0x03	; 3
    e86e:	e2 e0       	ldi	r30, 0x02	; 2
    e870:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000e874 <fputc>:
    e874:	cf 93       	push	r28
    e876:	df 93       	push	r29
    e878:	00 d0       	rcall	.+0      	; 0xe87a <fputc+0x6>
    e87a:	1f 92       	push	r1
    e87c:	eb 01       	movw	r28, r22
    e87e:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    e882:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    e886:	20 91 c9 1c 	lds	r18, 0x1CC9	; 0x801cc9 <__iob+0x2>
    e88a:	30 91 ca 1c 	lds	r19, 0x1CCA	; 0x801cca <__iob+0x3>
    e88e:	62 17       	cp	r22, r18
    e890:	73 07       	cpc	r23, r19
    e892:	49 f0       	breq	.+18     	; 0xe8a6 <fputc+0x32>
    e894:	20 91 cb 1c 	lds	r18, 0x1CCB	; 0x801ccb <__iob+0x4>
    e898:	30 91 cc 1c 	lds	r19, 0x1CCC	; 0x801ccc <__iob+0x5>
    e89c:	62 17       	cp	r22, r18
    e89e:	73 07       	cpc	r23, r19
    e8a0:	11 f0       	breq	.+4      	; 0xe8a6 <fputc+0x32>
    e8a2:	47 df       	rcall	.-370    	; 0xe732 <fatfs_putc>
    e8a4:	33 c0       	rjmp	.+102    	; 0xe90c <fputc+0x98>
    e8a6:	2b 81       	ldd	r18, Y+3	; 0x03
    e8a8:	21 ff       	sbrs	r18, 1
    e8aa:	2e c0       	rjmp	.+92     	; 0xe908 <fputc+0x94>
    e8ac:	22 ff       	sbrs	r18, 2
    e8ae:	10 c0       	rjmp	.+32     	; 0xe8d0 <fputc+0x5c>
    e8b0:	4e 81       	ldd	r20, Y+6	; 0x06
    e8b2:	5f 81       	ldd	r21, Y+7	; 0x07
    e8b4:	2c 81       	ldd	r18, Y+4	; 0x04
    e8b6:	3d 81       	ldd	r19, Y+5	; 0x05
    e8b8:	42 17       	cp	r20, r18
    e8ba:	53 07       	cpc	r21, r19
    e8bc:	f4 f4       	brge	.+60     	; 0xe8fa <fputc+0x86>
    e8be:	e8 81       	ld	r30, Y
    e8c0:	f9 81       	ldd	r31, Y+1	; 0x01
    e8c2:	9f 01       	movw	r18, r30
    e8c4:	2f 5f       	subi	r18, 0xFF	; 255
    e8c6:	3f 4f       	sbci	r19, 0xFF	; 255
    e8c8:	39 83       	std	Y+1, r19	; 0x01
    e8ca:	28 83       	st	Y, r18
    e8cc:	80 83       	st	Z, r24
    e8ce:	15 c0       	rjmp	.+42     	; 0xe8fa <fputc+0x86>
    e8d0:	e8 85       	ldd	r30, Y+8	; 0x08
    e8d2:	f9 85       	ldd	r31, Y+9	; 0x09
    e8d4:	30 97       	sbiw	r30, 0x00	; 0
    e8d6:	59 f4       	brne	.+22     	; 0xe8ee <fputc+0x7a>
    e8d8:	82 e0       	ldi	r24, 0x02	; 2
    e8da:	9c e0       	ldi	r25, 0x0C	; 12
    e8dc:	a0 e0       	ldi	r26, 0x00	; 0
    e8de:	ed b7       	in	r30, 0x3d	; 61
    e8e0:	fe b7       	in	r31, 0x3e	; 62
    e8e2:	81 83       	std	Z+1, r24	; 0x01
    e8e4:	92 83       	std	Z+2, r25	; 0x02
    e8e6:	a3 83       	std	Z+3, r26	; 0x03
    e8e8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    e8ec:	0d c0       	rjmp	.+26     	; 0xe908 <fputc+0x94>
    e8ee:	be 01       	movw	r22, r28
    e8f0:	09 95       	icall
    e8f2:	8f 3f       	cpi	r24, 0xFF	; 255
    e8f4:	ff ef       	ldi	r31, 0xFF	; 255
    e8f6:	9f 07       	cpc	r25, r31
    e8f8:	39 f0       	breq	.+14     	; 0xe908 <fputc+0x94>
    e8fa:	2e 81       	ldd	r18, Y+6	; 0x06
    e8fc:	3f 81       	ldd	r19, Y+7	; 0x07
    e8fe:	2f 5f       	subi	r18, 0xFF	; 255
    e900:	3f 4f       	sbci	r19, 0xFF	; 255
    e902:	3f 83       	std	Y+7, r19	; 0x07
    e904:	2e 83       	std	Y+6, r18	; 0x06
    e906:	02 c0       	rjmp	.+4      	; 0xe90c <fputc+0x98>
    e908:	8f ef       	ldi	r24, 0xFF	; 255
    e90a:	9f ef       	ldi	r25, 0xFF	; 255
    e90c:	cd b7       	in	r28, 0x3d	; 61
    e90e:	de b7       	in	r29, 0x3e	; 62
    e910:	23 96       	adiw	r28, 0x03	; 3
    e912:	e2 e0       	ldi	r30, 0x02	; 2
    e914:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000e918 <_fprintf_putc>:
    e918:	fc 01       	movw	r30, r24
    e91a:	86 2f       	mov	r24, r22
    e91c:	26 81       	ldd	r18, Z+6	; 0x06
    e91e:	37 81       	ldd	r19, Z+7	; 0x07
    e920:	2f 5f       	subi	r18, 0xFF	; 255
    e922:	3f 4f       	sbci	r19, 0xFF	; 255
    e924:	37 83       	std	Z+7, r19	; 0x07
    e926:	26 83       	std	Z+6, r18	; 0x06
    e928:	62 81       	ldd	r22, Z+2	; 0x02
    e92a:	73 81       	ldd	r23, Z+3	; 0x03
    e92c:	90 e0       	ldi	r25, 0x00	; 0
    e92e:	a2 cf       	rjmp	.-188    	; 0xe874 <fputc>
    e930:	08 95       	ret

0000e932 <getchar>:
    e932:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    e936:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    e93a:	46 cf       	rjmp	.-372    	; 0xe7c8 <fgetc>
    e93c:	08 95       	ret

0000e93e <putchar>:
    e93e:	60 91 c9 1c 	lds	r22, 0x1CC9	; 0x801cc9 <__iob+0x2>
    e942:	70 91 ca 1c 	lds	r23, 0x1CCA	; 0x801cca <__iob+0x3>
    e946:	96 cf       	rjmp	.-212    	; 0xe874 <fputc>
    e948:	08 95       	ret

0000e94a <fgets>:
    e94a:	a0 e0       	ldi	r26, 0x00	; 0
    e94c:	b0 e0       	ldi	r27, 0x00	; 0
    e94e:	eb ea       	ldi	r30, 0xAB	; 171
    e950:	f4 e7       	ldi	r31, 0x74	; 116
    e952:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    e956:	7c 01       	movw	r14, r24
    e958:	6a 01       	movw	r12, r20
    e95a:	8b 01       	movw	r16, r22
    e95c:	c0 e0       	ldi	r28, 0x00	; 0
    e95e:	d0 e0       	ldi	r29, 0x00	; 0
    e960:	01 15       	cp	r16, r1
    e962:	11 05       	cpc	r17, r1
    e964:	41 f0       	breq	.+16     	; 0xe976 <fgets+0x2c>
    e966:	c6 01       	movw	r24, r12
    e968:	2f df       	rcall	.-418    	; 0xe7c8 <fgetc>
    e96a:	8f 3f       	cpi	r24, 0xFF	; 255
    e96c:	2f ef       	ldi	r18, 0xFF	; 255
    e96e:	92 07       	cpc	r25, r18
    e970:	39 f4       	brne	.+14     	; 0xe980 <fgets+0x36>
    e972:	20 97       	sbiw	r28, 0x00	; 0
    e974:	b9 f0       	breq	.+46     	; 0xe9a4 <fgets+0x5a>
    e976:	ce 0d       	add	r28, r14
    e978:	df 1d       	adc	r29, r15
    e97a:	18 82       	st	Y, r1
    e97c:	c7 01       	movw	r24, r14
    e97e:	14 c0       	rjmp	.+40     	; 0xe9a8 <fgets+0x5e>
    e980:	8a 30       	cpi	r24, 0x0A	; 10
    e982:	91 05       	cpc	r25, r1
    e984:	c1 f3       	breq	.-16     	; 0xe976 <fgets+0x2c>
    e986:	88 30       	cpi	r24, 0x08	; 8
    e988:	91 05       	cpc	r25, r1
    e98a:	21 f4       	brne	.+8      	; 0xe994 <fgets+0x4a>
    e98c:	20 97       	sbiw	r28, 0x00	; 0
    e98e:	39 f0       	breq	.+14     	; 0xe99e <fgets+0x54>
    e990:	21 97       	sbiw	r28, 0x01	; 1
    e992:	05 c0       	rjmp	.+10     	; 0xe99e <fgets+0x54>
    e994:	f7 01       	movw	r30, r14
    e996:	ec 0f       	add	r30, r28
    e998:	fd 1f       	adc	r31, r29
    e99a:	80 83       	st	Z, r24
    e99c:	21 96       	adiw	r28, 0x01	; 1
    e99e:	01 50       	subi	r16, 0x01	; 1
    e9a0:	11 09       	sbc	r17, r1
    e9a2:	de cf       	rjmp	.-68     	; 0xe960 <fgets+0x16>
    e9a4:	80 e0       	ldi	r24, 0x00	; 0
    e9a6:	90 e0       	ldi	r25, 0x00	; 0
    e9a8:	cd b7       	in	r28, 0x3d	; 61
    e9aa:	de b7       	in	r29, 0x3e	; 62
    e9ac:	e8 e0       	ldi	r30, 0x08	; 8
    e9ae:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000e9b2 <fputs>:
    e9b2:	0f 93       	push	r16
    e9b4:	1f 93       	push	r17
    e9b6:	cf 93       	push	r28
    e9b8:	df 93       	push	r29
    e9ba:	8b 01       	movw	r16, r22
    e9bc:	ec 01       	movw	r28, r24
    e9be:	89 91       	ld	r24, Y+
    e9c0:	88 23       	and	r24, r24
    e9c2:	41 f0       	breq	.+16     	; 0xe9d4 <fputs+0x22>
    e9c4:	b8 01       	movw	r22, r16
    e9c6:	90 e0       	ldi	r25, 0x00	; 0
    e9c8:	55 df       	rcall	.-342    	; 0xe874 <fputc>
    e9ca:	8f 3f       	cpi	r24, 0xFF	; 255
    e9cc:	2f ef       	ldi	r18, 0xFF	; 255
    e9ce:	92 07       	cpc	r25, r18
    e9d0:	b1 f7       	brne	.-20     	; 0xe9be <fputs+0xc>
    e9d2:	02 c0       	rjmp	.+4      	; 0xe9d8 <fputs+0x26>
    e9d4:	80 e0       	ldi	r24, 0x00	; 0
    e9d6:	90 e0       	ldi	r25, 0x00	; 0
    e9d8:	df 91       	pop	r29
    e9da:	cf 91       	pop	r28
    e9dc:	1f 91       	pop	r17
    e9de:	0f 91       	pop	r16
    e9e0:	08 95       	ret

0000e9e2 <puts>:
    e9e2:	cf 93       	push	r28
    e9e4:	df 93       	push	r29
    e9e6:	ec 01       	movw	r28, r24
    e9e8:	89 91       	ld	r24, Y+
    e9ea:	60 91 c9 1c 	lds	r22, 0x1CC9	; 0x801cc9 <__iob+0x2>
    e9ee:	70 91 ca 1c 	lds	r23, 0x1CCA	; 0x801cca <__iob+0x3>
    e9f2:	88 23       	and	r24, r24
    e9f4:	39 f0       	breq	.+14     	; 0xea04 <puts+0x22>
    e9f6:	90 e0       	ldi	r25, 0x00	; 0
    e9f8:	3d df       	rcall	.-390    	; 0xe874 <fputc>
    e9fa:	8f 3f       	cpi	r24, 0xFF	; 255
    e9fc:	2f ef       	ldi	r18, 0xFF	; 255
    e9fe:	92 07       	cpc	r25, r18
    ea00:	99 f7       	brne	.-26     	; 0xe9e8 <puts+0x6>
    ea02:	03 c0       	rjmp	.+6      	; 0xea0a <puts+0x28>
    ea04:	8a e0       	ldi	r24, 0x0A	; 10
    ea06:	90 e0       	ldi	r25, 0x00	; 0
    ea08:	35 df       	rcall	.-406    	; 0xe874 <fputc>
    ea0a:	df 91       	pop	r29
    ea0c:	cf 91       	pop	r28
    ea0e:	08 95       	ret

0000ea10 <fileno>:
    ea10:	00 97       	sbiw	r24, 0x00	; 0
    ea12:	39 f4       	brne	.+14     	; 0xea22 <fileno+0x12>
    ea14:	89 e0       	ldi	r24, 0x09	; 9
    ea16:	90 e0       	ldi	r25, 0x00	; 0
    ea18:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ea1c:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ea20:	0e c0       	rjmp	.+28     	; 0xea3e <fileno+0x2e>
    ea22:	e7 ec       	ldi	r30, 0xC7	; 199
    ea24:	fc e1       	ldi	r31, 0x1C	; 28
    ea26:	20 e0       	ldi	r18, 0x00	; 0
    ea28:	30 e0       	ldi	r19, 0x00	; 0
    ea2a:	41 91       	ld	r20, Z+
    ea2c:	51 91       	ld	r21, Z+
    ea2e:	84 17       	cp	r24, r20
    ea30:	95 07       	cpc	r25, r21
    ea32:	41 f0       	breq	.+16     	; 0xea44 <fileno+0x34>
    ea34:	2f 5f       	subi	r18, 0xFF	; 255
    ea36:	3f 4f       	sbci	r19, 0xFF	; 255
    ea38:	20 31       	cpi	r18, 0x10	; 16
    ea3a:	31 05       	cpc	r19, r1
    ea3c:	b1 f7       	brne	.-20     	; 0xea2a <fileno+0x1a>
    ea3e:	8f ef       	ldi	r24, 0xFF	; 255
    ea40:	9f ef       	ldi	r25, 0xFF	; 255
    ea42:	08 95       	ret
    ea44:	c9 01       	movw	r24, r18
    ea46:	08 95       	ret

0000ea48 <fileno_to_stream>:
    ea48:	80 31       	cpi	r24, 0x10	; 16
    ea4a:	91 05       	cpc	r25, r1
    ea4c:	48 f4       	brcc	.+18     	; 0xea60 <fileno_to_stream+0x18>
    ea4e:	88 0f       	add	r24, r24
    ea50:	99 1f       	adc	r25, r25
    ea52:	fc 01       	movw	r30, r24
    ea54:	e9 53       	subi	r30, 0x39	; 57
    ea56:	f3 4e       	sbci	r31, 0xE3	; 227
    ea58:	80 81       	ld	r24, Z
    ea5a:	91 81       	ldd	r25, Z+1	; 0x01
    ea5c:	00 97       	sbiw	r24, 0x00	; 0
    ea5e:	41 f4       	brne	.+16     	; 0xea70 <fileno_to_stream+0x28>
    ea60:	89 e0       	ldi	r24, 0x09	; 9
    ea62:	90 e0       	ldi	r25, 0x00	; 0
    ea64:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ea68:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ea6c:	80 e0       	ldi	r24, 0x00	; 0
    ea6e:	90 e0       	ldi	r25, 0x00	; 0
    ea70:	08 95       	ret

0000ea72 <mctime>:
    ea72:	a4 e0       	ldi	r26, 0x04	; 4
    ea74:	b0 e0       	ldi	r27, 0x00	; 0
    ea76:	ef e3       	ldi	r30, 0x3F	; 63
    ea78:	f5 e7       	ldi	r31, 0x75	; 117
    ea7a:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    ea7e:	69 83       	std	Y+1, r22	; 0x01
    ea80:	7a 83       	std	Y+2, r23	; 0x02
    ea82:	8b 83       	std	Y+3, r24	; 0x03
    ea84:	9c 83       	std	Y+4, r25	; 0x04
    ea86:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ea8a:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ea8e:	ce 01       	movw	r24, r28
    ea90:	01 96       	adiw	r24, 0x01	; 1
    ea92:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <ctime_gm>
    ea96:	fc 01       	movw	r30, r24
    ea98:	01 90       	ld	r0, Z+
    ea9a:	00 20       	and	r0, r0
    ea9c:	e9 f7       	brne	.-6      	; 0xea98 <mctime+0x26>
    ea9e:	31 97       	sbiw	r30, 0x01	; 1
    eaa0:	e8 1b       	sub	r30, r24
    eaa2:	f9 0b       	sbc	r31, r25
    eaa4:	39 f0       	breq	.+14     	; 0xeab4 <mctime+0x42>
    eaa6:	31 97       	sbiw	r30, 0x01	; 1
    eaa8:	e8 0f       	add	r30, r24
    eaaa:	f9 1f       	adc	r31, r25
    eaac:	20 81       	ld	r18, Z
    eaae:	2a 30       	cpi	r18, 0x0A	; 10
    eab0:	09 f4       	brne	.+2      	; 0xeab4 <mctime+0x42>
    eab2:	10 82       	st	Z, r1
    eab4:	24 96       	adiw	r28, 0x04	; 4
    eab6:	e2 e0       	ldi	r30, 0x02	; 2
    eab8:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000eabc <basename>:
    eabc:	00 97       	sbiw	r24, 0x00	; 0
    eabe:	49 f0       	breq	.+18     	; 0xead2 <basename+0x16>
    eac0:	fc 01       	movw	r30, r24
    eac2:	21 91       	ld	r18, Z+
    eac4:	22 23       	and	r18, r18
    eac6:	21 f0       	breq	.+8      	; 0xead0 <basename+0x14>
    eac8:	2f 32       	cpi	r18, 0x2F	; 47
    eaca:	d9 f7       	brne	.-10     	; 0xeac2 <basename+0x6>
    eacc:	cf 01       	movw	r24, r30
    eace:	f9 cf       	rjmp	.-14     	; 0xeac2 <basename+0x6>
    ead0:	08 95       	ret
    ead2:	8d e2       	ldi	r24, 0x2D	; 45
    ead4:	9c e0       	ldi	r25, 0x0C	; 12
    ead6:	08 95       	ret

0000ead8 <chdir>:
    ead8:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    eadc:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eae0:	0e 94 2f 5d 	call	0xba5e	; 0xba5e <f_chdir>
    eae4:	00 97       	sbiw	r24, 0x00	; 0
    eae6:	a1 f0       	breq	.+40     	; 0xeb10 <chdir+0x38>
    eae8:	84 31       	cpi	r24, 0x14	; 20
    eaea:	91 05       	cpc	r25, r1
    eaec:	40 f4       	brcc	.+16     	; 0xeafe <chdir+0x26>
    eaee:	fc 01       	movw	r30, r24
    eaf0:	ea 55       	subi	r30, 0x5A	; 90
    eaf2:	f4 4f       	sbci	r31, 0xF4	; 244
    eaf4:	80 81       	ld	r24, Z
    eaf6:	08 2e       	mov	r0, r24
    eaf8:	00 0c       	add	r0, r0
    eafa:	99 0b       	sbc	r25, r25
    eafc:	02 c0       	rjmp	.+4      	; 0xeb02 <chdir+0x2a>
    eafe:	83 e2       	ldi	r24, 0x23	; 35
    eb00:	90 e0       	ldi	r25, 0x00	; 0
    eb02:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eb06:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eb0a:	8f ef       	ldi	r24, 0xFF	; 255
    eb0c:	9f ef       	ldi	r25, 0xFF	; 255
    eb0e:	08 95       	ret
    eb10:	80 e0       	ldi	r24, 0x00	; 0
    eb12:	90 e0       	ldi	r25, 0x00	; 0
    eb14:	08 95       	ret

0000eb16 <chmod>:
    eb16:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    eb1a:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eb1e:	42 79       	andi	r20, 0x92	; 146
    eb20:	55 27       	eor	r21, r21
    eb22:	66 27       	eor	r22, r22
    eb24:	77 27       	eor	r23, r23
    eb26:	45 2b       	or	r20, r21
    eb28:	46 2b       	or	r20, r22
    eb2a:	47 2b       	or	r20, r23
    eb2c:	19 f0       	breq	.+6      	; 0xeb34 <chmod+0x1e>
    eb2e:	80 e0       	ldi	r24, 0x00	; 0
    eb30:	90 e0       	ldi	r25, 0x00	; 0
    eb32:	08 95       	ret
    eb34:	41 e0       	ldi	r20, 0x01	; 1
    eb36:	61 e0       	ldi	r22, 0x01	; 1
    eb38:	0e 94 0f 66 	call	0xcc1e	; 0xcc1e <f_chmod>
    eb3c:	00 97       	sbiw	r24, 0x00	; 0
    eb3e:	b9 f3       	breq	.-18     	; 0xeb2e <chmod+0x18>
    eb40:	84 31       	cpi	r24, 0x14	; 20
    eb42:	91 05       	cpc	r25, r1
    eb44:	40 f4       	brcc	.+16     	; 0xeb56 <chmod+0x40>
    eb46:	fc 01       	movw	r30, r24
    eb48:	ea 55       	subi	r30, 0x5A	; 90
    eb4a:	f4 4f       	sbci	r31, 0xF4	; 244
    eb4c:	80 81       	ld	r24, Z
    eb4e:	08 2e       	mov	r0, r24
    eb50:	00 0c       	add	r0, r0
    eb52:	99 0b       	sbc	r25, r25
    eb54:	02 c0       	rjmp	.+4      	; 0xeb5a <chmod+0x44>
    eb56:	83 e2       	ldi	r24, 0x23	; 35
    eb58:	90 e0       	ldi	r25, 0x00	; 0
    eb5a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eb5e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eb62:	8f ef       	ldi	r24, 0xFF	; 255
    eb64:	9f ef       	ldi	r25, 0xFF	; 255
    eb66:	08 95       	ret

0000eb68 <getcwd>:
    eb68:	cf 93       	push	r28
    eb6a:	df 93       	push	r29
    eb6c:	d8 2f       	mov	r29, r24
    eb6e:	c9 2f       	mov	r28, r25
    eb70:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    eb74:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    eb78:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <f_getcwd>
    eb7c:	00 97       	sbiw	r24, 0x00	; 0
    eb7e:	a1 f0       	breq	.+40     	; 0xeba8 <getcwd+0x40>
    eb80:	84 31       	cpi	r24, 0x14	; 20
    eb82:	91 05       	cpc	r25, r1
    eb84:	40 f4       	brcc	.+16     	; 0xeb96 <getcwd+0x2e>
    eb86:	fc 01       	movw	r30, r24
    eb88:	ea 55       	subi	r30, 0x5A	; 90
    eb8a:	f4 4f       	sbci	r31, 0xF4	; 244
    eb8c:	80 81       	ld	r24, Z
    eb8e:	08 2e       	mov	r0, r24
    eb90:	00 0c       	add	r0, r0
    eb92:	99 0b       	sbc	r25, r25
    eb94:	02 c0       	rjmp	.+4      	; 0xeb9a <getcwd+0x32>
    eb96:	83 e2       	ldi	r24, 0x23	; 35
    eb98:	90 e0       	ldi	r25, 0x00	; 0
    eb9a:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    eb9e:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    eba2:	80 e0       	ldi	r24, 0x00	; 0
    eba4:	90 e0       	ldi	r25, 0x00	; 0
    eba6:	02 c0       	rjmp	.+4      	; 0xebac <getcwd+0x44>
    eba8:	8d 2f       	mov	r24, r29
    ebaa:	9c 2f       	mov	r25, r28
    ebac:	df 91       	pop	r29
    ebae:	cf 91       	pop	r28
    ebb0:	08 95       	ret

0000ebb2 <mkdir>:
    ebb2:	cf 93       	push	r28
    ebb4:	df 93       	push	r29
    ebb6:	ec 01       	movw	r28, r24
    ebb8:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ebbc:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ebc0:	41 15       	cp	r20, r1
    ebc2:	51 05       	cpc	r21, r1
    ebc4:	61 05       	cpc	r22, r1
    ebc6:	71 05       	cpc	r23, r1
    ebc8:	41 f4       	brne	.+16     	; 0xebda <mkdir+0x28>
    ebca:	ce 01       	movw	r24, r28
    ebcc:	0e 94 0a 64 	call	0xc814	; 0xc814 <f_mkdir>
    ebd0:	00 97       	sbiw	r24, 0x00	; 0
    ebd2:	39 f4       	brne	.+14     	; 0xebe2 <mkdir+0x30>
    ebd4:	80 e0       	ldi	r24, 0x00	; 0
    ebd6:	90 e0       	ldi	r25, 0x00	; 0
    ebd8:	17 c0       	rjmp	.+46     	; 0xec08 <mkdir+0x56>
    ebda:	9d df       	rcall	.-198    	; 0xeb16 <chmod>
    ebdc:	89 2b       	or	r24, r25
    ebde:	a9 f3       	breq	.-22     	; 0xebca <mkdir+0x18>
    ebe0:	11 c0       	rjmp	.+34     	; 0xec04 <mkdir+0x52>
    ebe2:	84 31       	cpi	r24, 0x14	; 20
    ebe4:	91 05       	cpc	r25, r1
    ebe6:	40 f4       	brcc	.+16     	; 0xebf8 <mkdir+0x46>
    ebe8:	fc 01       	movw	r30, r24
    ebea:	ea 55       	subi	r30, 0x5A	; 90
    ebec:	f4 4f       	sbci	r31, 0xF4	; 244
    ebee:	80 81       	ld	r24, Z
    ebf0:	08 2e       	mov	r0, r24
    ebf2:	00 0c       	add	r0, r0
    ebf4:	99 0b       	sbc	r25, r25
    ebf6:	02 c0       	rjmp	.+4      	; 0xebfc <mkdir+0x4a>
    ebf8:	83 e2       	ldi	r24, 0x23	; 35
    ebfa:	90 e0       	ldi	r25, 0x00	; 0
    ebfc:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ec00:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ec04:	8f ef       	ldi	r24, 0xFF	; 255
    ec06:	9f ef       	ldi	r25, 0xFF	; 255
    ec08:	df 91       	pop	r29
    ec0a:	cf 91       	pop	r28
    ec0c:	08 95       	ret

0000ec0e <rename>:
    ec0e:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ec12:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ec16:	0e 94 fa 64 	call	0xc9f4	; 0xc9f4 <f_rename>
    ec1a:	00 97       	sbiw	r24, 0x00	; 0
    ec1c:	a1 f0       	breq	.+40     	; 0xec46 <rename+0x38>
    ec1e:	84 31       	cpi	r24, 0x14	; 20
    ec20:	91 05       	cpc	r25, r1
    ec22:	40 f4       	brcc	.+16     	; 0xec34 <rename+0x26>
    ec24:	fc 01       	movw	r30, r24
    ec26:	ea 55       	subi	r30, 0x5A	; 90
    ec28:	f4 4f       	sbci	r31, 0xF4	; 244
    ec2a:	80 81       	ld	r24, Z
    ec2c:	08 2e       	mov	r0, r24
    ec2e:	00 0c       	add	r0, r0
    ec30:	99 0b       	sbc	r25, r25
    ec32:	02 c0       	rjmp	.+4      	; 0xec38 <rename+0x2a>
    ec34:	83 e2       	ldi	r24, 0x23	; 35
    ec36:	90 e0       	ldi	r25, 0x00	; 0
    ec38:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ec3c:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ec40:	8f ef       	ldi	r24, 0xFF	; 255
    ec42:	9f ef       	ldi	r25, 0xFF	; 255
    ec44:	08 95       	ret
    ec46:	80 e0       	ldi	r24, 0x00	; 0
    ec48:	90 e0       	ldi	r25, 0x00	; 0
    ec4a:	08 95       	ret

0000ec4c <unlink>:
    ec4c:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ec50:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ec54:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <f_unlink>
    ec58:	00 97       	sbiw	r24, 0x00	; 0
    ec5a:	a1 f0       	breq	.+40     	; 0xec84 <unlink+0x38>
    ec5c:	84 31       	cpi	r24, 0x14	; 20
    ec5e:	91 05       	cpc	r25, r1
    ec60:	40 f4       	brcc	.+16     	; 0xec72 <unlink+0x26>
    ec62:	fc 01       	movw	r30, r24
    ec64:	ea 55       	subi	r30, 0x5A	; 90
    ec66:	f4 4f       	sbci	r31, 0xF4	; 244
    ec68:	80 81       	ld	r24, Z
    ec6a:	08 2e       	mov	r0, r24
    ec6c:	00 0c       	add	r0, r0
    ec6e:	99 0b       	sbc	r25, r25
    ec70:	02 c0       	rjmp	.+4      	; 0xec76 <unlink+0x2a>
    ec72:	83 e2       	ldi	r24, 0x23	; 35
    ec74:	90 e0       	ldi	r25, 0x00	; 0
    ec76:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ec7a:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ec7e:	8f ef       	ldi	r24, 0xFF	; 255
    ec80:	9f ef       	ldi	r25, 0xFF	; 255
    ec82:	08 95       	ret
    ec84:	80 e0       	ldi	r24, 0x00	; 0
    ec86:	90 e0       	ldi	r25, 0x00	; 0
    ec88:	08 95       	ret

0000ec8a <rmdir>:
    ec8a:	e0 cf       	rjmp	.-64     	; 0xec4c <unlink>
    ec8c:	08 95       	ret

0000ec8e <closedir>:
    ec8e:	0e 94 ec 61 	call	0xc3d8	; 0xc3d8 <f_closedir>
    ec92:	00 97       	sbiw	r24, 0x00	; 0
    ec94:	a1 f0       	breq	.+40     	; 0xecbe <closedir+0x30>
    ec96:	84 31       	cpi	r24, 0x14	; 20
    ec98:	91 05       	cpc	r25, r1
    ec9a:	40 f4       	brcc	.+16     	; 0xecac <closedir+0x1e>
    ec9c:	fc 01       	movw	r30, r24
    ec9e:	ea 55       	subi	r30, 0x5A	; 90
    eca0:	f4 4f       	sbci	r31, 0xF4	; 244
    eca2:	80 81       	ld	r24, Z
    eca4:	08 2e       	mov	r0, r24
    eca6:	00 0c       	add	r0, r0
    eca8:	99 0b       	sbc	r25, r25
    ecaa:	02 c0       	rjmp	.+4      	; 0xecb0 <closedir+0x22>
    ecac:	83 e2       	ldi	r24, 0x23	; 35
    ecae:	90 e0       	ldi	r25, 0x00	; 0
    ecb0:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ecb4:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ecb8:	8f ef       	ldi	r24, 0xFF	; 255
    ecba:	9f ef       	ldi	r25, 0xFF	; 255
    ecbc:	08 95       	ret
    ecbe:	80 e0       	ldi	r24, 0x00	; 0
    ecc0:	90 e0       	ldi	r25, 0x00	; 0
    ecc2:	08 95       	ret

0000ecc4 <opendir>:
    ecc4:	bc 01       	movw	r22, r24
    ecc6:	88 e3       	ldi	r24, 0x38	; 56
    ecc8:	99 e1       	ldi	r25, 0x19	; 25
    ecca:	0e 94 7b 61 	call	0xc2f6	; 0xc2f6 <f_opendir>
    ecce:	00 97       	sbiw	r24, 0x00	; 0
    ecd0:	a1 f0       	breq	.+40     	; 0xecfa <opendir+0x36>
    ecd2:	84 31       	cpi	r24, 0x14	; 20
    ecd4:	91 05       	cpc	r25, r1
    ecd6:	40 f4       	brcc	.+16     	; 0xece8 <opendir+0x24>
    ecd8:	fc 01       	movw	r30, r24
    ecda:	ea 55       	subi	r30, 0x5A	; 90
    ecdc:	f4 4f       	sbci	r31, 0xF4	; 244
    ecde:	80 81       	ld	r24, Z
    ece0:	08 2e       	mov	r0, r24
    ece2:	00 0c       	add	r0, r0
    ece4:	99 0b       	sbc	r25, r25
    ece6:	02 c0       	rjmp	.+4      	; 0xecec <opendir+0x28>
    ece8:	83 e2       	ldi	r24, 0x23	; 35
    ecea:	90 e0       	ldi	r25, 0x00	; 0
    ecec:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ecf0:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ecf4:	80 e0       	ldi	r24, 0x00	; 0
    ecf6:	90 e0       	ldi	r25, 0x00	; 0
    ecf8:	08 95       	ret
    ecfa:	88 e3       	ldi	r24, 0x38	; 56
    ecfc:	99 e1       	ldi	r25, 0x19	; 25
    ecfe:	08 95       	ret

0000ed00 <readdir>:
    ed00:	a6 e1       	ldi	r26, 0x16	; 22
    ed02:	b1 e0       	ldi	r27, 0x01	; 1
    ed04:	e6 e8       	ldi	r30, 0x86	; 134
    ed06:	f6 e7       	ldi	r31, 0x76	; 118
    ed08:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    ed0c:	10 92 38 18 	sts	0x1838, r1	; 0x801838 <_de>
    ed10:	be 01       	movw	r22, r28
    ed12:	6f 5f       	subi	r22, 0xFF	; 255
    ed14:	7f 4f       	sbci	r23, 0xFF	; 255
    ed16:	0e 94 01 62 	call	0xc402	; 0xc402 <f_readdir>
    ed1a:	00 97       	sbiw	r24, 0x00	; 0
    ed1c:	a1 f0       	breq	.+40     	; 0xed46 <readdir+0x46>
    ed1e:	84 31       	cpi	r24, 0x14	; 20
    ed20:	91 05       	cpc	r25, r1
    ed22:	40 f4       	brcc	.+16     	; 0xed34 <readdir+0x34>
    ed24:	fc 01       	movw	r30, r24
    ed26:	ea 55       	subi	r30, 0x5A	; 90
    ed28:	f4 4f       	sbci	r31, 0xF4	; 244
    ed2a:	80 81       	ld	r24, Z
    ed2c:	08 2e       	mov	r0, r24
    ed2e:	00 0c       	add	r0, r0
    ed30:	99 0b       	sbc	r25, r25
    ed32:	02 c0       	rjmp	.+4      	; 0xed38 <readdir+0x38>
    ed34:	83 e2       	ldi	r24, 0x23	; 35
    ed36:	90 e0       	ldi	r25, 0x00	; 0
    ed38:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    ed3c:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    ed40:	80 e0       	ldi	r24, 0x00	; 0
    ed42:	90 e0       	ldi	r25, 0x00	; 0
    ed44:	16 c0       	rjmp	.+44     	; 0xed72 <readdir+0x72>
    ed46:	be 01       	movw	r22, r28
    ed48:	69 5e       	subi	r22, 0xE9	; 233
    ed4a:	7f 4f       	sbci	r23, 0xFF	; 255
    ed4c:	fb 01       	movw	r30, r22
    ed4e:	01 90       	ld	r0, Z+
    ed50:	00 20       	and	r0, r0
    ed52:	e9 f7       	brne	.-6      	; 0xed4e <readdir+0x4e>
    ed54:	31 97       	sbiw	r30, 0x01	; 1
    ed56:	8f 01       	movw	r16, r30
    ed58:	06 1b       	sub	r16, r22
    ed5a:	17 0b       	sbc	r17, r23
    ed5c:	a8 01       	movw	r20, r16
    ed5e:	88 e3       	ldi	r24, 0x38	; 56
    ed60:	98 e1       	ldi	r25, 0x18	; 24
    ed62:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <strncpy>
    ed66:	f8 01       	movw	r30, r16
    ed68:	e8 5c       	subi	r30, 0xC8	; 200
    ed6a:	f7 4e       	sbci	r31, 0xE7	; 231
    ed6c:	10 82       	st	Z, r1
    ed6e:	88 e3       	ldi	r24, 0x38	; 56
    ed70:	98 e1       	ldi	r25, 0x18	; 24
    ed72:	ca 5e       	subi	r28, 0xEA	; 234
    ed74:	de 4f       	sbci	r29, 0xFE	; 254
    ed76:	e4 e0       	ldi	r30, 0x04	; 4
    ed78:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

0000ed7c <perror>:
    ed7c:	ad b7       	in	r26, 0x3d	; 61
    ed7e:	be b7       	in	r27, 0x3e	; 62
    ed80:	17 97       	sbiw	r26, 0x07	; 7
    ed82:	0f b6       	in	r0, 0x3f	; 63
    ed84:	f8 94       	cli
    ed86:	be bf       	out	0x3e, r27	; 62
    ed88:	0f be       	out	0x3f, r0	; 63
    ed8a:	ad bf       	out	0x3d, r26	; 61
    ed8c:	20 91 c5 1c 	lds	r18, 0x1CC5	; 0x801cc5 <errno>
    ed90:	30 91 c6 1c 	lds	r19, 0x1CC6	; 0x801cc6 <errno+0x1>
    ed94:	23 32       	cpi	r18, 0x23	; 35
    ed96:	31 05       	cpc	r19, r1
    ed98:	40 f4       	brcc	.+16     	; 0xedaa <perror+0x2e>
    ed9a:	22 0f       	add	r18, r18
    ed9c:	33 1f       	adc	r19, r19
    ed9e:	f9 01       	movw	r30, r18
    eda0:	ea 5c       	subi	r30, 0xCA	; 202
    eda2:	fe 4f       	sbci	r31, 0xFE	; 254
    eda4:	20 81       	ld	r18, Z
    eda6:	31 81       	ldd	r19, Z+1	; 0x01
    eda8:	04 c0       	rjmp	.+8      	; 0xedb2 <perror+0x36>
    edaa:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    edae:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    edb2:	00 97       	sbiw	r24, 0x00	; 0
    edb4:	99 f0       	breq	.+38     	; 0xeddc <perror+0x60>
    edb6:	fc 01       	movw	r30, r24
    edb8:	40 81       	ld	r20, Z
    edba:	44 23       	and	r20, r20
    edbc:	79 f0       	breq	.+30     	; 0xeddc <perror+0x60>
    edbe:	ed b7       	in	r30, 0x3d	; 61
    edc0:	fe b7       	in	r31, 0x3e	; 62
    edc2:	37 83       	std	Z+7, r19	; 0x07
    edc4:	26 83       	std	Z+6, r18	; 0x06
    edc6:	95 83       	std	Z+5, r25	; 0x05
    edc8:	84 83       	std	Z+4, r24	; 0x04
    edca:	8e ee       	ldi	r24, 0xEE	; 238
    edcc:	9b e0       	ldi	r25, 0x0B	; 11
    edce:	a0 e0       	ldi	r26, 0x00	; 0
    edd0:	81 83       	std	Z+1, r24	; 0x01
    edd2:	92 83       	std	Z+2, r25	; 0x02
    edd4:	a3 83       	std	Z+3, r26	; 0x03
    edd6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    edda:	0c c0       	rjmp	.+24     	; 0xedf4 <perror+0x78>
    eddc:	ed b7       	in	r30, 0x3d	; 61
    edde:	fe b7       	in	r31, 0x3e	; 62
    ede0:	35 83       	std	Z+5, r19	; 0x05
    ede2:	24 83       	std	Z+4, r18	; 0x04
    ede4:	8a ee       	ldi	r24, 0xEA	; 234
    ede6:	9b e0       	ldi	r25, 0x0B	; 11
    ede8:	a0 e0       	ldi	r26, 0x00	; 0
    edea:	81 83       	std	Z+1, r24	; 0x01
    edec:	92 83       	std	Z+2, r25	; 0x02
    edee:	a3 83       	std	Z+3, r26	; 0x03
    edf0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    edf4:	ad b7       	in	r26, 0x3d	; 61
    edf6:	be b7       	in	r27, 0x3e	; 62
    edf8:	17 96       	adiw	r26, 0x07	; 7
    edfa:	0f b6       	in	r0, 0x3f	; 63
    edfc:	f8 94       	cli
    edfe:	be bf       	out	0x3e, r27	; 62
    ee00:	0f be       	out	0x3f, r0	; 63
    ee02:	ad bf       	out	0x3d, r26	; 61
    ee04:	08 95       	ret

0000ee06 <fdevopen>:
    ee06:	0f 93       	push	r16
    ee08:	1f 93       	push	r17
    ee0a:	cf 93       	push	r28
    ee0c:	df 93       	push	r29
    ee0e:	00 97       	sbiw	r24, 0x00	; 0
    ee10:	31 f4       	brne	.+12     	; 0xee1e <fdevopen+0x18>
    ee12:	61 15       	cp	r22, r1
    ee14:	71 05       	cpc	r23, r1
    ee16:	19 f4       	brne	.+6      	; 0xee1e <fdevopen+0x18>
    ee18:	80 e0       	ldi	r24, 0x00	; 0
    ee1a:	90 e0       	ldi	r25, 0x00	; 0
    ee1c:	3a c0       	rjmp	.+116    	; 0xee92 <fdevopen+0x8c>
    ee1e:	8b 01       	movw	r16, r22
    ee20:	ec 01       	movw	r28, r24
    ee22:	6e e0       	ldi	r22, 0x0E	; 14
    ee24:	70 e0       	ldi	r23, 0x00	; 0
    ee26:	81 e0       	ldi	r24, 0x01	; 1
    ee28:	90 e0       	ldi	r25, 0x00	; 0
    ee2a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
    ee2e:	fc 01       	movw	r30, r24
    ee30:	89 2b       	or	r24, r25
    ee32:	91 f3       	breq	.-28     	; 0xee18 <fdevopen+0x12>
    ee34:	80 e8       	ldi	r24, 0x80	; 128
    ee36:	83 83       	std	Z+3, r24	; 0x03
    ee38:	01 15       	cp	r16, r1
    ee3a:	11 05       	cpc	r17, r1
    ee3c:	71 f0       	breq	.+28     	; 0xee5a <fdevopen+0x54>
    ee3e:	13 87       	std	Z+11, r17	; 0x0b
    ee40:	02 87       	std	Z+10, r16	; 0x0a
    ee42:	81 e8       	ldi	r24, 0x81	; 129
    ee44:	83 83       	std	Z+3, r24	; 0x03
    ee46:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    ee4a:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    ee4e:	89 2b       	or	r24, r25
    ee50:	21 f4       	brne	.+8      	; 0xee5a <fdevopen+0x54>
    ee52:	f0 93 c8 1c 	sts	0x1CC8, r31	; 0x801cc8 <__iob+0x1>
    ee56:	e0 93 c7 1c 	sts	0x1CC7, r30	; 0x801cc7 <__iob>
    ee5a:	20 97       	sbiw	r28, 0x00	; 0
    ee5c:	c9 f0       	breq	.+50     	; 0xee90 <fdevopen+0x8a>
    ee5e:	d1 87       	std	Z+9, r29	; 0x09
    ee60:	c0 87       	std	Z+8, r28	; 0x08
    ee62:	83 81       	ldd	r24, Z+3	; 0x03
    ee64:	82 60       	ori	r24, 0x02	; 2
    ee66:	83 83       	std	Z+3, r24	; 0x03
    ee68:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    ee6c:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    ee70:	89 2b       	or	r24, r25
    ee72:	21 f4       	brne	.+8      	; 0xee7c <fdevopen+0x76>
    ee74:	f0 93 ca 1c 	sts	0x1CCA, r31	; 0x801cca <__iob+0x3>
    ee78:	e0 93 c9 1c 	sts	0x1CC9, r30	; 0x801cc9 <__iob+0x2>
    ee7c:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    ee80:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    ee84:	89 2b       	or	r24, r25
    ee86:	21 f4       	brne	.+8      	; 0xee90 <fdevopen+0x8a>
    ee88:	f0 93 cc 1c 	sts	0x1CCC, r31	; 0x801ccc <__iob+0x5>
    ee8c:	e0 93 cb 1c 	sts	0x1CCB, r30	; 0x801ccb <__iob+0x4>
    ee90:	cf 01       	movw	r24, r30
    ee92:	df 91       	pop	r29
    ee94:	cf 91       	pop	r28
    ee96:	1f 91       	pop	r17
    ee98:	0f 91       	pop	r16
    ee9a:	08 95       	ret

0000ee9c <fat_time_to_unix>:
    ee9c:	a6 e1       	ldi	r26, 0x16	; 22
    ee9e:	b0 e0       	ldi	r27, 0x00	; 0
    eea0:	e4 e5       	ldi	r30, 0x54	; 84
    eea2:	f7 e7       	ldi	r31, 0x77	; 119
    eea4:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    eea8:	fe 01       	movw	r30, r28
    eeaa:	31 96       	adiw	r30, 0x01	; 1
    eeac:	26 e1       	ldi	r18, 0x16	; 22
    eeae:	df 01       	movw	r26, r30
    eeb0:	1d 92       	st	X+, r1
    eeb2:	2a 95       	dec	r18
    eeb4:	e9 f7       	brne	.-6      	; 0xeeb0 <fat_time_to_unix+0x14>
    eeb6:	9b 01       	movw	r18, r22
    eeb8:	22 0f       	add	r18, r18
    eeba:	33 1f       	adc	r19, r19
    eebc:	2e 73       	andi	r18, 0x3E	; 62
    eebe:	33 27       	eor	r19, r19
    eec0:	3a 83       	std	Y+2, r19	; 0x02
    eec2:	29 83       	std	Y+1, r18	; 0x01
    eec4:	9b 01       	movw	r18, r22
    eec6:	55 e0       	ldi	r21, 0x05	; 5
    eec8:	36 95       	lsr	r19
    eeca:	27 95       	ror	r18
    eecc:	5a 95       	dec	r21
    eece:	e1 f7       	brne	.-8      	; 0xeec8 <fat_time_to_unix+0x2c>
    eed0:	2f 73       	andi	r18, 0x3F	; 63
    eed2:	33 27       	eor	r19, r19
    eed4:	3c 83       	std	Y+4, r19	; 0x04
    eed6:	2b 83       	std	Y+3, r18	; 0x03
    eed8:	27 2f       	mov	r18, r23
    eeda:	26 95       	lsr	r18
    eedc:	26 95       	lsr	r18
    eede:	26 95       	lsr	r18
    eee0:	2d 83       	std	Y+5, r18	; 0x05
    eee2:	1e 82       	std	Y+6, r1	; 0x06
    eee4:	9c 01       	movw	r18, r24
    eee6:	2f 71       	andi	r18, 0x1F	; 31
    eee8:	33 27       	eor	r19, r19
    eeea:	38 87       	std	Y+8, r19	; 0x08
    eeec:	2f 83       	std	Y+7, r18	; 0x07
    eeee:	9c 01       	movw	r18, r24
    eef0:	65 e0       	ldi	r22, 0x05	; 5
    eef2:	36 95       	lsr	r19
    eef4:	27 95       	ror	r18
    eef6:	6a 95       	dec	r22
    eef8:	e1 f7       	brne	.-8      	; 0xeef2 <fat_time_to_unix+0x56>
    eefa:	2f 70       	andi	r18, 0x0F	; 15
    eefc:	33 27       	eor	r19, r19
    eefe:	21 50       	subi	r18, 0x01	; 1
    ef00:	31 09       	sbc	r19, r1
    ef02:	3a 87       	std	Y+10, r19	; 0x0a
    ef04:	29 87       	std	Y+9, r18	; 0x09
    ef06:	9c 01       	movw	r18, r24
    ef08:	23 2f       	mov	r18, r19
    ef0a:	33 27       	eor	r19, r19
    ef0c:	26 95       	lsr	r18
    ef0e:	20 5b       	subi	r18, 0xB0	; 176
    ef10:	3f 4f       	sbci	r19, 0xFF	; 255
    ef12:	3c 87       	std	Y+12, r19	; 0x0c
    ef14:	2b 87       	std	Y+11, r18	; 0x0b
    ef16:	cf 01       	movw	r24, r30
    ef18:	0e 94 bb 38 	call	0x7176	; 0x7176 <timegm>
    ef1c:	66 96       	adiw	r28, 0x16	; 22
    ef1e:	e2 e0       	ldi	r30, 0x02	; 2
    ef20:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000ef24 <stat>:
    ef24:	a6 e1       	ldi	r26, 0x16	; 22
    ef26:	b1 e0       	ldi	r27, 0x01	; 1
    ef28:	e8 e9       	ldi	r30, 0x98	; 152
    ef2a:	f7 e7       	ldi	r31, 0x77	; 119
    ef2c:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
    ef30:	6c 01       	movw	r12, r24
    ef32:	8b 01       	movw	r16, r22
    ef34:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    ef38:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    ef3c:	6c ef       	ldi	r22, 0xFC	; 252
    ef3e:	78 e0       	ldi	r23, 0x08	; 8
    ef40:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
    ef44:	89 2b       	or	r24, r25
    ef46:	01 f1       	breq	.+64     	; 0xef88 <stat+0x64>
    ef48:	f8 01       	movw	r30, r16
    ef4a:	14 a2       	std	Z+36, r1	; 0x24
    ef4c:	15 a2       	std	Z+37, r1	; 0x25
    ef4e:	16 a2       	std	Z+38, r1	; 0x26
    ef50:	17 a2       	std	Z+39, r1	; 0x27
    ef52:	10 a6       	std	Z+40, r1	; 0x28
    ef54:	11 a6       	std	Z+41, r1	; 0x29
    ef56:	12 a6       	std	Z+42, r1	; 0x2a
    ef58:	13 a6       	std	Z+43, r1	; 0x2b
    ef5a:	14 a6       	std	Z+44, r1	; 0x2c
    ef5c:	15 a6       	std	Z+45, r1	; 0x2d
    ef5e:	16 a6       	std	Z+46, r1	; 0x2e
    ef60:	17 a6       	std	Z+47, r1	; 0x2f
    ef62:	11 8a       	std	Z+17, r1	; 0x11
    ef64:	10 8a       	std	Z+16, r1	; 0x10
    ef66:	13 8a       	std	Z+19, r1	; 0x13
    ef68:	12 8a       	std	Z+18, r1	; 0x12
    ef6a:	10 8e       	std	Z+24, r1	; 0x18
    ef6c:	11 8e       	std	Z+25, r1	; 0x19
    ef6e:	12 8e       	std	Z+26, r1	; 0x1a
    ef70:	13 8e       	std	Z+27, r1	; 0x1b
    ef72:	80 e0       	ldi	r24, 0x00	; 0
    ef74:	90 e4       	ldi	r25, 0x40	; 64
    ef76:	a0 e0       	ldi	r26, 0x00	; 0
    ef78:	b0 e0       	ldi	r27, 0x00	; 0
    ef7a:	80 87       	std	Z+8, r24	; 0x08
    ef7c:	91 87       	std	Z+9, r25	; 0x09
    ef7e:	a2 87       	std	Z+10, r26	; 0x0a
    ef80:	b3 87       	std	Z+11, r27	; 0x0b
    ef82:	e1 2c       	mov	r14, r1
    ef84:	f1 2c       	mov	r15, r1
    ef86:	62 c0       	rjmp	.+196    	; 0xf04c <stat+0x128>
    ef88:	66 ea       	ldi	r22, 0xA6	; 166
    ef8a:	78 e0       	ldi	r23, 0x08	; 8
    ef8c:	c6 01       	movw	r24, r12
    ef8e:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
    ef92:	89 2b       	or	r24, r25
    ef94:	c9 f6       	brne	.-78     	; 0xef48 <stat+0x24>
    ef96:	6d ef       	ldi	r22, 0xFD	; 253
    ef98:	72 e1       	ldi	r23, 0x12	; 18
    ef9a:	c6 01       	movw	r24, r12
    ef9c:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
    efa0:	7c 01       	movw	r14, r24
    efa2:	89 2b       	or	r24, r25
    efa4:	89 f6       	brne	.-94     	; 0xef48 <stat+0x24>
    efa6:	be 01       	movw	r22, r28
    efa8:	6f 5f       	subi	r22, 0xFF	; 255
    efaa:	7f 4f       	sbci	r23, 0xFF	; 255
    efac:	c6 01       	movw	r24, r12
    efae:	0e 94 45 62 	call	0xc48a	; 0xc48a <f_stat>
    efb2:	00 97       	sbiw	r24, 0x00	; 0
    efb4:	a9 f0       	breq	.+42     	; 0xefe0 <stat+0xbc>
    efb6:	84 31       	cpi	r24, 0x14	; 20
    efb8:	91 05       	cpc	r25, r1
    efba:	40 f4       	brcc	.+16     	; 0xefcc <stat+0xa8>
    efbc:	fc 01       	movw	r30, r24
    efbe:	ea 55       	subi	r30, 0x5A	; 90
    efc0:	f4 4f       	sbci	r31, 0xF4	; 244
    efc2:	80 81       	ld	r24, Z
    efc4:	08 2e       	mov	r0, r24
    efc6:	00 0c       	add	r0, r0
    efc8:	99 0b       	sbc	r25, r25
    efca:	02 c0       	rjmp	.+4      	; 0xefd0 <stat+0xac>
    efcc:	83 e2       	ldi	r24, 0x23	; 35
    efce:	90 e0       	ldi	r25, 0x00	; 0
    efd0:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    efd4:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    efd8:	ee 24       	eor	r14, r14
    efda:	ea 94       	dec	r14
    efdc:	fe 2c       	mov	r15, r14
    efde:	36 c0       	rjmp	.+108    	; 0xf04c <stat+0x128>
    efe0:	89 81       	ldd	r24, Y+1	; 0x01
    efe2:	9a 81       	ldd	r25, Y+2	; 0x02
    efe4:	ab 81       	ldd	r26, Y+3	; 0x03
    efe6:	bc 81       	ldd	r27, Y+4	; 0x04
    efe8:	f8 01       	movw	r30, r16
    efea:	80 8f       	std	Z+24, r24	; 0x18
    efec:	91 8f       	std	Z+25, r25	; 0x19
    efee:	a2 8f       	std	Z+26, r26	; 0x1a
    eff0:	b3 8f       	std	Z+27, r27	; 0x1b
    eff2:	6f 81       	ldd	r22, Y+7	; 0x07
    eff4:	78 85       	ldd	r23, Y+8	; 0x08
    eff6:	8d 81       	ldd	r24, Y+5	; 0x05
    eff8:	9e 81       	ldd	r25, Y+6	; 0x06
    effa:	50 df       	rcall	.-352    	; 0xee9c <fat_time_to_unix>
    effc:	f8 01       	movw	r30, r16
    effe:	64 a3       	std	Z+36, r22	; 0x24
    f000:	75 a3       	std	Z+37, r23	; 0x25
    f002:	86 a3       	std	Z+38, r24	; 0x26
    f004:	97 a3       	std	Z+39, r25	; 0x27
    f006:	60 a7       	std	Z+40, r22	; 0x28
    f008:	71 a7       	std	Z+41, r23	; 0x29
    f00a:	82 a7       	std	Z+42, r24	; 0x2a
    f00c:	93 a7       	std	Z+43, r25	; 0x2b
    f00e:	64 a7       	std	Z+44, r22	; 0x2c
    f010:	75 a7       	std	Z+45, r23	; 0x2d
    f012:	86 a7       	std	Z+46, r24	; 0x2e
    f014:	97 a7       	std	Z+47, r25	; 0x2f
    f016:	29 85       	ldd	r18, Y+9	; 0x09
    f018:	20 fd       	sbrc	r18, 0
    f01a:	03 c0       	rjmp	.+6      	; 0xf022 <stat+0xfe>
    f01c:	8f ef       	ldi	r24, 0xFF	; 255
    f01e:	91 e0       	ldi	r25, 0x01	; 1
    f020:	02 c0       	rjmp	.+4      	; 0xf026 <stat+0x102>
    f022:	8d e6       	ldi	r24, 0x6D	; 109
    f024:	91 e0       	ldi	r25, 0x01	; 1
    f026:	48 ee       	ldi	r20, 0xE8	; 232
    f028:	53 e0       	ldi	r21, 0x03	; 3
    f02a:	f8 01       	movw	r30, r16
    f02c:	51 8b       	std	Z+17, r21	; 0x11
    f02e:	40 8b       	std	Z+16, r20	; 0x10
    f030:	53 8b       	std	Z+19, r21	; 0x13
    f032:	42 8b       	std	Z+18, r20	; 0x12
    f034:	24 ff       	sbrs	r18, 4
    f036:	02 c0       	rjmp	.+4      	; 0xf03c <stat+0x118>
    f038:	90 64       	ori	r25, 0x40	; 64
    f03a:	01 c0       	rjmp	.+2      	; 0xf03e <stat+0x11a>
    f03c:	90 68       	ori	r25, 0x80	; 128
    f03e:	a0 e0       	ldi	r26, 0x00	; 0
    f040:	b0 e0       	ldi	r27, 0x00	; 0
    f042:	f8 01       	movw	r30, r16
    f044:	80 87       	std	Z+8, r24	; 0x08
    f046:	91 87       	std	Z+9, r25	; 0x09
    f048:	a2 87       	std	Z+10, r26	; 0x0a
    f04a:	b3 87       	std	Z+11, r27	; 0x0b
    f04c:	c7 01       	movw	r24, r14
    f04e:	ca 5e       	subi	r28, 0xEA	; 234
    f050:	de 4f       	sbci	r29, 0xFE	; 254
    f052:	e8 e0       	ldi	r30, 0x08	; 8
    f054:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0000f058 <unix_time_to_fat>:
    f058:	a4 e0       	ldi	r26, 0x04	; 4
    f05a:	b0 e0       	ldi	r27, 0x00	; 0
    f05c:	e2 e3       	ldi	r30, 0x32	; 50
    f05e:	f8 e7       	ldi	r31, 0x78	; 120
    f060:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
    f064:	69 83       	std	Y+1, r22	; 0x01
    f066:	7a 83       	std	Y+2, r23	; 0x02
    f068:	8b 83       	std	Y+3, r24	; 0x03
    f06a:	9c 83       	std	Y+4, r25	; 0x04
    f06c:	7a 01       	movw	r14, r20
    f06e:	89 01       	movw	r16, r18
    f070:	ce 01       	movw	r24, r28
    f072:	01 96       	adiw	r24, 0x01	; 1
    f074:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <gmtime>
    f078:	fc 01       	movw	r30, r24
    f07a:	22 85       	ldd	r18, Z+10	; 0x0a
    f07c:	33 85       	ldd	r19, Z+11	; 0x0b
    f07e:	20 55       	subi	r18, 0x50	; 80
    f080:	31 09       	sbc	r19, r1
    f082:	c9 01       	movw	r24, r18
    f084:	98 2f       	mov	r25, r24
    f086:	88 27       	eor	r24, r24
    f088:	99 0f       	add	r25, r25
    f08a:	20 85       	ldd	r18, Z+8	; 0x08
    f08c:	31 85       	ldd	r19, Z+9	; 0x09
    f08e:	2f 5f       	subi	r18, 0xFF	; 255
    f090:	3f 4f       	sbci	r19, 0xFF	; 255
    f092:	45 e0       	ldi	r20, 0x05	; 5
    f094:	22 0f       	add	r18, r18
    f096:	33 1f       	adc	r19, r19
    f098:	4a 95       	dec	r20
    f09a:	e1 f7       	brne	.-8      	; 0xf094 <unix_time_to_fat+0x3c>
    f09c:	28 2b       	or	r18, r24
    f09e:	39 2b       	or	r19, r25
    f0a0:	86 81       	ldd	r24, Z+6	; 0x06
    f0a2:	97 81       	ldd	r25, Z+7	; 0x07
    f0a4:	28 2b       	or	r18, r24
    f0a6:	39 2b       	or	r19, r25
    f0a8:	d7 01       	movw	r26, r14
    f0aa:	2d 93       	st	X+, r18
    f0ac:	3c 93       	st	X, r19
    f0ae:	84 81       	ldd	r24, Z+4	; 0x04
    f0b0:	20 e0       	ldi	r18, 0x00	; 0
    f0b2:	30 e0       	ldi	r19, 0x00	; 0
    f0b4:	38 2f       	mov	r19, r24
    f0b6:	33 0f       	add	r19, r19
    f0b8:	33 0f       	add	r19, r19
    f0ba:	33 0f       	add	r19, r19
    f0bc:	82 81       	ldd	r24, Z+2	; 0x02
    f0be:	93 81       	ldd	r25, Z+3	; 0x03
    f0c0:	55 e0       	ldi	r21, 0x05	; 5
    f0c2:	88 0f       	add	r24, r24
    f0c4:	99 1f       	adc	r25, r25
    f0c6:	5a 95       	dec	r21
    f0c8:	e1 f7       	brne	.-8      	; 0xf0c2 <unix_time_to_fat+0x6a>
    f0ca:	82 2b       	or	r24, r18
    f0cc:	93 2b       	or	r25, r19
    f0ce:	20 81       	ld	r18, Z
    f0d0:	31 81       	ldd	r19, Z+1	; 0x01
    f0d2:	36 95       	lsr	r19
    f0d4:	27 95       	ror	r18
    f0d6:	82 2b       	or	r24, r18
    f0d8:	93 2b       	or	r25, r19
    f0da:	f8 01       	movw	r30, r16
    f0dc:	91 83       	std	Z+1, r25	; 0x01
    f0de:	80 83       	st	Z, r24
    f0e0:	24 96       	adiw	r28, 0x04	; 4
    f0e2:	e6 e0       	ldi	r30, 0x06	; 6
    f0e4:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

0000f0e8 <utime>:
    f0e8:	aa e1       	ldi	r26, 0x1A	; 26
    f0ea:	b1 e0       	ldi	r27, 0x01	; 1
    f0ec:	ea e7       	ldi	r30, 0x7A	; 122
    f0ee:	f8 e7       	ldi	r31, 0x78	; 120
    f0f0:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
    f0f4:	8c 01       	movw	r16, r24
    f0f6:	61 15       	cp	r22, r1
    f0f8:	71 05       	cpc	r23, r1
    f0fa:	31 f0       	breq	.+12     	; 0xf108 <utime+0x20>
    f0fc:	fb 01       	movw	r30, r22
    f0fe:	64 81       	ldd	r22, Z+4	; 0x04
    f100:	75 81       	ldd	r23, Z+5	; 0x05
    f102:	86 81       	ldd	r24, Z+6	; 0x06
    f104:	97 81       	ldd	r25, Z+7	; 0x07
    f106:	04 c0       	rjmp	.+8      	; 0xf110 <utime+0x28>
    f108:	80 e0       	ldi	r24, 0x00	; 0
    f10a:	90 e0       	ldi	r25, 0x00	; 0
    f10c:	0e 94 56 36 	call	0x6cac	; 0x6cac <time>
    f110:	9e 01       	movw	r18, r28
    f112:	29 5e       	subi	r18, 0xE9	; 233
    f114:	3e 4f       	sbci	r19, 0xFE	; 254
    f116:	ae 01       	movw	r20, r28
    f118:	47 5e       	subi	r20, 0xE7	; 231
    f11a:	5e 4f       	sbci	r21, 0xFE	; 254
    f11c:	9d df       	rcall	.-198    	; 0xf058 <unix_time_to_fat>
    f11e:	c7 5e       	subi	r28, 0xE7	; 231
    f120:	de 4f       	sbci	r29, 0xFE	; 254
    f122:	88 81       	ld	r24, Y
    f124:	99 81       	ldd	r25, Y+1	; 0x01
    f126:	c9 51       	subi	r28, 0x19	; 25
    f128:	d1 40       	sbci	r29, 0x01	; 1
    f12a:	9e 83       	std	Y+6, r25	; 0x06
    f12c:	8d 83       	std	Y+5, r24	; 0x05
    f12e:	c9 5e       	subi	r28, 0xE9	; 233
    f130:	de 4f       	sbci	r29, 0xFE	; 254
    f132:	88 81       	ld	r24, Y
    f134:	99 81       	ldd	r25, Y+1	; 0x01
    f136:	c7 51       	subi	r28, 0x17	; 23
    f138:	d1 40       	sbci	r29, 0x01	; 1
    f13a:	98 87       	std	Y+8, r25	; 0x08
    f13c:	8f 83       	std	Y+7, r24	; 0x07
    f13e:	be 01       	movw	r22, r28
    f140:	6f 5f       	subi	r22, 0xFF	; 255
    f142:	7f 4f       	sbci	r23, 0xFF	; 255
    f144:	c8 01       	movw	r24, r16
    f146:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <f_utime>
    f14a:	84 31       	cpi	r24, 0x14	; 20
    f14c:	91 05       	cpc	r25, r1
    f14e:	40 f4       	brcc	.+16     	; 0xf160 <utime+0x78>
    f150:	fc 01       	movw	r30, r24
    f152:	ea 55       	subi	r30, 0x5A	; 90
    f154:	f4 4f       	sbci	r31, 0xF4	; 244
    f156:	80 81       	ld	r24, Z
    f158:	08 2e       	mov	r0, r24
    f15a:	00 0c       	add	r0, r0
    f15c:	99 0b       	sbc	r25, r25
    f15e:	02 c0       	rjmp	.+4      	; 0xf164 <utime+0x7c>
    f160:	83 e2       	ldi	r24, 0x23	; 35
    f162:	90 e0       	ldi	r25, 0x00	; 0
    f164:	c6 5e       	subi	r28, 0xE6	; 230
    f166:	de 4f       	sbci	r29, 0xFE	; 254
    f168:	e4 e0       	ldi	r30, 0x04	; 4
    f16a:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

0000f16e <fileno_to_fatfs>:
    f16e:	83 30       	cpi	r24, 0x03	; 3
    f170:	91 05       	cpc	r25, r1
    f172:	48 f4       	brcc	.+18     	; 0xf186 <fileno_to_fatfs+0x18>
    f174:	89 e0       	ldi	r24, 0x09	; 9
    f176:	90 e0       	ldi	r25, 0x00	; 0
    f178:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f17c:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f180:	80 e0       	ldi	r24, 0x00	; 0
    f182:	90 e0       	ldi	r25, 0x00	; 0
    f184:	08 95       	ret
    f186:	60 dc       	rcall	.-1856   	; 0xea48 <fileno_to_stream>
    f188:	00 97       	sbiw	r24, 0x00	; 0
    f18a:	d1 f3       	breq	.-12     	; 0xf180 <fileno_to_fatfs+0x12>
    f18c:	fc 01       	movw	r30, r24
    f18e:	84 85       	ldd	r24, Z+12	; 0x0c
    f190:	95 85       	ldd	r25, Z+13	; 0x0d
    f192:	00 97       	sbiw	r24, 0x00	; 0
    f194:	79 f3       	breq	.-34     	; 0xf174 <fileno_to_fatfs+0x6>
    f196:	08 95       	ret

0000f198 <ftell>:
    f198:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f19c:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f1a0:	37 dc       	rcall	.-1938   	; 0xea10 <fileno>
    f1a2:	83 30       	cpi	r24, 0x03	; 3
    f1a4:	91 05       	cpc	r25, r1
    f1a6:	48 f0       	brcs	.+18     	; 0xf1ba <ftell+0x22>
    f1a8:	e2 df       	rcall	.-60     	; 0xf16e <fileno_to_fatfs>
    f1aa:	00 97       	sbiw	r24, 0x00	; 0
    f1ac:	51 f4       	brne	.+20     	; 0xf1c2 <ftell+0x2a>
    f1ae:	89 e0       	ldi	r24, 0x09	; 9
    f1b0:	90 e0       	ldi	r25, 0x00	; 0
    f1b2:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f1b6:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f1ba:	6f ef       	ldi	r22, 0xFF	; 255
    f1bc:	7f ef       	ldi	r23, 0xFF	; 255
    f1be:	cb 01       	movw	r24, r22
    f1c0:	08 95       	ret
    f1c2:	fc 01       	movw	r30, r24
    f1c4:	60 89       	ldd	r22, Z+16	; 0x10
    f1c6:	71 89       	ldd	r23, Z+17	; 0x11
    f1c8:	82 89       	ldd	r24, Z+18	; 0x12
    f1ca:	93 89       	ldd	r25, Z+19	; 0x13
    f1cc:	08 95       	ret

0000f1ce <lseek>:
    f1ce:	a3 e0       	ldi	r26, 0x03	; 3
    f1d0:	b0 e0       	ldi	r27, 0x00	; 0
    f1d2:	ed ee       	ldi	r30, 0xED	; 237
    f1d4:	f8 e7       	ldi	r31, 0x78	; 120
    f1d6:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
    f1da:	5c 01       	movw	r10, r24
    f1dc:	6a 01       	movw	r12, r20
    f1de:	7b 01       	movw	r14, r22
    f1e0:	89 01       	movw	r16, r18
    f1e2:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f1e6:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
    f1ea:	c1 df       	rcall	.-126    	; 0xf16e <fileno_to_fatfs>
    f1ec:	ec 01       	movw	r28, r24
    f1ee:	89 2b       	or	r24, r25
    f1f0:	19 f4       	brne	.+6      	; 0xf1f8 <lseek+0x2a>
    f1f2:	88 e1       	ldi	r24, 0x18	; 24
    f1f4:	90 e0       	ldi	r25, 0x00	; 0
    f1f6:	26 c0       	rjmp	.+76     	; 0xf244 <lseek+0x76>
    f1f8:	83 e0       	ldi	r24, 0x03	; 3
    f1fa:	a8 16       	cp	r10, r24
    f1fc:	b1 04       	cpc	r11, r1
    f1fe:	d0 f1       	brcs	.+116    	; 0xf274 <lseek+0xa6>
    f200:	c5 01       	movw	r24, r10
    f202:	22 dc       	rcall	.-1980   	; 0xea48 <fileno_to_stream>
    f204:	fc 01       	movw	r30, r24
    f206:	93 81       	ldd	r25, Z+3	; 0x03
    f208:	90 64       	ori	r25, 0x40	; 64
    f20a:	93 83       	std	Z+3, r25	; 0x03
    f20c:	02 30       	cpi	r16, 0x02	; 2
    f20e:	11 05       	cpc	r17, r1
    f210:	a9 f5       	brne	.+106    	; 0xf27c <lseek+0xae>
    f212:	8a 85       	ldd	r24, Y+10	; 0x0a
    f214:	9b 85       	ldd	r25, Y+11	; 0x0b
    f216:	ac 85       	ldd	r26, Y+12	; 0x0c
    f218:	bd 85       	ldd	r27, Y+13	; 0x0d
    f21a:	c8 0e       	add	r12, r24
    f21c:	d9 1e       	adc	r13, r25
    f21e:	ea 1e       	adc	r14, r26
    f220:	fb 1e       	adc	r15, r27
    f222:	b7 01       	movw	r22, r14
    f224:	a6 01       	movw	r20, r12
    f226:	ce 01       	movw	r24, r28
    f228:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <f_lseek>
    f22c:	00 97       	sbiw	r24, 0x00	; 0
    f22e:	79 f0       	breq	.+30     	; 0xf24e <lseek+0x80>
    f230:	84 31       	cpi	r24, 0x14	; 20
    f232:	91 05       	cpc	r25, r1
    f234:	58 f5       	brcc	.+86     	; 0xf28c <lseek+0xbe>
    f236:	fc 01       	movw	r30, r24
    f238:	ea 55       	subi	r30, 0x5A	; 90
    f23a:	f4 4f       	sbci	r31, 0xF4	; 244
    f23c:	80 81       	ld	r24, Z
    f23e:	08 2e       	mov	r0, r24
    f240:	00 0c       	add	r0, r0
    f242:	99 0b       	sbc	r25, r25
    f244:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f248:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f24c:	13 c0       	rjmp	.+38     	; 0xf274 <lseek+0xa6>
    f24e:	68 89       	ldd	r22, Y+16	; 0x10
    f250:	79 89       	ldd	r23, Y+17	; 0x11
    f252:	8a 89       	ldd	r24, Y+18	; 0x12
    f254:	9b 89       	ldd	r25, Y+19	; 0x13
    f256:	c6 16       	cp	r12, r22
    f258:	d7 06       	cpc	r13, r23
    f25a:	e8 06       	cpc	r14, r24
    f25c:	f9 06       	cpc	r15, r25
    f25e:	c9 f0       	breq	.+50     	; 0xf292 <lseek+0xc4>
    f260:	86 ef       	ldi	r24, 0xF6	; 246
    f262:	9b e0       	ldi	r25, 0x0B	; 11
    f264:	a0 e0       	ldi	r26, 0x00	; 0
    f266:	ed b7       	in	r30, 0x3d	; 61
    f268:	fe b7       	in	r31, 0x3e	; 62
    f26a:	81 83       	std	Z+1, r24	; 0x01
    f26c:	92 83       	std	Z+2, r25	; 0x02
    f26e:	a3 83       	std	Z+3, r26	; 0x03
    f270:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    f274:	6f ef       	ldi	r22, 0xFF	; 255
    f276:	7f ef       	ldi	r23, 0xFF	; 255
    f278:	cb 01       	movw	r24, r22
    f27a:	0b c0       	rjmp	.+22     	; 0xf292 <lseek+0xc4>
    f27c:	01 30       	cpi	r16, 0x01	; 1
    f27e:	11 05       	cpc	r17, r1
    f280:	81 f6       	brne	.-96     	; 0xf222 <lseek+0x54>
    f282:	88 89       	ldd	r24, Y+16	; 0x10
    f284:	99 89       	ldd	r25, Y+17	; 0x11
    f286:	aa 89       	ldd	r26, Y+18	; 0x12
    f288:	bb 89       	ldd	r27, Y+19	; 0x13
    f28a:	c7 cf       	rjmp	.-114    	; 0xf21a <lseek+0x4c>
    f28c:	83 e2       	ldi	r24, 0x23	; 35
    f28e:	90 e0       	ldi	r25, 0x00	; 0
    f290:	d9 cf       	rjmp	.-78     	; 0xf244 <lseek+0x76>
    f292:	cd b7       	in	r28, 0x3d	; 61
    f294:	de b7       	in	r29, 0x3e	; 62
    f296:	23 96       	adiw	r28, 0x03	; 3
    f298:	ea e0       	ldi	r30, 0x0A	; 10
    f29a:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0000f29e <fseek>:
    f29e:	cf 92       	push	r12
    f2a0:	df 92       	push	r13
    f2a2:	ef 92       	push	r14
    f2a4:	ff 92       	push	r15
    f2a6:	cf 93       	push	r28
    f2a8:	df 93       	push	r29
    f2aa:	6a 01       	movw	r12, r20
    f2ac:	7b 01       	movw	r14, r22
    f2ae:	e9 01       	movw	r28, r18
    f2b0:	af db       	rcall	.-2210   	; 0xea10 <fileno>
    f2b2:	97 fd       	sbrc	r25, 7
    f2b4:	12 c0       	rjmp	.+36     	; 0xf2da <fseek+0x3c>
    f2b6:	9e 01       	movw	r18, r28
    f2b8:	b7 01       	movw	r22, r14
    f2ba:	a6 01       	movw	r20, r12
    f2bc:	88 df       	rcall	.-240    	; 0xf1ce <lseek>
    f2be:	21 e0       	ldi	r18, 0x01	; 1
    f2c0:	30 e0       	ldi	r19, 0x00	; 0
    f2c2:	6f 3f       	cpi	r22, 0xFF	; 255
    f2c4:	7f 4f       	sbci	r23, 0xFF	; 255
    f2c6:	8f 4f       	sbci	r24, 0xFF	; 255
    f2c8:	9f 4f       	sbci	r25, 0xFF	; 255
    f2ca:	11 f0       	breq	.+4      	; 0xf2d0 <fseek+0x32>
    f2cc:	20 e0       	ldi	r18, 0x00	; 0
    f2ce:	30 e0       	ldi	r19, 0x00	; 0
    f2d0:	88 27       	eor	r24, r24
    f2d2:	99 27       	eor	r25, r25
    f2d4:	82 1b       	sub	r24, r18
    f2d6:	93 0b       	sbc	r25, r19
    f2d8:	02 c0       	rjmp	.+4      	; 0xf2de <fseek+0x40>
    f2da:	8f ef       	ldi	r24, 0xFF	; 255
    f2dc:	9f ef       	ldi	r25, 0xFF	; 255
    f2de:	df 91       	pop	r29
    f2e0:	cf 91       	pop	r28
    f2e2:	ff 90       	pop	r15
    f2e4:	ef 90       	pop	r14
    f2e6:	df 90       	pop	r13
    f2e8:	cf 90       	pop	r12
    f2ea:	08 95       	ret

0000f2ec <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f2ec:	a2 e0       	ldi	r26, 0x02	; 2
    f2ee:	b0 e0       	ldi	r27, 0x00	; 0
    f2f0:	ec e7       	ldi	r30, 0x7C	; 124
    f2f2:	f9 e7       	ldi	r31, 0x79	; 121
    f2f4:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
    f2f8:	5c 01       	movw	r10, r24
    f2fa:	8b 01       	movw	r16, r22
    f2fc:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f2fe:	fb 01       	movw	r30, r22
    f300:	10 82       	st	Z, r1

    errno = 0;
    f302:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f306:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f30a:	9e db       	rcall	.-2244   	; 0xea48 <fileno_to_stream>
    f30c:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f30e:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f312:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f316:	e8 16       	cp	r14, r24
    f318:	f9 06       	cpc	r15, r25
    f31a:	c9 f4       	brne	.+50     	; 0xf34e <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f31c:	f7 01       	movw	r30, r14
    f31e:	83 81       	ldd	r24, Z+3	; 0x03
    f320:	80 64       	ori	r24, 0x40	; 64
    f322:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f324:	1a 82       	std	Y+2, r1	; 0x02
    f326:	19 82       	std	Y+1, r1	; 0x01
    f328:	c0 0e       	add	r12, r16
    f32a:	d1 1e       	adc	r13, r17
        while(count--)
    f32c:	0c 15       	cp	r16, r12
    f32e:	1d 05       	cpc	r17, r13
    f330:	09 f4       	brne	.+2      	; 0xf334 <read+0x48>
    f332:	3d c0       	rjmp	.+122    	; 0xf3ae <read+0xc2>
        {
            ret = fgetc(stream);
    f334:	c7 01       	movw	r24, r14
    f336:	48 da       	rcall	.-2928   	; 0xe7c8 <fgetc>
            if(ret < 0)
    f338:	97 fd       	sbrc	r25, 7
    f33a:	39 c0       	rjmp	.+114    	; 0xf3ae <read+0xc2>
                break;

            *ptr++ = ret;
    f33c:	f8 01       	movw	r30, r16
    f33e:	81 93       	st	Z+, r24
    f340:	8f 01       	movw	r16, r30
            ++size;
    f342:	89 81       	ldd	r24, Y+1	; 0x01
    f344:	9a 81       	ldd	r25, Y+2	; 0x02
    f346:	01 96       	adiw	r24, 0x01	; 1
    f348:	9a 83       	std	Y+2, r25	; 0x02
    f34a:	89 83       	std	Y+1, r24	; 0x01
    f34c:	ef cf       	rjmp	.-34     	; 0xf32c <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f34e:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f352:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f356:	e8 16       	cp	r14, r24
    f358:	f9 06       	cpc	r15, r25
    f35a:	71 f1       	breq	.+92     	; 0xf3b8 <read+0xcc>
    f35c:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f360:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f364:	e8 16       	cp	r14, r24
    f366:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f368:	39 f1       	breq	.+78     	; 0xf3b8 <read+0xcc>
    f36a:	c5 01       	movw	r24, r10
    f36c:	00 df       	rcall	.-512    	; 0xf16e <fileno_to_fatfs>
    if ( fh == NULL )
    f36e:	00 97       	sbiw	r24, 0x00	; 0
    f370:	19 f4       	brne	.+6      	; 0xf378 <read+0x8c>
    {
        errno = EBADF;
    f372:	89 e0       	ldi	r24, 0x09	; 9
    f374:	90 e0       	ldi	r25, 0x00	; 0
    f376:	16 c0       	rjmp	.+44     	; 0xf3a4 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f378:	9e 01       	movw	r18, r28
    f37a:	2f 5f       	subi	r18, 0xFF	; 255
    f37c:	3f 4f       	sbci	r19, 0xFF	; 255
    f37e:	a6 01       	movw	r20, r12
    f380:	b8 01       	movw	r22, r16
    f382:	0e 94 b4 59 	call	0xb368	; 0xb368 <f_read>
    if(res != FR_OK)
    f386:	00 97       	sbiw	r24, 0x00	; 0
    f388:	91 f0       	breq	.+36     	; 0xf3ae <read+0xc2>
    f38a:	84 31       	cpi	r24, 0x14	; 20
    f38c:	91 05       	cpc	r25, r1
    f38e:	40 f4       	brcc	.+16     	; 0xf3a0 <read+0xb4>
    f390:	fc 01       	movw	r30, r24
    f392:	ea 55       	subi	r30, 0x5A	; 90
    f394:	f4 4f       	sbci	r31, 0xF4	; 244
    f396:	80 81       	ld	r24, Z
    f398:	08 2e       	mov	r0, r24
    f39a:	00 0c       	add	r0, r0
    f39c:	99 0b       	sbc	r25, r25
    f39e:	02 c0       	rjmp	.+4      	; 0xf3a4 <read+0xb8>
    f3a0:	83 e2       	ldi	r24, 0x23	; 35
    f3a2:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f3a4:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f3a8:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f3ac:	05 c0       	rjmp	.+10     	; 0xf3b8 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f3ae:	69 81       	ldd	r22, Y+1	; 0x01
    f3b0:	7a 81       	ldd	r23, Y+2	; 0x02
    f3b2:	80 e0       	ldi	r24, 0x00	; 0
    f3b4:	90 e0       	ldi	r25, 0x00	; 0
    f3b6:	03 c0       	rjmp	.+6      	; 0xf3be <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f3b8:	6f ef       	ldi	r22, 0xFF	; 255
    f3ba:	7f ef       	ldi	r23, 0xFF	; 255
    f3bc:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f3be:	22 96       	adiw	r28, 0x02	; 2
    f3c0:	ea e0       	ldi	r30, 0x0A	; 10
    f3c2:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0000f3c6 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f3c6:	0f 93       	push	r16
    f3c8:	1f 93       	push	r17
    f3ca:	cf 93       	push	r28
    f3cc:	df 93       	push	r29
    f3ce:	ec 01       	movw	r28, r24
    f3d0:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f3d2:	64 9f       	mul	r22, r20
    f3d4:	80 01       	movw	r16, r0
    f3d6:	65 9f       	mul	r22, r21
    f3d8:	10 0d       	add	r17, r0
    f3da:	74 9f       	mul	r23, r20
    f3dc:	10 0d       	add	r17, r0
    f3de:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f3e0:	17 db       	rcall	.-2514   	; 0xea10 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f3e2:	a8 01       	movw	r20, r16
    f3e4:	be 01       	movw	r22, r28
    f3e6:	82 df       	rcall	.-252    	; 0xf2ec <read>
    if(ret < 0)
    f3e8:	97 fd       	sbrc	r25, 7
    f3ea:	02 c0       	rjmp	.+4      	; 0xf3f0 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f3ec:	cb 01       	movw	r24, r22
    f3ee:	02 c0       	rjmp	.+4      	; 0xf3f4 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f3f0:	80 e0       	ldi	r24, 0x00	; 0
    f3f2:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f3f4:	df 91       	pop	r29
    f3f6:	cf 91       	pop	r28
    f3f8:	1f 91       	pop	r17
    f3fa:	0f 91       	pop	r16
    f3fc:	08 95       	ret

0000f3fe <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f3fe:	cf 93       	push	r28
    f400:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f402:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f406:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f40a:	83 30       	cpi	r24, 0x03	; 3
    f40c:	91 05       	cpc	r25, r1
    f40e:	18 f4       	brcc	.+6      	; 0xf416 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f410:	89 e0       	ldi	r24, 0x09	; 9
    f412:	90 e0       	ldi	r25, 0x00	; 0
    f414:	18 c0       	rjmp	.+48     	; 0xf446 <syncfs+0x48>
    f416:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f418:	17 db       	rcall	.-2514   	; 0xea48 <fileno_to_stream>
    f41a:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f41c:	93 81       	ldd	r25, Z+3	; 0x03
    f41e:	90 64       	ori	r25, 0x40	; 64
    f420:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f422:	ce 01       	movw	r24, r28
    f424:	a4 de       	rcall	.-696    	; 0xf16e <fileno_to_fatfs>
    if(fh == NULL)
    f426:	00 97       	sbiw	r24, 0x00	; 0
    f428:	99 f3       	breq	.-26     	; 0xf410 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f42a:	0e 94 96 5c 	call	0xb92c	; 0xb92c <f_sync>
    if (res != FR_OK)
    f42e:	00 97       	sbiw	r24, 0x00	; 0
    f430:	a1 f0       	breq	.+40     	; 0xf45a <syncfs+0x5c>
    f432:	84 31       	cpi	r24, 0x14	; 20
    f434:	91 05       	cpc	r25, r1
    f436:	70 f4       	brcc	.+28     	; 0xf454 <syncfs+0x56>
    f438:	fc 01       	movw	r30, r24
    f43a:	ea 55       	subi	r30, 0x5A	; 90
    f43c:	f4 4f       	sbci	r31, 0xF4	; 244
    f43e:	80 81       	ld	r24, Z
    f440:	08 2e       	mov	r0, r24
    f442:	00 0c       	add	r0, r0
    f444:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f446:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f44a:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f44e:	8f ef       	ldi	r24, 0xFF	; 255
    f450:	9f ef       	ldi	r25, 0xFF	; 255
    f452:	05 c0       	rjmp	.+10     	; 0xf45e <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f454:	83 e2       	ldi	r24, 0x23	; 35
    f456:	90 e0       	ldi	r25, 0x00	; 0
    f458:	f6 cf       	rjmp	.-20     	; 0xf446 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f45a:	80 e0       	ldi	r24, 0x00	; 0
    f45c:	90 e0       	ldi	r25, 0x00	; 0
}
    f45e:	df 91       	pop	r29
    f460:	cf 91       	pop	r28
    f462:	08 95       	ret

0000f464 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f464:	cf 93       	push	r28
    f466:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f468:	c0 e0       	ldi	r28, 0x00	; 0
    f46a:	d0 e0       	ldi	r29, 0x00	; 0
    f46c:	21 96       	adiw	r28, 0x01	; 1
    f46e:	c0 31       	cpi	r28, 0x10	; 16
    f470:	d1 05       	cpc	r29, r1
    f472:	51 f0       	breq	.+20     	; 0xf488 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f474:	c3 30       	cpi	r28, 0x03	; 3
    f476:	d1 05       	cpc	r29, r1
    f478:	cc f3       	brlt	.-14     	; 0xf46c <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f47a:	ce 01       	movw	r24, r28
    f47c:	78 de       	rcall	.-784    	; 0xf16e <fileno_to_fatfs>
        if(fh == NULL)
    f47e:	89 2b       	or	r24, r25
    f480:	a9 f3       	breq	.-22     	; 0xf46c <sync+0x8>
            continue;

        (void ) syncfs(i);
    f482:	ce 01       	movw	r24, r28
    f484:	bc df       	rcall	.-136    	; 0xf3fe <syncfs>
    f486:	f2 cf       	rjmp	.-28     	; 0xf46c <sync+0x8>
    }
}
    f488:	df 91       	pop	r29
    f48a:	cf 91       	pop	r28
    f48c:	08 95       	ret

0000f48e <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f48e:	a2 e0       	ldi	r26, 0x02	; 2
    f490:	b0 e0       	ldi	r27, 0x00	; 0
    f492:	ed e4       	ldi	r30, 0x4D	; 77
    f494:	fa e7       	ldi	r31, 0x7A	; 122
    f496:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
    f49a:	8c 01       	movw	r16, r24
    f49c:	b6 2e       	mov	r11, r22
    f49e:	f7 2e       	mov	r15, r23
    f4a0:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f4a2:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f4a6:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f4aa:	ce da       	rcall	.-2660   	; 0xea48 <fileno_to_stream>
    f4ac:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f4ae:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
    f4b2:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
    f4b6:	c8 16       	cp	r12, r24
    f4b8:	d9 06       	cpc	r13, r25
    f4ba:	39 f0       	breq	.+14     	; 0xf4ca <write+0x3c>
    f4bc:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob+0x4>
    f4c0:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x5>
    f4c4:	c8 16       	cp	r12, r24
    f4c6:	d9 06       	cpc	r13, r25
    f4c8:	d1 f4       	brne	.+52     	; 0xf4fe <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f4ca:	1a 82       	std	Y+2, r1	; 0x02
    f4cc:	19 82       	std	Y+1, r1	; 0x01
    f4ce:	0b 2d       	mov	r16, r11
    f4d0:	1f 2d       	mov	r17, r15
    f4d2:	78 01       	movw	r14, r16
    f4d4:	e8 0c       	add	r14, r8
    f4d6:	f9 1c       	adc	r15, r9
        while(count--)
    f4d8:	0e 15       	cp	r16, r14
    f4da:	1f 05       	cpc	r17, r15
    f4dc:	d1 f1       	breq	.+116    	; 0xf552 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f4de:	f8 01       	movw	r30, r16
    f4e0:	a1 90       	ld	r10, Z+
    f4e2:	8f 01       	movw	r16, r30
    f4e4:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f4e6:	b6 01       	movw	r22, r12
    f4e8:	c5 01       	movw	r24, r10
    f4ea:	c4 d9       	rcall	.-3192   	; 0xe874 <fputc>
            if(c != ret)
    f4ec:	a8 16       	cp	r10, r24
    f4ee:	b9 06       	cpc	r11, r25
    f4f0:	81 f5       	brne	.+96     	; 0xf552 <write+0xc4>
                break;

            ++size;
    f4f2:	89 81       	ldd	r24, Y+1	; 0x01
    f4f4:	9a 81       	ldd	r25, Y+2	; 0x02
    f4f6:	01 96       	adiw	r24, 0x01	; 1
    f4f8:	9a 83       	std	Y+2, r25	; 0x02
    f4fa:	89 83       	std	Y+1, r24	; 0x01
    f4fc:	ed cf       	rjmp	.-38     	; 0xf4d8 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f4fe:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <__iob>
    f502:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <__iob+0x1>
    f506:	c8 16       	cp	r12, r24
    f508:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f50a:	41 f1       	breq	.+80     	; 0xf55c <write+0xce>
    f50c:	c8 01       	movw	r24, r16
    f50e:	2f de       	rcall	.-930    	; 0xf16e <fileno_to_fatfs>
    if ( fh == NULL )
    f510:	00 97       	sbiw	r24, 0x00	; 0
    f512:	19 f4       	brne	.+6      	; 0xf51a <write+0x8c>
    {
        errno = EBADF;
    f514:	89 e0       	ldi	r24, 0x09	; 9
    f516:	90 e0       	ldi	r25, 0x00	; 0
    f518:	17 c0       	rjmp	.+46     	; 0xf548 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f51a:	9e 01       	movw	r18, r28
    f51c:	2f 5f       	subi	r18, 0xFF	; 255
    f51e:	3f 4f       	sbci	r19, 0xFF	; 255
    f520:	a4 01       	movw	r20, r8
    f522:	6b 2d       	mov	r22, r11
    f524:	7f 2d       	mov	r23, r15
    f526:	0e 94 ff 5a 	call	0xb5fe	; 0xb5fe <f_write>
    if(res != FR_OK)
    f52a:	00 97       	sbiw	r24, 0x00	; 0
    f52c:	91 f0       	breq	.+36     	; 0xf552 <write+0xc4>
    f52e:	84 31       	cpi	r24, 0x14	; 20
    f530:	91 05       	cpc	r25, r1
    f532:	40 f4       	brcc	.+16     	; 0xf544 <write+0xb6>
    f534:	fc 01       	movw	r30, r24
    f536:	ea 55       	subi	r30, 0x5A	; 90
    f538:	f4 4f       	sbci	r31, 0xF4	; 244
    f53a:	80 81       	ld	r24, Z
    f53c:	08 2e       	mov	r0, r24
    f53e:	00 0c       	add	r0, r0
    f540:	99 0b       	sbc	r25, r25
    f542:	02 c0       	rjmp	.+4      	; 0xf548 <write+0xba>
    f544:	83 e2       	ldi	r24, 0x23	; 35
    f546:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f548:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f54c:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f550:	05 c0       	rjmp	.+10     	; 0xf55c <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f552:	69 81       	ldd	r22, Y+1	; 0x01
    f554:	7a 81       	ldd	r23, Y+2	; 0x02
    f556:	80 e0       	ldi	r24, 0x00	; 0
    f558:	90 e0       	ldi	r25, 0x00	; 0
    f55a:	03 c0       	rjmp	.+6      	; 0xf562 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f55c:	6f ef       	ldi	r22, 0xFF	; 255
    f55e:	7f ef       	ldi	r23, 0xFF	; 255
    f560:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f562:	22 96       	adiw	r28, 0x02	; 2
    f564:	ec e0       	ldi	r30, 0x0C	; 12
    f566:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

0000f56a <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f56a:	0f 93       	push	r16
    f56c:	1f 93       	push	r17
    f56e:	cf 93       	push	r28
    f570:	df 93       	push	r29
    f572:	ec 01       	movw	r28, r24
    f574:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f576:	64 9f       	mul	r22, r20
    f578:	80 01       	movw	r16, r0
    f57a:	65 9f       	mul	r22, r21
    f57c:	10 0d       	add	r17, r0
    f57e:	74 9f       	mul	r23, r20
    f580:	10 0d       	add	r17, r0
    f582:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f584:	45 da       	rcall	.-2934   	; 0xea10 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f586:	a8 01       	movw	r20, r16
    f588:	be 01       	movw	r22, r28
    f58a:	81 df       	rcall	.-254    	; 0xf48e <write>

    if(ret < 0)
    f58c:	97 fd       	sbrc	r25, 7
    f58e:	02 c0       	rjmp	.+4      	; 0xf594 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f590:	cb 01       	movw	r24, r22
    f592:	02 c0       	rjmp	.+4      	; 0xf598 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f594:	80 e0       	ldi	r24, 0x00	; 0
    f596:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f598:	df 91       	pop	r29
    f59a:	cf 91       	pop	r28
    f59c:	1f 91       	pop	r17
    f59e:	0f 91       	pop	r16
    f5a0:	08 95       	ret

0000f5a2 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f5a2:	0f 93       	push	r16
    f5a4:	1f 93       	push	r17
    f5a6:	cf 93       	push	r28
    f5a8:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f5aa:	83 30       	cpi	r24, 0x03	; 3
    f5ac:	91 05       	cpc	r25, r1
    f5ae:	48 f4       	brcc	.+18     	; 0xf5c2 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f5b0:	89 e0       	ldi	r24, 0x09	; 9
    f5b2:	90 e0       	ldi	r25, 0x00	; 0
    f5b4:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f5b8:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f5bc:	8f ef       	ldi	r24, 0xFF	; 255
    f5be:	9f ef       	ldi	r25, 0xFF	; 255
    f5c0:	20 c0       	rjmp	.+64     	; 0xf602 <free_file_descriptor+0x60>
    f5c2:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f5c4:	41 da       	rcall	.-2942   	; 0xea48 <fileno_to_stream>
    f5c6:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f5c8:	89 2b       	or	r24, r25
    f5ca:	c1 f3       	breq	.-16     	; 0xf5bc <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f5cc:	f8 01       	movw	r30, r16
    f5ce:	84 85       	ldd	r24, Z+12	; 0x0c
    f5d0:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f5d2:	00 97       	sbiw	r24, 0x00	; 0
    f5d4:	11 f0       	breq	.+4      	; 0xf5da <free_file_descriptor+0x38>
    {
        safefree(fh);
    f5d6:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f5da:	f8 01       	movw	r30, r16
    f5dc:	80 81       	ld	r24, Z
    f5de:	91 81       	ldd	r25, Z+1	; 0x01
    f5e0:	00 97       	sbiw	r24, 0x00	; 0
    f5e2:	21 f0       	breq	.+8      	; 0xf5ec <free_file_descriptor+0x4a>
    f5e4:	23 81       	ldd	r18, Z+3	; 0x03
    f5e6:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f5e8:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <safefree>
    }

    __iob[fileno]  = NULL;
    f5ec:	fe 01       	movw	r30, r28
    f5ee:	ee 0f       	add	r30, r30
    f5f0:	ff 1f       	adc	r31, r31
    f5f2:	e9 53       	subi	r30, 0x39	; 57
    f5f4:	f3 4e       	sbci	r31, 0xE3	; 227
    f5f6:	11 82       	std	Z+1, r1	; 0x01
    f5f8:	10 82       	st	Z, r1
    safefree(stream);
    f5fa:	c8 01       	movw	r24, r16
    f5fc:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <safefree>
    return(fileno);
    f600:	ce 01       	movw	r24, r28
}
    f602:	df 91       	pop	r29
    f604:	cf 91       	pop	r28
    f606:	1f 91       	pop	r17
    f608:	0f 91       	pop	r16
    f60a:	08 95       	ret

0000f60c <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f60c:	0f 93       	push	r16
    f60e:	1f 93       	push	r17
    f610:	cf 93       	push	r28
    f612:	df 93       	push	r29
    f614:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f616:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f61a:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f61e:	14 da       	rcall	.-3032   	; 0xea48 <fileno_to_stream>
    if(stream == NULL)
    f620:	89 2b       	or	r24, r25
    f622:	d9 f0       	breq	.+54     	; 0xf65a <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f624:	c8 01       	movw	r24, r16
    f626:	a3 dd       	rcall	.-1210   	; 0xf16e <fileno_to_fatfs>
    if(fh == NULL)
    f628:	00 97       	sbiw	r24, 0x00	; 0
    f62a:	b9 f0       	breq	.+46     	; 0xf65a <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f62c:	0e 94 16 5d 	call	0xba2c	; 0xba2c <f_close>
    free_file_descriptor(fileno);
    f630:	ec 01       	movw	r28, r24
    f632:	c8 01       	movw	r24, r16
    f634:	b6 df       	rcall	.-148    	; 0xf5a2 <free_file_descriptor>
    if (res != FR_OK)
    f636:	20 97       	sbiw	r28, 0x00	; 0
    f638:	99 f0       	breq	.+38     	; 0xf660 <close+0x54>
    f63a:	c4 31       	cpi	r28, 0x14	; 20
    f63c:	d1 05       	cpc	r29, r1
    f63e:	38 f4       	brcc	.+14     	; 0xf64e <close+0x42>
    f640:	ca 55       	subi	r28, 0x5A	; 90
    f642:	d4 4f       	sbci	r29, 0xF4	; 244
    f644:	88 81       	ld	r24, Y
    f646:	08 2e       	mov	r0, r24
    f648:	00 0c       	add	r0, r0
    f64a:	99 0b       	sbc	r25, r25
    f64c:	02 c0       	rjmp	.+4      	; 0xf652 <close+0x46>
    f64e:	83 e2       	ldi	r24, 0x23	; 35
    f650:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f652:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f656:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
        return(-1);
    f65a:	8f ef       	ldi	r24, 0xFF	; 255
    f65c:	9f ef       	ldi	r25, 0xFF	; 255
    f65e:	02 c0       	rjmp	.+4      	; 0xf664 <close+0x58>
    }
    return(0);
    f660:	80 e0       	ldi	r24, 0x00	; 0
    f662:	90 e0       	ldi	r25, 0x00	; 0
}
    f664:	df 91       	pop	r29
    f666:	cf 91       	pop	r28
    f668:	1f 91       	pop	r17
    f66a:	0f 91       	pop	r16
    f66c:	08 95       	ret

0000f66e <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f66e:	d0 d9       	rcall	.-3168   	; 0xea10 <fileno>
    if(fn < 0)
    f670:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f672:	02 c0       	rjmp	.+4      	; 0xf678 <fclose+0xa>
    f674:	cb cf       	rjmp	.-106    	; 0xf60c <close>
    f676:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f678:	8f ef       	ldi	r24, 0xFF	; 255
    f67a:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f67c:	08 95       	ret

0000f67e <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f67e:	0f 93       	push	r16
    f680:	1f 93       	push	r17
    f682:	cf 93       	push	r28
    f684:	df 93       	push	r29
    f686:	e7 ec       	ldi	r30, 0xC7	; 199
    f688:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f68a:	c0 e0       	ldi	r28, 0x00	; 0
    f68c:	d0 e0       	ldi	r29, 0x00	; 0
    f68e:	21 96       	adiw	r28, 0x01	; 1
    f690:	c0 31       	cpi	r28, 0x10	; 16
    f692:	d1 05       	cpc	r29, r1
    f694:	49 f0       	breq	.+18     	; 0xf6a8 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f696:	c3 30       	cpi	r28, 0x03	; 3
    f698:	d1 05       	cpc	r29, r1
    f69a:	24 f0       	brlt	.+8      	; 0xf6a4 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f69c:	82 81       	ldd	r24, Z+2	; 0x02
    f69e:	93 81       	ldd	r25, Z+3	; 0x03
    f6a0:	89 2b       	or	r24, r25
    f6a2:	59 f0       	breq	.+22     	; 0xf6ba <new_file_descriptor+0x3c>
    f6a4:	32 96       	adiw	r30, 0x02	; 2
    f6a6:	f3 cf       	rjmp	.-26     	; 0xf68e <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f6a8:	87 e1       	ldi	r24, 0x17	; 23
    f6aa:	90 e0       	ldi	r25, 0x00	; 0
    f6ac:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f6b0:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    return(-1);
    f6b4:	8f ef       	ldi	r24, 0xFF	; 255
    f6b6:	9f ef       	ldi	r25, 0xFF	; 255
    f6b8:	22 c0       	rjmp	.+68     	; 0xf6fe <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f6ba:	61 e0       	ldi	r22, 0x01	; 1
    f6bc:	70 e0       	ldi	r23, 0x00	; 0
    f6be:	8e e0       	ldi	r24, 0x0E	; 14
    f6c0:	90 e0       	ldi	r25, 0x00	; 0
    f6c2:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
    f6c6:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f6c8:	89 2b       	or	r24, r25
    f6ca:	59 f0       	breq	.+22     	; 0xf6e2 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f6cc:	61 e0       	ldi	r22, 0x01	; 1
    f6ce:	70 e0       	ldi	r23, 0x00	; 0
    f6d0:	84 e2       	ldi	r24, 0x24	; 36
    f6d2:	92 e0       	ldi	r25, 0x02	; 2
    f6d4:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
            if(fh == NULL)
    f6d8:	00 97       	sbiw	r24, 0x00	; 0
    f6da:	31 f4       	brne	.+12     	; 0xf6e8 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f6dc:	c8 01       	movw	r24, r16
    f6de:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <safefree>
                errno = ENOMEM;
    f6e2:	8c e0       	ldi	r24, 0x0C	; 12
    f6e4:	90 e0       	ldi	r25, 0x00	; 0
    f6e6:	e2 cf       	rjmp	.-60     	; 0xf6ac <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f6e8:	fe 01       	movw	r30, r28
    f6ea:	ee 0f       	add	r30, r30
    f6ec:	ff 1f       	adc	r31, r31
    f6ee:	e9 53       	subi	r30, 0x39	; 57
    f6f0:	f3 4e       	sbci	r31, 0xE3	; 227
    f6f2:	11 83       	std	Z+1, r17	; 0x01
    f6f4:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f6f6:	f8 01       	movw	r30, r16
    f6f8:	95 87       	std	Z+13, r25	; 0x0d
    f6fa:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f6fc:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f6fe:	df 91       	pop	r29
    f700:	cf 91       	pop	r28
    f702:	1f 91       	pop	r17
    f704:	0f 91       	pop	r16
    f706:	08 95       	ret

0000f708 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f708:	a0 e0       	ldi	r26, 0x00	; 0
    f70a:	b0 e0       	ldi	r27, 0x00	; 0
    f70c:	ea e8       	ldi	r30, 0x8A	; 138
    f70e:	fb e7       	ldi	r31, 0x7B	; 123
    f710:	0c 94 f0 e2 	jmp	0x1c5e0	; 0x1c5e0 <__prologue_saves__+0x8>
    f714:	5c 01       	movw	r10, r24
    f716:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f718:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <errno+0x1>
    f71c:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f720:	7b 01       	movw	r14, r22
    f722:	83 e0       	ldi	r24, 0x03	; 3
    f724:	e8 22       	and	r14, r24
    f726:	ff 24       	eor	r15, r15
    f728:	e2 e0       	ldi	r30, 0x02	; 2
    f72a:	ee 16       	cp	r14, r30
    f72c:	f1 04       	cpc	r15, r1
    f72e:	31 f0       	breq	.+12     	; 0xf73c <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f730:	e1 14       	cp	r14, r1
    f732:	f1 04       	cpc	r15, r1
    f734:	31 f0       	breq	.+12     	; 0xf742 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f736:	02 e0       	ldi	r16, 0x02	; 2
    f738:	10 e0       	ldi	r17, 0x00	; 0
    f73a:	05 c0       	rjmp	.+10     	; 0xf746 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f73c:	03 e0       	ldi	r16, 0x03	; 3
    f73e:	10 e0       	ldi	r17, 0x00	; 0
    f740:	02 c0       	rjmp	.+4      	; 0xf746 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f742:	01 e0       	ldi	r16, 0x01	; 1
    f744:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f746:	c6 fe       	sbrs	r12, 6
    f748:	05 c0       	rjmp	.+10     	; 0xf754 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f74a:	d1 fe       	sbrs	r13, 1
    f74c:	02 c0       	rjmp	.+4      	; 0xf752 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f74e:	08 60       	ori	r16, 0x08	; 8
    f750:	01 c0       	rjmp	.+2      	; 0xf754 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f752:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f754:	94 df       	rcall	.-216    	; 0xf67e <new_file_descriptor>
    f756:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f758:	77 d9       	rcall	.-3346   	; 0xea48 <fileno_to_stream>
    f75a:	ec 01       	movw	r28, r24
    f75c:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f75e:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f760:	09 f4       	brne	.+2      	; 0xf764 <open+0x5c>
    f762:	48 c0       	rjmp	.+144    	; 0xf7f4 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f764:	04 dd       	rcall	.-1528   	; 0xf16e <fileno_to_fatfs>
    f766:	4c 01       	movw	r8, r24
    f768:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f76a:	59 f4       	brne	.+22     	; 0xf782 <open+0x7a>
    {
        free_file_descriptor(fileno);
    f76c:	c3 01       	movw	r24, r6
    f76e:	19 df       	rcall	.-462    	; 0xf5a2 <free_file_descriptor>
    f770:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f772:	90 e0       	ldi	r25, 0x00	; 0
    f774:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    f778:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f77c:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f77e:	9f ef       	ldi	r25, 0xFF	; 255
    f780:	5d c0       	rjmp	.+186    	; 0xf83c <open+0x134>
    f782:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f784:	b5 01       	movw	r22, r10
    f786:	0e 94 fc 57 	call	0xaff8	; 0xaff8 <f_open>
    f78a:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f78c:	91 f0       	breq	.+36     	; 0xf7b2 <open+0xaa>
    f78e:	84 31       	cpi	r24, 0x14	; 20
    f790:	91 05       	cpc	r25, r1
    f792:	40 f4       	brcc	.+16     	; 0xf7a4 <open+0x9c>
    f794:	fc 01       	movw	r30, r24
    f796:	ea 55       	subi	r30, 0x5A	; 90
    f798:	f4 4f       	sbci	r31, 0xF4	; 244
    f79a:	80 81       	ld	r24, Z
    f79c:	08 2e       	mov	r0, r24
    f79e:	00 0c       	add	r0, r0
    f7a0:	99 0b       	sbc	r25, r25
    f7a2:	02 c0       	rjmp	.+4      	; 0xf7a8 <open+0xa0>
    f7a4:	83 e2       	ldi	r24, 0x23	; 35
    f7a6:	90 e0       	ldi	r25, 0x00	; 0
    f7a8:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f7ac:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f7b0:	20 c0       	rjmp	.+64     	; 0xf7f2 <open+0xea>
    f7b2:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f7b4:	21 c0       	rjmp	.+66     	; 0xf7f8 <open+0xf0>
    f7b6:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f7b8:	42 85       	ldd	r20, Z+10	; 0x0a
    f7ba:	53 85       	ldd	r21, Z+11	; 0x0b
    f7bc:	64 85       	ldd	r22, Z+12	; 0x0c
    f7be:	75 85       	ldd	r23, Z+13	; 0x0d
    f7c0:	c4 01       	movw	r24, r8
    f7c2:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <f_lseek>
    f7c6:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f7c8:	b9 f0       	breq	.+46     	; 0xf7f8 <open+0xf0>
    f7ca:	84 31       	cpi	r24, 0x14	; 20
    f7cc:	91 05       	cpc	r25, r1
    f7ce:	40 f4       	brcc	.+16     	; 0xf7e0 <open+0xd8>
    f7d0:	fc 01       	movw	r30, r24
    f7d2:	ea 55       	subi	r30, 0x5A	; 90
    f7d4:	f4 4f       	sbci	r31, 0xF4	; 244
    f7d6:	80 81       	ld	r24, Z
    f7d8:	08 2e       	mov	r0, r24
    f7da:	00 0c       	add	r0, r0
    f7dc:	99 0b       	sbc	r25, r25
    f7de:	02 c0       	rjmp	.+4      	; 0xf7e4 <open+0xdc>
    f7e0:	83 e2       	ldi	r24, 0x23	; 35
    f7e2:	90 e0       	ldi	r25, 0x00	; 0
    f7e4:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f7e8:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <errno>
    f7ec:	c4 01       	movw	r24, r8
            f_close(fh);
    f7ee:	0e 94 16 5d 	call	0xba2c	; 0xba2c <f_close>
            free_file_descriptor(fileno);
    f7f2:	c3 01       	movw	r24, r6
    f7f4:	d6 de       	rcall	.-596    	; 0xf5a2 <free_file_descriptor>
    f7f6:	c2 cf       	rjmp	.-124    	; 0xf77c <open+0x74>
    f7f8:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f7fa:	ef 16       	cp	r14, r31
    f7fc:	f1 04       	cpc	r15, r1
    f7fe:	51 f4       	brne	.+20     	; 0xf814 <open+0x10c>
    f800:	89 e9       	ldi	r24, 0x99	; 153
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f802:	93 e7       	ldi	r25, 0x73	; 115
    f804:	99 87       	std	Y+9, r25	; 0x09
    f806:	88 87       	std	Y+8, r24	; 0x08
    f808:	86 e1       	ldi	r24, 0x16	; 22
        stream->get = fatfs_getc;
    f80a:	93 e7       	ldi	r25, 0x73	; 115
    f80c:	9b 87       	std	Y+11, r25	; 0x0b
    f80e:	8a 87       	std	Y+10, r24	; 0x0a
    f810:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f812:	12 c0       	rjmp	.+36     	; 0xf838 <open+0x130>
    f814:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f816:	f1 04       	cpc	r15, r1
    f818:	41 f4       	brne	.+16     	; 0xf82a <open+0x122>
    f81a:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f81c:	18 86       	std	Y+8, r1	; 0x08
    f81e:	86 e1       	ldi	r24, 0x16	; 22
        stream->get = fatfs_getc;
    f820:	93 e7       	ldi	r25, 0x73	; 115
    f822:	9b 87       	std	Y+11, r25	; 0x0b
    f824:	8a 87       	std	Y+10, r24	; 0x0a
    f826:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f828:	07 c0       	rjmp	.+14     	; 0xf838 <open+0x130>
    f82a:	89 e9       	ldi	r24, 0x99	; 153
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f82c:	93 e7       	ldi	r25, 0x73	; 115
    f82e:	99 87       	std	Y+9, r25	; 0x09
    f830:	88 87       	std	Y+8, r24	; 0x08
    f832:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f834:	1a 86       	std	Y+10, r1	; 0x0a
    f836:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f838:	8b 83       	std	Y+3, r24	; 0x03
    f83a:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f83c:	cd b7       	in	r28, 0x3d	; 61
}
    f83e:	de b7       	in	r29, 0x3e	; 62
    f840:	ee e0       	ldi	r30, 0x0E	; 14
    f842:	0c 94 0c e3 	jmp	0x1c618	; 0x1c618 <__epilogue_restores__+0x8>

0000f846 <posix_fopen_modes_to_open>:
    f846:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f848:	df 93       	push	r29
    f84a:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f84c:	62 e4       	ldi	r22, 0x42	; 66
    f84e:	73 e0       	ldi	r23, 0x03	; 3
    f850:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f854:	00 97       	sbiw	r24, 0x00	; 0
    f856:	09 f4       	brne	.+2      	; 0xf85a <posix_fopen_modes_to_open+0x14>
    f858:	5d c0       	rjmp	.+186    	; 0xf914 <posix_fopen_modes_to_open+0xce>
    f85a:	6e ef       	ldi	r22, 0xFE	; 254
    f85c:	78 e0       	ldi	r23, 0x08	; 8
    f85e:	ce 01       	movw	r24, r28
    f860:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f864:	00 97       	sbiw	r24, 0x00	; 0
    f866:	09 f4       	brne	.+2      	; 0xf86a <posix_fopen_modes_to_open+0x24>
    f868:	55 c0       	rjmp	.+170    	; 0xf914 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f86a:	61 e0       	ldi	r22, 0x01	; 1
    f86c:	79 e0       	ldi	r23, 0x09	; 9
    f86e:	ce 01       	movw	r24, r28
    f870:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f874:	89 2b       	or	r24, r25
    f876:	09 f4       	brne	.+2      	; 0xf87a <posix_fopen_modes_to_open+0x34>
    f878:	42 c0       	rjmp	.+132    	; 0xf8fe <posix_fopen_modes_to_open+0xb8>
    f87a:	64 e0       	ldi	r22, 0x04	; 4
    f87c:	79 e0       	ldi	r23, 0x09	; 9
    f87e:	ce 01       	movw	r24, r28
    f880:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f884:	89 2b       	or	r24, r25
    f886:	d9 f1       	breq	.+118    	; 0xf8fe <posix_fopen_modes_to_open+0xb8>
    f888:	68 e0       	ldi	r22, 0x08	; 8
    f88a:	79 e0       	ldi	r23, 0x09	; 9
    f88c:	ce 01       	movw	r24, r28
    f88e:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f892:	89 2b       	or	r24, r25
    f894:	a1 f1       	breq	.+104    	; 0xf8fe <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f896:	6d eb       	ldi	r22, 0xBD	; 189
    f898:	7a e0       	ldi	r23, 0x0A	; 10
    f89a:	ce 01       	movw	r24, r28
    f89c:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f8a0:	89 2b       	or	r24, r25
    f8a2:	81 f1       	breq	.+96     	; 0xf904 <posix_fopen_modes_to_open+0xbe>
    f8a4:	6c e0       	ldi	r22, 0x0C	; 12
    f8a6:	79 e0       	ldi	r23, 0x09	; 9
    f8a8:	ce 01       	movw	r24, r28
    f8aa:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f8ae:	89 2b       	or	r24, r25
    f8b0:	49 f1       	breq	.+82     	; 0xf904 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    f8b2:	6f e0       	ldi	r22, 0x0F	; 15
    f8b4:	79 e0       	ldi	r23, 0x09	; 9
    f8b6:	ce 01       	movw	r24, r28
    f8b8:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f8bc:	89 2b       	or	r24, r25
    f8be:	29 f1       	breq	.+74     	; 0xf90a <posix_fopen_modes_to_open+0xc4>
    f8c0:	62 e1       	ldi	r22, 0x12	; 18
    f8c2:	79 e0       	ldi	r23, 0x09	; 9
    f8c4:	ce 01       	movw	r24, r28
    f8c6:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f8ca:	89 2b       	or	r24, r25
    f8cc:	f1 f0       	breq	.+60     	; 0xf90a <posix_fopen_modes_to_open+0xc4>
    f8ce:	66 e1       	ldi	r22, 0x16	; 22
    f8d0:	79 e0       	ldi	r23, 0x09	; 9
    f8d2:	ce 01       	movw	r24, r28
    f8d4:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f8d8:	89 2b       	or	r24, r25
    f8da:	b9 f0       	breq	.+46     	; 0xf90a <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    f8dc:	6e e2       	ldi	r22, 0x2E	; 46
    f8de:	73 e1       	ldi	r23, 0x13	; 19
    f8e0:	ce 01       	movw	r24, r28
    f8e2:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f8e6:	89 2b       	or	r24, r25
    f8e8:	99 f0       	breq	.+38     	; 0xf910 <posix_fopen_modes_to_open+0xca>
    f8ea:	6a e1       	ldi	r22, 0x1A	; 26
    f8ec:	79 e0       	ldi	r23, 0x09	; 9
    f8ee:	ce 01       	movw	r24, r28
    f8f0:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strcmp>
    f8f4:	89 2b       	or	r24, r25
    f8f6:	61 f0       	breq	.+24     	; 0xf910 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    f8f8:	8f ef       	ldi	r24, 0xFF	; 255
    f8fa:	9f ef       	ldi	r25, 0xFF	; 255
    f8fc:	0b c0       	rjmp	.+22     	; 0xf914 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    f8fe:	82 e0       	ldi	r24, 0x02	; 2
    f900:	92 e0       	ldi	r25, 0x02	; 2
    f902:	08 c0       	rjmp	.+16     	; 0xf914 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    f904:	81 e4       	ldi	r24, 0x41	; 65
    f906:	92 e0       	ldi	r25, 0x02	; 2
    f908:	05 c0       	rjmp	.+10     	; 0xf914 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    f90a:	82 e4       	ldi	r24, 0x42	; 66
    f90c:	92 e0       	ldi	r25, 0x02	; 2
    f90e:	02 c0       	rjmp	.+4      	; 0xf914 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    f910:	81 e4       	ldi	r24, 0x41	; 65
    f912:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    f914:	df 91       	pop	r29
    f916:	cf 91       	pop	r28
    f918:	08 95       	ret

0000f91a <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    f91a:	cf 93       	push	r28
    f91c:	df 93       	push	r29
    f91e:	ec 01       	movw	r28, r24
    f920:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    f922:	91 df       	rcall	.-222    	; 0xf846 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    f924:	bc 01       	movw	r22, r24
    f926:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    f928:	ef de       	rcall	.-546    	; 0xf708 <open>
    f92a:	8e d8       	rcall	.-3812   	; 0xea48 <fileno_to_stream>
}
    f92c:	df 91       	pop	r29
    f92e:	cf 91       	pop	r28
    f930:	08 95       	ret

0000f932 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    f932:	a8 e0       	ldi	r26, 0x08	; 8
    f934:	b0 e0       	ldi	r27, 0x00	; 0
    f936:	ef e9       	ldi	r30, 0x9F	; 159
    f938:	fc e7       	ldi	r31, 0x7C	; 124
    f93a:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    f93e:	8c e8       	ldi	r24, 0x8C	; 140
    f940:	94 e7       	ldi	r25, 0x74	; 116
    f942:	9a 83       	std	Y+2, r25	; 0x02
    f944:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    f946:	18 86       	std	Y+8, r1	; 0x08
    f948:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    f94a:	8d 85       	ldd	r24, Y+13	; 0x0d
    f94c:	9e 85       	ldd	r25, Y+14	; 0x0e
    f94e:	9c 83       	std	Y+4, r25	; 0x04
    f950:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    f952:	4f 85       	ldd	r20, Y+15	; 0x0f
    f954:	58 89       	ldd	r21, Y+16	; 0x10
    f956:	60 e8       	ldi	r22, 0x80	; 128
    f958:	9e 01       	movw	r18, r28
    f95a:	2f 5e       	subi	r18, 0xEF	; 239
    f95c:	3f 4f       	sbci	r19, 0xFF	; 255
    f95e:	ce 01       	movw	r24, r28
    f960:	01 96       	adiw	r24, 0x01	; 1
    f962:	0e 94 af 40 	call	0x815e	; 0x815e <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    f966:	8f 81       	ldd	r24, Y+7	; 0x07
    f968:	98 85       	ldd	r25, Y+8	; 0x08
    f96a:	28 96       	adiw	r28, 0x08	; 8
    f96c:	e2 e0       	ldi	r30, 0x02	; 2
    f96e:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000f972 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    f972:	cf 93       	push	r28
    f974:	df 93       	push	r29
    f976:	00 d0       	rcall	.+0      	; 0xf978 <posix_help+0x6>
    f978:	1f 92       	push	r1
    f97a:	ec 01       	movw	r28, r24
    f97c:	80 ec       	ldi	r24, 0xC0	; 192
    f97e:	9e e0       	ldi	r25, 0x0E	; 14
    f980:	a0 e0       	ldi	r26, 0x00	; 0
    f982:	ed b7       	in	r30, 0x3d	; 61
    f984:	fe b7       	in	r31, 0x3e	; 62
    f986:	81 83       	std	Z+1, r24	; 0x01
    f988:	92 83       	std	Z+2, r25	; 0x02
    f98a:	a3 83       	std	Z+3, r26	; 0x03
    f98c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    f990:	cd 2b       	or	r28, r29
    f992:	51 f0       	breq	.+20     	; 0xf9a8 <posix_help+0x36>
    f994:	8a ef       	ldi	r24, 0xFA	; 250
    f996:	9d e0       	ldi	r25, 0x0D	; 13
    f998:	a0 e0       	ldi	r26, 0x00	; 0
    f99a:	ed b7       	in	r30, 0x3d	; 61
    f99c:	fe b7       	in	r31, 0x3e	; 62
    f99e:	81 83       	std	Z+1, r24	; 0x01
    f9a0:	92 83       	std	Z+2, r25	; 0x02
    f9a2:	a3 83       	std	Z+3, r26	; 0x03
    f9a4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    f9a8:	cd b7       	in	r28, 0x3d	; 61
    f9aa:	de b7       	in	r29, 0x3e	; 62
    f9ac:	23 96       	adiw	r28, 0x03	; 3
    f9ae:	e2 e0       	ldi	r30, 0x02	; 2
    f9b0:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000f9b4 <copy>:
    f9b4:	4f 92       	push	r4
    f9b6:	5f 92       	push	r5
    f9b8:	6f 92       	push	r6
    f9ba:	8f 92       	push	r8
    f9bc:	9f 92       	push	r9
    f9be:	af 92       	push	r10
    f9c0:	bf 92       	push	r11
    f9c2:	cf 92       	push	r12
    f9c4:	df 92       	push	r13
    f9c6:	ef 92       	push	r14
    f9c8:	ff 92       	push	r15
    f9ca:	0f 93       	push	r16
    f9cc:	1f 93       	push	r17
    f9ce:	cf 93       	push	r28
    f9d0:	df 93       	push	r29
    f9d2:	ad b7       	in	r26, 0x3d	; 61
    f9d4:	be b7       	in	r27, 0x3e	; 62
    f9d6:	17 97       	sbiw	r26, 0x07	; 7
    f9d8:	0f b6       	in	r0, 0x3f	; 63
    f9da:	f8 94       	cli
    f9dc:	be bf       	out	0x3e, r27	; 62
    f9de:	0f be       	out	0x3f, r0	; 63
    f9e0:	ad bf       	out	0x3d, r26	; 61
    f9e2:	8c 01       	movw	r16, r24
    f9e4:	eb 01       	movw	r28, r22
    f9e6:	ed b7       	in	r30, 0x3d	; 61
    f9e8:	fe b7       	in	r31, 0x3e	; 62
    f9ea:	95 83       	std	Z+5, r25	; 0x05
    f9ec:	84 83       	std	Z+4, r24	; 0x04
    f9ee:	87 e5       	ldi	r24, 0x57	; 87
    f9f0:	9d e0       	ldi	r25, 0x0D	; 13
    f9f2:	a0 e0       	ldi	r26, 0x00	; 0
    f9f4:	81 83       	std	Z+1, r24	; 0x01
    f9f6:	92 83       	std	Z+2, r25	; 0x02
    f9f8:	a3 83       	std	Z+3, r26	; 0x03
    f9fa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    f9fe:	6e ef       	ldi	r22, 0xFE	; 254
    fa00:	78 e0       	ldi	r23, 0x08	; 8
    fa02:	c8 01       	movw	r24, r16
    fa04:	8a df       	rcall	.-236    	; 0xf91a <fopen>
    fa06:	7c 01       	movw	r14, r24
    fa08:	ed b7       	in	r30, 0x3d	; 61
    fa0a:	fe b7       	in	r31, 0x3e	; 62
    fa0c:	89 2b       	or	r24, r25
    fa0e:	59 f4       	brne	.+22     	; 0xfa26 <copy+0x72>
    fa10:	15 83       	std	Z+5, r17	; 0x05
    fa12:	04 83       	std	Z+4, r16	; 0x04
    fa14:	87 e4       	ldi	r24, 0x47	; 71
    fa16:	9d e0       	ldi	r25, 0x0D	; 13
    fa18:	a0 e0       	ldi	r26, 0x00	; 0
    fa1a:	81 83       	std	Z+1, r24	; 0x01
    fa1c:	92 83       	std	Z+2, r25	; 0x02
    fa1e:	a3 83       	std	Z+3, r26	; 0x03
    fa20:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fa24:	20 c0       	rjmp	.+64     	; 0xfa66 <copy+0xb2>
    fa26:	d5 83       	std	Z+5, r29	; 0x05
    fa28:	c4 83       	std	Z+4, r28	; 0x04
    fa2a:	8a e3       	ldi	r24, 0x3A	; 58
    fa2c:	9d e0       	ldi	r25, 0x0D	; 13
    fa2e:	a0 e0       	ldi	r26, 0x00	; 0
    fa30:	81 83       	std	Z+1, r24	; 0x01
    fa32:	92 83       	std	Z+2, r25	; 0x02
    fa34:	a3 83       	std	Z+3, r26	; 0x03
    fa36:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fa3a:	6c e0       	ldi	r22, 0x0C	; 12
    fa3c:	79 e0       	ldi	r23, 0x09	; 9
    fa3e:	ce 01       	movw	r24, r28
    fa40:	6c df       	rcall	.-296    	; 0xf91a <fopen>
    fa42:	8c 01       	movw	r16, r24
    fa44:	89 2b       	or	r24, r25
    fa46:	a1 f4       	brne	.+40     	; 0xfa70 <copy+0xbc>
    fa48:	ed b7       	in	r30, 0x3d	; 61
    fa4a:	fe b7       	in	r31, 0x3e	; 62
    fa4c:	d5 83       	std	Z+5, r29	; 0x05
    fa4e:	c4 83       	std	Z+4, r28	; 0x04
    fa50:	8a e2       	ldi	r24, 0x2A	; 42
    fa52:	9d e0       	ldi	r25, 0x0D	; 13
    fa54:	a0 e0       	ldi	r26, 0x00	; 0
    fa56:	81 83       	std	Z+1, r24	; 0x01
    fa58:	92 83       	std	Z+2, r25	; 0x02
    fa5a:	a3 83       	std	Z+3, r26	; 0x03
    fa5c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fa60:	80 e0       	ldi	r24, 0x00	; 0
    fa62:	90 e0       	ldi	r25, 0x00	; 0
    fa64:	04 de       	rcall	.-1016   	; 0xf66e <fclose>
    fa66:	6f ef       	ldi	r22, 0xFF	; 255
    fa68:	7f ef       	ldi	r23, 0xFF	; 255
    fa6a:	8f ef       	ldi	r24, 0xFF	; 255
    fa6c:	9f ef       	ldi	r25, 0xFF	; 255
    fa6e:	68 c0       	rjmp	.+208    	; 0xfb40 <copy+0x18c>
    fa70:	61 e0       	ldi	r22, 0x01	; 1
    fa72:	70 e0       	ldi	r23, 0x00	; 0
    fa74:	80 e0       	ldi	r24, 0x00	; 0
    fa76:	92 e0       	ldi	r25, 0x02	; 2
    fa78:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
    fa7c:	6c 01       	movw	r12, r24
    fa7e:	89 2b       	or	r24, r25
    fa80:	21 f4       	brne	.+8      	; 0xfa8a <copy+0xd6>
    fa82:	c7 01       	movw	r24, r14
    fa84:	f4 dd       	rcall	.-1048   	; 0xf66e <fclose>
    fa86:	c8 01       	movw	r24, r16
    fa88:	ed cf       	rjmp	.-38     	; 0xfa64 <copy+0xb0>
    fa8a:	8d e1       	ldi	r24, 0x1D	; 29
    fa8c:	9d e0       	ldi	r25, 0x0D	; 13
    fa8e:	a0 e0       	ldi	r26, 0x00	; 0
    fa90:	ed b7       	in	r30, 0x3d	; 61
    fa92:	fe b7       	in	r31, 0x3e	; 62
    fa94:	81 83       	std	Z+1, r24	; 0x01
    fa96:	92 83       	std	Z+2, r25	; 0x02
    fa98:	a3 83       	std	Z+3, r26	; 0x03
    fa9a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fa9e:	81 2c       	mov	r8, r1
    faa0:	91 2c       	mov	r9, r1
    faa2:	54 01       	movw	r10, r8
    faa4:	81 e0       	ldi	r24, 0x01	; 1
    faa6:	9d e0       	ldi	r25, 0x0D	; 13
    faa8:	2c 01       	movw	r4, r24
    faaa:	61 2c       	mov	r6, r1
    faac:	97 01       	movw	r18, r14
    faae:	40 e0       	ldi	r20, 0x00	; 0
    fab0:	52 e0       	ldi	r21, 0x02	; 2
    fab2:	61 e0       	ldi	r22, 0x01	; 1
    fab4:	70 e0       	ldi	r23, 0x00	; 0
    fab6:	c6 01       	movw	r24, r12
    fab8:	86 dc       	rcall	.-1780   	; 0xf3c6 <fread>
    faba:	ec 01       	movw	r28, r24
    fabc:	18 16       	cp	r1, r24
    fabe:	19 06       	cpc	r1, r25
    fac0:	44 f5       	brge	.+80     	; 0xfb12 <copy+0x15e>
    fac2:	98 01       	movw	r18, r16
    fac4:	ae 01       	movw	r20, r28
    fac6:	61 e0       	ldi	r22, 0x01	; 1
    fac8:	70 e0       	ldi	r23, 0x00	; 0
    faca:	c6 01       	movw	r24, r12
    facc:	4e dd       	rcall	.-1380   	; 0xf56a <fwrite>
    face:	8c 17       	cp	r24, r28
    fad0:	9d 07       	cpc	r25, r29
    fad2:	5c f4       	brge	.+22     	; 0xfaea <copy+0x136>
    fad4:	80 e1       	ldi	r24, 0x10	; 16
    fad6:	9d e0       	ldi	r25, 0x0D	; 13
    fad8:	a0 e0       	ldi	r26, 0x00	; 0
    fada:	ed b7       	in	r30, 0x3d	; 61
    fadc:	fe b7       	in	r31, 0x3e	; 62
    fade:	81 83       	std	Z+1, r24	; 0x01
    fae0:	92 83       	std	Z+2, r25	; 0x02
    fae2:	a3 83       	std	Z+3, r26	; 0x03
    fae4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fae8:	14 c0       	rjmp	.+40     	; 0xfb12 <copy+0x15e>
    faea:	ce 01       	movw	r24, r28
    faec:	dd 0f       	add	r29, r29
    faee:	aa 0b       	sbc	r26, r26
    faf0:	bb 0b       	sbc	r27, r27
    faf2:	88 0e       	add	r8, r24
    faf4:	99 1e       	adc	r9, r25
    faf6:	aa 1e       	adc	r10, r26
    faf8:	bb 1e       	adc	r11, r27
    fafa:	ed b7       	in	r30, 0x3d	; 61
    fafc:	fe b7       	in	r31, 0x3e	; 62
    fafe:	84 82       	std	Z+4, r8	; 0x04
    fb00:	95 82       	std	Z+5, r9	; 0x05
    fb02:	a6 82       	std	Z+6, r10	; 0x06
    fb04:	b7 82       	std	Z+7, r11	; 0x07
    fb06:	41 82       	std	Z+1, r4	; 0x01
    fb08:	52 82       	std	Z+2, r5	; 0x02
    fb0a:	63 82       	std	Z+3, r6	; 0x03
    fb0c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fb10:	cd cf       	rjmp	.-102    	; 0xfaac <copy+0xf8>
    fb12:	ed b7       	in	r30, 0x3d	; 61
    fb14:	fe b7       	in	r31, 0x3e	; 62
    fb16:	84 82       	std	Z+4, r8	; 0x04
    fb18:	95 82       	std	Z+5, r9	; 0x05
    fb1a:	a6 82       	std	Z+6, r10	; 0x06
    fb1c:	b7 82       	std	Z+7, r11	; 0x07
    fb1e:	8e ee       	ldi	r24, 0xEE	; 238
    fb20:	9c e0       	ldi	r25, 0x0C	; 12
    fb22:	a0 e0       	ldi	r26, 0x00	; 0
    fb24:	81 83       	std	Z+1, r24	; 0x01
    fb26:	92 83       	std	Z+2, r25	; 0x02
    fb28:	a3 83       	std	Z+3, r26	; 0x03
    fb2a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fb2e:	c6 01       	movw	r24, r12
    fb30:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <safefree>
    fb34:	c7 01       	movw	r24, r14
    fb36:	9b dd       	rcall	.-1226   	; 0xf66e <fclose>
    fb38:	c8 01       	movw	r24, r16
    fb3a:	99 dd       	rcall	.-1230   	; 0xf66e <fclose>
    fb3c:	b4 01       	movw	r22, r8
    fb3e:	c5 01       	movw	r24, r10
    fb40:	ad b7       	in	r26, 0x3d	; 61
    fb42:	be b7       	in	r27, 0x3e	; 62
    fb44:	17 96       	adiw	r26, 0x07	; 7
    fb46:	0f b6       	in	r0, 0x3f	; 63
    fb48:	f8 94       	cli
    fb4a:	be bf       	out	0x3e, r27	; 62
    fb4c:	0f be       	out	0x3f, r0	; 63
    fb4e:	ad bf       	out	0x3d, r26	; 61
    fb50:	df 91       	pop	r29
    fb52:	cf 91       	pop	r28
    fb54:	1f 91       	pop	r17
    fb56:	0f 91       	pop	r16
    fb58:	ff 90       	pop	r15
    fb5a:	ef 90       	pop	r14
    fb5c:	df 90       	pop	r13
    fb5e:	cf 90       	pop	r12
    fb60:	bf 90       	pop	r11
    fb62:	af 90       	pop	r10
    fb64:	9f 90       	pop	r9
    fb66:	8f 90       	pop	r8
    fb68:	6f 90       	pop	r6
    fb6a:	5f 90       	pop	r5
    fb6c:	4f 90       	pop	r4
    fb6e:	08 95       	ret

0000fb70 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fb70:	cf 93       	push	r28
    fb72:	df 93       	push	r29
    fb74:	00 d0       	rcall	.+0      	; 0xfb76 <testpage+0x6>
    fb76:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fb78:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fb7c:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fb80:	82 17       	cp	r24, r18
    fb82:	93 07       	cpc	r25, r19
    fb84:	3c f1       	brlt	.+78     	; 0xfbd4 <testpage+0x64>
    {
        printf("More..");
    fb86:	87 ee       	ldi	r24, 0xE7	; 231
    fb88:	9c e0       	ldi	r25, 0x0C	; 12
    fb8a:	a0 e0       	ldi	r26, 0x00	; 0
    fb8c:	ed b7       	in	r30, 0x3d	; 61
    fb8e:	fe b7       	in	r31, 0x3e	; 62
    fb90:	81 83       	std	Z+1, r24	; 0x01
    fb92:	92 83       	std	Z+2, r25	; 0x02
    fb94:	a3 83       	std	Z+3, r26	; 0x03
    fb96:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fb9a:	0e 94 99 74 	call	0xe932	; 0xe932 <getchar>
    fb9e:	ec 01       	movw	r28, r24
        printf("\r");
    fba0:	85 ee       	ldi	r24, 0xE5	; 229
    fba2:	9c e0       	ldi	r25, 0x0C	; 12
    fba4:	a0 e0       	ldi	r26, 0x00	; 0
    fba6:	ed b7       	in	r30, 0x3d	; 61
    fba8:	fe b7       	in	r31, 0x3e	; 62
    fbaa:	81 83       	std	Z+1, r24	; 0x01
    fbac:	92 83       	std	Z+2, r25	; 0x02
    fbae:	a3 83       	std	Z+3, r26	; 0x03
    fbb0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        if(c == 'q')
    fbb4:	c1 37       	cpi	r28, 0x71	; 113
    fbb6:	d1 05       	cpc	r29, r1
    fbb8:	41 f0       	breq	.+16     	; 0xfbca <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fbba:	2a 97       	sbiw	r28, 0x0a	; 10
    fbbc:	49 f4       	brne	.+18     	; 0xfbd0 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fbbe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fbc2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fbc6:	01 97       	sbiw	r24, 0x01	; 1
    fbc8:	05 c0       	rjmp	.+10     	; 0xfbd4 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fbca:	8f ef       	ldi	r24, 0xFF	; 255
    fbcc:	9f ef       	ldi	r25, 0xFF	; 255
    fbce:	02 c0       	rjmp	.+4      	; 0xfbd4 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fbd0:	80 e0       	ldi	r24, 0x00	; 0
    fbd2:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fbd4:	cd b7       	in	r28, 0x3d	; 61
    fbd6:	de b7       	in	r29, 0x3e	; 62
    fbd8:	23 96       	adiw	r28, 0x03	; 3
    fbda:	e2 e0       	ldi	r30, 0x02	; 2
    fbdc:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0000fbe0 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    fbe0:	a7 e0       	ldi	r26, 0x07	; 7
    fbe2:	b1 e0       	ldi	r27, 0x01	; 1
    fbe4:	e6 ef       	ldi	r30, 0xF6	; 246
    fbe6:	fd e7       	ldi	r31, 0x7D	; 125
    fbe8:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
    fbec:	8c 01       	movw	r16, r24
    fbee:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fbf0:	6e ef       	ldi	r22, 0xFE	; 254
    fbf2:	78 e0       	ldi	r23, 0x08	; 8
    fbf4:	92 de       	rcall	.-732    	; 0xf91a <fopen>
    fbf6:	7c 01       	movw	r14, r24
    if (!fp)
    fbf8:	89 2b       	or	r24, r25
    fbfa:	41 f0       	breq	.+16     	; 0xfc0c <cat+0x2c>
    fbfc:	c1 2c       	mov	r12, r1
    fbfe:	d1 2c       	mov	r13, r1
    fc00:	a1 2c       	mov	r10, r1
    fc02:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fc04:	8e 01       	movw	r16, r28
    fc06:	08 5f       	subi	r16, 0xF8	; 248
    fc08:	1f 4f       	sbci	r17, 0xFF	; 255
    fc0a:	23 c0       	rjmp	.+70     	; 0xfc52 <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fc0c:	ed b7       	in	r30, 0x3d	; 61
    fc0e:	fe b7       	in	r31, 0x3e	; 62
    fc10:	15 83       	std	Z+5, r17	; 0x05
    fc12:	04 83       	std	Z+4, r16	; 0x04
    fc14:	80 e7       	ldi	r24, 0x70	; 112
    fc16:	9d e0       	ldi	r25, 0x0D	; 13
    fc18:	a0 e0       	ldi	r26, 0x00	; 0
    fc1a:	81 83       	std	Z+1, r24	; 0x01
    fc1c:	92 83       	std	Z+2, r25	; 0x02
    fc1e:	a3 83       	std	Z+3, r26	; 0x03
    fc20:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(-1);
    fc24:	cc 24       	eor	r12, r12
    fc26:	ca 94       	dec	r12
    fc28:	dc 2c       	mov	r13, r12
    fc2a:	76 01       	movw	r14, r12
    fc2c:	3f c0       	rjmp	.+126    	; 0xfcac <cat+0xcc>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fc2e:	c8 01       	movw	r24, r16
    fc30:	0e 94 73 30 	call	0x60e6	; 0x60e6 <trim_tail>
        size += strlen(line);
    fc34:	f8 01       	movw	r30, r16
    fc36:	01 90       	ld	r0, Z+
    fc38:	00 20       	and	r0, r0
    fc3a:	e9 f7       	brne	.-6      	; 0xfc36 <cat+0x56>
    fc3c:	31 97       	sbiw	r30, 0x01	; 1
    fc3e:	e0 1b       	sub	r30, r16
    fc40:	f1 0b       	sbc	r31, r17
    fc42:	ce 0e       	add	r12, r30
    fc44:	df 1e       	adc	r13, r31
        puts(line);
    fc46:	c8 01       	movw	r24, r16
    fc48:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <puts>
        if(dopage)
    fc4c:	81 14       	cp	r8, r1
    fc4e:	91 04       	cpc	r9, r1
    fc50:	49 f4       	brne	.+18     	; 0xfc64 <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fc52:	a7 01       	movw	r20, r14
    fc54:	6e ef       	ldi	r22, 0xFE	; 254
    fc56:	70 e0       	ldi	r23, 0x00	; 0
    fc58:	c8 01       	movw	r24, r16
    fc5a:	0e 94 a5 74 	call	0xe94a	; 0xe94a <fgets>
    fc5e:	89 2b       	or	r24, r25
    fc60:	31 f7       	brne	.-52     	; 0xfc2e <cat+0x4e>
    fc62:	06 c0       	rjmp	.+12     	; 0xfc70 <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fc64:	c5 01       	movw	r24, r10
    fc66:	01 96       	adiw	r24, 0x01	; 1
    fc68:	83 df       	rcall	.-250    	; 0xfb70 <testpage>
    fc6a:	5c 01       	movw	r10, r24
            if(count < 0)
    fc6c:	97 ff       	sbrs	r25, 7
    fc6e:	f1 cf       	rjmp	.-30     	; 0xfc52 <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fc70:	8e e6       	ldi	r24, 0x6E	; 110
    fc72:	9d e0       	ldi	r25, 0x0D	; 13
    fc74:	a0 e0       	ldi	r26, 0x00	; 0
    fc76:	ed b7       	in	r30, 0x3d	; 61
    fc78:	fe b7       	in	r31, 0x3e	; 62
    fc7a:	81 83       	std	Z+1, r24	; 0x01
    fc7c:	92 83       	std	Z+2, r25	; 0x02
    fc7e:	a3 83       	std	Z+3, r26	; 0x03
    fc80:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fclose(fp);
    fc84:	c7 01       	movw	r24, r14
    fc86:	f3 dc       	rcall	.-1562   	; 0xf66e <fclose>
    printf("%ld bytes\n", (long)size);
    fc88:	0d 2c       	mov	r0, r13
    fc8a:	00 0c       	add	r0, r0
    fc8c:	ee 08       	sbc	r14, r14
    fc8e:	ff 08       	sbc	r15, r15
    fc90:	ed b7       	in	r30, 0x3d	; 61
    fc92:	fe b7       	in	r31, 0x3e	; 62
    fc94:	c4 82       	std	Z+4, r12	; 0x04
    fc96:	d5 82       	std	Z+5, r13	; 0x05
    fc98:	e6 82       	std	Z+6, r14	; 0x06
    fc9a:	f7 82       	std	Z+7, r15	; 0x07
    fc9c:	83 e6       	ldi	r24, 0x63	; 99
    fc9e:	9d e0       	ldi	r25, 0x0D	; 13
    fca0:	a0 e0       	ldi	r26, 0x00	; 0
    fca2:	81 83       	std	Z+1, r24	; 0x01
    fca4:	92 83       	std	Z+2, r25	; 0x02
    fca6:	a3 83       	std	Z+3, r26	; 0x03
    fca8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    return(size);
}
    fcac:	c7 01       	movw	r24, r14
    fcae:	b6 01       	movw	r22, r12
    fcb0:	c9 5f       	subi	r28, 0xF9	; 249
    fcb2:	de 4f       	sbci	r29, 0xFE	; 254
    fcb4:	ec e0       	ldi	r30, 0x0C	; 12
    fcb6:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

0000fcba <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fcba:	4f 92       	push	r4
    fcbc:	5f 92       	push	r5
    fcbe:	6f 92       	push	r6
    fcc0:	7f 92       	push	r7
    fcc2:	af 92       	push	r10
    fcc4:	bf 92       	push	r11
    fcc6:	cf 92       	push	r12
    fcc8:	df 92       	push	r13
    fcca:	ef 92       	push	r14
    fccc:	ff 92       	push	r15
    fcce:	0f 93       	push	r16
    fcd0:	1f 93       	push	r17
    fcd2:	cf 93       	push	r28
    fcd4:	df 93       	push	r29
    fcd6:	cd b7       	in	r28, 0x3d	; 61
    fcd8:	de b7       	in	r29, 0x3e	; 62
    fcda:	c9 54       	subi	r28, 0x49	; 73
    fcdc:	d1 09       	sbc	r29, r1
    fcde:	0f b6       	in	r0, 0x3f	; 63
    fce0:	f8 94       	cli
    fce2:	de bf       	out	0x3e, r29	; 62
    fce4:	0f be       	out	0x3f, r0	; 63
    fce6:	cd bf       	out	0x3d, r28	; 61
    fce8:	8c 01       	movw	r16, r24
    fcea:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fcec:	be 01       	movw	r22, r28
    fcee:	62 5f       	subi	r22, 0xF2	; 242
    fcf0:	7f 4f       	sbci	r23, 0xFF	; 255
    fcf2:	18 d9       	rcall	.-3536   	; 0xef24 <stat>
    fcf4:	01 96       	adiw	r24, 0x01	; 1
    fcf6:	79 f4       	brne	.+30     	; 0xfd16 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fcf8:	ed b7       	in	r30, 0x3d	; 61
    fcfa:	fe b7       	in	r31, 0x3e	; 62
    fcfc:	15 83       	std	Z+5, r17	; 0x05
    fcfe:	04 83       	std	Z+4, r16	; 0x04
    fd00:	83 ed       	ldi	r24, 0xD3	; 211
    fd02:	9c e0       	ldi	r25, 0x0C	; 12
    fd04:	a0 e0       	ldi	r26, 0x00	; 0
    fd06:	81 83       	std	Z+1, r24	; 0x01
    fd08:	92 83       	std	Z+2, r25	; 0x02
    fd0a:	a3 83       	std	Z+3, r26	; 0x03
    fd0c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(0);
    fd10:	80 e0       	ldi	r24, 0x00	; 0
    fd12:	90 e0       	ldi	r25, 0x00	; 0
    fd14:	77 c0       	rjmp	.+238    	; 0xfe04 <ls_info+0x14a>
    }

    if(!verbose)
    fd16:	ef 28       	or	r14, r15
    fd18:	81 f4       	brne	.+32     	; 0xfd3a <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fd1a:	c8 01       	movw	r24, r16
    fd1c:	0e 94 5e 75 	call	0xeabc	; 0xeabc <basename>
    fd20:	ed b7       	in	r30, 0x3d	; 61
    fd22:	fe b7       	in	r31, 0x3e	; 62
    fd24:	95 83       	std	Z+5, r25	; 0x05
    fd26:	84 83       	std	Z+4, r24	; 0x04
    fd28:	8f ec       	ldi	r24, 0xCF	; 207
    fd2a:	9c e0       	ldi	r25, 0x0C	; 12
    fd2c:	a0 e0       	ldi	r26, 0x00	; 0
    fd2e:	81 83       	std	Z+1, r24	; 0x01
    fd30:	92 83       	std	Z+2, r25	; 0x02
    fd32:	a3 83       	std	Z+3, r26	; 0x03
    fd34:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    fd38:	63 c0       	rjmp	.+198    	; 0xfe00 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fd3a:	4e 88       	ldd	r4, Y+22	; 0x16
    fd3c:	5f 88       	ldd	r5, Y+23	; 0x17
    fd3e:	68 8c       	ldd	r6, Y+24	; 0x18
    fd40:	79 8c       	ldd	r7, Y+25	; 0x19
    fd42:	d3 01       	movw	r26, r6
    fd44:	c2 01       	movw	r24, r4
    fd46:	88 27       	eor	r24, r24
    fd48:	90 7f       	andi	r25, 0xF0	; 240
    fd4a:	aa 27       	eor	r26, r26
    fd4c:	bb 27       	eor	r27, r27
    fd4e:	81 15       	cp	r24, r1
    fd50:	90 44       	sbci	r25, 0x40	; 64
    fd52:	a1 05       	cpc	r26, r1
    fd54:	b1 05       	cpc	r27, r1
    fd56:	11 f4       	brne	.+4      	; 0xfd5c <ls_info+0xa2>
        *p++ = 'd';
    fd58:	84 e6       	ldi	r24, 0x64	; 100
    fd5a:	01 c0       	rjmp	.+2      	; 0xfd5e <ls_info+0xa4>
    else
        *p++ = '-';
    fd5c:	8d e2       	ldi	r24, 0x2D	; 45
    fd5e:	8e af       	std	Y+62, r24	; 0x3e
    fd60:	fe 01       	movw	r30, r28
    fd62:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fd64:	e1 2c       	mov	r14, r1
    fd66:	ff 24       	eor	r15, r15
    fd68:	f3 94       	inc	r15
    fd6a:	20 e0       	ldi	r18, 0x00	; 0
    fd6c:	30 e0       	ldi	r19, 0x00	; 0
    fd6e:	be 2e       	mov	r11, r30
    fd70:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fd72:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fd74:	53 e0       	ldi	r21, 0x03	; 3
    fd76:	c5 2e       	mov	r12, r21
    fd78:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fd7a:	c7 01       	movw	r24, r14
    fd7c:	a0 e0       	ldi	r26, 0x00	; 0
    fd7e:	b0 e0       	ldi	r27, 0x00	; 0
    fd80:	84 21       	and	r24, r4
    fd82:	95 21       	and	r25, r5
    fd84:	a6 21       	and	r26, r6
    fd86:	b7 21       	and	r27, r7
    fd88:	89 2b       	or	r24, r25
    fd8a:	8a 2b       	or	r24, r26
    fd8c:	8b 2b       	or	r24, r27
    fd8e:	51 f0       	breq	.+20     	; 0xfda4 <ls_info+0xea>
            *p++ = cm[ i % 3];
    fd90:	c9 01       	movw	r24, r18
    fd92:	b6 01       	movw	r22, r12
    fd94:	0e 94 6c e2 	call	0x1c4d8	; 0x1c4d8 <__divmodhi4>
    fd98:	dc 01       	movw	r26, r24
    fd9a:	a6 54       	subi	r26, 0x46	; 70
    fd9c:	b4 4f       	sbci	r27, 0xF4	; 244
    fd9e:	8c 91       	ld	r24, X
    fda0:	81 83       	std	Z+1, r24	; 0x01
    fda2:	01 c0       	rjmp	.+2      	; 0xfda6 <ls_info+0xec>
        else
            *p++ = '-';
    fda4:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fda6:	f6 94       	lsr	r15
    fda8:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fdaa:	2f 5f       	subi	r18, 0xFF	; 255
    fdac:	3f 4f       	sbci	r19, 0xFF	; 255
    fdae:	31 96       	adiw	r30, 0x01	; 1
    fdb0:	29 30       	cpi	r18, 0x09	; 9
    fdb2:	31 05       	cpc	r19, r1
    fdb4:	11 f7       	brne	.-60     	; 0xfd7a <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fdb6:	29 96       	adiw	r28, 0x09	; 9
    fdb8:	1f ae       	std	Y+63, r1	; 0x3f
    fdba:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fdbc:	4e a0       	ldd	r4, Y+38	; 0x26
    fdbe:	5f a0       	ldd	r5, Y+39	; 0x27
    fdc0:	68 a4       	ldd	r6, Y+40	; 0x28
    fdc2:	79 a4       	ldd	r7, Y+41	; 0x29
    fdc4:	6e a9       	ldd	r22, Y+54	; 0x36
    fdc6:	7f a9       	ldd	r23, Y+55	; 0x37
    fdc8:	88 ad       	ldd	r24, Y+56	; 0x38
    fdca:	99 ad       	ldd	r25, Y+57	; 0x39
    fdcc:	0e 94 39 75 	call	0xea72	; 0xea72 <mctime>
    fdd0:	7c 01       	movw	r14, r24
    fdd2:	c8 01       	movw	r24, r16
    fdd4:	0e 94 5e 75 	call	0xeabc	; 0xeabc <basename>
    fdd8:	ed b7       	in	r30, 0x3d	; 61
    fdda:	fe b7       	in	r31, 0x3e	; 62
    fddc:	95 87       	std	Z+13, r25	; 0x0d
    fdde:	84 87       	std	Z+12, r24	; 0x0c
    fde0:	f3 86       	std	Z+11, r15	; 0x0b
    fde2:	e2 86       	std	Z+10, r14	; 0x0a
    fde4:	46 82       	std	Z+6, r4	; 0x06
    fde6:	57 82       	std	Z+7, r5	; 0x07
    fde8:	60 86       	std	Z+8, r6	; 0x08
    fdea:	71 86       	std	Z+9, r7	; 0x09
    fdec:	b4 82       	std	Z+4, r11	; 0x04
    fdee:	a5 82       	std	Z+5, r10	; 0x05
    fdf0:	85 eb       	ldi	r24, 0xB5	; 181
    fdf2:	9c e0       	ldi	r25, 0x0C	; 12
    fdf4:	a0 e0       	ldi	r26, 0x00	; 0
    fdf6:	81 83       	std	Z+1, r24	; 0x01
    fdf8:	92 83       	std	Z+2, r25	; 0x02
    fdfa:	a3 83       	std	Z+3, r26	; 0x03
    fdfc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fe00:	81 e0       	ldi	r24, 0x01	; 1
    fe02:	90 e0       	ldi	r25, 0x00	; 0
}
    fe04:	c7 5b       	subi	r28, 0xB7	; 183
    fe06:	df 4f       	sbci	r29, 0xFF	; 255
    fe08:	0f b6       	in	r0, 0x3f	; 63
    fe0a:	f8 94       	cli
    fe0c:	de bf       	out	0x3e, r29	; 62
    fe0e:	0f be       	out	0x3f, r0	; 63
    fe10:	cd bf       	out	0x3d, r28	; 61
    fe12:	df 91       	pop	r29
    fe14:	cf 91       	pop	r28
    fe16:	1f 91       	pop	r17
    fe18:	0f 91       	pop	r16
    fe1a:	ff 90       	pop	r15
    fe1c:	ef 90       	pop	r14
    fe1e:	df 90       	pop	r13
    fe20:	cf 90       	pop	r12
    fe22:	bf 90       	pop	r11
    fe24:	af 90       	pop	r10
    fe26:	7f 90       	pop	r7
    fe28:	6f 90       	pop	r6
    fe2a:	5f 90       	pop	r5
    fe2c:	4f 90       	pop	r4
    fe2e:	08 95       	ret

0000fe30 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
    fe30:	2f 92       	push	r2
    fe32:	3f 92       	push	r3
    fe34:	4f 92       	push	r4
    fe36:	5f 92       	push	r5
    fe38:	6f 92       	push	r6
    fe3a:	8f 92       	push	r8
    fe3c:	9f 92       	push	r9
    fe3e:	af 92       	push	r10
    fe40:	bf 92       	push	r11
    fe42:	cf 92       	push	r12
    fe44:	df 92       	push	r13
    fe46:	ef 92       	push	r14
    fe48:	ff 92       	push	r15
    fe4a:	0f 93       	push	r16
    fe4c:	1f 93       	push	r17
    fe4e:	cf 93       	push	r28
    fe50:	df 93       	push	r29
    fe52:	cd b7       	in	r28, 0x3d	; 61
    fe54:	de b7       	in	r29, 0x3e	; 62
    fe56:	c8 53       	subi	r28, 0x38	; 56
    fe58:	d1 40       	sbci	r29, 0x01	; 1
    fe5a:	0f b6       	in	r0, 0x3f	; 63
    fe5c:	f8 94       	cli
    fe5e:	de bf       	out	0x3e, r29	; 62
    fe60:	0f be       	out	0x3f, r0	; 63
    fe62:	cd bf       	out	0x3d, r28	; 61
    fe64:	7c 01       	movw	r14, r24
    fe66:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    fe68:	1e 82       	std	Y+6, r1	; 0x06
    fe6a:	8e 01       	movw	r16, r28
    fe6c:	0a 5f       	subi	r16, 0xFA	; 250
    fe6e:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    fe70:	00 97       	sbiw	r24, 0x00	; 0
    fe72:	51 f4       	brne	.+20     	; 0xfe88 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    fe74:	6f ef       	ldi	r22, 0xFF	; 255
    fe76:	70 e0       	ldi	r23, 0x00	; 0
    fe78:	c8 01       	movw	r24, r16
    fe7a:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <getcwd>
    fe7e:	89 2b       	or	r24, r25
    fe80:	91 f4       	brne	.+36     	; 0xfea6 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
    fe82:	84 e9       	ldi	r24, 0x94	; 148
    fe84:	9c e0       	ldi	r25, 0x0C	; 12
    fe86:	6a c0       	rjmp	.+212    	; 0xff5c <__DATA_REGION_LENGTH__+0x5c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    fe88:	fc 01       	movw	r30, r24
    fe8a:	80 81       	ld	r24, Z
    fe8c:	88 23       	and	r24, r24
    fe8e:	91 f3       	breq	.-28     	; 0xfe74 <ls+0x44>
    fe90:	6d ef       	ldi	r22, 0xFD	; 253
    fe92:	72 e1       	ldi	r23, 0x12	; 18
    fe94:	c7 01       	movw	r24, r14
    fe96:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
    fe9a:	89 2b       	or	r24, r25
    fe9c:	59 f7       	brne	.-42     	; 0xfe74 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    fe9e:	b7 01       	movw	r22, r14
    fea0:	c8 01       	movw	r24, r16
    fea2:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <strcpy>
    }
    len = strlen(fullpath);
    fea6:	f8 01       	movw	r30, r16
    fea8:	01 90       	ld	r0, Z+
    feaa:	00 20       	and	r0, r0
    feac:	e9 f7       	brne	.-6      	; 0xfea8 <ls+0x78>
    feae:	31 97       	sbiw	r30, 0x01	; 1
    feb0:	1f 01       	movw	r2, r30
    feb2:	20 1a       	sub	r2, r16
    feb4:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
    feb6:	be 01       	movw	r22, r28
    feb8:	69 5f       	subi	r22, 0xF9	; 249
    feba:	7e 4f       	sbci	r23, 0xFE	; 254
    febc:	c8 01       	movw	r24, r16
    febe:	32 d8       	rcall	.-3996   	; 0xef24 <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    fec0:	ed b7       	in	r30, 0x3d	; 61
    fec2:	fe b7       	in	r31, 0x3e	; 62
    fec4:	15 83       	std	Z+5, r17	; 0x05
    fec6:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
    fec8:	89 2b       	or	r24, r25
    feca:	59 f0       	breq	.+22     	; 0xfee2 <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    fecc:	8e e7       	ldi	r24, 0x7E	; 126
    fece:	9c e0       	ldi	r25, 0x0C	; 12
    fed0:	a0 e0       	ldi	r26, 0x00	; 0
    fed2:	81 83       	std	Z+1, r24	; 0x01
    fed4:	92 83       	std	Z+2, r25	; 0x02
    fed6:	a3 83       	std	Z+3, r26	; 0x03
    fed8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(-1);
    fedc:	8f ef       	ldi	r24, 0xFF	; 255
    fede:	9f ef       	ldi	r25, 0xFF	; 255
    fee0:	96 c0       	rjmp	.+300    	; 0x1000e <__EEPROM_REGION_LENGTH__+0xe>
    }
    printf("Listing:[%s]\n",fullpath);
    fee2:	80 e7       	ldi	r24, 0x70	; 112
    fee4:	9c e0       	ldi	r25, 0x0C	; 12
    fee6:	a0 e0       	ldi	r26, 0x00	; 0
    fee8:	81 83       	std	Z+1, r24	; 0x01
    feea:	92 83       	std	Z+2, r25	; 0x02
    feec:	a3 83       	std	Z+3, r26	; 0x03
    feee:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    switch (st.st_mode & S_IFMT)
    fef2:	c1 5f       	subi	r28, 0xF1	; 241
    fef4:	de 4f       	sbci	r29, 0xFE	; 254
    fef6:	88 81       	ld	r24, Y
    fef8:	99 81       	ldd	r25, Y+1	; 0x01
    fefa:	aa 81       	ldd	r26, Y+2	; 0x02
    fefc:	bb 81       	ldd	r27, Y+3	; 0x03
    fefe:	cf 50       	subi	r28, 0x0F	; 15
    ff00:	d1 40       	sbci	r29, 0x01	; 1
    ff02:	88 27       	eor	r24, r24
    ff04:	90 7f       	andi	r25, 0xF0	; 240
    ff06:	aa 27       	eor	r26, r26
    ff08:	bb 27       	eor	r27, r27
    ff0a:	81 15       	cp	r24, r1
    ff0c:	f0 e4       	ldi	r31, 0x40	; 64
    ff0e:	9f 07       	cpc	r25, r31
    ff10:	a1 05       	cpc	r26, r1
    ff12:	b1 05       	cpc	r27, r1
    ff14:	59 f0       	breq	.+22     	; 0xff2c <__DATA_REGION_LENGTH__+0x2c>
    ff16:	81 15       	cp	r24, r1
    ff18:	90 48       	sbci	r25, 0x80	; 128
    ff1a:	a1 05       	cpc	r26, r1
    ff1c:	b1 05       	cpc	r27, r1
    ff1e:	09 f0       	breq	.+2      	; 0xff22 <__DATA_REGION_LENGTH__+0x22>
    ff20:	67 c0       	rjmp	.+206    	; 0xfff0 <__DATA_REGION_LENGTH__+0xf0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
    ff22:	b4 01       	movw	r22, r8
    ff24:	c8 01       	movw	r24, r16
    ff26:	c9 de       	rcall	.-622    	; 0xfcba <ls_info>
    ff28:	7c 01       	movw	r14, r24
            break;
    ff2a:	64 c0       	rjmp	.+200    	; 0xfff4 <__DATA_REGION_LENGTH__+0xf4>
        case S_IFDIR:
            dirp = opendir(fullpath);
    ff2c:	c8 01       	movw	r24, r16
    ff2e:	0e 94 62 76 	call	0xecc4	; 0xecc4 <opendir>
    ff32:	5c 01       	movw	r10, r24
            if(!dirp)
    ff34:	89 2b       	or	r24, r25
    ff36:	81 f0       	breq	.+32     	; 0xff58 <__DATA_REGION_LENGTH__+0x58>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
    ff38:	e1 2c       	mov	r14, r1
    ff3a:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
    ff3c:	c8 01       	movw	r24, r16
    ff3e:	82 0d       	add	r24, r2
    ff40:	93 1d       	adc	r25, r3
    ff42:	c9 5c       	subi	r28, 0xC9	; 201
    ff44:	de 4f       	sbci	r29, 0xFE	; 254
    ff46:	99 83       	std	Y+1, r25	; 0x01
    ff48:	88 83       	st	Y, r24
    ff4a:	c7 53       	subi	r28, 0x37	; 55
    ff4c:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff4e:	8d e3       	ldi	r24, 0x3D	; 61
    ff50:	9c e0       	ldi	r25, 0x0C	; 12
    ff52:	2c 01       	movw	r4, r24
    ff54:	61 2c       	mov	r6, r1
    ff56:	25 c0       	rjmp	.+74     	; 0xffa2 <__DATA_REGION_LENGTH__+0xa2>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
    ff58:	80 e6       	ldi	r24, 0x60	; 96
    ff5a:	9c e0       	ldi	r25, 0x0C	; 12
    ff5c:	a0 e0       	ldi	r26, 0x00	; 0
    ff5e:	ed b7       	in	r30, 0x3d	; 61
    ff60:	fe b7       	in	r31, 0x3e	; 62
    ff62:	81 83       	std	Z+1, r24	; 0x01
    ff64:	92 83       	std	Z+2, r25	; 0x02
    ff66:	a3 83       	std	Z+3, r26	; 0x03
    ff68:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    ff6c:	b7 cf       	rjmp	.-146    	; 0xfedc <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
    ff6e:	f6 01       	movw	r30, r12
    ff70:	80 81       	ld	r24, Z
    ff72:	88 23       	and	r24, r24
    ff74:	e1 f0       	breq	.+56     	; 0xffae <__DATA_REGION_LENGTH__+0xae>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
    ff76:	f6 01       	movw	r30, r12
    ff78:	01 90       	ld	r0, Z+
    ff7a:	00 20       	and	r0, r0
    ff7c:	e9 f7       	brne	.-6      	; 0xff78 <__DATA_REGION_LENGTH__+0x78>
    ff7e:	31 97       	sbiw	r30, 0x01	; 1
    ff80:	ec 19       	sub	r30, r12
    ff82:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
    ff84:	e2 0d       	add	r30, r2
    ff86:	f3 1d       	adc	r31, r3
    ff88:	ef 3f       	cpi	r30, 0xFF	; 255
    ff8a:	f1 05       	cpc	r31, r1
    ff8c:	a1 f0       	breq	.+40     	; 0xffb6 <__DATA_REGION_LENGTH__+0xb6>
    ff8e:	9c f0       	brlt	.+38     	; 0xffb6 <__DATA_REGION_LENGTH__+0xb6>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff90:	ed b7       	in	r30, 0x3d	; 61
    ff92:	fe b7       	in	r31, 0x3e	; 62
    ff94:	d5 82       	std	Z+5, r13	; 0x05
    ff96:	c4 82       	std	Z+4, r12	; 0x04
    ff98:	41 82       	std	Z+1, r4	; 0x01
    ff9a:	52 82       	std	Z+2, r5	; 0x02
    ff9c:	63 82       	std	Z+3, r6	; 0x03
    ff9e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
    ffa2:	c5 01       	movw	r24, r10
    ffa4:	0e 94 80 76 	call	0xed00	; 0xed00 <readdir>
    ffa8:	6c 01       	movw	r12, r24
    ffaa:	89 2b       	or	r24, r25
    ffac:	01 f7       	brne	.-64     	; 0xff6e <__DATA_REGION_LENGTH__+0x6e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
    ffae:	c5 01       	movw	r24, r10
    ffb0:	0e 94 47 76 	call	0xec8e	; 0xec8e <closedir>
            break;
    ffb4:	1f c0       	rjmp	.+62     	; 0xfff4 <__DATA_REGION_LENGTH__+0xf4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
    ffb6:	66 ea       	ldi	r22, 0xA6	; 166
    ffb8:	78 e0       	ldi	r23, 0x08	; 8
    ffba:	c8 01       	movw	r24, r16
    ffbc:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
    ffc0:	89 2b       	or	r24, r25
    ffc2:	29 f4       	brne	.+10     	; 0xffce <__DATA_REGION_LENGTH__+0xce>
                {
                    strcat(fullpath,"/");
    ffc4:	66 ea       	ldi	r22, 0xA6	; 166
    ffc6:	78 e0       	ldi	r23, 0x08	; 8
    ffc8:	c8 01       	movw	r24, r16
    ffca:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>
                }
                strcat(fullpath,de->d_name);
    ffce:	b6 01       	movw	r22, r12
    ffd0:	c8 01       	movw	r24, r16
    ffd2:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>
                files +=ls_info(fullpath,verbose);
    ffd6:	b4 01       	movw	r22, r8
    ffd8:	c8 01       	movw	r24, r16
    ffda:	6f de       	rcall	.-802    	; 0xfcba <ls_info>
    ffdc:	e8 0e       	add	r14, r24
    ffde:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
    ffe0:	c9 5c       	subi	r28, 0xC9	; 201
    ffe2:	de 4f       	sbci	r29, 0xFE	; 254
    ffe4:	e8 81       	ld	r30, Y
    ffe6:	f9 81       	ldd	r31, Y+1	; 0x01
    ffe8:	c7 53       	subi	r28, 0x37	; 55
    ffea:	d1 40       	sbci	r29, 0x01	; 1
    ffec:	10 82       	st	Z, r1
    ffee:	d9 cf       	rjmp	.-78     	; 0xffa2 <__DATA_REGION_LENGTH__+0xa2>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
    fff0:	e1 2c       	mov	r14, r1
    fff2:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
    fff4:	ed b7       	in	r30, 0x3d	; 61
    fff6:	fe b7       	in	r31, 0x3e	; 62
    fff8:	f5 82       	std	Z+5, r15	; 0x05
    fffa:	e4 82       	std	Z+4, r14	; 0x04
    fffc:	82 e3       	ldi	r24, 0x32	; 50
    fffe:	9c e0       	ldi	r25, 0x0C	; 12
   10000:	a0 e0       	ldi	r26, 0x00	; 0
   10002:	81 83       	std	Z+1, r24	; 0x01
   10004:	92 83       	std	Z+2, r25	; 0x02
   10006:	a3 83       	std	Z+3, r26	; 0x03
   10008:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    return(files);
   1000c:	c7 01       	movw	r24, r14
}
   1000e:	c8 5c       	subi	r28, 0xC8	; 200
   10010:	de 4f       	sbci	r29, 0xFE	; 254
   10012:	0f b6       	in	r0, 0x3f	; 63
   10014:	f8 94       	cli
   10016:	de bf       	out	0x3e, r29	; 62
   10018:	0f be       	out	0x3f, r0	; 63
   1001a:	cd bf       	out	0x3d, r28	; 61
   1001c:	df 91       	pop	r29
   1001e:	cf 91       	pop	r28
   10020:	1f 91       	pop	r17
   10022:	0f 91       	pop	r16
   10024:	ff 90       	pop	r15
   10026:	ef 90       	pop	r14
   10028:	df 90       	pop	r13
   1002a:	cf 90       	pop	r12
   1002c:	bf 90       	pop	r11
   1002e:	af 90       	pop	r10
   10030:	9f 90       	pop	r9
   10032:	8f 90       	pop	r8
   10034:	6f 90       	pop	r6
   10036:	5f 90       	pop	r5
   10038:	4f 90       	pop	r4
   1003a:	3f 90       	pop	r3
   1003c:	2f 90       	pop	r2
   1003e:	08 95       	ret

00010040 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10040:	a7 e0       	ldi	r26, 0x07	; 7
   10042:	b1 e0       	ldi	r27, 0x01	; 1
   10044:	e6 e2       	ldi	r30, 0x26	; 38
   10046:	f0 e8       	ldi	r31, 0x80	; 128
   10048:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   1004c:	18 16       	cp	r1, r24
   1004e:	19 06       	cpc	r1, r25
   10050:	1c f0       	brlt	.+6      	; 0x10058 <posix_tests+0x18>
		return(0);
   10052:	80 e0       	ldi	r24, 0x00	; 0
   10054:	90 e0       	ldi	r25, 0x00	; 0
   10056:	dd c1       	rjmp	.+954    	; 0x10412 <posix_tests+0x3d2>

    ptr = argv[ind++];
   10058:	fb 01       	movw	r30, r22
   1005a:	c0 80       	ld	r12, Z
   1005c:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   1005e:	c1 14       	cp	r12, r1
   10060:	d1 04       	cpc	r13, r1
   10062:	b9 f3       	breq	.-18     	; 0x10052 <posix_tests+0x12>
   10064:	4b 01       	movw	r8, r22
   10066:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   10068:	6e eb       	ldi	r22, 0xBE	; 190
   1006a:	7b e0       	ldi	r23, 0x0B	; 11
   1006c:	c6 01       	movw	r24, r12
   1006e:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   10072:	89 2b       	or	r24, r25
   10074:	a1 f0       	breq	.+40     	; 0x1009e <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   10076:	f4 01       	movw	r30, r8
   10078:	c2 80       	ldd	r12, Z+2	; 0x02
   1007a:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1007c:	c1 14       	cp	r12, r1
   1007e:	d1 04       	cpc	r13, r1
   10080:	21 f4       	brne	.+8      	; 0x1008a <posix_tests+0x4a>
        {
            posix_help(1);
   10082:	81 e0       	ldi	r24, 0x01	; 1
   10084:	90 e0       	ldi	r25, 0x00	; 0
   10086:	75 dc       	rcall	.-1814   	; 0xf972 <posix_help>
   10088:	45 c1       	rjmp	.+650    	; 0x10314 <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1008a:	6d e7       	ldi	r22, 0x7D	; 125
   1008c:	76 e1       	ldi	r23, 0x16	; 22
   1008e:	c6 01       	movw	r24, r12
   10090:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   10094:	89 2b       	or	r24, r25
   10096:	a9 f7       	brne	.-22     	; 0x10082 <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10098:	02 e0       	ldi	r16, 0x02	; 2
   1009a:	10 e0       	ldi	r17, 0x00	; 0
   1009c:	02 c0       	rjmp	.+4      	; 0x100a2 <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   1009e:	01 e0       	ldi	r16, 0x01	; 1
   100a0:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   100a2:	78 01       	movw	r14, r16
   100a4:	ff ef       	ldi	r31, 0xFF	; 255
   100a6:	ef 1a       	sub	r14, r31
   100a8:	ff 0a       	sbc	r15, r31
   100aa:	93 01       	movw	r18, r6
   100ac:	a7 01       	movw	r20, r14
   100ae:	64 ec       	ldi	r22, 0xC4	; 196
   100b0:	7b e0       	ldi	r23, 0x0B	; 11
   100b2:	c6 01       	movw	r24, r12
   100b4:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   100b8:	89 2b       	or	r24, r25
   100ba:	99 f1       	breq	.+102    	; 0x10122 <posix_tests+0xe2>
   100bc:	78 01       	movw	r14, r16
   100be:	ee 0c       	add	r14, r14
   100c0:	ff 1c       	adc	r15, r15
   100c2:	e8 0c       	add	r14, r8
   100c4:	f9 1c       	adc	r15, r9
   100c6:	57 01       	movw	r10, r14
   100c8:	47 01       	movw	r8, r14
   100ca:	68 01       	movw	r12, r16
   100cc:	41 2c       	mov	r4, r1
   100ce:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   100d0:	c6 14       	cp	r12, r6
   100d2:	d7 04       	cpc	r13, r7
   100d4:	14 f5       	brge	.+68     	; 0x1011a <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   100d6:	68 ec       	ldi	r22, 0xC8	; 200
   100d8:	7b e0       	ldi	r23, 0x0B	; 11
   100da:	f4 01       	movw	r30, r8
   100dc:	81 91       	ld	r24, Z+
   100de:	91 91       	ld	r25, Z+
   100e0:	4f 01       	movw	r8, r30
   100e2:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   100e6:	89 2b       	or	r24, r25
   100e8:	19 f0       	breq	.+6      	; 0x100f0 <posix_tests+0xb0>
                page = 1;
   100ea:	44 24       	eor	r4, r4
   100ec:	43 94       	inc	r4
   100ee:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   100f0:	ff ef       	ldi	r31, 0xFF	; 255
   100f2:	cf 1a       	sub	r12, r31
   100f4:	df 0a       	sbc	r13, r31
   100f6:	ec cf       	rjmp	.-40     	; 0x100d0 <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   100f8:	68 ec       	ldi	r22, 0xC8	; 200
   100fa:	7b e0       	ldi	r23, 0x0B	; 11
   100fc:	f5 01       	movw	r30, r10
   100fe:	81 91       	ld	r24, Z+
   10100:	91 91       	ld	r25, Z+
   10102:	5f 01       	movw	r10, r30
   10104:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   10108:	89 2b       	or	r24, r25
   1010a:	29 f4       	brne	.+10     	; 0x10116 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   1010c:	b2 01       	movw	r22, r4
   1010e:	f7 01       	movw	r30, r14
   10110:	80 81       	ld	r24, Z
   10112:	91 81       	ldd	r25, Z+1	; 0x01
   10114:	65 dd       	rcall	.-1334   	; 0xfbe0 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10116:	0f 5f       	subi	r16, 0xFF	; 255
   10118:	1f 4f       	sbci	r17, 0xFF	; 255
   1011a:	06 15       	cp	r16, r6
   1011c:	17 05       	cpc	r17, r7
   1011e:	64 f3       	brlt	.-40     	; 0x100f8 <posix_tests+0xb8>
   10120:	f9 c0       	rjmp	.+498    	; 0x10314 <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10122:	58 01       	movw	r10, r16
   10124:	f2 e0       	ldi	r31, 0x02	; 2
   10126:	af 0e       	add	r10, r31
   10128:	b1 1c       	adc	r11, r1
   1012a:	93 01       	movw	r18, r6
   1012c:	a5 01       	movw	r20, r10
   1012e:	6b ec       	ldi	r22, 0xCB	; 203
   10130:	7b e0       	ldi	r23, 0x0B	; 11
   10132:	c6 01       	movw	r24, r12
   10134:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   10138:	89 2b       	or	r24, r25
   1013a:	69 f0       	breq	.+26     	; 0x10156 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   1013c:	f8 01       	movw	r30, r16
   1013e:	ee 0f       	add	r30, r30
   10140:	ff 1f       	adc	r31, r31
   10142:	e8 0d       	add	r30, r8
   10144:	f9 1d       	adc	r31, r9
   10146:	62 81       	ldd	r22, Z+2	; 0x02
   10148:	73 81       	ldd	r23, Z+3	; 0x03
   1014a:	80 81       	ld	r24, Z
   1014c:	91 81       	ldd	r25, Z+1	; 0x01
   1014e:	32 dc       	rcall	.-1948   	; 0xf9b4 <copy>
   10150:	97 ff       	sbrs	r25, 7
   10152:	e0 c0       	rjmp	.+448    	; 0x10314 <posix_tests+0x2d4>
   10154:	5c c1       	rjmp	.+696    	; 0x1040e <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10156:	93 01       	movw	r18, r6
   10158:	a7 01       	movw	r20, r14
   1015a:	60 ed       	ldi	r22, 0xD0	; 208
   1015c:	7b e0       	ldi	r23, 0x0B	; 11
   1015e:	c6 01       	movw	r24, r12
   10160:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   10164:	89 2b       	or	r24, r25
   10166:	b9 f0       	breq	.+46     	; 0x10196 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   10168:	78 01       	movw	r14, r16
   1016a:	ee 0c       	add	r14, r14
   1016c:	ff 1c       	adc	r15, r15
   1016e:	e8 0c       	add	r14, r8
   10170:	f9 1c       	adc	r15, r9
   10172:	f7 01       	movw	r30, r14
   10174:	80 81       	ld	r24, Z
   10176:	91 81       	ldd	r25, Z+1	; 0x01
   10178:	0e 94 6c 75 	call	0xead8	; 0xead8 <chdir>
   1017c:	89 2b       	or	r24, r25
   1017e:	09 f4       	brne	.+2      	; 0x10182 <posix_tests+0x142>
   10180:	c9 c0       	rjmp	.+402    	; 0x10314 <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   10182:	f7 01       	movw	r30, r14
   10184:	80 81       	ld	r24, Z
   10186:	91 81       	ldd	r25, Z+1	; 0x01
   10188:	ed b7       	in	r30, 0x3d	; 61
   1018a:	fe b7       	in	r31, 0x3e	; 62
   1018c:	95 83       	std	Z+5, r25	; 0x05
   1018e:	84 83       	std	Z+4, r24	; 0x04
   10190:	89 ee       	ldi	r24, 0xE9	; 233
   10192:	9d e0       	ldi	r25, 0x0D	; 13
   10194:	36 c1       	rjmp	.+620    	; 0x10402 <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10196:	68 ed       	ldi	r22, 0xD8	; 216
   10198:	78 e0       	ldi	r23, 0x08	; 8
   1019a:	c6 01       	movw	r24, r12
   1019c:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   101a0:	89 2b       	or	r24, r25
   101a2:	09 f4       	brne	.+2      	; 0x101a6 <posix_tests+0x166>
   101a4:	40 c0       	rjmp	.+128    	; 0x10226 <posix_tests+0x1e6>
   101a6:	78 01       	movw	r14, r16
   101a8:	ee 0c       	add	r14, r14
   101aa:	ff 1c       	adc	r15, r15
   101ac:	e8 0c       	add	r14, r8
   101ae:	f9 1c       	adc	r15, r9
   101b0:	c1 2c       	mov	r12, r1
   101b2:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   101b4:	81 ed       	ldi	r24, 0xD1	; 209
   101b6:	9d e0       	ldi	r25, 0x0D	; 13
   101b8:	4c 01       	movw	r8, r24
   101ba:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   101bc:	06 15       	cp	r16, r6
   101be:	17 05       	cpc	r17, r7
   101c0:	34 f5       	brge	.+76     	; 0x1020e <posix_tests+0x1ce>
        {
			if(!argv[i])
   101c2:	f7 01       	movw	r30, r14
   101c4:	80 81       	ld	r24, Z
   101c6:	91 81       	ldd	r25, Z+1	; 0x01
   101c8:	00 97       	sbiw	r24, 0x00	; 0
   101ca:	51 f4       	brne	.+20     	; 0x101e0 <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   101cc:	ed b7       	in	r30, 0x3d	; 61
   101ce:	fe b7       	in	r31, 0x3e	; 62
   101d0:	15 83       	std	Z+5, r17	; 0x05
   101d2:	04 83       	std	Z+4, r16	; 0x04
   101d4:	81 82       	std	Z+1, r8	; 0x01
   101d6:	92 82       	std	Z+2, r9	; 0x02
   101d8:	a3 82       	std	Z+3, r10	; 0x03
   101da:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
				continue;
   101de:	11 c0       	rjmp	.+34     	; 0x10202 <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   101e0:	63 ed       	ldi	r22, 0xD3	; 211
   101e2:	7b e0       	ldi	r23, 0x0B	; 11
   101e4:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   101e8:	89 2b       	or	r24, r25
   101ea:	59 f4       	brne	.+22     	; 0x10202 <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   101ec:	61 e0       	ldi	r22, 0x01	; 1
   101ee:	70 e0       	ldi	r23, 0x00	; 0
   101f0:	f7 01       	movw	r30, r14
   101f2:	80 81       	ld	r24, Z
   101f4:	91 81       	ldd	r25, Z+1	; 0x01
   101f6:	1c de       	rcall	.-968    	; 0xfe30 <ls>
   101f8:	97 fd       	sbrc	r25, 7
   101fa:	09 c1       	rjmp	.+530    	; 0x1040e <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   101fc:	ff ef       	ldi	r31, 0xFF	; 255
   101fe:	cf 1a       	sub	r12, r31
   10200:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10202:	0f 5f       	subi	r16, 0xFF	; 255
   10204:	1f 4f       	sbci	r17, 0xFF	; 255
   10206:	82 e0       	ldi	r24, 0x02	; 2
   10208:	e8 0e       	add	r14, r24
   1020a:	f1 1c       	adc	r15, r1
   1020c:	d7 cf       	rjmp	.-82     	; 0x101bc <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   1020e:	c1 14       	cp	r12, r1
   10210:	d1 04       	cpc	r13, r1
   10212:	09 f0       	breq	.+2      	; 0x10216 <posix_tests+0x1d6>
   10214:	7f c0       	rjmp	.+254    	; 0x10314 <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   10216:	61 e0       	ldi	r22, 0x01	; 1
   10218:	70 e0       	ldi	r23, 0x00	; 0
   1021a:	8d e2       	ldi	r24, 0x2D	; 45
   1021c:	9c e0       	ldi	r25, 0x0C	; 12
   1021e:	08 de       	rcall	.-1008   	; 0xfe30 <ls>
   10220:	97 ff       	sbrs	r25, 7
   10222:	78 c0       	rjmp	.+240    	; 0x10314 <posix_tests+0x2d4>
   10224:	f4 c0       	rjmp	.+488    	; 0x1040e <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10226:	93 01       	movw	r18, r6
   10228:	a7 01       	movw	r20, r14
   1022a:	66 ed       	ldi	r22, 0xD6	; 214
   1022c:	7b e0       	ldi	r23, 0x0B	; 11
   1022e:	c6 01       	movw	r24, r12
   10230:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   10234:	89 2b       	or	r24, r25
   10236:	79 f1       	breq	.+94     	; 0x10296 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10238:	e6 14       	cp	r14, r6
   1023a:	f7 04       	cpc	r15, r7
   1023c:	7c f4       	brge	.+30     	; 0x1025c <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   1023e:	ee 0c       	add	r14, r14
   10240:	ff 1c       	adc	r15, r15
   10242:	f4 01       	movw	r30, r8
   10244:	ee 0d       	add	r30, r14
   10246:	ff 1d       	adc	r31, r15
   10248:	48 e0       	ldi	r20, 0x08	; 8
   1024a:	50 e0       	ldi	r21, 0x00	; 0
   1024c:	60 e0       	ldi	r22, 0x00	; 0
   1024e:	70 e0       	ldi	r23, 0x00	; 0
   10250:	80 81       	ld	r24, Z
   10252:	91 81       	ldd	r25, Z+1	; 0x01
   10254:	0e 94 8f 45 	call	0x8b1e	; 0x8b1e <strtol>
   10258:	ab 01       	movw	r20, r22
   1025a:	02 c0       	rjmp	.+4      	; 0x10260 <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   1025c:	4f ef       	ldi	r20, 0xFF	; 255
   1025e:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10260:	78 01       	movw	r14, r16
   10262:	ee 0c       	add	r14, r14
   10264:	ff 1c       	adc	r15, r15
   10266:	e8 0c       	add	r14, r8
   10268:	f9 1c       	adc	r15, r9
   1026a:	05 2e       	mov	r0, r21
   1026c:	00 0c       	add	r0, r0
   1026e:	66 0b       	sbc	r22, r22
   10270:	77 0b       	sbc	r23, r23
   10272:	f7 01       	movw	r30, r14
   10274:	80 81       	ld	r24, Z
   10276:	91 81       	ldd	r25, Z+1	; 0x01
   10278:	0e 94 d9 75 	call	0xebb2	; 0xebb2 <mkdir>
   1027c:	89 2b       	or	r24, r25
   1027e:	09 f4       	brne	.+2      	; 0x10282 <posix_tests+0x242>
   10280:	49 c0       	rjmp	.+146    	; 0x10314 <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   10282:	f7 01       	movw	r30, r14
   10284:	80 81       	ld	r24, Z
   10286:	91 81       	ldd	r25, Z+1	; 0x01
   10288:	ed b7       	in	r30, 0x3d	; 61
   1028a:	fe b7       	in	r31, 0x3e	; 62
   1028c:	95 83       	std	Z+5, r25	; 0x05
   1028e:	84 83       	std	Z+4, r24	; 0x04
   10290:	80 ec       	ldi	r24, 0xC0	; 192
   10292:	9d e0       	ldi	r25, 0x0D	; 13
   10294:	b6 c0       	rjmp	.+364    	; 0x10402 <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10296:	93 01       	movw	r18, r6
   10298:	a7 01       	movw	r20, r14
   1029a:	6c ed       	ldi	r22, 0xDC	; 220
   1029c:	7b e0       	ldi	r23, 0x0B	; 11
   1029e:	c6 01       	movw	r24, r12
   102a0:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   102a4:	89 2b       	or	r24, r25
   102a6:	71 f0       	breq	.+28     	; 0x102c4 <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   102a8:	00 0f       	add	r16, r16
   102aa:	11 1f       	adc	r17, r17
   102ac:	f4 01       	movw	r30, r8
   102ae:	e0 0f       	add	r30, r16
   102b0:	f1 1f       	adc	r31, r17
   102b2:	80 81       	ld	r24, Z
   102b4:	91 81       	ldd	r25, Z+1	; 0x01
   102b6:	0e 94 ed 45 	call	0x8bda	; 0x8bda <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   102ba:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   102be:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   102c2:	28 c0       	rjmp	.+80     	; 0x10314 <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   102c4:	93 01       	movw	r18, r6
   102c6:	a8 01       	movw	r20, r16
   102c8:	61 ee       	ldi	r22, 0xE1	; 225
   102ca:	7b e0       	ldi	r23, 0x0B	; 11
   102cc:	c6 01       	movw	r24, r12
   102ce:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   102d2:	89 2b       	or	r24, r25
   102d4:	11 f1       	breq	.+68     	; 0x1031a <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   102d6:	6e ef       	ldi	r22, 0xFE	; 254
   102d8:	70 e0       	ldi	r23, 0x00	; 0
   102da:	ce 01       	movw	r24, r28
   102dc:	08 96       	adiw	r24, 0x08	; 8
   102de:	0e 94 b4 75 	call	0xeb68	; 0xeb68 <getcwd>
		if(ptr == NULL)
   102e2:	00 97       	sbiw	r24, 0x00	; 0
   102e4:	59 f4       	brne	.+22     	; 0x102fc <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   102e6:	84 eb       	ldi	r24, 0xB4	; 180
   102e8:	9d e0       	ldi	r25, 0x0D	; 13
   102ea:	a0 e0       	ldi	r26, 0x00	; 0
   102ec:	ed b7       	in	r30, 0x3d	; 61
   102ee:	fe b7       	in	r31, 0x3e	; 62
   102f0:	81 83       	std	Z+1, r24	; 0x01
   102f2:	92 83       	std	Z+2, r25	; 0x02
   102f4:	a3 83       	std	Z+3, r26	; 0x03
   102f6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   102fa:	89 c0       	rjmp	.+274    	; 0x1040e <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   102fc:	ed b7       	in	r30, 0x3d	; 61
   102fe:	fe b7       	in	r31, 0x3e	; 62
   10300:	95 83       	std	Z+5, r25	; 0x05
   10302:	84 83       	std	Z+4, r24	; 0x04
   10304:	80 eb       	ldi	r24, 0xB0	; 176
   10306:	9d e0       	ldi	r25, 0x0D	; 13
   10308:	a0 e0       	ldi	r26, 0x00	; 0
   1030a:	81 83       	std	Z+1, r24	; 0x01
   1030c:	92 83       	std	Z+2, r25	; 0x02
   1030e:	a3 83       	std	Z+3, r26	; 0x03
   10310:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(1);
   10314:	81 e0       	ldi	r24, 0x01	; 1
   10316:	90 e0       	ldi	r25, 0x00	; 0
   10318:	7c c0       	rjmp	.+248    	; 0x10412 <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1031a:	93 01       	movw	r18, r6
   1031c:	a5 01       	movw	r20, r10
   1031e:	65 ee       	ldi	r22, 0xE5	; 229
   10320:	7b e0       	ldi	r23, 0x0B	; 11
   10322:	c6 01       	movw	r24, r12
   10324:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   10328:	89 2b       	or	r24, r25
   1032a:	59 f1       	breq	.+86     	; 0x10382 <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   1032c:	00 0f       	add	r16, r16
   1032e:	11 1f       	adc	r17, r17
   10330:	64 01       	movw	r12, r8
   10332:	c0 0e       	add	r12, r16
   10334:	d1 1e       	adc	r13, r17
   10336:	0e 5f       	subi	r16, 0xFE	; 254
   10338:	1f 4f       	sbci	r17, 0xFF	; 255
   1033a:	74 01       	movw	r14, r8
   1033c:	e0 0e       	add	r14, r16
   1033e:	f1 1e       	adc	r15, r17
   10340:	f7 01       	movw	r30, r14
   10342:	60 81       	ld	r22, Z
   10344:	71 81       	ldd	r23, Z+1	; 0x01
   10346:	f6 01       	movw	r30, r12
   10348:	80 81       	ld	r24, Z
   1034a:	91 81       	ldd	r25, Z+1	; 0x01
   1034c:	0e 94 07 76 	call	0xec0e	; 0xec0e <rename>
   10350:	89 2b       	or	r24, r25
   10352:	01 f3       	breq	.-64     	; 0x10314 <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10354:	f7 01       	movw	r30, r14
   10356:	80 81       	ld	r24, Z
   10358:	91 81       	ldd	r25, Z+1	; 0x01
   1035a:	ed b7       	in	r30, 0x3d	; 61
   1035c:	fe b7       	in	r31, 0x3e	; 62
   1035e:	97 83       	std	Z+7, r25	; 0x07
   10360:	86 83       	std	Z+6, r24	; 0x06
   10362:	f6 01       	movw	r30, r12
   10364:	80 81       	ld	r24, Z
   10366:	91 81       	ldd	r25, Z+1	; 0x01
   10368:	ed b7       	in	r30, 0x3d	; 61
   1036a:	fe b7       	in	r31, 0x3e	; 62
   1036c:	95 83       	std	Z+5, r25	; 0x05
   1036e:	84 83       	std	Z+4, r24	; 0x04
   10370:	8f e9       	ldi	r24, 0x9F	; 159
   10372:	9d e0       	ldi	r25, 0x0D	; 13
   10374:	a0 e0       	ldi	r26, 0x00	; 0
   10376:	81 83       	std	Z+1, r24	; 0x01
   10378:	92 83       	std	Z+2, r25	; 0x02
   1037a:	a3 83       	std	Z+3, r26	; 0x03
   1037c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   10380:	46 c0       	rjmp	.+140    	; 0x1040e <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10382:	93 01       	movw	r18, r6
   10384:	a7 01       	movw	r20, r14
   10386:	6c ee       	ldi	r22, 0xEC	; 236
   10388:	7b e0       	ldi	r23, 0x0B	; 11
   1038a:	c6 01       	movw	r24, r12
   1038c:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   10390:	89 2b       	or	r24, r25
   10392:	b9 f0       	breq	.+46     	; 0x103c2 <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   10394:	78 01       	movw	r14, r16
   10396:	ee 0c       	add	r14, r14
   10398:	ff 1c       	adc	r15, r15
   1039a:	e8 0c       	add	r14, r8
   1039c:	f9 1c       	adc	r15, r9
   1039e:	f7 01       	movw	r30, r14
   103a0:	80 81       	ld	r24, Z
   103a2:	91 81       	ldd	r25, Z+1	; 0x01
   103a4:	0e 94 26 76 	call	0xec4c	; 0xec4c <unlink>
   103a8:	89 2b       	or	r24, r25
   103aa:	09 f4       	brne	.+2      	; 0x103ae <posix_tests+0x36e>
   103ac:	b3 cf       	rjmp	.-154    	; 0x10314 <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   103ae:	f7 01       	movw	r30, r14
   103b0:	80 81       	ld	r24, Z
   103b2:	91 81       	ldd	r25, Z+1	; 0x01
   103b4:	ed b7       	in	r30, 0x3d	; 61
   103b6:	fe b7       	in	r31, 0x3e	; 62
   103b8:	95 83       	std	Z+5, r25	; 0x05
   103ba:	84 83       	std	Z+4, r24	; 0x04
   103bc:	81 e9       	ldi	r24, 0x91	; 145
   103be:	9d e0       	ldi	r25, 0x0D	; 13
   103c0:	20 c0       	rjmp	.+64     	; 0x10402 <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   103c2:	93 01       	movw	r18, r6
   103c4:	a7 01       	movw	r20, r14
   103c6:	6f ee       	ldi	r22, 0xEF	; 239
   103c8:	7b e0       	ldi	r23, 0x0B	; 11
   103ca:	c6 01       	movw	r24, r12
   103cc:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   103d0:	89 2b       	or	r24, r25
   103d2:	09 f4       	brne	.+2      	; 0x103d6 <posix_tests+0x396>
   103d4:	3e ce       	rjmp	.-900    	; 0x10052 <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   103d6:	78 01       	movw	r14, r16
   103d8:	ee 0c       	add	r14, r14
   103da:	ff 1c       	adc	r15, r15
   103dc:	e8 0c       	add	r14, r8
   103de:	f9 1c       	adc	r15, r9
   103e0:	f7 01       	movw	r30, r14
   103e2:	80 81       	ld	r24, Z
   103e4:	91 81       	ldd	r25, Z+1	; 0x01
   103e6:	0e 94 45 76 	call	0xec8a	; 0xec8a <rmdir>
   103ea:	89 2b       	or	r24, r25
   103ec:	09 f4       	brne	.+2      	; 0x103f0 <posix_tests+0x3b0>
   103ee:	92 cf       	rjmp	.-220    	; 0x10314 <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   103f0:	f7 01       	movw	r30, r14
   103f2:	80 81       	ld	r24, Z
   103f4:	91 81       	ldd	r25, Z+1	; 0x01
   103f6:	ed b7       	in	r30, 0x3d	; 61
   103f8:	fe b7       	in	r31, 0x3e	; 62
   103fa:	95 83       	std	Z+5, r25	; 0x05
   103fc:	84 83       	std	Z+4, r24	; 0x04
   103fe:	80 e8       	ldi	r24, 0x80	; 128
   10400:	9d e0       	ldi	r25, 0x0D	; 13
   10402:	a0 e0       	ldi	r26, 0x00	; 0
   10404:	81 83       	std	Z+1, r24	; 0x01
   10406:	92 83       	std	Z+2, r25	; 0x02
   10408:	a3 83       	std	Z+3, r26	; 0x03
   1040a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            return(-1);
   1040e:	8f ef       	ldi	r24, 0xFF	; 255
   10410:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   10412:	c9 5f       	subi	r28, 0xF9	; 249
   10414:	de 4f       	sbci	r29, 0xFE	; 254
   10416:	e0 e1       	ldi	r30, 0x10	; 16
   10418:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x4>

0001041c <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   1041c:	00 d0       	rcall	.+0      	; 0x1041e <gpib_timer_init+0x2>
   1041e:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10420:	61 e0       	ldi	r22, 0x01	; 1
   10422:	70 e0       	ldi	r23, 0x00	; 0
   10424:	8a ec       	ldi	r24, 0xCA	; 202
   10426:	93 e8       	ldi	r25, 0x83	; 131
   10428:	0e 94 02 33 	call	0x6604	; 0x6604 <set_timers>
   1042c:	01 96       	adiw	r24, 0x01	; 1
   1042e:	51 f4       	brne	.+20     	; 0x10444 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10430:	86 e2       	ldi	r24, 0x26	; 38
   10432:	9f e0       	ldi	r25, 0x0F	; 15
   10434:	a0 e0       	ldi	r26, 0x00	; 0
   10436:	ed b7       	in	r30, 0x3d	; 61
   10438:	fe b7       	in	r31, 0x3e	; 62
   1043a:	81 83       	std	Z+1, r24	; 0x01
   1043c:	92 83       	std	Z+2, r25	; 0x02
   1043e:	a3 83       	std	Z+3, r26	; 0x03
   10440:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    gpib_timer_reset();
   10444:	95 d1       	rcall	.+810    	; 0x10770 <gpib_timer_reset>
}
   10446:	0f 90       	pop	r0
   10448:	0f 90       	pop	r0
   1044a:	0f 90       	pop	r0
   1044c:	08 95       	ret

0001044e <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   1044e:	28 2f       	mov	r18, r24
   10450:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10452:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10454:	88 0f       	add	r24, r24
        if(mask & 1)
   10456:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10458:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   1045a:	26 95       	lsr	r18
   1045c:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   1045e:	d1 f7       	brne	.-12     	; 0x10454 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10460:	08 95       	ret

00010462 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   10462:	f5 df       	rcall	.-22     	; 0x1044e <reverse_8bits>
   10464:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10468:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   1046c:	2a 9a       	sbi	0x05, 2	; 5
   1046e:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   10470:	2a 98       	cbi	0x05, 2	; 5
   10472:	22 9a       	sbi	0x04, 2	; 4
   10474:	08 95       	ret

00010476 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10476:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   1047a:	e9 cf       	rjmp	.-46     	; 0x1044e <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   1047c:	08 95       	ret

0001047e <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   1047e:	00 d0       	rcall	.+0      	; 0x10480 <ppr_init+0x2>
   10480:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   10482:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10486:	81 ff       	sbrs	r24, 1
   10488:	0a c0       	rjmp	.+20     	; 0x1049e <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   1048a:	83 e1       	ldi	r24, 0x13	; 19
   1048c:	9f e0       	ldi	r25, 0x0F	; 15
   1048e:	a0 e0       	ldi	r26, 0x00	; 0
   10490:	ed b7       	in	r30, 0x3d	; 61
   10492:	fe b7       	in	r31, 0x3e	; 62
   10494:	81 83       	std	Z+1, r24	; 0x01
   10496:	92 83       	std	Z+2, r25	; 0x02
   10498:	a3 83       	std	Z+3, r26	; 0x03
   1049a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
    ppr_set(0);
   1049e:	80 e0       	ldi	r24, 0x00	; 0
   104a0:	e0 df       	rcall	.-64     	; 0x10462 <ppr_set>
}
   104a2:	0f 90       	pop	r0
   104a4:	0f 90       	pop	r0
   104a6:	0f 90       	pop	r0
   104a8:	08 95       	ret

000104aa <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   104aa:	21 e0       	ldi	r18, 0x01	; 1
   104ac:	30 e0       	ldi	r19, 0x00	; 0
   104ae:	01 c0       	rjmp	.+2      	; 0x104b2 <ppr_bit_set+0x8>
   104b0:	22 0f       	add	r18, r18
   104b2:	8a 95       	dec	r24
   104b4:	ea f7       	brpl	.-6      	; 0x104b0 <ppr_bit_set+0x6>
   104b6:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   104ba:	82 2b       	or	r24, r18
   104bc:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
    ppr_set(_ppr_reg);
   104c0:	d0 cf       	rjmp	.-96     	; 0x10462 <ppr_set>
   104c2:	08 95       	ret

000104c4 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   104c4:	21 e0       	ldi	r18, 0x01	; 1
   104c6:	30 e0       	ldi	r19, 0x00	; 0
   104c8:	01 c0       	rjmp	.+2      	; 0x104cc <ppr_bit_clr+0x8>
   104ca:	22 0f       	add	r18, r18
   104cc:	8a 95       	dec	r24
   104ce:	ea f7       	brpl	.-6      	; 0x104ca <ppr_bit_clr+0x6>
   104d0:	20 95       	com	r18
   104d2:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <_ppr_reg>
   104d6:	82 23       	and	r24, r18
   104d8:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <_ppr_reg>
    ppr_set(_ppr_reg);
   104dc:	c2 cf       	rjmp	.-124    	; 0x10462 <ppr_set>
   104de:	08 95       	ret

000104e0 <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   104e0:	0f 93       	push	r16
   104e2:	1f 93       	push	r17
   104e4:	cf 93       	push	r28
   104e6:	df 93       	push	r29
   104e8:	00 d0       	rcall	.+0      	; 0x104ea <dbf_open+0xa>
   104ea:	00 d0       	rcall	.+0      	; 0x104ec <dbf_open+0xc>
   104ec:	1f 92       	push	r1
   104ee:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   104f0:	0e 94 fc 57 	call	0xaff8	; 0xaff8 <f_open>
   104f4:	ec 01       	movw	r28, r24
    if(rc)
   104f6:	89 2b       	or	r24, r25
   104f8:	79 f0       	breq	.+30     	; 0x10518 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   104fa:	ed b7       	in	r30, 0x3d	; 61
   104fc:	fe b7       	in	r31, 0x3e	; 62
   104fe:	15 83       	std	Z+5, r17	; 0x05
   10500:	04 83       	std	Z+4, r16	; 0x04
   10502:	82 e0       	ldi	r24, 0x02	; 2
   10504:	9f e0       	ldi	r25, 0x0F	; 15
   10506:	a0 e0       	ldi	r26, 0x00	; 0
   10508:	81 83       	std	Z+1, r24	; 0x01
   1050a:	92 83       	std	Z+2, r25	; 0x02
   1050c:	a3 83       	std	Z+3, r26	; 0x03
   1050e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        put_rc(rc);
   10512:	ce 01       	movw	r24, r28
   10514:	0e 94 b6 6e 	call	0xdd6c	; 0xdd6c <put_rc>
        return (rc);
    }
    return(0);
}
   10518:	ce 01       	movw	r24, r28
   1051a:	cd b7       	in	r28, 0x3d	; 61
   1051c:	de b7       	in	r29, 0x3e	; 62
   1051e:	25 96       	adiw	r28, 0x05	; 5
   10520:	e4 e0       	ldi	r30, 0x04	; 4
   10522:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00010526 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   10526:	cf 93       	push	r28
   10528:	df 93       	push	r29
   1052a:	00 d0       	rcall	.+0      	; 0x1052c <dbf_read+0x6>
   1052c:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   1052e:	0e 94 b4 59 	call	0xb368	; 0xb368 <f_read>
   10532:	ec 01       	movw	r28, r24
    if(rc)
   10534:	89 2b       	or	r24, r25
   10536:	69 f0       	breq	.+26     	; 0x10552 <dbf_read+0x2c>
    {
        printf("Read error: ");
   10538:	85 ef       	ldi	r24, 0xF5	; 245
   1053a:	9e e0       	ldi	r25, 0x0E	; 14
   1053c:	a0 e0       	ldi	r26, 0x00	; 0
   1053e:	ed b7       	in	r30, 0x3d	; 61
   10540:	fe b7       	in	r31, 0x3e	; 62
   10542:	81 83       	std	Z+1, r24	; 0x01
   10544:	92 83       	std	Z+2, r25	; 0x02
   10546:	a3 83       	std	Z+3, r26	; 0x03
   10548:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        put_rc(rc);
   1054c:	ce 01       	movw	r24, r28
   1054e:	0e 94 b6 6e 	call	0xdd6c	; 0xdd6c <put_rc>
        return (rc);
    }
    return(0);
}
   10552:	ce 01       	movw	r24, r28
   10554:	cd b7       	in	r28, 0x3d	; 61
   10556:	de b7       	in	r29, 0x3e	; 62
   10558:	23 96       	adiw	r28, 0x03	; 3
   1055a:	e2 e0       	ldi	r30, 0x02	; 2
   1055c:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00010560 <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   10560:	cf 93       	push	r28
   10562:	df 93       	push	r29
   10564:	00 d0       	rcall	.+0      	; 0x10566 <dbf_write+0x6>
   10566:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10568:	0e 94 ff 5a 	call	0xb5fe	; 0xb5fe <f_write>
   1056c:	ec 01       	movw	r28, r24
    if(rc)
   1056e:	89 2b       	or	r24, r25
   10570:	69 f0       	breq	.+26     	; 0x1058c <dbf_write+0x2c>
    {
        printf("Write error: ");
   10572:	87 ee       	ldi	r24, 0xE7	; 231
   10574:	9e e0       	ldi	r25, 0x0E	; 14
   10576:	a0 e0       	ldi	r26, 0x00	; 0
   10578:	ed b7       	in	r30, 0x3d	; 61
   1057a:	fe b7       	in	r31, 0x3e	; 62
   1057c:	81 83       	std	Z+1, r24	; 0x01
   1057e:	92 83       	std	Z+2, r25	; 0x02
   10580:	a3 83       	std	Z+3, r26	; 0x03
   10582:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        put_rc(rc);
   10586:	ce 01       	movw	r24, r28
   10588:	0e 94 b6 6e 	call	0xdd6c	; 0xdd6c <put_rc>
        return (rc);
    }
    return(0);
}
   1058c:	ce 01       	movw	r24, r28
   1058e:	cd b7       	in	r28, 0x3d	; 61
   10590:	de b7       	in	r29, 0x3e	; 62
   10592:	23 96       	adiw	r28, 0x03	; 3
   10594:	e2 e0       	ldi	r30, 0x02	; 2
   10596:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0001059a <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   1059a:	cf 93       	push	r28
   1059c:	df 93       	push	r29
   1059e:	00 d0       	rcall	.+0      	; 0x105a0 <dbf_lseek+0x6>
   105a0:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   105a2:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <f_lseek>
   105a6:	ec 01       	movw	r28, r24
    if(rc)
   105a8:	89 2b       	or	r24, r25
   105aa:	69 f0       	breq	.+26     	; 0x105c6 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   105ac:	8a ed       	ldi	r24, 0xDA	; 218
   105ae:	9e e0       	ldi	r25, 0x0E	; 14
   105b0:	a0 e0       	ldi	r26, 0x00	; 0
   105b2:	ed b7       	in	r30, 0x3d	; 61
   105b4:	fe b7       	in	r31, 0x3e	; 62
   105b6:	81 83       	std	Z+1, r24	; 0x01
   105b8:	92 83       	std	Z+2, r25	; 0x02
   105ba:	a3 83       	std	Z+3, r26	; 0x03
   105bc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        put_rc(rc);
   105c0:	ce 01       	movw	r24, r28
   105c2:	0e 94 b6 6e 	call	0xdd6c	; 0xdd6c <put_rc>
        return (rc);
    }
    return(0);
}
   105c6:	ce 01       	movw	r24, r28
   105c8:	cd b7       	in	r28, 0x3d	; 61
   105ca:	de b7       	in	r29, 0x3e	; 62
   105cc:	23 96       	adiw	r28, 0x03	; 3
   105ce:	e2 e0       	ldi	r30, 0x02	; 2
   105d0:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000105d4 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   105d4:	cf 93       	push	r28
   105d6:	df 93       	push	r29
   105d8:	00 d0       	rcall	.+0      	; 0x105da <dbf_close+0x6>
   105da:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   105dc:	0e 94 16 5d 	call	0xba2c	; 0xba2c <f_close>
   105e0:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   105e2:	89 2b       	or	r24, r25
   105e4:	69 f0       	breq	.+26     	; 0x10600 <dbf_close+0x2c>
    {
        printf("Close error: ");
   105e6:	8c ec       	ldi	r24, 0xCC	; 204
   105e8:	9e e0       	ldi	r25, 0x0E	; 14
   105ea:	a0 e0       	ldi	r26, 0x00	; 0
   105ec:	ed b7       	in	r30, 0x3d	; 61
   105ee:	fe b7       	in	r31, 0x3e	; 62
   105f0:	81 83       	std	Z+1, r24	; 0x01
   105f2:	92 83       	std	Z+2, r25	; 0x02
   105f4:	a3 83       	std	Z+3, r26	; 0x03
   105f6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        put_rc(rc);
   105fa:	ce 01       	movw	r24, r28
   105fc:	0e 94 b6 6e 	call	0xdd6c	; 0xdd6c <put_rc>
        return (rc);
    }
    return(0);
}
   10600:	ce 01       	movw	r24, r28
   10602:	cd b7       	in	r28, 0x3d	; 61
   10604:	de b7       	in	r29, 0x3e	; 62
   10606:	23 96       	adiw	r28, 0x03	; 3
   10608:	e2 e0       	ldi	r30, 0x02	; 2
   1060a:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0001060e <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1060e:	a6 e2       	ldi	r26, 0x26	; 38
   10610:	b2 e0       	ldi	r27, 0x02	; 2
   10612:	ed e0       	ldi	r30, 0x0D	; 13
   10614:	f3 e8       	ldi	r31, 0x83	; 131
   10616:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
   1061a:	4a 01       	movw	r8, r20
   1061c:	5b 01       	movw	r10, r22
   1061e:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10620:	cb 5d       	subi	r28, 0xDB	; 219
   10622:	dd 4f       	sbci	r29, 0xFD	; 253
   10624:	19 82       	std	Y+1, r1	; 0x01
   10626:	18 82       	st	Y, r1
   10628:	c5 52       	subi	r28, 0x25	; 37
   1062a:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1062c:	43 e0       	ldi	r20, 0x03	; 3
   1062e:	bc 01       	movw	r22, r24
   10630:	ce 01       	movw	r24, r28
   10632:	01 96       	adiw	r24, 0x01	; 1
   10634:	55 df       	rcall	.-342    	; 0x104e0 <dbf_open>
    if( rc != FR_OK)
   10636:	89 2b       	or	r24, r25
   10638:	19 f0       	breq	.+6      	; 0x10640 <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   1063a:	81 e1       	ldi	r24, 0x11	; 17
   1063c:	90 e0       	ldi	r25, 0x00	; 0
   1063e:	2f c0       	rjmp	.+94     	; 0x1069e <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10640:	b5 01       	movw	r22, r10
   10642:	a4 01       	movw	r20, r8
   10644:	ce 01       	movw	r24, r28
   10646:	01 96       	adiw	r24, 0x01	; 1
   10648:	a8 df       	rcall	.-176    	; 0x1059a <dbf_lseek>
    if( rc != FR_OK)
   1064a:	89 2b       	or	r24, r25
   1064c:	59 f0       	breq	.+22     	; 0x10664 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   1064e:	85 e0       	ldi	r24, 0x05	; 5
   10650:	90 e0       	ldi	r25, 0x00	; 0
   10652:	f7 01       	movw	r30, r14
   10654:	91 83       	std	Z+1, r25	; 0x01
   10656:	80 83       	st	Z, r24
        dbf_close(&fp);
   10658:	ce 01       	movw	r24, r28
   1065a:	01 96       	adiw	r24, 0x01	; 1
   1065c:	bb df       	rcall	.-138    	; 0x105d4 <dbf_close>
        return( -1 );
   1065e:	8f ef       	ldi	r24, 0xFF	; 255
   10660:	9f ef       	ldi	r25, 0xFF	; 255
   10662:	27 c0       	rjmp	.+78     	; 0x106b2 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10664:	9e 01       	movw	r18, r28
   10666:	2b 5d       	subi	r18, 0xDB	; 219
   10668:	3d 4f       	sbci	r19, 0xFD	; 253
   1066a:	a8 01       	movw	r20, r16
   1066c:	b6 01       	movw	r22, r12
   1066e:	ce 01       	movw	r24, r28
   10670:	01 96       	adiw	r24, 0x01	; 1
   10672:	59 df       	rcall	.-334    	; 0x10526 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10674:	89 2b       	or	r24, r25
   10676:	49 f4       	brne	.+18     	; 0x1068a <dbf_open_read+0x7c>
   10678:	cb 5d       	subi	r28, 0xDB	; 219
   1067a:	dd 4f       	sbci	r29, 0xFD	; 253
   1067c:	88 81       	ld	r24, Y
   1067e:	99 81       	ldd	r25, Y+1	; 0x01
   10680:	c5 52       	subi	r28, 0x25	; 37
   10682:	d2 40       	sbci	r29, 0x02	; 2
   10684:	08 17       	cp	r16, r24
   10686:	19 07       	cpc	r17, r25
   10688:	19 f0       	breq	.+6      	; 0x10690 <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   1068a:	81 e0       	ldi	r24, 0x01	; 1
   1068c:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   1068e:	e1 cf       	rjmp	.-62     	; 0x10652 <dbf_open_read+0x44>
   10690:	ce 01       	movw	r24, r28
   10692:	01 96       	adiw	r24, 0x01	; 1
   10694:	9f df       	rcall	.-194    	; 0x105d4 <dbf_close>
    if( rc != FR_OK)
   10696:	89 2b       	or	r24, r25
   10698:	31 f0       	breq	.+12     	; 0x106a6 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   1069a:	80 e1       	ldi	r24, 0x10	; 16
   1069c:	90 e0       	ldi	r25, 0x00	; 0
   1069e:	f7 01       	movw	r30, r14
   106a0:	91 83       	std	Z+1, r25	; 0x01
   106a2:	80 83       	st	Z, r24
   106a4:	dc cf       	rjmp	.-72     	; 0x1065e <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   106a6:	cb 5d       	subi	r28, 0xDB	; 219
   106a8:	dd 4f       	sbci	r29, 0xFD	; 253
   106aa:	88 81       	ld	r24, Y
   106ac:	99 81       	ldd	r25, Y+1	; 0x01
   106ae:	c5 52       	subi	r28, 0x25	; 37
   106b0:	d2 40       	sbci	r29, 0x02	; 2
}
   106b2:	ca 5d       	subi	r28, 0xDA	; 218
   106b4:	dd 4f       	sbci	r29, 0xFD	; 253
   106b6:	ec e0       	ldi	r30, 0x0C	; 12
   106b8:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

000106bc <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   106bc:	a6 e2       	ldi	r26, 0x26	; 38
   106be:	b2 e0       	ldi	r27, 0x02	; 2
   106c0:	e4 e6       	ldi	r30, 0x64	; 100
   106c2:	f3 e8       	ldi	r31, 0x83	; 131
   106c4:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
   106c8:	4a 01       	movw	r8, r20
   106ca:	5b 01       	movw	r10, r22
   106cc:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   106ce:	cb 5d       	subi	r28, 0xDB	; 219
   106d0:	dd 4f       	sbci	r29, 0xFD	; 253
   106d2:	19 82       	std	Y+1, r1	; 0x01
   106d4:	18 82       	st	Y, r1
   106d6:	c5 52       	subi	r28, 0x25	; 37
   106d8:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   106da:	43 e0       	ldi	r20, 0x03	; 3
   106dc:	bc 01       	movw	r22, r24
   106de:	ce 01       	movw	r24, r28
   106e0:	01 96       	adiw	r24, 0x01	; 1
   106e2:	fe de       	rcall	.-516    	; 0x104e0 <dbf_open>
    if( rc != FR_OK)
   106e4:	89 2b       	or	r24, r25
   106e6:	19 f0       	breq	.+6      	; 0x106ee <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   106e8:	82 e1       	ldi	r24, 0x12	; 18
   106ea:	90 e0       	ldi	r25, 0x00	; 0
   106ec:	2f c0       	rjmp	.+94     	; 0x1074c <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   106ee:	b5 01       	movw	r22, r10
   106f0:	a4 01       	movw	r20, r8
   106f2:	ce 01       	movw	r24, r28
   106f4:	01 96       	adiw	r24, 0x01	; 1
   106f6:	51 df       	rcall	.-350    	; 0x1059a <dbf_lseek>
    if( rc != FR_OK)
   106f8:	89 2b       	or	r24, r25
   106fa:	59 f0       	breq	.+22     	; 0x10712 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   106fc:	86 e0       	ldi	r24, 0x06	; 6
   106fe:	90 e0       	ldi	r25, 0x00	; 0
   10700:	f7 01       	movw	r30, r14
   10702:	91 83       	std	Z+1, r25	; 0x01
   10704:	80 83       	st	Z, r24
        dbf_close(&fp);
   10706:	ce 01       	movw	r24, r28
   10708:	01 96       	adiw	r24, 0x01	; 1
   1070a:	64 df       	rcall	.-312    	; 0x105d4 <dbf_close>
        return( -1 );
   1070c:	8f ef       	ldi	r24, 0xFF	; 255
   1070e:	9f ef       	ldi	r25, 0xFF	; 255
   10710:	27 c0       	rjmp	.+78     	; 0x10760 <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10712:	9e 01       	movw	r18, r28
   10714:	2b 5d       	subi	r18, 0xDB	; 219
   10716:	3d 4f       	sbci	r19, 0xFD	; 253
   10718:	a8 01       	movw	r20, r16
   1071a:	b6 01       	movw	r22, r12
   1071c:	ce 01       	movw	r24, r28
   1071e:	01 96       	adiw	r24, 0x01	; 1
   10720:	1f df       	rcall	.-450    	; 0x10560 <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10722:	89 2b       	or	r24, r25
   10724:	49 f4       	brne	.+18     	; 0x10738 <dbf_open_write+0x7c>
   10726:	cb 5d       	subi	r28, 0xDB	; 219
   10728:	dd 4f       	sbci	r29, 0xFD	; 253
   1072a:	88 81       	ld	r24, Y
   1072c:	99 81       	ldd	r25, Y+1	; 0x01
   1072e:	c5 52       	subi	r28, 0x25	; 37
   10730:	d2 40       	sbci	r29, 0x02	; 2
   10732:	08 17       	cp	r16, r24
   10734:	19 07       	cpc	r17, r25
   10736:	19 f0       	breq	.+6      	; 0x1073e <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10738:	82 e0       	ldi	r24, 0x02	; 2
   1073a:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   1073c:	e1 cf       	rjmp	.-62     	; 0x10700 <dbf_open_write+0x44>
   1073e:	ce 01       	movw	r24, r28
   10740:	01 96       	adiw	r24, 0x01	; 1
   10742:	48 df       	rcall	.-368    	; 0x105d4 <dbf_close>
    if( rc != FR_OK)
   10744:	89 2b       	or	r24, r25
   10746:	31 f0       	breq	.+12     	; 0x10754 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10748:	80 e1       	ldi	r24, 0x10	; 16
   1074a:	90 e0       	ldi	r25, 0x00	; 0
   1074c:	f7 01       	movw	r30, r14
   1074e:	91 83       	std	Z+1, r25	; 0x01
   10750:	80 83       	st	Z, r24
   10752:	dc cf       	rjmp	.-72     	; 0x1070c <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10754:	cb 5d       	subi	r28, 0xDB	; 219
   10756:	dd 4f       	sbci	r29, 0xFD	; 253
   10758:	88 81       	ld	r24, Y
   1075a:	99 81       	ldd	r25, Y+1	; 0x01
   1075c:	c5 52       	subi	r28, 0x25	; 37
   1075e:	d2 40       	sbci	r29, 0x02	; 2
}
   10760:	ca 5d       	subi	r28, 0xDA	; 218
   10762:	dd 4f       	sbci	r29, 0xFD	; 253
   10764:	ec e0       	ldi	r30, 0x0C	; 12
   10766:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

0001076a <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   1076a:	0c 94 c2 33 	jmp	0x6784	; 0x6784 <clock_elapsed_begin>
   1076e:	08 95       	ret

00010770 <gpib_timer_reset>:
   10770:	f8 94       	cli
   10772:	e7 ee       	ldi	r30, 0xE7	; 231
   10774:	fc e1       	ldi	r31, 0x1C	; 28
   10776:	10 82       	st	Z, r1
   10778:	11 82       	std	Z+1, r1	; 0x01
   1077a:	12 82       	std	Z+2, r1	; 0x02
   1077c:	13 82       	std	Z+3, r1	; 0x03
   1077e:	14 82       	std	Z+4, r1	; 0x04
   10780:	15 82       	std	Z+5, r1	; 0x05
   10782:	16 82       	std	Z+6, r1	; 0x06
   10784:	17 82       	std	Z+7, r1	; 0x07
   10786:	81 e0       	ldi	r24, 0x01	; 1
   10788:	80 87       	std	Z+8, r24	; 0x08
   1078a:	78 94       	sei
   1078c:	08 95       	ret

0001078e <gpib_timer_elapsed_end>:
   1078e:	0c 94 c8 33 	jmp	0x6790	; 0x6790 <clock_elapsed_end>
   10792:	08 95       	ret

00010794 <gpib_timer_task>:
   10794:	f8 94       	cli
   10796:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_timer+0x4>
   1079a:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <gpib_timer+0x5>
   1079e:	a0 91 ed 1c 	lds	r26, 0x1CED	; 0x801ced <gpib_timer+0x6>
   107a2:	b0 91 ee 1c 	lds	r27, 0x1CEE	; 0x801cee <gpib_timer+0x7>
   107a6:	89 2b       	or	r24, r25
   107a8:	8a 2b       	or	r24, r26
   107aa:	8b 2b       	or	r24, r27
   107ac:	a1 f0       	breq	.+40     	; 0x107d6 <gpib_timer_task+0x42>
   107ae:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_timer+0x4>
   107b2:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <gpib_timer+0x5>
   107b6:	a0 91 ed 1c 	lds	r26, 0x1CED	; 0x801ced <gpib_timer+0x6>
   107ba:	b0 91 ee 1c 	lds	r27, 0x1CEE	; 0x801cee <gpib_timer+0x7>
   107be:	01 97       	sbiw	r24, 0x01	; 1
   107c0:	a1 09       	sbc	r26, r1
   107c2:	b1 09       	sbc	r27, r1
   107c4:	80 93 eb 1c 	sts	0x1CEB, r24	; 0x801ceb <gpib_timer+0x4>
   107c8:	90 93 ec 1c 	sts	0x1CEC, r25	; 0x801cec <gpib_timer+0x5>
   107cc:	a0 93 ed 1c 	sts	0x1CED, r26	; 0x801ced <gpib_timer+0x6>
   107d0:	b0 93 ee 1c 	sts	0x1CEE, r27	; 0x801cee <gpib_timer+0x7>
   107d4:	03 c0       	rjmp	.+6      	; 0x107dc <gpib_timer_task+0x48>
   107d6:	81 e0       	ldi	r24, 0x01	; 1
   107d8:	80 93 ef 1c 	sts	0x1CEF, r24	; 0x801cef <gpib_timer+0x8>
   107dc:	78 94       	sei
   107de:	08 95       	ret

000107e0 <gpib_timeout_set>:
   107e0:	f8 94       	cli
   107e2:	e7 ee       	ldi	r30, 0xE7	; 231
   107e4:	fc e1       	ldi	r31, 0x1C	; 28
   107e6:	64 83       	std	Z+4, r22	; 0x04
   107e8:	75 83       	std	Z+5, r23	; 0x05
   107ea:	86 83       	std	Z+6, r24	; 0x06
   107ec:	97 83       	std	Z+7, r25	; 0x07
   107ee:	10 86       	std	Z+8, r1	; 0x08
   107f0:	78 94       	sei
   107f2:	08 95       	ret

000107f4 <gpib_bus_init>:
   107f4:	00 d0       	rcall	.+0      	; 0x107f6 <gpib_bus_init+0x2>
   107f6:	1f 92       	push	r1
   107f8:	8f b7       	in	r24, 0x3f	; 63
   107fa:	f8 94       	cli
   107fc:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
   10800:	11 b8       	out	0x01, r1	; 1
   10802:	9f ef       	ldi	r25, 0xFF	; 255
   10804:	92 b9       	out	0x02, r25	; 2
   10806:	21 98       	cbi	0x04, 1	; 4
   10808:	29 9a       	sbi	0x05, 1	; 5
   1080a:	52 98       	cbi	0x0a, 2	; 10
   1080c:	5a 9a       	sbi	0x0b, 2	; 11
   1080e:	53 98       	cbi	0x0a, 3	; 10
   10810:	5b 9a       	sbi	0x0b, 3	; 11
   10812:	56 98       	cbi	0x0a, 6	; 10
   10814:	5e 9a       	sbi	0x0b, 6	; 11
   10816:	54 98       	cbi	0x0a, 4	; 10
   10818:	5c 9a       	sbi	0x0b, 4	; 11
   1081a:	57 98       	cbi	0x0a, 7	; 10
   1081c:	5f 9a       	sbi	0x0b, 7	; 11
   1081e:	55 98       	cbi	0x0a, 5	; 10
   10820:	5d 9a       	sbi	0x0b, 5	; 11
   10822:	20 98       	cbi	0x04, 0	; 4
   10824:	28 9a       	sbi	0x05, 0	; 5
   10826:	45 98       	cbi	0x08, 5	; 8
   10828:	3d 9a       	sbi	0x07, 5	; 7
   1082a:	44 9a       	sbi	0x08, 4	; 8
   1082c:	3c 9a       	sbi	0x07, 4	; 7
   1082e:	43 98       	cbi	0x08, 3	; 8
   10830:	3b 9a       	sbi	0x07, 3	; 7
   10832:	42 98       	cbi	0x08, 2	; 8
   10834:	3a 9a       	sbi	0x07, 2	; 7
   10836:	9d e0       	ldi	r25, 0x0D	; 13
   10838:	9a 95       	dec	r25
   1083a:	f1 f7       	brne	.-4      	; 0x10838 <gpib_bus_init+0x44>
   1083c:	00 00       	nop
   1083e:	8f bf       	out	0x3f, r24	; 63
   10840:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10844:	82 ff       	sbrs	r24, 2
   10846:	0a c0       	rjmp	.+20     	; 0x1085c <gpib_bus_init+0x68>
   10848:	84 e6       	ldi	r24, 0x64	; 100
   1084a:	92 e1       	ldi	r25, 0x12	; 18
   1084c:	a0 e0       	ldi	r26, 0x00	; 0
   1084e:	ed b7       	in	r30, 0x3d	; 61
   10850:	fe b7       	in	r31, 0x3e	; 62
   10852:	81 83       	std	Z+1, r24	; 0x01
   10854:	92 83       	std	Z+2, r25	; 0x02
   10856:	a3 83       	std	Z+3, r26	; 0x03
   10858:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1085c:	0f 90       	pop	r0
   1085e:	0f 90       	pop	r0
   10860:	0f 90       	pop	r0
   10862:	08 95       	ret

00010864 <gpib_rx_init>:
   10864:	9f b7       	in	r25, 0x3f	; 63
   10866:	f8 94       	cli
   10868:	11 b8       	out	0x01, r1	; 1
   1086a:	2f ef       	ldi	r18, 0xFF	; 255
   1086c:	22 b9       	out	0x02, r18	; 2
   1086e:	21 98       	cbi	0x04, 1	; 4
   10870:	29 9a       	sbi	0x05, 1	; 5
   10872:	20 98       	cbi	0x04, 0	; 4
   10874:	28 9a       	sbi	0x05, 0	; 5
   10876:	4e 9b       	sbis	0x09, 6	; 9
   10878:	09 c0       	rjmp	.+18     	; 0x1088c <gpib_rx_init+0x28>
   1087a:	81 11       	cpse	r24, r1
   1087c:	07 c0       	rjmp	.+14     	; 0x1088c <gpib_rx_init+0x28>
   1087e:	52 98       	cbi	0x0a, 2	; 10
   10880:	5a 9a       	sbi	0x0b, 2	; 11
   10882:	53 98       	cbi	0x0a, 3	; 10
   10884:	5b 9a       	sbi	0x0b, 3	; 11
   10886:	42 98       	cbi	0x08, 2	; 8
   10888:	3a 9a       	sbi	0x07, 2	; 7
   1088a:	08 c0       	rjmp	.+16     	; 0x1089c <gpib_rx_init+0x38>
   1088c:	42 98       	cbi	0x08, 2	; 8
   1088e:	3a 9a       	sbi	0x07, 2	; 7
   10890:	5b 98       	cbi	0x0b, 3	; 11
   10892:	53 9a       	sbi	0x0a, 3	; 10
   10894:	5a 98       	cbi	0x0b, 2	; 11
   10896:	52 9a       	sbi	0x0a, 2	; 10
   10898:	88 23       	and	r24, r24
   1089a:	89 f3       	breq	.-30     	; 0x1087e <gpib_rx_init+0x1a>
   1089c:	9f bf       	out	0x3f, r25	; 63
   1089e:	08 95       	ret

000108a0 <gpib_tx_init>:
   108a0:	9f b7       	in	r25, 0x3f	; 63
   108a2:	f8 94       	cli
   108a4:	11 b8       	out	0x01, r1	; 1
   108a6:	8f ef       	ldi	r24, 0xFF	; 255
   108a8:	82 b9       	out	0x02, r24	; 2
   108aa:	21 98       	cbi	0x04, 1	; 4
   108ac:	29 9a       	sbi	0x05, 1	; 5
   108ae:	52 98       	cbi	0x0a, 2	; 10
   108b0:	5a 9a       	sbi	0x0b, 2	; 11
   108b2:	53 98       	cbi	0x0a, 3	; 10
   108b4:	5b 9a       	sbi	0x0b, 3	; 11
   108b6:	20 98       	cbi	0x04, 0	; 4
   108b8:	28 9a       	sbi	0x05, 0	; 5
   108ba:	42 9a       	sbi	0x08, 2	; 8
   108bc:	3a 9a       	sbi	0x07, 2	; 7
   108be:	81 b9       	out	0x01, r24	; 1
   108c0:	9f bf       	out	0x3f, r25	; 63
   108c2:	08 95       	ret

000108c4 <gpib_state_init>:
   108c4:	00 d0       	rcall	.+0      	; 0x108c6 <gpib_state_init+0x2>
   108c6:	1f 92       	push	r1
   108c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   108cc:	82 ff       	sbrs	r24, 2
   108ce:	0a c0       	rjmp	.+20     	; 0x108e4 <gpib_state_init+0x20>
   108d0:	81 e5       	ldi	r24, 0x51	; 81
   108d2:	92 e1       	ldi	r25, 0x12	; 18
   108d4:	a0 e0       	ldi	r26, 0x00	; 0
   108d6:	ed b7       	in	r30, 0x3d	; 61
   108d8:	fe b7       	in	r31, 0x3e	; 62
   108da:	81 83       	std	Z+1, r24	; 0x01
   108dc:	92 83       	std	Z+2, r25	; 0x02
   108de:	a3 83       	std	Z+3, r26	; 0x03
   108e0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   108e4:	cc dd       	rcall	.-1128   	; 0x1047e <ppr_init>
   108e6:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <listen_cleanup>
   108ea:	0e 94 11 90 	call	0x12022	; 0x12022 <talk_cleanup>
   108ee:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <spoll>
   108f2:	10 92 f6 1e 	sts	0x1EF6, r1	; 0x801ef6 <talking>
   108f6:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <talking_last>
   108fa:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <listening>
   108fe:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <listening_last>
   10902:	10 92 f1 1c 	sts	0x1CF1, r1	; 0x801cf1 <lastcmd+0x1>
   10906:	10 92 f0 1c 	sts	0x1CF0, r1	; 0x801cf0 <lastcmd>
   1090a:	10 92 f5 1e 	sts	0x1EF5, r1	; 0x801ef5 <current+0x1>
   1090e:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <current>
   10912:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
   10916:	0f 90       	pop	r0
   10918:	0f 90       	pop	r0
   1091a:	0f 90       	pop	r0
   1091c:	08 95       	ret

0001091e <gpib_enable_PPR>:
   1091e:	cf 93       	push	r28
   10920:	df 93       	push	r29
   10922:	ad b7       	in	r26, 0x3d	; 61
   10924:	be b7       	in	r27, 0x3e	; 62
   10926:	17 97       	sbiw	r26, 0x07	; 7
   10928:	0f b6       	in	r0, 0x3f	; 63
   1092a:	f8 94       	cli
   1092c:	be bf       	out	0x3e, r27	; 62
   1092e:	0f be       	out	0x3f, r0	; 63
   10930:	ad bf       	out	0x3d, r26	; 61
   10932:	ec 01       	movw	r28, r24
   10934:	88 30       	cpi	r24, 0x08	; 8
   10936:	91 05       	cpc	r25, r1
   10938:	68 f0       	brcs	.+26     	; 0x10954 <gpib_enable_PPR+0x36>
   1093a:	ed b7       	in	r30, 0x3d	; 61
   1093c:	fe b7       	in	r31, 0x3e	; 62
   1093e:	95 83       	std	Z+5, r25	; 0x05
   10940:	84 83       	std	Z+4, r24	; 0x04
   10942:	8b e2       	ldi	r24, 0x2B	; 43
   10944:	92 e1       	ldi	r25, 0x12	; 18
   10946:	a0 e0       	ldi	r26, 0x00	; 0
   10948:	81 83       	std	Z+1, r24	; 0x01
   1094a:	92 83       	std	Z+2, r25	; 0x02
   1094c:	a3 83       	std	Z+3, r26	; 0x03
   1094e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   10952:	15 c0       	rjmp	.+42     	; 0x1097e <gpib_enable_PPR+0x60>
   10954:	aa dd       	rcall	.-1196   	; 0x104aa <ppr_bit_set>
   10956:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1095a:	81 ff       	sbrs	r24, 1
   1095c:	10 c0       	rjmp	.+32     	; 0x1097e <gpib_enable_PPR+0x60>
   1095e:	8b dd       	rcall	.-1258   	; 0x10476 <ppr_reg>
   10960:	90 e0       	ldi	r25, 0x00	; 0
   10962:	ed b7       	in	r30, 0x3d	; 61
   10964:	fe b7       	in	r31, 0x3e	; 62
   10966:	97 83       	std	Z+7, r25	; 0x07
   10968:	86 83       	std	Z+6, r24	; 0x06
   1096a:	d5 83       	std	Z+5, r29	; 0x05
   1096c:	c4 83       	std	Z+4, r28	; 0x04
   1096e:	80 e1       	ldi	r24, 0x10	; 16
   10970:	92 e1       	ldi	r25, 0x12	; 18
   10972:	a0 e0       	ldi	r26, 0x00	; 0
   10974:	81 83       	std	Z+1, r24	; 0x01
   10976:	92 83       	std	Z+2, r25	; 0x02
   10978:	a3 83       	std	Z+3, r26	; 0x03
   1097a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1097e:	cd b7       	in	r28, 0x3d	; 61
   10980:	de b7       	in	r29, 0x3e	; 62
   10982:	27 96       	adiw	r28, 0x07	; 7
   10984:	e2 e0       	ldi	r30, 0x02	; 2
   10986:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0001098a <gpib_disable_PPR>:
   1098a:	cf 93       	push	r28
   1098c:	df 93       	push	r29
   1098e:	ad b7       	in	r26, 0x3d	; 61
   10990:	be b7       	in	r27, 0x3e	; 62
   10992:	17 97       	sbiw	r26, 0x07	; 7
   10994:	0f b6       	in	r0, 0x3f	; 63
   10996:	f8 94       	cli
   10998:	be bf       	out	0x3e, r27	; 62
   1099a:	0f be       	out	0x3f, r0	; 63
   1099c:	ad bf       	out	0x3d, r26	; 61
   1099e:	ec 01       	movw	r28, r24
   109a0:	88 30       	cpi	r24, 0x08	; 8
   109a2:	91 05       	cpc	r25, r1
   109a4:	68 f0       	brcs	.+26     	; 0x109c0 <gpib_disable_PPR+0x36>
   109a6:	ed b7       	in	r30, 0x3d	; 61
   109a8:	fe b7       	in	r31, 0x3e	; 62
   109aa:	95 83       	std	Z+5, r25	; 0x05
   109ac:	84 83       	std	Z+4, r24	; 0x04
   109ae:	89 ee       	ldi	r24, 0xE9	; 233
   109b0:	91 e1       	ldi	r25, 0x11	; 17
   109b2:	a0 e0       	ldi	r26, 0x00	; 0
   109b4:	81 83       	std	Z+1, r24	; 0x01
   109b6:	92 83       	std	Z+2, r25	; 0x02
   109b8:	a3 83       	std	Z+3, r26	; 0x03
   109ba:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   109be:	15 c0       	rjmp	.+42     	; 0x109ea <gpib_disable_PPR+0x60>
   109c0:	81 dd       	rcall	.-1278   	; 0x104c4 <ppr_bit_clr>
   109c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   109c6:	81 ff       	sbrs	r24, 1
   109c8:	10 c0       	rjmp	.+32     	; 0x109ea <gpib_disable_PPR+0x60>
   109ca:	55 dd       	rcall	.-1366   	; 0x10476 <ppr_reg>
   109cc:	90 e0       	ldi	r25, 0x00	; 0
   109ce:	ed b7       	in	r30, 0x3d	; 61
   109d0:	fe b7       	in	r31, 0x3e	; 62
   109d2:	97 83       	std	Z+7, r25	; 0x07
   109d4:	86 83       	std	Z+6, r24	; 0x06
   109d6:	d5 83       	std	Z+5, r29	; 0x05
   109d8:	c4 83       	std	Z+4, r28	; 0x04
   109da:	8e ec       	ldi	r24, 0xCE	; 206
   109dc:	91 e1       	ldi	r25, 0x11	; 17
   109de:	a0 e0       	ldi	r26, 0x00	; 0
   109e0:	81 83       	std	Z+1, r24	; 0x01
   109e2:	92 83       	std	Z+2, r25	; 0x02
   109e4:	a3 83       	std	Z+3, r26	; 0x03
   109e6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   109ea:	cd b7       	in	r28, 0x3d	; 61
   109ec:	de b7       	in	r29, 0x3e	; 62
   109ee:	27 96       	adiw	r28, 0x07	; 7
   109f0:	e2 e0       	ldi	r30, 0x02	; 2
   109f2:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000109f6 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   109f6:	cf 93       	push	r28
   109f8:	df 93       	push	r29
   109fa:	00 d0       	rcall	.+0      	; 0x109fc <gpib_unread+0x6>
   109fc:	1f 92       	push	r1
   109fe:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10a00:	80 91 67 19 	lds	r24, 0x1967	; 0x801967 <gpib_unread_f>
   10a04:	81 11       	cpse	r24, r1
   10a06:	08 c0       	rjmp	.+16     	; 0x10a18 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10a08:	d0 93 fb 1e 	sts	0x1EFB, r29	; 0x801efb <gpib_unread_data+0x1>
   10a0c:	c0 93 fa 1e 	sts	0x1EFA, r28	; 0x801efa <gpib_unread_data>
        gpib_unread_f = 1;
   10a10:	81 e0       	ldi	r24, 0x01	; 1
   10a12:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <gpib_unread_f>
   10a16:	12 c0       	rjmp	.+36     	; 0x10a3c <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10a18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a1c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10a20:	85 70       	andi	r24, 0x05	; 5
   10a22:	99 27       	eor	r25, r25
   10a24:	89 2b       	or	r24, r25
   10a26:	51 f0       	breq	.+20     	; 0x10a3c <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10a28:	80 ea       	ldi	r24, 0xA0	; 160
   10a2a:	91 e1       	ldi	r25, 0x11	; 17
   10a2c:	a0 e0       	ldi	r26, 0x00	; 0
   10a2e:	ed b7       	in	r30, 0x3d	; 61
   10a30:	fe b7       	in	r31, 0x3e	; 62
   10a32:	81 83       	std	Z+1, r24	; 0x01
   10a34:	92 83       	std	Z+2, r25	; 0x02
   10a36:	a3 83       	std	Z+3, r26	; 0x03
   10a38:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }
    return(ch);
}
   10a3c:	ce 01       	movw	r24, r28
   10a3e:	cd b7       	in	r28, 0x3d	; 61
   10a40:	de b7       	in	r29, 0x3e	; 62
   10a42:	23 96       	adiw	r28, 0x03	; 3
   10a44:	e2 e0       	ldi	r30, 0x02	; 2
   10a46:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00010a4a <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10a4a:	11 b8       	out	0x01, r1	; 1
   10a4c:	80 b1       	in	r24, 0x00	; 0
   10a4e:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10a50:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10a52:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10a54:	08 95       	ret

00010a56 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10a56:	4e 99       	sbic	0x09, 6	; 9
   10a58:	03 c0       	rjmp	.+6      	; 0x10a60 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10a5a:	80 e0       	ldi	r24, 0x00	; 0
   10a5c:	94 e0       	ldi	r25, 0x04	; 4
   10a5e:	02 c0       	rjmp	.+4      	; 0x10a64 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10a60:	80 e0       	ldi	r24, 0x00	; 0
   10a62:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10a64:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10a66:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10a68:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10a6a:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10a6c:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10a6e:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10a70:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10a72:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10a74:	08 95       	ret

00010a76 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10a76:	19 99       	sbic	0x03, 1	; 3
   10a78:	03 c0       	rjmp	.+6      	; 0x10a80 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10a7a:	80 e0       	ldi	r24, 0x00	; 0
   10a7c:	90 e2       	ldi	r25, 0x20	; 32
   10a7e:	02 c0       	rjmp	.+4      	; 0x10a84 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10a80:	80 e0       	ldi	r24, 0x00	; 0
   10a82:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10a84:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10a86:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10a88:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10a8a:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10a8c:	08 95       	ret

00010a8e <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10a8e:	2f 92       	push	r2
   10a90:	3f 92       	push	r3
   10a92:	4f 92       	push	r4
   10a94:	6f 92       	push	r6
   10a96:	7f 92       	push	r7
   10a98:	8f 92       	push	r8
   10a9a:	af 92       	push	r10
   10a9c:	bf 92       	push	r11
   10a9e:	cf 92       	push	r12
   10aa0:	df 92       	push	r13
   10aa2:	ef 92       	push	r14
   10aa4:	1f 93       	push	r17
   10aa6:	cf 93       	push	r28
   10aa8:	df 93       	push	r29
   10aaa:	cd b7       	in	r28, 0x3d	; 61
   10aac:	de b7       	in	r29, 0x3e	; 62
   10aae:	2a 97       	sbiw	r28, 0x0a	; 10
   10ab0:	0f b6       	in	r0, 0x3f	; 63
   10ab2:	f8 94       	cli
   10ab4:	de bf       	out	0x3e, r29	; 62
   10ab6:	0f be       	out	0x3f, r0	; 63
   10ab8:	cd bf       	out	0x3d, r28	; 61
   10aba:	9a 87       	std	Y+10, r25	; 0x0a
   10abc:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10abe:	64 ef       	ldi	r22, 0xF4	; 244
   10ac0:	71 e0       	ldi	r23, 0x01	; 1
   10ac2:	80 e0       	ldi	r24, 0x00	; 0
   10ac4:	90 e0       	ldi	r25, 0x00	; 0
   10ac6:	8c de       	rcall	.-744    	; 0x107e0 <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10ac8:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10aca:	8b e9       	ldi	r24, 0x9B	; 155
   10acc:	90 e1       	ldi	r25, 0x10	; 16
   10ace:	6c 01       	movw	r12, r24
   10ad0:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ad2:	8a ec       	ldi	r24, 0xCA	; 202
   10ad4:	90 e1       	ldi	r25, 0x10	; 16
   10ad6:	3c 01       	movw	r6, r24
   10ad8:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10ada:	aa 24       	eor	r10, r10
   10adc:	a3 94       	inc	r10
   10ade:	b1 2c       	mov	r11, r1
   10ae0:	82 e4       	ldi	r24, 0x42	; 66
   10ae2:	91 e1       	ldi	r25, 0x11	; 17
   10ae4:	1c 01       	movw	r2, r24
   10ae6:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ae8:	86 e0       	ldi	r24, 0x06	; 6
   10aea:	91 e1       	ldi	r25, 0x11	; 17
   10aec:	9c 01       	movw	r18, r24
   10aee:	40 e0       	ldi	r20, 0x00	; 0
   10af0:	2e 83       	std	Y+6, r18	; 0x06
   10af2:	3f 83       	std	Y+7, r19	; 0x07
   10af4:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10af6:	80 e0       	ldi	r24, 0x00	; 0
   10af8:	0e 94 b9 28 	call	0x5172	; 0x5172 <uart_keyhit>
   10afc:	89 2b       	or	r24, r25
   10afe:	09 f0       	breq	.+2      	; 0x10b02 <gpib_write_byte+0x74>
   10b00:	e7 c0       	rjmp	.+462    	; 0x10cd0 <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10b02:	4c 99       	sbic	0x09, 4	; 9
   10b04:	19 c0       	rjmp	.+50     	; 0x10b38 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10b06:	89 85       	ldd	r24, Y+9	; 0x09
   10b08:	9a 85       	ldd	r25, Y+10	; 0x0a
   10b0a:	90 61       	ori	r25, 0x10	; 16
   10b0c:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10b0e:	89 87       	std	Y+9, r24	; 0x09
   10b10:	71 de       	rcall	.-798    	; 0x107f4 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10b12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b16:	80 ff       	sbrs	r24, 0
   10b18:	db c0       	rjmp	.+438    	; 0x10cd0 <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10b1a:	81 2f       	mov	r24, r17
   10b1c:	90 e0       	ldi	r25, 0x00	; 0
   10b1e:	ed b7       	in	r30, 0x3d	; 61
   10b20:	fe b7       	in	r31, 0x3e	; 62
   10b22:	95 83       	std	Z+5, r25	; 0x05
   10b24:	84 83       	std	Z+4, r24	; 0x04
   10b26:	81 e8       	ldi	r24, 0x81	; 129
   10b28:	91 e1       	ldi	r25, 0x11	; 17
   10b2a:	a0 e0       	ldi	r26, 0x00	; 0
   10b2c:	81 83       	std	Z+1, r24	; 0x01
   10b2e:	92 83       	std	Z+2, r25	; 0x02
   10b30:	a3 83       	std	Z+3, r26	; 0x03
   10b32:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   10b36:	cc c0       	rjmp	.+408    	; 0x10cd0 <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10b38:	81 2f       	mov	r24, r17
   10b3a:	90 e0       	ldi	r25, 0x00	; 0
   10b3c:	89 30       	cpi	r24, 0x09	; 9
   10b3e:	91 05       	cpc	r25, r1
   10b40:	08 f0       	brcs	.+2      	; 0x10b44 <gpib_write_byte+0xb6>
   10b42:	be c0       	rjmp	.+380    	; 0x10cc0 <gpib_write_byte+0x232>
   10b44:	fc 01       	movw	r30, r24
   10b46:	e3 54       	subi	r30, 0x43	; 67
   10b48:	ff 4f       	sbci	r31, 0xFF	; 255
   10b4a:	0c 94 bd e2 	jmp	0x1c57a	; 0x1c57a <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10b4e:	a8 de       	rcall	.-688    	; 0x108a0 <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10b50:	21 98       	cbi	0x04, 1	; 4
   10b52:	29 9a       	sbi	0x05, 1	; 5
   10b54:	fd e0       	ldi	r31, 0x0D	; 13
   10b56:	fa 95       	dec	r31
   10b58:	f1 f7       	brne	.-4      	; 0x10b56 <gpib_write_byte+0xc8>
   10b5a:	00 00       	nop
   10b5c:	06 c0       	rjmp	.+12     	; 0x10b6a <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10b5e:	4a 9b       	sbis	0x09, 2	; 9
   10b60:	02 c0       	rjmp	.+4      	; 0x10b66 <gpib_write_byte+0xd8>
   10b62:	4b 99       	sbic	0x09, 3	; 9
   10b64:	17 c0       	rjmp	.+46     	; 0x10b94 <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10b66:	4e 9b       	sbis	0x09, 6	; 9
   10b68:	07 c0       	rjmp	.+14     	; 0x10b78 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10b6a:	64 ef       	ldi	r22, 0xF4	; 244
   10b6c:	71 e0       	ldi	r23, 0x01	; 1
   10b6e:	80 e0       	ldi	r24, 0x00	; 0
   10b70:	90 e0       	ldi	r25, 0x00	; 0
   10b72:	36 de       	rcall	.-916    	; 0x107e0 <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10b74:	12 e0       	ldi	r17, 0x02	; 2
   10b76:	bf cf       	rjmp	.-130    	; 0x10af6 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10b78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b7c:	80 ff       	sbrs	r24, 0
   10b7e:	bb cf       	rjmp	.-138    	; 0x10af6 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10b80:	ed b7       	in	r30, 0x3d	; 61
   10b82:	fe b7       	in	r31, 0x3e	; 62
   10b84:	b5 82       	std	Z+5, r11	; 0x05
   10b86:	a4 82       	std	Z+4, r10	; 0x04
   10b88:	21 82       	std	Z+1, r2	; 0x01
   10b8a:	32 82       	std	Z+2, r3	; 0x02
   10b8c:	43 82       	std	Z+3, r4	; 0x03
   10b8e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   10b92:	b1 cf       	rjmp	.-158    	; 0x10af6 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10b94:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10b98:	88 23       	and	r24, r24
   10b9a:	09 f4       	brne	.+2      	; 0x10b9e <gpib_write_byte+0x110>
   10b9c:	ac cf       	rjmp	.-168    	; 0x10af6 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ba2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ba6:	85 70       	andi	r24, 0x05	; 5
   10ba8:	99 27       	eor	r25, r25
   10baa:	89 2b       	or	r24, r25
   10bac:	c1 f1       	breq	.+112    	; 0x10c1e <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10bae:	2e 81       	ldd	r18, Y+6	; 0x06
   10bb0:	3f 81       	ldd	r19, Y+7	; 0x07
   10bb2:	48 85       	ldd	r20, Y+8	; 0x08
   10bb4:	ed b7       	in	r30, 0x3d	; 61
   10bb6:	fe b7       	in	r31, 0x3e	; 62
   10bb8:	21 83       	std	Z+1, r18	; 0x01
   10bba:	32 83       	std	Z+2, r19	; 0x02
   10bbc:	43 83       	std	Z+3, r20	; 0x03
   10bbe:	2d c0       	rjmp	.+90     	; 0x10c1a <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10bc0:	89 85       	ldd	r24, Y+9	; 0x09
   10bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
   10bc4:	90 ff       	sbrs	r25, 0
   10bc6:	03 c0       	rjmp	.+6      	; 0x10bce <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10bc8:	28 98       	cbi	0x05, 0	; 5
   10bca:	20 9a       	sbi	0x04, 0	; 4
   10bcc:	02 c0       	rjmp	.+4      	; 0x10bd2 <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10bce:	20 98       	cbi	0x04, 0	; 4
   10bd0:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10bd2:	8f ef       	ldi	r24, 0xFF	; 255
   10bd4:	81 b9       	out	0x01, r24	; 1
   10bd6:	89 85       	ldd	r24, Y+9	; 0x09
   10bd8:	80 95       	com	r24
   10bda:	82 b9       	out	0x02, r24	; 2
   10bdc:	9d e0       	ldi	r25, 0x0D	; 13
   10bde:	9a 95       	dec	r25
   10be0:	f1 f7       	brne	.-4      	; 0x10bde <gpib_write_byte+0x150>
   10be2:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10be4:	64 ef       	ldi	r22, 0xF4	; 244
   10be6:	71 e0       	ldi	r23, 0x01	; 1
   10be8:	80 e0       	ldi	r24, 0x00	; 0
   10bea:	90 e0       	ldi	r25, 0x00	; 0
   10bec:	f9 dd       	rcall	.-1038   	; 0x107e0 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10bee:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10bf0:	82 cf       	rjmp	.-252    	; 0x10af6 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10bf2:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10bf4:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10bf6:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10bfa:	88 23       	and	r24, r24
   10bfc:	09 f4       	brne	.+2      	; 0x10c00 <gpib_write_byte+0x172>
   10bfe:	7b cf       	rjmp	.-266    	; 0x10af6 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c04:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c08:	85 70       	andi	r24, 0x05	; 5
   10c0a:	99 27       	eor	r25, r25
   10c0c:	89 2b       	or	r24, r25
   10c0e:	39 f0       	breq	.+14     	; 0x10c1e <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c10:	ed b7       	in	r30, 0x3d	; 61
   10c12:	fe b7       	in	r31, 0x3e	; 62
   10c14:	61 82       	std	Z+1, r6	; 0x01
   10c16:	72 82       	std	Z+2, r7	; 0x02
   10c18:	83 82       	std	Z+3, r8	; 0x03
   10c1a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10c1e:	29 85       	ldd	r18, Y+9	; 0x09
   10c20:	3a 85       	ldd	r19, Y+10	; 0x0a
   10c22:	30 64       	ori	r19, 0x40	; 64
   10c24:	3a 87       	std	Y+10, r19	; 0x0a
   10c26:	29 87       	std	Y+9, r18	; 0x09
   10c28:	51 c0       	rjmp	.+162    	; 0x10ccc <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10c2a:	29 98       	cbi	0x05, 1	; 5
   10c2c:	21 9a       	sbi	0x04, 1	; 4
   10c2e:	3d e0       	ldi	r19, 0x0D	; 13
   10c30:	3a 95       	dec	r19
   10c32:	f1 f7       	brne	.-4      	; 0x10c30 <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10c34:	00 00       	nop
   10c36:	64 ef       	ldi	r22, 0xF4	; 244
   10c38:	71 e0       	ldi	r23, 0x01	; 1
   10c3a:	80 e0       	ldi	r24, 0x00	; 0
   10c3c:	90 e0       	ldi	r25, 0x00	; 0
   10c3e:	d0 dd       	rcall	.-1120   	; 0x107e0 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10c40:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10c42:	59 cf       	rjmp	.-334    	; 0x10af6 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10c44:	4b 99       	sbic	0x09, 3	; 9
   10c46:	40 c0       	rjmp	.+128    	; 0x10cc8 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c48:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10c4c:	88 23       	and	r24, r24
   10c4e:	09 f4       	brne	.+2      	; 0x10c52 <gpib_write_byte+0x1c4>
   10c50:	52 cf       	rjmp	.-348    	; 0x10af6 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10c52:	89 85       	ldd	r24, Y+9	; 0x09
   10c54:	9a 85       	ldd	r25, Y+10	; 0x0a
   10c56:	90 64       	ori	r25, 0x40	; 64
   10c58:	9a 87       	std	Y+10, r25	; 0x0a
   10c5a:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c60:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c64:	85 70       	andi	r24, 0x05	; 5
   10c66:	99 27       	eor	r25, r25
   10c68:	89 2b       	or	r24, r25
   10c6a:	81 f1       	breq	.+96     	; 0x10ccc <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10c6c:	ed b7       	in	r30, 0x3d	; 61
   10c6e:	fe b7       	in	r31, 0x3e	; 62
   10c70:	c1 82       	std	Z+1, r12	; 0x01
   10c72:	d2 82       	std	Z+2, r13	; 0x02
   10c74:	e3 82       	std	Z+3, r14	; 0x03
   10c76:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   10c7a:	28 c0       	rjmp	.+80     	; 0x10ccc <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10c7c:	21 98       	cbi	0x04, 1	; 4
   10c7e:	29 9a       	sbi	0x05, 1	; 5
   10c80:	fd e0       	ldi	r31, 0x0D	; 13
   10c82:	fa 95       	dec	r31
   10c84:	f1 f7       	brne	.-4      	; 0x10c82 <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10c86:	00 00       	nop
   10c88:	64 ef       	ldi	r22, 0xF4	; 244
   10c8a:	71 e0       	ldi	r23, 0x01	; 1
   10c8c:	80 e0       	ldi	r24, 0x00	; 0
   10c8e:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10c90:	a7 dd       	rcall	.-1202   	; 0x107e0 <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10c92:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10c94:	30 cf       	rjmp	.-416    	; 0x10af6 <gpib_write_byte+0x68>
   10c96:	81 e0       	ldi	r24, 0x01	; 1
   10c98:	e5 dd       	rcall	.-1078   	; 0x10864 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c9e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ca2:	85 70       	andi	r24, 0x05	; 5
   10ca4:	99 27       	eor	r25, r25
   10ca6:	89 2b       	or	r24, r25
   10ca8:	99 f0       	breq	.+38     	; 0x10cd0 <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   10caa:	88 e8       	ldi	r24, 0x88	; 136
   10cac:	90 e1       	ldi	r25, 0x10	; 16
   10cae:	a0 e0       	ldi	r26, 0x00	; 0
   10cb0:	ed b7       	in	r30, 0x3d	; 61
   10cb2:	fe b7       	in	r31, 0x3e	; 62
   10cb4:	81 83       	std	Z+1, r24	; 0x01
   10cb6:	92 83       	std	Z+2, r25	; 0x02
   10cb8:	a3 83       	std	Z+3, r26	; 0x03
   10cba:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   10cbe:	08 c0       	rjmp	.+16     	; 0x10cd0 <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10cc0:	19 30       	cpi	r17, 0x09	; 9
   10cc2:	09 f0       	breq	.+2      	; 0x10cc6 <gpib_write_byte+0x238>
   10cc4:	18 cf       	rjmp	.-464    	; 0x10af6 <gpib_write_byte+0x68>
   10cc6:	04 c0       	rjmp	.+8      	; 0x10cd0 <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10cc8:	16 e0       	ldi	r17, 0x06	; 6
   10cca:	15 cf       	rjmp	.-470    	; 0x10af6 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10ccc:	18 e0       	ldi	r17, 0x08	; 8
   10cce:	13 cf       	rjmp	.-474    	; 0x10af6 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10cd0:	89 85       	ldd	r24, Y+9	; 0x09
   10cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
   10cd4:	2a 96       	adiw	r28, 0x0a	; 10
   10cd6:	0f b6       	in	r0, 0x3f	; 63
   10cd8:	f8 94       	cli
   10cda:	de bf       	out	0x3e, r29	; 62
   10cdc:	0f be       	out	0x3f, r0	; 63
   10cde:	cd bf       	out	0x3d, r28	; 61
   10ce0:	df 91       	pop	r29
   10ce2:	cf 91       	pop	r28
   10ce4:	1f 91       	pop	r17
   10ce6:	ef 90       	pop	r14
   10ce8:	df 90       	pop	r13
   10cea:	cf 90       	pop	r12
   10cec:	bf 90       	pop	r11
   10cee:	af 90       	pop	r10
   10cf0:	8f 90       	pop	r8
   10cf2:	7f 90       	pop	r7
   10cf4:	6f 90       	pop	r6
   10cf6:	4f 90       	pop	r4
   10cf8:	3f 90       	pop	r3
   10cfa:	2f 90       	pop	r2
   10cfc:	08 95       	ret

00010cfe <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10cfe:	cf 93       	push	r28
   10d00:	df 93       	push	r29
   10d02:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10d04:	89 2b       	or	r24, r25
   10d06:	21 f4       	brne	.+8      	; 0x10d10 <gpib_decode_header+0x12>
        fo = stdout;
   10d08:	c0 91 c9 1c 	lds	r28, 0x1CC9	; 0x801cc9 <__iob+0x2>
   10d0c:	d0 91 ca 1c 	lds	r29, 0x1CCA	; 0x801cca <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10d10:	be 01       	movw	r22, r28
   10d12:	81 e0       	ldi	r24, 0x01	; 1
   10d14:	9c e0       	ldi	r25, 0x0C	; 12
   10d16:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10d1a:	be 01       	movw	r22, r28
   10d1c:	8e e2       	ldi	r24, 0x2E	; 46
   10d1e:	9c e0       	ldi	r25, 0x0C	; 12
   10d20:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10d24:	be 01       	movw	r22, r28
   10d26:	8e e3       	ldi	r24, 0x3E	; 62
   10d28:	9c e0       	ldi	r25, 0x0C	; 12
   10d2a:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10d2e:	be 01       	movw	r22, r28
   10d30:	82 e5       	ldi	r24, 0x52	; 82
   10d32:	9c e0       	ldi	r25, 0x0C	; 12
   10d34:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10d38:	be 01       	movw	r22, r28
   10d3a:	85 e7       	ldi	r24, 0x75	; 117
   10d3c:	9c e0       	ldi	r25, 0x0C	; 12
   10d3e:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"     A = ATN\n");
   10d42:	be 01       	movw	r22, r28
   10d44:	8f e9       	ldi	r24, 0x9F	; 159
   10d46:	9c e0       	ldi	r25, 0x0C	; 12
   10d48:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"      E = EOI\n");
   10d4c:	be 01       	movw	r22, r28
   10d4e:	8d ea       	ldi	r24, 0xAD	; 173
   10d50:	9c e0       	ldi	r25, 0x0C	; 12
   10d52:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10d56:	be 01       	movw	r22, r28
   10d58:	8c eb       	ldi	r24, 0xBC	; 188
   10d5a:	9c e0       	ldi	r25, 0x0C	; 12
   10d5c:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"        R = REN\n");
   10d60:	be 01       	movw	r22, r28
   10d62:	8c ec       	ldi	r24, 0xCC	; 204
   10d64:	9c e0       	ldi	r25, 0x0C	; 12
   10d66:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"         I = IFC\n");
   10d6a:	be 01       	movw	r22, r28
   10d6c:	8d ed       	ldi	r24, 0xDD	; 221
   10d6e:	9c e0       	ldi	r25, 0x0C	; 12
   10d70:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10d74:	be 01       	movw	r22, r28
   10d76:	8f ee       	ldi	r24, 0xEF	; 239
   10d78:	9c e0       	ldi	r25, 0x0C	; 12
   10d7a:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10d7e:	be 01       	movw	r22, r28
   10d80:	81 e1       	ldi	r24, 0x11	; 17
   10d82:	9d e0       	ldi	r25, 0x0D	; 13
   10d84:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10d88:	be 01       	movw	r22, r28
   10d8a:	89 e2       	ldi	r24, 0x29	; 41
   10d8c:	9d e0       	ldi	r25, 0x0D	; 13
   10d8e:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10d92:	be 01       	movw	r22, r28
   10d94:	84 e4       	ldi	r24, 0x44	; 68
   10d96:	9d e0       	ldi	r25, 0x0D	; 13
   10d98:	0e 94 d9 74 	call	0xe9b2	; 0xe9b2 <fputs>
}
   10d9c:	df 91       	pop	r29
   10d9e:	cf 91       	pop	r28
   10da0:	08 95       	ret

00010da2 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10da2:	a9 e8       	ldi	r26, 0x89	; 137
   10da4:	b0 e0       	ldi	r27, 0x00	; 0
   10da6:	e7 ed       	ldi	r30, 0xD7	; 215
   10da8:	f6 e8       	ldi	r31, 0x86	; 134
   10daa:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
   10dae:	8c 01       	movw	r16, r24
   10db0:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10db2:	1a 86       	std	Y+10, r1	; 0x0a
   10db4:	4c 01       	movw	r8, r24
   10db6:	88 24       	eor	r8, r8
   10db8:	44 e0       	ldi	r20, 0x04	; 4
   10dba:	94 22       	and	r9, r20
   10dbc:	ce 01       	movw	r24, r28
   10dbe:	0a 96       	adiw	r24, 0x0a	; 10
   10dc0:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10dc2:	62 30       	cpi	r22, 0x02	; 2
   10dc4:	71 05       	cpc	r23, r1
   10dc6:	e8 f4       	brcc	.+58     	; 0x10e02 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10dc8:	81 14       	cp	r8, r1
   10dca:	91 04       	cpc	r9, r1
   10dcc:	29 f4       	brne	.+10     	; 0x10dd8 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10dce:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10dd0:	90 ee       	ldi	r25, 0xE0	; 224
   10dd2:	90 0f       	add	r25, r16
   10dd4:	9f 35       	cpi	r25, 0x5F	; 95
   10dd6:	08 f0       	brcs	.+2      	; 0x10dda <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10dd8:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10dda:	90 e0       	ldi	r25, 0x00	; 0
   10ddc:	ed b7       	in	r30, 0x3d	; 61
   10dde:	fe b7       	in	r31, 0x3e	; 62
   10de0:	91 87       	std	Z+9, r25	; 0x09
   10de2:	80 87       	std	Z+8, r24	; 0x08
   10de4:	c8 01       	movw	r24, r16
   10de6:	99 27       	eor	r25, r25
   10de8:	97 83       	std	Z+7, r25	; 0x07
   10dea:	86 83       	std	Z+6, r24	; 0x06
   10dec:	81 e6       	ldi	r24, 0x61	; 97
   10dee:	90 e1       	ldi	r25, 0x10	; 16
   10df0:	a0 e0       	ldi	r26, 0x00	; 0
   10df2:	83 83       	std	Z+3, r24	; 0x03
   10df4:	94 83       	std	Z+4, r25	; 0x04
   10df6:	a5 83       	std	Z+5, r26	; 0x05
   10df8:	f2 82       	std	Z+2, r15	; 0x02
   10dfa:	e1 82       	std	Z+1, r14	; 0x01
   10dfc:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
   10e00:	0c c0       	rjmp	.+24     	; 0x10e1a <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10e02:	8b e5       	ldi	r24, 0x5B	; 91
   10e04:	90 e1       	ldi	r25, 0x10	; 16
   10e06:	a0 e0       	ldi	r26, 0x00	; 0
   10e08:	ed b7       	in	r30, 0x3d	; 61
   10e0a:	fe b7       	in	r31, 0x3e	; 62
   10e0c:	83 83       	std	Z+3, r24	; 0x03
   10e0e:	94 83       	std	Z+4, r25	; 0x04
   10e10:	a5 83       	std	Z+5, r26	; 0x05
   10e12:	f2 82       	std	Z+2, r15	; 0x02
   10e14:	e1 82       	std	Z+1, r14	; 0x01
   10e16:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
    }

    tmp = str + strlen(str);
   10e1a:	f7 01       	movw	r30, r14
   10e1c:	01 90       	ld	r0, Z+
   10e1e:	00 20       	and	r0, r0
   10e20:	e9 f7       	brne	.-6      	; 0x10e1c <gpib_trace_display+0x7a>
   10e22:	31 97       	sbiw	r30, 0x01	; 1
   10e24:	cf 01       	movw	r24, r30
   10e26:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10e28:	81 14       	cp	r8, r1
   10e2a:	91 04       	cpc	r9, r1
   10e2c:	11 f0       	breq	.+4      	; 0x10e32 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10e2e:	21 e4       	ldi	r18, 0x41	; 65
   10e30:	01 c0       	rjmp	.+2      	; 0x10e34 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10e32:	2d e2       	ldi	r18, 0x2D	; 45
   10e34:	20 83       	st	Z, r18
   10e36:	dc 01       	movw	r26, r24
   10e38:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10e3a:	10 ff       	sbrs	r17, 0
   10e3c:	02 c0       	rjmp	.+4      	; 0x10e42 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10e3e:	25 e4       	ldi	r18, 0x45	; 69
   10e40:	01 c0       	rjmp	.+2      	; 0x10e44 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10e42:	2d e2       	ldi	r18, 0x2D	; 45
   10e44:	fc 01       	movw	r30, r24
   10e46:	20 83       	st	Z, r18
   10e48:	fd 01       	movw	r30, r26
   10e4a:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10e4c:	11 ff       	sbrs	r17, 1
   10e4e:	02 c0       	rjmp	.+4      	; 0x10e54 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10e50:	83 e5       	ldi	r24, 0x53	; 83
   10e52:	01 c0       	rjmp	.+2      	; 0x10e56 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10e54:	8d e2       	ldi	r24, 0x2D	; 45
   10e56:	8c 93       	st	X, r24
   10e58:	df 01       	movw	r26, r30
   10e5a:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10e5c:	13 ff       	sbrs	r17, 3
   10e5e:	02 c0       	rjmp	.+4      	; 0x10e64 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10e60:	82 e5       	ldi	r24, 0x52	; 82
   10e62:	01 c0       	rjmp	.+2      	; 0x10e66 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10e64:	8d e2       	ldi	r24, 0x2D	; 45
   10e66:	80 83       	st	Z, r24
   10e68:	fd 01       	movw	r30, r26
   10e6a:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10e6c:	14 ff       	sbrs	r17, 4
   10e6e:	02 c0       	rjmp	.+4      	; 0x10e74 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10e70:	89 e4       	ldi	r24, 0x49	; 73
   10e72:	01 c0       	rjmp	.+2      	; 0x10e76 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10e74:	8d e2       	ldi	r24, 0x2D	; 45
   10e76:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10e78:	a1 14       	cp	r10, r1
   10e7a:	b1 04       	cpc	r11, r1
   10e7c:	d1 f4       	brne	.+52     	; 0x10eb2 <gpib_trace_display+0x110>
   10e7e:	df 01       	movw	r26, r30
   10e80:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10e82:	15 ff       	sbrs	r17, 5
   10e84:	02 c0       	rjmp	.+4      	; 0x10e8a <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10e86:	80 e5       	ldi	r24, 0x50	; 80
   10e88:	01 c0       	rjmp	.+2      	; 0x10e8c <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10e8a:	8d e2       	ldi	r24, 0x2D	; 45
   10e8c:	80 83       	st	Z, r24
   10e8e:	fd 01       	movw	r30, r26
   10e90:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10e92:	16 ff       	sbrs	r17, 6
   10e94:	02 c0       	rjmp	.+4      	; 0x10e9a <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10e96:	84 e5       	ldi	r24, 0x54	; 84
   10e98:	01 c0       	rjmp	.+2      	; 0x10e9c <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10e9a:	8d e2       	ldi	r24, 0x2D	; 45
   10e9c:	8c 93       	st	X, r24
   10e9e:	cf 01       	movw	r24, r30
   10ea0:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10ea2:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10ea4:	17 ff       	sbrs	r17, 7
   10ea6:	02 c0       	rjmp	.+4      	; 0x10eac <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10ea8:	82 e4       	ldi	r24, 0x42	; 66
   10eaa:	01 c0       	rjmp	.+2      	; 0x10eae <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10eac:	8d e2       	ldi	r24, 0x2D	; 45
   10eae:	80 83       	st	Z, r24
   10eb0:	08 c0       	rjmp	.+16     	; 0x10ec2 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   10eb2:	8d e2       	ldi	r24, 0x2D	; 45
   10eb4:	80 83       	st	Z, r24
        *tmp++ = '-';
   10eb6:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10eb8:	6f 01       	movw	r12, r30
   10eba:	43 e0       	ldi	r20, 0x03	; 3
   10ebc:	c4 0e       	add	r12, r20
   10ebe:	d1 1c       	adc	r13, r1
   10ec0:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   10ec2:	f6 01       	movw	r30, r12
   10ec4:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   10ec6:	f1 e0       	ldi	r31, 0x01	; 1
   10ec8:	af 1a       	sub	r10, r31
   10eca:	b1 08       	sbc	r11, r1
   10ecc:	42 e0       	ldi	r20, 0x02	; 2
   10ece:	a4 16       	cp	r10, r20
   10ed0:	b1 04       	cpc	r11, r1
   10ed2:	f0 f4       	brcc	.+60     	; 0x10f10 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   10ed4:	15 ff       	sbrs	r17, 5
   10ed6:	03 c0       	rjmp	.+6      	; 0x10ede <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   10ed8:	61 e6       	ldi	r22, 0x61	; 97
   10eda:	7d e0       	ldi	r23, 0x0D	; 13
   10edc:	02 c0       	rjmp	.+4      	; 0x10ee2 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   10ede:	65 e6       	ldi	r22, 0x65	; 101
   10ee0:	74 e0       	ldi	r23, 0x04	; 4
   10ee2:	c7 01       	movw	r24, r14
   10ee4:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>
        if(status & NRFD_FLAG)
   10ee8:	16 ff       	sbrs	r17, 6
   10eea:	03 c0       	rjmp	.+6      	; 0x10ef2 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   10eec:	67 e6       	ldi	r22, 0x67	; 103
   10eee:	7d e0       	ldi	r23, 0x0D	; 13
   10ef0:	02 c0       	rjmp	.+4      	; 0x10ef6 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   10ef2:	65 e6       	ldi	r22, 0x65	; 101
   10ef4:	74 e0       	ldi	r23, 0x04	; 4
   10ef6:	c7 01       	movw	r24, r14
   10ef8:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>
        if(status & NDAC_FLAG)
   10efc:	17 ff       	sbrs	r17, 7
   10efe:	03 c0       	rjmp	.+6      	; 0x10f06 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   10f00:	6d e6       	ldi	r22, 0x6D	; 109
   10f02:	7d e0       	ldi	r23, 0x0D	; 13
   10f04:	02 c0       	rjmp	.+4      	; 0x10f0a <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   10f06:	65 e6       	ldi	r22, 0x65	; 101
   10f08:	74 e0       	ldi	r23, 0x04	; 4
   10f0a:	c7 01       	movw	r24, r14
   10f0c:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>
    }

    if( (status & ATN_FLAG) )
   10f10:	81 14       	cp	r8, r1
   10f12:	91 04       	cpc	r9, r1
   10f14:	09 f4       	brne	.+2      	; 0x10f18 <gpib_trace_display+0x176>
   10f16:	5a c0       	rjmp	.+180    	; 0x10fcc <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   10f18:	c8 01       	movw	r24, r16
   10f1a:	8f 77       	andi	r24, 0x7F	; 127
   10f1c:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   10f1e:	9c 01       	movw	r18, r24
   10f20:	20 52       	subi	r18, 0x20	; 32
   10f22:	31 09       	sbc	r19, r1
   10f24:	2f 31       	cpi	r18, 0x1F	; 31
   10f26:	31 05       	cpc	r19, r1
   10f28:	48 f4       	brcc	.+18     	; 0x10f3c <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   10f2a:	0f 71       	andi	r16, 0x1F	; 31
   10f2c:	11 27       	eor	r17, r17
   10f2e:	ed b7       	in	r30, 0x3d	; 61
   10f30:	fe b7       	in	r31, 0x3e	; 62
   10f32:	17 83       	std	Z+7, r17	; 0x07
   10f34:	06 83       	std	Z+6, r16	; 0x06
   10f36:	80 e5       	ldi	r24, 0x50	; 80
   10f38:	90 e1       	ldi	r25, 0x10	; 16
   10f3a:	0e c0       	rjmp	.+28     	; 0x10f58 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   10f3c:	9c 01       	movw	r18, r24
   10f3e:	20 54       	subi	r18, 0x40	; 64
   10f40:	31 09       	sbc	r19, r1
   10f42:	2f 30       	cpi	r18, 0x0F	; 15
   10f44:	31 05       	cpc	r19, r1
   10f46:	88 f4       	brcc	.+34     	; 0x10f6a <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   10f48:	0f 71       	andi	r16, 0x1F	; 31
   10f4a:	11 27       	eor	r17, r17
   10f4c:	ed b7       	in	r30, 0x3d	; 61
   10f4e:	fe b7       	in	r31, 0x3e	; 62
   10f50:	17 83       	std	Z+7, r17	; 0x07
   10f52:	06 83       	std	Z+6, r16	; 0x06
   10f54:	85 e4       	ldi	r24, 0x45	; 69
   10f56:	90 e1       	ldi	r25, 0x10	; 16
   10f58:	a0 e0       	ldi	r26, 0x00	; 0
   10f5a:	83 83       	std	Z+3, r24	; 0x03
   10f5c:	94 83       	std	Z+4, r25	; 0x04
   10f5e:	a5 83       	std	Z+5, r26	; 0x05
   10f60:	d2 82       	std	Z+2, r13	; 0x02
   10f62:	c1 82       	std	Z+1, r12	; 0x01
   10f64:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
   10f68:	31 c0       	rjmp	.+98     	; 0x10fcc <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   10f6a:	9c 01       	movw	r18, r24
   10f6c:	20 56       	subi	r18, 0x60	; 96
   10f6e:	31 09       	sbc	r19, r1
   10f70:	20 31       	cpi	r18, 0x10	; 16
   10f72:	31 05       	cpc	r19, r1
   10f74:	28 f0       	brcs	.+10     	; 0x10f80 <gpib_trace_display+0x1de>
   10f76:	e2 e8       	ldi	r30, 0x82	; 130
   10f78:	f1 e0       	ldi	r31, 0x01	; 1
   10f7a:	00 e0       	ldi	r16, 0x00	; 0
   10f7c:	10 e0       	ldi	r17, 0x00	; 0
   10f7e:	0b c0       	rjmp	.+22     	; 0x10f96 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   10f80:	0f 71       	andi	r16, 0x1F	; 31
   10f82:	11 27       	eor	r17, r17
   10f84:	ed b7       	in	r30, 0x3d	; 61
   10f86:	fe b7       	in	r31, 0x3e	; 62
   10f88:	17 83       	std	Z+7, r17	; 0x07
   10f8a:	06 83       	std	Z+6, r16	; 0x06
   10f8c:	8a e3       	ldi	r24, 0x3A	; 58
   10f8e:	90 e1       	ldi	r25, 0x10	; 16
   10f90:	e3 cf       	rjmp	.-58     	; 0x10f58 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   10f92:	0f 5f       	subi	r16, 0xFF	; 255
   10f94:	1f 4f       	sbci	r17, 0xFF	; 255
   10f96:	20 81       	ld	r18, Z
   10f98:	31 81       	ldd	r19, Z+1	; 0x01
   10f9a:	2f 3f       	cpi	r18, 0xFF	; 255
   10f9c:	4f ef       	ldi	r20, 0xFF	; 255
   10f9e:	34 07       	cpc	r19, r20
   10fa0:	a9 f0       	breq	.+42     	; 0x10fcc <gpib_trace_display+0x22a>
   10fa2:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   10fa4:	82 17       	cp	r24, r18
   10fa6:	93 07       	cpc	r25, r19
   10fa8:	a1 f7       	brne	.-24     	; 0x10f92 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   10faa:	69 e6       	ldi	r22, 0x69	; 105
   10fac:	74 e0       	ldi	r23, 0x04	; 4
   10fae:	c6 01       	movw	r24, r12
   10fb0:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   10fb4:	f8 01       	movw	r30, r16
   10fb6:	ee 0f       	add	r30, r30
   10fb8:	ff 1f       	adc	r31, r31
   10fba:	ee 0f       	add	r30, r30
   10fbc:	ff 1f       	adc	r31, r31
   10fbe:	ee 57       	subi	r30, 0x7E	; 126
   10fc0:	fe 4f       	sbci	r31, 0xFE	; 254
   10fc2:	62 81       	ldd	r22, Z+2	; 0x02
   10fc4:	73 81       	ldd	r23, Z+3	; 0x03
   10fc6:	c6 01       	movw	r24, r12
   10fc8:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   10fcc:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   10fd0:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   10fd4:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   10fd8:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   10fdc:	23 2b       	or	r18, r19
   10fde:	21 f4       	brne	.+8      	; 0x10fe8 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   10fe0:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   10fe4:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   10fe8:	20 91 68 19 	lds	r18, 0x1968	; 0x801968 <gpib_log_fp>
   10fec:	30 91 69 19 	lds	r19, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   10ff0:	82 17       	cp	r24, r18
   10ff2:	93 07       	cpc	r25, r19
   10ff4:	19 f0       	breq	.+6      	; 0x10ffc <gpib_trace_display+0x25a>
        puts(str);
   10ff6:	c7 01       	movw	r24, r14
   10ff8:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   10ffc:	ed b7       	in	r30, 0x3d	; 61
   10ffe:	fe b7       	in	r31, 0x3e	; 62
   11000:	f6 82       	std	Z+6, r15	; 0x06
   11002:	e5 82       	std	Z+5, r14	; 0x05
   11004:	83 e7       	ldi	r24, 0x73	; 115
   11006:	9d e0       	ldi	r25, 0x0D	; 13
   11008:	94 83       	std	Z+4, r25	; 0x04
   1100a:	83 83       	std	Z+3, r24	; 0x03
   1100c:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11010:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   11014:	92 83       	std	Z+2, r25	; 0x02
   11016:	81 83       	std	Z+1, r24	; 0x01
   11018:	0e 94 99 7c 	call	0xf932	; 0xf932 <fprintf>
}
   1101c:	c7 57       	subi	r28, 0x77	; 119
   1101e:	df 4f       	sbci	r29, 0xFF	; 255
   11020:	ec e0       	ldi	r30, 0x0C	; 12
   11022:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

00011026 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11026:	af 92       	push	r10
   11028:	bf 92       	push	r11
   1102a:	cf 92       	push	r12
   1102c:	df 92       	push	r13
   1102e:	ef 92       	push	r14
   11030:	ff 92       	push	r15
   11032:	0f 93       	push	r16
   11034:	1f 93       	push	r17
   11036:	cf 93       	push	r28
   11038:	00 d0       	rcall	.+0      	; 0x1103a <gpib_read_byte+0x14>
   1103a:	00 d0       	rcall	.+0      	; 0x1103c <gpib_read_byte+0x16>
   1103c:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   1103e:	20 91 67 19 	lds	r18, 0x1967	; 0x801967 <gpib_unread_f>
   11042:	22 23       	and	r18, r18
   11044:	39 f0       	breq	.+14     	; 0x11054 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   11046:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <gpib_unread_f>
        return(gpib_unread_data);
   1104a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <gpib_unread_data>
   1104e:	90 91 fb 1e 	lds	r25, 0x1EFB	; 0x801efb <gpib_unread_data+0x1>
   11052:	e0 c0       	rjmp	.+448    	; 0x11214 <gpib_read_byte+0x1ee>
   11054:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   11056:	81 e0       	ldi	r24, 0x01	; 1
   11058:	05 dc       	rcall	.-2038   	; 0x10864 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   1105a:	c1 14       	cp	r12, r1
   1105c:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   1105e:	51 f0       	breq	.+20     	; 0x11074 <gpib_read_byte+0x4e>
   11060:	fa dc       	rcall	.-1548   	; 0x10a56 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11062:	7c 01       	movw	r14, r24
   11064:	08 dd       	rcall	.-1520   	; 0x10a76 <gpib_handshake_pin_read>
   11066:	e8 2a       	or	r14, r24
   11068:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   1106a:	62 e0       	ldi	r22, 0x02	; 2
   1106c:	70 e0       	ldi	r23, 0x00	; 0
   1106e:	c7 01       	movw	r24, r14
   11070:	98 de       	rcall	.-720    	; 0x10da2 <gpib_trace_display>
   11072:	02 c0       	rjmp	.+4      	; 0x11078 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11074:	e1 2c       	mov	r14, r1
   11076:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11078:	64 ef       	ldi	r22, 0xF4	; 244
   1107a:	71 e0       	ldi	r23, 0x01	; 1
   1107c:	80 e0       	ldi	r24, 0x00	; 0
   1107e:	90 e0       	ldi	r25, 0x00	; 0
   11080:	af db       	rcall	.-2210   	; 0x107e0 <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   11082:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11084:	00 e0       	ldi	r16, 0x00	; 0
   11086:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11088:	0e 94 90 de 	call	0x1bd20	; 0x1bd20 <gpib_user_task>

        if(uart_keyhit(0))
   1108c:	80 e0       	ldi	r24, 0x00	; 0
   1108e:	0e 94 b9 28 	call	0x5172	; 0x5172 <uart_keyhit>
   11092:	89 2b       	or	r24, r25
   11094:	09 f0       	breq	.+2      	; 0x11098 <gpib_read_byte+0x72>
   11096:	9c c0       	rjmp	.+312    	; 0x111d0 <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11098:	4c 99       	sbic	0x09, 4	; 9
   1109a:	15 c0       	rjmp	.+42     	; 0x110c6 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   1109c:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1109e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   110a2:	80 ff       	sbrs	r24, 0
   110a4:	0e c0       	rjmp	.+28     	; 0x110c2 <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   110a6:	8c 2f       	mov	r24, r28
   110a8:	90 e0       	ldi	r25, 0x00	; 0
   110aa:	ed b7       	in	r30, 0x3d	; 61
   110ac:	fe b7       	in	r31, 0x3e	; 62
   110ae:	95 83       	std	Z+5, r25	; 0x05
   110b0:	84 83       	std	Z+4, r24	; 0x04
   110b2:	8a e6       	ldi	r24, 0x6A	; 106
   110b4:	90 e1       	ldi	r25, 0x10	; 16
   110b6:	a0 e0       	ldi	r26, 0x00	; 0
   110b8:	81 83       	std	Z+1, r24	; 0x01
   110ba:	92 83       	std	Z+2, r25	; 0x02
   110bc:	a3 83       	std	Z+3, r26	; 0x03
   110be:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            gpib_bus_init();
   110c2:	98 db       	rcall	.-2256   	; 0x107f4 <gpib_bus_init>
   110c4:	85 c0       	rjmp	.+266    	; 0x111d0 <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   110c6:	c2 30       	cpi	r28, 0x02	; 2
   110c8:	31 f1       	breq	.+76     	; 0x11116 <gpib_read_byte+0xf0>
   110ca:	28 f4       	brcc	.+10     	; 0x110d6 <gpib_read_byte+0xb0>
   110cc:	cc 23       	and	r28, r28
   110ce:	69 f0       	breq	.+26     	; 0x110ea <gpib_read_byte+0xc4>
   110d0:	c1 30       	cpi	r28, 0x01	; 1
   110d2:	c9 f0       	breq	.+50     	; 0x11106 <gpib_read_byte+0xe0>
   110d4:	63 c0       	rjmp	.+198    	; 0x1119c <gpib_read_byte+0x176>
   110d6:	c5 30       	cpi	r28, 0x05	; 5
   110d8:	09 f4       	brne	.+2      	; 0x110dc <gpib_read_byte+0xb6>
   110da:	54 c0       	rjmp	.+168    	; 0x11184 <gpib_read_byte+0x15e>
   110dc:	c7 30       	cpi	r28, 0x07	; 7
   110de:	09 f4       	brne	.+2      	; 0x110e2 <gpib_read_byte+0xbc>
   110e0:	58 c0       	rjmp	.+176    	; 0x11192 <gpib_read_byte+0x16c>
   110e2:	c4 30       	cpi	r28, 0x04	; 4
   110e4:	09 f0       	breq	.+2      	; 0x110e8 <gpib_read_byte+0xc2>
   110e6:	5a c0       	rjmp	.+180    	; 0x1119c <gpib_read_byte+0x176>
   110e8:	3e c0       	rjmp	.+124    	; 0x11166 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   110ea:	19 9b       	sbis	0x03, 1	; 3
   110ec:	43 c0       	rjmp	.+134    	; 0x11174 <gpib_read_byte+0x14e>
   110ee:	fd e0       	ldi	r31, 0x0D	; 13
   110f0:	fa 95       	dec	r31
   110f2:	f1 f7       	brne	.-4      	; 0x110f0 <gpib_read_byte+0xca>
   110f4:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   110f6:	52 98       	cbi	0x0a, 2	; 10
   110f8:	5a 9a       	sbi	0x0b, 2	; 11
   110fa:	8d e0       	ldi	r24, 0x0D	; 13
   110fc:	8a 95       	dec	r24
   110fe:	f1 f7       	brne	.-4      	; 0x110fc <gpib_read_byte+0xd6>
   11100:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11102:	c1 e0       	ldi	r28, 0x01	; 1
   11104:	37 c0       	rjmp	.+110    	; 0x11174 <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   11106:	19 99       	sbic	0x03, 1	; 3
   11108:	80 c0       	rjmp	.+256    	; 0x1120a <gpib_read_byte+0x1e4>
   1110a:	ed e0       	ldi	r30, 0x0D	; 13
   1110c:	ea 95       	dec	r30
   1110e:	f1 f7       	brne	.-4      	; 0x1110c <gpib_read_byte+0xe6>
   11110:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11112:	c2 e0       	ldi	r28, 0x02	; 2
   11114:	7a c0       	rjmp	.+244    	; 0x1120a <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   11116:	5a 98       	cbi	0x0b, 2	; 11
   11118:	52 9a       	sbi	0x0a, 2	; 10
   1111a:	fd e0       	ldi	r31, 0x0D	; 13
   1111c:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   1111e:	f1 f7       	brne	.-4      	; 0x1111c <gpib_read_byte+0xf6>
   11120:	00 00       	nop
   11122:	93 dc       	rcall	.-1754   	; 0x10a4a <gpib_bus_read>
   11124:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   11126:	b1 2c       	mov	r11, r1
   11128:	96 dc       	rcall	.-1748   	; 0x10a56 <gpib_control_pin_read>
   1112a:	7c 01       	movw	r14, r24
   1112c:	08 2b       	or	r16, r24
                ch |= control_last;
   1112e:	19 2b       	or	r17, r25
   11130:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   11132:	1b 29       	or	r17, r11
   11134:	c1 14       	cp	r12, r1
   11136:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   11138:	49 f0       	breq	.+18     	; 0x1114c <gpib_read_byte+0x126>
   1113a:	9d dc       	rcall	.-1734   	; 0x10a76 <gpib_handshake_pin_read>
   1113c:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   1113e:	f9 2a       	or	r15, r25
   11140:	61 e0       	ldi	r22, 0x01	; 1
   11142:	70 e0       	ldi	r23, 0x00	; 0
   11144:	c5 01       	movw	r24, r10
   11146:	8e 29       	or	r24, r14
   11148:	9f 29       	or	r25, r15
   1114a:	2b de       	rcall	.-938    	; 0x10da2 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   1114c:	53 98       	cbi	0x0a, 3	; 10
   1114e:	5b 9a       	sbi	0x0b, 3	; 11
   11150:	8d e0       	ldi	r24, 0x0D	; 13
   11152:	8a 95       	dec	r24
   11154:	f1 f7       	brne	.-4      	; 0x11152 <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11156:	00 00       	nop
   11158:	64 ef       	ldi	r22, 0xF4	; 244
   1115a:	71 e0       	ldi	r23, 0x01	; 1
   1115c:	80 e0       	ldi	r24, 0x00	; 0
   1115e:	90 e0       	ldi	r25, 0x00	; 0
   11160:	3f db       	rcall	.-2434   	; 0x107e0 <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11162:	c4 e0       	ldi	r28, 0x04	; 4
   11164:	52 c0       	rjmp	.+164    	; 0x1120a <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11166:	19 9b       	sbis	0x03, 1	; 3
   11168:	05 c0       	rjmp	.+10     	; 0x11174 <gpib_read_byte+0x14e>
   1116a:	ed e0       	ldi	r30, 0x0D	; 13
   1116c:	ea 95       	dec	r30
   1116e:	f1 f7       	brne	.-4      	; 0x1116c <gpib_read_byte+0x146>
   11170:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   11172:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11174:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11178:	88 23       	and	r24, r24
   1117a:	09 f4       	brne	.+2      	; 0x1117e <gpib_read_byte+0x158>
   1117c:	46 c0       	rjmp	.+140    	; 0x1120a <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   1117e:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   11180:	c7 e0       	ldi	r28, 0x07	; 7
   11182:	43 c0       	rjmp	.+134    	; 0x1120a <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11184:	5b 98       	cbi	0x0b, 3	; 11
   11186:	53 9a       	sbi	0x0a, 3	; 10
   11188:	fd e0       	ldi	r31, 0x0D	; 13
   1118a:	fa 95       	dec	r31
   1118c:	f1 f7       	brne	.-4      	; 0x1118a <gpib_read_byte+0x164>
   1118e:	00 00       	nop
   11190:	09 c0       	rjmp	.+18     	; 0x111a4 <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   11192:	5a 98       	cbi	0x0b, 2	; 11
   11194:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11196:	5b 98       	cbi	0x0b, 3	; 11
   11198:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1119a:	04 c0       	rjmp	.+8      	; 0x111a4 <gpib_read_byte+0x17e>
   1119c:	c1 14       	cp	r12, r1
   1119e:	d1 04       	cpc	r13, r1
   111a0:	91 f0       	breq	.+36     	; 0x111c6 <gpib_read_byte+0x1a0>
   111a2:	04 c0       	rjmp	.+8      	; 0x111ac <gpib_read_byte+0x186>
   111a4:	c1 14       	cp	r12, r1
   111a6:	d1 04       	cpc	r13, r1
   111a8:	99 f0       	breq	.+38     	; 0x111d0 <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   111aa:	c8 e0       	ldi	r28, 0x08	; 8
   111ac:	54 dc       	rcall	.-1880   	; 0x10a56 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   111ae:	5c 01       	movw	r10, r24
   111b0:	62 dc       	rcall	.-1852   	; 0x10a76 <gpib_handshake_pin_read>
   111b2:	a8 2a       	or	r10, r24
   111b4:	b9 2a       	or	r11, r25
            if(control_last != control)
   111b6:	ae 14       	cp	r10, r14
   111b8:	bf 04       	cpc	r11, r15
   111ba:	31 f0       	breq	.+12     	; 0x111c8 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   111bc:	62 e0       	ldi	r22, 0x02	; 2
   111be:	70 e0       	ldi	r23, 0x00	; 0
   111c0:	c5 01       	movw	r24, r10
   111c2:	ef dd       	rcall	.-1058   	; 0x10da2 <gpib_trace_display>
   111c4:	01 c0       	rjmp	.+2      	; 0x111c8 <gpib_read_byte+0x1a2>
   111c6:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   111c8:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   111ca:	11 f0       	breq	.+4      	; 0x111d0 <gpib_read_byte+0x1aa>
   111cc:	75 01       	movw	r14, r10
   111ce:	5c cf       	rjmp	.-328    	; 0x11088 <gpib_read_byte+0x62>
   111d0:	80 91 f4 1e 	lds	r24, 0x1EF4	; 0x801ef4 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   111d4:	90 91 f5 1e 	lds	r25, 0x1EF5	; 0x801ef5 <current+0x1>
   111d8:	90 93 f1 1c 	sts	0x1CF1, r25	; 0x801cf1 <lastcmd+0x1>
   111dc:	80 93 f0 1c 	sts	0x1CF0, r24	; 0x801cf0 <lastcmd>
   111e0:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   111e2:	88 27       	eor	r24, r24
   111e4:	90 7d       	andi	r25, 0xD0	; 208
   111e6:	89 2b       	or	r24, r25
   111e8:	11 f4       	brne	.+4      	; 0x111ee <gpib_read_byte+0x1c8>
   111ea:	12 fd       	sbrc	r17, 2
   111ec:	05 c0       	rjmp	.+10     	; 0x111f8 <gpib_read_byte+0x1d2>
   111ee:	10 92 f5 1e 	sts	0x1EF5, r1	; 0x801ef5 <current+0x1>
        current = 0;
   111f2:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <current>
   111f6:	07 c0       	rjmp	.+14     	; 0x11206 <gpib_read_byte+0x1e0>
   111f8:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   111fa:	8f 77       	andi	r24, 0x7F	; 127
   111fc:	99 27       	eor	r25, r25
   111fe:	90 93 f5 1e 	sts	0x1EF5, r25	; 0x801ef5 <current+0x1>
   11202:	80 93 f4 1e 	sts	0x1EF4, r24	; 0x801ef4 <current>
   11206:	c8 01       	movw	r24, r16
   11208:	05 c0       	rjmp	.+10     	; 0x11214 <gpib_read_byte+0x1ee>
   1120a:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1120c:	d1 04       	cpc	r13, r1
   1120e:	09 f4       	brne	.+2      	; 0x11212 <gpib_read_byte+0x1ec>
   11210:	3b cf       	rjmp	.-394    	; 0x11088 <gpib_read_byte+0x62>
   11212:	cc cf       	rjmp	.-104    	; 0x111ac <gpib_read_byte+0x186>
   11214:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11216:	0f 90       	pop	r0
   11218:	0f 90       	pop	r0
   1121a:	0f 90       	pop	r0
   1121c:	0f 90       	pop	r0
   1121e:	cf 91       	pop	r28
   11220:	1f 91       	pop	r17
   11222:	0f 91       	pop	r16
   11224:	ff 90       	pop	r15
   11226:	ef 90       	pop	r14
   11228:	df 90       	pop	r13
   1122a:	cf 90       	pop	r12
   1122c:	bf 90       	pop	r11
   1122e:	af 90       	pop	r10
   11230:	08 95       	ret

00011232 <gpib_decode>:
   11232:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11234:	70 e0       	ldi	r23, 0x00	; 0
   11236:	b5 cd       	rjmp	.-1174   	; 0x10da2 <gpib_trace_display>
   11238:	08 95       	ret

0001123a <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   1123a:	a7 e0       	ldi	r26, 0x07	; 7
   1123c:	b0 e0       	ldi	r27, 0x00	; 0
   1123e:	e3 e2       	ldi	r30, 0x23	; 35
   11240:	f9 e8       	ldi	r31, 0x89	; 137
   11242:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
   11246:	5b 01       	movw	r10, r22
   11248:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   1124a:	fa 01       	movw	r30, r20
   1124c:	20 81       	ld	r18, Z
   1124e:	31 81       	ldd	r19, Z+1	; 0x01
   11250:	22 27       	eor	r18, r18
   11252:	31 83       	std	Z+1, r19	; 0x01
   11254:	20 83       	st	Z, r18

    if(!size)
   11256:	67 2b       	or	r22, r23
   11258:	21 f0       	breq	.+8      	; 0x11262 <gpib_read_str+0x28>
   1125a:	7c 01       	movw	r14, r24
   1125c:	00 e0       	ldi	r16, 0x00	; 0
   1125e:	10 e0       	ldi	r17, 0x00	; 0
   11260:	28 c0       	rjmp	.+80     	; 0x112b2 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11262:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11266:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1126a:	81 72       	andi	r24, 0x21	; 33
   1126c:	91 70       	andi	r25, 0x01	; 1
   1126e:	89 2b       	or	r24, r25
   11270:	09 f4       	brne	.+2      	; 0x11274 <gpib_read_str+0x3a>
   11272:	7c c0       	rjmp	.+248    	; 0x1136c <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11274:	81 e2       	ldi	r24, 0x21	; 33
   11276:	90 e1       	ldi	r25, 0x10	; 16
   11278:	a0 e0       	ldi	r26, 0x00	; 0
   1127a:	ed b7       	in	r30, 0x3d	; 61
   1127c:	fe b7       	in	r31, 0x3e	; 62
   1127e:	81 83       	std	Z+1, r24	; 0x01
   11280:	92 83       	std	Z+2, r25	; 0x02
   11282:	a3 83       	std	Z+3, r26	; 0x03
   11284:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   11288:	71 c0       	rjmp	.+226    	; 0x1136c <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   1128a:	8c 27       	eor	r24, r28
   1128c:	9d 27       	eor	r25, r29
   1128e:	92 fd       	sbrc	r25, 2
   11290:	2e c0       	rjmp	.+92     	; 0x112ee <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11292:	ce 01       	movw	r24, r28
   11294:	88 27       	eor	r24, r24
   11296:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11298:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1129a:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   1129c:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1129e:	f7 01       	movw	r30, r14
   112a0:	20 83       	st	Z, r18
        ++ind;
   112a2:	0f 5f       	subi	r16, 0xFF	; 255
   112a4:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   112a6:	89 2b       	or	r24, r25
   112a8:	09 f4       	brne	.+2      	; 0x112ac <gpib_read_str+0x72>
   112aa:	3c c0       	rjmp	.+120    	; 0x11324 <gpib_read_str+0xea>
   112ac:	ff ef       	ldi	r31, 0xFF	; 255
   112ae:	ef 1a       	sub	r14, r31
   112b0:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   112b2:	0a 15       	cp	r16, r10
   112b4:	1b 05       	cpc	r17, r11
   112b6:	0c f0       	brlt	.+2      	; 0x112ba <gpib_read_str+0x80>
   112b8:	3f c0       	rjmp	.+126    	; 0x11338 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   112ba:	80 e0       	ldi	r24, 0x00	; 0
   112bc:	90 e0       	ldi	r25, 0x00	; 0
   112be:	b3 de       	rcall	.-666    	; 0x11026 <gpib_read_byte>
   112c0:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   112c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   112c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   112ca:	90 ff       	sbrs	r25, 0
   112cc:	02 c0       	rjmp	.+4      	; 0x112d2 <gpib_read_str+0x98>
            gpib_decode(val);
   112ce:	ce 01       	movw	r24, r28
   112d0:	b0 df       	rcall	.-160    	; 0x11232 <gpib_decode>
#endif
        if(val & ERROR_MASK)
   112d2:	9e 01       	movw	r18, r28
   112d4:	22 27       	eor	r18, r18
   112d6:	30 7d       	andi	r19, 0xD0	; 208
   112d8:	f6 01       	movw	r30, r12
   112da:	80 81       	ld	r24, Z
   112dc:	91 81       	ldd	r25, Z+1	; 0x01
   112de:	21 15       	cp	r18, r1
   112e0:	31 05       	cpc	r19, r1
   112e2:	99 f2       	breq	.-90     	; 0x1128a <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   112e4:	82 2b       	or	r24, r18
   112e6:	93 2b       	or	r25, r19
   112e8:	91 83       	std	Z+1, r25	; 0x01
   112ea:	80 83       	st	Z, r24
            break;
   112ec:	28 c0       	rjmp	.+80     	; 0x1133e <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   112ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   112f2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   112f6:	81 72       	andi	r24, 0x21	; 33
   112f8:	91 70       	andi	r25, 0x01	; 1
   112fa:	89 2b       	or	r24, r25
   112fc:	81 f0       	breq	.+32     	; 0x1131e <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   112fe:	ce 01       	movw	r24, r28
   11300:	99 27       	eor	r25, r25
   11302:	ed b7       	in	r30, 0x3d	; 61
   11304:	fe b7       	in	r31, 0x3e	; 62
   11306:	97 83       	std	Z+7, r25	; 0x07
   11308:	86 83       	std	Z+6, r24	; 0x06
   1130a:	15 83       	std	Z+5, r17	; 0x05
   1130c:	04 83       	std	Z+4, r16	; 0x04
   1130e:	84 ef       	ldi	r24, 0xF4	; 244
   11310:	9f e0       	ldi	r25, 0x0F	; 15
   11312:	a0 e0       	ldi	r26, 0x00	; 0
   11314:	81 83       	std	Z+1, r24	; 0x01
   11316:	92 83       	std	Z+2, r25	; 0x02
   11318:	a3 83       	std	Z+3, r26	; 0x03
   1131a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            gpib_unread(val);
   1131e:	ce 01       	movw	r24, r28
   11320:	6a db       	rcall	.-2348   	; 0x109f6 <gpib_unread>
            break;
   11322:	0d c0       	rjmp	.+26     	; 0x1133e <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11324:	d0 ff       	sbrs	r29, 0
   11326:	c2 cf       	rjmp	.-124    	; 0x112ac <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   11328:	f6 01       	movw	r30, r12
   1132a:	80 81       	ld	r24, Z
   1132c:	91 81       	ldd	r25, Z+1	; 0x01
   1132e:	90 fd       	sbrc	r25, 0
   11330:	1f c0       	rjmp	.+62     	; 0x11370 <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11332:	91 60       	ori	r25, 0x01	; 1
   11334:	91 83       	std	Z+1, r25	; 0x01
   11336:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   11338:	0a 15       	cp	r16, r10
   1133a:	1b 05       	cpc	r17, r11
   1133c:	c9 f0       	breq	.+50     	; 0x11370 <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1133e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11342:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11346:	81 72       	andi	r24, 0x21	; 33
   11348:	99 27       	eor	r25, r25
   1134a:	89 2b       	or	r24, r25
   1134c:	89 f0       	breq	.+34     	; 0x11370 <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1134e:	ed b7       	in	r30, 0x3d	; 61
   11350:	fe b7       	in	r31, 0x3e	; 62
   11352:	b7 82       	std	Z+7, r11	; 0x07
   11354:	a6 82       	std	Z+6, r10	; 0x06
   11356:	15 83       	std	Z+5, r17	; 0x05
   11358:	04 83       	std	Z+4, r16	; 0x04
   1135a:	8d ec       	ldi	r24, 0xCD	; 205
   1135c:	9f e0       	ldi	r25, 0x0F	; 15
   1135e:	a0 e0       	ldi	r26, 0x00	; 0
   11360:	81 83       	std	Z+1, r24	; 0x01
   11362:	92 83       	std	Z+2, r25	; 0x02
   11364:	a3 83       	std	Z+3, r26	; 0x03
   11366:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1136a:	02 c0       	rjmp	.+4      	; 0x11370 <gpib_read_str+0x136>
   1136c:	00 e0       	ldi	r16, 0x00	; 0
   1136e:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   11370:	c8 01       	movw	r24, r16
   11372:	cd b7       	in	r28, 0x3d	; 61
   11374:	de b7       	in	r29, 0x3e	; 62
   11376:	27 96       	adiw	r28, 0x07	; 7
   11378:	ea e0       	ldi	r30, 0x0A	; 10
   1137a:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0001137e <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1137e:	a7 e0       	ldi	r26, 0x07	; 7
   11380:	b0 e0       	ldi	r27, 0x00	; 0
   11382:	e5 ec       	ldi	r30, 0xC5	; 197
   11384:	f9 e8       	ldi	r31, 0x89	; 137
   11386:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
   1138a:	d8 2f       	mov	r29, r24
   1138c:	c9 2f       	mov	r28, r25
   1138e:	7b 01       	movw	r14, r22
   11390:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11392:	fa 01       	movw	r30, r20
   11394:	80 81       	ld	r24, Z
   11396:	91 81       	ldd	r25, Z+1	; 0x01
   11398:	88 27       	eor	r24, r24
   1139a:	91 83       	std	Z+1, r25	; 0x01
   1139c:	80 83       	st	Z, r24

    if(!size)
   1139e:	67 2b       	or	r22, r23
   113a0:	91 f4       	brne	.+36     	; 0x113c6 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   113a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113aa:	81 72       	andi	r24, 0x21	; 33
   113ac:	91 70       	andi	r25, 0x01	; 1
   113ae:	89 2b       	or	r24, r25
   113b0:	51 f0       	breq	.+20     	; 0x113c6 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   113b2:	83 eb       	ldi	r24, 0xB3	; 179
   113b4:	9f e0       	ldi	r25, 0x0F	; 15
   113b6:	a0 e0       	ldi	r26, 0x00	; 0
   113b8:	ed b7       	in	r30, 0x3d	; 61
   113ba:	fe b7       	in	r31, 0x3e	; 62
   113bc:	81 83       	std	Z+1, r24	; 0x01
   113be:	92 83       	std	Z+2, r25	; 0x02
   113c0:	a3 83       	std	Z+3, r26	; 0x03
   113c2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   113c6:	80 e0       	ldi	r24, 0x00	; 0
   113c8:	4d da       	rcall	.-2918   	; 0x10864 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   113ca:	4e 9b       	sbis	0x09, 6	; 9
   113cc:	06 c0       	rjmp	.+12     	; 0x113da <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   113ce:	64 ef       	ldi	r22, 0xF4	; 244
   113d0:	71 e0       	ldi	r23, 0x01	; 1
   113d2:	80 e0       	ldi	r24, 0x00	; 0
   113d4:	90 e0       	ldi	r25, 0x00	; 0
   113d6:	04 da       	rcall	.-3064   	; 0x107e0 <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   113d8:	18 c0       	rjmp	.+48     	; 0x1140a <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   113da:	64 ef       	ldi	r22, 0xF4	; 244
   113dc:	71 e0       	ldi	r23, 0x01	; 1
   113de:	80 e0       	ldi	r24, 0x00	; 0
   113e0:	90 e0       	ldi	r25, 0x00	; 0
   113e2:	fe d9       	rcall	.-3076   	; 0x107e0 <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   113e4:	4e 99       	sbic	0x09, 6	; 9
   113e6:	f3 cf       	rjmp	.-26     	; 0x113ce <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   113e8:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   113ec:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   113ee:	d1 f3       	breq	.-12     	; 0x113e4 <gpib_write_str+0x66>
   113f0:	81 e0       	ldi	r24, 0x01	; 1
   113f2:	38 da       	rcall	.-2960   	; 0x10864 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   113f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113f8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113fc:	85 70       	andi	r24, 0x05	; 5
   113fe:	99 27       	eor	r25, r25
   11400:	89 2b       	or	r24, r25
   11402:	d9 f0       	breq	.+54     	; 0x1143a <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   11404:	85 e8       	ldi	r24, 0x85	; 133
   11406:	9f e0       	ldi	r25, 0x0F	; 15
   11408:	10 c0       	rjmp	.+32     	; 0x1142a <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1140a:	19 99       	sbic	0x03, 1	; 3
   1140c:	1f c0       	rjmp	.+62     	; 0x1144c <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1140e:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   11412:	88 23       	and	r24, r24
   11414:	d1 f3       	breq	.-12     	; 0x1140a <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11416:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1141a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1141e:	85 70       	andi	r24, 0x05	; 5
   11420:	99 27       	eor	r25, r25
   11422:	89 2b       	or	r24, r25
   11424:	51 f0       	breq	.+20     	; 0x1143a <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   11426:	8b e6       	ldi	r24, 0x6B	; 107
   11428:	9f e0       	ldi	r25, 0x0F	; 15
   1142a:	a0 e0       	ldi	r26, 0x00	; 0
   1142c:	ed b7       	in	r30, 0x3d	; 61
   1142e:	fe b7       	in	r31, 0x3e	; 62
   11430:	81 83       	std	Z+1, r24	; 0x01
   11432:	92 83       	std	Z+2, r25	; 0x02
   11434:	a3 83       	std	Z+3, r26	; 0x03
   11436:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   1143a:	f8 01       	movw	r30, r16
   1143c:	80 81       	ld	r24, Z
   1143e:	91 81       	ldd	r25, Z+1	; 0x01
   11440:	90 6c       	ori	r25, 0xC0	; 192
   11442:	91 83       	std	Z+1, r25	; 0x01
   11444:	80 83       	st	Z, r24
			return(ind);
   11446:	c0 e0       	ldi	r28, 0x00	; 0
   11448:	d0 e0       	ldi	r29, 0x00	; 0
   1144a:	45 c0       	rjmp	.+138    	; 0x114d6 <gpib_write_str+0x158>
   1144c:	cd 2e       	mov	r12, r29
   1144e:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11450:	c0 e0       	ldi	r28, 0x00	; 0
   11452:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   11454:	ce 15       	cp	r28, r14
   11456:	df 05       	cpc	r29, r15
   11458:	1c f5       	brge	.+70     	; 0x114a0 <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   1145a:	21 96       	adiw	r28, 0x01	; 1
   1145c:	f6 01       	movw	r30, r12
   1145e:	81 91       	ld	r24, Z+
   11460:	6f 01       	movw	r12, r30
   11462:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   11464:	f8 01       	movw	r30, r16
   11466:	20 81       	ld	r18, Z
   11468:	31 81       	ldd	r19, Z+1	; 0x01
   1146a:	30 ff       	sbrs	r19, 0
   1146c:	04 c0       	rjmp	.+8      	; 0x11476 <gpib_write_str+0xf8>
   1146e:	ec 16       	cp	r14, r28
   11470:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   11472:	09 f4       	brne	.+2      	; 0x11476 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11474:	91 60       	ori	r25, 0x01	; 1
   11476:	0b db       	rcall	.-2538   	; 0x10a8e <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11478:	5c 01       	movw	r10, r24
   1147a:	aa 24       	eor	r10, r10
   1147c:	f0 ed       	ldi	r31, 0xD0	; 208
   1147e:	bf 22       	and	r11, r31
   11480:	f8 01       	movw	r30, r16
   11482:	20 81       	ld	r18, Z
   11484:	31 81       	ldd	r19, Z+1	; 0x01
   11486:	2a 29       	or	r18, r10
   11488:	3b 29       	or	r19, r11
   1148a:	31 83       	std	Z+1, r19	; 0x01
   1148c:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1148e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11492:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11496:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11498:	cc de       	rcall	.-616    	; 0x11232 <gpib_decode>
   1149a:	a1 14       	cp	r10, r1
   1149c:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   1149e:	d1 f2       	breq	.-76     	; 0x11454 <gpib_write_str+0xd6>
   114a0:	81 e0       	ldi	r24, 0x01	; 1
   114a2:	e0 d9       	rcall	.-3136   	; 0x10864 <gpib_rx_init>

    if ( ind != size )
   114a4:	ce 15       	cp	r28, r14
   114a6:	df 05       	cpc	r29, r15
   114a8:	b1 f0       	breq	.+44     	; 0x114d6 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   114aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114ae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114b2:	81 72       	andi	r24, 0x21	; 33
   114b4:	91 70       	andi	r25, 0x01	; 1
   114b6:	89 2b       	or	r24, r25
   114b8:	71 f0       	breq	.+28     	; 0x114d6 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   114ba:	ed b7       	in	r30, 0x3d	; 61
   114bc:	fe b7       	in	r31, 0x3e	; 62
   114be:	f7 82       	std	Z+7, r15	; 0x07
   114c0:	e6 82       	std	Z+6, r14	; 0x06
   114c2:	d5 83       	std	Z+5, r29	; 0x05
   114c4:	c4 83       	std	Z+4, r28	; 0x04
   114c6:	83 e4       	ldi	r24, 0x43	; 67
   114c8:	9f e0       	ldi	r25, 0x0F	; 15
   114ca:	a0 e0       	ldi	r26, 0x00	; 0
   114cc:	81 83       	std	Z+1, r24	; 0x01
   114ce:	92 83       	std	Z+2, r25	; 0x02
   114d0:	a3 83       	std	Z+3, r26	; 0x03
   114d2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }
    return(ind);
}
   114d6:	ce 01       	movw	r24, r28
   114d8:	cd b7       	in	r28, 0x3d	; 61
   114da:	de b7       	in	r29, 0x3e	; 62
   114dc:	27 96       	adiw	r28, 0x07	; 7
   114de:	ea e0       	ldi	r30, 0x0A	; 10
   114e0:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

000114e4 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   114e4:	ad b7       	in	r26, 0x3d	; 61
   114e6:	be b7       	in	r27, 0x3e	; 62
   114e8:	17 97       	sbiw	r26, 0x07	; 7
   114ea:	0f b6       	in	r0, 0x3f	; 63
   114ec:	f8 94       	cli
   114ee:	be bf       	out	0x3e, r27	; 62
   114f0:	0f be       	out	0x3f, r0	; 63
   114f2:	ad bf       	out	0x3d, r26	; 61
   114f4:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   114f8:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   114fc:	88 eb       	ldi	r24, 0xB8	; 184
   114fe:	91 e0       	ldi	r25, 0x01	; 1
   11500:	0e 94 72 99 	call	0x132e4	; 0x132e4 <Read_Config>
   11504:	18 16       	cp	r1, r24
   11506:	19 06       	cpc	r1, r25
   11508:	8c f4       	brge	.+34     	; 0x1152c <gpib_file_init+0x48>
   1150a:	ed b7       	in	r30, 0x3d	; 61
   1150c:	fe b7       	in	r31, 0x3e	; 62
   1150e:	97 83       	std	Z+7, r25	; 0x07
   11510:	86 83       	std	Z+6, r24	; 0x06
   11512:	88 eb       	ldi	r24, 0xB8	; 184
   11514:	91 e0       	ldi	r25, 0x01	; 1
   11516:	95 83       	std	Z+5, r25	; 0x05
   11518:	84 83       	std	Z+4, r24	; 0x04
   1151a:	87 e1       	ldi	r24, 0x17	; 23
   1151c:	95 e1       	ldi	r25, 0x15	; 21
   1151e:	a0 e0       	ldi	r26, 0x00	; 0
   11520:	81 83       	std	Z+1, r24	; 0x01
   11522:	92 83       	std	Z+2, r25	; 0x02
   11524:	a3 83       	std	Z+3, r26	; 0x03
   11526:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1152a:	10 c0       	rjmp	.+32     	; 0x1154c <gpib_file_init+0x68>
   1152c:	89 2b       	or	r24, r25
   1152e:	71 f0       	breq	.+28     	; 0x1154c <gpib_file_init+0x68>
   11530:	88 eb       	ldi	r24, 0xB8	; 184
   11532:	91 e0       	ldi	r25, 0x01	; 1
   11534:	ed b7       	in	r30, 0x3d	; 61
   11536:	fe b7       	in	r31, 0x3e	; 62
   11538:	95 83       	std	Z+5, r25	; 0x05
   1153a:	84 83       	std	Z+4, r24	; 0x04
   1153c:	86 e0       	ldi	r24, 0x06	; 6
   1153e:	95 e1       	ldi	r25, 0x15	; 21
   11540:	a0 e0       	ldi	r26, 0x00	; 0
   11542:	81 83       	std	Z+1, r24	; 0x01
   11544:	92 83       	std	Z+2, r25	; 0x02
   11546:	a3 83       	std	Z+3, r26	; 0x03
   11548:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1154c:	0e 94 3d 98 	call	0x1307a	; 0x1307a <set_Config_Defaults>
   11550:	0e 94 34 6e 	call	0xdc68	; 0xdc68 <mmc_wp_status>
   11554:	89 2b       	or	r24, r25
   11556:	51 f0       	breq	.+20     	; 0x1156c <gpib_file_init+0x88>
   11558:	8d ee       	ldi	r24, 0xED	; 237
   1155a:	94 e1       	ldi	r25, 0x14	; 20
   1155c:	a0 e0       	ldi	r26, 0x00	; 0
   1155e:	ed b7       	in	r30, 0x3d	; 61
   11560:	fe b7       	in	r31, 0x3e	; 62
   11562:	81 83       	std	Z+1, r24	; 0x01
   11564:	92 83       	std	Z+2, r25	; 0x02
   11566:	a3 83       	std	Z+3, r26	; 0x03
   11568:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1156c:	ad b7       	in	r26, 0x3d	; 61
   1156e:	be b7       	in	r27, 0x3e	; 62
   11570:	17 96       	adiw	r26, 0x07	; 7
   11572:	0f b6       	in	r0, 0x3f	; 63
   11574:	f8 94       	cli
   11576:	be bf       	out	0x3e, r27	; 62
   11578:	0f be       	out	0x3f, r0	; 63
   1157a:	ad bf       	out	0x3d, r26	; 61
   1157c:	08 95       	ret

0001157e <SS80_is_MLA>:
   1157e:	40 e2       	ldi	r20, 0x20	; 32
   11580:	50 e0       	ldi	r21, 0x00	; 0
   11582:	bc 01       	movw	r22, r24
   11584:	83 e0       	ldi	r24, 0x03	; 3
   11586:	90 e0       	ldi	r25, 0x00	; 0
   11588:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   1158c:	8f 3f       	cpi	r24, 0xFF	; 255
   1158e:	2f ef       	ldi	r18, 0xFF	; 255
   11590:	92 07       	cpc	r25, r18
   11592:	19 f0       	breq	.+6      	; 0x1159a <SS80_is_MLA+0x1c>
   11594:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   11598:	08 95       	ret
   1159a:	80 e0       	ldi	r24, 0x00	; 0
   1159c:	90 e0       	ldi	r25, 0x00	; 0
   1159e:	08 95       	ret

000115a0 <SS80_is_MTA>:
   115a0:	40 e4       	ldi	r20, 0x40	; 64
   115a2:	50 e0       	ldi	r21, 0x00	; 0
   115a4:	bc 01       	movw	r22, r24
   115a6:	83 e0       	ldi	r24, 0x03	; 3
   115a8:	90 e0       	ldi	r25, 0x00	; 0
   115aa:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   115ae:	8f 3f       	cpi	r24, 0xFF	; 255
   115b0:	2f ef       	ldi	r18, 0xFF	; 255
   115b2:	92 07       	cpc	r25, r18
   115b4:	19 f0       	breq	.+6      	; 0x115bc <SS80_is_MTA+0x1c>
   115b6:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   115ba:	08 95       	ret
   115bc:	80 e0       	ldi	r24, 0x00	; 0
   115be:	90 e0       	ldi	r25, 0x00	; 0
   115c0:	08 95       	ret

000115c2 <SS80_is_MSA>:
   115c2:	40 e6       	ldi	r20, 0x60	; 96
   115c4:	50 e0       	ldi	r21, 0x00	; 0
   115c6:	bc 01       	movw	r22, r24
   115c8:	83 e0       	ldi	r24, 0x03	; 3
   115ca:	90 e0       	ldi	r25, 0x00	; 0
   115cc:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   115d0:	8f 3f       	cpi	r24, 0xFF	; 255
   115d2:	2f ef       	ldi	r18, 0xFF	; 255
   115d4:	92 07       	cpc	r25, r18
   115d6:	19 f0       	breq	.+6      	; 0x115de <SS80_is_MSA+0x1c>
   115d8:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   115dc:	08 95       	ret
   115de:	80 e0       	ldi	r24, 0x00	; 0
   115e0:	90 e0       	ldi	r25, 0x00	; 0
   115e2:	08 95       	ret

000115e4 <AMIGO_is_MLA>:
   115e4:	40 e2       	ldi	r20, 0x20	; 32
   115e6:	50 e0       	ldi	r21, 0x00	; 0
   115e8:	bc 01       	movw	r22, r24
   115ea:	81 e0       	ldi	r24, 0x01	; 1
   115ec:	90 e0       	ldi	r25, 0x00	; 0
   115ee:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   115f2:	8f 3f       	cpi	r24, 0xFF	; 255
   115f4:	2f ef       	ldi	r18, 0xFF	; 255
   115f6:	92 07       	cpc	r25, r18
   115f8:	19 f0       	breq	.+6      	; 0x11600 <AMIGO_is_MLA+0x1c>
   115fa:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   115fe:	08 95       	ret
   11600:	80 e0       	ldi	r24, 0x00	; 0
   11602:	90 e0       	ldi	r25, 0x00	; 0
   11604:	08 95       	ret

00011606 <AMIGO_is_MTA>:
   11606:	40 e4       	ldi	r20, 0x40	; 64
   11608:	50 e0       	ldi	r21, 0x00	; 0
   1160a:	bc 01       	movw	r22, r24
   1160c:	81 e0       	ldi	r24, 0x01	; 1
   1160e:	90 e0       	ldi	r25, 0x00	; 0
   11610:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   11614:	8f 3f       	cpi	r24, 0xFF	; 255
   11616:	2f ef       	ldi	r18, 0xFF	; 255
   11618:	92 07       	cpc	r25, r18
   1161a:	19 f0       	breq	.+6      	; 0x11622 <AMIGO_is_MTA+0x1c>
   1161c:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   11620:	08 95       	ret
   11622:	80 e0       	ldi	r24, 0x00	; 0
   11624:	90 e0       	ldi	r25, 0x00	; 0
   11626:	08 95       	ret

00011628 <AMIGO_is_MSA>:
   11628:	40 e6       	ldi	r20, 0x60	; 96
   1162a:	50 e0       	ldi	r21, 0x00	; 0
   1162c:	bc 01       	movw	r22, r24
   1162e:	81 e0       	ldi	r24, 0x01	; 1
   11630:	90 e0       	ldi	r25, 0x00	; 0
   11632:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   11636:	8f 3f       	cpi	r24, 0xFF	; 255
   11638:	2f ef       	ldi	r18, 0xFF	; 255
   1163a:	92 07       	cpc	r25, r18
   1163c:	19 f0       	breq	.+6      	; 0x11644 <AMIGO_is_MSA+0x1c>
   1163e:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   11642:	08 95       	ret
   11644:	80 e0       	ldi	r24, 0x00	; 0
   11646:	90 e0       	ldi	r25, 0x00	; 0
   11648:	08 95       	ret

0001164a <PRINTER_is_MLA>:
   1164a:	40 e2       	ldi	r20, 0x20	; 32
   1164c:	50 e0       	ldi	r21, 0x00	; 0
   1164e:	bc 01       	movw	r22, r24
   11650:	84 e0       	ldi	r24, 0x04	; 4
   11652:	90 e0       	ldi	r25, 0x00	; 0
   11654:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   11658:	8f 3f       	cpi	r24, 0xFF	; 255
   1165a:	2f ef       	ldi	r18, 0xFF	; 255
   1165c:	92 07       	cpc	r25, r18
   1165e:	19 f0       	breq	.+6      	; 0x11666 <PRINTER_is_MLA+0x1c>
   11660:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   11664:	08 95       	ret
   11666:	80 e0       	ldi	r24, 0x00	; 0
   11668:	90 e0       	ldi	r25, 0x00	; 0
   1166a:	08 95       	ret

0001166c <PRINTER_is_MTA>:
   1166c:	40 e4       	ldi	r20, 0x40	; 64
   1166e:	50 e0       	ldi	r21, 0x00	; 0
   11670:	bc 01       	movw	r22, r24
   11672:	84 e0       	ldi	r24, 0x04	; 4
   11674:	90 e0       	ldi	r25, 0x00	; 0
   11676:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <find_device>
   1167a:	8f 3f       	cpi	r24, 0xFF	; 255
   1167c:	2f ef       	ldi	r18, 0xFF	; 255
   1167e:	92 07       	cpc	r25, r18
   11680:	19 f0       	breq	.+6      	; 0x11688 <PRINTER_is_MTA+0x1c>
   11682:	0c 94 cd 95 	jmp	0x12b9a	; 0x12b9a <set_active_device>
   11686:	08 95       	ret
   11688:	80 e0       	ldi	r24, 0x00	; 0
   1168a:	90 e0       	ldi	r25, 0x00	; 0
   1168c:	08 95       	ret

0001168e <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   1168e:	b2 d8       	rcall	.-3740   	; 0x107f4 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11690:	19 d9       	rcall	.-3534   	; 0x108c4 <gpib_state_init>
   11692:	0e 94 54 aa 	call	0x154a8	; 0x154a8 <SS80_init>

    SS80_init();                                  // SS80 state init
   11696:	0e 94 e3 af 	call	0x15fc6	; 0x15fc6 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   1169a:	0c 94 14 bb 	jmp	0x17628	; 0x17628 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   1169e:	08 95       	ret

000116a0 <gpib_trace_task>:
   116a0:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   116a2:	1f 93       	push	r17
   116a4:	cf 93       	push	r28
   116a6:	df 93       	push	r29
   116a8:	00 d0       	rcall	.+0      	; 0x116aa <gpib_trace_task+0xa>
   116aa:	00 d0       	rcall	.+0      	; 0x116ac <gpib_trace_task+0xc>
   116ac:	1f 92       	push	r1
   116ae:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   116b0:	00 97       	sbiw	r24, 0x00	; 0
   116b2:	09 f4       	brne	.+2      	; 0x116b6 <gpib_trace_task+0x16>
   116b4:	44 c0       	rjmp	.+136    	; 0x1173e <gpib_trace_task+0x9e>
   116b6:	fc 01       	movw	r30, r24
   116b8:	20 81       	ld	r18, Z
   116ba:	22 23       	and	r18, r18
   116bc:	09 f4       	brne	.+2      	; 0x116c0 <gpib_trace_task+0x20>
   116be:	3f c0       	rjmp	.+126    	; 0x1173e <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   116c0:	0e 94 83 30 	call	0x6106	; 0x6106 <skipspaces>
   116c4:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   116c6:	ed b7       	in	r30, 0x3d	; 61
   116c8:	fe b7       	in	r31, 0x3e	; 62
   116ca:	95 83       	std	Z+5, r25	; 0x05
   116cc:	84 83       	std	Z+4, r24	; 0x04
   116ce:	83 ed       	ldi	r24, 0xD3	; 211
   116d0:	94 e1       	ldi	r25, 0x14	; 20
   116d2:	a0 e0       	ldi	r26, 0x00	; 0
   116d4:	81 83       	std	Z+1, r24	; 0x01
   116d6:	92 83       	std	Z+2, r25	; 0x02
   116d8:	a3 83       	std	Z+3, r26	; 0x03
   116da:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        if(detail)
   116de:	20 97       	sbiw	r28, 0x00	; 0
   116e0:	51 f0       	breq	.+20     	; 0x116f6 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   116e2:	88 ea       	ldi	r24, 0xA8	; 168
   116e4:	94 e1       	ldi	r25, 0x14	; 20
   116e6:	a0 e0       	ldi	r26, 0x00	; 0
   116e8:	ed b7       	in	r30, 0x3d	; 61
   116ea:	fe b7       	in	r31, 0x3e	; 62
   116ec:	81 83       	std	Z+1, r24	; 0x01
   116ee:	92 83       	std	Z+2, r25	; 0x02
   116f0:	a3 83       	std	Z+3, r26	; 0x03
   116f2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("Press ANY key to exit\n");
   116f6:	81 e9       	ldi	r24, 0x91	; 145
   116f8:	94 e1       	ldi	r25, 0x14	; 20
   116fa:	a0 e0       	ldi	r26, 0x00	; 0
   116fc:	ed b7       	in	r30, 0x3d	; 61
   116fe:	fe b7       	in	r31, 0x3e	; 62
   11700:	81 83       	std	Z+1, r24	; 0x01
   11702:	92 83       	std	Z+2, r25	; 0x02
   11704:	a3 83       	std	Z+3, r26	; 0x03
   11706:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   1170a:	6c e0       	ldi	r22, 0x0C	; 12
   1170c:	79 e0       	ldi	r23, 0x09	; 9
   1170e:	c8 01       	movw	r24, r16
   11710:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <fopen>
   11714:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   11718:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   1171c:	89 2b       	or	r24, r25
   1171e:	b9 f4       	brne	.+46     	; 0x1174e <gpib_trace_task+0xae>
        {
            perror("open failed");
   11720:	87 ea       	ldi	r24, 0xA7	; 167
   11722:	9d e0       	ldi	r25, 0x0D	; 13
   11724:	0e 94 be 76 	call	0xed7c	; 0xed7c <perror>
            printf("exiting...\n");
   11728:	85 e8       	ldi	r24, 0x85	; 133
   1172a:	94 e1       	ldi	r25, 0x14	; 20
   1172c:	a0 e0       	ldi	r26, 0x00	; 0
   1172e:	ed b7       	in	r30, 0x3d	; 61
   11730:	fe b7       	in	r31, 0x3e	; 62
   11732:	81 83       	std	Z+1, r24	; 0x01
   11734:	92 83       	std	Z+2, r25	; 0x02
   11736:	a3 83       	std	Z+3, r26	; 0x03
   11738:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            return;
   1173c:	3d c0       	rjmp	.+122    	; 0x117b8 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   1173e:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   11742:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   11746:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   1174a:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   1174e:	9f df       	rcall	.-194    	; 0x1168e <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11750:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11754:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   11758:	d2 da       	rcall	.-2652   	; 0x10cfe <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   1175a:	80 e0       	ldi	r24, 0x00	; 0
   1175c:	0e 94 b9 28 	call	0x5172	; 0x5172 <uart_keyhit>
   11760:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11762:	31 f4       	brne	.+12     	; 0x11770 <gpib_trace_task+0xd0>
   11764:	ce 01       	movw	r24, r28
        if(!detail)
   11766:	5f dc       	rcall	.-1858   	; 0x11026 <gpib_read_byte>
   11768:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   1176a:	b9 f7       	brne	.-18     	; 0x1175a <gpib_trace_task+0xba>
   1176c:	62 dd       	rcall	.-1340   	; 0x11232 <gpib_decode>
   1176e:	f5 cf       	rjmp	.-22     	; 0x1175a <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11770:	8f e7       	ldi	r24, 0x7F	; 127
   11772:	94 e1       	ldi	r25, 0x14	; 20
   11774:	a0 e0       	ldi	r26, 0x00	; 0
   11776:	ed b7       	in	r30, 0x3d	; 61
   11778:	fe b7       	in	r31, 0x3e	; 62
   1177a:	81 83       	std	Z+1, r24	; 0x01
   1177c:	92 83       	std	Z+2, r25	; 0x02
   1177e:	a3 83       	std	Z+3, r26	; 0x03
   11780:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    if(gpib_log_fp)
   11784:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <gpib_log_fp>
   11788:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <gpib_log_fp+0x1>
   1178c:	00 97       	sbiw	r24, 0x00	; 0
   1178e:	a1 f0       	breq	.+40     	; 0x117b8 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11790:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>
        printf("Capturing Closed\n");
   11794:	8d e6       	ldi	r24, 0x6D	; 109
   11796:	94 e1       	ldi	r25, 0x14	; 20
   11798:	a0 e0       	ldi	r26, 0x00	; 0
   1179a:	ed b7       	in	r30, 0x3d	; 61
   1179c:	fe b7       	in	r31, 0x3e	; 62
   1179e:	81 83       	std	Z+1, r24	; 0x01
   117a0:	92 83       	std	Z+2, r25	; 0x02
   117a2:	a3 83       	std	Z+3, r26	; 0x03
   117a4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        gpib_log_fp = stdout;
   117a8:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <__iob+0x2>
   117ac:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <__iob+0x3>
   117b0:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <gpib_log_fp+0x1>
   117b4:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <gpib_log_fp>
    }
}
   117b8:	cd b7       	in	r28, 0x3d	; 61
   117ba:	de b7       	in	r29, 0x3e	; 62
   117bc:	25 96       	adiw	r28, 0x05	; 5
   117be:	e4 e0       	ldi	r30, 0x04	; 4
   117c0:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

000117c4 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   117c4:	ef 92       	push	r14
   117c6:	ff 92       	push	r15
   117c8:	0f 93       	push	r16
   117ca:	1f 93       	push	r17
   117cc:	cf 93       	push	r28
   117ce:	df 93       	push	r29
   117d0:	00 d0       	rcall	.+0      	; 0x117d2 <gpib_error_test+0xe>
   117d2:	1f 92       	push	r1
   117d4:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   117d6:	ec 01       	movw	r28, r24
   117d8:	cc 27       	eor	r28, r28
   117da:	d0 7d       	andi	r29, 0xD0	; 208
   117dc:	20 97       	sbiw	r28, 0x00	; 0
   117de:	61 f0       	breq	.+24     	; 0x117f8 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   117e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117e4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117e8:	8d 72       	andi	r24, 0x2D	; 45
   117ea:	99 27       	eor	r25, r25
   117ec:	87 01       	movw	r16, r14
   117ee:	00 27       	eor	r16, r16
   117f0:	10 71       	andi	r17, 0x10	; 16
   117f2:	89 2b       	or	r24, r25
   117f4:	59 f4       	brne	.+22     	; 0x1180c <gpib_error_test+0x48>
   117f6:	17 c0       	rjmp	.+46     	; 0x11826 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   117f8:	80 e0       	ldi	r24, 0x00	; 0
   117fa:	0e 94 b9 28 	call	0x5172	; 0x5172 <uart_keyhit>
   117fe:	89 2b       	or	r24, r25
   11800:	79 f7       	brne	.-34     	; 0x117e0 <gpib_error_test+0x1c>
   11802:	0e 94 42 6d 	call	0xda84	; 0xda84 <mmc_ins_status>
   11806:	01 97       	sbiw	r24, 0x01	; 1
   11808:	59 f7       	brne	.-42     	; 0x117e0 <gpib_error_test+0x1c>
   1180a:	62 c0       	rjmp	.+196    	; 0x118d0 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   1180c:	01 15       	cp	r16, r1
   1180e:	11 05       	cpc	r17, r1
   11810:	51 f0       	breq	.+20     	; 0x11826 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11812:	86 e6       	ldi	r24, 0x66	; 102
   11814:	94 e1       	ldi	r25, 0x14	; 20
   11816:	a0 e0       	ldi	r26, 0x00	; 0
   11818:	ed b7       	in	r30, 0x3d	; 61
   1181a:	fe b7       	in	r31, 0x3e	; 62
   1181c:	81 83       	std	Z+1, r24	; 0x01
   1181e:	92 83       	std	Z+2, r25	; 0x02
   11820:	a3 83       	std	Z+3, r26	; 0x03
   11822:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11826:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1182a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1182e:	8d 72       	andi	r24, 0x2D	; 45
   11830:	99 27       	eor	r25, r25
   11832:	89 2b       	or	r24, r25
   11834:	c1 f0       	breq	.+48     	; 0x11866 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11836:	f6 fe       	sbrs	r15, 6
   11838:	0a c0       	rjmp	.+20     	; 0x1184e <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   1183a:	8b e5       	ldi	r24, 0x5B	; 91
   1183c:	94 e1       	ldi	r25, 0x14	; 20
   1183e:	a0 e0       	ldi	r26, 0x00	; 0
   11840:	ed b7       	in	r30, 0x3d	; 61
   11842:	fe b7       	in	r31, 0x3e	; 62
   11844:	81 83       	std	Z+1, r24	; 0x01
   11846:	92 83       	std	Z+2, r25	; 0x02
   11848:	a3 83       	std	Z+3, r26	; 0x03
   1184a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            if(val & BUS_ERROR_FLAG)
   1184e:	d7 ff       	sbrs	r29, 7
   11850:	0a c0       	rjmp	.+20     	; 0x11866 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11852:	84 e5       	ldi	r24, 0x54	; 84
   11854:	94 e1       	ldi	r25, 0x14	; 20
   11856:	a0 e0       	ldi	r26, 0x00	; 0
   11858:	ed b7       	in	r30, 0x3d	; 61
   1185a:	fe b7       	in	r31, 0x3e	; 62
   1185c:	81 83       	std	Z+1, r24	; 0x01
   1185e:	92 83       	std	Z+2, r25	; 0x02
   11860:	a3 83       	std	Z+3, r26	; 0x03
   11862:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        }

        if(uart_keyhit(0))
   11866:	80 e0       	ldi	r24, 0x00	; 0
   11868:	0e 94 b9 28 	call	0x5172	; 0x5172 <uart_keyhit>
   1186c:	89 2b       	or	r24, r25
   1186e:	51 f0       	breq	.+20     	; 0x11884 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11870:	87 e4       	ldi	r24, 0x47	; 71
   11872:	94 e1       	ldi	r25, 0x14	; 20
   11874:	a0 e0       	ldi	r26, 0x00	; 0
   11876:	ed b7       	in	r30, 0x3d	; 61
   11878:	fe b7       	in	r31, 0x3e	; 62
   1187a:	81 83       	std	Z+1, r24	; 0x01
   1187c:	92 83       	std	Z+2, r25	; 0x02
   1187e:	a3 83       	std	Z+3, r26	; 0x03
   11880:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

        if( mmc_ins_status() != 1 )
   11884:	0e 94 42 6d 	call	0xda84	; 0xda84 <mmc_ins_status>
   11888:	01 97       	sbiw	r24, 0x01	; 1
   1188a:	51 f0       	breq	.+20     	; 0x118a0 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   1188c:	86 e3       	ldi	r24, 0x36	; 54
   1188e:	94 e1       	ldi	r25, 0x14	; 20
   11890:	a0 e0       	ldi	r26, 0x00	; 0
   11892:	ed b7       	in	r30, 0x3d	; 61
   11894:	fe b7       	in	r31, 0x3e	; 62
   11896:	81 83       	std	Z+1, r24	; 0x01
   11898:	92 83       	std	Z+2, r25	; 0x02
   1189a:	a3 83       	std	Z+3, r26	; 0x03
   1189c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

        if(val & IFC_FLAG)
   118a0:	01 15       	cp	r16, r1
   118a2:	11 05       	cpc	r17, r1
   118a4:	09 f0       	breq	.+2      	; 0x118a8 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   118a6:	f3 de       	rcall	.-538    	; 0x1168e <gpib_init_devices>
        }

        if(uart_keyhit(0))
   118a8:	80 e0       	ldi	r24, 0x00	; 0
   118aa:	0e 94 b9 28 	call	0x5172	; 0x5172 <uart_keyhit>
   118ae:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   118b0:	11 f0       	breq	.+4      	; 0x118b6 <gpib_error_test+0xf2>
   118b2:	ed de       	rcall	.-550    	; 0x1168e <gpib_init_devices>
   118b4:	0b c0       	rjmp	.+22     	; 0x118cc <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   118b6:	0e 94 42 6d 	call	0xda84	; 0xda84 <mmc_ins_status>
   118ba:	01 97       	sbiw	r24, 0x01	; 1
   118bc:	39 f4       	brne	.+14     	; 0x118cc <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   118be:	01 15       	cp	r16, r1
   118c0:	11 05       	cpc	r17, r1
   118c2:	31 f0       	breq	.+12     	; 0x118d0 <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   118c4:	54 98       	cbi	0x0a, 4	; 10
   118c6:	4c 9b       	sbis	0x09, 4	; 9
   118c8:	fd cf       	rjmp	.-6      	; 0x118c4 <gpib_error_test+0x100>
   118ca:	02 c0       	rjmp	.+4      	; 0x118d0 <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   118cc:	c1 e0       	ldi	r28, 0x01	; 1
   118ce:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   118d0:	ce 01       	movw	r24, r28
   118d2:	cd b7       	in	r28, 0x3d	; 61
   118d4:	de b7       	in	r29, 0x3e	; 62
   118d6:	23 96       	adiw	r28, 0x03	; 3
   118d8:	e6 e0       	ldi	r30, 0x06	; 6
   118da:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

000118de <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   118de:	1f 93       	push	r17
   118e0:	cf 93       	push	r28
   118e2:	df 93       	push	r29
   118e4:	ec 01       	movw	r28, r24
   118e6:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   118e8:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   118ec:	8f 35       	cpi	r24, 0x5F	; 95
   118ee:	91 f0       	breq	.+36     	; 0x11914 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   118f0:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   118f4:	90 e0       	ldi	r25, 0x00	; 0
   118f6:	76 de       	rcall	.-788    	; 0x115e4 <AMIGO_is_MLA>
   118f8:	89 2b       	or	r24, r25
   118fa:	c9 f4       	brne	.+50     	; 0x1192e <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   118fc:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11900:	90 e0       	ldi	r25, 0x00	; 0
   11902:	3d de       	rcall	.-902    	; 0x1157e <SS80_is_MLA>
   11904:	89 2b       	or	r24, r25
   11906:	11 f5       	brne	.+68     	; 0x1194c <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11908:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1190c:	90 e0       	ldi	r25, 0x00	; 0
   1190e:	9d de       	rcall	.-710    	; 0x1164a <PRINTER_is_MLA>
   11910:	89 2b       	or	r24, r25
   11912:	59 f5       	brne	.+86     	; 0x1196a <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11914:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11918:	8f 33       	cpi	r24, 0x3F	; 63
   1191a:	19 f4       	brne	.+6      	; 0x11922 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   1191c:	80 e0       	ldi	r24, 0x00	; 0
   1191e:	90 e0       	ldi	r25, 0x00	; 0
   11920:	2e c0       	rjmp	.+92     	; 0x1197e <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11922:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11926:	90 e0       	ldi	r25, 0x00	; 0
   11928:	6e de       	rcall	.-804    	; 0x11606 <AMIGO_is_MTA>
   1192a:	89 2b       	or	r24, r25
   1192c:	49 f0       	breq	.+18     	; 0x11940 <GPIB_COMMANDS+0x62>
        {
            if(unread)
   1192e:	11 23       	and	r17, r17
   11930:	11 f0       	breq	.+4      	; 0x11936 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11932:	ce 01       	movw	r24, r28
   11934:	60 d8       	rcall	.-3904   	; 0x109f6 <gpib_unread>
   11936:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = AMIGO_COMMANDS(secondary);
   1193a:	0e 94 0f ba 	call	0x1741e	; 0x1741e <AMIGO_COMMANDS>
   1193e:	1d c0       	rjmp	.+58     	; 0x1197a <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11940:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11944:	90 e0       	ldi	r25, 0x00	; 0
   11946:	2c de       	rcall	.-936    	; 0x115a0 <SS80_is_MTA>
   11948:	89 2b       	or	r24, r25
   1194a:	49 f0       	breq	.+18     	; 0x1195e <GPIB_COMMANDS+0x80>
        {
            if(unread)
   1194c:	11 23       	and	r17, r17
   1194e:	11 f0       	breq	.+4      	; 0x11954 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11950:	ce 01       	movw	r24, r28
   11952:	51 d8       	rcall	.-3934   	; 0x109f6 <gpib_unread>
   11954:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = SS80_COMMANDS(secondary);
   11958:	0e 94 2f ae 	call	0x15c5e	; 0x15c5e <SS80_COMMANDS>
   1195c:	0e c0       	rjmp	.+28     	; 0x1197a <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   1195e:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11962:	90 e0       	ldi	r25, 0x00	; 0
   11964:	83 de       	rcall	.-762    	; 0x1166c <PRINTER_is_MTA>
   11966:	89 2b       	or	r24, r25
   11968:	c9 f2       	breq	.-78     	; 0x1191c <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   1196a:	11 23       	and	r17, r17
   1196c:	11 f0       	breq	.+4      	; 0x11972 <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   1196e:	ce 01       	movw	r24, r28
   11970:	42 d8       	rcall	.-3964   	; 0x109f6 <gpib_unread>
   11972:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11976:	0e 94 88 bc 	call	0x17910	; 0x17910 <PRINTER_COMMANDS>
   1197a:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
            secondary = 0;
   1197e:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11980:	cf 91       	pop	r28
   11982:	1f 91       	pop	r17
   11984:	08 95       	ret

00011986 <Send_Identify>:
   11986:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11988:	df 92       	push	r13
   1198a:	ff 92       	push	r15
   1198c:	0f 93       	push	r16
   1198e:	1f 93       	push	r17
   11990:	cf 93       	push	r28
   11992:	df 93       	push	r29
   11994:	cd b7       	in	r28, 0x3d	; 61
   11996:	de b7       	in	r29, 0x3e	; 62
   11998:	2b 97       	sbiw	r28, 0x0b	; 11
   1199a:	0f b6       	in	r0, 0x3f	; 63
   1199c:	f8 94       	cli
   1199e:	de bf       	out	0x3e, r29	; 62
   119a0:	0f be       	out	0x3f, r0	; 63
   119a2:	cd bf       	out	0x3d, r28	; 61
   119a4:	f8 2e       	mov	r15, r24
   119a6:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   119a8:	80 e0       	ldi	r24, 0x00	; 0
   119aa:	91 e0       	ldi	r25, 0x01	; 1
   119ac:	9b 87       	std	Y+11, r25	; 0x0b
   119ae:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   119b0:	8b 01       	movw	r16, r22
   119b2:	20 e0       	ldi	r18, 0x00	; 0
   119b4:	30 e0       	ldi	r19, 0x00	; 0
   119b6:	42 e0       	ldi	r20, 0x02	; 2
   119b8:	50 e0       	ldi	r21, 0x00	; 0
   119ba:	60 e0       	ldi	r22, 0x00	; 0
   119bc:	70 e0       	ldi	r23, 0x00	; 0
   119be:	ce 01       	movw	r24, r28
   119c0:	08 96       	adiw	r24, 0x08	; 8
   119c2:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   119c6:	ae 01       	movw	r20, r28
   119c8:	46 5f       	subi	r20, 0xF6	; 246
   119ca:	5f 4f       	sbci	r21, 0xFF	; 255
   119cc:	62 e0       	ldi	r22, 0x02	; 2
   119ce:	70 e0       	ldi	r23, 0x00	; 0
   119d0:	ce 01       	movw	r24, r28
   119d2:	08 96       	adiw	r24, 0x08	; 8
   119d4:	d4 dc       	rcall	.-1624   	; 0x1137e <gpib_write_str>
   119d6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   119da:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119de:	02 97       	sbiw	r24, 0x02	; 2
   119e0:	79 f0       	breq	.+30     	; 0x11a00 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   119e2:	25 72       	andi	r18, 0x25	; 37
   119e4:	33 27       	eor	r19, r19
   119e6:	23 2b       	or	r18, r19
   119e8:	f9 f0       	breq	.+62     	; 0x11a28 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   119ea:	ed b7       	in	r30, 0x3d	; 61
   119ec:	fe b7       	in	r31, 0x3e	; 62
   119ee:	d7 82       	std	Z+7, r13	; 0x07
   119f0:	c6 82       	std	Z+6, r12	; 0x06
   119f2:	8f 2d       	mov	r24, r15
   119f4:	90 e0       	ldi	r25, 0x00	; 0
   119f6:	95 83       	std	Z+5, r25	; 0x05
   119f8:	84 83       	std	Z+4, r24	; 0x04
   119fa:	85 e1       	ldi	r24, 0x15	; 21
   119fc:	94 e1       	ldi	r25, 0x14	; 20
   119fe:	0e c0       	rjmp	.+28     	; 0x11a1c <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11a00:	24 72       	andi	r18, 0x24	; 36
   11a02:	33 27       	eor	r19, r19
   11a04:	23 2b       	or	r18, r19
   11a06:	81 f0       	breq	.+32     	; 0x11a28 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11a08:	ed b7       	in	r30, 0x3d	; 61
   11a0a:	fe b7       	in	r31, 0x3e	; 62
   11a0c:	d7 82       	std	Z+7, r13	; 0x07
   11a0e:	c6 82       	std	Z+6, r12	; 0x06
   11a10:	8f 2d       	mov	r24, r15
   11a12:	90 e0       	ldi	r25, 0x00	; 0
   11a14:	95 83       	std	Z+5, r25	; 0x05
   11a16:	84 83       	std	Z+4, r24	; 0x04
   11a18:	8b ef       	ldi	r24, 0xFB	; 251
   11a1a:	93 e1       	ldi	r25, 0x13	; 19
   11a1c:	a0 e0       	ldi	r26, 0x00	; 0
   11a1e:	81 83       	std	Z+1, r24	; 0x01
   11a20:	92 83       	std	Z+2, r25	; 0x02
   11a22:	a3 83       	std	Z+3, r26	; 0x03
   11a24:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
    return (status & ERROR_MASK);
   11a28:	8a 85       	ldd	r24, Y+10	; 0x0a
   11a2a:	9b 85       	ldd	r25, Y+11	; 0x0b
   11a2c:	88 27       	eor	r24, r24
   11a2e:	90 7d       	andi	r25, 0xD0	; 208
}
   11a30:	2b 96       	adiw	r28, 0x0b	; 11
   11a32:	0f b6       	in	r0, 0x3f	; 63
   11a34:	f8 94       	cli
   11a36:	de bf       	out	0x3e, r29	; 62
   11a38:	0f be       	out	0x3f, r0	; 63
   11a3a:	cd bf       	out	0x3d, r28	; 61
   11a3c:	df 91       	pop	r29
   11a3e:	cf 91       	pop	r28
   11a40:	1f 91       	pop	r17
   11a42:	0f 91       	pop	r16
   11a44:	ff 90       	pop	r15
   11a46:	df 90       	pop	r13
   11a48:	cf 90       	pop	r12
   11a4a:	08 95       	ret

00011a4c <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11a4c:	00 d0       	rcall	.+0      	; 0x11a4e <GPIB+0x2>
   11a4e:	00 d0       	rcall	.+0      	; 0x11a50 <GPIB+0x4>
   11a50:	1f 92       	push	r1
   11a52:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11a56:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11a5a:	85 30       	cpi	r24, 0x05	; 5
   11a5c:	89 f4       	brne	.+34     	; 0x11a80 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a5e:	27 71       	andi	r18, 0x17	; 23
   11a60:	33 27       	eor	r19, r19
   11a62:	23 2b       	or	r18, r19
   11a64:	51 f0       	breq	.+20     	; 0x11a7a <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11a66:	83 ee       	ldi	r24, 0xE3	; 227
   11a68:	93 e1       	ldi	r25, 0x13	; 19
   11a6a:	a0 e0       	ldi	r26, 0x00	; 0
   11a6c:	ed b7       	in	r30, 0x3d	; 61
   11a6e:	fe b7       	in	r31, 0x3e	; 62
   11a70:	81 83       	std	Z+1, r24	; 0x01
   11a72:	92 83       	std	Z+2, r25	; 0x02
   11a74:	a3 83       	std	Z+3, r26	; 0x03
   11a76:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        spoll = 0;
   11a7a:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <spoll>
   11a7e:	a0 c0       	rjmp	.+320    	; 0x11bc0 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11a80:	85 31       	cpi	r24, 0x15	; 21
   11a82:	39 f4       	brne	.+14     	; 0x11a92 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a84:	27 71       	andi	r18, 0x17	; 23
   11a86:	33 27       	eor	r19, r19
   11a88:	23 2b       	or	r18, r19
   11a8a:	b9 f3       	breq	.-18     	; 0x11a7a <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11a8c:	8b ec       	ldi	r24, 0xCB	; 203
   11a8e:	93 e1       	ldi	r25, 0x13	; 19
   11a90:	ec cf       	rjmp	.-40     	; 0x11a6a <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11a92:	88 31       	cpi	r24, 0x18	; 24
   11a94:	d9 f4       	brne	.+54     	; 0x11acc <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11a96:	26 70       	andi	r18, 0x06	; 6
   11a98:	33 27       	eor	r19, r19
   11a9a:	23 2b       	or	r18, r19
   11a9c:	51 f0       	breq	.+20     	; 0x11ab2 <GPIB+0x66>
            printf("[SPE]\n");
   11a9e:	84 ec       	ldi	r24, 0xC4	; 196
   11aa0:	93 e1       	ldi	r25, 0x13	; 19
   11aa2:	a0 e0       	ldi	r26, 0x00	; 0
   11aa4:	ed b7       	in	r30, 0x3d	; 61
   11aa6:	fe b7       	in	r31, 0x3e	; 62
   11aa8:	81 83       	std	Z+1, r24	; 0x01
   11aaa:	92 83       	std	Z+2, r25	; 0x02
   11aac:	a3 83       	std	Z+3, r26	; 0x03
   11aae:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
        spoll = 1;
   11ab2:	81 e0       	ldi	r24, 0x01	; 1
   11ab4:	80 93 f3 1e 	sts	0x1EF3, r24	; 0x801ef3 <spoll>
        if(SS80_is_MTA(talking))
   11ab8:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11abc:	90 e0       	ldi	r25, 0x00	; 0
   11abe:	70 dd       	rcall	.-1312   	; 0x115a0 <SS80_is_MTA>
   11ac0:	89 2b       	or	r24, r25
   11ac2:	09 f4       	brne	.+2      	; 0x11ac6 <GPIB+0x7a>
   11ac4:	7d c0       	rjmp	.+250    	; 0x11bc0 <GPIB+0x174>
        {
            return( SS80_Report() );
   11ac6:	0e 94 e8 a9 	call	0x153d0	; 0x153d0 <SS80_Report>
   11aca:	7c c0       	rjmp	.+248    	; 0x11bc4 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11acc:	89 31       	cpi	r24, 0x19	; 25
   11ace:	39 f4       	brne	.+14     	; 0x11ade <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11ad0:	26 70       	andi	r18, 0x06	; 6
   11ad2:	33 27       	eor	r19, r19
   11ad4:	23 2b       	or	r18, r19
   11ad6:	89 f2       	breq	.-94     	; 0x11a7a <GPIB+0x2e>
            printf("[SPD]\n");
   11ad8:	8d eb       	ldi	r24, 0xBD	; 189
   11ada:	93 e1       	ldi	r25, 0x13	; 19
   11adc:	c6 cf       	rjmp	.-116    	; 0x11a6a <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11ade:	84 30       	cpi	r24, 0x04	; 4
   11ae0:	09 f0       	breq	.+2      	; 0x11ae4 <GPIB+0x98>
   11ae2:	48 c0       	rjmp	.+144    	; 0x11b74 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ae4:	22 ff       	sbrs	r18, 2
   11ae6:	0a c0       	rjmp	.+20     	; 0x11afc <GPIB+0xb0>
            printf("[SDC]\n");
   11ae8:	86 eb       	ldi	r24, 0xB6	; 182
   11aea:	93 e1       	ldi	r25, 0x13	; 19
   11aec:	a0 e0       	ldi	r26, 0x00	; 0
   11aee:	ed b7       	in	r30, 0x3d	; 61
   11af0:	fe b7       	in	r31, 0x3e	; 62
   11af2:	81 83       	std	Z+1, r24	; 0x01
   11af4:	92 83       	std	Z+2, r25	; 0x02
   11af6:	a3 83       	std	Z+3, r26	; 0x03
   11af8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11afc:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11b00:	90 e0       	ldi	r25, 0x00	; 0
   11b02:	3d dd       	rcall	.-1414   	; 0x1157e <SS80_is_MLA>
   11b04:	89 2b       	or	r24, r25
   11b06:	d9 f0       	breq	.+54     	; 0x11b3e <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b08:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b0c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b10:	84 72       	andi	r24, 0x24	; 36
   11b12:	99 27       	eor	r25, r25
   11b14:	89 2b       	or	r24, r25
   11b16:	51 f0       	breq	.+20     	; 0x11b2c <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11b18:	8a ea       	ldi	r24, 0xAA	; 170
   11b1a:	93 e1       	ldi	r25, 0x13	; 19
   11b1c:	a0 e0       	ldi	r26, 0x00	; 0
   11b1e:	ed b7       	in	r30, 0x3d	; 61
   11b20:	fe b7       	in	r31, 0x3e	; 62
   11b22:	81 83       	std	Z+1, r24	; 0x01
   11b24:	92 83       	std	Z+2, r25	; 0x02
   11b26:	a3 83       	std	Z+3, r26	; 0x03
   11b28:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11b2c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   11b30:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   11b34:	85 81       	ldd	r24, Z+5	; 0x05
   11b36:	90 e0       	ldi	r25, 0x00	; 0
   11b38:	0e 94 b4 aa 	call	0x15568	; 0x15568 <SS80_Selected_Device_Clear>
   11b3c:	43 c0       	rjmp	.+134    	; 0x11bc4 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11b3e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11b42:	90 e0       	ldi	r25, 0x00	; 0
   11b44:	4f dd       	rcall	.-1378   	; 0x115e4 <AMIGO_is_MLA>
   11b46:	89 2b       	or	r24, r25
   11b48:	d9 f1       	breq	.+118    	; 0x11bc0 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b4e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b52:	84 72       	andi	r24, 0x24	; 36
   11b54:	99 27       	eor	r25, r25
   11b56:	89 2b       	or	r24, r25
   11b58:	51 f0       	breq	.+20     	; 0x11b6e <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11b5a:	8d e9       	ldi	r24, 0x9D	; 157
   11b5c:	93 e1       	ldi	r25, 0x13	; 19
   11b5e:	a0 e0       	ldi	r26, 0x00	; 0
   11b60:	ed b7       	in	r30, 0x3d	; 61
   11b62:	fe b7       	in	r31, 0x3e	; 62
   11b64:	81 83       	std	Z+1, r24	; 0x01
   11b66:	92 83       	std	Z+2, r25	; 0x02
   11b68:	a3 83       	std	Z+3, r26	; 0x03
   11b6a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11b6e:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <amigo_cmd_clear>
   11b72:	28 c0       	rjmp	.+80     	; 0x11bc4 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11b74:	84 31       	cpi	r24, 0x14	; 20
   11b76:	99 f4       	brne	.+38     	; 0x11b9e <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11b78:	22 ff       	sbrs	r18, 2
   11b7a:	0a c0       	rjmp	.+20     	; 0x11b90 <GPIB+0x144>
            printf("[DCL]\n");
   11b7c:	86 e9       	ldi	r24, 0x96	; 150
   11b7e:	93 e1       	ldi	r25, 0x13	; 19
   11b80:	a0 e0       	ldi	r26, 0x00	; 0
   11b82:	ed b7       	in	r30, 0x3d	; 61
   11b84:	fe b7       	in	r31, 0x3e	; 62
   11b86:	81 83       	std	Z+1, r24	; 0x01
   11b88:	92 83       	std	Z+2, r25	; 0x02
   11b8a:	a3 83       	std	Z+3, r26	; 0x03
   11b8c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11b90:	0e 94 a6 aa 	call	0x1554c	; 0x1554c <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11b94:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11b98:	0e 94 14 bb 	call	0x17628	; 0x17628 <printer_close>
   11b9c:	11 c0       	rjmp	.+34     	; 0x11bc0 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b9e:	25 71       	andi	r18, 0x15	; 21
   11ba0:	33 27       	eor	r19, r19
   11ba2:	23 2b       	or	r18, r19
   11ba4:	69 f0       	breq	.+26     	; 0x11bc0 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11ba6:	90 e0       	ldi	r25, 0x00	; 0
   11ba8:	ed b7       	in	r30, 0x3d	; 61
   11baa:	fe b7       	in	r31, 0x3e	; 62
   11bac:	95 83       	std	Z+5, r25	; 0x05
   11bae:	84 83       	std	Z+4, r24	; 0x04
   11bb0:	85 e7       	ldi	r24, 0x75	; 117
   11bb2:	93 e1       	ldi	r25, 0x13	; 19
   11bb4:	a0 e0       	ldi	r26, 0x00	; 0
   11bb6:	81 83       	std	Z+1, r24	; 0x01
   11bb8:	92 83       	std	Z+2, r25	; 0x02
   11bba:	a3 83       	std	Z+3, r26	; 0x03
   11bbc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    return(0);
   11bc0:	80 e0       	ldi	r24, 0x00	; 0
   11bc2:	90 e0       	ldi	r25, 0x00	; 0
}
   11bc4:	0f 90       	pop	r0
   11bc6:	0f 90       	pop	r0
   11bc8:	0f 90       	pop	r0
   11bca:	0f 90       	pop	r0
   11bcc:	0f 90       	pop	r0
   11bce:	08 95       	ret

00011bd0 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11bd0:	cf 93       	push	r28
   11bd2:	df 93       	push	r29
   11bd4:	00 d0       	rcall	.+0      	; 0x11bd6 <GPIB_TALK+0x6>
   11bd6:	00 d0       	rcall	.+0      	; 0x11bd8 <GPIB_TALK+0x8>
   11bd8:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11bda:	90 91 f6 1e 	lds	r25, 0x1EF6	; 0x801ef6 <talking>
   11bde:	90 93 f9 1e 	sts	0x1EF9, r25	; 0x801ef9 <talking_last>
    talking = ch;
   11be2:	80 93 f6 1e 	sts	0x1EF6, r24	; 0x801ef6 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11be6:	8f 35       	cpi	r24, 0x5F	; 95
   11be8:	79 f4       	brne	.+30     	; 0x11c08 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11bea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bee:	82 ff       	sbrs	r24, 2
   11bf0:	7f c0       	rjmp	.+254    	; 0x11cf0 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11bf2:	82 e2       	ldi	r24, 0x22	; 34
   11bf4:	93 e1       	ldi	r25, 0x13	; 19
   11bf6:	a0 e0       	ldi	r26, 0x00	; 0
   11bf8:	ed b7       	in	r30, 0x3d	; 61
   11bfa:	fe b7       	in	r31, 0x3e	; 62
   11bfc:	81 83       	std	Z+1, r24	; 0x01
   11bfe:	92 83       	std	Z+2, r25	; 0x02
   11c00:	a3 83       	std	Z+3, r26	; 0x03
   11c02:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   11c06:	74 c0       	rjmp	.+232    	; 0x11cf0 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11c08:	c8 2f       	mov	r28, r24
   11c0a:	d0 e0       	ldi	r29, 0x00	; 0
   11c0c:	ce 01       	movw	r24, r28
   11c0e:	c8 dc       	rcall	.-1648   	; 0x115a0 <SS80_is_MTA>
   11c10:	89 2b       	or	r24, r25
   11c12:	e1 f0       	breq	.+56     	; 0x11c4c <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c18:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c1c:	84 72       	andi	r24, 0x24	; 36
   11c1e:	99 27       	eor	r25, r25
   11c20:	89 2b       	or	r24, r25
   11c22:	61 f0       	breq	.+24     	; 0x11c3c <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11c24:	ed b7       	in	r30, 0x3d	; 61
   11c26:	fe b7       	in	r31, 0x3e	; 62
   11c28:	d5 83       	std	Z+5, r29	; 0x05
   11c2a:	c4 83       	std	Z+4, r28	; 0x04
   11c2c:	81 e1       	ldi	r24, 0x11	; 17
   11c2e:	93 e1       	ldi	r25, 0x13	; 19
   11c30:	a0 e0       	ldi	r26, 0x00	; 0
   11c32:	81 83       	std	Z+1, r24	; 0x01
   11c34:	92 83       	std	Z+2, r25	; 0x02
   11c36:	a3 83       	std	Z+3, r26	; 0x03
   11c38:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif

        if (spoll)
   11c3c:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <spoll>
   11c40:	88 23       	and	r24, r24
   11c42:	09 f4       	brne	.+2      	; 0x11c46 <GPIB_TALK+0x76>
   11c44:	55 c0       	rjmp	.+170    	; 0x11cf0 <GPIB_TALK+0x120>
        {
            SS80_Report();
   11c46:	0e 94 e8 a9 	call	0x153d0	; 0x153d0 <SS80_Report>
   11c4a:	52 c0       	rjmp	.+164    	; 0x11cf0 <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11c4c:	ce 01       	movw	r24, r28
   11c4e:	db dc       	rcall	.-1610   	; 0x11606 <AMIGO_is_MTA>
   11c50:	89 2b       	or	r24, r25
   11c52:	81 f0       	breq	.+32     	; 0x11c74 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c58:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c5c:	84 72       	andi	r24, 0x24	; 36
   11c5e:	99 27       	eor	r25, r25
   11c60:	89 2b       	or	r24, r25
   11c62:	09 f4       	brne	.+2      	; 0x11c66 <GPIB_TALK+0x96>
   11c64:	45 c0       	rjmp	.+138    	; 0x11cf0 <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11c66:	ed b7       	in	r30, 0x3d	; 61
   11c68:	fe b7       	in	r31, 0x3e	; 62
   11c6a:	d5 83       	std	Z+5, r29	; 0x05
   11c6c:	c4 83       	std	Z+4, r28	; 0x04
   11c6e:	8f ef       	ldi	r24, 0xFF	; 255
   11c70:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11c72:	38 c0       	rjmp	.+112    	; 0x11ce4 <GPIB_TALK+0x114>
   11c74:	ce 01       	movw	r24, r28
   11c76:	fa dc       	rcall	.-1548   	; 0x1166c <PRINTER_is_MTA>
   11c78:	89 2b       	or	r24, r25
   11c7a:	79 f0       	breq	.+30     	; 0x11c9a <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c7c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c80:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c84:	84 72       	andi	r24, 0x24	; 36
   11c86:	99 27       	eor	r25, r25
   11c88:	89 2b       	or	r24, r25
   11c8a:	91 f1       	breq	.+100    	; 0x11cf0 <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11c8c:	ed b7       	in	r30, 0x3d	; 61
   11c8e:	fe b7       	in	r31, 0x3e	; 62
   11c90:	d5 83       	std	Z+5, r29	; 0x05
   11c92:	c4 83       	std	Z+4, r28	; 0x04
   11c94:	8b ee       	ldi	r24, 0xEB	; 235
   11c96:	92 e1       	ldi	r25, 0x12	; 18
   11c98:	25 c0       	rjmp	.+74     	; 0x11ce4 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11c9a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11c9e:	90 e0       	ldi	r25, 0x00	; 0
   11ca0:	d4 dc       	rcall	.-1624   	; 0x1164a <PRINTER_is_MLA>
   11ca2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ca6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11caa:	89 2b       	or	r24, r25
   11cac:	99 f0       	breq	.+38     	; 0x11cd4 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cae:	24 72       	andi	r18, 0x24	; 36
   11cb0:	33 27       	eor	r19, r19
   11cb2:	23 2b       	or	r18, r19
   11cb4:	51 f0       	breq	.+20     	; 0x11cca <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11cb6:	8b ed       	ldi	r24, 0xDB	; 219
   11cb8:	92 e1       	ldi	r25, 0x12	; 18
   11cba:	a0 e0       	ldi	r26, 0x00	; 0
   11cbc:	ed b7       	in	r30, 0x3d	; 61
   11cbe:	fe b7       	in	r31, 0x3e	; 62
   11cc0:	81 83       	std	Z+1, r24	; 0x01
   11cc2:	92 83       	std	Z+2, r25	; 0x02
   11cc4:	a3 83       	std	Z+3, r26	; 0x03
   11cc6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printer_open(NULL);
   11cca:	80 e0       	ldi	r24, 0x00	; 0
   11ccc:	90 e0       	ldi	r25, 0x00	; 0
   11cce:	0e 94 6c bb 	call	0x176d8	; 0x176d8 <printer_open>
   11cd2:	0e c0       	rjmp	.+28     	; 0x11cf0 <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11cd4:	22 ff       	sbrs	r18, 2
   11cd6:	0c c0       	rjmp	.+24     	; 0x11cf0 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11cd8:	ed b7       	in	r30, 0x3d	; 61
   11cda:	fe b7       	in	r31, 0x3e	; 62
   11cdc:	d5 83       	std	Z+5, r29	; 0x05
   11cde:	c4 83       	std	Z+4, r28	; 0x04
   11ce0:	8f ec       	ldi	r24, 0xCF	; 207
   11ce2:	92 e1       	ldi	r25, 0x12	; 18
   11ce4:	a0 e0       	ldi	r26, 0x00	; 0
   11ce6:	81 83       	std	Z+1, r24	; 0x01
   11ce8:	92 83       	std	Z+2, r25	; 0x02
   11cea:	a3 83       	std	Z+3, r26	; 0x03
   11cec:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11cf0:	80 e0       	ldi	r24, 0x00	; 0
   11cf2:	90 e0       	ldi	r25, 0x00	; 0
   11cf4:	cd b7       	in	r28, 0x3d	; 61
   11cf6:	de b7       	in	r29, 0x3e	; 62
   11cf8:	25 96       	adiw	r28, 0x05	; 5
   11cfa:	e2 e0       	ldi	r30, 0x02	; 2
   11cfc:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00011d00 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11d00:	a9 e0       	ldi	r26, 0x09	; 9
   11d02:	b0 e0       	ldi	r27, 0x00	; 0
   11d04:	e6 e8       	ldi	r30, 0x86	; 134
   11d06:	fe e8       	ldi	r31, 0x8E	; 142
   11d08:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1e>
   11d0c:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11d0e:	c8 2f       	mov	r28, r24
   11d10:	d0 e0       	ldi	r29, 0x00	; 0
   11d12:	ce 01       	movw	r24, r28
   11d14:	56 dc       	rcall	.-1876   	; 0x115c2 <SS80_is_MSA>
   11d16:	89 2b       	or	r24, r25
   11d18:	09 f1       	breq	.+66     	; 0x11d5c <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d1e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d22:	84 72       	andi	r24, 0x24	; 36
   11d24:	99 27       	eor	r25, r25
   11d26:	89 2b       	or	r24, r25
   11d28:	61 f0       	breq	.+24     	; 0x11d42 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11d2a:	ed b7       	in	r30, 0x3d	; 61
   11d2c:	fe b7       	in	r31, 0x3e	; 62
   11d2e:	d5 83       	std	Z+5, r29	; 0x05
   11d30:	c4 83       	std	Z+4, r28	; 0x04
   11d32:	8e eb       	ldi	r24, 0xBE	; 190
   11d34:	92 e1       	ldi	r25, 0x12	; 18
   11d36:	a0 e0       	ldi	r26, 0x00	; 0
   11d38:	81 83       	std	Z+1, r24	; 0x01
   11d3a:	92 83       	std	Z+2, r25	; 0x02
   11d3c:	a3 83       	std	Z+3, r26	; 0x03
   11d3e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11d42:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   11d46:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   11d4a:	81 81       	ldd	r24, Z+1	; 0x01
   11d4c:	90 e0       	ldi	r25, 0x00	; 0
   11d4e:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11d52:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   11d56:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   11d5a:	25 c0       	rjmp	.+74     	; 0x11da6 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11d5c:	ce 01       	movw	r24, r28
   11d5e:	64 dc       	rcall	.-1848   	; 0x11628 <AMIGO_is_MSA>
   11d60:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d64:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d68:	89 2b       	or	r24, r25
   11d6a:	11 f1       	breq	.+68     	; 0x11db0 <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d6c:	c9 01       	movw	r24, r18
   11d6e:	84 72       	andi	r24, 0x24	; 36
   11d70:	99 27       	eor	r25, r25
   11d72:	89 2b       	or	r24, r25
   11d74:	61 f0       	breq	.+24     	; 0x11d8e <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11d76:	ed b7       	in	r30, 0x3d	; 61
   11d78:	fe b7       	in	r31, 0x3e	; 62
   11d7a:	d5 83       	std	Z+5, r29	; 0x05
   11d7c:	c4 83       	std	Z+4, r28	; 0x04
   11d7e:	8c ea       	ldi	r24, 0xAC	; 172
   11d80:	92 e1       	ldi	r25, 0x12	; 18
   11d82:	a0 e0       	ldi	r26, 0x00	; 0
   11d84:	81 83       	std	Z+1, r24	; 0x01
   11d86:	92 83       	std	Z+2, r25	; 0x02
   11d88:	a3 83       	std	Z+3, r26	; 0x03
   11d8a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11d8e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   11d92:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   11d96:	81 81       	ldd	r24, Z+1	; 0x01
   11d98:	90 e0       	ldi	r25, 0x00	; 0
   11d9a:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11d9e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   11da2:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   11da6:	64 81       	ldd	r22, Z+4	; 0x04
   11da8:	75 81       	ldd	r23, Z+5	; 0x05
   11daa:	81 2f       	mov	r24, r17
   11dac:	ec dd       	rcall	.-1064   	; 0x11986 <Send_Identify>
   11dae:	1d c0       	rjmp	.+58     	; 0x11dea <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11db0:	c9 01       	movw	r24, r18
   11db2:	84 72       	andi	r24, 0x24	; 36
   11db4:	99 27       	eor	r25, r25
   11db6:	00 97       	sbiw	r24, 0x00	; 0
   11db8:	c1 f0       	breq	.+48     	; 0x11dea <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11dba:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11dbe:	90 e0       	ldi	r25, 0x00	; 0
   11dc0:	ed b7       	in	r30, 0x3d	; 61
   11dc2:	fe b7       	in	r31, 0x3e	; 62
   11dc4:	91 87       	std	Z+9, r25	; 0x09
   11dc6:	80 87       	std	Z+8, r24	; 0x08
   11dc8:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11dcc:	90 e0       	ldi	r25, 0x00	; 0
   11dce:	97 83       	std	Z+7, r25	; 0x07
   11dd0:	86 83       	std	Z+6, r24	; 0x06
   11dd2:	d5 83       	std	Z+5, r29	; 0x05
   11dd4:	c4 83       	std	Z+4, r28	; 0x04
   11dd6:	86 e8       	ldi	r24, 0x86	; 134
   11dd8:	92 e1       	ldi	r25, 0x12	; 18
   11dda:	a0 e0       	ldi	r26, 0x00	; 0
   11ddc:	81 83       	std	Z+1, r24	; 0x01
   11dde:	92 83       	std	Z+2, r25	; 0x02
   11de0:	a3 83       	std	Z+3, r26	; 0x03
   11de2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11de6:	80 e0       	ldi	r24, 0x00	; 0
   11de8:	90 e0       	ldi	r25, 0x00	; 0
}
   11dea:	cd b7       	in	r28, 0x3d	; 61
   11dec:	de b7       	in	r29, 0x3e	; 62
   11dee:	29 96       	adiw	r28, 0x09	; 9
   11df0:	e3 e0       	ldi	r30, 0x03	; 3
   11df2:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1e>

00011df6 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11df6:	00 d0       	rcall	.+0      	; 0x11df8 <listen_cleanup+0x2>
   11df8:	1f 92       	push	r1
    if(listening_last)
   11dfa:	60 91 f2 1e 	lds	r22, 0x1EF2	; 0x801ef2 <listening_last>
   11dfe:	66 23       	and	r22, r22
   11e00:	e1 f0       	breq	.+56     	; 0x11e3a <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11e02:	70 e0       	ldi	r23, 0x00	; 0
   11e04:	40 e2       	ldi	r20, 0x20	; 32
   11e06:	50 e0       	ldi	r21, 0x00	; 0
   11e08:	84 e0       	ldi	r24, 0x04	; 4
   11e0a:	90 e0       	ldi	r25, 0x00	; 0
   11e0c:	9c d6       	rcall	.+3384   	; 0x12b46 <find_device>
        if(index == -1)
   11e0e:	01 96       	adiw	r24, 0x01	; 1
   11e10:	a1 f0       	breq	.+40     	; 0x11e3a <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e16:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e1a:	84 72       	andi	r24, 0x24	; 36
   11e1c:	99 27       	eor	r25, r25
   11e1e:	89 2b       	or	r24, r25
   11e20:	51 f0       	breq	.+20     	; 0x11e36 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11e22:	85 e7       	ldi	r24, 0x75	; 117
   11e24:	92 e1       	ldi	r25, 0x12	; 18
   11e26:	a0 e0       	ldi	r26, 0x00	; 0
   11e28:	ed b7       	in	r30, 0x3d	; 61
   11e2a:	fe b7       	in	r31, 0x3e	; 62
   11e2c:	81 83       	std	Z+1, r24	; 0x01
   11e2e:	92 83       	std	Z+2, r25	; 0x02
   11e30:	a3 83       	std	Z+3, r26	; 0x03
   11e32:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printer_close();
   11e36:	0e 94 14 bb 	call	0x17628	; 0x17628 <printer_close>
    }
}
   11e3a:	0f 90       	pop	r0
   11e3c:	0f 90       	pop	r0
   11e3e:	0f 90       	pop	r0
   11e40:	08 95       	ret

00011e42 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11e42:	cf 93       	push	r28
   11e44:	df 93       	push	r29
   11e46:	00 d0       	rcall	.+0      	; 0x11e48 <GPIB_LISTEN+0x6>
   11e48:	00 d0       	rcall	.+0      	; 0x11e4a <GPIB_LISTEN+0x8>
   11e4a:	1f 92       	push	r1
   11e4c:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11e4e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11e52:	80 93 f2 1e 	sts	0x1EF2, r24	; 0x801ef2 <listening_last>
    listening = ch;
   11e56:	c0 93 f8 1e 	sts	0x1EF8, r28	; 0x801ef8 <listening>

    listen_cleanup();
   11e5a:	cd df       	rcall	.-102    	; 0x11df6 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11e5c:	cf 33       	cpi	r28, 0x3F	; 63
   11e5e:	19 f5       	brne	.+70     	; 0x11ea6 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11e60:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e68:	82 ff       	sbrs	r24, 2
   11e6a:	74 c0       	rjmp	.+232    	; 0x11f54 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11e6c:	8e e6       	ldi	r24, 0x6E	; 110
   11e6e:	93 e1       	ldi	r25, 0x13	; 19
   11e70:	a0 e0       	ldi	r26, 0x00	; 0
   11e72:	ed b7       	in	r30, 0x3d	; 61
   11e74:	fe b7       	in	r31, 0x3e	; 62
   11e76:	81 83       	std	Z+1, r24	; 0x01
   11e78:	92 83       	std	Z+2, r25	; 0x02
   11e7a:	a3 83       	std	Z+3, r26	; 0x03
   11e7c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11e80:	80 91 f0 1c 	lds	r24, 0x1CF0	; 0x801cf0 <lastcmd>
   11e84:	90 91 f1 1c 	lds	r25, 0x1CF1	; 0x801cf1 <lastcmd+0x1>
   11e88:	8f 35       	cpi	r24, 0x5F	; 95
   11e8a:	91 05       	cpc	r25, r1
   11e8c:	09 f0       	breq	.+2      	; 0x11e90 <GPIB_LISTEN+0x4e>
   11e8e:	62 c0       	rjmp	.+196    	; 0x11f54 <GPIB_LISTEN+0x112>
                printf("\n");
   11e90:	8c e6       	ldi	r24, 0x6C	; 108
   11e92:	93 e1       	ldi	r25, 0x13	; 19
   11e94:	a0 e0       	ldi	r26, 0x00	; 0
   11e96:	ed b7       	in	r30, 0x3d	; 61
   11e98:	fe b7       	in	r31, 0x3e	; 62
   11e9a:	81 83       	std	Z+1, r24	; 0x01
   11e9c:	92 83       	std	Z+2, r25	; 0x02
   11e9e:	a3 83       	std	Z+3, r26	; 0x03
   11ea0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   11ea4:	57 c0       	rjmp	.+174    	; 0x11f54 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   11ea6:	d0 e0       	ldi	r29, 0x00	; 0
   11ea8:	ce 01       	movw	r24, r28
   11eaa:	9c db       	rcall	.-2248   	; 0x115e4 <AMIGO_is_MLA>
   11eac:	89 2b       	or	r24, r25
   11eae:	81 f0       	breq	.+32     	; 0x11ed0 <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11eb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11eb4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eb8:	84 72       	andi	r24, 0x24	; 36
   11eba:	99 27       	eor	r25, r25
   11ebc:	89 2b       	or	r24, r25
   11ebe:	09 f4       	brne	.+2      	; 0x11ec2 <GPIB_LISTEN+0x80>
   11ec0:	49 c0       	rjmp	.+146    	; 0x11f54 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   11ec2:	ed b7       	in	r30, 0x3d	; 61
   11ec4:	fe b7       	in	r31, 0x3e	; 62
   11ec6:	d5 83       	std	Z+5, r29	; 0x05
   11ec8:	c4 83       	std	Z+4, r28	; 0x04
   11eca:	8a e5       	ldi	r24, 0x5A	; 90
   11ecc:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   11ece:	3c c0       	rjmp	.+120    	; 0x11f48 <GPIB_LISTEN+0x106>
   11ed0:	ce 01       	movw	r24, r28
   11ed2:	55 db       	rcall	.-2390   	; 0x1157e <SS80_is_MLA>
   11ed4:	89 2b       	or	r24, r25
   11ed6:	79 f0       	breq	.+30     	; 0x11ef6 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ed8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11edc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ee0:	84 72       	andi	r24, 0x24	; 36
   11ee2:	99 27       	eor	r25, r25
   11ee4:	89 2b       	or	r24, r25
   11ee6:	b1 f1       	breq	.+108    	; 0x11f54 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   11ee8:	ed b7       	in	r30, 0x3d	; 61
   11eea:	fe b7       	in	r31, 0x3e	; 62
   11eec:	d5 83       	std	Z+5, r29	; 0x05
   11eee:	c4 83       	std	Z+4, r28	; 0x04
   11ef0:	89 e4       	ldi	r24, 0x49	; 73
   11ef2:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   11ef4:	29 c0       	rjmp	.+82     	; 0x11f48 <GPIB_LISTEN+0x106>
   11ef6:	ce 01       	movw	r24, r28
   11ef8:	a8 db       	rcall	.-2224   	; 0x1164a <PRINTER_is_MLA>
   11efa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11efe:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f02:	89 2b       	or	r24, r25
   11f04:	c9 f0       	breq	.+50     	; 0x11f38 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f06:	24 72       	andi	r18, 0x24	; 36
   11f08:	33 27       	eor	r19, r19
   11f0a:	23 2b       	or	r18, r19
   11f0c:	61 f0       	breq	.+24     	; 0x11f26 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   11f0e:	ed b7       	in	r30, 0x3d	; 61
   11f10:	fe b7       	in	r31, 0x3e	; 62
   11f12:	d5 83       	std	Z+5, r29	; 0x05
   11f14:	c4 83       	std	Z+4, r28	; 0x04
   11f16:	85 e3       	ldi	r24, 0x35	; 53
   11f18:	93 e1       	ldi	r25, 0x13	; 19
   11f1a:	a0 e0       	ldi	r26, 0x00	; 0
   11f1c:	81 83       	std	Z+1, r24	; 0x01
   11f1e:	92 83       	std	Z+2, r25	; 0x02
   11f20:	a3 83       	std	Z+3, r26	; 0x03
   11f22:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
        if(talking != UNT)
   11f26:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   11f2a:	8f 35       	cpi	r24, 0x5F	; 95
   11f2c:	99 f0       	breq	.+38     	; 0x11f54 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   11f2e:	80 e0       	ldi	r24, 0x00	; 0
   11f30:	90 e0       	ldi	r25, 0x00	; 0
   11f32:	0e 94 6c bb 	call	0x176d8	; 0x176d8 <printer_open>
   11f36:	0e c0       	rjmp	.+28     	; 0x11f54 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f38:	22 ff       	sbrs	r18, 2
   11f3a:	0c c0       	rjmp	.+24     	; 0x11f54 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   11f3c:	ed b7       	in	r30, 0x3d	; 61
   11f3e:	fe b7       	in	r31, 0x3e	; 62
   11f40:	d5 83       	std	Z+5, r29	; 0x05
   11f42:	c4 83       	std	Z+4, r28	; 0x04
   11f44:	89 e2       	ldi	r24, 0x29	; 41
   11f46:	93 e1       	ldi	r25, 0x13	; 19
   11f48:	a0 e0       	ldi	r26, 0x00	; 0
   11f4a:	81 83       	std	Z+1, r24	; 0x01
   11f4c:	92 83       	std	Z+2, r25	; 0x02
   11f4e:	a3 83       	std	Z+3, r26	; 0x03
   11f50:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   11f54:	80 e0       	ldi	r24, 0x00	; 0
   11f56:	90 e0       	ldi	r25, 0x00	; 0
   11f58:	cd b7       	in	r28, 0x3d	; 61
   11f5a:	de b7       	in	r29, 0x3e	; 62
   11f5c:	25 96       	adiw	r28, 0x05	; 5
   11f5e:	e2 e0       	ldi	r30, 0x02	; 2
   11f60:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00011f64 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   11f64:	cf 93       	push	r28
   11f66:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   11f68:	92 db       	rcall	.-2268   	; 0x1168e <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   11f6a:	10 92 69 19 	sts	0x1969, r1	; 0x801969 <gpib_log_fp+0x1>
   11f6e:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   11f72:	80 e0       	ldi	r24, 0x00	; 0
   11f74:	90 e0       	ldi	r25, 0x00	; 0
   11f76:	57 d8       	rcall	.-3922   	; 0x11026 <gpib_read_byte>
   11f78:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   11f7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f7e:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   11f80:	02 c0       	rjmp	.+4      	; 0x11f86 <gpib_task+0x22>
   11f82:	ce 01       	movw	r24, r28
   11f84:	56 d9       	rcall	.-3412   	; 0x11232 <gpib_decode>
#endif
        status = gpib_error_test(val);
   11f86:	ce 01       	movw	r24, r28
   11f88:	1d dc       	rcall	.-1990   	; 0x117c4 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   11f8a:	9c 01       	movw	r18, r24
   11f8c:	23 70       	andi	r18, 0x03	; 3
   11f8e:	33 27       	eor	r19, r19
   11f90:	23 2b       	or	r18, r19
   11f92:	09 f0       	breq	.+2      	; 0x11f96 <gpib_task+0x32>
   11f94:	43 c0       	rjmp	.+134    	; 0x1201c <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   11f96:	89 2b       	or	r24, r25
   11f98:	61 f7       	brne	.-40     	; 0x11f72 <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   11f9a:	d2 ff       	sbrs	r29, 2
   11f9c:	26 c0       	rjmp	.+76     	; 0x11fea <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   11f9e:	8c 2f       	mov	r24, r28
   11fa0:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   11fa2:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   11fa4:	10 f4       	brcc	.+4      	; 0x11faa <gpib_task+0x46>
   11fa6:	52 dd       	rcall	.-1372   	; 0x11a4c <GPIB>
                continue;
   11fa8:	e4 cf       	rjmp	.-56     	; 0x11f72 <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   11faa:	90 ee       	ldi	r25, 0xE0	; 224
   11fac:	98 0f       	add	r25, r24
   11fae:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   11fb0:	10 f4       	brcc	.+4      	; 0x11fb6 <gpib_task+0x52>
   11fb2:	47 df       	rcall	.-370    	; 0x11e42 <GPIB_LISTEN>
                continue;
   11fb4:	de cf       	rjmp	.-68     	; 0x11f72 <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   11fb6:	90 ec       	ldi	r25, 0xC0	; 192
   11fb8:	98 0f       	add	r25, r24
   11fba:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   11fbc:	10 f4       	brcc	.+4      	; 0x11fc2 <gpib_task+0x5e>
   11fbe:	08 de       	rcall	.-1008   	; 0x11bd0 <GPIB_TALK>
                continue;
   11fc0:	d8 cf       	rjmp	.-80     	; 0x11f72 <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   11fc2:	90 91 f8 1e 	lds	r25, 0x1EF8	; 0x801ef8 <listening>
   11fc6:	99 23       	and	r25, r25
   11fc8:	59 f0       	breq	.+22     	; 0x11fe0 <gpib_task+0x7c>
   11fca:	20 91 f0 1c 	lds	r18, 0x1CF0	; 0x801cf0 <lastcmd>
   11fce:	30 91 f1 1c 	lds	r19, 0x1CF1	; 0x801cf1 <lastcmd+0x1>
   11fd2:	2f 35       	cpi	r18, 0x5F	; 95
   11fd4:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   11fd6:	21 f4       	brne	.+8      	; 0x11fe0 <gpib_task+0x7c>
   11fd8:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   11fdc:	91 de       	rcall	.-734    	; 0x11d00 <GPIB_SECONDARY_ADDRESS>
                continue;
   11fde:	c9 cf       	rjmp	.-110    	; 0x11f72 <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   11fe0:	80 93 f7 1e 	sts	0x1EF7, r24	; 0x801ef7 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   11fe4:	60 e0       	ldi	r22, 0x00	; 0
   11fe6:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   11fe8:	12 c0       	rjmp	.+36     	; 0x1200e <gpib_task+0xaa>
   11fea:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   11fee:	90 e0       	ldi	r25, 0x00	; 0
   11ff0:	2c db       	rcall	.-2472   	; 0x1164a <PRINTER_is_MLA>
   11ff2:	89 2b       	or	r24, r25
   11ff4:	29 f0       	breq	.+10     	; 0x12000 <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   11ff6:	ce 01       	movw	r24, r28
   11ff8:	99 27       	eor	r25, r25
   11ffa:	0e 94 0f bc 	call	0x1781e	; 0x1781e <printer_buffer>
                continue;
   11ffe:	b9 cf       	rjmp	.-142    	; 0x11f72 <gpib_task+0xe>
            }

            if(!secondary)
   12000:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <secondary>
   12004:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12006:	09 f4       	brne	.+2      	; 0x1200a <gpib_task+0xa6>
   12008:	b4 cf       	rjmp	.-152    	; 0x11f72 <gpib_task+0xe>
   1200a:	61 e0       	ldi	r22, 0x01	; 1
   1200c:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   1200e:	67 dc       	rcall	.-1842   	; 0x118de <GPIB_COMMANDS>
   12010:	d9 db       	rcall	.-2126   	; 0x117c4 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   12012:	83 70       	andi	r24, 0x03	; 3
   12014:	99 27       	eor	r25, r25
   12016:	89 2b       	or	r24, r25
   12018:	09 f4       	brne	.+2      	; 0x1201c <gpib_task+0xb8>
   1201a:	ab cf       	rjmp	.-170    	; 0x11f72 <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   1201c:	df 91       	pop	r29
   1201e:	cf 91       	pop	r28
   12020:	08 95       	ret

00012022 <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   12022:	08 95       	ret

00012024 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12024:	cf 93       	push	r28
   12026:	df 93       	push	r29
   12028:	00 d0       	rcall	.+0      	; 0x1202a <gpib_help+0x6>
   1202a:	1f 92       	push	r1
   1202c:	ec 01       	movw	r28, r24
    printf("gpib  help\n");
   1202e:	8f ef       	ldi	r24, 0xFF	; 255
   12030:	96 e1       	ldi	r25, 0x16	; 22
   12032:	a0 e0       	ldi	r26, 0x00	; 0
   12034:	ed b7       	in	r30, 0x3d	; 61
   12036:	fe b7       	in	r31, 0x3e	; 62
   12038:	81 83       	std	Z+1, r24	; 0x01
   1203a:	92 83       	std	Z+2, r25	; 0x02
   1203c:	a3 83       	std	Z+3, r26	; 0x03
   1203e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    if(full)
   12042:	cd 2b       	or	r28, r29
   12044:	51 f0       	breq	.+20     	; 0x1205a <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12046:	86 e3       	ldi	r24, 0x36	; 54
   12048:	95 e1       	ldi	r25, 0x15	; 21
   1204a:	a0 e0       	ldi	r26, 0x00	; 0
   1204c:	ed b7       	in	r30, 0x3d	; 61
   1204e:	fe b7       	in	r31, 0x3e	; 62
   12050:	81 83       	std	Z+1, r24	; 0x01
   12052:	92 83       	std	Z+2, r25	; 0x02
   12054:	a3 83       	std	Z+3, r26	; 0x03
   12056:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   1205a:	cd b7       	in	r28, 0x3d	; 61
   1205c:	de b7       	in	r29, 0x3e	; 62
   1205e:	23 96       	adiw	r28, 0x03	; 3
   12060:	e2 e0       	ldi	r30, 0x02	; 2
   12062:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00012066 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12066:	a5 e0       	ldi	r26, 0x05	; 5
   12068:	b0 e0       	ldi	r27, 0x00	; 0
   1206a:	e9 e3       	ldi	r30, 0x39	; 57
   1206c:	f0 e9       	ldi	r31, 0x90	; 144
   1206e:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12072:	fb 01       	movw	r30, r22
   12074:	e0 80       	ld	r14, Z
   12076:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12078:	e1 14       	cp	r14, r1
   1207a:	f1 04       	cpc	r15, r1
   1207c:	19 f4       	brne	.+6      	; 0x12084 <gpib_tests+0x1e>
        return(0);
   1207e:	80 e0       	ldi	r24, 0x00	; 0
   12080:	90 e0       	ldi	r25, 0x00	; 0
   12082:	de c0       	rjmp	.+444    	; 0x12240 <gpib_tests+0x1da>
   12084:	6b 01       	movw	r12, r22
   12086:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12088:	63 eb       	ldi	r22, 0xB3	; 179
   1208a:	7d e0       	ldi	r23, 0x0D	; 13
   1208c:	c7 01       	movw	r24, r14
   1208e:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   12092:	89 2b       	or	r24, r25
   12094:	a1 f0       	breq	.+40     	; 0x120be <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12096:	f6 01       	movw	r30, r12
   12098:	e2 80       	ldd	r14, Z+2	; 0x02
   1209a:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1209c:	e1 14       	cp	r14, r1
   1209e:	f1 04       	cpc	r15, r1
   120a0:	21 f4       	brne	.+8      	; 0x120aa <gpib_tests+0x44>
        {
            gpib_help(1);
   120a2:	81 e0       	ldi	r24, 0x01	; 1
   120a4:	90 e0       	ldi	r25, 0x00	; 0
   120a6:	be df       	rcall	.-132    	; 0x12024 <gpib_help>
   120a8:	c9 c0       	rjmp	.+402    	; 0x1223c <gpib_tests+0x1d6>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   120aa:	6d e7       	ldi	r22, 0x7D	; 125
   120ac:	76 e1       	ldi	r23, 0x16	; 22
   120ae:	c7 01       	movw	r24, r14
   120b0:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   120b4:	89 2b       	or	r24, r25
   120b6:	a9 f7       	brne	.-22     	; 0x120a2 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   120b8:	c2 e0       	ldi	r28, 0x02	; 2
   120ba:	d0 e0       	ldi	r29, 0x00	; 0
   120bc:	02 c0       	rjmp	.+4      	; 0x120c2 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   120be:	c1 e0       	ldi	r28, 0x01	; 1
   120c0:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   120c2:	68 eb       	ldi	r22, 0xB8	; 184
   120c4:	7d e0       	ldi	r23, 0x0D	; 13
   120c6:	c7 01       	movw	r24, r14
   120c8:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   120cc:	89 2b       	or	r24, r25
   120ce:	29 f1       	breq	.+74     	; 0x1211a <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   120d0:	fe 01       	movw	r30, r28
   120d2:	ee 0f       	add	r30, r30
   120d4:	ff 1f       	adc	r31, r31
   120d6:	ec 0d       	add	r30, r12
   120d8:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   120da:	01 90       	ld	r0, Z+
   120dc:	f0 81       	ld	r31, Z
   120de:	e0 2d       	mov	r30, r0
   120e0:	80 81       	ld	r24, Z
   120e2:	8d 33       	cpi	r24, 0x3D	; 61
   120e4:	09 f4       	brne	.+2      	; 0x120e8 <gpib_tests+0x82>
            ++ind;
   120e6:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   120e8:	cc 0f       	add	r28, r28
   120ea:	dd 1f       	adc	r29, r29
   120ec:	cc 0d       	add	r28, r12
   120ee:	dd 1d       	adc	r29, r13
   120f0:	88 81       	ld	r24, Y
   120f2:	99 81       	ldd	r25, Y+1	; 0x01
   120f4:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   120f8:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   120fc:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12100:	ed b7       	in	r30, 0x3d	; 61
   12102:	fe b7       	in	r31, 0x3e	; 62
   12104:	75 83       	std	Z+5, r23	; 0x05
   12106:	64 83       	std	Z+4, r22	; 0x04
   12108:	89 e2       	ldi	r24, 0x29	; 41
   1210a:	95 e1       	ldi	r25, 0x15	; 21
   1210c:	a0 e0       	ldi	r26, 0x00	; 0
   1210e:	81 83       	std	Z+1, r24	; 0x01
   12110:	92 83       	std	Z+2, r25	; 0x02
   12112:	a3 83       	std	Z+3, r26	; 0x03
   12114:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12118:	91 c0       	rjmp	.+290    	; 0x1223c <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   1211a:	6e eb       	ldi	r22, 0xBE	; 190
   1211c:	7d e0       	ldi	r23, 0x0D	; 13
   1211e:	c7 01       	movw	r24, r14
   12120:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   12124:	89 2b       	or	r24, r25
   12126:	29 f0       	breq	.+10     	; 0x12132 <gpib_tests+0xcc>
    {
		mount(argc, argv);
   12128:	b6 01       	movw	r22, r12
   1212a:	c5 01       	movw	r24, r10
   1212c:	0e 94 a5 9f 	call	0x13f4a	; 0x13f4a <mount>
   12130:	85 c0       	rjmp	.+266    	; 0x1223c <gpib_tests+0x1d6>
		return(1);
    }

    if (MATCHI(ptr,"addresses") )
   12132:	64 ec       	ldi	r22, 0xC4	; 196
   12134:	7d e0       	ldi	r23, 0x0D	; 13
   12136:	c7 01       	movw	r24, r14
   12138:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1213c:	89 2b       	or	r24, r25
   1213e:	c9 f0       	breq	.+50     	; 0x12172 <gpib_tests+0x10c>
    {
        ptr = argv[ind];
   12140:	cc 0f       	add	r28, r28
   12142:	dd 1f       	adc	r29, r29
   12144:	cc 0d       	add	r28, r12
   12146:	dd 1d       	adc	r29, r13
   12148:	88 81       	ld	r24, Y
   1214a:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1214c:	00 97       	sbiw	r24, 0x00	; 0
   1214e:	69 f0       	breq	.+26     	; 0x1216a <gpib_tests+0x104>
   12150:	fc 01       	movw	r30, r24
   12152:	20 81       	ld	r18, Z
   12154:	22 23       	and	r18, r18
   12156:	49 f0       	breq	.+18     	; 0x1216a <gpib_tests+0x104>
   12158:	6e ec       	ldi	r22, 0xCE	; 206
   1215a:	7d e0       	ldi	r23, 0x0D	; 13
   1215c:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   12160:	89 2b       	or	r24, r25
   12162:	19 f0       	breq	.+6      	; 0x1216a <gpib_tests+0x104>
            display_Addresses(1);
   12164:	81 e0       	ldi	r24, 0x01	; 1
   12166:	90 e0       	ldi	r25, 0x00	; 0
   12168:	02 c0       	rjmp	.+4      	; 0x1216e <gpib_tests+0x108>
        else
            display_Addresses(0);
   1216a:	80 e0       	ldi	r24, 0x00	; 0
   1216c:	90 e0       	ldi	r25, 0x00	; 0
   1216e:	4a d1       	rcall	.+660    	; 0x12404 <display_Addresses>
   12170:	65 c0       	rjmp	.+202    	; 0x1223c <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   12172:	61 ed       	ldi	r22, 0xD1	; 209
   12174:	7d e0       	ldi	r23, 0x0D	; 13
   12176:	c7 01       	movw	r24, r14
   12178:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1217c:	89 2b       	or	r24, r25
   1217e:	c9 f0       	breq	.+50     	; 0x121b2 <gpib_tests+0x14c>
    {
        ptr = argv[ind];
   12180:	cc 0f       	add	r28, r28
   12182:	dd 1f       	adc	r29, r29
   12184:	cc 0d       	add	r28, r12
   12186:	dd 1d       	adc	r29, r13
   12188:	88 81       	ld	r24, Y
   1218a:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1218c:	00 97       	sbiw	r24, 0x00	; 0
   1218e:	69 f0       	breq	.+26     	; 0x121aa <gpib_tests+0x144>
   12190:	fc 01       	movw	r30, r24
   12192:	20 81       	ld	r18, Z
   12194:	22 23       	and	r18, r18
   12196:	49 f0       	breq	.+18     	; 0x121aa <gpib_tests+0x144>
   12198:	6e ec       	ldi	r22, 0xCE	; 206
   1219a:	7d e0       	ldi	r23, 0x0D	; 13
   1219c:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   121a0:	89 2b       	or	r24, r25
   121a2:	19 f0       	breq	.+6      	; 0x121aa <gpib_tests+0x144>
            display_Config(1);
   121a4:	81 e0       	ldi	r24, 0x01	; 1
   121a6:	90 e0       	ldi	r25, 0x00	; 0
   121a8:	02 c0       	rjmp	.+4      	; 0x121ae <gpib_tests+0x148>
        else
            display_Config(0);
   121aa:	80 e0       	ldi	r24, 0x00	; 0
   121ac:	90 e0       	ldi	r25, 0x00	; 0
   121ae:	05 d2       	rcall	.+1034   	; 0x125ba <display_Config>
   121b0:	45 c0       	rjmp	.+138    	; 0x1223c <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   121b2:	68 ed       	ldi	r22, 0xD8	; 216
   121b4:	7d e0       	ldi	r23, 0x0D	; 13
   121b6:	c7 01       	movw	r24, r14
   121b8:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   121bc:	89 2b       	or	r24, r25
   121be:	19 f0       	breq	.+6      	; 0x121c6 <gpib_tests+0x160>
    {
        gpib_timer_elapsed_begin();
   121c0:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   121c4:	3b c0       	rjmp	.+118    	; 0x1223c <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   121c6:	66 ee       	ldi	r22, 0xE6	; 230
   121c8:	7d e0       	ldi	r23, 0x0D	; 13
   121ca:	c7 01       	movw	r24, r14
   121cc:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   121d0:	89 2b       	or	r24, r25
   121d2:	29 f0       	breq	.+10     	; 0x121de <gpib_tests+0x178>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   121d4:	8e ee       	ldi	r24, 0xEE	; 238
   121d6:	9d e0       	ldi	r25, 0x0D	; 13
   121d8:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   121dc:	2f c0       	rjmp	.+94     	; 0x1223c <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   121de:	6c ef       	ldi	r22, 0xFC	; 252
   121e0:	7d e0       	ldi	r23, 0x0D	; 13
   121e2:	c7 01       	movw	r24, r14
   121e4:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   121e8:	89 2b       	or	r24, r25
    {
        gpib_task();
   121ea:	11 f0       	breq	.+4      	; 0x121f0 <gpib_tests+0x18a>
   121ec:	bb de       	rcall	.-650    	; 0x11f64 <gpib_task>
   121ee:	26 c0       	rjmp	.+76     	; 0x1223c <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   121f0:	8e 01       	movw	r16, r28
   121f2:	0f 5f       	subi	r16, 0xFF	; 255
   121f4:	1f 4f       	sbci	r17, 0xFF	; 255
   121f6:	95 01       	movw	r18, r10
   121f8:	a8 01       	movw	r20, r16
   121fa:	61 e0       	ldi	r22, 0x01	; 1
   121fc:	7e e0       	ldi	r23, 0x0E	; 14
   121fe:	c7 01       	movw	r24, r14
   12200:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   12204:	89 2b       	or	r24, r25
   12206:	09 f4       	brne	.+2      	; 0x1220a <gpib_tests+0x1a4>
   12208:	3a cf       	rjmp	.-396    	; 0x1207e <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1220a:	00 0f       	add	r16, r16
   1220c:	11 1f       	adc	r17, r17
   1220e:	e6 01       	movw	r28, r12
   12210:	c0 0f       	add	r28, r16
   12212:	d1 1f       	adc	r29, r17
   12214:	88 81       	ld	r24, Y
   12216:	99 81       	ldd	r25, Y+1	; 0x01
   12218:	00 97       	sbiw	r24, 0x00	; 0
   1221a:	51 f0       	breq	.+20     	; 0x12230 <gpib_tests+0x1ca>
   1221c:	67 e0       	ldi	r22, 0x07	; 7
   1221e:	7e e0       	ldi	r23, 0x0E	; 14
   12220:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12224:	61 e0       	ldi	r22, 0x01	; 1
   12226:	70 e0       	ldi	r23, 0x00	; 0
   12228:	89 2b       	or	r24, r25
   1222a:	21 f4       	brne	.+8      	; 0x12234 <gpib_tests+0x1ce>
   1222c:	60 e0       	ldi	r22, 0x00	; 0
   1222e:	02 c0       	rjmp	.+4      	; 0x12234 <gpib_tests+0x1ce>
   12230:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12232:	70 e0       	ldi	r23, 0x00	; 0
   12234:	22 97       	sbiw	r28, 0x02	; 2
   12236:	88 81       	ld	r24, Y
   12238:	99 81       	ldd	r25, Y+1	; 0x01
   1223a:	32 da       	rcall	.-2972   	; 0x116a0 <gpib_trace_task>
        return(1);
   1223c:	81 e0       	ldi	r24, 0x01	; 1
   1223e:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12240:	cd b7       	in	r28, 0x3d	; 61
   12242:	de b7       	in	r29, 0x3e	; 62
   12244:	25 96       	adiw	r28, 0x05	; 5
   12246:	ea e0       	ldi	r30, 0x0A	; 10
   12248:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0001224c <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   1224c:	ef 92       	push	r14
   1224e:	ff 92       	push	r15
   12250:	0f 93       	push	r16
   12252:	1f 93       	push	r17
   12254:	cf 93       	push	r28
   12256:	df 93       	push	r29
   12258:	7c 01       	movw	r14, r24
   1225a:	c4 ec       	ldi	r28, 0xC4	; 196
   1225c:	d1 e0       	ldi	r29, 0x01	; 1
   1225e:	00 e0       	ldi	r16, 0x00	; 0
   12260:	10 e0       	ldi	r17, 0x00	; 0
   12262:	8a 81       	ldd	r24, Y+2	; 0x02
   12264:	9b 81       	ldd	r25, Y+3	; 0x03
   12266:	8f 3f       	cpi	r24, 0xFF	; 255
   12268:	2f ef       	ldi	r18, 0xFF	; 255
   1226a:	92 07       	cpc	r25, r18
   1226c:	61 f0       	breq	.+24     	; 0x12286 <tok_index+0x3a>
   1226e:	68 81       	ld	r22, Y
   12270:	79 81       	ldd	r23, Y+1	; 0x01
   12272:	c7 01       	movw	r24, r14
   12274:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   12278:	24 96       	adiw	r28, 0x04	; 4
   1227a:	89 2b       	or	r24, r25
   1227c:	19 f4       	brne	.+6      	; 0x12284 <tok_index+0x38>
   1227e:	0f 5f       	subi	r16, 0xFF	; 255
   12280:	1f 4f       	sbci	r17, 0xFF	; 255
   12282:	ef cf       	rjmp	.-34     	; 0x12262 <tok_index+0x16>
   12284:	c8 01       	movw	r24, r16
   12286:	cd b7       	in	r28, 0x3d	; 61
   12288:	de b7       	in	r29, 0x3e	; 62
   1228a:	e6 e0       	ldi	r30, 0x06	; 6
   1228c:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00012290 <tok_name>:
   12290:	e4 ec       	ldi	r30, 0xC4	; 196
   12292:	f1 e0       	ldi	r31, 0x01	; 1
   12294:	20 e0       	ldi	r18, 0x00	; 0
   12296:	30 e0       	ldi	r19, 0x00	; 0
   12298:	90 e0       	ldi	r25, 0x00	; 0
   1229a:	42 81       	ldd	r20, Z+2	; 0x02
   1229c:	53 81       	ldd	r21, Z+3	; 0x03
   1229e:	4f 3f       	cpi	r20, 0xFF	; 255
   122a0:	6f ef       	ldi	r22, 0xFF	; 255
   122a2:	56 07       	cpc	r21, r22
   122a4:	89 f0       	breq	.+34     	; 0x122c8 <tok_name+0x38>
   122a6:	34 96       	adiw	r30, 0x04	; 4
   122a8:	48 17       	cp	r20, r24
   122aa:	59 07       	cpc	r21, r25
   122ac:	51 f4       	brne	.+20     	; 0x122c2 <tok_name+0x32>
   122ae:	22 0f       	add	r18, r18
   122b0:	33 1f       	adc	r19, r19
   122b2:	22 0f       	add	r18, r18
   122b4:	33 1f       	adc	r19, r19
   122b6:	f9 01       	movw	r30, r18
   122b8:	ec 53       	subi	r30, 0x3C	; 60
   122ba:	fe 4f       	sbci	r31, 0xFE	; 254
   122bc:	80 81       	ld	r24, Z
   122be:	91 81       	ldd	r25, Z+1	; 0x01
   122c0:	08 95       	ret
   122c2:	2f 5f       	subi	r18, 0xFF	; 255
   122c4:	3f 4f       	sbci	r19, 0xFF	; 255
   122c6:	e9 cf       	rjmp	.-46     	; 0x1229a <tok_name+0xa>
   122c8:	8d e2       	ldi	r24, 0x2D	; 45
   122ca:	9c e0       	ldi	r25, 0x0C	; 12
   122cc:	08 95       	ret

000122ce <print_tok_val>:
   122ce:	cf 92       	push	r12
   122d0:	df 92       	push	r13
   122d2:	ef 92       	push	r14
   122d4:	ff 92       	push	r15
   122d6:	0f 93       	push	r16
   122d8:	1f 93       	push	r17
   122da:	cf 93       	push	r28
   122dc:	ad b7       	in	r26, 0x3d	; 61
   122de:	be b7       	in	r27, 0x3e	; 62
   122e0:	1d 97       	sbiw	r26, 0x0d	; 13
   122e2:	0f b6       	in	r0, 0x3f	; 63
   122e4:	f8 94       	cli
   122e6:	be bf       	out	0x3e, r27	; 62
   122e8:	0f be       	out	0x3f, r0	; 63
   122ea:	ad bf       	out	0x3d, r26	; 61
   122ec:	c6 2f       	mov	r28, r22
   122ee:	69 01       	movw	r12, r18
   122f0:	7a 01       	movw	r14, r20
   122f2:	ce df       	rcall	.-100    	; 0x12290 <tok_name>
   122f4:	8c 01       	movw	r16, r24
   122f6:	cc 23       	and	r28, r28
   122f8:	31 f0       	breq	.+12     	; 0x12306 <print_tok_val+0x38>
   122fa:	80 e2       	ldi	r24, 0x20	; 32
   122fc:	90 e0       	ldi	r25, 0x00	; 0
   122fe:	0e 94 9f 74 	call	0xe93e	; 0xe93e <putchar>
   12302:	c1 50       	subi	r28, 0x01	; 1
   12304:	f8 cf       	rjmp	.-16     	; 0x122f6 <print_tok_val+0x28>
   12306:	ed b7       	in	r30, 0x3d	; 61
   12308:	fe b7       	in	r31, 0x3e	; 62
   1230a:	c2 86       	std	Z+10, r12	; 0x0a
   1230c:	d3 86       	std	Z+11, r13	; 0x0b
   1230e:	e4 86       	std	Z+12, r14	; 0x0c
   12310:	f5 86       	std	Z+13, r15	; 0x0d
   12312:	c6 82       	std	Z+6, r12	; 0x06
   12314:	d7 82       	std	Z+7, r13	; 0x07
   12316:	e0 86       	std	Z+8, r14	; 0x08
   12318:	f1 86       	std	Z+9, r15	; 0x09
   1231a:	15 83       	std	Z+5, r17	; 0x05
   1231c:	04 83       	std	Z+4, r16	; 0x04
   1231e:	8d ed       	ldi	r24, 0xDD	; 221
   12320:	9d e1       	ldi	r25, 0x1D	; 29
   12322:	a0 e0       	ldi	r26, 0x00	; 0
   12324:	81 83       	std	Z+1, r24	; 0x01
   12326:	92 83       	std	Z+2, r25	; 0x02
   12328:	a3 83       	std	Z+3, r26	; 0x03
   1232a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1232e:	ad b7       	in	r26, 0x3d	; 61
   12330:	be b7       	in	r27, 0x3e	; 62
   12332:	1d 96       	adiw	r26, 0x0d	; 13
   12334:	0f b6       	in	r0, 0x3f	; 63
   12336:	f8 94       	cli
   12338:	be bf       	out	0x3e, r27	; 62
   1233a:	0f be       	out	0x3f, r0	; 63
   1233c:	ad bf       	out	0x3d, r26	; 61
   1233e:	cf 91       	pop	r28
   12340:	1f 91       	pop	r17
   12342:	0f 91       	pop	r16
   12344:	ff 90       	pop	r15
   12346:	ef 90       	pop	r14
   12348:	df 90       	pop	r13
   1234a:	cf 90       	pop	r12
   1234c:	08 95       	ret

0001234e <print_tok_str>:
   1234e:	ef 92       	push	r14
   12350:	ff 92       	push	r15
   12352:	0f 93       	push	r16
   12354:	1f 93       	push	r17
   12356:	cf 93       	push	r28
   12358:	ad b7       	in	r26, 0x3d	; 61
   1235a:	be b7       	in	r27, 0x3e	; 62
   1235c:	17 97       	sbiw	r26, 0x07	; 7
   1235e:	0f b6       	in	r0, 0x3f	; 63
   12360:	f8 94       	cli
   12362:	be bf       	out	0x3e, r27	; 62
   12364:	0f be       	out	0x3f, r0	; 63
   12366:	ad bf       	out	0x3d, r26	; 61
   12368:	c6 2f       	mov	r28, r22
   1236a:	7a 01       	movw	r14, r20
   1236c:	91 df       	rcall	.-222    	; 0x12290 <tok_name>
   1236e:	8c 01       	movw	r16, r24
   12370:	cc 23       	and	r28, r28
   12372:	31 f0       	breq	.+12     	; 0x12380 <print_tok_str+0x32>
   12374:	80 e2       	ldi	r24, 0x20	; 32
   12376:	90 e0       	ldi	r25, 0x00	; 0
   12378:	0e 94 9f 74 	call	0xe93e	; 0xe93e <putchar>
   1237c:	c1 50       	subi	r28, 0x01	; 1
   1237e:	f8 cf       	rjmp	.-16     	; 0x12370 <print_tok_str+0x22>
   12380:	ed b7       	in	r30, 0x3d	; 61
   12382:	fe b7       	in	r31, 0x3e	; 62
   12384:	f7 82       	std	Z+7, r15	; 0x07
   12386:	e6 82       	std	Z+6, r14	; 0x06
   12388:	15 83       	std	Z+5, r17	; 0x05
   1238a:	04 83       	std	Z+4, r16	; 0x04
   1238c:	81 ed       	ldi	r24, 0xD1	; 209
   1238e:	9d e1       	ldi	r25, 0x1D	; 29
   12390:	a0 e0       	ldi	r26, 0x00	; 0
   12392:	81 83       	std	Z+1, r24	; 0x01
   12394:	92 83       	std	Z+2, r25	; 0x02
   12396:	a3 83       	std	Z+3, r26	; 0x03
   12398:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1239c:	ad b7       	in	r26, 0x3d	; 61
   1239e:	be b7       	in	r27, 0x3e	; 62
   123a0:	17 96       	adiw	r26, 0x07	; 7
   123a2:	0f b6       	in	r0, 0x3f	; 63
   123a4:	f8 94       	cli
   123a6:	be bf       	out	0x3e, r27	; 62
   123a8:	0f be       	out	0x3f, r0	; 63
   123aa:	ad bf       	out	0x3d, r26	; 61
   123ac:	cf 91       	pop	r28
   123ae:	1f 91       	pop	r17
   123b0:	0f 91       	pop	r16
   123b2:	ff 90       	pop	r15
   123b4:	ef 90       	pop	r14
   123b6:	08 95       	ret

000123b8 <print_tok>:
   123b8:	0f 93       	push	r16
   123ba:	1f 93       	push	r17
   123bc:	cf 93       	push	r28
   123be:	00 d0       	rcall	.+0      	; 0x123c0 <print_tok+0x8>
   123c0:	00 d0       	rcall	.+0      	; 0x123c2 <print_tok+0xa>
   123c2:	1f 92       	push	r1
   123c4:	c6 2f       	mov	r28, r22
   123c6:	64 df       	rcall	.-312    	; 0x12290 <tok_name>
   123c8:	8c 01       	movw	r16, r24
   123ca:	cc 23       	and	r28, r28
   123cc:	31 f0       	breq	.+12     	; 0x123da <print_tok+0x22>
   123ce:	80 e2       	ldi	r24, 0x20	; 32
   123d0:	90 e0       	ldi	r25, 0x00	; 0
   123d2:	0e 94 9f 74 	call	0xe93e	; 0xe93e <putchar>
   123d6:	c1 50       	subi	r28, 0x01	; 1
   123d8:	f8 cf       	rjmp	.-16     	; 0x123ca <print_tok+0x12>
   123da:	ed b7       	in	r30, 0x3d	; 61
   123dc:	fe b7       	in	r31, 0x3e	; 62
   123de:	15 83       	std	Z+5, r17	; 0x05
   123e0:	04 83       	std	Z+4, r16	; 0x04
   123e2:	8d ec       	ldi	r24, 0xCD	; 205
   123e4:	9d e1       	ldi	r25, 0x1D	; 29
   123e6:	a0 e0       	ldi	r26, 0x00	; 0
   123e8:	81 83       	std	Z+1, r24	; 0x01
   123ea:	92 83       	std	Z+2, r25	; 0x02
   123ec:	a3 83       	std	Z+3, r26	; 0x03
   123ee:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   123f2:	0f 90       	pop	r0
   123f4:	0f 90       	pop	r0
   123f6:	0f 90       	pop	r0
   123f8:	0f 90       	pop	r0
   123fa:	0f 90       	pop	r0
   123fc:	cf 91       	pop	r28
   123fe:	1f 91       	pop	r17
   12400:	0f 91       	pop	r16
   12402:	08 95       	ret

00012404 <display_Addresses>:
   12404:	2f 92       	push	r2
   12406:	3f 92       	push	r3
   12408:	4f 92       	push	r4
   1240a:	6f 92       	push	r6
   1240c:	7f 92       	push	r7
   1240e:	8f 92       	push	r8
   12410:	cf 92       	push	r12
   12412:	df 92       	push	r13
   12414:	ef 92       	push	r14
   12416:	cf 93       	push	r28
   12418:	df 93       	push	r29
   1241a:	cd b7       	in	r28, 0x3d	; 61
   1241c:	de b7       	in	r29, 0x3e	; 62
   1241e:	2a 97       	sbiw	r28, 0x0a	; 10
   12420:	0f b6       	in	r0, 0x3f	; 63
   12422:	f8 94       	cli
   12424:	de bf       	out	0x3e, r29	; 62
   12426:	0f be       	out	0x3f, r0	; 63
   12428:	cd bf       	out	0x3d, r28	; 61
   1242a:	87 e9       	ldi	r24, 0x97	; 151
   1242c:	9a e1       	ldi	r25, 0x1A	; 26
   1242e:	a0 e0       	ldi	r26, 0x00	; 0
   12430:	ed b7       	in	r30, 0x3d	; 61
   12432:	fe b7       	in	r31, 0x3e	; 62
   12434:	81 83       	std	Z+1, r24	; 0x01
   12436:	92 83       	std	Z+2, r25	; 0x02
   12438:	a3 83       	std	Z+3, r26	; 0x03
   1243a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1243e:	2c ef       	ldi	r18, 0xFC	; 252
   12440:	3e e1       	ldi	r19, 0x1E	; 30
   12442:	3a 87       	std	Y+10, r19	; 0x0a
   12444:	29 87       	std	Y+9, r18	; 0x09
   12446:	89 e7       	ldi	r24, 0x79	; 121
   12448:	9a e1       	ldi	r25, 0x1A	; 26
   1244a:	6c 01       	movw	r12, r24
   1244c:	e1 2c       	mov	r14, r1
   1244e:	8b e7       	ldi	r24, 0x7B	; 123
   12450:	9a e1       	ldi	r25, 0x1A	; 26
   12452:	3c 01       	movw	r6, r24
   12454:	81 2c       	mov	r8, r1
   12456:	84 e8       	ldi	r24, 0x84	; 132
   12458:	9a e1       	ldi	r25, 0x1A	; 26
   1245a:	1c 01       	movw	r2, r24
   1245c:	41 2c       	mov	r4, r1
   1245e:	8e e8       	ldi	r24, 0x8E	; 142
   12460:	9a e1       	ldi	r25, 0x1A	; 26
   12462:	9c 01       	movw	r18, r24
   12464:	40 e0       	ldi	r20, 0x00	; 0
   12466:	2e 83       	std	Y+6, r18	; 0x06
   12468:	3f 83       	std	Y+7, r19	; 0x07
   1246a:	48 87       	std	Y+8, r20	; 0x08
   1246c:	e9 85       	ldd	r30, Y+9	; 0x09
   1246e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12470:	80 81       	ld	r24, Z
   12472:	88 23       	and	r24, r24
   12474:	09 f4       	brne	.+2      	; 0x12478 <display_Addresses+0x74>
   12476:	7b c0       	rjmp	.+246    	; 0x1256e <display_Addresses+0x16a>
   12478:	83 30       	cpi	r24, 0x03	; 3
   1247a:	21 f0       	breq	.+8      	; 0x12484 <display_Addresses+0x80>
   1247c:	81 30       	cpi	r24, 0x01	; 1
   1247e:	09 f0       	breq	.+2      	; 0x12482 <display_Addresses+0x7e>
   12480:	5a c0       	rjmp	.+180    	; 0x12536 <display_Addresses+0x132>
   12482:	1f c0       	rjmp	.+62     	; 0x124c2 <display_Addresses+0xbe>
   12484:	e9 85       	ldd	r30, Y+9	; 0x09
   12486:	fa 85       	ldd	r31, Y+10	; 0x0a
   12488:	87 a1       	ldd	r24, Z+39	; 0x27
   1248a:	90 a5       	ldd	r25, Z+40	; 0x28
   1248c:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <SS80p+0x1>
   12490:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <SS80p>
   12494:	cf 01       	movw	r24, r30
   12496:	07 96       	adiw	r24, 0x07	; 7
   12498:	ed b7       	in	r30, 0x3d	; 61
   1249a:	fe b7       	in	r31, 0x3e	; 62
   1249c:	95 83       	std	Z+5, r25	; 0x05
   1249e:	84 83       	std	Z+4, r24	; 0x04
   124a0:	2e 81       	ldd	r18, Y+6	; 0x06
   124a2:	3f 81       	ldd	r19, Y+7	; 0x07
   124a4:	48 85       	ldd	r20, Y+8	; 0x08
   124a6:	21 83       	std	Z+1, r18	; 0x01
   124a8:	32 83       	std	Z+2, r19	; 0x02
   124aa:	43 83       	std	Z+3, r20	; 0x03
   124ac:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   124b0:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   124b4:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   124b8:	42 81       	ldd	r20, Z+2	; 0x02
   124ba:	53 81       	ldd	r21, Z+3	; 0x03
   124bc:	64 e0       	ldi	r22, 0x04	; 4
   124be:	82 e1       	ldi	r24, 0x12	; 18
   124c0:	46 df       	rcall	.-372    	; 0x1234e <print_tok_str>
   124c2:	e9 85       	ldd	r30, Y+9	; 0x09
   124c4:	fa 85       	ldd	r31, Y+10	; 0x0a
   124c6:	80 81       	ld	r24, Z
   124c8:	81 30       	cpi	r24, 0x01	; 1
   124ca:	d1 f4       	brne	.+52     	; 0x12500 <display_Addresses+0xfc>
   124cc:	87 a1       	ldd	r24, Z+39	; 0x27
   124ce:	90 a5       	ldd	r25, Z+40	; 0x28
   124d0:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <AMIGOp+0x1>
   124d4:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <AMIGOp>
   124d8:	cf 01       	movw	r24, r30
   124da:	07 96       	adiw	r24, 0x07	; 7
   124dc:	ed b7       	in	r30, 0x3d	; 61
   124de:	fe b7       	in	r31, 0x3e	; 62
   124e0:	95 83       	std	Z+5, r25	; 0x05
   124e2:	84 83       	std	Z+4, r24	; 0x04
   124e4:	21 82       	std	Z+1, r2	; 0x01
   124e6:	32 82       	std	Z+2, r3	; 0x02
   124e8:	43 82       	std	Z+3, r4	; 0x03
   124ea:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   124ee:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   124f2:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   124f6:	42 81       	ldd	r20, Z+2	; 0x02
   124f8:	53 81       	ldd	r21, Z+3	; 0x03
   124fa:	64 e0       	ldi	r22, 0x04	; 4
   124fc:	82 e1       	ldi	r24, 0x12	; 18
   124fe:	27 df       	rcall	.-434    	; 0x1234e <print_tok_str>
   12500:	e9 85       	ldd	r30, Y+9	; 0x09
   12502:	fa 85       	ldd	r31, Y+10	; 0x0a
   12504:	21 81       	ldd	r18, Z+1	; 0x01
   12506:	30 e0       	ldi	r19, 0x00	; 0
   12508:	40 e0       	ldi	r20, 0x00	; 0
   1250a:	50 e0       	ldi	r21, 0x00	; 0
   1250c:	64 e0       	ldi	r22, 0x04	; 4
   1250e:	81 e0       	ldi	r24, 0x01	; 1
   12510:	de de       	rcall	.-580    	; 0x122ce <print_tok_val>
   12512:	e9 85       	ldd	r30, Y+9	; 0x09
   12514:	fa 85       	ldd	r31, Y+10	; 0x0a
   12516:	22 81       	ldd	r18, Z+2	; 0x02
   12518:	30 e0       	ldi	r19, 0x00	; 0
   1251a:	40 e0       	ldi	r20, 0x00	; 0
   1251c:	50 e0       	ldi	r21, 0x00	; 0
   1251e:	64 e0       	ldi	r22, 0x04	; 4
   12520:	8f e1       	ldi	r24, 0x1F	; 31
   12522:	d5 de       	rcall	.-598    	; 0x122ce <print_tok_val>
   12524:	e9 85       	ldd	r30, Y+9	; 0x09
   12526:	fa 85       	ldd	r31, Y+10	; 0x0a
   12528:	23 81       	ldd	r18, Z+3	; 0x03
   1252a:	34 81       	ldd	r19, Z+4	; 0x04
   1252c:	45 81       	ldd	r20, Z+5	; 0x05
   1252e:	56 81       	ldd	r21, Z+6	; 0x06
   12530:	64 e0       	ldi	r22, 0x04	; 4
   12532:	83 e0       	ldi	r24, 0x03	; 3
   12534:	cc de       	rcall	.-616    	; 0x122ce <print_tok_val>
   12536:	e9 85       	ldd	r30, Y+9	; 0x09
   12538:	fa 85       	ldd	r31, Y+10	; 0x0a
   1253a:	80 81       	ld	r24, Z
   1253c:	84 30       	cpi	r24, 0x04	; 4
   1253e:	81 f4       	brne	.+32     	; 0x12560 <display_Addresses+0x15c>
   12540:	ed b7       	in	r30, 0x3d	; 61
   12542:	fe b7       	in	r31, 0x3e	; 62
   12544:	61 82       	std	Z+1, r6	; 0x01
   12546:	72 82       	std	Z+2, r7	; 0x02
   12548:	83 82       	std	Z+3, r8	; 0x03
   1254a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1254e:	e9 85       	ldd	r30, Y+9	; 0x09
   12550:	fa 85       	ldd	r31, Y+10	; 0x0a
   12552:	21 81       	ldd	r18, Z+1	; 0x01
   12554:	30 e0       	ldi	r19, 0x00	; 0
   12556:	40 e0       	ldi	r20, 0x00	; 0
   12558:	50 e0       	ldi	r21, 0x00	; 0
   1255a:	64 e0       	ldi	r22, 0x04	; 4
   1255c:	81 e0       	ldi	r24, 0x01	; 1
   1255e:	b7 de       	rcall	.-658    	; 0x122ce <print_tok_val>
   12560:	ed b7       	in	r30, 0x3d	; 61
   12562:	fe b7       	in	r31, 0x3e	; 62
   12564:	c1 82       	std	Z+1, r12	; 0x01
   12566:	d2 82       	std	Z+2, r13	; 0x02
   12568:	e3 82       	std	Z+3, r14	; 0x03
   1256a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1256e:	29 85       	ldd	r18, Y+9	; 0x09
   12570:	3a 85       	ldd	r19, Y+10	; 0x0a
   12572:	25 5d       	subi	r18, 0xD5	; 213
   12574:	3f 4f       	sbci	r19, 0xFF	; 255
   12576:	3a 87       	std	Y+10, r19	; 0x0a
   12578:	29 87       	std	Y+9, r18	; 0x09
   1257a:	20 50       	subi	r18, 0x00	; 0
   1257c:	31 42       	sbci	r19, 0x21	; 33
   1257e:	09 f0       	breq	.+2      	; 0x12582 <display_Addresses+0x17e>
   12580:	75 cf       	rjmp	.-278    	; 0x1246c <display_Addresses+0x68>
   12582:	87 e7       	ldi	r24, 0x77	; 119
   12584:	9a e1       	ldi	r25, 0x1A	; 26
   12586:	a0 e0       	ldi	r26, 0x00	; 0
   12588:	ed b7       	in	r30, 0x3d	; 61
   1258a:	fe b7       	in	r31, 0x3e	; 62
   1258c:	81 83       	std	Z+1, r24	; 0x01
   1258e:	92 83       	std	Z+2, r25	; 0x02
   12590:	a3 83       	std	Z+3, r26	; 0x03
   12592:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12596:	2a 96       	adiw	r28, 0x0a	; 10
   12598:	0f b6       	in	r0, 0x3f	; 63
   1259a:	f8 94       	cli
   1259c:	de bf       	out	0x3e, r29	; 62
   1259e:	0f be       	out	0x3f, r0	; 63
   125a0:	cd bf       	out	0x3d, r28	; 61
   125a2:	df 91       	pop	r29
   125a4:	cf 91       	pop	r28
   125a6:	ef 90       	pop	r14
   125a8:	df 90       	pop	r13
   125aa:	cf 90       	pop	r12
   125ac:	8f 90       	pop	r8
   125ae:	7f 90       	pop	r7
   125b0:	6f 90       	pop	r6
   125b2:	4f 90       	pop	r4
   125b4:	3f 90       	pop	r3
   125b6:	2f 90       	pop	r2
   125b8:	08 95       	ret

000125ba <display_Config>:
   125ba:	2f 92       	push	r2
   125bc:	3f 92       	push	r3
   125be:	4f 92       	push	r4
   125c0:	6f 92       	push	r6
   125c2:	7f 92       	push	r7
   125c4:	8f 92       	push	r8
   125c6:	af 92       	push	r10
   125c8:	bf 92       	push	r11
   125ca:	cf 92       	push	r12
   125cc:	df 92       	push	r13
   125ce:	ef 92       	push	r14
   125d0:	0f 93       	push	r16
   125d2:	1f 93       	push	r17
   125d4:	cf 93       	push	r28
   125d6:	df 93       	push	r29
   125d8:	cd b7       	in	r28, 0x3d	; 61
   125da:	de b7       	in	r29, 0x3e	; 62
   125dc:	62 97       	sbiw	r28, 0x12	; 18
   125de:	0f b6       	in	r0, 0x3f	; 63
   125e0:	f8 94       	cli
   125e2:	de bf       	out	0x3e, r29	; 62
   125e4:	0f be       	out	0x3f, r0	; 63
   125e6:	cd bf       	out	0x3d, r28	; 61
   125e8:	5c 01       	movw	r10, r24
   125ea:	87 e5       	ldi	r24, 0x57	; 87
   125ec:	9a e1       	ldi	r25, 0x1A	; 26
   125ee:	a0 e0       	ldi	r26, 0x00	; 0
   125f0:	ed b7       	in	r30, 0x3d	; 61
   125f2:	fe b7       	in	r31, 0x3e	; 62
   125f4:	81 83       	std	Z+1, r24	; 0x01
   125f6:	92 83       	std	Z+2, r25	; 0x02
   125f8:	a3 83       	std	Z+3, r26	; 0x03
   125fa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   125fe:	0c ef       	ldi	r16, 0xFC	; 252
   12600:	1e e1       	ldi	r17, 0x1E	; 30
   12602:	8c ed       	ldi	r24, 0xDC	; 220
   12604:	99 e1       	ldi	r25, 0x19	; 25
   12606:	9c 01       	movw	r18, r24
   12608:	40 e0       	ldi	r20, 0x00	; 0
   1260a:	28 87       	std	Y+8, r18	; 0x08
   1260c:	39 87       	std	Y+9, r19	; 0x09
   1260e:	4a 87       	std	Y+10, r20	; 0x0a
   12610:	81 e1       	ldi	r24, 0x11	; 17
   12612:	9a e1       	ldi	r25, 0x1A	; 26
   12614:	9c 01       	movw	r18, r24
   12616:	40 e0       	ldi	r20, 0x00	; 0
   12618:	2b 87       	std	Y+11, r18	; 0x0b
   1261a:	3c 87       	std	Y+12, r19	; 0x0c
   1261c:	4d 87       	std	Y+13, r20	; 0x0d
   1261e:	82 ef       	ldi	r24, 0xF2	; 242
   12620:	99 e1       	ldi	r25, 0x19	; 25
   12622:	9c 01       	movw	r18, r24
   12624:	40 e0       	ldi	r20, 0x00	; 0
   12626:	2e 87       	std	Y+14, r18	; 0x0e
   12628:	3f 87       	std	Y+15, r19	; 0x0f
   1262a:	48 8b       	std	Y+16, r20	; 0x10
   1262c:	8e ed       	ldi	r24, 0xDE	; 222
   1262e:	99 e1       	ldi	r25, 0x19	; 25
   12630:	1c 01       	movw	r2, r24
   12632:	41 2c       	mov	r4, r1
   12634:	8e e4       	ldi	r24, 0x4E	; 78
   12636:	9a e1       	ldi	r25, 0x1A	; 26
   12638:	6c 01       	movw	r12, r24
   1263a:	e1 2c       	mov	r14, r1
   1263c:	8f e2       	ldi	r24, 0x2F	; 47
   1263e:	9a e1       	ldi	r25, 0x1A	; 26
   12640:	3c 01       	movw	r6, r24
   12642:	81 2c       	mov	r8, r1
   12644:	f8 01       	movw	r30, r16
   12646:	80 81       	ld	r24, Z
   12648:	88 23       	and	r24, r24
   1264a:	09 f4       	brne	.+2      	; 0x1264e <display_Config+0x94>
   1264c:	14 c2       	rjmp	.+1064   	; 0x12a76 <display_Config+0x4bc>
   1264e:	83 30       	cpi	r24, 0x03	; 3
   12650:	09 f0       	breq	.+2      	; 0x12654 <display_Config+0x9a>
   12652:	38 c1       	rjmp	.+624    	; 0x128c4 <display_Config+0x30a>
   12654:	27 a1       	ldd	r18, Z+39	; 0x27
   12656:	30 a5       	ldd	r19, Z+40	; 0x28
   12658:	3a 8b       	std	Y+18, r19	; 0x12
   1265a:	29 8b       	std	Y+17, r18	; 0x11
   1265c:	c8 01       	movw	r24, r16
   1265e:	07 96       	adiw	r24, 0x07	; 7
   12660:	ed b7       	in	r30, 0x3d	; 61
   12662:	fe b7       	in	r31, 0x3e	; 62
   12664:	95 83       	std	Z+5, r25	; 0x05
   12666:	84 83       	std	Z+4, r24	; 0x04
   12668:	c1 82       	std	Z+1, r12	; 0x01
   1266a:	d2 82       	std	Z+2, r13	; 0x02
   1266c:	e3 82       	std	Z+3, r14	; 0x03
   1266e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12672:	e9 89       	ldd	r30, Y+17	; 0x11
   12674:	fa 89       	ldd	r31, Y+18	; 0x12
   12676:	80 81       	ld	r24, Z
   12678:	90 e0       	ldi	r25, 0x00	; 0
   1267a:	ed b7       	in	r30, 0x3d	; 61
   1267c:	fe b7       	in	r31, 0x3e	; 62
   1267e:	95 83       	std	Z+5, r25	; 0x05
   12680:	84 83       	std	Z+4, r24	; 0x04
   12682:	61 82       	std	Z+1, r6	; 0x01
   12684:	72 82       	std	Z+2, r7	; 0x02
   12686:	83 82       	std	Z+3, r8	; 0x03
   12688:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1268c:	64 e0       	ldi	r22, 0x04	; 4
   1268e:	89 e0       	ldi	r24, 0x09	; 9
   12690:	93 de       	rcall	.-730    	; 0x123b8 <print_tok>
   12692:	e9 89       	ldd	r30, Y+17	; 0x11
   12694:	fa 89       	ldd	r31, Y+18	; 0x12
   12696:	20 81       	ld	r18, Z
   12698:	30 e0       	ldi	r19, 0x00	; 0
   1269a:	40 e0       	ldi	r20, 0x00	; 0
   1269c:	50 e0       	ldi	r21, 0x00	; 0
   1269e:	68 e0       	ldi	r22, 0x08	; 8
   126a0:	81 e0       	ldi	r24, 0x01	; 1
   126a2:	15 de       	rcall	.-982    	; 0x122ce <print_tok_val>
   126a4:	e9 89       	ldd	r30, Y+17	; 0x11
   126a6:	fa 89       	ldd	r31, Y+18	; 0x12
   126a8:	21 81       	ldd	r18, Z+1	; 0x01
   126aa:	30 e0       	ldi	r19, 0x00	; 0
   126ac:	40 e0       	ldi	r20, 0x00	; 0
   126ae:	50 e0       	ldi	r21, 0x00	; 0
   126b0:	68 e0       	ldi	r22, 0x08	; 8
   126b2:	8f e1       	ldi	r24, 0x1F	; 31
   126b4:	0c de       	rcall	.-1000   	; 0x122ce <print_tok_val>
   126b6:	e9 89       	ldd	r30, Y+17	; 0x11
   126b8:	fa 89       	ldd	r31, Y+18	; 0x12
   126ba:	42 81       	ldd	r20, Z+2	; 0x02
   126bc:	53 81       	ldd	r21, Z+3	; 0x03
   126be:	68 e0       	ldi	r22, 0x08	; 8
   126c0:	82 e1       	ldi	r24, 0x12	; 18
   126c2:	45 de       	rcall	.-886    	; 0x1234e <print_tok_str>
   126c4:	64 e0       	ldi	r22, 0x04	; 4
   126c6:	81 e1       	ldi	r24, 0x11	; 17
   126c8:	77 de       	rcall	.-786    	; 0x123b8 <print_tok>
   126ca:	64 e0       	ldi	r22, 0x04	; 4
   126cc:	85 e1       	ldi	r24, 0x15	; 21
   126ce:	74 de       	rcall	.-792    	; 0x123b8 <print_tok>
   126d0:	e9 89       	ldd	r30, Y+17	; 0x11
   126d2:	fa 89       	ldd	r31, Y+18	; 0x12
   126d4:	24 81       	ldd	r18, Z+4	; 0x04
   126d6:	35 81       	ldd	r19, Z+5	; 0x05
   126d8:	40 e0       	ldi	r20, 0x00	; 0
   126da:	50 e0       	ldi	r21, 0x00	; 0
   126dc:	68 e0       	ldi	r22, 0x08	; 8
   126de:	87 e1       	ldi	r24, 0x17	; 23
   126e0:	f6 dd       	rcall	.-1044   	; 0x122ce <print_tok_val>
   126e2:	64 e0       	ldi	r22, 0x04	; 4
   126e4:	81 e1       	ldi	r24, 0x11	; 17
   126e6:	68 de       	rcall	.-816    	; 0x123b8 <print_tok>
   126e8:	a1 14       	cp	r10, r1
   126ea:	b1 04       	cpc	r11, r1
   126ec:	09 f1       	breq	.+66     	; 0x12730 <display_Config+0x176>
   126ee:	64 e0       	ldi	r22, 0x04	; 4
   126f0:	8b e0       	ldi	r24, 0x0B	; 11
   126f2:	62 de       	rcall	.-828    	; 0x123b8 <print_tok>
   126f4:	e9 89       	ldd	r30, Y+17	; 0x11
   126f6:	fa 89       	ldd	r31, Y+18	; 0x12
   126f8:	26 81       	ldd	r18, Z+6	; 0x06
   126fa:	37 81       	ldd	r19, Z+7	; 0x07
   126fc:	40 e0       	ldi	r20, 0x00	; 0
   126fe:	50 e0       	ldi	r21, 0x00	; 0
   12700:	68 e0       	ldi	r22, 0x08	; 8
   12702:	88 e2       	ldi	r24, 0x28	; 40
   12704:	e4 dd       	rcall	.-1080   	; 0x122ce <print_tok_val>
   12706:	e9 89       	ldd	r30, Y+17	; 0x11
   12708:	fa 89       	ldd	r31, Y+18	; 0x12
   1270a:	20 85       	ldd	r18, Z+8	; 0x08
   1270c:	31 85       	ldd	r19, Z+9	; 0x09
   1270e:	40 e0       	ldi	r20, 0x00	; 0
   12710:	50 e0       	ldi	r21, 0x00	; 0
   12712:	68 e0       	ldi	r22, 0x08	; 8
   12714:	85 e2       	ldi	r24, 0x25	; 37
   12716:	db dd       	rcall	.-1098   	; 0x122ce <print_tok_val>
   12718:	e9 89       	ldd	r30, Y+17	; 0x11
   1271a:	fa 89       	ldd	r31, Y+18	; 0x12
   1271c:	22 85       	ldd	r18, Z+10	; 0x0a
   1271e:	30 e0       	ldi	r19, 0x00	; 0
   12720:	40 e0       	ldi	r20, 0x00	; 0
   12722:	50 e0       	ldi	r21, 0x00	; 0
   12724:	68 e0       	ldi	r22, 0x08	; 8
   12726:	86 e2       	ldi	r24, 0x26	; 38
   12728:	d2 dd       	rcall	.-1116   	; 0x122ce <print_tok_val>
   1272a:	64 e0       	ldi	r22, 0x04	; 4
   1272c:	81 e1       	ldi	r24, 0x11	; 17
   1272e:	44 de       	rcall	.-888    	; 0x123b8 <print_tok>
   12730:	64 e0       	ldi	r22, 0x04	; 4
   12732:	87 e2       	ldi	r24, 0x27	; 39
   12734:	41 de       	rcall	.-894    	; 0x123b8 <print_tok>
   12736:	a1 14       	cp	r10, r1
   12738:	b1 04       	cpc	r11, r1
   1273a:	49 f0       	breq	.+18     	; 0x1274e <display_Config+0x194>
   1273c:	e9 89       	ldd	r30, Y+17	; 0x11
   1273e:	fa 89       	ldd	r31, Y+18	; 0x12
   12740:	23 85       	ldd	r18, Z+11	; 0x0b
   12742:	30 e0       	ldi	r19, 0x00	; 0
   12744:	40 e0       	ldi	r20, 0x00	; 0
   12746:	50 e0       	ldi	r21, 0x00	; 0
   12748:	68 e0       	ldi	r22, 0x08	; 8
   1274a:	89 e2       	ldi	r24, 0x29	; 41
   1274c:	c0 dd       	rcall	.-1152   	; 0x122ce <print_tok_val>
   1274e:	e9 89       	ldd	r30, Y+17	; 0x11
   12750:	fa 89       	ldd	r31, Y+18	; 0x12
   12752:	24 85       	ldd	r18, Z+12	; 0x0c
   12754:	35 85       	ldd	r19, Z+13	; 0x0d
   12756:	46 85       	ldd	r20, Z+14	; 0x0e
   12758:	57 85       	ldd	r21, Z+15	; 0x0f
   1275a:	68 e0       	ldi	r22, 0x08	; 8
   1275c:	8f e0       	ldi	r24, 0x0F	; 15
   1275e:	b7 dd       	rcall	.-1170   	; 0x122ce <print_tok_val>
   12760:	a1 14       	cp	r10, r1
   12762:	b1 04       	cpc	r11, r1
   12764:	09 f4       	brne	.+2      	; 0x12768 <display_Config+0x1ae>
   12766:	5a c0       	rjmp	.+180    	; 0x1281c <display_Config+0x262>
   12768:	e9 89       	ldd	r30, Y+17	; 0x11
   1276a:	fa 89       	ldd	r31, Y+18	; 0x12
   1276c:	20 89       	ldd	r18, Z+16	; 0x10
   1276e:	31 89       	ldd	r19, Z+17	; 0x11
   12770:	40 e0       	ldi	r20, 0x00	; 0
   12772:	50 e0       	ldi	r21, 0x00	; 0
   12774:	68 e0       	ldi	r22, 0x08	; 8
   12776:	87 e0       	ldi	r24, 0x07	; 7
   12778:	aa dd       	rcall	.-1196   	; 0x122ce <print_tok_val>
   1277a:	e9 89       	ldd	r30, Y+17	; 0x11
   1277c:	fa 89       	ldd	r31, Y+18	; 0x12
   1277e:	22 89       	ldd	r18, Z+18	; 0x12
   12780:	30 e0       	ldi	r19, 0x00	; 0
   12782:	40 e0       	ldi	r20, 0x00	; 0
   12784:	50 e0       	ldi	r21, 0x00	; 0
   12786:	68 e0       	ldi	r22, 0x08	; 8
   12788:	85 e0       	ldi	r24, 0x05	; 5
   1278a:	a1 dd       	rcall	.-1214   	; 0x122ce <print_tok_val>
   1278c:	e9 89       	ldd	r30, Y+17	; 0x11
   1278e:	fa 89       	ldd	r31, Y+18	; 0x12
   12790:	23 89       	ldd	r18, Z+19	; 0x13
   12792:	30 e0       	ldi	r19, 0x00	; 0
   12794:	40 e0       	ldi	r20, 0x00	; 0
   12796:	50 e0       	ldi	r21, 0x00	; 0
   12798:	68 e0       	ldi	r22, 0x08	; 8
   1279a:	86 e0       	ldi	r24, 0x06	; 6
   1279c:	98 dd       	rcall	.-1232   	; 0x122ce <print_tok_val>
   1279e:	e9 89       	ldd	r30, Y+17	; 0x11
   127a0:	fa 89       	ldd	r31, Y+18	; 0x12
   127a2:	24 89       	ldd	r18, Z+20	; 0x14
   127a4:	35 89       	ldd	r19, Z+21	; 0x15
   127a6:	40 e0       	ldi	r20, 0x00	; 0
   127a8:	50 e0       	ldi	r21, 0x00	; 0
   127aa:	68 e0       	ldi	r22, 0x08	; 8
   127ac:	84 e0       	ldi	r24, 0x04	; 4
   127ae:	8f dd       	rcall	.-1250   	; 0x122ce <print_tok_val>
   127b0:	e9 89       	ldd	r30, Y+17	; 0x11
   127b2:	fa 89       	ldd	r31, Y+18	; 0x12
   127b4:	26 89       	ldd	r18, Z+22	; 0x16
   127b6:	37 89       	ldd	r19, Z+23	; 0x17
   127b8:	40 e0       	ldi	r20, 0x00	; 0
   127ba:	50 e0       	ldi	r21, 0x00	; 0
   127bc:	68 e0       	ldi	r22, 0x08	; 8
   127be:	8a e0       	ldi	r24, 0x0A	; 10
   127c0:	86 dd       	rcall	.-1268   	; 0x122ce <print_tok_val>
   127c2:	e9 89       	ldd	r30, Y+17	; 0x11
   127c4:	fa 89       	ldd	r31, Y+18	; 0x12
   127c6:	20 8d       	ldd	r18, Z+24	; 0x18
   127c8:	31 8d       	ldd	r19, Z+25	; 0x19
   127ca:	40 e0       	ldi	r20, 0x00	; 0
   127cc:	50 e0       	ldi	r21, 0x00	; 0
   127ce:	68 e0       	ldi	r22, 0x08	; 8
   127d0:	8e e1       	ldi	r24, 0x1E	; 30
   127d2:	7d dd       	rcall	.-1286   	; 0x122ce <print_tok_val>
   127d4:	e9 89       	ldd	r30, Y+17	; 0x11
   127d6:	fa 89       	ldd	r31, Y+18	; 0x12
   127d8:	22 8d       	ldd	r18, Z+26	; 0x1a
   127da:	33 8d       	ldd	r19, Z+27	; 0x1b
   127dc:	40 e0       	ldi	r20, 0x00	; 0
   127de:	50 e0       	ldi	r21, 0x00	; 0
   127e0:	68 e0       	ldi	r22, 0x08	; 8
   127e2:	80 e0       	ldi	r24, 0x00	; 0
   127e4:	74 dd       	rcall	.-1304   	; 0x122ce <print_tok_val>
   127e6:	e9 89       	ldd	r30, Y+17	; 0x11
   127e8:	fa 89       	ldd	r31, Y+18	; 0x12
   127ea:	24 8d       	ldd	r18, Z+28	; 0x1c
   127ec:	30 e0       	ldi	r19, 0x00	; 0
   127ee:	40 e0       	ldi	r20, 0x00	; 0
   127f0:	50 e0       	ldi	r21, 0x00	; 0
   127f2:	68 e0       	ldi	r22, 0x08	; 8
   127f4:	8c e1       	ldi	r24, 0x1C	; 28
   127f6:	6b dd       	rcall	.-1322   	; 0x122ce <print_tok_val>
   127f8:	e9 89       	ldd	r30, Y+17	; 0x11
   127fa:	fa 89       	ldd	r31, Y+18	; 0x12
   127fc:	25 8d       	ldd	r18, Z+29	; 0x1d
   127fe:	30 e0       	ldi	r19, 0x00	; 0
   12800:	40 e0       	ldi	r20, 0x00	; 0
   12802:	50 e0       	ldi	r21, 0x00	; 0
   12804:	68 e0       	ldi	r22, 0x08	; 8
   12806:	83 e1       	ldi	r24, 0x13	; 19
   12808:	62 dd       	rcall	.-1340   	; 0x122ce <print_tok_val>
   1280a:	e9 89       	ldd	r30, Y+17	; 0x11
   1280c:	fa 89       	ldd	r31, Y+18	; 0x12
   1280e:	26 8d       	ldd	r18, Z+30	; 0x1e
   12810:	30 e0       	ldi	r19, 0x00	; 0
   12812:	40 e0       	ldi	r20, 0x00	; 0
   12814:	50 e0       	ldi	r21, 0x00	; 0
   12816:	68 e0       	ldi	r22, 0x08	; 8
   12818:	81 e2       	ldi	r24, 0x21	; 33
   1281a:	59 dd       	rcall	.-1358   	; 0x122ce <print_tok_val>
   1281c:	64 e0       	ldi	r22, 0x04	; 4
   1281e:	81 e1       	ldi	r24, 0x11	; 17
   12820:	cb dd       	rcall	.-1130   	; 0x123b8 <print_tok>
   12822:	a1 14       	cp	r10, r1
   12824:	b1 04       	cpc	r11, r1
   12826:	99 f1       	breq	.+102    	; 0x1288e <display_Config+0x2d4>
   12828:	64 e0       	ldi	r22, 0x04	; 4
   1282a:	8a e2       	ldi	r24, 0x2A	; 42
   1282c:	c5 dd       	rcall	.-1142   	; 0x123b8 <print_tok>
   1282e:	e9 89       	ldd	r30, Y+17	; 0x11
   12830:	fa 89       	ldd	r31, Y+18	; 0x12
   12832:	27 8d       	ldd	r18, Z+31	; 0x1f
   12834:	30 a1       	ldd	r19, Z+32	; 0x20
   12836:	41 a1       	ldd	r20, Z+33	; 0x21
   12838:	52 a1       	ldd	r21, Z+34	; 0x22
   1283a:	68 e0       	ldi	r22, 0x08	; 8
   1283c:	8a e1       	ldi	r24, 0x1A	; 26
   1283e:	47 dd       	rcall	.-1394   	; 0x122ce <print_tok_val>
   12840:	e9 89       	ldd	r30, Y+17	; 0x11
   12842:	fa 89       	ldd	r31, Y+18	; 0x12
   12844:	23 a1       	ldd	r18, Z+35	; 0x23
   12846:	30 e0       	ldi	r19, 0x00	; 0
   12848:	40 e0       	ldi	r20, 0x00	; 0
   1284a:	50 e0       	ldi	r21, 0x00	; 0
   1284c:	68 e0       	ldi	r22, 0x08	; 8
   1284e:	8b e1       	ldi	r24, 0x1B	; 27
   12850:	3e dd       	rcall	.-1412   	; 0x122ce <print_tok_val>
   12852:	e9 89       	ldd	r30, Y+17	; 0x11
   12854:	fa 89       	ldd	r31, Y+18	; 0x12
   12856:	24 a1       	ldd	r18, Z+36	; 0x24
   12858:	35 a1       	ldd	r19, Z+37	; 0x25
   1285a:	40 e0       	ldi	r20, 0x00	; 0
   1285c:	50 e0       	ldi	r21, 0x00	; 0
   1285e:	68 e0       	ldi	r22, 0x08	; 8
   12860:	8d e1       	ldi	r24, 0x1D	; 29
   12862:	35 dd       	rcall	.-1430   	; 0x122ce <print_tok_val>
   12864:	e9 89       	ldd	r30, Y+17	; 0x11
   12866:	fa 89       	ldd	r31, Y+18	; 0x12
   12868:	26 a1       	ldd	r18, Z+38	; 0x26
   1286a:	37 a1       	ldd	r19, Z+39	; 0x27
   1286c:	40 a5       	ldd	r20, Z+40	; 0x28
   1286e:	51 a5       	ldd	r21, Z+41	; 0x29
   12870:	68 e0       	ldi	r22, 0x08	; 8
   12872:	89 e1       	ldi	r24, 0x19	; 25
   12874:	2c dd       	rcall	.-1448   	; 0x122ce <print_tok_val>
   12876:	e9 89       	ldd	r30, Y+17	; 0x11
   12878:	fa 89       	ldd	r31, Y+18	; 0x12
   1287a:	22 a5       	ldd	r18, Z+42	; 0x2a
   1287c:	30 e0       	ldi	r19, 0x00	; 0
   1287e:	40 e0       	ldi	r20, 0x00	; 0
   12880:	50 e0       	ldi	r21, 0x00	; 0
   12882:	68 e0       	ldi	r22, 0x08	; 8
   12884:	88 e1       	ldi	r24, 0x18	; 24
   12886:	23 dd       	rcall	.-1466   	; 0x122ce <print_tok_val>
   12888:	64 e0       	ldi	r22, 0x04	; 4
   1288a:	81 e1       	ldi	r24, 0x11	; 17
   1288c:	95 dd       	rcall	.-1238   	; 0x123b8 <print_tok>
   1288e:	e9 89       	ldd	r30, Y+17	; 0x11
   12890:	fa 89       	ldd	r31, Y+18	; 0x12
   12892:	86 a1       	ldd	r24, Z+38	; 0x26
   12894:	97 a1       	ldd	r25, Z+39	; 0x27
   12896:	a0 a5       	ldd	r26, Z+40	; 0x28
   12898:	b1 a5       	ldd	r27, Z+41	; 0x29
   1289a:	01 96       	adiw	r24, 0x01	; 1
   1289c:	a1 1d       	adc	r26, r1
   1289e:	b1 1d       	adc	r27, r1
   128a0:	ed b7       	in	r30, 0x3d	; 61
   128a2:	fe b7       	in	r31, 0x3e	; 62
   128a4:	84 83       	std	Z+4, r24	; 0x04
   128a6:	95 83       	std	Z+5, r25	; 0x05
   128a8:	a6 83       	std	Z+6, r26	; 0x06
   128aa:	b7 83       	std	Z+7, r27	; 0x07
   128ac:	2b e1       	ldi	r18, 0x1B	; 27
   128ae:	3a e1       	ldi	r19, 0x1A	; 26
   128b0:	c9 01       	movw	r24, r18
   128b2:	a0 e0       	ldi	r26, 0x00	; 0
   128b4:	81 83       	std	Z+1, r24	; 0x01
   128b6:	92 83       	std	Z+2, r25	; 0x02
   128b8:	a3 83       	std	Z+3, r26	; 0x03
   128ba:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   128be:	60 e0       	ldi	r22, 0x00	; 0
   128c0:	81 e1       	ldi	r24, 0x11	; 17
   128c2:	7a dd       	rcall	.-1292   	; 0x123b8 <print_tok>
   128c4:	f8 01       	movw	r30, r16
   128c6:	80 81       	ld	r24, Z
   128c8:	81 30       	cpi	r24, 0x01	; 1
   128ca:	09 f0       	breq	.+2      	; 0x128ce <display_Config+0x314>
   128cc:	ad c0       	rjmp	.+346    	; 0x12a28 <display_Config+0x46e>
   128ce:	27 a1       	ldd	r18, Z+39	; 0x27
   128d0:	30 a5       	ldd	r19, Z+40	; 0x28
   128d2:	3a 8b       	std	Y+18, r19	; 0x12
   128d4:	29 8b       	std	Y+17, r18	; 0x11
   128d6:	c8 01       	movw	r24, r16
   128d8:	07 96       	adiw	r24, 0x07	; 7
   128da:	ed b7       	in	r30, 0x3d	; 61
   128dc:	fe b7       	in	r31, 0x3e	; 62
   128de:	95 83       	std	Z+5, r25	; 0x05
   128e0:	84 83       	std	Z+4, r24	; 0x04
   128e2:	2b 85       	ldd	r18, Y+11	; 0x0b
   128e4:	3c 85       	ldd	r19, Y+12	; 0x0c
   128e6:	4d 85       	ldd	r20, Y+13	; 0x0d
   128e8:	21 83       	std	Z+1, r18	; 0x01
   128ea:	32 83       	std	Z+2, r19	; 0x02
   128ec:	43 83       	std	Z+3, r20	; 0x03
   128ee:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   128f2:	e9 89       	ldd	r30, Y+17	; 0x11
   128f4:	fa 89       	ldd	r31, Y+18	; 0x12
   128f6:	80 81       	ld	r24, Z
   128f8:	90 e0       	ldi	r25, 0x00	; 0
   128fa:	ed b7       	in	r30, 0x3d	; 61
   128fc:	fe b7       	in	r31, 0x3e	; 62
   128fe:	95 83       	std	Z+5, r25	; 0x05
   12900:	84 83       	std	Z+4, r24	; 0x04
   12902:	2e 85       	ldd	r18, Y+14	; 0x0e
   12904:	3f 85       	ldd	r19, Y+15	; 0x0f
   12906:	48 89       	ldd	r20, Y+16	; 0x10
   12908:	21 83       	std	Z+1, r18	; 0x01
   1290a:	32 83       	std	Z+2, r19	; 0x02
   1290c:	43 83       	std	Z+3, r20	; 0x03
   1290e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12912:	64 e0       	ldi	r22, 0x04	; 4
   12914:	85 e1       	ldi	r24, 0x15	; 21
   12916:	50 dd       	rcall	.-1376   	; 0x123b8 <print_tok>
   12918:	e9 89       	ldd	r30, Y+17	; 0x11
   1291a:	fa 89       	ldd	r31, Y+18	; 0x12
   1291c:	20 81       	ld	r18, Z
   1291e:	30 e0       	ldi	r19, 0x00	; 0
   12920:	40 e0       	ldi	r20, 0x00	; 0
   12922:	50 e0       	ldi	r21, 0x00	; 0
   12924:	68 e0       	ldi	r22, 0x08	; 8
   12926:	81 e0       	ldi	r24, 0x01	; 1
   12928:	d2 dc       	rcall	.-1628   	; 0x122ce <print_tok_val>
   1292a:	e9 89       	ldd	r30, Y+17	; 0x11
   1292c:	fa 89       	ldd	r31, Y+18	; 0x12
   1292e:	21 81       	ldd	r18, Z+1	; 0x01
   12930:	30 e0       	ldi	r19, 0x00	; 0
   12932:	40 e0       	ldi	r20, 0x00	; 0
   12934:	50 e0       	ldi	r21, 0x00	; 0
   12936:	68 e0       	ldi	r22, 0x08	; 8
   12938:	8f e1       	ldi	r24, 0x1F	; 31
   1293a:	c9 dc       	rcall	.-1646   	; 0x122ce <print_tok_val>
   1293c:	e9 89       	ldd	r30, Y+17	; 0x11
   1293e:	fa 89       	ldd	r31, Y+18	; 0x12
   12940:	42 81       	ldd	r20, Z+2	; 0x02
   12942:	53 81       	ldd	r21, Z+3	; 0x03
   12944:	68 e0       	ldi	r22, 0x08	; 8
   12946:	82 e1       	ldi	r24, 0x12	; 18
   12948:	02 dd       	rcall	.-1532   	; 0x1234e <print_tok_str>
   1294a:	64 e0       	ldi	r22, 0x04	; 4
   1294c:	81 e1       	ldi	r24, 0x11	; 17
   1294e:	34 dd       	rcall	.-1432   	; 0x123b8 <print_tok>
   12950:	64 e0       	ldi	r22, 0x04	; 4
   12952:	89 e0       	ldi	r24, 0x09	; 9
   12954:	31 dd       	rcall	.-1438   	; 0x123b8 <print_tok>
   12956:	e9 89       	ldd	r30, Y+17	; 0x11
   12958:	fa 89       	ldd	r31, Y+18	; 0x12
   1295a:	24 81       	ldd	r18, Z+4	; 0x04
   1295c:	35 81       	ldd	r19, Z+5	; 0x05
   1295e:	40 e0       	ldi	r20, 0x00	; 0
   12960:	50 e0       	ldi	r21, 0x00	; 0
   12962:	68 e0       	ldi	r22, 0x08	; 8
   12964:	87 e1       	ldi	r24, 0x17	; 23
   12966:	b3 dc       	rcall	.-1690   	; 0x122ce <print_tok_val>
   12968:	64 e0       	ldi	r22, 0x04	; 4
   1296a:	81 e1       	ldi	r24, 0x11	; 17
   1296c:	25 dd       	rcall	.-1462   	; 0x123b8 <print_tok>
   1296e:	a1 14       	cp	r10, r1
   12970:	b1 04       	cpc	r11, r1
   12972:	91 f1       	breq	.+100    	; 0x129d8 <display_Config+0x41e>
   12974:	64 e0       	ldi	r22, 0x04	; 4
   12976:	84 e1       	ldi	r24, 0x14	; 20
   12978:	1f dd       	rcall	.-1474   	; 0x123b8 <print_tok>
   1297a:	e9 89       	ldd	r30, Y+17	; 0x11
   1297c:	fa 89       	ldd	r31, Y+18	; 0x12
   1297e:	26 81       	ldd	r18, Z+6	; 0x06
   12980:	37 81       	ldd	r19, Z+7	; 0x07
   12982:	03 2e       	mov	r0, r19
   12984:	00 0c       	add	r0, r0
   12986:	44 0b       	sbc	r20, r20
   12988:	55 0b       	sbc	r21, r21
   1298a:	68 e0       	ldi	r22, 0x08	; 8
   1298c:	88 e0       	ldi	r24, 0x08	; 8
   1298e:	9f dc       	rcall	.-1730   	; 0x122ce <print_tok_val>
   12990:	e9 89       	ldd	r30, Y+17	; 0x11
   12992:	fa 89       	ldd	r31, Y+18	; 0x12
   12994:	20 85       	ldd	r18, Z+8	; 0x08
   12996:	31 85       	ldd	r19, Z+9	; 0x09
   12998:	03 2e       	mov	r0, r19
   1299a:	00 0c       	add	r0, r0
   1299c:	44 0b       	sbc	r20, r20
   1299e:	55 0b       	sbc	r21, r21
   129a0:	68 e0       	ldi	r22, 0x08	; 8
   129a2:	82 e2       	ldi	r24, 0x22	; 34
   129a4:	94 dc       	rcall	.-1752   	; 0x122ce <print_tok_val>
   129a6:	e9 89       	ldd	r30, Y+17	; 0x11
   129a8:	fa 89       	ldd	r31, Y+18	; 0x12
   129aa:	22 85       	ldd	r18, Z+10	; 0x0a
   129ac:	33 85       	ldd	r19, Z+11	; 0x0b
   129ae:	03 2e       	mov	r0, r19
   129b0:	00 0c       	add	r0, r0
   129b2:	44 0b       	sbc	r20, r20
   129b4:	55 0b       	sbc	r21, r21
   129b6:	68 e0       	ldi	r22, 0x08	; 8
   129b8:	86 e1       	ldi	r24, 0x16	; 22
   129ba:	89 dc       	rcall	.-1774   	; 0x122ce <print_tok_val>
   129bc:	e9 89       	ldd	r30, Y+17	; 0x11
   129be:	fa 89       	ldd	r31, Y+18	; 0x12
   129c0:	24 85       	ldd	r18, Z+12	; 0x0c
   129c2:	35 85       	ldd	r19, Z+13	; 0x0d
   129c4:	03 2e       	mov	r0, r19
   129c6:	00 0c       	add	r0, r0
   129c8:	44 0b       	sbc	r20, r20
   129ca:	55 0b       	sbc	r21, r21
   129cc:	68 e0       	ldi	r22, 0x08	; 8
   129ce:	8d e0       	ldi	r24, 0x0D	; 13
   129d0:	7e dc       	rcall	.-1796   	; 0x122ce <print_tok_val>
   129d2:	64 e0       	ldi	r22, 0x04	; 4
   129d4:	81 e1       	ldi	r24, 0x11	; 17
   129d6:	f0 dc       	rcall	.-1568   	; 0x123b8 <print_tok>
   129d8:	e9 89       	ldd	r30, Y+17	; 0x11
   129da:	fa 89       	ldd	r31, Y+18	; 0x12
   129dc:	44 85       	ldd	r20, Z+12	; 0x0c
   129de:	55 85       	ldd	r21, Z+13	; 0x0d
   129e0:	20 85       	ldd	r18, Z+8	; 0x08
   129e2:	31 85       	ldd	r19, Z+9	; 0x09
   129e4:	42 9f       	mul	r20, r18
   129e6:	c0 01       	movw	r24, r0
   129e8:	43 9f       	mul	r20, r19
   129ea:	90 0d       	add	r25, r0
   129ec:	52 9f       	mul	r21, r18
   129ee:	90 0d       	add	r25, r0
   129f0:	11 24       	eor	r1, r1
   129f2:	42 85       	ldd	r20, Z+10	; 0x0a
   129f4:	53 85       	ldd	r21, Z+11	; 0x0b
   129f6:	84 9f       	mul	r24, r20
   129f8:	90 01       	movw	r18, r0
   129fa:	85 9f       	mul	r24, r21
   129fc:	30 0d       	add	r19, r0
   129fe:	94 9f       	mul	r25, r20
   12a00:	30 0d       	add	r19, r0
   12a02:	11 24       	eor	r1, r1
   12a04:	c9 01       	movw	r24, r18
   12a06:	33 0f       	add	r19, r19
   12a08:	aa 0b       	sbc	r26, r26
   12a0a:	bb 0b       	sbc	r27, r27
   12a0c:	ed b7       	in	r30, 0x3d	; 61
   12a0e:	fe b7       	in	r31, 0x3e	; 62
   12a10:	84 83       	std	Z+4, r24	; 0x04
   12a12:	95 83       	std	Z+5, r25	; 0x05
   12a14:	a6 83       	std	Z+6, r26	; 0x06
   12a16:	b7 83       	std	Z+7, r27	; 0x07
   12a18:	21 82       	std	Z+1, r2	; 0x01
   12a1a:	32 82       	std	Z+2, r3	; 0x02
   12a1c:	43 82       	std	Z+3, r4	; 0x03
   12a1e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12a22:	60 e0       	ldi	r22, 0x00	; 0
   12a24:	81 e1       	ldi	r24, 0x11	; 17
   12a26:	c8 dc       	rcall	.-1648   	; 0x123b8 <print_tok>
   12a28:	f8 01       	movw	r30, r16
   12a2a:	80 81       	ld	r24, Z
   12a2c:	84 30       	cpi	r24, 0x04	; 4
   12a2e:	c9 f4       	brne	.+50     	; 0x12a62 <display_Config+0x4a8>
   12a30:	27 a1       	ldd	r18, Z+39	; 0x27
   12a32:	30 a5       	ldd	r19, Z+40	; 0x28
   12a34:	3a 8b       	std	Y+18, r19	; 0x12
   12a36:	29 8b       	std	Y+17, r18	; 0x11
   12a38:	60 e0       	ldi	r22, 0x00	; 0
   12a3a:	80 e2       	ldi	r24, 0x20	; 32
   12a3c:	bd dc       	rcall	.-1670   	; 0x123b8 <print_tok>
   12a3e:	64 e0       	ldi	r22, 0x04	; 4
   12a40:	89 e0       	ldi	r24, 0x09	; 9
   12a42:	ba dc       	rcall	.-1676   	; 0x123b8 <print_tok>
   12a44:	e9 89       	ldd	r30, Y+17	; 0x11
   12a46:	fa 89       	ldd	r31, Y+18	; 0x12
   12a48:	20 81       	ld	r18, Z
   12a4a:	30 e0       	ldi	r19, 0x00	; 0
   12a4c:	40 e0       	ldi	r20, 0x00	; 0
   12a4e:	50 e0       	ldi	r21, 0x00	; 0
   12a50:	68 e0       	ldi	r22, 0x08	; 8
   12a52:	81 e0       	ldi	r24, 0x01	; 1
   12a54:	3c dc       	rcall	.-1928   	; 0x122ce <print_tok_val>
   12a56:	64 e0       	ldi	r22, 0x04	; 4
   12a58:	81 e1       	ldi	r24, 0x11	; 17
   12a5a:	ae dc       	rcall	.-1700   	; 0x123b8 <print_tok>
   12a5c:	60 e0       	ldi	r22, 0x00	; 0
   12a5e:	81 e1       	ldi	r24, 0x11	; 17
   12a60:	ab dc       	rcall	.-1706   	; 0x123b8 <print_tok>
   12a62:	28 85       	ldd	r18, Y+8	; 0x08
   12a64:	39 85       	ldd	r19, Y+9	; 0x09
   12a66:	4a 85       	ldd	r20, Y+10	; 0x0a
   12a68:	ed b7       	in	r30, 0x3d	; 61
   12a6a:	fe b7       	in	r31, 0x3e	; 62
   12a6c:	21 83       	std	Z+1, r18	; 0x01
   12a6e:	32 83       	std	Z+2, r19	; 0x02
   12a70:	43 83       	std	Z+3, r20	; 0x03
   12a72:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12a76:	05 5d       	subi	r16, 0xD5	; 213
   12a78:	1f 4f       	sbci	r17, 0xFF	; 255
   12a7a:	20 e0       	ldi	r18, 0x00	; 0
   12a7c:	31 e2       	ldi	r19, 0x21	; 33
   12a7e:	20 17       	cp	r18, r16
   12a80:	31 07       	cpc	r19, r17
   12a82:	09 f0       	breq	.+2      	; 0x12a86 <display_Config+0x4cc>
   12a84:	df cd       	rjmp	.-1090   	; 0x12644 <display_Config+0x8a>
   12a86:	8a ed       	ldi	r24, 0xDA	; 218
   12a88:	99 e1       	ldi	r25, 0x19	; 25
   12a8a:	a0 e0       	ldi	r26, 0x00	; 0
   12a8c:	ed b7       	in	r30, 0x3d	; 61
   12a8e:	fe b7       	in	r31, 0x3e	; 62
   12a90:	81 83       	std	Z+1, r24	; 0x01
   12a92:	92 83       	std	Z+2, r25	; 0x02
   12a94:	a3 83       	std	Z+3, r26	; 0x03
   12a96:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12a9a:	62 96       	adiw	r28, 0x12	; 18
   12a9c:	0f b6       	in	r0, 0x3f	; 63
   12a9e:	f8 94       	cli
   12aa0:	de bf       	out	0x3e, r29	; 62
   12aa2:	0f be       	out	0x3f, r0	; 63
   12aa4:	cd bf       	out	0x3d, r28	; 61
   12aa6:	df 91       	pop	r29
   12aa8:	cf 91       	pop	r28
   12aaa:	1f 91       	pop	r17
   12aac:	0f 91       	pop	r16
   12aae:	ef 90       	pop	r14
   12ab0:	df 90       	pop	r13
   12ab2:	cf 90       	pop	r12
   12ab4:	bf 90       	pop	r11
   12ab6:	af 90       	pop	r10
   12ab8:	8f 90       	pop	r8
   12aba:	7f 90       	pop	r7
   12abc:	6f 90       	pop	r6
   12abe:	4f 90       	pop	r4
   12ac0:	3f 90       	pop	r3
   12ac2:	2f 90       	pop	r2
   12ac4:	08 95       	ret

00012ac6 <find_type>:
   12ac6:	ec ef       	ldi	r30, 0xFC	; 252
   12ac8:	fe e1       	ldi	r31, 0x1E	; 30
   12aca:	20 e0       	ldi	r18, 0x00	; 0
   12acc:	30 e0       	ldi	r19, 0x00	; 0
   12ace:	40 81       	ld	r20, Z
   12ad0:	50 e0       	ldi	r21, 0x00	; 0
   12ad2:	48 17       	cp	r20, r24
   12ad4:	59 07       	cpc	r21, r25
   12ad6:	49 f0       	breq	.+18     	; 0x12aea <find_type+0x24>
   12ad8:	2f 5f       	subi	r18, 0xFF	; 255
   12ada:	3f 4f       	sbci	r19, 0xFF	; 255
   12adc:	bb 96       	adiw	r30, 0x2b	; 43
   12ade:	2c 30       	cpi	r18, 0x0C	; 12
   12ae0:	31 05       	cpc	r19, r1
   12ae2:	a9 f7       	brne	.-22     	; 0x12ace <find_type+0x8>
   12ae4:	8f ef       	ldi	r24, 0xFF	; 255
   12ae6:	9f ef       	ldi	r25, 0xFF	; 255
   12ae8:	08 95       	ret
   12aea:	c9 01       	movw	r24, r18
   12aec:	08 95       	ret

00012aee <count_drive_types>:
   12aee:	28 2f       	mov	r18, r24
   12af0:	ec ef       	ldi	r30, 0xFC	; 252
   12af2:	fe e1       	ldi	r31, 0x1E	; 30
   12af4:	80 e0       	ldi	r24, 0x00	; 0
   12af6:	90 e0       	ldi	r25, 0x00	; 0
   12af8:	30 81       	ld	r19, Z
   12afa:	32 13       	cpse	r19, r18
   12afc:	01 c0       	rjmp	.+2      	; 0x12b00 <count_drive_types+0x12>
   12afe:	01 96       	adiw	r24, 0x01	; 1
   12b00:	bb 96       	adiw	r30, 0x2b	; 43
   12b02:	31 e2       	ldi	r19, 0x21	; 33
   12b04:	e0 30       	cpi	r30, 0x00	; 0
   12b06:	f3 07       	cpc	r31, r19
   12b08:	b9 f7       	brne	.-18     	; 0x12af8 <count_drive_types+0xa>
   12b0a:	08 95       	ret

00012b0c <type_to_str>:
   12b0c:	00 97       	sbiw	r24, 0x00	; 0
   12b0e:	59 f0       	breq	.+22     	; 0x12b26 <type_to_str+0x1a>
   12b10:	81 30       	cpi	r24, 0x01	; 1
   12b12:	91 05       	cpc	r25, r1
   12b14:	59 f0       	breq	.+22     	; 0x12b2c <type_to_str+0x20>
   12b16:	83 30       	cpi	r24, 0x03	; 3
   12b18:	91 05       	cpc	r25, r1
   12b1a:	59 f0       	breq	.+22     	; 0x12b32 <type_to_str+0x26>
   12b1c:	04 97       	sbiw	r24, 0x04	; 4
   12b1e:	61 f0       	breq	.+24     	; 0x12b38 <type_to_str+0x2c>
   12b20:	85 e3       	ldi	r24, 0x35	; 53
   12b22:	9e e0       	ldi	r25, 0x0E	; 14
   12b24:	08 95       	ret
   12b26:	8b e0       	ldi	r24, 0x0B	; 11
   12b28:	9e e0       	ldi	r25, 0x0E	; 14
   12b2a:	08 95       	ret
   12b2c:	83 e1       	ldi	r24, 0x13	; 19
   12b2e:	9e e0       	ldi	r25, 0x0E	; 14
   12b30:	08 95       	ret
   12b32:	8b e2       	ldi	r24, 0x2B	; 43
   12b34:	9e e0       	ldi	r25, 0x0E	; 14
   12b36:	08 95       	ret
   12b38:	8e e1       	ldi	r24, 0x1E	; 30
   12b3a:	9e e0       	ldi	r25, 0x0E	; 14
   12b3c:	08 95       	ret

00012b3e <find_free>:
   12b3e:	80 e0       	ldi	r24, 0x00	; 0
   12b40:	90 e0       	ldi	r25, 0x00	; 0
   12b42:	c1 cf       	rjmp	.-126    	; 0x12ac6 <find_type>
   12b44:	08 95       	ret

00012b46 <find_device>:
   12b46:	9b 01       	movw	r18, r22
   12b48:	20 52       	subi	r18, 0x20	; 32
   12b4a:	31 09       	sbc	r19, r1
   12b4c:	2f 35       	cpi	r18, 0x5F	; 95
   12b4e:	31 05       	cpc	r19, r1
   12b50:	f8 f4       	brcc	.+62     	; 0x12b90 <find_device+0x4a>
   12b52:	64 17       	cp	r22, r20
   12b54:	75 07       	cpc	r23, r21
   12b56:	e4 f0       	brlt	.+56     	; 0x12b90 <find_device+0x4a>
   12b58:	9a 01       	movw	r18, r20
   12b5a:	22 5e       	subi	r18, 0xE2	; 226
   12b5c:	3f 4f       	sbci	r19, 0xFF	; 255
   12b5e:	26 17       	cp	r18, r22
   12b60:	37 07       	cpc	r19, r23
   12b62:	b4 f0       	brlt	.+44     	; 0x12b90 <find_device+0x4a>
   12b64:	64 1b       	sub	r22, r20
   12b66:	75 0b       	sbc	r23, r21
   12b68:	ec ef       	ldi	r30, 0xFC	; 252
   12b6a:	fe e1       	ldi	r31, 0x1E	; 30
   12b6c:	20 e0       	ldi	r18, 0x00	; 0
   12b6e:	30 e0       	ldi	r19, 0x00	; 0
   12b70:	40 81       	ld	r20, Z
   12b72:	50 e0       	ldi	r21, 0x00	; 0
   12b74:	48 17       	cp	r20, r24
   12b76:	59 07       	cpc	r21, r25
   12b78:	29 f4       	brne	.+10     	; 0x12b84 <find_device+0x3e>
   12b7a:	41 81       	ldd	r20, Z+1	; 0x01
   12b7c:	50 e0       	ldi	r21, 0x00	; 0
   12b7e:	64 17       	cp	r22, r20
   12b80:	75 07       	cpc	r23, r21
   12b82:	49 f0       	breq	.+18     	; 0x12b96 <find_device+0x50>
   12b84:	2f 5f       	subi	r18, 0xFF	; 255
   12b86:	3f 4f       	sbci	r19, 0xFF	; 255
   12b88:	bb 96       	adiw	r30, 0x2b	; 43
   12b8a:	2c 30       	cpi	r18, 0x0C	; 12
   12b8c:	31 05       	cpc	r19, r1
   12b8e:	81 f7       	brne	.-32     	; 0x12b70 <find_device+0x2a>
   12b90:	8f ef       	ldi	r24, 0xFF	; 255
   12b92:	9f ef       	ldi	r25, 0xFF	; 255
   12b94:	08 95       	ret
   12b96:	c9 01       	movw	r24, r18
   12b98:	08 95       	ret

00012b9a <set_active_device>:
   12b9a:	a9 e0       	ldi	r26, 0x09	; 9
   12b9c:	b0 e0       	ldi	r27, 0x00	; 0
   12b9e:	e3 ed       	ldi	r30, 0xD3	; 211
   12ba0:	f5 e9       	ldi	r31, 0x95	; 149
   12ba2:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
   12ba6:	8f 3f       	cpi	r24, 0xFF	; 255
   12ba8:	2f ef       	ldi	r18, 0xFF	; 255
   12baa:	92 07       	cpc	r25, r18
   12bac:	09 f4       	brne	.+2      	; 0x12bb0 <set_active_device+0x16>
   12bae:	d0 c0       	rjmp	.+416    	; 0x12d50 <set_active_device+0x1b6>
   12bb0:	ec 01       	movw	r28, r24
   12bb2:	0c 97       	sbiw	r24, 0x0c	; 12
   12bb4:	b0 f0       	brcs	.+44     	; 0x12be2 <set_active_device+0x48>
   12bb6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12bba:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12bbe:	c9 01       	movw	r24, r18
   12bc0:	81 70       	andi	r24, 0x01	; 1
   12bc2:	99 27       	eor	r25, r25
   12bc4:	20 ff       	sbrs	r18, 0
   12bc6:	c6 c0       	rjmp	.+396    	; 0x12d54 <set_active_device+0x1ba>
   12bc8:	ed b7       	in	r30, 0x3d	; 61
   12bca:	fe b7       	in	r31, 0x3e	; 62
   12bcc:	d5 83       	std	Z+5, r29	; 0x05
   12bce:	c4 83       	std	Z+4, r28	; 0x04
   12bd0:	85 eb       	ldi	r24, 0xB5	; 181
   12bd2:	99 e1       	ldi	r25, 0x19	; 25
   12bd4:	a0 e0       	ldi	r26, 0x00	; 0
   12bd6:	81 83       	std	Z+1, r24	; 0x01
   12bd8:	92 83       	std	Z+2, r25	; 0x02
   12bda:	a3 83       	std	Z+3, r26	; 0x03
   12bdc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12be0:	b7 c0       	rjmp	.+366    	; 0x12d50 <set_active_device+0x1b6>
   12be2:	8b e2       	ldi	r24, 0x2B	; 43
   12be4:	8c 9f       	mul	r24, r28
   12be6:	f0 01       	movw	r30, r0
   12be8:	8d 9f       	mul	r24, r29
   12bea:	f0 0d       	add	r31, r0
   12bec:	11 24       	eor	r1, r1
   12bee:	e4 50       	subi	r30, 0x04	; 4
   12bf0:	f1 4e       	sbci	r31, 0xE1	; 225
   12bf2:	21 81       	ldd	r18, Z+1	; 0x01
   12bf4:	2f 31       	cpi	r18, 0x1F	; 31
   12bf6:	d0 f0       	brcs	.+52     	; 0x12c2c <set_active_device+0x92>
   12bf8:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12bfc:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c00:	ca 01       	movw	r24, r20
   12c02:	81 70       	andi	r24, 0x01	; 1
   12c04:	99 27       	eor	r25, r25
   12c06:	40 ff       	sbrs	r20, 0
   12c08:	a5 c0       	rjmp	.+330    	; 0x12d54 <set_active_device+0x1ba>
   12c0a:	82 2f       	mov	r24, r18
   12c0c:	90 e0       	ldi	r25, 0x00	; 0
   12c0e:	ed b7       	in	r30, 0x3d	; 61
   12c10:	fe b7       	in	r31, 0x3e	; 62
   12c12:	97 83       	std	Z+7, r25	; 0x07
   12c14:	86 83       	std	Z+6, r24	; 0x06
   12c16:	d5 83       	std	Z+5, r29	; 0x05
   12c18:	c4 83       	std	Z+4, r28	; 0x04
   12c1a:	8c e7       	ldi	r24, 0x7C	; 124
   12c1c:	99 e1       	ldi	r25, 0x19	; 25
   12c1e:	a0 e0       	ldi	r26, 0x00	; 0
   12c20:	81 83       	std	Z+1, r24	; 0x01
   12c22:	92 83       	std	Z+2, r25	; 0x02
   12c24:	a3 83       	std	Z+3, r26	; 0x03
   12c26:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12c2a:	92 c0       	rjmp	.+292    	; 0x12d50 <set_active_device+0x1b6>
   12c2c:	20 81       	ld	r18, Z
   12c2e:	02 2f       	mov	r16, r18
   12c30:	10 e0       	ldi	r17, 0x00	; 0
   12c32:	87 a1       	ldd	r24, Z+39	; 0x27
   12c34:	90 a5       	ldd	r25, Z+40	; 0x28
   12c36:	00 97       	sbiw	r24, 0x00	; 0
   12c38:	b1 f4       	brne	.+44     	; 0x12c66 <set_active_device+0xcc>
   12c3a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c3e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c42:	c9 01       	movw	r24, r18
   12c44:	81 70       	andi	r24, 0x01	; 1
   12c46:	99 27       	eor	r25, r25
   12c48:	20 ff       	sbrs	r18, 0
   12c4a:	84 c0       	rjmp	.+264    	; 0x12d54 <set_active_device+0x1ba>
   12c4c:	c8 01       	movw	r24, r16
   12c4e:	5e df       	rcall	.-324    	; 0x12b0c <type_to_str>
   12c50:	ed b7       	in	r30, 0x3d	; 61
   12c52:	fe b7       	in	r31, 0x3e	; 62
   12c54:	91 87       	std	Z+9, r25	; 0x09
   12c56:	80 87       	std	Z+8, r24	; 0x08
   12c58:	17 83       	std	Z+7, r17	; 0x07
   12c5a:	06 83       	std	Z+6, r16	; 0x06
   12c5c:	d5 83       	std	Z+5, r29	; 0x05
   12c5e:	c4 83       	std	Z+4, r28	; 0x04
   12c60:	87 e4       	ldi	r24, 0x47	; 71
   12c62:	99 e1       	ldi	r25, 0x19	; 25
   12c64:	6f c0       	rjmp	.+222    	; 0x12d44 <set_active_device+0x1aa>
   12c66:	01 15       	cp	r16, r1
   12c68:	11 05       	cpc	r17, r1
   12c6a:	b9 f4       	brne	.+46     	; 0x12c9a <set_active_device+0x100>
   12c6c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c70:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c74:	c9 01       	movw	r24, r18
   12c76:	81 70       	andi	r24, 0x01	; 1
   12c78:	99 27       	eor	r25, r25
   12c7a:	20 ff       	sbrs	r18, 0
   12c7c:	6b c0       	rjmp	.+214    	; 0x12d54 <set_active_device+0x1ba>
   12c7e:	80 e0       	ldi	r24, 0x00	; 0
   12c80:	90 e0       	ldi	r25, 0x00	; 0
   12c82:	44 df       	rcall	.-376    	; 0x12b0c <type_to_str>
   12c84:	ed b7       	in	r30, 0x3d	; 61
   12c86:	fe b7       	in	r31, 0x3e	; 62
   12c88:	91 87       	std	Z+9, r25	; 0x09
   12c8a:	80 87       	std	Z+8, r24	; 0x08
   12c8c:	17 82       	std	Z+7, r1	; 0x07
   12c8e:	16 82       	std	Z+6, r1	; 0x06
   12c90:	d5 83       	std	Z+5, r29	; 0x05
   12c92:	c4 83       	std	Z+4, r28	; 0x04
   12c94:	82 e1       	ldi	r24, 0x12	; 18
   12c96:	99 e1       	ldi	r25, 0x19	; 25
   12c98:	55 c0       	rjmp	.+170    	; 0x12d44 <set_active_device+0x1aa>
   12c9a:	04 30       	cpi	r16, 0x04	; 4
   12c9c:	11 05       	cpc	r17, r1
   12c9e:	29 f4       	brne	.+10     	; 0x12caa <set_active_device+0x110>
   12ca0:	90 93 73 19 	sts	0x1973, r25	; 0x801973 <PRINTERp+0x1>
   12ca4:	80 93 72 19 	sts	0x1972, r24	; 0x801972 <PRINTERp>
   12ca8:	35 c0       	rjmp	.+106    	; 0x12d14 <set_active_device+0x17a>
   12caa:	2d 7f       	andi	r18, 0xFD	; 253
   12cac:	21 30       	cpi	r18, 0x01	; 1
   12cae:	a9 f5       	brne	.+106    	; 0x12d1a <set_active_device+0x180>
   12cb0:	21 a5       	ldd	r18, Z+41	; 0x29
   12cb2:	32 a5       	ldd	r19, Z+42	; 0x2a
   12cb4:	21 15       	cp	r18, r1
   12cb6:	31 05       	cpc	r19, r1
   12cb8:	b1 f4       	brne	.+44     	; 0x12ce6 <set_active_device+0x14c>
   12cba:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12cbe:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12cc2:	c9 01       	movw	r24, r18
   12cc4:	81 70       	andi	r24, 0x01	; 1
   12cc6:	99 27       	eor	r25, r25
   12cc8:	20 ff       	sbrs	r18, 0
   12cca:	44 c0       	rjmp	.+136    	; 0x12d54 <set_active_device+0x1ba>
   12ccc:	c8 01       	movw	r24, r16
   12cce:	1e df       	rcall	.-452    	; 0x12b0c <type_to_str>
   12cd0:	ed b7       	in	r30, 0x3d	; 61
   12cd2:	fe b7       	in	r31, 0x3e	; 62
   12cd4:	91 87       	std	Z+9, r25	; 0x09
   12cd6:	80 87       	std	Z+8, r24	; 0x08
   12cd8:	17 83       	std	Z+7, r17	; 0x07
   12cda:	06 83       	std	Z+6, r16	; 0x06
   12cdc:	d5 83       	std	Z+5, r29	; 0x05
   12cde:	c4 83       	std	Z+4, r28	; 0x04
   12ce0:	8a ed       	ldi	r24, 0xDA	; 218
   12ce2:	98 e1       	ldi	r25, 0x18	; 24
   12ce4:	2f c0       	rjmp	.+94     	; 0x12d44 <set_active_device+0x1aa>
   12ce6:	01 30       	cpi	r16, 0x01	; 1
   12ce8:	11 05       	cpc	r17, r1
   12cea:	49 f4       	brne	.+18     	; 0x12cfe <set_active_device+0x164>
   12cec:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <AMIGOp+0x1>
   12cf0:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <AMIGOp>
   12cf4:	30 93 6b 19 	sts	0x196B, r19	; 0x80196b <AMIGOs+0x1>
   12cf8:	20 93 6a 19 	sts	0x196A, r18	; 0x80196a <AMIGOs>
   12cfc:	0b c0       	rjmp	.+22     	; 0x12d14 <set_active_device+0x17a>
   12cfe:	03 30       	cpi	r16, 0x03	; 3
   12d00:	11 05       	cpc	r17, r1
   12d02:	59 f4       	brne	.+22     	; 0x12d1a <set_active_device+0x180>
   12d04:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <SS80p+0x1>
   12d08:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <SS80p>
   12d0c:	30 93 6f 19 	sts	0x196F, r19	; 0x80196f <SS80s+0x1>
   12d10:	20 93 6e 19 	sts	0x196E, r18	; 0x80196e <SS80s>
   12d14:	81 e0       	ldi	r24, 0x01	; 1
   12d16:	90 e0       	ldi	r25, 0x00	; 0
   12d18:	1d c0       	rjmp	.+58     	; 0x12d54 <set_active_device+0x1ba>
   12d1a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d1e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d22:	c9 01       	movw	r24, r18
   12d24:	81 70       	andi	r24, 0x01	; 1
   12d26:	99 27       	eor	r25, r25
   12d28:	20 ff       	sbrs	r18, 0
   12d2a:	14 c0       	rjmp	.+40     	; 0x12d54 <set_active_device+0x1ba>
   12d2c:	c8 01       	movw	r24, r16
   12d2e:	ee de       	rcall	.-548    	; 0x12b0c <type_to_str>
   12d30:	ed b7       	in	r30, 0x3d	; 61
   12d32:	fe b7       	in	r31, 0x3e	; 62
   12d34:	91 87       	std	Z+9, r25	; 0x09
   12d36:	80 87       	std	Z+8, r24	; 0x08
   12d38:	17 83       	std	Z+7, r17	; 0x07
   12d3a:	06 83       	std	Z+6, r16	; 0x06
   12d3c:	d5 83       	std	Z+5, r29	; 0x05
   12d3e:	c4 83       	std	Z+4, r28	; 0x04
   12d40:	8f ea       	ldi	r24, 0xAF	; 175
   12d42:	98 e1       	ldi	r25, 0x18	; 24
   12d44:	a0 e0       	ldi	r26, 0x00	; 0
   12d46:	81 83       	std	Z+1, r24	; 0x01
   12d48:	92 83       	std	Z+2, r25	; 0x02
   12d4a:	a3 83       	std	Z+3, r26	; 0x03
   12d4c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12d50:	80 e0       	ldi	r24, 0x00	; 0
   12d52:	90 e0       	ldi	r25, 0x00	; 0
   12d54:	cd b7       	in	r28, 0x3d	; 61
   12d56:	de b7       	in	r29, 0x3e	; 62
   12d58:	29 96       	adiw	r28, 0x09	; 9
   12d5a:	e4 e0       	ldi	r30, 0x04	; 4
   12d5c:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00012d60 <SS80_Set_Defaults>:
   12d60:	0f 93       	push	r16
   12d62:	1f 93       	push	r17
   12d64:	cf 93       	push	r28
   12d66:	df 93       	push	r29
   12d68:	ec 01       	movw	r28, r24
   12d6a:	82 e0       	ldi	r24, 0x02	; 2
   12d6c:	90 e0       	ldi	r25, 0x00	; 0
   12d6e:	ab de       	rcall	.-682    	; 0x12ac6 <find_type>
   12d70:	97 fd       	sbrc	r25, 7
   12d72:	6b c0       	rjmp	.+214    	; 0x12e4a <SS80_Set_Defaults+0xea>
   12d74:	2b e2       	ldi	r18, 0x2B	; 43
   12d76:	2c 9f       	mul	r18, r28
   12d78:	f0 01       	movw	r30, r0
   12d7a:	2d 9f       	mul	r18, r29
   12d7c:	f0 0d       	add	r31, r0
   12d7e:	11 24       	eor	r1, r1
   12d80:	e4 50       	subi	r30, 0x04	; 4
   12d82:	f1 4e       	sbci	r31, 0xE1	; 225
   12d84:	c7 a1       	ldd	r28, Z+39	; 0x27
   12d86:	d0 a5       	ldd	r29, Z+40	; 0x28
   12d88:	28 9f       	mul	r18, r24
   12d8a:	f0 01       	movw	r30, r0
   12d8c:	29 9f       	mul	r18, r25
   12d8e:	f0 0d       	add	r31, r0
   12d90:	11 24       	eor	r1, r1
   12d92:	e4 50       	subi	r30, 0x04	; 4
   12d94:	f1 4e       	sbci	r31, 0xE1	; 225
   12d96:	07 a1       	ldd	r16, Z+39	; 0x27
   12d98:	10 a5       	ldd	r17, Z+40	; 0x28
   12d9a:	f8 01       	movw	r30, r16
   12d9c:	80 81       	ld	r24, Z
   12d9e:	88 83       	st	Y, r24
   12da0:	81 81       	ldd	r24, Z+1	; 0x01
   12da2:	89 83       	std	Y+1, r24	; 0x01
   12da4:	82 81       	ldd	r24, Z+2	; 0x02
   12da6:	93 81       	ldd	r25, Z+3	; 0x03
   12da8:	0e 94 43 30 	call	0x6086	; 0x6086 <stralloc>
   12dac:	9b 83       	std	Y+3, r25	; 0x03
   12dae:	8a 83       	std	Y+2, r24	; 0x02
   12db0:	f8 01       	movw	r30, r16
   12db2:	84 81       	ldd	r24, Z+4	; 0x04
   12db4:	95 81       	ldd	r25, Z+5	; 0x05
   12db6:	9d 83       	std	Y+5, r25	; 0x05
   12db8:	8c 83       	std	Y+4, r24	; 0x04
   12dba:	86 81       	ldd	r24, Z+6	; 0x06
   12dbc:	97 81       	ldd	r25, Z+7	; 0x07
   12dbe:	9f 83       	std	Y+7, r25	; 0x07
   12dc0:	8e 83       	std	Y+6, r24	; 0x06
   12dc2:	80 85       	ldd	r24, Z+8	; 0x08
   12dc4:	91 85       	ldd	r25, Z+9	; 0x09
   12dc6:	99 87       	std	Y+9, r25	; 0x09
   12dc8:	88 87       	std	Y+8, r24	; 0x08
   12dca:	82 85       	ldd	r24, Z+10	; 0x0a
   12dcc:	8a 87       	std	Y+10, r24	; 0x0a
   12dce:	83 85       	ldd	r24, Z+11	; 0x0b
   12dd0:	8b 87       	std	Y+11, r24	; 0x0b
   12dd2:	84 85       	ldd	r24, Z+12	; 0x0c
   12dd4:	95 85       	ldd	r25, Z+13	; 0x0d
   12dd6:	a6 85       	ldd	r26, Z+14	; 0x0e
   12dd8:	b7 85       	ldd	r27, Z+15	; 0x0f
   12dda:	8c 87       	std	Y+12, r24	; 0x0c
   12ddc:	9d 87       	std	Y+13, r25	; 0x0d
   12dde:	ae 87       	std	Y+14, r26	; 0x0e
   12de0:	bf 87       	std	Y+15, r27	; 0x0f
   12de2:	80 89       	ldd	r24, Z+16	; 0x10
   12de4:	91 89       	ldd	r25, Z+17	; 0x11
   12de6:	99 8b       	std	Y+17, r25	; 0x11
   12de8:	88 8b       	std	Y+16, r24	; 0x10
   12dea:	82 89       	ldd	r24, Z+18	; 0x12
   12dec:	8a 8b       	std	Y+18, r24	; 0x12
   12dee:	83 89       	ldd	r24, Z+19	; 0x13
   12df0:	8b 8b       	std	Y+19, r24	; 0x13
   12df2:	84 89       	ldd	r24, Z+20	; 0x14
   12df4:	95 89       	ldd	r25, Z+21	; 0x15
   12df6:	9d 8b       	std	Y+21, r25	; 0x15
   12df8:	8c 8b       	std	Y+20, r24	; 0x14
   12dfa:	86 89       	ldd	r24, Z+22	; 0x16
   12dfc:	97 89       	ldd	r25, Z+23	; 0x17
   12dfe:	9f 8b       	std	Y+23, r25	; 0x17
   12e00:	8e 8b       	std	Y+22, r24	; 0x16
   12e02:	80 8d       	ldd	r24, Z+24	; 0x18
   12e04:	91 8d       	ldd	r25, Z+25	; 0x19
   12e06:	99 8f       	std	Y+25, r25	; 0x19
   12e08:	88 8f       	std	Y+24, r24	; 0x18
   12e0a:	82 8d       	ldd	r24, Z+26	; 0x1a
   12e0c:	93 8d       	ldd	r25, Z+27	; 0x1b
   12e0e:	9b 8f       	std	Y+27, r25	; 0x1b
   12e10:	8a 8f       	std	Y+26, r24	; 0x1a
   12e12:	84 8d       	ldd	r24, Z+28	; 0x1c
   12e14:	8c 8f       	std	Y+28, r24	; 0x1c
   12e16:	85 8d       	ldd	r24, Z+29	; 0x1d
   12e18:	8d 8f       	std	Y+29, r24	; 0x1d
   12e1a:	87 8d       	ldd	r24, Z+31	; 0x1f
   12e1c:	90 a1       	ldd	r25, Z+32	; 0x20
   12e1e:	a1 a1       	ldd	r26, Z+33	; 0x21
   12e20:	b2 a1       	ldd	r27, Z+34	; 0x22
   12e22:	8f 8f       	std	Y+31, r24	; 0x1f
   12e24:	98 a3       	std	Y+32, r25	; 0x20
   12e26:	a9 a3       	std	Y+33, r26	; 0x21
   12e28:	ba a3       	std	Y+34, r27	; 0x22
   12e2a:	83 a1       	ldd	r24, Z+35	; 0x23
   12e2c:	8b a3       	std	Y+35, r24	; 0x23
   12e2e:	84 a1       	ldd	r24, Z+36	; 0x24
   12e30:	95 a1       	ldd	r25, Z+37	; 0x25
   12e32:	9d a3       	std	Y+37, r25	; 0x25
   12e34:	8c a3       	std	Y+36, r24	; 0x24
   12e36:	86 a1       	ldd	r24, Z+38	; 0x26
   12e38:	97 a1       	ldd	r25, Z+39	; 0x27
   12e3a:	a0 a5       	ldd	r26, Z+40	; 0x28
   12e3c:	b1 a5       	ldd	r27, Z+41	; 0x29
   12e3e:	8e a3       	std	Y+38, r24	; 0x26
   12e40:	9f a3       	std	Y+39, r25	; 0x27
   12e42:	a8 a7       	std	Y+40, r26	; 0x28
   12e44:	b9 a7       	std	Y+41, r27	; 0x29
   12e46:	82 a5       	ldd	r24, Z+42	; 0x2a
   12e48:	8a a7       	std	Y+42, r24	; 0x2a
   12e4a:	df 91       	pop	r29
   12e4c:	cf 91       	pop	r28
   12e4e:	1f 91       	pop	r17
   12e50:	0f 91       	pop	r16
   12e52:	08 95       	ret

00012e54 <alloc_device>:
   12e54:	0f 93       	push	r16
   12e56:	1f 93       	push	r17
   12e58:	cf 93       	push	r28
   12e5a:	df 93       	push	r29
   12e5c:	ad b7       	in	r26, 0x3d	; 61
   12e5e:	be b7       	in	r27, 0x3e	; 62
   12e60:	17 97       	sbiw	r26, 0x07	; 7
   12e62:	0f b6       	in	r0, 0x3f	; 63
   12e64:	f8 94       	cli
   12e66:	be bf       	out	0x3e, r27	; 62
   12e68:	0f be       	out	0x3f, r0	; 63
   12e6a:	ad bf       	out	0x3d, r26	; 61
   12e6c:	8c 01       	movw	r16, r24
   12e6e:	67 de       	rcall	.-818    	; 0x12b3e <find_free>
   12e70:	ec 01       	movw	r28, r24
   12e72:	cf 3f       	cpi	r28, 0xFF	; 255
   12e74:	8f ef       	ldi	r24, 0xFF	; 255
   12e76:	d8 07       	cpc	r29, r24
   12e78:	89 f4       	brne	.+34     	; 0x12e9c <alloc_device+0x48>
   12e7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e7e:	80 ff       	sbrs	r24, 0
   12e80:	a1 c0       	rjmp	.+322    	; 0x12fc4 <alloc_device+0x170>
   12e82:	ed b7       	in	r30, 0x3d	; 61
   12e84:	fe b7       	in	r31, 0x3e	; 62
   12e86:	15 83       	std	Z+5, r17	; 0x05
   12e88:	04 83       	std	Z+4, r16	; 0x04
   12e8a:	8b e8       	ldi	r24, 0x8B	; 139
   12e8c:	98 e1       	ldi	r25, 0x18	; 24
   12e8e:	a0 e0       	ldi	r26, 0x00	; 0
   12e90:	81 83       	std	Z+1, r24	; 0x01
   12e92:	92 83       	std	Z+2, r25	; 0x02
   12e94:	a3 83       	std	Z+3, r26	; 0x03
   12e96:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12e9a:	94 c0       	rjmp	.+296    	; 0x12fc4 <alloc_device+0x170>
   12e9c:	02 30       	cpi	r16, 0x02	; 2
   12e9e:	11 05       	cpc	r17, r1
   12ea0:	e1 f1       	breq	.+120    	; 0x12f1a <alloc_device+0xc6>
   12ea2:	ec f4       	brge	.+58     	; 0x12ede <alloc_device+0x8a>
   12ea4:	01 30       	cpi	r16, 0x01	; 1
   12ea6:	11 05       	cpc	r17, r1
   12ea8:	09 f0       	breq	.+2      	; 0x12eac <alloc_device+0x58>
   12eaa:	76 c0       	rjmp	.+236    	; 0x12f98 <alloc_device+0x144>
   12eac:	8b e2       	ldi	r24, 0x2B	; 43
   12eae:	8c 9f       	mul	r24, r28
   12eb0:	80 01       	movw	r16, r0
   12eb2:	8d 9f       	mul	r24, r29
   12eb4:	10 0d       	add	r17, r0
   12eb6:	11 24       	eor	r1, r1
   12eb8:	04 50       	subi	r16, 0x04	; 4
   12eba:	11 4e       	sbci	r17, 0xE1	; 225
   12ebc:	81 e0       	ldi	r24, 0x01	; 1
   12ebe:	f8 01       	movw	r30, r16
   12ec0:	80 83       	st	Z, r24
   12ec2:	61 e0       	ldi	r22, 0x01	; 1
   12ec4:	70 e0       	ldi	r23, 0x00	; 0
   12ec6:	85 e1       	ldi	r24, 0x15	; 21
   12ec8:	90 e0       	ldi	r25, 0x00	; 0
   12eca:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   12ece:	f8 01       	movw	r30, r16
   12ed0:	90 a7       	std	Z+40, r25	; 0x28
   12ed2:	87 a3       	std	Z+39, r24	; 0x27
   12ed4:	61 e0       	ldi	r22, 0x01	; 1
   12ed6:	70 e0       	ldi	r23, 0x00	; 0
   12ed8:	88 e1       	ldi	r24, 0x18	; 24
   12eda:	90 e0       	ldi	r25, 0x00	; 0
   12edc:	57 c0       	rjmp	.+174    	; 0x12f8c <alloc_device+0x138>
   12ede:	03 30       	cpi	r16, 0x03	; 3
   12ee0:	11 05       	cpc	r17, r1
   12ee2:	a1 f1       	breq	.+104    	; 0x12f4c <alloc_device+0xf8>
   12ee4:	04 30       	cpi	r16, 0x04	; 4
   12ee6:	11 05       	cpc	r17, r1
   12ee8:	09 f0       	breq	.+2      	; 0x12eec <alloc_device+0x98>
   12eea:	56 c0       	rjmp	.+172    	; 0x12f98 <alloc_device+0x144>
   12eec:	8b e2       	ldi	r24, 0x2B	; 43
   12eee:	8c 9f       	mul	r24, r28
   12ef0:	80 01       	movw	r16, r0
   12ef2:	8d 9f       	mul	r24, r29
   12ef4:	10 0d       	add	r17, r0
   12ef6:	11 24       	eor	r1, r1
   12ef8:	04 50       	subi	r16, 0x04	; 4
   12efa:	11 4e       	sbci	r17, 0xE1	; 225
   12efc:	84 e0       	ldi	r24, 0x04	; 4
   12efe:	f8 01       	movw	r30, r16
   12f00:	80 83       	st	Z, r24
   12f02:	61 e0       	ldi	r22, 0x01	; 1
   12f04:	70 e0       	ldi	r23, 0x00	; 0
   12f06:	8b e0       	ldi	r24, 0x0B	; 11
   12f08:	90 e0       	ldi	r25, 0x00	; 0
   12f0a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   12f0e:	f8 01       	movw	r30, r16
   12f10:	90 a7       	std	Z+40, r25	; 0x28
   12f12:	87 a3       	std	Z+39, r24	; 0x27
   12f14:	12 a6       	std	Z+42, r1	; 0x2a
   12f16:	11 a6       	std	Z+41, r1	; 0x29
   12f18:	55 c0       	rjmp	.+170    	; 0x12fc4 <alloc_device+0x170>
   12f1a:	8b e2       	ldi	r24, 0x2B	; 43
   12f1c:	8c 9f       	mul	r24, r28
   12f1e:	80 01       	movw	r16, r0
   12f20:	8d 9f       	mul	r24, r29
   12f22:	10 0d       	add	r17, r0
   12f24:	11 24       	eor	r1, r1
   12f26:	04 50       	subi	r16, 0x04	; 4
   12f28:	11 4e       	sbci	r17, 0xE1	; 225
   12f2a:	82 e0       	ldi	r24, 0x02	; 2
   12f2c:	f8 01       	movw	r30, r16
   12f2e:	80 83       	st	Z, r24
   12f30:	61 e0       	ldi	r22, 0x01	; 1
   12f32:	70 e0       	ldi	r23, 0x00	; 0
   12f34:	82 e3       	ldi	r24, 0x32	; 50
   12f36:	90 e0       	ldi	r25, 0x00	; 0
   12f38:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   12f3c:	f8 01       	movw	r30, r16
   12f3e:	90 a7       	std	Z+40, r25	; 0x28
   12f40:	87 a3       	std	Z+39, r24	; 0x27
   12f42:	61 e0       	ldi	r22, 0x01	; 1
   12f44:	70 e0       	ldi	r23, 0x00	; 0
   12f46:	86 e1       	ldi	r24, 0x16	; 22
   12f48:	90 e0       	ldi	r25, 0x00	; 0
   12f4a:	20 c0       	rjmp	.+64     	; 0x12f8c <alloc_device+0x138>
   12f4c:	8b e2       	ldi	r24, 0x2B	; 43
   12f4e:	8c 9f       	mul	r24, r28
   12f50:	80 01       	movw	r16, r0
   12f52:	8d 9f       	mul	r24, r29
   12f54:	10 0d       	add	r17, r0
   12f56:	11 24       	eor	r1, r1
   12f58:	04 50       	subi	r16, 0x04	; 4
   12f5a:	11 4e       	sbci	r17, 0xE1	; 225
   12f5c:	83 e0       	ldi	r24, 0x03	; 3
   12f5e:	f8 01       	movw	r30, r16
   12f60:	80 83       	st	Z, r24
   12f62:	61 e0       	ldi	r22, 0x01	; 1
   12f64:	70 e0       	ldi	r23, 0x00	; 0
   12f66:	82 e3       	ldi	r24, 0x32	; 50
   12f68:	90 e0       	ldi	r25, 0x00	; 0
   12f6a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   12f6e:	f8 01       	movw	r30, r16
   12f70:	90 a7       	std	Z+40, r25	; 0x28
   12f72:	87 a3       	std	Z+39, r24	; 0x27
   12f74:	61 e0       	ldi	r22, 0x01	; 1
   12f76:	70 e0       	ldi	r23, 0x00	; 0
   12f78:	86 e1       	ldi	r24, 0x16	; 22
   12f7a:	90 e0       	ldi	r25, 0x00	; 0
   12f7c:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   12f80:	f8 01       	movw	r30, r16
   12f82:	92 a7       	std	Z+42, r25	; 0x2a
   12f84:	81 a7       	std	Z+41, r24	; 0x29
   12f86:	ce 01       	movw	r24, r28
   12f88:	eb de       	rcall	.-554    	; 0x12d60 <SS80_Set_Defaults>
   12f8a:	1c c0       	rjmp	.+56     	; 0x12fc4 <alloc_device+0x170>
   12f8c:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   12f90:	f8 01       	movw	r30, r16
   12f92:	92 a7       	std	Z+42, r25	; 0x2a
   12f94:	81 a7       	std	Z+41, r24	; 0x29
   12f96:	16 c0       	rjmp	.+44     	; 0x12fc4 <alloc_device+0x170>
   12f98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f9c:	80 ff       	sbrs	r24, 0
   12f9e:	10 c0       	rjmp	.+32     	; 0x12fc0 <alloc_device+0x16c>
   12fa0:	c8 01       	movw	r24, r16
   12fa2:	b4 dd       	rcall	.-1176   	; 0x12b0c <type_to_str>
   12fa4:	ed b7       	in	r30, 0x3d	; 61
   12fa6:	fe b7       	in	r31, 0x3e	; 62
   12fa8:	97 83       	std	Z+7, r25	; 0x07
   12faa:	86 83       	std	Z+6, r24	; 0x06
   12fac:	15 83       	std	Z+5, r17	; 0x05
   12fae:	04 83       	std	Z+4, r16	; 0x04
   12fb0:	89 e6       	ldi	r24, 0x69	; 105
   12fb2:	98 e1       	ldi	r25, 0x18	; 24
   12fb4:	a0 e0       	ldi	r26, 0x00	; 0
   12fb6:	81 83       	std	Z+1, r24	; 0x01
   12fb8:	92 83       	std	Z+2, r25	; 0x02
   12fba:	a3 83       	std	Z+3, r26	; 0x03
   12fbc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   12fc0:	cf ef       	ldi	r28, 0xFF	; 255
   12fc2:	df ef       	ldi	r29, 0xFF	; 255
   12fc4:	ce 01       	movw	r24, r28
   12fc6:	cd b7       	in	r28, 0x3d	; 61
   12fc8:	de b7       	in	r29, 0x3e	; 62
   12fca:	27 96       	adiw	r28, 0x07	; 7
   12fcc:	e4 e0       	ldi	r30, 0x04	; 4
   12fce:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00012fd2 <init_Devices>:
   12fd2:	cf 93       	push	r28
   12fd4:	df 93       	push	r29
   12fd6:	10 92 7f 19 	sts	0x197F, r1	; 0x80197f <stack_ind+0x1>
   12fda:	10 92 7e 19 	sts	0x197E, r1	; 0x80197e <stack_ind>
   12fde:	ec ef       	ldi	r30, 0xFC	; 252
   12fe0:	fe e1       	ldi	r31, 0x1E	; 30
   12fe2:	9f ef       	ldi	r25, 0xFF	; 255
   12fe4:	80 e2       	ldi	r24, 0x20	; 32
   12fe6:	10 82       	st	Z, r1
   12fe8:	11 82       	std	Z+1, r1	; 0x01
   12fea:	92 83       	std	Z+2, r25	; 0x02
   12fec:	13 82       	std	Z+3, r1	; 0x03
   12fee:	14 82       	std	Z+4, r1	; 0x04
   12ff0:	15 82       	std	Z+5, r1	; 0x05
   12ff2:	16 82       	std	Z+6, r1	; 0x06
   12ff4:	df 01       	movw	r26, r30
   12ff6:	17 96       	adiw	r26, 0x07	; 7
   12ff8:	ed 01       	movw	r28, r26
   12ffa:	28 2f       	mov	r18, r24
   12ffc:	19 92       	st	Y+, r1
   12ffe:	2a 95       	dec	r18
   13000:	e9 f7       	brne	.-6      	; 0x12ffc <init_Devices+0x2a>
   13002:	10 a6       	std	Z+40, r1	; 0x28
   13004:	17 a2       	std	Z+39, r1	; 0x27
   13006:	12 a6       	std	Z+42, r1	; 0x2a
   13008:	11 a6       	std	Z+41, r1	; 0x29
   1300a:	bb 96       	adiw	r30, 0x2b	; 43
   1300c:	c1 e2       	ldi	r28, 0x21	; 33
   1300e:	e0 30       	cpi	r30, 0x00	; 0
   13010:	fc 07       	cpc	r31, r28
   13012:	49 f7       	brne	.-46     	; 0x12fe6 <init_Devices+0x14>
   13014:	df 91       	pop	r29
   13016:	cf 91       	pop	r28
   13018:	08 95       	ret

0001301a <push_state>:
   1301a:	20 91 7e 19 	lds	r18, 0x197E	; 0x80197e <stack_ind>
   1301e:	30 91 7f 19 	lds	r19, 0x197F	; 0x80197f <stack_ind+0x1>
   13022:	25 30       	cpi	r18, 0x05	; 5
   13024:	31 05       	cpc	r19, r1
   13026:	7c f4       	brge	.+30     	; 0x13046 <push_state+0x2c>
   13028:	a9 01       	movw	r20, r18
   1302a:	4f 5f       	subi	r20, 0xFF	; 255
   1302c:	5f 4f       	sbci	r21, 0xFF	; 255
   1302e:	50 93 7f 19 	sts	0x197F, r21	; 0x80197f <stack_ind+0x1>
   13032:	40 93 7e 19 	sts	0x197E, r20	; 0x80197e <stack_ind>
   13036:	22 0f       	add	r18, r18
   13038:	33 1f       	adc	r19, r19
   1303a:	f9 01       	movw	r30, r18
   1303c:	ec 58       	subi	r30, 0x8C	; 140
   1303e:	f6 4e       	sbci	r31, 0xE6	; 230
   13040:	80 83       	st	Z, r24
   13042:	91 83       	std	Z+1, r25	; 0x01
   13044:	08 95       	ret
   13046:	80 e0       	ldi	r24, 0x00	; 0
   13048:	90 e0       	ldi	r25, 0x00	; 0
   1304a:	08 95       	ret

0001304c <pop_state>:
   1304c:	80 91 7e 19 	lds	r24, 0x197E	; 0x80197e <stack_ind>
   13050:	90 91 7f 19 	lds	r25, 0x197F	; 0x80197f <stack_ind+0x1>
   13054:	18 16       	cp	r1, r24
   13056:	19 06       	cpc	r1, r25
   13058:	6c f4       	brge	.+26     	; 0x13074 <pop_state+0x28>
   1305a:	01 97       	sbiw	r24, 0x01	; 1
   1305c:	90 93 7f 19 	sts	0x197F, r25	; 0x80197f <stack_ind+0x1>
   13060:	80 93 7e 19 	sts	0x197E, r24	; 0x80197e <stack_ind>
   13064:	88 0f       	add	r24, r24
   13066:	99 1f       	adc	r25, r25
   13068:	fc 01       	movw	r30, r24
   1306a:	ec 58       	subi	r30, 0x8C	; 140
   1306c:	f6 4e       	sbci	r31, 0xE6	; 230
   1306e:	80 81       	ld	r24, Z
   13070:	91 81       	ldd	r25, Z+1	; 0x01
   13072:	08 95       	ret
   13074:	80 e0       	ldi	r24, 0x00	; 0
   13076:	90 e0       	ldi	r25, 0x00	; 0
   13078:	08 95       	ret

0001307a <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   1307a:	08 95       	ret

0001307c <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   1307c:	0f 93       	push	r16
   1307e:	1f 93       	push	r17
   13080:	cf 93       	push	r28
   13082:	df 93       	push	r29
   13084:	00 d0       	rcall	.+0      	; 0x13086 <hpdir_set_device+0xa>
   13086:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   13088:	2b e2       	ldi	r18, 0x2B	; 43
   1308a:	ac 01       	movw	r20, r24
   1308c:	24 9f       	mul	r18, r20
   1308e:	c0 01       	movw	r24, r0
   13090:	25 9f       	mul	r18, r21
   13092:	90 0d       	add	r25, r0
   13094:	11 24       	eor	r1, r1
   13096:	ec 01       	movw	r28, r24
   13098:	c4 50       	subi	r28, 0x04	; 4
   1309a:	d1 4e       	sbci	r29, 0xE1	; 225
   1309c:	28 81       	ld	r18, Y
   1309e:	23 30       	cpi	r18, 0x03	; 3
   130a0:	a1 f5       	brne	.+104    	; 0x1310a <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   130a2:	ef a1       	ldd	r30, Y+39	; 0x27
   130a4:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   130a6:	20 91 80 21 	lds	r18, 0x2180	; 0x802180 <hpdir+0x80>
   130aa:	30 91 81 21 	lds	r19, 0x2181	; 0x802181 <hpdir+0x81>
   130ae:	35 83       	std	Z+5, r19	; 0x05
   130b0:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   130b2:	40 91 8c 21 	lds	r20, 0x218C	; 0x80218c <hpdir+0x8c>
   130b6:	50 91 8d 21 	lds	r21, 0x218D	; 0x80218d <hpdir+0x8d>
   130ba:	60 91 8e 21 	lds	r22, 0x218E	; 0x80218e <hpdir+0x8e>
   130be:	70 91 8f 21 	lds	r23, 0x218F	; 0x80218f <hpdir+0x8f>
   130c2:	44 87       	std	Z+12, r20	; 0x0c
   130c4:	55 87       	std	Z+13, r21	; 0x0d
   130c6:	66 87       	std	Z+14, r22	; 0x0e
   130c8:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   130ca:	20 91 a0 21 	lds	r18, 0x21A0	; 0x8021a0 <hpdir+0xa0>
   130ce:	30 91 a1 21 	lds	r19, 0x21A1	; 0x8021a1 <hpdir+0xa1>
   130d2:	31 8b       	std	Z+17, r19	; 0x11
   130d4:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   130d6:	17 8e       	std	Z+31, r1	; 0x1f
   130d8:	10 a2       	std	Z+32, r1	; 0x20
   130da:	11 a2       	std	Z+33, r1	; 0x21
   130dc:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   130de:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   130e0:	15 a2       	std	Z+37, r1	; 0x25
   130e2:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   130e4:	40 91 ac 21 	lds	r20, 0x21AC	; 0x8021ac <hpdir+0xac>
   130e8:	50 91 ad 21 	lds	r21, 0x21AD	; 0x8021ad <hpdir+0xad>
   130ec:	60 91 ae 21 	lds	r22, 0x21AE	; 0x8021ae <hpdir+0xae>
   130f0:	70 91 af 21 	lds	r23, 0x21AF	; 0x8021af <hpdir+0xaf>
   130f4:	8a 01       	movw	r16, r20
   130f6:	9b 01       	movw	r18, r22
   130f8:	01 50       	subi	r16, 0x01	; 1
   130fa:	11 09       	sbc	r17, r1
   130fc:	21 09       	sbc	r18, r1
   130fe:	31 09       	sbc	r19, r1
   13100:	06 a3       	std	Z+38, r16	; 0x26
   13102:	17 a3       	std	Z+39, r17	; 0x27
   13104:	20 a7       	std	Z+40, r18	; 0x28
   13106:	31 a7       	std	Z+41, r19	; 0x29
   13108:	2a c0       	rjmp	.+84     	; 0x1315e <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   1310a:	21 30       	cpi	r18, 0x01	; 1
   1310c:	a9 f5       	brne	.+106    	; 0x13178 <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1310e:	ef a1       	ldd	r30, Y+39	; 0x27
   13110:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   13112:	20 91 80 21 	lds	r18, 0x2180	; 0x802180 <hpdir+0x80>
   13116:	30 91 81 21 	lds	r19, 0x2181	; 0x802181 <hpdir+0x81>
   1311a:	35 83       	std	Z+5, r19	; 0x05
   1311c:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   1311e:	20 91 a0 21 	lds	r18, 0x21A0	; 0x8021a0 <hpdir+0xa0>
   13122:	30 91 a1 21 	lds	r19, 0x21A1	; 0x8021a1 <hpdir+0xa1>
   13126:	37 83       	std	Z+7, r19	; 0x07
   13128:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   1312a:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <hpdir+0x9c>
   1312e:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <hpdir+0x9d>
   13132:	31 87       	std	Z+9, r19	; 0x09
   13134:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   13136:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0x98>
   1313a:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0x99>
   1313e:	33 87       	std	Z+11, r19	; 0x0b
   13140:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   13142:	20 91 94 21 	lds	r18, 0x2194	; 0x802194 <hpdir+0x94>
   13146:	30 91 95 21 	lds	r19, 0x2195	; 0x802195 <hpdir+0x95>
   1314a:	35 87       	std	Z+13, r19	; 0x0d
   1314c:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   1314e:	40 91 ac 21 	lds	r20, 0x21AC	; 0x8021ac <hpdir+0xac>
   13152:	50 91 ad 21 	lds	r21, 0x21AD	; 0x8021ad <hpdir+0xad>
   13156:	60 91 ae 21 	lds	r22, 0x21AE	; 0x8021ae <hpdir+0xae>
   1315a:	70 91 af 21 	lds	r23, 0x21AF	; 0x8021af <hpdir+0xaf>
   1315e:	4b 83       	std	Y+3, r20	; 0x03
   13160:	5c 83       	std	Y+4, r21	; 0x04
   13162:	6d 83       	std	Y+5, r22	; 0x05
   13164:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   13166:	4e e1       	ldi	r20, 0x1E	; 30
   13168:	50 e0       	ldi	r21, 0x00	; 0
   1316a:	60 e0       	ldi	r22, 0x00	; 0
   1316c:	71 e2       	ldi	r23, 0x21	; 33
   1316e:	8d 5f       	subi	r24, 0xFD	; 253
   13170:	90 4e       	sbci	r25, 0xE0	; 224
   13172:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <strncpy>
   13176:	0a c0       	rjmp	.+20     	; 0x1318c <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   13178:	8a e4       	ldi	r24, 0x4A	; 74
   1317a:	98 e1       	ldi	r25, 0x18	; 24
   1317c:	a0 e0       	ldi	r26, 0x00	; 0
   1317e:	ed b7       	in	r30, 0x3d	; 61
   13180:	fe b7       	in	r31, 0x3e	; 62
   13182:	81 83       	std	Z+1, r24	; 0x01
   13184:	92 83       	std	Z+2, r25	; 0x02
   13186:	a3 83       	std	Z+3, r26	; 0x03
   13188:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

}
   1318c:	cd b7       	in	r28, 0x3d	; 61
   1318e:	de b7       	in	r29, 0x3e	; 62
   13190:	23 96       	adiw	r28, 0x03	; 3
   13192:	e4 e0       	ldi	r30, 0x04	; 4
   13194:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00013198 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   13198:	cf 93       	push	r28
   1319a:	df 93       	push	r29
   1319c:	ec 01       	movw	r28, r24
   1319e:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   131a0:	41 e0       	ldi	r20, 0x01	; 1
   131a2:	50 e0       	ldi	r21, 0x00	; 0
   131a4:	60 e0       	ldi	r22, 0x00	; 0
   131a6:	70 e0       	ldi	r23, 0x00	; 0
   131a8:	ad d7       	rcall	.+3930   	; 0x14104 <hpdir_find_drive>
   131aa:	89 2b       	or	r24, r25
   131ac:	11 f0       	breq	.+4      	; 0x131b2 <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   131ae:	ce 01       	movw	r24, r28
   131b0:	65 df       	rcall	.-310    	; 0x1307c <hpdir_set_device>
}
   131b2:	df 91       	pop	r29
   131b4:	cf 91       	pop	r28
   131b6:	08 95       	ret

000131b8 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   131b8:	4f 92       	push	r4
   131ba:	5f 92       	push	r5
   131bc:	6f 92       	push	r6
   131be:	7f 92       	push	r7
   131c0:	8f 92       	push	r8
   131c2:	af 92       	push	r10
   131c4:	bf 92       	push	r11
   131c6:	cf 92       	push	r12
   131c8:	df 92       	push	r13
   131ca:	ef 92       	push	r14
   131cc:	0f 93       	push	r16
   131ce:	1f 93       	push	r17
   131d0:	cf 93       	push	r28
   131d2:	df 93       	push	r29
   131d4:	00 d0       	rcall	.+0      	; 0x131d6 <Post_Config+0x1e>
   131d6:	00 d0       	rcall	.+0      	; 0x131d8 <Post_Config+0x20>
   131d8:	1f 92       	push	r1
   131da:	cc ef       	ldi	r28, 0xFC	; 252
   131dc:	de e1       	ldi	r29, 0x1E	; 30
   131de:	80 e0       	ldi	r24, 0x00	; 0
   131e0:	48 2e       	mov	r4, r24
   131e2:	81 e2       	ldi	r24, 0x21	; 33
   131e4:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   131e6:	a1 2c       	mov	r10, r1
   131e8:	bb 24       	eor	r11, r11
   131ea:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   131ec:	8d ed       	ldi	r24, 0xDD	; 221
   131ee:	97 e1       	ldi	r25, 0x17	; 23
   131f0:	6c 01       	movw	r12, r24
   131f2:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   131f4:	84 e1       	ldi	r24, 0x14	; 20
   131f6:	98 e1       	ldi	r25, 0x18	; 24
   131f8:	3c 01       	movw	r6, r24
   131fa:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   131fc:	88 81       	ld	r24, Y
   131fe:	88 23       	and	r24, r24
   13200:	09 f4       	brne	.+2      	; 0x13204 <Post_Config+0x4c>
   13202:	57 c0       	rjmp	.+174    	; 0x132b2 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13204:	83 30       	cpi	r24, 0x03	; 3
   13206:	f9 f4       	brne	.+62     	; 0x13246 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13208:	0f a1       	ldd	r16, Y+39	; 0x27
   1320a:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   1320c:	f8 01       	movw	r30, r16
   1320e:	80 89       	ldd	r24, Z+16	; 0x10
   13210:	91 89       	ldd	r25, Z+17	; 0x11
   13212:	81 15       	cp	r24, r1
   13214:	91 40       	sbci	r25, 0x01	; 1
   13216:	59 f0       	breq	.+22     	; 0x1322e <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13218:	ce 01       	movw	r24, r28
   1321a:	07 96       	adiw	r24, 0x07	; 7
   1321c:	ed b7       	in	r30, 0x3d	; 61
   1321e:	fe b7       	in	r31, 0x3e	; 62
   13220:	95 83       	std	Z+5, r25	; 0x05
   13222:	84 83       	std	Z+4, r24	; 0x04
   13224:	61 82       	std	Z+1, r6	; 0x01
   13226:	72 82       	std	Z+2, r7	; 0x02
   13228:	83 82       	std	Z+3, r8	; 0x03
   1322a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   1322e:	f8 01       	movw	r30, r16
   13230:	86 a1       	ldd	r24, Z+38	; 0x26
   13232:	97 a1       	ldd	r25, Z+39	; 0x27
   13234:	a0 a5       	ldd	r26, Z+40	; 0x28
   13236:	b1 a5       	ldd	r27, Z+41	; 0x29
   13238:	01 96       	adiw	r24, 0x01	; 1
   1323a:	a1 1d       	adc	r26, r1
   1323c:	b1 1d       	adc	r27, r1
   1323e:	8b 83       	std	Y+3, r24	; 0x03
   13240:	9c 83       	std	Y+4, r25	; 0x04
   13242:	ad 83       	std	Y+5, r26	; 0x05
   13244:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13246:	88 81       	ld	r24, Y
   13248:	81 30       	cpi	r24, 0x01	; 1
   1324a:	99 f5       	brne	.+102    	; 0x132b2 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   1324c:	0f a1       	ldd	r16, Y+39	; 0x27
   1324e:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13250:	f8 01       	movw	r30, r16
   13252:	86 81       	ldd	r24, Z+6	; 0x06
   13254:	97 81       	ldd	r25, Z+7	; 0x07
   13256:	81 15       	cp	r24, r1
   13258:	91 40       	sbci	r25, 0x01	; 1
   1325a:	71 f0       	breq	.+28     	; 0x13278 <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1325c:	f8 01       	movw	r30, r16
   1325e:	b7 82       	std	Z+7, r11	; 0x07
   13260:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13262:	ce 01       	movw	r24, r28
   13264:	07 96       	adiw	r24, 0x07	; 7
   13266:	ed b7       	in	r30, 0x3d	; 61
   13268:	fe b7       	in	r31, 0x3e	; 62
   1326a:	95 83       	std	Z+5, r25	; 0x05
   1326c:	84 83       	std	Z+4, r24	; 0x04
   1326e:	c1 82       	std	Z+1, r12	; 0x01
   13270:	d2 82       	std	Z+2, r13	; 0x02
   13272:	e3 82       	std	Z+3, r14	; 0x03
   13274:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   13278:	f8 01       	movw	r30, r16
   1327a:	20 85       	ldd	r18, Z+8	; 0x08
   1327c:	31 85       	ldd	r19, Z+9	; 0x09
   1327e:	82 85       	ldd	r24, Z+10	; 0x0a
   13280:	93 85       	ldd	r25, Z+11	; 0x0b
   13282:	28 9f       	mul	r18, r24
   13284:	a0 01       	movw	r20, r0
   13286:	29 9f       	mul	r18, r25
   13288:	50 0d       	add	r21, r0
   1328a:	38 9f       	mul	r19, r24
   1328c:	50 0d       	add	r21, r0
   1328e:	11 24       	eor	r1, r1
   13290:	24 85       	ldd	r18, Z+12	; 0x0c
   13292:	35 85       	ldd	r19, Z+13	; 0x0d
   13294:	42 9f       	mul	r20, r18
   13296:	c0 01       	movw	r24, r0
   13298:	43 9f       	mul	r20, r19
   1329a:	90 0d       	add	r25, r0
   1329c:	52 9f       	mul	r21, r18
   1329e:	90 0d       	add	r25, r0
   132a0:	11 24       	eor	r1, r1
   132a2:	09 2e       	mov	r0, r25
   132a4:	00 0c       	add	r0, r0
   132a6:	aa 0b       	sbc	r26, r26
   132a8:	bb 0b       	sbc	r27, r27
   132aa:	8b 83       	std	Y+3, r24	; 0x03
   132ac:	9c 83       	std	Y+4, r25	; 0x04
   132ae:	ad 83       	std	Y+5, r26	; 0x05
   132b0:	be 83       	std	Y+6, r27	; 0x06
   132b2:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   132b4:	4c 16       	cp	r4, r28
   132b6:	5d 06       	cpc	r5, r29
   132b8:	09 f0       	breq	.+2      	; 0x132bc <Post_Config+0x104>
   132ba:	a0 cf       	rjmp	.-192    	; 0x131fc <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   132bc:	0f 90       	pop	r0
   132be:	0f 90       	pop	r0
   132c0:	0f 90       	pop	r0
   132c2:	0f 90       	pop	r0
   132c4:	0f 90       	pop	r0
   132c6:	df 91       	pop	r29
   132c8:	cf 91       	pop	r28
   132ca:	1f 91       	pop	r17
   132cc:	0f 91       	pop	r16
   132ce:	ef 90       	pop	r14
   132d0:	df 90       	pop	r13
   132d2:	cf 90       	pop	r12
   132d4:	bf 90       	pop	r11
   132d6:	af 90       	pop	r10
   132d8:	8f 90       	pop	r8
   132da:	7f 90       	pop	r7
   132dc:	6f 90       	pop	r6
   132de:	5f 90       	pop	r5
   132e0:	4f 90       	pop	r4
   132e2:	08 95       	ret

000132e4 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   132e4:	af e1       	ldi	r26, 0x1F	; 31
   132e6:	b1 e0       	ldi	r27, 0x01	; 1
   132e8:	e8 e7       	ldi	r30, 0x78	; 120
   132ea:	f9 e9       	ldi	r31, 0x99	; 153
   132ec:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   132f0:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   132f2:	6f de       	rcall	.-802    	; 0x12fd2 <init_Devices>

    printf("Reading: %s\n", name);
   132f4:	ed b7       	in	r30, 0x3d	; 61
   132f6:	fe b7       	in	r31, 0x3e	; 62
   132f8:	15 83       	std	Z+5, r17	; 0x05
   132fa:	04 83       	std	Z+4, r16	; 0x04
   132fc:	80 ec       	ldi	r24, 0xC0	; 192
   132fe:	9d e1       	ldi	r25, 0x1D	; 29
   13300:	a0 e0       	ldi	r26, 0x00	; 0
   13302:	81 83       	std	Z+1, r24	; 0x01
   13304:	92 83       	std	Z+2, r25	; 0x02
   13306:	a3 83       	std	Z+3, r26	; 0x03
   13308:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    cfg = fopen(name, "rb");
   1330c:	6e ef       	ldi	r22, 0xFE	; 254
   1330e:	78 e0       	ldi	r23, 0x08	; 8
   13310:	c8 01       	movw	r24, r16
   13312:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <fopen>
   13316:	c4 5f       	subi	r28, 0xF4	; 244
   13318:	de 4f       	sbci	r29, 0xFE	; 254
   1331a:	99 83       	std	Y+1, r25	; 0x01
   1331c:	88 83       	st	Y, r24
   1331e:	cc 50       	subi	r28, 0x0C	; 12
   13320:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13322:	89 2b       	or	r24, r25
   13324:	09 f4       	brne	.+2      	; 0x13328 <Read_Config+0x44>
   13326:	59 c0       	rjmp	.+178    	; 0x133da <Read_Config+0xf6>
   13328:	41 2c       	mov	r4, r1
   1332a:	51 2c       	mov	r5, r1
   1332c:	c1 2c       	mov	r12, r1
   1332e:	d1 2c       	mov	r13, r1
   13330:	c8 5f       	subi	r28, 0xF8	; 248
   13332:	de 4f       	sbci	r29, 0xFE	; 254
   13334:	19 82       	std	Y+1, r1	; 0x01
   13336:	18 82       	st	Y, r1
   13338:	c8 50       	subi	r28, 0x08	; 8
   1333a:	d1 40       	sbci	r29, 0x01	; 1
   1333c:	61 2c       	mov	r6, r1
   1333e:	71 2c       	mov	r7, r1
   13340:	c6 5f       	subi	r28, 0xF6	; 246
   13342:	de 4f       	sbci	r29, 0xFE	; 254
   13344:	19 82       	std	Y+1, r1	; 0x01
   13346:	18 82       	st	Y, r1
   13348:	ca 50       	subi	r28, 0x0A	; 10
   1334a:	d1 40       	sbci	r29, 0x01	; 1
   1334c:	e1 2c       	mov	r14, r1
   1334e:	f1 2c       	mov	r15, r1
   13350:	21 2c       	mov	r2, r1
   13352:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13354:	8f e0       	ldi	r24, 0x0F	; 15
   13356:	9b e1       	ldi	r25, 0x1B	; 27
   13358:	9c 01       	movw	r18, r24
   1335a:	40 e0       	ldi	r20, 0x00	; 0
   1335c:	c2 5f       	subi	r28, 0xF2	; 242
   1335e:	de 4f       	sbci	r29, 0xFE	; 254
   13360:	28 83       	st	Y, r18
   13362:	39 83       	std	Y+1, r19	; 0x01
   13364:	4a 83       	std	Y+2, r20	; 0x02
   13366:	ce 50       	subi	r28, 0x0E	; 14
   13368:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   1336a:	81 e3       	ldi	r24, 0x31	; 49
   1336c:	9b e1       	ldi	r25, 0x1B	; 27
   1336e:	9c 01       	movw	r18, r24
   13370:	40 e0       	ldi	r20, 0x00	; 0
   13372:	cf 5e       	subi	r28, 0xEF	; 239
   13374:	de 4f       	sbci	r29, 0xFE	; 254
   13376:	28 83       	st	Y, r18
   13378:	39 83       	std	Y+1, r19	; 0x01
   1337a:	4a 83       	std	Y+2, r20	; 0x02
   1337c:	c1 51       	subi	r28, 0x11	; 17
   1337e:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13380:	81 e6       	ldi	r24, 0x61	; 97
   13382:	9b e1       	ldi	r25, 0x1B	; 27
   13384:	9c 01       	movw	r18, r24
   13386:	40 e0       	ldi	r20, 0x00	; 0
   13388:	cc 5e       	subi	r28, 0xEC	; 236
   1338a:	de 4f       	sbci	r29, 0xFE	; 254
   1338c:	28 83       	st	Y, r18
   1338e:	39 83       	std	Y+1, r19	; 0x01
   13390:	4a 83       	std	Y+2, r20	; 0x02
   13392:	c4 51       	subi	r28, 0x14	; 20
   13394:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13396:	80 e9       	ldi	r24, 0x90	; 144
   13398:	9b e1       	ldi	r25, 0x1B	; 27
   1339a:	9c 01       	movw	r18, r24
   1339c:	40 e0       	ldi	r20, 0x00	; 0
   1339e:	c9 5e       	subi	r28, 0xE9	; 233
   133a0:	de 4f       	sbci	r29, 0xFE	; 254
   133a2:	28 83       	st	Y, r18
   133a4:	39 83       	std	Y+1, r19	; 0x01
   133a6:	4a 83       	std	Y+2, r20	; 0x02
   133a8:	c7 51       	subi	r28, 0x17	; 23
   133aa:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   133ac:	80 ec       	ldi	r24, 0xC0	; 192
   133ae:	9b e1       	ldi	r25, 0x1B	; 27
   133b0:	9c 01       	movw	r18, r24
   133b2:	40 e0       	ldi	r20, 0x00	; 0
   133b4:	c6 5e       	subi	r28, 0xE6	; 230
   133b6:	de 4f       	sbci	r29, 0xFE	; 254
   133b8:	28 83       	st	Y, r18
   133ba:	39 83       	std	Y+1, r19	; 0x01
   133bc:	4a 83       	std	Y+2, r20	; 0x02
   133be:	ca 51       	subi	r28, 0x1A	; 26
   133c0:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   133c2:	8e ee       	ldi	r24, 0xEE	; 238
   133c4:	9b e1       	ldi	r25, 0x1B	; 27
   133c6:	9c 01       	movw	r18, r24
   133c8:	40 e0       	ldi	r20, 0x00	; 0
   133ca:	c3 5e       	subi	r28, 0xE3	; 227
   133cc:	de 4f       	sbci	r29, 0xFE	; 254
   133ce:	28 83       	st	Y, r18
   133d0:	39 83       	std	Y+1, r19	; 0x01
   133d2:	4a 83       	std	Y+2, r20	; 0x02
   133d4:	cd 51       	subi	r28, 0x1D	; 29
   133d6:	d1 40       	sbci	r29, 0x01	; 1
   133d8:	26 c0       	rjmp	.+76     	; 0x13426 <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   133da:	8d e5       	ldi	r24, 0x5D	; 93
   133dc:	9e e0       	ldi	r25, 0x0E	; 14
   133de:	0e 94 be 76 	call	0xed7c	; 0xed7c <perror>
        printf("Read_Config: open(%s) failed\n", name);
   133e2:	ed b7       	in	r30, 0x3d	; 61
   133e4:	fe b7       	in	r31, 0x3e	; 62
   133e6:	15 83       	std	Z+5, r17	; 0x05
   133e8:	04 83       	std	Z+4, r16	; 0x04
   133ea:	82 ea       	ldi	r24, 0xA2	; 162
   133ec:	9d e1       	ldi	r25, 0x1D	; 29
   133ee:	a0 e0       	ldi	r26, 0x00	; 0
   133f0:	81 83       	std	Z+1, r24	; 0x01
   133f2:	92 83       	std	Z+2, r25	; 0x02
   133f4:	a3 83       	std	Z+3, r26	; 0x03
   133f6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        set_Config_Defaults();
        return(errors);
   133fa:	81 e0       	ldi	r24, 0x01	; 1
   133fc:	90 e0       	ldi	r25, 0x00	; 0
   133fe:	95 c3       	rjmp	.+1834   	; 0x13b2a <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13400:	ff ef       	ldi	r31, 0xFF	; 255
   13402:	4f 1a       	sub	r4, r31
   13404:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13406:	4e e7       	ldi	r20, 0x7E	; 126
   13408:	50 e0       	ldi	r21, 0x00	; 0
   1340a:	9e 01       	movw	r18, r28
   1340c:	28 5f       	subi	r18, 0xF8	; 248
   1340e:	3f 4f       	sbci	r19, 0xFF	; 255
   13410:	49 01       	movw	r8, r18
   13412:	b9 01       	movw	r22, r18
   13414:	ce 01       	movw	r24, r28
   13416:	88 57       	subi	r24, 0x78	; 120
   13418:	9f 4f       	sbci	r25, 0xFF	; 255
   1341a:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   1341e:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13420:	88 85       	ldd	r24, Y+8	; 0x08
   13422:	81 11       	cpse	r24, r1
   13424:	10 c0       	rjmp	.+32     	; 0x13446 <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13426:	c4 5f       	subi	r28, 0xF4	; 244
   13428:	de 4f       	sbci	r29, 0xFE	; 254
   1342a:	48 81       	ld	r20, Y
   1342c:	59 81       	ldd	r21, Y+1	; 0x01
   1342e:	cc 50       	subi	r28, 0x0C	; 12
   13430:	d1 40       	sbci	r29, 0x01	; 1
   13432:	6e e7       	ldi	r22, 0x7E	; 126
   13434:	70 e0       	ldi	r23, 0x00	; 0
   13436:	ce 01       	movw	r24, r28
   13438:	88 57       	subi	r24, 0x78	; 120
   1343a:	9f 4f       	sbci	r25, 0xFF	; 255
   1343c:	0e 94 a5 74 	call	0xe94a	; 0xe94a <fgets>
   13440:	89 2b       	or	r24, r25
   13442:	f1 f6       	brne	.-68     	; 0x13400 <Read_Config+0x11c>
   13444:	32 c3       	rjmp	.+1636   	; 0x13aaa <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13446:	83 32       	cpi	r24, 0x23	; 35
   13448:	71 f3       	breq	.-36     	; 0x13426 <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   1344a:	c4 01       	movw	r24, r8
   1344c:	0e 94 26 91 	call	0x1224c	; 0x1224c <tok_index>
   13450:	8f 3f       	cpi	r24, 0xFF	; 255
   13452:	3f ef       	ldi	r19, 0xFF	; 255
   13454:	93 07       	cpc	r25, r19
   13456:	49 f4       	brne	.+18     	; 0x1346a <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13458:	ed b7       	in	r30, 0x3d	; 61
   1345a:	fe b7       	in	r31, 0x3e	; 62
   1345c:	57 82       	std	Z+7, r5	; 0x07
   1345e:	46 82       	std	Z+6, r4	; 0x06
   13460:	95 82       	std	Z+5, r9	; 0x05
   13462:	84 82       	std	Z+4, r8	; 0x04
   13464:	80 e8       	ldi	r24, 0x80	; 128
   13466:	9d e1       	ldi	r25, 0x1D	; 29
   13468:	c9 c0       	rjmp	.+402    	; 0x135fc <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   1346a:	88 0f       	add	r24, r24
   1346c:	99 1f       	adc	r25, r25
   1346e:	88 0f       	add	r24, r24
   13470:	99 1f       	adc	r25, r25
   13472:	fc 01       	movw	r30, r24
   13474:	ec 53       	subi	r30, 0x3C	; 60
   13476:	fe 4f       	sbci	r31, 0xFE	; 254
   13478:	02 81       	ldd	r16, Z+2	; 0x02
   1347a:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   1347c:	4e e7       	ldi	r20, 0x7E	; 126
   1347e:	50 e0       	ldi	r21, 0x00	; 0
   13480:	b4 01       	movw	r22, r8
   13482:	c5 01       	movw	r24, r10
   13484:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   13488:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   1348a:	60 e7       	ldi	r22, 0x70	; 112
   1348c:	7e e0       	ldi	r23, 0x0E	; 14
   1348e:	c4 01       	movw	r24, r8
   13490:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   13494:	89 2b       	or	r24, r25
   13496:	39 f0       	breq	.+14     	; 0x134a6 <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13498:	4e e7       	ldi	r20, 0x7E	; 126
   1349a:	50 e0       	ldi	r21, 0x00	; 0
   1349c:	b4 01       	movw	r22, r8
   1349e:	c5 01       	movw	r24, r10
   134a0:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   134a4:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   134a6:	c4 01       	movw	r24, r8
   134a8:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   134ac:	01 31       	cpi	r16, 0x11	; 17
   134ae:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   134b0:	19 f4       	brne	.+6      	; 0x134b8 <Read_Config+0x1d4>
   134b2:	cc dd       	rcall	.-1128   	; 0x1304c <pop_state>
   134b4:	1c 01       	movw	r2, r24
            continue;
   134b6:	b7 cf       	rjmp	.-146    	; 0x13426 <Read_Config+0x142>
        }

        switch(state)
   134b8:	30 e1       	ldi	r19, 0x10	; 16
   134ba:	23 16       	cp	r2, r19
   134bc:	31 04       	cpc	r3, r1
   134be:	08 f0       	brcs	.+2      	; 0x134c2 <Read_Config+0x1de>
   134c0:	de c2       	rjmp	.+1468   	; 0x13a7e <Read_Config+0x79a>
   134c2:	f1 01       	movw	r30, r2
   134c4:	ea 53       	subi	r30, 0x3A	; 58
   134c6:	ff 4f       	sbci	r31, 0xFF	; 255
   134c8:	0c 94 bd e2 	jmp	0x1c57a	; 0x1c57a <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   134cc:	0e 30       	cpi	r16, 0x0E	; 14
   134ce:	11 05       	cpc	r17, r1
   134d0:	09 f4       	brne	.+2      	; 0x134d4 <Read_Config+0x1f0>
   134d2:	87 c0       	rjmp	.+270    	; 0x135e2 <Read_Config+0x2fe>
   134d4:	44 f4       	brge	.+16     	; 0x134e6 <Read_Config+0x202>
   134d6:	02 30       	cpi	r16, 0x02	; 2
   134d8:	11 05       	cpc	r17, r1
   134da:	09 f4       	brne	.+2      	; 0x134de <Read_Config+0x1fa>
   134dc:	41 c0       	rjmp	.+130    	; 0x13560 <Read_Config+0x27c>
   134de:	0c 30       	cpi	r16, 0x0C	; 12
   134e0:	11 05       	cpc	r17, r1
   134e2:	09 f1       	breq	.+66     	; 0x13526 <Read_Config+0x242>
   134e4:	83 c0       	rjmp	.+262    	; 0x135ec <Read_Config+0x308>
   134e6:	03 32       	cpi	r16, 0x23	; 35
   134e8:	11 05       	cpc	r17, r1
   134ea:	e9 f0       	breq	.+58     	; 0x13526 <Read_Config+0x242>
   134ec:	04 32       	cpi	r16, 0x24	; 36
   134ee:	11 05       	cpc	r17, r1
   134f0:	29 f0       	breq	.+10     	; 0x134fc <Read_Config+0x218>
   134f2:	00 32       	cpi	r16, 0x20	; 32
   134f4:	11 05       	cpc	r17, r1
   134f6:	09 f0       	breq	.+2      	; 0x134fa <Read_Config+0x216>
   134f8:	79 c0       	rjmp	.+242    	; 0x135ec <Read_Config+0x308>
   134fa:	55 c0       	rjmp	.+170    	; 0x135a6 <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   134fc:	80 e0       	ldi	r24, 0x00	; 0
   134fe:	90 e0       	ldi	r25, 0x00	; 0
   13500:	8c dd       	rcall	.-1256   	; 0x1301a <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13502:	82 e0       	ldi	r24, 0x02	; 2
   13504:	90 e0       	ldi	r25, 0x00	; 0
   13506:	a6 dc       	rcall	.-1716   	; 0x12e54 <alloc_device>
   13508:	6c 01       	movw	r12, r24
   1350a:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   1350c:	09 f4       	brne	.+2      	; 0x13510 <Read_Config+0x22c>
   1350e:	8b cf       	rjmp	.-234    	; 0x13426 <Read_Config+0x142>
   13510:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13512:	8c 9d       	mul	r24, r12
   13514:	f0 01       	movw	r30, r0
   13516:	8d 9d       	mul	r24, r13
   13518:	f0 0d       	add	r31, r0
   1351a:	11 24       	eor	r1, r1
   1351c:	e4 50       	subi	r30, 0x04	; 4
   1351e:	f1 4e       	sbci	r31, 0xE1	; 225
   13520:	67 a0       	ldd	r6, Z+39	; 0x27
   13522:	70 a4       	ldd	r7, Z+40	; 0x28
   13524:	19 c0       	rjmp	.+50     	; 0x13558 <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13526:	80 e0       	ldi	r24, 0x00	; 0
   13528:	90 e0       	ldi	r25, 0x00	; 0
   1352a:	77 dd       	rcall	.-1298   	; 0x1301a <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   1352c:	83 e0       	ldi	r24, 0x03	; 3
   1352e:	90 e0       	ldi	r25, 0x00	; 0
   13530:	91 dc       	rcall	.-1758   	; 0x12e54 <alloc_device>
   13532:	6c 01       	movw	r12, r24
   13534:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   13536:	c8 16       	cp	r12, r24
   13538:	d8 06       	cpc	r13, r24
   1353a:	09 f4       	brne	.+2      	; 0x1353e <Read_Config+0x25a>
   1353c:	74 cf       	rjmp	.-280    	; 0x13426 <Read_Config+0x142>
   1353e:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13540:	8c 9d       	mul	r24, r12
   13542:	f0 01       	movw	r30, r0
   13544:	8d 9d       	mul	r24, r13
   13546:	f0 0d       	add	r31, r0
   13548:	11 24       	eor	r1, r1
   1354a:	e4 50       	subi	r30, 0x04	; 4
   1354c:	f1 4e       	sbci	r31, 0xE1	; 225
   1354e:	67 a0       	ldd	r6, Z+39	; 0x27
   13550:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   13552:	b4 01       	movw	r22, r8
   13554:	c6 01       	movw	r24, r12
   13556:	20 de       	rcall	.-960    	; 0x13198 <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13558:	22 24       	eor	r2, r2
   1355a:	23 94       	inc	r2
   1355c:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   1355e:	63 cf       	rjmp	.-314    	; 0x13426 <Read_Config+0x142>
   13560:	80 e0       	ldi	r24, 0x00	; 0
   13562:	90 e0       	ldi	r25, 0x00	; 0
   13564:	5a dd       	rcall	.-1356   	; 0x1301a <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13566:	81 e0       	ldi	r24, 0x01	; 1
   13568:	90 e0       	ldi	r25, 0x00	; 0
   1356a:	74 dc       	rcall	.-1816   	; 0x12e54 <alloc_device>
   1356c:	6c 01       	movw	r12, r24
   1356e:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   13570:	c9 16       	cp	r12, r25
   13572:	d9 06       	cpc	r13, r25
   13574:	09 f4       	brne	.+2      	; 0x13578 <Read_Config+0x294>
   13576:	57 cf       	rjmp	.-338    	; 0x13426 <Read_Config+0x142>
   13578:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1357a:	8c 9d       	mul	r24, r12
   1357c:	f0 01       	movw	r30, r0
   1357e:	8d 9d       	mul	r24, r13
   13580:	f0 0d       	add	r31, r0
   13582:	11 24       	eor	r1, r1
   13584:	e4 50       	subi	r30, 0x04	; 4
   13586:	f1 4e       	sbci	r31, 0xE1	; 225
   13588:	a7 a1       	ldd	r26, Z+39	; 0x27
   1358a:	b0 a5       	ldd	r27, Z+40	; 0x28
   1358c:	c8 5f       	subi	r28, 0xF8	; 248
   1358e:	de 4f       	sbci	r29, 0xFE	; 254
   13590:	b9 83       	std	Y+1, r27	; 0x01
   13592:	a8 83       	st	Y, r26
   13594:	c8 50       	subi	r28, 0x08	; 8
   13596:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13598:	b4 01       	movw	r22, r8
   1359a:	c6 01       	movw	r24, r12
   1359c:	fd dd       	rcall	.-1030   	; 0x13198 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   1359e:	aa e0       	ldi	r26, 0x0A	; 10
   135a0:	2a 2e       	mov	r2, r26
   135a2:	31 2c       	mov	r3, r1
   135a4:	40 cf       	rjmp	.-384    	; 0x13426 <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   135a6:	80 e0       	ldi	r24, 0x00	; 0
   135a8:	90 e0       	ldi	r25, 0x00	; 0
   135aa:	37 dd       	rcall	.-1426   	; 0x1301a <push_state>
   135ac:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   135ae:	90 e0       	ldi	r25, 0x00	; 0
   135b0:	51 dc       	rcall	.-1886   	; 0x12e54 <alloc_device>
   135b2:	6c 01       	movw	r12, r24
   135b4:	01 96       	adiw	r24, 0x01	; 1
   135b6:	09 f4       	brne	.+2      	; 0x135ba <Read_Config+0x2d6>
                        if(index == -1)
   135b8:	36 cf       	rjmp	.-404    	; 0x13426 <Read_Config+0x142>
   135ba:	8b e2       	ldi	r24, 0x2B	; 43
   135bc:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   135be:	f0 01       	movw	r30, r0
   135c0:	8d 9d       	mul	r24, r13
   135c2:	f0 0d       	add	r31, r0
   135c4:	11 24       	eor	r1, r1
   135c6:	e4 50       	subi	r30, 0x04	; 4
   135c8:	f1 4e       	sbci	r31, 0xE1	; 225
   135ca:	27 a1       	ldd	r18, Z+39	; 0x27
   135cc:	30 a5       	ldd	r19, Z+40	; 0x28
   135ce:	c6 5f       	subi	r28, 0xF6	; 246
   135d0:	de 4f       	sbci	r29, 0xFE	; 254
   135d2:	39 83       	std	Y+1, r19	; 0x01
   135d4:	28 83       	st	Y, r18
   135d6:	ca 50       	subi	r28, 0x0A	; 10
   135d8:	d1 40       	sbci	r29, 0x01	; 1
   135da:	fe e0       	ldi	r31, 0x0E	; 14
   135dc:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   135de:	31 2c       	mov	r3, r1
   135e0:	22 cf       	rjmp	.-444    	; 0x13426 <Read_Config+0x142>
   135e2:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   135e6:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   135ea:	1d cf       	rjmp	.-454    	; 0x13426 <Read_Config+0x142>
   135ec:	ed b7       	in	r30, 0x3d	; 61
                        break;
   135ee:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   135f0:	57 82       	std	Z+7, r5	; 0x07
   135f2:	46 82       	std	Z+6, r4	; 0x06
   135f4:	b5 82       	std	Z+5, r11	; 0x05
   135f6:	a4 82       	std	Z+4, r10	; 0x04
   135f8:	8e e5       	ldi	r24, 0x5E	; 94
   135fa:	9d e1       	ldi	r25, 0x1D	; 29
   135fc:	a0 e0       	ldi	r26, 0x00	; 0
   135fe:	81 83       	std	Z+1, r24	; 0x01
   13600:	92 83       	std	Z+2, r25	; 0x02
   13602:	a3 83       	std	Z+3, r26	; 0x03
   13604:	4c c2       	rjmp	.+1176   	; 0x13a9e <Read_Config+0x7ba>
   13606:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13608:	11 05       	cpc	r17, r1
   1360a:	39 f4       	brne	.+14     	; 0x1361a <Read_Config+0x336>
   1360c:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   1360e:	90 e0       	ldi	r25, 0x00	; 0
   13610:	04 dd       	rcall	.-1528   	; 0x1301a <push_state>
   13612:	ef e0       	ldi	r30, 0x0F	; 15
   13614:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   13616:	31 2c       	mov	r3, r1
   13618:	06 cf       	rjmp	.-500    	; 0x13426 <Read_Config+0x142>
   1361a:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   1361c:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1361e:	57 82       	std	Z+7, r5	; 0x07
   13620:	46 82       	std	Z+6, r4	; 0x06
   13622:	b5 82       	std	Z+5, r11	; 0x05
   13624:	a4 82       	std	Z+4, r10	; 0x04
   13626:	84 e3       	ldi	r24, 0x34	; 52
   13628:	9d e1       	ldi	r25, 0x1D	; 29
   1362a:	e8 cf       	rjmp	.-48     	; 0x135fc <Read_Config+0x318>
   1362c:	01 30       	cpi	r16, 0x01	; 1
   1362e:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13630:	b1 f4       	brne	.+44     	; 0x1365e <Read_Config+0x37a>
   13632:	6f 71       	andi	r22, 0x1F	; 31
   13634:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   13636:	8c 9d       	mul	r24, r12
   13638:	f0 01       	movw	r30, r0
   1363a:	8d 9d       	mul	r24, r13
   1363c:	f0 0d       	add	r31, r0
   1363e:	11 24       	eor	r1, r1
   13640:	e4 50       	subi	r30, 0x04	; 4
   13642:	f1 4e       	sbci	r31, 0xE1	; 225
   13644:	61 83       	std	Z+1, r22	; 0x01
   13646:	c6 5f       	subi	r28, 0xF6	; 246
   13648:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   1364a:	a8 81       	ld	r26, Y
   1364c:	b9 81       	ldd	r27, Y+1	; 0x01
   1364e:	ca 50       	subi	r28, 0x0A	; 10
   13650:	d1 40       	sbci	r29, 0x01	; 1
   13652:	6c 93       	st	X, r22
   13654:	8f ef       	ldi	r24, 0xFF	; 255
   13656:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13658:	fd 01       	movw	r30, r26
   1365a:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   1365c:	e4 ce       	rjmp	.-568    	; 0x13426 <Read_Config+0x142>
   1365e:	ed b7       	in	r30, 0x3d	; 61
   13660:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13662:	57 82       	std	Z+7, r5	; 0x07
   13664:	46 82       	std	Z+6, r4	; 0x06
   13666:	b5 82       	std	Z+5, r11	; 0x05
   13668:	a4 82       	std	Z+4, r10	; 0x04
   1366a:	83 e0       	ldi	r24, 0x03	; 3
   1366c:	9d e1       	ldi	r25, 0x1D	; 29
   1366e:	c6 cf       	rjmp	.-116    	; 0x135fc <Read_Config+0x318>
   13670:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13672:	11 05       	cpc	r17, r1
   13674:	d9 f0       	breq	.+54     	; 0x136ac <Read_Config+0x3c8>
   13676:	6c f4       	brge	.+26     	; 0x13692 <Read_Config+0x3ae>
   13678:	09 30       	cpi	r16, 0x09	; 9
   1367a:	11 05       	cpc	r17, r1
   1367c:	f1 f0       	breq	.+60     	; 0x136ba <Read_Config+0x3d6>
   1367e:	0b 30       	cpi	r16, 0x0B	; 11
   13680:	11 05       	cpc	r17, r1
   13682:	49 f5       	brne	.+82     	; 0x136d6 <Read_Config+0x3f2>
   13684:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13686:	90 e0       	ldi	r25, 0x00	; 0
   13688:	c8 dc       	rcall	.-1648   	; 0x1301a <push_state>
   1368a:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   1368c:	25 2e       	mov	r2, r21
   1368e:	31 2c       	mov	r3, r1
   13690:	ca ce       	rjmp	.-620    	; 0x13426 <Read_Config+0x142>
                        break;
   13692:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13694:	11 05       	cpc	r17, r1
   13696:	c1 f0       	breq	.+48     	; 0x136c8 <Read_Config+0x3e4>
   13698:	0a 32       	cpi	r16, 0x2A	; 42
   1369a:	11 05       	cpc	r17, r1
   1369c:	e1 f4       	brne	.+56     	; 0x136d6 <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   1369e:	81 e0       	ldi	r24, 0x01	; 1
   136a0:	90 e0       	ldi	r25, 0x00	; 0
   136a2:	bb dc       	rcall	.-1674   	; 0x1301a <push_state>
                        state = SS80_VOLUME;
   136a4:	36 e0       	ldi	r19, 0x06	; 6
   136a6:	23 2e       	mov	r2, r19
   136a8:	31 2c       	mov	r3, r1
                        break;
   136aa:	bd ce       	rjmp	.-646    	; 0x13426 <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   136ac:	81 e0       	ldi	r24, 0x01	; 1
   136ae:	90 e0       	ldi	r25, 0x00	; 0
   136b0:	b4 dc       	rcall	.-1688   	; 0x1301a <push_state>
                        state = SS80_HEADER;
   136b2:	72 e0       	ldi	r23, 0x02	; 2
   136b4:	27 2e       	mov	r2, r23
   136b6:	31 2c       	mov	r3, r1
                        break;
   136b8:	b6 ce       	rjmp	.-660    	; 0x13426 <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   136ba:	81 e0       	ldi	r24, 0x01	; 1
   136bc:	90 e0       	ldi	r25, 0x00	; 0
   136be:	ad dc       	rcall	.-1702   	; 0x1301a <push_state>
   136c0:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   136c2:	26 2e       	mov	r2, r22
   136c4:	31 2c       	mov	r3, r1
   136c6:	af ce       	rjmp	.-674    	; 0x13426 <Read_Config+0x142>
                        break;
   136c8:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   136ca:	90 e0       	ldi	r25, 0x00	; 0
   136cc:	a6 dc       	rcall	.-1716   	; 0x1301a <push_state>
   136ce:	45 e0       	ldi	r20, 0x05	; 5
   136d0:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   136d2:	31 2c       	mov	r3, r1
   136d4:	a8 ce       	rjmp	.-688    	; 0x13426 <Read_Config+0x142>
   136d6:	ed b7       	in	r30, 0x3d	; 61
                        break;
   136d8:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   136da:	57 82       	std	Z+7, r5	; 0x07
   136dc:	46 82       	std	Z+6, r4	; 0x06
   136de:	b5 82       	std	Z+5, r11	; 0x05
   136e0:	a4 82       	std	Z+4, r10	; 0x04
   136e2:	86 ed       	ldi	r24, 0xD6	; 214
   136e4:	9c e1       	ldi	r25, 0x1C	; 28
   136e6:	8a cf       	rjmp	.-236    	; 0x135fc <Read_Config+0x318>
   136e8:	02 31       	cpi	r16, 0x12	; 18
   136ea:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   136ec:	f1 f0       	breq	.+60     	; 0x1372a <Read_Config+0x446>
   136ee:	0f 31       	cpi	r16, 0x1F	; 31
   136f0:	11 05       	cpc	r17, r1
   136f2:	79 f0       	breq	.+30     	; 0x13712 <Read_Config+0x42e>
   136f4:	01 30       	cpi	r16, 0x01	; 1
   136f6:	11 05       	cpc	r17, r1
   136f8:	e9 f4       	brne	.+58     	; 0x13734 <Read_Config+0x450>
   136fa:	6f 71       	andi	r22, 0x1F	; 31
   136fc:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   136fe:	8c 9d       	mul	r24, r12
   13700:	f0 01       	movw	r30, r0
   13702:	8d 9d       	mul	r24, r13
   13704:	f0 0d       	add	r31, r0
   13706:	11 24       	eor	r1, r1
   13708:	e4 50       	subi	r30, 0x04	; 4
   1370a:	f1 4e       	sbci	r31, 0xE1	; 225
   1370c:	61 83       	std	Z+1, r22	; 0x01
   1370e:	d3 01       	movw	r26, r6
   13710:	37 c1       	rjmp	.+622    	; 0x13980 <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   13712:	67 70       	andi	r22, 0x07	; 7
   13714:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13716:	8c 9d       	mul	r24, r12
   13718:	f0 01       	movw	r30, r0
   1371a:	8d 9d       	mul	r24, r13
   1371c:	f0 0d       	add	r31, r0
   1371e:	11 24       	eor	r1, r1
   13720:	e4 50       	subi	r30, 0x04	; 4
   13722:	f1 4e       	sbci	r31, 0xE1	; 225
   13724:	62 83       	std	Z+2, r22	; 0x02
   13726:	f3 01       	movw	r30, r6
   13728:	2d c1       	rjmp	.+602    	; 0x13984 <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   1372a:	c4 01       	movw	r24, r8
   1372c:	0e 94 43 30 	call	0x6086	; 0x6086 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   13730:	f3 01       	movw	r30, r6
   13732:	33 c1       	rjmp	.+614    	; 0x1399a <Read_Config+0x6b6>
   13734:	ed b7       	in	r30, 0x3d	; 61
   13736:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13738:	57 82       	std	Z+7, r5	; 0x07
   1373a:	46 82       	std	Z+6, r4	; 0x06
   1373c:	b5 82       	std	Z+5, r11	; 0x05
   1373e:	a4 82       	std	Z+4, r10	; 0x04
   13740:	88 ea       	ldi	r24, 0xA8	; 168
   13742:	9c e1       	ldi	r25, 0x1C	; 28
   13744:	5b cf       	rjmp	.-330    	; 0x135fc <Read_Config+0x318>
   13746:	07 31       	cpi	r16, 0x17	; 23
   13748:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   1374a:	21 f4       	brne	.+8      	; 0x13754 <Read_Config+0x470>
   1374c:	96 2f       	mov	r25, r22
   1374e:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   13750:	f3 01       	movw	r30, r6
   13752:	3f c1       	rjmp	.+638    	; 0x139d2 <Read_Config+0x6ee>
   13754:	ed b7       	in	r30, 0x3d	; 61
   13756:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13758:	57 82       	std	Z+7, r5	; 0x07
   1375a:	46 82       	std	Z+6, r4	; 0x06
   1375c:	b5 82       	std	Z+5, r11	; 0x05
   1375e:	a4 82       	std	Z+4, r10	; 0x04
   13760:	8a e7       	ldi	r24, 0x7A	; 122
   13762:	9c e1       	ldi	r25, 0x1C	; 28
   13764:	4b cf       	rjmp	.-362    	; 0x135fc <Read_Config+0x318>
   13766:	06 32       	cpi	r16, 0x26	; 38
   13768:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   1376a:	71 f0       	breq	.+28     	; 0x13788 <Read_Config+0x4a4>
   1376c:	08 32       	cpi	r16, 0x28	; 40
   1376e:	11 05       	cpc	r17, r1
   13770:	39 f0       	breq	.+14     	; 0x13780 <Read_Config+0x49c>
   13772:	05 32       	cpi	r16, 0x25	; 37
   13774:	11 05       	cpc	r17, r1
   13776:	59 f4       	brne	.+22     	; 0x1378e <Read_Config+0x4aa>
   13778:	96 2f       	mov	r25, r22
   1377a:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   1377c:	f3 01       	movw	r30, r6
   1377e:	5c c1       	rjmp	.+696    	; 0x13a38 <Read_Config+0x754>
   13780:	96 2f       	mov	r25, r22
   13782:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13784:	f3 01       	movw	r30, r6
   13786:	55 c1       	rjmp	.+682    	; 0x13a32 <Read_Config+0x74e>
   13788:	f3 01       	movw	r30, r6
   1378a:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   1378c:	4c ce       	rjmp	.-872    	; 0x13426 <Read_Config+0x142>
   1378e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13790:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13792:	57 82       	std	Z+7, r5	; 0x07
   13794:	46 82       	std	Z+6, r4	; 0x06
   13796:	b5 82       	std	Z+5, r11	; 0x05
   13798:	a4 82       	std	Z+4, r10	; 0x04
   1379a:	88 e4       	ldi	r24, 0x48	; 72
   1379c:	9c e1       	ldi	r25, 0x1C	; 28
   1379e:	2e cf       	rjmp	.-420    	; 0x135fc <Read_Config+0x318>
   137a0:	0a 30       	cpi	r16, 0x0A	; 10
   137a2:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137a4:	09 f4       	brne	.+2      	; 0x137a8 <Read_Config+0x4c4>
   137a6:	45 c0       	rjmp	.+138    	; 0x13832 <Read_Config+0x54e>
   137a8:	d4 f4       	brge	.+52     	; 0x137de <Read_Config+0x4fa>
   137aa:	05 30       	cpi	r16, 0x05	; 5
   137ac:	11 05       	cpc	r17, r1
   137ae:	d1 f1       	breq	.+116    	; 0x13824 <Read_Config+0x540>
   137b0:	64 f4       	brge	.+24     	; 0x137ca <Read_Config+0x4e6>
   137b2:	01 15       	cp	r16, r1
   137b4:	11 05       	cpc	r17, r1
   137b6:	09 f4       	brne	.+2      	; 0x137ba <Read_Config+0x4d6>
   137b8:	40 c0       	rjmp	.+128    	; 0x1383a <Read_Config+0x556>
   137ba:	04 30       	cpi	r16, 0x04	; 4
   137bc:	11 05       	cpc	r17, r1
   137be:	09 f0       	breq	.+2      	; 0x137c2 <Read_Config+0x4de>
   137c0:	46 c0       	rjmp	.+140    	; 0x1384e <Read_Config+0x56a>
   137c2:	f3 01       	movw	r30, r6
   137c4:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   137c6:	75 8b       	std	Z+21, r23	; 0x15
   137c8:	2e ce       	rjmp	.-932    	; 0x13426 <Read_Config+0x142>
   137ca:	06 30       	cpi	r16, 0x06	; 6
                        break;
   137cc:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137ce:	71 f1       	breq	.+92     	; 0x1382c <Read_Config+0x548>
   137d0:	07 30       	cpi	r16, 0x07	; 7
   137d2:	11 05       	cpc	r17, r1
   137d4:	e1 f5       	brne	.+120    	; 0x1384e <Read_Config+0x56a>
   137d6:	f3 01       	movw	r30, r6
   137d8:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   137da:	71 8b       	std	Z+17, r23	; 0x11
   137dc:	24 ce       	rjmp	.-952    	; 0x13426 <Read_Config+0x142>
   137de:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   137e0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137e2:	79 f1       	breq	.+94     	; 0x13842 <Read_Config+0x55e>
   137e4:	4c f4       	brge	.+18     	; 0x137f8 <Read_Config+0x514>
   137e6:	0f 30       	cpi	r16, 0x0F	; 15
   137e8:	11 05       	cpc	r17, r1
   137ea:	b1 f0       	breq	.+44     	; 0x13818 <Read_Config+0x534>
   137ec:	03 31       	cpi	r16, 0x13	; 19
   137ee:	11 05       	cpc	r17, r1
   137f0:	71 f5       	brne	.+92     	; 0x1384e <Read_Config+0x56a>
   137f2:	f3 01       	movw	r30, r6
   137f4:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   137f6:	17 ce       	rjmp	.-978    	; 0x13426 <Read_Config+0x142>
   137f8:	01 32       	cpi	r16, 0x21	; 33
                        break;
   137fa:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137fc:	29 f1       	breq	.+74     	; 0x13848 <Read_Config+0x564>
   137fe:	09 32       	cpi	r16, 0x29	; 41
   13800:	11 05       	cpc	r17, r1
   13802:	39 f0       	breq	.+14     	; 0x13812 <Read_Config+0x52e>
   13804:	0e 31       	cpi	r16, 0x1E	; 30
   13806:	11 05       	cpc	r17, r1
   13808:	11 f5       	brne	.+68     	; 0x1384e <Read_Config+0x56a>
   1380a:	f3 01       	movw	r30, r6
   1380c:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   1380e:	71 8f       	std	Z+25, r23	; 0x19
   13810:	0a ce       	rjmp	.-1004   	; 0x13426 <Read_Config+0x142>
   13812:	f3 01       	movw	r30, r6
                        break;
   13814:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13816:	07 ce       	rjmp	.-1010   	; 0x13426 <Read_Config+0x142>
   13818:	f3 01       	movw	r30, r6
                        break;
   1381a:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   1381c:	75 87       	std	Z+13, r23	; 0x0d
   1381e:	86 87       	std	Z+14, r24	; 0x0e
   13820:	97 87       	std	Z+15, r25	; 0x0f
   13822:	01 ce       	rjmp	.-1022   	; 0x13426 <Read_Config+0x142>
   13824:	61 70       	andi	r22, 0x01	; 1
                        break;
   13826:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13828:	62 8b       	std	Z+18, r22	; 0x12
   1382a:	fd cd       	rjmp	.-1030   	; 0x13426 <Read_Config+0x142>
   1382c:	f3 01       	movw	r30, r6
                        break;
   1382e:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   13830:	fa cd       	rjmp	.-1036   	; 0x13426 <Read_Config+0x142>
   13832:	f3 01       	movw	r30, r6
                        break;
   13834:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13836:	77 8b       	std	Z+23, r23	; 0x17
   13838:	f6 cd       	rjmp	.-1044   	; 0x13426 <Read_Config+0x142>
   1383a:	f3 01       	movw	r30, r6
                        break;
   1383c:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   1383e:	73 8f       	std	Z+27, r23	; 0x1b
   13840:	f2 cd       	rjmp	.-1052   	; 0x13426 <Read_Config+0x142>
   13842:	f3 01       	movw	r30, r6
                        break;
   13844:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13846:	ef cd       	rjmp	.-1058   	; 0x13426 <Read_Config+0x142>
   13848:	f3 01       	movw	r30, r6
                        break;
   1384a:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   1384c:	ec cd       	rjmp	.-1064   	; 0x13426 <Read_Config+0x142>
   1384e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13850:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13852:	57 82       	std	Z+7, r5	; 0x07
   13854:	46 82       	std	Z+6, r4	; 0x06
   13856:	b5 82       	std	Z+5, r11	; 0x05
   13858:	a4 82       	std	Z+4, r10	; 0x04
   1385a:	8c e1       	ldi	r24, 0x1C	; 28
   1385c:	9c e1       	ldi	r25, 0x1C	; 28
   1385e:	ce ce       	rjmp	.-612    	; 0x135fc <Read_Config+0x318>
   13860:	0a 31       	cpi	r16, 0x1A	; 26
   13862:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13864:	b9 f0       	breq	.+46     	; 0x13894 <Read_Config+0x5b0>
   13866:	64 f4       	brge	.+24     	; 0x13880 <Read_Config+0x59c>
   13868:	08 31       	cpi	r16, 0x18	; 24
   1386a:	11 05       	cpc	r17, r1
   1386c:	e1 f0       	breq	.+56     	; 0x138a6 <Read_Config+0x5c2>
   1386e:	09 31       	cpi	r16, 0x19	; 25
   13870:	11 05       	cpc	r17, r1
   13872:	e1 f4       	brne	.+56     	; 0x138ac <Read_Config+0x5c8>
   13874:	f3 01       	movw	r30, r6
   13876:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13878:	77 a3       	std	Z+39, r23	; 0x27
   1387a:	80 a7       	std	Z+40, r24	; 0x28
   1387c:	91 a7       	std	Z+41, r25	; 0x29
   1387e:	d3 cd       	rjmp	.-1114   	; 0x13426 <Read_Config+0x142>
   13880:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   13882:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13884:	69 f0       	breq	.+26     	; 0x138a0 <Read_Config+0x5bc>
   13886:	0d 31       	cpi	r16, 0x1D	; 29
   13888:	11 05       	cpc	r17, r1
   1388a:	81 f4       	brne	.+32     	; 0x138ac <Read_Config+0x5c8>
   1388c:	f3 01       	movw	r30, r6
   1388e:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13890:	75 a3       	std	Z+37, r23	; 0x25
   13892:	c9 cd       	rjmp	.-1134   	; 0x13426 <Read_Config+0x142>
   13894:	f3 01       	movw	r30, r6
                        break;
   13896:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13898:	70 a3       	std	Z+32, r23	; 0x20
   1389a:	81 a3       	std	Z+33, r24	; 0x21
   1389c:	92 a3       	std	Z+34, r25	; 0x22
   1389e:	c3 cd       	rjmp	.-1146   	; 0x13426 <Read_Config+0x142>
   138a0:	f3 01       	movw	r30, r6
                        break;
   138a2:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   138a4:	c0 cd       	rjmp	.-1152   	; 0x13426 <Read_Config+0x142>
   138a6:	f3 01       	movw	r30, r6
                        break;
   138a8:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   138aa:	bd cd       	rjmp	.-1158   	; 0x13426 <Read_Config+0x142>
   138ac:	ed b7       	in	r30, 0x3d	; 61
                        break;
   138ae:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   138b0:	57 82       	std	Z+7, r5	; 0x07
   138b2:	46 82       	std	Z+6, r4	; 0x06
   138b4:	b5 82       	std	Z+5, r11	; 0x05
   138b6:	a4 82       	std	Z+4, r10	; 0x04
   138b8:	c3 5e       	subi	r28, 0xE3	; 227
   138ba:	de 4f       	sbci	r29, 0xFE	; 254
   138bc:	28 81       	ld	r18, Y
   138be:	39 81       	ldd	r19, Y+1	; 0x01
   138c0:	4a 81       	ldd	r20, Y+2	; 0x02
   138c2:	cd 51       	subi	r28, 0x1D	; 29
   138c4:	d1 40       	sbci	r29, 0x01	; 1
   138c6:	e8 c0       	rjmp	.+464    	; 0x13a98 <Read_Config+0x7b4>
   138c8:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   138ca:	11 05       	cpc	r17, r1
   138cc:	a1 f0       	breq	.+40     	; 0x138f6 <Read_Config+0x612>
   138ce:	05 31       	cpi	r16, 0x15	; 21
   138d0:	11 05       	cpc	r17, r1
   138d2:	51 f0       	breq	.+20     	; 0x138e8 <Read_Config+0x604>
   138d4:	09 30       	cpi	r16, 0x09	; 9
   138d6:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   138d8:	a9 f4       	brne	.+42     	; 0x13904 <Read_Config+0x620>
   138da:	8a e0       	ldi	r24, 0x0A	; 10
   138dc:	90 e0       	ldi	r25, 0x00	; 0
   138de:	9d db       	rcall	.-2246   	; 0x1301a <push_state>
                        state = AMIGO_CONFIG;
   138e0:	9c e0       	ldi	r25, 0x0C	; 12
   138e2:	29 2e       	mov	r2, r25
   138e4:	31 2c       	mov	r3, r1
                        break;
   138e6:	9f cd       	rjmp	.-1218   	; 0x13426 <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   138e8:	8a e0       	ldi	r24, 0x0A	; 10
   138ea:	90 e0       	ldi	r25, 0x00	; 0
   138ec:	96 db       	rcall	.-2260   	; 0x1301a <push_state>
   138ee:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   138f0:	22 2e       	mov	r2, r18
   138f2:	31 2c       	mov	r3, r1
   138f4:	98 cd       	rjmp	.-1232   	; 0x13426 <Read_Config+0x142>
                        break;
   138f6:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   138f8:	90 e0       	ldi	r25, 0x00	; 0
   138fa:	8f db       	rcall	.-2274   	; 0x1301a <push_state>
   138fc:	8d e0       	ldi	r24, 0x0D	; 13
   138fe:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   13900:	31 2c       	mov	r3, r1
   13902:	91 cd       	rjmp	.-1246   	; 0x13426 <Read_Config+0x142>
   13904:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13906:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13908:	57 82       	std	Z+7, r5	; 0x07
   1390a:	46 82       	std	Z+6, r4	; 0x06
   1390c:	b5 82       	std	Z+5, r11	; 0x05
   1390e:	a4 82       	std	Z+4, r10	; 0x04
   13910:	c6 5e       	subi	r28, 0xE6	; 230
   13912:	de 4f       	sbci	r29, 0xFE	; 254
   13914:	28 81       	ld	r18, Y
   13916:	39 81       	ldd	r19, Y+1	; 0x01
   13918:	4a 81       	ldd	r20, Y+2	; 0x02
   1391a:	ca 51       	subi	r28, 0x1A	; 26
   1391c:	d1 40       	sbci	r29, 0x01	; 1
   1391e:	bc c0       	rjmp	.+376    	; 0x13a98 <Read_Config+0x7b4>
   13920:	00 31       	cpi	r16, 0x10	; 16
   13922:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13924:	09 f4       	brne	.+2      	; 0x13928 <Read_Config+0x644>
   13926:	7f cd       	rjmp	.-1282   	; 0x13426 <Read_Config+0x142>
   13928:	a4 f4       	brge	.+40     	; 0x13952 <Read_Config+0x66e>
   1392a:	01 30       	cpi	r16, 0x01	; 1
   1392c:	11 05       	cpc	r17, r1
   1392e:	c1 f5       	brne	.+112    	; 0x139a0 <Read_Config+0x6bc>
   13930:	6f 71       	andi	r22, 0x1F	; 31
   13932:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13934:	8c 9d       	mul	r24, r12
   13936:	f0 01       	movw	r30, r0
   13938:	8d 9d       	mul	r24, r13
   1393a:	f0 0d       	add	r31, r0
   1393c:	11 24       	eor	r1, r1
   1393e:	e4 50       	subi	r30, 0x04	; 4
   13940:	f1 4e       	sbci	r31, 0xE1	; 225
   13942:	61 83       	std	Z+1, r22	; 0x01
   13944:	c8 5f       	subi	r28, 0xF8	; 248
   13946:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13948:	a8 81       	ld	r26, Y
   1394a:	b9 81       	ldd	r27, Y+1	; 0x01
   1394c:	c8 50       	subi	r28, 0x08	; 8
   1394e:	d1 40       	sbci	r29, 0x01	; 1
   13950:	17 c0       	rjmp	.+46     	; 0x13980 <Read_Config+0x69c>
   13952:	02 31       	cpi	r16, 0x12	; 18
   13954:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13956:	c1 f0       	breq	.+48     	; 0x13988 <Read_Config+0x6a4>
   13958:	0f 31       	cpi	r16, 0x1F	; 31
   1395a:	11 05       	cpc	r17, r1
   1395c:	09 f5       	brne	.+66     	; 0x139a0 <Read_Config+0x6bc>
   1395e:	67 70       	andi	r22, 0x07	; 7
   13960:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13962:	8c 9d       	mul	r24, r12
   13964:	f0 01       	movw	r30, r0
   13966:	8d 9d       	mul	r24, r13
   13968:	f0 0d       	add	r31, r0
   1396a:	11 24       	eor	r1, r1
   1396c:	e4 50       	subi	r30, 0x04	; 4
   1396e:	f1 4e       	sbci	r31, 0xE1	; 225
   13970:	62 83       	std	Z+2, r22	; 0x02
   13972:	c8 5f       	subi	r28, 0xF8	; 248
   13974:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13976:	e8 81       	ld	r30, Y
   13978:	f9 81       	ldd	r31, Y+1	; 0x01
   1397a:	c8 50       	subi	r28, 0x08	; 8
   1397c:	d1 40       	sbci	r29, 0x01	; 1
   1397e:	02 c0       	rjmp	.+4      	; 0x13984 <Read_Config+0x6a0>
   13980:	6c 93       	st	X, r22
   13982:	51 cd       	rjmp	.-1374   	; 0x13426 <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13984:	61 83       	std	Z+1, r22	; 0x01
                        break;
   13986:	4f cd       	rjmp	.-1378   	; 0x13426 <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13988:	c4 01       	movw	r24, r8
                        break;
   1398a:	0e 94 43 30 	call	0x6086	; 0x6086 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   1398e:	c8 5f       	subi	r28, 0xF8	; 248
   13990:	de 4f       	sbci	r29, 0xFE	; 254
   13992:	e8 81       	ld	r30, Y
   13994:	f9 81       	ldd	r31, Y+1	; 0x01
   13996:	c8 50       	subi	r28, 0x08	; 8
   13998:	d1 40       	sbci	r29, 0x01	; 1
   1399a:	93 83       	std	Z+3, r25	; 0x03
   1399c:	82 83       	std	Z+2, r24	; 0x02
   1399e:	43 cd       	rjmp	.-1402   	; 0x13426 <Read_Config+0x142>
   139a0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   139a2:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   139a4:	57 82       	std	Z+7, r5	; 0x07
   139a6:	46 82       	std	Z+6, r4	; 0x06
   139a8:	b5 82       	std	Z+5, r11	; 0x05
   139aa:	a4 82       	std	Z+4, r10	; 0x04
   139ac:	c9 5e       	subi	r28, 0xE9	; 233
   139ae:	de 4f       	sbci	r29, 0xFE	; 254
   139b0:	28 81       	ld	r18, Y
   139b2:	39 81       	ldd	r19, Y+1	; 0x01
   139b4:	4a 81       	ldd	r20, Y+2	; 0x02
   139b6:	c7 51       	subi	r28, 0x17	; 23
   139b8:	d1 40       	sbci	r29, 0x01	; 1
   139ba:	6e c0       	rjmp	.+220    	; 0x13a98 <Read_Config+0x7b4>
   139bc:	07 31       	cpi	r16, 0x17	; 23
   139be:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   139c0:	59 f4       	brne	.+22     	; 0x139d8 <Read_Config+0x6f4>
   139c2:	96 2f       	mov	r25, r22
   139c4:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   139c6:	c8 5f       	subi	r28, 0xF8	; 248
   139c8:	de 4f       	sbci	r29, 0xFE	; 254
   139ca:	e8 81       	ld	r30, Y
   139cc:	f9 81       	ldd	r31, Y+1	; 0x01
   139ce:	c8 50       	subi	r28, 0x08	; 8
   139d0:	d1 40       	sbci	r29, 0x01	; 1
   139d2:	94 83       	std	Z+4, r25	; 0x04
   139d4:	85 83       	std	Z+5, r24	; 0x05
   139d6:	27 cd       	rjmp	.-1458   	; 0x13426 <Read_Config+0x142>
   139d8:	ed b7       	in	r30, 0x3d	; 61
   139da:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   139dc:	57 82       	std	Z+7, r5	; 0x07
   139de:	46 82       	std	Z+6, r4	; 0x06
   139e0:	b5 82       	std	Z+5, r11	; 0x05
   139e2:	a4 82       	std	Z+4, r10	; 0x04
   139e4:	cc 5e       	subi	r28, 0xEC	; 236
   139e6:	de 4f       	sbci	r29, 0xFE	; 254
   139e8:	28 81       	ld	r18, Y
   139ea:	39 81       	ldd	r19, Y+1	; 0x01
   139ec:	4a 81       	ldd	r20, Y+2	; 0x02
   139ee:	c4 51       	subi	r28, 0x14	; 20
   139f0:	d1 40       	sbci	r29, 0x01	; 1
   139f2:	52 c0       	rjmp	.+164    	; 0x13a98 <Read_Config+0x7b4>
   139f4:	0d 30       	cpi	r16, 0x0D	; 13
   139f6:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   139f8:	59 f1       	breq	.+86     	; 0x13a50 <Read_Config+0x76c>
   139fa:	64 f4       	brge	.+24     	; 0x13a14 <Read_Config+0x730>
   139fc:	08 30       	cpi	r16, 0x08	; 8
   139fe:	11 05       	cpc	r17, r1
   13a00:	81 f5       	brne	.+96     	; 0x13a62 <Read_Config+0x77e>
   13a02:	96 2f       	mov	r25, r22
   13a04:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13a06:	c8 5f       	subi	r28, 0xF8	; 248
   13a08:	de 4f       	sbci	r29, 0xFE	; 254
   13a0a:	e8 81       	ld	r30, Y
   13a0c:	f9 81       	ldd	r31, Y+1	; 0x01
   13a0e:	c8 50       	subi	r28, 0x08	; 8
   13a10:	d1 40       	sbci	r29, 0x01	; 1
   13a12:	0f c0       	rjmp	.+30     	; 0x13a32 <Read_Config+0x74e>
   13a14:	06 31       	cpi	r16, 0x16	; 22
   13a16:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13a18:	91 f0       	breq	.+36     	; 0x13a3e <Read_Config+0x75a>
   13a1a:	02 32       	cpi	r16, 0x22	; 34
   13a1c:	11 05       	cpc	r17, r1
   13a1e:	09 f5       	brne	.+66     	; 0x13a62 <Read_Config+0x77e>
   13a20:	96 2f       	mov	r25, r22
   13a22:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13a24:	c8 5f       	subi	r28, 0xF8	; 248
   13a26:	de 4f       	sbci	r29, 0xFE	; 254
   13a28:	e8 81       	ld	r30, Y
   13a2a:	f9 81       	ldd	r31, Y+1	; 0x01
   13a2c:	c8 50       	subi	r28, 0x08	; 8
   13a2e:	d1 40       	sbci	r29, 0x01	; 1
   13a30:	03 c0       	rjmp	.+6      	; 0x13a38 <Read_Config+0x754>
   13a32:	96 83       	std	Z+6, r25	; 0x06
   13a34:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13a36:	f7 cc       	rjmp	.-1554   	; 0x13426 <Read_Config+0x142>
   13a38:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13a3a:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13a3c:	f4 cc       	rjmp	.-1560   	; 0x13426 <Read_Config+0x142>
   13a3e:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a40:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13a42:	e8 81       	ld	r30, Y
   13a44:	f9 81       	ldd	r31, Y+1	; 0x01
   13a46:	c8 50       	subi	r28, 0x08	; 8
   13a48:	d1 40       	sbci	r29, 0x01	; 1
   13a4a:	62 87       	std	Z+10, r22	; 0x0a
   13a4c:	73 87       	std	Z+11, r23	; 0x0b
   13a4e:	eb cc       	rjmp	.-1578   	; 0x13426 <Read_Config+0x142>
   13a50:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a52:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13a54:	e8 81       	ld	r30, Y
   13a56:	f9 81       	ldd	r31, Y+1	; 0x01
   13a58:	c8 50       	subi	r28, 0x08	; 8
   13a5a:	d1 40       	sbci	r29, 0x01	; 1
   13a5c:	64 87       	std	Z+12, r22	; 0x0c
   13a5e:	75 87       	std	Z+13, r23	; 0x0d
   13a60:	e2 cc       	rjmp	.-1596   	; 0x13426 <Read_Config+0x142>
   13a62:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a64:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13a66:	57 82       	std	Z+7, r5	; 0x07
   13a68:	46 82       	std	Z+6, r4	; 0x06
   13a6a:	b5 82       	std	Z+5, r11	; 0x05
   13a6c:	a4 82       	std	Z+4, r10	; 0x04
   13a6e:	cf 5e       	subi	r28, 0xEF	; 239
   13a70:	de 4f       	sbci	r29, 0xFE	; 254
   13a72:	28 81       	ld	r18, Y
   13a74:	39 81       	ldd	r19, Y+1	; 0x01
   13a76:	4a 81       	ldd	r20, Y+2	; 0x02
   13a78:	c1 51       	subi	r28, 0x11	; 17
   13a7a:	d1 40       	sbci	r29, 0x01	; 1
   13a7c:	0d c0       	rjmp	.+26     	; 0x13a98 <Read_Config+0x7b4>
   13a7e:	ed b7       	in	r30, 0x3d	; 61
   13a80:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13a82:	57 82       	std	Z+7, r5	; 0x07
   13a84:	46 82       	std	Z+6, r4	; 0x06
   13a86:	b5 82       	std	Z+5, r11	; 0x05
   13a88:	a4 82       	std	Z+4, r10	; 0x04
   13a8a:	c2 5f       	subi	r28, 0xF2	; 242
   13a8c:	de 4f       	sbci	r29, 0xFE	; 254
   13a8e:	28 81       	ld	r18, Y
   13a90:	39 81       	ldd	r19, Y+1	; 0x01
   13a92:	4a 81       	ldd	r20, Y+2	; 0x02
   13a94:	ce 50       	subi	r28, 0x0E	; 14
   13a96:	d1 40       	sbci	r29, 0x01	; 1
   13a98:	21 83       	std	Z+1, r18	; 0x01
   13a9a:	32 83       	std	Z+2, r19	; 0x02
   13a9c:	43 83       	std	Z+3, r20	; 0x03
   13a9e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   13aa2:	ff ef       	ldi	r31, 0xFF	; 255
   13aa4:	ef 1a       	sub	r14, r31
                ++errors;
   13aa6:	ff 0a       	sbc	r15, r31
   13aa8:	be cc       	rjmp	.-1668   	; 0x13426 <Read_Config+0x142>
   13aaa:	21 14       	cp	r2, r1
                break;
   13aac:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13aae:	79 f0       	breq	.+30     	; 0x13ace <Read_Config+0x7ea>
   13ab0:	ed b7       	in	r30, 0x3d	; 61
   13ab2:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13ab4:	55 82       	std	Z+5, r5	; 0x05
   13ab6:	44 82       	std	Z+4, r4	; 0x04
   13ab8:	8d ee       	ldi	r24, 0xED	; 237
   13aba:	9a e1       	ldi	r25, 0x1A	; 26
   13abc:	a0 e0       	ldi	r26, 0x00	; 0
   13abe:	81 83       	std	Z+1, r24	; 0x01
   13ac0:	92 83       	std	Z+2, r25	; 0x02
   13ac2:	a3 83       	std	Z+3, r26	; 0x03
   13ac4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   13ac8:	ff ef       	ldi	r31, 0xFF	; 255
   13aca:	ef 1a       	sub	r14, r31
        ++errors;
   13acc:	ff 0a       	sbc	r15, r31
   13ace:	ed b7       	in	r30, 0x3d	; 61
   13ad0:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13ad2:	55 82       	std	Z+5, r5	; 0x05
   13ad4:	44 82       	std	Z+4, r4	; 0x04
   13ad6:	80 ed       	ldi	r24, 0xD0	; 208
   13ad8:	9a e1       	ldi	r25, 0x1A	; 26
   13ada:	a0 e0       	ldi	r26, 0x00	; 0
   13adc:	81 83       	std	Z+1, r24	; 0x01
   13ade:	92 83       	std	Z+2, r25	; 0x02
   13ae0:	a3 83       	std	Z+3, r26	; 0x03
   13ae2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   13ae6:	e1 14       	cp	r14, r1
   13ae8:	f1 04       	cpc	r15, r1
    if(errors)
   13aea:	61 f0       	breq	.+24     	; 0x13b04 <Read_Config+0x820>
   13aec:	ed b7       	in	r30, 0x3d	; 61
   13aee:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13af0:	f5 82       	std	Z+5, r15	; 0x05
   13af2:	e4 82       	std	Z+4, r14	; 0x04
   13af4:	89 ea       	ldi	r24, 0xA9	; 169
   13af6:	9a e1       	ldi	r25, 0x1A	; 26
   13af8:	a0 e0       	ldi	r26, 0x00	; 0
   13afa:	81 83       	std	Z+1, r24	; 0x01
   13afc:	92 83       	std	Z+2, r25	; 0x02
   13afe:	a3 83       	std	Z+3, r26	; 0x03
   13b00:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   13b04:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13b06:	de 4f       	sbci	r29, 0xFE	; 254
   13b08:	88 81       	ld	r24, Y
   13b0a:	99 81       	ldd	r25, Y+1	; 0x01
   13b0c:	cc 50       	subi	r28, 0x0C	; 12
   13b0e:	d1 40       	sbci	r29, 0x01	; 1
   13b10:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>
   13b14:	01 96       	adiw	r24, 0x01	; 1
   13b16:	39 f4       	brne	.+14     	; 0x13b26 <Read_Config+0x842>
   13b18:	82 e7       	ldi	r24, 0x72	; 114
    {
        perror("Read_Config - close error");
   13b1a:	9e e0       	ldi	r25, 0x0E	; 14
   13b1c:	0e 94 be 76 	call	0xed7c	; 0xed7c <perror>
   13b20:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13b22:	e2 1a       	sub	r14, r18
   13b24:	f2 0a       	sbc	r15, r18
   13b26:	48 db       	rcall	.-2416   	; 0x131b8 <Post_Config>
    }

// Post process device values
    Post_Config();
   13b28:	c7 01       	movw	r24, r14
   13b2a:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13b2c:	de 4f       	sbci	r29, 0xFE	; 254
}
   13b2e:	e2 e1       	ldi	r30, 0x12	; 18
   13b30:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00013b34 <format_drives>:
   13b34:	2f 92       	push	r2
   13b36:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13b38:	4f 92       	push	r4
   13b3a:	5f 92       	push	r5
   13b3c:	6f 92       	push	r6
   13b3e:	7f 92       	push	r7
   13b40:	8f 92       	push	r8
   13b42:	af 92       	push	r10
   13b44:	bf 92       	push	r11
   13b46:	cf 92       	push	r12
   13b48:	df 92       	push	r13
   13b4a:	ef 92       	push	r14
   13b4c:	ff 92       	push	r15
   13b4e:	0f 93       	push	r16
   13b50:	1f 93       	push	r17
   13b52:	cf 93       	push	r28
   13b54:	df 93       	push	r29
   13b56:	cd b7       	in	r28, 0x3d	; 61
   13b58:	de b7       	in	r29, 0x3e	; 62
   13b5a:	ce 56       	subi	r28, 0x6E	; 110
   13b5c:	d1 09       	sbc	r29, r1
   13b5e:	0f b6       	in	r0, 0x3f	; 63
   13b60:	f8 94       	cli
   13b62:	de bf       	out	0x3e, r29	; 62
   13b64:	0f be       	out	0x3f, r0	; 63
   13b66:	cd bf       	out	0x3d, r28	; 61
   13b68:	8c ef       	ldi	r24, 0xFC	; 252
   13b6a:	c8 2e       	mov	r12, r24
   13b6c:	8e e1       	ldi	r24, 0x1E	; 30
   13b6e:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13b70:	a0 96       	adiw	r28, 0x20	; 32
   13b72:	1f ae       	std	Y+63, r1	; 0x3f
   13b74:	1e ae       	std	Y+62, r1	; 0x3e
   13b76:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13b78:	6e 96       	adiw	r28, 0x1e	; 30
   13b7a:	1f ae       	std	Y+63, r1	; 0x3f
   13b7c:	1e ae       	std	Y+62, r1	; 0x3e
   13b7e:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13b80:	6c 96       	adiw	r28, 0x1c	; 28
   13b82:	1f ae       	std	Y+63, r1	; 0x3f
   13b84:	1e ae       	std	Y+62, r1	; 0x3e
   13b86:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13b88:	8d e5       	ldi	r24, 0x5D	; 93
   13b8a:	97 e1       	ldi	r25, 0x17	; 23
   13b8c:	9c 01       	movw	r18, r24
   13b8e:	40 e0       	ldi	r20, 0x00	; 0
   13b90:	a3 96       	adiw	r28, 0x23	; 35
   13b92:	2d af       	std	Y+61, r18	; 0x3d
   13b94:	3e af       	std	Y+62, r19	; 0x3e
   13b96:	4f af       	std	Y+63, r20	; 0x3f
   13b98:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13b9a:	85 e5       	ldi	r24, 0x55	; 85
   13b9c:	97 e1       	ldi	r25, 0x17	; 23
   13b9e:	9c 01       	movw	r18, r24
   13ba0:	40 e0       	ldi	r20, 0x00	; 0
   13ba2:	a6 96       	adiw	r28, 0x26	; 38
   13ba4:	2d af       	std	Y+61, r18	; 0x3d
   13ba6:	3e af       	std	Y+62, r19	; 0x3e
   13ba8:	4f af       	std	Y+63, r20	; 0x3f
   13baa:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13bac:	87 e7       	ldi	r24, 0x77	; 119
   13bae:	97 e1       	ldi	r25, 0x17	; 23
   13bb0:	9c 01       	movw	r18, r24
   13bb2:	40 e0       	ldi	r20, 0x00	; 0
   13bb4:	a9 96       	adiw	r28, 0x29	; 41
   13bb6:	2d af       	std	Y+61, r18	; 0x3d
   13bb8:	3e af       	std	Y+62, r19	; 0x3e
   13bba:	4f af       	std	Y+63, r20	; 0x3f
   13bbc:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13bbe:	81 ea       	ldi	r24, 0xA1	; 161
   13bc0:	97 e1       	ldi	r25, 0x17	; 23
   13bc2:	9c 01       	movw	r18, r24
   13bc4:	40 e0       	ldi	r20, 0x00	; 0
   13bc6:	ac 96       	adiw	r28, 0x2c	; 44
   13bc8:	2d af       	std	Y+61, r18	; 0x3d
   13bca:	3e af       	std	Y+62, r19	; 0x3e
   13bcc:	4f af       	std	Y+63, r20	; 0x3f
   13bce:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13bd0:	89 e9       	ldi	r24, 0x99	; 153
   13bd2:	97 e1       	ldi	r25, 0x17	; 23
   13bd4:	9c 01       	movw	r18, r24
   13bd6:	40 e0       	ldi	r20, 0x00	; 0
   13bd8:	af 96       	adiw	r28, 0x2f	; 47
   13bda:	2d af       	std	Y+61, r18	; 0x3d
   13bdc:	3e af       	std	Y+62, r19	; 0x3e
   13bde:	4f af       	std	Y+63, r20	; 0x3f
   13be0:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13be2:	8b eb       	ldi	r24, 0xBB	; 187
   13be4:	97 e1       	ldi	r25, 0x17	; 23
   13be6:	3c 01       	movw	r6, r24
   13be8:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13bea:	f6 01       	movw	r30, r12
   13bec:	80 81       	ld	r24, Z
   13bee:	88 23       	and	r24, r24
   13bf0:	09 f4       	brne	.+2      	; 0x13bf4 <format_drives+0xc0>
   13bf2:	ef c0       	rjmp	.+478    	; 0x13dd2 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13bf4:	83 30       	cpi	r24, 0x03	; 3
   13bf6:	09 f0       	breq	.+2      	; 0x13bfa <format_drives+0xc6>
   13bf8:	70 c0       	rjmp	.+224    	; 0x13cda <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13bfa:	a7 a0       	ldd	r10, Z+39	; 0x27
   13bfc:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13bfe:	be 01       	movw	r22, r28
   13c00:	66 5f       	subi	r22, 0xF6	; 246
   13c02:	7f 4f       	sbci	r23, 0xFF	; 255
   13c04:	f5 01       	movw	r30, r10
   13c06:	82 81       	ldd	r24, Z+2	; 0x02
   13c08:	93 81       	ldd	r25, Z+3	; 0x03
   13c0a:	0e 94 92 77 	call	0xef24	; 0xef24 <stat>
   13c0e:	01 96       	adiw	r24, 0x01	; 1
   13c10:	09 f0       	breq	.+2      	; 0x13c14 <format_drives+0xe0>
   13c12:	63 c0       	rjmp	.+198    	; 0x13cda <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13c14:	f5 01       	movw	r30, r10
   13c16:	80 89       	ldd	r24, Z+16	; 0x10
   13c18:	91 89       	ldd	r25, Z+17	; 0x11
   13c1a:	81 15       	cp	r24, r1
   13c1c:	91 40       	sbci	r25, 0x01	; 1
   13c1e:	31 f0       	breq	.+12     	; 0x13c2c <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13c20:	ed b7       	in	r30, 0x3d	; 61
   13c22:	fe b7       	in	r31, 0x3e	; 62
   13c24:	61 82       	std	Z+1, r6	; 0x01
   13c26:	72 82       	std	Z+2, r7	; 0x02
   13c28:	83 82       	std	Z+3, r8	; 0x03
   13c2a:	79 c0       	rjmp	.+242    	; 0x13d1e <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13c2c:	f6 01       	movw	r30, r12
   13c2e:	23 80       	ldd	r2, Z+3	; 0x03
   13c30:	34 80       	ldd	r3, Z+4	; 0x04
   13c32:	45 80       	ldd	r4, Z+5	; 0x05
   13c34:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13c36:	ed b7       	in	r30, 0x3d	; 61
   13c38:	fe b7       	in	r31, 0x3e	; 62
   13c3a:	26 82       	std	Z+6, r2	; 0x06
   13c3c:	37 82       	std	Z+7, r3	; 0x07
   13c3e:	40 86       	std	Z+8, r4	; 0x08
   13c40:	51 86       	std	Z+9, r5	; 0x09
   13c42:	f5 01       	movw	r30, r10
   13c44:	82 81       	ldd	r24, Z+2	; 0x02
   13c46:	93 81       	ldd	r25, Z+3	; 0x03
   13c48:	ed b7       	in	r30, 0x3d	; 61
   13c4a:	fe b7       	in	r31, 0x3e	; 62
   13c4c:	95 83       	std	Z+5, r25	; 0x05
   13c4e:	84 83       	std	Z+4, r24	; 0x04
   13c50:	ac 96       	adiw	r28, 0x2c	; 44
   13c52:	2d ad       	ldd	r18, Y+61	; 0x3d
   13c54:	3e ad       	ldd	r19, Y+62	; 0x3e
   13c56:	4f ad       	ldd	r20, Y+63	; 0x3f
   13c58:	ac 97       	sbiw	r28, 0x2c	; 44
   13c5a:	21 83       	std	Z+1, r18	; 0x01
   13c5c:	32 83       	std	Z+2, r19	; 0x02
   13c5e:	43 83       	std	Z+3, r20	; 0x03
   13c60:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13c64:	6e 96       	adiw	r28, 0x1e	; 30
   13c66:	2e ad       	ldd	r18, Y+62	; 0x3e
   13c68:	3f ad       	ldd	r19, Y+63	; 0x3f
   13c6a:	6e 97       	sbiw	r28, 0x1e	; 30
   13c6c:	ed b7       	in	r30, 0x3d	; 61
   13c6e:	fe b7       	in	r31, 0x3e	; 62
   13c70:	37 83       	std	Z+7, r19	; 0x07
   13c72:	26 83       	std	Z+6, r18	; 0x06
   13c74:	af 96       	adiw	r28, 0x2f	; 47
   13c76:	8d ad       	ldd	r24, Y+61	; 0x3d
   13c78:	9e ad       	ldd	r25, Y+62	; 0x3e
   13c7a:	af ad       	ldd	r26, Y+63	; 0x3f
   13c7c:	af 97       	sbiw	r28, 0x2f	; 47
   13c7e:	83 83       	std	Z+3, r24	; 0x03
   13c80:	94 83       	std	Z+4, r25	; 0x04
   13c82:	a5 83       	std	Z+5, r26	; 0x05
   13c84:	2a e3       	ldi	r18, 0x3A	; 58
   13c86:	30 e0       	ldi	r19, 0x00	; 0
   13c88:	2c 0f       	add	r18, r28
   13c8a:	3d 1f       	adc	r19, r29
   13c8c:	32 83       	std	Z+2, r19	; 0x02
   13c8e:	21 83       	std	Z+1, r18	; 0x01
   13c90:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13c94:	f5 01       	movw	r30, r10
   13c96:	a2 80       	ldd	r10, Z+2	; 0x02
   13c98:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13c9a:	c2 01       	movw	r24, r4
   13c9c:	b1 01       	movw	r22, r2
   13c9e:	15 d2       	rcall	.+1066   	; 0x140ca <lif_dir_count>
   13ca0:	9b 01       	movw	r18, r22
   13ca2:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13ca4:	82 01       	movw	r16, r4
   13ca6:	71 01       	movw	r14, r2
   13ca8:	be 01       	movw	r22, r28
   13caa:	66 5c       	subi	r22, 0xC6	; 198
   13cac:	7f 4f       	sbci	r23, 0xFF	; 255
   13cae:	c5 01       	movw	r24, r10
   13cb0:	0e 94 da da 	call	0x1b5b4	; 0x1b5b4 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13cb4:	6c 96       	adiw	r28, 0x1c	; 28
   13cb6:	2e ad       	ldd	r18, Y+62	; 0x3e
   13cb8:	3f ad       	ldd	r19, Y+63	; 0x3f
   13cba:	6c 97       	sbiw	r28, 0x1c	; 28
   13cbc:	2f 5f       	subi	r18, 0xFF	; 255
   13cbe:	3f 4f       	sbci	r19, 0xFF	; 255
   13cc0:	6c 96       	adiw	r28, 0x1c	; 28
   13cc2:	3f af       	std	Y+63, r19	; 0x3f
   13cc4:	2e af       	std	Y+62, r18	; 0x3e
   13cc6:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13cc8:	6e 96       	adiw	r28, 0x1e	; 30
   13cca:	8e ad       	ldd	r24, Y+62	; 0x3e
   13ccc:	9f ad       	ldd	r25, Y+63	; 0x3f
   13cce:	6e 97       	sbiw	r28, 0x1e	; 30
   13cd0:	01 96       	adiw	r24, 0x01	; 1
   13cd2:	6e 96       	adiw	r28, 0x1e	; 30
   13cd4:	9f af       	std	Y+63, r25	; 0x3f
   13cd6:	8e af       	std	Y+62, r24	; 0x3e
   13cd8:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13cda:	f6 01       	movw	r30, r12
   13cdc:	80 81       	ld	r24, Z
   13cde:	81 30       	cpi	r24, 0x01	; 1
   13ce0:	09 f0       	breq	.+2      	; 0x13ce4 <format_drives+0x1b0>
   13ce2:	77 c0       	rjmp	.+238    	; 0x13dd2 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13ce4:	a7 a0       	ldd	r10, Z+39	; 0x27
   13ce6:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13ce8:	be 01       	movw	r22, r28
   13cea:	66 5f       	subi	r22, 0xF6	; 246
   13cec:	7f 4f       	sbci	r23, 0xFF	; 255
   13cee:	f5 01       	movw	r30, r10
   13cf0:	82 81       	ldd	r24, Z+2	; 0x02
   13cf2:	93 81       	ldd	r25, Z+3	; 0x03
   13cf4:	0e 94 92 77 	call	0xef24	; 0xef24 <stat>
   13cf8:	01 96       	adiw	r24, 0x01	; 1
   13cfa:	09 f0       	breq	.+2      	; 0x13cfe <format_drives+0x1ca>
   13cfc:	6a c0       	rjmp	.+212    	; 0x13dd2 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13cfe:	f5 01       	movw	r30, r10
   13d00:	86 81       	ldd	r24, Z+6	; 0x06
   13d02:	97 81       	ldd	r25, Z+7	; 0x07
   13d04:	81 15       	cp	r24, r1
   13d06:	91 40       	sbci	r25, 0x01	; 1
   13d08:	69 f0       	breq	.+26     	; 0x13d24 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13d0a:	a9 96       	adiw	r28, 0x29	; 41
   13d0c:	2d ad       	ldd	r18, Y+61	; 0x3d
   13d0e:	3e ad       	ldd	r19, Y+62	; 0x3e
   13d10:	4f ad       	ldd	r20, Y+63	; 0x3f
   13d12:	a9 97       	sbiw	r28, 0x29	; 41
   13d14:	ed b7       	in	r30, 0x3d	; 61
   13d16:	fe b7       	in	r31, 0x3e	; 62
   13d18:	21 83       	std	Z+1, r18	; 0x01
   13d1a:	32 83       	std	Z+2, r19	; 0x02
   13d1c:	43 83       	std	Z+3, r20	; 0x03
   13d1e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                    continue;
   13d22:	57 c0       	rjmp	.+174    	; 0x13dd2 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13d24:	f6 01       	movw	r30, r12
   13d26:	23 80       	ldd	r2, Z+3	; 0x03
   13d28:	34 80       	ldd	r3, Z+4	; 0x04
   13d2a:	45 80       	ldd	r4, Z+5	; 0x05
   13d2c:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13d2e:	ed b7       	in	r30, 0x3d	; 61
   13d30:	fe b7       	in	r31, 0x3e	; 62
   13d32:	26 82       	std	Z+6, r2	; 0x06
   13d34:	37 82       	std	Z+7, r3	; 0x07
   13d36:	40 86       	std	Z+8, r4	; 0x08
   13d38:	51 86       	std	Z+9, r5	; 0x09
   13d3a:	f5 01       	movw	r30, r10
   13d3c:	82 81       	ldd	r24, Z+2	; 0x02
   13d3e:	93 81       	ldd	r25, Z+3	; 0x03
   13d40:	ed b7       	in	r30, 0x3d	; 61
   13d42:	fe b7       	in	r31, 0x3e	; 62
   13d44:	95 83       	std	Z+5, r25	; 0x05
   13d46:	84 83       	std	Z+4, r24	; 0x04
   13d48:	a3 96       	adiw	r28, 0x23	; 35
   13d4a:	2d ad       	ldd	r18, Y+61	; 0x3d
   13d4c:	3e ad       	ldd	r19, Y+62	; 0x3e
   13d4e:	4f ad       	ldd	r20, Y+63	; 0x3f
   13d50:	a3 97       	sbiw	r28, 0x23	; 35
   13d52:	21 83       	std	Z+1, r18	; 0x01
   13d54:	32 83       	std	Z+2, r19	; 0x02
   13d56:	43 83       	std	Z+3, r20	; 0x03
   13d58:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13d5c:	a0 96       	adiw	r28, 0x20	; 32
   13d5e:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d60:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d62:	a0 97       	sbiw	r28, 0x20	; 32
   13d64:	ed b7       	in	r30, 0x3d	; 61
   13d66:	fe b7       	in	r31, 0x3e	; 62
   13d68:	37 83       	std	Z+7, r19	; 0x07
   13d6a:	26 83       	std	Z+6, r18	; 0x06
   13d6c:	a6 96       	adiw	r28, 0x26	; 38
   13d6e:	8d ad       	ldd	r24, Y+61	; 0x3d
   13d70:	9e ad       	ldd	r25, Y+62	; 0x3e
   13d72:	af ad       	ldd	r26, Y+63	; 0x3f
   13d74:	a6 97       	sbiw	r28, 0x26	; 38
   13d76:	83 83       	std	Z+3, r24	; 0x03
   13d78:	94 83       	std	Z+4, r25	; 0x04
   13d7a:	a5 83       	std	Z+5, r26	; 0x05
   13d7c:	2a e3       	ldi	r18, 0x3A	; 58
   13d7e:	30 e0       	ldi	r19, 0x00	; 0
   13d80:	2c 0f       	add	r18, r28
   13d82:	3d 1f       	adc	r19, r29
   13d84:	32 83       	std	Z+2, r19	; 0x02
   13d86:	21 83       	std	Z+1, r18	; 0x01
   13d88:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d8c:	f5 01       	movw	r30, r10
   13d8e:	a2 80       	ldd	r10, Z+2	; 0x02
   13d90:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13d92:	c2 01       	movw	r24, r4
   13d94:	b1 01       	movw	r22, r2
   13d96:	99 d1       	rcall	.+818    	; 0x140ca <lif_dir_count>
   13d98:	9b 01       	movw	r18, r22
   13d9a:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d9c:	82 01       	movw	r16, r4
   13d9e:	71 01       	movw	r14, r2
   13da0:	be 01       	movw	r22, r28
   13da2:	66 5c       	subi	r22, 0xC6	; 198
   13da4:	7f 4f       	sbci	r23, 0xFF	; 255
   13da6:	c5 01       	movw	r24, r10
   13da8:	0e 94 da da 	call	0x1b5b4	; 0x1b5b4 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13dac:	6c 96       	adiw	r28, 0x1c	; 28
   13dae:	2e ad       	ldd	r18, Y+62	; 0x3e
   13db0:	3f ad       	ldd	r19, Y+63	; 0x3f
   13db2:	6c 97       	sbiw	r28, 0x1c	; 28
   13db4:	2f 5f       	subi	r18, 0xFF	; 255
   13db6:	3f 4f       	sbci	r19, 0xFF	; 255
   13db8:	6c 96       	adiw	r28, 0x1c	; 28
   13dba:	3f af       	std	Y+63, r19	; 0x3f
   13dbc:	2e af       	std	Y+62, r18	; 0x3e
   13dbe:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13dc0:	a0 96       	adiw	r28, 0x20	; 32
   13dc2:	8e ad       	ldd	r24, Y+62	; 0x3e
   13dc4:	9f ad       	ldd	r25, Y+63	; 0x3f
   13dc6:	a0 97       	sbiw	r28, 0x20	; 32
   13dc8:	01 96       	adiw	r24, 0x01	; 1
   13dca:	a0 96       	adiw	r28, 0x20	; 32
   13dcc:	9f af       	std	Y+63, r25	; 0x3f
   13dce:	8e af       	std	Y+62, r24	; 0x3e
   13dd0:	a0 97       	sbiw	r28, 0x20	; 32
   13dd2:	9b e2       	ldi	r25, 0x2B	; 43
   13dd4:	c9 0e       	add	r12, r25
   13dd6:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13dd8:	a0 e0       	ldi	r26, 0x00	; 0
   13dda:	ca 16       	cp	r12, r26
   13ddc:	a1 e2       	ldi	r26, 0x21	; 33
   13dde:	da 06       	cpc	r13, r26
   13de0:	09 f0       	breq	.+2      	; 0x13de4 <format_drives+0x2b0>
   13de2:	03 cf       	rjmp	.-506    	; 0x13bea <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13de4:	6c 96       	adiw	r28, 0x1c	; 28
   13de6:	ee ad       	ldd	r30, Y+62	; 0x3e
   13de8:	ff ad       	ldd	r31, Y+63	; 0x3f
   13dea:	6c 97       	sbiw	r28, 0x1c	; 28
   13dec:	ef 2b       	or	r30, r31
   13dee:	11 f0       	breq	.+4      	; 0x13df4 <format_drives+0x2c0>
        sep();
   13df0:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>
}
   13df4:	c2 59       	subi	r28, 0x92	; 146
   13df6:	df 4f       	sbci	r29, 0xFF	; 255
   13df8:	0f b6       	in	r0, 0x3f	; 63
   13dfa:	f8 94       	cli
   13dfc:	de bf       	out	0x3e, r29	; 62
   13dfe:	0f be       	out	0x3f, r0	; 63
   13e00:	cd bf       	out	0x3d, r28	; 61
   13e02:	df 91       	pop	r29
   13e04:	cf 91       	pop	r28
   13e06:	1f 91       	pop	r17
   13e08:	0f 91       	pop	r16
   13e0a:	ff 90       	pop	r15
   13e0c:	ef 90       	pop	r14
   13e0e:	df 90       	pop	r13
   13e10:	cf 90       	pop	r12
   13e12:	bf 90       	pop	r11
   13e14:	af 90       	pop	r10
   13e16:	8f 90       	pop	r8
   13e18:	7f 90       	pop	r7
   13e1a:	6f 90       	pop	r6
   13e1c:	5f 90       	pop	r5
   13e1e:	4f 90       	pop	r4
   13e20:	3f 90       	pop	r3
   13e22:	2f 90       	pop	r2
   13e24:	08 95       	ret

00013e26 <display_mounts>:
	}
	display_mounts();
}

void display_mounts( )
{
   13e26:	2f 92       	push	r2
   13e28:	3f 92       	push	r3
   13e2a:	4f 92       	push	r4
   13e2c:	6f 92       	push	r6
   13e2e:	7f 92       	push	r7
   13e30:	8f 92       	push	r8
   13e32:	cf 92       	push	r12
   13e34:	df 92       	push	r13
   13e36:	ef 92       	push	r14
   13e38:	0f 93       	push	r16
   13e3a:	1f 93       	push	r17
   13e3c:	cf 93       	push	r28
   13e3e:	df 93       	push	r29
   13e40:	ad b7       	in	r26, 0x3d	; 61
   13e42:	be b7       	in	r27, 0x3e	; 62
   13e44:	19 97       	sbiw	r26, 0x09	; 9
   13e46:	0f b6       	in	r0, 0x3f	; 63
   13e48:	f8 94       	cli
   13e4a:	be bf       	out	0x3e, r27	; 62
   13e4c:	0f be       	out	0x3f, r0	; 63
   13e4e:	ad bf       	out	0x3d, r26	; 61
   13e50:	cc ef       	ldi	r28, 0xFC	; 252
   13e52:	de e1       	ldi	r29, 0x1E	; 30
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13e54:	0c e8       	ldi	r16, 0x8C	; 140
   13e56:	1e e0       	ldi	r17, 0x0E	; 14
   13e58:	8d e0       	ldi	r24, 0x0D	; 13
   13e5a:	97 e1       	ldi	r25, 0x17	; 23
   13e5c:	6c 01       	movw	r12, r24
   13e5e:	e1 2c       	mov	r14, r1

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13e60:	8e e1       	ldi	r24, 0x1E	; 30
   13e62:	97 e1       	ldi	r25, 0x17	; 23
   13e64:	3c 01       	movw	r6, r24
   13e66:	81 2c       	mov	r8, r1

        if(Devices[i].TYPE == SS80_TYPE)
        {
            SS80p= (SS80DiskType *)Devices[i].dev;

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13e68:	82 e3       	ldi	r24, 0x32	; 50
   13e6a:	97 e1       	ldi	r25, 0x17	; 23
   13e6c:	1c 01       	movw	r2, r24
   13e6e:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13e70:	88 81       	ld	r24, Y
   13e72:	88 23       	and	r24, r24
   13e74:	09 f4       	brne	.+2      	; 0x13e78 <display_mounts+0x52>
   13e76:	43 c0       	rjmp	.+134    	; 0x13efe <display_mounts+0xd8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13e78:	83 30       	cpi	r24, 0x03	; 3
   13e7a:	b1 f4       	brne	.+44     	; 0x13ea8 <display_mounts+0x82>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13e7c:	af a1       	ldd	r26, Y+39	; 0x27
   13e7e:	b8 a5       	ldd	r27, Y+40	; 0x28

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13e80:	fd 01       	movw	r30, r26
   13e82:	82 81       	ldd	r24, Z+2	; 0x02
   13e84:	93 81       	ldd	r25, Z+3	; 0x03
   13e86:	ed b7       	in	r30, 0x3d	; 61
   13e88:	fe b7       	in	r31, 0x3e	; 62
   13e8a:	91 87       	std	Z+9, r25	; 0x09
   13e8c:	80 87       	std	Z+8, r24	; 0x08
   13e8e:	8c 91       	ld	r24, X
   13e90:	90 e0       	ldi	r25, 0x00	; 0
   13e92:	97 83       	std	Z+7, r25	; 0x07
   13e94:	86 83       	std	Z+6, r24	; 0x06
   13e96:	ce 01       	movw	r24, r28
   13e98:	07 96       	adiw	r24, 0x07	; 7
   13e9a:	95 83       	std	Z+5, r25	; 0x05
   13e9c:	84 83       	std	Z+4, r24	; 0x04
   13e9e:	21 82       	std	Z+1, r2	; 0x01
   13ea0:	32 82       	std	Z+2, r3	; 0x02
   13ea2:	43 82       	std	Z+3, r4	; 0x03
   13ea4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
		}

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13ea8:	88 81       	ld	r24, Y
   13eaa:	81 30       	cpi	r24, 0x01	; 1
   13eac:	b1 f4       	brne	.+44     	; 0x13eda <display_mounts+0xb4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13eae:	af a1       	ldd	r26, Y+39	; 0x27
   13eb0:	b8 a5       	ldd	r27, Y+40	; 0x28
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13eb2:	fd 01       	movw	r30, r26
   13eb4:	82 81       	ldd	r24, Z+2	; 0x02
   13eb6:	93 81       	ldd	r25, Z+3	; 0x03
   13eb8:	ed b7       	in	r30, 0x3d	; 61
   13eba:	fe b7       	in	r31, 0x3e	; 62
   13ebc:	91 87       	std	Z+9, r25	; 0x09
   13ebe:	80 87       	std	Z+8, r24	; 0x08
   13ec0:	8c 91       	ld	r24, X
   13ec2:	90 e0       	ldi	r25, 0x00	; 0
   13ec4:	97 83       	std	Z+7, r25	; 0x07
   13ec6:	86 83       	std	Z+6, r24	; 0x06
   13ec8:	ce 01       	movw	r24, r28
   13eca:	07 96       	adiw	r24, 0x07	; 7
   13ecc:	95 83       	std	Z+5, r25	; 0x05
   13ece:	84 83       	std	Z+4, r24	; 0x04
   13ed0:	61 82       	std	Z+1, r6	; 0x01
   13ed2:	72 82       	std	Z+2, r7	; 0x02
   13ed4:	83 82       	std	Z+3, r8	; 0x03
   13ed6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        }
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   13eda:	88 81       	ld	r24, Y
   13edc:	84 30       	cpi	r24, 0x04	; 4
   13ede:	79 f4       	brne	.+30     	; 0x13efe <display_mounts+0xd8>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13ee0:	ef a1       	ldd	r30, Y+39	; 0x27
   13ee2:	f8 a5       	ldd	r31, Y+40	; 0x28
   13ee4:	80 81       	ld	r24, Z
   13ee6:	90 e0       	ldi	r25, 0x00	; 0
   13ee8:	ed b7       	in	r30, 0x3d	; 61
   13eea:	fe b7       	in	r31, 0x3e	; 62
   13eec:	97 83       	std	Z+7, r25	; 0x07
   13eee:	86 83       	std	Z+6, r24	; 0x06
   13ef0:	15 83       	std	Z+5, r17	; 0x05
   13ef2:	04 83       	std	Z+4, r16	; 0x04
   13ef4:	c1 82       	std	Z+1, r12	; 0x01
   13ef6:	d2 82       	std	Z+2, r13	; 0x02
   13ef8:	e3 82       	std	Z+3, r14	; 0x03
   13efa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   13efe:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13f00:	f1 e2       	ldi	r31, 0x21	; 33
   13f02:	c0 30       	cpi	r28, 0x00	; 0
   13f04:	df 07       	cpc	r29, r31
   13f06:	09 f0       	breq	.+2      	; 0x13f0a <display_mounts+0xe4>
   13f08:	b3 cf       	rjmp	.-154    	; 0x13e70 <display_mounts+0x4a>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
		}
    }
    printf("\n");
   13f0a:	8b e0       	ldi	r24, 0x0B	; 11
   13f0c:	97 e1       	ldi	r25, 0x17	; 23
   13f0e:	a0 e0       	ldi	r26, 0x00	; 0
   13f10:	ed b7       	in	r30, 0x3d	; 61
   13f12:	fe b7       	in	r31, 0x3e	; 62
   13f14:	81 83       	std	Z+1, r24	; 0x01
   13f16:	92 83       	std	Z+2, r25	; 0x02
   13f18:	a3 83       	std	Z+3, r26	; 0x03
   13f1a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
}
   13f1e:	ad b7       	in	r26, 0x3d	; 61
   13f20:	be b7       	in	r27, 0x3e	; 62
   13f22:	19 96       	adiw	r26, 0x09	; 9
   13f24:	0f b6       	in	r0, 0x3f	; 63
   13f26:	f8 94       	cli
   13f28:	be bf       	out	0x3e, r27	; 62
   13f2a:	0f be       	out	0x3f, r0	; 63
   13f2c:	ad bf       	out	0x3d, r26	; 61
   13f2e:	df 91       	pop	r29
   13f30:	cf 91       	pop	r28
   13f32:	1f 91       	pop	r17
   13f34:	0f 91       	pop	r16
   13f36:	ef 90       	pop	r14
   13f38:	df 90       	pop	r13
   13f3a:	cf 90       	pop	r12
   13f3c:	8f 90       	pop	r8
   13f3e:	7f 90       	pop	r7
   13f40:	6f 90       	pop	r6
   13f42:	4f 90       	pop	r4
   13f44:	3f 90       	pop	r3
   13f46:	2f 90       	pop	r2
   13f48:	08 95       	ret

00013f4a <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
   13f4a:	af 92       	push	r10
   13f4c:	bf 92       	push	r11
   13f4e:	cf 92       	push	r12
   13f50:	df 92       	push	r13
   13f52:	ef 92       	push	r14
   13f54:	0f 93       	push	r16
   13f56:	1f 93       	push	r17
   13f58:	cf 93       	push	r28
   13f5a:	df 93       	push	r29
   13f5c:	ad b7       	in	r26, 0x3d	; 61
   13f5e:	be b7       	in	r27, 0x3e	; 62
   13f60:	17 97       	sbiw	r26, 0x07	; 7
   13f62:	0f b6       	in	r0, 0x3f	; 63
   13f64:	f8 94       	cli
   13f66:	be bf       	out	0x3e, r27	; 62
   13f68:	0f be       	out	0x3f, r0	; 63
   13f6a:	ad bf       	out	0x3d, r26	; 61
   13f6c:	5c 01       	movw	r10, r24
   13f6e:	8b 01       	movw	r16, r22
   13f70:	0e 5f       	subi	r16, 0xFE	; 254
   13f72:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 1;i< argc;++i)
   13f74:	c1 e0       	ldi	r28, 0x01	; 1
   13f76:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   13f78:	86 e4       	ldi	r24, 0x46	; 70
   13f7a:	97 e1       	ldi	r25, 0x17	; 23
   13f7c:	6c 01       	movw	r12, r24
   13f7e:	e1 2c       	mov	r14, r1
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   13f80:	ca 15       	cp	r28, r10
   13f82:	db 05       	cpc	r29, r11
   13f84:	8c f4       	brge	.+34     	; 0x13fa8 <mount+0x5e>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   13f86:	f8 01       	movw	r30, r16
   13f88:	81 91       	ld	r24, Z+
   13f8a:	91 91       	ld	r25, Z+
   13f8c:	8f 01       	movw	r16, r30
   13f8e:	ed b7       	in	r30, 0x3d	; 61
   13f90:	fe b7       	in	r31, 0x3e	; 62
   13f92:	97 83       	std	Z+7, r25	; 0x07
   13f94:	86 83       	std	Z+6, r24	; 0x06
   13f96:	d5 83       	std	Z+5, r29	; 0x05
   13f98:	c4 83       	std	Z+4, r28	; 0x04
   13f9a:	c1 82       	std	Z+1, r12	; 0x01
   13f9c:	d2 82       	std	Z+2, r13	; 0x02
   13f9e:	e3 82       	std	Z+3, r14	; 0x03
   13fa0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   13fa4:	21 96       	adiw	r28, 0x01	; 1
   13fa6:	ec cf       	rjmp	.-40     	; 0x13f80 <mount+0x36>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
	display_mounts();
   13fa8:	3e df       	rcall	.-388    	; 0x13e26 <display_mounts>
}
   13faa:	ad b7       	in	r26, 0x3d	; 61
   13fac:	be b7       	in	r27, 0x3e	; 62
   13fae:	17 96       	adiw	r26, 0x07	; 7
   13fb0:	0f b6       	in	r0, 0x3f	; 63
   13fb2:	f8 94       	cli
   13fb4:	be bf       	out	0x3e, r27	; 62
   13fb6:	0f be       	out	0x3f, r0	; 63
   13fb8:	ad bf       	out	0x3d, r26	; 61
   13fba:	df 91       	pop	r29
   13fbc:	cf 91       	pop	r28
   13fbe:	1f 91       	pop	r17
   13fc0:	0f 91       	pop	r16
   13fc2:	ef 90       	pop	r14
   13fc4:	df 90       	pop	r13
   13fc6:	cf 90       	pop	r12
   13fc8:	bf 90       	pop	r11
   13fca:	af 90       	pop	r10
   13fcc:	08 95       	ret

00013fce <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   13fce:	8f e1       	ldi	r24, 0x1F	; 31
   13fd0:	e0 e0       	ldi	r30, 0x00	; 0
   13fd2:	f1 e2       	ldi	r31, 0x21	; 33
   13fd4:	df 01       	movw	r26, r30
   13fd6:	98 2f       	mov	r25, r24
   13fd8:	1d 92       	st	X+, r1
   13fda:	9a 95       	dec	r25
   13fdc:	e9 f7       	brne	.-6      	; 0x13fd8 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   13fde:	9f e3       	ldi	r25, 0x3F	; 63
   13fe0:	e0 e2       	ldi	r30, 0x20	; 32
   13fe2:	f1 e2       	ldi	r31, 0x21	; 33
   13fe4:	df 01       	movw	r26, r30
   13fe6:	1d 92       	st	X+, r1
   13fe8:	9a 95       	dec	r25
   13fea:	e9 f7       	brne	.-6      	; 0x13fe6 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   13fec:	e0 e6       	ldi	r30, 0x60	; 96
   13fee:	f1 e2       	ldi	r31, 0x21	; 33
   13ff0:	df 01       	movw	r26, r30
   13ff2:	1d 92       	st	X+, r1
   13ff4:	8a 95       	dec	r24
   13ff6:	e9 f7       	brne	.-6      	; 0x13ff2 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   13ff8:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <hpdir+0x80>
   13ffc:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <hpdir+0x81>
   14000:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <hpdir+0x82>
   14004:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   14008:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x84>
   1400c:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x85>
   14010:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x86>
   14014:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14018:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x88>
   1401c:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x89>
   14020:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x8a>
   14024:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14028:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x8c>
   1402c:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x8d>
   14030:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x8e>
   14034:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14038:	81 e0       	ldi	r24, 0x01	; 1
   1403a:	90 e8       	ldi	r25, 0x80	; 128
   1403c:	a0 e0       	ldi	r26, 0x00	; 0
   1403e:	b0 e0       	ldi	r27, 0x00	; 0
   14040:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <hpdir+0x90>
   14044:	90 93 91 21 	sts	0x2191, r25	; 0x802191 <hpdir+0x91>
   14048:	a0 93 92 21 	sts	0x2192, r26	; 0x802192 <hpdir+0x92>
   1404c:	b0 93 93 21 	sts	0x2193, r27	; 0x802193 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   14050:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0x94>
   14054:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0x95>
   14058:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <hpdir+0x96>
   1405c:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   14060:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0x98>
   14064:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0x99>
   14068:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0x9a>
   1406c:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   14070:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0x9c>
   14074:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0x9d>
   14078:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0x9e>
   1407c:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   14080:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0xa0>
   14084:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0xa1>
   14088:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0xa2>
   1408c:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14090:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0xa4>
   14094:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <hpdir+0xa5>
   14098:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0xa6>
   1409c:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   140a0:	81 e0       	ldi	r24, 0x01	; 1
   140a2:	90 e0       	ldi	r25, 0x00	; 0
   140a4:	a0 e0       	ldi	r26, 0x00	; 0
   140a6:	b0 e0       	ldi	r27, 0x00	; 0
   140a8:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <hpdir+0xa8>
   140ac:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <hpdir+0xa9>
   140b0:	a0 93 aa 21 	sts	0x21AA, r26	; 0x8021aa <hpdir+0xaa>
   140b4:	b0 93 ab 21 	sts	0x21AB, r27	; 0x8021ab <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   140b8:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <hpdir+0xac>
   140bc:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <hpdir+0xad>
   140c0:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <hpdir+0xae>
   140c4:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <hpdir+0xaf>
   140c8:	08 95       	ret

000140ca <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   140ca:	20 e0       	ldi	r18, 0x00	; 0
   140cc:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   140ce:	61 15       	cp	r22, r1
   140d0:	71 05       	cpc	r23, r1
   140d2:	81 05       	cpc	r24, r1
   140d4:	91 05       	cpc	r25, r1
   140d6:	39 f0       	breq	.+14     	; 0x140e6 <lif_dir_count+0x1c>
    {
        scale++;
   140d8:	2f 5f       	subi	r18, 0xFF	; 255
   140da:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   140dc:	95 95       	asr	r25
   140de:	87 95       	ror	r24
   140e0:	77 95       	ror	r23
   140e2:	67 95       	ror	r22
   140e4:	f4 cf       	rjmp	.-24     	; 0x140ce <lif_dir_count+0x4>
    }
    scale>>=1;
   140e6:	35 95       	asr	r19
   140e8:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   140ea:	61 e0       	ldi	r22, 0x01	; 1
   140ec:	70 e0       	ldi	r23, 0x00	; 0
   140ee:	80 e0       	ldi	r24, 0x00	; 0
   140f0:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   140f2:	21 50       	subi	r18, 0x01	; 1
   140f4:	31 09       	sbc	r19, r1
   140f6:	28 f0       	brcs	.+10     	; 0x14102 <lif_dir_count+0x38>
        num <<=1;
   140f8:	66 0f       	add	r22, r22
   140fa:	77 1f       	adc	r23, r23
   140fc:	88 1f       	adc	r24, r24
   140fe:	99 1f       	adc	r25, r25
   14100:	f8 cf       	rjmp	.-16     	; 0x140f2 <lif_dir_count+0x28>
    return(num);
}
   14102:	08 95       	ret

00014104 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14104:	2f 92       	push	r2
   14106:	3f 92       	push	r3
   14108:	4f 92       	push	r4
   1410a:	5f 92       	push	r5
   1410c:	6f 92       	push	r6
   1410e:	8f 92       	push	r8
   14110:	9f 92       	push	r9
   14112:	af 92       	push	r10
   14114:	bf 92       	push	r11
   14116:	cf 92       	push	r12
   14118:	df 92       	push	r13
   1411a:	ef 92       	push	r14
   1411c:	ff 92       	push	r15
   1411e:	0f 93       	push	r16
   14120:	1f 93       	push	r17
   14122:	cf 93       	push	r28
   14124:	df 93       	push	r29
   14126:	cd b7       	in	r28, 0x3d	; 61
   14128:	de b7       	in	r29, 0x3e	; 62
   1412a:	c9 58       	subi	r28, 0x89	; 137
   1412c:	d1 40       	sbci	r29, 0x01	; 1
   1412e:	0f b6       	in	r0, 0x3f	; 63
   14130:	f8 94       	cli
   14132:	de bf       	out	0x3e, r29	; 62
   14134:	0f be       	out	0x3f, r0	; 63
   14136:	cd bf       	out	0x3d, r28	; 61
   14138:	6c 01       	movw	r12, r24
   1413a:	c8 57       	subi	r28, 0x78	; 120
   1413c:	de 4f       	sbci	r29, 0xFE	; 254
   1413e:	79 83       	std	Y+1, r23	; 0x01
   14140:	68 83       	st	Y, r22
   14142:	c8 58       	subi	r28, 0x88	; 136
   14144:	d1 40       	sbci	r29, 0x01	; 1
   14146:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14148:	42 df       	rcall	.-380    	; 0x13fce <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   1414a:	6e ef       	ldi	r22, 0xFE	; 254
   1414c:	78 e0       	ldi	r23, 0x08	; 8
   1414e:	83 e6       	ldi	r24, 0x63	; 99
   14150:	90 e1       	ldi	r25, 0x10	; 16
   14152:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <fopen>
   14156:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14158:	89 2b       	or	r24, r25
   1415a:	49 f4       	brne	.+18     	; 0x1416e <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   1415c:	6e ef       	ldi	r22, 0xFE	; 254
   1415e:	78 e0       	ldi	r23, 0x08	; 8
   14160:	82 e6       	ldi	r24, 0x62	; 98
   14162:	90 e1       	ldi	r25, 0x10	; 16
   14164:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <fopen>
   14168:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   1416a:	89 2b       	or	r24, r25
   1416c:	51 f0       	breq	.+20     	; 0x14182 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   1416e:	21 2c       	mov	r2, r1
   14170:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14172:	8e 01       	movw	r16, r28
   14174:	08 5f       	subi	r16, 0xF8	; 248
   14176:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14178:	83 e0       	ldi	r24, 0x03	; 3
   1417a:	9e e1       	ldi	r25, 0x1E	; 30
   1417c:	2c 01       	movw	r4, r24
   1417e:	61 2c       	mov	r6, r1
   14180:	1e c0       	rjmp	.+60     	; 0x141be <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   14182:	ab 28       	or	r10, r11
   14184:	09 f4       	brne	.+2      	; 0x14188 <hpdir_find_drive+0x84>
   14186:	69 c1       	rjmp	.+722    	; 0x1445a <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   14188:	8a e0       	ldi	r24, 0x0A	; 10
   1418a:	9e e1       	ldi	r25, 0x1E	; 30
   1418c:	a0 e0       	ldi	r26, 0x00	; 0
   1418e:	ed b7       	in	r30, 0x3d	; 61
   14190:	fe b7       	in	r31, 0x3e	; 62
   14192:	81 83       	std	Z+1, r24	; 0x01
   14194:	92 83       	std	Z+2, r25	; 0x02
   14196:	a3 83       	std	Z+3, r26	; 0x03
   14198:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1419c:	5e c1       	rjmp	.+700    	; 0x1445a <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   1419e:	ce 01       	movw	r24, r28
   141a0:	08 96       	adiw	r24, 0x08	; 8
   141a2:	0e 94 73 30 	call	0x60e6	; 0x60e6 <trim_tail>
        ptr = skipspaces(ptr);
   141a6:	ce 01       	movw	r24, r28
   141a8:	08 96       	adiw	r24, 0x08	; 8
   141aa:	0e 94 83 30 	call	0x6106	; 0x6106 <skipspaces>

        len = strlen(ptr);
   141ae:	fc 01       	movw	r30, r24
   141b0:	01 90       	ld	r0, Z+
   141b2:	00 20       	and	r0, r0
   141b4:	e9 f7       	brne	.-6      	; 0x141b0 <hpdir_find_drive+0xac>
   141b6:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   141b8:	8e 17       	cp	r24, r30
   141ba:	9f 07       	cpc	r25, r31
   141bc:	51 f4       	brne	.+20     	; 0x141d2 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   141be:	a7 01       	movw	r20, r14
   141c0:	6e ef       	ldi	r22, 0xFE	; 254
   141c2:	70 e0       	ldi	r23, 0x00	; 0
   141c4:	ce 01       	movw	r24, r28
   141c6:	08 96       	adiw	r24, 0x08	; 8
   141c8:	0e 94 a5 74 	call	0xe94a	; 0xe94a <fgets>
   141cc:	89 2b       	or	r24, r25
   141ce:	39 f7       	brne	.-50     	; 0x1419e <hpdir_find_drive+0x9a>
   141d0:	0c c0       	rjmp	.+24     	; 0x141ea <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   141d2:	fc 01       	movw	r30, r24
   141d4:	20 81       	ld	r18, Z
   141d6:	2b 33       	cpi	r18, 0x3B	; 59
   141d8:	91 f3       	breq	.-28     	; 0x141be <hpdir_find_drive+0xba>
   141da:	23 32       	cpi	r18, 0x23	; 35
   141dc:	81 f3       	breq	.-32     	; 0x141be <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   141de:	2b 35       	cpi	r18, 0x5B	; 91
   141e0:	31 f4       	brne	.+12     	; 0x141ee <hpdir_find_drive+0xea>
   141e2:	f1 e0       	ldi	r31, 0x01	; 1
   141e4:	2f 16       	cp	r2, r31
   141e6:	31 04       	cpc	r3, r1
   141e8:	11 f4       	brne	.+4      	; 0x141ee <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   141ea:	00 e0       	ldi	r16, 0x00	; 0
   141ec:	30 c1       	rjmp	.+608    	; 0x1444e <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   141ee:	4e e7       	ldi	r20, 0x7E	; 126
   141f0:	50 e0       	ldi	r21, 0x00	; 0
   141f2:	b8 01       	movw	r22, r16
   141f4:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   141f8:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   141fa:	6d e6       	ldi	r22, 0x6D	; 109
   141fc:	70 e1       	ldi	r23, 0x10	; 16
   141fe:	c8 01       	movw	r24, r16
   14200:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   14204:	89 2b       	or	r24, r25
   14206:	21 f0       	breq	.+8      	; 0x14210 <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   14208:	22 24       	eor	r2, r2
   1420a:	23 94       	inc	r2
   1420c:	31 2c       	mov	r3, r1
   1420e:	d7 cf       	rjmp	.-82     	; 0x141be <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14210:	21 e0       	ldi	r18, 0x01	; 1
   14212:	22 16       	cp	r2, r18
   14214:	31 04       	cpc	r3, r1
   14216:	99 f6       	brne	.-90     	; 0x141be <hpdir_find_drive+0xba>
            continue;

        if(list)
   14218:	c8 57       	subi	r28, 0x78	; 120
   1421a:	de 4f       	sbci	r29, 0xFE	; 254
   1421c:	88 81       	ld	r24, Y
   1421e:	99 81       	ldd	r25, Y+1	; 0x01
   14220:	c8 58       	subi	r28, 0x88	; 136
   14222:	d1 40       	sbci	r29, 0x01	; 1
   14224:	89 2b       	or	r24, r25
   14226:	61 f0       	breq	.+24     	; 0x14240 <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   14228:	ed b7       	in	r30, 0x3d	; 61
   1422a:	fe b7       	in	r31, 0x3e	; 62
   1422c:	97 82       	std	Z+7, r9	; 0x07
   1422e:	86 82       	std	Z+6, r8	; 0x06
   14230:	15 83       	std	Z+5, r17	; 0x05
   14232:	04 83       	std	Z+4, r16	; 0x04
   14234:	41 82       	std	Z+1, r4	; 0x01
   14236:	52 82       	std	Z+2, r5	; 0x02
   14238:	63 82       	std	Z+3, r6	; 0x03
   1423a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            continue;
   1423e:	bf cf       	rjmp	.-130    	; 0x141be <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   14240:	b8 01       	movw	r22, r16
   14242:	c6 01       	movw	r24, r12
   14244:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   14248:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   1424a:	f1 f2       	breq	.-68     	; 0x14208 <hpdir_find_drive+0x104>
   1424c:	c0 de       	rcall	.-640    	; 0x13fce <hpdir_init>

        if(verbose)
   1424e:	ab 28       	or	r10, r11
   14250:	61 f0       	breq	.+24     	; 0x1426a <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   14252:	ed b7       	in	r30, 0x3d	; 61
   14254:	fe b7       	in	r31, 0x3e	; 62
   14256:	d5 82       	std	Z+5, r13	; 0x05
   14258:	c4 82       	std	Z+4, r12	; 0x04
   1425a:	82 ef       	ldi	r24, 0xF2	; 242
   1425c:	9d e1       	ldi	r25, 0x1D	; 29
   1425e:	a0 e0       	ldi	r26, 0x00	; 0
   14260:	81 83       	std	Z+1, r24	; 0x01
   14262:	92 83       	std	Z+2, r25	; 0x02
   14264:	a3 83       	std	Z+3, r26	; 0x03
   14266:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   1426a:	4e e1       	ldi	r20, 0x1E	; 30
   1426c:	50 e0       	ldi	r21, 0x00	; 0
   1426e:	b8 01       	movw	r22, r16
   14270:	80 e0       	ldi	r24, 0x00	; 0
   14272:	91 e2       	ldi	r25, 0x21	; 33
   14274:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14278:	4e e7       	ldi	r20, 0x7E	; 126
   1427a:	50 e0       	ldi	r21, 0x00	; 0
   1427c:	b8 01       	movw	r22, r16
   1427e:	c4 01       	movw	r24, r8
   14280:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14284:	4e e3       	ldi	r20, 0x3E	; 62
   14286:	50 e0       	ldi	r21, 0x00	; 0
   14288:	60 e2       	ldi	r22, 0x20	; 32
   1428a:	71 e2       	ldi	r23, 0x21	; 33
   1428c:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14290:	4e e1       	ldi	r20, 0x1E	; 30
   14292:	50 e0       	ldi	r21, 0x00	; 0
   14294:	60 e6       	ldi	r22, 0x60	; 96
   14296:	71 e2       	ldi	r23, 0x21	; 33
   14298:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1429c:	4e e7       	ldi	r20, 0x7E	; 126
   1429e:	50 e0       	ldi	r21, 0x00	; 0
   142a0:	b8 01       	movw	r22, r16
   142a2:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   142a6:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   142a8:	c8 01       	movw	r24, r16
   142aa:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   142ae:	60 93 80 21 	sts	0x2180, r22	; 0x802180 <hpdir+0x80>
   142b2:	70 93 81 21 	sts	0x2181, r23	; 0x802181 <hpdir+0x81>
   142b6:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <hpdir+0x82>
   142ba:	90 93 83 21 	sts	0x2183, r25	; 0x802183 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142be:	4e e7       	ldi	r20, 0x7E	; 126
   142c0:	50 e0       	ldi	r21, 0x00	; 0
   142c2:	b8 01       	movw	r22, r16
   142c4:	c6 01       	movw	r24, r12
   142c6:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   142ca:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   142cc:	c8 01       	movw	r24, r16
   142ce:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   142d2:	60 93 84 21 	sts	0x2184, r22	; 0x802184 <hpdir+0x84>
   142d6:	70 93 85 21 	sts	0x2185, r23	; 0x802185 <hpdir+0x85>
   142da:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <hpdir+0x86>
   142de:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142e2:	4e e7       	ldi	r20, 0x7E	; 126
   142e4:	50 e0       	ldi	r21, 0x00	; 0
   142e6:	b8 01       	movw	r22, r16
   142e8:	c6 01       	movw	r24, r12
   142ea:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   142ee:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   142f0:	c8 01       	movw	r24, r16
   142f2:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   142f6:	60 93 88 21 	sts	0x2188, r22	; 0x802188 <hpdir+0x88>
   142fa:	70 93 89 21 	sts	0x2189, r23	; 0x802189 <hpdir+0x89>
   142fe:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <hpdir+0x8a>
   14302:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14306:	4e e7       	ldi	r20, 0x7E	; 126
   14308:	50 e0       	ldi	r21, 0x00	; 0
   1430a:	b8 01       	movw	r22, r16
   1430c:	c6 01       	movw	r24, r12
   1430e:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   14312:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14314:	c8 01       	movw	r24, r16
   14316:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   1431a:	60 93 8c 21 	sts	0x218C, r22	; 0x80218c <hpdir+0x8c>
   1431e:	70 93 8d 21 	sts	0x218D, r23	; 0x80218d <hpdir+0x8d>
   14322:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <hpdir+0x8e>
   14326:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1432a:	4e e7       	ldi	r20, 0x7E	; 126
   1432c:	50 e0       	ldi	r21, 0x00	; 0
   1432e:	b8 01       	movw	r22, r16
   14330:	c6 01       	movw	r24, r12
   14332:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   14336:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14338:	c8 01       	movw	r24, r16
   1433a:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   1433e:	60 93 90 21 	sts	0x2190, r22	; 0x802190 <hpdir+0x90>
   14342:	70 93 91 21 	sts	0x2191, r23	; 0x802191 <hpdir+0x91>
   14346:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <hpdir+0x92>
   1434a:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1434e:	4e e7       	ldi	r20, 0x7E	; 126
   14350:	50 e0       	ldi	r21, 0x00	; 0
   14352:	b8 01       	movw	r22, r16
   14354:	c6 01       	movw	r24, r12
   14356:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   1435a:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   1435c:	c8 01       	movw	r24, r16
   1435e:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   14362:	60 93 94 21 	sts	0x2194, r22	; 0x802194 <hpdir+0x94>
   14366:	70 93 95 21 	sts	0x2195, r23	; 0x802195 <hpdir+0x95>
   1436a:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0x96>
   1436e:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14372:	4e e7       	ldi	r20, 0x7E	; 126
   14374:	50 e0       	ldi	r21, 0x00	; 0
   14376:	b8 01       	movw	r22, r16
   14378:	c6 01       	movw	r24, r12
   1437a:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   1437e:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   14380:	c8 01       	movw	r24, r16
   14382:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   14386:	60 93 98 21 	sts	0x2198, r22	; 0x802198 <hpdir+0x98>
   1438a:	70 93 99 21 	sts	0x2199, r23	; 0x802199 <hpdir+0x99>
   1438e:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <hpdir+0x9a>
   14392:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14396:	4e e7       	ldi	r20, 0x7E	; 126
   14398:	50 e0       	ldi	r21, 0x00	; 0
   1439a:	b8 01       	movw	r22, r16
   1439c:	c6 01       	movw	r24, r12
   1439e:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   143a2:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   143a4:	c8 01       	movw	r24, r16
   143a6:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   143aa:	60 93 9c 21 	sts	0x219C, r22	; 0x80219c <hpdir+0x9c>
   143ae:	70 93 9d 21 	sts	0x219D, r23	; 0x80219d <hpdir+0x9d>
   143b2:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <hpdir+0x9e>
   143b6:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143ba:	4e e7       	ldi	r20, 0x7E	; 126
   143bc:	50 e0       	ldi	r21, 0x00	; 0
   143be:	b8 01       	movw	r22, r16
   143c0:	c6 01       	movw	r24, r12
   143c2:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
   143c6:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   143c8:	c8 01       	movw	r24, r16
   143ca:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   143ce:	60 93 a0 21 	sts	0x21A0, r22	; 0x8021a0 <hpdir+0xa0>
   143d2:	70 93 a1 21 	sts	0x21A1, r23	; 0x8021a1 <hpdir+0xa1>
   143d6:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <hpdir+0xa2>
   143da:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143de:	4e e7       	ldi	r20, 0x7E	; 126
   143e0:	50 e0       	ldi	r21, 0x00	; 0
   143e2:	b8 01       	movw	r22, r16
   143e4:	c6 01       	movw	r24, r12
   143e6:	0e 94 55 31 	call	0x62aa	; 0x62aa <get_token>
        hpdir.INTERLEAVE = get_value(token);
   143ea:	c8 01       	movw	r24, r16
   143ec:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
   143f0:	60 93 a4 21 	sts	0x21A4, r22	; 0x8021a4 <hpdir+0xa4>
   143f4:	70 93 a5 21 	sts	0x21A5, r23	; 0x8021a5 <hpdir+0xa5>
   143f8:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <hpdir+0xa6>
   143fc:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14400:	20 91 94 21 	lds	r18, 0x2194	; 0x802194 <hpdir+0x94>
   14404:	30 91 95 21 	lds	r19, 0x2195	; 0x802195 <hpdir+0x95>
   14408:	40 91 96 21 	lds	r20, 0x2196	; 0x802196 <hpdir+0x96>
   1440c:	50 91 97 21 	lds	r21, 0x2197	; 0x802197 <hpdir+0x97>
   14410:	60 91 98 21 	lds	r22, 0x2198	; 0x802198 <hpdir+0x98>
   14414:	70 91 99 21 	lds	r23, 0x2199	; 0x802199 <hpdir+0x99>
   14418:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <hpdir+0x9a>
   1441c:	90 91 9b 21 	lds	r25, 0x219B	; 0x80219b <hpdir+0x9b>
   14420:	0e 94 3d e2 	call	0x1c47a	; 0x1c47a <__mulsi3>
   14424:	9b 01       	movw	r18, r22
   14426:	ac 01       	movw	r20, r24
   14428:	60 91 9c 21 	lds	r22, 0x219C	; 0x80219c <hpdir+0x9c>
   1442c:	70 91 9d 21 	lds	r23, 0x219D	; 0x80219d <hpdir+0x9d>
   14430:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <hpdir+0x9e>
   14434:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <hpdir+0x9f>
   14438:	0e 94 3d e2 	call	0x1c47a	; 0x1c47a <__mulsi3>
   1443c:	60 93 ac 21 	sts	0x21AC, r22	; 0x8021ac <hpdir+0xac>
   14440:	70 93 ad 21 	sts	0x21AD, r23	; 0x8021ad <hpdir+0xad>
   14444:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <hpdir+0xae>
   14448:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   1444c:	01 e0       	ldi	r16, 0x01	; 1
   1444e:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14450:	c7 01       	movw	r24, r14
   14452:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>
    return(found);
   14456:	c8 01       	movw	r24, r16
   14458:	02 c0       	rjmp	.+4      	; 0x1445e <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   1445a:	80 e0       	ldi	r24, 0x00	; 0
   1445c:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   1445e:	c7 57       	subi	r28, 0x77	; 119
   14460:	de 4f       	sbci	r29, 0xFE	; 254
   14462:	0f b6       	in	r0, 0x3f	; 63
   14464:	f8 94       	cli
   14466:	de bf       	out	0x3e, r29	; 62
   14468:	0f be       	out	0x3f, r0	; 63
   1446a:	cd bf       	out	0x3d, r28	; 61
   1446c:	df 91       	pop	r29
   1446e:	cf 91       	pop	r28
   14470:	1f 91       	pop	r17
   14472:	0f 91       	pop	r16
   14474:	ff 90       	pop	r15
   14476:	ef 90       	pop	r14
   14478:	df 90       	pop	r13
   1447a:	cf 90       	pop	r12
   1447c:	bf 90       	pop	r11
   1447e:	af 90       	pop	r10
   14480:	9f 90       	pop	r9
   14482:	8f 90       	pop	r8
   14484:	6f 90       	pop	r6
   14486:	5f 90       	pop	r5
   14488:	4f 90       	pop	r4
   1448a:	3f 90       	pop	r3
   1448c:	2f 90       	pop	r2
   1448e:	08 95       	ret

00014490 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14490:	0f 93       	push	r16
   14492:	1f 93       	push	r17
   14494:	25 e0       	ldi	r18, 0x05	; 5
   14496:	30 e0       	ldi	r19, 0x00	; 0
   14498:	fc 01       	movw	r30, r24
   1449a:	31 83       	std	Z+1, r19	; 0x01
   1449c:	20 83       	st	Z, r18
   1449e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   144a2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   144a6:	06 81       	ldd	r16, Z+6	; 0x06
   144a8:	17 81       	ldd	r17, Z+7	; 0x07
   144aa:	20 e0       	ldi	r18, 0x00	; 0
   144ac:	30 e0       	ldi	r19, 0x00	; 0
   144ae:	42 e0       	ldi	r20, 0x02	; 2
   144b0:	50 e0       	ldi	r21, 0x00	; 0
   144b2:	60 e0       	ldi	r22, 0x00	; 0
   144b4:	70 e0       	ldi	r23, 0x00	; 0
   144b6:	80 ea       	ldi	r24, 0xA0	; 160
   144b8:	99 e1       	ldi	r25, 0x19	; 25
   144ba:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   144be:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   144c2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   144c6:	00 85       	ldd	r16, Z+8	; 0x08
   144c8:	11 85       	ldd	r17, Z+9	; 0x09
   144ca:	20 e0       	ldi	r18, 0x00	; 0
   144cc:	30 e0       	ldi	r19, 0x00	; 0
   144ce:	42 e0       	ldi	r20, 0x02	; 2
   144d0:	50 e0       	ldi	r21, 0x00	; 0
   144d2:	61 e0       	ldi	r22, 0x01	; 1
   144d4:	70 e0       	ldi	r23, 0x00	; 0
   144d6:	80 ea       	ldi	r24, 0xA0	; 160
   144d8:	99 e1       	ldi	r25, 0x19	; 25
   144da:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   144de:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   144e2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   144e6:	02 85       	ldd	r16, Z+10	; 0x0a
   144e8:	10 e0       	ldi	r17, 0x00	; 0
   144ea:	20 e0       	ldi	r18, 0x00	; 0
   144ec:	30 e0       	ldi	r19, 0x00	; 0
   144ee:	41 e0       	ldi	r20, 0x01	; 1
   144f0:	50 e0       	ldi	r21, 0x00	; 0
   144f2:	64 e0       	ldi	r22, 0x04	; 4
   144f4:	70 e0       	ldi	r23, 0x00	; 0
   144f6:	80 ea       	ldi	r24, 0xA0	; 160
   144f8:	99 e1       	ldi	r25, 0x19	; 25
   144fa:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   144fe:	80 ea       	ldi	r24, 0xA0	; 160
   14500:	99 e1       	ldi	r25, 0x19	; 25
   14502:	1f 91       	pop	r17
   14504:	0f 91       	pop	r16
   14506:	08 95       	ret

00014508 <SS80UnitPack>:
   14508:	0f 93       	push	r16
   1450a:	1f 93       	push	r17
   1450c:	23 e1       	ldi	r18, 0x13	; 19
   1450e:	30 e0       	ldi	r19, 0x00	; 0
   14510:	fc 01       	movw	r30, r24
   14512:	31 83       	std	Z+1, r19	; 0x01
   14514:	20 83       	st	Z, r18
   14516:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1451a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1451e:	03 85       	ldd	r16, Z+11	; 0x0b
   14520:	10 e0       	ldi	r17, 0x00	; 0
   14522:	20 e0       	ldi	r18, 0x00	; 0
   14524:	30 e0       	ldi	r19, 0x00	; 0
   14526:	41 e0       	ldi	r20, 0x01	; 1
   14528:	50 e0       	ldi	r21, 0x00	; 0
   1452a:	60 e0       	ldi	r22, 0x00	; 0
   1452c:	70 e0       	ldi	r23, 0x00	; 0
   1452e:	8d e8       	ldi	r24, 0x8D	; 141
   14530:	99 e1       	ldi	r25, 0x19	; 25
   14532:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14536:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1453a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1453e:	04 85       	ldd	r16, Z+12	; 0x0c
   14540:	15 85       	ldd	r17, Z+13	; 0x0d
   14542:	26 85       	ldd	r18, Z+14	; 0x0e
   14544:	37 85       	ldd	r19, Z+15	; 0x0f
   14546:	43 e0       	ldi	r20, 0x03	; 3
   14548:	50 e0       	ldi	r21, 0x00	; 0
   1454a:	61 e0       	ldi	r22, 0x01	; 1
   1454c:	70 e0       	ldi	r23, 0x00	; 0
   1454e:	8d e8       	ldi	r24, 0x8D	; 141
   14550:	99 e1       	ldi	r25, 0x19	; 25
   14552:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14556:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1455a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1455e:	00 89       	ldd	r16, Z+16	; 0x10
   14560:	11 89       	ldd	r17, Z+17	; 0x11
   14562:	20 e0       	ldi	r18, 0x00	; 0
   14564:	30 e0       	ldi	r19, 0x00	; 0
   14566:	42 e0       	ldi	r20, 0x02	; 2
   14568:	50 e0       	ldi	r21, 0x00	; 0
   1456a:	64 e0       	ldi	r22, 0x04	; 4
   1456c:	70 e0       	ldi	r23, 0x00	; 0
   1456e:	8d e8       	ldi	r24, 0x8D	; 141
   14570:	99 e1       	ldi	r25, 0x19	; 25
   14572:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14576:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1457a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1457e:	02 89       	ldd	r16, Z+18	; 0x12
   14580:	10 e0       	ldi	r17, 0x00	; 0
   14582:	20 e0       	ldi	r18, 0x00	; 0
   14584:	30 e0       	ldi	r19, 0x00	; 0
   14586:	41 e0       	ldi	r20, 0x01	; 1
   14588:	50 e0       	ldi	r21, 0x00	; 0
   1458a:	66 e0       	ldi	r22, 0x06	; 6
   1458c:	70 e0       	ldi	r23, 0x00	; 0
   1458e:	8d e8       	ldi	r24, 0x8D	; 141
   14590:	99 e1       	ldi	r25, 0x19	; 25
   14592:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14596:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1459a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1459e:	03 89       	ldd	r16, Z+19	; 0x13
   145a0:	10 e0       	ldi	r17, 0x00	; 0
   145a2:	20 e0       	ldi	r18, 0x00	; 0
   145a4:	30 e0       	ldi	r19, 0x00	; 0
   145a6:	41 e0       	ldi	r20, 0x01	; 1
   145a8:	50 e0       	ldi	r21, 0x00	; 0
   145aa:	67 e0       	ldi	r22, 0x07	; 7
   145ac:	70 e0       	ldi	r23, 0x00	; 0
   145ae:	8d e8       	ldi	r24, 0x8D	; 141
   145b0:	99 e1       	ldi	r25, 0x19	; 25
   145b2:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   145b6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   145ba:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   145be:	04 89       	ldd	r16, Z+20	; 0x14
   145c0:	15 89       	ldd	r17, Z+21	; 0x15
   145c2:	20 e0       	ldi	r18, 0x00	; 0
   145c4:	30 e0       	ldi	r19, 0x00	; 0
   145c6:	42 e0       	ldi	r20, 0x02	; 2
   145c8:	50 e0       	ldi	r21, 0x00	; 0
   145ca:	68 e0       	ldi	r22, 0x08	; 8
   145cc:	70 e0       	ldi	r23, 0x00	; 0
   145ce:	8d e8       	ldi	r24, 0x8D	; 141
   145d0:	99 e1       	ldi	r25, 0x19	; 25
   145d2:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   145d6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   145da:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   145de:	06 89       	ldd	r16, Z+22	; 0x16
   145e0:	17 89       	ldd	r17, Z+23	; 0x17
   145e2:	20 e0       	ldi	r18, 0x00	; 0
   145e4:	30 e0       	ldi	r19, 0x00	; 0
   145e6:	42 e0       	ldi	r20, 0x02	; 2
   145e8:	50 e0       	ldi	r21, 0x00	; 0
   145ea:	6a e0       	ldi	r22, 0x0A	; 10
   145ec:	70 e0       	ldi	r23, 0x00	; 0
   145ee:	8d e8       	ldi	r24, 0x8D	; 141
   145f0:	99 e1       	ldi	r25, 0x19	; 25
   145f2:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   145f6:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   145fa:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   145fe:	00 8d       	ldd	r16, Z+24	; 0x18
   14600:	11 8d       	ldd	r17, Z+25	; 0x19
   14602:	20 e0       	ldi	r18, 0x00	; 0
   14604:	30 e0       	ldi	r19, 0x00	; 0
   14606:	42 e0       	ldi	r20, 0x02	; 2
   14608:	50 e0       	ldi	r21, 0x00	; 0
   1460a:	6c e0       	ldi	r22, 0x0C	; 12
   1460c:	70 e0       	ldi	r23, 0x00	; 0
   1460e:	8d e8       	ldi	r24, 0x8D	; 141
   14610:	99 e1       	ldi	r25, 0x19	; 25
   14612:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14616:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1461a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1461e:	02 8d       	ldd	r16, Z+26	; 0x1a
   14620:	13 8d       	ldd	r17, Z+27	; 0x1b
   14622:	20 e0       	ldi	r18, 0x00	; 0
   14624:	30 e0       	ldi	r19, 0x00	; 0
   14626:	42 e0       	ldi	r20, 0x02	; 2
   14628:	50 e0       	ldi	r21, 0x00	; 0
   1462a:	6e e0       	ldi	r22, 0x0E	; 14
   1462c:	70 e0       	ldi	r23, 0x00	; 0
   1462e:	8d e8       	ldi	r24, 0x8D	; 141
   14630:	99 e1       	ldi	r25, 0x19	; 25
   14632:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14636:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1463a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1463e:	04 8d       	ldd	r16, Z+28	; 0x1c
   14640:	10 e0       	ldi	r17, 0x00	; 0
   14642:	20 e0       	ldi	r18, 0x00	; 0
   14644:	30 e0       	ldi	r19, 0x00	; 0
   14646:	41 e0       	ldi	r20, 0x01	; 1
   14648:	50 e0       	ldi	r21, 0x00	; 0
   1464a:	60 e1       	ldi	r22, 0x10	; 16
   1464c:	70 e0       	ldi	r23, 0x00	; 0
   1464e:	8d e8       	ldi	r24, 0x8D	; 141
   14650:	99 e1       	ldi	r25, 0x19	; 25
   14652:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14656:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1465a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1465e:	05 8d       	ldd	r16, Z+29	; 0x1d
   14660:	10 e0       	ldi	r17, 0x00	; 0
   14662:	20 e0       	ldi	r18, 0x00	; 0
   14664:	30 e0       	ldi	r19, 0x00	; 0
   14666:	41 e0       	ldi	r20, 0x01	; 1
   14668:	50 e0       	ldi	r21, 0x00	; 0
   1466a:	61 e1       	ldi	r22, 0x11	; 17
   1466c:	70 e0       	ldi	r23, 0x00	; 0
   1466e:	8d e8       	ldi	r24, 0x8D	; 141
   14670:	99 e1       	ldi	r25, 0x19	; 25
   14672:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14676:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1467a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1467e:	06 8d       	ldd	r16, Z+30	; 0x1e
   14680:	10 e0       	ldi	r17, 0x00	; 0
   14682:	20 e0       	ldi	r18, 0x00	; 0
   14684:	30 e0       	ldi	r19, 0x00	; 0
   14686:	41 e0       	ldi	r20, 0x01	; 1
   14688:	50 e0       	ldi	r21, 0x00	; 0
   1468a:	62 e1       	ldi	r22, 0x12	; 18
   1468c:	70 e0       	ldi	r23, 0x00	; 0
   1468e:	8d e8       	ldi	r24, 0x8D	; 141
   14690:	99 e1       	ldi	r25, 0x19	; 25
   14692:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   14696:	8d e8       	ldi	r24, 0x8D	; 141
   14698:	99 e1       	ldi	r25, 0x19	; 25
   1469a:	1f 91       	pop	r17
   1469c:	0f 91       	pop	r16
   1469e:	08 95       	ret

000146a0 <SS80VolumePack>:
   146a0:	0f 93       	push	r16
   146a2:	1f 93       	push	r17
   146a4:	2d e0       	ldi	r18, 0x0D	; 13
   146a6:	30 e0       	ldi	r19, 0x00	; 0
   146a8:	fc 01       	movw	r30, r24
   146aa:	31 83       	std	Z+1, r19	; 0x01
   146ac:	20 83       	st	Z, r18
   146ae:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   146b2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   146b6:	07 8d       	ldd	r16, Z+31	; 0x1f
   146b8:	10 a1       	ldd	r17, Z+32	; 0x20
   146ba:	21 a1       	ldd	r18, Z+33	; 0x21
   146bc:	32 a1       	ldd	r19, Z+34	; 0x22
   146be:	43 e0       	ldi	r20, 0x03	; 3
   146c0:	50 e0       	ldi	r21, 0x00	; 0
   146c2:	60 e0       	ldi	r22, 0x00	; 0
   146c4:	70 e0       	ldi	r23, 0x00	; 0
   146c6:	80 e8       	ldi	r24, 0x80	; 128
   146c8:	99 e1       	ldi	r25, 0x19	; 25
   146ca:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   146ce:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   146d2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   146d6:	03 a1       	ldd	r16, Z+35	; 0x23
   146d8:	10 e0       	ldi	r17, 0x00	; 0
   146da:	20 e0       	ldi	r18, 0x00	; 0
   146dc:	30 e0       	ldi	r19, 0x00	; 0
   146de:	41 e0       	ldi	r20, 0x01	; 1
   146e0:	50 e0       	ldi	r21, 0x00	; 0
   146e2:	63 e0       	ldi	r22, 0x03	; 3
   146e4:	70 e0       	ldi	r23, 0x00	; 0
   146e6:	80 e8       	ldi	r24, 0x80	; 128
   146e8:	99 e1       	ldi	r25, 0x19	; 25
   146ea:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   146ee:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   146f2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   146f6:	04 a1       	ldd	r16, Z+36	; 0x24
   146f8:	15 a1       	ldd	r17, Z+37	; 0x25
   146fa:	20 e0       	ldi	r18, 0x00	; 0
   146fc:	30 e0       	ldi	r19, 0x00	; 0
   146fe:	42 e0       	ldi	r20, 0x02	; 2
   14700:	50 e0       	ldi	r21, 0x00	; 0
   14702:	64 e0       	ldi	r22, 0x04	; 4
   14704:	70 e0       	ldi	r23, 0x00	; 0
   14706:	80 e8       	ldi	r24, 0x80	; 128
   14708:	99 e1       	ldi	r25, 0x19	; 25
   1470a:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   1470e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14712:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14716:	06 a1       	ldd	r16, Z+38	; 0x26
   14718:	17 a1       	ldd	r17, Z+39	; 0x27
   1471a:	20 a5       	ldd	r18, Z+40	; 0x28
   1471c:	31 a5       	ldd	r19, Z+41	; 0x29
   1471e:	46 e0       	ldi	r20, 0x06	; 6
   14720:	50 e0       	ldi	r21, 0x00	; 0
   14722:	66 e0       	ldi	r22, 0x06	; 6
   14724:	70 e0       	ldi	r23, 0x00	; 0
   14726:	80 e8       	ldi	r24, 0x80	; 128
   14728:	99 e1       	ldi	r25, 0x19	; 25
   1472a:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   1472e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14732:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14736:	02 a5       	ldd	r16, Z+42	; 0x2a
   14738:	10 e0       	ldi	r17, 0x00	; 0
   1473a:	20 e0       	ldi	r18, 0x00	; 0
   1473c:	30 e0       	ldi	r19, 0x00	; 0
   1473e:	41 e0       	ldi	r20, 0x01	; 1
   14740:	50 e0       	ldi	r21, 0x00	; 0
   14742:	6c e0       	ldi	r22, 0x0C	; 12
   14744:	70 e0       	ldi	r23, 0x00	; 0
   14746:	80 e8       	ldi	r24, 0x80	; 128
   14748:	99 e1       	ldi	r25, 0x19	; 25
   1474a:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   1474e:	80 e8       	ldi	r24, 0x80	; 128
   14750:	99 e1       	ldi	r25, 0x19	; 25
   14752:	1f 91       	pop	r17
   14754:	0f 91       	pop	r16
   14756:	08 95       	ret

00014758 <SS80_test_extended_status>:
   14758:	9b 01       	movw	r18, r22
   1475a:	43 e0       	ldi	r20, 0x03	; 3
   1475c:	35 95       	asr	r19
   1475e:	27 95       	ror	r18
   14760:	4a 95       	dec	r20
   14762:	e1 f7       	brne	.-8      	; 0x1475c <SS80_test_extended_status+0x4>
   14764:	82 0f       	add	r24, r18
   14766:	93 1f       	adc	r25, r19
   14768:	67 70       	andi	r22, 0x07	; 7
   1476a:	77 27       	eor	r23, r23
   1476c:	20 e8       	ldi	r18, 0x80	; 128
   1476e:	30 e0       	ldi	r19, 0x00	; 0
   14770:	02 c0       	rjmp	.+4      	; 0x14776 <SS80_test_extended_status+0x1e>
   14772:	35 95       	asr	r19
   14774:	27 95       	ror	r18
   14776:	6a 95       	dec	r22
   14778:	e2 f7       	brpl	.-8      	; 0x14772 <SS80_test_extended_status+0x1a>
   1477a:	fc 01       	movw	r30, r24
   1477c:	80 81       	ld	r24, Z
   1477e:	28 23       	and	r18, r24
   14780:	81 e0       	ldi	r24, 0x01	; 1
   14782:	90 e0       	ldi	r25, 0x00	; 0
   14784:	11 f4       	brne	.+4      	; 0x1478a <SS80_test_extended_status+0x32>
   14786:	80 e0       	ldi	r24, 0x00	; 0
   14788:	90 e0       	ldi	r25, 0x00	; 0
   1478a:	08 95       	ret

0001478c <SS80_display_extended_status>:
   1478c:	6f 92       	push	r6
   1478e:	7f 92       	push	r7
   14790:	8f 92       	push	r8
   14792:	ef 92       	push	r14
   14794:	ff 92       	push	r15
   14796:	0f 93       	push	r16
   14798:	1f 93       	push	r17
   1479a:	cf 93       	push	r28
   1479c:	df 93       	push	r29
   1479e:	ad b7       	in	r26, 0x3d	; 61
   147a0:	be b7       	in	r27, 0x3e	; 62
   147a2:	17 97       	sbiw	r26, 0x07	; 7
   147a4:	0f b6       	in	r0, 0x3f	; 63
   147a6:	f8 94       	cli
   147a8:	be bf       	out	0x3e, r27	; 62
   147aa:	0f be       	out	0x3f, r0	; 63
   147ac:	ad bf       	out	0x3d, r26	; 61
   147ae:	fc 01       	movw	r30, r24
   147b0:	ac 01       	movw	r20, r24
   147b2:	48 5f       	subi	r20, 0xF8	; 248
   147b4:	5f 4f       	sbci	r21, 0xFF	; 255
   147b6:	20 e0       	ldi	r18, 0x00	; 0
   147b8:	30 e0       	ldi	r19, 0x00	; 0
   147ba:	a1 91       	ld	r26, Z+
   147bc:	aa 23       	and	r26, r26
   147be:	11 f0       	breq	.+4      	; 0x147c4 <SS80_display_extended_status+0x38>
   147c0:	21 e0       	ldi	r18, 0x01	; 1
   147c2:	30 e0       	ldi	r19, 0x00	; 0
   147c4:	e4 17       	cp	r30, r20
   147c6:	f5 07       	cpc	r31, r21
   147c8:	c1 f7       	brne	.-16     	; 0x147ba <SS80_display_extended_status+0x2e>
   147ca:	23 2b       	or	r18, r19
   147cc:	81 f1       	breq	.+96     	; 0x1482e <SS80_display_extended_status+0xa2>
   147ce:	ec 01       	movw	r28, r24
   147d0:	ed b7       	in	r30, 0x3d	; 61
   147d2:	fe b7       	in	r31, 0x3e	; 62
   147d4:	75 83       	std	Z+5, r23	; 0x05
   147d6:	64 83       	std	Z+4, r22	; 0x04
   147d8:	83 e6       	ldi	r24, 0x63	; 99
   147da:	94 e2       	ldi	r25, 0x24	; 36
   147dc:	a0 e0       	ldi	r26, 0x00	; 0
   147de:	81 83       	std	Z+1, r24	; 0x01
   147e0:	92 83       	std	Z+2, r25	; 0x02
   147e2:	a3 83       	std	Z+3, r26	; 0x03
   147e4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   147e8:	0c e7       	ldi	r16, 0x7C	; 124
   147ea:	12 e0       	ldi	r17, 0x02	; 2
   147ec:	88 e5       	ldi	r24, 0x58	; 88
   147ee:	94 e2       	ldi	r25, 0x24	; 36
   147f0:	3c 01       	movw	r6, r24
   147f2:	81 2c       	mov	r8, r1
   147f4:	f8 01       	movw	r30, r16
   147f6:	e0 80       	ld	r14, Z
   147f8:	f1 80       	ldd	r15, Z+1	; 0x01
   147fa:	ff ef       	ldi	r31, 0xFF	; 255
   147fc:	ef 16       	cp	r14, r31
   147fe:	ff 06       	cpc	r15, r31
   14800:	b1 f0       	breq	.+44     	; 0x1482e <SS80_display_extended_status+0xa2>
   14802:	b7 01       	movw	r22, r14
   14804:	ce 01       	movw	r24, r28
   14806:	a8 df       	rcall	.-176    	; 0x14758 <SS80_test_extended_status>
   14808:	89 2b       	or	r24, r25
   1480a:	71 f0       	breq	.+28     	; 0x14828 <SS80_display_extended_status+0x9c>
   1480c:	f8 01       	movw	r30, r16
   1480e:	82 81       	ldd	r24, Z+2	; 0x02
   14810:	93 81       	ldd	r25, Z+3	; 0x03
   14812:	ed b7       	in	r30, 0x3d	; 61
   14814:	fe b7       	in	r31, 0x3e	; 62
   14816:	97 83       	std	Z+7, r25	; 0x07
   14818:	86 83       	std	Z+6, r24	; 0x06
   1481a:	f5 82       	std	Z+5, r15	; 0x05
   1481c:	e4 82       	std	Z+4, r14	; 0x04
   1481e:	61 82       	std	Z+1, r6	; 0x01
   14820:	72 82       	std	Z+2, r7	; 0x02
   14822:	83 82       	std	Z+3, r8	; 0x03
   14824:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14828:	0c 5f       	subi	r16, 0xFC	; 252
   1482a:	1f 4f       	sbci	r17, 0xFF	; 255
   1482c:	e3 cf       	rjmp	.-58     	; 0x147f4 <SS80_display_extended_status+0x68>
   1482e:	ad b7       	in	r26, 0x3d	; 61
   14830:	be b7       	in	r27, 0x3e	; 62
   14832:	17 96       	adiw	r26, 0x07	; 7
   14834:	0f b6       	in	r0, 0x3f	; 63
   14836:	f8 94       	cli
   14838:	be bf       	out	0x3e, r27	; 62
   1483a:	0f be       	out	0x3f, r0	; 63
   1483c:	ad bf       	out	0x3d, r26	; 61
   1483e:	df 91       	pop	r29
   14840:	cf 91       	pop	r28
   14842:	1f 91       	pop	r17
   14844:	0f 91       	pop	r16
   14846:	ff 90       	pop	r15
   14848:	ef 90       	pop	r14
   1484a:	8f 90       	pop	r8
   1484c:	7f 90       	pop	r7
   1484e:	6f 90       	pop	r6
   14850:	08 95       	ret

00014852 <SS80_send_status>:
   14852:	a9 e1       	ldi	r26, 0x19	; 25
   14854:	b0 e0       	ldi	r27, 0x00	; 0
   14856:	ef e2       	ldi	r30, 0x2F	; 47
   14858:	f4 ea       	ldi	r31, 0xA4	; 164
   1485a:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
   1485e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14862:	85 ff       	sbrs	r24, 5
   14864:	0a c0       	rjmp	.+20     	; 0x1487a <SS80_send_status+0x28>
   14866:	84 e4       	ldi	r24, 0x44	; 68
   14868:	94 e2       	ldi	r25, 0x24	; 36
   1486a:	a0 e0       	ldi	r26, 0x00	; 0
   1486c:	ed b7       	in	r30, 0x3d	; 61
   1486e:	fe b7       	in	r31, 0x3e	; 62
   14870:	81 83       	std	Z+1, r24	; 0x01
   14872:	92 83       	std	Z+2, r25	; 0x02
   14874:	a3 83       	std	Z+3, r26	; 0x03
   14876:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1487a:	ce 01       	movw	r24, r28
   1487c:	04 96       	adiw	r24, 0x04	; 4
   1487e:	7c 01       	movw	r14, r24
   14880:	84 e1       	ldi	r24, 0x14	; 20
   14882:	f7 01       	movw	r30, r14
   14884:	11 92       	st	Z+, r1
   14886:	8a 95       	dec	r24
   14888:	e9 f7       	brne	.-6      	; 0x14884 <SS80_send_status+0x32>
   1488a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1488e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14892:	86 81       	ldd	r24, Z+6	; 0x06
   14894:	20 e1       	ldi	r18, 0x10	; 16
   14896:	82 9f       	mul	r24, r18
   14898:	c0 01       	movw	r24, r0
   1489a:	11 24       	eor	r1, r1
   1489c:	95 81       	ldd	r25, Z+5	; 0x05
   1489e:	9f 70       	andi	r25, 0x0F	; 15
   148a0:	89 2b       	or	r24, r25
   148a2:	8c 83       	std	Y+4, r24	; 0x04
   148a4:	8f ef       	ldi	r24, 0xFF	; 255
   148a6:	8d 83       	std	Y+5, r24	; 0x05
   148a8:	83 81       	ldd	r24, Z+3	; 0x03
   148aa:	86 ff       	sbrs	r24, 6
   148ac:	02 c0       	rjmp	.+4      	; 0x148b2 <SS80_send_status+0x60>
   148ae:	92 e0       	ldi	r25, 0x02	; 2
   148b0:	9e 83       	std	Y+6, r25	; 0x06
   148b2:	82 ff       	sbrs	r24, 2
   148b4:	03 c0       	rjmp	.+6      	; 0x148bc <SS80_send_status+0x6a>
   148b6:	9e 81       	ldd	r25, Y+6	; 0x06
   148b8:	91 60       	ori	r25, 0x01	; 1
   148ba:	9e 83       	std	Y+6, r25	; 0x06
   148bc:	80 ff       	sbrs	r24, 0
   148be:	02 c0       	rjmp	.+4      	; 0x148c4 <SS80_send_status+0x72>
   148c0:	82 e0       	ldi	r24, 0x02	; 2
   148c2:	88 87       	std	Y+8, r24	; 0x08
   148c4:	83 81       	ldd	r24, Z+3	; 0x03
   148c6:	81 ff       	sbrs	r24, 1
   148c8:	03 c0       	rjmp	.+6      	; 0x148d0 <SS80_send_status+0x7e>
   148ca:	88 85       	ldd	r24, Y+8	; 0x08
   148cc:	82 60       	ori	r24, 0x02	; 2
   148ce:	88 87       	std	Y+8, r24	; 0x08
   148d0:	83 81       	ldd	r24, Z+3	; 0x03
   148d2:	83 ff       	sbrs	r24, 3
   148d4:	02 c0       	rjmp	.+4      	; 0x148da <SS80_send_status+0x88>
   148d6:	88 e0       	ldi	r24, 0x08	; 8
   148d8:	8a 87       	std	Y+10, r24	; 0x0a
   148da:	83 81       	ldd	r24, Z+3	; 0x03
   148dc:	94 81       	ldd	r25, Z+4	; 0x04
   148de:	89 2b       	or	r24, r25
   148e0:	59 f4       	brne	.+22     	; 0x148f8 <SS80_send_status+0xa6>
   148e2:	07 81       	ldd	r16, Z+7	; 0x07
   148e4:	10 85       	ldd	r17, Z+8	; 0x08
   148e6:	21 85       	ldd	r18, Z+9	; 0x09
   148e8:	32 85       	ldd	r19, Z+10	; 0x0a
   148ea:	46 e0       	ldi	r20, 0x06	; 6
   148ec:	50 e0       	ldi	r21, 0x00	; 0
   148ee:	6a e0       	ldi	r22, 0x0A	; 10
   148f0:	70 e0       	ldi	r23, 0x00	; 0
   148f2:	c7 01       	movw	r24, r14
   148f4:	0e 94 c3 bc 	call	0x17986	; 0x17986 <V2B_MSB>
   148f8:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   148fc:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14900:	83 81       	ldd	r24, Z+3	; 0x03
   14902:	94 81       	ldd	r25, Z+4	; 0x04
   14904:	89 2b       	or	r24, r25
   14906:	11 f0       	breq	.+4      	; 0x1490c <SS80_send_status+0xba>
   14908:	81 e0       	ldi	r24, 0x01	; 1
   1490a:	82 83       	std	Z+2, r24	; 0x02
   1490c:	80 e0       	ldi	r24, 0x00	; 0
   1490e:	91 e0       	ldi	r25, 0x01	; 1
   14910:	99 8f       	std	Y+25, r25	; 0x19
   14912:	88 8f       	std	Y+24, r24	; 0x18
   14914:	ae 01       	movw	r20, r28
   14916:	48 5e       	subi	r20, 0xE8	; 232
   14918:	5f 4f       	sbci	r21, 0xFF	; 255
   1491a:	64 e1       	ldi	r22, 0x14	; 20
   1491c:	70 e0       	ldi	r23, 0x00	; 0
   1491e:	c7 01       	movw	r24, r14
   14920:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   14924:	44 97       	sbiw	r24, 0x14	; 20
   14926:	71 f0       	breq	.+28     	; 0x14944 <SS80_send_status+0xf2>
   14928:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1492c:	80 ff       	sbrs	r24, 0
   1492e:	0a c0       	rjmp	.+20     	; 0x14944 <SS80_send_status+0xf2>
   14930:	89 e2       	ldi	r24, 0x29	; 41
   14932:	94 e2       	ldi	r25, 0x24	; 36
   14934:	a0 e0       	ldi	r26, 0x00	; 0
   14936:	ed b7       	in	r30, 0x3d	; 61
   14938:	fe b7       	in	r31, 0x3e	; 62
   1493a:	81 83       	std	Z+1, r24	; 0x01
   1493c:	92 83       	std	Z+2, r25	; 0x02
   1493e:	a3 83       	std	Z+3, r26	; 0x03
   14940:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14944:	88 8d       	ldd	r24, Y+24	; 0x18
   14946:	99 8d       	ldd	r25, Y+25	; 0x19
   14948:	88 27       	eor	r24, r24
   1494a:	90 7d       	andi	r25, 0xD0	; 208
   1494c:	69 96       	adiw	r28, 0x19	; 25
   1494e:	e6 e0       	ldi	r30, 0x06	; 6
   14950:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00014954 <SS80_describe>:
   14954:	a7 e0       	ldi	r26, 0x07	; 7
   14956:	b0 e0       	ldi	r27, 0x00	; 0
   14958:	e0 eb       	ldi	r30, 0xB0	; 176
   1495a:	f4 ea       	ldi	r31, 0xA4	; 164
   1495c:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   14960:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14964:	85 ff       	sbrs	r24, 5
   14966:	0a c0       	rjmp	.+20     	; 0x1497c <SS80_describe+0x28>
   14968:	88 e1       	ldi	r24, 0x18	; 24
   1496a:	94 e2       	ldi	r25, 0x24	; 36
   1496c:	a0 e0       	ldi	r26, 0x00	; 0
   1496e:	ed b7       	in	r30, 0x3d	; 61
   14970:	fe b7       	in	r31, 0x3e	; 62
   14972:	81 83       	std	Z+1, r24	; 0x01
   14974:	92 83       	std	Z+2, r25	; 0x02
   14976:	a3 83       	std	Z+3, r26	; 0x03
   14978:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1497c:	1f 82       	std	Y+7, r1	; 0x07
   1497e:	1e 82       	std	Y+6, r1	; 0x06
   14980:	ce 01       	movw	r24, r28
   14982:	04 96       	adiw	r24, 0x04	; 4
   14984:	85 dd       	rcall	.-1270   	; 0x14490 <SS80ControllerPack>
   14986:	6c 81       	ldd	r22, Y+4	; 0x04
   14988:	7d 81       	ldd	r23, Y+5	; 0x05
   1498a:	ae 01       	movw	r20, r28
   1498c:	4a 5f       	subi	r20, 0xFA	; 250
   1498e:	5f 4f       	sbci	r21, 0xFF	; 255
   14990:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   14994:	2c 81       	ldd	r18, Y+4	; 0x04
   14996:	3d 81       	ldd	r19, Y+5	; 0x05
   14998:	82 17       	cp	r24, r18
   1499a:	93 07       	cpc	r25, r19
   1499c:	39 f0       	breq	.+14     	; 0x149ac <SS80_describe+0x58>
   1499e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149a2:	80 ff       	sbrs	r24, 0
   149a4:	3c c0       	rjmp	.+120    	; 0x14a1e <SS80_describe+0xca>
   149a6:	85 ef       	ldi	r24, 0xF5	; 245
   149a8:	93 e2       	ldi	r25, 0x23	; 35
   149aa:	31 c0       	rjmp	.+98     	; 0x14a0e <SS80_describe+0xba>
   149ac:	1f 82       	std	Y+7, r1	; 0x07
   149ae:	1e 82       	std	Y+6, r1	; 0x06
   149b0:	ce 01       	movw	r24, r28
   149b2:	04 96       	adiw	r24, 0x04	; 4
   149b4:	a9 dd       	rcall	.-1198   	; 0x14508 <SS80UnitPack>
   149b6:	6c 81       	ldd	r22, Y+4	; 0x04
   149b8:	7d 81       	ldd	r23, Y+5	; 0x05
   149ba:	ae 01       	movw	r20, r28
   149bc:	4a 5f       	subi	r20, 0xFA	; 250
   149be:	5f 4f       	sbci	r21, 0xFF	; 255
   149c0:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   149c4:	2c 81       	ldd	r18, Y+4	; 0x04
   149c6:	3d 81       	ldd	r19, Y+5	; 0x05
   149c8:	82 17       	cp	r24, r18
   149ca:	93 07       	cpc	r25, r19
   149cc:	39 f0       	breq	.+14     	; 0x149dc <SS80_describe+0x88>
   149ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149d2:	80 ff       	sbrs	r24, 0
   149d4:	24 c0       	rjmp	.+72     	; 0x14a1e <SS80_describe+0xca>
   149d6:	88 ed       	ldi	r24, 0xD8	; 216
   149d8:	93 e2       	ldi	r25, 0x23	; 35
   149da:	19 c0       	rjmp	.+50     	; 0x14a0e <SS80_describe+0xba>
   149dc:	80 e0       	ldi	r24, 0x00	; 0
   149de:	91 e0       	ldi	r25, 0x01	; 1
   149e0:	9f 83       	std	Y+7, r25	; 0x07
   149e2:	8e 83       	std	Y+6, r24	; 0x06
   149e4:	ce 01       	movw	r24, r28
   149e6:	04 96       	adiw	r24, 0x04	; 4
   149e8:	5b de       	rcall	.-842    	; 0x146a0 <SS80VolumePack>
   149ea:	6c 81       	ldd	r22, Y+4	; 0x04
   149ec:	7d 81       	ldd	r23, Y+5	; 0x05
   149ee:	ae 01       	movw	r20, r28
   149f0:	4a 5f       	subi	r20, 0xFA	; 250
   149f2:	5f 4f       	sbci	r21, 0xFF	; 255
   149f4:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   149f8:	2c 81       	ldd	r18, Y+4	; 0x04
   149fa:	3d 81       	ldd	r19, Y+5	; 0x05
   149fc:	82 17       	cp	r24, r18
   149fe:	93 07       	cpc	r25, r19
   14a00:	99 f0       	breq	.+38     	; 0x14a28 <SS80_describe+0xd4>
   14a02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a06:	80 ff       	sbrs	r24, 0
   14a08:	0a c0       	rjmp	.+20     	; 0x14a1e <SS80_describe+0xca>
   14a0a:	89 eb       	ldi	r24, 0xB9	; 185
   14a0c:	93 e2       	ldi	r25, 0x23	; 35
   14a0e:	a0 e0       	ldi	r26, 0x00	; 0
   14a10:	ed b7       	in	r30, 0x3d	; 61
   14a12:	fe b7       	in	r31, 0x3e	; 62
   14a14:	81 83       	std	Z+1, r24	; 0x01
   14a16:	92 83       	std	Z+2, r25	; 0x02
   14a18:	a3 83       	std	Z+3, r26	; 0x03
   14a1a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14a1e:	8e 81       	ldd	r24, Y+6	; 0x06
   14a20:	9f 81       	ldd	r25, Y+7	; 0x07
   14a22:	88 27       	eor	r24, r24
   14a24:	90 7d       	andi	r25, 0xD0	; 208
   14a26:	02 c0       	rjmp	.+4      	; 0x14a2c <SS80_describe+0xd8>
   14a28:	80 e0       	ldi	r24, 0x00	; 0
   14a2a:	90 e0       	ldi	r25, 0x00	; 0
   14a2c:	27 96       	adiw	r28, 0x07	; 7
   14a2e:	e2 e0       	ldi	r30, 0x02	; 2
   14a30:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00014a34 <SS80_Check_Unit>:
   14a34:	00 d0       	rcall	.+0      	; 0x14a36 <SS80_Check_Unit+0x2>
   14a36:	00 d0       	rcall	.+0      	; 0x14a38 <SS80_Check_Unit+0x4>
   14a38:	1f 92       	push	r1
   14a3a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14a3e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14a42:	88 23       	and	r24, r24
   14a44:	c9 f0       	breq	.+50     	; 0x14a78 <SS80_Check_Unit+0x44>
   14a46:	8f 30       	cpi	r24, 0x0F	; 15
   14a48:	b9 f0       	breq	.+46     	; 0x14a78 <SS80_Check_Unit+0x44>
   14a4a:	23 81       	ldd	r18, Z+3	; 0x03
   14a4c:	34 81       	ldd	r19, Z+4	; 0x04
   14a4e:	20 64       	ori	r18, 0x40	; 64
   14a50:	34 83       	std	Z+4, r19	; 0x04
   14a52:	23 83       	std	Z+3, r18	; 0x03
   14a54:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14a58:	90 ff       	sbrs	r25, 0
   14a5a:	0f c0       	rjmp	.+30     	; 0x14a7a <SS80_Check_Unit+0x46>
   14a5c:	90 e0       	ldi	r25, 0x00	; 0
   14a5e:	ed b7       	in	r30, 0x3d	; 61
   14a60:	fe b7       	in	r31, 0x3e	; 62
   14a62:	95 83       	std	Z+5, r25	; 0x05
   14a64:	84 83       	std	Z+4, r24	; 0x04
   14a66:	81 ea       	ldi	r24, 0xA1	; 161
   14a68:	93 e2       	ldi	r25, 0x23	; 35
   14a6a:	a0 e0       	ldi	r26, 0x00	; 0
   14a6c:	81 83       	std	Z+1, r24	; 0x01
   14a6e:	92 83       	std	Z+2, r25	; 0x02
   14a70:	a3 83       	std	Z+3, r26	; 0x03
   14a72:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14a76:	01 c0       	rjmp	.+2      	; 0x14a7a <SS80_Check_Unit+0x46>
   14a78:	85 83       	std	Z+5, r24	; 0x05
   14a7a:	0f 90       	pop	r0
   14a7c:	0f 90       	pop	r0
   14a7e:	0f 90       	pop	r0
   14a80:	0f 90       	pop	r0
   14a82:	0f 90       	pop	r0
   14a84:	08 95       	ret

00014a86 <SS80_Check_Volume>:
   14a86:	00 d0       	rcall	.+0      	; 0x14a88 <SS80_Check_Volume+0x2>
   14a88:	00 d0       	rcall	.+0      	; 0x14a8a <SS80_Check_Volume+0x4>
   14a8a:	1f 92       	push	r1
   14a8c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14a90:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14a94:	88 23       	and	r24, r24
   14a96:	b9 f0       	breq	.+46     	; 0x14ac6 <SS80_Check_Volume+0x40>
   14a98:	23 81       	ldd	r18, Z+3	; 0x03
   14a9a:	34 81       	ldd	r19, Z+4	; 0x04
   14a9c:	20 64       	ori	r18, 0x40	; 64
   14a9e:	34 83       	std	Z+4, r19	; 0x04
   14aa0:	23 83       	std	Z+3, r18	; 0x03
   14aa2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14aa6:	90 ff       	sbrs	r25, 0
   14aa8:	0f c0       	rjmp	.+30     	; 0x14ac8 <SS80_Check_Volume+0x42>
   14aaa:	90 e0       	ldi	r25, 0x00	; 0
   14aac:	ed b7       	in	r30, 0x3d	; 61
   14aae:	fe b7       	in	r31, 0x3e	; 62
   14ab0:	95 83       	std	Z+5, r25	; 0x05
   14ab2:	84 83       	std	Z+4, r24	; 0x04
   14ab4:	87 e8       	ldi	r24, 0x87	; 135
   14ab6:	93 e2       	ldi	r25, 0x23	; 35
   14ab8:	a0 e0       	ldi	r26, 0x00	; 0
   14aba:	81 83       	std	Z+1, r24	; 0x01
   14abc:	92 83       	std	Z+2, r25	; 0x02
   14abe:	a3 83       	std	Z+3, r26	; 0x03
   14ac0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14ac4:	01 c0       	rjmp	.+2      	; 0x14ac8 <SS80_Check_Volume+0x42>
   14ac6:	16 82       	std	Z+6, r1	; 0x06
   14ac8:	0f 90       	pop	r0
   14aca:	0f 90       	pop	r0
   14acc:	0f 90       	pop	r0
   14ace:	0f 90       	pop	r0
   14ad0:	0f 90       	pop	r0
   14ad2:	08 95       	ret

00014ad4 <SS80_Command_State>:
   14ad4:	2f 92       	push	r2
   14ad6:	3f 92       	push	r3
   14ad8:	4f 92       	push	r4
   14ada:	6f 92       	push	r6
   14adc:	7f 92       	push	r7
   14ade:	8f 92       	push	r8
   14ae0:	af 92       	push	r10
   14ae2:	bf 92       	push	r11
   14ae4:	cf 92       	push	r12
   14ae6:	ef 92       	push	r14
   14ae8:	ff 92       	push	r15
   14aea:	0f 93       	push	r16
   14aec:	1f 93       	push	r17
   14aee:	cf 93       	push	r28
   14af0:	df 93       	push	r29
   14af2:	cd b7       	in	r28, 0x3d	; 61
   14af4:	de b7       	in	r29, 0x3e	; 62
   14af6:	66 97       	sbiw	r28, 0x16	; 22
   14af8:	0f b6       	in	r0, 0x3f	; 63
   14afa:	f8 94       	cli
   14afc:	de bf       	out	0x3e, r29	; 62
   14afe:	0f be       	out	0x3f, r0	; 63
   14b00:	cd bf       	out	0x3d, r28	; 61
   14b02:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14b06:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14b0a:	81 81       	ldd	r24, Z+1	; 0x01
   14b0c:	90 e0       	ldi	r25, 0x00	; 0
   14b0e:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
   14b12:	80 e0       	ldi	r24, 0x00	; 0
   14b14:	91 e0       	ldi	r25, 0x01	; 1
   14b16:	99 87       	std	Y+9, r25	; 0x09
   14b18:	88 87       	std	Y+8, r24	; 0x08
   14b1a:	ae 01       	movw	r20, r28
   14b1c:	48 5f       	subi	r20, 0xF8	; 248
   14b1e:	5f 4f       	sbci	r21, 0xFF	; 255
   14b20:	60 e0       	ldi	r22, 0x00	; 0
   14b22:	72 e0       	ldi	r23, 0x02	; 2
   14b24:	82 ef       	ldi	r24, 0xF2	; 242
   14b26:	9c e1       	ldi	r25, 0x1C	; 28
   14b28:	0e 94 1d 89 	call	0x1123a	; 0x1123a <gpib_read_str>
   14b2c:	9b 87       	std	Y+11, r25	; 0x0b
   14b2e:	8a 87       	std	Y+10, r24	; 0x0a
   14b30:	88 85       	ldd	r24, Y+8	; 0x08
   14b32:	99 85       	ldd	r25, Y+9	; 0x09
   14b34:	9c 01       	movw	r18, r24
   14b36:	22 27       	eor	r18, r18
   14b38:	30 7d       	andi	r19, 0xD0	; 208
   14b3a:	23 2b       	or	r18, r19
   14b3c:	79 f0       	breq	.+30     	; 0x14b5c <SS80_Command_State+0x88>
   14b3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b42:	80 ff       	sbrs	r24, 0
   14b44:	21 c2       	rjmp	.+1090   	; 0x14f88 <SS80_Command_State+0x4b4>
   14b46:	81 e6       	ldi	r24, 0x61	; 97
   14b48:	93 e2       	ldi	r25, 0x23	; 35
   14b4a:	a0 e0       	ldi	r26, 0x00	; 0
   14b4c:	ed b7       	in	r30, 0x3d	; 61
   14b4e:	fe b7       	in	r31, 0x3e	; 62
   14b50:	81 83       	std	Z+1, r24	; 0x01
   14b52:	92 83       	std	Z+2, r25	; 0x02
   14b54:	a3 83       	std	Z+3, r26	; 0x03
   14b56:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14b5a:	16 c2       	rjmp	.+1068   	; 0x14f88 <SS80_Command_State+0x4b4>
   14b5c:	2a 85       	ldd	r18, Y+10	; 0x0a
   14b5e:	3b 85       	ldd	r19, Y+11	; 0x0b
   14b60:	23 2b       	or	r18, r19
   14b62:	09 f4       	brne	.+2      	; 0x14b66 <SS80_Command_State+0x92>
   14b64:	16 c2       	rjmp	.+1068   	; 0x14f92 <SS80_Command_State+0x4be>
   14b66:	90 fd       	sbrc	r25, 0
   14b68:	0e c0       	rjmp	.+28     	; 0x14b86 <SS80_Command_State+0xb2>
   14b6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b6e:	80 ff       	sbrs	r24, 0
   14b70:	0a c0       	rjmp	.+20     	; 0x14b86 <SS80_Command_State+0xb2>
   14b72:	88 e4       	ldi	r24, 0x48	; 72
   14b74:	93 e2       	ldi	r25, 0x23	; 35
   14b76:	a0 e0       	ldi	r26, 0x00	; 0
   14b78:	ed b7       	in	r30, 0x3d	; 61
   14b7a:	fe b7       	in	r31, 0x3e	; 62
   14b7c:	81 83       	std	Z+1, r24	; 0x01
   14b7e:	92 83       	std	Z+2, r25	; 0x02
   14b80:	a3 83       	std	Z+3, r26	; 0x03
   14b82:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14b86:	e1 2c       	mov	r14, r1
   14b88:	f1 2c       	mov	r15, r1
   14b8a:	8c e4       	ldi	r24, 0x4C	; 76
   14b8c:	92 e2       	ldi	r25, 0x22	; 34
   14b8e:	9c 01       	movw	r18, r24
   14b90:	40 e0       	ldi	r20, 0x00	; 0
   14b92:	2e 87       	std	Y+14, r18	; 0x0e
   14b94:	3f 87       	std	Y+15, r19	; 0x0f
   14b96:	48 8b       	std	Y+16, r20	; 0x10
   14b98:	81 e7       	ldi	r24, 0x71	; 113
   14b9a:	92 e2       	ldi	r25, 0x22	; 34
   14b9c:	9c 01       	movw	r18, r24
   14b9e:	40 e0       	ldi	r20, 0x00	; 0
   14ba0:	29 8b       	std	Y+17, r18	; 0x11
   14ba2:	3a 8b       	std	Y+18, r19	; 0x12
   14ba4:	4b 8b       	std	Y+19, r20	; 0x13
   14ba6:	8b e8       	ldi	r24, 0x8B	; 139
   14ba8:	92 e2       	ldi	r25, 0x22	; 34
   14baa:	9c 01       	movw	r18, r24
   14bac:	40 e0       	ldi	r20, 0x00	; 0
   14bae:	2c 8b       	std	Y+20, r18	; 0x14
   14bb0:	3d 8b       	std	Y+21, r19	; 0x15
   14bb2:	4e 8b       	std	Y+22, r20	; 0x16
   14bb4:	81 ea       	ldi	r24, 0xA1	; 161
   14bb6:	92 e2       	ldi	r25, 0x22	; 34
   14bb8:	3c 01       	movw	r6, r24
   14bba:	81 2c       	mov	r8, r1
   14bbc:	8f ea       	ldi	r24, 0xAF	; 175
   14bbe:	92 e2       	ldi	r25, 0x22	; 34
   14bc0:	5c 01       	movw	r10, r24
   14bc2:	c1 2c       	mov	r12, r1
   14bc4:	8b ec       	ldi	r24, 0xCB	; 203
   14bc6:	92 e2       	ldi	r25, 0x22	; 34
   14bc8:	1c 01       	movw	r2, r24
   14bca:	41 2c       	mov	r4, r1
   14bcc:	2a 85       	ldd	r18, Y+10	; 0x0a
   14bce:	3b 85       	ldd	r19, Y+11	; 0x0b
   14bd0:	87 01       	movw	r16, r14
   14bd2:	e2 16       	cp	r14, r18
   14bd4:	f3 06       	cpc	r15, r19
   14bd6:	0c f0       	brlt	.+2      	; 0x14bda <SS80_Command_State+0x106>
   14bd8:	b6 c1       	rjmp	.+876    	; 0x14f46 <SS80_Command_State+0x472>
   14bda:	0f 5f       	subi	r16, 0xFF	; 255
   14bdc:	1f 4f       	sbci	r17, 0xFF	; 255
   14bde:	f7 01       	movw	r30, r14
   14be0:	ee 50       	subi	r30, 0x0E	; 14
   14be2:	f3 4e       	sbci	r31, 0xE3	; 227
   14be4:	80 81       	ld	r24, Z
   14be6:	28 2f       	mov	r18, r24
   14be8:	30 e0       	ldi	r19, 0x00	; 0
   14bea:	a9 01       	movw	r20, r18
   14bec:	40 52       	subi	r20, 0x20	; 32
   14bee:	51 09       	sbc	r21, r1
   14bf0:	40 31       	cpi	r20, 0x10	; 16
   14bf2:	51 05       	cpc	r21, r1
   14bf4:	98 f4       	brcc	.+38     	; 0x14c1c <SS80_Command_State+0x148>
   14bf6:	80 52       	subi	r24, 0x20	; 32
   14bf8:	1d df       	rcall	.-454    	; 0x14a34 <SS80_Check_Unit>
   14bfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bfe:	85 ff       	sbrs	r24, 5
   14c00:	a0 c1       	rjmp	.+832    	; 0x14f42 <SS80_Command_State+0x46e>
   14c02:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14c06:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14c0a:	85 81       	ldd	r24, Z+5	; 0x05
   14c0c:	90 e0       	ldi	r25, 0x00	; 0
   14c0e:	ed b7       	in	r30, 0x3d	; 61
   14c10:	fe b7       	in	r31, 0x3e	; 62
   14c12:	95 83       	std	Z+5, r25	; 0x05
   14c14:	84 83       	std	Z+4, r24	; 0x04
   14c16:	82 e3       	ldi	r24, 0x32	; 50
   14c18:	93 e2       	ldi	r25, 0x23	; 35
   14c1a:	19 c0       	rjmp	.+50     	; 0x14c4e <SS80_Command_State+0x17a>
   14c1c:	a9 01       	movw	r20, r18
   14c1e:	40 54       	subi	r20, 0x40	; 64
   14c20:	51 09       	sbc	r21, r1
   14c22:	40 31       	cpi	r20, 0x10	; 16
   14c24:	51 05       	cpc	r21, r1
   14c26:	d0 f4       	brcc	.+52     	; 0x14c5c <SS80_Command_State+0x188>
   14c28:	80 54       	subi	r24, 0x40	; 64
   14c2a:	2d df       	rcall	.-422    	; 0x14a86 <SS80_Check_Volume>
   14c2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c30:	85 ff       	sbrs	r24, 5
   14c32:	87 c1       	rjmp	.+782    	; 0x14f42 <SS80_Command_State+0x46e>
   14c34:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14c38:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14c3c:	86 81       	ldd	r24, Z+6	; 0x06
   14c3e:	90 e0       	ldi	r25, 0x00	; 0
   14c40:	ed b7       	in	r30, 0x3d	; 61
   14c42:	fe b7       	in	r31, 0x3e	; 62
   14c44:	95 83       	std	Z+5, r25	; 0x05
   14c46:	84 83       	std	Z+4, r24	; 0x04
   14c48:	29 e1       	ldi	r18, 0x19	; 25
   14c4a:	33 e2       	ldi	r19, 0x23	; 35
   14c4c:	c9 01       	movw	r24, r18
   14c4e:	a0 e0       	ldi	r26, 0x00	; 0
   14c50:	81 83       	std	Z+1, r24	; 0x01
   14c52:	92 83       	std	Z+2, r25	; 0x02
   14c54:	a3 83       	std	Z+3, r26	; 0x03
   14c56:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14c5a:	73 c1       	rjmp	.+742    	; 0x14f42 <SS80_Command_State+0x46e>
   14c5c:	21 15       	cp	r18, r1
   14c5e:	31 05       	cpc	r19, r1
   14c60:	79 f4       	brne	.+30     	; 0x14c80 <SS80_Command_State+0x1ac>
   14c62:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14c66:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14c6a:	81 e0       	ldi	r24, 0x01	; 1
   14c6c:	90 e0       	ldi	r25, 0x00	; 0
   14c6e:	91 83       	std	Z+1, r25	; 0x01
   14c70:	80 83       	st	Z, r24
   14c72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c76:	85 ff       	sbrs	r24, 5
   14c78:	66 c1       	rjmp	.+716    	; 0x14f46 <SS80_Command_State+0x472>
   14c7a:	81 e0       	ldi	r24, 0x01	; 1
   14c7c:	93 e2       	ldi	r25, 0x23	; 35
   14c7e:	0f c0       	rjmp	.+30     	; 0x14c9e <SS80_Command_State+0x1ca>
   14c80:	22 30       	cpi	r18, 0x02	; 2
   14c82:	31 05       	cpc	r19, r1
   14c84:	a9 f4       	brne	.+42     	; 0x14cb0 <SS80_Command_State+0x1dc>
   14c86:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14c8a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14c8e:	31 83       	std	Z+1, r19	; 0x01
   14c90:	20 83       	st	Z, r18
   14c92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c96:	85 ff       	sbrs	r24, 5
   14c98:	56 c1       	rjmp	.+684    	; 0x14f46 <SS80_Command_State+0x472>
   14c9a:	88 ee       	ldi	r24, 0xE8	; 232
   14c9c:	92 e2       	ldi	r25, 0x22	; 34
   14c9e:	a0 e0       	ldi	r26, 0x00	; 0
   14ca0:	ed b7       	in	r30, 0x3d	; 61
   14ca2:	fe b7       	in	r31, 0x3e	; 62
   14ca4:	81 83       	std	Z+1, r24	; 0x01
   14ca6:	92 83       	std	Z+2, r25	; 0x02
   14ca8:	a3 83       	std	Z+3, r26	; 0x03
   14caa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14cae:	4b c1       	rjmp	.+662    	; 0x14f46 <SS80_Command_State+0x472>
   14cb0:	20 31       	cpi	r18, 0x10	; 16
   14cb2:	31 05       	cpc	r19, r1
   14cb4:	b1 f5       	brne	.+108    	; 0x14d22 <SS80_Command_State+0x24e>
   14cb6:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   14cba:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   14cbe:	3d 87       	std	Y+13, r19	; 0x0d
   14cc0:	2c 87       	std	Y+12, r18	; 0x0c
   14cc2:	46 e0       	ldi	r20, 0x06	; 6
   14cc4:	50 e0       	ldi	r21, 0x00	; 0
   14cc6:	b8 01       	movw	r22, r16
   14cc8:	82 ef       	ldi	r24, 0xF2	; 242
   14cca:	9c e1       	ldi	r25, 0x1C	; 28
   14ccc:	0e 94 ec bc 	call	0x179d8	; 0x179d8 <B2V_MSB>
   14cd0:	ec 85       	ldd	r30, Y+12	; 0x0c
   14cd2:	fd 85       	ldd	r31, Y+13	; 0x0d
   14cd4:	67 83       	std	Z+7, r22	; 0x07
   14cd6:	70 87       	std	Z+8, r23	; 0x08
   14cd8:	81 87       	std	Z+9, r24	; 0x09
   14cda:	92 87       	std	Z+10, r25	; 0x0a
   14cdc:	87 01       	movw	r16, r14
   14cde:	09 5f       	subi	r16, 0xF9	; 249
   14ce0:	1f 4f       	sbci	r17, 0xFF	; 255
   14ce2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ce6:	85 ff       	sbrs	r24, 5
   14ce8:	2c c1       	rjmp	.+600    	; 0x14f42 <SS80_Command_State+0x46e>
   14cea:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   14cee:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   14cf2:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   14cf6:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   14cfa:	fc 01       	movw	r30, r24
   14cfc:	a0 89       	ldd	r26, Z+16	; 0x10
   14cfe:	b1 89       	ldd	r27, Z+17	; 0x11
   14d00:	f9 01       	movw	r30, r18
   14d02:	27 81       	ldd	r18, Z+7	; 0x07
   14d04:	30 85       	ldd	r19, Z+8	; 0x08
   14d06:	41 85       	ldd	r20, Z+9	; 0x09
   14d08:	52 85       	ldd	r21, Z+10	; 0x0a
   14d0a:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
   14d0e:	ed b7       	in	r30, 0x3d	; 61
   14d10:	fe b7       	in	r31, 0x3e	; 62
   14d12:	64 83       	std	Z+4, r22	; 0x04
   14d14:	75 83       	std	Z+5, r23	; 0x05
   14d16:	86 83       	std	Z+6, r24	; 0x06
   14d18:	97 83       	std	Z+7, r25	; 0x07
   14d1a:	21 82       	std	Z+1, r2	; 0x01
   14d1c:	32 82       	std	Z+2, r3	; 0x02
   14d1e:	43 82       	std	Z+3, r4	; 0x03
   14d20:	2e c0       	rjmp	.+92     	; 0x14d7e <SS80_Command_State+0x2aa>
   14d22:	28 31       	cpi	r18, 0x18	; 24
   14d24:	31 05       	cpc	r19, r1
   14d26:	71 f5       	brne	.+92     	; 0x14d84 <SS80_Command_State+0x2b0>
   14d28:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <SS80s>
   14d2c:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <SS80s+0x1>
   14d30:	3d 87       	std	Y+13, r19	; 0x0d
   14d32:	2c 87       	std	Y+12, r18	; 0x0c
   14d34:	44 e0       	ldi	r20, 0x04	; 4
   14d36:	50 e0       	ldi	r21, 0x00	; 0
   14d38:	b8 01       	movw	r22, r16
   14d3a:	82 ef       	ldi	r24, 0xF2	; 242
   14d3c:	9c e1       	ldi	r25, 0x1C	; 28
   14d3e:	0e 94 ec bc 	call	0x179d8	; 0x179d8 <B2V_MSB>
   14d42:	ec 85       	ldd	r30, Y+12	; 0x0c
   14d44:	fd 85       	ldd	r31, Y+13	; 0x0d
   14d46:	63 87       	std	Z+11, r22	; 0x0b
   14d48:	74 87       	std	Z+12, r23	; 0x0c
   14d4a:	85 87       	std	Z+13, r24	; 0x0d
   14d4c:	96 87       	std	Z+14, r25	; 0x0e
   14d4e:	87 01       	movw	r16, r14
   14d50:	0b 5f       	subi	r16, 0xFB	; 251
   14d52:	1f 4f       	sbci	r17, 0xFF	; 255
   14d54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d58:	85 ff       	sbrs	r24, 5
   14d5a:	f3 c0       	rjmp	.+486    	; 0x14f42 <SS80_Command_State+0x46e>
   14d5c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14d60:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14d64:	83 85       	ldd	r24, Z+11	; 0x0b
   14d66:	94 85       	ldd	r25, Z+12	; 0x0c
   14d68:	a5 85       	ldd	r26, Z+13	; 0x0d
   14d6a:	b6 85       	ldd	r27, Z+14	; 0x0e
   14d6c:	ed b7       	in	r30, 0x3d	; 61
   14d6e:	fe b7       	in	r31, 0x3e	; 62
   14d70:	84 83       	std	Z+4, r24	; 0x04
   14d72:	95 83       	std	Z+5, r25	; 0x05
   14d74:	a6 83       	std	Z+6, r26	; 0x06
   14d76:	b7 83       	std	Z+7, r27	; 0x07
   14d78:	a1 82       	std	Z+1, r10	; 0x01
   14d7a:	b2 82       	std	Z+2, r11	; 0x02
   14d7c:	c3 82       	std	Z+3, r12	; 0x03
   14d7e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14d82:	df c0       	rjmp	.+446    	; 0x14f42 <SS80_Command_State+0x46e>
   14d84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d88:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14d8c:	24 33       	cpi	r18, 0x34	; 52
   14d8e:	31 05       	cpc	r19, r1
   14d90:	41 f4       	brne	.+16     	; 0x14da2 <SS80_Command_State+0x2ce>
   14d92:	85 ff       	sbrs	r24, 5
   14d94:	d6 c0       	rjmp	.+428    	; 0x14f42 <SS80_Command_State+0x46e>
   14d96:	ed b7       	in	r30, 0x3d	; 61
   14d98:	fe b7       	in	r31, 0x3e	; 62
   14d9a:	61 82       	std	Z+1, r6	; 0x01
   14d9c:	72 82       	std	Z+2, r7	; 0x02
   14d9e:	83 82       	std	Z+3, r8	; 0x03
   14da0:	2b c0       	rjmp	.+86     	; 0x14df8 <SS80_Command_State+0x324>
   14da2:	29 33       	cpi	r18, 0x39	; 57
   14da4:	31 05       	cpc	r19, r1
   14da6:	49 f4       	brne	.+18     	; 0x14dba <SS80_Command_State+0x2e6>
   14da8:	87 01       	movw	r16, r14
   14daa:	0d 5f       	subi	r16, 0xFD	; 253
   14dac:	1f 4f       	sbci	r17, 0xFF	; 255
   14dae:	85 ff       	sbrs	r24, 5
   14db0:	c8 c0       	rjmp	.+400    	; 0x14f42 <SS80_Command_State+0x46e>
   14db2:	2c 89       	ldd	r18, Y+20	; 0x14
   14db4:	3d 89       	ldd	r19, Y+21	; 0x15
   14db6:	4e 89       	ldd	r20, Y+22	; 0x16
   14db8:	1a c0       	rjmp	.+52     	; 0x14dee <SS80_Command_State+0x31a>
   14dba:	2b 33       	cpi	r18, 0x3B	; 59
   14dbc:	31 05       	cpc	r19, r1
   14dbe:	49 f4       	brne	.+18     	; 0x14dd2 <SS80_Command_State+0x2fe>
   14dc0:	87 01       	movw	r16, r14
   14dc2:	0e 5f       	subi	r16, 0xFE	; 254
   14dc4:	1f 4f       	sbci	r17, 0xFF	; 255
   14dc6:	85 ff       	sbrs	r24, 5
   14dc8:	bc c0       	rjmp	.+376    	; 0x14f42 <SS80_Command_State+0x46e>
   14dca:	29 89       	ldd	r18, Y+17	; 0x11
   14dcc:	3a 89       	ldd	r19, Y+18	; 0x12
   14dce:	4b 89       	ldd	r20, Y+19	; 0x13
   14dd0:	0e c0       	rjmp	.+28     	; 0x14dee <SS80_Command_State+0x31a>
   14dd2:	28 34       	cpi	r18, 0x48	; 72
   14dd4:	31 05       	cpc	r19, r1
   14dd6:	99 f4       	brne	.+38     	; 0x14dfe <SS80_Command_State+0x32a>
   14dd8:	87 01       	movw	r16, r14
   14dda:	0e 5f       	subi	r16, 0xFE	; 254
   14ddc:	1f 4f       	sbci	r17, 0xFF	; 255
   14dde:	80 73       	andi	r24, 0x30	; 48
   14de0:	99 27       	eor	r25, r25
   14de2:	89 2b       	or	r24, r25
   14de4:	09 f4       	brne	.+2      	; 0x14de8 <SS80_Command_State+0x314>
   14de6:	ad c0       	rjmp	.+346    	; 0x14f42 <SS80_Command_State+0x46e>
   14de8:	2e 85       	ldd	r18, Y+14	; 0x0e
   14dea:	3f 85       	ldd	r19, Y+15	; 0x0f
   14dec:	48 89       	ldd	r20, Y+16	; 0x10
   14dee:	ed b7       	in	r30, 0x3d	; 61
   14df0:	fe b7       	in	r31, 0x3e	; 62
   14df2:	21 83       	std	Z+1, r18	; 0x01
   14df4:	32 83       	std	Z+2, r19	; 0x02
   14df6:	43 83       	std	Z+3, r20	; 0x03
   14df8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14dfc:	a2 c0       	rjmp	.+324    	; 0x14f42 <SS80_Command_State+0x46e>
   14dfe:	24 30       	cpi	r18, 0x04	; 4
   14e00:	31 05       	cpc	r19, r1
   14e02:	41 f4       	brne	.+16     	; 0x14e14 <SS80_Command_State+0x340>
   14e04:	80 73       	andi	r24, 0x30	; 48
   14e06:	99 27       	eor	r25, r25
   14e08:	89 2b       	or	r24, r25
   14e0a:	09 f4       	brne	.+2      	; 0x14e0e <SS80_Command_State+0x33a>
   14e0c:	9c c0       	rjmp	.+312    	; 0x14f46 <SS80_Command_State+0x472>
   14e0e:	8b e2       	ldi	r24, 0x2B	; 43
   14e10:	92 e2       	ldi	r25, 0x22	; 34
   14e12:	45 cf       	rjmp	.-374    	; 0x14c9e <SS80_Command_State+0x1ca>
   14e14:	2e 30       	cpi	r18, 0x0E	; 14
   14e16:	31 05       	cpc	r19, r1
   14e18:	29 f4       	brne	.+10     	; 0x14e24 <SS80_Command_State+0x350>
   14e1a:	85 ff       	sbrs	r24, 5
   14e1c:	94 c0       	rjmp	.+296    	; 0x14f46 <SS80_Command_State+0x472>
   14e1e:	85 e1       	ldi	r24, 0x15	; 21
   14e20:	92 e2       	ldi	r25, 0x22	; 34
   14e22:	3d cf       	rjmp	.-390    	; 0x14c9e <SS80_Command_State+0x1ca>
   14e24:	2f 30       	cpi	r18, 0x0F	; 15
   14e26:	31 05       	cpc	r19, r1
   14e28:	29 f4       	brne	.+10     	; 0x14e34 <SS80_Command_State+0x360>
   14e2a:	85 ff       	sbrs	r24, 5
   14e2c:	8c c0       	rjmp	.+280    	; 0x14f46 <SS80_Command_State+0x472>
   14e2e:	88 ef       	ldi	r24, 0xF8	; 248
   14e30:	91 e2       	ldi	r25, 0x21	; 33
   14e32:	35 cf       	rjmp	.-406    	; 0x14c9e <SS80_Command_State+0x1ca>
   14e34:	21 33       	cpi	r18, 0x31	; 49
   14e36:	31 05       	cpc	r19, r1
   14e38:	59 f4       	brne	.+22     	; 0x14e50 <SS80_Command_State+0x37c>
   14e3a:	87 01       	movw	r16, r14
   14e3c:	0d 5f       	subi	r16, 0xFD	; 253
   14e3e:	1f 4f       	sbci	r17, 0xFF	; 255
   14e40:	80 73       	andi	r24, 0x30	; 48
   14e42:	99 27       	eor	r25, r25
   14e44:	89 2b       	or	r24, r25
   14e46:	09 f4       	brne	.+2      	; 0x14e4a <SS80_Command_State+0x376>
   14e48:	7e c0       	rjmp	.+252    	; 0x14f46 <SS80_Command_State+0x472>
   14e4a:	8c ed       	ldi	r24, 0xDC	; 220
   14e4c:	91 e2       	ldi	r25, 0x21	; 33
   14e4e:	27 cf       	rjmp	.-434    	; 0x14c9e <SS80_Command_State+0x1ca>
   14e50:	25 33       	cpi	r18, 0x35	; 53
   14e52:	31 05       	cpc	r19, r1
   14e54:	69 f4       	brne	.+26     	; 0x14e70 <SS80_Command_State+0x39c>
   14e56:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14e5a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14e5e:	24 e0       	ldi	r18, 0x04	; 4
   14e60:	30 e0       	ldi	r19, 0x00	; 0
   14e62:	31 83       	std	Z+1, r19	; 0x01
   14e64:	20 83       	st	Z, r18
   14e66:	85 ff       	sbrs	r24, 5
   14e68:	6e c0       	rjmp	.+220    	; 0x14f46 <SS80_Command_State+0x472>
   14e6a:	8b ec       	ldi	r24, 0xCB	; 203
   14e6c:	91 e2       	ldi	r25, 0x21	; 33
   14e6e:	17 cf       	rjmp	.-466    	; 0x14c9e <SS80_Command_State+0x1ca>
   14e70:	27 33       	cpi	r18, 0x37	; 55
   14e72:	31 05       	cpc	r19, r1
   14e74:	59 f4       	brne	.+22     	; 0x14e8c <SS80_Command_State+0x3b8>
   14e76:	87 01       	movw	r16, r14
   14e78:	0d 5f       	subi	r16, 0xFD	; 253
   14e7a:	1f 4f       	sbci	r17, 0xFF	; 255
   14e7c:	80 73       	andi	r24, 0x30	; 48
   14e7e:	99 27       	eor	r25, r25
   14e80:	89 2b       	or	r24, r25
   14e82:	09 f4       	brne	.+2      	; 0x14e86 <SS80_Command_State+0x3b2>
   14e84:	60 c0       	rjmp	.+192    	; 0x14f46 <SS80_Command_State+0x472>
   14e86:	8d ea       	ldi	r24, 0xAD	; 173
   14e88:	91 e2       	ldi	r25, 0x21	; 33
   14e8a:	09 cf       	rjmp	.-494    	; 0x14c9e <SS80_Command_State+0x1ca>
   14e8c:	2e 33       	cpi	r18, 0x3E	; 62
   14e8e:	31 05       	cpc	r19, r1
   14e90:	c1 f4       	brne	.+48     	; 0x14ec2 <SS80_Command_State+0x3ee>
   14e92:	80 73       	andi	r24, 0x30	; 48
   14e94:	99 27       	eor	r25, r25
   14e96:	89 2b       	or	r24, r25
   14e98:	81 f0       	breq	.+32     	; 0x14eba <SS80_Command_State+0x3e6>
   14e9a:	8e e8       	ldi	r24, 0x8E	; 142
   14e9c:	91 e2       	ldi	r25, 0x21	; 33
   14e9e:	a0 e0       	ldi	r26, 0x00	; 0
   14ea0:	ed b7       	in	r30, 0x3d	; 61
   14ea2:	fe b7       	in	r31, 0x3e	; 62
   14ea4:	81 83       	std	Z+1, r24	; 0x01
   14ea6:	92 83       	std	Z+2, r25	; 0x02
   14ea8:	a3 83       	std	Z+3, r26	; 0x03
   14eaa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14eae:	69 e7       	ldi	r22, 0x79	; 121
   14eb0:	70 e1       	ldi	r23, 0x10	; 16
   14eb2:	c8 01       	movw	r24, r16
   14eb4:	8e 50       	subi	r24, 0x0E	; 14
   14eb6:	93 4e       	sbci	r25, 0xE3	; 227
   14eb8:	69 dc       	rcall	.-1838   	; 0x1478c <SS80_display_extended_status>
   14eba:	87 01       	movw	r16, r14
   14ebc:	07 5f       	subi	r16, 0xF7	; 247
   14ebe:	1f 4f       	sbci	r17, 0xFF	; 255
   14ec0:	42 c0       	rjmp	.+132    	; 0x14f46 <SS80_Command_State+0x472>
   14ec2:	2c 34       	cpi	r18, 0x4C	; 76
   14ec4:	31 05       	cpc	r19, r1
   14ec6:	39 f4       	brne	.+14     	; 0x14ed6 <SS80_Command_State+0x402>
   14ec8:	80 73       	andi	r24, 0x30	; 48
   14eca:	99 27       	eor	r25, r25
   14ecc:	89 2b       	or	r24, r25
   14ece:	d9 f1       	breq	.+118    	; 0x14f46 <SS80_Command_State+0x472>
   14ed0:	83 e7       	ldi	r24, 0x73	; 115
   14ed2:	91 e2       	ldi	r25, 0x21	; 33
   14ed4:	e4 ce       	rjmp	.-568    	; 0x14c9e <SS80_Command_State+0x1ca>
   14ed6:	2d 34       	cpi	r18, 0x4D	; 77
   14ed8:	31 05       	cpc	r19, r1
   14eda:	39 f4       	brne	.+14     	; 0x14eea <SS80_Command_State+0x416>
   14edc:	80 73       	andi	r24, 0x30	; 48
   14ede:	99 27       	eor	r25, r25
   14ee0:	89 2b       	or	r24, r25
   14ee2:	89 f1       	breq	.+98     	; 0x14f46 <SS80_Command_State+0x472>
   14ee4:	8a e5       	ldi	r24, 0x5A	; 90
   14ee6:	91 e2       	ldi	r25, 0x21	; 33
   14ee8:	da ce       	rjmp	.-588    	; 0x14c9e <SS80_Command_State+0x1ca>
   14eea:	2d 30       	cpi	r18, 0x0D	; 13
   14eec:	31 05       	cpc	r19, r1
   14eee:	69 f4       	brne	.+26     	; 0x14f0a <SS80_Command_State+0x436>
   14ef0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   14ef4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   14ef8:	23 e0       	ldi	r18, 0x03	; 3
   14efa:	30 e0       	ldi	r19, 0x00	; 0
   14efc:	31 83       	std	Z+1, r19	; 0x01
   14efe:	20 83       	st	Z, r18
   14f00:	85 ff       	sbrs	r24, 5
   14f02:	21 c0       	rjmp	.+66     	; 0x14f46 <SS80_Command_State+0x472>
   14f04:	83 e4       	ldi	r24, 0x43	; 67
   14f06:	91 e2       	ldi	r25, 0x21	; 33
   14f08:	ca ce       	rjmp	.-620    	; 0x14c9e <SS80_Command_State+0x1ca>
   14f0a:	23 33       	cpi	r18, 0x33	; 51
   14f0c:	31 05       	cpc	r19, r1
   14f0e:	51 f4       	brne	.+20     	; 0x14f24 <SS80_Command_State+0x450>
   14f10:	87 01       	movw	r16, r14
   14f12:	0c 5f       	subi	r16, 0xFC	; 252
   14f14:	1f 4f       	sbci	r17, 0xFF	; 255
   14f16:	80 73       	andi	r24, 0x30	; 48
   14f18:	99 27       	eor	r25, r25
   14f1a:	89 2b       	or	r24, r25
   14f1c:	a1 f0       	breq	.+40     	; 0x14f46 <SS80_Command_State+0x472>
   14f1e:	80 e2       	ldi	r24, 0x20	; 32
   14f20:	91 e2       	ldi	r25, 0x21	; 33
   14f22:	bd ce       	rjmp	.-646    	; 0x14c9e <SS80_Command_State+0x1ca>
   14f24:	80 ff       	sbrs	r24, 0
   14f26:	28 c0       	rjmp	.+80     	; 0x14f78 <SS80_Command_State+0x4a4>
   14f28:	ed b7       	in	r30, 0x3d	; 61
   14f2a:	fe b7       	in	r31, 0x3e	; 62
   14f2c:	35 83       	std	Z+5, r19	; 0x05
   14f2e:	24 83       	std	Z+4, r18	; 0x04
   14f30:	80 e0       	ldi	r24, 0x00	; 0
   14f32:	91 e2       	ldi	r25, 0x21	; 33
   14f34:	a0 e0       	ldi	r26, 0x00	; 0
   14f36:	81 83       	std	Z+1, r24	; 0x01
   14f38:	92 83       	std	Z+2, r25	; 0x02
   14f3a:	a3 83       	std	Z+3, r26	; 0x03
   14f3c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14f40:	02 c0       	rjmp	.+4      	; 0x14f46 <SS80_Command_State+0x472>
   14f42:	78 01       	movw	r14, r16
   14f44:	43 ce       	rjmp	.-890    	; 0x14bcc <SS80_Command_State+0xf8>
   14f46:	8a 85       	ldd	r24, Y+10	; 0x0a
   14f48:	9b 85       	ldd	r25, Y+11	; 0x0b
   14f4a:	08 17       	cp	r16, r24
   14f4c:	19 07       	cpc	r17, r25
   14f4e:	a1 f0       	breq	.+40     	; 0x14f78 <SS80_Command_State+0x4a4>
   14f50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f54:	80 ff       	sbrs	r24, 0
   14f56:	10 c0       	rjmp	.+32     	; 0x14f78 <SS80_Command_State+0x4a4>
   14f58:	2a 85       	ldd	r18, Y+10	; 0x0a
   14f5a:	3b 85       	ldd	r19, Y+11	; 0x0b
   14f5c:	ed b7       	in	r30, 0x3d	; 61
   14f5e:	fe b7       	in	r31, 0x3e	; 62
   14f60:	37 83       	std	Z+7, r19	; 0x07
   14f62:	26 83       	std	Z+6, r18	; 0x06
   14f64:	15 83       	std	Z+5, r17	; 0x05
   14f66:	04 83       	std	Z+4, r16	; 0x04
   14f68:	88 ec       	ldi	r24, 0xC8	; 200
   14f6a:	90 e2       	ldi	r25, 0x20	; 32
   14f6c:	a0 e0       	ldi	r26, 0x00	; 0
   14f6e:	81 83       	std	Z+1, r24	; 0x01
   14f70:	92 83       	std	Z+2, r25	; 0x02
   14f72:	a3 83       	std	Z+3, r26	; 0x03
   14f74:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   14f78:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   14f7c:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   14f80:	81 81       	ldd	r24, Z+1	; 0x01
   14f82:	90 e0       	ldi	r25, 0x00	; 0
   14f84:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   14f88:	88 85       	ldd	r24, Y+8	; 0x08
   14f8a:	99 85       	ldd	r25, Y+9	; 0x09
   14f8c:	88 27       	eor	r24, r24
   14f8e:	90 7d       	andi	r25, 0xD0	; 208
   14f90:	02 c0       	rjmp	.+4      	; 0x14f96 <SS80_Command_State+0x4c2>
   14f92:	80 e0       	ldi	r24, 0x00	; 0
   14f94:	90 e0       	ldi	r25, 0x00	; 0
   14f96:	66 96       	adiw	r28, 0x16	; 22
   14f98:	0f b6       	in	r0, 0x3f	; 63
   14f9a:	f8 94       	cli
   14f9c:	de bf       	out	0x3e, r29	; 62
   14f9e:	0f be       	out	0x3f, r0	; 63
   14fa0:	cd bf       	out	0x3d, r28	; 61
   14fa2:	df 91       	pop	r29
   14fa4:	cf 91       	pop	r28
   14fa6:	1f 91       	pop	r17
   14fa8:	0f 91       	pop	r16
   14faa:	ff 90       	pop	r15
   14fac:	ef 90       	pop	r14
   14fae:	cf 90       	pop	r12
   14fb0:	bf 90       	pop	r11
   14fb2:	af 90       	pop	r10
   14fb4:	8f 90       	pop	r8
   14fb6:	7f 90       	pop	r7
   14fb8:	6f 90       	pop	r6
   14fba:	4f 90       	pop	r4
   14fbc:	3f 90       	pop	r3
   14fbe:	2f 90       	pop	r2
   14fc0:	08 95       	ret

00014fc2 <SS80_cmd_seek>:
   14fc2:	a7 e0       	ldi	r26, 0x07	; 7
   14fc4:	b0 e0       	ldi	r27, 0x00	; 0
   14fc6:	e7 ee       	ldi	r30, 0xE7	; 231
   14fc8:	f7 ea       	ldi	r31, 0xA7	; 167
   14fca:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x4>
   14fce:	c0 91 6e 19 	lds	r28, 0x196E	; 0x80196e <SS80s>
   14fd2:	d0 91 6f 19 	lds	r29, 0x196F	; 0x80196f <SS80s+0x1>
   14fd6:	8f 80       	ldd	r8, Y+7	; 0x07
   14fd8:	98 84       	ldd	r9, Y+8	; 0x08
   14fda:	a9 84       	ldd	r10, Y+9	; 0x09
   14fdc:	ba 84       	ldd	r11, Y+10	; 0x0a
   14fde:	00 91 70 19 	lds	r16, 0x1970	; 0x801970 <SS80p>
   14fe2:	10 91 71 19 	lds	r17, 0x1971	; 0x801971 <SS80p+0x1>
   14fe6:	f8 01       	movw	r30, r16
   14fe8:	c0 88       	ldd	r12, Z+16	; 0x10
   14fea:	d1 88       	ldd	r13, Z+17	; 0x11
   14fec:	e1 2c       	mov	r14, r1
   14fee:	f1 2c       	mov	r15, r1
   14ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
   14ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
   14ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
   14ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
   14ff8:	a7 01       	movw	r20, r14
   14ffa:	96 01       	movw	r18, r12
   14ffc:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
   15000:	da 01       	movw	r26, r20
   15002:	c9 01       	movw	r24, r18
   15004:	88 0d       	add	r24, r8
   15006:	99 1d       	adc	r25, r9
   15008:	aa 1d       	adc	r26, r10
   1500a:	bb 1d       	adc	r27, r11
   1500c:	f8 01       	movw	r30, r16
   1500e:	46 a0       	ldd	r4, Z+38	; 0x26
   15010:	57 a0       	ldd	r5, Z+39	; 0x27
   15012:	60 a4       	ldd	r6, Z+40	; 0x28
   15014:	71 a4       	ldd	r7, Z+41	; 0x29
   15016:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1501a:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1501e:	48 16       	cp	r4, r24
   15020:	59 06       	cpc	r5, r25
   15022:	6a 06       	cpc	r6, r26
   15024:	7b 06       	cpc	r7, r27
   15026:	f0 f4       	brcc	.+60     	; 0x15064 <SS80_cmd_seek+0xa2>
   15028:	81 e0       	ldi	r24, 0x01	; 1
   1502a:	8a 83       	std	Y+2, r24	; 0x02
   1502c:	8b 81       	ldd	r24, Y+3	; 0x03
   1502e:	9c 81       	ldd	r25, Y+4	; 0x04
   15030:	84 60       	ori	r24, 0x04	; 4
   15032:	9c 83       	std	Y+4, r25	; 0x04
   15034:	8b 83       	std	Y+3, r24	; 0x03
   15036:	40 ff       	sbrs	r20, 0
   15038:	31 c0       	rjmp	.+98     	; 0x1509c <SS80_cmd_seek+0xda>
   1503a:	a0 89       	ldd	r26, Z+16	; 0x10
   1503c:	b1 89       	ldd	r27, Z+17	; 0x11
   1503e:	a5 01       	movw	r20, r10
   15040:	94 01       	movw	r18, r8
   15042:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
   15046:	ed b7       	in	r30, 0x3d	; 61
   15048:	fe b7       	in	r31, 0x3e	; 62
   1504a:	64 83       	std	Z+4, r22	; 0x04
   1504c:	75 83       	std	Z+5, r23	; 0x05
   1504e:	86 83       	std	Z+6, r24	; 0x06
   15050:	97 83       	std	Z+7, r25	; 0x07
   15052:	85 e8       	ldi	r24, 0x85	; 133
   15054:	9f e1       	ldi	r25, 0x1F	; 31
   15056:	a0 e0       	ldi	r26, 0x00	; 0
   15058:	81 83       	std	Z+1, r24	; 0x01
   1505a:	92 83       	std	Z+2, r25	; 0x02
   1505c:	a3 83       	std	Z+3, r26	; 0x03
   1505e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15062:	1c c0       	rjmp	.+56     	; 0x1509c <SS80_cmd_seek+0xda>
   15064:	ca 01       	movw	r24, r20
   15066:	80 72       	andi	r24, 0x20	; 32
   15068:	99 27       	eor	r25, r25
   1506a:	45 ff       	sbrs	r20, 5
   1506c:	19 c0       	rjmp	.+50     	; 0x150a0 <SS80_cmd_seek+0xde>
   1506e:	a5 01       	movw	r20, r10
   15070:	94 01       	movw	r18, r8
   15072:	c7 01       	movw	r24, r14
   15074:	b6 01       	movw	r22, r12
   15076:	0e 94 3d e2 	call	0x1c47a	; 0x1c47a <__mulsi3>
   1507a:	ed b7       	in	r30, 0x3d	; 61
   1507c:	fe b7       	in	r31, 0x3e	; 62
   1507e:	64 83       	std	Z+4, r22	; 0x04
   15080:	75 83       	std	Z+5, r23	; 0x05
   15082:	86 83       	std	Z+6, r24	; 0x06
   15084:	97 83       	std	Z+7, r25	; 0x07
   15086:	81 e7       	ldi	r24, 0x71	; 113
   15088:	9f e1       	ldi	r25, 0x1F	; 31
   1508a:	a0 e0       	ldi	r26, 0x00	; 0
   1508c:	81 83       	std	Z+1, r24	; 0x01
   1508e:	92 83       	std	Z+2, r25	; 0x02
   15090:	a3 83       	std	Z+3, r26	; 0x03
   15092:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15096:	80 e0       	ldi	r24, 0x00	; 0
   15098:	90 e0       	ldi	r25, 0x00	; 0
   1509a:	02 c0       	rjmp	.+4      	; 0x150a0 <SS80_cmd_seek+0xde>
   1509c:	81 e0       	ldi	r24, 0x01	; 1
   1509e:	90 e0       	ldi	r25, 0x00	; 0
   150a0:	cd b7       	in	r28, 0x3d	; 61
   150a2:	de b7       	in	r29, 0x3e	; 62
   150a4:	27 96       	adiw	r28, 0x07	; 7
   150a6:	e0 e1       	ldi	r30, 0x10	; 16
   150a8:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x4>

000150ac <SS80_locate_and_write>:
   150ac:	a3 e1       	ldi	r26, 0x13	; 19
   150ae:	b0 e0       	ldi	r27, 0x00	; 0
   150b0:	ec e5       	ldi	r30, 0x5C	; 92
   150b2:	f8 ea       	ldi	r31, 0xA8	; 168
   150b4:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   150b8:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   150bc:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>
   150c0:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   150c4:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   150c8:	fc 01       	movw	r30, r24
   150ca:	a0 89       	ldd	r26, Z+16	; 0x10
   150cc:	b1 89       	ldd	r27, Z+17	; 0x11
   150ce:	f8 01       	movw	r30, r16
   150d0:	27 81       	ldd	r18, Z+7	; 0x07
   150d2:	30 85       	ldd	r19, Z+8	; 0x08
   150d4:	41 85       	ldd	r20, Z+9	; 0x09
   150d6:	52 85       	ldd	r21, Z+10	; 0x0a
   150d8:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
   150dc:	4b 01       	movw	r8, r22
   150de:	5c 01       	movw	r10, r24
   150e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150e4:	85 ff       	sbrs	r24, 5
   150e6:	16 c0       	rjmp	.+44     	; 0x15114 <SS80_locate_and_write+0x68>
   150e8:	83 85       	ldd	r24, Z+11	; 0x0b
   150ea:	94 85       	ldd	r25, Z+12	; 0x0c
   150ec:	a5 85       	ldd	r26, Z+13	; 0x0d
   150ee:	b6 85       	ldd	r27, Z+14	; 0x0e
   150f0:	ed b7       	in	r30, 0x3d	; 61
   150f2:	fe b7       	in	r31, 0x3e	; 62
   150f4:	80 87       	std	Z+8, r24	; 0x08
   150f6:	91 87       	std	Z+9, r25	; 0x09
   150f8:	a2 87       	std	Z+10, r26	; 0x0a
   150fa:	b3 87       	std	Z+11, r27	; 0x0b
   150fc:	84 82       	std	Z+4, r8	; 0x04
   150fe:	95 82       	std	Z+5, r9	; 0x05
   15100:	a6 82       	std	Z+6, r10	; 0x06
   15102:	b7 82       	std	Z+7, r11	; 0x07
   15104:	88 e0       	ldi	r24, 0x08	; 8
   15106:	95 e2       	ldi	r25, 0x25	; 37
   15108:	a0 e0       	ldi	r26, 0x00	; 0
   1510a:	81 83       	std	Z+1, r24	; 0x01
   1510c:	92 83       	std	Z+2, r25	; 0x02
   1510e:	a3 83       	std	Z+3, r26	; 0x03
   15110:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15114:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15118:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1511c:	12 82       	std	Z+2, r1	; 0x02
   1511e:	54 98       	cbi	0x0a, 4	; 10
   15120:	4c 99       	sbic	0x09, 4	; 9
   15122:	03 c0       	rjmp	.+6      	; 0x1512a <SS80_locate_and_write+0x7e>
   15124:	80 e0       	ldi	r24, 0x00	; 0
   15126:	90 e1       	ldi	r25, 0x10	; 16
   15128:	4f c1       	rjmp	.+670    	; 0x153c8 <SS80_locate_and_write+0x31c>
   1512a:	4b df       	rcall	.-362    	; 0x14fc2 <SS80_cmd_seek>
   1512c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15130:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15134:	89 2b       	or	r24, r25
   15136:	41 f0       	breq	.+16     	; 0x15148 <SS80_locate_and_write+0x9c>
   15138:	83 81       	ldd	r24, Z+3	; 0x03
   1513a:	94 81       	ldd	r25, Z+4	; 0x04
   1513c:	82 60       	ori	r24, 0x02	; 2
   1513e:	94 83       	std	Z+4, r25	; 0x04
   15140:	83 83       	std	Z+3, r24	; 0x03
   15142:	01 e0       	ldi	r16, 0x01	; 1
   15144:	10 e0       	ldi	r17, 0x00	; 0
   15146:	02 c0       	rjmp	.+4      	; 0x1514c <SS80_locate_and_write+0xa0>
   15148:	00 e0       	ldi	r16, 0x00	; 0
   1514a:	10 e0       	ldi	r17, 0x00	; 0
   1514c:	23 84       	ldd	r2, Z+11	; 0x0b
   1514e:	34 84       	ldd	r3, Z+12	; 0x0c
   15150:	1d 86       	std	Y+13, r1	; 0x0d
   15152:	1c 86       	std	Y+12, r1	; 0x0c
   15154:	41 2c       	mov	r4, r1
   15156:	51 2c       	mov	r5, r1
   15158:	32 01       	movw	r6, r4
   1515a:	8b eb       	ldi	r24, 0xBB	; 187
   1515c:	94 e2       	ldi	r25, 0x24	; 36
   1515e:	9c 01       	movw	r18, r24
   15160:	40 e0       	ldi	r20, 0x00	; 0
   15162:	2e 87       	std	Y+14, r18	; 0x0e
   15164:	3f 87       	std	Y+15, r19	; 0x0f
   15166:	48 8b       	std	Y+16, r20	; 0x10
   15168:	81 ee       	ldi	r24, 0xE1	; 225
   1516a:	94 e2       	ldi	r25, 0x24	; 36
   1516c:	9c 01       	movw	r18, r24
   1516e:	40 e0       	ldi	r20, 0x00	; 0
   15170:	29 8b       	std	Y+17, r18	; 0x11
   15172:	3a 8b       	std	Y+18, r19	; 0x12
   15174:	4b 8b       	std	Y+19, r20	; 0x13
   15176:	12 14       	cp	r1, r2
   15178:	13 04       	cpc	r1, r3
   1517a:	0c f0       	brlt	.+2      	; 0x1517e <SS80_locate_and_write+0xd2>
   1517c:	f5 c0       	rjmp	.+490    	; 0x15368 <SS80_locate_and_write+0x2bc>
   1517e:	54 98       	cbi	0x0a, 4	; 10
   15180:	4c 9b       	sbis	0x09, 4	; 9
   15182:	d0 cf       	rjmp	.-96     	; 0x15124 <SS80_locate_and_write+0x78>
   15184:	71 01       	movw	r14, r2
   15186:	31 e0       	ldi	r19, 0x01	; 1
   15188:	23 16       	cp	r2, r19
   1518a:	33 06       	cpc	r3, r19
   1518c:	1c f0       	brlt	.+6      	; 0x15194 <SS80_locate_and_write+0xe8>
   1518e:	e1 2c       	mov	r14, r1
   15190:	ff 24       	eor	r15, r15
   15192:	f3 94       	inc	r15
   15194:	e2 ef       	ldi	r30, 0xF2	; 242
   15196:	fc e1       	ldi	r31, 0x1C	; 28
   15198:	20 e0       	ldi	r18, 0x00	; 0
   1519a:	32 e0       	ldi	r19, 0x02	; 2
   1519c:	11 92       	st	Z+, r1
   1519e:	21 50       	subi	r18, 0x01	; 1
   151a0:	30 40       	sbci	r19, 0x00	; 0
   151a2:	e1 f7       	brne	.-8      	; 0x1519c <SS80_locate_and_write+0xf0>
   151a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151a8:	87 fd       	sbrc	r24, 7
   151aa:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   151ae:	ae 01       	movw	r20, r28
   151b0:	44 5f       	subi	r20, 0xF4	; 244
   151b2:	5f 4f       	sbci	r21, 0xFF	; 255
   151b4:	b7 01       	movw	r22, r14
   151b6:	82 ef       	ldi	r24, 0xF2	; 242
   151b8:	9c e1       	ldi	r25, 0x1C	; 28
   151ba:	0e 94 1d 89 	call	0x1123a	; 0x1123a <gpib_read_str>
   151be:	6c 01       	movw	r12, r24
   151c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151c4:	87 ff       	sbrs	r24, 7
   151c6:	04 c0       	rjmp	.+8      	; 0x151d0 <SS80_locate_and_write+0x124>
   151c8:	85 e9       	ldi	r24, 0x95	; 149
   151ca:	90 e1       	ldi	r25, 0x10	; 16
   151cc:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   151d0:	ce 14       	cp	r12, r14
   151d2:	df 04       	cpc	r13, r15
   151d4:	39 f1       	breq	.+78     	; 0x15224 <SS80_locate_and_write+0x178>
   151d6:	8c 85       	ldd	r24, Y+12	; 0x0c
   151d8:	9d 85       	ldd	r25, Y+13	; 0x0d
   151da:	9c 01       	movw	r18, r24
   151dc:	22 27       	eor	r18, r18
   151de:	30 7d       	andi	r19, 0xD0	; 208
   151e0:	23 2b       	or	r18, r19
   151e2:	d1 f0       	breq	.+52     	; 0x15218 <SS80_locate_and_write+0x16c>
   151e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151e8:	80 ff       	sbrs	r24, 0
   151ea:	0a c0       	rjmp	.+20     	; 0x15200 <SS80_locate_and_write+0x154>
   151ec:	85 ef       	ldi	r24, 0xF5	; 245
   151ee:	94 e2       	ldi	r25, 0x24	; 36
   151f0:	a0 e0       	ldi	r26, 0x00	; 0
   151f2:	ed b7       	in	r30, 0x3d	; 61
   151f4:	fe b7       	in	r31, 0x3e	; 62
   151f6:	81 83       	std	Z+1, r24	; 0x01
   151f8:	92 83       	std	Z+2, r25	; 0x02
   151fa:	a3 83       	std	Z+3, r26	; 0x03
   151fc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15200:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15204:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15208:	83 81       	ldd	r24, Z+3	; 0x03
   1520a:	94 81       	ldd	r25, Z+4	; 0x04
   1520c:	82 60       	ori	r24, 0x02	; 2
   1520e:	94 83       	std	Z+4, r25	; 0x04
   15210:	83 83       	std	Z+3, r24	; 0x03
   15212:	81 e0       	ldi	r24, 0x01	; 1
   15214:	82 83       	std	Z+2, r24	; 0x02
   15216:	99 c0       	rjmp	.+306    	; 0x1534a <SS80_locate_and_write+0x29e>
   15218:	c1 14       	cp	r12, r1
   1521a:	d1 04       	cpc	r13, r1
   1521c:	09 f0       	breq	.+2      	; 0x15220 <SS80_locate_and_write+0x174>
   1521e:	d0 c0       	rjmp	.+416    	; 0x153c0 <SS80_locate_and_write+0x314>
   15220:	90 fd       	sbrc	r25, 0
   15222:	93 c0       	rjmp	.+294    	; 0x1534a <SS80_locate_and_write+0x29e>
   15224:	01 15       	cp	r16, r1
   15226:	11 05       	cpc	r17, r1
   15228:	09 f0       	breq	.+2      	; 0x1522c <SS80_locate_and_write+0x180>
   1522a:	84 c0       	rjmp	.+264    	; 0x15334 <SS80_locate_and_write+0x288>
   1522c:	c1 14       	cp	r12, r1
   1522e:	d1 04       	cpc	r13, r1
   15230:	09 f4       	brne	.+2      	; 0x15234 <SS80_locate_and_write+0x188>
   15232:	82 c0       	rjmp	.+260    	; 0x15338 <SS80_locate_and_write+0x28c>
   15234:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15238:	86 fd       	sbrc	r24, 6
   1523a:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   1523e:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <SS80s>
   15242:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <SS80s+0x1>
   15246:	f3 e0       	ldi	r31, 0x03	; 3
   15248:	ef 0e       	add	r14, r31
   1524a:	f1 1c       	adc	r15, r1
   1524c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15250:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15254:	86 01       	movw	r16, r12
   15256:	22 ef       	ldi	r18, 0xF2	; 242
   15258:	3c e1       	ldi	r19, 0x1C	; 28
   1525a:	b5 01       	movw	r22, r10
   1525c:	a4 01       	movw	r20, r8
   1525e:	82 81       	ldd	r24, Z+2	; 0x02
   15260:	93 81       	ldd	r25, Z+3	; 0x03
   15262:	0e 94 5e 83 	call	0x106bc	; 0x106bc <dbf_open_write>
   15266:	7c 01       	movw	r14, r24
   15268:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1526c:	86 ff       	sbrs	r24, 6
   1526e:	04 c0       	rjmp	.+8      	; 0x15278 <SS80_locate_and_write+0x1cc>
   15270:	80 ea       	ldi	r24, 0xA0	; 160
   15272:	90 e1       	ldi	r25, 0x10	; 16
   15274:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   15278:	ce 14       	cp	r12, r14
   1527a:	df 04       	cpc	r13, r15
   1527c:	39 f1       	breq	.+78     	; 0x152cc <SS80_locate_and_write+0x220>
   1527e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15282:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15286:	83 81       	ldd	r24, Z+3	; 0x03
   15288:	94 81       	ldd	r25, Z+4	; 0x04
   1528a:	82 60       	ori	r24, 0x02	; 2
   1528c:	94 83       	std	Z+4, r25	; 0x04
   1528e:	83 83       	std	Z+3, r24	; 0x03
   15290:	0e 94 34 6e 	call	0xdc68	; 0xdc68 <mmc_wp_status>
   15294:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15298:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1529c:	89 2b       	or	r24, r25
   1529e:	29 f0       	breq	.+10     	; 0x152aa <SS80_locate_and_write+0x1fe>
   152a0:	83 81       	ldd	r24, Z+3	; 0x03
   152a2:	94 81       	ldd	r25, Z+4	; 0x04
   152a4:	88 60       	ori	r24, 0x08	; 8
   152a6:	94 83       	std	Z+4, r25	; 0x04
   152a8:	83 83       	std	Z+3, r24	; 0x03
   152aa:	21 e0       	ldi	r18, 0x01	; 1
   152ac:	22 83       	std	Z+2, r18	; 0x02
   152ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152b2:	80 ff       	sbrs	r24, 0
   152b4:	27 c0       	rjmp	.+78     	; 0x15304 <SS80_locate_and_write+0x258>
   152b6:	89 89       	ldd	r24, Y+17	; 0x11
   152b8:	9a 89       	ldd	r25, Y+18	; 0x12
   152ba:	ab 89       	ldd	r26, Y+19	; 0x13
   152bc:	ed b7       	in	r30, 0x3d	; 61
   152be:	fe b7       	in	r31, 0x3e	; 62
   152c0:	81 83       	std	Z+1, r24	; 0x01
   152c2:	92 83       	std	Z+2, r25	; 0x02
   152c4:	a3 83       	std	Z+3, r26	; 0x03
   152c6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   152ca:	1c c0       	rjmp	.+56     	; 0x15304 <SS80_locate_and_write+0x258>
   152cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152d0:	85 ff       	sbrs	r24, 5
   152d2:	0c c0       	rjmp	.+24     	; 0x152ec <SS80_locate_and_write+0x240>
   152d4:	ed b7       	in	r30, 0x3d	; 61
   152d6:	fe b7       	in	r31, 0x3e	; 62
   152d8:	d5 82       	std	Z+5, r13	; 0x05
   152da:	c4 82       	std	Z+4, r12	; 0x04
   152dc:	2e 85       	ldd	r18, Y+14	; 0x0e
   152de:	3f 85       	ldd	r19, Y+15	; 0x0f
   152e0:	48 89       	ldd	r20, Y+16	; 0x10
   152e2:	21 83       	std	Z+1, r18	; 0x01
   152e4:	32 83       	std	Z+2, r19	; 0x02
   152e6:	43 83       	std	Z+3, r20	; 0x03
   152e8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   152ec:	c6 01       	movw	r24, r12
   152ee:	0d 2c       	mov	r0, r13
   152f0:	00 0c       	add	r0, r0
   152f2:	aa 0b       	sbc	r26, r26
   152f4:	bb 0b       	sbc	r27, r27
   152f6:	88 0e       	add	r8, r24
   152f8:	99 1e       	adc	r9, r25
   152fa:	aa 1e       	adc	r10, r26
   152fc:	bb 1e       	adc	r11, r27
   152fe:	00 e0       	ldi	r16, 0x00	; 0
   15300:	10 e0       	ldi	r17, 0x00	; 0
   15302:	05 c0       	rjmp	.+10     	; 0x1530e <SS80_locate_and_write+0x262>
   15304:	ec 14       	cp	r14, r12
   15306:	fd 04       	cpc	r15, r13
   15308:	64 f0       	brlt	.+24     	; 0x15322 <SS80_locate_and_write+0x276>
   1530a:	01 e0       	ldi	r16, 0x01	; 1
   1530c:	10 e0       	ldi	r17, 0x00	; 0
   1530e:	c7 01       	movw	r24, r14
   15310:	0f 2c       	mov	r0, r15
   15312:	00 0c       	add	r0, r0
   15314:	aa 0b       	sbc	r26, r26
   15316:	bb 0b       	sbc	r27, r27
   15318:	48 0e       	add	r4, r24
   1531a:	59 1e       	adc	r5, r25
   1531c:	6a 1e       	adc	r6, r26
   1531e:	7b 1e       	adc	r7, r27
   15320:	0b c0       	rjmp	.+22     	; 0x15338 <SS80_locate_and_write+0x28c>
   15322:	c6 01       	movw	r24, r12
   15324:	0d 2c       	mov	r0, r13
   15326:	00 0c       	add	r0, r0
   15328:	aa 0b       	sbc	r26, r26
   1532a:	bb 0b       	sbc	r27, r27
   1532c:	48 0e       	add	r4, r24
   1532e:	59 1e       	adc	r5, r25
   15330:	6a 1e       	adc	r6, r26
   15332:	7b 1e       	adc	r7, r27
   15334:	01 e0       	ldi	r16, 0x01	; 1
   15336:	10 e0       	ldi	r17, 0x00	; 0
   15338:	2c 18       	sub	r2, r12
   1533a:	3d 08       	sbc	r3, r13
   1533c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1533e:	9d 85       	ldd	r25, Y+13	; 0x0d
   15340:	90 ff       	sbrs	r25, 0
   15342:	19 cf       	rjmp	.-462    	; 0x15176 <SS80_locate_and_write+0xca>
   15344:	12 14       	cp	r1, r2
   15346:	13 04       	cpc	r1, r3
   15348:	7c f4       	brge	.+30     	; 0x15368 <SS80_locate_and_write+0x2bc>
   1534a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1534e:	80 ff       	sbrs	r24, 0
   15350:	1d c0       	rjmp	.+58     	; 0x1538c <SS80_locate_and_write+0x2e0>
   15352:	83 e9       	ldi	r24, 0x93	; 147
   15354:	94 e2       	ldi	r25, 0x24	; 36
   15356:	a0 e0       	ldi	r26, 0x00	; 0
   15358:	ed b7       	in	r30, 0x3d	; 61
   1535a:	fe b7       	in	r31, 0x3e	; 62
   1535c:	81 83       	std	Z+1, r24	; 0x01
   1535e:	92 83       	std	Z+2, r25	; 0x02
   15360:	a3 83       	std	Z+3, r26	; 0x03
   15362:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15366:	12 c0       	rjmp	.+36     	; 0x1538c <SS80_locate_and_write+0x2e0>
   15368:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1536c:	85 ff       	sbrs	r24, 5
   1536e:	0e c0       	rjmp	.+28     	; 0x1538c <SS80_locate_and_write+0x2e0>
   15370:	ed b7       	in	r30, 0x3d	; 61
   15372:	fe b7       	in	r31, 0x3e	; 62
   15374:	44 82       	std	Z+4, r4	; 0x04
   15376:	55 82       	std	Z+5, r5	; 0x05
   15378:	66 82       	std	Z+6, r6	; 0x06
   1537a:	77 82       	std	Z+7, r7	; 0x07
   1537c:	88 e6       	ldi	r24, 0x68	; 104
   1537e:	94 e2       	ldi	r25, 0x24	; 36
   15380:	a0 e0       	ldi	r26, 0x00	; 0
   15382:	81 83       	std	Z+1, r24	; 0x01
   15384:	92 83       	std	Z+2, r25	; 0x02
   15386:	a3 83       	std	Z+3, r26	; 0x03
   15388:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1538c:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   15390:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>
   15394:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15398:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1539c:	20 89       	ldd	r18, Z+16	; 0x10
   1539e:	31 89       	ldd	r19, Z+17	; 0x11
   153a0:	40 e0       	ldi	r20, 0x00	; 0
   153a2:	50 e0       	ldi	r21, 0x00	; 0
   153a4:	c5 01       	movw	r24, r10
   153a6:	b4 01       	movw	r22, r8
   153a8:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
   153ac:	f8 01       	movw	r30, r16
   153ae:	27 83       	std	Z+7, r18	; 0x07
   153b0:	30 87       	std	Z+8, r19	; 0x08
   153b2:	41 87       	std	Z+9, r20	; 0x09
   153b4:	52 87       	std	Z+10, r21	; 0x0a
   153b6:	8c 85       	ldd	r24, Y+12	; 0x0c
   153b8:	9d 85       	ldd	r25, Y+13	; 0x0d
   153ba:	88 27       	eor	r24, r24
   153bc:	90 7d       	andi	r25, 0xD0	; 208
   153be:	04 c0       	rjmp	.+8      	; 0x153c8 <SS80_locate_and_write+0x31c>
   153c0:	01 2b       	or	r16, r17
   153c2:	09 f4       	brne	.+2      	; 0x153c6 <SS80_locate_and_write+0x31a>
   153c4:	37 cf       	rjmp	.-402    	; 0x15234 <SS80_locate_and_write+0x188>
   153c6:	b6 cf       	rjmp	.-148    	; 0x15334 <SS80_locate_and_write+0x288>
   153c8:	63 96       	adiw	r28, 0x13	; 19
   153ca:	e2 e1       	ldi	r30, 0x12	; 18
   153cc:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

000153d0 <SS80_Report>:
   153d0:	a8 e0       	ldi	r26, 0x08	; 8
   153d2:	b0 e0       	ldi	r27, 0x00	; 0
   153d4:	ee ee       	ldi	r30, 0xEE	; 238
   153d6:	f9 ea       	ldi	r31, 0xA9	; 169
   153d8:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   153dc:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   153e0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   153e4:	82 81       	ldd	r24, Z+2	; 0x02
   153e6:	88 87       	std	Y+8, r24	; 0x08
   153e8:	80 e0       	ldi	r24, 0x00	; 0
   153ea:	91 e0       	ldi	r25, 0x01	; 1
   153ec:	9f 83       	std	Y+7, r25	; 0x07
   153ee:	8e 83       	std	Y+6, r24	; 0x06
   153f0:	ae 01       	movw	r20, r28
   153f2:	4a 5f       	subi	r20, 0xFA	; 250
   153f4:	5f 4f       	sbci	r21, 0xFF	; 255
   153f6:	61 e0       	ldi	r22, 0x01	; 1
   153f8:	70 e0       	ldi	r23, 0x00	; 0
   153fa:	ce 01       	movw	r24, r28
   153fc:	08 96       	adiw	r24, 0x08	; 8
   153fe:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   15402:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15406:	01 97       	sbiw	r24, 0x01	; 1
   15408:	89 f0       	breq	.+34     	; 0x1542c <SS80_Report+0x5c>
   1540a:	20 ff       	sbrs	r18, 0
   1540c:	0a c0       	rjmp	.+20     	; 0x15422 <SS80_Report+0x52>
   1540e:	87 e5       	ldi	r24, 0x57	; 87
   15410:	9f e1       	ldi	r25, 0x1F	; 31
   15412:	a0 e0       	ldi	r26, 0x00	; 0
   15414:	ed b7       	in	r30, 0x3d	; 61
   15416:	fe b7       	in	r31, 0x3e	; 62
   15418:	81 83       	std	Z+1, r24	; 0x01
   1541a:	92 83       	std	Z+2, r25	; 0x02
   1541c:	a3 83       	std	Z+3, r26	; 0x03
   1541e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15422:	8e 81       	ldd	r24, Y+6	; 0x06
   15424:	9f 81       	ldd	r25, Y+7	; 0x07
   15426:	88 27       	eor	r24, r24
   15428:	90 7d       	andi	r25, 0xD0	; 208
   1542a:	1b c0       	rjmp	.+54     	; 0x15462 <SS80_Report+0x92>
   1542c:	25 ff       	sbrs	r18, 5
   1542e:	12 c0       	rjmp	.+36     	; 0x15454 <SS80_Report+0x84>
   15430:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15434:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15438:	82 81       	ldd	r24, Z+2	; 0x02
   1543a:	90 e0       	ldi	r25, 0x00	; 0
   1543c:	ed b7       	in	r30, 0x3d	; 61
   1543e:	fe b7       	in	r31, 0x3e	; 62
   15440:	95 83       	std	Z+5, r25	; 0x05
   15442:	84 83       	std	Z+4, r24	; 0x04
   15444:	84 e4       	ldi	r24, 0x44	; 68
   15446:	9f e1       	ldi	r25, 0x1F	; 31
   15448:	a0 e0       	ldi	r26, 0x00	; 0
   1544a:	81 83       	std	Z+1, r24	; 0x01
   1544c:	92 83       	std	Z+2, r25	; 0x02
   1544e:	a3 83       	std	Z+3, r26	; 0x03
   15450:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15454:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15458:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1545c:	12 82       	std	Z+2, r1	; 0x02
   1545e:	80 e0       	ldi	r24, 0x00	; 0
   15460:	90 e0       	ldi	r25, 0x00	; 0
   15462:	28 96       	adiw	r28, 0x08	; 8
   15464:	e2 e0       	ldi	r30, 0x02	; 2
   15466:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0001546a <Clear_Common>:
   1546a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1546e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15472:	25 81       	ldd	r18, Z+5	; 0x05
   15474:	30 e0       	ldi	r19, 0x00	; 0
   15476:	28 17       	cp	r18, r24
   15478:	39 07       	cpc	r19, r25
   1547a:	19 f0       	breq	.+6      	; 0x15482 <Clear_Common+0x18>
   1547c:	0f 97       	sbiw	r24, 0x0f	; 15
   1547e:	99 f4       	brne	.+38     	; 0x154a6 <Clear_Common+0x3c>
   15480:	03 c0       	rjmp	.+6      	; 0x15488 <Clear_Common+0x1e>
   15482:	2f 30       	cpi	r18, 0x0F	; 15
   15484:	31 05       	cpc	r19, r1
   15486:	09 f4       	brne	.+2      	; 0x1548a <Clear_Common+0x20>
   15488:	15 82       	std	Z+5, r1	; 0x05
   1548a:	16 82       	std	Z+6, r1	; 0x06
   1548c:	17 82       	std	Z+7, r1	; 0x07
   1548e:	10 86       	std	Z+8, r1	; 0x08
   15490:	11 86       	std	Z+9, r1	; 0x09
   15492:	12 86       	std	Z+10, r1	; 0x0a
   15494:	13 86       	std	Z+11, r1	; 0x0b
   15496:	14 86       	std	Z+12, r1	; 0x0c
   15498:	15 86       	std	Z+13, r1	; 0x0d
   1549a:	16 86       	std	Z+14, r1	; 0x0e
   1549c:	11 82       	std	Z+1, r1	; 0x01
   1549e:	10 82       	st	Z, r1
   154a0:	14 82       	std	Z+4, r1	; 0x04
   154a2:	13 82       	std	Z+3, r1	; 0x03
   154a4:	12 82       	std	Z+2, r1	; 0x02
   154a6:	08 95       	ret

000154a8 <SS80_init>:
   154a8:	a5 e0       	ldi	r26, 0x05	; 5
   154aa:	b0 e0       	ldi	r27, 0x00	; 0
   154ac:	ea e5       	ldi	r30, 0x5A	; 90
   154ae:	fa ea       	ldi	r31, 0xAA	; 170
   154b0:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
   154b4:	05 ed       	ldi	r16, 0xD5	; 213
   154b6:	10 e2       	ldi	r17, 0x20	; 32
   154b8:	cb e0       	ldi	r28, 0x0B	; 11
   154ba:	d0 e0       	ldi	r29, 0x00	; 0
   154bc:	82 e0       	ldi	r24, 0x02	; 2
   154be:	f8 2e       	mov	r15, r24
   154c0:	81 e1       	ldi	r24, 0x11	; 17
   154c2:	96 e2       	ldi	r25, 0x26	; 38
   154c4:	6c 01       	movw	r12, r24
   154c6:	e1 2c       	mov	r14, r1
   154c8:	f8 01       	movw	r30, r16
   154ca:	80 81       	ld	r24, Z
   154cc:	83 30       	cpi	r24, 0x03	; 3
   154ce:	29 f5       	brne	.+74     	; 0x1551a <SS80_init+0x72>
   154d0:	ce 01       	movw	r24, r28
   154d2:	0e 94 cd 95 	call	0x12b9a	; 0x12b9a <set_active_device>
   154d6:	89 2b       	or	r24, r25
   154d8:	01 f1       	breq	.+64     	; 0x1551a <SS80_init+0x72>
   154da:	8f e0       	ldi	r24, 0x0F	; 15
   154dc:	90 e0       	ldi	r25, 0x00	; 0
   154de:	c5 df       	rcall	.-118    	; 0x1546a <Clear_Common>
   154e0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   154e4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   154e8:	f2 82       	std	Z+2, r15	; 0x02
   154ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154ee:	85 ff       	sbrs	r24, 5
   154f0:	0c c0       	rjmp	.+24     	; 0x1550a <SS80_init+0x62>
   154f2:	f8 01       	movw	r30, r16
   154f4:	81 81       	ldd	r24, Z+1	; 0x01
   154f6:	90 e0       	ldi	r25, 0x00	; 0
   154f8:	ed b7       	in	r30, 0x3d	; 61
   154fa:	fe b7       	in	r31, 0x3e	; 62
   154fc:	95 83       	std	Z+5, r25	; 0x05
   154fe:	84 83       	std	Z+4, r24	; 0x04
   15500:	c1 82       	std	Z+1, r12	; 0x01
   15502:	d2 82       	std	Z+2, r13	; 0x02
   15504:	e3 82       	std	Z+3, r14	; 0x03
   15506:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1550a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1550e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15512:	81 81       	ldd	r24, Z+1	; 0x01
   15514:	90 e0       	ldi	r25, 0x00	; 0
   15516:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
   1551a:	21 97       	sbiw	r28, 0x01	; 1
   1551c:	0b 52       	subi	r16, 0x2B	; 43
   1551e:	11 09       	sbc	r17, r1
   15520:	cf 3f       	cpi	r28, 0xFF	; 255
   15522:	ff ef       	ldi	r31, 0xFF	; 255
   15524:	df 07       	cpc	r29, r31
   15526:	81 f6       	brne	.-96     	; 0x154c8 <SS80_init+0x20>
   15528:	cd b7       	in	r28, 0x3d	; 61
   1552a:	de b7       	in	r29, 0x3e	; 62
   1552c:	25 96       	adiw	r28, 0x05	; 5
   1552e:	e8 e0       	ldi	r30, 0x08	; 8
   15530:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

00015534 <SS80_Channel_Independent_Clear>:
   15534:	9a df       	rcall	.-204    	; 0x1546a <Clear_Common>
   15536:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1553a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1553e:	81 81       	ldd	r24, Z+1	; 0x01
   15540:	90 e0       	ldi	r25, 0x00	; 0
   15542:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   15546:	80 e0       	ldi	r24, 0x00	; 0
   15548:	90 e0       	ldi	r25, 0x00	; 0
   1554a:	08 95       	ret

0001554c <SS80_Universal_Device_Clear>:
   1554c:	8f e0       	ldi	r24, 0x0F	; 15
   1554e:	90 e0       	ldi	r25, 0x00	; 0
   15550:	8c df       	rcall	.-232    	; 0x1546a <Clear_Common>
   15552:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15556:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1555a:	81 81       	ldd	r24, Z+1	; 0x01
   1555c:	90 e0       	ldi	r25, 0x00	; 0
   1555e:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   15562:	80 e0       	ldi	r24, 0x00	; 0
   15564:	90 e0       	ldi	r25, 0x00	; 0
   15566:	08 95       	ret

00015568 <SS80_Selected_Device_Clear>:
   15568:	cf 93       	push	r28
   1556a:	df 93       	push	r29
   1556c:	00 d0       	rcall	.+0      	; 0x1556e <SS80_Selected_Device_Clear+0x6>
   1556e:	1f 92       	push	r1
   15570:	ec 01       	movw	r28, r24
   15572:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15576:	85 ff       	sbrs	r24, 5
   15578:	0a c0       	rjmp	.+20     	; 0x1558e <SS80_Selected_Device_Clear+0x26>
   1557a:	88 e3       	ldi	r24, 0x38	; 56
   1557c:	9f e1       	ldi	r25, 0x1F	; 31
   1557e:	a0 e0       	ldi	r26, 0x00	; 0
   15580:	ed b7       	in	r30, 0x3d	; 61
   15582:	fe b7       	in	r31, 0x3e	; 62
   15584:	81 83       	std	Z+1, r24	; 0x01
   15586:	92 83       	std	Z+2, r25	; 0x02
   15588:	a3 83       	std	Z+3, r26	; 0x03
   1558a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1558e:	ce 01       	movw	r24, r28
   15590:	6c df       	rcall	.-296    	; 0x1546a <Clear_Common>
   15592:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15596:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1559a:	81 81       	ldd	r24, Z+1	; 0x01
   1559c:	90 e0       	ldi	r25, 0x00	; 0
   1559e:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   155a2:	80 e0       	ldi	r24, 0x00	; 0
   155a4:	90 e0       	ldi	r25, 0x00	; 0
   155a6:	cd b7       	in	r28, 0x3d	; 61
   155a8:	de b7       	in	r29, 0x3e	; 62
   155aa:	23 96       	adiw	r28, 0x03	; 3
   155ac:	e2 e0       	ldi	r30, 0x02	; 2
   155ae:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000155b2 <SS80_Amigo_Clear>:
   155b2:	a6 e0       	ldi	r26, 0x06	; 6
   155b4:	b0 e0       	ldi	r27, 0x00	; 0
   155b6:	ef ed       	ldi	r30, 0xDF	; 223
   155b8:	fa ea       	ldi	r31, 0xAA	; 170
   155ba:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   155be:	1d 82       	std	Y+5, r1	; 0x05
   155c0:	1c 82       	std	Y+4, r1	; 0x04
   155c2:	ae 01       	movw	r20, r28
   155c4:	4c 5f       	subi	r20, 0xFC	; 252
   155c6:	5f 4f       	sbci	r21, 0xFF	; 255
   155c8:	61 e0       	ldi	r22, 0x01	; 1
   155ca:	70 e0       	ldi	r23, 0x00	; 0
   155cc:	ce 01       	movw	r24, r28
   155ce:	06 96       	adiw	r24, 0x06	; 6
   155d0:	0e 94 1d 89 	call	0x1123a	; 0x1123a <gpib_read_str>
   155d4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   155d8:	01 97       	sbiw	r24, 0x01	; 1
   155da:	89 f0       	breq	.+34     	; 0x155fe <SS80_Amigo_Clear+0x4c>
   155dc:	20 ff       	sbrs	r18, 0
   155de:	0a c0       	rjmp	.+20     	; 0x155f4 <SS80_Amigo_Clear+0x42>
   155e0:	85 e2       	ldi	r24, 0x25	; 37
   155e2:	9f e1       	ldi	r25, 0x1F	; 31
   155e4:	a0 e0       	ldi	r26, 0x00	; 0
   155e6:	ed b7       	in	r30, 0x3d	; 61
   155e8:	fe b7       	in	r31, 0x3e	; 62
   155ea:	81 83       	std	Z+1, r24	; 0x01
   155ec:	92 83       	std	Z+2, r25	; 0x02
   155ee:	a3 83       	std	Z+3, r26	; 0x03
   155f0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   155f4:	8c 81       	ldd	r24, Y+4	; 0x04
   155f6:	9d 81       	ldd	r25, Y+5	; 0x05
   155f8:	88 27       	eor	r24, r24
   155fa:	90 7d       	andi	r25, 0xD0	; 208
   155fc:	19 c0       	rjmp	.+50     	; 0x15630 <SS80_Amigo_Clear+0x7e>
   155fe:	25 ff       	sbrs	r18, 5
   15600:	0a c0       	rjmp	.+20     	; 0x15616 <SS80_Amigo_Clear+0x64>
   15602:	86 e1       	ldi	r24, 0x16	; 22
   15604:	9f e1       	ldi	r25, 0x1F	; 31
   15606:	a0 e0       	ldi	r26, 0x00	; 0
   15608:	ed b7       	in	r30, 0x3d	; 61
   1560a:	fe b7       	in	r31, 0x3e	; 62
   1560c:	81 83       	std	Z+1, r24	; 0x01
   1560e:	92 83       	std	Z+2, r25	; 0x02
   15610:	a3 83       	std	Z+3, r26	; 0x03
   15612:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15616:	8f e0       	ldi	r24, 0x0F	; 15
   15618:	90 e0       	ldi	r25, 0x00	; 0
   1561a:	27 df       	rcall	.-434    	; 0x1546a <Clear_Common>
   1561c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15620:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15624:	81 81       	ldd	r24, Z+1	; 0x01
   15626:	90 e0       	ldi	r25, 0x00	; 0
   15628:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   1562c:	80 e0       	ldi	r24, 0x00	; 0
   1562e:	90 e0       	ldi	r25, 0x00	; 0
   15630:	26 96       	adiw	r28, 0x06	; 6
   15632:	e2 e0       	ldi	r30, 0x02	; 2
   15634:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00015638 <SS80_Cancel>:
   15638:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1563c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15640:	11 82       	std	Z+1, r1	; 0x01
   15642:	10 82       	st	Z, r1
   15644:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15648:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1564c:	81 81       	ldd	r24, Z+1	; 0x01
   1564e:	90 e0       	ldi	r25, 0x00	; 0
   15650:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   15654:	80 e0       	ldi	r24, 0x00	; 0
   15656:	90 e0       	ldi	r25, 0x00	; 0
   15658:	08 95       	ret

0001565a <SS80_Transparent_State>:
   1565a:	a9 e0       	ldi	r26, 0x09	; 9
   1565c:	b0 e0       	ldi	r27, 0x00	; 0
   1565e:	e3 e3       	ldi	r30, 0x33	; 51
   15660:	fb ea       	ldi	r31, 0xAB	; 171
   15662:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
   15666:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   1566a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   1566e:	81 81       	ldd	r24, Z+1	; 0x01
   15670:	90 e0       	ldi	r25, 0x00	; 0
   15672:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
   15676:	80 e0       	ldi	r24, 0x00	; 0
   15678:	91 e0       	ldi	r25, 0x01	; 1
   1567a:	99 87       	std	Y+9, r25	; 0x09
   1567c:	88 87       	std	Y+8, r24	; 0x08
   1567e:	ae 01       	movw	r20, r28
   15680:	48 5f       	subi	r20, 0xF8	; 248
   15682:	5f 4f       	sbci	r21, 0xFF	; 255
   15684:	60 e0       	ldi	r22, 0x00	; 0
   15686:	72 e0       	ldi	r23, 0x02	; 2
   15688:	82 ef       	ldi	r24, 0xF2	; 242
   1568a:	9c e1       	ldi	r25, 0x1C	; 28
   1568c:	0e 94 1d 89 	call	0x1123a	; 0x1123a <gpib_read_str>
   15690:	7c 01       	movw	r14, r24
   15692:	88 85       	ldd	r24, Y+8	; 0x08
   15694:	99 85       	ldd	r25, Y+9	; 0x09
   15696:	9c 01       	movw	r18, r24
   15698:	22 27       	eor	r18, r18
   1569a:	30 7d       	andi	r19, 0xD0	; 208
   1569c:	23 2b       	or	r18, r19
   1569e:	79 f0       	breq	.+30     	; 0x156be <SS80_Transparent_State+0x64>
   156a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156a4:	80 ff       	sbrs	r24, 0
   156a6:	da c0       	rjmp	.+436    	; 0x1585c <SS80_Transparent_State+0x202>
   156a8:	85 eb       	ldi	r24, 0xB5	; 181
   156aa:	90 e2       	ldi	r25, 0x20	; 32
   156ac:	a0 e0       	ldi	r26, 0x00	; 0
   156ae:	ed b7       	in	r30, 0x3d	; 61
   156b0:	fe b7       	in	r31, 0x3e	; 62
   156b2:	81 83       	std	Z+1, r24	; 0x01
   156b4:	92 83       	std	Z+2, r25	; 0x02
   156b6:	a3 83       	std	Z+3, r26	; 0x03
   156b8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   156bc:	cf c0       	rjmp	.+414    	; 0x1585c <SS80_Transparent_State+0x202>
   156be:	e1 14       	cp	r14, r1
   156c0:	f1 04       	cpc	r15, r1
   156c2:	09 f4       	brne	.+2      	; 0x156c6 <SS80_Transparent_State+0x6c>
   156c4:	d0 c0       	rjmp	.+416    	; 0x15866 <SS80_Transparent_State+0x20c>
   156c6:	90 fd       	sbrc	r25, 0
   156c8:	0e c0       	rjmp	.+28     	; 0x156e6 <SS80_Transparent_State+0x8c>
   156ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156ce:	80 ff       	sbrs	r24, 0
   156d0:	0a c0       	rjmp	.+20     	; 0x156e6 <SS80_Transparent_State+0x8c>
   156d2:	8c e9       	ldi	r24, 0x9C	; 156
   156d4:	90 e2       	ldi	r25, 0x20	; 32
   156d6:	a0 e0       	ldi	r26, 0x00	; 0
   156d8:	ed b7       	in	r30, 0x3d	; 61
   156da:	fe b7       	in	r31, 0x3e	; 62
   156dc:	81 83       	std	Z+1, r24	; 0x01
   156de:	92 83       	std	Z+2, r25	; 0x02
   156e0:	a3 83       	std	Z+3, r26	; 0x03
   156e2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   156e6:	82 ef       	ldi	r24, 0xF2	; 242
   156e8:	a8 2e       	mov	r10, r24
   156ea:	8c e1       	ldi	r24, 0x1C	; 28
   156ec:	b8 2e       	mov	r11, r24
   156ee:	00 e0       	ldi	r16, 0x00	; 0
   156f0:	10 e0       	ldi	r17, 0x00	; 0
   156f2:	0e 15       	cp	r16, r14
   156f4:	1f 05       	cpc	r17, r15
   156f6:	0c f0       	brlt	.+2      	; 0x156fa <SS80_Transparent_State+0xa0>
   156f8:	9c c0       	rjmp	.+312    	; 0x15832 <SS80_Transparent_State+0x1d8>
   156fa:	68 01       	movw	r12, r16
   156fc:	ff ef       	ldi	r31, 0xFF	; 255
   156fe:	cf 1a       	sub	r12, r31
   15700:	df 0a       	sbc	r13, r31
   15702:	f5 01       	movw	r30, r10
   15704:	81 91       	ld	r24, Z+
   15706:	5f 01       	movw	r10, r30
   15708:	28 2f       	mov	r18, r24
   1570a:	30 e0       	ldi	r19, 0x00	; 0
   1570c:	a9 01       	movw	r20, r18
   1570e:	40 52       	subi	r20, 0x20	; 32
   15710:	51 09       	sbc	r21, r1
   15712:	40 31       	cpi	r20, 0x10	; 16
   15714:	51 05       	cpc	r21, r1
   15716:	20 f4       	brcc	.+8      	; 0x15720 <SS80_Transparent_State+0xc6>
   15718:	80 52       	subi	r24, 0x20	; 32
   1571a:	8c d9       	rcall	.-3304   	; 0x14a34 <SS80_Check_Unit>
   1571c:	86 01       	movw	r16, r12
   1571e:	e9 cf       	rjmp	.-46     	; 0x156f2 <SS80_Transparent_State+0x98>
   15720:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15724:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15728:	21 30       	cpi	r18, 0x01	; 1
   1572a:	31 05       	cpc	r19, r1
   1572c:	c9 f4       	brne	.+50     	; 0x15760 <SS80_Transparent_State+0x106>
   1572e:	0e 5f       	subi	r16, 0xFE	; 254
   15730:	1f 4f       	sbci	r17, 0xFF	; 255
   15732:	80 73       	andi	r24, 0x30	; 48
   15734:	99 27       	eor	r25, r25
   15736:	89 2b       	or	r24, r25
   15738:	51 f0       	breq	.+20     	; 0x1574e <SS80_Transparent_State+0xf4>
   1573a:	87 e7       	ldi	r24, 0x77	; 119
   1573c:	90 e2       	ldi	r25, 0x20	; 32
   1573e:	a0 e0       	ldi	r26, 0x00	; 0
   15740:	ed b7       	in	r30, 0x3d	; 61
   15742:	fe b7       	in	r31, 0x3e	; 62
   15744:	81 83       	std	Z+1, r24	; 0x01
   15746:	92 83       	std	Z+2, r25	; 0x02
   15748:	a3 83       	std	Z+3, r26	; 0x03
   1574a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1574e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15752:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15756:	81 81       	ldd	r24, Z+1	; 0x01
   15758:	90 e0       	ldi	r25, 0x00	; 0
   1575a:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   1575e:	69 c0       	rjmp	.+210    	; 0x15832 <SS80_Transparent_State+0x1d8>
   15760:	22 30       	cpi	r18, 0x02	; 2
   15762:	31 05       	cpc	r19, r1
   15764:	51 f4       	brne	.+20     	; 0x1577a <SS80_Transparent_State+0x120>
   15766:	0b 5f       	subi	r16, 0xFB	; 251
   15768:	1f 4f       	sbci	r17, 0xFF	; 255
   1576a:	80 73       	andi	r24, 0x30	; 48
   1576c:	99 27       	eor	r25, r25
   1576e:	89 2b       	or	r24, r25
   15770:	09 f4       	brne	.+2      	; 0x15774 <SS80_Transparent_State+0x11a>
   15772:	5f c0       	rjmp	.+190    	; 0x15832 <SS80_Transparent_State+0x1d8>
   15774:	8a e5       	ldi	r24, 0x5A	; 90
   15776:	90 e2       	ldi	r25, 0x20	; 32
   15778:	0c c0       	rjmp	.+24     	; 0x15792 <SS80_Transparent_State+0x138>
   1577a:	23 30       	cpi	r18, 0x03	; 3
   1577c:	31 05       	cpc	r19, r1
   1577e:	91 f4       	brne	.+36     	; 0x157a4 <SS80_Transparent_State+0x14a>
   15780:	0b 5f       	subi	r16, 0xFB	; 251
   15782:	1f 4f       	sbci	r17, 0xFF	; 255
   15784:	80 73       	andi	r24, 0x30	; 48
   15786:	99 27       	eor	r25, r25
   15788:	89 2b       	or	r24, r25
   1578a:	09 f4       	brne	.+2      	; 0x1578e <SS80_Transparent_State+0x134>
   1578c:	52 c0       	rjmp	.+164    	; 0x15832 <SS80_Transparent_State+0x1d8>
   1578e:	8c e3       	ldi	r24, 0x3C	; 60
   15790:	90 e2       	ldi	r25, 0x20	; 32
   15792:	a0 e0       	ldi	r26, 0x00	; 0
   15794:	ed b7       	in	r30, 0x3d	; 61
   15796:	fe b7       	in	r31, 0x3e	; 62
   15798:	81 83       	std	Z+1, r24	; 0x01
   1579a:	92 83       	std	Z+2, r25	; 0x02
   1579c:	a3 83       	std	Z+3, r26	; 0x03
   1579e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   157a2:	47 c0       	rjmp	.+142    	; 0x15832 <SS80_Transparent_State+0x1d8>
   157a4:	28 30       	cpi	r18, 0x08	; 8
   157a6:	31 05       	cpc	r19, r1
   157a8:	e1 f4       	brne	.+56     	; 0x157e2 <SS80_Transparent_State+0x188>
   157aa:	85 ff       	sbrs	r24, 5
   157ac:	12 c0       	rjmp	.+36     	; 0x157d2 <SS80_Transparent_State+0x178>
   157ae:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   157b2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   157b6:	85 81       	ldd	r24, Z+5	; 0x05
   157b8:	90 e0       	ldi	r25, 0x00	; 0
   157ba:	ed b7       	in	r30, 0x3d	; 61
   157bc:	fe b7       	in	r31, 0x3e	; 62
   157be:	95 83       	std	Z+5, r25	; 0x05
   157c0:	84 83       	std	Z+4, r24	; 0x04
   157c2:	85 e1       	ldi	r24, 0x15	; 21
   157c4:	90 e2       	ldi	r25, 0x20	; 32
   157c6:	a0 e0       	ldi	r26, 0x00	; 0
   157c8:	81 83       	std	Z+1, r24	; 0x01
   157ca:	92 83       	std	Z+2, r25	; 0x02
   157cc:	a3 83       	std	Z+3, r26	; 0x03
   157ce:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   157d2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   157d6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   157da:	85 81       	ldd	r24, Z+5	; 0x05
   157dc:	90 e0       	ldi	r25, 0x00	; 0
   157de:	aa de       	rcall	.-684    	; 0x15534 <SS80_Channel_Independent_Clear>
   157e0:	44 c0       	rjmp	.+136    	; 0x1586a <SS80_Transparent_State+0x210>
   157e2:	29 30       	cpi	r18, 0x09	; 9
   157e4:	31 05       	cpc	r19, r1
   157e6:	b1 f4       	brne	.+44     	; 0x15814 <SS80_Transparent_State+0x1ba>
   157e8:	85 ff       	sbrs	r24, 5
   157ea:	12 c0       	rjmp	.+36     	; 0x15810 <SS80_Transparent_State+0x1b6>
   157ec:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   157f0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   157f4:	85 81       	ldd	r24, Z+5	; 0x05
   157f6:	90 e0       	ldi	r25, 0x00	; 0
   157f8:	ed b7       	in	r30, 0x3d	; 61
   157fa:	fe b7       	in	r31, 0x3e	; 62
   157fc:	95 83       	std	Z+5, r25	; 0x05
   157fe:	84 83       	std	Z+4, r24	; 0x04
   15800:	81 e0       	ldi	r24, 0x01	; 1
   15802:	90 e2       	ldi	r25, 0x20	; 32
   15804:	a0 e0       	ldi	r26, 0x00	; 0
   15806:	81 83       	std	Z+1, r24	; 0x01
   15808:	92 83       	std	Z+2, r25	; 0x02
   1580a:	a3 83       	std	Z+3, r26	; 0x03
   1580c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15810:	13 df       	rcall	.-474    	; 0x15638 <SS80_Cancel>
   15812:	2b c0       	rjmp	.+86     	; 0x1586a <SS80_Transparent_State+0x210>
   15814:	80 ff       	sbrs	r24, 0
   15816:	22 c0       	rjmp	.+68     	; 0x1585c <SS80_Transparent_State+0x202>
   15818:	ed b7       	in	r30, 0x3d	; 61
   1581a:	fe b7       	in	r31, 0x3e	; 62
   1581c:	35 83       	std	Z+5, r19	; 0x05
   1581e:	24 83       	std	Z+4, r18	; 0x04
   15820:	81 ee       	ldi	r24, 0xE1	; 225
   15822:	9f e1       	ldi	r25, 0x1F	; 31
   15824:	a0 e0       	ldi	r26, 0x00	; 0
   15826:	81 83       	std	Z+1, r24	; 0x01
   15828:	92 83       	std	Z+2, r25	; 0x02
   1582a:	a3 83       	std	Z+3, r26	; 0x03
   1582c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15830:	86 01       	movw	r16, r12
   15832:	0e 15       	cp	r16, r14
   15834:	1f 05       	cpc	r17, r15
   15836:	91 f0       	breq	.+36     	; 0x1585c <SS80_Transparent_State+0x202>
   15838:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1583c:	80 ff       	sbrs	r24, 0
   1583e:	0e c0       	rjmp	.+28     	; 0x1585c <SS80_Transparent_State+0x202>
   15840:	ed b7       	in	r30, 0x3d	; 61
   15842:	fe b7       	in	r31, 0x3e	; 62
   15844:	f7 82       	std	Z+7, r15	; 0x07
   15846:	e6 82       	std	Z+6, r14	; 0x06
   15848:	15 83       	std	Z+5, r17	; 0x05
   1584a:	04 83       	std	Z+4, r16	; 0x04
   1584c:	85 ea       	ldi	r24, 0xA5	; 165
   1584e:	9f e1       	ldi	r25, 0x1F	; 31
   15850:	a0 e0       	ldi	r26, 0x00	; 0
   15852:	81 83       	std	Z+1, r24	; 0x01
   15854:	92 83       	std	Z+2, r25	; 0x02
   15856:	a3 83       	std	Z+3, r26	; 0x03
   15858:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1585c:	88 85       	ldd	r24, Y+8	; 0x08
   1585e:	99 85       	ldd	r25, Y+9	; 0x09
   15860:	88 27       	eor	r24, r24
   15862:	90 7d       	andi	r25, 0xD0	; 208
   15864:	02 c0       	rjmp	.+4      	; 0x1586a <SS80_Transparent_State+0x210>
   15866:	80 e0       	ldi	r24, 0x00	; 0
   15868:	90 e0       	ldi	r25, 0x00	; 0
   1586a:	29 96       	adiw	r28, 0x09	; 9
   1586c:	ea e0       	ldi	r30, 0x0A	; 10
   1586e:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

00015872 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15872:	a6 e0       	ldi	r26, 0x06	; 6
   15874:	b0 e0       	ldi	r27, 0x00	; 0
   15876:	ef e3       	ldi	r30, 0x3F	; 63
   15878:	fc ea       	ldi	r31, 0xAC	; 172
   1587a:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   1587e:	80 e0       	ldi	r24, 0x00	; 0
   15880:	91 e0       	ldi	r25, 0x01	; 1
   15882:	9d 83       	std	Y+5, r25	; 0x05
   15884:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15886:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1588a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1588e:	81 e0       	ldi	r24, 0x01	; 1
   15890:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15892:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15894:	ae 01       	movw	r20, r28
   15896:	4c 5f       	subi	r20, 0xFC	; 252
   15898:	5f 4f       	sbci	r21, 0xFF	; 255
   1589a:	61 e0       	ldi	r22, 0x01	; 1
   1589c:	70 e0       	ldi	r23, 0x00	; 0
   1589e:	ce 01       	movw	r24, r28
   158a0:	06 96       	adiw	r24, 0x06	; 6
   158a2:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   158a6:	01 97       	sbiw	r24, 0x01	; 1
   158a8:	99 f0       	breq	.+38     	; 0x158d0 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   158aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158ae:	80 ff       	sbrs	r24, 0
   158b0:	0a c0       	rjmp	.+20     	; 0x158c6 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   158b2:	83 ef       	ldi	r24, 0xF3	; 243
   158b4:	9e e1       	ldi	r25, 0x1E	; 30
   158b6:	a0 e0       	ldi	r26, 0x00	; 0
   158b8:	ed b7       	in	r30, 0x3d	; 61
   158ba:	fe b7       	in	r31, 0x3e	; 62
   158bc:	81 83       	std	Z+1, r24	; 0x01
   158be:	92 83       	std	Z+2, r25	; 0x02
   158c0:	a3 83       	std	Z+3, r26	; 0x03
   158c2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(status & ERROR_MASK);
   158c6:	8c 81       	ldd	r24, Y+4	; 0x04
   158c8:	9d 81       	ldd	r25, Y+5	; 0x05
   158ca:	88 27       	eor	r24, r24
   158cc:	90 7d       	andi	r25, 0xD0	; 208
   158ce:	07 c0       	rjmp	.+14     	; 0x158de <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   158d0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   158d4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   158d8:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   158da:	80 e0       	ldi	r24, 0x00	; 0
   158dc:	90 e0       	ldi	r25, 0x00	; 0
}
   158de:	26 96       	adiw	r28, 0x06	; 6
   158e0:	e2 e0       	ldi	r30, 0x02	; 2
   158e2:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000158e6 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   158e6:	a7 e1       	ldi	r26, 0x17	; 23
   158e8:	b0 e0       	ldi	r27, 0x00	; 0
   158ea:	e9 e7       	ldi	r30, 0x79	; 121
   158ec:	fc ea       	ldi	r31, 0xAC	; 172
   158ee:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   158f2:	60 91 6e 19 	lds	r22, 0x196E	; 0x80196e <SS80s>
   158f6:	70 91 6f 19 	lds	r23, 0x196F	; 0x80196f <SS80s+0x1>
   158fa:	fb 01       	movw	r30, r22
   158fc:	27 81       	ldd	r18, Z+7	; 0x07
   158fe:	30 85       	ldd	r19, Z+8	; 0x08
   15900:	41 85       	ldd	r20, Z+9	; 0x09
   15902:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15904:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <SS80p>
   15908:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <SS80p+0x1>
   1590c:	fc 01       	movw	r30, r24
   1590e:	a0 89       	ldd	r26, Z+16	; 0x10
   15910:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15912:	fb 01       	movw	r30, r22
   15914:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15916:	1d 86       	std	Y+13, r1	; 0x0d
   15918:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   1591a:	54 98       	cbi	0x0a, 4	; 10
   1591c:	4c 99       	sbic	0x09, 4	; 9
   1591e:	03 c0       	rjmp	.+6      	; 0x15926 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   15920:	80 e0       	ldi	r24, 0x00	; 0
   15922:	90 e1       	ldi	r25, 0x10	; 16
   15924:	3e c1       	rjmp	.+636    	; 0x15ba2 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15926:	0e 94 cc e2 	call	0x1c598	; 0x1c598 <__muluhisi3>
   1592a:	4b 01       	movw	r8, r22
   1592c:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1592e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15932:	85 ff       	sbrs	r24, 5
   15934:	1a c0       	rjmp	.+52     	; 0x1596a <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15936:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   1593a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1593e:	83 85       	ldd	r24, Z+11	; 0x0b
   15940:	94 85       	ldd	r25, Z+12	; 0x0c
   15942:	a5 85       	ldd	r26, Z+13	; 0x0d
   15944:	b6 85       	ldd	r27, Z+14	; 0x0e
   15946:	ed b7       	in	r30, 0x3d	; 61
   15948:	fe b7       	in	r31, 0x3e	; 62
   1594a:	80 87       	std	Z+8, r24	; 0x08
   1594c:	91 87       	std	Z+9, r25	; 0x09
   1594e:	a2 87       	std	Z+10, r26	; 0x0a
   15950:	b3 87       	std	Z+11, r27	; 0x0b
   15952:	84 82       	std	Z+4, r8	; 0x04
   15954:	95 82       	std	Z+5, r9	; 0x05
   15956:	a6 82       	std	Z+6, r10	; 0x06
   15958:	b7 82       	std	Z+7, r11	; 0x07
   1595a:	8d ec       	ldi	r24, 0xCD	; 205
   1595c:	95 e2       	ldi	r25, 0x25	; 37
   1595e:	a0 e0       	ldi	r26, 0x00	; 0
   15960:	81 83       	std	Z+1, r24	; 0x01
   15962:	92 83       	std	Z+2, r25	; 0x02
   15964:	a3 83       	std	Z+3, r26	; 0x03
   15966:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   1596a:	2b db       	rcall	.-2474   	; 0x14fc2 <SS80_cmd_seek>
   1596c:	89 2b       	or	r24, r25
   1596e:	09 f0       	breq	.+2      	; 0x15972 <SS80_locate_and_read+0x8c>
   15970:	ae c0       	rjmp	.+348    	; 0x15ace <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   15972:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15976:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   1597a:	43 84       	ldd	r4, Z+11	; 0x0b
   1597c:	54 84       	ldd	r5, Z+12	; 0x0c
   1597e:	65 84       	ldd	r6, Z+13	; 0x0d
   15980:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   15982:	1e 86       	std	Y+14, r1	; 0x0e
   15984:	1f 86       	std	Y+15, r1	; 0x0f
   15986:	18 8a       	std	Y+16, r1	; 0x10
   15988:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   1598a:	8f ea       	ldi	r24, 0xAF	; 175
   1598c:	95 e2       	ldi	r25, 0x25	; 37
   1598e:	9c 01       	movw	r18, r24
   15990:	40 e0       	ldi	r20, 0x00	; 0
   15992:	2a 8b       	std	Y+18, r18	; 0x12
   15994:	3b 8b       	std	Y+19, r19	; 0x13
   15996:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15998:	33 24       	eor	r3, r3
   1599a:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   1599c:	8e e7       	ldi	r24, 0x7E	; 126
   1599e:	95 e2       	ldi	r25, 0x25	; 37
   159a0:	9c 01       	movw	r18, r24
   159a2:	40 e0       	ldi	r20, 0x00	; 0
   159a4:	2d 8b       	std	Y+21, r18	; 0x15
   159a6:	3e 8b       	std	Y+22, r19	; 0x16
   159a8:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   159aa:	34 c0       	rjmp	.+104    	; 0x15a14 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   159ac:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   159ae:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   159b2:	ae 01       	movw	r20, r28
   159b4:	44 5f       	subi	r20, 0xF4	; 244
   159b6:	5f 4f       	sbci	r21, 0xFF	; 255
   159b8:	b6 01       	movw	r22, r12
   159ba:	82 ef       	ldi	r24, 0xF2	; 242
   159bc:	9c e1       	ldi	r25, 0x1C	; 28
   159be:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   159c2:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   159c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159c8:	87 ff       	sbrs	r24, 7
   159ca:	04 c0       	rjmp	.+8      	; 0x159d4 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   159cc:	86 eb       	ldi	r24, 0xB6	; 182
   159ce:	90 e1       	ldi	r25, 0x10	; 16
   159d0:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   159d4:	c0 16       	cp	r12, r16
   159d6:	d1 06       	cpc	r13, r17
   159d8:	09 f0       	breq	.+2      	; 0x159dc <SS80_locate_and_read+0xf6>
   159da:	82 c0       	rjmp	.+260    	; 0x15ae0 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   159dc:	0d 2c       	mov	r0, r13
   159de:	00 0c       	add	r0, r0
   159e0:	ee 08       	sbc	r14, r14
   159e2:	ff 08       	sbc	r15, r15
   159e4:	8c 0c       	add	r8, r12
   159e6:	9d 1c       	adc	r9, r13
   159e8:	ae 1c       	adc	r10, r14
   159ea:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   159ec:	01 2e       	mov	r0, r17
   159ee:	00 0c       	add	r0, r0
   159f0:	22 0b       	sbc	r18, r18
   159f2:	33 0b       	sbc	r19, r19
   159f4:	8e 85       	ldd	r24, Y+14	; 0x0e
   159f6:	9f 85       	ldd	r25, Y+15	; 0x0f
   159f8:	a8 89       	ldd	r26, Y+16	; 0x10
   159fa:	b9 89       	ldd	r27, Y+17	; 0x11
   159fc:	80 0f       	add	r24, r16
   159fe:	91 1f       	adc	r25, r17
   15a00:	a2 1f       	adc	r26, r18
   15a02:	b3 1f       	adc	r27, r19
   15a04:	8e 87       	std	Y+14, r24	; 0x0e
   15a06:	9f 87       	std	Y+15, r25	; 0x0f
   15a08:	a8 8b       	std	Y+16, r26	; 0x10
   15a0a:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   15a0c:	40 1a       	sub	r4, r16
   15a0e:	51 0a       	sbc	r5, r17
   15a10:	62 0a       	sbc	r6, r18
   15a12:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15a14:	41 14       	cp	r4, r1
   15a16:	51 04       	cpc	r5, r1
   15a18:	61 04       	cpc	r6, r1
   15a1a:	71 04       	cpc	r7, r1
   15a1c:	09 f4       	brne	.+2      	; 0x15a20 <SS80_locate_and_read+0x13a>
   15a1e:	92 c0       	rjmp	.+292    	; 0x15b44 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   15a20:	54 98       	cbi	0x0a, 4	; 10
   15a22:	4c 9b       	sbis	0x09, 4	; 9
   15a24:	7d cf       	rjmp	.-262    	; 0x15920 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15a26:	31 e0       	ldi	r19, 0x01	; 1
   15a28:	43 16       	cp	r4, r19
   15a2a:	53 06       	cpc	r5, r19
   15a2c:	61 04       	cpc	r6, r1
   15a2e:	71 04       	cpc	r7, r1
   15a30:	08 f4       	brcc	.+2      	; 0x15a34 <SS80_locate_and_read+0x14e>
   15a32:	4f c0       	rjmp	.+158    	; 0x15ad2 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15a34:	1d 86       	std	Y+13, r1	; 0x0d
   15a36:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15a38:	c1 2c       	mov	r12, r1
   15a3a:	dd 24       	eor	r13, r13
   15a3c:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15a3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a42:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15a44:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15a48:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <SS80s>
   15a4c:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <SS80s+0x1>
   15a50:	43 e0       	ldi	r20, 0x03	; 3
   15a52:	e4 0e       	add	r14, r20
   15a54:	f1 1c       	adc	r15, r1
   15a56:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15a5a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15a5e:	86 01       	movw	r16, r12
   15a60:	22 ef       	ldi	r18, 0xF2	; 242
   15a62:	3c e1       	ldi	r19, 0x1C	; 28
   15a64:	b5 01       	movw	r22, r10
   15a66:	a4 01       	movw	r20, r8
   15a68:	82 81       	ldd	r24, Z+2	; 0x02
   15a6a:	93 81       	ldd	r25, Z+3	; 0x03
   15a6c:	0e 94 07 83 	call	0x1060e	; 0x1060e <dbf_open_read>
   15a70:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15a72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a76:	86 ff       	sbrs	r24, 6
   15a78:	04 c0       	rjmp	.+8      	; 0x15a82 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15a7a:	8b ea       	ldi	r24, 0xAB	; 171
   15a7c:	90 e1       	ldi	r25, 0x10	; 16
   15a7e:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15a82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a86:	85 ff       	sbrs	r24, 5
   15a88:	0c c0       	rjmp	.+24     	; 0x15aa2 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15a8a:	ed b7       	in	r30, 0x3d	; 61
   15a8c:	fe b7       	in	r31, 0x3e	; 62
   15a8e:	15 83       	std	Z+5, r17	; 0x05
   15a90:	04 83       	std	Z+4, r16	; 0x04
   15a92:	2a 89       	ldd	r18, Y+18	; 0x12
   15a94:	3b 89       	ldd	r19, Y+19	; 0x13
   15a96:	4c 89       	ldd	r20, Y+20	; 0x14
   15a98:	21 83       	std	Z+1, r18	; 0x01
   15a9a:	32 83       	std	Z+2, r19	; 0x02
   15a9c:	43 83       	std	Z+3, r20	; 0x03
   15a9e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15aa2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15aa6:	17 ff       	sbrs	r17, 7
   15aa8:	81 cf       	rjmp	.-254    	; 0x159ac <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15aaa:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15aae:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15ab2:	91 e0       	ldi	r25, 0x01	; 1
   15ab4:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   15ab6:	80 ff       	sbrs	r24, 0
   15ab8:	0a c0       	rjmp	.+20     	; 0x15ace <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   15aba:	87 e9       	ldi	r24, 0x97	; 151
   15abc:	95 e2       	ldi	r25, 0x25	; 37
   15abe:	a0 e0       	ldi	r26, 0x00	; 0
   15ac0:	ed b7       	in	r30, 0x3d	; 61
   15ac2:	fe b7       	in	r31, 0x3e	; 62
   15ac4:	81 83       	std	Z+1, r24	; 0x01
   15ac6:	92 83       	std	Z+2, r25	; 0x02
   15ac8:	a3 83       	std	Z+3, r26	; 0x03
   15aca:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            return( SS80_error_return() );
   15ace:	d1 de       	rcall	.-606    	; 0x15872 <SS80_error_return>
   15ad0:	68 c0       	rjmp	.+208    	; 0x15ba2 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15ad2:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15ad4:	8c 85       	ldd	r24, Y+12	; 0x0c
   15ad6:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ad8:	91 60       	ori	r25, 0x01	; 1
   15ada:	9d 87       	std	Y+13, r25	; 0x0d
   15adc:	8c 87       	std	Y+12, r24	; 0x0c
   15ade:	af cf       	rjmp	.-162    	; 0x15a3e <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15ae0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15ae4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15ae8:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   15aea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aee:	80 ff       	sbrs	r24, 0
   15af0:	0a c0       	rjmp	.+20     	; 0x15b06 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15af2:	2d 89       	ldd	r18, Y+21	; 0x15
   15af4:	3e 89       	ldd	r19, Y+22	; 0x16
   15af6:	4f 89       	ldd	r20, Y+23	; 0x17
   15af8:	ed b7       	in	r30, 0x3d	; 61
   15afa:	fe b7       	in	r31, 0x3e	; 62
   15afc:	21 83       	std	Z+1, r18	; 0x01
   15afe:	32 83       	std	Z+2, r19	; 0x02
   15b00:	43 83       	std	Z+3, r20	; 0x03
   15b02:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            if(status & ERROR_MASK)
   15b06:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b08:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b0a:	88 27       	eor	r24, r24
   15b0c:	90 7d       	andi	r25, 0xD0	; 208
   15b0e:	89 2b       	or	r24, r25
   15b10:	09 f4       	brne	.+2      	; 0x15b14 <SS80_locate_and_read+0x22e>
   15b12:	64 cf       	rjmp	.-312    	; 0x159dc <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15b14:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15b18:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15b1c:	83 81       	ldd	r24, Z+3	; 0x03
   15b1e:	94 81       	ldd	r25, Z+4	; 0x04
   15b20:	80 62       	ori	r24, 0x20	; 32
   15b22:	94 83       	std	Z+4, r25	; 0x04
   15b24:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15b26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b2a:	80 ff       	sbrs	r24, 0
   15b2c:	21 c0       	rjmp	.+66     	; 0x15b70 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15b2e:	89 e5       	ldi	r24, 0x59	; 89
   15b30:	95 e2       	ldi	r25, 0x25	; 37
   15b32:	a0 e0       	ldi	r26, 0x00	; 0
   15b34:	ed b7       	in	r30, 0x3d	; 61
   15b36:	fe b7       	in	r31, 0x3e	; 62
   15b38:	81 83       	std	Z+1, r24	; 0x01
   15b3a:	92 83       	std	Z+2, r25	; 0x02
   15b3c:	a3 83       	std	Z+3, r26	; 0x03
   15b3e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15b42:	16 c0       	rjmp	.+44     	; 0x15b70 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15b44:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b48:	85 ff       	sbrs	r24, 5
   15b4a:	12 c0       	rjmp	.+36     	; 0x15b70 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15b4c:	8e 85       	ldd	r24, Y+14	; 0x0e
   15b4e:	9f 85       	ldd	r25, Y+15	; 0x0f
   15b50:	a8 89       	ldd	r26, Y+16	; 0x10
   15b52:	b9 89       	ldd	r27, Y+17	; 0x11
   15b54:	ed b7       	in	r30, 0x3d	; 61
   15b56:	fe b7       	in	r31, 0x3e	; 62
   15b58:	84 83       	std	Z+4, r24	; 0x04
   15b5a:	95 83       	std	Z+5, r25	; 0x05
   15b5c:	a6 83       	std	Z+6, r26	; 0x06
   15b5e:	b7 83       	std	Z+7, r27	; 0x07
   15b60:	81 e3       	ldi	r24, 0x31	; 49
   15b62:	95 e2       	ldi	r25, 0x25	; 37
   15b64:	a0 e0       	ldi	r26, 0x00	; 0
   15b66:	81 83       	std	Z+1, r24	; 0x01
   15b68:	92 83       	std	Z+2, r25	; 0x02
   15b6a:	a3 83       	std	Z+3, r26	; 0x03
   15b6c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15b70:	00 91 6e 19 	lds	r16, 0x196E	; 0x80196e <SS80s>
   15b74:	10 91 6f 19 	lds	r17, 0x196F	; 0x80196f <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15b78:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15b7c:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15b80:	20 89       	ldd	r18, Z+16	; 0x10
   15b82:	31 89       	ldd	r19, Z+17	; 0x11
   15b84:	40 e0       	ldi	r20, 0x00	; 0
   15b86:	50 e0       	ldi	r21, 0x00	; 0
   15b88:	c5 01       	movw	r24, r10
   15b8a:	b4 01       	movw	r22, r8
   15b8c:	0e 94 7f e2 	call	0x1c4fe	; 0x1c4fe <__udivmodsi4>
   15b90:	f8 01       	movw	r30, r16
   15b92:	27 83       	std	Z+7, r18	; 0x07
   15b94:	30 87       	std	Z+8, r19	; 0x08
   15b96:	41 87       	std	Z+9, r20	; 0x09
   15b98:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15b9a:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b9c:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b9e:	88 27       	eor	r24, r24
   15ba0:	90 7d       	andi	r25, 0xD0	; 208
}
   15ba2:	67 96       	adiw	r28, 0x17	; 23
   15ba4:	e1 e1       	ldi	r30, 0x11	; 17
   15ba6:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__+0x2>

00015baa <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15baa:	cf 93       	push	r28
   15bac:	df 93       	push	r29
   15bae:	00 d0       	rcall	.+0      	; 0x15bb0 <SS80_Execute_State+0x6>
   15bb0:	00 d0       	rcall	.+0      	; 0x15bb2 <SS80_Execute_State+0x8>
   15bb2:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15bb4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15bb8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15bbc:	81 81       	ldd	r24, Z+1	; 0x01
   15bbe:	90 e0       	ldi	r25, 0x00	; 0
   15bc0:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
    switch(SS80s->estate)
   15bc4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15bc8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15bcc:	80 81       	ld	r24, Z
   15bce:	91 81       	ldd	r25, Z+1	; 0x01
   15bd0:	82 30       	cpi	r24, 0x02	; 2
   15bd2:	91 05       	cpc	r25, r1
   15bd4:	89 f0       	breq	.+34     	; 0x15bf8 <SS80_Execute_State+0x4e>
   15bd6:	3c f4       	brge	.+14     	; 0x15be6 <SS80_Execute_State+0x3c>
   15bd8:	00 97       	sbiw	r24, 0x00	; 0
   15bda:	81 f1       	breq	.+96     	; 0x15c3c <SS80_Execute_State+0x92>
   15bdc:	81 30       	cpi	r24, 0x01	; 1
   15bde:	91 05       	cpc	r25, r1
   15be0:	b9 f4       	brne	.+46     	; 0x15c10 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15be2:	81 de       	rcall	.-766    	; 0x158e6 <SS80_locate_and_read>
   15be4:	0d c0       	rjmp	.+26     	; 0x15c00 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15be6:	83 30       	cpi	r24, 0x03	; 3
   15be8:	91 05       	cpc	r25, r1
   15bea:	41 f0       	breq	.+16     	; 0x15bfc <SS80_Execute_State+0x52>
   15bec:	84 30       	cpi	r24, 0x04	; 4
   15bee:	91 05       	cpc	r25, r1
   15bf0:	79 f4       	brne	.+30     	; 0x15c10 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15bf2:	0e 94 aa a4 	call	0x14954	; 0x14954 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15bf6:	04 c0       	rjmp	.+8      	; 0x15c00 <SS80_Execute_State+0x56>
   15bf8:	59 da       	rcall	.-2894   	; 0x150ac <SS80_locate_and_write>
   15bfa:	02 c0       	rjmp	.+4      	; 0x15c00 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15bfc:	0e 94 29 a4 	call	0x14852	; 0x14852 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15c00:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15c02:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15c06:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15c0a:	11 82       	std	Z+1, r1	; 0x01
   15c0c:	10 82       	st	Z, r1
            break;
   15c0e:	18 c0       	rjmp	.+48     	; 0x15c40 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15c10:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15c14:	20 ff       	sbrs	r18, 0
   15c16:	0c c0       	rjmp	.+24     	; 0x15c30 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15c18:	ed b7       	in	r30, 0x3d	; 61
   15c1a:	fe b7       	in	r31, 0x3e	; 62
   15c1c:	95 83       	std	Z+5, r25	; 0x05
   15c1e:	84 83       	std	Z+4, r24	; 0x04
   15c20:	85 ef       	ldi	r24, 0xF5	; 245
   15c22:	95 e2       	ldi	r25, 0x25	; 37
   15c24:	a0 e0       	ldi	r26, 0x00	; 0
   15c26:	81 83       	std	Z+1, r24	; 0x01
   15c28:	92 83       	std	Z+2, r25	; 0x02
   15c2a:	a3 83       	std	Z+3, r26	; 0x03
   15c2c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            SS80s->estate = EXEC_IDLE;
   15c30:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <SS80s>
   15c34:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <SS80s+0x1>
   15c38:	11 82       	std	Z+1, r1	; 0x01
   15c3a:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15c3c:	c0 e0       	ldi	r28, 0x00	; 0
   15c3e:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15c40:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15c44:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15c48:	81 81       	ldd	r24, Z+1	; 0x01
   15c4a:	90 e0       	ldi	r25, 0x00	; 0
   15c4c:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
    return(ret);
}
   15c50:	ce 01       	movw	r24, r28
   15c52:	cd b7       	in	r28, 0x3d	; 61
   15c54:	de b7       	in	r29, 0x3e	; 62
   15c56:	25 96       	adiw	r28, 0x05	; 5
   15c58:	e2 e0       	ldi	r30, 0x02	; 2
   15c5a:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00015c5e <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15c5e:	a9 e0       	ldi	r26, 0x09	; 9
   15c60:	b0 e0       	ldi	r27, 0x00	; 0
   15c62:	e5 e3       	ldi	r30, 0x35	; 53
   15c64:	fe ea       	ldi	r31, 0xAE	; 174
   15c66:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1e>
   15c6a:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15c6c:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   15c70:	90 e0       	ldi	r25, 0x00	; 0
   15c72:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <SS80_is_MTA>
   15c76:	89 2b       	or	r24, r25
   15c78:	19 f0       	breq	.+6      	; 0x15c80 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15c7a:	15 36       	cpi	r17, 0x65	; 101
   15c7c:	19 f5       	brne	.+70     	; 0x15cc4 <SS80_COMMANDS+0x66>
   15c7e:	09 c0       	rjmp	.+18     	; 0x15c92 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15c80:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   15c84:	90 e0       	ldi	r25, 0x00	; 0
   15c86:	0e 94 bf 8a 	call	0x1157e	; 0x1157e <SS80_is_MLA>
   15c8a:	ec 01       	movw	r28, r24
   15c8c:	89 2b       	or	r24, r25
   15c8e:	a9 f7       	brne	.-22     	; 0x15c7a <SS80_COMMANDS+0x1c>
   15c90:	ad c0       	rjmp	.+346    	; 0x15dec <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15c92:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   15c96:	90 e0       	ldi	r25, 0x00	; 0
   15c98:	0e 94 bf 8a 	call	0x1157e	; 0x1157e <SS80_is_MLA>
   15c9c:	89 2b       	or	r24, r25
   15c9e:	09 f4       	brne	.+2      	; 0x15ca2 <SS80_COMMANDS+0x44>
   15ca0:	a2 c0       	rjmp	.+324    	; 0x15de6 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ca2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ca6:	85 ff       	sbrs	r24, 5
   15ca8:	0a c0       	rjmp	.+20     	; 0x15cbe <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15caa:	8d ed       	ldi	r24, 0xDD	; 221
   15cac:	9e e1       	ldi	r25, 0x1E	; 30
   15cae:	a0 e0       	ldi	r26, 0x00	; 0
   15cb0:	ed b7       	in	r30, 0x3d	; 61
   15cb2:	fe b7       	in	r31, 0x3e	; 62
   15cb4:	81 83       	std	Z+1, r24	; 0x01
   15cb6:	92 83       	std	Z+2, r25	; 0x02
   15cb8:	a3 83       	std	Z+3, r26	; 0x03
   15cba:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                return ( SS80_Command_State() );
   15cbe:	0e 94 6a a5 	call	0x14ad4	; 0x14ad4 <SS80_Command_State>
   15cc2:	73 c0       	rjmp	.+230    	; 0x15daa <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15cc4:	1e 36       	cpi	r17, 0x6E	; 110
   15cc6:	01 f5       	brne	.+64     	; 0x15d08 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15cc8:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   15ccc:	90 e0       	ldi	r25, 0x00	; 0
   15cce:	0e 94 bf 8a 	call	0x1157e	; 0x1157e <SS80_is_MLA>
   15cd2:	89 2b       	or	r24, r25
   15cd4:	79 f0       	breq	.+30     	; 0x15cf4 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15cd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cda:	85 ff       	sbrs	r24, 5
   15cdc:	13 c0       	rjmp	.+38     	; 0x15d04 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15cde:	87 ec       	ldi	r24, 0xC7	; 199
   15ce0:	9e e1       	ldi	r25, 0x1E	; 30
   15ce2:	a0 e0       	ldi	r26, 0x00	; 0
   15ce4:	ed b7       	in	r30, 0x3d	; 61
   15ce6:	fe b7       	in	r31, 0x3e	; 62
   15ce8:	81 83       	std	Z+1, r24	; 0x01
   15cea:	92 83       	std	Z+2, r25	; 0x02
   15cec:	a3 83       	std	Z+3, r26	; 0x03
   15cee:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15cf2:	08 c0       	rjmp	.+16     	; 0x15d04 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15cf4:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   15cf8:	90 e0       	ldi	r25, 0x00	; 0
   15cfa:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <SS80_is_MTA>
   15cfe:	89 2b       	or	r24, r25
   15d00:	51 f7       	brne	.-44     	; 0x15cd6 <SS80_COMMANDS+0x78>
   15d02:	71 c0       	rjmp	.+226    	; 0x15de6 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15d04:	52 df       	rcall	.-348    	; 0x15baa <SS80_Execute_State>
   15d06:	51 c0       	rjmp	.+162    	; 0x15daa <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15d08:	10 37       	cpi	r17, 0x70	; 112
   15d0a:	b9 f5       	brne	.+110    	; 0x15d7a <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15d0c:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   15d10:	90 e0       	ldi	r25, 0x00	; 0
   15d12:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <SS80_is_MTA>
   15d16:	89 2b       	or	r24, r25
   15d18:	81 f0       	breq	.+32     	; 0x15d3a <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d1e:	85 ff       	sbrs	r24, 5
   15d20:	0a c0       	rjmp	.+20     	; 0x15d36 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15d22:	82 eb       	ldi	r24, 0xB2	; 178
   15d24:	9e e1       	ldi	r25, 0x1E	; 30
   15d26:	a0 e0       	ldi	r26, 0x00	; 0
   15d28:	ed b7       	in	r30, 0x3d	; 61
   15d2a:	fe b7       	in	r31, 0x3e	; 62
   15d2c:	81 83       	std	Z+1, r24	; 0x01
   15d2e:	92 83       	std	Z+2, r25	; 0x02
   15d30:	a3 83       	std	Z+3, r26	; 0x03
   15d32:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                return( SS80_Report() );
   15d36:	4c db       	rcall	.-2408   	; 0x153d0 <SS80_Report>
   15d38:	38 c0       	rjmp	.+112    	; 0x15daa <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15d3a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   15d3e:	90 e0       	ldi	r25, 0x00	; 0
   15d40:	0e 94 bf 8a 	call	0x1157e	; 0x1157e <SS80_is_MLA>
   15d44:	89 2b       	or	r24, r25
   15d46:	09 f4       	brne	.+2      	; 0x15d4a <SS80_COMMANDS+0xec>
   15d48:	4e c0       	rjmp	.+156    	; 0x15de6 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d4e:	85 ff       	sbrs	r24, 5
   15d50:	0a c0       	rjmp	.+20     	; 0x15d66 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15d52:	83 ea       	ldi	r24, 0xA3	; 163
   15d54:	9e e1       	ldi	r25, 0x1E	; 30
   15d56:	a0 e0       	ldi	r26, 0x00	; 0
   15d58:	ed b7       	in	r30, 0x3d	; 61
   15d5a:	fe b7       	in	r31, 0x3e	; 62
   15d5c:	81 83       	std	Z+1, r24	; 0x01
   15d5e:	92 83       	std	Z+2, r25	; 0x02
   15d60:	a3 83       	std	Z+3, r26	; 0x03
   15d62:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15d66:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <SS80p>
   15d6a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <SS80p+0x1>
   15d6e:	81 81       	ldd	r24, Z+1	; 0x01
   15d70:	90 e0       	ldi	r25, 0x00	; 0
   15d72:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15d76:	1d dc       	rcall	.-1990   	; 0x155b2 <SS80_Amigo_Clear>
   15d78:	18 c0       	rjmp	.+48     	; 0x15daa <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15d7a:	12 37       	cpi	r17, 0x72	; 114
   15d7c:	c1 f4       	brne	.+48     	; 0x15dae <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15d7e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   15d82:	90 e0       	ldi	r25, 0x00	; 0
   15d84:	0e 94 bf 8a 	call	0x1157e	; 0x1157e <SS80_is_MLA>
   15d88:	89 2b       	or	r24, r25
   15d8a:	89 f0       	breq	.+34     	; 0x15dae <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d90:	85 ff       	sbrs	r24, 5
   15d92:	0a c0       	rjmp	.+20     	; 0x15da8 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15d94:	8f e8       	ldi	r24, 0x8F	; 143
   15d96:	9e e1       	ldi	r25, 0x1E	; 30
   15d98:	a0 e0       	ldi	r26, 0x00	; 0
   15d9a:	ed b7       	in	r30, 0x3d	; 61
   15d9c:	fe b7       	in	r31, 0x3e	; 62
   15d9e:	81 83       	std	Z+1, r24	; 0x01
   15da0:	92 83       	std	Z+2, r25	; 0x02
   15da2:	a3 83       	std	Z+3, r26	; 0x03
   15da4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                return( SS80_Transparent_State() );
   15da8:	58 dc       	rcall	.-1872   	; 0x1565a <SS80_Transparent_State>
   15daa:	ec 01       	movw	r28, r24
   15dac:	3b c0       	rjmp	.+118    	; 0x15e24 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15dae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15db2:	80 ff       	sbrs	r24, 0
   15db4:	18 c0       	rjmp	.+48     	; 0x15de6 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15db6:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   15dba:	90 e0       	ldi	r25, 0x00	; 0
   15dbc:	ed b7       	in	r30, 0x3d	; 61
   15dbe:	fe b7       	in	r31, 0x3e	; 62
   15dc0:	91 87       	std	Z+9, r25	; 0x09
   15dc2:	80 87       	std	Z+8, r24	; 0x08
   15dc4:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   15dc8:	90 e0       	ldi	r25, 0x00	; 0
   15dca:	97 83       	std	Z+7, r25	; 0x07
   15dcc:	86 83       	std	Z+6, r24	; 0x06
   15dce:	81 2f       	mov	r24, r17
   15dd0:	90 e0       	ldi	r25, 0x00	; 0
   15dd2:	95 83       	std	Z+5, r25	; 0x05
   15dd4:	84 83       	std	Z+4, r24	; 0x04
   15dd6:	8b e5       	ldi	r24, 0x5B	; 91
   15dd8:	9e e1       	ldi	r25, 0x1E	; 30
   15dda:	a0 e0       	ldi	r26, 0x00	; 0
   15ddc:	81 83       	std	Z+1, r24	; 0x01
   15dde:	92 83       	std	Z+2, r25	; 0x02
   15de0:	a3 83       	std	Z+3, r26	; 0x03
   15de2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15de6:	c0 e0       	ldi	r28, 0x00	; 0
   15de8:	d0 e0       	ldi	r29, 0x00	; 0
   15dea:	1c c0       	rjmp	.+56     	; 0x15e24 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15dec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15df0:	80 ff       	sbrs	r24, 0
   15df2:	f9 cf       	rjmp	.-14     	; 0x15de6 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15df4:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   15df8:	90 e0       	ldi	r25, 0x00	; 0
   15dfa:	ed b7       	in	r30, 0x3d	; 61
   15dfc:	fe b7       	in	r31, 0x3e	; 62
   15dfe:	91 87       	std	Z+9, r25	; 0x09
   15e00:	80 87       	std	Z+8, r24	; 0x08
   15e02:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   15e06:	90 e0       	ldi	r25, 0x00	; 0
   15e08:	97 83       	std	Z+7, r25	; 0x07
   15e0a:	86 83       	std	Z+6, r24	; 0x06
   15e0c:	81 2f       	mov	r24, r17
   15e0e:	90 e0       	ldi	r25, 0x00	; 0
   15e10:	95 83       	std	Z+5, r25	; 0x05
   15e12:	84 83       	std	Z+4, r24	; 0x04
   15e14:	87 e2       	ldi	r24, 0x27	; 39
   15e16:	9e e1       	ldi	r25, 0x1E	; 30
   15e18:	a0 e0       	ldi	r26, 0x00	; 0
   15e1a:	81 83       	std	Z+1, r24	; 0x01
   15e1c:	92 83       	std	Z+2, r25	; 0x02
   15e1e:	a3 83       	std	Z+3, r26	; 0x03
   15e20:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15e24:	ce 01       	movw	r24, r28
   15e26:	cd b7       	in	r28, 0x3d	; 61
   15e28:	de b7       	in	r29, 0x3e	; 62
   15e2a:	29 96       	adiw	r28, 0x09	; 9
   15e2c:	e3 e0       	ldi	r30, 0x03	; 3
   15e2e:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1e>

00015e32 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15e32:	cf 92       	push	r12
   15e34:	df 92       	push	r13
   15e36:	ef 92       	push	r14
   15e38:	0f 93       	push	r16
   15e3a:	1f 93       	push	r17
   15e3c:	cf 93       	push	r28
   15e3e:	df 93       	push	r29
   15e40:	00 d0       	rcall	.+0      	; 0x15e42 <amigo_overflow_check+0x10>
   15e42:	00 d0       	rcall	.+0      	; 0x15e44 <amigo_overflow_check+0x12>
   15e44:	1f 92       	push	r1
   15e46:	ec 01       	movw	r28, r24
   15e48:	8b 01       	movw	r16, r22
   15e4a:	80 e0       	ldi	r24, 0x00	; 0
   15e4c:	90 e0       	ldi	r25, 0x00	; 0
   15e4e:	2f ed       	ldi	r18, 0xDF	; 223
   15e50:	3d e2       	ldi	r19, 0x2D	; 45
   15e52:	69 01       	movw	r12, r18
   15e54:	e1 2c       	mov	r14, r1
   15e56:	2d 81       	ldd	r18, Y+5	; 0x05
   15e58:	30 e0       	ldi	r19, 0x00	; 0
   15e5a:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   15e5e:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   15e62:	40 85       	ldd	r20, Z+8	; 0x08
   15e64:	51 85       	ldd	r21, Z+9	; 0x09
   15e66:	24 17       	cp	r18, r20
   15e68:	35 07       	cpc	r19, r21
   15e6a:	64 f1       	brlt	.+88     	; 0x15ec4 <amigo_overflow_check+0x92>
   15e6c:	1d 82       	std	Y+5, r1	; 0x05
   15e6e:	2c 81       	ldd	r18, Y+4	; 0x04
   15e70:	2f 5f       	subi	r18, 0xFF	; 255
   15e72:	2c 83       	std	Y+4, r18	; 0x04
   15e74:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   15e78:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   15e7c:	2c 81       	ldd	r18, Y+4	; 0x04
   15e7e:	30 e0       	ldi	r19, 0x00	; 0
   15e80:	42 85       	ldd	r20, Z+10	; 0x0a
   15e82:	53 85       	ldd	r21, Z+11	; 0x0b
   15e84:	24 17       	cp	r18, r20
   15e86:	35 07       	cpc	r19, r21
   15e88:	34 f3       	brlt	.-52     	; 0x15e56 <amigo_overflow_check+0x24>
   15e8a:	1c 82       	std	Y+4, r1	; 0x04
   15e8c:	2b 81       	ldd	r18, Y+3	; 0x03
   15e8e:	2f 5f       	subi	r18, 0xFF	; 255
   15e90:	2b 83       	std	Y+3, r18	; 0x03
   15e92:	30 e0       	ldi	r19, 0x00	; 0
   15e94:	44 85       	ldd	r20, Z+12	; 0x0c
   15e96:	55 85       	ldd	r21, Z+13	; 0x0d
   15e98:	24 17       	cp	r18, r20
   15e9a:	35 07       	cpc	r19, r21
   15e9c:	5c f3       	brlt	.-42     	; 0x15e74 <amigo_overflow_check+0x42>
   15e9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ea2:	80 ff       	sbrs	r24, 0
   15ea4:	0c c0       	rjmp	.+24     	; 0x15ebe <amigo_overflow_check+0x8c>
   15ea6:	01 15       	cp	r16, r1
   15ea8:	11 05       	cpc	r17, r1
   15eaa:	49 f0       	breq	.+18     	; 0x15ebe <amigo_overflow_check+0x8c>
   15eac:	ed b7       	in	r30, 0x3d	; 61
   15eae:	fe b7       	in	r31, 0x3e	; 62
   15eb0:	15 83       	std	Z+5, r17	; 0x05
   15eb2:	04 83       	std	Z+4, r16	; 0x04
   15eb4:	c1 82       	std	Z+1, r12	; 0x01
   15eb6:	d2 82       	std	Z+2, r13	; 0x02
   15eb8:	e3 82       	std	Z+3, r14	; 0x03
   15eba:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15ebe:	81 e0       	ldi	r24, 0x01	; 1
   15ec0:	90 e0       	ldi	r25, 0x00	; 0
   15ec2:	d8 cf       	rjmp	.-80     	; 0x15e74 <amigo_overflow_check+0x42>
   15ec4:	0f 90       	pop	r0
   15ec6:	0f 90       	pop	r0
   15ec8:	0f 90       	pop	r0
   15eca:	0f 90       	pop	r0
   15ecc:	0f 90       	pop	r0
   15ece:	df 91       	pop	r29
   15ed0:	cf 91       	pop	r28
   15ed2:	1f 91       	pop	r17
   15ed4:	0f 91       	pop	r16
   15ed6:	ef 90       	pop	r14
   15ed8:	df 90       	pop	r13
   15eda:	cf 90       	pop	r12
   15edc:	08 95       	ret

00015ede <amigo_chs_to_logical>:
   15ede:	a1 e1       	ldi	r26, 0x11	; 17
   15ee0:	b0 e0       	ldi	r27, 0x00	; 0
   15ee2:	e5 e7       	ldi	r30, 0x75	; 117
   15ee4:	ff ea       	ldi	r31, 0xAF	; 175
   15ee6:	0c 94 f0 e2 	jmp	0x1c5e0	; 0x1c5e0 <__prologue_saves__+0x8>
   15eea:	8b 01       	movw	r16, r22
   15eec:	60 91 6c 19 	lds	r22, 0x196C	; 0x80196c <AMIGOp>
   15ef0:	70 91 6d 19 	lds	r23, 0x196D	; 0x80196d <AMIGOp+0x1>
   15ef4:	fb 01       	movw	r30, r22
   15ef6:	40 85       	ldd	r20, Z+8	; 0x08
   15ef8:	51 85       	ldd	r21, Z+9	; 0x09
   15efa:	fc 01       	movw	r30, r24
   15efc:	c4 81       	ldd	r28, Z+4	; 0x04
   15efe:	d0 e0       	ldi	r29, 0x00	; 0
   15f00:	4c 9f       	mul	r20, r28
   15f02:	90 01       	movw	r18, r0
   15f04:	4d 9f       	mul	r20, r29
   15f06:	30 0d       	add	r19, r0
   15f08:	5c 9f       	mul	r21, r28
   15f0a:	30 0d       	add	r19, r0
   15f0c:	11 24       	eor	r1, r1
   15f0e:	49 01       	movw	r8, r18
   15f10:	33 0f       	add	r19, r19
   15f12:	aa 08       	sbc	r10, r10
   15f14:	bb 08       	sbc	r11, r11
   15f16:	63 80       	ldd	r6, Z+3	; 0x03
   15f18:	71 2c       	mov	r7, r1
   15f1a:	fb 01       	movw	r30, r22
   15f1c:	e2 84       	ldd	r14, Z+10	; 0x0a
   15f1e:	f3 84       	ldd	r15, Z+11	; 0x0b
   15f20:	4e 9d       	mul	r20, r14
   15f22:	d0 01       	movw	r26, r0
   15f24:	4f 9d       	mul	r20, r15
   15f26:	b0 0d       	add	r27, r0
   15f28:	5e 9d       	mul	r21, r14
   15f2a:	b0 0d       	add	r27, r0
   15f2c:	11 24       	eor	r1, r1
   15f2e:	a6 9d       	mul	r26, r6
   15f30:	90 01       	movw	r18, r0
   15f32:	a7 9d       	mul	r26, r7
   15f34:	30 0d       	add	r19, r0
   15f36:	b6 9d       	mul	r27, r6
   15f38:	30 0d       	add	r19, r0
   15f3a:	11 24       	eor	r1, r1
   15f3c:	69 01       	movw	r12, r18
   15f3e:	33 0f       	add	r19, r19
   15f40:	ee 08       	sbc	r14, r14
   15f42:	ff 08       	sbc	r15, r15
   15f44:	8c 0c       	add	r8, r12
   15f46:	9d 1c       	adc	r9, r13
   15f48:	ae 1c       	adc	r10, r14
   15f4a:	bf 1c       	adc	r11, r15
   15f4c:	fc 01       	movw	r30, r24
   15f4e:	f5 80       	ldd	r15, Z+5	; 0x05
   15f50:	a5 01       	movw	r20, r10
   15f52:	94 01       	movw	r18, r8
   15f54:	2f 0d       	add	r18, r15
   15f56:	31 1d       	adc	r19, r1
   15f58:	41 1d       	adc	r20, r1
   15f5a:	51 1d       	adc	r21, r1
   15f5c:	fb 01       	movw	r30, r22
   15f5e:	a6 81       	ldd	r26, Z+6	; 0x06
   15f60:	b7 81       	ldd	r27, Z+7	; 0x07
   15f62:	0e 94 d6 e2 	call	0x1c5ac	; 0x1c5ac <__mulshisi3>
   15f66:	4b 01       	movw	r8, r22
   15f68:	5c 01       	movw	r10, r24
   15f6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f6e:	85 ff       	sbrs	r24, 5
   15f70:	22 c0       	rjmp	.+68     	; 0x15fb6 <amigo_chs_to_logical+0xd8>
   15f72:	8f 2d       	mov	r24, r15
   15f74:	90 e0       	ldi	r25, 0x00	; 0
   15f76:	ed b7       	in	r30, 0x3d	; 61
   15f78:	fe b7       	in	r31, 0x3e	; 62
   15f7a:	91 8b       	std	Z+17, r25	; 0x11
   15f7c:	80 8b       	std	Z+16, r24	; 0x10
   15f7e:	d7 87       	std	Z+15, r29	; 0x0f
   15f80:	c6 87       	std	Z+14, r28	; 0x0e
   15f82:	75 86       	std	Z+13, r7	; 0x0d
   15f84:	64 86       	std	Z+12, r6	; 0x0c
   15f86:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   15f8a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   15f8e:	81 81       	ldd	r24, Z+1	; 0x01
   15f90:	90 e0       	ldi	r25, 0x00	; 0
   15f92:	ed b7       	in	r30, 0x3d	; 61
   15f94:	fe b7       	in	r31, 0x3e	; 62
   15f96:	93 87       	std	Z+11, r25	; 0x0b
   15f98:	82 87       	std	Z+10, r24	; 0x0a
   15f9a:	86 82       	std	Z+6, r8	; 0x06
   15f9c:	97 82       	std	Z+7, r9	; 0x07
   15f9e:	a0 86       	std	Z+8, r10	; 0x08
   15fa0:	b1 86       	std	Z+9, r11	; 0x09
   15fa2:	15 83       	std	Z+5, r17	; 0x05
   15fa4:	04 83       	std	Z+4, r16	; 0x04
   15fa6:	8c e8       	ldi	r24, 0x8C	; 140
   15fa8:	9d e2       	ldi	r25, 0x2D	; 45
   15faa:	a0 e0       	ldi	r26, 0x00	; 0
   15fac:	81 83       	std	Z+1, r24	; 0x01
   15fae:	92 83       	std	Z+2, r25	; 0x02
   15fb0:	a3 83       	std	Z+3, r26	; 0x03
   15fb2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   15fb6:	c5 01       	movw	r24, r10
   15fb8:	b4 01       	movw	r22, r8
   15fba:	cd b7       	in	r28, 0x3d	; 61
   15fbc:	de b7       	in	r29, 0x3e	; 62
   15fbe:	61 96       	adiw	r28, 0x11	; 17
   15fc0:	ee e0       	ldi	r30, 0x0E	; 14
   15fc2:	0c 94 0c e3 	jmp	0x1c618	; 0x1c618 <__epilogue_restores__+0x8>

00015fc6 <amigo_init>:
   15fc6:	ef 92       	push	r14
   15fc8:	ff 92       	push	r15
   15fca:	0f 93       	push	r16
   15fcc:	1f 93       	push	r17
   15fce:	cf 93       	push	r28
   15fd0:	df 93       	push	r29
   15fd2:	05 ed       	ldi	r16, 0xD5	; 213
   15fd4:	10 e2       	ldi	r17, 0x20	; 32
   15fd6:	cb e0       	ldi	r28, 0x0B	; 11
   15fd8:	d0 e0       	ldi	r29, 0x00	; 0
   15fda:	84 e0       	ldi	r24, 0x04	; 4
   15fdc:	f8 2e       	mov	r15, r24
   15fde:	92 e0       	ldi	r25, 0x02	; 2
   15fe0:	e9 2e       	mov	r14, r25
   15fe2:	d8 01       	movw	r26, r16
   15fe4:	8c 91       	ld	r24, X
   15fe6:	81 30       	cpi	r24, 0x01	; 1
   15fe8:	31 f5       	brne	.+76     	; 0x16036 <amigo_init+0x70>
   15fea:	ce 01       	movw	r24, r28
   15fec:	0e 94 cd 95 	call	0x12b9a	; 0x12b9a <set_active_device>
   15ff0:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   15ff4:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   15ff8:	10 82       	st	Z, r1
   15ffa:	9f 01       	movw	r18, r30
   15ffc:	27 5f       	subi	r18, 0xF7	; 247
   15ffe:	3f 4f       	sbci	r19, 0xFF	; 255
   16000:	d9 01       	movw	r26, r18
   16002:	8f 2d       	mov	r24, r15
   16004:	1d 92       	st	X+, r1
   16006:	8a 95       	dec	r24
   16008:	e9 f7       	brne	.-6      	; 0x16004 <amigo_init+0x3e>
   1600a:	2c 5f       	subi	r18, 0xFC	; 252
   1600c:	3f 4f       	sbci	r19, 0xFF	; 255
   1600e:	d9 01       	movw	r26, r18
   16010:	8f 2d       	mov	r24, r15
   16012:	1d 92       	st	X+, r1
   16014:	8a 95       	dec	r24
   16016:	e9 f7       	brne	.-6      	; 0x16012 <amigo_init+0x4c>
   16018:	11 82       	std	Z+1, r1	; 0x01
   1601a:	15 82       	std	Z+5, r1	; 0x05
   1601c:	14 82       	std	Z+4, r1	; 0x04
   1601e:	13 82       	std	Z+3, r1	; 0x03
   16020:	e6 82       	std	Z+6, r14	; 0x06
   16022:	10 86       	std	Z+8, r1	; 0x08
   16024:	17 82       	std	Z+7, r1	; 0x07
   16026:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1602a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1602e:	81 81       	ldd	r24, Z+1	; 0x01
   16030:	90 e0       	ldi	r25, 0x00	; 0
   16032:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
   16036:	21 97       	sbiw	r28, 0x01	; 1
   16038:	0b 52       	subi	r16, 0x2B	; 43
   1603a:	11 09       	sbc	r17, r1
   1603c:	cf 3f       	cpi	r28, 0xFF	; 255
   1603e:	af ef       	ldi	r26, 0xFF	; 255
   16040:	da 07       	cpc	r29, r26
   16042:	79 f6       	brne	.-98     	; 0x15fe2 <amigo_init+0x1c>
   16044:	cd b7       	in	r28, 0x3d	; 61
   16046:	de b7       	in	r29, 0x3e	; 62
   16048:	e6 e0       	ldi	r30, 0x06	; 6
   1604a:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

0001604e <amigo_request_logical_address>:
   1604e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16052:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16056:	15 86       	std	Z+13, r1	; 0x0d
   16058:	83 81       	ldd	r24, Z+3	; 0x03
   1605a:	86 87       	std	Z+14, r24	; 0x0e
   1605c:	84 81       	ldd	r24, Z+4	; 0x04
   1605e:	87 87       	std	Z+15, r24	; 0x0f
   16060:	85 81       	ldd	r24, Z+5	; 0x05
   16062:	80 8b       	std	Z+16, r24	; 0x10
   16064:	80 e0       	ldi	r24, 0x00	; 0
   16066:	90 e0       	ldi	r25, 0x00	; 0
   16068:	08 95       	ret

0001606a <amigo_request_status>:
   1606a:	00 d0       	rcall	.+0      	; 0x1606c <amigo_request_status+0x2>
   1606c:	1f 92       	push	r1
   1606e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16072:	85 ff       	sbrs	r24, 5
   16074:	0a c0       	rjmp	.+20     	; 0x1608a <amigo_request_status+0x20>
   16076:	8f e5       	ldi	r24, 0x5F	; 95
   16078:	9e e2       	ldi	r25, 0x2E	; 46
   1607a:	a0 e0       	ldi	r26, 0x00	; 0
   1607c:	ed b7       	in	r30, 0x3d	; 61
   1607e:	fe b7       	in	r31, 0x3e	; 62
   16080:	81 83       	std	Z+1, r24	; 0x01
   16082:	92 83       	std	Z+2, r25	; 0x02
   16084:	a3 83       	std	Z+3, r26	; 0x03
   16086:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1608a:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1608e:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16092:	11 86       	std	Z+9, r1	; 0x09
   16094:	81 81       	ldd	r24, Z+1	; 0x01
   16096:	82 87       	std	Z+10, r24	; 0x0a
   16098:	8d e0       	ldi	r24, 0x0D	; 13
   1609a:	83 87       	std	Z+11, r24	; 0x0b
   1609c:	14 86       	std	Z+12, r1	; 0x0c
   1609e:	0e 94 34 6e 	call	0xdc68	; 0xdc68 <mmc_wp_status>
   160a2:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   160a6:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   160aa:	89 2b       	or	r24, r25
   160ac:	19 f0       	breq	.+6      	; 0x160b4 <amigo_request_status+0x4a>
   160ae:	84 85       	ldd	r24, Z+12	; 0x0c
   160b0:	80 66       	ori	r24, 0x60	; 96
   160b2:	84 87       	std	Z+12, r24	; 0x0c
   160b4:	86 81       	ldd	r24, Z+6	; 0x06
   160b6:	82 30       	cpi	r24, 0x02	; 2
   160b8:	31 f4       	brne	.+12     	; 0x160c6 <amigo_request_status+0x5c>
   160ba:	83 e1       	ldi	r24, 0x13	; 19
   160bc:	81 87       	std	Z+9, r24	; 0x09
   160be:	84 85       	ldd	r24, Z+12	; 0x0c
   160c0:	88 60       	ori	r24, 0x08	; 8
   160c2:	84 87       	std	Z+12, r24	; 0x0c
   160c4:	21 c0       	rjmp	.+66     	; 0x16108 <amigo_request_status+0x9e>
   160c6:	27 81       	ldd	r18, Z+7	; 0x07
   160c8:	30 85       	ldd	r19, Z+8	; 0x08
   160ca:	21 15       	cp	r18, r1
   160cc:	31 05       	cpc	r19, r1
   160ce:	11 f4       	brne	.+4      	; 0x160d4 <amigo_request_status+0x6a>
   160d0:	81 30       	cpi	r24, 0x01	; 1
   160d2:	d1 f4       	brne	.+52     	; 0x16108 <amigo_request_status+0x9e>
   160d4:	26 fd       	sbrc	r18, 6
   160d6:	0c c0       	rjmp	.+24     	; 0x160f0 <amigo_request_status+0x86>
   160d8:	25 ff       	sbrs	r18, 5
   160da:	03 c0       	rjmp	.+6      	; 0x160e2 <amigo_request_status+0x78>
   160dc:	8a e0       	ldi	r24, 0x0A	; 10
   160de:	81 87       	std	Z+9, r24	; 0x09
   160e0:	0d c0       	rjmp	.+26     	; 0x160fc <amigo_request_status+0x92>
   160e2:	84 85       	ldd	r24, Z+12	; 0x0c
   160e4:	24 ff       	sbrs	r18, 4
   160e6:	02 c0       	rjmp	.+4      	; 0x160ec <amigo_request_status+0x82>
   160e8:	83 60       	ori	r24, 0x03	; 3
   160ea:	07 c0       	rjmp	.+14     	; 0x160fa <amigo_request_status+0x90>
   160ec:	21 ff       	sbrs	r18, 1
   160ee:	02 c0       	rjmp	.+4      	; 0x160f4 <amigo_request_status+0x8a>
   160f0:	83 e1       	ldi	r24, 0x13	; 19
   160f2:	f5 cf       	rjmp	.-22     	; 0x160de <amigo_request_status+0x74>
   160f4:	22 ff       	sbrs	r18, 2
   160f6:	02 c0       	rjmp	.+4      	; 0x160fc <amigo_request_status+0x92>
   160f8:	84 60       	ori	r24, 0x04	; 4
   160fa:	84 87       	std	Z+12, r24	; 0x0c
   160fc:	84 85       	ldd	r24, Z+12	; 0x0c
   160fe:	80 61       	ori	r24, 0x10	; 16
   16100:	84 87       	std	Z+12, r24	; 0x0c
   16102:	83 85       	ldd	r24, Z+11	; 0x0b
   16104:	80 68       	ori	r24, 0x80	; 128
   16106:	83 87       	std	Z+11, r24	; 0x0b
   16108:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1610c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16110:	81 81       	ldd	r24, Z+1	; 0x01
   16112:	90 e0       	ldi	r25, 0x00	; 0
   16114:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   16118:	80 e0       	ldi	r24, 0x00	; 0
   1611a:	90 e0       	ldi	r25, 0x00	; 0
   1611c:	0f 90       	pop	r0
   1611e:	0f 90       	pop	r0
   16120:	0f 90       	pop	r0
   16122:	08 95       	ret

00016124 <amigo_send_logical_address>:
   16124:	a5 e0       	ldi	r26, 0x05	; 5
   16126:	b0 e0       	ldi	r27, 0x00	; 0
   16128:	e8 e9       	ldi	r30, 0x98	; 152
   1612a:	f0 eb       	ldi	r31, 0xB0	; 176
   1612c:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   16130:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16134:	85 ff       	sbrs	r24, 5
   16136:	0a c0       	rjmp	.+20     	; 0x1614c <amigo_send_logical_address+0x28>
   16138:	81 e4       	ldi	r24, 0x41	; 65
   1613a:	9e e2       	ldi	r25, 0x2E	; 46
   1613c:	a0 e0       	ldi	r26, 0x00	; 0
   1613e:	ed b7       	in	r30, 0x3d	; 61
   16140:	fe b7       	in	r31, 0x3e	; 62
   16142:	81 83       	std	Z+1, r24	; 0x01
   16144:	92 83       	std	Z+2, r25	; 0x02
   16146:	a3 83       	std	Z+3, r26	; 0x03
   16148:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1614c:	80 e0       	ldi	r24, 0x00	; 0
   1614e:	91 e0       	ldi	r25, 0x01	; 1
   16150:	9d 83       	std	Y+5, r25	; 0x05
   16152:	8c 83       	std	Y+4, r24	; 0x04
   16154:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16158:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   1615c:	ae 01       	movw	r20, r28
   1615e:	4c 5f       	subi	r20, 0xFC	; 252
   16160:	5f 4f       	sbci	r21, 0xFF	; 255
   16162:	64 e0       	ldi	r22, 0x04	; 4
   16164:	70 e0       	ldi	r23, 0x00	; 0
   16166:	0d 96       	adiw	r24, 0x0d	; 13
   16168:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   1616c:	2c 81       	ldd	r18, Y+4	; 0x04
   1616e:	3d 81       	ldd	r19, Y+5	; 0x05
   16170:	22 27       	eor	r18, r18
   16172:	30 7d       	andi	r19, 0xD0	; 208
   16174:	23 2b       	or	r18, r19
   16176:	11 f4       	brne	.+4      	; 0x1617c <amigo_send_logical_address+0x58>
   16178:	04 97       	sbiw	r24, 0x04	; 4
   1617a:	c9 f0       	breq	.+50     	; 0x161ae <amigo_send_logical_address+0x8a>
   1617c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16180:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16184:	87 81       	ldd	r24, Z+7	; 0x07
   16186:	90 85       	ldd	r25, Z+8	; 0x08
   16188:	80 62       	ori	r24, 0x20	; 32
   1618a:	90 87       	std	Z+8, r25	; 0x08
   1618c:	87 83       	std	Z+7, r24	; 0x07
   1618e:	81 e0       	ldi	r24, 0x01	; 1
   16190:	86 83       	std	Z+6, r24	; 0x06
   16192:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16196:	80 ff       	sbrs	r24, 0
   16198:	0a c0       	rjmp	.+20     	; 0x161ae <amigo_send_logical_address+0x8a>
   1619a:	87 e2       	ldi	r24, 0x27	; 39
   1619c:	9e e2       	ldi	r25, 0x2E	; 46
   1619e:	a0 e0       	ldi	r26, 0x00	; 0
   161a0:	ed b7       	in	r30, 0x3d	; 61
   161a2:	fe b7       	in	r31, 0x3e	; 62
   161a4:	81 83       	std	Z+1, r24	; 0x01
   161a6:	92 83       	std	Z+2, r25	; 0x02
   161a8:	a3 83       	std	Z+3, r26	; 0x03
   161aa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   161ae:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   161b2:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   161b6:	81 81       	ldd	r24, Z+1	; 0x01
   161b8:	90 e0       	ldi	r25, 0x00	; 0
   161ba:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   161be:	8c 81       	ldd	r24, Y+4	; 0x04
   161c0:	9d 81       	ldd	r25, Y+5	; 0x05
   161c2:	88 27       	eor	r24, r24
   161c4:	90 7d       	andi	r25, 0xD0	; 208
   161c6:	25 96       	adiw	r28, 0x05	; 5
   161c8:	e2 e0       	ldi	r30, 0x02	; 2
   161ca:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000161ce <amigo_send_status>:
   161ce:	a5 e0       	ldi	r26, 0x05	; 5
   161d0:	b0 e0       	ldi	r27, 0x00	; 0
   161d2:	ed ee       	ldi	r30, 0xED	; 237
   161d4:	f0 eb       	ldi	r31, 0xB0	; 176
   161d6:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   161da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161de:	85 ff       	sbrs	r24, 5
   161e0:	0a c0       	rjmp	.+20     	; 0x161f6 <amigo_send_status+0x28>
   161e2:	82 e1       	ldi	r24, 0x12	; 18
   161e4:	9e e2       	ldi	r25, 0x2E	; 46
   161e6:	a0 e0       	ldi	r26, 0x00	; 0
   161e8:	ed b7       	in	r30, 0x3d	; 61
   161ea:	fe b7       	in	r31, 0x3e	; 62
   161ec:	81 83       	std	Z+1, r24	; 0x01
   161ee:	92 83       	std	Z+2, r25	; 0x02
   161f0:	a3 83       	std	Z+3, r26	; 0x03
   161f2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   161f6:	80 e0       	ldi	r24, 0x00	; 0
   161f8:	91 e0       	ldi	r25, 0x01	; 1
   161fa:	9d 83       	std	Y+5, r25	; 0x05
   161fc:	8c 83       	std	Y+4, r24	; 0x04
   161fe:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16202:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16206:	ae 01       	movw	r20, r28
   16208:	4c 5f       	subi	r20, 0xFC	; 252
   1620a:	5f 4f       	sbci	r21, 0xFF	; 255
   1620c:	64 e0       	ldi	r22, 0x04	; 4
   1620e:	70 e0       	ldi	r23, 0x00	; 0
   16210:	09 96       	adiw	r24, 0x09	; 9
   16212:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   16216:	2c 81       	ldd	r18, Y+4	; 0x04
   16218:	3d 81       	ldd	r19, Y+5	; 0x05
   1621a:	22 27       	eor	r18, r18
   1621c:	30 7d       	andi	r19, 0xD0	; 208
   1621e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16222:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16226:	23 2b       	or	r18, r19
   16228:	11 f4       	brne	.+4      	; 0x1622e <amigo_send_status+0x60>
   1622a:	04 97       	sbiw	r24, 0x04	; 4
   1622c:	b1 f0       	breq	.+44     	; 0x1625a <amigo_send_status+0x8c>
   1622e:	87 81       	ldd	r24, Z+7	; 0x07
   16230:	90 85       	ldd	r25, Z+8	; 0x08
   16232:	80 62       	ori	r24, 0x20	; 32
   16234:	90 87       	std	Z+8, r25	; 0x08
   16236:	87 83       	std	Z+7, r24	; 0x07
   16238:	81 e0       	ldi	r24, 0x01	; 1
   1623a:	86 83       	std	Z+6, r24	; 0x06
   1623c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16240:	80 ff       	sbrs	r24, 0
   16242:	0e c0       	rjmp	.+28     	; 0x16260 <amigo_send_status+0x92>
   16244:	88 ef       	ldi	r24, 0xF8	; 248
   16246:	9d e2       	ldi	r25, 0x2D	; 45
   16248:	a0 e0       	ldi	r26, 0x00	; 0
   1624a:	ed b7       	in	r30, 0x3d	; 61
   1624c:	fe b7       	in	r31, 0x3e	; 62
   1624e:	81 83       	std	Z+1, r24	; 0x01
   16250:	92 83       	std	Z+2, r25	; 0x02
   16252:	a3 83       	std	Z+3, r26	; 0x03
   16254:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   16258:	03 c0       	rjmp	.+6      	; 0x16260 <amigo_send_status+0x92>
   1625a:	10 86       	std	Z+8, r1	; 0x08
   1625c:	17 82       	std	Z+7, r1	; 0x07
   1625e:	16 82       	std	Z+6, r1	; 0x06
   16260:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16264:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16268:	81 81       	ldd	r24, Z+1	; 0x01
   1626a:	90 e0       	ldi	r25, 0x00	; 0
   1626c:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   16270:	8c 81       	ldd	r24, Y+4	; 0x04
   16272:	9d 81       	ldd	r25, Y+5	; 0x05
   16274:	88 27       	eor	r24, r24
   16276:	90 7d       	andi	r25, 0xD0	; 208
   16278:	25 96       	adiw	r28, 0x05	; 5
   1627a:	e2 e0       	ldi	r30, 0x02	; 2
   1627c:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00016280 <amigo_increment>:
   16280:	a1 e1       	ldi	r26, 0x11	; 17
   16282:	b0 e0       	ldi	r27, 0x00	; 0
   16284:	e6 e4       	ldi	r30, 0x46	; 70
   16286:	f1 eb       	ldi	r31, 0xB1	; 177
   16288:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   1628c:	bc 01       	movw	r22, r24
   1628e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16292:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16296:	91 e1       	ldi	r25, 0x11	; 17
   16298:	de 01       	movw	r26, r28
   1629a:	11 96       	adiw	r26, 0x01	; 1
   1629c:	01 90       	ld	r0, Z+
   1629e:	0d 92       	st	X+, r0
   162a0:	9a 95       	dec	r25
   162a2:	e1 f7       	brne	.-8      	; 0x1629c <amigo_increment+0x1c>
   162a4:	9e 81       	ldd	r25, Y+6	; 0x06
   162a6:	9f 5f       	subi	r25, 0xFF	; 255
   162a8:	9e 83       	std	Y+6, r25	; 0x06
   162aa:	ce 01       	movw	r24, r28
   162ac:	01 96       	adiw	r24, 0x01	; 1
   162ae:	c1 dd       	rcall	.-1150   	; 0x15e32 <amigo_overflow_check>
   162b0:	00 97       	sbiw	r24, 0x00	; 0
   162b2:	59 f4       	brne	.+22     	; 0x162ca <amigo_increment+0x4a>
   162b4:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   162b8:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   162bc:	21 e1       	ldi	r18, 0x11	; 17
   162be:	fe 01       	movw	r30, r28
   162c0:	31 96       	adiw	r30, 0x01	; 1
   162c2:	01 90       	ld	r0, Z+
   162c4:	0d 92       	st	X+, r0
   162c6:	2a 95       	dec	r18
   162c8:	e1 f7       	brne	.-8      	; 0x162c2 <amigo_increment+0x42>
   162ca:	61 96       	adiw	r28, 0x11	; 17
   162cc:	e2 e0       	ldi	r30, 0x02	; 2
   162ce:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000162d2 <amigo_seek>:
   162d2:	0f 93       	push	r16
   162d4:	1f 93       	push	r17
   162d6:	cf 93       	push	r28
   162d8:	df 93       	push	r29
   162da:	ec 01       	movw	r28, r24
   162dc:	62 e9       	ldi	r22, 0x92	; 146
   162de:	75 e1       	ldi	r23, 0x15	; 21
   162e0:	a8 dd       	rcall	.-1200   	; 0x15e32 <amigo_overflow_check>
   162e2:	8c 01       	movw	r16, r24
   162e4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   162e8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   162ec:	89 2b       	or	r24, r25
   162ee:	41 f0       	breq	.+16     	; 0x16300 <amigo_seek+0x2e>
   162f0:	81 e0       	ldi	r24, 0x01	; 1
   162f2:	86 83       	std	Z+6, r24	; 0x06
   162f4:	87 81       	ldd	r24, Z+7	; 0x07
   162f6:	90 85       	ldd	r25, Z+8	; 0x08
   162f8:	84 60       	ori	r24, 0x04	; 4
   162fa:	90 87       	std	Z+8, r25	; 0x08
   162fc:	87 83       	std	Z+7, r24	; 0x07
   162fe:	06 c0       	rjmp	.+12     	; 0x1630c <amigo_seek+0x3a>
   16300:	8d 81       	ldd	r24, Y+5	; 0x05
   16302:	85 83       	std	Z+5, r24	; 0x05
   16304:	8c 81       	ldd	r24, Y+4	; 0x04
   16306:	84 83       	std	Z+4, r24	; 0x04
   16308:	8b 81       	ldd	r24, Y+3	; 0x03
   1630a:	83 83       	std	Z+3, r24	; 0x03
   1630c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16310:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16314:	81 81       	ldd	r24, Z+1	; 0x01
   16316:	90 e0       	ldi	r25, 0x00	; 0
   16318:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   1631c:	c8 01       	movw	r24, r16
   1631e:	df 91       	pop	r29
   16320:	cf 91       	pop	r28
   16322:	1f 91       	pop	r17
   16324:	0f 91       	pop	r16
   16326:	08 95       	ret

00016328 <amigo_verify>:
   16328:	8f 92       	push	r8
   1632a:	9f 92       	push	r9
   1632c:	af 92       	push	r10
   1632e:	bf 92       	push	r11
   16330:	ef 92       	push	r14
   16332:	ff 92       	push	r15
   16334:	0f 93       	push	r16
   16336:	1f 93       	push	r17
   16338:	cf 93       	push	r28
   1633a:	df 93       	push	r29
   1633c:	ad b7       	in	r26, 0x3d	; 61
   1633e:	be b7       	in	r27, 0x3e	; 62
   16340:	19 97       	sbiw	r26, 0x09	; 9
   16342:	0f b6       	in	r0, 0x3f	; 63
   16344:	f8 94       	cli
   16346:	be bf       	out	0x3e, r27	; 62
   16348:	0f be       	out	0x3f, r0	; 63
   1634a:	ad bf       	out	0x3d, r26	; 61
   1634c:	7c 01       	movw	r14, r24
   1634e:	67 e9       	ldi	r22, 0x97	; 151
   16350:	75 e1       	ldi	r23, 0x15	; 21
   16352:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16356:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   1635a:	c1 dd       	rcall	.-1150   	; 0x15ede <amigo_chs_to_logical>
   1635c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16360:	25 ff       	sbrs	r18, 5
   16362:	10 c0       	rjmp	.+32     	; 0x16384 <amigo_verify+0x5c>
   16364:	ed b7       	in	r30, 0x3d	; 61
   16366:	fe b7       	in	r31, 0x3e	; 62
   16368:	e0 86       	std	Z+8, r14	; 0x08
   1636a:	f1 86       	std	Z+9, r15	; 0x09
   1636c:	64 83       	std	Z+4, r22	; 0x04
   1636e:	75 83       	std	Z+5, r23	; 0x05
   16370:	86 83       	std	Z+6, r24	; 0x06
   16372:	97 83       	std	Z+7, r25	; 0x07
   16374:	87 eb       	ldi	r24, 0xB7	; 183
   16376:	9d e2       	ldi	r25, 0x2D	; 45
   16378:	a0 e0       	ldi	r26, 0x00	; 0
   1637a:	81 83       	std	Z+1, r24	; 0x01
   1637c:	92 83       	std	Z+2, r25	; 0x02
   1637e:	a3 83       	std	Z+3, r26	; 0x03
   16380:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   16384:	e7 01       	movw	r28, r14
   16386:	20 97       	sbiw	r28, 0x00	; 0
   16388:	09 f4       	brne	.+2      	; 0x1638c <amigo_verify+0x64>
   1638a:	4b c0       	rjmp	.+150    	; 0x16422 <amigo_verify+0xfa>
   1638c:	64 ea       	ldi	r22, 0xA4	; 164
   1638e:	75 e1       	ldi	r23, 0x15	; 21
   16390:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16394:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16398:	a2 dd       	rcall	.-1212   	; 0x15ede <amigo_chs_to_logical>
   1639a:	4b 01       	movw	r8, r22
   1639c:	5c 01       	movw	r10, r24
   1639e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163a2:	86 fd       	sbrc	r24, 6
   163a4:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   163a8:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   163ac:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   163b0:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   163b4:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   163b8:	87 e0       	ldi	r24, 0x07	; 7
   163ba:	e8 0e       	add	r14, r24
   163bc:	f1 1c       	adc	r15, r1
   163be:	06 81       	ldd	r16, Z+6	; 0x06
   163c0:	17 81       	ldd	r17, Z+7	; 0x07
   163c2:	22 ef       	ldi	r18, 0xF2	; 242
   163c4:	3c e1       	ldi	r19, 0x1C	; 28
   163c6:	b5 01       	movw	r22, r10
   163c8:	a4 01       	movw	r20, r8
   163ca:	82 81       	ldd	r24, Z+2	; 0x02
   163cc:	93 81       	ldd	r25, Z+3	; 0x03
   163ce:	0e 94 07 83 	call	0x1060e	; 0x1060e <dbf_open_read>
   163d2:	7c 01       	movw	r14, r24
   163d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163d8:	86 ff       	sbrs	r24, 6
   163da:	04 c0       	rjmp	.+8      	; 0x163e4 <amigo_verify+0xbc>
   163dc:	8b ea       	ldi	r24, 0xAB	; 171
   163de:	90 e1       	ldi	r25, 0x10	; 16
   163e0:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   163e4:	20 91 6a 19 	lds	r18, 0x196A	; 0x80196a <AMIGOs>
   163e8:	30 91 6b 19 	lds	r19, 0x196B	; 0x80196b <AMIGOs+0x1>
   163ec:	f9 01       	movw	r30, r18
   163ee:	87 81       	ldd	r24, Z+7	; 0x07
   163f0:	90 85       	ldd	r25, Z+8	; 0x08
   163f2:	89 2b       	or	r24, r25
   163f4:	21 f0       	breq	.+8      	; 0x163fe <amigo_verify+0xd6>
   163f6:	81 e0       	ldi	r24, 0x01	; 1
   163f8:	f9 01       	movw	r30, r18
   163fa:	86 83       	std	Z+6, r24	; 0x06
   163fc:	15 c0       	rjmp	.+42     	; 0x16428 <amigo_verify+0x100>
   163fe:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <AMIGOp>
   16402:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <AMIGOp+0x1>
   16406:	fc 01       	movw	r30, r24
   16408:	86 81       	ldd	r24, Z+6	; 0x06
   1640a:	97 81       	ldd	r25, Z+7	; 0x07
   1640c:	e8 16       	cp	r14, r24
   1640e:	f9 06       	cpc	r15, r25
   16410:	91 f7       	brne	.-28     	; 0x163f6 <amigo_verify+0xce>
   16412:	8c ea       	ldi	r24, 0xAC	; 172
   16414:	95 e1       	ldi	r25, 0x15	; 21
   16416:	34 df       	rcall	.-408    	; 0x16280 <amigo_increment>
   16418:	21 97       	sbiw	r28, 0x01	; 1
   1641a:	89 2b       	or	r24, r25
   1641c:	09 f4       	brne	.+2      	; 0x16420 <amigo_verify+0xf8>
   1641e:	b3 cf       	rjmp	.-154    	; 0x16386 <amigo_verify+0x5e>
   16420:	03 c0       	rjmp	.+6      	; 0x16428 <amigo_verify+0x100>
   16422:	c0 e0       	ldi	r28, 0x00	; 0
   16424:	d0 e0       	ldi	r29, 0x00	; 0
   16426:	02 c0       	rjmp	.+4      	; 0x1642c <amigo_verify+0x104>
   16428:	c1 e0       	ldi	r28, 0x01	; 1
   1642a:	d0 e0       	ldi	r29, 0x00	; 0
   1642c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16430:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16434:	81 81       	ldd	r24, Z+1	; 0x01
   16436:	90 e0       	ldi	r25, 0x00	; 0
   16438:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   1643c:	ce 01       	movw	r24, r28
   1643e:	ad b7       	in	r26, 0x3d	; 61
   16440:	be b7       	in	r27, 0x3e	; 62
   16442:	19 96       	adiw	r26, 0x09	; 9
   16444:	0f b6       	in	r0, 0x3f	; 63
   16446:	f8 94       	cli
   16448:	be bf       	out	0x3e, r27	; 62
   1644a:	0f be       	out	0x3f, r0	; 63
   1644c:	ad bf       	out	0x3d, r26	; 61
   1644e:	df 91       	pop	r29
   16450:	cf 91       	pop	r28
   16452:	1f 91       	pop	r17
   16454:	0f 91       	pop	r16
   16456:	ff 90       	pop	r15
   16458:	ef 90       	pop	r14
   1645a:	bf 90       	pop	r11
   1645c:	af 90       	pop	r10
   1645e:	9f 90       	pop	r9
   16460:	8f 90       	pop	r8
   16462:	08 95       	ret

00016464 <amigo_format>:
   16464:	ef 92       	push	r14
   16466:	ff 92       	push	r15
   16468:	0f 93       	push	r16
   1646a:	1f 93       	push	r17
   1646c:	cf 93       	push	r28
   1646e:	df 93       	push	r29
   16470:	00 d0       	rcall	.+0      	; 0x16472 <amigo_format+0xe>
   16472:	1f 92       	push	r1
   16474:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16478:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1647c:	15 82       	std	Z+5, r1	; 0x05
   1647e:	14 82       	std	Z+4, r1	; 0x04
   16480:	13 82       	std	Z+3, r1	; 0x03
   16482:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16486:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1648a:	46 81       	ldd	r20, Z+6	; 0x06
   1648c:	57 81       	ldd	r21, Z+7	; 0x07
   1648e:	68 2f       	mov	r22, r24
   16490:	70 e0       	ldi	r23, 0x00	; 0
   16492:	82 ef       	ldi	r24, 0xF2	; 242
   16494:	9c e1       	ldi	r25, 0x1C	; 28
   16496:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <memset>
   1649a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1649e:	85 ff       	sbrs	r24, 5
   164a0:	0a c0       	rjmp	.+20     	; 0x164b6 <amigo_format+0x52>
   164a2:	8c e7       	ldi	r24, 0x7C	; 124
   164a4:	9d e2       	ldi	r25, 0x2D	; 45
   164a6:	a0 e0       	ldi	r26, 0x00	; 0
   164a8:	ed b7       	in	r30, 0x3d	; 61
   164aa:	fe b7       	in	r31, 0x3e	; 62
   164ac:	81 83       	std	Z+1, r24	; 0x01
   164ae:	92 83       	std	Z+2, r25	; 0x02
   164b0:	a3 83       	std	Z+3, r26	; 0x03
   164b2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   164b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164ba:	86 fd       	sbrc	r24, 6
   164bc:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   164c0:	63 eb       	ldi	r22, 0xB3	; 179
   164c2:	75 e1       	ldi	r23, 0x15	; 21
   164c4:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   164c8:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   164cc:	08 dd       	rcall	.-1520   	; 0x15ede <amigo_chs_to_logical>
   164ce:	ab 01       	movw	r20, r22
   164d0:	bc 01       	movw	r22, r24
   164d2:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   164d6:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   164da:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   164de:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   164e2:	87 e0       	ldi	r24, 0x07	; 7
   164e4:	e8 0e       	add	r14, r24
   164e6:	f1 1c       	adc	r15, r1
   164e8:	06 81       	ldd	r16, Z+6	; 0x06
   164ea:	17 81       	ldd	r17, Z+7	; 0x07
   164ec:	22 ef       	ldi	r18, 0xF2	; 242
   164ee:	3c e1       	ldi	r19, 0x1C	; 28
   164f0:	82 81       	ldd	r24, Z+2	; 0x02
   164f2:	93 81       	ldd	r25, Z+3	; 0x03
   164f4:	0e 94 5e 83 	call	0x106bc	; 0x106bc <dbf_open_write>
   164f8:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   164fc:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16500:	27 81       	ldd	r18, Z+7	; 0x07
   16502:	30 85       	ldd	r19, Z+8	; 0x08
   16504:	21 15       	cp	r18, r1
   16506:	31 05       	cpc	r19, r1
   16508:	49 f4       	brne	.+18     	; 0x1651c <amigo_format+0xb8>
   1650a:	c0 91 6c 19 	lds	r28, 0x196C	; 0x80196c <AMIGOp>
   1650e:	d0 91 6d 19 	lds	r29, 0x196D	; 0x80196d <AMIGOp+0x1>
   16512:	4e 81       	ldd	r20, Y+6	; 0x06
   16514:	5f 81       	ldd	r21, Y+7	; 0x07
   16516:	84 17       	cp	r24, r20
   16518:	95 07       	cpc	r25, r21
   1651a:	41 f0       	breq	.+16     	; 0x1652c <amigo_format+0xc8>
   1651c:	22 60       	ori	r18, 0x02	; 2
   1651e:	30 87       	std	Z+8, r19	; 0x08
   16520:	27 83       	std	Z+7, r18	; 0x07
   16522:	81 e0       	ldi	r24, 0x01	; 1
   16524:	86 83       	std	Z+6, r24	; 0x06
   16526:	c1 e0       	ldi	r28, 0x01	; 1
   16528:	d0 e0       	ldi	r29, 0x00	; 0
   1652a:	0f c0       	rjmp	.+30     	; 0x1654a <amigo_format+0xe6>
   1652c:	80 e0       	ldi	r24, 0x00	; 0
   1652e:	90 e0       	ldi	r25, 0x00	; 0
   16530:	a7 de       	rcall	.-690    	; 0x16280 <amigo_increment>
   16532:	89 2b       	or	r24, r25
   16534:	29 f2       	breq	.-118    	; 0x164c0 <amigo_format+0x5c>
   16536:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1653a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1653e:	15 82       	std	Z+5, r1	; 0x05
   16540:	14 82       	std	Z+4, r1	; 0x04
   16542:	13 82       	std	Z+3, r1	; 0x03
   16544:	16 82       	std	Z+6, r1	; 0x06
   16546:	c0 e0       	ldi	r28, 0x00	; 0
   16548:	d0 e0       	ldi	r29, 0x00	; 0
   1654a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1654e:	86 ff       	sbrs	r24, 6
   16550:	04 c0       	rjmp	.+8      	; 0x1655a <amigo_format+0xf6>
   16552:	83 eb       	ldi	r24, 0xB3	; 179
   16554:	95 e1       	ldi	r25, 0x15	; 21
   16556:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   1655a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1655e:	85 ff       	sbrs	r24, 5
   16560:	0a c0       	rjmp	.+20     	; 0x16576 <amigo_format+0x112>
   16562:	87 e6       	ldi	r24, 0x67	; 103
   16564:	9d e2       	ldi	r25, 0x2D	; 45
   16566:	a0 e0       	ldi	r26, 0x00	; 0
   16568:	ed b7       	in	r30, 0x3d	; 61
   1656a:	fe b7       	in	r31, 0x3e	; 62
   1656c:	81 83       	std	Z+1, r24	; 0x01
   1656e:	92 83       	std	Z+2, r25	; 0x02
   16570:	a3 83       	std	Z+3, r26	; 0x03
   16572:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   16576:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1657a:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1657e:	81 81       	ldd	r24, Z+1	; 0x01
   16580:	90 e0       	ldi	r25, 0x00	; 0
   16582:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   16586:	ce 01       	movw	r24, r28
   16588:	cd b7       	in	r28, 0x3d	; 61
   1658a:	de b7       	in	r29, 0x3e	; 62
   1658c:	23 96       	adiw	r28, 0x03	; 3
   1658e:	e6 e0       	ldi	r30, 0x06	; 6
   16590:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00016594 <amigo_buffered_read_command>:
   16594:	8f 92       	push	r8
   16596:	9f 92       	push	r9
   16598:	af 92       	push	r10
   1659a:	bf 92       	push	r11
   1659c:	ef 92       	push	r14
   1659e:	ff 92       	push	r15
   165a0:	0f 93       	push	r16
   165a2:	1f 93       	push	r17
   165a4:	cf 93       	push	r28
   165a6:	df 93       	push	r29
   165a8:	00 d0       	rcall	.+0      	; 0x165aa <amigo_buffered_read_command+0x16>
   165aa:	00 d0       	rcall	.+0      	; 0x165ac <amigo_buffered_read_command+0x18>
   165ac:	1f 92       	push	r1
   165ae:	6a eb       	ldi	r22, 0xBA	; 186
   165b0:	75 e1       	ldi	r23, 0x15	; 21
   165b2:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   165b6:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   165ba:	91 dc       	rcall	.-1758   	; 0x15ede <amigo_chs_to_logical>
   165bc:	4b 01       	movw	r8, r22
   165be:	5c 01       	movw	r10, r24
   165c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165c4:	85 ff       	sbrs	r24, 5
   165c6:	12 c0       	rjmp	.+36     	; 0x165ec <amigo_buffered_read_command+0x58>
   165c8:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   165cc:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   165d0:	80 81       	ld	r24, Z
   165d2:	90 e0       	ldi	r25, 0x00	; 0
   165d4:	ed b7       	in	r30, 0x3d	; 61
   165d6:	fe b7       	in	r31, 0x3e	; 62
   165d8:	95 83       	std	Z+5, r25	; 0x05
   165da:	84 83       	std	Z+4, r24	; 0x04
   165dc:	85 e5       	ldi	r24, 0x55	; 85
   165de:	9d e2       	ldi	r25, 0x2D	; 45
   165e0:	a0 e0       	ldi	r26, 0x00	; 0
   165e2:	81 83       	std	Z+1, r24	; 0x01
   165e4:	92 83       	std	Z+2, r25	; 0x02
   165e6:	a3 83       	std	Z+3, r26	; 0x03
   165e8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   165ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165f0:	86 fd       	sbrc	r24, 6
   165f2:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   165f6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   165fa:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   165fe:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16602:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16606:	87 e0       	ldi	r24, 0x07	; 7
   16608:	e8 0e       	add	r14, r24
   1660a:	f1 1c       	adc	r15, r1
   1660c:	06 81       	ldd	r16, Z+6	; 0x06
   1660e:	17 81       	ldd	r17, Z+7	; 0x07
   16610:	22 ef       	ldi	r18, 0xF2	; 242
   16612:	3c e1       	ldi	r19, 0x1C	; 28
   16614:	b5 01       	movw	r22, r10
   16616:	a4 01       	movw	r20, r8
   16618:	82 81       	ldd	r24, Z+2	; 0x02
   1661a:	93 81       	ldd	r25, Z+3	; 0x03
   1661c:	0e 94 07 83 	call	0x1060e	; 0x1060e <dbf_open_read>
   16620:	7c 01       	movw	r14, r24
   16622:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16626:	86 ff       	sbrs	r24, 6
   16628:	04 c0       	rjmp	.+8      	; 0x16632 <amigo_buffered_read_command+0x9e>
   1662a:	8b ea       	ldi	r24, 0xAB	; 171
   1662c:	90 e1       	ldi	r25, 0x10	; 16
   1662e:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   16632:	c0 91 6a 19 	lds	r28, 0x196A	; 0x80196a <AMIGOs>
   16636:	d0 91 6b 19 	lds	r29, 0x196B	; 0x80196b <AMIGOs+0x1>
   1663a:	8f 81       	ldd	r24, Y+7	; 0x07
   1663c:	98 85       	ldd	r25, Y+8	; 0x08
   1663e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16642:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16646:	89 2b       	or	r24, r25
   16648:	29 f4       	brne	.+10     	; 0x16654 <amigo_buffered_read_command+0xc0>
   1664a:	86 81       	ldd	r24, Z+6	; 0x06
   1664c:	97 81       	ldd	r25, Z+7	; 0x07
   1664e:	e8 16       	cp	r14, r24
   16650:	f9 06       	cpc	r15, r25
   16652:	19 f0       	breq	.+6      	; 0x1665a <amigo_buffered_read_command+0xc6>
   16654:	81 e0       	ldi	r24, 0x01	; 1
   16656:	8e 83       	std	Y+6, r24	; 0x06
   16658:	14 c0       	rjmp	.+40     	; 0x16682 <amigo_buffered_read_command+0xee>
   1665a:	8a eb       	ldi	r24, 0xBA	; 186
   1665c:	95 e1       	ldi	r25, 0x15	; 21
   1665e:	10 de       	rcall	.-992    	; 0x16280 <amigo_increment>
   16660:	89 2b       	or	r24, r25
   16662:	59 f0       	breq	.+22     	; 0x1667a <amigo_buffered_read_command+0xe6>
   16664:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16668:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1666c:	81 e0       	ldi	r24, 0x01	; 1
   1666e:	86 83       	std	Z+6, r24	; 0x06
   16670:	87 81       	ldd	r24, Z+7	; 0x07
   16672:	90 85       	ldd	r25, Z+8	; 0x08
   16674:	84 60       	ori	r24, 0x04	; 4
   16676:	90 87       	std	Z+8, r25	; 0x08
   16678:	87 83       	std	Z+7, r24	; 0x07
   1667a:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1667e:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16682:	81 81       	ldd	r24, Z+1	; 0x01
   16684:	90 e0       	ldi	r25, 0x00	; 0
   16686:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   1668a:	80 e0       	ldi	r24, 0x00	; 0
   1668c:	90 e0       	ldi	r25, 0x00	; 0
   1668e:	0f 90       	pop	r0
   16690:	0f 90       	pop	r0
   16692:	0f 90       	pop	r0
   16694:	0f 90       	pop	r0
   16696:	0f 90       	pop	r0
   16698:	df 91       	pop	r29
   1669a:	cf 91       	pop	r28
   1669c:	1f 91       	pop	r17
   1669e:	0f 91       	pop	r16
   166a0:	ff 90       	pop	r15
   166a2:	ef 90       	pop	r14
   166a4:	bf 90       	pop	r11
   166a6:	af 90       	pop	r10
   166a8:	9f 90       	pop	r9
   166aa:	8f 90       	pop	r8
   166ac:	08 95       	ret

000166ae <amigo_buffered_read_execute>:
   166ae:	a5 e0       	ldi	r26, 0x05	; 5
   166b0:	b0 e0       	ldi	r27, 0x00	; 0
   166b2:	ed e5       	ldi	r30, 0x5D	; 93
   166b4:	f3 eb       	ldi	r31, 0xB3	; 179
   166b6:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
   166ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166be:	87 fd       	sbrc	r24, 7
   166c0:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   166c4:	80 e0       	ldi	r24, 0x00	; 0
   166c6:	91 e0       	ldi	r25, 0x01	; 1
   166c8:	9d 83       	std	Y+5, r25	; 0x05
   166ca:	8c 83       	std	Y+4, r24	; 0x04
   166cc:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   166d0:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   166d4:	66 81       	ldd	r22, Z+6	; 0x06
   166d6:	77 81       	ldd	r23, Z+7	; 0x07
   166d8:	ae 01       	movw	r20, r28
   166da:	4c 5f       	subi	r20, 0xFC	; 252
   166dc:	5f 4f       	sbci	r21, 0xFF	; 255
   166de:	82 ef       	ldi	r24, 0xF2	; 242
   166e0:	9c e1       	ldi	r25, 0x1C	; 28
   166e2:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   166e6:	8c 01       	movw	r16, r24
   166e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166ec:	87 ff       	sbrs	r24, 7
   166ee:	04 c0       	rjmp	.+8      	; 0x166f8 <amigo_buffered_read_execute+0x4a>
   166f0:	86 eb       	ldi	r24, 0xB6	; 182
   166f2:	90 e1       	ldi	r25, 0x10	; 16
   166f4:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   166f8:	8c 81       	ldd	r24, Y+4	; 0x04
   166fa:	9d 81       	ldd	r25, Y+5	; 0x05
   166fc:	88 27       	eor	r24, r24
   166fe:	90 7d       	andi	r25, 0xD0	; 208
   16700:	89 2b       	or	r24, r25
   16702:	49 f4       	brne	.+18     	; 0x16716 <amigo_buffered_read_execute+0x68>
   16704:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16708:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1670c:	86 81       	ldd	r24, Z+6	; 0x06
   1670e:	97 81       	ldd	r25, Z+7	; 0x07
   16710:	08 17       	cp	r16, r24
   16712:	19 07       	cpc	r17, r25
   16714:	c9 f0       	breq	.+50     	; 0x16748 <amigo_buffered_read_execute+0x9a>
   16716:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1671a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1671e:	81 e0       	ldi	r24, 0x01	; 1
   16720:	86 83       	std	Z+6, r24	; 0x06
   16722:	87 81       	ldd	r24, Z+7	; 0x07
   16724:	90 85       	ldd	r25, Z+8	; 0x08
   16726:	80 62       	ori	r24, 0x20	; 32
   16728:	90 87       	std	Z+8, r25	; 0x08
   1672a:	87 83       	std	Z+7, r24	; 0x07
   1672c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16730:	80 ff       	sbrs	r24, 0
   16732:	0a c0       	rjmp	.+20     	; 0x16748 <amigo_buffered_read_execute+0x9a>
   16734:	8b e3       	ldi	r24, 0x3B	; 59
   16736:	9d e2       	ldi	r25, 0x2D	; 45
   16738:	a0 e0       	ldi	r26, 0x00	; 0
   1673a:	ed b7       	in	r30, 0x3d	; 61
   1673c:	fe b7       	in	r31, 0x3e	; 62
   1673e:	81 83       	std	Z+1, r24	; 0x01
   16740:	92 83       	std	Z+2, r25	; 0x02
   16742:	a3 83       	std	Z+3, r26	; 0x03
   16744:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   16748:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1674c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16750:	81 81       	ldd	r24, Z+1	; 0x01
   16752:	90 e0       	ldi	r25, 0x00	; 0
   16754:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   16758:	8c 81       	ldd	r24, Y+4	; 0x04
   1675a:	9d 81       	ldd	r25, Y+5	; 0x05
   1675c:	25 96       	adiw	r28, 0x05	; 5
   1675e:	e4 e0       	ldi	r30, 0x04	; 4
   16760:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00016764 <amigo_buffered_write>:
   16764:	8f 92       	push	r8
   16766:	9f 92       	push	r9
   16768:	af 92       	push	r10
   1676a:	bf 92       	push	r11
   1676c:	ef 92       	push	r14
   1676e:	ff 92       	push	r15
   16770:	0f 93       	push	r16
   16772:	1f 93       	push	r17
   16774:	cf 93       	push	r28
   16776:	df 93       	push	r29
   16778:	cd b7       	in	r28, 0x3d	; 61
   1677a:	de b7       	in	r29, 0x3e	; 62
   1677c:	27 97       	sbiw	r28, 0x07	; 7
   1677e:	0f b6       	in	r0, 0x3f	; 63
   16780:	f8 94       	cli
   16782:	de bf       	out	0x3e, r29	; 62
   16784:	0f be       	out	0x3f, r0	; 63
   16786:	cd bf       	out	0x3d, r28	; 61
   16788:	68 ec       	ldi	r22, 0xC8	; 200
   1678a:	75 e1       	ldi	r23, 0x15	; 21
   1678c:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <AMIGOs>
   16790:	90 91 6b 19 	lds	r25, 0x196B	; 0x80196b <AMIGOs+0x1>
   16794:	a4 db       	rcall	.-2232   	; 0x15ede <amigo_chs_to_logical>
   16796:	4b 01       	movw	r8, r22
   16798:	5c 01       	movw	r10, r24
   1679a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1679e:	87 fd       	sbrc	r24, 7
   167a0:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   167a4:	1f 82       	std	Y+7, r1	; 0x07
   167a6:	1e 82       	std	Y+6, r1	; 0x06
   167a8:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   167ac:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   167b0:	66 81       	ldd	r22, Z+6	; 0x06
   167b2:	77 81       	ldd	r23, Z+7	; 0x07
   167b4:	ae 01       	movw	r20, r28
   167b6:	4a 5f       	subi	r20, 0xFA	; 250
   167b8:	5f 4f       	sbci	r21, 0xFF	; 255
   167ba:	82 ef       	ldi	r24, 0xF2	; 242
   167bc:	9c e1       	ldi	r25, 0x1C	; 28
   167be:	0e 94 1d 89 	call	0x1123a	; 0x1123a <gpib_read_str>
   167c2:	7c 01       	movw	r14, r24
   167c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167c8:	85 ff       	sbrs	r24, 5
   167ca:	12 c0       	rjmp	.+36     	; 0x167f0 <amigo_buffered_write+0x8c>
   167cc:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   167d0:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   167d4:	80 81       	ld	r24, Z
   167d6:	90 e0       	ldi	r25, 0x00	; 0
   167d8:	ed b7       	in	r30, 0x3d	; 61
   167da:	fe b7       	in	r31, 0x3e	; 62
   167dc:	95 83       	std	Z+5, r25	; 0x05
   167de:	84 83       	std	Z+4, r24	; 0x04
   167e0:	89 e2       	ldi	r24, 0x29	; 41
   167e2:	9d e2       	ldi	r25, 0x2D	; 45
   167e4:	a0 e0       	ldi	r26, 0x00	; 0
   167e6:	81 83       	std	Z+1, r24	; 0x01
   167e8:	92 83       	std	Z+2, r25	; 0x02
   167ea:	a3 83       	std	Z+3, r26	; 0x03
   167ec:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   167f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167f4:	87 ff       	sbrs	r24, 7
   167f6:	04 c0       	rjmp	.+8      	; 0x16800 <amigo_buffered_write+0x9c>
   167f8:	87 ed       	ldi	r24, 0xD7	; 215
   167fa:	95 e1       	ldi	r25, 0x15	; 21
   167fc:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   16800:	8e 81       	ldd	r24, Y+6	; 0x06
   16802:	9f 81       	ldd	r25, Y+7	; 0x07
   16804:	88 27       	eor	r24, r24
   16806:	90 7d       	andi	r25, 0xD0	; 208
   16808:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1680c:	89 2b       	or	r24, r25
   1680e:	49 f4       	brne	.+18     	; 0x16822 <amigo_buffered_write+0xbe>
   16810:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16814:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16818:	86 81       	ldd	r24, Z+6	; 0x06
   1681a:	97 81       	ldd	r25, Z+7	; 0x07
   1681c:	e8 16       	cp	r14, r24
   1681e:	f9 06       	cpc	r15, r25
   16820:	c1 f0       	breq	.+48     	; 0x16852 <amigo_buffered_write+0xee>
   16822:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16826:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1682a:	81 e0       	ldi	r24, 0x01	; 1
   1682c:	86 83       	std	Z+6, r24	; 0x06
   1682e:	87 81       	ldd	r24, Z+7	; 0x07
   16830:	90 85       	ldd	r25, Z+8	; 0x08
   16832:	80 62       	ori	r24, 0x20	; 32
   16834:	90 87       	std	Z+8, r25	; 0x08
   16836:	87 83       	std	Z+7, r24	; 0x07
   16838:	20 ff       	sbrs	r18, 0
   1683a:	5e c0       	rjmp	.+188    	; 0x168f8 <amigo_buffered_write+0x194>
   1683c:	8a e0       	ldi	r24, 0x0A	; 10
   1683e:	9d e2       	ldi	r25, 0x2D	; 45
   16840:	a0 e0       	ldi	r26, 0x00	; 0
   16842:	ed b7       	in	r30, 0x3d	; 61
   16844:	fe b7       	in	r31, 0x3e	; 62
   16846:	81 83       	std	Z+1, r24	; 0x01
   16848:	92 83       	std	Z+2, r25	; 0x02
   1684a:	a3 83       	std	Z+3, r26	; 0x03
   1684c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   16850:	53 c0       	rjmp	.+166    	; 0x168f8 <amigo_buffered_write+0x194>
   16852:	26 fd       	sbrc	r18, 6
   16854:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
   16858:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   1685c:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16860:	e0 90 6a 19 	lds	r14, 0x196A	; 0x80196a <AMIGOs>
   16864:	f0 90 6b 19 	lds	r15, 0x196B	; 0x80196b <AMIGOs+0x1>
   16868:	87 e0       	ldi	r24, 0x07	; 7
   1686a:	e8 0e       	add	r14, r24
   1686c:	f1 1c       	adc	r15, r1
   1686e:	06 81       	ldd	r16, Z+6	; 0x06
   16870:	17 81       	ldd	r17, Z+7	; 0x07
   16872:	22 ef       	ldi	r18, 0xF2	; 242
   16874:	3c e1       	ldi	r19, 0x1C	; 28
   16876:	b5 01       	movw	r22, r10
   16878:	a4 01       	movw	r20, r8
   1687a:	82 81       	ldd	r24, Z+2	; 0x02
   1687c:	93 81       	ldd	r25, Z+3	; 0x03
   1687e:	0e 94 5e 83 	call	0x106bc	; 0x106bc <dbf_open_write>
   16882:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16886:	86 ff       	sbrs	r24, 6
   16888:	04 c0       	rjmp	.+8      	; 0x16892 <amigo_buffered_write+0x12e>
   1688a:	80 ea       	ldi	r24, 0xA0	; 160
   1688c:	90 e1       	ldi	r25, 0x10	; 16
   1688e:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
   16892:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16896:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1689a:	87 81       	ldd	r24, Z+7	; 0x07
   1689c:	90 85       	ldd	r25, Z+8	; 0x08
   1689e:	89 2b       	or	r24, r25
   168a0:	d9 f0       	breq	.+54     	; 0x168d8 <amigo_buffered_write+0x174>
   168a2:	81 e0       	ldi	r24, 0x01	; 1
   168a4:	86 83       	std	Z+6, r24	; 0x06
   168a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168aa:	80 ff       	sbrs	r24, 0
   168ac:	0a c0       	rjmp	.+20     	; 0x168c2 <amigo_buffered_write+0x15e>
   168ae:	8a ee       	ldi	r24, 0xEA	; 234
   168b0:	9c e2       	ldi	r25, 0x2C	; 44
   168b2:	a0 e0       	ldi	r26, 0x00	; 0
   168b4:	ed b7       	in	r30, 0x3d	; 61
   168b6:	fe b7       	in	r31, 0x3e	; 62
   168b8:	81 83       	std	Z+1, r24	; 0x01
   168ba:	92 83       	std	Z+2, r25	; 0x02
   168bc:	a3 83       	std	Z+3, r26	; 0x03
   168be:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   168c2:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   168c6:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   168ca:	81 81       	ldd	r24, Z+1	; 0x01
   168cc:	90 e0       	ldi	r25, 0x00	; 0
   168ce:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   168d2:	80 e0       	ldi	r24, 0x00	; 0
   168d4:	90 e0       	ldi	r25, 0x00	; 0
   168d6:	1c c0       	rjmp	.+56     	; 0x16910 <amigo_buffered_write+0x1ac>
   168d8:	88 ec       	ldi	r24, 0xC8	; 200
   168da:	95 e1       	ldi	r25, 0x15	; 21
   168dc:	d1 dc       	rcall	.-1630   	; 0x16280 <amigo_increment>
   168de:	89 2b       	or	r24, r25
   168e0:	59 f0       	breq	.+22     	; 0x168f8 <amigo_buffered_write+0x194>
   168e2:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   168e6:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   168ea:	81 e0       	ldi	r24, 0x01	; 1
   168ec:	86 83       	std	Z+6, r24	; 0x06
   168ee:	87 81       	ldd	r24, Z+7	; 0x07
   168f0:	90 85       	ldd	r25, Z+8	; 0x08
   168f2:	84 60       	ori	r24, 0x04	; 4
   168f4:	90 87       	std	Z+8, r25	; 0x08
   168f6:	87 83       	std	Z+7, r24	; 0x07
   168f8:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   168fc:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16900:	81 81       	ldd	r24, Z+1	; 0x01
   16902:	90 e0       	ldi	r25, 0x00	; 0
   16904:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   16908:	8e 81       	ldd	r24, Y+6	; 0x06
   1690a:	9f 81       	ldd	r25, Y+7	; 0x07
   1690c:	88 27       	eor	r24, r24
   1690e:	90 7d       	andi	r25, 0xD0	; 208
   16910:	27 96       	adiw	r28, 0x07	; 7
   16912:	0f b6       	in	r0, 0x3f	; 63
   16914:	f8 94       	cli
   16916:	de bf       	out	0x3e, r29	; 62
   16918:	0f be       	out	0x3f, r0	; 63
   1691a:	cd bf       	out	0x3d, r28	; 61
   1691c:	df 91       	pop	r29
   1691e:	cf 91       	pop	r28
   16920:	1f 91       	pop	r17
   16922:	0f 91       	pop	r16
   16924:	ff 90       	pop	r15
   16926:	ef 90       	pop	r14
   16928:	bf 90       	pop	r11
   1692a:	af 90       	pop	r10
   1692c:	9f 90       	pop	r9
   1692e:	8f 90       	pop	r8
   16930:	08 95       	ret

00016932 <amigo_cmd_dsj>:
   16932:	a8 e0       	ldi	r26, 0x08	; 8
   16934:	b0 e0       	ldi	r27, 0x00	; 0
   16936:	ef e9       	ldi	r30, 0x9F	; 159
   16938:	f4 eb       	ldi	r31, 0xB4	; 180
   1693a:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   1693e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16942:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16946:	86 81       	ldd	r24, Z+6	; 0x06
   16948:	88 87       	std	Y+8, r24	; 0x08
   1694a:	80 e0       	ldi	r24, 0x00	; 0
   1694c:	91 e0       	ldi	r25, 0x01	; 1
   1694e:	9f 83       	std	Y+7, r25	; 0x07
   16950:	8e 83       	std	Y+6, r24	; 0x06
   16952:	ae 01       	movw	r20, r28
   16954:	4a 5f       	subi	r20, 0xFA	; 250
   16956:	5f 4f       	sbci	r21, 0xFF	; 255
   16958:	61 e0       	ldi	r22, 0x01	; 1
   1695a:	70 e0       	ldi	r23, 0x00	; 0
   1695c:	ce 01       	movw	r24, r28
   1695e:	08 96       	adiw	r24, 0x08	; 8
   16960:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
   16964:	2e 81       	ldd	r18, Y+6	; 0x06
   16966:	3f 81       	ldd	r19, Y+7	; 0x07
   16968:	22 27       	eor	r18, r18
   1696a:	30 7d       	andi	r19, 0xD0	; 208
   1696c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16970:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16974:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   16978:	23 2b       	or	r18, r19
   1697a:	11 f4       	brne	.+4      	; 0x16980 <amigo_cmd_dsj+0x4e>
   1697c:	01 97       	sbiw	r24, 0x01	; 1
   1697e:	c1 f0       	breq	.+48     	; 0x169b0 <amigo_cmd_dsj+0x7e>
   16980:	81 e0       	ldi	r24, 0x01	; 1
   16982:	86 83       	std	Z+6, r24	; 0x06
   16984:	87 81       	ldd	r24, Z+7	; 0x07
   16986:	90 85       	ldd	r25, Z+8	; 0x08
   16988:	80 62       	ori	r24, 0x20	; 32
   1698a:	90 87       	std	Z+8, r25	; 0x08
   1698c:	87 83       	std	Z+7, r24	; 0x07
   1698e:	40 ff       	sbrs	r20, 0
   16990:	0a c0       	rjmp	.+20     	; 0x169a6 <amigo_cmd_dsj+0x74>
   16992:	80 ed       	ldi	r24, 0xD0	; 208
   16994:	9c e2       	ldi	r25, 0x2C	; 44
   16996:	a0 e0       	ldi	r26, 0x00	; 0
   16998:	ed b7       	in	r30, 0x3d	; 61
   1699a:	fe b7       	in	r31, 0x3e	; 62
   1699c:	81 83       	std	Z+1, r24	; 0x01
   1699e:	92 83       	std	Z+2, r25	; 0x02
   169a0:	a3 83       	std	Z+3, r26	; 0x03
   169a2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   169a6:	8e 81       	ldd	r24, Y+6	; 0x06
   169a8:	9f 81       	ldd	r25, Y+7	; 0x07
   169aa:	88 27       	eor	r24, r24
   169ac:	90 7d       	andi	r25, 0xD0	; 208
   169ae:	19 c0       	rjmp	.+50     	; 0x169e2 <amigo_cmd_dsj+0xb0>
   169b0:	45 ff       	sbrs	r20, 5
   169b2:	0e c0       	rjmp	.+28     	; 0x169d0 <amigo_cmd_dsj+0x9e>
   169b4:	86 81       	ldd	r24, Z+6	; 0x06
   169b6:	90 e0       	ldi	r25, 0x00	; 0
   169b8:	ed b7       	in	r30, 0x3d	; 61
   169ba:	fe b7       	in	r31, 0x3e	; 62
   169bc:	95 83       	std	Z+5, r25	; 0x05
   169be:	84 83       	std	Z+4, r24	; 0x04
   169c0:	83 ec       	ldi	r24, 0xC3	; 195
   169c2:	9c e2       	ldi	r25, 0x2C	; 44
   169c4:	a0 e0       	ldi	r26, 0x00	; 0
   169c6:	81 83       	std	Z+1, r24	; 0x01
   169c8:	92 83       	std	Z+2, r25	; 0x02
   169ca:	a3 83       	std	Z+3, r26	; 0x03
   169cc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   169d0:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   169d4:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   169d8:	16 82       	std	Z+6, r1	; 0x06
   169da:	10 86       	std	Z+8, r1	; 0x08
   169dc:	17 82       	std	Z+7, r1	; 0x07
   169de:	80 e0       	ldi	r24, 0x00	; 0
   169e0:	90 e0       	ldi	r25, 0x00	; 0
   169e2:	28 96       	adiw	r28, 0x08	; 8
   169e4:	e2 e0       	ldi	r30, 0x02	; 2
   169e6:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000169ea <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   169ea:	00 d0       	rcall	.+0      	; 0x169ec <amigo_cmd_clear+0x2>
   169ec:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   169ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169f2:	85 ff       	sbrs	r24, 5
   169f4:	0a c0       	rjmp	.+20     	; 0x16a0a <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   169f6:	84 eb       	ldi	r24, 0xB4	; 180
   169f8:	9c e2       	ldi	r25, 0x2C	; 44
   169fa:	a0 e0       	ldi	r26, 0x00	; 0
   169fc:	ed b7       	in	r30, 0x3d	; 61
   169fe:	fe b7       	in	r31, 0x3e	; 62
   16a00:	81 83       	std	Z+1, r24	; 0x01
   16a02:	92 83       	std	Z+2, r25	; 0x02
   16a04:	a3 83       	std	Z+3, r26	; 0x03
   16a06:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
    AMIGOs->sector = 0;
   16a0a:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16a0e:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16a12:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   16a14:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   16a16:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16a18:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16a1a:	10 86       	std	Z+8, r1	; 0x08
   16a1c:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16a1e:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16a22:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16a26:	81 81       	ldd	r24, Z+1	; 0x01
   16a28:	90 e0       	ldi	r25, 0x00	; 0
   16a2a:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
    return(0);
}
   16a2e:	80 e0       	ldi	r24, 0x00	; 0
   16a30:	90 e0       	ldi	r25, 0x00	; 0
   16a32:	0f 90       	pop	r0
   16a34:	0f 90       	pop	r0
   16a36:	0f 90       	pop	r0
   16a38:	08 95       	ret

00016a3a <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16a3a:	af e0       	ldi	r26, 0x0F	; 15
   16a3c:	b0 e0       	ldi	r27, 0x00	; 0
   16a3e:	e3 e2       	ldi	r30, 0x23	; 35
   16a40:	f5 eb       	ldi	r31, 0xB5	; 181
   16a42:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
   16a46:	c8 2f       	mov	r28, r24
   16a48:	e6 2e       	mov	r14, r22
   16a4a:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16a4c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16a50:	90 e0       	ldi	r25, 0x00	; 0
   16a52:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   16a56:	20 91 f6 1e 	lds	r18, 0x1EF6	; 0x801ef6 <talking>
   16a5a:	f1 2c       	mov	r15, r1
   16a5c:	d0 e0       	ldi	r29, 0x00	; 0
   16a5e:	89 2b       	or	r24, r25
   16a60:	f1 f0       	breq	.+60     	; 0x16a9e <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a62:	82 2f       	mov	r24, r18
   16a64:	90 e0       	ldi	r25, 0x00	; 0
   16a66:	ed b7       	in	r30, 0x3d	; 61
   16a68:	fe b7       	in	r31, 0x3e	; 62
   16a6a:	97 87       	std	Z+15, r25	; 0x0f
   16a6c:	86 87       	std	Z+14, r24	; 0x0e
   16a6e:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16a72:	90 e0       	ldi	r25, 0x00	; 0
   16a74:	95 87       	std	Z+13, r25	; 0x0d
   16a76:	84 87       	std	Z+12, r24	; 0x0c
   16a78:	13 87       	std	Z+11, r17	; 0x0b
   16a7a:	02 87       	std	Z+10, r16	; 0x0a
   16a7c:	f1 86       	std	Z+9, r15	; 0x09
   16a7e:	e0 86       	std	Z+8, r14	; 0x08
   16a80:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16a84:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16a88:	80 81       	ld	r24, Z
   16a8a:	90 e0       	ldi	r25, 0x00	; 0
   16a8c:	ed b7       	in	r30, 0x3d	; 61
   16a8e:	fe b7       	in	r31, 0x3e	; 62
   16a90:	97 83       	std	Z+7, r25	; 0x07
   16a92:	86 83       	std	Z+6, r24	; 0x06
   16a94:	d5 83       	std	Z+5, r29	; 0x05
   16a96:	c4 83       	std	Z+4, r28	; 0x04
   16a98:	8d e4       	ldi	r24, 0x4D	; 77
   16a9a:	9c e2       	ldi	r25, 0x2C	; 44
   16a9c:	51 c0       	rjmp	.+162    	; 0x16b40 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16a9e:	82 2f       	mov	r24, r18
   16aa0:	90 e0       	ldi	r25, 0x00	; 0
   16aa2:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   16aa6:	20 91 f8 1e 	lds	r18, 0x1EF8	; 0x801ef8 <listening>
   16aaa:	30 91 f6 1e 	lds	r19, 0x1EF6	; 0x801ef6 <talking>
   16aae:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   16ab2:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   16ab6:	89 2b       	or	r24, r25
   16ab8:	b1 f0       	breq	.+44     	; 0x16ae6 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16aba:	83 2f       	mov	r24, r19
   16abc:	90 e0       	ldi	r25, 0x00	; 0
   16abe:	ed b7       	in	r30, 0x3d	; 61
   16ac0:	fe b7       	in	r31, 0x3e	; 62
   16ac2:	97 87       	std	Z+15, r25	; 0x0f
   16ac4:	86 87       	std	Z+14, r24	; 0x0e
   16ac6:	30 e0       	ldi	r19, 0x00	; 0
   16ac8:	35 87       	std	Z+13, r19	; 0x0d
   16aca:	24 87       	std	Z+12, r18	; 0x0c
   16acc:	13 87       	std	Z+11, r17	; 0x0b
   16ace:	02 87       	std	Z+10, r16	; 0x0a
   16ad0:	f1 86       	std	Z+9, r15	; 0x09
   16ad2:	e0 86       	std	Z+8, r14	; 0x08
   16ad4:	8c 91       	ld	r24, X
   16ad6:	90 e0       	ldi	r25, 0x00	; 0
   16ad8:	97 83       	std	Z+7, r25	; 0x07
   16ada:	86 83       	std	Z+6, r24	; 0x06
   16adc:	d5 83       	std	Z+5, r29	; 0x05
   16ade:	c4 83       	std	Z+4, r28	; 0x04
   16ae0:	86 ee       	ldi	r24, 0xE6	; 230
   16ae2:	9b e2       	ldi	r25, 0x2B	; 43
   16ae4:	2d c0       	rjmp	.+90     	; 0x16b40 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16ae6:	3f 35       	cpi	r19, 0x5F	; 95
   16ae8:	b1 f4       	brne	.+44     	; 0x16b16 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16aea:	8f e5       	ldi	r24, 0x5F	; 95
   16aec:	90 e0       	ldi	r25, 0x00	; 0
   16aee:	ed b7       	in	r30, 0x3d	; 61
   16af0:	fe b7       	in	r31, 0x3e	; 62
   16af2:	97 87       	std	Z+15, r25	; 0x0f
   16af4:	86 87       	std	Z+14, r24	; 0x0e
   16af6:	30 e0       	ldi	r19, 0x00	; 0
   16af8:	35 87       	std	Z+13, r19	; 0x0d
   16afa:	24 87       	std	Z+12, r18	; 0x0c
   16afc:	13 87       	std	Z+11, r17	; 0x0b
   16afe:	02 87       	std	Z+10, r16	; 0x0a
   16b00:	f1 86       	std	Z+9, r15	; 0x09
   16b02:	e0 86       	std	Z+8, r14	; 0x08
   16b04:	8c 91       	ld	r24, X
   16b06:	90 e0       	ldi	r25, 0x00	; 0
   16b08:	97 83       	std	Z+7, r25	; 0x07
   16b0a:	86 83       	std	Z+6, r24	; 0x06
   16b0c:	d5 83       	std	Z+5, r29	; 0x05
   16b0e:	c4 83       	std	Z+4, r28	; 0x04
   16b10:	8f e7       	ldi	r24, 0x7F	; 127
   16b12:	9b e2       	ldi	r25, 0x2B	; 43
   16b14:	15 c0       	rjmp	.+42     	; 0x16b40 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b16:	83 2f       	mov	r24, r19
   16b18:	90 e0       	ldi	r25, 0x00	; 0
   16b1a:	ed b7       	in	r30, 0x3d	; 61
   16b1c:	fe b7       	in	r31, 0x3e	; 62
   16b1e:	97 87       	std	Z+15, r25	; 0x0f
   16b20:	86 87       	std	Z+14, r24	; 0x0e
   16b22:	30 e0       	ldi	r19, 0x00	; 0
   16b24:	35 87       	std	Z+13, r19	; 0x0d
   16b26:	24 87       	std	Z+12, r18	; 0x0c
   16b28:	13 87       	std	Z+11, r17	; 0x0b
   16b2a:	02 87       	std	Z+10, r16	; 0x0a
   16b2c:	f1 86       	std	Z+9, r15	; 0x09
   16b2e:	e0 86       	std	Z+8, r14	; 0x08
   16b30:	8c 91       	ld	r24, X
   16b32:	90 e0       	ldi	r25, 0x00	; 0
   16b34:	97 83       	std	Z+7, r25	; 0x07
   16b36:	86 83       	std	Z+6, r24	; 0x06
   16b38:	d5 83       	std	Z+5, r29	; 0x05
   16b3a:	c4 83       	std	Z+4, r28	; 0x04
   16b3c:	8a e1       	ldi	r24, 0x1A	; 26
   16b3e:	9b e2       	ldi	r25, 0x2B	; 43
   16b40:	a0 e0       	ldi	r26, 0x00	; 0
   16b42:	81 83       	std	Z+1, r24	; 0x01
   16b44:	92 83       	std	Z+2, r25	; 0x02
   16b46:	a3 83       	std	Z+3, r26	; 0x03
   16b48:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16b4c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16b50:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16b54:	81 81       	ldd	r24, Z+1	; 0x01
   16b56:	90 e0       	ldi	r25, 0x00	; 0
   16b58:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
    return(0);
}
   16b5c:	80 e0       	ldi	r24, 0x00	; 0
   16b5e:	90 e0       	ldi	r25, 0x00	; 0
   16b60:	cd b7       	in	r28, 0x3d	; 61
   16b62:	de b7       	in	r29, 0x3e	; 62
   16b64:	2f 96       	adiw	r28, 0x0f	; 15
   16b66:	e6 e0       	ldi	r30, 0x06	; 6
   16b68:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00016b6c <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16b6c:	ab e0       	ldi	r26, 0x0B	; 11
   16b6e:	b0 e0       	ldi	r27, 0x00	; 0
   16b70:	ec eb       	ldi	r30, 0xBC	; 188
   16b72:	f5 eb       	ldi	r31, 0xB5	; 181
   16b74:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   16b78:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16b7a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16b7e:	90 e0       	ldi	r25, 0x00	; 0
   16b80:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   16b84:	20 91 f6 1e 	lds	r18, 0x1EF6	; 0x801ef6 <talking>
   16b88:	d0 e0       	ldi	r29, 0x00	; 0
   16b8a:	89 2b       	or	r24, r25
   16b8c:	d1 f0       	breq	.+52     	; 0x16bc2 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16b8e:	82 2f       	mov	r24, r18
   16b90:	90 e0       	ldi	r25, 0x00	; 0
   16b92:	ed b7       	in	r30, 0x3d	; 61
   16b94:	fe b7       	in	r31, 0x3e	; 62
   16b96:	93 87       	std	Z+11, r25	; 0x0b
   16b98:	82 87       	std	Z+10, r24	; 0x0a
   16b9a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16b9e:	90 e0       	ldi	r25, 0x00	; 0
   16ba0:	91 87       	std	Z+9, r25	; 0x09
   16ba2:	80 87       	std	Z+8, r24	; 0x08
   16ba4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16ba8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16bac:	80 81       	ld	r24, Z
   16bae:	90 e0       	ldi	r25, 0x00	; 0
   16bb0:	ed b7       	in	r30, 0x3d	; 61
   16bb2:	fe b7       	in	r31, 0x3e	; 62
   16bb4:	97 83       	std	Z+7, r25	; 0x07
   16bb6:	86 83       	std	Z+6, r24	; 0x06
   16bb8:	d5 83       	std	Z+5, r29	; 0x05
   16bba:	c4 83       	std	Z+4, r28	; 0x04
   16bbc:	8a ec       	ldi	r24, 0xCA	; 202
   16bbe:	9a e2       	ldi	r25, 0x2A	; 42
   16bc0:	43 c0       	rjmp	.+134    	; 0x16c48 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16bc2:	82 2f       	mov	r24, r18
   16bc4:	90 e0       	ldi	r25, 0x00	; 0
   16bc6:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   16bca:	20 91 f8 1e 	lds	r18, 0x1EF8	; 0x801ef8 <listening>
   16bce:	40 91 f6 1e 	lds	r20, 0x1EF6	; 0x801ef6 <talking>
   16bd2:	a0 91 6a 19 	lds	r26, 0x196A	; 0x80196a <AMIGOs>
   16bd6:	b0 91 6b 19 	lds	r27, 0x196B	; 0x80196b <AMIGOs+0x1>
   16bda:	89 2b       	or	r24, r25
   16bdc:	89 f0       	breq	.+34     	; 0x16c00 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16bde:	50 e0       	ldi	r21, 0x00	; 0
   16be0:	ed b7       	in	r30, 0x3d	; 61
   16be2:	fe b7       	in	r31, 0x3e	; 62
   16be4:	53 87       	std	Z+11, r21	; 0x0b
   16be6:	42 87       	std	Z+10, r20	; 0x0a
   16be8:	30 e0       	ldi	r19, 0x00	; 0
   16bea:	31 87       	std	Z+9, r19	; 0x09
   16bec:	20 87       	std	Z+8, r18	; 0x08
   16bee:	8c 91       	ld	r24, X
   16bf0:	90 e0       	ldi	r25, 0x00	; 0
   16bf2:	97 83       	std	Z+7, r25	; 0x07
   16bf4:	86 83       	std	Z+6, r24	; 0x06
   16bf6:	d5 83       	std	Z+5, r29	; 0x05
   16bf8:	c4 83       	std	Z+4, r28	; 0x04
   16bfa:	8a e7       	ldi	r24, 0x7A	; 122
   16bfc:	9a e2       	ldi	r25, 0x2A	; 42
   16bfe:	24 c0       	rjmp	.+72     	; 0x16c48 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16c00:	4f 35       	cpi	r20, 0x5F	; 95
   16c02:	91 f4       	brne	.+36     	; 0x16c28 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c04:	8f e5       	ldi	r24, 0x5F	; 95
   16c06:	90 e0       	ldi	r25, 0x00	; 0
   16c08:	ed b7       	in	r30, 0x3d	; 61
   16c0a:	fe b7       	in	r31, 0x3e	; 62
   16c0c:	93 87       	std	Z+11, r25	; 0x0b
   16c0e:	82 87       	std	Z+10, r24	; 0x0a
   16c10:	30 e0       	ldi	r19, 0x00	; 0
   16c12:	31 87       	std	Z+9, r19	; 0x09
   16c14:	20 87       	std	Z+8, r18	; 0x08
   16c16:	8c 91       	ld	r24, X
   16c18:	90 e0       	ldi	r25, 0x00	; 0
   16c1a:	97 83       	std	Z+7, r25	; 0x07
   16c1c:	86 83       	std	Z+6, r24	; 0x06
   16c1e:	d5 83       	std	Z+5, r29	; 0x05
   16c20:	c4 83       	std	Z+4, r28	; 0x04
   16c22:	8a e2       	ldi	r24, 0x2A	; 42
   16c24:	9a e2       	ldi	r25, 0x2A	; 42
   16c26:	10 c0       	rjmp	.+32     	; 0x16c48 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c28:	50 e0       	ldi	r21, 0x00	; 0
   16c2a:	ed b7       	in	r30, 0x3d	; 61
   16c2c:	fe b7       	in	r31, 0x3e	; 62
   16c2e:	53 87       	std	Z+11, r21	; 0x0b
   16c30:	42 87       	std	Z+10, r20	; 0x0a
   16c32:	30 e0       	ldi	r19, 0x00	; 0
   16c34:	31 87       	std	Z+9, r19	; 0x09
   16c36:	20 87       	std	Z+8, r18	; 0x08
   16c38:	8c 91       	ld	r24, X
   16c3a:	90 e0       	ldi	r25, 0x00	; 0
   16c3c:	97 83       	std	Z+7, r25	; 0x07
   16c3e:	86 83       	std	Z+6, r24	; 0x06
   16c40:	d5 83       	std	Z+5, r29	; 0x05
   16c42:	c4 83       	std	Z+4, r28	; 0x04
   16c44:	89 ed       	ldi	r24, 0xD9	; 217
   16c46:	99 e2       	ldi	r25, 0x29	; 41
   16c48:	a0 e0       	ldi	r26, 0x00	; 0
   16c4a:	81 83       	std	Z+1, r24	; 0x01
   16c4c:	92 83       	std	Z+2, r25	; 0x02
   16c4e:	a3 83       	std	Z+3, r26	; 0x03
   16c50:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16c54:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16c58:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16c5c:	81 81       	ldd	r24, Z+1	; 0x01
   16c5e:	90 e0       	ldi	r25, 0x00	; 0
   16c60:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
    return(0);
}
   16c64:	80 e0       	ldi	r24, 0x00	; 0
   16c66:	90 e0       	ldi	r25, 0x00	; 0
   16c68:	cd b7       	in	r28, 0x3d	; 61
   16c6a:	de b7       	in	r29, 0x3e	; 62
   16c6c:	2b 96       	adiw	r28, 0x0b	; 11
   16c6e:	e2 e0       	ldi	r30, 0x02	; 2
   16c70:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00016c74 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16c74:	8f 30       	cpi	r24, 0x0F	; 15
   16c76:	29 f0       	breq	.+10     	; 0x16c82 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16c78:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16c7c:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c80:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16c82:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16c86:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16c8a:	81 81       	ldd	r24, Z+1	; 0x01
   16c8c:	88 23       	and	r24, r24
   16c8e:	29 f0       	breq	.+10     	; 0x16c9a <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16c90:	87 81       	ldd	r24, Z+7	; 0x07
   16c92:	90 85       	ldd	r25, Z+8	; 0x08
   16c94:	80 64       	ori	r24, 0x40	; 64
   16c96:	90 87       	std	Z+8, r25	; 0x08
   16c98:	87 83       	std	Z+7, r24	; 0x07
   16c9a:	08 95       	ret

00016c9c <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16c9c:	ac e1       	ldi	r26, 0x1C	; 28
   16c9e:	b0 e0       	ldi	r27, 0x00	; 0
   16ca0:	e4 e5       	ldi	r30, 0x54	; 84
   16ca2:	f6 eb       	ldi	r31, 0xB6	; 182
   16ca4:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
   16ca8:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16caa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cae:	85 ff       	sbrs	r24, 5
   16cb0:	16 c0       	rjmp	.+44     	; 0x16cde <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16cb2:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   16cb6:	90 e0       	ldi	r25, 0x00	; 0
   16cb8:	ed b7       	in	r30, 0x3d	; 61
   16cba:	fe b7       	in	r31, 0x3e	; 62
   16cbc:	91 87       	std	Z+9, r25	; 0x09
   16cbe:	80 87       	std	Z+8, r24	; 0x08
   16cc0:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16cc4:	90 e0       	ldi	r25, 0x00	; 0
   16cc6:	97 83       	std	Z+7, r25	; 0x07
   16cc8:	86 83       	std	Z+6, r24	; 0x06
   16cca:	f5 82       	std	Z+5, r15	; 0x05
   16ccc:	e4 82       	std	Z+4, r14	; 0x04
   16cce:	87 ea       	ldi	r24, 0xA7	; 167
   16cd0:	99 e2       	ldi	r25, 0x29	; 41
   16cd2:	a0 e0       	ldi	r26, 0x00	; 0
   16cd4:	81 83       	std	Z+1, r24	; 0x01
   16cd6:	92 83       	std	Z+2, r25	; 0x02
   16cd8:	a3 83       	std	Z+3, r26	; 0x03
   16cda:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16cde:	fe e7       	ldi	r31, 0x7E	; 126
   16ce0:	ef 16       	cp	r14, r31
   16ce2:	f1 04       	cpc	r15, r1
   16ce4:	f1 f5       	brne	.+124    	; 0x16d62 <Amigo_Command+0xc6>
   16ce6:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   16cea:	90 e0       	ldi	r25, 0x00	; 0
   16cec:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   16cf0:	89 2b       	or	r24, r25
   16cf2:	09 f4       	brne	.+2      	; 0x16cf6 <Amigo_Command+0x5a>
   16cf4:	86 c0       	rjmp	.+268    	; 0x16e02 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16cf6:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16cfa:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16cfe:	81 81       	ldd	r24, Z+1	; 0x01
   16d00:	90 e0       	ldi	r25, 0x00	; 0
   16d02:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
        status = EOI_FLAG;
   16d06:	80 e0       	ldi	r24, 0x00	; 0
   16d08:	91 e0       	ldi	r25, 0x01	; 1
   16d0a:	9c 8f       	std	Y+28, r25	; 0x1c
   16d0c:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d0e:	ae 01       	movw	r20, r28
   16d10:	45 5e       	subi	r20, 0xE5	; 229
   16d12:	5f 4f       	sbci	r21, 0xFF	; 255
   16d14:	60 e0       	ldi	r22, 0x00	; 0
   16d16:	72 e0       	ldi	r23, 0x02	; 2
   16d18:	82 ef       	ldi	r24, 0xF2	; 242
   16d1a:	9c e1       	ldi	r25, 0x1C	; 28
   16d1c:	0e 94 bf 89 	call	0x1137e	; 0x1137e <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16d20:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16d24:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16d28:	81 81       	ldd	r24, Z+1	; 0x01
   16d2a:	90 e0       	ldi	r25, 0x00	; 0
   16d2c:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16d34:	88 27       	eor	r24, r24
   16d36:	90 7d       	andi	r25, 0xD0	; 208
   16d38:	89 2b       	or	r24, r25
   16d3a:	09 f4       	brne	.+2      	; 0x16d3e <Amigo_Command+0xa2>
   16d3c:	89 c2       	rjmp	.+1298   	; 0x17250 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16d3e:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16d42:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16d46:	81 e0       	ldi	r24, 0x01	; 1
   16d48:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16d4a:	87 81       	ldd	r24, Z+7	; 0x07
   16d4c:	90 85       	ldd	r25, Z+8	; 0x08
   16d4e:	80 62       	ori	r24, 0x20	; 32
   16d50:	90 87       	std	Z+8, r25	; 0x08
   16d52:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16d54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d58:	80 ff       	sbrs	r24, 0
   16d5a:	7a c2       	rjmp	.+1268   	; 0x17250 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16d5c:	85 e8       	ldi	r24, 0x85	; 133
   16d5e:	99 e2       	ldi	r25, 0x29	; 41
   16d60:	8e c0       	rjmp	.+284    	; 0x16e7e <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16d62:	ff e7       	ldi	r31, 0x7F	; 127
   16d64:	ef 16       	cp	r14, r31
   16d66:	f1 04       	cpc	r15, r1
   16d68:	09 f0       	breq	.+2      	; 0x16d6c <Amigo_Command+0xd0>
   16d6a:	4b c0       	rjmp	.+150    	; 0x16e02 <Amigo_Command+0x166>
   16d6c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16d70:	90 e0       	ldi	r25, 0x00	; 0
   16d72:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   16d76:	89 2b       	or	r24, r25
   16d78:	09 f4       	brne	.+2      	; 0x16d7c <Amigo_Command+0xe0>
   16d7a:	43 c0       	rjmp	.+134    	; 0x16e02 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16d7c:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16d80:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16d84:	81 81       	ldd	r24, Z+1	; 0x01
   16d86:	90 e0       	ldi	r25, 0x00	; 0
   16d88:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16d8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d90:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16d92:	0e 94 b5 83 	call	0x1076a	; 0x1076a <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16d96:	80 e0       	ldi	r24, 0x00	; 0
   16d98:	91 e0       	ldi	r25, 0x01	; 1
   16d9a:	9c 8f       	std	Y+28, r25	; 0x1c
   16d9c:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d9e:	ae 01       	movw	r20, r28
   16da0:	45 5e       	subi	r20, 0xE5	; 229
   16da2:	5f 4f       	sbci	r21, 0xFF	; 255
   16da4:	60 e0       	ldi	r22, 0x00	; 0
   16da6:	72 e0       	ldi	r23, 0x02	; 2
   16da8:	82 ef       	ldi	r24, 0xF2	; 242
   16daa:	9c e1       	ldi	r25, 0x1C	; 28
   16dac:	0e 94 1d 89 	call	0x1123a	; 0x1123a <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16db0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16db4:	87 ff       	sbrs	r24, 7
   16db6:	04 c0       	rjmp	.+8      	; 0x16dc0 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16db8:	87 ed       	ldi	r24, 0xD7	; 215
   16dba:	95 e1       	ldi	r25, 0x15	; 21
   16dbc:	0e 94 c7 83 	call	0x1078e	; 0x1078e <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16dc0:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16dc4:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16dc8:	81 81       	ldd	r24, Z+1	; 0x01
   16dca:	90 e0       	ldi	r25, 0x00	; 0
   16dcc:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16dd4:	88 27       	eor	r24, r24
   16dd6:	90 7d       	andi	r25, 0xD0	; 208
   16dd8:	89 2b       	or	r24, r25
   16dda:	09 f4       	brne	.+2      	; 0x16dde <Amigo_Command+0x142>
   16ddc:	39 c2       	rjmp	.+1138   	; 0x17250 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16dde:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16de2:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16de6:	81 e0       	ldi	r24, 0x01	; 1
   16de8:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16dea:	87 81       	ldd	r24, Z+7	; 0x07
   16dec:	90 85       	ldd	r25, Z+8	; 0x08
   16dee:	80 62       	ori	r24, 0x20	; 32
   16df0:	90 87       	std	Z+8, r25	; 0x08
   16df2:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16df4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16df8:	80 ff       	sbrs	r24, 0
   16dfa:	2a c2       	rjmp	.+1108   	; 0x17250 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16dfc:	84 e6       	ldi	r24, 0x64	; 100
   16dfe:	99 e2       	ldi	r25, 0x29	; 41
   16e00:	3e c0       	rjmp	.+124    	; 0x16e7e <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16e02:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   16e06:	90 e0       	ldi	r25, 0x00	; 0
   16e08:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   16e0c:	89 2b       	or	r24, r25
   16e0e:	19 f4       	brne	.+6      	; 0x16e16 <Amigo_Command+0x17a>
        return(0);
   16e10:	80 e0       	ldi	r24, 0x00	; 0
   16e12:	90 e0       	ldi	r25, 0x00	; 0
   16e14:	25 c2       	rjmp	.+1098   	; 0x17260 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16e16:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   16e1a:	90 e0       	ldi	r25, 0x00	; 0
   16e1c:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   16e20:	89 2b       	or	r24, r25
   16e22:	b1 f7       	brne	.-20     	; 0x16e10 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16e24:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   16e28:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   16e2c:	81 81       	ldd	r24, Z+1	; 0x01
   16e2e:	90 e0       	ldi	r25, 0x00	; 0
   16e30:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16e34:	80 e0       	ldi	r24, 0x00	; 0
   16e36:	91 e0       	ldi	r25, 0x01	; 1
   16e38:	9c 8f       	std	Y+28, r25	; 0x1c
   16e3a:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16e3c:	ae 01       	movw	r20, r28
   16e3e:	45 5e       	subi	r20, 0xE5	; 229
   16e40:	5f 4f       	sbci	r21, 0xFF	; 255
   16e42:	60 e0       	ldi	r22, 0x00	; 0
   16e44:	72 e0       	ldi	r23, 0x02	; 2
   16e46:	82 ef       	ldi	r24, 0xF2	; 242
   16e48:	9c e1       	ldi	r25, 0x1C	; 28
   16e4a:	0e 94 1d 89 	call	0x1123a	; 0x1123a <gpib_read_str>
   16e4e:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16e54:	88 27       	eor	r24, r24
   16e56:	90 7d       	andi	r25, 0xD0	; 208
   16e58:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16e5c:	89 2b       	or	r24, r25
   16e5e:	c1 f0       	breq	.+48     	; 0x16e90 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16e60:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16e64:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16e68:	81 e0       	ldi	r24, 0x01	; 1
   16e6a:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16e6c:	87 81       	ldd	r24, Z+7	; 0x07
   16e6e:	90 85       	ldd	r25, Z+8	; 0x08
   16e70:	80 62       	ori	r24, 0x20	; 32
   16e72:	90 87       	std	Z+8, r25	; 0x08
   16e74:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16e76:	20 ff       	sbrs	r18, 0
   16e78:	eb c1       	rjmp	.+982    	; 0x17250 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16e7a:	83 e4       	ldi	r24, 0x43	; 67
   16e7c:	99 e2       	ldi	r25, 0x29	; 41
   16e7e:	a0 e0       	ldi	r26, 0x00	; 0
   16e80:	ed b7       	in	r30, 0x3d	; 61
   16e82:	fe b7       	in	r31, 0x3e	; 62
   16e84:	81 83       	std	Z+1, r24	; 0x01
   16e86:	92 83       	std	Z+2, r25	; 0x02
   16e88:	a3 83       	std	Z+3, r26	; 0x03
   16e8a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   16e8e:	e0 c1       	rjmp	.+960    	; 0x17250 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e90:	25 ff       	sbrs	r18, 5
   16e92:	0e c0       	rjmp	.+28     	; 0x16eb0 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16e94:	ed b7       	in	r30, 0x3d	; 61
   16e96:	fe b7       	in	r31, 0x3e	; 62
   16e98:	17 83       	std	Z+7, r17	; 0x07
   16e9a:	06 83       	std	Z+6, r16	; 0x06
   16e9c:	f5 82       	std	Z+5, r15	; 0x05
   16e9e:	e4 82       	std	Z+4, r14	; 0x04
   16ea0:	84 e1       	ldi	r24, 0x14	; 20
   16ea2:	99 e2       	ldi	r25, 0x29	; 41
   16ea4:	a0 e0       	ldi	r26, 0x00	; 0
   16ea6:	81 83       	std	Z+1, r24	; 0x01
   16ea8:	92 83       	std	Z+2, r25	; 0x02
   16eaa:	a3 83       	std	Z+3, r26	; 0x03
   16eac:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            secondary, len);
#endif
    if(!len)
   16eb0:	01 15       	cp	r16, r1
   16eb2:	11 05       	cpc	r17, r1
   16eb4:	61 f4       	brne	.+24     	; 0x16ece <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16eb6:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16eba:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16ebe:	81 e0       	ldi	r24, 0x01	; 1
   16ec0:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16ec2:	87 81       	ldd	r24, Z+7	; 0x07
   16ec4:	90 85       	ldd	r25, Z+8	; 0x08
   16ec6:	80 62       	ori	r24, 0x20	; 32
   16ec8:	90 87       	std	Z+8, r25	; 0x08
   16eca:	87 83       	std	Z+7, r24	; 0x07
   16ecc:	c1 c1       	rjmp	.+898    	; 0x17250 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16ece:	60 91 f2 1c 	lds	r22, 0x1CF2	; 0x801cf2 <gpib_iobuff>

    if (secondary == 0x68)
   16ed2:	f8 e6       	ldi	r31, 0x68	; 104
   16ed4:	ef 16       	cp	r14, r31
   16ed6:	f1 04       	cpc	r15, r1
   16ed8:	09 f0       	breq	.+2      	; 0x16edc <Amigo_Command+0x240>
   16eda:	28 c1       	rjmp	.+592    	; 0x1712c <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16edc:	61 11       	cpse	r22, r1
   16ede:	2e c0       	rjmp	.+92     	; 0x16f3c <Amigo_Command+0x2a0>
   16ee0:	02 30       	cpi	r16, 0x02	; 2
   16ee2:	11 05       	cpc	r17, r1
   16ee4:	09 f0       	breq	.+2      	; 0x16ee8 <Amigo_Command+0x24c>
   16ee6:	b9 c1       	rjmp	.+882    	; 0x1725a <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ee8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eec:	85 ff       	sbrs	r24, 5
   16eee:	0a c0       	rjmp	.+20     	; 0x16f04 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16ef0:	84 ef       	ldi	r24, 0xF4	; 244
   16ef2:	98 e2       	ldi	r25, 0x28	; 40
   16ef4:	a0 e0       	ldi	r26, 0x00	; 0
   16ef6:	ed b7       	in	r30, 0x3d	; 61
   16ef8:	fe b7       	in	r31, 0x3e	; 62
   16efa:	81 83       	std	Z+1, r24	; 0x01
   16efc:	92 83       	std	Z+2, r25	; 0x02
   16efe:	a3 83       	std	Z+3, r26	; 0x03
   16f00:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16f04:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16f08:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16f0c:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16f0e:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16f10:	10 86       	std	Z+8, r1	; 0x08
   16f12:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16f14:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16f16:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   16f1a:	98 2f       	mov	r25, r24
   16f1c:	92 95       	swap	r25
   16f1e:	96 95       	lsr	r25
   16f20:	96 95       	lsr	r25
   16f22:	93 70       	andi	r25, 0x03	; 3
   16f24:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16f26:	8f 73       	andi	r24, 0x3F	; 63
   16f28:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16f2a:	ce 01       	movw	r24, r28
   16f2c:	0a 96       	adiw	r24, 0x0a	; 10
   16f2e:	d1 d9       	rcall	.-3166   	; 0x162d2 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16f30:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16f34:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16f38:	85 e0       	ldi	r24, 0x05	; 5
   16f3a:	19 c1       	rjmp	.+562    	; 0x1716e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16f3c:	62 30       	cpi	r22, 0x02	; 2
   16f3e:	09 f0       	breq	.+2      	; 0x16f42 <Amigo_Command+0x2a6>
   16f40:	3f c0       	rjmp	.+126    	; 0x16fc0 <Amigo_Command+0x324>
   16f42:	05 30       	cpi	r16, 0x05	; 5
   16f44:	11 05       	cpc	r17, r1
   16f46:	d1 f4       	brne	.+52     	; 0x16f7c <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f4c:	85 ff       	sbrs	r24, 5
   16f4e:	0a c0       	rjmp	.+20     	; 0x16f64 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16f50:	80 ee       	ldi	r24, 0xE0	; 224
   16f52:	98 e2       	ldi	r25, 0x28	; 40
   16f54:	a0 e0       	ldi	r26, 0x00	; 0
   16f56:	ed b7       	in	r30, 0x3d	; 61
   16f58:	fe b7       	in	r31, 0x3e	; 62
   16f5a:	81 83       	std	Z+1, r24	; 0x01
   16f5c:	92 83       	std	Z+2, r25	; 0x02
   16f5e:	a3 83       	std	Z+3, r26	; 0x03
   16f60:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f64:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   16f68:	85 de       	rcall	.-758    	; 0x16c74 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16f6a:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <gpib_iobuff+0x2>
   16f6e:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16f70:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   16f74:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16f76:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   16f7a:	1d c0       	rjmp	.+58     	; 0x16fb6 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16f7c:	06 30       	cpi	r16, 0x06	; 6
   16f7e:	11 05       	cpc	r17, r1
   16f80:	09 f0       	breq	.+2      	; 0x16f84 <Amigo_Command+0x2e8>
   16f82:	6b c1       	rjmp	.+726    	; 0x1725a <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f88:	85 ff       	sbrs	r24, 5
   16f8a:	0a c0       	rjmp	.+20     	; 0x16fa0 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   16f8c:	8c ec       	ldi	r24, 0xCC	; 204
   16f8e:	98 e2       	ldi	r25, 0x28	; 40
   16f90:	a0 e0       	ldi	r26, 0x00	; 0
   16f92:	ed b7       	in	r30, 0x3d	; 61
   16f94:	fe b7       	in	r31, 0x3e	; 62
   16f96:	81 83       	std	Z+1, r24	; 0x01
   16f98:	92 83       	std	Z+2, r25	; 0x02
   16f9a:	a3 83       	std	Z+3, r26	; 0x03
   16f9c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fa0:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   16fa4:	67 de       	rcall	.-818    	; 0x16c74 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16fa6:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   16faa:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16fac:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   16fb0:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16fb2:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16fb6:	8f 87       	std	Y+15, r24	; 0x0f
   16fb8:	ce 01       	movw	r24, r28
   16fba:	0a 96       	adiw	r24, 0x0a	; 10
   16fbc:	8a d9       	rcall	.-3308   	; 0x162d2 <amigo_seek>
   16fbe:	d8 c0       	rjmp	.+432    	; 0x17170 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16fc0:	63 30       	cpi	r22, 0x03	; 3
   16fc2:	e9 f4       	brne	.+58     	; 0x16ffe <Amigo_Command+0x362>
   16fc4:	02 30       	cpi	r16, 0x02	; 2
   16fc6:	11 05       	cpc	r17, r1
   16fc8:	09 f0       	breq	.+2      	; 0x16fcc <Amigo_Command+0x330>
   16fca:	47 c1       	rjmp	.+654    	; 0x1725a <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fcc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fd0:	85 ff       	sbrs	r24, 5
   16fd2:	0a c0       	rjmp	.+20     	; 0x16fe8 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   16fd4:	83 ea       	ldi	r24, 0xA3	; 163
   16fd6:	98 e2       	ldi	r25, 0x28	; 40
   16fd8:	a0 e0       	ldi	r26, 0x00	; 0
   16fda:	ed b7       	in	r30, 0x3d	; 61
   16fdc:	fe b7       	in	r31, 0x3e	; 62
   16fde:	81 83       	std	Z+1, r24	; 0x01
   16fe0:	92 83       	std	Z+2, r25	; 0x02
   16fe2:	a3 83       	std	Z+3, r26	; 0x03
   16fe4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fe8:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            amigo_request_status();
   16fec:	43 de       	rcall	.-890    	; 0x16c74 <amigo_check_unit>
   16fee:	3d d8       	rcall	.-3974   	; 0x1606a <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16ff0:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   16ff4:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   16ff8:	83 e0       	ldi	r24, 0x03	; 3
   16ffa:	80 83       	st	Z, r24
   16ffc:	29 c1       	rjmp	.+594    	; 0x17250 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16ffe:	65 30       	cpi	r22, 0x05	; 5
   17000:	d9 f4       	brne	.+54     	; 0x17038 <Amigo_Command+0x39c>
   17002:	02 30       	cpi	r16, 0x02	; 2
   17004:	11 05       	cpc	r17, r1
   17006:	09 f0       	breq	.+2      	; 0x1700a <Amigo_Command+0x36e>
   17008:	28 c1       	rjmp	.+592    	; 0x1725a <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1700a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1700e:	85 ff       	sbrs	r24, 5
   17010:	0a c0       	rjmp	.+20     	; 0x17026 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17012:	82 e8       	ldi	r24, 0x82	; 130
   17014:	98 e2       	ldi	r25, 0x28	; 40
   17016:	a0 e0       	ldi	r26, 0x00	; 0
   17018:	ed b7       	in	r30, 0x3d	; 61
   1701a:	fe b7       	in	r31, 0x3e	; 62
   1701c:	81 83       	std	Z+1, r24	; 0x01
   1701e:	92 83       	std	Z+2, r25	; 0x02
   17020:	a3 83       	std	Z+3, r26	; 0x03
   17022:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17026:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   1702a:	24 de       	rcall	.-952    	; 0x16c74 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1702c:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17030:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17034:	86 e0       	ldi	r24, 0x06	; 6
   17036:	e7 c0       	rjmp	.+462    	; 0x17206 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   17038:	67 30       	cpi	r22, 0x07	; 7
   1703a:	f9 f4       	brne	.+62     	; 0x1707a <Amigo_Command+0x3de>
   1703c:	04 30       	cpi	r16, 0x04	; 4
   1703e:	11 05       	cpc	r17, r1
   17040:	09 f0       	breq	.+2      	; 0x17044 <Amigo_Command+0x3a8>
   17042:	0b c1       	rjmp	.+534    	; 0x1725a <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17044:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17048:	85 ff       	sbrs	r24, 5
   1704a:	0a c0       	rjmp	.+20     	; 0x17060 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   1704c:	82 e7       	ldi	r24, 0x72	; 114
   1704e:	98 e2       	ldi	r25, 0x28	; 40
   17050:	a0 e0       	ldi	r26, 0x00	; 0
   17052:	ed b7       	in	r30, 0x3d	; 61
   17054:	fe b7       	in	r31, 0x3e	; 62
   17056:	81 83       	std	Z+1, r24	; 0x01
   17058:	92 83       	std	Z+2, r25	; 0x02
   1705a:	a3 83       	std	Z+3, r26	; 0x03
   1705c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17060:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17064:	07 de       	rcall	.-1010   	; 0x16c74 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   17066:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <gpib_iobuff+0x2>
   1706a:	90 e0       	ldi	r25, 0x00	; 0
   1706c:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1706e:	88 27       	eor	r24, r24
   17070:	20 91 f5 1c 	lds	r18, 0x1CF5	; 0x801cf5 <gpib_iobuff+0x3>
   17074:	82 2b       	or	r24, r18
   17076:	58 d9       	rcall	.-3408   	; 0x16328 <amigo_verify>
   17078:	f3 c0       	rjmp	.+486    	; 0x17260 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   1707a:	68 30       	cpi	r22, 0x08	; 8
   1707c:	d9 f4       	brne	.+54     	; 0x170b4 <Amigo_Command+0x418>
   1707e:	02 30       	cpi	r16, 0x02	; 2
   17080:	11 05       	cpc	r17, r1
   17082:	09 f0       	breq	.+2      	; 0x17086 <Amigo_Command+0x3ea>
   17084:	ea c0       	rjmp	.+468    	; 0x1725a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17086:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1708a:	85 ff       	sbrs	r24, 5
   1708c:	0a c0       	rjmp	.+20     	; 0x170a2 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   1708e:	80 e5       	ldi	r24, 0x50	; 80
   17090:	98 e2       	ldi	r25, 0x28	; 40
   17092:	a0 e0       	ldi	r26, 0x00	; 0
   17094:	ed b7       	in	r30, 0x3d	; 61
   17096:	fe b7       	in	r31, 0x3e	; 62
   17098:	81 83       	std	Z+1, r24	; 0x01
   1709a:	92 83       	std	Z+2, r25	; 0x02
   1709c:	a3 83       	std	Z+3, r26	; 0x03
   1709e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170a2:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   170a6:	e6 dd       	rcall	.-1076   	; 0x16c74 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   170a8:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   170ac:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   170b0:	88 e0       	ldi	r24, 0x08	; 8
   170b2:	5d c0       	rjmp	.+186    	; 0x1716e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   170b4:	86 2f       	mov	r24, r22
   170b6:	8f 7d       	andi	r24, 0xDF	; 223
   170b8:	8b 30       	cpi	r24, 0x0B	; 11
   170ba:	d9 f4       	brne	.+54     	; 0x170f2 <Amigo_Command+0x456>
   170bc:	02 30       	cpi	r16, 0x02	; 2
   170be:	11 05       	cpc	r17, r1
   170c0:	09 f0       	breq	.+2      	; 0x170c4 <Amigo_Command+0x428>
   170c2:	cb c0       	rjmp	.+406    	; 0x1725a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170c8:	85 ff       	sbrs	r24, 5
   170ca:	0a c0       	rjmp	.+20     	; 0x170e0 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   170cc:	84 e3       	ldi	r24, 0x34	; 52
   170ce:	98 e2       	ldi	r25, 0x28	; 40
   170d0:	a0 e0       	ldi	r26, 0x00	; 0
   170d2:	ed b7       	in	r30, 0x3d	; 61
   170d4:	fe b7       	in	r31, 0x3e	; 62
   170d6:	81 83       	std	Z+1, r24	; 0x01
   170d8:	92 83       	std	Z+2, r25	; 0x02
   170da:	a3 83       	std	Z+3, r26	; 0x03
   170dc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170e0:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   170e4:	c7 dd       	rcall	.-1138   	; 0x16c74 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   170e6:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   170ea:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   170ee:	8a e0       	ldi	r24, 0x0A	; 10
   170f0:	3e c0       	rjmp	.+124    	; 0x1716e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   170f2:	64 31       	cpi	r22, 0x14	; 20
   170f4:	09 f0       	breq	.+2      	; 0x170f8 <Amigo_Command+0x45c>
   170f6:	b1 c0       	rjmp	.+354    	; 0x1725a <Amigo_Command+0x5be>
   170f8:	02 30       	cpi	r16, 0x02	; 2
   170fa:	11 05       	cpc	r17, r1
   170fc:	09 f0       	breq	.+2      	; 0x17100 <Amigo_Command+0x464>
   170fe:	ad c0       	rjmp	.+346    	; 0x1725a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17100:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17104:	85 ff       	sbrs	r24, 5
   17106:	0a c0       	rjmp	.+20     	; 0x1711c <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17108:	8b e0       	ldi	r24, 0x0B	; 11
   1710a:	98 e2       	ldi	r25, 0x28	; 40
   1710c:	a0 e0       	ldi	r26, 0x00	; 0
   1710e:	ed b7       	in	r30, 0x3d	; 61
   17110:	fe b7       	in	r31, 0x3e	; 62
   17112:	81 83       	std	Z+1, r24	; 0x01
   17114:	92 83       	std	Z+2, r25	; 0x02
   17116:	a3 83       	std	Z+3, r26	; 0x03
   17118:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
            amigo_request_logical_address();
   1711c:	0e 94 27 b0 	call	0x1604e	; 0x1604e <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17120:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17124:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17128:	84 e0       	ldi	r24, 0x04	; 4
   1712a:	21 c0       	rjmp	.+66     	; 0x1716e <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1712c:	f9 e6       	ldi	r31, 0x69	; 105
   1712e:	ef 16       	cp	r14, r31
   17130:	f1 04       	cpc	r15, r1
   17132:	39 f5       	brne	.+78     	; 0x17182 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17134:	68 30       	cpi	r22, 0x08	; 8
   17136:	09 f0       	breq	.+2      	; 0x1713a <Amigo_Command+0x49e>
   17138:	90 c0       	rjmp	.+288    	; 0x1725a <Amigo_Command+0x5be>
   1713a:	02 30       	cpi	r16, 0x02	; 2
   1713c:	11 05       	cpc	r17, r1
   1713e:	09 f0       	breq	.+2      	; 0x17142 <Amigo_Command+0x4a6>
   17140:	8c c0       	rjmp	.+280    	; 0x1725a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17142:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17146:	85 ff       	sbrs	r24, 5
   17148:	0a c0       	rjmp	.+20     	; 0x1715e <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   1714a:	8b ee       	ldi	r24, 0xEB	; 235
   1714c:	97 e2       	ldi	r25, 0x27	; 39
   1714e:	a0 e0       	ldi	r26, 0x00	; 0
   17150:	ed b7       	in	r30, 0x3d	; 61
   17152:	fe b7       	in	r31, 0x3e	; 62
   17154:	81 83       	std	Z+1, r24	; 0x01
   17156:	92 83       	std	Z+2, r25	; 0x02
   17158:	a3 83       	std	Z+3, r26	; 0x03
   1715a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1715e:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   17162:	88 dd       	rcall	.-1264   	; 0x16c74 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17164:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17168:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1716c:	89 e0       	ldi	r24, 0x09	; 9
   1716e:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17170:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17174:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   17178:	81 81       	ldd	r24, Z+1	; 0x01
   1717a:	90 e0       	ldi	r25, 0x00	; 0
   1717c:	0e 94 8f 84 	call	0x1091e	; 0x1091e <gpib_enable_PPR>
   17180:	67 c0       	rjmp	.+206    	; 0x17250 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17182:	fa e6       	ldi	r31, 0x6A	; 106
   17184:	ef 16       	cp	r14, r31
   17186:	f1 04       	cpc	r15, r1
   17188:	09 f0       	breq	.+2      	; 0x1718c <Amigo_Command+0x4f0>
   1718a:	40 c0       	rjmp	.+128    	; 0x1720c <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   1718c:	68 30       	cpi	r22, 0x08	; 8
   1718e:	f1 f4       	brne	.+60     	; 0x171cc <Amigo_Command+0x530>
   17190:	02 30       	cpi	r16, 0x02	; 2
   17192:	11 05       	cpc	r17, r1
   17194:	09 f0       	breq	.+2      	; 0x17198 <Amigo_Command+0x4fc>
   17196:	61 c0       	rjmp	.+194    	; 0x1725a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17198:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1719c:	85 ff       	sbrs	r24, 5
   1719e:	0a c0       	rjmp	.+20     	; 0x171b4 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   171a0:	80 ec       	ldi	r24, 0xC0	; 192
   171a2:	97 e2       	ldi	r25, 0x27	; 39
   171a4:	a0 e0       	ldi	r26, 0x00	; 0
   171a6:	ed b7       	in	r30, 0x3d	; 61
   171a8:	fe b7       	in	r31, 0x3e	; 62
   171aa:	81 83       	std	Z+1, r24	; 0x01
   171ac:	92 83       	std	Z+2, r25	; 0x02
   171ae:	a3 83       	std	Z+3, r26	; 0x03
   171b0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171b4:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
   171b8:	5d dd       	rcall	.-1350   	; 0x16c74 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   171ba:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   171be:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   171c2:	82 e0       	ldi	r24, 0x02	; 2
   171c4:	80 83       	st	Z, r24
            amigo_request_status();
   171c6:	0e 94 35 b0 	call	0x1606a	; 0x1606a <amigo_request_status>
   171ca:	42 c0       	rjmp	.+132    	; 0x17250 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   171cc:	65 30       	cpi	r22, 0x05	; 5
   171ce:	09 f0       	breq	.+2      	; 0x171d2 <Amigo_Command+0x536>
   171d0:	44 c0       	rjmp	.+136    	; 0x1725a <Amigo_Command+0x5be>
   171d2:	02 30       	cpi	r16, 0x02	; 2
   171d4:	11 05       	cpc	r17, r1
   171d6:	09 f0       	breq	.+2      	; 0x171da <Amigo_Command+0x53e>
   171d8:	40 c0       	rjmp	.+128    	; 0x1725a <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171de:	85 ff       	sbrs	r24, 5
   171e0:	0a c0       	rjmp	.+20     	; 0x171f6 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   171e2:	81 ea       	ldi	r24, 0xA1	; 161
   171e4:	97 e2       	ldi	r25, 0x27	; 39
   171e6:	a0 e0       	ldi	r26, 0x00	; 0
   171e8:	ed b7       	in	r30, 0x3d	; 61
   171ea:	fe b7       	in	r31, 0x3e	; 62
   171ec:	81 83       	std	Z+1, r24	; 0x01
   171ee:	92 83       	std	Z+2, r25	; 0x02
   171f0:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171f2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   171f6:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   171fa:	3c dd       	rcall	.-1416   	; 0x16c74 <amigo_check_unit>
   171fc:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   17200:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   17204:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   17206:	80 83       	st	Z, r24
   17208:	c5 d9       	rcall	.-3190   	; 0x16594 <amigo_buffered_read_command>
   1720a:	2a c0       	rjmp	.+84     	; 0x17260 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   1720c:	fc e6       	ldi	r31, 0x6C	; 108
   1720e:	ef 16       	cp	r14, r31
   17210:	f1 04       	cpc	r15, r1
   17212:	d1 f4       	brne	.+52     	; 0x17248 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17214:	68 31       	cpi	r22, 0x18	; 24
   17216:	09 f5       	brne	.+66     	; 0x1725a <Amigo_Command+0x5be>
   17218:	05 30       	cpi	r16, 0x05	; 5
   1721a:	11 05       	cpc	r17, r1
   1721c:	f1 f4       	brne	.+60     	; 0x1725a <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1721e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17222:	85 ff       	sbrs	r24, 5
   17224:	0a c0       	rjmp	.+20     	; 0x1723a <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17226:	81 e9       	ldi	r24, 0x91	; 145
   17228:	97 e2       	ldi	r25, 0x27	; 39
   1722a:	a0 e0       	ldi	r26, 0x00	; 0
   1722c:	ed b7       	in	r30, 0x3d	; 61
   1722e:	fe b7       	in	r31, 0x3e	; 62
   17230:	81 83       	std	Z+1, r24	; 0x01
   17232:	92 83       	std	Z+2, r25	; 0x02
   17234:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17236:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1723a:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1723e:	1a dd       	rcall	.-1484   	; 0x16c74 <amigo_check_unit>
   17240:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_iobuff+0x4>
   17244:	0f d9       	rcall	.-3554   	; 0x16464 <amigo_format>
   17246:	04 c0       	rjmp	.+8      	; 0x17250 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17248:	f0 e7       	ldi	r31, 0x70	; 112
   1724a:	ef 16       	cp	r14, r31
   1724c:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1724e:	29 f4       	brne	.+10     	; 0x1725a <Amigo_Command+0x5be>
   17250:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17252:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17254:	88 27       	eor	r24, r24
   17256:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17258:	03 c0       	rjmp	.+6      	; 0x17260 <Amigo_Command+0x5c4>
   1725a:	a8 01       	movw	r20, r16
   1725c:	8e 2d       	mov	r24, r14
   1725e:	ed db       	rcall	.-2086   	; 0x16a3a <amigo_todo_op>
}
   17260:	6c 96       	adiw	r28, 0x1c	; 28
   17262:	e6 e0       	ldi	r30, 0x06	; 6
   17264:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00017268 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17268:	a9 e0       	ldi	r26, 0x09	; 9
   1726a:	b0 e0       	ldi	r27, 0x00	; 0
   1726c:	ea e3       	ldi	r30, 0x3A	; 58
   1726e:	f9 eb       	ldi	r31, 0xB9	; 185
   17270:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   17274:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17276:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1727a:	85 ff       	sbrs	r24, 5
   1727c:	16 c0       	rjmp	.+44     	; 0x172aa <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   1727e:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17282:	90 e0       	ldi	r25, 0x00	; 0
   17284:	ed b7       	in	r30, 0x3d	; 61
   17286:	fe b7       	in	r31, 0x3e	; 62
   17288:	91 87       	std	Z+9, r25	; 0x09
   1728a:	80 87       	std	Z+8, r24	; 0x08
   1728c:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17290:	90 e0       	ldi	r25, 0x00	; 0
   17292:	97 83       	std	Z+7, r25	; 0x07
   17294:	86 83       	std	Z+6, r24	; 0x06
   17296:	d5 83       	std	Z+5, r29	; 0x05
   17298:	c4 83       	std	Z+4, r28	; 0x04
   1729a:	8f e5       	ldi	r24, 0x5F	; 95
   1729c:	97 e2       	ldi	r25, 0x27	; 39
   1729e:	a0 e0       	ldi	r26, 0x00	; 0
   172a0:	81 83       	std	Z+1, r24	; 0x01
   172a2:	92 83       	std	Z+2, r25	; 0x02
   172a4:	a3 83       	std	Z+3, r26	; 0x03
   172a6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   172aa:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   172ae:	8f 35       	cpi	r24, 0x5F	; 95
   172b0:	09 f4       	brne	.+2      	; 0x172b4 <Amigo_Execute+0x4c>
   172b2:	ad c0       	rjmp	.+346    	; 0x1740e <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   172b4:	90 e0       	ldi	r25, 0x00	; 0
   172b6:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   172ba:	89 2b       	or	r24, r25
   172bc:	39 f0       	breq	.+14     	; 0x172cc <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   172be:	ce 01       	movw	r24, r28
   172c0:	87 7f       	andi	r24, 0xF7	; 247
   172c2:	80 36       	cpi	r24, 0x60	; 96
   172c4:	91 05       	cpc	r25, r1
   172c6:	09 f0       	breq	.+2      	; 0x172ca <Amigo_Execute+0x62>
   172c8:	a2 c0       	rjmp	.+324    	; 0x1740e <Amigo_Execute+0x1a6>
   172ca:	08 c0       	rjmp	.+16     	; 0x172dc <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   172cc:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   172d0:	90 e0       	ldi	r25, 0x00	; 0
   172d2:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   172d6:	89 2b       	or	r24, r25
   172d8:	91 f7       	brne	.-28     	; 0x172be <Amigo_Execute+0x56>
   172da:	99 c0       	rjmp	.+306    	; 0x1740e <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   172dc:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   172e0:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   172e4:	81 81       	ldd	r24, Z+1	; 0x01
   172e6:	90 e0       	ldi	r25, 0x00	; 0
   172e8:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>

    if(secondary == 0x60)
   172ec:	c0 36       	cpi	r28, 0x60	; 96
   172ee:	d1 05       	cpc	r29, r1
   172f0:	09 f0       	breq	.+2      	; 0x172f4 <Amigo_Execute+0x8c>
   172f2:	4e c0       	rjmp	.+156    	; 0x17390 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   172f4:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   172f8:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   172fc:	e0 81       	ld	r30, Z
   172fe:	8e 2f       	mov	r24, r30
   17300:	90 e0       	ldi	r25, 0x00	; 0
   17302:	8b 30       	cpi	r24, 0x0B	; 11
   17304:	91 05       	cpc	r25, r1
   17306:	08 f0       	brcs	.+2      	; 0x1730a <Amigo_Execute+0xa2>
   17308:	41 c0       	rjmp	.+130    	; 0x1738c <Amigo_Execute+0x124>
   1730a:	fc 01       	movw	r30, r24
   1730c:	ea 52       	subi	r30, 0x2A	; 42
   1730e:	ff 4f       	sbci	r31, 0xFF	; 255
   17310:	0c 94 bd e2 	jmp	0x1c57a	; 0x1c57a <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17314:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17318:	85 ff       	sbrs	r24, 5
   1731a:	18 c0       	rjmp	.+48     	; 0x1734c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   1731c:	8f e3       	ldi	r24, 0x3F	; 63
   1731e:	97 e2       	ldi	r25, 0x27	; 39
   17320:	0d c0       	rjmp	.+26     	; 0x1733c <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17322:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17326:	85 ff       	sbrs	r24, 5
   17328:	11 c0       	rjmp	.+34     	; 0x1734c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1732a:	8e e1       	ldi	r24, 0x1E	; 30
   1732c:	97 e2       	ldi	r25, 0x27	; 39
   1732e:	06 c0       	rjmp	.+12     	; 0x1733c <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17330:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17334:	85 ff       	sbrs	r24, 5
   17336:	0a c0       	rjmp	.+20     	; 0x1734c <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17338:	8f ef       	ldi	r24, 0xFF	; 255
   1733a:	96 e2       	ldi	r25, 0x26	; 38
   1733c:	a0 e0       	ldi	r26, 0x00	; 0
   1733e:	ed b7       	in	r30, 0x3d	; 61
   17340:	fe b7       	in	r31, 0x3e	; 62
   17342:	81 83       	std	Z+1, r24	; 0x01
   17344:	92 83       	std	Z+2, r25	; 0x02
   17346:	a3 83       	std	Z+3, r26	; 0x03
   17348:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   1734c:	b0 d9       	rcall	.-3232   	; 0x166ae <amigo_buffered_read_execute>
   1734e:	61 c0       	rjmp	.+194    	; 0x17412 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17350:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17354:	85 ff       	sbrs	r24, 5
   17356:	18 c0       	rjmp	.+48     	; 0x17388 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17358:	8d ed       	ldi	r24, 0xDD	; 221
   1735a:	96 e2       	ldi	r25, 0x26	; 38
   1735c:	0d c0       	rjmp	.+26     	; 0x17378 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1735e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17362:	85 ff       	sbrs	r24, 5
   17364:	11 c0       	rjmp	.+34     	; 0x17388 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17366:	81 ec       	ldi	r24, 0xC1	; 193
   17368:	96 e2       	ldi	r25, 0x26	; 38
   1736a:	06 c0       	rjmp	.+12     	; 0x17378 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1736c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17370:	85 ff       	sbrs	r24, 5
   17372:	0a c0       	rjmp	.+20     	; 0x17388 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17374:	81 ea       	ldi	r24, 0xA1	; 161
   17376:	96 e2       	ldi	r25, 0x26	; 38
   17378:	a0 e0       	ldi	r26, 0x00	; 0
   1737a:	ed b7       	in	r30, 0x3d	; 61
   1737c:	fe b7       	in	r31, 0x3e	; 62
   1737e:	81 83       	std	Z+1, r24	; 0x01
   17380:	92 83       	std	Z+2, r25	; 0x02
   17382:	a3 83       	std	Z+3, r26	; 0x03
   17384:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17388:	ed d9       	rcall	.-3110   	; 0x16764 <amigo_buffered_write>
   1738a:	43 c0       	rjmp	.+134    	; 0x17412 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   1738c:	80 e6       	ldi	r24, 0x60	; 96
   1738e:	3d c0       	rjmp	.+122    	; 0x1740a <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17390:	c8 36       	cpi	r28, 0x68	; 104
   17392:	d1 05       	cpc	r29, r1
   17394:	e1 f5       	brne	.+120    	; 0x1740e <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17396:	e0 91 6a 19 	lds	r30, 0x196A	; 0x80196a <AMIGOs>
   1739a:	f0 91 6b 19 	lds	r31, 0x196B	; 0x80196b <AMIGOs+0x1>
   1739e:	80 81       	ld	r24, Z
   173a0:	82 30       	cpi	r24, 0x02	; 2
   173a2:	81 f0       	breq	.+32     	; 0x173c4 <Amigo_Execute+0x15c>
   173a4:	18 f4       	brcc	.+6      	; 0x173ac <Amigo_Execute+0x144>
   173a6:	88 23       	and	r24, r24
   173a8:	91 f1       	breq	.+100    	; 0x1740e <Amigo_Execute+0x1a6>
   173aa:	2e c0       	rjmp	.+92     	; 0x17408 <Amigo_Execute+0x1a0>
   173ac:	83 30       	cpi	r24, 0x03	; 3
   173ae:	19 f0       	breq	.+6      	; 0x173b6 <Amigo_Execute+0x14e>
   173b0:	84 30       	cpi	r24, 0x04	; 4
   173b2:	c9 f0       	breq	.+50     	; 0x173e6 <Amigo_Execute+0x17e>
   173b4:	29 c0       	rjmp	.+82     	; 0x17408 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ba:	85 ff       	sbrs	r24, 5
   173bc:	11 c0       	rjmp	.+34     	; 0x173e0 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   173be:	88 e7       	ldi	r24, 0x78	; 120
   173c0:	96 e2       	ldi	r25, 0x26	; 38
   173c2:	06 c0       	rjmp	.+12     	; 0x173d0 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173c8:	85 ff       	sbrs	r24, 5
   173ca:	0a c0       	rjmp	.+20     	; 0x173e0 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   173cc:	8d e4       	ldi	r24, 0x4D	; 77
   173ce:	96 e2       	ldi	r25, 0x26	; 38
   173d0:	a0 e0       	ldi	r26, 0x00	; 0
   173d2:	ed b7       	in	r30, 0x3d	; 61
   173d4:	fe b7       	in	r31, 0x3e	; 62
   173d6:	81 83       	std	Z+1, r24	; 0x01
   173d8:	92 83       	std	Z+2, r25	; 0x02
   173da:	a3 83       	std	Z+3, r26	; 0x03
   173dc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                return ( amigo_send_status() );
   173e0:	0e 94 e7 b0 	call	0x161ce	; 0x161ce <amigo_send_status>
   173e4:	16 c0       	rjmp	.+44     	; 0x17412 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ea:	85 ff       	sbrs	r24, 5
   173ec:	0a c0       	rjmp	.+20     	; 0x17402 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   173ee:	84 e2       	ldi	r24, 0x24	; 36
   173f0:	96 e2       	ldi	r25, 0x26	; 38
   173f2:	a0 e0       	ldi	r26, 0x00	; 0
   173f4:	ed b7       	in	r30, 0x3d	; 61
   173f6:	fe b7       	in	r31, 0x3e	; 62
   173f8:	81 83       	std	Z+1, r24	; 0x01
   173fa:	92 83       	std	Z+2, r25	; 0x02
   173fc:	a3 83       	std	Z+3, r26	; 0x03
   173fe:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17402:	0e 94 92 b0 	call	0x16124	; 0x16124 <amigo_send_logical_address>
   17406:	05 c0       	rjmp	.+10     	; 0x17412 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17408:	88 e6       	ldi	r24, 0x68	; 104
   1740a:	b0 db       	rcall	.-2208   	; 0x16b6c <amigo_todo>
   1740c:	02 c0       	rjmp	.+4      	; 0x17412 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   1740e:	80 e0       	ldi	r24, 0x00	; 0
   17410:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17412:	cd b7       	in	r28, 0x3d	; 61
   17414:	de b7       	in	r29, 0x3e	; 62
   17416:	29 96       	adiw	r28, 0x09	; 9
   17418:	e2 e0       	ldi	r30, 0x02	; 2
   1741a:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

0001741e <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   1741e:	cf 93       	push	r28
   17420:	df 93       	push	r29
   17422:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17424:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17428:	90 e0       	ldi	r25, 0x00	; 0
   1742a:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   1742e:	89 2b       	or	r24, r25
   17430:	51 f0       	breq	.+20     	; 0x17446 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17432:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17436:	8f 35       	cpi	r24, 0x5F	; 95
   17438:	71 f4       	brne	.+28     	; 0x17456 <AMIGO_COMMANDS+0x38>
   1743a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1743e:	90 e0       	ldi	r25, 0x00	; 0
   17440:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   17444:	08 c0       	rjmp	.+16     	; 0x17456 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17446:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1744a:	90 e0       	ldi	r25, 0x00	; 0
   1744c:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   17450:	89 2b       	or	r24, r25
   17452:	79 f7       	brne	.-34     	; 0x17432 <AMIGO_COMMANDS+0x14>
   17454:	76 c0       	rjmp	.+236    	; 0x17542 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17456:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1745a:	81 11       	cpse	r24, r1
   1745c:	05 c0       	rjmp	.+10     	; 0x17468 <AMIGO_COMMANDS+0x4a>
   1745e:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17462:	90 e0       	ldi	r25, 0x00	; 0
   17464:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17468:	c0 36       	cpi	r28, 0x60	; 96
   1746a:	99 f4       	brne	.+38     	; 0x17492 <AMIGO_COMMANDS+0x74>
   1746c:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17470:	90 e0       	ldi	r25, 0x00	; 0
   17472:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   17476:	89 2b       	or	r24, r25
   17478:	19 f0       	breq	.+6      	; 0x17480 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   1747a:	80 e6       	ldi	r24, 0x60	; 96
   1747c:	90 e0       	ldi	r25, 0x00	; 0
   1747e:	14 c0       	rjmp	.+40     	; 0x174a8 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17480:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   17484:	90 e0       	ldi	r25, 0x00	; 0
   17486:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   1748a:	89 2b       	or	r24, r25
   1748c:	09 f4       	brne	.+2      	; 0x17490 <AMIGO_COMMANDS+0x72>
   1748e:	59 c0       	rjmp	.+178    	; 0x17542 <AMIGO_COMMANDS+0x124>
   17490:	f4 cf       	rjmp	.-24     	; 0x1747a <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17492:	c8 36       	cpi	r28, 0x68	; 104
   17494:	c1 f4       	brne	.+48     	; 0x174c6 <AMIGO_COMMANDS+0xa8>
   17496:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   1749a:	90 e0       	ldi	r25, 0x00	; 0
   1749c:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   174a0:	89 2b       	or	r24, r25
   174a2:	21 f0       	breq	.+8      	; 0x174ac <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   174a4:	88 e6       	ldi	r24, 0x68	; 104
   174a6:	90 e0       	ldi	r25, 0x00	; 0
   174a8:	df de       	rcall	.-578    	; 0x17268 <Amigo_Execute>
   174aa:	0b c0       	rjmp	.+22     	; 0x174c2 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   174ac:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   174b0:	90 e0       	ldi	r25, 0x00	; 0
   174b2:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   174b6:	89 2b       	or	r24, r25
   174b8:	09 f4       	brne	.+2      	; 0x174bc <AMIGO_COMMANDS+0x9e>
   174ba:	43 c0       	rjmp	.+134    	; 0x17542 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174bc:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   174be:	90 e0       	ldi	r25, 0x00	; 0
   174c0:	ed db       	rcall	.-2086   	; 0x16c9c <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   174c2:	ec 01       	movw	r28, r24
   174c4:	40 c0       	rjmp	.+128    	; 0x17546 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   174c6:	c9 36       	cpi	r28, 0x69	; 105
   174c8:	51 f4       	brne	.+20     	; 0x174de <AMIGO_COMMANDS+0xc0>
   174ca:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   174ce:	90 e0       	ldi	r25, 0x00	; 0
   174d0:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   174d4:	89 2b       	or	r24, r25
   174d6:	a9 f1       	breq	.+106    	; 0x17542 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174d8:	89 e6       	ldi	r24, 0x69	; 105
   174da:	90 e0       	ldi	r25, 0x00	; 0
   174dc:	f1 cf       	rjmp	.-30     	; 0x174c0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   174de:	ca 36       	cpi	r28, 0x6A	; 106
   174e0:	51 f4       	brne	.+20     	; 0x174f6 <AMIGO_COMMANDS+0xd8>
   174e2:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   174e6:	90 e0       	ldi	r25, 0x00	; 0
   174e8:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   174ec:	89 2b       	or	r24, r25
   174ee:	49 f1       	breq	.+82     	; 0x17542 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174f0:	8a e6       	ldi	r24, 0x6A	; 106
   174f2:	90 e0       	ldi	r25, 0x00	; 0
   174f4:	e5 cf       	rjmp	.-54     	; 0x174c0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   174f6:	cc 36       	cpi	r28, 0x6C	; 108
   174f8:	51 f4       	brne	.+20     	; 0x1750e <AMIGO_COMMANDS+0xf0>
   174fa:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   174fe:	90 e0       	ldi	r25, 0x00	; 0
   17500:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   17504:	89 2b       	or	r24, r25
   17506:	e9 f0       	breq	.+58     	; 0x17542 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17508:	8c e6       	ldi	r24, 0x6C	; 108
   1750a:	90 e0       	ldi	r25, 0x00	; 0
   1750c:	d9 cf       	rjmp	.-78     	; 0x174c0 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   1750e:	c0 37       	cpi	r28, 0x70	; 112
   17510:	c1 f4       	brne	.+48     	; 0x17542 <AMIGO_COMMANDS+0x124>
   17512:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17516:	90 e0       	ldi	r25, 0x00	; 0
   17518:	0e 94 03 8b 	call	0x11606	; 0x11606 <AMIGO_is_MTA>
   1751c:	ec 01       	movw	r28, r24
   1751e:	89 2b       	or	r24, r25
   17520:	51 f0       	breq	.+20     	; 0x17536 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17522:	e0 91 6c 19 	lds	r30, 0x196C	; 0x80196c <AMIGOp>
   17526:	f0 91 6d 19 	lds	r31, 0x196D	; 0x80196d <AMIGOp+0x1>
   1752a:	81 81       	ldd	r24, Z+1	; 0x01
   1752c:	90 e0       	ldi	r25, 0x00	; 0
   1752e:	0e 94 c5 84 	call	0x1098a	; 0x1098a <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17532:	ff d9       	rcall	.-3074   	; 0x16932 <amigo_cmd_dsj>
   17534:	c6 cf       	rjmp	.-116    	; 0x174c2 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17536:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1753a:	90 e0       	ldi	r25, 0x00	; 0
   1753c:	0e 94 f2 8a 	call	0x115e4	; 0x115e4 <AMIGO_is_MLA>
   17540:	02 c0       	rjmp	.+4      	; 0x17546 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17542:	c0 e0       	ldi	r28, 0x00	; 0
   17544:	d0 e0       	ldi	r29, 0x00	; 0
}
   17546:	ce 01       	movw	r24, r28
   17548:	df 91       	pop	r29
   1754a:	cf 91       	pop	r28
   1754c:	08 95       	ret

0001754e <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   1754e:	e5 ea       	ldi	r30, 0xA5	; 165
   17550:	f9 e1       	ldi	r31, 0x19	; 25
   17552:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17554:	10 82       	st	Z, r1
   17556:	11 82       	std	Z+1, r1	; 0x01
   17558:	12 82       	std	Z+2, r1	; 0x02
   1755a:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   1755c:	15 82       	std	Z+5, r1	; 0x05
   1755e:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17560:	12 86       	std	Z+10, r1	; 0x0a
   17562:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17564:	14 86       	std	Z+12, r1	; 0x0c
   17566:	13 86       	std	Z+11, r1	; 0x0b
   17568:	08 95       	ret

0001756a <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   1756a:	cf 93       	push	r28
   1756c:	df 93       	push	r29
   1756e:	ad b7       	in	r26, 0x3d	; 61
   17570:	be b7       	in	r27, 0x3e	; 62
   17572:	17 97       	sbiw	r26, 0x07	; 7
   17574:	0f b6       	in	r0, 0x3f	; 63
   17576:	f8 94       	cli
   17578:	be bf       	out	0x3e, r27	; 62
   1757a:	0f be       	out	0x3f, r0	; 63
   1757c:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   1757e:	20 91 ae 19 	lds	r18, 0x19AE	; 0x8019ae <plot+0x9>
   17582:	30 91 af 19 	lds	r19, 0x19AF	; 0x8019af <plot+0xa>
   17586:	21 15       	cp	r18, r1
   17588:	31 05       	cpc	r19, r1
   1758a:	09 f4       	brne	.+2      	; 0x1758e <receive_plot_flush+0x24>
   1758c:	45 c0       	rjmp	.+138    	; 0x17618 <receive_plot_flush+0xae>
   1758e:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   17592:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   17596:	00 97       	sbiw	r24, 0x00	; 0
   17598:	09 f4       	brne	.+2      	; 0x1759c <receive_plot_flush+0x32>
   1759a:	40 c0       	rjmp	.+128    	; 0x1761c <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   1759c:	ac 01       	movw	r20, r24
   1759e:	61 e0       	ldi	r22, 0x01	; 1
   175a0:	70 e0       	ldi	r23, 0x00	; 0
   175a2:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0xb>
   175a6:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0xc>
   175aa:	0e 94 b5 7a 	call	0xf56a	; 0xf56a <fwrite>
   175ae:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   175b0:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   175b4:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   175b8:	c8 17       	cp	r28, r24
   175ba:	d9 07       	cpc	r29, r25
   175bc:	09 f1       	breq	.+66     	; 0x17600 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   175be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   175c6:	81 72       	andi	r24, 0x21	; 33
   175c8:	99 27       	eor	r25, r25
   175ca:	89 2b       	or	r24, r25
   175cc:	b1 f0       	breq	.+44     	; 0x175fa <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   175ce:	81 ee       	ldi	r24, 0xE1	; 225
   175d0:	95 e1       	ldi	r25, 0x15	; 21
   175d2:	0e 94 be 76 	call	0xed7c	; 0xed7c <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   175d6:	ed b7       	in	r30, 0x3d	; 61
   175d8:	fe b7       	in	r31, 0x3e	; 62
   175da:	d7 83       	std	Z+7, r29	; 0x07
   175dc:	c6 83       	std	Z+6, r28	; 0x06
   175de:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   175e2:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   175e6:	95 83       	std	Z+5, r25	; 0x05
   175e8:	84 83       	std	Z+4, r24	; 0x04
   175ea:	84 eb       	ldi	r24, 0xB4	; 180
   175ec:	9e e2       	ldi	r25, 0x2E	; 46
   175ee:	a0 e0       	ldi	r26, 0x00	; 0
   175f0:	81 83       	std	Z+1, r24	; 0x01
   175f2:	92 83       	std	Z+2, r25	; 0x02
   175f4:	a3 83       	std	Z+3, r26	; 0x03
   175f6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        }
        return(-1);
   175fa:	8f ef       	ldi	r24, 0xFF	; 255
   175fc:	9f ef       	ldi	r25, 0xFF	; 255
   175fe:	0e c0       	rjmp	.+28     	; 0x1761c <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17600:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x9>
   17604:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0xa>
   17608:	0e 94 08 75 	call	0xea10	; 0xea10 <fileno>
    if(fno < 0)
   1760c:	97 fd       	sbrc	r25, 7
   1760e:	f5 cf       	rjmp	.-22     	; 0x175fa <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17610:	0e 94 ff 79 	call	0xf3fe	; 0xf3fe <syncfs>
    return (ret);
   17614:	ce 01       	movw	r24, r28
   17616:	02 c0       	rjmp	.+4      	; 0x1761c <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17618:	80 e0       	ldi	r24, 0x00	; 0
   1761a:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   1761c:	cd b7       	in	r28, 0x3d	; 61
   1761e:	de b7       	in	r29, 0x3e	; 62
   17620:	27 96       	adiw	r28, 0x07	; 7
   17622:	e2 e0       	ldi	r30, 0x02	; 2
   17624:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00017628 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17628:	ad b7       	in	r26, 0x3d	; 61
   1762a:	be b7       	in	r27, 0x3e	; 62
   1762c:	17 97       	sbiw	r26, 0x07	; 7
   1762e:	0f b6       	in	r0, 0x3f	; 63
   17630:	f8 94       	cli
   17632:	be bf       	out	0x3e, r27	; 62
   17634:	0f be       	out	0x3f, r0	; 63
   17636:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17638:	98 df       	rcall	.-208    	; 0x1756a <receive_plot_flush>
   1763a:	97 ff       	sbrs	r25, 7
   1763c:	03 c0       	rjmp	.+6      	; 0x17644 <printer_close+0x1c>
        plot.error = 1;
   1763e:	81 e0       	ldi	r24, 0x01	; 1
   17640:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17644:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17648:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1764c:	81 72       	andi	r24, 0x21	; 33
   1764e:	99 27       	eor	r25, r25
   17650:	89 2b       	or	r24, r25
   17652:	71 f0       	breq	.+28     	; 0x17670 <printer_close+0x48>
    {
        if(plot.error)
   17654:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <plot+0x8>
   17658:	88 23       	and	r24, r24
   1765a:	51 f0       	breq	.+20     	; 0x17670 <printer_close+0x48>
            printf("ERROR durring write\n");
   1765c:	83 ee       	ldi	r24, 0xE3	; 227
   1765e:	9e e2       	ldi	r25, 0x2E	; 46
   17660:	a0 e0       	ldi	r26, 0x00	; 0
   17662:	ed b7       	in	r30, 0x3d	; 61
   17664:	fe b7       	in	r31, 0x3e	; 62
   17666:	81 83       	std	Z+1, r24	; 0x01
   17668:	92 83       	std	Z+2, r25	; 0x02
   1766a:	a3 83       	std	Z+3, r26	; 0x03
   1766c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

    if(plot.fp)
   17670:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <plot+0x9>
   17674:	90 91 af 19 	lds	r25, 0x19AF	; 0x8019af <plot+0xa>
   17678:	00 97       	sbiw	r24, 0x00	; 0
   1767a:	e1 f0       	breq	.+56     	; 0x176b4 <printer_close+0x8c>
    {
        fclose(plot.fp);
   1767c:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17680:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17684:	85 ff       	sbrs	r24, 5
   17686:	16 c0       	rjmp	.+44     	; 0x176b4 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17688:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   1768c:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0x1>
   17690:	a0 91 a7 19 	lds	r26, 0x19A7	; 0x8019a7 <plot+0x2>
   17694:	b0 91 a8 19 	lds	r27, 0x19A8	; 0x8019a8 <plot+0x3>
   17698:	ed b7       	in	r30, 0x3d	; 61
   1769a:	fe b7       	in	r31, 0x3e	; 62
   1769c:	84 83       	std	Z+4, r24	; 0x04
   1769e:	95 83       	std	Z+5, r25	; 0x05
   176a0:	a6 83       	std	Z+6, r26	; 0x06
   176a2:	b7 83       	std	Z+7, r27	; 0x07
   176a4:	85 ed       	ldi	r24, 0xD5	; 213
   176a6:	9e e2       	ldi	r25, 0x2E	; 46
   176a8:	a0 e0       	ldi	r26, 0x00	; 0
   176aa:	81 83       	std	Z+1, r24	; 0x01
   176ac:	92 83       	std	Z+2, r25	; 0x02
   176ae:	a3 83       	std	Z+3, r26	; 0x03
   176b0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

    if(plot.buf)
   176b4:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <plot+0xb>
   176b8:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <plot+0xc>
   176bc:	00 97       	sbiw	r24, 0x00	; 0
   176be:	11 f0       	breq	.+4      	; 0x176c4 <printer_close+0x9c>
        safefree(plot.buf);
   176c0:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <safefree>
    printer_init();
   176c4:	44 df       	rcall	.-376    	; 0x1754e <printer_init>
}
   176c6:	ad b7       	in	r26, 0x3d	; 61
   176c8:	be b7       	in	r27, 0x3e	; 62
   176ca:	17 96       	adiw	r26, 0x07	; 7
   176cc:	0f b6       	in	r0, 0x3f	; 63
   176ce:	f8 94       	cli
   176d0:	be bf       	out	0x3e, r27	; 62
   176d2:	0f be       	out	0x3f, r0	; 63
   176d4:	ad bf       	out	0x3d, r26	; 61
   176d6:	08 95       	ret

000176d8 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   176d8:	ad e5       	ldi	r26, 0x5D	; 93
   176da:	b0 e0       	ldi	r27, 0x00	; 0
   176dc:	e2 e7       	ldi	r30, 0x72	; 114
   176de:	fb eb       	ldi	r31, 0xBB	; 187
   176e0:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x18>
   176e4:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   176e6:	89 2b       	or	r24, r25
   176e8:	09 f0       	breq	.+2      	; 0x176ec <printer_open+0x14>
   176ea:	4f c0       	rjmp	.+158    	; 0x1778a <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   176ec:	be 01       	movw	r22, r28
   176ee:	6e 5a       	subi	r22, 0xAE	; 174
   176f0:	7f 4f       	sbci	r23, 0xFF	; 255
   176f2:	80 e0       	ldi	r24, 0x00	; 0
   176f4:	90 e0       	ldi	r25, 0x00	; 0
   176f6:	0e 94 12 32 	call	0x6424	; 0x6424 <clock_gettime>
        seconds = ts.tv_sec;
   176fa:	66 96       	adiw	r28, 0x16	; 22
   176fc:	8c ad       	ldd	r24, Y+60	; 0x3c
   176fe:	9d ad       	ldd	r25, Y+61	; 0x3d
   17700:	ae ad       	ldd	r26, Y+62	; 0x3e
   17702:	bf ad       	ldd	r27, Y+63	; 0x3f
   17704:	66 97       	sbiw	r28, 0x16	; 22
   17706:	6e 96       	adiw	r28, 0x1e	; 30
   17708:	8c af       	std	Y+60, r24	; 0x3c
   1770a:	9d af       	std	Y+61, r25	; 0x3d
   1770c:	ae af       	std	Y+62, r26	; 0x3e
   1770e:	bf af       	std	Y+63, r27	; 0x3f
   17710:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17712:	ce 01       	movw	r24, r28
   17714:	86 5a       	subi	r24, 0xA6	; 166
   17716:	9f 4f       	sbci	r25, 0xFF	; 255
   17718:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <gmtime>
   1771c:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   1771e:	fc 01       	movw	r30, r24
   17720:	e6 80       	ldd	r14, Z+6	; 0x06
   17722:	f7 80       	ldd	r15, Z+7	; 0x07
   17724:	80 85       	ldd	r24, Z+8	; 0x08
   17726:	91 85       	ldd	r25, Z+9	; 0x09
   17728:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <tm_mon_to_ascii>
   1772c:	f8 01       	movw	r30, r16
   1772e:	20 81       	ld	r18, Z
   17730:	31 81       	ldd	r19, Z+1	; 0x01
   17732:	ed b7       	in	r30, 0x3d	; 61
   17734:	fe b7       	in	r31, 0x3e	; 62
   17736:	31 8b       	std	Z+17, r19	; 0x11
   17738:	20 8b       	std	Z+16, r18	; 0x10
   1773a:	f8 01       	movw	r30, r16
   1773c:	22 81       	ldd	r18, Z+2	; 0x02
   1773e:	33 81       	ldd	r19, Z+3	; 0x03
   17740:	ed b7       	in	r30, 0x3d	; 61
   17742:	fe b7       	in	r31, 0x3e	; 62
   17744:	37 87       	std	Z+15, r19	; 0x0f
   17746:	26 87       	std	Z+14, r18	; 0x0e
   17748:	f8 01       	movw	r30, r16
   1774a:	24 81       	ldd	r18, Z+4	; 0x04
   1774c:	35 81       	ldd	r19, Z+5	; 0x05
   1774e:	ed b7       	in	r30, 0x3d	; 61
   17750:	fe b7       	in	r31, 0x3e	; 62
   17752:	35 87       	std	Z+13, r19	; 0x0d
   17754:	24 87       	std	Z+12, r18	; 0x0c
   17756:	f8 01       	movw	r30, r16
   17758:	22 85       	ldd	r18, Z+10	; 0x0a
   1775a:	33 85       	ldd	r19, Z+11	; 0x0b
   1775c:	24 59       	subi	r18, 0x94	; 148
   1775e:	38 4f       	sbci	r19, 0xF8	; 248
   17760:	ed b7       	in	r30, 0x3d	; 61
   17762:	fe b7       	in	r31, 0x3e	; 62
   17764:	33 87       	std	Z+11, r19	; 0x0b
   17766:	22 87       	std	Z+10, r18	; 0x0a
   17768:	91 87       	std	Z+9, r25	; 0x09
   1776a:	80 87       	std	Z+8, r24	; 0x08
   1776c:	f7 82       	std	Z+7, r15	; 0x07
   1776e:	e6 82       	std	Z+6, r14	; 0x06
   17770:	8a e1       	ldi	r24, 0x1A	; 26
   17772:	9f e2       	ldi	r25, 0x2F	; 47
   17774:	a0 e0       	ldi	r26, 0x00	; 0
   17776:	83 83       	std	Z+3, r24	; 0x03
   17778:	94 83       	std	Z+4, r25	; 0x04
   1777a:	a5 83       	std	Z+5, r26	; 0x05
   1777c:	8e 01       	movw	r16, r28
   1777e:	0e 5e       	subi	r16, 0xEE	; 238
   17780:	1f 4f       	sbci	r17, 0xFF	; 255
   17782:	12 83       	std	Z+2, r17	; 0x02
   17784:	01 83       	std	Z+1, r16	; 0x01
   17786:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1778a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1778e:	85 ff       	sbrs	r24, 5
   17790:	0c c0       	rjmp	.+24     	; 0x177aa <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17792:	ed b7       	in	r30, 0x3d	; 61
   17794:	fe b7       	in	r31, 0x3e	; 62
   17796:	15 83       	std	Z+5, r17	; 0x05
   17798:	04 83       	std	Z+4, r16	; 0x04
   1779a:	84 e0       	ldi	r24, 0x04	; 4
   1779c:	9f e2       	ldi	r25, 0x2F	; 47
   1779e:	a0 e0       	ldi	r26, 0x00	; 0
   177a0:	81 83       	std	Z+1, r24	; 0x01
   177a2:	92 83       	std	Z+2, r25	; 0x02
   177a4:	a3 83       	std	Z+3, r26	; 0x03
   177a6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    plot.fp = fopen(ptr,"wb");
   177aa:	6c e0       	ldi	r22, 0x0C	; 12
   177ac:	79 e0       	ldi	r23, 0x09	; 9
   177ae:	c8 01       	movw	r24, r16
   177b0:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <fopen>
   177b4:	90 93 af 19 	sts	0x19AF, r25	; 0x8019af <plot+0xa>
   177b8:	80 93 ae 19 	sts	0x19AE, r24	; 0x8019ae <plot+0x9>
    if(plot.fp == NULL)
   177bc:	89 2b       	or	r24, r25
   177be:	b9 f4       	brne	.+46     	; 0x177ee <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   177c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177c4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   177c8:	81 72       	andi	r24, 0x21	; 33
   177ca:	99 27       	eor	r25, r25
   177cc:	89 2b       	or	r24, r25
   177ce:	11 f1       	breq	.+68     	; 0x17814 <printer_open+0x13c>
        {
            perror("open failed");
   177d0:	87 ea       	ldi	r24, 0xA7	; 167
   177d2:	9d e0       	ldi	r25, 0x0D	; 13
   177d4:	0e 94 be 76 	call	0xed7c	; 0xed7c <perror>
            printf("exiting...\n");
   177d8:	88 ef       	ldi	r24, 0xF8	; 248
   177da:	9e e2       	ldi	r25, 0x2E	; 46
   177dc:	a0 e0       	ldi	r26, 0x00	; 0
   177de:	ed b7       	in	r30, 0x3d	; 61
   177e0:	fe b7       	in	r31, 0x3e	; 62
   177e2:	81 83       	std	Z+1, r24	; 0x01
   177e4:	92 83       	std	Z+2, r25	; 0x02
   177e6:	a3 83       	std	Z+3, r26	; 0x03
   177e8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   177ec:	13 c0       	rjmp	.+38     	; 0x17814 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   177ee:	61 e0       	ldi	r22, 0x01	; 1
   177f0:	70 e0       	ldi	r23, 0x00	; 0
   177f2:	81 e0       	ldi	r24, 0x01	; 1
   177f4:	92 e0       	ldi	r25, 0x02	; 2
   177f6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   177fa:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <plot+0xc>
   177fe:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <plot+0xb>
    if(plot.buf == NULL)
   17802:	89 2b       	or	r24, r25
   17804:	09 f4       	brne	.+2      	; 0x17808 <printer_open+0x130>
        printer_close();
   17806:	10 df       	rcall	.-480    	; 0x17628 <printer_close>
    plot.size = 512;
   17808:	80 e0       	ldi	r24, 0x00	; 0
   1780a:	92 e0       	ldi	r25, 0x02	; 2
   1780c:	90 93 ac 19 	sts	0x19AC, r25	; 0x8019ac <plot+0x7>
   17810:	80 93 ab 19 	sts	0x19AB, r24	; 0x8019ab <plot+0x6>
}
   17814:	c3 5a       	subi	r28, 0xA3	; 163
   17816:	df 4f       	sbci	r29, 0xFF	; 255
   17818:	e6 e0       	ldi	r30, 0x06	; 6
   1781a:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

0001781e <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   1781e:	cf 93       	push	r28
   17820:	df 93       	push	r29
   17822:	ad b7       	in	r26, 0x3d	; 61
   17824:	be b7       	in	r27, 0x3e	; 62
   17826:	17 97       	sbiw	r26, 0x07	; 7
   17828:	0f b6       	in	r0, 0x3f	; 63
   1782a:	f8 94       	cli
   1782c:	be bf       	out	0x3e, r27	; 62
   1782e:	0f be       	out	0x3f, r0	; 63
   17830:	ad bf       	out	0x3d, r26	; 61
   17832:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17834:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17838:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1783c:	81 72       	andi	r24, 0x21	; 33
   1783e:	99 27       	eor	r25, r25
   17840:	89 2b       	or	r24, r25
   17842:	c1 f0       	breq	.+48     	; 0x17874 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17844:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   17848:	30 91 a6 19 	lds	r19, 0x19A6	; 0x8019a6 <plot+0x1>
   1784c:	20 91 a7 19 	lds	r18, 0x19A7	; 0x8019a7 <plot+0x2>
   17850:	90 91 a8 19 	lds	r25, 0x19A8	; 0x8019a8 <plot+0x3>
   17854:	81 11       	cpse	r24, r1
   17856:	0e c0       	rjmp	.+28     	; 0x17874 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17858:	ed b7       	in	r30, 0x3d	; 61
   1785a:	fe b7       	in	r31, 0x3e	; 62
   1785c:	84 83       	std	Z+4, r24	; 0x04
   1785e:	35 83       	std	Z+5, r19	; 0x05
   17860:	26 83       	std	Z+6, r18	; 0x06
   17862:	97 83       	std	Z+7, r25	; 0x07
   17864:	8d ea       	ldi	r24, 0xAD	; 173
   17866:	9e e2       	ldi	r25, 0x2E	; 46
   17868:	a0 e0       	ldi	r26, 0x00	; 0
   1786a:	81 83       	std	Z+1, r24	; 0x01
   1786c:	92 83       	std	Z+2, r25	; 0x02
   1786e:	a3 83       	std	Z+3, r26	; 0x03
   17870:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17874:	ce 01       	movw	r24, r28
   17876:	88 27       	eor	r24, r24
   17878:	97 7f       	andi	r25, 0xF7	; 247
   1787a:	89 2b       	or	r24, r25
   1787c:	41 f0       	breq	.+16     	; 0x1788e <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   1787e:	75 de       	rcall	.-790    	; 0x1756a <receive_plot_flush>
   17880:	89 2b       	or	r24, r25
   17882:	09 f4       	brne	.+2      	; 0x17886 <printer_buffer+0x68>
   17884:	3f c0       	rjmp	.+126    	; 0x17904 <printer_buffer+0xe6>
            plot.error = 1;
   17886:	81 e0       	ldi	r24, 0x01	; 1
   17888:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>
   1788c:	3b c0       	rjmp	.+118    	; 0x17904 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   1788e:	20 91 b0 19 	lds	r18, 0x19B0	; 0x8019b0 <plot+0xb>
   17892:	30 91 b1 19 	lds	r19, 0x19B1	; 0x8019b1 <plot+0xc>
   17896:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x4>
   1789a:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x5>
   1789e:	ac 01       	movw	r20, r24
   178a0:	4f 5f       	subi	r20, 0xFF	; 255
   178a2:	5f 4f       	sbci	r21, 0xFF	; 255
   178a4:	50 93 aa 19 	sts	0x19AA, r21	; 0x8019aa <plot+0x5>
   178a8:	40 93 a9 19 	sts	0x19A9, r20	; 0x8019a9 <plot+0x4>
   178ac:	f9 01       	movw	r30, r18
   178ae:	e8 0f       	add	r30, r24
   178b0:	f9 1f       	adc	r31, r25
   178b2:	c0 83       	st	Z, r28
        plot.count++;
   178b4:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot>
   178b8:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0x1>
   178bc:	a0 91 a7 19 	lds	r26, 0x19A7	; 0x8019a7 <plot+0x2>
   178c0:	b0 91 a8 19 	lds	r27, 0x19A8	; 0x8019a8 <plot+0x3>
   178c4:	01 96       	adiw	r24, 0x01	; 1
   178c6:	a1 1d       	adc	r26, r1
   178c8:	b1 1d       	adc	r27, r1
   178ca:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot>
   178ce:	90 93 a6 19 	sts	0x19A6, r25	; 0x8019a6 <plot+0x1>
   178d2:	a0 93 a7 19 	sts	0x19A7, r26	; 0x8019a7 <plot+0x2>
   178d6:	b0 93 a8 19 	sts	0x19A8, r27	; 0x8019a8 <plot+0x3>

        if(plot.ind >= plot.size)
   178da:	20 91 a9 19 	lds	r18, 0x19A9	; 0x8019a9 <plot+0x4>
   178de:	30 91 aa 19 	lds	r19, 0x19AA	; 0x8019aa <plot+0x5>
   178e2:	80 91 ab 19 	lds	r24, 0x19AB	; 0x8019ab <plot+0x6>
   178e6:	90 91 ac 19 	lds	r25, 0x19AC	; 0x8019ac <plot+0x7>
   178ea:	28 17       	cp	r18, r24
   178ec:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   178ee:	54 f0       	brlt	.+20     	; 0x17904 <printer_buffer+0xe6>
   178f0:	3c de       	rcall	.-904    	; 0x1756a <receive_plot_flush>
   178f2:	97 ff       	sbrs	r25, 7
   178f4:	03 c0       	rjmp	.+6      	; 0x178fc <printer_buffer+0xde>
                plot.error = 1;
   178f6:	81 e0       	ldi	r24, 0x01	; 1
   178f8:	80 93 ad 19 	sts	0x19AD, r24	; 0x8019ad <plot+0x8>
            plot.ind  = 0;
   178fc:	10 92 aa 19 	sts	0x19AA, r1	; 0x8019aa <plot+0x5>
   17900:	10 92 a9 19 	sts	0x19A9, r1	; 0x8019a9 <plot+0x4>
        }
    }
}
   17904:	cd b7       	in	r28, 0x3d	; 61
   17906:	de b7       	in	r29, 0x3e	; 62
   17908:	27 96       	adiw	r28, 0x07	; 7
   1790a:	e2 e0       	ldi	r30, 0x02	; 2
   1790c:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00017910 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17910:	cf 93       	push	r28
   17912:	00 d0       	rcall	.+0      	; 0x17914 <PRINTER_COMMANDS+0x4>
   17914:	00 d0       	rcall	.+0      	; 0x17916 <PRINTER_COMMANDS+0x6>
   17916:	1f 92       	push	r1
   17918:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   1791a:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <listening>
   1791e:	90 e0       	ldi	r25, 0x00	; 0
   17920:	0e 94 25 8b 	call	0x1164a	; 0x1164a <PRINTER_is_MLA>
   17924:	89 2b       	or	r24, r25
   17926:	69 f0       	breq	.+26     	; 0x17942 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17928:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1792c:	85 ff       	sbrs	r24, 5
   1792e:	22 c0       	rjmp	.+68     	; 0x17974 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17930:	8c 2f       	mov	r24, r28
   17932:	90 e0       	ldi	r25, 0x00	; 0
   17934:	ed b7       	in	r30, 0x3d	; 61
   17936:	fe b7       	in	r31, 0x3e	; 62
   17938:	95 83       	std	Z+5, r25	; 0x05
   1793a:	84 83       	std	Z+4, r24	; 0x04
   1793c:	81 e9       	ldi	r24, 0x91	; 145
   1793e:	9e e2       	ldi	r25, 0x2E	; 46
   17940:	13 c0       	rjmp	.+38     	; 0x17968 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17942:	80 91 f6 1e 	lds	r24, 0x1EF6	; 0x801ef6 <talking>
   17946:	90 e0       	ldi	r25, 0x00	; 0
   17948:	0e 94 36 8b 	call	0x1166c	; 0x1166c <PRINTER_is_MTA>
   1794c:	89 2b       	or	r24, r25
   1794e:	91 f0       	breq	.+36     	; 0x17974 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17950:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17954:	85 ff       	sbrs	r24, 5
   17956:	0e c0       	rjmp	.+28     	; 0x17974 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17958:	8c 2f       	mov	r24, r28
   1795a:	90 e0       	ldi	r25, 0x00	; 0
   1795c:	ed b7       	in	r30, 0x3d	; 61
   1795e:	fe b7       	in	r31, 0x3e	; 62
   17960:	95 83       	std	Z+5, r25	; 0x05
   17962:	84 83       	std	Z+4, r24	; 0x04
   17964:	87 e7       	ldi	r24, 0x77	; 119
   17966:	9e e2       	ldi	r25, 0x2E	; 46
   17968:	a0 e0       	ldi	r26, 0x00	; 0
   1796a:	81 83       	std	Z+1, r24	; 0x01
   1796c:	92 83       	std	Z+2, r25	; 0x02
   1796e:	a3 83       	std	Z+3, r26	; 0x03
   17970:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17974:	80 e0       	ldi	r24, 0x00	; 0
   17976:	90 e0       	ldi	r25, 0x00	; 0
   17978:	0f 90       	pop	r0
   1797a:	0f 90       	pop	r0
   1797c:	0f 90       	pop	r0
   1797e:	0f 90       	pop	r0
   17980:	0f 90       	pop	r0
   17982:	cf 91       	pop	r28
   17984:	08 95       	ret

00017986 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17986:	0f 93       	push	r16
   17988:	1f 93       	push	r17
   1798a:	da 01       	movw	r26, r20
   1798c:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   1798e:	b7 fd       	sbrc	r27, 7
   17990:	0b c0       	rjmp	.+22     	; 0x179a8 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17992:	fd 01       	movw	r30, r26
   17994:	e6 0f       	add	r30, r22
   17996:	f7 1f       	adc	r31, r23
   17998:	e8 0f       	add	r30, r24
   1799a:	f9 1f       	adc	r31, r25
   1799c:	00 83       	st	Z, r16
        val >>= 8;
   1799e:	01 2f       	mov	r16, r17
   179a0:	12 2f       	mov	r17, r18
   179a2:	23 2f       	mov	r18, r19
   179a4:	33 27       	eor	r19, r19
   179a6:	f2 cf       	rjmp	.-28     	; 0x1798c <V2B_MSB+0x6>
    }
}
   179a8:	1f 91       	pop	r17
   179aa:	0f 91       	pop	r16
   179ac:	08 95       	ret

000179ae <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   179ae:	0f 93       	push	r16
   179b0:	1f 93       	push	r17
   179b2:	fc 01       	movw	r30, r24
   179b4:	e6 0f       	add	r30, r22
   179b6:	f7 1f       	adc	r31, r23
   179b8:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   179ba:	cf 01       	movw	r24, r30
   179bc:	86 1b       	sub	r24, r22
   179be:	97 0b       	sbc	r25, r23
   179c0:	84 17       	cp	r24, r20
   179c2:	95 07       	cpc	r25, r21
   179c4:	34 f4       	brge	.+12     	; 0x179d2 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   179c6:	01 93       	st	Z+, r16
        val >>= 8;
   179c8:	01 2f       	mov	r16, r17
   179ca:	12 2f       	mov	r17, r18
   179cc:	23 2f       	mov	r18, r19
   179ce:	33 27       	eor	r19, r19
   179d0:	f4 cf       	rjmp	.-24     	; 0x179ba <V2B_LSB+0xc>
    }
}
   179d2:	1f 91       	pop	r17
   179d4:	0f 91       	pop	r16
   179d6:	08 95       	ret

000179d8 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   179d8:	cf 92       	push	r12
   179da:	df 92       	push	r13
   179dc:	ef 92       	push	r14
   179de:	ff 92       	push	r15
   179e0:	fc 01       	movw	r30, r24
   179e2:	e6 0f       	add	r30, r22
   179e4:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   179e6:	60 e0       	ldi	r22, 0x00	; 0
   179e8:	70 e0       	ldi	r23, 0x00	; 0
   179ea:	cb 01       	movw	r24, r22
   179ec:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   179ee:	9f 01       	movw	r18, r30
   179f0:	2a 1b       	sub	r18, r26
   179f2:	3b 0b       	sbc	r19, r27
   179f4:	24 17       	cp	r18, r20
   179f6:	35 07       	cpc	r19, r21
   179f8:	4c f4       	brge	.+18     	; 0x17a0c <B2V_MSB+0x34>
    {
        val <<= 8;
   179fa:	cc 24       	eor	r12, r12
   179fc:	d6 2e       	mov	r13, r22
   179fe:	e7 2e       	mov	r14, r23
   17a00:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17a02:	21 91       	ld	r18, Z+
   17a04:	c7 01       	movw	r24, r14
   17a06:	b6 01       	movw	r22, r12
   17a08:	62 2b       	or	r22, r18
   17a0a:	f1 cf       	rjmp	.-30     	; 0x179ee <B2V_MSB+0x16>
    }
    return(val);
}
   17a0c:	ff 90       	pop	r15
   17a0e:	ef 90       	pop	r14
   17a10:	df 90       	pop	r13
   17a12:	cf 90       	pop	r12
   17a14:	08 95       	ret

00017a16 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17a16:	cf 92       	push	r12
   17a18:	df 92       	push	r13
   17a1a:	ef 92       	push	r14
   17a1c:	ff 92       	push	r15
   17a1e:	9c 01       	movw	r18, r24
   17a20:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17a22:	60 e0       	ldi	r22, 0x00	; 0
   17a24:	70 e0       	ldi	r23, 0x00	; 0
   17a26:	cb 01       	movw	r24, r22
   17a28:	41 50       	subi	r20, 0x01	; 1
   17a2a:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17a2c:	57 fd       	sbrc	r21, 7
   17a2e:	0e c0       	rjmp	.+28     	; 0x17a4c <B2V_LSB+0x36>
    {
        val <<= 8;
   17a30:	cc 24       	eor	r12, r12
   17a32:	d6 2e       	mov	r13, r22
   17a34:	e7 2e       	mov	r14, r23
   17a36:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17a38:	fa 01       	movw	r30, r20
   17a3a:	ea 0f       	add	r30, r26
   17a3c:	fb 1f       	adc	r31, r27
   17a3e:	e2 0f       	add	r30, r18
   17a40:	f3 1f       	adc	r31, r19
   17a42:	e0 81       	ld	r30, Z
   17a44:	c7 01       	movw	r24, r14
   17a46:	b6 01       	movw	r22, r12
   17a48:	6e 2b       	or	r22, r30
   17a4a:	ee cf       	rjmp	.-36     	; 0x17a28 <B2V_LSB+0x12>
    }
    return(val);
}
   17a4c:	ff 90       	pop	r15
   17a4e:	ef 90       	pop	r14
   17a50:	df 90       	pop	r13
   17a52:	cf 90       	pop	r12
   17a54:	08 95       	ret

00017a56 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17a56:	cf 93       	push	r28
   17a58:	df 93       	push	r29
   17a5a:	00 d0       	rcall	.+0      	; 0x17a5c <lif_help+0x6>
   17a5c:	1f 92       	push	r1
   17a5e:	ec 01       	movw	r28, r24
   17a60:	87 e7       	ldi	r24, 0x77	; 119
   17a62:	93 e4       	ldi	r25, 0x43	; 67
   17a64:	a0 e0       	ldi	r26, 0x00	; 0
   17a66:	ed b7       	in	r30, 0x3d	; 61
   17a68:	fe b7       	in	r31, 0x3e	; 62
   17a6a:	81 83       	std	Z+1, r24	; 0x01
   17a6c:	92 83       	std	Z+2, r25	; 0x02
   17a6e:	a3 83       	std	Z+3, r26	; 0x03
   17a70:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17a74:	cd 2b       	or	r28, r29
   17a76:	51 f0       	breq	.+20     	; 0x17a8c <lif_help+0x36>
   17a78:	83 eb       	ldi	r24, 0xB3	; 179
   17a7a:	91 e4       	ldi	r25, 0x41	; 65
   17a7c:	a0 e0       	ldi	r26, 0x00	; 0
   17a7e:	ed b7       	in	r30, 0x3d	; 61
   17a80:	fe b7       	in	r31, 0x3e	; 62
   17a82:	81 83       	std	Z+1, r24	; 0x01
   17a84:	92 83       	std	Z+2, r25	; 0x02
   17a86:	a3 83       	std	Z+3, r26	; 0x03
   17a88:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17a8c:	cd b7       	in	r28, 0x3d	; 61
   17a8e:	de b7       	in	r29, 0x3e	; 62
   17a90:	23 96       	adiw	r28, 0x03	; 3
   17a92:	e2 e0       	ldi	r30, 0x02	; 2
   17a94:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00017a98 <lif_calloc>:
   17a98:	cf 92       	push	r12
   17a9a:	df 92       	push	r13
   17a9c:	ef 92       	push	r14
   17a9e:	ff 92       	push	r15
   17aa0:	cf 93       	push	r28
   17aa2:	df 93       	push	r29
   17aa4:	ad b7       	in	r26, 0x3d	; 61
   17aa6:	be b7       	in	r27, 0x3e	; 62
   17aa8:	17 97       	sbiw	r26, 0x07	; 7
   17aaa:	0f b6       	in	r0, 0x3f	; 63
   17aac:	f8 94       	cli
   17aae:	be bf       	out	0x3e, r27	; 62
   17ab0:	0f be       	out	0x3f, r0	; 63
   17ab2:	ad bf       	out	0x3d, r26	; 61
   17ab4:	6b 01       	movw	r12, r22
   17ab6:	7c 01       	movw	r14, r24
   17ab8:	61 e0       	ldi	r22, 0x01	; 1
   17aba:	70 e0       	ldi	r23, 0x00	; 0
   17abc:	c6 01       	movw	r24, r12
   17abe:	0e 94 00 26 	call	0x4c00	; 0x4c00 <safecalloc>
   17ac2:	ec 01       	movw	r28, r24
   17ac4:	89 2b       	or	r24, r25
   17ac6:	71 f4       	brne	.+28     	; 0x17ae4 <lif_calloc+0x4c>
   17ac8:	ed b7       	in	r30, 0x3d	; 61
   17aca:	fe b7       	in	r31, 0x3e	; 62
   17acc:	c4 82       	std	Z+4, r12	; 0x04
   17ace:	d5 82       	std	Z+5, r13	; 0x05
   17ad0:	e6 82       	std	Z+6, r14	; 0x06
   17ad2:	f7 82       	std	Z+7, r15	; 0x07
   17ad4:	87 e4       	ldi	r24, 0x47	; 71
   17ad6:	91 e4       	ldi	r25, 0x41	; 65
   17ad8:	a0 e0       	ldi	r26, 0x00	; 0
   17ada:	81 83       	std	Z+1, r24	; 0x01
   17adc:	92 83       	std	Z+2, r25	; 0x02
   17ade:	a3 83       	std	Z+3, r26	; 0x03
   17ae0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17ae4:	ce 01       	movw	r24, r28
   17ae6:	ad b7       	in	r26, 0x3d	; 61
   17ae8:	be b7       	in	r27, 0x3e	; 62
   17aea:	17 96       	adiw	r26, 0x07	; 7
   17aec:	0f b6       	in	r0, 0x3f	; 63
   17aee:	f8 94       	cli
   17af0:	be bf       	out	0x3e, r27	; 62
   17af2:	0f be       	out	0x3f, r0	; 63
   17af4:	ad bf       	out	0x3d, r26	; 61
   17af6:	df 91       	pop	r29
   17af8:	cf 91       	pop	r28
   17afa:	ff 90       	pop	r15
   17afc:	ef 90       	pop	r14
   17afe:	df 90       	pop	r13
   17b00:	cf 90       	pop	r12
   17b02:	08 95       	ret

00017b04 <lif_free>:
   17b04:	00 d0       	rcall	.+0      	; 0x17b06 <lif_free+0x2>
   17b06:	1f 92       	push	r1
   17b08:	00 97       	sbiw	r24, 0x00	; 0
   17b0a:	59 f4       	brne	.+22     	; 0x17b22 <lif_free+0x1e>
   17b0c:	8f e2       	ldi	r24, 0x2F	; 47
   17b0e:	91 e4       	ldi	r25, 0x41	; 65
   17b10:	a0 e0       	ldi	r26, 0x00	; 0
   17b12:	ed b7       	in	r30, 0x3d	; 61
   17b14:	fe b7       	in	r31, 0x3e	; 62
   17b16:	81 83       	std	Z+1, r24	; 0x01
   17b18:	92 83       	std	Z+2, r25	; 0x02
   17b1a:	a3 83       	std	Z+3, r26	; 0x03
   17b1c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17b20:	02 c0       	rjmp	.+4      	; 0x17b26 <lif_free+0x22>
   17b22:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <safefree>
   17b26:	0f 90       	pop	r0
   17b28:	0f 90       	pop	r0
   17b2a:	0f 90       	pop	r0
   17b2c:	08 95       	ret

00017b2e <lif_stralloc>:
   17b2e:	0f 93       	push	r16
   17b30:	1f 93       	push	r17
   17b32:	cf 93       	push	r28
   17b34:	df 93       	push	r29
   17b36:	ec 01       	movw	r28, r24
   17b38:	fc 01       	movw	r30, r24
   17b3a:	01 90       	ld	r0, Z+
   17b3c:	00 20       	and	r0, r0
   17b3e:	e9 f7       	brne	.-6      	; 0x17b3a <lif_stralloc+0xc>
   17b40:	bf 01       	movw	r22, r30
   17b42:	68 1b       	sub	r22, r24
   17b44:	79 0b       	sbc	r23, r25
   17b46:	6d 5f       	subi	r22, 0xFD	; 253
   17b48:	7f 4f       	sbci	r23, 0xFF	; 255
   17b4a:	07 2e       	mov	r0, r23
   17b4c:	00 0c       	add	r0, r0
   17b4e:	88 0b       	sbc	r24, r24
   17b50:	99 0b       	sbc	r25, r25
   17b52:	a2 df       	rcall	.-188    	; 0x17a98 <lif_calloc>
   17b54:	8c 01       	movw	r16, r24
   17b56:	00 97       	sbiw	r24, 0x00	; 0
   17b58:	19 f0       	breq	.+6      	; 0x17b60 <lif_stralloc+0x32>
   17b5a:	be 01       	movw	r22, r28
   17b5c:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <strcpy>
   17b60:	c8 01       	movw	r24, r16
   17b62:	df 91       	pop	r29
   17b64:	cf 91       	pop	r28
   17b66:	1f 91       	pop	r17
   17b68:	0f 91       	pop	r16
   17b6a:	08 95       	ret

00017b6c <lif_open>:
   17b6c:	ef 92       	push	r14
   17b6e:	ff 92       	push	r15
   17b70:	0f 93       	push	r16
   17b72:	1f 93       	push	r17
   17b74:	cf 93       	push	r28
   17b76:	df 93       	push	r29
   17b78:	ad b7       	in	r26, 0x3d	; 61
   17b7a:	be b7       	in	r27, 0x3e	; 62
   17b7c:	17 97       	sbiw	r26, 0x07	; 7
   17b7e:	0f b6       	in	r0, 0x3f	; 63
   17b80:	f8 94       	cli
   17b82:	be bf       	out	0x3e, r27	; 62
   17b84:	0f be       	out	0x3f, r0	; 63
   17b86:	ad bf       	out	0x3d, r26	; 61
   17b88:	8c 01       	movw	r16, r24
   17b8a:	7b 01       	movw	r14, r22
   17b8c:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <fopen>
   17b90:	ec 01       	movw	r28, r24
   17b92:	89 2b       	or	r24, r25
   17b94:	71 f4       	brne	.+28     	; 0x17bb2 <lif_open+0x46>
   17b96:	ed b7       	in	r30, 0x3d	; 61
   17b98:	fe b7       	in	r31, 0x3e	; 62
   17b9a:	f7 82       	std	Z+7, r15	; 0x07
   17b9c:	e6 82       	std	Z+6, r14	; 0x06
   17b9e:	15 83       	std	Z+5, r17	; 0x05
   17ba0:	04 83       	std	Z+4, r16	; 0x04
   17ba2:	8a e0       	ldi	r24, 0x0A	; 10
   17ba4:	91 e4       	ldi	r25, 0x41	; 65
   17ba6:	a0 e0       	ldi	r26, 0x00	; 0
   17ba8:	81 83       	std	Z+1, r24	; 0x01
   17baa:	92 83       	std	Z+2, r25	; 0x02
   17bac:	a3 83       	std	Z+3, r26	; 0x03
   17bae:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17bb2:	ce 01       	movw	r24, r28
   17bb4:	cd b7       	in	r28, 0x3d	; 61
   17bb6:	de b7       	in	r29, 0x3e	; 62
   17bb8:	27 96       	adiw	r28, 0x07	; 7
   17bba:	e6 e0       	ldi	r30, 0x06	; 6
   17bbc:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00017bc0 <lif_stat>:
   17bc0:	0f 93       	push	r16
   17bc2:	1f 93       	push	r17
   17bc4:	cf 93       	push	r28
   17bc6:	df 93       	push	r29
   17bc8:	00 d0       	rcall	.+0      	; 0x17bca <lif_stat+0xa>
   17bca:	00 d0       	rcall	.+0      	; 0x17bcc <lif_stat+0xc>
   17bcc:	1f 92       	push	r1
   17bce:	8c 01       	movw	r16, r24
   17bd0:	d6 2f       	mov	r29, r22
   17bd2:	c7 2f       	mov	r28, r23
   17bd4:	0e 94 92 77 	call	0xef24	; 0xef24 <stat>
   17bd8:	97 ff       	sbrs	r25, 7
   17bda:	0f c0       	rjmp	.+30     	; 0x17bfa <lif_stat+0x3a>
   17bdc:	ed b7       	in	r30, 0x3d	; 61
   17bde:	fe b7       	in	r31, 0x3e	; 62
   17be0:	15 83       	std	Z+5, r17	; 0x05
   17be2:	04 83       	std	Z+4, r16	; 0x04
   17be4:	81 ef       	ldi	r24, 0xF1	; 241
   17be6:	90 e4       	ldi	r25, 0x40	; 64
   17be8:	a0 e0       	ldi	r26, 0x00	; 0
   17bea:	81 83       	std	Z+1, r24	; 0x01
   17bec:	92 83       	std	Z+2, r25	; 0x02
   17bee:	a3 83       	std	Z+3, r26	; 0x03
   17bf0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17bf4:	80 e0       	ldi	r24, 0x00	; 0
   17bf6:	90 e0       	ldi	r25, 0x00	; 0
   17bf8:	02 c0       	rjmp	.+4      	; 0x17bfe <lif_stat+0x3e>
   17bfa:	8d 2f       	mov	r24, r29
   17bfc:	9c 2f       	mov	r25, r28
   17bfe:	cd b7       	in	r28, 0x3d	; 61
   17c00:	de b7       	in	r29, 0x3e	; 62
   17c02:	25 96       	adiw	r28, 0x05	; 5
   17c04:	e4 e0       	ldi	r30, 0x04	; 4
   17c06:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00017c0a <lif_seek_msg>:
   17c0a:	a9 e0       	ldi	r26, 0x09	; 9
   17c0c:	b0 e0       	ldi	r27, 0x00	; 0
   17c0e:	eb e0       	ldi	r30, 0x0B	; 11
   17c10:	fe eb       	ldi	r31, 0xBE	; 190
   17c12:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
   17c16:	ec 01       	movw	r28, r24
   17c18:	6a 01       	movw	r12, r20
   17c1a:	7b 01       	movw	r14, r22
   17c1c:	89 01       	movw	r16, r18
   17c1e:	0e 94 cc 78 	call	0xf198	; 0xf198 <ftell>
   17c22:	6c 15       	cp	r22, r12
   17c24:	7d 05       	cpc	r23, r13
   17c26:	8e 05       	cpc	r24, r14
   17c28:	9f 05       	cpc	r25, r15
   17c2a:	19 f4       	brne	.+6      	; 0x17c32 <lif_seek_msg+0x28>
   17c2c:	81 e0       	ldi	r24, 0x01	; 1
   17c2e:	90 e0       	ldi	r25, 0x00	; 0
   17c30:	1b c0       	rjmp	.+54     	; 0x17c68 <lif_seek_msg+0x5e>
   17c32:	20 e0       	ldi	r18, 0x00	; 0
   17c34:	30 e0       	ldi	r19, 0x00	; 0
   17c36:	b7 01       	movw	r22, r14
   17c38:	a6 01       	movw	r20, r12
   17c3a:	ce 01       	movw	r24, r28
   17c3c:	0e 94 4f 79 	call	0xf29e	; 0xf29e <fseek>
   17c40:	97 ff       	sbrs	r25, 7
   17c42:	f4 cf       	rjmp	.-24     	; 0x17c2c <lif_seek_msg+0x22>
   17c44:	ed b7       	in	r30, 0x3d	; 61
   17c46:	fe b7       	in	r31, 0x3e	; 62
   17c48:	c6 82       	std	Z+6, r12	; 0x06
   17c4a:	d7 82       	std	Z+7, r13	; 0x07
   17c4c:	e0 86       	std	Z+8, r14	; 0x08
   17c4e:	f1 86       	std	Z+9, r15	; 0x09
   17c50:	15 83       	std	Z+5, r17	; 0x05
   17c52:	04 83       	std	Z+4, r16	; 0x04
   17c54:	80 ed       	ldi	r24, 0xD0	; 208
   17c56:	90 e4       	ldi	r25, 0x40	; 64
   17c58:	a0 e0       	ldi	r26, 0x00	; 0
   17c5a:	81 83       	std	Z+1, r24	; 0x01
   17c5c:	92 83       	std	Z+2, r25	; 0x02
   17c5e:	a3 83       	std	Z+3, r26	; 0x03
   17c60:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17c64:	80 e0       	ldi	r24, 0x00	; 0
   17c66:	90 e0       	ldi	r25, 0x00	; 0
   17c68:	cd b7       	in	r28, 0x3d	; 61
   17c6a:	de b7       	in	r29, 0x3e	; 62
   17c6c:	29 96       	adiw	r28, 0x09	; 9
   17c6e:	e8 e0       	ldi	r30, 0x08	; 8
   17c70:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

00017c74 <lif_read>:
   17c74:	af e0       	ldi	r26, 0x0F	; 15
   17c76:	b0 e0       	ldi	r27, 0x00	; 0
   17c78:	e0 e4       	ldi	r30, 0x40	; 64
   17c7a:	fe eb       	ldi	r31, 0xBE	; 190
   17c7c:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
   17c80:	ec 01       	movw	r28, r24
   17c82:	7b 01       	movw	r14, r22
   17c84:	49 01       	movw	r8, r18
   17c86:	5a 01       	movw	r10, r20
   17c88:	28 81       	ld	r18, Y
   17c8a:	39 81       	ldd	r19, Y+1	; 0x01
   17c8c:	b5 01       	movw	r22, r10
   17c8e:	a4 01       	movw	r20, r8
   17c90:	8a 81       	ldd	r24, Y+2	; 0x02
   17c92:	9b 81       	ldd	r25, Y+3	; 0x03
   17c94:	ba df       	rcall	.-140    	; 0x17c0a <lif_seek_msg>
   17c96:	89 2b       	or	r24, r25
   17c98:	a1 f1       	breq	.+104    	; 0x17d02 <lif_read+0x8e>
   17c9a:	2a 81       	ldd	r18, Y+2	; 0x02
   17c9c:	3b 81       	ldd	r19, Y+3	; 0x03
   17c9e:	a8 01       	movw	r20, r16
   17ca0:	61 e0       	ldi	r22, 0x01	; 1
   17ca2:	70 e0       	ldi	r23, 0x00	; 0
   17ca4:	c7 01       	movw	r24, r14
   17ca6:	0e 94 e3 79 	call	0xf3c6	; 0xf3c6 <fread>
   17caa:	6c 01       	movw	r12, r24
   17cac:	e1 2c       	mov	r14, r1
   17cae:	f1 2c       	mov	r15, r1
   17cb0:	b8 01       	movw	r22, r16
   17cb2:	01 2e       	mov	r0, r17
   17cb4:	00 0c       	add	r0, r0
   17cb6:	88 0b       	sbc	r24, r24
   17cb8:	99 0b       	sbc	r25, r25
   17cba:	c6 16       	cp	r12, r22
   17cbc:	d7 06       	cpc	r13, r23
   17cbe:	e8 06       	cpc	r14, r24
   17cc0:	f9 06       	cpc	r15, r25
   17cc2:	29 f1       	breq	.+74     	; 0x17d0e <lif_read+0x9a>
   17cc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17cc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17ccc:	92 ff       	sbrs	r25, 2
   17cce:	1d c0       	rjmp	.+58     	; 0x17d0a <lif_read+0x96>
   17cd0:	ed b7       	in	r30, 0x3d	; 61
   17cd2:	fe b7       	in	r31, 0x3e	; 62
   17cd4:	17 87       	std	Z+15, r17	; 0x0f
   17cd6:	06 87       	std	Z+14, r16	; 0x0e
   17cd8:	c2 86       	std	Z+10, r12	; 0x0a
   17cda:	d3 86       	std	Z+11, r13	; 0x0b
   17cdc:	e4 86       	std	Z+12, r14	; 0x0c
   17cde:	f5 86       	std	Z+13, r15	; 0x0d
   17ce0:	86 82       	std	Z+6, r8	; 0x06
   17ce2:	97 82       	std	Z+7, r9	; 0x07
   17ce4:	a0 86       	std	Z+8, r10	; 0x08
   17ce6:	b1 86       	std	Z+9, r11	; 0x09
   17ce8:	88 81       	ld	r24, Y
   17cea:	99 81       	ldd	r25, Y+1	; 0x01
   17cec:	95 83       	std	Z+5, r25	; 0x05
   17cee:	84 83       	std	Z+4, r24	; 0x04
   17cf0:	84 e9       	ldi	r24, 0x94	; 148
   17cf2:	90 e4       	ldi	r25, 0x40	; 64
   17cf4:	a0 e0       	ldi	r26, 0x00	; 0
   17cf6:	81 83       	std	Z+1, r24	; 0x01
   17cf8:	92 83       	std	Z+2, r25	; 0x02
   17cfa:	a3 83       	std	Z+3, r26	; 0x03
   17cfc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17d00:	04 c0       	rjmp	.+8      	; 0x17d0a <lif_read+0x96>
   17d02:	60 e0       	ldi	r22, 0x00	; 0
   17d04:	70 e0       	ldi	r23, 0x00	; 0
   17d06:	cb 01       	movw	r24, r22
   17d08:	02 c0       	rjmp	.+4      	; 0x17d0e <lif_read+0x9a>
   17d0a:	c7 01       	movw	r24, r14
   17d0c:	b6 01       	movw	r22, r12
   17d0e:	cd b7       	in	r28, 0x3d	; 61
   17d10:	de b7       	in	r29, 0x3e	; 62
   17d12:	2f 96       	adiw	r28, 0x0f	; 15
   17d14:	ec e0       	ldi	r30, 0x0C	; 12
   17d16:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

00017d1a <lif_write>:
   17d1a:	8f 92       	push	r8
   17d1c:	9f 92       	push	r9
   17d1e:	af 92       	push	r10
   17d20:	bf 92       	push	r11
   17d22:	ef 92       	push	r14
   17d24:	ff 92       	push	r15
   17d26:	0f 93       	push	r16
   17d28:	1f 93       	push	r17
   17d2a:	cf 93       	push	r28
   17d2c:	df 93       	push	r29
   17d2e:	ad b7       	in	r26, 0x3d	; 61
   17d30:	be b7       	in	r27, 0x3e	; 62
   17d32:	1d 97       	sbiw	r26, 0x0d	; 13
   17d34:	0f b6       	in	r0, 0x3f	; 63
   17d36:	f8 94       	cli
   17d38:	be bf       	out	0x3e, r27	; 62
   17d3a:	0f be       	out	0x3f, r0	; 63
   17d3c:	ad bf       	out	0x3d, r26	; 61
   17d3e:	7c 01       	movw	r14, r24
   17d40:	eb 01       	movw	r28, r22
   17d42:	49 01       	movw	r8, r18
   17d44:	5a 01       	movw	r10, r20
   17d46:	fc 01       	movw	r30, r24
   17d48:	20 81       	ld	r18, Z
   17d4a:	31 81       	ldd	r19, Z+1	; 0x01
   17d4c:	b5 01       	movw	r22, r10
   17d4e:	a4 01       	movw	r20, r8
   17d50:	82 81       	ldd	r24, Z+2	; 0x02
   17d52:	93 81       	ldd	r25, Z+3	; 0x03
   17d54:	5a df       	rcall	.-332    	; 0x17c0a <lif_seek_msg>
   17d56:	00 97       	sbiw	r24, 0x00	; 0
   17d58:	81 f1       	breq	.+96     	; 0x17dba <lif_write+0xa0>
   17d5a:	f7 01       	movw	r30, r14
   17d5c:	22 81       	ldd	r18, Z+2	; 0x02
   17d5e:	33 81       	ldd	r19, Z+3	; 0x03
   17d60:	a8 01       	movw	r20, r16
   17d62:	61 e0       	ldi	r22, 0x01	; 1
   17d64:	70 e0       	ldi	r23, 0x00	; 0
   17d66:	ce 01       	movw	r24, r28
   17d68:	0e 94 b5 7a 	call	0xf56a	; 0xf56a <fwrite>
   17d6c:	ec 01       	movw	r28, r24
   17d6e:	08 17       	cp	r16, r24
   17d70:	19 07       	cpc	r17, r25
   17d72:	01 f1       	breq	.+64     	; 0x17db4 <lif_write+0x9a>
   17d74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d78:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d7c:	92 ff       	sbrs	r25, 2
   17d7e:	1c c0       	rjmp	.+56     	; 0x17db8 <lif_write+0x9e>
   17d80:	ed b7       	in	r30, 0x3d	; 61
   17d82:	fe b7       	in	r31, 0x3e	; 62
   17d84:	15 87       	std	Z+13, r17	; 0x0d
   17d86:	04 87       	std	Z+12, r16	; 0x0c
   17d88:	d3 87       	std	Z+11, r29	; 0x0b
   17d8a:	c2 87       	std	Z+10, r28	; 0x0a
   17d8c:	86 82       	std	Z+6, r8	; 0x06
   17d8e:	97 82       	std	Z+7, r9	; 0x07
   17d90:	a0 86       	std	Z+8, r10	; 0x08
   17d92:	b1 86       	std	Z+9, r11	; 0x09
   17d94:	f7 01       	movw	r30, r14
   17d96:	80 81       	ld	r24, Z
   17d98:	91 81       	ldd	r25, Z+1	; 0x01
   17d9a:	ed b7       	in	r30, 0x3d	; 61
   17d9c:	fe b7       	in	r31, 0x3e	; 62
   17d9e:	95 83       	std	Z+5, r25	; 0x05
   17da0:	84 83       	std	Z+4, r24	; 0x04
   17da2:	87 e5       	ldi	r24, 0x57	; 87
   17da4:	90 e4       	ldi	r25, 0x40	; 64
   17da6:	a0 e0       	ldi	r26, 0x00	; 0
   17da8:	81 83       	std	Z+1, r24	; 0x01
   17daa:	92 83       	std	Z+2, r25	; 0x02
   17dac:	a3 83       	std	Z+3, r26	; 0x03
   17dae:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   17db2:	02 c0       	rjmp	.+4      	; 0x17db8 <lif_write+0x9e>
   17db4:	c8 01       	movw	r24, r16
   17db6:	01 c0       	rjmp	.+2      	; 0x17dba <lif_write+0xa0>
   17db8:	ce 01       	movw	r24, r28
   17dba:	ad b7       	in	r26, 0x3d	; 61
   17dbc:	be b7       	in	r27, 0x3e	; 62
   17dbe:	1d 96       	adiw	r26, 0x0d	; 13
   17dc0:	0f b6       	in	r0, 0x3f	; 63
   17dc2:	f8 94       	cli
   17dc4:	be bf       	out	0x3e, r27	; 62
   17dc6:	0f be       	out	0x3f, r0	; 63
   17dc8:	ad bf       	out	0x3d, r26	; 61
   17dca:	df 91       	pop	r29
   17dcc:	cf 91       	pop	r28
   17dce:	1f 91       	pop	r17
   17dd0:	0f 91       	pop	r16
   17dd2:	ff 90       	pop	r15
   17dd4:	ef 90       	pop	r14
   17dd6:	bf 90       	pop	r11
   17dd8:	af 90       	pop	r10
   17dda:	9f 90       	pop	r9
   17ddc:	8f 90       	pop	r8
   17dde:	08 95       	ret

00017de0 <lif_chars>:
   17de0:	80 32       	cpi	r24, 0x20	; 32
   17de2:	91 05       	cpc	r25, r1
   17de4:	e1 f0       	breq	.+56     	; 0x17e1e <lif_chars+0x3e>
   17de6:	9c 01       	movw	r18, r24
   17de8:	21 56       	subi	r18, 0x61	; 97
   17dea:	31 09       	sbc	r19, r1
   17dec:	2a 31       	cpi	r18, 0x1A	; 26
   17dee:	31 05       	cpc	r19, r1
   17df0:	10 f4       	brcc	.+4      	; 0x17df6 <lif_chars+0x16>
   17df2:	80 97       	sbiw	r24, 0x20	; 32
   17df4:	08 95       	ret
   17df6:	9c 01       	movw	r18, r24
   17df8:	21 54       	subi	r18, 0x41	; 65
   17dfa:	31 09       	sbc	r19, r1
   17dfc:	2a 31       	cpi	r18, 0x1A	; 26
   17dfe:	31 05       	cpc	r19, r1
   17e00:	c8 f0       	brcs	.+50     	; 0x17e34 <lif_chars+0x54>
   17e02:	16 16       	cp	r1, r22
   17e04:	17 06       	cpc	r1, r23
   17e06:	74 f4       	brge	.+28     	; 0x17e24 <lif_chars+0x44>
   17e08:	2f 5e       	subi	r18, 0xEF	; 239
   17e0a:	3f 4f       	sbci	r19, 0xFF	; 255
   17e0c:	2a 30       	cpi	r18, 0x0A	; 10
   17e0e:	31 05       	cpc	r19, r1
   17e10:	88 f0       	brcs	.+34     	; 0x17e34 <lif_chars+0x54>
   17e12:	8f 35       	cpi	r24, 0x5F	; 95
   17e14:	91 05       	cpc	r25, r1
   17e16:	49 f0       	breq	.+18     	; 0x17e2a <lif_chars+0x4a>
   17e18:	8d 97       	sbiw	r24, 0x2d	; 45
   17e1a:	21 f4       	brne	.+8      	; 0x17e24 <lif_chars+0x44>
   17e1c:	09 c0       	rjmp	.+18     	; 0x17e30 <lif_chars+0x50>
   17e1e:	80 e2       	ldi	r24, 0x20	; 32
   17e20:	90 e0       	ldi	r25, 0x00	; 0
   17e22:	08 95       	ret
   17e24:	80 e0       	ldi	r24, 0x00	; 0
   17e26:	90 e0       	ldi	r25, 0x00	; 0
   17e28:	08 95       	ret
   17e2a:	8f e5       	ldi	r24, 0x5F	; 95
   17e2c:	90 e0       	ldi	r25, 0x00	; 0
   17e2e:	08 95       	ret
   17e30:	8d e2       	ldi	r24, 0x2D	; 45
   17e32:	90 e0       	ldi	r25, 0x00	; 0
   17e34:	08 95       	ret

00017e36 <lif_B2S>:
   17e36:	a0 e0       	ldi	r26, 0x00	; 0
   17e38:	b0 e0       	ldi	r27, 0x00	; 0
   17e3a:	e1 e2       	ldi	r30, 0x21	; 33
   17e3c:	ff eb       	ldi	r31, 0xBF	; 191
   17e3e:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
   17e42:	5c 01       	movw	r10, r24
   17e44:	6b 01       	movw	r12, r22
   17e46:	ea 01       	movw	r28, r20
   17e48:	4c 01       	movw	r8, r24
   17e4a:	ee 24       	eor	r14, r14
   17e4c:	e3 94       	inc	r14
   17e4e:	f1 2c       	mov	r15, r1
   17e50:	00 e0       	ldi	r16, 0x00	; 0
   17e52:	10 e0       	ldi	r17, 0x00	; 0
   17e54:	0c 17       	cp	r16, r28
   17e56:	1d 07       	cpc	r17, r29
   17e58:	6c f4       	brge	.+26     	; 0x17e74 <lif_B2S+0x3e>
   17e5a:	f4 01       	movw	r30, r8
   17e5c:	81 91       	ld	r24, Z+
   17e5e:	4f 01       	movw	r8, r30
   17e60:	b8 01       	movw	r22, r16
   17e62:	90 e0       	ldi	r25, 0x00	; 0
   17e64:	bd df       	rcall	.-134    	; 0x17de0 <lif_chars>
   17e66:	89 2b       	or	r24, r25
   17e68:	11 f4       	brne	.+4      	; 0x17e6e <lif_B2S+0x38>
   17e6a:	e1 2c       	mov	r14, r1
   17e6c:	f1 2c       	mov	r15, r1
   17e6e:	0f 5f       	subi	r16, 0xFF	; 255
   17e70:	1f 4f       	sbci	r17, 0xFF	; 255
   17e72:	f0 cf       	rjmp	.-32     	; 0x17e54 <lif_B2S+0x1e>
   17e74:	d6 01       	movw	r26, r12
   17e76:	f5 01       	movw	r30, r10
   17e78:	cf 01       	movw	r24, r30
   17e7a:	8a 19       	sub	r24, r10
   17e7c:	9b 09       	sbc	r25, r11
   17e7e:	8c 17       	cp	r24, r28
   17e80:	9d 07       	cpc	r25, r29
   17e82:	1c f4       	brge	.+6      	; 0x17e8a <lif_B2S+0x54>
   17e84:	81 91       	ld	r24, Z+
   17e86:	8d 93       	st	X+, r24
   17e88:	f7 cf       	rjmp	.-18     	; 0x17e78 <lif_B2S+0x42>
   17e8a:	d7 ff       	sbrs	r29, 7
   17e8c:	02 c0       	rjmp	.+4      	; 0x17e92 <lif_B2S+0x5c>
   17e8e:	c0 e0       	ldi	r28, 0x00	; 0
   17e90:	d0 e0       	ldi	r29, 0x00	; 0
   17e92:	cc 0d       	add	r28, r12
   17e94:	dd 1d       	adc	r29, r13
   17e96:	18 82       	st	Y, r1
   17e98:	c6 01       	movw	r24, r12
   17e9a:	0e 94 73 30 	call	0x60e6	; 0x60e6 <trim_tail>
   17e9e:	c7 01       	movw	r24, r14
   17ea0:	cd b7       	in	r28, 0x3d	; 61
   17ea2:	de b7       	in	r29, 0x3e	; 62
   17ea4:	ec e0       	ldi	r30, 0x0C	; 12
   17ea6:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

00017eaa <lif_checkname>:
   17eaa:	ef 92       	push	r14
   17eac:	ff 92       	push	r15
   17eae:	0f 93       	push	r16
   17eb0:	1f 93       	push	r17
   17eb2:	cf 93       	push	r28
   17eb4:	df 93       	push	r29
   17eb6:	7c 01       	movw	r14, r24
   17eb8:	ec 01       	movw	r28, r24
   17eba:	01 e0       	ldi	r16, 0x01	; 1
   17ebc:	10 e0       	ldi	r17, 0x00	; 0
   17ebe:	be 01       	movw	r22, r28
   17ec0:	6e 19       	sub	r22, r14
   17ec2:	7f 09       	sbc	r23, r15
   17ec4:	89 91       	ld	r24, Y+
   17ec6:	88 23       	and	r24, r24
   17ec8:	39 f0       	breq	.+14     	; 0x17ed8 <lif_checkname+0x2e>
   17eca:	90 e0       	ldi	r25, 0x00	; 0
   17ecc:	89 df       	rcall	.-238    	; 0x17de0 <lif_chars>
   17ece:	89 2b       	or	r24, r25
   17ed0:	b1 f7       	brne	.-20     	; 0x17ebe <lif_checkname+0x14>
   17ed2:	00 e0       	ldi	r16, 0x00	; 0
   17ed4:	10 e0       	ldi	r17, 0x00	; 0
   17ed6:	f3 cf       	rjmp	.-26     	; 0x17ebe <lif_checkname+0x14>
   17ed8:	c8 01       	movw	r24, r16
   17eda:	cd b7       	in	r28, 0x3d	; 61
   17edc:	de b7       	in	r29, 0x3e	; 62
   17ede:	e6 e0       	ldi	r30, 0x06	; 6
   17ee0:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00017ee4 <lif_S2B>:
   17ee4:	fb 01       	movw	r30, r22
   17ee6:	dc 01       	movw	r26, r24
   17ee8:	20 e0       	ldi	r18, 0x00	; 0
   17eea:	30 e0       	ldi	r19, 0x00	; 0
   17eec:	61 91       	ld	r22, Z+
   17eee:	61 11       	cpse	r22, r1
   17ef0:	05 c0       	rjmp	.+10     	; 0x17efc <lif_S2B+0x18>
   17ef2:	fc 01       	movw	r30, r24
   17ef4:	e2 0f       	add	r30, r18
   17ef6:	f3 1f       	adc	r31, r19
   17ef8:	60 e2       	ldi	r22, 0x20	; 32
   17efa:	08 c0       	rjmp	.+16     	; 0x17f0c <lif_S2B+0x28>
   17efc:	24 17       	cp	r18, r20
   17efe:	35 07       	cpc	r19, r21
   17f00:	24 f4       	brge	.+8      	; 0x17f0a <lif_S2B+0x26>
   17f02:	6d 93       	st	X+, r22
   17f04:	2f 5f       	subi	r18, 0xFF	; 255
   17f06:	3f 4f       	sbci	r19, 0xFF	; 255
   17f08:	f1 cf       	rjmp	.-30     	; 0x17eec <lif_S2B+0x8>
   17f0a:	08 95       	ret
   17f0c:	9f 01       	movw	r18, r30
   17f0e:	28 1b       	sub	r18, r24
   17f10:	39 0b       	sbc	r19, r25
   17f12:	24 17       	cp	r18, r20
   17f14:	35 07       	cpc	r19, r21
   17f16:	14 f4       	brge	.+4      	; 0x17f1c <lif_S2B+0x38>
   17f18:	61 93       	st	Z+, r22
   17f1a:	f8 cf       	rjmp	.-16     	; 0x17f0c <lif_S2B+0x28>
   17f1c:	08 95       	ret

00017f1e <lif_fixname>:
   17f1e:	a0 e0       	ldi	r26, 0x00	; 0
   17f20:	b0 e0       	ldi	r27, 0x00	; 0
   17f22:	e5 e9       	ldi	r30, 0x95	; 149
   17f24:	ff eb       	ldi	r31, 0xBF	; 191
   17f26:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x12>
   17f2a:	8c 01       	movw	r16, r24
   17f2c:	cb 01       	movw	r24, r22
   17f2e:	7a 01       	movw	r14, r20
   17f30:	0e 94 5e 75 	call	0xeabc	; 0xeabc <basename>
   17f34:	6c 01       	movw	r12, r24
   17f36:	e8 01       	movw	r28, r16
   17f38:	80 e2       	ldi	r24, 0x20	; 32
   17f3a:	b8 2e       	mov	r11, r24
   17f3c:	be 01       	movw	r22, r28
   17f3e:	60 1b       	sub	r22, r16
   17f40:	71 0b       	sbc	r23, r17
   17f42:	f6 01       	movw	r30, r12
   17f44:	81 91       	ld	r24, Z+
   17f46:	6f 01       	movw	r12, r30
   17f48:	81 11       	cpse	r24, r1
   17f4a:	02 c0       	rjmp	.+4      	; 0x17f50 <lif_fixname+0x32>
   17f4c:	20 e2       	ldi	r18, 0x20	; 32
   17f4e:	0e c0       	rjmp	.+28     	; 0x17f6c <lif_fixname+0x4e>
   17f50:	1e 14       	cp	r1, r14
   17f52:	1f 04       	cpc	r1, r15
   17f54:	dc f7       	brge	.-10     	; 0x17f4c <lif_fixname+0x2e>
   17f56:	8e 32       	cpi	r24, 0x2E	; 46
   17f58:	c9 f3       	breq	.-14     	; 0x17f4c <lif_fixname+0x2e>
   17f5a:	90 e0       	ldi	r25, 0x00	; 0
   17f5c:	41 df       	rcall	.-382    	; 0x17de0 <lif_chars>
   17f5e:	88 23       	and	r24, r24
   17f60:	11 f0       	breq	.+4      	; 0x17f66 <lif_fixname+0x48>
   17f62:	88 83       	st	Y, r24
   17f64:	01 c0       	rjmp	.+2      	; 0x17f68 <lif_fixname+0x4a>
   17f66:	b8 82       	st	Y, r11
   17f68:	21 96       	adiw	r28, 0x01	; 1
   17f6a:	e8 cf       	rjmp	.-48     	; 0x17f3c <lif_fixname+0x1e>
   17f6c:	ce 01       	movw	r24, r28
   17f6e:	80 1b       	sub	r24, r16
   17f70:	91 0b       	sbc	r25, r17
   17f72:	8e 15       	cp	r24, r14
   17f74:	9f 05       	cpc	r25, r15
   17f76:	14 f4       	brge	.+4      	; 0x17f7c <lif_fixname+0x5e>
   17f78:	29 93       	st	Y+, r18
   17f7a:	f8 cf       	rjmp	.-16     	; 0x17f6c <lif_fixname+0x4e>
   17f7c:	18 82       	st	Y, r1
   17f7e:	f8 01       	movw	r30, r16
   17f80:	01 90       	ld	r0, Z+
   17f82:	00 20       	and	r0, r0
   17f84:	e9 f7       	brne	.-6      	; 0x17f80 <lif_fixname+0x62>
   17f86:	cf 01       	movw	r24, r30
   17f88:	01 97       	sbiw	r24, 0x01	; 1
   17f8a:	80 1b       	sub	r24, r16
   17f8c:	91 0b       	sbc	r25, r17
   17f8e:	cd b7       	in	r28, 0x3d	; 61
   17f90:	de b7       	in	r29, 0x3e	; 62
   17f92:	e9 e0       	ldi	r30, 0x09	; 9
   17f94:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x12>

00017f98 <lif_vol2str>:
   17f98:	ef 92       	push	r14
   17f9a:	ff 92       	push	r15
   17f9c:	0f 93       	push	r16
   17f9e:	1f 93       	push	r17
   17fa0:	cf 93       	push	r28
   17fa2:	df 93       	push	r29
   17fa4:	7c 01       	movw	r14, r24
   17fa6:	eb 01       	movw	r28, r22
   17fa8:	fc 01       	movw	r30, r24
   17faa:	04 a1       	ldd	r16, Z+36	; 0x24
   17fac:	15 a1       	ldd	r17, Z+37	; 0x25
   17fae:	20 e0       	ldi	r18, 0x00	; 0
   17fb0:	30 e0       	ldi	r19, 0x00	; 0
   17fb2:	42 e0       	ldi	r20, 0x02	; 2
   17fb4:	50 e0       	ldi	r21, 0x00	; 0
   17fb6:	60 e0       	ldi	r22, 0x00	; 0
   17fb8:	70 e0       	ldi	r23, 0x00	; 0
   17fba:	ce 01       	movw	r24, r28
   17fbc:	e4 dc       	rcall	.-1592   	; 0x17986 <V2B_MSB>
   17fbe:	b7 01       	movw	r22, r14
   17fc0:	6a 5d       	subi	r22, 0xDA	; 218
   17fc2:	7f 4f       	sbci	r23, 0xFF	; 255
   17fc4:	46 e0       	ldi	r20, 0x06	; 6
   17fc6:	50 e0       	ldi	r21, 0x00	; 0
   17fc8:	ce 01       	movw	r24, r28
   17fca:	02 96       	adiw	r24, 0x02	; 2
   17fcc:	8b df       	rcall	.-234    	; 0x17ee4 <lif_S2B>
   17fce:	f7 01       	movw	r30, r14
   17fd0:	05 a5       	ldd	r16, Z+45	; 0x2d
   17fd2:	16 a5       	ldd	r17, Z+46	; 0x2e
   17fd4:	27 a5       	ldd	r18, Z+47	; 0x2f
   17fd6:	30 a9       	ldd	r19, Z+48	; 0x30
   17fd8:	44 e0       	ldi	r20, 0x04	; 4
   17fda:	50 e0       	ldi	r21, 0x00	; 0
   17fdc:	68 e0       	ldi	r22, 0x08	; 8
   17fde:	70 e0       	ldi	r23, 0x00	; 0
   17fe0:	ce 01       	movw	r24, r28
   17fe2:	d1 dc       	rcall	.-1630   	; 0x17986 <V2B_MSB>
   17fe4:	f7 01       	movw	r30, r14
   17fe6:	01 a9       	ldd	r16, Z+49	; 0x31
   17fe8:	12 a9       	ldd	r17, Z+50	; 0x32
   17fea:	20 e0       	ldi	r18, 0x00	; 0
   17fec:	30 e0       	ldi	r19, 0x00	; 0
   17fee:	42 e0       	ldi	r20, 0x02	; 2
   17ff0:	50 e0       	ldi	r21, 0x00	; 0
   17ff2:	6c e0       	ldi	r22, 0x0C	; 12
   17ff4:	70 e0       	ldi	r23, 0x00	; 0
   17ff6:	ce 01       	movw	r24, r28
   17ff8:	c6 dc       	rcall	.-1652   	; 0x17986 <V2B_MSB>
   17ffa:	00 e0       	ldi	r16, 0x00	; 0
   17ffc:	10 e0       	ldi	r17, 0x00	; 0
   17ffe:	98 01       	movw	r18, r16
   18000:	42 e0       	ldi	r20, 0x02	; 2
   18002:	50 e0       	ldi	r21, 0x00	; 0
   18004:	6e e0       	ldi	r22, 0x0E	; 14
   18006:	70 e0       	ldi	r23, 0x00	; 0
   18008:	ce 01       	movw	r24, r28
   1800a:	bd dc       	rcall	.-1670   	; 0x17986 <V2B_MSB>
   1800c:	f7 01       	movw	r30, r14
   1800e:	05 a9       	ldd	r16, Z+53	; 0x35
   18010:	16 a9       	ldd	r17, Z+54	; 0x36
   18012:	27 a9       	ldd	r18, Z+55	; 0x37
   18014:	30 ad       	ldd	r19, Z+56	; 0x38
   18016:	44 e0       	ldi	r20, 0x04	; 4
   18018:	50 e0       	ldi	r21, 0x00	; 0
   1801a:	60 e1       	ldi	r22, 0x10	; 16
   1801c:	70 e0       	ldi	r23, 0x00	; 0
   1801e:	ce 01       	movw	r24, r28
   18020:	b2 dc       	rcall	.-1692   	; 0x17986 <V2B_MSB>
   18022:	f7 01       	movw	r30, r14
   18024:	01 ad       	ldd	r16, Z+57	; 0x39
   18026:	12 ad       	ldd	r17, Z+58	; 0x3a
   18028:	20 e0       	ldi	r18, 0x00	; 0
   1802a:	30 e0       	ldi	r19, 0x00	; 0
   1802c:	42 e0       	ldi	r20, 0x02	; 2
   1802e:	50 e0       	ldi	r21, 0x00	; 0
   18030:	64 e1       	ldi	r22, 0x14	; 20
   18032:	70 e0       	ldi	r23, 0x00	; 0
   18034:	ce 01       	movw	r24, r28
   18036:	a7 dc       	rcall	.-1714   	; 0x17986 <V2B_MSB>
   18038:	00 e0       	ldi	r16, 0x00	; 0
   1803a:	10 e0       	ldi	r17, 0x00	; 0
   1803c:	98 01       	movw	r18, r16
   1803e:	42 e0       	ldi	r20, 0x02	; 2
   18040:	50 e0       	ldi	r21, 0x00	; 0
   18042:	66 e1       	ldi	r22, 0x16	; 22
   18044:	70 e0       	ldi	r23, 0x00	; 0
   18046:	ce 01       	movw	r24, r28
   18048:	9e dc       	rcall	.-1732   	; 0x17986 <V2B_MSB>
   1804a:	f7 01       	movw	r30, r14
   1804c:	fd 96       	adiw	r30, 0x3d	; 61
   1804e:	00 81       	ld	r16, Z
   18050:	11 81       	ldd	r17, Z+1	; 0x01
   18052:	22 81       	ldd	r18, Z+2	; 0x02
   18054:	33 81       	ldd	r19, Z+3	; 0x03
   18056:	44 e0       	ldi	r20, 0x04	; 4
   18058:	50 e0       	ldi	r21, 0x00	; 0
   1805a:	68 e1       	ldi	r22, 0x18	; 24
   1805c:	70 e0       	ldi	r23, 0x00	; 0
   1805e:	ce 01       	movw	r24, r28
   18060:	92 dc       	rcall	.-1756   	; 0x17986 <V2B_MSB>
   18062:	f7 01       	movw	r30, r14
   18064:	ef 5b       	subi	r30, 0xBF	; 191
   18066:	ff 4f       	sbci	r31, 0xFF	; 255
   18068:	00 81       	ld	r16, Z
   1806a:	11 81       	ldd	r17, Z+1	; 0x01
   1806c:	22 81       	ldd	r18, Z+2	; 0x02
   1806e:	33 81       	ldd	r19, Z+3	; 0x03
   18070:	44 e0       	ldi	r20, 0x04	; 4
   18072:	50 e0       	ldi	r21, 0x00	; 0
   18074:	6c e1       	ldi	r22, 0x1C	; 28
   18076:	70 e0       	ldi	r23, 0x00	; 0
   18078:	ce 01       	movw	r24, r28
   1807a:	85 dc       	rcall	.-1782   	; 0x17986 <V2B_MSB>
   1807c:	f7 01       	movw	r30, r14
   1807e:	eb 5b       	subi	r30, 0xBB	; 187
   18080:	ff 4f       	sbci	r31, 0xFF	; 255
   18082:	00 81       	ld	r16, Z
   18084:	11 81       	ldd	r17, Z+1	; 0x01
   18086:	22 81       	ldd	r18, Z+2	; 0x02
   18088:	33 81       	ldd	r19, Z+3	; 0x03
   1808a:	44 e0       	ldi	r20, 0x04	; 4
   1808c:	50 e0       	ldi	r21, 0x00	; 0
   1808e:	60 e2       	ldi	r22, 0x20	; 32
   18090:	70 e0       	ldi	r23, 0x00	; 0
   18092:	ce 01       	movw	r24, r28
   18094:	78 dc       	rcall	.-1808   	; 0x17986 <V2B_MSB>
   18096:	de 01       	movw	r26, r28
   18098:	94 96       	adiw	r26, 0x24	; 36
   1809a:	f7 01       	movw	r30, r14
   1809c:	e7 5b       	subi	r30, 0xB7	; 183
   1809e:	ff 4f       	sbci	r31, 0xFF	; 255
   180a0:	86 e0       	ldi	r24, 0x06	; 6
   180a2:	01 90       	ld	r0, Z+
   180a4:	0d 92       	st	X+, r0
   180a6:	8a 95       	dec	r24
   180a8:	e1 f7       	brne	.-8      	; 0x180a2 <lif_vol2str+0x10a>
   180aa:	cd b7       	in	r28, 0x3d	; 61
   180ac:	de b7       	in	r29, 0x3e	; 62
   180ae:	e6 e0       	ldi	r30, 0x06	; 6
   180b0:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

000180b4 <lif_str2vol>:
   180b4:	0f 93       	push	r16
   180b6:	1f 93       	push	r17
   180b8:	cf 93       	push	r28
   180ba:	df 93       	push	r29
   180bc:	8c 01       	movw	r16, r24
   180be:	eb 01       	movw	r28, r22
   180c0:	42 e0       	ldi	r20, 0x02	; 2
   180c2:	50 e0       	ldi	r21, 0x00	; 0
   180c4:	60 e0       	ldi	r22, 0x00	; 0
   180c6:	70 e0       	ldi	r23, 0x00	; 0
   180c8:	87 dc       	rcall	.-1778   	; 0x179d8 <B2V_MSB>
   180ca:	7d a3       	std	Y+37, r23	; 0x25
   180cc:	6c a3       	std	Y+36, r22	; 0x24
   180ce:	be 01       	movw	r22, r28
   180d0:	6a 5d       	subi	r22, 0xDA	; 218
   180d2:	7f 4f       	sbci	r23, 0xFF	; 255
   180d4:	46 e0       	ldi	r20, 0x06	; 6
   180d6:	50 e0       	ldi	r21, 0x00	; 0
   180d8:	c8 01       	movw	r24, r16
   180da:	02 96       	adiw	r24, 0x02	; 2
   180dc:	ac de       	rcall	.-680    	; 0x17e36 <lif_B2S>
   180de:	44 e0       	ldi	r20, 0x04	; 4
   180e0:	50 e0       	ldi	r21, 0x00	; 0
   180e2:	68 e0       	ldi	r22, 0x08	; 8
   180e4:	70 e0       	ldi	r23, 0x00	; 0
   180e6:	c8 01       	movw	r24, r16
   180e8:	77 dc       	rcall	.-1810   	; 0x179d8 <B2V_MSB>
   180ea:	6d a7       	std	Y+45, r22	; 0x2d
   180ec:	7e a7       	std	Y+46, r23	; 0x2e
   180ee:	8f a7       	std	Y+47, r24	; 0x2f
   180f0:	98 ab       	std	Y+48, r25	; 0x30
   180f2:	42 e0       	ldi	r20, 0x02	; 2
   180f4:	50 e0       	ldi	r21, 0x00	; 0
   180f6:	6c e0       	ldi	r22, 0x0C	; 12
   180f8:	70 e0       	ldi	r23, 0x00	; 0
   180fa:	c8 01       	movw	r24, r16
   180fc:	6d dc       	rcall	.-1830   	; 0x179d8 <B2V_MSB>
   180fe:	7a ab       	std	Y+50, r23	; 0x32
   18100:	69 ab       	std	Y+49, r22	; 0x31
   18102:	42 e0       	ldi	r20, 0x02	; 2
   18104:	50 e0       	ldi	r21, 0x00	; 0
   18106:	6e e0       	ldi	r22, 0x0E	; 14
   18108:	70 e0       	ldi	r23, 0x00	; 0
   1810a:	c8 01       	movw	r24, r16
   1810c:	65 dc       	rcall	.-1846   	; 0x179d8 <B2V_MSB>
   1810e:	7c ab       	std	Y+52, r23	; 0x34
   18110:	6b ab       	std	Y+51, r22	; 0x33
   18112:	44 e0       	ldi	r20, 0x04	; 4
   18114:	50 e0       	ldi	r21, 0x00	; 0
   18116:	60 e1       	ldi	r22, 0x10	; 16
   18118:	70 e0       	ldi	r23, 0x00	; 0
   1811a:	c8 01       	movw	r24, r16
   1811c:	5d dc       	rcall	.-1862   	; 0x179d8 <B2V_MSB>
   1811e:	6d ab       	std	Y+53, r22	; 0x35
   18120:	7e ab       	std	Y+54, r23	; 0x36
   18122:	8f ab       	std	Y+55, r24	; 0x37
   18124:	98 af       	std	Y+56, r25	; 0x38
   18126:	42 e0       	ldi	r20, 0x02	; 2
   18128:	50 e0       	ldi	r21, 0x00	; 0
   1812a:	64 e1       	ldi	r22, 0x14	; 20
   1812c:	70 e0       	ldi	r23, 0x00	; 0
   1812e:	c8 01       	movw	r24, r16
   18130:	53 dc       	rcall	.-1882   	; 0x179d8 <B2V_MSB>
   18132:	7a af       	std	Y+58, r23	; 0x3a
   18134:	69 af       	std	Y+57, r22	; 0x39
   18136:	42 e0       	ldi	r20, 0x02	; 2
   18138:	50 e0       	ldi	r21, 0x00	; 0
   1813a:	66 e1       	ldi	r22, 0x16	; 22
   1813c:	70 e0       	ldi	r23, 0x00	; 0
   1813e:	c8 01       	movw	r24, r16
   18140:	4b dc       	rcall	.-1898   	; 0x179d8 <B2V_MSB>
   18142:	7c af       	std	Y+60, r23	; 0x3c
   18144:	6b af       	std	Y+59, r22	; 0x3b
   18146:	44 e0       	ldi	r20, 0x04	; 4
   18148:	50 e0       	ldi	r21, 0x00	; 0
   1814a:	68 e1       	ldi	r22, 0x18	; 24
   1814c:	70 e0       	ldi	r23, 0x00	; 0
   1814e:	c8 01       	movw	r24, r16
   18150:	43 dc       	rcall	.-1914   	; 0x179d8 <B2V_MSB>
   18152:	fe 01       	movw	r30, r28
   18154:	fd 96       	adiw	r30, 0x3d	; 61
   18156:	60 83       	st	Z, r22
   18158:	71 83       	std	Z+1, r23	; 0x01
   1815a:	82 83       	std	Z+2, r24	; 0x02
   1815c:	93 83       	std	Z+3, r25	; 0x03
   1815e:	44 e0       	ldi	r20, 0x04	; 4
   18160:	50 e0       	ldi	r21, 0x00	; 0
   18162:	6c e1       	ldi	r22, 0x1C	; 28
   18164:	70 e0       	ldi	r23, 0x00	; 0
   18166:	c8 01       	movw	r24, r16
   18168:	37 dc       	rcall	.-1938   	; 0x179d8 <B2V_MSB>
   1816a:	fe 01       	movw	r30, r28
   1816c:	ef 5b       	subi	r30, 0xBF	; 191
   1816e:	ff 4f       	sbci	r31, 0xFF	; 255
   18170:	60 83       	st	Z, r22
   18172:	71 83       	std	Z+1, r23	; 0x01
   18174:	82 83       	std	Z+2, r24	; 0x02
   18176:	93 83       	std	Z+3, r25	; 0x03
   18178:	44 e0       	ldi	r20, 0x04	; 4
   1817a:	50 e0       	ldi	r21, 0x00	; 0
   1817c:	60 e2       	ldi	r22, 0x20	; 32
   1817e:	70 e0       	ldi	r23, 0x00	; 0
   18180:	c8 01       	movw	r24, r16
   18182:	2a dc       	rcall	.-1964   	; 0x179d8 <B2V_MSB>
   18184:	fe 01       	movw	r30, r28
   18186:	eb 5b       	subi	r30, 0xBB	; 187
   18188:	ff 4f       	sbci	r31, 0xFF	; 255
   1818a:	60 83       	st	Z, r22
   1818c:	71 83       	std	Z+1, r23	; 0x01
   1818e:	82 83       	std	Z+2, r24	; 0x02
   18190:	93 83       	std	Z+3, r25	; 0x03
   18192:	de 01       	movw	r26, r28
   18194:	a7 5b       	subi	r26, 0xB7	; 183
   18196:	bf 4f       	sbci	r27, 0xFF	; 255
   18198:	f8 01       	movw	r30, r16
   1819a:	b4 96       	adiw	r30, 0x24	; 36
   1819c:	86 e0       	ldi	r24, 0x06	; 6
   1819e:	01 90       	ld	r0, Z+
   181a0:	0d 92       	st	X+, r0
   181a2:	8a 95       	dec	r24
   181a4:	e1 f7       	brne	.-8      	; 0x1819e <lif_str2vol+0xea>
   181a6:	df 91       	pop	r29
   181a8:	cf 91       	pop	r28
   181aa:	1f 91       	pop	r17
   181ac:	0f 91       	pop	r16
   181ae:	08 95       	ret

000181b0 <lif_dir2str>:
   181b0:	ef 92       	push	r14
   181b2:	ff 92       	push	r15
   181b4:	0f 93       	push	r16
   181b6:	1f 93       	push	r17
   181b8:	cf 93       	push	r28
   181ba:	df 93       	push	r29
   181bc:	ec 01       	movw	r28, r24
   181be:	7b 01       	movw	r14, r22
   181c0:	bc 01       	movw	r22, r24
   181c2:	61 5b       	subi	r22, 0xB1	; 177
   181c4:	7f 4f       	sbci	r23, 0xFF	; 255
   181c6:	4a e0       	ldi	r20, 0x0A	; 10
   181c8:	50 e0       	ldi	r21, 0x00	; 0
   181ca:	c7 01       	movw	r24, r14
   181cc:	8b de       	rcall	.-746    	; 0x17ee4 <lif_S2B>
   181ce:	fe 01       	movw	r30, r28
   181d0:	e6 5a       	subi	r30, 0xA6	; 166
   181d2:	ff 4f       	sbci	r31, 0xFF	; 255
   181d4:	00 81       	ld	r16, Z
   181d6:	11 81       	ldd	r17, Z+1	; 0x01
   181d8:	20 e0       	ldi	r18, 0x00	; 0
   181da:	30 e0       	ldi	r19, 0x00	; 0
   181dc:	42 e0       	ldi	r20, 0x02	; 2
   181de:	50 e0       	ldi	r21, 0x00	; 0
   181e0:	6a e0       	ldi	r22, 0x0A	; 10
   181e2:	70 e0       	ldi	r23, 0x00	; 0
   181e4:	c7 01       	movw	r24, r14
   181e6:	cf db       	rcall	.-2146   	; 0x17986 <V2B_MSB>
   181e8:	fe 01       	movw	r30, r28
   181ea:	e4 5a       	subi	r30, 0xA4	; 164
   181ec:	ff 4f       	sbci	r31, 0xFF	; 255
   181ee:	00 81       	ld	r16, Z
   181f0:	11 81       	ldd	r17, Z+1	; 0x01
   181f2:	22 81       	ldd	r18, Z+2	; 0x02
   181f4:	33 81       	ldd	r19, Z+3	; 0x03
   181f6:	44 e0       	ldi	r20, 0x04	; 4
   181f8:	50 e0       	ldi	r21, 0x00	; 0
   181fa:	6c e0       	ldi	r22, 0x0C	; 12
   181fc:	70 e0       	ldi	r23, 0x00	; 0
   181fe:	c7 01       	movw	r24, r14
   18200:	c2 db       	rcall	.-2172   	; 0x17986 <V2B_MSB>
   18202:	fe 01       	movw	r30, r28
   18204:	e0 5a       	subi	r30, 0xA0	; 160
   18206:	ff 4f       	sbci	r31, 0xFF	; 255
   18208:	00 81       	ld	r16, Z
   1820a:	11 81       	ldd	r17, Z+1	; 0x01
   1820c:	22 81       	ldd	r18, Z+2	; 0x02
   1820e:	33 81       	ldd	r19, Z+3	; 0x03
   18210:	44 e0       	ldi	r20, 0x04	; 4
   18212:	50 e0       	ldi	r21, 0x00	; 0
   18214:	60 e1       	ldi	r22, 0x10	; 16
   18216:	70 e0       	ldi	r23, 0x00	; 0
   18218:	c7 01       	movw	r24, r14
   1821a:	b5 db       	rcall	.-2198   	; 0x17986 <V2B_MSB>
   1821c:	d7 01       	movw	r26, r14
   1821e:	54 96       	adiw	r26, 0x14	; 20
   18220:	fe 01       	movw	r30, r28
   18222:	ec 59       	subi	r30, 0x9C	; 156
   18224:	ff 4f       	sbci	r31, 0xFF	; 255
   18226:	86 e0       	ldi	r24, 0x06	; 6
   18228:	01 90       	ld	r0, Z+
   1822a:	0d 92       	st	X+, r0
   1822c:	8a 95       	dec	r24
   1822e:	e1 f7       	brne	.-8      	; 0x18228 <lif_dir2str+0x78>
   18230:	fe 01       	movw	r30, r28
   18232:	e6 59       	subi	r30, 0x96	; 150
   18234:	ff 4f       	sbci	r31, 0xFF	; 255
   18236:	00 81       	ld	r16, Z
   18238:	11 81       	ldd	r17, Z+1	; 0x01
   1823a:	20 e0       	ldi	r18, 0x00	; 0
   1823c:	30 e0       	ldi	r19, 0x00	; 0
   1823e:	42 e0       	ldi	r20, 0x02	; 2
   18240:	50 e0       	ldi	r21, 0x00	; 0
   18242:	6a e1       	ldi	r22, 0x1A	; 26
   18244:	70 e0       	ldi	r23, 0x00	; 0
   18246:	c7 01       	movw	r24, r14
   18248:	9e db       	rcall	.-2244   	; 0x17986 <V2B_MSB>
   1824a:	fe 01       	movw	r30, r28
   1824c:	e4 59       	subi	r30, 0x94	; 148
   1824e:	ff 4f       	sbci	r31, 0xFF	; 255
   18250:	00 81       	ld	r16, Z
   18252:	11 81       	ldd	r17, Z+1	; 0x01
   18254:	20 e0       	ldi	r18, 0x00	; 0
   18256:	30 e0       	ldi	r19, 0x00	; 0
   18258:	42 e0       	ldi	r20, 0x02	; 2
   1825a:	50 e0       	ldi	r21, 0x00	; 0
   1825c:	6c e1       	ldi	r22, 0x1C	; 28
   1825e:	70 e0       	ldi	r23, 0x00	; 0
   18260:	c7 01       	movw	r24, r14
   18262:	a5 db       	rcall	.-2230   	; 0x179ae <V2B_LSB>
   18264:	c2 59       	subi	r28, 0x92	; 146
   18266:	df 4f       	sbci	r29, 0xFF	; 255
   18268:	08 81       	ld	r16, Y
   1826a:	19 81       	ldd	r17, Y+1	; 0x01
   1826c:	20 e0       	ldi	r18, 0x00	; 0
   1826e:	30 e0       	ldi	r19, 0x00	; 0
   18270:	42 e0       	ldi	r20, 0x02	; 2
   18272:	50 e0       	ldi	r21, 0x00	; 0
   18274:	6e e1       	ldi	r22, 0x1E	; 30
   18276:	70 e0       	ldi	r23, 0x00	; 0
   18278:	c7 01       	movw	r24, r14
   1827a:	99 db       	rcall	.-2254   	; 0x179ae <V2B_LSB>
   1827c:	cd b7       	in	r28, 0x3d	; 61
   1827e:	de b7       	in	r29, 0x3e	; 62
   18280:	e6 e0       	ldi	r30, 0x06	; 6
   18282:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

00018286 <lif_str2dir>:
   18286:	0f 93       	push	r16
   18288:	1f 93       	push	r17
   1828a:	cf 93       	push	r28
   1828c:	df 93       	push	r29
   1828e:	8c 01       	movw	r16, r24
   18290:	eb 01       	movw	r28, r22
   18292:	61 5b       	subi	r22, 0xB1	; 177
   18294:	7f 4f       	sbci	r23, 0xFF	; 255
   18296:	4a e0       	ldi	r20, 0x0A	; 10
   18298:	50 e0       	ldi	r21, 0x00	; 0
   1829a:	cd dd       	rcall	.-1126   	; 0x17e36 <lif_B2S>
   1829c:	42 e0       	ldi	r20, 0x02	; 2
   1829e:	50 e0       	ldi	r21, 0x00	; 0
   182a0:	6a e0       	ldi	r22, 0x0A	; 10
   182a2:	70 e0       	ldi	r23, 0x00	; 0
   182a4:	c8 01       	movw	r24, r16
   182a6:	98 db       	rcall	.-2256   	; 0x179d8 <B2V_MSB>
   182a8:	fe 01       	movw	r30, r28
   182aa:	e6 5a       	subi	r30, 0xA6	; 166
   182ac:	ff 4f       	sbci	r31, 0xFF	; 255
   182ae:	71 83       	std	Z+1, r23	; 0x01
   182b0:	60 83       	st	Z, r22
   182b2:	44 e0       	ldi	r20, 0x04	; 4
   182b4:	50 e0       	ldi	r21, 0x00	; 0
   182b6:	6c e0       	ldi	r22, 0x0C	; 12
   182b8:	70 e0       	ldi	r23, 0x00	; 0
   182ba:	c8 01       	movw	r24, r16
   182bc:	8d db       	rcall	.-2278   	; 0x179d8 <B2V_MSB>
   182be:	fe 01       	movw	r30, r28
   182c0:	e4 5a       	subi	r30, 0xA4	; 164
   182c2:	ff 4f       	sbci	r31, 0xFF	; 255
   182c4:	60 83       	st	Z, r22
   182c6:	71 83       	std	Z+1, r23	; 0x01
   182c8:	82 83       	std	Z+2, r24	; 0x02
   182ca:	93 83       	std	Z+3, r25	; 0x03
   182cc:	44 e0       	ldi	r20, 0x04	; 4
   182ce:	50 e0       	ldi	r21, 0x00	; 0
   182d0:	60 e1       	ldi	r22, 0x10	; 16
   182d2:	70 e0       	ldi	r23, 0x00	; 0
   182d4:	c8 01       	movw	r24, r16
   182d6:	80 db       	rcall	.-2304   	; 0x179d8 <B2V_MSB>
   182d8:	fe 01       	movw	r30, r28
   182da:	e0 5a       	subi	r30, 0xA0	; 160
   182dc:	ff 4f       	sbci	r31, 0xFF	; 255
   182de:	60 83       	st	Z, r22
   182e0:	71 83       	std	Z+1, r23	; 0x01
   182e2:	82 83       	std	Z+2, r24	; 0x02
   182e4:	93 83       	std	Z+3, r25	; 0x03
   182e6:	de 01       	movw	r26, r28
   182e8:	ac 59       	subi	r26, 0x9C	; 156
   182ea:	bf 4f       	sbci	r27, 0xFF	; 255
   182ec:	f8 01       	movw	r30, r16
   182ee:	74 96       	adiw	r30, 0x14	; 20
   182f0:	86 e0       	ldi	r24, 0x06	; 6
   182f2:	01 90       	ld	r0, Z+
   182f4:	0d 92       	st	X+, r0
   182f6:	8a 95       	dec	r24
   182f8:	e1 f7       	brne	.-8      	; 0x182f2 <lif_str2dir+0x6c>
   182fa:	42 e0       	ldi	r20, 0x02	; 2
   182fc:	50 e0       	ldi	r21, 0x00	; 0
   182fe:	6a e1       	ldi	r22, 0x1A	; 26
   18300:	70 e0       	ldi	r23, 0x00	; 0
   18302:	c8 01       	movw	r24, r16
   18304:	69 db       	rcall	.-2350   	; 0x179d8 <B2V_MSB>
   18306:	fe 01       	movw	r30, r28
   18308:	e6 59       	subi	r30, 0x96	; 150
   1830a:	ff 4f       	sbci	r31, 0xFF	; 255
   1830c:	71 83       	std	Z+1, r23	; 0x01
   1830e:	60 83       	st	Z, r22
   18310:	42 e0       	ldi	r20, 0x02	; 2
   18312:	50 e0       	ldi	r21, 0x00	; 0
   18314:	6c e1       	ldi	r22, 0x1C	; 28
   18316:	70 e0       	ldi	r23, 0x00	; 0
   18318:	c8 01       	movw	r24, r16
   1831a:	7d db       	rcall	.-2310   	; 0x17a16 <B2V_LSB>
   1831c:	fe 01       	movw	r30, r28
   1831e:	e4 59       	subi	r30, 0x94	; 148
   18320:	ff 4f       	sbci	r31, 0xFF	; 255
   18322:	71 83       	std	Z+1, r23	; 0x01
   18324:	60 83       	st	Z, r22
   18326:	42 e0       	ldi	r20, 0x02	; 2
   18328:	50 e0       	ldi	r21, 0x00	; 0
   1832a:	6e e1       	ldi	r22, 0x1E	; 30
   1832c:	70 e0       	ldi	r23, 0x00	; 0
   1832e:	c8 01       	movw	r24, r16
   18330:	72 db       	rcall	.-2332   	; 0x17a16 <B2V_LSB>
   18332:	c2 59       	subi	r28, 0x92	; 146
   18334:	df 4f       	sbci	r29, 0xFF	; 255
   18336:	79 83       	std	Y+1, r23	; 0x01
   18338:	68 83       	st	Y, r22
   1833a:	df 91       	pop	r29
   1833c:	cf 91       	pop	r28
   1833e:	1f 91       	pop	r17
   18340:	0f 91       	pop	r16
   18342:	08 95       	ret

00018344 <lif_BIN2BCD>:
   18344:	6a e0       	ldi	r22, 0x0A	; 10
   18346:	0e 94 4c e2 	call	0x1c498	; 0x1c498 <__udivmodqi4>
   1834a:	82 95       	swap	r24
   1834c:	80 7f       	andi	r24, 0xF0	; 240
   1834e:	89 2b       	or	r24, r25
   18350:	08 95       	ret

00018352 <lif_BCD2BIN>:
   18352:	28 2f       	mov	r18, r24
   18354:	22 95       	swap	r18
   18356:	2f 70       	andi	r18, 0x0F	; 15
   18358:	8f 70       	andi	r24, 0x0F	; 15
   1835a:	90 e0       	ldi	r25, 0x00	; 0
   1835c:	3a e0       	ldi	r19, 0x0A	; 10
   1835e:	23 9f       	mul	r18, r19
   18360:	80 0d       	add	r24, r0
   18362:	91 1d       	adc	r25, r1
   18364:	11 24       	eor	r1, r1
   18366:	08 95       	ret

00018368 <lif_time2lifbcd>:
   18368:	aa e1       	ldi	r26, 0x1A	; 26
   1836a:	b0 e0       	ldi	r27, 0x00	; 0
   1836c:	ea eb       	ldi	r30, 0xBA	; 186
   1836e:	f1 ec       	ldi	r31, 0xC1	; 193
   18370:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
   18374:	8b 01       	movw	r16, r22
   18376:	9c 01       	movw	r18, r24
   18378:	6f 8b       	std	Y+23, r22	; 0x17
   1837a:	78 8f       	std	Y+24, r23	; 0x18
   1837c:	89 8f       	std	Y+25, r24	; 0x19
   1837e:	9a 8f       	std	Y+26, r25	; 0x1a
   18380:	67 2b       	or	r22, r23
   18382:	68 2b       	or	r22, r24
   18384:	69 2b       	or	r22, r25
   18386:	41 f4       	brne	.+16     	; 0x18398 <lif_time2lifbcd+0x30>
   18388:	fa 01       	movw	r30, r20
   1838a:	ca 01       	movw	r24, r20
   1838c:	06 96       	adiw	r24, 0x06	; 6
   1838e:	11 92       	st	Z+, r1
   18390:	e8 17       	cp	r30, r24
   18392:	f9 07       	cpc	r31, r25
   18394:	e1 f7       	brne	.-8      	; 0x1838e <lif_time2lifbcd+0x26>
   18396:	26 c0       	rjmp	.+76     	; 0x183e4 <lif_time2lifbcd+0x7c>
   18398:	8a 01       	movw	r16, r20
   1839a:	be 01       	movw	r22, r28
   1839c:	6f 5f       	subi	r22, 0xFF	; 255
   1839e:	7f 4f       	sbci	r23, 0xFF	; 255
   183a0:	ce 01       	movw	r24, r28
   183a2:	47 96       	adiw	r24, 0x17	; 23
   183a4:	0e 94 e7 35 	call	0x6bce	; 0x6bce <gmtime_r>
   183a8:	8b 85       	ldd	r24, Y+11	; 0x0b
   183aa:	9c 85       	ldd	r25, Y+12	; 0x0c
   183ac:	64 e6       	ldi	r22, 0x64	; 100
   183ae:	70 e0       	ldi	r23, 0x00	; 0
   183b0:	0e 94 6c e2 	call	0x1c4d8	; 0x1c4d8 <__divmodhi4>
   183b4:	c7 df       	rcall	.-114    	; 0x18344 <lif_BIN2BCD>
   183b6:	f8 01       	movw	r30, r16
   183b8:	80 83       	st	Z, r24
   183ba:	89 85       	ldd	r24, Y+9	; 0x09
   183bc:	8f 5f       	subi	r24, 0xFF	; 255
   183be:	c2 df       	rcall	.-124    	; 0x18344 <lif_BIN2BCD>
   183c0:	f8 01       	movw	r30, r16
   183c2:	81 83       	std	Z+1, r24	; 0x01
   183c4:	8f 81       	ldd	r24, Y+7	; 0x07
   183c6:	be df       	rcall	.-132    	; 0x18344 <lif_BIN2BCD>
   183c8:	f8 01       	movw	r30, r16
   183ca:	82 83       	std	Z+2, r24	; 0x02
   183cc:	8d 81       	ldd	r24, Y+5	; 0x05
   183ce:	ba df       	rcall	.-140    	; 0x18344 <lif_BIN2BCD>
   183d0:	f8 01       	movw	r30, r16
   183d2:	83 83       	std	Z+3, r24	; 0x03
   183d4:	8b 81       	ldd	r24, Y+3	; 0x03
   183d6:	b6 df       	rcall	.-148    	; 0x18344 <lif_BIN2BCD>
   183d8:	f8 01       	movw	r30, r16
   183da:	84 83       	std	Z+4, r24	; 0x04
   183dc:	89 81       	ldd	r24, Y+1	; 0x01
   183de:	b2 df       	rcall	.-156    	; 0x18344 <lif_BIN2BCD>
   183e0:	f8 01       	movw	r30, r16
   183e2:	85 83       	std	Z+5, r24	; 0x05
   183e4:	6a 96       	adiw	r28, 0x1a	; 26
   183e6:	e4 e0       	ldi	r30, 0x04	; 4
   183e8:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

000183ec <lif_lifbcd2time>:
   183ec:	a6 e1       	ldi	r26, 0x16	; 22
   183ee:	b0 e0       	ldi	r27, 0x00	; 0
   183f0:	ec ef       	ldi	r30, 0xFC	; 252
   183f2:	f1 ec       	ldi	r31, 0xC1	; 193
   183f4:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
   183f8:	8c 01       	movw	r16, r24
   183fa:	7c 01       	movw	r14, r24
   183fc:	5c 01       	movw	r10, r24
   183fe:	26 e0       	ldi	r18, 0x06	; 6
   18400:	a2 0e       	add	r10, r18
   18402:	b1 1c       	adc	r11, r1
   18404:	cc 24       	eor	r12, r12
   18406:	c3 94       	inc	r12
   18408:	d1 2c       	mov	r13, r1
   1840a:	f7 01       	movw	r30, r14
   1840c:	81 91       	ld	r24, Z+
   1840e:	7f 01       	movw	r14, r30
   18410:	a0 df       	rcall	.-192    	; 0x18352 <lif_BCD2BIN>
   18412:	89 2b       	or	r24, r25
   18414:	11 f0       	breq	.+4      	; 0x1841a <lif_lifbcd2time+0x2e>
   18416:	c1 2c       	mov	r12, r1
   18418:	d1 2c       	mov	r13, r1
   1841a:	ea 14       	cp	r14, r10
   1841c:	fb 04       	cpc	r15, r11
   1841e:	a9 f7       	brne	.-22     	; 0x1840a <lif_lifbcd2time+0x1e>
   18420:	c1 14       	cp	r12, r1
   18422:	d1 04       	cpc	r13, r1
   18424:	61 f5       	brne	.+88     	; 0x1847e <lif_lifbcd2time+0x92>
   18426:	f8 01       	movw	r30, r16
   18428:	80 81       	ld	r24, Z
   1842a:	93 df       	rcall	.-218    	; 0x18352 <lif_BCD2BIN>
   1842c:	7c 01       	movw	r14, r24
   1842e:	f8 01       	movw	r30, r16
   18430:	81 81       	ldd	r24, Z+1	; 0x01
   18432:	8f df       	rcall	.-226    	; 0x18352 <lif_BCD2BIN>
   18434:	01 97       	sbiw	r24, 0x01	; 1
   18436:	f6 e4       	ldi	r31, 0x46	; 70
   18438:	ef 16       	cp	r14, r31
   1843a:	f1 04       	cpc	r15, r1
   1843c:	1c f4       	brge	.+6      	; 0x18444 <lif_lifbcd2time+0x58>
   1843e:	24 e6       	ldi	r18, 0x64	; 100
   18440:	e2 0e       	add	r14, r18
   18442:	f1 1c       	adc	r15, r1
   18444:	fc 86       	std	Y+12, r15	; 0x0c
   18446:	eb 86       	std	Y+11, r14	; 0x0b
   18448:	9a 87       	std	Y+10, r25	; 0x0a
   1844a:	89 87       	std	Y+9, r24	; 0x09
   1844c:	f8 01       	movw	r30, r16
   1844e:	82 81       	ldd	r24, Z+2	; 0x02
   18450:	80 df       	rcall	.-256    	; 0x18352 <lif_BCD2BIN>
   18452:	98 87       	std	Y+8, r25	; 0x08
   18454:	8f 83       	std	Y+7, r24	; 0x07
   18456:	f8 01       	movw	r30, r16
   18458:	83 81       	ldd	r24, Z+3	; 0x03
   1845a:	7b df       	rcall	.-266    	; 0x18352 <lif_BCD2BIN>
   1845c:	9e 83       	std	Y+6, r25	; 0x06
   1845e:	8d 83       	std	Y+5, r24	; 0x05
   18460:	f8 01       	movw	r30, r16
   18462:	84 81       	ldd	r24, Z+4	; 0x04
   18464:	76 df       	rcall	.-276    	; 0x18352 <lif_BCD2BIN>
   18466:	9c 83       	std	Y+4, r25	; 0x04
   18468:	8b 83       	std	Y+3, r24	; 0x03
   1846a:	f8 01       	movw	r30, r16
   1846c:	85 81       	ldd	r24, Z+5	; 0x05
   1846e:	71 df       	rcall	.-286    	; 0x18352 <lif_BCD2BIN>
   18470:	9a 83       	std	Y+2, r25	; 0x02
   18472:	89 83       	std	Y+1, r24	; 0x01
   18474:	ce 01       	movw	r24, r28
   18476:	01 96       	adiw	r24, 0x01	; 1
   18478:	0e 94 bb 38 	call	0x7176	; 0x7176 <timegm>
   1847c:	03 c0       	rjmp	.+6      	; 0x18484 <lif_lifbcd2time+0x98>
   1847e:	60 e0       	ldi	r22, 0x00	; 0
   18480:	70 e0       	ldi	r23, 0x00	; 0
   18482:	cb 01       	movw	r24, r22
   18484:	66 96       	adiw	r28, 0x16	; 22
   18486:	ea e0       	ldi	r30, 0x0A	; 10
   18488:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0001848c <lif_ctime_gmt>:
   1848c:	a6 e1       	ldi	r26, 0x16	; 22
   1848e:	b0 e0       	ldi	r27, 0x00	; 0
   18490:	ec e4       	ldi	r30, 0x4C	; 76
   18492:	f2 ec       	ldi	r31, 0xC2	; 194
   18494:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__prologue_saves__+0x1c>
   18498:	20 e2       	ldi	r18, 0x20	; 32
   1849a:	e2 ed       	ldi	r30, 0xD2	; 210
   1849c:	f9 e1       	ldi	r31, 0x19	; 25
   1849e:	df 01       	movw	r26, r30
   184a0:	1d 92       	st	X+, r1
   184a2:	2a 95       	dec	r18
   184a4:	e9 f7       	brne	.-6      	; 0x184a0 <lif_ctime_gmt+0x14>
   184a6:	be 01       	movw	r22, r28
   184a8:	6f 5f       	subi	r22, 0xFF	; 255
   184aa:	7f 4f       	sbci	r23, 0xFF	; 255
   184ac:	0e 94 e7 35 	call	0x6bce	; 0x6bce <gmtime_r>
   184b0:	62 ed       	ldi	r22, 0xD2	; 210
   184b2:	79 e1       	ldi	r23, 0x19	; 25
   184b4:	0e 94 17 3b 	call	0x762e	; 0x762e <asctime_r>
   184b8:	8c 01       	movw	r16, r24
   184ba:	0e 94 73 30 	call	0x60e6	; 0x60e6 <trim_tail>
   184be:	c8 01       	movw	r24, r16
   184c0:	66 96       	adiw	r28, 0x16	; 22
   184c2:	e4 e0       	ldi	r30, 0x04	; 4
   184c4:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

000184c8 <lif_lifbcd2timestr>:
   184c8:	a4 e0       	ldi	r26, 0x04	; 4
   184ca:	b0 e0       	ldi	r27, 0x00	; 0
   184cc:	ea e6       	ldi	r30, 0x6A	; 106
   184ce:	f2 ec       	ldi	r31, 0xC2	; 194
   184d0:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x20>
   184d4:	20 e2       	ldi	r18, 0x20	; 32
   184d6:	e2 eb       	ldi	r30, 0xB2	; 178
   184d8:	f9 e1       	ldi	r31, 0x19	; 25
   184da:	df 01       	movw	r26, r30
   184dc:	1d 92       	st	X+, r1
   184de:	2a 95       	dec	r18
   184e0:	e9 f7       	brne	.-6      	; 0x184dc <lif_lifbcd2timestr+0x14>
   184e2:	84 df       	rcall	.-248    	; 0x183ec <lif_lifbcd2time>
   184e4:	69 83       	std	Y+1, r22	; 0x01
   184e6:	7a 83       	std	Y+2, r23	; 0x02
   184e8:	8b 83       	std	Y+3, r24	; 0x03
   184ea:	9c 83       	std	Y+4, r25	; 0x04
   184ec:	67 2b       	or	r22, r23
   184ee:	68 2b       	or	r22, r24
   184f0:	69 2b       	or	r22, r25
   184f2:	29 f0       	breq	.+10     	; 0x184fe <lif_lifbcd2timestr+0x36>
   184f4:	ce 01       	movw	r24, r28
   184f6:	01 96       	adiw	r24, 0x01	; 1
   184f8:	c9 df       	rcall	.-110    	; 0x1848c <lif_ctime_gmt>
   184fa:	bc 01       	movw	r22, r24
   184fc:	02 c0       	rjmp	.+4      	; 0x18502 <lif_lifbcd2timestr+0x3a>
   184fe:	64 ef       	ldi	r22, 0xF4	; 244
   18500:	75 e1       	ldi	r23, 0x15	; 21
   18502:	82 eb       	ldi	r24, 0xB2	; 178
   18504:	99 e1       	ldi	r25, 0x19	; 25
   18506:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <strcpy>
   1850a:	82 eb       	ldi	r24, 0xB2	; 178
   1850c:	99 e1       	ldi	r25, 0x19	; 25
   1850e:	24 96       	adiw	r28, 0x04	; 4
   18510:	e2 e0       	ldi	r30, 0x02	; 2
   18512:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

00018516 <lif_image_clear>:
   18516:	20 e7       	ldi	r18, 0x70	; 112
   18518:	fc 01       	movw	r30, r24
   1851a:	11 92       	st	Z+, r1
   1851c:	2a 95       	dec	r18
   1851e:	e9 f7       	brne	.-6      	; 0x1851a <lif_image_clear+0x4>
   18520:	08 95       	ret

00018522 <lif_dir_clear>:
   18522:	81 5b       	subi	r24, 0xB1	; 177
   18524:	9f 4f       	sbci	r25, 0xFF	; 255
   18526:	21 e2       	ldi	r18, 0x21	; 33
   18528:	fc 01       	movw	r30, r24
   1852a:	11 92       	st	Z+, r1
   1852c:	2a 95       	dec	r18
   1852e:	e9 f7       	brne	.-6      	; 0x1852a <lif_dir_clear+0x8>
   18530:	08 95       	ret

00018532 <lif_vol_clear>:
   18532:	84 96       	adiw	r24, 0x24	; 36
   18534:	2b e2       	ldi	r18, 0x2B	; 43
   18536:	fc 01       	movw	r30, r24
   18538:	11 92       	st	Z+, r1
   1853a:	2a 95       	dec	r18
   1853c:	e9 f7       	brne	.-6      	; 0x18538 <lif_vol_clear+0x6>
   1853e:	08 95       	ret

00018540 <lif_dump_vol>:
   18540:	cf 93       	push	r28
   18542:	df 93       	push	r29
   18544:	ad b7       	in	r26, 0x3d	; 61
   18546:	be b7       	in	r27, 0x3e	; 62
   18548:	17 97       	sbiw	r26, 0x07	; 7
   1854a:	0f b6       	in	r0, 0x3f	; 63
   1854c:	f8 94       	cli
   1854e:	be bf       	out	0x3e, r27	; 62
   18550:	0f be       	out	0x3f, r0	; 63
   18552:	ad bf       	out	0x3d, r26	; 61
   18554:	ec 01       	movw	r28, r24
   18556:	ed b7       	in	r30, 0x3d	; 61
   18558:	fe b7       	in	r31, 0x3e	; 62
   1855a:	75 83       	std	Z+5, r23	; 0x05
   1855c:	64 83       	std	Z+4, r22	; 0x04
   1855e:	82 e5       	ldi	r24, 0x52	; 82
   18560:	90 e4       	ldi	r25, 0x40	; 64
   18562:	a0 e0       	ldi	r26, 0x00	; 0
   18564:	81 83       	std	Z+1, r24	; 0x01
   18566:	92 83       	std	Z+2, r25	; 0x02
   18568:	a3 83       	std	Z+3, r26	; 0x03
   1856a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1856e:	88 81       	ld	r24, Y
   18570:	99 81       	ldd	r25, Y+1	; 0x01
   18572:	ed b7       	in	r30, 0x3d	; 61
   18574:	fe b7       	in	r31, 0x3e	; 62
   18576:	95 83       	std	Z+5, r25	; 0x05
   18578:	84 83       	std	Z+4, r24	; 0x04
   1857a:	88 e3       	ldi	r24, 0x38	; 56
   1857c:	90 e4       	ldi	r25, 0x40	; 64
   1857e:	a0 e0       	ldi	r26, 0x00	; 0
   18580:	81 83       	std	Z+1, r24	; 0x01
   18582:	92 83       	std	Z+2, r25	; 0x02
   18584:	a3 83       	std	Z+3, r26	; 0x03
   18586:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1858a:	8c 81       	ldd	r24, Y+4	; 0x04
   1858c:	9d 81       	ldd	r25, Y+5	; 0x05
   1858e:	ae 81       	ldd	r26, Y+6	; 0x06
   18590:	bf 81       	ldd	r27, Y+7	; 0x07
   18592:	ed b7       	in	r30, 0x3d	; 61
   18594:	fe b7       	in	r31, 0x3e	; 62
   18596:	84 83       	std	Z+4, r24	; 0x04
   18598:	95 83       	std	Z+5, r25	; 0x05
   1859a:	a6 83       	std	Z+6, r26	; 0x06
   1859c:	b7 83       	std	Z+7, r27	; 0x07
   1859e:	8b e1       	ldi	r24, 0x1B	; 27
   185a0:	90 e4       	ldi	r25, 0x40	; 64
   185a2:	a0 e0       	ldi	r26, 0x00	; 0
   185a4:	81 83       	std	Z+1, r24	; 0x01
   185a6:	92 83       	std	Z+2, r25	; 0x02
   185a8:	a3 83       	std	Z+3, r26	; 0x03
   185aa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   185ae:	88 85       	ldd	r24, Y+8	; 0x08
   185b0:	99 85       	ldd	r25, Y+9	; 0x09
   185b2:	aa 85       	ldd	r26, Y+10	; 0x0a
   185b4:	bb 85       	ldd	r27, Y+11	; 0x0b
   185b6:	ed b7       	in	r30, 0x3d	; 61
   185b8:	fe b7       	in	r31, 0x3e	; 62
   185ba:	84 83       	std	Z+4, r24	; 0x04
   185bc:	95 83       	std	Z+5, r25	; 0x05
   185be:	a6 83       	std	Z+6, r26	; 0x06
   185c0:	b7 83       	std	Z+7, r27	; 0x07
   185c2:	8e ef       	ldi	r24, 0xFE	; 254
   185c4:	9f e3       	ldi	r25, 0x3F	; 63
   185c6:	a0 e0       	ldi	r26, 0x00	; 0
   185c8:	81 83       	std	Z+1, r24	; 0x01
   185ca:	92 83       	std	Z+2, r25	; 0x02
   185cc:	a3 83       	std	Z+3, r26	; 0x03
   185ce:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   185d2:	8c 85       	ldd	r24, Y+12	; 0x0c
   185d4:	9d 85       	ldd	r25, Y+13	; 0x0d
   185d6:	ae 85       	ldd	r26, Y+14	; 0x0e
   185d8:	bf 85       	ldd	r27, Y+15	; 0x0f
   185da:	ed b7       	in	r30, 0x3d	; 61
   185dc:	fe b7       	in	r31, 0x3e	; 62
   185de:	84 83       	std	Z+4, r24	; 0x04
   185e0:	95 83       	std	Z+5, r25	; 0x05
   185e2:	a6 83       	std	Z+6, r26	; 0x06
   185e4:	b7 83       	std	Z+7, r27	; 0x07
   185e6:	81 ee       	ldi	r24, 0xE1	; 225
   185e8:	9f e3       	ldi	r25, 0x3F	; 63
   185ea:	a0 e0       	ldi	r26, 0x00	; 0
   185ec:	81 83       	std	Z+1, r24	; 0x01
   185ee:	92 83       	std	Z+2, r25	; 0x02
   185f0:	a3 83       	std	Z+3, r26	; 0x03
   185f2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   185f6:	88 89       	ldd	r24, Y+16	; 0x10
   185f8:	99 89       	ldd	r25, Y+17	; 0x11
   185fa:	aa 89       	ldd	r26, Y+18	; 0x12
   185fc:	bb 89       	ldd	r27, Y+19	; 0x13
   185fe:	ed b7       	in	r30, 0x3d	; 61
   18600:	fe b7       	in	r31, 0x3e	; 62
   18602:	84 83       	std	Z+4, r24	; 0x04
   18604:	95 83       	std	Z+5, r25	; 0x05
   18606:	a6 83       	std	Z+6, r26	; 0x06
   18608:	b7 83       	std	Z+7, r27	; 0x07
   1860a:	84 ec       	ldi	r24, 0xC4	; 196
   1860c:	9f e3       	ldi	r25, 0x3F	; 63
   1860e:	a0 e0       	ldi	r26, 0x00	; 0
   18610:	81 83       	std	Z+1, r24	; 0x01
   18612:	92 83       	std	Z+2, r25	; 0x02
   18614:	a3 83       	std	Z+3, r26	; 0x03
   18616:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1861a:	8c 89       	ldd	r24, Y+20	; 0x14
   1861c:	9d 89       	ldd	r25, Y+21	; 0x15
   1861e:	ae 89       	ldd	r26, Y+22	; 0x16
   18620:	bf 89       	ldd	r27, Y+23	; 0x17
   18622:	ed b7       	in	r30, 0x3d	; 61
   18624:	fe b7       	in	r31, 0x3e	; 62
   18626:	84 83       	std	Z+4, r24	; 0x04
   18628:	95 83       	std	Z+5, r25	; 0x05
   1862a:	a6 83       	std	Z+6, r26	; 0x06
   1862c:	b7 83       	std	Z+7, r27	; 0x07
   1862e:	87 ea       	ldi	r24, 0xA7	; 167
   18630:	9f e3       	ldi	r25, 0x3F	; 63
   18632:	a0 e0       	ldi	r26, 0x00	; 0
   18634:	81 83       	std	Z+1, r24	; 0x01
   18636:	92 83       	std	Z+2, r25	; 0x02
   18638:	a3 83       	std	Z+3, r26	; 0x03
   1863a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1863e:	88 8d       	ldd	r24, Y+24	; 0x18
   18640:	99 8d       	ldd	r25, Y+25	; 0x19
   18642:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18644:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18646:	ed b7       	in	r30, 0x3d	; 61
   18648:	fe b7       	in	r31, 0x3e	; 62
   1864a:	84 83       	std	Z+4, r24	; 0x04
   1864c:	95 83       	std	Z+5, r25	; 0x05
   1864e:	a6 83       	std	Z+6, r26	; 0x06
   18650:	b7 83       	std	Z+7, r27	; 0x07
   18652:	8a e8       	ldi	r24, 0x8A	; 138
   18654:	9f e3       	ldi	r25, 0x3F	; 63
   18656:	a0 e0       	ldi	r26, 0x00	; 0
   18658:	81 83       	std	Z+1, r24	; 0x01
   1865a:	92 83       	std	Z+2, r25	; 0x02
   1865c:	a3 83       	std	Z+3, r26	; 0x03
   1865e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18662:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18664:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18666:	09 2e       	mov	r0, r25
   18668:	00 0c       	add	r0, r0
   1866a:	aa 0b       	sbc	r26, r26
   1866c:	bb 0b       	sbc	r27, r27
   1866e:	ed b7       	in	r30, 0x3d	; 61
   18670:	fe b7       	in	r31, 0x3e	; 62
   18672:	84 83       	std	Z+4, r24	; 0x04
   18674:	95 83       	std	Z+5, r25	; 0x05
   18676:	a6 83       	std	Z+6, r26	; 0x06
   18678:	b7 83       	std	Z+7, r27	; 0x07
   1867a:	8d e6       	ldi	r24, 0x6D	; 109
   1867c:	9f e3       	ldi	r25, 0x3F	; 63
   1867e:	a0 e0       	ldi	r26, 0x00	; 0
   18680:	81 83       	std	Z+1, r24	; 0x01
   18682:	92 83       	std	Z+2, r25	; 0x02
   18684:	a3 83       	std	Z+3, r26	; 0x03
   18686:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1868a:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1868c:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1868e:	09 2e       	mov	r0, r25
   18690:	00 0c       	add	r0, r0
   18692:	aa 0b       	sbc	r26, r26
   18694:	bb 0b       	sbc	r27, r27
   18696:	ed b7       	in	r30, 0x3d	; 61
   18698:	fe b7       	in	r31, 0x3e	; 62
   1869a:	84 83       	std	Z+4, r24	; 0x04
   1869c:	95 83       	std	Z+5, r25	; 0x05
   1869e:	a6 83       	std	Z+6, r26	; 0x06
   186a0:	b7 83       	std	Z+7, r27	; 0x07
   186a2:	80 e5       	ldi	r24, 0x50	; 80
   186a4:	9f e3       	ldi	r25, 0x3F	; 63
   186a6:	a0 e0       	ldi	r26, 0x00	; 0
   186a8:	81 83       	std	Z+1, r24	; 0x01
   186aa:	92 83       	std	Z+2, r25	; 0x02
   186ac:	a3 83       	std	Z+3, r26	; 0x03
   186ae:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   186b2:	ce 01       	movw	r24, r28
   186b4:	86 96       	adiw	r24, 0x26	; 38
   186b6:	ed b7       	in	r30, 0x3d	; 61
   186b8:	fe b7       	in	r31, 0x3e	; 62
   186ba:	95 83       	std	Z+5, r25	; 0x05
   186bc:	84 83       	std	Z+4, r24	; 0x04
   186be:	86 e3       	ldi	r24, 0x36	; 54
   186c0:	9f e3       	ldi	r25, 0x3F	; 63
   186c2:	a0 e0       	ldi	r26, 0x00	; 0
   186c4:	81 83       	std	Z+1, r24	; 0x01
   186c6:	92 83       	std	Z+2, r25	; 0x02
   186c8:	a3 83       	std	Z+3, r26	; 0x03
   186ca:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   186ce:	8c a1       	ldd	r24, Y+36	; 0x24
   186d0:	9d a1       	ldd	r25, Y+37	; 0x25
   186d2:	ed b7       	in	r30, 0x3d	; 61
   186d4:	fe b7       	in	r31, 0x3e	; 62
   186d6:	95 83       	std	Z+5, r25	; 0x05
   186d8:	84 83       	std	Z+4, r24	; 0x04
   186da:	8a e1       	ldi	r24, 0x1A	; 26
   186dc:	9f e3       	ldi	r25, 0x3F	; 63
   186de:	a0 e0       	ldi	r26, 0x00	; 0
   186e0:	81 83       	std	Z+1, r24	; 0x01
   186e2:	92 83       	std	Z+2, r25	; 0x02
   186e4:	a3 83       	std	Z+3, r26	; 0x03
   186e6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   186ea:	8d a5       	ldd	r24, Y+45	; 0x2d
   186ec:	9e a5       	ldd	r25, Y+46	; 0x2e
   186ee:	af a5       	ldd	r26, Y+47	; 0x2f
   186f0:	b8 a9       	ldd	r27, Y+48	; 0x30
   186f2:	ed b7       	in	r30, 0x3d	; 61
   186f4:	fe b7       	in	r31, 0x3e	; 62
   186f6:	84 83       	std	Z+4, r24	; 0x04
   186f8:	95 83       	std	Z+5, r25	; 0x05
   186fa:	a6 83       	std	Z+6, r26	; 0x06
   186fc:	b7 83       	std	Z+7, r27	; 0x07
   186fe:	8d ef       	ldi	r24, 0xFD	; 253
   18700:	9e e3       	ldi	r25, 0x3E	; 62
   18702:	a0 e0       	ldi	r26, 0x00	; 0
   18704:	81 83       	std	Z+1, r24	; 0x01
   18706:	92 83       	std	Z+2, r25	; 0x02
   18708:	a3 83       	std	Z+3, r26	; 0x03
   1870a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1870e:	8d a9       	ldd	r24, Y+53	; 0x35
   18710:	9e a9       	ldd	r25, Y+54	; 0x36
   18712:	af a9       	ldd	r26, Y+55	; 0x37
   18714:	b8 ad       	ldd	r27, Y+56	; 0x38
   18716:	ed b7       	in	r30, 0x3d	; 61
   18718:	fe b7       	in	r31, 0x3e	; 62
   1871a:	84 83       	std	Z+4, r24	; 0x04
   1871c:	95 83       	std	Z+5, r25	; 0x05
   1871e:	a6 83       	std	Z+6, r26	; 0x06
   18720:	b7 83       	std	Z+7, r27	; 0x07
   18722:	80 ee       	ldi	r24, 0xE0	; 224
   18724:	9e e3       	ldi	r25, 0x3E	; 62
   18726:	a0 e0       	ldi	r26, 0x00	; 0
   18728:	81 83       	std	Z+1, r24	; 0x01
   1872a:	92 83       	std	Z+2, r25	; 0x02
   1872c:	a3 83       	std	Z+3, r26	; 0x03
   1872e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18732:	89 a9       	ldd	r24, Y+49	; 0x31
   18734:	9a a9       	ldd	r25, Y+50	; 0x32
   18736:	ed b7       	in	r30, 0x3d	; 61
   18738:	fe b7       	in	r31, 0x3e	; 62
   1873a:	95 83       	std	Z+5, r25	; 0x05
   1873c:	84 83       	std	Z+4, r24	; 0x04
   1873e:	84 ec       	ldi	r24, 0xC4	; 196
   18740:	9e e3       	ldi	r25, 0x3E	; 62
   18742:	a0 e0       	ldi	r26, 0x00	; 0
   18744:	81 83       	std	Z+1, r24	; 0x01
   18746:	92 83       	std	Z+2, r25	; 0x02
   18748:	a3 83       	std	Z+3, r26	; 0x03
   1874a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1874e:	89 ad       	ldd	r24, Y+57	; 0x39
   18750:	9a ad       	ldd	r25, Y+58	; 0x3a
   18752:	ed b7       	in	r30, 0x3d	; 61
   18754:	fe b7       	in	r31, 0x3e	; 62
   18756:	95 83       	std	Z+5, r25	; 0x05
   18758:	84 83       	std	Z+4, r24	; 0x04
   1875a:	88 ea       	ldi	r24, 0xA8	; 168
   1875c:	9e e3       	ldi	r25, 0x3E	; 62
   1875e:	a0 e0       	ldi	r26, 0x00	; 0
   18760:	81 83       	std	Z+1, r24	; 0x01
   18762:	92 83       	std	Z+2, r25	; 0x02
   18764:	a3 83       	std	Z+3, r26	; 0x03
   18766:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1876a:	ce 01       	movw	r24, r28
   1876c:	87 5b       	subi	r24, 0xB7	; 183
   1876e:	9f 4f       	sbci	r25, 0xFF	; 255
   18770:	ab de       	rcall	.-682    	; 0x184c8 <lif_lifbcd2timestr>
   18772:	ed b7       	in	r30, 0x3d	; 61
   18774:	fe b7       	in	r31, 0x3e	; 62
   18776:	95 83       	std	Z+5, r25	; 0x05
   18778:	84 83       	std	Z+4, r24	; 0x04
   1877a:	8e e8       	ldi	r24, 0x8E	; 142
   1877c:	9e e3       	ldi	r25, 0x3E	; 62
   1877e:	a0 e0       	ldi	r26, 0x00	; 0
   18780:	81 83       	std	Z+1, r24	; 0x01
   18782:	92 83       	std	Z+2, r25	; 0x02
   18784:	a3 83       	std	Z+3, r26	; 0x03
   18786:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1878a:	ce 01       	movw	r24, r28
   1878c:	81 5b       	subi	r24, 0xB1	; 177
   1878e:	9f 4f       	sbci	r25, 0xFF	; 255
   18790:	ed b7       	in	r30, 0x3d	; 61
   18792:	fe b7       	in	r31, 0x3e	; 62
   18794:	95 83       	std	Z+5, r25	; 0x05
   18796:	84 83       	std	Z+4, r24	; 0x04
   18798:	84 e7       	ldi	r24, 0x74	; 116
   1879a:	9e e3       	ldi	r25, 0x3E	; 62
   1879c:	a0 e0       	ldi	r26, 0x00	; 0
   1879e:	81 83       	std	Z+1, r24	; 0x01
   187a0:	92 83       	std	Z+2, r25	; 0x02
   187a2:	a3 83       	std	Z+3, r26	; 0x03
   187a4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   187a8:	fe 01       	movw	r30, r28
   187aa:	e6 5a       	subi	r30, 0xA6	; 166
   187ac:	ff 4f       	sbci	r31, 0xFF	; 255
   187ae:	80 81       	ld	r24, Z
   187b0:	91 81       	ldd	r25, Z+1	; 0x01
   187b2:	ed b7       	in	r30, 0x3d	; 61
   187b4:	fe b7       	in	r31, 0x3e	; 62
   187b6:	95 83       	std	Z+5, r25	; 0x05
   187b8:	84 83       	std	Z+4, r24	; 0x04
   187ba:	88 e5       	ldi	r24, 0x58	; 88
   187bc:	9e e3       	ldi	r25, 0x3E	; 62
   187be:	a0 e0       	ldi	r26, 0x00	; 0
   187c0:	81 83       	std	Z+1, r24	; 0x01
   187c2:	92 83       	std	Z+2, r25	; 0x02
   187c4:	a3 83       	std	Z+3, r26	; 0x03
   187c6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   187ca:	fe 01       	movw	r30, r28
   187cc:	e6 59       	subi	r30, 0x96	; 150
   187ce:	ff 4f       	sbci	r31, 0xFF	; 255
   187d0:	80 81       	ld	r24, Z
   187d2:	91 81       	ldd	r25, Z+1	; 0x01
   187d4:	ed b7       	in	r30, 0x3d	; 61
   187d6:	fe b7       	in	r31, 0x3e	; 62
   187d8:	95 83       	std	Z+5, r25	; 0x05
   187da:	84 83       	std	Z+4, r24	; 0x04
   187dc:	8c e3       	ldi	r24, 0x3C	; 60
   187de:	9e e3       	ldi	r25, 0x3E	; 62
   187e0:	a0 e0       	ldi	r26, 0x00	; 0
   187e2:	81 83       	std	Z+1, r24	; 0x01
   187e4:	92 83       	std	Z+2, r25	; 0x02
   187e6:	a3 83       	std	Z+3, r26	; 0x03
   187e8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   187ec:	fe 01       	movw	r30, r28
   187ee:	e4 5a       	subi	r30, 0xA4	; 164
   187f0:	ff 4f       	sbci	r31, 0xFF	; 255
   187f2:	80 81       	ld	r24, Z
   187f4:	91 81       	ldd	r25, Z+1	; 0x01
   187f6:	a2 81       	ldd	r26, Z+2	; 0x02
   187f8:	b3 81       	ldd	r27, Z+3	; 0x03
   187fa:	ed b7       	in	r30, 0x3d	; 61
   187fc:	fe b7       	in	r31, 0x3e	; 62
   187fe:	84 83       	std	Z+4, r24	; 0x04
   18800:	95 83       	std	Z+5, r25	; 0x05
   18802:	a6 83       	std	Z+6, r26	; 0x06
   18804:	b7 83       	std	Z+7, r27	; 0x07
   18806:	8f e1       	ldi	r24, 0x1F	; 31
   18808:	9e e3       	ldi	r25, 0x3E	; 62
   1880a:	a0 e0       	ldi	r26, 0x00	; 0
   1880c:	81 83       	std	Z+1, r24	; 0x01
   1880e:	92 83       	std	Z+2, r25	; 0x02
   18810:	a3 83       	std	Z+3, r26	; 0x03
   18812:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18816:	fe 01       	movw	r30, r28
   18818:	e0 5a       	subi	r30, 0xA0	; 160
   1881a:	ff 4f       	sbci	r31, 0xFF	; 255
   1881c:	80 81       	ld	r24, Z
   1881e:	91 81       	ldd	r25, Z+1	; 0x01
   18820:	a2 81       	ldd	r26, Z+2	; 0x02
   18822:	b3 81       	ldd	r27, Z+3	; 0x03
   18824:	ed b7       	in	r30, 0x3d	; 61
   18826:	fe b7       	in	r31, 0x3e	; 62
   18828:	84 83       	std	Z+4, r24	; 0x04
   1882a:	95 83       	std	Z+5, r25	; 0x05
   1882c:	a6 83       	std	Z+6, r26	; 0x06
   1882e:	b7 83       	std	Z+7, r27	; 0x07
   18830:	82 e0       	ldi	r24, 0x02	; 2
   18832:	9e e3       	ldi	r25, 0x3E	; 62
   18834:	a0 e0       	ldi	r26, 0x00	; 0
   18836:	81 83       	std	Z+1, r24	; 0x01
   18838:	92 83       	std	Z+2, r25	; 0x02
   1883a:	a3 83       	std	Z+3, r26	; 0x03
   1883c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18840:	fe 01       	movw	r30, r28
   18842:	e4 59       	subi	r30, 0x94	; 148
   18844:	ff 4f       	sbci	r31, 0xFF	; 255
   18846:	80 81       	ld	r24, Z
   18848:	91 81       	ldd	r25, Z+1	; 0x01
   1884a:	a0 e0       	ldi	r26, 0x00	; 0
   1884c:	b0 e0       	ldi	r27, 0x00	; 0
   1884e:	ed b7       	in	r30, 0x3d	; 61
   18850:	fe b7       	in	r31, 0x3e	; 62
   18852:	84 83       	std	Z+4, r24	; 0x04
   18854:	95 83       	std	Z+5, r25	; 0x05
   18856:	a6 83       	std	Z+6, r26	; 0x06
   18858:	b7 83       	std	Z+7, r27	; 0x07
   1885a:	85 ee       	ldi	r24, 0xE5	; 229
   1885c:	9d e3       	ldi	r25, 0x3D	; 61
   1885e:	a0 e0       	ldi	r26, 0x00	; 0
   18860:	81 83       	std	Z+1, r24	; 0x01
   18862:	92 83       	std	Z+2, r25	; 0x02
   18864:	a3 83       	std	Z+3, r26	; 0x03
   18866:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1886a:	fe 01       	movw	r30, r28
   1886c:	e2 59       	subi	r30, 0x92	; 146
   1886e:	ff 4f       	sbci	r31, 0xFF	; 255
   18870:	80 81       	ld	r24, Z
   18872:	91 81       	ldd	r25, Z+1	; 0x01
   18874:	ed b7       	in	r30, 0x3d	; 61
   18876:	fe b7       	in	r31, 0x3e	; 62
   18878:	95 83       	std	Z+5, r25	; 0x05
   1887a:	84 83       	std	Z+4, r24	; 0x04
   1887c:	89 ec       	ldi	r24, 0xC9	; 201
   1887e:	9d e3       	ldi	r25, 0x3D	; 61
   18880:	a0 e0       	ldi	r26, 0x00	; 0
   18882:	81 83       	std	Z+1, r24	; 0x01
   18884:	92 83       	std	Z+2, r25	; 0x02
   18886:	a3 83       	std	Z+3, r26	; 0x03
   18888:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1888c:	ce 01       	movw	r24, r28
   1888e:	8c 59       	subi	r24, 0x9C	; 156
   18890:	9f 4f       	sbci	r25, 0xFF	; 255
   18892:	1a de       	rcall	.-972    	; 0x184c8 <lif_lifbcd2timestr>
   18894:	ed b7       	in	r30, 0x3d	; 61
   18896:	fe b7       	in	r31, 0x3e	; 62
   18898:	95 83       	std	Z+5, r25	; 0x05
   1889a:	84 83       	std	Z+4, r24	; 0x04
   1889c:	8f ea       	ldi	r24, 0xAF	; 175
   1889e:	9d e3       	ldi	r25, 0x3D	; 61
   188a0:	a0 e0       	ldi	r26, 0x00	; 0
   188a2:	81 83       	std	Z+1, r24	; 0x01
   188a4:	92 83       	std	Z+2, r25	; 0x02
   188a6:	a3 83       	std	Z+3, r26	; 0x03
   188a8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   188ac:	8d ea       	ldi	r24, 0xAD	; 173
   188ae:	9d e3       	ldi	r25, 0x3D	; 61
   188b0:	a0 e0       	ldi	r26, 0x00	; 0
   188b2:	ed b7       	in	r30, 0x3d	; 61
   188b4:	fe b7       	in	r31, 0x3e	; 62
   188b6:	81 83       	std	Z+1, r24	; 0x01
   188b8:	92 83       	std	Z+2, r25	; 0x02
   188ba:	a3 83       	std	Z+3, r26	; 0x03
   188bc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   188c0:	cd b7       	in	r28, 0x3d	; 61
   188c2:	de b7       	in	r29, 0x3e	; 62
   188c4:	27 96       	adiw	r28, 0x07	; 7
   188c6:	e2 e0       	ldi	r30, 0x02	; 2
   188c8:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x20>

000188cc <lif_check_volume>:
   188cc:	0f 93       	push	r16
   188ce:	1f 93       	push	r17
   188d0:	cf 93       	push	r28
   188d2:	df 93       	push	r29
   188d4:	ad b7       	in	r26, 0x3d	; 61
   188d6:	be b7       	in	r27, 0x3e	; 62
   188d8:	17 97       	sbiw	r26, 0x07	; 7
   188da:	0f b6       	in	r0, 0x3f	; 63
   188dc:	f8 94       	cli
   188de:	be bf       	out	0x3e, r27	; 62
   188e0:	0f be       	out	0x3f, r0	; 63
   188e2:	ad bf       	out	0x3d, r26	; 61
   188e4:	ec 01       	movw	r28, r24
   188e6:	86 96       	adiw	r24, 0x26	; 38
   188e8:	e0 da       	rcall	.-2624   	; 0x17eaa <lif_checkname>
   188ea:	89 2b       	or	r24, r25
   188ec:	89 f4       	brne	.+34     	; 0x18910 <lif_check_volume+0x44>
   188ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   188f2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   188f6:	92 ff       	sbrs	r25, 2
   188f8:	0e c0       	rjmp	.+28     	; 0x18916 <lif_check_volume+0x4a>
   188fa:	8e e8       	ldi	r24, 0x8E	; 142
   188fc:	9d e3       	ldi	r25, 0x3D	; 61
   188fe:	a0 e0       	ldi	r26, 0x00	; 0
   18900:	ed b7       	in	r30, 0x3d	; 61
   18902:	fe b7       	in	r31, 0x3e	; 62
   18904:	81 83       	std	Z+1, r24	; 0x01
   18906:	92 83       	std	Z+2, r25	; 0x02
   18908:	a3 83       	std	Z+3, r26	; 0x03
   1890a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1890e:	03 c0       	rjmp	.+6      	; 0x18916 <lif_check_volume+0x4a>
   18910:	81 e0       	ldi	r24, 0x01	; 1
   18912:	90 e0       	ldi	r25, 0x00	; 0
   18914:	02 c0       	rjmp	.+4      	; 0x1891a <lif_check_volume+0x4e>
   18916:	80 e0       	ldi	r24, 0x00	; 0
   18918:	90 e0       	ldi	r25, 0x00	; 0
   1891a:	29 a9       	ldd	r18, Y+49	; 0x31
   1891c:	3a a9       	ldd	r19, Y+50	; 0x32
   1891e:	21 15       	cp	r18, r1
   18920:	f0 e1       	ldi	r31, 0x10	; 16
   18922:	3f 07       	cpc	r19, r31
   18924:	a1 f0       	breq	.+40     	; 0x1894e <lif_check_volume+0x82>
   18926:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1892a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1892e:	92 ff       	sbrs	r25, 2
   18930:	0c c0       	rjmp	.+24     	; 0x1894a <lif_check_volume+0x7e>
   18932:	ed b7       	in	r30, 0x3d	; 61
   18934:	fe b7       	in	r31, 0x3e	; 62
   18936:	35 83       	std	Z+5, r19	; 0x05
   18938:	24 83       	std	Z+4, r18	; 0x04
   1893a:	85 e5       	ldi	r24, 0x55	; 85
   1893c:	9d e3       	ldi	r25, 0x3D	; 61
   1893e:	a0 e0       	ldi	r26, 0x00	; 0
   18940:	81 83       	std	Z+1, r24	; 0x01
   18942:	92 83       	std	Z+2, r25	; 0x02
   18944:	a3 83       	std	Z+3, r26	; 0x03
   18946:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1894a:	80 e0       	ldi	r24, 0x00	; 0
   1894c:	90 e0       	ldi	r25, 0x00	; 0
   1894e:	29 ad       	ldd	r18, Y+57	; 0x39
   18950:	3a ad       	ldd	r19, Y+58	; 0x3a
   18952:	22 30       	cpi	r18, 0x02	; 2
   18954:	31 05       	cpc	r19, r1
   18956:	a0 f0       	brcs	.+40     	; 0x18980 <lif_check_volume+0xb4>
   18958:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1895c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18960:	92 ff       	sbrs	r25, 2
   18962:	0c c0       	rjmp	.+24     	; 0x1897c <lif_check_volume+0xb0>
   18964:	ed b7       	in	r30, 0x3d	; 61
   18966:	fe b7       	in	r31, 0x3e	; 62
   18968:	35 83       	std	Z+5, r19	; 0x05
   1896a:	24 83       	std	Z+4, r18	; 0x04
   1896c:	8d e3       	ldi	r24, 0x3D	; 61
   1896e:	9d e3       	ldi	r25, 0x3D	; 61
   18970:	a0 e0       	ldi	r26, 0x00	; 0
   18972:	81 83       	std	Z+1, r24	; 0x01
   18974:	92 83       	std	Z+2, r25	; 0x02
   18976:	a3 83       	std	Z+3, r26	; 0x03
   18978:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1897c:	80 e0       	ldi	r24, 0x00	; 0
   1897e:	90 e0       	ldi	r25, 0x00	; 0
   18980:	2b a9       	ldd	r18, Y+51	; 0x33
   18982:	3c a9       	ldd	r19, Y+52	; 0x34
   18984:	23 2b       	or	r18, r19
   18986:	91 f0       	breq	.+36     	; 0x189ac <lif_check_volume+0xe0>
   18988:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1898c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18990:	92 ff       	sbrs	r25, 2
   18992:	0a c0       	rjmp	.+20     	; 0x189a8 <lif_check_volume+0xdc>
   18994:	84 e0       	ldi	r24, 0x04	; 4
   18996:	9d e3       	ldi	r25, 0x3D	; 61
   18998:	a0 e0       	ldi	r26, 0x00	; 0
   1899a:	ed b7       	in	r30, 0x3d	; 61
   1899c:	fe b7       	in	r31, 0x3e	; 62
   1899e:	81 83       	std	Z+1, r24	; 0x01
   189a0:	92 83       	std	Z+2, r25	; 0x02
   189a2:	a3 83       	std	Z+3, r26	; 0x03
   189a4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   189a8:	80 e0       	ldi	r24, 0x00	; 0
   189aa:	90 e0       	ldi	r25, 0x00	; 0
   189ac:	2b ad       	ldd	r18, Y+59	; 0x3b
   189ae:	3c ad       	ldd	r19, Y+60	; 0x3c
   189b0:	23 2b       	or	r18, r19
   189b2:	91 f0       	breq	.+36     	; 0x189d8 <lif_check_volume+0x10c>
   189b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189b8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189bc:	92 ff       	sbrs	r25, 2
   189be:	0a c0       	rjmp	.+20     	; 0x189d4 <lif_check_volume+0x108>
   189c0:	8b ec       	ldi	r24, 0xCB	; 203
   189c2:	9c e3       	ldi	r25, 0x3C	; 60
   189c4:	a0 e0       	ldi	r26, 0x00	; 0
   189c6:	ed b7       	in	r30, 0x3d	; 61
   189c8:	fe b7       	in	r31, 0x3e	; 62
   189ca:	81 83       	std	Z+1, r24	; 0x01
   189cc:	92 83       	std	Z+2, r25	; 0x02
   189ce:	a3 83       	std	Z+3, r26	; 0x03
   189d0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   189d4:	80 e0       	ldi	r24, 0x00	; 0
   189d6:	90 e0       	ldi	r25, 0x00	; 0
   189d8:	4d a5       	ldd	r20, Y+45	; 0x2d
   189da:	5e a5       	ldd	r21, Y+46	; 0x2e
   189dc:	6f a5       	ldd	r22, Y+47	; 0x2f
   189de:	78 a9       	ldd	r23, Y+48	; 0x30
   189e0:	45 2b       	or	r20, r21
   189e2:	46 2b       	or	r20, r22
   189e4:	47 2b       	or	r20, r23
   189e6:	b1 f4       	brne	.+44     	; 0x18a14 <lif_check_volume+0x148>
   189e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189f0:	92 ff       	sbrs	r25, 2
   189f2:	0e c0       	rjmp	.+28     	; 0x18a10 <lif_check_volume+0x144>
   189f4:	ed b7       	in	r30, 0x3d	; 61
   189f6:	fe b7       	in	r31, 0x3e	; 62
   189f8:	14 82       	std	Z+4, r1	; 0x04
   189fa:	15 82       	std	Z+5, r1	; 0x05
   189fc:	16 82       	std	Z+6, r1	; 0x06
   189fe:	17 82       	std	Z+7, r1	; 0x07
   18a00:	86 ea       	ldi	r24, 0xA6	; 166
   18a02:	9c e3       	ldi	r25, 0x3C	; 60
   18a04:	a0 e0       	ldi	r26, 0x00	; 0
   18a06:	81 83       	std	Z+1, r24	; 0x01
   18a08:	92 83       	std	Z+2, r25	; 0x02
   18a0a:	a3 83       	std	Z+3, r26	; 0x03
   18a0c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18a10:	80 e0       	ldi	r24, 0x00	; 0
   18a12:	90 e0       	ldi	r25, 0x00	; 0
   18a14:	4d a9       	ldd	r20, Y+53	; 0x35
   18a16:	5e a9       	ldd	r21, Y+54	; 0x36
   18a18:	6f a9       	ldd	r22, Y+55	; 0x37
   18a1a:	78 ad       	ldd	r23, Y+56	; 0x38
   18a1c:	45 2b       	or	r20, r21
   18a1e:	46 2b       	or	r20, r22
   18a20:	47 2b       	or	r20, r23
   18a22:	91 f4       	brne	.+36     	; 0x18a48 <lif_check_volume+0x17c>
   18a24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a28:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a2c:	92 ff       	sbrs	r25, 2
   18a2e:	0a c0       	rjmp	.+20     	; 0x18a44 <lif_check_volume+0x178>
   18a30:	87 e7       	ldi	r24, 0x77	; 119
   18a32:	9c e3       	ldi	r25, 0x3C	; 60
   18a34:	a0 e0       	ldi	r26, 0x00	; 0
   18a36:	ed b7       	in	r30, 0x3d	; 61
   18a38:	fe b7       	in	r31, 0x3e	; 62
   18a3a:	81 83       	std	Z+1, r24	; 0x01
   18a3c:	92 83       	std	Z+2, r25	; 0x02
   18a3e:	a3 83       	std	Z+3, r26	; 0x03
   18a40:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18a44:	80 e0       	ldi	r24, 0x00	; 0
   18a46:	90 e0       	ldi	r25, 0x00	; 0
   18a48:	0d a5       	ldd	r16, Y+45	; 0x2d
   18a4a:	1e a5       	ldd	r17, Y+46	; 0x2e
   18a4c:	2f a5       	ldd	r18, Y+47	; 0x2f
   18a4e:	38 a9       	ldd	r19, Y+48	; 0x30
   18a50:	4d a9       	ldd	r20, Y+53	; 0x35
   18a52:	5e a9       	ldd	r21, Y+54	; 0x36
   18a54:	6f a9       	ldd	r22, Y+55	; 0x37
   18a56:	78 ad       	ldd	r23, Y+56	; 0x38
   18a58:	40 0f       	add	r20, r16
   18a5a:	51 1f       	adc	r21, r17
   18a5c:	62 1f       	adc	r22, r18
   18a5e:	73 1f       	adc	r23, r19
   18a60:	0c 81       	ldd	r16, Y+4	; 0x04
   18a62:	1d 81       	ldd	r17, Y+5	; 0x05
   18a64:	2e 81       	ldd	r18, Y+6	; 0x06
   18a66:	3f 81       	ldd	r19, Y+7	; 0x07
   18a68:	04 17       	cp	r16, r20
   18a6a:	15 07       	cpc	r17, r21
   18a6c:	26 07       	cpc	r18, r22
   18a6e:	37 07       	cpc	r19, r23
   18a70:	90 f4       	brcc	.+36     	; 0x18a96 <lif_check_volume+0x1ca>
   18a72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a76:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a7a:	92 ff       	sbrs	r25, 2
   18a7c:	0a c0       	rjmp	.+20     	; 0x18a92 <lif_check_volume+0x1c6>
   18a7e:	8b e4       	ldi	r24, 0x4B	; 75
   18a80:	9c e3       	ldi	r25, 0x3C	; 60
   18a82:	a0 e0       	ldi	r26, 0x00	; 0
   18a84:	ed b7       	in	r30, 0x3d	; 61
   18a86:	fe b7       	in	r31, 0x3e	; 62
   18a88:	81 83       	std	Z+1, r24	; 0x01
   18a8a:	92 83       	std	Z+2, r25	; 0x02
   18a8c:	a3 83       	std	Z+3, r26	; 0x03
   18a8e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18a92:	80 e0       	ldi	r24, 0x00	; 0
   18a94:	90 e0       	ldi	r25, 0x00	; 0
   18a96:	cd b7       	in	r28, 0x3d	; 61
   18a98:	de b7       	in	r29, 0x3e	; 62
   18a9a:	27 96       	adiw	r28, 0x07	; 7
   18a9c:	e4 e0       	ldi	r30, 0x04	; 4
   18a9e:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1c>

00018aa2 <lif_check_dir>:
   18aa2:	a5 e1       	ldi	r26, 0x15	; 21
   18aa4:	b0 e0       	ldi	r27, 0x00	; 0
   18aa6:	e7 e5       	ldi	r30, 0x57	; 87
   18aa8:	f5 ec       	ldi	r31, 0xC5	; 197
   18aaa:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   18aae:	6c 01       	movw	r12, r24
   18ab0:	2a e5       	ldi	r18, 0x5A	; 90
   18ab2:	c2 0e       	add	r12, r18
   18ab4:	d1 1c       	adc	r13, r1
   18ab6:	f6 01       	movw	r30, r12
   18ab8:	20 81       	ld	r18, Z
   18aba:	31 81       	ldd	r19, Z+1	; 0x01
   18abc:	21 50       	subi	r18, 0x01	; 1
   18abe:	31 09       	sbc	r19, r1
   18ac0:	2e 3f       	cpi	r18, 0xFE	; 254
   18ac2:	3f 4f       	sbci	r19, 0xFF	; 255
   18ac4:	08 f0       	brcs	.+2      	; 0x18ac8 <lif_check_dir+0x26>
   18ac6:	9a c1       	rjmp	.+820    	; 0x18dfc <lif_check_dir+0x35a>
   18ac8:	9d 8b       	std	Y+21, r25	; 0x15
   18aca:	8c 8b       	std	Y+20, r24	; 0x14
   18acc:	7c 01       	movw	r14, r24
   18ace:	2f e4       	ldi	r18, 0x4F	; 79
   18ad0:	e2 0e       	add	r14, r18
   18ad2:	f1 1c       	adc	r15, r1
   18ad4:	c7 01       	movw	r24, r14
   18ad6:	e9 d9       	rcall	.-3118   	; 0x17eaa <lif_checkname>
   18ad8:	89 2b       	or	r24, r25
   18ada:	99 f4       	brne	.+38     	; 0x18b02 <lif_check_dir+0x60>
   18adc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ae0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ae4:	92 ff       	sbrs	r25, 2
   18ae6:	0f c0       	rjmp	.+30     	; 0x18b06 <lif_check_dir+0x64>
   18ae8:	ed b7       	in	r30, 0x3d	; 61
   18aea:	fe b7       	in	r31, 0x3e	; 62
   18aec:	f5 82       	std	Z+5, r15	; 0x05
   18aee:	e4 82       	std	Z+4, r14	; 0x04
   18af0:	8a e2       	ldi	r24, 0x2A	; 42
   18af2:	9c e3       	ldi	r25, 0x3C	; 60
   18af4:	a0 e0       	ldi	r26, 0x00	; 0
   18af6:	81 83       	std	Z+1, r24	; 0x01
   18af8:	92 83       	std	Z+2, r25	; 0x02
   18afa:	a3 83       	std	Z+3, r26	; 0x03
   18afc:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18b00:	02 c0       	rjmp	.+4      	; 0x18b06 <lif_check_dir+0x64>
   18b02:	01 e0       	ldi	r16, 0x01	; 1
   18b04:	01 c0       	rjmp	.+2      	; 0x18b08 <lif_check_dir+0x66>
   18b06:	00 e0       	ldi	r16, 0x00	; 0
   18b08:	10 e0       	ldi	r17, 0x00	; 0
   18b0a:	ec 89       	ldd	r30, Y+20	; 0x14
   18b0c:	fd 89       	ldd	r31, Y+21	; 0x15
   18b0e:	84 85       	ldd	r24, Z+12	; 0x0c
   18b10:	95 85       	ldd	r25, Z+13	; 0x0d
   18b12:	a6 85       	ldd	r26, Z+14	; 0x0e
   18b14:	b7 85       	ldd	r27, Z+15	; 0x0f
   18b16:	00 97       	sbiw	r24, 0x00	; 0
   18b18:	a1 05       	cpc	r26, r1
   18b1a:	b1 05       	cpc	r27, r1
   18b1c:	39 f1       	breq	.+78     	; 0x18b6c <lif_check_dir+0xca>
   18b1e:	e4 5a       	subi	r30, 0xA4	; 164
   18b20:	ff 4f       	sbci	r31, 0xFF	; 255
   18b22:	40 81       	ld	r20, Z
   18b24:	51 81       	ldd	r21, Z+1	; 0x01
   18b26:	62 81       	ldd	r22, Z+2	; 0x02
   18b28:	73 81       	ldd	r23, Z+3	; 0x03
   18b2a:	48 17       	cp	r20, r24
   18b2c:	59 07       	cpc	r21, r25
   18b2e:	6a 07       	cpc	r22, r26
   18b30:	7b 07       	cpc	r23, r27
   18b32:	e0 f4       	brcc	.+56     	; 0x18b6c <lif_check_dir+0xca>
   18b34:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18b38:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b3c:	32 ff       	sbrs	r19, 2
   18b3e:	14 c0       	rjmp	.+40     	; 0x18b68 <lif_check_dir+0xc6>
   18b40:	ed b7       	in	r30, 0x3d	; 61
   18b42:	fe b7       	in	r31, 0x3e	; 62
   18b44:	82 87       	std	Z+10, r24	; 0x0a
   18b46:	93 87       	std	Z+11, r25	; 0x0b
   18b48:	a4 87       	std	Z+12, r26	; 0x0c
   18b4a:	b5 87       	std	Z+13, r27	; 0x0d
   18b4c:	46 83       	std	Z+6, r20	; 0x06
   18b4e:	57 83       	std	Z+7, r21	; 0x07
   18b50:	60 87       	std	Z+8, r22	; 0x08
   18b52:	71 87       	std	Z+9, r23	; 0x09
   18b54:	f5 82       	std	Z+5, r15	; 0x05
   18b56:	e4 82       	std	Z+4, r14	; 0x04
   18b58:	86 ee       	ldi	r24, 0xE6	; 230
   18b5a:	9b e3       	ldi	r25, 0x3B	; 59
   18b5c:	a0 e0       	ldi	r26, 0x00	; 0
   18b5e:	81 83       	std	Z+1, r24	; 0x01
   18b60:	92 83       	std	Z+2, r25	; 0x02
   18b62:	a3 83       	std	Z+3, r26	; 0x03
   18b64:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18b68:	00 e0       	ldi	r16, 0x00	; 0
   18b6a:	10 e0       	ldi	r17, 0x00	; 0
   18b6c:	ec 89       	ldd	r30, Y+20	; 0x14
   18b6e:	fd 89       	ldd	r31, Y+21	; 0x15
   18b70:	44 81       	ldd	r20, Z+4	; 0x04
   18b72:	55 81       	ldd	r21, Z+5	; 0x05
   18b74:	66 81       	ldd	r22, Z+6	; 0x06
   18b76:	77 81       	ldd	r23, Z+7	; 0x07
   18b78:	41 15       	cp	r20, r1
   18b7a:	51 05       	cpc	r21, r1
   18b7c:	61 05       	cpc	r22, r1
   18b7e:	71 05       	cpc	r23, r1
   18b80:	99 f1       	breq	.+102    	; 0x18be8 <lif_check_dir+0x146>
   18b82:	e4 5a       	subi	r30, 0xA4	; 164
   18b84:	ff 4f       	sbci	r31, 0xFF	; 255
   18b86:	80 80       	ld	r8, Z
   18b88:	91 80       	ldd	r9, Z+1	; 0x01
   18b8a:	a2 80       	ldd	r10, Z+2	; 0x02
   18b8c:	b3 80       	ldd	r11, Z+3	; 0x03
   18b8e:	ec 89       	ldd	r30, Y+20	; 0x14
   18b90:	fd 89       	ldd	r31, Y+21	; 0x15
   18b92:	e0 5a       	subi	r30, 0xA0	; 160
   18b94:	ff 4f       	sbci	r31, 0xFF	; 255
   18b96:	80 81       	ld	r24, Z
   18b98:	91 81       	ldd	r25, Z+1	; 0x01
   18b9a:	a2 81       	ldd	r26, Z+2	; 0x02
   18b9c:	b3 81       	ldd	r27, Z+3	; 0x03
   18b9e:	88 0d       	add	r24, r8
   18ba0:	99 1d       	adc	r25, r9
   18ba2:	aa 1d       	adc	r26, r10
   18ba4:	bb 1d       	adc	r27, r11
   18ba6:	48 17       	cp	r20, r24
   18ba8:	59 07       	cpc	r21, r25
   18baa:	6a 07       	cpc	r22, r26
   18bac:	7b 07       	cpc	r23, r27
   18bae:	e0 f4       	brcc	.+56     	; 0x18be8 <lif_check_dir+0x146>
   18bb0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18bb4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bb8:	32 ff       	sbrs	r19, 2
   18bba:	14 c0       	rjmp	.+40     	; 0x18be4 <lif_check_dir+0x142>
   18bbc:	ed b7       	in	r30, 0x3d	; 61
   18bbe:	fe b7       	in	r31, 0x3e	; 62
   18bc0:	42 87       	std	Z+10, r20	; 0x0a
   18bc2:	53 87       	std	Z+11, r21	; 0x0b
   18bc4:	64 87       	std	Z+12, r22	; 0x0c
   18bc6:	75 87       	std	Z+13, r23	; 0x0d
   18bc8:	86 83       	std	Z+6, r24	; 0x06
   18bca:	97 83       	std	Z+7, r25	; 0x07
   18bcc:	a0 87       	std	Z+8, r26	; 0x08
   18bce:	b1 87       	std	Z+9, r27	; 0x09
   18bd0:	f5 82       	std	Z+5, r15	; 0x05
   18bd2:	e4 82       	std	Z+4, r14	; 0x04
   18bd4:	85 ea       	ldi	r24, 0xA5	; 165
   18bd6:	9b e3       	ldi	r25, 0x3B	; 59
   18bd8:	a0 e0       	ldi	r26, 0x00	; 0
   18bda:	81 83       	std	Z+1, r24	; 0x01
   18bdc:	92 83       	std	Z+2, r25	; 0x02
   18bde:	a3 83       	std	Z+3, r26	; 0x03
   18be0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18be4:	00 e0       	ldi	r16, 0x00	; 0
   18be6:	10 e0       	ldi	r17, 0x00	; 0
   18be8:	ec 89       	ldd	r30, Y+20	; 0x14
   18bea:	fd 89       	ldd	r31, Y+21	; 0x15
   18bec:	e6 59       	subi	r30, 0x96	; 150
   18bee:	ff 4f       	sbci	r31, 0xFF	; 255
   18bf0:	80 81       	ld	r24, Z
   18bf2:	91 81       	ldd	r25, Z+1	; 0x01
   18bf4:	81 30       	cpi	r24, 0x01	; 1
   18bf6:	f0 e8       	ldi	r31, 0x80	; 128
   18bf8:	9f 07       	cpc	r25, r31
   18bfa:	b1 f0       	breq	.+44     	; 0x18c28 <lif_check_dir+0x186>
   18bfc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18c00:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c04:	32 ff       	sbrs	r19, 2
   18c06:	0e c0       	rjmp	.+28     	; 0x18c24 <lif_check_dir+0x182>
   18c08:	ed b7       	in	r30, 0x3d	; 61
   18c0a:	fe b7       	in	r31, 0x3e	; 62
   18c0c:	97 83       	std	Z+7, r25	; 0x07
   18c0e:	86 83       	std	Z+6, r24	; 0x06
   18c10:	f5 82       	std	Z+5, r15	; 0x05
   18c12:	e4 82       	std	Z+4, r14	; 0x04
   18c14:	87 e7       	ldi	r24, 0x77	; 119
   18c16:	9b e3       	ldi	r25, 0x3B	; 59
   18c18:	a0 e0       	ldi	r26, 0x00	; 0
   18c1a:	81 83       	std	Z+1, r24	; 0x01
   18c1c:	92 83       	std	Z+2, r25	; 0x02
   18c1e:	a3 83       	std	Z+3, r26	; 0x03
   18c20:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18c24:	00 e0       	ldi	r16, 0x00	; 0
   18c26:	10 e0       	ldi	r17, 0x00	; 0
   18c28:	f6 01       	movw	r30, r12
   18c2a:	80 81       	ld	r24, Z
   18c2c:	91 81       	ldd	r25, Z+1	; 0x01
   18c2e:	8c 7f       	andi	r24, 0xFC	; 252
   18c30:	80 31       	cpi	r24, 0x10	; 16
   18c32:	90 4e       	sbci	r25, 0xE0	; 224
   18c34:	09 f0       	breq	.+2      	; 0x18c38 <lif_check_dir+0x196>
   18c36:	b3 c0       	rjmp	.+358    	; 0x18d9e <lif_check_dir+0x2fc>
   18c38:	cc 88       	ldd	r12, Y+20	; 0x14
   18c3a:	dd 88       	ldd	r13, Y+21	; 0x15
   18c3c:	2c e6       	ldi	r18, 0x6C	; 108
   18c3e:	c2 0e       	add	r12, r18
   18c40:	d1 1c       	adc	r13, r1
   18c42:	f6 01       	movw	r30, r12
   18c44:	80 81       	ld	r24, Z
   18c46:	91 81       	ldd	r25, Z+1	; 0x01
   18c48:	00 97       	sbiw	r24, 0x00	; 0
   18c4a:	09 f4       	brne	.+2      	; 0x18c4e <lif_check_dir+0x1ac>
   18c4c:	a8 c0       	rjmp	.+336    	; 0x18d9e <lif_check_dir+0x2fc>
   18c4e:	4c 01       	movw	r8, r24
   18c50:	a1 2c       	mov	r10, r1
   18c52:	b1 2c       	mov	r11, r1
   18c54:	77 27       	eor	r23, r23
   18c56:	6b 2d       	mov	r22, r11
   18c58:	5a 2d       	mov	r21, r10
   18c5a:	49 2d       	mov	r20, r9
   18c5c:	9c 01       	movw	r18, r24
   18c5e:	33 27       	eor	r19, r19
   18c60:	3b 8b       	std	Y+19, r19	; 0x13
   18c62:	2a 8b       	std	Y+18, r18	; 0x12
   18c64:	db 01       	movw	r26, r22
   18c66:	ca 01       	movw	r24, r20
   18c68:	23 2b       	or	r18, r19
   18c6a:	19 f0       	breq	.+6      	; 0x18c72 <lif_check_dir+0x1d0>
   18c6c:	01 96       	adiw	r24, 0x01	; 1
   18c6e:	a1 1d       	adc	r26, r1
   18c70:	b1 1d       	adc	r27, r1
   18c72:	2c 88       	ldd	r2, Y+20	; 0x14
   18c74:	3d 88       	ldd	r3, Y+21	; 0x15
   18c76:	30 e6       	ldi	r19, 0x60	; 96
   18c78:	23 0e       	add	r2, r19
   18c7a:	31 1c       	adc	r3, r1
   18c7c:	f1 01       	movw	r30, r2
   18c7e:	40 80       	ld	r4, Z
   18c80:	51 80       	ldd	r5, Z+1	; 0x01
   18c82:	62 80       	ldd	r6, Z+2	; 0x02
   18c84:	73 80       	ldd	r7, Z+3	; 0x03
   18c86:	48 16       	cp	r4, r24
   18c88:	59 06       	cpc	r5, r25
   18c8a:	6a 06       	cpc	r6, r26
   18c8c:	7b 06       	cpc	r7, r27
   18c8e:	40 f5       	brcc	.+80     	; 0x18ce0 <lif_check_dir+0x23e>
   18c90:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18c94:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c98:	32 ff       	sbrs	r19, 2
   18c9a:	20 c0       	rjmp	.+64     	; 0x18cdc <lif_check_dir+0x23a>
   18c9c:	2a 89       	ldd	r18, Y+18	; 0x12
   18c9e:	3b 89       	ldd	r19, Y+19	; 0x13
   18ca0:	23 2b       	or	r18, r19
   18ca2:	21 f0       	breq	.+8      	; 0x18cac <lif_check_dir+0x20a>
   18ca4:	4f 5f       	subi	r20, 0xFF	; 255
   18ca6:	5f 4f       	sbci	r21, 0xFF	; 255
   18ca8:	6f 4f       	sbci	r22, 0xFF	; 255
   18caa:	7f 4f       	sbci	r23, 0xFF	; 255
   18cac:	ed b7       	in	r30, 0x3d	; 61
   18cae:	fe b7       	in	r31, 0x3e	; 62
   18cb0:	46 86       	std	Z+14, r4	; 0x0e
   18cb2:	57 86       	std	Z+15, r5	; 0x0f
   18cb4:	60 8a       	std	Z+16, r6	; 0x10
   18cb6:	71 8a       	std	Z+17, r7	; 0x11
   18cb8:	42 87       	std	Z+10, r20	; 0x0a
   18cba:	53 87       	std	Z+11, r21	; 0x0b
   18cbc:	64 87       	std	Z+12, r22	; 0x0c
   18cbe:	75 87       	std	Z+13, r23	; 0x0d
   18cc0:	86 82       	std	Z+6, r8	; 0x06
   18cc2:	97 82       	std	Z+7, r9	; 0x07
   18cc4:	a0 86       	std	Z+8, r10	; 0x08
   18cc6:	b1 86       	std	Z+9, r11	; 0x09
   18cc8:	f5 82       	std	Z+5, r15	; 0x05
   18cca:	e4 82       	std	Z+4, r14	; 0x04
   18ccc:	8c e2       	ldi	r24, 0x2C	; 44
   18cce:	9b e3       	ldi	r25, 0x3B	; 59
   18cd0:	a0 e0       	ldi	r26, 0x00	; 0
   18cd2:	81 83       	std	Z+1, r24	; 0x01
   18cd4:	92 83       	std	Z+2, r25	; 0x02
   18cd6:	a3 83       	std	Z+3, r26	; 0x03
   18cd8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18cdc:	00 e0       	ldi	r16, 0x00	; 0
   18cde:	10 e0       	ldi	r17, 0x00	; 0
   18ce0:	f6 01       	movw	r30, r12
   18ce2:	20 81       	ld	r18, Z
   18ce4:	31 81       	ldd	r19, Z+1	; 0x01
   18ce6:	a9 01       	movw	r20, r18
   18ce8:	60 e0       	ldi	r22, 0x00	; 0
   18cea:	70 e0       	ldi	r23, 0x00	; 0
   18cec:	bb 27       	eor	r27, r27
   18cee:	a7 2f       	mov	r26, r23
   18cf0:	96 2f       	mov	r25, r22
   18cf2:	85 2f       	mov	r24, r21
   18cf4:	f9 01       	movw	r30, r18
   18cf6:	ff 27       	eor	r31, r31
   18cf8:	fb 8b       	std	Y+19, r31	; 0x13
   18cfa:	ea 8b       	std	Y+18, r30	; 0x12
   18cfc:	2c 01       	movw	r4, r24
   18cfe:	3d 01       	movw	r6, r26
   18d00:	ef 2b       	or	r30, r31
   18d02:	29 f0       	breq	.+10     	; 0x18d0e <lif_check_dir+0x26c>
   18d04:	ff ef       	ldi	r31, 0xFF	; 255
   18d06:	4f 1a       	sub	r4, r31
   18d08:	5f 0a       	sbc	r5, r31
   18d0a:	6f 0a       	sbc	r6, r31
   18d0c:	7f 0a       	sbc	r7, r31
   18d0e:	f1 01       	movw	r30, r2
   18d10:	80 80       	ld	r8, Z
   18d12:	91 80       	ldd	r9, Z+1	; 0x01
   18d14:	a2 80       	ldd	r10, Z+2	; 0x02
   18d16:	b3 80       	ldd	r11, Z+3	; 0x03
   18d18:	48 14       	cp	r4, r8
   18d1a:	59 04       	cpc	r5, r9
   18d1c:	6a 04       	cpc	r6, r10
   18d1e:	7b 04       	cpc	r7, r11
   18d20:	28 f5       	brcc	.+74     	; 0x18d6c <lif_check_dir+0x2ca>
   18d22:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d26:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d2a:	32 ff       	sbrs	r19, 2
   18d2c:	1f c0       	rjmp	.+62     	; 0x18d6c <lif_check_dir+0x2ca>
   18d2e:	2a 89       	ldd	r18, Y+18	; 0x12
   18d30:	3b 89       	ldd	r19, Y+19	; 0x13
   18d32:	23 2b       	or	r18, r19
   18d34:	19 f0       	breq	.+6      	; 0x18d3c <lif_check_dir+0x29a>
   18d36:	01 96       	adiw	r24, 0x01	; 1
   18d38:	a1 1d       	adc	r26, r1
   18d3a:	b1 1d       	adc	r27, r1
   18d3c:	ed b7       	in	r30, 0x3d	; 61
   18d3e:	fe b7       	in	r31, 0x3e	; 62
   18d40:	86 86       	std	Z+14, r8	; 0x0e
   18d42:	97 86       	std	Z+15, r9	; 0x0f
   18d44:	a0 8a       	std	Z+16, r10	; 0x10
   18d46:	b1 8a       	std	Z+17, r11	; 0x11
   18d48:	82 87       	std	Z+10, r24	; 0x0a
   18d4a:	93 87       	std	Z+11, r25	; 0x0b
   18d4c:	a4 87       	std	Z+12, r26	; 0x0c
   18d4e:	b5 87       	std	Z+13, r27	; 0x0d
   18d50:	46 83       	std	Z+6, r20	; 0x06
   18d52:	57 83       	std	Z+7, r21	; 0x07
   18d54:	60 87       	std	Z+8, r22	; 0x08
   18d56:	71 87       	std	Z+9, r23	; 0x09
   18d58:	f5 82       	std	Z+5, r15	; 0x05
   18d5a:	e4 82       	std	Z+4, r14	; 0x04
   18d5c:	81 ee       	ldi	r24, 0xE1	; 225
   18d5e:	9a e3       	ldi	r25, 0x3A	; 58
   18d60:	a0 e0       	ldi	r26, 0x00	; 0
   18d62:	81 83       	std	Z+1, r24	; 0x01
   18d64:	92 83       	std	Z+2, r25	; 0x02
   18d66:	a3 83       	std	Z+3, r26	; 0x03
   18d68:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18d6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18d70:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d74:	92 ff       	sbrs	r25, 2
   18d76:	13 c0       	rjmp	.+38     	; 0x18d9e <lif_check_dir+0x2fc>
   18d78:	f6 01       	movw	r30, r12
   18d7a:	80 81       	ld	r24, Z
   18d7c:	91 81       	ldd	r25, Z+1	; 0x01
   18d7e:	89 2b       	or	r24, r25
   18d80:	71 f4       	brne	.+28     	; 0x18d9e <lif_check_dir+0x2fc>
   18d82:	ed b7       	in	r30, 0x3d	; 61
   18d84:	fe b7       	in	r31, 0x3e	; 62
   18d86:	f5 82       	std	Z+5, r15	; 0x05
   18d88:	e4 82       	std	Z+4, r14	; 0x04
   18d8a:	86 eb       	ldi	r24, 0xB6	; 182
   18d8c:	9a e3       	ldi	r25, 0x3A	; 58
   18d8e:	a0 e0       	ldi	r26, 0x00	; 0
   18d90:	81 83       	std	Z+1, r24	; 0x01
   18d92:	92 83       	std	Z+2, r25	; 0x02
   18d94:	a3 83       	std	Z+3, r26	; 0x03
   18d96:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18d9a:	00 e0       	ldi	r16, 0x00	; 0
   18d9c:	10 e0       	ldi	r17, 0x00	; 0
   18d9e:	ec 89       	ldd	r30, Y+20	; 0x14
   18da0:	fd 89       	ldd	r31, Y+21	; 0x15
   18da2:	e2 59       	subi	r30, 0x92	; 146
   18da4:	ff 4f       	sbci	r31, 0xFF	; 255
   18da6:	20 81       	ld	r18, Z
   18da8:	31 81       	ldd	r19, Z+1	; 0x01
   18daa:	21 15       	cp	r18, r1
   18dac:	f1 e0       	ldi	r31, 0x01	; 1
   18dae:	3f 07       	cpc	r19, r31
   18db0:	41 f1       	breq	.+80     	; 0x18e02 <lif_check_dir+0x360>
   18db2:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18db6:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18dba:	ca 01       	movw	r24, r20
   18dbc:	88 27       	eor	r24, r24
   18dbe:	94 70       	andi	r25, 0x04	; 4
   18dc0:	52 ff       	sbrs	r21, 2
   18dc2:	20 c0       	rjmp	.+64     	; 0x18e04 <lif_check_dir+0x362>
   18dc4:	c9 01       	movw	r24, r18
   18dc6:	a0 e0       	ldi	r26, 0x00	; 0
   18dc8:	b0 e0       	ldi	r27, 0x00	; 0
   18dca:	ed b7       	in	r30, 0x3d	; 61
   18dcc:	fe b7       	in	r31, 0x3e	; 62
   18dce:	86 83       	std	Z+6, r24	; 0x06
   18dd0:	97 83       	std	Z+7, r25	; 0x07
   18dd2:	a0 87       	std	Z+8, r26	; 0x08
   18dd4:	b1 87       	std	Z+9, r27	; 0x09
   18dd6:	ec 89       	ldd	r30, Y+20	; 0x14
   18dd8:	fd 89       	ldd	r31, Y+21	; 0x15
   18dda:	80 81       	ld	r24, Z
   18ddc:	91 81       	ldd	r25, Z+1	; 0x01
   18dde:	ed b7       	in	r30, 0x3d	; 61
   18de0:	fe b7       	in	r31, 0x3e	; 62
   18de2:	95 83       	std	Z+5, r25	; 0x05
   18de4:	84 83       	std	Z+4, r24	; 0x04
   18de6:	8a e8       	ldi	r24, 0x8A	; 138
   18de8:	9a e3       	ldi	r25, 0x3A	; 58
   18dea:	a0 e0       	ldi	r26, 0x00	; 0
   18dec:	81 83       	std	Z+1, r24	; 0x01
   18dee:	92 83       	std	Z+2, r25	; 0x02
   18df0:	a3 83       	std	Z+3, r26	; 0x03
   18df2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18df6:	80 e0       	ldi	r24, 0x00	; 0
   18df8:	90 e0       	ldi	r25, 0x00	; 0
   18dfa:	04 c0       	rjmp	.+8      	; 0x18e04 <lif_check_dir+0x362>
   18dfc:	81 e0       	ldi	r24, 0x01	; 1
   18dfe:	90 e0       	ldi	r25, 0x00	; 0
   18e00:	01 c0       	rjmp	.+2      	; 0x18e04 <lif_check_dir+0x362>
   18e02:	c8 01       	movw	r24, r16
   18e04:	65 96       	adiw	r28, 0x15	; 21
   18e06:	e2 e1       	ldi	r30, 0x12	; 18
   18e08:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00018e0c <lif_close_volume>:
   18e0c:	cf 93       	push	r28
   18e0e:	df 93       	push	r29
   18e10:	00 97       	sbiw	r24, 0x00	; 0
   18e12:	f9 f0       	breq	.+62     	; 0x18e52 <lif_close_volume+0x46>
   18e14:	ec 01       	movw	r28, r24
   18e16:	8a 81       	ldd	r24, Y+2	; 0x02
   18e18:	9b 81       	ldd	r25, Y+3	; 0x03
   18e1a:	00 97       	sbiw	r24, 0x00	; 0
   18e1c:	79 f0       	breq	.+30     	; 0x18e3c <lif_close_volume+0x30>
   18e1e:	22 e0       	ldi	r18, 0x02	; 2
   18e20:	30 e0       	ldi	r19, 0x00	; 0
   18e22:	40 e0       	ldi	r20, 0x00	; 0
   18e24:	50 e0       	ldi	r21, 0x00	; 0
   18e26:	ba 01       	movw	r22, r20
   18e28:	0e 94 4f 79 	call	0xf29e	; 0xf29e <fseek>
   18e2c:	8a 81       	ldd	r24, Y+2	; 0x02
   18e2e:	9b 81       	ldd	r25, Y+3	; 0x03
   18e30:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>
   18e34:	1b 82       	std	Y+3, r1	; 0x03
   18e36:	1a 82       	std	Y+2, r1	; 0x02
   18e38:	0e 94 32 7a 	call	0xf464	; 0xf464 <sync>
   18e3c:	88 81       	ld	r24, Y
   18e3e:	99 81       	ldd	r25, Y+1	; 0x01
   18e40:	00 97       	sbiw	r24, 0x00	; 0
   18e42:	11 f0       	breq	.+4      	; 0x18e48 <lif_close_volume+0x3c>
   18e44:	0e 94 82 bd 	call	0x17b04	; 0x17b04 <lif_free>
   18e48:	ce 01       	movw	r24, r28
   18e4a:	73 db       	rcall	.-2330   	; 0x18532 <lif_vol_clear>
   18e4c:	ce 01       	movw	r24, r28
   18e4e:	0e 94 82 bd 	call	0x17b04	; 0x17b04 <lif_free>
   18e52:	df 91       	pop	r29
   18e54:	cf 91       	pop	r28
   18e56:	08 95       	ret

00018e58 <lif_checkdirindex>:
   18e58:	cf 92       	push	r12
   18e5a:	df 92       	push	r13
   18e5c:	ef 92       	push	r14
   18e5e:	ff 92       	push	r15
   18e60:	cf 93       	push	r28
   18e62:	df 93       	push	r29
   18e64:	ad b7       	in	r26, 0x3d	; 61
   18e66:	be b7       	in	r27, 0x3e	; 62
   18e68:	17 97       	sbiw	r26, 0x07	; 7
   18e6a:	0f b6       	in	r0, 0x3f	; 63
   18e6c:	f8 94       	cli
   18e6e:	be bf       	out	0x3e, r27	; 62
   18e70:	0f be       	out	0x3f, r0	; 63
   18e72:	ad bf       	out	0x3d, r26	; 61
   18e74:	9b 01       	movw	r18, r22
   18e76:	77 fd       	sbrc	r23, 7
   18e78:	25 c0       	rjmp	.+74     	; 0x18ec4 <lif_checkdirindex+0x6c>
   18e7a:	ab 01       	movw	r20, r22
   18e7c:	77 0f       	add	r23, r23
   18e7e:	66 0b       	sbc	r22, r22
   18e80:	77 0b       	sbc	r23, r23
   18e82:	e5 e0       	ldi	r30, 0x05	; 5
   18e84:	44 0f       	add	r20, r20
   18e86:	55 1f       	adc	r21, r21
   18e88:	66 1f       	adc	r22, r22
   18e8a:	77 1f       	adc	r23, r23
   18e8c:	ea 95       	dec	r30
   18e8e:	d1 f7       	brne	.-12     	; 0x18e84 <lif_checkdirindex+0x2c>
   18e90:	c5 2e       	mov	r12, r21
   18e92:	d6 2e       	mov	r13, r22
   18e94:	e7 2e       	mov	r14, r23
   18e96:	ff 24       	eor	r15, r15
   18e98:	55 27       	eor	r21, r21
   18e9a:	66 27       	eor	r22, r22
   18e9c:	77 27       	eor	r23, r23
   18e9e:	45 2b       	or	r20, r21
   18ea0:	46 2b       	or	r20, r22
   18ea2:	47 2b       	or	r20, r23
   18ea4:	29 f0       	breq	.+10     	; 0x18eb0 <lif_checkdirindex+0x58>
   18ea6:	4f ef       	ldi	r20, 0xFF	; 255
   18ea8:	c4 1a       	sub	r12, r20
   18eaa:	d4 0a       	sbc	r13, r20
   18eac:	e4 0a       	sbc	r14, r20
   18eae:	f4 0a       	sbc	r15, r20
   18eb0:	fc 01       	movw	r30, r24
   18eb2:	45 a9       	ldd	r20, Z+53	; 0x35
   18eb4:	56 a9       	ldd	r21, Z+54	; 0x36
   18eb6:	67 a9       	ldd	r22, Z+55	; 0x37
   18eb8:	70 ad       	ldd	r23, Z+56	; 0x38
   18eba:	4c 15       	cp	r20, r12
   18ebc:	5d 05       	cpc	r21, r13
   18ebe:	6e 05       	cpc	r22, r14
   18ec0:	7f 05       	cpc	r23, r15
   18ec2:	08 f5       	brcc	.+66     	; 0x18f06 <lif_checkdirindex+0xae>
   18ec4:	ec 01       	movw	r28, r24
   18ec6:	ed b7       	in	r30, 0x3d	; 61
   18ec8:	fe b7       	in	r31, 0x3e	; 62
   18eca:	37 83       	std	Z+7, r19	; 0x07
   18ecc:	26 83       	std	Z+6, r18	; 0x06
   18ece:	88 81       	ld	r24, Y
   18ed0:	99 81       	ldd	r25, Y+1	; 0x01
   18ed2:	95 83       	std	Z+5, r25	; 0x05
   18ed4:	84 83       	std	Z+4, r24	; 0x04
   18ed6:	87 ec       	ldi	r24, 0xC7	; 199
   18ed8:	99 e3       	ldi	r25, 0x39	; 57
   18eda:	a0 e0       	ldi	r26, 0x00	; 0
   18edc:	81 83       	std	Z+1, r24	; 0x01
   18ede:	92 83       	std	Z+2, r25	; 0x02
   18ee0:	a3 83       	std	Z+3, r26	; 0x03
   18ee2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18ee6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18eea:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18eee:	c9 01       	movw	r24, r18
   18ef0:	88 27       	eor	r24, r24
   18ef2:	94 70       	andi	r25, 0x04	; 4
   18ef4:	32 ff       	sbrs	r19, 2
   18ef6:	09 c0       	rjmp	.+18     	; 0x18f0a <lif_checkdirindex+0xb2>
   18ef8:	6c ef       	ldi	r22, 0xFC	; 252
   18efa:	75 e1       	ldi	r23, 0x15	; 21
   18efc:	ce 01       	movw	r24, r28
   18efe:	20 db       	rcall	.-2496   	; 0x18540 <lif_dump_vol>
   18f00:	80 e0       	ldi	r24, 0x00	; 0
   18f02:	90 e0       	ldi	r25, 0x00	; 0
   18f04:	02 c0       	rjmp	.+4      	; 0x18f0a <lif_checkdirindex+0xb2>
   18f06:	81 e0       	ldi	r24, 0x01	; 1
   18f08:	90 e0       	ldi	r25, 0x00	; 0
   18f0a:	ad b7       	in	r26, 0x3d	; 61
   18f0c:	be b7       	in	r27, 0x3e	; 62
   18f0e:	17 96       	adiw	r26, 0x07	; 7
   18f10:	0f b6       	in	r0, 0x3f	; 63
   18f12:	f8 94       	cli
   18f14:	be bf       	out	0x3e, r27	; 62
   18f16:	0f be       	out	0x3f, r0	; 63
   18f18:	ad bf       	out	0x3d, r26	; 61
   18f1a:	df 91       	pop	r29
   18f1c:	cf 91       	pop	r28
   18f1e:	ff 90       	pop	r15
   18f20:	ef 90       	pop	r14
   18f22:	df 90       	pop	r13
   18f24:	cf 90       	pop	r12
   18f26:	08 95       	ret

00018f28 <lif_readdirindex>:
   18f28:	a5 e2       	ldi	r26, 0x25	; 37
   18f2a:	b0 e0       	ldi	r27, 0x00	; 0
   18f2c:	ea e9       	ldi	r30, 0x9A	; 154
   18f2e:	f7 ec       	ldi	r31, 0xC7	; 199
   18f30:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
   18f34:	7c 01       	movw	r14, r24
   18f36:	6b 01       	movw	r12, r22
   18f38:	8f df       	rcall	.-226    	; 0x18e58 <lif_checkdirindex>
   18f3a:	89 2b       	or	r24, r25
   18f3c:	19 f4       	brne	.+6      	; 0x18f44 <lif_readdirindex+0x1c>
   18f3e:	00 e0       	ldi	r16, 0x00	; 0
   18f40:	10 e0       	ldi	r17, 0x00	; 0
   18f42:	54 c0       	rjmp	.+168    	; 0x18fec <lif_readdirindex+0xc4>
   18f44:	f7 01       	movw	r30, r14
   18f46:	85 a5       	ldd	r24, Z+45	; 0x2d
   18f48:	96 a5       	ldd	r25, Z+46	; 0x2e
   18f4a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18f4c:	b0 a9       	ldd	r27, Z+48	; 0x30
   18f4e:	44 27       	eor	r20, r20
   18f50:	58 2f       	mov	r21, r24
   18f52:	69 2f       	mov	r22, r25
   18f54:	7a 2f       	mov	r23, r26
   18f56:	c6 01       	movw	r24, r12
   18f58:	0d 2c       	mov	r0, r13
   18f5a:	00 0c       	add	r0, r0
   18f5c:	aa 0b       	sbc	r26, r26
   18f5e:	bb 0b       	sbc	r27, r27
   18f60:	35 e0       	ldi	r19, 0x05	; 5
   18f62:	88 0f       	add	r24, r24
   18f64:	99 1f       	adc	r25, r25
   18f66:	aa 1f       	adc	r26, r26
   18f68:	bb 1f       	adc	r27, r27
   18f6a:	3a 95       	dec	r19
   18f6c:	d1 f7       	brne	.-12     	; 0x18f62 <lif_readdirindex+0x3a>
   18f6e:	9a 01       	movw	r18, r20
   18f70:	ab 01       	movw	r20, r22
   18f72:	28 0f       	add	r18, r24
   18f74:	39 1f       	adc	r19, r25
   18f76:	4a 1f       	adc	r20, r26
   18f78:	5b 1f       	adc	r21, r27
   18f7a:	00 e2       	ldi	r16, 0x20	; 32
   18f7c:	10 e0       	ldi	r17, 0x00	; 0
   18f7e:	be 01       	movw	r22, r28
   18f80:	6a 5f       	subi	r22, 0xFA	; 250
   18f82:	7f 4f       	sbci	r23, 0xFF	; 255
   18f84:	c7 01       	movw	r24, r14
   18f86:	0e 94 3a be 	call	0x17c74	; 0x17c74 <lif_read>
   18f8a:	60 32       	cpi	r22, 0x20	; 32
   18f8c:	71 05       	cpc	r23, r1
   18f8e:	81 05       	cpc	r24, r1
   18f90:	91 05       	cpc	r25, r1
   18f92:	a8 f2       	brcs	.-86     	; 0x18f3e <lif_readdirindex+0x16>
   18f94:	b7 01       	movw	r22, r14
   18f96:	ce 01       	movw	r24, r28
   18f98:	06 96       	adiw	r24, 0x06	; 6
   18f9a:	75 d9       	rcall	.-3350   	; 0x18286 <lif_str2dir>
   18f9c:	f7 01       	movw	r30, r14
   18f9e:	e6 5a       	subi	r30, 0xA6	; 166
   18fa0:	ff 4f       	sbci	r31, 0xFF	; 255
   18fa2:	80 81       	ld	r24, Z
   18fa4:	91 81       	ldd	r25, Z+1	; 0x01
   18fa6:	01 96       	adiw	r24, 0x01	; 1
   18fa8:	19 f4       	brne	.+6      	; 0x18fb0 <lif_readdirindex+0x88>
   18faa:	f7 01       	movw	r30, r14
   18fac:	d3 a2       	std	Z+35, r13	; 0x23
   18fae:	c2 a2       	std	Z+34, r12	; 0x22
   18fb0:	c7 01       	movw	r24, r14
   18fb2:	77 dd       	rcall	.-1298   	; 0x18aa2 <lif_check_dir>
   18fb4:	8c 01       	movw	r16, r24
   18fb6:	89 2b       	or	r24, r25
   18fb8:	b9 f4       	brne	.+46     	; 0x18fe8 <lif_readdirindex+0xc0>
   18fba:	ed b7       	in	r30, 0x3d	; 61
   18fbc:	fe b7       	in	r31, 0x3e	; 62
   18fbe:	d5 82       	std	Z+5, r13	; 0x05
   18fc0:	c4 82       	std	Z+4, r12	; 0x04
   18fc2:	87 ea       	ldi	r24, 0xA7	; 167
   18fc4:	99 e3       	ldi	r25, 0x39	; 57
   18fc6:	a0 e0       	ldi	r26, 0x00	; 0
   18fc8:	81 83       	std	Z+1, r24	; 0x01
   18fca:	92 83       	std	Z+2, r25	; 0x02
   18fcc:	a3 83       	std	Z+3, r26	; 0x03
   18fce:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   18fd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fd6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18fda:	92 ff       	sbrs	r25, 2
   18fdc:	b0 cf       	rjmp	.-160    	; 0x18f3e <lif_readdirindex+0x16>
   18fde:	6d e0       	ldi	r22, 0x0D	; 13
   18fe0:	76 e1       	ldi	r23, 0x16	; 22
   18fe2:	c7 01       	movw	r24, r14
   18fe4:	ad da       	rcall	.-2726   	; 0x18540 <lif_dump_vol>
   18fe6:	02 c0       	rjmp	.+4      	; 0x18fec <lif_readdirindex+0xc4>
   18fe8:	01 e0       	ldi	r16, 0x01	; 1
   18fea:	10 e0       	ldi	r17, 0x00	; 0
   18fec:	c8 01       	movw	r24, r16
   18fee:	a5 96       	adiw	r28, 0x25	; 37
   18ff0:	e8 e0       	ldi	r30, 0x08	; 8
   18ff2:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

00018ff6 <lif_writedirindex>:
   18ff6:	a0 e2       	ldi	r26, 0x20	; 32
   18ff8:	b0 e0       	ldi	r27, 0x00	; 0
   18ffa:	e1 e0       	ldi	r30, 0x01	; 1
   18ffc:	f8 ec       	ldi	r31, 0xC8	; 200
   18ffe:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
   19002:	5c 01       	movw	r10, r24
   19004:	6b 01       	movw	r12, r22
   19006:	4d dd       	rcall	.-1382   	; 0x18aa2 <lif_check_dir>
   19008:	7c 01       	movw	r14, r24
   1900a:	89 2b       	or	r24, r25
   1900c:	71 f4       	brne	.+28     	; 0x1902a <lif_writedirindex+0x34>
   1900e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19012:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19016:	92 fd       	sbrc	r25, 2
   19018:	03 c0       	rjmp	.+6      	; 0x19020 <lif_writedirindex+0x2a>
   1901a:	e1 2c       	mov	r14, r1
   1901c:	f1 2c       	mov	r15, r1
   1901e:	42 c0       	rjmp	.+132    	; 0x190a4 <lif_writedirindex+0xae>
   19020:	6e e1       	ldi	r22, 0x1E	; 30
   19022:	76 e1       	ldi	r23, 0x16	; 22
   19024:	c5 01       	movw	r24, r10
   19026:	8c da       	rcall	.-2792   	; 0x18540 <lif_dump_vol>
   19028:	3d c0       	rjmp	.+122    	; 0x190a4 <lif_writedirindex+0xae>
   1902a:	b6 01       	movw	r22, r12
   1902c:	c5 01       	movw	r24, r10
   1902e:	14 df       	rcall	.-472    	; 0x18e58 <lif_checkdirindex>
   19030:	89 2b       	or	r24, r25
   19032:	99 f3       	breq	.-26     	; 0x1901a <lif_writedirindex+0x24>
   19034:	f5 01       	movw	r30, r10
   19036:	e6 5a       	subi	r30, 0xA6	; 166
   19038:	ff 4f       	sbci	r31, 0xFF	; 255
   1903a:	80 81       	ld	r24, Z
   1903c:	91 81       	ldd	r25, Z+1	; 0x01
   1903e:	01 96       	adiw	r24, 0x01	; 1
   19040:	19 f4       	brne	.+6      	; 0x19048 <lif_writedirindex+0x52>
   19042:	f5 01       	movw	r30, r10
   19044:	d3 a2       	std	Z+35, r13	; 0x23
   19046:	c2 a2       	std	Z+34, r12	; 0x22
   19048:	f5 01       	movw	r30, r10
   1904a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1904c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1904e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19050:	b0 a9       	ldd	r27, Z+48	; 0x30
   19052:	ba 2f       	mov	r27, r26
   19054:	a9 2f       	mov	r26, r25
   19056:	98 2f       	mov	r25, r24
   19058:	88 27       	eor	r24, r24
   1905a:	0d 2c       	mov	r0, r13
   1905c:	00 0c       	add	r0, r0
   1905e:	ee 08       	sbc	r14, r14
   19060:	ff 08       	sbc	r15, r15
   19062:	35 e0       	ldi	r19, 0x05	; 5
   19064:	cc 0c       	add	r12, r12
   19066:	dd 1c       	adc	r13, r13
   19068:	ee 1c       	adc	r14, r14
   1906a:	ff 1c       	adc	r15, r15
   1906c:	3a 95       	dec	r19
   1906e:	d1 f7       	brne	.-12     	; 0x19064 <lif_writedirindex+0x6e>
   19070:	c8 0e       	add	r12, r24
   19072:	d9 1e       	adc	r13, r25
   19074:	ea 1e       	adc	r14, r26
   19076:	fb 1e       	adc	r15, r27
   19078:	be 01       	movw	r22, r28
   1907a:	6f 5f       	subi	r22, 0xFF	; 255
   1907c:	7f 4f       	sbci	r23, 0xFF	; 255
   1907e:	c5 01       	movw	r24, r10
   19080:	97 d8       	rcall	.-3794   	; 0x181b0 <lif_dir2str>
   19082:	00 e2       	ldi	r16, 0x20	; 32
   19084:	10 e0       	ldi	r17, 0x00	; 0
   19086:	a7 01       	movw	r20, r14
   19088:	96 01       	movw	r18, r12
   1908a:	be 01       	movw	r22, r28
   1908c:	6f 5f       	subi	r22, 0xFF	; 255
   1908e:	7f 4f       	sbci	r23, 0xFF	; 255
   19090:	c5 01       	movw	r24, r10
   19092:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
   19096:	31 e0       	ldi	r19, 0x01	; 1
   19098:	20 e0       	ldi	r18, 0x00	; 0
   1909a:	80 97       	sbiw	r24, 0x20	; 32
   1909c:	0c f4       	brge	.+2      	; 0x190a0 <lif_writedirindex+0xaa>
   1909e:	30 e0       	ldi	r19, 0x00	; 0
   190a0:	e3 2e       	mov	r14, r19
   190a2:	f2 2e       	mov	r15, r18
   190a4:	c7 01       	movw	r24, r14
   190a6:	a0 96       	adiw	r28, 0x20	; 32
   190a8:	ea e0       	ldi	r30, 0x0A	; 10
   190aa:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

000190ae <lif_writedirEOF>:
   190ae:	0f 93       	push	r16
   190b0:	1f 93       	push	r17
   190b2:	cf 93       	push	r28
   190b4:	df 93       	push	r29
   190b6:	ec 01       	movw	r28, r24
   190b8:	8b 01       	movw	r16, r22
   190ba:	33 da       	rcall	.-2970   	; 0x18522 <lif_dir_clear>
   190bc:	fe 01       	movw	r30, r28
   190be:	e6 5a       	subi	r30, 0xA6	; 166
   190c0:	ff 4f       	sbci	r31, 0xFF	; 255
   190c2:	8f ef       	ldi	r24, 0xFF	; 255
   190c4:	9f ef       	ldi	r25, 0xFF	; 255
   190c6:	91 83       	std	Z+1, r25	; 0x01
   190c8:	80 83       	st	Z, r24
   190ca:	1b a3       	std	Y+35, r17	; 0x23
   190cc:	0a a3       	std	Y+34, r16	; 0x22
   190ce:	b8 01       	movw	r22, r16
   190d0:	ce 01       	movw	r24, r28
   190d2:	91 df       	rcall	.-222    	; 0x18ff6 <lif_writedirindex>
   190d4:	df 91       	pop	r29
   190d6:	cf 91       	pop	r28
   190d8:	1f 91       	pop	r17
   190da:	0f 91       	pop	r16
   190dc:	08 95       	ret

000190de <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   190de:	2f 92       	push	r2
   190e0:	3f 92       	push	r3
   190e2:	4f 92       	push	r4
   190e4:	5f 92       	push	r5
   190e6:	6f 92       	push	r6
   190e8:	7f 92       	push	r7
   190ea:	8f 92       	push	r8
   190ec:	af 92       	push	r10
   190ee:	bf 92       	push	r11
   190f0:	cf 92       	push	r12
   190f2:	df 92       	push	r13
   190f4:	ef 92       	push	r14
   190f6:	ff 92       	push	r15
   190f8:	0f 93       	push	r16
   190fa:	1f 93       	push	r17
   190fc:	cf 93       	push	r28
   190fe:	df 93       	push	r29
   19100:	cd b7       	in	r28, 0x3d	; 61
   19102:	de b7       	in	r29, 0x3e	; 62
   19104:	2f 97       	sbiw	r28, 0x0f	; 15
   19106:	0f b6       	in	r0, 0x3f	; 63
   19108:	f8 94       	cli
   1910a:	de bf       	out	0x3e, r29	; 62
   1910c:	0f be       	out	0x3f, r0	; 63
   1910e:	cd bf       	out	0x3d, r28	; 61
   19110:	9f 87       	std	Y+15, r25	; 0x0f
   19112:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19114:	fc 01       	movw	r30, r24
   19116:	24 84       	ldd	r2, Z+12	; 0x0c
   19118:	35 84       	ldd	r3, Z+13	; 0x0d
   1911a:	46 84       	ldd	r4, Z+14	; 0x0e
   1911c:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   1911e:	80 89       	ldd	r24, Z+16	; 0x10
   19120:	91 89       	ldd	r25, Z+17	; 0x11
   19122:	a2 89       	ldd	r26, Z+18	; 0x12
   19124:	b3 89       	ldd	r27, Z+19	; 0x13
   19126:	80 8f       	std	Z+24, r24	; 0x18
   19128:	91 8f       	std	Z+25, r25	; 0x19
   1912a:	a2 8f       	std	Z+26, r26	; 0x1a
   1912c:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   1912e:	14 8a       	std	Z+20, r1	; 0x14
   19130:	15 8a       	std	Z+21, r1	; 0x15
   19132:	16 8a       	std	Z+22, r1	; 0x16
   19134:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   19136:	17 8e       	std	Z+31, r1	; 0x1f
   19138:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   1913a:	15 8e       	std	Z+29, r1	; 0x1d
   1913c:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   1913e:	11 a2       	std	Z+33, r1	; 0x21
   19140:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19142:	13 a2       	std	Z+35, r1	; 0x23
   19144:	12 a2       	std	Z+34, r1	; 0x22
   19146:	cc 24       	eor	r12, r12
   19148:	c3 94       	inc	r12
   1914a:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   1914c:	0f ef       	ldi	r16, 0xFF	; 255
   1914e:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   19150:	e6 5a       	subi	r30, 0xA6	; 166
   19152:	ff 4f       	sbci	r31, 0xFF	; 255
   19154:	f9 87       	std	Y+9, r31	; 0x09
   19156:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19158:	ae 84       	ldd	r10, Y+14	; 0x0e
   1915a:	bf 84       	ldd	r11, Y+15	; 0x0f
   1915c:	fc e5       	ldi	r31, 0x5C	; 92
   1915e:	af 0e       	add	r10, r31
   19160:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19162:	8e 85       	ldd	r24, Y+14	; 0x0e
   19164:	9f 85       	ldd	r25, Y+15	; 0x0f
   19166:	80 5a       	subi	r24, 0xA0	; 160
   19168:	9f 4f       	sbci	r25, 0xFF	; 255
   1916a:	9b 87       	std	Y+11, r25	; 0x0b
   1916c:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1916e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19170:	ff 85       	ldd	r31, Y+15	; 0x0f
   19172:	e1 5b       	subi	r30, 0xB1	; 177
   19174:	ff 4f       	sbci	r31, 0xFF	; 255
   19176:	fd 87       	std	Y+13, r31	; 0x0d
   19178:	ec 87       	std	Y+12, r30	; 0x0c
   1917a:	8a e5       	ldi	r24, 0x5A	; 90
   1917c:	99 e3       	ldi	r25, 0x39	; 57
   1917e:	3c 01       	movw	r6, r24
   19180:	81 2c       	mov	r8, r1
   19182:	76 01       	movw	r14, r12
   19184:	21 e0       	ldi	r18, 0x01	; 1
   19186:	e2 1a       	sub	r14, r18
   19188:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   1918a:	b7 01       	movw	r22, r14
   1918c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1918e:	9f 85       	ldd	r25, Y+15	; 0x0f
   19190:	cb de       	rcall	.-618    	; 0x18f28 <lif_readdirindex>
   19192:	89 2b       	or	r24, r25
   19194:	19 f4       	brne	.+6      	; 0x1919c <lif_updatefree+0xbe>
        {
            return(NULL);
   19196:	80 e0       	ldi	r24, 0x00	; 0
   19198:	90 e0       	ldi	r25, 0x00	; 0
   1919a:	93 c0       	rjmp	.+294    	; 0x192c2 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   1919c:	e8 85       	ldd	r30, Y+8	; 0x08
   1919e:	f9 85       	ldd	r31, Y+9	; 0x09
   191a0:	80 81       	ld	r24, Z
   191a2:	91 81       	ldd	r25, Z+1	; 0x01
   191a4:	8f 3f       	cpi	r24, 0xFF	; 255
   191a6:	ff ef       	ldi	r31, 0xFF	; 255
   191a8:	9f 07       	cpc	r25, r31
   191aa:	c1 f4       	brne	.+48     	; 0x191dc <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   191ac:	ee 85       	ldd	r30, Y+14	; 0x0e
   191ae:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   191b0:	0f 3f       	cpi	r16, 0xFF	; 255
   191b2:	2f ef       	ldi	r18, 0xFF	; 255
   191b4:	12 07       	cpc	r17, r18
   191b6:	09 f4       	brne	.+2      	; 0x191ba <lif_updatefree+0xdc>
   191b8:	7a c0       	rjmp	.+244    	; 0x192ae <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   191ba:	13 a3       	std	Z+35, r17	; 0x23
   191bc:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   191be:	e0 1a       	sub	r14, r16
   191c0:	f1 0a       	sbc	r15, r17
   191c2:	86 8d       	ldd	r24, Z+30	; 0x1e
   191c4:	97 8d       	ldd	r25, Z+31	; 0x1f
   191c6:	8e 19       	sub	r24, r14
   191c8:	9f 09       	sbc	r25, r15
   191ca:	97 8f       	std	Z+31, r25	; 0x1f
   191cc:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   191ce:	b8 01       	movw	r22, r16
   191d0:	cf 01       	movw	r24, r30
   191d2:	6d df       	rcall	.-294    	; 0x190ae <lif_writedirEOF>
   191d4:	89 2b       	or	r24, r25
   191d6:	09 f0       	breq	.+2      	; 0x191da <lif_updatefree+0xfc>
   191d8:	6c c0       	rjmp	.+216    	; 0x192b2 <lif_updatefree+0x1d4>
   191da:	dd cf       	rjmp	.-70     	; 0x19196 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   191dc:	89 2b       	or	r24, r25
   191de:	81 f4       	brne	.+32     	; 0x19200 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   191e0:	0f 3f       	cpi	r16, 0xFF	; 255
   191e2:	ff ef       	ldi	r31, 0xFF	; 255
   191e4:	1f 07       	cpc	r17, r31
   191e6:	09 f4       	brne	.+2      	; 0x191ea <lif_updatefree+0x10c>
   191e8:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   191ea:	ee 85       	ldd	r30, Y+14	; 0x0e
   191ec:	ff 85       	ldd	r31, Y+15	; 0x0f
   191ee:	86 8d       	ldd	r24, Z+30	; 0x1e
   191f0:	97 8d       	ldd	r25, Z+31	; 0x1f
   191f2:	01 96       	adiw	r24, 0x01	; 1
   191f4:	97 8f       	std	Z+31, r25	; 0x1f
   191f6:	86 8f       	std	Z+30, r24	; 0x1e
   191f8:	ff ef       	ldi	r31, 0xFF	; 255
   191fa:	cf 1a       	sub	r12, r31
   191fc:	df 0a       	sbc	r13, r31
   191fe:	c1 cf       	rjmp	.-126    	; 0x19182 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19200:	f5 01       	movw	r30, r10
   19202:	80 81       	ld	r24, Z
   19204:	91 81       	ldd	r25, Z+1	; 0x01
   19206:	a2 81       	ldd	r26, Z+2	; 0x02
   19208:	b3 81       	ldd	r27, Z+3	; 0x03
   1920a:	82 15       	cp	r24, r2
   1920c:	93 05       	cpc	r25, r3
   1920e:	a4 05       	cpc	r26, r4
   19210:	b5 05       	cpc	r27, r5
   19212:	c8 f4       	brcc	.+50     	; 0x19246 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19214:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19218:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1921c:	92 ff       	sbrs	r25, 2
   1921e:	13 c0       	rjmp	.+38     	; 0x19246 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19220:	8c 85       	ldd	r24, Y+12	; 0x0c
   19222:	9d 85       	ldd	r25, Y+13	; 0x0d
   19224:	ed b7       	in	r30, 0x3d	; 61
   19226:	fe b7       	in	r31, 0x3e	; 62
   19228:	97 83       	std	Z+7, r25	; 0x07
   1922a:	86 83       	std	Z+6, r24	; 0x06
   1922c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1922e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19230:	80 81       	ld	r24, Z
   19232:	91 81       	ldd	r25, Z+1	; 0x01
   19234:	ed b7       	in	r30, 0x3d	; 61
   19236:	fe b7       	in	r31, 0x3e	; 62
   19238:	95 83       	std	Z+5, r25	; 0x05
   1923a:	84 83       	std	Z+4, r24	; 0x04
   1923c:	61 82       	std	Z+1, r6	; 0x01
   1923e:	72 82       	std	Z+2, r7	; 0x02
   19240:	83 82       	std	Z+3, r8	; 0x03
   19242:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19246:	ea 85       	ldd	r30, Y+10	; 0x0a
   19248:	fb 85       	ldd	r31, Y+11	; 0x0b
   1924a:	80 81       	ld	r24, Z
   1924c:	91 81       	ldd	r25, Z+1	; 0x01
   1924e:	a2 81       	ldd	r26, Z+2	; 0x02
   19250:	b3 81       	ldd	r27, Z+3	; 0x03
   19252:	ee 85       	ldd	r30, Y+14	; 0x0e
   19254:	ff 85       	ldd	r31, Y+15	; 0x0f
   19256:	44 89       	ldd	r20, Z+20	; 0x14
   19258:	55 89       	ldd	r21, Z+21	; 0x15
   1925a:	66 89       	ldd	r22, Z+22	; 0x16
   1925c:	77 89       	ldd	r23, Z+23	; 0x17
   1925e:	48 0f       	add	r20, r24
   19260:	59 1f       	adc	r21, r25
   19262:	6a 1f       	adc	r22, r26
   19264:	7b 1f       	adc	r23, r27
   19266:	44 8b       	std	Z+20, r20	; 0x14
   19268:	55 8b       	std	Z+21, r21	; 0x15
   1926a:	66 8b       	std	Z+22, r22	; 0x16
   1926c:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   1926e:	40 8d       	ldd	r20, Z+24	; 0x18
   19270:	51 8d       	ldd	r21, Z+25	; 0x19
   19272:	62 8d       	ldd	r22, Z+26	; 0x1a
   19274:	73 8d       	ldd	r23, Z+27	; 0x1b
   19276:	48 1b       	sub	r20, r24
   19278:	59 0b       	sbc	r21, r25
   1927a:	6a 0b       	sbc	r22, r26
   1927c:	7b 0b       	sbc	r23, r27
   1927e:	40 8f       	std	Z+24, r20	; 0x18
   19280:	51 8f       	std	Z+25, r21	; 0x19
   19282:	62 8f       	std	Z+26, r22	; 0x1a
   19284:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19286:	24 8d       	ldd	r18, Z+28	; 0x1c
   19288:	35 8d       	ldd	r19, Z+29	; 0x1d
   1928a:	2f 5f       	subi	r18, 0xFF	; 255
   1928c:	3f 4f       	sbci	r19, 0xFF	; 255
   1928e:	35 8f       	std	Z+29, r19	; 0x1d
   19290:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19292:	f5 01       	movw	r30, r10
   19294:	40 81       	ld	r20, Z
   19296:	51 81       	ldd	r21, Z+1	; 0x01
   19298:	62 81       	ldd	r22, Z+2	; 0x02
   1929a:	73 81       	ldd	r23, Z+3	; 0x03
   1929c:	1c 01       	movw	r2, r24
   1929e:	2d 01       	movw	r4, r26
   192a0:	24 0e       	add	r2, r20
   192a2:	35 1e       	adc	r3, r21
   192a4:	46 1e       	adc	r4, r22
   192a6:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   192a8:	0f ef       	ldi	r16, 0xFF	; 255
   192aa:	1f ef       	ldi	r17, 0xFF	; 255
   192ac:	a5 cf       	rjmp	.-182    	; 0x191f8 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   192ae:	f3 a2       	std	Z+35, r15	; 0x23
   192b0:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   192b2:	8f ef       	ldi	r24, 0xFF	; 255
   192b4:	9f ef       	ldi	r25, 0xFF	; 255
   192b6:	ee 85       	ldd	r30, Y+14	; 0x0e
   192b8:	ff 85       	ldd	r31, Y+15	; 0x0f
   192ba:	91 a3       	std	Z+33, r25	; 0x21
   192bc:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   192be:	8e 85       	ldd	r24, Y+14	; 0x0e
   192c0:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   192c2:	2f 96       	adiw	r28, 0x0f	; 15
   192c4:	0f b6       	in	r0, 0x3f	; 63
   192c6:	f8 94       	cli
   192c8:	de bf       	out	0x3e, r29	; 62
   192ca:	0f be       	out	0x3f, r0	; 63
   192cc:	cd bf       	out	0x3d, r28	; 61
   192ce:	df 91       	pop	r29
   192d0:	cf 91       	pop	r28
   192d2:	1f 91       	pop	r17
   192d4:	0f 91       	pop	r16
   192d6:	ff 90       	pop	r15
   192d8:	ef 90       	pop	r14
   192da:	df 90       	pop	r13
   192dc:	cf 90       	pop	r12
   192de:	bf 90       	pop	r11
   192e0:	af 90       	pop	r10
   192e2:	8f 90       	pop	r8
   192e4:	7f 90       	pop	r7
   192e6:	6f 90       	pop	r6
   192e8:	5f 90       	pop	r5
   192ea:	4f 90       	pop	r4
   192ec:	3f 90       	pop	r3
   192ee:	2f 90       	pop	r2
   192f0:	08 95       	ret

000192f2 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   192f2:	a9 e2       	ldi	r26, 0x29	; 41
   192f4:	b1 e0       	ldi	r27, 0x01	; 1
   192f6:	ef e7       	ldi	r30, 0x7F	; 127
   192f8:	f9 ec       	ldi	r31, 0xC9	; 201
   192fa:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   192fe:	4c 01       	movw	r8, r24
   19300:	3b 01       	movw	r6, r22
   19302:	19 01       	movw	r2, r18
   19304:	2a 01       	movw	r4, r20
   19306:	ca 5d       	subi	r28, 0xDA	; 218
   19308:	de 4f       	sbci	r29, 0xFE	; 254
   1930a:	e8 82       	st	Y, r14
   1930c:	f9 82       	std	Y+1, r15	; 0x01
   1930e:	0a 83       	std	Y+2, r16	; 0x02
   19310:	1b 83       	std	Y+3, r17	; 0x03
   19312:	c6 52       	subi	r28, 0x26	; 38
   19314:	d1 40       	sbci	r29, 0x01	; 1
   19316:	c2 5e       	subi	r28, 0xE2	; 226
   19318:	de 4f       	sbci	r29, 0xFE	; 254
   1931a:	a8 82       	st	Y, r10
   1931c:	b9 82       	std	Y+1, r11	; 0x01
   1931e:	ca 82       	std	Y+2, r12	; 0x02
   19320:	db 82       	std	Y+3, r13	; 0x03
   19322:	ce 51       	subi	r28, 0x1E	; 30
   19324:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19326:	80 e0       	ldi	r24, 0x00	; 0
   19328:	90 e0       	ldi	r25, 0x00	; 0
   1932a:	0e 94 56 36 	call	0x6cac	; 0x6cac <time>
   1932e:	5b 01       	movw	r10, r22
   19330:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19332:	64 e7       	ldi	r22, 0x74	; 116
   19334:	70 e0       	ldi	r23, 0x00	; 0
   19336:	80 e0       	ldi	r24, 0x00	; 0
   19338:	90 e0       	ldi	r25, 0x00	; 0
   1933a:	0e 94 4c bd 	call	0x17a98	; 0x17a98 <lif_calloc>
   1933e:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19340:	89 2b       	or	r24, r25
   19342:	09 f4       	brne	.+2      	; 0x19346 <lif_create_volume+0x54>
   19344:	b6 c2       	rjmp	.+1388   	; 0x198b2 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19346:	c2 5e       	subi	r28, 0xE2	; 226
   19348:	de 4f       	sbci	r29, 0xFE	; 254
   1934a:	28 81       	ld	r18, Y
   1934c:	39 81       	ldd	r19, Y+1	; 0x01
   1934e:	4a 81       	ldd	r20, Y+2	; 0x02
   19350:	5b 81       	ldd	r21, Y+3	; 0x03
   19352:	ce 51       	subi	r28, 0x1E	; 30
   19354:	d1 40       	sbci	r29, 0x01	; 1
   19356:	ed b7       	in	r30, 0x3d	; 61
   19358:	fe b7       	in	r31, 0x3e	; 62
   1935a:	20 8b       	std	Z+16, r18	; 0x10
   1935c:	31 8b       	std	Z+17, r19	; 0x11
   1935e:	42 8b       	std	Z+18, r20	; 0x12
   19360:	53 8b       	std	Z+19, r21	; 0x13
   19362:	ca 5d       	subi	r28, 0xDA	; 218
   19364:	de 4f       	sbci	r29, 0xFE	; 254
   19366:	28 81       	ld	r18, Y
   19368:	39 81       	ldd	r19, Y+1	; 0x01
   1936a:	4a 81       	ldd	r20, Y+2	; 0x02
   1936c:	5b 81       	ldd	r21, Y+3	; 0x03
   1936e:	c6 52       	subi	r28, 0x26	; 38
   19370:	d1 40       	sbci	r29, 0x01	; 1
   19372:	24 87       	std	Z+12, r18	; 0x0c
   19374:	35 87       	std	Z+13, r19	; 0x0d
   19376:	46 87       	std	Z+14, r20	; 0x0e
   19378:	57 87       	std	Z+15, r21	; 0x0f
   1937a:	20 86       	std	Z+8, r2	; 0x08
   1937c:	31 86       	std	Z+9, r3	; 0x09
   1937e:	42 86       	std	Z+10, r4	; 0x0a
   19380:	53 86       	std	Z+11, r5	; 0x0b
   19382:	77 82       	std	Z+7, r7	; 0x07
   19384:	66 82       	std	Z+6, r6	; 0x06
   19386:	95 82       	std	Z+5, r9	; 0x05
   19388:	84 82       	std	Z+4, r8	; 0x04
   1938a:	85 e3       	ldi	r24, 0x35	; 53
   1938c:	9a e3       	ldi	r25, 0x3A	; 58
   1938e:	a0 e0       	ldi	r26, 0x00	; 0
   19390:	81 83       	std	Z+1, r24	; 0x01
   19392:	92 83       	std	Z+2, r25	; 0x02
   19394:	a3 83       	std	Z+3, r26	; 0x03
   19396:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   1939a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1939e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193a2:	92 ff       	sbrs	r25, 2
   193a4:	04 c0       	rjmp	.+8      	; 0x193ae <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   193a6:	60 e3       	ldi	r22, 0x30	; 48
   193a8:	76 e1       	ldi	r23, 0x16	; 22
   193aa:	c7 01       	movw	r24, r14
   193ac:	c9 d8       	rcall	.-3694   	; 0x18540 <lif_dump_vol>

    lif_image_clear(LIF);
   193ae:	c7 01       	movw	r24, r14
   193b0:	b2 d8       	rcall	.-3740   	; 0x18516 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   193b2:	80 e0       	ldi	r24, 0x00	; 0
   193b4:	90 e8       	ldi	r25, 0x80	; 128
   193b6:	f7 01       	movw	r30, r14
   193b8:	95 a3       	std	Z+37, r25	; 0x25
   193ba:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   193bc:	46 e0       	ldi	r20, 0x06	; 6
   193be:	50 e0       	ldi	r21, 0x00	; 0
   193c0:	b3 01       	movw	r22, r6
   193c2:	c7 01       	movw	r24, r14
   193c4:	86 96       	adiw	r24, 0x26	; 38
   193c6:	0e 94 8f bf 	call	0x17f1e	; 0x17f1e <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   193ca:	f7 01       	movw	r30, r14
   193cc:	25 a6       	std	Z+45, r2	; 0x2d
   193ce:	36 a6       	std	Z+46, r3	; 0x2e
   193d0:	47 a6       	std	Z+47, r4	; 0x2f
   193d2:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   193d4:	ca 5d       	subi	r28, 0xDA	; 218
   193d6:	de 4f       	sbci	r29, 0xFE	; 254
   193d8:	28 81       	ld	r18, Y
   193da:	39 81       	ldd	r19, Y+1	; 0x01
   193dc:	4a 81       	ldd	r20, Y+2	; 0x02
   193de:	5b 81       	ldd	r21, Y+3	; 0x03
   193e0:	c6 52       	subi	r28, 0x26	; 38
   193e2:	d1 40       	sbci	r29, 0x01	; 1
   193e4:	25 ab       	std	Z+53, r18	; 0x35
   193e6:	36 ab       	std	Z+54, r19	; 0x36
   193e8:	47 ab       	std	Z+55, r20	; 0x37
   193ea:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   193ec:	80 e0       	ldi	r24, 0x00	; 0
   193ee:	90 e1       	ldi	r25, 0x10	; 16
   193f0:	92 ab       	std	Z+50, r25	; 0x32
   193f2:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   193f4:	fd 96       	adiw	r30, 0x3d	; 61
   193f6:	10 82       	st	Z, r1
   193f8:	11 82       	std	Z+1, r1	; 0x01
   193fa:	12 82       	std	Z+2, r1	; 0x02
   193fc:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   193fe:	34 96       	adiw	r30, 0x04	; 4
   19400:	10 82       	st	Z, r1
   19402:	11 82       	std	Z+1, r1	; 0x01
   19404:	12 82       	std	Z+2, r1	; 0x02
   19406:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19408:	34 96       	adiw	r30, 0x04	; 4
   1940a:	10 82       	st	Z, r1
   1940c:	11 82       	std	Z+1, r1	; 0x01
   1940e:	12 82       	std	Z+2, r1	; 0x02
   19410:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19412:	a7 01       	movw	r20, r14
   19414:	47 5b       	subi	r20, 0xB7	; 183
   19416:	5f 4f       	sbci	r21, 0xFF	; 255
   19418:	c6 01       	movw	r24, r12
   1941a:	b5 01       	movw	r22, r10
   1941c:	0e 94 b4 c1 	call	0x18368	; 0x18368 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19420:	c4 01       	movw	r24, r8
   19422:	0e 94 97 bd 	call	0x17b2e	; 0x17b2e <lif_stralloc>
   19426:	d7 01       	movw	r26, r14
   19428:	8d 93       	st	X+, r24
   1942a:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   1942c:	89 2b       	or	r24, r25
   1942e:	09 f4       	brne	.+2      	; 0x19432 <lif_create_volume+0x140>
   19430:	35 c2       	rjmp	.+1130   	; 0x1989c <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19432:	c2 5e       	subi	r28, 0xE2	; 226
   19434:	de 4f       	sbci	r29, 0xFE	; 254
   19436:	28 81       	ld	r18, Y
   19438:	39 81       	ldd	r19, Y+1	; 0x01
   1943a:	4a 81       	ldd	r20, Y+2	; 0x02
   1943c:	5b 81       	ldd	r21, Y+3	; 0x03
   1943e:	ce 51       	subi	r28, 0x1E	; 30
   19440:	d1 40       	sbci	r29, 0x01	; 1
   19442:	f7 01       	movw	r30, r14
   19444:	20 8b       	std	Z+16, r18	; 0x10
   19446:	31 8b       	std	Z+17, r19	; 0x11
   19448:	42 8b       	std	Z+18, r20	; 0x12
   1944a:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   1944c:	ca 5d       	subi	r28, 0xDA	; 218
   1944e:	de 4f       	sbci	r29, 0xFE	; 254
   19450:	88 81       	ld	r24, Y
   19452:	99 81       	ldd	r25, Y+1	; 0x01
   19454:	aa 81       	ldd	r26, Y+2	; 0x02
   19456:	bb 81       	ldd	r27, Y+3	; 0x03
   19458:	c6 52       	subi	r28, 0x26	; 38
   1945a:	d1 40       	sbci	r29, 0x01	; 1
   1945c:	82 0d       	add	r24, r2
   1945e:	93 1d       	adc	r25, r3
   19460:	a4 1d       	adc	r26, r4
   19462:	b5 1d       	adc	r27, r5
   19464:	84 87       	std	Z+12, r24	; 0x0c
   19466:	95 87       	std	Z+13, r25	; 0x0d
   19468:	a6 87       	std	Z+14, r26	; 0x0e
   1946a:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1946c:	82 0f       	add	r24, r18
   1946e:	93 1f       	adc	r25, r19
   19470:	a4 1f       	adc	r26, r20
   19472:	b5 1f       	adc	r27, r21
   19474:	84 83       	std	Z+4, r24	; 0x04
   19476:	95 83       	std	Z+5, r25	; 0x05
   19478:	a6 83       	std	Z+6, r26	; 0x06
   1947a:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1947c:	ba 2f       	mov	r27, r26
   1947e:	a9 2f       	mov	r26, r25
   19480:	98 2f       	mov	r25, r24
   19482:	88 27       	eor	r24, r24
   19484:	80 87       	std	Z+8, r24	; 0x08
   19486:	91 87       	std	Z+9, r25	; 0x09
   19488:	a2 87       	std	Z+10, r26	; 0x0a
   1948a:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   1948c:	20 8f       	std	Z+24, r18	; 0x18
   1948e:	31 8f       	std	Z+25, r19	; 0x19
   19490:	42 8f       	std	Z+26, r20	; 0x1a
   19492:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19494:	14 8a       	std	Z+20, r1	; 0x14
   19496:	15 8a       	std	Z+21, r1	; 0x15
   19498:	16 8a       	std	Z+22, r1	; 0x16
   1949a:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   1949c:	15 8e       	std	Z+29, r1	; 0x1d
   1949e:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   194a0:	17 8e       	std	Z+31, r1	; 0x1f
   194a2:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   194a4:	11 a2       	std	Z+33, r1	; 0x21
   194a6:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   194a8:	13 a2       	std	Z+35, r1	; 0x23
   194aa:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   194ac:	61 2c       	mov	r6, r1
   194ae:	77 24       	eor	r7, r7
   194b0:	73 94       	inc	r7
   194b2:	9e 01       	movw	r18, r28
   194b4:	2c 5e       	subi	r18, 0xEC	; 236
   194b6:	3f 4f       	sbci	r19, 0xFF	; 255
   194b8:	49 01       	movw	r8, r18
   194ba:	d9 01       	movw	r26, r18
   194bc:	f3 01       	movw	r30, r6
   194be:	1d 92       	st	X+, r1
   194c0:	31 97       	sbiw	r30, 0x01	; 1
   194c2:	e9 f7       	brne	.-6      	; 0x194be <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   194c4:	b9 01       	movw	r22, r18
   194c6:	c7 01       	movw	r24, r14
   194c8:	0e 94 cc bf 	call	0x17f98	; 0x17f98 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   194cc:	66 e1       	ldi	r22, 0x16	; 22
   194ce:	79 e0       	ldi	r23, 0x09	; 9
   194d0:	d7 01       	movw	r26, r14
   194d2:	8d 91       	ld	r24, X+
   194d4:	9c 91       	ld	r25, X
   194d6:	0e 94 b6 bd 	call	0x17b6c	; 0x17b6c <lif_open>
   194da:	f7 01       	movw	r30, r14
   194dc:	93 83       	std	Z+3, r25	; 0x03
   194de:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   194e0:	89 2b       	or	r24, r25
   194e2:	09 f4       	brne	.+2      	; 0x194e6 <lif_create_volume+0x1f4>
   194e4:	db c1       	rjmp	.+950    	; 0x1989c <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   194e6:	00 e0       	ldi	r16, 0x00	; 0
   194e8:	11 e0       	ldi	r17, 0x01	; 1
   194ea:	20 e0       	ldi	r18, 0x00	; 0
   194ec:	30 e0       	ldi	r19, 0x00	; 0
   194ee:	a9 01       	movw	r20, r18
   194f0:	b4 01       	movw	r22, r8
   194f2:	c7 01       	movw	r24, r14
   194f4:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
   194f8:	9c 01       	movw	r18, r24
   194fa:	99 0f       	add	r25, r25
   194fc:	44 0b       	sbc	r20, r20
   194fe:	55 0b       	sbc	r21, r21
   19500:	ca 5e       	subi	r28, 0xEA	; 234
   19502:	de 4f       	sbci	r29, 0xFE	; 254
   19504:	28 83       	st	Y, r18
   19506:	39 83       	std	Y+1, r19	; 0x01
   19508:	4a 83       	std	Y+2, r20	; 0x02
   1950a:	5b 83       	std	Y+3, r21	; 0x03
   1950c:	c6 51       	subi	r28, 0x16	; 22
   1950e:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19510:	2f 3f       	cpi	r18, 0xFF	; 255
   19512:	31 05       	cpc	r19, r1
   19514:	41 05       	cpc	r20, r1
   19516:	51 05       	cpc	r21, r1
   19518:	09 f0       	breq	.+2      	; 0x1951c <lif_create_volume+0x22a>
   1951a:	0c f4       	brge	.+2      	; 0x1951e <lif_create_volume+0x22c>
   1951c:	bf c1       	rjmp	.+894    	; 0x1989c <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   1951e:	d4 01       	movw	r26, r8
   19520:	f3 01       	movw	r30, r6
   19522:	1d 92       	st	X+, r1
   19524:	31 97       	sbiw	r30, 0x01	; 1
   19526:	e9 f7       	brne	.-6      	; 0x19522 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19528:	21 e0       	ldi	r18, 0x01	; 1
   1952a:	30 e0       	ldi	r19, 0x00	; 0
   1952c:	40 e0       	ldi	r20, 0x00	; 0
   1952e:	50 e0       	ldi	r21, 0x00	; 0
   19530:	c6 5e       	subi	r28, 0xE6	; 230
   19532:	de 4f       	sbci	r29, 0xFE	; 254
   19534:	28 83       	st	Y, r18
   19536:	39 83       	std	Y+1, r19	; 0x01
   19538:	4a 83       	std	Y+2, r20	; 0x02
   1953a:	5b 83       	std	Y+3, r21	; 0x03
   1953c:	ca 51       	subi	r28, 0x1A	; 26
   1953e:	d1 40       	sbci	r29, 0x01	; 1
   19540:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19542:	88 e2       	ldi	r24, 0x28	; 40
   19544:	9a e3       	ldi	r25, 0x3A	; 58
   19546:	3c 01       	movw	r6, r24
   19548:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1954a:	c6 5e       	subi	r28, 0xE6	; 230
   1954c:	de 4f       	sbci	r29, 0xFE	; 254
   1954e:	88 81       	ld	r24, Y
   19550:	99 81       	ldd	r25, Y+1	; 0x01
   19552:	aa 81       	ldd	r26, Y+2	; 0x02
   19554:	bb 81       	ldd	r27, Y+3	; 0x03
   19556:	ca 51       	subi	r28, 0x1A	; 26
   19558:	d1 40       	sbci	r29, 0x01	; 1
   1955a:	82 15       	cp	r24, r2
   1955c:	93 05       	cpc	r25, r3
   1955e:	a4 05       	cpc	r26, r4
   19560:	b5 05       	cpc	r27, r5
   19562:	0c f0       	brlt	.+2      	; 0x19566 <lif_create_volume+0x274>
   19564:	55 c0       	rjmp	.+170    	; 0x19610 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19566:	00 e0       	ldi	r16, 0x00	; 0
   19568:	11 e0       	ldi	r17, 0x01	; 1
   1956a:	ca 5e       	subi	r28, 0xEA	; 234
   1956c:	de 4f       	sbci	r29, 0xFE	; 254
   1956e:	28 81       	ld	r18, Y
   19570:	39 81       	ldd	r19, Y+1	; 0x01
   19572:	4a 81       	ldd	r20, Y+2	; 0x02
   19574:	5b 81       	ldd	r21, Y+3	; 0x03
   19576:	c6 51       	subi	r28, 0x16	; 22
   19578:	d1 40       	sbci	r29, 0x01	; 1
   1957a:	b6 01       	movw	r22, r12
   1957c:	c7 01       	movw	r24, r14
   1957e:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
   19582:	09 2e       	mov	r0, r25
   19584:	00 0c       	add	r0, r0
   19586:	aa 0b       	sbc	r26, r26
   19588:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   1958a:	8f 3f       	cpi	r24, 0xFF	; 255
   1958c:	91 05       	cpc	r25, r1
   1958e:	a1 05       	cpc	r26, r1
   19590:	b1 05       	cpc	r27, r1
   19592:	09 f0       	breq	.+2      	; 0x19596 <lif_create_volume+0x2a4>
   19594:	0c f4       	brge	.+2      	; 0x19598 <lif_create_volume+0x2a6>
   19596:	82 c1       	rjmp	.+772    	; 0x1989c <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19598:	ca 5e       	subi	r28, 0xEA	; 234
   1959a:	de 4f       	sbci	r29, 0xFE	; 254
   1959c:	28 81       	ld	r18, Y
   1959e:	39 81       	ldd	r19, Y+1	; 0x01
   195a0:	4a 81       	ldd	r20, Y+2	; 0x02
   195a2:	5b 81       	ldd	r21, Y+3	; 0x03
   195a4:	c6 51       	subi	r28, 0x16	; 22
   195a6:	d1 40       	sbci	r29, 0x01	; 1
   195a8:	28 0f       	add	r18, r24
   195aa:	39 1f       	adc	r19, r25
   195ac:	4a 1f       	adc	r20, r26
   195ae:	5b 1f       	adc	r21, r27
   195b0:	ca 5e       	subi	r28, 0xEA	; 234
   195b2:	de 4f       	sbci	r29, 0xFE	; 254
   195b4:	28 83       	st	Y, r18
   195b6:	39 83       	std	Y+1, r19	; 0x01
   195b8:	4a 83       	std	Y+2, r20	; 0x02
   195ba:	5b 83       	std	Y+3, r21	; 0x03
   195bc:	c6 51       	subi	r28, 0x16	; 22
   195be:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   195c0:	c6 5e       	subi	r28, 0xE6	; 230
   195c2:	de 4f       	sbci	r29, 0xFE	; 254
   195c4:	88 81       	ld	r24, Y
   195c6:	99 81       	ldd	r25, Y+1	; 0x01
   195c8:	aa 81       	ldd	r26, Y+2	; 0x02
   195ca:	bb 81       	ldd	r27, Y+3	; 0x03
   195cc:	ca 51       	subi	r28, 0x1A	; 26
   195ce:	d1 40       	sbci	r29, 0x01	; 1
   195d0:	ed b7       	in	r30, 0x3d	; 61
   195d2:	fe b7       	in	r31, 0x3e	; 62
   195d4:	84 83       	std	Z+4, r24	; 0x04
   195d6:	95 83       	std	Z+5, r25	; 0x05
   195d8:	a6 83       	std	Z+6, r26	; 0x06
   195da:	b7 83       	std	Z+7, r27	; 0x07
   195dc:	61 82       	std	Z+1, r6	; 0x01
   195de:	72 82       	std	Z+2, r7	; 0x02
   195e0:	83 82       	std	Z+3, r8	; 0x03
   195e2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   195e6:	c6 5e       	subi	r28, 0xE6	; 230
   195e8:	de 4f       	sbci	r29, 0xFE	; 254
   195ea:	28 81       	ld	r18, Y
   195ec:	39 81       	ldd	r19, Y+1	; 0x01
   195ee:	4a 81       	ldd	r20, Y+2	; 0x02
   195f0:	5b 81       	ldd	r21, Y+3	; 0x03
   195f2:	ca 51       	subi	r28, 0x1A	; 26
   195f4:	d1 40       	sbci	r29, 0x01	; 1
   195f6:	2f 5f       	subi	r18, 0xFF	; 255
   195f8:	3f 4f       	sbci	r19, 0xFF	; 255
   195fa:	4f 4f       	sbci	r20, 0xFF	; 255
   195fc:	5f 4f       	sbci	r21, 0xFF	; 255
   195fe:	c6 5e       	subi	r28, 0xE6	; 230
   19600:	de 4f       	sbci	r29, 0xFE	; 254
   19602:	28 83       	st	Y, r18
   19604:	39 83       	std	Y+1, r19	; 0x01
   19606:	4a 83       	std	Y+2, r20	; 0x02
   19608:	5b 83       	std	Y+3, r21	; 0x03
   1960a:	ca 51       	subi	r28, 0x1A	; 26
   1960c:	d1 40       	sbci	r29, 0x01	; 1
   1960e:	9d cf       	rjmp	.-198    	; 0x1954a <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19610:	c7 01       	movw	r24, r14
   19612:	0e 94 91 c2 	call	0x18522	; 0x18522 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19616:	8f ef       	ldi	r24, 0xFF	; 255
   19618:	9f ef       	ldi	r25, 0xFF	; 255
   1961a:	f7 01       	movw	r30, r14
   1961c:	e6 5a       	subi	r30, 0xA6	; 166
   1961e:	ff 4f       	sbci	r31, 0xFF	; 255
   19620:	91 83       	std	Z+1, r25	; 0x01
   19622:	80 83       	st	Z, r24
   19624:	46 01       	movw	r8, r12
   19626:	6e 01       	movw	r12, r28
   19628:	9c ee       	ldi	r25, 0xEC	; 236
   1962a:	c9 1a       	sub	r12, r25
   1962c:	9e ef       	ldi	r25, 0xFE	; 254
   1962e:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19630:	b4 01       	movw	r22, r8
   19632:	c7 01       	movw	r24, r14
   19634:	0e 94 d8 c0 	call	0x181b0	; 0x181b0 <lif_dir2str>
   19638:	a0 e2       	ldi	r26, 0x20	; 32
   1963a:	8a 0e       	add	r8, r26
   1963c:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1963e:	c8 14       	cp	r12, r8
   19640:	d9 04       	cpc	r13, r9
   19642:	b1 f7       	brne	.-20     	; 0x19630 <lif_create_volume+0x33e>
   19644:	a1 2c       	mov	r10, r1
   19646:	b1 2c       	mov	r11, r1
   19648:	65 01       	movw	r12, r10
   1964a:	fe 01       	movw	r30, r28
   1964c:	74 96       	adiw	r30, 0x14	; 20
   1964e:	cc 5e       	subi	r28, 0xEC	; 236
   19650:	de 4f       	sbci	r29, 0xFE	; 254
   19652:	f9 83       	std	Y+1, r31	; 0x01
   19654:	e8 83       	st	Y, r30
   19656:	c4 51       	subi	r28, 0x14	; 20
   19658:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1965a:	84 e6       	ldi	r24, 0x64	; 100
   1965c:	28 2e       	mov	r2, r24
   1965e:	31 2c       	mov	r3, r1
   19660:	41 2c       	mov	r4, r1
   19662:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19664:	8b e1       	ldi	r24, 0x1B	; 27
   19666:	9a e3       	ldi	r25, 0x3A	; 58
   19668:	3c 01       	movw	r6, r24
   1966a:	81 2c       	mov	r8, r1
   1966c:	c6 5e       	subi	r28, 0xE6	; 230
   1966e:	de 4f       	sbci	r29, 0xFE	; 254
   19670:	28 81       	ld	r18, Y
   19672:	39 81       	ldd	r19, Y+1	; 0x01
   19674:	4a 81       	ldd	r20, Y+2	; 0x02
   19676:	5b 81       	ldd	r21, Y+3	; 0x03
   19678:	ca 51       	subi	r28, 0x1A	; 26
   1967a:	d1 40       	sbci	r29, 0x01	; 1
   1967c:	2a 0d       	add	r18, r10
   1967e:	3b 1d       	adc	r19, r11
   19680:	4c 1d       	adc	r20, r12
   19682:	5d 1d       	adc	r21, r13
   19684:	ce 5d       	subi	r28, 0xDE	; 222
   19686:	de 4f       	sbci	r29, 0xFE	; 254
   19688:	28 83       	st	Y, r18
   1968a:	39 83       	std	Y+1, r19	; 0x01
   1968c:	4a 83       	std	Y+2, r20	; 0x02
   1968e:	5b 83       	std	Y+3, r21	; 0x03
   19690:	c2 52       	subi	r28, 0x22	; 34
   19692:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19694:	ca 5d       	subi	r28, 0xDA	; 218
   19696:	de 4f       	sbci	r29, 0xFE	; 254
   19698:	88 81       	ld	r24, Y
   1969a:	99 81       	ldd	r25, Y+1	; 0x01
   1969c:	aa 81       	ldd	r26, Y+2	; 0x02
   1969e:	bb 81       	ldd	r27, Y+3	; 0x03
   196a0:	c6 52       	subi	r28, 0x26	; 38
   196a2:	d1 40       	sbci	r29, 0x01	; 1
   196a4:	a8 16       	cp	r10, r24
   196a6:	b9 06       	cpc	r11, r25
   196a8:	ca 06       	cpc	r12, r26
   196aa:	db 06       	cpc	r13, r27
   196ac:	0c f0       	brlt	.+2      	; 0x196b0 <lif_create_volume+0x3be>
   196ae:	58 c0       	rjmp	.+176    	; 0x19760 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196b0:	00 e0       	ldi	r16, 0x00	; 0
   196b2:	11 e0       	ldi	r17, 0x01	; 1
   196b4:	ca 5e       	subi	r28, 0xEA	; 234
   196b6:	de 4f       	sbci	r29, 0xFE	; 254
   196b8:	28 81       	ld	r18, Y
   196ba:	39 81       	ldd	r19, Y+1	; 0x01
   196bc:	4a 81       	ldd	r20, Y+2	; 0x02
   196be:	5b 81       	ldd	r21, Y+3	; 0x03
   196c0:	c6 51       	subi	r28, 0x16	; 22
   196c2:	d1 40       	sbci	r29, 0x01	; 1
   196c4:	be 01       	movw	r22, r28
   196c6:	6c 5e       	subi	r22, 0xEC	; 236
   196c8:	7f 4f       	sbci	r23, 0xFF	; 255
   196ca:	c7 01       	movw	r24, r14
   196cc:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
   196d0:	09 2e       	mov	r0, r25
   196d2:	00 0c       	add	r0, r0
   196d4:	aa 0b       	sbc	r26, r26
   196d6:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   196d8:	8f 3f       	cpi	r24, 0xFF	; 255
   196da:	91 05       	cpc	r25, r1
   196dc:	a1 05       	cpc	r26, r1
   196de:	b1 05       	cpc	r27, r1
   196e0:	09 f0       	breq	.+2      	; 0x196e4 <lif_create_volume+0x3f2>
   196e2:	0c f4       	brge	.+2      	; 0x196e6 <lif_create_volume+0x3f4>
   196e4:	db c0       	rjmp	.+438    	; 0x1989c <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   196e6:	ca 5e       	subi	r28, 0xEA	; 234
   196e8:	de 4f       	sbci	r29, 0xFE	; 254
   196ea:	28 81       	ld	r18, Y
   196ec:	39 81       	ldd	r19, Y+1	; 0x01
   196ee:	4a 81       	ldd	r20, Y+2	; 0x02
   196f0:	5b 81       	ldd	r21, Y+3	; 0x03
   196f2:	c6 51       	subi	r28, 0x16	; 22
   196f4:	d1 40       	sbci	r29, 0x01	; 1
   196f6:	28 0f       	add	r18, r24
   196f8:	39 1f       	adc	r19, r25
   196fa:	4a 1f       	adc	r20, r26
   196fc:	5b 1f       	adc	r21, r27
   196fe:	ca 5e       	subi	r28, 0xEA	; 234
   19700:	de 4f       	sbci	r29, 0xFE	; 254
   19702:	28 83       	st	Y, r18
   19704:	39 83       	std	Y+1, r19	; 0x01
   19706:	4a 83       	std	Y+2, r20	; 0x02
   19708:	5b 83       	std	Y+3, r21	; 0x03
   1970a:	c6 51       	subi	r28, 0x16	; 22
   1970c:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   1970e:	ce 5d       	subi	r28, 0xDE	; 222
   19710:	de 4f       	sbci	r29, 0xFE	; 254
   19712:	68 81       	ld	r22, Y
   19714:	79 81       	ldd	r23, Y+1	; 0x01
   19716:	8a 81       	ldd	r24, Y+2	; 0x02
   19718:	9b 81       	ldd	r25, Y+3	; 0x03
   1971a:	c2 52       	subi	r28, 0x22	; 34
   1971c:	d1 40       	sbci	r29, 0x01	; 1
   1971e:	a2 01       	movw	r20, r4
   19720:	91 01       	movw	r18, r2
   19722:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
   19726:	67 2b       	or	r22, r23
   19728:	68 2b       	or	r22, r24
   1972a:	69 2b       	or	r22, r25
   1972c:	99 f4       	brne	.+38     	; 0x19754 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   1972e:	ce 5d       	subi	r28, 0xDE	; 222
   19730:	de 4f       	sbci	r29, 0xFE	; 254
   19732:	88 81       	ld	r24, Y
   19734:	99 81       	ldd	r25, Y+1	; 0x01
   19736:	aa 81       	ldd	r26, Y+2	; 0x02
   19738:	bb 81       	ldd	r27, Y+3	; 0x03
   1973a:	c2 52       	subi	r28, 0x22	; 34
   1973c:	d1 40       	sbci	r29, 0x01	; 1
   1973e:	ed b7       	in	r30, 0x3d	; 61
   19740:	fe b7       	in	r31, 0x3e	; 62
   19742:	84 83       	std	Z+4, r24	; 0x04
   19744:	95 83       	std	Z+5, r25	; 0x05
   19746:	a6 83       	std	Z+6, r26	; 0x06
   19748:	b7 83       	std	Z+7, r27	; 0x07
   1974a:	61 82       	std	Z+1, r6	; 0x01
   1974c:	72 82       	std	Z+2, r7	; 0x02
   1974e:	83 82       	std	Z+3, r8	; 0x03
   19750:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19754:	ff ef       	ldi	r31, 0xFF	; 255
   19756:	af 1a       	sub	r10, r31
   19758:	bf 0a       	sbc	r11, r31
   1975a:	cf 0a       	sbc	r12, r31
   1975c:	df 0a       	sbc	r13, r31
   1975e:	86 cf       	rjmp	.-244    	; 0x1966c <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19760:	80 e0       	ldi	r24, 0x00	; 0
   19762:	91 e0       	ldi	r25, 0x01	; 1
   19764:	cc 5e       	subi	r28, 0xEC	; 236
   19766:	de 4f       	sbci	r29, 0xFE	; 254
   19768:	a8 81       	ld	r26, Y
   1976a:	b9 81       	ldd	r27, Y+1	; 0x01
   1976c:	c4 51       	subi	r28, 0x14	; 20
   1976e:	d1 40       	sbci	r29, 0x01	; 1
   19770:	fc 01       	movw	r30, r24
   19772:	1d 92       	st	X+, r1
   19774:	31 97       	sbiw	r30, 0x01	; 1
   19776:	e9 f7       	brne	.-6      	; 0x19772 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19778:	81 2c       	mov	r8, r1
   1977a:	91 2c       	mov	r9, r1
   1977c:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1977e:	8e e0       	ldi	r24, 0x0E	; 14
   19780:	9a e3       	ldi	r25, 0x3A	; 58
   19782:	9c 01       	movw	r18, r24
   19784:	40 e0       	ldi	r20, 0x00	; 0
   19786:	c6 5e       	subi	r28, 0xE6	; 230
   19788:	de 4f       	sbci	r29, 0xFE	; 254
   1978a:	28 83       	st	Y, r18
   1978c:	39 83       	std	Y+1, r19	; 0x01
   1978e:	4a 83       	std	Y+2, r20	; 0x02
   19790:	ca 51       	subi	r28, 0x1A	; 26
   19792:	d1 40       	sbci	r29, 0x01	; 1
   19794:	ce 5d       	subi	r28, 0xDE	; 222
   19796:	de 4f       	sbci	r29, 0xFE	; 254
   19798:	48 80       	ld	r4, Y
   1979a:	59 80       	ldd	r5, Y+1	; 0x01
   1979c:	6a 80       	ldd	r6, Y+2	; 0x02
   1979e:	7b 80       	ldd	r7, Y+3	; 0x03
   197a0:	c2 52       	subi	r28, 0x22	; 34
   197a2:	d1 40       	sbci	r29, 0x01	; 1
   197a4:	48 0c       	add	r4, r8
   197a6:	59 1c       	adc	r5, r9
   197a8:	6a 1c       	adc	r6, r10
   197aa:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   197ac:	c2 5e       	subi	r28, 0xE2	; 226
   197ae:	de 4f       	sbci	r29, 0xFE	; 254
   197b0:	28 81       	ld	r18, Y
   197b2:	39 81       	ldd	r19, Y+1	; 0x01
   197b4:	4a 81       	ldd	r20, Y+2	; 0x02
   197b6:	5b 81       	ldd	r21, Y+3	; 0x03
   197b8:	ce 51       	subi	r28, 0x1E	; 30
   197ba:	d1 40       	sbci	r29, 0x01	; 1
   197bc:	82 16       	cp	r8, r18
   197be:	93 06       	cpc	r9, r19
   197c0:	a4 06       	cpc	r10, r20
   197c2:	b5 06       	cpc	r11, r21
   197c4:	0c f0       	brlt	.+2      	; 0x197c8 <lif_create_volume+0x4d6>
   197c6:	53 c0       	rjmp	.+166    	; 0x1986e <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   197c8:	00 e0       	ldi	r16, 0x00	; 0
   197ca:	11 e0       	ldi	r17, 0x01	; 1
   197cc:	ca 5e       	subi	r28, 0xEA	; 234
   197ce:	de 4f       	sbci	r29, 0xFE	; 254
   197d0:	28 81       	ld	r18, Y
   197d2:	39 81       	ldd	r19, Y+1	; 0x01
   197d4:	4a 81       	ldd	r20, Y+2	; 0x02
   197d6:	5b 81       	ldd	r21, Y+3	; 0x03
   197d8:	c6 51       	subi	r28, 0x16	; 22
   197da:	d1 40       	sbci	r29, 0x01	; 1
   197dc:	be 01       	movw	r22, r28
   197de:	6c 5e       	subi	r22, 0xEC	; 236
   197e0:	7f 4f       	sbci	r23, 0xFF	; 255
   197e2:	c7 01       	movw	r24, r14
   197e4:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
   197e8:	09 2e       	mov	r0, r25
   197ea:	00 0c       	add	r0, r0
   197ec:	aa 0b       	sbc	r26, r26
   197ee:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   197f0:	8f 3f       	cpi	r24, 0xFF	; 255
   197f2:	91 05       	cpc	r25, r1
   197f4:	a1 05       	cpc	r26, r1
   197f6:	b1 05       	cpc	r27, r1
   197f8:	09 f0       	breq	.+2      	; 0x197fc <lif_create_volume+0x50a>
   197fa:	0c f4       	brge	.+2      	; 0x197fe <lif_create_volume+0x50c>
   197fc:	4f c0       	rjmp	.+158    	; 0x1989c <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   197fe:	ca 5e       	subi	r28, 0xEA	; 234
   19800:	de 4f       	sbci	r29, 0xFE	; 254
   19802:	28 81       	ld	r18, Y
   19804:	39 81       	ldd	r19, Y+1	; 0x01
   19806:	4a 81       	ldd	r20, Y+2	; 0x02
   19808:	5b 81       	ldd	r21, Y+3	; 0x03
   1980a:	c6 51       	subi	r28, 0x16	; 22
   1980c:	d1 40       	sbci	r29, 0x01	; 1
   1980e:	28 0f       	add	r18, r24
   19810:	39 1f       	adc	r19, r25
   19812:	4a 1f       	adc	r20, r26
   19814:	5b 1f       	adc	r21, r27
   19816:	ca 5e       	subi	r28, 0xEA	; 234
   19818:	de 4f       	sbci	r29, 0xFE	; 254
   1981a:	28 83       	st	Y, r18
   1981c:	39 83       	std	Y+1, r19	; 0x01
   1981e:	4a 83       	std	Y+2, r20	; 0x02
   19820:	5b 83       	std	Y+3, r21	; 0x03
   19822:	c6 51       	subi	r28, 0x16	; 22
   19824:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19826:	c3 01       	movw	r24, r6
   19828:	b2 01       	movw	r22, r4
   1982a:	24 e6       	ldi	r18, 0x64	; 100
   1982c:	30 e0       	ldi	r19, 0x00	; 0
   1982e:	40 e0       	ldi	r20, 0x00	; 0
   19830:	50 e0       	ldi	r21, 0x00	; 0
   19832:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
   19836:	67 2b       	or	r22, r23
   19838:	68 2b       	or	r22, r24
   1983a:	69 2b       	or	r22, r25
   1983c:	91 f4       	brne	.+36     	; 0x19862 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   1983e:	ed b7       	in	r30, 0x3d	; 61
   19840:	fe b7       	in	r31, 0x3e	; 62
   19842:	44 82       	std	Z+4, r4	; 0x04
   19844:	55 82       	std	Z+5, r5	; 0x05
   19846:	66 82       	std	Z+6, r6	; 0x06
   19848:	77 82       	std	Z+7, r7	; 0x07
   1984a:	c6 5e       	subi	r28, 0xE6	; 230
   1984c:	de 4f       	sbci	r29, 0xFE	; 254
   1984e:	28 81       	ld	r18, Y
   19850:	39 81       	ldd	r19, Y+1	; 0x01
   19852:	4a 81       	ldd	r20, Y+2	; 0x02
   19854:	ca 51       	subi	r28, 0x1A	; 26
   19856:	d1 40       	sbci	r29, 0x01	; 1
   19858:	21 83       	std	Z+1, r18	; 0x01
   1985a:	32 83       	std	Z+2, r19	; 0x02
   1985c:	43 83       	std	Z+3, r20	; 0x03
   1985e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19862:	ff ef       	ldi	r31, 0xFF	; 255
   19864:	8f 1a       	sub	r8, r31
   19866:	9f 0a       	sbc	r9, r31
   19868:	af 0a       	sbc	r10, r31
   1986a:	bf 0a       	sbc	r11, r31
   1986c:	93 cf       	rjmp	.-218    	; 0x19794 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1986e:	ed b7       	in	r30, 0x3d	; 61
   19870:	fe b7       	in	r31, 0x3e	; 62
   19872:	44 82       	std	Z+4, r4	; 0x04
   19874:	55 82       	std	Z+5, r5	; 0x05
   19876:	66 82       	std	Z+6, r6	; 0x06
   19878:	77 82       	std	Z+7, r7	; 0x07
   1987a:	81 e0       	ldi	r24, 0x01	; 1
   1987c:	9a e3       	ldi	r25, 0x3A	; 58
   1987e:	a0 e0       	ldi	r26, 0x00	; 0
   19880:	81 83       	std	Z+1, r24	; 0x01
   19882:	92 83       	std	Z+2, r25	; 0x02
   19884:	a3 83       	std	Z+3, r26	; 0x03
   19886:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1988a:	8f ef       	ldi	r24, 0xFF	; 255
   1988c:	9f ef       	ldi	r25, 0xFF	; 255
   1988e:	f7 01       	movw	r30, r14
   19890:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19892:	80 a3       	std	Z+32, r24	; 0x20
   19894:	c7 01       	movw	r24, r14
   19896:	1a d8       	rcall	.-4044   	; 0x188cc <lif_check_volume>
   19898:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1989a:	19 f4       	brne	.+6      	; 0x198a2 <lif_create_volume+0x5b0>
   1989c:	c7 01       	movw	r24, r14
   1989e:	b6 da       	rcall	.-2708   	; 0x18e0c <lif_close_volume>
   198a0:	08 c0       	rjmp	.+16     	; 0x198b2 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   198a2:	c7 01       	movw	r24, r14
   198a4:	1c dc       	rcall	.-1992   	; 0x190de <lif_updatefree>
   198a6:	6c 01       	movw	r12, r24
   198a8:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   198aa:	31 f4       	brne	.+12     	; 0x198b8 <lif_create_volume+0x5c6>
   198ac:	c7 01       	movw	r24, r14
   198ae:	ae da       	rcall	.-2724   	; 0x18e0c <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   198b0:	04 c0       	rjmp	.+8      	; 0x198ba <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   198b2:	c1 2c       	mov	r12, r1
   198b4:	d1 2c       	mov	r13, r1
   198b6:	01 c0       	rjmp	.+2      	; 0x198ba <lif_create_volume+0x5c8>
   198b8:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   198ba:	c6 01       	movw	r24, r12
   198bc:	c7 5d       	subi	r28, 0xD7	; 215
   198be:	de 4f       	sbci	r29, 0xFE	; 254
   198c0:	e2 e1       	ldi	r30, 0x12	; 18
   198c2:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

000198c6 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   198c6:	ad e1       	ldi	r26, 0x1D	; 29
   198c8:	b0 e0       	ldi	r27, 0x00	; 0
   198ca:	e9 e6       	ldi	r30, 0x69	; 105
   198cc:	fc ec       	ldi	r31, 0xCC	; 204
   198ce:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   198d2:	9d 8f       	std	Y+29, r25	; 0x1d
   198d4:	8c 8f       	std	Y+28, r24	; 0x1c
   198d6:	4a 01       	movw	r8, r20
   198d8:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   198da:	fc 01       	movw	r30, r24
   198dc:	c4 84       	ldd	r12, Z+12	; 0x0c
   198de:	d5 84       	ldd	r13, Z+13	; 0x0d
   198e0:	e6 84       	ldd	r14, Z+14	; 0x0e
   198e2:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   198e4:	fc db       	rcall	.-2056   	; 0x190de <lif_updatefree>
   198e6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198e8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198ea:	40 8d       	ldd	r20, Z+24	; 0x18
   198ec:	51 8d       	ldd	r21, Z+25	; 0x19
   198ee:	62 8d       	ldd	r22, Z+26	; 0x1a
   198f0:	73 8d       	ldd	r23, Z+27	; 0x1b
   198f2:	89 2b       	or	r24, r25
   198f4:	99 f4       	brne	.+38     	; 0x1991c <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   198f6:	ed b7       	in	r30, 0x3d	; 61
   198f8:	fe b7       	in	r31, 0x3e	; 62
   198fa:	80 86       	std	Z+8, r8	; 0x08
   198fc:	91 86       	std	Z+9, r9	; 0x09
   198fe:	a2 86       	std	Z+10, r10	; 0x0a
   19900:	b3 86       	std	Z+11, r11	; 0x0b
   19902:	44 83       	std	Z+4, r20	; 0x04
   19904:	55 83       	std	Z+5, r21	; 0x05
   19906:	66 83       	std	Z+6, r22	; 0x06
   19908:	77 83       	std	Z+7, r23	; 0x07
   1990a:	82 e2       	ldi	r24, 0x22	; 34
   1990c:	99 e3       	ldi	r25, 0x39	; 57
   1990e:	a0 e0       	ldi	r26, 0x00	; 0
   19910:	81 83       	std	Z+1, r24	; 0x01
   19912:	92 83       	std	Z+2, r25	; 0x02
   19914:	a3 83       	std	Z+3, r26	; 0x03
   19916:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1991a:	2f c1       	rjmp	.+606    	; 0x19b7a <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1991c:	48 15       	cp	r20, r8
   1991e:	59 05       	cpc	r21, r9
   19920:	6a 05       	cpc	r22, r10
   19922:	7b 05       	cpc	r23, r11
   19924:	c4 f0       	brlt	.+48     	; 0x19956 <lif_newdir+0x90>
   19926:	44 24       	eor	r4, r4
   19928:	43 94       	inc	r4
   1992a:	51 2c       	mov	r5, r1
   1992c:	61 2c       	mov	r6, r1
   1992e:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19930:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19932:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19934:	86 5a       	subi	r24, 0xA6	; 166
   19936:	9f 4f       	sbci	r25, 0xFF	; 255
   19938:	9d 8b       	std	Y+21, r25	; 0x15
   1993a:	8c 8b       	std	Y+20, r24	; 0x14
   1993c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1993e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19940:	e4 5a       	subi	r30, 0xA4	; 164
   19942:	ff 4f       	sbci	r31, 0xFF	; 255
   19944:	fb 8b       	std	Y+19, r31	; 0x13
   19946:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19948:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1994a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1994c:	80 5a       	subi	r24, 0xA0	; 160
   1994e:	9f 4f       	sbci	r25, 0xFF	; 255
   19950:	9f 8b       	std	Y+23, r25	; 0x17
   19952:	8e 8b       	std	Y+22, r24	; 0x16
   19954:	21 c0       	rjmp	.+66     	; 0x19998 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19956:	ed b7       	in	r30, 0x3d	; 61
   19958:	fe b7       	in	r31, 0x3e	; 62
   1995a:	44 83       	std	Z+4, r20	; 0x04
   1995c:	55 83       	std	Z+5, r21	; 0x05
   1995e:	66 83       	std	Z+6, r22	; 0x06
   19960:	77 83       	std	Z+7, r23	; 0x07
   19962:	89 ef       	ldi	r24, 0xF9	; 249
   19964:	98 e3       	ldi	r25, 0x38	; 56
   19966:	a0 e0       	ldi	r26, 0x00	; 0
   19968:	81 83       	std	Z+1, r24	; 0x01
   1996a:	92 83       	std	Z+2, r25	; 0x02
   1996c:	a3 83       	std	Z+3, r26	; 0x03
   1996e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   19972:	03 c1       	rjmp	.+518    	; 0x19b7a <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19974:	ec 89       	ldd	r30, Y+20	; 0x14
   19976:	fd 89       	ldd	r31, Y+21	; 0x15
   19978:	80 81       	ld	r24, Z
   1997a:	91 81       	ldd	r25, Z+1	; 0x01
   1997c:	8f 3f       	cpi	r24, 0xFF	; 255
   1997e:	ff ef       	ldi	r31, 0xFF	; 255
   19980:	9f 07       	cpc	r25, r31
   19982:	a1 f0       	breq	.+40     	; 0x199ac <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19984:	89 2b       	or	r24, r25
   19986:	09 f0       	breq	.+2      	; 0x1998a <lif_newdir+0xc4>
   19988:	ce c0       	rjmp	.+412    	; 0x19b26 <lif_newdir+0x260>
        {
            if(freestate == 0)
   1998a:	61 14       	cp	r6, r1
   1998c:	71 04       	cpc	r7, r1
   1998e:	09 f4       	brne	.+2      	; 0x19992 <lif_newdir+0xcc>
   19990:	c1 c0       	rjmp	.+386    	; 0x19b14 <lif_newdir+0x24e>
   19992:	ff ef       	ldi	r31, 0xFF	; 255
   19994:	4f 1a       	sub	r4, r31
   19996:	5f 0a       	sbc	r5, r31
   19998:	82 01       	movw	r16, r4
   1999a:	01 50       	subi	r16, 0x01	; 1
   1999c:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1999e:	b8 01       	movw	r22, r16
   199a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199a4:	c1 da       	rcall	.-2686   	; 0x18f28 <lif_readdirindex>
   199a6:	89 2b       	or	r24, r25
   199a8:	29 f7       	brne	.-54     	; 0x19974 <lif_newdir+0xae>
   199aa:	e7 c0       	rjmp	.+462    	; 0x19b7a <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   199ac:	22 e0       	ldi	r18, 0x02	; 2
   199ae:	62 16       	cp	r6, r18
   199b0:	71 04       	cpc	r7, r1
   199b2:	09 f0       	breq	.+2      	; 0x199b6 <lif_newdir+0xf0>
   199b4:	46 c0       	rjmp	.+140    	; 0x19a42 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   199b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199ba:	0e 94 91 c2 	call	0x18522	; 0x18522 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   199be:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199c0:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199c2:	e4 5a       	subi	r30, 0xA4	; 164
   199c4:	ff 4f       	sbci	r31, 0xFF	; 255
   199c6:	88 8d       	ldd	r24, Y+24	; 0x18
   199c8:	80 83       	st	Z, r24
   199ca:	99 8d       	ldd	r25, Y+25	; 0x19
   199cc:	91 83       	std	Z+1, r25	; 0x01
   199ce:	2a 8d       	ldd	r18, Y+26	; 0x1a
   199d0:	22 83       	std	Z+2, r18	; 0x02
   199d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
   199d4:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   199d6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199d8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199da:	e0 5a       	subi	r30, 0xA0	; 160
   199dc:	ff 4f       	sbci	r31, 0xFF	; 255
   199de:	80 82       	st	Z, r8
   199e0:	91 82       	std	Z+1, r9	; 0x01
   199e2:	a2 82       	std	Z+2, r10	; 0x02
   199e4:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   199e6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199e8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199ea:	84 89       	ldd	r24, Z+20	; 0x14
   199ec:	95 89       	ldd	r25, Z+21	; 0x15
   199ee:	a6 89       	ldd	r26, Z+22	; 0x16
   199f0:	b7 89       	ldd	r27, Z+23	; 0x17
   199f2:	88 0d       	add	r24, r8
   199f4:	99 1d       	adc	r25, r9
   199f6:	aa 1d       	adc	r26, r10
   199f8:	bb 1d       	adc	r27, r11
   199fa:	84 8b       	std	Z+20, r24	; 0x14
   199fc:	95 8b       	std	Z+21, r25	; 0x15
   199fe:	a6 8b       	std	Z+22, r26	; 0x16
   19a00:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   19a02:	80 8d       	ldd	r24, Z+24	; 0x18
   19a04:	91 8d       	ldd	r25, Z+25	; 0x19
   19a06:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a08:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a0a:	88 19       	sub	r24, r8
   19a0c:	99 09       	sbc	r25, r9
   19a0e:	aa 09       	sbc	r26, r10
   19a10:	bb 09       	sbc	r27, r11
   19a12:	80 8f       	std	Z+24, r24	; 0x18
   19a14:	91 8f       	std	Z+25, r25	; 0x19
   19a16:	a2 8f       	std	Z+26, r26	; 0x1a
   19a18:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   19a1a:	84 8d       	ldd	r24, Z+28	; 0x1c
   19a1c:	95 8d       	ldd	r25, Z+29	; 0x1d
   19a1e:	01 96       	adiw	r24, 0x01	; 1
   19a20:	95 8f       	std	Z+29, r25	; 0x1d
   19a22:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19a24:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a26:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a28:	01 97       	sbiw	r24, 0x01	; 1
   19a2a:	97 8f       	std	Z+31, r25	; 0x1f
   19a2c:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   19a2e:	20 a2       	std	Z+32, r2	; 0x20
   19a30:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19a32:	b1 01       	movw	r22, r2
   19a34:	cf 01       	movw	r24, r30
   19a36:	df da       	rcall	.-2626   	; 0x18ff6 <lif_writedirindex>
   19a38:	89 2b       	or	r24, r25
   19a3a:	09 f4       	brne	.+2      	; 0x19a3e <lif_newdir+0x178>
   19a3c:	9e c0       	rjmp	.+316    	; 0x19b7a <lif_newdir+0x2b4>
   19a3e:	c1 01       	movw	r24, r2
   19a40:	9e c0       	rjmp	.+316    	; 0x19b7e <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19a42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19a46:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19a4a:	92 ff       	sbrs	r25, 2
   19a4c:	1e c0       	rjmp	.+60     	; 0x19a8a <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19a4e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a50:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a52:	80 8d       	ldd	r24, Z+24	; 0x18
   19a54:	91 8d       	ldd	r25, Z+25	; 0x19
   19a56:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a58:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a5a:	ed b7       	in	r30, 0x3d	; 61
   19a5c:	fe b7       	in	r31, 0x3e	; 62
   19a5e:	86 87       	std	Z+14, r24	; 0x0e
   19a60:	97 87       	std	Z+15, r25	; 0x0f
   19a62:	a0 8b       	std	Z+16, r26	; 0x10
   19a64:	b1 8b       	std	Z+17, r27	; 0x11
   19a66:	82 86       	std	Z+10, r8	; 0x0a
   19a68:	93 86       	std	Z+11, r9	; 0x0b
   19a6a:	a4 86       	std	Z+12, r10	; 0x0c
   19a6c:	b5 86       	std	Z+13, r11	; 0x0d
   19a6e:	c6 82       	std	Z+6, r12	; 0x06
   19a70:	d7 82       	std	Z+7, r13	; 0x07
   19a72:	e0 86       	std	Z+8, r14	; 0x08
   19a74:	f1 86       	std	Z+9, r15	; 0x09
   19a76:	15 83       	std	Z+5, r17	; 0x05
   19a78:	04 83       	std	Z+4, r16	; 0x04
   19a7a:	88 ea       	ldi	r24, 0xA8	; 168
   19a7c:	98 e3       	ldi	r25, 0x38	; 56
   19a7e:	a0 e0       	ldi	r26, 0x00	; 0
   19a80:	81 83       	std	Z+1, r24	; 0x01
   19a82:	92 83       	std	Z+2, r25	; 0x02
   19a84:	a3 83       	std	Z+3, r26	; 0x03
   19a86:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19a8a:	b8 01       	movw	r22, r16
   19a8c:	6f 5f       	subi	r22, 0xFF	; 255
   19a8e:	7f 4f       	sbci	r23, 0xFF	; 255
   19a90:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a92:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a94:	0c db       	rcall	.-2536   	; 0x190ae <lif_writedirEOF>
   19a96:	89 2b       	or	r24, r25
   19a98:	09 f4       	brne	.+2      	; 0x19a9c <lif_newdir+0x1d6>
   19a9a:	6f c0       	rjmp	.+222    	; 0x19b7a <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   19a9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19aa0:	0e 94 91 c2 	call	0x18522	; 0x18522 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19aa4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19aa6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19aa8:	e4 5a       	subi	r30, 0xA4	; 164
   19aaa:	ff 4f       	sbci	r31, 0xFF	; 255
   19aac:	c0 82       	st	Z, r12
   19aae:	d1 82       	std	Z+1, r13	; 0x01
   19ab0:	e2 82       	std	Z+2, r14	; 0x02
   19ab2:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   19ab4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ab6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ab8:	e0 5a       	subi	r30, 0xA0	; 160
   19aba:	ff 4f       	sbci	r31, 0xFF	; 255
   19abc:	80 82       	st	Z, r8
   19abe:	91 82       	std	Z+1, r9	; 0x01
   19ac0:	a2 82       	std	Z+2, r10	; 0x02
   19ac2:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   19ac4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ac6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ac8:	84 89       	ldd	r24, Z+20	; 0x14
   19aca:	95 89       	ldd	r25, Z+21	; 0x15
   19acc:	a6 89       	ldd	r26, Z+22	; 0x16
   19ace:	b7 89       	ldd	r27, Z+23	; 0x17
   19ad0:	88 0d       	add	r24, r8
   19ad2:	99 1d       	adc	r25, r9
   19ad4:	aa 1d       	adc	r26, r10
   19ad6:	bb 1d       	adc	r27, r11
   19ad8:	84 8b       	std	Z+20, r24	; 0x14
   19ada:	95 8b       	std	Z+21, r25	; 0x15
   19adc:	a6 8b       	std	Z+22, r26	; 0x16
   19ade:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   19ae0:	80 8d       	ldd	r24, Z+24	; 0x18
   19ae2:	91 8d       	ldd	r25, Z+25	; 0x19
   19ae4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19ae6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19ae8:	88 19       	sub	r24, r8
   19aea:	99 09       	sbc	r25, r9
   19aec:	aa 09       	sbc	r26, r10
   19aee:	bb 09       	sbc	r27, r11
   19af0:	80 8f       	std	Z+24, r24	; 0x18
   19af2:	91 8f       	std	Z+25, r25	; 0x19
   19af4:	a2 8f       	std	Z+26, r26	; 0x1a
   19af6:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   19af8:	84 8d       	ldd	r24, Z+28	; 0x1c
   19afa:	95 8d       	ldd	r25, Z+29	; 0x1d
   19afc:	01 96       	adiw	r24, 0x01	; 1
   19afe:	95 8f       	std	Z+29, r25	; 0x1d
   19b00:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19b02:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19b04:	00 a3       	std	Z+32, r16	; 0x20
   19b06:	b8 01       	movw	r22, r16
   19b08:	cf 01       	movw	r24, r30
   19b0a:	75 da       	rcall	.-2838   	; 0x18ff6 <lif_writedirindex>
   19b0c:	89 2b       	or	r24, r25
   19b0e:	a9 f1       	breq	.+106    	; 0x19b7a <lif_newdir+0x2b4>
   19b10:	c8 01       	movw	r24, r16
   19b12:	35 c0       	rjmp	.+106    	; 0x19b7e <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19b14:	c8 8e       	std	Y+24, r12	; 0x18
   19b16:	d9 8e       	std	Y+25, r13	; 0x19
   19b18:	ea 8e       	std	Y+26, r14	; 0x1a
   19b1a:	fb 8e       	std	Y+27, r15	; 0x1b
   19b1c:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19b1e:	66 24       	eor	r6, r6
   19b20:	63 94       	inc	r6
   19b22:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19b24:	36 cf       	rjmp	.-404    	; 0x19992 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19b26:	f1 e0       	ldi	r31, 0x01	; 1
   19b28:	6f 16       	cp	r6, r31
   19b2a:	71 04       	cpc	r7, r1
   19b2c:	a9 f4       	brne	.+42     	; 0x19b58 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19b2e:	ea 89       	ldd	r30, Y+18	; 0x12
   19b30:	fb 89       	ldd	r31, Y+19	; 0x13
   19b32:	80 81       	ld	r24, Z
   19b34:	91 81       	ldd	r25, Z+1	; 0x01
   19b36:	a2 81       	ldd	r26, Z+2	; 0x02
   19b38:	b3 81       	ldd	r27, Z+3	; 0x03
   19b3a:	8c 19       	sub	r24, r12
   19b3c:	9d 09       	sbc	r25, r13
   19b3e:	ae 09       	sbc	r26, r14
   19b40:	bf 09       	sbc	r27, r15
   19b42:	88 15       	cp	r24, r8
   19b44:	99 05       	cpc	r25, r9
   19b46:	aa 05       	cpc	r26, r10
   19b48:	bb 05       	cpc	r27, r11
   19b4a:	1c f4       	brge	.+6      	; 0x19b52 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19b4c:	61 2c       	mov	r6, r1
   19b4e:	71 2c       	mov	r7, r1
   19b50:	03 c0       	rjmp	.+6      	; 0x19b58 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19b52:	82 e0       	ldi	r24, 0x02	; 2
   19b54:	68 2e       	mov	r6, r24
   19b56:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19b58:	ea 89       	ldd	r30, Y+18	; 0x12
   19b5a:	fb 89       	ldd	r31, Y+19	; 0x13
   19b5c:	c0 80       	ld	r12, Z
   19b5e:	d1 80       	ldd	r13, Z+1	; 0x01
   19b60:	e2 80       	ldd	r14, Z+2	; 0x02
   19b62:	f3 80       	ldd	r15, Z+3	; 0x03
   19b64:	ee 89       	ldd	r30, Y+22	; 0x16
   19b66:	ff 89       	ldd	r31, Y+23	; 0x17
   19b68:	80 81       	ld	r24, Z
   19b6a:	91 81       	ldd	r25, Z+1	; 0x01
   19b6c:	a2 81       	ldd	r26, Z+2	; 0x02
   19b6e:	b3 81       	ldd	r27, Z+3	; 0x03
   19b70:	c8 0e       	add	r12, r24
   19b72:	d9 1e       	adc	r13, r25
   19b74:	ea 1e       	adc	r14, r26
   19b76:	fb 1e       	adc	r15, r27
   19b78:	0c cf       	rjmp	.-488    	; 0x19992 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19b7a:	8f ef       	ldi	r24, 0xFF	; 255
   19b7c:	9f ef       	ldi	r25, 0xFF	; 255
}
   19b7e:	6d 96       	adiw	r28, 0x1d	; 29
   19b80:	e2 e1       	ldi	r30, 0x12	; 18
   19b82:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

00019b86 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19b86:	a9 e3       	ldi	r26, 0x39	; 57
   19b88:	b1 e0       	ldi	r27, 0x01	; 1
   19b8a:	e9 ec       	ldi	r30, 0xC9	; 201
   19b8c:	fd ec       	ldi	r31, 0xCD	; 205
   19b8e:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__prologue_saves__+0xc>
   19b92:	6c 01       	movw	r12, r24
   19b94:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19b96:	be 01       	movw	r22, r28
   19b98:	66 5f       	subi	r22, 0xF6	; 246
   19b9a:	7e 4f       	sbci	r23, 0xFE	; 254
   19b9c:	0e 94 e0 bd 	call	0x17bc0	; 0x17bc0 <lif_stat>
   19ba0:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19ba2:	00 97       	sbiw	r24, 0x00	; 0
   19ba4:	09 f1       	breq	.+66     	; 0x19be8 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19ba6:	fc 01       	movw	r30, r24
   19ba8:	80 8d       	ldd	r24, Z+24	; 0x18
   19baa:	91 8d       	ldd	r25, Z+25	; 0x19
   19bac:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19bae:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19bb0:	81 15       	cp	r24, r1
   19bb2:	f2 e0       	ldi	r31, 0x02	; 2
   19bb4:	9f 07       	cpc	r25, r31
   19bb6:	a1 05       	cpc	r26, r1
   19bb8:	b1 05       	cpc	r27, r1
   19bba:	c8 f4       	brcc	.+50     	; 0x19bee <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19bbc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19bc0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19bc4:	32 ff       	sbrs	r19, 2
   19bc6:	10 c0       	rjmp	.+32     	; 0x19be8 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19bc8:	ed b7       	in	r30, 0x3d	; 61
   19bca:	fe b7       	in	r31, 0x3e	; 62
   19bcc:	86 83       	std	Z+6, r24	; 0x06
   19bce:	97 83       	std	Z+7, r25	; 0x07
   19bd0:	a0 87       	std	Z+8, r26	; 0x08
   19bd2:	b1 87       	std	Z+9, r27	; 0x09
   19bd4:	d5 82       	std	Z+5, r13	; 0x05
   19bd6:	c4 82       	std	Z+4, r12	; 0x04
   19bd8:	89 e6       	ldi	r24, 0x69	; 105
   19bda:	98 e3       	ldi	r25, 0x38	; 56
   19bdc:	a0 e0       	ldi	r26, 0x00	; 0
   19bde:	81 83       	std	Z+1, r24	; 0x01
   19be0:	92 83       	std	Z+2, r25	; 0x02
   19be2:	a3 83       	std	Z+3, r26	; 0x03
   19be4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(NULL);
   19be8:	00 e0       	ldi	r16, 0x00	; 0
   19bea:	10 e0       	ldi	r17, 0x00	; 0
   19bec:	c6 c0       	rjmp	.+396    	; 0x19d7a <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19bee:	64 e7       	ldi	r22, 0x74	; 116
   19bf0:	70 e0       	ldi	r23, 0x00	; 0
   19bf2:	80 e0       	ldi	r24, 0x00	; 0
   19bf4:	90 e0       	ldi	r25, 0x00	; 0
   19bf6:	0e 94 4c bd 	call	0x17a98	; 0x17a98 <lif_calloc>
   19bfa:	7c 01       	movw	r14, r24
    if(!LIF)
   19bfc:	89 2b       	or	r24, r25
   19bfe:	a1 f3       	breq	.-24     	; 0x19be8 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19c00:	c6 01       	movw	r24, r12
   19c02:	0e 94 97 bd 	call	0x17b2e	; 0x17b2e <lif_stralloc>
   19c06:	f7 01       	movw	r30, r14
   19c08:	91 83       	std	Z+1, r25	; 0x01
   19c0a:	80 83       	st	Z, r24
    if(!LIF->name)
   19c0c:	00 97       	sbiw	r24, 0x00	; 0
   19c0e:	09 f4       	brne	.+2      	; 0x19c12 <lif_open_volume+0x8c>
   19c10:	5e c0       	rjmp	.+188    	; 0x19cce <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19c12:	f5 01       	movw	r30, r10
   19c14:	80 8c       	ldd	r8, Z+24	; 0x18
   19c16:	91 8c       	ldd	r9, Z+25	; 0x19
   19c18:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19c1a:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19c1c:	f7 01       	movw	r30, r14
   19c1e:	80 86       	std	Z+8, r8	; 0x08
   19c20:	91 86       	std	Z+9, r9	; 0x09
   19c22:	a2 86       	std	Z+10, r10	; 0x0a
   19c24:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19c26:	77 27       	eor	r23, r23
   19c28:	6b 2d       	mov	r22, r11
   19c2a:	5a 2d       	mov	r21, r10
   19c2c:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19c2e:	88 20       	and	r8, r8
   19c30:	21 f0       	breq	.+8      	; 0x19c3a <lif_open_volume+0xb4>
        ++sectors;
   19c32:	4f 5f       	subi	r20, 0xFF	; 255
   19c34:	5f 4f       	sbci	r21, 0xFF	; 255
   19c36:	6f 4f       	sbci	r22, 0xFF	; 255
   19c38:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19c3a:	f7 01       	movw	r30, r14
   19c3c:	44 83       	std	Z+4, r20	; 0x04
   19c3e:	55 83       	std	Z+5, r21	; 0x05
   19c40:	66 83       	std	Z+6, r22	; 0x06
   19c42:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19c44:	b8 01       	movw	r22, r16
   19c46:	0e 94 b6 bd 	call	0x17b6c	; 0x17b6c <lif_open>
   19c4a:	f7 01       	movw	r30, r14
   19c4c:	93 83       	std	Z+3, r25	; 0x03
   19c4e:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19c50:	89 2b       	or	r24, r25
   19c52:	e9 f1       	breq	.+122    	; 0x19cce <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19c54:	00 e0       	ldi	r16, 0x00	; 0
   19c56:	11 e0       	ldi	r17, 0x01	; 1
   19c58:	20 e0       	ldi	r18, 0x00	; 0
   19c5a:	30 e0       	ldi	r19, 0x00	; 0
   19c5c:	a9 01       	movw	r20, r18
   19c5e:	be 01       	movw	r22, r28
   19c60:	66 5f       	subi	r22, 0xF6	; 246
   19c62:	7f 4f       	sbci	r23, 0xFF	; 255
   19c64:	c7 01       	movw	r24, r14
   19c66:	0e 94 3a be 	call	0x17c74	; 0x17c74 <lif_read>
   19c6a:	6f 3f       	cpi	r22, 0xFF	; 255
   19c6c:	71 05       	cpc	r23, r1
   19c6e:	81 05       	cpc	r24, r1
   19c70:	91 05       	cpc	r25, r1
   19c72:	09 f0       	breq	.+2      	; 0x19c76 <lif_open_volume+0xf0>
   19c74:	6c f4       	brge	.+26     	; 0x19c90 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19c76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19c7a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c7e:	92 ff       	sbrs	r25, 2
   19c80:	26 c0       	rjmp	.+76     	; 0x19cce <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19c82:	ed b7       	in	r30, 0x3d	; 61
   19c84:	fe b7       	in	r31, 0x3e	; 62
   19c86:	d5 82       	std	Z+5, r13	; 0x05
   19c88:	c4 82       	std	Z+4, r12	; 0x04
   19c8a:	83 e3       	ldi	r24, 0x33	; 51
   19c8c:	98 e3       	ldi	r25, 0x38	; 56
   19c8e:	19 c0       	rjmp	.+50     	; 0x19cc2 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19c90:	b7 01       	movw	r22, r14
   19c92:	ce 01       	movw	r24, r28
   19c94:	0a 96       	adiw	r24, 0x0a	; 10
   19c96:	0e 94 5a c0 	call	0x180b4	; 0x180b4 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19c9a:	c7 01       	movw	r24, r14
   19c9c:	0e 94 66 c4 	call	0x188cc	; 0x188cc <lif_check_volume>
   19ca0:	89 2b       	or	r24, r25
   19ca2:	c1 f4       	brne	.+48     	; 0x19cd4 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19ca4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ca8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19cac:	92 ff       	sbrs	r25, 2
   19cae:	0f c0       	rjmp	.+30     	; 0x19cce <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19cb0:	f7 01       	movw	r30, r14
   19cb2:	80 81       	ld	r24, Z
   19cb4:	91 81       	ldd	r25, Z+1	; 0x01
   19cb6:	ed b7       	in	r30, 0x3d	; 61
   19cb8:	fe b7       	in	r31, 0x3e	; 62
   19cba:	95 83       	std	Z+5, r25	; 0x05
   19cbc:	84 83       	std	Z+4, r24	; 0x04
   19cbe:	80 e0       	ldi	r24, 0x00	; 0
   19cc0:	98 e3       	ldi	r25, 0x38	; 56
   19cc2:	a0 e0       	ldi	r26, 0x00	; 0
   19cc4:	81 83       	std	Z+1, r24	; 0x01
   19cc6:	92 83       	std	Z+2, r25	; 0x02
   19cc8:	a3 83       	std	Z+3, r26	; 0x03
   19cca:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19cce:	c7 01       	movw	r24, r14
   19cd0:	9d d8       	rcall	.-3782   	; 0x18e0c <lif_close_volume>
   19cd2:	8a cf       	rjmp	.-236    	; 0x19be8 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19cd4:	f7 01       	movw	r30, r14
   19cd6:	45 a5       	ldd	r20, Z+45	; 0x2d
   19cd8:	56 a5       	ldd	r21, Z+46	; 0x2e
   19cda:	67 a5       	ldd	r22, Z+47	; 0x2f
   19cdc:	70 a9       	ldd	r23, Z+48	; 0x30
   19cde:	85 a9       	ldd	r24, Z+53	; 0x35
   19ce0:	96 a9       	ldd	r25, Z+54	; 0x36
   19ce2:	a7 a9       	ldd	r26, Z+55	; 0x37
   19ce4:	b0 ad       	ldd	r27, Z+56	; 0x38
   19ce6:	48 0f       	add	r20, r24
   19ce8:	59 1f       	adc	r21, r25
   19cea:	6a 1f       	adc	r22, r26
   19cec:	7b 1f       	adc	r23, r27
   19cee:	44 87       	std	Z+12, r20	; 0x0c
   19cf0:	55 87       	std	Z+13, r21	; 0x0d
   19cf2:	66 87       	std	Z+14, r22	; 0x0e
   19cf4:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19cf6:	84 81       	ldd	r24, Z+4	; 0x04
   19cf8:	95 81       	ldd	r25, Z+5	; 0x05
   19cfa:	a6 81       	ldd	r26, Z+6	; 0x06
   19cfc:	b7 81       	ldd	r27, Z+7	; 0x07
   19cfe:	84 1b       	sub	r24, r20
   19d00:	95 0b       	sbc	r25, r21
   19d02:	a6 0b       	sbc	r26, r22
   19d04:	b7 0b       	sbc	r27, r23
   19d06:	80 8b       	std	Z+16, r24	; 0x10
   19d08:	91 8b       	std	Z+17, r25	; 0x11
   19d0a:	a2 8b       	std	Z+18, r26	; 0x12
   19d0c:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19d0e:	80 8f       	std	Z+24, r24	; 0x18
   19d10:	91 8f       	std	Z+25, r25	; 0x19
   19d12:	a2 8f       	std	Z+26, r26	; 0x1a
   19d14:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19d16:	14 8a       	std	Z+20, r1	; 0x14
   19d18:	15 8a       	std	Z+21, r1	; 0x15
   19d1a:	16 8a       	std	Z+22, r1	; 0x16
   19d1c:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19d1e:	17 8e       	std	Z+31, r1	; 0x1f
   19d20:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19d22:	15 8e       	std	Z+29, r1	; 0x1d
   19d24:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19d26:	11 a2       	std	Z+33, r1	; 0x21
   19d28:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19d2a:	13 a2       	std	Z+35, r1	; 0x23
   19d2c:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19d2e:	c7 01       	movw	r24, r14
   19d30:	d6 d9       	rcall	.-3156   	; 0x190de <lif_updatefree>
   19d32:	8c 01       	movw	r16, r24
   19d34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19d38:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d3c:	01 15       	cp	r16, r1
   19d3e:	11 05       	cpc	r17, r1
   19d40:	a1 f4       	brne	.+40     	; 0x19d6a <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19d42:	92 ff       	sbrs	r25, 2
   19d44:	0f c0       	rjmp	.+30     	; 0x19d64 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19d46:	f7 01       	movw	r30, r14
   19d48:	80 81       	ld	r24, Z
   19d4a:	91 81       	ldd	r25, Z+1	; 0x01
   19d4c:	ed b7       	in	r30, 0x3d	; 61
   19d4e:	fe b7       	in	r31, 0x3e	; 62
   19d50:	95 83       	std	Z+5, r25	; 0x05
   19d52:	84 83       	std	Z+4, r24	; 0x04
   19d54:	8d ec       	ldi	r24, 0xCD	; 205
   19d56:	97 e3       	ldi	r25, 0x37	; 55
   19d58:	a0 e0       	ldi	r26, 0x00	; 0
   19d5a:	81 83       	std	Z+1, r24	; 0x01
   19d5c:	92 83       	std	Z+2, r25	; 0x02
   19d5e:	a3 83       	std	Z+3, r26	; 0x03
   19d60:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d64:	c7 01       	movw	r24, r14
   19d66:	52 d8       	rcall	.-3932   	; 0x18e0c <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19d68:	08 c0       	rjmp	.+16     	; 0x19d7a <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19d6a:	92 ff       	sbrs	r25, 2
   19d6c:	05 c0       	rjmp	.+10     	; 0x19d78 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19d6e:	62 e4       	ldi	r22, 0x42	; 66
   19d70:	76 e1       	ldi	r23, 0x16	; 22
   19d72:	c7 01       	movw	r24, r14
   19d74:	0e 94 a0 c2 	call	0x18540	; 0x18540 <lif_dump_vol>
   19d78:	87 01       	movw	r16, r14
    return( LIF );
}
   19d7a:	c8 01       	movw	r24, r16
   19d7c:	c7 5c       	subi	r28, 0xC7	; 199
   19d7e:	de 4f       	sbci	r29, 0xFE	; 254
   19d80:	ec e0       	ldi	r30, 0x0C	; 12
   19d82:	0c 94 0e e3 	jmp	0x1c61c	; 0x1c61c <__epilogue_restores__+0xc>

00019d86 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19d86:	2f 92       	push	r2
   19d88:	3f 92       	push	r3
   19d8a:	4f 92       	push	r4
   19d8c:	5f 92       	push	r5
   19d8e:	6f 92       	push	r6
   19d90:	8f 92       	push	r8
   19d92:	9f 92       	push	r9
   19d94:	af 92       	push	r10
   19d96:	bf 92       	push	r11
   19d98:	cf 92       	push	r12
   19d9a:	df 92       	push	r13
   19d9c:	ef 92       	push	r14
   19d9e:	0f 93       	push	r16
   19da0:	1f 93       	push	r17
   19da2:	cf 93       	push	r28
   19da4:	df 93       	push	r29
   19da6:	cd b7       	in	r28, 0x3d	; 61
   19da8:	de b7       	in	r29, 0x3e	; 62
   19daa:	af 97       	sbiw	r28, 0x2f	; 47
   19dac:	0f b6       	in	r0, 0x3f	; 63
   19dae:	f8 94       	cli
   19db0:	de bf       	out	0x3e, r29	; 62
   19db2:	0f be       	out	0x3f, r0	; 63
   19db4:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19db6:	68 e0       	ldi	r22, 0x08	; 8
   19db8:	79 e0       	ldi	r23, 0x09	; 9
   19dba:	e5 de       	rcall	.-566    	; 0x19b86 <lif_open_volume>
   19dbc:	9f a7       	std	Y+47, r25	; 0x2f
   19dbe:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19dc0:	00 97       	sbiw	r24, 0x00	; 0
   19dc2:	09 f4       	brne	.+2      	; 0x19dc6 <lif_dir+0x40>
   19dc4:	9e c1       	rjmp	.+828    	; 0x1a102 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19dc6:	fc 01       	movw	r30, r24
   19dc8:	86 a1       	ldd	r24, Z+38	; 0x26
   19dca:	88 23       	and	r24, r24
   19dcc:	21 f0       	breq	.+8      	; 0x19dd6 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19dce:	8f 01       	movw	r16, r30
   19dd0:	0a 5d       	subi	r16, 0xDA	; 218
   19dd2:	1f 4f       	sbci	r17, 0xFF	; 255
   19dd4:	02 c0       	rjmp	.+4      	; 0x19dda <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19dd6:	04 ef       	ldi	r16, 0xF4	; 244
   19dd8:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19dda:	8e a5       	ldd	r24, Y+46	; 0x2e
   19ddc:	9f a5       	ldd	r25, Y+47	; 0x2f
   19dde:	87 5b       	subi	r24, 0xB7	; 183
   19de0:	9f 4f       	sbci	r25, 0xFF	; 255
   19de2:	0e 94 64 c2 	call	0x184c8	; 0x184c8 <lif_lifbcd2timestr>
   19de6:	ed b7       	in	r30, 0x3d	; 61
   19de8:	fe b7       	in	r31, 0x3e	; 62
   19dea:	97 83       	std	Z+7, r25	; 0x07
   19dec:	86 83       	std	Z+6, r24	; 0x06
   19dee:	15 83       	std	Z+5, r17	; 0x05
   19df0:	04 83       	std	Z+4, r16	; 0x04
   19df2:	86 eb       	ldi	r24, 0xB6	; 182
   19df4:	97 e3       	ldi	r25, 0x37	; 55
   19df6:	a0 e0       	ldi	r26, 0x00	; 0
   19df8:	81 83       	std	Z+1, r24	; 0x01
   19dfa:	92 83       	std	Z+2, r25	; 0x02
   19dfc:	a3 83       	std	Z+3, r26	; 0x03
   19dfe:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19e02:	86 e7       	ldi	r24, 0x76	; 118
   19e04:	97 e3       	ldi	r25, 0x37	; 55
   19e06:	a0 e0       	ldi	r26, 0x00	; 0
   19e08:	ed b7       	in	r30, 0x3d	; 61
   19e0a:	fe b7       	in	r31, 0x3e	; 62
   19e0c:	81 83       	std	Z+1, r24	; 0x01
   19e0e:	92 83       	std	Z+2, r25	; 0x02
   19e10:	a3 83       	std	Z+3, r26	; 0x03
   19e12:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19e16:	00 e2       	ldi	r16, 0x20	; 32
   19e18:	10 e0       	ldi	r17, 0x00	; 0
   19e1a:	1f 8b       	std	Y+23, r17	; 0x17
   19e1c:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19e1e:	21 2c       	mov	r2, r1
   19e20:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19e22:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e24:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e26:	06 5a       	subi	r16, 0xA6	; 166
   19e28:	1f 4f       	sbci	r17, 0xFF	; 255
   19e2a:	1d 8f       	std	Y+29, r17	; 0x1d
   19e2c:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19e2e:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e30:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e32:	00 5a       	subi	r16, 0xA0	; 160
   19e34:	1f 4f       	sbci	r17, 0xFF	; 255
   19e36:	1d a3       	std	Y+37, r17	; 0x25
   19e38:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19e3a:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e3c:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e3e:	04 59       	subi	r16, 0x94	; 148
   19e40:	1f 4f       	sbci	r17, 0xFF	; 255
   19e42:	1f a3       	std	Y+39, r17	; 0x27
   19e44:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19e46:	8a e2       	ldi	r24, 0x2A	; 42
   19e48:	97 e3       	ldi	r25, 0x37	; 55
   19e4a:	6c 01       	movw	r12, r24
   19e4c:	e1 2c       	mov	r14, r1
   19e4e:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e50:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e52:	01 5b       	subi	r16, 0xB1	; 177
   19e54:	1f 4f       	sbci	r17, 0xFF	; 255
   19e56:	1f 8f       	std	Y+31, r17	; 0x1f
   19e58:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19e5a:	8a ef       	ldi	r24, 0xFA	; 250
   19e5c:	96 e3       	ldi	r25, 0x36	; 54
   19e5e:	2c 01       	movw	r4, r24
   19e60:	61 2c       	mov	r6, r1
   19e62:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e64:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e66:	04 5a       	subi	r16, 0xA4	; 164
   19e68:	1f 4f       	sbci	r17, 0xFF	; 255
   19e6a:	19 a7       	std	Y+41, r17	; 0x29
   19e6c:	08 a7       	std	Y+40, r16	; 0x28
   19e6e:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e70:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e72:	02 59       	subi	r16, 0x92	; 146
   19e74:	1f 4f       	sbci	r17, 0xFF	; 255
   19e76:	1b a7       	std	Y+43, r17	; 0x2b
   19e78:	0a a7       	std	Y+42, r16	; 0x2a
   19e7a:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e7c:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e7e:	0c 59       	subi	r16, 0x9C	; 156
   19e80:	1f 4f       	sbci	r17, 0xFF	; 255
   19e82:	1d a7       	std	Y+45, r17	; 0x2d
   19e84:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19e86:	b1 01       	movw	r22, r2
   19e88:	8e a5       	ldd	r24, Y+46	; 0x2e
   19e8a:	9f a5       	ldd	r25, Y+47	; 0x2f
   19e8c:	4d d8       	rcall	.-3942   	; 0x18f28 <lif_readdirindex>
   19e8e:	89 2b       	or	r24, r25
   19e90:	09 f4       	brne	.+2      	; 0x19e94 <lif_dir+0x10e>
   19e92:	ad c0       	rjmp	.+346    	; 0x19fee <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19e94:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19e96:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19e98:	8d 91       	ld	r24, X+
   19e9a:	9c 91       	ld	r25, X
   19e9c:	8f 3f       	cpi	r24, 0xFF	; 255
   19e9e:	bf ef       	ldi	r27, 0xFF	; 255
   19ea0:	9b 07       	cpc	r25, r27
   19ea2:	09 f4       	brne	.+2      	; 0x19ea6 <lif_dir+0x120>
   19ea4:	a4 c0       	rjmp	.+328    	; 0x19fee <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19ea6:	ec a1       	ldd	r30, Y+36	; 0x24
   19ea8:	fd a1       	ldd	r31, Y+37	; 0x25
   19eaa:	40 81       	ld	r20, Z
   19eac:	51 81       	ldd	r21, Z+1	; 0x01
   19eae:	62 81       	ldd	r22, Z+2	; 0x02
   19eb0:	73 81       	ldd	r23, Z+3	; 0x03
   19eb2:	00 27       	eor	r16, r16
   19eb4:	14 2f       	mov	r17, r20
   19eb6:	25 2f       	mov	r18, r21
   19eb8:	36 2f       	mov	r19, r22
   19eba:	08 8f       	std	Y+24, r16	; 0x18
   19ebc:	19 8f       	std	Y+25, r17	; 0x19
   19ebe:	2a 8f       	std	Y+26, r18	; 0x1a
   19ec0:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19ec2:	8c 7f       	andi	r24, 0xFC	; 252
   19ec4:	80 31       	cpi	r24, 0x10	; 16
   19ec6:	90 4e       	sbci	r25, 0xE0	; 224
   19ec8:	09 f0       	breq	.+2      	; 0x19ecc <lif_dir+0x146>
   19eca:	4b c0       	rjmp	.+150    	; 0x19f62 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19ecc:	ae a1       	ldd	r26, Y+38	; 0x26
   19ece:	bf a1       	ldd	r27, Y+39	; 0x27
   19ed0:	8d 91       	ld	r24, X+
   19ed2:	9c 91       	ld	r25, X
   19ed4:	00 97       	sbiw	r24, 0x00	; 0
   19ed6:	b9 f0       	breq	.+46     	; 0x19f06 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19ed8:	4c 01       	movw	r8, r24
   19eda:	a1 2c       	mov	r10, r1
   19edc:	b1 2c       	mov	r11, r1
   19ede:	33 27       	eor	r19, r19
   19ee0:	2b 2d       	mov	r18, r11
   19ee2:	1a 2d       	mov	r17, r10
   19ee4:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19ee6:	88 23       	and	r24, r24
   19ee8:	21 f0       	breq	.+8      	; 0x19ef2 <lif_dir+0x16c>
        ++sectors;
   19eea:	0f 5f       	subi	r16, 0xFF	; 255
   19eec:	1f 4f       	sbci	r17, 0xFF	; 255
   19eee:	2f 4f       	sbci	r18, 0xFF	; 255
   19ef0:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19ef2:	40 17       	cp	r20, r16
   19ef4:	51 07       	cpc	r21, r17
   19ef6:	62 07       	cpc	r22, r18
   19ef8:	73 07       	cpc	r23, r19
   19efa:	29 f4       	brne	.+10     	; 0x19f06 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19efc:	88 8e       	std	Y+24, r8	; 0x18
   19efe:	99 8e       	std	Y+25, r9	; 0x19
   19f00:	aa 8e       	std	Y+26, r10	; 0x1a
   19f02:	bb 8e       	std	Y+27, r11	; 0x1b
   19f04:	2e c0       	rjmp	.+92     	; 0x19f62 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19f06:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19f0a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19f0e:	32 ff       	sbrs	r19, 2
   19f10:	24 c0       	rjmp	.+72     	; 0x19f5a <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19f12:	4c 01       	movw	r8, r24
   19f14:	a1 2c       	mov	r10, r1
   19f16:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19f18:	33 27       	eor	r19, r19
   19f1a:	2b 2d       	mov	r18, r11
   19f1c:	1a 2d       	mov	r17, r10
   19f1e:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19f20:	88 23       	and	r24, r24
   19f22:	21 f0       	breq	.+8      	; 0x19f2c <lif_dir+0x1a6>
        ++sectors;
   19f24:	0f 5f       	subi	r16, 0xFF	; 255
   19f26:	1f 4f       	sbci	r17, 0xFF	; 255
   19f28:	2f 4f       	sbci	r18, 0xFF	; 255
   19f2a:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19f2c:	ed b7       	in	r30, 0x3d	; 61
   19f2e:	fe b7       	in	r31, 0x3e	; 62
   19f30:	46 87       	std	Z+14, r20	; 0x0e
   19f32:	57 87       	std	Z+15, r21	; 0x0f
   19f34:	60 8b       	std	Z+16, r22	; 0x10
   19f36:	71 8b       	std	Z+17, r23	; 0x11
   19f38:	02 87       	std	Z+10, r16	; 0x0a
   19f3a:	13 87       	std	Z+11, r17	; 0x0b
   19f3c:	24 87       	std	Z+12, r18	; 0x0c
   19f3e:	35 87       	std	Z+13, r19	; 0x0d
   19f40:	86 82       	std	Z+6, r8	; 0x06
   19f42:	97 82       	std	Z+7, r9	; 0x07
   19f44:	a0 86       	std	Z+8, r10	; 0x08
   19f46:	b1 86       	std	Z+9, r11	; 0x09
   19f48:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f4a:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f4c:	15 83       	std	Z+5, r17	; 0x05
   19f4e:	04 83       	std	Z+4, r16	; 0x04
   19f50:	c1 82       	std	Z+1, r12	; 0x01
   19f52:	d2 82       	std	Z+2, r13	; 0x02
   19f54:	e3 82       	std	Z+3, r14	; 0x03
   19f56:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19f5a:	01 e2       	ldi	r16, 0x21	; 33
   19f5c:	10 e0       	ldi	r17, 0x00	; 0
   19f5e:	1f 8b       	std	Y+23, r17	; 0x17
   19f60:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19f62:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19f64:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19f66:	8d 90       	ld	r8, X+
   19f68:	9c 90       	ld	r9, X
   19f6a:	81 14       	cp	r8, r1
   19f6c:	91 04       	cpc	r9, r1
   19f6e:	19 f0       	breq	.+6      	; 0x19f76 <lif_dir+0x1f0>
   19f70:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f72:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f74:	02 c0       	rjmp	.+4      	; 0x19f7a <lif_dir+0x1f4>
   19f76:	01 e5       	ldi	r16, 0x51	; 81
   19f78:	16 e1       	ldi	r17, 0x16	; 22
   19f7a:	a8 a5       	ldd	r26, Y+40	; 0x28
   19f7c:	b9 a5       	ldd	r27, Y+41	; 0x29
   19f7e:	8d 91       	ld	r24, X+
   19f80:	9d 91       	ld	r25, X+
   19f82:	0d 90       	ld	r0, X+
   19f84:	bc 91       	ld	r27, X
   19f86:	a0 2d       	mov	r26, r0
   19f88:	88 a3       	std	Y+32, r24	; 0x20
   19f8a:	99 a3       	std	Y+33, r25	; 0x21
   19f8c:	aa a3       	std	Y+34, r26	; 0x22
   19f8e:	bb a3       	std	Y+35, r27	; 0x23
   19f90:	ea a5       	ldd	r30, Y+42	; 0x2a
   19f92:	fb a5       	ldd	r31, Y+43	; 0x2b
   19f94:	a0 80       	ld	r10, Z
   19f96:	b1 80       	ldd	r11, Z+1	; 0x01
   19f98:	8c a5       	ldd	r24, Y+44	; 0x2c
   19f9a:	9d a5       	ldd	r25, Y+45	; 0x2d
   19f9c:	0e 94 64 c2 	call	0x184c8	; 0x184c8 <lif_lifbcd2timestr>
   19fa0:	ed b7       	in	r30, 0x3d	; 61
   19fa2:	fe b7       	in	r31, 0x3e	; 62
   19fa4:	95 8b       	std	Z+21, r25	; 0x15
   19fa6:	84 8b       	std	Z+20, r24	; 0x14
   19fa8:	b3 8a       	std	Z+19, r11	; 0x13
   19faa:	a2 8a       	std	Z+18, r10	; 0x12
   19fac:	2e 89       	ldd	r18, Y+22	; 0x16
   19fae:	3f 89       	ldd	r19, Y+23	; 0x17
   19fb0:	31 8b       	std	Z+17, r19	; 0x11
   19fb2:	20 8b       	std	Z+16, r18	; 0x10
   19fb4:	88 8d       	ldd	r24, Y+24	; 0x18
   19fb6:	99 8d       	ldd	r25, Y+25	; 0x19
   19fb8:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19fba:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19fbc:	84 87       	std	Z+12, r24	; 0x0c
   19fbe:	95 87       	std	Z+13, r25	; 0x0d
   19fc0:	a6 87       	std	Z+14, r26	; 0x0e
   19fc2:	b7 87       	std	Z+15, r27	; 0x0f
   19fc4:	88 a1       	ldd	r24, Y+32	; 0x20
   19fc6:	99 a1       	ldd	r25, Y+33	; 0x21
   19fc8:	aa a1       	ldd	r26, Y+34	; 0x22
   19fca:	bb a1       	ldd	r27, Y+35	; 0x23
   19fcc:	80 87       	std	Z+8, r24	; 0x08
   19fce:	91 87       	std	Z+9, r25	; 0x09
   19fd0:	a2 87       	std	Z+10, r26	; 0x0a
   19fd2:	b3 87       	std	Z+11, r27	; 0x0b
   19fd4:	97 82       	std	Z+7, r9	; 0x07
   19fd6:	86 82       	std	Z+6, r8	; 0x06
   19fd8:	15 83       	std	Z+5, r17	; 0x05
   19fda:	04 83       	std	Z+4, r16	; 0x04
   19fdc:	41 82       	std	Z+1, r4	; 0x01
   19fde:	52 82       	std	Z+2, r5	; 0x02
   19fe0:	63 82       	std	Z+3, r6	; 0x03
   19fe2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   19fe6:	ff ef       	ldi	r31, 0xFF	; 255
   19fe8:	2f 1a       	sub	r2, r31
   19fea:	3f 0a       	sbc	r3, r31
    }
   19fec:	4c cf       	rjmp	.-360    	; 0x19e86 <lif_dir+0x100>

    printf("\n");
   19fee:	88 ef       	ldi	r24, 0xF8	; 248
   19ff0:	96 e3       	ldi	r25, 0x36	; 54
   19ff2:	a0 e0       	ldi	r26, 0x00	; 0
   19ff4:	ed b7       	in	r30, 0x3d	; 61
   19ff6:	fe b7       	in	r31, 0x3e	; 62
   19ff8:	81 83       	std	Z+1, r24	; 0x01
   19ffa:	92 83       	std	Z+2, r25	; 0x02
   19ffc:	a3 83       	std	Z+3, r26	; 0x03
   19ffe:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a002:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a004:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a006:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a008:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a00a:	09 2e       	mov	r0, r25
   1a00c:	00 0c       	add	r0, r0
   1a00e:	aa 0b       	sbc	r26, r26
   1a010:	bb 0b       	sbc	r27, r27
   1a012:	ed b7       	in	r30, 0x3d	; 61
   1a014:	fe b7       	in	r31, 0x3e	; 62
   1a016:	84 83       	std	Z+4, r24	; 0x04
   1a018:	95 83       	std	Z+5, r25	; 0x05
   1a01a:	a6 83       	std	Z+6, r26	; 0x06
   1a01c:	b7 83       	std	Z+7, r27	; 0x07
   1a01e:	8c ee       	ldi	r24, 0xEC	; 236
   1a020:	96 e3       	ldi	r25, 0x36	; 54
   1a022:	a0 e0       	ldi	r26, 0x00	; 0
   1a024:	81 83       	std	Z+1, r24	; 0x01
   1a026:	92 83       	std	Z+2, r25	; 0x02
   1a028:	a3 83       	std	Z+3, r26	; 0x03
   1a02a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a02e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a030:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a032:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a034:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a036:	09 2e       	mov	r0, r25
   1a038:	00 0c       	add	r0, r0
   1a03a:	aa 0b       	sbc	r26, r26
   1a03c:	bb 0b       	sbc	r27, r27
   1a03e:	ed b7       	in	r30, 0x3d	; 61
   1a040:	fe b7       	in	r31, 0x3e	; 62
   1a042:	84 83       	std	Z+4, r24	; 0x04
   1a044:	95 83       	std	Z+5, r25	; 0x05
   1a046:	a6 83       	std	Z+6, r26	; 0x06
   1a048:	b7 83       	std	Z+7, r27	; 0x07
   1a04a:	8f ed       	ldi	r24, 0xDF	; 223
   1a04c:	96 e3       	ldi	r25, 0x36	; 54
   1a04e:	a0 e0       	ldi	r26, 0x00	; 0
   1a050:	81 83       	std	Z+1, r24	; 0x01
   1a052:	92 83       	std	Z+2, r25	; 0x02
   1a054:	a3 83       	std	Z+3, r26	; 0x03
   1a056:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a05a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a05c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a05e:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a060:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a062:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a064:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a066:	ed b7       	in	r30, 0x3d	; 61
   1a068:	fe b7       	in	r31, 0x3e	; 62
   1a06a:	84 83       	std	Z+4, r24	; 0x04
   1a06c:	95 83       	std	Z+5, r25	; 0x05
   1a06e:	a6 83       	std	Z+6, r26	; 0x06
   1a070:	b7 83       	std	Z+7, r27	; 0x07
   1a072:	8e ec       	ldi	r24, 0xCE	; 206
   1a074:	96 e3       	ldi	r25, 0x36	; 54
   1a076:	a0 e0       	ldi	r26, 0x00	; 0
   1a078:	81 83       	std	Z+1, r24	; 0x01
   1a07a:	92 83       	std	Z+2, r25	; 0x02
   1a07c:	a3 83       	std	Z+3, r26	; 0x03
   1a07e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a082:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a084:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a086:	85 a9       	ldd	r24, Z+53	; 0x35
   1a088:	96 a9       	ldd	r25, Z+54	; 0x36
   1a08a:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a08c:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a08e:	ed b7       	in	r30, 0x3d	; 61
   1a090:	fe b7       	in	r31, 0x3e	; 62
   1a092:	84 83       	std	Z+4, r24	; 0x04
   1a094:	95 83       	std	Z+5, r25	; 0x05
   1a096:	a6 83       	std	Z+6, r26	; 0x06
   1a098:	b7 83       	std	Z+7, r27	; 0x07
   1a09a:	8b eb       	ldi	r24, 0xBB	; 187
   1a09c:	96 e3       	ldi	r25, 0x36	; 54
   1a09e:	a0 e0       	ldi	r26, 0x00	; 0
   1a0a0:	81 83       	std	Z+1, r24	; 0x01
   1a0a2:	92 83       	std	Z+2, r25	; 0x02
   1a0a4:	a3 83       	std	Z+3, r26	; 0x03
   1a0a6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a0aa:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0ac:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0ae:	84 89       	ldd	r24, Z+20	; 0x14
   1a0b0:	95 89       	ldd	r25, Z+21	; 0x15
   1a0b2:	a6 89       	ldd	r26, Z+22	; 0x16
   1a0b4:	b7 89       	ldd	r27, Z+23	; 0x17
   1a0b6:	ed b7       	in	r30, 0x3d	; 61
   1a0b8:	fe b7       	in	r31, 0x3e	; 62
   1a0ba:	84 83       	std	Z+4, r24	; 0x04
   1a0bc:	95 83       	std	Z+5, r25	; 0x05
   1a0be:	a6 83       	std	Z+6, r26	; 0x06
   1a0c0:	b7 83       	std	Z+7, r27	; 0x07
   1a0c2:	88 ea       	ldi	r24, 0xA8	; 168
   1a0c4:	96 e3       	ldi	r25, 0x36	; 54
   1a0c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a0c8:	81 83       	std	Z+1, r24	; 0x01
   1a0ca:	92 83       	std	Z+2, r25	; 0x02
   1a0cc:	a3 83       	std	Z+3, r26	; 0x03
   1a0ce:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a0d2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0d4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0d6:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0d8:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0da:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0dc:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0de:	ed b7       	in	r30, 0x3d	; 61
   1a0e0:	fe b7       	in	r31, 0x3e	; 62
   1a0e2:	84 83       	std	Z+4, r24	; 0x04
   1a0e4:	95 83       	std	Z+5, r25	; 0x05
   1a0e6:	a6 83       	std	Z+6, r26	; 0x06
   1a0e8:	b7 83       	std	Z+7, r27	; 0x07
   1a0ea:	85 e9       	ldi	r24, 0x95	; 149
   1a0ec:	96 e3       	ldi	r25, 0x36	; 54
   1a0ee:	a0 e0       	ldi	r26, 0x00	; 0
   1a0f0:	81 83       	std	Z+1, r24	; 0x01
   1a0f2:	92 83       	std	Z+2, r25	; 0x02
   1a0f4:	a3 83       	std	Z+3, r26	; 0x03
   1a0f6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a0fa:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a0fc:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a0fe:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a102:	af 96       	adiw	r28, 0x2f	; 47
   1a104:	0f b6       	in	r0, 0x3f	; 63
   1a106:	f8 94       	cli
   1a108:	de bf       	out	0x3e, r29	; 62
   1a10a:	0f be       	out	0x3f, r0	; 63
   1a10c:	cd bf       	out	0x3d, r28	; 61
   1a10e:	df 91       	pop	r29
   1a110:	cf 91       	pop	r28
   1a112:	1f 91       	pop	r17
   1a114:	0f 91       	pop	r16
   1a116:	ef 90       	pop	r14
   1a118:	df 90       	pop	r13
   1a11a:	cf 90       	pop	r12
   1a11c:	bf 90       	pop	r11
   1a11e:	af 90       	pop	r10
   1a120:	9f 90       	pop	r9
   1a122:	8f 90       	pop	r8
   1a124:	6f 90       	pop	r6
   1a126:	5f 90       	pop	r5
   1a128:	4f 90       	pop	r4
   1a12a:	3f 90       	pop	r3
   1a12c:	2f 90       	pop	r2
   1a12e:	08 95       	ret

0001a130 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a130:	a5 e0       	ldi	r26, 0x05	; 5
   1a132:	b0 e0       	ldi	r27, 0x00	; 0
   1a134:	ee e9       	ldi	r30, 0x9E	; 158
   1a136:	f0 ed       	ldi	r31, 0xD0	; 208
   1a138:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
   1a13c:	7c 01       	movw	r14, r24
   1a13e:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a140:	cb 01       	movw	r24, r22
   1a142:	0e 94 55 bf 	call	0x17eaa	; 0x17eaa <lif_checkname>
   1a146:	89 2b       	or	r24, r25
   1a148:	69 f4       	brne	.+26     	; 0x1a164 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a14a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a14e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a152:	92 ff       	sbrs	r25, 2
   1a154:	48 c0       	rjmp	.+144    	; 0x1a1e6 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a156:	ed b7       	in	r30, 0x3d	; 61
   1a158:	fe b7       	in	r31, 0x3e	; 62
   1a15a:	d5 83       	std	Z+5, r29	; 0x05
   1a15c:	c4 83       	std	Z+4, r28	; 0x04
   1a15e:	8e e6       	ldi	r24, 0x6E	; 110
   1a160:	96 e3       	ldi	r25, 0x36	; 54
   1a162:	15 c0       	rjmp	.+42     	; 0x1a18e <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a164:	fe 01       	movw	r30, r28
   1a166:	01 90       	ld	r0, Z+
   1a168:	00 20       	and	r0, r0
   1a16a:	e9 f7       	brne	.-6      	; 0x1a166 <lif_find_file+0x36>
   1a16c:	31 97       	sbiw	r30, 0x01	; 1
   1a16e:	ec 1b       	sub	r30, r28
   1a170:	fd 0b       	sbc	r31, r29
   1a172:	3b 97       	sbiw	r30, 0x0b	; 11
   1a174:	98 f0       	brcs	.+38     	; 0x1a19c <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a176:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a17a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a17e:	92 ff       	sbrs	r25, 2
   1a180:	32 c0       	rjmp	.+100    	; 0x1a1e6 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a182:	ed b7       	in	r30, 0x3d	; 61
   1a184:	fe b7       	in	r31, 0x3e	; 62
   1a186:	d5 83       	std	Z+5, r29	; 0x05
   1a188:	c4 83       	std	Z+4, r28	; 0x04
   1a18a:	89 e4       	ldi	r24, 0x49	; 73
   1a18c:	96 e3       	ldi	r25, 0x36	; 54
   1a18e:	a0 e0       	ldi	r26, 0x00	; 0
   1a190:	81 83       	std	Z+1, r24	; 0x01
   1a192:	92 83       	std	Z+2, r25	; 0x02
   1a194:	a3 83       	std	Z+3, r26	; 0x03
   1a196:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1a19a:	25 c0       	rjmp	.+74     	; 0x1a1e6 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a19c:	e1 14       	cp	r14, r1
   1a19e:	f1 04       	cpc	r15, r1
   1a1a0:	11 f1       	breq	.+68     	; 0x1a1e6 <lif_find_file+0xb6>
   1a1a2:	00 e0       	ldi	r16, 0x00	; 0
   1a1a4:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a1a6:	67 01       	movw	r12, r14
   1a1a8:	fa e5       	ldi	r31, 0x5A	; 90
   1a1aa:	cf 0e       	add	r12, r31
   1a1ac:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1ae:	57 01       	movw	r10, r14
   1a1b0:	2f e4       	ldi	r18, 0x4F	; 79
   1a1b2:	a2 0e       	add	r10, r18
   1a1b4:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a1b6:	b8 01       	movw	r22, r16
   1a1b8:	c7 01       	movw	r24, r14
   1a1ba:	0e 94 94 c7 	call	0x18f28	; 0x18f28 <lif_readdirindex>
   1a1be:	89 2b       	or	r24, r25
   1a1c0:	91 f0       	breq	.+36     	; 0x1a1e6 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a1c2:	f6 01       	movw	r30, r12
   1a1c4:	80 81       	ld	r24, Z
   1a1c6:	91 81       	ldd	r25, Z+1	; 0x01
   1a1c8:	8f 3f       	cpi	r24, 0xFF	; 255
   1a1ca:	ff ef       	ldi	r31, 0xFF	; 255
   1a1cc:	9f 07       	cpc	r25, r31
   1a1ce:	59 f0       	breq	.+22     	; 0x1a1e6 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1d0:	89 2b       	or	r24, r25
   1a1d2:	31 f0       	breq	.+12     	; 0x1a1e0 <lif_find_file+0xb0>
   1a1d4:	be 01       	movw	r22, r28
   1a1d6:	c5 01       	movw	r24, r10
   1a1d8:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <strcasecmp>
   1a1dc:	89 2b       	or	r24, r25
   1a1de:	31 f0       	breq	.+12     	; 0x1a1ec <lif_find_file+0xbc>
            break;
        ++index;
   1a1e0:	0f 5f       	subi	r16, 0xFF	; 255
   1a1e2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a1e4:	e8 cf       	rjmp	.-48     	; 0x1a1b6 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a1e6:	8f ef       	ldi	r24, 0xFF	; 255
   1a1e8:	9f ef       	ldi	r25, 0xFF	; 255
   1a1ea:	01 c0       	rjmp	.+2      	; 0x1a1ee <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1ec:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a1ee:	cd b7       	in	r28, 0x3d	; 61
   1a1f0:	de b7       	in	r29, 0x3e	; 62
   1a1f2:	25 96       	adiw	r28, 0x05	; 5
   1a1f4:	ea e0       	ldi	r30, 0x0A	; 10
   1a1f6:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0001a1fa <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a1fa:	a5 e0       	ldi	r26, 0x05	; 5
   1a1fc:	b0 e0       	ldi	r27, 0x00	; 0
   1a1fe:	e3 e0       	ldi	r30, 0x03	; 3
   1a200:	f1 ed       	ldi	r31, 0xD1	; 209
   1a202:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x14>
   1a206:	6b 01       	movw	r12, r22
   1a208:	7c 01       	movw	r14, r24
   1a20a:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a20c:	20 e0       	ldi	r18, 0x00	; 0
   1a20e:	31 e0       	ldi	r19, 0x01	; 1
   1a210:	40 e0       	ldi	r20, 0x00	; 0
   1a212:	50 e0       	ldi	r21, 0x00	; 0
   1a214:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
    if(!pos)
   1a218:	61 15       	cp	r22, r1
   1a21a:	71 05       	cpc	r23, r1
   1a21c:	e1 f1       	breq	.+120    	; 0x1a296 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a21e:	c0 e0       	ldi	r28, 0x00	; 0
   1a220:	d1 e0       	ldi	r29, 0x01	; 1
   1a222:	c6 1b       	sub	r28, r22
   1a224:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a226:	f8 01       	movw	r30, r16
   1a228:	8f ee       	ldi	r24, 0xEF	; 239
   1a22a:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a22c:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a22e:	cf 01       	movw	r24, r30
   1a230:	80 1b       	sub	r24, r16
   1a232:	91 0b       	sbc	r25, r17
   1a234:	8c 17       	cp	r24, r28
   1a236:	9d 07       	cpc	r25, r29
   1a238:	14 f4       	brge	.+4      	; 0x1a23e <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a23a:	21 93       	st	Z+, r18
   1a23c:	f8 cf       	rjmp	.-16     	; 0x1a22e <lif_e010_pad_sector+0x34>
   1a23e:	1c 16       	cp	r1, r28
   1a240:	1d 06       	cpc	r1, r29
   1a242:	14 f0       	brlt	.+4      	; 0x1a248 <lif_e010_pad_sector+0x4e>
   1a244:	c1 e0       	ldi	r28, 0x01	; 1
   1a246:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a248:	ce 01       	movw	r24, r28
   1a24a:	0d 2e       	mov	r0, r29
   1a24c:	00 0c       	add	r0, r0
   1a24e:	aa 0b       	sbc	r26, r26
   1a250:	bb 0b       	sbc	r27, r27
   1a252:	bc 01       	movw	r22, r24
   1a254:	cd 01       	movw	r24, r26
   1a256:	6c 0d       	add	r22, r12
   1a258:	7d 1d       	adc	r23, r13
   1a25a:	8e 1d       	adc	r24, r14
   1a25c:	9f 1d       	adc	r25, r15
   1a25e:	20 e0       	ldi	r18, 0x00	; 0
   1a260:	31 e0       	ldi	r19, 0x01	; 1
   1a262:	40 e0       	ldi	r20, 0x00	; 0
   1a264:	50 e0       	ldi	r21, 0x00	; 0
   1a266:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a26a:	61 15       	cp	r22, r1
   1a26c:	71 05       	cpc	r23, r1
   1a26e:	b1 f0       	breq	.+44     	; 0x1a29c <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a270:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a274:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a278:	32 ff       	sbrs	r19, 2
   1a27a:	12 c0       	rjmp	.+36     	; 0x1a2a0 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a27c:	ed b7       	in	r30, 0x3d	; 61
   1a27e:	fe b7       	in	r31, 0x3e	; 62
   1a280:	75 83       	std	Z+5, r23	; 0x05
   1a282:	64 83       	std	Z+4, r22	; 0x04
   1a284:	80 e1       	ldi	r24, 0x10	; 16
   1a286:	96 e3       	ldi	r25, 0x36	; 54
   1a288:	a0 e0       	ldi	r26, 0x00	; 0
   1a28a:	81 83       	std	Z+1, r24	; 0x01
   1a28c:	92 83       	std	Z+2, r25	; 0x02
   1a28e:	a3 83       	std	Z+3, r26	; 0x03
   1a290:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1a294:	05 c0       	rjmp	.+10     	; 0x1a2a0 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a296:	80 e0       	ldi	r24, 0x00	; 0
   1a298:	90 e0       	ldi	r25, 0x00	; 0
   1a29a:	04 c0       	rjmp	.+8      	; 0x1a2a4 <lif_e010_pad_sector+0xaa>
   1a29c:	ce 01       	movw	r24, r28
   1a29e:	02 c0       	rjmp	.+4      	; 0x1a2a4 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a2a0:	8f ef       	ldi	r24, 0xFF	; 255
   1a2a2:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a2a4:	cd b7       	in	r28, 0x3d	; 61
   1a2a6:	de b7       	in	r29, 0x3e	; 62
   1a2a8:	25 96       	adiw	r28, 0x05	; 5
   1a2aa:	e8 e0       	ldi	r30, 0x08	; 8
   1a2ac:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x14>

0001a2b0 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a2b0:	a5 e0       	ldi	r26, 0x05	; 5
   1a2b2:	b0 e0       	ldi	r27, 0x00	; 0
   1a2b4:	ee e5       	ldi	r30, 0x5E	; 94
   1a2b6:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2b8:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   1a2bc:	ec 01       	movw	r28, r24
   1a2be:	4a 01       	movw	r8, r20
   1a2c0:	5b 01       	movw	r10, r22
   1a2c2:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a2c4:	fc 01       	movw	r30, r24
   1a2c6:	01 90       	ld	r0, Z+
   1a2c8:	00 20       	and	r0, r0
   1a2ca:	e9 f7       	brne	.-6      	; 0x1a2c6 <lif_ascii_string_to_e010+0x16>
   1a2cc:	31 97       	sbiw	r30, 0x01	; 1
   1a2ce:	6f 01       	movw	r12, r30
   1a2d0:	c8 1a       	sub	r12, r24
   1a2d2:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a2d4:	41 2c       	mov	r4, r1
   1a2d6:	51 2c       	mov	r5, r1
   1a2d8:	32 01       	movw	r6, r4
   1a2da:	53 94       	inc	r5
   1a2dc:	cb 01       	movw	r24, r22
   1a2de:	ba 01       	movw	r22, r20
   1a2e0:	a3 01       	movw	r20, r6
   1a2e2:	92 01       	movw	r18, r4
   1a2e4:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
   1a2e8:	21 2c       	mov	r2, r1
   1a2ea:	33 24       	eor	r3, r3
   1a2ec:	33 94       	inc	r3
   1a2ee:	c1 01       	movw	r24, r2
   1a2f0:	86 1b       	sub	r24, r22
   1a2f2:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a2f4:	86 30       	cpi	r24, 0x06	; 6
   1a2f6:	91 05       	cpc	r25, r1
   1a2f8:	20 f0       	brcs	.+8      	; 0x1a302 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a2fa:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a2fc:	00 e0       	ldi	r16, 0x00	; 0
   1a2fe:	10 e0       	ldi	r17, 0x00	; 0
   1a300:	17 c0       	rjmp	.+46     	; 0x1a330 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a302:	a7 01       	movw	r20, r14
   1a304:	c5 01       	movw	r24, r10
   1a306:	b4 01       	movw	r22, r8
   1a308:	78 df       	rcall	.-272    	; 0x1a1fa <lif_e010_pad_sector>
   1a30a:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a30c:	97 fd       	sbrc	r25, 7
   1a30e:	83 c0       	rjmp	.+262    	; 0x1a416 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a310:	09 2e       	mov	r0, r25
   1a312:	00 0c       	add	r0, r0
   1a314:	aa 0b       	sbc	r26, r26
   1a316:	bb 0b       	sbc	r27, r27
   1a318:	bc 01       	movw	r22, r24
   1a31a:	cd 01       	movw	r24, r26
   1a31c:	68 0d       	add	r22, r8
   1a31e:	79 1d       	adc	r23, r9
   1a320:	8a 1d       	adc	r24, r10
   1a322:	9b 1d       	adc	r25, r11
   1a324:	a3 01       	movw	r20, r6
   1a326:	92 01       	movw	r18, r4
   1a328:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
   1a32c:	26 1a       	sub	r2, r22
   1a32e:	37 0a       	sbc	r3, r23
   1a330:	f7 01       	movw	r30, r14
   1a332:	e0 0f       	add	r30, r16
   1a334:	f1 1f       	adc	r31, r17
   1a336:	0d 5f       	subi	r16, 0xFD	; 253
   1a338:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a33a:	c6 01       	movw	r24, r12
   1a33c:	02 96       	adiw	r24, 0x02	; 2
   1a33e:	82 15       	cp	r24, r2
   1a340:	93 05       	cpc	r25, r3
   1a342:	84 f4       	brge	.+32     	; 0x1a364 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a344:	8f ed       	ldi	r24, 0xDF	; 223
   1a346:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a348:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a34a:	d2 82       	std	Z+2, r13	; 0x02
   1a34c:	f7 01       	movw	r30, r14
   1a34e:	e0 0f       	add	r30, r16
   1a350:	f1 1f       	adc	r31, r17
   1a352:	cf 01       	movw	r24, r30
   1a354:	8e 19       	sub	r24, r14
   1a356:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a358:	29 91       	ld	r18, Y+
   1a35a:	22 23       	and	r18, r18
   1a35c:	09 f4       	brne	.+2      	; 0x1a360 <lif_ascii_string_to_e010+0xb0>
   1a35e:	5b c0       	rjmp	.+182    	; 0x1a416 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a360:	21 93       	st	Z+, r18
   1a362:	f7 cf       	rjmp	.-18     	; 0x1a352 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a364:	8f ec       	ldi	r24, 0xCF	; 207
   1a366:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a368:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a36a:	d2 82       	std	Z+2, r13	; 0x02
   1a36c:	d7 01       	movw	r26, r14
   1a36e:	a0 0f       	add	r26, r16
   1a370:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a372:	fe 01       	movw	r30, r28
   1a374:	81 91       	ld	r24, Z+
   1a376:	81 11       	cpse	r24, r1
   1a378:	0e c0       	rjmp	.+28     	; 0x1a396 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a37a:	c8 01       	movw	r24, r16
   1a37c:	01 2e       	mov	r0, r17
   1a37e:	00 0c       	add	r0, r0
   1a380:	aa 0b       	sbc	r26, r26
   1a382:	bb 0b       	sbc	r27, r27
   1a384:	bc 01       	movw	r22, r24
   1a386:	cd 01       	movw	r24, r26
   1a388:	68 0d       	add	r22, r8
   1a38a:	79 1d       	adc	r23, r9
   1a38c:	8a 1d       	adc	r24, r10
   1a38e:	9b 1d       	adc	r25, r11
   1a390:	61 11       	cpse	r22, r1
   1a392:	09 c0       	rjmp	.+18     	; 0x1a3a6 <lif_ascii_string_to_e010+0xf6>
   1a394:	21 c0       	rjmp	.+66     	; 0x1a3d8 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a396:	02 15       	cp	r16, r2
   1a398:	13 05       	cpc	r17, r3
   1a39a:	7c f7       	brge	.-34     	; 0x1a37a <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a39c:	0f 5f       	subi	r16, 0xFF	; 255
   1a39e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3a0:	8d 93       	st	X+, r24
   1a3a2:	ef 01       	movw	r28, r30
   1a3a4:	e6 cf       	rjmp	.-52     	; 0x1a372 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a3a6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a3aa:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3ae:	32 ff       	sbrs	r19, 2
   1a3b0:	30 c0       	rjmp	.+96     	; 0x1a412 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a3b2:	20 e0       	ldi	r18, 0x00	; 0
   1a3b4:	31 e0       	ldi	r19, 0x01	; 1
   1a3b6:	40 e0       	ldi	r20, 0x00	; 0
   1a3b8:	50 e0       	ldi	r21, 0x00	; 0
   1a3ba:	0e 94 a1 e2 	call	0x1c542	; 0x1c542 <__divmodsi4>
   1a3be:	ed b7       	in	r30, 0x3d	; 61
   1a3c0:	fe b7       	in	r31, 0x3e	; 62
   1a3c2:	75 83       	std	Z+5, r23	; 0x05
   1a3c4:	64 83       	std	Z+4, r22	; 0x04
   1a3c6:	8c ee       	ldi	r24, 0xEC	; 236
   1a3c8:	95 e3       	ldi	r25, 0x35	; 53
   1a3ca:	a0 e0       	ldi	r26, 0x00	; 0
   1a3cc:	81 83       	std	Z+1, r24	; 0x01
   1a3ce:	92 83       	std	Z+2, r25	; 0x02
   1a3d0:	a3 83       	std	Z+3, r26	; 0x03
   1a3d2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1a3d6:	1d c0       	rjmp	.+58     	; 0x1a412 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a3d8:	fe 01       	movw	r30, r28
   1a3da:	01 90       	ld	r0, Z+
   1a3dc:	00 20       	and	r0, r0
   1a3de:	e9 f7       	brne	.-6      	; 0x1a3da <lif_ascii_string_to_e010+0x12a>
   1a3e0:	31 97       	sbiw	r30, 0x01	; 1
   1a3e2:	9f 01       	movw	r18, r30
   1a3e4:	2c 1b       	sub	r18, r28
   1a3e6:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a3e8:	d7 01       	movw	r26, r14
   1a3ea:	a0 0f       	add	r26, r16
   1a3ec:	b1 1f       	adc	r27, r17
   1a3ee:	8f e6       	ldi	r24, 0x6F	; 111
   1a3f0:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a3f2:	fd 01       	movw	r30, r26
   1a3f4:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a3f6:	32 83       	std	Z+2, r19	; 0x02
   1a3f8:	0d 5f       	subi	r16, 0xFD	; 253
   1a3fa:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3fc:	f7 01       	movw	r30, r14
   1a3fe:	e0 0f       	add	r30, r16
   1a400:	f1 1f       	adc	r31, r17
   1a402:	cf 01       	movw	r24, r30
   1a404:	8e 19       	sub	r24, r14
   1a406:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a408:	29 91       	ld	r18, Y+
   1a40a:	22 23       	and	r18, r18
   1a40c:	21 f0       	breq	.+8      	; 0x1a416 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a40e:	21 93       	st	Z+, r18
   1a410:	f8 cf       	rjmp	.-16     	; 0x1a402 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a412:	8f ef       	ldi	r24, 0xFF	; 255
   1a414:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a416:	cd b7       	in	r28, 0x3d	; 61
   1a418:	de b7       	in	r29, 0x3e	; 62
   1a41a:	25 96       	adiw	r28, 0x05	; 5
   1a41c:	e2 e1       	ldi	r30, 0x12	; 18
   1a41e:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0001a422 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a422:	ad e0       	ldi	r26, 0x0D	; 13
   1a424:	b3 e0       	ldi	r27, 0x03	; 3
   1a426:	e7 e1       	ldi	r30, 0x17	; 23
   1a428:	f2 ed       	ldi	r31, 0xD2	; 210
   1a42a:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   1a42e:	5c 01       	movw	r10, r24
   1a430:	2a 01       	movw	r4, r20
   1a432:	3b 01       	movw	r6, r22
   1a434:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a436:	6e ef       	ldi	r22, 0xFE	; 254
   1a438:	78 e0       	ldi	r23, 0x08	; 8
   1a43a:	0e 94 b6 bd 	call	0x17b6c	; 0x17b6c <lif_open>
   1a43e:	c7 5f       	subi	r28, 0xF7	; 247
   1a440:	dc 4f       	sbci	r29, 0xFC	; 252
   1a442:	99 83       	std	Y+1, r25	; 0x01
   1a444:	88 83       	st	Y, r24
   1a446:	c9 50       	subi	r28, 0x09	; 9
   1a448:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a44a:	89 2b       	or	r24, r25
   1a44c:	09 f4       	brne	.+2      	; 0x1a450 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a44e:	63 c0       	rjmp	.+198    	; 0x1a516 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a450:	81 2c       	mov	r8, r1
   1a452:	91 2c       	mov	r9, r1
   1a454:	c1 2c       	mov	r12, r1
   1a456:	d1 2c       	mov	r13, r1
   1a458:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a45a:	8e ed       	ldi	r24, 0xDE	; 222
   1a45c:	95 e3       	ldi	r25, 0x35	; 53
   1a45e:	9c 01       	movw	r18, r24
   1a460:	40 e0       	ldi	r20, 0x00	; 0
   1a462:	c5 5f       	subi	r28, 0xF5	; 245
   1a464:	dc 4f       	sbci	r29, 0xFC	; 252
   1a466:	28 83       	st	Y, r18
   1a468:	39 83       	std	Y+1, r19	; 0x01
   1a46a:	4a 83       	std	Y+2, r20	; 0x02
   1a46c:	cb 50       	subi	r28, 0x0B	; 11
   1a46e:	d3 40       	sbci	r29, 0x03	; 3
   1a470:	14 c0       	rjmp	.+40     	; 0x1a49a <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a472:	c1 01       	movw	r24, r2
   1a474:	03 2c       	mov	r0, r3
   1a476:	00 0c       	add	r0, r0
   1a478:	aa 0b       	sbc	r26, r26
   1a47a:	bb 0b       	sbc	r27, r27
   1a47c:	48 0e       	add	r4, r24
   1a47e:	59 1e       	adc	r5, r25
   1a480:	6a 1e       	adc	r6, r26
   1a482:	7b 1e       	adc	r7, r27
        bytes += size;
   1a484:	c8 0e       	add	r12, r24
   1a486:	d9 1e       	adc	r13, r25
   1a488:	ea 1e       	adc	r14, r26
   1a48a:	fb 1e       	adc	r15, r27
        count += size;
   1a48c:	82 0c       	add	r8, r2
   1a48e:	93 1c       	adc	r9, r3

        if(count > 256)
   1a490:	31 e0       	ldi	r19, 0x01	; 1
   1a492:	83 16       	cp	r8, r19
   1a494:	93 06       	cpc	r9, r19
   1a496:	0c f0       	brlt	.+2      	; 0x1a49a <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a498:	43 c0       	rjmp	.+134    	; 0x1a520 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a49a:	c7 5f       	subi	r28, 0xF7	; 247
   1a49c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a49e:	48 81       	ld	r20, Y
   1a4a0:	59 81       	ldd	r21, Y+1	; 0x01
   1a4a2:	c9 50       	subi	r28, 0x09	; 9
   1a4a4:	d3 40       	sbci	r29, 0x03	; 3
   1a4a6:	6d ef       	ldi	r22, 0xFD	; 253
   1a4a8:	70 e0       	ldi	r23, 0x00	; 0
   1a4aa:	ce 01       	movw	r24, r28
   1a4ac:	88 5f       	subi	r24, 0xF8	; 248
   1a4ae:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4b0:	0e 94 a5 74 	call	0xe94a	; 0xe94a <fgets>
   1a4b4:	89 2b       	or	r24, r25
   1a4b6:	09 f4       	brne	.+2      	; 0x1a4ba <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a4b8:	4b c0       	rjmp	.+150    	; 0x1a550 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a4ba:	ce 01       	movw	r24, r28
   1a4bc:	88 5f       	subi	r24, 0xF8	; 248
   1a4be:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4c0:	0e 94 73 30 	call	0x60e6	; 0x60e6 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a4c4:	6a e5       	ldi	r22, 0x5A	; 90
   1a4c6:	76 e1       	ldi	r23, 0x16	; 22
   1a4c8:	ce 01       	movw	r24, r28
   1a4ca:	88 5f       	subi	r24, 0xF8	; 248
   1a4cc:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4ce:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a4d2:	9e 01       	movw	r18, r28
   1a4d4:	28 5f       	subi	r18, 0xF8	; 248
   1a4d6:	3f 4f       	sbci	r19, 0xFF	; 255
   1a4d8:	b3 01       	movw	r22, r6
   1a4da:	a2 01       	movw	r20, r4
   1a4dc:	ce 01       	movw	r24, r28
   1a4de:	88 5f       	subi	r24, 0xF8	; 248
   1a4e0:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4e2:	e6 de       	rcall	.-564    	; 0x1a2b0 <lif_ascii_string_to_e010>
   1a4e4:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a4e6:	a1 14       	cp	r10, r1
   1a4e8:	b1 04       	cpc	r11, r1
   1a4ea:	19 f2       	breq	.-122    	; 0x1a472 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a4ec:	8c 01       	movw	r16, r24
   1a4ee:	a3 01       	movw	r20, r6
   1a4f0:	92 01       	movw	r18, r4
   1a4f2:	be 01       	movw	r22, r28
   1a4f4:	68 5f       	subi	r22, 0xF8	; 248
   1a4f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4f8:	c5 01       	movw	r24, r10
   1a4fa:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
            if(len < size)
   1a4fe:	82 15       	cp	r24, r2
   1a500:	93 05       	cpc	r25, r3
   1a502:	0c f0       	brlt	.+2      	; 0x1a506 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a504:	b6 cf       	rjmp	.-148    	; 0x1a472 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a506:	c7 5f       	subi	r28, 0xF7	; 247
   1a508:	dc 4f       	sbci	r29, 0xFC	; 252
   1a50a:	88 81       	ld	r24, Y
   1a50c:	99 81       	ldd	r25, Y+1	; 0x01
   1a50e:	c9 50       	subi	r28, 0x09	; 9
   1a510:	d3 40       	sbci	r29, 0x03	; 3
   1a512:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>
                return(-1);
   1a516:	6f ef       	ldi	r22, 0xFF	; 255
   1a518:	7f ef       	ldi	r23, 0xFF	; 255
   1a51a:	8f ef       	ldi	r24, 0xFF	; 255
   1a51c:	9f ef       	ldi	r25, 0xFF	; 255
   1a51e:	84 c0       	rjmp	.+264    	; 0x1a628 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a520:	a1 14       	cp	r10, r1
   1a522:	b1 04       	cpc	r11, r1
   1a524:	91 f0       	breq	.+36     	; 0x1a54a <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a526:	ed b7       	in	r30, 0x3d	; 61
   1a528:	fe b7       	in	r31, 0x3e	; 62
   1a52a:	c4 82       	std	Z+4, r12	; 0x04
   1a52c:	d5 82       	std	Z+5, r13	; 0x05
   1a52e:	e6 82       	std	Z+6, r14	; 0x06
   1a530:	f7 82       	std	Z+7, r15	; 0x07
   1a532:	c5 5f       	subi	r28, 0xF5	; 245
   1a534:	dc 4f       	sbci	r29, 0xFC	; 252
   1a536:	28 81       	ld	r18, Y
   1a538:	39 81       	ldd	r19, Y+1	; 0x01
   1a53a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a53c:	cb 50       	subi	r28, 0x0B	; 11
   1a53e:	d3 40       	sbci	r29, 0x03	; 3
   1a540:	21 83       	std	Z+1, r18	; 0x01
   1a542:	32 83       	std	Z+2, r19	; 0x02
   1a544:	43 83       	std	Z+3, r20	; 0x03
   1a546:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a54a:	81 2c       	mov	r8, r1
   1a54c:	91 2c       	mov	r9, r1
   1a54e:	a5 cf       	rjmp	.-182    	; 0x1a49a <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a550:	c7 5f       	subi	r28, 0xF7	; 247
   1a552:	dc 4f       	sbci	r29, 0xFC	; 252
   1a554:	88 81       	ld	r24, Y
   1a556:	99 81       	ldd	r25, Y+1	; 0x01
   1a558:	c9 50       	subi	r28, 0x09	; 9
   1a55a:	d3 40       	sbci	r29, 0x03	; 3
   1a55c:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>

// Write EOF
    str[0] = 0;
   1a560:	c8 5f       	subi	r28, 0xF8	; 248
   1a562:	dd 4f       	sbci	r29, 0xFD	; 253
   1a564:	18 82       	st	Y, r1
   1a566:	c8 50       	subi	r28, 0x08	; 8
   1a568:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a56a:	9e 01       	movw	r18, r28
   1a56c:	28 5f       	subi	r18, 0xF8	; 248
   1a56e:	3f 4f       	sbci	r19, 0xFF	; 255
   1a570:	b3 01       	movw	r22, r6
   1a572:	a2 01       	movw	r20, r4
   1a574:	ce 01       	movw	r24, r28
   1a576:	88 5f       	subi	r24, 0xF8	; 248
   1a578:	9d 4f       	sbci	r25, 0xFD	; 253
   1a57a:	9a de       	rcall	.-716    	; 0x1a2b0 <lif_ascii_string_to_e010>
   1a57c:	4c 01       	movw	r8, r24

    if(LIF)
   1a57e:	a1 14       	cp	r10, r1
   1a580:	b1 04       	cpc	r11, r1
   1a582:	d1 f4       	brne	.+52     	; 0x1a5b8 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a584:	c4 01       	movw	r24, r8
   1a586:	09 2c       	mov	r0, r9
   1a588:	00 0c       	add	r0, r0
   1a58a:	aa 0b       	sbc	r26, r26
   1a58c:	bb 0b       	sbc	r27, r27
   1a58e:	c8 0e       	add	r12, r24
   1a590:	d9 1e       	adc	r13, r25
   1a592:	ea 1e       	adc	r14, r26
   1a594:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a596:	12 01       	movw	r2, r4
   1a598:	23 01       	movw	r4, r6
   1a59a:	28 0e       	add	r2, r24
   1a59c:	39 1e       	adc	r3, r25
   1a59e:	4a 1e       	adc	r4, r26
   1a5a0:	5b 1e       	adc	r5, r27
   1a5a2:	ae 01       	movw	r20, r28
   1a5a4:	48 5f       	subi	r20, 0xF8	; 248
   1a5a6:	5f 4f       	sbci	r21, 0xFF	; 255
   1a5a8:	c2 01       	movw	r24, r4
   1a5aa:	b1 01       	movw	r22, r2
   1a5ac:	26 de       	rcall	.-948    	; 0x1a1fa <lif_e010_pad_sector>
   1a5ae:	3c 01       	movw	r6, r24
    if(LIF)
   1a5b0:	a1 14       	cp	r10, r1
   1a5b2:	b1 04       	cpc	r11, r1
   1a5b4:	e1 f4       	brne	.+56     	; 0x1a5ee <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a5b6:	36 c0       	rjmp	.+108    	; 0x1a624 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a5b8:	ed b7       	in	r30, 0x3d	; 61
   1a5ba:	fe b7       	in	r31, 0x3e	; 62
   1a5bc:	c4 82       	std	Z+4, r12	; 0x04
   1a5be:	d5 82       	std	Z+5, r13	; 0x05
   1a5c0:	e6 82       	std	Z+6, r14	; 0x06
   1a5c2:	f7 82       	std	Z+7, r15	; 0x07
   1a5c4:	80 ed       	ldi	r24, 0xD0	; 208
   1a5c6:	95 e3       	ldi	r25, 0x35	; 53
   1a5c8:	a0 e0       	ldi	r26, 0x00	; 0
   1a5ca:	81 83       	std	Z+1, r24	; 0x01
   1a5cc:	92 83       	std	Z+2, r25	; 0x02
   1a5ce:	a3 83       	std	Z+3, r26	; 0x03
   1a5d0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a5d4:	84 01       	movw	r16, r8
   1a5d6:	a3 01       	movw	r20, r6
   1a5d8:	92 01       	movw	r18, r4
   1a5da:	be 01       	movw	r22, r28
   1a5dc:	68 5f       	subi	r22, 0xF8	; 248
   1a5de:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5e0:	c5 01       	movw	r24, r10
   1a5e2:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
        if(len < size)
   1a5e6:	88 15       	cp	r24, r8
   1a5e8:	99 05       	cpc	r25, r9
   1a5ea:	64 f6       	brge	.-104    	; 0x1a584 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a5ec:	94 cf       	rjmp	.-216    	; 0x1a516 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a5ee:	8c 01       	movw	r16, r24
   1a5f0:	a2 01       	movw	r20, r4
   1a5f2:	91 01       	movw	r18, r2
   1a5f4:	be 01       	movw	r22, r28
   1a5f6:	68 5f       	subi	r22, 0xF8	; 248
   1a5f8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5fa:	c5 01       	movw	r24, r10
   1a5fc:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
        if(len < size)
   1a600:	86 15       	cp	r24, r6
   1a602:	97 05       	cpc	r25, r7
   1a604:	0c f4       	brge	.+2      	; 0x1a608 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a606:	87 cf       	rjmp	.-242    	; 0x1a516 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a608:	ed b7       	in	r30, 0x3d	; 61
   1a60a:	fe b7       	in	r31, 0x3e	; 62
   1a60c:	c4 82       	std	Z+4, r12	; 0x04
   1a60e:	d5 82       	std	Z+5, r13	; 0x05
   1a610:	e6 82       	std	Z+6, r14	; 0x06
   1a612:	f7 82       	std	Z+7, r15	; 0x07
   1a614:	82 ec       	ldi	r24, 0xC2	; 194
   1a616:	95 e3       	ldi	r25, 0x35	; 53
   1a618:	a0 e0       	ldi	r26, 0x00	; 0
   1a61a:	81 83       	std	Z+1, r24	; 0x01
   1a61c:	92 83       	std	Z+2, r25	; 0x02
   1a61e:	a3 83       	std	Z+3, r26	; 0x03
   1a620:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    return(bytes);
   1a624:	b6 01       	movw	r22, r12
   1a626:	c7 01       	movw	r24, r14
}
   1a628:	c3 5f       	subi	r28, 0xF3	; 243
   1a62a:	dc 4f       	sbci	r29, 0xFC	; 252
   1a62c:	e2 e1       	ldi	r30, 0x12	; 18
   1a62e:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0001a632 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a632:	ab e3       	ldi	r26, 0x3B	; 59
   1a634:	b0 e0       	ldi	r27, 0x00	; 0
   1a636:	ef e1       	ldi	r30, 0x1F	; 31
   1a638:	f3 ed       	ldi	r31, 0xD3	; 211
   1a63a:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   1a63e:	6c 01       	movw	r12, r24
   1a640:	1b 01       	movw	r2, r22
   1a642:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a644:	fc 01       	movw	r30, r24
   1a646:	80 81       	ld	r24, Z
   1a648:	81 11       	cpse	r24, r1
   1a64a:	03 c0       	rjmp	.+6      	; 0x1a652 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a64c:	8f e8       	ldi	r24, 0x8F	; 143
   1a64e:	95 e3       	ldi	r25, 0x35	; 53
   1a650:	1a c0       	rjmp	.+52     	; 0x1a686 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a652:	fb 01       	movw	r30, r22
   1a654:	80 81       	ld	r24, Z
   1a656:	81 11       	cpse	r24, r1
   1a658:	03 c0       	rjmp	.+6      	; 0x1a660 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a65a:	81 e6       	ldi	r24, 0x61	; 97
   1a65c:	95 e3       	ldi	r25, 0x35	; 53
   1a65e:	13 c0       	rjmp	.+38     	; 0x1a686 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a660:	fa 01       	movw	r30, r20
   1a662:	80 81       	ld	r24, Z
   1a664:	81 11       	cpse	r24, r1
   1a666:	03 c0       	rjmp	.+6      	; 0x1a66e <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a668:	82 e3       	ldi	r24, 0x32	; 50
   1a66a:	95 e3       	ldi	r25, 0x35	; 53
   1a66c:	0c c0       	rjmp	.+24     	; 0x1a686 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a66e:	be 01       	movw	r22, r28
   1a670:	66 5f       	subi	r22, 0xF6	; 246
   1a672:	7f 4f       	sbci	r23, 0xFF	; 255
   1a674:	ca 01       	movw	r24, r20
   1a676:	0e 94 e0 bd 	call	0x17bc0	; 0x17bc0 <lif_stat>
   1a67a:	9b af       	std	Y+59, r25	; 0x3b
   1a67c:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a67e:	89 2b       	or	r24, r25
   1a680:	59 f4       	brne	.+22     	; 0x1a698 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a682:	82 e0       	ldi	r24, 0x02	; 2
   1a684:	95 e3       	ldi	r25, 0x35	; 53
   1a686:	a0 e0       	ldi	r26, 0x00	; 0
   1a688:	ed b7       	in	r30, 0x3d	; 61
   1a68a:	fe b7       	in	r31, 0x3e	; 62
   1a68c:	81 83       	std	Z+1, r24	; 0x01
   1a68e:	92 83       	std	Z+2, r25	; 0x02
   1a690:	a3 83       	std	Z+3, r26	; 0x03
   1a692:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1a696:	01 c1       	rjmp	.+514    	; 0x1a89a <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a698:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a69c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a6a0:	92 ff       	sbrs	r25, 2
   1a6a2:	10 c0       	rjmp	.+32     	; 0x1a6c4 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a6a4:	ed b7       	in	r30, 0x3d	; 61
   1a6a6:	fe b7       	in	r31, 0x3e	; 62
   1a6a8:	f1 86       	std	Z+9, r15	; 0x09
   1a6aa:	e0 86       	std	Z+8, r14	; 0x08
   1a6ac:	37 82       	std	Z+7, r3	; 0x07
   1a6ae:	26 82       	std	Z+6, r2	; 0x06
   1a6b0:	d5 82       	std	Z+5, r13	; 0x05
   1a6b2:	c4 82       	std	Z+4, r12	; 0x04
   1a6b4:	83 ed       	ldi	r24, 0xD3	; 211
   1a6b6:	94 e3       	ldi	r25, 0x34	; 52
   1a6b8:	a0 e0       	ldi	r26, 0x00	; 0
   1a6ba:	81 83       	std	Z+1, r24	; 0x01
   1a6bc:	92 83       	std	Z+2, r25	; 0x02
   1a6be:	a3 83       	std	Z+3, r26	; 0x03
   1a6c0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a6c4:	97 01       	movw	r18, r14
   1a6c6:	40 e0       	ldi	r20, 0x00	; 0
   1a6c8:	50 e0       	ldi	r21, 0x00	; 0
   1a6ca:	ba 01       	movw	r22, r20
   1a6cc:	80 e0       	ldi	r24, 0x00	; 0
   1a6ce:	90 e0       	ldi	r25, 0x00	; 0
   1a6d0:	a8 de       	rcall	.-688    	; 0x1a422 <lif_add_ascii_file_as_e010_wrapper>
   1a6d2:	4b 01       	movw	r8, r22
   1a6d4:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a6d6:	47 2e       	mov	r4, r23
   1a6d8:	58 2e       	mov	r5, r24
   1a6da:	69 2e       	mov	r6, r25
   1a6dc:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a6de:	66 23       	and	r22, r22
   1a6e0:	29 f0       	breq	.+10     	; 0x1a6ec <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a6e2:	ff ef       	ldi	r31, 0xFF	; 255
   1a6e4:	4f 1a       	sub	r4, r31
   1a6e6:	5f 0a       	sbc	r5, r31
   1a6e8:	6f 0a       	sbc	r6, r31
   1a6ea:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a6ec:	61 e0       	ldi	r22, 0x01	; 1
   1a6ee:	79 e0       	ldi	r23, 0x09	; 9
   1a6f0:	c6 01       	movw	r24, r12
   1a6f2:	49 da       	rcall	.-2926   	; 0x19b86 <lif_open_volume>
   1a6f4:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a6f6:	00 97       	sbiw	r24, 0x00	; 0
   1a6f8:	09 f4       	brne	.+2      	; 0x1a6fc <lif_add_ascii_file_as_e010+0xca>
   1a6fa:	cf c0       	rjmp	.+414    	; 0x1a89a <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a6fc:	b3 01       	movw	r22, r6
   1a6fe:	a2 01       	movw	r20, r4
   1a700:	e2 d8       	rcall	.-3644   	; 0x198c6 <lif_newdir>
   1a702:	3c 01       	movw	r6, r24
    if(index == -1)
   1a704:	8f ef       	ldi	r24, 0xFF	; 255
   1a706:	68 16       	cp	r6, r24
   1a708:	78 06       	cpc	r7, r24
   1a70a:	79 f4       	brne	.+30     	; 0x1a72a <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a70c:	ed b7       	in	r30, 0x3d	; 61
   1a70e:	fe b7       	in	r31, 0x3e	; 62
   1a710:	f7 82       	std	Z+7, r15	; 0x07
   1a712:	e6 82       	std	Z+6, r14	; 0x06
   1a714:	d5 82       	std	Z+5, r13	; 0x05
   1a716:	c4 82       	std	Z+4, r12	; 0x04
   1a718:	83 ea       	ldi	r24, 0xA3	; 163
   1a71a:	94 e3       	ldi	r25, 0x34	; 52
   1a71c:	a0 e0       	ldi	r26, 0x00	; 0
   1a71e:	81 83       	std	Z+1, r24	; 0x01
   1a720:	92 83       	std	Z+2, r25	; 0x02
   1a722:	a3 83       	std	Z+3, r26	; 0x03
   1a724:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1a728:	a0 c0       	rjmp	.+320    	; 0x1a86a <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a72a:	68 01       	movw	r12, r16
   1a72c:	ff e4       	ldi	r31, 0x4F	; 79
   1a72e:	cf 0e       	add	r12, r31
   1a730:	d1 1c       	adc	r13, r1
   1a732:	4a e0       	ldi	r20, 0x0A	; 10
   1a734:	50 e0       	ldi	r21, 0x00	; 0
   1a736:	b1 01       	movw	r22, r2
   1a738:	c6 01       	movw	r24, r12
   1a73a:	0e 94 8f bf 	call	0x17f1e	; 0x17f1e <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a73e:	80 e1       	ldi	r24, 0x10	; 16
   1a740:	90 ee       	ldi	r25, 0xE0	; 224
   1a742:	f8 01       	movw	r30, r16
   1a744:	e6 5a       	subi	r30, 0xA6	; 166
   1a746:	ff 4f       	sbci	r31, 0xFF	; 255
   1a748:	91 83       	std	Z+1, r25	; 0x01
   1a74a:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a74c:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a74e:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a750:	60 a5       	ldd	r22, Z+40	; 0x28
   1a752:	71 a5       	ldd	r23, Z+41	; 0x29
   1a754:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a756:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a758:	a8 01       	movw	r20, r16
   1a75a:	4c 59       	subi	r20, 0x9C	; 156
   1a75c:	5f 4f       	sbci	r21, 0xFF	; 255
   1a75e:	0e 94 b4 c1 	call	0x18368	; 0x18368 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a762:	81 e0       	ldi	r24, 0x01	; 1
   1a764:	90 e8       	ldi	r25, 0x80	; 128
   1a766:	f8 01       	movw	r30, r16
   1a768:	e6 59       	subi	r30, 0x96	; 150
   1a76a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a76c:	91 83       	std	Z+1, r25	; 0x01
   1a76e:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a770:	32 96       	adiw	r30, 0x02	; 2
   1a772:	91 82       	std	Z+1, r9	; 0x01
   1a774:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a776:	80 e0       	ldi	r24, 0x00	; 0
   1a778:	91 e0       	ldi	r25, 0x01	; 1
   1a77a:	32 96       	adiw	r30, 0x02	; 2
   1a77c:	91 83       	std	Z+1, r25	; 0x01
   1a77e:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a780:	58 01       	movw	r10, r16
   1a782:	fc e5       	ldi	r31, 0x5C	; 92
   1a784:	af 0e       	add	r10, r31
   1a786:	b1 1c       	adc	r11, r1
   1a788:	f5 01       	movw	r30, r10
   1a78a:	80 81       	ld	r24, Z
   1a78c:	91 81       	ldd	r25, Z+1	; 0x01
   1a78e:	a2 81       	ldd	r26, Z+2	; 0x02
   1a790:	b3 81       	ldd	r27, Z+3	; 0x03
   1a792:	22 24       	eor	r2, r2
   1a794:	38 2e       	mov	r3, r24
   1a796:	49 2e       	mov	r4, r25
   1a798:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a79a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a79e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a7a2:	92 ff       	sbrs	r25, 2
   1a7a4:	05 c0       	rjmp	.+10     	; 0x1a7b0 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a7a6:	6c e5       	ldi	r22, 0x5C	; 92
   1a7a8:	76 e1       	ldi	r23, 0x16	; 22
   1a7aa:	c8 01       	movw	r24, r16
   1a7ac:	0e 94 a0 c2 	call	0x18540	; 0x18540 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a7b0:	97 01       	movw	r18, r14
   1a7b2:	b2 01       	movw	r22, r4
   1a7b4:	a1 01       	movw	r20, r2
   1a7b6:	c8 01       	movw	r24, r16
   1a7b8:	34 de       	rcall	.-920    	; 0x1a422 <lif_add_ascii_file_as_e010_wrapper>
   1a7ba:	4b 01       	movw	r8, r22
   1a7bc:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a7be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a7c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a7c6:	92 ff       	sbrs	r25, 2
   1a7c8:	4a c0       	rjmp	.+148    	; 0x1a85e <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a7ca:	8c e7       	ldi	r24, 0x7C	; 124
   1a7cc:	94 e3       	ldi	r25, 0x34	; 52
   1a7ce:	a0 e0       	ldi	r26, 0x00	; 0
   1a7d0:	ed b7       	in	r30, 0x3d	; 61
   1a7d2:	fe b7       	in	r31, 0x3e	; 62
   1a7d4:	81 83       	std	Z+1, r24	; 0x01
   1a7d6:	92 83       	std	Z+2, r25	; 0x02
   1a7d8:	a3 83       	std	Z+3, r26	; 0x03
   1a7da:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a7de:	ed b7       	in	r30, 0x3d	; 61
   1a7e0:	fe b7       	in	r31, 0x3e	; 62
   1a7e2:	d5 82       	std	Z+5, r13	; 0x05
   1a7e4:	c4 82       	std	Z+4, r12	; 0x04
   1a7e6:	85 e6       	ldi	r24, 0x65	; 101
   1a7e8:	94 e3       	ldi	r25, 0x34	; 52
   1a7ea:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ec:	81 83       	std	Z+1, r24	; 0x01
   1a7ee:	92 83       	std	Z+2, r25	; 0x02
   1a7f0:	a3 83       	std	Z+3, r26	; 0x03
   1a7f2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a7f6:	ed b7       	in	r30, 0x3d	; 61
   1a7f8:	fe b7       	in	r31, 0x3e	; 62
   1a7fa:	75 82       	std	Z+5, r7	; 0x05
   1a7fc:	64 82       	std	Z+4, r6	; 0x04
   1a7fe:	8e e4       	ldi	r24, 0x4E	; 78
   1a800:	94 e3       	ldi	r25, 0x34	; 52
   1a802:	a0 e0       	ldi	r26, 0x00	; 0
   1a804:	81 83       	std	Z+1, r24	; 0x01
   1a806:	92 83       	std	Z+2, r25	; 0x02
   1a808:	a3 83       	std	Z+3, r26	; 0x03
   1a80a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a80e:	f5 01       	movw	r30, r10
   1a810:	80 81       	ld	r24, Z
   1a812:	91 81       	ldd	r25, Z+1	; 0x01
   1a814:	a2 81       	ldd	r26, Z+2	; 0x02
   1a816:	b3 81       	ldd	r27, Z+3	; 0x03
   1a818:	ed b7       	in	r30, 0x3d	; 61
   1a81a:	fe b7       	in	r31, 0x3e	; 62
   1a81c:	84 83       	std	Z+4, r24	; 0x04
   1a81e:	95 83       	std	Z+5, r25	; 0x05
   1a820:	a6 83       	std	Z+6, r26	; 0x06
   1a822:	b7 83       	std	Z+7, r27	; 0x07
   1a824:	85 e3       	ldi	r24, 0x35	; 53
   1a826:	94 e3       	ldi	r25, 0x34	; 52
   1a828:	a0 e0       	ldi	r26, 0x00	; 0
   1a82a:	81 83       	std	Z+1, r24	; 0x01
   1a82c:	92 83       	std	Z+2, r25	; 0x02
   1a82e:	a3 83       	std	Z+3, r26	; 0x03
   1a830:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a834:	f8 01       	movw	r30, r16
   1a836:	e0 5a       	subi	r30, 0xA0	; 160
   1a838:	ff 4f       	sbci	r31, 0xFF	; 255
   1a83a:	80 81       	ld	r24, Z
   1a83c:	91 81       	ldd	r25, Z+1	; 0x01
   1a83e:	a2 81       	ldd	r26, Z+2	; 0x02
   1a840:	b3 81       	ldd	r27, Z+3	; 0x03
   1a842:	ed b7       	in	r30, 0x3d	; 61
   1a844:	fe b7       	in	r31, 0x3e	; 62
   1a846:	84 83       	std	Z+4, r24	; 0x04
   1a848:	95 83       	std	Z+5, r25	; 0x05
   1a84a:	a6 83       	std	Z+6, r26	; 0x06
   1a84c:	b7 83       	std	Z+7, r27	; 0x07
   1a84e:	8c e1       	ldi	r24, 0x1C	; 28
   1a850:	94 e3       	ldi	r25, 0x34	; 52
   1a852:	a0 e0       	ldi	r26, 0x00	; 0
   1a854:	81 83       	std	Z+1, r24	; 0x01
   1a856:	92 83       	std	Z+2, r25	; 0x02
   1a858:	a3 83       	std	Z+3, r26	; 0x03
   1a85a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a85e:	b3 01       	movw	r22, r6
   1a860:	c8 01       	movw	r24, r16
   1a862:	0e 94 fb c7 	call	0x18ff6	; 0x18ff6 <lif_writedirindex>
   1a866:	89 2b       	or	r24, r25
   1a868:	21 f4       	brne	.+8      	; 0x1a872 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a86a:	c8 01       	movw	r24, r16
   1a86c:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
   1a870:	14 c0       	rjmp	.+40     	; 0x1a89a <lif_add_ascii_file_as_e010+0x268>
   1a872:	c8 01       	movw	r24, r16
   1a874:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a878:	ed b7       	in	r30, 0x3d	; 61
   1a87a:	fe b7       	in	r31, 0x3e	; 62
   1a87c:	84 82       	std	Z+4, r8	; 0x04
   1a87e:	95 82       	std	Z+5, r9	; 0x05
   1a880:	e6 82       	std	Z+6, r14	; 0x06
   1a882:	f7 82       	std	Z+7, r15	; 0x07
   1a884:	8e e0       	ldi	r24, 0x0E	; 14
   1a886:	94 e3       	ldi	r25, 0x34	; 52
   1a888:	a0 e0       	ldi	r26, 0x00	; 0
   1a88a:	81 83       	std	Z+1, r24	; 0x01
   1a88c:	92 83       	std	Z+2, r25	; 0x02
   1a88e:	a3 83       	std	Z+3, r26	; 0x03
   1a890:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

// Return file size
    return(bytes);
   1a894:	b4 01       	movw	r22, r8
   1a896:	c7 01       	movw	r24, r14
   1a898:	04 c0       	rjmp	.+8      	; 0x1a8a2 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a89a:	6f ef       	ldi	r22, 0xFF	; 255
   1a89c:	7f ef       	ldi	r23, 0xFF	; 255
   1a89e:	8f ef       	ldi	r24, 0xFF	; 255
   1a8a0:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a8a2:	eb 96       	adiw	r28, 0x3b	; 59
   1a8a4:	e2 e1       	ldi	r30, 0x12	; 18
   1a8a6:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0001a8aa <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a8aa:	a7 e3       	ldi	r26, 0x37	; 55
   1a8ac:	b2 e0       	ldi	r27, 0x02	; 2
   1a8ae:	eb e5       	ldi	r30, 0x5B	; 91
   1a8b0:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8b2:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   1a8b6:	7c 01       	movw	r14, r24
   1a8b8:	8b 01       	movw	r16, r22
   1a8ba:	ca 5d       	subi	r28, 0xDA	; 218
   1a8bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8be:	59 83       	std	Y+1, r21	; 0x01
   1a8c0:	48 83       	st	Y, r20
   1a8c2:	c6 52       	subi	r28, 0x26	; 38
   1a8c4:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a8c6:	62 e4       	ldi	r22, 0x42	; 66
   1a8c8:	73 e0       	ldi	r23, 0x03	; 3
   1a8ca:	5d d9       	rcall	.-3398   	; 0x19b86 <lif_open_volume>
   1a8cc:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a8ce:	00 97       	sbiw	r24, 0x00	; 0
   1a8d0:	69 f4       	brne	.+26     	; 0x1a8ec <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a8d2:	ed b7       	in	r30, 0x3d	; 61
   1a8d4:	fe b7       	in	r31, 0x3e	; 62
   1a8d6:	f5 82       	std	Z+5, r15	; 0x05
   1a8d8:	e4 82       	std	Z+4, r14	; 0x04
   1a8da:	86 ef       	ldi	r24, 0xF6	; 246
   1a8dc:	93 e3       	ldi	r25, 0x33	; 51
   1a8de:	a0 e0       	ldi	r26, 0x00	; 0
   1a8e0:	81 83       	std	Z+1, r24	; 0x01
   1a8e2:	92 83       	std	Z+2, r25	; 0x02
   1a8e4:	a3 83       	std	Z+3, r26	; 0x03
   1a8e6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1a8ea:	13 c0       	rjmp	.+38     	; 0x1a912 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a8ec:	b8 01       	movw	r22, r16
   1a8ee:	20 dc       	rcall	.-1984   	; 0x1a130 <lif_find_file>
    if(index == -1)
   1a8f0:	01 96       	adiw	r24, 0x01	; 1
   1a8f2:	91 f4       	brne	.+36     	; 0x1a918 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a8f4:	ed b7       	in	r30, 0x3d	; 61
   1a8f6:	fe b7       	in	r31, 0x3e	; 62
   1a8f8:	15 83       	std	Z+5, r17	; 0x05
   1a8fa:	04 83       	std	Z+4, r16	; 0x04
   1a8fc:	8f ed       	ldi	r24, 0xDF	; 223
   1a8fe:	93 e3       	ldi	r25, 0x33	; 51
   1a900:	a0 e0       	ldi	r26, 0x00	; 0
   1a902:	81 83       	std	Z+1, r24	; 0x01
   1a904:	92 83       	std	Z+2, r25	; 0x02
   1a906:	a3 83       	std	Z+3, r26	; 0x03
   1a908:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a90c:	c6 01       	movw	r24, r12
   1a90e:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a912:	80 e0       	ldi	r24, 0x00	; 0
   1a914:	90 e0       	ldi	r25, 0x00	; 0
   1a916:	73 c2       	rjmp	.+1254   	; 0x1adfe <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a918:	f6 01       	movw	r30, r12
   1a91a:	e6 5a       	subi	r30, 0xA6	; 166
   1a91c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a91e:	80 81       	ld	r24, Z
   1a920:	91 81       	ldd	r25, Z+1	; 0x01
   1a922:	9c 01       	movw	r18, r24
   1a924:	2c 7f       	andi	r18, 0xFC	; 252
   1a926:	20 31       	cpi	r18, 0x10	; 16
   1a928:	30 4e       	sbci	r19, 0xE0	; 224
   1a92a:	a9 f0       	breq	.+42     	; 0x1a956 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a92c:	ed b7       	in	r30, 0x3d	; 61
   1a92e:	fe b7       	in	r31, 0x3e	; 62
   1a930:	97 83       	std	Z+7, r25	; 0x07
   1a932:	86 83       	std	Z+6, r24	; 0x06
   1a934:	ca 5d       	subi	r28, 0xDA	; 218
   1a936:	dd 4f       	sbci	r29, 0xFD	; 253
   1a938:	28 81       	ld	r18, Y
   1a93a:	39 81       	ldd	r19, Y+1	; 0x01
   1a93c:	c6 52       	subi	r28, 0x26	; 38
   1a93e:	d2 40       	sbci	r29, 0x02	; 2
   1a940:	35 83       	std	Z+5, r19	; 0x05
   1a942:	24 83       	std	Z+4, r18	; 0x04
   1a944:	87 ea       	ldi	r24, 0xA7	; 167
   1a946:	93 e3       	ldi	r25, 0x33	; 51
   1a948:	a0 e0       	ldi	r26, 0x00	; 0
   1a94a:	81 83       	std	Z+1, r24	; 0x01
   1a94c:	92 83       	std	Z+2, r25	; 0x02
   1a94e:	a3 83       	std	Z+3, r26	; 0x03
   1a950:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1a954:	db cf       	rjmp	.-74     	; 0x1a90c <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a956:	f6 01       	movw	r30, r12
   1a958:	e4 5a       	subi	r30, 0xA4	; 164
   1a95a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a95c:	80 80       	ld	r8, Z
   1a95e:	91 80       	ldd	r9, Z+1	; 0x01
   1a960:	a2 80       	ldd	r10, Z+2	; 0x02
   1a962:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a964:	34 96       	adiw	r30, 0x04	; 4
   1a966:	80 81       	ld	r24, Z
   1a968:	91 81       	ldd	r25, Z+1	; 0x01
   1a96a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a96c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a96e:	a5 01       	movw	r20, r10
   1a970:	94 01       	movw	r18, r8
   1a972:	28 0f       	add	r18, r24
   1a974:	39 1f       	adc	r19, r25
   1a976:	4a 1f       	adc	r20, r26
   1a978:	5b 1f       	adc	r21, r27
   1a97a:	c4 5d       	subi	r28, 0xD4	; 212
   1a97c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a97e:	28 83       	st	Y, r18
   1a980:	39 83       	std	Y+1, r19	; 0x01
   1a982:	4a 83       	std	Y+2, r20	; 0x02
   1a984:	5b 83       	std	Y+3, r21	; 0x03
   1a986:	cc 52       	subi	r28, 0x2C	; 44
   1a988:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a98a:	c6 01       	movw	r24, r12
   1a98c:	8c 59       	subi	r24, 0x9C	; 156
   1a98e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a990:	0e 94 f6 c1 	call	0x183ec	; 0x183ec <lif_lifbcd2time>
   1a994:	c8 5d       	subi	r28, 0xD8	; 216
   1a996:	dd 4f       	sbci	r29, 0xFD	; 253
   1a998:	68 83       	st	Y, r22
   1a99a:	79 83       	std	Y+1, r23	; 0x01
   1a99c:	8a 83       	std	Y+2, r24	; 0x02
   1a99e:	9b 83       	std	Y+3, r25	; 0x03
   1a9a0:	c8 52       	subi	r28, 0x28	; 40
   1a9a2:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a9a4:	ba 2d       	mov	r27, r10
   1a9a6:	a9 2d       	mov	r26, r9
   1a9a8:	98 2d       	mov	r25, r8
   1a9aa:	88 27       	eor	r24, r24
   1a9ac:	c2 5e       	subi	r28, 0xE2	; 226
   1a9ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9b0:	88 83       	st	Y, r24
   1a9b2:	99 83       	std	Y+1, r25	; 0x01
   1a9b4:	aa 83       	std	Y+2, r26	; 0x02
   1a9b6:	bb 83       	std	Y+3, r27	; 0x03
   1a9b8:	ce 51       	subi	r28, 0x1E	; 30
   1a9ba:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a9bc:	6c e0       	ldi	r22, 0x0C	; 12
   1a9be:	79 e0       	ldi	r23, 0x09	; 9
   1a9c0:	ca 5d       	subi	r28, 0xDA	; 218
   1a9c2:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9c4:	88 81       	ld	r24, Y
   1a9c6:	99 81       	ldd	r25, Y+1	; 0x01
   1a9c8:	c6 52       	subi	r28, 0x26	; 38
   1a9ca:	d2 40       	sbci	r29, 0x02	; 2
   1a9cc:	0e 94 b6 bd 	call	0x17b6c	; 0x17b6c <lif_open>
   1a9d0:	cc 5d       	subi	r28, 0xDC	; 220
   1a9d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9d4:	99 83       	std	Y+1, r25	; 0x01
   1a9d6:	88 83       	st	Y, r24
   1a9d8:	c4 52       	subi	r28, 0x24	; 36
   1a9da:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a9dc:	89 2b       	or	r24, r25
   1a9de:	09 f4       	brne	.+2      	; 0x1a9e2 <lif_extract_e010_as_ascii+0x138>
   1a9e0:	95 cf       	rjmp	.-214    	; 0x1a90c <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a9e2:	ca 5d       	subi	r28, 0xDA	; 218
   1a9e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9e6:	28 81       	ld	r18, Y
   1a9e8:	39 81       	ldd	r19, Y+1	; 0x01
   1a9ea:	c6 52       	subi	r28, 0x26	; 38
   1a9ec:	d2 40       	sbci	r29, 0x02	; 2
   1a9ee:	ed b7       	in	r30, 0x3d	; 61
   1a9f0:	fe b7       	in	r31, 0x3e	; 62
   1a9f2:	35 83       	std	Z+5, r19	; 0x05
   1a9f4:	24 83       	std	Z+4, r18	; 0x04
   1a9f6:	87 e9       	ldi	r24, 0x97	; 151
   1a9f8:	93 e3       	ldi	r25, 0x33	; 51
   1a9fa:	a0 e0       	ldi	r26, 0x00	; 0
   1a9fc:	81 83       	std	Z+1, r24	; 0x01
   1a9fe:	92 83       	std	Z+2, r25	; 0x02
   1aa00:	a3 83       	std	Z+3, r26	; 0x03
   1aa02:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    bytes = 0;
    wind = 0;
   1aa06:	21 2c       	mov	r2, r1
   1aa08:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1aa0a:	ce 5d       	subi	r28, 0xDE	; 222
   1aa0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa0e:	19 82       	std	Y+1, r1	; 0x01
   1aa10:	18 82       	st	Y, r1
   1aa12:	c2 52       	subi	r28, 0x22	; 34
   1aa14:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1aa16:	ee 24       	eor	r14, r14
   1aa18:	e3 94       	inc	r14
   1aa1a:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1aa1c:	41 2c       	mov	r4, r1
   1aa1e:	51 2c       	mov	r5, r1
   1aa20:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1aa22:	86 ed       	ldi	r24, 0xD6	; 214
   1aa24:	92 e3       	ldi	r25, 0x32	; 50
   1aa26:	9c 01       	movw	r18, r24
   1aa28:	40 e0       	ldi	r20, 0x00	; 0
   1aa2a:	ce 5c       	subi	r28, 0xCE	; 206
   1aa2c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa2e:	28 83       	st	Y, r18
   1aa30:	39 83       	std	Y+1, r19	; 0x01
   1aa32:	4a 83       	std	Y+2, r20	; 0x02
   1aa34:	c2 53       	subi	r28, 0x32	; 50
   1aa36:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1aa38:	84 ee       	ldi	r24, 0xE4	; 228
   1aa3a:	92 e3       	ldi	r25, 0x32	; 50
   1aa3c:	9c 01       	movw	r18, r24
   1aa3e:	40 e0       	ldi	r20, 0x00	; 0
   1aa40:	cb 5c       	subi	r28, 0xCB	; 203
   1aa42:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa44:	28 83       	st	Y, r18
   1aa46:	39 83       	std	Y+1, r19	; 0x01
   1aa48:	4a 83       	std	Y+2, r20	; 0x02
   1aa4a:	c5 53       	subi	r28, 0x35	; 53
   1aa4c:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1aa4e:	c2 5e       	subi	r28, 0xE2	; 226
   1aa50:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa52:	28 81       	ld	r18, Y
   1aa54:	39 81       	ldd	r19, Y+1	; 0x01
   1aa56:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa58:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa5a:	ce 51       	subi	r28, 0x1E	; 30
   1aa5c:	d2 40       	sbci	r29, 0x02	; 2
   1aa5e:	bb 27       	eor	r27, r27
   1aa60:	a5 2f       	mov	r26, r21
   1aa62:	94 2f       	mov	r25, r20
   1aa64:	83 2f       	mov	r24, r19
   1aa66:	c4 5d       	subi	r28, 0xD4	; 212
   1aa68:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa6a:	28 81       	ld	r18, Y
   1aa6c:	39 81       	ldd	r19, Y+1	; 0x01
   1aa6e:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa70:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa72:	cc 52       	subi	r28, 0x2C	; 44
   1aa74:	d2 40       	sbci	r29, 0x02	; 2
   1aa76:	28 17       	cp	r18, r24
   1aa78:	39 07       	cpc	r19, r25
   1aa7a:	4a 07       	cpc	r20, r26
   1aa7c:	5b 07       	cpc	r21, r27
   1aa7e:	08 f4       	brcc	.+2      	; 0x1aa82 <lif_extract_e010_as_ascii+0x1d8>
   1aa80:	51 c1       	rjmp	.+674    	; 0x1ad24 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1aa82:	00 e0       	ldi	r16, 0x00	; 0
   1aa84:	11 e0       	ldi	r17, 0x01	; 1
   1aa86:	c2 5e       	subi	r28, 0xE2	; 226
   1aa88:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa8a:	28 81       	ld	r18, Y
   1aa8c:	39 81       	ldd	r19, Y+1	; 0x01
   1aa8e:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa90:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa92:	ce 51       	subi	r28, 0x1E	; 30
   1aa94:	d2 40       	sbci	r29, 0x02	; 2
   1aa96:	be 01       	movw	r22, r28
   1aa98:	60 5f       	subi	r22, 0xF0	; 240
   1aa9a:	7e 4f       	sbci	r23, 0xFE	; 254
   1aa9c:	c6 01       	movw	r24, r12
   1aa9e:	0e 94 3a be 	call	0x17c74	; 0x17c74 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1aaa2:	6f 3f       	cpi	r22, 0xFF	; 255
   1aaa4:	71 05       	cpc	r23, r1
   1aaa6:	09 f0       	breq	.+2      	; 0x1aaaa <lif_extract_e010_as_ascii+0x200>
   1aaa8:	0c f4       	brge	.+2      	; 0x1aaac <lif_extract_e010_as_ascii+0x202>
   1aaaa:	3a c1       	rjmp	.+628    	; 0x1ad20 <lif_extract_e010_as_ascii+0x476>
   1aaac:	00 e0       	ldi	r16, 0x00	; 0
   1aaae:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1aab0:	ce 5d       	subi	r28, 0xDE	; 222
   1aab2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aab4:	88 81       	ld	r24, Y
   1aab6:	99 81       	ldd	r25, Y+1	; 0x01
   1aab8:	c2 52       	subi	r28, 0x22	; 34
   1aaba:	d2 40       	sbci	r29, 0x02	; 2
   1aabc:	89 2b       	or	r24, r25
   1aabe:	09 f0       	breq	.+2      	; 0x1aac2 <lif_extract_e010_as_ascii+0x218>
   1aac0:	1b c1       	rjmp	.+566    	; 0x1acf8 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1aac2:	e0 e1       	ldi	r30, 0x10	; 16
   1aac4:	f1 e0       	ldi	r31, 0x01	; 1
   1aac6:	ec 0f       	add	r30, r28
   1aac8:	fd 1f       	adc	r31, r29
   1aaca:	e0 0f       	add	r30, r16
   1aacc:	f1 1f       	adc	r31, r17
   1aace:	80 81       	ld	r24, Z
   1aad0:	98 2f       	mov	r25, r24
   1aad2:	9f 7e       	andi	r25, 0xEF	; 239
   1aad4:	9f 3c       	cpi	r25, 0xCF	; 207
   1aad6:	11 f0       	breq	.+4      	; 0x1aadc <lif_extract_e010_as_ascii+0x232>
   1aad8:	8f 36       	cpi	r24, 0x6F	; 111
   1aada:	c9 f5       	brne	.+114    	; 0x1ab4e <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1aadc:	e0 e1       	ldi	r30, 0x10	; 16
   1aade:	f1 e0       	ldi	r31, 0x01	; 1
   1aae0:	ec 0f       	add	r30, r28
   1aae2:	fd 1f       	adc	r31, r29
   1aae4:	e0 0f       	add	r30, r16
   1aae6:	f1 1f       	adc	r31, r17
   1aae8:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1aaea:	f8 01       	movw	r30, r16
   1aaec:	32 96       	adiw	r30, 0x02	; 2
   1aaee:	40 e1       	ldi	r20, 0x10	; 16
   1aaf0:	51 e0       	ldi	r21, 0x01	; 1
   1aaf2:	4c 0f       	add	r20, r28
   1aaf4:	5d 1f       	adc	r21, r29
   1aaf6:	e4 0f       	add	r30, r20
   1aaf8:	f5 1f       	adc	r31, r21
   1aafa:	0d 5f       	subi	r16, 0xFD	; 253
   1aafc:	1f 4f       	sbci	r17, 0xFF	; 255
   1aafe:	80 81       	ld	r24, Z
   1ab00:	b1 2c       	mov	r11, r1
   1ab02:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1ab04:	a1 14       	cp	r10, r1
   1ab06:	b1 04       	cpc	r11, r1
   1ab08:	09 f4       	brne	.+2      	; 0x1ab0c <lif_extract_e010_as_ascii+0x262>
   1ab0a:	ee c0       	rjmp	.+476    	; 0x1ace8 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1ab0c:	5f ef       	ldi	r21, 0xFF	; 255
   1ab0e:	a5 16       	cp	r10, r21
   1ab10:	b1 04       	cpc	r11, r1
   1ab12:	09 f0       	breq	.+2      	; 0x1ab16 <lif_extract_e010_as_ascii+0x26c>
   1ab14:	7c f4       	brge	.+30     	; 0x1ab34 <lif_extract_e010_as_ascii+0x28a>
   1ab16:	c4 5e       	subi	r28, 0xE4	; 228
   1ab18:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab1a:	19 82       	std	Y+1, r1	; 0x01
   1ab1c:	18 82       	st	Y, r1
   1ab1e:	cc 51       	subi	r28, 0x1C	; 28
   1ab20:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1ab22:	c5 01       	movw	r24, r10
   1ab24:	01 97       	sbiw	r24, 0x01	; 1
   1ab26:	c0 5d       	subi	r28, 0xD0	; 208
   1ab28:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab2a:	99 83       	std	Y+1, r25	; 0x01
   1ab2c:	88 83       	st	Y, r24
   1ab2e:	c0 53       	subi	r28, 0x30	; 48
   1ab30:	d2 40       	sbci	r29, 0x02	; 2
   1ab32:	68 c0       	rjmp	.+208    	; 0x1ac04 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1ab34:	ed b7       	in	r30, 0x3d	; 61
   1ab36:	fe b7       	in	r31, 0x3e	; 62
   1ab38:	b5 82       	std	Z+5, r11	; 0x05
   1ab3a:	a4 82       	std	Z+4, r10	; 0x04
   1ab3c:	82 e6       	ldi	r24, 0x62	; 98
   1ab3e:	93 e3       	ldi	r25, 0x33	; 51
   1ab40:	a0 e0       	ldi	r26, 0x00	; 0
   1ab42:	81 83       	std	Z+1, r24	; 0x01
   1ab44:	92 83       	std	Z+2, r25	; 0x02
   1ab46:	a3 83       	std	Z+3, r26	; 0x03
   1ab48:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1ab4c:	1e c0       	rjmp	.+60     	; 0x1ab8a <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1ab4e:	8f 3e       	cpi	r24, 0xEF	; 239
   1ab50:	09 f4       	brne	.+2      	; 0x1ab54 <lif_extract_e010_as_ascii+0x2aa>
   1ab52:	d2 c0       	rjmp	.+420    	; 0x1acf8 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1ab54:	ed b7       	in	r30, 0x3d	; 61
   1ab56:	fe b7       	in	r31, 0x3e	; 62
   1ab58:	13 87       	std	Z+11, r17	; 0x0b
   1ab5a:	02 87       	std	Z+10, r16	; 0x0a
   1ab5c:	c2 5e       	subi	r28, 0xE2	; 226
   1ab5e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab60:	28 81       	ld	r18, Y
   1ab62:	39 81       	ldd	r19, Y+1	; 0x01
   1ab64:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab66:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab68:	ce 51       	subi	r28, 0x1E	; 30
   1ab6a:	d2 40       	sbci	r29, 0x02	; 2
   1ab6c:	26 83       	std	Z+6, r18	; 0x06
   1ab6e:	37 83       	std	Z+7, r19	; 0x07
   1ab70:	40 87       	std	Z+8, r20	; 0x08
   1ab72:	51 87       	std	Z+9, r21	; 0x09
   1ab74:	90 e0       	ldi	r25, 0x00	; 0
   1ab76:	95 83       	std	Z+5, r25	; 0x05
   1ab78:	84 83       	std	Z+4, r24	; 0x04
   1ab7a:	8c e0       	ldi	r24, 0x0C	; 12
   1ab7c:	93 e3       	ldi	r25, 0x33	; 51
   1ab7e:	a0 e0       	ldi	r26, 0x00	; 0
   1ab80:	81 83       	std	Z+1, r24	; 0x01
   1ab82:	92 83       	std	Z+2, r25	; 0x02
   1ab84:	a3 83       	std	Z+3, r26	; 0x03
   1ab86:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                status = 0;
                done = 1;
   1ab8a:	21 e0       	ldi	r18, 0x01	; 1
   1ab8c:	30 e0       	ldi	r19, 0x00	; 0
   1ab8e:	ce 5d       	subi	r28, 0xDE	; 222
   1ab90:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab92:	39 83       	std	Y+1, r19	; 0x01
   1ab94:	28 83       	st	Y, r18
   1ab96:	c2 52       	subi	r28, 0x22	; 34
   1ab98:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ab9a:	e1 2c       	mov	r14, r1
   1ab9c:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ab9e:	ac c0       	rjmp	.+344    	; 0x1acf8 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1aba0:	0f 3f       	cpi	r16, 0xFF	; 255
   1aba2:	11 05       	cpc	r17, r1
   1aba4:	11 f0       	breq	.+4      	; 0x1abaa <lif_extract_e010_as_ascii+0x300>
   1aba6:	0c f0       	brlt	.+2      	; 0x1abaa <lif_extract_e010_as_ascii+0x300>
   1aba8:	a7 c0       	rjmp	.+334    	; 0x1acf8 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1abaa:	e0 e1       	ldi	r30, 0x10	; 16
   1abac:	f1 e0       	ldi	r31, 0x01	; 1
   1abae:	ec 0f       	add	r30, r28
   1abb0:	fd 1f       	adc	r31, r29
   1abb2:	e0 0f       	add	r30, r16
   1abb4:	f1 1f       	adc	r31, r17
   1abb6:	20 81       	ld	r18, Z
   1abb8:	a1 01       	movw	r20, r2
   1abba:	4f 5f       	subi	r20, 0xFF	; 255
   1abbc:	5f 4f       	sbci	r21, 0xFF	; 255
   1abbe:	4a 01       	movw	r8, r20
   1abc0:	2d 30       	cpi	r18, 0x0D	; 13
   1abc2:	51 f1       	breq	.+84     	; 0x1ac18 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1abc4:	98 2d       	mov	r25, r8
   1abc6:	89 2d       	mov	r24, r9
   1abc8:	0f 5f       	subi	r16, 0xFF	; 255
   1abca:	1f 4f       	sbci	r17, 0xFF	; 255
   1abcc:	ec e0       	ldi	r30, 0x0C	; 12
   1abce:	f0 e0       	ldi	r31, 0x00	; 0
   1abd0:	ec 0f       	add	r30, r28
   1abd2:	fd 1f       	adc	r31, r29
   1abd4:	e2 0d       	add	r30, r2
   1abd6:	f3 1d       	adc	r31, r3
   1abd8:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1abda:	ef ef       	ldi	r30, 0xFF	; 255
   1abdc:	8e 16       	cp	r8, r30
   1abde:	91 04       	cpc	r9, r1
   1abe0:	09 f0       	breq	.+2      	; 0x1abe4 <lif_extract_e010_as_ascii+0x33a>
   1abe2:	ac f5       	brge	.+106    	; 0x1ac4e <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1abe4:	c4 5e       	subi	r28, 0xE4	; 228
   1abe6:	dd 4f       	sbci	r29, 0xFD	; 253
   1abe8:	28 81       	ld	r18, Y
   1abea:	39 81       	ldd	r19, Y+1	; 0x01
   1abec:	cc 51       	subi	r28, 0x1C	; 28
   1abee:	d2 40       	sbci	r29, 0x02	; 2
   1abf0:	2f 5f       	subi	r18, 0xFF	; 255
   1abf2:	3f 4f       	sbci	r19, 0xFF	; 255
   1abf4:	c4 5e       	subi	r28, 0xE4	; 228
   1abf6:	dd 4f       	sbci	r29, 0xFD	; 253
   1abf8:	39 83       	std	Y+1, r19	; 0x01
   1abfa:	28 83       	st	Y, r18
   1abfc:	cc 51       	subi	r28, 0x1C	; 28
   1abfe:	d2 40       	sbci	r29, 0x02	; 2
   1ac00:	29 2e       	mov	r2, r25
   1ac02:	38 2e       	mov	r3, r24
   1ac04:	c4 5e       	subi	r28, 0xE4	; 228
   1ac06:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac08:	48 81       	ld	r20, Y
   1ac0a:	59 81       	ldd	r21, Y+1	; 0x01
   1ac0c:	cc 51       	subi	r28, 0x1C	; 28
   1ac0e:	d2 40       	sbci	r29, 0x02	; 2
   1ac10:	4a 15       	cp	r20, r10
   1ac12:	5b 05       	cpc	r21, r11
   1ac14:	2c f2       	brlt	.-118    	; 0x1aba0 <lif_extract_e010_as_ascii+0x2f6>
   1ac16:	62 c0       	rjmp	.+196    	; 0x1acdc <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ac18:	c4 5e       	subi	r28, 0xE4	; 228
   1ac1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac1c:	88 81       	ld	r24, Y
   1ac1e:	99 81       	ldd	r25, Y+1	; 0x01
   1ac20:	cc 51       	subi	r28, 0x1C	; 28
   1ac22:	d2 40       	sbci	r29, 0x02	; 2
   1ac24:	c0 5d       	subi	r28, 0xD0	; 208
   1ac26:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac28:	a8 81       	ld	r26, Y
   1ac2a:	b9 81       	ldd	r27, Y+1	; 0x01
   1ac2c:	c0 53       	subi	r28, 0x30	; 48
   1ac2e:	d2 40       	sbci	r29, 0x02	; 2
   1ac30:	8a 17       	cp	r24, r26
   1ac32:	9b 07       	cpc	r25, r27
   1ac34:	39 f6       	brne	.-114    	; 0x1abc4 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1ac36:	ec e0       	ldi	r30, 0x0C	; 12
   1ac38:	f0 e0       	ldi	r31, 0x00	; 0
   1ac3a:	ec 0f       	add	r30, r28
   1ac3c:	fd 1f       	adc	r31, r29
   1ac3e:	e2 0d       	add	r30, r2
   1ac40:	f3 1d       	adc	r31, r3
   1ac42:	ba e0       	ldi	r27, 0x0A	; 10
   1ac44:	b0 83       	st	Z, r27
                    ++ind;
   1ac46:	0f 5f       	subi	r16, 0xFF	; 255
   1ac48:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1ac4a:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1ac4c:	47 c0       	rjmp	.+142    	; 0x1acdc <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1ac4e:	cc 5d       	subi	r28, 0xDC	; 220
   1ac50:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac52:	28 81       	ld	r18, Y
   1ac54:	39 81       	ldd	r19, Y+1	; 0x01
   1ac56:	c4 52       	subi	r28, 0x24	; 36
   1ac58:	d2 40       	sbci	r29, 0x02	; 2
   1ac5a:	a4 01       	movw	r20, r8
   1ac5c:	61 e0       	ldi	r22, 0x01	; 1
   1ac5e:	70 e0       	ldi	r23, 0x00	; 0
   1ac60:	ce 01       	movw	r24, r28
   1ac62:	0c 96       	adiw	r24, 0x0c	; 12
   1ac64:	0e 94 b5 7a 	call	0xf56a	; 0xf56a <fwrite>
                    if(size < wind)
   1ac68:	88 15       	cp	r24, r8
   1ac6a:	99 05       	cpc	r25, r9
   1ac6c:	d4 f4       	brge	.+52     	; 0x1aca2 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ac6e:	cb 5c       	subi	r28, 0xCB	; 203
   1ac70:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac72:	28 81       	ld	r18, Y
   1ac74:	39 81       	ldd	r19, Y+1	; 0x01
   1ac76:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac78:	c5 53       	subi	r28, 0x35	; 53
   1ac7a:	d2 40       	sbci	r29, 0x02	; 2
   1ac7c:	ed b7       	in	r30, 0x3d	; 61
   1ac7e:	fe b7       	in	r31, 0x3e	; 62
   1ac80:	21 83       	std	Z+1, r18	; 0x01
   1ac82:	32 83       	std	Z+2, r19	; 0x02
   1ac84:	43 83       	std	Z+3, r20	; 0x03
   1ac86:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ac8a:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ac8c:	21 e0       	ldi	r18, 0x01	; 1
   1ac8e:	30 e0       	ldi	r19, 0x00	; 0
   1ac90:	ce 5d       	subi	r28, 0xDE	; 222
   1ac92:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac94:	39 83       	std	Y+1, r19	; 0x01
   1ac96:	28 83       	st	Y, r18
   1ac98:	c2 52       	subi	r28, 0x22	; 34
   1ac9a:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ac9c:	e1 2c       	mov	r14, r1
   1ac9e:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1aca0:	1d c0       	rjmp	.+58     	; 0x1acdc <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1aca2:	09 2e       	mov	r0, r25
   1aca4:	00 0c       	add	r0, r0
   1aca6:	aa 0b       	sbc	r26, r26
   1aca8:	bb 0b       	sbc	r27, r27
   1acaa:	48 0e       	add	r4, r24
   1acac:	59 1e       	adc	r5, r25
   1acae:	6a 1e       	adc	r6, r26
   1acb0:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1acb2:	ed b7       	in	r30, 0x3d	; 61
   1acb4:	fe b7       	in	r31, 0x3e	; 62
   1acb6:	44 82       	std	Z+4, r4	; 0x04
   1acb8:	55 82       	std	Z+5, r5	; 0x05
   1acba:	66 82       	std	Z+6, r6	; 0x06
   1acbc:	77 82       	std	Z+7, r7	; 0x07
   1acbe:	ce 5c       	subi	r28, 0xCE	; 206
   1acc0:	dd 4f       	sbci	r29, 0xFD	; 253
   1acc2:	28 81       	ld	r18, Y
   1acc4:	39 81       	ldd	r19, Y+1	; 0x01
   1acc6:	4a 81       	ldd	r20, Y+2	; 0x02
   1acc8:	c2 53       	subi	r28, 0x32	; 50
   1acca:	d2 40       	sbci	r29, 0x02	; 2
   1accc:	21 83       	std	Z+1, r18	; 0x01
   1acce:	32 83       	std	Z+2, r19	; 0x02
   1acd0:	43 83       	std	Z+3, r20	; 0x03
   1acd2:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
                    wind = 0;
   1acd6:	90 e0       	ldi	r25, 0x00	; 0
   1acd8:	80 e0       	ldi	r24, 0x00	; 0
   1acda:	84 cf       	rjmp	.-248    	; 0x1abe4 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1acdc:	0f 3f       	cpi	r16, 0xFF	; 255
   1acde:	11 05       	cpc	r17, r1
   1ace0:	09 f0       	breq	.+2      	; 0x1ace4 <lif_extract_e010_as_ascii+0x43a>
   1ace2:	0c f4       	brge	.+2      	; 0x1ace6 <lif_extract_e010_as_ascii+0x43c>
   1ace4:	e5 ce       	rjmp	.-566    	; 0x1aab0 <lif_extract_e010_as_ascii+0x206>
   1ace6:	08 c0       	rjmp	.+16     	; 0x1acf8 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1ace8:	a1 e0       	ldi	r26, 0x01	; 1
   1acea:	b0 e0       	ldi	r27, 0x00	; 0
   1acec:	ce 5d       	subi	r28, 0xDE	; 222
   1acee:	dd 4f       	sbci	r29, 0xFD	; 253
   1acf0:	b9 83       	std	Y+1, r27	; 0x01
   1acf2:	a8 83       	st	Y, r26
   1acf4:	c2 52       	subi	r28, 0x22	; 34
   1acf6:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1acf8:	c2 5e       	subi	r28, 0xE2	; 226
   1acfa:	dd 4f       	sbci	r29, 0xFD	; 253
   1acfc:	28 81       	ld	r18, Y
   1acfe:	39 81       	ldd	r19, Y+1	; 0x01
   1ad00:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad02:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad04:	ce 51       	subi	r28, 0x1E	; 30
   1ad06:	d2 40       	sbci	r29, 0x02	; 2
   1ad08:	3f 5f       	subi	r19, 0xFF	; 255
   1ad0a:	4f 4f       	sbci	r20, 0xFF	; 255
   1ad0c:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad0e:	c2 5e       	subi	r28, 0xE2	; 226
   1ad10:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad12:	28 83       	st	Y, r18
   1ad14:	39 83       	std	Y+1, r19	; 0x01
   1ad16:	4a 83       	std	Y+2, r20	; 0x02
   1ad18:	5b 83       	std	Y+3, r21	; 0x03
   1ad1a:	ce 51       	subi	r28, 0x1E	; 30
   1ad1c:	d2 40       	sbci	r29, 0x02	; 2
   1ad1e:	97 ce       	rjmp	.-722    	; 0x1aa4e <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ad20:	e1 2c       	mov	r14, r1
   1ad22:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad24:	c6 01       	movw	r24, r12
   1ad26:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1ad2a:	21 14       	cp	r2, r1
   1ad2c:	31 04       	cpc	r3, r1
   1ad2e:	31 f1       	breq	.+76     	; 0x1ad7c <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1ad30:	cc 5d       	subi	r28, 0xDC	; 220
   1ad32:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad34:	28 81       	ld	r18, Y
   1ad36:	39 81       	ldd	r19, Y+1	; 0x01
   1ad38:	c4 52       	subi	r28, 0x24	; 36
   1ad3a:	d2 40       	sbci	r29, 0x02	; 2
   1ad3c:	a1 01       	movw	r20, r2
   1ad3e:	61 e0       	ldi	r22, 0x01	; 1
   1ad40:	70 e0       	ldi	r23, 0x00	; 0
   1ad42:	ce 01       	movw	r24, r28
   1ad44:	0c 96       	adiw	r24, 0x0c	; 12
   1ad46:	0e 94 b5 7a 	call	0xf56a	; 0xf56a <fwrite>
   1ad4a:	8c 01       	movw	r16, r24
        if(size < wind)
   1ad4c:	82 15       	cp	r24, r2
   1ad4e:	93 05       	cpc	r25, r3
   1ad50:	64 f4       	brge	.+24     	; 0x1ad6a <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1ad52:	8e ea       	ldi	r24, 0xAE	; 174
   1ad54:	92 e3       	ldi	r25, 0x32	; 50
   1ad56:	a0 e0       	ldi	r26, 0x00	; 0
   1ad58:	ed b7       	in	r30, 0x3d	; 61
   1ad5a:	fe b7       	in	r31, 0x3e	; 62
   1ad5c:	81 83       	std	Z+1, r24	; 0x01
   1ad5e:	92 83       	std	Z+2, r25	; 0x02
   1ad60:	a3 83       	std	Z+3, r26	; 0x03
   1ad62:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            status = 0;
   1ad66:	e1 2c       	mov	r14, r1
   1ad68:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ad6a:	c8 01       	movw	r24, r16
   1ad6c:	01 2e       	mov	r0, r17
   1ad6e:	00 0c       	add	r0, r0
   1ad70:	aa 0b       	sbc	r26, r26
   1ad72:	bb 0b       	sbc	r27, r27
   1ad74:	48 0e       	add	r4, r24
   1ad76:	59 1e       	adc	r5, r25
   1ad78:	6a 1e       	adc	r6, r26
   1ad7a:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1ad7c:	cc 5d       	subi	r28, 0xDC	; 220
   1ad7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad80:	88 81       	ld	r24, Y
   1ad82:	99 81       	ldd	r25, Y+1	; 0x01
   1ad84:	c4 52       	subi	r28, 0x24	; 36
   1ad86:	d2 40       	sbci	r29, 0x02	; 2
   1ad88:	0e 94 37 7b 	call	0xf66e	; 0xf66e <fclose>
    if(t)
   1ad8c:	c8 5d       	subi	r28, 0xD8	; 216
   1ad8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad90:	28 81       	ld	r18, Y
   1ad92:	39 81       	ldd	r19, Y+1	; 0x01
   1ad94:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad96:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad98:	c8 52       	subi	r28, 0x28	; 40
   1ad9a:	d2 40       	sbci	r29, 0x02	; 2
   1ad9c:	21 15       	cp	r18, r1
   1ad9e:	31 05       	cpc	r19, r1
   1ada0:	41 05       	cpc	r20, r1
   1ada2:	51 05       	cpc	r21, r1
   1ada4:	d9 f0       	breq	.+54     	; 0x1addc <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1ada6:	c8 5e       	subi	r28, 0xE8	; 232
   1ada8:	dd 4f       	sbci	r29, 0xFD	; 253
   1adaa:	28 83       	st	Y, r18
   1adac:	39 83       	std	Y+1, r19	; 0x01
   1adae:	4a 83       	std	Y+2, r20	; 0x02
   1adb0:	5b 83       	std	Y+3, r21	; 0x03
   1adb2:	c8 51       	subi	r28, 0x18	; 24
   1adb4:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1adb6:	cc 5e       	subi	r28, 0xEC	; 236
   1adb8:	dd 4f       	sbci	r29, 0xFD	; 253
   1adba:	28 83       	st	Y, r18
   1adbc:	39 83       	std	Y+1, r19	; 0x01
   1adbe:	4a 83       	std	Y+2, r20	; 0x02
   1adc0:	5b 83       	std	Y+3, r21	; 0x03
   1adc2:	c4 51       	subi	r28, 0x14	; 20
   1adc4:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1adc6:	be 01       	movw	r22, r28
   1adc8:	6c 5e       	subi	r22, 0xEC	; 236
   1adca:	7d 4f       	sbci	r23, 0xFD	; 253
   1adcc:	ca 5d       	subi	r28, 0xDA	; 218
   1adce:	dd 4f       	sbci	r29, 0xFD	; 253
   1add0:	88 81       	ld	r24, Y
   1add2:	99 81       	ldd	r25, Y+1	; 0x01
   1add4:	c6 52       	subi	r28, 0x26	; 38
   1add6:	d2 40       	sbci	r29, 0x02	; 2
   1add8:	0e 94 74 78 	call	0xf0e8	; 0xf0e8 <utime>
    }
    sync();
   1addc:	0e 94 32 7a 	call	0xf464	; 0xf464 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1ade0:	ed b7       	in	r30, 0x3d	; 61
   1ade2:	fe b7       	in	r31, 0x3e	; 62
   1ade4:	44 82       	std	Z+4, r4	; 0x04
   1ade6:	55 82       	std	Z+5, r5	; 0x05
   1ade8:	66 82       	std	Z+6, r6	; 0x06
   1adea:	77 82       	std	Z+7, r7	; 0x07
   1adec:	80 ea       	ldi	r24, 0xA0	; 160
   1adee:	92 e3       	ldi	r25, 0x32	; 50
   1adf0:	a0 e0       	ldi	r26, 0x00	; 0
   1adf2:	81 83       	std	Z+1, r24	; 0x01
   1adf4:	92 83       	std	Z+2, r25	; 0x02
   1adf6:	a3 83       	std	Z+3, r26	; 0x03
   1adf8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    return(status);
   1adfc:	c7 01       	movw	r24, r14
}
   1adfe:	c9 5c       	subi	r28, 0xC9	; 201
   1ae00:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae02:	e2 e1       	ldi	r30, 0x12	; 18
   1ae04:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0001ae08 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1ae08:	a4 e1       	ldi	r26, 0x14	; 20
   1ae0a:	b1 e0       	ldi	r27, 0x01	; 1
   1ae0c:	ea e0       	ldi	r30, 0x0A	; 10
   1ae0e:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae10:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__prologue_saves__>
   1ae14:	7c 01       	movw	r14, r24
   1ae16:	8b 01       	movw	r16, r22
   1ae18:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ae1a:	62 e4       	ldi	r22, 0x42	; 66
   1ae1c:	73 e0       	ldi	r23, 0x03	; 3
   1ae1e:	0e 94 c3 cd 	call	0x19b86	; 0x19b86 <lif_open_volume>
   1ae22:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ae24:	00 97       	sbiw	r24, 0x00	; 0
   1ae26:	69 f4       	brne	.+26     	; 0x1ae42 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ae28:	ed b7       	in	r30, 0x3d	; 61
   1ae2a:	fe b7       	in	r31, 0x3e	; 62
   1ae2c:	f5 82       	std	Z+5, r15	; 0x05
   1ae2e:	e4 82       	std	Z+4, r14	; 0x04
   1ae30:	88 e8       	ldi	r24, 0x88	; 136
   1ae32:	92 e3       	ldi	r25, 0x32	; 50
   1ae34:	a0 e0       	ldi	r26, 0x00	; 0
   1ae36:	81 83       	std	Z+1, r24	; 0x01
   1ae38:	92 83       	std	Z+2, r25	; 0x02
   1ae3a:	a3 83       	std	Z+3, r26	; 0x03
   1ae3c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1ae40:	13 c0       	rjmp	.+38     	; 0x1ae68 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ae42:	b8 01       	movw	r22, r16
   1ae44:	75 d9       	rcall	.-3350   	; 0x1a130 <lif_find_file>
    if(index == -1)
   1ae46:	01 96       	adiw	r24, 0x01	; 1
   1ae48:	91 f4       	brne	.+36     	; 0x1ae6e <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1ae4a:	ed b7       	in	r30, 0x3d	; 61
   1ae4c:	fe b7       	in	r31, 0x3e	; 62
   1ae4e:	15 83       	std	Z+5, r17	; 0x05
   1ae50:	04 83       	std	Z+4, r16	; 0x04
   1ae52:	85 e7       	ldi	r24, 0x75	; 117
   1ae54:	92 e3       	ldi	r25, 0x32	; 50
   1ae56:	a0 e0       	ldi	r26, 0x00	; 0
   1ae58:	81 83       	std	Z+1, r24	; 0x01
   1ae5a:	92 83       	std	Z+2, r25	; 0x02
   1ae5c:	a3 83       	std	Z+3, r26	; 0x03
   1ae5e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae62:	c4 01       	movw	r24, r8
   1ae64:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ae68:	00 e0       	ldi	r16, 0x00	; 0
   1ae6a:	10 e0       	ldi	r17, 0x00	; 0
   1ae6c:	ff c0       	rjmp	.+510    	; 0x1b06c <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1ae6e:	94 01       	movw	r18, r8
   1ae70:	20 5a       	subi	r18, 0xA0	; 160
   1ae72:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae74:	c0 5f       	subi	r28, 0xF0	; 240
   1ae76:	de 4f       	sbci	r29, 0xFE	; 254
   1ae78:	39 83       	std	Y+1, r19	; 0x01
   1ae7a:	28 83       	st	Y, r18
   1ae7c:	c0 51       	subi	r28, 0x10	; 16
   1ae7e:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1ae80:	f9 01       	movw	r30, r18
   1ae82:	a0 80       	ld	r10, Z
   1ae84:	b1 80       	ldd	r11, Z+1	; 0x01
   1ae86:	0b 2c       	mov	r0, r11
   1ae88:	00 0c       	add	r0, r0
   1ae8a:	cc 08       	sbc	r12, r12
   1ae8c:	dd 08       	sbc	r13, r13
   1ae8e:	e1 2c       	mov	r14, r1
   1ae90:	f1 2c       	mov	r15, r1
   1ae92:	87 01       	movw	r16, r14
   1ae94:	e3 94       	inc	r14
   1ae96:	21 e0       	ldi	r18, 0x01	; 1
   1ae98:	30 e0       	ldi	r19, 0x00	; 0
   1ae9a:	40 e0       	ldi	r20, 0x00	; 0
   1ae9c:	50 e0       	ldi	r21, 0x00	; 0
   1ae9e:	61 e7       	ldi	r22, 0x71	; 113
   1aea0:	76 e1       	ldi	r23, 0x16	; 22
   1aea2:	c3 01       	movw	r24, r6
   1aea4:	0e 94 79 c9 	call	0x192f2	; 0x192f2 <lif_create_volume>
   1aea8:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1aeaa:	89 2b       	or	r24, r25
   1aeac:	d1 f2       	breq	.-76     	; 0x1ae62 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1aeae:	81 e2       	ldi	r24, 0x21	; 33
   1aeb0:	f4 01       	movw	r30, r8
   1aeb2:	e1 5b       	subi	r30, 0xB1	; 177
   1aeb4:	ff 4f       	sbci	r31, 0xFF	; 255
   1aeb6:	d7 01       	movw	r26, r14
   1aeb8:	a1 5b       	subi	r26, 0xB1	; 177
   1aeba:	bf 4f       	sbci	r27, 0xFF	; 255
   1aebc:	01 90       	ld	r0, Z+
   1aebe:	0d 92       	st	X+, r0
   1aec0:	8a 95       	dec	r24
   1aec2:	e1 f7       	brne	.-8      	; 0x1aebc <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1aec4:	82 e0       	ldi	r24, 0x02	; 2
   1aec6:	90 e0       	ldi	r25, 0x00	; 0
   1aec8:	a0 e0       	ldi	r26, 0x00	; 0
   1aeca:	b0 e0       	ldi	r27, 0x00	; 0
   1aecc:	f7 01       	movw	r30, r14
   1aece:	e4 5a       	subi	r30, 0xA4	; 164
   1aed0:	ff 4f       	sbci	r31, 0xFF	; 255
   1aed2:	80 83       	st	Z, r24
   1aed4:	91 83       	std	Z+1, r25	; 0x01
   1aed6:	a2 83       	std	Z+2, r26	; 0x02
   1aed8:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1aeda:	c0 5f       	subi	r28, 0xF0	; 240
   1aedc:	de 4f       	sbci	r29, 0xFE	; 254
   1aede:	e8 81       	ld	r30, Y
   1aee0:	f9 81       	ldd	r31, Y+1	; 0x01
   1aee2:	c0 51       	subi	r28, 0x10	; 16
   1aee4:	d1 40       	sbci	r29, 0x01	; 1
   1aee6:	80 81       	ld	r24, Z
   1aee8:	91 81       	ldd	r25, Z+1	; 0x01
   1aeea:	a2 81       	ldd	r26, Z+2	; 0x02
   1aeec:	b3 81       	ldd	r27, Z+3	; 0x03
   1aeee:	f7 01       	movw	r30, r14
   1aef0:	80 8b       	std	Z+16, r24	; 0x10
   1aef2:	91 8b       	std	Z+17, r25	; 0x11
   1aef4:	a2 8b       	std	Z+18, r26	; 0x12
   1aef6:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1aef8:	60 e0       	ldi	r22, 0x00	; 0
   1aefa:	70 e0       	ldi	r23, 0x00	; 0
   1aefc:	c7 01       	movw	r24, r14
   1aefe:	0e 94 fb c7 	call	0x18ff6	; 0x18ff6 <lif_writedirindex>
   1af02:	8c 01       	movw	r16, r24
   1af04:	89 2b       	or	r24, r25
   1af06:	41 f0       	breq	.+16     	; 0x1af18 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1af08:	61 e0       	ldi	r22, 0x01	; 1
   1af0a:	70 e0       	ldi	r23, 0x00	; 0
   1af0c:	c7 01       	movw	r24, r14
   1af0e:	0e 94 57 c8 	call	0x190ae	; 0x190ae <lif_writedirEOF>
   1af12:	8c 01       	movw	r16, r24
   1af14:	89 2b       	or	r24, r25
   1af16:	39 f4       	brne	.+14     	; 0x1af26 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af18:	c4 01       	movw	r24, r8
   1af1a:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
   1af1e:	c7 01       	movw	r24, r14
   1af20:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1af24:	a3 c0       	rjmp	.+326    	; 0x1b06c <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1af26:	f7 01       	movw	r30, r14
   1af28:	44 84       	ldd	r4, Z+12	; 0x0c
   1af2a:	55 84       	ldd	r5, Z+13	; 0x0d
   1af2c:	66 84       	ldd	r6, Z+14	; 0x0e
   1af2e:	77 84       	ldd	r7, Z+15	; 0x0f
   1af30:	76 2c       	mov	r7, r6
   1af32:	65 2c       	mov	r6, r5
   1af34:	54 2c       	mov	r5, r4
   1af36:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1af38:	f4 01       	movw	r30, r8
   1af3a:	e4 5a       	subi	r30, 0xA4	; 164
   1af3c:	ff 4f       	sbci	r31, 0xFF	; 255
   1af3e:	80 81       	ld	r24, Z
   1af40:	91 81       	ldd	r25, Z+1	; 0x01
   1af42:	a2 81       	ldd	r26, Z+2	; 0x02
   1af44:	b3 81       	ldd	r27, Z+3	; 0x03
   1af46:	22 27       	eor	r18, r18
   1af48:	38 2f       	mov	r19, r24
   1af4a:	49 2f       	mov	r20, r25
   1af4c:	5a 2f       	mov	r21, r26
   1af4e:	c4 5f       	subi	r28, 0xF4	; 244
   1af50:	de 4f       	sbci	r29, 0xFE	; 254
   1af52:	28 83       	st	Y, r18
   1af54:	39 83       	std	Y+1, r19	; 0x01
   1af56:	4a 83       	std	Y+2, r20	; 0x02
   1af58:	5b 83       	std	Y+3, r21	; 0x03
   1af5a:	cc 50       	subi	r28, 0x0C	; 12
   1af5c:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af5e:	21 2c       	mov	r2, r1
   1af60:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1af62:	87 e6       	ldi	r24, 0x67	; 103
   1af64:	92 e3       	ldi	r25, 0x32	; 50
   1af66:	9c 01       	movw	r18, r24
   1af68:	40 e0       	ldi	r20, 0x00	; 0
   1af6a:	ce 5e       	subi	r28, 0xEE	; 238
   1af6c:	de 4f       	sbci	r29, 0xFE	; 254
   1af6e:	28 83       	st	Y, r18
   1af70:	39 83       	std	Y+1, r19	; 0x01
   1af72:	4a 83       	std	Y+2, r20	; 0x02
   1af74:	c2 51       	subi	r28, 0x12	; 18
   1af76:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af78:	c0 5f       	subi	r28, 0xF0	; 240
   1af7a:	de 4f       	sbci	r29, 0xFE	; 254
   1af7c:	e8 81       	ld	r30, Y
   1af7e:	f9 81       	ldd	r31, Y+1	; 0x01
   1af80:	c0 51       	subi	r28, 0x10	; 16
   1af82:	d1 40       	sbci	r29, 0x01	; 1
   1af84:	80 81       	ld	r24, Z
   1af86:	91 81       	ldd	r25, Z+1	; 0x01
   1af88:	28 16       	cp	r2, r24
   1af8a:	39 06       	cpc	r3, r25
   1af8c:	0c f0       	brlt	.+2      	; 0x1af90 <lif_extract_lif_as_lif+0x188>
   1af8e:	58 c0       	rjmp	.+176    	; 0x1b040 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1af90:	00 e0       	ldi	r16, 0x00	; 0
   1af92:	11 e0       	ldi	r17, 0x01	; 1
   1af94:	c4 5f       	subi	r28, 0xF4	; 244
   1af96:	de 4f       	sbci	r29, 0xFE	; 254
   1af98:	28 81       	ld	r18, Y
   1af9a:	39 81       	ldd	r19, Y+1	; 0x01
   1af9c:	4a 81       	ldd	r20, Y+2	; 0x02
   1af9e:	5b 81       	ldd	r21, Y+3	; 0x03
   1afa0:	cc 50       	subi	r28, 0x0C	; 12
   1afa2:	d1 40       	sbci	r29, 0x01	; 1
   1afa4:	be 01       	movw	r22, r28
   1afa6:	68 5f       	subi	r22, 0xF8	; 248
   1afa8:	7f 4f       	sbci	r23, 0xFF	; 255
   1afaa:	c4 01       	movw	r24, r8
   1afac:	0e 94 3a be 	call	0x17c74	; 0x17c74 <lif_read>
   1afb0:	5b 01       	movw	r10, r22
   1afb2:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1afb4:	6f 3f       	cpi	r22, 0xFF	; 255
   1afb6:	71 05       	cpc	r23, r1
   1afb8:	09 f0       	breq	.+2      	; 0x1afbc <lif_extract_lif_as_lif+0x1b4>
   1afba:	2c f4       	brge	.+10     	; 0x1afc6 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afbc:	c4 01       	movw	r24, r8
   1afbe:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
   1afc2:	c7 01       	movw	r24, r14
   1afc4:	4f cf       	rjmp	.-354    	; 0x1ae64 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1afc6:	00 e0       	ldi	r16, 0x00	; 0
   1afc8:	11 e0       	ldi	r17, 0x01	; 1
   1afca:	a3 01       	movw	r20, r6
   1afcc:	92 01       	movw	r18, r4
   1afce:	be 01       	movw	r22, r28
   1afd0:	68 5f       	subi	r22, 0xF8	; 248
   1afd2:	7f 4f       	sbci	r23, 0xFF	; 255
   1afd4:	c7 01       	movw	r24, r14
   1afd6:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1afda:	c5 01       	movw	r24, r10
   1afdc:	0b 2c       	mov	r0, r11
   1afde:	00 0c       	add	r0, r0
   1afe0:	aa 0b       	sbc	r26, r26
   1afe2:	bb 0b       	sbc	r27, r27
   1afe4:	48 0e       	add	r4, r24
   1afe6:	59 1e       	adc	r5, r25
   1afe8:	6a 1e       	adc	r6, r26
   1afea:	7b 1e       	adc	r7, r27
        offset += size;
   1afec:	c4 5f       	subi	r28, 0xF4	; 244
   1afee:	de 4f       	sbci	r29, 0xFE	; 254
   1aff0:	28 81       	ld	r18, Y
   1aff2:	39 81       	ldd	r19, Y+1	; 0x01
   1aff4:	4a 81       	ldd	r20, Y+2	; 0x02
   1aff6:	5b 81       	ldd	r21, Y+3	; 0x03
   1aff8:	cc 50       	subi	r28, 0x0C	; 12
   1affa:	d1 40       	sbci	r29, 0x01	; 1
   1affc:	28 0f       	add	r18, r24
   1affe:	39 1f       	adc	r19, r25
   1b000:	4a 1f       	adc	r20, r26
   1b002:	5b 1f       	adc	r21, r27
   1b004:	c4 5f       	subi	r28, 0xF4	; 244
   1b006:	de 4f       	sbci	r29, 0xFE	; 254
   1b008:	28 83       	st	Y, r18
   1b00a:	39 83       	std	Y+1, r19	; 0x01
   1b00c:	4a 83       	std	Y+2, r20	; 0x02
   1b00e:	5b 83       	std	Y+3, r21	; 0x03
   1b010:	cc 50       	subi	r28, 0x0C	; 12
   1b012:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b014:	ed b7       	in	r30, 0x3d	; 61
   1b016:	fe b7       	in	r31, 0x3e	; 62
   1b018:	44 82       	std	Z+4, r4	; 0x04
   1b01a:	55 82       	std	Z+5, r5	; 0x05
   1b01c:	66 82       	std	Z+6, r6	; 0x06
   1b01e:	77 82       	std	Z+7, r7	; 0x07
   1b020:	ce 5e       	subi	r28, 0xEE	; 238
   1b022:	de 4f       	sbci	r29, 0xFE	; 254
   1b024:	28 81       	ld	r18, Y
   1b026:	39 81       	ldd	r19, Y+1	; 0x01
   1b028:	4a 81       	ldd	r20, Y+2	; 0x02
   1b02a:	c2 51       	subi	r28, 0x12	; 18
   1b02c:	d1 40       	sbci	r29, 0x01	; 1
   1b02e:	21 83       	std	Z+1, r18	; 0x01
   1b030:	32 83       	std	Z+2, r19	; 0x02
   1b032:	43 83       	std	Z+3, r20	; 0x03
   1b034:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b038:	ff ef       	ldi	r31, 0xFF	; 255
   1b03a:	2f 1a       	sub	r2, r31
   1b03c:	3f 0a       	sbc	r3, r31
   1b03e:	9c cf       	rjmp	.-200    	; 0x1af78 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b040:	c4 01       	movw	r24, r8
   1b042:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
   1b046:	c7 01       	movw	r24, r14
   1b048:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b04c:	ed b7       	in	r30, 0x3d	; 61
   1b04e:	fe b7       	in	r31, 0x3e	; 62
   1b050:	44 82       	std	Z+4, r4	; 0x04
   1b052:	55 82       	std	Z+5, r5	; 0x05
   1b054:	66 82       	std	Z+6, r6	; 0x06
   1b056:	77 82       	std	Z+7, r7	; 0x07
   1b058:	89 e5       	ldi	r24, 0x59	; 89
   1b05a:	92 e3       	ldi	r25, 0x32	; 50
   1b05c:	a0 e0       	ldi	r26, 0x00	; 0
   1b05e:	81 83       	std	Z+1, r24	; 0x01
   1b060:	92 83       	std	Z+2, r25	; 0x02
   1b062:	a3 83       	std	Z+3, r26	; 0x03
   1b064:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    return(1);
   1b068:	01 e0       	ldi	r16, 0x01	; 1
   1b06a:	10 e0       	ldi	r17, 0x00	; 0
}
   1b06c:	c8 01       	movw	r24, r16
   1b06e:	cc 5e       	subi	r28, 0xEC	; 236
   1b070:	de 4f       	sbci	r29, 0xFE	; 254
   1b072:	e2 e1       	ldi	r30, 0x12	; 18
   1b074:	0c 94 08 e3 	jmp	0x1c610	; 0x1c610 <__epilogue_restores__>

0001b078 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b078:	2f 92       	push	r2
   1b07a:	3f 92       	push	r3
   1b07c:	4f 92       	push	r4
   1b07e:	5f 92       	push	r5
   1b080:	6f 92       	push	r6
   1b082:	8f 92       	push	r8
   1b084:	9f 92       	push	r9
   1b086:	af 92       	push	r10
   1b088:	bf 92       	push	r11
   1b08a:	cf 92       	push	r12
   1b08c:	df 92       	push	r13
   1b08e:	ef 92       	push	r14
   1b090:	ff 92       	push	r15
   1b092:	0f 93       	push	r16
   1b094:	1f 93       	push	r17
   1b096:	cf 93       	push	r28
   1b098:	df 93       	push	r29
   1b09a:	cd b7       	in	r28, 0x3d	; 61
   1b09c:	de b7       	in	r29, 0x3e	; 62
   1b09e:	cd 51       	subi	r28, 0x1D	; 29
   1b0a0:	d1 40       	sbci	r29, 0x01	; 1
   1b0a2:	0f b6       	in	r0, 0x3f	; 63
   1b0a4:	f8 94       	cli
   1b0a6:	de bf       	out	0x3e, r29	; 62
   1b0a8:	0f be       	out	0x3f, r0	; 63
   1b0aa:	cd bf       	out	0x3d, r28	; 61
   1b0ac:	5c 01       	movw	r10, r24
   1b0ae:	7b 01       	movw	r14, r22
   1b0b0:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b0b2:	dc 01       	movw	r26, r24
   1b0b4:	8c 91       	ld	r24, X
   1b0b6:	81 11       	cpse	r24, r1
   1b0b8:	03 c0       	rjmp	.+6      	; 0x1b0c0 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b0ba:	89 e3       	ldi	r24, 0x39	; 57
   1b0bc:	92 e3       	ldi	r25, 0x32	; 50
   1b0be:	06 c0       	rjmp	.+12     	; 0x1b0cc <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b0c0:	db 01       	movw	r26, r22
   1b0c2:	8c 91       	ld	r24, X
   1b0c4:	81 11       	cpse	r24, r1
   1b0c6:	0b c0       	rjmp	.+22     	; 0x1b0de <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b0c8:	8e e1       	ldi	r24, 0x1E	; 30
   1b0ca:	92 e3       	ldi	r25, 0x32	; 50
   1b0cc:	a0 e0       	ldi	r26, 0x00	; 0
   1b0ce:	ed b7       	in	r30, 0x3d	; 61
   1b0d0:	fe b7       	in	r31, 0x3e	; 62
   1b0d2:	81 83       	std	Z+1, r24	; 0x01
   1b0d4:	92 83       	std	Z+2, r25	; 0x02
   1b0d6:	a3 83       	std	Z+3, r26	; 0x03
   1b0d8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1b0dc:	25 c1       	rjmp	.+586    	; 0x1b328 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b0de:	da 01       	movw	r26, r20
   1b0e0:	8c 91       	ld	r24, X
   1b0e2:	81 11       	cpse	r24, r1
   1b0e4:	03 c0       	rjmp	.+6      	; 0x1b0ec <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b0e6:	82 e0       	ldi	r24, 0x02	; 2
   1b0e8:	92 e3       	ldi	r25, 0x32	; 50
   1b0ea:	f0 cf       	rjmp	.-32     	; 0x1b0cc <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b0ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b0f0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b0f4:	92 ff       	sbrs	r25, 2
   1b0f6:	10 c0       	rjmp	.+32     	; 0x1b118 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b0f8:	ed b7       	in	r30, 0x3d	; 61
   1b0fa:	fe b7       	in	r31, 0x3e	; 62
   1b0fc:	51 87       	std	Z+9, r21	; 0x09
   1b0fe:	40 87       	std	Z+8, r20	; 0x08
   1b100:	77 83       	std	Z+7, r23	; 0x07
   1b102:	66 83       	std	Z+6, r22	; 0x06
   1b104:	b5 82       	std	Z+5, r11	; 0x05
   1b106:	a4 82       	std	Z+4, r10	; 0x04
   1b108:	83 ed       	ldi	r24, 0xD3	; 211
   1b10a:	91 e3       	ldi	r25, 0x31	; 49
   1b10c:	a0 e0       	ldi	r26, 0x00	; 0
   1b10e:	81 83       	std	Z+1, r24	; 0x01
   1b110:	92 83       	std	Z+2, r25	; 0x02
   1b112:	a3 83       	std	Z+3, r26	; 0x03
   1b114:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b118:	68 e0       	ldi	r22, 0x08	; 8
   1b11a:	79 e0       	ldi	r23, 0x09	; 9
   1b11c:	c4 01       	movw	r24, r8
   1b11e:	0e 94 c3 cd 	call	0x19b86	; 0x19b86 <lif_open_volume>
   1b122:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b124:	00 97       	sbiw	r24, 0x00	; 0
   1b126:	09 f4       	brne	.+2      	; 0x1b12a <lif_add_lif_file+0xb2>
   1b128:	ff c0       	rjmp	.+510    	; 0x1b328 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b12a:	b7 01       	movw	r22, r14
   1b12c:	01 d8       	rcall	.-4094   	; 0x1a130 <lif_find_file>
    if(index == -1)
   1b12e:	01 96       	adiw	r24, 0x01	; 1
   1b130:	a1 f4       	brne	.+40     	; 0x1b15a <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b132:	ed b7       	in	r30, 0x3d	; 61
   1b134:	fe b7       	in	r31, 0x3e	; 62
   1b136:	f5 82       	std	Z+5, r15	; 0x05
   1b138:	e4 82       	std	Z+4, r14	; 0x04
   1b13a:	80 ec       	ldi	r24, 0xC0	; 192
   1b13c:	91 e3       	ldi	r25, 0x31	; 49
   1b13e:	a0 e0       	ldi	r26, 0x00	; 0
   1b140:	81 83       	std	Z+1, r24	; 0x01
   1b142:	92 83       	std	Z+2, r25	; 0x02
   1b144:	a3 83       	std	Z+3, r26	; 0x03
   1b146:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b14a:	c6 01       	movw	r24, r12
   1b14c:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b150:	60 e0       	ldi	r22, 0x00	; 0
   1b152:	70 e0       	ldi	r23, 0x00	; 0
   1b154:	80 e0       	ldi	r24, 0x00	; 0
   1b156:	90 e0       	ldi	r25, 0x00	; 0
   1b158:	ff c0       	rjmp	.+510    	; 0x1b358 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b15a:	68 e0       	ldi	r22, 0x08	; 8
   1b15c:	79 e0       	ldi	r23, 0x09	; 9
   1b15e:	c5 01       	movw	r24, r10
   1b160:	0e 94 c3 cd 	call	0x19b86	; 0x19b86 <lif_open_volume>
   1b164:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b166:	00 97       	sbiw	r24, 0x00	; 0
   1b168:	09 f4       	brne	.+2      	; 0x1b16c <lif_add_lif_file+0xf4>
   1b16a:	de c0       	rjmp	.+444    	; 0x1b328 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b16c:	f6 01       	movw	r30, r12
   1b16e:	e0 5a       	subi	r30, 0xA0	; 160
   1b170:	ff 4f       	sbci	r31, 0xFF	; 255
   1b172:	40 81       	ld	r20, Z
   1b174:	51 81       	ldd	r21, Z+1	; 0x01
   1b176:	62 81       	ldd	r22, Z+2	; 0x02
   1b178:	73 81       	ldd	r23, Z+3	; 0x03
   1b17a:	0e 94 63 cc 	call	0x198c6	; 0x198c6 <lif_newdir>
   1b17e:	ca 5e       	subi	r28, 0xEA	; 234
   1b180:	de 4f       	sbci	r29, 0xFE	; 254
   1b182:	99 83       	std	Y+1, r25	; 0x01
   1b184:	88 83       	st	Y, r24
   1b186:	c6 51       	subi	r28, 0x16	; 22
   1b188:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b18a:	01 96       	adiw	r24, 0x01	; 1
   1b18c:	79 f4       	brne	.+30     	; 0x1b1ac <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b18e:	ed b7       	in	r30, 0x3d	; 61
   1b190:	fe b7       	in	r31, 0x3e	; 62
   1b192:	97 82       	std	Z+7, r9	; 0x07
   1b194:	86 82       	std	Z+6, r8	; 0x06
   1b196:	b5 82       	std	Z+5, r11	; 0x05
   1b198:	a4 82       	std	Z+4, r10	; 0x04
   1b19a:	80 e9       	ldi	r24, 0x90	; 144
   1b19c:	91 e3       	ldi	r25, 0x31	; 49
   1b19e:	a0 e0       	ldi	r26, 0x00	; 0
   1b1a0:	81 83       	std	Z+1, r24	; 0x01
   1b1a2:	92 83       	std	Z+2, r25	; 0x02
   1b1a4:	a3 83       	std	Z+3, r26	; 0x03
   1b1a6:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1b1aa:	a8 c0       	rjmp	.+336    	; 0x1b2fc <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b1ac:	c7 01       	movw	r24, r14
   1b1ae:	84 5a       	subi	r24, 0xA4	; 164
   1b1b0:	9f 4f       	sbci	r25, 0xFF	; 255
   1b1b2:	dc 01       	movw	r26, r24
   1b1b4:	4d 91       	ld	r20, X+
   1b1b6:	5d 91       	ld	r21, X+
   1b1b8:	6d 91       	ld	r22, X+
   1b1ba:	7c 91       	ld	r23, X
   1b1bc:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b1be:	21 e2       	ldi	r18, 0x21	; 33
   1b1c0:	f6 01       	movw	r30, r12
   1b1c2:	e1 5b       	subi	r30, 0xB1	; 177
   1b1c4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1c6:	1d 97       	sbiw	r26, 0x0d	; 13
   1b1c8:	01 90       	ld	r0, Z+
   1b1ca:	0d 92       	st	X+, r0
   1b1cc:	2a 95       	dec	r18
   1b1ce:	e1 f7       	brne	.-8      	; 0x1b1c8 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b1d0:	fc 01       	movw	r30, r24
   1b1d2:	40 83       	st	Z, r20
   1b1d4:	51 83       	std	Z+1, r21	; 0x01
   1b1d6:	62 83       	std	Z+2, r22	; 0x02
   1b1d8:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b1da:	b6 2f       	mov	r27, r22
   1b1dc:	a5 2f       	mov	r26, r21
   1b1de:	94 2f       	mov	r25, r20
   1b1e0:	88 27       	eor	r24, r24
   1b1e2:	c2 5f       	subi	r28, 0xF2	; 242
   1b1e4:	de 4f       	sbci	r29, 0xFE	; 254
   1b1e6:	88 83       	st	Y, r24
   1b1e8:	99 83       	std	Y+1, r25	; 0x01
   1b1ea:	aa 83       	std	Y+2, r26	; 0x02
   1b1ec:	bb 83       	std	Y+3, r27	; 0x03
   1b1ee:	ce 50       	subi	r28, 0x0E	; 14
   1b1f0:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b1f2:	f6 01       	movw	r30, r12
   1b1f4:	e4 5a       	subi	r30, 0xA4	; 164
   1b1f6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1f8:	80 81       	ld	r24, Z
   1b1fa:	91 81       	ldd	r25, Z+1	; 0x01
   1b1fc:	a2 81       	ldd	r26, Z+2	; 0x02
   1b1fe:	b3 81       	ldd	r27, Z+3	; 0x03
   1b200:	22 27       	eor	r18, r18
   1b202:	38 2f       	mov	r19, r24
   1b204:	49 2f       	mov	r20, r25
   1b206:	5a 2f       	mov	r21, r26
   1b208:	ce 5e       	subi	r28, 0xEE	; 238
   1b20a:	de 4f       	sbci	r29, 0xFE	; 254
   1b20c:	28 83       	st	Y, r18
   1b20e:	39 83       	std	Y+1, r19	; 0x01
   1b210:	4a 83       	std	Y+2, r20	; 0x02
   1b212:	5b 83       	std	Y+3, r21	; 0x03
   1b214:	c2 51       	subi	r28, 0x12	; 18
   1b216:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b218:	21 2c       	mov	r2, r1
   1b21a:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b21c:	81 2c       	mov	r8, r1
   1b21e:	91 2c       	mov	r9, r1
   1b220:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b222:	a7 01       	movw	r20, r14
   1b224:	40 5a       	subi	r20, 0xA0	; 160
   1b226:	5f 4f       	sbci	r21, 0xFF	; 255
   1b228:	c4 5e       	subi	r28, 0xE4	; 228
   1b22a:	de 4f       	sbci	r29, 0xFE	; 254
   1b22c:	59 83       	std	Y+1, r21	; 0x01
   1b22e:	48 83       	st	Y, r20
   1b230:	cc 51       	subi	r28, 0x1C	; 28
   1b232:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b234:	82 e8       	ldi	r24, 0x82	; 130
   1b236:	91 e3       	ldi	r25, 0x31	; 49
   1b238:	2c 01       	movw	r4, r24
   1b23a:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b23c:	27 c0       	rjmp	.+78     	; 0x1b28c <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b23e:	00 e0       	ldi	r16, 0x00	; 0
   1b240:	11 e0       	ldi	r17, 0x01	; 1
   1b242:	c8 5e       	subi	r28, 0xE8	; 232
   1b244:	de 4f       	sbci	r29, 0xFE	; 254
   1b246:	28 81       	ld	r18, Y
   1b248:	39 81       	ldd	r19, Y+1	; 0x01
   1b24a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b24c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b24e:	c8 51       	subi	r28, 0x18	; 24
   1b250:	d1 40       	sbci	r29, 0x01	; 1
   1b252:	be 01       	movw	r22, r28
   1b254:	66 5f       	subi	r22, 0xF6	; 246
   1b256:	7f 4f       	sbci	r23, 0xFF	; 255
   1b258:	c7 01       	movw	r24, r14
   1b25a:	0e 94 8d be 	call	0x17d1a	; 0x17d1a <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b25e:	8f 3f       	cpi	r24, 0xFF	; 255
   1b260:	91 05       	cpc	r25, r1
   1b262:	09 f0       	breq	.+2      	; 0x1b266 <lif_add_lif_file+0x1ee>
   1b264:	0c f4       	brge	.+2      	; 0x1b268 <lif_add_lif_file+0x1f0>
   1b266:	4a c0       	rjmp	.+148    	; 0x1b2fc <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b268:	5f ef       	ldi	r21, 0xFF	; 255
   1b26a:	95 1a       	sub	r9, r21
   1b26c:	a5 0a       	sbc	r10, r21
   1b26e:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b270:	ed b7       	in	r30, 0x3d	; 61
   1b272:	fe b7       	in	r31, 0x3e	; 62
   1b274:	84 82       	std	Z+4, r8	; 0x04
   1b276:	95 82       	std	Z+5, r9	; 0x05
   1b278:	a6 82       	std	Z+6, r10	; 0x06
   1b27a:	b7 82       	std	Z+7, r11	; 0x07
   1b27c:	41 82       	std	Z+1, r4	; 0x01
   1b27e:	52 82       	std	Z+2, r5	; 0x02
   1b280:	63 82       	std	Z+3, r6	; 0x03
   1b282:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b286:	ff ef       	ldi	r31, 0xFF	; 255
   1b288:	2f 1a       	sub	r2, r31
   1b28a:	3f 0a       	sbc	r3, r31
   1b28c:	ce 5e       	subi	r28, 0xEE	; 238
   1b28e:	de 4f       	sbci	r29, 0xFE	; 254
   1b290:	28 81       	ld	r18, Y
   1b292:	39 81       	ldd	r19, Y+1	; 0x01
   1b294:	4a 81       	ldd	r20, Y+2	; 0x02
   1b296:	5b 81       	ldd	r21, Y+3	; 0x03
   1b298:	c2 51       	subi	r28, 0x12	; 18
   1b29a:	d1 40       	sbci	r29, 0x01	; 1
   1b29c:	28 0d       	add	r18, r8
   1b29e:	39 1d       	adc	r19, r9
   1b2a0:	4a 1d       	adc	r20, r10
   1b2a2:	5b 1d       	adc	r21, r11
   1b2a4:	c2 5f       	subi	r28, 0xF2	; 242
   1b2a6:	de 4f       	sbci	r29, 0xFE	; 254
   1b2a8:	88 81       	ld	r24, Y
   1b2aa:	99 81       	ldd	r25, Y+1	; 0x01
   1b2ac:	aa 81       	ldd	r26, Y+2	; 0x02
   1b2ae:	bb 81       	ldd	r27, Y+3	; 0x03
   1b2b0:	ce 50       	subi	r28, 0x0E	; 14
   1b2b2:	d1 40       	sbci	r29, 0x01	; 1
   1b2b4:	88 0d       	add	r24, r8
   1b2b6:	99 1d       	adc	r25, r9
   1b2b8:	aa 1d       	adc	r26, r10
   1b2ba:	bb 1d       	adc	r27, r11
   1b2bc:	c8 5e       	subi	r28, 0xE8	; 232
   1b2be:	de 4f       	sbci	r29, 0xFE	; 254
   1b2c0:	88 83       	st	Y, r24
   1b2c2:	99 83       	std	Y+1, r25	; 0x01
   1b2c4:	aa 83       	std	Y+2, r26	; 0x02
   1b2c6:	bb 83       	std	Y+3, r27	; 0x03
   1b2c8:	c8 51       	subi	r28, 0x18	; 24
   1b2ca:	d1 40       	sbci	r29, 0x01	; 1
   1b2cc:	c4 5e       	subi	r28, 0xE4	; 228
   1b2ce:	de 4f       	sbci	r29, 0xFE	; 254
   1b2d0:	a8 81       	ld	r26, Y
   1b2d2:	b9 81       	ldd	r27, Y+1	; 0x01
   1b2d4:	cc 51       	subi	r28, 0x1C	; 28
   1b2d6:	d1 40       	sbci	r29, 0x01	; 1
   1b2d8:	8d 91       	ld	r24, X+
   1b2da:	9c 91       	ld	r25, X
   1b2dc:	28 16       	cp	r2, r24
   1b2de:	39 06       	cpc	r3, r25
   1b2e0:	94 f4       	brge	.+36     	; 0x1b306 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b2e2:	00 e0       	ldi	r16, 0x00	; 0
   1b2e4:	11 e0       	ldi	r17, 0x01	; 1
   1b2e6:	be 01       	movw	r22, r28
   1b2e8:	66 5f       	subi	r22, 0xF6	; 246
   1b2ea:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2ec:	c6 01       	movw	r24, r12
   1b2ee:	0e 94 3a be 	call	0x17c74	; 0x17c74 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b2f2:	6f 3f       	cpi	r22, 0xFF	; 255
   1b2f4:	71 05       	cpc	r23, r1
   1b2f6:	11 f0       	breq	.+4      	; 0x1b2fc <lif_add_lif_file+0x284>
   1b2f8:	0c f0       	brlt	.+2      	; 0x1b2fc <lif_add_lif_file+0x284>
   1b2fa:	a1 cf       	rjmp	.-190    	; 0x1b23e <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2fc:	c7 01       	movw	r24, r14
   1b2fe:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
   1b302:	c6 01       	movw	r24, r12
   1b304:	0f c0       	rjmp	.+30     	; 0x1b324 <lif_add_lif_file+0x2ac>
   1b306:	c6 01       	movw	r24, r12
   1b308:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b30c:	ca 5e       	subi	r28, 0xEA	; 234
   1b30e:	de 4f       	sbci	r29, 0xFE	; 254
   1b310:	68 81       	ld	r22, Y
   1b312:	79 81       	ldd	r23, Y+1	; 0x01
   1b314:	c6 51       	subi	r28, 0x16	; 22
   1b316:	d1 40       	sbci	r29, 0x01	; 1
   1b318:	c7 01       	movw	r24, r14
   1b31a:	0e 94 fb c7 	call	0x18ff6	; 0x18ff6 <lif_writedirindex>
   1b31e:	89 2b       	or	r24, r25
   1b320:	41 f4       	brne	.+16     	; 0x1b332 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b322:	c7 01       	movw	r24, r14
   1b324:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b328:	6f ef       	ldi	r22, 0xFF	; 255
   1b32a:	7f ef       	ldi	r23, 0xFF	; 255
   1b32c:	8f ef       	ldi	r24, 0xFF	; 255
   1b32e:	9f ef       	ldi	r25, 0xFF	; 255
   1b330:	13 c0       	rjmp	.+38     	; 0x1b358 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b332:	c7 01       	movw	r24, r14
   1b334:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b338:	ed b7       	in	r30, 0x3d	; 61
   1b33a:	fe b7       	in	r31, 0x3e	; 62
   1b33c:	84 82       	std	Z+4, r8	; 0x04
   1b33e:	95 82       	std	Z+5, r9	; 0x05
   1b340:	a6 82       	std	Z+6, r10	; 0x06
   1b342:	b7 82       	std	Z+7, r11	; 0x07
   1b344:	84 e7       	ldi	r24, 0x74	; 116
   1b346:	91 e3       	ldi	r25, 0x31	; 49
   1b348:	a0 e0       	ldi	r26, 0x00	; 0
   1b34a:	81 83       	std	Z+1, r24	; 0x01
   1b34c:	92 83       	std	Z+2, r25	; 0x02
   1b34e:	a3 83       	std	Z+3, r26	; 0x03
   1b350:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    return(bytes);
   1b354:	b4 01       	movw	r22, r8
   1b356:	c5 01       	movw	r24, r10
}
   1b358:	c3 5e       	subi	r28, 0xE3	; 227
   1b35a:	de 4f       	sbci	r29, 0xFE	; 254
   1b35c:	0f b6       	in	r0, 0x3f	; 63
   1b35e:	f8 94       	cli
   1b360:	de bf       	out	0x3e, r29	; 62
   1b362:	0f be       	out	0x3f, r0	; 63
   1b364:	cd bf       	out	0x3d, r28	; 61
   1b366:	df 91       	pop	r29
   1b368:	cf 91       	pop	r28
   1b36a:	1f 91       	pop	r17
   1b36c:	0f 91       	pop	r16
   1b36e:	ff 90       	pop	r15
   1b370:	ef 90       	pop	r14
   1b372:	df 90       	pop	r13
   1b374:	cf 90       	pop	r12
   1b376:	bf 90       	pop	r11
   1b378:	af 90       	pop	r10
   1b37a:	9f 90       	pop	r9
   1b37c:	8f 90       	pop	r8
   1b37e:	6f 90       	pop	r6
   1b380:	5f 90       	pop	r5
   1b382:	4f 90       	pop	r4
   1b384:	3f 90       	pop	r3
   1b386:	2f 90       	pop	r2
   1b388:	08 95       	ret

0001b38a <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b38a:	ef 92       	push	r14
   1b38c:	ff 92       	push	r15
   1b38e:	0f 93       	push	r16
   1b390:	1f 93       	push	r17
   1b392:	cf 93       	push	r28
   1b394:	df 93       	push	r29
   1b396:	ad b7       	in	r26, 0x3d	; 61
   1b398:	be b7       	in	r27, 0x3e	; 62
   1b39a:	17 97       	sbiw	r26, 0x07	; 7
   1b39c:	0f b6       	in	r0, 0x3f	; 63
   1b39e:	f8 94       	cli
   1b3a0:	be bf       	out	0x3e, r27	; 62
   1b3a2:	0f be       	out	0x3f, r0	; 63
   1b3a4:	ad bf       	out	0x3d, r26	; 61
   1b3a6:	7c 01       	movw	r14, r24
   1b3a8:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b3aa:	fc 01       	movw	r30, r24
   1b3ac:	80 81       	ld	r24, Z
   1b3ae:	81 11       	cpse	r24, r1
   1b3b0:	03 c0       	rjmp	.+6      	; 0x1b3b8 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b3b2:	8f e4       	ldi	r24, 0x4F	; 79
   1b3b4:	91 e3       	ldi	r25, 0x31	; 49
   1b3b6:	06 c0       	rjmp	.+12     	; 0x1b3c4 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b3b8:	fb 01       	movw	r30, r22
   1b3ba:	80 81       	ld	r24, Z
   1b3bc:	81 11       	cpse	r24, r1
   1b3be:	0b c0       	rjmp	.+22     	; 0x1b3d6 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b3c0:	8f e2       	ldi	r24, 0x2F	; 47
   1b3c2:	91 e3       	ldi	r25, 0x31	; 49
   1b3c4:	a0 e0       	ldi	r26, 0x00	; 0
   1b3c6:	ed b7       	in	r30, 0x3d	; 61
   1b3c8:	fe b7       	in	r31, 0x3e	; 62
   1b3ca:	81 83       	std	Z+1, r24	; 0x01
   1b3cc:	92 83       	std	Z+2, r25	; 0x02
   1b3ce:	a3 83       	std	Z+3, r26	; 0x03
   1b3d0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1b3d4:	68 c0       	rjmp	.+208    	; 0x1b4a6 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b3d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b3da:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b3de:	92 ff       	sbrs	r25, 2
   1b3e0:	0e c0       	rjmp	.+28     	; 0x1b3fe <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b3e2:	ed b7       	in	r30, 0x3d	; 61
   1b3e4:	fe b7       	in	r31, 0x3e	; 62
   1b3e6:	77 83       	std	Z+7, r23	; 0x07
   1b3e8:	66 83       	std	Z+6, r22	; 0x06
   1b3ea:	f5 82       	std	Z+5, r15	; 0x05
   1b3ec:	e4 82       	std	Z+4, r14	; 0x04
   1b3ee:	80 e1       	ldi	r24, 0x10	; 16
   1b3f0:	91 e3       	ldi	r25, 0x31	; 49
   1b3f2:	a0 e0       	ldi	r26, 0x00	; 0
   1b3f4:	81 83       	std	Z+1, r24	; 0x01
   1b3f6:	92 83       	std	Z+2, r25	; 0x02
   1b3f8:	a3 83       	std	Z+3, r26	; 0x03
   1b3fa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b3fe:	68 e0       	ldi	r22, 0x08	; 8
   1b400:	79 e0       	ldi	r23, 0x09	; 9
   1b402:	c7 01       	movw	r24, r14
   1b404:	0e 94 c3 cd 	call	0x19b86	; 0x19b86 <lif_open_volume>
   1b408:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b40a:	00 97       	sbiw	r24, 0x00	; 0
   1b40c:	09 f4       	brne	.+2      	; 0x1b410 <lif_del_file+0x86>
   1b40e:	4b c0       	rjmp	.+150    	; 0x1b4a6 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b410:	b8 01       	movw	r22, r16
   1b412:	0e 94 98 d0 	call	0x1a130	; 0x1a130 <lif_find_file>
    if(index == -1)
   1b416:	8f 3f       	cpi	r24, 0xFF	; 255
   1b418:	ff ef       	ldi	r31, 0xFF	; 255
   1b41a:	9f 07       	cpc	r25, r31
   1b41c:	a1 f4       	brne	.+40     	; 0x1b446 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b41e:	ce 01       	movw	r24, r28
   1b420:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b424:	ed b7       	in	r30, 0x3d	; 61
   1b426:	fe b7       	in	r31, 0x3e	; 62
   1b428:	17 83       	std	Z+7, r17	; 0x07
   1b42a:	06 83       	std	Z+6, r16	; 0x06
   1b42c:	f5 82       	std	Z+5, r15	; 0x05
   1b42e:	e4 82       	std	Z+4, r14	; 0x04
   1b430:	88 ee       	ldi	r24, 0xE8	; 232
   1b432:	90 e3       	ldi	r25, 0x30	; 48
   1b434:	a0 e0       	ldi	r26, 0x00	; 0
   1b436:	81 83       	std	Z+1, r24	; 0x01
   1b438:	92 83       	std	Z+2, r25	; 0x02
   1b43a:	a3 83       	std	Z+3, r26	; 0x03
   1b43c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        return(0);
   1b440:	80 e0       	ldi	r24, 0x00	; 0
   1b442:	90 e0       	ldi	r25, 0x00	; 0
   1b444:	32 c0       	rjmp	.+100    	; 0x1b4aa <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b446:	2a a1       	ldd	r18, Y+34	; 0x22
   1b448:	3b a1       	ldd	r19, Y+35	; 0x23
   1b44a:	21 50       	subi	r18, 0x01	; 1
   1b44c:	31 09       	sbc	r19, r1
   1b44e:	fe 01       	movw	r30, r28
   1b450:	e6 5a       	subi	r30, 0xA6	; 166
   1b452:	ff 4f       	sbci	r31, 0xFF	; 255
   1b454:	82 17       	cp	r24, r18
   1b456:	93 07       	cpc	r25, r19
   1b458:	2c f0       	brlt	.+10     	; 0x1b464 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b45a:	2f ef       	ldi	r18, 0xFF	; 255
   1b45c:	3f ef       	ldi	r19, 0xFF	; 255
   1b45e:	31 83       	std	Z+1, r19	; 0x01
   1b460:	20 83       	st	Z, r18
   1b462:	02 c0       	rjmp	.+4      	; 0x1b468 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b464:	11 82       	std	Z+1, r1	; 0x01
   1b466:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b468:	bc 01       	movw	r22, r24
   1b46a:	ce 01       	movw	r24, r28
   1b46c:	0e 94 fb c7 	call	0x18ff6	; 0x18ff6 <lif_writedirindex>
   1b470:	89 2b       	or	r24, r25
   1b472:	21 f4       	brne	.+8      	; 0x1b47c <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b474:	ce 01       	movw	r24, r28
   1b476:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
   1b47a:	15 c0       	rjmp	.+42     	; 0x1b4a6 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b47c:	ce 01       	movw	r24, r28
   1b47e:	0e 94 6f c8 	call	0x190de	; 0x190de <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b482:	ce 01       	movw	r24, r28
   1b484:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b488:	ed b7       	in	r30, 0x3d	; 61
   1b48a:	fe b7       	in	r31, 0x3e	; 62
   1b48c:	15 83       	std	Z+5, r17	; 0x05
   1b48e:	04 83       	std	Z+4, r16	; 0x04
   1b490:	89 ed       	ldi	r24, 0xD9	; 217
   1b492:	90 e3       	ldi	r25, 0x30	; 48
   1b494:	a0 e0       	ldi	r26, 0x00	; 0
   1b496:	81 83       	std	Z+1, r24	; 0x01
   1b498:	92 83       	std	Z+2, r25	; 0x02
   1b49a:	a3 83       	std	Z+3, r26	; 0x03
   1b49c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    return(1);
   1b4a0:	81 e0       	ldi	r24, 0x01	; 1
   1b4a2:	90 e0       	ldi	r25, 0x00	; 0
   1b4a4:	02 c0       	rjmp	.+4      	; 0x1b4aa <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b4a6:	8f ef       	ldi	r24, 0xFF	; 255
   1b4a8:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b4aa:	cd b7       	in	r28, 0x3d	; 61
   1b4ac:	de b7       	in	r29, 0x3e	; 62
   1b4ae:	27 96       	adiw	r28, 0x07	; 7
   1b4b0:	e6 e0       	ldi	r30, 0x06	; 6
   1b4b2:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x18>

0001b4b6 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b4b6:	a7 e0       	ldi	r26, 0x07	; 7
   1b4b8:	b0 e0       	ldi	r27, 0x00	; 0
   1b4ba:	e1 e6       	ldi	r30, 0x61	; 97
   1b4bc:	fa ed       	ldi	r31, 0xDA	; 218
   1b4be:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0x10>
   1b4c2:	6c 01       	movw	r12, r24
   1b4c4:	8b 01       	movw	r16, r22
   1b4c6:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b4c8:	fc 01       	movw	r30, r24
   1b4ca:	80 81       	ld	r24, Z
   1b4cc:	81 11       	cpse	r24, r1
   1b4ce:	03 c0       	rjmp	.+6      	; 0x1b4d6 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b4d0:	81 eb       	ldi	r24, 0xB1	; 177
   1b4d2:	90 e3       	ldi	r25, 0x30	; 48
   1b4d4:	06 c0       	rjmp	.+12     	; 0x1b4e2 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1b4d6:	fb 01       	movw	r30, r22
   1b4d8:	80 81       	ld	r24, Z
   1b4da:	81 11       	cpse	r24, r1
   1b4dc:	0b c0       	rjmp	.+22     	; 0x1b4f4 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b4de:	8a e8       	ldi	r24, 0x8A	; 138
   1b4e0:	90 e3       	ldi	r25, 0x30	; 48
   1b4e2:	a0 e0       	ldi	r26, 0x00	; 0
   1b4e4:	ed b7       	in	r30, 0x3d	; 61
   1b4e6:	fe b7       	in	r31, 0x3e	; 62
   1b4e8:	81 83       	std	Z+1, r24	; 0x01
   1b4ea:	92 83       	std	Z+2, r25	; 0x02
   1b4ec:	a3 83       	std	Z+3, r26	; 0x03
   1b4ee:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1b4f2:	58 c0       	rjmp	.+176    	; 0x1b5a4 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1b4f4:	fa 01       	movw	r30, r20
   1b4f6:	80 81       	ld	r24, Z
   1b4f8:	81 11       	cpse	r24, r1
   1b4fa:	03 c0       	rjmp	.+6      	; 0x1b502 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b4fc:	83 e6       	ldi	r24, 0x63	; 99
   1b4fe:	90 e3       	ldi	r25, 0x30	; 48
   1b500:	f0 cf       	rjmp	.-32     	; 0x1b4e2 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b502:	ca 01       	movw	r24, r20
   1b504:	0e 94 55 bf 	call	0x17eaa	; 0x17eaa <lif_checkname>
   1b508:	89 2b       	or	r24, r25
   1b50a:	19 f4       	brne	.+6      	; 0x1b512 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b50c:	8d e2       	ldi	r24, 0x2D	; 45
   1b50e:	90 e3       	ldi	r25, 0x30	; 48
   1b510:	e8 cf       	rjmp	.-48     	; 0x1b4e2 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b512:	68 e0       	ldi	r22, 0x08	; 8
   1b514:	79 e0       	ldi	r23, 0x09	; 9
   1b516:	c6 01       	movw	r24, r12
   1b518:	0e 94 c3 cd 	call	0x19b86	; 0x19b86 <lif_open_volume>
   1b51c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b51e:	00 97       	sbiw	r24, 0x00	; 0
   1b520:	09 f4       	brne	.+2      	; 0x1b524 <lif_rename_file+0x6e>
   1b522:	40 c0       	rjmp	.+128    	; 0x1b5a4 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b524:	b8 01       	movw	r22, r16
   1b526:	0e 94 98 d0 	call	0x1a130	; 0x1a130 <lif_find_file>
   1b52a:	5c 01       	movw	r10, r24
    if(index == -1)
   1b52c:	01 96       	adiw	r24, 0x01	; 1
   1b52e:	a1 f4       	brne	.+40     	; 0x1b558 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b530:	ed b7       	in	r30, 0x3d	; 61
   1b532:	fe b7       	in	r31, 0x3e	; 62
   1b534:	17 83       	std	Z+7, r17	; 0x07
   1b536:	06 83       	std	Z+6, r16	; 0x06
   1b538:	d5 82       	std	Z+5, r13	; 0x05
   1b53a:	c4 82       	std	Z+4, r12	; 0x04
   1b53c:	84 e0       	ldi	r24, 0x04	; 4
   1b53e:	90 e3       	ldi	r25, 0x30	; 48
   1b540:	a0 e0       	ldi	r26, 0x00	; 0
   1b542:	81 83       	std	Z+1, r24	; 0x01
   1b544:	92 83       	std	Z+2, r25	; 0x02
   1b546:	a3 83       	std	Z+3, r26	; 0x03
   1b548:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b54c:	ce 01       	movw	r24, r28
   1b54e:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b552:	80 e0       	ldi	r24, 0x00	; 0
   1b554:	90 e0       	ldi	r25, 0x00	; 0
   1b556:	28 c0       	rjmp	.+80     	; 0x1b5a8 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b558:	4a e0       	ldi	r20, 0x0A	; 10
   1b55a:	50 e0       	ldi	r21, 0x00	; 0
   1b55c:	b7 01       	movw	r22, r14
   1b55e:	ce 01       	movw	r24, r28
   1b560:	81 5b       	subi	r24, 0xB1	; 177
   1b562:	9f 4f       	sbci	r25, 0xFF	; 255
   1b564:	0e 94 8f bf 	call	0x17f1e	; 0x17f1e <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b568:	b5 01       	movw	r22, r10
   1b56a:	ce 01       	movw	r24, r28
   1b56c:	0e 94 fb c7 	call	0x18ff6	; 0x18ff6 <lif_writedirindex>
   1b570:	89 2b       	or	r24, r25
   1b572:	21 f4       	brne	.+8      	; 0x1b57c <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b574:	ce 01       	movw	r24, r28
   1b576:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
   1b57a:	14 c0       	rjmp	.+40     	; 0x1b5a4 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b57c:	ed b7       	in	r30, 0x3d	; 61
   1b57e:	fe b7       	in	r31, 0x3e	; 62
   1b580:	f7 82       	std	Z+7, r15	; 0x07
   1b582:	e6 82       	std	Z+6, r14	; 0x06
   1b584:	15 83       	std	Z+5, r17	; 0x05
   1b586:	04 83       	std	Z+4, r16	; 0x04
   1b588:	8d ee       	ldi	r24, 0xED	; 237
   1b58a:	9f e2       	ldi	r25, 0x2F	; 47
   1b58c:	a0 e0       	ldi	r26, 0x00	; 0
   1b58e:	81 83       	std	Z+1, r24	; 0x01
   1b590:	92 83       	std	Z+2, r25	; 0x02
   1b592:	a3 83       	std	Z+3, r26	; 0x03
   1b594:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b598:	ce 01       	movw	r24, r28
   1b59a:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b59e:	81 e0       	ldi	r24, 0x01	; 1
   1b5a0:	90 e0       	ldi	r25, 0x00	; 0
   1b5a2:	02 c0       	rjmp	.+4      	; 0x1b5a8 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b5a4:	8f ef       	ldi	r24, 0xFF	; 255
   1b5a6:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b5a8:	cd b7       	in	r28, 0x3d	; 61
   1b5aa:	de b7       	in	r29, 0x3e	; 62
   1b5ac:	27 96       	adiw	r28, 0x07	; 7
   1b5ae:	ea e0       	ldi	r30, 0x0A	; 10
   1b5b0:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0x10>

0001b5b4 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b5b4:	4f 92       	push	r4
   1b5b6:	5f 92       	push	r5
   1b5b8:	6f 92       	push	r6
   1b5ba:	7f 92       	push	r7
   1b5bc:	af 92       	push	r10
   1b5be:	bf 92       	push	r11
   1b5c0:	cf 92       	push	r12
   1b5c2:	df 92       	push	r13
   1b5c4:	ef 92       	push	r14
   1b5c6:	ff 92       	push	r15
   1b5c8:	0f 93       	push	r16
   1b5ca:	1f 93       	push	r17
   1b5cc:	cf 93       	push	r28
   1b5ce:	df 93       	push	r29
   1b5d0:	ad b7       	in	r26, 0x3d	; 61
   1b5d2:	be b7       	in	r27, 0x3e	; 62
   1b5d4:	17 97       	sbiw	r26, 0x07	; 7
   1b5d6:	0f b6       	in	r0, 0x3f	; 63
   1b5d8:	f8 94       	cli
   1b5da:	be bf       	out	0x3e, r27	; 62
   1b5dc:	0f be       	out	0x3f, r0	; 63
   1b5de:	ad bf       	out	0x3d, r26	; 61
   1b5e0:	27 01       	movw	r4, r14
   1b5e2:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b5e4:	dc 01       	movw	r26, r24
   1b5e6:	ec 91       	ld	r30, X
   1b5e8:	e1 11       	cpse	r30, r1
   1b5ea:	03 c0       	rjmp	.+6      	; 0x1b5f2 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b5ec:	84 ec       	ldi	r24, 0xC4	; 196
   1b5ee:	9f e2       	ldi	r25, 0x2F	; 47
   1b5f0:	16 c0       	rjmp	.+44     	; 0x1b61e <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b5f2:	db 01       	movw	r26, r22
   1b5f4:	ec 91       	ld	r30, X
   1b5f6:	e1 11       	cpse	r30, r1
   1b5f8:	03 c0       	rjmp	.+6      	; 0x1b600 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b5fa:	8f e9       	ldi	r24, 0x9F	; 159
   1b5fc:	9f e2       	ldi	r25, 0x2F	; 47
   1b5fe:	0f c0       	rjmp	.+30     	; 0x1b61e <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b600:	21 15       	cp	r18, r1
   1b602:	31 05       	cpc	r19, r1
   1b604:	41 05       	cpc	r20, r1
   1b606:	51 05       	cpc	r21, r1
   1b608:	19 f4       	brne	.+6      	; 0x1b610 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b60a:	8c e7       	ldi	r24, 0x7C	; 124
   1b60c:	9f e2       	ldi	r25, 0x2F	; 47
   1b60e:	07 c0       	rjmp	.+14     	; 0x1b61e <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b610:	e1 14       	cp	r14, r1
   1b612:	f1 04       	cpc	r15, r1
   1b614:	01 05       	cpc	r16, r1
   1b616:	11 05       	cpc	r17, r1
   1b618:	59 f4       	brne	.+22     	; 0x1b630 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b61a:	8c e5       	ldi	r24, 0x5C	; 92
   1b61c:	9f e2       	ldi	r25, 0x2F	; 47
   1b61e:	a0 e0       	ldi	r26, 0x00	; 0
   1b620:	ed b7       	in	r30, 0x3d	; 61
   1b622:	fe b7       	in	r31, 0x3e	; 62
   1b624:	81 83       	std	Z+1, r24	; 0x01
   1b626:	92 83       	std	Z+2, r25	; 0x02
   1b628:	a3 83       	std	Z+3, r26	; 0x03
   1b62a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1b62e:	2b c0       	rjmp	.+86     	; 0x1b686 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b630:	67 01       	movw	r12, r14
   1b632:	78 01       	movw	r14, r16
   1b634:	f2 e0       	ldi	r31, 0x02	; 2
   1b636:	cf 1a       	sub	r12, r31
   1b638:	d1 08       	sbc	r13, r1
   1b63a:	e1 08       	sbc	r14, r1
   1b63c:	f1 08       	sbc	r15, r1
   1b63e:	56 01       	movw	r10, r12
   1b640:	67 01       	movw	r12, r14
   1b642:	a2 1a       	sub	r10, r18
   1b644:	b3 0a       	sbc	r11, r19
   1b646:	c4 0a       	sbc	r12, r20
   1b648:	d5 0a       	sbc	r13, r21
   1b64a:	79 01       	movw	r14, r18
   1b64c:	8a 01       	movw	r16, r20
   1b64e:	22 e0       	ldi	r18, 0x02	; 2
   1b650:	30 e0       	ldi	r19, 0x00	; 0
   1b652:	40 e0       	ldi	r20, 0x00	; 0
   1b654:	50 e0       	ldi	r21, 0x00	; 0
   1b656:	0e 94 79 c9 	call	0x192f2	; 0x192f2 <lif_create_volume>
    if(LIF == NULL)
   1b65a:	00 97       	sbiw	r24, 0x00	; 0
   1b65c:	a1 f0       	breq	.+40     	; 0x1b686 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b65e:	0e 94 06 c7 	call	0x18e0c	; 0x18e0c <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b662:	82 01       	movw	r16, r4
   1b664:	d6 2d       	mov	r29, r6
   1b666:	c7 2d       	mov	r28, r7
   1b668:	ed b7       	in	r30, 0x3d	; 61
   1b66a:	fe b7       	in	r31, 0x3e	; 62
   1b66c:	44 82       	std	Z+4, r4	; 0x04
   1b66e:	15 83       	std	Z+5, r17	; 0x05
   1b670:	66 82       	std	Z+6, r6	; 0x06
   1b672:	77 82       	std	Z+7, r7	; 0x07
   1b674:	8c e3       	ldi	r24, 0x3C	; 60
   1b676:	9f e2       	ldi	r25, 0x2F	; 47
   1b678:	a0 e0       	ldi	r26, 0x00	; 0
   1b67a:	81 83       	std	Z+1, r24	; 0x01
   1b67c:	92 83       	std	Z+2, r25	; 0x02
   1b67e:	a3 83       	std	Z+3, r26	; 0x03
   1b680:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    return(end);
   1b684:	04 c0       	rjmp	.+8      	; 0x1b68e <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b686:	0f ef       	ldi	r16, 0xFF	; 255
   1b688:	1f ef       	ldi	r17, 0xFF	; 255
   1b68a:	df ef       	ldi	r29, 0xFF	; 255
   1b68c:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b68e:	b8 01       	movw	r22, r16
   1b690:	8d 2f       	mov	r24, r29
   1b692:	9c 2f       	mov	r25, r28
   1b694:	ad b7       	in	r26, 0x3d	; 61
   1b696:	be b7       	in	r27, 0x3e	; 62
   1b698:	17 96       	adiw	r26, 0x07	; 7
   1b69a:	0f b6       	in	r0, 0x3f	; 63
   1b69c:	f8 94       	cli
   1b69e:	be bf       	out	0x3e, r27	; 62
   1b6a0:	0f be       	out	0x3f, r0	; 63
   1b6a2:	ad bf       	out	0x3d, r26	; 61
   1b6a4:	df 91       	pop	r29
   1b6a6:	cf 91       	pop	r28
   1b6a8:	1f 91       	pop	r17
   1b6aa:	0f 91       	pop	r16
   1b6ac:	ff 90       	pop	r15
   1b6ae:	ef 90       	pop	r14
   1b6b0:	df 90       	pop	r13
   1b6b2:	cf 90       	pop	r12
   1b6b4:	bf 90       	pop	r11
   1b6b6:	af 90       	pop	r10
   1b6b8:	7f 90       	pop	r7
   1b6ba:	6f 90       	pop	r6
   1b6bc:	5f 90       	pop	r5
   1b6be:	4f 90       	pop	r4
   1b6c0:	08 95       	ret

0001b6c2 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b6c2:	a5 e0       	ldi	r26, 0x05	; 5
   1b6c4:	b0 e0       	ldi	r27, 0x00	; 0
   1b6c6:	e6 e6       	ldi	r30, 0x66	; 102
   1b6c8:	fb ed       	ldi	r31, 0xDB	; 219
   1b6ca:	8c c7       	rjmp	.+3864   	; 0x1c5e4 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b6cc:	82 30       	cpi	r24, 0x02	; 2
   1b6ce:	91 05       	cpc	r25, r1
   1b6d0:	1c f4       	brge	.+6      	; 0x1b6d8 <lif_tests+0x16>
        return (0);
   1b6d2:	80 e0       	ldi	r24, 0x00	; 0
   1b6d4:	90 e0       	ldi	r25, 0x00	; 0
   1b6d6:	70 c1       	rjmp	.+736    	; 0x1b9b8 <lif_tests+0x2f6>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b6d8:	fb 01       	movw	r30, r22
   1b6da:	e2 80       	ldd	r14, Z+2	; 0x02
   1b6dc:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b6de:	e1 14       	cp	r14, r1
   1b6e0:	f1 04       	cpc	r15, r1
   1b6e2:	09 f4       	brne	.+2      	; 0x1b6e6 <lif_tests+0x24>
   1b6e4:	67 c1       	rjmp	.+718    	; 0x1b9b4 <lif_tests+0x2f2>
   1b6e6:	f7 01       	movw	r30, r14
   1b6e8:	20 81       	ld	r18, Z
   1b6ea:	22 23       	and	r18, r18
   1b6ec:	09 f4       	brne	.+2      	; 0x1b6f0 <lif_tests+0x2e>
   1b6ee:	62 c1       	rjmp	.+708    	; 0x1b9b4 <lif_tests+0x2f2>
   1b6f0:	8b 01       	movw	r16, r22
   1b6f2:	6c 01       	movw	r12, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b6f4:	6d e7       	ldi	r22, 0x7D	; 125
   1b6f6:	76 e1       	ldi	r23, 0x16	; 22
   1b6f8:	c7 01       	movw	r24, r14
   1b6fa:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   1b6fe:	89 2b       	or	r24, r25
   1b700:	71 f0       	breq	.+28     	; 0x1b71e <lif_tests+0x5c>
    {
        if(MATCHI_LEN(argv[0],"lif"))
   1b702:	68 e7       	ldi	r22, 0x78	; 120
   1b704:	76 e1       	ldi	r23, 0x16	; 22
   1b706:	f8 01       	movw	r30, r16
   1b708:	80 81       	ld	r24, Z
   1b70a:	91 81       	ldd	r25, Z+1	; 0x01
   1b70c:	0e 94 df 30 	call	0x61be	; 0x61be <MATCHI_LEN>
   1b710:	89 2b       	or	r24, r25
   1b712:	a1 f0       	breq	.+40     	; 0x1b73c <lif_tests+0x7a>
			lif_help(1);
   1b714:	81 e0       	ldi	r24, 0x01	; 1
   1b716:	90 e0       	ldi	r25, 0x00	; 0
   1b718:	0e 94 2b bd 	call	0x17a56	; 0x17a56 <lif_help>
   1b71c:	0f c0       	rjmp	.+30     	; 0x1b73c <lif_tests+0x7a>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b71e:	6c e7       	ldi	r22, 0x7C	; 124
   1b720:	76 e1       	ldi	r23, 0x16	; 22
   1b722:	c7 01       	movw	r24, r14
   1b724:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   1b728:	89 2b       	or	r24, r25
   1b72a:	59 f7       	brne	.-42     	; 0x1b702 <lif_tests+0x40>
   1b72c:	62 e8       	ldi	r22, 0x82	; 130
   1b72e:	76 e1       	ldi	r23, 0x16	; 22
   1b730:	c7 01       	movw	r24, r14
   1b732:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   1b736:	89 2b       	or	r24, r25
   1b738:	21 f7       	brne	.-56     	; 0x1b702 <lif_tests+0x40>
   1b73a:	0b c0       	rjmp	.+22     	; 0x1b752 <lif_tests+0x90>
			lif_help(1);
#ifdef TELEDISK
        if(MATCHI_LEN(argv[0],"td02lif"))
			td0_help(1);
#else
		printf("td02lif not included in firmware\n");
   1b73c:	81 e9       	ldi	r24, 0x91	; 145
   1b73e:	91 e4       	ldi	r25, 0x41	; 65
   1b740:	a0 e0       	ldi	r26, 0x00	; 0
   1b742:	ed b7       	in	r30, 0x3d	; 61
   1b744:	fe b7       	in	r31, 0x3e	; 62
   1b746:	81 83       	std	Z+1, r24	; 0x01
   1b748:	92 83       	std	Z+2, r25	; 0x02
   1b74a:	a3 83       	std	Z+3, r26	; 0x03
   1b74c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1b750:	31 c1       	rjmp	.+610    	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b752:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b756:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b75a:	9b 7f       	andi	r25, 0xFB	; 251
   1b75c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b760:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b764:	96 01       	movw	r18, r12
   1b766:	42 e0       	ldi	r20, 0x02	; 2
   1b768:	50 e0       	ldi	r21, 0x00	; 0
   1b76a:	65 e8       	ldi	r22, 0x85	; 133
   1b76c:	76 e1       	ldi	r23, 0x16	; 22
   1b76e:	c7 01       	movw	r24, r14
   1b770:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b774:	89 2b       	or	r24, r25
   1b776:	79 f0       	breq	.+30     	; 0x1b796 <lif_tests+0xd4>
    {
        debuglevel |= 0x400;
   1b778:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b77c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b780:	94 60       	ori	r25, 0x04	; 4
   1b782:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b786:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b78a:	f8 01       	movw	r30, r16
   1b78c:	e4 80       	ldd	r14, Z+4	; 0x04
   1b78e:	f5 80       	ldd	r15, Z+5	; 0x05
   1b790:	c3 e0       	ldi	r28, 0x03	; 3
   1b792:	d0 e0       	ldi	r29, 0x00	; 0
   1b794:	02 c0       	rjmp	.+4      	; 0x1b79a <lif_tests+0xd8>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b796:	c2 e0       	ldi	r28, 0x02	; 2
   1b798:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b79a:	5e 01       	movw	r10, r28
   1b79c:	f3 e0       	ldi	r31, 0x03	; 3
   1b79e:	af 0e       	add	r10, r31
   1b7a0:	b1 1c       	adc	r11, r1
   1b7a2:	96 01       	movw	r18, r12
   1b7a4:	a5 01       	movw	r20, r10
   1b7a6:	68 e8       	ldi	r22, 0x88	; 136
   1b7a8:	76 e1       	ldi	r23, 0x16	; 22
   1b7aa:	c7 01       	movw	r24, r14
   1b7ac:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b7b0:	89 2b       	or	r24, r25
   1b7b2:	61 f0       	breq	.+24     	; 0x1b7cc <lif_tests+0x10a>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b7b4:	cc 0f       	add	r28, r28
   1b7b6:	dd 1f       	adc	r29, r29
   1b7b8:	c0 0f       	add	r28, r16
   1b7ba:	d1 1f       	adc	r29, r17
   1b7bc:	4c 81       	ldd	r20, Y+4	; 0x04
   1b7be:	5d 81       	ldd	r21, Y+5	; 0x05
   1b7c0:	6a 81       	ldd	r22, Y+2	; 0x02
   1b7c2:	7b 81       	ldd	r23, Y+3	; 0x03
   1b7c4:	88 81       	ld	r24, Y
   1b7c6:	99 81       	ldd	r25, Y+1	; 0x01
   1b7c8:	57 dc       	rcall	.-1874   	; 0x1b078 <lif_add_lif_file>
   1b7ca:	f4 c0       	rjmp	.+488    	; 0x1b9b4 <lif_tests+0x2f2>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b7cc:	96 01       	movw	r18, r12
   1b7ce:	a5 01       	movw	r20, r10
   1b7d0:	6f e8       	ldi	r22, 0x8F	; 143
   1b7d2:	76 e1       	ldi	r23, 0x16	; 22
   1b7d4:	c7 01       	movw	r24, r14
   1b7d6:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b7da:	89 2b       	or	r24, r25
   1b7dc:	69 f0       	breq	.+26     	; 0x1b7f8 <lif_tests+0x136>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b7de:	cc 0f       	add	r28, r28
   1b7e0:	dd 1f       	adc	r29, r29
   1b7e2:	c0 0f       	add	r28, r16
   1b7e4:	d1 1f       	adc	r29, r17
   1b7e6:	4c 81       	ldd	r20, Y+4	; 0x04
   1b7e8:	5d 81       	ldd	r21, Y+5	; 0x05
   1b7ea:	6a 81       	ldd	r22, Y+2	; 0x02
   1b7ec:	7b 81       	ldd	r23, Y+3	; 0x03
   1b7ee:	88 81       	ld	r24, Y
   1b7f0:	99 81       	ldd	r25, Y+1	; 0x01
   1b7f2:	0e 94 19 d3 	call	0x1a632	; 0x1a632 <lif_add_ascii_file_as_e010>
   1b7f6:	de c0       	rjmp	.+444    	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b7f8:	96 01       	movw	r18, r12
   1b7fa:	a5 01       	movw	r20, r10
   1b7fc:	63 e9       	ldi	r22, 0x93	; 147
   1b7fe:	76 e1       	ldi	r23, 0x16	; 22
   1b800:	c7 01       	movw	r24, r14
   1b802:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b806:	89 2b       	or	r24, r25
   1b808:	09 f4       	brne	.+2      	; 0x1b80c <lif_tests+0x14a>
   1b80a:	42 c0       	rjmp	.+132    	; 0x1b890 <lif_tests+0x1ce>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b80c:	ce 01       	movw	r24, r28
   1b80e:	88 0f       	add	r24, r24
   1b810:	99 1f       	adc	r25, r25
   1b812:	e8 01       	movw	r28, r16
   1b814:	c8 0f       	add	r28, r24
   1b816:	d9 1f       	adc	r29, r25
   1b818:	c8 80       	ld	r12, Y
   1b81a:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b81c:	aa 80       	ldd	r10, Y+2	; 0x02
   1b81e:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b820:	0c 80       	ldd	r0, Y+4	; 0x04
   1b822:	dd 81       	ldd	r29, Y+5	; 0x05
   1b824:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b826:	6e e9       	ldi	r22, 0x9E	; 158
   1b828:	76 e1       	ldi	r23, 0x16	; 22
   1b82a:	ce 01       	movw	r24, r28
   1b82c:	0e 94 df 30 	call	0x61be	; 0x61be <MATCHI_LEN>
   1b830:	89 2b       	or	r24, r25
   1b832:	09 f0       	breq	.+2      	; 0x1b836 <lif_tests+0x174>
            model +=2;
   1b834:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b836:	40 e0       	ldi	r20, 0x00	; 0
   1b838:	50 e0       	ldi	r21, 0x00	; 0
   1b83a:	60 e0       	ldi	r22, 0x00	; 0
   1b83c:	70 e0       	ldi	r23, 0x00	; 0
   1b83e:	ce 01       	movw	r24, r28
   1b840:	0e 94 82 a0 	call	0x14104	; 0x14104 <hpdir_find_drive>
   1b844:	89 2b       	or	r24, r25
   1b846:	b9 f0       	breq	.+46     	; 0x1b876 <lif_tests+0x1b4>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b848:	60 91 ac 21 	lds	r22, 0x21AC	; 0x8021ac <hpdir+0xac>
   1b84c:	70 91 ad 21 	lds	r23, 0x21AD	; 0x8021ad <hpdir+0xad>
   1b850:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <hpdir+0xae>
   1b854:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <hpdir+0xaf>
   1b858:	0e 94 65 a0 	call	0x140ca	; 0x140ca <lif_dir_count>
   1b85c:	9b 01       	movw	r18, r22
   1b85e:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b860:	e0 90 ac 21 	lds	r14, 0x21AC	; 0x8021ac <hpdir+0xac>
   1b864:	f0 90 ad 21 	lds	r15, 0x21AD	; 0x8021ad <hpdir+0xad>
   1b868:	00 91 ae 21 	lds	r16, 0x21AE	; 0x8021ae <hpdir+0xae>
   1b86c:	10 91 af 21 	lds	r17, 0x21AF	; 0x8021af <hpdir+0xaf>
   1b870:	b5 01       	movw	r22, r10
   1b872:	c6 01       	movw	r24, r12
   1b874:	2e c0       	rjmp	.+92     	; 0x1b8d2 <lif_tests+0x210>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b876:	ed b7       	in	r30, 0x3d	; 61
   1b878:	fe b7       	in	r31, 0x3e	; 62
   1b87a:	d5 83       	std	Z+5, r29	; 0x05
   1b87c:	c4 83       	std	Z+4, r28	; 0x04
   1b87e:	80 e7       	ldi	r24, 0x70	; 112
   1b880:	91 e4       	ldi	r25, 0x41	; 65
   1b882:	a0 e0       	ldi	r26, 0x00	; 0
   1b884:	81 83       	std	Z+1, r24	; 0x01
   1b886:	92 83       	std	Z+2, r25	; 0x02
   1b888:	a3 83       	std	Z+3, r26	; 0x03
   1b88a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1b88e:	92 c0       	rjmp	.+292    	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b890:	96 01       	movw	r18, r12
   1b892:	ae 01       	movw	r20, r28
   1b894:	4c 5f       	subi	r20, 0xFC	; 252
   1b896:	5f 4f       	sbci	r21, 0xFF	; 255
   1b898:	61 ea       	ldi	r22, 0xA1	; 161
   1b89a:	76 e1       	ldi	r23, 0x16	; 22
   1b89c:	c7 01       	movw	r24, r14
   1b89e:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b8a2:	89 2b       	or	r24, r25
   1b8a4:	c1 f0       	breq	.+48     	; 0x1b8d6 <lif_tests+0x214>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b8a6:	cc 0f       	add	r28, r28
   1b8a8:	dd 1f       	adc	r29, r29
   1b8aa:	c0 0f       	add	r28, r16
   1b8ac:	d1 1f       	adc	r29, r17
   1b8ae:	8c 81       	ldd	r24, Y+4	; 0x04
   1b8b0:	9d 81       	ldd	r25, Y+5	; 0x05
   1b8b2:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <atol>
   1b8b6:	4b 01       	movw	r8, r22
   1b8b8:	5c 01       	movw	r10, r24
   1b8ba:	8e 81       	ldd	r24, Y+6	; 0x06
   1b8bc:	9f 81       	ldd	r25, Y+7	; 0x07
   1b8be:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <atol>
   1b8c2:	7b 01       	movw	r14, r22
   1b8c4:	8c 01       	movw	r16, r24
   1b8c6:	6a 81       	ldd	r22, Y+2	; 0x02
   1b8c8:	7b 81       	ldd	r23, Y+3	; 0x03
   1b8ca:	a5 01       	movw	r20, r10
   1b8cc:	94 01       	movw	r18, r8
   1b8ce:	88 81       	ld	r24, Y
   1b8d0:	99 81       	ldd	r25, Y+1	; 0x01
   1b8d2:	70 de       	rcall	.-800    	; 0x1b5b4 <lif_create_image>
   1b8d4:	6f c0       	rjmp	.+222    	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b8d6:	96 01       	movw	r18, r12
   1b8d8:	ae 01       	movw	r20, r28
   1b8da:	4e 5f       	subi	r20, 0xFE	; 254
   1b8dc:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8de:	68 ea       	ldi	r22, 0xA8	; 168
   1b8e0:	76 e1       	ldi	r23, 0x16	; 22
   1b8e2:	c7 01       	movw	r24, r14
   1b8e4:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b8e8:	89 2b       	or	r24, r25
   1b8ea:	51 f0       	breq	.+20     	; 0x1b900 <lif_tests+0x23e>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b8ec:	cc 0f       	add	r28, r28
   1b8ee:	dd 1f       	adc	r29, r29
   1b8f0:	c0 0f       	add	r28, r16
   1b8f2:	d1 1f       	adc	r29, r17
   1b8f4:	6a 81       	ldd	r22, Y+2	; 0x02
   1b8f6:	7b 81       	ldd	r23, Y+3	; 0x03
   1b8f8:	88 81       	ld	r24, Y
   1b8fa:	99 81       	ldd	r25, Y+1	; 0x01
   1b8fc:	46 dd       	rcall	.-1396   	; 0x1b38a <lif_del_file>
   1b8fe:	5a c0       	rjmp	.+180    	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b900:	96 01       	movw	r18, r12
   1b902:	ae 01       	movw	r20, r28
   1b904:	4f 5f       	subi	r20, 0xFF	; 255
   1b906:	5f 4f       	sbci	r21, 0xFF	; 255
   1b908:	68 ed       	ldi	r22, 0xD8	; 216
   1b90a:	7b e0       	ldi	r23, 0x0B	; 11
   1b90c:	c7 01       	movw	r24, r14
   1b90e:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b912:	89 2b       	or	r24, r25
   1b914:	49 f0       	breq	.+18     	; 0x1b928 <lif_tests+0x266>
    {
        lif_dir(argv[ind]);
   1b916:	cc 0f       	add	r28, r28
   1b918:	dd 1f       	adc	r29, r29
   1b91a:	c0 0f       	add	r28, r16
   1b91c:	d1 1f       	adc	r29, r17
   1b91e:	88 81       	ld	r24, Y
   1b920:	99 81       	ldd	r25, Y+1	; 0x01
   1b922:	0e 94 c3 ce 	call	0x19d86	; 0x19d86 <lif_dir>
   1b926:	46 c0       	rjmp	.+140    	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b928:	96 01       	movw	r18, r12
   1b92a:	a5 01       	movw	r20, r10
   1b92c:	6c ea       	ldi	r22, 0xAC	; 172
   1b92e:	76 e1       	ldi	r23, 0x16	; 22
   1b930:	c7 01       	movw	r24, r14
   1b932:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b936:	89 2b       	or	r24, r25
   1b938:	71 f0       	breq	.+28     	; 0x1b956 <lif_tests+0x294>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b93a:	ce 01       	movw	r24, r28
   1b93c:	88 0f       	add	r24, r24
   1b93e:	99 1f       	adc	r25, r25
   1b940:	e8 01       	movw	r28, r16
   1b942:	c8 0f       	add	r28, r24
   1b944:	d9 1f       	adc	r29, r25
   1b946:	4c 81       	ldd	r20, Y+4	; 0x04
   1b948:	5d 81       	ldd	r21, Y+5	; 0x05
   1b94a:	6a 81       	ldd	r22, Y+2	; 0x02
   1b94c:	7b 81       	ldd	r23, Y+3	; 0x03
   1b94e:	88 81       	ld	r24, Y
   1b950:	99 81       	ldd	r25, Y+1	; 0x01
   1b952:	5a da       	rcall	.-2892   	; 0x1ae08 <lif_extract_lif_as_lif>
   1b954:	2f c0       	rjmp	.+94     	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b956:	96 01       	movw	r18, r12
   1b958:	a5 01       	movw	r20, r10
   1b95a:	67 eb       	ldi	r22, 0xB7	; 183
   1b95c:	76 e1       	ldi	r23, 0x16	; 22
   1b95e:	c7 01       	movw	r24, r14
   1b960:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b964:	89 2b       	or	r24, r25
   1b966:	79 f0       	breq	.+30     	; 0x1b986 <lif_tests+0x2c4>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b968:	ce 01       	movw	r24, r28
   1b96a:	88 0f       	add	r24, r24
   1b96c:	99 1f       	adc	r25, r25
   1b96e:	e8 01       	movw	r28, r16
   1b970:	c8 0f       	add	r28, r24
   1b972:	d9 1f       	adc	r29, r25
   1b974:	4c 81       	ldd	r20, Y+4	; 0x04
   1b976:	5d 81       	ldd	r21, Y+5	; 0x05
   1b978:	6a 81       	ldd	r22, Y+2	; 0x02
   1b97a:	7b 81       	ldd	r23, Y+3	; 0x03
   1b97c:	88 81       	ld	r24, Y
   1b97e:	99 81       	ldd	r25, Y+1	; 0x01
   1b980:	0e 94 55 d4 	call	0x1a8aa	; 0x1a8aa <lif_extract_e010_as_ascii>
   1b984:	17 c0       	rjmp	.+46     	; 0x1b9b4 <lif_tests+0x2f2>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b986:	96 01       	movw	r18, r12
   1b988:	a5 01       	movw	r20, r10
   1b98a:	65 ee       	ldi	r22, 0xE5	; 229
   1b98c:	7b e0       	ldi	r23, 0x0B	; 11
   1b98e:	c7 01       	movw	r24, r14
   1b990:	0e 94 b5 30 	call	0x616a	; 0x616a <MATCHARGS>
   1b994:	89 2b       	or	r24, r25
   1b996:	09 f4       	brne	.+2      	; 0x1b99a <lif_tests+0x2d8>
   1b998:	9c ce       	rjmp	.-712    	; 0x1b6d2 <lif_tests+0x10>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b99a:	ce 01       	movw	r24, r28
   1b99c:	88 0f       	add	r24, r24
   1b99e:	99 1f       	adc	r25, r25
   1b9a0:	e8 01       	movw	r28, r16
   1b9a2:	c8 0f       	add	r28, r24
   1b9a4:	d9 1f       	adc	r29, r25
   1b9a6:	4c 81       	ldd	r20, Y+4	; 0x04
   1b9a8:	5d 81       	ldd	r21, Y+5	; 0x05
   1b9aa:	6a 81       	ldd	r22, Y+2	; 0x02
   1b9ac:	7b 81       	ldd	r23, Y+3	; 0x03
   1b9ae:	88 81       	ld	r24, Y
   1b9b0:	99 81       	ldd	r25, Y+1	; 0x01
   1b9b2:	81 dd       	rcall	.-1278   	; 0x1b4b6 <lif_rename_file>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1b9b4:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1b9b6:	90 e0       	ldi	r25, 0x00	; 0
   1b9b8:	cd b7       	in	r28, 0x3d	; 61
   1b9ba:	de b7       	in	r29, 0x3e	; 62
   1b9bc:	25 96       	adiw	r28, 0x05	; 5
   1b9be:	ec e0       	ldi	r30, 0x0C	; 12
   1b9c0:	2d c6       	rjmp	.+3162   	; 0x1c61c <__epilogue_restores__+0xc>

0001b9c2 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1b9c2:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <lcd_display_time>
   1b9c6:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <lcd_display_time+0x1>
   1b9ca:	01 96       	adiw	r24, 0x01	; 1
   1b9cc:	90 93 f3 19 	sts	0x19F3, r25	; 0x8019f3 <lcd_display_time+0x1>
   1b9d0:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <lcd_display_time>
   1b9d4:	08 95       	ret

0001b9d6 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1b9d6:	00 d0       	rcall	.+0      	; 0x1b9d8 <copyright+0x2>
   1b9d8:	00 d0       	rcall	.+0      	; 0x1b9da <copyright+0x4>
   1b9da:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1b9dc:	8a e4       	ldi	r24, 0x4A	; 74
   1b9de:	98 e4       	ldi	r25, 0x48	; 72
   1b9e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b9e2:	ed b7       	in	r30, 0x3d	; 61
   1b9e4:	fe b7       	in	r31, 0x3e	; 62
   1b9e6:	81 83       	std	Z+1, r24	; 0x01
   1b9e8:	92 83       	std	Z+2, r25	; 0x02
   1b9ea:	a3 83       	std	Z+3, r26	; 0x03
   1b9ec:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1b9f0:	8b e2       	ldi	r24, 0x2B	; 43
   1b9f2:	98 e4       	ldi	r25, 0x48	; 72
   1b9f4:	a0 e0       	ldi	r26, 0x00	; 0
   1b9f6:	ed b7       	in	r30, 0x3d	; 61
   1b9f8:	fe b7       	in	r31, 0x3e	; 62
   1b9fa:	81 83       	std	Z+1, r24	; 0x01
   1b9fc:	92 83       	std	Z+2, r25	; 0x02
   1b9fe:	a3 83       	std	Z+3, r26	; 0x03
   1ba00:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1ba04:	8e e0       	ldi	r24, 0x0E	; 14
   1ba06:	98 e4       	ldi	r25, 0x48	; 72
   1ba08:	a0 e0       	ldi	r26, 0x00	; 0
   1ba0a:	ed b7       	in	r30, 0x3d	; 61
   1ba0c:	fe b7       	in	r31, 0x3e	; 62
   1ba0e:	81 83       	std	Z+1, r24	; 0x01
   1ba10:	92 83       	std	Z+2, r25	; 0x02
   1ba12:	a3 83       	std	Z+3, r26	; 0x03
   1ba14:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf(" GNU version 3\n");
   1ba18:	8e ef       	ldi	r24, 0xFE	; 254
   1ba1a:	97 e4       	ldi	r25, 0x47	; 71
   1ba1c:	a0 e0       	ldi	r26, 0x00	; 0
   1ba1e:	ed b7       	in	r30, 0x3d	; 61
   1ba20:	fe b7       	in	r31, 0x3e	; 62
   1ba22:	81 83       	std	Z+1, r24	; 0x01
   1ba24:	92 83       	std	Z+2, r25	; 0x02
   1ba26:	a3 83       	std	Z+3, r26	; 0x03
   1ba28:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1ba2c:	87 ed       	ldi	r24, 0xD7	; 215
   1ba2e:	97 e4       	ldi	r25, 0x47	; 71
   1ba30:	a0 e0       	ldi	r26, 0x00	; 0
   1ba32:	ed b7       	in	r30, 0x3d	; 61
   1ba34:	fe b7       	in	r31, 0x3e	; 62
   1ba36:	81 83       	std	Z+1, r24	; 0x01
   1ba38:	92 83       	std	Z+2, r25	; 0x02
   1ba3a:	a3 83       	std	Z+3, r26	; 0x03
   1ba3c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ba40:	8f eb       	ldi	r24, 0xBF	; 191
   1ba42:	96 e1       	ldi	r25, 0x16	; 22
   1ba44:	ed b7       	in	r30, 0x3d	; 61
   1ba46:	fe b7       	in	r31, 0x3e	; 62
   1ba48:	95 83       	std	Z+5, r25	; 0x05
   1ba4a:	84 83       	std	Z+4, r24	; 0x04
   1ba4c:	8d eb       	ldi	r24, 0xBD	; 189
   1ba4e:	97 e4       	ldi	r25, 0x47	; 71
   1ba50:	a0 e0       	ldi	r26, 0x00	; 0
   1ba52:	81 83       	std	Z+1, r24	; 0x01
   1ba54:	92 83       	std	Z+2, r25	; 0x02
   1ba56:	a3 83       	std	Z+3, r26	; 0x03
   1ba58:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ba5c:	83 ee       	ldi	r24, 0xE3	; 227
   1ba5e:	96 e1       	ldi	r25, 0x16	; 22
   1ba60:	ed b7       	in	r30, 0x3d	; 61
   1ba62:	fe b7       	in	r31, 0x3e	; 62
   1ba64:	95 83       	std	Z+5, r25	; 0x05
   1ba66:	84 83       	std	Z+4, r24	; 0x04
   1ba68:	83 ea       	ldi	r24, 0xA3	; 163
   1ba6a:	97 e4       	ldi	r25, 0x47	; 71
   1ba6c:	a0 e0       	ldi	r26, 0x00	; 0
   1ba6e:	81 83       	std	Z+1, r24	; 0x01
   1ba70:	92 83       	std	Z+2, r25	; 0x02
   1ba72:	a3 83       	std	Z+3, r26	; 0x03
   1ba74:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("\n");
   1ba78:	81 ea       	ldi	r24, 0xA1	; 161
   1ba7a:	97 e4       	ldi	r25, 0x47	; 71
   1ba7c:	a0 e0       	ldi	r26, 0x00	; 0
   1ba7e:	ed b7       	in	r30, 0x3d	; 61
   1ba80:	fe b7       	in	r31, 0x3e	; 62
   1ba82:	81 83       	std	Z+1, r24	; 0x01
   1ba84:	92 83       	std	Z+2, r25	; 0x02
   1ba86:	a3 83       	std	Z+3, r26	; 0x03
   1ba88:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
}
   1ba8c:	0f 90       	pop	r0
   1ba8e:	0f 90       	pop	r0
   1ba90:	0f 90       	pop	r0
   1ba92:	0f 90       	pop	r0
   1ba94:	0f 90       	pop	r0
   1ba96:	08 95       	ret

0001ba98 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1ba98:	a1 e1       	ldi	r26, 0x11	; 17
   1ba9a:	b0 e0       	ldi	r27, 0x00	; 0
   1ba9c:	e1 e5       	ldi	r30, 0x51	; 81
   1ba9e:	fd ed       	ldi	r31, 0xDD	; 221
   1baa0:	a7 c5       	rjmp	.+2894   	; 0x1c5f0 <__prologue_saves__+0x18>
   1baa2:	ec 01       	movw	r28, r24
   1baa4:	7b 01       	movw	r14, r22
   1baa6:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1baa8:	60 e0       	ldi	r22, 0x00	; 0
   1baaa:	70 e0       	ldi	r23, 0x00	; 0
   1baac:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <normalize>
    memset(buf,0,max);
   1bab0:	a8 01       	movw	r20, r16
   1bab2:	60 e0       	ldi	r22, 0x00	; 0
   1bab4:	70 e0       	ldi	r23, 0x00	; 0
   1bab6:	c7 01       	movw	r24, r14
   1bab8:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1babc:	88 85       	ldd	r24, Y+8	; 0x08
   1babe:	99 85       	ldd	r25, Y+9	; 0x09
   1bac0:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <tm_mon_to_ascii>
   1bac4:	28 81       	ld	r18, Y
   1bac6:	39 81       	ldd	r19, Y+1	; 0x01
   1bac8:	ed b7       	in	r30, 0x3d	; 61
   1baca:	fe b7       	in	r31, 0x3e	; 62
   1bacc:	31 8b       	std	Z+17, r19	; 0x11
   1bace:	20 8b       	std	Z+16, r18	; 0x10
   1bad0:	2a 81       	ldd	r18, Y+2	; 0x02
   1bad2:	3b 81       	ldd	r19, Y+3	; 0x03
   1bad4:	37 87       	std	Z+15, r19	; 0x0f
   1bad6:	26 87       	std	Z+14, r18	; 0x0e
   1bad8:	2c 81       	ldd	r18, Y+4	; 0x04
   1bada:	3d 81       	ldd	r19, Y+5	; 0x05
   1badc:	35 87       	std	Z+13, r19	; 0x0d
   1bade:	24 87       	std	Z+12, r18	; 0x0c
   1bae0:	2e 81       	ldd	r18, Y+6	; 0x06
   1bae2:	3f 81       	ldd	r19, Y+7	; 0x07
   1bae4:	33 87       	std	Z+11, r19	; 0x0b
   1bae6:	22 87       	std	Z+10, r18	; 0x0a
   1bae8:	91 87       	std	Z+9, r25	; 0x09
   1baea:	80 87       	std	Z+8, r24	; 0x08
   1baec:	8b e8       	ldi	r24, 0x8B	; 139
   1baee:	97 e4       	ldi	r25, 0x47	; 71
   1baf0:	a0 e0       	ldi	r26, 0x00	; 0
   1baf2:	85 83       	std	Z+5, r24	; 0x05
   1baf4:	96 83       	std	Z+6, r25	; 0x06
   1baf6:	a7 83       	std	Z+7, r26	; 0x07
   1baf8:	01 50       	subi	r16, 0x01	; 1
   1bafa:	11 09       	sbc	r17, r1
   1bafc:	14 83       	std	Z+4, r17	; 0x04
   1bafe:	03 83       	std	Z+3, r16	; 0x03
   1bb00:	f2 82       	std	Z+2, r15	; 0x02
   1bb02:	e1 82       	std	Z+1, r14	; 0x01
   1bb04:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bb08:	c7 01       	movw	r24, r14
   1bb0a:	cd b7       	in	r28, 0x3d	; 61
   1bb0c:	de b7       	in	r29, 0x3e	; 62
   1bb0e:	61 96       	adiw	r28, 0x11	; 17
   1bb10:	e6 e0       	ldi	r30, 0x06	; 6
   1bb12:	8a c5       	rjmp	.+2836   	; 0x1c628 <__epilogue_restores__+0x18>

0001bb14 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1bb14:	cf 93       	push	r28
   1bb16:	00 d0       	rcall	.+0      	; 0x1bb18 <lcd_backlight+0x4>
   1bb18:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1bb1a:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1bb1e:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1bb22:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1bb26:	25 e0       	ldi	r18, 0x05	; 5
   1bb28:	40 ef       	ldi	r20, 0xF0	; 240
   1bb2a:	52 e0       	ldi	r21, 0x02	; 2
   1bb2c:	60 e0       	ldi	r22, 0x00	; 0
   1bb2e:	82 e7       	ldi	r24, 0x72	; 114
   1bb30:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <i2c_fn>
   1bb34:	c8 2f       	mov	r28, r24
   1bb36:	81 11       	cpse	r24, r1
   1bb38:	0d c0       	rjmp	.+26     	; 0x1bb54 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1bb3a:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bb3e:	81 e7       	ldi	r24, 0x71	; 113
   1bb40:	97 e4       	ldi	r25, 0x47	; 71
   1bb42:	a0 e0       	ldi	r26, 0x00	; 0
   1bb44:	ed b7       	in	r30, 0x3d	; 61
   1bb46:	fe b7       	in	r31, 0x3e	; 62
   1bb48:	81 83       	std	Z+1, r24	; 0x01
   1bb4a:	92 83       	std	Z+2, r25	; 0x02
   1bb4c:	a3 83       	std	Z+3, r26	; 0x03
   1bb4e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1bb52:	01 c0       	rjmp	.+2      	; 0x1bb56 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1bb54:	c1 e0       	ldi	r28, 0x01	; 1
}
   1bb56:	8c 2f       	mov	r24, r28
   1bb58:	0f 90       	pop	r0
   1bb5a:	0f 90       	pop	r0
   1bb5c:	0f 90       	pop	r0
   1bb5e:	cf 91       	pop	r28
   1bb60:	08 95       	ret

0001bb62 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1bb62:	cf 93       	push	r28
   1bb64:	ad b7       	in	r26, 0x3d	; 61
   1bb66:	be b7       	in	r27, 0x3e	; 62
   1bb68:	17 97       	sbiw	r26, 0x07	; 7
   1bb6a:	0f b6       	in	r0, 0x3f	; 63
   1bb6c:	f8 94       	cli
   1bb6e:	be bf       	out	0x3e, r27	; 62
   1bb70:	0f be       	out	0x3f, r0	; 63
   1bb72:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bb74:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bb76:	83 e5       	ldi	r24, 0x53	; 83
   1bb78:	97 e4       	ldi	r25, 0x47	; 71
   1bb7a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb7c:	ed b7       	in	r30, 0x3d	; 61
   1bb7e:	fe b7       	in	r31, 0x3e	; 62
   1bb80:	81 83       	std	Z+1, r24	; 0x01
   1bb82:	92 83       	std	Z+2, r25	; 0x02
   1bb84:	a3 83       	std	Z+3, r26	; 0x03
   1bb86:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bb8a:	61 e0       	ldi	r22, 0x01	; 1
   1bb8c:	70 e0       	ldi	r23, 0x00	; 0
   1bb8e:	81 ee       	ldi	r24, 0xE1	; 225
   1bb90:	9c ed       	ldi	r25, 0xDC	; 220
   1bb92:	0e 94 02 33 	call	0x6604	; 0x6604 <set_timers>
   1bb96:	01 96       	adiw	r24, 0x01	; 1
   1bb98:	51 f4       	brne	.+20     	; 0x1bbae <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1bb9a:	8d e3       	ldi	r24, 0x3D	; 61
   1bb9c:	97 e4       	ldi	r25, 0x47	; 71
   1bb9e:	a0 e0       	ldi	r26, 0x00	; 0
   1bba0:	ed b7       	in	r30, 0x3d	; 61
   1bba2:	fe b7       	in	r31, 0x3e	; 62
   1bba4:	81 83       	std	Z+1, r24	; 0x01
   1bba6:	92 83       	std	Z+2, r25	; 0x02
   1bba8:	a3 83       	std	Z+3, r26	; 0x03
   1bbaa:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

	i2c_init(100000);
   1bbae:	60 ea       	ldi	r22, 0xA0	; 160
   1bbb0:	76 e8       	ldi	r23, 0x86	; 134
   1bbb2:	81 e0       	ldi	r24, 0x01	; 1
   1bbb4:	90 e0       	ldi	r25, 0x00	; 0
   1bbb6:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <i2c_init>

	i2c_task_init();
   1bbba:	0e 94 33 2a 	call	0x5466	; 0x5466 <i2c_task_init>

	cli();
   1bbbe:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bbc0:	87 e0       	ldi	r24, 0x07	; 7
   1bbc2:	97 e1       	ldi	r25, 0x17	; 23
   1bbc4:	ed b7       	in	r30, 0x3d	; 61
   1bbc6:	fe b7       	in	r31, 0x3e	; 62
   1bbc8:	97 83       	std	Z+7, r25	; 0x07
   1bbca:	86 83       	std	Z+6, r24	; 0x06
   1bbcc:	87 e3       	ldi	r24, 0x37	; 55
   1bbce:	97 e4       	ldi	r25, 0x47	; 71
   1bbd0:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd2:	83 83       	std	Z+3, r24	; 0x03
   1bbd4:	94 83       	std	Z+4, r25	; 0x04
   1bbd6:	a5 83       	std	Z+5, r26	; 0x05
   1bbd8:	8c e0       	ldi	r24, 0x0C	; 12
   1bbda:	93 e0       	ldi	r25, 0x03	; 3
   1bbdc:	92 83       	std	Z+2, r25	; 0x02
   1bbde:	81 83       	std	Z+1, r24	; 0x01
   1bbe0:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bbe4:	83 e1       	ldi	r24, 0x13	; 19
   1bbe6:	97 e1       	ldi	r25, 0x17	; 23
   1bbe8:	ed b7       	in	r30, 0x3d	; 61
   1bbea:	fe b7       	in	r31, 0x3e	; 62
   1bbec:	97 83       	std	Z+7, r25	; 0x07
   1bbee:	86 83       	std	Z+6, r24	; 0x06
   1bbf0:	81 e3       	ldi	r24, 0x31	; 49
   1bbf2:	97 e4       	ldi	r25, 0x47	; 71
   1bbf4:	a0 e0       	ldi	r26, 0x00	; 0
   1bbf6:	83 83       	std	Z+3, r24	; 0x03
   1bbf8:	94 83       	std	Z+4, r25	; 0x04
   1bbfa:	a5 83       	std	Z+5, r26	; 0x05
   1bbfc:	85 ef       	ldi	r24, 0xF5	; 245
   1bbfe:	92 e0       	ldi	r25, 0x02	; 2
   1bc00:	92 83       	std	Z+2, r25	; 0x02
   1bc02:	81 83       	std	Z+1, r24	; 0x01
   1bc04:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bc08:	22 e0       	ldi	r18, 0x02	; 2
   1bc0a:	41 e2       	ldi	r20, 0x21	; 33
   1bc0c:	53 e0       	ldi	r21, 0x03	; 3
   1bc0e:	60 e0       	ldi	r22, 0x00	; 0
   1bc10:	82 e7       	ldi	r24, 0x72	; 114
   1bc12:	0e 94 48 2a 	call	0x5490	; 0x5490 <i2c_task_op_add>
   1bc16:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <i2c_task_op+0x1>
   1bc1a:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bc1e:	20 e1       	ldi	r18, 0x10	; 16
   1bc20:	4c e0       	ldi	r20, 0x0C	; 12
   1bc22:	53 e0       	ldi	r21, 0x03	; 3
   1bc24:	60 e0       	ldi	r22, 0x00	; 0
   1bc26:	82 e7       	ldi	r24, 0x72	; 114
   1bc28:	0e 94 48 2a 	call	0x5490	; 0x5490 <i2c_task_op_add>
   1bc2c:	90 93 61 17 	sts	0x1761, r25	; 0x801761 <i2c_task_op+0x3>
   1bc30:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bc34:	22 e0       	ldi	r18, 0x02	; 2
   1bc36:	4a e0       	ldi	r20, 0x0A	; 10
   1bc38:	53 e0       	ldi	r21, 0x03	; 3
   1bc3a:	60 e0       	ldi	r22, 0x00	; 0
   1bc3c:	82 e7       	ldi	r24, 0x72	; 114
   1bc3e:	0e 94 48 2a 	call	0x5490	; 0x5490 <i2c_task_op_add>
   1bc42:	90 93 63 17 	sts	0x1763, r25	; 0x801763 <i2c_task_op+0x5>
   1bc46:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bc4a:	20 e1       	ldi	r18, 0x10	; 16
   1bc4c:	45 ef       	ldi	r20, 0xF5	; 245
   1bc4e:	52 e0       	ldi	r21, 0x02	; 2
   1bc50:	60 e0       	ldi	r22, 0x00	; 0
   1bc52:	82 e7       	ldi	r24, 0x72	; 114
   1bc54:	0e 94 48 2a 	call	0x5490	; 0x5490 <i2c_task_op_add>
   1bc58:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <i2c_task_op+0x7>
   1bc5c:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <i2c_task_op+0x6>

	SREG = sreg;
   1bc60:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1bc62:	0e 94 08 2b 	call	0x5610	; 0x5610 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1bc66:	68 ee       	ldi	r22, 0xE8	; 232
   1bc68:	73 e0       	ldi	r23, 0x03	; 3
   1bc6a:	80 e0       	ldi	r24, 0x00	; 0
   1bc6c:	90 e0       	ldi	r25, 0x00	; 0
   1bc6e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1bc72:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <i2c_task_done>
   1bc76:	81 11       	cpse	r24, r1
   1bc78:	0c c0       	rjmp	.+24     	; 0x1bc92 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1bc7a:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bc7e:	87 e1       	ldi	r24, 0x17	; 23
   1bc80:	97 e4       	ldi	r25, 0x47	; 71
   1bc82:	a0 e0       	ldi	r26, 0x00	; 0
   1bc84:	ed b7       	in	r30, 0x3d	; 61
   1bc86:	fe b7       	in	r31, 0x3e	; 62
   1bc88:	81 83       	std	Z+1, r24	; 0x01
   1bc8a:	92 83       	std	Z+2, r25	; 0x02
   1bc8c:	a3 83       	std	Z+3, r26	; 0x03
   1bc8e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
	}

    sep();
   1bc92:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>
}
   1bc96:	ad b7       	in	r26, 0x3d	; 61
   1bc98:	be b7       	in	r27, 0x3e	; 62
   1bc9a:	17 96       	adiw	r26, 0x07	; 7
   1bc9c:	0f b6       	in	r0, 0x3f	; 63
   1bc9e:	f8 94       	cli
   1bca0:	be bf       	out	0x3e, r27	; 62
   1bca2:	0f be       	out	0x3f, r0	; 63
   1bca4:	ad bf       	out	0x3d, r26	; 61
   1bca6:	cf 91       	pop	r28
   1bca8:	08 95       	ret

0001bcaa <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1bcaa:	af e2       	ldi	r26, 0x2F	; 47
   1bcac:	b0 e0       	ldi	r27, 0x00	; 0
   1bcae:	ea e5       	ldi	r30, 0x5A	; 90
   1bcb0:	fe ed       	ldi	r31, 0xDE	; 222
   1bcb2:	a1 c4       	rjmp	.+2370   	; 0x1c5f6 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1bcb4:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1bcb6:	f8 94       	cli
	if(!mmc_ins_status())
   1bcb8:	0e 94 42 6d 	call	0xda84	; 0xda84 <mmc_ins_status>
   1bcbc:	89 2b       	or	r24, r25
   1bcbe:	49 f4       	brne	.+18     	; 0x1bcd2 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1bcc0:	80 e2       	ldi	r24, 0x20	; 32
   1bcc2:	97 e1       	ldi	r25, 0x17	; 23
   1bcc4:	ed b7       	in	r30, 0x3d	; 61
   1bcc6:	fe b7       	in	r31, 0x3e	; 62
   1bcc8:	97 83       	std	Z+7, r25	; 0x07
   1bcca:	86 83       	std	Z+6, r24	; 0x06
   1bccc:	81 e1       	ldi	r24, 0x11	; 17
   1bcce:	97 e4       	ldi	r25, 0x47	; 71
   1bcd0:	17 c0       	rjmp	.+46     	; 0x1bd00 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1bcd2:	be 01       	movw	r22, r28
   1bcd4:	68 5d       	subi	r22, 0xD8	; 216
   1bcd6:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcd8:	80 e0       	ldi	r24, 0x00	; 0
   1bcda:	90 e0       	ldi	r25, 0x00	; 0
   1bcdc:	0e 94 12 32 	call	0x6424	; 0x6424 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1bce0:	ce 01       	movw	r24, r28
   1bce2:	88 96       	adiw	r24, 0x28	; 40
   1bce4:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <gmtime>
   1bce8:	4f e1       	ldi	r20, 0x1F	; 31
   1bcea:	50 e0       	ldi	r21, 0x00	; 0
   1bcec:	be 01       	movw	r22, r28
   1bcee:	68 5f       	subi	r22, 0xF8	; 248
   1bcf0:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcf2:	d2 de       	rcall	.-604    	; 0x1ba98 <lcd_time>
   1bcf4:	ed b7       	in	r30, 0x3d	; 61
   1bcf6:	fe b7       	in	r31, 0x3e	; 62
   1bcf8:	97 83       	std	Z+7, r25	; 0x07
   1bcfa:	86 83       	std	Z+6, r24	; 0x06
   1bcfc:	8b e0       	ldi	r24, 0x0B	; 11
   1bcfe:	97 e4       	ldi	r25, 0x47	; 71
   1bd00:	a0 e0       	ldi	r26, 0x00	; 0
   1bd02:	83 83       	std	Z+3, r24	; 0x03
   1bd04:	94 83       	std	Z+4, r25	; 0x04
   1bd06:	a5 83       	std	Z+5, r26	; 0x05
   1bd08:	85 ef       	ldi	r24, 0xF5	; 245
   1bd0a:	92 e0       	ldi	r25, 0x02	; 2
   1bd0c:	92 83       	std	Z+2, r25	; 0x02
   1bd0e:	81 83       	std	Z+1, r24	; 0x01
   1bd10:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1bd14:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1bd16:	0e 94 08 2b 	call	0x5610	; 0x5610 <i2c_task_run>
}
   1bd1a:	af 96       	adiw	r28, 0x2f	; 47
   1bd1c:	e3 e0       	ldi	r30, 0x03	; 3
   1bd1e:	87 c4       	rjmp	.+2318   	; 0x1c62e <__epilogue_restores__+0x1e>

0001bd20 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1bd20:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1bd22:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1bd24:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <lcd_display_time>
   1bd28:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <lcd_display_time+0x1>
   1bd2c:	25 36       	cpi	r18, 0x65	; 101
   1bd2e:	31 05       	cpc	r19, r1
   1bd30:	3c f0       	brlt	.+14     	; 0x1bd40 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1bd32:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <lcd_display_time+0x1>
   1bd36:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <lcd_display_time>
		SREG = sreg;
   1bd3a:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1bd3c:	b6 cf       	rjmp	.-148    	; 0x1bcaa <i2c_lcd_task>
		return;
   1bd3e:	08 95       	ret
	}
	SREG = sreg;
   1bd40:	8f bf       	out	0x3f, r24	; 63
   1bd42:	08 95       	ret

0001bd44 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1bd44:	00 d0       	rcall	.+0      	; 0x1bd46 <help+0x2>
   1bd46:	1f 92       	push	r1

    copyright();
   1bd48:	46 de       	rcall	.-884    	; 0x1b9d6 <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bd4a:	80 e0       	ldi	r24, 0x00	; 0
   1bd4c:	90 e0       	ldi	r25, 0x00	; 0
   1bd4e:	0e 94 59 71 	call	0xe2b2	; 0xe2b2 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1bd52:	80 e0       	ldi	r24, 0x00	; 0
   1bd54:	90 e0       	ldi	r25, 0x00	; 0
   1bd56:	0e 94 b9 7c 	call	0xf972	; 0xf972 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bd5a:	80 e0       	ldi	r24, 0x00	; 0
   1bd5c:	90 e0       	ldi	r25, 0x00	; 0
   1bd5e:	0e 94 2b bd 	call	0x17a56	; 0x17a56 <lif_help>
#endif

    gpib_help(0);
   1bd62:	80 e0       	ldi	r24, 0x00	; 0
   1bd64:	90 e0       	ldi	r25, 0x00	; 0
   1bd66:	0e 94 12 90 	call	0x12024	; 0x12024 <gpib_help>

    printf(
   1bd6a:	87 e6       	ldi	r24, 0x67	; 103
   1bd6c:	96 e4       	ldi	r25, 0x46	; 70
   1bd6e:	a0 e0       	ldi	r26, 0x00	; 0
   1bd70:	ed b7       	in	r30, 0x3d	; 61
   1bd72:	fe b7       	in	r31, 0x3e	; 62
   1bd74:	81 83       	std	Z+1, r24	; 0x01
   1bd76:	92 83       	std	Z+2, r25	; 0x02
   1bd78:	a3 83       	std	Z+3, r26	; 0x03
   1bd7a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1bd7e:	0f 90       	pop	r0
   1bd80:	0f 90       	pop	r0
   1bd82:	0f 90       	pop	r0
   1bd84:	08 95       	ret

0001bd86 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1bd86:	6f 92       	push	r6
   1bd88:	7f 92       	push	r7
   1bd8a:	8f 92       	push	r8
   1bd8c:	cf 92       	push	r12
   1bd8e:	df 92       	push	r13
   1bd90:	ef 92       	push	r14
   1bd92:	ff 92       	push	r15
   1bd94:	0f 93       	push	r16
   1bd96:	1f 93       	push	r17
   1bd98:	cf 93       	push	r28
   1bd9a:	df 93       	push	r29
   1bd9c:	cd b7       	in	r28, 0x3d	; 61
   1bd9e:	de b7       	in	r29, 0x3e	; 62
   1bda0:	cb 56       	subi	r28, 0x6B	; 107
   1bda2:	d1 40       	sbci	r29, 0x01	; 1
   1bda4:	0f b6       	in	r0, 0x3f	; 63
   1bda6:	f8 94       	cli
   1bda8:	de bf       	out	0x3e, r29	; 62
   1bdaa:	0f be       	out	0x3f, r0	; 63
   1bdac:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bdae:	84 e6       	ldi	r24, 0x64	; 100
   1bdb0:	96 e4       	ldi	r25, 0x46	; 70
   1bdb2:	a0 e0       	ldi	r26, 0x00	; 0
   1bdb4:	ed b7       	in	r30, 0x3d	; 61
   1bdb6:	fe b7       	in	r31, 0x3e	; 62
   1bdb8:	81 83       	std	Z+1, r24	; 0x01
   1bdba:	92 83       	std	Z+2, r25	; 0x02
   1bdbc:	a3 83       	std	Z+3, r26	; 0x03
   1bdbe:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

	memset(line,0,sizeof(line)-1);
   1bdc2:	8e 01       	movw	r16, r28
   1bdc4:	0a 5f       	subi	r16, 0xFA	; 250
   1bdc6:	1f 4f       	sbci	r17, 0xFF	; 255
   1bdc8:	8f ef       	ldi	r24, 0xFF	; 255
   1bdca:	f8 01       	movw	r30, r16
   1bdcc:	11 92       	st	Z+, r1
   1bdce:	8a 95       	dec	r24
   1bdd0:	e9 f7       	brne	.-6      	; 0x1bdcc <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1bdd2:	40 91 c7 1c 	lds	r20, 0x1CC7	; 0x801cc7 <__iob>
   1bdd6:	50 91 c8 1c 	lds	r21, 0x1CC8	; 0x801cc8 <__iob+0x1>
   1bdda:	6e ef       	ldi	r22, 0xFE	; 254
   1bddc:	70 e0       	ldi	r23, 0x00	; 0
   1bdde:	c8 01       	movw	r24, r16
   1bde0:	0e 94 a5 74 	call	0xe94a	; 0xe94a <fgets>
    trim_tail(line);
   1bde4:	c8 01       	movw	r24, r16
   1bde6:	0e 94 73 30 	call	0x60e6	; 0x60e6 <trim_tail>
    argc = split_args(line,argv,50);
   1bdea:	42 e3       	ldi	r20, 0x32	; 50
   1bdec:	50 e0       	ldi	r21, 0x00	; 0
   1bdee:	be 01       	movw	r22, r28
   1bdf0:	6a 5f       	subi	r22, 0xFA	; 250
   1bdf2:	7e 4f       	sbci	r23, 0xFE	; 254
   1bdf4:	c8 01       	movw	r24, r16
   1bdf6:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <split_args>
   1bdfa:	7c 01       	movw	r14, r24

	if(debug_input)
   1bdfc:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <debug_input>
   1be00:	81 11       	cpse	r24, r1
   1be02:	0a c0       	rjmp	.+20     	; 0x1be18 <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1be04:	ca 5f       	subi	r28, 0xFA	; 250
   1be06:	de 4f       	sbci	r29, 0xFE	; 254
   1be08:	08 81       	ld	r16, Y
   1be0a:	19 81       	ldd	r17, Y+1	; 0x01
   1be0c:	c6 50       	subi	r28, 0x06	; 6
   1be0e:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1be10:	01 15       	cp	r16, r1
   1be12:	11 05       	cpc	r17, r1
   1be14:	51 f5       	brne	.+84     	; 0x1be6a <user_task.part.1+0xe4>
   1be16:	b6 c0       	rjmp	.+364    	; 0x1bf84 <user_task.part.1+0x1fe>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1be18:	ed b7       	in	r30, 0x3d	; 61
   1be1a:	fe b7       	in	r31, 0x3e	; 62
   1be1c:	f5 82       	std	Z+5, r15	; 0x05
   1be1e:	e4 82       	std	Z+4, r14	; 0x04
   1be20:	8f e4       	ldi	r24, 0x4F	; 79
   1be22:	96 e4       	ldi	r25, 0x46	; 70
   1be24:	a0 e0       	ldi	r26, 0x00	; 0
   1be26:	81 83       	std	Z+1, r24	; 0x01
   1be28:	92 83       	std	Z+2, r25	; 0x02
   1be2a:	a3 83       	std	Z+3, r26	; 0x03
   1be2c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1be30:	ce 01       	movw	r24, r28
   1be32:	8a 5f       	subi	r24, 0xFA	; 250
   1be34:	9e 4f       	sbci	r25, 0xFE	; 254
   1be36:	6c 01       	movw	r12, r24
		for(i=0;i<argc;++i)
   1be38:	00 e0       	ldi	r16, 0x00	; 0
   1be3a:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1be3c:	86 e4       	ldi	r24, 0x46	; 70
   1be3e:	96 e4       	ldi	r25, 0x46	; 70
   1be40:	3c 01       	movw	r6, r24
   1be42:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1be44:	0e 15       	cp	r16, r14
   1be46:	1f 05       	cpc	r17, r15
   1be48:	ec f6       	brge	.-70     	; 0x1be04 <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1be4a:	f6 01       	movw	r30, r12
   1be4c:	81 91       	ld	r24, Z+
   1be4e:	91 91       	ld	r25, Z+
   1be50:	6f 01       	movw	r12, r30
   1be52:	ed b7       	in	r30, 0x3d	; 61
   1be54:	fe b7       	in	r31, 0x3e	; 62
   1be56:	95 83       	std	Z+5, r25	; 0x05
   1be58:	84 83       	std	Z+4, r24	; 0x04
   1be5a:	61 82       	std	Z+1, r6	; 0x01
   1be5c:	72 82       	std	Z+2, r7	; 0x02
   1be5e:	83 82       	std	Z+3, r8	; 0x03
   1be60:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1be64:	0f 5f       	subi	r16, 0xFF	; 255
   1be66:	1f 4f       	sbci	r17, 0xFF	; 255
   1be68:	ed cf       	rjmp	.-38     	; 0x1be44 <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1be6a:	1e 14       	cp	r1, r14
   1be6c:	1f 04       	cpc	r1, r15
   1be6e:	0c f0       	brlt	.+2      	; 0x1be72 <user_task.part.1+0xec>
   1be70:	89 c0       	rjmp	.+274    	; 0x1bf84 <user_task.part.1+0x1fe>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1be72:	65 e3       	ldi	r22, 0x35	; 53
   1be74:	77 e1       	ldi	r23, 0x17	; 23
   1be76:	c8 01       	movw	r24, r16
   1be78:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1be7c:	89 2b       	or	r24, r25
   1be7e:	d9 f0       	breq	.+54     	; 0x1beb6 <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1be80:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <debug_input>
   1be84:	91 e0       	ldi	r25, 0x01	; 1
   1be86:	81 11       	cpse	r24, r1
   1be88:	90 e0       	ldi	r25, 0x00	; 0
   1be8a:	90 93 f4 19 	sts	0x19F4, r25	; 0x8019f4 <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1be8e:	88 23       	and	r24, r24
   1be90:	19 f0       	breq	.+6      	; 0x1be98 <user_task.part.1+0x112>
   1be92:	81 e3       	ldi	r24, 0x31	; 49
   1be94:	97 e1       	ldi	r25, 0x17	; 23
   1be96:	02 c0       	rjmp	.+4      	; 0x1be9c <user_task.part.1+0x116>
   1be98:	8e e2       	ldi	r24, 0x2E	; 46
   1be9a:	97 e1       	ldi	r25, 0x17	; 23
   1be9c:	ed b7       	in	r30, 0x3d	; 61
   1be9e:	fe b7       	in	r31, 0x3e	; 62
   1bea0:	95 83       	std	Z+5, r25	; 0x05
   1bea2:	84 83       	std	Z+4, r24	; 0x04
   1bea4:	81 e3       	ldi	r24, 0x31	; 49
   1bea6:	96 e4       	ldi	r25, 0x46	; 70
   1bea8:	a0 e0       	ldi	r26, 0x00	; 0
   1beaa:	81 83       	std	Z+1, r24	; 0x01
   1beac:	92 83       	std	Z+2, r25	; 0x02
   1beae:	a3 83       	std	Z+3, r26	; 0x03
   1beb0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1beb4:	67 c0       	rjmp	.+206    	; 0x1bf84 <user_task.part.1+0x1fe>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1beb6:	6b e3       	ldi	r22, 0x3B	; 59
   1beb8:	77 e1       	ldi	r23, 0x17	; 23
   1beba:	c8 01       	movw	r24, r16
   1bebc:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1bec0:	89 2b       	or	r24, r25
   1bec2:	f1 f0       	breq	.+60     	; 0x1bf00 <user_task.part.1+0x17a>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1bec4:	c8 5f       	subi	r28, 0xF8	; 248
   1bec6:	de 4f       	sbci	r29, 0xFE	; 254
   1bec8:	e8 81       	ld	r30, Y
   1beca:	f9 81       	ldd	r31, Y+1	; 0x01
   1becc:	c8 50       	subi	r28, 0x08	; 8
   1bece:	d1 40       	sbci	r29, 0x01	; 1
   1bed0:	80 81       	ld	r24, Z
   1bed2:	8d 33       	cpi	r24, 0x3D	; 61
   1bed4:	19 f4       	brne	.+6      	; 0x1bedc <user_task.part.1+0x156>
            ++ind;
   1bed6:	82 e0       	ldi	r24, 0x02	; 2
   1bed8:	90 e0       	ldi	r25, 0x00	; 0
   1beda:	02 c0       	rjmp	.+4      	; 0x1bee0 <user_task.part.1+0x15a>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1bedc:	81 e0       	ldi	r24, 0x01	; 1
   1bede:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1bee0:	88 0f       	add	r24, r24
   1bee2:	99 1f       	adc	r25, r25
   1bee4:	e6 e0       	ldi	r30, 0x06	; 6
   1bee6:	f1 e0       	ldi	r31, 0x01	; 1
   1bee8:	ec 0f       	add	r30, r28
   1beea:	fd 1f       	adc	r31, r29
   1beec:	e8 0f       	add	r30, r24
   1beee:	f9 1f       	adc	r31, r25
   1bef0:	80 81       	ld	r24, Z
   1bef2:	91 81       	ldd	r25, Z+1	; 0x01
   1bef4:	0e 94 98 31 	call	0x6330	; 0x6330 <get_value>
		result = lcd_backlight(rgb);
   1bef8:	0d de       	rcall	.-998    	; 0x1bb14 <lcd_backlight>
   1befa:	08 2f       	mov	r16, r24
   1befc:	10 e0       	ldi	r17, 0x00	; 0
   1befe:	44 c0       	rjmp	.+136    	; 0x1bf88 <user_task.part.1+0x202>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1bf00:	65 e4       	ldi	r22, 0x45	; 69
   1bf02:	77 e1       	ldi	r23, 0x17	; 23
   1bf04:	c8 01       	movw	r24, r16
   1bf06:	0e 94 8d 30 	call	0x611a	; 0x611a <MATCH>
   1bf0a:	89 2b       	or	r24, r25
   1bf0c:	19 f0       	breq	.+6      	; 0x1bf14 <user_task.part.1+0x18e>
    {
        PrintFree();
   1bf0e:	0e 94 6f 25 	call	0x4ade	; 0x4ade <PrintFree>
   1bf12:	38 c0       	rjmp	.+112    	; 0x1bf84 <user_task.part.1+0x1fe>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1bf14:	60 ee       	ldi	r22, 0xE0	; 224
   1bf16:	7d e0       	ldi	r23, 0x0D	; 13
   1bf18:	c8 01       	movw	r24, r16
   1bf1a:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1bf1e:	89 2b       	or	r24, r25
   1bf20:	51 f0       	breq	.+20     	; 0x1bf36 <user_task.part.1+0x1b0>
    {
        cli();
   1bf22:	f8 94       	cli
        uart_rx_flush(0);
   1bf24:	80 e0       	ldi	r24, 0x00	; 0
   1bf26:	0e 94 f6 26 	call	0x4dec	; 0x4dec <uart_rx_flush>
        cli();
   1bf2a:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1bf2c:	82 e0       	ldi	r24, 0x02	; 2
   1bf2e:	84 bf       	out	0x34, r24	; 52
        RESET();
   1bf30:	e0 e0       	ldi	r30, 0x00	; 0
   1bf32:	fc ef       	ldi	r31, 0xFC	; 252
   1bf34:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1bf36:	69 e4       	ldi	r22, 0x49	; 73
   1bf38:	77 e1       	ldi	r23, 0x17	; 23
   1bf3a:	c8 01       	movw	r24, r16
   1bf3c:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1bf40:	89 2b       	or	r24, r25
   1bf42:	19 f0       	breq	.+6      	; 0x1bf4a <user_task.part.1+0x1c4>
    {
        setdate();
   1bf44:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <setdate>
   1bf48:	07 c0       	rjmp	.+14     	; 0x1bf58 <user_task.part.1+0x1d2>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1bf4a:	61 e5       	ldi	r22, 0x51	; 81
   1bf4c:	77 e1       	ldi	r23, 0x17	; 23
   1bf4e:	c8 01       	movw	r24, r16
   1bf50:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1bf54:	89 2b       	or	r24, r25
   1bf56:	19 f0       	breq	.+6      	; 0x1bf5e <user_task.part.1+0x1d8>
    {
        display_clock();
   1bf58:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <display_clock>
   1bf5c:	13 c0       	rjmp	.+38     	; 0x1bf84 <user_task.part.1+0x1fe>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bf5e:	6d e7       	ldi	r22, 0x7D	; 125
   1bf60:	76 e1       	ldi	r23, 0x16	; 22
   1bf62:	c8 01       	movw	r24, r16
   1bf64:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1bf68:	89 2b       	or	r24, r25
    {
        help();
   1bf6a:	11 f0       	breq	.+4      	; 0x1bf70 <user_task.part.1+0x1ea>
   1bf6c:	eb de       	rcall	.-554    	; 0x1bd44 <help>
   1bf6e:	0a c0       	rjmp	.+20     	; 0x1bf84 <user_task.part.1+0x1fe>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bf70:	63 e8       	ldi	r22, 0x83	; 131
   1bf72:	76 e1       	ldi	r23, 0x16	; 22
   1bf74:	c8 01       	movw	r24, r16
   1bf76:	0e 94 a1 30 	call	0x6142	; 0x6142 <MATCHI>
   1bf7a:	89 2b       	or	r24, r25
   1bf7c:	b9 f7       	brne	.-18     	; 0x1bf6c <user_task.part.1+0x1e6>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1bf7e:	00 e0       	ldi	r16, 0x00	; 0
   1bf80:	10 e0       	ldi	r17, 0x00	; 0
   1bf82:	02 c0       	rjmp	.+4      	; 0x1bf88 <user_task.part.1+0x202>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1bf84:	01 e0       	ldi	r16, 0x01	; 1
   1bf86:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

	if( (ret = gpib_tests(argc,argv)) )
   1bf88:	be 01       	movw	r22, r28
   1bf8a:	6a 5f       	subi	r22, 0xFA	; 250
   1bf8c:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf8e:	c7 01       	movw	r24, r14
   1bf90:	0e 94 33 90 	call	0x12066	; 0x12066 <gpib_tests>
   1bf94:	00 97       	sbiw	r24, 0x00	; 0
   1bf96:	51 f0       	breq	.+20     	; 0x1bfac <user_task.part.1+0x226>
    {
		if(ret < 0)
   1bf98:	97 fd       	sbrc	r25, 7
   1bf9a:	03 c0       	rjmp	.+6      	; 0x1bfa2 <user_task.part.1+0x21c>
			result = -1;
		else
			result = 1;
   1bf9c:	01 e0       	ldi	r16, 0x01	; 1
   1bf9e:	10 e0       	ldi	r17, 0x00	; 0
   1bfa0:	02 c0       	rjmp	.+4      	; 0x1bfa6 <user_task.part.1+0x220>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1bfa2:	0f ef       	ldi	r16, 0xFF	; 255
   1bfa4:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1bfa6:	0e 94 47 8b 	call	0x1168e	; 0x1168e <gpib_init_devices>
   1bfaa:	0f c0       	rjmp	.+30     	; 0x1bfca <user_task.part.1+0x244>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1bfac:	be 01       	movw	r22, r28
   1bfae:	6a 5f       	subi	r22, 0xFA	; 250
   1bfb0:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfb2:	c7 01       	movw	r24, r14
   1bfb4:	0e 94 20 80 	call	0x10040	; 0x10040 <posix_tests>
   1bfb8:	00 97       	sbiw	r24, 0x00	; 0
   1bfba:	39 f0       	breq	.+14     	; 0x1bfca <user_task.part.1+0x244>
	{
		if(ret < 0)
   1bfbc:	97 fd       	sbrc	r25, 7
   1bfbe:	03 c0       	rjmp	.+6      	; 0x1bfc6 <user_task.part.1+0x240>
			result = -1;
		else
			result = 1;
   1bfc0:	01 e0       	ldi	r16, 0x01	; 1
   1bfc2:	10 e0       	ldi	r17, 0x00	; 0
   1bfc4:	02 c0       	rjmp	.+4      	; 0x1bfca <user_task.part.1+0x244>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1bfc6:	0f ef       	ldi	r16, 0xFF	; 255
   1bfc8:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1bfca:	be 01       	movw	r22, r28
   1bfcc:	6a 5f       	subi	r22, 0xFA	; 250
   1bfce:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfd0:	c7 01       	movw	r24, r14
   1bfd2:	0e 94 98 72 	call	0xe530	; 0xe530 <fatfs_tests>
   1bfd6:	00 97       	sbiw	r24, 0x00	; 0
   1bfd8:	39 f0       	breq	.+14     	; 0x1bfe8 <user_task.part.1+0x262>
	{
		if(ret < 0)
   1bfda:	97 fd       	sbrc	r25, 7
   1bfdc:	03 c0       	rjmp	.+6      	; 0x1bfe4 <user_task.part.1+0x25e>
			result = -1;
		else
			result = 1;
   1bfde:	01 e0       	ldi	r16, 0x01	; 1
   1bfe0:	10 e0       	ldi	r17, 0x00	; 0
   1bfe2:	02 c0       	rjmp	.+4      	; 0x1bfe8 <user_task.part.1+0x262>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1bfe4:	0f ef       	ldi	r16, 0xFF	; 255
   1bfe6:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1bfe8:	be 01       	movw	r22, r28
   1bfea:	6a 5f       	subi	r22, 0xFA	; 250
   1bfec:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfee:	c7 01       	movw	r24, r14
   1bff0:	68 db       	rcall	.-2352   	; 0x1b6c2 <lif_tests>
   1bff2:	00 97       	sbiw	r24, 0x00	; 0
   1bff4:	19 f0       	breq	.+6      	; 0x1bffc <user_task.part.1+0x276>
	{
		if(ret < 0)
   1bff6:	97 ff       	sbrs	r25, 7
   1bff8:	04 c0       	rjmp	.+8      	; 0x1c002 <user_task.part.1+0x27c>
   1bffa:	09 c0       	rjmp	.+18     	; 0x1c00e <user_task.part.1+0x288>
			result = -1;
		else
			result = 1;
	}
#endif
    if(result == 1)
   1bffc:	01 30       	cpi	r16, 0x01	; 1
   1bffe:	11 05       	cpc	r17, r1
   1c000:	19 f4       	brne	.+6      	; 0x1c008 <user_task.part.1+0x282>
        printf("OK\n");
   1c002:	8d e2       	ldi	r24, 0x2D	; 45
   1c004:	96 e4       	ldi	r25, 0x46	; 70
   1c006:	05 c0       	rjmp	.+10     	; 0x1c012 <user_task.part.1+0x28c>
	else if(result == -1)
   1c008:	0f 3f       	cpi	r16, 0xFF	; 255
   1c00a:	1f 4f       	sbci	r17, 0xFF	; 255
   1c00c:	59 f4       	brne	.+22     	; 0x1c024 <user_task.part.1+0x29e>
        printf("Command FAILED\n");
   1c00e:	8d e1       	ldi	r24, 0x1D	; 29
   1c010:	96 e4       	ldi	r25, 0x46	; 70
   1c012:	a0 e0       	ldi	r26, 0x00	; 0
   1c014:	ed b7       	in	r30, 0x3d	; 61
   1c016:	fe b7       	in	r31, 0x3e	; 62
   1c018:	81 83       	std	Z+1, r24	; 0x01
   1c01a:	92 83       	std	Z+2, r25	; 0x02
   1c01c:	a3 83       	std	Z+3, r26	; 0x03
   1c01e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1c022:	33 c0       	rjmp	.+102    	; 0x1c08a <user_task.part.1+0x304>
    else
	{
        printf("Invalid Command\n");
   1c024:	8c e0       	ldi	r24, 0x0C	; 12
   1c026:	96 e4       	ldi	r25, 0x46	; 70
   1c028:	a0 e0       	ldi	r26, 0x00	; 0
   1c02a:	ed b7       	in	r30, 0x3d	; 61
   1c02c:	fe b7       	in	r31, 0x3e	; 62
   1c02e:	81 83       	std	Z+1, r24	; 0x01
   1c030:	92 83       	std	Z+2, r25	; 0x02
   1c032:	a3 83       	std	Z+3, r26	; 0x03
   1c034:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("Argument count = %d\n", argc);
   1c038:	ed b7       	in	r30, 0x3d	; 61
   1c03a:	fe b7       	in	r31, 0x3e	; 62
   1c03c:	f5 82       	std	Z+5, r15	; 0x05
   1c03e:	e4 82       	std	Z+4, r14	; 0x04
   1c040:	87 ef       	ldi	r24, 0xF7	; 247
   1c042:	95 e4       	ldi	r25, 0x45	; 69
   1c044:	a0 e0       	ldi	r26, 0x00	; 0
   1c046:	81 83       	std	Z+1, r24	; 0x01
   1c048:	92 83       	std	Z+2, r25	; 0x02
   1c04a:	a3 83       	std	Z+3, r26	; 0x03
   1c04c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
   1c050:	8e 01       	movw	r16, r28
   1c052:	0a 5f       	subi	r16, 0xFA	; 250
   1c054:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c056:	c1 2c       	mov	r12, r1
   1c058:	d1 2c       	mov	r13, r1
			printf("   [%s]\n", argv[i]);
   1c05a:	8e ee       	ldi	r24, 0xEE	; 238
   1c05c:	95 e4       	ldi	r25, 0x45	; 69
   1c05e:	3c 01       	movw	r6, r24
   1c060:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c062:	ce 14       	cp	r12, r14
   1c064:	df 04       	cpc	r13, r15
   1c066:	8c f4       	brge	.+34     	; 0x1c08a <user_task.part.1+0x304>
			printf("   [%s]\n", argv[i]);
   1c068:	f8 01       	movw	r30, r16
   1c06a:	81 91       	ld	r24, Z+
   1c06c:	91 91       	ld	r25, Z+
   1c06e:	8f 01       	movw	r16, r30
   1c070:	ed b7       	in	r30, 0x3d	; 61
   1c072:	fe b7       	in	r31, 0x3e	; 62
   1c074:	95 83       	std	Z+5, r25	; 0x05
   1c076:	84 83       	std	Z+4, r24	; 0x04
   1c078:	61 82       	std	Z+1, r6	; 0x01
   1c07a:	72 82       	std	Z+2, r7	; 0x02
   1c07c:	83 82       	std	Z+3, r8	; 0x03
   1c07e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c082:	ff ef       	ldi	r31, 0xFF	; 255
   1c084:	cf 1a       	sub	r12, r31
   1c086:	df 0a       	sbc	r13, r31
   1c088:	ec cf       	rjmp	.-40     	; 0x1c062 <user_task.part.1+0x2dc>
			printf("   [%s]\n", argv[i]);
	}
}
   1c08a:	c5 59       	subi	r28, 0x95	; 149
   1c08c:	de 4f       	sbci	r29, 0xFE	; 254
   1c08e:	0f b6       	in	r0, 0x3f	; 63
   1c090:	f8 94       	cli
   1c092:	de bf       	out	0x3e, r29	; 62
   1c094:	0f be       	out	0x3f, r0	; 63
   1c096:	cd bf       	out	0x3d, r28	; 61
   1c098:	df 91       	pop	r29
   1c09a:	cf 91       	pop	r28
   1c09c:	1f 91       	pop	r17
   1c09e:	0f 91       	pop	r16
   1c0a0:	ff 90       	pop	r15
   1c0a2:	ef 90       	pop	r14
   1c0a4:	df 90       	pop	r13
   1c0a6:	cf 90       	pop	r12
   1c0a8:	8f 90       	pop	r8
   1c0aa:	7f 90       	pop	r7
   1c0ac:	6f 90       	pop	r6
   1c0ae:	08 95       	ret

0001c0b0 <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c0b0:	81 11       	cpse	r24, r1
        gpib_task();
   1c0b2:	0e 94 b2 8f 	call	0x11f64	; 0x11f64 <gpib_task>

    if(!kbhit(0))
   1c0b6:	80 e0       	ldi	r24, 0x00	; 0
   1c0b8:	0e 94 36 28 	call	0x506c	; 0x506c <uart_rx_count>
   1c0bc:	89 2b       	or	r24, r25
   1c0be:	09 f0       	breq	.+2      	; 0x1c0c2 <user_task+0x12>
   1c0c0:	62 ce       	rjmp	.-828    	; 0x1bd86 <user_task.part.1>
   1c0c2:	08 95       	ret

0001c0c4 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c0c4:	a3 e3       	ldi	r26, 0x33	; 51
   1c0c6:	b0 e0       	ldi	r27, 0x00	; 0
   1c0c8:	e7 e6       	ldi	r30, 0x67	; 103
   1c0ca:	f0 ee       	ldi	r31, 0xE0	; 224
   1c0cc:	8f c2       	rjmp	.+1310   	; 0x1c5ec <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c0ce:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c0d2:	46 98       	cbi	0x08, 6	; 8
   1c0d4:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c0d6:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c0da:	40 e0       	ldi	r20, 0x00	; 0
   1c0dc:	52 ec       	ldi	r21, 0xC2	; 194
   1c0de:	61 e0       	ldi	r22, 0x01	; 1
   1c0e0:	70 e0       	ldi	r23, 0x00	; 0
   1c0e2:	80 e0       	ldi	r24, 0x00	; 0
   1c0e4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <uart_init>
   1c0e8:	6b 01       	movw	r12, r22
   1c0ea:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c0ec:	68 ec       	ldi	r22, 0xC8	; 200
   1c0ee:	70 e0       	ldi	r23, 0x00	; 0
   1c0f0:	80 e0       	ldi	r24, 0x00	; 0
   1c0f2:	90 e0       	ldi	r25, 0x00	; 0
   1c0f4:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <delayms>

    sep();
   1c0f8:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>
    printf("Start\n");
   1c0fc:	87 ee       	ldi	r24, 0xE7	; 231
   1c0fe:	95 e4       	ldi	r25, 0x45	; 69
   1c100:	a0 e0       	ldi	r26, 0x00	; 0
   1c102:	ed b7       	in	r30, 0x3d	; 61
   1c104:	fe b7       	in	r31, 0x3e	; 62
   1c106:	81 83       	std	Z+1, r24	; 0x01
   1c108:	92 83       	std	Z+2, r25	; 0x02
   1c10a:	a3 83       	std	Z+3, r26	; 0x03
   1c10c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c110:	80 e0       	ldi	r24, 0x00	; 0
   1c112:	9d e2       	ldi	r25, 0x2D	; 45
   1c114:	a1 e3       	ldi	r26, 0x31	; 49
   1c116:	b1 e0       	ldi	r27, 0x01	; 1
   1c118:	ed b7       	in	r30, 0x3d	; 61
   1c11a:	fe b7       	in	r31, 0x3e	; 62
   1c11c:	84 83       	std	Z+4, r24	; 0x04
   1c11e:	95 83       	std	Z+5, r25	; 0x05
   1c120:	a6 83       	std	Z+6, r26	; 0x06
   1c122:	b7 83       	std	Z+7, r27	; 0x07
   1c124:	86 ed       	ldi	r24, 0xD6	; 214
   1c126:	95 e4       	ldi	r25, 0x45	; 69
   1c128:	a0 e0       	ldi	r26, 0x00	; 0
   1c12a:	81 83       	std	Z+1, r24	; 0x01
   1c12c:	92 83       	std	Z+2, r25	; 0x02
   1c12e:	a3 83       	std	Z+3, r26	; 0x03
   1c130:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c134:	ed b7       	in	r30, 0x3d	; 61
   1c136:	fe b7       	in	r31, 0x3e	; 62
   1c138:	c0 86       	std	Z+8, r12	; 0x08
   1c13a:	d1 86       	std	Z+9, r13	; 0x09
   1c13c:	e2 86       	std	Z+10, r14	; 0x0a
   1c13e:	f3 86       	std	Z+11, r15	; 0x0b
   1c140:	80 e0       	ldi	r24, 0x00	; 0
   1c142:	92 ec       	ldi	r25, 0xC2	; 194
   1c144:	a1 e0       	ldi	r26, 0x01	; 1
   1c146:	b0 e0       	ldi	r27, 0x00	; 0
   1c148:	84 83       	std	Z+4, r24	; 0x04
   1c14a:	95 83       	std	Z+5, r25	; 0x05
   1c14c:	a6 83       	std	Z+6, r26	; 0x06
   1c14e:	b7 83       	std	Z+7, r27	; 0x07
   1c150:	8f ea       	ldi	r24, 0xAF	; 175
   1c152:	95 e4       	ldi	r25, 0x45	; 69
   1c154:	a0 e0       	ldi	r26, 0x00	; 0
   1c156:	81 83       	std	Z+1, r24	; 0x01
   1c158:	92 83       	std	Z+2, r25	; 0x02
   1c15a:	a3 83       	std	Z+3, r26	; 0x03
   1c15c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    init_timers();
   1c160:	0e 94 49 34 	call	0x6892	; 0x6892 <init_timers>

    sep();
   1c164:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c168:	80 e9       	ldi	r24, 0x90	; 144
   1c16a:	95 e4       	ldi	r25, 0x45	; 69
   1c16c:	a0 e0       	ldi	r26, 0x00	; 0
   1c16e:	ed b7       	in	r30, 0x3d	; 61
   1c170:	fe b7       	in	r31, 0x3e	; 62
   1c172:	81 83       	std	Z+1, r24	; 0x01
   1c174:	92 83       	std	Z+2, r25	; 0x02
   1c176:	a3 83       	std	Z+3, r26	; 0x03
   1c178:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c17c:	83 e7       	ldi	r24, 0x73	; 115
   1c17e:	95 e4       	ldi	r25, 0x45	; 69
   1c180:	a0 e0       	ldi	r26, 0x00	; 0
   1c182:	ed b7       	in	r30, 0x3d	; 61
   1c184:	fe b7       	in	r31, 0x3e	; 62
   1c186:	81 83       	std	Z+1, r24	; 0x01
   1c188:	92 83       	std	Z+2, r25	; 0x02
   1c18a:	a3 83       	std	Z+3, r26	; 0x03
   1c18c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf(" GNU version 3\n");
   1c190:	83 e6       	ldi	r24, 0x63	; 99
   1c192:	95 e4       	ldi	r25, 0x45	; 69
   1c194:	a0 e0       	ldi	r26, 0x00	; 0
   1c196:	ed b7       	in	r30, 0x3d	; 61
   1c198:	fe b7       	in	r31, 0x3e	; 62
   1c19a:	81 83       	std	Z+1, r24	; 0x01
   1c19c:	92 83       	std	Z+2, r25	; 0x02
   1c19e:	a3 83       	std	Z+3, r26	; 0x03
   1c1a0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c1a4:	8c e3       	ldi	r24, 0x3C	; 60
   1c1a6:	95 e4       	ldi	r25, 0x45	; 69
   1c1a8:	a0 e0       	ldi	r26, 0x00	; 0
   1c1aa:	ed b7       	in	r30, 0x3d	; 61
   1c1ac:	fe b7       	in	r31, 0x3e	; 62
   1c1ae:	81 83       	std	Z+1, r24	; 0x01
   1c1b0:	92 83       	std	Z+2, r25	; 0x02
   1c1b2:	a3 83       	std	Z+3, r26	; 0x03
   1c1b4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c1b8:	8f eb       	ldi	r24, 0xBF	; 191
   1c1ba:	96 e1       	ldi	r25, 0x16	; 22
   1c1bc:	ed b7       	in	r30, 0x3d	; 61
   1c1be:	fe b7       	in	r31, 0x3e	; 62
   1c1c0:	95 83       	std	Z+5, r25	; 0x05
   1c1c2:	84 83       	std	Z+4, r24	; 0x04
   1c1c4:	82 e2       	ldi	r24, 0x22	; 34
   1c1c6:	95 e4       	ldi	r25, 0x45	; 69
   1c1c8:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ca:	81 83       	std	Z+1, r24	; 0x01
   1c1cc:	92 83       	std	Z+2, r25	; 0x02
   1c1ce:	a3 83       	std	Z+3, r26	; 0x03
   1c1d0:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c1d4:	83 ee       	ldi	r24, 0xE3	; 227
   1c1d6:	96 e1       	ldi	r25, 0x16	; 22
   1c1d8:	ed b7       	in	r30, 0x3d	; 61
   1c1da:	fe b7       	in	r31, 0x3e	; 62
   1c1dc:	95 83       	std	Z+5, r25	; 0x05
   1c1de:	84 83       	std	Z+4, r24	; 0x04
   1c1e0:	88 e0       	ldi	r24, 0x08	; 8
   1c1e2:	95 e4       	ldi	r25, 0x45	; 69
   1c1e4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e6:	81 83       	std	Z+1, r24	; 0x01
   1c1e8:	92 83       	std	Z+2, r25	; 0x02
   1c1ea:	a3 83       	std	Z+3, r26	; 0x03
   1c1ec:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

    sep();
   1c1f0:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>
    PrintFree();
   1c1f4:	0e 94 6f 25 	call	0x4ade	; 0x4ade <PrintFree>

    sep();
   1c1f8:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c1fc:	82 ef       	ldi	r24, 0xF2	; 242
   1c1fe:	94 e4       	ldi	r25, 0x44	; 68
   1c200:	a0 e0       	ldi	r26, 0x00	; 0
   1c202:	ed b7       	in	r30, 0x3d	; 61
   1c204:	fe b7       	in	r31, 0x3e	; 62
   1c206:	81 83       	std	Z+1, r24	; 0x01
   1c208:	92 83       	std	Z+2, r25	; 0x02
   1c20a:	a3 83       	std	Z+3, r26	; 0x03
   1c20c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c210:	4b e0       	ldi	r20, 0x0B	; 11
   1c212:	50 e0       	ldi	r21, 0x00	; 0
   1c214:	60 e2       	ldi	r22, 0x20	; 32
   1c216:	71 ea       	ldi	r23, 0xA1	; 161
   1c218:	87 e0       	ldi	r24, 0x07	; 7
   1c21a:	90 e0       	ldi	r25, 0x00	; 0
   1c21c:	0e 94 d5 24 	call	0x49aa	; 0x49aa <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c220:	8c ed       	ldi	r24, 0xDC	; 220
   1c222:	94 e4       	ldi	r25, 0x44	; 68
   1c224:	a0 e0       	ldi	r26, 0x00	; 0
   1c226:	ed b7       	in	r30, 0x3d	; 61
   1c228:	fe b7       	in	r31, 0x3e	; 62
   1c22a:	81 83       	std	Z+1, r24	; 0x01
   1c22c:	92 83       	std	Z+2, r25	; 0x02
   1c22e:	a3 83       	std	Z+3, r26	; 0x03
   1c230:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
	i2c_init(100000);
   1c234:	60 ea       	ldi	r22, 0xA0	; 160
   1c236:	76 e8       	ldi	r23, 0x86	; 134
   1c238:	81 e0       	ldi	r24, 0x01	; 1
   1c23a:	90 e0       	ldi	r25, 0x00	; 0
   1c23c:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <i2c_init>
    sep();
   1c240:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c244:	8a ec       	ldi	r24, 0xCA	; 202
   1c246:	94 e4       	ldi	r25, 0x44	; 68
   1c248:	a0 e0       	ldi	r26, 0x00	; 0
   1c24a:	ed b7       	in	r30, 0x3d	; 61
   1c24c:	fe b7       	in	r31, 0x3e	; 62
   1c24e:	81 83       	std	Z+1, r24	; 0x01
   1c250:	92 83       	std	Z+2, r25	; 0x02
   1c252:	a3 83       	std	Z+3, r26	; 0x03
   1c254:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    clock_clear();
   1c258:	0e 94 06 34 	call	0x680c	; 0x680c <clock_clear>
    printf("Clock cleared\n");
   1c25c:	8b eb       	ldi	r24, 0xBB	; 187
   1c25e:	94 e4       	ldi	r25, 0x44	; 68
   1c260:	a0 e0       	ldi	r26, 0x00	; 0
   1c262:	ed b7       	in	r30, 0x3d	; 61
   1c264:	fe b7       	in	r31, 0x3e	; 62
   1c266:	81 83       	std	Z+1, r24	; 0x01
   1c268:	92 83       	std	Z+2, r25	; 0x02
   1c26a:	a3 83       	std	Z+3, r26	; 0x03
   1c26c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c270:	be 01       	movw	r22, r28
   1c272:	64 5d       	subi	r22, 0xD4	; 212
   1c274:	7f 4f       	sbci	r23, 0xFF	; 255
   1c276:	80 e0       	ldi	r24, 0x00	; 0
   1c278:	90 e0       	ldi	r25, 0x00	; 0
   1c27a:	0e 94 a6 34 	call	0x694c	; 0x694c <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c27e:	88 a9       	ldd	r24, Y+48	; 0x30
   1c280:	99 a9       	ldd	r25, Y+49	; 0x31
   1c282:	aa a9       	ldd	r26, Y+50	; 0x32
   1c284:	bb a9       	ldd	r27, Y+51	; 0x33
   1c286:	ed b7       	in	r30, 0x3d	; 61
   1c288:	fe b7       	in	r31, 0x3e	; 62
   1c28a:	84 83       	std	Z+4, r24	; 0x04
   1c28c:	95 83       	std	Z+5, r25	; 0x05
   1c28e:	a6 83       	std	Z+6, r26	; 0x06
   1c290:	b7 83       	std	Z+7, r27	; 0x07
   1c292:	8d e8       	ldi	r24, 0x8D	; 141
   1c294:	94 e4       	ldi	r25, 0x44	; 68
   1c296:	a0 e0       	ldi	r26, 0x00	; 0
   1c298:	81 83       	std	Z+1, r24	; 0x01
   1c29a:	92 83       	std	Z+2, r25	; 0x02
   1c29c:	a3 83       	std	Z+3, r26	; 0x03
   1c29e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c2a2:	80 e0       	ldi	r24, 0x00	; 0
   1c2a4:	90 e0       	ldi	r25, 0x00	; 0
   1c2a6:	0e 94 81 3b 	call	0x7702	; 0x7702 <initialize_clock>
    display_clock();
   1c2aa:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <display_clock>
    sep();
   1c2ae:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c2b2:	57 dc       	rcall	.-1874   	; 0x1bb62 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c2b4:	85 e7       	ldi	r24, 0x75	; 117
   1c2b6:	94 e4       	ldi	r25, 0x44	; 68
   1c2b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ba:	ed b7       	in	r30, 0x3d	; 61
   1c2bc:	fe b7       	in	r31, 0x3e	; 62
   1c2be:	81 83       	std	Z+1, r24	; 0x01
   1c2c0:	92 83       	std	Z+2, r25	; 0x02
   1c2c2:	a3 83       	std	Z+3, r26	; 0x03
   1c2c4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    if ( !mmc_init(1) )
   1c2c8:	81 e0       	ldi	r24, 0x01	; 1
   1c2ca:	90 e0       	ldi	r25, 0x00	; 0
   1c2cc:	0e 94 73 6d 	call	0xdae6	; 0xdae6 <mmc_init>
   1c2d0:	89 2b       	or	r24, r25
   1c2d2:	51 f4       	brne	.+20     	; 0x1c2e8 <main+0x224>
		printf("MMC initialized\n");
   1c2d4:	84 e6       	ldi	r24, 0x64	; 100
   1c2d6:	94 e4       	ldi	r25, 0x44	; 68
   1c2d8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2da:	ed b7       	in	r30, 0x3d	; 61
   1c2dc:	fe b7       	in	r31, 0x3e	; 62
   1c2de:	81 83       	std	Z+1, r24	; 0x01
   1c2e0:	92 83       	std	Z+2, r25	; 0x02
   1c2e2:	a3 83       	std	Z+3, r26	; 0x03
   1c2e4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    sep();
   1c2e8:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c2ec:	0e 94 fa 83 	call	0x107f4	; 0x107f4 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c2f0:	8e e4       	ldi	r24, 0x4E	; 78
   1c2f2:	94 e4       	ldi	r25, 0x44	; 68
   1c2f4:	a0 e0       	ldi	r26, 0x00	; 0
   1c2f6:	ed b7       	in	r30, 0x3d	; 61
   1c2f8:	fe b7       	in	r31, 0x3e	; 62
   1c2fa:	81 83       	std	Z+1, r24	; 0x01
   1c2fc:	92 83       	std	Z+2, r25	; 0x02
   1c2fe:	a3 83       	std	Z+3, r26	; 0x03
   1c300:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c304:	0e 94 a7 ba 	call	0x1754e	; 0x1754e <printer_init>
    printf("Printer initialized\n");
   1c308:	89 e3       	ldi	r24, 0x39	; 57
   1c30a:	94 e4       	ldi	r25, 0x44	; 68
   1c30c:	a0 e0       	ldi	r26, 0x00	; 0
   1c30e:	ed b7       	in	r30, 0x3d	; 61
   1c310:	fe b7       	in	r31, 0x3e	; 62
   1c312:	81 83       	std	Z+1, r24	; 0x01
   1c314:	92 83       	std	Z+2, r25	; 0x02
   1c316:	a3 83       	std	Z+3, r26	; 0x03
   1c318:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c31c:	87 e2       	ldi	r24, 0x27	; 39
   1c31e:	94 e4       	ldi	r25, 0x44	; 68
   1c320:	a0 e0       	ldi	r26, 0x00	; 0
   1c322:	ed b7       	in	r30, 0x3d	; 61
   1c324:	fe b7       	in	r31, 0x3e	; 62
   1c326:	81 83       	std	Z+1, r24	; 0x01
   1c328:	92 83       	std	Z+2, r25	; 0x02
   1c32a:	a3 83       	std	Z+3, r26	; 0x03
   1c32c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    gpib_timer_init();
   1c330:	0e 94 0e 82 	call	0x1041c	; 0x1041c <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c334:	8f e0       	ldi	r24, 0x0F	; 15
   1c336:	94 e4       	ldi	r25, 0x44	; 68
   1c338:	a0 e0       	ldi	r26, 0x00	; 0
   1c33a:	ed b7       	in	r30, 0x3d	; 61
   1c33c:	fe b7       	in	r31, 0x3e	; 62
   1c33e:	81 83       	std	Z+1, r24	; 0x01
   1c340:	92 83       	std	Z+2, r25	; 0x02
   1c342:	a3 83       	std	Z+3, r26	; 0x03
   1c344:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c348:	0e 94 72 8a 	call	0x114e4	; 0x114e4 <gpib_file_init>
    printf("GPIB File init done\n");
   1c34c:	8a ef       	ldi	r24, 0xFA	; 250
   1c34e:	93 e4       	ldi	r25, 0x43	; 67
   1c350:	a0 e0       	ldi	r26, 0x00	; 0
   1c352:	ed b7       	in	r30, 0x3d	; 61
   1c354:	fe b7       	in	r31, 0x3e	; 62
   1c356:	81 83       	std	Z+1, r24	; 0x01
   1c358:	92 83       	std	Z+2, r25	; 0x02
   1c35a:	a3 83       	std	Z+3, r26	; 0x03
   1c35c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c360:	0e 94 62 84 	call	0x108c4	; 0x108c4 <gpib_state_init>
    printf("GPIB State init done\n");
   1c364:	84 ee       	ldi	r24, 0xE4	; 228
   1c366:	93 e4       	ldi	r25, 0x43	; 67
   1c368:	a0 e0       	ldi	r26, 0x00	; 0
   1c36a:	ed b7       	in	r30, 0x3d	; 61
   1c36c:	fe b7       	in	r31, 0x3e	; 62
   1c36e:	81 83       	std	Z+1, r24	; 0x01
   1c370:	92 83       	std	Z+2, r25	; 0x02
   1c372:	a3 83       	std	Z+3, r26	; 0x03
   1c374:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    sep();
   1c378:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c37c:	80 e0       	ldi	r24, 0x00	; 0
   1c37e:	90 e0       	ldi	r25, 0x00	; 0
   1c380:	0e 94 02 92 	call	0x12404	; 0x12404 <display_Addresses>
    sep();
   1c384:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c388:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c38c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c390:	ed b7       	in	r30, 0x3d	; 61
   1c392:	fe b7       	in	r31, 0x3e	; 62
   1c394:	95 83       	std	Z+5, r25	; 0x05
   1c396:	84 83       	std	Z+4, r24	; 0x04
   1c398:	8e ec       	ldi	r24, 0xCE	; 206
   1c39a:	93 e4       	ldi	r25, 0x43	; 67
   1c39c:	a0 e0       	ldi	r26, 0x00	; 0
   1c39e:	81 83       	std	Z+1, r24	; 0x01
   1c3a0:	92 83       	std	Z+2, r25	; 0x02
   1c3a2:	a3 83       	std	Z+3, r26	; 0x03
   1c3a4:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
    sep();
   1c3a8:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c3ac:	0e 94 9a 9d 	call	0x13b34	; 0x13b34 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c3b0:	83 e0       	ldi	r24, 0x03	; 3
   1c3b2:	0e 94 77 95 	call	0x12aee	; 0x12aee <count_drive_types>
   1c3b6:	8c 01       	movw	r16, r24
   1c3b8:	81 e0       	ldi	r24, 0x01	; 1
   1c3ba:	0e 94 77 95 	call	0x12aee	; 0x12aee <count_drive_types>
   1c3be:	ed b7       	in	r30, 0x3d	; 61
   1c3c0:	fe b7       	in	r31, 0x3e	; 62
   1c3c2:	91 87       	std	Z+9, r25	; 0x09
   1c3c4:	80 87       	std	Z+8, r24	; 0x08
   1c3c6:	17 83       	std	Z+7, r17	; 0x07
   1c3c8:	06 83       	std	Z+6, r16	; 0x06
   1c3ca:	8d eb       	ldi	r24, 0xBD	; 189
   1c3cc:	93 e4       	ldi	r25, 0x43	; 67
   1c3ce:	a0 e0       	ldi	r26, 0x00	; 0
   1c3d0:	83 83       	std	Z+3, r24	; 0x03
   1c3d2:	94 83       	std	Z+4, r25	; 0x04
   1c3d4:	a5 83       	std	Z+5, r26	; 0x05
   1c3d6:	8e 01       	movw	r16, r28
   1c3d8:	04 5f       	subi	r16, 0xF4	; 244
   1c3da:	1f 4f       	sbci	r17, 0xFF	; 255
   1c3dc:	12 83       	std	Z+2, r17	; 0x02
   1c3de:	01 83       	std	Z+1, r16	; 0x01
   1c3e0:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c3e4:	ed b7       	in	r30, 0x3d	; 61
   1c3e6:	fe b7       	in	r31, 0x3e	; 62
   1c3e8:	17 83       	std	Z+7, r17	; 0x07
   1c3ea:	06 83       	std	Z+6, r16	; 0x06
   1c3ec:	87 eb       	ldi	r24, 0xB7	; 183
   1c3ee:	93 e4       	ldi	r25, 0x43	; 67
   1c3f0:	a0 e0       	ldi	r26, 0x00	; 0
   1c3f2:	83 83       	std	Z+3, r24	; 0x03
   1c3f4:	94 83       	std	Z+4, r25	; 0x04
   1c3f6:	a5 83       	std	Z+5, r26	; 0x05
   1c3f8:	8c e0       	ldi	r24, 0x0C	; 12
   1c3fa:	93 e0       	ldi	r25, 0x03	; 3
   1c3fc:	92 83       	std	Z+2, r25	; 0x02
   1c3fe:	81 83       	std	Z+1, r24	; 0x01
   1c400:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c404:	83 e1       	ldi	r24, 0x13	; 19
   1c406:	97 e1       	ldi	r25, 0x17	; 23
   1c408:	ed b7       	in	r30, 0x3d	; 61
   1c40a:	fe b7       	in	r31, 0x3e	; 62
   1c40c:	97 83       	std	Z+7, r25	; 0x07
   1c40e:	86 83       	std	Z+6, r24	; 0x06
   1c410:	81 eb       	ldi	r24, 0xB1	; 177
   1c412:	93 e4       	ldi	r25, 0x43	; 67
   1c414:	a0 e0       	ldi	r26, 0x00	; 0
   1c416:	83 83       	std	Z+3, r24	; 0x03
   1c418:	94 83       	std	Z+4, r25	; 0x04
   1c41a:	a5 83       	std	Z+5, r26	; 0x05
   1c41c:	85 ef       	ldi	r24, 0xF5	; 245
   1c41e:	92 e0       	ldi	r25, 0x02	; 2
   1c420:	92 83       	std	Z+2, r25	; 0x02
   1c422:	81 83       	std	Z+1, r24	; 0x01
   1c424:	0e 94 40 45 	call	0x8a80	; 0x8a80 <sprintf_P>

	i2c_task_run();
   1c428:	0e 94 08 2b 	call	0x5610	; 0x5610 <i2c_task_run>
	delayms(1000);
   1c42c:	68 ee       	ldi	r22, 0xE8	; 232
   1c42e:	73 e0       	ldi	r23, 0x03	; 3
   1c430:	80 e0       	ldi	r24, 0x00	; 0
   1c432:	90 e0       	ldi	r25, 0x00	; 0
   1c434:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c438:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <i2c_task+0x2>
   1c43c:	88 23       	and	r24, r24
   1c43e:	21 f0       	breq	.+8      	; 0x1c448 <main+0x384>
   1c440:	80 91 81 17 	lds	r24, 0x1781	; 0x801781 <i2c_task+0x3>
   1c444:	88 23       	and	r24, r24
   1c446:	61 f0       	breq	.+24     	; 0x1c460 <main+0x39c>
	{
		i2c_display_task_errors();
   1c448:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c44c:	87 e9       	ldi	r24, 0x97	; 151
   1c44e:	93 e4       	ldi	r25, 0x43	; 67
   1c450:	a0 e0       	ldi	r26, 0x00	; 0
   1c452:	ed b7       	in	r30, 0x3d	; 61
   1c454:	fe b7       	in	r31, 0x3e	; 62
   1c456:	81 83       	std	Z+1, r24	; 0x01
   1c458:	92 83       	std	Z+2, r25	; 0x02
   1c45a:	a3 83       	std	Z+3, r26	; 0x03
   1c45c:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c460:	83 e8       	ldi	r24, 0x83	; 131
   1c462:	93 e4       	ldi	r25, 0x43	; 67
   1c464:	a0 e0       	ldi	r26, 0x00	; 0
   1c466:	ed b7       	in	r30, 0x3d	; 61
   1c468:	fe b7       	in	r31, 0x3e	; 62
   1c46a:	81 83       	std	Z+1, r24	; 0x01
   1c46c:	92 83       	std	Z+2, r25	; 0x02
   1c46e:	a3 83       	std	Z+3, r26	; 0x03
   1c470:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c474:	81 e0       	ldi	r24, 0x01	; 1
   1c476:	1c de       	rcall	.-968    	; 0x1c0b0 <user_task>
   1c478:	fd cf       	rjmp	.-6      	; 0x1c474 <main+0x3b0>

0001c47a <__mulsi3>:
   1c47a:	db 01       	movw	r26, r22
   1c47c:	8f 93       	push	r24
   1c47e:	9f 93       	push	r25
   1c480:	8b d0       	rcall	.+278    	; 0x1c598 <__muluhisi3>
   1c482:	bf 91       	pop	r27
   1c484:	af 91       	pop	r26
   1c486:	a2 9f       	mul	r26, r18
   1c488:	80 0d       	add	r24, r0
   1c48a:	91 1d       	adc	r25, r1
   1c48c:	a3 9f       	mul	r26, r19
   1c48e:	90 0d       	add	r25, r0
   1c490:	b2 9f       	mul	r27, r18
   1c492:	90 0d       	add	r25, r0
   1c494:	11 24       	eor	r1, r1
   1c496:	08 95       	ret

0001c498 <__udivmodqi4>:
   1c498:	99 1b       	sub	r25, r25
   1c49a:	79 e0       	ldi	r23, 0x09	; 9
   1c49c:	04 c0       	rjmp	.+8      	; 0x1c4a6 <__udivmodqi4_ep>

0001c49e <__udivmodqi4_loop>:
   1c49e:	99 1f       	adc	r25, r25
   1c4a0:	96 17       	cp	r25, r22
   1c4a2:	08 f0       	brcs	.+2      	; 0x1c4a6 <__udivmodqi4_ep>
   1c4a4:	96 1b       	sub	r25, r22

0001c4a6 <__udivmodqi4_ep>:
   1c4a6:	88 1f       	adc	r24, r24
   1c4a8:	7a 95       	dec	r23
   1c4aa:	c9 f7       	brne	.-14     	; 0x1c49e <__udivmodqi4_loop>
   1c4ac:	80 95       	com	r24
   1c4ae:	08 95       	ret

0001c4b0 <__udivmodhi4>:
   1c4b0:	aa 1b       	sub	r26, r26
   1c4b2:	bb 1b       	sub	r27, r27
   1c4b4:	51 e1       	ldi	r21, 0x11	; 17
   1c4b6:	07 c0       	rjmp	.+14     	; 0x1c4c6 <__udivmodhi4_ep>

0001c4b8 <__udivmodhi4_loop>:
   1c4b8:	aa 1f       	adc	r26, r26
   1c4ba:	bb 1f       	adc	r27, r27
   1c4bc:	a6 17       	cp	r26, r22
   1c4be:	b7 07       	cpc	r27, r23
   1c4c0:	10 f0       	brcs	.+4      	; 0x1c4c6 <__udivmodhi4_ep>
   1c4c2:	a6 1b       	sub	r26, r22
   1c4c4:	b7 0b       	sbc	r27, r23

0001c4c6 <__udivmodhi4_ep>:
   1c4c6:	88 1f       	adc	r24, r24
   1c4c8:	99 1f       	adc	r25, r25
   1c4ca:	5a 95       	dec	r21
   1c4cc:	a9 f7       	brne	.-22     	; 0x1c4b8 <__udivmodhi4_loop>
   1c4ce:	80 95       	com	r24
   1c4d0:	90 95       	com	r25
   1c4d2:	bc 01       	movw	r22, r24
   1c4d4:	cd 01       	movw	r24, r26
   1c4d6:	08 95       	ret

0001c4d8 <__divmodhi4>:
   1c4d8:	97 fb       	bst	r25, 7
   1c4da:	07 2e       	mov	r0, r23
   1c4dc:	16 f4       	brtc	.+4      	; 0x1c4e2 <__divmodhi4+0xa>
   1c4de:	00 94       	com	r0
   1c4e0:	06 d0       	rcall	.+12     	; 0x1c4ee <__divmodhi4_neg1>
   1c4e2:	77 fd       	sbrc	r23, 7
   1c4e4:	08 d0       	rcall	.+16     	; 0x1c4f6 <__divmodhi4_neg2>
   1c4e6:	e4 df       	rcall	.-56     	; 0x1c4b0 <__udivmodhi4>
   1c4e8:	07 fc       	sbrc	r0, 7
   1c4ea:	05 d0       	rcall	.+10     	; 0x1c4f6 <__divmodhi4_neg2>
   1c4ec:	3e f4       	brtc	.+14     	; 0x1c4fc <__divmodhi4_exit>

0001c4ee <__divmodhi4_neg1>:
   1c4ee:	90 95       	com	r25
   1c4f0:	81 95       	neg	r24
   1c4f2:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4f4:	08 95       	ret

0001c4f6 <__divmodhi4_neg2>:
   1c4f6:	70 95       	com	r23
   1c4f8:	61 95       	neg	r22
   1c4fa:	7f 4f       	sbci	r23, 0xFF	; 255

0001c4fc <__divmodhi4_exit>:
   1c4fc:	08 95       	ret

0001c4fe <__udivmodsi4>:
   1c4fe:	a1 e2       	ldi	r26, 0x21	; 33
   1c500:	1a 2e       	mov	r1, r26
   1c502:	aa 1b       	sub	r26, r26
   1c504:	bb 1b       	sub	r27, r27
   1c506:	fd 01       	movw	r30, r26
   1c508:	0d c0       	rjmp	.+26     	; 0x1c524 <__udivmodsi4_ep>

0001c50a <__udivmodsi4_loop>:
   1c50a:	aa 1f       	adc	r26, r26
   1c50c:	bb 1f       	adc	r27, r27
   1c50e:	ee 1f       	adc	r30, r30
   1c510:	ff 1f       	adc	r31, r31
   1c512:	a2 17       	cp	r26, r18
   1c514:	b3 07       	cpc	r27, r19
   1c516:	e4 07       	cpc	r30, r20
   1c518:	f5 07       	cpc	r31, r21
   1c51a:	20 f0       	brcs	.+8      	; 0x1c524 <__udivmodsi4_ep>
   1c51c:	a2 1b       	sub	r26, r18
   1c51e:	b3 0b       	sbc	r27, r19
   1c520:	e4 0b       	sbc	r30, r20
   1c522:	f5 0b       	sbc	r31, r21

0001c524 <__udivmodsi4_ep>:
   1c524:	66 1f       	adc	r22, r22
   1c526:	77 1f       	adc	r23, r23
   1c528:	88 1f       	adc	r24, r24
   1c52a:	99 1f       	adc	r25, r25
   1c52c:	1a 94       	dec	r1
   1c52e:	69 f7       	brne	.-38     	; 0x1c50a <__udivmodsi4_loop>
   1c530:	60 95       	com	r22
   1c532:	70 95       	com	r23
   1c534:	80 95       	com	r24
   1c536:	90 95       	com	r25
   1c538:	9b 01       	movw	r18, r22
   1c53a:	ac 01       	movw	r20, r24
   1c53c:	bd 01       	movw	r22, r26
   1c53e:	cf 01       	movw	r24, r30
   1c540:	08 95       	ret

0001c542 <__divmodsi4>:
   1c542:	05 2e       	mov	r0, r21
   1c544:	97 fb       	bst	r25, 7
   1c546:	16 f4       	brtc	.+4      	; 0x1c54c <__divmodsi4+0xa>
   1c548:	00 94       	com	r0
   1c54a:	0f d0       	rcall	.+30     	; 0x1c56a <__negsi2>
   1c54c:	57 fd       	sbrc	r21, 7
   1c54e:	05 d0       	rcall	.+10     	; 0x1c55a <__divmodsi4_neg2>
   1c550:	d6 df       	rcall	.-84     	; 0x1c4fe <__udivmodsi4>
   1c552:	07 fc       	sbrc	r0, 7
   1c554:	02 d0       	rcall	.+4      	; 0x1c55a <__divmodsi4_neg2>
   1c556:	46 f4       	brtc	.+16     	; 0x1c568 <__divmodsi4_exit>
   1c558:	08 c0       	rjmp	.+16     	; 0x1c56a <__negsi2>

0001c55a <__divmodsi4_neg2>:
   1c55a:	50 95       	com	r21
   1c55c:	40 95       	com	r20
   1c55e:	30 95       	com	r19
   1c560:	21 95       	neg	r18
   1c562:	3f 4f       	sbci	r19, 0xFF	; 255
   1c564:	4f 4f       	sbci	r20, 0xFF	; 255
   1c566:	5f 4f       	sbci	r21, 0xFF	; 255

0001c568 <__divmodsi4_exit>:
   1c568:	08 95       	ret

0001c56a <__negsi2>:
   1c56a:	90 95       	com	r25
   1c56c:	80 95       	com	r24
   1c56e:	70 95       	com	r23
   1c570:	61 95       	neg	r22
   1c572:	7f 4f       	sbci	r23, 0xFF	; 255
   1c574:	8f 4f       	sbci	r24, 0xFF	; 255
   1c576:	9f 4f       	sbci	r25, 0xFF	; 255
   1c578:	08 95       	ret

0001c57a <__tablejump2__>:
   1c57a:	ee 0f       	add	r30, r30
   1c57c:	ff 1f       	adc	r31, r31
   1c57e:	00 24       	eor	r0, r0
   1c580:	00 1c       	adc	r0, r0
   1c582:	0b be       	out	0x3b, r0	; 59
   1c584:	07 90       	elpm	r0, Z+
   1c586:	f6 91       	elpm	r31, Z
   1c588:	e0 2d       	mov	r30, r0
   1c58a:	09 94       	ijmp

0001c58c <__usmulhisi3>:
   1c58c:	6f d0       	rcall	.+222    	; 0x1c66c <__umulhisi3>

0001c58e <__usmulhisi3_tail>:
   1c58e:	b7 ff       	sbrs	r27, 7
   1c590:	08 95       	ret
   1c592:	82 1b       	sub	r24, r18
   1c594:	93 0b       	sbc	r25, r19
   1c596:	08 95       	ret

0001c598 <__muluhisi3>:
   1c598:	69 d0       	rcall	.+210    	; 0x1c66c <__umulhisi3>
   1c59a:	a5 9f       	mul	r26, r21
   1c59c:	90 0d       	add	r25, r0
   1c59e:	b4 9f       	mul	r27, r20
   1c5a0:	90 0d       	add	r25, r0
   1c5a2:	a4 9f       	mul	r26, r20
   1c5a4:	80 0d       	add	r24, r0
   1c5a6:	91 1d       	adc	r25, r1
   1c5a8:	11 24       	eor	r1, r1
   1c5aa:	08 95       	ret

0001c5ac <__mulshisi3>:
   1c5ac:	b7 ff       	sbrs	r27, 7
   1c5ae:	f4 cf       	rjmp	.-24     	; 0x1c598 <__muluhisi3>

0001c5b0 <__mulohisi3>:
   1c5b0:	f3 df       	rcall	.-26     	; 0x1c598 <__muluhisi3>
   1c5b2:	82 1b       	sub	r24, r18
   1c5b4:	93 0b       	sbc	r25, r19
   1c5b6:	08 95       	ret

0001c5b8 <__negdi2>:
   1c5b8:	60 95       	com	r22
   1c5ba:	70 95       	com	r23
   1c5bc:	80 95       	com	r24
   1c5be:	90 95       	com	r25
   1c5c0:	30 95       	com	r19
   1c5c2:	40 95       	com	r20
   1c5c4:	50 95       	com	r21
   1c5c6:	21 95       	neg	r18
   1c5c8:	3f 4f       	sbci	r19, 0xFF	; 255
   1c5ca:	4f 4f       	sbci	r20, 0xFF	; 255
   1c5cc:	5f 4f       	sbci	r21, 0xFF	; 255
   1c5ce:	6f 4f       	sbci	r22, 0xFF	; 255
   1c5d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5d2:	8f 4f       	sbci	r24, 0xFF	; 255
   1c5d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5d6:	08 95       	ret

0001c5d8 <__prologue_saves__>:
   1c5d8:	2f 92       	push	r2
   1c5da:	3f 92       	push	r3
   1c5dc:	4f 92       	push	r4
   1c5de:	5f 92       	push	r5
   1c5e0:	6f 92       	push	r6
   1c5e2:	7f 92       	push	r7
   1c5e4:	8f 92       	push	r8
   1c5e6:	9f 92       	push	r9
   1c5e8:	af 92       	push	r10
   1c5ea:	bf 92       	push	r11
   1c5ec:	cf 92       	push	r12
   1c5ee:	df 92       	push	r13
   1c5f0:	ef 92       	push	r14
   1c5f2:	ff 92       	push	r15
   1c5f4:	0f 93       	push	r16
   1c5f6:	1f 93       	push	r17
   1c5f8:	cf 93       	push	r28
   1c5fa:	df 93       	push	r29
   1c5fc:	cd b7       	in	r28, 0x3d	; 61
   1c5fe:	de b7       	in	r29, 0x3e	; 62
   1c600:	ca 1b       	sub	r28, r26
   1c602:	db 0b       	sbc	r29, r27
   1c604:	0f b6       	in	r0, 0x3f	; 63
   1c606:	f8 94       	cli
   1c608:	de bf       	out	0x3e, r29	; 62
   1c60a:	0f be       	out	0x3f, r0	; 63
   1c60c:	cd bf       	out	0x3d, r28	; 61
   1c60e:	09 94       	ijmp

0001c610 <__epilogue_restores__>:
   1c610:	2a 88       	ldd	r2, Y+18	; 0x12
   1c612:	39 88       	ldd	r3, Y+17	; 0x11
   1c614:	48 88       	ldd	r4, Y+16	; 0x10
   1c616:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c618:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c61a:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c61c:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c61e:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c620:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c622:	b9 84       	ldd	r11, Y+9	; 0x09
   1c624:	c8 84       	ldd	r12, Y+8	; 0x08
   1c626:	df 80       	ldd	r13, Y+7	; 0x07
   1c628:	ee 80       	ldd	r14, Y+6	; 0x06
   1c62a:	fd 80       	ldd	r15, Y+5	; 0x05
   1c62c:	0c 81       	ldd	r16, Y+4	; 0x04
   1c62e:	1b 81       	ldd	r17, Y+3	; 0x03
   1c630:	aa 81       	ldd	r26, Y+2	; 0x02
   1c632:	b9 81       	ldd	r27, Y+1	; 0x01
   1c634:	ce 0f       	add	r28, r30
   1c636:	d1 1d       	adc	r29, r1
   1c638:	0f b6       	in	r0, 0x3f	; 63
   1c63a:	f8 94       	cli
   1c63c:	de bf       	out	0x3e, r29	; 62
   1c63e:	0f be       	out	0x3f, r0	; 63
   1c640:	cd bf       	out	0x3d, r28	; 61
   1c642:	ed 01       	movw	r28, r26
   1c644:	08 95       	ret

0001c646 <__xload_1>:
   1c646:	57 fd       	sbrc	r21, 7
   1c648:	03 c0       	rjmp	.+6      	; 0x1c650 <__xload_1+0xa>
   1c64a:	5b bf       	out	0x3b, r21	; 59
   1c64c:	67 91       	elpm	r22, Z+
   1c64e:	08 95       	ret
   1c650:	60 81       	ld	r22, Z
   1c652:	08 95       	ret

0001c654 <__cmpdi2_s8>:
   1c654:	00 24       	eor	r0, r0
   1c656:	a7 fd       	sbrc	r26, 7
   1c658:	00 94       	com	r0
   1c65a:	2a 17       	cp	r18, r26
   1c65c:	30 05       	cpc	r19, r0
   1c65e:	40 05       	cpc	r20, r0
   1c660:	50 05       	cpc	r21, r0
   1c662:	60 05       	cpc	r22, r0
   1c664:	70 05       	cpc	r23, r0
   1c666:	80 05       	cpc	r24, r0
   1c668:	90 05       	cpc	r25, r0
   1c66a:	08 95       	ret

0001c66c <__umulhisi3>:
   1c66c:	a2 9f       	mul	r26, r18
   1c66e:	b0 01       	movw	r22, r0
   1c670:	b3 9f       	mul	r27, r19
   1c672:	c0 01       	movw	r24, r0
   1c674:	a3 9f       	mul	r26, r19
   1c676:	70 0d       	add	r23, r0
   1c678:	81 1d       	adc	r24, r1
   1c67a:	11 24       	eor	r1, r1
   1c67c:	91 1d       	adc	r25, r1
   1c67e:	b2 9f       	mul	r27, r18
   1c680:	70 0d       	add	r23, r0
   1c682:	81 1d       	adc	r24, r1
   1c684:	11 24       	eor	r1, r1
   1c686:	91 1d       	adc	r25, r1
   1c688:	08 95       	ret

0001c68a <__subsf3>:
   1c68a:	50 58       	subi	r21, 0x80	; 128

0001c68c <__addsf3>:
   1c68c:	bb 27       	eor	r27, r27
   1c68e:	aa 27       	eor	r26, r26
   1c690:	0e d0       	rcall	.+28     	; 0x1c6ae <__addsf3x>
   1c692:	75 c1       	rjmp	.+746    	; 0x1c97e <__fp_round>
   1c694:	66 d1       	rcall	.+716    	; 0x1c962 <__fp_pscA>
   1c696:	30 f0       	brcs	.+12     	; 0x1c6a4 <__addsf3+0x18>
   1c698:	6b d1       	rcall	.+726    	; 0x1c970 <__fp_pscB>
   1c69a:	20 f0       	brcs	.+8      	; 0x1c6a4 <__addsf3+0x18>
   1c69c:	31 f4       	brne	.+12     	; 0x1c6aa <__addsf3+0x1e>
   1c69e:	9f 3f       	cpi	r25, 0xFF	; 255
   1c6a0:	11 f4       	brne	.+4      	; 0x1c6a6 <__addsf3+0x1a>
   1c6a2:	1e f4       	brtc	.+6      	; 0x1c6aa <__addsf3+0x1e>
   1c6a4:	5b c1       	rjmp	.+694    	; 0x1c95c <__fp_nan>
   1c6a6:	0e f4       	brtc	.+2      	; 0x1c6aa <__addsf3+0x1e>
   1c6a8:	e0 95       	com	r30
   1c6aa:	e7 fb       	bst	r30, 7
   1c6ac:	51 c1       	rjmp	.+674    	; 0x1c950 <__fp_inf>

0001c6ae <__addsf3x>:
   1c6ae:	e9 2f       	mov	r30, r25
   1c6b0:	77 d1       	rcall	.+750    	; 0x1c9a0 <__fp_split3>
   1c6b2:	80 f3       	brcs	.-32     	; 0x1c694 <__addsf3+0x8>
   1c6b4:	ba 17       	cp	r27, r26
   1c6b6:	62 07       	cpc	r22, r18
   1c6b8:	73 07       	cpc	r23, r19
   1c6ba:	84 07       	cpc	r24, r20
   1c6bc:	95 07       	cpc	r25, r21
   1c6be:	18 f0       	brcs	.+6      	; 0x1c6c6 <__addsf3x+0x18>
   1c6c0:	71 f4       	brne	.+28     	; 0x1c6de <__addsf3x+0x30>
   1c6c2:	9e f5       	brtc	.+102    	; 0x1c72a <__addsf3x+0x7c>
   1c6c4:	8f c1       	rjmp	.+798    	; 0x1c9e4 <__fp_zero>
   1c6c6:	0e f4       	brtc	.+2      	; 0x1c6ca <__addsf3x+0x1c>
   1c6c8:	e0 95       	com	r30
   1c6ca:	0b 2e       	mov	r0, r27
   1c6cc:	ba 2f       	mov	r27, r26
   1c6ce:	a0 2d       	mov	r26, r0
   1c6d0:	0b 01       	movw	r0, r22
   1c6d2:	b9 01       	movw	r22, r18
   1c6d4:	90 01       	movw	r18, r0
   1c6d6:	0c 01       	movw	r0, r24
   1c6d8:	ca 01       	movw	r24, r20
   1c6da:	a0 01       	movw	r20, r0
   1c6dc:	11 24       	eor	r1, r1
   1c6de:	ff 27       	eor	r31, r31
   1c6e0:	59 1b       	sub	r21, r25
   1c6e2:	99 f0       	breq	.+38     	; 0x1c70a <__addsf3x+0x5c>
   1c6e4:	59 3f       	cpi	r21, 0xF9	; 249
   1c6e6:	50 f4       	brcc	.+20     	; 0x1c6fc <__addsf3x+0x4e>
   1c6e8:	50 3e       	cpi	r21, 0xE0	; 224
   1c6ea:	68 f1       	brcs	.+90     	; 0x1c746 <__addsf3x+0x98>
   1c6ec:	1a 16       	cp	r1, r26
   1c6ee:	f0 40       	sbci	r31, 0x00	; 0
   1c6f0:	a2 2f       	mov	r26, r18
   1c6f2:	23 2f       	mov	r18, r19
   1c6f4:	34 2f       	mov	r19, r20
   1c6f6:	44 27       	eor	r20, r20
   1c6f8:	58 5f       	subi	r21, 0xF8	; 248
   1c6fa:	f3 cf       	rjmp	.-26     	; 0x1c6e2 <__addsf3x+0x34>
   1c6fc:	46 95       	lsr	r20
   1c6fe:	37 95       	ror	r19
   1c700:	27 95       	ror	r18
   1c702:	a7 95       	ror	r26
   1c704:	f0 40       	sbci	r31, 0x00	; 0
   1c706:	53 95       	inc	r21
   1c708:	c9 f7       	brne	.-14     	; 0x1c6fc <__addsf3x+0x4e>
   1c70a:	7e f4       	brtc	.+30     	; 0x1c72a <__addsf3x+0x7c>
   1c70c:	1f 16       	cp	r1, r31
   1c70e:	ba 0b       	sbc	r27, r26
   1c710:	62 0b       	sbc	r22, r18
   1c712:	73 0b       	sbc	r23, r19
   1c714:	84 0b       	sbc	r24, r20
   1c716:	ba f0       	brmi	.+46     	; 0x1c746 <__addsf3x+0x98>
   1c718:	91 50       	subi	r25, 0x01	; 1
   1c71a:	a1 f0       	breq	.+40     	; 0x1c744 <__addsf3x+0x96>
   1c71c:	ff 0f       	add	r31, r31
   1c71e:	bb 1f       	adc	r27, r27
   1c720:	66 1f       	adc	r22, r22
   1c722:	77 1f       	adc	r23, r23
   1c724:	88 1f       	adc	r24, r24
   1c726:	c2 f7       	brpl	.-16     	; 0x1c718 <__addsf3x+0x6a>
   1c728:	0e c0       	rjmp	.+28     	; 0x1c746 <__addsf3x+0x98>
   1c72a:	ba 0f       	add	r27, r26
   1c72c:	62 1f       	adc	r22, r18
   1c72e:	73 1f       	adc	r23, r19
   1c730:	84 1f       	adc	r24, r20
   1c732:	48 f4       	brcc	.+18     	; 0x1c746 <__addsf3x+0x98>
   1c734:	87 95       	ror	r24
   1c736:	77 95       	ror	r23
   1c738:	67 95       	ror	r22
   1c73a:	b7 95       	ror	r27
   1c73c:	f7 95       	ror	r31
   1c73e:	9e 3f       	cpi	r25, 0xFE	; 254
   1c740:	08 f0       	brcs	.+2      	; 0x1c744 <__addsf3x+0x96>
   1c742:	b3 cf       	rjmp	.-154    	; 0x1c6aa <__addsf3+0x1e>
   1c744:	93 95       	inc	r25
   1c746:	88 0f       	add	r24, r24
   1c748:	08 f0       	brcs	.+2      	; 0x1c74c <__addsf3x+0x9e>
   1c74a:	99 27       	eor	r25, r25
   1c74c:	ee 0f       	add	r30, r30
   1c74e:	97 95       	ror	r25
   1c750:	87 95       	ror	r24
   1c752:	08 95       	ret

0001c754 <__cmpsf2>:
   1c754:	d9 d0       	rcall	.+434    	; 0x1c908 <__fp_cmp>
   1c756:	08 f4       	brcc	.+2      	; 0x1c75a <__cmpsf2+0x6>
   1c758:	81 e0       	ldi	r24, 0x01	; 1
   1c75a:	08 95       	ret

0001c75c <__divsf3>:
   1c75c:	0c d0       	rcall	.+24     	; 0x1c776 <__divsf3x>
   1c75e:	0f c1       	rjmp	.+542    	; 0x1c97e <__fp_round>
   1c760:	07 d1       	rcall	.+526    	; 0x1c970 <__fp_pscB>
   1c762:	40 f0       	brcs	.+16     	; 0x1c774 <__divsf3+0x18>
   1c764:	fe d0       	rcall	.+508    	; 0x1c962 <__fp_pscA>
   1c766:	30 f0       	brcs	.+12     	; 0x1c774 <__divsf3+0x18>
   1c768:	21 f4       	brne	.+8      	; 0x1c772 <__divsf3+0x16>
   1c76a:	5f 3f       	cpi	r21, 0xFF	; 255
   1c76c:	19 f0       	breq	.+6      	; 0x1c774 <__divsf3+0x18>
   1c76e:	f0 c0       	rjmp	.+480    	; 0x1c950 <__fp_inf>
   1c770:	51 11       	cpse	r21, r1
   1c772:	39 c1       	rjmp	.+626    	; 0x1c9e6 <__fp_szero>
   1c774:	f3 c0       	rjmp	.+486    	; 0x1c95c <__fp_nan>

0001c776 <__divsf3x>:
   1c776:	14 d1       	rcall	.+552    	; 0x1c9a0 <__fp_split3>
   1c778:	98 f3       	brcs	.-26     	; 0x1c760 <__divsf3+0x4>

0001c77a <__divsf3_pse>:
   1c77a:	99 23       	and	r25, r25
   1c77c:	c9 f3       	breq	.-14     	; 0x1c770 <__divsf3+0x14>
   1c77e:	55 23       	and	r21, r21
   1c780:	b1 f3       	breq	.-20     	; 0x1c76e <__divsf3+0x12>
   1c782:	95 1b       	sub	r25, r21
   1c784:	55 0b       	sbc	r21, r21
   1c786:	bb 27       	eor	r27, r27
   1c788:	aa 27       	eor	r26, r26
   1c78a:	62 17       	cp	r22, r18
   1c78c:	73 07       	cpc	r23, r19
   1c78e:	84 07       	cpc	r24, r20
   1c790:	38 f0       	brcs	.+14     	; 0x1c7a0 <__divsf3_pse+0x26>
   1c792:	9f 5f       	subi	r25, 0xFF	; 255
   1c794:	5f 4f       	sbci	r21, 0xFF	; 255
   1c796:	22 0f       	add	r18, r18
   1c798:	33 1f       	adc	r19, r19
   1c79a:	44 1f       	adc	r20, r20
   1c79c:	aa 1f       	adc	r26, r26
   1c79e:	a9 f3       	breq	.-22     	; 0x1c78a <__divsf3_pse+0x10>
   1c7a0:	33 d0       	rcall	.+102    	; 0x1c808 <__divsf3_pse+0x8e>
   1c7a2:	0e 2e       	mov	r0, r30
   1c7a4:	3a f0       	brmi	.+14     	; 0x1c7b4 <__divsf3_pse+0x3a>
   1c7a6:	e0 e8       	ldi	r30, 0x80	; 128
   1c7a8:	30 d0       	rcall	.+96     	; 0x1c80a <__divsf3_pse+0x90>
   1c7aa:	91 50       	subi	r25, 0x01	; 1
   1c7ac:	50 40       	sbci	r21, 0x00	; 0
   1c7ae:	e6 95       	lsr	r30
   1c7b0:	00 1c       	adc	r0, r0
   1c7b2:	ca f7       	brpl	.-14     	; 0x1c7a6 <__divsf3_pse+0x2c>
   1c7b4:	29 d0       	rcall	.+82     	; 0x1c808 <__divsf3_pse+0x8e>
   1c7b6:	fe 2f       	mov	r31, r30
   1c7b8:	27 d0       	rcall	.+78     	; 0x1c808 <__divsf3_pse+0x8e>
   1c7ba:	66 0f       	add	r22, r22
   1c7bc:	77 1f       	adc	r23, r23
   1c7be:	88 1f       	adc	r24, r24
   1c7c0:	bb 1f       	adc	r27, r27
   1c7c2:	26 17       	cp	r18, r22
   1c7c4:	37 07       	cpc	r19, r23
   1c7c6:	48 07       	cpc	r20, r24
   1c7c8:	ab 07       	cpc	r26, r27
   1c7ca:	b0 e8       	ldi	r27, 0x80	; 128
   1c7cc:	09 f0       	breq	.+2      	; 0x1c7d0 <__divsf3_pse+0x56>
   1c7ce:	bb 0b       	sbc	r27, r27
   1c7d0:	80 2d       	mov	r24, r0
   1c7d2:	bf 01       	movw	r22, r30
   1c7d4:	ff 27       	eor	r31, r31
   1c7d6:	93 58       	subi	r25, 0x83	; 131
   1c7d8:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7da:	2a f0       	brmi	.+10     	; 0x1c7e6 <__divsf3_pse+0x6c>
   1c7dc:	9e 3f       	cpi	r25, 0xFE	; 254
   1c7de:	51 05       	cpc	r21, r1
   1c7e0:	68 f0       	brcs	.+26     	; 0x1c7fc <__divsf3_pse+0x82>
   1c7e2:	b6 c0       	rjmp	.+364    	; 0x1c950 <__fp_inf>
   1c7e4:	00 c1       	rjmp	.+512    	; 0x1c9e6 <__fp_szero>
   1c7e6:	5f 3f       	cpi	r21, 0xFF	; 255
   1c7e8:	ec f3       	brlt	.-6      	; 0x1c7e4 <__divsf3_pse+0x6a>
   1c7ea:	98 3e       	cpi	r25, 0xE8	; 232
   1c7ec:	dc f3       	brlt	.-10     	; 0x1c7e4 <__divsf3_pse+0x6a>
   1c7ee:	86 95       	lsr	r24
   1c7f0:	77 95       	ror	r23
   1c7f2:	67 95       	ror	r22
   1c7f4:	b7 95       	ror	r27
   1c7f6:	f7 95       	ror	r31
   1c7f8:	9f 5f       	subi	r25, 0xFF	; 255
   1c7fa:	c9 f7       	brne	.-14     	; 0x1c7ee <__divsf3_pse+0x74>
   1c7fc:	88 0f       	add	r24, r24
   1c7fe:	91 1d       	adc	r25, r1
   1c800:	96 95       	lsr	r25
   1c802:	87 95       	ror	r24
   1c804:	97 f9       	bld	r25, 7
   1c806:	08 95       	ret
   1c808:	e1 e0       	ldi	r30, 0x01	; 1
   1c80a:	66 0f       	add	r22, r22
   1c80c:	77 1f       	adc	r23, r23
   1c80e:	88 1f       	adc	r24, r24
   1c810:	bb 1f       	adc	r27, r27
   1c812:	62 17       	cp	r22, r18
   1c814:	73 07       	cpc	r23, r19
   1c816:	84 07       	cpc	r24, r20
   1c818:	ba 07       	cpc	r27, r26
   1c81a:	20 f0       	brcs	.+8      	; 0x1c824 <__divsf3_pse+0xaa>
   1c81c:	62 1b       	sub	r22, r18
   1c81e:	73 0b       	sbc	r23, r19
   1c820:	84 0b       	sbc	r24, r20
   1c822:	ba 0b       	sbc	r27, r26
   1c824:	ee 1f       	adc	r30, r30
   1c826:	88 f7       	brcc	.-30     	; 0x1c80a <__divsf3_pse+0x90>
   1c828:	e0 95       	com	r30
   1c82a:	08 95       	ret

0001c82c <__fixsfsi>:
   1c82c:	04 d0       	rcall	.+8      	; 0x1c836 <__fixunssfsi>
   1c82e:	68 94       	set
   1c830:	b1 11       	cpse	r27, r1
   1c832:	d9 c0       	rjmp	.+434    	; 0x1c9e6 <__fp_szero>
   1c834:	08 95       	ret

0001c836 <__fixunssfsi>:
   1c836:	bc d0       	rcall	.+376    	; 0x1c9b0 <__fp_splitA>
   1c838:	88 f0       	brcs	.+34     	; 0x1c85c <__fixunssfsi+0x26>
   1c83a:	9f 57       	subi	r25, 0x7F	; 127
   1c83c:	90 f0       	brcs	.+36     	; 0x1c862 <__fixunssfsi+0x2c>
   1c83e:	b9 2f       	mov	r27, r25
   1c840:	99 27       	eor	r25, r25
   1c842:	b7 51       	subi	r27, 0x17	; 23
   1c844:	a0 f0       	brcs	.+40     	; 0x1c86e <__fixunssfsi+0x38>
   1c846:	d1 f0       	breq	.+52     	; 0x1c87c <__fixunssfsi+0x46>
   1c848:	66 0f       	add	r22, r22
   1c84a:	77 1f       	adc	r23, r23
   1c84c:	88 1f       	adc	r24, r24
   1c84e:	99 1f       	adc	r25, r25
   1c850:	1a f0       	brmi	.+6      	; 0x1c858 <__fixunssfsi+0x22>
   1c852:	ba 95       	dec	r27
   1c854:	c9 f7       	brne	.-14     	; 0x1c848 <__fixunssfsi+0x12>
   1c856:	12 c0       	rjmp	.+36     	; 0x1c87c <__fixunssfsi+0x46>
   1c858:	b1 30       	cpi	r27, 0x01	; 1
   1c85a:	81 f0       	breq	.+32     	; 0x1c87c <__fixunssfsi+0x46>
   1c85c:	c3 d0       	rcall	.+390    	; 0x1c9e4 <__fp_zero>
   1c85e:	b1 e0       	ldi	r27, 0x01	; 1
   1c860:	08 95       	ret
   1c862:	c0 c0       	rjmp	.+384    	; 0x1c9e4 <__fp_zero>
   1c864:	67 2f       	mov	r22, r23
   1c866:	78 2f       	mov	r23, r24
   1c868:	88 27       	eor	r24, r24
   1c86a:	b8 5f       	subi	r27, 0xF8	; 248
   1c86c:	39 f0       	breq	.+14     	; 0x1c87c <__fixunssfsi+0x46>
   1c86e:	b9 3f       	cpi	r27, 0xF9	; 249
   1c870:	cc f3       	brlt	.-14     	; 0x1c864 <__fixunssfsi+0x2e>
   1c872:	86 95       	lsr	r24
   1c874:	77 95       	ror	r23
   1c876:	67 95       	ror	r22
   1c878:	b3 95       	inc	r27
   1c87a:	d9 f7       	brne	.-10     	; 0x1c872 <__fixunssfsi+0x3c>
   1c87c:	3e f4       	brtc	.+14     	; 0x1c88c <__fixunssfsi+0x56>
   1c87e:	90 95       	com	r25
   1c880:	80 95       	com	r24
   1c882:	70 95       	com	r23
   1c884:	61 95       	neg	r22
   1c886:	7f 4f       	sbci	r23, 0xFF	; 255
   1c888:	8f 4f       	sbci	r24, 0xFF	; 255
   1c88a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c88c:	08 95       	ret

0001c88e <__floatunsisf>:
   1c88e:	e8 94       	clt
   1c890:	09 c0       	rjmp	.+18     	; 0x1c8a4 <__floatsisf+0x12>

0001c892 <__floatsisf>:
   1c892:	97 fb       	bst	r25, 7
   1c894:	3e f4       	brtc	.+14     	; 0x1c8a4 <__floatsisf+0x12>
   1c896:	90 95       	com	r25
   1c898:	80 95       	com	r24
   1c89a:	70 95       	com	r23
   1c89c:	61 95       	neg	r22
   1c89e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8a0:	8f 4f       	sbci	r24, 0xFF	; 255
   1c8a2:	9f 4f       	sbci	r25, 0xFF	; 255
   1c8a4:	99 23       	and	r25, r25
   1c8a6:	a9 f0       	breq	.+42     	; 0x1c8d2 <__floatsisf+0x40>
   1c8a8:	f9 2f       	mov	r31, r25
   1c8aa:	96 e9       	ldi	r25, 0x96	; 150
   1c8ac:	bb 27       	eor	r27, r27
   1c8ae:	93 95       	inc	r25
   1c8b0:	f6 95       	lsr	r31
   1c8b2:	87 95       	ror	r24
   1c8b4:	77 95       	ror	r23
   1c8b6:	67 95       	ror	r22
   1c8b8:	b7 95       	ror	r27
   1c8ba:	f1 11       	cpse	r31, r1
   1c8bc:	f8 cf       	rjmp	.-16     	; 0x1c8ae <__floatsisf+0x1c>
   1c8be:	fa f4       	brpl	.+62     	; 0x1c8fe <__floatsisf+0x6c>
   1c8c0:	bb 0f       	add	r27, r27
   1c8c2:	11 f4       	brne	.+4      	; 0x1c8c8 <__floatsisf+0x36>
   1c8c4:	60 ff       	sbrs	r22, 0
   1c8c6:	1b c0       	rjmp	.+54     	; 0x1c8fe <__floatsisf+0x6c>
   1c8c8:	6f 5f       	subi	r22, 0xFF	; 255
   1c8ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8cc:	8f 4f       	sbci	r24, 0xFF	; 255
   1c8ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1c8d0:	16 c0       	rjmp	.+44     	; 0x1c8fe <__floatsisf+0x6c>
   1c8d2:	88 23       	and	r24, r24
   1c8d4:	11 f0       	breq	.+4      	; 0x1c8da <__floatsisf+0x48>
   1c8d6:	96 e9       	ldi	r25, 0x96	; 150
   1c8d8:	11 c0       	rjmp	.+34     	; 0x1c8fc <__floatsisf+0x6a>
   1c8da:	77 23       	and	r23, r23
   1c8dc:	21 f0       	breq	.+8      	; 0x1c8e6 <__floatsisf+0x54>
   1c8de:	9e e8       	ldi	r25, 0x8E	; 142
   1c8e0:	87 2f       	mov	r24, r23
   1c8e2:	76 2f       	mov	r23, r22
   1c8e4:	05 c0       	rjmp	.+10     	; 0x1c8f0 <__floatsisf+0x5e>
   1c8e6:	66 23       	and	r22, r22
   1c8e8:	71 f0       	breq	.+28     	; 0x1c906 <__floatsisf+0x74>
   1c8ea:	96 e8       	ldi	r25, 0x86	; 134
   1c8ec:	86 2f       	mov	r24, r22
   1c8ee:	70 e0       	ldi	r23, 0x00	; 0
   1c8f0:	60 e0       	ldi	r22, 0x00	; 0
   1c8f2:	2a f0       	brmi	.+10     	; 0x1c8fe <__floatsisf+0x6c>
   1c8f4:	9a 95       	dec	r25
   1c8f6:	66 0f       	add	r22, r22
   1c8f8:	77 1f       	adc	r23, r23
   1c8fa:	88 1f       	adc	r24, r24
   1c8fc:	da f7       	brpl	.-10     	; 0x1c8f4 <__floatsisf+0x62>
   1c8fe:	88 0f       	add	r24, r24
   1c900:	96 95       	lsr	r25
   1c902:	87 95       	ror	r24
   1c904:	97 f9       	bld	r25, 7
   1c906:	08 95       	ret

0001c908 <__fp_cmp>:
   1c908:	99 0f       	add	r25, r25
   1c90a:	00 08       	sbc	r0, r0
   1c90c:	55 0f       	add	r21, r21
   1c90e:	aa 0b       	sbc	r26, r26
   1c910:	e0 e8       	ldi	r30, 0x80	; 128
   1c912:	fe ef       	ldi	r31, 0xFE	; 254
   1c914:	16 16       	cp	r1, r22
   1c916:	17 06       	cpc	r1, r23
   1c918:	e8 07       	cpc	r30, r24
   1c91a:	f9 07       	cpc	r31, r25
   1c91c:	c0 f0       	brcs	.+48     	; 0x1c94e <__fp_cmp+0x46>
   1c91e:	12 16       	cp	r1, r18
   1c920:	13 06       	cpc	r1, r19
   1c922:	e4 07       	cpc	r30, r20
   1c924:	f5 07       	cpc	r31, r21
   1c926:	98 f0       	brcs	.+38     	; 0x1c94e <__fp_cmp+0x46>
   1c928:	62 1b       	sub	r22, r18
   1c92a:	73 0b       	sbc	r23, r19
   1c92c:	84 0b       	sbc	r24, r20
   1c92e:	95 0b       	sbc	r25, r21
   1c930:	39 f4       	brne	.+14     	; 0x1c940 <__fp_cmp+0x38>
   1c932:	0a 26       	eor	r0, r26
   1c934:	61 f0       	breq	.+24     	; 0x1c94e <__fp_cmp+0x46>
   1c936:	23 2b       	or	r18, r19
   1c938:	24 2b       	or	r18, r20
   1c93a:	25 2b       	or	r18, r21
   1c93c:	21 f4       	brne	.+8      	; 0x1c946 <__fp_cmp+0x3e>
   1c93e:	08 95       	ret
   1c940:	0a 26       	eor	r0, r26
   1c942:	09 f4       	brne	.+2      	; 0x1c946 <__fp_cmp+0x3e>
   1c944:	a1 40       	sbci	r26, 0x01	; 1
   1c946:	a6 95       	lsr	r26
   1c948:	8f ef       	ldi	r24, 0xFF	; 255
   1c94a:	81 1d       	adc	r24, r1
   1c94c:	81 1d       	adc	r24, r1
   1c94e:	08 95       	ret

0001c950 <__fp_inf>:
   1c950:	97 f9       	bld	r25, 7
   1c952:	9f 67       	ori	r25, 0x7F	; 127
   1c954:	80 e8       	ldi	r24, 0x80	; 128
   1c956:	70 e0       	ldi	r23, 0x00	; 0
   1c958:	60 e0       	ldi	r22, 0x00	; 0
   1c95a:	08 95       	ret

0001c95c <__fp_nan>:
   1c95c:	9f ef       	ldi	r25, 0xFF	; 255
   1c95e:	80 ec       	ldi	r24, 0xC0	; 192
   1c960:	08 95       	ret

0001c962 <__fp_pscA>:
   1c962:	00 24       	eor	r0, r0
   1c964:	0a 94       	dec	r0
   1c966:	16 16       	cp	r1, r22
   1c968:	17 06       	cpc	r1, r23
   1c96a:	18 06       	cpc	r1, r24
   1c96c:	09 06       	cpc	r0, r25
   1c96e:	08 95       	ret

0001c970 <__fp_pscB>:
   1c970:	00 24       	eor	r0, r0
   1c972:	0a 94       	dec	r0
   1c974:	12 16       	cp	r1, r18
   1c976:	13 06       	cpc	r1, r19
   1c978:	14 06       	cpc	r1, r20
   1c97a:	05 06       	cpc	r0, r21
   1c97c:	08 95       	ret

0001c97e <__fp_round>:
   1c97e:	09 2e       	mov	r0, r25
   1c980:	03 94       	inc	r0
   1c982:	00 0c       	add	r0, r0
   1c984:	11 f4       	brne	.+4      	; 0x1c98a <__fp_round+0xc>
   1c986:	88 23       	and	r24, r24
   1c988:	52 f0       	brmi	.+20     	; 0x1c99e <__fp_round+0x20>
   1c98a:	bb 0f       	add	r27, r27
   1c98c:	40 f4       	brcc	.+16     	; 0x1c99e <__fp_round+0x20>
   1c98e:	bf 2b       	or	r27, r31
   1c990:	11 f4       	brne	.+4      	; 0x1c996 <__fp_round+0x18>
   1c992:	60 ff       	sbrs	r22, 0
   1c994:	04 c0       	rjmp	.+8      	; 0x1c99e <__fp_round+0x20>
   1c996:	6f 5f       	subi	r22, 0xFF	; 255
   1c998:	7f 4f       	sbci	r23, 0xFF	; 255
   1c99a:	8f 4f       	sbci	r24, 0xFF	; 255
   1c99c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c99e:	08 95       	ret

0001c9a0 <__fp_split3>:
   1c9a0:	57 fd       	sbrc	r21, 7
   1c9a2:	90 58       	subi	r25, 0x80	; 128
   1c9a4:	44 0f       	add	r20, r20
   1c9a6:	55 1f       	adc	r21, r21
   1c9a8:	59 f0       	breq	.+22     	; 0x1c9c0 <__fp_splitA+0x10>
   1c9aa:	5f 3f       	cpi	r21, 0xFF	; 255
   1c9ac:	71 f0       	breq	.+28     	; 0x1c9ca <__fp_splitA+0x1a>
   1c9ae:	47 95       	ror	r20

0001c9b0 <__fp_splitA>:
   1c9b0:	88 0f       	add	r24, r24
   1c9b2:	97 fb       	bst	r25, 7
   1c9b4:	99 1f       	adc	r25, r25
   1c9b6:	61 f0       	breq	.+24     	; 0x1c9d0 <__fp_splitA+0x20>
   1c9b8:	9f 3f       	cpi	r25, 0xFF	; 255
   1c9ba:	79 f0       	breq	.+30     	; 0x1c9da <__fp_splitA+0x2a>
   1c9bc:	87 95       	ror	r24
   1c9be:	08 95       	ret
   1c9c0:	12 16       	cp	r1, r18
   1c9c2:	13 06       	cpc	r1, r19
   1c9c4:	14 06       	cpc	r1, r20
   1c9c6:	55 1f       	adc	r21, r21
   1c9c8:	f2 cf       	rjmp	.-28     	; 0x1c9ae <__fp_split3+0xe>
   1c9ca:	46 95       	lsr	r20
   1c9cc:	f1 df       	rcall	.-30     	; 0x1c9b0 <__fp_splitA>
   1c9ce:	08 c0       	rjmp	.+16     	; 0x1c9e0 <__fp_splitA+0x30>
   1c9d0:	16 16       	cp	r1, r22
   1c9d2:	17 06       	cpc	r1, r23
   1c9d4:	18 06       	cpc	r1, r24
   1c9d6:	99 1f       	adc	r25, r25
   1c9d8:	f1 cf       	rjmp	.-30     	; 0x1c9bc <__fp_splitA+0xc>
   1c9da:	86 95       	lsr	r24
   1c9dc:	71 05       	cpc	r23, r1
   1c9de:	61 05       	cpc	r22, r1
   1c9e0:	08 94       	sec
   1c9e2:	08 95       	ret

0001c9e4 <__fp_zero>:
   1c9e4:	e8 94       	clt

0001c9e6 <__fp_szero>:
   1c9e6:	bb 27       	eor	r27, r27
   1c9e8:	66 27       	eor	r22, r22
   1c9ea:	77 27       	eor	r23, r23
   1c9ec:	cb 01       	movw	r24, r22
   1c9ee:	97 f9       	bld	r25, 7
   1c9f0:	08 95       	ret

0001c9f2 <__gesf2>:
   1c9f2:	8a df       	rcall	.-236    	; 0x1c908 <__fp_cmp>
   1c9f4:	08 f4       	brcc	.+2      	; 0x1c9f8 <__gesf2+0x6>
   1c9f6:	8f ef       	ldi	r24, 0xFF	; 255
   1c9f8:	08 95       	ret

0001c9fa <__mulsf3>:
   1c9fa:	0b d0       	rcall	.+22     	; 0x1ca12 <__mulsf3x>
   1c9fc:	c0 cf       	rjmp	.-128    	; 0x1c97e <__fp_round>
   1c9fe:	b1 df       	rcall	.-158    	; 0x1c962 <__fp_pscA>
   1ca00:	28 f0       	brcs	.+10     	; 0x1ca0c <__mulsf3+0x12>
   1ca02:	b6 df       	rcall	.-148    	; 0x1c970 <__fp_pscB>
   1ca04:	18 f0       	brcs	.+6      	; 0x1ca0c <__mulsf3+0x12>
   1ca06:	95 23       	and	r25, r21
   1ca08:	09 f0       	breq	.+2      	; 0x1ca0c <__mulsf3+0x12>
   1ca0a:	a2 cf       	rjmp	.-188    	; 0x1c950 <__fp_inf>
   1ca0c:	a7 cf       	rjmp	.-178    	; 0x1c95c <__fp_nan>
   1ca0e:	11 24       	eor	r1, r1
   1ca10:	ea cf       	rjmp	.-44     	; 0x1c9e6 <__fp_szero>

0001ca12 <__mulsf3x>:
   1ca12:	c6 df       	rcall	.-116    	; 0x1c9a0 <__fp_split3>
   1ca14:	a0 f3       	brcs	.-24     	; 0x1c9fe <__mulsf3+0x4>

0001ca16 <__mulsf3_pse>:
   1ca16:	95 9f       	mul	r25, r21
   1ca18:	d1 f3       	breq	.-12     	; 0x1ca0e <__mulsf3+0x14>
   1ca1a:	95 0f       	add	r25, r21
   1ca1c:	50 e0       	ldi	r21, 0x00	; 0
   1ca1e:	55 1f       	adc	r21, r21
   1ca20:	62 9f       	mul	r22, r18
   1ca22:	f0 01       	movw	r30, r0
   1ca24:	72 9f       	mul	r23, r18
   1ca26:	bb 27       	eor	r27, r27
   1ca28:	f0 0d       	add	r31, r0
   1ca2a:	b1 1d       	adc	r27, r1
   1ca2c:	63 9f       	mul	r22, r19
   1ca2e:	aa 27       	eor	r26, r26
   1ca30:	f0 0d       	add	r31, r0
   1ca32:	b1 1d       	adc	r27, r1
   1ca34:	aa 1f       	adc	r26, r26
   1ca36:	64 9f       	mul	r22, r20
   1ca38:	66 27       	eor	r22, r22
   1ca3a:	b0 0d       	add	r27, r0
   1ca3c:	a1 1d       	adc	r26, r1
   1ca3e:	66 1f       	adc	r22, r22
   1ca40:	82 9f       	mul	r24, r18
   1ca42:	22 27       	eor	r18, r18
   1ca44:	b0 0d       	add	r27, r0
   1ca46:	a1 1d       	adc	r26, r1
   1ca48:	62 1f       	adc	r22, r18
   1ca4a:	73 9f       	mul	r23, r19
   1ca4c:	b0 0d       	add	r27, r0
   1ca4e:	a1 1d       	adc	r26, r1
   1ca50:	62 1f       	adc	r22, r18
   1ca52:	83 9f       	mul	r24, r19
   1ca54:	a0 0d       	add	r26, r0
   1ca56:	61 1d       	adc	r22, r1
   1ca58:	22 1f       	adc	r18, r18
   1ca5a:	74 9f       	mul	r23, r20
   1ca5c:	33 27       	eor	r19, r19
   1ca5e:	a0 0d       	add	r26, r0
   1ca60:	61 1d       	adc	r22, r1
   1ca62:	23 1f       	adc	r18, r19
   1ca64:	84 9f       	mul	r24, r20
   1ca66:	60 0d       	add	r22, r0
   1ca68:	21 1d       	adc	r18, r1
   1ca6a:	82 2f       	mov	r24, r18
   1ca6c:	76 2f       	mov	r23, r22
   1ca6e:	6a 2f       	mov	r22, r26
   1ca70:	11 24       	eor	r1, r1
   1ca72:	9f 57       	subi	r25, 0x7F	; 127
   1ca74:	50 40       	sbci	r21, 0x00	; 0
   1ca76:	8a f0       	brmi	.+34     	; 0x1ca9a <__mulsf3_pse+0x84>
   1ca78:	e1 f0       	breq	.+56     	; 0x1cab2 <__mulsf3_pse+0x9c>
   1ca7a:	88 23       	and	r24, r24
   1ca7c:	4a f0       	brmi	.+18     	; 0x1ca90 <__mulsf3_pse+0x7a>
   1ca7e:	ee 0f       	add	r30, r30
   1ca80:	ff 1f       	adc	r31, r31
   1ca82:	bb 1f       	adc	r27, r27
   1ca84:	66 1f       	adc	r22, r22
   1ca86:	77 1f       	adc	r23, r23
   1ca88:	88 1f       	adc	r24, r24
   1ca8a:	91 50       	subi	r25, 0x01	; 1
   1ca8c:	50 40       	sbci	r21, 0x00	; 0
   1ca8e:	a9 f7       	brne	.-22     	; 0x1ca7a <__mulsf3_pse+0x64>
   1ca90:	9e 3f       	cpi	r25, 0xFE	; 254
   1ca92:	51 05       	cpc	r21, r1
   1ca94:	70 f0       	brcs	.+28     	; 0x1cab2 <__mulsf3_pse+0x9c>
   1ca96:	5c cf       	rjmp	.-328    	; 0x1c950 <__fp_inf>
   1ca98:	a6 cf       	rjmp	.-180    	; 0x1c9e6 <__fp_szero>
   1ca9a:	5f 3f       	cpi	r21, 0xFF	; 255
   1ca9c:	ec f3       	brlt	.-6      	; 0x1ca98 <__mulsf3_pse+0x82>
   1ca9e:	98 3e       	cpi	r25, 0xE8	; 232
   1caa0:	dc f3       	brlt	.-10     	; 0x1ca98 <__mulsf3_pse+0x82>
   1caa2:	86 95       	lsr	r24
   1caa4:	77 95       	ror	r23
   1caa6:	67 95       	ror	r22
   1caa8:	b7 95       	ror	r27
   1caaa:	f7 95       	ror	r31
   1caac:	e7 95       	ror	r30
   1caae:	9f 5f       	subi	r25, 0xFF	; 255
   1cab0:	c1 f7       	brne	.-16     	; 0x1caa2 <__mulsf3_pse+0x8c>
   1cab2:	fe 2b       	or	r31, r30
   1cab4:	88 0f       	add	r24, r24
   1cab6:	91 1d       	adc	r25, r1
   1cab8:	96 95       	lsr	r25
   1caba:	87 95       	ror	r24
   1cabc:	97 f9       	bld	r25, 7
   1cabe:	08 95       	ret

0001cac0 <round>:
   1cac0:	77 df       	rcall	.-274    	; 0x1c9b0 <__fp_splitA>
   1cac2:	e0 f0       	brcs	.+56     	; 0x1cafc <round+0x3c>
   1cac4:	9e 37       	cpi	r25, 0x7E	; 126
   1cac6:	d8 f0       	brcs	.+54     	; 0x1cafe <round+0x3e>
   1cac8:	96 39       	cpi	r25, 0x96	; 150
   1caca:	b8 f4       	brcc	.+46     	; 0x1cafa <round+0x3a>
   1cacc:	9e 38       	cpi	r25, 0x8E	; 142
   1cace:	48 f4       	brcc	.+18     	; 0x1cae2 <round+0x22>
   1cad0:	67 2f       	mov	r22, r23
   1cad2:	78 2f       	mov	r23, r24
   1cad4:	88 27       	eor	r24, r24
   1cad6:	98 5f       	subi	r25, 0xF8	; 248
   1cad8:	f9 cf       	rjmp	.-14     	; 0x1cacc <round+0xc>
   1cada:	86 95       	lsr	r24
   1cadc:	77 95       	ror	r23
   1cade:	67 95       	ror	r22
   1cae0:	93 95       	inc	r25
   1cae2:	95 39       	cpi	r25, 0x95	; 149
   1cae4:	d0 f3       	brcs	.-12     	; 0x1cada <round+0x1a>
   1cae6:	b6 2f       	mov	r27, r22
   1cae8:	b1 70       	andi	r27, 0x01	; 1
   1caea:	6b 0f       	add	r22, r27
   1caec:	71 1d       	adc	r23, r1
   1caee:	81 1d       	adc	r24, r1
   1caf0:	20 f4       	brcc	.+8      	; 0x1cafa <round+0x3a>
   1caf2:	87 95       	ror	r24
   1caf4:	77 95       	ror	r23
   1caf6:	67 95       	ror	r22
   1caf8:	93 95       	inc	r25
   1cafa:	02 c0       	rjmp	.+4      	; 0x1cb00 <__fp_mintl>
   1cafc:	1c c0       	rjmp	.+56     	; 0x1cb36 <__fp_mpack>
   1cafe:	73 cf       	rjmp	.-282    	; 0x1c9e6 <__fp_szero>

0001cb00 <__fp_mintl>:
   1cb00:	88 23       	and	r24, r24
   1cb02:	71 f4       	brne	.+28     	; 0x1cb20 <__fp_mintl+0x20>
   1cb04:	77 23       	and	r23, r23
   1cb06:	21 f0       	breq	.+8      	; 0x1cb10 <__fp_mintl+0x10>
   1cb08:	98 50       	subi	r25, 0x08	; 8
   1cb0a:	87 2b       	or	r24, r23
   1cb0c:	76 2f       	mov	r23, r22
   1cb0e:	07 c0       	rjmp	.+14     	; 0x1cb1e <__fp_mintl+0x1e>
   1cb10:	66 23       	and	r22, r22
   1cb12:	11 f4       	brne	.+4      	; 0x1cb18 <__fp_mintl+0x18>
   1cb14:	99 27       	eor	r25, r25
   1cb16:	0d c0       	rjmp	.+26     	; 0x1cb32 <__fp_mintl+0x32>
   1cb18:	90 51       	subi	r25, 0x10	; 16
   1cb1a:	86 2b       	or	r24, r22
   1cb1c:	70 e0       	ldi	r23, 0x00	; 0
   1cb1e:	60 e0       	ldi	r22, 0x00	; 0
   1cb20:	2a f0       	brmi	.+10     	; 0x1cb2c <__fp_mintl+0x2c>
   1cb22:	9a 95       	dec	r25
   1cb24:	66 0f       	add	r22, r22
   1cb26:	77 1f       	adc	r23, r23
   1cb28:	88 1f       	adc	r24, r24
   1cb2a:	da f7       	brpl	.-10     	; 0x1cb22 <__fp_mintl+0x22>
   1cb2c:	88 0f       	add	r24, r24
   1cb2e:	96 95       	lsr	r25
   1cb30:	87 95       	ror	r24
   1cb32:	97 f9       	bld	r25, 7
   1cb34:	08 95       	ret

0001cb36 <__fp_mpack>:
   1cb36:	9f 3f       	cpi	r25, 0xFF	; 255
   1cb38:	31 f0       	breq	.+12     	; 0x1cb46 <__fp_mpack_finite+0xc>

0001cb3a <__fp_mpack_finite>:
   1cb3a:	91 50       	subi	r25, 0x01	; 1
   1cb3c:	20 f4       	brcc	.+8      	; 0x1cb46 <__fp_mpack_finite+0xc>
   1cb3e:	87 95       	ror	r24
   1cb40:	77 95       	ror	r23
   1cb42:	67 95       	ror	r22
   1cb44:	b7 95       	ror	r27
   1cb46:	88 0f       	add	r24, r24
   1cb48:	91 1d       	adc	r25, r1
   1cb4a:	96 95       	lsr	r25
   1cb4c:	87 95       	ror	r24
   1cb4e:	97 f9       	bld	r25, 7
   1cb50:	08 95       	ret

0001cb52 <calloc>:
   1cb52:	0f 93       	push	r16
   1cb54:	1f 93       	push	r17
   1cb56:	cf 93       	push	r28
   1cb58:	df 93       	push	r29
   1cb5a:	86 9f       	mul	r24, r22
   1cb5c:	80 01       	movw	r16, r0
   1cb5e:	87 9f       	mul	r24, r23
   1cb60:	10 0d       	add	r17, r0
   1cb62:	96 9f       	mul	r25, r22
   1cb64:	10 0d       	add	r17, r0
   1cb66:	11 24       	eor	r1, r1
   1cb68:	c8 01       	movw	r24, r16
   1cb6a:	0d d0       	rcall	.+26     	; 0x1cb86 <malloc>
   1cb6c:	ec 01       	movw	r28, r24
   1cb6e:	00 97       	sbiw	r24, 0x00	; 0
   1cb70:	21 f0       	breq	.+8      	; 0x1cb7a <calloc+0x28>
   1cb72:	a8 01       	movw	r20, r16
   1cb74:	60 e0       	ldi	r22, 0x00	; 0
   1cb76:	70 e0       	ldi	r23, 0x00	; 0
   1cb78:	27 d1       	rcall	.+590    	; 0x1cdc8 <memset>
   1cb7a:	ce 01       	movw	r24, r28
   1cb7c:	df 91       	pop	r29
   1cb7e:	cf 91       	pop	r28
   1cb80:	1f 91       	pop	r17
   1cb82:	0f 91       	pop	r16
   1cb84:	08 95       	ret

0001cb86 <malloc>:
   1cb86:	0f 93       	push	r16
   1cb88:	1f 93       	push	r17
   1cb8a:	cf 93       	push	r28
   1cb8c:	df 93       	push	r29
   1cb8e:	82 30       	cpi	r24, 0x02	; 2
   1cb90:	91 05       	cpc	r25, r1
   1cb92:	10 f4       	brcc	.+4      	; 0x1cb98 <malloc+0x12>
   1cb94:	82 e0       	ldi	r24, 0x02	; 2
   1cb96:	90 e0       	ldi	r25, 0x00	; 0
   1cb98:	e0 91 b6 21 	lds	r30, 0x21B6	; 0x8021b6 <__flp>
   1cb9c:	f0 91 b7 21 	lds	r31, 0x21B7	; 0x8021b7 <__flp+0x1>
   1cba0:	20 e0       	ldi	r18, 0x00	; 0
   1cba2:	30 e0       	ldi	r19, 0x00	; 0
   1cba4:	a0 e0       	ldi	r26, 0x00	; 0
   1cba6:	b0 e0       	ldi	r27, 0x00	; 0
   1cba8:	30 97       	sbiw	r30, 0x00	; 0
   1cbaa:	19 f1       	breq	.+70     	; 0x1cbf2 <malloc+0x6c>
   1cbac:	40 81       	ld	r20, Z
   1cbae:	51 81       	ldd	r21, Z+1	; 0x01
   1cbb0:	02 81       	ldd	r16, Z+2	; 0x02
   1cbb2:	13 81       	ldd	r17, Z+3	; 0x03
   1cbb4:	48 17       	cp	r20, r24
   1cbb6:	59 07       	cpc	r21, r25
   1cbb8:	c8 f0       	brcs	.+50     	; 0x1cbec <malloc+0x66>
   1cbba:	84 17       	cp	r24, r20
   1cbbc:	95 07       	cpc	r25, r21
   1cbbe:	69 f4       	brne	.+26     	; 0x1cbda <malloc+0x54>
   1cbc0:	10 97       	sbiw	r26, 0x00	; 0
   1cbc2:	31 f0       	breq	.+12     	; 0x1cbd0 <malloc+0x4a>
   1cbc4:	12 96       	adiw	r26, 0x02	; 2
   1cbc6:	0c 93       	st	X, r16
   1cbc8:	12 97       	sbiw	r26, 0x02	; 2
   1cbca:	13 96       	adiw	r26, 0x03	; 3
   1cbcc:	1c 93       	st	X, r17
   1cbce:	27 c0       	rjmp	.+78     	; 0x1cc1e <malloc+0x98>
   1cbd0:	00 93 b6 21 	sts	0x21B6, r16	; 0x8021b6 <__flp>
   1cbd4:	10 93 b7 21 	sts	0x21B7, r17	; 0x8021b7 <__flp+0x1>
   1cbd8:	22 c0       	rjmp	.+68     	; 0x1cc1e <malloc+0x98>
   1cbda:	21 15       	cp	r18, r1
   1cbdc:	31 05       	cpc	r19, r1
   1cbde:	19 f0       	breq	.+6      	; 0x1cbe6 <malloc+0x60>
   1cbe0:	42 17       	cp	r20, r18
   1cbe2:	53 07       	cpc	r21, r19
   1cbe4:	18 f4       	brcc	.+6      	; 0x1cbec <malloc+0x66>
   1cbe6:	9a 01       	movw	r18, r20
   1cbe8:	bd 01       	movw	r22, r26
   1cbea:	ef 01       	movw	r28, r30
   1cbec:	df 01       	movw	r26, r30
   1cbee:	f8 01       	movw	r30, r16
   1cbf0:	db cf       	rjmp	.-74     	; 0x1cba8 <malloc+0x22>
   1cbf2:	21 15       	cp	r18, r1
   1cbf4:	31 05       	cpc	r19, r1
   1cbf6:	f9 f0       	breq	.+62     	; 0x1cc36 <malloc+0xb0>
   1cbf8:	28 1b       	sub	r18, r24
   1cbfa:	39 0b       	sbc	r19, r25
   1cbfc:	24 30       	cpi	r18, 0x04	; 4
   1cbfe:	31 05       	cpc	r19, r1
   1cc00:	80 f4       	brcc	.+32     	; 0x1cc22 <malloc+0x9c>
   1cc02:	8a 81       	ldd	r24, Y+2	; 0x02
   1cc04:	9b 81       	ldd	r25, Y+3	; 0x03
   1cc06:	61 15       	cp	r22, r1
   1cc08:	71 05       	cpc	r23, r1
   1cc0a:	21 f0       	breq	.+8      	; 0x1cc14 <malloc+0x8e>
   1cc0c:	fb 01       	movw	r30, r22
   1cc0e:	93 83       	std	Z+3, r25	; 0x03
   1cc10:	82 83       	std	Z+2, r24	; 0x02
   1cc12:	04 c0       	rjmp	.+8      	; 0x1cc1c <malloc+0x96>
   1cc14:	90 93 b7 21 	sts	0x21B7, r25	; 0x8021b7 <__flp+0x1>
   1cc18:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <__flp>
   1cc1c:	fe 01       	movw	r30, r28
   1cc1e:	32 96       	adiw	r30, 0x02	; 2
   1cc20:	44 c0       	rjmp	.+136    	; 0x1ccaa <malloc+0x124>
   1cc22:	fe 01       	movw	r30, r28
   1cc24:	e2 0f       	add	r30, r18
   1cc26:	f3 1f       	adc	r31, r19
   1cc28:	81 93       	st	Z+, r24
   1cc2a:	91 93       	st	Z+, r25
   1cc2c:	22 50       	subi	r18, 0x02	; 2
   1cc2e:	31 09       	sbc	r19, r1
   1cc30:	39 83       	std	Y+1, r19	; 0x01
   1cc32:	28 83       	st	Y, r18
   1cc34:	3a c0       	rjmp	.+116    	; 0x1ccaa <malloc+0x124>
   1cc36:	20 91 b4 21 	lds	r18, 0x21B4	; 0x8021b4 <__brkval>
   1cc3a:	30 91 b5 21 	lds	r19, 0x21B5	; 0x8021b5 <__brkval+0x1>
   1cc3e:	23 2b       	or	r18, r19
   1cc40:	41 f4       	brne	.+16     	; 0x1cc52 <malloc+0xcc>
   1cc42:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cc46:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cc4a:	30 93 b5 21 	sts	0x21B5, r19	; 0x8021b5 <__brkval+0x1>
   1cc4e:	20 93 b4 21 	sts	0x21B4, r18	; 0x8021b4 <__brkval>
   1cc52:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1cc56:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1cc5a:	21 15       	cp	r18, r1
   1cc5c:	31 05       	cpc	r19, r1
   1cc5e:	41 f4       	brne	.+16     	; 0x1cc70 <malloc+0xea>
   1cc60:	2d b7       	in	r18, 0x3d	; 61
   1cc62:	3e b7       	in	r19, 0x3e	; 62
   1cc64:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cc68:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cc6c:	24 1b       	sub	r18, r20
   1cc6e:	35 0b       	sbc	r19, r21
   1cc70:	e0 91 b4 21 	lds	r30, 0x21B4	; 0x8021b4 <__brkval>
   1cc74:	f0 91 b5 21 	lds	r31, 0x21B5	; 0x8021b5 <__brkval+0x1>
   1cc78:	e2 17       	cp	r30, r18
   1cc7a:	f3 07       	cpc	r31, r19
   1cc7c:	a0 f4       	brcc	.+40     	; 0x1cca6 <malloc+0x120>
   1cc7e:	2e 1b       	sub	r18, r30
   1cc80:	3f 0b       	sbc	r19, r31
   1cc82:	28 17       	cp	r18, r24
   1cc84:	39 07       	cpc	r19, r25
   1cc86:	78 f0       	brcs	.+30     	; 0x1cca6 <malloc+0x120>
   1cc88:	ac 01       	movw	r20, r24
   1cc8a:	4e 5f       	subi	r20, 0xFE	; 254
   1cc8c:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc8e:	24 17       	cp	r18, r20
   1cc90:	35 07       	cpc	r19, r21
   1cc92:	48 f0       	brcs	.+18     	; 0x1cca6 <malloc+0x120>
   1cc94:	4e 0f       	add	r20, r30
   1cc96:	5f 1f       	adc	r21, r31
   1cc98:	50 93 b5 21 	sts	0x21B5, r21	; 0x8021b5 <__brkval+0x1>
   1cc9c:	40 93 b4 21 	sts	0x21B4, r20	; 0x8021b4 <__brkval>
   1cca0:	81 93       	st	Z+, r24
   1cca2:	91 93       	st	Z+, r25
   1cca4:	02 c0       	rjmp	.+4      	; 0x1ccaa <malloc+0x124>
   1cca6:	e0 e0       	ldi	r30, 0x00	; 0
   1cca8:	f0 e0       	ldi	r31, 0x00	; 0
   1ccaa:	cf 01       	movw	r24, r30
   1ccac:	df 91       	pop	r29
   1ccae:	cf 91       	pop	r28
   1ccb0:	1f 91       	pop	r17
   1ccb2:	0f 91       	pop	r16
   1ccb4:	08 95       	ret

0001ccb6 <free>:
   1ccb6:	cf 93       	push	r28
   1ccb8:	df 93       	push	r29
   1ccba:	00 97       	sbiw	r24, 0x00	; 0
   1ccbc:	09 f4       	brne	.+2      	; 0x1ccc0 <free+0xa>
   1ccbe:	81 c0       	rjmp	.+258    	; 0x1cdc2 <free+0x10c>
   1ccc0:	fc 01       	movw	r30, r24
   1ccc2:	32 97       	sbiw	r30, 0x02	; 2
   1ccc4:	13 82       	std	Z+3, r1	; 0x03
   1ccc6:	12 82       	std	Z+2, r1	; 0x02
   1ccc8:	a0 91 b6 21 	lds	r26, 0x21B6	; 0x8021b6 <__flp>
   1cccc:	b0 91 b7 21 	lds	r27, 0x21B7	; 0x8021b7 <__flp+0x1>
   1ccd0:	10 97       	sbiw	r26, 0x00	; 0
   1ccd2:	81 f4       	brne	.+32     	; 0x1ccf4 <free+0x3e>
   1ccd4:	20 81       	ld	r18, Z
   1ccd6:	31 81       	ldd	r19, Z+1	; 0x01
   1ccd8:	82 0f       	add	r24, r18
   1ccda:	93 1f       	adc	r25, r19
   1ccdc:	20 91 b4 21 	lds	r18, 0x21B4	; 0x8021b4 <__brkval>
   1cce0:	30 91 b5 21 	lds	r19, 0x21B5	; 0x8021b5 <__brkval+0x1>
   1cce4:	28 17       	cp	r18, r24
   1cce6:	39 07       	cpc	r19, r25
   1cce8:	51 f5       	brne	.+84     	; 0x1cd3e <free+0x88>
   1ccea:	f0 93 b5 21 	sts	0x21B5, r31	; 0x8021b5 <__brkval+0x1>
   1ccee:	e0 93 b4 21 	sts	0x21B4, r30	; 0x8021b4 <__brkval>
   1ccf2:	67 c0       	rjmp	.+206    	; 0x1cdc2 <free+0x10c>
   1ccf4:	ed 01       	movw	r28, r26
   1ccf6:	20 e0       	ldi	r18, 0x00	; 0
   1ccf8:	30 e0       	ldi	r19, 0x00	; 0
   1ccfa:	ce 17       	cp	r28, r30
   1ccfc:	df 07       	cpc	r29, r31
   1ccfe:	40 f4       	brcc	.+16     	; 0x1cd10 <free+0x5a>
   1cd00:	4a 81       	ldd	r20, Y+2	; 0x02
   1cd02:	5b 81       	ldd	r21, Y+3	; 0x03
   1cd04:	9e 01       	movw	r18, r28
   1cd06:	41 15       	cp	r20, r1
   1cd08:	51 05       	cpc	r21, r1
   1cd0a:	f1 f0       	breq	.+60     	; 0x1cd48 <free+0x92>
   1cd0c:	ea 01       	movw	r28, r20
   1cd0e:	f5 cf       	rjmp	.-22     	; 0x1ccfa <free+0x44>
   1cd10:	d3 83       	std	Z+3, r29	; 0x03
   1cd12:	c2 83       	std	Z+2, r28	; 0x02
   1cd14:	40 81       	ld	r20, Z
   1cd16:	51 81       	ldd	r21, Z+1	; 0x01
   1cd18:	84 0f       	add	r24, r20
   1cd1a:	95 1f       	adc	r25, r21
   1cd1c:	c8 17       	cp	r28, r24
   1cd1e:	d9 07       	cpc	r29, r25
   1cd20:	59 f4       	brne	.+22     	; 0x1cd38 <free+0x82>
   1cd22:	88 81       	ld	r24, Y
   1cd24:	99 81       	ldd	r25, Y+1	; 0x01
   1cd26:	84 0f       	add	r24, r20
   1cd28:	95 1f       	adc	r25, r21
   1cd2a:	02 96       	adiw	r24, 0x02	; 2
   1cd2c:	91 83       	std	Z+1, r25	; 0x01
   1cd2e:	80 83       	st	Z, r24
   1cd30:	8a 81       	ldd	r24, Y+2	; 0x02
   1cd32:	9b 81       	ldd	r25, Y+3	; 0x03
   1cd34:	93 83       	std	Z+3, r25	; 0x03
   1cd36:	82 83       	std	Z+2, r24	; 0x02
   1cd38:	21 15       	cp	r18, r1
   1cd3a:	31 05       	cpc	r19, r1
   1cd3c:	29 f4       	brne	.+10     	; 0x1cd48 <free+0x92>
   1cd3e:	f0 93 b7 21 	sts	0x21B7, r31	; 0x8021b7 <__flp+0x1>
   1cd42:	e0 93 b6 21 	sts	0x21B6, r30	; 0x8021b6 <__flp>
   1cd46:	3d c0       	rjmp	.+122    	; 0x1cdc2 <free+0x10c>
   1cd48:	e9 01       	movw	r28, r18
   1cd4a:	fb 83       	std	Y+3, r31	; 0x03
   1cd4c:	ea 83       	std	Y+2, r30	; 0x02
   1cd4e:	49 91       	ld	r20, Y+
   1cd50:	59 91       	ld	r21, Y+
   1cd52:	c4 0f       	add	r28, r20
   1cd54:	d5 1f       	adc	r29, r21
   1cd56:	ec 17       	cp	r30, r28
   1cd58:	fd 07       	cpc	r31, r29
   1cd5a:	61 f4       	brne	.+24     	; 0x1cd74 <free+0xbe>
   1cd5c:	80 81       	ld	r24, Z
   1cd5e:	91 81       	ldd	r25, Z+1	; 0x01
   1cd60:	84 0f       	add	r24, r20
   1cd62:	95 1f       	adc	r25, r21
   1cd64:	02 96       	adiw	r24, 0x02	; 2
   1cd66:	e9 01       	movw	r28, r18
   1cd68:	99 83       	std	Y+1, r25	; 0x01
   1cd6a:	88 83       	st	Y, r24
   1cd6c:	82 81       	ldd	r24, Z+2	; 0x02
   1cd6e:	93 81       	ldd	r25, Z+3	; 0x03
   1cd70:	9b 83       	std	Y+3, r25	; 0x03
   1cd72:	8a 83       	std	Y+2, r24	; 0x02
   1cd74:	e0 e0       	ldi	r30, 0x00	; 0
   1cd76:	f0 e0       	ldi	r31, 0x00	; 0
   1cd78:	12 96       	adiw	r26, 0x02	; 2
   1cd7a:	8d 91       	ld	r24, X+
   1cd7c:	9c 91       	ld	r25, X
   1cd7e:	13 97       	sbiw	r26, 0x03	; 3
   1cd80:	00 97       	sbiw	r24, 0x00	; 0
   1cd82:	19 f0       	breq	.+6      	; 0x1cd8a <free+0xd4>
   1cd84:	fd 01       	movw	r30, r26
   1cd86:	dc 01       	movw	r26, r24
   1cd88:	f7 cf       	rjmp	.-18     	; 0x1cd78 <free+0xc2>
   1cd8a:	8d 91       	ld	r24, X+
   1cd8c:	9c 91       	ld	r25, X
   1cd8e:	11 97       	sbiw	r26, 0x01	; 1
   1cd90:	9d 01       	movw	r18, r26
   1cd92:	2e 5f       	subi	r18, 0xFE	; 254
   1cd94:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd96:	82 0f       	add	r24, r18
   1cd98:	93 1f       	adc	r25, r19
   1cd9a:	20 91 b4 21 	lds	r18, 0x21B4	; 0x8021b4 <__brkval>
   1cd9e:	30 91 b5 21 	lds	r19, 0x21B5	; 0x8021b5 <__brkval+0x1>
   1cda2:	28 17       	cp	r18, r24
   1cda4:	39 07       	cpc	r19, r25
   1cda6:	69 f4       	brne	.+26     	; 0x1cdc2 <free+0x10c>
   1cda8:	30 97       	sbiw	r30, 0x00	; 0
   1cdaa:	29 f4       	brne	.+10     	; 0x1cdb6 <free+0x100>
   1cdac:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <__flp+0x1>
   1cdb0:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <__flp>
   1cdb4:	02 c0       	rjmp	.+4      	; 0x1cdba <free+0x104>
   1cdb6:	13 82       	std	Z+3, r1	; 0x03
   1cdb8:	12 82       	std	Z+2, r1	; 0x02
   1cdba:	b0 93 b5 21 	sts	0x21B5, r27	; 0x8021b5 <__brkval+0x1>
   1cdbe:	a0 93 b4 21 	sts	0x21B4, r26	; 0x8021b4 <__brkval>
   1cdc2:	df 91       	pop	r29
   1cdc4:	cf 91       	pop	r28
   1cdc6:	08 95       	ret

0001cdc8 <memset>:
   1cdc8:	dc 01       	movw	r26, r24
   1cdca:	01 c0       	rjmp	.+2      	; 0x1cdce <memset+0x6>
   1cdcc:	6d 93       	st	X+, r22
   1cdce:	41 50       	subi	r20, 0x01	; 1
   1cdd0:	50 40       	sbci	r21, 0x00	; 0
   1cdd2:	e0 f7       	brcc	.-8      	; 0x1cdcc <memset+0x4>
   1cdd4:	08 95       	ret

0001cdd6 <_exit>:
   1cdd6:	f8 94       	cli

0001cdd8 <__stop_program>:
   1cdd8:	ff cf       	rjmp	.-2      	; 0x1cdd8 <__stop_program>
