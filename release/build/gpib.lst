
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001688  00800100  0001e486  0001e51a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001e486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000088d  00801788  00801788  0001fba2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001fba2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001fbb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001798  00000000  00000000  0001fbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002897c  00000000  00000000  0002138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000621a  00000000  00000000  00049d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000123ed  00000000  00000000  0004ff22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00006238  00000000  00000000  00062310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004803  00000000  00000000  00068548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00026ee9  00000000  00000000  0006cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001738  00000000  00000000  00093c34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__ctors_end>
       4:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
       8:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
       c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      10:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      14:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      18:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      1c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      20:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      24:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      28:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      2c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      30:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      34:	0c 94 6b 34 	jmp	0x68d6	; 0x68d6 <__vector_13>
      38:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      3c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      40:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      44:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      48:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      4c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      50:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__vector_20>
      54:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      58:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      5c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      60:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      64:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      68:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      6c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      70:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      74:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      78:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      7c:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      80:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      84:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      88:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__bad_interrupt>
      8c:	12 44       	sbci	r17, 0x42	; 66
      8e:	6d 45       	sbci	r22, 0x5D	; 93
      90:	42 44       	sbci	r20, 0x42	; 66
      92:	46 45       	sbci	r20, 0x56	; 86
      94:	46 45       	sbci	r20, 0x56	; 86
      96:	6d 45       	sbci	r22, 0x5D	; 93
      98:	6d 45       	sbci	r22, 0x5D	; 93
      9a:	6d 45       	sbci	r22, 0x5D	; 93
      9c:	6d 45       	sbci	r22, 0x5D	; 93
      9e:	6d 45       	sbci	r22, 0x5D	; 93
      a0:	6d 45       	sbci	r22, 0x5D	; 93
      a2:	6d 45       	sbci	r22, 0x5D	; 93
      a4:	6d 45       	sbci	r22, 0x5D	; 93
      a6:	12 44       	sbci	r17, 0x42	; 66
      a8:	0c 44       	sbci	r16, 0x4C	; 76
      aa:	6d 45       	sbci	r22, 0x5D	; 93
      ac:	6d 45       	sbci	r22, 0x5D	; 93
      ae:	6d 45       	sbci	r22, 0x5D	; 93
      b0:	6d 45       	sbci	r22, 0x5D	; 93
      b2:	3c 44       	sbci	r19, 0x4C	; 76
      b4:	6d 45       	sbci	r22, 0x5D	; 93
      b6:	6d 45       	sbci	r22, 0x5D	; 93
      b8:	12 44       	sbci	r17, 0x42	; 66
      ba:	6d 45       	sbci	r22, 0x5D	; 93
      bc:	6d 45       	sbci	r22, 0x5D	; 93
      be:	6d 45       	sbci	r22, 0x5D	; 93
      c0:	6d 45       	sbci	r22, 0x5D	; 93
      c2:	6d 45       	sbci	r22, 0x5D	; 93
      c4:	6d 45       	sbci	r22, 0x5D	; 93
      c6:	6d 45       	sbci	r22, 0x5D	; 93
      c8:	6d 45       	sbci	r22, 0x5D	; 93
      ca:	6d 45       	sbci	r22, 0x5D	; 93
      cc:	12 44       	sbci	r17, 0x42	; 66
      ce:	68 45       	sbci	r22, 0x58	; 88
      d0:	42 44       	sbci	r20, 0x42	; 66
      d2:	46 45       	sbci	r20, 0x56	; 86
      d4:	46 45       	sbci	r20, 0x56	; 86
      d6:	6d 45       	sbci	r22, 0x5D	; 93
      d8:	6d 45       	sbci	r22, 0x5D	; 93
      da:	6d 45       	sbci	r22, 0x5D	; 93
      dc:	6d 45       	sbci	r22, 0x5D	; 93
      de:	6d 45       	sbci	r22, 0x5D	; 93
      e0:	6d 45       	sbci	r22, 0x5D	; 93
      e2:	6d 45       	sbci	r22, 0x5D	; 93
      e4:	6d 45       	sbci	r22, 0x5D	; 93
      e6:	12 44       	sbci	r17, 0x42	; 66
      e8:	0c 44       	sbci	r16, 0x4C	; 76
      ea:	6d 45       	sbci	r22, 0x5D	; 93
      ec:	6d 45       	sbci	r22, 0x5D	; 93
      ee:	63 45       	sbci	r22, 0x53	; 83
      f0:	6d 45       	sbci	r22, 0x5D	; 93
      f2:	3c 44       	sbci	r19, 0x4C	; 76
      f4:	6d 45       	sbci	r22, 0x5D	; 93
      f6:	6d 45       	sbci	r22, 0x5D	; 93
      f8:	12 44       	sbci	r17, 0x42	; 66
      fa:	8f 45       	sbci	r24, 0x5F	; 95
      fc:	76 46       	sbci	r23, 0x66	; 102
      fe:	85 45       	sbci	r24, 0x55	; 85
     100:	e3 45       	sbci	r30, 0x53	; 83
     102:	ca 45       	sbci	r28, 0x5A	; 90
     104:	76 46       	sbci	r23, 0x66	; 102
     106:	76 46       	sbci	r23, 0x66	; 102
     108:	76 46       	sbci	r23, 0x66	; 102
     10a:	76 46       	sbci	r23, 0x66	; 102
     10c:	76 46       	sbci	r23, 0x66	; 102
     10e:	76 46       	sbci	r23, 0x66	; 102
     110:	76 46       	sbci	r23, 0x66	; 102
     112:	76 46       	sbci	r23, 0x66	; 102
     114:	99 45       	sbci	r25, 0x59	; 89
     116:	ad 45       	sbci	r26, 0x5D	; 93
     118:	76 46       	sbci	r23, 0x66	; 102
     11a:	76 46       	sbci	r23, 0x66	; 102
     11c:	76 46       	sbci	r23, 0x66	; 102
     11e:	76 46       	sbci	r23, 0x66	; 102
     120:	81 45       	sbci	r24, 0x51	; 81
     122:	76 46       	sbci	r23, 0x66	; 102
     124:	76 46       	sbci	r23, 0x66	; 102
     126:	ad 45       	sbci	r26, 0x5D	; 93
     128:	76 46       	sbci	r23, 0x66	; 102
     12a:	76 46       	sbci	r23, 0x66	; 102
     12c:	76 46       	sbci	r23, 0x66	; 102
     12e:	76 46       	sbci	r23, 0x66	; 102
     130:	76 46       	sbci	r23, 0x66	; 102
     132:	76 46       	sbci	r23, 0x66	; 102
     134:	76 46       	sbci	r23, 0x66	; 102
     136:	76 46       	sbci	r23, 0x66	; 102
     138:	76 46       	sbci	r23, 0x66	; 102
     13a:	8f 45       	sbci	r24, 0x5F	; 95
     13c:	11 46       	sbci	r17, 0x61	; 97
     13e:	85 45       	sbci	r24, 0x55	; 85
     140:	e3 45       	sbci	r30, 0x53	; 83
     142:	ca 45       	sbci	r28, 0x5A	; 90
     144:	76 46       	sbci	r23, 0x66	; 102
     146:	76 46       	sbci	r23, 0x66	; 102
     148:	76 46       	sbci	r23, 0x66	; 102
     14a:	76 46       	sbci	r23, 0x66	; 102
     14c:	76 46       	sbci	r23, 0x66	; 102
     14e:	76 46       	sbci	r23, 0x66	; 102
     150:	76 46       	sbci	r23, 0x66	; 102
     152:	76 46       	sbci	r23, 0x66	; 102
     154:	99 45       	sbci	r25, 0x59	; 89
     156:	ad 45       	sbci	r26, 0x5D	; 93
     158:	76 46       	sbci	r23, 0x66	; 102
     15a:	76 46       	sbci	r23, 0x66	; 102
     15c:	11 46       	sbci	r17, 0x61	; 97
     15e:	76 46       	sbci	r23, 0x66	; 102
     160:	81 45       	sbci	r24, 0x51	; 81
     162:	76 46       	sbci	r23, 0x66	; 102
     164:	76 46       	sbci	r23, 0x66	; 102
     166:	ad 45       	sbci	r26, 0x5D	; 93
     168:	a8 6e       	ori	r26, 0xE8	; 232
     16a:	b2 6e       	ori	r27, 0xE2	; 226
     16c:	ba 6e       	ori	r27, 0xEA	; 234
     16e:	bc 6e       	ori	r27, 0xEC	; 236
     170:	be 6e       	ori	r27, 0xEE	; 238
     172:	c0 6e       	ori	r28, 0xE0	; 224
     174:	c2 6e       	ori	r28, 0xE2	; 226
     176:	c4 6e       	ori	r28, 0xE4	; 228
     178:	c7 6e       	ori	r28, 0xE7	; 231
     17a:	64 8f       	std	Z+28, r22	; 0x1c
     17c:	8a 8f       	std	Y+26, r24	; 0x1a
     17e:	b1 8f       	std	Z+25, r27	; 0x19
     180:	cb 8f       	std	Y+27, r28	; 0x1b
     182:	d4 8f       	std	Z+28, r29	; 0x1c
     184:	f4 8f       	std	Z+28, r31	; 0x1c
     186:	0d 90       	ld	r0, X+
     188:	1c 90       	ld	r1, X
     18a:	67 90       	elpm	r6, Z+
     18c:	39 90       	ld	r3, Y+
     18e:	55 92       	las	Z, r5
     190:	5d 92       	st	X+, r5
     192:	62 92       	st	-Z, r6
     194:	86 92       	lac	Z, r8
     196:	90 92 da 92 	sts	0x92DA, r9	; 0x8092da <__bss_end+0x72c5>
     19a:	a5 92       	las	Z, r10
     19c:	a5 92       	las	Z, r10
     19e:	9d 92       	st	X+, r9
     1a0:	05 b4       	in	r0, 0x25	; 37
     1a2:	c4 b3       	in	r28, 0x14	; 20
     1a4:	c4 b3       	in	r28, 0x14	; 20
     1a6:	c4 b3       	in	r28, 0x14	; 20
     1a8:	c4 b3       	in	r28, 0x14	; 20
     1aa:	88 b3       	in	r24, 0x18	; 24
     1ac:	8f b3       	in	r24, 0x1f	; 31
     1ae:	96 b3       	in	r25, 0x16	; 22
     1b0:	a6 b3       	in	r26, 0x16	; 22
     1b2:	b4 b3       	in	r27, 0x14	; 20
     1b4:	ad b3       	in	r26, 0x1d	; 29
     1b6:	09 bc       	out	0x29, r0	; 41
     1b8:	25 bd       	out	0x25, r18	; 37
     1ba:	79 bd       	out	0x29, r23	; 41
     1bc:	fd bd       	out	0x2d, r31	; 45
     1be:	30 be       	out	0x30, r3	; 48
     1c0:	ac be       	out	0x3c, r10	; 60
     1c2:	86 c0       	rjmp	.+268    	; 0x2d0 <__c.2332+0xf6>
     1c4:	49 c3       	rjmp	.+1682   	; 0x858 <__c.3662+0xb>
     1c6:	49 c3       	rjmp	.+1682   	; 0x85a <__c.3662+0xd>
     1c8:	49 c3       	rjmp	.+1682   	; 0x85c <__c.3662+0xf>
     1ca:	5c c1       	rjmp	.+696    	; 0x484 <__c.3683>
     1cc:	9b c1       	rjmp	.+822    	; 0x504 <__c.3654>
     1ce:	4b c2       	rjmp	.+1174   	; 0x666 <__c.3925+0xc>
     1d0:	8c c2       	rjmp	.+1304   	; 0x6ea <__c.3904+0x6>
     1d2:	c0 bc       	out	0x20, r12	; 32
     1d4:	dc bc       	out	0x2c, r13	; 44

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3690>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3685>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3716>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3707>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3701>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3686>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3684>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3682>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3680>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3678>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3676>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3674>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3672>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3670>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3702>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3695>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3685>:
     468:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     478:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

00000484 <__c.3683>:
     484:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     494:	20 66 61 69 6c 65 64 0a 00                           failed..

0000049d <__c.3672>:
     49d:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4ad:	65 72 72 6f 72 0a 00                                error..

000004b4 <__c.3670>:
     4b4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4c4:	6f 72 0a 00                                         or..

000004c8 <__c.3662>:
     4c8:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d8:	72 72 6f 72 0a 00                                   rror..

000004de <__c.3820>:
     4de:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4ee:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4fe:	74 20 25 64 0a 00                                   t %d..

00000504 <__c.3654>:
     504:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     514:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000524 <__c.3733>:
     524:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000534 <__c.3731>:
     534:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000545 <__c.3729>:
     545:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     555:	66 61 69 6c 65 64 0a 00                             failed..

0000055d <__c.3727>:
     55d:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000569 <__c.3725>:
     569:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     579:	64 0a 00                                            d..

0000057c <__c.3723>:
     57c:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     58c:	65 64 0a 00                                         ed..

00000590 <__c.3703>:
     590:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000059b <__c.3701>:
     59b:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a9 <__c.3692>:
     5a9:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b8 <__c.3687>:
     5b8:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005c2 <__c.3667>:
     5c2:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5d2:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005df <__c.3942>:
     5df:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005f0 <__c.3940>:
     5f0:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     600:	0a 00                                               ..

00000602 <__c.3938>:
     602:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000613 <__c.3936>:
     613:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000624 <__c.3934>:
     624:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     634:	0a 00                                               ..

00000636 <__c.3927>:
     636:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     646:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     656:	6d 65 0a 00                                         me..

0000065a <__c.3925>:
     65a:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     66a:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000674 <__c.3923>:
     674:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     684:	61 69 6c 65 64 0a 00                                ailed..

0000068b <__c.3921>:
     68b:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     69b:	6e 69 74 0a 00                                      nit..

000006a0 <__c.3919>:
     6a0:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6b0:	0a 00                                               ..

000006b2 <__c.3910>:
     6b2:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6c2:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006cb <__c.3908>:
     6cb:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6db:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006e4 <__c.3904>:
     6e4:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6f4:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006fd <__c.3902>:
     6fd:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     70d:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000716 <__c.3873>:
     716:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     726:	61 69 6c 65 64 0a 00                                ailed..

0000072d <__c.3871>:
     72d:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

0000073e <__c.3869>:
     73e:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     74e:	0a 00                                               ..

00000750 <__c.3867>:
     750:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000761 <__c.3865>:
     761:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000772 <__c.3863>:
     772:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     782:	0a 00                                               ..

00000784 <__c.3842>:
     784:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     794:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

000007a5 <__c.3717>:
     7a5:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7b5:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007c2 <__c.3685>:
     7c2:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007d2 <__c.3714>:
     7d2:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007e0 <__c.3712>:
     7e0:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7f0:	25 6c 64 0a 00                                      %ld..

000007f5 <__c.3710>:
     7f5:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     805:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000813 <__c.3707>:
     813:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000824 <__c.3705>:
     824:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

00000830 <__c.3703>:
     830:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

00000840 <__c.3690>:
     840:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

0000084d <__c.3662>:
     84d:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     85d:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000869 <__c.3734>:
     869:	0a 00                                               ..

0000086b <__c.3732>:
     86b:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     87b:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     88b:	73 00                                               s.

0000088d <__c.3730>:
     88d:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     89d:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a8 <__c.3724>:
     8a8:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b8:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c8:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d8:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e8:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008f5 <__c.3722>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3720>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3718>:
     938:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     948:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000957 <__c.3716>:
     957:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     967:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000976 <__c.3714>:
     976:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     986:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000995 <__c.3712>:
     995:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9a5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009b4 <__c.3710>:
     9b4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9c4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009d3 <__c.3708>:
     9d3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9e3:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009f1 <__c.3706>:
     9f1:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a01:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a0f <__c.3704>:
     a0f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a1f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a2e <__c.3702>:
     a2e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a3e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a4c <__c.3700>:
     a4c:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a5d <__c.3664>:
     a5d:	72 63 3d 25 75 0a 00                                rc=%u..

00000a64 <__c.3702>:
     a64:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a74:	72 65 65 0a 00                                      ree..

00000a79 <__c.3700>:
     a79:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a89:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a99:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000aa2 <__c.3696>:
     aa2:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000ab0 <__c.3683>:
     ab0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     ac0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000ad0 <__c.3681>:
     ad0:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ade <__c.3679>:
     ade:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     aee:	73 74 0a 00                                         st..

00000af2 <__c.3677>:
     af2:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b02 <__c.3675>:
     b02:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b12:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b22 <__c.3667>:
     b22:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b32 <__c.3657>:
     b32:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b42:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b52:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b62:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b72:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b82:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b92:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     ba2:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000bae <__c.3655>:
     bae:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bba <__c.4014>:
     bba:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bca:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd9 <__c.3987>:
     bd9:	25 73 0a 00                                         %s..

00000bdd <__c.3985>:
     bdd:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000be5 <__c.3881>:
     be5:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000bf1 <__c.3879>:
     bf1:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bfd <__c.3877>:
     bfd:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c09 <__c.3875>:
     c09:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c16 <__c.3873>:
     c16:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c23 <__c.3871>:
     c23:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c30 <__c.3869>:
     c30:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c39 <__c.3867>:
     c39:	46 69 6c 65 0a 00                                   File..

00000c3f <__c.3865>:
     c3f:	44 49 52 0a 00                                      DIR..

00000c44 <__c.3863>:
     c44:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c4d <__c.3861>:
     c4d:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c5a <__c.3740>:
     c5a:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c66 <__c.3669>:
     c66:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c76:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c7e <__c.3662>:
     c7e:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c8e:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c96 <__c.3902>:
     c96:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000ca5 <__c.3892>:
     ca5:	53 75 6d 3a 20 25 30 34 58 68 2c 20 25 35 75 0a     Sum: %04Xh, %5u.
	...

00000cb6 <__c.3884>:
     cb6:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000cc5 <__c.3874>:
     cc5:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cd2 <__c.3872>:
     cd2:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000ce2 <__c.3864>:
     ce2:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ced <__c.3860>:
     ced:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cfd:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     d0d:	68 0a 00                                            h..

00000d10 <__c.3857>:
     d10:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000d20 <__c.3852>:
     d20:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     d30:	5b 25 73 5d 0a 00                                   [%s]..

00000d36 <__c.3850>:
     d36:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000d44 <__c.3848>:
     d44:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d54:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d65 <__c.3835>:
     d65:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d75:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d7f <__c.3830>:
     d7f:	25 73 0a 00                                         %s..

00000d83 <__c.3828>:
     d83:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d93:	0a 00                                               ..

00000d95 <__c.3816>:
     d95:	0d 00                                               ..

00000d97 <__c.3814>:
     d97:	4d 6f 72 65 2e 2e 00                                More...

00000d9e <__c.3804>:
     d9e:	0a 00                                               ..

00000da0 <__c.3799>:
     da0:	0a 00                                               ..

00000da2 <__c.3791>:
     da2:	20 3a 20 00                                          : .

00000da6 <__c.3786>:
     da6:	20 20 20 00                                            .

00000daa <__c.3781>:
     daa:	25 30 32 78 20 00                                   %02x .

00000db0 <__c.3779>:
     db0:	25 30 38 6c 78 20 3a 20 00                          %08lx : .

00000db9 <__c.3777>:
     db9:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000dc8 <__c.3765>:
     dc8:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     dd8:	2e 0a 00                                            ...

00000ddb <__c.3761>:
     ddb:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000dea <__c.3758>:
     dea:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000df7 <__c.3756>:
     df7:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000e04 <__c.3754>:
     e04:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e14 <__c.3752>:
     e14:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000e21 <__c.3750>:
     e21:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e31 <__c.3748>:
     e31:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000e3d <__c.3737>:
     e3d:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000e48 <__c.3735>:
     e48:	0a 00                                               ..

00000e4a <__c.3730>:
     e4a:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e5a <__c.3719>:
     e5a:	25 73 0a 00                                         %s..

00000e5e <__c.3688>:
     e5e:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     e6e:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e7e:	68 6d 6f 64 20 66 69 6c 65 20 4e 4e 4e 0a 70 6f     hmod file NNN.po
     e8e:	73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d 70     six cat file [-p
     e9e:	5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a 70     ].posix cd dir.p
     eae:	6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31 20     osix copy file1 
     ebe:	66 69 6c 65 32 0a 70 6f 73 69 78 20 68 65 78 64     file2.posix hexd
     ece:	75 6d 70 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f     ump file [-p].po
     ede:	73 69 78 20 6c 6f 67 20 73 74 72 0a 70 6f 73 69     six log str.posi
     eee:	78 20 6c 73 20 64 69 72 20 5b 2d 6c 5d 0a 70 6f     x ls dir [-l].po
     efe:	73 69 78 20 6d 6b 64 69 72 20 64 69 72 0a 70 6f     six mkdir dir.po
     f0e:	73 69 78 20 6d 6b 66 73 0a 70 6f 73 69 78 20 70     six mkfs.posix p
     f1e:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     f2e:	0a 70 6f 73 69 78 20 73 74 61 74 20 66 69 6c 65     .posix stat file
     f3e:	0a 70 6f 73 69 78 20 73 75 6d 20 66 69 6c 65 0a     .posix sum file.
     f4e:	70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70 6f     posix rm file.po
     f5e:	73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70 6f     six rmdir dir.po
     f6e:	73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20 6e     six rename old n
     f7e:	65 77 0a 70 6f 73 69 78 20 75 70 6c 6f 61 64 20     ew.posix upload 
     f8e:	66 69 6c 65 0a 0a 00                                file...

00000f95 <__c.3686>:
     f95:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000fa1 <__c.3877>:
     fa1:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000faf <__c.3871>:
     faf:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000fbc <__c.3864>:
     fbc:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000fca <__c.3855>:
     fca:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000fd7 <__c.3846>:
     fd7:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000fe8 <__c.3832>:
     fe8:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ff8:	5d 0a 00                                            ]..

00000ffb <__c.3814>:
     ffb:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
    100b:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00001018 <__c.4394>:
    1018:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
    1028:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
    1038:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00001040 <__c.4389>:
    1040:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
    1050:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

0000105a <__c.4379>:
    105a:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
    106a:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
    107a:	28 25 64 29 5d 0a 00                                (%d)]..

00001081 <__c.4375>:
    1081:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    1091:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    10a1:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

000010ae <__c.4372>:
    10ae:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    10be:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

000010c7 <__c.4356>:
    10c7:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

000010d2 <__c.4354>:
    10d2:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

000010dd <__c.4352>:
    10dd:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

000010e8 <__c.4348>:
    10e8:	20 20 20 20 20 00                                        .

000010ee <__c.4346>:
    10ee:	25 30 32 58 20 25 63 20 00                          %02X %c .

000010f7 <__c.4304>:
    10f7:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1107:	3e 0a 00                                            >..

0000110a <__c.4300>:
    110a:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    111a:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001124 <__c.4296>:
    1124:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1134:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

0000113f <__c.4293>:
    113f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    114f:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

0000115a <__c.4288>:
    115a:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    116a:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    117a:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00001182 <__c.4284>:
    1182:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1192:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000119c <__c.4267>:
    119c:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11ac:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11bc:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011ca <__c.4262>:
    11ca:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000011d4 <__c.4260>:
    11d4:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000011df <__c.4255>:
    11df:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000011eb <__c.4247>:
    11eb:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    11fb:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    120b:	5d 0a 00                                            ]..

0000120e <__c.4241>:
    120e:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    121e:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001229 <__c.4239>:
    1229:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1239:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1249:	72 61 6e 67 65 0a 00                                range..

00001250 <__c.4234>:
    1250:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1260:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000126b <__c.4232>:
    126b:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    127b:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    128b:	61 6e 67 65 0a 00                                   ange..

00001291 <__c.4227>:
    1291:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    12a1:	5d 0a 00                                            ]..

000012a4 <__c.4222>:
    12a4:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000012b5 <__c.4407>:
    12b5:	0a 00                                               ..

000012b7 <__c.4399>:
    12b7:	2e 00                                               ..

000012b9 <__c.4397>:
    12b9:	25 63 00                                            %c.

000012bc <__c.4395>:
    12bc:	20 7c 20 00                                          | .

000012c0 <__c.4390>:
    12c0:	20 25 30 32 58 00                                    %02X.

000012c6 <__c.4388>:
    12c6:	0a 00                                               ..

000012c8 <__c.4386>:
    12c8:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000012d4 <__c.4375>:
    12d4:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000012e5 <__c.4370>:
    12e5:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    12f5:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1305:	32 58 48 5d 0a 00                                   2XH]..

0000130b <__c.4368>:
    130b:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    131b:	0a 00                                               ..

0000131d <__c.4366>:
    131d:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000132e <__c.4361>:
    132e:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000133a <__c.4359>:
    133a:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000134a <__c.4357>:
    134a:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    135a:	52 5d 0a 00                                         R]..

0000135e <__c.4355>:
    135e:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    136e:	0a 00                                               ..

00001370 <__c.4353>:
    1370:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001381 <__c.4351>:
    1381:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001388 <__c.4346>:
    1388:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

00001394 <__c.4344>:
    1394:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    13a4:	52 5d 0a 00                                         R]..

000013a8 <__c.4342>:
    13a8:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000013b9 <__c.4340>:
    13b9:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    13c9:	0a 00                                               ..

000013cb <__c.4338>:
    13cb:	0a 00                                               ..

000013cd <__c.4336>:
    13cd:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000013d4 <__c.4331>:
    13d4:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    13e4:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000013f0 <__c.4329>:
    13f0:	5b 44 43 4c 5d 0a 00                                [DCL]..

000013f7 <__c.4327>:
    13f7:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001404 <__c.4325>:
    1404:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001410 <__c.4323>:
    1410:	5b 53 44 43 5d 0a 00                                [SDC]..

00001417 <__c.4321>:
    1417:	5b 53 50 44 5d 0a 00                                [SPD]..

0000141e <__c.4319>:
    141e:	5b 53 50 45 5d 0a 00                                [SPE]..

00001425 <__c.4317>:
    1425:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1435:	5d 0a 00                                            ]..

00001438 <__c.4315>:
    1438:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1448:	5d 0a 00                                            ]..

0000144b <__c.4310>:
    144b:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    145b:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001465 <__c.4308>:
    1465:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1475:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001486 <__c.4281>:
    1486:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001497 <__c.4279>:
    1497:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000014a4 <__c.4277>:
    14a4:	3c 42 55 53 3e 0a 00                                <BUS>..

000014ab <__c.4275>:
    14ab:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000014b6 <__c.4273>:
    14b6:	3c 49 46 43 3e 0a 00                                <IFC>..

000014bd <__c.4268>:
    14bd:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    14cd:	0a 00                                               ..

000014cf <__c.4266>:
    14cf:	44 6f 6e 65 0a 00                                   Done..

000014d5 <__c.4262>:
    14d5:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000014e1 <__c.4260>:
    14e1:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14f1:	20 65 78 69 74 0a 00                                 exit..

000014f8 <__c.4258>:
    14f8:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1508:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1518:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001523 <__c.4256>:
    1523:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1533:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

0000153d <__c.4210>:
    153d:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    154d:	6f 74 65 63 74 65 64 0a 00                          otected..

00001556 <__c.4208>:
    1556:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001567 <__c.4206>:
    1567:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1577:	0a 00                                               ..

00001579 <__c.4450>:
    1579:	50 6f 72 74 20 64 64 72 20 44 20 52 44 3a 5b 25     Port ddr D RD:[%
    1589:	30 32 58 48 5d 0a 00                                02XH]..

00001590 <__c.4448>:
    1590:	50 6f 72 74 20 64 64 72 20 43 20 52 44 3a 5b 25     Port ddr C RD:[%
    15a0:	30 32 58 48 5d 0a 00                                02XH]..

000015a7 <__c.4446>:
    15a7:	50 6f 72 74 20 64 64 72 20 42 20 52 44 3a 5b 25     Port ddr B RD:[%
    15b7:	30 32 58 48 5d 0a 00                                02XH]..

000015be <__c.4444>:
    15be:	50 6f 72 74 20 64 64 72 20 41 20 52 44 3a 5b 25     Port ddr A RD:[%
    15ce:	30 32 58 48 5d 0a 00                                02XH]..

000015d5 <__c.4442>:
    15d5:	50 6f 72 74 20 6c 61 74 63 68 20 44 20 52 44 3a     Port latch D RD:
    15e5:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015ee <__c.4440>:
    15ee:	50 6f 72 74 20 6c 61 74 63 68 20 43 20 52 44 3a     Port latch C RD:
    15fe:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001607 <__c.4438>:
    1607:	50 6f 72 74 20 6c 61 74 63 68 20 42 20 52 44 3a     Port latch B RD:
    1617:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001620 <__c.4436>:
    1620:	50 6f 72 74 20 6c 61 74 63 68 20 41 20 52 44 3a     Port latch A RD:
    1630:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001639 <__c.4434>:
    1639:	50 6f 72 74 20 70 69 6e 73 20 44 20 52 44 3a 5b     Port pins D RD:[
    1649:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001651 <__c.4432>:
    1651:	50 6f 72 74 20 70 69 6e 73 20 43 20 52 44 3a 5b     Port pins C RD:[
    1661:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001669 <__c.4430>:
    1669:	50 6f 72 74 20 70 69 6e 73 20 42 20 52 44 3a 5b     Port pins B RD:[
    1679:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001681 <__c.4428>:
    1681:	50 6f 72 74 20 70 69 6e 73 20 41 20 52 44 3a 5b     Port pins A RD:[
    1691:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001699 <__c.4425>:
    1699:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000016a6 <__c.4417>:
    16a6:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    16b6:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    16c6:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    16d6:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    16e6:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    16f6:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    1706:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    1716:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    1726:	74 20 5b 42 55 53 5d 0a 67 70 69 62 20 69 66 63     t [BUS].gpib ifc
    1736:	0a 67 70 69 62 20 70 6c 6f 74 20 66 69 6c 65 6e     .gpib plot filen
    1746:	61 6d 65 2e 74 78 74 0a 67 70 69 62 20 70 70 72     ame.txt.gpib ppr
    1756:	5f 62 69 74 5f 6f 6e 20 4e 0a 67 70 69 62 20 70     _bit_on N.gpib p
    1766:	70 72 5f 62 69 74 5f 6f 66 66 20 4e 0a 67 70 69     pr_bit_off N.gpi
    1776:	62 20 70 70 72 5f 73 65 74 20 58 58 0a 67 70 69     b ppr_set XX.gpi
    1786:	62 20 70 70 72 5f 69 6e 69 74 0a 67 70 69 62 20     b ppr_init.gpib 
    1796:	70 6f 72 74 20 72 65 61 64 20 70 69 6e 73 20 20     port read pins  
    17a6:	20 5b 41 2d 44 5d 0a 67 70 69 62 20 70 6f 72 74      [A-D].gpib port
    17b6:	20 72 65 61 64 20 6c 61 74 63 68 20 20 5b 41 2d      read latch  [A-
    17c6:	44 5d 0a 67 70 69 62 20 70 6f 72 74 20 72 65 61     D].gpib port rea
    17d6:	64 20 64 64 72 20 20 20 20 5b 41 2d 44 5d 0a 67     d ddr    [A-D].g
    17e6:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 6c     pib port write l
    17f6:	61 74 63 68 20 5b 41 2d 44 5d 20 76 61 6c 0a 67     atch [A-D] val.g
    1806:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 70     pib port write p
    1816:	69 6e 73 20 20 5b 41 2d 44 5d 20 76 61 6c 0a 0a     ins  [A-D] val..
	...

00001827 <__c.4415>:
    1827:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001832 <__c.4518>:
    1832:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1842:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1852:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1862:	48 5d 0a 00                                         H]..

00001866 <__c.4516>:
    1866:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1876:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1886:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1896:	48 5d 0a 00                                         H]..

0000189a <__c.4514>:
    189a:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    18aa:	74 5d 0a 00                                         t]..

000018ae <__c.4512>:
    18ae:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000018bd <__c.4510>:
    18bd:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    18cd:	74 65 5d 0a 00                                      te]..

000018d2 <__c.4508>:
    18d2:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    18e2:	61 74 65 5d 0a 00                                   ate]..

000018e8 <__c.4506>:
    18e8:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    18f8:	61 74 65 5d 0a 00                                   ate]..

000018fe <__c.4501>:
    18fe:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    190e:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    191e:	5d 0a 00                                            ]..

00001921 <__c.4494>:
    1921:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    1931:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

0000193d <__c.4487>:
    193d:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

0000194c <__c.4485>:
    194c:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    195c:	5d 0a 00                                            ]..

0000195f <__c.4478>:
    195f:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

0000196b <__c.4464>:
    196b:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    197b:	5d 0a 00                                            ]..

0000197e <__c.4462>:
    197e:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    198e:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001998 <__c.4455>:
    1998:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    19a8:	48 5d 0a 00                                         H]..

000019ac <__c.4453>:
    19ac:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    19bc:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000019cc <__c.4448>:
    19cc:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    19dc:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    19ec:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    19fc:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001a08 <__c.4445>:
    1a08:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1a18:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001a28 <__c.4443>:
    1a28:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1a38:	29 5d 0a 00                                         )]..

00001a3c <__c.4441>:
    1a3c:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1a4c:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1a5c:	28 25 64 29 5d 0a 00                                (%d)]..

00001a63 <__c.4439>:
    1a63:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1a73:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001a81 <__c.4437>:
    1a81:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1a91:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001a9e <__c.4434>:
    1a9e:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1aae:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1abe:	44 4f 5d 0a 00                                      DO]..

00001ac3 <__c.4431>:
    1ac3:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1ad3:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001adc <__c.4429>:
    1adc:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1aec:	5d 0a 00                                            ]..

00001aef <__c.4420>:
    1aef:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1aff:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1b0f:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1b1f:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001b27 <__c.4417>:
    1b27:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1b37:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001b47 <__c.4415>:
    1b47:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    1b57:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00001b68 <__c.4413>:
    1b68:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1b78:	61 74 75 73 5d 0a 00                                atus]..

00001b7f <__c.4411>:
    1b7f:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1b8f:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001b98 <__c.4409>:
    1b98:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1ba8:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001bb3 <__c.4407>:
    1bb3:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1bc3:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001bd2 <__c.4405>:
    1bd2:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1be2:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00001bf0 <__c.4403>:
    1bf0:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001c01 <__c.4401>:
    1c01:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    1c11:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00001c1d <__c.4399>:
    1c1d:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    1c2d:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00001c3a <__c.4397>:
    1c3a:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    1c4a:	2d 4f 50 5d 0a 00                                   -OP]..

00001c50 <__c.4395>:
    1c50:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1c60:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00001c71 <__c.4393>:
    1c71:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    1c81:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    1c91:	44 4f 5d 0a 00                                      DO]..

00001c96 <__c.4391>:
    1c96:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    1ca6:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00001cb0 <__c.4389>:
    1cb0:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    1cc0:	2d 4f 50 5d 0a 00                                   -OP]..

00001cc6 <__c.4387>:
    1cc6:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00001cd4 <__c.4385>:
    1cd4:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    1ce4:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00001cf0 <__c.4383>:
    1cf0:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    1d00:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00001d0d <__c.4381>:
    1d0d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d1d:	20 57 72 69 74 65 5d 0a 00                           Write]..

00001d26 <__c.4378>:
    1d26:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d36:	20 52 65 61 64 5d 0a 00                              Read]..

00001d3e <__c.4376>:
    1d3e:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    1d4e:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00001d57 <__c.4373>:
    1d57:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    1d67:	25 64 29 5d 0a 00                                   %d)]..

00001d6d <__c.4371>:
    1d6d:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1d7d:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001d86 <__c.4369>:
    1d86:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1d96:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    1da6:	52 4f 52 5d 0a 00                                   ROR]..

00001dac <__c.4360>:
    1dac:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    1dbc:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00001dc6 <__c.4355>:
    1dc6:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    1dd6:	76 61 6c 69 64 5d 0a 00                             valid]..

00001dde <__c.4350>:
    1dde:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    1dee:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00001dfd <__c.4348>:
    1dfd:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    1e0d:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00001e1a <__c.4346>:
    1e1a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    1e2a:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    1e3a:	5d 0a 00                                            ]..

00001e3d <__c.4344>:
    1e3d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001e4e <__c.4336>:
    1e4e:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e5e:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00001e69 <__c.4334>:
    1e69:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e79:	73 5d 0a 00                                         s]..

00001e7d <__c.4324>:
    1e7d:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00001e88 <__c.4322>:
    1e88:	25 73 3a 0a 00                                      %s:..

00001e8d <__c.4297>:
    1e8d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1e9d:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    1ead:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00001eb8 <__c.4295>:
    1eb8:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1ec8:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    1ed8:	49 4e 49 53 48 5d 0a 00                             INISH]..

00001ee0 <__c.4291>:
    1ee0:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1ef0:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    1f00:	58 48 29 5d 0a 00                                   XH)]..

00001f06 <__c.4289>:
    1f06:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    1f16:	72 5d 0a 00                                         r]..

00001f1a <__c.4285>:
    1f1a:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f2a:	5d 0a 00                                            ]..

00001f2d <__c.4283>:
    1f2d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1f3d:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    1f4d:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00001f56 <__c.4271>:
    1f56:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f66:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    1f76:	62 79 74 65 73 5d 0a 00                             bytes]..

00001f7e <__c.4269>:
    1f7e:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f8e:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    1f9e:	53 48 5d 0a 00                                      SH]..

00001fa3 <__c.4264>:
    1fa3:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    1fb3:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00001fbc <__c.4262>:
    1fbc:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fcc:	45 72 72 6f 72 5d 0a 00                             Error]..

00001fd4 <__c.4260>:
    1fd4:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fe4:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00001ff2 <__c.4258>:
    1ff2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2002:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2012:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

0000201a <__c.4241>:
    201a:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    202a:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002036 <__c.4225>:
    2036:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2046:	5d 0a 00                                            ]..

00002049 <__c.4200>:
    2049:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2059:	0a 00                                               ..

0000205b <__c.4198>:
    205b:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002068 <__c.4355>:
    2068:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2078:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2088:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002091 <__c.4352>:
    2091:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    20a1:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    20b1:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000020bc <__c.4349>:
    20bc:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    20cc:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    20dc:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000020e5 <__c.4344>:
    20e5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    20f5:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002105 <__c.4341>:
    2105:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2115:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002121 <__c.4338>:
    2121:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2131:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2141:	0a 00                                               ..

00002143 <__c.4335>:
    2143:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2153:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002162 <__c.4332>:
    2162:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2172:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002183 <__c.4329>:
    2183:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2193:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000021a3 <__c.4325>:
    21a3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    21b3:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    21c3:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    21d3:	0a 00                                               ..

000021d5 <__c.4320>:
    21d5:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000021e5 <__c.4317>:
    21e5:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    21f5:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002204 <__c.4315>:
    2204:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2214:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2224:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

0000222f <__c.4313>:
    222f:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    223f:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000224f <__c.4311>:
    224f:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    225f:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    226f:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002278 <__c.4309>:
    2278:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2288:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002294 <__c.4307>:
    2294:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    22a4:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    22b4:	0a 00                                               ..

000022b6 <__c.4305>:
    22b6:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000022c6 <__c.4302>:
    22c6:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    22d6:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000022e7 <__c.4300>:
    22e7:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    22f7:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2307:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002310 <__c.4298>:
    2310:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2320:	36 5d 0a 00                                         6]..

00002324 <__c.4295>:
    2324:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2334:	35 5d 0a 00                                         5]..

00002338 <__c.4292>:
    2338:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2348:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002358 <__c.4289>:
    2358:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2368:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2378:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002387 <__c.4287>:
    2387:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2397:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000023a8 <__c.4285>:
    23a8:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    23b8:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000023c9 <__c.4283>:
    23c9:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    23d9:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    23e9:	0a 00                                               ..

000023eb <__c.4281>:
    23eb:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    23fb:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    240b:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    241b:	0a 00                                               ..

0000241d <__c.4269>:
    241d:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    242d:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    243d:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    244d:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    245d:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

0000246e <__c.4267>:
    246e:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    247e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    248e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    249e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    24ae:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024be <__c.4265>:
    24be:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    24ce:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    24de:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    24ee:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    24fe:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

0000250e <__c.4263>:
    250e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    251e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    252e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    253e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    254e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

0000255e <__c.4258>:
    255e:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    256e:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    257e:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    258e:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    259e:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    25ae:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    25be:	58 48 5d 0a 00                                      XH]..

000025c3 <__c.4256>:
    25c3:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    25d3:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    25e3:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    25f3:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2603:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2613:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2623:	30 32 58 48 5d 0a 00                                02XH]..

0000262a <__c.4254>:
    262a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    263a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    264a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    265a:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    266a:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    267a:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    268a:	30 32 58 48 5d 0a 00                                02XH]..

00002691 <__c.4252>:
    2691:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    26a1:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    26b1:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    26c1:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    26d1:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    26e1:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    26f1:	30 32 58 48 5d 0a 00                                02XH]..

000026f8 <__c.4245>:
    26f8:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002707 <__c.4241>:
    2707:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2717:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002721 <__c.4239>:
    2721:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

00002731 <__c.4232>:
    2731:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

0000273e <__c.4230>:
    273e:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    274e:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002758 <__c.4223>:
    2758:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2768:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002777 <__c.4216>:
    2777:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2787:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002791 <__c.4209>:
    2791:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    27a1:	6e 65 5d 0a 00                                      ne]..

000027a6 <__c.4205>:
    27a6:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

000027b6 <__c.4164>:
    27b6:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    27c6:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    27d6:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000027e1 <__c.4194>:
    27e1:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    27f1:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2801:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002809 <__c.4171>:
    2809:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2819:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002822 <__c.4157>:
    2822:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2832:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000283c <__c.4155>:
    283c:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    284c:	75 73 5d 0a 00                                      us]..

00002851 <__c.4149>:
    2851:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2861:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000286b <__c.4147>:
    286b:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    287b:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002889 <__c.4141>:
    2889:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2899:	74 61 74 75 73 5d 0a 00                             tatus]..

000028a1 <__c.4163>:
    28a1:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    28b1:	74 65 73 0a 00                                      tes..

000028b6 <__c.4161>:
    28b6:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28c6:	0a 00                                               ..

000028c8 <__c.4159>:
    28c8:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28d8:	0a 00                                               ..

000028da <__c.4154>:
    28da:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    28ea:	6e 65 64 0a 00                                      ned..

000028ef <__c.4145>:
    28ef:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    28ff:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002909 <__c.4143>:
    2909:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2919:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002925 <__c.4138>:
    2925:	25 30 38 6c 64 0d 00                                %08ld..

0000292c <__c.4132>:
    292c:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    293c:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

0000294d <__c.4126>:
    294d:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

0000295b <__c.4124>:
    295b:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    296b:	69 74 65 0a 00                                      ite..

00002970 <__c.4118>:
    2970:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

0000297c <__c.4116>:
    297c:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    298c:	6f 3a 25 73 0a 00                                   o:%s..

00002992 <__c.4114>:
    2992:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    29a2:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    29b2:	74 00                                               t.

000029b4 <__c.4838>:
    29b4:	0a 00                                               ..

000029b6 <__c.4833>:
    29b6:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000029be <__c.4831>:
    29be:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29ce:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29de:	0a 00                                               ..

000029e0 <__c.4829>:
    29e0:	53 53 38 30 2d 25 64 00                             SS80-%d.

000029e8 <__c.4827>:
    29e8:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29f8:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    2a08:	0a 00                                               ..

00002a0a <__c.4814>:
    2a0a:	0a 00                                               ..

00002a0c <__c.4812>:
    2a0c:	0a 00                                               ..

00002a0e <__c.4810>:
    2a0e:	45 4e 44 0a 00                                      END..

00002a13 <__c.4805>:
    2a13:	0a 00                                               ..

00002a15 <__c.4803>:
    2a15:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a1d <__c.4801>:
    2a1d:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a27 <__c.4799>:
    2a27:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00002a30 <__c.4797>:
    2a30:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

00002a39 <__c.4795>:
    2a39:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

00002a43 <__c.4793>:
    2a43:	48 45 41 44 53 00                                   HEADS.

00002a49 <__c.4791>:
    2a49:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    2a59:	4b 00                                               K.

00002a5b <__c.4789>:
    2a5b:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00002a6c <__c.4787>:
    2a6c:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00002a78 <__c.4785>:
    2a78:	49 44 00                                            ID.

00002a7b <__c.4783>:
    2a7b:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a85 <__c.4781>:
    2a85:	46 49 4c 45 00                                      FILE.

00002a8a <__c.4779>:
    2a8a:	50 50 52 00                                         PPR.

00002a8e <__c.4777>:
    2a8e:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a96 <__c.4775>:
    2a96:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002aa0 <__c.4773>:
    2aa0:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    2ab0:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00002abf <__c.4771>:
    2abf:	41 4d 49 47 4f 0a 00                                AMIGO..

00002ac6 <__c.4769>:
    2ac6:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

00002acf <__c.4767>:
    2acf:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00002ada <__c.4765>:
    2ada:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00002aeb <__c.4763>:
    2aeb:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

00002af6 <__c.4761>:
    2af6:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

00002aff <__c.4759>:
    2aff:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

00002b0c <__c.4757>:
    2b0c:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

00002b16 <__c.4755>:
    2b16:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    2b26:	53 00                                               S.

00002b28 <__c.4753>:
    2b28:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00002b36 <__c.4751>:
    2b36:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    2b46:	56 45 00                                            VE.

00002b49 <__c.4749>:
    2b49:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00002b55 <__c.4747>:
    2b55:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    2b65:	4d 45 00                                            ME.

00002b68 <__c.4745>:
    2b68:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    2b78:	45 52 5f 52 41 54 45 00                             ER_RATE.

00002b80 <__c.4743>:
    2b80:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00002b8b <__c.4741>:
    2b8b:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00002b96 <__c.4739>:
    2b96:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00002ba6 <__c.4737>:
    2ba6:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00002bb6 <__c.4735>:
    2bb6:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00002bc4 <__c.4733>:
    2bc4:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

00002bce <__c.4731>:
    2bce:	20 20 55 4e 49 54 0a 00                               UNIT..

00002bd6 <__c.4729>:
    2bd6:	54 59 50 45 00                                      TYPE.

00002bdb <__c.4727>:
    2bdb:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

00002be9 <__c.4725>:
    2be9:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

00002bf9 <__c.4723>:
    2bf9:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

00002c07 <__c.4721>:
    2c07:	49 44 00                                            ID.

00002c0a <__c.4719>:
    2c0a:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002c14 <__c.4717>:
    2c14:	46 49 4c 45 00                                      FILE.

00002c19 <__c.4715>:
    2c19:	50 50 52 00                                         PPR.

00002c1d <__c.4713>:
    2c1d:	41 44 44 52 45 53 53 00                             ADDRESS.

00002c25 <__c.4711>:
    2c25:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002c2f <__c.4709>:
    2c2f:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    2c3f:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00002c4e <__c.4707>:
    2c4e:	53 53 38 30 0a 00                                   SS80..

00002c54 <__c.4704>:
    2c54:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    2c64:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00002c74 <__c.4696>:
    2c74:	0a 00                                               ..

00002c76 <__c.4691>:
    2c76:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    2c86:	25 30 32 58 48 0a 00                                %02XH..

00002c8d <__c.4689>:
    2c8d:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    2c9d:	25 30 32 58 48 0a 00                                %02XH..

00002ca4 <__c.4687>:
    2ca4:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    2cb4:	25 30 32 58 48 0a 00                                %02XH..

00002cbb <__c.4685>:
    2cbb:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    2ccb:	25 30 32 58 48 0a 00                                %02XH..

00002cd2 <__c.4683>:
    2cd2:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    2ce2:	25 30 32 58 48 0a 00                                %02XH..

00002ce9 <__c.4681>:
    2ce9:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    2cf9:	25 30 32 58 48 0a 00                                %02XH..

00002d00 <__c.4679>:
    2d00:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    2d10:	25 30 32 58 48 0a 00                                %02XH..

00002d17 <__c.4677>:
    2d17:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    2d27:	25 30 32 58 48 0a 00                                %02XH..

00002d2e <__c.4675>:
    2d2e:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    2d3e:	25 30 32 58 48 0a 00                                %02XH..

00002d45 <__c.4672>:
    2d45:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    2d55:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    2d65:	0a 00                                               ..

00002d67 <__c.4666>:
    2d67:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    2d77:	0a 00                                               ..

00002d79 <__c.4655>:
    2d79:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    2d89:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00002d92 <__c.4644>:
    2d92:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    2da2:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    2db2:	2a 2a 2a 2a 2a 0a 00                                *****..

00002db9 <__c.4642>:
    2db9:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    2dc9:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00002dd6 <__c.4640>:
    2dd6:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    2de6:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    2df6:	0a 00                                               ..

00002df8 <__c.4636>:
    2df8:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    2e08:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2e18:	0a 00                                               ..

00002e1a <__c.4633>:
    2e1a:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2e2a:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    2e3a:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002e4a <__c.4630>:
    2e4a:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2e5a:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    2e6a:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00002e79 <__c.4627>:
    2e79:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    2e89:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    2e99:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002ea9 <__c.4625>:
    2ea9:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    2eb9:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00002ec2 <__c.4622>:
    2ec2:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2ed2:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    2ee2:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002ef0 <__c.4619>:
    2ef0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f00:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    2f10:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f1e <__c.4616>:
    2f1e:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f2e:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    2f3e:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00002f4a <__c.4613>:
    2f4a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f5a:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    2f6a:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2f7a:	0a 00                                               ..

00002f7c <__c.4610>:
    2f7c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f8c:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f9c:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002faa <__c.4607>:
    2faa:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2fba:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2fca:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002fd8 <__c.4604>:
    2fd8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2fe8:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2ff8:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00003005 <__c.4601>:
    3005:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    3015:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    3025:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00003036 <__c.4598>:
    3036:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    3046:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    3056:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00003060 <__c.4594>:
    3060:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    3070:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    3080:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00003088 <__c.4592>:
    3088:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    3098:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

000030a1 <__c.4588>:
    30a1:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    30b1:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

000030bf <__c.4586>:
    30bf:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

000030cc <__c.4537>:
    30cc:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    30dc:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

000030eb <__c.4535>:
    30eb:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    30fb:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

0000310a <__c.4533>:
    310a:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    311a:	20 76 61 6c 75 65 0a 00                              value..

00003122 <__c.4510>:
    3122:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    3132:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    3142:	0a 00                                               ..

00003144 <__c.4502>:
    3144:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    3154:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    3164:	6c 6c 0a 00                                         ll..

00003168 <__c.4489>:
    3168:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3178:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    3188:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00003193 <__c.4487>:
    3193:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31a3:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    31b3:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    31c3:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

000031cb <__c.4485>:
    31cb:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31db:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    31eb:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    31fb:	3a 25 73 0a 00                                      :%s..

00003200 <__c.4483>:
    3200:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3210:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    3220:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    3230:	55 4c 4c 0a 00                                      ULL..

00003235 <__c.4481>:
    3235:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3245:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    3255:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    3265:	66 20 72 61 6e 67 65 0a 00                          f range..

0000326e <__c.4479>:
    326e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    327e:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    328e:	6e 67 65 0a 00                                      nge..

00003293 <__c.4776>:
    3293:	46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74 65     Formating: wrote
    32a3:	3a 5b 25 6c 64 5d 20 73 65 63 74 6f 72 73 0a 00     :[%ld] sectors..

000032b3 <__c.4774>:
    32b3:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32c3:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

000032d3 <__c.4772>:
    32d3:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32e3:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    32f3:	30 0a 00                                            0..

000032f6 <__c.4770>:
    32f6:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3306:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3316:	70 74 79 0a 00                                      pty..

0000331b <__c.4768>:
    331b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    332b:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    333b:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003344 <__c.4755>:
    3344:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3354:	20 25 31 30 73 0a 00                                 %10s..

0000335b <__c.4753>:
    335b:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    336b:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    337b:	74 20 66 6f 75 6e 64 0a 00                          t found..

00003384 <__c.4751>:
    3384:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3394:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    33a4:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    33b4:	74 65 72 73 0a 00                                   ters..

000033ba <__c.4749>:
    33ba:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33ca:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    33da:	65 6d 70 74 79 0a 00                                empty..

000033e1 <__c.4747>:
    33e1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33f1:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3401:	65 6d 70 74 79 0a 00                                empty..

00003408 <__c.4745>:
    3408:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3418:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3428:	20 65 6d 70 74 79 0a 00                              empty..

00003430 <__c.4736>:
    3430:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

0000343f <__c.4734>:
    343f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    344f:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    345f:	20 66 6f 75 6e 64 0a 00                              found..

00003467 <__c.4732>:
    3467:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3477:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003486 <__c.4730>:
    3486:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3496:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000034a6 <__c.4728>:
    34a6:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34b6:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    34c6:	70 74 79 0a 00                                      pty..

000034cb <__c.4720>:
    34cb:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

000034d8 <__c.4715>:
    34d8:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000034e5 <__c.4713>:
    34e5:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34f5:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3505:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003515 <__c.4711>:
    3515:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3525:	73 0a 00                                            s..

00003528 <__c.4709>:
    3528:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3538:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3548:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003557 <__c.4707>:
    3557:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3567:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00003573 <__c.4705>:
    3573:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3583:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

0000358e <__c.4703>:
    358e:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    359e:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035ae <__c.4686>:
    35ae:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

000035bb <__c.4681>:
    35bb:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000035c8 <__c.4679>:
    35c8:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    35d8:	73 0a 00                                            s..

000035db <__c.4677>:
    35db:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35eb:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035f3 <__c.4660>:
    35f3:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003600 <__c.4657>:
    3600:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3610:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3620:	20 65 72 72 6f 72 0a 00                              error..

00003628 <__c.4649>:
    3628:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003635 <__c.4647>:
    3635:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3645:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3655:	20 65 72 72 6f 72 0a 00                              error..

0000365d <__c.4644>:
    365d:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    366d:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    367d:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    368d:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    369d:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    36ad:	30 32 58 48 0a 00                                   02XH..

000036b3 <__c.4642>:
    36b3:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36c3:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    36d3:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    36e3:	20 25 64 0a 00                                       %d..

000036e8 <__c.4638>:
    36e8:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000036f8 <__c.4636>:
    36f8:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3708:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3718:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3728:	30 78 45 30 31 33 0a 00                             0xE013..

00003730 <__c.4634>:
    3730:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3740:	6e 64 3a 25 73 0a 00                                nd:%s..

00003747 <__c.4632>:
    3747:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3757:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000375f <__c.4608>:
    375f:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

0000376c <__c.4606>:
    376c:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    377c:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003785 <__c.4604>:
    3785:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3795:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000379e <__c.4602>:
    379e:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    37ae:	20 20 25 34 64 0a 00                                  %4d..

000037b5 <__c.4600>:
    37b5:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    37c5:	20 20 20 25 73 0a 00                                   %s..

000037cc <__c.4598>:
    37cc:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    37dc:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    37ec:	77 72 69 74 65 0a 00                                write..

000037f3 <__c.4596>:
    37f3:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3803:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3813:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003823 <__c.4594>:
    3823:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3833:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3843:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003852 <__c.4592>:
    3852:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3862:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3872:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

00003882 <__c.4590>:
    3882:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3892:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38a2:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000038b1 <__c.4588>:
    38b1:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38c1:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    38d1:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

000038df <__c.4586>:
    38df:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38ef:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    38ff:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    390f:	79 0a 00                                            y..

00003912 <__c.4572>:
    3912:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000391f <__c.4570>:
    391f:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000392c <__c.4565>:
    392c:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003939 <__c.4548>:
    3939:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3949:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3959:	25 64 0a 00                                         %d..

0000395d <__c.4531>:
    395d:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    396d:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    397d:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    398d:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003996 <__c.4517>:
    3996:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39a6:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    39b6:	62 69 67 0a 00                                      big..

000039bb <__c.4515>:
    39bb:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39cb:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    39db:	63 74 65 72 73 0a 00                                cters..

000039e2 <__c.4508>:
    39e2:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    39f2:	73 0a 00                                            s..

000039f5 <__c.4506>:
    39f5:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a05:	73 0a 00                                            s..

00003a08 <__c.4504>:
    3a08:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a15 <__c.4502>:
    3a15:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a21 <__c.4500>:
    3a21:	0a 00                                               ..

00003a23 <__c.4497>:
    3a23:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3a33:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3a43:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003a53 <__c.4495>:
    3a53:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a63:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a73:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a83:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a93:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a9f <__c.4492>:
    3a9f:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3aaf:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3abf:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3acf:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003adf <__c.4490>:
    3adf:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3aef:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003af6 <__c.4480>:
    3af6:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b06:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b16:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b26:	64 0a 00                                            d..

00003b29 <__c.4478>:
    3b29:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b39:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b49:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3b59:	64 0a 00                                            d..

00003b5c <__c.4476>:
    3b5c:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b6c:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b7c:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b8c:	69 6c 65 64 0a 00                                   iled..

00003b92 <__c.4474>:
    3b92:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ba2:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3bb2:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3bc2:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003bd1 <__c.4461>:
    3bd1:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3be1:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3bf1:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c01:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c11:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c22 <__c.4458>:
    3c22:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c32:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c42:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003c4b <__c.4456>:
    3c4b:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c5b:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c6b:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c7b:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c83 <__c.4444>:
    3c83:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c93:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3ca3:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3cb3:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3cc3:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003cd0 <__c.4419>:
    3cd0:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3ce0:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003cf0 <__c.4410>:
    3cf0:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d00:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d10:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d20:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d2a <__c.4391>:
    3d2a:	57 72 6f 74 65 3a 20 25 6c 64 0a 00                 Wrote: %ld..

00003d36 <__c.4386>:
    3d36:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d42 <__c.4381>:
    3d42:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d4e <__c.4373>:
    3d4e:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d5a <__c.4371>:
    3d5a:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3d6a:	65 6c 3a 25 31 30 73 2c 20 44 69 72 65 63 74 6f     el:%10s, Directo
    3d7a:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3d8a:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3d9a:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3daa:	25 6c 64 0a 00                                      %ld..

00003daf <__c.4355>:
    3daf:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dbf:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3dcf:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003ddb <__c.4353>:
    3ddb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3deb:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3dfb:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003e06 <__c.4351>:
    3e06:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e16:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e26:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e36:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3e46:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e51 <__c.4349>:
    3e51:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e61:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e71:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e81:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3e91:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e9c <__c.4347>:
    3e9c:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3eac:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3ebc:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003eca <__c.4345>:
    3eca:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3eda:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3eea:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3efa:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003f0b <__c.4343>:
    3f0b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f1b:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3f2b:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3f3b:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3f4b:	58 68 0a 00                                         Xh..

00003f4f <__c.4341>:
    3f4f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f5f:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f70 <__c.4335>:
    3f70:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f80:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3f90:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003f9c <__c.4333>:
    3f9c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fac:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3fbc:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003fcb <__c.4331>:
    3fcb:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fdb:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3feb:	25 6c 64 0a 00                                      %ld..

00003ff0 <__c.4329>:
    3ff0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4000:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4010:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    4020:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004029 <__c.4327>:
    4029:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4039:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4049:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    4059:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004062 <__c.4325>:
    4062:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    4072:	58 48 20 3e 20 31 0a 00                             XH > 1..

0000407a <__c.4323>:
    407a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    408a:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    409a:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    40aa:	64 20 31 30 30 30 48 0a 00                          d 1000H..

000040b3 <__c.4321>:
    40b3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40c3:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

000040d2 <__c.4314>:
    40d2:	0a 00                                               ..

000040d4 <__c.4312>:
    40d4:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    40e4:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040ee <__c.4310>:
    40ee:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    40fe:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

0000410a <__c.4308>:
    410a:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    411a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004127 <__c.4306>:
    4127:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    4137:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004144 <__c.4304>:
    4144:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    4154:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004161 <__c.4302>:
    4161:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    4171:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

0000417d <__c.4300>:
    417d:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    418d:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004199 <__c.4298>:
    4199:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    41a9:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041b3 <__c.4296>:
    41b3:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    41c3:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041cd <__c.4294>:
    41cd:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    41dd:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041e9 <__c.4292>:
    41e9:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    41f9:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004205 <__c.4290>:
    4205:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4215:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004222 <__c.4288>:
    4222:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4232:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000423f <__c.4286>:
    423f:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    424f:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000425b <__c.4284>:
    425b:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    426b:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004275 <__c.4282>:
    4275:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    4285:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004292 <__c.4280>:
    4292:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    42a2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042af <__c.4278>:
    42af:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    42bf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042cc <__c.4276>:
    42cc:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    42dc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042e9 <__c.4274>:
    42e9:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    42f9:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004306 <__c.4272>:
    4306:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    4316:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004323 <__c.4270>:
    4323:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    4333:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004340 <__c.4268>:
    4340:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4350:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000435d <__c.4266>:
    435d:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    436d:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004377 <__c.4264>:
    4377:	0a 25 73 0a 00                                      .%s..

0000437c <__c.4141>:
    437c:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    438c:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    439c:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    43ac:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000043b9 <__c.4132>:
    43b9:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    43c9:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    43d9:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    43e9:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000043f5 <__c.4123>:
    43f5:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4405:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004416 <__c.4116>:
    4416:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4426:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000442f <__c.4110>:
    442f:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    443f:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    444f:	25 73 5d 0a 00                                      %s]..

00004454 <__c.4098>:
    4454:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4464:	6f 69 6e 74 65 72 0a 00                             ointer..

0000446c <__c.4093>:
    446c:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    447c:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    448c:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004495 <__c.4081>:
    4495:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    44a5:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    44b5:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    44c5:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    44d5:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    44e5:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    44f5:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4505:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4515:	65 63 74 6f 72 73 0a 6c 69 66 20 64 65 6c 20 6c     ectors.lif del l
    4525:	69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 6c 69 66     ifimage name.lif
    4535:	20 64 69 72 20 6c 69 66 69 6d 61 67 65 0a 6c 69      dir lifimage.li
    4545:	66 20 65 78 74 72 61 63 74 20 6c 69 66 69 6d 61     f extract lifima
    4555:	67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f 61 73     ge lifname to_as
    4565:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 65 78 74     cii_file.lif ext
    4575:	72 61 63 74 62 69 6e 20 6c 69 66 69 6d 61 67 65     ractbin lifimage
    4585:	20 6c 69 66 6e 61 6d 65 20 74 6f 5f 6c 69 66 5f      lifname to_lif_
    4595:	66 69 6c 65 0a 20 20 20 20 65 78 74 72 61 63 74     file.    extract
    45a5:	73 20 61 20 66 69 6c 65 20 69 6e 74 6f 20 61 20     s a file into a 
    45b5:	73 69 67 6c 65 20 66 69 6c 65 20 4c 49 46 20 69     sigle file LIF i
    45c5:	6d 61 67 65 0a 6c 69 66 20 72 65 6e 61 6d 65 20     mage.lif rename 
    45d5:	6c 69 66 69 6d 61 67 65 20 6f 6c 64 6c 69 66 6e     lifimage oldlifn
    45e5:	61 6d 65 20 6e 65 77 6c 69 66 6e 61 6d 65 0a 55     ame newlifname.U
    45f5:	73 65 20 2d 64 20 61 66 74 65 72 20 66 69 72 73     se -d after firs
    4605:	74 20 6b 65 79 77 6f 72 64 20 27 6c 69 66 27 20     t keyword 'lif' 
    4615:	61 62 6f 76 65 20 66 6f 72 20 4c 49 46 20 66 69     above for LIF fi
    4625:	6c 65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69     lesystem debuggi
    4635:	6e 67 0a 0a 00                                      ng...

0000463a <__c.4079>:
    463a:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004644 <__c.4541>:
    4644:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4654:	53 4b 0a 00                                         SK..

00004658 <__c.4539>:
    4658:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4668:	30 34 78 48 0a 00                                   04xH..

0000466e <__c.4537>:
    466e:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    467e:	64 6f 6e 65 0a 00                                   done..

00004684 <__c.4535>:
    4684:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4694:	6f 6e 65 0a 00                                      one..

00004699 <__c.4533>:
    4699:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    46a9:	61 6c 69 7a 65 64 0a 00                             alized..

000046b1 <__c.4531>:
    46b1:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    46c1:	0a 00                                               ..

000046c3 <__c.4529>:
    46c3:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    46d3:	7a 65 64 0a 00                                      zed..

000046d8 <__c.4527>:
    46d8:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    46e8:	69 7a 65 64 0a 00                                   ized..

000046ee <__c.4525>:
    46ee:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000046ff <__c.4523>:
    46ff:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    470f:	20 73 74 61 72 74 0a 00                              start..

00004717 <__c.4521>:
    4717:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4727:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004731 <__c.4519>:
    4731:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4741:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

0000474e <__c.4517>:
    474e:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    475e:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000476c <__c.4515>:
    476c:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    477c:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

00004789 <__c.4513>:
    4789:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004798 <__c.4511>:
    4798:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    47a8:	0a 00                                               ..

000047aa <__c.4509>:
    47aa:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    47ba:	20 62 75 73 0a 00                                    bus..

000047c0 <__c.4507>:
    47c0:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    47d0:	20 62 75 73 0a 00                                    bus..

000047d6 <__c.4505>:
    47d6:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47e6:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047f0 <__c.4503>:
    47f0:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4800:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000480a <__c.4501>:
    480a:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    481a:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    482a:	35 64 69 73 6b 0a 00                                5disk..

00004831 <__c.4499>:
    4831:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004841 <__c.4497>:
    4841:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4851:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000485e <__c.4495>:
    485e:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    486e:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000487d <__c.4493>:
    487d:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    488d:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    489d:	3a 20 25 6c 64 0a 00                                : %ld..

000048a4 <__c.4491>:
    48a4:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000048b5 <__c.4489>:
    48b5:	53 74 61 72 74 0a 00                                Start..

000048bc <__c.4481>:
    48bc:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000048c8 <__c.4479>:
    48c8:	0a 3e 00                                            .>.

000048cb <__c.4469>:
    48cb:	64 65 6c 61 79 5f 74 65 73 74 73 0a 74 69 6d 65     delay_tests.time
    48db:	0a 73 65 74 64 61 74 65 0a 6d 65 6d 0a 0a 00        .setdate.mem...

000048ea <__c.4465>:
    48ea:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000048f5 <__c.4463>:
    48f5:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

00004904 <__c.4459>:
    4904:	0a 00                                               ..

00004906 <__c.4457>:
    4906:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4916:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004920 <__c.4455>:
    4920:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4930:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000493a <__c.4453>:
    493a:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    494a:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    495a:	35 64 69 73 6b 0a 00                                5disk..

00004961 <__c.4451>:
    4961:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004971 <__c.4449>:
    4971:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4981:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000498e <__c.4447>:
    498e:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    499e:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000049ad <__c.4445>:
    49ad:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    49bd:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    49cd:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

000049de <__ctors_end>:
    49de:	11 24       	eor	r1, r1
    49e0:	1f be       	out	0x3f, r1	; 63
    49e2:	cf ef       	ldi	r28, 0xFF	; 255
    49e4:	d0 e4       	ldi	r29, 0x40	; 64
    49e6:	de bf       	out	0x3e, r29	; 62
    49e8:	cd bf       	out	0x3d, r28	; 61

000049ea <__do_copy_data>:
    49ea:	17 e1       	ldi	r17, 0x17	; 23
    49ec:	a0 e0       	ldi	r26, 0x00	; 0
    49ee:	b1 e0       	ldi	r27, 0x01	; 1
    49f0:	e6 e8       	ldi	r30, 0x86	; 134
    49f2:	f4 ee       	ldi	r31, 0xE4	; 228
    49f4:	01 e0       	ldi	r16, 0x01	; 1
    49f6:	0b bf       	out	0x3b, r16	; 59
    49f8:	02 c0       	rjmp	.+4      	; 0x49fe <__do_copy_data+0x14>
    49fa:	07 90       	elpm	r0, Z+
    49fc:	0d 92       	st	X+, r0
    49fe:	a8 38       	cpi	r26, 0x88	; 136
    4a00:	b1 07       	cpc	r27, r17
    4a02:	d9 f7       	brne	.-10     	; 0x49fa <__do_copy_data+0x10>

00004a04 <__do_clear_bss>:
    4a04:	20 e2       	ldi	r18, 0x20	; 32
    4a06:	a8 e8       	ldi	r26, 0x88	; 136
    4a08:	b7 e1       	ldi	r27, 0x17	; 23
    4a0a:	01 c0       	rjmp	.+2      	; 0x4a0e <.do_clear_bss_start>

00004a0c <.do_clear_bss_loop>:
    4a0c:	1d 92       	st	X+, r1

00004a0e <.do_clear_bss_start>:
    4a0e:	a5 31       	cpi	r26, 0x15	; 21
    4a10:	b2 07       	cpc	r27, r18
    4a12:	e1 f7       	brne	.-8      	; 0x4a0c <.do_clear_bss_loop>
    4a14:	0e 94 a4 ea 	call	0x1d548	; 0x1d548 <main>
    4a18:	0c 94 41 f2 	jmp	0x1e482	; 0x1e482 <_exit>

00004a1c <__bad_interrupt>:
    4a1c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004a20 <vfprintf>:
    4a20:	2f 92       	push	r2
    4a22:	3f 92       	push	r3
    4a24:	4f 92       	push	r4
    4a26:	5f 92       	push	r5
    4a28:	6f 92       	push	r6
    4a2a:	7f 92       	push	r7
    4a2c:	8f 92       	push	r8
    4a2e:	9f 92       	push	r9
    4a30:	af 92       	push	r10
    4a32:	bf 92       	push	r11
    4a34:	cf 92       	push	r12
    4a36:	df 92       	push	r13
    4a38:	ef 92       	push	r14
    4a3a:	ff 92       	push	r15
    4a3c:	0f 93       	push	r16
    4a3e:	1f 93       	push	r17
    4a40:	cf 93       	push	r28
    4a42:	df 93       	push	r29
    4a44:	cd b7       	in	r28, 0x3d	; 61
    4a46:	de b7       	in	r29, 0x3e	; 62
    4a48:	60 97       	sbiw	r28, 0x10	; 16
    4a4a:	0f b6       	in	r0, 0x3f	; 63
    4a4c:	f8 94       	cli
    4a4e:	de bf       	out	0x3e, r29	; 62
    4a50:	0f be       	out	0x3f, r0	; 63
    4a52:	cd bf       	out	0x3d, r28	; 61
    4a54:	7c 01       	movw	r14, r24
    4a56:	1b 01       	movw	r2, r22
    4a58:	6a 01       	movw	r12, r20
    4a5a:	fc 01       	movw	r30, r24
    4a5c:	17 82       	std	Z+7, r1	; 0x07
    4a5e:	16 82       	std	Z+6, r1	; 0x06
    4a60:	83 81       	ldd	r24, Z+3	; 0x03
    4a62:	81 ff       	sbrs	r24, 1
    4a64:	44 c3       	rjmp	.+1672   	; 0x50ee <vfprintf+0x6ce>
    4a66:	9e 01       	movw	r18, r28
    4a68:	2f 5f       	subi	r18, 0xFF	; 255
    4a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a6c:	39 01       	movw	r6, r18
    4a6e:	f7 01       	movw	r30, r14
    4a70:	93 81       	ldd	r25, Z+3	; 0x03
    4a72:	f1 01       	movw	r30, r2
    4a74:	93 fd       	sbrc	r25, 3
    4a76:	85 91       	lpm	r24, Z+
    4a78:	93 ff       	sbrs	r25, 3
    4a7a:	81 91       	ld	r24, Z+
    4a7c:	1f 01       	movw	r2, r30
    4a7e:	88 23       	and	r24, r24
    4a80:	09 f4       	brne	.+2      	; 0x4a84 <vfprintf+0x64>
    4a82:	31 c3       	rjmp	.+1634   	; 0x50e6 <vfprintf+0x6c6>
    4a84:	85 32       	cpi	r24, 0x25	; 37
    4a86:	39 f4       	brne	.+14     	; 0x4a96 <vfprintf+0x76>
    4a88:	93 fd       	sbrc	r25, 3
    4a8a:	85 91       	lpm	r24, Z+
    4a8c:	93 ff       	sbrs	r25, 3
    4a8e:	81 91       	ld	r24, Z+
    4a90:	1f 01       	movw	r2, r30
    4a92:	85 32       	cpi	r24, 0x25	; 37
    4a94:	39 f4       	brne	.+14     	; 0x4aa4 <vfprintf+0x84>
    4a96:	b7 01       	movw	r22, r14
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4a9e:	56 01       	movw	r10, r12
    4aa0:	65 01       	movw	r12, r10
    4aa2:	e5 cf       	rjmp	.-54     	; 0x4a6e <vfprintf+0x4e>
    4aa4:	10 e0       	ldi	r17, 0x00	; 0
    4aa6:	51 2c       	mov	r5, r1
    4aa8:	91 2c       	mov	r9, r1
    4aaa:	ff e1       	ldi	r31, 0x1F	; 31
    4aac:	f9 15       	cp	r31, r9
    4aae:	d8 f0       	brcs	.+54     	; 0x4ae6 <vfprintf+0xc6>
    4ab0:	8b 32       	cpi	r24, 0x2B	; 43
    4ab2:	79 f0       	breq	.+30     	; 0x4ad2 <vfprintf+0xb2>
    4ab4:	38 f4       	brcc	.+14     	; 0x4ac4 <vfprintf+0xa4>
    4ab6:	80 32       	cpi	r24, 0x20	; 32
    4ab8:	79 f0       	breq	.+30     	; 0x4ad8 <vfprintf+0xb8>
    4aba:	83 32       	cpi	r24, 0x23	; 35
    4abc:	a1 f4       	brne	.+40     	; 0x4ae6 <vfprintf+0xc6>
    4abe:	f9 2d       	mov	r31, r9
    4ac0:	f0 61       	ori	r31, 0x10	; 16
    4ac2:	2e c0       	rjmp	.+92     	; 0x4b20 <vfprintf+0x100>
    4ac4:	8d 32       	cpi	r24, 0x2D	; 45
    4ac6:	61 f0       	breq	.+24     	; 0x4ae0 <vfprintf+0xc0>
    4ac8:	80 33       	cpi	r24, 0x30	; 48
    4aca:	69 f4       	brne	.+26     	; 0x4ae6 <vfprintf+0xc6>
    4acc:	29 2d       	mov	r18, r9
    4ace:	21 60       	ori	r18, 0x01	; 1
    4ad0:	2d c0       	rjmp	.+90     	; 0x4b2c <vfprintf+0x10c>
    4ad2:	39 2d       	mov	r19, r9
    4ad4:	32 60       	ori	r19, 0x02	; 2
    4ad6:	93 2e       	mov	r9, r19
    4ad8:	89 2d       	mov	r24, r9
    4ada:	84 60       	ori	r24, 0x04	; 4
    4adc:	98 2e       	mov	r9, r24
    4ade:	2a c0       	rjmp	.+84     	; 0x4b34 <vfprintf+0x114>
    4ae0:	e9 2d       	mov	r30, r9
    4ae2:	e8 60       	ori	r30, 0x08	; 8
    4ae4:	15 c0       	rjmp	.+42     	; 0x4b10 <vfprintf+0xf0>
    4ae6:	97 fc       	sbrc	r9, 7
    4ae8:	2d c0       	rjmp	.+90     	; 0x4b44 <vfprintf+0x124>
    4aea:	20 ed       	ldi	r18, 0xD0	; 208
    4aec:	28 0f       	add	r18, r24
    4aee:	2a 30       	cpi	r18, 0x0A	; 10
    4af0:	88 f4       	brcc	.+34     	; 0x4b14 <vfprintf+0xf4>
    4af2:	96 fe       	sbrs	r9, 6
    4af4:	06 c0       	rjmp	.+12     	; 0x4b02 <vfprintf+0xe2>
    4af6:	3a e0       	ldi	r19, 0x0A	; 10
    4af8:	13 9f       	mul	r17, r19
    4afa:	20 0d       	add	r18, r0
    4afc:	11 24       	eor	r1, r1
    4afe:	12 2f       	mov	r17, r18
    4b00:	19 c0       	rjmp	.+50     	; 0x4b34 <vfprintf+0x114>
    4b02:	8a e0       	ldi	r24, 0x0A	; 10
    4b04:	58 9e       	mul	r5, r24
    4b06:	20 0d       	add	r18, r0
    4b08:	11 24       	eor	r1, r1
    4b0a:	52 2e       	mov	r5, r18
    4b0c:	e9 2d       	mov	r30, r9
    4b0e:	e0 62       	ori	r30, 0x20	; 32
    4b10:	9e 2e       	mov	r9, r30
    4b12:	10 c0       	rjmp	.+32     	; 0x4b34 <vfprintf+0x114>
    4b14:	8e 32       	cpi	r24, 0x2E	; 46
    4b16:	31 f4       	brne	.+12     	; 0x4b24 <vfprintf+0x104>
    4b18:	96 fc       	sbrc	r9, 6
    4b1a:	e5 c2       	rjmp	.+1482   	; 0x50e6 <vfprintf+0x6c6>
    4b1c:	f9 2d       	mov	r31, r9
    4b1e:	f0 64       	ori	r31, 0x40	; 64
    4b20:	9f 2e       	mov	r9, r31
    4b22:	08 c0       	rjmp	.+16     	; 0x4b34 <vfprintf+0x114>
    4b24:	8c 36       	cpi	r24, 0x6C	; 108
    4b26:	21 f4       	brne	.+8      	; 0x4b30 <vfprintf+0x110>
    4b28:	29 2d       	mov	r18, r9
    4b2a:	20 68       	ori	r18, 0x80	; 128
    4b2c:	92 2e       	mov	r9, r18
    4b2e:	02 c0       	rjmp	.+4      	; 0x4b34 <vfprintf+0x114>
    4b30:	88 36       	cpi	r24, 0x68	; 104
    4b32:	41 f4       	brne	.+16     	; 0x4b44 <vfprintf+0x124>
    4b34:	f1 01       	movw	r30, r2
    4b36:	93 fd       	sbrc	r25, 3
    4b38:	85 91       	lpm	r24, Z+
    4b3a:	93 ff       	sbrs	r25, 3
    4b3c:	81 91       	ld	r24, Z+
    4b3e:	1f 01       	movw	r2, r30
    4b40:	81 11       	cpse	r24, r1
    4b42:	b3 cf       	rjmp	.-154    	; 0x4aaa <vfprintf+0x8a>
    4b44:	9b eb       	ldi	r25, 0xBB	; 187
    4b46:	98 0f       	add	r25, r24
    4b48:	93 30       	cpi	r25, 0x03	; 3
    4b4a:	20 f4       	brcc	.+8      	; 0x4b54 <vfprintf+0x134>
    4b4c:	99 2d       	mov	r25, r9
    4b4e:	90 61       	ori	r25, 0x10	; 16
    4b50:	80 5e       	subi	r24, 0xE0	; 224
    4b52:	07 c0       	rjmp	.+14     	; 0x4b62 <vfprintf+0x142>
    4b54:	9b e9       	ldi	r25, 0x9B	; 155
    4b56:	98 0f       	add	r25, r24
    4b58:	93 30       	cpi	r25, 0x03	; 3
    4b5a:	08 f0       	brcs	.+2      	; 0x4b5e <vfprintf+0x13e>
    4b5c:	66 c1       	rjmp	.+716    	; 0x4e2a <vfprintf+0x40a>
    4b5e:	99 2d       	mov	r25, r9
    4b60:	9f 7e       	andi	r25, 0xEF	; 239
    4b62:	96 ff       	sbrs	r25, 6
    4b64:	16 e0       	ldi	r17, 0x06	; 6
    4b66:	9f 73       	andi	r25, 0x3F	; 63
    4b68:	99 2e       	mov	r9, r25
    4b6a:	85 36       	cpi	r24, 0x65	; 101
    4b6c:	19 f4       	brne	.+6      	; 0x4b74 <vfprintf+0x154>
    4b6e:	90 64       	ori	r25, 0x40	; 64
    4b70:	99 2e       	mov	r9, r25
    4b72:	08 c0       	rjmp	.+16     	; 0x4b84 <vfprintf+0x164>
    4b74:	86 36       	cpi	r24, 0x66	; 102
    4b76:	21 f4       	brne	.+8      	; 0x4b80 <vfprintf+0x160>
    4b78:	39 2f       	mov	r19, r25
    4b7a:	30 68       	ori	r19, 0x80	; 128
    4b7c:	93 2e       	mov	r9, r19
    4b7e:	02 c0       	rjmp	.+4      	; 0x4b84 <vfprintf+0x164>
    4b80:	11 11       	cpse	r17, r1
    4b82:	11 50       	subi	r17, 0x01	; 1
    4b84:	97 fe       	sbrs	r9, 7
    4b86:	07 c0       	rjmp	.+14     	; 0x4b96 <vfprintf+0x176>
    4b88:	1c 33       	cpi	r17, 0x3C	; 60
    4b8a:	50 f4       	brcc	.+20     	; 0x4ba0 <vfprintf+0x180>
    4b8c:	44 24       	eor	r4, r4
    4b8e:	43 94       	inc	r4
    4b90:	41 0e       	add	r4, r17
    4b92:	27 e0       	ldi	r18, 0x07	; 7
    4b94:	0b c0       	rjmp	.+22     	; 0x4bac <vfprintf+0x18c>
    4b96:	18 30       	cpi	r17, 0x08	; 8
    4b98:	38 f0       	brcs	.+14     	; 0x4ba8 <vfprintf+0x188>
    4b9a:	27 e0       	ldi	r18, 0x07	; 7
    4b9c:	17 e0       	ldi	r17, 0x07	; 7
    4b9e:	05 c0       	rjmp	.+10     	; 0x4baa <vfprintf+0x18a>
    4ba0:	27 e0       	ldi	r18, 0x07	; 7
    4ba2:	9c e3       	ldi	r25, 0x3C	; 60
    4ba4:	49 2e       	mov	r4, r25
    4ba6:	02 c0       	rjmp	.+4      	; 0x4bac <vfprintf+0x18c>
    4ba8:	21 2f       	mov	r18, r17
    4baa:	41 2c       	mov	r4, r1
    4bac:	56 01       	movw	r10, r12
    4bae:	84 e0       	ldi	r24, 0x04	; 4
    4bb0:	a8 0e       	add	r10, r24
    4bb2:	b1 1c       	adc	r11, r1
    4bb4:	f6 01       	movw	r30, r12
    4bb6:	60 81       	ld	r22, Z
    4bb8:	71 81       	ldd	r23, Z+1	; 0x01
    4bba:	82 81       	ldd	r24, Z+2	; 0x02
    4bbc:	93 81       	ldd	r25, Z+3	; 0x03
    4bbe:	04 2d       	mov	r16, r4
    4bc0:	a3 01       	movw	r20, r6
    4bc2:	0e 94 ee f0 	call	0x1e1dc	; 0x1e1dc <__ftoa_engine>
    4bc6:	6c 01       	movw	r12, r24
    4bc8:	f9 81       	ldd	r31, Y+1	; 0x01
    4bca:	fc 87       	std	Y+12, r31	; 0x0c
    4bcc:	f0 ff       	sbrs	r31, 0
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <vfprintf+0x1b4>
    4bd0:	f3 ff       	sbrs	r31, 3
    4bd2:	06 c0       	rjmp	.+12     	; 0x4be0 <vfprintf+0x1c0>
    4bd4:	91 fc       	sbrc	r9, 1
    4bd6:	06 c0       	rjmp	.+12     	; 0x4be4 <vfprintf+0x1c4>
    4bd8:	92 fe       	sbrs	r9, 2
    4bda:	06 c0       	rjmp	.+12     	; 0x4be8 <vfprintf+0x1c8>
    4bdc:	00 e2       	ldi	r16, 0x20	; 32
    4bde:	05 c0       	rjmp	.+10     	; 0x4bea <vfprintf+0x1ca>
    4be0:	0d e2       	ldi	r16, 0x2D	; 45
    4be2:	03 c0       	rjmp	.+6      	; 0x4bea <vfprintf+0x1ca>
    4be4:	0b e2       	ldi	r16, 0x2B	; 43
    4be6:	01 c0       	rjmp	.+2      	; 0x4bea <vfprintf+0x1ca>
    4be8:	00 e0       	ldi	r16, 0x00	; 0
    4bea:	8c 85       	ldd	r24, Y+12	; 0x0c
    4bec:	8c 70       	andi	r24, 0x0C	; 12
    4bee:	19 f0       	breq	.+6      	; 0x4bf6 <vfprintf+0x1d6>
    4bf0:	01 11       	cpse	r16, r1
    4bf2:	5a c2       	rjmp	.+1204   	; 0x50a8 <vfprintf+0x688>
    4bf4:	9b c2       	rjmp	.+1334   	; 0x512c <vfprintf+0x70c>
    4bf6:	97 fe       	sbrs	r9, 7
    4bf8:	10 c0       	rjmp	.+32     	; 0x4c1a <vfprintf+0x1fa>
    4bfa:	4c 0c       	add	r4, r12
    4bfc:	fc 85       	ldd	r31, Y+12	; 0x0c
    4bfe:	f4 ff       	sbrs	r31, 4
    4c00:	04 c0       	rjmp	.+8      	; 0x4c0a <vfprintf+0x1ea>
    4c02:	8a 81       	ldd	r24, Y+2	; 0x02
    4c04:	81 33       	cpi	r24, 0x31	; 49
    4c06:	09 f4       	brne	.+2      	; 0x4c0a <vfprintf+0x1ea>
    4c08:	4a 94       	dec	r4
    4c0a:	14 14       	cp	r1, r4
    4c0c:	74 f5       	brge	.+92     	; 0x4c6a <vfprintf+0x24a>
    4c0e:	28 e0       	ldi	r18, 0x08	; 8
    4c10:	24 15       	cp	r18, r4
    4c12:	78 f5       	brcc	.+94     	; 0x4c72 <vfprintf+0x252>
    4c14:	88 e0       	ldi	r24, 0x08	; 8
    4c16:	48 2e       	mov	r4, r24
    4c18:	2c c0       	rjmp	.+88     	; 0x4c72 <vfprintf+0x252>
    4c1a:	96 fc       	sbrc	r9, 6
    4c1c:	2a c0       	rjmp	.+84     	; 0x4c72 <vfprintf+0x252>
    4c1e:	81 2f       	mov	r24, r17
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	8c 15       	cp	r24, r12
    4c24:	9d 05       	cpc	r25, r13
    4c26:	9c f0       	brlt	.+38     	; 0x4c4e <vfprintf+0x22e>
    4c28:	3c ef       	ldi	r19, 0xFC	; 252
    4c2a:	c3 16       	cp	r12, r19
    4c2c:	3f ef       	ldi	r19, 0xFF	; 255
    4c2e:	d3 06       	cpc	r13, r19
    4c30:	74 f0       	brlt	.+28     	; 0x4c4e <vfprintf+0x22e>
    4c32:	89 2d       	mov	r24, r9
    4c34:	80 68       	ori	r24, 0x80	; 128
    4c36:	98 2e       	mov	r9, r24
    4c38:	0a c0       	rjmp	.+20     	; 0x4c4e <vfprintf+0x22e>
    4c3a:	e2 e0       	ldi	r30, 0x02	; 2
    4c3c:	f0 e0       	ldi	r31, 0x00	; 0
    4c3e:	ec 0f       	add	r30, r28
    4c40:	fd 1f       	adc	r31, r29
    4c42:	e1 0f       	add	r30, r17
    4c44:	f1 1d       	adc	r31, r1
    4c46:	80 81       	ld	r24, Z
    4c48:	80 33       	cpi	r24, 0x30	; 48
    4c4a:	19 f4       	brne	.+6      	; 0x4c52 <vfprintf+0x232>
    4c4c:	11 50       	subi	r17, 0x01	; 1
    4c4e:	11 11       	cpse	r17, r1
    4c50:	f4 cf       	rjmp	.-24     	; 0x4c3a <vfprintf+0x21a>
    4c52:	97 fe       	sbrs	r9, 7
    4c54:	0e c0       	rjmp	.+28     	; 0x4c72 <vfprintf+0x252>
    4c56:	44 24       	eor	r4, r4
    4c58:	43 94       	inc	r4
    4c5a:	41 0e       	add	r4, r17
    4c5c:	81 2f       	mov	r24, r17
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	c8 16       	cp	r12, r24
    4c62:	d9 06       	cpc	r13, r25
    4c64:	2c f4       	brge	.+10     	; 0x4c70 <vfprintf+0x250>
    4c66:	1c 19       	sub	r17, r12
    4c68:	04 c0       	rjmp	.+8      	; 0x4c72 <vfprintf+0x252>
    4c6a:	44 24       	eor	r4, r4
    4c6c:	43 94       	inc	r4
    4c6e:	01 c0       	rjmp	.+2      	; 0x4c72 <vfprintf+0x252>
    4c70:	10 e0       	ldi	r17, 0x00	; 0
    4c72:	97 fe       	sbrs	r9, 7
    4c74:	06 c0       	rjmp	.+12     	; 0x4c82 <vfprintf+0x262>
    4c76:	1c 14       	cp	r1, r12
    4c78:	1d 04       	cpc	r1, r13
    4c7a:	34 f4       	brge	.+12     	; 0x4c88 <vfprintf+0x268>
    4c7c:	c6 01       	movw	r24, r12
    4c7e:	01 96       	adiw	r24, 0x01	; 1
    4c80:	05 c0       	rjmp	.+10     	; 0x4c8c <vfprintf+0x26c>
    4c82:	85 e0       	ldi	r24, 0x05	; 5
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	02 c0       	rjmp	.+4      	; 0x4c8c <vfprintf+0x26c>
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	01 11       	cpse	r16, r1
    4c8e:	01 96       	adiw	r24, 0x01	; 1
    4c90:	11 23       	and	r17, r17
    4c92:	31 f0       	breq	.+12     	; 0x4ca0 <vfprintf+0x280>
    4c94:	21 2f       	mov	r18, r17
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	2f 5f       	subi	r18, 0xFF	; 255
    4c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9c:	82 0f       	add	r24, r18
    4c9e:	93 1f       	adc	r25, r19
    4ca0:	25 2d       	mov	r18, r5
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	82 17       	cp	r24, r18
    4ca6:	93 07       	cpc	r25, r19
    4ca8:	14 f4       	brge	.+4      	; 0x4cae <vfprintf+0x28e>
    4caa:	58 1a       	sub	r5, r24
    4cac:	01 c0       	rjmp	.+2      	; 0x4cb0 <vfprintf+0x290>
    4cae:	51 2c       	mov	r5, r1
    4cb0:	89 2d       	mov	r24, r9
    4cb2:	89 70       	andi	r24, 0x09	; 9
    4cb4:	49 f4       	brne	.+18     	; 0x4cc8 <vfprintf+0x2a8>
    4cb6:	55 20       	and	r5, r5
    4cb8:	39 f0       	breq	.+14     	; 0x4cc8 <vfprintf+0x2a8>
    4cba:	b7 01       	movw	r22, r14
    4cbc:	80 e2       	ldi	r24, 0x20	; 32
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4cc4:	5a 94       	dec	r5
    4cc6:	f7 cf       	rjmp	.-18     	; 0x4cb6 <vfprintf+0x296>
    4cc8:	00 23       	and	r16, r16
    4cca:	29 f0       	breq	.+10     	; 0x4cd6 <vfprintf+0x2b6>
    4ccc:	b7 01       	movw	r22, r14
    4cce:	80 2f       	mov	r24, r16
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4cd6:	93 fc       	sbrc	r9, 3
    4cd8:	09 c0       	rjmp	.+18     	; 0x4cec <vfprintf+0x2cc>
    4cda:	55 20       	and	r5, r5
    4cdc:	39 f0       	breq	.+14     	; 0x4cec <vfprintf+0x2cc>
    4cde:	b7 01       	movw	r22, r14
    4ce0:	80 e3       	ldi	r24, 0x30	; 48
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4ce8:	5a 94       	dec	r5
    4cea:	f7 cf       	rjmp	.-18     	; 0x4cda <vfprintf+0x2ba>
    4cec:	97 fe       	sbrs	r9, 7
    4cee:	4c c0       	rjmp	.+152    	; 0x4d88 <vfprintf+0x368>
    4cf0:	46 01       	movw	r8, r12
    4cf2:	d7 fe       	sbrs	r13, 7
    4cf4:	02 c0       	rjmp	.+4      	; 0x4cfa <vfprintf+0x2da>
    4cf6:	81 2c       	mov	r8, r1
    4cf8:	91 2c       	mov	r9, r1
    4cfa:	c6 01       	movw	r24, r12
    4cfc:	88 19       	sub	r24, r8
    4cfe:	99 09       	sbc	r25, r9
    4d00:	f3 01       	movw	r30, r6
    4d02:	e8 0f       	add	r30, r24
    4d04:	f9 1f       	adc	r31, r25
    4d06:	fe 87       	std	Y+14, r31	; 0x0e
    4d08:	ed 87       	std	Y+13, r30	; 0x0d
    4d0a:	96 01       	movw	r18, r12
    4d0c:	24 19       	sub	r18, r4
    4d0e:	31 09       	sbc	r19, r1
    4d10:	38 8b       	std	Y+16, r19	; 0x10
    4d12:	2f 87       	std	Y+15, r18	; 0x0f
    4d14:	01 2f       	mov	r16, r17
    4d16:	10 e0       	ldi	r17, 0x00	; 0
    4d18:	11 95       	neg	r17
    4d1a:	01 95       	neg	r16
    4d1c:	11 09       	sbc	r17, r1
    4d1e:	3f ef       	ldi	r19, 0xFF	; 255
    4d20:	83 16       	cp	r8, r19
    4d22:	93 06       	cpc	r9, r19
    4d24:	29 f4       	brne	.+10     	; 0x4d30 <vfprintf+0x310>
    4d26:	b7 01       	movw	r22, r14
    4d28:	8e e2       	ldi	r24, 0x2E	; 46
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4d30:	c8 14       	cp	r12, r8
    4d32:	d9 04       	cpc	r13, r9
    4d34:	4c f0       	brlt	.+18     	; 0x4d48 <vfprintf+0x328>
    4d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d38:	98 89       	ldd	r25, Y+16	; 0x10
    4d3a:	88 15       	cp	r24, r8
    4d3c:	99 05       	cpc	r25, r9
    4d3e:	24 f4       	brge	.+8      	; 0x4d48 <vfprintf+0x328>
    4d40:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d42:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d44:	81 81       	ldd	r24, Z+1	; 0x01
    4d46:	01 c0       	rjmp	.+2      	; 0x4d4a <vfprintf+0x32a>
    4d48:	80 e3       	ldi	r24, 0x30	; 48
    4d4a:	f1 e0       	ldi	r31, 0x01	; 1
    4d4c:	8f 1a       	sub	r8, r31
    4d4e:	91 08       	sbc	r9, r1
    4d50:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d52:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d54:	2f 5f       	subi	r18, 0xFF	; 255
    4d56:	3f 4f       	sbci	r19, 0xFF	; 255
    4d58:	3e 87       	std	Y+14, r19	; 0x0e
    4d5a:	2d 87       	std	Y+13, r18	; 0x0d
    4d5c:	80 16       	cp	r8, r16
    4d5e:	91 06       	cpc	r9, r17
    4d60:	2c f0       	brlt	.+10     	; 0x4d6c <vfprintf+0x34c>
    4d62:	b7 01       	movw	r22, r14
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4d6a:	d9 cf       	rjmp	.-78     	; 0x4d1e <vfprintf+0x2fe>
    4d6c:	c8 14       	cp	r12, r8
    4d6e:	d9 04       	cpc	r13, r9
    4d70:	41 f4       	brne	.+16     	; 0x4d82 <vfprintf+0x362>
    4d72:	9a 81       	ldd	r25, Y+2	; 0x02
    4d74:	96 33       	cpi	r25, 0x36	; 54
    4d76:	20 f4       	brcc	.+8      	; 0x4d80 <vfprintf+0x360>
    4d78:	95 33       	cpi	r25, 0x35	; 53
    4d7a:	19 f4       	brne	.+6      	; 0x4d82 <vfprintf+0x362>
    4d7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4d7e:	34 ff       	sbrs	r19, 4
    4d80:	81 e3       	ldi	r24, 0x31	; 49
    4d82:	b7 01       	movw	r22, r14
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	4e c0       	rjmp	.+156    	; 0x4e24 <vfprintf+0x404>
    4d88:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8a:	81 33       	cpi	r24, 0x31	; 49
    4d8c:	19 f0       	breq	.+6      	; 0x4d94 <vfprintf+0x374>
    4d8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d90:	9f 7e       	andi	r25, 0xEF	; 239
    4d92:	9c 87       	std	Y+12, r25	; 0x0c
    4d94:	b7 01       	movw	r22, r14
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4d9c:	11 11       	cpse	r17, r1
    4d9e:	05 c0       	rjmp	.+10     	; 0x4daa <vfprintf+0x38a>
    4da0:	94 fc       	sbrc	r9, 4
    4da2:	18 c0       	rjmp	.+48     	; 0x4dd4 <vfprintf+0x3b4>
    4da4:	85 e6       	ldi	r24, 0x65	; 101
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	17 c0       	rjmp	.+46     	; 0x4dd8 <vfprintf+0x3b8>
    4daa:	b7 01       	movw	r22, r14
    4dac:	8e e2       	ldi	r24, 0x2E	; 46
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4db4:	1e 5f       	subi	r17, 0xFE	; 254
    4db6:	82 e0       	ldi	r24, 0x02	; 2
    4db8:	01 e0       	ldi	r16, 0x01	; 1
    4dba:	08 0f       	add	r16, r24
    4dbc:	f3 01       	movw	r30, r6
    4dbe:	e8 0f       	add	r30, r24
    4dc0:	f1 1d       	adc	r31, r1
    4dc2:	80 81       	ld	r24, Z
    4dc4:	b7 01       	movw	r22, r14
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4dcc:	80 2f       	mov	r24, r16
    4dce:	01 13       	cpse	r16, r17
    4dd0:	f3 cf       	rjmp	.-26     	; 0x4db8 <vfprintf+0x398>
    4dd2:	e6 cf       	rjmp	.-52     	; 0x4da0 <vfprintf+0x380>
    4dd4:	85 e4       	ldi	r24, 0x45	; 69
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	b7 01       	movw	r22, r14
    4dda:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4dde:	d7 fc       	sbrc	r13, 7
    4de0:	06 c0       	rjmp	.+12     	; 0x4dee <vfprintf+0x3ce>
    4de2:	c1 14       	cp	r12, r1
    4de4:	d1 04       	cpc	r13, r1
    4de6:	41 f4       	brne	.+16     	; 0x4df8 <vfprintf+0x3d8>
    4de8:	ec 85       	ldd	r30, Y+12	; 0x0c
    4dea:	e4 ff       	sbrs	r30, 4
    4dec:	05 c0       	rjmp	.+10     	; 0x4df8 <vfprintf+0x3d8>
    4dee:	d1 94       	neg	r13
    4df0:	c1 94       	neg	r12
    4df2:	d1 08       	sbc	r13, r1
    4df4:	8d e2       	ldi	r24, 0x2D	; 45
    4df6:	01 c0       	rjmp	.+2      	; 0x4dfa <vfprintf+0x3da>
    4df8:	8b e2       	ldi	r24, 0x2B	; 43
    4dfa:	b7 01       	movw	r22, r14
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4e02:	80 e3       	ldi	r24, 0x30	; 48
    4e04:	2a e0       	ldi	r18, 0x0A	; 10
    4e06:	c2 16       	cp	r12, r18
    4e08:	d1 04       	cpc	r13, r1
    4e0a:	2c f0       	brlt	.+10     	; 0x4e16 <vfprintf+0x3f6>
    4e0c:	8f 5f       	subi	r24, 0xFF	; 255
    4e0e:	fa e0       	ldi	r31, 0x0A	; 10
    4e10:	cf 1a       	sub	r12, r31
    4e12:	d1 08       	sbc	r13, r1
    4e14:	f7 cf       	rjmp	.-18     	; 0x4e04 <vfprintf+0x3e4>
    4e16:	b7 01       	movw	r22, r14
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4e1e:	b7 01       	movw	r22, r14
    4e20:	c6 01       	movw	r24, r12
    4e22:	c0 96       	adiw	r24, 0x30	; 48
    4e24:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4e28:	54 c1       	rjmp	.+680    	; 0x50d2 <vfprintf+0x6b2>
    4e2a:	83 36       	cpi	r24, 0x63	; 99
    4e2c:	31 f0       	breq	.+12     	; 0x4e3a <vfprintf+0x41a>
    4e2e:	83 37       	cpi	r24, 0x73	; 115
    4e30:	79 f0       	breq	.+30     	; 0x4e50 <vfprintf+0x430>
    4e32:	83 35       	cpi	r24, 0x53	; 83
    4e34:	09 f0       	breq	.+2      	; 0x4e38 <vfprintf+0x418>
    4e36:	56 c0       	rjmp	.+172    	; 0x4ee4 <vfprintf+0x4c4>
    4e38:	20 c0       	rjmp	.+64     	; 0x4e7a <vfprintf+0x45a>
    4e3a:	56 01       	movw	r10, r12
    4e3c:	32 e0       	ldi	r19, 0x02	; 2
    4e3e:	a3 0e       	add	r10, r19
    4e40:	b1 1c       	adc	r11, r1
    4e42:	f6 01       	movw	r30, r12
    4e44:	80 81       	ld	r24, Z
    4e46:	89 83       	std	Y+1, r24	; 0x01
    4e48:	01 e0       	ldi	r16, 0x01	; 1
    4e4a:	10 e0       	ldi	r17, 0x00	; 0
    4e4c:	63 01       	movw	r12, r6
    4e4e:	12 c0       	rjmp	.+36     	; 0x4e74 <vfprintf+0x454>
    4e50:	56 01       	movw	r10, r12
    4e52:	f2 e0       	ldi	r31, 0x02	; 2
    4e54:	af 0e       	add	r10, r31
    4e56:	b1 1c       	adc	r11, r1
    4e58:	f6 01       	movw	r30, r12
    4e5a:	c0 80       	ld	r12, Z
    4e5c:	d1 80       	ldd	r13, Z+1	; 0x01
    4e5e:	96 fe       	sbrs	r9, 6
    4e60:	03 c0       	rjmp	.+6      	; 0x4e68 <vfprintf+0x448>
    4e62:	61 2f       	mov	r22, r17
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <vfprintf+0x44c>
    4e68:	6f ef       	ldi	r22, 0xFF	; 255
    4e6a:	7f ef       	ldi	r23, 0xFF	; 255
    4e6c:	c6 01       	movw	r24, r12
    4e6e:	0e 94 d8 f1 	call	0x1e3b0	; 0x1e3b0 <strnlen>
    4e72:	8c 01       	movw	r16, r24
    4e74:	f9 2d       	mov	r31, r9
    4e76:	ff 77       	andi	r31, 0x7F	; 127
    4e78:	14 c0       	rjmp	.+40     	; 0x4ea2 <vfprintf+0x482>
    4e7a:	56 01       	movw	r10, r12
    4e7c:	22 e0       	ldi	r18, 0x02	; 2
    4e7e:	a2 0e       	add	r10, r18
    4e80:	b1 1c       	adc	r11, r1
    4e82:	f6 01       	movw	r30, r12
    4e84:	c0 80       	ld	r12, Z
    4e86:	d1 80       	ldd	r13, Z+1	; 0x01
    4e88:	96 fe       	sbrs	r9, 6
    4e8a:	03 c0       	rjmp	.+6      	; 0x4e92 <vfprintf+0x472>
    4e8c:	61 2f       	mov	r22, r17
    4e8e:	70 e0       	ldi	r23, 0x00	; 0
    4e90:	02 c0       	rjmp	.+4      	; 0x4e96 <vfprintf+0x476>
    4e92:	6f ef       	ldi	r22, 0xFF	; 255
    4e94:	7f ef       	ldi	r23, 0xFF	; 255
    4e96:	c6 01       	movw	r24, r12
    4e98:	0e 94 c6 f1 	call	0x1e38c	; 0x1e38c <strnlen_P>
    4e9c:	8c 01       	movw	r16, r24
    4e9e:	f9 2d       	mov	r31, r9
    4ea0:	f0 68       	ori	r31, 0x80	; 128
    4ea2:	9f 2e       	mov	r9, r31
    4ea4:	f3 fd       	sbrc	r31, 3
    4ea6:	1a c0       	rjmp	.+52     	; 0x4edc <vfprintf+0x4bc>
    4ea8:	85 2d       	mov	r24, r5
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	08 17       	cp	r16, r24
    4eae:	19 07       	cpc	r17, r25
    4eb0:	a8 f4       	brcc	.+42     	; 0x4edc <vfprintf+0x4bc>
    4eb2:	b7 01       	movw	r22, r14
    4eb4:	80 e2       	ldi	r24, 0x20	; 32
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4ebc:	5a 94       	dec	r5
    4ebe:	f4 cf       	rjmp	.-24     	; 0x4ea8 <vfprintf+0x488>
    4ec0:	f6 01       	movw	r30, r12
    4ec2:	97 fc       	sbrc	r9, 7
    4ec4:	85 91       	lpm	r24, Z+
    4ec6:	97 fe       	sbrs	r9, 7
    4ec8:	81 91       	ld	r24, Z+
    4eca:	6f 01       	movw	r12, r30
    4ecc:	b7 01       	movw	r22, r14
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    4ed4:	51 10       	cpse	r5, r1
    4ed6:	5a 94       	dec	r5
    4ed8:	01 50       	subi	r16, 0x01	; 1
    4eda:	11 09       	sbc	r17, r1
    4edc:	01 15       	cp	r16, r1
    4ede:	11 05       	cpc	r17, r1
    4ee0:	79 f7       	brne	.-34     	; 0x4ec0 <vfprintf+0x4a0>
    4ee2:	f7 c0       	rjmp	.+494    	; 0x50d2 <vfprintf+0x6b2>
    4ee4:	84 36       	cpi	r24, 0x64	; 100
    4ee6:	11 f0       	breq	.+4      	; 0x4eec <vfprintf+0x4cc>
    4ee8:	89 36       	cpi	r24, 0x69	; 105
    4eea:	61 f5       	brne	.+88     	; 0x4f44 <vfprintf+0x524>
    4eec:	56 01       	movw	r10, r12
    4eee:	97 fe       	sbrs	r9, 7
    4ef0:	09 c0       	rjmp	.+18     	; 0x4f04 <vfprintf+0x4e4>
    4ef2:	24 e0       	ldi	r18, 0x04	; 4
    4ef4:	a2 0e       	add	r10, r18
    4ef6:	b1 1c       	adc	r11, r1
    4ef8:	f6 01       	movw	r30, r12
    4efa:	60 81       	ld	r22, Z
    4efc:	71 81       	ldd	r23, Z+1	; 0x01
    4efe:	82 81       	ldd	r24, Z+2	; 0x02
    4f00:	93 81       	ldd	r25, Z+3	; 0x03
    4f02:	0a c0       	rjmp	.+20     	; 0x4f18 <vfprintf+0x4f8>
    4f04:	f2 e0       	ldi	r31, 0x02	; 2
    4f06:	af 0e       	add	r10, r31
    4f08:	b1 1c       	adc	r11, r1
    4f0a:	f6 01       	movw	r30, r12
    4f0c:	60 81       	ld	r22, Z
    4f0e:	71 81       	ldd	r23, Z+1	; 0x01
    4f10:	07 2e       	mov	r0, r23
    4f12:	00 0c       	add	r0, r0
    4f14:	88 0b       	sbc	r24, r24
    4f16:	99 0b       	sbc	r25, r25
    4f18:	f9 2d       	mov	r31, r9
    4f1a:	ff 76       	andi	r31, 0x6F	; 111
    4f1c:	9f 2e       	mov	r9, r31
    4f1e:	97 ff       	sbrs	r25, 7
    4f20:	09 c0       	rjmp	.+18     	; 0x4f34 <vfprintf+0x514>
    4f22:	90 95       	com	r25
    4f24:	80 95       	com	r24
    4f26:	70 95       	com	r23
    4f28:	61 95       	neg	r22
    4f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    4f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f30:	f0 68       	ori	r31, 0x80	; 128
    4f32:	9f 2e       	mov	r9, r31
    4f34:	2a e0       	ldi	r18, 0x0A	; 10
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	a3 01       	movw	r20, r6
    4f3a:	0e 94 e3 f1 	call	0x1e3c6	; 0x1e3c6 <__ultoa_invert>
    4f3e:	c8 2e       	mov	r12, r24
    4f40:	c6 18       	sub	r12, r6
    4f42:	3f c0       	rjmp	.+126    	; 0x4fc2 <vfprintf+0x5a2>
    4f44:	09 2d       	mov	r16, r9
    4f46:	85 37       	cpi	r24, 0x75	; 117
    4f48:	21 f4       	brne	.+8      	; 0x4f52 <vfprintf+0x532>
    4f4a:	0f 7e       	andi	r16, 0xEF	; 239
    4f4c:	2a e0       	ldi	r18, 0x0A	; 10
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	1d c0       	rjmp	.+58     	; 0x4f8c <vfprintf+0x56c>
    4f52:	09 7f       	andi	r16, 0xF9	; 249
    4f54:	8f 36       	cpi	r24, 0x6F	; 111
    4f56:	91 f0       	breq	.+36     	; 0x4f7c <vfprintf+0x55c>
    4f58:	18 f4       	brcc	.+6      	; 0x4f60 <vfprintf+0x540>
    4f5a:	88 35       	cpi	r24, 0x58	; 88
    4f5c:	59 f0       	breq	.+22     	; 0x4f74 <vfprintf+0x554>
    4f5e:	c3 c0       	rjmp	.+390    	; 0x50e6 <vfprintf+0x6c6>
    4f60:	80 37       	cpi	r24, 0x70	; 112
    4f62:	19 f0       	breq	.+6      	; 0x4f6a <vfprintf+0x54a>
    4f64:	88 37       	cpi	r24, 0x78	; 120
    4f66:	11 f0       	breq	.+4      	; 0x4f6c <vfprintf+0x54c>
    4f68:	be c0       	rjmp	.+380    	; 0x50e6 <vfprintf+0x6c6>
    4f6a:	00 61       	ori	r16, 0x10	; 16
    4f6c:	04 ff       	sbrs	r16, 4
    4f6e:	09 c0       	rjmp	.+18     	; 0x4f82 <vfprintf+0x562>
    4f70:	04 60       	ori	r16, 0x04	; 4
    4f72:	07 c0       	rjmp	.+14     	; 0x4f82 <vfprintf+0x562>
    4f74:	94 fe       	sbrs	r9, 4
    4f76:	08 c0       	rjmp	.+16     	; 0x4f88 <vfprintf+0x568>
    4f78:	06 60       	ori	r16, 0x06	; 6
    4f7a:	06 c0       	rjmp	.+12     	; 0x4f88 <vfprintf+0x568>
    4f7c:	28 e0       	ldi	r18, 0x08	; 8
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	05 c0       	rjmp	.+10     	; 0x4f8c <vfprintf+0x56c>
    4f82:	20 e1       	ldi	r18, 0x10	; 16
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	02 c0       	rjmp	.+4      	; 0x4f8c <vfprintf+0x56c>
    4f88:	20 e1       	ldi	r18, 0x10	; 16
    4f8a:	32 e0       	ldi	r19, 0x02	; 2
    4f8c:	56 01       	movw	r10, r12
    4f8e:	07 ff       	sbrs	r16, 7
    4f90:	09 c0       	rjmp	.+18     	; 0x4fa4 <vfprintf+0x584>
    4f92:	84 e0       	ldi	r24, 0x04	; 4
    4f94:	a8 0e       	add	r10, r24
    4f96:	b1 1c       	adc	r11, r1
    4f98:	f6 01       	movw	r30, r12
    4f9a:	60 81       	ld	r22, Z
    4f9c:	71 81       	ldd	r23, Z+1	; 0x01
    4f9e:	82 81       	ldd	r24, Z+2	; 0x02
    4fa0:	93 81       	ldd	r25, Z+3	; 0x03
    4fa2:	08 c0       	rjmp	.+16     	; 0x4fb4 <vfprintf+0x594>
    4fa4:	f2 e0       	ldi	r31, 0x02	; 2
    4fa6:	af 0e       	add	r10, r31
    4fa8:	b1 1c       	adc	r11, r1
    4faa:	f6 01       	movw	r30, r12
    4fac:	60 81       	ld	r22, Z
    4fae:	71 81       	ldd	r23, Z+1	; 0x01
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	a3 01       	movw	r20, r6
    4fb6:	0e 94 e3 f1 	call	0x1e3c6	; 0x1e3c6 <__ultoa_invert>
    4fba:	c8 2e       	mov	r12, r24
    4fbc:	c6 18       	sub	r12, r6
    4fbe:	0f 77       	andi	r16, 0x7F	; 127
    4fc0:	90 2e       	mov	r9, r16
    4fc2:	96 fe       	sbrs	r9, 6
    4fc4:	0b c0       	rjmp	.+22     	; 0x4fdc <vfprintf+0x5bc>
    4fc6:	09 2d       	mov	r16, r9
    4fc8:	0e 7f       	andi	r16, 0xFE	; 254
    4fca:	c1 16       	cp	r12, r17
    4fcc:	50 f4       	brcc	.+20     	; 0x4fe2 <vfprintf+0x5c2>
    4fce:	94 fe       	sbrs	r9, 4
    4fd0:	0a c0       	rjmp	.+20     	; 0x4fe6 <vfprintf+0x5c6>
    4fd2:	92 fc       	sbrc	r9, 2
    4fd4:	08 c0       	rjmp	.+16     	; 0x4fe6 <vfprintf+0x5c6>
    4fd6:	09 2d       	mov	r16, r9
    4fd8:	0e 7e       	andi	r16, 0xEE	; 238
    4fda:	05 c0       	rjmp	.+10     	; 0x4fe6 <vfprintf+0x5c6>
    4fdc:	dc 2c       	mov	r13, r12
    4fde:	09 2d       	mov	r16, r9
    4fe0:	03 c0       	rjmp	.+6      	; 0x4fe8 <vfprintf+0x5c8>
    4fe2:	dc 2c       	mov	r13, r12
    4fe4:	01 c0       	rjmp	.+2      	; 0x4fe8 <vfprintf+0x5c8>
    4fe6:	d1 2e       	mov	r13, r17
    4fe8:	04 ff       	sbrs	r16, 4
    4fea:	0d c0       	rjmp	.+26     	; 0x5006 <vfprintf+0x5e6>
    4fec:	fe 01       	movw	r30, r28
    4fee:	ec 0d       	add	r30, r12
    4ff0:	f1 1d       	adc	r31, r1
    4ff2:	80 81       	ld	r24, Z
    4ff4:	80 33       	cpi	r24, 0x30	; 48
    4ff6:	11 f4       	brne	.+4      	; 0x4ffc <vfprintf+0x5dc>
    4ff8:	09 7e       	andi	r16, 0xE9	; 233
    4ffa:	09 c0       	rjmp	.+18     	; 0x500e <vfprintf+0x5ee>
    4ffc:	02 ff       	sbrs	r16, 2
    4ffe:	06 c0       	rjmp	.+12     	; 0x500c <vfprintf+0x5ec>
    5000:	d3 94       	inc	r13
    5002:	d3 94       	inc	r13
    5004:	04 c0       	rjmp	.+8      	; 0x500e <vfprintf+0x5ee>
    5006:	80 2f       	mov	r24, r16
    5008:	86 78       	andi	r24, 0x86	; 134
    500a:	09 f0       	breq	.+2      	; 0x500e <vfprintf+0x5ee>
    500c:	d3 94       	inc	r13
    500e:	03 fd       	sbrc	r16, 3
    5010:	11 c0       	rjmp	.+34     	; 0x5034 <vfprintf+0x614>
    5012:	00 ff       	sbrs	r16, 0
    5014:	06 c0       	rjmp	.+12     	; 0x5022 <vfprintf+0x602>
    5016:	1c 2d       	mov	r17, r12
    5018:	d5 14       	cp	r13, r5
    501a:	80 f4       	brcc	.+32     	; 0x503c <vfprintf+0x61c>
    501c:	15 0d       	add	r17, r5
    501e:	1d 19       	sub	r17, r13
    5020:	0d c0       	rjmp	.+26     	; 0x503c <vfprintf+0x61c>
    5022:	d5 14       	cp	r13, r5
    5024:	58 f4       	brcc	.+22     	; 0x503c <vfprintf+0x61c>
    5026:	b7 01       	movw	r22, r14
    5028:	80 e2       	ldi	r24, 0x20	; 32
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    5030:	d3 94       	inc	r13
    5032:	f7 cf       	rjmp	.-18     	; 0x5022 <vfprintf+0x602>
    5034:	d5 14       	cp	r13, r5
    5036:	10 f4       	brcc	.+4      	; 0x503c <vfprintf+0x61c>
    5038:	5d 18       	sub	r5, r13
    503a:	01 c0       	rjmp	.+2      	; 0x503e <vfprintf+0x61e>
    503c:	51 2c       	mov	r5, r1
    503e:	04 ff       	sbrs	r16, 4
    5040:	10 c0       	rjmp	.+32     	; 0x5062 <vfprintf+0x642>
    5042:	b7 01       	movw	r22, r14
    5044:	80 e3       	ldi	r24, 0x30	; 48
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    504c:	02 ff       	sbrs	r16, 2
    504e:	17 c0       	rjmp	.+46     	; 0x507e <vfprintf+0x65e>
    5050:	01 fd       	sbrc	r16, 1
    5052:	03 c0       	rjmp	.+6      	; 0x505a <vfprintf+0x63a>
    5054:	88 e7       	ldi	r24, 0x78	; 120
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	02 c0       	rjmp	.+4      	; 0x505e <vfprintf+0x63e>
    505a:	88 e5       	ldi	r24, 0x58	; 88
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	b7 01       	movw	r22, r14
    5060:	0c c0       	rjmp	.+24     	; 0x507a <vfprintf+0x65a>
    5062:	80 2f       	mov	r24, r16
    5064:	86 78       	andi	r24, 0x86	; 134
    5066:	59 f0       	breq	.+22     	; 0x507e <vfprintf+0x65e>
    5068:	01 ff       	sbrs	r16, 1
    506a:	02 c0       	rjmp	.+4      	; 0x5070 <vfprintf+0x650>
    506c:	8b e2       	ldi	r24, 0x2B	; 43
    506e:	01 c0       	rjmp	.+2      	; 0x5072 <vfprintf+0x652>
    5070:	80 e2       	ldi	r24, 0x20	; 32
    5072:	07 fd       	sbrc	r16, 7
    5074:	8d e2       	ldi	r24, 0x2D	; 45
    5076:	b7 01       	movw	r22, r14
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    507e:	c1 16       	cp	r12, r17
    5080:	38 f4       	brcc	.+14     	; 0x5090 <vfprintf+0x670>
    5082:	b7 01       	movw	r22, r14
    5084:	80 e3       	ldi	r24, 0x30	; 48
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    508c:	11 50       	subi	r17, 0x01	; 1
    508e:	f7 cf       	rjmp	.-18     	; 0x507e <vfprintf+0x65e>
    5090:	ca 94       	dec	r12
    5092:	f3 01       	movw	r30, r6
    5094:	ec 0d       	add	r30, r12
    5096:	f1 1d       	adc	r31, r1
    5098:	80 81       	ld	r24, Z
    509a:	b7 01       	movw	r22, r14
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    50a2:	c1 10       	cpse	r12, r1
    50a4:	f5 cf       	rjmp	.-22     	; 0x5090 <vfprintf+0x670>
    50a6:	15 c0       	rjmp	.+42     	; 0x50d2 <vfprintf+0x6b2>
    50a8:	f4 e0       	ldi	r31, 0x04	; 4
    50aa:	f5 15       	cp	r31, r5
    50ac:	60 f5       	brcc	.+88     	; 0x5106 <vfprintf+0x6e6>
    50ae:	84 e0       	ldi	r24, 0x04	; 4
    50b0:	58 1a       	sub	r5, r24
    50b2:	93 fe       	sbrs	r9, 3
    50b4:	1f c0       	rjmp	.+62     	; 0x50f4 <vfprintf+0x6d4>
    50b6:	01 11       	cpse	r16, r1
    50b8:	27 c0       	rjmp	.+78     	; 0x5108 <vfprintf+0x6e8>
    50ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    50bc:	23 ff       	sbrs	r18, 3
    50be:	2a c0       	rjmp	.+84     	; 0x5114 <vfprintf+0x6f4>
    50c0:	06 ed       	ldi	r16, 0xD6	; 214
    50c2:	11 e0       	ldi	r17, 0x01	; 1
    50c4:	39 2d       	mov	r19, r9
    50c6:	30 71       	andi	r19, 0x10	; 16
    50c8:	93 2e       	mov	r9, r19
    50ca:	f8 01       	movw	r30, r16
    50cc:	84 91       	lpm	r24, Z
    50ce:	81 11       	cpse	r24, r1
    50d0:	24 c0       	rjmp	.+72     	; 0x511a <vfprintf+0x6fa>
    50d2:	55 20       	and	r5, r5
    50d4:	09 f4       	brne	.+2      	; 0x50d8 <vfprintf+0x6b8>
    50d6:	e4 cc       	rjmp	.-1592   	; 0x4aa0 <vfprintf+0x80>
    50d8:	b7 01       	movw	r22, r14
    50da:	80 e2       	ldi	r24, 0x20	; 32
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    50e2:	5a 94       	dec	r5
    50e4:	f6 cf       	rjmp	.-20     	; 0x50d2 <vfprintf+0x6b2>
    50e6:	f7 01       	movw	r30, r14
    50e8:	86 81       	ldd	r24, Z+6	; 0x06
    50ea:	97 81       	ldd	r25, Z+7	; 0x07
    50ec:	26 c0       	rjmp	.+76     	; 0x513a <vfprintf+0x71a>
    50ee:	8f ef       	ldi	r24, 0xFF	; 255
    50f0:	9f ef       	ldi	r25, 0xFF	; 255
    50f2:	23 c0       	rjmp	.+70     	; 0x513a <vfprintf+0x71a>
    50f4:	b7 01       	movw	r22, r14
    50f6:	80 e2       	ldi	r24, 0x20	; 32
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    50fe:	5a 94       	dec	r5
    5100:	51 10       	cpse	r5, r1
    5102:	f8 cf       	rjmp	.-16     	; 0x50f4 <vfprintf+0x6d4>
    5104:	d8 cf       	rjmp	.-80     	; 0x50b6 <vfprintf+0x696>
    5106:	51 2c       	mov	r5, r1
    5108:	b7 01       	movw	r22, r14
    510a:	80 2f       	mov	r24, r16
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    5112:	d3 cf       	rjmp	.-90     	; 0x50ba <vfprintf+0x69a>
    5114:	0a ed       	ldi	r16, 0xDA	; 218
    5116:	11 e0       	ldi	r17, 0x01	; 1
    5118:	d5 cf       	rjmp	.-86     	; 0x50c4 <vfprintf+0x6a4>
    511a:	91 10       	cpse	r9, r1
    511c:	80 52       	subi	r24, 0x20	; 32
    511e:	b7 01       	movw	r22, r14
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	0e 94 bb 7a 	call	0xf576	; 0xf576 <fputc>
    5126:	0f 5f       	subi	r16, 0xFF	; 255
    5128:	1f 4f       	sbci	r17, 0xFF	; 255
    512a:	cf cf       	rjmp	.-98     	; 0x50ca <vfprintf+0x6aa>
    512c:	23 e0       	ldi	r18, 0x03	; 3
    512e:	25 15       	cp	r18, r5
    5130:	10 f4       	brcc	.+4      	; 0x5136 <vfprintf+0x716>
    5132:	83 e0       	ldi	r24, 0x03	; 3
    5134:	bd cf       	rjmp	.-134    	; 0x50b0 <vfprintf+0x690>
    5136:	51 2c       	mov	r5, r1
    5138:	c0 cf       	rjmp	.-128    	; 0x50ba <vfprintf+0x69a>
    513a:	60 96       	adiw	r28, 0x10	; 16
    513c:	0f b6       	in	r0, 0x3f	; 63
    513e:	f8 94       	cli
    5140:	de bf       	out	0x3e, r29	; 62
    5142:	0f be       	out	0x3f, r0	; 63
    5144:	cd bf       	out	0x3d, r28	; 61
    5146:	df 91       	pop	r29
    5148:	cf 91       	pop	r28
    514a:	1f 91       	pop	r17
    514c:	0f 91       	pop	r16
    514e:	ff 90       	pop	r15
    5150:	ef 90       	pop	r14
    5152:	df 90       	pop	r13
    5154:	cf 90       	pop	r12
    5156:	bf 90       	pop	r11
    5158:	af 90       	pop	r10
    515a:	9f 90       	pop	r9
    515c:	8f 90       	pop	r8
    515e:	7f 90       	pop	r7
    5160:	6f 90       	pop	r6
    5162:	5f 90       	pop	r5
    5164:	4f 90       	pop	r4
    5166:	3f 90       	pop	r3
    5168:	2f 90       	pop	r2
    516a:	08 95       	ret

0000516c <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    516c:	e8 2f       	mov	r30, r24
    516e:	e6 95       	lsr	r30
    5170:	e6 95       	lsr	r30
    5172:	e6 95       	lsr	r30
    5174:	93 e0       	ldi	r25, 0x03	; 3
    5176:	e9 9f       	mul	r30, r25
    5178:	f0 01       	movw	r30, r0
    517a:	11 24       	eor	r1, r1
    517c:	32 a1       	ldd	r19, Z+34	; 0x22
    517e:	28 2f       	mov	r18, r24
    5180:	27 70       	andi	r18, 0x07	; 7
    5182:	81 e0       	ldi	r24, 0x01	; 1
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	01 c0       	rjmp	.+2      	; 0x518a <chip_select+0x1e>
    5188:	88 0f       	add	r24, r24
    518a:	2a 95       	dec	r18
    518c:	ea f7       	brpl	.-6      	; 0x5188 <chip_select+0x1c>
    518e:	98 2f       	mov	r25, r24
    5190:	90 95       	com	r25
    5192:	93 23       	and	r25, r19
    5194:	92 a3       	std	Z+34, r25	; 0x22
    5196:	91 a1       	ldd	r25, Z+33	; 0x21
    5198:	89 2b       	or	r24, r25
    519a:	81 a3       	std	Z+33, r24	; 0x21
    519c:	08 95       	ret

0000519e <chip_deselect>:
    519e:	e8 2f       	mov	r30, r24
    51a0:	e6 95       	lsr	r30
    51a2:	e6 95       	lsr	r30
    51a4:	e6 95       	lsr	r30
    51a6:	93 e0       	ldi	r25, 0x03	; 3
    51a8:	e9 9f       	mul	r30, r25
    51aa:	f0 01       	movw	r30, r0
    51ac:	11 24       	eor	r1, r1
    51ae:	32 a1       	ldd	r19, Z+34	; 0x22
    51b0:	28 2f       	mov	r18, r24
    51b2:	27 70       	andi	r18, 0x07	; 7
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	01 c0       	rjmp	.+2      	; 0x51bc <chip_deselect+0x1e>
    51ba:	88 0f       	add	r24, r24
    51bc:	2a 95       	dec	r18
    51be:	ea f7       	brpl	.-6      	; 0x51ba <chip_deselect+0x1c>
    51c0:	93 2f       	mov	r25, r19
    51c2:	98 2b       	or	r25, r24
    51c4:	92 a3       	std	Z+34, r25	; 0x22
    51c6:	91 a1       	ldd	r25, Z+33	; 0x21
    51c8:	89 2b       	or	r24, r25
    51ca:	81 a3       	std	Z+33, r24	; 0x21
    51cc:	08 95       	ret

000051ce <chip_select_init>:
    51ce:	e7 cf       	rjmp	.-50     	; 0x519e <chip_deselect>
    51d0:	08 95       	ret

000051d2 <spi_end>:
    51d2:	cf 93       	push	r28
    51d4:	c8 2f       	mov	r28, r24
    51d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    51da:	8c 17       	cp	r24, r28
    51dc:	a9 f0       	breq	.+42     	; 0x5208 <spi_end+0x36>
    51de:	8f 3f       	cpi	r24, 0xFF	; 255
    51e0:	99 f0       	breq	.+38     	; 0x5208 <spi_end+0x36>
    51e2:	1f 92       	push	r1
    51e4:	cf 93       	push	r28
    51e6:	1f 92       	push	r1
    51e8:	8f 93       	push	r24
    51ea:	88 ed       	ldi	r24, 0xD8	; 216
    51ec:	92 e0       	ldi	r25, 0x02	; 2
    51ee:	1f 92       	push	r1
    51f0:	9f 93       	push	r25
    51f2:	8f 93       	push	r24
    51f4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    51f8:	8d b7       	in	r24, 0x3d	; 61
    51fa:	9e b7       	in	r25, 0x3e	; 62
    51fc:	07 96       	adiw	r24, 0x07	; 7
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	f8 94       	cli
    5202:	9e bf       	out	0x3e, r25	; 62
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	8d bf       	out	0x3d, r24	; 61
    5208:	8c 2f       	mov	r24, r28
    520a:	c9 df       	rcall	.-110    	; 0x519e <chip_deselect>
    520c:	8f ef       	ldi	r24, 0xFF	; 255
    520e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5212:	cf 91       	pop	r28
    5214:	08 95       	ret

00005216 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    5216:	7a c4       	rjmp	.+2292   	; 0x5b0c <SPI0_TX>
    5218:	08 95       	ret

0000521a <spi_RX_buffer>:
    521a:	a2 c4       	rjmp	.+2372   	; 0x5b60 <SPI0_RX>
    521c:	08 95       	ret

0000521e <spi_TX>:
    521e:	a1 e0       	ldi	r26, 0x01	; 1
    5220:	b0 e0       	ldi	r27, 0x00	; 0
    5222:	e5 e1       	ldi	r30, 0x15	; 21
    5224:	f9 e2       	ldi	r31, 0x29	; 41
    5226:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    522a:	89 83       	std	Y+1, r24	; 0x01
    522c:	61 e0       	ldi	r22, 0x01	; 1
    522e:	70 e0       	ldi	r23, 0x00	; 0
    5230:	ce 01       	movw	r24, r28
    5232:	01 96       	adiw	r24, 0x01	; 1
    5234:	6b d4       	rcall	.+2262   	; 0x5b0c <SPI0_TX>
    5236:	21 96       	adiw	r28, 0x01	; 1
    5238:	e2 e0       	ldi	r30, 0x02	; 2
    523a:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0000523e <spi_init>:
    523e:	cf 92       	push	r12
    5240:	df 92       	push	r13
    5242:	ef 92       	push	r14
    5244:	ff 92       	push	r15
    5246:	6b 01       	movw	r12, r22
    5248:	7c 01       	movw	r14, r24
    524a:	84 2f       	mov	r24, r20
    524c:	a8 df       	rcall	.-176    	; 0x519e <chip_deselect>
    524e:	8f ef       	ldi	r24, 0xFF	; 255
    5250:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5254:	c7 01       	movw	r24, r14
    5256:	b6 01       	movw	r22, r12
    5258:	34 d4       	rcall	.+2152   	; 0x5ac2 <SPI0_Init>
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	f5 d3       	rcall	.+2026   	; 0x5a4a <SPI0_Mode>
    5260:	8f ef       	ldi	r24, 0xFF	; 255
    5262:	dd df       	rcall	.-70     	; 0x521e <spi_TX>
    5264:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    5268:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    526c:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5270:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    5274:	ff 90       	pop	r15
    5276:	ef 90       	pop	r14
    5278:	df 90       	pop	r13
    527a:	cf 90       	pop	r12
    527c:	08 95       	ret

0000527e <spi_begin>:
    527e:	cf 92       	push	r12
    5280:	df 92       	push	r13
    5282:	ef 92       	push	r14
    5284:	ff 92       	push	r15
    5286:	cf 93       	push	r28
    5288:	df 93       	push	r29
    528a:	6b 01       	movw	r12, r22
    528c:	7c 01       	movw	r14, r24
    528e:	ea 01       	movw	r28, r20
    5290:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5294:	8f 3f       	cpi	r24, 0xFF	; 255
    5296:	99 f0       	breq	.+38     	; 0x52be <spi_begin+0x40>
    5298:	df 93       	push	r29
    529a:	4f 93       	push	r20
    529c:	1f 92       	push	r1
    529e:	8f 93       	push	r24
    52a0:	86 ef       	ldi	r24, 0xF6	; 246
    52a2:	92 e0       	ldi	r25, 0x02	; 2
    52a4:	1f 92       	push	r1
    52a6:	9f 93       	push	r25
    52a8:	8f 93       	push	r24
    52aa:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    52ae:	8d b7       	in	r24, 0x3d	; 61
    52b0:	9e b7       	in	r25, 0x3e	; 62
    52b2:	07 96       	adiw	r24, 0x07	; 7
    52b4:	0f b6       	in	r0, 0x3f	; 63
    52b6:	f8 94       	cli
    52b8:	9e bf       	out	0x3e, r25	; 62
    52ba:	0f be       	out	0x3f, r0	; 63
    52bc:	8d bf       	out	0x3d, r24	; 61
    52be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    52c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    52c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    52ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    52ce:	8c 15       	cp	r24, r12
    52d0:	9d 05       	cpc	r25, r13
    52d2:	ae 05       	cpc	r26, r14
    52d4:	bf 05       	cpc	r27, r15
    52d6:	21 f0       	breq	.+8      	; 0x52e0 <spi_begin+0x62>
    52d8:	ae 01       	movw	r20, r28
    52da:	c7 01       	movw	r24, r14
    52dc:	b6 01       	movw	r22, r12
    52de:	af df       	rcall	.-162    	; 0x523e <spi_init>
    52e0:	8c 2f       	mov	r24, r28
    52e2:	44 df       	rcall	.-376    	; 0x516c <chip_select>
    52e4:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    52e8:	df 91       	pop	r29
    52ea:	cf 91       	pop	r28
    52ec:	ff 90       	pop	r15
    52ee:	ef 90       	pop	r14
    52f0:	df 90       	pop	r13
    52f2:	cf 90       	pop	r12
    52f4:	08 95       	ret

000052f6 <spi_TXRX>:
    52f6:	a1 e0       	ldi	r26, 0x01	; 1
    52f8:	b0 e0       	ldi	r27, 0x00	; 0
    52fa:	e1 e8       	ldi	r30, 0x81	; 129
    52fc:	f9 e2       	ldi	r31, 0x29	; 41
    52fe:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    5302:	89 83       	std	Y+1, r24	; 0x01
    5304:	61 e0       	ldi	r22, 0x01	; 1
    5306:	70 e0       	ldi	r23, 0x00	; 0
    5308:	ce 01       	movw	r24, r28
    530a:	01 96       	adiw	r24, 0x01	; 1
    530c:	13 d4       	rcall	.+2086   	; 0x5b34 <SPI0_TXRX>
    530e:	89 81       	ldd	r24, Y+1	; 0x01
    5310:	21 96       	adiw	r28, 0x01	; 1
    5312:	e2 e0       	ldi	r30, 0x02	; 2
    5314:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00005318 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    5318:	a2 e0       	ldi	r26, 0x02	; 2
    531a:	b0 e0       	ldi	r27, 0x00	; 0
    531c:	e2 e9       	ldi	r30, 0x92	; 146
    531e:	f9 e2       	ldi	r31, 0x29	; 41
    5320:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    5324:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <__brkval>
    5328:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <__brkval+0x1>
    532c:	21 15       	cp	r18, r1
    532e:	31 05       	cpc	r19, r1
    5330:	11 f4       	brne	.+4      	; 0x5336 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5332:	25 e1       	ldi	r18, 0x15	; 21
    5334:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    5336:	ce 01       	movw	r24, r28
    5338:	01 96       	adiw	r24, 0x01	; 1
    533a:	82 1b       	sub	r24, r18
    533c:	93 0b       	sbc	r25, r19
    533e:	22 96       	adiw	r28, 0x02	; 2
    5340:	e2 e0       	ldi	r30, 0x02	; 2
    5342:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00005346 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    5346:	a2 e0       	ldi	r26, 0x02	; 2
    5348:	b0 e0       	ldi	r27, 0x00	; 0
    534a:	e9 ea       	ldi	r30, 0xA9	; 169
    534c:	f9 e2       	ldi	r31, 0x29	; 41
    534e:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5352:	e2 df       	rcall	.-60     	; 0x5318 <freeRam>
    5354:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    5356:	9a 83       	std	Y+2, r25	; 0x02
    5358:	9f 93       	push	r25
    535a:	8f 93       	push	r24
    535c:	8d e1       	ldi	r24, 0x1D	; 29
    535e:	94 e0       	ldi	r25, 0x04	; 4
    5360:	1f 92       	push	r1
    5362:	9f 93       	push	r25
    5364:	8f 93       	push	r24
    5366:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    536a:	8f ef       	ldi	r24, 0xFF	; 255
    536c:	90 e4       	ldi	r25, 0x40	; 64
    536e:	9f 93       	push	r25
    5370:	8f 93       	push	r24
    5372:	8a e0       	ldi	r24, 0x0A	; 10
    5374:	94 e0       	ldi	r25, 0x04	; 4
    5376:	1f 92       	push	r1
    5378:	9f 93       	push	r25
    537a:	8f 93       	push	r24
    537c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5380:	ce 01       	movw	r24, r28
    5382:	01 96       	adiw	r24, 0x01	; 1
    5384:	9f 93       	push	r25
    5386:	8f 93       	push	r24
    5388:	87 ef       	ldi	r24, 0xF7	; 247
    538a:	93 e0       	ldi	r25, 0x03	; 3
    538c:	1f 92       	push	r1
    538e:	9f 93       	push	r25
    5390:	8f 93       	push	r24
    5392:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    5396:	85 e1       	ldi	r24, 0x15	; 21
    5398:	90 e2       	ldi	r25, 0x20	; 32
    539a:	9f 93       	push	r25
    539c:	8f 93       	push	r24
    539e:	88 e8       	ldi	r24, 0x88	; 136
    53a0:	97 e1       	ldi	r25, 0x17	; 23
    53a2:	9f 93       	push	r25
    53a4:	8f 93       	push	r24
    53a6:	89 ed       	ldi	r24, 0xD9	; 217
    53a8:	93 e0       	ldi	r25, 0x03	; 3
    53aa:	1f 92       	push	r1
    53ac:	9f 93       	push	r25
    53ae:	8f 93       	push	r24
    53b0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    53b4:	88 e8       	ldi	r24, 0x88	; 136
    53b6:	97 e1       	ldi	r25, 0x17	; 23
    53b8:	9f 93       	push	r25
    53ba:	8f 93       	push	r24
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	91 e0       	ldi	r25, 0x01	; 1
    53c0:	9f 93       	push	r25
    53c2:	8f 93       	push	r24
    53c4:	8b eb       	ldi	r24, 0xBB	; 187
    53c6:	93 e0       	ldi	r25, 0x03	; 3
    53c8:	1f 92       	push	r1
    53ca:	9f 93       	push	r25
    53cc:	8f 93       	push	r24
    53ce:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	9f 93       	push	r25
    53d8:	8f 93       	push	r24
    53da:	85 e1       	ldi	r24, 0x15	; 21
    53dc:	90 e2       	ldi	r25, 0x20	; 32
    53de:	9f 93       	push	r25
    53e0:	8f 93       	push	r24
    53e2:	8d e9       	ldi	r24, 0x9D	; 157
    53e4:	93 e0       	ldi	r25, 0x03	; 3
    53e6:	1f 92       	push	r1
    53e8:	9f 93       	push	r25
    53ea:	8f 93       	push	r24
    53ec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
    53fe:	8f 93       	push	r24
    5400:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__malloc_heap_end>
    5404:	8f 93       	push	r24
    5406:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
    540a:	8f 93       	push	r24
    540c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_start>
    5410:	8f 93       	push	r24
    5412:	8f e7       	ldi	r24, 0x7F	; 127
    5414:	93 e0       	ldi	r25, 0x03	; 3
    5416:	1f 92       	push	r1
    5418:	9f 93       	push	r25
    541a:	8f 93       	push	r24
    541c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    5420:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <__brkval+0x1>
    5424:	8f 93       	push	r24
    5426:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <__brkval>
    542a:	8f 93       	push	r24
    542c:	8b e6       	ldi	r24, 0x6B	; 107
    542e:	93 e0       	ldi	r25, 0x03	; 3
    5430:	1f 92       	push	r1
    5432:	9f 93       	push	r25
    5434:	8f 93       	push	r24
    5436:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

}
    543a:	0f b6       	in	r0, 0x3f	; 63
    543c:	f8 94       	cli
    543e:	de bf       	out	0x3e, r29	; 62
    5440:	0f be       	out	0x3f, r0	; 63
    5442:	cd bf       	out	0x3d, r28	; 61
    5444:	22 96       	adiw	r28, 0x02	; 2
    5446:	e2 e0       	ldi	r30, 0x02	; 2
    5448:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0000544c <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    544c:	ef 92       	push	r14
    544e:	ff 92       	push	r15
    5450:	0f 93       	push	r16
    5452:	1f 93       	push	r17
    5454:	cf 93       	push	r28
    5456:	df 93       	push	r29
    5458:	18 2f       	mov	r17, r24
    545a:	09 2f       	mov	r16, r25
    545c:	f6 2e       	mov	r15, r22
    545e:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5460:	0e 94 b3 ef 	call	0x1df66	; 0x1df66 <calloc>
    5464:	ec 01       	movw	r28, r24
	if(!p)
    5466:	89 2b       	or	r24, r25
    5468:	99 f4       	brne	.+38     	; 0x5490 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    546a:	ef 92       	push	r14
    546c:	ff 92       	push	r15
    546e:	0f 93       	push	r16
    5470:	1f 93       	push	r17
    5472:	80 e5       	ldi	r24, 0x50	; 80
    5474:	93 e0       	ldi	r25, 0x03	; 3
    5476:	1f 92       	push	r1
    5478:	9f 93       	push	r25
    547a:	8f 93       	push	r24
    547c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    5480:	8d b7       	in	r24, 0x3d	; 61
    5482:	9e b7       	in	r25, 0x3e	; 62
    5484:	07 96       	adiw	r24, 0x07	; 7
    5486:	0f b6       	in	r0, 0x3f	; 63
    5488:	f8 94       	cli
    548a:	9e bf       	out	0x3e, r25	; 62
    548c:	0f be       	out	0x3f, r0	; 63
    548e:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5490:	ce 01       	movw	r24, r28
    5492:	cd b7       	in	r28, 0x3d	; 61
    5494:	de b7       	in	r29, 0x3e	; 62
    5496:	e6 e0       	ldi	r30, 0x06	; 6
    5498:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0000549c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    549c:	0f 93       	push	r16
    549e:	1f 93       	push	r17
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	18 2f       	mov	r17, r24
    54a6:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    54a8:	61 e0       	ldi	r22, 0x01	; 1
    54aa:	70 e0       	ldi	r23, 0x00	; 0
    54ac:	0e 94 b3 ef 	call	0x1df66	; 0x1df66 <calloc>
    54b0:	ec 01       	movw	r28, r24
    if(!p)
    54b2:	89 2b       	or	r24, r25
    54b4:	71 f4       	brne	.+28     	; 0x54d2 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    54b6:	0f 93       	push	r16
    54b8:	1f 93       	push	r17
    54ba:	88 e3       	ldi	r24, 0x38	; 56
    54bc:	93 e0       	ldi	r25, 0x03	; 3
    54be:	1f 92       	push	r1
    54c0:	9f 93       	push	r25
    54c2:	8f 93       	push	r24
    54c4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    54c8:	0f 90       	pop	r0
    54ca:	0f 90       	pop	r0
    54cc:	0f 90       	pop	r0
    54ce:	0f 90       	pop	r0
    54d0:	0f 90       	pop	r0
    }
    return(p);
}
    54d2:	ce 01       	movw	r24, r28
    54d4:	df 91       	pop	r29
    54d6:	cf 91       	pop	r28
    54d8:	1f 91       	pop	r17
    54da:	0f 91       	pop	r16
    54dc:	08 95       	ret

000054de <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    54de:	00 97       	sbiw	r24, 0x00	; 0
    54e0:	39 f1       	breq	.+78     	; 0x5530 <safefree+0x52>
        return;

    if(__brkval)
    54e2:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <__brkval>
    54e6:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <__brkval+0x1>
    54ea:	21 15       	cp	r18, r1
    54ec:	31 05       	cpc	r19, r1
    54ee:	11 f4       	brne	.+4      	; 0x54f4 <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    54f0:	25 e1       	ldi	r18, 0x15	; 21
    54f2:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    54f4:	40 e2       	ldi	r20, 0x20	; 32
    54f6:	85 31       	cpi	r24, 0x15	; 21
    54f8:	94 07       	cpc	r25, r20
    54fa:	30 f0       	brcs	.+12     	; 0x5508 <safefree+0x2a>
    54fc:	28 17       	cp	r18, r24
    54fe:	39 07       	cpc	r19, r25
    5500:	18 f0       	brcs	.+6      	; 0x5508 <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    5502:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <free>
        return;
    5506:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5508:	3f 93       	push	r19
    550a:	2f 93       	push	r18
    550c:	9f 93       	push	r25
    550e:	8f 93       	push	r24
    5510:	83 e1       	ldi	r24, 0x13	; 19
    5512:	93 e0       	ldi	r25, 0x03	; 3
    5514:	1f 92       	push	r1
    5516:	9f 93       	push	r25
    5518:	8f 93       	push	r24
    551a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    PrintFree();
    551e:	13 df       	rcall	.-474    	; 0x5346 <PrintFree>
    5520:	8d b7       	in	r24, 0x3d	; 61
    5522:	9e b7       	in	r25, 0x3e	; 62
    5524:	07 96       	adiw	r24, 0x07	; 7
    5526:	0f b6       	in	r0, 0x3f	; 63
    5528:	f8 94       	cli
    552a:	9e bf       	out	0x3e, r25	; 62
    552c:	0f be       	out	0x3f, r0	; 63
    552e:	8d bf       	out	0x3d, r24	; 61
    5530:	08 95       	ret

00005532 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5532:	64 36       	cpi	r22, 0x64	; 100
    5534:	71 05       	cpc	r23, r1
    5536:	81 05       	cpc	r24, r1
    5538:	91 05       	cpc	r25, r1
    553a:	58 f0       	brcs	.+22     	; 0x5552 <delayus+0x20>
    {
        us -= 100U;
    553c:	64 56       	subi	r22, 0x64	; 100
    553e:	71 09       	sbc	r23, r1
    5540:	81 09       	sbc	r24, r1
    5542:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5544:	e3 ef       	ldi	r30, 0xF3	; 243
    5546:	f1 e0       	ldi	r31, 0x01	; 1
    5548:	31 97       	sbiw	r30, 0x01	; 1
    554a:	f1 f7       	brne	.-4      	; 0x5548 <delayus+0x16>
    554c:	00 c0       	rjmp	.+0      	; 0x554e <delayus+0x1c>
    554e:	00 00       	nop
    5550:	f0 cf       	rjmp	.-32     	; 0x5532 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5552:	6a 30       	cpi	r22, 0x0A	; 10
    5554:	71 05       	cpc	r23, r1
    5556:	81 05       	cpc	r24, r1
    5558:	91 05       	cpc	r25, r1
    555a:	48 f0       	brcs	.+18     	; 0x556e <delayus+0x3c>
    {
        us -= 10U;
    555c:	6a 50       	subi	r22, 0x0A	; 10
    555e:	71 09       	sbc	r23, r1
    5560:	81 09       	sbc	r24, r1
    5562:	91 09       	sbc	r25, r1
    5564:	f2 e4       	ldi	r31, 0x42	; 66
    5566:	fa 95       	dec	r31
    5568:	f1 f7       	brne	.-4      	; 0x5566 <delayus+0x34>
    556a:	00 c0       	rjmp	.+0      	; 0x556c <delayus+0x3a>
    556c:	f2 cf       	rjmp	.-28     	; 0x5552 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    556e:	61 15       	cp	r22, r1
    5570:	71 05       	cpc	r23, r1
    5572:	81 05       	cpc	r24, r1
    5574:	91 05       	cpc	r25, r1
    5576:	49 f0       	breq	.+18     	; 0x558a <delayus+0x58>
    {
        --us;
    5578:	61 50       	subi	r22, 0x01	; 1
    557a:	71 09       	sbc	r23, r1
    557c:	81 09       	sbc	r24, r1
    557e:	91 09       	sbc	r25, r1
    5580:	26 e0       	ldi	r18, 0x06	; 6
    5582:	2a 95       	dec	r18
    5584:	f1 f7       	brne	.-4      	; 0x5582 <delayus+0x50>
    5586:	00 c0       	rjmp	.+0      	; 0x5588 <delayus+0x56>
    5588:	f2 cf       	rjmp	.-28     	; 0x556e <delayus+0x3c>
        _delay_us(1);
    }
}
    558a:	08 95       	ret

0000558c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    558c:	61 15       	cp	r22, r1
    558e:	71 05       	cpc	r23, r1
    5590:	81 05       	cpc	r24, r1
    5592:	91 05       	cpc	r25, r1
    5594:	09 f4       	brne	.+2      	; 0x5598 <delayms+0xc>
    5596:	41 c0       	rjmp	.+130    	; 0x561a <delayms+0x8e>
    5598:	e3 ef       	ldi	r30, 0xF3	; 243
    559a:	f1 e0       	ldi	r31, 0x01	; 1
    559c:	31 97       	sbiw	r30, 0x01	; 1
    559e:	f1 f7       	brne	.-4      	; 0x559c <delayms+0x10>
    55a0:	00 c0       	rjmp	.+0      	; 0x55a2 <delayms+0x16>
    55a2:	00 00       	nop
    55a4:	e3 ef       	ldi	r30, 0xF3	; 243
    55a6:	f1 e0       	ldi	r31, 0x01	; 1
    55a8:	31 97       	sbiw	r30, 0x01	; 1
    55aa:	f1 f7       	brne	.-4      	; 0x55a8 <delayms+0x1c>
    55ac:	00 c0       	rjmp	.+0      	; 0x55ae <delayms+0x22>
    55ae:	00 00       	nop
    55b0:	e3 ef       	ldi	r30, 0xF3	; 243
    55b2:	f1 e0       	ldi	r31, 0x01	; 1
    55b4:	31 97       	sbiw	r30, 0x01	; 1
    55b6:	f1 f7       	brne	.-4      	; 0x55b4 <delayms+0x28>
    55b8:	00 c0       	rjmp	.+0      	; 0x55ba <delayms+0x2e>
    55ba:	00 00       	nop
    55bc:	e3 ef       	ldi	r30, 0xF3	; 243
    55be:	f1 e0       	ldi	r31, 0x01	; 1
    55c0:	31 97       	sbiw	r30, 0x01	; 1
    55c2:	f1 f7       	brne	.-4      	; 0x55c0 <delayms+0x34>
    55c4:	00 c0       	rjmp	.+0      	; 0x55c6 <delayms+0x3a>
    55c6:	00 00       	nop
    55c8:	e3 ef       	ldi	r30, 0xF3	; 243
    55ca:	f1 e0       	ldi	r31, 0x01	; 1
    55cc:	31 97       	sbiw	r30, 0x01	; 1
    55ce:	f1 f7       	brne	.-4      	; 0x55cc <delayms+0x40>
    55d0:	00 c0       	rjmp	.+0      	; 0x55d2 <delayms+0x46>
    55d2:	00 00       	nop
    55d4:	e3 ef       	ldi	r30, 0xF3	; 243
    55d6:	f1 e0       	ldi	r31, 0x01	; 1
    55d8:	31 97       	sbiw	r30, 0x01	; 1
    55da:	f1 f7       	brne	.-4      	; 0x55d8 <delayms+0x4c>
    55dc:	00 c0       	rjmp	.+0      	; 0x55de <delayms+0x52>
    55de:	00 00       	nop
    55e0:	e3 ef       	ldi	r30, 0xF3	; 243
    55e2:	f1 e0       	ldi	r31, 0x01	; 1
    55e4:	31 97       	sbiw	r30, 0x01	; 1
    55e6:	f1 f7       	brne	.-4      	; 0x55e4 <delayms+0x58>
    55e8:	00 c0       	rjmp	.+0      	; 0x55ea <delayms+0x5e>
    55ea:	00 00       	nop
    55ec:	e3 ef       	ldi	r30, 0xF3	; 243
    55ee:	f1 e0       	ldi	r31, 0x01	; 1
    55f0:	31 97       	sbiw	r30, 0x01	; 1
    55f2:	f1 f7       	brne	.-4      	; 0x55f0 <delayms+0x64>
    55f4:	00 c0       	rjmp	.+0      	; 0x55f6 <delayms+0x6a>
    55f6:	00 00       	nop
    55f8:	e3 ef       	ldi	r30, 0xF3	; 243
    55fa:	f1 e0       	ldi	r31, 0x01	; 1
    55fc:	31 97       	sbiw	r30, 0x01	; 1
    55fe:	f1 f7       	brne	.-4      	; 0x55fc <delayms+0x70>
    5600:	00 c0       	rjmp	.+0      	; 0x5602 <delayms+0x76>
    5602:	00 00       	nop
    5604:	e3 ef       	ldi	r30, 0xF3	; 243
    5606:	f1 e0       	ldi	r31, 0x01	; 1
    5608:	31 97       	sbiw	r30, 0x01	; 1
    560a:	f1 f7       	brne	.-4      	; 0x5608 <delayms+0x7c>
    560c:	00 c0       	rjmp	.+0      	; 0x560e <delayms+0x82>
    560e:	00 00       	nop
    5610:	61 50       	subi	r22, 0x01	; 1
    5612:	71 09       	sbc	r23, r1
    5614:	81 09       	sbc	r24, r1
    5616:	91 09       	sbc	r25, r1
    5618:	b9 cf       	rjmp	.-142    	; 0x558c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    561a:	08 95       	ret

0000561c <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    561c:	4f 92       	push	r4
    561e:	5f 92       	push	r5
    5620:	6f 92       	push	r6
    5622:	7f 92       	push	r7
    5624:	8f 92       	push	r8
    5626:	9f 92       	push	r9
    5628:	af 92       	push	r10
    562a:	bf 92       	push	r11
    562c:	cf 92       	push	r12
    562e:	df 92       	push	r13
    5630:	ef 92       	push	r14
    5632:	ff 92       	push	r15
    5634:	cf 93       	push	r28
    5636:	df 93       	push	r29
    5638:	5a 01       	movw	r10, r20
    563a:	e9 01       	movw	r28, r18
    563c:	0e 94 51 ee 	call	0x1dca2	; 0x1dca2 <__floatunsisf>
    5640:	2b 01       	movw	r4, r22
    5642:	3c 01       	movw	r6, r24
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	30 e0       	ldi	r19, 0x00	; 0
    5648:	40 e0       	ldi	r20, 0x00	; 0
    564a:	51 e4       	ldi	r21, 0x41	; 65
    564c:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    5650:	9b 01       	movw	r18, r22
    5652:	ac 01       	movw	r20, r24
    5654:	60 e8       	ldi	r22, 0x80	; 128
    5656:	76 e9       	ldi	r23, 0x96	; 150
    5658:	88 e9       	ldi	r24, 0x98	; 152
    565a:	9b e4       	ldi	r25, 0x4B	; 75
    565c:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    5660:	20 e0       	ldi	r18, 0x00	; 0
    5662:	30 e0       	ldi	r19, 0x00	; 0
    5664:	40 e8       	ldi	r20, 0x80	; 128
    5666:	5f e3       	ldi	r21, 0x3F	; 63
    5668:	0e 94 4f ed 	call	0x1da9e	; 0x1da9e <__subsf3>
    566c:	0e 94 6a ef 	call	0x1ded4	; 0x1ded4 <round>
    5670:	0e 94 25 ee 	call	0x1dc4a	; 0x1dc4a <__fixunssfsi>
    5674:	6b 01       	movw	r12, r22
    5676:	7c 01       	movw	r14, r24
    5678:	c1 14       	cp	r12, r1
    567a:	80 e1       	ldi	r24, 0x10	; 16
    567c:	d8 06       	cpc	r13, r24
    567e:	e1 04       	cpc	r14, r1
    5680:	f1 04       	cpc	r15, r1
    5682:	58 f4       	brcc	.+22     	; 0x569a <uart_ubr+0x7e>
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	f5 01       	movw	r30, r10
    568a:	91 83       	std	Z+1, r25	; 0x01
    568c:	80 83       	st	Z, r24
    568e:	81 2c       	mov	r8, r1
    5690:	91 2c       	mov	r9, r1
    5692:	a1 2c       	mov	r10, r1
    5694:	21 e4       	ldi	r18, 0x41	; 65
    5696:	b2 2e       	mov	r11, r18
    5698:	31 c0       	rjmp	.+98     	; 0x56fc <uart_ubr+0xe0>
    569a:	f5 01       	movw	r30, r10
    569c:	11 82       	std	Z+1, r1	; 0x01
    569e:	10 82       	st	Z, r1
    56a0:	20 e0       	ldi	r18, 0x00	; 0
    56a2:	30 e0       	ldi	r19, 0x00	; 0
    56a4:	40 e8       	ldi	r20, 0x80	; 128
    56a6:	51 e4       	ldi	r21, 0x41	; 65
    56a8:	c3 01       	movw	r24, r6
    56aa:	b2 01       	movw	r22, r4
    56ac:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    56b0:	9b 01       	movw	r18, r22
    56b2:	ac 01       	movw	r20, r24
    56b4:	60 e8       	ldi	r22, 0x80	; 128
    56b6:	76 e9       	ldi	r23, 0x96	; 150
    56b8:	88 e9       	ldi	r24, 0x98	; 152
    56ba:	9b e4       	ldi	r25, 0x4B	; 75
    56bc:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	40 e8       	ldi	r20, 0x80	; 128
    56c6:	5f e3       	ldi	r21, 0x3F	; 63
    56c8:	0e 94 4f ed 	call	0x1da9e	; 0x1da9e <__subsf3>
    56cc:	0e 94 6a ef 	call	0x1ded4	; 0x1ded4 <round>
    56d0:	0e 94 25 ee 	call	0x1dc4a	; 0x1dc4a <__fixunssfsi>
    56d4:	6b 01       	movw	r12, r22
    56d6:	7c 01       	movw	r14, r24
    56d8:	81 2c       	mov	r8, r1
    56da:	91 2c       	mov	r9, r1
    56dc:	90 e8       	ldi	r25, 0x80	; 128
    56de:	a9 2e       	mov	r10, r25
    56e0:	91 e4       	ldi	r25, 0x41	; 65
    56e2:	b9 2e       	mov	r11, r25
    56e4:	c1 14       	cp	r12, r1
    56e6:	f0 e1       	ldi	r31, 0x10	; 16
    56e8:	df 06       	cpc	r13, r31
    56ea:	e1 04       	cpc	r14, r1
    56ec:	f1 04       	cpc	r15, r1
    56ee:	30 f0       	brcs	.+12     	; 0x56fc <uart_ubr+0xe0>
    56f0:	cc 24       	eor	r12, r12
    56f2:	ca 94       	dec	r12
    56f4:	8f e0       	ldi	r24, 0x0F	; 15
    56f6:	d8 2e       	mov	r13, r24
    56f8:	e1 2c       	mov	r14, r1
    56fa:	f1 2c       	mov	r15, r1
    56fc:	c7 01       	movw	r24, r14
    56fe:	b6 01       	movw	r22, r12
    5700:	6f 5f       	subi	r22, 0xFF	; 255
    5702:	7f 4f       	sbci	r23, 0xFF	; 255
    5704:	8f 4f       	sbci	r24, 0xFF	; 255
    5706:	9f 4f       	sbci	r25, 0xFF	; 255
    5708:	0e 94 51 ee 	call	0x1dca2	; 0x1dca2 <__floatunsisf>
    570c:	a5 01       	movw	r20, r10
    570e:	94 01       	movw	r18, r8
    5710:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    5714:	9b 01       	movw	r18, r22
    5716:	ac 01       	movw	r20, r24
    5718:	60 e8       	ldi	r22, 0x80	; 128
    571a:	76 e9       	ldi	r23, 0x96	; 150
    571c:	88 e9       	ldi	r24, 0x98	; 152
    571e:	9b e4       	ldi	r25, 0x4B	; 75
    5720:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    5724:	0e 94 25 ee 	call	0x1dc4a	; 0x1dc4a <__fixunssfsi>
    5728:	68 83       	st	Y, r22
    572a:	79 83       	std	Y+1, r23	; 0x01
    572c:	8a 83       	std	Y+2, r24	; 0x02
    572e:	9b 83       	std	Y+3, r25	; 0x03
    5730:	c6 01       	movw	r24, r12
    5732:	df 91       	pop	r29
    5734:	cf 91       	pop	r28
    5736:	ff 90       	pop	r15
    5738:	ef 90       	pop	r14
    573a:	df 90       	pop	r13
    573c:	cf 90       	pop	r12
    573e:	bf 90       	pop	r11
    5740:	af 90       	pop	r10
    5742:	9f 90       	pop	r9
    5744:	8f 90       	pop	r8
    5746:	7f 90       	pop	r7
    5748:	6f 90       	pop	r6
    574a:	5f 90       	pop	r5
    574c:	4f 90       	pop	r4
    574e:	08 95       	ret

00005750 <uart_init>:
    5750:	a6 e0       	ldi	r26, 0x06	; 6
    5752:	b0 e0       	ldi	r27, 0x00	; 0
    5754:	ee ea       	ldi	r30, 0xAE	; 174
    5756:	fb e2       	ldi	r31, 0x2B	; 43
    5758:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    575c:	1e 82       	std	Y+6, r1	; 0x06
    575e:	1d 82       	std	Y+5, r1	; 0x05
    5760:	81 11       	cpse	r24, r1
    5762:	36 c0       	rjmp	.+108    	; 0x57d0 <uart_init+0x80>
    5764:	cb 01       	movw	r24, r22
    5766:	ba 01       	movw	r22, r20
    5768:	9e 01       	movw	r18, r28
    576a:	2f 5f       	subi	r18, 0xFF	; 255
    576c:	3f 4f       	sbci	r19, 0xFF	; 255
    576e:	ae 01       	movw	r20, r28
    5770:	4b 5f       	subi	r20, 0xFB	; 251
    5772:	5f 4f       	sbci	r21, 0xFF	; 255
    5774:	53 df       	rcall	.-346    	; 0x561c <uart_ubr>
    5776:	f8 94       	cli
    5778:	10 92 22 1a 	sts	0x1A22, r1	; 0x801a22 <uarts+0x4>
    577c:	10 92 21 1a 	sts	0x1A21, r1	; 0x801a21 <uarts+0x3>
    5780:	10 92 1e 1a 	sts	0x1A1E, r1	; 0x801a1e <uarts>
    5784:	10 92 1f 1a 	sts	0x1A1F, r1	; 0x801a1f <uarts+0x1>
    5788:	10 92 20 1a 	sts	0x1A20, r1	; 0x801a20 <uarts+0x2>
    578c:	10 92 23 1a 	sts	0x1A23, r1	; 0x801a23 <uarts+0x5>
    5790:	78 94       	sei
    5792:	f8 94       	cli
    5794:	58 9a       	sbi	0x0b, 0	; 11
    5796:	59 9a       	sbi	0x0b, 1	; 11
    5798:	50 98       	cbi	0x0a, 0	; 10
    579a:	51 9a       	sbi	0x0a, 1	; 10
    579c:	28 e9       	ldi	r18, 0x98	; 152
    579e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    57a2:	2d 81       	ldd	r18, Y+5	; 0x05
    57a4:	3e 81       	ldd	r19, Y+6	; 0x06
    57a6:	23 2b       	or	r18, r19
    57a8:	19 f0       	breq	.+6      	; 0x57b0 <uart_init+0x60>
    57aa:	22 e0       	ldi	r18, 0x02	; 2
    57ac:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    57b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    57b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    57b8:	78 94       	sei
    57ba:	6d e9       	ldi	r22, 0x9D	; 157
    57bc:	7c e2       	ldi	r23, 0x2C	; 44
    57be:	82 eb       	ldi	r24, 0xB2	; 178
    57c0:	9c e2       	ldi	r25, 0x2C	; 44
    57c2:	0e 94 22 7e 	call	0xfc44	; 0xfc44 <fdevopen>
    57c6:	69 81       	ldd	r22, Y+1	; 0x01
    57c8:	7a 81       	ldd	r23, Y+2	; 0x02
    57ca:	8b 81       	ldd	r24, Y+3	; 0x03
    57cc:	9c 81       	ldd	r25, Y+4	; 0x04
    57ce:	03 c0       	rjmp	.+6      	; 0x57d6 <uart_init+0x86>
    57d0:	60 e0       	ldi	r22, 0x00	; 0
    57d2:	70 e0       	ldi	r23, 0x00	; 0
    57d4:	cb 01       	movw	r24, r22
    57d6:	26 96       	adiw	r28, 0x06	; 6
    57d8:	e2 e0       	ldi	r30, 0x02	; 2
    57da:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

000057de <uart_rx_interrupt>:
    57de:	27 e5       	ldi	r18, 0x57	; 87
    57e0:	82 9f       	mul	r24, r18
    57e2:	c0 01       	movw	r24, r0
    57e4:	11 24       	eor	r1, r1
    57e6:	fc 01       	movw	r30, r24
    57e8:	e2 5e       	subi	r30, 0xE2	; 226
    57ea:	f5 4e       	sbci	r31, 0xE5	; 229
    57ec:	83 81       	ldd	r24, Z+3	; 0x03
    57ee:	94 81       	ldd	r25, Z+4	; 0x04
    57f0:	80 35       	cpi	r24, 0x50	; 80
    57f2:	91 05       	cpc	r25, r1
    57f4:	84 f4       	brge	.+32     	; 0x5816 <uart_rx_interrupt+0x38>
    57f6:	30 81       	ld	r19, Z
    57f8:	21 e0       	ldi	r18, 0x01	; 1
    57fa:	23 0f       	add	r18, r19
    57fc:	20 83       	st	Z, r18
    57fe:	df 01       	movw	r26, r30
    5800:	a3 0f       	add	r26, r19
    5802:	b1 1d       	adc	r27, r1
    5804:	16 96       	adiw	r26, 0x06	; 6
    5806:	6c 93       	st	X, r22
    5808:	01 96       	adiw	r24, 0x01	; 1
    580a:	94 83       	std	Z+4, r25	; 0x04
    580c:	83 83       	std	Z+3, r24	; 0x03
    580e:	20 35       	cpi	r18, 0x50	; 80
    5810:	28 f0       	brcs	.+10     	; 0x581c <uart_rx_interrupt+0x3e>
    5812:	10 82       	st	Z, r1
    5814:	08 95       	ret
    5816:	85 81       	ldd	r24, Z+5	; 0x05
    5818:	81 60       	ori	r24, 0x01	; 1
    581a:	85 83       	std	Z+5, r24	; 0x05
    581c:	08 95       	ret

0000581e <__vector_20>:
    581e:	1f 92       	push	r1
    5820:	0f 92       	push	r0
    5822:	0f b6       	in	r0, 0x3f	; 63
    5824:	0f 92       	push	r0
    5826:	11 24       	eor	r1, r1
    5828:	0b b6       	in	r0, 0x3b	; 59
    582a:	0f 92       	push	r0
    582c:	2f 93       	push	r18
    582e:	3f 93       	push	r19
    5830:	4f 93       	push	r20
    5832:	5f 93       	push	r21
    5834:	6f 93       	push	r22
    5836:	7f 93       	push	r23
    5838:	8f 93       	push	r24
    583a:	9f 93       	push	r25
    583c:	af 93       	push	r26
    583e:	bf 93       	push	r27
    5840:	ef 93       	push	r30
    5842:	ff 93       	push	r31
    5844:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5848:	80 e0       	ldi	r24, 0x00	; 0
    584a:	c9 df       	rcall	.-110    	; 0x57de <uart_rx_interrupt>
    584c:	ff 91       	pop	r31
    584e:	ef 91       	pop	r30
    5850:	bf 91       	pop	r27
    5852:	af 91       	pop	r26
    5854:	9f 91       	pop	r25
    5856:	8f 91       	pop	r24
    5858:	7f 91       	pop	r23
    585a:	6f 91       	pop	r22
    585c:	5f 91       	pop	r21
    585e:	4f 91       	pop	r20
    5860:	3f 91       	pop	r19
    5862:	2f 91       	pop	r18
    5864:	0f 90       	pop	r0
    5866:	0b be       	out	0x3b, r0	; 59
    5868:	0f 90       	pop	r0
    586a:	0f be       	out	0x3f, r0	; 63
    586c:	0f 90       	pop	r0
    586e:	1f 90       	pop	r1
    5870:	18 95       	reti

00005872 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5872:	81 11       	cpse	r24, r1
    5874:	07 c0       	rjmp	.+14     	; 0x5884 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5876:	f8 94       	cli

    count = uarts[uart].rx_count;
    5878:	80 91 21 1a 	lds	r24, 0x1A21	; 0x801a21 <uarts+0x3>
    587c:	90 91 22 1a 	lds	r25, 0x1A22	; 0x801a22 <uarts+0x4>

    sei();
    5880:	78 94       	sei

    return (count );
    5882:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5884:	8f ef       	ldi	r24, 0xFF	; 255
    5886:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5888:	08 95       	ret

0000588a <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    588a:	81 11       	cpse	r24, r1
    588c:	21 c0       	rjmp	.+66     	; 0x58d0 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	f0 df       	rcall	.-32     	; 0x5872 <uart_rx_count>
    5892:	18 16       	cp	r1, r24
    5894:	19 06       	cpc	r1, r25
    5896:	dc f7       	brge	.-10     	; 0x588e <uart_get_tail+0x4>
		;

    cli();
    5898:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    589a:	e0 91 1f 1a 	lds	r30, 0x1A1F	; 0x801a1f <uarts+0x1>
    589e:	91 e0       	ldi	r25, 0x01	; 1
    58a0:	9e 0f       	add	r25, r30
    58a2:	90 93 1f 1a 	sts	0x1A1F, r25	; 0x801a1f <uarts+0x1>
    58a6:	f0 e0       	ldi	r31, 0x00	; 0
    58a8:	e2 5e       	subi	r30, 0xE2	; 226
    58aa:	f5 4e       	sbci	r31, 0xE5	; 229
    58ac:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    58ae:	90 35       	cpi	r25, 0x50	; 80
    58b0:	10 f0       	brcs	.+4      	; 0x58b6 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    58b2:	10 92 1f 1a 	sts	0x1A1F, r1	; 0x801a1f <uarts+0x1>
    uarts[uart].rx_count--;
    58b6:	20 91 21 1a 	lds	r18, 0x1A21	; 0x801a21 <uarts+0x3>
    58ba:	30 91 22 1a 	lds	r19, 0x1A22	; 0x801a22 <uarts+0x4>
    58be:	21 50       	subi	r18, 0x01	; 1
    58c0:	31 09       	sbc	r19, r1
    58c2:	30 93 22 1a 	sts	0x1A22, r19	; 0x801a22 <uarts+0x4>
    58c6:	20 93 21 1a 	sts	0x1A21, r18	; 0x801a21 <uarts+0x3>
    sei();
    58ca:	78 94       	sei

    return (c & 0xff);
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    58d0:	8f ef       	ldi	r24, 0xFF	; 255
    58d2:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    58d4:	08 95       	ret

000058d6 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    58d6:	d9 df       	rcall	.-78     	; 0x588a <uart_get_tail>
    58d8:	99 27       	eor	r25, r25
    58da:	08 95       	ret

000058dc <uart_tx_byte>:
    58dc:	61 11       	cpse	r22, r1
    58de:	09 c0       	rjmp	.+18     	; 0x58f2 <uart_tx_byte+0x16>
    58e0:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    58e4:	25 ff       	sbrs	r18, 5
    58e6:	fc cf       	rjmp	.-8      	; 0x58e0 <uart_tx_byte+0x4>
    58e8:	28 2f       	mov	r18, r24
    58ea:	2f 77       	andi	r18, 0x7F	; 127
    58ec:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    58f0:	08 95       	ret
    58f2:	61 30       	cpi	r22, 0x01	; 1
    58f4:	49 f4       	brne	.+18     	; 0x5908 <uart_tx_byte+0x2c>
    58f6:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    58fa:	25 ff       	sbrs	r18, 5
    58fc:	fc cf       	rjmp	.-8      	; 0x58f6 <uart_tx_byte+0x1a>
    58fe:	28 2f       	mov	r18, r24
    5900:	2f 77       	andi	r18, 0x7F	; 127
    5902:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5906:	08 95       	ret
    5908:	8f ef       	ldi	r24, 0xFF	; 255
    590a:	9f ef       	ldi	r25, 0xFF	; 255
    590c:	08 95       	ret

0000590e <uart_getchar>:
    590e:	cf 93       	push	r28
    5910:	81 11       	cpse	r24, r1
    5912:	0f c0       	rjmp	.+30     	; 0x5932 <uart_getchar+0x24>
    5914:	e0 df       	rcall	.-64     	; 0x58d6 <uart_rx_byte>
    5916:	c8 2f       	mov	r28, r24
    5918:	60 e0       	ldi	r22, 0x00	; 0
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	df df       	rcall	.-66     	; 0x58dc <uart_tx_byte>
    591e:	cd 30       	cpi	r28, 0x0D	; 13
    5920:	29 f4       	brne	.+10     	; 0x592c <uart_getchar+0x1e>
    5922:	60 e0       	ldi	r22, 0x00	; 0
    5924:	8a e0       	ldi	r24, 0x0A	; 10
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	d9 df       	rcall	.-78     	; 0x58dc <uart_tx_byte>
    592a:	ca e0       	ldi	r28, 0x0A	; 10
    592c:	8c 2f       	mov	r24, r28
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	02 c0       	rjmp	.+4      	; 0x5936 <uart_getchar+0x28>
    5932:	8f ef       	ldi	r24, 0xFF	; 255
    5934:	9f ef       	ldi	r25, 0xFF	; 255
    5936:	cf 91       	pop	r28
    5938:	08 95       	ret

0000593a <uart0_getchar>:
    593a:	80 e0       	ldi	r24, 0x00	; 0
    593c:	e8 cf       	rjmp	.-48     	; 0x590e <uart_getchar>
    593e:	08 95       	ret

00005940 <uart_putchar>:
    5940:	1f 93       	push	r17
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	ec 01       	movw	r28, r24
    5948:	16 2f       	mov	r17, r22
    594a:	c8 df       	rcall	.-112    	; 0x58dc <uart_tx_byte>
    594c:	ca 30       	cpi	r28, 0x0A	; 10
    594e:	d1 05       	cpc	r29, r1
    5950:	21 f4       	brne	.+8      	; 0x595a <uart_putchar+0x1a>
    5952:	61 2f       	mov	r22, r17
    5954:	8d e0       	ldi	r24, 0x0D	; 13
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	c1 df       	rcall	.-126    	; 0x58dc <uart_tx_byte>
    595a:	ce 01       	movw	r24, r28
    595c:	df 91       	pop	r29
    595e:	cf 91       	pop	r28
    5960:	1f 91       	pop	r17
    5962:	08 95       	ret

00005964 <uart0_putchar>:
    5964:	cf 93       	push	r28
    5966:	df 93       	push	r29
    5968:	ec 01       	movw	r28, r24
    596a:	60 e0       	ldi	r22, 0x00	; 0
    596c:	70 e0       	ldi	r23, 0x00	; 0
    596e:	e8 df       	rcall	.-48     	; 0x5940 <uart_putchar>
    5970:	ce 01       	movw	r24, r28
    5972:	df 91       	pop	r29
    5974:	cf 91       	pop	r28
    5976:	08 95       	ret

00005978 <uart_keyhit>:
    5978:	7c cf       	rjmp	.-264    	; 0x5872 <uart_rx_count>
    597a:	08 95       	ret

0000597c <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    597c:	cf 92       	push	r12
    597e:	df 92       	push	r13
    5980:	ef 92       	push	r14
    5982:	ff 92       	push	r15
    5984:	6b 01       	movw	r12, r22
    5986:	7c 01       	movw	r14, r24
    5988:	80 91 8a 17 	lds	r24, 0x178A	; 0x80178a <SPI0_Speed_value>
    598c:	90 91 8b 17 	lds	r25, 0x178B	; 0x80178b <SPI0_Speed_value+0x1>
    5990:	a0 91 8c 17 	lds	r26, 0x178C	; 0x80178c <SPI0_Speed_value+0x2>
    5994:	b0 91 8d 17 	lds	r27, 0x178D	; 0x80178d <SPI0_Speed_value+0x3>
    5998:	8c 15       	cp	r24, r12
    599a:	9d 05       	cpc	r25, r13
    599c:	ae 05       	cpc	r26, r14
    599e:	bf 05       	cpc	r27, r15
    59a0:	09 f4       	brne	.+2      	; 0x59a4 <SPI0_Speed+0x28>
    59a2:	4e c0       	rjmp	.+156    	; 0x5a40 <SPI0_Speed+0xc4>
    59a4:	60 e0       	ldi	r22, 0x00	; 0
    59a6:	7d e2       	ldi	r23, 0x2D	; 45
    59a8:	81 e3       	ldi	r24, 0x31	; 49
    59aa:	91 e0       	ldi	r25, 0x01	; 1
    59ac:	a7 01       	movw	r20, r14
    59ae:	96 01       	movw	r18, r12
    59b0:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    59b4:	20 38       	cpi	r18, 0x80	; 128
    59b6:	31 05       	cpc	r19, r1
    59b8:	41 05       	cpc	r20, r1
    59ba:	51 05       	cpc	r21, r1
    59bc:	28 f4       	brcc	.+10     	; 0x59c8 <SPI0_Speed+0x4c>
    59be:	20 34       	cpi	r18, 0x40	; 64
    59c0:	31 05       	cpc	r19, r1
    59c2:	41 05       	cpc	r20, r1
    59c4:	51 05       	cpc	r21, r1
    59c6:	30 f0       	brcs	.+12     	; 0x59d4 <SPI0_Speed+0x58>
    59c8:	8d b5       	in	r24, 0x2d	; 45
    59ca:	8e 7f       	andi	r24, 0xFE	; 254
    59cc:	8d bd       	out	0x2d, r24	; 45
    59ce:	8c b5       	in	r24, 0x2c	; 44
    59d0:	82 60       	ori	r24, 0x02	; 2
    59d2:	1b c0       	rjmp	.+54     	; 0x5a0a <SPI0_Speed+0x8e>
    59d4:	8d b5       	in	r24, 0x2d	; 45
    59d6:	20 32       	cpi	r18, 0x20	; 32
    59d8:	31 05       	cpc	r19, r1
    59da:	41 05       	cpc	r20, r1
    59dc:	51 05       	cpc	r21, r1
    59de:	28 f0       	brcs	.+10     	; 0x59ea <SPI0_Speed+0x6e>
    59e0:	81 60       	ori	r24, 0x01	; 1
    59e2:	8d bd       	out	0x2d, r24	; 45
    59e4:	8c b5       	in	r24, 0x2c	; 44
    59e6:	82 60       	ori	r24, 0x02	; 2
    59e8:	1f c0       	rjmp	.+62     	; 0x5a28 <SPI0_Speed+0xac>
    59ea:	20 31       	cpi	r18, 0x10	; 16
    59ec:	31 05       	cpc	r19, r1
    59ee:	41 05       	cpc	r20, r1
    59f0:	51 05       	cpc	r21, r1
    59f2:	10 f0       	brcs	.+4      	; 0x59f8 <SPI0_Speed+0x7c>
    59f4:	8e 7f       	andi	r24, 0xFE	; 254
    59f6:	06 c0       	rjmp	.+12     	; 0x5a04 <SPI0_Speed+0x88>
    59f8:	28 30       	cpi	r18, 0x08	; 8
    59fa:	31 05       	cpc	r19, r1
    59fc:	41 05       	cpc	r20, r1
    59fe:	51 05       	cpc	r21, r1
    5a00:	40 f0       	brcs	.+16     	; 0x5a12 <SPI0_Speed+0x96>
    5a02:	81 60       	ori	r24, 0x01	; 1
    5a04:	8d bd       	out	0x2d, r24	; 45
    5a06:	8c b5       	in	r24, 0x2c	; 44
    5a08:	8d 7f       	andi	r24, 0xFD	; 253
    5a0a:	8c bd       	out	0x2c, r24	; 44
    5a0c:	8c b5       	in	r24, 0x2c	; 44
    5a0e:	81 60       	ori	r24, 0x01	; 1
    5a10:	0e c0       	rjmp	.+28     	; 0x5a2e <SPI0_Speed+0xb2>
    5a12:	24 30       	cpi	r18, 0x04	; 4
    5a14:	31 05       	cpc	r19, r1
    5a16:	41 05       	cpc	r20, r1
    5a18:	51 05       	cpc	r21, r1
    5a1a:	10 f0       	brcs	.+4      	; 0x5a20 <SPI0_Speed+0xa4>
    5a1c:	8e 7f       	andi	r24, 0xFE	; 254
    5a1e:	01 c0       	rjmp	.+2      	; 0x5a22 <SPI0_Speed+0xa6>
    5a20:	81 60       	ori	r24, 0x01	; 1
    5a22:	8d bd       	out	0x2d, r24	; 45
    5a24:	8c b5       	in	r24, 0x2c	; 44
    5a26:	8d 7f       	andi	r24, 0xFD	; 253
    5a28:	8c bd       	out	0x2c, r24	; 44
    5a2a:	8c b5       	in	r24, 0x2c	; 44
    5a2c:	8e 7f       	andi	r24, 0xFE	; 254
    5a2e:	8c bd       	out	0x2c, r24	; 44
    5a30:	c0 92 8a 17 	sts	0x178A, r12	; 0x80178a <SPI0_Speed_value>
    5a34:	d0 92 8b 17 	sts	0x178B, r13	; 0x80178b <SPI0_Speed_value+0x1>
    5a38:	e0 92 8c 17 	sts	0x178C, r14	; 0x80178c <SPI0_Speed_value+0x2>
    5a3c:	f0 92 8d 17 	sts	0x178D, r15	; 0x80178d <SPI0_Speed_value+0x3>
    5a40:	ff 90       	pop	r15
    5a42:	ef 90       	pop	r14
    5a44:	df 90       	pop	r13
    5a46:	cf 90       	pop	r12
    5a48:	08 95       	ret

00005a4a <SPI0_Mode>:
    5a4a:	cf 93       	push	r28
    5a4c:	df 93       	push	r29
    5a4e:	ec 01       	movw	r28, r24
    5a50:	81 30       	cpi	r24, 0x01	; 1
    5a52:	91 05       	cpc	r25, r1
    5a54:	71 f0       	breq	.+28     	; 0x5a72 <SPI0_Mode+0x28>
    5a56:	2c f4       	brge	.+10     	; 0x5a62 <SPI0_Mode+0x18>
    5a58:	89 2b       	or	r24, r25
    5a5a:	c1 f4       	brne	.+48     	; 0x5a8c <SPI0_Mode+0x42>
    5a5c:	8c b5       	in	r24, 0x2c	; 44
    5a5e:	87 7f       	andi	r24, 0xF7	; 247
    5a60:	11 c0       	rjmp	.+34     	; 0x5a84 <SPI0_Mode+0x3a>
    5a62:	82 30       	cpi	r24, 0x02	; 2
    5a64:	91 05       	cpc	r25, r1
    5a66:	61 f0       	breq	.+24     	; 0x5a80 <SPI0_Mode+0x36>
    5a68:	03 97       	sbiw	r24, 0x03	; 3
    5a6a:	81 f4       	brne	.+32     	; 0x5a8c <SPI0_Mode+0x42>
    5a6c:	8c b5       	in	r24, 0x2c	; 44
    5a6e:	88 60       	ori	r24, 0x08	; 8
    5a70:	02 c0       	rjmp	.+4      	; 0x5a76 <SPI0_Mode+0x2c>
    5a72:	8c b5       	in	r24, 0x2c	; 44
    5a74:	87 7f       	andi	r24, 0xF7	; 247
    5a76:	8c bd       	out	0x2c, r24	; 44
    5a78:	8c b5       	in	r24, 0x2c	; 44
    5a7a:	84 60       	ori	r24, 0x04	; 4
    5a7c:	8c bd       	out	0x2c, r24	; 44
    5a7e:	14 c0       	rjmp	.+40     	; 0x5aa8 <SPI0_Mode+0x5e>
    5a80:	8c b5       	in	r24, 0x2c	; 44
    5a82:	88 60       	ori	r24, 0x08	; 8
    5a84:	8c bd       	out	0x2c, r24	; 44
    5a86:	8c b5       	in	r24, 0x2c	; 44
    5a88:	8b 7f       	andi	r24, 0xFB	; 251
    5a8a:	f8 cf       	rjmp	.-16     	; 0x5a7c <SPI0_Mode+0x32>
    5a8c:	df 93       	push	r29
    5a8e:	cf 93       	push	r28
    5a90:	8a e2       	ldi	r24, 0x2A	; 42
    5a92:	94 e0       	ldi	r25, 0x04	; 4
    5a94:	1f 92       	push	r1
    5a96:	9f 93       	push	r25
    5a98:	8f 93       	push	r24
    5a9a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    5a9e:	0f 90       	pop	r0
    5aa0:	0f 90       	pop	r0
    5aa2:	0f 90       	pop	r0
    5aa4:	0f 90       	pop	r0
    5aa6:	0f 90       	pop	r0
    5aa8:	d0 93 89 17 	sts	0x1789, r29	; 0x801789 <__data_end+0x1>
    5aac:	c0 93 88 17 	sts	0x1788, r28	; 0x801788 <__data_end>
    5ab0:	df 91       	pop	r29
    5ab2:	cf 91       	pop	r28
    5ab4:	08 95       	ret

00005ab6 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5ab6:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5ab8:	0d b4       	in	r0, 0x2d	; 45
    5aba:	07 fe       	sbrs	r0, 7
    5abc:	fd cf       	rjmp	.-6      	; 0x5ab8 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5abe:	8e b5       	in	r24, 0x2e	; 46
}
    5ac0:	08 95       	ret

00005ac2 <SPI0_Init>:

///@brief Initialize SPI0 device.
///
/// - Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5ac2:	cf 92       	push	r12
    5ac4:	df 92       	push	r13
    5ac6:	ef 92       	push	r14
    5ac8:	ff 92       	push	r15
    5aca:	6b 01       	movw	r12, r22
    5acc:	7c 01       	movw	r14, r24

    GPIO_PIN_HI(SS);                                    // SS Output HI
    5ace:	2c 9a       	sbi	0x05, 4	; 5
    5ad0:	24 9a       	sbi	0x04, 4	; 4

    delayus(10);
    5ad2:	6a e0       	ldi	r22, 0x0A	; 10
    5ad4:	70 e0       	ldi	r23, 0x00	; 0
    5ad6:	80 e0       	ldi	r24, 0x00	; 0
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	2b dd       	rcall	.-1450   	; 0x5532 <delayus>

    GPIO_PIN_HI(SCK);                                   // SCK Output
    5adc:	2f 9a       	sbi	0x05, 7	; 5
    5ade:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5ae0:	2d 9a       	sbi	0x05, 5	; 5
    5ae2:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                               // MISO Input, no pull-up
    5ae4:	26 98       	cbi	0x04, 6	; 4

    BIT_SET(SPCR, SPE);                           // Enable SPI
    5ae6:	8c b5       	in	r24, 0x2c	; 44
    5ae8:	80 64       	ori	r24, 0x40	; 64
    5aea:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5aec:	8c b5       	in	r24, 0x2c	; 44
    5aee:	80 61       	ori	r24, 0x10	; 16
    5af0:	8c bd       	out	0x2c, r24	; 44

    SPI0_Mode(0);
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    SPI0_Speed(speed);
    5af6:	a9 df       	rcall	.-174    	; 0x5a4a <SPI0_Mode>
    5af8:	c7 01       	movw	r24, r14
    SPI0_TXRX_Byte(0xff);
    5afa:	b6 01       	movw	r22, r12
    5afc:	3f df       	rcall	.-386    	; 0x597c <SPI0_Speed>
    5afe:	8f ef       	ldi	r24, 0xFF	; 255
	SPI0_Init_state = 1;
}
    5b00:	da df       	rcall	.-76     	; 0x5ab6 <SPI0_TXRX_Byte>
    5b02:	ff 90       	pop	r15
    5b04:	ef 90       	pop	r14
    5b06:	df 90       	pop	r13
    5b08:	cf 90       	pop	r12
    5b0a:	08 95       	ret

00005b0c <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5b0c:	0f 93       	push	r16
    5b0e:	1f 93       	push	r17
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	8c 01       	movw	r16, r24
    5b16:	eb 01       	movw	r28, r22

    while(count > 0)
    5b18:	1c 16       	cp	r1, r28
    5b1a:	1d 06       	cpc	r1, r29
    5b1c:	34 f4       	brge	.+12     	; 0x5b2a <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5b1e:	f8 01       	movw	r30, r16
    5b20:	81 91       	ld	r24, Z+
    5b22:	8f 01       	movw	r16, r30
    5b24:	c8 df       	rcall	.-112    	; 0x5ab6 <SPI0_TXRX_Byte>
		++data;
		--count;
    5b26:	21 97       	sbiw	r28, 0x01	; 1
    5b28:	f7 cf       	rjmp	.-18     	; 0x5b18 <SPI0_TX+0xc>
	}
}
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	1f 91       	pop	r17
    5b30:	0f 91       	pop	r16
    5b32:	08 95       	ret

00005b34 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5b34:	0f 93       	push	r16
    5b36:	1f 93       	push	r17
    5b38:	cf 93       	push	r28
    5b3a:	df 93       	push	r29
    5b3c:	8c 01       	movw	r16, r24
    5b3e:	eb 01       	movw	r28, r22

    while(count > 0)
    5b40:	1c 16       	cp	r1, r28
    5b42:	1d 06       	cpc	r1, r29
    5b44:	44 f4       	brge	.+16     	; 0x5b56 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5b46:	f8 01       	movw	r30, r16
    5b48:	80 81       	ld	r24, Z
    5b4a:	b5 df       	rcall	.-150    	; 0x5ab6 <SPI0_TXRX_Byte>
    5b4c:	f8 01       	movw	r30, r16
    5b4e:	81 93       	st	Z+, r24
    5b50:	8f 01       	movw	r16, r30
		++data;
		--count;
    5b52:	21 97       	sbiw	r28, 0x01	; 1
    5b54:	f5 cf       	rjmp	.-22     	; 0x5b40 <SPI0_TXRX+0xc>
	}
}
    5b56:	df 91       	pop	r29
    5b58:	cf 91       	pop	r28
    5b5a:	1f 91       	pop	r17
    5b5c:	0f 91       	pop	r16
    5b5e:	08 95       	ret

00005b60 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5b60:	0f 93       	push	r16
    5b62:	1f 93       	push	r17
    5b64:	cf 93       	push	r28
    5b66:	df 93       	push	r29
    5b68:	8c 01       	movw	r16, r24
    5b6a:	eb 01       	movw	r28, r22

    while(count > 0)
    5b6c:	1c 16       	cp	r1, r28
    5b6e:	1d 06       	cpc	r1, r29
    5b70:	3c f4       	brge	.+14     	; 0x5b80 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5b72:	8f ef       	ldi	r24, 0xFF	; 255
    5b74:	a0 df       	rcall	.-192    	; 0x5ab6 <SPI0_TXRX_Byte>
    5b76:	f8 01       	movw	r30, r16
    5b78:	81 93       	st	Z+, r24
    5b7a:	8f 01       	movw	r16, r30
		++data;
		--count;
    5b7c:	21 97       	sbiw	r28, 0x01	; 1
    5b7e:	f6 cf       	rjmp	.-20     	; 0x5b6c <SPI0_RX+0xc>
	}
}
    5b80:	df 91       	pop	r29
    5b82:	cf 91       	pop	r28
    5b84:	1f 91       	pop	r17
    5b86:	0f 91       	pop	r16
    5b88:	08 95       	ret

00005b8a <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5b8a:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5b8c:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5b8e:	ec eb       	ldi	r30, 0xBC	; 188
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	90 81       	ld	r25, Z
    5b94:	94 60       	ori	r25, 0x04	; 4
    5b96:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5b98:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5b9c:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5ba0:	08 95       	ret

00005ba2 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5ba2:	84 e9       	ldi	r24, 0x94	; 148
    5ba4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ba8:	08 95       	ret

00005baa <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5baa:	94 ea       	ldi	r25, 0xA4	; 164
    5bac:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bb0:	24 e6       	ldi	r18, 0x64	; 100
    5bb2:	62 9f       	mul	r22, r18
    5bb4:	b0 01       	movw	r22, r0
    5bb6:	11 24       	eor	r1, r1
    5bb8:	61 50       	subi	r22, 0x01	; 1
    5bba:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5bbc:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5bbe:	40 e0       	ldi	r20, 0x00	; 0
    5bc0:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5bc2:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5bc4:	2f 3f       	cpi	r18, 0xFF	; 255
    5bc6:	9f ef       	ldi	r25, 0xFF	; 255
    5bc8:	39 07       	cpc	r19, r25
    5bca:	41 f1       	breq	.+80     	; 0x5c1c <TWI_StartTransmission+0x72>
    5bcc:	41 15       	cp	r20, r1
    5bce:	51 05       	cpc	r21, r1
    5bd0:	f1 f4       	brne	.+60     	; 0x5c0e <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5bd2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bd6:	97 ff       	sbrs	r25, 7
    5bd8:	13 c0       	rjmp	.+38     	; 0x5c00 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5bda:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5bde:	98 7f       	andi	r25, 0xF8	; 248
    5be0:	90 31       	cpi	r25, 0x10	; 16
    5be2:	61 f0       	breq	.+24     	; 0x5bfc <TWI_StartTransmission+0x52>
    5be4:	98 33       	cpi	r25, 0x38	; 56
    5be6:	39 f0       	breq	.+14     	; 0x5bf6 <TWI_StartTransmission+0x4c>
    5be8:	98 30       	cpi	r25, 0x08	; 8
    5bea:	41 f0       	breq	.+16     	; 0x5bfc <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5bec:	84 e0       	ldi	r24, 0x04	; 4
    5bee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5bf2:	81 e0       	ldi	r24, 0x01	; 1
    5bf4:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5bf6:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5bfa:	06 c0       	rjmp	.+12     	; 0x5c08 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5bfc:	41 e0       	ldi	r20, 0x01	; 1
    5bfe:	50 e0       	ldi	r21, 0x00	; 0
    5c00:	92 e4       	ldi	r25, 0x42	; 66
    5c02:	9a 95       	dec	r25
    5c04:	f1 f7       	brne	.-4      	; 0x5c02 <TWI_StartTransmission+0x58>
    5c06:	00 c0       	rjmp	.+0      	; 0x5c08 <TWI_StartTransmission+0x5e>
    5c08:	21 50       	subi	r18, 0x01	; 1
    5c0a:	31 09       	sbc	r19, r1
    5c0c:	db cf       	rjmp	.-74     	; 0x5bc4 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5c0e:	23 2b       	or	r18, r19
    5c10:	29 f4       	brne	.+10     	; 0x5c1c <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5c12:	84 e0       	ldi	r24, 0x04	; 4
    5c14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5c18:	82 e0       	ldi	r24, 0x02	; 2
    5c1a:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5c1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5c20:	84 e8       	ldi	r24, 0x84	; 132
    5c22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5c26:	6f 3f       	cpi	r22, 0xFF	; 255
    5c28:	8f ef       	ldi	r24, 0xFF	; 255
    5c2a:	78 07       	cpc	r23, r24
    5c2c:	71 f0       	breq	.+28     	; 0x5c4a <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5c2e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c32:	cb 01       	movw	r24, r22
    5c34:	01 97       	sbiw	r24, 0x01	; 1
    5c36:	27 fd       	sbrc	r18, 7
    5c38:	06 c0       	rjmp	.+12     	; 0x5c46 <TWI_StartTransmission+0x9c>
    5c3a:	22 e4       	ldi	r18, 0x42	; 66
    5c3c:	2a 95       	dec	r18
    5c3e:	f1 f7       	brne	.-4      	; 0x5c3c <TWI_StartTransmission+0x92>
    5c40:	00 c0       	rjmp	.+0      	; 0x5c42 <TWI_StartTransmission+0x98>
    5c42:	bc 01       	movw	r22, r24
    5c44:	f0 cf       	rjmp	.-32     	; 0x5c26 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5c46:	67 2b       	or	r22, r23
    5c48:	61 f0       	breq	.+24     	; 0x5c62 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5c4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c4e:	88 7f       	andi	r24, 0xF8	; 248
    5c50:	88 31       	cpi	r24, 0x18	; 24
    5c52:	49 f0       	breq	.+18     	; 0x5c66 <TWI_StartTransmission+0xbc>
    5c54:	80 34       	cpi	r24, 0x40	; 64
    5c56:	39 f0       	breq	.+14     	; 0x5c66 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c58:	84 e9       	ldi	r24, 0x94	; 148
    5c5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5c5e:	84 e0       	ldi	r24, 0x04	; 4
    5c60:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5c62:	83 e0       	ldi	r24, 0x03	; 3
    5c64:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5c66:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5c68:	08 95       	ret

00005c6a <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5c6a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5c6e:	84 e8       	ldi	r24, 0x84	; 132
    5c70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5c74:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c78:	87 ff       	sbrs	r24, 7
    5c7a:	fc cf       	rjmp	.-8      	; 0x5c74 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5c7c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c80:	98 7f       	andi	r25, 0xF8	; 248
    5c82:	21 e0       	ldi	r18, 0x01	; 1
    5c84:	30 e0       	ldi	r19, 0x00	; 0
    5c86:	98 32       	cpi	r25, 0x28	; 40
    5c88:	11 f0       	breq	.+4      	; 0x5c8e <TWI_SendByte+0x24>
    5c8a:	20 e0       	ldi	r18, 0x00	; 0
    5c8c:	30 e0       	ldi	r19, 0x00	; 0
}
    5c8e:	c9 01       	movw	r24, r18
    5c90:	08 95       	ret

00005c92 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5c92:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5c94:	61 15       	cp	r22, r1
    5c96:	71 05       	cpc	r23, r1
    5c98:	11 f4       	brne	.+4      	; 0x5c9e <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5c9a:	94 ec       	ldi	r25, 0xC4	; 196
    5c9c:	01 c0       	rjmp	.+2      	; 0x5ca0 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5c9e:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5ca0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5ca4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ca8:	87 ff       	sbrs	r24, 7
    5caa:	fc cf       	rjmp	.-8      	; 0x5ca4 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5cac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cb0:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5cb2:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5cb6:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	67 2b       	or	r22, r23
    5cbe:	19 f0       	breq	.+6      	; 0x5cc6 <TWI_ReceiveByte+0x34>
    5cc0:	28 35       	cpi	r18, 0x58	; 88
    5cc2:	19 f4       	brne	.+6      	; 0x5cca <TWI_ReceiveByte+0x38>
    5cc4:	03 c0       	rjmp	.+6      	; 0x5ccc <TWI_ReceiveByte+0x3a>
    5cc6:	20 35       	cpi	r18, 0x50	; 80
    5cc8:	09 f0       	breq	.+2      	; 0x5ccc <TWI_ReceiveByte+0x3a>
    5cca:	80 e0       	ldi	r24, 0x00	; 0
}
    5ccc:	08 95       	ret

00005cce <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5cce:	a0 e0       	ldi	r26, 0x00	; 0
    5cd0:	b0 e0       	ldi	r27, 0x00	; 0
    5cd2:	ed e6       	ldi	r30, 0x6D	; 109
    5cd4:	fe e2       	ldi	r31, 0x2E	; 46
    5cd6:	0c 94 0c ed 	jmp	0x1da18	; 0x1da18 <__prologue_saves__+0xe>
    5cda:	f8 2e       	mov	r15, r24
    5cdc:	b6 2e       	mov	r11, r22
    5cde:	94 2e       	mov	r9, r20
    5ce0:	a5 2e       	mov	r10, r21
    5ce2:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5ce4:	8e 7f       	andi	r24, 0xFE	; 254
    5ce6:	61 df       	rcall	.-318    	; 0x5baa <TWI_StartTransmission>
    5ce8:	d8 2f       	mov	r29, r24
    5cea:	81 11       	cpse	r24, r1
    5cec:	2b c0       	rjmp	.+86     	; 0x5d44 <TWI_ReadPacket+0x76>
    5cee:	c9 2c       	mov	r12, r9
    5cf0:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5cf2:	cc 23       	and	r28, r28
    5cf4:	39 f0       	breq	.+14     	; 0x5d04 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5cf6:	f6 01       	movw	r30, r12
    5cf8:	81 91       	ld	r24, Z+
    5cfa:	6f 01       	movw	r12, r30
    5cfc:	b6 df       	rcall	.-148    	; 0x5c6a <TWI_SendByte>
    5cfe:	c1 50       	subi	r28, 0x01	; 1
    5d00:	89 2b       	or	r24, r25
    5d02:	b9 f7       	brne	.-18     	; 0x5cf2 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5d04:	6b 2d       	mov	r22, r11
    5d06:	8f 2d       	mov	r24, r15
    5d08:	81 60       	ori	r24, 0x01	; 1
    5d0a:	4f df       	rcall	.-354    	; 0x5baa <TWI_StartTransmission>
    5d0c:	d8 2f       	mov	r29, r24
    5d0e:	81 11       	cpse	r24, r1
    5d10:	19 c0       	rjmp	.+50     	; 0x5d44 <TWI_ReadPacket+0x76>
    5d12:	cf ef       	ldi	r28, 0xFF	; 255
    5d14:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5d16:	cf 3f       	cpi	r28, 0xFF	; 255
    5d18:	91 f0       	breq	.+36     	; 0x5d3e <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5d1a:	78 01       	movw	r14, r16
    5d1c:	ff ef       	ldi	r31, 0xFF	; 255
    5d1e:	ef 1a       	sub	r14, r31
    5d20:	ff 0a       	sbc	r15, r31
    5d22:	61 e0       	ldi	r22, 0x01	; 1
    5d24:	70 e0       	ldi	r23, 0x00	; 0
    5d26:	cc 23       	and	r28, r28
    5d28:	11 f0       	breq	.+4      	; 0x5d2e <TWI_ReadPacket+0x60>
    5d2a:	60 e0       	ldi	r22, 0x00	; 0
    5d2c:	70 e0       	ldi	r23, 0x00	; 0
    5d2e:	c8 01       	movw	r24, r16
    5d30:	b0 df       	rcall	.-160    	; 0x5c92 <TWI_ReceiveByte>
    5d32:	c1 50       	subi	r28, 0x01	; 1
    5d34:	89 2b       	or	r24, r25
    5d36:	11 f0       	breq	.+4      	; 0x5d3c <TWI_ReadPacket+0x6e>
    5d38:	87 01       	movw	r16, r14
    5d3a:	ed cf       	rjmp	.-38     	; 0x5d16 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5d3c:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d3e:	84 e9       	ldi	r24, 0x94	; 148
    5d40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5d44:	8d 2f       	mov	r24, r29
    5d46:	cd b7       	in	r28, 0x3d	; 61
    5d48:	de b7       	in	r29, 0x3e	; 62
    5d4a:	eb e0       	ldi	r30, 0x0B	; 11
    5d4c:	0c 94 28 ed 	jmp	0x1da50	; 0x1da50 <__epilogue_restores__+0xe>

00005d50 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5d50:	a0 e0       	ldi	r26, 0x00	; 0
    5d52:	b0 e0       	ldi	r27, 0x00	; 0
    5d54:	ee ea       	ldi	r30, 0xAE	; 174
    5d56:	fe e2       	ldi	r31, 0x2E	; 46
    5d58:	0c 94 0e ed 	jmp	0x1da1c	; 0x1da1c <__prologue_saves__+0x12>
    5d5c:	b4 2e       	mov	r11, r20
    5d5e:	f5 2e       	mov	r15, r21
    5d60:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5d62:	8e 7f       	andi	r24, 0xFE	; 254
    5d64:	22 df       	rcall	.-444    	; 0x5baa <TWI_StartTransmission>
    5d66:	d8 2f       	mov	r29, r24
    5d68:	81 11       	cpse	r24, r1
    5d6a:	1a c0       	rjmp	.+52     	; 0x5da0 <TWI_WritePacket+0x50>
    5d6c:	cb 2c       	mov	r12, r11
    5d6e:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5d70:	cc 23       	and	r28, r28
    5d72:	41 f0       	breq	.+16     	; 0x5d84 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5d74:	f6 01       	movw	r30, r12
    5d76:	81 91       	ld	r24, Z+
    5d78:	6f 01       	movw	r12, r30
    5d7a:	77 df       	rcall	.-274    	; 0x5c6a <TWI_SendByte>
    5d7c:	c1 50       	subi	r28, 0x01	; 1
    5d7e:	89 2b       	or	r24, r25
    5d80:	b9 f7       	brne	.-18     	; 0x5d70 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d82:	d5 e0       	ldi	r29, 0x05	; 5
    5d84:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5d86:	ee 20       	and	r14, r14
    5d88:	41 f0       	breq	.+16     	; 0x5d9a <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5d8a:	f6 01       	movw	r30, r12
    5d8c:	81 91       	ld	r24, Z+
    5d8e:	6f 01       	movw	r12, r30
    5d90:	6c df       	rcall	.-296    	; 0x5c6a <TWI_SendByte>
    5d92:	ea 94       	dec	r14
    5d94:	89 2b       	or	r24, r25
    5d96:	b9 f7       	brne	.-18     	; 0x5d86 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d98:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d9a:	84 e9       	ldi	r24, 0x94	; 148
    5d9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5da0:	8d 2f       	mov	r24, r29
    5da2:	cd b7       	in	r28, 0x3d	; 61
    5da4:	de b7       	in	r29, 0x3e	; 62
    5da6:	e9 e0       	ldi	r30, 0x09	; 9
    5da8:	0c 94 2a ed 	jmp	0x1da54	; 0x1da54 <__epilogue_restores__+0x12>

00005dac <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5dac:	6a e0       	ldi	r22, 0x0A	; 10
    5dae:	0e 94 50 ec 	call	0x1d8a0	; 0x1d8a0 <__udivmodqi4>
    5db2:	82 95       	swap	r24
    5db4:	80 7f       	andi	r24, 0xF0	; 240
    5db6:	89 2b       	or	r24, r25
    5db8:	08 95       	ret

00005dba <BCDtoBIN>:
    5dba:	98 2f       	mov	r25, r24
    5dbc:	92 95       	swap	r25
    5dbe:	9f 70       	andi	r25, 0x0F	; 15
    5dc0:	8f 70       	andi	r24, 0x0F	; 15
    5dc2:	2a e0       	ldi	r18, 0x0A	; 10
    5dc4:	92 9f       	mul	r25, r18
    5dc6:	80 0d       	add	r24, r0
    5dc8:	11 24       	eor	r1, r1
    5dca:	08 95       	ret

00005dcc <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5dcc:	cf 92       	push	r12
    5dce:	df 92       	push	r13
    5dd0:	ef 92       	push	r14
    5dd2:	0f 93       	push	r16
    5dd4:	1f 93       	push	r17
    5dd6:	cf 93       	push	r28
    5dd8:	df 93       	push	r29
    5dda:	00 d0       	rcall	.+0      	; 0x5ddc <rtc_run+0x10>
    5ddc:	1f 92       	push	r1
    5dde:	cd b7       	in	r28, 0x3d	; 61
    5de0:	de b7       	in	r29, 0x3e	; 62
    5de2:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5de4:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5de6:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5de8:	ee 24       	eor	r14, r14
    5dea:	e3 94       	inc	r14
    5dec:	8e 01       	movw	r16, r28
    5dee:	0f 5f       	subi	r16, 0xFF	; 255
    5df0:	1f 4f       	sbci	r17, 0xFF	; 255
    5df2:	21 e0       	ldi	r18, 0x01	; 1
    5df4:	ae 01       	movw	r20, r28
    5df6:	4e 5f       	subi	r20, 0xFE	; 254
    5df8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dfa:	64 e1       	ldi	r22, 0x14	; 20
    5dfc:	81 ed       	ldi	r24, 0xD1	; 209
    5dfe:	67 df       	rcall	.-306    	; 0x5cce <TWI_ReadPacket>
    5e00:	88 23       	and	r24, r24
    5e02:	19 f0       	breq	.+6      	; 0x5e0a <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5e04:	84 eb       	ldi	r24, 0xB4	; 180
    5e06:	94 e0       	ldi	r25, 0x04	; 4
    5e08:	2a c0       	rjmp	.+84     	; 0x5e5e <rtc_run+0x92>
    5e0a:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5e0c:	9f ef       	ldi	r25, 0xFF	; 255
    5e0e:	c9 16       	cp	r12, r25
    5e10:	d9 06       	cpc	r13, r25
    5e12:	59 f4       	brne	.+22     	; 0x5e2a <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5e14:	08 2e       	mov	r0, r24
    5e16:	00 0c       	add	r0, r0
    5e18:	99 0b       	sbc	r25, r25
    5e1a:	80 95       	com	r24
    5e1c:	90 95       	com	r25
    5e1e:	89 2f       	mov	r24, r25
    5e20:	88 1f       	adc	r24, r24
    5e22:	88 27       	eor	r24, r24
    5e24:	88 1f       	adc	r24, r24
    5e26:	90 e0       	ldi	r25, 0x00	; 0
    5e28:	26 c0       	rjmp	.+76     	; 0x5e76 <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5e2a:	8f 77       	andi	r24, 0x7F	; 127
    5e2c:	c1 14       	cp	r12, r1
    5e2e:	d1 04       	cpc	r13, r1
    5e30:	11 f4       	brne	.+4      	; 0x5e36 <rtc_run+0x6a>
    5e32:	90 e8       	ldi	r25, 0x80	; 128
    5e34:	01 c0       	rjmp	.+2      	; 0x5e38 <rtc_run+0x6c>
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	89 2b       	or	r24, r25
    5e3a:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5e3c:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e3e:	ee 24       	eor	r14, r14
    5e40:	e3 94       	inc	r14
    5e42:	8e 01       	movw	r16, r28
    5e44:	0f 5f       	subi	r16, 0xFF	; 255
    5e46:	1f 4f       	sbci	r17, 0xFF	; 255
    5e48:	21 e0       	ldi	r18, 0x01	; 1
    5e4a:	ae 01       	movw	r20, r28
    5e4c:	4d 5f       	subi	r20, 0xFD	; 253
    5e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e50:	64 e1       	ldi	r22, 0x14	; 20
    5e52:	80 ed       	ldi	r24, 0xD0	; 208
    5e54:	7d df       	rcall	.-262    	; 0x5d50 <TWI_WritePacket>
    5e56:	88 23       	and	r24, r24
    5e58:	69 f0       	breq	.+26     	; 0x5e74 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5e5a:	8d e9       	ldi	r24, 0x9D	; 157
    5e5c:	94 e0       	ldi	r25, 0x04	; 4
    5e5e:	1f 92       	push	r1
    5e60:	9f 93       	push	r25
    5e62:	8f 93       	push	r24
    5e64:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
    5e68:	0f 90       	pop	r0
    5e6a:	0f 90       	pop	r0
    5e6c:	0f 90       	pop	r0
    5e6e:	8f ef       	ldi	r24, 0xFF	; 255
    5e70:	9f ef       	ldi	r25, 0xFF	; 255
    5e72:	01 c0       	rjmp	.+2      	; 0x5e76 <rtc_run+0xaa>
    5e74:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5e76:	0f 90       	pop	r0
    5e78:	0f 90       	pop	r0
    5e7a:	0f 90       	pop	r0
    5e7c:	df 91       	pop	r29
    5e7e:	cf 91       	pop	r28
    5e80:	1f 91       	pop	r17
    5e82:	0f 91       	pop	r16
    5e84:	ef 90       	pop	r14
    5e86:	df 90       	pop	r13
    5e88:	cf 90       	pop	r12
    5e8a:	08 95       	ret

00005e8c <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5e8c:	ef 92       	push	r14
    5e8e:	0f 93       	push	r16
    5e90:	1f 93       	push	r17
    5e92:	cf 93       	push	r28
    5e94:	df 93       	push	r29
    5e96:	cd b7       	in	r28, 0x3d	; 61
    5e98:	de b7       	in	r29, 0x3e	; 62
    5e9a:	29 97       	sbiw	r28, 0x09	; 9
    5e9c:	0f b6       	in	r0, 0x3f	; 63
    5e9e:	f8 94       	cli
    5ea0:	de bf       	out	0x3e, r29	; 62
    5ea2:	0f be       	out	0x3f, r0	; 63
    5ea4:	cd bf       	out	0x3d, r28	; 61
    5ea6:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5ea8:	fc 01       	movw	r30, r24
    5eaa:	80 81       	ld	r24, Z
    5eac:	7f df       	rcall	.-258    	; 0x5dac <BINtoBCD>
    5eae:	8f 77       	andi	r24, 0x7F	; 127
    5eb0:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5eb2:	f8 01       	movw	r30, r16
    5eb4:	82 81       	ldd	r24, Z+2	; 0x02
    5eb6:	7a df       	rcall	.-268    	; 0x5dac <BINtoBCD>
    5eb8:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5eba:	8a 83       	std	Y+2, r24	; 0x02
    5ebc:	f8 01       	movw	r30, r16
    5ebe:	84 81       	ldd	r24, Z+4	; 0x04
    5ec0:	75 df       	rcall	.-278    	; 0x5dac <BINtoBCD>
    5ec2:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5ec4:	8b 83       	std	Y+3, r24	; 0x03
    5ec6:	f8 01       	movw	r30, r16
    5ec8:	84 85       	ldd	r24, Z+12	; 0x0c
    5eca:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5ecc:	8f 5f       	subi	r24, 0xFF	; 255
    5ece:	8c 83       	std	Y+4, r24	; 0x04
    5ed0:	86 81       	ldd	r24, Z+6	; 0x06
    5ed2:	6c df       	rcall	.-296    	; 0x5dac <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5ed4:	8f 73       	andi	r24, 0x3F	; 63
    5ed6:	8d 83       	std	Y+5, r24	; 0x05
    5ed8:	f8 01       	movw	r30, r16
    5eda:	80 85       	ldd	r24, Z+8	; 0x08
    5edc:	8f 5f       	subi	r24, 0xFF	; 255
    5ede:	66 df       	rcall	.-308    	; 0x5dac <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5ee0:	8f 71       	andi	r24, 0x1F	; 31
    5ee2:	8e 83       	std	Y+6, r24	; 0x06
    5ee4:	f8 01       	movw	r30, r16
    5ee6:	82 85       	ldd	r24, Z+10	; 0x0a
    5ee8:	84 56       	subi	r24, 0x64	; 100
    5eea:	60 df       	rcall	.-320    	; 0x5dac <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5eec:	8f 83       	std	Y+7, r24	; 0x07
    5eee:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5ef0:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5ef2:	19 86       	std	Y+9, r1	; 0x09
    5ef4:	88 e0       	ldi	r24, 0x08	; 8
    5ef6:	e8 2e       	mov	r14, r24
    5ef8:	8e 01       	movw	r16, r28
    5efa:	0f 5f       	subi	r16, 0xFF	; 255
    5efc:	1f 4f       	sbci	r17, 0xFF	; 255
    5efe:	21 e0       	ldi	r18, 0x01	; 1
    5f00:	ae 01       	movw	r20, r28
    5f02:	47 5f       	subi	r20, 0xF7	; 247
    5f04:	5f 4f       	sbci	r21, 0xFF	; 255
    5f06:	64 e1       	ldi	r22, 0x14	; 20
    5f08:	80 ed       	ldi	r24, 0xD0	; 208
    5f0a:	22 df       	rcall	.-444    	; 0x5d50 <TWI_WritePacket>
    5f0c:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5f0e:	61 f0       	breq	.+24     	; 0x5f28 <rtc_write+0x9c>
    5f10:	87 e5       	ldi	r24, 0x57	; 87
    5f12:	94 e0       	ldi	r25, 0x04	; 4
    5f14:	1f 92       	push	r1
    5f16:	9f 93       	push	r25
    5f18:	8f 93       	push	r24
    5f1a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0);
    5f1e:	0f 90       	pop	r0
    5f20:	0f 90       	pop	r0
    5f22:	0f 90       	pop	r0
    5f24:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5f26:	01 c0       	rjmp	.+2      	; 0x5f2a <rtc_write+0x9e>
}
    5f28:	81 e0       	ldi	r24, 0x01	; 1
    5f2a:	29 96       	adiw	r28, 0x09	; 9
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	df 91       	pop	r29
    5f38:	cf 91       	pop	r28
    5f3a:	1f 91       	pop	r17
    5f3c:	0f 91       	pop	r16
    5f3e:	ef 90       	pop	r14
    5f40:	08 95       	ret

00005f42 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5f42:	ad e0       	ldi	r26, 0x0D	; 13
    5f44:	b0 e0       	ldi	r27, 0x00	; 0
    5f46:	e7 ea       	ldi	r30, 0xA7	; 167
    5f48:	ff e2       	ldi	r31, 0x2F	; 47
    5f4a:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    5f4e:	6c 01       	movw	r12, r24
    5f50:	4a 87       	std	Y+10, r20	; 0x0a
    5f52:	5b 87       	std	Y+11, r21	; 0x0b
    5f54:	6c 87       	std	Y+12, r22	; 0x0c
    5f56:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5f58:	6a e2       	ldi	r22, 0x2A	; 42
    5f5a:	81 e0       	ldi	r24, 0x01	; 1
    5f5c:	16 de       	rcall	.-980    	; 0x5b8a <TWI_Init>

    if(!force)
    5f5e:	c1 14       	cp	r12, r1
    5f60:	d1 04       	cpc	r13, r1
    5f62:	09 f0       	breq	.+2      	; 0x5f66 <rtc_init+0x24>
    5f64:	42 c0       	rjmp	.+132    	; 0x5fea <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5f66:	8f ef       	ldi	r24, 0xFF	; 255
    5f68:	9f ef       	ldi	r25, 0xFF	; 255
    5f6a:	30 df       	rcall	.-416    	; 0x5dcc <rtc_run>
        if(state < 0)
    5f6c:	87 ff       	sbrs	r24, 7
    5f6e:	05 c0       	rjmp	.+10     	; 0x5f7a <rtc_init+0x38>
        {
            rtc_ok = 0;
    5f70:	10 92 1d 1a 	sts	0x1A1D, r1	; 0x801a1d <rtc_ok+0x1>
    5f74:	10 92 1c 1a 	sts	0x1A1C, r1	; 0x801a1c <rtc_ok>
    5f78:	24 c0       	rjmp	.+72     	; 0x5fc2 <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5f7a:	88 23       	and	r24, r24
    5f7c:	b1 f1       	breq	.+108    	; 0x5fea <rtc_init+0xa8>
    5f7e:	2d c0       	rjmp	.+90     	; 0x5fda <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5f80:	ce 01       	movw	r24, r28
    5f82:	01 96       	adiw	r24, 0x01	; 1
    5f84:	6c 01       	movw	r12, r24
    5f86:	88 e0       	ldi	r24, 0x08	; 8
    5f88:	f6 01       	movw	r30, r12
    5f8a:	11 92       	st	Z+, r1
    5f8c:	8a 95       	dec	r24
    5f8e:	e9 f7       	brne	.-6      	; 0x5f8a <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5f90:	98 e0       	ldi	r25, 0x08	; 8
    5f92:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5f94:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5f96:	88 e0       	ldi	r24, 0x08	; 8
    5f98:	e8 2e       	mov	r14, r24
    5f9a:	86 01       	movw	r16, r12
    5f9c:	21 e0       	ldi	r18, 0x01	; 1
    5f9e:	ae 01       	movw	r20, r28
    5fa0:	47 5f       	subi	r20, 0xF7	; 247
    5fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa4:	64 e1       	ldi	r22, 0x14	; 20
    5fa6:	80 ed       	ldi	r24, 0xD0	; 208
    5fa8:	d3 de       	rcall	.-602    	; 0x5d50 <TWI_WritePacket>
    5faa:	88 23       	and	r24, r24
    5fac:	61 f0       	breq	.+24     	; 0x5fc6 <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5fae:	88 e6       	ldi	r24, 0x68	; 104
    5fb0:	94 e0       	ldi	r25, 0x04	; 4
    5fb2:	1f 92       	push	r1
    5fb4:	9f 93       	push	r25
    5fb6:	8f 93       	push	r24
    5fb8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                return(0);
    5fbc:	0f 90       	pop	r0
    5fbe:	0f 90       	pop	r0
    5fc0:	0f 90       	pop	r0
    5fc2:	10 e0       	ldi	r17, 0x00	; 0
    5fc4:	2d c0       	rjmp	.+90     	; 0x6020 <rtc_init+0xde>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5fc6:	f8 e0       	ldi	r31, 0x08	; 8
    5fc8:	ff 0e       	add	r15, r31
    5fca:	80 e4       	ldi	r24, 0x40	; 64
    5fcc:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5fce:	e2 cf       	rjmp	.-60     	; 0x5f94 <rtc_init+0x52>
    5fd0:	81 e0       	ldi	r24, 0x01	; 1
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	fb de       	rcall	.-522    	; 0x5dcc <rtc_run>
    5fd6:	97 fd       	sbrc	r25, 7
    5fd8:	cb cf       	rjmp	.-106    	; 0x5f70 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	90 e0       	ldi	r25, 0x00	; 0
    5fde:	90 93 1d 1a 	sts	0x1A1D, r25	; 0x801a1d <rtc_ok+0x1>
    5fe2:	80 93 1c 1a 	sts	0x1A1C, r24	; 0x801a1c <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5fe6:	11 e0       	ldi	r17, 0x01	; 1
    5fe8:	1b c0       	rjmp	.+54     	; 0x6020 <rtc_init+0xde>
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	ee de       	rcall	.-548    	; 0x5dcc <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5ff0:	97 fd       	sbrc	r25, 7
    5ff2:	be cf       	rjmp	.-132    	; 0x5f70 <rtc_init+0x2e>
    5ff4:	ce 01       	movw	r24, r28
    5ff6:	0a 96       	adiw	r24, 0x0a	; 10
        if(!rtc_write(tmp))
    5ff8:	0e 94 62 38 	call	0x70c4	; 0x70c4 <gmtime>
    5ffc:	47 df       	rcall	.-370    	; 0x5e8c <rtc_write>
    5ffe:	18 2f       	mov	r17, r24
    6000:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    6002:	be cf       	rjmp	.-132    	; 0x5f80 <rtc_init+0x3e>
    6004:	84 e8       	ldi	r24, 0x84	; 132
    6006:	94 e0       	ldi	r25, 0x04	; 4
    6008:	1f 92       	push	r1
    600a:	9f 93       	push	r25
    600c:	8f 93       	push	r24
    600e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            rtc_ok = 0;
    6012:	10 92 1d 1a 	sts	0x1A1D, r1	; 0x801a1d <rtc_ok+0x1>
    6016:	10 92 1c 1a 	sts	0x1A1C, r1	; 0x801a1c <rtc_ok>
            return 0;
    601a:	0f 90       	pop	r0
    601c:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    601e:	0f 90       	pop	r0
    6020:	81 2f       	mov	r24, r17
    6022:	2d 96       	adiw	r28, 0x0d	; 13
    6024:	e8 e0       	ldi	r30, 0x08	; 8
    6026:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000602a <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    602a:	cf 92       	push	r12
    602c:	df 92       	push	r13
    602e:	ef 92       	push	r14
    6030:	0f 93       	push	r16
    6032:	1f 93       	push	r17
    6034:	cf 93       	push	r28
    6036:	df 93       	push	r29
    6038:	cd b7       	in	r28, 0x3d	; 61
    603a:	de b7       	in	r29, 0x3e	; 62
    603c:	29 97       	sbiw	r28, 0x09	; 9
    603e:	0f b6       	in	r0, 0x3f	; 63
    6040:	f8 94       	cli
    6042:	de bf       	out	0x3e, r29	; 62
    6044:	0f be       	out	0x3f, r0	; 63
    6046:	cd bf       	out	0x3d, r28	; 61
    6048:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    604a:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    604c:	88 e0       	ldi	r24, 0x08	; 8
    604e:	e8 2e       	mov	r14, r24
    6050:	8e 01       	movw	r16, r28
    6052:	0f 5f       	subi	r16, 0xFF	; 255
    6054:	1f 4f       	sbci	r17, 0xFF	; 255
    6056:	21 e0       	ldi	r18, 0x01	; 1
    6058:	ae 01       	movw	r20, r28
    605a:	47 5f       	subi	r20, 0xF7	; 247
    605c:	5f 4f       	sbci	r21, 0xFF	; 255
    605e:	64 e1       	ldi	r22, 0x14	; 20
    6060:	81 ed       	ldi	r24, 0xD1	; 209
    6062:	35 de       	rcall	.-918    	; 0x5cce <TWI_ReadPacket>
    6064:	88 23       	and	r24, r24
    6066:	61 f0       	breq	.+24     	; 0x6080 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    6068:	87 e4       	ldi	r24, 0x47	; 71
    606a:	94 e0       	ldi	r25, 0x04	; 4
    606c:	1f 92       	push	r1
    606e:	9f 93       	push	r25
    6070:	8f 93       	push	r24
    6072:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return 0;
    6076:	0f 90       	pop	r0
    6078:	0f 90       	pop	r0
    607a:	0f 90       	pop	r0
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	33 c0       	rjmp	.+102    	; 0x60e6 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    6080:	89 81       	ldd	r24, Y+1	; 0x01
    6082:	8f 77       	andi	r24, 0x7F	; 127
    6084:	9a de       	rcall	.-716    	; 0x5dba <BCDtoBIN>
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	f6 01       	movw	r30, r12
    608a:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    608c:	80 83       	st	Z, r24
    608e:	8a 81       	ldd	r24, Y+2	; 0x02
    6090:	8f 77       	andi	r24, 0x7F	; 127
    6092:	93 de       	rcall	.-730    	; 0x5dba <BCDtoBIN>
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    6098:	93 83       	std	Z+3, r25	; 0x03
    609a:	82 83       	std	Z+2, r24	; 0x02
    609c:	8b 81       	ldd	r24, Y+3	; 0x03
    609e:	8f 73       	andi	r24, 0x3F	; 63
    60a0:	8c de       	rcall	.-744    	; 0x5dba <BCDtoBIN>
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	f6 01       	movw	r30, r12
    60a6:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    60a8:	84 83       	std	Z+4, r24	; 0x04
    60aa:	8c 81       	ldd	r24, Y+4	; 0x04
    60ac:	87 70       	andi	r24, 0x07	; 7
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    60b2:	95 87       	std	Z+13, r25	; 0x0d
    60b4:	84 87       	std	Z+12, r24	; 0x0c
    60b6:	8d 81       	ldd	r24, Y+5	; 0x05
    60b8:	8f 73       	andi	r24, 0x3F	; 63
    60ba:	7f de       	rcall	.-770    	; 0x5dba <BCDtoBIN>
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    60c0:	97 83       	std	Z+7, r25	; 0x07
    60c2:	86 83       	std	Z+6, r24	; 0x06
    60c4:	8e 81       	ldd	r24, Y+6	; 0x06
    60c6:	8f 71       	andi	r24, 0x1F	; 31
    60c8:	78 de       	rcall	.-784    	; 0x5dba <BCDtoBIN>
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	01 97       	sbiw	r24, 0x01	; 1
    60ce:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    60d0:	91 87       	std	Z+9, r25	; 0x09
    60d2:	80 87       	std	Z+8, r24	; 0x08
    60d4:	8f 81       	ldd	r24, Y+7	; 0x07
    60d6:	71 de       	rcall	.-798    	; 0x5dba <BCDtoBIN>
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	8c 59       	subi	r24, 0x9C	; 156
    60dc:	9f 4f       	sbci	r25, 0xFF	; 255
    60de:	f6 01       	movw	r30, r12
    60e0:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    60e2:	82 87       	std	Z+10, r24	; 0x0a
}
    60e4:	81 e0       	ldi	r24, 0x01	; 1
    60e6:	29 96       	adiw	r28, 0x09	; 9
    60e8:	0f b6       	in	r0, 0x3f	; 63
    60ea:	f8 94       	cli
    60ec:	de bf       	out	0x3e, r29	; 62
    60ee:	0f be       	out	0x3f, r0	; 63
    60f0:	cd bf       	out	0x3d, r28	; 61
    60f2:	df 91       	pop	r29
    60f4:	cf 91       	pop	r28
    60f6:	1f 91       	pop	r17
    60f8:	0f 91       	pop	r16
    60fa:	ef 90       	pop	r14
    60fc:	df 90       	pop	r13
    60fe:	cf 90       	pop	r12
    6100:	08 95       	ret

00006102 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    6102:	64 e1       	ldi	r22, 0x14	; 20
    6104:	52 dd       	rcall	.-1372   	; 0x5baa <TWI_StartTransmission>
    6106:	81 11       	cpse	r24, r1
    6108:	07 c0       	rjmp	.+14     	; 0x6118 <I2C_Start+0x16>
    610a:	81 e0       	ldi	r24, 0x01	; 1
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    6112:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    6116:	04 c0       	rjmp	.+8      	; 0x6120 <I2C_Start+0x1e>
    6118:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    611c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    6120:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6124:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6128:	08 95       	ret

0000612a <I2C_Stop>:
    612a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    612e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6132:	89 2b       	or	r24, r25
    6134:	09 f0       	breq	.+2      	; 0x6138 <I2C_Stop+0xe>
    6136:	35 cd       	rjmp	.-1430   	; 0x5ba2 <TWI_StopTransmission>
    6138:	08 95       	ret

0000613a <I2C_Send>:
    613a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    613e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    6142:	21 15       	cp	r18, r1
    6144:	31 05       	cpc	r19, r1
    6146:	41 f0       	breq	.+16     	; 0x6158 <I2C_Send+0x1e>
    6148:	90 dd       	rcall	.-1248   	; 0x5c6a <TWI_SendByte>
    614a:	51 e0       	ldi	r21, 0x01	; 1
    614c:	40 e0       	ldi	r20, 0x00	; 0
    614e:	89 2b       	or	r24, r25
    6150:	09 f0       	breq	.+2      	; 0x6154 <I2C_Send+0x1a>
    6152:	50 e0       	ldi	r21, 0x00	; 0
    6154:	25 2f       	mov	r18, r21
    6156:	34 2f       	mov	r19, r20
    6158:	c9 01       	movw	r24, r18
    615a:	08 95       	ret

0000615c <LCD_putb>:
    615c:	cf 93       	push	r28
    615e:	c8 2f       	mov	r28, r24
    6160:	84 ee       	ldi	r24, 0xE4	; 228
    6162:	cf df       	rcall	.-98     	; 0x6102 <I2C_Start>
    6164:	89 2b       	or	r24, r25
    6166:	19 f4       	brne	.+6      	; 0x616e <LCD_putb+0x12>
    6168:	80 e0       	ldi	r24, 0x00	; 0
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	07 c0       	rjmp	.+14     	; 0x617c <LCD_putb+0x20>
    616e:	8c 2f       	mov	r24, r28
    6170:	e4 df       	rcall	.-56     	; 0x613a <I2C_Send>
    6172:	89 2b       	or	r24, r25
    6174:	c9 f3       	breq	.-14     	; 0x6168 <LCD_putb+0xc>
    6176:	d9 df       	rcall	.-78     	; 0x612a <I2C_Stop>
    6178:	81 e0       	ldi	r24, 0x01	; 1
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	cf 91       	pop	r28
    617e:	08 95       	ret

00006180 <LCD_command>:
    6180:	cf 93       	push	r28
    6182:	c8 2f       	mov	r28, r24
    6184:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6188:	bc df       	rcall	.-136    	; 0x6102 <I2C_Start>
    618a:	89 2b       	or	r24, r25
    618c:	51 f0       	breq	.+20     	; 0x61a2 <LCD_command+0x22>
    618e:	8c e7       	ldi	r24, 0x7C	; 124
    6190:	d4 df       	rcall	.-88     	; 0x613a <I2C_Send>
    6192:	8c 2f       	mov	r24, r28
    6194:	d2 df       	rcall	.-92     	; 0x613a <I2C_Send>
    6196:	c9 df       	rcall	.-110    	; 0x612a <I2C_Stop>
    6198:	6a e0       	ldi	r22, 0x0A	; 10
    619a:	70 e0       	ldi	r23, 0x00	; 0
    619c:	80 e0       	ldi	r24, 0x00	; 0
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	f5 d9       	rcall	.-3094   	; 0x558c <delayms>
    61a2:	cf 91       	pop	r28
    61a4:	08 95       	ret

000061a6 <LCD_specialCommand>:
    61a6:	cf 93       	push	r28
    61a8:	c8 2f       	mov	r28, r24
    61aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    61ae:	a9 df       	rcall	.-174    	; 0x6102 <I2C_Start>
    61b0:	89 2b       	or	r24, r25
    61b2:	51 f0       	breq	.+20     	; 0x61c8 <LCD_specialCommand+0x22>
    61b4:	8e ef       	ldi	r24, 0xFE	; 254
    61b6:	c1 df       	rcall	.-126    	; 0x613a <I2C_Send>
    61b8:	8c 2f       	mov	r24, r28
    61ba:	bf df       	rcall	.-130    	; 0x613a <I2C_Send>
    61bc:	b6 df       	rcall	.-148    	; 0x612a <I2C_Stop>
    61be:	62 e3       	ldi	r22, 0x32	; 50
    61c0:	70 e0       	ldi	r23, 0x00	; 0
    61c2:	80 e0       	ldi	r24, 0x00	; 0
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	e2 d9       	rcall	.-3132   	; 0x558c <delayms>
    61c8:	cf 91       	pop	r28
    61ca:	08 95       	ret

000061cc <LCD_setCursor>:
    61cc:	a8 e0       	ldi	r26, 0x08	; 8
    61ce:	b0 e0       	ldi	r27, 0x00	; 0
    61d0:	ec ee       	ldi	r30, 0xEC	; 236
    61d2:	f0 e3       	ldi	r31, 0x30	; 48
    61d4:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    61d8:	98 e0       	ldi	r25, 0x08	; 8
    61da:	eb e5       	ldi	r30, 0x5B	; 91
    61dc:	f2 e0       	ldi	r31, 0x02	; 2
    61de:	de 01       	movw	r26, r28
    61e0:	11 96       	adiw	r26, 0x01	; 1
    61e2:	01 90       	ld	r0, Z+
    61e4:	0d 92       	st	X+, r0
    61e6:	9a 95       	dec	r25
    61e8:	e1 f7       	brne	.-8      	; 0x61e2 <LCD_setCursor+0x16>
    61ea:	64 30       	cpi	r22, 0x04	; 4
    61ec:	08 f0       	brcs	.+2      	; 0x61f0 <LCD_setCursor+0x24>
    61ee:	63 e0       	ldi	r22, 0x03	; 3
    61f0:	fe 01       	movw	r30, r28
    61f2:	31 96       	adiw	r30, 0x01	; 1
    61f4:	e6 0f       	add	r30, r22
    61f6:	f1 1d       	adc	r31, r1
    61f8:	e6 0f       	add	r30, r22
    61fa:	f1 1d       	adc	r31, r1
    61fc:	90 81       	ld	r25, Z
    61fe:	89 0f       	add	r24, r25
    6200:	80 68       	ori	r24, 0x80	; 128
    6202:	d1 df       	rcall	.-94     	; 0x61a6 <LCD_specialCommand>
    6204:	28 96       	adiw	r28, 0x08	; 8
    6206:	e2 e0       	ldi	r30, 0x02	; 2
    6208:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0000620c <LCD_pos>:
    620c:	ea e0       	ldi	r30, 0x0A	; 10
    620e:	f1 e0       	ldi	r31, 0x01	; 1
    6210:	28 2f       	mov	r18, r24
    6212:	30 e0       	ldi	r19, 0x00	; 0
    6214:	31 83       	std	Z+1, r19	; 0x01
    6216:	20 83       	st	Z, r18
    6218:	26 2f       	mov	r18, r22
    621a:	30 e0       	ldi	r19, 0x00	; 0
    621c:	33 83       	std	Z+3, r19	; 0x03
    621e:	22 83       	std	Z+2, r18	; 0x02
    6220:	d5 cf       	rjmp	.-86     	; 0x61cc <LCD_setCursor>
    6222:	08 95       	ret

00006224 <LCD_clear>:
    6224:	8d e2       	ldi	r24, 0x2D	; 45
    6226:	ac df       	rcall	.-168    	; 0x6180 <LCD_command>
    6228:	60 e0       	ldi	r22, 0x00	; 0
    622a:	80 e0       	ldi	r24, 0x00	; 0
    622c:	ef df       	rcall	.-34     	; 0x620c <LCD_pos>
    622e:	6a e0       	ldi	r22, 0x0A	; 10
    6230:	70 e0       	ldi	r23, 0x00	; 0
    6232:	80 e0       	ldi	r24, 0x00	; 0
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	aa c9       	rjmp	.-3244   	; 0x558c <delayms>
    6238:	08 95       	ret

0000623a <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    623a:	1f 93       	push	r17
    623c:	cf 93       	push	r28
    623e:	df 93       	push	r29
    6240:	18 2f       	mov	r17, r24
    6242:	d6 2f       	mov	r29, r22
    6244:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    6246:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    624a:	5b df       	rcall	.-330    	; 0x6102 <I2C_Start>
    624c:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    624e:	81 f0       	breq	.+32     	; 0x6270 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6250:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6252:	73 df       	rcall	.-282    	; 0x613a <I2C_Send>
    6254:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    6256:	71 df       	rcall	.-286    	; 0x613a <I2C_Send>
    6258:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    625a:	6f df       	rcall	.-290    	; 0x613a <I2C_Send>
    625c:	8d 2f       	mov	r24, r29
  delayms(10);
    625e:	6d df       	rcall	.-294    	; 0x613a <I2C_Send>
    6260:	8c 2f       	mov	r24, r28
    6262:	6b df       	rcall	.-298    	; 0x613a <I2C_Send>
    6264:	62 df       	rcall	.-316    	; 0x612a <I2C_Stop>
    6266:	6a e0       	ldi	r22, 0x0A	; 10
    6268:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    626a:	80 e0       	ldi	r24, 0x00	; 0
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	8e d9       	rcall	.-3300   	; 0x558c <delayms>
    6270:	df 91       	pop	r29
    6272:	cf 91       	pop	r28
    6274:	1f 91       	pop	r17
    6276:	08 95       	ret

00006278 <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    6278:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    627c:	42 df       	rcall	.-380    	; 0x6102 <I2C_Start>
    627e:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6280:	61 f1       	breq	.+88     	; 0x62da <LCD_init+0x62>
    6282:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    6284:	5a df       	rcall	.-332    	; 0x613a <I2C_Send>
    6286:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    628a:	88 60       	ori	r24, 0x08	; 8
    628c:	56 df       	rcall	.-340    	; 0x613a <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    628e:	8e ef       	ldi	r24, 0xFE	; 254
    6290:	54 df       	rcall	.-344    	; 0x613a <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    6292:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    6296:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    6298:	50 df       	rcall	.-352    	; 0x613a <I2C_Send>
    629a:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    629c:	4e df       	rcall	.-356    	; 0x613a <I2C_Send>
    629e:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    62a0:	4c df       	rcall	.-360    	; 0x613a <I2C_Send>
    62a2:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    62a4:	4a df       	rcall	.-364    	; 0x613a <I2C_Send>
    62a6:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    62a8:	48 df       	rcall	.-368    	; 0x613a <I2C_Send>
    62aa:	8e ef       	ldi	r24, 0xFE	; 254
    62ac:	46 df       	rcall	.-372    	; 0x613a <I2C_Send>
    62ae:	80 e8       	ldi	r24, 0x80	; 128
    62b0:	44 df       	rcall	.-376    	; 0x613a <I2C_Send>
    62b2:	3b df       	rcall	.-394    	; 0x612a <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    62b4:	62 e3       	ldi	r22, 0x32	; 50
    62b6:	70 e0       	ldi	r23, 0x00	; 0
    62b8:	80 e0       	ldi	r24, 0x00	; 0
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	67 d9       	rcall	.-3378   	; 0x558c <delayms>

  lcd.xpos = 0;
    62be:	40 ec       	ldi	r20, 0xC0	; 192
    62c0:	60 ec       	ldi	r22, 0xC0	; 192
    62c2:	80 ec       	ldi	r24, 0xC0	; 192
    62c4:	ba df       	rcall	.-140    	; 0x623a <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    62c6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    62ca:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    62ce:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    62d2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    62d6:	81 e0       	ldi	r24, 0x01	; 1
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	08 95       	ret

000062dc <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    62e4:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    62e8:	21 97       	sbiw	r28, 0x01	; 1
    62ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    62ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    62f2:	c8 1b       	sub	r28, r24
    62f4:	d9 0b       	sbc	r29, r25
    62f6:	1c 16       	cp	r1, r28
    62f8:	1d 06       	cpc	r1, r29
    62fa:	24 f4       	brge	.+8      	; 0x6304 <lcd_cleareol+0x28>
    62fc:	80 e2       	ldi	r24, 0x20	; 32
    62fe:	2e df       	rcall	.-420    	; 0x615c <LCD_putb>
    6300:	21 97       	sbiw	r28, 0x01	; 1
    6302:	f9 cf       	rjmp	.-14     	; 0x62f6 <lcd_cleareol+0x1a>
    6304:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    6308:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    630c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6310:	01 97       	sbiw	r24, 0x01	; 1
    6312:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6316:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    631a:	78 df       	rcall	.-272    	; 0x620c <LCD_pos>
    631c:	df 91       	pop	r29
    631e:	cf 91       	pop	r28
    6320:	08 95       	ret

00006322 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6322:	cf 93       	push	r28
    6324:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    6326:	8f 37       	cpi	r24, 0x7F	; 127
    6328:	91 05       	cpc	r25, r1
    632a:	08 f0       	brcs	.+2      	; 0x632e <lcd_putch+0xc>
    632c:	50 c0       	rjmp	.+160    	; 0x63ce <lcd_putch+0xac>
    632e:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6330:	80 32       	cpi	r24, 0x20	; 32
    6332:	91 05       	cpc	r25, r1
    6334:	4c f1       	brlt	.+82     	; 0x6388 <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    6336:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    633a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    633e:	01 97       	sbiw	r24, 0x01	; 1
    6340:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    6344:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    6348:	82 1b       	sub	r24, r18
    634a:	93 0b       	sbc	r25, r19
    634c:	18 16       	cp	r1, r24
    634e:	19 06       	cpc	r1, r25
    6350:	7c f0       	brlt	.+30     	; 0x6370 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6352:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6356:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    635a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    635e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    6362:	01 96       	adiw	r24, 0x01	; 1
    6364:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    6368:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    636c:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    636e:	4e df       	rcall	.-356    	; 0x620c <LCD_pos>
    6370:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    6372:	f4 de       	rcall	.-536    	; 0x615c <LCD_putb>
    6374:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    6378:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    637c:	01 96       	adiw	r24, 0x01	; 1
    637e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6382:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    6386:	23 c0       	rjmp	.+70     	; 0x63ce <lcd_putch+0xac>
    6388:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    638a:	91 05       	cpc	r25, r1
    638c:	91 f4       	brne	.+36     	; 0x63b2 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    638e:	a6 df       	rcall	.-180    	; 0x62dc <lcd_cleareol>
    6390:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    6394:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    6398:	6f 5f       	subi	r22, 0xFF	; 255
    639a:	7f 4f       	sbci	r23, 0xFF	; 255
    639c:	63 70       	andi	r22, 0x03	; 3
    639e:	77 27       	eor	r23, r23
    63a0:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    63a4:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    63a8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    63ac:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    63b0:	0c c0       	rjmp	.+24     	; 0x63ca <lcd_putch+0xa8>
	{
		LCD_clear();
    63b2:	0c 97       	sbiw	r24, 0x0c	; 12
    63b4:	61 f4       	brne	.+24     	; 0x63ce <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    63b6:	36 df       	rcall	.-404    	; 0x6224 <LCD_clear>
    63b8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    63bc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    63c0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    63c4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    63c8:	60 e0       	ldi	r22, 0x00	; 0
    63ca:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    63cc:	1f df       	rcall	.-450    	; 0x620c <LCD_pos>
    63ce:	df 91       	pop	r29
    63d0:	cf 91       	pop	r28
    63d2:	08 95       	ret

000063d4 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    63d4:	fc 01       	movw	r30, r24
	p->sent++;
    63d6:	26 81       	ldd	r18, Z+6	; 0x06
    63d8:	37 81       	ldd	r19, Z+7	; 0x07
    63da:	2f 5f       	subi	r18, 0xFF	; 255
    63dc:	3f 4f       	sbci	r19, 0xFF	; 255
    63de:	37 83       	std	Z+7, r19	; 0x07
    63e0:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    63e2:	86 2f       	mov	r24, r22
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	9d cf       	rjmp	.-198    	; 0x6322 <lcd_putch>
    63e8:	08 95       	ret

000063ea <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    63ea:	a8 e0       	ldi	r26, 0x08	; 8
    63ec:	b0 e0       	ldi	r27, 0x00	; 0
    63ee:	eb ef       	ldi	r30, 0xFB	; 251
    63f0:	f1 e3       	ldi	r31, 0x31	; 49
    63f2:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    63f6:	9e 01       	movw	r18, r28
    63f8:	23 5f       	subi	r18, 0xF3	; 243
    63fa:	3f 4f       	sbci	r19, 0xFF	; 255
    63fc:	f9 01       	movw	r30, r18
    63fe:	41 91       	ld	r20, Z+
    6400:	51 91       	ld	r21, Z+
    6402:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6404:	8a ee       	ldi	r24, 0xEA	; 234
    6406:	91 e3       	ldi	r25, 0x31	; 49
    6408:	9a 83       	std	Y+2, r25	; 0x02
    640a:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    640c:	18 86       	std	Y+8, r1	; 0x08
    640e:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    6410:	60 e8       	ldi	r22, 0x80	; 128
    6412:	ce 01       	movw	r24, r28
    6414:	01 96       	adiw	r24, 0x01	; 1
    6416:	0e 94 99 42 	call	0x8532	; 0x8532 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    641a:	8f 81       	ldd	r24, Y+7	; 0x07
    641c:	98 85       	ldd	r25, Y+8	; 0x08
    641e:	28 96       	adiw	r28, 0x08	; 8
    6420:	e2 e0       	ldi	r30, 0x02	; 2
    6422:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00006426 <sep>:
    if(*str == ',' )
        ++str;

    *token = 0;
    return(str);
}
    6426:	84 e0       	ldi	r24, 0x04	; 4
    6428:	95 e0       	ldi	r25, 0x05	; 5
    642a:	1f 92       	push	r1
    642c:	9f 93       	push	r25
    642e:	8f 93       	push	r24
    6430:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    6434:	0f 90       	pop	r0
    6436:	0f 90       	pop	r0
    6438:	0f 90       	pop	r0
    643a:	08 95       	ret

0000643c <isupper>:
    643c:	9c 01       	movw	r18, r24
    643e:	21 54       	subi	r18, 0x41	; 65
    6440:	31 09       	sbc	r19, r1
    6442:	81 e0       	ldi	r24, 0x01	; 1
    6444:	90 e0       	ldi	r25, 0x00	; 0
    6446:	2a 31       	cpi	r18, 0x1A	; 26
    6448:	31 05       	cpc	r19, r1
    644a:	10 f0       	brcs	.+4      	; 0x6450 <isupper+0x14>
    644c:	80 e0       	ldi	r24, 0x00	; 0
    644e:	90 e0       	ldi	r25, 0x00	; 0
    6450:	08 95       	ret

00006452 <islower>:
    6452:	9c 01       	movw	r18, r24
    6454:	21 56       	subi	r18, 0x61	; 97
    6456:	31 09       	sbc	r19, r1
    6458:	81 e0       	ldi	r24, 0x01	; 1
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	2a 31       	cpi	r18, 0x1A	; 26
    645e:	31 05       	cpc	r19, r1
    6460:	10 f0       	brcs	.+4      	; 0x6466 <islower+0x14>
    6462:	80 e0       	ldi	r24, 0x00	; 0
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	08 95       	ret

00006468 <tolower>:
    6468:	cf 93       	push	r28
    646a:	df 93       	push	r29
    646c:	ec 01       	movw	r28, r24
    646e:	e6 df       	rcall	.-52     	; 0x643c <isupper>
    6470:	89 2b       	or	r24, r25
    6472:	19 f0       	breq	.+6      	; 0x647a <tolower+0x12>
    6474:	ce 01       	movw	r24, r28
    6476:	80 96       	adiw	r24, 0x20	; 32
    6478:	01 c0       	rjmp	.+2      	; 0x647c <tolower+0x14>
    647a:	ce 01       	movw	r24, r28
    647c:	df 91       	pop	r29
    647e:	cf 91       	pop	r28
    6480:	08 95       	ret

00006482 <toupper>:
    6482:	cf 93       	push	r28
    6484:	df 93       	push	r29
    6486:	ec 01       	movw	r28, r24
    6488:	e4 df       	rcall	.-56     	; 0x6452 <islower>
    648a:	89 2b       	or	r24, r25
    648c:	19 f0       	breq	.+6      	; 0x6494 <toupper+0x12>
    648e:	ce 01       	movw	r24, r28
    6490:	80 97       	sbiw	r24, 0x20	; 32
    6492:	01 c0       	rjmp	.+2      	; 0x6496 <toupper+0x14>
    6494:	ce 01       	movw	r24, r28
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	08 95       	ret

0000649c <strcpy>:
    649c:	fc 01       	movw	r30, r24
    649e:	db 01       	movw	r26, r22
    64a0:	2d 91       	ld	r18, X+
    64a2:	bd 01       	movw	r22, r26
    64a4:	01 96       	adiw	r24, 0x01	; 1
    64a6:	22 23       	and	r18, r18
    64a8:	11 f0       	breq	.+4      	; 0x64ae <strcpy+0x12>
    64aa:	20 83       	st	Z, r18
    64ac:	f7 cf       	rjmp	.-18     	; 0x649c <strcpy>
    64ae:	10 82       	st	Z, r1
    64b0:	08 95       	ret

000064b2 <strncpy>:
    64b2:	db 01       	movw	r26, r22
    64b4:	fc 01       	movw	r30, r24
    64b6:	2d 91       	ld	r18, X+
    64b8:	21 11       	cpse	r18, r1
    64ba:	03 c0       	rjmp	.+6      	; 0x64c2 <strncpy+0x10>
    64bc:	4e 0f       	add	r20, r30
    64be:	5f 1f       	adc	r21, r31
    64c0:	08 c0       	rjmp	.+16     	; 0x64d2 <strncpy+0x20>
    64c2:	41 15       	cp	r20, r1
    64c4:	51 05       	cpc	r21, r1
    64c6:	21 f0       	breq	.+8      	; 0x64d0 <strncpy+0x1e>
    64c8:	21 93       	st	Z+, r18
    64ca:	41 50       	subi	r20, 0x01	; 1
    64cc:	51 09       	sbc	r21, r1
    64ce:	f3 cf       	rjmp	.-26     	; 0x64b6 <strncpy+0x4>
    64d0:	08 95       	ret
    64d2:	4e 17       	cp	r20, r30
    64d4:	5f 07       	cpc	r21, r31
    64d6:	11 f0       	breq	.+4      	; 0x64dc <strncpy+0x2a>
    64d8:	11 92       	st	Z+, r1
    64da:	fb cf       	rjmp	.-10     	; 0x64d2 <strncpy+0x20>
    64dc:	08 95       	ret

000064de <strcat>:
    64de:	cf 93       	push	r28
    64e0:	df 93       	push	r29
    64e2:	d8 2f       	mov	r29, r24
    64e4:	c9 2f       	mov	r28, r25
    64e6:	28 2f       	mov	r18, r24
    64e8:	39 2f       	mov	r19, r25
    64ea:	c9 01       	movw	r24, r18
    64ec:	2f 5f       	subi	r18, 0xFF	; 255
    64ee:	3f 4f       	sbci	r19, 0xFF	; 255
    64f0:	fc 01       	movw	r30, r24
    64f2:	40 81       	ld	r20, Z
    64f4:	41 11       	cpse	r20, r1
    64f6:	f9 cf       	rjmp	.-14     	; 0x64ea <strcat+0xc>
    64f8:	d1 df       	rcall	.-94     	; 0x649c <strcpy>
    64fa:	8d 2f       	mov	r24, r29
    64fc:	9c 2f       	mov	r25, r28
    64fe:	df 91       	pop	r29
    6500:	cf 91       	pop	r28
    6502:	08 95       	ret

00006504 <reverse>:
    6504:	fc 01       	movw	r30, r24
    6506:	01 90       	ld	r0, Z+
    6508:	00 20       	and	r0, r0
    650a:	e9 f7       	brne	.-6      	; 0x6506 <reverse+0x2>
    650c:	31 97       	sbiw	r30, 0x01	; 1
    650e:	e8 1b       	sub	r30, r24
    6510:	f9 0b       	sbc	r31, r25
    6512:	af 01       	movw	r20, r30
    6514:	55 95       	asr	r21
    6516:	47 95       	ror	r20
    6518:	e8 0f       	add	r30, r24
    651a:	f9 1f       	adc	r31, r25
    651c:	dc 01       	movw	r26, r24
    651e:	9d 01       	movw	r18, r26
    6520:	28 1b       	sub	r18, r24
    6522:	39 0b       	sbc	r19, r25
    6524:	24 17       	cp	r18, r20
    6526:	35 07       	cpc	r19, r21
    6528:	2c f4       	brge	.+10     	; 0x6534 <reverse+0x30>
    652a:	22 91       	ld	r18, -Z
    652c:	3c 91       	ld	r19, X
    652e:	30 83       	st	Z, r19
    6530:	2d 93       	st	X+, r18
    6532:	f5 cf       	rjmp	.-22     	; 0x651e <reverse+0x1a>
    6534:	08 95       	ret

00006536 <strupper>:
    6536:	cf 93       	push	r28
    6538:	df 93       	push	r29
    653a:	ec 01       	movw	r28, r24
    653c:	88 81       	ld	r24, Y
    653e:	88 23       	and	r24, r24
    6540:	21 f0       	breq	.+8      	; 0x654a <strupper+0x14>
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	9e df       	rcall	.-196    	; 0x6482 <toupper>
    6546:	89 93       	st	Y+, r24
    6548:	f9 cf       	rjmp	.-14     	; 0x653c <strupper+0x6>
    654a:	df 91       	pop	r29
    654c:	cf 91       	pop	r28
    654e:	08 95       	ret

00006550 <trim_tail>:
    6550:	fc 01       	movw	r30, r24
    6552:	01 90       	ld	r0, Z+
    6554:	00 20       	and	r0, r0
    6556:	e9 f7       	brne	.-6      	; 0x6552 <trim_tail+0x2>
    6558:	31 97       	sbiw	r30, 0x01	; 1
    655a:	e8 17       	cp	r30, r24
    655c:	f9 07       	cpc	r31, r25
    655e:	29 f0       	breq	.+10     	; 0x656a <trim_tail+0x1a>
    6560:	22 91       	ld	r18, -Z
    6562:	21 32       	cpi	r18, 0x21	; 33
    6564:	10 f4       	brcc	.+4      	; 0x656a <trim_tail+0x1a>
    6566:	10 82       	st	Z, r1
    6568:	f8 cf       	rjmp	.-16     	; 0x655a <trim_tail+0xa>
    656a:	08 95       	ret

0000656c <skipspaces>:
    656c:	00 97       	sbiw	r24, 0x00	; 0
    656e:	39 f0       	breq	.+14     	; 0x657e <skipspaces+0x12>
    6570:	fc 01       	movw	r30, r24
    6572:	cf 01       	movw	r24, r30
    6574:	21 91       	ld	r18, Z+
    6576:	20 32       	cpi	r18, 0x20	; 32
    6578:	e1 f3       	breq	.-8      	; 0x6572 <skipspaces+0x6>
    657a:	29 30       	cpi	r18, 0x09	; 9
    657c:	d1 f3       	breq	.-12     	; 0x6572 <skipspaces+0x6>
    657e:	08 95       	ret

00006580 <strcmp>:
    6580:	dc 01       	movw	r26, r24
    6582:	fb 01       	movw	r30, r22
    6584:	2d 91       	ld	r18, X+
    6586:	41 91       	ld	r20, Z+
    6588:	50 e0       	ldi	r21, 0x00	; 0
    658a:	30 e0       	ldi	r19, 0x00	; 0
    658c:	c9 01       	movw	r24, r18
    658e:	84 1b       	sub	r24, r20
    6590:	95 0b       	sbc	r25, r21
    6592:	11 f4       	brne	.+4      	; 0x6598 <strcmp+0x18>
    6594:	45 2b       	or	r20, r21
    6596:	b1 f7       	brne	.-20     	; 0x6584 <strcmp+0x4>
    6598:	08 95       	ret

0000659a <strncmp>:
    659a:	fc 01       	movw	r30, r24
    659c:	db 01       	movw	r26, r22
    659e:	48 0f       	add	r20, r24
    65a0:	59 1f       	adc	r21, r25
    65a2:	e4 17       	cp	r30, r20
    65a4:	f5 07       	cpc	r31, r21
    65a6:	59 f0       	breq	.+22     	; 0x65be <strncmp+0x24>
    65a8:	21 91       	ld	r18, Z+
    65aa:	6d 91       	ld	r22, X+
    65ac:	70 e0       	ldi	r23, 0x00	; 0
    65ae:	30 e0       	ldi	r19, 0x00	; 0
    65b0:	c9 01       	movw	r24, r18
    65b2:	86 1b       	sub	r24, r22
    65b4:	97 0b       	sbc	r25, r23
    65b6:	29 f4       	brne	.+10     	; 0x65c2 <strncmp+0x28>
    65b8:	67 2b       	or	r22, r23
    65ba:	99 f7       	brne	.-26     	; 0x65a2 <strncmp+0x8>
    65bc:	02 c0       	rjmp	.+4      	; 0x65c2 <strncmp+0x28>
    65be:	80 e0       	ldi	r24, 0x00	; 0
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	08 95       	ret

000065c4 <strcasecmp>:
    65c4:	ef 92       	push	r14
    65c6:	ff 92       	push	r15
    65c8:	0f 93       	push	r16
    65ca:	1f 93       	push	r17
    65cc:	cf 93       	push	r28
    65ce:	df 93       	push	r29
    65d0:	7c 01       	movw	r14, r24
    65d2:	8b 01       	movw	r16, r22
    65d4:	f7 01       	movw	r30, r14
    65d6:	81 91       	ld	r24, Z+
    65d8:	7f 01       	movw	r14, r30
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	52 df       	rcall	.-348    	; 0x6482 <toupper>
    65de:	ec 01       	movw	r28, r24
    65e0:	f8 01       	movw	r30, r16
    65e2:	81 91       	ld	r24, Z+
    65e4:	8f 01       	movw	r16, r30
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	4c df       	rcall	.-360    	; 0x6482 <toupper>
    65ea:	9c 01       	movw	r18, r24
    65ec:	ce 01       	movw	r24, r28
    65ee:	82 1b       	sub	r24, r18
    65f0:	93 0b       	sbc	r25, r19
    65f2:	11 f4       	brne	.+4      	; 0x65f8 <strcasecmp+0x34>
    65f4:	23 2b       	or	r18, r19
    65f6:	71 f7       	brne	.-36     	; 0x65d4 <strcasecmp+0x10>
    65f8:	cd b7       	in	r28, 0x3d	; 61
    65fa:	de b7       	in	r29, 0x3e	; 62
    65fc:	e6 e0       	ldi	r30, 0x06	; 6
    65fe:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00006602 <strncasecmp>:
    6602:	a0 e0       	ldi	r26, 0x00	; 0
    6604:	b0 e0       	ldi	r27, 0x00	; 0
    6606:	e7 e0       	ldi	r30, 0x07	; 7
    6608:	f3 e3       	ldi	r31, 0x33	; 51
    660a:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    660e:	8c 01       	movw	r16, r24
    6610:	7b 01       	movw	r14, r22
    6612:	6c 01       	movw	r12, r24
    6614:	c4 0e       	add	r12, r20
    6616:	d5 1e       	adc	r13, r21
    6618:	0c 15       	cp	r16, r12
    661a:	1d 05       	cpc	r17, r13
    661c:	99 f0       	breq	.+38     	; 0x6644 <strncasecmp+0x42>
    661e:	f8 01       	movw	r30, r16
    6620:	81 91       	ld	r24, Z+
    6622:	8f 01       	movw	r16, r30
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	2d df       	rcall	.-422    	; 0x6482 <toupper>
    6628:	ec 01       	movw	r28, r24
    662a:	f7 01       	movw	r30, r14
    662c:	81 91       	ld	r24, Z+
    662e:	7f 01       	movw	r14, r30
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	27 df       	rcall	.-434    	; 0x6482 <toupper>
    6634:	9c 01       	movw	r18, r24
    6636:	ce 01       	movw	r24, r28
    6638:	82 1b       	sub	r24, r18
    663a:	93 0b       	sbc	r25, r19
    663c:	29 f4       	brne	.+10     	; 0x6648 <strncasecmp+0x46>
    663e:	23 2b       	or	r18, r19
    6640:	59 f7       	brne	.-42     	; 0x6618 <strncasecmp+0x16>
    6642:	02 c0       	rjmp	.+4      	; 0x6648 <strncasecmp+0x46>
    6644:	80 e0       	ldi	r24, 0x00	; 0
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	cd b7       	in	r28, 0x3d	; 61
    664a:	de b7       	in	r29, 0x3e	; 62
    664c:	e8 e0       	ldi	r30, 0x08	; 8
    664e:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

00006652 <MATCH>:
    6652:	cf 93       	push	r28
    6654:	df 93       	push	r29
    6656:	fb 01       	movw	r30, r22
    6658:	01 90       	ld	r0, Z+
    665a:	00 20       	and	r0, r0
    665c:	e9 f7       	brne	.-6      	; 0x6658 <MATCH+0x6>
    665e:	31 97       	sbiw	r30, 0x01	; 1
    6660:	ef 01       	movw	r28, r30
    6662:	c6 1b       	sub	r28, r22
    6664:	d7 0b       	sbc	r29, r23
    6666:	8c df       	rcall	.-232    	; 0x6580 <strcmp>
    6668:	89 2b       	or	r24, r25
    666a:	11 f4       	brne	.+4      	; 0x6670 <MATCH+0x1e>
    666c:	ce 01       	movw	r24, r28
    666e:	02 c0       	rjmp	.+4      	; 0x6674 <MATCH+0x22>
    6670:	80 e0       	ldi	r24, 0x00	; 0
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	df 91       	pop	r29
    6676:	cf 91       	pop	r28
    6678:	08 95       	ret

0000667a <MATCHARGS>:
    667a:	ef 92       	push	r14
    667c:	ff 92       	push	r15
    667e:	0f 93       	push	r16
    6680:	1f 93       	push	r17
    6682:	cf 93       	push	r28
    6684:	df 93       	push	r29
    6686:	f6 2e       	mov	r15, r22
    6688:	e7 2e       	mov	r14, r23
    668a:	ea 01       	movw	r28, r20
    668c:	89 01       	movw	r16, r18
    668e:	e1 df       	rcall	.-62     	; 0x6652 <MATCH>
    6690:	00 97       	sbiw	r24, 0x00	; 0
    6692:	e9 f0       	breq	.+58     	; 0x66ce <MATCHARGS+0x54>
    6694:	0c 17       	cp	r16, r28
    6696:	1d 07       	cpc	r17, r29
    6698:	c4 f4       	brge	.+48     	; 0x66ca <MATCHARGS+0x50>
    669a:	1f 93       	push	r17
    669c:	0f 93       	push	r16
    669e:	df 93       	push	r29
    66a0:	cf 93       	push	r28
    66a2:	ef 92       	push	r14
    66a4:	ff 92       	push	r15
    66a6:	8e ed       	ldi	r24, 0xDE	; 222
    66a8:	94 e0       	ldi	r25, 0x04	; 4
    66aa:	1f 92       	push	r1
    66ac:	9f 93       	push	r25
    66ae:	8f 93       	push	r24
    66b0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    66b4:	8d b7       	in	r24, 0x3d	; 61
    66b6:	9e b7       	in	r25, 0x3e	; 62
    66b8:	09 96       	adiw	r24, 0x09	; 9
    66ba:	0f b6       	in	r0, 0x3f	; 63
    66bc:	f8 94       	cli
    66be:	9e bf       	out	0x3e, r25	; 62
    66c0:	0f be       	out	0x3f, r0	; 63
    66c2:	8d bf       	out	0x3d, r24	; 61
    66c4:	80 e0       	ldi	r24, 0x00	; 0
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	02 c0       	rjmp	.+4      	; 0x66ce <MATCHARGS+0x54>
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	cd b7       	in	r28, 0x3d	; 61
    66d0:	de b7       	in	r29, 0x3e	; 62
    66d2:	e6 e0       	ldi	r30, 0x06	; 6
    66d4:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

000066d8 <MATCHI>:
    66d8:	cf 93       	push	r28
    66da:	df 93       	push	r29
    66dc:	fb 01       	movw	r30, r22
    66de:	01 90       	ld	r0, Z+
    66e0:	00 20       	and	r0, r0
    66e2:	e9 f7       	brne	.-6      	; 0x66de <MATCHI+0x6>
    66e4:	31 97       	sbiw	r30, 0x01	; 1
    66e6:	ef 01       	movw	r28, r30
    66e8:	c6 1b       	sub	r28, r22
    66ea:	d7 0b       	sbc	r29, r23
    66ec:	6b df       	rcall	.-298    	; 0x65c4 <strcasecmp>
    66ee:	89 2b       	or	r24, r25
    66f0:	11 f4       	brne	.+4      	; 0x66f6 <MATCHI+0x1e>
    66f2:	ce 01       	movw	r24, r28
    66f4:	02 c0       	rjmp	.+4      	; 0x66fa <MATCHI+0x22>
    66f6:	80 e0       	ldi	r24, 0x00	; 0
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	df 91       	pop	r29
    66fc:	cf 91       	pop	r28
    66fe:	08 95       	ret

00006700 <MATCHI_LEN>:
    6700:	cf 93       	push	r28
    6702:	df 93       	push	r29
    6704:	00 97       	sbiw	r24, 0x00	; 0
    6706:	89 f0       	breq	.+34     	; 0x672a <MATCHI_LEN+0x2a>
    6708:	61 15       	cp	r22, r1
    670a:	71 05       	cpc	r23, r1
    670c:	71 f0       	breq	.+28     	; 0x672a <MATCHI_LEN+0x2a>
    670e:	eb 01       	movw	r28, r22
    6710:	09 90       	ld	r0, Y+
    6712:	00 20       	and	r0, r0
    6714:	e9 f7       	brne	.-6      	; 0x6710 <MATCHI_LEN+0x10>
    6716:	21 97       	sbiw	r28, 0x01	; 1
    6718:	c6 1b       	sub	r28, r22
    671a:	d7 0b       	sbc	r29, r23
    671c:	31 f0       	breq	.+12     	; 0x672a <MATCHI_LEN+0x2a>
    671e:	ae 01       	movw	r20, r28
    6720:	70 df       	rcall	.-288    	; 0x6602 <strncasecmp>
    6722:	89 2b       	or	r24, r25
    6724:	11 f4       	brne	.+4      	; 0x672a <MATCHI_LEN+0x2a>
    6726:	ce 01       	movw	r24, r28
    6728:	02 c0       	rjmp	.+4      	; 0x672e <MATCHI_LEN+0x2e>
    672a:	80 e0       	ldi	r24, 0x00	; 0
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	df 91       	pop	r29
    6730:	cf 91       	pop	r28
    6732:	08 95       	ret

00006734 <split_args>:
    6734:	a0 e0       	ldi	r26, 0x00	; 0
    6736:	b0 e0       	ldi	r27, 0x00	; 0
    6738:	e0 ea       	ldi	r30, 0xA0	; 160
    673a:	f3 e3       	ldi	r31, 0x33	; 51
    673c:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    6740:	dc 01       	movw	r26, r24
    6742:	6a 01       	movw	r12, r20
    6744:	8b 01       	movw	r16, r22
    6746:	fb 01       	movw	r30, r22
    6748:	80 e0       	ldi	r24, 0x00	; 0
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	8c 15       	cp	r24, r12
    674e:	9d 05       	cpc	r25, r13
    6750:	24 f4       	brge	.+8      	; 0x675a <split_args+0x26>
    6752:	11 92       	st	Z+, r1
    6754:	11 92       	st	Z+, r1
    6756:	01 96       	adiw	r24, 0x01	; 1
    6758:	f9 cf       	rjmp	.-14     	; 0x674c <split_args+0x18>
    675a:	c1 14       	cp	r12, r1
    675c:	d1 04       	cpc	r13, r1
    675e:	d9 f1       	breq	.+118    	; 0x67d6 <split_args+0xa2>
    6760:	10 97       	sbiw	r26, 0x00	; 0
    6762:	c9 f1       	breq	.+114    	; 0x67d6 <split_args+0xa2>
    6764:	ee 24       	eor	r14, r14
    6766:	e3 94       	inc	r14
    6768:	f1 2c       	mov	r15, r1
    676a:	c0 e0       	ldi	r28, 0x00	; 0
    676c:	d0 e0       	ldi	r29, 0x00	; 0
    676e:	8c 91       	ld	r24, X
    6770:	88 23       	and	r24, r24
    6772:	b1 f1       	breq	.+108    	; 0x67e0 <split_args+0xac>
    6774:	cc 15       	cp	r28, r12
    6776:	dd 05       	cpc	r29, r13
    6778:	9c f5       	brge	.+102    	; 0x67e0 <split_args+0xac>
    677a:	cd 01       	movw	r24, r26
    677c:	f7 de       	rcall	.-530    	; 0x656c <skipspaces>
    677e:	dc 01       	movw	r26, r24
    6780:	2c 91       	ld	r18, X
    6782:	22 23       	and	r18, r18
    6784:	69 f1       	breq	.+90     	; 0x67e0 <split_args+0xac>
    6786:	22 32       	cpi	r18, 0x22	; 34
    6788:	79 f4       	brne	.+30     	; 0x67a8 <split_args+0x74>
    678a:	fc 01       	movw	r30, r24
    678c:	31 96       	adiw	r30, 0x01	; 1
    678e:	d8 01       	movw	r26, r16
    6790:	ed 93       	st	X+, r30
    6792:	fc 93       	st	X, r31
    6794:	df 01       	movw	r26, r30
    6796:	80 81       	ld	r24, Z
    6798:	31 96       	adiw	r30, 0x01	; 1
    679a:	88 23       	and	r24, r24
    679c:	a9 f0       	breq	.+42     	; 0x67c8 <split_args+0x94>
    679e:	82 32       	cpi	r24, 0x22	; 34
    67a0:	c9 f7       	brne	.-14     	; 0x6794 <split_args+0x60>
    67a2:	1c 92       	st	X, r1
    67a4:	df 01       	movw	r26, r30
    67a6:	10 c0       	rjmp	.+32     	; 0x67c8 <split_args+0x94>
    67a8:	f8 01       	movw	r30, r16
    67aa:	91 83       	std	Z+1, r25	; 0x01
    67ac:	80 83       	st	Z, r24
    67ae:	fc 01       	movw	r30, r24
    67b0:	2e 2f       	mov	r18, r30
    67b2:	9f 2f       	mov	r25, r31
    67b4:	81 91       	ld	r24, Z+
    67b6:	3f ed       	ldi	r19, 0xDF	; 223
    67b8:	38 0f       	add	r19, r24
    67ba:	3e 35       	cpi	r19, 0x5E	; 94
    67bc:	c8 f3       	brcs	.-14     	; 0x67b0 <split_args+0x7c>
    67be:	88 23       	and	r24, r24
    67c0:	69 f0       	breq	.+26     	; 0x67dc <split_args+0xa8>
    67c2:	a2 2f       	mov	r26, r18
    67c4:	b9 2f       	mov	r27, r25
    67c6:	1d 92       	st	X+, r1
    67c8:	21 96       	adiw	r28, 0x01	; 1
    67ca:	ff ef       	ldi	r31, 0xFF	; 255
    67cc:	ef 1a       	sub	r14, r31
    67ce:	ff 0a       	sbc	r15, r31
    67d0:	0e 5f       	subi	r16, 0xFE	; 254
    67d2:	1f 4f       	sbci	r17, 0xFF	; 255
    67d4:	cc cf       	rjmp	.-104    	; 0x676e <split_args+0x3a>
    67d6:	80 e0       	ldi	r24, 0x00	; 0
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	03 c0       	rjmp	.+6      	; 0x67e2 <split_args+0xae>
    67dc:	c7 01       	movw	r24, r14
    67de:	01 c0       	rjmp	.+2      	; 0x67e2 <split_args+0xae>
    67e0:	ce 01       	movw	r24, r28
    67e2:	cd b7       	in	r28, 0x3d	; 61
    67e4:	de b7       	in	r29, 0x3e	; 62
    67e6:	e8 e0       	ldi	r30, 0x08	; 8
    67e8:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

000067ec <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    67ec:	ef 92       	push	r14
    67ee:	ff 92       	push	r15
    67f0:	0f 93       	push	r16
    67f2:	1f 93       	push	r17
    67f4:	cf 93       	push	r28
    67f6:	df 93       	push	r29
    67f8:	7c 01       	movw	r14, r24
    int patlen;
    int len;
    char *ptr;

    ptr = skipspaces(str);
    67fa:	8b 01       	movw	r16, r22
    67fc:	b7 de       	rcall	.-658    	; 0x656c <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    67fe:	9c 01       	movw	r18, r24
    6800:	fc 01       	movw	r30, r24
    6802:	ef 01       	movw	r28, r30
    6804:	c2 1b       	sub	r28, r18
    6806:	d3 0b       	sbc	r29, r19
    6808:	91 91       	ld	r25, Z+
    680a:	91 52       	subi	r25, 0x21	; 33
    680c:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    680e:	c8 f3       	brcs	.-14     	; 0x6802 <token+0x16>
    6810:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    6812:	91 f0       	breq	.+36     	; 0x6838 <token+0x4c>
    6814:	f8 01       	movw	r30, r16
    6816:	01 90       	ld	r0, Z+
    6818:	00 20       	and	r0, r0
    681a:	e9 f7       	brne	.-6      	; 0x6816 <token+0x2a>
    681c:	31 97       	sbiw	r30, 0x01	; 1
    681e:	e0 1b       	sub	r30, r16

    if(len != patlen)
    6820:	f1 0b       	sbc	r31, r17
    6822:	ec 17       	cp	r30, r28
    6824:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    6826:	31 f4       	brne	.+12     	; 0x6834 <token+0x48>
    6828:	ae 01       	movw	r20, r28
    682a:	b8 01       	movw	r22, r16
    682c:	c7 01       	movw	r24, r14
    682e:	b5 de       	rcall	.-662    	; 0x659a <strncmp>
    6830:	89 2b       	or	r24, r25
        ++len;
        ++ptr;
    }

    if(!len)
        return(0);
    6832:	11 f0       	breq	.+4      	; 0x6838 <token+0x4c>
    6834:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6836:	d0 e0       	ldi	r29, 0x00	; 0
    6838:	ce 01       	movw	r24, r28
    683a:	cd b7       	in	r28, 0x3d	; 61
    683c:	de b7       	in	r29, 0x3e	; 62
    683e:	e6 e0       	ldi	r30, 0x06	; 6
    6840:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00006844 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    6844:	a2 e0       	ldi	r26, 0x02	; 2
    6846:	b0 e0       	ldi	r27, 0x00	; 0
    6848:	e8 e2       	ldi	r30, 0x28	; 40
    684a:	f4 e3       	ldi	r31, 0x34	; 52
    684c:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    int ret;
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    6850:	8d de       	rcall	.-742    	; 0x656c <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6852:	8c 01       	movw	r16, r24
    6854:	68 e1       	ldi	r22, 0x18	; 24
    6856:	77 e0       	ldi	r23, 0x07	; 7
    6858:	53 df       	rcall	.-346    	; 0x6700 <MATCHI_LEN>
    685a:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    685c:	29 f0       	breq	.+10     	; 0x6868 <get_value+0x24>
    685e:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6860:	19 1f       	adc	r17, r25
    6862:	40 e1       	ldi	r20, 0x10	; 16
    6864:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6866:	18 c0       	rjmp	.+48     	; 0x6898 <get_value+0x54>
    6868:	6b e1       	ldi	r22, 0x1B	; 27
    686a:	77 e0       	ldi	r23, 0x07	; 7
    686c:	c8 01       	movw	r24, r16
    686e:	48 df       	rcall	.-368    	; 0x6700 <MATCHI_LEN>
    6870:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    6872:	29 f0       	breq	.+10     	; 0x687e <get_value+0x3a>
    6874:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6876:	19 1f       	adc	r17, r25
    6878:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    687a:	50 e0       	ldi	r21, 0x00	; 0
    687c:	0d c0       	rjmp	.+26     	; 0x6898 <get_value+0x54>
    687e:	6e e1       	ldi	r22, 0x1E	; 30
    6880:	77 e0       	ldi	r23, 0x07	; 7
    6882:	c8 01       	movw	r24, r16
    6884:	3d df       	rcall	.-390    	; 0x6700 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6886:	00 97       	sbiw	r24, 0x00	; 0
    6888:	29 f0       	breq	.+10     	; 0x6894 <get_value+0x50>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    688a:	08 0f       	add	r16, r24
    688c:	19 1f       	adc	r17, r25
    688e:	42 e0       	ldi	r20, 0x02	; 2
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    base = 10;
    6890:	50 e0       	ldi	r21, 0x00	; 0
    6892:	02 c0       	rjmp	.+4      	; 0x6898 <get_value+0x54>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6894:	4a e0       	ldi	r20, 0x0A	; 10
    6896:	50 e0       	ldi	r21, 0x00	; 0
    6898:	be 01       	movw	r22, r28
    689a:	6f 5f       	subi	r22, 0xFF	; 255
    689c:	7f 4f       	sbci	r23, 0xFF	; 255
    689e:	c8 01       	movw	r24, r16
}
    68a0:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
    68a4:	22 96       	adiw	r28, 0x02	; 2
    68a6:	e4 e0       	ldi	r30, 0x04	; 4
    68a8:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

000068ac <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    68ac:	78 94       	sei
    68ae:	08 95       	ret

000068b0 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    68b0:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    68b2:	89 e0       	ldi	r24, 0x09	; 9
    68b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    68b8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    68bc:	8f e1       	ldi	r24, 0x1F	; 31
    68be:	9e e4       	ldi	r25, 0x4E	; 78
    68c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    68c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    68c8:	ef e6       	ldi	r30, 0x6F	; 111
    68ca:	f0 e0       	ldi	r31, 0x00	; 0
    68cc:	80 81       	ld	r24, Z
    68ce:	82 60       	ori	r24, 0x02	; 2
    68d0:	80 83       	st	Z, r24
    sei();
    68d2:	78 94       	sei
    68d4:	08 95       	ret

000068d6 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    68d6:	1f 92       	push	r1
    68d8:	0f 92       	push	r0
    68da:	0f b6       	in	r0, 0x3f	; 63
    68dc:	0f 92       	push	r0
    68de:	11 24       	eor	r1, r1
    68e0:	0b b6       	in	r0, 0x3b	; 59
    68e2:	0f 92       	push	r0
    68e4:	2f 93       	push	r18
    68e6:	3f 93       	push	r19
    68e8:	4f 93       	push	r20
    68ea:	5f 93       	push	r21
    68ec:	6f 93       	push	r22
    68ee:	7f 93       	push	r23
    68f0:	8f 93       	push	r24
    68f2:	9f 93       	push	r25
    68f4:	af 93       	push	r26
    68f6:	bf 93       	push	r27
    68f8:	ef 93       	push	r30
    execute_timers();
    68fa:	ff 93       	push	r31
}
    68fc:	26 d2       	rcall	.+1100   	; 0x6d4a <execute_timers>
    68fe:	ff 91       	pop	r31
    6900:	ef 91       	pop	r30
    6902:	bf 91       	pop	r27
    6904:	af 91       	pop	r26
    6906:	9f 91       	pop	r25
    6908:	8f 91       	pop	r24
    690a:	7f 91       	pop	r23
    690c:	6f 91       	pop	r22
    690e:	5f 91       	pop	r21
    6910:	4f 91       	pop	r20
    6912:	3f 91       	pop	r19
    6914:	2f 91       	pop	r18
    6916:	0f 90       	pop	r0
    6918:	0b be       	out	0x3b, r0	; 59
    691a:	0f 90       	pop	r0
    691c:	0f be       	out	0x3f, r0	; 63
    691e:	0f 90       	pop	r0
    6920:	1f 90       	pop	r1
    6922:	18 95       	reti

00006924 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6924:	0f 93       	push	r16
    6926:	1f 93       	push	r17
    6928:	cf 93       	push	r28
    692a:	df 93       	push	r29
    692c:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    692e:	f8 94       	cli

    count1 = TCNT1;
    6930:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6934:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6938:	80 91 75 1a 	lds	r24, 0x1A75	; 0x801a75 <__clock>
    693c:	90 91 76 1a 	lds	r25, 0x1A76	; 0x801a76 <__clock+0x1>
    6940:	a0 91 77 1a 	lds	r26, 0x1A77	; 0x801a77 <__clock+0x2>
    6944:	b0 91 78 1a 	lds	r27, 0x1A78	; 0x801a78 <__clock+0x3>
    6948:	80 83       	st	Z, r24
    694a:	91 83       	std	Z+1, r25	; 0x01
    694c:	a2 83       	std	Z+2, r26	; 0x02
    694e:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6950:	80 91 79 1a 	lds	r24, 0x1A79	; 0x801a79 <__clock+0x4>
    6954:	90 91 7a 1a 	lds	r25, 0x1A7A	; 0x801a7a <__clock+0x5>
    6958:	a0 91 7b 1a 	lds	r26, 0x1A7B	; 0x801a7b <__clock+0x6>
    695c:	b0 91 7c 1a 	lds	r27, 0x1A7C	; 0x801a7c <__clock+0x7>
    6960:	84 83       	std	Z+4, r24	; 0x04
    6962:	95 83       	std	Z+5, r25	; 0x05
    6964:	a6 83       	std	Z+6, r26	; 0x06
    6966:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6968:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    696c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6970:	b1 9b       	sbis	0x16, 1	; 22
    6972:	03 c0       	rjmp	.+6      	; 0x697a <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6974:	c0 e0       	ldi	r28, 0x00	; 0
    6976:	d0 e0       	ldi	r29, 0x00	; 0
    6978:	3f c0       	rjmp	.+126    	; 0x69f8 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    697a:	82 17       	cp	r24, r18
    697c:	93 07       	cpc	r25, r19
    697e:	d0 f1       	brcs	.+116    	; 0x69f4 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6980:	c0 e0       	ldi	r28, 0x00	; 0
    6982:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6984:	40 e0       	ldi	r20, 0x00	; 0
    6986:	50 e0       	ldi	r21, 0x00	; 0
    6988:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    698a:	9a 01       	movw	r18, r20
    698c:	ab 01       	movw	r20, r22
    698e:	28 0f       	add	r18, r24
    6990:	39 1f       	adc	r19, r25
    6992:	41 1d       	adc	r20, r1
    6994:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    6996:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6998:	a2 e3       	ldi	r26, 0x32	; 50
    699a:	b0 e0       	ldi	r27, 0x00	; 0
    699c:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    69a0:	04 81       	ldd	r16, Z+4	; 0x04
    69a2:	15 81       	ldd	r17, Z+5	; 0x05
    69a4:	26 81       	ldd	r18, Z+6	; 0x06
    69a6:	37 81       	ldd	r19, Z+7	; 0x07
    69a8:	dc 01       	movw	r26, r24
    69aa:	cb 01       	movw	r24, r22
    69ac:	80 0f       	add	r24, r16
    69ae:	91 1f       	adc	r25, r17
    69b0:	a2 1f       	adc	r26, r18
    69b2:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    69b4:	81 15       	cp	r24, r1
    69b6:	2a ec       	ldi	r18, 0xCA	; 202
    69b8:	92 07       	cpc	r25, r18
    69ba:	2a e9       	ldi	r18, 0x9A	; 154
    69bc:	a2 07       	cpc	r26, r18
    69be:	2b e3       	ldi	r18, 0x3B	; 59
    69c0:	b2 07       	cpc	r27, r18
    69c2:	2c f4       	brge	.+10     	; 0x69ce <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    69c4:	84 83       	std	Z+4, r24	; 0x04
    69c6:	95 83       	std	Z+5, r25	; 0x05
    69c8:	a6 83       	std	Z+6, r26	; 0x06
    69ca:	b7 83       	std	Z+7, r27	; 0x07
    69cc:	1a c0       	rjmp	.+52     	; 0x6a02 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    69ce:	9a 5c       	subi	r25, 0xCA	; 202
    69d0:	aa 49       	sbci	r26, 0x9A	; 154
    69d2:	bb 43       	sbci	r27, 0x3B	; 59
    69d4:	84 83       	std	Z+4, r24	; 0x04
    69d6:	95 83       	std	Z+5, r25	; 0x05
    69d8:	a6 83       	std	Z+6, r26	; 0x06
    69da:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    69dc:	80 81       	ld	r24, Z
    69de:	91 81       	ldd	r25, Z+1	; 0x01
    69e0:	a2 81       	ldd	r26, Z+2	; 0x02
    69e2:	b3 81       	ldd	r27, Z+3	; 0x03
    69e4:	01 96       	adiw	r24, 0x01	; 1
    69e6:	a1 1d       	adc	r26, r1
    69e8:	b1 1d       	adc	r27, r1
    69ea:	80 83       	st	Z, r24
    69ec:	91 83       	std	Z+1, r25	; 0x01
    69ee:	a2 83       	std	Z+2, r26	; 0x02
    69f0:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    69f2:	07 c0       	rjmp	.+14     	; 0x6a02 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    69f4:	cf ef       	ldi	r28, 0xFF	; 255
    69f6:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    69f8:	40 e2       	ldi	r20, 0x20	; 32
    69fa:	5e e4       	ldi	r21, 0x4E	; 78
    69fc:	60 e0       	ldi	r22, 0x00	; 0
    69fe:	70 e0       	ldi	r23, 0x00	; 0
    6a00:	c4 cf       	rjmp	.-120    	; 0x698a <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6a02:	ce 01       	movw	r24, r28
    6a04:	df 91       	pop	r29
    6a06:	cf 91       	pop	r28
    6a08:	1f 91       	pop	r17
    6a0a:	0f 91       	pop	r16
    6a0c:	08 95       	ret

00006a0e <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6a0e:	80 91 79 1a 	lds	r24, 0x1A79	; 0x801a79 <__clock+0x4>
    6a12:	90 91 7a 1a 	lds	r25, 0x1A7A	; 0x801a7a <__clock+0x5>
    6a16:	a0 91 7b 1a 	lds	r26, 0x1A7B	; 0x801a7b <__clock+0x6>
    6a1a:	b0 91 7c 1a 	lds	r27, 0x1A7C	; 0x801a7c <__clock+0x7>
    6a1e:	80 5c       	subi	r24, 0xC0	; 192
    6a20:	9d 4b       	sbci	r25, 0xBD	; 189
    6a22:	a0 4f       	sbci	r26, 0xF0	; 240
    6a24:	bf 4f       	sbci	r27, 0xFF	; 255
    6a26:	80 93 79 1a 	sts	0x1A79, r24	; 0x801a79 <__clock+0x4>
    6a2a:	90 93 7a 1a 	sts	0x1A7A, r25	; 0x801a7a <__clock+0x5>
    6a2e:	a0 93 7b 1a 	sts	0x1A7B, r26	; 0x801a7b <__clock+0x6>
    6a32:	b0 93 7c 1a 	sts	0x1A7C, r27	; 0x801a7c <__clock+0x7>
    6a36:	80 91 79 1a 	lds	r24, 0x1A79	; 0x801a79 <__clock+0x4>
    6a3a:	90 91 7a 1a 	lds	r25, 0x1A7A	; 0x801a7a <__clock+0x5>
    6a3e:	a0 91 7b 1a 	lds	r26, 0x1A7B	; 0x801a7b <__clock+0x6>
    6a42:	b0 91 7c 1a 	lds	r27, 0x1A7C	; 0x801a7c <__clock+0x7>
    6a46:	81 15       	cp	r24, r1
    6a48:	9a 4c       	sbci	r25, 0xCA	; 202
    6a4a:	aa 49       	sbci	r26, 0x9A	; 154
    6a4c:	bb 43       	sbci	r27, 0x3B	; 59
    6a4e:	dc f0       	brlt	.+54     	; 0x6a86 <clock_task+0x78>
    6a50:	80 91 75 1a 	lds	r24, 0x1A75	; 0x801a75 <__clock>
    6a54:	90 91 76 1a 	lds	r25, 0x1A76	; 0x801a76 <__clock+0x1>
    6a58:	a0 91 77 1a 	lds	r26, 0x1A77	; 0x801a77 <__clock+0x2>
    6a5c:	b0 91 78 1a 	lds	r27, 0x1A78	; 0x801a78 <__clock+0x3>
    6a60:	01 96       	adiw	r24, 0x01	; 1
    6a62:	a1 1d       	adc	r26, r1
    6a64:	b1 1d       	adc	r27, r1
    6a66:	80 93 75 1a 	sts	0x1A75, r24	; 0x801a75 <__clock>
    6a6a:	90 93 76 1a 	sts	0x1A76, r25	; 0x801a76 <__clock+0x1>
    6a6e:	a0 93 77 1a 	sts	0x1A77, r26	; 0x801a77 <__clock+0x2>
    6a72:	b0 93 78 1a 	sts	0x1A78, r27	; 0x801a78 <__clock+0x3>
    6a76:	10 92 79 1a 	sts	0x1A79, r1	; 0x801a79 <__clock+0x4>
    6a7a:	10 92 7a 1a 	sts	0x1A7A, r1	; 0x801a7a <__clock+0x5>
    6a7e:	10 92 7b 1a 	sts	0x1A7B, r1	; 0x801a7b <__clock+0x6>
    6a82:	10 92 7c 1a 	sts	0x1A7C, r1	; 0x801a7c <__clock+0x7>
    6a86:	08 95       	ret

00006a88 <clock_settime.part.2>:
    6a88:	fc 01       	movw	r30, r24
    6a8a:	84 81       	ldd	r24, Z+4	; 0x04
    6a8c:	95 81       	ldd	r25, Z+5	; 0x05
    6a8e:	a6 81       	ldd	r26, Z+6	; 0x06
    6a90:	b7 81       	ldd	r27, Z+7	; 0x07
    6a92:	80 93 79 1a 	sts	0x1A79, r24	; 0x801a79 <__clock+0x4>
    6a96:	90 93 7a 1a 	sts	0x1A7A, r25	; 0x801a7a <__clock+0x5>
    6a9a:	a0 93 7b 1a 	sts	0x1A7B, r26	; 0x801a7b <__clock+0x6>
    6a9e:	b0 93 7c 1a 	sts	0x1A7C, r27	; 0x801a7c <__clock+0x7>
    6aa2:	80 81       	ld	r24, Z
    6aa4:	91 81       	ldd	r25, Z+1	; 0x01
    6aa6:	a2 81       	ldd	r26, Z+2	; 0x02
    6aa8:	b3 81       	ldd	r27, Z+3	; 0x03
    6aaa:	80 93 75 1a 	sts	0x1A75, r24	; 0x801a75 <__clock>
    6aae:	90 93 76 1a 	sts	0x1A76, r25	; 0x801a76 <__clock+0x1>
    6ab2:	a0 93 77 1a 	sts	0x1A77, r26	; 0x801a77 <__clock+0x2>
    6ab6:	b0 93 78 1a 	sts	0x1A78, r27	; 0x801a78 <__clock+0x3>
    6aba:	80 91 79 1a 	lds	r24, 0x1A79	; 0x801a79 <__clock+0x4>
    6abe:	90 91 7a 1a 	lds	r25, 0x1A7A	; 0x801a7a <__clock+0x5>
    6ac2:	a0 91 7b 1a 	lds	r26, 0x1A7B	; 0x801a7b <__clock+0x6>
    6ac6:	b0 91 7c 1a 	lds	r27, 0x1A7C	; 0x801a7c <__clock+0x7>
    6aca:	44 81       	ldd	r20, Z+4	; 0x04
    6acc:	55 81       	ldd	r21, Z+5	; 0x05
    6ace:	66 81       	ldd	r22, Z+6	; 0x06
    6ad0:	77 81       	ldd	r23, Z+7	; 0x07
    6ad2:	48 17       	cp	r20, r24
    6ad4:	59 07       	cpc	r21, r25
    6ad6:	6a 07       	cpc	r22, r26
    6ad8:	7b 07       	cpc	r23, r27
    6ada:	b9 f6       	brne	.-82     	; 0x6a8a <clock_settime.part.2+0x2>
    6adc:	80 91 75 1a 	lds	r24, 0x1A75	; 0x801a75 <__clock>
    6ae0:	90 91 76 1a 	lds	r25, 0x1A76	; 0x801a76 <__clock+0x1>
    6ae4:	a0 91 77 1a 	lds	r26, 0x1A77	; 0x801a77 <__clock+0x2>
    6ae8:	b0 91 78 1a 	lds	r27, 0x1A78	; 0x801a78 <__clock+0x3>
    6aec:	40 81       	ld	r20, Z
    6aee:	51 81       	ldd	r21, Z+1	; 0x01
    6af0:	62 81       	ldd	r22, Z+2	; 0x02
    6af2:	73 81       	ldd	r23, Z+3	; 0x03
    6af4:	48 17       	cp	r20, r24
    6af6:	59 07       	cpc	r21, r25
    6af8:	6a 07       	cpc	r22, r26
    6afa:	7b 07       	cpc	r23, r27
    6afc:	31 f6       	brne	.-116    	; 0x6a8a <clock_settime.part.2+0x2>
    6afe:	80 e0       	ldi	r24, 0x00	; 0
    6b00:	90 e0       	ldi	r25, 0x00	; 0
    6b02:	08 95       	ret

00006b04 <set_timers>:
    6b04:	00 97       	sbiw	r24, 0x00	; 0
    6b06:	79 f1       	breq	.+94     	; 0x6b66 <set_timers+0x62>
    6b08:	ed e7       	ldi	r30, 0x7D	; 125
    6b0a:	fa e1       	ldi	r31, 0x1A	; 26
    6b0c:	4f ef       	ldi	r20, 0xFF	; 255
    6b0e:	5f ef       	ldi	r21, 0xFF	; 255
    6b10:	20 e0       	ldi	r18, 0x00	; 0
    6b12:	30 e0       	ldi	r19, 0x00	; 0
    6b14:	60 81       	ld	r22, Z
    6b16:	71 81       	ldd	r23, Z+1	; 0x01
    6b18:	86 17       	cp	r24, r22
    6b1a:	97 07       	cpc	r25, r23
    6b1c:	79 f0       	breq	.+30     	; 0x6b3c <set_timers+0x38>
    6b1e:	67 2b       	or	r22, r23
    6b20:	71 f4       	brne	.+28     	; 0x6b3e <set_timers+0x3a>
    6b22:	f9 01       	movw	r30, r18
    6b24:	ee 0f       	add	r30, r30
    6b26:	ff 1f       	adc	r31, r31
    6b28:	e2 0f       	add	r30, r18
    6b2a:	f3 1f       	adc	r31, r19
    6b2c:	e3 58       	subi	r30, 0x83	; 131
    6b2e:	f5 4e       	sbci	r31, 0xE5	; 229
    6b30:	91 83       	std	Z+1, r25	; 0x01
    6b32:	80 83       	st	Z, r24
    6b34:	81 e0       	ldi	r24, 0x01	; 1
    6b36:	82 83       	std	Z+2, r24	; 0x02
    6b38:	c9 01       	movw	r24, r18
    6b3a:	08 95       	ret
    6b3c:	a9 01       	movw	r20, r18
    6b3e:	2f 5f       	subi	r18, 0xFF	; 255
    6b40:	3f 4f       	sbci	r19, 0xFF	; 255
    6b42:	33 96       	adiw	r30, 0x03	; 3
    6b44:	28 30       	cpi	r18, 0x08	; 8
    6b46:	31 05       	cpc	r19, r1
    6b48:	29 f7       	brne	.-54     	; 0x6b14 <set_timers+0x10>
    6b4a:	4f 3f       	cpi	r20, 0xFF	; 255
    6b4c:	8f ef       	ldi	r24, 0xFF	; 255
    6b4e:	58 07       	cpc	r21, r24
    6b50:	69 f4       	brne	.+26     	; 0x6b6c <set_timers+0x68>
    6b52:	82 ec       	ldi	r24, 0xC2	; 194
    6b54:	95 e0       	ldi	r25, 0x05	; 5
    6b56:	1f 92       	push	r1
    6b58:	9f 93       	push	r25
    6b5a:	8f 93       	push	r24
    6b5c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    6b60:	0f 90       	pop	r0
    6b62:	0f 90       	pop	r0
    6b64:	0f 90       	pop	r0
    6b66:	8f ef       	ldi	r24, 0xFF	; 255
    6b68:	9f ef       	ldi	r25, 0xFF	; 255
    6b6a:	08 95       	ret
    6b6c:	ca 01       	movw	r24, r20
    6b6e:	08 95       	ret

00006b70 <delete_all_timers>:
    6b70:	ed e7       	ldi	r30, 0x7D	; 125
    6b72:	fa e1       	ldi	r31, 0x1A	; 26
    6b74:	12 82       	std	Z+2, r1	; 0x02
    6b76:	11 82       	std	Z+1, r1	; 0x01
    6b78:	10 82       	st	Z, r1
    6b7a:	33 96       	adiw	r30, 0x03	; 3
    6b7c:	8a e1       	ldi	r24, 0x1A	; 26
    6b7e:	e5 39       	cpi	r30, 0x95	; 149
    6b80:	f8 07       	cpc	r31, r24
    6b82:	c1 f7       	brne	.-16     	; 0x6b74 <delete_all_timers+0x4>
    6b84:	08 95       	ret

00006b86 <subtract_timespec>:
    6b86:	0f 93       	push	r16
    6b88:	1f 93       	push	r17
    6b8a:	cf 93       	push	r28
    6b8c:	df 93       	push	r29
    6b8e:	fc 01       	movw	r30, r24
    6b90:	84 81       	ldd	r24, Z+4	; 0x04
    6b92:	95 81       	ldd	r25, Z+5	; 0x05
    6b94:	a6 81       	ldd	r26, Z+6	; 0x06
    6b96:	b7 81       	ldd	r27, Z+7	; 0x07
    6b98:	eb 01       	movw	r28, r22
    6b9a:	0c 81       	ldd	r16, Y+4	; 0x04
    6b9c:	1d 81       	ldd	r17, Y+5	; 0x05
    6b9e:	2e 81       	ldd	r18, Y+6	; 0x06
    6ba0:	3f 81       	ldd	r19, Y+7	; 0x07
    6ba2:	80 1b       	sub	r24, r16
    6ba4:	91 0b       	sbc	r25, r17
    6ba6:	a2 0b       	sbc	r26, r18
    6ba8:	b3 0b       	sbc	r27, r19
    6baa:	b7 fd       	sbrc	r27, 7
    6bac:	05 c0       	rjmp	.+10     	; 0x6bb8 <subtract_timespec+0x32>
    6bae:	84 83       	std	Z+4, r24	; 0x04
    6bb0:	95 83       	std	Z+5, r25	; 0x05
    6bb2:	a6 83       	std	Z+6, r26	; 0x06
    6bb4:	b7 83       	std	Z+7, r27	; 0x07
    6bb6:	12 c0       	rjmp	.+36     	; 0x6bdc <subtract_timespec+0x56>
    6bb8:	96 53       	subi	r25, 0x36	; 54
    6bba:	a5 46       	sbci	r26, 0x65	; 101
    6bbc:	b4 4c       	sbci	r27, 0xC4	; 196
    6bbe:	84 83       	std	Z+4, r24	; 0x04
    6bc0:	95 83       	std	Z+5, r25	; 0x05
    6bc2:	a6 83       	std	Z+6, r26	; 0x06
    6bc4:	b7 83       	std	Z+7, r27	; 0x07
    6bc6:	80 81       	ld	r24, Z
    6bc8:	91 81       	ldd	r25, Z+1	; 0x01
    6bca:	a2 81       	ldd	r26, Z+2	; 0x02
    6bcc:	b3 81       	ldd	r27, Z+3	; 0x03
    6bce:	01 97       	sbiw	r24, 0x01	; 1
    6bd0:	a1 09       	sbc	r26, r1
    6bd2:	b1 09       	sbc	r27, r1
    6bd4:	80 83       	st	Z, r24
    6bd6:	91 83       	std	Z+1, r25	; 0x01
    6bd8:	a2 83       	std	Z+2, r26	; 0x02
    6bda:	b3 83       	std	Z+3, r27	; 0x03
    6bdc:	80 81       	ld	r24, Z
    6bde:	91 81       	ldd	r25, Z+1	; 0x01
    6be0:	a2 81       	ldd	r26, Z+2	; 0x02
    6be2:	b3 81       	ldd	r27, Z+3	; 0x03
    6be4:	eb 01       	movw	r28, r22
    6be6:	48 81       	ld	r20, Y
    6be8:	59 81       	ldd	r21, Y+1	; 0x01
    6bea:	6a 81       	ldd	r22, Y+2	; 0x02
    6bec:	7b 81       	ldd	r23, Y+3	; 0x03
    6bee:	84 1b       	sub	r24, r20
    6bf0:	95 0b       	sbc	r25, r21
    6bf2:	a6 0b       	sbc	r26, r22
    6bf4:	b7 0b       	sbc	r27, r23
    6bf6:	80 83       	st	Z, r24
    6bf8:	91 83       	std	Z+1, r25	; 0x01
    6bfa:	a2 83       	std	Z+2, r26	; 0x02
    6bfc:	b3 83       	std	Z+3, r27	; 0x03
    6bfe:	df 91       	pop	r29
    6c00:	cf 91       	pop	r28
    6c02:	1f 91       	pop	r17
    6c04:	0f 91       	pop	r16
    6c06:	08 95       	ret

00006c08 <ts_to_str>:
    6c08:	fc 01       	movw	r30, r24
    6c0a:	87 81       	ldd	r24, Z+7	; 0x07
    6c0c:	8f 93       	push	r24
    6c0e:	86 81       	ldd	r24, Z+6	; 0x06
    6c10:	8f 93       	push	r24
    6c12:	85 81       	ldd	r24, Z+5	; 0x05
    6c14:	8f 93       	push	r24
    6c16:	84 81       	ldd	r24, Z+4	; 0x04
    6c18:	8f 93       	push	r24
    6c1a:	83 81       	ldd	r24, Z+3	; 0x03
    6c1c:	8f 93       	push	r24
    6c1e:	82 81       	ldd	r24, Z+2	; 0x02
    6c20:	8f 93       	push	r24
    6c22:	81 81       	ldd	r24, Z+1	; 0x01
    6c24:	8f 93       	push	r24
    6c26:	80 81       	ld	r24, Z
    6c28:	8f 93       	push	r24
    6c2a:	88 eb       	ldi	r24, 0xB8	; 184
    6c2c:	95 e0       	ldi	r25, 0x05	; 5
    6c2e:	1f 92       	push	r1
    6c30:	9f 93       	push	r25
    6c32:	8f 93       	push	r24
    6c34:	1f 92       	push	r1
    6c36:	8f e1       	ldi	r24, 0x1F	; 31
    6c38:	8f 93       	push	r24
    6c3a:	86 e9       	ldi	r24, 0x96	; 150
    6c3c:	97 e1       	ldi	r25, 0x17	; 23
    6c3e:	9f 93       	push	r25
    6c40:	8f 93       	push	r24
    6c42:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <snprintf_P>
    6c46:	8d b7       	in	r24, 0x3d	; 61
    6c48:	9e b7       	in	r25, 0x3e	; 62
    6c4a:	0f 96       	adiw	r24, 0x0f	; 15
    6c4c:	0f b6       	in	r0, 0x3f	; 63
    6c4e:	f8 94       	cli
    6c50:	9e bf       	out	0x3e, r25	; 62
    6c52:	0f be       	out	0x3f, r0	; 63
    6c54:	8d bf       	out	0x3d, r24	; 61
    6c56:	86 e9       	ldi	r24, 0x96	; 150
    6c58:	97 e1       	ldi	r25, 0x17	; 23
    6c5a:	08 95       	ret

00006c5c <clock_elapsed_begin>:
    6c5c:	6e e8       	ldi	r22, 0x8E	; 142
    6c5e:	77 e1       	ldi	r23, 0x17	; 23
    6c60:	80 e0       	ldi	r24, 0x00	; 0
    6c62:	90 e0       	ldi	r25, 0x00	; 0
    6c64:	5f ce       	rjmp	.-834    	; 0x6924 <clock_gettime>
    6c66:	08 95       	ret

00006c68 <clock_elapsed_end>:
    6c68:	a8 e0       	ldi	r26, 0x08	; 8
    6c6a:	b0 e0       	ldi	r27, 0x00	; 0
    6c6c:	ea e3       	ldi	r30, 0x3A	; 58
    6c6e:	f6 e3       	ldi	r31, 0x36	; 54
    6c70:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    6c74:	8c 01       	movw	r16, r24
    6c76:	be 01       	movw	r22, r28
    6c78:	6f 5f       	subi	r22, 0xFF	; 255
    6c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c7c:	80 e0       	ldi	r24, 0x00	; 0
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
    6c80:	51 de       	rcall	.-862    	; 0x6924 <clock_gettime>
    6c82:	6e e8       	ldi	r22, 0x8E	; 142
    6c84:	77 e1       	ldi	r23, 0x17	; 23
    6c86:	ce 01       	movw	r24, r28
    6c88:	01 96       	adiw	r24, 0x01	; 1
    6c8a:	7d df       	rcall	.-262    	; 0x6b86 <subtract_timespec>
    6c8c:	01 15       	cp	r16, r1
    6c8e:	11 05       	cpc	r17, r1
    6c90:	c1 f0       	breq	.+48     	; 0x6cc2 <clock_elapsed_end+0x5a>
    6c92:	f8 01       	movw	r30, r16
    6c94:	80 81       	ld	r24, Z
    6c96:	88 23       	and	r24, r24
    6c98:	a1 f0       	breq	.+40     	; 0x6cc2 <clock_elapsed_end+0x5a>
    6c9a:	ce 01       	movw	r24, r28
    6c9c:	01 96       	adiw	r24, 0x01	; 1
    6c9e:	b4 df       	rcall	.-152    	; 0x6c08 <ts_to_str>
    6ca0:	9f 93       	push	r25
    6ca2:	8f 93       	push	r24
    6ca4:	1f 93       	push	r17
    6ca6:	0f 93       	push	r16
    6ca8:	8b e9       	ldi	r24, 0x9B	; 155
    6caa:	95 e0       	ldi	r25, 0x05	; 5
    6cac:	1f 92       	push	r1
    6cae:	9f 93       	push	r25
    6cb0:	8f 93       	push	r24
    6cb2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    6cb6:	0f b6       	in	r0, 0x3f	; 63
    6cb8:	f8 94       	cli
    6cba:	de bf       	out	0x3e, r29	; 62
    6cbc:	0f be       	out	0x3f, r0	; 63
    6cbe:	cd bf       	out	0x3d, r28	; 61
    6cc0:	11 c0       	rjmp	.+34     	; 0x6ce4 <clock_elapsed_end+0x7c>
    6cc2:	ce 01       	movw	r24, r28
    6cc4:	01 96       	adiw	r24, 0x01	; 1
    6cc6:	a0 df       	rcall	.-192    	; 0x6c08 <ts_to_str>
    6cc8:	9f 93       	push	r25
    6cca:	8f 93       	push	r24
    6ccc:	80 e9       	ldi	r24, 0x90	; 144
    6cce:	95 e0       	ldi	r25, 0x05	; 5
    6cd0:	1f 92       	push	r1
    6cd2:	9f 93       	push	r25
    6cd4:	8f 93       	push	r24
    6cd6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    6cda:	0f 90       	pop	r0
    6cdc:	0f 90       	pop	r0
    6cde:	0f 90       	pop	r0
    6ce0:	0f 90       	pop	r0
    6ce2:	0f 90       	pop	r0
    6ce4:	28 96       	adiw	r28, 0x08	; 8
    6ce6:	e4 e0       	ldi	r30, 0x04	; 4
    6ce8:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

00006cec <clock_clear>:
    6cec:	a8 e0       	ldi	r26, 0x08	; 8
    6cee:	b0 e0       	ldi	r27, 0x00	; 0
    6cf0:	ec e7       	ldi	r30, 0x7C	; 124
    6cf2:	f6 e3       	ldi	r31, 0x36	; 54
    6cf4:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    6cf8:	1d 82       	std	Y+5, r1	; 0x05
    6cfa:	1e 82       	std	Y+6, r1	; 0x06
    6cfc:	1f 82       	std	Y+7, r1	; 0x07
    6cfe:	18 86       	std	Y+8, r1	; 0x08
    6d00:	19 82       	std	Y+1, r1	; 0x01
    6d02:	1a 82       	std	Y+2, r1	; 0x02
    6d04:	1b 82       	std	Y+3, r1	; 0x03
    6d06:	1c 82       	std	Y+4, r1	; 0x04
    6d08:	ce 01       	movw	r24, r28
    6d0a:	01 96       	adiw	r24, 0x01	; 1
    6d0c:	bd de       	rcall	.-646    	; 0x6a88 <clock_settime.part.2>
    6d0e:	e5 e9       	ldi	r30, 0x95	; 149
    6d10:	fa e1       	ldi	r31, 0x1A	; 26
    6d12:	11 82       	std	Z+1, r1	; 0x01
    6d14:	10 82       	st	Z, r1
    6d16:	13 82       	std	Z+3, r1	; 0x03
    6d18:	12 82       	std	Z+2, r1	; 0x02
    6d1a:	28 96       	adiw	r28, 0x08	; 8
    6d1c:	e2 e0       	ldi	r30, 0x02	; 2
    6d1e:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00006d22 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6d22:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <timers_configured>
    6d26:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <timers_configured+0x1>
    6d2a:	89 2b       	or	r24, r25
    6d2c:	69 f0       	breq	.+26     	; 0x6d48 <enable_timers+0x26>
    6d2e:	80 91 b8 17 	lds	r24, 0x17B8	; 0x8017b8 <timers_enabled>
    6d32:	90 91 b9 17 	lds	r25, 0x17B9	; 0x8017b9 <timers_enabled+0x1>
    6d36:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6d38:	39 f4       	brne	.+14     	; 0x6d48 <enable_timers+0x26>
        timers_enabled = 1;
    6d3a:	b8 dd       	rcall	.-1168   	; 0x68ac <enable_system_task>
    6d3c:	81 e0       	ldi	r24, 0x01	; 1
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	90 93 b9 17 	sts	0x17B9, r25	; 0x8017b9 <timers_enabled+0x1>
    6d44:	80 93 b8 17 	sts	0x17B8, r24	; 0x8017b8 <timers_enabled>
    6d48:	08 95       	ret

00006d4a <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6d4a:	cf 93       	push	r28
    6d4c:	df 93       	push	r29
    6d4e:	cd e7       	ldi	r28, 0x7D	; 125
    6d50:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6d52:	8a 81       	ldd	r24, Y+2	; 0x02
    6d54:	88 23       	and	r24, r24
    6d56:	29 f0       	breq	.+10     	; 0x6d62 <execute_timers+0x18>
    6d58:	e8 81       	ld	r30, Y
    6d5a:	f9 81       	ldd	r31, Y+1	; 0x01
    6d5c:	30 97       	sbiw	r30, 0x00	; 0
    6d5e:	09 f0       	breq	.+2      	; 0x6d62 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6d60:	09 95       	icall
    6d62:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6d64:	8a e1       	ldi	r24, 0x1A	; 26
    6d66:	c5 39       	cpi	r28, 0x95	; 149
    6d68:	d8 07       	cpc	r29, r24
    6d6a:	99 f7       	brne	.-26     	; 0x6d52 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6d6c:	df 91       	pop	r29
    6d6e:	cf 91       	pop	r28
    6d70:	08 95       	ret

00006d72 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6d72:	8c e7       	ldi	r24, 0x7C	; 124
    6d74:	95 e0       	ldi	r25, 0x05	; 5
    6d76:	1f 92       	push	r1
    6d78:	9f 93       	push	r25
    6d7a:	8f 93       	push	r24
    6d7c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    if(!timers_configured)
    6d80:	0f 90       	pop	r0
    6d82:	0f 90       	pop	r0
    6d84:	0f 90       	pop	r0
    6d86:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <timers_configured>
    6d8a:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <timers_configured+0x1>
    6d8e:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6d90:	a9 f4       	brne	.+42     	; 0x6dbc <init_timers+0x4a>
        timers_configured = 1;
    6d92:	8e dd       	rcall	.-1252   	; 0x68b0 <install_timers_isr>
    6d94:	81 e0       	ldi	r24, 0x01	; 1
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	90 93 b7 17 	sts	0x17B7, r25	; 0x8017b7 <timers_configured+0x1>
    6d9c:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <timers_configured>
        timers_enabled = 0;
    6da0:	10 92 b9 17 	sts	0x17B9, r1	; 0x8017b9 <timers_enabled+0x1>
    6da4:	10 92 b8 17 	sts	0x17B8, r1	; 0x8017b8 <timers_enabled>
        printf("Timers configured\n");
    6da8:	89 e6       	ldi	r24, 0x69	; 105
    6daa:	95 e0       	ldi	r25, 0x05	; 5
    6dac:	1f 92       	push	r1
    6dae:	9f 93       	push	r25
    6db0:	8f 93       	push	r24
    6db2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    }

    delete_all_timers();
    6db6:	0f 90       	pop	r0

    clock_clear();
    6db8:	0f 90       	pop	r0
    6dba:	0f 90       	pop	r0
    printf("Clock Init\n");
    6dbc:	d9 de       	rcall	.-590    	; 0x6b70 <delete_all_timers>
    6dbe:	96 df       	rcall	.-212    	; 0x6cec <clock_clear>
    6dc0:	8d e5       	ldi	r24, 0x5D	; 93
    6dc2:	95 e0       	ldi	r25, 0x05	; 5
    6dc4:	1f 92       	push	r1
    6dc6:	9f 93       	push	r25
    6dc8:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6dca:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    6dce:	61 e0       	ldi	r22, 0x01	; 1
    6dd0:	70 e0       	ldi	r23, 0x00	; 0
    6dd2:	87 e0       	ldi	r24, 0x07	; 7
    6dd4:	95 e3       	ldi	r25, 0x35	; 53
    6dd6:	96 de       	rcall	.-724    	; 0x6b04 <set_timers>
    6dd8:	0f 90       	pop	r0
    6dda:	0f 90       	pop	r0
    6ddc:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6dde:	01 96       	adiw	r24, 0x01	; 1
    6de0:	51 f4       	brne	.+20     	; 0x6df6 <init_timers+0x84>
    6de2:	85 e4       	ldi	r24, 0x45	; 69
    6de4:	95 e0       	ldi	r25, 0x05	; 5
    6de6:	1f 92       	push	r1
    6de8:	9f 93       	push	r25
    6dea:	8f 93       	push	r24
    6dec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    6df0:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6df2:	0f 90       	pop	r0
    6df4:	0f 90       	pop	r0
    6df6:	84 e3       	ldi	r24, 0x34	; 52
    6df8:	95 e0       	ldi	r25, 0x05	; 5
    6dfa:	1f 92       	push	r1
    6dfc:	9f 93       	push	r25

    enable_timers();
    6dfe:	8f 93       	push	r24
    6e00:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    printf("Timers enabled\n");
    6e04:	8e df       	rcall	.-228    	; 0x6d22 <enable_timers>
    6e06:	84 e2       	ldi	r24, 0x24	; 36
    6e08:	95 e0       	ldi	r25, 0x05	; 5
    6e0a:	1f 92       	push	r1
    6e0c:	9f 93       	push	r25
    6e0e:	8f 93       	push	r24
}
    6e10:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    6e14:	0f 90       	pop	r0
    6e16:	0f 90       	pop	r0
    6e18:	0f 90       	pop	r0
    6e1a:	0f 90       	pop	r0
    6e1c:	0f 90       	pop	r0
    6e1e:	0f 90       	pop	r0
    6e20:	08 95       	ret

00006e22 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6e22:	fb 01       	movw	r30, r22
    6e24:	10 82       	st	Z, r1
    6e26:	11 82       	std	Z+1, r1	; 0x01
    6e28:	12 82       	std	Z+2, r1	; 0x02
    6e2a:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6e2c:	80 e4       	ldi	r24, 0x40	; 64
    6e2e:	92 e4       	ldi	r25, 0x42	; 66
    6e30:	af e0       	ldi	r26, 0x0F	; 15
    6e32:	b0 e0       	ldi	r27, 0x00	; 0
    6e34:	84 83       	std	Z+4, r24	; 0x04
    6e36:	95 83       	std	Z+5, r25	; 0x05
    6e38:	a6 83       	std	Z+6, r26	; 0x06
    6e3a:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6e3c:	80 e0       	ldi	r24, 0x00	; 0
    6e3e:	90 e0       	ldi	r25, 0x00	; 0
    6e40:	08 95       	ret

00006e42 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6e42:	89 2b       	or	r24, r25
    6e44:	19 f4       	brne	.+6      	; 0x6e4c <clock_settime+0xa>
    6e46:	cb 01       	movw	r24, r22
    6e48:	1f ce       	rjmp	.-962    	; 0x6a88 <clock_settime.part.2>
    6e4a:	08 95       	ret
        return(-1);
    6e4c:	8f ef       	ldi	r24, 0xFF	; 255
    6e4e:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6e50:	08 95       	ret

00006e52 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6e52:	9c 01       	movw	r18, r24
    6e54:	83 70       	andi	r24, 0x03	; 3
    6e56:	99 27       	eor	r25, r25
    6e58:	00 97       	sbiw	r24, 0x00	; 0
    6e5a:	69 f4       	brne	.+26     	; 0x6e76 <IS_Leap+0x24>
    6e5c:	2c 36       	cpi	r18, 0x6C	; 108
    6e5e:	47 e0       	ldi	r20, 0x07	; 7
    6e60:	34 07       	cpc	r19, r20
    6e62:	59 f0       	breq	.+22     	; 0x6e7a <IS_Leap+0x28>
    6e64:	51 e0       	ldi	r21, 0x01	; 1
    6e66:	40 e0       	ldi	r20, 0x00	; 0
    6e68:	24 33       	cpi	r18, 0x34	; 52
    6e6a:	38 40       	sbci	r19, 0x08	; 8
    6e6c:	09 f4       	brne	.+2      	; 0x6e70 <IS_Leap+0x1e>
    6e6e:	50 e0       	ldi	r21, 0x00	; 0
    6e70:	85 2f       	mov	r24, r21
    6e72:	94 2f       	mov	r25, r20
    6e74:	08 95       	ret
    6e76:	80 e0       	ldi	r24, 0x00	; 0
    6e78:	90 e0       	ldi	r25, 0x00	; 0
    6e7a:	08 95       	ret

00006e7c <tm_mon_to_ascii>:
    6e7c:	8c 30       	cpi	r24, 0x0C	; 12
    6e7e:	91 05       	cpc	r25, r1
    6e80:	40 f4       	brcc	.+16     	; 0x6e92 <tm_mon_to_ascii+0x16>
    6e82:	88 0f       	add	r24, r24
    6e84:	99 1f       	adc	r25, r25
    6e86:	fc 01       	movw	r30, r24
    6e88:	ee 5e       	subi	r30, 0xEE	; 238
    6e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    6e8c:	80 81       	ld	r24, Z
    6e8e:	91 81       	ldd	r25, Z+1	; 0x01
    6e90:	08 95       	ret
    6e92:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6e96:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6e9a:	08 95       	ret

00006e9c <Days_Per_Month>:
    6e9c:	cf 93       	push	r28
    6e9e:	df 93       	push	r29
    6ea0:	8c 30       	cpi	r24, 0x0C	; 12
    6ea2:	91 05       	cpc	r25, r1
    6ea4:	24 f0       	brlt	.+8      	; 0x6eae <Days_Per_Month+0x12>
    6ea6:	6f 5f       	subi	r22, 0xFF	; 255
    6ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    6eaa:	0c 97       	sbiw	r24, 0x0c	; 12
    6eac:	f9 cf       	rjmp	.-14     	; 0x6ea0 <Days_Per_Month+0x4>
    6eae:	97 ff       	sbrs	r25, 7
    6eb0:	04 c0       	rjmp	.+8      	; 0x6eba <Days_Per_Month+0x1e>
    6eb2:	61 50       	subi	r22, 0x01	; 1
    6eb4:	71 09       	sbc	r23, r1
    6eb6:	0c 96       	adiw	r24, 0x0c	; 12
    6eb8:	fa cf       	rjmp	.-12     	; 0x6eae <Days_Per_Month+0x12>
    6eba:	fc 01       	movw	r30, r24
    6ebc:	ee 0f       	add	r30, r30
    6ebe:	ff 1f       	adc	r31, r31
    6ec0:	ed 59       	subi	r30, 0x9D	; 157
    6ec2:	fd 4f       	sbci	r31, 0xFD	; 253
    6ec4:	c0 81       	ld	r28, Z
    6ec6:	d1 81       	ldd	r29, Z+1	; 0x01
    6ec8:	01 97       	sbiw	r24, 0x01	; 1
    6eca:	29 f4       	brne	.+10     	; 0x6ed6 <Days_Per_Month+0x3a>
    6ecc:	cb 01       	movw	r24, r22
    6ece:	c1 df       	rcall	.-126    	; 0x6e52 <IS_Leap>
    6ed0:	89 2b       	or	r24, r25
    6ed2:	09 f0       	breq	.+2      	; 0x6ed6 <Days_Per_Month+0x3a>
    6ed4:	21 96       	adiw	r28, 0x01	; 1
    6ed6:	ce 01       	movw	r24, r28
    6ed8:	df 91       	pop	r29
    6eda:	cf 91       	pop	r28
    6edc:	08 95       	ret

00006ede <time_to_tm>:
    6ede:	a0 e0       	ldi	r26, 0x00	; 0
    6ee0:	b0 e0       	ldi	r27, 0x00	; 0
    6ee2:	e5 e7       	ldi	r30, 0x75	; 117
    6ee4:	f7 e3       	ldi	r31, 0x37	; 55
    6ee6:	0c 94 07 ed 	jmp	0x1da0e	; 0x1da0e <__prologue_saves__+0x4>
    6eea:	e8 01       	movw	r28, r16
    6eec:	e6 e1       	ldi	r30, 0x16	; 22
    6eee:	d8 01       	movw	r26, r16
    6ef0:	1d 92       	st	X+, r1
    6ef2:	ea 95       	dec	r30
    6ef4:	e9 f7       	brne	.-6      	; 0x6ef0 <time_to_tm+0x12>
    6ef6:	61 15       	cp	r22, r1
    6ef8:	bd e5       	ldi	r27, 0x5D	; 93
    6efa:	7b 07       	cpc	r23, r27
    6efc:	bd ef       	ldi	r27, 0xFD	; 253
    6efe:	8b 07       	cpc	r24, r27
    6f00:	bf ef       	ldi	r27, 0xFF	; 255
    6f02:	9b 07       	cpc	r25, r27
    6f04:	08 f0       	brcs	.+2      	; 0x6f08 <time_to_tm+0x2a>
    6f06:	c0 c0       	rjmp	.+384    	; 0x7088 <time_to_tm+0x1aa>
    6f08:	6b 01       	movw	r12, r22
    6f0a:	7c 01       	movw	r14, r24
    6f0c:	c2 1a       	sub	r12, r18
    6f0e:	d3 0a       	sbc	r13, r19
    6f10:	e4 0a       	sbc	r14, r20
    6f12:	f5 0a       	sbc	r15, r21
    6f14:	46 01       	movw	r8, r12
    6f16:	57 01       	movw	r10, r14
    6f18:	e0 e8       	ldi	r30, 0x80	; 128
    6f1a:	ce 16       	cp	r12, r30
    6f1c:	ee ea       	ldi	r30, 0xAE	; 174
    6f1e:	de 06       	cpc	r13, r30
    6f20:	ee ef       	ldi	r30, 0xFE	; 254
    6f22:	ee 06       	cpc	r14, r30
    6f24:	ef ef       	ldi	r30, 0xFF	; 255
    6f26:	fe 06       	cpc	r15, r30
    6f28:	50 f0       	brcs	.+20     	; 0x6f3e <time_to_tm+0x60>
    6f2a:	80 e8       	ldi	r24, 0x80	; 128
    6f2c:	88 0e       	add	r8, r24
    6f2e:	81 e5       	ldi	r24, 0x51	; 81
    6f30:	98 1e       	adc	r9, r24
    6f32:	81 e0       	ldi	r24, 0x01	; 1
    6f34:	a8 1e       	adc	r10, r24
    6f36:	b1 1c       	adc	r11, r1
    6f38:	01 e0       	ldi	r16, 0x01	; 1
    6f3a:	10 e0       	ldi	r17, 0x00	; 0
    6f3c:	02 c0       	rjmp	.+4      	; 0x6f42 <time_to_tm+0x64>
    6f3e:	00 e0       	ldi	r16, 0x00	; 0
    6f40:	10 e0       	ldi	r17, 0x00	; 0
    6f42:	8c e3       	ldi	r24, 0x3C	; 60
    6f44:	48 2e       	mov	r4, r24
    6f46:	51 2c       	mov	r5, r1
    6f48:	61 2c       	mov	r6, r1
    6f4a:	71 2c       	mov	r7, r1
    6f4c:	c5 01       	movw	r24, r10
    6f4e:	b4 01       	movw	r22, r8
    6f50:	a3 01       	movw	r20, r6
    6f52:	92 01       	movw	r18, r4
    6f54:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    6f58:	79 83       	std	Y+1, r23	; 0x01
    6f5a:	68 83       	st	Y, r22
    6f5c:	ca 01       	movw	r24, r20
    6f5e:	b9 01       	movw	r22, r18
    6f60:	a3 01       	movw	r20, r6
    6f62:	92 01       	movw	r18, r4
    6f64:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    6f68:	7b 83       	std	Y+3, r23	; 0x03
    6f6a:	6a 83       	std	Y+2, r22	; 0x02
    6f6c:	c5 01       	movw	r24, r10
    6f6e:	b4 01       	movw	r22, r8
    6f70:	20 e1       	ldi	r18, 0x10	; 16
    6f72:	3e e0       	ldi	r19, 0x0E	; 14
    6f74:	40 e0       	ldi	r20, 0x00	; 0
    6f76:	50 e0       	ldi	r21, 0x00	; 0
    6f78:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    6f7c:	ca 01       	movw	r24, r20
    6f7e:	b9 01       	movw	r22, r18
    6f80:	28 e1       	ldi	r18, 0x18	; 24
    6f82:	30 e0       	ldi	r19, 0x00	; 0
    6f84:	40 e0       	ldi	r20, 0x00	; 0
    6f86:	50 e0       	ldi	r21, 0x00	; 0
    6f88:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    6f8c:	7d 83       	std	Y+5, r23	; 0x05
    6f8e:	6c 83       	std	Y+4, r22	; 0x04
    6f90:	01 15       	cp	r16, r1
    6f92:	11 05       	cpc	r17, r1
    6f94:	89 f0       	breq	.+34     	; 0x6fb8 <time_to_tm+0xda>
    6f96:	85 e4       	ldi	r24, 0x45	; 69
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	9b 87       	std	Y+11, r25	; 0x0b
    6f9c:	8a 87       	std	Y+10, r24	; 0x0a
    6f9e:	8b e0       	ldi	r24, 0x0B	; 11
    6fa0:	90 e0       	ldi	r25, 0x00	; 0
    6fa2:	99 87       	std	Y+9, r25	; 0x09
    6fa4:	88 87       	std	Y+8, r24	; 0x08
    6fa6:	8f e1       	ldi	r24, 0x1F	; 31
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	9f 83       	std	Y+7, r25	; 0x07
    6fac:	8e 83       	std	Y+6, r24	; 0x06
    6fae:	83 e0       	ldi	r24, 0x03	; 3
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	9d 87       	std	Y+13, r25	; 0x0d
    6fb4:	8c 87       	std	Y+12, r24	; 0x0c
    6fb6:	65 c0       	rjmp	.+202    	; 0x7082 <time_to_tm+0x1a4>
    6fb8:	c5 01       	movw	r24, r10
    6fba:	b4 01       	movw	r22, r8
    6fbc:	20 e8       	ldi	r18, 0x80	; 128
    6fbe:	31 e5       	ldi	r19, 0x51	; 81
    6fc0:	41 e0       	ldi	r20, 0x01	; 1
    6fc2:	50 e0       	ldi	r21, 0x00	; 0
    6fc4:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    6fc8:	49 01       	movw	r8, r18
    6fca:	5a 01       	movw	r10, r20
    6fcc:	ca 01       	movw	r24, r20
    6fce:	b9 01       	movw	r22, r18
    6fd0:	6c 5f       	subi	r22, 0xFC	; 252
    6fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    6fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    6fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    6fd8:	27 e0       	ldi	r18, 0x07	; 7
    6fda:	30 e0       	ldi	r19, 0x00	; 0
    6fdc:	40 e0       	ldi	r20, 0x00	; 0
    6fde:	50 e0       	ldi	r21, 0x00	; 0
    6fe0:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
    6fe4:	7d 87       	std	Y+13, r23	; 0x0d
    6fe6:	6c 87       	std	Y+12, r22	; 0x0c
    6fe8:	02 eb       	ldi	r16, 0xB2	; 178
    6fea:	17 e0       	ldi	r17, 0x07	; 7
    6fec:	c8 01       	movw	r24, r16
    6fee:	31 df       	rcall	.-414    	; 0x6e52 <IS_Leap>
    6ff0:	00 97       	sbiw	r24, 0x00	; 0
    6ff2:	19 f4       	brne	.+6      	; 0x6ffa <time_to_tm+0x11c>
    6ff4:	4d e6       	ldi	r20, 0x6D	; 109
    6ff6:	51 e0       	ldi	r21, 0x01	; 1
    6ff8:	02 c0       	rjmp	.+4      	; 0x6ffe <time_to_tm+0x120>
    6ffa:	4e e6       	ldi	r20, 0x6E	; 110
    6ffc:	51 e0       	ldi	r21, 0x01	; 1
    6ffe:	05 2e       	mov	r0, r21
    7000:	00 0c       	add	r0, r0
    7002:	66 0b       	sbc	r22, r22
    7004:	77 0b       	sbc	r23, r23
    7006:	84 16       	cp	r8, r20
    7008:	95 06       	cpc	r9, r21
    700a:	a6 06       	cpc	r10, r22
    700c:	b7 06       	cpc	r11, r23
    700e:	3c f0       	brlt	.+14     	; 0x701e <time_to_tm+0x140>
    7010:	0f 5f       	subi	r16, 0xFF	; 255
    7012:	1f 4f       	sbci	r17, 0xFF	; 255
    7014:	84 1a       	sub	r8, r20
    7016:	95 0a       	sbc	r9, r21
    7018:	a6 0a       	sbc	r10, r22
    701a:	b7 0a       	sbc	r11, r23
    701c:	e7 cf       	rjmp	.-50     	; 0x6fec <time_to_tm+0x10e>
    701e:	0c 56       	subi	r16, 0x6C	; 108
    7020:	17 40       	sbci	r17, 0x07	; 7
    7022:	1b 87       	std	Y+11, r17	; 0x0b
    7024:	0a 87       	std	Y+10, r16	; 0x0a
    7026:	9f 86       	std	Y+15, r9	; 0x0f
    7028:	8e 86       	std	Y+14, r8	; 0x0e
    702a:	e3 e6       	ldi	r30, 0x63	; 99
    702c:	f2 e0       	ldi	r31, 0x02	; 2
    702e:	20 e0       	ldi	r18, 0x00	; 0
    7030:	30 e0       	ldi	r19, 0x00	; 0
    7032:	18 14       	cp	r1, r8
    7034:	19 04       	cpc	r1, r9
    7036:	1a 04       	cpc	r1, r10
    7038:	1b 04       	cpc	r1, r11
    703a:	e4 f4       	brge	.+56     	; 0x7074 <time_to_tm+0x196>
    703c:	2c 30       	cpi	r18, 0x0C	; 12
    703e:	31 05       	cpc	r19, r1
    7040:	c9 f0       	breq	.+50     	; 0x7074 <time_to_tm+0x196>
    7042:	41 91       	ld	r20, Z+
    7044:	51 91       	ld	r21, Z+
    7046:	21 30       	cpi	r18, 0x01	; 1
    7048:	31 05       	cpc	r19, r1
    704a:	21 f4       	brne	.+8      	; 0x7054 <time_to_tm+0x176>
    704c:	00 97       	sbiw	r24, 0x00	; 0
    704e:	11 f0       	breq	.+4      	; 0x7054 <time_to_tm+0x176>
    7050:	4f 5f       	subi	r20, 0xFF	; 255
    7052:	5f 4f       	sbci	r21, 0xFF	; 255
    7054:	05 2e       	mov	r0, r21
    7056:	00 0c       	add	r0, r0
    7058:	66 0b       	sbc	r22, r22
    705a:	77 0b       	sbc	r23, r23
    705c:	84 16       	cp	r8, r20
    705e:	95 06       	cpc	r9, r21
    7060:	a6 06       	cpc	r10, r22
    7062:	b7 06       	cpc	r11, r23
    7064:	3c f0       	brlt	.+14     	; 0x7074 <time_to_tm+0x196>
    7066:	84 1a       	sub	r8, r20
    7068:	95 0a       	sbc	r9, r21
    706a:	a6 0a       	sbc	r10, r22
    706c:	b7 0a       	sbc	r11, r23
    706e:	2f 5f       	subi	r18, 0xFF	; 255
    7070:	3f 4f       	sbci	r19, 0xFF	; 255
    7072:	df cf       	rjmp	.-66     	; 0x7032 <time_to_tm+0x154>
    7074:	39 87       	std	Y+9, r19	; 0x09
    7076:	28 87       	std	Y+8, r18	; 0x08
    7078:	af ef       	ldi	r26, 0xFF	; 255
    707a:	8a 1a       	sub	r8, r26
    707c:	9a 0a       	sbc	r9, r26
    707e:	9f 82       	std	Y+7, r9	; 0x07
    7080:	8e 82       	std	Y+6, r8	; 0x06
    7082:	b6 01       	movw	r22, r12
    7084:	c7 01       	movw	r24, r14
    7086:	04 c0       	rjmp	.+8      	; 0x7090 <time_to_tm+0x1b2>
    7088:	6f ef       	ldi	r22, 0xFF	; 255
    708a:	7f ef       	ldi	r23, 0xFF	; 255
    708c:	8f ef       	ldi	r24, 0xFF	; 255
    708e:	9f ef       	ldi	r25, 0xFF	; 255
    7090:	cd b7       	in	r28, 0x3d	; 61
    7092:	de b7       	in	r29, 0x3e	; 62
    7094:	e0 e1       	ldi	r30, 0x10	; 16
    7096:	0c 94 23 ed 	jmp	0x1da46	; 0x1da46 <__epilogue_restores__+0x4>

0000709a <gmtime_r>:
    709a:	0f 93       	push	r16
    709c:	1f 93       	push	r17
    709e:	cf 93       	push	r28
    70a0:	df 93       	push	r29
    70a2:	eb 01       	movw	r28, r22
    70a4:	fc 01       	movw	r30, r24
    70a6:	60 81       	ld	r22, Z
    70a8:	71 81       	ldd	r23, Z+1	; 0x01
    70aa:	82 81       	ldd	r24, Z+2	; 0x02
    70ac:	93 81       	ldd	r25, Z+3	; 0x03
    70ae:	8e 01       	movw	r16, r28
    70b0:	20 e0       	ldi	r18, 0x00	; 0
    70b2:	30 e0       	ldi	r19, 0x00	; 0
    70b4:	a9 01       	movw	r20, r18
    70b6:	13 df       	rcall	.-474    	; 0x6ede <time_to_tm>
    70b8:	ce 01       	movw	r24, r28
    70ba:	df 91       	pop	r29
    70bc:	cf 91       	pop	r28
    70be:	1f 91       	pop	r17
    70c0:	0f 91       	pop	r16
    70c2:	08 95       	ret

000070c4 <gmtime>:
    70c4:	28 ed       	ldi	r18, 0xD8	; 216
    70c6:	37 e1       	ldi	r19, 0x17	; 23
    70c8:	30 93 ef 17 	sts	0x17EF, r19	; 0x8017ef <p.3745+0x1>
    70cc:	20 93 ee 17 	sts	0x17EE, r18	; 0x8017ee <p.3745>
    70d0:	b9 01       	movw	r22, r18
    70d2:	e3 df       	rcall	.-58     	; 0x709a <gmtime_r>
    70d4:	88 ed       	ldi	r24, 0xD8	; 216
    70d6:	97 e1       	ldi	r25, 0x17	; 23
    70d8:	08 95       	ret

000070da <gettimezone>:
    70da:	e5 e9       	ldi	r30, 0x95	; 149
    70dc:	fa e1       	ldi	r31, 0x1A	; 26
    70de:	20 81       	ld	r18, Z
    70e0:	31 81       	ldd	r19, Z+1	; 0x01
    70e2:	dc 01       	movw	r26, r24
    70e4:	11 96       	adiw	r26, 0x01	; 1
    70e6:	3c 93       	st	X, r19
    70e8:	2e 93       	st	-X, r18
    70ea:	22 81       	ldd	r18, Z+2	; 0x02
    70ec:	33 81       	ldd	r19, Z+3	; 0x03
    70ee:	13 96       	adiw	r26, 0x03	; 3
    70f0:	3c 93       	st	X, r19
    70f2:	2e 93       	st	-X, r18
    70f4:	12 97       	sbiw	r26, 0x02	; 2
    70f6:	80 e0       	ldi	r24, 0x00	; 0
    70f8:	90 e0       	ldi	r25, 0x00	; 0
    70fa:	08 95       	ret

000070fc <settimezone>:
    70fc:	dc 01       	movw	r26, r24
    70fe:	2d 91       	ld	r18, X+
    7100:	3c 91       	ld	r19, X
    7102:	11 97       	sbiw	r26, 0x01	; 1
    7104:	e5 e9       	ldi	r30, 0x95	; 149
    7106:	fa e1       	ldi	r31, 0x1A	; 26
    7108:	31 83       	std	Z+1, r19	; 0x01
    710a:	20 83       	st	Z, r18
    710c:	12 96       	adiw	r26, 0x02	; 2
    710e:	8d 91       	ld	r24, X+
    7110:	9c 91       	ld	r25, X
    7112:	13 97       	sbiw	r26, 0x03	; 3
    7114:	93 83       	std	Z+3, r25	; 0x03
    7116:	82 83       	std	Z+2, r24	; 0x02
    7118:	80 e0       	ldi	r24, 0x00	; 0
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	08 95       	ret

0000711e <gettimeofday>:
    711e:	a8 e0       	ldi	r26, 0x08	; 8
    7120:	b0 e0       	ldi	r27, 0x00	; 0
    7122:	e5 e9       	ldi	r30, 0x95	; 149
    7124:	f8 e3       	ldi	r31, 0x38	; 56
    7126:	0c 94 11 ed 	jmp	0x1da22	; 0x1da22 <__prologue_saves__+0x18>
    712a:	8c 01       	movw	r16, r24
    712c:	7b 01       	movw	r14, r22
    712e:	be 01       	movw	r22, r28
    7130:	6f 5f       	subi	r22, 0xFF	; 255
    7132:	7f 4f       	sbci	r23, 0xFF	; 255
    7134:	80 e0       	ldi	r24, 0x00	; 0
    7136:	90 e0       	ldi	r25, 0x00	; 0
    7138:	f5 db       	rcall	.-2070   	; 0x6924 <clock_gettime>
    713a:	89 81       	ldd	r24, Y+1	; 0x01
    713c:	9a 81       	ldd	r25, Y+2	; 0x02
    713e:	ab 81       	ldd	r26, Y+3	; 0x03
    7140:	bc 81       	ldd	r27, Y+4	; 0x04
    7142:	f8 01       	movw	r30, r16
    7144:	80 83       	st	Z, r24
    7146:	91 83       	std	Z+1, r25	; 0x01
    7148:	a2 83       	std	Z+2, r26	; 0x02
    714a:	b3 83       	std	Z+3, r27	; 0x03
    714c:	6d 81       	ldd	r22, Y+5	; 0x05
    714e:	7e 81       	ldd	r23, Y+6	; 0x06
    7150:	8f 81       	ldd	r24, Y+7	; 0x07
    7152:	98 85       	ldd	r25, Y+8	; 0x08
    7154:	28 ee       	ldi	r18, 0xE8	; 232
    7156:	33 e0       	ldi	r19, 0x03	; 3
    7158:	40 e0       	ldi	r20, 0x00	; 0
    715a:	50 e0       	ldi	r21, 0x00	; 0
    715c:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
    7160:	f8 01       	movw	r30, r16
    7162:	24 83       	std	Z+4, r18	; 0x04
    7164:	35 83       	std	Z+5, r19	; 0x05
    7166:	46 83       	std	Z+6, r20	; 0x06
    7168:	57 83       	std	Z+7, r21	; 0x07
    716a:	c7 01       	movw	r24, r14
    716c:	b6 df       	rcall	.-148    	; 0x70da <gettimezone>
    716e:	80 e0       	ldi	r24, 0x00	; 0
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	28 96       	adiw	r28, 0x08	; 8
    7174:	e6 e0       	ldi	r30, 0x06	; 6
    7176:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0000717a <time>:
    717a:	cf 93       	push	r28
    717c:	df 93       	push	r29
    717e:	ec 01       	movw	r28, r24
    7180:	6a eb       	ldi	r22, 0xBA	; 186
    7182:	77 e1       	ldi	r23, 0x17	; 23
    7184:	80 e0       	ldi	r24, 0x00	; 0
    7186:	90 e0       	ldi	r25, 0x00	; 0
    7188:	cd db       	rcall	.-2150   	; 0x6924 <clock_gettime>
    718a:	20 97       	sbiw	r28, 0x00	; 0
    718c:	61 f0       	breq	.+24     	; 0x71a6 <time+0x2c>
    718e:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <ts.3823>
    7192:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <ts.3823+0x1>
    7196:	a0 91 bc 17 	lds	r26, 0x17BC	; 0x8017bc <ts.3823+0x2>
    719a:	b0 91 bd 17 	lds	r27, 0x17BD	; 0x8017bd <ts.3823+0x3>
    719e:	88 83       	st	Y, r24
    71a0:	99 83       	std	Y+1, r25	; 0x01
    71a2:	aa 83       	std	Y+2, r26	; 0x02
    71a4:	bb 83       	std	Y+3, r27	; 0x03
    71a6:	60 91 ba 17 	lds	r22, 0x17BA	; 0x8017ba <ts.3823>
    71aa:	70 91 bb 17 	lds	r23, 0x17BB	; 0x8017bb <ts.3823+0x1>
    71ae:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <ts.3823+0x2>
    71b2:	90 91 bd 17 	lds	r25, 0x17BD	; 0x8017bd <ts.3823+0x3>
    71b6:	df 91       	pop	r29
    71b8:	cf 91       	pop	r28
    71ba:	08 95       	ret

000071bc <is_dst>:
    71bc:	cf 92       	push	r12
    71be:	df 92       	push	r13
    71c0:	ef 92       	push	r14
    71c2:	ff 92       	push	r15
    71c4:	6b 01       	movw	r12, r22
    71c6:	7c 01       	movw	r14, r24
    71c8:	ff d3       	rcall	.+2046   	; 0x79c8 <set_dst>
    71ca:	80 91 99 1a 	lds	r24, 0x1A99	; 0x801a99 <dst>
    71ce:	90 91 9a 1a 	lds	r25, 0x1A9A	; 0x801a9a <dst+0x1>
    71d2:	a0 91 9b 1a 	lds	r26, 0x1A9B	; 0x801a9b <dst+0x2>
    71d6:	b0 91 9c 1a 	lds	r27, 0x1A9C	; 0x801a9c <dst+0x3>
    71da:	c8 16       	cp	r12, r24
    71dc:	d9 06       	cpc	r13, r25
    71de:	ea 06       	cpc	r14, r26
    71e0:	fb 06       	cpc	r15, r27
    71e2:	88 f0       	brcs	.+34     	; 0x7206 <is_dst+0x4a>
    71e4:	81 e0       	ldi	r24, 0x01	; 1
    71e6:	90 e0       	ldi	r25, 0x00	; 0
    71e8:	40 91 9d 1a 	lds	r20, 0x1A9D	; 0x801a9d <dst+0x4>
    71ec:	50 91 9e 1a 	lds	r21, 0x1A9E	; 0x801a9e <dst+0x5>
    71f0:	60 91 9f 1a 	lds	r22, 0x1A9F	; 0x801a9f <dst+0x6>
    71f4:	70 91 a0 1a 	lds	r23, 0x1AA0	; 0x801aa0 <dst+0x7>
    71f8:	4c 15       	cp	r20, r12
    71fa:	5d 05       	cpc	r21, r13
    71fc:	6e 05       	cpc	r22, r14
    71fe:	7f 05       	cpc	r23, r15
    7200:	20 f4       	brcc	.+8      	; 0x720a <is_dst+0x4e>
    7202:	80 e0       	ldi	r24, 0x00	; 0
    7204:	02 c0       	rjmp	.+4      	; 0x720a <is_dst+0x4e>
    7206:	80 e0       	ldi	r24, 0x00	; 0
    7208:	90 e0       	ldi	r25, 0x00	; 0
    720a:	ff 90       	pop	r15
    720c:	ef 90       	pop	r14
    720e:	df 90       	pop	r13
    7210:	cf 90       	pop	r12
    7212:	08 95       	ret

00007214 <localtime_r>:
    7214:	4f 92       	push	r4
    7216:	5f 92       	push	r5
    7218:	6f 92       	push	r6
    721a:	7f 92       	push	r7
    721c:	af 92       	push	r10
    721e:	bf 92       	push	r11
    7220:	cf 92       	push	r12
    7222:	df 92       	push	r13
    7224:	ef 92       	push	r14
    7226:	ff 92       	push	r15
    7228:	0f 93       	push	r16
    722a:	1f 93       	push	r17
    722c:	cf 93       	push	r28
    722e:	df 93       	push	r29
    7230:	00 d0       	rcall	.+0      	; 0x7232 <localtime_r+0x1e>
    7232:	00 d0       	rcall	.+0      	; 0x7234 <localtime_r+0x20>
    7234:	cd b7       	in	r28, 0x3d	; 61
    7236:	de b7       	in	r29, 0x3e	; 62
    7238:	5b 01       	movw	r10, r22
    723a:	fc 01       	movw	r30, r24
    723c:	40 80       	ld	r4, Z
    723e:	51 80       	ldd	r5, Z+1	; 0x01
    7240:	62 80       	ldd	r6, Z+2	; 0x02
    7242:	73 80       	ldd	r7, Z+3	; 0x03
    7244:	ce 01       	movw	r24, r28
    7246:	01 96       	adiw	r24, 0x01	; 1
    7248:	48 df       	rcall	.-368    	; 0x70da <gettimezone>
    724a:	a9 81       	ldd	r26, Y+1	; 0x01
    724c:	ba 81       	ldd	r27, Y+2	; 0x02
    724e:	2c e3       	ldi	r18, 0x3C	; 60
    7250:	30 e0       	ldi	r19, 0x00	; 0
    7252:	0e 94 df ec 	call	0x1d9be	; 0x1d9be <__usmulhisi3>
    7256:	6b 01       	movw	r12, r22
    7258:	7c 01       	movw	r14, r24
    725a:	c3 01       	movw	r24, r6
    725c:	b2 01       	movw	r22, r4
    725e:	6c 19       	sub	r22, r12
    7260:	7d 09       	sbc	r23, r13
    7262:	8e 09       	sbc	r24, r14
    7264:	9f 09       	sbc	r25, r15
    7266:	aa df       	rcall	.-172    	; 0x71bc <is_dst>
    7268:	89 2b       	or	r24, r25
    726a:	31 f0       	breq	.+12     	; 0x7278 <localtime_r+0x64>
    726c:	f0 e1       	ldi	r31, 0x10	; 16
    726e:	cf 1a       	sub	r12, r31
    7270:	fe e0       	ldi	r31, 0x0E	; 14
    7272:	df 0a       	sbc	r13, r31
    7274:	e1 08       	sbc	r14, r1
    7276:	f1 08       	sbc	r15, r1
    7278:	85 01       	movw	r16, r10
    727a:	a7 01       	movw	r20, r14
    727c:	96 01       	movw	r18, r12
    727e:	c3 01       	movw	r24, r6
    7280:	b2 01       	movw	r22, r4
    7282:	2d de       	rcall	.-934    	; 0x6ede <time_to_tm>
    7284:	c5 01       	movw	r24, r10
    7286:	0f 90       	pop	r0
    7288:	0f 90       	pop	r0
    728a:	0f 90       	pop	r0
    728c:	0f 90       	pop	r0
    728e:	df 91       	pop	r29
    7290:	cf 91       	pop	r28
    7292:	1f 91       	pop	r17
    7294:	0f 91       	pop	r16
    7296:	ff 90       	pop	r15
    7298:	ef 90       	pop	r14
    729a:	df 90       	pop	r13
    729c:	cf 90       	pop	r12
    729e:	bf 90       	pop	r11
    72a0:	af 90       	pop	r10
    72a2:	7f 90       	pop	r7
    72a4:	6f 90       	pop	r6
    72a6:	5f 90       	pop	r5
    72a8:	4f 90       	pop	r4
    72aa:	08 95       	ret

000072ac <localtime>:
    72ac:	62 ec       	ldi	r22, 0xC2	; 194
    72ae:	77 e1       	ldi	r23, 0x17	; 23
    72b0:	b1 cf       	rjmp	.-158    	; 0x7214 <localtime_r>
    72b2:	08 95       	ret

000072b4 <normalize>:
    72b4:	aa e0       	ldi	r26, 0x0A	; 10
    72b6:	b0 e0       	ldi	r27, 0x00	; 0
    72b8:	e0 e6       	ldi	r30, 0x60	; 96
    72ba:	f9 e3       	ldi	r31, 0x39	; 57
    72bc:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    72c0:	7c 01       	movw	r14, r24
    72c2:	7a 87       	std	Y+10, r23	; 0x0a
    72c4:	69 87       	std	Y+9, r22	; 0x09
    72c6:	f7 01       	movw	r30, r14
    72c8:	80 81       	ld	r24, Z
    72ca:	91 81       	ldd	r25, Z+1	; 0x01
    72cc:	8c 33       	cpi	r24, 0x3C	; 60
    72ce:	91 05       	cpc	r25, r1
    72d0:	5c f0       	brlt	.+22     	; 0x72e8 <normalize+0x34>
    72d2:	f7 01       	movw	r30, r14
    72d4:	22 81       	ldd	r18, Z+2	; 0x02
    72d6:	33 81       	ldd	r19, Z+3	; 0x03
    72d8:	2f 5f       	subi	r18, 0xFF	; 255
    72da:	3f 4f       	sbci	r19, 0xFF	; 255
    72dc:	33 83       	std	Z+3, r19	; 0x03
    72de:	22 83       	std	Z+2, r18	; 0x02
    72e0:	cc 97       	sbiw	r24, 0x3c	; 60
    72e2:	91 83       	std	Z+1, r25	; 0x01
    72e4:	80 83       	st	Z, r24
    72e6:	ef cf       	rjmp	.-34     	; 0x72c6 <normalize+0x12>
    72e8:	f7 01       	movw	r30, r14
    72ea:	01 90       	ld	r0, Z+
    72ec:	f0 81       	ld	r31, Z
    72ee:	e0 2d       	mov	r30, r0
    72f0:	fe 83       	std	Y+6, r31	; 0x06
    72f2:	ed 83       	std	Y+5, r30	; 0x05
    72f4:	f7 ff       	sbrs	r31, 7
    72f6:	0d c0       	rjmp	.+26     	; 0x7312 <normalize+0x5e>
    72f8:	f7 01       	movw	r30, r14
    72fa:	82 81       	ldd	r24, Z+2	; 0x02
    72fc:	93 81       	ldd	r25, Z+3	; 0x03
    72fe:	01 97       	sbiw	r24, 0x01	; 1
    7300:	93 83       	std	Z+3, r25	; 0x03
    7302:	82 83       	std	Z+2, r24	; 0x02
    7304:	6d 81       	ldd	r22, Y+5	; 0x05
    7306:	7e 81       	ldd	r23, Y+6	; 0x06
    7308:	64 5c       	subi	r22, 0xC4	; 196
    730a:	7f 4f       	sbci	r23, 0xFF	; 255
    730c:	71 83       	std	Z+1, r23	; 0x01
    730e:	60 83       	st	Z, r22
    7310:	eb cf       	rjmp	.-42     	; 0x72e8 <normalize+0x34>
    7312:	f7 01       	movw	r30, r14
    7314:	82 81       	ldd	r24, Z+2	; 0x02
    7316:	93 81       	ldd	r25, Z+3	; 0x03
    7318:	8c 33       	cpi	r24, 0x3C	; 60
    731a:	91 05       	cpc	r25, r1
    731c:	5c f0       	brlt	.+22     	; 0x7334 <normalize+0x80>
    731e:	f7 01       	movw	r30, r14
    7320:	24 81       	ldd	r18, Z+4	; 0x04
    7322:	35 81       	ldd	r19, Z+5	; 0x05
    7324:	2f 5f       	subi	r18, 0xFF	; 255
    7326:	3f 4f       	sbci	r19, 0xFF	; 255
    7328:	35 83       	std	Z+5, r19	; 0x05
    732a:	24 83       	std	Z+4, r18	; 0x04
    732c:	cc 97       	sbiw	r24, 0x3c	; 60
    732e:	93 83       	std	Z+3, r25	; 0x03
    7330:	82 83       	std	Z+2, r24	; 0x02
    7332:	ef cf       	rjmp	.-34     	; 0x7312 <normalize+0x5e>
    7334:	f7 01       	movw	r30, r14
    7336:	22 80       	ldd	r2, Z+2	; 0x02
    7338:	33 80       	ldd	r3, Z+3	; 0x03
    733a:	37 fe       	sbrs	r3, 7
    733c:	0d c0       	rjmp	.+26     	; 0x7358 <normalize+0xa4>
    733e:	f7 01       	movw	r30, r14
    7340:	84 81       	ldd	r24, Z+4	; 0x04
    7342:	95 81       	ldd	r25, Z+5	; 0x05
    7344:	01 97       	sbiw	r24, 0x01	; 1
    7346:	95 83       	std	Z+5, r25	; 0x05
    7348:	84 83       	std	Z+4, r24	; 0x04
    734a:	fc e3       	ldi	r31, 0x3C	; 60
    734c:	2f 0e       	add	r2, r31
    734e:	31 1c       	adc	r3, r1
    7350:	f7 01       	movw	r30, r14
    7352:	33 82       	std	Z+3, r3	; 0x03
    7354:	22 82       	std	Z+2, r2	; 0x02
    7356:	ee cf       	rjmp	.-36     	; 0x7334 <normalize+0x80>
    7358:	f7 01       	movw	r30, r14
    735a:	84 81       	ldd	r24, Z+4	; 0x04
    735c:	95 81       	ldd	r25, Z+5	; 0x05
    735e:	88 31       	cpi	r24, 0x18	; 24
    7360:	91 05       	cpc	r25, r1
    7362:	5c f0       	brlt	.+22     	; 0x737a <normalize+0xc6>
    7364:	f7 01       	movw	r30, r14
    7366:	26 81       	ldd	r18, Z+6	; 0x06
    7368:	37 81       	ldd	r19, Z+7	; 0x07
    736a:	2f 5f       	subi	r18, 0xFF	; 255
    736c:	3f 4f       	sbci	r19, 0xFF	; 255
    736e:	37 83       	std	Z+7, r19	; 0x07
    7370:	26 83       	std	Z+6, r18	; 0x06
    7372:	48 97       	sbiw	r24, 0x18	; 24
    7374:	95 83       	std	Z+5, r25	; 0x05
    7376:	84 83       	std	Z+4, r24	; 0x04
    7378:	ef cf       	rjmp	.-34     	; 0x7358 <normalize+0xa4>
    737a:	f7 01       	movw	r30, r14
    737c:	04 81       	ldd	r16, Z+4	; 0x04
    737e:	15 81       	ldd	r17, Z+5	; 0x05
    7380:	17 ff       	sbrs	r17, 7
    7382:	0b c0       	rjmp	.+22     	; 0x739a <normalize+0xe6>
    7384:	f7 01       	movw	r30, r14
    7386:	86 81       	ldd	r24, Z+6	; 0x06
    7388:	97 81       	ldd	r25, Z+7	; 0x07
    738a:	01 97       	sbiw	r24, 0x01	; 1
    738c:	97 83       	std	Z+7, r25	; 0x07
    738e:	86 83       	std	Z+6, r24	; 0x06
    7390:	08 5e       	subi	r16, 0xE8	; 232
    7392:	1f 4f       	sbci	r17, 0xFF	; 255
    7394:	15 83       	std	Z+5, r17	; 0x05
    7396:	04 83       	std	Z+4, r16	; 0x04
    7398:	f0 cf       	rjmp	.-32     	; 0x737a <normalize+0xc6>
    739a:	f7 01       	movw	r30, r14
    739c:	80 85       	ldd	r24, Z+8	; 0x08
    739e:	91 85       	ldd	r25, Z+9	; 0x09
    73a0:	8c 30       	cpi	r24, 0x0C	; 12
    73a2:	91 05       	cpc	r25, r1
    73a4:	5c f0       	brlt	.+22     	; 0x73bc <normalize+0x108>
    73a6:	f7 01       	movw	r30, r14
    73a8:	22 85       	ldd	r18, Z+10	; 0x0a
    73aa:	33 85       	ldd	r19, Z+11	; 0x0b
    73ac:	2f 5f       	subi	r18, 0xFF	; 255
    73ae:	3f 4f       	sbci	r19, 0xFF	; 255
    73b0:	33 87       	std	Z+11, r19	; 0x0b
    73b2:	22 87       	std	Z+10, r18	; 0x0a
    73b4:	0c 97       	sbiw	r24, 0x0c	; 12
    73b6:	91 87       	std	Z+9, r25	; 0x09
    73b8:	80 87       	std	Z+8, r24	; 0x08
    73ba:	ef cf       	rjmp	.-34     	; 0x739a <normalize+0xe6>
    73bc:	f7 01       	movw	r30, r14
    73be:	80 85       	ldd	r24, Z+8	; 0x08
    73c0:	91 85       	ldd	r25, Z+9	; 0x09
    73c2:	97 ff       	sbrs	r25, 7
    73c4:	2d c0       	rjmp	.+90     	; 0x7420 <normalize+0x16c>
    73c6:	f7 01       	movw	r30, r14
    73c8:	22 85       	ldd	r18, Z+10	; 0x0a
    73ca:	33 85       	ldd	r19, Z+11	; 0x0b
    73cc:	21 50       	subi	r18, 0x01	; 1
    73ce:	31 09       	sbc	r19, r1
    73d0:	33 87       	std	Z+11, r19	; 0x0b
    73d2:	22 87       	std	Z+10, r18	; 0x0a
    73d4:	0c 96       	adiw	r24, 0x0c	; 12
    73d6:	91 87       	std	Z+9, r25	; 0x09
    73d8:	80 87       	std	Z+8, r24	; 0x08
    73da:	f0 cf       	rjmp	.-32     	; 0x73bc <normalize+0x108>
    73dc:	f7 01       	movw	r30, r14
    73de:	c6 80       	ldd	r12, Z+6	; 0x06
    73e0:	d7 80       	ldd	r13, Z+7	; 0x07
    73e2:	a0 84       	ldd	r10, Z+8	; 0x08
    73e4:	b1 84       	ldd	r11, Z+9	; 0x09
    73e6:	b4 01       	movw	r22, r8
    73e8:	c5 01       	movw	r24, r10
    73ea:	58 dd       	rcall	.-1360   	; 0x6e9c <Days_Per_Month>
    73ec:	8c 15       	cp	r24, r12
    73ee:	9d 05       	cpc	r25, r13
    73f0:	84 f5       	brge	.+96     	; 0x7452 <normalize+0x19e>
    73f2:	c8 1a       	sub	r12, r24
    73f4:	d9 0a       	sbc	r13, r25
    73f6:	f7 01       	movw	r30, r14
    73f8:	d7 82       	std	Z+7, r13	; 0x07
    73fa:	c6 82       	std	Z+6, r12	; 0x06
    73fc:	c5 01       	movw	r24, r10
    73fe:	01 96       	adiw	r24, 0x01	; 1
    7400:	91 87       	std	Z+9, r25	; 0x09
    7402:	80 87       	std	Z+8, r24	; 0x08
    7404:	0c 97       	sbiw	r24, 0x0c	; 12
    7406:	54 f3       	brlt	.-44     	; 0x73dc <normalize+0x128>
    7408:	fb e0       	ldi	r31, 0x0B	; 11
    740a:	af 1a       	sub	r10, r31
    740c:	b1 08       	sbc	r11, r1
    740e:	f7 01       	movw	r30, r14
    7410:	b1 86       	std	Z+9, r11	; 0x09
    7412:	a0 86       	std	Z+8, r10	; 0x08
    7414:	ff ef       	ldi	r31, 0xFF	; 255
    7416:	8f 1a       	sub	r8, r31
    7418:	9f 0a       	sbc	r9, r31
    741a:	f7 01       	movw	r30, r14
    741c:	93 86       	std	Z+11, r9	; 0x0b
    741e:	82 86       	std	Z+10, r8	; 0x0a
    7420:	f7 01       	movw	r30, r14
    7422:	82 84       	ldd	r8, Z+10	; 0x0a
    7424:	93 84       	ldd	r9, Z+11	; 0x0b
    7426:	da cf       	rjmp	.-76     	; 0x73dc <normalize+0x128>
    7428:	f7 01       	movw	r30, r14
    742a:	80 85       	ldd	r24, Z+8	; 0x08
    742c:	91 85       	ldd	r25, Z+9	; 0x09
    742e:	9c 01       	movw	r18, r24
    7430:	21 50       	subi	r18, 0x01	; 1
    7432:	31 09       	sbc	r19, r1
    7434:	37 fd       	sbrc	r19, 7
    7436:	16 c0       	rjmp	.+44     	; 0x7464 <normalize+0x1b0>
    7438:	31 87       	std	Z+9, r19	; 0x09
    743a:	20 87       	std	Z+8, r18	; 0x08
    743c:	f7 01       	movw	r30, r14
    743e:	62 85       	ldd	r22, Z+10	; 0x0a
    7440:	73 85       	ldd	r23, Z+11	; 0x0b
    7442:	80 85       	ldd	r24, Z+8	; 0x08
    7444:	91 85       	ldd	r25, Z+9	; 0x09
    7446:	2a dd       	rcall	.-1452   	; 0x6e9c <Days_Per_Month>
    7448:	88 0d       	add	r24, r8
    744a:	99 1d       	adc	r25, r9
    744c:	f7 01       	movw	r30, r14
    744e:	97 83       	std	Z+7, r25	; 0x07
    7450:	86 83       	std	Z+6, r24	; 0x06
    7452:	f7 01       	movw	r30, r14
    7454:	86 80       	ldd	r8, Z+6	; 0x06
    7456:	97 80       	ldd	r9, Z+7	; 0x07
    7458:	a2 84       	ldd	r10, Z+10	; 0x0a
    745a:	b3 84       	ldd	r11, Z+11	; 0x0b
    745c:	18 14       	cp	r1, r8
    745e:	19 04       	cpc	r1, r9
    7460:	1c f7       	brge	.-58     	; 0x7428 <normalize+0x174>
    7462:	0b c0       	rjmp	.+22     	; 0x747a <normalize+0x1c6>
    7464:	0b 96       	adiw	r24, 0x0b	; 11
    7466:	f7 01       	movw	r30, r14
    7468:	91 87       	std	Z+9, r25	; 0x09
    746a:	80 87       	std	Z+8, r24	; 0x08
    746c:	f1 e0       	ldi	r31, 0x01	; 1
    746e:	af 1a       	sub	r10, r31
    7470:	b1 08       	sbc	r11, r1
    7472:	f7 01       	movw	r30, r14
    7474:	b3 86       	std	Z+11, r11	; 0x0b
    7476:	a2 86       	std	Z+10, r10	; 0x0a
    7478:	e1 cf       	rjmp	.-62     	; 0x743c <normalize+0x188>
    747a:	a5 01       	movw	r20, r10
    747c:	44 59       	subi	r20, 0x94	; 148
    747e:	58 4f       	sbci	r21, 0xF8	; 248
    7480:	58 87       	std	Y+8, r21	; 0x08
    7482:	4f 83       	std	Y+7, r20	; 0x07
    7484:	35 01       	movw	r6, r10
    7486:	56 e4       	ldi	r21, 0x46	; 70
    7488:	65 1a       	sub	r6, r21
    748a:	71 08       	sbc	r7, r1
    748c:	89 e8       	ldi	r24, 0x89	; 137
    748e:	68 16       	cp	r6, r24
    7490:	71 04       	cpc	r7, r1
    7492:	08 f0       	brcs	.+2      	; 0x7496 <normalize+0x1e2>
    7494:	9b c0       	rjmp	.+310    	; 0x75cc <normalize+0x318>
    7496:	c0 84       	ldd	r12, Z+8	; 0x08
    7498:	d1 84       	ldd	r13, Z+9	; 0x09
    749a:	9c e0       	ldi	r25, 0x0C	; 12
    749c:	c9 16       	cp	r12, r25
    749e:	d1 04       	cpc	r13, r1
    74a0:	08 f0       	brcs	.+2      	; 0x74a4 <normalize+0x1f0>
    74a2:	94 c0       	rjmp	.+296    	; 0x75cc <normalize+0x318>
    74a4:	24 01       	movw	r4, r8
    74a6:	e1 e0       	ldi	r30, 0x01	; 1
    74a8:	4e 1a       	sub	r4, r30
    74aa:	51 08       	sbc	r5, r1
    74ac:	6f 81       	ldd	r22, Y+7	; 0x07
    74ae:	78 85       	ldd	r23, Y+8	; 0x08
    74b0:	c6 01       	movw	r24, r12
    74b2:	f4 dc       	rcall	.-1560   	; 0x6e9c <Days_Per_Month>
    74b4:	48 16       	cp	r4, r24
    74b6:	59 06       	cpc	r5, r25
    74b8:	0c f0       	brlt	.+2      	; 0x74bc <normalize+0x208>
    74ba:	88 c0       	rjmp	.+272    	; 0x75cc <normalize+0x318>
    74bc:	08 31       	cpi	r16, 0x18	; 24
    74be:	11 05       	cpc	r17, r1
    74c0:	0c f0       	brlt	.+2      	; 0x74c4 <normalize+0x210>
    74c2:	84 c0       	rjmp	.+264    	; 0x75cc <normalize+0x318>
    74c4:	fc e3       	ldi	r31, 0x3C	; 60
    74c6:	2f 16       	cp	r2, r31
    74c8:	31 04       	cpc	r3, r1
    74ca:	0c f0       	brlt	.+2      	; 0x74ce <normalize+0x21a>
    74cc:	7f c0       	rjmp	.+254    	; 0x75cc <normalize+0x318>
    74ce:	4d 81       	ldd	r20, Y+5	; 0x05
    74d0:	5e 81       	ldd	r21, Y+6	; 0x06
    74d2:	4c 33       	cpi	r20, 0x3C	; 60
    74d4:	51 05       	cpc	r21, r1
    74d6:	0c f0       	brlt	.+2      	; 0x74da <normalize+0x226>
    74d8:	79 c0       	rjmp	.+242    	; 0x75cc <normalize+0x318>
    74da:	2d e6       	ldi	r18, 0x6D	; 109
    74dc:	31 e0       	ldi	r19, 0x01	; 1
    74de:	d3 01       	movw	r26, r6
    74e0:	0e 94 df ec 	call	0x1d9be	; 0x1d9be <__usmulhisi3>
    74e4:	f6 01       	movw	r30, r12
    74e6:	ee 0f       	add	r30, r30
    74e8:	ff 1f       	adc	r31, r31
    74ea:	e5 58       	subi	r30, 0x85	; 133
    74ec:	fd 4f       	sbci	r31, 0xFD	; 253
    74ee:	20 81       	ld	r18, Z
    74f0:	31 81       	ldd	r19, Z+1	; 0x01
    74f2:	dc 01       	movw	r26, r24
    74f4:	cb 01       	movw	r24, r22
    74f6:	82 0f       	add	r24, r18
    74f8:	93 1f       	adc	r25, r19
    74fa:	a1 1d       	adc	r26, r1
    74fc:	b1 1d       	adc	r27, r1
    74fe:	05 2c       	mov	r0, r5
    7500:	00 0c       	add	r0, r0
    7502:	66 08       	sbc	r6, r6
    7504:	77 08       	sbc	r7, r7
    7506:	48 0e       	add	r4, r24
    7508:	59 1e       	adc	r5, r25
    750a:	6a 1e       	adc	r6, r26
    750c:	7b 1e       	adc	r7, r27
    750e:	1a 14       	cp	r1, r10
    7510:	1b 04       	cpc	r1, r11
    7512:	1c f4       	brge	.+6      	; 0x751a <normalize+0x266>
    7514:	51 e0       	ldi	r21, 0x01	; 1
    7516:	a5 1a       	sub	r10, r21
    7518:	b1 08       	sbc	r11, r1
    751a:	45 01       	movw	r8, r10
    751c:	95 94       	asr	r9
    751e:	87 94       	ror	r8
    7520:	95 94       	asr	r9
    7522:	87 94       	ror	r8
    7524:	88 ec       	ldi	r24, 0xC8	; 200
    7526:	a8 16       	cp	r10, r24
    7528:	b1 04       	cpc	r11, r1
    752a:	1c f0       	brlt	.+6      	; 0x7532 <normalize+0x27e>
    752c:	91 e0       	ldi	r25, 0x01	; 1
    752e:	89 1a       	sub	r8, r25
    7530:	91 08       	sbc	r9, r1
    7532:	09 2c       	mov	r0, r9
    7534:	00 0c       	add	r0, r0
    7536:	aa 08       	sbc	r10, r10
    7538:	bb 08       	sbc	r11, r11
    753a:	84 0c       	add	r8, r4
    753c:	95 1c       	adc	r9, r5
    753e:	a6 1c       	adc	r10, r6
    7540:	b7 1c       	adc	r11, r7
    7542:	24 01       	movw	r4, r8
    7544:	35 01       	movw	r6, r10
    7546:	e1 e1       	ldi	r30, 0x11	; 17
    7548:	4e 1a       	sub	r4, r30
    754a:	51 08       	sbc	r5, r1
    754c:	61 08       	sbc	r6, r1
    754e:	71 08       	sbc	r7, r1
    7550:	f2 e0       	ldi	r31, 0x02	; 2
    7552:	cf 16       	cp	r12, r31
    7554:	d1 04       	cpc	r13, r1
    7556:	64 f0       	brlt	.+24     	; 0x7570 <normalize+0x2bc>
    7558:	8f 81       	ldd	r24, Y+7	; 0x07
    755a:	98 85       	ldd	r25, Y+8	; 0x08
    755c:	7a dc       	rcall	.-1804   	; 0x6e52 <IS_Leap>
    755e:	89 2b       	or	r24, r25
    7560:	39 f0       	breq	.+14     	; 0x7570 <normalize+0x2bc>
    7562:	24 01       	movw	r4, r8
    7564:	35 01       	movw	r6, r10
    7566:	40 e1       	ldi	r20, 0x10	; 16
    7568:	44 1a       	sub	r4, r20
    756a:	51 08       	sbc	r5, r1
    756c:	61 08       	sbc	r6, r1
    756e:	71 08       	sbc	r7, r1
    7570:	a8 e1       	ldi	r26, 0x18	; 24
    7572:	b0 e0       	ldi	r27, 0x00	; 0
    7574:	a3 01       	movw	r20, r6
    7576:	92 01       	movw	r18, r4
    7578:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    757c:	01 2e       	mov	r0, r17
    757e:	00 0c       	add	r0, r0
    7580:	22 0b       	sbc	r18, r18
    7582:	33 0b       	sbc	r19, r19
    7584:	a9 01       	movw	r20, r18
    7586:	98 01       	movw	r18, r16
    7588:	26 0f       	add	r18, r22
    758a:	37 1f       	adc	r19, r23
    758c:	48 1f       	adc	r20, r24
    758e:	59 1f       	adc	r21, r25
    7590:	ac e3       	ldi	r26, 0x3C	; 60
    7592:	b0 e0       	ldi	r27, 0x00	; 0
    7594:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    7598:	81 01       	movw	r16, r2
    759a:	03 2c       	mov	r0, r3
    759c:	00 0c       	add	r0, r0
    759e:	22 0b       	sbc	r18, r18
    75a0:	33 0b       	sbc	r19, r19
    75a2:	a9 01       	movw	r20, r18
    75a4:	98 01       	movw	r18, r16
    75a6:	26 0f       	add	r18, r22
    75a8:	37 1f       	adc	r19, r23
    75aa:	48 1f       	adc	r20, r24
    75ac:	59 1f       	adc	r21, r25
    75ae:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    75b2:	ed 81       	ldd	r30, Y+5	; 0x05
    75b4:	fe 81       	ldd	r31, Y+6	; 0x06
    75b6:	8f 01       	movw	r16, r30
    75b8:	ff 0f       	add	r31, r31
    75ba:	22 0b       	sbc	r18, r18
    75bc:	33 0b       	sbc	r19, r19
    75be:	48 01       	movw	r8, r16
    75c0:	59 01       	movw	r10, r18
    75c2:	86 0e       	add	r8, r22
    75c4:	97 1e       	adc	r9, r23
    75c6:	a8 1e       	adc	r10, r24
    75c8:	b9 1e       	adc	r11, r25
    75ca:	04 c0       	rjmp	.+8      	; 0x75d4 <normalize+0x320>
    75cc:	88 24       	eor	r8, r8
    75ce:	8a 94       	dec	r8
    75d0:	98 2c       	mov	r9, r8
    75d2:	54 01       	movw	r10, r8
    75d4:	49 85       	ldd	r20, Y+9	; 0x09
    75d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    75d8:	45 2b       	or	r20, r21
    75da:	e9 f0       	breq	.+58     	; 0x7616 <normalize+0x362>
    75dc:	ce 01       	movw	r24, r28
    75de:	01 96       	adiw	r24, 0x01	; 1
    75e0:	7c dd       	rcall	.-1288   	; 0x70da <gettimezone>
    75e2:	a9 81       	ldd	r26, Y+1	; 0x01
    75e4:	ba 81       	ldd	r27, Y+2	; 0x02
    75e6:	2c e3       	ldi	r18, 0x3C	; 60
    75e8:	30 e0       	ldi	r19, 0x00	; 0
    75ea:	0e 94 df ec 	call	0x1d9be	; 0x1d9be <__usmulhisi3>
    75ee:	2b 01       	movw	r4, r22
    75f0:	3c 01       	movw	r6, r24
    75f2:	c5 01       	movw	r24, r10
    75f4:	b4 01       	movw	r22, r8
    75f6:	e2 dd       	rcall	.-1084   	; 0x71bc <is_dst>
    75f8:	89 2b       	or	r24, r25
    75fa:	51 f0       	breq	.+20     	; 0x7610 <normalize+0x35c>
    75fc:	50 e1       	ldi	r21, 0x10	; 16
    75fe:	45 1a       	sub	r4, r21
    7600:	5e e0       	ldi	r21, 0x0E	; 14
    7602:	55 0a       	sbc	r5, r21
    7604:	61 08       	sbc	r6, r1
    7606:	71 08       	sbc	r7, r1
    7608:	cc 24       	eor	r12, r12
    760a:	c3 94       	inc	r12
    760c:	d1 2c       	mov	r13, r1
    760e:	08 c0       	rjmp	.+16     	; 0x7620 <normalize+0x36c>
    7610:	c1 2c       	mov	r12, r1
    7612:	d1 2c       	mov	r13, r1
    7614:	05 c0       	rjmp	.+10     	; 0x7620 <normalize+0x36c>
    7616:	c1 2c       	mov	r12, r1
    7618:	d1 2c       	mov	r13, r1
    761a:	41 2c       	mov	r4, r1
    761c:	51 2c       	mov	r5, r1
    761e:	32 01       	movw	r6, r4
    7620:	87 01       	movw	r16, r14
    7622:	a3 01       	movw	r20, r6
    7624:	92 01       	movw	r18, r4
    7626:	c5 01       	movw	r24, r10
    7628:	b4 01       	movw	r22, r8
    762a:	59 dc       	rcall	.-1870   	; 0x6ede <time_to_tm>
    762c:	c1 14       	cp	r12, r1
    762e:	d1 04       	cpc	r13, r1
    7630:	29 f0       	breq	.+10     	; 0x763c <normalize+0x388>
    7632:	21 e0       	ldi	r18, 0x01	; 1
    7634:	30 e0       	ldi	r19, 0x00	; 0
    7636:	f7 01       	movw	r30, r14
    7638:	31 8b       	std	Z+17, r19	; 0x11
    763a:	20 8b       	std	Z+16, r18	; 0x10
    763c:	2a 96       	adiw	r28, 0x0a	; 10
    763e:	e2 e1       	ldi	r30, 0x12	; 18
    7640:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

00007644 <timegm>:
    7644:	60 e0       	ldi	r22, 0x00	; 0
    7646:	70 e0       	ldi	r23, 0x00	; 0
    7648:	35 ce       	rjmp	.-918    	; 0x72b4 <normalize>
    764a:	08 95       	ret

0000764c <setdate_r>:
    764c:	cf 92       	push	r12
    764e:	df 92       	push	r13
    7650:	ef 92       	push	r14
    7652:	ff 92       	push	r15
    7654:	cf 93       	push	r28
    7656:	df 93       	push	r29
    7658:	cd b7       	in	r28, 0x3d	; 61
    765a:	de b7       	in	r29, 0x3e	; 62
    765c:	a0 97       	sbiw	r28, 0x20	; 32
    765e:	0f b6       	in	r0, 0x3f	; 63
    7660:	f8 94       	cli
    7662:	de bf       	out	0x3e, r29	; 62
    7664:	0f be       	out	0x3f, r0	; 63
    7666:	cd bf       	out	0x3d, r28	; 61
    7668:	98 a3       	std	Y+32, r25	; 0x20
    766a:	8f 8f       	std	Y+31, r24	; 0x1f
    766c:	1a 82       	std	Y+2, r1	; 0x02
    766e:	19 82       	std	Y+1, r1	; 0x01
    7670:	1c 82       	std	Y+4, r1	; 0x04
    7672:	1b 82       	std	Y+3, r1	; 0x03
    7674:	1e 82       	std	Y+6, r1	; 0x06
    7676:	1d 82       	std	Y+5, r1	; 0x05
    7678:	18 86       	std	Y+8, r1	; 0x08
    767a:	1f 82       	std	Y+7, r1	; 0x07
    767c:	1a 86       	std	Y+10, r1	; 0x0a
    767e:	19 86       	std	Y+9, r1	; 0x09
    7680:	1c 86       	std	Y+12, r1	; 0x0c
    7682:	1b 86       	std	Y+11, r1	; 0x0b
    7684:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7686:	98 a1       	ldd	r25, Y+32	; 0x20
    7688:	fc 01       	movw	r30, r24
    768a:	20 81       	ld	r18, Z
    768c:	20 32       	cpi	r18, 0x20	; 32
    768e:	21 f4       	brne	.+8      	; 0x7698 <setdate_r+0x4c>
    7690:	01 96       	adiw	r24, 0x01	; 1
    7692:	98 a3       	std	Y+32, r25	; 0x20
    7694:	8f 8f       	std	Y+31, r24	; 0x1f
    7696:	f6 cf       	rjmp	.-20     	; 0x7684 <setdate_r+0x38>
    7698:	4a e0       	ldi	r20, 0x0A	; 10
    769a:	50 e0       	ldi	r21, 0x00	; 0
    769c:	be 01       	movw	r22, r28
    769e:	61 5e       	subi	r22, 0xE1	; 225
    76a0:	7f 4f       	sbci	r23, 0xFF	; 255
    76a2:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
    76a6:	7c 87       	std	Y+12, r23	; 0x0c
    76a8:	6b 87       	std	Y+11, r22	; 0x0b
    76aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76ac:	98 a1       	ldd	r25, Y+32	; 0x20
    76ae:	fc 01       	movw	r30, r24
    76b0:	20 81       	ld	r18, Z
    76b2:	20 32       	cpi	r18, 0x20	; 32
    76b4:	21 f4       	brne	.+8      	; 0x76be <setdate_r+0x72>
    76b6:	01 96       	adiw	r24, 0x01	; 1
    76b8:	98 a3       	std	Y+32, r25	; 0x20
    76ba:	8f 8f       	std	Y+31, r24	; 0x1f
    76bc:	f6 cf       	rjmp	.-20     	; 0x76aa <setdate_r+0x5e>
    76be:	4a e0       	ldi	r20, 0x0A	; 10
    76c0:	50 e0       	ldi	r21, 0x00	; 0
    76c2:	be 01       	movw	r22, r28
    76c4:	61 5e       	subi	r22, 0xE1	; 225
    76c6:	7f 4f       	sbci	r23, 0xFF	; 255
    76c8:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
    76cc:	7a 87       	std	Y+10, r23	; 0x0a
    76ce:	69 87       	std	Y+9, r22	; 0x09
    76d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76d2:	98 a1       	ldd	r25, Y+32	; 0x20
    76d4:	fc 01       	movw	r30, r24
    76d6:	20 81       	ld	r18, Z
    76d8:	20 32       	cpi	r18, 0x20	; 32
    76da:	21 f4       	brne	.+8      	; 0x76e4 <setdate_r+0x98>
    76dc:	01 96       	adiw	r24, 0x01	; 1
    76de:	98 a3       	std	Y+32, r25	; 0x20
    76e0:	8f 8f       	std	Y+31, r24	; 0x1f
    76e2:	f6 cf       	rjmp	.-20     	; 0x76d0 <setdate_r+0x84>
    76e4:	4a e0       	ldi	r20, 0x0A	; 10
    76e6:	50 e0       	ldi	r21, 0x00	; 0
    76e8:	be 01       	movw	r22, r28
    76ea:	61 5e       	subi	r22, 0xE1	; 225
    76ec:	7f 4f       	sbci	r23, 0xFF	; 255
    76ee:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
    76f2:	78 87       	std	Y+8, r23	; 0x08
    76f4:	6f 83       	std	Y+7, r22	; 0x07
    76f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76f8:	98 a1       	ldd	r25, Y+32	; 0x20
    76fa:	fc 01       	movw	r30, r24
    76fc:	20 81       	ld	r18, Z
    76fe:	20 32       	cpi	r18, 0x20	; 32
    7700:	21 f4       	brne	.+8      	; 0x770a <setdate_r+0xbe>
    7702:	01 96       	adiw	r24, 0x01	; 1
    7704:	98 a3       	std	Y+32, r25	; 0x20
    7706:	8f 8f       	std	Y+31, r24	; 0x1f
    7708:	f6 cf       	rjmp	.-20     	; 0x76f6 <setdate_r+0xaa>
    770a:	4a e0       	ldi	r20, 0x0A	; 10
    770c:	50 e0       	ldi	r21, 0x00	; 0
    770e:	be 01       	movw	r22, r28
    7710:	61 5e       	subi	r22, 0xE1	; 225
    7712:	7f 4f       	sbci	r23, 0xFF	; 255
    7714:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
    7718:	7e 83       	std	Y+6, r23	; 0x06
    771a:	6d 83       	std	Y+5, r22	; 0x05
    771c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    771e:	f8 a1       	ldd	r31, Y+32	; 0x20
    7720:	80 81       	ld	r24, Z
    7722:	88 23       	and	r24, r24
    7724:	39 f0       	breq	.+14     	; 0x7734 <setdate_r+0xe8>
    7726:	80 32       	cpi	r24, 0x20	; 32
    7728:	11 f0       	breq	.+4      	; 0x772e <setdate_r+0xe2>
    772a:	8a 33       	cpi	r24, 0x3A	; 58
    772c:	19 f4       	brne	.+6      	; 0x7734 <setdate_r+0xe8>
    772e:	31 96       	adiw	r30, 0x01	; 1
    7730:	f8 a3       	std	Y+32, r31	; 0x20
    7732:	ef 8f       	std	Y+31, r30	; 0x1f
    7734:	4a e0       	ldi	r20, 0x0A	; 10
    7736:	50 e0       	ldi	r21, 0x00	; 0
    7738:	be 01       	movw	r22, r28
    773a:	61 5e       	subi	r22, 0xE1	; 225
    773c:	7f 4f       	sbci	r23, 0xFF	; 255
    773e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7740:	98 a1       	ldd	r25, Y+32	; 0x20
    7742:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
    7746:	7c 83       	std	Y+4, r23	; 0x04
    7748:	6b 83       	std	Y+3, r22	; 0x03
    774a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    774c:	f8 a1       	ldd	r31, Y+32	; 0x20
    774e:	80 81       	ld	r24, Z
    7750:	88 23       	and	r24, r24
    7752:	39 f0       	breq	.+14     	; 0x7762 <setdate_r+0x116>
    7754:	80 32       	cpi	r24, 0x20	; 32
    7756:	11 f0       	breq	.+4      	; 0x775c <setdate_r+0x110>
    7758:	8a 33       	cpi	r24, 0x3A	; 58
    775a:	19 f4       	brne	.+6      	; 0x7762 <setdate_r+0x116>
    775c:	31 96       	adiw	r30, 0x01	; 1
    775e:	f8 a3       	std	Y+32, r31	; 0x20
    7760:	ef 8f       	std	Y+31, r30	; 0x1f
    7762:	4a e0       	ldi	r20, 0x0A	; 10
    7764:	50 e0       	ldi	r21, 0x00	; 0
    7766:	be 01       	movw	r22, r28
    7768:	61 5e       	subi	r22, 0xE1	; 225
    776a:	7f 4f       	sbci	r23, 0xFF	; 255
    776c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    776e:	98 a1       	ldd	r25, Y+32	; 0x20
    7770:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
    7774:	7a 83       	std	Y+2, r23	; 0x02
    7776:	69 83       	std	Y+1, r22	; 0x01
    7778:	29 85       	ldd	r18, Y+9	; 0x09
    777a:	3a 85       	ldd	r19, Y+10	; 0x0a
    777c:	21 50       	subi	r18, 0x01	; 1
    777e:	31 09       	sbc	r19, r1
    7780:	3a 87       	std	Y+10, r19	; 0x0a
    7782:	29 87       	std	Y+9, r18	; 0x09
    7784:	8b 85       	ldd	r24, Y+11	; 0x0b
    7786:	9c 85       	ldd	r25, Y+12	; 0x0c
    7788:	ac 01       	movw	r20, r24
    778a:	42 5b       	subi	r20, 0xB2	; 178
    778c:	57 40       	sbci	r21, 0x07	; 7
    778e:	45 34       	cpi	r20, 0x45	; 69
    7790:	51 05       	cpc	r21, r1
    7792:	28 f0       	brcs	.+10     	; 0x779e <setdate_r+0x152>
    7794:	9f 93       	push	r25
    7796:	8f 93       	push	r24
    7798:	82 e7       	ldi	r24, 0x72	; 114
    779a:	97 e0       	ldi	r25, 0x07	; 7
    779c:	2c c0       	rjmp	.+88     	; 0x77f6 <setdate_r+0x1aa>
    779e:	8c 56       	subi	r24, 0x6C	; 108
    77a0:	97 40       	sbci	r25, 0x07	; 7
    77a2:	9c 87       	std	Y+12, r25	; 0x0c
    77a4:	8b 87       	std	Y+11, r24	; 0x0b
    77a6:	2c 30       	cpi	r18, 0x0C	; 12
    77a8:	31 05       	cpc	r19, r1
    77aa:	28 f0       	brcs	.+10     	; 0x77b6 <setdate_r+0x16a>
    77ac:	9f 93       	push	r25
    77ae:	8f 93       	push	r24
    77b0:	81 e6       	ldi	r24, 0x61	; 97
    77b2:	97 e0       	ldi	r25, 0x07	; 7
    77b4:	20 c0       	rjmp	.+64     	; 0x77f6 <setdate_r+0x1aa>
    77b6:	8f 81       	ldd	r24, Y+7	; 0x07
    77b8:	98 85       	ldd	r25, Y+8	; 0x08
    77ba:	9c 01       	movw	r18, r24
    77bc:	21 50       	subi	r18, 0x01	; 1
    77be:	31 09       	sbc	r19, r1
    77c0:	2f 31       	cpi	r18, 0x1F	; 31
    77c2:	31 05       	cpc	r19, r1
    77c4:	28 f0       	brcs	.+10     	; 0x77d0 <setdate_r+0x184>
    77c6:	9f 93       	push	r25
    77c8:	8f 93       	push	r24
    77ca:	80 e5       	ldi	r24, 0x50	; 80
    77cc:	97 e0       	ldi	r25, 0x07	; 7
    77ce:	13 c0       	rjmp	.+38     	; 0x77f6 <setdate_r+0x1aa>
    77d0:	8d 81       	ldd	r24, Y+5	; 0x05
    77d2:	9e 81       	ldd	r25, Y+6	; 0x06
    77d4:	88 31       	cpi	r24, 0x18	; 24
    77d6:	91 05       	cpc	r25, r1
    77d8:	28 f0       	brcs	.+10     	; 0x77e4 <setdate_r+0x198>
    77da:	9f 93       	push	r25
    77dc:	8f 93       	push	r24
    77de:	8e e3       	ldi	r24, 0x3E	; 62
    77e0:	97 e0       	ldi	r25, 0x07	; 7
    77e2:	09 c0       	rjmp	.+18     	; 0x77f6 <setdate_r+0x1aa>
    77e4:	8b 81       	ldd	r24, Y+3	; 0x03
    77e6:	9c 81       	ldd	r25, Y+4	; 0x04
    77e8:	8c 33       	cpi	r24, 0x3C	; 60
    77ea:	91 05       	cpc	r25, r1
    77ec:	78 f0       	brcs	.+30     	; 0x780c <setdate_r+0x1c0>
    77ee:	9f 93       	push	r25
    77f0:	8f 93       	push	r24
    77f2:	8d e2       	ldi	r24, 0x2D	; 45
    77f4:	97 e0       	ldi	r25, 0x07	; 7
    77f6:	1f 92       	push	r1
    77f8:	9f 93       	push	r25
    77fa:	8f 93       	push	r24
    77fc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7800:	0f 90       	pop	r0
    7802:	0f 90       	pop	r0
    7804:	0f 90       	pop	r0
    7806:	0f 90       	pop	r0
    7808:	0f 90       	pop	r0
    780a:	25 c0       	rjmp	.+74     	; 0x7856 <setdate_r+0x20a>
    780c:	ce 01       	movw	r24, r28
    780e:	01 96       	adiw	r24, 0x01	; 1
    7810:	19 df       	rcall	.-462    	; 0x7644 <timegm>
    7812:	6b 01       	movw	r12, r22
    7814:	7c 01       	movw	r14, r24
    7816:	6f 8b       	std	Y+23, r22	; 0x17
    7818:	78 8f       	std	Y+24, r23	; 0x18
    781a:	89 8f       	std	Y+25, r24	; 0x19
    781c:	9a 8f       	std	Y+26, r25	; 0x1a
    781e:	1b 8e       	std	Y+27, r1	; 0x1b
    7820:	1c 8e       	std	Y+28, r1	; 0x1c
    7822:	1d 8e       	std	Y+29, r1	; 0x1d
    7824:	1e 8e       	std	Y+30, r1	; 0x1e
    7826:	be 01       	movw	r22, r28
    7828:	69 5e       	subi	r22, 0xE9	; 233
    782a:	7f 4f       	sbci	r23, 0xFF	; 255
    782c:	80 e0       	ldi	r24, 0x00	; 0
    782e:	90 e0       	ldi	r25, 0x00	; 0
    7830:	08 db       	rcall	.-2544   	; 0x6e42 <clock_settime>
    7832:	b7 01       	movw	r22, r14
    7834:	a6 01       	movw	r20, r12
    7836:	81 e0       	ldi	r24, 0x01	; 1
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <rtc_init>
    783e:	81 11       	cpse	r24, r1
    7840:	0d c0       	rjmp	.+26     	; 0x785c <setdate_r+0x210>
    7842:	86 e1       	ldi	r24, 0x16	; 22
    7844:	97 e0       	ldi	r25, 0x07	; 7
    7846:	1f 92       	push	r1
    7848:	9f 93       	push	r25
    784a:	8f 93       	push	r24
    784c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7850:	0f 90       	pop	r0
    7852:	0f 90       	pop	r0
    7854:	0f 90       	pop	r0
    7856:	8f ef       	ldi	r24, 0xFF	; 255
    7858:	9f ef       	ldi	r25, 0xFF	; 255
    785a:	02 c0       	rjmp	.+4      	; 0x7860 <setdate_r+0x214>
    785c:	80 e0       	ldi	r24, 0x00	; 0
    785e:	90 e0       	ldi	r25, 0x00	; 0
    7860:	a0 96       	adiw	r28, 0x20	; 32
    7862:	0f b6       	in	r0, 0x3f	; 63
    7864:	f8 94       	cli
    7866:	de bf       	out	0x3e, r29	; 62
    7868:	0f be       	out	0x3f, r0	; 63
    786a:	cd bf       	out	0x3d, r28	; 61
    786c:	df 91       	pop	r29
    786e:	cf 91       	pop	r28
    7870:	ff 90       	pop	r15
    7872:	ef 90       	pop	r14
    7874:	df 90       	pop	r13
    7876:	cf 90       	pop	r12
    7878:	08 95       	ret

0000787a <setdate>:
    787a:	a8 e2       	ldi	r26, 0x28	; 40
    787c:	b0 e0       	ldi	r27, 0x00	; 0
    787e:	e3 e4       	ldi	r30, 0x43	; 67
    7880:	fc e3       	ldi	r31, 0x3C	; 60
    7882:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    7886:	84 e8       	ldi	r24, 0x84	; 132
    7888:	97 e0       	ldi	r25, 0x07	; 7
    788a:	1f 92       	push	r1
    788c:	9f 93       	push	r25
    788e:	8f 93       	push	r24
    7890:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7894:	40 91 ea 1c 	lds	r20, 0x1CEA	; 0x801cea <__iob>
    7898:	50 91 eb 1c 	lds	r21, 0x1CEB	; 0x801ceb <__iob+0x1>
    789c:	67 e2       	ldi	r22, 0x27	; 39
    789e:	70 e0       	ldi	r23, 0x00	; 0
    78a0:	ce 01       	movw	r24, r28
    78a2:	01 96       	adiw	r24, 0x01	; 1
    78a4:	0e 94 21 7b 	call	0xf642	; 0xf642 <fgets>
    78a8:	ce 01       	movw	r24, r28
    78aa:	01 96       	adiw	r24, 0x01	; 1
    78ac:	cf de       	rcall	.-610    	; 0x764c <setdate_r>
    78ae:	0f 90       	pop	r0
    78b0:	0f 90       	pop	r0
    78b2:	0f 90       	pop	r0
    78b4:	a8 96       	adiw	r28, 0x28	; 40
    78b6:	e2 e0       	ldi	r30, 0x02	; 2
    78b8:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

000078bc <find_dst>:
    78bc:	a8 e2       	ldi	r26, 0x28	; 40
    78be:	b0 e0       	ldi	r27, 0x00	; 0
    78c0:	e4 e6       	ldi	r30, 0x64	; 100
    78c2:	fc e3       	ldi	r31, 0x3C	; 60
    78c4:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    78c8:	3c 01       	movw	r6, r24
    78ca:	1a 01       	movw	r2, r20
    78cc:	2b 01       	movw	r4, r22
    78ce:	49 01       	movw	r8, r18
    78d0:	1c a3       	std	Y+36, r17	; 0x24
    78d2:	0b a3       	std	Y+35, r16	; 0x23
    78d4:	de a2       	std	Y+38, r13	; 0x26
    78d6:	cd a2       	std	Y+37, r12	; 0x25
    78d8:	b8 a6       	std	Y+40, r11	; 0x28
    78da:	af a2       	std	Y+39, r10	; 0x27
    78dc:	be 01       	movw	r22, r28
    78de:	61 5e       	subi	r22, 0xE1	; 225
    78e0:	7f 4f       	sbci	r23, 0xFF	; 255
    78e2:	ce 01       	movw	r24, r28
    78e4:	47 96       	adiw	r24, 0x17	; 23
    78e6:	1b dc       	rcall	.-1994   	; 0x711e <gettimeofday>
    78e8:	af 8d       	ldd	r26, Y+31	; 0x1f
    78ea:	b8 a1       	ldd	r27, Y+32	; 0x20
    78ec:	2c e3       	ldi	r18, 0x3C	; 60
    78ee:	30 e0       	ldi	r19, 0x00	; 0
    78f0:	0e 94 df ec 	call	0x1d9be	; 0x1d9be <__usmulhisi3>
    78f4:	5b 01       	movw	r10, r22
    78f6:	6c 01       	movw	r12, r24
    78f8:	61 14       	cp	r6, r1
    78fa:	71 04       	cpc	r7, r1
    78fc:	31 f0       	breq	.+12     	; 0x790a <find_dst+0x4e>
    78fe:	20 e1       	ldi	r18, 0x10	; 16
    7900:	a2 1a       	sub	r10, r18
    7902:	2e e0       	ldi	r18, 0x0E	; 14
    7904:	b2 0a       	sbc	r11, r18
    7906:	c1 08       	sbc	r12, r1
    7908:	d1 08       	sbc	r13, r1
    790a:	81 14       	cp	r8, r1
    790c:	91 04       	cpc	r9, r1
    790e:	39 f0       	breq	.+14     	; 0x791e <find_dst+0x62>
    7910:	4c e6       	ldi	r20, 0x6C	; 108
    7912:	84 1a       	sub	r8, r20
    7914:	47 e0       	ldi	r20, 0x07	; 7
    7916:	94 0a       	sbc	r9, r20
    7918:	9c 86       	std	Y+12, r9	; 0x0c
    791a:	8b 86       	std	Y+11, r8	; 0x0b
    791c:	11 c0       	rjmp	.+34     	; 0x7940 <find_dst+0x84>
    791e:	21 14       	cp	r2, r1
    7920:	31 04       	cpc	r3, r1
    7922:	41 04       	cpc	r4, r1
    7924:	51 04       	cpc	r5, r1
    7926:	21 f4       	brne	.+8      	; 0x7930 <find_dst+0x74>
    7928:	2f 88       	ldd	r2, Y+23	; 0x17
    792a:	38 8c       	ldd	r3, Y+24	; 0x18
    792c:	49 8c       	ldd	r4, Y+25	; 0x19
    792e:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7930:	8e 01       	movw	r16, r28
    7932:	0f 5f       	subi	r16, 0xFF	; 255
    7934:	1f 4f       	sbci	r17, 0xFF	; 255
    7936:	a6 01       	movw	r20, r12
    7938:	95 01       	movw	r18, r10
    793a:	c2 01       	movw	r24, r4
    793c:	b1 01       	movw	r22, r2
    793e:	cf da       	rcall	.-2658   	; 0x6ede <time_to_tm>
    7940:	8b a1       	ldd	r24, Y+35	; 0x23
    7942:	9c a1       	ldd	r25, Y+36	; 0x24
    7944:	01 97       	sbiw	r24, 0x01	; 1
    7946:	9a 87       	std	Y+10, r25	; 0x0a
    7948:	89 87       	std	Y+9, r24	; 0x09
    794a:	81 e0       	ldi	r24, 0x01	; 1
    794c:	90 e0       	ldi	r25, 0x00	; 0
    794e:	98 87       	std	Y+8, r25	; 0x08
    7950:	8f 83       	std	Y+7, r24	; 0x07
    7952:	8f a1       	ldd	r24, Y+39	; 0x27
    7954:	98 a5       	ldd	r25, Y+40	; 0x28
    7956:	9e 83       	std	Y+6, r25	; 0x06
    7958:	8d 83       	std	Y+5, r24	; 0x05
    795a:	1c 82       	std	Y+4, r1	; 0x04
    795c:	1b 82       	std	Y+3, r1	; 0x03
    795e:	1a 82       	std	Y+2, r1	; 0x02
    7960:	19 82       	std	Y+1, r1	; 0x01
    7962:	ce 01       	movw	r24, r28
    7964:	01 96       	adiw	r24, 0x01	; 1
    7966:	6e de       	rcall	.-804    	; 0x7644 <timegm>
    7968:	45 01       	movw	r8, r10
    796a:	56 01       	movw	r10, r12
    796c:	86 0e       	add	r8, r22
    796e:	97 1e       	adc	r9, r23
    7970:	a8 1e       	adc	r10, r24
    7972:	b9 1e       	adc	r11, r25
    7974:	8e 01       	movw	r16, r28
    7976:	0f 5f       	subi	r16, 0xFF	; 255
    7978:	1f 4f       	sbci	r17, 0xFF	; 255
    797a:	20 e0       	ldi	r18, 0x00	; 0
    797c:	30 e0       	ldi	r19, 0x00	; 0
    797e:	a9 01       	movw	r20, r18
    7980:	c5 01       	movw	r24, r10
    7982:	b4 01       	movw	r22, r8
    7984:	ac da       	rcall	.-2728   	; 0x6ede <time_to_tm>
    7986:	2d 85       	ldd	r18, Y+13	; 0x0d
    7988:	3e 85       	ldd	r19, Y+14	; 0x0e
    798a:	e7 e0       	ldi	r30, 0x07	; 7
    798c:	f0 e0       	ldi	r31, 0x00	; 0
    798e:	c9 01       	movw	r24, r18
    7990:	bf 01       	movw	r22, r30
    7992:	0e 94 70 ec 	call	0x1d8e0	; 0x1d8e0 <__divmodhi4>
    7996:	4d a1       	ldd	r20, Y+37	; 0x25
    7998:	5e a1       	ldd	r21, Y+38	; 0x26
    799a:	48 17       	cp	r20, r24
    799c:	59 07       	cpc	r21, r25
    799e:	21 f4       	brne	.+8      	; 0x79a8 <find_dst+0xec>
    79a0:	51 e0       	ldi	r21, 0x01	; 1
    79a2:	e5 1a       	sub	r14, r21
    79a4:	f1 08       	sbc	r15, r1
    79a6:	51 f0       	breq	.+20     	; 0x79bc <find_dst+0x100>
    79a8:	80 e8       	ldi	r24, 0x80	; 128
    79aa:	88 0e       	add	r8, r24
    79ac:	81 e5       	ldi	r24, 0x51	; 81
    79ae:	98 1e       	adc	r9, r24
    79b0:	81 e0       	ldi	r24, 0x01	; 1
    79b2:	a8 1e       	adc	r10, r24
    79b4:	b1 1c       	adc	r11, r1
    79b6:	2f 5f       	subi	r18, 0xFF	; 255
    79b8:	3f 4f       	sbci	r19, 0xFF	; 255
    79ba:	e9 cf       	rjmp	.-46     	; 0x798e <find_dst+0xd2>
    79bc:	c5 01       	movw	r24, r10
    79be:	b4 01       	movw	r22, r8
    79c0:	a8 96       	adiw	r28, 0x28	; 40
    79c2:	e2 e1       	ldi	r30, 0x12	; 18
    79c4:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

000079c8 <set_dst>:
    79c8:	4f 92       	push	r4
    79ca:	5f 92       	push	r5
    79cc:	6f 92       	push	r6
    79ce:	7f 92       	push	r7
    79d0:	af 92       	push	r10
    79d2:	bf 92       	push	r11
    79d4:	cf 92       	push	r12
    79d6:	df 92       	push	r13
    79d8:	ef 92       	push	r14
    79da:	ff 92       	push	r15
    79dc:	0f 93       	push	r16
    79de:	1f 93       	push	r17
    79e0:	cf 93       	push	r28
    79e2:	df 93       	push	r29
    79e4:	cd b7       	in	r28, 0x3d	; 61
    79e6:	de b7       	in	r29, 0x3e	; 62
    79e8:	2c 97       	sbiw	r28, 0x0c	; 12
    79ea:	0f b6       	in	r0, 0x3f	; 63
    79ec:	f8 94       	cli
    79ee:	de bf       	out	0x3e, r29	; 62
    79f0:	0f be       	out	0x3f, r0	; 63
    79f2:	cd bf       	out	0x3d, r28	; 61
    79f4:	2b 01       	movw	r4, r22
    79f6:	3c 01       	movw	r6, r24
    79f8:	67 2b       	or	r22, r23
    79fa:	68 2b       	or	r22, r24
    79fc:	69 2b       	or	r22, r25
    79fe:	51 f4       	brne	.+20     	; 0x7a14 <set_dst+0x4c>
    7a00:	be 01       	movw	r22, r28
    7a02:	67 5f       	subi	r22, 0xF7	; 247
    7a04:	7f 4f       	sbci	r23, 0xFF	; 255
    7a06:	ce 01       	movw	r24, r28
    7a08:	01 96       	adiw	r24, 0x01	; 1
    7a0a:	89 db       	rcall	.-2286   	; 0x711e <gettimeofday>
    7a0c:	49 80       	ldd	r4, Y+1	; 0x01
    7a0e:	5a 80       	ldd	r5, Y+2	; 0x02
    7a10:	6b 80       	ldd	r6, Y+3	; 0x03
    7a12:	7c 80       	ldd	r7, Y+4	; 0x04
    7a14:	80 91 a1 1a 	lds	r24, 0x1AA1	; 0x801aa1 <dst+0x8>
    7a18:	90 91 a2 1a 	lds	r25, 0x1AA2	; 0x801aa2 <dst+0x9>
    7a1c:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <dst+0xa>
    7a20:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <dst+0xb>
    7a24:	84 15       	cp	r24, r4
    7a26:	95 05       	cpc	r25, r5
    7a28:	a6 05       	cpc	r26, r6
    7a2a:	b7 05       	cpc	r27, r7
    7a2c:	50 f0       	brcs	.+20     	; 0x7a42 <set_dst+0x7a>
    7a2e:	84 19       	sub	r24, r4
    7a30:	95 09       	sbc	r25, r5
    7a32:	a6 09       	sbc	r26, r6
    7a34:	b7 09       	sbc	r27, r7
    7a36:	80 38       	cpi	r24, 0x80	; 128
    7a38:	91 45       	sbci	r25, 0x51	; 81
    7a3a:	a1 40       	sbci	r26, 0x01	; 1
    7a3c:	b1 05       	cpc	r27, r1
    7a3e:	70 f4       	brcc	.+28     	; 0x7a5c <set_dst+0x94>
    7a40:	42 c0       	rjmp	.+132    	; 0x7ac6 <set_dst+0xfe>
    7a42:	a3 01       	movw	r20, r6
    7a44:	92 01       	movw	r18, r4
    7a46:	28 1b       	sub	r18, r24
    7a48:	39 0b       	sbc	r19, r25
    7a4a:	4a 0b       	sbc	r20, r26
    7a4c:	5b 0b       	sbc	r21, r27
    7a4e:	da 01       	movw	r26, r20
    7a50:	c9 01       	movw	r24, r18
    7a52:	80 38       	cpi	r24, 0x80	; 128
    7a54:	91 45       	sbci	r25, 0x51	; 81
    7a56:	a1 40       	sbci	r26, 0x01	; 1
    7a58:	b1 05       	cpc	r27, r1
    7a5a:	a8 f1       	brcs	.+106    	; 0x7ac6 <set_dst+0xfe>
    7a5c:	40 92 a1 1a 	sts	0x1AA1, r4	; 0x801aa1 <dst+0x8>
    7a60:	50 92 a2 1a 	sts	0x1AA2, r5	; 0x801aa2 <dst+0x9>
    7a64:	60 92 a3 1a 	sts	0x1AA3, r6	; 0x801aa3 <dst+0xa>
    7a68:	70 92 a4 1a 	sts	0x1AA4, r7	; 0x801aa4 <dst+0xb>
    7a6c:	82 e0       	ldi	r24, 0x02	; 2
    7a6e:	a8 2e       	mov	r10, r24
    7a70:	b1 2c       	mov	r11, r1
    7a72:	c1 2c       	mov	r12, r1
    7a74:	d1 2c       	mov	r13, r1
    7a76:	92 e0       	ldi	r25, 0x02	; 2
    7a78:	e9 2e       	mov	r14, r25
    7a7a:	f1 2c       	mov	r15, r1
    7a7c:	03 e0       	ldi	r16, 0x03	; 3
    7a7e:	10 e0       	ldi	r17, 0x00	; 0
    7a80:	20 e0       	ldi	r18, 0x00	; 0
    7a82:	30 e0       	ldi	r19, 0x00	; 0
    7a84:	b3 01       	movw	r22, r6
    7a86:	a2 01       	movw	r20, r4
    7a88:	80 e0       	ldi	r24, 0x00	; 0
    7a8a:	90 e0       	ldi	r25, 0x00	; 0
    7a8c:	17 df       	rcall	.-466    	; 0x78bc <find_dst>
    7a8e:	60 93 99 1a 	sts	0x1A99, r22	; 0x801a99 <dst>
    7a92:	70 93 9a 1a 	sts	0x1A9A, r23	; 0x801a9a <dst+0x1>
    7a96:	80 93 9b 1a 	sts	0x1A9B, r24	; 0x801a9b <dst+0x2>
    7a9a:	90 93 9c 1a 	sts	0x1A9C, r25	; 0x801a9c <dst+0x3>
    7a9e:	ee 24       	eor	r14, r14
    7aa0:	e3 94       	inc	r14
    7aa2:	f1 2c       	mov	r15, r1
    7aa4:	0b e0       	ldi	r16, 0x0B	; 11
    7aa6:	10 e0       	ldi	r17, 0x00	; 0
    7aa8:	20 e0       	ldi	r18, 0x00	; 0
    7aaa:	30 e0       	ldi	r19, 0x00	; 0
    7aac:	b3 01       	movw	r22, r6
    7aae:	a2 01       	movw	r20, r4
    7ab0:	81 e0       	ldi	r24, 0x01	; 1
    7ab2:	90 e0       	ldi	r25, 0x00	; 0
    7ab4:	03 df       	rcall	.-506    	; 0x78bc <find_dst>
    7ab6:	60 93 9d 1a 	sts	0x1A9D, r22	; 0x801a9d <dst+0x4>
    7aba:	70 93 9e 1a 	sts	0x1A9E, r23	; 0x801a9e <dst+0x5>
    7abe:	80 93 9f 1a 	sts	0x1A9F, r24	; 0x801a9f <dst+0x6>
    7ac2:	90 93 a0 1a 	sts	0x1AA0, r25	; 0x801aa0 <dst+0x7>
    7ac6:	2c 96       	adiw	r28, 0x0c	; 12
    7ac8:	0f b6       	in	r0, 0x3f	; 63
    7aca:	f8 94       	cli
    7acc:	de bf       	out	0x3e, r29	; 62
    7ace:	0f be       	out	0x3f, r0	; 63
    7ad0:	cd bf       	out	0x3d, r28	; 61
    7ad2:	df 91       	pop	r29
    7ad4:	cf 91       	pop	r28
    7ad6:	1f 91       	pop	r17
    7ad8:	0f 91       	pop	r16
    7ada:	ff 90       	pop	r15
    7adc:	ef 90       	pop	r14
    7ade:	df 90       	pop	r13
    7ae0:	cf 90       	pop	r12
    7ae2:	bf 90       	pop	r11
    7ae4:	af 90       	pop	r10
    7ae6:	7f 90       	pop	r7
    7ae8:	6f 90       	pop	r6
    7aea:	5f 90       	pop	r5
    7aec:	4f 90       	pop	r4
    7aee:	08 95       	ret

00007af0 <asctime_r>:
    7af0:	0f 93       	push	r16
    7af2:	1f 93       	push	r17
    7af4:	cf 93       	push	r28
    7af6:	df 93       	push	r29
    7af8:	ec 01       	movw	r28, r24
    7afa:	8b 01       	movw	r16, r22
    7afc:	60 e0       	ldi	r22, 0x00	; 0
    7afe:	70 e0       	ldi	r23, 0x00	; 0
    7b00:	d9 db       	rcall	.-2126   	; 0x72b4 <normalize>
    7b02:	20 e2       	ldi	r18, 0x20	; 32
    7b04:	d8 01       	movw	r26, r16
    7b06:	82 2f       	mov	r24, r18
    7b08:	1d 92       	st	X+, r1
    7b0a:	8a 95       	dec	r24
    7b0c:	e9 f7       	brne	.-6      	; 0x7b08 <asctime_r+0x18>
    7b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b12:	84 59       	subi	r24, 0x94	; 148
    7b14:	98 4f       	sbci	r25, 0xF8	; 248
    7b16:	9f 93       	push	r25
    7b18:	8f 93       	push	r24
    7b1a:	89 81       	ldd	r24, Y+1	; 0x01
    7b1c:	8f 93       	push	r24
    7b1e:	88 81       	ld	r24, Y
    7b20:	8f 93       	push	r24
    7b22:	8b 81       	ldd	r24, Y+3	; 0x03
    7b24:	8f 93       	push	r24
    7b26:	8a 81       	ldd	r24, Y+2	; 0x02
    7b28:	8f 93       	push	r24
    7b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    7b2c:	8f 93       	push	r24
    7b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    7b30:	8f 93       	push	r24
    7b32:	8f 81       	ldd	r24, Y+7	; 0x07
    7b34:	8f 93       	push	r24
    7b36:	8e 81       	ldd	r24, Y+6	; 0x06
    7b38:	8f 93       	push	r24
    7b3a:	e8 85       	ldd	r30, Y+8	; 0x08
    7b3c:	f9 85       	ldd	r31, Y+9	; 0x09
    7b3e:	ee 0f       	add	r30, r30
    7b40:	ff 1f       	adc	r31, r31
    7b42:	ee 5e       	subi	r30, 0xEE	; 238
    7b44:	fe 4f       	sbci	r31, 0xFE	; 254
    7b46:	81 81       	ldd	r24, Z+1	; 0x01
    7b48:	8f 93       	push	r24
    7b4a:	80 81       	ld	r24, Z
    7b4c:	8f 93       	push	r24
    7b4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    7b50:	fd 85       	ldd	r31, Y+13	; 0x0d
    7b52:	ee 0f       	add	r30, r30
    7b54:	ff 1f       	adc	r31, r31
    7b56:	e4 5d       	subi	r30, 0xD4	; 212
    7b58:	fe 4f       	sbci	r31, 0xFE	; 254
    7b5a:	81 81       	ldd	r24, Z+1	; 0x01
    7b5c:	8f 93       	push	r24
    7b5e:	80 81       	ld	r24, Z
    7b60:	8f 93       	push	r24
    7b62:	85 ea       	ldi	r24, 0xA5	; 165
    7b64:	97 e0       	ldi	r25, 0x07	; 7
    7b66:	1f 92       	push	r1
    7b68:	9f 93       	push	r25
    7b6a:	8f 93       	push	r24
    7b6c:	1f 92       	push	r1
    7b6e:	2f 93       	push	r18
    7b70:	1f 93       	push	r17
    7b72:	0f 93       	push	r16
    7b74:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <snprintf_P>
    7b78:	ad b7       	in	r26, 0x3d	; 61
    7b7a:	be b7       	in	r27, 0x3e	; 62
    7b7c:	55 96       	adiw	r26, 0x15	; 21
    7b7e:	0f b6       	in	r0, 0x3f	; 63
    7b80:	f8 94       	cli
    7b82:	be bf       	out	0x3e, r27	; 62
    7b84:	0f be       	out	0x3f, r0	; 63
    7b86:	ad bf       	out	0x3d, r26	; 61
    7b88:	c8 01       	movw	r24, r16
    7b8a:	df 91       	pop	r29
    7b8c:	cf 91       	pop	r28
    7b8e:	1f 91       	pop	r17
    7b90:	0f 91       	pop	r16
    7b92:	08 95       	ret

00007b94 <asctime>:
    7b94:	60 e3       	ldi	r22, 0x30	; 48
    7b96:	78 e1       	ldi	r23, 0x18	; 24
    7b98:	ab cf       	rjmp	.-170    	; 0x7af0 <asctime_r>
    7b9a:	08 95       	ret

00007b9c <ctime_gm>:
    7b9c:	a6 e1       	ldi	r26, 0x16	; 22
    7b9e:	b0 e0       	ldi	r27, 0x00	; 0
    7ba0:	e4 ed       	ldi	r30, 0xD4	; 212
    7ba2:	fd e3       	ldi	r31, 0x3D	; 61
    7ba4:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    7ba8:	be 01       	movw	r22, r28
    7baa:	6f 5f       	subi	r22, 0xFF	; 255
    7bac:	7f 4f       	sbci	r23, 0xFF	; 255
    7bae:	75 da       	rcall	.-2838   	; 0x709a <gmtime_r>
    7bb0:	60 ef       	ldi	r22, 0xF0	; 240
    7bb2:	77 e1       	ldi	r23, 0x17	; 23
    7bb4:	9d df       	rcall	.-198    	; 0x7af0 <asctime_r>
    7bb6:	66 96       	adiw	r28, 0x16	; 22
    7bb8:	e2 e0       	ldi	r30, 0x02	; 2
    7bba:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00007bbe <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7bbe:	a2 e2       	ldi	r26, 0x22	; 34
    7bc0:	b0 e0       	ldi	r27, 0x00	; 0
    7bc2:	e5 ee       	ldi	r30, 0xE5	; 229
    7bc4:	fd e3       	ldi	r31, 0x3D	; 61
    7bc6:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    7bca:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7bcc:	40 e0       	ldi	r20, 0x00	; 0
    7bce:	50 e0       	ldi	r21, 0x00	; 0
    7bd0:	ba 01       	movw	r22, r20
    7bd2:	80 e0       	ldi	r24, 0x00	; 0
    7bd4:	90 e0       	ldi	r25, 0x00	; 0
    7bd6:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <rtc_init>
    7bda:	81 11       	cpse	r24, r1
    7bdc:	27 c0       	rjmp	.+78     	; 0x7c2c <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7bde:	80 ea       	ldi	r24, 0xA0	; 160
    7be0:	96 e0       	ldi	r25, 0x06	; 6
    7be2:	1f 92       	push	r1
    7be4:	9f 93       	push	r25
    7be6:	8f 93       	push	r24
    7be8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        printf("attempting rtc init\n");
    7bec:	8b e8       	ldi	r24, 0x8B	; 139
    7bee:	96 e0       	ldi	r25, 0x06	; 6
    7bf0:	1f 92       	push	r1
    7bf2:	9f 93       	push	r25
    7bf4:	8f 93       	push	r24
    7bf6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7bfa:	40 e0       	ldi	r20, 0x00	; 0
    7bfc:	50 e0       	ldi	r21, 0x00	; 0
    7bfe:	ba 01       	movw	r22, r20
    7c00:	81 e0       	ldi	r24, 0x01	; 1
    7c02:	90 e0       	ldi	r25, 0x00	; 0
    7c04:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <rtc_init>
    7c08:	0f 90       	pop	r0
    7c0a:	0f 90       	pop	r0
    7c0c:	0f 90       	pop	r0
    7c0e:	0f 90       	pop	r0
    7c10:	0f 90       	pop	r0
    7c12:	0f 90       	pop	r0
    7c14:	81 11       	cpse	r24, r1
    7c16:	0a c0       	rjmp	.+20     	; 0x7c2c <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7c18:	84 e7       	ldi	r24, 0x74	; 116
    7c1a:	96 e0       	ldi	r25, 0x06	; 6
    7c1c:	1f 92       	push	r1
    7c1e:	9f 93       	push	r25
    7c20:	8f 93       	push	r24
    7c22:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7c26:	0f 90       	pop	r0
    7c28:	0f 90       	pop	r0
    7c2a:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7c2c:	ce 01       	movw	r24, r28
    7c2e:	01 96       	adiw	r24, 0x01	; 1
    7c30:	0e 94 15 30 	call	0x602a	; 0x602a <rtc_read>
    7c34:	88 23       	and	r24, r24
    7c36:	51 f0       	breq	.+20     	; 0x7c4c <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7c38:	ce 01       	movw	r24, r28
    7c3a:	01 96       	adiw	r24, 0x01	; 1
    7c3c:	03 dd       	rcall	.-1530   	; 0x7644 <timegm>
    7c3e:	6b 01       	movw	r12, r22
    7c40:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7c42:	67 2b       	or	r22, r23
    7c44:	68 2b       	or	r22, r24
    7c46:	69 2b       	or	r22, r25
    7c48:	c1 f4       	brne	.+48     	; 0x7c7a <initialize_clock+0xbc>
    7c4a:	0a c0       	rjmp	.+20     	; 0x7c60 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7c4c:	8a e5       	ldi	r24, 0x5A	; 90
    7c4e:	96 e0       	ldi	r25, 0x06	; 6
    7c50:	1f 92       	push	r1
    7c52:	9f 93       	push	r25
    7c54:	8f 93       	push	r24
    7c56:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7c5a:	0f 90       	pop	r0
    7c5c:	0f 90       	pop	r0
    7c5e:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7c60:	86 e3       	ldi	r24, 0x36	; 54
    7c62:	96 e0       	ldi	r25, 0x06	; 6
    7c64:	1f 92       	push	r1
    7c66:	9f 93       	push	r25
    7c68:	8f 93       	push	r24
    7c6a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7c6e:	0f 90       	pop	r0
    7c70:	0f 90       	pop	r0
    7c72:	0f 90       	pop	r0
    7c74:	c1 2c       	mov	r12, r1
    7c76:	d1 2c       	mov	r13, r1
    7c78:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7c7a:	18 a3       	std	Y+32, r17	; 0x20
    7c7c:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7c7e:	1a a2       	std	Y+34, r1	; 0x22
    7c80:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7c82:	ce 01       	movw	r24, r28
    7c84:	4f 96       	adiw	r24, 0x1f	; 31
    7c86:	3a da       	rcall	.-2956   	; 0x70fc <settimezone>

    ts.tv_sec = seconds;
    7c88:	cf 8a       	std	Y+23, r12	; 0x17
    7c8a:	d8 8e       	std	Y+24, r13	; 0x18
    7c8c:	e9 8e       	std	Y+25, r14	; 0x19
    7c8e:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7c90:	1b 8e       	std	Y+27, r1	; 0x1b
    7c92:	1c 8e       	std	Y+28, r1	; 0x1c
    7c94:	1d 8e       	std	Y+29, r1	; 0x1d
    7c96:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7c98:	be 01       	movw	r22, r28
    7c9a:	69 5e       	subi	r22, 0xE9	; 233
    7c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    7c9e:	80 e0       	ldi	r24, 0x00	; 0
    7ca0:	90 e0       	ldi	r25, 0x00	; 0
    7ca2:	cf d8       	rcall	.-3682   	; 0x6e42 <clock_settime>
}
    7ca4:	a2 96       	adiw	r28, 0x22	; 34
    7ca6:	e8 e0       	ldi	r30, 0x08	; 8
    7ca8:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

00007cac <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7cac:	a2 e2       	ldi	r26, 0x22	; 34
    7cae:	b0 e0       	ldi	r27, 0x00	; 0
    7cb0:	ec e5       	ldi	r30, 0x5C	; 92
    7cb2:	fe e3       	ldi	r31, 0x3E	; 62
    7cb4:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7cb8:	ce 01       	movw	r24, r28
    7cba:	01 96       	adiw	r24, 0x01	; 1
    7cbc:	0e 94 15 30 	call	0x602a	; 0x602a <rtc_read>
    7cc0:	88 23       	and	r24, r24
    7cc2:	21 f1       	breq	.+72     	; 0x7d0c <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7cc4:	ce 01       	movw	r24, r28
    7cc6:	01 96       	adiw	r24, 0x01	; 1
    7cc8:	bd dc       	rcall	.-1670   	; 0x7644 <timegm>
    7cca:	6f 8f       	std	Y+31, r22	; 0x1f
    7ccc:	78 a3       	std	Y+32, r23	; 0x20
    7cce:	89 a3       	std	Y+33, r24	; 0x21
    7cd0:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7cd2:	9f 93       	push	r25
    7cd4:	8f 93       	push	r24
    7cd6:	7f 93       	push	r23
    7cd8:	6f 93       	push	r22
    7cda:	84 e2       	ldi	r24, 0x24	; 36
    7cdc:	96 e0       	ldi	r25, 0x06	; 6
    7cde:	1f 92       	push	r1
    7ce0:	9f 93       	push	r25
    7ce2:	8f 93       	push	r24
    7ce4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7ce8:	ce 01       	movw	r24, r28
    7cea:	01 96       	adiw	r24, 0x01	; 1
    7cec:	53 df       	rcall	.-346    	; 0x7b94 <asctime>
    7cee:	9f 93       	push	r25
    7cf0:	8f 93       	push	r24
    7cf2:	83 e1       	ldi	r24, 0x13	; 19
    7cf4:	96 e0       	ldi	r25, 0x06	; 6
    7cf6:	1f 92       	push	r1
    7cf8:	9f 93       	push	r25
    7cfa:	8f 93       	push	r24
    7cfc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7d00:	0f b6       	in	r0, 0x3f	; 63
    7d02:	f8 94       	cli
    7d04:	de bf       	out	0x3e, r29	; 62
    7d06:	0f be       	out	0x3f, r0	; 63
    7d08:	cd bf       	out	0x3d, r28	; 61
    7d0a:	0a c0       	rjmp	.+20     	; 0x7d20 <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7d0c:	82 e0       	ldi	r24, 0x02	; 2
    7d0e:	96 e0       	ldi	r25, 0x06	; 6
    7d10:	1f 92       	push	r1
    7d12:	9f 93       	push	r25
    7d14:	8f 93       	push	r24
    7d16:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    7d1a:	0f 90       	pop	r0
    7d1c:	0f 90       	pop	r0
    7d1e:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7d20:	be 01       	movw	r22, r28
    7d22:	69 5e       	subi	r22, 0xE9	; 233
    7d24:	7f 4f       	sbci	r23, 0xFF	; 255
    7d26:	80 e0       	ldi	r24, 0x00	; 0
    7d28:	90 e0       	ldi	r25, 0x00	; 0
    7d2a:	0e 94 92 34 	call	0x6924	; 0x6924 <clock_gettime>
    seconds = ts.tv_sec;
    7d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    7d30:	98 8d       	ldd	r25, Y+24	; 0x18
    7d32:	29 8d       	ldd	r18, Y+25	; 0x19
    7d34:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7d36:	8f 8f       	std	Y+31, r24	; 0x1f
    7d38:	98 a3       	std	Y+32, r25	; 0x20
    7d3a:	29 a3       	std	Y+33, r18	; 0x21
    7d3c:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7d3e:	3f 93       	push	r19
    7d40:	2f 93       	push	r18
    7d42:	9f 93       	push	r25
    7d44:	8f 93       	push	r24
    7d46:	80 ef       	ldi	r24, 0xF0	; 240
    7d48:	95 e0       	ldi	r25, 0x05	; 5
    7d4a:	1f 92       	push	r1
    7d4c:	9f 93       	push	r25
    7d4e:	8f 93       	push	r24
    7d50:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7d54:	ce 01       	movw	r24, r28
    7d56:	4f 96       	adiw	r24, 0x1f	; 31
    7d58:	b5 d9       	rcall	.-3222   	; 0x70c4 <gmtime>
    7d5a:	1c df       	rcall	.-456    	; 0x7b94 <asctime>
    7d5c:	9f 93       	push	r25
    7d5e:	8f 93       	push	r24
    7d60:	8f ed       	ldi	r24, 0xDF	; 223
    7d62:	95 e0       	ldi	r25, 0x05	; 5
    7d64:	1f 92       	push	r1
    7d66:	9f 93       	push	r25
    7d68:	8f 93       	push	r24
    7d6a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
}
    7d6e:	0f b6       	in	r0, 0x3f	; 63
    7d70:	f8 94       	cli
    7d72:	de bf       	out	0x3e, r29	; 62
    7d74:	0f be       	out	0x3f, r0	; 63
    7d76:	cd bf       	out	0x3d, r28	; 61
    7d78:	a2 96       	adiw	r28, 0x22	; 34
    7d7a:	e2 e0       	ldi	r30, 0x02	; 2
    7d7c:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00007d80 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7d80:	fc 01       	movw	r30, r24
    7d82:	84 81       	ldd	r24, Z+4	; 0x04
    7d84:	95 81       	ldd	r25, Z+5	; 0x05
    7d86:	00 97       	sbiw	r24, 0x00	; 0
    7d88:	79 f0       	breq	.+30     	; 0x7da8 <_putc_buffer_fn+0x28>
    7d8a:	66 23       	and	r22, r22
    7d8c:	69 f0       	breq	.+26     	; 0x7da8 <_putc_buffer_fn+0x28>
    7d8e:	01 97       	sbiw	r24, 0x01	; 1
    7d90:	95 83       	std	Z+5, r25	; 0x05
    7d92:	84 83       	std	Z+4, r24	; 0x04
    7d94:	86 81       	ldd	r24, Z+6	; 0x06
    7d96:	97 81       	ldd	r25, Z+7	; 0x07
    7d98:	01 96       	adiw	r24, 0x01	; 1
    7d9a:	97 83       	std	Z+7, r25	; 0x07
    7d9c:	86 83       	std	Z+6, r24	; 0x06
    7d9e:	a2 81       	ldd	r26, Z+2	; 0x02
    7da0:	b3 81       	ldd	r27, Z+3	; 0x03
    7da2:	6d 93       	st	X+, r22
    7da4:	b3 83       	std	Z+3, r27	; 0x03
    7da6:	a2 83       	std	Z+2, r26	; 0x02
    7da8:	02 80       	ldd	r0, Z+2	; 0x02
    7daa:	f3 81       	ldd	r31, Z+3	; 0x03
    7dac:	e0 2d       	mov	r30, r0
    7dae:	10 82       	st	Z, r1
    7db0:	08 95       	ret

00007db2 <_putc_fn>:
    7db2:	fc 01       	movw	r30, r24
    7db4:	26 81       	ldd	r18, Z+6	; 0x06
    7db6:	37 81       	ldd	r19, Z+7	; 0x07
    7db8:	2f 5f       	subi	r18, 0xFF	; 255
    7dba:	3f 4f       	sbci	r19, 0xFF	; 255
    7dbc:	37 83       	std	Z+7, r19	; 0x07
    7dbe:	26 83       	std	Z+6, r18	; 0x06
    7dc0:	86 2f       	mov	r24, r22
    7dc2:	90 e0       	ldi	r25, 0x00	; 0
    7dc4:	0c 94 1b 7b 	jmp	0xf636	; 0xf636 <putchar>
    7dc8:	08 95       	ret

00007dca <bin2num>:
    7dca:	a0 e0       	ldi	r26, 0x00	; 0
    7dcc:	b0 e0       	ldi	r27, 0x00	; 0
    7dce:	eb ee       	ldi	r30, 0xEB	; 235
    7dd0:	fe e3       	ldi	r31, 0x3E	; 62
    7dd2:	0c 94 0c ed 	jmp	0x1da18	; 0x1da18 <__prologue_saves__+0xe>
    7dd6:	ea 01       	movw	r28, r20
    7dd8:	53 e0       	ldi	r21, 0x03	; 3
    7dda:	ee 0c       	add	r14, r14
    7ddc:	ff 1c       	adc	r15, r15
    7dde:	5a 95       	dec	r21
    7de0:	e1 f7       	brne	.-8      	; 0x7dda <bin2num+0x10>
    7de2:	fc 01       	movw	r30, r24
    7de4:	af 01       	movw	r20, r30
    7de6:	48 1b       	sub	r20, r24
    7de8:	59 0b       	sbc	r21, r25
    7dea:	c4 17       	cp	r28, r20
    7dec:	d5 07       	cpc	r29, r21
    7dee:	14 f0       	brlt	.+4      	; 0x7df4 <bin2num+0x2a>
    7df0:	11 92       	st	Z+, r1
    7df2:	f8 cf       	rjmp	.-16     	; 0x7de4 <bin2num+0x1a>
    7df4:	41 e0       	ldi	r20, 0x01	; 1
    7df6:	e4 1a       	sub	r14, r20
    7df8:	f1 08       	sbc	r15, r1
    7dfa:	5b 01       	movw	r10, r22
    7dfc:	42 e0       	ldi	r20, 0x02	; 2
    7dfe:	a4 1a       	sub	r10, r20
    7e00:	b1 08       	sbc	r11, r1
    7e02:	f7 fc       	sbrc	r15, 7
    7e04:	3b c0       	rjmp	.+118    	; 0x7e7c <bin2num+0xb2>
    7e06:	f7 01       	movw	r30, r14
    7e08:	43 e0       	ldi	r20, 0x03	; 3
    7e0a:	f5 95       	asr	r31
    7e0c:	e7 95       	ror	r30
    7e0e:	4a 95       	dec	r20
    7e10:	e1 f7       	brne	.-8      	; 0x7e0a <bin2num+0x40>
    7e12:	e0 0f       	add	r30, r16
    7e14:	f1 1f       	adc	r31, r17
    7e16:	40 81       	ld	r20, Z
    7e18:	50 e0       	ldi	r21, 0x00	; 0
    7e1a:	f7 01       	movw	r30, r14
    7e1c:	e7 70       	andi	r30, 0x07	; 7
    7e1e:	ff 27       	eor	r31, r31
    7e20:	02 c0       	rjmp	.+4      	; 0x7e26 <bin2num+0x5c>
    7e22:	55 95       	asr	r21
    7e24:	47 95       	ror	r20
    7e26:	ea 95       	dec	r30
    7e28:	e2 f7       	brpl	.-8      	; 0x7e22 <bin2num+0x58>
    7e2a:	41 70       	andi	r20, 0x01	; 1
    7e2c:	55 27       	eor	r21, r21
    7e2e:	dc 01       	movw	r26, r24
    7e30:	e0 e0       	ldi	r30, 0x00	; 0
    7e32:	f0 e0       	ldi	r31, 0x00	; 0
    7e34:	ec 17       	cp	r30, r28
    7e36:	fd 07       	cpc	r31, r29
    7e38:	ec f4       	brge	.+58     	; 0x7e74 <bin2num+0xaa>
    7e3a:	ea 15       	cp	r30, r10
    7e3c:	fb 05       	cpc	r31, r11
    7e3e:	4c f0       	brlt	.+18     	; 0x7e52 <bin2num+0x88>
    7e40:	dc 01       	movw	r26, r24
    7e42:	ae 0f       	add	r26, r30
    7e44:	bf 1f       	adc	r27, r31
    7e46:	1c 92       	st	X, r1
    7e48:	41 e0       	ldi	r20, 0x01	; 1
    7e4a:	e4 1a       	sub	r14, r20
    7e4c:	f1 08       	sbc	r15, r1
    7e4e:	ef 01       	movw	r28, r30
    7e50:	d8 cf       	rjmp	.-80     	; 0x7e02 <bin2num+0x38>
    7e52:	9c 90       	ld	r9, X
    7e54:	99 0c       	add	r9, r9
    7e56:	94 2a       	or	r9, r20
    7e58:	49 2d       	mov	r20, r9
    7e5a:	50 e0       	ldi	r21, 0x00	; 0
    7e5c:	42 17       	cp	r20, r18
    7e5e:	53 07       	cpc	r21, r19
    7e60:	24 f0       	brlt	.+8      	; 0x7e6a <bin2num+0xa0>
    7e62:	92 1a       	sub	r9, r18
    7e64:	41 e0       	ldi	r20, 0x01	; 1
    7e66:	50 e0       	ldi	r21, 0x00	; 0
    7e68:	02 c0       	rjmp	.+4      	; 0x7e6e <bin2num+0xa4>
    7e6a:	40 e0       	ldi	r20, 0x00	; 0
    7e6c:	50 e0       	ldi	r21, 0x00	; 0
    7e6e:	9d 92       	st	X+, r9
    7e70:	31 96       	adiw	r30, 0x01	; 1
    7e72:	e0 cf       	rjmp	.-64     	; 0x7e34 <bin2num+0x6a>
    7e74:	41 15       	cp	r20, r1
    7e76:	51 05       	cpc	r21, r1
    7e78:	01 f7       	brne	.-64     	; 0x7e3a <bin2num+0x70>
    7e7a:	e2 cf       	rjmp	.-60     	; 0x7e40 <bin2num+0x76>
    7e7c:	fc 01       	movw	r30, r24
    7e7e:	9f 01       	movw	r18, r30
    7e80:	28 1b       	sub	r18, r24
    7e82:	39 0b       	sbc	r19, r25
    7e84:	2c 17       	cp	r18, r28
    7e86:	3d 07       	cpc	r19, r29
    7e88:	4c f4       	brge	.+18     	; 0x7e9c <bin2num+0xd2>
    7e8a:	20 81       	ld	r18, Z
    7e8c:	2a 30       	cpi	r18, 0x0A	; 10
    7e8e:	10 f4       	brcc	.+4      	; 0x7e94 <bin2num+0xca>
    7e90:	20 5d       	subi	r18, 0xD0	; 208
    7e92:	01 c0       	rjmp	.+2      	; 0x7e96 <bin2num+0xcc>
    7e94:	29 5a       	subi	r18, 0xA9	; 169
    7e96:	20 83       	st	Z, r18
    7e98:	31 96       	adiw	r30, 0x01	; 1
    7e9a:	f1 cf       	rjmp	.-30     	; 0x7e7e <bin2num+0xb4>
    7e9c:	9e 01       	movw	r18, r28
    7e9e:	d7 ff       	sbrs	r29, 7
    7ea0:	02 c0       	rjmp	.+4      	; 0x7ea6 <bin2num+0xdc>
    7ea2:	20 e0       	ldi	r18, 0x00	; 0
    7ea4:	30 e0       	ldi	r19, 0x00	; 0
    7ea6:	c1 14       	cp	r12, r1
    7ea8:	d1 04       	cpc	r13, r1
    7eaa:	61 f0       	breq	.+24     	; 0x7ec4 <bin2num+0xfa>
    7eac:	61 50       	subi	r22, 0x01	; 1
    7eae:	71 09       	sbc	r23, r1
    7eb0:	26 17       	cp	r18, r22
    7eb2:	37 07       	cpc	r19, r23
    7eb4:	3c f4       	brge	.+14     	; 0x7ec4 <bin2num+0xfa>
    7eb6:	fc 01       	movw	r30, r24
    7eb8:	e2 0f       	add	r30, r18
    7eba:	f3 1f       	adc	r31, r19
    7ebc:	c0 82       	st	Z, r12
    7ebe:	21 96       	adiw	r28, 0x01	; 1
    7ec0:	2f 5f       	subi	r18, 0xFF	; 255
    7ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    7ec4:	fc 01       	movw	r30, r24
    7ec6:	e2 0f       	add	r30, r18
    7ec8:	f3 1f       	adc	r31, r19
    7eca:	10 82       	st	Z, r1
    7ecc:	0e 94 82 32 	call	0x6504	; 0x6504 <reverse>
    7ed0:	ce 01       	movw	r24, r28
    7ed2:	cd b7       	in	r28, 0x3d	; 61
    7ed4:	de b7       	in	r29, 0x3e	; 62
    7ed6:	eb e0       	ldi	r30, 0x0B	; 11
    7ed8:	0c 94 28 ed 	jmp	0x1da50	; 0x1da50 <__epilogue_restores__+0xe>

00007edc <pch_init>:
    7edc:	e5 ea       	ldi	r30, 0xA5	; 165
    7ede:	fa e1       	ldi	r31, 0x1A	; 26
    7ee0:	91 83       	std	Z+1, r25	; 0x01
    7ee2:	80 83       	st	Z, r24
    7ee4:	13 82       	std	Z+3, r1	; 0x03
    7ee6:	12 82       	std	Z+2, r1	; 0x02
    7ee8:	61 50       	subi	r22, 0x01	; 1
    7eea:	71 09       	sbc	r23, r1
    7eec:	75 83       	std	Z+5, r23	; 0x05
    7eee:	64 83       	std	Z+4, r22	; 0x04
    7ef0:	fc 01       	movw	r30, r24
    7ef2:	10 82       	st	Z, r1
    7ef4:	08 95       	ret

00007ef6 <pch>:
    7ef6:	20 91 a7 1a 	lds	r18, 0x1AA7	; 0x801aa7 <_pch+0x2>
    7efa:	30 91 a8 1a 	lds	r19, 0x1AA8	; 0x801aa8 <_pch+0x3>
    7efe:	60 91 a9 1a 	lds	r22, 0x1AA9	; 0x801aa9 <_pch+0x4>
    7f02:	70 91 aa 1a 	lds	r23, 0x1AAA	; 0x801aaa <_pch+0x5>
    7f06:	40 91 a5 1a 	lds	r20, 0x1AA5	; 0x801aa5 <_pch>
    7f0a:	50 91 a6 1a 	lds	r21, 0x1AA6	; 0x801aa6 <_pch+0x1>
    7f0e:	26 17       	cp	r18, r22
    7f10:	37 07       	cpc	r19, r23
    7f12:	64 f4       	brge	.+24     	; 0x7f2c <pch+0x36>
    7f14:	b9 01       	movw	r22, r18
    7f16:	6f 5f       	subi	r22, 0xFF	; 255
    7f18:	7f 4f       	sbci	r23, 0xFF	; 255
    7f1a:	70 93 a8 1a 	sts	0x1AA8, r23	; 0x801aa8 <_pch+0x3>
    7f1e:	60 93 a7 1a 	sts	0x1AA7, r22	; 0x801aa7 <_pch+0x2>
    7f22:	fa 01       	movw	r30, r20
    7f24:	e2 0f       	add	r30, r18
    7f26:	f3 1f       	adc	r31, r19
    7f28:	80 83       	st	Z, r24
    7f2a:	04 c0       	rjmp	.+8      	; 0x7f34 <pch+0x3e>
    7f2c:	fa 01       	movw	r30, r20
    7f2e:	e2 0f       	add	r30, r18
    7f30:	f3 1f       	adc	r31, r19
    7f32:	10 82       	st	Z, r1
    7f34:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <_pch+0x2>
    7f38:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <_pch+0x3>
    7f3c:	08 95       	ret

00007f3e <p_ntoa>:
    7f3e:	af 92       	push	r10
    7f40:	cf 92       	push	r12
    7f42:	df 92       	push	r13
    7f44:	ef 92       	push	r14
    7f46:	ff 92       	push	r15
    7f48:	0f 93       	push	r16
    7f4a:	1f 93       	push	r17
    7f4c:	cf 93       	push	r28
    7f4e:	df 93       	push	r29
    7f50:	dc 01       	movw	r26, r24
    7f52:	eb 01       	movw	r28, r22
    7f54:	fa 01       	movw	r30, r20
    7f56:	b9 01       	movw	r22, r18
    7f58:	98 01       	movw	r18, r16
    7f5a:	a6 01       	movw	r20, r12
    7f5c:	9a 2d       	mov	r25, r10
    7f5e:	a5 fa       	bst	r10, 5
    7f60:	cc 24       	eor	r12, r12
    7f62:	c0 f8       	bld	r12, 0
    7f64:	a6 fc       	sbrc	r10, 6
    7f66:	07 c0       	rjmp	.+14     	; 0x7f76 <p_ntoa+0x38>
    7f68:	a2 fc       	sbrc	r10, 2
    7f6a:	08 c0       	rjmp	.+16     	; 0x7f7c <p_ntoa+0x3e>
    7f6c:	a4 fe       	sbrs	r10, 4
    7f6e:	09 c0       	rjmp	.+18     	; 0x7f82 <p_ntoa+0x44>
    7f70:	00 e2       	ldi	r16, 0x20	; 32
    7f72:	10 e0       	ldi	r17, 0x00	; 0
    7f74:	08 c0       	rjmp	.+16     	; 0x7f86 <p_ntoa+0x48>
    7f76:	0d e2       	ldi	r16, 0x2D	; 45
    7f78:	10 e0       	ldi	r17, 0x00	; 0
    7f7a:	05 c0       	rjmp	.+10     	; 0x7f86 <p_ntoa+0x48>
    7f7c:	0b e2       	ldi	r16, 0x2B	; 43
    7f7e:	10 e0       	ldi	r17, 0x00	; 0
    7f80:	02 c0       	rjmp	.+4      	; 0x7f86 <p_ntoa+0x48>
    7f82:	00 e0       	ldi	r16, 0x00	; 0
    7f84:	10 e0       	ldi	r17, 0x00	; 0
    7f86:	95 ff       	sbrs	r25, 5
    7f88:	04 c0       	rjmp	.+8      	; 0x7f92 <p_ntoa+0x54>
    7f8a:	89 2f       	mov	r24, r25
    7f8c:	8a 70       	andi	r24, 0x0A	; 10
    7f8e:	09 f0       	breq	.+2      	; 0x7f92 <p_ntoa+0x54>
    7f90:	c1 2c       	mov	r12, r1
    7f92:	c0 fa       	bst	r12, 0
    7f94:	95 f9       	bld	r25, 5
    7f96:	89 2f       	mov	r24, r25
    7f98:	82 70       	andi	r24, 0x02	; 2
    7f9a:	c8 2e       	mov	r12, r24
    7f9c:	91 fd       	sbrc	r25, 1
    7f9e:	02 c0       	rjmp	.+4      	; 0x7fa4 <p_ntoa+0x66>
    7fa0:	40 e0       	ldi	r20, 0x00	; 0
    7fa2:	50 e0       	ldi	r21, 0x00	; 0
    7fa4:	89 2f       	mov	r24, r25
    7fa6:	83 70       	andi	r24, 0x03	; 3
    7fa8:	11 f4       	brne	.+4      	; 0x7fae <p_ntoa+0x70>
    7faa:	41 e0       	ldi	r20, 0x01	; 1
    7fac:	50 e0       	ldi	r21, 0x00	; 0
    7fae:	90 ff       	sbrs	r25, 0
    7fb0:	0c c0       	rjmp	.+24     	; 0x7fca <p_ntoa+0x8c>
    7fb2:	95 fd       	sbrc	r25, 5
    7fb4:	05 c0       	rjmp	.+10     	; 0x7fc0 <p_ntoa+0x82>
    7fb6:	c1 10       	cpse	r12, r1
    7fb8:	08 c0       	rjmp	.+16     	; 0x7fca <p_ntoa+0x8c>
    7fba:	41 e0       	ldi	r20, 0x01	; 1
    7fbc:	50 e0       	ldi	r21, 0x00	; 0
    7fbe:	05 c0       	rjmp	.+10     	; 0x7fca <p_ntoa+0x8c>
    7fc0:	94 75       	andi	r25, 0x54	; 84
    7fc2:	a7 01       	movw	r20, r14
    7fc4:	11 f0       	breq	.+4      	; 0x7fca <p_ntoa+0x8c>
    7fc6:	41 50       	subi	r20, 0x01	; 1
    7fc8:	51 09       	sbc	r21, r1
    7fca:	68 01       	movw	r12, r16
    7fcc:	7e 01       	movw	r14, r28
    7fce:	8d 01       	movw	r16, r26
    7fd0:	cf 01       	movw	r24, r30
    7fd2:	fb de       	rcall	.-522    	; 0x7dca <bin2num>
    7fd4:	df 91       	pop	r29
    7fd6:	cf 91       	pop	r28
    7fd8:	1f 91       	pop	r17
    7fda:	0f 91       	pop	r16
    7fdc:	ff 90       	pop	r15
    7fde:	ef 90       	pop	r14
    7fe0:	df 90       	pop	r13
    7fe2:	cf 90       	pop	r12
    7fe4:	af 90       	pop	r10
    7fe6:	08 95       	ret

00007fe8 <p_ftoa>:
    7fe8:	2f 92       	push	r2
    7fea:	3f 92       	push	r3
    7fec:	4f 92       	push	r4
    7fee:	5f 92       	push	r5
    7ff0:	6f 92       	push	r6
    7ff2:	7f 92       	push	r7
    7ff4:	8f 92       	push	r8
    7ff6:	9f 92       	push	r9
    7ff8:	af 92       	push	r10
    7ffa:	bf 92       	push	r11
    7ffc:	cf 92       	push	r12
    7ffe:	ef 92       	push	r14
    8000:	ff 92       	push	r15
    8002:	0f 93       	push	r16
    8004:	1f 93       	push	r17
    8006:	cf 93       	push	r28
    8008:	df 93       	push	r29
    800a:	4b 01       	movw	r8, r22
    800c:	5c 01       	movw	r10, r24
    800e:	1a 01       	movw	r2, r20
    8010:	38 01       	movw	r6, r16
    8012:	c6 fa       	bst	r12, 6
    8014:	cc 27       	eor	r28, r28
    8016:	c0 f9       	bld	r28, 0
    8018:	b9 01       	movw	r22, r18
    801a:	ca 01       	movw	r24, r20
    801c:	5f df       	rcall	.-322    	; 0x7edc <pch_init>
    801e:	20 e0       	ldi	r18, 0x00	; 0
    8020:	30 e0       	ldi	r19, 0x00	; 0
    8022:	a9 01       	movw	r20, r18
    8024:	c5 01       	movw	r24, r10
    8026:	b4 01       	movw	r22, r8
    8028:	0e 94 b4 ed 	call	0x1db68	; 0x1db68 <__cmpsf2>
    802c:	87 ff       	sbrs	r24, 7
    802e:	05 c0       	rjmp	.+10     	; 0x803a <p_ftoa+0x52>
    8030:	b7 fa       	bst	r11, 7
    8032:	b0 94       	com	r11
    8034:	b7 f8       	bld	r11, 7
    8036:	b0 94       	com	r11
    8038:	c1 e0       	ldi	r28, 0x01	; 1
    803a:	c0 fb       	bst	r28, 0
    803c:	c6 f8       	bld	r12, 6
    803e:	c6 fe       	sbrs	r12, 6
    8040:	02 c0       	rjmp	.+4      	; 0x8046 <p_ftoa+0x5e>
    8042:	8d e2       	ldi	r24, 0x2D	; 45
    8044:	07 c0       	rjmp	.+14     	; 0x8054 <p_ftoa+0x6c>
    8046:	c2 fe       	sbrs	r12, 2
    8048:	02 c0       	rjmp	.+4      	; 0x804e <p_ftoa+0x66>
    804a:	8b e2       	ldi	r24, 0x2B	; 43
    804c:	03 c0       	rjmp	.+6      	; 0x8054 <p_ftoa+0x6c>
    804e:	c4 fe       	sbrs	r12, 4
    8050:	02 c0       	rjmp	.+4      	; 0x8056 <p_ftoa+0x6e>
    8052:	80 e2       	ldi	r24, 0x20	; 32
    8054:	50 df       	rcall	.-352    	; 0x7ef6 <pch>
    8056:	e7 01       	movw	r28, r14
    8058:	f7 fe       	sbrs	r15, 7
    805a:	02 c0       	rjmp	.+4      	; 0x8060 <p_ftoa+0x78>
    805c:	c0 e0       	ldi	r28, 0x00	; 0
    805e:	d0 e0       	ldi	r29, 0x00	; 0
    8060:	20 e0       	ldi	r18, 0x00	; 0
    8062:	30 e0       	ldi	r19, 0x00	; 0
    8064:	a9 01       	movw	r20, r18
    8066:	c5 01       	movw	r24, r10
    8068:	b4 01       	movw	r22, r8
    806a:	0e 94 b4 ed 	call	0x1db68	; 0x1db68 <__cmpsf2>
    806e:	88 23       	and	r24, r24
    8070:	d1 f1       	breq	.+116    	; 0x80e6 <p_ftoa+0xfe>
    8072:	c1 fe       	sbrs	r12, 1
    8074:	11 c0       	rjmp	.+34     	; 0x8098 <p_ftoa+0xb0>
    8076:	8e 01       	movw	r16, r28
    8078:	60 e0       	ldi	r22, 0x00	; 0
    807a:	70 e0       	ldi	r23, 0x00	; 0
    807c:	80 e0       	ldi	r24, 0x00	; 0
    807e:	9f e3       	ldi	r25, 0x3F	; 63
    8080:	01 15       	cp	r16, r1
    8082:	11 05       	cpc	r17, r1
    8084:	69 f0       	breq	.+26     	; 0x80a0 <p_ftoa+0xb8>
    8086:	20 e0       	ldi	r18, 0x00	; 0
    8088:	30 e0       	ldi	r19, 0x00	; 0
    808a:	40 e2       	ldi	r20, 0x20	; 32
    808c:	51 e4       	ldi	r21, 0x41	; 65
    808e:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    8092:	01 50       	subi	r16, 0x01	; 1
    8094:	11 09       	sbc	r17, r1
    8096:	f4 cf       	rjmp	.-24     	; 0x8080 <p_ftoa+0x98>
    8098:	60 e0       	ldi	r22, 0x00	; 0
    809a:	70 e0       	ldi	r23, 0x00	; 0
    809c:	80 e0       	ldi	r24, 0x00	; 0
    809e:	9f e3       	ldi	r25, 0x3F	; 63
    80a0:	9b 01       	movw	r18, r22
    80a2:	ac 01       	movw	r20, r24
    80a4:	c5 01       	movw	r24, r10
    80a6:	b4 01       	movw	r22, r8
    80a8:	0e 94 50 ed 	call	0x1daa0	; 0x1daa0 <__addsf3>
    80ac:	4b 01       	movw	r8, r22
    80ae:	5c 01       	movw	r10, r24
    80b0:	ee 24       	eor	r14, r14
    80b2:	e3 94       	inc	r14
    80b4:	f1 2c       	mov	r15, r1
    80b6:	20 e0       	ldi	r18, 0x00	; 0
    80b8:	30 e0       	ldi	r19, 0x00	; 0
    80ba:	40 e2       	ldi	r20, 0x20	; 32
    80bc:	51 e4       	ldi	r21, 0x41	; 65
    80be:	c5 01       	movw	r24, r10
    80c0:	b4 01       	movw	r22, r8
    80c2:	0e 94 03 ef 	call	0x1de06	; 0x1de06 <__gesf2>
    80c6:	87 fd       	sbrc	r24, 7
    80c8:	11 c0       	rjmp	.+34     	; 0x80ec <p_ftoa+0x104>
    80ca:	2f ef       	ldi	r18, 0xFF	; 255
    80cc:	e2 1a       	sub	r14, r18
    80ce:	f2 0a       	sbc	r15, r18
    80d0:	20 e0       	ldi	r18, 0x00	; 0
    80d2:	30 e0       	ldi	r19, 0x00	; 0
    80d4:	40 e2       	ldi	r20, 0x20	; 32
    80d6:	51 e4       	ldi	r21, 0x41	; 65
    80d8:	c5 01       	movw	r24, r10
    80da:	b4 01       	movw	r22, r8
    80dc:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    80e0:	4b 01       	movw	r8, r22
    80e2:	5c 01       	movw	r10, r24
    80e4:	e8 cf       	rjmp	.-48     	; 0x80b6 <p_ftoa+0xce>
    80e6:	ee 24       	eor	r14, r14
    80e8:	e3 94       	inc	r14
    80ea:	f1 2c       	mov	r15, r1
    80ec:	8c 2d       	mov	r24, r12
    80ee:	88 72       	andi	r24, 0x28	; 40
    80f0:	80 32       	cpi	r24, 0x20	; 32
    80f2:	b9 f4       	brne	.+46     	; 0x8122 <p_ftoa+0x13a>
    80f4:	83 01       	movw	r16, r6
    80f6:	0e 19       	sub	r16, r14
    80f8:	1f 09       	sbc	r17, r15
    80fa:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <_pch+0x2>
    80fe:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <_pch+0x3>
    8102:	08 1b       	sub	r16, r24
    8104:	19 0b       	sbc	r17, r25
    8106:	c1 fe       	sbrs	r12, 1
    8108:	06 c0       	rjmp	.+12     	; 0x8116 <p_ftoa+0x12e>
    810a:	20 97       	sbiw	r28, 0x00	; 0
    810c:	21 f0       	breq	.+8      	; 0x8116 <p_ftoa+0x12e>
    810e:	0c 1b       	sub	r16, r28
    8110:	1d 0b       	sbc	r17, r29
    8112:	01 50       	subi	r16, 0x01	; 1
    8114:	11 09       	sbc	r17, r1
    8116:	10 16       	cp	r1, r16
    8118:	11 06       	cpc	r1, r17
    811a:	1c f4       	brge	.+6      	; 0x8122 <p_ftoa+0x13a>
    811c:	80 e3       	ldi	r24, 0x30	; 48
    811e:	eb de       	rcall	.-554    	; 0x7ef6 <pch>
    8120:	f8 cf       	rjmp	.-16     	; 0x8112 <p_ftoa+0x12a>
    8122:	c5 01       	movw	r24, r10
    8124:	b4 01       	movw	r22, r8
    8126:	0e 94 20 ee 	call	0x1dc40	; 0x1dc40 <__fixsfsi>
    812a:	2b 01       	movw	r4, r22
    812c:	3c 01       	movw	r6, r24
    812e:	80 e3       	ldi	r24, 0x30	; 48
    8130:	84 0d       	add	r24, r4
    8132:	e1 de       	rcall	.-574    	; 0x7ef6 <pch>
    8134:	b2 01       	movw	r22, r4
    8136:	55 0c       	add	r5, r5
    8138:	88 0b       	sbc	r24, r24
    813a:	99 0b       	sbc	r25, r25
    813c:	0e 94 53 ee 	call	0x1dca6	; 0x1dca6 <__floatsisf>
    8140:	9b 01       	movw	r18, r22
    8142:	ac 01       	movw	r20, r24
    8144:	c5 01       	movw	r24, r10
    8146:	b4 01       	movw	r22, r8
    8148:	0e 94 4f ed 	call	0x1da9e	; 0x1da9e <__subsf3>
    814c:	21 e0       	ldi	r18, 0x01	; 1
    814e:	e2 1a       	sub	r14, r18
    8150:	f1 08       	sbc	r15, r1
    8152:	20 e0       	ldi	r18, 0x00	; 0
    8154:	30 e0       	ldi	r19, 0x00	; 0
    8156:	40 e2       	ldi	r20, 0x20	; 32
    8158:	51 e4       	ldi	r21, 0x41	; 65
    815a:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    815e:	4b 01       	movw	r8, r22
    8160:	5c 01       	movw	r10, r24
    8162:	e1 14       	cp	r14, r1
    8164:	f1 04       	cpc	r15, r1
    8166:	e9 f6       	brne	.-70     	; 0x8122 <p_ftoa+0x13a>
    8168:	c1 fc       	sbrc	r12, 1
    816a:	1c c0       	rjmp	.+56     	; 0x81a4 <p_ftoa+0x1bc>
    816c:	80 e0       	ldi	r24, 0x00	; 0
    816e:	c3 de       	rcall	.-634    	; 0x7ef6 <pch>
    8170:	f1 01       	movw	r30, r2
    8172:	01 90       	ld	r0, Z+
    8174:	00 20       	and	r0, r0
    8176:	e9 f7       	brne	.-6      	; 0x8172 <p_ftoa+0x18a>
    8178:	31 97       	sbiw	r30, 0x01	; 1
    817a:	cf 01       	movw	r24, r30
    817c:	82 19       	sub	r24, r2
    817e:	93 09       	sbc	r25, r3
    8180:	df 91       	pop	r29
    8182:	cf 91       	pop	r28
    8184:	1f 91       	pop	r17
    8186:	0f 91       	pop	r16
    8188:	ff 90       	pop	r15
    818a:	ef 90       	pop	r14
    818c:	cf 90       	pop	r12
    818e:	bf 90       	pop	r11
    8190:	af 90       	pop	r10
    8192:	9f 90       	pop	r9
    8194:	8f 90       	pop	r8
    8196:	7f 90       	pop	r7
    8198:	6f 90       	pop	r6
    819a:	5f 90       	pop	r5
    819c:	4f 90       	pop	r4
    819e:	3f 90       	pop	r3
    81a0:	2f 90       	pop	r2
    81a2:	08 95       	ret
    81a4:	20 97       	sbiw	r28, 0x00	; 0
    81a6:	11 f3       	breq	.-60     	; 0x816c <p_ftoa+0x184>
    81a8:	8e e2       	ldi	r24, 0x2E	; 46
    81aa:	a5 de       	rcall	.-694    	; 0x7ef6 <pch>
    81ac:	c5 01       	movw	r24, r10
    81ae:	b4 01       	movw	r22, r8
    81b0:	0e 94 20 ee 	call	0x1dc40	; 0x1dc40 <__fixsfsi>
    81b4:	2b 01       	movw	r4, r22
    81b6:	3c 01       	movw	r6, r24
    81b8:	07 2e       	mov	r0, r23
    81ba:	00 0c       	add	r0, r0
    81bc:	88 0b       	sbc	r24, r24
    81be:	99 0b       	sbc	r25, r25
    81c0:	0e 94 53 ee 	call	0x1dca6	; 0x1dca6 <__floatsisf>
    81c4:	9b 01       	movw	r18, r22
    81c6:	ac 01       	movw	r20, r24
    81c8:	c5 01       	movw	r24, r10
    81ca:	b4 01       	movw	r22, r8
    81cc:	0e 94 4f ed 	call	0x1da9e	; 0x1da9e <__subsf3>
    81d0:	4b 01       	movw	r8, r22
    81d2:	5c 01       	movw	r10, r24
    81d4:	80 e3       	ldi	r24, 0x30	; 48
    81d6:	84 0d       	add	r24, r4
    81d8:	8e de       	rcall	.-740    	; 0x7ef6 <pch>
    81da:	21 97       	sbiw	r28, 0x01	; 1
    81dc:	20 e0       	ldi	r18, 0x00	; 0
    81de:	30 e0       	ldi	r19, 0x00	; 0
    81e0:	40 e2       	ldi	r20, 0x20	; 32
    81e2:	51 e4       	ldi	r21, 0x41	; 65
    81e4:	c5 01       	movw	r24, r10
    81e6:	b4 01       	movw	r22, r8
    81e8:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    81ec:	4b 01       	movw	r8, r22
    81ee:	5c 01       	movw	r10, r24
    81f0:	20 97       	sbiw	r28, 0x00	; 0
    81f2:	e1 f6       	brne	.-72     	; 0x81ac <p_ftoa+0x1c4>
    81f4:	bb cf       	rjmp	.-138    	; 0x816c <p_ftoa+0x184>

000081f6 <p_etoa>:
    81f6:	ad e0       	ldi	r26, 0x0D	; 13
    81f8:	b0 e0       	ldi	r27, 0x00	; 0
    81fa:	e1 e0       	ldi	r30, 0x01	; 1
    81fc:	f1 e4       	ldi	r31, 0x41	; 65
    81fe:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    8202:	4b 01       	movw	r8, r22
    8204:	5c 01       	movw	r10, r24
    8206:	5b 87       	std	Y+11, r21	; 0x0b
    8208:	4a 87       	std	Y+10, r20	; 0x0a
    820a:	1d 87       	std	Y+13, r17	; 0x0d
    820c:	0c 87       	std	Y+12, r16	; 0x0c
    820e:	3c 2c       	mov	r3, r12
    8210:	c6 fa       	bst	r12, 6
    8212:	11 27       	eor	r17, r17
    8214:	10 f9       	bld	r17, 0
    8216:	b9 01       	movw	r22, r18
    8218:	ca 01       	movw	r24, r20
    821a:	60 de       	rcall	.-832    	; 0x7edc <pch_init>
    821c:	20 e0       	ldi	r18, 0x00	; 0
    821e:	30 e0       	ldi	r19, 0x00	; 0
    8220:	a9 01       	movw	r20, r18
    8222:	c5 01       	movw	r24, r10
    8224:	b4 01       	movw	r22, r8
    8226:	0e 94 b4 ed 	call	0x1db68	; 0x1db68 <__cmpsf2>
    822a:	87 ff       	sbrs	r24, 7
    822c:	05 c0       	rjmp	.+10     	; 0x8238 <p_etoa+0x42>
    822e:	b7 fa       	bst	r11, 7
    8230:	b0 94       	com	r11
    8232:	b7 f8       	bld	r11, 7
    8234:	b0 94       	com	r11
    8236:	11 e0       	ldi	r17, 0x01	; 1
    8238:	10 fb       	bst	r17, 0
    823a:	36 f8       	bld	r3, 6
    823c:	36 fe       	sbrs	r3, 6
    823e:	02 c0       	rjmp	.+4      	; 0x8244 <p_etoa+0x4e>
    8240:	8d e2       	ldi	r24, 0x2D	; 45
    8242:	07 c0       	rjmp	.+14     	; 0x8252 <p_etoa+0x5c>
    8244:	32 fe       	sbrs	r3, 2
    8246:	02 c0       	rjmp	.+4      	; 0x824c <p_etoa+0x56>
    8248:	8b e2       	ldi	r24, 0x2B	; 43
    824a:	03 c0       	rjmp	.+6      	; 0x8252 <p_etoa+0x5c>
    824c:	34 fe       	sbrs	r3, 4
    824e:	02 c0       	rjmp	.+4      	; 0x8254 <p_etoa+0x5e>
    8250:	80 e2       	ldi	r24, 0x20	; 32
    8252:	51 de       	rcall	.-862    	; 0x7ef6 <pch>
    8254:	37 01       	movw	r6, r14
    8256:	f7 fe       	sbrs	r15, 7
    8258:	02 c0       	rjmp	.+4      	; 0x825e <p_etoa+0x68>
    825a:	61 2c       	mov	r6, r1
    825c:	71 2c       	mov	r7, r1
    825e:	19 86       	std	Y+9, r1	; 0x09
    8260:	18 86       	std	Y+8, r1	; 0x08
    8262:	20 e0       	ldi	r18, 0x00	; 0
    8264:	30 e0       	ldi	r19, 0x00	; 0
    8266:	a9 01       	movw	r20, r18
    8268:	c5 01       	movw	r24, r10
    826a:	b4 01       	movw	r22, r8
    826c:	0e 94 b4 ed 	call	0x1db68	; 0x1db68 <__cmpsf2>
    8270:	23 2d       	mov	r18, r3
    8272:	22 70       	andi	r18, 0x02	; 2
    8274:	22 2e       	mov	r2, r18
    8276:	88 23       	and	r24, r24
    8278:	09 f4       	brne	.+2      	; 0x827c <p_etoa+0x86>
    827a:	70 c0       	rjmp	.+224    	; 0x835c <p_etoa+0x166>
    827c:	22 23       	and	r18, r18
    827e:	b1 f0       	breq	.+44     	; 0x82ac <p_etoa+0xb6>
    8280:	83 01       	movw	r16, r6
    8282:	c1 2c       	mov	r12, r1
    8284:	d1 2c       	mov	r13, r1
    8286:	e1 2c       	mov	r14, r1
    8288:	2f e3       	ldi	r18, 0x3F	; 63
    828a:	f2 2e       	mov	r15, r18
    828c:	01 15       	cp	r16, r1
    828e:	11 05       	cpc	r17, r1
    8290:	91 f0       	breq	.+36     	; 0x82b6 <p_etoa+0xc0>
    8292:	20 e0       	ldi	r18, 0x00	; 0
    8294:	30 e0       	ldi	r19, 0x00	; 0
    8296:	40 e2       	ldi	r20, 0x20	; 32
    8298:	51 e4       	ldi	r21, 0x41	; 65
    829a:	c7 01       	movw	r24, r14
    829c:	b6 01       	movw	r22, r12
    829e:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    82a2:	6b 01       	movw	r12, r22
    82a4:	7c 01       	movw	r14, r24
    82a6:	01 50       	subi	r16, 0x01	; 1
    82a8:	11 09       	sbc	r17, r1
    82aa:	f0 cf       	rjmp	.-32     	; 0x828c <p_etoa+0x96>
    82ac:	c1 2c       	mov	r12, r1
    82ae:	d1 2c       	mov	r13, r1
    82b0:	e1 2c       	mov	r14, r1
    82b2:	9f e3       	ldi	r25, 0x3F	; 63
    82b4:	f9 2e       	mov	r15, r25
    82b6:	41 2c       	mov	r4, r1
    82b8:	51 2c       	mov	r5, r1
    82ba:	82 01       	movw	r16, r4
    82bc:	01 50       	subi	r16, 0x01	; 1
    82be:	11 09       	sbc	r17, r1
    82c0:	20 e0       	ldi	r18, 0x00	; 0
    82c2:	30 e0       	ldi	r19, 0x00	; 0
    82c4:	40 e8       	ldi	r20, 0x80	; 128
    82c6:	5f e3       	ldi	r21, 0x3F	; 63
    82c8:	c5 01       	movw	r24, r10
    82ca:	b4 01       	movw	r22, r8
    82cc:	0e 94 b4 ed 	call	0x1db68	; 0x1db68 <__cmpsf2>
    82d0:	87 ff       	sbrs	r24, 7
    82d2:	0c c0       	rjmp	.+24     	; 0x82ec <p_etoa+0xf6>
    82d4:	20 e0       	ldi	r18, 0x00	; 0
    82d6:	30 e0       	ldi	r19, 0x00	; 0
    82d8:	40 e2       	ldi	r20, 0x20	; 32
    82da:	51 e4       	ldi	r21, 0x41	; 65
    82dc:	c5 01       	movw	r24, r10
    82de:	b4 01       	movw	r22, r8
    82e0:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    82e4:	4b 01       	movw	r8, r22
    82e6:	5c 01       	movw	r10, r24
    82e8:	28 01       	movw	r4, r16
    82ea:	e7 cf       	rjmp	.-50     	; 0x82ba <p_etoa+0xc4>
    82ec:	82 01       	movw	r16, r4
    82ee:	0f 5f       	subi	r16, 0xFF	; 255
    82f0:	1f 4f       	sbci	r17, 0xFF	; 255
    82f2:	20 e0       	ldi	r18, 0x00	; 0
    82f4:	30 e0       	ldi	r19, 0x00	; 0
    82f6:	40 e2       	ldi	r20, 0x20	; 32
    82f8:	51 e4       	ldi	r21, 0x41	; 65
    82fa:	c5 01       	movw	r24, r10
    82fc:	b4 01       	movw	r22, r8
    82fe:	0e 94 03 ef 	call	0x1de06	; 0x1de06 <__gesf2>
    8302:	87 fd       	sbrc	r24, 7
    8304:	0c c0       	rjmp	.+24     	; 0x831e <p_etoa+0x128>
    8306:	20 e0       	ldi	r18, 0x00	; 0
    8308:	30 e0       	ldi	r19, 0x00	; 0
    830a:	40 e2       	ldi	r20, 0x20	; 32
    830c:	51 e4       	ldi	r21, 0x41	; 65
    830e:	c5 01       	movw	r24, r10
    8310:	b4 01       	movw	r22, r8
    8312:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    8316:	4b 01       	movw	r8, r22
    8318:	5c 01       	movw	r10, r24
    831a:	28 01       	movw	r4, r16
    831c:	e7 cf       	rjmp	.-50     	; 0x82ec <p_etoa+0xf6>
    831e:	a7 01       	movw	r20, r14
    8320:	96 01       	movw	r18, r12
    8322:	c5 01       	movw	r24, r10
    8324:	b4 01       	movw	r22, r8
    8326:	0e 94 50 ed 	call	0x1daa0	; 0x1daa0 <__addsf3>
    832a:	4b 01       	movw	r8, r22
    832c:	5c 01       	movw	r10, r24
    832e:	82 01       	movw	r16, r4
    8330:	3f ef       	ldi	r19, 0xFF	; 255
    8332:	43 1a       	sub	r4, r19
    8334:	53 0a       	sbc	r5, r19
    8336:	20 e0       	ldi	r18, 0x00	; 0
    8338:	30 e0       	ldi	r19, 0x00	; 0
    833a:	40 e2       	ldi	r20, 0x20	; 32
    833c:	51 e4       	ldi	r21, 0x41	; 65
    833e:	0e 94 03 ef 	call	0x1de06	; 0x1de06 <__gesf2>
    8342:	87 fd       	sbrc	r24, 7
    8344:	09 c0       	rjmp	.+18     	; 0x8358 <p_etoa+0x162>
    8346:	20 e0       	ldi	r18, 0x00	; 0
    8348:	30 e0       	ldi	r19, 0x00	; 0
    834a:	40 e2       	ldi	r20, 0x20	; 32
    834c:	51 e4       	ldi	r21, 0x41	; 65
    834e:	c5 01       	movw	r24, r10
    8350:	b4 01       	movw	r22, r8
    8352:	0e 94 b8 ed 	call	0x1db70	; 0x1db70 <__divsf3>
    8356:	e9 cf       	rjmp	.-46     	; 0x832a <p_etoa+0x134>
    8358:	08 87       	std	Y+8, r16	; 0x08
    835a:	19 87       	std	Y+9, r17	; 0x09
    835c:	85 e6       	ldi	r24, 0x65	; 101
    835e:	89 83       	std	Y+1, r24	; 0x01
    8360:	88 85       	ldd	r24, Y+8	; 0x08
    8362:	99 85       	ldd	r25, Y+9	; 0x09
    8364:	97 ff       	sbrs	r25, 7
    8366:	08 c0       	rjmp	.+16     	; 0x8378 <p_etoa+0x182>
    8368:	91 95       	neg	r25
    836a:	81 95       	neg	r24
    836c:	91 09       	sbc	r25, r1
    836e:	99 87       	std	Y+9, r25	; 0x09
    8370:	88 87       	std	Y+8, r24	; 0x08
    8372:	8d e2       	ldi	r24, 0x2D	; 45
    8374:	90 e0       	ldi	r25, 0x00	; 0
    8376:	02 c0       	rjmp	.+4      	; 0x837c <p_etoa+0x186>
    8378:	8b e2       	ldi	r24, 0x2B	; 43
    837a:	90 e0       	ldi	r25, 0x00	; 0
    837c:	6c 01       	movw	r12, r24
    837e:	82 e0       	ldi	r24, 0x02	; 2
    8380:	e8 2e       	mov	r14, r24
    8382:	f1 2c       	mov	r15, r1
    8384:	8e 01       	movw	r16, r28
    8386:	08 5f       	subi	r16, 0xF8	; 248
    8388:	1f 4f       	sbci	r17, 0xFF	; 255
    838a:	2a e0       	ldi	r18, 0x0A	; 10
    838c:	30 e0       	ldi	r19, 0x00	; 0
    838e:	42 e0       	ldi	r20, 0x02	; 2
    8390:	50 e0       	ldi	r21, 0x00	; 0
    8392:	65 e0       	ldi	r22, 0x05	; 5
    8394:	70 e0       	ldi	r23, 0x00	; 0
    8396:	ce 01       	movw	r24, r28
    8398:	02 96       	adiw	r24, 0x02	; 2
    839a:	17 dd       	rcall	.-1490   	; 0x7dca <bin2num>
    839c:	9c 01       	movw	r18, r24
    839e:	93 2d       	mov	r25, r3
    83a0:	98 72       	andi	r25, 0x28	; 40
    83a2:	90 32       	cpi	r25, 0x20	; 32
    83a4:	61 f0       	breq	.+24     	; 0x83be <p_etoa+0x1c8>
    83a6:	c5 01       	movw	r24, r10
    83a8:	b4 01       	movw	r22, r8
    83aa:	0e 94 20 ee 	call	0x1dc40	; 0x1dc40 <__fixsfsi>
    83ae:	6b 01       	movw	r12, r22
    83b0:	7c 01       	movw	r14, r24
    83b2:	80 e3       	ldi	r24, 0x30	; 48
    83b4:	8c 0d       	add	r24, r12
    83b6:	9f dd       	rcall	.-1218   	; 0x7ef6 <pch>
    83b8:	21 10       	cpse	r2, r1
    83ba:	20 c0       	rjmp	.+64     	; 0x83fc <p_etoa+0x206>
    83bc:	5e c0       	rjmp	.+188    	; 0x847a <p_etoa+0x284>
    83be:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <_pch+0x2>
    83c2:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <_pch+0x3>
    83c6:	0c 85       	ldd	r16, Y+12	; 0x0c
    83c8:	1d 85       	ldd	r17, Y+13	; 0x0d
    83ca:	08 1b       	sub	r16, r24
    83cc:	19 0b       	sbc	r17, r25
    83ce:	22 20       	and	r2, r2
    83d0:	41 f0       	breq	.+16     	; 0x83e2 <p_etoa+0x1ec>
    83d2:	61 14       	cp	r6, r1
    83d4:	71 04       	cpc	r7, r1
    83d6:	29 f0       	breq	.+10     	; 0x83e2 <p_etoa+0x1ec>
    83d8:	06 19       	sub	r16, r6
    83da:	17 09       	sbc	r17, r7
    83dc:	06 50       	subi	r16, 0x06	; 6
    83de:	11 09       	sbc	r17, r1
    83e0:	02 c0       	rjmp	.+4      	; 0x83e6 <p_etoa+0x1f0>
    83e2:	05 50       	subi	r16, 0x05	; 5
    83e4:	11 09       	sbc	r17, r1
    83e6:	24 30       	cpi	r18, 0x04	; 4
    83e8:	31 05       	cpc	r19, r1
    83ea:	14 f0       	brlt	.+4      	; 0x83f0 <p_etoa+0x1fa>
    83ec:	01 50       	subi	r16, 0x01	; 1
    83ee:	11 09       	sbc	r17, r1
    83f0:	10 16       	cp	r1, r16
    83f2:	11 06       	cpc	r1, r17
    83f4:	c4 f6       	brge	.-80     	; 0x83a6 <p_etoa+0x1b0>
    83f6:	80 e3       	ldi	r24, 0x30	; 48
    83f8:	7e dd       	rcall	.-1284   	; 0x7ef6 <pch>
    83fa:	f8 cf       	rjmp	.-16     	; 0x83ec <p_etoa+0x1f6>
    83fc:	61 14       	cp	r6, r1
    83fe:	71 04       	cpc	r7, r1
    8400:	09 f4       	brne	.+2      	; 0x8404 <p_etoa+0x20e>
    8402:	3b c0       	rjmp	.+118    	; 0x847a <p_etoa+0x284>
    8404:	b6 01       	movw	r22, r12
    8406:	dd 0c       	add	r13, r13
    8408:	88 0b       	sbc	r24, r24
    840a:	99 0b       	sbc	r25, r25
    840c:	0e 94 53 ee 	call	0x1dca6	; 0x1dca6 <__floatsisf>
    8410:	9b 01       	movw	r18, r22
    8412:	ac 01       	movw	r20, r24
    8414:	c5 01       	movw	r24, r10
    8416:	b4 01       	movw	r22, r8
    8418:	0e 94 4f ed 	call	0x1da9e	; 0x1da9e <__subsf3>
    841c:	20 e0       	ldi	r18, 0x00	; 0
    841e:	30 e0       	ldi	r19, 0x00	; 0
    8420:	40 e2       	ldi	r20, 0x20	; 32
    8422:	51 e4       	ldi	r21, 0x41	; 65
    8424:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    8428:	6b 01       	movw	r12, r22
    842a:	7c 01       	movw	r14, r24
    842c:	8e e2       	ldi	r24, 0x2E	; 46
    842e:	63 dd       	rcall	.-1338   	; 0x7ef6 <pch>
    8430:	c7 01       	movw	r24, r14
    8432:	b6 01       	movw	r22, r12
    8434:	0e 94 20 ee 	call	0x1dc40	; 0x1dc40 <__fixsfsi>
    8438:	4b 01       	movw	r8, r22
    843a:	5c 01       	movw	r10, r24
    843c:	07 2e       	mov	r0, r23
    843e:	00 0c       	add	r0, r0
    8440:	88 0b       	sbc	r24, r24
    8442:	99 0b       	sbc	r25, r25
    8444:	0e 94 53 ee 	call	0x1dca6	; 0x1dca6 <__floatsisf>
    8448:	9b 01       	movw	r18, r22
    844a:	ac 01       	movw	r20, r24
    844c:	c7 01       	movw	r24, r14
    844e:	b6 01       	movw	r22, r12
    8450:	0e 94 4f ed 	call	0x1da9e	; 0x1da9e <__subsf3>
    8454:	6b 01       	movw	r12, r22
    8456:	7c 01       	movw	r14, r24
    8458:	80 e3       	ldi	r24, 0x30	; 48
    845a:	88 0d       	add	r24, r8
    845c:	4c dd       	rcall	.-1384   	; 0x7ef6 <pch>
    845e:	20 e0       	ldi	r18, 0x00	; 0
    8460:	30 e0       	ldi	r19, 0x00	; 0
    8462:	40 e2       	ldi	r20, 0x20	; 32
    8464:	51 e4       	ldi	r21, 0x41	; 65
    8466:	c7 01       	movw	r24, r14
    8468:	b6 01       	movw	r22, r12
    846a:	0e 94 07 ef 	call	0x1de0e	; 0x1de0e <__mulsf3>
    846e:	6b 01       	movw	r12, r22
    8470:	7c 01       	movw	r14, r24
    8472:	81 e0       	ldi	r24, 0x01	; 1
    8474:	68 1a       	sub	r6, r24
    8476:	71 08       	sbc	r7, r1
    8478:	d9 f6       	brne	.-74     	; 0x8430 <p_etoa+0x23a>
    847a:	8e 01       	movw	r16, r28
    847c:	0f 5f       	subi	r16, 0xFF	; 255
    847e:	1f 4f       	sbci	r17, 0xFF	; 255
    8480:	f8 01       	movw	r30, r16
    8482:	81 91       	ld	r24, Z+
    8484:	8f 01       	movw	r16, r30
    8486:	88 23       	and	r24, r24
    8488:	11 f0       	breq	.+4      	; 0x848e <p_etoa+0x298>
    848a:	35 dd       	rcall	.-1430   	; 0x7ef6 <pch>
    848c:	f9 cf       	rjmp	.-14     	; 0x8480 <p_etoa+0x28a>
    848e:	33 dd       	rcall	.-1434   	; 0x7ef6 <pch>
    8490:	ea 85       	ldd	r30, Y+10	; 0x0a
    8492:	fb 85       	ldd	r31, Y+11	; 0x0b
    8494:	01 90       	ld	r0, Z+
    8496:	00 20       	and	r0, r0
    8498:	e9 f7       	brne	.-6      	; 0x8494 <p_etoa+0x29e>
    849a:	cf 01       	movw	r24, r30
    849c:	01 97       	sbiw	r24, 0x01	; 1
    849e:	2a 85       	ldd	r18, Y+10	; 0x0a
    84a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    84a2:	82 1b       	sub	r24, r18
    84a4:	93 0b       	sbc	r25, r19
    84a6:	2d 96       	adiw	r28, 0x0d	; 13
    84a8:	e2 e1       	ldi	r30, 0x12	; 18
    84aa:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

000084ae <_puts_pad>:
    84ae:	a0 e0       	ldi	r26, 0x00	; 0
    84b0:	b0 e0       	ldi	r27, 0x00	; 0
    84b2:	ed e5       	ldi	r30, 0x5D	; 93
    84b4:	f2 e4       	ldi	r31, 0x42	; 66
    84b6:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
    84ba:	6c 01       	movw	r12, r24
    84bc:	4b 01       	movw	r8, r22
    84be:	79 01       	movw	r14, r18
    84c0:	24 17       	cp	r18, r20
    84c2:	35 07       	cpc	r19, r21
    84c4:	24 f4       	brge	.+8      	; 0x84ce <_puts_pad+0x20>
    84c6:	ea 01       	movw	r28, r20
    84c8:	c2 1b       	sub	r28, r18
    84ca:	d3 0b       	sbc	r29, r19
    84cc:	02 c0       	rjmp	.+4      	; 0x84d2 <_puts_pad+0x24>
    84ce:	c0 e0       	ldi	r28, 0x00	; 0
    84d0:	d0 e0       	ldi	r29, 0x00	; 0
    84d2:	01 15       	cp	r16, r1
    84d4:	11 05       	cpc	r17, r1
    84d6:	49 f4       	brne	.+18     	; 0x84ea <_puts_pad+0x3c>
    84d8:	21 97       	sbiw	r28, 0x01	; 1
    84da:	38 f0       	brcs	.+14     	; 0x84ea <_puts_pad+0x3c>
    84dc:	d6 01       	movw	r26, r12
    84de:	ed 91       	ld	r30, X+
    84e0:	fc 91       	ld	r31, X
    84e2:	60 e2       	ldi	r22, 0x20	; 32
    84e4:	c6 01       	movw	r24, r12
    84e6:	09 95       	icall
    84e8:	f7 cf       	rjmp	.-18     	; 0x84d8 <_puts_pad+0x2a>
    84ea:	54 01       	movw	r10, r8
    84ec:	f5 01       	movw	r30, r10
    84ee:	61 91       	ld	r22, Z+
    84f0:	5f 01       	movw	r10, r30
    84f2:	66 23       	and	r22, r22
    84f4:	61 f0       	breq	.+24     	; 0x850e <_puts_pad+0x60>
    84f6:	e1 14       	cp	r14, r1
    84f8:	f1 04       	cpc	r15, r1
    84fa:	49 f0       	breq	.+18     	; 0x850e <_puts_pad+0x60>
    84fc:	d6 01       	movw	r26, r12
    84fe:	ed 91       	ld	r30, X+
    8500:	fc 91       	ld	r31, X
    8502:	c6 01       	movw	r24, r12
    8504:	09 95       	icall
    8506:	b1 e0       	ldi	r27, 0x01	; 1
    8508:	eb 1a       	sub	r14, r27
    850a:	f1 08       	sbc	r15, r1
    850c:	ef cf       	rjmp	.-34     	; 0x84ec <_puts_pad+0x3e>
    850e:	01 15       	cp	r16, r1
    8510:	11 05       	cpc	r17, r1
    8512:	51 f0       	breq	.+20     	; 0x8528 <_puts_pad+0x7a>
    8514:	20 97       	sbiw	r28, 0x00	; 0
    8516:	41 f0       	breq	.+16     	; 0x8528 <_puts_pad+0x7a>
    8518:	d6 01       	movw	r26, r12
    851a:	ed 91       	ld	r30, X+
    851c:	fc 91       	ld	r31, X
    851e:	60 e2       	ldi	r22, 0x20	; 32
    8520:	c6 01       	movw	r24, r12
    8522:	09 95       	icall
    8524:	21 97       	sbiw	r28, 0x01	; 1
    8526:	f6 cf       	rjmp	.-20     	; 0x8514 <_puts_pad+0x66>
    8528:	cd b7       	in	r28, 0x3d	; 61
    852a:	de b7       	in	r29, 0x3e	; 62
    852c:	ec e0       	ldi	r30, 0x0C	; 12
    852e:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

00008532 <_printf_fn>:
    8532:	ab e6       	ldi	r26, 0x6B	; 107
    8534:	b0 e0       	ldi	r27, 0x00	; 0
    8536:	ef e9       	ldi	r30, 0x9F	; 159
    8538:	f2 e4       	ldi	r31, 0x42	; 66
    853a:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    853e:	a5 96       	adiw	r28, 0x25	; 37
    8540:	9f af       	std	Y+63, r25	; 0x3f
    8542:	8e af       	std	Y+62, r24	; 0x3e
    8544:	a5 97       	sbiw	r28, 0x25	; 37
    8546:	6a 01       	movw	r12, r20
    8548:	e6 2e       	mov	r14, r22
    854a:	19 01       	movw	r2, r18
    854c:	a9 96       	adiw	r28, 0x29	; 41
    854e:	1c ae       	std	Y+60, r1	; 0x3c
    8550:	1d ae       	std	Y+61, r1	; 0x3d
    8552:	1e ae       	std	Y+62, r1	; 0x3e
    8554:	1f ae       	std	Y+63, r1	; 0x3f
    8556:	a9 97       	sbiw	r28, 0x29	; 41
    8558:	9e 01       	movw	r18, r28
    855a:	2f 5a       	subi	r18, 0xAF	; 175
    855c:	3f 4f       	sbci	r19, 0xFF	; 255
    855e:	67 96       	adiw	r28, 0x17	; 23
    8560:	3f af       	std	Y+63, r19	; 0x3f
    8562:	2e af       	std	Y+62, r18	; 0x3e
    8564:	67 97       	sbiw	r28, 0x17	; 23
    8566:	ae 01       	movw	r20, r28
    8568:	4d 5b       	subi	r20, 0xBD	; 189
    856a:	5f 4f       	sbci	r21, 0xFF	; 255
    856c:	69 96       	adiw	r28, 0x19	; 25
    856e:	5f af       	std	Y+63, r21	; 0x3f
    8570:	4e af       	std	Y+62, r20	; 0x3e
    8572:	69 97       	sbiw	r28, 0x19	; 25
    8574:	ce 01       	movw	r24, r28
    8576:	85 5b       	subi	r24, 0xB5	; 181
    8578:	9f 4f       	sbci	r25, 0xFF	; 255
    857a:	6b 96       	adiw	r28, 0x1b	; 27
    857c:	9f af       	std	Y+63, r25	; 0x3f
    857e:	8e af       	std	Y+62, r24	; 0x3e
    8580:	6b 97       	sbiw	r28, 0x1b	; 27
    8582:	de 01       	movw	r26, r28
    8584:	ad 5a       	subi	r26, 0xAD	; 173
    8586:	bf 4f       	sbci	r27, 0xFF	; 255
    8588:	6d 96       	adiw	r28, 0x1d	; 29
    858a:	bf af       	std	Y+63, r27	; 0x3f
    858c:	ae af       	std	Y+62, r26	; 0x3e
    858e:	6d 97       	sbiw	r28, 0x1d	; 29
    8590:	f6 01       	movw	r30, r12
    8592:	5e 2d       	mov	r21, r14
    8594:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    8598:	66 23       	and	r22, r22
    859a:	09 f4       	brne	.+2      	; 0x859e <_printf_fn+0x6c>
    859c:	df c3       	rjmp	.+1982   	; 0x8d5c <_printf_fn+0x82a>
    859e:	ae 2d       	mov	r26, r14
    85a0:	c6 01       	movw	r24, r12
    85a2:	01 96       	adiw	r24, 0x01	; 1
    85a4:	a1 1d       	adc	r26, r1
    85a6:	3c 01       	movw	r6, r24
    85a8:	8a 2e       	mov	r8, r26
    85aa:	65 32       	cpi	r22, 0x25	; 37
    85ac:	51 f0       	breq	.+20     	; 0x85c2 <_printf_fn+0x90>
    85ae:	a5 96       	adiw	r28, 0x25	; 37
    85b0:	ae ad       	ldd	r26, Y+62	; 0x3e
    85b2:	bf ad       	ldd	r27, Y+63	; 0x3f
    85b4:	a5 97       	sbiw	r28, 0x25	; 37
    85b6:	ed 91       	ld	r30, X+
    85b8:	fc 91       	ld	r31, X
    85ba:	11 97       	sbiw	r26, 0x01	; 1
    85bc:	cd 01       	movw	r24, r26
    85be:	09 95       	icall
    85c0:	99 c3       	rjmp	.+1842   	; 0x8cf4 <_printf_fn+0x7c2>
    85c2:	91 2c       	mov	r9, r1
    85c4:	f3 01       	movw	r30, r6
    85c6:	58 2d       	mov	r21, r8
    85c8:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    85cc:	63 32       	cpi	r22, 0x23	; 35
    85ce:	19 f4       	brne	.+6      	; 0x85d6 <_printf_fn+0xa4>
    85d0:	68 94       	set
    85d2:	97 f8       	bld	r9, 7
    85d4:	04 c0       	rjmp	.+8      	; 0x85de <_printf_fn+0xac>
    85d6:	6b 32       	cpi	r22, 0x2B	; 43
    85d8:	39 f4       	brne	.+14     	; 0x85e8 <_printf_fn+0xb6>
    85da:	68 94       	set
    85dc:	92 f8       	bld	r9, 2
    85de:	bf ef       	ldi	r27, 0xFF	; 255
    85e0:	6b 1a       	sub	r6, r27
    85e2:	7b 0a       	sbc	r7, r27
    85e4:	8b 0a       	sbc	r8, r27
    85e6:	ee cf       	rjmp	.-36     	; 0x85c4 <_printf_fn+0x92>
    85e8:	6d 32       	cpi	r22, 0x2D	; 45
    85ea:	a9 f4       	brne	.+42     	; 0x8616 <_printf_fn+0xe4>
    85ec:	93 fc       	sbrc	r9, 3
    85ee:	05 c0       	rjmp	.+10     	; 0x85fa <_printf_fn+0xc8>
    85f0:	6d 32       	cpi	r22, 0x2D	; 45
    85f2:	19 f4       	brne	.+6      	; 0x85fa <_printf_fn+0xc8>
    85f4:	68 94       	set
    85f6:	93 f8       	bld	r9, 3
    85f8:	f2 cf       	rjmp	.-28     	; 0x85de <_printf_fn+0xac>
    85fa:	94 fc       	sbrc	r9, 4
    85fc:	05 c0       	rjmp	.+10     	; 0x8608 <_printf_fn+0xd6>
    85fe:	60 32       	cpi	r22, 0x20	; 32
    8600:	19 f4       	brne	.+6      	; 0x8608 <_printf_fn+0xd6>
    8602:	68 94       	set
    8604:	94 f8       	bld	r9, 4
    8606:	eb cf       	rjmp	.-42     	; 0x85de <_printf_fn+0xac>
    8608:	95 fc       	sbrc	r9, 5
    860a:	e9 cf       	rjmp	.-46     	; 0x85de <_printf_fn+0xac>
    860c:	60 33       	cpi	r22, 0x30	; 48
    860e:	39 f7       	brne	.-50     	; 0x85de <_printf_fn+0xac>
    8610:	68 94       	set
    8612:	95 f8       	bld	r9, 5
    8614:	e4 cf       	rjmp	.-56     	; 0x85de <_printf_fn+0xac>
    8616:	86 2f       	mov	r24, r22
    8618:	8f 7e       	andi	r24, 0xEF	; 239
    861a:	80 32       	cpi	r24, 0x20	; 32
    861c:	39 f3       	breq	.-50     	; 0x85ec <_printf_fn+0xba>
    861e:	70 e0       	ldi	r23, 0x00	; 0
    8620:	60 53       	subi	r22, 0x30	; 48
    8622:	71 09       	sbc	r23, r1
    8624:	41 2c       	mov	r4, r1
    8626:	51 2c       	mov	r5, r1
    8628:	6a 30       	cpi	r22, 0x0A	; 10
    862a:	71 05       	cpc	r23, r1
    862c:	e0 f4       	brcc	.+56     	; 0x8666 <_printf_fn+0x134>
    862e:	2a e0       	ldi	r18, 0x0A	; 10
    8630:	f3 01       	movw	r30, r6
    8632:	58 2d       	mov	r21, r8
    8634:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    8638:	70 e0       	ldi	r23, 0x00	; 0
    863a:	cb 01       	movw	r24, r22
    863c:	c0 97       	sbiw	r24, 0x30	; 48
    863e:	0a 97       	sbiw	r24, 0x0a	; 10
    8640:	80 f4       	brcc	.+32     	; 0x8662 <_printf_fn+0x130>
    8642:	ef ef       	ldi	r30, 0xFF	; 255
    8644:	6e 1a       	sub	r6, r30
    8646:	7e 0a       	sbc	r7, r30
    8648:	8e 0a       	sbc	r8, r30
    864a:	24 9d       	mul	r18, r4
    864c:	c0 01       	movw	r24, r0
    864e:	25 9d       	mul	r18, r5
    8650:	90 0d       	add	r25, r0
    8652:	11 24       	eor	r1, r1
    8654:	68 0f       	add	r22, r24
    8656:	79 1f       	adc	r23, r25
    8658:	2b 01       	movw	r4, r22
    865a:	f0 e3       	ldi	r31, 0x30	; 48
    865c:	4f 1a       	sub	r4, r31
    865e:	51 08       	sbc	r5, r1
    8660:	e7 cf       	rjmp	.-50     	; 0x8630 <_printf_fn+0xfe>
    8662:	68 94       	set
    8664:	90 f8       	bld	r9, 0
    8666:	f3 01       	movw	r30, r6
    8668:	58 2d       	mov	r21, r8
    866a:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    866e:	6e 32       	cpi	r22, 0x2E	; 46
    8670:	59 f5       	brne	.+86     	; 0x86c8 <_printf_fn+0x196>
    8672:	2f ef       	ldi	r18, 0xFF	; 255
    8674:	62 1a       	sub	r6, r18
    8676:	72 0a       	sbc	r7, r18
    8678:	82 0a       	sbc	r8, r18
    867a:	a1 96       	adiw	r28, 0x21	; 33
    867c:	1f ae       	std	Y+63, r1	; 0x3f
    867e:	1e ae       	std	Y+62, r1	; 0x3e
    8680:	a1 97       	sbiw	r28, 0x21	; 33
    8682:	2a e0       	ldi	r18, 0x0A	; 10
    8684:	f3 01       	movw	r30, r6
    8686:	58 2d       	mov	r21, r8
    8688:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    868c:	70 e0       	ldi	r23, 0x00	; 0
    868e:	cb 01       	movw	r24, r22
    8690:	c0 97       	sbiw	r24, 0x30	; 48
    8692:	0a 97       	sbiw	r24, 0x0a	; 10
    8694:	b0 f4       	brcc	.+44     	; 0x86c2 <_printf_fn+0x190>
    8696:	3f ef       	ldi	r19, 0xFF	; 255
    8698:	63 1a       	sub	r6, r19
    869a:	73 0a       	sbc	r7, r19
    869c:	83 0a       	sbc	r8, r19
    869e:	a1 96       	adiw	r28, 0x21	; 33
    86a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    86a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    86a4:	a1 97       	sbiw	r28, 0x21	; 33
    86a6:	24 9f       	mul	r18, r20
    86a8:	c0 01       	movw	r24, r0
    86aa:	25 9f       	mul	r18, r21
    86ac:	90 0d       	add	r25, r0
    86ae:	11 24       	eor	r1, r1
    86b0:	68 0f       	add	r22, r24
    86b2:	79 1f       	adc	r23, r25
    86b4:	cb 01       	movw	r24, r22
    86b6:	c0 97       	sbiw	r24, 0x30	; 48
    86b8:	a1 96       	adiw	r28, 0x21	; 33
    86ba:	9f af       	std	Y+63, r25	; 0x3f
    86bc:	8e af       	std	Y+62, r24	; 0x3e
    86be:	a1 97       	sbiw	r28, 0x21	; 33
    86c0:	e1 cf       	rjmp	.-62     	; 0x8684 <_printf_fn+0x152>
    86c2:	68 94       	set
    86c4:	91 f8       	bld	r9, 1
    86c6:	04 c0       	rjmp	.+8      	; 0x86d0 <_printf_fn+0x19e>
    86c8:	a1 96       	adiw	r28, 0x21	; 33
    86ca:	1f ae       	std	Y+63, r1	; 0x3f
    86cc:	1e ae       	std	Y+62, r1	; 0x3e
    86ce:	a1 97       	sbiw	r28, 0x21	; 33
    86d0:	f3 01       	movw	r30, r6
    86d2:	58 2d       	mov	r21, r8
    86d4:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    86d8:	69 34       	cpi	r22, 0x49	; 73
    86da:	09 f0       	breq	.+2      	; 0x86de <_printf_fn+0x1ac>
    86dc:	45 c0       	rjmp	.+138    	; 0x8768 <_printf_fn+0x236>
    86de:	9f ef       	ldi	r25, 0xFF	; 255
    86e0:	69 1a       	sub	r6, r25
    86e2:	79 0a       	sbc	r7, r25
    86e4:	89 0a       	sbc	r8, r25
    86e6:	6f 96       	adiw	r28, 0x1f	; 31
    86e8:	1f ae       	std	Y+63, r1	; 0x3f
    86ea:	1e ae       	std	Y+62, r1	; 0x3e
    86ec:	6f 97       	sbiw	r28, 0x1f	; 31
    86ee:	2a e0       	ldi	r18, 0x0A	; 10
    86f0:	f3 01       	movw	r30, r6
    86f2:	58 2d       	mov	r21, r8
    86f4:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    86f8:	70 e0       	ldi	r23, 0x00	; 0
    86fa:	cb 01       	movw	r24, r22
    86fc:	c0 97       	sbiw	r24, 0x30	; 48
    86fe:	0a 97       	sbiw	r24, 0x0a	; 10
    8700:	b8 f4       	brcc	.+46     	; 0x8730 <_printf_fn+0x1fe>
    8702:	af ef       	ldi	r26, 0xFF	; 255
    8704:	6a 1a       	sub	r6, r26
    8706:	7a 0a       	sbc	r7, r26
    8708:	8a 0a       	sbc	r8, r26
    870a:	6f 96       	adiw	r28, 0x1f	; 31
    870c:	ee ad       	ldd	r30, Y+62	; 0x3e
    870e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8710:	6f 97       	sbiw	r28, 0x1f	; 31
    8712:	2e 9f       	mul	r18, r30
    8714:	c0 01       	movw	r24, r0
    8716:	2f 9f       	mul	r18, r31
    8718:	90 0d       	add	r25, r0
    871a:	11 24       	eor	r1, r1
    871c:	68 0f       	add	r22, r24
    871e:	79 1f       	adc	r23, r25
    8720:	ab 01       	movw	r20, r22
    8722:	40 53       	subi	r20, 0x30	; 48
    8724:	51 09       	sbc	r21, r1
    8726:	6f 96       	adiw	r28, 0x1f	; 31
    8728:	5f af       	std	Y+63, r21	; 0x3f
    872a:	4e af       	std	Y+62, r20	; 0x3e
    872c:	6f 97       	sbiw	r28, 0x1f	; 31
    872e:	e0 cf       	rjmp	.-64     	; 0x86f0 <_printf_fn+0x1be>
    8730:	6f 96       	adiw	r28, 0x1f	; 31
    8732:	8e ad       	ldd	r24, Y+62	; 0x3e
    8734:	9f ad       	ldd	r25, Y+63	; 0x3f
    8736:	6f 97       	sbiw	r28, 0x1f	; 31
    8738:	00 97       	sbiw	r24, 0x00	; 0
    873a:	09 f4       	brne	.+2      	; 0x873e <_printf_fn+0x20c>
    873c:	4f c0       	rjmp	.+158    	; 0x87dc <_printf_fn+0x2aa>
    873e:	87 70       	andi	r24, 0x07	; 7
    8740:	99 27       	eor	r25, r25
    8742:	89 2b       	or	r24, r25
    8744:	09 f0       	breq	.+2      	; 0x8748 <_printf_fn+0x216>
    8746:	46 c0       	rjmp	.+140    	; 0x87d4 <_printf_fn+0x2a2>
    8748:	6f 96       	adiw	r28, 0x1f	; 31
    874a:	ae ad       	ldd	r26, Y+62	; 0x3e
    874c:	bf ad       	ldd	r27, Y+63	; 0x3f
    874e:	6f 97       	sbiw	r28, 0x1f	; 31
    8750:	83 e0       	ldi	r24, 0x03	; 3
    8752:	b5 95       	asr	r27
    8754:	a7 95       	ror	r26
    8756:	8a 95       	dec	r24
    8758:	e1 f7       	brne	.-8      	; 0x8752 <_printf_fn+0x220>
    875a:	6f 96       	adiw	r28, 0x1f	; 31
    875c:	bf af       	std	Y+63, r27	; 0x3f
    875e:	ae af       	std	Y+62, r26	; 0x3e
    8760:	6f 97       	sbiw	r28, 0x1f	; 31
    8762:	ab 2b       	or	r26, r27
    8764:	d9 f1       	breq	.+118    	; 0x87dc <_printf_fn+0x2aa>
    8766:	27 c0       	rjmp	.+78     	; 0x87b6 <_printf_fn+0x284>
    8768:	68 36       	cpi	r22, 0x68	; 104
    876a:	29 f4       	brne	.+10     	; 0x8776 <_printf_fn+0x244>
    876c:	bf ef       	ldi	r27, 0xFF	; 255
    876e:	6b 1a       	sub	r6, r27
    8770:	7b 0a       	sbc	r7, r27
    8772:	8b 0a       	sbc	r8, r27
    8774:	c2 c2       	rjmp	.+1412   	; 0x8cfa <_printf_fn+0x7c8>
    8776:	6c 36       	cpi	r22, 0x6C	; 108
    8778:	09 f0       	breq	.+2      	; 0x877c <_printf_fn+0x24a>
    877a:	bf c2       	rjmp	.+1406   	; 0x8cfa <_printf_fn+0x7c8>
    877c:	a8 2d       	mov	r26, r8
    877e:	c3 01       	movw	r24, r6
    8780:	01 96       	adiw	r24, 0x01	; 1
    8782:	a1 1d       	adc	r26, r1
    8784:	fc 01       	movw	r30, r24
    8786:	5a 2f       	mov	r21, r26
    8788:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    878c:	6c 36       	cpi	r22, 0x6C	; 108
    878e:	49 f0       	breq	.+18     	; 0x87a2 <_printf_fn+0x270>
    8790:	3c 01       	movw	r6, r24
    8792:	8a 2e       	mov	r8, r26
    8794:	24 e0       	ldi	r18, 0x04	; 4
    8796:	30 e0       	ldi	r19, 0x00	; 0
    8798:	6f 96       	adiw	r28, 0x1f	; 31
    879a:	3f af       	std	Y+63, r19	; 0x3f
    879c:	2e af       	std	Y+62, r18	; 0x3e
    879e:	6f 97       	sbiw	r28, 0x1f	; 31
    87a0:	0a c0       	rjmp	.+20     	; 0x87b6 <_printf_fn+0x284>
    87a2:	32 e0       	ldi	r19, 0x02	; 2
    87a4:	63 0e       	add	r6, r19
    87a6:	71 1c       	adc	r7, r1
    87a8:	81 1c       	adc	r8, r1
    87aa:	48 e0       	ldi	r20, 0x08	; 8
    87ac:	50 e0       	ldi	r21, 0x00	; 0
    87ae:	6f 96       	adiw	r28, 0x1f	; 31
    87b0:	5f af       	std	Y+63, r21	; 0x3f
    87b2:	4e af       	std	Y+62, r20	; 0x3e
    87b4:	6f 97       	sbiw	r28, 0x1f	; 31
    87b6:	f3 01       	movw	r30, r6
    87b8:	58 2d       	mov	r21, r8
    87ba:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    87be:	86 2f       	mov	r24, r22
    87c0:	90 e0       	ldi	r25, 0x00	; 0
    87c2:	a3 96       	adiw	r28, 0x23	; 35
    87c4:	9f af       	std	Y+63, r25	; 0x3f
    87c6:	8e af       	std	Y+62, r24	; 0x3e
    87c8:	a3 97       	sbiw	r28, 0x23	; 35
    87ca:	84 36       	cpi	r24, 0x64	; 100
    87cc:	91 05       	cpc	r25, r1
    87ce:	09 f4       	brne	.+2      	; 0x87d2 <_printf_fn+0x2a0>
    87d0:	9b c2       	rjmp	.+1334   	; 0x8d08 <_printf_fn+0x7d6>
    87d2:	08 c0       	rjmp	.+16     	; 0x87e4 <_printf_fn+0x2b2>
    87d4:	6f 96       	adiw	r28, 0x1f	; 31
    87d6:	1f ae       	std	Y+63, r1	; 0x3f
    87d8:	1e ae       	std	Y+62, r1	; 0x3e
    87da:	6f 97       	sbiw	r28, 0x1f	; 31
    87dc:	a3 96       	adiw	r28, 0x23	; 35
    87de:	1f ae       	std	Y+63, r1	; 0x3f
    87e0:	1e ae       	std	Y+62, r1	; 0x3e
    87e2:	a3 97       	sbiw	r28, 0x23	; 35
    87e4:	31 e0       	ldi	r19, 0x01	; 1
    87e6:	20 e0       	ldi	r18, 0x00	; 0
    87e8:	a3 96       	adiw	r28, 0x23	; 35
    87ea:	ae ad       	ldd	r26, Y+62	; 0x3e
    87ec:	bf ad       	ldd	r27, Y+63	; 0x3f
    87ee:	a3 97       	sbiw	r28, 0x23	; 35
    87f0:	a4 34       	cpi	r26, 0x44	; 68
    87f2:	b1 05       	cpc	r27, r1
    87f4:	09 f0       	breq	.+2      	; 0x87f8 <_printf_fn+0x2c6>
    87f6:	30 e0       	ldi	r19, 0x00	; 0
    87f8:	83 2f       	mov	r24, r19
    87fa:	92 2f       	mov	r25, r18
    87fc:	a3 96       	adiw	r28, 0x23	; 35
    87fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    8800:	ff ad       	ldd	r31, Y+63	; 0x3f
    8802:	a3 97       	sbiw	r28, 0x23	; 35
    8804:	e2 54       	subi	r30, 0x42	; 66
    8806:	f1 09       	sbc	r31, r1
    8808:	e7 33       	cpi	r30, 0x37	; 55
    880a:	f1 05       	cpc	r31, r1
    880c:	08 f0       	brcs	.+2      	; 0x8810 <_printf_fn+0x2de>
    880e:	65 c1       	rjmp	.+714    	; 0x8ada <_printf_fn+0x5a8>
    8810:	ea 5b       	subi	r30, 0xBA	; 186
    8812:	ff 4f       	sbci	r31, 0xFF	; 255
    8814:	0c 94 c1 ec 	jmp	0x1d982	; 0x1d982 <__tablejump2__>
    8818:	e2 e0       	ldi	r30, 0x02	; 2
    881a:	f0 e0       	ldi	r31, 0x00	; 0
    881c:	6f 96       	adiw	r28, 0x1f	; 31
    881e:	ff af       	std	Y+63, r31	; 0x3f
    8820:	ee af       	std	Y+62, r30	; 0x3e
    8822:	6f 97       	sbiw	r28, 0x1f	; 31
    8824:	29 2d       	mov	r18, r9
    8826:	28 72       	andi	r18, 0x28	; 40
    8828:	28 32       	cpi	r18, 0x28	; 40
    882a:	11 f4       	brne	.+4      	; 0x8830 <_printf_fn+0x2fe>
    882c:	e8 94       	clt
    882e:	95 f8       	bld	r9, 5
    8830:	29 2d       	mov	r18, r9
    8832:	22 72       	andi	r18, 0x22	; 34
    8834:	22 32       	cpi	r18, 0x22	; 34
    8836:	11 f4       	brne	.+4      	; 0x883c <_printf_fn+0x30a>
    8838:	e8 94       	clt
    883a:	95 f8       	bld	r9, 5
    883c:	29 2d       	mov	r18, r9
    883e:	21 72       	andi	r18, 0x21	; 33
    8840:	21 32       	cpi	r18, 0x21	; 33
    8842:	59 f4       	brne	.+22     	; 0x885a <_printf_fn+0x328>
    8844:	a1 96       	adiw	r28, 0x21	; 33
    8846:	2e ad       	ldd	r18, Y+62	; 0x3e
    8848:	3f ad       	ldd	r19, Y+63	; 0x3f
    884a:	a1 97       	sbiw	r28, 0x21	; 33
    884c:	24 15       	cp	r18, r4
    884e:	35 05       	cpc	r19, r5
    8850:	24 f4       	brge	.+8      	; 0x885a <_printf_fn+0x328>
    8852:	a1 96       	adiw	r28, 0x21	; 33
    8854:	5f ae       	std	Y+63, r5	; 0x3f
    8856:	4e ae       	std	Y+62, r4	; 0x3e
    8858:	a1 97       	sbiw	r28, 0x21	; 33
    885a:	29 2d       	mov	r18, r9
    885c:	23 72       	andi	r18, 0x23	; 35
    885e:	23 32       	cpi	r18, 0x23	; 35
    8860:	59 f4       	brne	.+22     	; 0x8878 <_printf_fn+0x346>
    8862:	a1 96       	adiw	r28, 0x21	; 33
    8864:	4e ad       	ldd	r20, Y+62	; 0x3e
    8866:	5f ad       	ldd	r21, Y+63	; 0x3f
    8868:	a1 97       	sbiw	r28, 0x21	; 33
    886a:	44 15       	cp	r20, r4
    886c:	55 05       	cpc	r21, r5
    886e:	24 f4       	brge	.+8      	; 0x8878 <_printf_fn+0x346>
    8870:	a1 96       	adiw	r28, 0x21	; 33
    8872:	5f ae       	std	Y+63, r5	; 0x3f
    8874:	4e ae       	std	Y+62, r4	; 0x3e
    8876:	a1 97       	sbiw	r28, 0x21	; 33
    8878:	e8 94       	clt
    887a:	94 f8       	bld	r9, 4
    887c:	e8 94       	clt
    887e:	92 f8       	bld	r9, 2
    8880:	e8 94       	clt
    8882:	96 f8       	bld	r9, 6
    8884:	6f 96       	adiw	r28, 0x1f	; 31
    8886:	ae ad       	ldd	r26, Y+62	; 0x3e
    8888:	bf ad       	ldd	r27, Y+63	; 0x3f
    888a:	6f 97       	sbiw	r28, 0x1f	; 31
    888c:	12 97       	sbiw	r26, 0x02	; 2
    888e:	29 f5       	brne	.+74     	; 0x88da <_printf_fn+0x3a8>
    8890:	51 01       	movw	r10, r2
    8892:	b2 e0       	ldi	r27, 0x02	; 2
    8894:	ab 0e       	add	r10, r27
    8896:	b1 1c       	adc	r11, r1
    8898:	f1 01       	movw	r30, r2
    889a:	80 81       	ld	r24, Z
    889c:	91 81       	ldd	r25, Z+1	; 0x01
    889e:	65 96       	adiw	r28, 0x15	; 21
    88a0:	9f af       	std	Y+63, r25	; 0x3f
    88a2:	8e af       	std	Y+62, r24	; 0x3e
    88a4:	65 97       	sbiw	r28, 0x15	; 21
    88a6:	a3 96       	adiw	r28, 0x23	; 35
    88a8:	2e ad       	ldd	r18, Y+62	; 0x3e
    88aa:	3f ad       	ldd	r19, Y+63	; 0x3f
    88ac:	a3 97       	sbiw	r28, 0x23	; 35
    88ae:	24 34       	cpi	r18, 0x44	; 68
    88b0:	31 05       	cpc	r19, r1
    88b2:	09 f0       	breq	.+2      	; 0x88b6 <_printf_fn+0x384>
    88b4:	c0 c0       	rjmp	.+384    	; 0x8a36 <_printf_fn+0x504>
    88b6:	97 ff       	sbrs	r25, 7
    88b8:	b8 c0       	rjmp	.+368    	; 0x8a2a <_printf_fn+0x4f8>
    88ba:	68 94       	set
    88bc:	96 f8       	bld	r9, 6
    88be:	91 95       	neg	r25
    88c0:	81 95       	neg	r24
    88c2:	91 09       	sbc	r25, r1
    88c4:	65 96       	adiw	r28, 0x15	; 21
    88c6:	9f af       	std	Y+63, r25	; 0x3f
    88c8:	8e af       	std	Y+62, r24	; 0x3e
    88ca:	65 97       	sbiw	r28, 0x15	; 21
    88cc:	42 e0       	ldi	r20, 0x02	; 2
    88ce:	50 e0       	ldi	r21, 0x00	; 0
    88d0:	6f 96       	adiw	r28, 0x1f	; 31
    88d2:	5f af       	std	Y+63, r21	; 0x3f
    88d4:	4e af       	std	Y+62, r20	; 0x3e
    88d6:	6f 97       	sbiw	r28, 0x1f	; 31
    88d8:	ae c0       	rjmp	.+348    	; 0x8a36 <_printf_fn+0x504>
    88da:	6f 96       	adiw	r28, 0x1f	; 31
    88dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    88de:	bf ad       	ldd	r27, Y+63	; 0x3f
    88e0:	6f 97       	sbiw	r28, 0x1f	; 31
    88e2:	14 97       	sbiw	r26, 0x04	; 4
    88e4:	59 f5       	brne	.+86     	; 0x893c <_printf_fn+0x40a>
    88e6:	51 01       	movw	r10, r2
    88e8:	b4 e0       	ldi	r27, 0x04	; 4
    88ea:	ab 0e       	add	r10, r27
    88ec:	b1 1c       	adc	r11, r1
    88ee:	f1 01       	movw	r30, r2
    88f0:	80 81       	ld	r24, Z
    88f2:	91 81       	ldd	r25, Z+1	; 0x01
    88f4:	a2 81       	ldd	r26, Z+2	; 0x02
    88f6:	b3 81       	ldd	r27, Z+3	; 0x03
    88f8:	2f 96       	adiw	r28, 0x0f	; 15
    88fa:	8c af       	std	Y+60, r24	; 0x3c
    88fc:	9d af       	std	Y+61, r25	; 0x3d
    88fe:	ae af       	std	Y+62, r26	; 0x3e
    8900:	bf af       	std	Y+63, r27	; 0x3f
    8902:	2f 97       	sbiw	r28, 0x0f	; 15
    8904:	a3 96       	adiw	r28, 0x23	; 35
    8906:	2e ad       	ldd	r18, Y+62	; 0x3e
    8908:	3f ad       	ldd	r19, Y+63	; 0x3f
    890a:	a3 97       	sbiw	r28, 0x23	; 35
    890c:	24 34       	cpi	r18, 0x44	; 68
    890e:	31 05       	cpc	r19, r1
    8910:	09 f0       	breq	.+2      	; 0x8914 <_printf_fn+0x3e2>
    8912:	9e c0       	rjmp	.+316    	; 0x8a50 <_printf_fn+0x51e>
    8914:	b7 ff       	sbrs	r27, 7
    8916:	96 c0       	rjmp	.+300    	; 0x8a44 <_printf_fn+0x512>
    8918:	68 94       	set
    891a:	96 f8       	bld	r9, 6
    891c:	b0 95       	com	r27
    891e:	a0 95       	com	r26
    8920:	90 95       	com	r25
    8922:	81 95       	neg	r24
    8924:	9f 4f       	sbci	r25, 0xFF	; 255
    8926:	af 4f       	sbci	r26, 0xFF	; 255
    8928:	bf 4f       	sbci	r27, 0xFF	; 255
    892a:	2f 96       	adiw	r28, 0x0f	; 15
    892c:	8c af       	std	Y+60, r24	; 0x3c
    892e:	9d af       	std	Y+61, r25	; 0x3d
    8930:	ae af       	std	Y+62, r26	; 0x3e
    8932:	bf af       	std	Y+63, r27	; 0x3f
    8934:	2f 97       	sbiw	r28, 0x0f	; 15
    8936:	86 c0       	rjmp	.+268    	; 0x8a44 <_printf_fn+0x512>
    8938:	81 e0       	ldi	r24, 0x01	; 1
    893a:	90 e0       	ldi	r25, 0x00	; 0
    893c:	6f 96       	adiw	r28, 0x1f	; 31
    893e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8940:	bf ad       	ldd	r27, Y+63	; 0x3f
    8942:	6f 97       	sbiw	r28, 0x1f	; 31
    8944:	51 01       	movw	r10, r2
    8946:	18 97       	sbiw	r26, 0x08	; 8
    8948:	09 f0       	breq	.+2      	; 0x894c <_printf_fn+0x41a>
    894a:	89 c0       	rjmp	.+274    	; 0x8a5e <_printf_fn+0x52c>
    894c:	b8 e0       	ldi	r27, 0x08	; 8
    894e:	ab 0e       	add	r10, r27
    8950:	b1 1c       	adc	r11, r1
    8952:	f1 01       	movw	r30, r2
    8954:	f0 81       	ld	r31, Z
    8956:	aa 96       	adiw	r28, 0x2a	; 42
    8958:	ff af       	std	Y+63, r31	; 0x3f
    895a:	aa 97       	sbiw	r28, 0x2a	; 42
    895c:	d1 01       	movw	r26, r2
    895e:	11 96       	adiw	r26, 0x01	; 1
    8960:	fc 90       	ld	r15, X
    8962:	11 97       	sbiw	r26, 0x01	; 1
    8964:	12 96       	adiw	r26, 0x02	; 2
    8966:	0c 91       	ld	r16, X
    8968:	12 97       	sbiw	r26, 0x02	; 2
    896a:	13 96       	adiw	r26, 0x03	; 3
    896c:	1c 91       	ld	r17, X
    896e:	13 97       	sbiw	r26, 0x03	; 3
    8970:	14 96       	adiw	r26, 0x04	; 4
    8972:	bc 91       	ld	r27, X
    8974:	f1 01       	movw	r30, r2
    8976:	f5 81       	ldd	r31, Z+5	; 0x05
    8978:	ab 96       	adiw	r28, 0x2b	; 43
    897a:	ff af       	std	Y+63, r31	; 0x3f
    897c:	ab 97       	sbiw	r28, 0x2b	; 43
    897e:	f1 01       	movw	r30, r2
    8980:	f6 81       	ldd	r31, Z+6	; 0x06
    8982:	ac 96       	adiw	r28, 0x2c	; 44
    8984:	ff af       	std	Y+63, r31	; 0x3f
    8986:	ac 97       	sbiw	r28, 0x2c	; 44
    8988:	f1 01       	movw	r30, r2
    898a:	37 80       	ldd	r3, Z+7	; 0x07
    898c:	aa 96       	adiw	r28, 0x2a	; 42
    898e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8990:	aa 97       	sbiw	r28, 0x2a	; 42
    8992:	24 96       	adiw	r28, 0x04	; 4
    8994:	ff af       	std	Y+63, r31	; 0x3f
    8996:	24 97       	sbiw	r28, 0x04	; 4
    8998:	25 96       	adiw	r28, 0x05	; 5
    899a:	ff ae       	std	Y+63, r15	; 0x3f
    899c:	25 97       	sbiw	r28, 0x05	; 5
    899e:	26 96       	adiw	r28, 0x06	; 6
    89a0:	0f af       	std	Y+63, r16	; 0x3f
    89a2:	26 97       	sbiw	r28, 0x06	; 6
    89a4:	27 96       	adiw	r28, 0x07	; 7
    89a6:	1f af       	std	Y+63, r17	; 0x3f
    89a8:	27 97       	sbiw	r28, 0x07	; 7
    89aa:	28 96       	adiw	r28, 0x08	; 8
    89ac:	bf af       	std	Y+63, r27	; 0x3f
    89ae:	28 97       	sbiw	r28, 0x08	; 8
    89b0:	ab 96       	adiw	r28, 0x2b	; 43
    89b2:	ef ad       	ldd	r30, Y+63	; 0x3f
    89b4:	ab 97       	sbiw	r28, 0x2b	; 43
    89b6:	29 96       	adiw	r28, 0x09	; 9
    89b8:	ef af       	std	Y+63, r30	; 0x3f
    89ba:	29 97       	sbiw	r28, 0x09	; 9
    89bc:	ac 96       	adiw	r28, 0x2c	; 44
    89be:	ff ad       	ldd	r31, Y+63	; 0x3f
    89c0:	ac 97       	sbiw	r28, 0x2c	; 44
    89c2:	2a 96       	adiw	r28, 0x0a	; 10
    89c4:	ff af       	std	Y+63, r31	; 0x3f
    89c6:	2a 97       	sbiw	r28, 0x0a	; 10
    89c8:	2b 96       	adiw	r28, 0x0b	; 11
    89ca:	3f ae       	std	Y+63, r3	; 0x3f
    89cc:	2b 97       	sbiw	r28, 0x0b	; 11
    89ce:	89 2b       	or	r24, r25
    89d0:	09 f4       	brne	.+2      	; 0x89d4 <_printf_fn+0x4a2>
    89d2:	50 c0       	rjmp	.+160    	; 0x8a74 <_printf_fn+0x542>
    89d4:	aa 96       	adiw	r28, 0x2a	; 42
    89d6:	2f ad       	ldd	r18, Y+63	; 0x3f
    89d8:	aa 97       	sbiw	r28, 0x2a	; 42
    89da:	3f 2d       	mov	r19, r15
    89dc:	a8 01       	movw	r20, r16
    89de:	6b 2f       	mov	r22, r27
    89e0:	7e 2f       	mov	r23, r30
    89e2:	8f 2f       	mov	r24, r31
    89e4:	93 2d       	mov	r25, r3
    89e6:	a0 e0       	ldi	r26, 0x00	; 0
    89e8:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <__cmpdi2_s8>
    89ec:	0c f0       	brlt	.+2      	; 0x89f0 <_printf_fn+0x4be>
    89ee:	42 c0       	rjmp	.+132    	; 0x8a74 <_printf_fn+0x542>
    89f0:	68 94       	set
    89f2:	96 f8       	bld	r9, 6
    89f4:	0e 94 f5 ec 	call	0x1d9ea	; 0x1d9ea <__negdi2>
    89f8:	24 96       	adiw	r28, 0x04	; 4
    89fa:	2f af       	std	Y+63, r18	; 0x3f
    89fc:	24 97       	sbiw	r28, 0x04	; 4
    89fe:	25 96       	adiw	r28, 0x05	; 5
    8a00:	3f af       	std	Y+63, r19	; 0x3f
    8a02:	25 97       	sbiw	r28, 0x05	; 5
    8a04:	26 96       	adiw	r28, 0x06	; 6
    8a06:	4f af       	std	Y+63, r20	; 0x3f
    8a08:	26 97       	sbiw	r28, 0x06	; 6
    8a0a:	27 96       	adiw	r28, 0x07	; 7
    8a0c:	5f af       	std	Y+63, r21	; 0x3f
    8a0e:	27 97       	sbiw	r28, 0x07	; 7
    8a10:	28 96       	adiw	r28, 0x08	; 8
    8a12:	6f af       	std	Y+63, r22	; 0x3f
    8a14:	28 97       	sbiw	r28, 0x08	; 8
    8a16:	29 96       	adiw	r28, 0x09	; 9
    8a18:	7f af       	std	Y+63, r23	; 0x3f
    8a1a:	29 97       	sbiw	r28, 0x09	; 9
    8a1c:	2a 96       	adiw	r28, 0x0a	; 10
    8a1e:	8f af       	std	Y+63, r24	; 0x3f
    8a20:	2a 97       	sbiw	r28, 0x0a	; 10
    8a22:	2b 96       	adiw	r28, 0x0b	; 11
    8a24:	9f af       	std	Y+63, r25	; 0x3f
    8a26:	2b 97       	sbiw	r28, 0x0b	; 11
    8a28:	25 c0       	rjmp	.+74     	; 0x8a74 <_printf_fn+0x542>
    8a2a:	22 e0       	ldi	r18, 0x02	; 2
    8a2c:	30 e0       	ldi	r19, 0x00	; 0
    8a2e:	6f 96       	adiw	r28, 0x1f	; 31
    8a30:	3f af       	std	Y+63, r19	; 0x3f
    8a32:	2e af       	std	Y+62, r18	; 0x3e
    8a34:	6f 97       	sbiw	r28, 0x1f	; 31
    8a36:	6c 96       	adiw	r28, 0x1c	; 28
    8a38:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a3a:	6c 97       	sbiw	r28, 0x1c	; 28
    8a3c:	6d 96       	adiw	r28, 0x1d	; 29
    8a3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a40:	6d 97       	sbiw	r28, 0x1d	; 29
    8a42:	1e c0       	rjmp	.+60     	; 0x8a80 <_printf_fn+0x54e>
    8a44:	44 e0       	ldi	r20, 0x04	; 4
    8a46:	50 e0       	ldi	r21, 0x00	; 0
    8a48:	6f 96       	adiw	r28, 0x1f	; 31
    8a4a:	5f af       	std	Y+63, r21	; 0x3f
    8a4c:	4e af       	std	Y+62, r20	; 0x3e
    8a4e:	6f 97       	sbiw	r28, 0x1f	; 31
    8a50:	6a 96       	adiw	r28, 0x1a	; 26
    8a52:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a54:	6a 97       	sbiw	r28, 0x1a	; 26
    8a56:	6b 96       	adiw	r28, 0x1b	; 27
    8a58:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a5a:	6b 97       	sbiw	r28, 0x1b	; 27
    8a5c:	11 c0       	rjmp	.+34     	; 0x8a80 <_printf_fn+0x54e>
    8a5e:	66 96       	adiw	r28, 0x16	; 22
    8a60:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a62:	66 97       	sbiw	r28, 0x16	; 22
    8a64:	67 96       	adiw	r28, 0x17	; 23
    8a66:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a68:	67 97       	sbiw	r28, 0x17	; 23
    8a6a:	a3 96       	adiw	r28, 0x23	; 35
    8a6c:	1f ae       	std	Y+63, r1	; 0x3f
    8a6e:	1e ae       	std	Y+62, r1	; 0x3e
    8a70:	a3 97       	sbiw	r28, 0x23	; 35
    8a72:	06 c0       	rjmp	.+12     	; 0x8a80 <_printf_fn+0x54e>
    8a74:	68 96       	adiw	r28, 0x18	; 24
    8a76:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a78:	68 97       	sbiw	r28, 0x18	; 24
    8a7a:	69 96       	adiw	r28, 0x19	; 25
    8a7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a7e:	69 97       	sbiw	r28, 0x19	; 25
    8a80:	5f ef       	ldi	r21, 0xFF	; 255
    8a82:	65 1a       	sub	r6, r21
    8a84:	75 0a       	sbc	r7, r21
    8a86:	85 0a       	sbc	r8, r21
    8a88:	15 01       	movw	r2, r10
    8a8a:	2d c0       	rjmp	.+90     	; 0x8ae6 <_printf_fn+0x5b4>
    8a8c:	91 fc       	sbrc	r9, 1
    8a8e:	08 c0       	rjmp	.+16     	; 0x8aa0 <_printf_fn+0x56e>
    8a90:	68 94       	set
    8a92:	91 f8       	bld	r9, 1
    8a94:	86 e0       	ldi	r24, 0x06	; 6
    8a96:	90 e0       	ldi	r25, 0x00	; 0
    8a98:	a1 96       	adiw	r28, 0x21	; 33
    8a9a:	9f af       	std	Y+63, r25	; 0x3f
    8a9c:	8e af       	std	Y+62, r24	; 0x3e
    8a9e:	a1 97       	sbiw	r28, 0x21	; 33
    8aa0:	d1 01       	movw	r26, r2
    8aa2:	2d 91       	ld	r18, X+
    8aa4:	3d 91       	ld	r19, X+
    8aa6:	4d 91       	ld	r20, X+
    8aa8:	5c 91       	ld	r21, X
    8aaa:	a9 96       	adiw	r28, 0x29	; 41
    8aac:	2c af       	std	Y+60, r18	; 0x3c
    8aae:	3d af       	std	Y+61, r19	; 0x3d
    8ab0:	4e af       	std	Y+62, r20	; 0x3e
    8ab2:	5f af       	std	Y+63, r21	; 0x3f
    8ab4:	a9 97       	sbiw	r28, 0x29	; 41
    8ab6:	bf ef       	ldi	r27, 0xFF	; 255
    8ab8:	6b 1a       	sub	r6, r27
    8aba:	7b 0a       	sbc	r7, r27
    8abc:	8b 0a       	sbc	r8, r27
    8abe:	f1 01       	movw	r30, r2
    8ac0:	34 96       	adiw	r30, 0x04	; 4
    8ac2:	1f 01       	movw	r2, r30
    8ac4:	0a c0       	rjmp	.+20     	; 0x8ada <_printf_fn+0x5a8>
    8ac6:	ff ef       	ldi	r31, 0xFF	; 255
    8ac8:	6f 1a       	sub	r6, r31
    8aca:	7f 0a       	sbc	r7, r31
    8acc:	8f 0a       	sbc	r8, r31
    8ace:	b0 c0       	rjmp	.+352    	; 0x8c30 <_printf_fn+0x6fe>
    8ad0:	2f ef       	ldi	r18, 0xFF	; 255
    8ad2:	62 1a       	sub	r6, r18
    8ad4:	72 0a       	sbc	r7, r18
    8ad6:	82 0a       	sbc	r8, r18
    8ad8:	b8 c0       	rjmp	.+368    	; 0x8c4a <_printf_fn+0x718>
    8ada:	66 96       	adiw	r28, 0x16	; 22
    8adc:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ade:	66 97       	sbiw	r28, 0x16	; 22
    8ae0:	67 96       	adiw	r28, 0x17	; 23
    8ae2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ae4:	67 97       	sbiw	r28, 0x17	; 23
    8ae6:	a3 96       	adiw	r28, 0x23	; 35
    8ae8:	ee ad       	ldd	r30, Y+62	; 0x3e
    8aea:	ff ad       	ldd	r31, Y+63	; 0x3f
    8aec:	a3 97       	sbiw	r28, 0x23	; 35
    8aee:	e2 54       	subi	r30, 0x42	; 66
    8af0:	f1 09       	sbc	r31, r1
    8af2:	e7 33       	cpi	r30, 0x37	; 55
    8af4:	f1 05       	cpc	r31, r1
    8af6:	08 f0       	brcs	.+2      	; 0x8afa <_printf_fn+0x5c8>
    8af8:	f9 c0       	rjmp	.+498    	; 0x8cec <_printf_fn+0x7ba>
    8afa:	e3 58       	subi	r30, 0x83	; 131
    8afc:	ff 4f       	sbci	r31, 0xFF	; 255
    8afe:	0c 94 c1 ec 	jmp	0x1d982	; 0x1d982 <__tablejump2__>
    8b02:	e8 94       	clt
    8b04:	94 f8       	bld	r9, 4
    8b06:	e8 94       	clt
    8b08:	92 f8       	bld	r9, 2
    8b0a:	a9 2c       	mov	r10, r9
    8b0c:	b1 2c       	mov	r11, r1
    8b0e:	a1 96       	adiw	r28, 0x21	; 33
    8b10:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b12:	df ac       	ldd	r13, Y+63	; 0x3f
    8b14:	a1 97       	sbiw	r28, 0x21	; 33
    8b16:	72 01       	movw	r14, r4
    8b18:	0a e0       	ldi	r16, 0x0A	; 10
    8b1a:	10 e0       	ldi	r17, 0x00	; 0
    8b1c:	13 c0       	rjmp	.+38     	; 0x8b44 <_printf_fn+0x612>
    8b1e:	a9 2c       	mov	r10, r9
    8b20:	b1 2c       	mov	r11, r1
    8b22:	a1 96       	adiw	r28, 0x21	; 33
    8b24:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b26:	df ac       	ldd	r13, Y+63	; 0x3f
    8b28:	a1 97       	sbiw	r28, 0x21	; 33
    8b2a:	72 01       	movw	r14, r4
    8b2c:	02 e0       	ldi	r16, 0x02	; 2
    8b2e:	10 e0       	ldi	r17, 0x00	; 0
    8b30:	09 c0       	rjmp	.+18     	; 0x8b44 <_printf_fn+0x612>
    8b32:	a9 2c       	mov	r10, r9
    8b34:	b1 2c       	mov	r11, r1
    8b36:	a1 96       	adiw	r28, 0x21	; 33
    8b38:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b3a:	df ac       	ldd	r13, Y+63	; 0x3f
    8b3c:	a1 97       	sbiw	r28, 0x21	; 33
    8b3e:	72 01       	movw	r14, r4
    8b40:	08 e0       	ldi	r16, 0x08	; 8
    8b42:	10 e0       	ldi	r17, 0x00	; 0
    8b44:	22 e4       	ldi	r18, 0x42	; 66
    8b46:	30 e0       	ldi	r19, 0x00	; 0
    8b48:	ae 01       	movw	r20, r28
    8b4a:	4f 5f       	subi	r20, 0xFF	; 255
    8b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b4e:	6f 96       	adiw	r28, 0x1f	; 31
    8b50:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b52:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b54:	6f 97       	sbiw	r28, 0x1f	; 31
    8b56:	f3 d9       	rcall	.-3098   	; 0x7f3e <p_ntoa>
    8b58:	30 c0       	rjmp	.+96     	; 0x8bba <_printf_fn+0x688>
    8b5a:	a9 2c       	mov	r10, r9
    8b5c:	b1 2c       	mov	r11, r1
    8b5e:	a1 96       	adiw	r28, 0x21	; 33
    8b60:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b62:	df ac       	ldd	r13, Y+63	; 0x3f
    8b64:	a1 97       	sbiw	r28, 0x21	; 33
    8b66:	72 01       	movw	r14, r4
    8b68:	00 e1       	ldi	r16, 0x10	; 16
    8b6a:	10 e0       	ldi	r17, 0x00	; 0
    8b6c:	22 e4       	ldi	r18, 0x42	; 66
    8b6e:	30 e0       	ldi	r19, 0x00	; 0
    8b70:	ae 01       	movw	r20, r28
    8b72:	4f 5f       	subi	r20, 0xFF	; 255
    8b74:	5f 4f       	sbci	r21, 0xFF	; 255
    8b76:	6f 96       	adiw	r28, 0x1f	; 31
    8b78:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b7a:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b7c:	6f 97       	sbiw	r28, 0x1f	; 31
    8b7e:	df d9       	rcall	.-3138   	; 0x7f3e <p_ntoa>
    8b80:	7c 01       	movw	r14, r24
    8b82:	a3 96       	adiw	r28, 0x23	; 35
    8b84:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b86:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b88:	a3 97       	sbiw	r28, 0x23	; 35
    8b8a:	67 7f       	andi	r22, 0xF7	; 247
    8b8c:	60 35       	cpi	r22, 0x50	; 80
    8b8e:	71 05       	cpc	r23, r1
    8b90:	c9 f5       	brne	.+114    	; 0x8c04 <_printf_fn+0x6d2>
    8b92:	34 c0       	rjmp	.+104    	; 0x8bfc <_printf_fn+0x6ca>
    8b94:	c9 2c       	mov	r12, r9
    8b96:	d1 2c       	mov	r13, r1
    8b98:	a1 96       	adiw	r28, 0x21	; 33
    8b9a:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b9c:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b9e:	a1 97       	sbiw	r28, 0x21	; 33
    8ba0:	82 01       	movw	r16, r4
    8ba2:	22 e4       	ldi	r18, 0x42	; 66
    8ba4:	30 e0       	ldi	r19, 0x00	; 0
    8ba6:	ae 01       	movw	r20, r28
    8ba8:	4f 5f       	subi	r20, 0xFF	; 255
    8baa:	5f 4f       	sbci	r21, 0xFF	; 255
    8bac:	a9 96       	adiw	r28, 0x29	; 41
    8bae:	6c ad       	ldd	r22, Y+60	; 0x3c
    8bb0:	7d ad       	ldd	r23, Y+61	; 0x3d
    8bb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bb6:	a9 97       	sbiw	r28, 0x29	; 41
    8bb8:	17 da       	rcall	.-3026   	; 0x7fe8 <p_ftoa>
    8bba:	93 fa       	bst	r9, 3
    8bbc:	00 27       	eor	r16, r16
    8bbe:	00 f9       	bld	r16, 0
    8bc0:	10 e0       	ldi	r17, 0x00	; 0
    8bc2:	9c 01       	movw	r18, r24
    8bc4:	24 c0       	rjmp	.+72     	; 0x8c0e <_printf_fn+0x6dc>
    8bc6:	c9 2c       	mov	r12, r9
    8bc8:	d1 2c       	mov	r13, r1
    8bca:	a1 96       	adiw	r28, 0x21	; 33
    8bcc:	ee ac       	ldd	r14, Y+62	; 0x3e
    8bce:	ff ac       	ldd	r15, Y+63	; 0x3f
    8bd0:	a1 97       	sbiw	r28, 0x21	; 33
    8bd2:	82 01       	movw	r16, r4
    8bd4:	22 e4       	ldi	r18, 0x42	; 66
    8bd6:	30 e0       	ldi	r19, 0x00	; 0
    8bd8:	ae 01       	movw	r20, r28
    8bda:	4f 5f       	subi	r20, 0xFF	; 255
    8bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    8bde:	a9 96       	adiw	r28, 0x29	; 41
    8be0:	6c ad       	ldd	r22, Y+60	; 0x3c
    8be2:	7d ad       	ldd	r23, Y+61	; 0x3d
    8be4:	8e ad       	ldd	r24, Y+62	; 0x3e
    8be6:	9f ad       	ldd	r25, Y+63	; 0x3f
    8be8:	a9 97       	sbiw	r28, 0x29	; 41
    8bea:	05 db       	rcall	.-2550   	; 0x81f6 <p_etoa>
    8bec:	7c 01       	movw	r14, r24
    8bee:	a3 96       	adiw	r28, 0x23	; 35
    8bf0:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bf2:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bf4:	a3 97       	sbiw	r28, 0x23	; 35
    8bf6:	45 34       	cpi	r20, 0x45	; 69
    8bf8:	51 05       	cpc	r21, r1
    8bfa:	21 f4       	brne	.+8      	; 0x8c04 <_printf_fn+0x6d2>
    8bfc:	ce 01       	movw	r24, r28
    8bfe:	01 96       	adiw	r24, 0x01	; 1
    8c00:	0e 94 9b 32 	call	0x6536	; 0x6536 <strupper>
    8c04:	93 fa       	bst	r9, 3
    8c06:	00 27       	eor	r16, r16
    8c08:	00 f9       	bld	r16, 0
    8c0a:	10 e0       	ldi	r17, 0x00	; 0
    8c0c:	97 01       	movw	r18, r14
    8c0e:	a2 01       	movw	r20, r4
    8c10:	be 01       	movw	r22, r28
    8c12:	6f 5f       	subi	r22, 0xFF	; 255
    8c14:	7f 4f       	sbci	r23, 0xFF	; 255
    8c16:	a5 96       	adiw	r28, 0x25	; 37
    8c18:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c1c:	a5 97       	sbiw	r28, 0x25	; 37
    8c1e:	47 dc       	rcall	.-1906   	; 0x84ae <_puts_pad>
    8c20:	69 c0       	rjmp	.+210    	; 0x8cf4 <_printf_fn+0x7c2>
    8c22:	a3 96       	adiw	r28, 0x23	; 35
    8c24:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c26:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c28:	a3 97       	sbiw	r28, 0x23	; 35
    8c2a:	83 37       	cpi	r24, 0x73	; 115
    8c2c:	91 05       	cpc	r25, r1
    8c2e:	69 f4       	brne	.+26     	; 0x8c4a <_printf_fn+0x718>
    8c30:	71 01       	movw	r14, r2
    8c32:	92 e0       	ldi	r25, 0x02	; 2
    8c34:	e9 0e       	add	r14, r25
    8c36:	f1 1c       	adc	r15, r1
    8c38:	d1 01       	movw	r26, r2
    8c3a:	6d 91       	ld	r22, X+
    8c3c:	7c 91       	ld	r23, X
    8c3e:	61 15       	cp	r22, r1
    8c40:	71 05       	cpc	r23, r1
    8c42:	91 f4       	brne	.+36     	; 0x8c68 <_printf_fn+0x736>
    8c44:	61 ed       	ldi	r22, 0xD1	; 209
    8c46:	77 e0       	ldi	r23, 0x07	; 7
    8c48:	0f c0       	rjmp	.+30     	; 0x8c68 <_printf_fn+0x736>
    8c4a:	71 01       	movw	r14, r2
    8c4c:	b2 e0       	ldi	r27, 0x02	; 2
    8c4e:	eb 0e       	add	r14, r27
    8c50:	f1 1c       	adc	r15, r1
    8c52:	f1 01       	movw	r30, r2
    8c54:	80 81       	ld	r24, Z
    8c56:	60 96       	adiw	r28, 0x10	; 16
    8c58:	8f af       	std	Y+63, r24	; 0x3f
    8c5a:	60 97       	sbiw	r28, 0x10	; 16
    8c5c:	61 96       	adiw	r28, 0x11	; 17
    8c5e:	1f ae       	std	Y+63, r1	; 0x3f
    8c60:	61 97       	sbiw	r28, 0x11	; 17
    8c62:	be 01       	movw	r22, r28
    8c64:	61 5b       	subi	r22, 0xB1	; 177
    8c66:	7f 4f       	sbci	r23, 0xFF	; 255
    8c68:	fb 01       	movw	r30, r22
    8c6a:	01 90       	ld	r0, Z+
    8c6c:	00 20       	and	r0, r0
    8c6e:	e9 f7       	brne	.-6      	; 0x8c6a <_printf_fn+0x738>
    8c70:	31 97       	sbiw	r30, 0x01	; 1
    8c72:	e6 1b       	sub	r30, r22
    8c74:	f7 0b       	sbc	r31, r23
    8c76:	a1 96       	adiw	r28, 0x21	; 33
    8c78:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c7a:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c7c:	a1 97       	sbiw	r28, 0x21	; 33
    8c7e:	23 2b       	or	r18, r19
    8c80:	21 f4       	brne	.+8      	; 0x8c8a <_printf_fn+0x758>
    8c82:	a1 96       	adiw	r28, 0x21	; 33
    8c84:	ff af       	std	Y+63, r31	; 0x3f
    8c86:	ee af       	std	Y+62, r30	; 0x3e
    8c88:	a1 97       	sbiw	r28, 0x21	; 33
    8c8a:	a1 96       	adiw	r28, 0x21	; 33
    8c8c:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c8e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c90:	a1 97       	sbiw	r28, 0x21	; 33
    8c92:	44 16       	cp	r4, r20
    8c94:	55 06       	cpc	r5, r21
    8c96:	3c f4       	brge	.+14     	; 0x8ca6 <_printf_fn+0x774>
    8c98:	41 14       	cp	r4, r1
    8c9a:	51 04       	cpc	r5, r1
    8c9c:	21 f0       	breq	.+8      	; 0x8ca6 <_printf_fn+0x774>
    8c9e:	a1 96       	adiw	r28, 0x21	; 33
    8ca0:	5f ae       	std	Y+63, r5	; 0x3f
    8ca2:	4e ae       	std	Y+62, r4	; 0x3e
    8ca4:	a1 97       	sbiw	r28, 0x21	; 33
    8ca6:	93 fa       	bst	r9, 3
    8ca8:	00 27       	eor	r16, r16
    8caa:	00 f9       	bld	r16, 0
    8cac:	10 e0       	ldi	r17, 0x00	; 0
    8cae:	a1 96       	adiw	r28, 0x21	; 33
    8cb0:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cb2:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cb4:	a1 97       	sbiw	r28, 0x21	; 33
    8cb6:	a2 01       	movw	r20, r4
    8cb8:	a5 96       	adiw	r28, 0x25	; 37
    8cba:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cbe:	a5 97       	sbiw	r28, 0x25	; 37
    8cc0:	f6 db       	rcall	.-2068   	; 0x84ae <_puts_pad>
    8cc2:	17 01       	movw	r2, r14
    8cc4:	17 c0       	rjmp	.+46     	; 0x8cf4 <_printf_fn+0x7c2>
    8cc6:	f6 01       	movw	r30, r12
    8cc8:	5e 2d       	mov	r21, r14
    8cca:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
    8cce:	66 23       	and	r22, r22
    8cd0:	89 f0       	breq	.+34     	; 0x8cf4 <_printf_fn+0x7c2>
    8cd2:	5f ef       	ldi	r21, 0xFF	; 255
    8cd4:	c5 1a       	sub	r12, r21
    8cd6:	d5 0a       	sbc	r13, r21
    8cd8:	e5 0a       	sbc	r14, r21
    8cda:	a5 96       	adiw	r28, 0x25	; 37
    8cdc:	ae ad       	ldd	r26, Y+62	; 0x3e
    8cde:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ce0:	a5 97       	sbiw	r28, 0x25	; 37
    8ce2:	ed 91       	ld	r30, X+
    8ce4:	fc 91       	ld	r31, X
    8ce6:	11 97       	sbiw	r26, 0x01	; 1
    8ce8:	cd 01       	movw	r24, r26
    8cea:	09 95       	icall
    8cec:	6c 14       	cp	r6, r12
    8cee:	7d 04       	cpc	r7, r13
    8cf0:	8e 04       	cpc	r8, r14
    8cf2:	48 f7       	brcc	.-46     	; 0x8cc6 <_printf_fn+0x794>
    8cf4:	e8 2c       	mov	r14, r8
    8cf6:	63 01       	movw	r12, r6
    8cf8:	4b cc       	rjmp	.-1898   	; 0x8590 <_printf_fn+0x5e>
    8cfa:	e2 e0       	ldi	r30, 0x02	; 2
    8cfc:	f0 e0       	ldi	r31, 0x00	; 0
    8cfe:	6f 96       	adiw	r28, 0x1f	; 31
    8d00:	ff af       	std	Y+63, r31	; 0x3f
    8d02:	ee af       	std	Y+62, r30	; 0x3e
    8d04:	6f 97       	sbiw	r28, 0x1f	; 31
    8d06:	57 cd       	rjmp	.-1362   	; 0x87b6 <_printf_fn+0x284>
    8d08:	6f 96       	adiw	r28, 0x1f	; 31
    8d0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    8d0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    8d0e:	6f 97       	sbiw	r28, 0x1f	; 31
    8d10:	32 97       	sbiw	r30, 0x02	; 2
    8d12:	61 f4       	brne	.+24     	; 0x8d2c <_printf_fn+0x7fa>
    8d14:	51 01       	movw	r10, r2
    8d16:	f2 e0       	ldi	r31, 0x02	; 2
    8d18:	af 0e       	add	r10, r31
    8d1a:	b1 1c       	adc	r11, r1
    8d1c:	d1 01       	movw	r26, r2
    8d1e:	8d 91       	ld	r24, X+
    8d20:	9c 91       	ld	r25, X
    8d22:	65 96       	adiw	r28, 0x15	; 21
    8d24:	9f af       	std	Y+63, r25	; 0x3f
    8d26:	8e af       	std	Y+62, r24	; 0x3e
    8d28:	65 97       	sbiw	r28, 0x15	; 21
    8d2a:	c5 cd       	rjmp	.-1142   	; 0x88b6 <_printf_fn+0x384>
    8d2c:	6f 96       	adiw	r28, 0x1f	; 31
    8d2e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d30:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d32:	6f 97       	sbiw	r28, 0x1f	; 31
    8d34:	24 30       	cpi	r18, 0x04	; 4
    8d36:	31 05       	cpc	r19, r1
    8d38:	09 f0       	breq	.+2      	; 0x8d3c <_printf_fn+0x80a>
    8d3a:	fe cd       	rjmp	.-1028   	; 0x8938 <_printf_fn+0x406>
    8d3c:	51 01       	movw	r10, r2
    8d3e:	f4 e0       	ldi	r31, 0x04	; 4
    8d40:	af 0e       	add	r10, r31
    8d42:	b1 1c       	adc	r11, r1
    8d44:	f1 01       	movw	r30, r2
    8d46:	80 81       	ld	r24, Z
    8d48:	91 81       	ldd	r25, Z+1	; 0x01
    8d4a:	a2 81       	ldd	r26, Z+2	; 0x02
    8d4c:	b3 81       	ldd	r27, Z+3	; 0x03
    8d4e:	2f 96       	adiw	r28, 0x0f	; 15
    8d50:	8c af       	std	Y+60, r24	; 0x3c
    8d52:	9d af       	std	Y+61, r25	; 0x3d
    8d54:	ae af       	std	Y+62, r26	; 0x3e
    8d56:	bf af       	std	Y+63, r27	; 0x3f
    8d58:	2f 97       	sbiw	r28, 0x0f	; 15
    8d5a:	dc cd       	rjmp	.-1096   	; 0x8914 <_printf_fn+0x3e2>
    8d5c:	c5 59       	subi	r28, 0x95	; 149
    8d5e:	df 4f       	sbci	r29, 0xFF	; 255
    8d60:	e2 e1       	ldi	r30, 0x12	; 18
    8d62:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

00008d66 <vsnprintf_P>:
    8d66:	a8 e0       	ldi	r26, 0x08	; 8
    8d68:	b0 e0       	ldi	r27, 0x00	; 0
    8d6a:	e9 eb       	ldi	r30, 0xB9	; 185
    8d6c:	f6 e4       	ldi	r31, 0x46	; 70
    8d6e:	0c 94 11 ed 	jmp	0x1da22	; 0x1da22 <__prologue_saves__+0x18>
    8d72:	7c 01       	movw	r14, r24
    8d74:	cb 01       	movw	r24, r22
    8d76:	64 2f       	mov	r22, r20
    8d78:	a9 01       	movw	r20, r18
    8d7a:	98 01       	movw	r18, r16
    8d7c:	f7 01       	movw	r30, r14
    8d7e:	10 82       	st	Z, r1
    8d80:	e0 ec       	ldi	r30, 0xC0	; 192
    8d82:	fe e3       	ldi	r31, 0x3E	; 62
    8d84:	fa 83       	std	Y+2, r31	; 0x02
    8d86:	e9 83       	std	Y+1, r30	; 0x01
    8d88:	9e 83       	std	Y+6, r25	; 0x06
    8d8a:	8d 83       	std	Y+5, r24	; 0x05
    8d8c:	18 86       	std	Y+8, r1	; 0x08
    8d8e:	1f 82       	std	Y+7, r1	; 0x07
    8d90:	fc 82       	std	Y+4, r15	; 0x04
    8d92:	eb 82       	std	Y+3, r14	; 0x03
    8d94:	ce 01       	movw	r24, r28
    8d96:	01 96       	adiw	r24, 0x01	; 1
    8d98:	cc db       	rcall	.-2152   	; 0x8532 <_printf_fn>
    8d9a:	f7 01       	movw	r30, r14
    8d9c:	01 90       	ld	r0, Z+
    8d9e:	00 20       	and	r0, r0
    8da0:	e9 f7       	brne	.-6      	; 0x8d9c <vsnprintf_P+0x36>
    8da2:	cf 01       	movw	r24, r30
    8da4:	01 97       	sbiw	r24, 0x01	; 1
    8da6:	8e 19       	sub	r24, r14
    8da8:	9f 09       	sbc	r25, r15
    8daa:	28 96       	adiw	r28, 0x08	; 8
    8dac:	e6 e0       	ldi	r30, 0x06	; 6
    8dae:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00008db2 <snprintf_P>:
    8db2:	a0 e0       	ldi	r26, 0x00	; 0
    8db4:	b0 e0       	ldi	r27, 0x00	; 0
    8db6:	ef ed       	ldi	r30, 0xDF	; 223
    8db8:	f6 e4       	ldi	r31, 0x46	; 70
    8dba:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    8dbe:	8e 01       	movw	r16, r28
    8dc0:	02 5f       	subi	r16, 0xF2	; 242
    8dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    8dc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    8dc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    8dc8:	4d 85       	ldd	r20, Y+13	; 0x0d
    8dca:	69 85       	ldd	r22, Y+9	; 0x09
    8dcc:	7a 85       	ldd	r23, Y+10	; 0x0a
    8dce:	8f 81       	ldd	r24, Y+7	; 0x07
    8dd0:	98 85       	ldd	r25, Y+8	; 0x08
    8dd2:	c9 df       	rcall	.-110    	; 0x8d66 <vsnprintf_P>
    8dd4:	e4 e0       	ldi	r30, 0x04	; 4
    8dd6:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

00008dda <sprintf_P>:
    8dda:	a0 e0       	ldi	r26, 0x00	; 0
    8ddc:	b0 e0       	ldi	r27, 0x00	; 0
    8dde:	e3 ef       	ldi	r30, 0xF3	; 243
    8de0:	f6 e4       	ldi	r31, 0x46	; 70
    8de2:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    8de6:	8e 01       	movw	r16, r28
    8de8:	04 5f       	subi	r16, 0xF4	; 244
    8dea:	1f 4f       	sbci	r17, 0xFF	; 255
    8dec:	29 85       	ldd	r18, Y+9	; 0x09
    8dee:	3a 85       	ldd	r19, Y+10	; 0x0a
    8df0:	4b 85       	ldd	r20, Y+11	; 0x0b
    8df2:	60 e0       	ldi	r22, 0x00	; 0
    8df4:	74 e0       	ldi	r23, 0x04	; 4
    8df6:	8f 81       	ldd	r24, Y+7	; 0x07
    8df8:	98 85       	ldd	r25, Y+8	; 0x08
    8dfa:	b5 df       	rcall	.-150    	; 0x8d66 <vsnprintf_P>
    8dfc:	e4 e0       	ldi	r30, 0x04	; 4
    8dfe:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

00008e02 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8e02:	a8 e0       	ldi	r26, 0x08	; 8
    8e04:	b0 e0       	ldi	r27, 0x00	; 0
    8e06:	e7 e0       	ldi	r30, 0x07	; 7
    8e08:	f7 e4       	ldi	r31, 0x47	; 71
    8e0a:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    8e0e:	9e 01       	movw	r18, r28
    8e10:	23 5f       	subi	r18, 0xF3	; 243
    8e12:	3f 4f       	sbci	r19, 0xFF	; 255
    8e14:	f9 01       	movw	r30, r18
    8e16:	41 91       	ld	r20, Z+
    8e18:	51 91       	ld	r21, Z+
    8e1a:	61 91       	ld	r22, Z+
    8e1c:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8e1e:	89 ed       	ldi	r24, 0xD9	; 217
    8e20:	9e e3       	ldi	r25, 0x3E	; 62
    8e22:	9a 83       	std	Y+2, r25	; 0x02
    8e24:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8e26:	18 86       	std	Y+8, r1	; 0x08
    8e28:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8e2a:	ce 01       	movw	r24, r28
    8e2c:	01 96       	adiw	r24, 0x01	; 1
    8e2e:	81 db       	rcall	.-2302   	; 0x8532 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e30:	8f 81       	ldd	r24, Y+7	; 0x07
    8e32:	98 85       	ldd	r25, Y+8	; 0x08
    8e34:	28 96       	adiw	r28, 0x08	; 8
    8e36:	e2 e0       	ldi	r30, 0x02	; 2
    8e38:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00008e3c <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8e3c:	9c 01       	movw	r18, r24
    8e3e:	20 53       	subi	r18, 0x30	; 48
    8e40:	31 09       	sbc	r19, r1
    8e42:	2a 30       	cpi	r18, 0x0A	; 10
    8e44:	31 05       	cpc	r19, r1
    8e46:	10 f4       	brcc	.+4      	; 0x8e4c <atodigit+0x10>
    8e48:	c9 01       	movw	r24, r18
    8e4a:	10 c0       	rjmp	.+32     	; 0x8e6c <atodigit+0x30>
    8e4c:	9c 01       	movw	r18, r24
    8e4e:	21 54       	subi	r18, 0x41	; 65
    8e50:	31 09       	sbc	r19, r1
    8e52:	26 30       	cpi	r18, 0x06	; 6
    8e54:	31 05       	cpc	r19, r1
    8e56:	10 f4       	brcc	.+4      	; 0x8e5c <atodigit+0x20>
    8e58:	c7 97       	sbiw	r24, 0x37	; 55
    8e5a:	08 c0       	rjmp	.+16     	; 0x8e6c <atodigit+0x30>
    8e5c:	9c 01       	movw	r18, r24
    8e5e:	21 56       	subi	r18, 0x61	; 97
    8e60:	31 09       	sbc	r19, r1
    8e62:	26 30       	cpi	r18, 0x06	; 6
    8e64:	31 05       	cpc	r19, r1
    8e66:	28 f4       	brcc	.+10     	; 0x8e72 <atodigit+0x36>
    8e68:	87 55       	subi	r24, 0x57	; 87
    8e6a:	91 09       	sbc	r25, r1
    8e6c:	86 17       	cp	r24, r22
    8e6e:	97 07       	cpc	r25, r23
    8e70:	14 f0       	brlt	.+4      	; 0x8e76 <atodigit+0x3a>
    8e72:	8f ef       	ldi	r24, 0xFF	; 255
    8e74:	9f ef       	ldi	r25, 0xFF	; 255
    8e76:	08 95       	ret

00008e78 <strtol>:
    8e78:	a0 e0       	ldi	r26, 0x00	; 0
    8e7a:	b0 e0       	ldi	r27, 0x00	; 0
    8e7c:	e2 e4       	ldi	r30, 0x42	; 66
    8e7e:	f7 e4       	ldi	r31, 0x47	; 71
    8e80:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    8e84:	2b 01       	movw	r4, r22
    8e86:	8a 01       	movw	r16, r20
    8e88:	ec 01       	movw	r28, r24
    8e8a:	28 81       	ld	r18, Y
    8e8c:	01 96       	adiw	r24, 0x01	; 1
    8e8e:	20 32       	cpi	r18, 0x20	; 32
    8e90:	d9 f3       	breq	.-10     	; 0x8e88 <strtol+0x10>
    8e92:	29 30       	cpi	r18, 0x09	; 9
    8e94:	c9 f3       	breq	.-14     	; 0x8e88 <strtol+0x10>
    8e96:	2d 32       	cpi	r18, 0x2D	; 45
    8e98:	29 f4       	brne	.+10     	; 0x8ea4 <strtol+0x2c>
    8e9a:	ec 01       	movw	r28, r24
    8e9c:	66 24       	eor	r6, r6
    8e9e:	63 94       	inc	r6
    8ea0:	71 2c       	mov	r7, r1
    8ea2:	05 c0       	rjmp	.+10     	; 0x8eae <strtol+0x36>
    8ea4:	2b 32       	cpi	r18, 0x2B	; 43
    8ea6:	09 f4       	brne	.+2      	; 0x8eaa <strtol+0x32>
    8ea8:	ec 01       	movw	r28, r24
    8eaa:	61 2c       	mov	r6, r1
    8eac:	71 2c       	mov	r7, r1
    8eae:	9e 01       	movw	r18, r28
    8eb0:	2f 5f       	subi	r18, 0xFF	; 255
    8eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    8eb4:	88 81       	ld	r24, Y
    8eb6:	80 33       	cpi	r24, 0x30	; 48
    8eb8:	11 f4       	brne	.+4      	; 0x8ebe <strtol+0x46>
    8eba:	e9 01       	movw	r28, r18
    8ebc:	f8 cf       	rjmp	.-16     	; 0x8eae <strtol+0x36>
    8ebe:	c1 2c       	mov	r12, r1
    8ec0:	d1 2c       	mov	r13, r1
    8ec2:	76 01       	movw	r14, r12
    8ec4:	48 01       	movw	r8, r16
    8ec6:	01 2e       	mov	r0, r17
    8ec8:	00 0c       	add	r0, r0
    8eca:	aa 08       	sbc	r10, r10
    8ecc:	bb 08       	sbc	r11, r11
    8ece:	3c 2e       	mov	r3, r28
    8ed0:	2d 2e       	mov	r2, r29
    8ed2:	89 91       	ld	r24, Y+
    8ed4:	88 23       	and	r24, r24
    8ed6:	31 f0       	breq	.+12     	; 0x8ee4 <strtol+0x6c>
    8ed8:	b8 01       	movw	r22, r16
    8eda:	90 e0       	ldi	r25, 0x00	; 0
    8edc:	af df       	rcall	.-162    	; 0x8e3c <atodigit>
    8ede:	fc 01       	movw	r30, r24
    8ee0:	97 ff       	sbrs	r25, 7
    8ee2:	0c c0       	rjmp	.+24     	; 0x8efc <strtol+0x84>
    8ee4:	61 14       	cp	r6, r1
    8ee6:	71 04       	cpc	r7, r1
    8ee8:	c1 f0       	breq	.+48     	; 0x8f1a <strtol+0xa2>
    8eea:	f0 94       	com	r15
    8eec:	e0 94       	com	r14
    8eee:	d0 94       	com	r13
    8ef0:	c0 94       	com	r12
    8ef2:	c1 1c       	adc	r12, r1
    8ef4:	d1 1c       	adc	r13, r1
    8ef6:	e1 1c       	adc	r14, r1
    8ef8:	f1 1c       	adc	r15, r1
    8efa:	0f c0       	rjmp	.+30     	; 0x8f1a <strtol+0xa2>
    8efc:	a5 01       	movw	r20, r10
    8efe:	94 01       	movw	r18, r8
    8f00:	c7 01       	movw	r24, r14
    8f02:	b6 01       	movw	r22, r12
    8f04:	0e 94 41 ec 	call	0x1d882	; 0x1d882 <__mulsi3>
    8f08:	6f 01       	movw	r12, r30
    8f0a:	ff 0f       	add	r31, r31
    8f0c:	ee 08       	sbc	r14, r14
    8f0e:	ff 08       	sbc	r15, r15
    8f10:	c6 0e       	add	r12, r22
    8f12:	d7 1e       	adc	r13, r23
    8f14:	e8 1e       	adc	r14, r24
    8f16:	f9 1e       	adc	r15, r25
    8f18:	da cf       	rjmp	.-76     	; 0x8ece <strtol+0x56>
    8f1a:	41 14       	cp	r4, r1
    8f1c:	51 04       	cpc	r5, r1
    8f1e:	19 f0       	breq	.+6      	; 0x8f26 <strtol+0xae>
    8f20:	f2 01       	movw	r30, r4
    8f22:	30 82       	st	Z, r3
    8f24:	21 82       	std	Z+1, r2	; 0x01
    8f26:	c7 01       	movw	r24, r14
    8f28:	b6 01       	movw	r22, r12
    8f2a:	cd b7       	in	r28, 0x3d	; 61
    8f2c:	de b7       	in	r29, 0x3e	; 62
    8f2e:	e2 e1       	ldi	r30, 0x12	; 18
    8f30:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

00008f34 <atoh>:
    8f34:	40 e1       	ldi	r20, 0x10	; 16
    8f36:	50 e0       	ldi	r21, 0x00	; 0
    8f38:	60 e0       	ldi	r22, 0x00	; 0
    8f3a:	70 e0       	ldi	r23, 0x00	; 0
    8f3c:	9d cf       	rjmp	.-198    	; 0x8e78 <strtol>
    8f3e:	08 95       	ret

00008f40 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f40:	4a e0       	ldi	r20, 0x0A	; 10
    8f42:	50 e0       	ldi	r21, 0x00	; 0
    8f44:	60 e0       	ldi	r22, 0x00	; 0
    8f46:	70 e0       	ldi	r23, 0x00	; 0
    8f48:	97 df       	rcall	.-210    	; 0x8e78 <strtol>
    return((int)num);
}
    8f4a:	cb 01       	movw	r24, r22
    8f4c:	08 95       	ret

00008f4e <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f4e:	4a e0       	ldi	r20, 0x0A	; 10
    8f50:	50 e0       	ldi	r21, 0x00	; 0
    8f52:	60 e0       	ldi	r22, 0x00	; 0
    8f54:	70 e0       	ldi	r23, 0x00	; 0
    8f56:	90 cf       	rjmp	.-224    	; 0x8e78 <strtol>
    return(num);
}
    8f58:	08 95       	ret

00008f5a <ld_dword>:
			}
		}
	}

	LEAVE_FF(fs, res);
}
    8f5a:	fc 01       	movw	r30, r24
    8f5c:	62 81       	ldd	r22, Z+2	; 0x02
    8f5e:	73 81       	ldd	r23, Z+3	; 0x03
    8f60:	cb 01       	movw	r24, r22
    8f62:	a0 e0       	ldi	r26, 0x00	; 0
    8f64:	b0 e0       	ldi	r27, 0x00	; 0
    8f66:	ba 2f       	mov	r27, r26
    8f68:	a9 2f       	mov	r26, r25
    8f6a:	98 2f       	mov	r25, r24
    8f6c:	88 27       	eor	r24, r24
    8f6e:	21 81       	ldd	r18, Z+1	; 0x01
    8f70:	82 2b       	or	r24, r18
    8f72:	ba 2f       	mov	r27, r26
    8f74:	a9 2f       	mov	r26, r25
    8f76:	98 2f       	mov	r25, r24
    8f78:	88 27       	eor	r24, r24
    8f7a:	20 81       	ld	r18, Z
    8f7c:	bc 01       	movw	r22, r24
    8f7e:	cd 01       	movw	r24, r26
    8f80:	62 2b       	or	r22, r18
    8f82:	08 95       	ret

00008f84 <st_dword>:
    8f84:	fc 01       	movw	r30, r24
    8f86:	40 83       	st	Z, r20
    8f88:	51 83       	std	Z+1, r21	; 0x01
    8f8a:	62 83       	std	Z+2, r22	; 0x02
    8f8c:	73 83       	std	Z+3, r23	; 0x03
    8f8e:	08 95       	ret

00008f90 <mem_set>:
    8f90:	48 0f       	add	r20, r24
    8f92:	59 1f       	adc	r21, r25
    8f94:	fc 01       	movw	r30, r24
    8f96:	61 93       	st	Z+, r22
    8f98:	cf 01       	movw	r24, r30
    8f9a:	e4 17       	cp	r30, r20
    8f9c:	f5 07       	cpc	r31, r21
    8f9e:	d1 f7       	brne	.-12     	; 0x8f94 <mem_set+0x4>
    8fa0:	08 95       	ret

00008fa2 <clust2sect>:
    8fa2:	0f 93       	push	r16
    8fa4:	1f 93       	push	r17
    8fa6:	fc 01       	movw	r30, r24
    8fa8:	9a 01       	movw	r18, r20
    8faa:	ab 01       	movw	r20, r22
    8fac:	22 50       	subi	r18, 0x02	; 2
    8fae:	31 09       	sbc	r19, r1
    8fb0:	41 09       	sbc	r20, r1
    8fb2:	51 09       	sbc	r21, r1
    8fb4:	81 8d       	ldd	r24, Z+25	; 0x19
    8fb6:	92 8d       	ldd	r25, Z+26	; 0x1a
    8fb8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8fba:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8fbc:	02 97       	sbiw	r24, 0x02	; 2
    8fbe:	a1 09       	sbc	r26, r1
    8fc0:	b1 09       	sbc	r27, r1
    8fc2:	28 17       	cp	r18, r24
    8fc4:	39 07       	cpc	r19, r25
    8fc6:	4a 07       	cpc	r20, r26
    8fc8:	5b 07       	cpc	r21, r27
    8fca:	68 f4       	brcc	.+26     	; 0x8fe6 <clust2sect+0x44>
    8fcc:	a1 85       	ldd	r26, Z+9	; 0x09
    8fce:	b2 85       	ldd	r27, Z+10	; 0x0a
    8fd0:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    8fd4:	05 a5       	ldd	r16, Z+45	; 0x2d
    8fd6:	16 a5       	ldd	r17, Z+46	; 0x2e
    8fd8:	27 a5       	ldd	r18, Z+47	; 0x2f
    8fda:	30 a9       	ldd	r19, Z+48	; 0x30
    8fdc:	60 0f       	add	r22, r16
    8fde:	71 1f       	adc	r23, r17
    8fe0:	82 1f       	adc	r24, r18
    8fe2:	93 1f       	adc	r25, r19
    8fe4:	03 c0       	rjmp	.+6      	; 0x8fec <clust2sect+0x4a>
    8fe6:	60 e0       	ldi	r22, 0x00	; 0
    8fe8:	70 e0       	ldi	r23, 0x00	; 0
    8fea:	cb 01       	movw	r24, r22
    8fec:	1f 91       	pop	r17
    8fee:	0f 91       	pop	r16
    8ff0:	08 95       	ret

00008ff2 <clmt_clust>:
    8ff2:	cf 93       	push	r28
    8ff4:	df 93       	push	r29
    8ff6:	fc 01       	movw	r30, r24
    8ff8:	c2 a1       	ldd	r28, Z+34	; 0x22
    8ffa:	d3 a1       	ldd	r29, Z+35	; 0x23
    8ffc:	24 96       	adiw	r28, 0x04	; 4
    8ffe:	cb 01       	movw	r24, r22
    9000:	ba 01       	movw	r22, r20
    9002:	29 e0       	ldi	r18, 0x09	; 9
    9004:	96 95       	lsr	r25
    9006:	87 95       	ror	r24
    9008:	77 95       	ror	r23
    900a:	67 95       	ror	r22
    900c:	2a 95       	dec	r18
    900e:	d1 f7       	brne	.-12     	; 0x9004 <clmt_clust+0x12>
    9010:	01 90       	ld	r0, Z+
    9012:	f0 81       	ld	r31, Z
    9014:	e0 2d       	mov	r30, r0
    9016:	21 85       	ldd	r18, Z+9	; 0x09
    9018:	32 85       	ldd	r19, Z+10	; 0x0a
    901a:	40 e0       	ldi	r20, 0x00	; 0
    901c:	50 e0       	ldi	r21, 0x00	; 0
    901e:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    9022:	88 81       	ld	r24, Y
    9024:	99 81       	ldd	r25, Y+1	; 0x01
    9026:	aa 81       	ldd	r26, Y+2	; 0x02
    9028:	bb 81       	ldd	r27, Y+3	; 0x03
    902a:	00 97       	sbiw	r24, 0x00	; 0
    902c:	a1 05       	cpc	r26, r1
    902e:	b1 05       	cpc	r27, r1
    9030:	b1 f0       	breq	.+44     	; 0x905e <clmt_clust+0x6c>
    9032:	28 17       	cp	r18, r24
    9034:	39 07       	cpc	r19, r25
    9036:	4a 07       	cpc	r20, r26
    9038:	5b 07       	cpc	r21, r27
    903a:	30 f0       	brcs	.+12     	; 0x9048 <clmt_clust+0x56>
    903c:	28 1b       	sub	r18, r24
    903e:	39 0b       	sbc	r19, r25
    9040:	4a 0b       	sbc	r20, r26
    9042:	5b 0b       	sbc	r21, r27
    9044:	28 96       	adiw	r28, 0x08	; 8
    9046:	ed cf       	rjmp	.-38     	; 0x9022 <clmt_clust+0x30>
    9048:	8c 81       	ldd	r24, Y+4	; 0x04
    904a:	9d 81       	ldd	r25, Y+5	; 0x05
    904c:	ae 81       	ldd	r26, Y+6	; 0x06
    904e:	bf 81       	ldd	r27, Y+7	; 0x07
    9050:	bc 01       	movw	r22, r24
    9052:	cd 01       	movw	r24, r26
    9054:	62 0f       	add	r22, r18
    9056:	73 1f       	adc	r23, r19
    9058:	84 1f       	adc	r24, r20
    905a:	95 1f       	adc	r25, r21
    905c:	03 c0       	rjmp	.+6      	; 0x9064 <clmt_clust+0x72>
    905e:	60 e0       	ldi	r22, 0x00	; 0
    9060:	70 e0       	ldi	r23, 0x00	; 0
    9062:	cb 01       	movw	r24, r22
    9064:	df 91       	pop	r29
    9066:	cf 91       	pop	r28
    9068:	08 95       	ret

0000906a <sum_sfn>:
    906a:	fc 01       	movw	r30, r24
    906c:	9c 01       	movw	r18, r24
    906e:	25 5f       	subi	r18, 0xF5	; 245
    9070:	3f 4f       	sbci	r19, 0xFF	; 255
    9072:	80 e0       	ldi	r24, 0x00	; 0
    9074:	98 2f       	mov	r25, r24
    9076:	90 fb       	bst	r25, 0
    9078:	97 95       	ror	r25
    907a:	97 f9       	bld	r25, 7
    907c:	81 91       	ld	r24, Z+
    907e:	89 0f       	add	r24, r25
    9080:	e2 17       	cp	r30, r18
    9082:	f3 07       	cpc	r31, r19
    9084:	b9 f7       	brne	.-18     	; 0x9074 <sum_sfn+0xa>
    9086:	08 95       	ret

00009088 <get_ldnumber>:
    9088:	dc 01       	movw	r26, r24
    908a:	ed 91       	ld	r30, X+
    908c:	fc 91       	ld	r31, X
    908e:	30 97       	sbiw	r30, 0x00	; 0
    9090:	c1 f0       	breq	.+48     	; 0x90c2 <get_ldnumber+0x3a>
    9092:	df 01       	movw	r26, r30
    9094:	9d 01       	movw	r18, r26
    9096:	4d 91       	ld	r20, X+
    9098:	40 32       	cpi	r20, 0x20	; 32
    909a:	80 f0       	brcs	.+32     	; 0x90bc <get_ldnumber+0x34>
    909c:	4a 33       	cpi	r20, 0x3A	; 58
    909e:	d1 f7       	brne	.-12     	; 0x9094 <get_ldnumber+0xc>
    90a0:	af 01       	movw	r20, r30
    90a2:	4f 5f       	subi	r20, 0xFF	; 255
    90a4:	5f 4f       	sbci	r21, 0xFF	; 255
    90a6:	24 17       	cp	r18, r20
    90a8:	35 07       	cpc	r19, r21
    90aa:	59 f4       	brne	.+22     	; 0x90c2 <get_ldnumber+0x3a>
    90ac:	40 81       	ld	r20, Z
    90ae:	40 33       	cpi	r20, 0x30	; 48
    90b0:	41 f4       	brne	.+16     	; 0x90c2 <get_ldnumber+0x3a>
    90b2:	2f 5f       	subi	r18, 0xFF	; 255
    90b4:	3f 4f       	sbci	r19, 0xFF	; 255
    90b6:	fc 01       	movw	r30, r24
    90b8:	31 83       	std	Z+1, r19	; 0x01
    90ba:	20 83       	st	Z, r18
    90bc:	80 e0       	ldi	r24, 0x00	; 0
    90be:	90 e0       	ldi	r25, 0x00	; 0
    90c0:	08 95       	ret
    90c2:	8f ef       	ldi	r24, 0xFF	; 255
    90c4:	9f ef       	ldi	r25, 0xFF	; 255
    90c6:	08 95       	ret

000090c8 <validate>:
    90c8:	0f 93       	push	r16
    90ca:	1f 93       	push	r17
    90cc:	cf 93       	push	r28
    90ce:	df 93       	push	r29
    90d0:	ec 01       	movw	r28, r24
    90d2:	8b 01       	movw	r16, r22
    90d4:	89 2b       	or	r24, r25
    90d6:	31 f4       	brne	.+12     	; 0x90e4 <validate+0x1c>
    90d8:	f8 01       	movw	r30, r16
    90da:	11 82       	std	Z+1, r1	; 0x01
    90dc:	10 82       	st	Z, r1
    90de:	89 e0       	ldi	r24, 0x09	; 9
    90e0:	90 e0       	ldi	r25, 0x00	; 0
    90e2:	1a c0       	rjmp	.+52     	; 0x9118 <validate+0x50>
    90e4:	e8 81       	ld	r30, Y
    90e6:	f9 81       	ldd	r31, Y+1	; 0x01
    90e8:	30 97       	sbiw	r30, 0x00	; 0
    90ea:	b1 f3       	breq	.-20     	; 0x90d8 <validate+0x10>
    90ec:	80 81       	ld	r24, Z
    90ee:	88 23       	and	r24, r24
    90f0:	99 f3       	breq	.-26     	; 0x90d8 <validate+0x10>
    90f2:	25 81       	ldd	r18, Z+5	; 0x05
    90f4:	36 81       	ldd	r19, Z+6	; 0x06
    90f6:	8a 81       	ldd	r24, Y+2	; 0x02
    90f8:	9b 81       	ldd	r25, Y+3	; 0x03
    90fa:	28 17       	cp	r18, r24
    90fc:	39 07       	cpc	r19, r25
    90fe:	61 f7       	brne	.-40     	; 0x90d8 <validate+0x10>
    9100:	81 81       	ldd	r24, Z+1	; 0x01
    9102:	0e 94 d3 6e 	call	0xdda6	; 0xdda6 <disk_status>
    9106:	80 fd       	sbrc	r24, 0
    9108:	e7 cf       	rjmp	.-50     	; 0x90d8 <validate+0x10>
    910a:	88 81       	ld	r24, Y
    910c:	99 81       	ldd	r25, Y+1	; 0x01
    910e:	f8 01       	movw	r30, r16
    9110:	91 83       	std	Z+1, r25	; 0x01
    9112:	80 83       	st	Z, r24
    9114:	80 e0       	ldi	r24, 0x00	; 0
    9116:	90 e0       	ldi	r25, 0x00	; 0
    9118:	df 91       	pop	r29
    911a:	cf 91       	pop	r28
    911c:	1f 91       	pop	r17
    911e:	0f 91       	pop	r16
    9120:	08 95       	ret

00009122 <mem_cpy.part.0>:
    9122:	fb 01       	movw	r30, r22
    9124:	48 0f       	add	r20, r24
    9126:	59 1f       	adc	r21, r25
    9128:	21 91       	ld	r18, Z+
    912a:	dc 01       	movw	r26, r24
    912c:	2d 93       	st	X+, r18
    912e:	cd 01       	movw	r24, r26
    9130:	a4 17       	cp	r26, r20
    9132:	b5 07       	cpc	r27, r21
    9134:	c9 f7       	brne	.-14     	; 0x9128 <mem_cpy.part.0+0x6>
    9136:	08 95       	ret

00009138 <ld_clust.isra.1>:
    9138:	fb 01       	movw	r30, r22
    913a:	42 8d       	ldd	r20, Z+26	; 0x1a
    913c:	53 8d       	ldd	r21, Z+27	; 0x1b
    913e:	60 e0       	ldi	r22, 0x00	; 0
    9140:	70 e0       	ldi	r23, 0x00	; 0
    9142:	83 30       	cpi	r24, 0x03	; 3
    9144:	59 f4       	brne	.+22     	; 0x915c <ld_clust.isra.1+0x24>
    9146:	84 89       	ldd	r24, Z+20	; 0x14
    9148:	95 89       	ldd	r25, Z+21	; 0x15
    914a:	a0 e0       	ldi	r26, 0x00	; 0
    914c:	b0 e0       	ldi	r27, 0x00	; 0
    914e:	dc 01       	movw	r26, r24
    9150:	99 27       	eor	r25, r25
    9152:	88 27       	eor	r24, r24
    9154:	48 2b       	or	r20, r24
    9156:	59 2b       	or	r21, r25
    9158:	6a 2b       	or	r22, r26
    915a:	7b 2b       	or	r23, r27
    915c:	cb 01       	movw	r24, r22
    915e:	ba 01       	movw	r22, r20
    9160:	08 95       	ret

00009162 <st_clust.isra.2>:
    9162:	fb 01       	movw	r30, r22
    9164:	22 8f       	std	Z+26, r18	; 0x1a
    9166:	33 8f       	std	Z+27, r19	; 0x1b
    9168:	dc 01       	movw	r26, r24
    916a:	8c 91       	ld	r24, X
    916c:	83 30       	cpi	r24, 0x03	; 3
    916e:	29 f4       	brne	.+10     	; 0x917a <st_clust.isra.2+0x18>
    9170:	ca 01       	movw	r24, r20
    9172:	aa 27       	eor	r26, r26
    9174:	bb 27       	eor	r27, r27
    9176:	84 8b       	std	Z+20, r24	; 0x14
    9178:	95 8b       	std	Z+21, r25	; 0x15
    917a:	08 95       	ret

0000917c <sync_window.part.3>:
    917c:	a0 e0       	ldi	r26, 0x00	; 0
    917e:	b0 e0       	ldi	r27, 0x00	; 0
    9180:	e4 ec       	ldi	r30, 0xC4	; 196
    9182:	f8 e4       	ldi	r31, 0x48	; 72
    9184:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
    9188:	ec 01       	movw	r28, r24
    918a:	89 a8       	ldd	r8, Y+49	; 0x31
    918c:	9a a8       	ldd	r9, Y+50	; 0x32
    918e:	ab a8       	ldd	r10, Y+51	; 0x33
    9190:	bc a8       	ldd	r11, Y+52	; 0x34
    9192:	6c 01       	movw	r12, r24
    9194:	85 e3       	ldi	r24, 0x35	; 53
    9196:	c8 0e       	add	r12, r24
    9198:	d1 1c       	adc	r13, r1
    919a:	01 e0       	ldi	r16, 0x01	; 1
    919c:	10 e0       	ldi	r17, 0x00	; 0
    919e:	a5 01       	movw	r20, r10
    91a0:	94 01       	movw	r18, r8
    91a2:	b6 01       	movw	r22, r12
    91a4:	89 81       	ldd	r24, Y+1	; 0x01
    91a6:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    91aa:	89 2b       	or	r24, r25
    91ac:	89 f5       	brne	.+98     	; 0x9210 <sync_window.part.3+0x94>
    91ae:	1b 82       	std	Y+3, r1	; 0x03
    91b0:	8d a1       	ldd	r24, Y+37	; 0x25
    91b2:	9e a1       	ldd	r25, Y+38	; 0x26
    91b4:	af a1       	ldd	r26, Y+39	; 0x27
    91b6:	b8 a5       	ldd	r27, Y+40	; 0x28
    91b8:	b5 01       	movw	r22, r10
    91ba:	a4 01       	movw	r20, r8
    91bc:	48 1b       	sub	r20, r24
    91be:	59 0b       	sbc	r21, r25
    91c0:	6a 0b       	sbc	r22, r26
    91c2:	7b 0b       	sbc	r23, r27
    91c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    91c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    91c8:	af 8d       	ldd	r26, Y+31	; 0x1f
    91ca:	b8 a1       	ldd	r27, Y+32	; 0x20
    91cc:	48 17       	cp	r20, r24
    91ce:	59 07       	cpc	r21, r25
    91d0:	6a 07       	cpc	r22, r26
    91d2:	7b 07       	cpc	r23, r27
    91d4:	18 f0       	brcs	.+6      	; 0x91dc <sync_window.part.3+0x60>
    91d6:	80 e0       	ldi	r24, 0x00	; 0
    91d8:	90 e0       	ldi	r25, 0x00	; 0
    91da:	1c c0       	rjmp	.+56     	; 0x9214 <sync_window.part.3+0x98>
    91dc:	ea 80       	ldd	r14, Y+2	; 0x02
    91de:	f1 2c       	mov	r15, r1
    91e0:	82 e0       	ldi	r24, 0x02	; 2
    91e2:	e8 16       	cp	r14, r24
    91e4:	f1 04       	cpc	r15, r1
    91e6:	b8 f3       	brcs	.-18     	; 0x91d6 <sync_window.part.3+0x5a>
    91e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    91ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    91ec:	af 8d       	ldd	r26, Y+31	; 0x1f
    91ee:	b8 a1       	ldd	r27, Y+32	; 0x20
    91f0:	88 0e       	add	r8, r24
    91f2:	99 1e       	adc	r9, r25
    91f4:	aa 1e       	adc	r10, r26
    91f6:	bb 1e       	adc	r11, r27
    91f8:	01 e0       	ldi	r16, 0x01	; 1
    91fa:	10 e0       	ldi	r17, 0x00	; 0
    91fc:	a5 01       	movw	r20, r10
    91fe:	94 01       	movw	r18, r8
    9200:	b6 01       	movw	r22, r12
    9202:	89 81       	ldd	r24, Y+1	; 0x01
    9204:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    9208:	81 e0       	ldi	r24, 0x01	; 1
    920a:	e8 1a       	sub	r14, r24
    920c:	f1 08       	sbc	r15, r1
    920e:	e8 cf       	rjmp	.-48     	; 0x91e0 <sync_window.part.3+0x64>
    9210:	81 e0       	ldi	r24, 0x01	; 1
    9212:	90 e0       	ldi	r25, 0x00	; 0
    9214:	cd b7       	in	r28, 0x3d	; 61
    9216:	de b7       	in	r29, 0x3e	; 62
    9218:	ec e0       	ldi	r30, 0x0C	; 12
    921a:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

0000921e <sync_window>:
    921e:	fc 01       	movw	r30, r24
    9220:	23 81       	ldd	r18, Z+3	; 0x03
    9222:	22 23       	and	r18, r18
    9224:	11 f0       	breq	.+4      	; 0x922a <sync_window+0xc>
    9226:	aa cf       	rjmp	.-172    	; 0x917c <sync_window.part.3>
    9228:	08 95       	ret
    922a:	80 e0       	ldi	r24, 0x00	; 0
    922c:	90 e0       	ldi	r25, 0x00	; 0
    922e:	08 95       	ret

00009230 <sync_fs>:
    9230:	ef 92       	push	r14
    9232:	ff 92       	push	r15
    9234:	0f 93       	push	r16
    9236:	1f 93       	push	r17
    9238:	cf 93       	push	r28
    923a:	df 93       	push	r29
    923c:	ec 01       	movw	r28, r24
    923e:	ef df       	rcall	.-34     	; 0x921e <sync_window>
    9240:	00 97       	sbiw	r24, 0x00	; 0
    9242:	09 f0       	breq	.+2      	; 0x9246 <sync_fs+0x16>
    9244:	5c c0       	rjmp	.+184    	; 0x92fe <sync_fs+0xce>
    9246:	88 81       	ld	r24, Y
    9248:	83 30       	cpi	r24, 0x03	; 3
    924a:	09 f0       	breq	.+2      	; 0x924e <sync_fs+0x1e>
    924c:	4b c0       	rjmp	.+150    	; 0x92e4 <sync_fs+0xb4>
    924e:	8c 81       	ldd	r24, Y+4	; 0x04
    9250:	81 30       	cpi	r24, 0x01	; 1
    9252:	09 f0       	breq	.+2      	; 0x9256 <sync_fs+0x26>
    9254:	47 c0       	rjmp	.+142    	; 0x92e4 <sync_fs+0xb4>
    9256:	40 e0       	ldi	r20, 0x00	; 0
    9258:	52 e0       	ldi	r21, 0x02	; 2
    925a:	60 e0       	ldi	r22, 0x00	; 0
    925c:	70 e0       	ldi	r23, 0x00	; 0
    925e:	7e 01       	movw	r14, r28
    9260:	85 e3       	ldi	r24, 0x35	; 53
    9262:	e8 0e       	add	r14, r24
    9264:	f1 1c       	adc	r15, r1
    9266:	c7 01       	movw	r24, r14
    9268:	93 de       	rcall	.-730    	; 0x8f90 <mem_set>
    926a:	85 e5       	ldi	r24, 0x55	; 85
    926c:	fe 01       	movw	r30, r28
    926e:	ed 5c       	subi	r30, 0xCD	; 205
    9270:	fd 4f       	sbci	r31, 0xFD	; 253
    9272:	80 83       	st	Z, r24
    9274:	8a ea       	ldi	r24, 0xAA	; 170
    9276:	31 96       	adiw	r30, 0x01	; 1
    9278:	80 83       	st	Z, r24
    927a:	82 e5       	ldi	r24, 0x52	; 82
    927c:	8d ab       	std	Y+53, r24	; 0x35
    927e:	8e ab       	std	Y+54, r24	; 0x36
    9280:	81 e6       	ldi	r24, 0x61	; 97
    9282:	8f ab       	std	Y+55, r24	; 0x37
    9284:	91 e4       	ldi	r25, 0x41	; 65
    9286:	98 af       	std	Y+56, r25	; 0x38
    9288:	22 e7       	ldi	r18, 0x72	; 114
    928a:	7b 97       	sbiw	r30, 0x1b	; 27
    928c:	20 83       	st	Z, r18
    928e:	31 96       	adiw	r30, 0x01	; 1
    9290:	20 83       	st	Z, r18
    9292:	31 96       	adiw	r30, 0x01	; 1
    9294:	90 83       	st	Z, r25
    9296:	31 96       	adiw	r30, 0x01	; 1
    9298:	80 83       	st	Z, r24
    929a:	49 89       	ldd	r20, Y+17	; 0x11
    929c:	5a 89       	ldd	r21, Y+18	; 0x12
    929e:	6b 89       	ldd	r22, Y+19	; 0x13
    92a0:	7c 89       	ldd	r23, Y+20	; 0x14
    92a2:	ce 01       	movw	r24, r28
    92a4:	83 5e       	subi	r24, 0xE3	; 227
    92a6:	9d 4f       	sbci	r25, 0xFD	; 253
    92a8:	6d de       	rcall	.-806    	; 0x8f84 <st_dword>
    92aa:	4d 85       	ldd	r20, Y+13	; 0x0d
    92ac:	5e 85       	ldd	r21, Y+14	; 0x0e
    92ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    92b0:	78 89       	ldd	r23, Y+16	; 0x10
    92b2:	ce 01       	movw	r24, r28
    92b4:	8f 5d       	subi	r24, 0xDF	; 223
    92b6:	9d 4f       	sbci	r25, 0xFD	; 253
    92b8:	65 de       	rcall	.-822    	; 0x8f84 <st_dword>
    92ba:	89 a1       	ldd	r24, Y+33	; 0x21
    92bc:	9a a1       	ldd	r25, Y+34	; 0x22
    92be:	ab a1       	ldd	r26, Y+35	; 0x23
    92c0:	bc a1       	ldd	r27, Y+36	; 0x24
    92c2:	9c 01       	movw	r18, r24
    92c4:	ad 01       	movw	r20, r26
    92c6:	2f 5f       	subi	r18, 0xFF	; 255
    92c8:	3f 4f       	sbci	r19, 0xFF	; 255
    92ca:	4f 4f       	sbci	r20, 0xFF	; 255
    92cc:	5f 4f       	sbci	r21, 0xFF	; 255
    92ce:	29 ab       	std	Y+49, r18	; 0x31
    92d0:	3a ab       	std	Y+50, r19	; 0x32
    92d2:	4b ab       	std	Y+51, r20	; 0x33
    92d4:	5c ab       	std	Y+52, r21	; 0x34
    92d6:	01 e0       	ldi	r16, 0x01	; 1
    92d8:	10 e0       	ldi	r17, 0x00	; 0
    92da:	b7 01       	movw	r22, r14
    92dc:	89 81       	ldd	r24, Y+1	; 0x01
    92de:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    92e2:	1c 82       	std	Y+4, r1	; 0x04
    92e4:	40 e0       	ldi	r20, 0x00	; 0
    92e6:	50 e0       	ldi	r21, 0x00	; 0
    92e8:	60 e0       	ldi	r22, 0x00	; 0
    92ea:	89 81       	ldd	r24, Y+1	; 0x01
    92ec:	0e 94 ff 6e 	call	0xddfe	; 0xddfe <disk_ioctl>
    92f0:	31 e0       	ldi	r19, 0x01	; 1
    92f2:	20 e0       	ldi	r18, 0x00	; 0
    92f4:	89 2b       	or	r24, r25
    92f6:	09 f4       	brne	.+2      	; 0x92fa <sync_fs+0xca>
    92f8:	30 e0       	ldi	r19, 0x00	; 0
    92fa:	83 2f       	mov	r24, r19
    92fc:	92 2f       	mov	r25, r18
    92fe:	cd b7       	in	r28, 0x3d	; 61
    9300:	de b7       	in	r29, 0x3e	; 62
    9302:	e6 e0       	ldi	r30, 0x06	; 6
    9304:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00009308 <move_window>:
    9308:	8f 92       	push	r8
    930a:	9f 92       	push	r9
    930c:	af 92       	push	r10
    930e:	bf 92       	push	r11
    9310:	ef 92       	push	r14
    9312:	ff 92       	push	r15
    9314:	0f 93       	push	r16
    9316:	1f 93       	push	r17
    9318:	cf 93       	push	r28
    931a:	df 93       	push	r29
    931c:	ec 01       	movw	r28, r24
    931e:	4a 01       	movw	r8, r20
    9320:	5b 01       	movw	r10, r22
    9322:	89 a9       	ldd	r24, Y+49	; 0x31
    9324:	9a a9       	ldd	r25, Y+50	; 0x32
    9326:	ab a9       	ldd	r26, Y+51	; 0x33
    9328:	bc a9       	ldd	r27, Y+52	; 0x34
    932a:	84 17       	cp	r24, r20
    932c:	95 07       	cpc	r25, r21
    932e:	a6 07       	cpc	r26, r22
    9330:	b7 07       	cpc	r27, r23
    9332:	e9 f0       	breq	.+58     	; 0x936e <move_window+0x66>
    9334:	ce 01       	movw	r24, r28
    9336:	73 df       	rcall	.-282    	; 0x921e <sync_window>
    9338:	7c 01       	movw	r14, r24
    933a:	89 2b       	or	r24, r25
    933c:	d1 f4       	brne	.+52     	; 0x9372 <move_window+0x6a>
    933e:	01 e0       	ldi	r16, 0x01	; 1
    9340:	10 e0       	ldi	r17, 0x00	; 0
    9342:	a5 01       	movw	r20, r10
    9344:	94 01       	movw	r18, r8
    9346:	be 01       	movw	r22, r28
    9348:	6b 5c       	subi	r22, 0xCB	; 203
    934a:	7f 4f       	sbci	r23, 0xFF	; 255
    934c:	89 81       	ldd	r24, Y+1	; 0x01
    934e:	0e 94 df 6e 	call	0xddbe	; 0xddbe <disk_read>
    9352:	89 2b       	or	r24, r25
    9354:	39 f0       	breq	.+14     	; 0x9364 <move_window+0x5c>
    9356:	ee 24       	eor	r14, r14
    9358:	e3 94       	inc	r14
    935a:	f1 2c       	mov	r15, r1
    935c:	88 24       	eor	r8, r8
    935e:	8a 94       	dec	r8
    9360:	98 2c       	mov	r9, r8
    9362:	54 01       	movw	r10, r8
    9364:	89 aa       	std	Y+49, r8	; 0x31
    9366:	9a aa       	std	Y+50, r9	; 0x32
    9368:	ab aa       	std	Y+51, r10	; 0x33
    936a:	bc aa       	std	Y+52, r11	; 0x34
    936c:	02 c0       	rjmp	.+4      	; 0x9372 <move_window+0x6a>
    936e:	e1 2c       	mov	r14, r1
    9370:	f1 2c       	mov	r15, r1
    9372:	c7 01       	movw	r24, r14
    9374:	df 91       	pop	r29
    9376:	cf 91       	pop	r28
    9378:	1f 91       	pop	r17
    937a:	0f 91       	pop	r16
    937c:	ff 90       	pop	r15
    937e:	ef 90       	pop	r14
    9380:	bf 90       	pop	r11
    9382:	af 90       	pop	r10
    9384:	9f 90       	pop	r9
    9386:	8f 90       	pop	r8
    9388:	08 95       	ret

0000938a <check_fs>:
    938a:	cf 93       	push	r28
    938c:	df 93       	push	r29
    938e:	ec 01       	movw	r28, r24
    9390:	1b 82       	std	Y+3, r1	; 0x03
    9392:	8f ef       	ldi	r24, 0xFF	; 255
    9394:	9f ef       	ldi	r25, 0xFF	; 255
    9396:	dc 01       	movw	r26, r24
    9398:	89 ab       	std	Y+49, r24	; 0x31
    939a:	9a ab       	std	Y+50, r25	; 0x32
    939c:	ab ab       	std	Y+51, r26	; 0x33
    939e:	bc ab       	std	Y+52, r27	; 0x34
    93a0:	ce 01       	movw	r24, r28
    93a2:	b2 df       	rcall	.-156    	; 0x9308 <move_window>
    93a4:	89 2b       	or	r24, r25
    93a6:	31 f5       	brne	.+76     	; 0x93f4 <check_fs+0x6a>
    93a8:	fe 01       	movw	r30, r28
    93aa:	ed 5c       	subi	r30, 0xCD	; 205
    93ac:	fd 4f       	sbci	r31, 0xFD	; 253
    93ae:	80 81       	ld	r24, Z
    93b0:	91 81       	ldd	r25, Z+1	; 0x01
    93b2:	85 35       	cpi	r24, 0x55	; 85
    93b4:	9a 4a       	sbci	r25, 0xAA	; 170
    93b6:	01 f5       	brne	.+64     	; 0x93f8 <check_fs+0x6e>
    93b8:	8d a9       	ldd	r24, Y+53	; 0x35
    93ba:	89 3e       	cpi	r24, 0xE9	; 233
    93bc:	29 f0       	breq	.+10     	; 0x93c8 <check_fs+0x3e>
    93be:	8b 3e       	cpi	r24, 0xEB	; 235
    93c0:	f9 f4       	brne	.+62     	; 0x9400 <check_fs+0x76>
    93c2:	8f a9       	ldd	r24, Y+55	; 0x37
    93c4:	80 39       	cpi	r24, 0x90	; 144
    93c6:	e1 f4       	brne	.+56     	; 0x9400 <check_fs+0x76>
    93c8:	ce 01       	movw	r24, r28
    93ca:	85 59       	subi	r24, 0x95	; 149
    93cc:	9f 4f       	sbci	r25, 0xFF	; 255
    93ce:	c5 dd       	rcall	.-1142   	; 0x8f5a <ld_dword>
    93d0:	dc 01       	movw	r26, r24
    93d2:	cb 01       	movw	r24, r22
    93d4:	bb 27       	eor	r27, r27
    93d6:	86 34       	cpi	r24, 0x46	; 70
    93d8:	91 44       	sbci	r25, 0x41	; 65
    93da:	a4 45       	sbci	r26, 0x54	; 84
    93dc:	b1 05       	cpc	r27, r1
    93de:	71 f0       	breq	.+28     	; 0x93fc <check_fs+0x72>
    93e0:	ce 01       	movw	r24, r28
    93e2:	89 57       	subi	r24, 0x79	; 121
    93e4:	9f 4f       	sbci	r25, 0xFF	; 255
    93e6:	b9 dd       	rcall	.-1166   	; 0x8f5a <ld_dword>
    93e8:	66 34       	cpi	r22, 0x46	; 70
    93ea:	71 44       	sbci	r23, 0x41	; 65
    93ec:	84 45       	sbci	r24, 0x54	; 84
    93ee:	93 43       	sbci	r25, 0x33	; 51
    93f0:	39 f4       	brne	.+14     	; 0x9400 <check_fs+0x76>
    93f2:	04 c0       	rjmp	.+8      	; 0x93fc <check_fs+0x72>
    93f4:	84 e0       	ldi	r24, 0x04	; 4
    93f6:	05 c0       	rjmp	.+10     	; 0x9402 <check_fs+0x78>
    93f8:	83 e0       	ldi	r24, 0x03	; 3
    93fa:	03 c0       	rjmp	.+6      	; 0x9402 <check_fs+0x78>
    93fc:	80 e0       	ldi	r24, 0x00	; 0
    93fe:	01 c0       	rjmp	.+2      	; 0x9402 <check_fs+0x78>
    9400:	82 e0       	ldi	r24, 0x02	; 2
    9402:	df 91       	pop	r29
    9404:	cf 91       	pop	r28
    9406:	08 95       	ret

00009408 <find_volume>:
    9408:	ad e1       	ldi	r26, 0x1D	; 29
    940a:	b0 e0       	ldi	r27, 0x00	; 0
    940c:	ea e0       	ldi	r30, 0x0A	; 10
    940e:	fa e4       	ldi	r31, 0x4A	; 74
    9410:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    9414:	5b 01       	movw	r10, r22
    9416:	f4 2e       	mov	r15, r20
    9418:	db 01       	movw	r26, r22
    941a:	1d 92       	st	X+, r1
    941c:	1c 92       	st	X, r1
    941e:	34 de       	rcall	.-920    	; 0x9088 <get_ldnumber>
    9420:	6c 01       	movw	r12, r24
    9422:	97 fd       	sbrc	r25, 7
    9424:	1b c2       	rjmp	.+1078   	; 0x985c <find_volume+0x454>
    9426:	fc 01       	movw	r30, r24
    9428:	ee 0f       	add	r30, r30
    942a:	ff 1f       	adc	r31, r31
    942c:	ee 5a       	subi	r30, 0xAE	; 174
    942e:	f7 4e       	sbci	r31, 0xE7	; 231
    9430:	00 81       	ld	r16, Z
    9432:	11 81       	ldd	r17, Z+1	; 0x01
    9434:	01 15       	cp	r16, r1
    9436:	11 05       	cpc	r17, r1
    9438:	09 f4       	brne	.+2      	; 0x943c <find_volume+0x34>
    943a:	13 c2       	rjmp	.+1062   	; 0x9862 <find_volume+0x45a>
    943c:	f5 01       	movw	r30, r10
    943e:	11 83       	std	Z+1, r17	; 0x01
    9440:	00 83       	st	Z, r16
    9442:	ff 2d       	mov	r31, r15
    9444:	fe 7f       	andi	r31, 0xFE	; 254
    9446:	ff 2e       	mov	r15, r31
    9448:	d8 01       	movw	r26, r16
    944a:	8c 91       	ld	r24, X
    944c:	88 23       	and	r24, r24
    944e:	71 f0       	breq	.+28     	; 0x946c <find_volume+0x64>
    9450:	11 96       	adiw	r26, 0x01	; 1
    9452:	8c 91       	ld	r24, X
    9454:	0e 94 d3 6e 	call	0xdda6	; 0xdda6 <disk_status>
    9458:	80 fd       	sbrc	r24, 0
    945a:	08 c0       	rjmp	.+16     	; 0x946c <find_volume+0x64>
    945c:	ff 20       	and	r15, r15
    945e:	09 f4       	brne	.+2      	; 0x9462 <find_volume+0x5a>
    9460:	03 c2       	rjmp	.+1030   	; 0x9868 <find_volume+0x460>
    9462:	82 ff       	sbrs	r24, 2
    9464:	01 c2       	rjmp	.+1026   	; 0x9868 <find_volume+0x460>
    9466:	8a e0       	ldi	r24, 0x0A	; 10
    9468:	90 e0       	ldi	r25, 0x00	; 0
    946a:	73 c2       	rjmp	.+1254   	; 0x9952 <find_volume+0x54a>
    946c:	f8 01       	movw	r30, r16
    946e:	10 82       	st	Z, r1
    9470:	c1 82       	std	Z+1, r12	; 0x01
    9472:	8c 2d       	mov	r24, r12
    9474:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <disk_initialize>
    9478:	80 fd       	sbrc	r24, 0
    947a:	f9 c1       	rjmp	.+1010   	; 0x986e <find_volume+0x466>
    947c:	ff 20       	and	r15, r15
    947e:	11 f0       	breq	.+4      	; 0x9484 <find_volume+0x7c>
    9480:	82 fd       	sbrc	r24, 2
    9482:	f1 cf       	rjmp	.-30     	; 0x9466 <find_volume+0x5e>
    9484:	40 e0       	ldi	r20, 0x00	; 0
    9486:	50 e0       	ldi	r21, 0x00	; 0
    9488:	ba 01       	movw	r22, r20
    948a:	c8 01       	movw	r24, r16
    948c:	7e df       	rcall	.-260    	; 0x938a <check_fs>
    948e:	82 30       	cpi	r24, 0x02	; 2
    9490:	09 f0       	breq	.+2      	; 0x9494 <find_volume+0x8c>
    9492:	41 c0       	rjmp	.+130    	; 0x9516 <find_volume+0x10e>
    9494:	9e 01       	movw	r18, r28
    9496:	2f 5f       	subi	r18, 0xFF	; 255
    9498:	3f 4f       	sbci	r19, 0xFF	; 255
    949a:	79 01       	movw	r14, r18
    949c:	68 01       	movw	r12, r16
    949e:	35 e0       	ldi	r19, 0x05	; 5
    94a0:	c3 1a       	sub	r12, r19
    94a2:	3e ef       	ldi	r19, 0xFE	; 254
    94a4:	d3 0a       	sbc	r13, r19
    94a6:	48 01       	movw	r8, r16
    94a8:	45 ec       	ldi	r20, 0xC5	; 197
    94aa:	84 1a       	sub	r8, r20
    94ac:	4d ef       	ldi	r20, 0xFD	; 253
    94ae:	94 0a       	sbc	r9, r20
    94b0:	57 01       	movw	r10, r14
    94b2:	f6 01       	movw	r30, r12
    94b4:	34 97       	sbiw	r30, 0x04	; 4
    94b6:	80 81       	ld	r24, Z
    94b8:	88 23       	and	r24, r24
    94ba:	19 f0       	breq	.+6      	; 0x94c2 <find_volume+0xba>
    94bc:	c6 01       	movw	r24, r12
    94be:	4d dd       	rcall	.-1382   	; 0x8f5a <ld_dword>
    94c0:	03 c0       	rjmp	.+6      	; 0x94c8 <find_volume+0xc0>
    94c2:	60 e0       	ldi	r22, 0x00	; 0
    94c4:	70 e0       	ldi	r23, 0x00	; 0
    94c6:	cb 01       	movw	r24, r22
    94c8:	d5 01       	movw	r26, r10
    94ca:	6d 93       	st	X+, r22
    94cc:	7d 93       	st	X+, r23
    94ce:	8d 93       	st	X+, r24
    94d0:	9d 93       	st	X+, r25
    94d2:	5d 01       	movw	r10, r26
    94d4:	b0 e1       	ldi	r27, 0x10	; 16
    94d6:	cb 0e       	add	r12, r27
    94d8:	d1 1c       	adc	r13, r1
    94da:	c8 14       	cp	r12, r8
    94dc:	d9 04       	cpc	r13, r9
    94de:	49 f7       	brne	.-46     	; 0x94b2 <find_volume+0xaa>
    94e0:	6e 01       	movw	r12, r28
    94e2:	e1 e1       	ldi	r30, 0x11	; 17
    94e4:	ce 0e       	add	r12, r30
    94e6:	d1 1c       	adc	r13, r1
    94e8:	d7 01       	movw	r26, r14
    94ea:	8d 90       	ld	r8, X+
    94ec:	9d 90       	ld	r9, X+
    94ee:	ad 90       	ld	r10, X+
    94f0:	bd 90       	ld	r11, X+
    94f2:	7d 01       	movw	r14, r26
    94f4:	81 14       	cp	r8, r1
    94f6:	91 04       	cpc	r9, r1
    94f8:	a1 04       	cpc	r10, r1
    94fa:	b1 04       	cpc	r11, r1
    94fc:	39 f0       	breq	.+14     	; 0x950c <find_volume+0x104>
    94fe:	b5 01       	movw	r22, r10
    9500:	a4 01       	movw	r20, r8
    9502:	c8 01       	movw	r24, r16
    9504:	42 df       	rcall	.-380    	; 0x938a <check_fs>
    9506:	82 30       	cpi	r24, 0x02	; 2
    9508:	10 f4       	brcc	.+4      	; 0x950e <find_volume+0x106>
    950a:	10 c0       	rjmp	.+32     	; 0x952c <find_volume+0x124>
    950c:	83 e0       	ldi	r24, 0x03	; 3
    950e:	ce 14       	cp	r12, r14
    9510:	df 04       	cpc	r13, r15
    9512:	51 f7       	brne	.-44     	; 0x94e8 <find_volume+0xe0>
    9514:	af c1       	rjmp	.+862    	; 0x9874 <find_volume+0x46c>
    9516:	84 30       	cpi	r24, 0x04	; 4
    9518:	09 f4       	brne	.+2      	; 0x951c <find_volume+0x114>
    951a:	af c1       	rjmp	.+862    	; 0x987a <find_volume+0x472>
    951c:	82 30       	cpi	r24, 0x02	; 2
    951e:	18 f0       	brcs	.+6      	; 0x9526 <find_volume+0x11e>
    9520:	8d e0       	ldi	r24, 0x0D	; 13
    9522:	90 e0       	ldi	r25, 0x00	; 0
    9524:	16 c2       	rjmp	.+1068   	; 0x9952 <find_volume+0x54a>
    9526:	81 2c       	mov	r8, r1
    9528:	91 2c       	mov	r9, r1
    952a:	54 01       	movw	r10, r8
    952c:	f8 01       	movw	r30, r16
    952e:	e0 5c       	subi	r30, 0xC0	; 192
    9530:	ff 4f       	sbci	r31, 0xFF	; 255
    9532:	80 81       	ld	r24, Z
    9534:	91 81       	ldd	r25, Z+1	; 0x01
    9536:	81 15       	cp	r24, r1
    9538:	92 40       	sbci	r25, 0x02	; 2
    953a:	91 f7       	brne	.-28     	; 0x9520 <find_volume+0x118>
    953c:	3b 96       	adiw	r30, 0x0b	; 11
    953e:	80 81       	ld	r24, Z
    9540:	91 81       	ldd	r25, Z+1	; 0x01
    9542:	00 97       	sbiw	r24, 0x00	; 0
    9544:	41 f0       	breq	.+16     	; 0x9556 <find_volume+0x14e>
    9546:	9c 01       	movw	r18, r24
    9548:	40 e0       	ldi	r20, 0x00	; 0
    954a:	50 e0       	ldi	r21, 0x00	; 0
    954c:	2d 8b       	std	Y+21, r18	; 0x15
    954e:	3e 8b       	std	Y+22, r19	; 0x16
    9550:	4f 8b       	std	Y+23, r20	; 0x17
    9552:	58 8f       	std	Y+24, r21	; 0x18
    9554:	08 c0       	rjmp	.+16     	; 0x9566 <find_volume+0x15e>
    9556:	c8 01       	movw	r24, r16
    9558:	87 5a       	subi	r24, 0xA7	; 167
    955a:	9f 4f       	sbci	r25, 0xFF	; 255
    955c:	fe dc       	rcall	.-1540   	; 0x8f5a <ld_dword>
    955e:	6d 8b       	std	Y+21, r22	; 0x15
    9560:	7e 8b       	std	Y+22, r23	; 0x16
    9562:	8f 8b       	std	Y+23, r24	; 0x17
    9564:	98 8f       	std	Y+24, r25	; 0x18
    9566:	8d 89       	ldd	r24, Y+21	; 0x15
    9568:	9e 89       	ldd	r25, Y+22	; 0x16
    956a:	af 89       	ldd	r26, Y+23	; 0x17
    956c:	b8 8d       	ldd	r27, Y+24	; 0x18
    956e:	f8 01       	movw	r30, r16
    9570:	85 8f       	std	Z+29, r24	; 0x1d
    9572:	96 8f       	std	Z+30, r25	; 0x1e
    9574:	a7 8f       	std	Z+31, r26	; 0x1f
    9576:	b0 a3       	std	Z+32, r27	; 0x20
    9578:	eb 5b       	subi	r30, 0xBB	; 187
    957a:	ff 4f       	sbci	r31, 0xFF	; 255
    957c:	70 80       	ld	r7, Z
    957e:	d8 01       	movw	r26, r16
    9580:	12 96       	adiw	r26, 0x02	; 2
    9582:	7c 92       	st	X, r7
    9584:	8f ef       	ldi	r24, 0xFF	; 255
    9586:	87 0d       	add	r24, r7
    9588:	82 30       	cpi	r24, 0x02	; 2
    958a:	50 f6       	brcc	.-108    	; 0x9520 <find_volume+0x118>
    958c:	33 97       	sbiw	r30, 0x03	; 3
    958e:	b0 81       	ld	r27, Z
    9590:	b9 8f       	std	Y+25, r27	; 0x19
    9592:	8b 2f       	mov	r24, r27
    9594:	90 e0       	ldi	r25, 0x00	; 0
    9596:	f8 01       	movw	r30, r16
    9598:	92 87       	std	Z+10, r25	; 0x0a
    959a:	81 87       	std	Z+9, r24	; 0x09
    959c:	00 97       	sbiw	r24, 0x00	; 0
    959e:	09 f4       	brne	.+2      	; 0x95a2 <find_volume+0x19a>
    95a0:	bf cf       	rjmp	.-130    	; 0x9520 <find_volume+0x118>
    95a2:	9c 01       	movw	r18, r24
    95a4:	21 50       	subi	r18, 0x01	; 1
    95a6:	31 09       	sbc	r19, r1
    95a8:	82 23       	and	r24, r18
    95aa:	93 23       	and	r25, r19
    95ac:	89 2b       	or	r24, r25
    95ae:	09 f0       	breq	.+2      	; 0x95b2 <find_volume+0x1aa>
    95b0:	b7 cf       	rjmp	.-146    	; 0x9520 <find_volume+0x118>
    95b2:	ea 5b       	subi	r30, 0xBA	; 186
    95b4:	ff 4f       	sbci	r31, 0xFF	; 255
    95b6:	20 80       	ld	r2, Z
    95b8:	31 80       	ldd	r3, Z+1	; 0x01
    95ba:	d8 01       	movw	r26, r16
    95bc:	18 96       	adiw	r26, 0x08	; 8
    95be:	3c 92       	st	X, r3
    95c0:	2e 92       	st	-X, r2
    95c2:	17 97       	sbiw	r26, 0x07	; 7
    95c4:	c1 01       	movw	r24, r2
    95c6:	8f 70       	andi	r24, 0x0F	; 15
    95c8:	99 27       	eor	r25, r25
    95ca:	89 2b       	or	r24, r25
    95cc:	09 f0       	breq	.+2      	; 0x95d0 <find_volume+0x1c8>
    95ce:	a8 cf       	rjmp	.-176    	; 0x9520 <find_volume+0x118>
    95d0:	32 96       	adiw	r30, 0x02	; 2
    95d2:	80 81       	ld	r24, Z
    95d4:	91 81       	ldd	r25, Z+1	; 0x01
    95d6:	6c 01       	movw	r12, r24
    95d8:	e1 2c       	mov	r14, r1
    95da:	f1 2c       	mov	r15, r1
    95dc:	89 2b       	or	r24, r25
    95de:	31 f4       	brne	.+12     	; 0x95ec <find_volume+0x1e4>
    95e0:	c8 01       	movw	r24, r16
    95e2:	8b 5a       	subi	r24, 0xAB	; 171
    95e4:	9f 4f       	sbci	r25, 0xFF	; 255
    95e6:	b9 dc       	rcall	.-1678   	; 0x8f5a <ld_dword>
    95e8:	6b 01       	movw	r12, r22
    95ea:	7c 01       	movw	r14, r24
    95ec:	f8 01       	movw	r30, r16
    95ee:	ed 5b       	subi	r30, 0xBD	; 189
    95f0:	ff 4f       	sbci	r31, 0xFF	; 255
    95f2:	01 90       	ld	r0, Z+
    95f4:	f0 81       	ld	r31, Z
    95f6:	e0 2d       	mov	r30, r0
    95f8:	30 97       	sbiw	r30, 0x00	; 0
    95fa:	09 f4       	brne	.+2      	; 0x95fe <find_volume+0x1f6>
    95fc:	91 cf       	rjmp	.-222    	; 0x9520 <find_volume+0x118>
    95fe:	a7 2d       	mov	r26, r7
    9600:	b0 e0       	ldi	r27, 0x00	; 0
    9602:	2d 89       	ldd	r18, Y+21	; 0x15
    9604:	3e 89       	ldd	r19, Y+22	; 0x16
    9606:	4f 89       	ldd	r20, Y+23	; 0x17
    9608:	58 8d       	ldd	r21, Y+24	; 0x18
    960a:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    960e:	2b 01       	movw	r4, r22
    9610:	3c 01       	movw	r6, r24
    9612:	9f 01       	movw	r18, r30
    9614:	40 e0       	ldi	r20, 0x00	; 0
    9616:	50 e0       	ldi	r21, 0x00	; 0
    9618:	2a 8f       	std	Y+26, r18	; 0x1a
    961a:	3b 8f       	std	Y+27, r19	; 0x1b
    961c:	4c 8f       	std	Y+28, r20	; 0x1c
    961e:	5d 8f       	std	Y+29, r21	; 0x1d
    9620:	c1 01       	movw	r24, r2
    9622:	e4 e0       	ldi	r30, 0x04	; 4
    9624:	96 95       	lsr	r25
    9626:	87 95       	ror	r24
    9628:	ea 95       	dec	r30
    962a:	e1 f7       	brne	.-8      	; 0x9624 <find_volume+0x21c>
    962c:	ba 01       	movw	r22, r20
    962e:	a9 01       	movw	r20, r18
    9630:	48 0f       	add	r20, r24
    9632:	59 1f       	adc	r21, r25
    9634:	61 1d       	adc	r22, r1
    9636:	71 1d       	adc	r23, r1
    9638:	db 01       	movw	r26, r22
    963a:	ca 01       	movw	r24, r20
    963c:	84 0d       	add	r24, r4
    963e:	95 1d       	adc	r25, r5
    9640:	a6 1d       	adc	r26, r6
    9642:	b7 1d       	adc	r27, r7
    9644:	89 8b       	std	Y+17, r24	; 0x11
    9646:	9a 8b       	std	Y+18, r25	; 0x12
    9648:	ab 8b       	std	Y+19, r26	; 0x13
    964a:	bc 8b       	std	Y+20, r27	; 0x14
    964c:	c8 16       	cp	r12, r24
    964e:	d9 06       	cpc	r13, r25
    9650:	ea 06       	cpc	r14, r26
    9652:	fb 06       	cpc	r15, r27
    9654:	08 f4       	brcc	.+2      	; 0x9658 <find_volume+0x250>
    9656:	64 cf       	rjmp	.-312    	; 0x9520 <find_volume+0x118>
    9658:	c7 01       	movw	r24, r14
    965a:	b6 01       	movw	r22, r12
    965c:	29 89       	ldd	r18, Y+17	; 0x11
    965e:	3a 89       	ldd	r19, Y+18	; 0x12
    9660:	4b 89       	ldd	r20, Y+19	; 0x13
    9662:	5c 89       	ldd	r21, Y+20	; 0x14
    9664:	62 1b       	sub	r22, r18
    9666:	73 0b       	sbc	r23, r19
    9668:	84 0b       	sbc	r24, r20
    966a:	95 0b       	sbc	r25, r21
    966c:	a9 8d       	ldd	r26, Y+25	; 0x19
    966e:	2a 2f       	mov	r18, r26
    9670:	30 e0       	ldi	r19, 0x00	; 0
    9672:	40 e0       	ldi	r20, 0x00	; 0
    9674:	50 e0       	ldi	r21, 0x00	; 0
    9676:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    967a:	21 15       	cp	r18, r1
    967c:	31 05       	cpc	r19, r1
    967e:	41 05       	cpc	r20, r1
    9680:	51 05       	cpc	r21, r1
    9682:	09 f4       	brne	.+2      	; 0x9686 <find_volume+0x27e>
    9684:	4d cf       	rjmp	.-358    	; 0x9520 <find_volume+0x118>
    9686:	69 01       	movw	r12, r18
    9688:	7a 01       	movw	r14, r20
    968a:	b2 e0       	ldi	r27, 0x02	; 2
    968c:	cb 0e       	add	r12, r27
    968e:	d1 1c       	adc	r13, r1
    9690:	e1 1c       	adc	r14, r1
    9692:	f1 1c       	adc	r15, r1
    9694:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9696:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9698:	ac 8d       	ldd	r26, Y+28	; 0x1c
    969a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    969c:	88 0d       	add	r24, r8
    969e:	99 1d       	adc	r25, r9
    96a0:	aa 1d       	adc	r26, r10
    96a2:	bb 1d       	adc	r27, r11
    96a4:	8a 8f       	std	Y+26, r24	; 0x1a
    96a6:	9b 8f       	std	Y+27, r25	; 0x1b
    96a8:	ac 8f       	std	Y+28, r26	; 0x1c
    96aa:	bd 8f       	std	Y+29, r27	; 0x1d
    96ac:	89 89       	ldd	r24, Y+17	; 0x11
    96ae:	9a 89       	ldd	r25, Y+18	; 0x12
    96b0:	ab 89       	ldd	r26, Y+19	; 0x13
    96b2:	bc 89       	ldd	r27, Y+20	; 0x14
    96b4:	88 0d       	add	r24, r8
    96b6:	99 1d       	adc	r25, r9
    96b8:	aa 1d       	adc	r26, r10
    96ba:	bb 1d       	adc	r27, r11
    96bc:	89 8b       	std	Y+17, r24	; 0x11
    96be:	9a 8b       	std	Y+18, r25	; 0x12
    96c0:	ab 8b       	std	Y+19, r26	; 0x13
    96c2:	bc 8b       	std	Y+20, r27	; 0x14
    96c4:	26 3f       	cpi	r18, 0xF6	; 246
    96c6:	9f ef       	ldi	r25, 0xFF	; 255
    96c8:	39 07       	cpc	r19, r25
    96ca:	41 05       	cpc	r20, r1
    96cc:	51 05       	cpc	r21, r1
    96ce:	08 f0       	brcs	.+2      	; 0x96d2 <find_volume+0x2ca>
    96d0:	d7 c0       	rjmp	.+430    	; 0x9880 <find_volume+0x478>
    96d2:	f8 01       	movw	r30, r16
    96d4:	c1 8e       	std	Z+25, r12	; 0x19
    96d6:	d2 8e       	std	Z+26, r13	; 0x1a
    96d8:	e3 8e       	std	Z+27, r14	; 0x1b
    96da:	f4 8e       	std	Z+28, r15	; 0x1c
    96dc:	26 3f       	cpi	r18, 0xF6	; 246
    96de:	3f 40       	sbci	r19, 0x0F	; 15
    96e0:	41 05       	cpc	r20, r1
    96e2:	51 05       	cpc	r21, r1
    96e4:	08 f0       	brcs	.+2      	; 0x96e8 <find_volume+0x2e0>
    96e6:	0a c1       	rjmp	.+532    	; 0x98fc <find_volume+0x4f4>
    96e8:	81 a2       	std	Z+33, r8	; 0x21
    96ea:	92 a2       	std	Z+34, r9	; 0x22
    96ec:	a3 a2       	std	Z+35, r10	; 0x23
    96ee:	b4 a2       	std	Z+36, r11	; 0x24
    96f0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    96f2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    96f4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    96f6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    96f8:	25 a3       	std	Z+37, r18	; 0x25
    96fa:	36 a3       	std	Z+38, r19	; 0x26
    96fc:	47 a3       	std	Z+39, r20	; 0x27
    96fe:	50 a7       	std	Z+40, r21	; 0x28
    9700:	29 89       	ldd	r18, Y+17	; 0x11
    9702:	3a 89       	ldd	r19, Y+18	; 0x12
    9704:	4b 89       	ldd	r20, Y+19	; 0x13
    9706:	5c 89       	ldd	r21, Y+20	; 0x14
    9708:	25 a7       	std	Z+45, r18	; 0x2d
    970a:	36 a7       	std	Z+46, r19	; 0x2e
    970c:	47 a7       	std	Z+47, r20	; 0x2f
    970e:	50 ab       	std	Z+48, r21	; 0x30
    9710:	21 14       	cp	r2, r1
    9712:	31 04       	cpc	r3, r1
    9714:	09 f4       	brne	.+2      	; 0x9718 <find_volume+0x310>
    9716:	04 cf       	rjmp	.-504    	; 0x9520 <find_volume+0x118>
    9718:	2a 8d       	ldd	r18, Y+26	; 0x1a
    971a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    971c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    971e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9720:	42 0e       	add	r4, r18
    9722:	53 1e       	adc	r5, r19
    9724:	64 1e       	adc	r6, r20
    9726:	75 1e       	adc	r7, r21
    9728:	41 a6       	std	Z+41, r4	; 0x29
    972a:	52 a6       	std	Z+42, r5	; 0x2a
    972c:	63 a6       	std	Z+43, r6	; 0x2b
    972e:	74 a6       	std	Z+44, r7	; 0x2c
    9730:	a3 e0       	ldi	r26, 0x03	; 3
    9732:	b0 e0       	ldi	r27, 0x00	; 0
    9734:	a7 01       	movw	r20, r14
    9736:	96 01       	movw	r18, r12
    9738:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    973c:	dc 01       	movw	r26, r24
    973e:	cb 01       	movw	r24, r22
    9740:	b6 95       	lsr	r27
    9742:	a7 95       	ror	r26
    9744:	97 95       	ror	r25
    9746:	87 95       	ror	r24
    9748:	e1 e0       	ldi	r30, 0x01	; 1
    974a:	ce 22       	and	r12, r30
    974c:	dd 24       	eor	r13, r13
    974e:	ee 24       	eor	r14, r14
    9750:	ff 24       	eor	r15, r15
    9752:	c8 0e       	add	r12, r24
    9754:	d9 1e       	adc	r13, r25
    9756:	ea 1e       	adc	r14, r26
    9758:	fb 1e       	adc	r15, r27
    975a:	77 24       	eor	r7, r7
    975c:	73 94       	inc	r7
    975e:	ff ef       	ldi	r31, 0xFF	; 255
    9760:	cf 0e       	add	r12, r31
    9762:	f1 e0       	ldi	r31, 0x01	; 1
    9764:	df 1e       	adc	r13, r31
    9766:	e1 1c       	adc	r14, r1
    9768:	f1 1c       	adc	r15, r1
    976a:	59 e0       	ldi	r21, 0x09	; 9
    976c:	f6 94       	lsr	r15
    976e:	e7 94       	ror	r14
    9770:	d7 94       	ror	r13
    9772:	c7 94       	ror	r12
    9774:	5a 95       	dec	r21
    9776:	d1 f7       	brne	.-12     	; 0x976c <find_volume+0x364>
    9778:	2d 89       	ldd	r18, Y+21	; 0x15
    977a:	3e 89       	ldd	r19, Y+22	; 0x16
    977c:	4f 89       	ldd	r20, Y+23	; 0x17
    977e:	58 8d       	ldd	r21, Y+24	; 0x18
    9780:	2c 15       	cp	r18, r12
    9782:	3d 05       	cpc	r19, r13
    9784:	4e 05       	cpc	r20, r14
    9786:	5f 05       	cpc	r21, r15
    9788:	08 f4       	brcc	.+2      	; 0x978c <find_volume+0x384>
    978a:	ca ce       	rjmp	.-620    	; 0x9520 <find_volume+0x118>
    978c:	8f ef       	ldi	r24, 0xFF	; 255
    978e:	9f ef       	ldi	r25, 0xFF	; 255
    9790:	dc 01       	movw	r26, r24
    9792:	f8 01       	movw	r30, r16
    9794:	81 8b       	std	Z+17, r24	; 0x11
    9796:	92 8b       	std	Z+18, r25	; 0x12
    9798:	a3 8b       	std	Z+19, r26	; 0x13
    979a:	b4 8b       	std	Z+20, r27	; 0x14
    979c:	85 87       	std	Z+13, r24	; 0x0d
    979e:	96 87       	std	Z+14, r25	; 0x0e
    97a0:	a7 87       	std	Z+15, r26	; 0x0f
    97a2:	b0 8b       	std	Z+16, r27	; 0x10
    97a4:	80 e8       	ldi	r24, 0x80	; 128
    97a6:	84 83       	std	Z+4, r24	; 0x04
    97a8:	f3 e0       	ldi	r31, 0x03	; 3
    97aa:	7f 12       	cpse	r7, r31
    97ac:	42 c0       	rjmp	.+132    	; 0x9832 <find_volume+0x42a>
    97ae:	f8 01       	movw	r30, r16
    97b0:	eb 59       	subi	r30, 0x9B	; 155
    97b2:	ff 4f       	sbci	r31, 0xFF	; 255
    97b4:	80 81       	ld	r24, Z
    97b6:	91 81       	ldd	r25, Z+1	; 0x01
    97b8:	01 97       	sbiw	r24, 0x01	; 1
    97ba:	09 f0       	breq	.+2      	; 0x97be <find_volume+0x3b6>
    97bc:	3a c0       	rjmp	.+116    	; 0x9832 <find_volume+0x42a>
    97be:	b5 01       	movw	r22, r10
    97c0:	a4 01       	movw	r20, r8
    97c2:	4f 5f       	subi	r20, 0xFF	; 255
    97c4:	5f 4f       	sbci	r21, 0xFF	; 255
    97c6:	6f 4f       	sbci	r22, 0xFF	; 255
    97c8:	7f 4f       	sbci	r23, 0xFF	; 255
    97ca:	c8 01       	movw	r24, r16
    97cc:	9d dd       	rcall	.-1222   	; 0x9308 <move_window>
    97ce:	89 2b       	or	r24, r25
    97d0:	81 f5       	brne	.+96     	; 0x9832 <find_volume+0x42a>
    97d2:	d8 01       	movw	r26, r16
    97d4:	14 96       	adiw	r26, 0x04	; 4
    97d6:	1c 92       	st	X, r1
    97d8:	f8 01       	movw	r30, r16
    97da:	ed 5c       	subi	r30, 0xCD	; 205
    97dc:	fd 4f       	sbci	r31, 0xFD	; 253
    97de:	80 81       	ld	r24, Z
    97e0:	91 81       	ldd	r25, Z+1	; 0x01
    97e2:	85 35       	cpi	r24, 0x55	; 85
    97e4:	9a 4a       	sbci	r25, 0xAA	; 170
    97e6:	29 f5       	brne	.+74     	; 0x9832 <find_volume+0x42a>
    97e8:	c8 01       	movw	r24, r16
    97ea:	c5 96       	adiw	r24, 0x35	; 53
    97ec:	b6 db       	rcall	.-2196   	; 0x8f5a <ld_dword>
    97ee:	62 35       	cpi	r22, 0x52	; 82
    97f0:	72 45       	sbci	r23, 0x52	; 82
    97f2:	81 46       	sbci	r24, 0x61	; 97
    97f4:	91 44       	sbci	r25, 0x41	; 65
    97f6:	e9 f4       	brne	.+58     	; 0x9832 <find_volume+0x42a>
    97f8:	c8 01       	movw	r24, r16
    97fa:	87 5e       	subi	r24, 0xE7	; 231
    97fc:	9d 4f       	sbci	r25, 0xFD	; 253
    97fe:	ad db       	rcall	.-2214   	; 0x8f5a <ld_dword>
    9800:	62 37       	cpi	r22, 0x72	; 114
    9802:	72 47       	sbci	r23, 0x72	; 114
    9804:	81 44       	sbci	r24, 0x41	; 65
    9806:	91 46       	sbci	r25, 0x61	; 97
    9808:	a1 f4       	brne	.+40     	; 0x9832 <find_volume+0x42a>
    980a:	c8 01       	movw	r24, r16
    980c:	83 5e       	subi	r24, 0xE3	; 227
    980e:	9d 4f       	sbci	r25, 0xFD	; 253
    9810:	a4 db       	rcall	.-2232   	; 0x8f5a <ld_dword>
    9812:	d8 01       	movw	r26, r16
    9814:	51 96       	adiw	r26, 0x11	; 17
    9816:	6d 93       	st	X+, r22
    9818:	7d 93       	st	X+, r23
    981a:	8d 93       	st	X+, r24
    981c:	9c 93       	st	X, r25
    981e:	54 97       	sbiw	r26, 0x14	; 20
    9820:	c8 01       	movw	r24, r16
    9822:	8f 5d       	subi	r24, 0xDF	; 223
    9824:	9d 4f       	sbci	r25, 0xFD	; 253
    9826:	99 db       	rcall	.-2254   	; 0x8f5a <ld_dword>
    9828:	f8 01       	movw	r30, r16
    982a:	65 87       	std	Z+13, r22	; 0x0d
    982c:	76 87       	std	Z+14, r23	; 0x0e
    982e:	87 87       	std	Z+15, r24	; 0x0f
    9830:	90 8b       	std	Z+16, r25	; 0x10
    9832:	d8 01       	movw	r26, r16
    9834:	7c 92       	st	X, r7
    9836:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <Fsid>
    983a:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <Fsid+0x1>
    983e:	01 96       	adiw	r24, 0x01	; 1
    9840:	90 93 51 18 	sts	0x1851, r25	; 0x801851 <Fsid+0x1>
    9844:	80 93 50 18 	sts	0x1850, r24	; 0x801850 <Fsid>
    9848:	16 96       	adiw	r26, 0x06	; 6
    984a:	9c 93       	st	X, r25
    984c:	8e 93       	st	-X, r24
    984e:	15 97       	sbiw	r26, 0x05	; 5
    9850:	f8 01       	movw	r30, r16
    9852:	15 8a       	std	Z+21, r1	; 0x15
    9854:	16 8a       	std	Z+22, r1	; 0x16
    9856:	17 8a       	std	Z+23, r1	; 0x17
    9858:	10 8e       	std	Z+24, r1	; 0x18
    985a:	06 c0       	rjmp	.+12     	; 0x9868 <find_volume+0x460>
    985c:	8b e0       	ldi	r24, 0x0B	; 11
    985e:	90 e0       	ldi	r25, 0x00	; 0
    9860:	78 c0       	rjmp	.+240    	; 0x9952 <find_volume+0x54a>
    9862:	8c e0       	ldi	r24, 0x0C	; 12
    9864:	90 e0       	ldi	r25, 0x00	; 0
    9866:	75 c0       	rjmp	.+234    	; 0x9952 <find_volume+0x54a>
    9868:	80 e0       	ldi	r24, 0x00	; 0
    986a:	90 e0       	ldi	r25, 0x00	; 0
    986c:	72 c0       	rjmp	.+228    	; 0x9952 <find_volume+0x54a>
    986e:	83 e0       	ldi	r24, 0x03	; 3
    9870:	90 e0       	ldi	r25, 0x00	; 0
    9872:	6f c0       	rjmp	.+222    	; 0x9952 <find_volume+0x54a>
    9874:	84 30       	cpi	r24, 0x04	; 4
    9876:	09 f0       	breq	.+2      	; 0x987a <find_volume+0x472>
    9878:	53 ce       	rjmp	.-858    	; 0x9520 <find_volume+0x118>
    987a:	81 e0       	ldi	r24, 0x01	; 1
    987c:	90 e0       	ldi	r25, 0x00	; 0
    987e:	69 c0       	rjmp	.+210    	; 0x9952 <find_volume+0x54a>
    9880:	d8 01       	movw	r26, r16
    9882:	59 96       	adiw	r26, 0x19	; 25
    9884:	cd 92       	st	X+, r12
    9886:	dd 92       	st	X+, r13
    9888:	ed 92       	st	X+, r14
    988a:	fc 92       	st	X, r15
    988c:	5c 97       	sbiw	r26, 0x1c	; 28
    988e:	f8 01       	movw	r30, r16
    9890:	81 a2       	std	Z+33, r8	; 0x21
    9892:	92 a2       	std	Z+34, r9	; 0x22
    9894:	a3 a2       	std	Z+35, r10	; 0x23
    9896:	b4 a2       	std	Z+36, r11	; 0x24
    9898:	2a 8d       	ldd	r18, Y+26	; 0x1a
    989a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    989c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    989e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    98a0:	95 96       	adiw	r26, 0x25	; 37
    98a2:	2d 93       	st	X+, r18
    98a4:	3d 93       	st	X+, r19
    98a6:	4d 93       	st	X+, r20
    98a8:	5c 93       	st	X, r21
    98aa:	98 97       	sbiw	r26, 0x28	; 40
    98ac:	29 89       	ldd	r18, Y+17	; 0x11
    98ae:	3a 89       	ldd	r19, Y+18	; 0x12
    98b0:	4b 89       	ldd	r20, Y+19	; 0x13
    98b2:	5c 89       	ldd	r21, Y+20	; 0x14
    98b4:	9d 96       	adiw	r26, 0x2d	; 45
    98b6:	2d 93       	st	X+, r18
    98b8:	3d 93       	st	X+, r19
    98ba:	4d 93       	st	X+, r20
    98bc:	5c 93       	st	X, r21
    98be:	d0 97       	sbiw	r26, 0x30	; 48
    98c0:	e1 5a       	subi	r30, 0xA1	; 161
    98c2:	ff 4f       	sbci	r31, 0xFF	; 255
    98c4:	80 81       	ld	r24, Z
    98c6:	91 81       	ldd	r25, Z+1	; 0x01
    98c8:	89 2b       	or	r24, r25
    98ca:	09 f0       	breq	.+2      	; 0x98ce <find_volume+0x4c6>
    98cc:	29 ce       	rjmp	.-942    	; 0x9520 <find_volume+0x118>
    98ce:	21 14       	cp	r2, r1
    98d0:	31 04       	cpc	r3, r1
    98d2:	09 f0       	breq	.+2      	; 0x98d6 <find_volume+0x4ce>
    98d4:	25 ce       	rjmp	.-950    	; 0x9520 <find_volume+0x118>
    98d6:	c8 01       	movw	r24, r16
    98d8:	8f 59       	subi	r24, 0x9F	; 159
    98da:	9f 4f       	sbci	r25, 0xFF	; 255
    98dc:	3e db       	rcall	.-2436   	; 0x8f5a <ld_dword>
    98de:	f8 01       	movw	r30, r16
    98e0:	61 a7       	std	Z+41, r22	; 0x29
    98e2:	72 a7       	std	Z+42, r23	; 0x2a
    98e4:	83 a7       	std	Z+43, r24	; 0x2b
    98e6:	94 a7       	std	Z+44, r25	; 0x2c
    98e8:	62 e0       	ldi	r22, 0x02	; 2
    98ea:	cc 0c       	add	r12, r12
    98ec:	dd 1c       	adc	r13, r13
    98ee:	ee 1c       	adc	r14, r14
    98f0:	ff 1c       	adc	r15, r15
    98f2:	6a 95       	dec	r22
    98f4:	d1 f7       	brne	.-12     	; 0x98ea <find_volume+0x4e2>
    98f6:	73 e0       	ldi	r23, 0x03	; 3
    98f8:	77 2e       	mov	r7, r23
    98fa:	31 cf       	rjmp	.-414    	; 0x975e <find_volume+0x356>
    98fc:	81 a2       	std	Z+33, r8	; 0x21
    98fe:	92 a2       	std	Z+34, r9	; 0x22
    9900:	a3 a2       	std	Z+35, r10	; 0x23
    9902:	b4 a2       	std	Z+36, r11	; 0x24
    9904:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9906:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9908:	4c 8d       	ldd	r20, Y+28	; 0x1c
    990a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    990c:	25 a3       	std	Z+37, r18	; 0x25
    990e:	36 a3       	std	Z+38, r19	; 0x26
    9910:	47 a3       	std	Z+39, r20	; 0x27
    9912:	50 a7       	std	Z+40, r21	; 0x28
    9914:	29 89       	ldd	r18, Y+17	; 0x11
    9916:	3a 89       	ldd	r19, Y+18	; 0x12
    9918:	4b 89       	ldd	r20, Y+19	; 0x13
    991a:	5c 89       	ldd	r21, Y+20	; 0x14
    991c:	25 a7       	std	Z+45, r18	; 0x2d
    991e:	36 a7       	std	Z+46, r19	; 0x2e
    9920:	47 a7       	std	Z+47, r20	; 0x2f
    9922:	50 ab       	std	Z+48, r21	; 0x30
    9924:	21 14       	cp	r2, r1
    9926:	31 04       	cpc	r3, r1
    9928:	09 f4       	brne	.+2      	; 0x992c <find_volume+0x524>
    992a:	fa cd       	rjmp	.-1036   	; 0x9520 <find_volume+0x118>
    992c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    992e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9930:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9932:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9934:	42 0e       	add	r4, r18
    9936:	53 1e       	adc	r5, r19
    9938:	64 1e       	adc	r6, r20
    993a:	75 1e       	adc	r7, r21
    993c:	41 a6       	std	Z+41, r4	; 0x29
    993e:	52 a6       	std	Z+42, r5	; 0x2a
    9940:	63 a6       	std	Z+43, r6	; 0x2b
    9942:	74 a6       	std	Z+44, r7	; 0x2c
    9944:	cc 0c       	add	r12, r12
    9946:	dd 1c       	adc	r13, r13
    9948:	ee 1c       	adc	r14, r14
    994a:	ff 1c       	adc	r15, r15
    994c:	42 e0       	ldi	r20, 0x02	; 2
    994e:	74 2e       	mov	r7, r20
    9950:	06 cf       	rjmp	.-500    	; 0x975e <find_volume+0x356>
    9952:	6d 96       	adiw	r28, 0x1d	; 29
    9954:	e2 e1       	ldi	r30, 0x12	; 18
    9956:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000995a <put_fat>:
    995a:	a6 e0       	ldi	r26, 0x06	; 6
    995c:	b0 e0       	ldi	r27, 0x00	; 0
    995e:	e3 eb       	ldi	r30, 0xB3	; 179
    9960:	fc e4       	ldi	r31, 0x4C	; 76
    9962:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    9966:	42 30       	cpi	r20, 0x02	; 2
    9968:	51 05       	cpc	r21, r1
    996a:	61 05       	cpc	r22, r1
    996c:	71 05       	cpc	r23, r1
    996e:	08 f4       	brcc	.+2      	; 0x9972 <put_fat+0x18>
    9970:	e9 c0       	rjmp	.+466    	; 0x9b44 <put_fat+0x1ea>
    9972:	dc 01       	movw	r26, r24
    9974:	59 96       	adiw	r26, 0x19	; 25
    9976:	cd 90       	ld	r12, X+
    9978:	dd 90       	ld	r13, X+
    997a:	ed 90       	ld	r14, X+
    997c:	fc 90       	ld	r15, X
    997e:	5c 97       	sbiw	r26, 0x1c	; 28
    9980:	4c 15       	cp	r20, r12
    9982:	5d 05       	cpc	r21, r13
    9984:	6e 05       	cpc	r22, r14
    9986:	7f 05       	cpc	r23, r15
    9988:	08 f0       	brcs	.+2      	; 0x998c <put_fat+0x32>
    998a:	dc c0       	rjmp	.+440    	; 0x9b44 <put_fat+0x1ea>
    998c:	28 01       	movw	r4, r16
    998e:	39 01       	movw	r6, r18
    9990:	6a 01       	movw	r12, r20
    9992:	7b 01       	movw	r14, r22
    9994:	9e 83       	std	Y+6, r25	; 0x06
    9996:	8d 83       	std	Y+5, r24	; 0x05
    9998:	fc 01       	movw	r30, r24
    999a:	80 81       	ld	r24, Z
    999c:	82 30       	cpi	r24, 0x02	; 2
    999e:	09 f4       	brne	.+2      	; 0x99a2 <put_fat+0x48>
    99a0:	73 c0       	rjmp	.+230    	; 0x9a88 <put_fat+0x12e>
    99a2:	83 30       	cpi	r24, 0x03	; 3
    99a4:	09 f4       	brne	.+2      	; 0x99a8 <put_fat+0x4e>
    99a6:	92 c0       	rjmp	.+292    	; 0x9acc <put_fat+0x172>
    99a8:	81 30       	cpi	r24, 0x01	; 1
    99aa:	09 f0       	breq	.+2      	; 0x99ae <put_fat+0x54>
    99ac:	cb c0       	rjmp	.+406    	; 0x9b44 <put_fat+0x1ea>
    99ae:	4a 01       	movw	r8, r20
    99b0:	96 94       	lsr	r9
    99b2:	87 94       	ror	r8
    99b4:	84 0e       	add	r8, r20
    99b6:	95 1e       	adc	r9, r21
    99b8:	c4 01       	movw	r24, r8
    99ba:	89 2f       	mov	r24, r25
    99bc:	99 27       	eor	r25, r25
    99be:	86 95       	lsr	r24
    99c0:	45 a1       	ldd	r20, Z+37	; 0x25
    99c2:	56 a1       	ldd	r21, Z+38	; 0x26
    99c4:	67 a1       	ldd	r22, Z+39	; 0x27
    99c6:	70 a5       	ldd	r23, Z+40	; 0x28
    99c8:	48 0f       	add	r20, r24
    99ca:	59 1f       	adc	r21, r25
    99cc:	61 1d       	adc	r22, r1
    99ce:	71 1d       	adc	r23, r1
    99d0:	cf 01       	movw	r24, r30
    99d2:	9a dc       	rcall	.-1740   	; 0x9308 <move_window>
    99d4:	5c 01       	movw	r10, r24
    99d6:	89 2b       	or	r24, r25
    99d8:	09 f0       	breq	.+2      	; 0x99dc <put_fat+0x82>
    99da:	b7 c0       	rjmp	.+366    	; 0x9b4a <put_fat+0x1f0>
    99dc:	2d 80       	ldd	r2, Y+5	; 0x05
    99de:	3e 80       	ldd	r3, Y+6	; 0x06
    99e0:	f5 e3       	ldi	r31, 0x35	; 53
    99e2:	2f 0e       	add	r2, r31
    99e4:	31 1c       	adc	r3, r1
    99e6:	84 01       	movw	r16, r8
    99e8:	0f 5f       	subi	r16, 0xFF	; 255
    99ea:	1f 4f       	sbci	r17, 0xFF	; 255
    99ec:	21 e0       	ldi	r18, 0x01	; 1
    99ee:	92 22       	and	r9, r18
    99f0:	f1 01       	movw	r30, r2
    99f2:	e8 0d       	add	r30, r8
    99f4:	f9 1d       	adc	r31, r9
    99f6:	d7 01       	movw	r26, r14
    99f8:	c6 01       	movw	r24, r12
    99fa:	81 70       	andi	r24, 0x01	; 1
    99fc:	99 27       	eor	r25, r25
    99fe:	aa 27       	eor	r26, r26
    9a00:	bb 27       	eor	r27, r27
    9a02:	89 83       	std	Y+1, r24	; 0x01
    9a04:	9a 83       	std	Y+2, r25	; 0x02
    9a06:	ab 83       	std	Y+3, r26	; 0x03
    9a08:	bc 83       	std	Y+4, r27	; 0x04
    9a0a:	c0 fe       	sbrs	r12, 0
    9a0c:	09 c0       	rjmp	.+18     	; 0x9a20 <put_fat+0xc6>
    9a0e:	80 81       	ld	r24, Z
    9a10:	28 2f       	mov	r18, r24
    9a12:	2f 70       	andi	r18, 0x0F	; 15
    9a14:	a0 e1       	ldi	r26, 0x10	; 16
    9a16:	4a 9e       	mul	r4, r26
    9a18:	c0 01       	movw	r24, r0
    9a1a:	11 24       	eor	r1, r1
    9a1c:	82 2b       	or	r24, r18
    9a1e:	01 c0       	rjmp	.+2      	; 0x9a22 <put_fat+0xc8>
    9a20:	84 2d       	mov	r24, r4
    9a22:	80 83       	st	Z, r24
    9a24:	81 e0       	ldi	r24, 0x01	; 1
    9a26:	ed 81       	ldd	r30, Y+5	; 0x05
    9a28:	fe 81       	ldd	r31, Y+6	; 0x06
    9a2a:	83 83       	std	Z+3, r24	; 0x03
    9a2c:	45 a1       	ldd	r20, Z+37	; 0x25
    9a2e:	56 a1       	ldd	r21, Z+38	; 0x26
    9a30:	67 a1       	ldd	r22, Z+39	; 0x27
    9a32:	70 a5       	ldd	r23, Z+40	; 0x28
    9a34:	c8 01       	movw	r24, r16
    9a36:	89 2f       	mov	r24, r25
    9a38:	99 27       	eor	r25, r25
    9a3a:	86 95       	lsr	r24
    9a3c:	48 0f       	add	r20, r24
    9a3e:	59 1f       	adc	r21, r25
    9a40:	61 1d       	adc	r22, r1
    9a42:	71 1d       	adc	r23, r1
    9a44:	cf 01       	movw	r24, r30
    9a46:	60 dc       	rcall	.-1856   	; 0x9308 <move_window>
    9a48:	5c 01       	movw	r10, r24
    9a4a:	89 2b       	or	r24, r25
    9a4c:	09 f0       	breq	.+2      	; 0x9a50 <put_fat+0xf6>
    9a4e:	7d c0       	rjmp	.+250    	; 0x9b4a <put_fat+0x1f0>
    9a50:	11 70       	andi	r17, 0x01	; 1
    9a52:	f1 01       	movw	r30, r2
    9a54:	e0 0f       	add	r30, r16
    9a56:	f1 1f       	adc	r31, r17
    9a58:	89 81       	ldd	r24, Y+1	; 0x01
    9a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    9a5c:	ab 81       	ldd	r26, Y+3	; 0x03
    9a5e:	bc 81       	ldd	r27, Y+4	; 0x04
    9a60:	89 2b       	or	r24, r25
    9a62:	8a 2b       	or	r24, r26
    9a64:	8b 2b       	or	r24, r27
    9a66:	41 f0       	breq	.+16     	; 0x9a78 <put_fat+0x11e>
    9a68:	54 e0       	ldi	r21, 0x04	; 4
    9a6a:	76 94       	lsr	r7
    9a6c:	67 94       	ror	r6
    9a6e:	57 94       	ror	r5
    9a70:	47 94       	ror	r4
    9a72:	5a 95       	dec	r21
    9a74:	d1 f7       	brne	.-12     	; 0x9a6a <put_fat+0x110>
    9a76:	06 c0       	rjmp	.+12     	; 0x9a84 <put_fat+0x12a>
    9a78:	00 81       	ld	r16, Z
    9a7a:	00 7f       	andi	r16, 0xF0	; 240
    9a7c:	85 2d       	mov	r24, r5
    9a7e:	8f 70       	andi	r24, 0x0F	; 15
    9a80:	40 2e       	mov	r4, r16
    9a82:	48 2a       	or	r4, r24
    9a84:	40 82       	st	Z, r4
    9a86:	58 c0       	rjmp	.+176    	; 0x9b38 <put_fat+0x1de>
    9a88:	77 27       	eor	r23, r23
    9a8a:	6f 2d       	mov	r22, r15
    9a8c:	5e 2d       	mov	r21, r14
    9a8e:	4d 2d       	mov	r20, r13
    9a90:	ed 81       	ldd	r30, Y+5	; 0x05
    9a92:	fe 81       	ldd	r31, Y+6	; 0x06
    9a94:	85 a1       	ldd	r24, Z+37	; 0x25
    9a96:	96 a1       	ldd	r25, Z+38	; 0x26
    9a98:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a9a:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a9c:	48 0f       	add	r20, r24
    9a9e:	59 1f       	adc	r21, r25
    9aa0:	6a 1f       	adc	r22, r26
    9aa2:	7b 1f       	adc	r23, r27
    9aa4:	cf 01       	movw	r24, r30
    9aa6:	30 dc       	rcall	.-1952   	; 0x9308 <move_window>
    9aa8:	5c 01       	movw	r10, r24
    9aaa:	89 2b       	or	r24, r25
    9aac:	09 f0       	breq	.+2      	; 0x9ab0 <put_fat+0x156>
    9aae:	4d c0       	rjmp	.+154    	; 0x9b4a <put_fat+0x1f0>
    9ab0:	ed 81       	ldd	r30, Y+5	; 0x05
    9ab2:	fe 81       	ldd	r31, Y+6	; 0x06
    9ab4:	f5 96       	adiw	r30, 0x35	; 53
    9ab6:	cc 0c       	add	r12, r12
    9ab8:	dd 1c       	adc	r13, r13
    9aba:	e8 94       	clt
    9abc:	c0 f8       	bld	r12, 0
    9abe:	21 e0       	ldi	r18, 0x01	; 1
    9ac0:	d2 22       	and	r13, r18
    9ac2:	ec 0d       	add	r30, r12
    9ac4:	fd 1d       	adc	r31, r13
    9ac6:	40 82       	st	Z, r4
    9ac8:	51 82       	std	Z+1, r5	; 0x01
    9aca:	36 c0       	rjmp	.+108    	; 0x9b38 <put_fat+0x1de>
    9acc:	ed 81       	ldd	r30, Y+5	; 0x05
    9ace:	fe 81       	ldd	r31, Y+6	; 0x06
    9ad0:	85 a1       	ldd	r24, Z+37	; 0x25
    9ad2:	96 a1       	ldd	r25, Z+38	; 0x26
    9ad4:	a7 a1       	ldd	r26, Z+39	; 0x27
    9ad6:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ad8:	27 e0       	ldi	r18, 0x07	; 7
    9ada:	76 95       	lsr	r23
    9adc:	67 95       	ror	r22
    9ade:	57 95       	ror	r21
    9ae0:	47 95       	ror	r20
    9ae2:	2a 95       	dec	r18
    9ae4:	d1 f7       	brne	.-12     	; 0x9ada <put_fat+0x180>
    9ae6:	48 0f       	add	r20, r24
    9ae8:	59 1f       	adc	r21, r25
    9aea:	6a 1f       	adc	r22, r26
    9aec:	7b 1f       	adc	r23, r27
    9aee:	cf 01       	movw	r24, r30
    9af0:	0b dc       	rcall	.-2026   	; 0x9308 <move_window>
    9af2:	5c 01       	movw	r10, r24
    9af4:	89 2b       	or	r24, r25
    9af6:	49 f5       	brne	.+82     	; 0x9b4a <put_fat+0x1f0>
    9af8:	4d 81       	ldd	r20, Y+5	; 0x05
    9afa:	5e 81       	ldd	r21, Y+6	; 0x06
    9afc:	4b 5c       	subi	r20, 0xCB	; 203
    9afe:	5f 4f       	sbci	r21, 0xFF	; 255
    9b00:	cc 0c       	add	r12, r12
    9b02:	dd 1c       	adc	r13, r13
    9b04:	cc 0c       	add	r12, r12
    9b06:	dd 1c       	adc	r13, r13
    9b08:	fc ef       	ldi	r31, 0xFC	; 252
    9b0a:	cf 22       	and	r12, r31
    9b0c:	f1 e0       	ldi	r31, 0x01	; 1
    9b0e:	df 22       	and	r13, r31
    9b10:	c4 0e       	add	r12, r20
    9b12:	d5 1e       	adc	r13, r21
    9b14:	c6 01       	movw	r24, r12
    9b16:	21 da       	rcall	.-3006   	; 0x8f5a <ld_dword>
    9b18:	2f e0       	ldi	r18, 0x0F	; 15
    9b1a:	72 22       	and	r7, r18
    9b1c:	dc 01       	movw	r26, r24
    9b1e:	cb 01       	movw	r24, r22
    9b20:	88 27       	eor	r24, r24
    9b22:	99 27       	eor	r25, r25
    9b24:	aa 27       	eor	r26, r26
    9b26:	b0 7f       	andi	r27, 0xF0	; 240
    9b28:	b3 01       	movw	r22, r6
    9b2a:	a2 01       	movw	r20, r4
    9b2c:	48 2b       	or	r20, r24
    9b2e:	59 2b       	or	r21, r25
    9b30:	6a 2b       	or	r22, r26
    9b32:	7b 2b       	or	r23, r27
    9b34:	c6 01       	movw	r24, r12
    9b36:	26 da       	rcall	.-2996   	; 0x8f84 <st_dword>
    9b38:	81 e0       	ldi	r24, 0x01	; 1
    9b3a:	ad 81       	ldd	r26, Y+5	; 0x05
    9b3c:	be 81       	ldd	r27, Y+6	; 0x06
    9b3e:	13 96       	adiw	r26, 0x03	; 3
    9b40:	8c 93       	st	X, r24
    9b42:	03 c0       	rjmp	.+6      	; 0x9b4a <put_fat+0x1f0>
    9b44:	82 e0       	ldi	r24, 0x02	; 2
    9b46:	a8 2e       	mov	r10, r24
    9b48:	b1 2c       	mov	r11, r1
    9b4a:	c5 01       	movw	r24, r10
    9b4c:	26 96       	adiw	r28, 0x06	; 6
    9b4e:	e2 e1       	ldi	r30, 0x12	; 18
    9b50:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

00009b54 <get_fat.isra.7>:
    9b54:	a0 e0       	ldi	r26, 0x00	; 0
    9b56:	b0 e0       	ldi	r27, 0x00	; 0
    9b58:	e0 eb       	ldi	r30, 0xB0	; 176
    9b5a:	fd e4       	ldi	r31, 0x4D	; 77
    9b5c:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
    9b60:	42 30       	cpi	r20, 0x02	; 2
    9b62:	51 05       	cpc	r21, r1
    9b64:	61 05       	cpc	r22, r1
    9b66:	71 05       	cpc	r23, r1
    9b68:	08 f4       	brcc	.+2      	; 0x9b6c <get_fat.isra.7+0x18>
    9b6a:	9e c0       	rjmp	.+316    	; 0x9ca8 <get_fat.isra.7+0x154>
    9b6c:	fc 01       	movw	r30, r24
    9b6e:	01 8d       	ldd	r16, Z+25	; 0x19
    9b70:	12 8d       	ldd	r17, Z+26	; 0x1a
    9b72:	23 8d       	ldd	r18, Z+27	; 0x1b
    9b74:	34 8d       	ldd	r19, Z+28	; 0x1c
    9b76:	40 17       	cp	r20, r16
    9b78:	51 07       	cpc	r21, r17
    9b7a:	62 07       	cpc	r22, r18
    9b7c:	73 07       	cpc	r23, r19
    9b7e:	08 f0       	brcs	.+2      	; 0x9b82 <get_fat.isra.7+0x2e>
    9b80:	93 c0       	rjmp	.+294    	; 0x9ca8 <get_fat.isra.7+0x154>
    9b82:	6a 01       	movw	r12, r20
    9b84:	7b 01       	movw	r14, r22
    9b86:	8c 01       	movw	r16, r24
    9b88:	80 81       	ld	r24, Z
    9b8a:	82 30       	cpi	r24, 0x02	; 2
    9b8c:	09 f4       	brne	.+2      	; 0x9b90 <get_fat.isra.7+0x3c>
    9b8e:	4b c0       	rjmp	.+150    	; 0x9c26 <get_fat.isra.7+0xd2>
    9b90:	83 30       	cpi	r24, 0x03	; 3
    9b92:	09 f4       	brne	.+2      	; 0x9b96 <get_fat.isra.7+0x42>
    9b94:	67 c0       	rjmp	.+206    	; 0x9c64 <get_fat.isra.7+0x110>
    9b96:	81 30       	cpi	r24, 0x01	; 1
    9b98:	09 f0       	breq	.+2      	; 0x9b9c <get_fat.isra.7+0x48>
    9b9a:	86 c0       	rjmp	.+268    	; 0x9ca8 <get_fat.isra.7+0x154>
    9b9c:	ea 01       	movw	r28, r20
    9b9e:	d6 95       	lsr	r29
    9ba0:	c7 95       	ror	r28
    9ba2:	cc 0d       	add	r28, r12
    9ba4:	dd 1d       	adc	r29, r13
    9ba6:	ce 01       	movw	r24, r28
    9ba8:	89 2f       	mov	r24, r25
    9baa:	99 27       	eor	r25, r25
    9bac:	86 95       	lsr	r24
    9bae:	45 a1       	ldd	r20, Z+37	; 0x25
    9bb0:	56 a1       	ldd	r21, Z+38	; 0x26
    9bb2:	67 a1       	ldd	r22, Z+39	; 0x27
    9bb4:	70 a5       	ldd	r23, Z+40	; 0x28
    9bb6:	48 0f       	add	r20, r24
    9bb8:	59 1f       	adc	r21, r25
    9bba:	61 1d       	adc	r22, r1
    9bbc:	71 1d       	adc	r23, r1
    9bbe:	cf 01       	movw	r24, r30
    9bc0:	a3 db       	rcall	.-2234   	; 0x9308 <move_window>
    9bc2:	89 2b       	or	r24, r25
    9bc4:	21 f0       	breq	.+8      	; 0x9bce <get_fat.isra.7+0x7a>
    9bc6:	6f ef       	ldi	r22, 0xFF	; 255
    9bc8:	7f ef       	ldi	r23, 0xFF	; 255
    9bca:	cb 01       	movw	r24, r22
    9bcc:	71 c0       	rjmp	.+226    	; 0x9cb0 <get_fat.isra.7+0x15c>
    9bce:	5e 01       	movw	r10, r28
    9bd0:	ff ef       	ldi	r31, 0xFF	; 255
    9bd2:	af 1a       	sub	r10, r31
    9bd4:	bf 0a       	sbc	r11, r31
    9bd6:	d1 70       	andi	r29, 0x01	; 1
    9bd8:	c0 0f       	add	r28, r16
    9bda:	d1 1f       	adc	r29, r17
    9bdc:	cd a9       	ldd	r28, Y+53	; 0x35
    9bde:	c5 01       	movw	r24, r10
    9be0:	89 2f       	mov	r24, r25
    9be2:	99 27       	eor	r25, r25
    9be4:	86 95       	lsr	r24
    9be6:	f8 01       	movw	r30, r16
    9be8:	45 a1       	ldd	r20, Z+37	; 0x25
    9bea:	56 a1       	ldd	r21, Z+38	; 0x26
    9bec:	67 a1       	ldd	r22, Z+39	; 0x27
    9bee:	70 a5       	ldd	r23, Z+40	; 0x28
    9bf0:	48 0f       	add	r20, r24
    9bf2:	59 1f       	adc	r21, r25
    9bf4:	61 1d       	adc	r22, r1
    9bf6:	71 1d       	adc	r23, r1
    9bf8:	c8 01       	movw	r24, r16
    9bfa:	86 db       	rcall	.-2292   	; 0x9308 <move_window>
    9bfc:	89 2b       	or	r24, r25
    9bfe:	19 f7       	brne	.-58     	; 0x9bc6 <get_fat.isra.7+0x72>
    9c00:	f1 e0       	ldi	r31, 0x01	; 1
    9c02:	bf 22       	and	r11, r31
    9c04:	f8 01       	movw	r30, r16
    9c06:	ea 0d       	add	r30, r10
    9c08:	fb 1d       	adc	r31, r11
    9c0a:	85 a9       	ldd	r24, Z+53	; 0x35
    9c0c:	6c 2f       	mov	r22, r28
    9c0e:	70 e0       	ldi	r23, 0x00	; 0
    9c10:	78 2b       	or	r23, r24
    9c12:	c0 fe       	sbrs	r12, 0
    9c14:	06 c0       	rjmp	.+12     	; 0x9c22 <get_fat.isra.7+0xce>
    9c16:	54 e0       	ldi	r21, 0x04	; 4
    9c18:	76 95       	lsr	r23
    9c1a:	67 95       	ror	r22
    9c1c:	5a 95       	dec	r21
    9c1e:	e1 f7       	brne	.-8      	; 0x9c18 <get_fat.isra.7+0xc4>
    9c20:	1e c0       	rjmp	.+60     	; 0x9c5e <get_fat.isra.7+0x10a>
    9c22:	7f 70       	andi	r23, 0x0F	; 15
    9c24:	1c c0       	rjmp	.+56     	; 0x9c5e <get_fat.isra.7+0x10a>
    9c26:	77 27       	eor	r23, r23
    9c28:	6f 2d       	mov	r22, r15
    9c2a:	5e 2d       	mov	r21, r14
    9c2c:	4d 2d       	mov	r20, r13
    9c2e:	85 a1       	ldd	r24, Z+37	; 0x25
    9c30:	96 a1       	ldd	r25, Z+38	; 0x26
    9c32:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c34:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c36:	48 0f       	add	r20, r24
    9c38:	59 1f       	adc	r21, r25
    9c3a:	6a 1f       	adc	r22, r26
    9c3c:	7b 1f       	adc	r23, r27
    9c3e:	cf 01       	movw	r24, r30
    9c40:	63 db       	rcall	.-2362   	; 0x9308 <move_window>
    9c42:	89 2b       	or	r24, r25
    9c44:	09 f0       	breq	.+2      	; 0x9c48 <get_fat.isra.7+0xf4>
    9c46:	bf cf       	rjmp	.-130    	; 0x9bc6 <get_fat.isra.7+0x72>
    9c48:	cc 0c       	add	r12, r12
    9c4a:	dd 1c       	adc	r13, r13
    9c4c:	e8 94       	clt
    9c4e:	c0 f8       	bld	r12, 0
    9c50:	f1 e0       	ldi	r31, 0x01	; 1
    9c52:	df 22       	and	r13, r31
    9c54:	f8 01       	movw	r30, r16
    9c56:	ec 0d       	add	r30, r12
    9c58:	fd 1d       	adc	r31, r13
    9c5a:	65 a9       	ldd	r22, Z+53	; 0x35
    9c5c:	76 a9       	ldd	r23, Z+54	; 0x36
    9c5e:	80 e0       	ldi	r24, 0x00	; 0
    9c60:	90 e0       	ldi	r25, 0x00	; 0
    9c62:	26 c0       	rjmp	.+76     	; 0x9cb0 <get_fat.isra.7+0x15c>
    9c64:	85 a1       	ldd	r24, Z+37	; 0x25
    9c66:	96 a1       	ldd	r25, Z+38	; 0x26
    9c68:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c6a:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c6c:	27 e0       	ldi	r18, 0x07	; 7
    9c6e:	76 95       	lsr	r23
    9c70:	67 95       	ror	r22
    9c72:	57 95       	ror	r21
    9c74:	47 95       	ror	r20
    9c76:	2a 95       	dec	r18
    9c78:	d1 f7       	brne	.-12     	; 0x9c6e <get_fat.isra.7+0x11a>
    9c7a:	48 0f       	add	r20, r24
    9c7c:	59 1f       	adc	r21, r25
    9c7e:	6a 1f       	adc	r22, r26
    9c80:	7b 1f       	adc	r23, r27
    9c82:	cf 01       	movw	r24, r30
    9c84:	41 db       	rcall	.-2430   	; 0x9308 <move_window>
    9c86:	89 2b       	or	r24, r25
    9c88:	09 f0       	breq	.+2      	; 0x9c8c <get_fat.isra.7+0x138>
    9c8a:	9d cf       	rjmp	.-198    	; 0x9bc6 <get_fat.isra.7+0x72>
    9c8c:	0b 5c       	subi	r16, 0xCB	; 203
    9c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    9c90:	cc 0c       	add	r12, r12
    9c92:	dd 1c       	adc	r13, r13
    9c94:	cc 0c       	add	r12, r12
    9c96:	dd 1c       	adc	r13, r13
    9c98:	c6 01       	movw	r24, r12
    9c9a:	8c 7f       	andi	r24, 0xFC	; 252
    9c9c:	91 70       	andi	r25, 0x01	; 1
    9c9e:	80 0f       	add	r24, r16
    9ca0:	91 1f       	adc	r25, r17
    9ca2:	5b d9       	rcall	.-3402   	; 0x8f5a <ld_dword>
    9ca4:	9f 70       	andi	r25, 0x0F	; 15
    9ca6:	04 c0       	rjmp	.+8      	; 0x9cb0 <get_fat.isra.7+0x15c>
    9ca8:	61 e0       	ldi	r22, 0x01	; 1
    9caa:	70 e0       	ldi	r23, 0x00	; 0
    9cac:	80 e0       	ldi	r24, 0x00	; 0
    9cae:	90 e0       	ldi	r25, 0x00	; 0
    9cb0:	cd b7       	in	r28, 0x3d	; 61
    9cb2:	de b7       	in	r29, 0x3e	; 62
    9cb4:	ea e0       	ldi	r30, 0x0A	; 10
    9cb6:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

00009cba <dir_sdi>:
    9cba:	a0 e0       	ldi	r26, 0x00	; 0
    9cbc:	b0 e0       	ldi	r27, 0x00	; 0
    9cbe:	e3 e6       	ldi	r30, 0x63	; 99
    9cc0:	fe e4       	ldi	r31, 0x4E	; 78
    9cc2:	0c 94 07 ed 	jmp	0x1da0e	; 0x1da0e <__prologue_saves__+0x4>
    9cc6:	ec 01       	movw	r28, r24
    9cc8:	6a 01       	movw	r12, r20
    9cca:	7b 01       	movw	r14, r22
    9ccc:	41 15       	cp	r20, r1
    9cce:	51 05       	cpc	r21, r1
    9cd0:	80 e2       	ldi	r24, 0x20	; 32
    9cd2:	68 07       	cpc	r22, r24
    9cd4:	71 05       	cpc	r23, r1
    9cd6:	18 f0       	brcs	.+6      	; 0x9cde <dir_sdi+0x24>
    9cd8:	82 e0       	ldi	r24, 0x02	; 2
    9cda:	90 e0       	ldi	r25, 0x00	; 0
    9cdc:	a9 c0       	rjmp	.+338    	; 0x9e30 <dir_sdi+0x176>
    9cde:	db 01       	movw	r26, r22
    9ce0:	ca 01       	movw	r24, r20
    9ce2:	8f 71       	andi	r24, 0x1F	; 31
    9ce4:	99 27       	eor	r25, r25
    9ce6:	aa 27       	eor	r26, r26
    9ce8:	bb 27       	eor	r27, r27
    9cea:	89 2b       	or	r24, r25
    9cec:	8a 2b       	or	r24, r26
    9cee:	8b 2b       	or	r24, r27
    9cf0:	99 f7       	brne	.-26     	; 0x9cd8 <dir_sdi+0x1e>
    9cf2:	08 81       	ld	r16, Y
    9cf4:	19 81       	ldd	r17, Y+1	; 0x01
    9cf6:	4e 87       	std	Y+14, r20	; 0x0e
    9cf8:	5f 87       	std	Y+15, r21	; 0x0f
    9cfa:	68 8b       	std	Y+16, r22	; 0x10
    9cfc:	79 8b       	std	Y+17, r23	; 0x11
    9cfe:	8e 80       	ldd	r8, Y+6	; 0x06
    9d00:	9f 80       	ldd	r9, Y+7	; 0x07
    9d02:	a8 84       	ldd	r10, Y+8	; 0x08
    9d04:	b9 84       	ldd	r11, Y+9	; 0x09
    9d06:	81 14       	cp	r8, r1
    9d08:	91 04       	cpc	r9, r1
    9d0a:	a1 04       	cpc	r10, r1
    9d0c:	b1 04       	cpc	r11, r1
    9d0e:	51 f5       	brne	.+84     	; 0x9d64 <dir_sdi+0xaa>
    9d10:	f8 01       	movw	r30, r16
    9d12:	80 81       	ld	r24, Z
    9d14:	83 30       	cpi	r24, 0x03	; 3
    9d16:	40 f0       	brcs	.+16     	; 0x9d28 <dir_sdi+0x6e>
    9d18:	81 a5       	ldd	r24, Z+41	; 0x29
    9d1a:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d1c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d1e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d20:	00 97       	sbiw	r24, 0x00	; 0
    9d22:	a1 05       	cpc	r26, r1
    9d24:	b1 05       	cpc	r27, r1
    9d26:	e1 f4       	brne	.+56     	; 0x9d60 <dir_sdi+0xa6>
    9d28:	f8 01       	movw	r30, r16
    9d2a:	87 81       	ldd	r24, Z+7	; 0x07
    9d2c:	90 85       	ldd	r25, Z+8	; 0x08
    9d2e:	a0 e0       	ldi	r26, 0x00	; 0
    9d30:	b0 e0       	ldi	r27, 0x00	; 0
    9d32:	b7 01       	movw	r22, r14
    9d34:	a6 01       	movw	r20, r12
    9d36:	25 e0       	ldi	r18, 0x05	; 5
    9d38:	76 95       	lsr	r23
    9d3a:	67 95       	ror	r22
    9d3c:	57 95       	ror	r21
    9d3e:	47 95       	ror	r20
    9d40:	2a 95       	dec	r18
    9d42:	d1 f7       	brne	.-12     	; 0x9d38 <dir_sdi+0x7e>
    9d44:	48 17       	cp	r20, r24
    9d46:	59 07       	cpc	r21, r25
    9d48:	6a 07       	cpc	r22, r26
    9d4a:	7b 07       	cpc	r23, r27
    9d4c:	28 f6       	brcc	.-118    	; 0x9cd8 <dir_sdi+0x1e>
    9d4e:	81 a5       	ldd	r24, Z+41	; 0x29
    9d50:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d52:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d54:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d56:	8e 8b       	std	Y+22, r24	; 0x16
    9d58:	9f 8b       	std	Y+23, r25	; 0x17
    9d5a:	a8 8f       	std	Y+24, r26	; 0x18
    9d5c:	b9 8f       	std	Y+25, r27	; 0x19
    9d5e:	3d c0       	rjmp	.+122    	; 0x9dda <dir_sdi+0x120>
    9d60:	4c 01       	movw	r8, r24
    9d62:	5d 01       	movw	r10, r26
    9d64:	f8 01       	movw	r30, r16
    9d66:	41 84       	ldd	r4, Z+9	; 0x09
    9d68:	52 84       	ldd	r5, Z+10	; 0x0a
    9d6a:	61 2c       	mov	r6, r1
    9d6c:	71 2c       	mov	r7, r1
    9d6e:	39 e0       	ldi	r19, 0x09	; 9
    9d70:	44 0c       	add	r4, r4
    9d72:	55 1c       	adc	r5, r5
    9d74:	66 1c       	adc	r6, r6
    9d76:	77 1c       	adc	r7, r7
    9d78:	3a 95       	dec	r19
    9d7a:	d1 f7       	brne	.-12     	; 0x9d70 <dir_sdi+0xb6>
    9d7c:	b5 01       	movw	r22, r10
    9d7e:	a4 01       	movw	r20, r8
    9d80:	c4 14       	cp	r12, r4
    9d82:	d5 04       	cpc	r13, r5
    9d84:	e6 04       	cpc	r14, r6
    9d86:	f7 04       	cpc	r15, r7
    9d88:	10 f1       	brcs	.+68     	; 0x9dce <dir_sdi+0x114>
    9d8a:	88 81       	ld	r24, Y
    9d8c:	99 81       	ldd	r25, Y+1	; 0x01
    9d8e:	e2 de       	rcall	.-572    	; 0x9b54 <get_fat.isra.7>
    9d90:	4b 01       	movw	r8, r22
    9d92:	5c 01       	movw	r10, r24
    9d94:	6f 3f       	cpi	r22, 0xFF	; 255
    9d96:	7f 4f       	sbci	r23, 0xFF	; 255
    9d98:	8f 4f       	sbci	r24, 0xFF	; 255
    9d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    9d9c:	09 f4       	brne	.+2      	; 0x9da0 <dir_sdi+0xe6>
    9d9e:	46 c0       	rjmp	.+140    	; 0x9e2c <dir_sdi+0x172>
    9da0:	82 e0       	ldi	r24, 0x02	; 2
    9da2:	88 16       	cp	r8, r24
    9da4:	91 04       	cpc	r9, r1
    9da6:	a1 04       	cpc	r10, r1
    9da8:	b1 04       	cpc	r11, r1
    9daa:	08 f4       	brcc	.+2      	; 0x9dae <dir_sdi+0xf4>
    9dac:	95 cf       	rjmp	.-214    	; 0x9cd8 <dir_sdi+0x1e>
    9dae:	f8 01       	movw	r30, r16
    9db0:	81 8d       	ldd	r24, Z+25	; 0x19
    9db2:	92 8d       	ldd	r25, Z+26	; 0x1a
    9db4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9db6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9db8:	88 16       	cp	r8, r24
    9dba:	99 06       	cpc	r9, r25
    9dbc:	aa 06       	cpc	r10, r26
    9dbe:	bb 06       	cpc	r11, r27
    9dc0:	08 f0       	brcs	.+2      	; 0x9dc4 <dir_sdi+0x10a>
    9dc2:	8a cf       	rjmp	.-236    	; 0x9cd8 <dir_sdi+0x1e>
    9dc4:	c4 18       	sub	r12, r4
    9dc6:	d5 08       	sbc	r13, r5
    9dc8:	e6 08       	sbc	r14, r6
    9dca:	f7 08       	sbc	r15, r7
    9dcc:	d7 cf       	rjmp	.-82     	; 0x9d7c <dir_sdi+0xc2>
    9dce:	c8 01       	movw	r24, r16
    9dd0:	e8 d8       	rcall	.-3632   	; 0x8fa2 <clust2sect>
    9dd2:	6e 8b       	std	Y+22, r22	; 0x16
    9dd4:	7f 8b       	std	Y+23, r23	; 0x17
    9dd6:	88 8f       	std	Y+24, r24	; 0x18
    9dd8:	99 8f       	std	Y+25, r25	; 0x19
    9dda:	8a 8a       	std	Y+18, r8	; 0x12
    9ddc:	9b 8a       	std	Y+19, r9	; 0x13
    9dde:	ac 8a       	std	Y+20, r10	; 0x14
    9de0:	bd 8a       	std	Y+21, r11	; 0x15
    9de2:	8e 89       	ldd	r24, Y+22	; 0x16
    9de4:	9f 89       	ldd	r25, Y+23	; 0x17
    9de6:	a8 8d       	ldd	r26, Y+24	; 0x18
    9de8:	b9 8d       	ldd	r27, Y+25	; 0x19
    9dea:	00 97       	sbiw	r24, 0x00	; 0
    9dec:	a1 05       	cpc	r26, r1
    9dee:	b1 05       	cpc	r27, r1
    9df0:	09 f4       	brne	.+2      	; 0x9df4 <dir_sdi+0x13a>
    9df2:	72 cf       	rjmp	.-284    	; 0x9cd8 <dir_sdi+0x1e>
    9df4:	b7 01       	movw	r22, r14
    9df6:	a6 01       	movw	r20, r12
    9df8:	29 e0       	ldi	r18, 0x09	; 9
    9dfa:	76 95       	lsr	r23
    9dfc:	67 95       	ror	r22
    9dfe:	57 95       	ror	r21
    9e00:	47 95       	ror	r20
    9e02:	2a 95       	dec	r18
    9e04:	d1 f7       	brne	.-12     	; 0x9dfa <dir_sdi+0x140>
    9e06:	84 0f       	add	r24, r20
    9e08:	95 1f       	adc	r25, r21
    9e0a:	a6 1f       	adc	r26, r22
    9e0c:	b7 1f       	adc	r27, r23
    9e0e:	8e 8b       	std	Y+22, r24	; 0x16
    9e10:	9f 8b       	std	Y+23, r25	; 0x17
    9e12:	a8 8f       	std	Y+24, r26	; 0x18
    9e14:	b9 8f       	std	Y+25, r27	; 0x19
    9e16:	0b 5c       	subi	r16, 0xCB	; 203
    9e18:	1f 4f       	sbci	r17, 0xFF	; 255
    9e1a:	f1 e0       	ldi	r31, 0x01	; 1
    9e1c:	df 22       	and	r13, r31
    9e1e:	c0 0e       	add	r12, r16
    9e20:	d1 1e       	adc	r13, r17
    9e22:	db 8e       	std	Y+27, r13	; 0x1b
    9e24:	ca 8e       	std	Y+26, r12	; 0x1a
    9e26:	80 e0       	ldi	r24, 0x00	; 0
    9e28:	90 e0       	ldi	r25, 0x00	; 0
    9e2a:	02 c0       	rjmp	.+4      	; 0x9e30 <dir_sdi+0x176>
    9e2c:	81 e0       	ldi	r24, 0x01	; 1
    9e2e:	90 e0       	ldi	r25, 0x00	; 0
    9e30:	cd b7       	in	r28, 0x3d	; 61
    9e32:	de b7       	in	r29, 0x3e	; 62
    9e34:	e0 e1       	ldi	r30, 0x10	; 16
    9e36:	0c 94 23 ed 	jmp	0x1da46	; 0x1da46 <__epilogue_restores__+0x4>

00009e3a <create_chain>:
    9e3a:	a0 e0       	ldi	r26, 0x00	; 0
    9e3c:	b0 e0       	ldi	r27, 0x00	; 0
    9e3e:	e3 e2       	ldi	r30, 0x23	; 35
    9e40:	ff e4       	ldi	r31, 0x4F	; 79
    9e42:	0c 94 07 ed 	jmp	0x1da0e	; 0x1da0e <__prologue_saves__+0x4>
    9e46:	8c 01       	movw	r16, r24
    9e48:	2a 01       	movw	r4, r20
    9e4a:	3b 01       	movw	r6, r22
    9e4c:	fc 01       	movw	r30, r24
    9e4e:	c0 81       	ld	r28, Z
    9e50:	d1 81       	ldd	r29, Z+1	; 0x01
    9e52:	41 15       	cp	r20, r1
    9e54:	51 05       	cpc	r21, r1
    9e56:	61 05       	cpc	r22, r1
    9e58:	71 05       	cpc	r23, r1
    9e5a:	99 f4       	brne	.+38     	; 0x9e82 <create_chain+0x48>
    9e5c:	8d 84       	ldd	r8, Y+13	; 0x0d
    9e5e:	9e 84       	ldd	r9, Y+14	; 0x0e
    9e60:	af 84       	ldd	r10, Y+15	; 0x0f
    9e62:	b8 88       	ldd	r11, Y+16	; 0x10
    9e64:	81 14       	cp	r8, r1
    9e66:	91 04       	cpc	r9, r1
    9e68:	a1 04       	cpc	r10, r1
    9e6a:	b1 04       	cpc	r11, r1
    9e6c:	51 f1       	breq	.+84     	; 0x9ec2 <create_chain+0x88>
    9e6e:	89 8d       	ldd	r24, Y+25	; 0x19
    9e70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e72:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e74:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e76:	88 16       	cp	r8, r24
    9e78:	99 06       	cpc	r9, r25
    9e7a:	aa 06       	cpc	r10, r26
    9e7c:	bb 06       	cpc	r11, r27
    9e7e:	28 f1       	brcs	.+74     	; 0x9eca <create_chain+0x90>
    9e80:	20 c0       	rjmp	.+64     	; 0x9ec2 <create_chain+0x88>
    9e82:	ce 01       	movw	r24, r28
    9e84:	67 de       	rcall	.-818    	; 0x9b54 <get_fat.isra.7>
    9e86:	62 30       	cpi	r22, 0x02	; 2
    9e88:	71 05       	cpc	r23, r1
    9e8a:	81 05       	cpc	r24, r1
    9e8c:	91 05       	cpc	r25, r1
    9e8e:	08 f4       	brcc	.+2      	; 0x9e92 <create_chain+0x58>
    9e90:	95 c0       	rjmp	.+298    	; 0x9fbc <create_chain+0x182>
    9e92:	6f 3f       	cpi	r22, 0xFF	; 255
    9e94:	ff ef       	ldi	r31, 0xFF	; 255
    9e96:	7f 07       	cpc	r23, r31
    9e98:	8f 07       	cpc	r24, r31
    9e9a:	9f 07       	cpc	r25, r31
    9e9c:	29 f4       	brne	.+10     	; 0x9ea8 <create_chain+0x6e>
    9e9e:	4f ef       	ldi	r20, 0xFF	; 255
    9ea0:	3f ef       	ldi	r19, 0xFF	; 255
    9ea2:	2f ef       	ldi	r18, 0xFF	; 255
    9ea4:	9f ef       	ldi	r25, 0xFF	; 255
    9ea6:	92 c0       	rjmp	.+292    	; 0x9fcc <create_chain+0x192>
    9ea8:	c9 8c       	ldd	r12, Y+25	; 0x19
    9eaa:	da 8c       	ldd	r13, Y+26	; 0x1a
    9eac:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9eae:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9eb0:	6c 15       	cp	r22, r12
    9eb2:	7d 05       	cpc	r23, r13
    9eb4:	8e 05       	cpc	r24, r14
    9eb6:	9f 05       	cpc	r25, r15
    9eb8:	08 f4       	brcc	.+2      	; 0x9ebc <create_chain+0x82>
    9eba:	85 c0       	rjmp	.+266    	; 0x9fc6 <create_chain+0x18c>
    9ebc:	53 01       	movw	r10, r6
    9ebe:	42 01       	movw	r8, r4
    9ec0:	04 c0       	rjmp	.+8      	; 0x9eca <create_chain+0x90>
    9ec2:	81 2c       	mov	r8, r1
    9ec4:	91 2c       	mov	r9, r1
    9ec6:	54 01       	movw	r10, r8
    9ec8:	83 94       	inc	r8
    9eca:	75 01       	movw	r14, r10
    9ecc:	64 01       	movw	r12, r8
    9ece:	2f ef       	ldi	r18, 0xFF	; 255
    9ed0:	c2 1a       	sub	r12, r18
    9ed2:	d2 0a       	sbc	r13, r18
    9ed4:	e2 0a       	sbc	r14, r18
    9ed6:	f2 0a       	sbc	r15, r18
    9ed8:	89 8d       	ldd	r24, Y+25	; 0x19
    9eda:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9edc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ede:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ee0:	c8 16       	cp	r12, r24
    9ee2:	d9 06       	cpc	r13, r25
    9ee4:	ea 06       	cpc	r14, r26
    9ee6:	fb 06       	cpc	r15, r27
    9ee8:	68 f0       	brcs	.+26     	; 0x9f04 <create_chain+0xca>
    9eea:	82 e0       	ldi	r24, 0x02	; 2
    9eec:	88 16       	cp	r8, r24
    9eee:	91 04       	cpc	r9, r1
    9ef0:	a1 04       	cpc	r10, r1
    9ef2:	b1 04       	cpc	r11, r1
    9ef4:	10 f4       	brcc	.+4      	; 0x9efa <create_chain+0xc0>
    9ef6:	40 e0       	ldi	r20, 0x00	; 0
    9ef8:	62 c0       	rjmp	.+196    	; 0x9fbe <create_chain+0x184>
    9efa:	82 e0       	ldi	r24, 0x02	; 2
    9efc:	c8 2e       	mov	r12, r24
    9efe:	d1 2c       	mov	r13, r1
    9f00:	e1 2c       	mov	r14, r1
    9f02:	f1 2c       	mov	r15, r1
    9f04:	b7 01       	movw	r22, r14
    9f06:	a6 01       	movw	r20, r12
    9f08:	f8 01       	movw	r30, r16
    9f0a:	80 81       	ld	r24, Z
    9f0c:	91 81       	ldd	r25, Z+1	; 0x01
    9f0e:	22 de       	rcall	.-956    	; 0x9b54 <get_fat.isra.7>
    9f10:	61 15       	cp	r22, r1
    9f12:	71 05       	cpc	r23, r1
    9f14:	81 05       	cpc	r24, r1
    9f16:	91 05       	cpc	r25, r1
    9f18:	91 f0       	breq	.+36     	; 0x9f3e <create_chain+0x104>
    9f1a:	61 30       	cpi	r22, 0x01	; 1
    9f1c:	71 05       	cpc	r23, r1
    9f1e:	81 05       	cpc	r24, r1
    9f20:	91 05       	cpc	r25, r1
    9f22:	09 f4       	brne	.+2      	; 0x9f26 <create_chain+0xec>
    9f24:	4b c0       	rjmp	.+150    	; 0x9fbc <create_chain+0x182>
    9f26:	6f 3f       	cpi	r22, 0xFF	; 255
    9f28:	7f 4f       	sbci	r23, 0xFF	; 255
    9f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    9f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    9f2e:	09 f4       	brne	.+2      	; 0x9f32 <create_chain+0xf8>
    9f30:	b6 cf       	rjmp	.-148    	; 0x9e9e <create_chain+0x64>
    9f32:	c8 14       	cp	r12, r8
    9f34:	d9 04       	cpc	r13, r9
    9f36:	ea 04       	cpc	r14, r10
    9f38:	fb 04       	cpc	r15, r11
    9f3a:	49 f6       	brne	.-110    	; 0x9ece <create_chain+0x94>
    9f3c:	dc cf       	rjmp	.-72     	; 0x9ef6 <create_chain+0xbc>
    9f3e:	0f ef       	ldi	r16, 0xFF	; 255
    9f40:	1f ef       	ldi	r17, 0xFF	; 255
    9f42:	98 01       	movw	r18, r16
    9f44:	b7 01       	movw	r22, r14
    9f46:	a6 01       	movw	r20, r12
    9f48:	ce 01       	movw	r24, r28
    9f4a:	07 dd       	rcall	.-1522   	; 0x995a <put_fat>
    9f4c:	00 97       	sbiw	r24, 0x00	; 0
    9f4e:	99 f5       	brne	.+102    	; 0x9fb6 <create_chain+0x17c>
    9f50:	41 14       	cp	r4, r1
    9f52:	51 04       	cpc	r5, r1
    9f54:	61 04       	cpc	r6, r1
    9f56:	71 04       	cpc	r7, r1
    9f58:	e9 f4       	brne	.+58     	; 0x9f94 <create_chain+0x15a>
    9f5a:	cd 86       	std	Y+13, r12	; 0x0d
    9f5c:	de 86       	std	Y+14, r13	; 0x0e
    9f5e:	ef 86       	std	Y+15, r14	; 0x0f
    9f60:	f8 8a       	std	Y+16, r15	; 0x10
    9f62:	89 89       	ldd	r24, Y+17	; 0x11
    9f64:	9a 89       	ldd	r25, Y+18	; 0x12
    9f66:	ab 89       	ldd	r26, Y+19	; 0x13
    9f68:	bc 89       	ldd	r27, Y+20	; 0x14
    9f6a:	49 8d       	ldd	r20, Y+25	; 0x19
    9f6c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9f6e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9f70:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9f72:	42 50       	subi	r20, 0x02	; 2
    9f74:	51 09       	sbc	r21, r1
    9f76:	61 09       	sbc	r22, r1
    9f78:	71 09       	sbc	r23, r1
    9f7a:	84 17       	cp	r24, r20
    9f7c:	95 07       	cpc	r25, r21
    9f7e:	a6 07       	cpc	r26, r22
    9f80:	b7 07       	cpc	r27, r23
    9f82:	88 f4       	brcc	.+34     	; 0x9fa6 <create_chain+0x16c>
    9f84:	01 97       	sbiw	r24, 0x01	; 1
    9f86:	a1 09       	sbc	r26, r1
    9f88:	b1 09       	sbc	r27, r1
    9f8a:	89 8b       	std	Y+17, r24	; 0x11
    9f8c:	9a 8b       	std	Y+18, r25	; 0x12
    9f8e:	ab 8b       	std	Y+19, r26	; 0x13
    9f90:	bc 8b       	std	Y+20, r27	; 0x14
    9f92:	09 c0       	rjmp	.+18     	; 0x9fa6 <create_chain+0x16c>
    9f94:	97 01       	movw	r18, r14
    9f96:	86 01       	movw	r16, r12
    9f98:	b3 01       	movw	r22, r6
    9f9a:	a2 01       	movw	r20, r4
    9f9c:	ce 01       	movw	r24, r28
    9f9e:	dd dc       	rcall	.-1606   	; 0x995a <put_fat>
    9fa0:	00 97       	sbiw	r24, 0x00	; 0
    9fa2:	d9 f2       	breq	.-74     	; 0x9f5a <create_chain+0x120>
    9fa4:	08 c0       	rjmp	.+16     	; 0x9fb6 <create_chain+0x17c>
    9fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    9fa8:	81 60       	ori	r24, 0x01	; 1
    9faa:	8c 83       	std	Y+4, r24	; 0x04
    9fac:	4c 2d       	mov	r20, r12
    9fae:	3d 2d       	mov	r19, r13
    9fb0:	2e 2d       	mov	r18, r14
    9fb2:	9f 2d       	mov	r25, r15
    9fb4:	0b c0       	rjmp	.+22     	; 0x9fcc <create_chain+0x192>
    9fb6:	01 97       	sbiw	r24, 0x01	; 1
    9fb8:	09 f4       	brne	.+2      	; 0x9fbc <create_chain+0x182>
    9fba:	71 cf       	rjmp	.-286    	; 0x9e9e <create_chain+0x64>
    9fbc:	41 e0       	ldi	r20, 0x01	; 1
    9fbe:	30 e0       	ldi	r19, 0x00	; 0
    9fc0:	20 e0       	ldi	r18, 0x00	; 0
    9fc2:	90 e0       	ldi	r25, 0x00	; 0
    9fc4:	03 c0       	rjmp	.+6      	; 0x9fcc <create_chain+0x192>
    9fc6:	46 2f       	mov	r20, r22
    9fc8:	37 2f       	mov	r19, r23
    9fca:	28 2f       	mov	r18, r24
    9fcc:	64 2f       	mov	r22, r20
    9fce:	73 2f       	mov	r23, r19
    9fd0:	82 2f       	mov	r24, r18
    9fd2:	cd b7       	in	r28, 0x3d	; 61
    9fd4:	de b7       	in	r29, 0x3e	; 62
    9fd6:	e0 e1       	ldi	r30, 0x10	; 16
    9fd8:	0c 94 23 ed 	jmp	0x1da46	; 0x1da46 <__epilogue_restores__+0x4>

00009fdc <remove_chain>:
    9fdc:	4f 92       	push	r4
    9fde:	5f 92       	push	r5
    9fe0:	6f 92       	push	r6
    9fe2:	7f 92       	push	r7
    9fe4:	af 92       	push	r10
    9fe6:	bf 92       	push	r11
    9fe8:	cf 92       	push	r12
    9fea:	df 92       	push	r13
    9fec:	ef 92       	push	r14
    9fee:	ff 92       	push	r15
    9ff0:	0f 93       	push	r16
    9ff2:	1f 93       	push	r17
    9ff4:	cf 93       	push	r28
    9ff6:	df 93       	push	r29
    9ff8:	5c 01       	movw	r10, r24
    9ffa:	6a 01       	movw	r12, r20
    9ffc:	7b 01       	movw	r14, r22
    9ffe:	b9 01       	movw	r22, r18
    a000:	a8 01       	movw	r20, r16
    a002:	22 e0       	ldi	r18, 0x02	; 2
    a004:	c2 16       	cp	r12, r18
    a006:	d1 04       	cpc	r13, r1
    a008:	e1 04       	cpc	r14, r1
    a00a:	f1 04       	cpc	r15, r1
    a00c:	10 f4       	brcc	.+4      	; 0xa012 <remove_chain+0x36>
    a00e:	22 e0       	ldi	r18, 0x02	; 2
    a010:	27 c0       	rjmp	.+78     	; 0xa060 <remove_chain+0x84>
    a012:	fc 01       	movw	r30, r24
    a014:	c0 81       	ld	r28, Z
    a016:	d1 81       	ldd	r29, Z+1	; 0x01
    a018:	89 8d       	ldd	r24, Y+25	; 0x19
    a01a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a01c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a01e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a020:	c8 16       	cp	r12, r24
    a022:	d9 06       	cpc	r13, r25
    a024:	ea 06       	cpc	r14, r26
    a026:	fb 06       	cpc	r15, r27
    a028:	90 f7       	brcc	.-28     	; 0xa00e <remove_chain+0x32>
    a02a:	41 15       	cp	r20, r1
    a02c:	51 05       	cpc	r21, r1
    a02e:	61 05       	cpc	r22, r1
    a030:	71 05       	cpc	r23, r1
    a032:	41 f0       	breq	.+16     	; 0xa044 <remove_chain+0x68>
    a034:	0f ef       	ldi	r16, 0xFF	; 255
    a036:	1f ef       	ldi	r17, 0xFF	; 255
    a038:	98 01       	movw	r18, r16
    a03a:	ce 01       	movw	r24, r28
    a03c:	8e dc       	rcall	.-1764   	; 0x995a <put_fat>
    a03e:	00 97       	sbiw	r24, 0x00	; 0
    a040:	09 f0       	breq	.+2      	; 0xa044 <remove_chain+0x68>
    a042:	4c c0       	rjmp	.+152    	; 0xa0dc <remove_chain+0x100>
    a044:	b7 01       	movw	r22, r14
    a046:	a6 01       	movw	r20, r12
    a048:	f5 01       	movw	r30, r10
    a04a:	80 81       	ld	r24, Z
    a04c:	91 81       	ldd	r25, Z+1	; 0x01
    a04e:	82 dd       	rcall	.-1276   	; 0x9b54 <get_fat.isra.7>
    a050:	2b 01       	movw	r4, r22
    a052:	3c 01       	movw	r6, r24
    a054:	61 15       	cp	r22, r1
    a056:	71 05       	cpc	r23, r1
    a058:	81 05       	cpc	r24, r1
    a05a:	91 05       	cpc	r25, r1
    a05c:	19 f4       	brne	.+6      	; 0xa064 <remove_chain+0x88>
    a05e:	20 e0       	ldi	r18, 0x00	; 0
    a060:	90 e0       	ldi	r25, 0x00	; 0
    a062:	3d c0       	rjmp	.+122    	; 0xa0de <remove_chain+0x102>
    a064:	61 30       	cpi	r22, 0x01	; 1
    a066:	71 05       	cpc	r23, r1
    a068:	81 05       	cpc	r24, r1
    a06a:	91 05       	cpc	r25, r1
    a06c:	81 f2       	breq	.-96     	; 0xa00e <remove_chain+0x32>
    a06e:	6f 3f       	cpi	r22, 0xFF	; 255
    a070:	7f 4f       	sbci	r23, 0xFF	; 255
    a072:	8f 4f       	sbci	r24, 0xFF	; 255
    a074:	9f 4f       	sbci	r25, 0xFF	; 255
    a076:	81 f1       	breq	.+96     	; 0xa0d8 <remove_chain+0xfc>
    a078:	00 e0       	ldi	r16, 0x00	; 0
    a07a:	10 e0       	ldi	r17, 0x00	; 0
    a07c:	98 01       	movw	r18, r16
    a07e:	b7 01       	movw	r22, r14
    a080:	a6 01       	movw	r20, r12
    a082:	ce 01       	movw	r24, r28
    a084:	6a dc       	rcall	.-1836   	; 0x995a <put_fat>
    a086:	00 97       	sbiw	r24, 0x00	; 0
    a088:	49 f5       	brne	.+82     	; 0xa0dc <remove_chain+0x100>
    a08a:	89 89       	ldd	r24, Y+17	; 0x11
    a08c:	9a 89       	ldd	r25, Y+18	; 0x12
    a08e:	ab 89       	ldd	r26, Y+19	; 0x13
    a090:	bc 89       	ldd	r27, Y+20	; 0x14
    a092:	49 8d       	ldd	r20, Y+25	; 0x19
    a094:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a096:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a098:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a09a:	6a 01       	movw	r12, r20
    a09c:	7b 01       	movw	r14, r22
    a09e:	e2 e0       	ldi	r30, 0x02	; 2
    a0a0:	ce 1a       	sub	r12, r30
    a0a2:	d1 08       	sbc	r13, r1
    a0a4:	e1 08       	sbc	r14, r1
    a0a6:	f1 08       	sbc	r15, r1
    a0a8:	8c 15       	cp	r24, r12
    a0aa:	9d 05       	cpc	r25, r13
    a0ac:	ae 05       	cpc	r26, r14
    a0ae:	bf 05       	cpc	r27, r15
    a0b0:	50 f4       	brcc	.+20     	; 0xa0c6 <remove_chain+0xea>
    a0b2:	01 96       	adiw	r24, 0x01	; 1
    a0b4:	a1 1d       	adc	r26, r1
    a0b6:	b1 1d       	adc	r27, r1
    a0b8:	89 8b       	std	Y+17, r24	; 0x11
    a0ba:	9a 8b       	std	Y+18, r25	; 0x12
    a0bc:	ab 8b       	std	Y+19, r26	; 0x13
    a0be:	bc 8b       	std	Y+20, r27	; 0x14
    a0c0:	8c 81       	ldd	r24, Y+4	; 0x04
    a0c2:	81 60       	ori	r24, 0x01	; 1
    a0c4:	8c 83       	std	Y+4, r24	; 0x04
    a0c6:	73 01       	movw	r14, r6
    a0c8:	62 01       	movw	r12, r4
    a0ca:	44 16       	cp	r4, r20
    a0cc:	55 06       	cpc	r5, r21
    a0ce:	66 06       	cpc	r6, r22
    a0d0:	77 06       	cpc	r7, r23
    a0d2:	08 f4       	brcc	.+2      	; 0xa0d6 <remove_chain+0xfa>
    a0d4:	b7 cf       	rjmp	.-146    	; 0xa044 <remove_chain+0x68>
    a0d6:	c3 cf       	rjmp	.-122    	; 0xa05e <remove_chain+0x82>
    a0d8:	21 e0       	ldi	r18, 0x01	; 1
    a0da:	c2 cf       	rjmp	.-124    	; 0xa060 <remove_chain+0x84>
    a0dc:	28 2f       	mov	r18, r24
    a0de:	82 2f       	mov	r24, r18
    a0e0:	df 91       	pop	r29
    a0e2:	cf 91       	pop	r28
    a0e4:	1f 91       	pop	r17
    a0e6:	0f 91       	pop	r16
    a0e8:	ff 90       	pop	r15
    a0ea:	ef 90       	pop	r14
    a0ec:	df 90       	pop	r13
    a0ee:	cf 90       	pop	r12
    a0f0:	bf 90       	pop	r11
    a0f2:	af 90       	pop	r10
    a0f4:	7f 90       	pop	r7
    a0f6:	6f 90       	pop	r6
    a0f8:	5f 90       	pop	r5
    a0fa:	4f 90       	pop	r4
    a0fc:	08 95       	ret

0000a0fe <get_fileinfo>:
    a0fe:	a0 e0       	ldi	r26, 0x00	; 0
    a100:	b0 e0       	ldi	r27, 0x00	; 0
    a102:	e5 e8       	ldi	r30, 0x85	; 133
    a104:	f0 e5       	ldi	r31, 0x50	; 80
    a106:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
    a10a:	dc 01       	movw	r26, r24
    a10c:	cd 90       	ld	r12, X+
    a10e:	dc 90       	ld	r13, X
    a110:	11 97       	sbiw	r26, 0x01	; 1
    a112:	fb 01       	movw	r30, r22
    a114:	16 8a       	std	Z+22, r1	; 0x16
    a116:	56 96       	adiw	r26, 0x16	; 22
    a118:	0d 91       	ld	r16, X+
    a11a:	1d 91       	ld	r17, X+
    a11c:	2d 91       	ld	r18, X+
    a11e:	3c 91       	ld	r19, X
    a120:	59 97       	sbiw	r26, 0x19	; 25
    a122:	01 15       	cp	r16, r1
    a124:	11 05       	cpc	r17, r1
    a126:	21 05       	cpc	r18, r1
    a128:	31 05       	cpc	r19, r1
    a12a:	09 f4       	brne	.+2      	; 0xa12e <get_fileinfo+0x30>
    a12c:	bb c0       	rjmp	.+374    	; 0xa2a4 <get_fileinfo+0x1a6>
    a12e:	eb 01       	movw	r28, r22
    a130:	8c 01       	movw	r16, r24
    a132:	fc 01       	movw	r30, r24
    a134:	80 a5       	ldd	r24, Z+40	; 0x28
    a136:	91 a5       	ldd	r25, Z+41	; 0x29
    a138:	a2 a5       	ldd	r26, Z+42	; 0x2a
    a13a:	b3 a5       	ldd	r27, Z+43	; 0x2b
    a13c:	8f 3f       	cpi	r24, 0xFF	; 255
    a13e:	9f 4f       	sbci	r25, 0xFF	; 255
    a140:	af 4f       	sbci	r26, 0xFF	; 255
    a142:	bf 4f       	sbci	r27, 0xFF	; 255
    a144:	59 f1       	breq	.+86     	; 0xa19c <get_fileinfo+0x9e>
    a146:	5b 01       	movw	r10, r22
    a148:	26 e1       	ldi	r18, 0x16	; 22
    a14a:	a2 0e       	add	r10, r18
    a14c:	b1 1c       	adc	r11, r1
    a14e:	e1 2c       	mov	r14, r1
    a150:	f1 2c       	mov	r15, r1
    a152:	d6 01       	movw	r26, r12
    a154:	1b 96       	adiw	r26, 0x0b	; 11
    a156:	ed 91       	ld	r30, X+
    a158:	fc 91       	ld	r31, X
    a15a:	1c 97       	sbiw	r26, 0x0c	; 12
    a15c:	c7 01       	movw	r24, r14
    a15e:	88 0f       	add	r24, r24
    a160:	99 1f       	adc	r25, r25
    a162:	e8 0f       	add	r30, r24
    a164:	f9 1f       	adc	r31, r25
    a166:	80 81       	ld	r24, Z
    a168:	91 81       	ldd	r25, Z+1	; 0x01
    a16a:	00 97       	sbiw	r24, 0x00	; 0
    a16c:	99 f0       	breq	.+38     	; 0xa194 <get_fileinfo+0x96>
    a16e:	60 e0       	ldi	r22, 0x00	; 0
    a170:	70 e0       	ldi	r23, 0x00	; 0
    a172:	0e 94 58 6e 	call	0xdcb0	; 0xdcb0 <ff_convert>
    a176:	00 97       	sbiw	r24, 0x00	; 0
    a178:	59 f0       	breq	.+22     	; 0xa190 <get_fileinfo+0x92>
    a17a:	af ef       	ldi	r26, 0xFF	; 255
    a17c:	ea 16       	cp	r14, r26
    a17e:	f1 04       	cpc	r15, r1
    a180:	39 f0       	breq	.+14     	; 0xa190 <get_fileinfo+0x92>
    a182:	bf ef       	ldi	r27, 0xFF	; 255
    a184:	eb 1a       	sub	r14, r27
    a186:	fb 0a       	sbc	r15, r27
    a188:	f5 01       	movw	r30, r10
    a18a:	81 93       	st	Z+, r24
    a18c:	5f 01       	movw	r10, r30
    a18e:	e1 cf       	rjmp	.-62     	; 0xa152 <get_fileinfo+0x54>
    a190:	e1 2c       	mov	r14, r1
    a192:	f1 2c       	mov	r15, r1
    a194:	fe 01       	movw	r30, r28
    a196:	ee 0d       	add	r30, r14
    a198:	ff 1d       	adc	r31, r15
    a19a:	16 8a       	std	Z+22, r1	; 0x16
    a19c:	4e 89       	ldd	r20, Y+22	; 0x16
    a19e:	50 e0       	ldi	r21, 0x00	; 0
    a1a0:	20 e0       	ldi	r18, 0x00	; 0
    a1a2:	30 e0       	ldi	r19, 0x00	; 0
    a1a4:	80 e0       	ldi	r24, 0x00	; 0
    a1a6:	90 e0       	ldi	r25, 0x00	; 0
    a1a8:	6e e2       	ldi	r22, 0x2E	; 46
    a1aa:	d6 2e       	mov	r13, r22
    a1ac:	fc 01       	movw	r30, r24
    a1ae:	31 96       	adiw	r30, 0x01	; 1
    a1b0:	d8 01       	movw	r26, r16
    a1b2:	5a 96       	adiw	r26, 0x1a	; 26
    a1b4:	6d 91       	ld	r22, X+
    a1b6:	7c 91       	ld	r23, X
    a1b8:	5b 97       	sbiw	r26, 0x1b	; 27
    a1ba:	db 01       	movw	r26, r22
    a1bc:	a8 0f       	add	r26, r24
    a1be:	b9 1f       	adc	r27, r25
    a1c0:	8c 91       	ld	r24, X
    a1c2:	80 32       	cpi	r24, 0x20	; 32
    a1c4:	e1 f1       	breq	.+120    	; 0xa23e <get_fileinfo+0x140>
    a1c6:	85 30       	cpi	r24, 0x05	; 5
    a1c8:	09 f4       	brne	.+2      	; 0xa1cc <get_fileinfo+0xce>
    a1ca:	85 ee       	ldi	r24, 0xE5	; 229
    a1cc:	e9 30       	cpi	r30, 0x09	; 9
    a1ce:	f1 05       	cpc	r31, r1
    a1d0:	69 f4       	brne	.+26     	; 0xa1ec <get_fileinfo+0xee>
    a1d2:	de 01       	movw	r26, r28
    a1d4:	a2 0f       	add	r26, r18
    a1d6:	b3 1f       	adc	r27, r19
    a1d8:	41 15       	cp	r20, r1
    a1da:	51 05       	cpc	r21, r1
    a1dc:	19 f4       	brne	.+6      	; 0xa1e4 <get_fileinfo+0xe6>
    a1de:	56 96       	adiw	r26, 0x16	; 22
    a1e0:	dc 92       	st	X, r13
    a1e2:	56 97       	sbiw	r26, 0x16	; 22
    a1e4:	19 96       	adiw	r26, 0x09	; 9
    a1e6:	dc 92       	st	X, r13
    a1e8:	2f 5f       	subi	r18, 0xFF	; 255
    a1ea:	3f 4f       	sbci	r19, 0xFF	; 255
    a1ec:	7e 01       	movw	r14, r28
    a1ee:	e2 0e       	add	r14, r18
    a1f0:	f3 1e       	adc	r15, r19
    a1f2:	d7 01       	movw	r26, r14
    a1f4:	19 96       	adiw	r26, 0x09	; 9
    a1f6:	8c 93       	st	X, r24
    a1f8:	41 15       	cp	r20, r1
    a1fa:	51 05       	cpc	r21, r1
    a1fc:	f1 f4       	brne	.+60     	; 0xa23a <get_fileinfo+0x13c>
    a1fe:	9f eb       	ldi	r25, 0xBF	; 191
    a200:	98 0f       	add	r25, r24
    a202:	9a 31       	cpi	r25, 0x1A	; 26
    a204:	b8 f4       	brcc	.+46     	; 0xa234 <get_fileinfo+0x136>
    a206:	d8 01       	movw	r26, r16
    a208:	5a 96       	adiw	r26, 0x1a	; 26
    a20a:	6d 91       	ld	r22, X+
    a20c:	7c 91       	ld	r23, X
    a20e:	5b 97       	sbiw	r26, 0x1b	; 27
    a210:	db 01       	movw	r26, r22
    a212:	1c 96       	adiw	r26, 0x0c	; 12
    a214:	6c 91       	ld	r22, X
    a216:	a6 2f       	mov	r26, r22
    a218:	b0 e0       	ldi	r27, 0x00	; 0
    a21a:	e9 30       	cpi	r30, 0x09	; 9
    a21c:	f1 05       	cpc	r31, r1
    a21e:	18 f4       	brcc	.+6      	; 0xa226 <get_fileinfo+0x128>
    a220:	68 e0       	ldi	r22, 0x08	; 8
    a222:	70 e0       	ldi	r23, 0x00	; 0
    a224:	02 c0       	rjmp	.+4      	; 0xa22a <get_fileinfo+0x12c>
    a226:	60 e1       	ldi	r22, 0x10	; 16
    a228:	70 e0       	ldi	r23, 0x00	; 0
    a22a:	6a 23       	and	r22, r26
    a22c:	7b 23       	and	r23, r27
    a22e:	67 2b       	or	r22, r23
    a230:	09 f0       	breq	.+2      	; 0xa234 <get_fileinfo+0x136>
    a232:	80 5e       	subi	r24, 0xE0	; 224
    a234:	d7 01       	movw	r26, r14
    a236:	56 96       	adiw	r26, 0x16	; 22
    a238:	8c 93       	st	X, r24
    a23a:	2f 5f       	subi	r18, 0xFF	; 255
    a23c:	3f 4f       	sbci	r19, 0xFF	; 255
    a23e:	cf 01       	movw	r24, r30
    a240:	3b 97       	sbiw	r30, 0x0b	; 11
    a242:	09 f0       	breq	.+2      	; 0xa246 <get_fileinfo+0x148>
    a244:	b3 cf       	rjmp	.-154    	; 0xa1ac <get_fileinfo+0xae>
    a246:	45 2b       	or	r20, r21
    a248:	71 f4       	brne	.+28     	; 0xa266 <get_fileinfo+0x168>
    a24a:	fe 01       	movw	r30, r28
    a24c:	e2 0f       	add	r30, r18
    a24e:	f3 1f       	adc	r31, r19
    a250:	16 8a       	std	Z+22, r1	; 0x16
    a252:	d8 01       	movw	r26, r16
    a254:	5a 96       	adiw	r26, 0x1a	; 26
    a256:	ed 91       	ld	r30, X+
    a258:	fc 91       	ld	r31, X
    a25a:	5b 97       	sbiw	r26, 0x1b	; 27
    a25c:	84 85       	ldd	r24, Z+12	; 0x0c
    a25e:	81 11       	cpse	r24, r1
    a260:	02 c0       	rjmp	.+4      	; 0xa266 <get_fileinfo+0x168>
    a262:	20 e0       	ldi	r18, 0x00	; 0
    a264:	30 e0       	ldi	r19, 0x00	; 0
    a266:	fe 01       	movw	r30, r28
    a268:	e2 0f       	add	r30, r18
    a26a:	f3 1f       	adc	r31, r19
    a26c:	11 86       	std	Z+9, r1	; 0x09
    a26e:	d8 01       	movw	r26, r16
    a270:	5a 96       	adiw	r26, 0x1a	; 26
    a272:	ed 91       	ld	r30, X+
    a274:	fc 91       	ld	r31, X
    a276:	5b 97       	sbiw	r26, 0x1b	; 27
    a278:	83 85       	ldd	r24, Z+11	; 0x0b
    a27a:	88 87       	std	Y+8, r24	; 0x08
    a27c:	5a 96       	adiw	r26, 0x1a	; 26
    a27e:	0d 91       	ld	r16, X+
    a280:	1c 91       	ld	r17, X
    a282:	5b 97       	sbiw	r26, 0x1b	; 27
    a284:	c8 01       	movw	r24, r16
    a286:	4c 96       	adiw	r24, 0x1c	; 28
    a288:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <ld_dword>
    a28c:	68 83       	st	Y, r22
    a28e:	79 83       	std	Y+1, r23	; 0x01
    a290:	8a 83       	std	Y+2, r24	; 0x02
    a292:	9b 83       	std	Y+3, r25	; 0x03
    a294:	c8 01       	movw	r24, r16
    a296:	46 96       	adiw	r24, 0x16	; 22
    a298:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <ld_dword>
    a29c:	7f 83       	std	Y+7, r23	; 0x07
    a29e:	6e 83       	std	Y+6, r22	; 0x06
    a2a0:	9d 83       	std	Y+5, r25	; 0x05
    a2a2:	8c 83       	std	Y+4, r24	; 0x04
    a2a4:	cd b7       	in	r28, 0x3d	; 61
    a2a6:	de b7       	in	r29, 0x3e	; 62
    a2a8:	ea e0       	ldi	r30, 0x0A	; 10
    a2aa:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0000a2ae <dir_next>:
    a2ae:	4f 92       	push	r4
    a2b0:	5f 92       	push	r5
    a2b2:	6f 92       	push	r6
    a2b4:	7f 92       	push	r7
    a2b6:	9f 92       	push	r9
    a2b8:	af 92       	push	r10
    a2ba:	bf 92       	push	r11
    a2bc:	cf 92       	push	r12
    a2be:	df 92       	push	r13
    a2c0:	ef 92       	push	r14
    a2c2:	ff 92       	push	r15
    a2c4:	0f 93       	push	r16
    a2c6:	1f 93       	push	r17
    a2c8:	cf 93       	push	r28
    a2ca:	df 93       	push	r29
    a2cc:	5b 01       	movw	r10, r22
    a2ce:	fc 01       	movw	r30, r24
    a2d0:	46 89       	ldd	r20, Z+22	; 0x16
    a2d2:	57 89       	ldd	r21, Z+23	; 0x17
    a2d4:	60 8d       	ldd	r22, Z+24	; 0x18
    a2d6:	71 8d       	ldd	r23, Z+25	; 0x19
    a2d8:	41 15       	cp	r20, r1
    a2da:	51 05       	cpc	r21, r1
    a2dc:	61 05       	cpc	r22, r1
    a2de:	71 05       	cpc	r23, r1
    a2e0:	09 f4       	brne	.+2      	; 0xa2e4 <dir_next+0x36>
    a2e2:	f8 c0       	rjmp	.+496    	; 0xa4d4 <dir_next+0x226>
    a2e4:	c6 84       	ldd	r12, Z+14	; 0x0e
    a2e6:	d7 84       	ldd	r13, Z+15	; 0x0f
    a2e8:	e0 88       	ldd	r14, Z+16	; 0x10
    a2ea:	f1 88       	ldd	r15, Z+17	; 0x11
    a2ec:	f0 e2       	ldi	r31, 0x20	; 32
    a2ee:	cf 0e       	add	r12, r31
    a2f0:	d1 1c       	adc	r13, r1
    a2f2:	e1 1c       	adc	r14, r1
    a2f4:	f1 1c       	adc	r15, r1
    a2f6:	c1 14       	cp	r12, r1
    a2f8:	d1 04       	cpc	r13, r1
    a2fa:	20 e2       	ldi	r18, 0x20	; 32
    a2fc:	e2 06       	cpc	r14, r18
    a2fe:	f1 04       	cpc	r15, r1
    a300:	08 f0       	brcs	.+2      	; 0xa304 <dir_next+0x56>
    a302:	e8 c0       	rjmp	.+464    	; 0xa4d4 <dir_next+0x226>
    a304:	8c 01       	movw	r16, r24
    a306:	fc 01       	movw	r30, r24
    a308:	c0 81       	ld	r28, Z
    a30a:	d1 81       	ldd	r29, Z+1	; 0x01
    a30c:	d7 01       	movw	r26, r14
    a30e:	c6 01       	movw	r24, r12
    a310:	91 70       	andi	r25, 0x01	; 1
    a312:	aa 27       	eor	r26, r26
    a314:	bb 27       	eor	r27, r27
    a316:	89 2b       	or	r24, r25
    a318:	8a 2b       	or	r24, r26
    a31a:	8b 2b       	or	r24, r27
    a31c:	09 f0       	breq	.+2      	; 0xa320 <dir_next+0x72>
    a31e:	ca c0       	rjmp	.+404    	; 0xa4b4 <dir_next+0x206>
    a320:	4f 5f       	subi	r20, 0xFF	; 255
    a322:	5f 4f       	sbci	r21, 0xFF	; 255
    a324:	6f 4f       	sbci	r22, 0xFF	; 255
    a326:	7f 4f       	sbci	r23, 0xFF	; 255
    a328:	46 8b       	std	Z+22, r20	; 0x16
    a32a:	57 8b       	std	Z+23, r21	; 0x17
    a32c:	60 8f       	std	Z+24, r22	; 0x18
    a32e:	71 8f       	std	Z+25, r23	; 0x19
    a330:	42 89       	ldd	r20, Z+18	; 0x12
    a332:	53 89       	ldd	r21, Z+19	; 0x13
    a334:	64 89       	ldd	r22, Z+20	; 0x14
    a336:	75 89       	ldd	r23, Z+21	; 0x15
    a338:	41 15       	cp	r20, r1
    a33a:	51 05       	cpc	r21, r1
    a33c:	61 05       	cpc	r22, r1
    a33e:	71 05       	cpc	r23, r1
    a340:	c9 f4       	brne	.+50     	; 0xa374 <dir_next+0xc6>
    a342:	8f 81       	ldd	r24, Y+7	; 0x07
    a344:	98 85       	ldd	r25, Y+8	; 0x08
    a346:	a0 e0       	ldi	r26, 0x00	; 0
    a348:	b0 e0       	ldi	r27, 0x00	; 0
    a34a:	b7 01       	movw	r22, r14
    a34c:	a6 01       	movw	r20, r12
    a34e:	35 e0       	ldi	r19, 0x05	; 5
    a350:	76 95       	lsr	r23
    a352:	67 95       	ror	r22
    a354:	57 95       	ror	r21
    a356:	47 95       	ror	r20
    a358:	3a 95       	dec	r19
    a35a:	d1 f7       	brne	.-12     	; 0xa350 <dir_next+0xa2>
    a35c:	48 17       	cp	r20, r24
    a35e:	59 07       	cpc	r21, r25
    a360:	6a 07       	cpc	r22, r26
    a362:	7b 07       	cpc	r23, r27
    a364:	08 f4       	brcc	.+2      	; 0xa368 <dir_next+0xba>
    a366:	a6 c0       	rjmp	.+332    	; 0xa4b4 <dir_next+0x206>
    a368:	f8 01       	movw	r30, r16
    a36a:	16 8a       	std	Z+22, r1	; 0x16
    a36c:	17 8a       	std	Z+23, r1	; 0x17
    a36e:	10 8e       	std	Z+24, r1	; 0x18
    a370:	11 8e       	std	Z+25, r1	; 0x19
    a372:	b0 c0       	rjmp	.+352    	; 0xa4d4 <dir_next+0x226>
    a374:	89 85       	ldd	r24, Y+9	; 0x09
    a376:	9a 85       	ldd	r25, Y+10	; 0x0a
    a378:	01 97       	sbiw	r24, 0x01	; 1
    a37a:	a0 e0       	ldi	r26, 0x00	; 0
    a37c:	b0 e0       	ldi	r27, 0x00	; 0
    a37e:	26 01       	movw	r4, r12
    a380:	37 01       	movw	r6, r14
    a382:	29 e0       	ldi	r18, 0x09	; 9
    a384:	76 94       	lsr	r7
    a386:	67 94       	ror	r6
    a388:	57 94       	ror	r5
    a38a:	47 94       	ror	r4
    a38c:	2a 95       	dec	r18
    a38e:	d1 f7       	brne	.-12     	; 0xa384 <dir_next+0xd6>
    a390:	84 21       	and	r24, r4
    a392:	95 21       	and	r25, r5
    a394:	a6 21       	and	r26, r6
    a396:	b7 21       	and	r27, r7
    a398:	89 2b       	or	r24, r25
    a39a:	8a 2b       	or	r24, r26
    a39c:	8b 2b       	or	r24, r27
    a39e:	09 f0       	breq	.+2      	; 0xa3a2 <dir_next+0xf4>
    a3a0:	89 c0       	rjmp	.+274    	; 0xa4b4 <dir_next+0x206>
    a3a2:	ce 01       	movw	r24, r28
    a3a4:	d7 db       	rcall	.-2130   	; 0x9b54 <get_fat.isra.7>
    a3a6:	2b 01       	movw	r4, r22
    a3a8:	3c 01       	movw	r6, r24
    a3aa:	62 30       	cpi	r22, 0x02	; 2
    a3ac:	71 05       	cpc	r23, r1
    a3ae:	81 05       	cpc	r24, r1
    a3b0:	91 05       	cpc	r25, r1
    a3b2:	18 f4       	brcc	.+6      	; 0xa3ba <dir_next+0x10c>
    a3b4:	82 e0       	ldi	r24, 0x02	; 2
    a3b6:	90 e0       	ldi	r25, 0x00	; 0
    a3b8:	92 c0       	rjmp	.+292    	; 0xa4de <dir_next+0x230>
    a3ba:	6f 3f       	cpi	r22, 0xFF	; 255
    a3bc:	7f 4f       	sbci	r23, 0xFF	; 255
    a3be:	8f 4f       	sbci	r24, 0xFF	; 255
    a3c0:	9f 4f       	sbci	r25, 0xFF	; 255
    a3c2:	19 f4       	brne	.+6      	; 0xa3ca <dir_next+0x11c>
    a3c4:	81 e0       	ldi	r24, 0x01	; 1
    a3c6:	90 e0       	ldi	r25, 0x00	; 0
    a3c8:	8a c0       	rjmp	.+276    	; 0xa4de <dir_next+0x230>
    a3ca:	89 8d       	ldd	r24, Y+25	; 0x19
    a3cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3ce:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3d0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3d2:	48 16       	cp	r4, r24
    a3d4:	59 06       	cpc	r5, r25
    a3d6:	6a 06       	cpc	r6, r26
    a3d8:	7b 06       	cpc	r7, r27
    a3da:	08 f4       	brcc	.+2      	; 0xa3de <dir_next+0x130>
    a3dc:	5c c0       	rjmp	.+184    	; 0xa496 <dir_next+0x1e8>
    a3de:	ab 28       	or	r10, r11
    a3e0:	19 f2       	breq	.-122    	; 0xa368 <dir_next+0xba>
    a3e2:	f8 01       	movw	r30, r16
    a3e4:	42 89       	ldd	r20, Z+18	; 0x12
    a3e6:	53 89       	ldd	r21, Z+19	; 0x13
    a3e8:	64 89       	ldd	r22, Z+20	; 0x14
    a3ea:	75 89       	ldd	r23, Z+21	; 0x15
    a3ec:	c8 01       	movw	r24, r16
    a3ee:	25 dd       	rcall	.-1462   	; 0x9e3a <create_chain>
    a3f0:	2b 01       	movw	r4, r22
    a3f2:	3c 01       	movw	r6, r24
    a3f4:	61 15       	cp	r22, r1
    a3f6:	71 05       	cpc	r23, r1
    a3f8:	81 05       	cpc	r24, r1
    a3fa:	91 05       	cpc	r25, r1
    a3fc:	09 f4       	brne	.+2      	; 0xa400 <dir_next+0x152>
    a3fe:	6d c0       	rjmp	.+218    	; 0xa4da <dir_next+0x22c>
    a400:	61 30       	cpi	r22, 0x01	; 1
    a402:	71 05       	cpc	r23, r1
    a404:	81 05       	cpc	r24, r1
    a406:	91 05       	cpc	r25, r1
    a408:	a9 f2       	breq	.-86     	; 0xa3b4 <dir_next+0x106>
    a40a:	6f 3f       	cpi	r22, 0xFF	; 255
    a40c:	7f 4f       	sbci	r23, 0xFF	; 255
    a40e:	8f 4f       	sbci	r24, 0xFF	; 255
    a410:	9f 4f       	sbci	r25, 0xFF	; 255
    a412:	c1 f2       	breq	.-80     	; 0xa3c4 <dir_next+0x116>
    a414:	ce 01       	movw	r24, r28
    a416:	0e 94 0f 49 	call	0x921e	; 0x921e <sync_window>
    a41a:	89 2b       	or	r24, r25
    a41c:	99 f6       	brne	.-90     	; 0xa3c4 <dir_next+0x116>
    a41e:	40 e0       	ldi	r20, 0x00	; 0
    a420:	52 e0       	ldi	r21, 0x02	; 2
    a422:	60 e0       	ldi	r22, 0x00	; 0
    a424:	70 e0       	ldi	r23, 0x00	; 0
    a426:	ce 01       	movw	r24, r28
    a428:	c5 96       	adiw	r24, 0x35	; 53
    a42a:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    a42e:	b3 01       	movw	r22, r6
    a430:	a2 01       	movw	r20, r4
    a432:	ce 01       	movw	r24, r28
    a434:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    a438:	69 ab       	std	Y+49, r22	; 0x31
    a43a:	7a ab       	std	Y+50, r23	; 0x32
    a43c:	8b ab       	std	Y+51, r24	; 0x33
    a43e:	9c ab       	std	Y+52, r25	; 0x34
    a440:	a1 2c       	mov	r10, r1
    a442:	b1 2c       	mov	r11, r1
    a444:	99 24       	eor	r9, r9
    a446:	93 94       	inc	r9
    a448:	89 85       	ldd	r24, Y+9	; 0x09
    a44a:	9a 85       	ldd	r25, Y+10	; 0x0a
    a44c:	a8 16       	cp	r10, r24
    a44e:	b9 06       	cpc	r11, r25
    a450:	b0 f4       	brcc	.+44     	; 0xa47e <dir_next+0x1d0>
    a452:	9b 82       	std	Y+3, r9	; 0x03
    a454:	ce 01       	movw	r24, r28
    a456:	0e 94 be 48 	call	0x917c	; 0x917c <sync_window.part.3>
    a45a:	89 2b       	or	r24, r25
    a45c:	09 f0       	breq	.+2      	; 0xa460 <dir_next+0x1b2>
    a45e:	b2 cf       	rjmp	.-156    	; 0xa3c4 <dir_next+0x116>
    a460:	8f ef       	ldi	r24, 0xFF	; 255
    a462:	a8 1a       	sub	r10, r24
    a464:	b8 0a       	sbc	r11, r24
    a466:	89 a9       	ldd	r24, Y+49	; 0x31
    a468:	9a a9       	ldd	r25, Y+50	; 0x32
    a46a:	ab a9       	ldd	r26, Y+51	; 0x33
    a46c:	bc a9       	ldd	r27, Y+52	; 0x34
    a46e:	01 96       	adiw	r24, 0x01	; 1
    a470:	a1 1d       	adc	r26, r1
    a472:	b1 1d       	adc	r27, r1
    a474:	89 ab       	std	Y+49, r24	; 0x31
    a476:	9a ab       	std	Y+50, r25	; 0x32
    a478:	ab ab       	std	Y+51, r26	; 0x33
    a47a:	bc ab       	std	Y+52, r27	; 0x34
    a47c:	e5 cf       	rjmp	.-54     	; 0xa448 <dir_next+0x19a>
    a47e:	89 a9       	ldd	r24, Y+49	; 0x31
    a480:	9a a9       	ldd	r25, Y+50	; 0x32
    a482:	ab a9       	ldd	r26, Y+51	; 0x33
    a484:	bc a9       	ldd	r27, Y+52	; 0x34
    a486:	8a 19       	sub	r24, r10
    a488:	9b 09       	sbc	r25, r11
    a48a:	a1 09       	sbc	r26, r1
    a48c:	b1 09       	sbc	r27, r1
    a48e:	89 ab       	std	Y+49, r24	; 0x31
    a490:	9a ab       	std	Y+50, r25	; 0x32
    a492:	ab ab       	std	Y+51, r26	; 0x33
    a494:	bc ab       	std	Y+52, r27	; 0x34
    a496:	f8 01       	movw	r30, r16
    a498:	42 8a       	std	Z+18, r4	; 0x12
    a49a:	53 8a       	std	Z+19, r5	; 0x13
    a49c:	64 8a       	std	Z+20, r6	; 0x14
    a49e:	75 8a       	std	Z+21, r7	; 0x15
    a4a0:	b3 01       	movw	r22, r6
    a4a2:	a2 01       	movw	r20, r4
    a4a4:	ce 01       	movw	r24, r28
    a4a6:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    a4aa:	f8 01       	movw	r30, r16
    a4ac:	66 8b       	std	Z+22, r22	; 0x16
    a4ae:	77 8b       	std	Z+23, r23	; 0x17
    a4b0:	80 8f       	std	Z+24, r24	; 0x18
    a4b2:	91 8f       	std	Z+25, r25	; 0x19
    a4b4:	f8 01       	movw	r30, r16
    a4b6:	c6 86       	std	Z+14, r12	; 0x0e
    a4b8:	d7 86       	std	Z+15, r13	; 0x0f
    a4ba:	e0 8a       	std	Z+16, r14	; 0x10
    a4bc:	f1 8a       	std	Z+17, r15	; 0x11
    a4be:	ce 01       	movw	r24, r28
    a4c0:	c5 96       	adiw	r24, 0x35	; 53
    a4c2:	e6 01       	movw	r28, r12
    a4c4:	d1 70       	andi	r29, 0x01	; 1
    a4c6:	c8 0f       	add	r28, r24
    a4c8:	d9 1f       	adc	r29, r25
    a4ca:	d3 8f       	std	Z+27, r29	; 0x1b
    a4cc:	c2 8f       	std	Z+26, r28	; 0x1a
    a4ce:	80 e0       	ldi	r24, 0x00	; 0
    a4d0:	90 e0       	ldi	r25, 0x00	; 0
    a4d2:	05 c0       	rjmp	.+10     	; 0xa4de <dir_next+0x230>
    a4d4:	84 e0       	ldi	r24, 0x04	; 4
    a4d6:	90 e0       	ldi	r25, 0x00	; 0
    a4d8:	02 c0       	rjmp	.+4      	; 0xa4de <dir_next+0x230>
    a4da:	87 e0       	ldi	r24, 0x07	; 7
    a4dc:	90 e0       	ldi	r25, 0x00	; 0
    a4de:	df 91       	pop	r29
    a4e0:	cf 91       	pop	r28
    a4e2:	1f 91       	pop	r17
    a4e4:	0f 91       	pop	r16
    a4e6:	ff 90       	pop	r15
    a4e8:	ef 90       	pop	r14
    a4ea:	df 90       	pop	r13
    a4ec:	cf 90       	pop	r12
    a4ee:	bf 90       	pop	r11
    a4f0:	af 90       	pop	r10
    a4f2:	9f 90       	pop	r9
    a4f4:	7f 90       	pop	r7
    a4f6:	6f 90       	pop	r6
    a4f8:	5f 90       	pop	r5
    a4fa:	4f 90       	pop	r4
    a4fc:	08 95       	ret

0000a4fe <dir_alloc>:
    a4fe:	a0 e0       	ldi	r26, 0x00	; 0
    a500:	b0 e0       	ldi	r27, 0x00	; 0
    a502:	e5 e8       	ldi	r30, 0x85	; 133
    a504:	f2 e5       	ldi	r31, 0x52	; 82
    a506:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    a50a:	ec 01       	movw	r28, r24
    a50c:	6b 01       	movw	r12, r22
    a50e:	e8 80       	ld	r14, Y
    a510:	f9 80       	ldd	r15, Y+1	; 0x01
    a512:	40 e0       	ldi	r20, 0x00	; 0
    a514:	50 e0       	ldi	r21, 0x00	; 0
    a516:	ba 01       	movw	r22, r20
    a518:	d0 db       	rcall	.-2144   	; 0x9cba <dir_sdi>
    a51a:	00 97       	sbiw	r24, 0x00	; 0
    a51c:	01 f5       	brne	.+64     	; 0xa55e <dir_alloc+0x60>
    a51e:	00 e0       	ldi	r16, 0x00	; 0
    a520:	10 e0       	ldi	r17, 0x00	; 0
    a522:	4e 89       	ldd	r20, Y+22	; 0x16
    a524:	5f 89       	ldd	r21, Y+23	; 0x17
    a526:	68 8d       	ldd	r22, Y+24	; 0x18
    a528:	79 8d       	ldd	r23, Y+25	; 0x19
    a52a:	c7 01       	movw	r24, r14
    a52c:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    a530:	00 97       	sbiw	r24, 0x00	; 0
    a532:	a9 f4       	brne	.+42     	; 0xa55e <dir_alloc+0x60>
    a534:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a536:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a538:	20 81       	ld	r18, Z
    a53a:	25 3e       	cpi	r18, 0xE5	; 229
    a53c:	11 f0       	breq	.+4      	; 0xa542 <dir_alloc+0x44>
    a53e:	21 11       	cpse	r18, r1
    a540:	06 c0       	rjmp	.+12     	; 0xa54e <dir_alloc+0x50>
    a542:	0f 5f       	subi	r16, 0xFF	; 255
    a544:	1f 4f       	sbci	r17, 0xFF	; 255
    a546:	0c 15       	cp	r16, r12
    a548:	1d 05       	cpc	r17, r13
    a54a:	19 f4       	brne	.+6      	; 0xa552 <dir_alloc+0x54>
    a54c:	0d c0       	rjmp	.+26     	; 0xa568 <dir_alloc+0x6a>
    a54e:	00 e0       	ldi	r16, 0x00	; 0
    a550:	10 e0       	ldi	r17, 0x00	; 0
    a552:	61 e0       	ldi	r22, 0x01	; 1
    a554:	70 e0       	ldi	r23, 0x00	; 0
    a556:	ce 01       	movw	r24, r28
    a558:	aa de       	rcall	.-684    	; 0xa2ae <dir_next>
    a55a:	00 97       	sbiw	r24, 0x00	; 0
    a55c:	11 f3       	breq	.-60     	; 0xa522 <dir_alloc+0x24>
    a55e:	84 30       	cpi	r24, 0x04	; 4
    a560:	91 05       	cpc	r25, r1
    a562:	11 f4       	brne	.+4      	; 0xa568 <dir_alloc+0x6a>
    a564:	87 e0       	ldi	r24, 0x07	; 7
    a566:	90 e0       	ldi	r25, 0x00	; 0
    a568:	cd b7       	in	r28, 0x3d	; 61
    a56a:	de b7       	in	r29, 0x3e	; 62
    a56c:	e8 e0       	ldi	r30, 0x08	; 8
    a56e:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000a572 <dir_read>:
    a572:	a0 e0       	ldi	r26, 0x00	; 0
    a574:	b0 e0       	ldi	r27, 0x00	; 0
    a576:	ef eb       	ldi	r30, 0xBF	; 191
    a578:	f2 e5       	ldi	r31, 0x52	; 82
    a57a:	0c 94 09 ed 	jmp	0x1da12	; 0x1da12 <__prologue_saves__+0x8>
    a57e:	ec 01       	movw	r28, r24
    a580:	7b 01       	movw	r14, r22
    a582:	a8 80       	ld	r10, Y
    a584:	b9 80       	ldd	r11, Y+1	; 0x01
    a586:	dd 24       	eor	r13, r13
    a588:	da 94       	dec	r13
    a58a:	1f ef       	ldi	r17, 0xFF	; 255
    a58c:	84 e0       	ldi	r24, 0x04	; 4
    a58e:	90 e0       	ldi	r25, 0x00	; 0
    a590:	ad e0       	ldi	r26, 0x0D	; 13
    a592:	ca 2e       	mov	r12, r26
    a594:	4e 89       	ldd	r20, Y+22	; 0x16
    a596:	5f 89       	ldd	r21, Y+23	; 0x17
    a598:	68 8d       	ldd	r22, Y+24	; 0x18
    a59a:	79 8d       	ldd	r23, Y+25	; 0x19
    a59c:	41 15       	cp	r20, r1
    a59e:	51 05       	cpc	r21, r1
    a5a0:	61 05       	cpc	r22, r1
    a5a2:	71 05       	cpc	r23, r1
    a5a4:	09 f4       	brne	.+2      	; 0xa5a8 <dir_read+0x36>
    a5a6:	9f c0       	rjmp	.+318    	; 0xa6e6 <dir_read+0x174>
    a5a8:	c5 01       	movw	r24, r10
    a5aa:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    a5ae:	00 97       	sbiw	r24, 0x00	; 0
    a5b0:	09 f0       	breq	.+2      	; 0xa5b4 <dir_read+0x42>
    a5b2:	9b c0       	rjmp	.+310    	; 0xa6ea <dir_read+0x178>
    a5b4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a5b6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a5b8:	0c 91       	ld	r16, X
    a5ba:	00 23       	and	r16, r16
    a5bc:	09 f4       	brne	.+2      	; 0xa5c0 <dir_read+0x4e>
    a5be:	9d c0       	rjmp	.+314    	; 0xa6fa <dir_read+0x188>
    a5c0:	1b 96       	adiw	r26, 0x0b	; 11
    a5c2:	8c 91       	ld	r24, X
    a5c4:	1b 97       	sbiw	r26, 0x0b	; 11
    a5c6:	8f 73       	andi	r24, 0x3F	; 63
    a5c8:	8c 83       	std	Y+4, r24	; 0x04
    a5ca:	05 3e       	cpi	r16, 0xE5	; 229
    a5cc:	09 f4       	brne	.+2      	; 0xa5d0 <dir_read+0x5e>
    a5ce:	82 c0       	rjmp	.+260    	; 0xa6d4 <dir_read+0x162>
    a5d0:	0e 32       	cpi	r16, 0x2E	; 46
    a5d2:	09 f4       	brne	.+2      	; 0xa5d6 <dir_read+0x64>
    a5d4:	7f c0       	rjmp	.+254    	; 0xa6d4 <dir_read+0x162>
    a5d6:	21 e0       	ldi	r18, 0x01	; 1
    a5d8:	30 e0       	ldi	r19, 0x00	; 0
    a5da:	98 2f       	mov	r25, r24
    a5dc:	9f 71       	andi	r25, 0x1F	; 31
    a5de:	98 30       	cpi	r25, 0x08	; 8
    a5e0:	11 f0       	breq	.+4      	; 0xa5e6 <dir_read+0x74>
    a5e2:	20 e0       	ldi	r18, 0x00	; 0
    a5e4:	30 e0       	ldi	r19, 0x00	; 0
    a5e6:	2e 15       	cp	r18, r14
    a5e8:	3f 05       	cpc	r19, r15
    a5ea:	09 f0       	breq	.+2      	; 0xa5ee <dir_read+0x7c>
    a5ec:	73 c0       	rjmp	.+230    	; 0xa6d4 <dir_read+0x162>
    a5ee:	8f 30       	cpi	r24, 0x0F	; 15
    a5f0:	09 f0       	breq	.+2      	; 0xa5f4 <dir_read+0x82>
    a5f2:	60 c0       	rjmp	.+192    	; 0xa6b4 <dir_read+0x142>
    a5f4:	06 ff       	sbrs	r16, 6
    a5f6:	0d c0       	rjmp	.+26     	; 0xa612 <dir_read+0xa0>
    a5f8:	1d 96       	adiw	r26, 0x0d	; 13
    a5fa:	8c 91       	ld	r24, X
    a5fc:	1d 97       	sbiw	r26, 0x0d	; 13
    a5fe:	0f 7b       	andi	r16, 0xBF	; 191
    a600:	4e 85       	ldd	r20, Y+14	; 0x0e
    a602:	5f 85       	ldd	r21, Y+15	; 0x0f
    a604:	68 89       	ldd	r22, Y+16	; 0x10
    a606:	79 89       	ldd	r23, Y+17	; 0x11
    a608:	48 a7       	std	Y+40, r20	; 0x28
    a60a:	59 a7       	std	Y+41, r21	; 0x29
    a60c:	6a a7       	std	Y+42, r22	; 0x2a
    a60e:	7b a7       	std	Y+43, r23	; 0x2b
    a610:	03 c0       	rjmp	.+6      	; 0xa618 <dir_read+0xa6>
    a612:	10 13       	cpse	r17, r16
    a614:	5f c0       	rjmp	.+190    	; 0xa6d4 <dir_read+0x162>
    a616:	8d 2d       	mov	r24, r13
    a618:	1d 96       	adiw	r26, 0x0d	; 13
    a61a:	dc 90       	ld	r13, X
    a61c:	1d 97       	sbiw	r26, 0x0d	; 13
    a61e:	d8 12       	cpse	r13, r24
    a620:	58 c0       	rjmp	.+176    	; 0xa6d2 <dir_read+0x160>
    a622:	5a 96       	adiw	r26, 0x1a	; 26
    a624:	8d 91       	ld	r24, X+
    a626:	9c 91       	ld	r25, X
    a628:	5b 97       	sbiw	r26, 0x1b	; 27
    a62a:	89 2b       	or	r24, r25
    a62c:	09 f0       	breq	.+2      	; 0xa630 <dir_read+0xbe>
    a62e:	52 c0       	rjmp	.+164    	; 0xa6d4 <dir_read+0x162>
    a630:	f5 01       	movw	r30, r10
    a632:	63 85       	ldd	r22, Z+11	; 0x0b
    a634:	74 85       	ldd	r23, Z+12	; 0x0c
    a636:	8c 91       	ld	r24, X
    a638:	8f 73       	andi	r24, 0x3F	; 63
    a63a:	90 e0       	ldi	r25, 0x00	; 0
    a63c:	01 97       	sbiw	r24, 0x01	; 1
    a63e:	c8 9e       	mul	r12, r24
    a640:	90 01       	movw	r18, r0
    a642:	c9 9e       	mul	r12, r25
    a644:	30 0d       	add	r19, r0
    a646:	11 24       	eor	r1, r1
    a648:	f1 ec       	ldi	r31, 0xC1	; 193
    a64a:	6f 2e       	mov	r6, r31
    a64c:	f2 e0       	ldi	r31, 0x02	; 2
    a64e:	7f 2e       	mov	r7, r31
    a650:	41 e0       	ldi	r20, 0x01	; 1
    a652:	50 e0       	ldi	r21, 0x00	; 0
    a654:	f3 01       	movw	r30, r6
    a656:	81 91       	ld	r24, Z+
    a658:	3f 01       	movw	r6, r30
    a65a:	4d 01       	movw	r8, r26
    a65c:	88 0e       	add	r8, r24
    a65e:	91 1c       	adc	r9, r1
    a660:	f4 01       	movw	r30, r8
    a662:	80 81       	ld	r24, Z
    a664:	91 81       	ldd	r25, Z+1	; 0x01
    a666:	41 15       	cp	r20, r1
    a668:	51 05       	cpc	r21, r1
    a66a:	79 f0       	breq	.+30     	; 0xa68a <dir_read+0x118>
    a66c:	2f 3f       	cpi	r18, 0xFF	; 255
    a66e:	31 05       	cpc	r19, r1
    a670:	88 f5       	brcc	.+98     	; 0xa6d4 <dir_read+0x162>
    a672:	a9 01       	movw	r20, r18
    a674:	44 0f       	add	r20, r20
    a676:	55 1f       	adc	r21, r21
    a678:	46 0f       	add	r20, r22
    a67a:	57 1f       	adc	r21, r23
    a67c:	fa 01       	movw	r30, r20
    a67e:	91 83       	std	Z+1, r25	; 0x01
    a680:	80 83       	st	Z, r24
    a682:	ac 01       	movw	r20, r24
    a684:	2f 5f       	subi	r18, 0xFF	; 255
    a686:	3f 4f       	sbci	r19, 0xFF	; 255
    a688:	02 c0       	rjmp	.+4      	; 0xa68e <dir_read+0x11c>
    a68a:	01 96       	adiw	r24, 0x01	; 1
    a68c:	19 f5       	brne	.+70     	; 0xa6d4 <dir_read+0x162>
    a68e:	8e ec       	ldi	r24, 0xCE	; 206
    a690:	68 16       	cp	r6, r24
    a692:	82 e0       	ldi	r24, 0x02	; 2
    a694:	78 06       	cpc	r7, r24
    a696:	f1 f6       	brne	.-68     	; 0xa654 <dir_read+0xe2>
    a698:	8c 91       	ld	r24, X
    a69a:	86 ff       	sbrs	r24, 6
    a69c:	2b c0       	rjmp	.+86     	; 0xa6f4 <dir_read+0x182>
    a69e:	2f 3f       	cpi	r18, 0xFF	; 255
    a6a0:	31 05       	cpc	r19, r1
    a6a2:	c0 f4       	brcc	.+48     	; 0xa6d4 <dir_read+0x162>
    a6a4:	22 0f       	add	r18, r18
    a6a6:	33 1f       	adc	r19, r19
    a6a8:	fb 01       	movw	r30, r22
    a6aa:	e2 0f       	add	r30, r18
    a6ac:	f3 1f       	adc	r31, r19
    a6ae:	11 82       	std	Z+1, r1	; 0x01
    a6b0:	10 82       	st	Z, r1
    a6b2:	20 c0       	rjmp	.+64     	; 0xa6f4 <dir_read+0x182>
    a6b4:	11 11       	cpse	r17, r1
    a6b6:	05 c0       	rjmp	.+10     	; 0xa6c2 <dir_read+0x150>
    a6b8:	cd 01       	movw	r24, r26
    a6ba:	0e 94 35 48 	call	0x906a	; 0x906a <sum_sfn>
    a6be:	d8 16       	cp	r13, r24
    a6c0:	f9 f0       	breq	.+62     	; 0xa700 <dir_read+0x18e>
    a6c2:	8f ef       	ldi	r24, 0xFF	; 255
    a6c4:	9f ef       	ldi	r25, 0xFF	; 255
    a6c6:	dc 01       	movw	r26, r24
    a6c8:	88 a7       	std	Y+40, r24	; 0x28
    a6ca:	99 a7       	std	Y+41, r25	; 0x29
    a6cc:	aa a7       	std	Y+42, r26	; 0x2a
    a6ce:	bb a7       	std	Y+43, r27	; 0x2b
    a6d0:	17 c0       	rjmp	.+46     	; 0xa700 <dir_read+0x18e>
    a6d2:	d8 2e       	mov	r13, r24
    a6d4:	1f ef       	ldi	r17, 0xFF	; 255
    a6d6:	60 e0       	ldi	r22, 0x00	; 0
    a6d8:	70 e0       	ldi	r23, 0x00	; 0
    a6da:	ce 01       	movw	r24, r28
    a6dc:	e8 dd       	rcall	.-1072   	; 0xa2ae <dir_next>
    a6de:	00 97       	sbiw	r24, 0x00	; 0
    a6e0:	09 f4       	brne	.+2      	; 0xa6e4 <dir_read+0x172>
    a6e2:	58 cf       	rjmp	.-336    	; 0xa594 <dir_read+0x22>
    a6e4:	02 c0       	rjmp	.+4      	; 0xa6ea <dir_read+0x178>
    a6e6:	00 97       	sbiw	r24, 0x00	; 0
    a6e8:	59 f0       	breq	.+22     	; 0xa700 <dir_read+0x18e>
    a6ea:	1e 8a       	std	Y+22, r1	; 0x16
    a6ec:	1f 8a       	std	Y+23, r1	; 0x17
    a6ee:	18 8e       	std	Y+24, r1	; 0x18
    a6f0:	19 8e       	std	Y+25, r1	; 0x19
    a6f2:	08 c0       	rjmp	.+16     	; 0xa704 <dir_read+0x192>
    a6f4:	1f ef       	ldi	r17, 0xFF	; 255
    a6f6:	10 0f       	add	r17, r16
    a6f8:	ee cf       	rjmp	.-36     	; 0xa6d6 <dir_read+0x164>
    a6fa:	84 e0       	ldi	r24, 0x04	; 4
    a6fc:	90 e0       	ldi	r25, 0x00	; 0
    a6fe:	f5 cf       	rjmp	.-22     	; 0xa6ea <dir_read+0x178>
    a700:	80 e0       	ldi	r24, 0x00	; 0
    a702:	90 e0       	ldi	r25, 0x00	; 0
    a704:	cd b7       	in	r28, 0x3d	; 61
    a706:	de b7       	in	r29, 0x3e	; 62
    a708:	ee e0       	ldi	r30, 0x0E	; 14
    a70a:	0c 94 25 ed 	jmp	0x1da4a	; 0x1da4a <__epilogue_restores__+0x8>

0000a70e <dir_remove>:
    a70e:	a0 e0       	ldi	r26, 0x00	; 0
    a710:	b0 e0       	ldi	r27, 0x00	; 0
    a712:	ed e8       	ldi	r30, 0x8D	; 141
    a714:	f3 e5       	ldi	r31, 0x53	; 83
    a716:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
    a71a:	ec 01       	movw	r28, r24
    a71c:	08 81       	ld	r16, Y
    a71e:	19 81       	ldd	r17, Y+1	; 0x01
    a720:	ce 84       	ldd	r12, Y+14	; 0x0e
    a722:	df 84       	ldd	r13, Y+15	; 0x0f
    a724:	e8 88       	ldd	r14, Y+16	; 0x10
    a726:	f9 88       	ldd	r15, Y+17	; 0x11
    a728:	48 a5       	ldd	r20, Y+40	; 0x28
    a72a:	59 a5       	ldd	r21, Y+41	; 0x29
    a72c:	6a a5       	ldd	r22, Y+42	; 0x2a
    a72e:	7b a5       	ldd	r23, Y+43	; 0x2b
    a730:	4f 3f       	cpi	r20, 0xFF	; 255
    a732:	8f ef       	ldi	r24, 0xFF	; 255
    a734:	58 07       	cpc	r21, r24
    a736:	68 07       	cpc	r22, r24
    a738:	78 07       	cpc	r23, r24
    a73a:	29 f4       	brne	.+10     	; 0xa746 <dir_remove+0x38>
    a73c:	85 ee       	ldi	r24, 0xE5	; 229
    a73e:	b8 2e       	mov	r11, r24
    a740:	aa 24       	eor	r10, r10
    a742:	a3 94       	inc	r10
    a744:	19 c0       	rjmp	.+50     	; 0xa778 <dir_remove+0x6a>
    a746:	ce 01       	movw	r24, r28
    a748:	b8 da       	rcall	.-2704   	; 0x9cba <dir_sdi>
    a74a:	00 97       	sbiw	r24, 0x00	; 0
    a74c:	19 f5       	brne	.+70     	; 0xa794 <dir_remove+0x86>
    a74e:	f6 cf       	rjmp	.-20     	; 0xa73c <dir_remove+0x2e>
    a750:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a752:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a754:	b0 82       	st	Z, r11
    a756:	f8 01       	movw	r30, r16
    a758:	a3 82       	std	Z+3, r10	; 0x03
    a75a:	4e 85       	ldd	r20, Y+14	; 0x0e
    a75c:	5f 85       	ldd	r21, Y+15	; 0x0f
    a75e:	68 89       	ldd	r22, Y+16	; 0x10
    a760:	79 89       	ldd	r23, Y+17	; 0x11
    a762:	4c 15       	cp	r20, r12
    a764:	5d 05       	cpc	r21, r13
    a766:	6e 05       	cpc	r22, r14
    a768:	7f 05       	cpc	r23, r15
    a76a:	a0 f4       	brcc	.+40     	; 0xa794 <dir_remove+0x86>
    a76c:	60 e0       	ldi	r22, 0x00	; 0
    a76e:	70 e0       	ldi	r23, 0x00	; 0
    a770:	ce 01       	movw	r24, r28
    a772:	9d dd       	rcall	.-1222   	; 0xa2ae <dir_next>
    a774:	00 97       	sbiw	r24, 0x00	; 0
    a776:	49 f4       	brne	.+18     	; 0xa78a <dir_remove+0x7c>
    a778:	4e 89       	ldd	r20, Y+22	; 0x16
    a77a:	5f 89       	ldd	r21, Y+23	; 0x17
    a77c:	68 8d       	ldd	r22, Y+24	; 0x18
    a77e:	79 8d       	ldd	r23, Y+25	; 0x19
    a780:	c8 01       	movw	r24, r16
    a782:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    a786:	00 97       	sbiw	r24, 0x00	; 0
    a788:	19 f3       	breq	.-58     	; 0xa750 <dir_remove+0x42>
    a78a:	84 30       	cpi	r24, 0x04	; 4
    a78c:	91 05       	cpc	r25, r1
    a78e:	11 f4       	brne	.+4      	; 0xa794 <dir_remove+0x86>
    a790:	82 e0       	ldi	r24, 0x02	; 2
    a792:	90 e0       	ldi	r25, 0x00	; 0
    a794:	cd b7       	in	r28, 0x3d	; 61
    a796:	de b7       	in	r29, 0x3e	; 62
    a798:	ea e0       	ldi	r30, 0x0A	; 10
    a79a:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0000a79e <dir_find>:
    a79e:	a8 e0       	ldi	r26, 0x08	; 8
    a7a0:	b0 e0       	ldi	r27, 0x00	; 0
    a7a2:	e5 ed       	ldi	r30, 0xD5	; 213
    a7a4:	f3 e5       	ldi	r31, 0x53	; 83
    a7a6:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    a7aa:	8c 01       	movw	r16, r24
    a7ac:	dc 01       	movw	r26, r24
    a7ae:	8d 90       	ld	r8, X+
    a7b0:	9c 90       	ld	r9, X
    a7b2:	40 e0       	ldi	r20, 0x00	; 0
    a7b4:	50 e0       	ldi	r21, 0x00	; 0
    a7b6:	ba 01       	movw	r22, r20
    a7b8:	80 da       	rcall	.-2816   	; 0x9cba <dir_sdi>
    a7ba:	00 97       	sbiw	r24, 0x00	; 0
    a7bc:	09 f0       	breq	.+2      	; 0xa7c0 <dir_find+0x22>
    a7be:	f3 c0       	rjmp	.+486    	; 0xa9a6 <dir_find+0x208>
    a7c0:	8f ef       	ldi	r24, 0xFF	; 255
    a7c2:	9f ef       	ldi	r25, 0xFF	; 255
    a7c4:	dc 01       	movw	r26, r24
    a7c6:	f8 01       	movw	r30, r16
    a7c8:	80 a7       	std	Z+40, r24	; 0x28
    a7ca:	91 a7       	std	Z+41, r25	; 0x29
    a7cc:	a2 a7       	std	Z+42, r26	; 0x2a
    a7ce:	b3 a7       	std	Z+43, r27	; 0x2b
    a7d0:	ee 24       	eor	r14, r14
    a7d2:	ea 94       	dec	r14
    a7d4:	ff 24       	eor	r15, r15
    a7d6:	fa 94       	dec	r15
    a7d8:	44 24       	eor	r4, r4
    a7da:	4a 94       	dec	r4
    a7dc:	54 2c       	mov	r5, r4
    a7de:	32 01       	movw	r6, r4
    a7e0:	d8 01       	movw	r26, r16
    a7e2:	56 96       	adiw	r26, 0x16	; 22
    a7e4:	4d 91       	ld	r20, X+
    a7e6:	5d 91       	ld	r21, X+
    a7e8:	6d 91       	ld	r22, X+
    a7ea:	7c 91       	ld	r23, X
    a7ec:	59 97       	sbiw	r26, 0x19	; 25
    a7ee:	c4 01       	movw	r24, r8
    a7f0:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    a7f4:	00 97       	sbiw	r24, 0x00	; 0
    a7f6:	09 f0       	breq	.+2      	; 0xa7fa <dir_find+0x5c>
    a7f8:	d6 c0       	rjmp	.+428    	; 0xa9a6 <dir_find+0x208>
    a7fa:	f8 01       	movw	r30, r16
    a7fc:	02 8c       	ldd	r0, Z+26	; 0x1a
    a7fe:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a800:	e0 2d       	mov	r30, r0
    a802:	f8 87       	std	Y+8, r31	; 0x08
    a804:	ef 83       	std	Y+7, r30	; 0x07
    a806:	30 80       	ld	r3, Z
    a808:	33 20       	and	r3, r3
    a80a:	09 f4       	brne	.+2      	; 0xa80e <dir_find+0x70>
    a80c:	ce c0       	rjmp	.+412    	; 0xa9aa <dir_find+0x20c>
    a80e:	93 85       	ldd	r25, Z+11	; 0x0b
    a810:	89 2f       	mov	r24, r25
    a812:	8f 73       	andi	r24, 0x3F	; 63
    a814:	d8 01       	movw	r26, r16
    a816:	14 96       	adiw	r26, 0x04	; 4
    a818:	8c 93       	st	X, r24
    a81a:	b5 ee       	ldi	r27, 0xE5	; 229
    a81c:	3b 16       	cp	r3, r27
    a81e:	09 f4       	brne	.+2      	; 0xa822 <dir_find+0x84>
    a820:	b4 c0       	rjmp	.+360    	; 0xa98a <dir_find+0x1ec>
    a822:	93 ff       	sbrs	r25, 3
    a824:	04 c0       	rjmp	.+8      	; 0xa82e <dir_find+0x90>
    a826:	8f 30       	cpi	r24, 0x0F	; 15
    a828:	09 f0       	breq	.+2      	; 0xa82c <dir_find+0x8e>
    a82a:	af c0       	rjmp	.+350    	; 0xa98a <dir_find+0x1ec>
    a82c:	03 c0       	rjmp	.+6      	; 0xa834 <dir_find+0x96>
    a82e:	8f 30       	cpi	r24, 0x0F	; 15
    a830:	09 f0       	breq	.+2      	; 0xa834 <dir_find+0x96>
    a832:	87 c0       	rjmp	.+270    	; 0xa942 <dir_find+0x1a4>
    a834:	d8 01       	movw	r26, r16
    a836:	97 96       	adiw	r26, 0x27	; 39
    a838:	8c 91       	ld	r24, X
    a83a:	97 97       	sbiw	r26, 0x27	; 39
    a83c:	86 fd       	sbrc	r24, 6
    a83e:	ac c0       	rjmp	.+344    	; 0xa998 <dir_find+0x1fa>
    a840:	36 fe       	sbrs	r3, 6
    a842:	12 c0       	rjmp	.+36     	; 0xa868 <dir_find+0xca>
    a844:	ef 81       	ldd	r30, Y+7	; 0x07
    a846:	f8 85       	ldd	r31, Y+8	; 0x08
    a848:	e5 84       	ldd	r14, Z+13	; 0x0d
    a84a:	f3 2d       	mov	r31, r3
    a84c:	ff 7b       	andi	r31, 0xBF	; 191
    a84e:	3f 2e       	mov	r3, r31
    a850:	1e 96       	adiw	r26, 0x0e	; 14
    a852:	8d 91       	ld	r24, X+
    a854:	9d 91       	ld	r25, X+
    a856:	0d 90       	ld	r0, X+
    a858:	bc 91       	ld	r27, X
    a85a:	a0 2d       	mov	r26, r0
    a85c:	f8 01       	movw	r30, r16
    a85e:	80 a7       	std	Z+40, r24	; 0x28
    a860:	91 a7       	std	Z+41, r25	; 0x29
    a862:	a2 a7       	std	Z+42, r26	; 0x2a
    a864:	b3 a7       	std	Z+43, r27	; 0x2b
    a866:	02 c0       	rjmp	.+4      	; 0xa86c <dir_find+0xce>
    a868:	f3 10       	cpse	r15, r3
    a86a:	94 c0       	rjmp	.+296    	; 0xa994 <dir_find+0x1f6>
    a86c:	af 81       	ldd	r26, Y+7	; 0x07
    a86e:	b8 85       	ldd	r27, Y+8	; 0x08
    a870:	1d 96       	adiw	r26, 0x0d	; 13
    a872:	2c 90       	ld	r2, X
    a874:	1d 97       	sbiw	r26, 0x0d	; 13
    a876:	2e 10       	cpse	r2, r14
    a878:	8d c0       	rjmp	.+282    	; 0xa994 <dir_find+0x1f6>
    a87a:	5a 96       	adiw	r26, 0x1a	; 26
    a87c:	8d 91       	ld	r24, X+
    a87e:	9c 91       	ld	r25, X
    a880:	5b 97       	sbiw	r26, 0x1b	; 27
    a882:	89 2b       	or	r24, r25
    a884:	09 f0       	breq	.+2      	; 0xa888 <dir_find+0xea>
    a886:	9b c0       	rjmp	.+310    	; 0xa9be <dir_find+0x220>
    a888:	f4 01       	movw	r30, r8
    a88a:	c3 84       	ldd	r12, Z+11	; 0x0b
    a88c:	d4 84       	ldd	r13, Z+12	; 0x0c
    a88e:	8c 91       	ld	r24, X
    a890:	8f 73       	andi	r24, 0x3F	; 63
    a892:	90 e0       	ldi	r25, 0x00	; 0
    a894:	01 97       	sbiw	r24, 0x01	; 1
    a896:	fd e0       	ldi	r31, 0x0D	; 13
    a898:	f8 9f       	mul	r31, r24
    a89a:	70 01       	movw	r14, r0
    a89c:	f9 9f       	mul	r31, r25
    a89e:	f0 0c       	add	r15, r0
    a8a0:	11 24       	eor	r1, r1
    a8a2:	21 ec       	ldi	r18, 0xC1	; 193
    a8a4:	32 e0       	ldi	r19, 0x02	; 2
    a8a6:	3a 83       	std	Y+2, r19	; 0x02
    a8a8:	29 83       	std	Y+1, r18	; 0x01
    a8aa:	81 e0       	ldi	r24, 0x01	; 1
    a8ac:	90 e0       	ldi	r25, 0x00	; 0
    a8ae:	a9 81       	ldd	r26, Y+1	; 0x01
    a8b0:	ba 81       	ldd	r27, Y+2	; 0x02
    a8b2:	2d 91       	ld	r18, X+
    a8b4:	ba 83       	std	Y+2, r27	; 0x02
    a8b6:	a9 83       	std	Y+1, r26	; 0x01
    a8b8:	ef 81       	ldd	r30, Y+7	; 0x07
    a8ba:	f8 85       	ldd	r31, Y+8	; 0x08
    a8bc:	e2 0f       	add	r30, r18
    a8be:	f1 1d       	adc	r31, r1
    a8c0:	a0 80       	ld	r10, Z
    a8c2:	b1 80       	ldd	r11, Z+1	; 0x01
    a8c4:	00 97       	sbiw	r24, 0x00	; 0
    a8c6:	09 f1       	breq	.+66     	; 0xa90a <dir_find+0x16c>
    a8c8:	bf ef       	ldi	r27, 0xFF	; 255
    a8ca:	eb 16       	cp	r14, r27
    a8cc:	f1 04       	cpc	r15, r1
    a8ce:	08 f0       	brcs	.+2      	; 0xa8d2 <dir_find+0x134>
    a8d0:	76 c0       	rjmp	.+236    	; 0xa9be <dir_find+0x220>
    a8d2:	c5 01       	movw	r24, r10
    a8d4:	0e 94 7f 6e 	call	0xdcfe	; 0xdcfe <ff_wtoupper>
    a8d8:	9c 83       	std	Y+4, r25	; 0x04
    a8da:	8b 83       	std	Y+3, r24	; 0x03
    a8dc:	f7 01       	movw	r30, r14
    a8de:	31 96       	adiw	r30, 0x01	; 1
    a8e0:	fe 83       	std	Y+6, r31	; 0x06
    a8e2:	ed 83       	std	Y+5, r30	; 0x05
    a8e4:	ee 0c       	add	r14, r14
    a8e6:	ff 1c       	adc	r15, r15
    a8e8:	f6 01       	movw	r30, r12
    a8ea:	ee 0d       	add	r30, r14
    a8ec:	ff 1d       	adc	r31, r15
    a8ee:	80 81       	ld	r24, Z
    a8f0:	91 81       	ldd	r25, Z+1	; 0x01
    a8f2:	0e 94 7f 6e 	call	0xdcfe	; 0xdcfe <ff_wtoupper>
    a8f6:	2b 81       	ldd	r18, Y+3	; 0x03
    a8f8:	3c 81       	ldd	r19, Y+4	; 0x04
    a8fa:	28 17       	cp	r18, r24
    a8fc:	39 07       	cpc	r19, r25
    a8fe:	09 f0       	breq	.+2      	; 0xa902 <dir_find+0x164>
    a900:	5e c0       	rjmp	.+188    	; 0xa9be <dir_find+0x220>
    a902:	c5 01       	movw	r24, r10
    a904:	ed 80       	ldd	r14, Y+5	; 0x05
    a906:	fe 80       	ldd	r15, Y+6	; 0x06
    a908:	05 c0       	rjmp	.+10     	; 0xa914 <dir_find+0x176>
    a90a:	3f ef       	ldi	r19, 0xFF	; 255
    a90c:	a3 16       	cp	r10, r19
    a90e:	b3 06       	cpc	r11, r19
    a910:	09 f0       	breq	.+2      	; 0xa914 <dir_find+0x176>
    a912:	55 c0       	rjmp	.+170    	; 0xa9be <dir_find+0x220>
    a914:	49 81       	ldd	r20, Y+1	; 0x01
    a916:	5a 81       	ldd	r21, Y+2	; 0x02
    a918:	4e 5c       	subi	r20, 0xCE	; 206
    a91a:	52 40       	sbci	r21, 0x02	; 2
    a91c:	41 f6       	brne	.-112    	; 0xa8ae <dir_find+0x110>
    a91e:	ef 81       	ldd	r30, Y+7	; 0x07
    a920:	f8 85       	ldd	r31, Y+8	; 0x08
    a922:	20 81       	ld	r18, Z
    a924:	26 ff       	sbrs	r18, 6
    a926:	46 c0       	rjmp	.+140    	; 0xa9b4 <dir_find+0x216>
    a928:	89 2b       	or	r24, r25
    a92a:	09 f4       	brne	.+2      	; 0xa92e <dir_find+0x190>
    a92c:	43 c0       	rjmp	.+134    	; 0xa9b4 <dir_find+0x216>
    a92e:	ee 0c       	add	r14, r14
    a930:	ff 1c       	adc	r15, r15
    a932:	f6 01       	movw	r30, r12
    a934:	ee 0d       	add	r30, r14
    a936:	ff 1d       	adc	r31, r15
    a938:	80 81       	ld	r24, Z
    a93a:	91 81       	ldd	r25, Z+1	; 0x01
    a93c:	89 2b       	or	r24, r25
    a93e:	d1 f1       	breq	.+116    	; 0xa9b4 <dir_find+0x216>
    a940:	3e c0       	rjmp	.+124    	; 0xa9be <dir_find+0x220>
    a942:	f1 10       	cpse	r15, r1
    a944:	06 c0       	rjmp	.+12     	; 0xa952 <dir_find+0x1b4>
    a946:	8f 81       	ldd	r24, Y+7	; 0x07
    a948:	98 85       	ldd	r25, Y+8	; 0x08
    a94a:	0e 94 35 48 	call	0x906a	; 0x906a <sum_sfn>
    a94e:	e8 16       	cp	r14, r24
    a950:	71 f1       	breq	.+92     	; 0xa9ae <dir_find+0x210>
    a952:	d8 01       	movw	r26, r16
    a954:	97 96       	adiw	r26, 0x27	; 39
    a956:	8c 91       	ld	r24, X
    a958:	80 fd       	sbrc	r24, 0
    a95a:	17 c0       	rjmp	.+46     	; 0xa98a <dir_find+0x1ec>
    a95c:	f8 01       	movw	r30, r16
    a95e:	7c 96       	adiw	r30, 0x1c	; 28
    a960:	2f 81       	ldd	r18, Y+7	; 0x07
    a962:	38 85       	ldd	r19, Y+8	; 0x08
    a964:	25 5f       	subi	r18, 0xF5	; 245
    a966:	3f 4f       	sbci	r19, 0xFF	; 255
    a968:	af 81       	ldd	r26, Y+7	; 0x07
    a96a:	b8 85       	ldd	r27, Y+8	; 0x08
    a96c:	8d 91       	ld	r24, X+
    a96e:	b8 87       	std	Y+8, r27	; 0x08
    a970:	af 83       	std	Y+7, r26	; 0x07
    a972:	41 91       	ld	r20, Z+
    a974:	90 e0       	ldi	r25, 0x00	; 0
    a976:	84 1b       	sub	r24, r20
    a978:	91 09       	sbc	r25, r1
    a97a:	2a 17       	cp	r18, r26
    a97c:	3b 07       	cpc	r19, r27
    a97e:	19 f0       	breq	.+6      	; 0xa986 <dir_find+0x1e8>
    a980:	89 2b       	or	r24, r25
    a982:	91 f3       	breq	.-28     	; 0xa968 <dir_find+0x1ca>
    a984:	02 c0       	rjmp	.+4      	; 0xa98a <dir_find+0x1ec>
    a986:	89 2b       	or	r24, r25
    a988:	91 f0       	breq	.+36     	; 0xa9ae <dir_find+0x210>
    a98a:	f8 01       	movw	r30, r16
    a98c:	40 a6       	std	Z+40, r4	; 0x28
    a98e:	51 a6       	std	Z+41, r5	; 0x29
    a990:	62 a6       	std	Z+42, r6	; 0x2a
    a992:	73 a6       	std	Z+43, r7	; 0x2b
    a994:	ff 24       	eor	r15, r15
    a996:	fa 94       	dec	r15
    a998:	60 e0       	ldi	r22, 0x00	; 0
    a99a:	70 e0       	ldi	r23, 0x00	; 0
    a99c:	c8 01       	movw	r24, r16
    a99e:	87 dc       	rcall	.-1778   	; 0xa2ae <dir_next>
    a9a0:	00 97       	sbiw	r24, 0x00	; 0
    a9a2:	09 f4       	brne	.+2      	; 0xa9a6 <dir_find+0x208>
    a9a4:	1d cf       	rjmp	.-454    	; 0xa7e0 <dir_find+0x42>
    a9a6:	28 2f       	mov	r18, r24
    a9a8:	0c c0       	rjmp	.+24     	; 0xa9c2 <dir_find+0x224>
    a9aa:	24 e0       	ldi	r18, 0x04	; 4
    a9ac:	01 c0       	rjmp	.+2      	; 0xa9b0 <dir_find+0x212>
    a9ae:	20 e0       	ldi	r18, 0x00	; 0
    a9b0:	90 e0       	ldi	r25, 0x00	; 0
    a9b2:	07 c0       	rjmp	.+14     	; 0xa9c2 <dir_find+0x224>
    a9b4:	ff 24       	eor	r15, r15
    a9b6:	fa 94       	dec	r15
    a9b8:	f3 0c       	add	r15, r3
    a9ba:	e2 2c       	mov	r14, r2
    a9bc:	ed cf       	rjmp	.-38     	; 0xa998 <dir_find+0x1fa>
    a9be:	e2 2c       	mov	r14, r2
    a9c0:	e9 cf       	rjmp	.-46     	; 0xa994 <dir_find+0x1f6>
    a9c2:	82 2f       	mov	r24, r18
    a9c4:	28 96       	adiw	r28, 0x08	; 8
    a9c6:	e2 e1       	ldi	r30, 0x12	; 18
    a9c8:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000a9cc <dir_register>:
    a9cc:	a6 e1       	ldi	r26, 0x16	; 22
    a9ce:	b0 e0       	ldi	r27, 0x00	; 0
    a9d0:	ec ee       	ldi	r30, 0xEC	; 236
    a9d2:	f4 e5       	ldi	r31, 0x54	; 84
    a9d4:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    a9d8:	dc 01       	movw	r26, r24
    a9da:	97 96       	adiw	r26, 0x27	; 39
    a9dc:	2c 91       	ld	r18, X
    a9de:	97 97       	sbiw	r26, 0x27	; 39
    a9e0:	20 7a       	andi	r18, 0xA0	; 160
    a9e2:	09 f0       	breq	.+2      	; 0xa9e6 <dir_register+0x1a>
    a9e4:	61 c1       	rjmp	.+706    	; 0xaca8 <dir_register+0x2dc>
    a9e6:	cd 90       	ld	r12, X+
    a9e8:	dc 90       	ld	r13, X
    a9ea:	d6 01       	movw	r26, r12
    a9ec:	1b 96       	adiw	r26, 0x0b	; 11
    a9ee:	ed 91       	ld	r30, X+
    a9f0:	fc 91       	ld	r31, X
    a9f2:	1c 97       	sbiw	r26, 0x0c	; 12
    a9f4:	81 2c       	mov	r8, r1
    a9f6:	91 2c       	mov	r9, r1
    a9f8:	21 91       	ld	r18, Z+
    a9fa:	31 91       	ld	r19, Z+
    a9fc:	23 2b       	or	r18, r19
    a9fe:	21 f0       	breq	.+8      	; 0xaa08 <dir_register+0x3c>
    aa00:	bf ef       	ldi	r27, 0xFF	; 255
    aa02:	8b 1a       	sub	r8, r27
    aa04:	9b 0a       	sbc	r9, r27
    aa06:	f8 cf       	rjmp	.-16     	; 0xa9f8 <dir_register+0x2c>
    aa08:	8c 01       	movw	r16, r24
    aa0a:	5c 01       	movw	r10, r24
    aa0c:	ec e1       	ldi	r30, 0x1C	; 28
    aa0e:	ae 0e       	add	r10, r30
    aa10:	b1 1c       	adc	r11, r1
    aa12:	4c e0       	ldi	r20, 0x0C	; 12
    aa14:	50 e0       	ldi	r21, 0x00	; 0
    aa16:	b5 01       	movw	r22, r10
    aa18:	ce 01       	movw	r24, r28
    aa1a:	01 96       	adiw	r24, 0x01	; 1
    aa1c:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    aa20:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa22:	80 ff       	sbrs	r24, 0
    aa24:	96 c0       	rjmp	.+300    	; 0xab52 <dir_register+0x186>
    aa26:	80 e4       	ldi	r24, 0x40	; 64
    aa28:	d8 01       	movw	r26, r16
    aa2a:	97 96       	adiw	r26, 0x27	; 39
    aa2c:	8c 93       	st	X, r24
    aa2e:	41 2c       	mov	r4, r1
    aa30:	51 2c       	mov	r5, r1
    aa32:	32 01       	movw	r6, r4
    aa34:	43 94       	inc	r4
    aa36:	72 01       	movw	r14, r4
    aa38:	f6 01       	movw	r30, r12
    aa3a:	23 84       	ldd	r2, Z+11	; 0x0b
    aa3c:	34 84       	ldd	r3, Z+12	; 0x0c
    aa3e:	4b e0       	ldi	r20, 0x0B	; 11
    aa40:	50 e0       	ldi	r21, 0x00	; 0
    aa42:	be 01       	movw	r22, r28
    aa44:	6f 5f       	subi	r22, 0xFF	; 255
    aa46:	7f 4f       	sbci	r23, 0xFF	; 255
    aa48:	c5 01       	movw	r24, r10
    aa4a:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    aa4e:	f6 e0       	ldi	r31, 0x06	; 6
    aa50:	4f 16       	cp	r4, r31
    aa52:	51 04       	cpc	r5, r1
    aa54:	18 f1       	brcs	.+70     	; 0xaa9c <dir_register+0xd0>
    aa56:	f1 01       	movw	r30, r2
    aa58:	b3 01       	movw	r22, r6
    aa5a:	a2 01       	movw	r20, r4
    aa5c:	81 91       	ld	r24, Z+
    aa5e:	91 91       	ld	r25, Z+
    aa60:	00 97       	sbiw	r24, 0x00	; 0
    aa62:	d9 f0       	breq	.+54     	; 0xaa9a <dir_register+0xce>
    aa64:	20 e1       	ldi	r18, 0x10	; 16
    aa66:	30 e0       	ldi	r19, 0x00	; 0
    aa68:	44 0f       	add	r20, r20
    aa6a:	55 1f       	adc	r21, r21
    aa6c:	66 1f       	adc	r22, r22
    aa6e:	77 1f       	adc	r23, r23
    aa70:	dc 01       	movw	r26, r24
    aa72:	a1 70       	andi	r26, 0x01	; 1
    aa74:	bb 27       	eor	r27, r27
    aa76:	4a 0f       	add	r20, r26
    aa78:	5b 1f       	adc	r21, r27
    aa7a:	61 1d       	adc	r22, r1
    aa7c:	71 1d       	adc	r23, r1
    aa7e:	96 95       	lsr	r25
    aa80:	87 95       	ror	r24
    aa82:	60 ff       	sbrs	r22, 0
    aa84:	06 c0       	rjmp	.+12     	; 0xaa92 <dir_register+0xc6>
    aa86:	a1 e2       	ldi	r26, 0x21	; 33
    aa88:	4a 27       	eor	r20, r26
    aa8a:	a0 e1       	ldi	r26, 0x10	; 16
    aa8c:	5a 27       	eor	r21, r26
    aa8e:	a1 e0       	ldi	r26, 0x01	; 1
    aa90:	6a 27       	eor	r22, r26
    aa92:	21 50       	subi	r18, 0x01	; 1
    aa94:	31 09       	sbc	r19, r1
    aa96:	41 f7       	brne	.-48     	; 0xaa68 <dir_register+0x9c>
    aa98:	e1 cf       	rjmp	.-62     	; 0xaa5c <dir_register+0x90>
    aa9a:	7a 01       	movw	r14, r20
    aa9c:	fe 01       	movw	r30, r28
    aa9e:	75 96       	adiw	r30, 0x15	; 21
    aaa0:	27 e0       	ldi	r18, 0x07	; 7
    aaa2:	30 e0       	ldi	r19, 0x00	; 0
    aaa4:	9e 2d       	mov	r25, r14
    aaa6:	9f 70       	andi	r25, 0x0F	; 15
    aaa8:	80 e3       	ldi	r24, 0x30	; 48
    aaaa:	89 0f       	add	r24, r25
    aaac:	8a 33       	cpi	r24, 0x3A	; 58
    aaae:	10 f0       	brcs	.+4      	; 0xaab4 <dir_register+0xe8>
    aab0:	87 e3       	ldi	r24, 0x37	; 55
    aab2:	89 0f       	add	r24, r25
    aab4:	21 50       	subi	r18, 0x01	; 1
    aab6:	31 09       	sbc	r19, r1
    aab8:	82 93       	st	-Z, r24
    aaba:	a4 e0       	ldi	r26, 0x04	; 4
    aabc:	f6 94       	lsr	r15
    aabe:	e7 94       	ror	r14
    aac0:	aa 95       	dec	r26
    aac2:	e1 f7       	brne	.-8      	; 0xaabc <dir_register+0xf0>
    aac4:	e1 14       	cp	r14, r1
    aac6:	f1 04       	cpc	r15, r1
    aac8:	69 f7       	brne	.-38     	; 0xaaa4 <dir_register+0xd8>
    aaca:	ed e0       	ldi	r30, 0x0D	; 13
    aacc:	f0 e0       	ldi	r31, 0x00	; 0
    aace:	ec 0f       	add	r30, r28
    aad0:	fd 1f       	adc	r31, r29
    aad2:	e2 0f       	add	r30, r18
    aad4:	f3 1f       	adc	r31, r19
    aad6:	be e7       	ldi	r27, 0x7E	; 126
    aad8:	b0 83       	st	Z, r27
    aada:	f5 01       	movw	r30, r10
    aadc:	80 e0       	ldi	r24, 0x00	; 0
    aade:	90 e0       	ldi	r25, 0x00	; 0
    aae0:	28 17       	cp	r18, r24
    aae2:	39 07       	cpc	r19, r25
    aae4:	29 f0       	breq	.+10     	; 0xaaf0 <dir_register+0x124>
    aae6:	41 91       	ld	r20, Z+
    aae8:	40 32       	cpi	r20, 0x20	; 32
    aaea:	11 f0       	breq	.+4      	; 0xaaf0 <dir_register+0x124>
    aaec:	01 96       	adiw	r24, 0x01	; 1
    aaee:	f8 cf       	rjmp	.-16     	; 0xaae0 <dir_register+0x114>
    aaf0:	f5 01       	movw	r30, r10
    aaf2:	e8 0f       	add	r30, r24
    aaf4:	f9 1f       	adc	r31, r25
    aaf6:	28 30       	cpi	r18, 0x08	; 8
    aaf8:	31 05       	cpc	r19, r1
    aafa:	50 f4       	brcc	.+20     	; 0xab10 <dir_register+0x144>
    aafc:	ad e0       	ldi	r26, 0x0D	; 13
    aafe:	b0 e0       	ldi	r27, 0x00	; 0
    ab00:	ac 0f       	add	r26, r28
    ab02:	bd 1f       	adc	r27, r29
    ab04:	a2 0f       	add	r26, r18
    ab06:	b3 1f       	adc	r27, r19
    ab08:	8c 91       	ld	r24, X
    ab0a:	2f 5f       	subi	r18, 0xFF	; 255
    ab0c:	3f 4f       	sbci	r19, 0xFF	; 255
    ab0e:	01 c0       	rjmp	.+2      	; 0xab12 <dir_register+0x146>
    ab10:	80 e2       	ldi	r24, 0x20	; 32
    ab12:	81 93       	st	Z+, r24
    ab14:	cf 01       	movw	r24, r30
    ab16:	8a 19       	sub	r24, r10
    ab18:	9b 09       	sbc	r25, r11
    ab1a:	08 97       	sbiw	r24, 0x08	; 8
    ab1c:	60 f3       	brcs	.-40     	; 0xaaf6 <dir_register+0x12a>
    ab1e:	c8 01       	movw	r24, r16
    ab20:	3e de       	rcall	.-900    	; 0xa79e <dir_find>
    ab22:	00 97       	sbiw	r24, 0x00	; 0
    ab24:	71 f4       	brne	.+28     	; 0xab42 <dir_register+0x176>
    ab26:	ef ef       	ldi	r30, 0xFF	; 255
    ab28:	4e 1a       	sub	r4, r30
    ab2a:	5e 0a       	sbc	r5, r30
    ab2c:	6e 0a       	sbc	r6, r30
    ab2e:	7e 0a       	sbc	r7, r30
    ab30:	f4 e6       	ldi	r31, 0x64	; 100
    ab32:	4f 16       	cp	r4, r31
    ab34:	51 04       	cpc	r5, r1
    ab36:	61 04       	cpc	r6, r1
    ab38:	71 04       	cpc	r7, r1
    ab3a:	09 f0       	breq	.+2      	; 0xab3e <dir_register+0x172>
    ab3c:	7c cf       	rjmp	.-264    	; 0xaa36 <dir_register+0x6a>
    ab3e:	27 e0       	ldi	r18, 0x07	; 7
    ab40:	b4 c0       	rjmp	.+360    	; 0xacaa <dir_register+0x2de>
    ab42:	84 30       	cpi	r24, 0x04	; 4
    ab44:	91 05       	cpc	r25, r1
    ab46:	09 f0       	breq	.+2      	; 0xab4a <dir_register+0x17e>
    ab48:	df c0       	rjmp	.+446    	; 0xad08 <dir_register+0x33c>
    ab4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab4c:	d8 01       	movw	r26, r16
    ab4e:	97 96       	adiw	r26, 0x27	; 39
    ab50:	8c 93       	st	X, r24
    ab52:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab54:	81 ff       	sbrs	r24, 1
    ab56:	0b c0       	rjmp	.+22     	; 0xab6e <dir_register+0x1a2>
    ab58:	c4 01       	movw	r24, r8
    ab5a:	0c 96       	adiw	r24, 0x0c	; 12
    ab5c:	6d e0       	ldi	r22, 0x0D	; 13
    ab5e:	70 e0       	ldi	r23, 0x00	; 0
    ab60:	0e 94 5c ec 	call	0x1d8b8	; 0x1d8b8 <__udivmodhi4>
    ab64:	7b 01       	movw	r14, r22
    ab66:	bf ef       	ldi	r27, 0xFF	; 255
    ab68:	eb 1a       	sub	r14, r27
    ab6a:	fb 0a       	sbc	r15, r27
    ab6c:	03 c0       	rjmp	.+6      	; 0xab74 <dir_register+0x1a8>
    ab6e:	ee 24       	eor	r14, r14
    ab70:	e3 94       	inc	r14
    ab72:	f1 2c       	mov	r15, r1
    ab74:	b7 01       	movw	r22, r14
    ab76:	c8 01       	movw	r24, r16
    ab78:	c2 dc       	rcall	.-1660   	; 0xa4fe <dir_alloc>
    ab7a:	00 97       	sbiw	r24, 0x00	; 0
    ab7c:	09 f0       	breq	.+2      	; 0xab80 <dir_register+0x1b4>
    ab7e:	c4 c0       	rjmp	.+392    	; 0xad08 <dir_register+0x33c>
    ab80:	e1 e0       	ldi	r30, 0x01	; 1
    ab82:	ee 1a       	sub	r14, r30
    ab84:	f1 08       	sbc	r15, r1
    ab86:	09 f4       	brne	.+2      	; 0xab8a <dir_register+0x1be>
    ab88:	92 c0       	rjmp	.+292    	; 0xacae <dir_register+0x2e2>
    ab8a:	d8 01       	movw	r26, r16
    ab8c:	1e 96       	adiw	r26, 0x0e	; 14
    ab8e:	4d 91       	ld	r20, X+
    ab90:	5d 91       	ld	r21, X+
    ab92:	6d 91       	ld	r22, X+
    ab94:	7c 91       	ld	r23, X
    ab96:	51 97       	sbiw	r26, 0x11	; 17
    ab98:	c7 01       	movw	r24, r14
    ab9a:	e5 e0       	ldi	r30, 0x05	; 5
    ab9c:	88 0f       	add	r24, r24
    ab9e:	99 1f       	adc	r25, r25
    aba0:	ea 95       	dec	r30
    aba2:	e1 f7       	brne	.-8      	; 0xab9c <dir_register+0x1d0>
    aba4:	48 1b       	sub	r20, r24
    aba6:	59 0b       	sbc	r21, r25
    aba8:	61 09       	sbc	r22, r1
    abaa:	71 09       	sbc	r23, r1
    abac:	c8 01       	movw	r24, r16
    abae:	85 d8       	rcall	.-3830   	; 0x9cba <dir_sdi>
    abb0:	00 97       	sbiw	r24, 0x00	; 0
    abb2:	09 f0       	breq	.+2      	; 0xabb6 <dir_register+0x1ea>
    abb4:	a9 c0       	rjmp	.+338    	; 0xad08 <dir_register+0x33c>
    abb6:	c5 01       	movw	r24, r10
    abb8:	0e 94 35 48 	call	0x906a	; 0x906a <sum_sfn>
    abbc:	68 2e       	mov	r6, r24
    abbe:	5f e0       	ldi	r21, 0x0F	; 15
    abc0:	35 2e       	mov	r3, r21
    abc2:	6d e0       	ldi	r22, 0x0D	; 13
    abc4:	46 2e       	mov	r4, r22
    abc6:	7e ec       	ldi	r23, 0xCE	; 206
    abc8:	87 2e       	mov	r8, r23
    abca:	72 e0       	ldi	r23, 0x02	; 2
    abcc:	97 2e       	mov	r9, r23
    abce:	55 24       	eor	r5, r5
    abd0:	53 94       	inc	r5
    abd2:	f8 01       	movw	r30, r16
    abd4:	46 89       	ldd	r20, Z+22	; 0x16
    abd6:	57 89       	ldd	r21, Z+23	; 0x17
    abd8:	60 8d       	ldd	r22, Z+24	; 0x18
    abda:	71 8d       	ldd	r23, Z+25	; 0x19
    abdc:	c6 01       	movw	r24, r12
    abde:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    abe2:	00 97       	sbiw	r24, 0x00	; 0
    abe4:	09 f0       	breq	.+2      	; 0xabe8 <dir_register+0x21c>
    abe6:	90 c0       	rjmp	.+288    	; 0xad08 <dir_register+0x33c>
    abe8:	7e 2c       	mov	r7, r14
    abea:	d8 01       	movw	r26, r16
    abec:	5a 96       	adiw	r26, 0x1a	; 26
    abee:	ed 91       	ld	r30, X+
    abf0:	fc 91       	ld	r31, X
    abf2:	5b 97       	sbiw	r26, 0x1b	; 27
    abf4:	d6 01       	movw	r26, r12
    abf6:	1b 96       	adiw	r26, 0x0b	; 11
    abf8:	6d 91       	ld	r22, X+
    abfa:	7c 91       	ld	r23, X
    abfc:	1c 97       	sbiw	r26, 0x0c	; 12
    abfe:	65 86       	std	Z+13, r6	; 0x0d
    ac00:	33 86       	std	Z+11, r3	; 0x0b
    ac02:	14 86       	std	Z+12, r1	; 0x0c
    ac04:	12 8e       	std	Z+26, r1	; 0x1a
    ac06:	13 8e       	std	Z+27, r1	; 0x1b
    ac08:	97 01       	movw	r18, r14
    ac0a:	33 27       	eor	r19, r19
    ac0c:	21 50       	subi	r18, 0x01	; 1
    ac0e:	31 09       	sbc	r19, r1
    ac10:	42 9e       	mul	r4, r18
    ac12:	c0 01       	movw	r24, r0
    ac14:	43 9e       	mul	r4, r19
    ac16:	90 0d       	add	r25, r0
    ac18:	11 24       	eor	r1, r1
    ac1a:	21 ec       	ldi	r18, 0xC1	; 193
    ac1c:	32 e0       	ldi	r19, 0x02	; 2
    ac1e:	3e 8b       	std	Y+22, r19	; 0x16
    ac20:	2d 8b       	std	Y+21, r18	; 0x15
    ac22:	20 e0       	ldi	r18, 0x00	; 0
    ac24:	30 e0       	ldi	r19, 0x00	; 0
    ac26:	2f 3f       	cpi	r18, 0xFF	; 255
    ac28:	4f ef       	ldi	r20, 0xFF	; 255
    ac2a:	34 07       	cpc	r19, r20
    ac2c:	49 f0       	breq	.+18     	; 0xac40 <dir_register+0x274>
    ac2e:	9c 01       	movw	r18, r24
    ac30:	22 0f       	add	r18, r18
    ac32:	33 1f       	adc	r19, r19
    ac34:	26 0f       	add	r18, r22
    ac36:	37 1f       	adc	r19, r23
    ac38:	d9 01       	movw	r26, r18
    ac3a:	2d 91       	ld	r18, X+
    ac3c:	3c 91       	ld	r19, X
    ac3e:	01 96       	adiw	r24, 0x01	; 1
    ac40:	ad 89       	ldd	r26, Y+21	; 0x15
    ac42:	be 89       	ldd	r27, Y+22	; 0x16
    ac44:	4d 91       	ld	r20, X+
    ac46:	be 8b       	std	Y+22, r27	; 0x16
    ac48:	ad 8b       	std	Y+21, r26	; 0x15
    ac4a:	df 01       	movw	r26, r30
    ac4c:	a4 0f       	add	r26, r20
    ac4e:	b1 1d       	adc	r27, r1
    ac50:	2c 93       	st	X, r18
    ac52:	11 96       	adiw	r26, 0x01	; 1
    ac54:	3c 93       	st	X, r19
    ac56:	21 15       	cp	r18, r1
    ac58:	31 05       	cpc	r19, r1
    ac5a:	11 f4       	brne	.+4      	; 0xac60 <dir_register+0x294>
    ac5c:	2f ef       	ldi	r18, 0xFF	; 255
    ac5e:	3f ef       	ldi	r19, 0xFF	; 255
    ac60:	4d 89       	ldd	r20, Y+21	; 0x15
    ac62:	5e 89       	ldd	r21, Y+22	; 0x16
    ac64:	84 16       	cp	r8, r20
    ac66:	95 06       	cpc	r9, r21
    ac68:	f1 f6       	brne	.-68     	; 0xac26 <dir_register+0x25a>
    ac6a:	2f 3f       	cpi	r18, 0xFF	; 255
    ac6c:	3f 4f       	sbci	r19, 0xFF	; 255
    ac6e:	49 f0       	breq	.+18     	; 0xac82 <dir_register+0x2b6>
    ac70:	88 0f       	add	r24, r24
    ac72:	99 1f       	adc	r25, r25
    ac74:	db 01       	movw	r26, r22
    ac76:	a8 0f       	add	r26, r24
    ac78:	b9 1f       	adc	r27, r25
    ac7a:	8d 91       	ld	r24, X+
    ac7c:	9c 91       	ld	r25, X
    ac7e:	89 2b       	or	r24, r25
    ac80:	19 f4       	brne	.+6      	; 0xac88 <dir_register+0x2bc>
    ac82:	87 2d       	mov	r24, r7
    ac84:	80 64       	ori	r24, 0x40	; 64
    ac86:	78 2e       	mov	r7, r24
    ac88:	70 82       	st	Z, r7
    ac8a:	d6 01       	movw	r26, r12
    ac8c:	13 96       	adiw	r26, 0x03	; 3
    ac8e:	5c 92       	st	X, r5
    ac90:	60 e0       	ldi	r22, 0x00	; 0
    ac92:	70 e0       	ldi	r23, 0x00	; 0
    ac94:	c8 01       	movw	r24, r16
    ac96:	0b db       	rcall	.-2538   	; 0xa2ae <dir_next>
    ac98:	00 97       	sbiw	r24, 0x00	; 0
    ac9a:	b1 f5       	brne	.+108    	; 0xad08 <dir_register+0x33c>
    ac9c:	b1 e0       	ldi	r27, 0x01	; 1
    ac9e:	eb 1a       	sub	r14, r27
    aca0:	f1 08       	sbc	r15, r1
    aca2:	09 f0       	breq	.+2      	; 0xaca6 <dir_register+0x2da>
    aca4:	96 cf       	rjmp	.-212    	; 0xabd2 <dir_register+0x206>
    aca6:	03 c0       	rjmp	.+6      	; 0xacae <dir_register+0x2e2>
    aca8:	26 e0       	ldi	r18, 0x06	; 6
    acaa:	90 e0       	ldi	r25, 0x00	; 0
    acac:	2e c0       	rjmp	.+92     	; 0xad0a <dir_register+0x33e>
    acae:	d8 01       	movw	r26, r16
    acb0:	56 96       	adiw	r26, 0x16	; 22
    acb2:	4d 91       	ld	r20, X+
    acb4:	5d 91       	ld	r21, X+
    acb6:	6d 91       	ld	r22, X+
    acb8:	7c 91       	ld	r23, X
    acba:	59 97       	sbiw	r26, 0x19	; 25
    acbc:	c6 01       	movw	r24, r12
    acbe:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    acc2:	00 97       	sbiw	r24, 0x00	; 0
    acc4:	09 f5       	brne	.+66     	; 0xad08 <dir_register+0x33c>
    acc6:	40 e2       	ldi	r20, 0x20	; 32
    acc8:	50 e0       	ldi	r21, 0x00	; 0
    acca:	60 e0       	ldi	r22, 0x00	; 0
    accc:	70 e0       	ldi	r23, 0x00	; 0
    acce:	f8 01       	movw	r30, r16
    acd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    acd2:	93 8d       	ldd	r25, Z+27	; 0x1b
    acd4:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    acd8:	4b e0       	ldi	r20, 0x0B	; 11
    acda:	50 e0       	ldi	r21, 0x00	; 0
    acdc:	b5 01       	movw	r22, r10
    acde:	d8 01       	movw	r26, r16
    ace0:	5a 96       	adiw	r26, 0x1a	; 26
    ace2:	8d 91       	ld	r24, X+
    ace4:	9c 91       	ld	r25, X
    ace6:	5b 97       	sbiw	r26, 0x1b	; 27
    ace8:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    acec:	d8 01       	movw	r26, r16
    acee:	5a 96       	adiw	r26, 0x1a	; 26
    acf0:	ed 91       	ld	r30, X+
    acf2:	fc 91       	ld	r31, X
    acf4:	5b 97       	sbiw	r26, 0x1b	; 27
    acf6:	97 96       	adiw	r26, 0x27	; 39
    acf8:	8c 91       	ld	r24, X
    acfa:	88 71       	andi	r24, 0x18	; 24
    acfc:	84 87       	std	Z+12, r24	; 0x0c
    acfe:	81 e0       	ldi	r24, 0x01	; 1
    ad00:	f6 01       	movw	r30, r12
    ad02:	83 83       	std	Z+3, r24	; 0x03
    ad04:	20 e0       	ldi	r18, 0x00	; 0
    ad06:	d1 cf       	rjmp	.-94     	; 0xacaa <dir_register+0x2de>
    ad08:	28 2f       	mov	r18, r24
    ad0a:	82 2f       	mov	r24, r18
    ad0c:	66 96       	adiw	r28, 0x16	; 22
    ad0e:	e2 e1       	ldi	r30, 0x12	; 18
    ad10:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000ad14 <follow_path>:
    ad14:	a7 e0       	ldi	r26, 0x07	; 7
    ad16:	b0 e0       	ldi	r27, 0x00	; 0
    ad18:	e0 e9       	ldi	r30, 0x90	; 144
    ad1a:	f6 e5       	ldi	r31, 0x56	; 86
    ad1c:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    ad20:	8c 01       	movw	r16, r24
    ad22:	7b 01       	movw	r14, r22
    ad24:	dc 01       	movw	r26, r24
    ad26:	2d 90       	ld	r2, X+
    ad28:	3c 90       	ld	r3, X
    ad2a:	fb 01       	movw	r30, r22
    ad2c:	80 81       	ld	r24, Z
    ad2e:	8f 32       	cpi	r24, 0x2F	; 47
    ad30:	11 f0       	breq	.+4      	; 0xad36 <follow_path+0x22>
    ad32:	8c 35       	cpi	r24, 0x5C	; 92
    ad34:	11 f4       	brne	.+4      	; 0xad3a <follow_path+0x26>
    ad36:	97 01       	movw	r18, r14
    ad38:	0b c0       	rjmp	.+22     	; 0xad50 <follow_path+0x3c>
    ad3a:	f1 01       	movw	r30, r2
    ad3c:	85 89       	ldd	r24, Z+21	; 0x15
    ad3e:	96 89       	ldd	r25, Z+22	; 0x16
    ad40:	a7 89       	ldd	r26, Z+23	; 0x17
    ad42:	b0 8d       	ldd	r27, Z+24	; 0x18
    ad44:	f8 01       	movw	r30, r16
    ad46:	86 83       	std	Z+6, r24	; 0x06
    ad48:	97 83       	std	Z+7, r25	; 0x07
    ad4a:	a0 87       	std	Z+8, r26	; 0x08
    ad4c:	b1 87       	std	Z+9, r27	; 0x09
    ad4e:	0e c0       	rjmp	.+28     	; 0xad6c <follow_path+0x58>
    ad50:	79 01       	movw	r14, r18
    ad52:	d9 01       	movw	r26, r18
    ad54:	8c 91       	ld	r24, X
    ad56:	2f 5f       	subi	r18, 0xFF	; 255
    ad58:	3f 4f       	sbci	r19, 0xFF	; 255
    ad5a:	8f 32       	cpi	r24, 0x2F	; 47
    ad5c:	c9 f3       	breq	.-14     	; 0xad50 <follow_path+0x3c>
    ad5e:	8c 35       	cpi	r24, 0x5C	; 92
    ad60:	b9 f3       	breq	.-18     	; 0xad50 <follow_path+0x3c>
    ad62:	f8 01       	movw	r30, r16
    ad64:	16 82       	std	Z+6, r1	; 0x06
    ad66:	17 82       	std	Z+7, r1	; 0x07
    ad68:	10 86       	std	Z+8, r1	; 0x08
    ad6a:	11 86       	std	Z+9, r1	; 0x09
    ad6c:	d7 01       	movw	r26, r14
    ad6e:	8c 91       	ld	r24, X
    ad70:	80 32       	cpi	r24, 0x20	; 32
    ad72:	50 f0       	brcs	.+20     	; 0xad88 <follow_path+0x74>
    ad74:	f8 01       	movw	r30, r16
    ad76:	7c 96       	adiw	r30, 0x1c	; 28
    ad78:	fb 83       	std	Y+3, r31	; 0x03
    ad7a:	ea 83       	std	Y+2, r30	; 0x02
    ad7c:	91 01       	movw	r18, r2
    ad7e:	2b 5c       	subi	r18, 0xCB	; 203
    ad80:	3f 4f       	sbci	r19, 0xFF	; 255
    ad82:	3d 83       	std	Y+5, r19	; 0x05
    ad84:	2c 83       	std	Y+4, r18	; 0x04
    ad86:	87 c0       	rjmp	.+270    	; 0xae96 <follow_path+0x182>
    ad88:	80 e8       	ldi	r24, 0x80	; 128
    ad8a:	d8 01       	movw	r26, r16
    ad8c:	97 96       	adiw	r26, 0x27	; 39
    ad8e:	8c 93       	st	X, r24
    ad90:	40 e0       	ldi	r20, 0x00	; 0
    ad92:	50 e0       	ldi	r21, 0x00	; 0
    ad94:	ba 01       	movw	r22, r20
    ad96:	c8 01       	movw	r24, r16
    ad98:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <dir_sdi>
    ad9c:	d8 c1       	rjmp	.+944    	; 0xb14e <follow_path+0x43a>
    ad9e:	8f 32       	cpi	r24, 0x2F	; 47
    ada0:	91 05       	cpc	r25, r1
    ada2:	09 f4       	brne	.+2      	; 0xada6 <follow_path+0x92>
    ada4:	83 c0       	rjmp	.+262    	; 0xaeac <follow_path+0x198>
    ada6:	8c 35       	cpi	r24, 0x5C	; 92
    ada8:	91 05       	cpc	r25, r1
    adaa:	09 f4       	brne	.+2      	; 0xadae <follow_path+0x9a>
    adac:	7f c0       	rjmp	.+254    	; 0xaeac <follow_path+0x198>
    adae:	a1 14       	cp	r10, r1
    adb0:	f1 e0       	ldi	r31, 0x01	; 1
    adb2:	bf 06       	cpc	r11, r31
    adb4:	09 f4       	brne	.+2      	; 0xadb8 <follow_path+0xa4>
    adb6:	ac c1       	rjmp	.+856    	; 0xb110 <follow_path+0x3fc>
    adb8:	61 e0       	ldi	r22, 0x01	; 1
    adba:	70 e0       	ldi	r23, 0x00	; 0
    adbc:	0e 94 58 6e 	call	0xdcb0	; 0xdcb0 <ff_convert>
    adc0:	00 97       	sbiw	r24, 0x00	; 0
    adc2:	09 f4       	brne	.+2      	; 0xadc6 <follow_path+0xb2>
    adc4:	a5 c1       	rjmp	.+842    	; 0xb110 <follow_path+0x3fc>
    adc6:	80 38       	cpi	r24, 0x80	; 128
    adc8:	91 05       	cpc	r25, r1
    adca:	28 f4       	brcc	.+10     	; 0xadd6 <follow_path+0xc2>
    adcc:	e8 ed       	ldi	r30, 0xD8	; 216
    adce:	f7 e0       	ldi	r31, 0x07	; 7
    add0:	21 91       	ld	r18, Z+
    add2:	21 11       	cpse	r18, r1
    add4:	79 c0       	rjmp	.+242    	; 0xaec8 <follow_path+0x1b4>
    add6:	d3 01       	movw	r26, r6
    add8:	8d 93       	st	X+, r24
    adda:	9d 93       	st	X+, r25
    addc:	3d 01       	movw	r6, r26
    adde:	bf 82       	std	Y+7, r11	; 0x07
    ade0:	ae 82       	std	Y+6, r10	; 0x06
    ade2:	ae 80       	ldd	r10, Y+6	; 0x06
    ade4:	bf 80       	ldd	r11, Y+7	; 0x07
    ade6:	bf ef       	ldi	r27, 0xFF	; 255
    ade8:	ab 1a       	sub	r10, r27
    adea:	bb 0a       	sbc	r11, r27
    adec:	f4 01       	movw	r30, r8
    adee:	81 91       	ld	r24, Z+
    adf0:	4f 01       	movw	r8, r30
    adf2:	90 e0       	ldi	r25, 0x00	; 0
    adf4:	80 32       	cpi	r24, 0x20	; 32
    adf6:	91 05       	cpc	r25, r1
    adf8:	90 f6       	brcc	.-92     	; 0xad9e <follow_path+0x8a>
    adfa:	ea 0c       	add	r14, r10
    adfc:	fb 1c       	adc	r15, r11
    adfe:	80 97       	sbiw	r24, 0x20	; 32
    ae00:	08 f0       	brcs	.+2      	; 0xae04 <follow_path+0xf0>
    ae02:	68 c0       	rjmp	.+208    	; 0xaed4 <follow_path+0x1c0>
    ae04:	b4 e0       	ldi	r27, 0x04	; 4
    ae06:	b9 83       	std	Y+1, r27	; 0x01
    ae08:	ee 81       	ldd	r30, Y+6	; 0x06
    ae0a:	ff 81       	ldd	r31, Y+7	; 0x07
    ae0c:	ee 0f       	add	r30, r30
    ae0e:	ff 1f       	adc	r31, r31
    ae10:	2e 81       	ldd	r18, Y+6	; 0x06
    ae12:	3f 81       	ldd	r19, Y+7	; 0x07
    ae14:	21 30       	cpi	r18, 0x01	; 1
    ae16:	31 05       	cpc	r19, r1
    ae18:	09 f0       	breq	.+2      	; 0xae1c <follow_path+0x108>
    ae1a:	5e c0       	rjmp	.+188    	; 0xaed8 <follow_path+0x1c4>
    ae1c:	d6 01       	movw	r26, r12
    ae1e:	8d 91       	ld	r24, X+
    ae20:	9c 91       	ld	r25, X
    ae22:	8e 97       	sbiw	r24, 0x2e	; 46
    ae24:	09 f0       	breq	.+2      	; 0xae28 <follow_path+0x114>
    ae26:	65 c0       	rjmp	.+202    	; 0xaef2 <follow_path+0x1de>
    ae28:	ec 0d       	add	r30, r12
    ae2a:	fd 1d       	adc	r31, r13
    ae2c:	11 82       	std	Z+1, r1	; 0x01
    ae2e:	10 82       	st	Z, r1
    ae30:	f8 01       	movw	r30, r16
    ae32:	7c 96       	adiw	r30, 0x1c	; 28
    ae34:	80 e0       	ldi	r24, 0x00	; 0
    ae36:	90 e0       	ldi	r25, 0x00	; 0
    ae38:	2e 81       	ldd	r18, Y+6	; 0x06
    ae3a:	3f 81       	ldd	r19, Y+7	; 0x07
    ae3c:	82 17       	cp	r24, r18
    ae3e:	93 07       	cpc	r25, r19
    ae40:	08 f0       	brcs	.+2      	; 0xae44 <follow_path+0x130>
    ae42:	5a c0       	rjmp	.+180    	; 0xaef8 <follow_path+0x1e4>
    ae44:	2e e2       	ldi	r18, 0x2E	; 46
    ae46:	21 93       	st	Z+, r18
    ae48:	01 96       	adiw	r24, 0x01	; 1
    ae4a:	8b 30       	cpi	r24, 0x0B	; 11
    ae4c:	91 05       	cpc	r25, r1
    ae4e:	a1 f7       	brne	.-24     	; 0xae38 <follow_path+0x124>
    ae50:	89 81       	ldd	r24, Y+1	; 0x01
    ae52:	80 62       	ori	r24, 0x20	; 32
    ae54:	d8 01       	movw	r26, r16
    ae56:	97 96       	adiw	r26, 0x27	; 39
    ae58:	8c 93       	st	X, r24
    ae5a:	c8 01       	movw	r24, r16
    ae5c:	a0 dc       	rcall	.-1728   	; 0xa79e <dir_find>
    ae5e:	d8 01       	movw	r26, r16
    ae60:	97 96       	adiw	r26, 0x27	; 39
    ae62:	2c 91       	ld	r18, X
    ae64:	00 97       	sbiw	r24, 0x00	; 0
    ae66:	09 f0       	breq	.+2      	; 0xae6a <follow_path+0x156>
    ae68:	56 c1       	rjmp	.+684    	; 0xb116 <follow_path+0x402>
    ae6a:	22 fd       	sbrc	r18, 2
    ae6c:	70 c1       	rjmp	.+736    	; 0xb14e <follow_path+0x43a>
    ae6e:	f8 01       	movw	r30, r16
    ae70:	84 81       	ldd	r24, Z+4	; 0x04
    ae72:	84 ff       	sbrs	r24, 4
    ae74:	63 c1       	rjmp	.+710    	; 0xb13c <follow_path+0x428>
    ae76:	66 85       	ldd	r22, Z+14	; 0x0e
    ae78:	77 85       	ldd	r23, Z+15	; 0x0f
    ae7a:	71 70       	andi	r23, 0x01	; 1
    ae7c:	2c 81       	ldd	r18, Y+4	; 0x04
    ae7e:	3d 81       	ldd	r19, Y+5	; 0x05
    ae80:	62 0f       	add	r22, r18
    ae82:	73 1f       	adc	r23, r19
    ae84:	d1 01       	movw	r26, r2
    ae86:	8c 91       	ld	r24, X
    ae88:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    ae8c:	f8 01       	movw	r30, r16
    ae8e:	66 83       	std	Z+6, r22	; 0x06
    ae90:	77 83       	std	Z+7, r23	; 0x07
    ae92:	80 87       	std	Z+8, r24	; 0x08
    ae94:	91 87       	std	Z+9, r25	; 0x09
    ae96:	d8 01       	movw	r26, r16
    ae98:	ed 91       	ld	r30, X+
    ae9a:	fc 91       	ld	r31, X
    ae9c:	c3 84       	ldd	r12, Z+11	; 0x0b
    ae9e:	d4 84       	ldd	r13, Z+12	; 0x0c
    aea0:	26 01       	movw	r4, r12
    aea2:	36 01       	movw	r6, r12
    aea4:	47 01       	movw	r8, r14
    aea6:	1f 82       	std	Y+7, r1	; 0x07
    aea8:	1e 82       	std	Y+6, r1	; 0x06
    aeaa:	9b cf       	rjmp	.-202    	; 0xade2 <follow_path+0xce>
    aeac:	f7 01       	movw	r30, r14
    aeae:	ea 0d       	add	r30, r10
    aeb0:	fb 1d       	adc	r31, r11
    aeb2:	03 c0       	rjmp	.+6      	; 0xaeba <follow_path+0x1a6>
    aeb4:	2c 35       	cpi	r18, 0x5C	; 92
    aeb6:	09 f0       	breq	.+2      	; 0xaeba <follow_path+0x1a6>
    aeb8:	a0 cf       	rjmp	.-192    	; 0xadfa <follow_path+0xe6>
    aeba:	5f 01       	movw	r10, r30
    aebc:	ae 18       	sub	r10, r14
    aebe:	bf 08       	sbc	r11, r15
    aec0:	21 91       	ld	r18, Z+
    aec2:	2f 32       	cpi	r18, 0x2F	; 47
    aec4:	b9 f7       	brne	.-18     	; 0xaeb4 <follow_path+0x1a0>
    aec6:	f9 cf       	rjmp	.-14     	; 0xaeba <follow_path+0x1a6>
    aec8:	30 e0       	ldi	r19, 0x00	; 0
    aeca:	82 17       	cp	r24, r18
    aecc:	93 07       	cpc	r25, r19
    aece:	09 f0       	breq	.+2      	; 0xaed2 <follow_path+0x1be>
    aed0:	7f cf       	rjmp	.-258    	; 0xadd0 <follow_path+0xbc>
    aed2:	1e c1       	rjmp	.+572    	; 0xb110 <follow_path+0x3fc>
    aed4:	19 82       	std	Y+1, r1	; 0x01
    aed6:	98 cf       	rjmp	.-208    	; 0xae08 <follow_path+0xf4>
    aed8:	2e 81       	ldd	r18, Y+6	; 0x06
    aeda:	3f 81       	ldd	r19, Y+7	; 0x07
    aedc:	22 30       	cpi	r18, 0x02	; 2
    aede:	31 05       	cpc	r19, r1
    aee0:	41 f4       	brne	.+16     	; 0xaef2 <follow_path+0x1de>
    aee2:	d6 01       	movw	r26, r12
    aee4:	12 96       	adiw	r26, 0x02	; 2
    aee6:	8d 91       	ld	r24, X+
    aee8:	9c 91       	ld	r25, X
    aeea:	13 97       	sbiw	r26, 0x03	; 3
    aeec:	8e 97       	sbiw	r24, 0x2e	; 46
    aeee:	09 f4       	brne	.+2      	; 0xaef2 <follow_path+0x1de>
    aef0:	96 cf       	rjmp	.-212    	; 0xae1e <follow_path+0x10a>
    aef2:	ec 0d       	add	r30, r12
    aef4:	fd 1d       	adc	r31, r13
    aef6:	0d c0       	rjmp	.+26     	; 0xaf12 <follow_path+0x1fe>
    aef8:	20 e2       	ldi	r18, 0x20	; 32
    aefa:	a5 cf       	rjmp	.-182    	; 0xae46 <follow_path+0x132>
    aefc:	92 91       	ld	r25, -Z
    aefe:	82 91       	ld	r24, -Z
    af00:	80 32       	cpi	r24, 0x20	; 32
    af02:	91 05       	cpc	r25, r1
    af04:	59 f4       	brne	.+22     	; 0xaf1c <follow_path+0x208>
    af06:	2e 81       	ldd	r18, Y+6	; 0x06
    af08:	3f 81       	ldd	r19, Y+7	; 0x07
    af0a:	21 50       	subi	r18, 0x01	; 1
    af0c:	31 09       	sbc	r19, r1
    af0e:	3f 83       	std	Y+7, r19	; 0x07
    af10:	2e 83       	std	Y+6, r18	; 0x06
    af12:	8e 81       	ldd	r24, Y+6	; 0x06
    af14:	9f 81       	ldd	r25, Y+7	; 0x07
    af16:	89 2b       	or	r24, r25
    af18:	89 f7       	brne	.-30     	; 0xaefc <follow_path+0x1e8>
    af1a:	02 c0       	rjmp	.+4      	; 0xaf20 <follow_path+0x20c>
    af1c:	8e 97       	sbiw	r24, 0x2e	; 46
    af1e:	99 f3       	breq	.-26     	; 0xaf06 <follow_path+0x1f2>
    af20:	ae 80       	ldd	r10, Y+6	; 0x06
    af22:	bf 80       	ldd	r11, Y+7	; 0x07
    af24:	aa 0c       	add	r10, r10
    af26:	bb 1c       	adc	r11, r11
    af28:	ac 0c       	add	r10, r12
    af2a:	bd 1c       	adc	r11, r13
    af2c:	d5 01       	movw	r26, r10
    af2e:	1d 92       	st	X+, r1
    af30:	1c 92       	st	X, r1
    af32:	ee 81       	ldd	r30, Y+6	; 0x06
    af34:	ff 81       	ldd	r31, Y+7	; 0x07
    af36:	ef 2b       	or	r30, r31
    af38:	09 f4       	brne	.+2      	; 0xaf3c <follow_path+0x228>
    af3a:	ea c0       	rjmp	.+468    	; 0xb110 <follow_path+0x3fc>
    af3c:	4b e0       	ldi	r20, 0x0B	; 11
    af3e:	50 e0       	ldi	r21, 0x00	; 0
    af40:	60 e2       	ldi	r22, 0x20	; 32
    af42:	70 e0       	ldi	r23, 0x00	; 0
    af44:	8a 81       	ldd	r24, Y+2	; 0x02
    af46:	9b 81       	ldd	r25, Y+3	; 0x03
    af48:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    af4c:	80 e0       	ldi	r24, 0x00	; 0
    af4e:	90 e0       	ldi	r25, 0x00	; 0
    af50:	d2 01       	movw	r26, r4
    af52:	2d 91       	ld	r18, X+
    af54:	3d 91       	ld	r19, X+
    af56:	2d 01       	movw	r4, r26
    af58:	20 32       	cpi	r18, 0x20	; 32
    af5a:	31 05       	cpc	r19, r1
    af5c:	11 f4       	brne	.+4      	; 0xaf62 <follow_path+0x24e>
    af5e:	01 96       	adiw	r24, 0x01	; 1
    af60:	f7 cf       	rjmp	.-18     	; 0xaf50 <follow_path+0x23c>
    af62:	2e 32       	cpi	r18, 0x2E	; 46
    af64:	31 05       	cpc	r19, r1
    af66:	d9 f3       	breq	.-10     	; 0xaf5e <follow_path+0x24a>
    af68:	00 97       	sbiw	r24, 0x00	; 0
    af6a:	19 f0       	breq	.+6      	; 0xaf72 <follow_path+0x25e>
    af6c:	b9 81       	ldd	r27, Y+1	; 0x01
    af6e:	b3 60       	ori	r27, 0x03	; 3
    af70:	b9 83       	std	Y+1, r27	; 0x01
    af72:	f5 01       	movw	r30, r10
    af74:	32 91       	ld	r19, -Z
    af76:	22 91       	ld	r18, -Z
    af78:	2e 32       	cpi	r18, 0x2E	; 46
    af7a:	31 05       	cpc	r19, r1
    af7c:	41 f0       	breq	.+16     	; 0xaf8e <follow_path+0x27a>
    af7e:	2e 81       	ldd	r18, Y+6	; 0x06
    af80:	3f 81       	ldd	r19, Y+7	; 0x07
    af82:	21 50       	subi	r18, 0x01	; 1
    af84:	31 09       	sbc	r19, r1
    af86:	3f 83       	std	Y+7, r19	; 0x07
    af88:	2e 83       	std	Y+6, r18	; 0x06
    af8a:	23 2b       	or	r18, r19
    af8c:	99 f7       	brne	.-26     	; 0xaf74 <follow_path+0x260>
    af8e:	48 e0       	ldi	r20, 0x08	; 8
    af90:	a4 2e       	mov	r10, r20
    af92:	b1 2c       	mov	r11, r1
    af94:	81 2c       	mov	r8, r1
    af96:	91 2c       	mov	r9, r1
    af98:	41 2c       	mov	r4, r1
    af9a:	3c 01       	movw	r6, r24
    af9c:	3f ef       	ldi	r19, 0xFF	; 255
    af9e:	63 1a       	sub	r6, r19
    afa0:	73 0a       	sbc	r7, r19
    afa2:	88 0f       	add	r24, r24
    afa4:	99 1f       	adc	r25, r25
    afa6:	f6 01       	movw	r30, r12
    afa8:	e8 0f       	add	r30, r24
    afaa:	f9 1f       	adc	r31, r25
    afac:	80 81       	ld	r24, Z
    afae:	91 81       	ldd	r25, Z+1	; 0x01
    afb0:	00 97       	sbiw	r24, 0x00	; 0
    afb2:	09 f4       	brne	.+2      	; 0xafb6 <follow_path+0x2a2>
    afb4:	75 c0       	rjmp	.+234    	; 0xb0a0 <follow_path+0x38c>
    afb6:	80 32       	cpi	r24, 0x20	; 32
    afb8:	91 05       	cpc	r25, r1
    afba:	41 f0       	breq	.+16     	; 0xafcc <follow_path+0x2b8>
    afbc:	8e 32       	cpi	r24, 0x2E	; 46
    afbe:	91 05       	cpc	r25, r1
    afc0:	51 f4       	brne	.+20     	; 0xafd6 <follow_path+0x2c2>
    afc2:	8e 81       	ldd	r24, Y+6	; 0x06
    afc4:	9f 81       	ldd	r25, Y+7	; 0x07
    afc6:	68 16       	cp	r6, r24
    afc8:	79 06       	cpc	r7, r25
    afca:	71 f0       	breq	.+28     	; 0xafe8 <follow_path+0x2d4>
    afcc:	99 81       	ldd	r25, Y+1	; 0x01
    afce:	93 60       	ori	r25, 0x03	; 3
    afd0:	99 83       	std	Y+1, r25	; 0x01
    afd2:	c3 01       	movw	r24, r6
    afd4:	e2 cf       	rjmp	.-60     	; 0xaf9a <follow_path+0x286>
    afd6:	8a 14       	cp	r8, r10
    afd8:	9b 04       	cpc	r9, r11
    afda:	50 f4       	brcc	.+20     	; 0xaff0 <follow_path+0x2dc>
    afdc:	ae 81       	ldd	r26, Y+6	; 0x06
    afde:	bf 81       	ldd	r27, Y+7	; 0x07
    afe0:	6a 16       	cp	r6, r26
    afe2:	7b 06       	cpc	r7, r27
    afe4:	49 f5       	brne	.+82     	; 0xb038 <follow_path+0x324>
    afe6:	ad c0       	rjmp	.+346    	; 0xb142 <follow_path+0x42e>
    afe8:	8a 14       	cp	r8, r10
    afea:	9b 04       	cpc	r9, r11
    afec:	08 f4       	brcc	.+2      	; 0xaff0 <follow_path+0x2dc>
    afee:	a9 c0       	rjmp	.+338    	; 0xb142 <follow_path+0x42e>
    aff0:	bb e0       	ldi	r27, 0x0B	; 11
    aff2:	ab 16       	cp	r10, r27
    aff4:	b1 04       	cpc	r11, r1
    aff6:	39 f4       	brne	.+14     	; 0xb006 <follow_path+0x2f2>
    aff8:	e9 81       	ldd	r30, Y+1	; 0x01
    affa:	e3 60       	ori	r30, 0x03	; 3
    affc:	e9 83       	std	Y+1, r30	; 0x01
    affe:	2b e0       	ldi	r18, 0x0B	; 11
    b000:	a2 2e       	mov	r10, r18
    b002:	b1 2c       	mov	r11, r1
    b004:	4d c0       	rjmp	.+154    	; 0xb0a0 <follow_path+0x38c>
    b006:	2e 81       	ldd	r18, Y+6	; 0x06
    b008:	3f 81       	ldd	r19, Y+7	; 0x07
    b00a:	62 16       	cp	r6, r18
    b00c:	73 06       	cpc	r7, r19
    b00e:	49 f0       	breq	.+18     	; 0xb022 <follow_path+0x30e>
    b010:	39 81       	ldd	r19, Y+1	; 0x01
    b012:	33 60       	ori	r19, 0x03	; 3
    b014:	39 83       	std	Y+1, r19	; 0x01
    b016:	8e 81       	ldd	r24, Y+6	; 0x06
    b018:	9f 81       	ldd	r25, Y+7	; 0x07
    b01a:	86 15       	cp	r24, r6
    b01c:	97 05       	cpc	r25, r7
    b01e:	08 f4       	brcc	.+2      	; 0xb022 <follow_path+0x30e>
    b020:	3f c0       	rjmp	.+126    	; 0xb0a0 <follow_path+0x38c>
    b022:	44 0c       	add	r4, r4
    b024:	44 0c       	add	r4, r4
    b026:	6e 80       	ldd	r6, Y+6	; 0x06
    b028:	7f 80       	ldd	r7, Y+7	; 0x07
    b02a:	8b e0       	ldi	r24, 0x0B	; 11
    b02c:	a8 2e       	mov	r10, r24
    b02e:	b1 2c       	mov	r11, r1
    b030:	98 e0       	ldi	r25, 0x08	; 8
    b032:	89 2e       	mov	r8, r25
    b034:	91 2c       	mov	r9, r1
    b036:	cd cf       	rjmp	.-102    	; 0xafd2 <follow_path+0x2be>
    b038:	80 38       	cpi	r24, 0x80	; 128
    b03a:	91 05       	cpc	r25, r1
    b03c:	80 f0       	brcs	.+32     	; 0xb05e <follow_path+0x34a>
    b03e:	60 e0       	ldi	r22, 0x00	; 0
    b040:	70 e0       	ldi	r23, 0x00	; 0
    b042:	0e 94 58 6e 	call	0xdcb0	; 0xdcb0 <ff_convert>
    b046:	00 97       	sbiw	r24, 0x00	; 0
    b048:	29 f0       	breq	.+10     	; 0xb054 <follow_path+0x340>
    b04a:	fc 01       	movw	r30, r24
    b04c:	e2 5b       	subi	r30, 0xB2	; 178
    b04e:	fd 4f       	sbci	r31, 0xFD	; 253
    b050:	80 81       	ld	r24, Z
    b052:	90 e0       	ldi	r25, 0x00	; 0
    b054:	a9 81       	ldd	r26, Y+1	; 0x01
    b056:	a2 60       	ori	r26, 0x02	; 2
    b058:	a9 83       	std	Y+1, r26	; 0x01
    b05a:	00 97       	sbiw	r24, 0x00	; 0
    b05c:	49 f0       	breq	.+18     	; 0xb070 <follow_path+0x35c>
    b05e:	e1 ee       	ldi	r30, 0xE1	; 225
    b060:	f7 e0       	ldi	r31, 0x07	; 7
    b062:	21 91       	ld	r18, Z+
    b064:	22 23       	and	r18, r18
    b066:	51 f0       	breq	.+20     	; 0xb07c <follow_path+0x368>
    b068:	30 e0       	ldi	r19, 0x00	; 0
    b06a:	82 17       	cp	r24, r18
    b06c:	93 07       	cpc	r25, r19
    b06e:	c9 f7       	brne	.-14     	; 0xb062 <follow_path+0x34e>
    b070:	b9 81       	ldd	r27, Y+1	; 0x01
    b072:	b3 60       	ori	r27, 0x03	; 3
    b074:	b9 83       	std	Y+1, r27	; 0x01
    b076:	8f e5       	ldi	r24, 0x5F	; 95
    b078:	90 e0       	ldi	r25, 0x00	; 0
    b07a:	09 c0       	rjmp	.+18     	; 0xb08e <follow_path+0x37a>
    b07c:	9c 01       	movw	r18, r24
    b07e:	21 54       	subi	r18, 0x41	; 65
    b080:	31 09       	sbc	r19, r1
    b082:	2a 31       	cpi	r18, 0x1A	; 26
    b084:	31 05       	cpc	r19, r1
    b086:	c8 f5       	brcc	.+114    	; 0xb0fa <follow_path+0x3e6>
    b088:	e4 2d       	mov	r30, r4
    b08a:	e2 60       	ori	r30, 0x02	; 2
    b08c:	4e 2e       	mov	r4, r30
    b08e:	f8 01       	movw	r30, r16
    b090:	e8 0d       	add	r30, r8
    b092:	f9 1d       	adc	r31, r9
    b094:	84 8f       	std	Z+28, r24	; 0x1c
    b096:	94 01       	movw	r18, r8
    b098:	2f 5f       	subi	r18, 0xFF	; 255
    b09a:	3f 4f       	sbci	r19, 0xFF	; 255
    b09c:	49 01       	movw	r8, r18
    b09e:	99 cf       	rjmp	.-206    	; 0xafd2 <follow_path+0x2be>
    b0a0:	d8 01       	movw	r26, r16
    b0a2:	5c 96       	adiw	r26, 0x1c	; 28
    b0a4:	8c 91       	ld	r24, X
    b0a6:	5c 97       	sbiw	r26, 0x1c	; 28
    b0a8:	85 3e       	cpi	r24, 0xE5	; 229
    b0aa:	19 f4       	brne	.+6      	; 0xb0b2 <follow_path+0x39e>
    b0ac:	e5 e0       	ldi	r30, 0x05	; 5
    b0ae:	5c 96       	adiw	r26, 0x1c	; 28
    b0b0:	ec 93       	st	X, r30
    b0b2:	f8 e0       	ldi	r31, 0x08	; 8
    b0b4:	af 16       	cp	r10, r31
    b0b6:	b1 04       	cpc	r11, r1
    b0b8:	11 f4       	brne	.+4      	; 0xb0be <follow_path+0x3aa>
    b0ba:	44 0c       	add	r4, r4
    b0bc:	44 0c       	add	r4, r4
    b0be:	84 2d       	mov	r24, r4
    b0c0:	8c 70       	andi	r24, 0x0C	; 12
    b0c2:	8c 30       	cpi	r24, 0x0C	; 12
    b0c4:	21 f0       	breq	.+8      	; 0xb0ce <follow_path+0x3ba>
    b0c6:	94 2d       	mov	r25, r4
    b0c8:	93 70       	andi	r25, 0x03	; 3
    b0ca:	93 30       	cpi	r25, 0x03	; 3
    b0cc:	19 f4       	brne	.+6      	; 0xb0d4 <follow_path+0x3c0>
    b0ce:	29 81       	ldd	r18, Y+1	; 0x01
    b0d0:	22 60       	ori	r18, 0x02	; 2
    b0d2:	29 83       	std	Y+1, r18	; 0x01
    b0d4:	39 81       	ldd	r19, Y+1	; 0x01
    b0d6:	31 fd       	sbrc	r19, 1
    b0d8:	0b c0       	rjmp	.+22     	; 0xb0f0 <follow_path+0x3dc>
    b0da:	94 2d       	mov	r25, r4
    b0dc:	93 70       	andi	r25, 0x03	; 3
    b0de:	91 30       	cpi	r25, 0x01	; 1
    b0e0:	11 f4       	brne	.+4      	; 0xb0e6 <follow_path+0x3d2>
    b0e2:	30 61       	ori	r19, 0x10	; 16
    b0e4:	39 83       	std	Y+1, r19	; 0x01
    b0e6:	84 30       	cpi	r24, 0x04	; 4
    b0e8:	19 f4       	brne	.+6      	; 0xb0f0 <follow_path+0x3dc>
    b0ea:	89 81       	ldd	r24, Y+1	; 0x01
    b0ec:	88 60       	ori	r24, 0x08	; 8
    b0ee:	89 83       	std	Y+1, r24	; 0x01
    b0f0:	e9 81       	ldd	r30, Y+1	; 0x01
    b0f2:	d8 01       	movw	r26, r16
    b0f4:	97 96       	adiw	r26, 0x27	; 39
    b0f6:	ec 93       	st	X, r30
    b0f8:	b0 ce       	rjmp	.-672    	; 0xae5a <follow_path+0x146>
    b0fa:	9c 01       	movw	r18, r24
    b0fc:	21 56       	subi	r18, 0x61	; 97
    b0fe:	31 09       	sbc	r19, r1
    b100:	2a 31       	cpi	r18, 0x1A	; 26
    b102:	31 05       	cpc	r19, r1
    b104:	20 f6       	brcc	.-120    	; 0xb08e <follow_path+0x37a>
    b106:	f4 2d       	mov	r31, r4
    b108:	f1 60       	ori	r31, 0x01	; 1
    b10a:	4f 2e       	mov	r4, r31
    b10c:	80 97       	sbiw	r24, 0x20	; 32
    b10e:	bf cf       	rjmp	.-130    	; 0xb08e <follow_path+0x37a>
    b110:	86 e0       	ldi	r24, 0x06	; 6
    b112:	90 e0       	ldi	r25, 0x00	; 0
    b114:	1c c0       	rjmp	.+56     	; 0xb14e <follow_path+0x43a>
    b116:	84 30       	cpi	r24, 0x04	; 4
    b118:	91 05       	cpc	r25, r1
    b11a:	c9 f4       	brne	.+50     	; 0xb14e <follow_path+0x43a>
    b11c:	32 2f       	mov	r19, r18
    b11e:	34 70       	andi	r19, 0x04	; 4
    b120:	25 ff       	sbrs	r18, 5
    b122:	0a c0       	rjmp	.+20     	; 0xb138 <follow_path+0x424>
    b124:	33 23       	and	r19, r19
    b126:	09 f4       	brne	.+2      	; 0xb12a <follow_path+0x416>
    b128:	b6 ce       	rjmp	.-660    	; 0xae96 <follow_path+0x182>
    b12a:	80 e8       	ldi	r24, 0x80	; 128
    b12c:	d8 01       	movw	r26, r16
    b12e:	97 96       	adiw	r26, 0x27	; 39
    b130:	8c 93       	st	X, r24
    b132:	80 e0       	ldi	r24, 0x00	; 0
    b134:	90 e0       	ldi	r25, 0x00	; 0
    b136:	0b c0       	rjmp	.+22     	; 0xb14e <follow_path+0x43a>
    b138:	31 11       	cpse	r19, r1
    b13a:	09 c0       	rjmp	.+18     	; 0xb14e <follow_path+0x43a>
    b13c:	85 e0       	ldi	r24, 0x05	; 5
    b13e:	90 e0       	ldi	r25, 0x00	; 0
    b140:	06 c0       	rjmp	.+12     	; 0xb14e <follow_path+0x43a>
    b142:	bb e0       	ldi	r27, 0x0B	; 11
    b144:	ab 16       	cp	r10, r27
    b146:	b1 04       	cpc	r11, r1
    b148:	09 f0       	breq	.+2      	; 0xb14c <follow_path+0x438>
    b14a:	6b cf       	rjmp	.-298    	; 0xb022 <follow_path+0x30e>
    b14c:	55 cf       	rjmp	.-342    	; 0xaff8 <follow_path+0x2e4>
    b14e:	27 96       	adiw	r28, 0x07	; 7
    b150:	e2 e1       	ldi	r30, 0x12	; 18
    b152:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000b156 <f_mount>:
    b156:	a6 e0       	ldi	r26, 0x06	; 6
    b158:	b0 e0       	ldi	r27, 0x00	; 0
    b15a:	e1 eb       	ldi	r30, 0xB1	; 177
    b15c:	f8 e5       	ldi	r31, 0x58	; 88
    b15e:	0c 94 14 ed 	jmp	0x1da28	; 0x1da28 <__prologue_saves__+0x1e>
    b162:	9c 83       	std	Y+4, r25	; 0x04
    b164:	8b 83       	std	Y+3, r24	; 0x03
    b166:	7e 83       	std	Y+6, r23	; 0x06
    b168:	6d 83       	std	Y+5, r22	; 0x05
    b16a:	14 2f       	mov	r17, r20
    b16c:	7a 83       	std	Y+2, r23	; 0x02
    b16e:	69 83       	std	Y+1, r22	; 0x01
    b170:	ce 01       	movw	r24, r28
    b172:	01 96       	adiw	r24, 0x01	; 1
    b174:	0e 94 44 48 	call	0x9088	; 0x9088 <get_ldnumber>
    b178:	97 fd       	sbrc	r25, 7
    b17a:	22 c0       	rjmp	.+68     	; 0xb1c0 <f_mount+0x6a>
    b17c:	88 0f       	add	r24, r24
    b17e:	99 1f       	adc	r25, r25
    b180:	fc 01       	movw	r30, r24
    b182:	ee 5a       	subi	r30, 0xAE	; 174
    b184:	f7 4e       	sbci	r31, 0xE7	; 231
    b186:	01 90       	ld	r0, Z+
    b188:	f0 81       	ld	r31, Z
    b18a:	e0 2d       	mov	r30, r0
    b18c:	30 97       	sbiw	r30, 0x00	; 0
    b18e:	09 f0       	breq	.+2      	; 0xb192 <f_mount+0x3c>
    b190:	10 82       	st	Z, r1
    b192:	eb 81       	ldd	r30, Y+3	; 0x03
    b194:	fc 81       	ldd	r31, Y+4	; 0x04
    b196:	30 97       	sbiw	r30, 0x00	; 0
    b198:	09 f0       	breq	.+2      	; 0xb19c <f_mount+0x46>
    b19a:	10 82       	st	Z, r1
    b19c:	dc 01       	movw	r26, r24
    b19e:	ae 5a       	subi	r26, 0xAE	; 174
    b1a0:	b7 4e       	sbci	r27, 0xE7	; 231
    b1a2:	ed 93       	st	X+, r30
    b1a4:	fc 93       	st	X, r31
    b1a6:	ef 2b       	or	r30, r31
    b1a8:	71 f0       	breq	.+28     	; 0xb1c6 <f_mount+0x70>
    b1aa:	11 30       	cpi	r17, 0x01	; 1
    b1ac:	61 f4       	brne	.+24     	; 0xb1c6 <f_mount+0x70>
    b1ae:	40 e0       	ldi	r20, 0x00	; 0
    b1b0:	be 01       	movw	r22, r28
    b1b2:	6d 5f       	subi	r22, 0xFD	; 253
    b1b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b1b6:	ce 01       	movw	r24, r28
    b1b8:	05 96       	adiw	r24, 0x05	; 5
    b1ba:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    b1be:	05 c0       	rjmp	.+10     	; 0xb1ca <f_mount+0x74>
    b1c0:	8b e0       	ldi	r24, 0x0B	; 11
    b1c2:	90 e0       	ldi	r25, 0x00	; 0
    b1c4:	02 c0       	rjmp	.+4      	; 0xb1ca <f_mount+0x74>
    b1c6:	80 e0       	ldi	r24, 0x00	; 0
    b1c8:	90 e0       	ldi	r25, 0x00	; 0
    b1ca:	26 96       	adiw	r28, 0x06	; 6
    b1cc:	e3 e0       	ldi	r30, 0x03	; 3
    b1ce:	0c 94 30 ed 	jmp	0x1da60	; 0x1da60 <__epilogue_restores__+0x1e>

0000b1d2 <f_open>:
    b1d2:	2f 92       	push	r2
    b1d4:	3f 92       	push	r3
    b1d6:	4f 92       	push	r4
    b1d8:	5f 92       	push	r5
    b1da:	6f 92       	push	r6
    b1dc:	7f 92       	push	r7
    b1de:	8f 92       	push	r8
    b1e0:	9f 92       	push	r9
    b1e2:	af 92       	push	r10
    b1e4:	bf 92       	push	r11
    b1e6:	df 92       	push	r13
    b1e8:	ef 92       	push	r14
    b1ea:	ff 92       	push	r15
    b1ec:	0f 93       	push	r16
    b1ee:	1f 93       	push	r17
    b1f0:	cf 93       	push	r28
    b1f2:	df 93       	push	r29
    b1f4:	cd b7       	in	r28, 0x3d	; 61
    b1f6:	de b7       	in	r29, 0x3e	; 62
    b1f8:	e6 97       	sbiw	r28, 0x36	; 54
    b1fa:	0f b6       	in	r0, 0x3f	; 63
    b1fc:	f8 94       	cli
    b1fe:	de bf       	out	0x3e, r29	; 62
    b200:	0f be       	out	0x3f, r0	; 63
    b202:	cd bf       	out	0x3d, r28	; 61
    b204:	7a ab       	std	Y+50, r23	; 0x32
    b206:	69 ab       	std	Y+49, r22	; 0x31
    b208:	00 97       	sbiw	r24, 0x00	; 0
    b20a:	09 f4       	brne	.+2      	; 0xb20e <f_open+0x3c>
    b20c:	b0 c1       	rjmp	.+864    	; 0xb56e <f_open+0x39c>
    b20e:	94 2e       	mov	r9, r20
    b210:	7c 01       	movw	r14, r24
    b212:	24 2f       	mov	r18, r20
    b214:	2f 73       	andi	r18, 0x3F	; 63
    b216:	d2 2e       	mov	r13, r18
    b218:	42 2f       	mov	r20, r18
    b21a:	be 01       	movw	r22, r28
    b21c:	61 5d       	subi	r22, 0xD1	; 209
    b21e:	7f 4f       	sbci	r23, 0xFF	; 255
    b220:	ce 01       	movw	r24, r28
    b222:	c1 96       	adiw	r24, 0x31	; 49
    b224:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    b228:	00 97       	sbiw	r24, 0x00	; 0
    b22a:	09 f0       	breq	.+2      	; 0xb22e <f_open+0x5c>
    b22c:	9a c1       	rjmp	.+820    	; 0xb562 <f_open+0x390>
    b22e:	8f a5       	ldd	r24, Y+47	; 0x2f
    b230:	98 a9       	ldd	r25, Y+48	; 0x30
    b232:	9a 83       	std	Y+2, r25	; 0x02
    b234:	89 83       	std	Y+1, r24	; 0x01
    b236:	80 e0       	ldi	r24, 0x00	; 0
    b238:	92 e0       	ldi	r25, 0x02	; 2
    b23a:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    b23e:	5c 01       	movw	r10, r24
    b240:	00 97       	sbiw	r24, 0x00	; 0
    b242:	09 f4       	brne	.+2      	; 0xb246 <f_open+0x74>
    b244:	96 c1       	rjmp	.+812    	; 0xb572 <f_open+0x3a0>
    b246:	ef a5       	ldd	r30, Y+47	; 0x2f
    b248:	f8 a9       	ldd	r31, Y+48	; 0x30
    b24a:	94 87       	std	Z+12, r25	; 0x0c
    b24c:	83 87       	std	Z+11, r24	; 0x0b
    b24e:	69 a9       	ldd	r22, Y+49	; 0x31
    b250:	7a a9       	ldd	r23, Y+50	; 0x32
    b252:	ce 01       	movw	r24, r28
    b254:	01 96       	adiw	r24, 0x01	; 1
    b256:	5e dd       	rcall	.-1348   	; 0xad14 <follow_path>
    b258:	8c 01       	movw	r16, r24
    b25a:	89 2b       	or	r24, r25
    b25c:	29 f4       	brne	.+10     	; 0xb268 <f_open+0x96>
    b25e:	88 a5       	ldd	r24, Y+40	; 0x28
    b260:	87 ff       	sbrs	r24, 7
    b262:	02 c0       	rjmp	.+4      	; 0xb268 <f_open+0x96>
    b264:	06 e0       	ldi	r16, 0x06	; 6
    b266:	10 e0       	ldi	r17, 0x00	; 0
    b268:	89 2d       	mov	r24, r9
    b26a:	8c 71       	andi	r24, 0x1C	; 28
    b26c:	09 f4       	brne	.+2      	; 0xb270 <f_open+0x9e>
    b26e:	7e c0       	rjmp	.+252    	; 0xb36c <f_open+0x19a>
    b270:	01 15       	cp	r16, r1
    b272:	11 05       	cpc	r17, r1
    b274:	79 f0       	breq	.+30     	; 0xb294 <f_open+0xc2>
    b276:	04 30       	cpi	r16, 0x04	; 4
    b278:	11 05       	cpc	r17, r1
    b27a:	09 f0       	breq	.+2      	; 0xb27e <f_open+0xac>
    b27c:	8a c1       	rjmp	.+788    	; 0xb592 <f_open+0x3c0>
    b27e:	ce 01       	movw	r24, r28
    b280:	01 96       	adiw	r24, 0x01	; 1
    b282:	a4 db       	rcall	.-2232   	; 0xa9cc <dir_register>
    b284:	8c 01       	movw	r16, r24
    b286:	89 2b       	or	r24, r25
    b288:	09 f0       	breq	.+2      	; 0xb28c <f_open+0xba>
    b28a:	83 c1       	rjmp	.+774    	; 0xb592 <f_open+0x3c0>
    b28c:	8d 2d       	mov	r24, r13
    b28e:	88 60       	ori	r24, 0x08	; 8
    b290:	d8 2e       	mov	r13, r24
    b292:	06 c0       	rjmp	.+12     	; 0xb2a0 <f_open+0xce>
    b294:	8d 81       	ldd	r24, Y+5	; 0x05
    b296:	81 71       	andi	r24, 0x11	; 17
    b298:	09 f0       	breq	.+2      	; 0xb29c <f_open+0xca>
    b29a:	79 c1       	rjmp	.+754    	; 0xb58e <f_open+0x3bc>
    b29c:	92 fc       	sbrc	r9, 2
    b29e:	6e c1       	rjmp	.+732    	; 0xb57c <f_open+0x3aa>
    b2a0:	d3 fe       	sbrs	r13, 3
    b2a2:	74 c0       	rjmp	.+232    	; 0xb38c <f_open+0x1ba>
    b2a4:	0e 94 62 75 	call	0xeac4	; 0xeac4 <get_fattime>
    b2a8:	2b 01       	movw	r4, r22
    b2aa:	3c 01       	movw	r6, r24
    b2ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2b0:	b3 01       	movw	r22, r6
    b2b2:	a2 01       	movw	r20, r4
    b2b4:	0e 96       	adiw	r24, 0x0e	; 14
    b2b6:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    b2ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2be:	b3 01       	movw	r22, r6
    b2c0:	a2 01       	movw	r20, r4
    b2c2:	46 96       	adiw	r24, 0x16	; 22
    b2c4:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    b2c8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b2ca:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b2cc:	80 e2       	ldi	r24, 0x20	; 32
    b2ce:	83 87       	std	Z+11, r24	; 0x0b
    b2d0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b2d2:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b2d4:	8f a4       	ldd	r8, Y+47	; 0x2f
    b2d6:	98 a8       	ldd	r9, Y+48	; 0x30
    b2d8:	b8 01       	movw	r22, r16
    b2da:	d4 01       	movw	r26, r8
    b2dc:	8c 91       	ld	r24, X
    b2de:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    b2e2:	2b 01       	movw	r4, r22
    b2e4:	3c 01       	movw	r6, r24
    b2e6:	f8 01       	movw	r30, r16
    b2e8:	12 8e       	std	Z+26, r1	; 0x1a
    b2ea:	13 8e       	std	Z+27, r1	; 0x1b
    b2ec:	d4 01       	movw	r26, r8
    b2ee:	8c 91       	ld	r24, X
    b2f0:	83 30       	cpi	r24, 0x03	; 3
    b2f2:	11 f4       	brne	.+4      	; 0xb2f8 <f_open+0x126>
    b2f4:	14 8a       	std	Z+20, r1	; 0x14
    b2f6:	15 8a       	std	Z+21, r1	; 0x15
    b2f8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b2fa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b2fc:	14 8e       	std	Z+28, r1	; 0x1c
    b2fe:	15 8e       	std	Z+29, r1	; 0x1d
    b300:	16 8e       	std	Z+30, r1	; 0x1e
    b302:	17 8e       	std	Z+31, r1	; 0x1f
    b304:	81 e0       	ldi	r24, 0x01	; 1
    b306:	f4 01       	movw	r30, r8
    b308:	83 83       	std	Z+3, r24	; 0x03
    b30a:	41 14       	cp	r4, r1
    b30c:	51 04       	cpc	r5, r1
    b30e:	61 04       	cpc	r6, r1
    b310:	71 04       	cpc	r7, r1
    b312:	c9 f1       	breq	.+114    	; 0xb386 <f_open+0x1b4>
    b314:	81 a9       	ldd	r24, Z+49	; 0x31
    b316:	92 a9       	ldd	r25, Z+50	; 0x32
    b318:	a3 a9       	ldd	r26, Z+51	; 0x33
    b31a:	b4 a9       	ldd	r27, Z+52	; 0x34
    b31c:	8b ab       	std	Y+51, r24	; 0x33
    b31e:	9c ab       	std	Y+52, r25	; 0x34
    b320:	ad ab       	std	Y+53, r26	; 0x35
    b322:	be ab       	std	Y+54, r27	; 0x36
    b324:	00 e0       	ldi	r16, 0x00	; 0
    b326:	10 e0       	ldi	r17, 0x00	; 0
    b328:	98 01       	movw	r18, r16
    b32a:	b3 01       	movw	r22, r6
    b32c:	a2 01       	movw	r20, r4
    b32e:	ce 01       	movw	r24, r28
    b330:	01 96       	adiw	r24, 0x01	; 1
    b332:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <remove_chain>
    b336:	8c 01       	movw	r16, r24
    b338:	89 2b       	or	r24, r25
    b33a:	09 f0       	breq	.+2      	; 0xb33e <f_open+0x16c>
    b33c:	2a c1       	rjmp	.+596    	; 0xb592 <f_open+0x3c0>
    b33e:	4b a9       	ldd	r20, Y+51	; 0x33
    b340:	5c a9       	ldd	r21, Y+52	; 0x34
    b342:	6d a9       	ldd	r22, Y+53	; 0x35
    b344:	7e a9       	ldd	r23, Y+54	; 0x36
    b346:	8f a5       	ldd	r24, Y+47	; 0x2f
    b348:	98 a9       	ldd	r25, Y+48	; 0x30
    b34a:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    b34e:	8c 01       	movw	r16, r24
    b350:	ef a5       	ldd	r30, Y+47	; 0x2f
    b352:	f8 a9       	ldd	r31, Y+48	; 0x30
    b354:	b1 e0       	ldi	r27, 0x01	; 1
    b356:	4b 1a       	sub	r4, r27
    b358:	51 08       	sbc	r5, r1
    b35a:	61 08       	sbc	r6, r1
    b35c:	71 08       	sbc	r7, r1
    b35e:	45 86       	std	Z+13, r4	; 0x0d
    b360:	56 86       	std	Z+14, r5	; 0x0e
    b362:	67 86       	std	Z+15, r6	; 0x0f
    b364:	70 8a       	std	Z+16, r7	; 0x10
    b366:	89 2b       	or	r24, r25
    b368:	61 f0       	breq	.+24     	; 0xb382 <f_open+0x1b0>
    b36a:	13 c1       	rjmp	.+550    	; 0xb592 <f_open+0x3c0>
    b36c:	01 15       	cp	r16, r1
    b36e:	11 05       	cpc	r17, r1
    b370:	09 f0       	breq	.+2      	; 0xb374 <f_open+0x1a2>
    b372:	0f c1       	rjmp	.+542    	; 0xb592 <f_open+0x3c0>
    b374:	8d 81       	ldd	r24, Y+5	; 0x05
    b376:	84 fd       	sbrc	r24, 4
    b378:	07 c1       	rjmp	.+526    	; 0xb588 <f_open+0x3b6>
    b37a:	91 fe       	sbrs	r9, 1
    b37c:	02 c0       	rjmp	.+4      	; 0xb382 <f_open+0x1b0>
    b37e:	80 fd       	sbrc	r24, 0
    b380:	06 c1       	rjmp	.+524    	; 0xb58e <f_open+0x3bc>
    b382:	d3 fe       	sbrs	r13, 3
    b384:	03 c0       	rjmp	.+6      	; 0xb38c <f_open+0x1ba>
    b386:	ed 2d       	mov	r30, r13
    b388:	e0 64       	ori	r30, 0x40	; 64
    b38a:	de 2e       	mov	r13, r30
    b38c:	0f a5       	ldd	r16, Y+47	; 0x2f
    b38e:	18 a9       	ldd	r17, Y+48	; 0x30
    b390:	f8 01       	movw	r30, r16
    b392:	81 a9       	ldd	r24, Z+49	; 0x31
    b394:	92 a9       	ldd	r25, Z+50	; 0x32
    b396:	a3 a9       	ldd	r26, Z+51	; 0x33
    b398:	b4 a9       	ldd	r27, Z+52	; 0x34
    b39a:	f7 01       	movw	r30, r14
    b39c:	84 8f       	std	Z+28, r24	; 0x1c
    b39e:	95 8f       	std	Z+29, r25	; 0x1d
    b3a0:	a6 8f       	std	Z+30, r26	; 0x1e
    b3a2:	b7 8f       	std	Z+31, r27	; 0x1f
    b3a4:	8b 8c       	ldd	r8, Y+27	; 0x1b
    b3a6:	9c 8c       	ldd	r9, Y+28	; 0x1c
    b3a8:	91 a2       	std	Z+33, r9	; 0x21
    b3aa:	80 a2       	std	Z+32, r8	; 0x20
    b3ac:	b4 01       	movw	r22, r8
    b3ae:	d8 01       	movw	r26, r16
    b3b0:	8c 91       	ld	r24, X
    b3b2:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    b3b6:	f7 01       	movw	r30, r14
    b3b8:	66 83       	std	Z+6, r22	; 0x06
    b3ba:	77 83       	std	Z+7, r23	; 0x07
    b3bc:	80 87       	std	Z+8, r24	; 0x08
    b3be:	91 87       	std	Z+9, r25	; 0x09
    b3c0:	c4 01       	movw	r24, r8
    b3c2:	4c 96       	adiw	r24, 0x1c	; 28
    b3c4:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <ld_dword>
    b3c8:	d7 01       	movw	r26, r14
    b3ca:	1a 96       	adiw	r26, 0x0a	; 10
    b3cc:	6d 93       	st	X+, r22
    b3ce:	7d 93       	st	X+, r23
    b3d0:	8d 93       	st	X+, r24
    b3d2:	9c 93       	st	X, r25
    b3d4:	1d 97       	sbiw	r26, 0x0d	; 13
    b3d6:	93 96       	adiw	r26, 0x23	; 35
    b3d8:	1c 92       	st	X, r1
    b3da:	1e 92       	st	-X, r1
    b3dc:	92 97       	sbiw	r26, 0x22	; 34
    b3de:	11 96       	adiw	r26, 0x01	; 1
    b3e0:	1c 93       	st	X, r17
    b3e2:	0e 93       	st	-X, r16
    b3e4:	f8 01       	movw	r30, r16
    b3e6:	85 81       	ldd	r24, Z+5	; 0x05
    b3e8:	96 81       	ldd	r25, Z+6	; 0x06
    b3ea:	13 96       	adiw	r26, 0x03	; 3
    b3ec:	9c 93       	st	X, r25
    b3ee:	8e 93       	st	-X, r24
    b3f0:	12 97       	sbiw	r26, 0x02	; 2
    b3f2:	1e 96       	adiw	r26, 0x0e	; 14
    b3f4:	dc 92       	st	X, r13
    b3f6:	1e 97       	sbiw	r26, 0x0e	; 14
    b3f8:	1f 96       	adiw	r26, 0x0f	; 15
    b3fa:	1c 92       	st	X, r1
    b3fc:	1f 97       	sbiw	r26, 0x0f	; 15
    b3fe:	58 96       	adiw	r26, 0x18	; 24
    b400:	1d 92       	st	X+, r1
    b402:	1d 92       	st	X+, r1
    b404:	1d 92       	st	X+, r1
    b406:	1c 92       	st	X, r1
    b408:	5b 97       	sbiw	r26, 0x1b	; 27
    b40a:	f7 01       	movw	r30, r14
    b40c:	10 8a       	std	Z+16, r1	; 0x10
    b40e:	11 8a       	std	Z+17, r1	; 0x11
    b410:	12 8a       	std	Z+18, r1	; 0x12
    b412:	13 8a       	std	Z+19, r1	; 0x13
    b414:	c7 01       	movw	r24, r14
    b416:	84 96       	adiw	r24, 0x24	; 36
    b418:	9c ab       	std	Y+52, r25	; 0x34
    b41a:	8b ab       	std	Y+51, r24	; 0x33
    b41c:	40 e0       	ldi	r20, 0x00	; 0
    b41e:	52 e0       	ldi	r21, 0x02	; 2
    b420:	60 e0       	ldi	r22, 0x00	; 0
    b422:	70 e0       	ldi	r23, 0x00	; 0
    b424:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    b428:	d5 fc       	sbrc	r13, 5
    b42a:	03 c0       	rjmp	.+6      	; 0xb432 <f_open+0x260>
    b42c:	00 e0       	ldi	r16, 0x00	; 0
    b42e:	10 e0       	ldi	r17, 0x00	; 0
    b430:	91 c0       	rjmp	.+290    	; 0xb554 <f_open+0x382>
    b432:	d7 01       	movw	r26, r14
    b434:	1a 96       	adiw	r26, 0x0a	; 10
    b436:	2d 90       	ld	r2, X+
    b438:	3d 90       	ld	r3, X+
    b43a:	4d 90       	ld	r4, X+
    b43c:	5c 90       	ld	r5, X
    b43e:	1d 97       	sbiw	r26, 0x0d	; 13
    b440:	21 14       	cp	r2, r1
    b442:	31 04       	cpc	r3, r1
    b444:	41 04       	cpc	r4, r1
    b446:	51 04       	cpc	r5, r1
    b448:	89 f3       	breq	.-30     	; 0xb42c <f_open+0x25a>
    b44a:	f7 01       	movw	r30, r14
    b44c:	20 8a       	std	Z+16, r2	; 0x10
    b44e:	31 8a       	std	Z+17, r3	; 0x11
    b450:	42 8a       	std	Z+18, r4	; 0x12
    b452:	53 8a       	std	Z+19, r5	; 0x13
    b454:	ef a5       	ldd	r30, Y+47	; 0x2f
    b456:	f8 a9       	ldd	r31, Y+48	; 0x30
    b458:	81 85       	ldd	r24, Z+9	; 0x09
    b45a:	92 85       	ldd	r25, Z+10	; 0x0a
    b45c:	a0 e0       	ldi	r26, 0x00	; 0
    b45e:	b0 e0       	ldi	r27, 0x00	; 0
    b460:	3c 01       	movw	r6, r24
    b462:	4d 01       	movw	r8, r26
    b464:	59 e0       	ldi	r21, 0x09	; 9
    b466:	66 0c       	add	r6, r6
    b468:	77 1c       	adc	r7, r7
    b46a:	88 1c       	adc	r8, r8
    b46c:	99 1c       	adc	r9, r9
    b46e:	5a 95       	dec	r21
    b470:	d1 f7       	brne	.-12     	; 0xb466 <f_open+0x294>
    b472:	d7 01       	movw	r26, r14
    b474:	16 96       	adiw	r26, 0x06	; 6
    b476:	4d 91       	ld	r20, X+
    b478:	5d 91       	ld	r21, X+
    b47a:	6d 91       	ld	r22, X+
    b47c:	7c 91       	ld	r23, X
    b47e:	19 97       	sbiw	r26, 0x09	; 9
    b480:	62 14       	cp	r6, r2
    b482:	73 04       	cpc	r7, r3
    b484:	84 04       	cpc	r8, r4
    b486:	95 04       	cpc	r9, r5
    b488:	f0 f4       	brcc	.+60     	; 0xb4c6 <f_open+0x2f4>
    b48a:	f7 01       	movw	r30, r14
    b48c:	80 81       	ld	r24, Z
    b48e:	91 81       	ldd	r25, Z+1	; 0x01
    b490:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <get_fat.isra.7>
    b494:	ab 01       	movw	r20, r22
    b496:	bc 01       	movw	r22, r24
    b498:	d2 01       	movw	r26, r4
    b49a:	c1 01       	movw	r24, r2
    b49c:	86 19       	sub	r24, r6
    b49e:	97 09       	sbc	r25, r7
    b4a0:	a8 09       	sbc	r26, r8
    b4a2:	b9 09       	sbc	r27, r9
    b4a4:	1c 01       	movw	r2, r24
    b4a6:	2d 01       	movw	r4, r26
    b4a8:	42 30       	cpi	r20, 0x02	; 2
    b4aa:	51 05       	cpc	r21, r1
    b4ac:	61 05       	cpc	r22, r1
    b4ae:	71 05       	cpc	r23, r1
    b4b0:	08 f4       	brcc	.+2      	; 0xb4b4 <f_open+0x2e2>
    b4b2:	67 c0       	rjmp	.+206    	; 0xb582 <f_open+0x3b0>
    b4b4:	4f 3f       	cpi	r20, 0xFF	; 255
    b4b6:	ff ef       	ldi	r31, 0xFF	; 255
    b4b8:	5f 07       	cpc	r21, r31
    b4ba:	6f 07       	cpc	r22, r31
    b4bc:	7f 07       	cpc	r23, r31
    b4be:	01 f7       	brne	.-64     	; 0xb480 <f_open+0x2ae>
    b4c0:	01 e0       	ldi	r16, 0x01	; 1
    b4c2:	10 e0       	ldi	r17, 0x00	; 0
    b4c4:	02 c0       	rjmp	.+4      	; 0xb4ca <f_open+0x2f8>
    b4c6:	00 e0       	ldi	r16, 0x00	; 0
    b4c8:	10 e0       	ldi	r17, 0x00	; 0
    b4ca:	d7 01       	movw	r26, r14
    b4cc:	54 96       	adiw	r26, 0x14	; 20
    b4ce:	4d 93       	st	X+, r20
    b4d0:	5d 93       	st	X+, r21
    b4d2:	6d 93       	st	X+, r22
    b4d4:	7c 93       	st	X, r23
    b4d6:	57 97       	sbiw	r26, 0x17	; 23
    b4d8:	01 15       	cp	r16, r1
    b4da:	11 05       	cpc	r17, r1
    b4dc:	d9 f5       	brne	.+118    	; 0xb554 <f_open+0x382>
    b4de:	d2 01       	movw	r26, r4
    b4e0:	c1 01       	movw	r24, r2
    b4e2:	91 70       	andi	r25, 0x01	; 1
    b4e4:	aa 27       	eor	r26, r26
    b4e6:	bb 27       	eor	r27, r27
    b4e8:	89 2b       	or	r24, r25
    b4ea:	8a 2b       	or	r24, r26
    b4ec:	8b 2b       	or	r24, r27
    b4ee:	09 f4       	brne	.+2      	; 0xb4f2 <f_open+0x320>
    b4f0:	9d cf       	rjmp	.-198    	; 0xb42c <f_open+0x25a>
    b4f2:	6f a4       	ldd	r6, Y+47	; 0x2f
    b4f4:	78 a8       	ldd	r7, Y+48	; 0x30
    b4f6:	c3 01       	movw	r24, r6
    b4f8:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    b4fc:	61 15       	cp	r22, r1
    b4fe:	71 05       	cpc	r23, r1
    b500:	81 05       	cpc	r24, r1
    b502:	91 05       	cpc	r25, r1
    b504:	29 f1       	breq	.+74     	; 0xb550 <f_open+0x37e>
    b506:	92 01       	movw	r18, r4
    b508:	81 01       	movw	r16, r2
    b50a:	49 e0       	ldi	r20, 0x09	; 9
    b50c:	36 95       	lsr	r19
    b50e:	27 95       	ror	r18
    b510:	17 95       	ror	r17
    b512:	07 95       	ror	r16
    b514:	4a 95       	dec	r20
    b516:	d1 f7       	brne	.-12     	; 0xb50c <f_open+0x33a>
    b518:	a9 01       	movw	r20, r18
    b51a:	98 01       	movw	r18, r16
    b51c:	26 0f       	add	r18, r22
    b51e:	37 1f       	adc	r19, r23
    b520:	48 1f       	adc	r20, r24
    b522:	59 1f       	adc	r21, r25
    b524:	f7 01       	movw	r30, r14
    b526:	20 8f       	std	Z+24, r18	; 0x18
    b528:	31 8f       	std	Z+25, r19	; 0x19
    b52a:	42 8f       	std	Z+26, r20	; 0x1a
    b52c:	53 8f       	std	Z+27, r21	; 0x1b
    b52e:	01 e0       	ldi	r16, 0x01	; 1
    b530:	10 e0       	ldi	r17, 0x00	; 0
    b532:	6b a9       	ldd	r22, Y+51	; 0x33
    b534:	7c a9       	ldd	r23, Y+52	; 0x34
    b536:	d3 01       	movw	r26, r6
    b538:	11 96       	adiw	r26, 0x01	; 1
    b53a:	8c 91       	ld	r24, X
    b53c:	0e 94 df 6e 	call	0xddbe	; 0xddbe <disk_read>
    b540:	31 e0       	ldi	r19, 0x01	; 1
    b542:	20 e0       	ldi	r18, 0x00	; 0
    b544:	89 2b       	or	r24, r25
    b546:	09 f4       	brne	.+2      	; 0xb54a <f_open+0x378>
    b548:	30 e0       	ldi	r19, 0x00	; 0
    b54a:	03 2f       	mov	r16, r19
    b54c:	12 2f       	mov	r17, r18
    b54e:	02 c0       	rjmp	.+4      	; 0xb554 <f_open+0x382>
    b550:	02 e0       	ldi	r16, 0x02	; 2
    b552:	10 e0       	ldi	r17, 0x00	; 0
    b554:	c5 01       	movw	r24, r10
    b556:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    b55a:	01 15       	cp	r16, r1
    b55c:	11 05       	cpc	r17, r1
    b55e:	59 f0       	breq	.+22     	; 0xb576 <f_open+0x3a4>
    b560:	01 c0       	rjmp	.+2      	; 0xb564 <f_open+0x392>
    b562:	8c 01       	movw	r16, r24
    b564:	f7 01       	movw	r30, r14
    b566:	11 82       	std	Z+1, r1	; 0x01
    b568:	10 82       	st	Z, r1
    b56a:	c8 01       	movw	r24, r16
    b56c:	16 c0       	rjmp	.+44     	; 0xb59a <f_open+0x3c8>
    b56e:	89 e0       	ldi	r24, 0x09	; 9
    b570:	03 c0       	rjmp	.+6      	; 0xb578 <f_open+0x3a6>
    b572:	81 e1       	ldi	r24, 0x11	; 17
    b574:	01 c0       	rjmp	.+2      	; 0xb578 <f_open+0x3a6>
    b576:	80 e0       	ldi	r24, 0x00	; 0
    b578:	90 e0       	ldi	r25, 0x00	; 0
    b57a:	0f c0       	rjmp	.+30     	; 0xb59a <f_open+0x3c8>
    b57c:	08 e0       	ldi	r16, 0x08	; 8
    b57e:	10 e0       	ldi	r17, 0x00	; 0
    b580:	08 c0       	rjmp	.+16     	; 0xb592 <f_open+0x3c0>
    b582:	02 e0       	ldi	r16, 0x02	; 2
    b584:	10 e0       	ldi	r17, 0x00	; 0
    b586:	a1 cf       	rjmp	.-190    	; 0xb4ca <f_open+0x2f8>
    b588:	04 e0       	ldi	r16, 0x04	; 4
    b58a:	10 e0       	ldi	r17, 0x00	; 0
    b58c:	02 c0       	rjmp	.+4      	; 0xb592 <f_open+0x3c0>
    b58e:	07 e0       	ldi	r16, 0x07	; 7
    b590:	10 e0       	ldi	r17, 0x00	; 0
    b592:	c5 01       	movw	r24, r10
    b594:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    b598:	e5 cf       	rjmp	.-54     	; 0xb564 <f_open+0x392>
    b59a:	e6 96       	adiw	r28, 0x36	; 54
    b59c:	0f b6       	in	r0, 0x3f	; 63
    b59e:	f8 94       	cli
    b5a0:	de bf       	out	0x3e, r29	; 62
    b5a2:	0f be       	out	0x3f, r0	; 63
    b5a4:	cd bf       	out	0x3d, r28	; 61
    b5a6:	df 91       	pop	r29
    b5a8:	cf 91       	pop	r28
    b5aa:	1f 91       	pop	r17
    b5ac:	0f 91       	pop	r16
    b5ae:	ff 90       	pop	r15
    b5b0:	ef 90       	pop	r14
    b5b2:	df 90       	pop	r13
    b5b4:	bf 90       	pop	r11
    b5b6:	af 90       	pop	r10
    b5b8:	9f 90       	pop	r9
    b5ba:	8f 90       	pop	r8
    b5bc:	7f 90       	pop	r7
    b5be:	6f 90       	pop	r6
    b5c0:	5f 90       	pop	r5
    b5c2:	4f 90       	pop	r4
    b5c4:	3f 90       	pop	r3
    b5c6:	2f 90       	pop	r2
    b5c8:	08 95       	ret

0000b5ca <f_read>:
    b5ca:	a6 e0       	ldi	r26, 0x06	; 6
    b5cc:	b0 e0       	ldi	r27, 0x00	; 0
    b5ce:	eb ee       	ldi	r30, 0xEB	; 235
    b5d0:	fa e5       	ldi	r31, 0x5A	; 90
    b5d2:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    b5d6:	7c 01       	movw	r14, r24
    b5d8:	4b 01       	movw	r8, r22
    b5da:	5a 01       	movw	r10, r20
    b5dc:	3e 83       	std	Y+6, r19	; 0x06
    b5de:	2d 83       	std	Y+5, r18	; 0x05
    b5e0:	f9 01       	movw	r30, r18
    b5e2:	11 82       	std	Z+1, r1	; 0x01
    b5e4:	10 82       	st	Z, r1
    b5e6:	be 01       	movw	r22, r28
    b5e8:	6f 5f       	subi	r22, 0xFF	; 255
    b5ea:	7f 4f       	sbci	r23, 0xFF	; 255
    b5ec:	0e 94 64 48 	call	0x90c8	; 0x90c8 <validate>
    b5f0:	00 97       	sbiw	r24, 0x00	; 0
    b5f2:	09 f0       	breq	.+2      	; 0xb5f6 <f_read+0x2c>
    b5f4:	31 c1       	rjmp	.+610    	; 0xb858 <f_read+0x28e>
    b5f6:	f7 01       	movw	r30, r14
    b5f8:	87 85       	ldd	r24, Z+15	; 0x0f
    b5fa:	90 e0       	ldi	r25, 0x00	; 0
    b5fc:	00 97       	sbiw	r24, 0x00	; 0
    b5fe:	09 f0       	breq	.+2      	; 0xb602 <f_read+0x38>
    b600:	2b c1       	rjmp	.+598    	; 0xb858 <f_read+0x28e>
    b602:	86 85       	ldd	r24, Z+14	; 0x0e
    b604:	80 ff       	sbrs	r24, 0
    b606:	26 c1       	rjmp	.+588    	; 0xb854 <f_read+0x28a>
    b608:	82 85       	ldd	r24, Z+10	; 0x0a
    b60a:	93 85       	ldd	r25, Z+11	; 0x0b
    b60c:	a4 85       	ldd	r26, Z+12	; 0x0c
    b60e:	b5 85       	ldd	r27, Z+13	; 0x0d
    b610:	40 89       	ldd	r20, Z+16	; 0x10
    b612:	51 89       	ldd	r21, Z+17	; 0x11
    b614:	62 89       	ldd	r22, Z+18	; 0x12
    b616:	73 89       	ldd	r23, Z+19	; 0x13
    b618:	84 1b       	sub	r24, r20
    b61a:	95 0b       	sbc	r25, r21
    b61c:	a6 0b       	sbc	r26, r22
    b61e:	b7 0b       	sbc	r27, r23
    b620:	a5 01       	movw	r20, r10
    b622:	60 e0       	ldi	r22, 0x00	; 0
    b624:	70 e0       	ldi	r23, 0x00	; 0
    b626:	84 17       	cp	r24, r20
    b628:	95 07       	cpc	r25, r21
    b62a:	a6 07       	cpc	r26, r22
    b62c:	b7 07       	cpc	r27, r23
    b62e:	08 f4       	brcc	.+2      	; 0xb632 <f_read+0x68>
    b630:	5c 01       	movw	r10, r24
    b632:	17 01       	movw	r2, r14
    b634:	f4 e2       	ldi	r31, 0x24	; 36
    b636:	2f 0e       	add	r2, r31
    b638:	31 1c       	adc	r3, r1
    b63a:	a1 14       	cp	r10, r1
    b63c:	b1 04       	cpc	r11, r1
    b63e:	09 f4       	brne	.+2      	; 0xb642 <f_read+0x78>
    b640:	07 c1       	rjmp	.+526    	; 0xb850 <f_read+0x286>
    b642:	f7 01       	movw	r30, r14
    b644:	40 89       	ldd	r20, Z+16	; 0x10
    b646:	51 89       	ldd	r21, Z+17	; 0x11
    b648:	62 89       	ldd	r22, Z+18	; 0x12
    b64a:	73 89       	ldd	r23, Z+19	; 0x13
    b64c:	db 01       	movw	r26, r22
    b64e:	ca 01       	movw	r24, r20
    b650:	91 70       	andi	r25, 0x01	; 1
    b652:	aa 27       	eor	r26, r26
    b654:	bb 27       	eor	r27, r27
    b656:	89 2b       	or	r24, r25
    b658:	8a 2b       	or	r24, r26
    b65a:	8b 2b       	or	r24, r27
    b65c:	09 f0       	breq	.+2      	; 0xb660 <f_read+0x96>
    b65e:	cb c0       	rjmp	.+406    	; 0xb7f6 <f_read+0x22c>
    b660:	e9 81       	ldd	r30, Y+1	; 0x01
    b662:	fa 81       	ldd	r31, Y+2	; 0x02
    b664:	01 85       	ldd	r16, Z+9	; 0x09
    b666:	12 85       	ldd	r17, Z+10	; 0x0a
    b668:	01 50       	subi	r16, 0x01	; 1
    b66a:	11 09       	sbc	r17, r1
    b66c:	db 01       	movw	r26, r22
    b66e:	ca 01       	movw	r24, r20
    b670:	e9 e0       	ldi	r30, 0x09	; 9
    b672:	b6 95       	lsr	r27
    b674:	a7 95       	ror	r26
    b676:	97 95       	ror	r25
    b678:	87 95       	ror	r24
    b67a:	ea 95       	dec	r30
    b67c:	d1 f7       	brne	.-12     	; 0xb672 <f_read+0xa8>
    b67e:	08 23       	and	r16, r24
    b680:	19 23       	and	r17, r25
    b682:	01 15       	cp	r16, r1
    b684:	11 05       	cpc	r17, r1
    b686:	91 f5       	brne	.+100    	; 0xb6ec <f_read+0x122>
    b688:	f7 01       	movw	r30, r14
    b68a:	41 15       	cp	r20, r1
    b68c:	51 05       	cpc	r21, r1
    b68e:	61 05       	cpc	r22, r1
    b690:	71 05       	cpc	r23, r1
    b692:	29 f4       	brne	.+10     	; 0xb69e <f_read+0xd4>
    b694:	66 81       	ldd	r22, Z+6	; 0x06
    b696:	77 81       	ldd	r23, Z+7	; 0x07
    b698:	80 85       	ldd	r24, Z+8	; 0x08
    b69a:	91 85       	ldd	r25, Z+9	; 0x09
    b69c:	11 c0       	rjmp	.+34     	; 0xb6c0 <f_read+0xf6>
    b69e:	82 a1       	ldd	r24, Z+34	; 0x22
    b6a0:	93 a1       	ldd	r25, Z+35	; 0x23
    b6a2:	89 2b       	or	r24, r25
    b6a4:	21 f0       	breq	.+8      	; 0xb6ae <f_read+0xe4>
    b6a6:	c7 01       	movw	r24, r14
    b6a8:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <clmt_clust>
    b6ac:	09 c0       	rjmp	.+18     	; 0xb6c0 <f_read+0xf6>
    b6ae:	f7 01       	movw	r30, r14
    b6b0:	44 89       	ldd	r20, Z+20	; 0x14
    b6b2:	55 89       	ldd	r21, Z+21	; 0x15
    b6b4:	66 89       	ldd	r22, Z+22	; 0x16
    b6b6:	77 89       	ldd	r23, Z+23	; 0x17
    b6b8:	80 81       	ld	r24, Z
    b6ba:	91 81       	ldd	r25, Z+1	; 0x01
    b6bc:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <get_fat.isra.7>
    b6c0:	62 30       	cpi	r22, 0x02	; 2
    b6c2:	71 05       	cpc	r23, r1
    b6c4:	81 05       	cpc	r24, r1
    b6c6:	91 05       	cpc	r25, r1
    b6c8:	10 f4       	brcc	.+4      	; 0xb6ce <f_read+0x104>
    b6ca:	82 e0       	ldi	r24, 0x02	; 2
    b6cc:	07 c0       	rjmp	.+14     	; 0xb6dc <f_read+0x112>
    b6ce:	6f 3f       	cpi	r22, 0xFF	; 255
    b6d0:	ff ef       	ldi	r31, 0xFF	; 255
    b6d2:	7f 07       	cpc	r23, r31
    b6d4:	8f 07       	cpc	r24, r31
    b6d6:	9f 07       	cpc	r25, r31
    b6d8:	21 f4       	brne	.+8      	; 0xb6e2 <f_read+0x118>
    b6da:	81 e0       	ldi	r24, 0x01	; 1
    b6dc:	f7 01       	movw	r30, r14
    b6de:	87 87       	std	Z+15, r24	; 0x0f
    b6e0:	ba c0       	rjmp	.+372    	; 0xb856 <f_read+0x28c>
    b6e2:	f7 01       	movw	r30, r14
    b6e4:	64 8b       	std	Z+20, r22	; 0x14
    b6e6:	75 8b       	std	Z+21, r23	; 0x15
    b6e8:	86 8b       	std	Z+22, r24	; 0x16
    b6ea:	97 8b       	std	Z+23, r25	; 0x17
    b6ec:	89 81       	ldd	r24, Y+1	; 0x01
    b6ee:	9a 81       	ldd	r25, Y+2	; 0x02
    b6f0:	9c 83       	std	Y+4, r25	; 0x04
    b6f2:	8b 83       	std	Y+3, r24	; 0x03
    b6f4:	f7 01       	movw	r30, r14
    b6f6:	44 89       	ldd	r20, Z+20	; 0x14
    b6f8:	55 89       	ldd	r21, Z+21	; 0x15
    b6fa:	66 89       	ldd	r22, Z+22	; 0x16
    b6fc:	77 89       	ldd	r23, Z+23	; 0x17
    b6fe:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    b702:	61 15       	cp	r22, r1
    b704:	71 05       	cpc	r23, r1
    b706:	81 05       	cpc	r24, r1
    b708:	91 05       	cpc	r25, r1
    b70a:	f9 f2       	breq	.-66     	; 0xb6ca <f_read+0x100>
    b70c:	2b 01       	movw	r4, r22
    b70e:	3c 01       	movw	r6, r24
    b710:	40 0e       	add	r4, r16
    b712:	51 1e       	adc	r5, r17
    b714:	61 1c       	adc	r6, r1
    b716:	71 1c       	adc	r7, r1
    b718:	65 01       	movw	r12, r10
    b71a:	cd 2c       	mov	r12, r13
    b71c:	dd 24       	eor	r13, r13
    b71e:	c6 94       	lsr	r12
    b720:	c1 14       	cp	r12, r1
    b722:	d1 04       	cpc	r13, r1
    b724:	d1 f1       	breq	.+116    	; 0xb79a <f_read+0x1d0>
    b726:	eb 81       	ldd	r30, Y+3	; 0x03
    b728:	fc 81       	ldd	r31, Y+4	; 0x04
    b72a:	81 85       	ldd	r24, Z+9	; 0x09
    b72c:	92 85       	ldd	r25, Z+10	; 0x0a
    b72e:	98 01       	movw	r18, r16
    b730:	2c 0d       	add	r18, r12
    b732:	3d 1d       	adc	r19, r13
    b734:	82 17       	cp	r24, r18
    b736:	93 07       	cpc	r25, r19
    b738:	18 f4       	brcc	.+6      	; 0xb740 <f_read+0x176>
    b73a:	6c 01       	movw	r12, r24
    b73c:	c0 1a       	sub	r12, r16
    b73e:	d1 0a       	sbc	r13, r17
    b740:	86 01       	movw	r16, r12
    b742:	a3 01       	movw	r20, r6
    b744:	92 01       	movw	r18, r4
    b746:	b4 01       	movw	r22, r8
    b748:	eb 81       	ldd	r30, Y+3	; 0x03
    b74a:	fc 81       	ldd	r31, Y+4	; 0x04
    b74c:	81 81       	ldd	r24, Z+1	; 0x01
    b74e:	0e 94 df 6e 	call	0xddbe	; 0xddbe <disk_read>
    b752:	89 2b       	or	r24, r25
    b754:	11 f6       	brne	.-124    	; 0xb6da <f_read+0x110>
    b756:	f7 01       	movw	r30, r14
    b758:	86 85       	ldd	r24, Z+14	; 0x0e
    b75a:	87 ff       	sbrs	r24, 7
    b75c:	1a c0       	rjmp	.+52     	; 0xb792 <f_read+0x1c8>
    b75e:	80 8d       	ldd	r24, Z+24	; 0x18
    b760:	91 8d       	ldd	r25, Z+25	; 0x19
    b762:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b764:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b766:	84 19       	sub	r24, r4
    b768:	95 09       	sbc	r25, r5
    b76a:	a6 09       	sbc	r26, r6
    b76c:	b7 09       	sbc	r27, r7
    b76e:	a6 01       	movw	r20, r12
    b770:	60 e0       	ldi	r22, 0x00	; 0
    b772:	70 e0       	ldi	r23, 0x00	; 0
    b774:	84 17       	cp	r24, r20
    b776:	95 07       	cpc	r25, r21
    b778:	a6 07       	cpc	r26, r22
    b77a:	b7 07       	cpc	r27, r23
    b77c:	50 f4       	brcc	.+20     	; 0xb792 <f_read+0x1c8>
    b77e:	98 2f       	mov	r25, r24
    b780:	88 27       	eor	r24, r24
    b782:	99 0f       	add	r25, r25
    b784:	40 e0       	ldi	r20, 0x00	; 0
    b786:	52 e0       	ldi	r21, 0x02	; 2
    b788:	b1 01       	movw	r22, r2
    b78a:	88 0d       	add	r24, r8
    b78c:	99 1d       	adc	r25, r9
    b78e:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    b792:	dc 2c       	mov	r13, r12
    b794:	cc 24       	eor	r12, r12
    b796:	dd 0c       	add	r13, r13
    b798:	41 c0       	rjmp	.+130    	; 0xb81c <f_read+0x252>
    b79a:	f7 01       	movw	r30, r14
    b79c:	20 8d       	ldd	r18, Z+24	; 0x18
    b79e:	31 8d       	ldd	r19, Z+25	; 0x19
    b7a0:	42 8d       	ldd	r20, Z+26	; 0x1a
    b7a2:	53 8d       	ldd	r21, Z+27	; 0x1b
    b7a4:	42 16       	cp	r4, r18
    b7a6:	53 06       	cpc	r5, r19
    b7a8:	64 06       	cpc	r6, r20
    b7aa:	75 06       	cpc	r7, r21
    b7ac:	f9 f0       	breq	.+62     	; 0xb7ec <f_read+0x222>
    b7ae:	86 85       	ldd	r24, Z+14	; 0x0e
    b7b0:	87 ff       	sbrs	r24, 7
    b7b2:	0f c0       	rjmp	.+30     	; 0xb7d2 <f_read+0x208>
    b7b4:	01 e0       	ldi	r16, 0x01	; 1
    b7b6:	10 e0       	ldi	r17, 0x00	; 0
    b7b8:	b1 01       	movw	r22, r2
    b7ba:	eb 81       	ldd	r30, Y+3	; 0x03
    b7bc:	fc 81       	ldd	r31, Y+4	; 0x04
    b7be:	81 81       	ldd	r24, Z+1	; 0x01
    b7c0:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    b7c4:	89 2b       	or	r24, r25
    b7c6:	09 f0       	breq	.+2      	; 0xb7ca <f_read+0x200>
    b7c8:	88 cf       	rjmp	.-240    	; 0xb6da <f_read+0x110>
    b7ca:	f7 01       	movw	r30, r14
    b7cc:	86 85       	ldd	r24, Z+14	; 0x0e
    b7ce:	8f 77       	andi	r24, 0x7F	; 127
    b7d0:	86 87       	std	Z+14, r24	; 0x0e
    b7d2:	e9 81       	ldd	r30, Y+1	; 0x01
    b7d4:	fa 81       	ldd	r31, Y+2	; 0x02
    b7d6:	01 e0       	ldi	r16, 0x01	; 1
    b7d8:	10 e0       	ldi	r17, 0x00	; 0
    b7da:	a3 01       	movw	r20, r6
    b7dc:	92 01       	movw	r18, r4
    b7de:	b1 01       	movw	r22, r2
    b7e0:	81 81       	ldd	r24, Z+1	; 0x01
    b7e2:	0e 94 df 6e 	call	0xddbe	; 0xddbe <disk_read>
    b7e6:	89 2b       	or	r24, r25
    b7e8:	09 f0       	breq	.+2      	; 0xb7ec <f_read+0x222>
    b7ea:	77 cf       	rjmp	.-274    	; 0xb6da <f_read+0x110>
    b7ec:	f7 01       	movw	r30, r14
    b7ee:	40 8e       	std	Z+24, r4	; 0x18
    b7f0:	51 8e       	std	Z+25, r5	; 0x19
    b7f2:	62 8e       	std	Z+26, r6	; 0x1a
    b7f4:	73 8e       	std	Z+27, r7	; 0x1b
    b7f6:	f7 01       	movw	r30, r14
    b7f8:	60 89       	ldd	r22, Z+16	; 0x10
    b7fa:	71 89       	ldd	r23, Z+17	; 0x11
    b7fc:	71 70       	andi	r23, 0x01	; 1
    b7fe:	80 e0       	ldi	r24, 0x00	; 0
    b800:	92 e0       	ldi	r25, 0x02	; 2
    b802:	86 1b       	sub	r24, r22
    b804:	97 0b       	sbc	r25, r23
    b806:	65 01       	movw	r12, r10
    b808:	8a 15       	cp	r24, r10
    b80a:	9b 05       	cpc	r25, r11
    b80c:	08 f4       	brcc	.+2      	; 0xb810 <f_read+0x246>
    b80e:	6c 01       	movw	r12, r24
    b810:	62 0d       	add	r22, r2
    b812:	73 1d       	adc	r23, r3
    b814:	a6 01       	movw	r20, r12
    b816:	c4 01       	movw	r24, r8
    b818:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    b81c:	8c 0c       	add	r8, r12
    b81e:	9d 1c       	adc	r9, r13
    b820:	f7 01       	movw	r30, r14
    b822:	80 89       	ldd	r24, Z+16	; 0x10
    b824:	91 89       	ldd	r25, Z+17	; 0x11
    b826:	a2 89       	ldd	r26, Z+18	; 0x12
    b828:	b3 89       	ldd	r27, Z+19	; 0x13
    b82a:	8c 0d       	add	r24, r12
    b82c:	9d 1d       	adc	r25, r13
    b82e:	a1 1d       	adc	r26, r1
    b830:	b1 1d       	adc	r27, r1
    b832:	80 8b       	std	Z+16, r24	; 0x10
    b834:	91 8b       	std	Z+17, r25	; 0x11
    b836:	a2 8b       	std	Z+18, r26	; 0x12
    b838:	b3 8b       	std	Z+19, r27	; 0x13
    b83a:	ed 81       	ldd	r30, Y+5	; 0x05
    b83c:	fe 81       	ldd	r31, Y+6	; 0x06
    b83e:	80 81       	ld	r24, Z
    b840:	91 81       	ldd	r25, Z+1	; 0x01
    b842:	8c 0d       	add	r24, r12
    b844:	9d 1d       	adc	r25, r13
    b846:	91 83       	std	Z+1, r25	; 0x01
    b848:	80 83       	st	Z, r24
    b84a:	ac 18       	sub	r10, r12
    b84c:	bd 08       	sbc	r11, r13
    b84e:	f5 ce       	rjmp	.-534    	; 0xb63a <f_read+0x70>
    b850:	80 e0       	ldi	r24, 0x00	; 0
    b852:	01 c0       	rjmp	.+2      	; 0xb856 <f_read+0x28c>
    b854:	87 e0       	ldi	r24, 0x07	; 7
    b856:	90 e0       	ldi	r25, 0x00	; 0
    b858:	26 96       	adiw	r28, 0x06	; 6
    b85a:	e2 e1       	ldi	r30, 0x12	; 18
    b85c:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000b860 <f_write>:
    b860:	a8 e0       	ldi	r26, 0x08	; 8
    b862:	b0 e0       	ldi	r27, 0x00	; 0
    b864:	e6 e3       	ldi	r30, 0x36	; 54
    b866:	fc e5       	ldi	r31, 0x5C	; 92
    b868:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    b86c:	7c 01       	movw	r14, r24
    b86e:	3b 01       	movw	r6, r22
    b870:	5a 01       	movw	r10, r20
    b872:	38 87       	std	Y+8, r19	; 0x08
    b874:	2f 83       	std	Y+7, r18	; 0x07
    b876:	f9 01       	movw	r30, r18
    b878:	11 82       	std	Z+1, r1	; 0x01
    b87a:	10 82       	st	Z, r1
    b87c:	be 01       	movw	r22, r28
    b87e:	6f 5f       	subi	r22, 0xFF	; 255
    b880:	7f 4f       	sbci	r23, 0xFF	; 255
    b882:	0e 94 64 48 	call	0x90c8	; 0x90c8 <validate>
    b886:	00 97       	sbiw	r24, 0x00	; 0
    b888:	09 f0       	breq	.+2      	; 0xb88c <f_write+0x2c>
    b88a:	7d c1       	rjmp	.+762    	; 0xbb86 <f_write+0x326>
    b88c:	f7 01       	movw	r30, r14
    b88e:	87 85       	ldd	r24, Z+15	; 0x0f
    b890:	90 e0       	ldi	r25, 0x00	; 0
    b892:	00 97       	sbiw	r24, 0x00	; 0
    b894:	09 f0       	breq	.+2      	; 0xb898 <f_write+0x38>
    b896:	77 c1       	rjmp	.+750    	; 0xbb86 <f_write+0x326>
    b898:	86 85       	ldd	r24, Z+14	; 0x0e
    b89a:	81 ff       	sbrs	r24, 1
    b89c:	72 c1       	rjmp	.+740    	; 0xbb82 <f_write+0x322>
    b89e:	80 89       	ldd	r24, Z+16	; 0x10
    b8a0:	91 89       	ldd	r25, Z+17	; 0x11
    b8a2:	a2 89       	ldd	r26, Z+18	; 0x12
    b8a4:	b3 89       	ldd	r27, Z+19	; 0x13
    b8a6:	ac 01       	movw	r20, r24
    b8a8:	bd 01       	movw	r22, r26
    b8aa:	4a 0d       	add	r20, r10
    b8ac:	5b 1d       	adc	r21, r11
    b8ae:	61 1d       	adc	r22, r1
    b8b0:	71 1d       	adc	r23, r1
    b8b2:	48 17       	cp	r20, r24
    b8b4:	59 07       	cpc	r21, r25
    b8b6:	6a 07       	cpc	r22, r26
    b8b8:	7b 07       	cpc	r23, r27
    b8ba:	18 f4       	brcc	.+6      	; 0xb8c2 <f_write+0x62>
    b8bc:	5c 01       	movw	r10, r24
    b8be:	a0 94       	com	r10
    b8c0:	b0 94       	com	r11
    b8c2:	97 01       	movw	r18, r14
    b8c4:	2c 5d       	subi	r18, 0xDC	; 220
    b8c6:	3f 4f       	sbci	r19, 0xFF	; 255
    b8c8:	3e 83       	std	Y+6, r19	; 0x06
    b8ca:	2d 83       	std	Y+5, r18	; 0x05
    b8cc:	a1 14       	cp	r10, r1
    b8ce:	b1 04       	cpc	r11, r1
    b8d0:	09 f4       	brne	.+2      	; 0xb8d4 <f_write+0x74>
    b8d2:	4d c0       	rjmp	.+154    	; 0xb96e <f_write+0x10e>
    b8d4:	f7 01       	movw	r30, r14
    b8d6:	40 89       	ldd	r20, Z+16	; 0x10
    b8d8:	51 89       	ldd	r21, Z+17	; 0x11
    b8da:	62 89       	ldd	r22, Z+18	; 0x12
    b8dc:	73 89       	ldd	r23, Z+19	; 0x13
    b8de:	db 01       	movw	r26, r22
    b8e0:	ca 01       	movw	r24, r20
    b8e2:	91 70       	andi	r25, 0x01	; 1
    b8e4:	aa 27       	eor	r26, r26
    b8e6:	bb 27       	eor	r27, r27
    b8e8:	89 2b       	or	r24, r25
    b8ea:	8a 2b       	or	r24, r26
    b8ec:	8b 2b       	or	r24, r27
    b8ee:	09 f0       	breq	.+2      	; 0xb8f2 <f_write+0x92>
    b8f0:	05 c1       	rjmp	.+522    	; 0xbafc <f_write+0x29c>
    b8f2:	e9 81       	ldd	r30, Y+1	; 0x01
    b8f4:	fa 81       	ldd	r31, Y+2	; 0x02
    b8f6:	81 84       	ldd	r8, Z+9	; 0x09
    b8f8:	92 84       	ldd	r9, Z+10	; 0x0a
    b8fa:	f1 e0       	ldi	r31, 0x01	; 1
    b8fc:	8f 1a       	sub	r8, r31
    b8fe:	91 08       	sbc	r9, r1
    b900:	db 01       	movw	r26, r22
    b902:	ca 01       	movw	r24, r20
    b904:	e9 e0       	ldi	r30, 0x09	; 9
    b906:	b6 95       	lsr	r27
    b908:	a7 95       	ror	r26
    b90a:	97 95       	ror	r25
    b90c:	87 95       	ror	r24
    b90e:	ea 95       	dec	r30
    b910:	d1 f7       	brne	.-12     	; 0xb906 <f_write+0xa6>
    b912:	88 22       	and	r8, r24
    b914:	99 22       	and	r9, r25
    b916:	81 14       	cp	r8, r1
    b918:	91 04       	cpc	r9, r1
    b91a:	09 f0       	breq	.+2      	; 0xb91e <f_write+0xbe>
    b91c:	51 c0       	rjmp	.+162    	; 0xb9c0 <f_write+0x160>
    b91e:	f7 01       	movw	r30, r14
    b920:	41 15       	cp	r20, r1
    b922:	51 05       	cpc	r21, r1
    b924:	61 05       	cpc	r22, r1
    b926:	71 05       	cpc	r23, r1
    b928:	69 f4       	brne	.+26     	; 0xb944 <f_write+0xe4>
    b92a:	66 81       	ldd	r22, Z+6	; 0x06
    b92c:	77 81       	ldd	r23, Z+7	; 0x07
    b92e:	80 85       	ldd	r24, Z+8	; 0x08
    b930:	91 85       	ldd	r25, Z+9	; 0x09
    b932:	61 15       	cp	r22, r1
    b934:	71 05       	cpc	r23, r1
    b936:	81 05       	cpc	r24, r1
    b938:	91 05       	cpc	r25, r1
    b93a:	f9 f4       	brne	.+62     	; 0xb97a <f_write+0x11a>
    b93c:	40 e0       	ldi	r20, 0x00	; 0
    b93e:	50 e0       	ldi	r21, 0x00	; 0
    b940:	ba 01       	movw	r22, r20
    b942:	0d c0       	rjmp	.+26     	; 0xb95e <f_write+0xfe>
    b944:	82 a1       	ldd	r24, Z+34	; 0x22
    b946:	93 a1       	ldd	r25, Z+35	; 0x23
    b948:	89 2b       	or	r24, r25
    b94a:	21 f0       	breq	.+8      	; 0xb954 <f_write+0xf4>
    b94c:	c7 01       	movw	r24, r14
    b94e:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <clmt_clust>
    b952:	08 c0       	rjmp	.+16     	; 0xb964 <f_write+0x104>
    b954:	f7 01       	movw	r30, r14
    b956:	44 89       	ldd	r20, Z+20	; 0x14
    b958:	55 89       	ldd	r21, Z+21	; 0x15
    b95a:	66 89       	ldd	r22, Z+22	; 0x16
    b95c:	77 89       	ldd	r23, Z+23	; 0x17
    b95e:	c7 01       	movw	r24, r14
    b960:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <create_chain>
    b964:	61 15       	cp	r22, r1
    b966:	71 05       	cpc	r23, r1
    b968:	81 05       	cpc	r24, r1
    b96a:	91 05       	cpc	r25, r1
    b96c:	31 f4       	brne	.+12     	; 0xb97a <f_write+0x11a>
    b96e:	f7 01       	movw	r30, r14
    b970:	86 85       	ldd	r24, Z+14	; 0x0e
    b972:	80 64       	ori	r24, 0x40	; 64
    b974:	86 87       	std	Z+14, r24	; 0x0e
    b976:	80 e0       	ldi	r24, 0x00	; 0
    b978:	05 c1       	rjmp	.+522    	; 0xbb84 <f_write+0x324>
    b97a:	61 30       	cpi	r22, 0x01	; 1
    b97c:	71 05       	cpc	r23, r1
    b97e:	81 05       	cpc	r24, r1
    b980:	91 05       	cpc	r25, r1
    b982:	11 f4       	brne	.+4      	; 0xb988 <f_write+0x128>
    b984:	82 e0       	ldi	r24, 0x02	; 2
    b986:	07 c0       	rjmp	.+14     	; 0xb996 <f_write+0x136>
    b988:	6f 3f       	cpi	r22, 0xFF	; 255
    b98a:	ff ef       	ldi	r31, 0xFF	; 255
    b98c:	7f 07       	cpc	r23, r31
    b98e:	8f 07       	cpc	r24, r31
    b990:	9f 07       	cpc	r25, r31
    b992:	21 f4       	brne	.+8      	; 0xb99c <f_write+0x13c>
    b994:	81 e0       	ldi	r24, 0x01	; 1
    b996:	f7 01       	movw	r30, r14
    b998:	87 87       	std	Z+15, r24	; 0x0f
    b99a:	f4 c0       	rjmp	.+488    	; 0xbb84 <f_write+0x324>
    b99c:	f7 01       	movw	r30, r14
    b99e:	64 8b       	std	Z+20, r22	; 0x14
    b9a0:	75 8b       	std	Z+21, r23	; 0x15
    b9a2:	86 8b       	std	Z+22, r24	; 0x16
    b9a4:	97 8b       	std	Z+23, r25	; 0x17
    b9a6:	06 81       	ldd	r16, Z+6	; 0x06
    b9a8:	17 81       	ldd	r17, Z+7	; 0x07
    b9aa:	20 85       	ldd	r18, Z+8	; 0x08
    b9ac:	31 85       	ldd	r19, Z+9	; 0x09
    b9ae:	01 15       	cp	r16, r1
    b9b0:	11 05       	cpc	r17, r1
    b9b2:	21 05       	cpc	r18, r1
    b9b4:	31 05       	cpc	r19, r1
    b9b6:	21 f4       	brne	.+8      	; 0xb9c0 <f_write+0x160>
    b9b8:	66 83       	std	Z+6, r22	; 0x06
    b9ba:	77 83       	std	Z+7, r23	; 0x07
    b9bc:	80 87       	std	Z+8, r24	; 0x08
    b9be:	91 87       	std	Z+9, r25	; 0x09
    b9c0:	f7 01       	movw	r30, r14
    b9c2:	86 85       	ldd	r24, Z+14	; 0x0e
    b9c4:	87 ff       	sbrs	r24, 7
    b9c6:	13 c0       	rjmp	.+38     	; 0xb9ee <f_write+0x18e>
    b9c8:	20 8d       	ldd	r18, Z+24	; 0x18
    b9ca:	31 8d       	ldd	r19, Z+25	; 0x19
    b9cc:	42 8d       	ldd	r20, Z+26	; 0x1a
    b9ce:	53 8d       	ldd	r21, Z+27	; 0x1b
    b9d0:	e9 81       	ldd	r30, Y+1	; 0x01
    b9d2:	fa 81       	ldd	r31, Y+2	; 0x02
    b9d4:	01 e0       	ldi	r16, 0x01	; 1
    b9d6:	10 e0       	ldi	r17, 0x00	; 0
    b9d8:	6d 81       	ldd	r22, Y+5	; 0x05
    b9da:	7e 81       	ldd	r23, Y+6	; 0x06
    b9dc:	81 81       	ldd	r24, Z+1	; 0x01
    b9de:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    b9e2:	89 2b       	or	r24, r25
    b9e4:	b9 f6       	brne	.-82     	; 0xb994 <f_write+0x134>
    b9e6:	f7 01       	movw	r30, r14
    b9e8:	86 85       	ldd	r24, Z+14	; 0x0e
    b9ea:	8f 77       	andi	r24, 0x7F	; 127
    b9ec:	86 87       	std	Z+14, r24	; 0x0e
    b9ee:	29 81       	ldd	r18, Y+1	; 0x01
    b9f0:	3a 81       	ldd	r19, Y+2	; 0x02
    b9f2:	3c 83       	std	Y+4, r19	; 0x04
    b9f4:	2b 83       	std	Y+3, r18	; 0x03
    b9f6:	f7 01       	movw	r30, r14
    b9f8:	44 89       	ldd	r20, Z+20	; 0x14
    b9fa:	55 89       	ldd	r21, Z+21	; 0x15
    b9fc:	66 89       	ldd	r22, Z+22	; 0x16
    b9fe:	77 89       	ldd	r23, Z+23	; 0x17
    ba00:	c9 01       	movw	r24, r18
    ba02:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    ba06:	61 15       	cp	r22, r1
    ba08:	71 05       	cpc	r23, r1
    ba0a:	81 05       	cpc	r24, r1
    ba0c:	91 05       	cpc	r25, r1
    ba0e:	09 f4       	brne	.+2      	; 0xba12 <f_write+0x1b2>
    ba10:	b9 cf       	rjmp	.-142    	; 0xb984 <f_write+0x124>
    ba12:	1b 01       	movw	r2, r22
    ba14:	2c 01       	movw	r4, r24
    ba16:	28 0c       	add	r2, r8
    ba18:	39 1c       	adc	r3, r9
    ba1a:	41 1c       	adc	r4, r1
    ba1c:	51 1c       	adc	r5, r1
    ba1e:	65 01       	movw	r12, r10
    ba20:	cd 2c       	mov	r12, r13
    ba22:	dd 24       	eor	r13, r13
    ba24:	c6 94       	lsr	r12
    ba26:	c1 14       	cp	r12, r1
    ba28:	d1 04       	cpc	r13, r1
    ba2a:	f1 f1       	breq	.+124    	; 0xbaa8 <f_write+0x248>
    ba2c:	eb 81       	ldd	r30, Y+3	; 0x03
    ba2e:	fc 81       	ldd	r31, Y+4	; 0x04
    ba30:	81 85       	ldd	r24, Z+9	; 0x09
    ba32:	92 85       	ldd	r25, Z+10	; 0x0a
    ba34:	94 01       	movw	r18, r8
    ba36:	2c 0d       	add	r18, r12
    ba38:	3d 1d       	adc	r19, r13
    ba3a:	82 17       	cp	r24, r18
    ba3c:	93 07       	cpc	r25, r19
    ba3e:	18 f4       	brcc	.+6      	; 0xba46 <f_write+0x1e6>
    ba40:	6c 01       	movw	r12, r24
    ba42:	c8 18       	sub	r12, r8
    ba44:	d9 08       	sbc	r13, r9
    ba46:	86 01       	movw	r16, r12
    ba48:	a2 01       	movw	r20, r4
    ba4a:	91 01       	movw	r18, r2
    ba4c:	b3 01       	movw	r22, r6
    ba4e:	eb 81       	ldd	r30, Y+3	; 0x03
    ba50:	fc 81       	ldd	r31, Y+4	; 0x04
    ba52:	81 81       	ldd	r24, Z+1	; 0x01
    ba54:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    ba58:	89 2b       	or	r24, r25
    ba5a:	09 f0       	breq	.+2      	; 0xba5e <f_write+0x1fe>
    ba5c:	9b cf       	rjmp	.-202    	; 0xb994 <f_write+0x134>
    ba5e:	f7 01       	movw	r30, r14
    ba60:	80 8d       	ldd	r24, Z+24	; 0x18
    ba62:	91 8d       	ldd	r25, Z+25	; 0x19
    ba64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    ba66:	b3 8d       	ldd	r27, Z+27	; 0x1b
    ba68:	82 19       	sub	r24, r2
    ba6a:	93 09       	sbc	r25, r3
    ba6c:	a4 09       	sbc	r26, r4
    ba6e:	b5 09       	sbc	r27, r5
    ba70:	a6 01       	movw	r20, r12
    ba72:	60 e0       	ldi	r22, 0x00	; 0
    ba74:	70 e0       	ldi	r23, 0x00	; 0
    ba76:	84 17       	cp	r24, r20
    ba78:	95 07       	cpc	r25, r21
    ba7a:	a6 07       	cpc	r26, r22
    ba7c:	b7 07       	cpc	r27, r23
    ba7e:	80 f4       	brcc	.+32     	; 0xbaa0 <f_write+0x240>
    ba80:	98 2f       	mov	r25, r24
    ba82:	88 27       	eor	r24, r24
    ba84:	99 0f       	add	r25, r25
    ba86:	b3 01       	movw	r22, r6
    ba88:	68 0f       	add	r22, r24
    ba8a:	79 1f       	adc	r23, r25
    ba8c:	40 e0       	ldi	r20, 0x00	; 0
    ba8e:	52 e0       	ldi	r21, 0x02	; 2
    ba90:	8d 81       	ldd	r24, Y+5	; 0x05
    ba92:	9e 81       	ldd	r25, Y+6	; 0x06
    ba94:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    ba98:	f7 01       	movw	r30, r14
    ba9a:	86 85       	ldd	r24, Z+14	; 0x0e
    ba9c:	8f 77       	andi	r24, 0x7F	; 127
    ba9e:	86 87       	std	Z+14, r24	; 0x0e
    baa0:	dc 2c       	mov	r13, r12
    baa2:	cc 24       	eor	r12, r12
    baa4:	dd 0c       	add	r13, r13
    baa6:	43 c0       	rjmp	.+134    	; 0xbb2e <f_write+0x2ce>
    baa8:	f7 01       	movw	r30, r14
    baaa:	80 8d       	ldd	r24, Z+24	; 0x18
    baac:	91 8d       	ldd	r25, Z+25	; 0x19
    baae:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bab0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bab2:	28 16       	cp	r2, r24
    bab4:	39 06       	cpc	r3, r25
    bab6:	4a 06       	cpc	r4, r26
    bab8:	5b 06       	cpc	r5, r27
    baba:	d9 f0       	breq	.+54     	; 0xbaf2 <f_write+0x292>
    babc:	40 89       	ldd	r20, Z+16	; 0x10
    babe:	51 89       	ldd	r21, Z+17	; 0x11
    bac0:	62 89       	ldd	r22, Z+18	; 0x12
    bac2:	73 89       	ldd	r23, Z+19	; 0x13
    bac4:	82 85       	ldd	r24, Z+10	; 0x0a
    bac6:	93 85       	ldd	r25, Z+11	; 0x0b
    bac8:	a4 85       	ldd	r26, Z+12	; 0x0c
    baca:	b5 85       	ldd	r27, Z+13	; 0x0d
    bacc:	48 17       	cp	r20, r24
    bace:	59 07       	cpc	r21, r25
    bad0:	6a 07       	cpc	r22, r26
    bad2:	7b 07       	cpc	r23, r27
    bad4:	70 f4       	brcc	.+28     	; 0xbaf2 <f_write+0x292>
    bad6:	01 e0       	ldi	r16, 0x01	; 1
    bad8:	10 e0       	ldi	r17, 0x00	; 0
    bada:	a2 01       	movw	r20, r4
    badc:	91 01       	movw	r18, r2
    bade:	6d 81       	ldd	r22, Y+5	; 0x05
    bae0:	7e 81       	ldd	r23, Y+6	; 0x06
    bae2:	eb 81       	ldd	r30, Y+3	; 0x03
    bae4:	fc 81       	ldd	r31, Y+4	; 0x04
    bae6:	81 81       	ldd	r24, Z+1	; 0x01
    bae8:	0e 94 df 6e 	call	0xddbe	; 0xddbe <disk_read>
    baec:	89 2b       	or	r24, r25
    baee:	09 f0       	breq	.+2      	; 0xbaf2 <f_write+0x292>
    baf0:	51 cf       	rjmp	.-350    	; 0xb994 <f_write+0x134>
    baf2:	f7 01       	movw	r30, r14
    baf4:	20 8e       	std	Z+24, r2	; 0x18
    baf6:	31 8e       	std	Z+25, r3	; 0x19
    baf8:	42 8e       	std	Z+26, r4	; 0x1a
    bafa:	53 8e       	std	Z+27, r5	; 0x1b
    bafc:	f7 01       	movw	r30, r14
    bafe:	80 89       	ldd	r24, Z+16	; 0x10
    bb00:	91 89       	ldd	r25, Z+17	; 0x11
    bb02:	91 70       	andi	r25, 0x01	; 1
    bb04:	20 e0       	ldi	r18, 0x00	; 0
    bb06:	32 e0       	ldi	r19, 0x02	; 2
    bb08:	28 1b       	sub	r18, r24
    bb0a:	39 0b       	sbc	r19, r25
    bb0c:	65 01       	movw	r12, r10
    bb0e:	2a 15       	cp	r18, r10
    bb10:	3b 05       	cpc	r19, r11
    bb12:	08 f4       	brcc	.+2      	; 0xbb16 <f_write+0x2b6>
    bb14:	69 01       	movw	r12, r18
    bb16:	a6 01       	movw	r20, r12
    bb18:	b3 01       	movw	r22, r6
    bb1a:	2d 81       	ldd	r18, Y+5	; 0x05
    bb1c:	3e 81       	ldd	r19, Y+6	; 0x06
    bb1e:	82 0f       	add	r24, r18
    bb20:	93 1f       	adc	r25, r19
    bb22:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    bb26:	f7 01       	movw	r30, r14
    bb28:	86 85       	ldd	r24, Z+14	; 0x0e
    bb2a:	80 68       	ori	r24, 0x80	; 128
    bb2c:	86 87       	std	Z+14, r24	; 0x0e
    bb2e:	6c 0c       	add	r6, r12
    bb30:	7d 1c       	adc	r7, r13
    bb32:	f7 01       	movw	r30, r14
    bb34:	80 89       	ldd	r24, Z+16	; 0x10
    bb36:	91 89       	ldd	r25, Z+17	; 0x11
    bb38:	a2 89       	ldd	r26, Z+18	; 0x12
    bb3a:	b3 89       	ldd	r27, Z+19	; 0x13
    bb3c:	8c 0d       	add	r24, r12
    bb3e:	9d 1d       	adc	r25, r13
    bb40:	a1 1d       	adc	r26, r1
    bb42:	b1 1d       	adc	r27, r1
    bb44:	80 8b       	std	Z+16, r24	; 0x10
    bb46:	91 8b       	std	Z+17, r25	; 0x11
    bb48:	a2 8b       	std	Z+18, r26	; 0x12
    bb4a:	b3 8b       	std	Z+19, r27	; 0x13
    bb4c:	42 85       	ldd	r20, Z+10	; 0x0a
    bb4e:	53 85       	ldd	r21, Z+11	; 0x0b
    bb50:	64 85       	ldd	r22, Z+12	; 0x0c
    bb52:	75 85       	ldd	r23, Z+13	; 0x0d
    bb54:	48 17       	cp	r20, r24
    bb56:	59 07       	cpc	r21, r25
    bb58:	6a 07       	cpc	r22, r26
    bb5a:	7b 07       	cpc	r23, r27
    bb5c:	10 f4       	brcc	.+4      	; 0xbb62 <f_write+0x302>
    bb5e:	ac 01       	movw	r20, r24
    bb60:	bd 01       	movw	r22, r26
    bb62:	f7 01       	movw	r30, r14
    bb64:	42 87       	std	Z+10, r20	; 0x0a
    bb66:	53 87       	std	Z+11, r21	; 0x0b
    bb68:	64 87       	std	Z+12, r22	; 0x0c
    bb6a:	75 87       	std	Z+13, r23	; 0x0d
    bb6c:	ef 81       	ldd	r30, Y+7	; 0x07
    bb6e:	f8 85       	ldd	r31, Y+8	; 0x08
    bb70:	80 81       	ld	r24, Z
    bb72:	91 81       	ldd	r25, Z+1	; 0x01
    bb74:	8c 0d       	add	r24, r12
    bb76:	9d 1d       	adc	r25, r13
    bb78:	91 83       	std	Z+1, r25	; 0x01
    bb7a:	80 83       	st	Z, r24
    bb7c:	ac 18       	sub	r10, r12
    bb7e:	bd 08       	sbc	r11, r13
    bb80:	a5 ce       	rjmp	.-694    	; 0xb8cc <f_write+0x6c>
    bb82:	87 e0       	ldi	r24, 0x07	; 7
    bb84:	90 e0       	ldi	r25, 0x00	; 0
    bb86:	28 96       	adiw	r28, 0x08	; 8
    bb88:	e2 e1       	ldi	r30, 0x12	; 18
    bb8a:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000bb8e <f_sync>:
    bb8e:	8f 92       	push	r8
    bb90:	9f 92       	push	r9
    bb92:	af 92       	push	r10
    bb94:	bf 92       	push	r11
    bb96:	ef 92       	push	r14
    bb98:	ff 92       	push	r15
    bb9a:	0f 93       	push	r16
    bb9c:	1f 93       	push	r17
    bb9e:	cf 93       	push	r28
    bba0:	df 93       	push	r29
    bba2:	00 d0       	rcall	.+0      	; 0xbba4 <f_sync+0x16>
    bba4:	cd b7       	in	r28, 0x3d	; 61
    bba6:	de b7       	in	r29, 0x3e	; 62
    bba8:	7c 01       	movw	r14, r24
    bbaa:	be 01       	movw	r22, r28
    bbac:	6f 5f       	subi	r22, 0xFF	; 255
    bbae:	7f 4f       	sbci	r23, 0xFF	; 255
    bbb0:	0e 94 64 48 	call	0x90c8	; 0x90c8 <validate>
    bbb4:	00 97       	sbiw	r24, 0x00	; 0
    bbb6:	09 f0       	breq	.+2      	; 0xbbba <f_sync+0x2c>
    bbb8:	5d c0       	rjmp	.+186    	; 0xbc74 <f_sync+0xe6>
    bbba:	f7 01       	movw	r30, r14
    bbbc:	86 85       	ldd	r24, Z+14	; 0x0e
    bbbe:	86 ff       	sbrs	r24, 6
    bbc0:	55 c0       	rjmp	.+170    	; 0xbc6c <f_sync+0xde>
    bbc2:	87 ff       	sbrs	r24, 7
    bbc4:	15 c0       	rjmp	.+42     	; 0xbbf0 <f_sync+0x62>
    bbc6:	20 8d       	ldd	r18, Z+24	; 0x18
    bbc8:	31 8d       	ldd	r19, Z+25	; 0x19
    bbca:	42 8d       	ldd	r20, Z+26	; 0x1a
    bbcc:	53 8d       	ldd	r21, Z+27	; 0x1b
    bbce:	e9 81       	ldd	r30, Y+1	; 0x01
    bbd0:	fa 81       	ldd	r31, Y+2	; 0x02
    bbd2:	01 e0       	ldi	r16, 0x01	; 1
    bbd4:	10 e0       	ldi	r17, 0x00	; 0
    bbd6:	b7 01       	movw	r22, r14
    bbd8:	6c 5d       	subi	r22, 0xDC	; 220
    bbda:	7f 4f       	sbci	r23, 0xFF	; 255
    bbdc:	81 81       	ldd	r24, Z+1	; 0x01
    bbde:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    bbe2:	89 2b       	or	r24, r25
    bbe4:	09 f0       	breq	.+2      	; 0xbbe8 <f_sync+0x5a>
    bbe6:	44 c0       	rjmp	.+136    	; 0xbc70 <f_sync+0xe2>
    bbe8:	f7 01       	movw	r30, r14
    bbea:	86 85       	ldd	r24, Z+14	; 0x0e
    bbec:	8f 77       	andi	r24, 0x7F	; 127
    bbee:	86 87       	std	Z+14, r24	; 0x0e
    bbf0:	0e 94 62 75 	call	0xeac4	; 0xeac4 <get_fattime>
    bbf4:	4b 01       	movw	r8, r22
    bbf6:	5c 01       	movw	r10, r24
    bbf8:	f7 01       	movw	r30, r14
    bbfa:	44 8d       	ldd	r20, Z+28	; 0x1c
    bbfc:	55 8d       	ldd	r21, Z+29	; 0x1d
    bbfe:	66 8d       	ldd	r22, Z+30	; 0x1e
    bc00:	77 8d       	ldd	r23, Z+31	; 0x1f
    bc02:	89 81       	ldd	r24, Y+1	; 0x01
    bc04:	9a 81       	ldd	r25, Y+2	; 0x02
    bc06:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    bc0a:	00 97       	sbiw	r24, 0x00	; 0
    bc0c:	99 f5       	brne	.+102    	; 0xbc74 <f_sync+0xe6>
    bc0e:	f7 01       	movw	r30, r14
    bc10:	00 a1       	ldd	r16, Z+32	; 0x20
    bc12:	11 a1       	ldd	r17, Z+33	; 0x21
    bc14:	f8 01       	movw	r30, r16
    bc16:	83 85       	ldd	r24, Z+11	; 0x0b
    bc18:	80 62       	ori	r24, 0x20	; 32
    bc1a:	83 87       	std	Z+11, r24	; 0x0b
    bc1c:	f7 01       	movw	r30, r14
    bc1e:	26 81       	ldd	r18, Z+6	; 0x06
    bc20:	37 81       	ldd	r19, Z+7	; 0x07
    bc22:	40 85       	ldd	r20, Z+8	; 0x08
    bc24:	51 85       	ldd	r21, Z+9	; 0x09
    bc26:	b8 01       	movw	r22, r16
    bc28:	80 81       	ld	r24, Z
    bc2a:	91 81       	ldd	r25, Z+1	; 0x01
    bc2c:	0e 94 b1 48 	call	0x9162	; 0x9162 <st_clust.isra.2>
    bc30:	f7 01       	movw	r30, r14
    bc32:	42 85       	ldd	r20, Z+10	; 0x0a
    bc34:	53 85       	ldd	r21, Z+11	; 0x0b
    bc36:	64 85       	ldd	r22, Z+12	; 0x0c
    bc38:	75 85       	ldd	r23, Z+13	; 0x0d
    bc3a:	c8 01       	movw	r24, r16
    bc3c:	4c 96       	adiw	r24, 0x1c	; 28
    bc3e:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    bc42:	b5 01       	movw	r22, r10
    bc44:	a4 01       	movw	r20, r8
    bc46:	c8 01       	movw	r24, r16
    bc48:	46 96       	adiw	r24, 0x16	; 22
    bc4a:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    bc4e:	f8 01       	movw	r30, r16
    bc50:	12 8a       	std	Z+18, r1	; 0x12
    bc52:	13 8a       	std	Z+19, r1	; 0x13
    bc54:	89 81       	ldd	r24, Y+1	; 0x01
    bc56:	9a 81       	ldd	r25, Y+2	; 0x02
    bc58:	21 e0       	ldi	r18, 0x01	; 1
    bc5a:	fc 01       	movw	r30, r24
    bc5c:	23 83       	std	Z+3, r18	; 0x03
    bc5e:	0e 94 18 49 	call	0x9230	; 0x9230 <sync_fs>
    bc62:	f7 01       	movw	r30, r14
    bc64:	26 85       	ldd	r18, Z+14	; 0x0e
    bc66:	2f 7b       	andi	r18, 0xBF	; 191
    bc68:	26 87       	std	Z+14, r18	; 0x0e
    bc6a:	04 c0       	rjmp	.+8      	; 0xbc74 <f_sync+0xe6>
    bc6c:	80 e0       	ldi	r24, 0x00	; 0
    bc6e:	01 c0       	rjmp	.+2      	; 0xbc72 <f_sync+0xe4>
    bc70:	81 e0       	ldi	r24, 0x01	; 1
    bc72:	90 e0       	ldi	r25, 0x00	; 0
    bc74:	0f 90       	pop	r0
    bc76:	0f 90       	pop	r0
    bc78:	df 91       	pop	r29
    bc7a:	cf 91       	pop	r28
    bc7c:	1f 91       	pop	r17
    bc7e:	0f 91       	pop	r16
    bc80:	ff 90       	pop	r15
    bc82:	ef 90       	pop	r14
    bc84:	bf 90       	pop	r11
    bc86:	af 90       	pop	r10
    bc88:	9f 90       	pop	r9
    bc8a:	8f 90       	pop	r8
    bc8c:	08 95       	ret

0000bc8e <f_close>:
    bc8e:	a2 e0       	ldi	r26, 0x02	; 2
    bc90:	b0 e0       	ldi	r27, 0x00	; 0
    bc92:	ed e4       	ldi	r30, 0x4D	; 77
    bc94:	fe e5       	ldi	r31, 0x5E	; 94
    bc96:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    bc9a:	8c 01       	movw	r16, r24
    bc9c:	78 df       	rcall	.-272    	; 0xbb8e <f_sync>
    bc9e:	00 97       	sbiw	r24, 0x00	; 0
    bca0:	59 f4       	brne	.+22     	; 0xbcb8 <f_close+0x2a>
    bca2:	be 01       	movw	r22, r28
    bca4:	6f 5f       	subi	r22, 0xFF	; 255
    bca6:	7f 4f       	sbci	r23, 0xFF	; 255
    bca8:	c8 01       	movw	r24, r16
    bcaa:	0e 94 64 48 	call	0x90c8	; 0x90c8 <validate>
    bcae:	00 97       	sbiw	r24, 0x00	; 0
    bcb0:	19 f4       	brne	.+6      	; 0xbcb8 <f_close+0x2a>
    bcb2:	f8 01       	movw	r30, r16
    bcb4:	11 82       	std	Z+1, r1	; 0x01
    bcb6:	10 82       	st	Z, r1
    bcb8:	22 96       	adiw	r28, 0x02	; 2
    bcba:	e4 e0       	ldi	r30, 0x04	; 4
    bcbc:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

0000bcc0 <f_chdir>:
    bcc0:	a2 e3       	ldi	r26, 0x32	; 50
    bcc2:	b0 e0       	ldi	r27, 0x00	; 0
    bcc4:	e6 e6       	ldi	r30, 0x66	; 102
    bcc6:	fe e5       	ldi	r31, 0x5E	; 94
    bcc8:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    bccc:	9a ab       	std	Y+50, r25	; 0x32
    bcce:	89 ab       	std	Y+49, r24	; 0x31
    bcd0:	40 e0       	ldi	r20, 0x00	; 0
    bcd2:	be 01       	movw	r22, r28
    bcd4:	61 5d       	subi	r22, 0xD1	; 209
    bcd6:	7f 4f       	sbci	r23, 0xFF	; 255
    bcd8:	ce 01       	movw	r24, r28
    bcda:	c1 96       	adiw	r24, 0x31	; 49
    bcdc:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    bce0:	00 97       	sbiw	r24, 0x00	; 0
    bce2:	09 f0       	breq	.+2      	; 0xbce6 <f_chdir+0x26>
    bce4:	44 c0       	rjmp	.+136    	; 0xbd6e <f_chdir+0xae>
    bce6:	8f a5       	ldd	r24, Y+47	; 0x2f
    bce8:	98 a9       	ldd	r25, Y+48	; 0x30
    bcea:	9a 83       	std	Y+2, r25	; 0x02
    bcec:	89 83       	std	Y+1, r24	; 0x01
    bcee:	80 e0       	ldi	r24, 0x00	; 0
    bcf0:	92 e0       	ldi	r25, 0x02	; 2
    bcf2:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    bcf6:	7c 01       	movw	r14, r24
    bcf8:	00 97       	sbiw	r24, 0x00	; 0
    bcfa:	a9 f1       	breq	.+106    	; 0xbd66 <f_chdir+0xa6>
    bcfc:	ef a5       	ldd	r30, Y+47	; 0x2f
    bcfe:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd00:	94 87       	std	Z+12, r25	; 0x0c
    bd02:	83 87       	std	Z+11, r24	; 0x0b
    bd04:	69 a9       	ldd	r22, Y+49	; 0x31
    bd06:	7a a9       	ldd	r23, Y+50	; 0x32
    bd08:	ce 01       	movw	r24, r28
    bd0a:	01 96       	adiw	r24, 0x01	; 1
    bd0c:	03 d8       	rcall	.-4090   	; 0xad14 <follow_path>
    bd0e:	8c 01       	movw	r16, r24
    bd10:	89 2b       	or	r24, r25
    bd12:	09 f5       	brne	.+66     	; 0xbd56 <f_chdir+0x96>
    bd14:	88 a5       	ldd	r24, Y+40	; 0x28
    bd16:	87 ff       	sbrs	r24, 7
    bd18:	0b c0       	rjmp	.+22     	; 0xbd30 <f_chdir+0x70>
    bd1a:	ef a5       	ldd	r30, Y+47	; 0x2f
    bd1c:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd1e:	8f 81       	ldd	r24, Y+7	; 0x07
    bd20:	98 85       	ldd	r25, Y+8	; 0x08
    bd22:	a9 85       	ldd	r26, Y+9	; 0x09
    bd24:	ba 85       	ldd	r27, Y+10	; 0x0a
    bd26:	85 8b       	std	Z+21, r24	; 0x15
    bd28:	96 8b       	std	Z+22, r25	; 0x16
    bd2a:	a7 8b       	std	Z+23, r26	; 0x17
    bd2c:	b0 8f       	std	Z+24, r27	; 0x18
    bd2e:	13 c0       	rjmp	.+38     	; 0xbd56 <f_chdir+0x96>
    bd30:	8d 81       	ldd	r24, Y+5	; 0x05
    bd32:	84 ff       	sbrs	r24, 4
    bd34:	0e c0       	rjmp	.+28     	; 0xbd52 <f_chdir+0x92>
    bd36:	cf a4       	ldd	r12, Y+47	; 0x2f
    bd38:	d8 a8       	ldd	r13, Y+48	; 0x30
    bd3a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bd3c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bd3e:	f6 01       	movw	r30, r12
    bd40:	80 81       	ld	r24, Z
    bd42:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    bd46:	f6 01       	movw	r30, r12
    bd48:	65 8b       	std	Z+21, r22	; 0x15
    bd4a:	76 8b       	std	Z+22, r23	; 0x16
    bd4c:	87 8b       	std	Z+23, r24	; 0x17
    bd4e:	90 8f       	std	Z+24, r25	; 0x18
    bd50:	02 c0       	rjmp	.+4      	; 0xbd56 <f_chdir+0x96>
    bd52:	05 e0       	ldi	r16, 0x05	; 5
    bd54:	10 e0       	ldi	r17, 0x00	; 0
    bd56:	c7 01       	movw	r24, r14
    bd58:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    bd5c:	04 30       	cpi	r16, 0x04	; 4
    bd5e:	11 05       	cpc	r17, r1
    bd60:	29 f4       	brne	.+10     	; 0xbd6c <f_chdir+0xac>
    bd62:	85 e0       	ldi	r24, 0x05	; 5
    bd64:	01 c0       	rjmp	.+2      	; 0xbd68 <f_chdir+0xa8>
    bd66:	81 e1       	ldi	r24, 0x11	; 17
    bd68:	90 e0       	ldi	r25, 0x00	; 0
    bd6a:	01 c0       	rjmp	.+2      	; 0xbd6e <f_chdir+0xae>
    bd6c:	c8 01       	movw	r24, r16
    bd6e:	e2 96       	adiw	r28, 0x32	; 50
    bd70:	e8 e0       	ldi	r30, 0x08	; 8
    bd72:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000bd76 <f_getcwd>:
    bd76:	a8 e4       	ldi	r26, 0x48	; 72
    bd78:	b1 e0       	ldi	r27, 0x01	; 1
    bd7a:	e1 ec       	ldi	r30, 0xC1	; 193
    bd7c:	fe e5       	ldi	r31, 0x5E	; 94
    bd7e:	0c 94 06 ed 	jmp	0x1da0c	; 0x1da0c <__prologue_saves__+0x2>
    bd82:	c9 5b       	subi	r28, 0xB9	; 185
    bd84:	de 4f       	sbci	r29, 0xFE	; 254
    bd86:	99 83       	std	Y+1, r25	; 0x01
    bd88:	88 83       	st	Y, r24
    bd8a:	c7 54       	subi	r28, 0x47	; 71
    bd8c:	d1 40       	sbci	r29, 0x01	; 1
    bd8e:	5b 01       	movw	r10, r22
    bd90:	fc 01       	movw	r30, r24
    bd92:	10 82       	st	Z, r1
    bd94:	40 e0       	ldi	r20, 0x00	; 0
    bd96:	be 01       	movw	r22, r28
    bd98:	6b 5b       	subi	r22, 0xBB	; 187
    bd9a:	7e 4f       	sbci	r23, 0xFE	; 254
    bd9c:	ce 01       	movw	r24, r28
    bd9e:	89 5b       	subi	r24, 0xB9	; 185
    bda0:	9e 4f       	sbci	r25, 0xFE	; 254
    bda2:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    bda6:	8c 01       	movw	r16, r24
    bda8:	89 2b       	or	r24, r25
    bdaa:	09 f0       	breq	.+2      	; 0xbdae <f_getcwd+0x38>
    bdac:	08 c1       	rjmp	.+528    	; 0xbfbe <f_getcwd+0x248>
    bdae:	cb 5b       	subi	r28, 0xBB	; 187
    bdb0:	de 4f       	sbci	r29, 0xFE	; 254
    bdb2:	88 81       	ld	r24, Y
    bdb4:	99 81       	ldd	r25, Y+1	; 0x01
    bdb6:	c5 54       	subi	r28, 0x45	; 69
    bdb8:	d1 40       	sbci	r29, 0x01	; 1
    bdba:	c9 5e       	subi	r28, 0xE9	; 233
    bdbc:	de 4f       	sbci	r29, 0xFE	; 254
    bdbe:	99 83       	std	Y+1, r25	; 0x01
    bdc0:	88 83       	st	Y, r24
    bdc2:	c7 51       	subi	r28, 0x17	; 23
    bdc4:	d1 40       	sbci	r29, 0x01	; 1
    bdc6:	80 e0       	ldi	r24, 0x00	; 0
    bdc8:	92 e0       	ldi	r25, 0x02	; 2
    bdca:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    bdce:	6c 01       	movw	r12, r24
    bdd0:	00 97       	sbiw	r24, 0x00	; 0
    bdd2:	09 f4       	brne	.+2      	; 0xbdd6 <f_getcwd+0x60>
    bdd4:	f6 c0       	rjmp	.+492    	; 0xbfc2 <f_getcwd+0x24c>
    bdd6:	cb 5b       	subi	r28, 0xBB	; 187
    bdd8:	de 4f       	sbci	r29, 0xFE	; 254
    bdda:	e8 81       	ld	r30, Y
    bddc:	f9 81       	ldd	r31, Y+1	; 0x01
    bdde:	c5 54       	subi	r28, 0x45	; 69
    bde0:	d1 40       	sbci	r29, 0x01	; 1
    bde2:	94 87       	std	Z+12, r25	; 0x0c
    bde4:	83 87       	std	Z+11, r24	; 0x0b
    bde6:	85 89       	ldd	r24, Z+21	; 0x15
    bde8:	96 89       	ldd	r25, Z+22	; 0x16
    bdea:	a7 89       	ldd	r26, Z+23	; 0x17
    bdec:	b0 8d       	ldd	r27, Z+24	; 0x18
    bdee:	c3 5e       	subi	r28, 0xE3	; 227
    bdf0:	de 4f       	sbci	r29, 0xFE	; 254
    bdf2:	88 83       	st	Y, r24
    bdf4:	99 83       	std	Y+1, r25	; 0x01
    bdf6:	aa 83       	std	Y+2, r26	; 0x02
    bdf8:	bb 83       	std	Y+3, r27	; 0x03
    bdfa:	cd 51       	subi	r28, 0x1D	; 29
    bdfc:	d1 40       	sbci	r29, 0x01	; 1
    bdfe:	75 01       	movw	r14, r10
    be00:	ce 01       	movw	r24, r28
    be02:	01 96       	adiw	r24, 0x01	; 1
    be04:	4c 01       	movw	r8, r24
    be06:	8f e2       	ldi	r24, 0x2F	; 47
    be08:	38 2e       	mov	r3, r24
    be0a:	c3 5e       	subi	r28, 0xE3	; 227
    be0c:	de 4f       	sbci	r29, 0xFE	; 254
    be0e:	48 80       	ld	r4, Y
    be10:	59 80       	ldd	r5, Y+1	; 0x01
    be12:	6a 80       	ldd	r6, Y+2	; 0x02
    be14:	7b 80       	ldd	r7, Y+3	; 0x03
    be16:	cd 51       	subi	r28, 0x1D	; 29
    be18:	d1 40       	sbci	r29, 0x01	; 1
    be1a:	41 14       	cp	r4, r1
    be1c:	51 04       	cpc	r5, r1
    be1e:	61 04       	cpc	r6, r1
    be20:	71 04       	cpc	r7, r1
    be22:	09 f4       	brne	.+2      	; 0xbe26 <f_getcwd+0xb0>
    be24:	a5 c0       	rjmp	.+330    	; 0xbf70 <f_getcwd+0x1fa>
    be26:	40 e2       	ldi	r20, 0x20	; 32
    be28:	50 e0       	ldi	r21, 0x00	; 0
    be2a:	60 e0       	ldi	r22, 0x00	; 0
    be2c:	70 e0       	ldi	r23, 0x00	; 0
    be2e:	ce 01       	movw	r24, r28
    be30:	89 5e       	subi	r24, 0xE9	; 233
    be32:	9e 4f       	sbci	r25, 0xFE	; 254
    be34:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <dir_sdi>
    be38:	00 97       	sbiw	r24, 0x00	; 0
    be3a:	09 f0       	breq	.+2      	; 0xbe3e <f_getcwd+0xc8>
    be3c:	95 c0       	rjmp	.+298    	; 0xbf68 <f_getcwd+0x1f2>
    be3e:	c3 5d       	subi	r28, 0xD3	; 211
    be40:	de 4f       	sbci	r29, 0xFE	; 254
    be42:	48 81       	ld	r20, Y
    be44:	59 81       	ldd	r21, Y+1	; 0x01
    be46:	6a 81       	ldd	r22, Y+2	; 0x02
    be48:	7b 81       	ldd	r23, Y+3	; 0x03
    be4a:	cd 52       	subi	r28, 0x2D	; 45
    be4c:	d1 40       	sbci	r29, 0x01	; 1
    be4e:	cb 5b       	subi	r28, 0xBB	; 187
    be50:	de 4f       	sbci	r29, 0xFE	; 254
    be52:	88 81       	ld	r24, Y
    be54:	99 81       	ldd	r25, Y+1	; 0x01
    be56:	c5 54       	subi	r28, 0x45	; 69
    be58:	d1 40       	sbci	r29, 0x01	; 1
    be5a:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    be5e:	00 97       	sbiw	r24, 0x00	; 0
    be60:	09 f0       	breq	.+2      	; 0xbe64 <f_getcwd+0xee>
    be62:	82 c0       	rjmp	.+260    	; 0xbf68 <f_getcwd+0x1f2>
    be64:	cf 5c       	subi	r28, 0xCF	; 207
    be66:	de 4f       	sbci	r29, 0xFE	; 254
    be68:	68 81       	ld	r22, Y
    be6a:	79 81       	ldd	r23, Y+1	; 0x01
    be6c:	c1 53       	subi	r28, 0x31	; 49
    be6e:	d1 40       	sbci	r29, 0x01	; 1
    be70:	cb 5b       	subi	r28, 0xBB	; 187
    be72:	de 4f       	sbci	r29, 0xFE	; 254
    be74:	e8 81       	ld	r30, Y
    be76:	f9 81       	ldd	r31, Y+1	; 0x01
    be78:	c5 54       	subi	r28, 0x45	; 69
    be7a:	d1 40       	sbci	r29, 0x01	; 1
    be7c:	80 81       	ld	r24, Z
    be7e:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    be82:	c3 5e       	subi	r28, 0xE3	; 227
    be84:	de 4f       	sbci	r29, 0xFE	; 254
    be86:	68 83       	st	Y, r22
    be88:	79 83       	std	Y+1, r23	; 0x01
    be8a:	8a 83       	std	Y+2, r24	; 0x02
    be8c:	9b 83       	std	Y+3, r25	; 0x03
    be8e:	cd 51       	subi	r28, 0x1D	; 29
    be90:	d1 40       	sbci	r29, 0x01	; 1
    be92:	40 e0       	ldi	r20, 0x00	; 0
    be94:	50 e0       	ldi	r21, 0x00	; 0
    be96:	ba 01       	movw	r22, r20
    be98:	ce 01       	movw	r24, r28
    be9a:	89 5e       	subi	r24, 0xE9	; 233
    be9c:	9e 4f       	sbci	r25, 0xFE	; 254
    be9e:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <dir_sdi>
    bea2:	00 97       	sbiw	r24, 0x00	; 0
    bea4:	09 f0       	breq	.+2      	; 0xbea8 <f_getcwd+0x132>
    bea6:	60 c0       	rjmp	.+192    	; 0xbf68 <f_getcwd+0x1f2>
    bea8:	60 e0       	ldi	r22, 0x00	; 0
    beaa:	70 e0       	ldi	r23, 0x00	; 0
    beac:	ce 01       	movw	r24, r28
    beae:	89 5e       	subi	r24, 0xE9	; 233
    beb0:	9e 4f       	sbci	r25, 0xFE	; 254
    beb2:	0e 94 b9 52 	call	0xa572	; 0xa572 <dir_read>
    beb6:	00 97       	sbiw	r24, 0x00	; 0
    beb8:	09 f0       	breq	.+2      	; 0xbebc <f_getcwd+0x146>
    beba:	86 c0       	rjmp	.+268    	; 0xbfc8 <f_getcwd+0x252>
    bebc:	cf 5c       	subi	r28, 0xCF	; 207
    bebe:	de 4f       	sbci	r29, 0xFE	; 254
    bec0:	68 81       	ld	r22, Y
    bec2:	79 81       	ldd	r23, Y+1	; 0x01
    bec4:	c1 53       	subi	r28, 0x31	; 49
    bec6:	d1 40       	sbci	r29, 0x01	; 1
    bec8:	cb 5b       	subi	r28, 0xBB	; 187
    beca:	de 4f       	sbci	r29, 0xFE	; 254
    becc:	e8 81       	ld	r30, Y
    bece:	f9 81       	ldd	r31, Y+1	; 0x01
    bed0:	c5 54       	subi	r28, 0x45	; 69
    bed2:	d1 40       	sbci	r29, 0x01	; 1
    bed4:	80 81       	ld	r24, Z
    bed6:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    beda:	46 16       	cp	r4, r22
    bedc:	57 06       	cpc	r5, r23
    bede:	68 06       	cpc	r6, r24
    bee0:	79 06       	cpc	r7, r25
    bee2:	41 f4       	brne	.+16     	; 0xbef4 <f_getcwd+0x17e>
    bee4:	b4 01       	movw	r22, r8
    bee6:	ce 01       	movw	r24, r28
    bee8:	89 5e       	subi	r24, 0xE9	; 233
    beea:	9e 4f       	sbci	r25, 0xFE	; 254
    beec:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <get_fileinfo>
    bef0:	f4 01       	movw	r30, r8
    bef2:	0a c0       	rjmp	.+20     	; 0xbf08 <f_getcwd+0x192>
    bef4:	60 e0       	ldi	r22, 0x00	; 0
    bef6:	70 e0       	ldi	r23, 0x00	; 0
    bef8:	ce 01       	movw	r24, r28
    befa:	89 5e       	subi	r24, 0xE9	; 233
    befc:	9e 4f       	sbci	r25, 0xFE	; 254
    befe:	0e 94 57 51 	call	0xa2ae	; 0xa2ae <dir_next>
    bf02:	00 97       	sbiw	r24, 0x00	; 0
    bf04:	89 f2       	breq	.-94     	; 0xbea8 <f_getcwd+0x132>
    bf06:	60 c0       	rjmp	.+192    	; 0xbfc8 <f_getcwd+0x252>
    bf08:	cf 01       	movw	r24, r30
    bf0a:	88 19       	sub	r24, r8
    bf0c:	99 09       	sbc	r25, r9
    bf0e:	31 96       	adiw	r30, 0x01	; 1
    bf10:	25 89       	ldd	r18, Z+21	; 0x15
    bf12:	21 11       	cpse	r18, r1
    bf14:	f9 cf       	rjmp	.-14     	; 0xbf08 <f_getcwd+0x192>
    bf16:	9c 01       	movw	r18, r24
    bf18:	2d 5f       	subi	r18, 0xFD	; 253
    bf1a:	3f 4f       	sbci	r19, 0xFF	; 255
    bf1c:	e2 16       	cp	r14, r18
    bf1e:	f3 06       	cpc	r15, r19
    bf20:	28 f1       	brcs	.+74     	; 0xbf6c <f_getcwd+0x1f6>
    bf22:	f4 01       	movw	r30, r8
    bf24:	e8 0f       	add	r30, r24
    bf26:	f9 1f       	adc	r31, r25
    bf28:	97 01       	movw	r18, r14
    bf2a:	e8 15       	cp	r30, r8
    bf2c:	f9 05       	cpc	r31, r9
    bf2e:	71 f0       	breq	.+28     	; 0xbf4c <f_getcwd+0x1d6>
    bf30:	21 50       	subi	r18, 0x01	; 1
    bf32:	31 09       	sbc	r19, r1
    bf34:	45 89       	ldd	r20, Z+21	; 0x15
    bf36:	c9 5b       	subi	r28, 0xB9	; 185
    bf38:	de 4f       	sbci	r29, 0xFE	; 254
    bf3a:	a8 81       	ld	r26, Y
    bf3c:	b9 81       	ldd	r27, Y+1	; 0x01
    bf3e:	c7 54       	subi	r28, 0x47	; 71
    bf40:	d1 40       	sbci	r29, 0x01	; 1
    bf42:	a2 0f       	add	r26, r18
    bf44:	b3 1f       	adc	r27, r19
    bf46:	4c 93       	st	X, r20
    bf48:	31 97       	sbiw	r30, 0x01	; 1
    bf4a:	ef cf       	rjmp	.-34     	; 0xbf2a <f_getcwd+0x1b4>
    bf4c:	80 95       	com	r24
    bf4e:	90 95       	com	r25
    bf50:	e8 0e       	add	r14, r24
    bf52:	f9 1e       	adc	r15, r25
    bf54:	c9 5b       	subi	r28, 0xB9	; 185
    bf56:	de 4f       	sbci	r29, 0xFE	; 254
    bf58:	e8 81       	ld	r30, Y
    bf5a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf5c:	c7 54       	subi	r28, 0x47	; 71
    bf5e:	d1 40       	sbci	r29, 0x01	; 1
    bf60:	ee 0d       	add	r30, r14
    bf62:	ff 1d       	adc	r31, r15
    bf64:	30 82       	st	Z, r3
    bf66:	51 cf       	rjmp	.-350    	; 0xbe0a <f_getcwd+0x94>
    bf68:	8c 01       	movw	r16, r24
    bf6a:	02 c0       	rjmp	.+4      	; 0xbf70 <f_getcwd+0x1fa>
    bf6c:	01 e1       	ldi	r16, 0x11	; 17
    bf6e:	10 e0       	ldi	r17, 0x00	; 0
    bf70:	c9 5b       	subi	r28, 0xB9	; 185
    bf72:	de 4f       	sbci	r29, 0xFE	; 254
    bf74:	e8 81       	ld	r30, Y
    bf76:	f9 81       	ldd	r31, Y+1	; 0x01
    bf78:	c7 54       	subi	r28, 0x47	; 71
    bf7a:	d1 40       	sbci	r29, 0x01	; 1
    bf7c:	01 15       	cp	r16, r1
    bf7e:	11 05       	cpc	r17, r1
    bf80:	d1 f4       	brne	.+52     	; 0xbfb6 <f_getcwd+0x240>
    bf82:	ea 14       	cp	r14, r10
    bf84:	fb 04       	cpc	r15, r11
    bf86:	21 f4       	brne	.+8      	; 0xbf90 <f_getcwd+0x21a>
    bf88:	8f e2       	ldi	r24, 0x2F	; 47
    bf8a:	80 83       	st	Z, r24
    bf8c:	31 96       	adiw	r30, 0x01	; 1
    bf8e:	13 c0       	rjmp	.+38     	; 0xbfb6 <f_getcwd+0x240>
    bf90:	31 96       	adiw	r30, 0x01	; 1
    bf92:	c9 5b       	subi	r28, 0xB9	; 185
    bf94:	de 4f       	sbci	r29, 0xFE	; 254
    bf96:	a8 81       	ld	r26, Y
    bf98:	b9 81       	ldd	r27, Y+1	; 0x01
    bf9a:	c7 54       	subi	r28, 0x47	; 71
    bf9c:	d1 40       	sbci	r29, 0x01	; 1
    bf9e:	ae 0d       	add	r26, r14
    bfa0:	bf 1d       	adc	r27, r15
    bfa2:	8c 91       	ld	r24, X
    bfa4:	df 01       	movw	r26, r30
    bfa6:	11 97       	sbiw	r26, 0x01	; 1
    bfa8:	8c 93       	st	X, r24
    bfaa:	c7 01       	movw	r24, r14
    bfac:	01 96       	adiw	r24, 0x01	; 1
    bfae:	7c 01       	movw	r14, r24
    bfb0:	8a 15       	cp	r24, r10
    bfb2:	9b 05       	cpc	r25, r11
    bfb4:	68 f3       	brcs	.-38     	; 0xbf90 <f_getcwd+0x21a>
    bfb6:	10 82       	st	Z, r1
    bfb8:	c6 01       	movw	r24, r12
    bfba:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    bfbe:	c8 01       	movw	r24, r16
    bfc0:	09 c0       	rjmp	.+18     	; 0xbfd4 <f_getcwd+0x25e>
    bfc2:	81 e1       	ldi	r24, 0x11	; 17
    bfc4:	90 e0       	ldi	r25, 0x00	; 0
    bfc6:	06 c0       	rjmp	.+12     	; 0xbfd4 <f_getcwd+0x25e>
    bfc8:	8c 01       	movw	r16, r24
    bfca:	04 97       	sbiw	r24, 0x04	; 4
    bfcc:	89 f6       	brne	.-94     	; 0xbf70 <f_getcwd+0x1fa>
    bfce:	02 e0       	ldi	r16, 0x02	; 2
    bfd0:	10 e0       	ldi	r17, 0x00	; 0
    bfd2:	ce cf       	rjmp	.-100    	; 0xbf70 <f_getcwd+0x1fa>
    bfd4:	c8 5b       	subi	r28, 0xB8	; 184
    bfd6:	de 4f       	sbci	r29, 0xFE	; 254
    bfd8:	e1 e1       	ldi	r30, 0x11	; 17
    bfda:	0c 94 22 ed 	jmp	0x1da44	; 0x1da44 <__epilogue_restores__+0x2>

0000bfde <f_lseek>:
    bfde:	aa e0       	ldi	r26, 0x0A	; 10
    bfe0:	b0 e0       	ldi	r27, 0x00	; 0
    bfe2:	e5 ef       	ldi	r30, 0xF5	; 245
    bfe4:	ff e5       	ldi	r31, 0x5F	; 95
    bfe6:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    bfea:	1c 01       	movw	r2, r24
    bfec:	6a 01       	movw	r12, r20
    bfee:	7b 01       	movw	r14, r22
    bff0:	be 01       	movw	r22, r28
    bff2:	6f 5f       	subi	r22, 0xFF	; 255
    bff4:	7f 4f       	sbci	r23, 0xFF	; 255
    bff6:	0e 94 64 48 	call	0x90c8	; 0x90c8 <validate>
    bffa:	00 97       	sbiw	r24, 0x00	; 0
    bffc:	09 f0       	breq	.+2      	; 0xc000 <f_lseek+0x22>
    bffe:	c8 c2       	rjmp	.+1424   	; 0xc590 <f_lseek+0x5b2>
    c000:	d1 01       	movw	r26, r2
    c002:	1f 96       	adiw	r26, 0x0f	; 15
    c004:	8c 91       	ld	r24, X
    c006:	1f 97       	sbiw	r26, 0x0f	; 15
    c008:	90 e0       	ldi	r25, 0x00	; 0
    c00a:	00 97       	sbiw	r24, 0x00	; 0
    c00c:	09 f0       	breq	.+2      	; 0xc010 <f_lseek+0x32>
    c00e:	c0 c2       	rjmp	.+1408   	; 0xc590 <f_lseek+0x5b2>
    c010:	92 96       	adiw	r26, 0x22	; 34
    c012:	ed 91       	ld	r30, X+
    c014:	fc 91       	ld	r31, X
    c016:	93 97       	sbiw	r26, 0x23	; 35
    c018:	30 97       	sbiw	r30, 0x00	; 0
    c01a:	09 f4       	brne	.+2      	; 0xc01e <f_lseek+0x40>
    c01c:	3a c1       	rjmp	.+628    	; 0xc292 <f_lseek+0x2b4>
    c01e:	bf ef       	ldi	r27, 0xFF	; 255
    c020:	cb 16       	cp	r12, r27
    c022:	db 06       	cpc	r13, r27
    c024:	eb 06       	cpc	r14, r27
    c026:	fb 06       	cpc	r15, r27
    c028:	09 f0       	breq	.+2      	; 0xc02c <f_lseek+0x4e>
    c02a:	9f c0       	rjmp	.+318    	; 0xc16a <f_lseek+0x18c>
    c02c:	8f 01       	movw	r16, r30
    c02e:	0c 5f       	subi	r16, 0xFC	; 252
    c030:	1f 4f       	sbci	r17, 0xFF	; 255
    c032:	20 81       	ld	r18, Z
    c034:	31 81       	ldd	r19, Z+1	; 0x01
    c036:	42 81       	ldd	r20, Z+2	; 0x02
    c038:	53 81       	ldd	r21, Z+3	; 0x03
    c03a:	2f 83       	std	Y+7, r18	; 0x07
    c03c:	38 87       	std	Y+8, r19	; 0x08
    c03e:	49 87       	std	Y+9, r20	; 0x09
    c040:	5a 87       	std	Y+10, r21	; 0x0a
    c042:	d1 01       	movw	r26, r2
    c044:	16 96       	adiw	r26, 0x06	; 6
    c046:	8d 90       	ld	r8, X+
    c048:	9d 90       	ld	r9, X+
    c04a:	ad 90       	ld	r10, X+
    c04c:	bc 90       	ld	r11, X
    c04e:	19 97       	sbiw	r26, 0x09	; 9
    c050:	52 e0       	ldi	r21, 0x02	; 2
    c052:	c5 2e       	mov	r12, r21
    c054:	d1 2c       	mov	r13, r1
    c056:	e1 2c       	mov	r14, r1
    c058:	f1 2c       	mov	r15, r1
    c05a:	81 14       	cp	r8, r1
    c05c:	91 04       	cpc	r9, r1
    c05e:	a1 04       	cpc	r10, r1
    c060:	b1 04       	cpc	r11, r1
    c062:	09 f4       	brne	.+2      	; 0xc066 <f_lseek+0x88>
    c064:	68 c0       	rjmp	.+208    	; 0xc136 <f_lseek+0x158>
    c066:	24 01       	movw	r4, r8
    c068:	35 01       	movw	r6, r10
    c06a:	1b 82       	std	Y+3, r1	; 0x03
    c06c:	1c 82       	std	Y+4, r1	; 0x04
    c06e:	1d 82       	std	Y+5, r1	; 0x05
    c070:	1e 82       	std	Y+6, r1	; 0x06
    c072:	2b 81       	ldd	r18, Y+3	; 0x03
    c074:	3c 81       	ldd	r19, Y+4	; 0x04
    c076:	4d 81       	ldd	r20, Y+5	; 0x05
    c078:	5e 81       	ldd	r21, Y+6	; 0x06
    c07a:	2f 5f       	subi	r18, 0xFF	; 255
    c07c:	3f 4f       	sbci	r19, 0xFF	; 255
    c07e:	4f 4f       	sbci	r20, 0xFF	; 255
    c080:	5f 4f       	sbci	r21, 0xFF	; 255
    c082:	2b 83       	std	Y+3, r18	; 0x03
    c084:	3c 83       	std	Y+4, r19	; 0x04
    c086:	4d 83       	std	Y+5, r20	; 0x05
    c088:	5e 83       	std	Y+6, r21	; 0x06
    c08a:	b3 01       	movw	r22, r6
    c08c:	a2 01       	movw	r20, r4
    c08e:	d1 01       	movw	r26, r2
    c090:	8d 91       	ld	r24, X+
    c092:	9c 91       	ld	r25, X
    c094:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <get_fat.isra.7>
    c098:	62 30       	cpi	r22, 0x02	; 2
    c09a:	71 05       	cpc	r23, r1
    c09c:	81 05       	cpc	r24, r1
    c09e:	91 05       	cpc	r25, r1
    c0a0:	20 f4       	brcc	.+8      	; 0xc0aa <f_lseek+0xcc>
    c0a2:	82 e0       	ldi	r24, 0x02	; 2
    c0a4:	f1 01       	movw	r30, r2
    c0a6:	87 87       	std	Z+15, r24	; 0x0f
    c0a8:	0a c0       	rjmp	.+20     	; 0xc0be <f_lseek+0xe0>
    c0aa:	6f 3f       	cpi	r22, 0xFF	; 255
    c0ac:	ff ef       	ldi	r31, 0xFF	; 255
    c0ae:	7f 07       	cpc	r23, r31
    c0b0:	8f 07       	cpc	r24, r31
    c0b2:	9f 07       	cpc	r25, r31
    c0b4:	31 f4       	brne	.+12     	; 0xc0c2 <f_lseek+0xe4>
    c0b6:	81 e0       	ldi	r24, 0x01	; 1
    c0b8:	d1 01       	movw	r26, r2
    c0ba:	1f 96       	adiw	r26, 0x0f	; 15
    c0bc:	8c 93       	st	X, r24
    c0be:	90 e0       	ldi	r25, 0x00	; 0
    c0c0:	67 c2       	rjmp	.+1230   	; 0xc590 <f_lseek+0x5b2>
    c0c2:	a3 01       	movw	r20, r6
    c0c4:	92 01       	movw	r18, r4
    c0c6:	2f 5f       	subi	r18, 0xFF	; 255
    c0c8:	3f 4f       	sbci	r19, 0xFF	; 255
    c0ca:	4f 4f       	sbci	r20, 0xFF	; 255
    c0cc:	5f 4f       	sbci	r21, 0xFF	; 255
    c0ce:	2b 01       	movw	r4, r22
    c0d0:	3c 01       	movw	r6, r24
    c0d2:	62 17       	cp	r22, r18
    c0d4:	73 07       	cpc	r23, r19
    c0d6:	84 07       	cpc	r24, r20
    c0d8:	95 07       	cpc	r25, r21
    c0da:	59 f2       	breq	.-106    	; 0xc072 <f_lseek+0x94>
    c0dc:	b2 e0       	ldi	r27, 0x02	; 2
    c0de:	cb 0e       	add	r12, r27
    c0e0:	d1 1c       	adc	r13, r1
    c0e2:	e1 1c       	adc	r14, r1
    c0e4:	f1 1c       	adc	r15, r1
    c0e6:	2f 81       	ldd	r18, Y+7	; 0x07
    c0e8:	38 85       	ldd	r19, Y+8	; 0x08
    c0ea:	49 85       	ldd	r20, Y+9	; 0x09
    c0ec:	5a 85       	ldd	r21, Y+10	; 0x0a
    c0ee:	2c 15       	cp	r18, r12
    c0f0:	3d 05       	cpc	r19, r13
    c0f2:	4e 05       	cpc	r20, r14
    c0f4:	5f 05       	cpc	r21, r15
    c0f6:	88 f0       	brcs	.+34     	; 0xc11a <f_lseek+0x13c>
    c0f8:	2b 81       	ldd	r18, Y+3	; 0x03
    c0fa:	3c 81       	ldd	r19, Y+4	; 0x04
    c0fc:	4d 81       	ldd	r20, Y+5	; 0x05
    c0fe:	5e 81       	ldd	r21, Y+6	; 0x06
    c100:	d8 01       	movw	r26, r16
    c102:	2d 93       	st	X+, r18
    c104:	3d 93       	st	X+, r19
    c106:	4d 93       	st	X+, r20
    c108:	5c 93       	st	X, r21
    c10a:	13 97       	sbiw	r26, 0x03	; 3
    c10c:	f8 01       	movw	r30, r16
    c10e:	84 82       	std	Z+4, r8	; 0x04
    c110:	95 82       	std	Z+5, r9	; 0x05
    c112:	a6 82       	std	Z+6, r10	; 0x06
    c114:	b7 82       	std	Z+7, r11	; 0x07
    c116:	08 5f       	subi	r16, 0xF8	; 248
    c118:	1f 4f       	sbci	r17, 0xFF	; 255
    c11a:	e9 81       	ldd	r30, Y+1	; 0x01
    c11c:	fa 81       	ldd	r31, Y+2	; 0x02
    c11e:	81 8c       	ldd	r8, Z+25	; 0x19
    c120:	92 8c       	ldd	r9, Z+26	; 0x1a
    c122:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c124:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c126:	68 15       	cp	r22, r8
    c128:	79 05       	cpc	r23, r9
    c12a:	8a 05       	cpc	r24, r10
    c12c:	9b 05       	cpc	r25, r11
    c12e:	18 f4       	brcc	.+6      	; 0xc136 <f_lseek+0x158>
    c130:	4b 01       	movw	r8, r22
    c132:	5c 01       	movw	r10, r24
    c134:	98 cf       	rjmp	.-208    	; 0xc066 <f_lseek+0x88>
    c136:	d1 01       	movw	r26, r2
    c138:	92 96       	adiw	r26, 0x22	; 34
    c13a:	ed 91       	ld	r30, X+
    c13c:	fc 91       	ld	r31, X
    c13e:	93 97       	sbiw	r26, 0x23	; 35
    c140:	c0 82       	st	Z, r12
    c142:	d1 82       	std	Z+1, r13	; 0x01
    c144:	e2 82       	std	Z+2, r14	; 0x02
    c146:	f3 82       	std	Z+3, r15	; 0x03
    c148:	2f 81       	ldd	r18, Y+7	; 0x07
    c14a:	38 85       	ldd	r19, Y+8	; 0x08
    c14c:	49 85       	ldd	r20, Y+9	; 0x09
    c14e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c150:	2c 15       	cp	r18, r12
    c152:	3d 05       	cpc	r19, r13
    c154:	4e 05       	cpc	r20, r14
    c156:	5f 05       	cpc	r21, r15
    c158:	08 f4       	brcc	.+2      	; 0xc15c <f_lseek+0x17e>
    c15a:	11 c2       	rjmp	.+1058   	; 0xc57e <f_lseek+0x5a0>
    c15c:	d8 01       	movw	r26, r16
    c15e:	1d 92       	st	X+, r1
    c160:	1d 92       	st	X+, r1
    c162:	1d 92       	st	X+, r1
    c164:	1c 92       	st	X, r1
    c166:	13 97       	sbiw	r26, 0x03	; 3
    c168:	08 c2       	rjmp	.+1040   	; 0xc57a <f_lseek+0x59c>
    c16a:	f1 01       	movw	r30, r2
    c16c:	82 85       	ldd	r24, Z+10	; 0x0a
    c16e:	93 85       	ldd	r25, Z+11	; 0x0b
    c170:	a4 85       	ldd	r26, Z+12	; 0x0c
    c172:	b5 85       	ldd	r27, Z+13	; 0x0d
    c174:	46 01       	movw	r8, r12
    c176:	57 01       	movw	r10, r14
    c178:	8c 15       	cp	r24, r12
    c17a:	9d 05       	cpc	r25, r13
    c17c:	ae 05       	cpc	r26, r14
    c17e:	bf 05       	cpc	r27, r15
    c180:	10 f4       	brcc	.+4      	; 0xc186 <f_lseek+0x1a8>
    c182:	4c 01       	movw	r8, r24
    c184:	5d 01       	movw	r10, r26
    c186:	d1 01       	movw	r26, r2
    c188:	50 96       	adiw	r26, 0x10	; 16
    c18a:	8d 92       	st	X+, r8
    c18c:	9d 92       	st	X+, r9
    c18e:	ad 92       	st	X+, r10
    c190:	bc 92       	st	X, r11
    c192:	53 97       	sbiw	r26, 0x13	; 19
    c194:	81 14       	cp	r8, r1
    c196:	91 04       	cpc	r9, r1
    c198:	a1 04       	cpc	r10, r1
    c19a:	b1 04       	cpc	r11, r1
    c19c:	09 f4       	brne	.+2      	; 0xc1a0 <f_lseek+0x1c2>
    c19e:	ed c1       	rjmp	.+986    	; 0xc57a <f_lseek+0x59c>
    c1a0:	24 01       	movw	r4, r8
    c1a2:	35 01       	movw	r6, r10
    c1a4:	b1 e0       	ldi	r27, 0x01	; 1
    c1a6:	4b 1a       	sub	r4, r27
    c1a8:	51 08       	sbc	r5, r1
    c1aa:	61 08       	sbc	r6, r1
    c1ac:	71 08       	sbc	r7, r1
    c1ae:	b3 01       	movw	r22, r6
    c1b0:	a2 01       	movw	r20, r4
    c1b2:	c1 01       	movw	r24, r2
    c1b4:	0e 94 f9 47 	call	0x8ff2	; 0x8ff2 <clmt_clust>
    c1b8:	ab 01       	movw	r20, r22
    c1ba:	bc 01       	movw	r22, r24
    c1bc:	f1 01       	movw	r30, r2
    c1be:	44 8b       	std	Z+20, r20	; 0x14
    c1c0:	55 8b       	std	Z+21, r21	; 0x15
    c1c2:	66 8b       	std	Z+22, r22	; 0x16
    c1c4:	77 8b       	std	Z+23, r23	; 0x17
    c1c6:	e9 80       	ldd	r14, Y+1	; 0x01
    c1c8:	fa 80       	ldd	r15, Y+2	; 0x02
    c1ca:	c7 01       	movw	r24, r14
    c1cc:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    c1d0:	61 15       	cp	r22, r1
    c1d2:	71 05       	cpc	r23, r1
    c1d4:	81 05       	cpc	r24, r1
    c1d6:	91 05       	cpc	r25, r1
    c1d8:	09 f4       	brne	.+2      	; 0xc1dc <f_lseek+0x1fe>
    c1da:	63 cf       	rjmp	.-314    	; 0xc0a2 <f_lseek+0xc4>
    c1dc:	95 01       	movw	r18, r10
    c1de:	84 01       	movw	r16, r8
    c1e0:	11 70       	andi	r17, 0x01	; 1
    c1e2:	22 27       	eor	r18, r18
    c1e4:	33 27       	eor	r19, r19
    c1e6:	01 15       	cp	r16, r1
    c1e8:	11 05       	cpc	r17, r1
    c1ea:	21 05       	cpc	r18, r1
    c1ec:	31 05       	cpc	r19, r1
    c1ee:	09 f4       	brne	.+2      	; 0xc1f2 <f_lseek+0x214>
    c1f0:	c4 c1       	rjmp	.+904    	; 0xc57a <f_lseek+0x59c>
    c1f2:	d7 01       	movw	r26, r14
    c1f4:	19 96       	adiw	r26, 0x09	; 9
    c1f6:	8d 90       	ld	r8, X+
    c1f8:	9c 90       	ld	r9, X
    c1fa:	1a 97       	sbiw	r26, 0x0a	; 10
    c1fc:	b1 e0       	ldi	r27, 0x01	; 1
    c1fe:	8b 1a       	sub	r8, r27
    c200:	91 08       	sbc	r9, r1
    c202:	a1 2c       	mov	r10, r1
    c204:	b1 2c       	mov	r11, r1
    c206:	49 e0       	ldi	r20, 0x09	; 9
    c208:	76 94       	lsr	r7
    c20a:	67 94       	ror	r6
    c20c:	57 94       	ror	r5
    c20e:	47 94       	ror	r4
    c210:	4a 95       	dec	r20
    c212:	d1 f7       	brne	.-12     	; 0xc208 <f_lseek+0x22a>
    c214:	48 20       	and	r4, r8
    c216:	59 20       	and	r5, r9
    c218:	6a 20       	and	r6, r10
    c21a:	7b 20       	and	r7, r11
    c21c:	53 01       	movw	r10, r6
    c21e:	42 01       	movw	r8, r4
    c220:	86 0e       	add	r8, r22
    c222:	97 1e       	adc	r9, r23
    c224:	a8 1e       	adc	r10, r24
    c226:	b9 1e       	adc	r11, r25
    c228:	f1 01       	movw	r30, r2
    c22a:	20 8d       	ldd	r18, Z+24	; 0x18
    c22c:	31 8d       	ldd	r19, Z+25	; 0x19
    c22e:	42 8d       	ldd	r20, Z+26	; 0x1a
    c230:	53 8d       	ldd	r21, Z+27	; 0x1b
    c232:	82 16       	cp	r8, r18
    c234:	93 06       	cpc	r9, r19
    c236:	a4 06       	cpc	r10, r20
    c238:	b5 06       	cpc	r11, r21
    c23a:	09 f4       	brne	.+2      	; 0xc23e <f_lseek+0x260>
    c23c:	9e c1       	rjmp	.+828    	; 0xc57a <f_lseek+0x59c>
    c23e:	86 85       	ldd	r24, Z+14	; 0x0e
    c240:	b1 01       	movw	r22, r2
    c242:	6c 5d       	subi	r22, 0xDC	; 220
    c244:	7f 4f       	sbci	r23, 0xFF	; 255
    c246:	6b 01       	movw	r12, r22
    c248:	87 ff       	sbrs	r24, 7
    c24a:	0e c0       	rjmp	.+28     	; 0xc268 <f_lseek+0x28a>
    c24c:	01 e0       	ldi	r16, 0x01	; 1
    c24e:	10 e0       	ldi	r17, 0x00	; 0
    c250:	d7 01       	movw	r26, r14
    c252:	11 96       	adiw	r26, 0x01	; 1
    c254:	8c 91       	ld	r24, X
    c256:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    c25a:	89 2b       	or	r24, r25
    c25c:	09 f0       	breq	.+2      	; 0xc260 <f_lseek+0x282>
    c25e:	2b cf       	rjmp	.-426    	; 0xc0b6 <f_lseek+0xd8>
    c260:	f1 01       	movw	r30, r2
    c262:	86 85       	ldd	r24, Z+14	; 0x0e
    c264:	8f 77       	andi	r24, 0x7F	; 127
    c266:	86 87       	std	Z+14, r24	; 0x0e
    c268:	e9 81       	ldd	r30, Y+1	; 0x01
    c26a:	fa 81       	ldd	r31, Y+2	; 0x02
    c26c:	01 e0       	ldi	r16, 0x01	; 1
    c26e:	10 e0       	ldi	r17, 0x00	; 0
    c270:	a5 01       	movw	r20, r10
    c272:	94 01       	movw	r18, r8
    c274:	b6 01       	movw	r22, r12
    c276:	81 81       	ldd	r24, Z+1	; 0x01
    c278:	0e 94 df 6e 	call	0xddbe	; 0xddbe <disk_read>
    c27c:	89 2b       	or	r24, r25
    c27e:	09 f0       	breq	.+2      	; 0xc282 <f_lseek+0x2a4>
    c280:	1a cf       	rjmp	.-460    	; 0xc0b6 <f_lseek+0xd8>
    c282:	d1 01       	movw	r26, r2
    c284:	58 96       	adiw	r26, 0x18	; 24
    c286:	8d 92       	st	X+, r8
    c288:	9d 92       	st	X+, r9
    c28a:	ad 92       	st	X+, r10
    c28c:	bc 92       	st	X, r11
    c28e:	5b 97       	sbiw	r26, 0x1b	; 27
    c290:	74 c1       	rjmp	.+744    	; 0xc57a <f_lseek+0x59c>
    c292:	f1 01       	movw	r30, r2
    c294:	82 85       	ldd	r24, Z+10	; 0x0a
    c296:	93 85       	ldd	r25, Z+11	; 0x0b
    c298:	a4 85       	ldd	r26, Z+12	; 0x0c
    c29a:	b5 85       	ldd	r27, Z+13	; 0x0d
    c29c:	8c 15       	cp	r24, r12
    c29e:	9d 05       	cpc	r25, r13
    c2a0:	ae 05       	cpc	r26, r14
    c2a2:	bf 05       	cpc	r27, r15
    c2a4:	28 f4       	brcc	.+10     	; 0xc2b0 <f_lseek+0x2d2>
    c2a6:	26 85       	ldd	r18, Z+14	; 0x0e
    c2a8:	21 fd       	sbrc	r18, 1
    c2aa:	02 c0       	rjmp	.+4      	; 0xc2b0 <f_lseek+0x2d2>
    c2ac:	6c 01       	movw	r12, r24
    c2ae:	7d 01       	movw	r14, r26
    c2b0:	d1 01       	movw	r26, r2
    c2b2:	50 96       	adiw	r26, 0x10	; 16
    c2b4:	4d 90       	ld	r4, X+
    c2b6:	5d 90       	ld	r5, X+
    c2b8:	6d 90       	ld	r6, X+
    c2ba:	7c 90       	ld	r7, X
    c2bc:	53 97       	sbiw	r26, 0x13	; 19
    c2be:	f1 01       	movw	r30, r2
    c2c0:	10 8a       	std	Z+16, r1	; 0x10
    c2c2:	11 8a       	std	Z+17, r1	; 0x11
    c2c4:	12 8a       	std	Z+18, r1	; 0x12
    c2c6:	13 8a       	std	Z+19, r1	; 0x13
    c2c8:	c1 14       	cp	r12, r1
    c2ca:	d1 04       	cpc	r13, r1
    c2cc:	e1 04       	cpc	r14, r1
    c2ce:	f1 04       	cpc	r15, r1
    c2d0:	09 f4       	brne	.+2      	; 0xc2d4 <f_lseek+0x2f6>
    c2d2:	57 c1       	rjmp	.+686    	; 0xc582 <f_lseek+0x5a4>
    c2d4:	e9 81       	ldd	r30, Y+1	; 0x01
    c2d6:	fa 81       	ldd	r31, Y+2	; 0x02
    c2d8:	81 84       	ldd	r8, Z+9	; 0x09
    c2da:	92 84       	ldd	r9, Z+10	; 0x0a
    c2dc:	a1 2c       	mov	r10, r1
    c2de:	b1 2c       	mov	r11, r1
    c2e0:	39 e0       	ldi	r19, 0x09	; 9
    c2e2:	88 0c       	add	r8, r8
    c2e4:	99 1c       	adc	r9, r9
    c2e6:	aa 1c       	adc	r10, r10
    c2e8:	bb 1c       	adc	r11, r11
    c2ea:	3a 95       	dec	r19
    c2ec:	d1 f7       	brne	.-12     	; 0xc2e2 <f_lseek+0x304>
    c2ee:	41 14       	cp	r4, r1
    c2f0:	51 04       	cpc	r5, r1
    c2f2:	61 04       	cpc	r6, r1
    c2f4:	71 04       	cpc	r7, r1
    c2f6:	09 f4       	brne	.+2      	; 0xc2fa <f_lseek+0x31c>
    c2f8:	3f c0       	rjmp	.+126    	; 0xc378 <f_lseek+0x39a>
    c2fa:	f1 e0       	ldi	r31, 0x01	; 1
    c2fc:	4f 1a       	sub	r4, r31
    c2fe:	51 08       	sbc	r5, r1
    c300:	61 08       	sbc	r6, r1
    c302:	71 08       	sbc	r7, r1
    c304:	c7 01       	movw	r24, r14
    c306:	b6 01       	movw	r22, r12
    c308:	61 50       	subi	r22, 0x01	; 1
    c30a:	71 09       	sbc	r23, r1
    c30c:	81 09       	sbc	r24, r1
    c30e:	91 09       	sbc	r25, r1
    c310:	a5 01       	movw	r20, r10
    c312:	94 01       	movw	r18, r8
    c314:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    c318:	2b 83       	std	Y+3, r18	; 0x03
    c31a:	3c 83       	std	Y+4, r19	; 0x04
    c31c:	4d 83       	std	Y+5, r20	; 0x05
    c31e:	5e 83       	std	Y+6, r21	; 0x06
    c320:	c3 01       	movw	r24, r6
    c322:	b2 01       	movw	r22, r4
    c324:	a5 01       	movw	r20, r10
    c326:	94 01       	movw	r18, r8
    c328:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    c32c:	6b 81       	ldd	r22, Y+3	; 0x03
    c32e:	7c 81       	ldd	r23, Y+4	; 0x04
    c330:	8d 81       	ldd	r24, Y+5	; 0x05
    c332:	9e 81       	ldd	r25, Y+6	; 0x06
    c334:	62 17       	cp	r22, r18
    c336:	73 07       	cpc	r23, r19
    c338:	84 07       	cpc	r24, r20
    c33a:	95 07       	cpc	r25, r21
    c33c:	e8 f0       	brcs	.+58     	; 0xc378 <f_lseek+0x39a>
    c33e:	88 27       	eor	r24, r24
    c340:	99 27       	eor	r25, r25
    c342:	dc 01       	movw	r26, r24
    c344:	88 19       	sub	r24, r8
    c346:	99 09       	sbc	r25, r9
    c348:	aa 09       	sbc	r26, r10
    c34a:	bb 09       	sbc	r27, r11
    c34c:	48 22       	and	r4, r24
    c34e:	59 22       	and	r5, r25
    c350:	6a 22       	and	r6, r26
    c352:	7b 22       	and	r7, r27
    c354:	d1 01       	movw	r26, r2
    c356:	50 96       	adiw	r26, 0x10	; 16
    c358:	4d 92       	st	X+, r4
    c35a:	5d 92       	st	X+, r5
    c35c:	6d 92       	st	X+, r6
    c35e:	7c 92       	st	X, r7
    c360:	53 97       	sbiw	r26, 0x13	; 19
    c362:	c4 18       	sub	r12, r4
    c364:	d5 08       	sbc	r13, r5
    c366:	e6 08       	sbc	r14, r6
    c368:	f7 08       	sbc	r15, r7
    c36a:	54 96       	adiw	r26, 0x14	; 20
    c36c:	4d 91       	ld	r20, X+
    c36e:	5d 91       	ld	r21, X+
    c370:	6d 91       	ld	r22, X+
    c372:	7c 91       	ld	r23, X
    c374:	57 97       	sbiw	r26, 0x17	; 23
    c376:	2b c0       	rjmp	.+86     	; 0xc3ce <f_lseek+0x3f0>
    c378:	f1 01       	movw	r30, r2
    c37a:	46 81       	ldd	r20, Z+6	; 0x06
    c37c:	57 81       	ldd	r21, Z+7	; 0x07
    c37e:	60 85       	ldd	r22, Z+8	; 0x08
    c380:	71 85       	ldd	r23, Z+9	; 0x09
    c382:	41 15       	cp	r20, r1
    c384:	51 05       	cpc	r21, r1
    c386:	61 05       	cpc	r22, r1
    c388:	71 05       	cpc	r23, r1
    c38a:	e1 f4       	brne	.+56     	; 0xc3c4 <f_lseek+0x3e6>
    c38c:	40 e0       	ldi	r20, 0x00	; 0
    c38e:	50 e0       	ldi	r21, 0x00	; 0
    c390:	ba 01       	movw	r22, r20
    c392:	c1 01       	movw	r24, r2
    c394:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <create_chain>
    c398:	ab 01       	movw	r20, r22
    c39a:	bc 01       	movw	r22, r24
    c39c:	41 30       	cpi	r20, 0x01	; 1
    c39e:	51 05       	cpc	r21, r1
    c3a0:	61 05       	cpc	r22, r1
    c3a2:	71 05       	cpc	r23, r1
    c3a4:	09 f4       	brne	.+2      	; 0xc3a8 <f_lseek+0x3ca>
    c3a6:	7d ce       	rjmp	.-774    	; 0xc0a2 <f_lseek+0xc4>
    c3a8:	4f 3f       	cpi	r20, 0xFF	; 255
    c3aa:	ff ef       	ldi	r31, 0xFF	; 255
    c3ac:	5f 07       	cpc	r21, r31
    c3ae:	6f 07       	cpc	r22, r31
    c3b0:	7f 07       	cpc	r23, r31
    c3b2:	09 f4       	brne	.+2      	; 0xc3b6 <f_lseek+0x3d8>
    c3b4:	80 ce       	rjmp	.-768    	; 0xc0b6 <f_lseek+0xd8>
    c3b6:	d1 01       	movw	r26, r2
    c3b8:	16 96       	adiw	r26, 0x06	; 6
    c3ba:	4d 93       	st	X+, r20
    c3bc:	5d 93       	st	X+, r21
    c3be:	6d 93       	st	X+, r22
    c3c0:	7c 93       	st	X, r23
    c3c2:	19 97       	sbiw	r26, 0x09	; 9
    c3c4:	f1 01       	movw	r30, r2
    c3c6:	44 8b       	std	Z+20, r20	; 0x14
    c3c8:	55 8b       	std	Z+21, r21	; 0x15
    c3ca:	66 8b       	std	Z+22, r22	; 0x16
    c3cc:	77 8b       	std	Z+23, r23	; 0x17
    c3ce:	41 15       	cp	r20, r1
    c3d0:	51 05       	cpc	r21, r1
    c3d2:	61 05       	cpc	r22, r1
    c3d4:	71 05       	cpc	r23, r1
    c3d6:	09 f0       	breq	.+2      	; 0xc3da <f_lseek+0x3fc>
    c3d8:	40 c0       	rjmp	.+128    	; 0xc45a <f_lseek+0x47c>
    c3da:	c1 2c       	mov	r12, r1
    c3dc:	d1 2c       	mov	r13, r1
    c3de:	76 01       	movw	r14, r12
    c3e0:	79 c0       	rjmp	.+242    	; 0xc4d4 <f_lseek+0x4f6>
    c3e2:	c8 18       	sub	r12, r8
    c3e4:	d9 08       	sbc	r13, r9
    c3e6:	ea 08       	sbc	r14, r10
    c3e8:	fb 08       	sbc	r15, r11
    c3ea:	f1 01       	movw	r30, r2
    c3ec:	80 89       	ldd	r24, Z+16	; 0x10
    c3ee:	91 89       	ldd	r25, Z+17	; 0x11
    c3f0:	a2 89       	ldd	r26, Z+18	; 0x12
    c3f2:	b3 89       	ldd	r27, Z+19	; 0x13
    c3f4:	88 0d       	add	r24, r8
    c3f6:	99 1d       	adc	r25, r9
    c3f8:	aa 1d       	adc	r26, r10
    c3fa:	bb 1d       	adc	r27, r11
    c3fc:	80 8b       	std	Z+16, r24	; 0x10
    c3fe:	91 8b       	std	Z+17, r25	; 0x11
    c400:	a2 8b       	std	Z+18, r26	; 0x12
    c402:	b3 8b       	std	Z+19, r27	; 0x13
    c404:	86 85       	ldd	r24, Z+14	; 0x0e
    c406:	81 ff       	sbrs	r24, 1
    c408:	2f c0       	rjmp	.+94     	; 0xc468 <f_lseek+0x48a>
    c40a:	c1 01       	movw	r24, r2
    c40c:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <create_chain>
    c410:	ab 01       	movw	r20, r22
    c412:	bc 01       	movw	r22, r24
    c414:	41 15       	cp	r20, r1
    c416:	51 05       	cpc	r21, r1
    c418:	61 05       	cpc	r22, r1
    c41a:	71 05       	cpc	r23, r1
    c41c:	61 f1       	breq	.+88     	; 0xc476 <f_lseek+0x498>
    c41e:	4f 3f       	cpi	r20, 0xFF	; 255
    c420:	bf ef       	ldi	r27, 0xFF	; 255
    c422:	5b 07       	cpc	r21, r27
    c424:	6b 07       	cpc	r22, r27
    c426:	7b 07       	cpc	r23, r27
    c428:	09 f4       	brne	.+2      	; 0xc42c <f_lseek+0x44e>
    c42a:	45 ce       	rjmp	.-886    	; 0xc0b6 <f_lseek+0xd8>
    c42c:	42 30       	cpi	r20, 0x02	; 2
    c42e:	51 05       	cpc	r21, r1
    c430:	61 05       	cpc	r22, r1
    c432:	71 05       	cpc	r23, r1
    c434:	08 f4       	brcc	.+2      	; 0xc438 <f_lseek+0x45a>
    c436:	35 ce       	rjmp	.-918    	; 0xc0a2 <f_lseek+0xc4>
    c438:	e9 81       	ldd	r30, Y+1	; 0x01
    c43a:	fa 81       	ldd	r31, Y+2	; 0x02
    c43c:	81 8d       	ldd	r24, Z+25	; 0x19
    c43e:	92 8d       	ldd	r25, Z+26	; 0x1a
    c440:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c442:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c444:	48 17       	cp	r20, r24
    c446:	59 07       	cpc	r21, r25
    c448:	6a 07       	cpc	r22, r26
    c44a:	7b 07       	cpc	r23, r27
    c44c:	08 f0       	brcs	.+2      	; 0xc450 <f_lseek+0x472>
    c44e:	29 ce       	rjmp	.-942    	; 0xc0a2 <f_lseek+0xc4>
    c450:	f1 01       	movw	r30, r2
    c452:	44 8b       	std	Z+20, r20	; 0x14
    c454:	55 8b       	std	Z+21, r21	; 0x15
    c456:	66 8b       	std	Z+22, r22	; 0x16
    c458:	77 8b       	std	Z+23, r23	; 0x17
    c45a:	8c 14       	cp	r8, r12
    c45c:	9d 04       	cpc	r9, r13
    c45e:	ae 04       	cpc	r10, r14
    c460:	bf 04       	cpc	r11, r15
    c462:	08 f4       	brcc	.+2      	; 0xc466 <f_lseek+0x488>
    c464:	be cf       	rjmp	.-132    	; 0xc3e2 <f_lseek+0x404>
    c466:	0a c0       	rjmp	.+20     	; 0xc47c <f_lseek+0x49e>
    c468:	80 81       	ld	r24, Z
    c46a:	91 81       	ldd	r25, Z+1	; 0x01
    c46c:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <get_fat.isra.7>
    c470:	ab 01       	movw	r20, r22
    c472:	bc 01       	movw	r22, r24
    c474:	d4 cf       	rjmp	.-88     	; 0xc41e <f_lseek+0x440>
    c476:	c1 2c       	mov	r12, r1
    c478:	d1 2c       	mov	r13, r1
    c47a:	76 01       	movw	r14, r12
    c47c:	f1 01       	movw	r30, r2
    c47e:	80 89       	ldd	r24, Z+16	; 0x10
    c480:	91 89       	ldd	r25, Z+17	; 0x11
    c482:	a2 89       	ldd	r26, Z+18	; 0x12
    c484:	b3 89       	ldd	r27, Z+19	; 0x13
    c486:	8c 0d       	add	r24, r12
    c488:	9d 1d       	adc	r25, r13
    c48a:	ae 1d       	adc	r26, r14
    c48c:	bf 1d       	adc	r27, r15
    c48e:	80 8b       	std	Z+16, r24	; 0x10
    c490:	91 8b       	std	Z+17, r25	; 0x11
    c492:	a2 8b       	std	Z+18, r26	; 0x12
    c494:	b3 8b       	std	Z+19, r27	; 0x13
    c496:	d7 01       	movw	r26, r14
    c498:	c6 01       	movw	r24, r12
    c49a:	91 70       	andi	r25, 0x01	; 1
    c49c:	aa 27       	eor	r26, r26
    c49e:	bb 27       	eor	r27, r27
    c4a0:	89 2b       	or	r24, r25
    c4a2:	8a 2b       	or	r24, r26
    c4a4:	8b 2b       	or	r24, r27
    c4a6:	09 f4       	brne	.+2      	; 0xc4aa <f_lseek+0x4cc>
    c4a8:	98 cf       	rjmp	.-208    	; 0xc3da <f_lseek+0x3fc>
    c4aa:	89 81       	ldd	r24, Y+1	; 0x01
    c4ac:	9a 81       	ldd	r25, Y+2	; 0x02
    c4ae:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    c4b2:	61 15       	cp	r22, r1
    c4b4:	71 05       	cpc	r23, r1
    c4b6:	81 05       	cpc	r24, r1
    c4b8:	91 05       	cpc	r25, r1
    c4ba:	09 f4       	brne	.+2      	; 0xc4be <f_lseek+0x4e0>
    c4bc:	f2 cd       	rjmp	.-1052   	; 0xc0a2 <f_lseek+0xc4>
    c4be:	29 e0       	ldi	r18, 0x09	; 9
    c4c0:	f6 94       	lsr	r15
    c4c2:	e7 94       	ror	r14
    c4c4:	d7 94       	ror	r13
    c4c6:	c7 94       	ror	r12
    c4c8:	2a 95       	dec	r18
    c4ca:	d1 f7       	brne	.-12     	; 0xc4c0 <f_lseek+0x4e2>
    c4cc:	c6 0e       	add	r12, r22
    c4ce:	d7 1e       	adc	r13, r23
    c4d0:	e8 1e       	adc	r14, r24
    c4d2:	f9 1e       	adc	r15, r25
    c4d4:	f1 01       	movw	r30, r2
    c4d6:	80 89       	ldd	r24, Z+16	; 0x10
    c4d8:	91 89       	ldd	r25, Z+17	; 0x11
    c4da:	a2 89       	ldd	r26, Z+18	; 0x12
    c4dc:	b3 89       	ldd	r27, Z+19	; 0x13
    c4de:	42 85       	ldd	r20, Z+10	; 0x0a
    c4e0:	53 85       	ldd	r21, Z+11	; 0x0b
    c4e2:	64 85       	ldd	r22, Z+12	; 0x0c
    c4e4:	75 85       	ldd	r23, Z+13	; 0x0d
    c4e6:	48 17       	cp	r20, r24
    c4e8:	59 07       	cpc	r21, r25
    c4ea:	6a 07       	cpc	r22, r26
    c4ec:	7b 07       	cpc	r23, r27
    c4ee:	38 f4       	brcc	.+14     	; 0xc4fe <f_lseek+0x520>
    c4f0:	82 87       	std	Z+10, r24	; 0x0a
    c4f2:	93 87       	std	Z+11, r25	; 0x0b
    c4f4:	a4 87       	std	Z+12, r26	; 0x0c
    c4f6:	b5 87       	std	Z+13, r27	; 0x0d
    c4f8:	26 85       	ldd	r18, Z+14	; 0x0e
    c4fa:	20 64       	ori	r18, 0x40	; 64
    c4fc:	26 87       	std	Z+14, r18	; 0x0e
    c4fe:	91 70       	andi	r25, 0x01	; 1
    c500:	aa 27       	eor	r26, r26
    c502:	bb 27       	eor	r27, r27
    c504:	89 2b       	or	r24, r25
    c506:	8a 2b       	or	r24, r26
    c508:	8b 2b       	or	r24, r27
    c50a:	b9 f1       	breq	.+110    	; 0xc57a <f_lseek+0x59c>
    c50c:	d1 01       	movw	r26, r2
    c50e:	58 96       	adiw	r26, 0x18	; 24
    c510:	2d 91       	ld	r18, X+
    c512:	3d 91       	ld	r19, X+
    c514:	4d 91       	ld	r20, X+
    c516:	5c 91       	ld	r21, X
    c518:	5b 97       	sbiw	r26, 0x1b	; 27
    c51a:	2c 15       	cp	r18, r12
    c51c:	3d 05       	cpc	r19, r13
    c51e:	4e 05       	cpc	r20, r14
    c520:	5f 05       	cpc	r21, r15
    c522:	59 f1       	breq	.+86     	; 0xc57a <f_lseek+0x59c>
    c524:	1e 96       	adiw	r26, 0x0e	; 14
    c526:	8c 91       	ld	r24, X
    c528:	f1 01       	movw	r30, r2
    c52a:	b4 96       	adiw	r30, 0x24	; 36
    c52c:	5f 01       	movw	r10, r30
    c52e:	87 ff       	sbrs	r24, 7
    c530:	12 c0       	rjmp	.+36     	; 0xc556 <f_lseek+0x578>
    c532:	e9 81       	ldd	r30, Y+1	; 0x01
    c534:	fa 81       	ldd	r31, Y+2	; 0x02
    c536:	01 e0       	ldi	r16, 0x01	; 1
    c538:	10 e0       	ldi	r17, 0x00	; 0
    c53a:	b5 01       	movw	r22, r10
    c53c:	81 81       	ldd	r24, Z+1	; 0x01
    c53e:	0e 94 ef 6e 	call	0xddde	; 0xddde <disk_write>
    c542:	89 2b       	or	r24, r25
    c544:	09 f0       	breq	.+2      	; 0xc548 <f_lseek+0x56a>
    c546:	b7 cd       	rjmp	.-1170   	; 0xc0b6 <f_lseek+0xd8>
    c548:	d1 01       	movw	r26, r2
    c54a:	1e 96       	adiw	r26, 0x0e	; 14
    c54c:	8c 91       	ld	r24, X
    c54e:	1e 97       	sbiw	r26, 0x0e	; 14
    c550:	8f 77       	andi	r24, 0x7F	; 127
    c552:	1e 96       	adiw	r26, 0x0e	; 14
    c554:	8c 93       	st	X, r24
    c556:	e9 81       	ldd	r30, Y+1	; 0x01
    c558:	fa 81       	ldd	r31, Y+2	; 0x02
    c55a:	01 e0       	ldi	r16, 0x01	; 1
    c55c:	10 e0       	ldi	r17, 0x00	; 0
    c55e:	a7 01       	movw	r20, r14
    c560:	96 01       	movw	r18, r12
    c562:	b5 01       	movw	r22, r10
    c564:	81 81       	ldd	r24, Z+1	; 0x01
    c566:	0e 94 df 6e 	call	0xddbe	; 0xddbe <disk_read>
    c56a:	89 2b       	or	r24, r25
    c56c:	09 f0       	breq	.+2      	; 0xc570 <f_lseek+0x592>
    c56e:	a3 cd       	rjmp	.-1210   	; 0xc0b6 <f_lseek+0xd8>
    c570:	f1 01       	movw	r30, r2
    c572:	c0 8e       	std	Z+24, r12	; 0x18
    c574:	d1 8e       	std	Z+25, r13	; 0x19
    c576:	e2 8e       	std	Z+26, r14	; 0x1a
    c578:	f3 8e       	std	Z+27, r15	; 0x1b
    c57a:	80 e0       	ldi	r24, 0x00	; 0
    c57c:	a0 cd       	rjmp	.-1216   	; 0xc0be <f_lseek+0xe0>
    c57e:	81 e1       	ldi	r24, 0x11	; 17
    c580:	9e cd       	rjmp	.-1220   	; 0xc0be <f_lseek+0xe0>
    c582:	80 e0       	ldi	r24, 0x00	; 0
    c584:	90 e0       	ldi	r25, 0x00	; 0
    c586:	dc 01       	movw	r26, r24
    c588:	c1 2c       	mov	r12, r1
    c58a:	d1 2c       	mov	r13, r1
    c58c:	76 01       	movw	r14, r12
    c58e:	b7 cf       	rjmp	.-146    	; 0xc4fe <f_lseek+0x520>
    c590:	2a 96       	adiw	r28, 0x0a	; 10
    c592:	e2 e1       	ldi	r30, 0x12	; 18
    c594:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000c598 <f_opendir>:
    c598:	a4 e0       	ldi	r26, 0x04	; 4
    c59a:	b0 e0       	ldi	r27, 0x00	; 0
    c59c:	e2 ed       	ldi	r30, 0xD2	; 210
    c59e:	f2 e6       	ldi	r31, 0x62	; 98
    c5a0:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    c5a4:	7c 83       	std	Y+4, r23	; 0x04
    c5a6:	6b 83       	std	Y+3, r22	; 0x03
    c5a8:	00 97       	sbiw	r24, 0x00	; 0
    c5aa:	09 f4       	brne	.+2      	; 0xc5ae <f_opendir+0x16>
    c5ac:	4a c0       	rjmp	.+148    	; 0xc642 <f_opendir+0xaa>
    c5ae:	8c 01       	movw	r16, r24
    c5b0:	40 e0       	ldi	r20, 0x00	; 0
    c5b2:	be 01       	movw	r22, r28
    c5b4:	6f 5f       	subi	r22, 0xFF	; 255
    c5b6:	7f 4f       	sbci	r23, 0xFF	; 255
    c5b8:	ce 01       	movw	r24, r28
    c5ba:	03 96       	adiw	r24, 0x03	; 3
    c5bc:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    c5c0:	7c 01       	movw	r14, r24
    c5c2:	89 2b       	or	r24, r25
    c5c4:	c9 f5       	brne	.+114    	; 0xc638 <f_opendir+0xa0>
    c5c6:	89 81       	ldd	r24, Y+1	; 0x01
    c5c8:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ca:	f8 01       	movw	r30, r16
    c5cc:	91 83       	std	Z+1, r25	; 0x01
    c5ce:	80 83       	st	Z, r24
    c5d0:	80 e0       	ldi	r24, 0x00	; 0
    c5d2:	92 e0       	ldi	r25, 0x02	; 2
    c5d4:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    c5d8:	6c 01       	movw	r12, r24
    c5da:	00 97       	sbiw	r24, 0x00	; 0
    c5dc:	a1 f1       	breq	.+104    	; 0xc646 <f_opendir+0xae>
    c5de:	e9 81       	ldd	r30, Y+1	; 0x01
    c5e0:	fa 81       	ldd	r31, Y+2	; 0x02
    c5e2:	94 87       	std	Z+12, r25	; 0x0c
    c5e4:	83 87       	std	Z+11, r24	; 0x0b
    c5e6:	6b 81       	ldd	r22, Y+3	; 0x03
    c5e8:	7c 81       	ldd	r23, Y+4	; 0x04
    c5ea:	c8 01       	movw	r24, r16
    c5ec:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    c5f0:	7c 01       	movw	r14, r24
    c5f2:	89 2b       	or	r24, r25
    c5f4:	b9 f4       	brne	.+46     	; 0xc624 <f_opendir+0x8c>
    c5f6:	f8 01       	movw	r30, r16
    c5f8:	87 a1       	ldd	r24, Z+39	; 0x27
    c5fa:	87 fd       	sbrc	r24, 7
    c5fc:	29 c0       	rjmp	.+82     	; 0xc650 <f_opendir+0xb8>
    c5fe:	84 81       	ldd	r24, Z+4	; 0x04
    c600:	84 ff       	sbrs	r24, 4
    c602:	0d c0       	rjmp	.+26     	; 0xc61e <f_opendir+0x86>
    c604:	62 8d       	ldd	r22, Z+26	; 0x1a
    c606:	73 8d       	ldd	r23, Z+27	; 0x1b
    c608:	e9 81       	ldd	r30, Y+1	; 0x01
    c60a:	fa 81       	ldd	r31, Y+2	; 0x02
    c60c:	80 81       	ld	r24, Z
    c60e:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    c612:	f8 01       	movw	r30, r16
    c614:	66 83       	std	Z+6, r22	; 0x06
    c616:	77 83       	std	Z+7, r23	; 0x07
    c618:	80 87       	std	Z+8, r24	; 0x08
    c61a:	91 87       	std	Z+9, r25	; 0x09
    c61c:	19 c0       	rjmp	.+50     	; 0xc650 <f_opendir+0xb8>
    c61e:	95 e0       	ldi	r25, 0x05	; 5
    c620:	e9 2e       	mov	r14, r25
    c622:	f1 2c       	mov	r15, r1
    c624:	c6 01       	movw	r24, r12
    c626:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    c62a:	f4 e0       	ldi	r31, 0x04	; 4
    c62c:	ef 16       	cp	r14, r31
    c62e:	f1 04       	cpc	r15, r1
    c630:	f1 f0       	breq	.+60     	; 0xc66e <f_opendir+0xd6>
    c632:	e1 14       	cp	r14, r1
    c634:	f1 04       	cpc	r15, r1
    c636:	49 f0       	breq	.+18     	; 0xc64a <f_opendir+0xb2>
    c638:	f8 01       	movw	r30, r16
    c63a:	11 82       	std	Z+1, r1	; 0x01
    c63c:	10 82       	st	Z, r1
    c63e:	c7 01       	movw	r24, r14
    c640:	1a c0       	rjmp	.+52     	; 0xc676 <f_opendir+0xde>
    c642:	89 e0       	ldi	r24, 0x09	; 9
    c644:	03 c0       	rjmp	.+6      	; 0xc64c <f_opendir+0xb4>
    c646:	81 e1       	ldi	r24, 0x11	; 17
    c648:	01 c0       	rjmp	.+2      	; 0xc64c <f_opendir+0xb4>
    c64a:	80 e0       	ldi	r24, 0x00	; 0
    c64c:	90 e0       	ldi	r25, 0x00	; 0
    c64e:	13 c0       	rjmp	.+38     	; 0xc676 <f_opendir+0xde>
    c650:	e9 81       	ldd	r30, Y+1	; 0x01
    c652:	fa 81       	ldd	r31, Y+2	; 0x02
    c654:	85 81       	ldd	r24, Z+5	; 0x05
    c656:	96 81       	ldd	r25, Z+6	; 0x06
    c658:	f8 01       	movw	r30, r16
    c65a:	93 83       	std	Z+3, r25	; 0x03
    c65c:	82 83       	std	Z+2, r24	; 0x02
    c65e:	40 e0       	ldi	r20, 0x00	; 0
    c660:	50 e0       	ldi	r21, 0x00	; 0
    c662:	ba 01       	movw	r22, r20
    c664:	c8 01       	movw	r24, r16
    c666:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <dir_sdi>
    c66a:	7c 01       	movw	r14, r24
    c66c:	db cf       	rjmp	.-74     	; 0xc624 <f_opendir+0x8c>
    c66e:	85 e0       	ldi	r24, 0x05	; 5
    c670:	e8 2e       	mov	r14, r24
    c672:	f1 2c       	mov	r15, r1
    c674:	e1 cf       	rjmp	.-62     	; 0xc638 <f_opendir+0xa0>
    c676:	24 96       	adiw	r28, 0x04	; 4
    c678:	e8 e0       	ldi	r30, 0x08	; 8
    c67a:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000c67e <f_closedir>:
    c67e:	a2 e0       	ldi	r26, 0x02	; 2
    c680:	b0 e0       	ldi	r27, 0x00	; 0
    c682:	e5 e4       	ldi	r30, 0x45	; 69
    c684:	f3 e6       	ldi	r31, 0x63	; 99
    c686:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    c68a:	8c 01       	movw	r16, r24
    c68c:	be 01       	movw	r22, r28
    c68e:	6f 5f       	subi	r22, 0xFF	; 255
    c690:	7f 4f       	sbci	r23, 0xFF	; 255
    c692:	0e 94 64 48 	call	0x90c8	; 0x90c8 <validate>
    c696:	00 97       	sbiw	r24, 0x00	; 0
    c698:	19 f4       	brne	.+6      	; 0xc6a0 <f_closedir+0x22>
    c69a:	f8 01       	movw	r30, r16
    c69c:	11 82       	std	Z+1, r1	; 0x01
    c69e:	10 82       	st	Z, r1
    c6a0:	22 96       	adiw	r28, 0x02	; 2
    c6a2:	e4 e0       	ldi	r30, 0x04	; 4
    c6a4:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

0000c6a8 <f_readdir>:
    c6a8:	a2 e0       	ldi	r26, 0x02	; 2
    c6aa:	b0 e0       	ldi	r27, 0x00	; 0
    c6ac:	ea e5       	ldi	r30, 0x5A	; 90
    c6ae:	f3 e6       	ldi	r31, 0x63	; 99
    c6b0:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
    c6b4:	7c 01       	movw	r14, r24
    c6b6:	5b 01       	movw	r10, r22
    c6b8:	be 01       	movw	r22, r28
    c6ba:	6f 5f       	subi	r22, 0xFF	; 255
    c6bc:	7f 4f       	sbci	r23, 0xFF	; 255
    c6be:	0e 94 64 48 	call	0x90c8	; 0x90c8 <validate>
    c6c2:	00 97       	sbiw	r24, 0x00	; 0
    c6c4:	99 f5       	brne	.+102    	; 0xc72c <f_readdir+0x84>
    c6c6:	a1 14       	cp	r10, r1
    c6c8:	b1 04       	cpc	r11, r1
    c6ca:	39 f4       	brne	.+14     	; 0xc6da <f_readdir+0x32>
    c6cc:	40 e0       	ldi	r20, 0x00	; 0
    c6ce:	50 e0       	ldi	r21, 0x00	; 0
    c6d0:	ba 01       	movw	r22, r20
    c6d2:	c7 01       	movw	r24, r14
    c6d4:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <dir_sdi>
    c6d8:	29 c0       	rjmp	.+82     	; 0xc72c <f_readdir+0x84>
    c6da:	80 e0       	ldi	r24, 0x00	; 0
    c6dc:	92 e0       	ldi	r25, 0x02	; 2
    c6de:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    c6e2:	6c 01       	movw	r12, r24
    c6e4:	00 97       	sbiw	r24, 0x00	; 0
    c6e6:	01 f1       	breq	.+64     	; 0xc728 <f_readdir+0x80>
    c6e8:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ea:	fa 81       	ldd	r31, Y+2	; 0x02
    c6ec:	94 87       	std	Z+12, r25	; 0x0c
    c6ee:	83 87       	std	Z+11, r24	; 0x0b
    c6f0:	60 e0       	ldi	r22, 0x00	; 0
    c6f2:	70 e0       	ldi	r23, 0x00	; 0
    c6f4:	c7 01       	movw	r24, r14
    c6f6:	0e 94 b9 52 	call	0xa572	; 0xa572 <dir_read>
    c6fa:	8c 01       	movw	r16, r24
    c6fc:	8b 7f       	andi	r24, 0xFB	; 251
    c6fe:	89 2b       	or	r24, r25
    c700:	71 f4       	brne	.+28     	; 0xc71e <f_readdir+0x76>
    c702:	b5 01       	movw	r22, r10
    c704:	c7 01       	movw	r24, r14
    c706:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <get_fileinfo>
    c70a:	60 e0       	ldi	r22, 0x00	; 0
    c70c:	70 e0       	ldi	r23, 0x00	; 0
    c70e:	c7 01       	movw	r24, r14
    c710:	0e 94 57 51 	call	0xa2ae	; 0xa2ae <dir_next>
    c714:	8c 01       	movw	r16, r24
    c716:	04 97       	sbiw	r24, 0x04	; 4
    c718:	11 f4       	brne	.+4      	; 0xc71e <f_readdir+0x76>
    c71a:	00 e0       	ldi	r16, 0x00	; 0
    c71c:	10 e0       	ldi	r17, 0x00	; 0
    c71e:	c6 01       	movw	r24, r12
    c720:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    c724:	c8 01       	movw	r24, r16
    c726:	02 c0       	rjmp	.+4      	; 0xc72c <f_readdir+0x84>
    c728:	81 e1       	ldi	r24, 0x11	; 17
    c72a:	90 e0       	ldi	r25, 0x00	; 0
    c72c:	22 96       	adiw	r28, 0x02	; 2
    c72e:	ea e0       	ldi	r30, 0x0A	; 10
    c730:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0000c734 <f_stat>:
    c734:	a0 e3       	ldi	r26, 0x30	; 48
    c736:	b0 e0       	ldi	r27, 0x00	; 0
    c738:	e0 ea       	ldi	r30, 0xA0	; 160
    c73a:	f3 e6       	ldi	r31, 0x63	; 99
    c73c:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    c740:	98 ab       	std	Y+48, r25	; 0x30
    c742:	8f a7       	std	Y+47, r24	; 0x2f
    c744:	6b 01       	movw	r12, r22
    c746:	40 e0       	ldi	r20, 0x00	; 0
    c748:	be 01       	movw	r22, r28
    c74a:	6f 5f       	subi	r22, 0xFF	; 255
    c74c:	7f 4f       	sbci	r23, 0xFF	; 255
    c74e:	ce 01       	movw	r24, r28
    c750:	8f 96       	adiw	r24, 0x2f	; 47
    c752:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    c756:	00 97       	sbiw	r24, 0x00	; 0
    c758:	49 f5       	brne	.+82     	; 0xc7ac <f_stat+0x78>
    c75a:	80 e0       	ldi	r24, 0x00	; 0
    c75c:	92 e0       	ldi	r25, 0x02	; 2
    c75e:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    c762:	7c 01       	movw	r14, r24
    c764:	00 97       	sbiw	r24, 0x00	; 0
    c766:	01 f1       	breq	.+64     	; 0xc7a8 <f_stat+0x74>
    c768:	e9 81       	ldd	r30, Y+1	; 0x01
    c76a:	fa 81       	ldd	r31, Y+2	; 0x02
    c76c:	94 87       	std	Z+12, r25	; 0x0c
    c76e:	83 87       	std	Z+11, r24	; 0x0b
    c770:	6f a5       	ldd	r22, Y+47	; 0x2f
    c772:	78 a9       	ldd	r23, Y+48	; 0x30
    c774:	ce 01       	movw	r24, r28
    c776:	01 96       	adiw	r24, 0x01	; 1
    c778:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    c77c:	8c 01       	movw	r16, r24
    c77e:	89 2b       	or	r24, r25
    c780:	71 f4       	brne	.+28     	; 0xc79e <f_stat+0x6a>
    c782:	88 a5       	ldd	r24, Y+40	; 0x28
    c784:	87 fd       	sbrc	r24, 7
    c786:	09 c0       	rjmp	.+18     	; 0xc79a <f_stat+0x66>
    c788:	c1 14       	cp	r12, r1
    c78a:	d1 04       	cpc	r13, r1
    c78c:	41 f0       	breq	.+16     	; 0xc79e <f_stat+0x6a>
    c78e:	b6 01       	movw	r22, r12
    c790:	ce 01       	movw	r24, r28
    c792:	01 96       	adiw	r24, 0x01	; 1
    c794:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <get_fileinfo>
    c798:	02 c0       	rjmp	.+4      	; 0xc79e <f_stat+0x6a>
    c79a:	06 e0       	ldi	r16, 0x06	; 6
    c79c:	10 e0       	ldi	r17, 0x00	; 0
    c79e:	c7 01       	movw	r24, r14
    c7a0:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    c7a4:	c8 01       	movw	r24, r16
    c7a6:	02 c0       	rjmp	.+4      	; 0xc7ac <f_stat+0x78>
    c7a8:	81 e1       	ldi	r24, 0x11	; 17
    c7aa:	90 e0       	ldi	r25, 0x00	; 0
    c7ac:	e0 96       	adiw	r28, 0x30	; 48
    c7ae:	e8 e0       	ldi	r30, 0x08	; 8
    c7b0:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000c7b4 <f_getfree>:
    c7b4:	ac e0       	ldi	r26, 0x0C	; 12
    c7b6:	b0 e0       	ldi	r27, 0x00	; 0
    c7b8:	e0 ee       	ldi	r30, 0xE0	; 224
    c7ba:	f3 e6       	ldi	r31, 0x63	; 99
    c7bc:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    c7c0:	9c 83       	std	Y+4, r25	; 0x04
    c7c2:	8b 83       	std	Y+3, r24	; 0x03
    c7c4:	78 87       	std	Y+8, r23	; 0x08
    c7c6:	6f 83       	std	Y+7, r22	; 0x07
    c7c8:	7a 01       	movw	r14, r20
    c7ca:	40 e0       	ldi	r20, 0x00	; 0
    c7cc:	be 01       	movw	r22, r28
    c7ce:	6f 5f       	subi	r22, 0xFF	; 255
    c7d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c7d2:	ce 01       	movw	r24, r28
    c7d4:	03 96       	adiw	r24, 0x03	; 3
    c7d6:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    c7da:	9e 83       	std	Y+6, r25	; 0x06
    c7dc:	8d 83       	std	Y+5, r24	; 0x05
    c7de:	89 2b       	or	r24, r25
    c7e0:	09 f0       	breq	.+2      	; 0xc7e4 <f_getfree+0x30>
    c7e2:	cf c0       	rjmp	.+414    	; 0xc982 <f_getfree+0x1ce>
    c7e4:	69 80       	ldd	r6, Y+1	; 0x01
    c7e6:	7a 80       	ldd	r7, Y+2	; 0x02
    c7e8:	d7 01       	movw	r26, r14
    c7ea:	6d 92       	st	X+, r6
    c7ec:	7c 92       	st	X, r7
    c7ee:	f3 01       	movw	r30, r6
    c7f0:	81 89       	ldd	r24, Z+17	; 0x11
    c7f2:	92 89       	ldd	r25, Z+18	; 0x12
    c7f4:	a3 89       	ldd	r26, Z+19	; 0x13
    c7f6:	b4 89       	ldd	r27, Z+20	; 0x14
    c7f8:	81 8c       	ldd	r8, Z+25	; 0x19
    c7fa:	92 8c       	ldd	r9, Z+26	; 0x1a
    c7fc:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c7fe:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c800:	b5 01       	movw	r22, r10
    c802:	a4 01       	movw	r20, r8
    c804:	42 50       	subi	r20, 0x02	; 2
    c806:	51 09       	sbc	r21, r1
    c808:	61 09       	sbc	r22, r1
    c80a:	71 09       	sbc	r23, r1
    c80c:	48 17       	cp	r20, r24
    c80e:	59 07       	cpc	r21, r25
    c810:	6a 07       	cpc	r22, r26
    c812:	7b 07       	cpc	r23, r27
    c814:	38 f0       	brcs	.+14     	; 0xc824 <f_getfree+0x70>
    c816:	ef 81       	ldd	r30, Y+7	; 0x07
    c818:	f8 85       	ldd	r31, Y+8	; 0x08
    c81a:	80 83       	st	Z, r24
    c81c:	91 83       	std	Z+1, r25	; 0x01
    c81e:	a2 83       	std	Z+2, r26	; 0x02
    c820:	b3 83       	std	Z+3, r27	; 0x03
    c822:	af c0       	rjmp	.+350    	; 0xc982 <f_getfree+0x1ce>
    c824:	80 81       	ld	r24, Z
    c826:	81 30       	cpi	r24, 0x01	; 1
    c828:	a1 f5       	brne	.+104    	; 0xc892 <f_getfree+0xde>
    c82a:	82 e0       	ldi	r24, 0x02	; 2
    c82c:	88 2e       	mov	r8, r24
    c82e:	91 2c       	mov	r9, r1
    c830:	a1 2c       	mov	r10, r1
    c832:	b1 2c       	mov	r11, r1
    c834:	c1 2c       	mov	r12, r1
    c836:	d1 2c       	mov	r13, r1
    c838:	76 01       	movw	r14, r12
    c83a:	b5 01       	movw	r22, r10
    c83c:	a4 01       	movw	r20, r8
    c83e:	c3 01       	movw	r24, r6
    c840:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <get_fat.isra.7>
    c844:	6f 3f       	cpi	r22, 0xFF	; 255
    c846:	bf ef       	ldi	r27, 0xFF	; 255
    c848:	7b 07       	cpc	r23, r27
    c84a:	8b 07       	cpc	r24, r27
    c84c:	9b 07       	cpc	r25, r27
    c84e:	09 f4       	brne	.+2      	; 0xc852 <f_getfree+0x9e>
    c850:	7c c0       	rjmp	.+248    	; 0xc94a <f_getfree+0x196>
    c852:	61 30       	cpi	r22, 0x01	; 1
    c854:	71 05       	cpc	r23, r1
    c856:	81 05       	cpc	r24, r1
    c858:	91 05       	cpc	r25, r1
    c85a:	09 f4       	brne	.+2      	; 0xc85e <f_getfree+0xaa>
    c85c:	7b c0       	rjmp	.+246    	; 0xc954 <f_getfree+0x1a0>
    c85e:	67 2b       	or	r22, r23
    c860:	68 2b       	or	r22, r24
    c862:	69 2b       	or	r22, r25
    c864:	29 f4       	brne	.+10     	; 0xc870 <f_getfree+0xbc>
    c866:	ef ef       	ldi	r30, 0xFF	; 255
    c868:	ce 1a       	sub	r12, r30
    c86a:	de 0a       	sbc	r13, r30
    c86c:	ee 0a       	sbc	r14, r30
    c86e:	fe 0a       	sbc	r15, r30
    c870:	ff ef       	ldi	r31, 0xFF	; 255
    c872:	8f 1a       	sub	r8, r31
    c874:	9f 0a       	sbc	r9, r31
    c876:	af 0a       	sbc	r10, r31
    c878:	bf 0a       	sbc	r11, r31
    c87a:	e9 81       	ldd	r30, Y+1	; 0x01
    c87c:	fa 81       	ldd	r31, Y+2	; 0x02
    c87e:	81 8d       	ldd	r24, Z+25	; 0x19
    c880:	92 8d       	ldd	r25, Z+26	; 0x1a
    c882:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c884:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c886:	88 16       	cp	r8, r24
    c888:	99 06       	cpc	r9, r25
    c88a:	aa 06       	cpc	r10, r26
    c88c:	bb 06       	cpc	r11, r27
    c88e:	a8 f2       	brcs	.-86     	; 0xc83a <f_getfree+0x86>
    c890:	68 c0       	rjmp	.+208    	; 0xc962 <f_getfree+0x1ae>
    c892:	45 a0       	ldd	r4, Z+37	; 0x25
    c894:	56 a0       	ldd	r5, Z+38	; 0x26
    c896:	67 a0       	ldd	r6, Z+39	; 0x27
    c898:	70 a4       	ldd	r7, Z+40	; 0x28
    c89a:	21 2c       	mov	r2, r1
    c89c:	31 2c       	mov	r3, r1
    c89e:	00 e0       	ldi	r16, 0x00	; 0
    c8a0:	10 e0       	ldi	r17, 0x00	; 0
    c8a2:	c1 2c       	mov	r12, r1
    c8a4:	d1 2c       	mov	r13, r1
    c8a6:	76 01       	movw	r14, r12
    c8a8:	01 15       	cp	r16, r1
    c8aa:	11 05       	cpc	r17, r1
    c8ac:	e9 f4       	brne	.+58     	; 0xc8e8 <f_getfree+0x134>
    c8ae:	d3 01       	movw	r26, r6
    c8b0:	c2 01       	movw	r24, r4
    c8b2:	01 96       	adiw	r24, 0x01	; 1
    c8b4:	a1 1d       	adc	r26, r1
    c8b6:	b1 1d       	adc	r27, r1
    c8b8:	89 87       	std	Y+9, r24	; 0x09
    c8ba:	9a 87       	std	Y+10, r25	; 0x0a
    c8bc:	ab 87       	std	Y+11, r26	; 0x0b
    c8be:	bc 87       	std	Y+12, r27	; 0x0c
    c8c0:	b3 01       	movw	r22, r6
    c8c2:	a2 01       	movw	r20, r4
    c8c4:	89 81       	ldd	r24, Y+1	; 0x01
    c8c6:	9a 81       	ldd	r25, Y+2	; 0x02
    c8c8:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    c8cc:	00 97       	sbiw	r24, 0x00	; 0
    c8ce:	09 f0       	breq	.+2      	; 0xc8d2 <f_getfree+0x11e>
    c8d0:	46 c0       	rjmp	.+140    	; 0xc95e <f_getfree+0x1aa>
    c8d2:	29 80       	ldd	r2, Y+1	; 0x01
    c8d4:	3a 80       	ldd	r3, Y+2	; 0x02
    c8d6:	95 e3       	ldi	r25, 0x35	; 53
    c8d8:	29 0e       	add	r2, r25
    c8da:	31 1c       	adc	r3, r1
    c8dc:	49 84       	ldd	r4, Y+9	; 0x09
    c8de:	5a 84       	ldd	r5, Y+10	; 0x0a
    c8e0:	6b 84       	ldd	r6, Y+11	; 0x0b
    c8e2:	7c 84       	ldd	r7, Y+12	; 0x0c
    c8e4:	00 e0       	ldi	r16, 0x00	; 0
    c8e6:	12 e0       	ldi	r17, 0x02	; 2
    c8e8:	e9 81       	ldd	r30, Y+1	; 0x01
    c8ea:	fa 81       	ldd	r31, Y+2	; 0x02
    c8ec:	80 81       	ld	r24, Z
    c8ee:	82 30       	cpi	r24, 0x02	; 2
    c8f0:	81 f4       	brne	.+32     	; 0xc912 <f_getfree+0x15e>
    c8f2:	d1 01       	movw	r26, r2
    c8f4:	8d 91       	ld	r24, X+
    c8f6:	9c 91       	ld	r25, X
    c8f8:	89 2b       	or	r24, r25
    c8fa:	29 f4       	brne	.+10     	; 0xc906 <f_getfree+0x152>
    c8fc:	bf ef       	ldi	r27, 0xFF	; 255
    c8fe:	cb 1a       	sub	r12, r27
    c900:	db 0a       	sbc	r13, r27
    c902:	eb 0a       	sbc	r14, r27
    c904:	fb 0a       	sbc	r15, r27
    c906:	e2 e0       	ldi	r30, 0x02	; 2
    c908:	2e 0e       	add	r2, r30
    c90a:	31 1c       	adc	r3, r1
    c90c:	02 50       	subi	r16, 0x02	; 2
    c90e:	11 09       	sbc	r17, r1
    c910:	14 c0       	rjmp	.+40     	; 0xc93a <f_getfree+0x186>
    c912:	c1 01       	movw	r24, r2
    c914:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <ld_dword>
    c918:	dc 01       	movw	r26, r24
    c91a:	cb 01       	movw	r24, r22
    c91c:	bf 70       	andi	r27, 0x0F	; 15
    c91e:	89 2b       	or	r24, r25
    c920:	8a 2b       	or	r24, r26
    c922:	8b 2b       	or	r24, r27
    c924:	29 f4       	brne	.+10     	; 0xc930 <f_getfree+0x17c>
    c926:	ff ef       	ldi	r31, 0xFF	; 255
    c928:	cf 1a       	sub	r12, r31
    c92a:	df 0a       	sbc	r13, r31
    c92c:	ef 0a       	sbc	r14, r31
    c92e:	ff 0a       	sbc	r15, r31
    c930:	24 e0       	ldi	r18, 0x04	; 4
    c932:	22 0e       	add	r2, r18
    c934:	31 1c       	adc	r3, r1
    c936:	04 50       	subi	r16, 0x04	; 4
    c938:	11 09       	sbc	r17, r1
    c93a:	81 e0       	ldi	r24, 0x01	; 1
    c93c:	88 1a       	sub	r8, r24
    c93e:	91 08       	sbc	r9, r1
    c940:	a1 08       	sbc	r10, r1
    c942:	b1 08       	sbc	r11, r1
    c944:	09 f0       	breq	.+2      	; 0xc948 <f_getfree+0x194>
    c946:	b0 cf       	rjmp	.-160    	; 0xc8a8 <f_getfree+0xf4>
    c948:	0c c0       	rjmp	.+24     	; 0xc962 <f_getfree+0x1ae>
    c94a:	a1 e0       	ldi	r26, 0x01	; 1
    c94c:	b0 e0       	ldi	r27, 0x00	; 0
    c94e:	be 83       	std	Y+6, r27	; 0x06
    c950:	ad 83       	std	Y+5, r26	; 0x05
    c952:	07 c0       	rjmp	.+14     	; 0xc962 <f_getfree+0x1ae>
    c954:	e2 e0       	ldi	r30, 0x02	; 2
    c956:	f0 e0       	ldi	r31, 0x00	; 0
    c958:	fe 83       	std	Y+6, r31	; 0x06
    c95a:	ed 83       	std	Y+5, r30	; 0x05
    c95c:	02 c0       	rjmp	.+4      	; 0xc962 <f_getfree+0x1ae>
    c95e:	9e 83       	std	Y+6, r25	; 0x06
    c960:	8d 83       	std	Y+5, r24	; 0x05
    c962:	af 81       	ldd	r26, Y+7	; 0x07
    c964:	b8 85       	ldd	r27, Y+8	; 0x08
    c966:	cd 92       	st	X+, r12
    c968:	dd 92       	st	X+, r13
    c96a:	ed 92       	st	X+, r14
    c96c:	fc 92       	st	X, r15
    c96e:	13 97       	sbiw	r26, 0x03	; 3
    c970:	e9 81       	ldd	r30, Y+1	; 0x01
    c972:	fa 81       	ldd	r31, Y+2	; 0x02
    c974:	c1 8a       	std	Z+17, r12	; 0x11
    c976:	d2 8a       	std	Z+18, r13	; 0x12
    c978:	e3 8a       	std	Z+19, r14	; 0x13
    c97a:	f4 8a       	std	Z+20, r15	; 0x14
    c97c:	84 81       	ldd	r24, Z+4	; 0x04
    c97e:	81 60       	ori	r24, 0x01	; 1
    c980:	84 83       	std	Z+4, r24	; 0x04
    c982:	8d 81       	ldd	r24, Y+5	; 0x05
    c984:	9e 81       	ldd	r25, Y+6	; 0x06
    c986:	2c 96       	adiw	r28, 0x0c	; 12
    c988:	e2 e1       	ldi	r30, 0x12	; 18
    c98a:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000c98e <f_unlink>:
    c98e:	a0 e6       	ldi	r26, 0x60	; 96
    c990:	b0 e0       	ldi	r27, 0x00	; 0
    c992:	ed ec       	ldi	r30, 0xCD	; 205
    c994:	f4 e6       	ldi	r31, 0x64	; 100
    c996:	0c 94 0c ed 	jmp	0x1da18	; 0x1da18 <__prologue_saves__+0xe>
    c99a:	a1 96       	adiw	r28, 0x21	; 33
    c99c:	9f af       	std	Y+63, r25	; 0x3f
    c99e:	8e af       	std	Y+62, r24	; 0x3e
    c9a0:	a1 97       	sbiw	r28, 0x21	; 33
    c9a2:	42 e0       	ldi	r20, 0x02	; 2
    c9a4:	be 01       	movw	r22, r28
    c9a6:	63 5a       	subi	r22, 0xA3	; 163
    c9a8:	7f 4f       	sbci	r23, 0xFF	; 255
    c9aa:	ce 01       	movw	r24, r28
    c9ac:	81 5a       	subi	r24, 0xA1	; 161
    c9ae:	9f 4f       	sbci	r25, 0xFF	; 255
    c9b0:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    c9b4:	6f 96       	adiw	r28, 0x1f	; 31
    c9b6:	2e ad       	ldd	r18, Y+62	; 0x3e
    c9b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    c9ba:	6f 97       	sbiw	r28, 0x1f	; 31
    c9bc:	38 ab       	std	Y+48, r19	; 0x30
    c9be:	2f a7       	std	Y+47, r18	; 0x2f
    c9c0:	00 97       	sbiw	r24, 0x00	; 0
    c9c2:	09 f0       	breq	.+2      	; 0xc9c6 <f_unlink+0x38>
    c9c4:	88 c0       	rjmp	.+272    	; 0xcad6 <f_unlink+0x148>
    c9c6:	80 e0       	ldi	r24, 0x00	; 0
    c9c8:	92 e0       	ldi	r25, 0x02	; 2
    c9ca:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    c9ce:	5c 01       	movw	r10, r24
    c9d0:	00 97       	sbiw	r24, 0x00	; 0
    c9d2:	09 f4       	brne	.+2      	; 0xc9d6 <f_unlink+0x48>
    c9d4:	4a c0       	rjmp	.+148    	; 0xca6a <f_unlink+0xdc>
    c9d6:	6f 96       	adiw	r28, 0x1f	; 31
    c9d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    c9da:	ff ad       	ldd	r31, Y+63	; 0x3f
    c9dc:	6f 97       	sbiw	r28, 0x1f	; 31
    c9de:	94 87       	std	Z+12, r25	; 0x0c
    c9e0:	83 87       	std	Z+11, r24	; 0x0b
    c9e2:	a1 96       	adiw	r28, 0x21	; 33
    c9e4:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9e6:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9e8:	a1 97       	sbiw	r28, 0x21	; 33
    c9ea:	ce 01       	movw	r24, r28
    c9ec:	8f 96       	adiw	r24, 0x2f	; 47
    c9ee:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    c9f2:	8c 01       	movw	r16, r24
    c9f4:	89 2b       	or	r24, r25
    c9f6:	a1 f5       	brne	.+104    	; 0xca60 <f_unlink+0xd2>
    c9f8:	67 96       	adiw	r28, 0x17	; 23
    c9fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    c9fc:	67 97       	sbiw	r28, 0x17	; 23
    c9fe:	85 fd       	sbrc	r24, 5
    ca00:	37 c0       	rjmp	.+110    	; 0xca70 <f_unlink+0xe2>
    ca02:	87 fd       	sbrc	r24, 7
    ca04:	35 c0       	rjmp	.+106    	; 0xca70 <f_unlink+0xe2>
    ca06:	9b a8       	ldd	r9, Y+51	; 0x33
    ca08:	90 fc       	sbrc	r9, 0
    ca0a:	41 c0       	rjmp	.+130    	; 0xca8e <f_unlink+0x100>
    ca0c:	6f 96       	adiw	r28, 0x1f	; 31
    ca0e:	0e ad       	ldd	r16, Y+62	; 0x3e
    ca10:	1f ad       	ldd	r17, Y+63	; 0x3f
    ca12:	6f 97       	sbiw	r28, 0x1f	; 31
    ca14:	2b 96       	adiw	r28, 0x0b	; 11
    ca16:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca18:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca1a:	2b 97       	sbiw	r28, 0x0b	; 11
    ca1c:	f8 01       	movw	r30, r16
    ca1e:	80 81       	ld	r24, Z
    ca20:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    ca24:	6b 01       	movw	r12, r22
    ca26:	7c 01       	movw	r14, r24
    ca28:	94 fe       	sbrs	r9, 4
    ca2a:	34 c0       	rjmp	.+104    	; 0xca94 <f_unlink+0x106>
    ca2c:	f8 01       	movw	r30, r16
    ca2e:	85 89       	ldd	r24, Z+21	; 0x15
    ca30:	96 89       	ldd	r25, Z+22	; 0x16
    ca32:	a7 89       	ldd	r26, Z+23	; 0x17
    ca34:	b0 8d       	ldd	r27, Z+24	; 0x18
    ca36:	c8 16       	cp	r12, r24
    ca38:	d9 06       	cpc	r13, r25
    ca3a:	ea 06       	cpc	r14, r26
    ca3c:	fb 06       	cpc	r15, r27
    ca3e:	39 f1       	breq	.+78     	; 0xca8e <f_unlink+0x100>
    ca40:	1a 83       	std	Y+2, r17	; 0x02
    ca42:	09 83       	std	Y+1, r16	; 0x01
    ca44:	cf 82       	std	Y+7, r12	; 0x07
    ca46:	d8 86       	std	Y+8, r13	; 0x08
    ca48:	e9 86       	std	Y+9, r14	; 0x09
    ca4a:	fa 86       	std	Y+10, r15	; 0x0a
    ca4c:	40 e0       	ldi	r20, 0x00	; 0
    ca4e:	50 e0       	ldi	r21, 0x00	; 0
    ca50:	ba 01       	movw	r22, r20
    ca52:	ce 01       	movw	r24, r28
    ca54:	01 96       	adiw	r24, 0x01	; 1
    ca56:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <dir_sdi>
    ca5a:	8c 01       	movw	r16, r24
    ca5c:	89 2b       	or	r24, r25
    ca5e:	59 f0       	breq	.+22     	; 0xca76 <f_unlink+0xe8>
    ca60:	c5 01       	movw	r24, r10
    ca62:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    ca66:	c8 01       	movw	r24, r16
    ca68:	36 c0       	rjmp	.+108    	; 0xcad6 <f_unlink+0x148>
    ca6a:	81 e1       	ldi	r24, 0x11	; 17
    ca6c:	90 e0       	ldi	r25, 0x00	; 0
    ca6e:	33 c0       	rjmp	.+102    	; 0xcad6 <f_unlink+0x148>
    ca70:	06 e0       	ldi	r16, 0x06	; 6
    ca72:	10 e0       	ldi	r17, 0x00	; 0
    ca74:	f5 cf       	rjmp	.-22     	; 0xca60 <f_unlink+0xd2>
    ca76:	60 e0       	ldi	r22, 0x00	; 0
    ca78:	70 e0       	ldi	r23, 0x00	; 0
    ca7a:	ce 01       	movw	r24, r28
    ca7c:	01 96       	adiw	r24, 0x01	; 1
    ca7e:	0e 94 b9 52 	call	0xa572	; 0xa572 <dir_read>
    ca82:	8c 01       	movw	r16, r24
    ca84:	00 97       	sbiw	r24, 0x00	; 0
    ca86:	19 f0       	breq	.+6      	; 0xca8e <f_unlink+0x100>
    ca88:	04 97       	sbiw	r24, 0x04	; 4
    ca8a:	21 f0       	breq	.+8      	; 0xca94 <f_unlink+0x106>
    ca8c:	e9 cf       	rjmp	.-46     	; 0xca60 <f_unlink+0xd2>
    ca8e:	07 e0       	ldi	r16, 0x07	; 7
    ca90:	10 e0       	ldi	r17, 0x00	; 0
    ca92:	e6 cf       	rjmp	.-52     	; 0xca60 <f_unlink+0xd2>
    ca94:	ce 01       	movw	r24, r28
    ca96:	8f 96       	adiw	r24, 0x2f	; 47
    ca98:	0e 94 87 53 	call	0xa70e	; 0xa70e <dir_remove>
    ca9c:	8c 01       	movw	r16, r24
    ca9e:	89 2b       	or	r24, r25
    caa0:	f9 f6       	brne	.-66     	; 0xca60 <f_unlink+0xd2>
    caa2:	c1 14       	cp	r12, r1
    caa4:	d1 04       	cpc	r13, r1
    caa6:	e1 04       	cpc	r14, r1
    caa8:	f1 04       	cpc	r15, r1
    caaa:	41 f4       	brne	.+16     	; 0xcabc <f_unlink+0x12e>
    caac:	6f 96       	adiw	r28, 0x1f	; 31
    caae:	8e ad       	ldd	r24, Y+62	; 0x3e
    cab0:	9f ad       	ldd	r25, Y+63	; 0x3f
    cab2:	6f 97       	sbiw	r28, 0x1f	; 31
    cab4:	0e 94 18 49 	call	0x9230	; 0x9230 <sync_fs>
    cab8:	8c 01       	movw	r16, r24
    caba:	d2 cf       	rjmp	.-92     	; 0xca60 <f_unlink+0xd2>
    cabc:	00 e0       	ldi	r16, 0x00	; 0
    cabe:	10 e0       	ldi	r17, 0x00	; 0
    cac0:	98 01       	movw	r18, r16
    cac2:	b7 01       	movw	r22, r14
    cac4:	a6 01       	movw	r20, r12
    cac6:	ce 01       	movw	r24, r28
    cac8:	8f 96       	adiw	r24, 0x2f	; 47
    caca:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <remove_chain>
    cace:	8c 01       	movw	r16, r24
    cad0:	89 2b       	or	r24, r25
    cad2:	31 f6       	brne	.-116    	; 0xca60 <f_unlink+0xd2>
    cad4:	eb cf       	rjmp	.-42     	; 0xcaac <f_unlink+0x11e>
    cad6:	c0 5a       	subi	r28, 0xA0	; 160
    cad8:	df 4f       	sbci	r29, 0xFF	; 255
    cada:	eb e0       	ldi	r30, 0x0B	; 11
    cadc:	0c 94 28 ed 	jmp	0x1da50	; 0x1da50 <__epilogue_restores__+0xe>

0000cae0 <f_mkdir>:
    cae0:	ac e3       	ldi	r26, 0x3C	; 60
    cae2:	b0 e0       	ldi	r27, 0x00	; 0
    cae4:	e6 e7       	ldi	r30, 0x76	; 118
    cae6:	f5 e6       	ldi	r31, 0x65	; 101
    cae8:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    caec:	9a ab       	std	Y+50, r25	; 0x32
    caee:	89 ab       	std	Y+49, r24	; 0x31
    caf0:	42 e0       	ldi	r20, 0x02	; 2
    caf2:	be 01       	movw	r22, r28
    caf4:	61 5d       	subi	r22, 0xD1	; 209
    caf6:	7f 4f       	sbci	r23, 0xFF	; 255
    caf8:	ce 01       	movw	r24, r28
    cafa:	c1 96       	adiw	r24, 0x31	; 49
    cafc:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    cb00:	2f a5       	ldd	r18, Y+47	; 0x2f
    cb02:	38 a9       	ldd	r19, Y+48	; 0x30
    cb04:	3a 83       	std	Y+2, r19	; 0x02
    cb06:	29 83       	std	Y+1, r18	; 0x01
    cb08:	00 97       	sbiw	r24, 0x00	; 0
    cb0a:	09 f0       	breq	.+2      	; 0xcb0e <f_mkdir+0x2e>
    cb0c:	2c c1       	rjmp	.+600    	; 0xcd66 <f_mkdir+0x286>
    cb0e:	80 e0       	ldi	r24, 0x00	; 0
    cb10:	92 e0       	ldi	r25, 0x02	; 2
    cb12:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <ff_memalloc>
    cb16:	98 af       	std	Y+56, r25	; 0x38
    cb18:	8f ab       	std	Y+55, r24	; 0x37
    cb1a:	00 97       	sbiw	r24, 0x00	; 0
    cb1c:	d9 f0       	breq	.+54     	; 0xcb54 <f_mkdir+0x74>
    cb1e:	ef a5       	ldd	r30, Y+47	; 0x2f
    cb20:	f8 a9       	ldd	r31, Y+48	; 0x30
    cb22:	94 87       	std	Z+12, r25	; 0x0c
    cb24:	83 87       	std	Z+11, r24	; 0x0b
    cb26:	69 a9       	ldd	r22, Y+49	; 0x31
    cb28:	7a a9       	ldd	r23, Y+50	; 0x32
    cb2a:	ce 01       	movw	r24, r28
    cb2c:	01 96       	adiw	r24, 0x01	; 1
    cb2e:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    cb32:	7c 01       	movw	r14, r24
    cb34:	00 97       	sbiw	r24, 0x00	; 0
    cb36:	89 f0       	breq	.+34     	; 0xcb5a <f_mkdir+0x7a>
    cb38:	04 97       	sbiw	r24, 0x04	; 4
    cb3a:	31 f4       	brne	.+12     	; 0xcb48 <f_mkdir+0x68>
    cb3c:	88 a5       	ldd	r24, Y+40	; 0x28
    cb3e:	85 ff       	sbrs	r24, 5
    cb40:	10 c0       	rjmp	.+32     	; 0xcb62 <f_mkdir+0x82>
    cb42:	36 e0       	ldi	r19, 0x06	; 6
    cb44:	e3 2e       	mov	r14, r19
    cb46:	f1 2c       	mov	r15, r1
    cb48:	8f a9       	ldd	r24, Y+55	; 0x37
    cb4a:	98 ad       	ldd	r25, Y+56	; 0x38
    cb4c:	0e 94 55 6e 	call	0xdcaa	; 0xdcaa <ff_memfree>
    cb50:	c7 01       	movw	r24, r14
    cb52:	09 c1       	rjmp	.+530    	; 0xcd66 <f_mkdir+0x286>
    cb54:	81 e1       	ldi	r24, 0x11	; 17
    cb56:	90 e0       	ldi	r25, 0x00	; 0
    cb58:	06 c1       	rjmp	.+524    	; 0xcd66 <f_mkdir+0x286>
    cb5a:	48 e0       	ldi	r20, 0x08	; 8
    cb5c:	e4 2e       	mov	r14, r20
    cb5e:	f1 2c       	mov	r15, r1
    cb60:	f3 cf       	rjmp	.-26     	; 0xcb48 <f_mkdir+0x68>
    cb62:	40 e0       	ldi	r20, 0x00	; 0
    cb64:	50 e0       	ldi	r21, 0x00	; 0
    cb66:	ba 01       	movw	r22, r20
    cb68:	ce 01       	movw	r24, r28
    cb6a:	01 96       	adiw	r24, 0x01	; 1
    cb6c:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <create_chain>
    cb70:	4b 01       	movw	r8, r22
    cb72:	5c 01       	movw	r10, r24
    cb74:	8f a5       	ldd	r24, Y+47	; 0x2f
    cb76:	98 a9       	ldd	r25, Y+48	; 0x30
    cb78:	dc 01       	movw	r26, r24
    cb7a:	19 96       	adiw	r26, 0x09	; 9
    cb7c:	4d 91       	ld	r20, X+
    cb7e:	5c 91       	ld	r21, X
    cb80:	1a 97       	sbiw	r26, 0x0a	; 10
    cb82:	60 e0       	ldi	r22, 0x00	; 0
    cb84:	70 e0       	ldi	r23, 0x00	; 0
    cb86:	29 e0       	ldi	r18, 0x09	; 9
    cb88:	44 0f       	add	r20, r20
    cb8a:	55 1f       	adc	r21, r21
    cb8c:	66 1f       	adc	r22, r22
    cb8e:	77 1f       	adc	r23, r23
    cb90:	2a 95       	dec	r18
    cb92:	d1 f7       	brne	.-12     	; 0xcb88 <f_mkdir+0xa8>
    cb94:	4b 87       	std	Y+11, r20	; 0x0b
    cb96:	5c 87       	std	Y+12, r21	; 0x0c
    cb98:	6d 87       	std	Y+13, r22	; 0x0d
    cb9a:	7e 87       	std	Y+14, r23	; 0x0e
    cb9c:	81 14       	cp	r8, r1
    cb9e:	91 04       	cpc	r9, r1
    cba0:	a1 04       	cpc	r10, r1
    cba2:	b1 04       	cpc	r11, r1
    cba4:	a9 f0       	breq	.+42     	; 0xcbd0 <f_mkdir+0xf0>
    cba6:	31 e0       	ldi	r19, 0x01	; 1
    cba8:	83 16       	cp	r8, r19
    cbaa:	91 04       	cpc	r9, r1
    cbac:	a1 04       	cpc	r10, r1
    cbae:	b1 04       	cpc	r11, r1
    cbb0:	59 f0       	breq	.+22     	; 0xcbc8 <f_mkdir+0xe8>
    cbb2:	4f ef       	ldi	r20, 0xFF	; 255
    cbb4:	84 16       	cp	r8, r20
    cbb6:	94 06       	cpc	r9, r20
    cbb8:	a4 06       	cpc	r10, r20
    cbba:	b4 06       	cpc	r11, r20
    cbbc:	09 f0       	breq	.+2      	; 0xcbc0 <f_mkdir+0xe0>
    cbbe:	cf c0       	rjmp	.+414    	; 0xcd5e <f_mkdir+0x27e>
    cbc0:	ee 24       	eor	r14, r14
    cbc2:	e3 94       	inc	r14
    cbc4:	f1 2c       	mov	r15, r1
    cbc6:	07 c0       	rjmp	.+14     	; 0xcbd6 <f_mkdir+0xf6>
    cbc8:	62 e0       	ldi	r22, 0x02	; 2
    cbca:	e6 2e       	mov	r14, r22
    cbcc:	f1 2c       	mov	r15, r1
    cbce:	03 c0       	rjmp	.+6      	; 0xcbd6 <f_mkdir+0xf6>
    cbd0:	57 e0       	ldi	r21, 0x07	; 7
    cbd2:	e5 2e       	mov	r14, r21
    cbd4:	f1 2c       	mov	r15, r1
    cbd6:	0e 94 62 75 	call	0xeac4	; 0xeac4 <get_fattime>
    cbda:	2b 01       	movw	r4, r22
    cbdc:	3c 01       	movw	r6, r24
    cbde:	e1 14       	cp	r14, r1
    cbe0:	f1 04       	cpc	r15, r1
    cbe2:	09 f0       	breq	.+2      	; 0xcbe6 <f_mkdir+0x106>
    cbe4:	8f c0       	rjmp	.+286    	; 0xcd04 <f_mkdir+0x224>
    cbe6:	0f a5       	ldd	r16, Y+47	; 0x2f
    cbe8:	18 a9       	ldd	r17, Y+48	; 0x30
    cbea:	b5 01       	movw	r22, r10
    cbec:	a4 01       	movw	r20, r8
    cbee:	c8 01       	movw	r24, r16
    cbf0:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    cbf4:	6b 01       	movw	r12, r22
    cbf6:	7c 01       	movw	r14, r24
    cbf8:	18 01       	movw	r2, r16
    cbfa:	55 e3       	ldi	r21, 0x35	; 53
    cbfc:	25 0e       	add	r2, r21
    cbfe:	31 1c       	adc	r3, r1
    cc00:	40 e0       	ldi	r20, 0x00	; 0
    cc02:	52 e0       	ldi	r21, 0x02	; 2
    cc04:	60 e0       	ldi	r22, 0x00	; 0
    cc06:	70 e0       	ldi	r23, 0x00	; 0
    cc08:	c1 01       	movw	r24, r2
    cc0a:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    cc0e:	4b e0       	ldi	r20, 0x0B	; 11
    cc10:	50 e0       	ldi	r21, 0x00	; 0
    cc12:	60 e2       	ldi	r22, 0x20	; 32
    cc14:	70 e0       	ldi	r23, 0x00	; 0
    cc16:	c1 01       	movw	r24, r2
    cc18:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    cc1c:	ee e2       	ldi	r30, 0x2E	; 46
    cc1e:	d8 01       	movw	r26, r16
    cc20:	d5 96       	adiw	r26, 0x35	; 53
    cc22:	ec 93       	st	X, r30
    cc24:	f8 01       	movw	r30, r16
    cc26:	e0 5c       	subi	r30, 0xC0	; 192
    cc28:	ff 4f       	sbci	r31, 0xFF	; 255
    cc2a:	80 e1       	ldi	r24, 0x10	; 16
    cc2c:	80 83       	st	Z, r24
    cc2e:	b3 01       	movw	r22, r6
    cc30:	a2 01       	movw	r20, r4
    cc32:	c8 01       	movw	r24, r16
    cc34:	85 5b       	subi	r24, 0xB5	; 181
    cc36:	9f 4f       	sbci	r25, 0xFF	; 255
    cc38:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    cc3c:	a5 01       	movw	r20, r10
    cc3e:	94 01       	movw	r18, r8
    cc40:	b1 01       	movw	r22, r2
    cc42:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc44:	98 a9       	ldd	r25, Y+48	; 0x30
    cc46:	0e 94 b1 48 	call	0x9162	; 0x9162 <st_clust.isra.2>
    cc4a:	98 01       	movw	r18, r16
    cc4c:	2b 5a       	subi	r18, 0xAB	; 171
    cc4e:	3f 4f       	sbci	r19, 0xFF	; 255
    cc50:	3c ab       	std	Y+52, r19	; 0x34
    cc52:	2b ab       	std	Y+51, r18	; 0x33
    cc54:	40 e2       	ldi	r20, 0x20	; 32
    cc56:	50 e0       	ldi	r21, 0x00	; 0
    cc58:	b1 01       	movw	r22, r2
    cc5a:	c9 01       	movw	r24, r18
    cc5c:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    cc60:	f8 01       	movw	r30, r16
    cc62:	ea 5a       	subi	r30, 0xAA	; 170
    cc64:	ff 4f       	sbci	r31, 0xFF	; 255
    cc66:	3e e2       	ldi	r19, 0x2E	; 46
    cc68:	30 83       	st	Z, r19
    cc6a:	2f 81       	ldd	r18, Y+7	; 0x07
    cc6c:	38 85       	ldd	r19, Y+8	; 0x08
    cc6e:	49 85       	ldd	r20, Y+9	; 0x09
    cc70:	5a 85       	ldd	r21, Y+10	; 0x0a
    cc72:	0f a5       	ldd	r16, Y+47	; 0x2f
    cc74:	18 a9       	ldd	r17, Y+48	; 0x30
    cc76:	d8 01       	movw	r26, r16
    cc78:	6c 91       	ld	r22, X
    cc7a:	63 30       	cpi	r22, 0x03	; 3
    cc7c:	71 f4       	brne	.+28     	; 0xcc9a <f_mkdir+0x1ba>
    cc7e:	99 96       	adiw	r26, 0x29	; 41
    cc80:	8d 91       	ld	r24, X+
    cc82:	9d 91       	ld	r25, X+
    cc84:	0d 90       	ld	r0, X+
    cc86:	bc 91       	ld	r27, X
    cc88:	a0 2d       	mov	r26, r0
    cc8a:	28 17       	cp	r18, r24
    cc8c:	39 07       	cpc	r19, r25
    cc8e:	4a 07       	cpc	r20, r26
    cc90:	5b 07       	cpc	r21, r27
    cc92:	19 f4       	brne	.+6      	; 0xcc9a <f_mkdir+0x1ba>
    cc94:	20 e0       	ldi	r18, 0x00	; 0
    cc96:	30 e0       	ldi	r19, 0x00	; 0
    cc98:	a9 01       	movw	r20, r18
    cc9a:	6b a9       	ldd	r22, Y+51	; 0x33
    cc9c:	7c a9       	ldd	r23, Y+52	; 0x34
    cc9e:	c8 01       	movw	r24, r16
    cca0:	0e 94 b1 48 	call	0x9162	; 0x9162 <st_clust.isra.2>
    cca4:	ef a5       	ldd	r30, Y+47	; 0x2f
    cca6:	f8 a9       	ldd	r31, Y+48	; 0x30
    cca8:	01 85       	ldd	r16, Z+9	; 0x09
    ccaa:	12 85       	ldd	r17, Z+10	; 0x0a
    ccac:	01 15       	cp	r16, r1
    ccae:	11 05       	cpc	r17, r1
    ccb0:	99 f1       	breq	.+102    	; 0xcd18 <f_mkdir+0x238>
    ccb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    ccb4:	98 a9       	ldd	r25, Y+48	; 0x30
    ccb6:	a7 01       	movw	r20, r14
    ccb8:	96 01       	movw	r18, r12
    ccba:	2f 5f       	subi	r18, 0xFF	; 255
    ccbc:	3f 4f       	sbci	r19, 0xFF	; 255
    ccbe:	4f 4f       	sbci	r20, 0xFF	; 255
    ccc0:	5f 4f       	sbci	r21, 0xFF	; 255
    ccc2:	2b ab       	std	Y+51, r18	; 0x33
    ccc4:	3c ab       	std	Y+52, r19	; 0x34
    ccc6:	4d ab       	std	Y+53, r20	; 0x35
    ccc8:	5e ab       	std	Y+54, r21	; 0x36
    ccca:	dc 01       	movw	r26, r24
    cccc:	d1 96       	adiw	r26, 0x31	; 49
    ccce:	cd 92       	st	X+, r12
    ccd0:	dd 92       	st	X+, r13
    ccd2:	ed 92       	st	X+, r14
    ccd4:	fc 92       	st	X, r15
    ccd6:	d4 97       	sbiw	r26, 0x34	; 52
    ccd8:	e1 e0       	ldi	r30, 0x01	; 1
    ccda:	13 96       	adiw	r26, 0x03	; 3
    ccdc:	ec 93       	st	X, r30
    ccde:	0e 94 be 48 	call	0x917c	; 0x917c <sync_window.part.3>
    cce2:	7c 01       	movw	r14, r24
    cce4:	89 2b       	or	r24, r25
    cce6:	71 f4       	brne	.+28     	; 0xcd04 <f_mkdir+0x224>
    cce8:	40 e0       	ldi	r20, 0x00	; 0
    ccea:	52 e0       	ldi	r21, 0x02	; 2
    ccec:	60 e0       	ldi	r22, 0x00	; 0
    ccee:	70 e0       	ldi	r23, 0x00	; 0
    ccf0:	c1 01       	movw	r24, r2
    ccf2:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    ccf6:	01 50       	subi	r16, 0x01	; 1
    ccf8:	11 09       	sbc	r17, r1
    ccfa:	cb a8       	ldd	r12, Y+51	; 0x33
    ccfc:	dc a8       	ldd	r13, Y+52	; 0x34
    ccfe:	ed a8       	ldd	r14, Y+53	; 0x35
    cd00:	fe a8       	ldd	r15, Y+54	; 0x36
    cd02:	d4 cf       	rjmp	.-88     	; 0xccac <f_mkdir+0x1cc>
    cd04:	00 e0       	ldi	r16, 0x00	; 0
    cd06:	10 e0       	ldi	r17, 0x00	; 0
    cd08:	98 01       	movw	r18, r16
    cd0a:	b5 01       	movw	r22, r10
    cd0c:	a4 01       	movw	r20, r8
    cd0e:	ce 01       	movw	r24, r28
    cd10:	01 96       	adiw	r24, 0x01	; 1
    cd12:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <remove_chain>
    cd16:	18 cf       	rjmp	.-464    	; 0xcb48 <f_mkdir+0x68>
    cd18:	ce 01       	movw	r24, r28
    cd1a:	01 96       	adiw	r24, 0x01	; 1
    cd1c:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <dir_register>
    cd20:	7c 01       	movw	r14, r24
    cd22:	89 2b       	or	r24, r25
    cd24:	79 f7       	brne	.-34     	; 0xcd04 <f_mkdir+0x224>
    cd26:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cd28:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cd2a:	b3 01       	movw	r22, r6
    cd2c:	a2 01       	movw	r20, r4
    cd2e:	c8 01       	movw	r24, r16
    cd30:	46 96       	adiw	r24, 0x16	; 22
    cd32:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    cd36:	a5 01       	movw	r20, r10
    cd38:	94 01       	movw	r18, r8
    cd3a:	b8 01       	movw	r22, r16
    cd3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd3e:	98 a9       	ldd	r25, Y+48	; 0x30
    cd40:	0e 94 b1 48 	call	0x9162	; 0x9162 <st_clust.isra.2>
    cd44:	80 e1       	ldi	r24, 0x10	; 16
    cd46:	f8 01       	movw	r30, r16
    cd48:	83 87       	std	Z+11, r24	; 0x0b
    cd4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd4c:	98 a9       	ldd	r25, Y+48	; 0x30
    cd4e:	21 e0       	ldi	r18, 0x01	; 1
    cd50:	dc 01       	movw	r26, r24
    cd52:	13 96       	adiw	r26, 0x03	; 3
    cd54:	2c 93       	st	X, r18
    cd56:	0e 94 18 49 	call	0x9230	; 0x9230 <sync_fs>
    cd5a:	7c 01       	movw	r14, r24
    cd5c:	f5 ce       	rjmp	.-534    	; 0xcb48 <f_mkdir+0x68>
    cd5e:	0e 94 0f 49 	call	0x921e	; 0x921e <sync_window>
    cd62:	7c 01       	movw	r14, r24
    cd64:	38 cf       	rjmp	.-400    	; 0xcbd6 <f_mkdir+0xf6>
    cd66:	ec 96       	adiw	r28, 0x3c	; 60
    cd68:	e2 e1       	ldi	r30, 0x12	; 18
    cd6a:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000cd6e <f_rename>:
    cd6e:	aa e7       	ldi	r26, 0x7A	; 122
    cd70:	b0 e0       	ldi	r27, 0x00	; 0
    cd72:	ed eb       	ldi	r30, 0xBD	; 189
    cd74:	f6 e6       	ldi	r31, 0x66	; 102
    cd76:	0c 94 0e ed 	jmp	0x1da1c	; 0x1da1c <__prologue_saves__+0x12>
    cd7a:	e9 96       	adiw	r28, 0x39	; 57
    cd7c:	9f af       	std	Y+63, r25	; 0x3f
    cd7e:	8e af       	std	Y+62, r24	; 0x3e
    cd80:	e9 97       	sbiw	r28, 0x39	; 57
    cd82:	eb 96       	adiw	r28, 0x3b	; 59
    cd84:	7f af       	std	Y+63, r23	; 0x3f
    cd86:	6e af       	std	Y+62, r22	; 0x3e
    cd88:	eb 97       	sbiw	r28, 0x3b	; 59
    cd8a:	ce 01       	movw	r24, r28
    cd8c:	87 58       	subi	r24, 0x87	; 135
    cd8e:	9f 4f       	sbci	r25, 0xFF	; 255
    cd90:	0e 94 44 48 	call	0x9088	; 0x9088 <get_ldnumber>
    cd94:	42 e0       	ldi	r20, 0x02	; 2
    cd96:	be 01       	movw	r22, r28
    cd98:	6b 58       	subi	r22, 0x8B	; 139
    cd9a:	7f 4f       	sbci	r23, 0xFF	; 255
    cd9c:	ce 01       	movw	r24, r28
    cd9e:	89 58       	subi	r24, 0x89	; 137
    cda0:	9f 4f       	sbci	r25, 0xFF	; 255
    cda2:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    cda6:	00 97       	sbiw	r24, 0x00	; 0
    cda8:	09 f0       	breq	.+2      	; 0xcdac <f_rename+0x3e>
    cdaa:	eb c0       	rjmp	.+470    	; 0xcf82 <f_rename+0x214>
    cdac:	e7 96       	adiw	r28, 0x37	; 55
    cdae:	8e ad       	ldd	r24, Y+62	; 0x3e
    cdb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdb2:	e7 97       	sbiw	r28, 0x37	; 55
    cdb4:	98 ab       	std	Y+48, r25	; 0x30
    cdb6:	8f a7       	std	Y+47, r24	; 0x2f
    cdb8:	80 e0       	ldi	r24, 0x00	; 0
    cdba:	92 e0       	ldi	r25, 0x02	; 2
    cdbc:	73 d7       	rcall	.+3814   	; 0xdca4 <ff_memalloc>
    cdbe:	6c 01       	movw	r12, r24
    cdc0:	00 97       	sbiw	r24, 0x00	; 0
    cdc2:	09 f4       	brne	.+2      	; 0xcdc6 <f_rename+0x58>
    cdc4:	3f c0       	rjmp	.+126    	; 0xce44 <f_rename+0xd6>
    cdc6:	e7 96       	adiw	r28, 0x37	; 55
    cdc8:	ee ad       	ldd	r30, Y+62	; 0x3e
    cdca:	ff ad       	ldd	r31, Y+63	; 0x3f
    cdcc:	e7 97       	sbiw	r28, 0x37	; 55
    cdce:	94 87       	std	Z+12, r25	; 0x0c
    cdd0:	83 87       	std	Z+11, r24	; 0x0b
    cdd2:	e9 96       	adiw	r28, 0x39	; 57
    cdd4:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdd6:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdd8:	e9 97       	sbiw	r28, 0x39	; 57
    cdda:	ce 01       	movw	r24, r28
    cddc:	8f 96       	adiw	r24, 0x2f	; 47
    cdde:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    cde2:	8c 01       	movw	r16, r24
    cde4:	89 2b       	or	r24, r25
    cde6:	51 f5       	brne	.+84     	; 0xce3c <f_rename+0xce>
    cde8:	67 96       	adiw	r28, 0x17	; 23
    cdea:	8f ad       	ldd	r24, Y+63	; 0x3f
    cdec:	67 97       	sbiw	r28, 0x17	; 23
    cdee:	80 7a       	andi	r24, 0xA0	; 160
    cdf0:	09 f0       	breq	.+2      	; 0xcdf4 <f_rename+0x86>
    cdf2:	ae c0       	rjmp	.+348    	; 0xcf50 <f_rename+0x1e2>
    cdf4:	2b 96       	adiw	r28, 0x0b	; 11
    cdf6:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdf8:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdfa:	2b 97       	sbiw	r28, 0x0b	; 11
    cdfc:	65 5f       	subi	r22, 0xF5	; 245
    cdfe:	7f 4f       	sbci	r23, 0xFF	; 255
    ce00:	45 e1       	ldi	r20, 0x15	; 21
    ce02:	50 e0       	ldi	r21, 0x00	; 0
    ce04:	ce 01       	movw	r24, r28
    ce06:	83 5a       	subi	r24, 0xA3	; 163
    ce08:	9f 4f       	sbci	r25, 0xFF	; 255
    ce0a:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    ce0e:	4e e2       	ldi	r20, 0x2E	; 46
    ce10:	50 e0       	ldi	r21, 0x00	; 0
    ce12:	be 01       	movw	r22, r28
    ce14:	61 5d       	subi	r22, 0xD1	; 209
    ce16:	7f 4f       	sbci	r23, 0xFF	; 255
    ce18:	ce 01       	movw	r24, r28
    ce1a:	01 96       	adiw	r24, 0x01	; 1
    ce1c:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    ce20:	eb 96       	adiw	r28, 0x3b	; 59
    ce22:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce24:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce26:	eb 97       	sbiw	r28, 0x3b	; 59
    ce28:	ce 01       	movw	r24, r28
    ce2a:	01 96       	adiw	r24, 0x01	; 1
    ce2c:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    ce30:	8c 01       	movw	r16, r24
    ce32:	89 2b       	or	r24, r25
    ce34:	51 f0       	breq	.+20     	; 0xce4a <f_rename+0xdc>
    ce36:	04 30       	cpi	r16, 0x04	; 4
    ce38:	11 05       	cpc	r17, r1
    ce3a:	29 f1       	breq	.+74     	; 0xce86 <f_rename+0x118>
    ce3c:	c6 01       	movw	r24, r12
    ce3e:	35 d7       	rcall	.+3690   	; 0xdcaa <ff_memfree>
    ce40:	c8 01       	movw	r24, r16
    ce42:	9f c0       	rjmp	.+318    	; 0xcf82 <f_rename+0x214>
    ce44:	81 e1       	ldi	r24, 0x11	; 17
    ce46:	90 e0       	ldi	r25, 0x00	; 0
    ce48:	9c c0       	rjmp	.+312    	; 0xcf82 <f_rename+0x214>
    ce4a:	4f 81       	ldd	r20, Y+7	; 0x07
    ce4c:	58 85       	ldd	r21, Y+8	; 0x08
    ce4e:	69 85       	ldd	r22, Y+9	; 0x09
    ce50:	7a 85       	ldd	r23, Y+10	; 0x0a
    ce52:	8d a9       	ldd	r24, Y+53	; 0x35
    ce54:	9e a9       	ldd	r25, Y+54	; 0x36
    ce56:	af a9       	ldd	r26, Y+55	; 0x37
    ce58:	b8 ad       	ldd	r27, Y+56	; 0x38
    ce5a:	48 17       	cp	r20, r24
    ce5c:	59 07       	cpc	r21, r25
    ce5e:	6a 07       	cpc	r22, r26
    ce60:	7b 07       	cpc	r23, r27
    ce62:	09 f0       	breq	.+2      	; 0xce66 <f_rename+0xf8>
    ce64:	88 c0       	rjmp	.+272    	; 0xcf76 <f_rename+0x208>
    ce66:	4f 85       	ldd	r20, Y+15	; 0x0f
    ce68:	58 89       	ldd	r21, Y+16	; 0x10
    ce6a:	69 89       	ldd	r22, Y+17	; 0x11
    ce6c:	7a 89       	ldd	r23, Y+18	; 0x12
    ce6e:	21 96       	adiw	r28, 0x01	; 1
    ce70:	8c ad       	ldd	r24, Y+60	; 0x3c
    ce72:	9d ad       	ldd	r25, Y+61	; 0x3d
    ce74:	ae ad       	ldd	r26, Y+62	; 0x3e
    ce76:	bf ad       	ldd	r27, Y+63	; 0x3f
    ce78:	21 97       	sbiw	r28, 0x01	; 1
    ce7a:	48 17       	cp	r20, r24
    ce7c:	59 07       	cpc	r21, r25
    ce7e:	6a 07       	cpc	r22, r26
    ce80:	7b 07       	cpc	r23, r27
    ce82:	09 f0       	breq	.+2      	; 0xce86 <f_rename+0x118>
    ce84:	78 c0       	rjmp	.+240    	; 0xcf76 <f_rename+0x208>
    ce86:	ce 01       	movw	r24, r28
    ce88:	01 96       	adiw	r24, 0x01	; 1
    ce8a:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <dir_register>
    ce8e:	8c 01       	movw	r16, r24
    ce90:	89 2b       	or	r24, r25
    ce92:	a1 f6       	brne	.-88     	; 0xce3c <f_rename+0xce>
    ce94:	eb 8c       	ldd	r14, Y+27	; 0x1b
    ce96:	fc 8c       	ldd	r15, Y+28	; 0x1c
    ce98:	6d e5       	ldi	r22, 0x5D	; 93
    ce9a:	70 e0       	ldi	r23, 0x00	; 0
    ce9c:	6c 0f       	add	r22, r28
    ce9e:	7d 1f       	adc	r23, r29
    cea0:	6e 5f       	subi	r22, 0xFE	; 254
    cea2:	7f 4f       	sbci	r23, 0xFF	; 255
    cea4:	43 e1       	ldi	r20, 0x13	; 19
    cea6:	50 e0       	ldi	r21, 0x00	; 0
    cea8:	c7 01       	movw	r24, r14
    ceaa:	0d 96       	adiw	r24, 0x0d	; 13
    ceac:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>
    ceb0:	6e 96       	adiw	r28, 0x1e	; 30
    ceb2:	8f ad       	ldd	r24, Y+63	; 0x3f
    ceb4:	6e 97       	sbiw	r28, 0x1e	; 30
    ceb6:	80 62       	ori	r24, 0x20	; 32
    ceb8:	f7 01       	movw	r30, r14
    ceba:	83 87       	std	Z+11, r24	; 0x0b
    cebc:	e7 96       	adiw	r28, 0x37	; 55
    cebe:	0e ad       	ldd	r16, Y+62	; 0x3e
    cec0:	1f ad       	ldd	r17, Y+63	; 0x3f
    cec2:	e7 97       	sbiw	r28, 0x37	; 55
    cec4:	bb 24       	eor	r11, r11
    cec6:	b3 94       	inc	r11
    cec8:	f8 01       	movw	r30, r16
    ceca:	b3 82       	std	Z+3, r11	; 0x03
    cecc:	f7 01       	movw	r30, r14
    cece:	83 85       	ldd	r24, Z+11	; 0x0b
    ced0:	84 ff       	sbrs	r24, 4
    ced2:	41 c0       	rjmp	.+130    	; 0xcf56 <f_rename+0x1e8>
    ced4:	4d a9       	ldd	r20, Y+53	; 0x35
    ced6:	5e a9       	ldd	r21, Y+54	; 0x36
    ced8:	6f a9       	ldd	r22, Y+55	; 0x37
    ceda:	78 ad       	ldd	r23, Y+56	; 0x38
    cedc:	8f 81       	ldd	r24, Y+7	; 0x07
    cede:	98 85       	ldd	r25, Y+8	; 0x08
    cee0:	a9 85       	ldd	r26, Y+9	; 0x09
    cee2:	ba 85       	ldd	r27, Y+10	; 0x0a
    cee4:	48 17       	cp	r20, r24
    cee6:	59 07       	cpc	r21, r25
    cee8:	6a 07       	cpc	r22, r26
    ceea:	7b 07       	cpc	r23, r27
    ceec:	a1 f1       	breq	.+104    	; 0xcf56 <f_rename+0x1e8>
    ceee:	b7 01       	movw	r22, r14
    cef0:	f8 01       	movw	r30, r16
    cef2:	80 81       	ld	r24, Z
    cef4:	0e 94 9c 48 	call	0x9138	; 0x9138 <ld_clust.isra.1>
    cef8:	ab 01       	movw	r20, r22
    cefa:	bc 01       	movw	r22, r24
    cefc:	c8 01       	movw	r24, r16
    cefe:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <clust2sect>
    cf02:	ab 01       	movw	r20, r22
    cf04:	bc 01       	movw	r22, r24
    cf06:	41 15       	cp	r20, r1
    cf08:	51 05       	cpc	r21, r1
    cf0a:	61 05       	cpc	r22, r1
    cf0c:	71 05       	cpc	r23, r1
    cf0e:	b1 f1       	breq	.+108    	; 0xcf7c <f_rename+0x20e>
    cf10:	c8 01       	movw	r24, r16
    cf12:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    cf16:	8c 01       	movw	r16, r24
    cf18:	89 2b       	or	r24, r25
    cf1a:	09 f0       	breq	.+2      	; 0xcf1e <f_rename+0x1b0>
    cf1c:	8f cf       	rjmp	.-226    	; 0xce3c <f_rename+0xce>
    cf1e:	e7 96       	adiw	r28, 0x37	; 55
    cf20:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf22:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf24:	e7 97       	sbiw	r28, 0x37	; 55
    cf26:	fc 01       	movw	r30, r24
    cf28:	ea 5a       	subi	r30, 0xAA	; 170
    cf2a:	ff 4f       	sbci	r31, 0xFF	; 255
    cf2c:	20 81       	ld	r18, Z
    cf2e:	2e 32       	cpi	r18, 0x2E	; 46
    cf30:	91 f4       	brne	.+36     	; 0xcf56 <f_rename+0x1e8>
    cf32:	2f 81       	ldd	r18, Y+7	; 0x07
    cf34:	38 85       	ldd	r19, Y+8	; 0x08
    cf36:	49 85       	ldd	r20, Y+9	; 0x09
    cf38:	5a 85       	ldd	r21, Y+10	; 0x0a
    cf3a:	bc 01       	movw	r22, r24
    cf3c:	6b 5a       	subi	r22, 0xAB	; 171
    cf3e:	7f 4f       	sbci	r23, 0xFF	; 255
    cf40:	0e 94 b1 48 	call	0x9162	; 0x9162 <st_clust.isra.2>
    cf44:	e7 96       	adiw	r28, 0x37	; 55
    cf46:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf48:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf4a:	e7 97       	sbiw	r28, 0x37	; 55
    cf4c:	b3 82       	std	Z+3, r11	; 0x03
    cf4e:	03 c0       	rjmp	.+6      	; 0xcf56 <f_rename+0x1e8>
    cf50:	06 e0       	ldi	r16, 0x06	; 6
    cf52:	10 e0       	ldi	r17, 0x00	; 0
    cf54:	73 cf       	rjmp	.-282    	; 0xce3c <f_rename+0xce>
    cf56:	ce 01       	movw	r24, r28
    cf58:	8f 96       	adiw	r24, 0x2f	; 47
    cf5a:	0e 94 87 53 	call	0xa70e	; 0xa70e <dir_remove>
    cf5e:	8c 01       	movw	r16, r24
    cf60:	89 2b       	or	r24, r25
    cf62:	09 f0       	breq	.+2      	; 0xcf66 <f_rename+0x1f8>
    cf64:	6b cf       	rjmp	.-298    	; 0xce3c <f_rename+0xce>
    cf66:	e7 96       	adiw	r28, 0x37	; 55
    cf68:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf6c:	e7 97       	sbiw	r28, 0x37	; 55
    cf6e:	0e 94 18 49 	call	0x9230	; 0x9230 <sync_fs>
    cf72:	8c 01       	movw	r16, r24
    cf74:	63 cf       	rjmp	.-314    	; 0xce3c <f_rename+0xce>
    cf76:	08 e0       	ldi	r16, 0x08	; 8
    cf78:	10 e0       	ldi	r17, 0x00	; 0
    cf7a:	60 cf       	rjmp	.-320    	; 0xce3c <f_rename+0xce>
    cf7c:	02 e0       	ldi	r16, 0x02	; 2
    cf7e:	10 e0       	ldi	r17, 0x00	; 0
    cf80:	5d cf       	rjmp	.-326    	; 0xce3c <f_rename+0xce>
    cf82:	c6 58       	subi	r28, 0x86	; 134
    cf84:	df 4f       	sbci	r29, 0xFF	; 255
    cf86:	e9 e0       	ldi	r30, 0x09	; 9
    cf88:	0c 94 2a ed 	jmp	0x1da54	; 0x1da54 <__epilogue_restores__+0x12>

0000cf8c <f_chmod>:
    cf8c:	a2 e3       	ldi	r26, 0x32	; 50
    cf8e:	b0 e0       	ldi	r27, 0x00	; 0
    cf90:	ec ec       	ldi	r30, 0xCC	; 204
    cf92:	f7 e6       	ldi	r31, 0x67	; 103
    cf94:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    cf98:	9a ab       	std	Y+50, r25	; 0x32
    cf9a:	89 ab       	std	Y+49, r24	; 0x31
    cf9c:	e6 2e       	mov	r14, r22
    cf9e:	f4 2e       	mov	r15, r20
    cfa0:	42 e0       	ldi	r20, 0x02	; 2
    cfa2:	be 01       	movw	r22, r28
    cfa4:	61 5d       	subi	r22, 0xD1	; 209
    cfa6:	7f 4f       	sbci	r23, 0xFF	; 255
    cfa8:	ce 01       	movw	r24, r28
    cfaa:	c1 96       	adiw	r24, 0x31	; 49
    cfac:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    cfb0:	2f a5       	ldd	r18, Y+47	; 0x2f
    cfb2:	38 a9       	ldd	r19, Y+48	; 0x30
    cfb4:	3a 83       	std	Y+2, r19	; 0x02
    cfb6:	29 83       	std	Y+1, r18	; 0x01
    cfb8:	00 97       	sbiw	r24, 0x00	; 0
    cfba:	89 f5       	brne	.+98     	; 0xd01e <f_chmod+0x92>
    cfbc:	80 e0       	ldi	r24, 0x00	; 0
    cfbe:	92 e0       	ldi	r25, 0x02	; 2
    cfc0:	71 d6       	rcall	.+3298   	; 0xdca4 <ff_memalloc>
    cfc2:	6c 01       	movw	r12, r24
    cfc4:	00 97       	sbiw	r24, 0x00	; 0
    cfc6:	b1 f0       	breq	.+44     	; 0xcff4 <f_chmod+0x68>
    cfc8:	ef a5       	ldd	r30, Y+47	; 0x2f
    cfca:	f8 a9       	ldd	r31, Y+48	; 0x30
    cfcc:	94 87       	std	Z+12, r25	; 0x0c
    cfce:	83 87       	std	Z+11, r24	; 0x0b
    cfd0:	69 a9       	ldd	r22, Y+49	; 0x31
    cfd2:	7a a9       	ldd	r23, Y+50	; 0x32
    cfd4:	ce 01       	movw	r24, r28
    cfd6:	01 96       	adiw	r24, 0x01	; 1
    cfd8:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    cfdc:	8c 01       	movw	r16, r24
    cfde:	89 2b       	or	r24, r25
    cfe0:	29 f4       	brne	.+10     	; 0xcfec <f_chmod+0x60>
    cfe2:	88 a5       	ldd	r24, Y+40	; 0x28
    cfe4:	80 7a       	andi	r24, 0xA0	; 160
    cfe6:	49 f0       	breq	.+18     	; 0xcffa <f_chmod+0x6e>
    cfe8:	06 e0       	ldi	r16, 0x06	; 6
    cfea:	10 e0       	ldi	r17, 0x00	; 0
    cfec:	c6 01       	movw	r24, r12
    cfee:	5d d6       	rcall	.+3258   	; 0xdcaa <ff_memfree>
    cff0:	c8 01       	movw	r24, r16
    cff2:	15 c0       	rjmp	.+42     	; 0xd01e <f_chmod+0x92>
    cff4:	81 e1       	ldi	r24, 0x11	; 17
    cff6:	90 e0       	ldi	r25, 0x00	; 0
    cff8:	12 c0       	rjmp	.+36     	; 0xd01e <f_chmod+0x92>
    cffa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cffc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cffe:	83 85       	ldd	r24, Z+11	; 0x0b
    d000:	6e 2d       	mov	r22, r14
    d002:	68 27       	eor	r22, r24
    d004:	6f 21       	and	r22, r15
    d006:	67 72       	andi	r22, 0x27	; 39
    d008:	68 27       	eor	r22, r24
    d00a:	63 87       	std	Z+11, r22	; 0x0b
    d00c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d00e:	98 a9       	ldd	r25, Y+48	; 0x30
    d010:	21 e0       	ldi	r18, 0x01	; 1
    d012:	fc 01       	movw	r30, r24
    d014:	23 83       	std	Z+3, r18	; 0x03
    d016:	0e 94 18 49 	call	0x9230	; 0x9230 <sync_fs>
    d01a:	8c 01       	movw	r16, r24
    d01c:	e7 cf       	rjmp	.-50     	; 0xcfec <f_chmod+0x60>
    d01e:	e2 96       	adiw	r28, 0x32	; 50
    d020:	e8 e0       	ldi	r30, 0x08	; 8
    d022:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000d026 <f_utime>:
    d026:	a2 e3       	ldi	r26, 0x32	; 50
    d028:	b0 e0       	ldi	r27, 0x00	; 0
    d02a:	e9 e1       	ldi	r30, 0x19	; 25
    d02c:	f8 e6       	ldi	r31, 0x68	; 104
    d02e:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    d032:	9a ab       	std	Y+50, r25	; 0x32
    d034:	89 ab       	std	Y+49, r24	; 0x31
    d036:	6b 01       	movw	r12, r22
    d038:	42 e0       	ldi	r20, 0x02	; 2
    d03a:	be 01       	movw	r22, r28
    d03c:	61 5d       	subi	r22, 0xD1	; 209
    d03e:	7f 4f       	sbci	r23, 0xFF	; 255
    d040:	ce 01       	movw	r24, r28
    d042:	c1 96       	adiw	r24, 0x31	; 49
    d044:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    d048:	2f a5       	ldd	r18, Y+47	; 0x2f
    d04a:	38 a9       	ldd	r19, Y+48	; 0x30
    d04c:	3a 83       	std	Y+2, r19	; 0x02
    d04e:	29 83       	std	Y+1, r18	; 0x01
    d050:	00 97       	sbiw	r24, 0x00	; 0
    d052:	09 f0       	breq	.+2      	; 0xd056 <f_utime+0x30>
    d054:	3d c0       	rjmp	.+122    	; 0xd0d0 <f_utime+0xaa>
    d056:	80 e0       	ldi	r24, 0x00	; 0
    d058:	92 e0       	ldi	r25, 0x02	; 2
    d05a:	24 d6       	rcall	.+3144   	; 0xdca4 <ff_memalloc>
    d05c:	7c 01       	movw	r14, r24
    d05e:	00 97       	sbiw	r24, 0x00	; 0
    d060:	b1 f0       	breq	.+44     	; 0xd08e <f_utime+0x68>
    d062:	ef a5       	ldd	r30, Y+47	; 0x2f
    d064:	f8 a9       	ldd	r31, Y+48	; 0x30
    d066:	94 87       	std	Z+12, r25	; 0x0c
    d068:	83 87       	std	Z+11, r24	; 0x0b
    d06a:	69 a9       	ldd	r22, Y+49	; 0x31
    d06c:	7a a9       	ldd	r23, Y+50	; 0x32
    d06e:	ce 01       	movw	r24, r28
    d070:	01 96       	adiw	r24, 0x01	; 1
    d072:	0e 94 8a 56 	call	0xad14	; 0xad14 <follow_path>
    d076:	8c 01       	movw	r16, r24
    d078:	89 2b       	or	r24, r25
    d07a:	29 f4       	brne	.+10     	; 0xd086 <f_utime+0x60>
    d07c:	88 a5       	ldd	r24, Y+40	; 0x28
    d07e:	80 7a       	andi	r24, 0xA0	; 160
    d080:	49 f0       	breq	.+18     	; 0xd094 <f_utime+0x6e>
    d082:	06 e0       	ldi	r16, 0x06	; 6
    d084:	10 e0       	ldi	r17, 0x00	; 0
    d086:	c7 01       	movw	r24, r14
    d088:	10 d6       	rcall	.+3104   	; 0xdcaa <ff_memfree>
    d08a:	c8 01       	movw	r24, r16
    d08c:	21 c0       	rjmp	.+66     	; 0xd0d0 <f_utime+0xaa>
    d08e:	81 e1       	ldi	r24, 0x11	; 17
    d090:	90 e0       	ldi	r25, 0x00	; 0
    d092:	1e c0       	rjmp	.+60     	; 0xd0d0 <f_utime+0xaa>
    d094:	f6 01       	movw	r30, r12
    d096:	44 81       	ldd	r20, Z+4	; 0x04
    d098:	55 81       	ldd	r21, Z+5	; 0x05
    d09a:	60 e0       	ldi	r22, 0x00	; 0
    d09c:	70 e0       	ldi	r23, 0x00	; 0
    d09e:	ba 01       	movw	r22, r20
    d0a0:	55 27       	eor	r21, r21
    d0a2:	44 27       	eor	r20, r20
    d0a4:	86 81       	ldd	r24, Z+6	; 0x06
    d0a6:	97 81       	ldd	r25, Z+7	; 0x07
    d0a8:	a0 e0       	ldi	r26, 0x00	; 0
    d0aa:	b0 e0       	ldi	r27, 0x00	; 0
    d0ac:	48 2b       	or	r20, r24
    d0ae:	59 2b       	or	r21, r25
    d0b0:	6a 2b       	or	r22, r26
    d0b2:	7b 2b       	or	r23, r27
    d0b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d0b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d0b8:	46 96       	adiw	r24, 0x16	; 22
    d0ba:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    d0be:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0c0:	98 a9       	ldd	r25, Y+48	; 0x30
    d0c2:	21 e0       	ldi	r18, 0x01	; 1
    d0c4:	fc 01       	movw	r30, r24
    d0c6:	23 83       	std	Z+3, r18	; 0x03
    d0c8:	0e 94 18 49 	call	0x9230	; 0x9230 <sync_fs>
    d0cc:	8c 01       	movw	r16, r24
    d0ce:	db cf       	rjmp	.-74     	; 0xd086 <f_utime+0x60>
    d0d0:	e2 96       	adiw	r28, 0x32	; 50
    d0d2:	e8 e0       	ldi	r30, 0x08	; 8
    d0d4:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000d0d8 <f_getlabel>:
    d0d8:	a2 e3       	ldi	r26, 0x32	; 50
    d0da:	b0 e0       	ldi	r27, 0x00	; 0
    d0dc:	e2 e7       	ldi	r30, 0x72	; 114
    d0de:	f8 e6       	ldi	r31, 0x68	; 104
    d0e0:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    d0e4:	9a ab       	std	Y+50, r25	; 0x32
    d0e6:	89 ab       	std	Y+49, r24	; 0x31
    d0e8:	7b 01       	movw	r14, r22
    d0ea:	6a 01       	movw	r12, r20
    d0ec:	40 e0       	ldi	r20, 0x00	; 0
    d0ee:	be 01       	movw	r22, r28
    d0f0:	61 5d       	subi	r22, 0xD1	; 209
    d0f2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0f4:	ce 01       	movw	r24, r28
    d0f6:	c1 96       	adiw	r24, 0x31	; 49
    d0f8:	0e 94 04 4a 	call	0x9408	; 0x9408 <find_volume>
    d0fc:	8c 01       	movw	r16, r24
    d0fe:	89 2b       	or	r24, r25
    d100:	09 f0       	breq	.+2      	; 0xd104 <f_getlabel+0x2c>
    d102:	5f c0       	rjmp	.+190    	; 0xd1c2 <f_getlabel+0xea>
    d104:	e1 14       	cp	r14, r1
    d106:	f1 04       	cpc	r15, r1
    d108:	91 f1       	breq	.+100    	; 0xd16e <f_getlabel+0x96>
    d10a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d10c:	98 a9       	ldd	r25, Y+48	; 0x30
    d10e:	9a 83       	std	Y+2, r25	; 0x02
    d110:	89 83       	std	Y+1, r24	; 0x01
    d112:	1f 82       	std	Y+7, r1	; 0x07
    d114:	18 86       	std	Y+8, r1	; 0x08
    d116:	19 86       	std	Y+9, r1	; 0x09
    d118:	1a 86       	std	Y+10, r1	; 0x0a
    d11a:	40 e0       	ldi	r20, 0x00	; 0
    d11c:	50 e0       	ldi	r21, 0x00	; 0
    d11e:	ba 01       	movw	r22, r20
    d120:	ce 01       	movw	r24, r28
    d122:	01 96       	adiw	r24, 0x01	; 1
    d124:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <dir_sdi>
    d128:	00 97       	sbiw	r24, 0x00	; 0
    d12a:	e1 f4       	brne	.+56     	; 0xd164 <f_getlabel+0x8c>
    d12c:	61 e0       	ldi	r22, 0x01	; 1
    d12e:	70 e0       	ldi	r23, 0x00	; 0
    d130:	ce 01       	movw	r24, r28
    d132:	01 96       	adiw	r24, 0x01	; 1
    d134:	0e 94 b9 52 	call	0xa572	; 0xa572 <dir_read>
    d138:	00 97       	sbiw	r24, 0x00	; 0
    d13a:	a1 f4       	brne	.+40     	; 0xd164 <f_getlabel+0x8c>
    d13c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d13e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d140:	cf 01       	movw	r24, r30
    d142:	0b 96       	adiw	r24, 0x0b	; 11
    d144:	d7 01       	movw	r26, r14
    d146:	21 91       	ld	r18, Z+
    d148:	2d 93       	st	X+, r18
    d14a:	e8 17       	cp	r30, r24
    d14c:	f9 07       	cpc	r31, r25
    d14e:	d9 f7       	brne	.-10     	; 0xd146 <f_getlabel+0x6e>
    d150:	f7 01       	movw	r30, r14
    d152:	3b 96       	adiw	r30, 0x0b	; 11
    d154:	10 82       	st	Z, r1
    d156:	ee 16       	cp	r14, r30
    d158:	ff 06       	cpc	r15, r31
    d15a:	49 f0       	breq	.+18     	; 0xd16e <f_getlabel+0x96>
    d15c:	82 91       	ld	r24, -Z
    d15e:	80 32       	cpi	r24, 0x20	; 32
    d160:	c9 f3       	breq	.-14     	; 0xd154 <f_getlabel+0x7c>
    d162:	05 c0       	rjmp	.+10     	; 0xd16e <f_getlabel+0x96>
    d164:	84 30       	cpi	r24, 0x04	; 4
    d166:	91 05       	cpc	r25, r1
    d168:	59 f5       	brne	.+86     	; 0xd1c0 <f_getlabel+0xe8>
    d16a:	f7 01       	movw	r30, r14
    d16c:	10 82       	st	Z, r1
    d16e:	c1 14       	cp	r12, r1
    d170:	d1 04       	cpc	r13, r1
    d172:	39 f1       	breq	.+78     	; 0xd1c2 <f_getlabel+0xea>
    d174:	8f a5       	ldd	r24, Y+47	; 0x2f
    d176:	98 a9       	ldd	r25, Y+48	; 0x30
    d178:	fc 01       	movw	r30, r24
    d17a:	41 a1       	ldd	r20, Z+33	; 0x21
    d17c:	52 a1       	ldd	r21, Z+34	; 0x22
    d17e:	63 a1       	ldd	r22, Z+35	; 0x23
    d180:	74 a1       	ldd	r23, Z+36	; 0x24
    d182:	0e 94 84 49 	call	0x9308	; 0x9308 <move_window>
    d186:	8c 01       	movw	r16, r24
    d188:	89 2b       	or	r24, r25
    d18a:	d9 f4       	brne	.+54     	; 0xd1c2 <f_getlabel+0xea>
    d18c:	ef a5       	ldd	r30, Y+47	; 0x2f
    d18e:	f8 a9       	ldd	r31, Y+48	; 0x30
    d190:	80 81       	ld	r24, Z
    d192:	83 30       	cpi	r24, 0x03	; 3
    d194:	29 f0       	breq	.+10     	; 0xd1a0 <f_getlabel+0xc8>
    d196:	84 30       	cpi	r24, 0x04	; 4
    d198:	31 f0       	breq	.+12     	; 0xd1a6 <f_getlabel+0xce>
    d19a:	87 e2       	ldi	r24, 0x27	; 39
    d19c:	90 e0       	ldi	r25, 0x00	; 0
    d19e:	05 c0       	rjmp	.+10     	; 0xd1aa <f_getlabel+0xd2>
    d1a0:	83 e4       	ldi	r24, 0x43	; 67
    d1a2:	90 e0       	ldi	r25, 0x00	; 0
    d1a4:	02 c0       	rjmp	.+4      	; 0xd1aa <f_getlabel+0xd2>
    d1a6:	84 e6       	ldi	r24, 0x64	; 100
    d1a8:	90 e0       	ldi	r25, 0x00	; 0
    d1aa:	f5 96       	adiw	r30, 0x35	; 53
    d1ac:	8e 0f       	add	r24, r30
    d1ae:	9f 1f       	adc	r25, r31
    d1b0:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <ld_dword>
    d1b4:	f6 01       	movw	r30, r12
    d1b6:	60 83       	st	Z, r22
    d1b8:	71 83       	std	Z+1, r23	; 0x01
    d1ba:	82 83       	std	Z+2, r24	; 0x02
    d1bc:	93 83       	std	Z+3, r25	; 0x03
    d1be:	01 c0       	rjmp	.+2      	; 0xd1c2 <f_getlabel+0xea>
    d1c0:	8c 01       	movw	r16, r24
    d1c2:	c8 01       	movw	r24, r16
    d1c4:	e2 96       	adiw	r28, 0x32	; 50
    d1c6:	e8 e0       	ldi	r30, 0x08	; 8
    d1c8:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000d1cc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
    d1cc:	a2 e4       	ldi	r26, 0x42	; 66
    d1ce:	b0 e0       	ldi	r27, 0x00	; 0
    d1d0:	ec ee       	ldi	r30, 0xEC	; 236
    d1d2:	f8 e6       	ldi	r31, 0x68	; 104
    d1d4:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    d1d8:	9a 87       	std	Y+10, r25	; 0x0a
    d1da:	89 87       	std	Y+9, r24	; 0x09
    d1dc:	e6 2e       	mov	r14, r22
    d1de:	49 01       	movw	r8, r18
    d1e0:	5a 01       	movw	r10, r20
    d1e2:	68 01       	movw	r12, r16
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    d1e4:	ce 01       	movw	r24, r28
    d1e6:	09 96       	adiw	r24, 0x09	; 9
    d1e8:	0e 94 44 48 	call	0x9088	; 0x9088 <get_ldnumber>
    d1ec:	1c 01       	movw	r2, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    d1ee:	97 fd       	sbrc	r25, 7
    d1f0:	39 c5       	rjmp	.+2674   	; 0xdc64 <f_mkfs+0xa98>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
    d1f2:	fc 01       	movw	r30, r24
    d1f4:	ee 0f       	add	r30, r30
    d1f6:	ff 1f       	adc	r31, r31
    d1f8:	ee 5a       	subi	r30, 0xAE	; 174
    d1fa:	f7 4e       	sbci	r31, 0xE7	; 231
    d1fc:	01 90       	ld	r0, Z+
    d1fe:	f0 81       	ld	r31, Z
    d200:	e0 2d       	mov	r30, r0
    d202:	30 97       	sbiw	r30, 0x00	; 0
    d204:	09 f0       	breq	.+2      	; 0xd208 <f_mkfs+0x3c>
    d206:	10 82       	st	Z, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    d208:	2c a6       	std	Y+44, r2	; 0x2c
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
    d20a:	82 2d       	mov	r24, r2
    d20c:	d2 d5       	rcall	.+2980   	; 0xddb2 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    d20e:	80 fd       	sbrc	r24, 0
    d210:	2b c5       	rjmp	.+2646   	; 0xdc68 <f_mkfs+0xa9c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    d212:	82 fd       	sbrc	r24, 2
    d214:	2b c5       	rjmp	.+2646   	; 0xdc6c <f_mkfs+0xaa0>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
    d216:	ae 01       	movw	r20, r28
    d218:	4b 5f       	subi	r20, 0xFB	; 251
    d21a:	5f 4f       	sbci	r21, 0xFF	; 255
    d21c:	63 e0       	ldi	r22, 0x03	; 3
    d21e:	82 2d       	mov	r24, r2
    d220:	ee d5       	rcall	.+3036   	; 0xddfe <disk_ioctl>
    d222:	89 2b       	or	r24, r25
    d224:	b9 f4       	brne	.+46     	; 0xd254 <f_mkfs+0x88>
    d226:	4d 81       	ldd	r20, Y+5	; 0x05
    d228:	5e 81       	ldd	r21, Y+6	; 0x06
    d22a:	6f 81       	ldd	r22, Y+7	; 0x07
    d22c:	78 85       	ldd	r23, Y+8	; 0x08
    d22e:	db 01       	movw	r26, r22
    d230:	ca 01       	movw	r24, r20
    d232:	01 97       	sbiw	r24, 0x01	; 1
    d234:	a1 09       	sbc	r26, r1
    d236:	b1 09       	sbc	r27, r1
    d238:	81 15       	cp	r24, r1
    d23a:	00 e8       	ldi	r16, 0x80	; 128
    d23c:	90 07       	cpc	r25, r16
    d23e:	a1 05       	cpc	r26, r1
    d240:	b1 05       	cpc	r27, r1
    d242:	40 f4       	brcc	.+16     	; 0xd254 <f_mkfs+0x88>
    d244:	84 23       	and	r24, r20
    d246:	95 23       	and	r25, r21
    d248:	a6 23       	and	r26, r22
    d24a:	b7 23       	and	r27, r23
    d24c:	89 2b       	or	r24, r25
    d24e:	8a 2b       	or	r24, r26
    d250:	8b 2b       	or	r24, r27
    d252:	41 f0       	breq	.+16     	; 0xd264 <f_mkfs+0x98>
    d254:	81 e0       	ldi	r24, 0x01	; 1
    d256:	90 e0       	ldi	r25, 0x00	; 0
    d258:	a0 e0       	ldi	r26, 0x00	; 0
    d25a:	b0 e0       	ldi	r27, 0x00	; 0
    d25c:	8d 83       	std	Y+5, r24	; 0x05
    d25e:	9e 83       	std	Y+6, r25	; 0x06
    d260:	af 83       	std	Y+7, r26	; 0x07
    d262:	b8 87       	std	Y+8, r27	; 0x08
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
    d264:	81 14       	cp	r8, r1
    d266:	91 04       	cpc	r9, r1
    d268:	a1 04       	cpc	r10, r1
    d26a:	b1 04       	cpc	r11, r1
    d26c:	61 f0       	breq	.+24     	; 0xd286 <f_mkfs+0xba>
    d26e:	d5 01       	movw	r26, r10
    d270:	c4 01       	movw	r24, r8
    d272:	92 50       	subi	r25, 0x02	; 2
    d274:	a1 09       	sbc	r26, r1
    d276:	b1 09       	sbc	r27, r1
    d278:	81 30       	cpi	r24, 0x01	; 1
    d27a:	9e 4f       	sbci	r25, 0xFE	; 254
    d27c:	af 4f       	sbci	r26, 0xFF	; 255
    d27e:	b1 05       	cpc	r27, r1
    d280:	10 f0       	brcs	.+4      	; 0xd286 <f_mkfs+0xba>
    d282:	83 e1       	ldi	r24, 0x13	; 19
    d284:	f6 c4       	rjmp	.+2540   	; 0xdc72 <f_mkfs+0xaa6>
    d286:	d5 01       	movw	r26, r10
    d288:	c4 01       	movw	r24, r8
    d28a:	01 97       	sbiw	r24, 0x01	; 1
    d28c:	a1 09       	sbc	r26, r1
    d28e:	b1 09       	sbc	r27, r1
    d290:	88 21       	and	r24, r8
    d292:	99 21       	and	r25, r9
    d294:	aa 21       	and	r26, r10
    d296:	bb 21       	and	r27, r11
    d298:	89 2b       	or	r24, r25
    d29a:	8a 2b       	or	r24, r26
    d29c:	8b 2b       	or	r24, r27
    d29e:	89 f7       	brne	.-30     	; 0xd282 <f_mkfs+0xb6>
	au /= ss;	/* Cluster size in unit of sector */

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
	sz_buf = len / ss;		/* Size of working buffer (sector) */
    d2a0:	8f 2d       	mov	r24, r15
    d2a2:	86 95       	lsr	r24
    d2a4:	90 e0       	ldi	r25, 0x00	; 0
    d2a6:	9c 01       	movw	r18, r24
    d2a8:	40 e0       	ldi	r20, 0x00	; 0
    d2aa:	50 e0       	ldi	r21, 0x00	; 0
    d2ac:	2c a3       	std	Y+36, r18	; 0x24
    d2ae:	3d a3       	std	Y+37, r19	; 0x25
    d2b0:	4e a3       	std	Y+38, r20	; 0x26
    d2b2:	5f a3       	std	Y+39, r21	; 0x27
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
    d2b4:	69 e0       	ldi	r22, 0x09	; 9
    d2b6:	22 0f       	add	r18, r18
    d2b8:	33 1f       	adc	r19, r19
    d2ba:	44 1f       	adc	r20, r20
    d2bc:	55 1f       	adc	r21, r21
    d2be:	6a 95       	dec	r22
    d2c0:	d1 f7       	brne	.-12     	; 0xd2b6 <f_mkfs+0xea>
    d2c2:	2d a7       	std	Y+45, r18	; 0x2d
    d2c4:	3e a7       	std	Y+46, r19	; 0x2e
    d2c6:	4f a7       	std	Y+47, r20	; 0x2f
    d2c8:	58 ab       	std	Y+48, r21	; 0x30
	if (!szb_buf) return FR_MKFS_ABORTED;
    d2ca:	23 2b       	or	r18, r19
    d2cc:	24 2b       	or	r18, r20
    d2ce:	25 2b       	or	r18, r21
    d2d0:	11 f4       	brne	.+4      	; 0xd2d6 <f_mkfs+0x10a>
    d2d2:	8e e0       	ldi	r24, 0x0E	; 14
    d2d4:	ce c4       	rjmp	.+2460   	; 0xdc72 <f_mkfs+0xaa6>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    d2d6:	ae 01       	movw	r20, r28
    d2d8:	4f 5f       	subi	r20, 0xFF	; 255
    d2da:	5f 4f       	sbci	r21, 0xFF	; 255
    d2dc:	61 e0       	ldi	r22, 0x01	; 1
    d2de:	82 2d       	mov	r24, r2
    d2e0:	8e d5       	rcall	.+2844   	; 0xddfe <disk_ioctl>
    d2e2:	89 2b       	or	r24, r25
    d2e4:	09 f0       	breq	.+2      	; 0xd2e8 <f_mkfs+0x11c>
    d2e6:	c4 c4       	rjmp	.+2440   	; 0xdc70 <f_mkfs+0xaa4>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
    d2e8:	3e 2d       	mov	r19, r14
    d2ea:	38 70       	andi	r19, 0x08	; 8
    d2ec:	3a ab       	std	Y+50, r19	; 0x32
    d2ee:	e3 fe       	sbrs	r14, 3
    d2f0:	05 c0       	rjmp	.+10     	; 0xd2fc <f_mkfs+0x130>
    d2f2:	1c 8a       	std	Y+20, r1	; 0x14
    d2f4:	1d 8a       	std	Y+21, r1	; 0x15
    d2f6:	1e 8a       	std	Y+22, r1	; 0x16
    d2f8:	1f 8a       	std	Y+23, r1	; 0x17
    d2fa:	08 c0       	rjmp	.+16     	; 0xd30c <f_mkfs+0x140>
    d2fc:	8f e3       	ldi	r24, 0x3F	; 63
    d2fe:	90 e0       	ldi	r25, 0x00	; 0
    d300:	a0 e0       	ldi	r26, 0x00	; 0
    d302:	b0 e0       	ldi	r27, 0x00	; 0
    d304:	8c 8b       	std	Y+20, r24	; 0x14
    d306:	9d 8b       	std	Y+21, r25	; 0x15
    d308:	ae 8b       	std	Y+22, r26	; 0x16
    d30a:	bf 8b       	std	Y+23, r27	; 0x17
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
    d30c:	49 80       	ldd	r4, Y+1	; 0x01
    d30e:	5a 80       	ldd	r5, Y+2	; 0x02
    d310:	6b 80       	ldd	r6, Y+3	; 0x03
    d312:	7c 80       	ldd	r7, Y+4	; 0x04
    d314:	0c 89       	ldd	r16, Y+20	; 0x14
    d316:	1d 89       	ldd	r17, Y+21	; 0x15
    d318:	2e 89       	ldd	r18, Y+22	; 0x16
    d31a:	3f 89       	ldd	r19, Y+23	; 0x17
    d31c:	40 16       	cp	r4, r16
    d31e:	51 06       	cpc	r5, r17
    d320:	62 06       	cpc	r6, r18
    d322:	73 06       	cpc	r7, r19
    d324:	b0 f2       	brcs	.-84     	; 0xd2d2 <f_mkfs+0x106>
		sz_vol -= b_vol;						/* Volume size */
    d326:	d3 01       	movw	r26, r6
    d328:	c2 01       	movw	r24, r4
    d32a:	80 1b       	sub	r24, r16
    d32c:	91 0b       	sbc	r25, r17
    d32e:	a2 0b       	sbc	r26, r18
    d330:	b3 0b       	sbc	r27, r19
    d332:	8b 87       	std	Y+11, r24	; 0x0b
    d334:	9c 87       	std	Y+12, r25	; 0x0c
    d336:	ad 87       	std	Y+13, r26	; 0x0d
    d338:	be 87       	std	Y+14, r27	; 0x0e
    d33a:	89 83       	std	Y+1, r24	; 0x01
    d33c:	9a 83       	std	Y+2, r25	; 0x02
    d33e:	ab 83       	std	Y+3, r26	; 0x03
    d340:	bc 83       	std	Y+4, r27	; 0x04
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
    d342:	80 38       	cpi	r24, 0x80	; 128
    d344:	91 05       	cpc	r25, r1
    d346:	a1 05       	cpc	r26, r1
    d348:	b1 05       	cpc	r27, r1
    d34a:	18 f2       	brcs	.-122    	; 0xd2d2 <f_mkfs+0x106>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
	au /= ss;	/* Cluster size in unit of sector */
    d34c:	29 e0       	ldi	r18, 0x09	; 9
    d34e:	b6 94       	lsr	r11
    d350:	a7 94       	ror	r10
    d352:	97 94       	ror	r9
    d354:	87 94       	ror	r8
    d356:	2a 95       	dec	r18
    d358:	d1 f7       	brne	.-12     	; 0xd34e <f_mkfs+0x182>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
    d35a:	91 e8       	ldi	r25, 0x81	; 129
    d35c:	89 16       	cp	r8, r25
    d35e:	91 04       	cpc	r9, r1
    d360:	a1 04       	cpc	r10, r1
    d362:	b1 04       	cpc	r11, r1
    d364:	08 f0       	brcs	.+2      	; 0xd368 <f_mkfs+0x19c>
    d366:	8d cf       	rjmp	.-230    	; 0xd282 <f_mkfs+0xb6>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
    d368:	ae 2d       	mov	r26, r14
    d36a:	a2 70       	andi	r26, 0x02	; 2
    d36c:	fa 2e       	mov	r15, r26
    d36e:	e1 fe       	sbrs	r14, 1
    d370:	06 c0       	rjmp	.+12     	; 0xd37e <f_mkfs+0x1b2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
    d372:	8e 2d       	mov	r24, r14
    d374:	87 70       	andi	r24, 0x07	; 7
    d376:	82 30       	cpi	r24, 0x02	; 2
    d378:	39 f0       	breq	.+14     	; 0xd388 <f_mkfs+0x1bc>
    d37a:	e0 fe       	sbrs	r14, 0
    d37c:	08 c0       	rjmp	.+16     	; 0xd38e <f_mkfs+0x1c2>
				fmt = FS_FAT32; break;
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
    d37e:	e0 fe       	sbrs	r14, 0
    d380:	80 cf       	rjmp	.-256    	; 0xd282 <f_mkfs+0xb6>
		fmt = FS_FAT16;
    d382:	b2 e0       	ldi	r27, 0x02	; 2
    d384:	bf 87       	std	Y+15, r27	; 0x0f
    d386:	05 c0       	rjmp	.+10     	; 0xd392 <f_mkfs+0x1c6>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
		if (opt & FM_FAT32) {	/* FAT32 possible? */
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
				fmt = FS_FAT32; break;
    d388:	e3 e0       	ldi	r30, 0x03	; 3
    d38a:	ef 87       	std	Y+15, r30	; 0x0f
    d38c:	02 c0       	rjmp	.+4      	; 0xd392 <f_mkfs+0x1c6>
    d38e:	f3 e0       	ldi	r31, 0x03	; 3
    d390:	ff 87       	std	Y+15, r31	; 0x0f
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    d392:	0b 85       	ldd	r16, Y+11	; 0x0b
    d394:	1c 85       	ldd	r17, Y+12	; 0x0c
    d396:	2d 85       	ldd	r18, Y+13	; 0x0d
    d398:	3e 85       	ldd	r19, Y+14	; 0x0e
    d39a:	81 e1       	ldi	r24, 0x11	; 17
    d39c:	36 95       	lsr	r19
    d39e:	27 95       	ror	r18
    d3a0:	17 95       	ror	r17
    d3a2:	07 95       	ror	r16
    d3a4:	8a 95       	dec	r24
    d3a6:	d1 f7       	brne	.-12     	; 0xd39c <f_mkfs+0x1d0>
    d3a8:	23 96       	adiw	r28, 0x03	; 3
    d3aa:	0c af       	std	Y+60, r16	; 0x3c
    d3ac:	1d af       	std	Y+61, r17	; 0x3d
    d3ae:	2e af       	std	Y+62, r18	; 0x3e
    d3b0:	3f af       	std	Y+63, r19	; 0x3f
    d3b2:	23 97       	sbiw	r28, 0x03	; 3
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    d3b4:	0b 85       	ldd	r16, Y+11	; 0x0b
    d3b6:	1c 85       	ldd	r17, Y+12	; 0x0c
    d3b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    d3ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    d3bc:	9c e0       	ldi	r25, 0x0C	; 12
    d3be:	36 95       	lsr	r19
    d3c0:	27 95       	ror	r18
    d3c2:	17 95       	ror	r17
    d3c4:	07 95       	ror	r16
    d3c6:	9a 95       	dec	r25
    d3c8:	d1 f7       	brne	.-12     	; 0xd3be <f_mkfs+0x1f2>
    d3ca:	0b ab       	std	Y+51, r16	; 0x33
    d3cc:	1c ab       	std	Y+52, r17	; 0x34
    d3ce:	2d ab       	std	Y+53, r18	; 0x35
    d3d0:	3e ab       	std	Y+54, r19	; 0x36
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d3d2:	8d 81       	ldd	r24, Y+5	; 0x05
    d3d4:	9e 81       	ldd	r25, Y+6	; 0x06
    d3d6:	af 81       	ldd	r26, Y+7	; 0x07
    d3d8:	b8 85       	ldd	r27, Y+8	; 0x08
    d3da:	8c 01       	movw	r16, r24
    d3dc:	9d 01       	movw	r18, r26
    d3de:	01 50       	subi	r16, 0x01	; 1
    d3e0:	11 09       	sbc	r17, r1
    d3e2:	21 09       	sbc	r18, r1
    d3e4:	31 09       	sbc	r19, r1
    d3e6:	0b af       	std	Y+59, r16	; 0x3b
    d3e8:	1c af       	std	Y+60, r17	; 0x3c
    d3ea:	2d af       	std	Y+61, r18	; 0x3d
    d3ec:	3e af       	std	Y+62, r19	; 0x3e
    d3ee:	00 27       	eor	r16, r16
    d3f0:	11 27       	eor	r17, r17
    d3f2:	98 01       	movw	r18, r16
    d3f4:	08 1b       	sub	r16, r24
    d3f6:	19 0b       	sbc	r17, r25
    d3f8:	2a 0b       	sbc	r18, r26
    d3fa:	3b 0b       	sbc	r19, r27
    d3fc:	0f ab       	std	Y+55, r16	; 0x37
    d3fe:	18 af       	std	Y+56, r17	; 0x38
    d400:	29 af       	std	Y+57, r18	; 0x39
    d402:	3a af       	std	Y+58, r19	; 0x3a
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
    d404:	1f 85       	ldd	r17, Y+15	; 0x0f
    d406:	13 30       	cpi	r17, 0x03	; 3
    d408:	09 f0       	breq	.+2      	; 0xd40c <f_mkfs+0x240>
    d40a:	67 c1       	rjmp	.+718    	; 0xd6da <f_mkfs+0x50e>
				if (!pau) {	/* au auto-selection */
    d40c:	81 14       	cp	r8, r1
    d40e:	91 04       	cpc	r9, r1
    d410:	a1 04       	cpc	r10, r1
    d412:	b1 04       	cpc	r11, r1
    d414:	e1 f4       	brne	.+56     	; 0xd44e <f_mkfs+0x282>
    d416:	e3 ea       	ldi	r30, 0xA3	; 163
    d418:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d41a:	41 2c       	mov	r4, r1
    d41c:	51 2c       	mov	r5, r1
    d41e:	32 01       	movw	r6, r4
    d420:	43 94       	inc	r4
    d422:	81 91       	ld	r24, Z+
    d424:	91 91       	ld	r25, Z+
    d426:	00 97       	sbiw	r24, 0x00	; 0
    d428:	a1 f0       	breq	.+40     	; 0xd452 <f_mkfs+0x286>
    d42a:	a0 e0       	ldi	r26, 0x00	; 0
    d42c:	b0 e0       	ldi	r27, 0x00	; 0
    d42e:	23 96       	adiw	r28, 0x03	; 3
    d430:	0c ad       	ldd	r16, Y+60	; 0x3c
    d432:	1d ad       	ldd	r17, Y+61	; 0x3d
    d434:	2e ad       	ldd	r18, Y+62	; 0x3e
    d436:	3f ad       	ldd	r19, Y+63	; 0x3f
    d438:	23 97       	sbiw	r28, 0x03	; 3
    d43a:	08 17       	cp	r16, r24
    d43c:	19 07       	cpc	r17, r25
    d43e:	2a 07       	cpc	r18, r26
    d440:	3b 07       	cpc	r19, r27
    d442:	38 f0       	brcs	.+14     	; 0xd452 <f_mkfs+0x286>
    d444:	44 0c       	add	r4, r4
    d446:	55 1c       	adc	r5, r5
    d448:	66 1c       	adc	r6, r6
    d44a:	77 1c       	adc	r7, r7
    d44c:	ea cf       	rjmp	.-44     	; 0xd422 <f_mkfs+0x256>
    d44e:	24 01       	movw	r4, r8
    d450:	35 01       	movw	r6, r10
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
    d452:	6b 85       	ldd	r22, Y+11	; 0x0b
    d454:	7c 85       	ldd	r23, Y+12	; 0x0c
    d456:	8d 85       	ldd	r24, Y+13	; 0x0d
    d458:	9e 85       	ldd	r25, Y+14	; 0x0e
    d45a:	a3 01       	movw	r20, r6
    d45c:	92 01       	movw	r18, r4
    d45e:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    d462:	da 01       	movw	r26, r20
    d464:	c9 01       	movw	r24, r18
    d466:	62 e0       	ldi	r22, 0x02	; 2
    d468:	88 0f       	add	r24, r24
    d46a:	99 1f       	adc	r25, r25
    d46c:	aa 1f       	adc	r26, r26
    d46e:	bb 1f       	adc	r27, r27
    d470:	6a 95       	dec	r22
    d472:	d1 f7       	brne	.-12     	; 0xd468 <f_mkfs+0x29c>
    d474:	89 5f       	subi	r24, 0xF9	; 249
    d476:	9d 4f       	sbci	r25, 0xFD	; 253
    d478:	af 4f       	sbci	r26, 0xFF	; 255
    d47a:	bf 4f       	sbci	r27, 0xFF	; 255
    d47c:	79 e0       	ldi	r23, 0x09	; 9
    d47e:	b6 95       	lsr	r27
    d480:	a7 95       	ror	r26
    d482:	97 95       	ror	r25
    d484:	87 95       	ror	r24
    d486:	7a 95       	dec	r23
    d488:	d1 f7       	brne	.-12     	; 0xd47e <f_mkfs+0x2b2>
    d48a:	88 8b       	std	Y+16, r24	; 0x10
    d48c:	99 8b       	std	Y+17, r25	; 0x11
    d48e:	aa 8b       	std	Y+18, r26	; 0x12
    d490:	bb 8b       	std	Y+19, r27	; 0x13
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
    d492:	da 01       	movw	r26, r20
    d494:	c9 01       	movw	r24, r18
    d496:	86 5f       	subi	r24, 0xF6	; 246
    d498:	9f 4f       	sbci	r25, 0xFF	; 255
    d49a:	a1 09       	sbc	r26, r1
    d49c:	b1 09       	sbc	r27, r1
    d49e:	00 97       	sbiw	r24, 0x00	; 0
    d4a0:	af 4f       	sbci	r26, 0xFF	; 255
    d4a2:	bf 40       	sbci	r27, 0x0F	; 15
    d4a4:	08 f0       	brcs	.+2      	; 0xd4a8 <f_mkfs+0x2dc>
    d4a6:	15 cf       	rjmp	.-470    	; 0xd2d2 <f_mkfs+0x106>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
    d4a8:	1c 8e       	std	Y+28, r1	; 0x1c
    d4aa:	1d 8e       	std	Y+29, r1	; 0x1d
    d4ac:	1e 8e       	std	Y+30, r1	; 0x1e
    d4ae:	1f 8e       	std	Y+31, r1	; 0x1f
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
    d4b0:	00 e2       	ldi	r16, 0x20	; 32
    d4b2:	10 e0       	ldi	r17, 0x00	; 0
    d4b4:	20 e0       	ldi	r18, 0x00	; 0
    d4b6:	30 e0       	ldi	r19, 0x00	; 0
    d4b8:	08 a3       	std	Y+32, r16	; 0x20
    d4ba:	19 a3       	std	Y+33, r17	; 0x21
    d4bc:	2a a3       	std	Y+34, r18	; 0x22
    d4be:	3b a3       	std	Y+35, r19	; 0x23
    d4c0:	4e c0       	rjmp	.+156    	; 0xd55e <f_mkfs+0x392>
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d4c2:	a0 e0       	ldi	r26, 0x00	; 0
    d4c4:	b0 e0       	ldi	r27, 0x00	; 0
    d4c6:	0b a9       	ldd	r16, Y+51	; 0x33
    d4c8:	1c a9       	ldd	r17, Y+52	; 0x34
    d4ca:	2d a9       	ldd	r18, Y+53	; 0x35
    d4cc:	3e a9       	ldd	r19, Y+54	; 0x36
    d4ce:	08 17       	cp	r16, r24
    d4d0:	19 07       	cpc	r17, r25
    d4d2:	2a 07       	cpc	r18, r26
    d4d4:	3b 07       	cpc	r19, r27
    d4d6:	40 f0       	brcs	.+16     	; 0xd4e8 <f_mkfs+0x31c>
    d4d8:	44 0c       	add	r4, r4
    d4da:	55 1c       	adc	r5, r5
    d4dc:	66 1c       	adc	r6, r6
    d4de:	77 1c       	adc	r7, r7
    d4e0:	81 91       	ld	r24, Z+
    d4e2:	91 91       	ld	r25, Z+
    d4e4:	00 97       	sbiw	r24, 0x00	; 0
    d4e6:	69 f7       	brne	.-38     	; 0xd4c2 <f_mkfs+0x2f6>
				}
				n_clst = sz_vol / pau;
    d4e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    d4ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    d4ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    d4ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    d4f0:	a3 01       	movw	r20, r6
    d4f2:	92 01       	movw	r18, r4
    d4f4:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
				if (n_clst > MAX_FAT12) {
    d4f8:	26 3f       	cpi	r18, 0xF6	; 246
    d4fa:	1f e0       	ldi	r17, 0x0F	; 15
    d4fc:	31 07       	cpc	r19, r17
    d4fe:	41 05       	cpc	r20, r1
    d500:	51 05       	cpc	r21, r1
    d502:	08 f4       	brcc	.+2      	; 0xd506 <f_mkfs+0x33a>
    d504:	f9 c0       	rjmp	.+498    	; 0xd6f8 <f_mkfs+0x52c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    d506:	da 01       	movw	r26, r20
    d508:	c9 01       	movw	r24, r18
    d50a:	02 96       	adiw	r24, 0x02	; 2
    d50c:	a1 1d       	adc	r26, r1
    d50e:	b1 1d       	adc	r27, r1
    d510:	88 0f       	add	r24, r24
    d512:	99 1f       	adc	r25, r25
    d514:	aa 1f       	adc	r26, r26
    d516:	bb 1f       	adc	r27, r27
    d518:	22 e0       	ldi	r18, 0x02	; 2
    d51a:	2f 87       	std	Y+15, r18	; 0x0f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    d51c:	81 50       	subi	r24, 0x01	; 1
    d51e:	9e 4f       	sbci	r25, 0xFE	; 254
    d520:	af 4f       	sbci	r26, 0xFF	; 255
    d522:	bf 4f       	sbci	r27, 0xFF	; 255
    d524:	8c 01       	movw	r16, r24
    d526:	9d 01       	movw	r18, r26
    d528:	a9 e0       	ldi	r26, 0x09	; 9
    d52a:	36 95       	lsr	r19
    d52c:	27 95       	ror	r18
    d52e:	17 95       	ror	r17
    d530:	07 95       	ror	r16
    d532:	aa 95       	dec	r26
    d534:	d1 f7       	brne	.-12     	; 0xd52a <f_mkfs+0x35e>
    d536:	08 8b       	std	Y+16, r16	; 0x10
    d538:	19 8b       	std	Y+17, r17	; 0x11
    d53a:	2a 8b       	std	Y+18, r18	; 0x12
    d53c:	3b 8b       	std	Y+19, r19	; 0x13
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
    d53e:	20 e2       	ldi	r18, 0x20	; 32
    d540:	30 e0       	ldi	r19, 0x00	; 0
    d542:	40 e0       	ldi	r20, 0x00	; 0
    d544:	50 e0       	ldi	r21, 0x00	; 0
    d546:	2c 8f       	std	Y+28, r18	; 0x1c
    d548:	3d 8f       	std	Y+29, r19	; 0x1d
    d54a:	4e 8f       	std	Y+30, r20	; 0x1e
    d54c:	5f 8f       	std	Y+31, r21	; 0x1f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
    d54e:	81 e0       	ldi	r24, 0x01	; 1
    d550:	90 e0       	ldi	r25, 0x00	; 0
    d552:	a0 e0       	ldi	r26, 0x00	; 0
    d554:	b0 e0       	ldi	r27, 0x00	; 0
    d556:	88 a3       	std	Y+32, r24	; 0x20
    d558:	99 a3       	std	Y+33, r25	; 0x21
    d55a:	aa a3       	std	Y+34, r26	; 0x22
    d55c:	bb a3       	std	Y+35, r27	; 0x23
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
    d55e:	08 a1       	ldd	r16, Y+32	; 0x20
    d560:	19 a1       	ldd	r17, Y+33	; 0x21
    d562:	2a a1       	ldd	r18, Y+34	; 0x22
    d564:	3b a1       	ldd	r19, Y+35	; 0x23
    d566:	8c 89       	ldd	r24, Y+20	; 0x14
    d568:	9d 89       	ldd	r25, Y+21	; 0x15
    d56a:	ae 89       	ldd	r26, Y+22	; 0x16
    d56c:	bf 89       	ldd	r27, Y+23	; 0x17
    d56e:	08 0f       	add	r16, r24
    d570:	19 1f       	adc	r17, r25
    d572:	2a 1f       	adc	r18, r26
    d574:	3b 1f       	adc	r19, r27
    d576:	08 8f       	std	Y+24, r16	; 0x18
    d578:	19 8f       	std	Y+25, r17	; 0x19
    d57a:	2a 8f       	std	Y+26, r18	; 0x1a
    d57c:	3b 8f       	std	Y+27, r19	; 0x1b
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
    d57e:	88 89       	ldd	r24, Y+16	; 0x10
    d580:	99 89       	ldd	r25, Y+17	; 0x11
    d582:	aa 89       	ldd	r26, Y+18	; 0x12
    d584:	bb 89       	ldd	r27, Y+19	; 0x13
    d586:	0c 8d       	ldd	r16, Y+28	; 0x1c
    d588:	1d 8d       	ldd	r17, Y+29	; 0x1d
    d58a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    d58c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    d58e:	80 0f       	add	r24, r16
    d590:	91 1f       	adc	r25, r17
    d592:	a2 1f       	adc	r26, r18
    d594:	b3 1f       	adc	r27, r19
    d596:	28 8d       	ldd	r18, Y+24	; 0x18
    d598:	39 8d       	ldd	r19, Y+25	; 0x19
    d59a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d59c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d59e:	82 0f       	add	r24, r18
    d5a0:	93 1f       	adc	r25, r19
    d5a2:	a4 1f       	adc	r26, r20
    d5a4:	b5 1f       	adc	r27, r21

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d5a6:	4b ad       	ldd	r20, Y+59	; 0x3b
    d5a8:	5c ad       	ldd	r21, Y+60	; 0x3c
    d5aa:	6d ad       	ldd	r22, Y+61	; 0x3d
    d5ac:	7e ad       	ldd	r23, Y+62	; 0x3e
    d5ae:	48 0f       	add	r20, r24
    d5b0:	59 1f       	adc	r21, r25
    d5b2:	6a 1f       	adc	r22, r26
    d5b4:	7b 1f       	adc	r23, r27
    d5b6:	0f a9       	ldd	r16, Y+55	; 0x37
    d5b8:	18 ad       	ldd	r17, Y+56	; 0x38
    d5ba:	29 ad       	ldd	r18, Y+57	; 0x39
    d5bc:	3a ad       	ldd	r19, Y+58	; 0x3a
    d5be:	40 23       	and	r20, r16
    d5c0:	51 23       	and	r21, r17
    d5c2:	62 23       	and	r22, r18
    d5c4:	73 23       	and	r23, r19
    d5c6:	48 1b       	sub	r20, r24
    d5c8:	59 0b       	sbc	r21, r25
    d5ca:	6a 0b       	sbc	r22, r26
    d5cc:	7b 0b       	sbc	r23, r27
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
    d5ce:	1f 85       	ldd	r17, Y+15	; 0x0f
    d5d0:	13 30       	cpi	r17, 0x03	; 3
    d5d2:	09 f0       	breq	.+2      	; 0xd5d6 <f_mkfs+0x40a>
    d5d4:	a4 c0       	rjmp	.+328    	; 0xd71e <f_mkfs+0x552>
				sz_rsv += n; b_fat += n;
    d5d6:	08 a1       	ldd	r16, Y+32	; 0x20
    d5d8:	19 a1       	ldd	r17, Y+33	; 0x21
    d5da:	2a a1       	ldd	r18, Y+34	; 0x22
    d5dc:	3b a1       	ldd	r19, Y+35	; 0x23
    d5de:	04 0f       	add	r16, r20
    d5e0:	15 1f       	adc	r17, r21
    d5e2:	26 1f       	adc	r18, r22
    d5e4:	37 1f       	adc	r19, r23
    d5e6:	08 a3       	std	Y+32, r16	; 0x20
    d5e8:	19 a3       	std	Y+33, r17	; 0x21
    d5ea:	2a a3       	std	Y+34, r18	; 0x22
    d5ec:	3b a3       	std	Y+35, r19	; 0x23
    d5ee:	08 8d       	ldd	r16, Y+24	; 0x18
    d5f0:	19 8d       	ldd	r17, Y+25	; 0x19
    d5f2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    d5f4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    d5f6:	04 0f       	add	r16, r20
    d5f8:	15 1f       	adc	r17, r21
    d5fa:	26 1f       	adc	r18, r22
    d5fc:	37 1f       	adc	r19, r23
    d5fe:	08 8f       	std	Y+24, r16	; 0x18
    d600:	19 8f       	std	Y+25, r17	; 0x19
    d602:	2a 8f       	std	Y+26, r18	; 0x1a
    d604:	3b 8f       	std	Y+27, r19	; 0x1b
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    d606:	b3 01       	movw	r22, r6
    d608:	a2 01       	movw	r20, r4
    d60a:	f4 e0       	ldi	r31, 0x04	; 4
    d60c:	44 0f       	add	r20, r20
    d60e:	55 1f       	adc	r21, r21
    d610:	66 1f       	adc	r22, r22
    d612:	77 1f       	adc	r23, r23
    d614:	fa 95       	dec	r31
    d616:	d1 f7       	brne	.-12     	; 0xd60c <f_mkfs+0x440>
    d618:	0c 89       	ldd	r16, Y+20	; 0x14
    d61a:	1d 89       	ldd	r17, Y+21	; 0x15
    d61c:	2e 89       	ldd	r18, Y+22	; 0x16
    d61e:	3f 89       	ldd	r19, Y+23	; 0x17
    d620:	40 1b       	sub	r20, r16
    d622:	51 0b       	sbc	r21, r17
    d624:	62 0b       	sbc	r22, r18
    d626:	73 0b       	sbc	r23, r19
    d628:	84 0f       	add	r24, r20
    d62a:	95 1f       	adc	r25, r21
    d62c:	a6 1f       	adc	r26, r22
    d62e:	b7 1f       	adc	r27, r23
    d630:	0b 85       	ldd	r16, Y+11	; 0x0b
    d632:	1c 85       	ldd	r17, Y+12	; 0x0c
    d634:	2d 85       	ldd	r18, Y+13	; 0x0d
    d636:	3e 85       	ldd	r19, Y+14	; 0x0e
    d638:	08 17       	cp	r16, r24
    d63a:	19 07       	cpc	r17, r25
    d63c:	2a 07       	cpc	r18, r26
    d63e:	3b 07       	cpc	r19, r27
    d640:	08 f4       	brcc	.+2      	; 0xd644 <f_mkfs+0x478>
    d642:	47 ce       	rjmp	.-882    	; 0xd2d2 <f_mkfs+0x106>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
    d644:	d9 01       	movw	r26, r18
    d646:	c8 01       	movw	r24, r16
    d648:	28 a1       	ldd	r18, Y+32	; 0x20
    d64a:	39 a1       	ldd	r19, Y+33	; 0x21
    d64c:	4a a1       	ldd	r20, Y+34	; 0x22
    d64e:	5b a1       	ldd	r21, Y+35	; 0x23
    d650:	82 1b       	sub	r24, r18
    d652:	93 0b       	sbc	r25, r19
    d654:	a4 0b       	sbc	r26, r20
    d656:	b5 0b       	sbc	r27, r21
    d658:	08 89       	ldd	r16, Y+16	; 0x10
    d65a:	19 89       	ldd	r17, Y+17	; 0x11
    d65c:	2a 89       	ldd	r18, Y+18	; 0x12
    d65e:	3b 89       	ldd	r19, Y+19	; 0x13
    d660:	80 1b       	sub	r24, r16
    d662:	91 0b       	sbc	r25, r17
    d664:	a2 0b       	sbc	r26, r18
    d666:	b3 0b       	sbc	r27, r19
    d668:	bc 01       	movw	r22, r24
    d66a:	cd 01       	movw	r24, r26
    d66c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    d66e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    d670:	4e 8d       	ldd	r20, Y+30	; 0x1e
    d672:	5f 8d       	ldd	r21, Y+31	; 0x1f
    d674:	62 1b       	sub	r22, r18
    d676:	73 0b       	sbc	r23, r19
    d678:	84 0b       	sbc	r24, r20
    d67a:	95 0b       	sbc	r25, r21
    d67c:	a3 01       	movw	r20, r6
    d67e:	92 01       	movw	r18, r4
    d680:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
    d684:	28 a7       	std	Y+40, r18	; 0x28
    d686:	39 a7       	std	Y+41, r19	; 0x29
    d688:	4a a7       	std	Y+42, r20	; 0x2a
    d68a:	5b a7       	std	Y+43, r21	; 0x2b
			if (fmt == FS_FAT32) {
    d68c:	3f 85       	ldd	r19, Y+15	; 0x0f
    d68e:	33 30       	cpi	r19, 0x03	; 3
    d690:	09 f4       	brne	.+2      	; 0xd694 <f_mkfs+0x4c8>
    d692:	52 c0       	rjmp	.+164    	; 0xd738 <f_mkfs+0x56c>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d694:	ff 85       	ldd	r31, Y+15	; 0x0f
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d696:	08 a5       	ldd	r16, Y+40	; 0x28
    d698:	19 a5       	ldd	r17, Y+41	; 0x29
    d69a:	2a a5       	ldd	r18, Y+42	; 0x2a
    d69c:	3b a5       	ldd	r19, Y+43	; 0x2b
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d69e:	f2 30       	cpi	r31, 0x02	; 2
    d6a0:	09 f0       	breq	.+2      	; 0xd6a4 <f_mkfs+0x4d8>
    d6a2:	83 c0       	rjmp	.+262    	; 0xd7aa <f_mkfs+0x5de>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d6a4:	06 3f       	cpi	r16, 0xF6	; 246
    d6a6:	4f ef       	ldi	r20, 0xFF	; 255
    d6a8:	14 07       	cpc	r17, r20
    d6aa:	21 05       	cpc	r18, r1
    d6ac:	31 05       	cpc	r19, r1
    d6ae:	08 f4       	brcc	.+2      	; 0xd6b2 <f_mkfs+0x4e6>
    d6b0:	5f c0       	rjmp	.+190    	; 0xd770 <f_mkfs+0x5a4>
					if (!au && (pau * 2) <= 64) {
    d6b2:	81 14       	cp	r8, r1
    d6b4:	91 04       	cpc	r9, r1
    d6b6:	a1 04       	cpc	r10, r1
    d6b8:	b1 04       	cpc	r11, r1
    d6ba:	09 f0       	breq	.+2      	; 0xd6be <f_mkfs+0x4f2>
    d6bc:	e8 c2       	rjmp	.+1488   	; 0xdc8e <f_mkfs+0xac2>
    d6be:	d3 01       	movw	r26, r6
    d6c0:	c2 01       	movw	r24, r4
    d6c2:	88 0f       	add	r24, r24
    d6c4:	99 1f       	adc	r25, r25
    d6c6:	aa 1f       	adc	r26, r26
    d6c8:	bb 1f       	adc	r27, r27
    d6ca:	81 34       	cpi	r24, 0x41	; 65
    d6cc:	91 05       	cpc	r25, r1
    d6ce:	a1 05       	cpc	r26, r1
    d6d0:	b1 05       	cpc	r27, r1
    d6d2:	08 f0       	brcs	.+2      	; 0xd6d6 <f_mkfs+0x50a>
    d6d4:	d0 c2       	rjmp	.+1440   	; 0xdc76 <f_mkfs+0xaaa>
    d6d6:	4c 01       	movw	r8, r24
    d6d8:	5d 01       	movw	r10, r26
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
    d6da:	81 14       	cp	r8, r1
    d6dc:	91 04       	cpc	r9, r1
    d6de:	a1 04       	cpc	r10, r1
    d6e0:	b1 04       	cpc	r11, r1
    d6e2:	39 f4       	brne	.+14     	; 0xd6f2 <f_mkfs+0x526>
    d6e4:	e5 e9       	ldi	r30, 0x95	; 149
    d6e6:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d6e8:	41 2c       	mov	r4, r1
    d6ea:	51 2c       	mov	r5, r1
    d6ec:	32 01       	movw	r6, r4
    d6ee:	43 94       	inc	r4
    d6f0:	f7 ce       	rjmp	.-530    	; 0xd4e0 <f_mkfs+0x314>
    d6f2:	24 01       	movw	r4, r8
    d6f4:	35 01       	movw	r6, r10
    d6f6:	f8 ce       	rjmp	.-528    	; 0xd4e8 <f_mkfs+0x31c>
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    d6f8:	a3 e0       	ldi	r26, 0x03	; 3
    d6fa:	b0 e0       	ldi	r27, 0x00	; 0
    d6fc:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    d700:	dc 01       	movw	r26, r24
    d702:	cb 01       	movw	r24, r22
    d704:	01 96       	adiw	r24, 0x01	; 1
    d706:	a1 1d       	adc	r26, r1
    d708:	b1 1d       	adc	r27, r1
    d70a:	b6 95       	lsr	r27
    d70c:	a7 95       	ror	r26
    d70e:	97 95       	ror	r25
    d710:	87 95       	ror	r24
    d712:	03 96       	adiw	r24, 0x03	; 3
    d714:	a1 1d       	adc	r26, r1
    d716:	b1 1d       	adc	r27, r1
				}
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
    d718:	31 e0       	ldi	r19, 0x01	; 1
    d71a:	3f 87       	std	Y+15, r19	; 0x0f
    d71c:	ff ce       	rjmp	.-514    	; 0xd51c <f_mkfs+0x350>
			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
				sz_rsv += n; b_fat += n;
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
    d71e:	08 89       	ldd	r16, Y+16	; 0x10
    d720:	19 89       	ldd	r17, Y+17	; 0x11
    d722:	2a 89       	ldd	r18, Y+18	; 0x12
    d724:	3b 89       	ldd	r19, Y+19	; 0x13
    d726:	04 0f       	add	r16, r20
    d728:	15 1f       	adc	r17, r21
    d72a:	26 1f       	adc	r18, r22
    d72c:	37 1f       	adc	r19, r23
    d72e:	08 8b       	std	Y+16, r16	; 0x10
    d730:	19 8b       	std	Y+17, r17	; 0x11
    d732:	2a 8b       	std	Y+18, r18	; 0x12
    d734:	3b 8b       	std	Y+19, r19	; 0x13
    d736:	67 cf       	rjmp	.-306    	; 0xd606 <f_mkfs+0x43a>

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
			if (fmt == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
    d738:	88 a5       	ldd	r24, Y+40	; 0x28
    d73a:	99 a5       	ldd	r25, Y+41	; 0x29
    d73c:	aa a5       	ldd	r26, Y+42	; 0x2a
    d73e:	bb a5       	ldd	r27, Y+43	; 0x2b
    d740:	86 3f       	cpi	r24, 0xF6	; 246
    d742:	9f 4f       	sbci	r25, 0xFF	; 255
    d744:	a1 05       	cpc	r26, r1
    d746:	b1 05       	cpc	r27, r1
    d748:	c8 f5       	brcc	.+114    	; 0xd7bc <f_mkfs+0x5f0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    d74a:	81 14       	cp	r8, r1
    d74c:	91 04       	cpc	r9, r1
    d74e:	a1 04       	cpc	r10, r1
    d750:	b1 04       	cpc	r11, r1
    d752:	09 f0       	breq	.+2      	; 0xd756 <f_mkfs+0x58a>
    d754:	be cd       	rjmp	.-1156   	; 0xd2d2 <f_mkfs+0x106>
    d756:	53 01       	movw	r10, r6
    d758:	42 01       	movw	r8, r4
    d75a:	b6 94       	lsr	r11
    d75c:	a7 94       	ror	r10
    d75e:	97 94       	ror	r9
    d760:	87 94       	ror	r8
    d762:	81 14       	cp	r8, r1
    d764:	91 04       	cpc	r9, r1
    d766:	a1 04       	cpc	r10, r1
    d768:	b1 04       	cpc	r11, r1
    d76a:	09 f4       	brne	.+2      	; 0xd76e <f_mkfs+0x5a2>
    d76c:	b2 cd       	rjmp	.-1180   	; 0xd2d2 <f_mkfs+0x106>
    d76e:	4e ce       	rjmp	.-868    	; 0xd40c <f_mkfs+0x240>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    d770:	88 a5       	ldd	r24, Y+40	; 0x28
    d772:	99 a5       	ldd	r25, Y+41	; 0x29
    d774:	aa a5       	ldd	r26, Y+42	; 0x2a
    d776:	bb a5       	ldd	r27, Y+43	; 0x2b
    d778:	86 3f       	cpi	r24, 0xF6	; 246
    d77a:	9f 40       	sbci	r25, 0x0F	; 15
    d77c:	a1 05       	cpc	r26, r1
    d77e:	b1 05       	cpc	r27, r1
    d780:	e8 f4       	brcc	.+58     	; 0xd7bc <f_mkfs+0x5f0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d782:	81 14       	cp	r8, r1
    d784:	91 04       	cpc	r9, r1
    d786:	a1 04       	cpc	r10, r1
    d788:	b1 04       	cpc	r11, r1
    d78a:	09 f0       	breq	.+2      	; 0xd78e <f_mkfs+0x5c2>
    d78c:	a2 cd       	rjmp	.-1212   	; 0xd2d2 <f_mkfs+0x106>
    d78e:	53 01       	movw	r10, r6
    d790:	42 01       	movw	r8, r4
    d792:	88 0c       	add	r8, r8
    d794:	99 1c       	adc	r9, r9
    d796:	aa 1c       	adc	r10, r10
    d798:	bb 1c       	adc	r11, r11
    d79a:	f1 e8       	ldi	r31, 0x81	; 129
    d79c:	8f 16       	cp	r8, r31
    d79e:	91 04       	cpc	r9, r1
    d7a0:	a1 04       	cpc	r10, r1
    d7a2:	b1 04       	cpc	r11, r1
    d7a4:	08 f0       	brcs	.+2      	; 0xd7a8 <f_mkfs+0x5dc>
    d7a6:	95 cd       	rjmp	.-1238   	; 0xd2d2 <f_mkfs+0x106>
    d7a8:	98 cf       	rjmp	.-208    	; 0xd6da <f_mkfs+0x50e>
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
    d7aa:	06 3f       	cpi	r16, 0xF6	; 246
    d7ac:	4f e0       	ldi	r20, 0x0F	; 15
    d7ae:	14 07       	cpc	r17, r20
    d7b0:	21 05       	cpc	r18, r1
    d7b2:	31 05       	cpc	r19, r1
    d7b4:	08 f0       	brcs	.+2      	; 0xd7b8 <f_mkfs+0x5ec>
    d7b6:	8d cd       	rjmp	.-1254   	; 0xd2d2 <f_mkfs+0x106>
    d7b8:	51 e0       	ldi	r21, 0x01	; 1
    d7ba:	5f 87       	std	Y+15, r21	; 0x0f
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
    d7bc:	40 e0       	ldi	r20, 0x00	; 0
    d7be:	52 e0       	ldi	r21, 0x02	; 2
    d7c0:	60 e0       	ldi	r22, 0x00	; 0
    d7c2:	70 e0       	ldi	r23, 0x00	; 0
    d7c4:	c6 01       	movw	r24, r12
    d7c6:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
    d7ca:	4b e0       	ldi	r20, 0x0B	; 11
    d7cc:	50 e0       	ldi	r21, 0x00	; 0
    d7ce:	68 ee       	ldi	r22, 0xE8	; 232
    d7d0:	77 e0       	ldi	r23, 0x07	; 7
    d7d2:	c6 01       	movw	r24, r12
    d7d4:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7d8:	d6 01       	movw	r26, r12
    d7da:	1b 96       	adiw	r26, 0x0b	; 11
    d7dc:	1c 92       	st	X, r1
    d7de:	1b 97       	sbiw	r26, 0x0b	; 11
	*ptr++ = (BYTE)val;
    d7e0:	82 e0       	ldi	r24, 0x02	; 2
    d7e2:	1c 96       	adiw	r26, 0x0c	; 12
    d7e4:	8c 93       	st	X, r24
    d7e6:	1c 97       	sbiw	r26, 0x0c	; 12
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    d7e8:	1d 96       	adiw	r26, 0x0d	; 13
    d7ea:	4c 92       	st	X, r4
    d7ec:	1d 97       	sbiw	r26, 0x0d	; 13

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7ee:	e8 a1       	ldd	r30, Y+32	; 0x20
    d7f0:	1e 96       	adiw	r26, 0x0e	; 14
    d7f2:	ec 93       	st	X, r30
    d7f4:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val;
    d7f6:	f9 a1       	ldd	r31, Y+33	; 0x21
    d7f8:	1f 96       	adiw	r26, 0x0f	; 15
    d7fa:	fc 93       	st	X, r31
    d7fc:	1f 97       	sbiw	r26, 0x0f	; 15
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
    d7fe:	81 e0       	ldi	r24, 0x01	; 1
    d800:	50 96       	adiw	r26, 0x10	; 16
    d802:	8c 93       	st	X, r24
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
    d804:	0f 85       	ldd	r16, Y+15	; 0x0f
    d806:	03 30       	cpi	r16, 0x03	; 3
    d808:	11 f0       	breq	.+4      	; 0xd80e <f_mkfs+0x642>
    d80a:	82 e0       	ldi	r24, 0x02	; 2
    d80c:	01 c0       	rjmp	.+2      	; 0xd810 <f_mkfs+0x644>
    d80e:	80 e0       	ldi	r24, 0x00	; 0

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d810:	d6 01       	movw	r26, r12
    d812:	51 96       	adiw	r26, 0x11	; 17
    d814:	1c 92       	st	X, r1
    d816:	51 97       	sbiw	r26, 0x11	; 17
	*ptr++ = (BYTE)val;
    d818:	52 96       	adiw	r26, 0x12	; 18
    d81a:	8c 93       	st	X, r24
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
    d81c:	49 81       	ldd	r20, Y+1	; 0x01
    d81e:	5a 81       	ldd	r21, Y+2	; 0x02
    d820:	6b 81       	ldd	r22, Y+3	; 0x03
    d822:	7c 81       	ldd	r23, Y+4	; 0x04
    d824:	41 15       	cp	r20, r1
    d826:	51 05       	cpc	r21, r1
    d828:	b1 e0       	ldi	r27, 0x01	; 1
    d82a:	6b 07       	cpc	r22, r27
    d82c:	71 05       	cpc	r23, r1
    d82e:	20 f4       	brcc	.+8      	; 0xd838 <f_mkfs+0x66c>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d830:	f6 01       	movw	r30, r12
    d832:	43 8b       	std	Z+19, r20	; 0x13
	*ptr++ = (BYTE)val;
    d834:	54 8b       	std	Z+20, r21	; 0x14
    d836:	04 c0       	rjmp	.+8      	; 0xd840 <f_mkfs+0x674>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
    d838:	c6 01       	movw	r24, r12
    d83a:	80 96       	adiw	r24, 0x20	; 32
    d83c:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    d840:	88 ef       	ldi	r24, 0xF8	; 248
    d842:	d6 01       	movw	r26, r12
    d844:	55 96       	adiw	r26, 0x15	; 21
    d846:	8c 93       	st	X, r24
    d848:	55 97       	sbiw	r26, 0x15	; 21

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d84a:	8f e3       	ldi	r24, 0x3F	; 63
    d84c:	58 96       	adiw	r26, 0x18	; 24
    d84e:	8c 93       	st	X, r24
    d850:	58 97       	sbiw	r26, 0x18	; 24
	*ptr++ = (BYTE)val;
    d852:	59 96       	adiw	r26, 0x19	; 25
    d854:	1c 92       	st	X, r1
    d856:	59 97       	sbiw	r26, 0x19	; 25

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d858:	8f ef       	ldi	r24, 0xFF	; 255
    d85a:	5a 96       	adiw	r26, 0x1a	; 26
    d85c:	8c 93       	st	X, r24
    d85e:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    d860:	5b 96       	adiw	r26, 0x1b	; 27
    d862:	1c 92       	st	X, r1
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
    d864:	4c 89       	ldd	r20, Y+20	; 0x14
    d866:	5d 89       	ldd	r21, Y+21	; 0x15
    d868:	6e 89       	ldd	r22, Y+22	; 0x16
    d86a:	7f 89       	ldd	r23, Y+23	; 0x17
    d86c:	c6 01       	movw	r24, r12
    d86e:	4c 96       	adiw	r24, 0x1c	; 28
    d870:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
		if (fmt == FS_FAT32) {
    d874:	bf 85       	ldd	r27, Y+15	; 0x0f
    d876:	b3 30       	cpi	r27, 0x03	; 3
    d878:	61 f5       	brne	.+88     	; 0xd8d2 <f_mkfs+0x706>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
    d87a:	0e 94 62 75 	call	0xeac4	; 0xeac4 <get_fattime>
    d87e:	ab 01       	movw	r20, r22
    d880:	bc 01       	movw	r22, r24
    d882:	c6 01       	movw	r24, r12
    d884:	8d 5b       	subi	r24, 0xBD	; 189
    d886:	9f 4f       	sbci	r25, 0xFF	; 255
    d888:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    d88c:	48 89       	ldd	r20, Y+16	; 0x10
    d88e:	59 89       	ldd	r21, Y+17	; 0x11
    d890:	6a 89       	ldd	r22, Y+18	; 0x12
    d892:	7b 89       	ldd	r23, Y+19	; 0x13
    d894:	c6 01       	movw	r24, r12
    d896:	84 96       	adiw	r24, 0x24	; 36
    d898:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d89c:	82 e0       	ldi	r24, 0x02	; 2
    d89e:	f6 01       	movw	r30, r12
    d8a0:	84 a7       	std	Z+44, r24	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
    d8a2:	15 a6       	std	Z+45, r1	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
    d8a4:	16 a6       	std	Z+46, r1	; 0x2e
	*ptr++ = (BYTE)val;
    d8a6:	17 a6       	std	Z+47, r1	; 0x2f

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d8a8:	81 e0       	ldi	r24, 0x01	; 1
    d8aa:	80 ab       	std	Z+48, r24	; 0x30
	*ptr++ = (BYTE)val;
    d8ac:	11 aa       	std	Z+49, r1	; 0x31

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d8ae:	86 e0       	ldi	r24, 0x06	; 6
    d8b0:	82 ab       	std	Z+50, r24	; 0x32
	*ptr++ = (BYTE)val;
    d8b2:	13 aa       	std	Z+51, r1	; 0x33
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    d8b4:	80 e8       	ldi	r24, 0x80	; 128
    d8b6:	e0 5c       	subi	r30, 0xC0	; 192
    d8b8:	ff 4f       	sbci	r31, 0xFF	; 255
    d8ba:	80 83       	st	Z, r24
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    d8bc:	89 e2       	ldi	r24, 0x29	; 41
    d8be:	32 96       	adiw	r30, 0x02	; 2
    d8c0:	80 83       	st	Z, r24
    d8c2:	43 e1       	ldi	r20, 0x13	; 19
    d8c4:	50 e0       	ldi	r21, 0x00	; 0
    d8c6:	64 ef       	ldi	r22, 0xF4	; 244
    d8c8:	77 e0       	ldi	r23, 0x07	; 7
    d8ca:	c6 01       	movw	r24, r12
    d8cc:	89 5b       	subi	r24, 0xB9	; 185
    d8ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d8d0:	1e c0       	rjmp	.+60     	; 0xd90e <f_mkfs+0x742>
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
    d8d2:	0e 94 62 75 	call	0xeac4	; 0xeac4 <get_fattime>
    d8d6:	ab 01       	movw	r20, r22
    d8d8:	bc 01       	movw	r22, r24
    d8da:	c6 01       	movw	r24, r12
    d8dc:	87 96       	adiw	r24, 0x27	; 39
    d8de:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d8e2:	e8 89       	ldd	r30, Y+16	; 0x10
    d8e4:	d6 01       	movw	r26, r12
    d8e6:	56 96       	adiw	r26, 0x16	; 22
    d8e8:	ec 93       	st	X, r30
    d8ea:	56 97       	sbiw	r26, 0x16	; 22
	*ptr++ = (BYTE)val;
    d8ec:	f9 89       	ldd	r31, Y+17	; 0x11
    d8ee:	57 96       	adiw	r26, 0x17	; 23
    d8f0:	fc 93       	st	X, r31
    d8f2:	57 97       	sbiw	r26, 0x17	; 23
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    d8f4:	80 e8       	ldi	r24, 0x80	; 128
    d8f6:	94 96       	adiw	r26, 0x24	; 36
    d8f8:	8c 93       	st	X, r24
    d8fa:	94 97       	sbiw	r26, 0x24	; 36
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    d8fc:	89 e2       	ldi	r24, 0x29	; 41
    d8fe:	96 96       	adiw	r26, 0x26	; 38
    d900:	8c 93       	st	X, r24
    d902:	43 e1       	ldi	r20, 0x13	; 19
    d904:	50 e0       	ldi	r21, 0x00	; 0
    d906:	68 e0       	ldi	r22, 0x08	; 8
    d908:	78 e0       	ldi	r23, 0x08	; 8
    d90a:	c6 01       	movw	r24, r12
    d90c:	8b 96       	adiw	r24, 0x2b	; 43
    d90e:	0e 94 91 48 	call	0x9122	; 0x9122 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d912:	46 01       	movw	r8, r12
    d914:	02 e0       	ldi	r16, 0x02	; 2
    d916:	80 1a       	sub	r8, r16
    d918:	0e ef       	ldi	r16, 0xFE	; 254
    d91a:	90 0a       	sbc	r9, r16
    d91c:	45 e5       	ldi	r20, 0x55	; 85
    d91e:	b4 2e       	mov	r11, r20
    d920:	d4 01       	movw	r26, r8
    d922:	bc 92       	st	X, r11
	*ptr++ = (BYTE)val;
    d924:	76 01       	movw	r14, r12
    d926:	b1 e0       	ldi	r27, 0x01	; 1
    d928:	eb 1a       	sub	r14, r27
    d92a:	be ef       	ldi	r27, 0xFE	; 254
    d92c:	fb 0a       	sbc	r15, r27
    d92e:	5a ea       	ldi	r21, 0xAA	; 170
    d930:	a5 2e       	mov	r10, r21
    d932:	f7 01       	movw	r30, r14
    d934:	a0 82       	st	Z, r10
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
    d936:	01 e0       	ldi	r16, 0x01	; 1
    d938:	10 e0       	ldi	r17, 0x00	; 0
    d93a:	2c 89       	ldd	r18, Y+20	; 0x14
    d93c:	3d 89       	ldd	r19, Y+21	; 0x15
    d93e:	4e 89       	ldd	r20, Y+22	; 0x16
    d940:	5f 89       	ldd	r21, Y+23	; 0x17
    d942:	b6 01       	movw	r22, r12
    d944:	82 2d       	mov	r24, r2
    d946:	4b d2       	rcall	.+1174   	; 0xddde <disk_write>
    d948:	89 2b       	or	r24, r25
    d94a:	09 f0       	breq	.+2      	; 0xd94e <f_mkfs+0x782>
    d94c:	91 c1       	rjmp	.+802    	; 0xdc70 <f_mkfs+0xaa4>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
    d94e:	ff 85       	ldd	r31, Y+15	; 0x0f
    d950:	f3 30       	cpi	r31, 0x03	; 3
    d952:	09 f0       	breq	.+2      	; 0xd956 <f_mkfs+0x78a>
    d954:	5e c0       	rjmp	.+188    	; 0xda12 <f_mkfs+0x846>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    d956:	01 e0       	ldi	r16, 0x01	; 1
    d958:	10 e0       	ldi	r17, 0x00	; 0
    d95a:	2c 89       	ldd	r18, Y+20	; 0x14
    d95c:	3d 89       	ldd	r19, Y+21	; 0x15
    d95e:	4e 89       	ldd	r20, Y+22	; 0x16
    d960:	5f 89       	ldd	r21, Y+23	; 0x17
    d962:	2a 5f       	subi	r18, 0xFA	; 250
    d964:	3f 4f       	sbci	r19, 0xFF	; 255
    d966:	4f 4f       	sbci	r20, 0xFF	; 255
    d968:	5f 4f       	sbci	r21, 0xFF	; 255
    d96a:	b6 01       	movw	r22, r12
    d96c:	82 2d       	mov	r24, r2
    d96e:	37 d2       	rcall	.+1134   	; 0xddde <disk_write>
			mem_set(buf, 0, ss);
    d970:	40 e0       	ldi	r20, 0x00	; 0
    d972:	52 e0       	ldi	r21, 0x02	; 2
    d974:	60 e0       	ldi	r22, 0x00	; 0
    d976:	70 e0       	ldi	r23, 0x00	; 0
    d978:	c6 01       	movw	r24, r12
    d97a:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d97e:	82 e5       	ldi	r24, 0x52	; 82
    d980:	d6 01       	movw	r26, r12
    d982:	8c 93       	st	X, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d984:	11 96       	adiw	r26, 0x01	; 1
    d986:	8c 93       	st	X, r24
    d988:	11 97       	sbiw	r26, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
    d98a:	81 e6       	ldi	r24, 0x61	; 97
    d98c:	12 96       	adiw	r26, 0x02	; 2
    d98e:	8c 93       	st	X, r24
    d990:	12 97       	sbiw	r26, 0x02	; 2
	*ptr++ = (BYTE)val;
    d992:	91 e4       	ldi	r25, 0x41	; 65
    d994:	13 96       	adiw	r26, 0x03	; 3
    d996:	9c 93       	st	X, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d998:	22 e7       	ldi	r18, 0x72	; 114
    d99a:	f6 01       	movw	r30, r12
    d99c:	ec 51       	subi	r30, 0x1C	; 28
    d99e:	fe 4f       	sbci	r31, 0xFE	; 254
    d9a0:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d9a2:	31 96       	adiw	r30, 0x01	; 1
    d9a4:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d9a6:	31 96       	adiw	r30, 0x01	; 1
    d9a8:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    d9aa:	31 96       	adiw	r30, 0x01	; 1
    d9ac:	80 83       	st	Z, r24
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    d9ae:	48 a5       	ldd	r20, Y+40	; 0x28
    d9b0:	59 a5       	ldd	r21, Y+41	; 0x29
    d9b2:	6a a5       	ldd	r22, Y+42	; 0x2a
    d9b4:	7b a5       	ldd	r23, Y+43	; 0x2b
    d9b6:	41 50       	subi	r20, 0x01	; 1
    d9b8:	51 09       	sbc	r21, r1
    d9ba:	61 09       	sbc	r22, r1
    d9bc:	71 09       	sbc	r23, r1
    d9be:	c6 01       	movw	r24, r12
    d9c0:	88 51       	subi	r24, 0x18	; 24
    d9c2:	9e 4f       	sbci	r25, 0xFE	; 254
    d9c4:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d9c8:	82 e0       	ldi	r24, 0x02	; 2
    d9ca:	f6 01       	movw	r30, r12
    d9cc:	e4 51       	subi	r30, 0x14	; 20
    d9ce:	fe 4f       	sbci	r31, 0xFE	; 254
    d9d0:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d9d2:	31 96       	adiw	r30, 0x01	; 1
    d9d4:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    d9d6:	31 96       	adiw	r30, 0x01	; 1
    d9d8:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val;
    d9da:	31 96       	adiw	r30, 0x01	; 1
    d9dc:	10 82       	st	Z, r1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d9de:	f4 01       	movw	r30, r8
    d9e0:	b0 82       	st	Z, r11
	*ptr++ = (BYTE)val;
    d9e2:	d7 01       	movw	r26, r14
    d9e4:	ac 92       	st	X, r10
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    d9e6:	2c 89       	ldd	r18, Y+20	; 0x14
    d9e8:	3d 89       	ldd	r19, Y+21	; 0x15
    d9ea:	4e 89       	ldd	r20, Y+22	; 0x16
    d9ec:	5f 89       	ldd	r21, Y+23	; 0x17
    d9ee:	29 5f       	subi	r18, 0xF9	; 249
    d9f0:	3f 4f       	sbci	r19, 0xFF	; 255
    d9f2:	4f 4f       	sbci	r20, 0xFF	; 255
    d9f4:	5f 4f       	sbci	r21, 0xFF	; 255
    d9f6:	b6 01       	movw	r22, r12
    d9f8:	82 2d       	mov	r24, r2
    d9fa:	f1 d1       	rcall	.+994    	; 0xddde <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    d9fc:	2c 89       	ldd	r18, Y+20	; 0x14
    d9fe:	3d 89       	ldd	r19, Y+21	; 0x15
    da00:	4e 89       	ldd	r20, Y+22	; 0x16
    da02:	5f 89       	ldd	r21, Y+23	; 0x17
    da04:	2f 5f       	subi	r18, 0xFF	; 255
    da06:	3f 4f       	sbci	r19, 0xFF	; 255
    da08:	4f 4f       	sbci	r20, 0xFF	; 255
    da0a:	5f 4f       	sbci	r21, 0xFF	; 255
    da0c:	b6 01       	movw	r22, r12
    da0e:	82 2d       	mov	r24, r2
    da10:	e6 d1       	rcall	.+972    	; 0xddde <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
    da12:	4d a5       	ldd	r20, Y+45	; 0x2d
    da14:	5e a5       	ldd	r21, Y+46	; 0x2e
    da16:	60 e0       	ldi	r22, 0x00	; 0
    da18:	70 e0       	ldi	r23, 0x00	; 0
    da1a:	c6 01       	movw	r24, r12
    da1c:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
    da20:	bf 85       	ldd	r27, Y+15	; 0x0f
    da22:	b3 30       	cpi	r27, 0x03	; 3
    da24:	89 f4       	brne	.+34     	; 0xda48 <f_mkfs+0x87c>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    da26:	88 ef       	ldi	r24, 0xF8	; 248
    da28:	f6 01       	movw	r30, r12
    da2a:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    da2c:	8f ef       	ldi	r24, 0xFF	; 255
    da2e:	81 83       	std	Z+1, r24	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    da30:	82 83       	std	Z+2, r24	; 0x02
	*ptr++ = (BYTE)val;
    da32:	83 83       	std	Z+3, r24	; 0x03
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    da34:	84 83       	std	Z+4, r24	; 0x04
	*ptr++ = (BYTE)val; val >>= 8;
    da36:	85 83       	std	Z+5, r24	; 0x05
	*ptr++ = (BYTE)val; val >>= 8;
    da38:	86 83       	std	Z+6, r24	; 0x06
	*ptr++ = (BYTE)val;
    da3a:	87 83       	std	Z+7, r24	; 0x07
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    da3c:	80 87       	std	Z+8, r24	; 0x08
	*ptr++ = (BYTE)val; val >>= 8;
    da3e:	81 87       	std	Z+9, r24	; 0x09
	*ptr++ = (BYTE)val; val >>= 8;
    da40:	82 87       	std	Z+10, r24	; 0x0a
	*ptr++ = (BYTE)val;
    da42:	8f e0       	ldi	r24, 0x0F	; 15
    da44:	83 87       	std	Z+11, r24	; 0x0b
    da46:	0f c0       	rjmp	.+30     	; 0xda66 <f_mkfs+0x89a>
			if (fmt == FS_FAT32) {
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
    da48:	ff 85       	ldd	r31, Y+15	; 0x0f
    da4a:	f1 30       	cpi	r31, 0x01	; 1
    da4c:	29 f0       	breq	.+10     	; 0xda58 <f_mkfs+0x88c>
    da4e:	48 ef       	ldi	r20, 0xF8	; 248
    da50:	5f ef       	ldi	r21, 0xFF	; 255
    da52:	6f ef       	ldi	r22, 0xFF	; 255
    da54:	7f ef       	ldi	r23, 0xFF	; 255
    da56:	04 c0       	rjmp	.+8      	; 0xda60 <f_mkfs+0x894>
    da58:	48 ef       	ldi	r20, 0xF8	; 248
    da5a:	5f ef       	ldi	r21, 0xFF	; 255
    da5c:	6f ef       	ldi	r22, 0xFF	; 255
    da5e:	70 e0       	ldi	r23, 0x00	; 0
    da60:	c6 01       	movw	r24, r12
    da62:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
    da66:	88 88       	ldd	r8, Y+16	; 0x10
    da68:	99 88       	ldd	r9, Y+17	; 0x11
    da6a:	aa 88       	ldd	r10, Y+18	; 0x12
    da6c:	bb 88       	ldd	r11, Y+19	; 0x13
    da6e:	0c a1       	ldd	r16, Y+36	; 0x24
    da70:	1d a1       	ldd	r17, Y+37	; 0x25
    da72:	2e a1       	ldd	r18, Y+38	; 0x26
    da74:	3f a1       	ldd	r19, Y+39	; 0x27
    da76:	08 15       	cp	r16, r8
    da78:	19 05       	cpc	r17, r9
    da7a:	2a 05       	cpc	r18, r10
    da7c:	3b 05       	cpc	r19, r11
    da7e:	10 f4       	brcc	.+4      	; 0xda84 <f_mkfs+0x8b8>
    da80:	48 01       	movw	r8, r16
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    da82:	59 01       	movw	r10, r18
    da84:	84 01       	movw	r16, r8
    da86:	28 8d       	ldd	r18, Y+24	; 0x18
    da88:	39 8d       	ldd	r19, Y+25	; 0x19
    da8a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    da8c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    da8e:	b6 01       	movw	r22, r12
    da90:	8c a5       	ldd	r24, Y+44	; 0x2c
    da92:	a5 d1       	rcall	.+842    	; 0xddde <disk_write>
    da94:	89 2b       	or	r24, r25
    da96:	09 f0       	breq	.+2      	; 0xda9a <f_mkfs+0x8ce>
				mem_set(buf, 0, ss);
    da98:	eb c0       	rjmp	.+470    	; 0xdc70 <f_mkfs+0xaa4>
    da9a:	40 e0       	ldi	r20, 0x00	; 0
    da9c:	52 e0       	ldi	r21, 0x02	; 2
    da9e:	60 e0       	ldi	r22, 0x00	; 0
    daa0:	70 e0       	ldi	r23, 0x00	; 0
    daa2:	c6 01       	movw	r24, r12
    daa4:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>
				sect += n; nsect -= n;
    daa8:	28 8d       	ldd	r18, Y+24	; 0x18
    daaa:	39 8d       	ldd	r19, Y+25	; 0x19
    daac:	4a 8d       	ldd	r20, Y+26	; 0x1a
    daae:	5b 8d       	ldd	r21, Y+27	; 0x1b
    dab0:	28 0d       	add	r18, r8
    dab2:	39 1d       	adc	r19, r9
    dab4:	4a 1d       	adc	r20, r10
    dab6:	5b 1d       	adc	r21, r11
    dab8:	28 8f       	std	Y+24, r18	; 0x18
    daba:	39 8f       	std	Y+25, r19	; 0x19
    dabc:	4a 8f       	std	Y+26, r20	; 0x1a
    dabe:	5b 8f       	std	Y+27, r21	; 0x1b
    dac0:	88 89       	ldd	r24, Y+16	; 0x10
    dac2:	99 89       	ldd	r25, Y+17	; 0x11
    dac4:	aa 89       	ldd	r26, Y+18	; 0x12
    dac6:	bb 89       	ldd	r27, Y+19	; 0x13
    dac8:	88 19       	sub	r24, r8
    daca:	99 09       	sbc	r25, r9
    dacc:	aa 09       	sbc	r26, r10
    dace:	bb 09       	sbc	r27, r11
    dad0:	88 8b       	std	Y+16, r24	; 0x10
    dad2:	99 8b       	std	Y+17, r25	; 0x11
    dad4:	aa 8b       	std	Y+18, r26	; 0x12
			} while (nsect);
    dad6:	bb 8b       	std	Y+19, r27	; 0x13
    dad8:	89 2b       	or	r24, r25
    dada:	8a 2b       	or	r24, r26
    dadc:	8b 2b       	or	r24, r27
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    dade:	19 f6       	brne	.-122    	; 0xda66 <f_mkfs+0x89a>
    dae0:	9f 85       	ldd	r25, Y+15	; 0x0f
    dae2:	93 30       	cpi	r25, 0x03	; 3
    dae4:	21 f4       	brne	.+8      	; 0xdaee <f_mkfs+0x922>
    dae6:	4c 8e       	std	Y+28, r4	; 0x1c
    dae8:	5d 8e       	std	Y+29, r5	; 0x1d
    daea:	6e 8e       	std	Y+30, r6	; 0x1e
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
    daec:	7f 8e       	std	Y+31, r7	; 0x1f
    daee:	8c 8c       	ldd	r8, Y+28	; 0x1c
    daf0:	9d 8c       	ldd	r9, Y+29	; 0x1d
    daf2:	ae 8c       	ldd	r10, Y+30	; 0x1e
    daf4:	bf 8c       	ldd	r11, Y+31	; 0x1f
    daf6:	0c a1       	ldd	r16, Y+36	; 0x24
    daf8:	1d a1       	ldd	r17, Y+37	; 0x25
    dafa:	2e a1       	ldd	r18, Y+38	; 0x26
    dafc:	3f a1       	ldd	r19, Y+39	; 0x27
    dafe:	08 15       	cp	r16, r8
    db00:	19 05       	cpc	r17, r9
    db02:	2a 05       	cpc	r18, r10
    db04:	3b 05       	cpc	r19, r11
    db06:	10 f4       	brcc	.+4      	; 0xdb0c <f_mkfs+0x940>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    db08:	48 01       	movw	r8, r16
    db0a:	59 01       	movw	r10, r18
    db0c:	84 01       	movw	r16, r8
    db0e:	28 8d       	ldd	r18, Y+24	; 0x18
    db10:	39 8d       	ldd	r19, Y+25	; 0x19
    db12:	4a 8d       	ldd	r20, Y+26	; 0x1a
    db14:	5b 8d       	ldd	r21, Y+27	; 0x1b
    db16:	b6 01       	movw	r22, r12
    db18:	8c a5       	ldd	r24, Y+44	; 0x2c
    db1a:	61 d1       	rcall	.+706    	; 0xddde <disk_write>
    db1c:	89 2b       	or	r24, r25
    db1e:	09 f0       	breq	.+2      	; 0xdb22 <f_mkfs+0x956>
			sect += n; nsect -= n;
    db20:	a7 c0       	rjmp	.+334    	; 0xdc70 <f_mkfs+0xaa4>
    db22:	28 8d       	ldd	r18, Y+24	; 0x18
    db24:	39 8d       	ldd	r19, Y+25	; 0x19
    db26:	4a 8d       	ldd	r20, Y+26	; 0x1a
    db28:	5b 8d       	ldd	r21, Y+27	; 0x1b
    db2a:	28 0d       	add	r18, r8
    db2c:	39 1d       	adc	r19, r9
    db2e:	4a 1d       	adc	r20, r10
    db30:	5b 1d       	adc	r21, r11
    db32:	28 8f       	std	Y+24, r18	; 0x18
    db34:	39 8f       	std	Y+25, r19	; 0x19
    db36:	4a 8f       	std	Y+26, r20	; 0x1a
    db38:	5b 8f       	std	Y+27, r21	; 0x1b
    db3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    db3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    db3e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    db40:	bf 8d       	ldd	r27, Y+31	; 0x1f
    db42:	88 19       	sub	r24, r8
    db44:	99 09       	sbc	r25, r9
    db46:	aa 09       	sbc	r26, r10
    db48:	bb 09       	sbc	r27, r11
    db4a:	8c 8f       	std	Y+28, r24	; 0x1c
    db4c:	9d 8f       	std	Y+29, r25	; 0x1d
    db4e:	ae 8f       	std	Y+30, r26	; 0x1e
		} while (nsect);
    db50:	bf 8f       	std	Y+31, r27	; 0x1f
    db52:	89 2b       	or	r24, r25
    db54:	8a 2b       	or	r24, r26
    db56:	8b 2b       	or	r24, r27

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
    db58:	51 f6       	brne	.-108    	; 0xdaee <f_mkfs+0x922>
    db5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    db5c:	93 30       	cpi	r25, 0x03	; 3
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
    db5e:	69 f0       	breq	.+26     	; 0xdb7a <f_mkfs+0x9ae>
    db60:	89 81       	ldd	r24, Y+1	; 0x01
    db62:	9a 81       	ldd	r25, Y+2	; 0x02
    db64:	ab 81       	ldd	r26, Y+3	; 0x03
    db66:	bc 81       	ldd	r27, Y+4	; 0x04
    db68:	00 97       	sbiw	r24, 0x00	; 0
    db6a:	a1 40       	sbci	r26, 0x01	; 1
    db6c:	b1 05       	cpc	r27, r1
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    db6e:	38 f4       	brcc	.+14     	; 0xdb7e <f_mkfs+0x9b2>
    db70:	ff 85       	ldd	r31, Y+15	; 0x0f
    db72:	f2 30       	cpi	r31, 0x02	; 2
    db74:	31 f4       	brne	.+12     	; 0xdb82 <f_mkfs+0x9b6>
    db76:	14 e0       	ldi	r17, 0x04	; 4
	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
			sys = 0x0C;		/* FAT32X */
    db78:	05 c0       	rjmp	.+10     	; 0xdb84 <f_mkfs+0x9b8>
    db7a:	1c e0       	ldi	r17, 0x0C	; 12
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
    db7c:	03 c0       	rjmp	.+6      	; 0xdb84 <f_mkfs+0x9b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    db7e:	16 e0       	ldi	r17, 0x06	; 6
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
    db80:	01 c0       	rjmp	.+2      	; 0xdb84 <f_mkfs+0x9b8>
    db82:	11 e0       	ldi	r17, 0x01	; 1
    db84:	0a a9       	ldd	r16, Y+50	; 0x32
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
    db86:	00 23       	and	r16, r16
    db88:	69 f0       	breq	.+26     	; 0xdba4 <f_mkfs+0x9d8>
    db8a:	40 e0       	ldi	r20, 0x00	; 0
    db8c:	50 e0       	ldi	r21, 0x00	; 0
    db8e:	60 e0       	ldi	r22, 0x00	; 0
    db90:	82 2d       	mov	r24, r2
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    db92:	35 d1       	rcall	.+618    	; 0xddfe <disk_ioctl>
    db94:	31 e0       	ldi	r19, 0x01	; 1
    db96:	20 e0       	ldi	r18, 0x00	; 0
    db98:	89 2b       	or	r24, r25
    db9a:	09 f4       	brne	.+2      	; 0xdb9e <f_mkfs+0x9d2>
    db9c:	30 e0       	ldi	r19, 0x00	; 0
    db9e:	83 2f       	mov	r24, r19
    dba0:	92 2f       	mov	r25, r18
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
    dba2:	7b c0       	rjmp	.+246    	; 0xdc9a <f_mkfs+0xace>
    dba4:	40 e0       	ldi	r20, 0x00	; 0
    dba6:	52 e0       	ldi	r21, 0x02	; 2
    dba8:	60 e0       	ldi	r22, 0x00	; 0
    dbaa:	70 e0       	ldi	r23, 0x00	; 0
    dbac:	c6 01       	movw	r24, r12
    dbae:	0e 94 c8 47 	call	0x8f90	; 0x8f90 <mem_set>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    dbb2:	f6 01       	movw	r30, r12
    dbb4:	e2 50       	subi	r30, 0x02	; 2
    dbb6:	fe 4f       	sbci	r31, 0xFE	; 254
    dbb8:	85 e5       	ldi	r24, 0x55	; 85
	*ptr++ = (BYTE)val;
    dbba:	80 83       	st	Z, r24
    dbbc:	31 96       	adiw	r30, 0x01	; 1
    dbbe:	8a ea       	ldi	r24, 0xAA	; 170
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
    dbc0:	80 83       	st	Z, r24
    dbc2:	e1 54       	subi	r30, 0x41	; 65
    dbc4:	f1 09       	sbc	r31, r1
			pte[PTE_StHead] = 1;				/* Start head */
    dbc6:	10 82       	st	Z, r1
    dbc8:	31 96       	adiw	r30, 0x01	; 1
    dbca:	81 e0       	ldi	r24, 0x01	; 1
			pte[PTE_StSec] = 1;					/* Start sector */
    dbcc:	80 83       	st	Z, r24
    dbce:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_StCyl] = 0;					/* Start cylinder */
    dbd0:	80 83       	st	Z, r24
    dbd2:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_System] = sys;				/* System type */
    dbd4:	10 82       	st	Z, r1
    dbd6:	31 96       	adiw	r30, 0x01	; 1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
    dbd8:	10 83       	st	Z, r17
    dbda:	89 81       	ldd	r24, Y+1	; 0x01
    dbdc:	9a 81       	ldd	r25, Y+2	; 0x02
    dbde:	ab 81       	ldd	r26, Y+3	; 0x03
    dbe0:	bc 81       	ldd	r27, Y+4	; 0x04
    dbe2:	2c 89       	ldd	r18, Y+20	; 0x14
    dbe4:	3d 89       	ldd	r19, Y+21	; 0x15
    dbe6:	4e 89       	ldd	r20, Y+22	; 0x16
    dbe8:	5f 89       	ldd	r21, Y+23	; 0x17
    dbea:	28 0f       	add	r18, r24
    dbec:	39 1f       	adc	r19, r25
    dbee:	4a 1f       	adc	r20, r26
    dbf0:	5b 1f       	adc	r21, r27
    dbf2:	ca 01       	movw	r24, r20
    dbf4:	b9 01       	movw	r22, r18
    dbf6:	21 ec       	ldi	r18, 0xC1	; 193
    dbf8:	3e e3       	ldi	r19, 0x3E	; 62
    dbfa:	40 e0       	ldi	r20, 0x00	; 0
    dbfc:	50 e0       	ldi	r21, 0x00	; 0
    dbfe:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
			pte[PTE_EdHead] = 254;				/* End head */
    dc02:	f6 01       	movw	r30, r12
    dc04:	ed 53       	subi	r30, 0x3D	; 61
    dc06:	fe 4f       	sbci	r31, 0xFE	; 254
    dc08:	8e ef       	ldi	r24, 0xFE	; 254
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
    dc0a:	80 83       	st	Z, r24
    dc0c:	31 96       	adiw	r30, 0x01	; 1
    dc0e:	da 01       	movw	r26, r20
    dc10:	c9 01       	movw	r24, r18
    dc12:	32 e0       	ldi	r19, 0x02	; 2
    dc14:	b6 95       	lsr	r27
    dc16:	a7 95       	ror	r26
    dc18:	97 95       	ror	r25
    dc1a:	87 95       	ror	r24
    dc1c:	3a 95       	dec	r19
    dc1e:	d1 f7       	brne	.-12     	; 0xdc14 <f_mkfs+0xa48>
    dc20:	8f 63       	ori	r24, 0x3F	; 63
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
    dc22:	80 83       	st	Z, r24
    dc24:	31 96       	adiw	r30, 0x01	; 1
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
    dc26:	20 83       	st	Z, r18
    dc28:	4c 89       	ldd	r20, Y+20	; 0x14
    dc2a:	5d 89       	ldd	r21, Y+21	; 0x15
    dc2c:	6e 89       	ldd	r22, Y+22	; 0x16
    dc2e:	7f 89       	ldd	r23, Y+23	; 0x17
    dc30:	c6 01       	movw	r24, r12
    dc32:	8a 53       	subi	r24, 0x3A	; 58
    dc34:	9e 4f       	sbci	r25, 0xFE	; 254
    dc36:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
    dc3a:	49 81       	ldd	r20, Y+1	; 0x01
    dc3c:	5a 81       	ldd	r21, Y+2	; 0x02
    dc3e:	6b 81       	ldd	r22, Y+3	; 0x03
    dc40:	7c 81       	ldd	r23, Y+4	; 0x04
    dc42:	c6 01       	movw	r24, r12
    dc44:	86 53       	subi	r24, 0x36	; 54
    dc46:	9e 4f       	sbci	r25, 0xFE	; 254
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    dc48:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <st_dword>
    dc4c:	01 e0       	ldi	r16, 0x01	; 1
    dc4e:	10 e0       	ldi	r17, 0x00	; 0
    dc50:	20 e0       	ldi	r18, 0x00	; 0
    dc52:	30 e0       	ldi	r19, 0x00	; 0
    dc54:	a9 01       	movw	r20, r18
    dc56:	b6 01       	movw	r22, r12
    dc58:	82 2d       	mov	r24, r2
    dc5a:	c1 d0       	rcall	.+386    	; 0xddde <disk_write>
    dc5c:	89 2b       	or	r24, r25
    dc5e:	09 f4       	brne	.+2      	; 0xdc62 <f_mkfs+0xa96>
    dc60:	94 cf       	rjmp	.-216    	; 0xdb8a <f_mkfs+0x9be>
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    dc62:	06 c0       	rjmp	.+12     	; 0xdc70 <f_mkfs+0xaa4>
    dc64:	8b e0       	ldi	r24, 0x0B	; 11
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    dc66:	05 c0       	rjmp	.+10     	; 0xdc72 <f_mkfs+0xaa6>
    dc68:	83 e0       	ldi	r24, 0x03	; 3
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    dc6a:	03 c0       	rjmp	.+6      	; 0xdc72 <f_mkfs+0xaa6>
    dc6c:	8a e0       	ldi	r24, 0x0A	; 10
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    dc6e:	01 c0       	rjmp	.+2      	; 0xdc72 <f_mkfs+0xaa6>
    dc70:	81 e0       	ldi	r24, 0x01	; 1
    dc72:	90 e0       	ldi	r25, 0x00	; 0
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    dc74:	12 c0       	rjmp	.+36     	; 0xdc9a <f_mkfs+0xace>
    dc76:	ff 20       	and	r15, r15
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    dc78:	19 f0       	breq	.+6      	; 0xdc80 <f_mkfs+0xab4>
    dc7a:	23 e0       	ldi	r18, 0x03	; 3
    dc7c:	2f 87       	std	Y+15, r18	; 0x0f
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    dc7e:	c6 cb       	rjmp	.-2164   	; 0xd40c <f_mkfs+0x240>
    dc80:	81 38       	cpi	r24, 0x81	; 129
    dc82:	91 05       	cpc	r25, r1
    dc84:	a1 05       	cpc	r26, r1
    dc86:	b1 05       	cpc	r27, r1
    dc88:	08 f0       	brcs	.+2      	; 0xdc8c <f_mkfs+0xac0>
    dc8a:	23 cb       	rjmp	.-2490   	; 0xd2d2 <f_mkfs+0x106>
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    dc8c:	24 cd       	rjmp	.-1464   	; 0xd6d6 <f_mkfs+0x50a>
    dc8e:	ff 20       	and	r15, r15
    dc90:	09 f4       	brne	.+2      	; 0xdc94 <f_mkfs+0xac8>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    dc92:	1f cb       	rjmp	.-2498   	; 0xd2d2 <f_mkfs+0x106>
    dc94:	33 e0       	ldi	r19, 0x03	; 3
    dc96:	3f 87       	std	Y+15, r19	; 0x0f
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
    dc98:	b9 cb       	rjmp	.-2190   	; 0xd40c <f_mkfs+0x240>
    dc9a:	ce 5b       	subi	r28, 0xBE	; 190
    dc9c:	df 4f       	sbci	r29, 0xFF	; 255
    dc9e:	e2 e1       	ldi	r30, 0x12	; 18
    dca0:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0000dca4 <ff_memalloc>:
MEMSPACE
void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    dca4:	0c 94 4e 2a 	jmp	0x549c	; 0x549c <safemalloc>
}
    dca8:	08 95       	ret

0000dcaa <ff_memfree>:
MEMSPACE
void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	safefree(mblock);	/* Discard the memory block with POSIX API */
    dcaa:	0c 94 6f 2a 	jmp	0x54de	; 0x54de <safefree>
    dcae:	08 95       	ret

0000dcb0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
    dcb0:	80 38       	cpi	r24, 0x80	; 128
    dcb2:	91 05       	cpc	r25, r1
    dcb4:	18 f1       	brcs	.+70     	; 0xdcfc <ff_convert+0x4c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    dcb6:	67 2b       	or	r22, r23
    dcb8:	61 f0       	breq	.+24     	; 0xdcd2 <ff_convert+0x22>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    dcba:	8f 3f       	cpi	r24, 0xFF	; 255
    dcbc:	91 05       	cpc	r25, r1
    dcbe:	09 f0       	breq	.+2      	; 0xdcc2 <ff_convert+0x12>
    dcc0:	d8 f4       	brcc	.+54     	; 0xdcf8 <ff_convert+0x48>
    dcc2:	88 0f       	add	r24, r24
    dcc4:	99 1f       	adc	r25, r25
    dcc6:	fc 01       	movw	r30, r24
    dcc8:	e4 50       	subi	r30, 0x04	; 4
    dcca:	fb 4f       	sbci	r31, 0xFB	; 251
    dccc:	80 81       	ld	r24, Z
    dcce:	91 81       	ldd	r25, Z+1	; 0x01
    dcd0:	08 95       	ret
    dcd2:	ec ef       	ldi	r30, 0xFC	; 252
    dcd4:	f5 e0       	ldi	r31, 0x05	; 5

	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    dcd6:	20 e0       	ldi	r18, 0x00	; 0
    dcd8:	30 e0       	ldi	r19, 0x00	; 0
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
    dcda:	41 91       	ld	r20, Z+
    dcdc:	51 91       	ld	r21, Z+
    dcde:	84 17       	cp	r24, r20
    dce0:	95 07       	cpc	r25, r21
    dce2:	29 f0       	breq	.+10     	; 0xdcee <ff_convert+0x3e>
	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
    dce4:	2f 5f       	subi	r18, 0xFF	; 255
    dce6:	3f 4f       	sbci	r19, 0xFF	; 255
    dce8:	20 38       	cpi	r18, 0x80	; 128
    dcea:	31 05       	cpc	r19, r1
    dcec:	b1 f7       	brne	.-20     	; 0xdcda <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    dcee:	c9 01       	movw	r24, r18
    dcf0:	80 58       	subi	r24, 0x80	; 128
    dcf2:	9f 4f       	sbci	r25, 0xFF	; 255
    dcf4:	99 27       	eor	r25, r25
    dcf6:	08 95       	ret
	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    dcf8:	80 e0       	ldi	r24, 0x00	; 0
    dcfa:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    dcfc:	08 95       	ret

0000dcfe <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
    dcfe:	81 15       	cp	r24, r1
    dd00:	20 e1       	ldi	r18, 0x10	; 16
    dd02:	92 07       	cpc	r25, r18
    dd04:	18 f0       	brcs	.+6      	; 0xdd0c <ff_wtoupper+0xe>
    dd06:	ae e4       	ldi	r26, 0x4E	; 78
    dd08:	b3 e0       	ldi	r27, 0x03	; 3
    dd0a:	02 c0       	rjmp	.+4      	; 0xdd10 <ff_wtoupper+0x12>
    dd0c:	aa e0       	ldi	r26, 0x0A	; 10
    dd0e:	b4 e0       	ldi	r27, 0x04	; 4
	for (;;) {
		bc = *p++;								/* Get block base */
    dd10:	4d 91       	ld	r20, X+
    dd12:	5c 91       	ld	r21, X
    dd14:	11 97       	sbiw	r26, 0x01	; 1
		if (!bc || chr < bc) break;
    dd16:	41 15       	cp	r20, r1
    dd18:	51 05       	cpc	r21, r1
    dd1a:	09 f4       	brne	.+2      	; 0xdd1e <ff_wtoupper+0x20>
    dd1c:	43 c0       	rjmp	.+134    	; 0xdda4 <ff_wtoupper+0xa6>
    dd1e:	84 17       	cp	r24, r20
    dd20:	95 07       	cpc	r25, r21
    dd22:	08 f4       	brcc	.+2      	; 0xdd26 <ff_wtoupper+0x28>
    dd24:	3f c0       	rjmp	.+126    	; 0xdda4 <ff_wtoupper+0xa6>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    dd26:	14 96       	adiw	r26, 0x04	; 4
    dd28:	fd 01       	movw	r30, r26
    dd2a:	32 97       	sbiw	r30, 0x02	; 2
    dd2c:	20 81       	ld	r18, Z
    dd2e:	31 81       	ldd	r19, Z+1	; 0x01
    dd30:	e3 2f       	mov	r30, r19
    dd32:	ff 27       	eor	r31, r31
    dd34:	33 27       	eor	r19, r19
		if (chr < bc + nc) {	/* In the block? */
    dd36:	ba 01       	movw	r22, r20
    dd38:	62 0f       	add	r22, r18
    dd3a:	73 1f       	adc	r23, r19
    dd3c:	86 17       	cp	r24, r22
    dd3e:	97 07       	cpc	r25, r23
    dd40:	48 f5       	brcc	.+82     	; 0xdd94 <ff_wtoupper+0x96>
			switch (cmd) {
    dd42:	e9 30       	cpi	r30, 0x09	; 9
    dd44:	f1 05       	cpc	r31, r1
    dd46:	70 f5       	brcc	.+92     	; 0xdda4 <ff_wtoupper+0xa6>
    dd48:	ec 54       	subi	r30, 0x4C	; 76
    dd4a:	ff 4f       	sbci	r31, 0xFF	; 255
    dd4c:	0c 94 c1 ec 	jmp	0x1d982	; 0x1d982 <__tablejump2__>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
    dd50:	fc 01       	movw	r30, r24
    dd52:	e4 1b       	sub	r30, r20
    dd54:	f5 0b       	sbc	r31, r21
    dd56:	ee 0f       	add	r30, r30
    dd58:	ff 1f       	adc	r31, r31
    dd5a:	ea 0f       	add	r30, r26
    dd5c:	fb 1f       	adc	r31, r27
    dd5e:	80 81       	ld	r24, Z
    dd60:	91 81       	ldd	r25, Z+1	; 0x01
    dd62:	08 95       	ret
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
    dd64:	9c 01       	movw	r18, r24
    dd66:	24 1b       	sub	r18, r20
    dd68:	35 0b       	sbc	r19, r21
    dd6a:	21 70       	andi	r18, 0x01	; 1
    dd6c:	33 27       	eor	r19, r19
    dd6e:	82 1b       	sub	r24, r18
    dd70:	93 0b       	sbc	r25, r19
    dd72:	08 95       	ret
			case 2: chr -= 16; break;				/* Shift -16 */
    dd74:	40 97       	sbiw	r24, 0x10	; 16
    dd76:	08 95       	ret
			case 3:	chr -= 32; break;				/* Shift -32 */
    dd78:	80 97       	sbiw	r24, 0x20	; 32
    dd7a:	08 95       	ret
			case 4:	chr -= 48; break;				/* Shift -48 */
    dd7c:	c0 97       	sbiw	r24, 0x30	; 48
    dd7e:	08 95       	ret
			case 5:	chr -= 26; break;				/* Shift -26 */
    dd80:	4a 97       	sbiw	r24, 0x1a	; 26
    dd82:	08 95       	ret
			case 6:	chr += 8; break;				/* Shift +8 */
    dd84:	08 96       	adiw	r24, 0x08	; 8
    dd86:	08 95       	ret
			case 7: chr -= 80; break;				/* Shift -80 */
    dd88:	80 55       	subi	r24, 0x50	; 80
    dd8a:	91 09       	sbc	r25, r1
    dd8c:	08 95       	ret
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
    dd8e:	80 56       	subi	r24, 0x60	; 96
    dd90:	9c 41       	sbci	r25, 0x1C	; 28
    dd92:	08 95       	ret
			}
			break;
		}
		if (!cmd) p += nc;
    dd94:	ef 2b       	or	r30, r31
    dd96:	09 f0       	breq	.+2      	; 0xdd9a <ff_wtoupper+0x9c>
    dd98:	bb cf       	rjmp	.-138    	; 0xdd10 <ff_wtoupper+0x12>
    dd9a:	22 0f       	add	r18, r18
    dd9c:	33 1f       	adc	r19, r19
    dd9e:	a2 0f       	add	r26, r18
    dda0:	b3 1f       	adc	r27, r19
    dda2:	b6 cf       	rjmp	.-148    	; 0xdd10 <ff_wtoupper+0x12>
	}

	return chr;
}
    dda4:	08 95       	ret

0000dda6 <disk_status>:

DSTATUS disk_status (
    BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    dda6:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_status();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_status();
    dda8:	02 c0       	rjmp	.+4      	; 0xddae <disk_status+0x8>
    ddaa:	9b c1       	rjmp	.+822    	; 0xe0e2 <mmc_disk_status>
#endif
    }
    return STA_NOINIT;
    ddac:	08 95       	ret
}
    ddae:	81 e0       	ldi	r24, 0x01	; 1
    ddb0:	08 95       	ret

0000ddb2 <disk_initialize>:

DSTATUS disk_initialize (
    BYTE pdrv               /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    ddb2:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_initialize();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_initialize();
    ddb4:	02 c0       	rjmp	.+4      	; 0xddba <disk_initialize+0x8>
    ddb6:	f8 c0       	rjmp	.+496    	; 0xdfa8 <mmc_disk_initialize>
#endif
    }
    return STA_NOINIT;
    ddb8:	08 95       	ret
}
    ddba:	81 e0       	ldi	r24, 0x01	; 1
    ddbc:	08 95       	ret

0000ddbe <disk_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
    ddbe:	0f 93       	push	r16
    ddc0:	1f 93       	push	r17
    ddc2:	fb 01       	movw	r30, r22
    switch (pdrv) {
    ddc4:	81 11       	cpse	r24, r1
    ddc6:	06 c0       	rjmp	.+12     	; 0xddd4 <disk_read+0x16>
    ddc8:	ba 01       	movw	r22, r20
    ddca:	a9 01       	movw	r20, r18
    ddcc:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_read(buff, sector, count);
    ddce:	98 01       	movw	r18, r16
    ddd0:	8b d1       	rcall	.+790    	; 0xe0e8 <mmc_disk_read>
    ddd2:	02 c0       	rjmp	.+4      	; 0xddd8 <disk_read+0x1a>
#endif
    }
    return RES_PARERR;
    ddd4:	84 e0       	ldi	r24, 0x04	; 4
    ddd6:	90 e0       	ldi	r25, 0x00	; 0
}
    ddd8:	1f 91       	pop	r17
    ddda:	0f 91       	pop	r16
    dddc:	08 95       	ret

0000ddde <disk_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
    ddde:	0f 93       	push	r16
    dde0:	1f 93       	push	r17
    dde2:	fb 01       	movw	r30, r22
    switch (pdrv) {
    dde4:	81 11       	cpse	r24, r1
    dde6:	06 c0       	rjmp	.+12     	; 0xddf4 <disk_write+0x16>
    dde8:	ba 01       	movw	r22, r20
    ddea:	a9 01       	movw	r20, r18
    ddec:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_write(buff, sector, count);
    ddee:	98 01       	movw	r18, r16
    ddf0:	c1 d1       	rcall	.+898    	; 0xe174 <mmc_disk_write>
    ddf2:	02 c0       	rjmp	.+4      	; 0xddf8 <disk_write+0x1a>
#endif
    }
    return RES_PARERR;
    ddf4:	84 e0       	ldi	r24, 0x04	; 4
    ddf6:	90 e0       	ldi	r25, 0x00	; 0
}
    ddf8:	1f 91       	pop	r17
    ddfa:	0f 91       	pop	r16
    ddfc:	08 95       	ret

0000ddfe <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    ddfe:	96 2f       	mov	r25, r22
    switch (pdrv) {
    de00:	81 11       	cpse	r24, r1
    de02:	04 c0       	rjmp	.+8      	; 0xde0c <disk_ioctl+0xe>
    de04:	ba 01       	movw	r22, r20
    case DRV_CFC :
        return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_ioctl(cmd, buff);
    de06:	89 2f       	mov	r24, r25
    de08:	1a c2       	rjmp	.+1076   	; 0xe23e <mmc_disk_ioctl>
#endif
    }
    return RES_PARERR;
    de0a:	08 95       	ret
    de0c:	84 e0       	ldi	r24, 0x04	; 4
}
    de0e:	90 e0       	ldi	r25, 0x00	; 0
    de10:	08 95       	ret

0000de12 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    de12:	17 c5       	rjmp	.+2606   	; 0xe842 <mmc_spi_TXRX>
    de14:	08 95       	ret

0000de16 <deselect>:
    de16:	ec d4       	rcall	.+2520   	; 0xe7f0 <mmc_spi_end>
    de18:	8f ef       	ldi	r24, 0xFF	; 255
    de1a:	fb df       	rcall	.-10     	; 0xde12 <xchg_spi>
    de1c:	8f ef       	ldi	r24, 0xFF	; 255
    de1e:	f9 cf       	rjmp	.-14     	; 0xde12 <xchg_spi>
    de20:	08 95       	ret

0000de22 <rcvr_datablock>:
    de22:	0f 93       	push	r16
    de24:	1f 93       	push	r17
    de26:	cf 93       	push	r28
    de28:	df 93       	push	r29
    de2a:	ec 01       	movw	r28, r24
    de2c:	8b 01       	movw	r16, r22
    de2e:	46 9a       	sbi	0x08, 6	; 8
    de30:	3e 9a       	sbi	0x07, 6	; 7
    de32:	88 ee       	ldi	r24, 0xE8	; 232
    de34:	93 e0       	ldi	r25, 0x03	; 3
    de36:	08 d5       	rcall	.+2576   	; 0xe848 <mmc_set_ms_timeout>
    de38:	8f ef       	ldi	r24, 0xFF	; 255
    de3a:	03 d5       	rcall	.+2566   	; 0xe842 <mmc_spi_TXRX>
    de3c:	8f 3f       	cpi	r24, 0xFF	; 255
    de3e:	31 f4       	brne	.+12     	; 0xde4c <rcvr_datablock+0x2a>
    de40:	0a d5       	rcall	.+2580   	; 0xe856 <mmc_test_timeout>
    de42:	89 2b       	or	r24, r25
    de44:	c9 f3       	breq	.-14     	; 0xde38 <rcvr_datablock+0x16>
    de46:	80 e0       	ldi	r24, 0x00	; 0
    de48:	90 e0       	ldi	r25, 0x00	; 0
    de4a:	0d c0       	rjmp	.+26     	; 0xde66 <rcvr_datablock+0x44>
    de4c:	8e 3f       	cpi	r24, 0xFE	; 254
    de4e:	d9 f7       	brne	.-10     	; 0xde46 <rcvr_datablock+0x24>
    de50:	b8 01       	movw	r22, r16
    de52:	ce 01       	movw	r24, r28
    de54:	f3 d4       	rcall	.+2534   	; 0xe83c <mmc_spi_RX_buffer>
    de56:	8f ef       	ldi	r24, 0xFF	; 255
    de58:	dc df       	rcall	.-72     	; 0xde12 <xchg_spi>
    de5a:	8f ef       	ldi	r24, 0xFF	; 255
    de5c:	da df       	rcall	.-76     	; 0xde12 <xchg_spi>
    de5e:	46 98       	cbi	0x08, 6	; 8
    de60:	3e 9a       	sbi	0x07, 6	; 7
    de62:	81 e0       	ldi	r24, 0x01	; 1
    de64:	90 e0       	ldi	r25, 0x00	; 0
    de66:	df 91       	pop	r29
    de68:	cf 91       	pop	r28
    de6a:	1f 91       	pop	r17
    de6c:	0f 91       	pop	r16
    de6e:	08 95       	ret

0000de70 <wait_ready>:
    de70:	cf 93       	push	r28
    de72:	ea d4       	rcall	.+2516   	; 0xe848 <mmc_set_ms_timeout>
    de74:	8f ef       	ldi	r24, 0xFF	; 255
    de76:	e5 d4       	rcall	.+2506   	; 0xe842 <mmc_spi_TXRX>
    de78:	c8 2f       	mov	r28, r24
    de7a:	8f 3f       	cpi	r24, 0xFF	; 255
    de7c:	19 f0       	breq	.+6      	; 0xde84 <wait_ready+0x14>
    de7e:	eb d4       	rcall	.+2518   	; 0xe856 <mmc_test_timeout>
    de80:	89 2b       	or	r24, r25
    de82:	c1 f3       	breq	.-16     	; 0xde74 <wait_ready+0x4>
    de84:	81 e0       	ldi	r24, 0x01	; 1
    de86:	90 e0       	ldi	r25, 0x00	; 0
    de88:	cf 3f       	cpi	r28, 0xFF	; 255
    de8a:	11 f0       	breq	.+4      	; 0xde90 <wait_ready+0x20>
    de8c:	80 e0       	ldi	r24, 0x00	; 0
    de8e:	90 e0       	ldi	r25, 0x00	; 0
    de90:	cf 91       	pop	r28
    de92:	08 95       	ret

0000de94 <select>:
    de94:	cf 93       	push	r28
    de96:	df 93       	push	r29
    de98:	9e d4       	rcall	.+2364   	; 0xe7d6 <mmc_spi_begin>
    de9a:	8f ef       	ldi	r24, 0xFF	; 255
    de9c:	ba df       	rcall	.-140    	; 0xde12 <xchg_spi>
    de9e:	88 ee       	ldi	r24, 0xE8	; 232
    dea0:	93 e0       	ldi	r25, 0x03	; 3
    dea2:	e6 df       	rcall	.-52     	; 0xde70 <wait_ready>
    dea4:	ec 01       	movw	r28, r24
    dea6:	89 2b       	or	r24, r25
    dea8:	61 f4       	brne	.+24     	; 0xdec2 <select+0x2e>
    deaa:	82 ec       	ldi	r24, 0xC2	; 194
    deac:	97 e0       	ldi	r25, 0x07	; 7
    deae:	1f 92       	push	r1
    deb0:	9f 93       	push	r25
    deb2:	8f 93       	push	r24
    deb4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    deb8:	ae df       	rcall	.-164    	; 0xde16 <deselect>
    deba:	0f 90       	pop	r0
    debc:	0f 90       	pop	r0
    debe:	0f 90       	pop	r0
    dec0:	02 c0       	rjmp	.+4      	; 0xdec6 <select+0x32>
    dec2:	c1 e0       	ldi	r28, 0x01	; 1
    dec4:	d0 e0       	ldi	r29, 0x00	; 0
    dec6:	ce 01       	movw	r24, r28
    dec8:	df 91       	pop	r29
    deca:	cf 91       	pop	r28
    decc:	08 95       	ret

0000dece <send_cmd>:
    dece:	ff 92       	push	r15
    ded0:	0f 93       	push	r16
    ded2:	1f 93       	push	r17
    ded4:	cf 93       	push	r28
    ded6:	df 93       	push	r29
    ded8:	c8 2f       	mov	r28, r24
    deda:	d4 2f       	mov	r29, r20
    dedc:	15 2f       	mov	r17, r21
    dede:	06 2f       	mov	r16, r22
    dee0:	f7 2e       	mov	r15, r23
    dee2:	87 ff       	sbrs	r24, 7
    dee4:	08 c0       	rjmp	.+16     	; 0xdef6 <send_cmd+0x28>
    dee6:	40 e0       	ldi	r20, 0x00	; 0
    dee8:	50 e0       	ldi	r21, 0x00	; 0
    deea:	ba 01       	movw	r22, r20
    deec:	87 e3       	ldi	r24, 0x37	; 55
    deee:	ef df       	rcall	.-34     	; 0xdece <send_cmd>
    def0:	82 30       	cpi	r24, 0x02	; 2
    def2:	58 f5       	brcc	.+86     	; 0xdf4a <send_cmd+0x7c>
    def4:	cf 77       	andi	r28, 0x7F	; 127
    def6:	cc 30       	cpi	r28, 0x0C	; 12
    def8:	71 f4       	brne	.+28     	; 0xdf16 <send_cmd+0x48>
    defa:	8c 2f       	mov	r24, r28
    defc:	80 64       	ori	r24, 0x40	; 64
    defe:	89 df       	rcall	.-238    	; 0xde12 <xchg_spi>
    df00:	8f 2d       	mov	r24, r15
    df02:	87 df       	rcall	.-242    	; 0xde12 <xchg_spi>
    df04:	80 2f       	mov	r24, r16
    df06:	85 df       	rcall	.-246    	; 0xde12 <xchg_spi>
    df08:	81 2f       	mov	r24, r17
    df0a:	83 df       	rcall	.-250    	; 0xde12 <xchg_spi>
    df0c:	8d 2f       	mov	r24, r29
    df0e:	81 df       	rcall	.-254    	; 0xde12 <xchg_spi>
    df10:	cc 23       	and	r28, r28
    df12:	c9 f0       	breq	.+50     	; 0xdf46 <send_cmd+0x78>
    df14:	06 c0       	rjmp	.+12     	; 0xdf22 <send_cmd+0x54>
    df16:	7f df       	rcall	.-258    	; 0xde16 <deselect>
    df18:	bd df       	rcall	.-134    	; 0xde94 <select>
    df1a:	89 2b       	or	r24, r25
    df1c:	71 f7       	brne	.-36     	; 0xdefa <send_cmd+0x2c>
    df1e:	8f ef       	ldi	r24, 0xFF	; 255
    df20:	14 c0       	rjmp	.+40     	; 0xdf4a <send_cmd+0x7c>
    df22:	c8 30       	cpi	r28, 0x08	; 8
    df24:	11 f4       	brne	.+4      	; 0xdf2a <send_cmd+0x5c>
    df26:	87 e8       	ldi	r24, 0x87	; 135
    df28:	01 c0       	rjmp	.+2      	; 0xdf2c <send_cmd+0x5e>
    df2a:	81 e0       	ldi	r24, 0x01	; 1
    df2c:	72 df       	rcall	.-284    	; 0xde12 <xchg_spi>
    df2e:	cc 30       	cpi	r28, 0x0C	; 12
    df30:	11 f4       	brne	.+4      	; 0xdf36 <send_cmd+0x68>
    df32:	8f ef       	ldi	r24, 0xFF	; 255
    df34:	6e df       	rcall	.-292    	; 0xde12 <xchg_spi>
    df36:	ca e0       	ldi	r28, 0x0A	; 10
    df38:	8f ef       	ldi	r24, 0xFF	; 255
    df3a:	83 d4       	rcall	.+2310   	; 0xe842 <mmc_spi_TXRX>
    df3c:	87 ff       	sbrs	r24, 7
    df3e:	05 c0       	rjmp	.+10     	; 0xdf4a <send_cmd+0x7c>
    df40:	c1 50       	subi	r28, 0x01	; 1
    df42:	d1 f7       	brne	.-12     	; 0xdf38 <send_cmd+0x6a>
    df44:	02 c0       	rjmp	.+4      	; 0xdf4a <send_cmd+0x7c>
    df46:	85 e9       	ldi	r24, 0x95	; 149
    df48:	f5 cf       	rjmp	.-22     	; 0xdf34 <send_cmd+0x66>
    df4a:	cd b7       	in	r28, 0x3d	; 61
    df4c:	de b7       	in	r29, 0x3e	; 62
    df4e:	e5 e0       	ldi	r30, 0x05	; 5
    df50:	0c 94 2e ed 	jmp	0x1da5c	; 0x1da5c <__epilogue_restores__+0x1a>

0000df54 <xmit_datablock>:
    df54:	0f 93       	push	r16
    df56:	1f 93       	push	r17
    df58:	cf 93       	push	r28
    df5a:	8c 01       	movw	r16, r24
    df5c:	c6 2f       	mov	r28, r22
    df5e:	47 9a       	sbi	0x08, 7	; 8
    df60:	3f 9a       	sbi	0x07, 7	; 7
    df62:	88 ee       	ldi	r24, 0xE8	; 232
    df64:	93 e0       	ldi	r25, 0x03	; 3
    df66:	84 df       	rcall	.-248    	; 0xde70 <wait_ready>
    df68:	89 2b       	or	r24, r25
    df6a:	19 f4       	brne	.+6      	; 0xdf72 <xmit_datablock+0x1e>
    df6c:	80 e0       	ldi	r24, 0x00	; 0
    df6e:	90 e0       	ldi	r25, 0x00	; 0
    df70:	17 c0       	rjmp	.+46     	; 0xdfa0 <xmit_datablock+0x4c>
    df72:	8c 2f       	mov	r24, r28
    df74:	4e df       	rcall	.-356    	; 0xde12 <xchg_spi>
    df76:	cd 3f       	cpi	r28, 0xFD	; 253
    df78:	29 f4       	brne	.+10     	; 0xdf84 <xmit_datablock+0x30>
    df7a:	46 98       	cbi	0x08, 6	; 8
    df7c:	3e 9a       	sbi	0x07, 6	; 7
    df7e:	81 e0       	ldi	r24, 0x01	; 1
    df80:	90 e0       	ldi	r25, 0x00	; 0
    df82:	0e c0       	rjmp	.+28     	; 0xdfa0 <xmit_datablock+0x4c>
    df84:	60 e0       	ldi	r22, 0x00	; 0
    df86:	72 e0       	ldi	r23, 0x02	; 2
    df88:	c8 01       	movw	r24, r16
    df8a:	55 d4       	rcall	.+2218   	; 0xe836 <mmc_spi_TX_buffer>
    df8c:	8f ef       	ldi	r24, 0xFF	; 255
    df8e:	41 df       	rcall	.-382    	; 0xde12 <xchg_spi>
    df90:	8f ef       	ldi	r24, 0xFF	; 255
    df92:	3f df       	rcall	.-386    	; 0xde12 <xchg_spi>
    df94:	8f ef       	ldi	r24, 0xFF	; 255
    df96:	55 d4       	rcall	.+2218   	; 0xe842 <mmc_spi_TXRX>
    df98:	8f 71       	andi	r24, 0x1F	; 31
    df9a:	85 30       	cpi	r24, 0x05	; 5
    df9c:	39 f7       	brne	.-50     	; 0xdf6c <xmit_datablock+0x18>
    df9e:	ed cf       	rjmp	.-38     	; 0xdf7a <xmit_datablock+0x26>
    dfa0:	cf 91       	pop	r28
    dfa2:	1f 91       	pop	r17
    dfa4:	0f 91       	pop	r16
    dfa6:	08 95       	ret

0000dfa8 <mmc_disk_initialize>:
    dfa8:	a4 e0       	ldi	r26, 0x04	; 4
    dfaa:	b0 e0       	ldi	r27, 0x00	; 0
    dfac:	ea ed       	ldi	r30, 0xDA	; 218
    dfae:	ff e6       	ldi	r31, 0x6F	; 111
    dfb0:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    dfb4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dfb8:	81 fd       	sbrc	r24, 1
    dfba:	8d c0       	rjmp	.+282    	; 0xe0d6 <mmc_disk_initialize+0x12e>
    dfbc:	1d d4       	rcall	.+2106   	; 0xe7f8 <mmc_slow>
    dfbe:	1a e0       	ldi	r17, 0x0A	; 10
    dfc0:	8f ef       	ldi	r24, 0xFF	; 255
    dfc2:	27 df       	rcall	.-434    	; 0xde12 <xchg_spi>
    dfc4:	11 50       	subi	r17, 0x01	; 1
    dfc6:	e1 f7       	brne	.-8      	; 0xdfc0 <mmc_disk_initialize+0x18>
    dfc8:	40 e0       	ldi	r20, 0x00	; 0
    dfca:	50 e0       	ldi	r21, 0x00	; 0
    dfcc:	ba 01       	movw	r22, r20
    dfce:	80 e0       	ldi	r24, 0x00	; 0
    dfd0:	7e df       	rcall	.-260    	; 0xdece <send_cmd>
    dfd2:	81 30       	cpi	r24, 0x01	; 1
    dfd4:	09 f0       	breq	.+2      	; 0xdfd8 <mmc_disk_initialize+0x30>
    dfd6:	6f c0       	rjmp	.+222    	; 0xe0b6 <mmc_disk_initialize+0x10e>
    dfd8:	80 ed       	ldi	r24, 0xD0	; 208
    dfda:	97 e0       	ldi	r25, 0x07	; 7
    dfdc:	35 d4       	rcall	.+2154   	; 0xe848 <mmc_set_ms_timeout>
    dfde:	4a ea       	ldi	r20, 0xAA	; 170
    dfe0:	51 e0       	ldi	r21, 0x01	; 1
    dfe2:	60 e0       	ldi	r22, 0x00	; 0
    dfe4:	70 e0       	ldi	r23, 0x00	; 0
    dfe6:	88 e0       	ldi	r24, 0x08	; 8
    dfe8:	72 df       	rcall	.-284    	; 0xdece <send_cmd>
    dfea:	81 30       	cpi	r24, 0x01	; 1
    dfec:	09 f0       	breq	.+2      	; 0xdff0 <mmc_disk_initialize+0x48>
    dfee:	3d c0       	rjmp	.+122    	; 0xe06a <mmc_disk_initialize+0xc2>
    dff0:	8e 01       	movw	r16, r28
    dff2:	0f 5f       	subi	r16, 0xFF	; 255
    dff4:	1f 4f       	sbci	r17, 0xFF	; 255
    dff6:	6e 01       	movw	r12, r28
    dff8:	85 e0       	ldi	r24, 0x05	; 5
    dffa:	c8 0e       	add	r12, r24
    dffc:	d1 1c       	adc	r13, r1
    dffe:	78 01       	movw	r14, r16
    e000:	8f ef       	ldi	r24, 0xFF	; 255
    e002:	1f d4       	rcall	.+2110   	; 0xe842 <mmc_spi_TXRX>
    e004:	f7 01       	movw	r30, r14
    e006:	81 93       	st	Z+, r24
    e008:	7f 01       	movw	r14, r30
    e00a:	ce 16       	cp	r12, r30
    e00c:	df 06       	cpc	r13, r31
    e00e:	c1 f7       	brne	.-16     	; 0xe000 <mmc_disk_initialize+0x58>
    e010:	8b 81       	ldd	r24, Y+3	; 0x03
    e012:	81 30       	cpi	r24, 0x01	; 1
    e014:	09 f0       	breq	.+2      	; 0xe018 <mmc_disk_initialize+0x70>
    e016:	4f c0       	rjmp	.+158    	; 0xe0b6 <mmc_disk_initialize+0x10e>
    e018:	8c 81       	ldd	r24, Y+4	; 0x04
    e01a:	8a 3a       	cpi	r24, 0xAA	; 170
    e01c:	09 f0       	breq	.+2      	; 0xe020 <mmc_disk_initialize+0x78>
    e01e:	4b c0       	rjmp	.+150    	; 0xe0b6 <mmc_disk_initialize+0x10e>
    e020:	1a d4       	rcall	.+2100   	; 0xe856 <mmc_test_timeout>
    e022:	89 2b       	or	r24, r25
    e024:	29 f0       	breq	.+10     	; 0xe030 <mmc_disk_initialize+0x88>
    e026:	17 d4       	rcall	.+2094   	; 0xe856 <mmc_test_timeout>
    e028:	89 2b       	or	r24, r25
    e02a:	09 f0       	breq	.+2      	; 0xe02e <mmc_disk_initialize+0x86>
    e02c:	44 c0       	rjmp	.+136    	; 0xe0b6 <mmc_disk_initialize+0x10e>
    e02e:	09 c0       	rjmp	.+18     	; 0xe042 <mmc_disk_initialize+0x9a>
    e030:	40 e0       	ldi	r20, 0x00	; 0
    e032:	50 e0       	ldi	r21, 0x00	; 0
    e034:	60 e0       	ldi	r22, 0x00	; 0
    e036:	70 e4       	ldi	r23, 0x40	; 64
    e038:	89 ea       	ldi	r24, 0xA9	; 169
    e03a:	49 df       	rcall	.-366    	; 0xdece <send_cmd>
    e03c:	81 11       	cpse	r24, r1
    e03e:	f0 cf       	rjmp	.-32     	; 0xe020 <mmc_disk_initialize+0x78>
    e040:	f2 cf       	rjmp	.-28     	; 0xe026 <mmc_disk_initialize+0x7e>
    e042:	40 e0       	ldi	r20, 0x00	; 0
    e044:	50 e0       	ldi	r21, 0x00	; 0
    e046:	ba 01       	movw	r22, r20
    e048:	8a e3       	ldi	r24, 0x3A	; 58
    e04a:	41 df       	rcall	.-382    	; 0xdece <send_cmd>
    e04c:	81 11       	cpse	r24, r1
    e04e:	33 c0       	rjmp	.+102    	; 0xe0b6 <mmc_disk_initialize+0x10e>
    e050:	8f ef       	ldi	r24, 0xFF	; 255
    e052:	f7 d3       	rcall	.+2030   	; 0xe842 <mmc_spi_TXRX>
    e054:	f8 01       	movw	r30, r16
    e056:	81 93       	st	Z+, r24
    e058:	8f 01       	movw	r16, r30
    e05a:	ce 16       	cp	r12, r30
    e05c:	df 06       	cpc	r13, r31
    e05e:	c1 f7       	brne	.-16     	; 0xe050 <mmc_disk_initialize+0xa8>
    e060:	89 81       	ldd	r24, Y+1	; 0x01
    e062:	86 fd       	sbrc	r24, 6
    e064:	2a c0       	rjmp	.+84     	; 0xe0ba <mmc_disk_initialize+0x112>
    e066:	14 e0       	ldi	r17, 0x04	; 4
    e068:	29 c0       	rjmp	.+82     	; 0xe0bc <mmc_disk_initialize+0x114>
    e06a:	80 ed       	ldi	r24, 0xD0	; 208
    e06c:	97 e0       	ldi	r25, 0x07	; 7
    e06e:	ec d3       	rcall	.+2008   	; 0xe848 <mmc_set_ms_timeout>
    e070:	40 e0       	ldi	r20, 0x00	; 0
    e072:	50 e0       	ldi	r21, 0x00	; 0
    e074:	ba 01       	movw	r22, r20
    e076:	89 ea       	ldi	r24, 0xA9	; 169
    e078:	2a df       	rcall	.-428    	; 0xdece <send_cmd>
    e07a:	82 30       	cpi	r24, 0x02	; 2
    e07c:	18 f0       	brcs	.+6      	; 0xe084 <mmc_disk_initialize+0xdc>
    e07e:	11 e0       	ldi	r17, 0x01	; 1
    e080:	01 e0       	ldi	r16, 0x01	; 1
    e082:	02 c0       	rjmp	.+4      	; 0xe088 <mmc_disk_initialize+0xe0>
    e084:	12 e0       	ldi	r17, 0x02	; 2
    e086:	09 ea       	ldi	r16, 0xA9	; 169
    e088:	e6 d3       	rcall	.+1996   	; 0xe856 <mmc_test_timeout>
    e08a:	89 2b       	or	r24, r25
    e08c:	21 f0       	breq	.+8      	; 0xe096 <mmc_disk_initialize+0xee>
    e08e:	e3 d3       	rcall	.+1990   	; 0xe856 <mmc_test_timeout>
    e090:	89 2b       	or	r24, r25
    e092:	89 f4       	brne	.+34     	; 0xe0b6 <mmc_disk_initialize+0x10e>
    e094:	08 c0       	rjmp	.+16     	; 0xe0a6 <mmc_disk_initialize+0xfe>
    e096:	40 e0       	ldi	r20, 0x00	; 0
    e098:	50 e0       	ldi	r21, 0x00	; 0
    e09a:	ba 01       	movw	r22, r20
    e09c:	80 2f       	mov	r24, r16
    e09e:	17 df       	rcall	.-466    	; 0xdece <send_cmd>
    e0a0:	81 11       	cpse	r24, r1
    e0a2:	f2 cf       	rjmp	.-28     	; 0xe088 <mmc_disk_initialize+0xe0>
    e0a4:	f4 cf       	rjmp	.-24     	; 0xe08e <mmc_disk_initialize+0xe6>
    e0a6:	40 e0       	ldi	r20, 0x00	; 0
    e0a8:	52 e0       	ldi	r21, 0x02	; 2
    e0aa:	60 e0       	ldi	r22, 0x00	; 0
    e0ac:	70 e0       	ldi	r23, 0x00	; 0
    e0ae:	80 e1       	ldi	r24, 0x10	; 16
    e0b0:	0e df       	rcall	.-484    	; 0xdece <send_cmd>
    e0b2:	88 23       	and	r24, r24
    e0b4:	19 f0       	breq	.+6      	; 0xe0bc <mmc_disk_initialize+0x114>
    e0b6:	10 e0       	ldi	r17, 0x00	; 0
    e0b8:	01 c0       	rjmp	.+2      	; 0xe0bc <mmc_disk_initialize+0x114>
    e0ba:	1c e0       	ldi	r17, 0x0C	; 12
    e0bc:	10 93 54 18 	sts	0x1854, r17	; 0x801854 <CardType>
    e0c0:	aa de       	rcall	.-684    	; 0xde16 <deselect>
    e0c2:	11 23       	and	r17, r17
    e0c4:	39 f0       	breq	.+14     	; 0xe0d4 <mmc_disk_initialize+0x12c>
    e0c6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e0ca:	8e 7f       	andi	r24, 0xFE	; 254
    e0cc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e0d0:	a5 d3       	rcall	.+1866   	; 0xe81c <mmc_fast>
    e0d2:	01 c0       	rjmp	.+2      	; 0xe0d6 <mmc_disk_initialize+0x12e>
    e0d4:	84 d4       	rcall	.+2312   	; 0xe9de <mmc_power_off>
    e0d6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e0da:	24 96       	adiw	r28, 0x04	; 4
    e0dc:	e8 e0       	ldi	r30, 0x08	; 8
    e0de:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000e0e2 <mmc_disk_status>:
    e0e2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e0e6:	08 95       	ret

0000e0e8 <mmc_disk_read>:
    e0e8:	ef 92       	push	r14
    e0ea:	ff 92       	push	r15
    e0ec:	1f 93       	push	r17
    e0ee:	cf 93       	push	r28
    e0f0:	df 93       	push	r29
    e0f2:	7c 01       	movw	r14, r24
    e0f4:	e9 01       	movw	r28, r18
    e0f6:	20 97       	sbiw	r28, 0x00	; 0
    e0f8:	19 f4       	brne	.+6      	; 0xe100 <mmc_disk_read+0x18>
    e0fa:	8d de       	rcall	.-742    	; 0xde16 <deselect>
    e0fc:	84 e0       	ldi	r24, 0x04	; 4
    e0fe:	06 c0       	rjmp	.+12     	; 0xe10c <mmc_disk_read+0x24>
    e100:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e104:	80 ff       	sbrs	r24, 0
    e106:	04 c0       	rjmp	.+8      	; 0xe110 <mmc_disk_read+0x28>
    e108:	86 de       	rcall	.-756    	; 0xde16 <deselect>
    e10a:	83 e0       	ldi	r24, 0x03	; 3
    e10c:	90 e0       	ldi	r25, 0x00	; 0
    e10e:	2c c0       	rjmp	.+88     	; 0xe168 <mmc_disk_read+0x80>
    e110:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <CardType>
    e114:	83 fd       	sbrc	r24, 3
    e116:	07 c0       	rjmp	.+14     	; 0xe126 <mmc_disk_read+0x3e>
    e118:	89 e0       	ldi	r24, 0x09	; 9
    e11a:	44 0f       	add	r20, r20
    e11c:	55 1f       	adc	r21, r21
    e11e:	66 1f       	adc	r22, r22
    e120:	77 1f       	adc	r23, r23
    e122:	8a 95       	dec	r24
    e124:	d1 f7       	brne	.-12     	; 0xe11a <mmc_disk_read+0x32>
    e126:	c2 30       	cpi	r28, 0x02	; 2
    e128:	d1 05       	cpc	r29, r1
    e12a:	10 f4       	brcc	.+4      	; 0xe130 <mmc_disk_read+0x48>
    e12c:	11 e1       	ldi	r17, 0x11	; 17
    e12e:	01 c0       	rjmp	.+2      	; 0xe132 <mmc_disk_read+0x4a>
    e130:	12 e1       	ldi	r17, 0x12	; 18
    e132:	81 2f       	mov	r24, r17
    e134:	cc de       	rcall	.-616    	; 0xdece <send_cmd>
    e136:	81 11       	cpse	r24, r1
    e138:	11 c0       	rjmp	.+34     	; 0xe15c <mmc_disk_read+0x74>
    e13a:	60 e0       	ldi	r22, 0x00	; 0
    e13c:	72 e0       	ldi	r23, 0x02	; 2
    e13e:	c7 01       	movw	r24, r14
    e140:	70 de       	rcall	.-800    	; 0xde22 <rcvr_datablock>
    e142:	89 2b       	or	r24, r25
    e144:	21 f0       	breq	.+8      	; 0xe14e <mmc_disk_read+0x66>
    e146:	8e ef       	ldi	r24, 0xFE	; 254
    e148:	f8 1a       	sub	r15, r24
    e14a:	21 97       	sbiw	r28, 0x01	; 1
    e14c:	b1 f7       	brne	.-20     	; 0xe13a <mmc_disk_read+0x52>
    e14e:	12 31       	cpi	r17, 0x12	; 18
    e150:	29 f4       	brne	.+10     	; 0xe15c <mmc_disk_read+0x74>
    e152:	40 e0       	ldi	r20, 0x00	; 0
    e154:	50 e0       	ldi	r21, 0x00	; 0
    e156:	ba 01       	movw	r22, r20
    e158:	8c e0       	ldi	r24, 0x0C	; 12
    e15a:	b9 de       	rcall	.-654    	; 0xdece <send_cmd>
    e15c:	5c de       	rcall	.-840    	; 0xde16 <deselect>
    e15e:	81 e0       	ldi	r24, 0x01	; 1
    e160:	90 e0       	ldi	r25, 0x00	; 0
    e162:	cd 2b       	or	r28, r29
    e164:	09 f4       	brne	.+2      	; 0xe168 <mmc_disk_read+0x80>
    e166:	80 e0       	ldi	r24, 0x00	; 0
    e168:	df 91       	pop	r29
    e16a:	cf 91       	pop	r28
    e16c:	1f 91       	pop	r17
    e16e:	ff 90       	pop	r15
    e170:	ef 90       	pop	r14
    e172:	08 95       	ret

0000e174 <mmc_disk_write>:
    e174:	a0 e0       	ldi	r26, 0x00	; 0
    e176:	b0 e0       	ldi	r27, 0x00	; 0
    e178:	e0 ec       	ldi	r30, 0xC0	; 192
    e17a:	f0 e7       	ldi	r31, 0x70	; 112
    e17c:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    e180:	8c 01       	movw	r16, r24
    e182:	6a 01       	movw	r12, r20
    e184:	7b 01       	movw	r14, r22
    e186:	e9 01       	movw	r28, r18
    e188:	20 97       	sbiw	r28, 0x00	; 0
    e18a:	19 f4       	brne	.+6      	; 0xe192 <mmc_disk_write+0x1e>
    e18c:	44 de       	rcall	.-888    	; 0xde16 <deselect>
    e18e:	84 e0       	ldi	r24, 0x04	; 4
    e190:	06 c0       	rjmp	.+12     	; 0xe19e <mmc_disk_write+0x2a>
    e192:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e196:	80 ff       	sbrs	r24, 0
    e198:	04 c0       	rjmp	.+8      	; 0xe1a2 <mmc_disk_write+0x2e>
    e19a:	3d de       	rcall	.-902    	; 0xde16 <deselect>
    e19c:	83 e0       	ldi	r24, 0x03	; 3
    e19e:	90 e0       	ldi	r25, 0x00	; 0
    e1a0:	49 c0       	rjmp	.+146    	; 0xe234 <mmc_disk_write+0xc0>
    e1a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e1a6:	82 ff       	sbrs	r24, 2
    e1a8:	03 c0       	rjmp	.+6      	; 0xe1b0 <mmc_disk_write+0x3c>
    e1aa:	35 de       	rcall	.-918    	; 0xde16 <deselect>
    e1ac:	82 e0       	ldi	r24, 0x02	; 2
    e1ae:	f7 cf       	rjmp	.-18     	; 0xe19e <mmc_disk_write+0x2a>
    e1b0:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <CardType>
    e1b4:	83 fd       	sbrc	r24, 3
    e1b6:	07 c0       	rjmp	.+14     	; 0xe1c6 <mmc_disk_write+0x52>
    e1b8:	99 e0       	ldi	r25, 0x09	; 9
    e1ba:	cc 0c       	add	r12, r12
    e1bc:	dd 1c       	adc	r13, r13
    e1be:	ee 1c       	adc	r14, r14
    e1c0:	ff 1c       	adc	r15, r15
    e1c2:	9a 95       	dec	r25
    e1c4:	d1 f7       	brne	.-12     	; 0xe1ba <mmc_disk_write+0x46>
    e1c6:	c1 30       	cpi	r28, 0x01	; 1
    e1c8:	d1 05       	cpc	r29, r1
    e1ca:	89 f4       	brne	.+34     	; 0xe1ee <mmc_disk_write+0x7a>
    e1cc:	b7 01       	movw	r22, r14
    e1ce:	a6 01       	movw	r20, r12
    e1d0:	88 e1       	ldi	r24, 0x18	; 24
    e1d2:	7d de       	rcall	.-774    	; 0xdece <send_cmd>
    e1d4:	81 11       	cpse	r24, r1
    e1d6:	26 c0       	rjmp	.+76     	; 0xe224 <mmc_disk_write+0xb0>
    e1d8:	6e ef       	ldi	r22, 0xFE	; 254
    e1da:	c8 01       	movw	r24, r16
    e1dc:	bb de       	rcall	.-650    	; 0xdf54 <xmit_datablock>
    e1de:	31 e0       	ldi	r19, 0x01	; 1
    e1e0:	20 e0       	ldi	r18, 0x00	; 0
    e1e2:	89 2b       	or	r24, r25
    e1e4:	09 f0       	breq	.+2      	; 0xe1e8 <mmc_disk_write+0x74>
    e1e6:	30 e0       	ldi	r19, 0x00	; 0
    e1e8:	c3 2f       	mov	r28, r19
    e1ea:	d2 2f       	mov	r29, r18
    e1ec:	1d c0       	rjmp	.+58     	; 0xe228 <mmc_disk_write+0xb4>
    e1ee:	86 70       	andi	r24, 0x06	; 6
    e1f0:	29 f0       	breq	.+10     	; 0xe1fc <mmc_disk_write+0x88>
    e1f2:	ae 01       	movw	r20, r28
    e1f4:	60 e0       	ldi	r22, 0x00	; 0
    e1f6:	70 e0       	ldi	r23, 0x00	; 0
    e1f8:	87 e9       	ldi	r24, 0x97	; 151
    e1fa:	69 de       	rcall	.-814    	; 0xdece <send_cmd>
    e1fc:	b7 01       	movw	r22, r14
    e1fe:	a6 01       	movw	r20, r12
    e200:	89 e1       	ldi	r24, 0x19	; 25
    e202:	65 de       	rcall	.-822    	; 0xdece <send_cmd>
    e204:	81 11       	cpse	r24, r1
    e206:	10 c0       	rjmp	.+32     	; 0xe228 <mmc_disk_write+0xb4>
    e208:	6c ef       	ldi	r22, 0xFC	; 252
    e20a:	c8 01       	movw	r24, r16
    e20c:	a3 de       	rcall	.-698    	; 0xdf54 <xmit_datablock>
    e20e:	89 2b       	or	r24, r25
    e210:	19 f0       	breq	.+6      	; 0xe218 <mmc_disk_write+0xa4>
    e212:	1e 5f       	subi	r17, 0xFE	; 254
    e214:	21 97       	sbiw	r28, 0x01	; 1
    e216:	c1 f7       	brne	.-16     	; 0xe208 <mmc_disk_write+0x94>
    e218:	6d ef       	ldi	r22, 0xFD	; 253
    e21a:	80 e0       	ldi	r24, 0x00	; 0
    e21c:	90 e0       	ldi	r25, 0x00	; 0
    e21e:	9a de       	rcall	.-716    	; 0xdf54 <xmit_datablock>
    e220:	89 2b       	or	r24, r25
    e222:	11 f4       	brne	.+4      	; 0xe228 <mmc_disk_write+0xb4>
    e224:	c1 e0       	ldi	r28, 0x01	; 1
    e226:	d0 e0       	ldi	r29, 0x00	; 0
    e228:	f6 dd       	rcall	.-1044   	; 0xde16 <deselect>
    e22a:	81 e0       	ldi	r24, 0x01	; 1
    e22c:	90 e0       	ldi	r25, 0x00	; 0
    e22e:	cd 2b       	or	r28, r29
    e230:	09 f4       	brne	.+2      	; 0xe234 <mmc_disk_write+0xc0>
    e232:	80 e0       	ldi	r24, 0x00	; 0
    e234:	cd b7       	in	r28, 0x3d	; 61
    e236:	de b7       	in	r29, 0x3e	; 62
    e238:	e8 e0       	ldi	r30, 0x08	; 8
    e23a:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000e23e <mmc_disk_ioctl>:
    e23e:	a0 e1       	ldi	r26, 0x10	; 16
    e240:	b0 e0       	ldi	r27, 0x00	; 0
    e242:	e5 e2       	ldi	r30, 0x25	; 37
    e244:	f1 e7       	ldi	r31, 0x71	; 113
    e246:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    e24a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    e24e:	90 fd       	sbrc	r25, 0
    e250:	75 c2       	rjmp	.+1258   	; 0xe73c <mmc_disk_ioctl+0x4fe>
    e252:	8b 01       	movw	r16, r22
    e254:	83 33       	cpi	r24, 0x33	; 51
    e256:	09 f4       	brne	.+2      	; 0xe25a <mmc_disk_ioctl+0x1c>
    e258:	4b c1       	rjmp	.+662    	; 0xe4f0 <mmc_disk_ioctl+0x2b2>
    e25a:	98 f4       	brcc	.+38     	; 0xe282 <mmc_disk_ioctl+0x44>
    e25c:	83 30       	cpi	r24, 0x03	; 3
    e25e:	09 f4       	brne	.+2      	; 0xe262 <mmc_disk_ioctl+0x24>
    e260:	84 c0       	rjmp	.+264    	; 0xe36a <mmc_disk_ioctl+0x12c>
    e262:	28 f4       	brcc	.+10     	; 0xe26e <mmc_disk_ioctl+0x30>
    e264:	88 23       	and	r24, r24
    e266:	09 f1       	breq	.+66     	; 0xe2aa <mmc_disk_ioctl+0x6c>
    e268:	81 30       	cpi	r24, 0x01	; 1
    e26a:	09 f1       	breq	.+66     	; 0xe2ae <mmc_disk_ioctl+0x70>
    e26c:	69 c2       	rjmp	.+1234   	; 0xe740 <mmc_disk_ioctl+0x502>
    e26e:	87 30       	cpi	r24, 0x07	; 7
    e270:	09 f4       	brne	.+2      	; 0xe274 <mmc_disk_ioctl+0x36>
    e272:	74 c1       	rjmp	.+744    	; 0xe55c <mmc_disk_ioctl+0x31e>
    e274:	82 33       	cpi	r24, 0x32	; 50
    e276:	09 f4       	brne	.+2      	; 0xe27a <mmc_disk_ioctl+0x3c>
    e278:	36 c1       	rjmp	.+620    	; 0xe4e6 <mmc_disk_ioctl+0x2a8>
    e27a:	84 30       	cpi	r24, 0x04	; 4
    e27c:	09 f0       	breq	.+2      	; 0xe280 <mmc_disk_ioctl+0x42>
    e27e:	60 c2       	rjmp	.+1216   	; 0xe740 <mmc_disk_ioctl+0x502>
    e280:	ec c0       	rjmp	.+472    	; 0xe45a <mmc_disk_ioctl+0x21c>
    e282:	86 33       	cpi	r24, 0x36	; 54
    e284:	09 f4       	brne	.+2      	; 0xe288 <mmc_disk_ioctl+0x4a>
    e286:	57 c1       	rjmp	.+686    	; 0xe536 <mmc_disk_ioctl+0x2f8>
    e288:	38 f4       	brcc	.+14     	; 0xe298 <mmc_disk_ioctl+0x5a>
    e28a:	84 33       	cpi	r24, 0x34	; 52
    e28c:	09 f4       	brne	.+2      	; 0xe290 <mmc_disk_ioctl+0x52>
    e28e:	35 c1       	rjmp	.+618    	; 0xe4fa <mmc_disk_ioctl+0x2bc>
    e290:	85 33       	cpi	r24, 0x35	; 53
    e292:	09 f4       	brne	.+2      	; 0xe296 <mmc_disk_ioctl+0x58>
    e294:	3c c1       	rjmp	.+632    	; 0xe50e <mmc_disk_ioctl+0x2d0>
    e296:	54 c2       	rjmp	.+1192   	; 0xe740 <mmc_disk_ioctl+0x502>
    e298:	88 33       	cpi	r24, 0x38	; 56
    e29a:	09 f4       	brne	.+2      	; 0xe29e <mmc_disk_ioctl+0x60>
    e29c:	bf c1       	rjmp	.+894    	; 0xe61c <mmc_disk_ioctl+0x3de>
    e29e:	08 f4       	brcc	.+2      	; 0xe2a2 <mmc_disk_ioctl+0x64>
    e2a0:	65 c1       	rjmp	.+714    	; 0xe56c <mmc_disk_ioctl+0x32e>
    e2a2:	89 33       	cpi	r24, 0x39	; 57
    e2a4:	09 f4       	brne	.+2      	; 0xe2a8 <mmc_disk_ioctl+0x6a>
    e2a6:	07 c2       	rjmp	.+1038   	; 0xe6b6 <mmc_disk_ioctl+0x478>
    e2a8:	4b c2       	rjmp	.+1174   	; 0xe740 <mmc_disk_ioctl+0x502>
    e2aa:	f4 dd       	rcall	.-1048   	; 0xde94 <select>
    e2ac:	51 c1       	rjmp	.+674    	; 0xe550 <mmc_disk_ioctl+0x312>
    e2ae:	40 e0       	ldi	r20, 0x00	; 0
    e2b0:	50 e0       	ldi	r21, 0x00	; 0
    e2b2:	ba 01       	movw	r22, r20
    e2b4:	89 e0       	ldi	r24, 0x09	; 9
    e2b6:	0b de       	rcall	.-1002   	; 0xdece <send_cmd>
    e2b8:	81 11       	cpse	r24, r1
    e2ba:	3c c2       	rjmp	.+1144   	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e2bc:	60 e1       	ldi	r22, 0x10	; 16
    e2be:	70 e0       	ldi	r23, 0x00	; 0
    e2c0:	ce 01       	movw	r24, r28
    e2c2:	01 96       	adiw	r24, 0x01	; 1
    e2c4:	ae dd       	rcall	.-1188   	; 0xde22 <rcvr_datablock>
    e2c6:	89 2b       	or	r24, r25
    e2c8:	09 f4       	brne	.+2      	; 0xe2cc <mmc_disk_ioctl+0x8e>
    e2ca:	34 c2       	rjmp	.+1128   	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e2cc:	99 81       	ldd	r25, Y+1	; 0x01
    e2ce:	92 95       	swap	r25
    e2d0:	96 95       	lsr	r25
    e2d2:	96 95       	lsr	r25
    e2d4:	93 70       	andi	r25, 0x03	; 3
    e2d6:	29 85       	ldd	r18, Y+9	; 0x09
    e2d8:	4a 85       	ldd	r20, Y+10	; 0x0a
    e2da:	88 85       	ldd	r24, Y+8	; 0x08
    e2dc:	91 30       	cpi	r25, 0x01	; 1
    e2de:	d9 f4       	brne	.+54     	; 0xe316 <mmc_disk_ioctl+0xd8>
    e2e0:	30 e0       	ldi	r19, 0x00	; 0
    e2e2:	32 2f       	mov	r19, r18
    e2e4:	22 27       	eor	r18, r18
    e2e6:	24 0f       	add	r18, r20
    e2e8:	31 1d       	adc	r19, r1
    e2ea:	8f 73       	andi	r24, 0x3F	; 63
    e2ec:	90 e0       	ldi	r25, 0x00	; 0
    e2ee:	a0 e0       	ldi	r26, 0x00	; 0
    e2f0:	b0 e0       	ldi	r27, 0x00	; 0
    e2f2:	dc 01       	movw	r26, r24
    e2f4:	99 27       	eor	r25, r25
    e2f6:	88 27       	eor	r24, r24
    e2f8:	01 96       	adiw	r24, 0x01	; 1
    e2fa:	a1 1d       	adc	r26, r1
    e2fc:	b1 1d       	adc	r27, r1
    e2fe:	82 0f       	add	r24, r18
    e300:	93 1f       	adc	r25, r19
    e302:	a1 1d       	adc	r26, r1
    e304:	b1 1d       	adc	r27, r1
    e306:	5a e0       	ldi	r21, 0x0A	; 10
    e308:	88 0f       	add	r24, r24
    e30a:	99 1f       	adc	r25, r25
    e30c:	aa 1f       	adc	r26, r26
    e30e:	bb 1f       	adc	r27, r27
    e310:	5a 95       	dec	r21
    e312:	d1 f7       	brne	.-12     	; 0xe308 <mmc_disk_ioctl+0xca>
    e314:	9b c0       	rjmp	.+310    	; 0xe44c <mmc_disk_ioctl+0x20e>
    e316:	22 95       	swap	r18
    e318:	26 95       	lsr	r18
    e31a:	26 95       	lsr	r18
    e31c:	23 70       	andi	r18, 0x03	; 3
    e31e:	f4 e0       	ldi	r31, 0x04	; 4
    e320:	8f 9f       	mul	r24, r31
    e322:	c0 01       	movw	r24, r0
    e324:	11 24       	eor	r1, r1
    e326:	82 0f       	add	r24, r18
    e328:	91 1d       	adc	r25, r1
    e32a:	01 96       	adiw	r24, 0x01	; 1
    e32c:	2f 81       	ldd	r18, Y+7	; 0x07
    e32e:	23 70       	andi	r18, 0x03	; 3
    e330:	30 e0       	ldi	r19, 0x00	; 0
    e332:	32 2f       	mov	r19, r18
    e334:	22 27       	eor	r18, r18
    e336:	33 0f       	add	r19, r19
    e338:	33 0f       	add	r19, r19
    e33a:	82 0f       	add	r24, r18
    e33c:	93 1f       	adc	r25, r19
    e33e:	a0 e0       	ldi	r26, 0x00	; 0
    e340:	b0 e0       	ldi	r27, 0x00	; 0
    e342:	2e 81       	ldd	r18, Y+6	; 0x06
    e344:	32 2f       	mov	r19, r18
    e346:	3f 70       	andi	r19, 0x0F	; 15
    e348:	2b 85       	ldd	r18, Y+11	; 0x0b
    e34a:	22 1f       	adc	r18, r18
    e34c:	22 27       	eor	r18, r18
    e34e:	22 1f       	adc	r18, r18
    e350:	23 0f       	add	r18, r19
    e352:	43 70       	andi	r20, 0x03	; 3
    e354:	44 0f       	add	r20, r20
    e356:	42 0f       	add	r20, r18
    e358:	47 50       	subi	r20, 0x07	; 7
    e35a:	04 c0       	rjmp	.+8      	; 0xe364 <mmc_disk_ioctl+0x126>
    e35c:	88 0f       	add	r24, r24
    e35e:	99 1f       	adc	r25, r25
    e360:	aa 1f       	adc	r26, r26
    e362:	bb 1f       	adc	r27, r27
    e364:	4a 95       	dec	r20
    e366:	d2 f7       	brpl	.-12     	; 0xe35c <mmc_disk_ioctl+0x11e>
    e368:	71 c0       	rjmp	.+226    	; 0xe44c <mmc_disk_ioctl+0x20e>
    e36a:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <CardType>
    e36e:	40 e0       	ldi	r20, 0x00	; 0
    e370:	50 e0       	ldi	r21, 0x00	; 0
    e372:	ba 01       	movw	r22, r20
    e374:	82 ff       	sbrs	r24, 2
    e376:	24 c0       	rjmp	.+72     	; 0xe3c0 <mmc_disk_ioctl+0x182>
    e378:	8d e8       	ldi	r24, 0x8D	; 141
    e37a:	a9 dd       	rcall	.-1198   	; 0xdece <send_cmd>
    e37c:	81 11       	cpse	r24, r1
    e37e:	da c1       	rjmp	.+948    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e380:	8f ef       	ldi	r24, 0xFF	; 255
    e382:	47 dd       	rcall	.-1394   	; 0xde12 <xchg_spi>
    e384:	60 e1       	ldi	r22, 0x10	; 16
    e386:	70 e0       	ldi	r23, 0x00	; 0
    e388:	ce 01       	movw	r24, r28
    e38a:	01 96       	adiw	r24, 0x01	; 1
    e38c:	4a dd       	rcall	.-1388   	; 0xde22 <rcvr_datablock>
    e38e:	89 2b       	or	r24, r25
    e390:	09 f4       	brne	.+2      	; 0xe394 <mmc_disk_ioctl+0x156>
    e392:	d0 c1       	rjmp	.+928    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e394:	a0 e3       	ldi	r26, 0x30	; 48
    e396:	fa 2e       	mov	r15, r26
    e398:	8f ef       	ldi	r24, 0xFF	; 255
    e39a:	3b dd       	rcall	.-1418   	; 0xde12 <xchg_spi>
    e39c:	fa 94       	dec	r15
    e39e:	f1 10       	cpse	r15, r1
    e3a0:	fb cf       	rjmp	.-10     	; 0xe398 <mmc_disk_ioctl+0x15a>
    e3a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    e3a4:	22 95       	swap	r18
    e3a6:	2f 70       	andi	r18, 0x0F	; 15
    e3a8:	80 e1       	ldi	r24, 0x10	; 16
    e3aa:	90 e0       	ldi	r25, 0x00	; 0
    e3ac:	a0 e0       	ldi	r26, 0x00	; 0
    e3ae:	b0 e0       	ldi	r27, 0x00	; 0
    e3b0:	04 c0       	rjmp	.+8      	; 0xe3ba <mmc_disk_ioctl+0x17c>
    e3b2:	88 0f       	add	r24, r24
    e3b4:	99 1f       	adc	r25, r25
    e3b6:	aa 1f       	adc	r26, r26
    e3b8:	bb 1f       	adc	r27, r27
    e3ba:	2a 95       	dec	r18
    e3bc:	d2 f7       	brpl	.-12     	; 0xe3b2 <mmc_disk_ioctl+0x174>
    e3be:	46 c0       	rjmp	.+140    	; 0xe44c <mmc_disk_ioctl+0x20e>
    e3c0:	89 e0       	ldi	r24, 0x09	; 9
    e3c2:	85 dd       	rcall	.-1270   	; 0xdece <send_cmd>
    e3c4:	81 11       	cpse	r24, r1
    e3c6:	b6 c1       	rjmp	.+876    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e3c8:	60 e1       	ldi	r22, 0x10	; 16
    e3ca:	70 e0       	ldi	r23, 0x00	; 0
    e3cc:	ce 01       	movw	r24, r28
    e3ce:	01 96       	adiw	r24, 0x01	; 1
    e3d0:	28 dd       	rcall	.-1456   	; 0xde22 <rcvr_datablock>
    e3d2:	89 2b       	or	r24, r25
    e3d4:	09 f4       	brne	.+2      	; 0xe3d8 <mmc_disk_ioctl+0x19a>
    e3d6:	ae c1       	rjmp	.+860    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e3d8:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <CardType>
    e3dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    e3de:	8c 85       	ldd	r24, Y+12	; 0x0c
    e3e0:	91 ff       	sbrs	r25, 1
    e3e2:	16 c0       	rjmp	.+44     	; 0xe410 <mmc_disk_ioctl+0x1d2>
    e3e4:	2f 73       	andi	r18, 0x3F	; 63
    e3e6:	88 1f       	adc	r24, r24
    e3e8:	88 27       	eor	r24, r24
    e3ea:	88 1f       	adc	r24, r24
    e3ec:	90 e0       	ldi	r25, 0x00	; 0
    e3ee:	01 96       	adiw	r24, 0x01	; 1
    e3f0:	82 0f       	add	r24, r18
    e3f2:	91 1d       	adc	r25, r1
    e3f4:	82 0f       	add	r24, r18
    e3f6:	91 1d       	adc	r25, r1
    e3f8:	2e 85       	ldd	r18, Y+14	; 0x0e
    e3fa:	22 95       	swap	r18
    e3fc:	26 95       	lsr	r18
    e3fe:	26 95       	lsr	r18
    e400:	23 70       	andi	r18, 0x03	; 3
    e402:	21 50       	subi	r18, 0x01	; 1
    e404:	02 c0       	rjmp	.+4      	; 0xe40a <mmc_disk_ioctl+0x1cc>
    e406:	88 0f       	add	r24, r24
    e408:	99 1f       	adc	r25, r25
    e40a:	2a 95       	dec	r18
    e40c:	e2 f7       	brpl	.-8      	; 0xe406 <mmc_disk_ioctl+0x1c8>
    e40e:	1c c0       	rjmp	.+56     	; 0xe448 <mmc_disk_ioctl+0x20a>
    e410:	38 2f       	mov	r19, r24
    e412:	33 70       	andi	r19, 0x03	; 3
    e414:	82 95       	swap	r24
    e416:	86 95       	lsr	r24
    e418:	87 70       	andi	r24, 0x07	; 7
    e41a:	90 e0       	ldi	r25, 0x00	; 0
    e41c:	f8 e0       	ldi	r31, 0x08	; 8
    e41e:	3f 9f       	mul	r19, r31
    e420:	80 0d       	add	r24, r0
    e422:	91 1d       	adc	r25, r1
    e424:	11 24       	eor	r1, r1
    e426:	01 96       	adiw	r24, 0x01	; 1
    e428:	2c 77       	andi	r18, 0x7C	; 124
    e42a:	30 e0       	ldi	r19, 0x00	; 0
    e42c:	35 95       	asr	r19
    e42e:	27 95       	ror	r18
    e430:	35 95       	asr	r19
    e432:	27 95       	ror	r18
    e434:	2f 5f       	subi	r18, 0xFF	; 255
    e436:	3f 4f       	sbci	r19, 0xFF	; 255
    e438:	82 9f       	mul	r24, r18
    e43a:	a0 01       	movw	r20, r0
    e43c:	83 9f       	mul	r24, r19
    e43e:	50 0d       	add	r21, r0
    e440:	92 9f       	mul	r25, r18
    e442:	50 0d       	add	r21, r0
    e444:	11 24       	eor	r1, r1
    e446:	ca 01       	movw	r24, r20
    e448:	a0 e0       	ldi	r26, 0x00	; 0
    e44a:	b0 e0       	ldi	r27, 0x00	; 0
    e44c:	f8 01       	movw	r30, r16
    e44e:	80 83       	st	Z, r24
    e450:	91 83       	std	Z+1, r25	; 0x01
    e452:	a2 83       	std	Z+2, r26	; 0x02
    e454:	b3 83       	std	Z+3, r27	; 0x03
    e456:	00 e0       	ldi	r16, 0x00	; 0
    e458:	6e c1       	rjmp	.+732    	; 0xe736 <mmc_disk_ioctl+0x4f8>
    e45a:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <CardType>
    e45e:	86 70       	andi	r24, 0x06	; 6
    e460:	11 f4       	brne	.+4      	; 0xe466 <mmc_disk_ioctl+0x228>
    e462:	01 e0       	ldi	r16, 0x01	; 1
    e464:	6e c1       	rjmp	.+732    	; 0xe742 <mmc_disk_ioctl+0x504>
    e466:	be 01       	movw	r22, r28
    e468:	6f 5f       	subi	r22, 0xFF	; 255
    e46a:	7f 4f       	sbci	r23, 0xFF	; 255
    e46c:	83 e3       	ldi	r24, 0x33	; 51
    e46e:	e7 de       	rcall	.-562    	; 0xe23e <mmc_disk_ioctl>
    e470:	89 2b       	or	r24, r25
    e472:	b9 f7       	brne	.-18     	; 0xe462 <mmc_disk_ioctl+0x224>
    e474:	89 81       	ldd	r24, Y+1	; 0x01
    e476:	82 95       	swap	r24
    e478:	86 95       	lsr	r24
    e47a:	86 95       	lsr	r24
    e47c:	83 70       	andi	r24, 0x03	; 3
    e47e:	19 f4       	brne	.+6      	; 0xe486 <mmc_disk_ioctl+0x248>
    e480:	8b 85       	ldd	r24, Y+11	; 0x0b
    e482:	86 ff       	sbrs	r24, 6
    e484:	ee cf       	rjmp	.-36     	; 0xe462 <mmc_disk_ioctl+0x224>
    e486:	f8 01       	movw	r30, r16
    e488:	40 81       	ld	r20, Z
    e48a:	51 81       	ldd	r21, Z+1	; 0x01
    e48c:	62 81       	ldd	r22, Z+2	; 0x02
    e48e:	73 81       	ldd	r23, Z+3	; 0x03
    e490:	c4 80       	ldd	r12, Z+4	; 0x04
    e492:	d5 80       	ldd	r13, Z+5	; 0x05
    e494:	e6 80       	ldd	r14, Z+6	; 0x06
    e496:	f7 80       	ldd	r15, Z+7	; 0x07
    e498:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <CardType>
    e49c:	83 fd       	sbrc	r24, 3
    e49e:	0e c0       	rjmp	.+28     	; 0xe4bc <mmc_disk_ioctl+0x27e>
    e4a0:	39 e0       	ldi	r19, 0x09	; 9
    e4a2:	44 0f       	add	r20, r20
    e4a4:	55 1f       	adc	r21, r21
    e4a6:	66 1f       	adc	r22, r22
    e4a8:	77 1f       	adc	r23, r23
    e4aa:	3a 95       	dec	r19
    e4ac:	d1 f7       	brne	.-12     	; 0xe4a2 <mmc_disk_ioctl+0x264>
    e4ae:	e9 e0       	ldi	r30, 0x09	; 9
    e4b0:	cc 0c       	add	r12, r12
    e4b2:	dd 1c       	adc	r13, r13
    e4b4:	ee 1c       	adc	r14, r14
    e4b6:	ff 1c       	adc	r15, r15
    e4b8:	ea 95       	dec	r30
    e4ba:	d1 f7       	brne	.-12     	; 0xe4b0 <mmc_disk_ioctl+0x272>
    e4bc:	80 e2       	ldi	r24, 0x20	; 32
    e4be:	07 dd       	rcall	.-1522   	; 0xdece <send_cmd>
    e4c0:	81 11       	cpse	r24, r1
    e4c2:	38 c1       	rjmp	.+624    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e4c4:	b7 01       	movw	r22, r14
    e4c6:	a6 01       	movw	r20, r12
    e4c8:	81 e2       	ldi	r24, 0x21	; 33
    e4ca:	01 dd       	rcall	.-1534   	; 0xdece <send_cmd>
    e4cc:	81 11       	cpse	r24, r1
    e4ce:	32 c1       	rjmp	.+612    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e4d0:	40 e0       	ldi	r20, 0x00	; 0
    e4d2:	50 e0       	ldi	r21, 0x00	; 0
    e4d4:	ba 01       	movw	r22, r20
    e4d6:	86 e2       	ldi	r24, 0x26	; 38
    e4d8:	fa dc       	rcall	.-1548   	; 0xdece <send_cmd>
    e4da:	81 11       	cpse	r24, r1
    e4dc:	2b c1       	rjmp	.+598    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e4de:	80 e3       	ldi	r24, 0x30	; 48
    e4e0:	95 e7       	ldi	r25, 0x75	; 117
    e4e2:	c6 dc       	rcall	.-1652   	; 0xde70 <wait_ready>
    e4e4:	35 c0       	rjmp	.+106    	; 0xe550 <mmc_disk_ioctl+0x312>
    e4e6:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <CardType>
    e4ea:	fb 01       	movw	r30, r22
    e4ec:	80 83       	st	Z, r24
    e4ee:	3c c0       	rjmp	.+120    	; 0xe568 <mmc_disk_ioctl+0x32a>
    e4f0:	40 e0       	ldi	r20, 0x00	; 0
    e4f2:	50 e0       	ldi	r21, 0x00	; 0
    e4f4:	ba 01       	movw	r22, r20
    e4f6:	89 e0       	ldi	r24, 0x09	; 9
    e4f8:	04 c0       	rjmp	.+8      	; 0xe502 <mmc_disk_ioctl+0x2c4>
    e4fa:	40 e0       	ldi	r20, 0x00	; 0
    e4fc:	50 e0       	ldi	r21, 0x00	; 0
    e4fe:	ba 01       	movw	r22, r20
    e500:	8a e0       	ldi	r24, 0x0A	; 10
    e502:	e5 dc       	rcall	.-1590   	; 0xdece <send_cmd>
    e504:	81 11       	cpse	r24, r1
    e506:	16 c1       	rjmp	.+556    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e508:	60 e1       	ldi	r22, 0x10	; 16
    e50a:	70 e0       	ldi	r23, 0x00	; 0
    e50c:	1f c0       	rjmp	.+62     	; 0xe54c <mmc_disk_ioctl+0x30e>
    e50e:	40 e0       	ldi	r20, 0x00	; 0
    e510:	50 e0       	ldi	r21, 0x00	; 0
    e512:	ba 01       	movw	r22, r20
    e514:	8a e3       	ldi	r24, 0x3A	; 58
    e516:	db dc       	rcall	.-1610   	; 0xdece <send_cmd>
    e518:	81 11       	cpse	r24, r1
    e51a:	0c c1       	rjmp	.+536    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e51c:	78 01       	movw	r14, r16
    e51e:	f4 e0       	ldi	r31, 0x04	; 4
    e520:	ef 0e       	add	r14, r31
    e522:	f1 1c       	adc	r15, r1
    e524:	8f ef       	ldi	r24, 0xFF	; 255
    e526:	8d d1       	rcall	.+794    	; 0xe842 <mmc_spi_TXRX>
    e528:	f8 01       	movw	r30, r16
    e52a:	81 93       	st	Z+, r24
    e52c:	8f 01       	movw	r16, r30
    e52e:	ee 15       	cp	r30, r14
    e530:	ff 05       	cpc	r31, r15
    e532:	c1 f7       	brne	.-16     	; 0xe524 <mmc_disk_ioctl+0x2e6>
    e534:	90 cf       	rjmp	.-224    	; 0xe456 <mmc_disk_ioctl+0x218>
    e536:	40 e0       	ldi	r20, 0x00	; 0
    e538:	50 e0       	ldi	r21, 0x00	; 0
    e53a:	ba 01       	movw	r22, r20
    e53c:	8d e8       	ldi	r24, 0x8D	; 141
    e53e:	c7 dc       	rcall	.-1650   	; 0xdece <send_cmd>
    e540:	81 11       	cpse	r24, r1
    e542:	f8 c0       	rjmp	.+496    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e544:	8f ef       	ldi	r24, 0xFF	; 255
    e546:	65 dc       	rcall	.-1846   	; 0xde12 <xchg_spi>
    e548:	60 e4       	ldi	r22, 0x40	; 64
    e54a:	70 e0       	ldi	r23, 0x00	; 0
    e54c:	c8 01       	movw	r24, r16
    e54e:	69 dc       	rcall	.-1838   	; 0xde22 <rcvr_datablock>
    e550:	01 e0       	ldi	r16, 0x01	; 1
    e552:	10 e0       	ldi	r17, 0x00	; 0
    e554:	89 2b       	or	r24, r25
    e556:	09 f4       	brne	.+2      	; 0xe55a <mmc_disk_ioctl+0x31c>
    e558:	ef c0       	rjmp	.+478    	; 0xe738 <mmc_disk_ioctl+0x4fa>
    e55a:	ea c0       	rjmp	.+468    	; 0xe730 <mmc_disk_ioctl+0x4f2>
    e55c:	40 d2       	rcall	.+1152   	; 0xe9de <mmc_power_off>
    e55e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e562:	81 60       	ori	r24, 0x01	; 1
    e564:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e568:	00 e0       	ldi	r16, 0x00	; 0
    e56a:	eb c0       	rjmp	.+470    	; 0xe742 <mmc_disk_ioctl+0x504>
    e56c:	fb 01       	movw	r30, r22
    e56e:	43 81       	ldd	r20, Z+3	; 0x03
    e570:	54 81       	ldd	r21, Z+4	; 0x04
    e572:	65 81       	ldd	r22, Z+5	; 0x05
    e574:	76 81       	ldd	r23, Z+6	; 0x06
    e576:	39 e0       	ldi	r19, 0x09	; 9
    e578:	44 0f       	add	r20, r20
    e57a:	55 1f       	adc	r21, r21
    e57c:	66 1f       	adc	r22, r22
    e57e:	77 1f       	adc	r23, r23
    e580:	3a 95       	dec	r19
    e582:	d1 f7       	brne	.-12     	; 0xe578 <mmc_disk_ioctl+0x33a>
    e584:	70 68       	ori	r23, 0x80	; 128
    e586:	80 81       	ld	r24, Z
    e588:	90 e0       	ldi	r25, 0x00	; 0
    e58a:	a0 e0       	ldi	r26, 0x00	; 0
    e58c:	b0 e0       	ldi	r27, 0x00	; 0
    e58e:	2c e1       	ldi	r18, 0x1C	; 28
    e590:	88 0f       	add	r24, r24
    e592:	99 1f       	adc	r25, r25
    e594:	aa 1f       	adc	r26, r26
    e596:	bb 1f       	adc	r27, r27
    e598:	2a 95       	dec	r18
    e59a:	d1 f7       	brne	.-12     	; 0xe590 <mmc_disk_ioctl+0x352>
    e59c:	48 2b       	or	r20, r24
    e59e:	59 2b       	or	r21, r25
    e5a0:	6a 2b       	or	r22, r26
    e5a2:	7b 2b       	or	r23, r27
    e5a4:	81 81       	ldd	r24, Z+1	; 0x01
    e5a6:	92 81       	ldd	r25, Z+2	; 0x02
    e5a8:	01 97       	sbiw	r24, 0x01	; 1
    e5aa:	91 70       	andi	r25, 0x01	; 1
    e5ac:	a0 e0       	ldi	r26, 0x00	; 0
    e5ae:	b0 e0       	ldi	r27, 0x00	; 0
    e5b0:	48 2b       	or	r20, r24
    e5b2:	59 2b       	or	r21, r25
    e5b4:	6a 2b       	or	r22, r26
    e5b6:	7b 2b       	or	r23, r27
    e5b8:	80 e3       	ldi	r24, 0x30	; 48
    e5ba:	89 dc       	rcall	.-1774   	; 0xdece <send_cmd>
    e5bc:	81 11       	cpse	r24, r1
    e5be:	ba c0       	rjmp	.+372    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e5c0:	88 ee       	ldi	r24, 0xE8	; 232
    e5c2:	93 e0       	ldi	r25, 0x03	; 3
    e5c4:	41 d1       	rcall	.+642    	; 0xe848 <mmc_set_ms_timeout>
    e5c6:	8f ef       	ldi	r24, 0xFF	; 255
    e5c8:	3c d1       	rcall	.+632    	; 0xe842 <mmc_spi_TXRX>
    e5ca:	8f 3f       	cpi	r24, 0xFF	; 255
    e5cc:	21 f4       	brne	.+8      	; 0xe5d6 <mmc_disk_ioctl+0x398>
    e5ce:	43 d1       	rcall	.+646    	; 0xe856 <mmc_test_timeout>
    e5d0:	89 2b       	or	r24, r25
    e5d2:	c9 f3       	breq	.-14     	; 0xe5c6 <mmc_disk_ioctl+0x388>
    e5d4:	af c0       	rjmp	.+350    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e5d6:	8e 3f       	cpi	r24, 0xFE	; 254
    e5d8:	09 f0       	breq	.+2      	; 0xe5dc <mmc_disk_ioctl+0x39e>
    e5da:	ac c0       	rjmp	.+344    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e5dc:	f8 01       	movw	r30, r16
    e5de:	e7 80       	ldd	r14, Z+7	; 0x07
    e5e0:	f0 84       	ldd	r15, Z+8	; 0x08
    e5e2:	c1 80       	ldd	r12, Z+1	; 0x01
    e5e4:	d2 80       	ldd	r13, Z+2	; 0x02
    e5e6:	ce 0c       	add	r12, r14
    e5e8:	df 1c       	adc	r13, r15
    e5ea:	ce 14       	cp	r12, r14
    e5ec:	df 04       	cpc	r13, r15
    e5ee:	31 f0       	breq	.+12     	; 0xe5fc <mmc_disk_ioctl+0x3be>
    e5f0:	8f ef       	ldi	r24, 0xFF	; 255
    e5f2:	27 d1       	rcall	.+590    	; 0xe842 <mmc_spi_TXRX>
    e5f4:	f7 01       	movw	r30, r14
    e5f6:	81 93       	st	Z+, r24
    e5f8:	7f 01       	movw	r14, r30
    e5fa:	f7 cf       	rjmp	.-18     	; 0xe5ea <mmc_disk_ioctl+0x3ac>
    e5fc:	f8 01       	movw	r30, r16
    e5fe:	81 81       	ldd	r24, Z+1	; 0x01
    e600:	92 81       	ldd	r25, Z+2	; 0x02
    e602:	02 e0       	ldi	r16, 0x02	; 2
    e604:	12 e0       	ldi	r17, 0x02	; 2
    e606:	08 1b       	sub	r16, r24
    e608:	19 0b       	sbc	r17, r25
    e60a:	01 15       	cp	r16, r1
    e60c:	11 05       	cpc	r17, r1
    e60e:	09 f4       	brne	.+2      	; 0xe612 <mmc_disk_ioctl+0x3d4>
    e610:	22 cf       	rjmp	.-444    	; 0xe456 <mmc_disk_ioctl+0x218>
    e612:	8f ef       	ldi	r24, 0xFF	; 255
    e614:	fe db       	rcall	.-2052   	; 0xde12 <xchg_spi>
    e616:	01 50       	subi	r16, 0x01	; 1
    e618:	11 09       	sbc	r17, r1
    e61a:	f7 cf       	rjmp	.-18     	; 0xe60a <mmc_disk_ioctl+0x3cc>
    e61c:	fb 01       	movw	r30, r22
    e61e:	43 81       	ldd	r20, Z+3	; 0x03
    e620:	54 81       	ldd	r21, Z+4	; 0x04
    e622:	65 81       	ldd	r22, Z+5	; 0x05
    e624:	76 81       	ldd	r23, Z+6	; 0x06
    e626:	39 e0       	ldi	r19, 0x09	; 9
    e628:	44 0f       	add	r20, r20
    e62a:	55 1f       	adc	r21, r21
    e62c:	66 1f       	adc	r22, r22
    e62e:	77 1f       	adc	r23, r23
    e630:	3a 95       	dec	r19
    e632:	d1 f7       	brne	.-12     	; 0xe628 <mmc_disk_ioctl+0x3ea>
    e634:	70 68       	ori	r23, 0x80	; 128
    e636:	80 81       	ld	r24, Z
    e638:	90 e0       	ldi	r25, 0x00	; 0
    e63a:	a0 e0       	ldi	r26, 0x00	; 0
    e63c:	b0 e0       	ldi	r27, 0x00	; 0
    e63e:	2c e1       	ldi	r18, 0x1C	; 28
    e640:	88 0f       	add	r24, r24
    e642:	99 1f       	adc	r25, r25
    e644:	aa 1f       	adc	r26, r26
    e646:	bb 1f       	adc	r27, r27
    e648:	2a 95       	dec	r18
    e64a:	d1 f7       	brne	.-12     	; 0xe640 <mmc_disk_ioctl+0x402>
    e64c:	48 2b       	or	r20, r24
    e64e:	59 2b       	or	r21, r25
    e650:	6a 2b       	or	r22, r26
    e652:	7b 2b       	or	r23, r27
    e654:	81 81       	ldd	r24, Z+1	; 0x01
    e656:	92 81       	ldd	r25, Z+2	; 0x02
    e658:	01 97       	sbiw	r24, 0x01	; 1
    e65a:	91 70       	andi	r25, 0x01	; 1
    e65c:	a0 e0       	ldi	r26, 0x00	; 0
    e65e:	b0 e0       	ldi	r27, 0x00	; 0
    e660:	48 2b       	or	r20, r24
    e662:	59 2b       	or	r21, r25
    e664:	6a 2b       	or	r22, r26
    e666:	7b 2b       	or	r23, r27
    e668:	81 e3       	ldi	r24, 0x31	; 49
    e66a:	31 dc       	rcall	.-1950   	; 0xdece <send_cmd>
    e66c:	81 11       	cpse	r24, r1
    e66e:	62 c0       	rjmp	.+196    	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e670:	8f ef       	ldi	r24, 0xFF	; 255
    e672:	cf db       	rcall	.-2146   	; 0xde12 <xchg_spi>
    e674:	8e ef       	ldi	r24, 0xFE	; 254
    e676:	cd db       	rcall	.-2150   	; 0xde12 <xchg_spi>
    e678:	f8 01       	movw	r30, r16
    e67a:	e7 80       	ldd	r14, Z+7	; 0x07
    e67c:	f0 84       	ldd	r15, Z+8	; 0x08
    e67e:	c1 80       	ldd	r12, Z+1	; 0x01
    e680:	d2 80       	ldd	r13, Z+2	; 0x02
    e682:	ce 0c       	add	r12, r14
    e684:	df 1c       	adc	r13, r15
    e686:	ec 14       	cp	r14, r12
    e688:	fd 04       	cpc	r15, r13
    e68a:	29 f0       	breq	.+10     	; 0xe696 <mmc_disk_ioctl+0x458>
    e68c:	f7 01       	movw	r30, r14
    e68e:	81 91       	ld	r24, Z+
    e690:	7f 01       	movw	r14, r30
    e692:	bf db       	rcall	.-2178   	; 0xde12 <xchg_spi>
    e694:	f8 cf       	rjmp	.-16     	; 0xe686 <mmc_disk_ioctl+0x448>
    e696:	f8 01       	movw	r30, r16
    e698:	81 81       	ldd	r24, Z+1	; 0x01
    e69a:	92 81       	ldd	r25, Z+2	; 0x02
    e69c:	02 e0       	ldi	r16, 0x02	; 2
    e69e:	12 e0       	ldi	r17, 0x02	; 2
    e6a0:	08 1b       	sub	r16, r24
    e6a2:	19 0b       	sbc	r17, r25
    e6a4:	8f ef       	ldi	r24, 0xFF	; 255
    e6a6:	01 15       	cp	r16, r1
    e6a8:	11 05       	cpc	r17, r1
    e6aa:	09 f4       	brne	.+2      	; 0xe6ae <mmc_disk_ioctl+0x470>
    e6ac:	3b c0       	rjmp	.+118    	; 0xe724 <mmc_disk_ioctl+0x4e6>
    e6ae:	b1 db       	rcall	.-2206   	; 0xde12 <xchg_spi>
    e6b0:	01 50       	subi	r16, 0x01	; 1
    e6b2:	11 09       	sbc	r17, r1
    e6b4:	f7 cf       	rjmp	.-18     	; 0xe6a4 <mmc_disk_ioctl+0x466>
    e6b6:	fb 01       	movw	r30, r22
    e6b8:	43 81       	ldd	r20, Z+3	; 0x03
    e6ba:	54 81       	ldd	r21, Z+4	; 0x04
    e6bc:	65 81       	ldd	r22, Z+5	; 0x05
    e6be:	76 81       	ldd	r23, Z+6	; 0x06
    e6c0:	89 e0       	ldi	r24, 0x09	; 9
    e6c2:	44 0f       	add	r20, r20
    e6c4:	55 1f       	adc	r21, r21
    e6c6:	66 1f       	adc	r22, r22
    e6c8:	77 1f       	adc	r23, r23
    e6ca:	8a 95       	dec	r24
    e6cc:	d1 f7       	brne	.-12     	; 0xe6c2 <mmc_disk_ioctl+0x484>
    e6ce:	74 68       	ori	r23, 0x84	; 132
    e6d0:	80 81       	ld	r24, Z
    e6d2:	90 e0       	ldi	r25, 0x00	; 0
    e6d4:	a0 e0       	ldi	r26, 0x00	; 0
    e6d6:	b0 e0       	ldi	r27, 0x00	; 0
    e6d8:	2c e1       	ldi	r18, 0x1C	; 28
    e6da:	88 0f       	add	r24, r24
    e6dc:	99 1f       	adc	r25, r25
    e6de:	aa 1f       	adc	r26, r26
    e6e0:	bb 1f       	adc	r27, r27
    e6e2:	2a 95       	dec	r18
    e6e4:	d1 f7       	brne	.-12     	; 0xe6da <mmc_disk_ioctl+0x49c>
    e6e6:	48 2b       	or	r20, r24
    e6e8:	59 2b       	or	r21, r25
    e6ea:	6a 2b       	or	r22, r26
    e6ec:	7b 2b       	or	r23, r27
    e6ee:	82 81       	ldd	r24, Z+2	; 0x02
    e6f0:	90 e0       	ldi	r25, 0x00	; 0
    e6f2:	a0 e0       	ldi	r26, 0x00	; 0
    e6f4:	b0 e0       	ldi	r27, 0x00	; 0
    e6f6:	48 2b       	or	r20, r24
    e6f8:	59 2b       	or	r21, r25
    e6fa:	6a 2b       	or	r22, r26
    e6fc:	7b 2b       	or	r23, r27
    e6fe:	81 e3       	ldi	r24, 0x31	; 49
    e700:	e6 db       	rcall	.-2100   	; 0xdece <send_cmd>
    e702:	81 11       	cpse	r24, r1
    e704:	17 c0       	rjmp	.+46     	; 0xe734 <mmc_disk_ioctl+0x4f6>
    e706:	8f ef       	ldi	r24, 0xFF	; 255
    e708:	84 db       	rcall	.-2296   	; 0xde12 <xchg_spi>
    e70a:	8e ef       	ldi	r24, 0xFE	; 254
    e70c:	82 db       	rcall	.-2300   	; 0xde12 <xchg_spi>
    e70e:	f8 01       	movw	r30, r16
    e710:	81 81       	ldd	r24, Z+1	; 0x01
    e712:	7f db       	rcall	.-2306   	; 0xde12 <xchg_spi>
    e714:	01 e0       	ldi	r16, 0x01	; 1
    e716:	12 e0       	ldi	r17, 0x02	; 2
    e718:	8f ef       	ldi	r24, 0xFF	; 255
    e71a:	7b db       	rcall	.-2314   	; 0xde12 <xchg_spi>
    e71c:	01 50       	subi	r16, 0x01	; 1
    e71e:	11 09       	sbc	r17, r1
    e720:	d9 f7       	brne	.-10     	; 0xe718 <mmc_disk_ioctl+0x4da>
    e722:	8f ef       	ldi	r24, 0xFF	; 255
    e724:	8e d0       	rcall	.+284    	; 0xe842 <mmc_spi_TXRX>
    e726:	8f 71       	andi	r24, 0x1F	; 31
    e728:	01 e0       	ldi	r16, 0x01	; 1
    e72a:	10 e0       	ldi	r17, 0x00	; 0
    e72c:	85 30       	cpi	r24, 0x05	; 5
    e72e:	21 f4       	brne	.+8      	; 0xe738 <mmc_disk_ioctl+0x4fa>
    e730:	00 e0       	ldi	r16, 0x00	; 0
    e732:	02 c0       	rjmp	.+4      	; 0xe738 <mmc_disk_ioctl+0x4fa>
    e734:	01 e0       	ldi	r16, 0x01	; 1
    e736:	10 e0       	ldi	r17, 0x00	; 0
    e738:	6e db       	rcall	.-2340   	; 0xde16 <deselect>
    e73a:	04 c0       	rjmp	.+8      	; 0xe744 <mmc_disk_ioctl+0x506>
    e73c:	03 e0       	ldi	r16, 0x03	; 3
    e73e:	01 c0       	rjmp	.+2      	; 0xe742 <mmc_disk_ioctl+0x504>
    e740:	04 e0       	ldi	r16, 0x04	; 4
    e742:	10 e0       	ldi	r17, 0x00	; 0
    e744:	c8 01       	movw	r24, r16
    e746:	60 96       	adiw	r28, 0x10	; 16
    e748:	e8 e0       	ldi	r30, 0x08	; 8
    e74a:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000e74e <mmc_disk_timerproc>:
    e74e:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <Timer1>
    e752:	88 23       	and	r24, r24
    e754:	19 f0       	breq	.+6      	; 0xe75c <mmc_disk_timerproc+0xe>
    e756:	81 50       	subi	r24, 0x01	; 1
    e758:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <Timer1>
    e75c:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <Timer2>
    e760:	88 23       	and	r24, r24
    e762:	19 f0       	breq	.+6      	; 0xe76a <mmc_disk_timerproc+0x1c>
    e764:	81 50       	subi	r24, 0x01	; 1
    e766:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <Timer2>
    e76a:	08 95       	ret

0000e76c <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e76c:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <_mmc_timeout>
    e770:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <_mmc_timeout+0x1>
    e774:	00 97       	sbiw	r24, 0x00	; 0
    e776:	29 f0       	breq	.+10     	; 0xe782 <mmc_task+0x16>
    e778:	01 97       	sbiw	r24, 0x01	; 1
    e77a:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <_mmc_timeout+0x1>
    e77e:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <_mmc_timeout>
    e782:	80 91 57 18 	lds	r24, 0x1857	; 0x801857 <_mmc_pre>
    e786:	90 91 58 18 	lds	r25, 0x1858	; 0x801858 <_mmc_pre+0x1>
    e78a:	8a 30       	cpi	r24, 0x0A	; 10
    e78c:	91 05       	cpc	r25, r1
    e78e:	30 f4       	brcc	.+12     	; 0xe79c <mmc_task+0x30>
    e790:	01 96       	adiw	r24, 0x01	; 1
    e792:	90 93 58 18 	sts	0x1858, r25	; 0x801858 <_mmc_pre+0x1>
    e796:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <_mmc_pre>
    e79a:	08 95       	ret
    e79c:	10 92 58 18 	sts	0x1858, r1	; 0x801858 <_mmc_pre+0x1>
    e7a0:	10 92 57 18 	sts	0x1857, r1	; 0x801857 <_mmc_pre>
    e7a4:	d4 cf       	rjmp	.-88     	; 0xe74e <mmc_disk_timerproc>
    e7a6:	08 95       	ret

0000e7a8 <mmc_install_timer>:
    e7a8:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <_mmc_timeout+0x1>
    e7ac:	10 92 5d 18 	sts	0x185D, r1	; 0x80185d <_mmc_timeout>
    e7b0:	61 e0       	ldi	r22, 0x01	; 1
    e7b2:	70 e0       	ldi	r23, 0x00	; 0
    e7b4:	86 eb       	ldi	r24, 0xB6	; 182
    e7b6:	93 e7       	ldi	r25, 0x73	; 115
    e7b8:	0e 94 82 35 	call	0x6b04	; 0x6b04 <set_timers>
    e7bc:	01 96       	adiw	r24, 0x01	; 1
    e7be:	51 f4       	brne	.+20     	; 0xe7d4 <mmc_install_timer+0x2c>
    e7c0:	8d e4       	ldi	r24, 0x4D	; 77
    e7c2:	98 e0       	ldi	r25, 0x08	; 8
    e7c4:	1f 92       	push	r1
    e7c6:	9f 93       	push	r25
    e7c8:	8f 93       	push	r24
    e7ca:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    e7ce:	0f 90       	pop	r0
    e7d0:	0f 90       	pop	r0
    e7d2:	0f 90       	pop	r0
    e7d4:	08 95       	ret

0000e7d6 <mmc_spi_begin>:
    e7d6:	60 91 59 18 	lds	r22, 0x1859	; 0x801859 <_mmc_clock>
    e7da:	70 91 5a 18 	lds	r23, 0x185A	; 0x80185a <_mmc_clock+0x1>
    e7de:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_mmc_clock+0x2>
    e7e2:	90 91 5c 18 	lds	r25, 0x185C	; 0x80185c <_mmc_clock+0x3>
    e7e6:	4b e0       	ldi	r20, 0x0B	; 11
    e7e8:	50 e0       	ldi	r21, 0x00	; 0
    e7ea:	0c 94 3f 29 	jmp	0x527e	; 0x527e <spi_begin>
    e7ee:	08 95       	ret

0000e7f0 <mmc_spi_end>:
    e7f0:	8b e0       	ldi	r24, 0x0B	; 11
    e7f2:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <spi_end>
    e7f6:	08 95       	ret

0000e7f8 <mmc_slow>:
    e7f8:	80 e2       	ldi	r24, 0x20	; 32
    e7fa:	91 ea       	ldi	r25, 0xA1	; 161
    e7fc:	a7 e0       	ldi	r26, 0x07	; 7
    e7fe:	b0 e0       	ldi	r27, 0x00	; 0
    e800:	80 93 59 18 	sts	0x1859, r24	; 0x801859 <_mmc_clock>
    e804:	90 93 5a 18 	sts	0x185A, r25	; 0x80185a <_mmc_clock+0x1>
    e808:	a0 93 5b 18 	sts	0x185B, r26	; 0x80185b <_mmc_clock+0x2>
    e80c:	b0 93 5c 18 	sts	0x185C, r27	; 0x80185c <_mmc_clock+0x3>
    e810:	08 95       	ret

0000e812 <mmc_spi_init>:
    e812:	8b e0       	ldi	r24, 0x0B	; 11
    e814:	0e 94 e7 28 	call	0x51ce	; 0x51ce <chip_select_init>
    e818:	ef cf       	rjmp	.-34     	; 0xe7f8 <mmc_slow>
    e81a:	08 95       	ret

0000e81c <mmc_fast>:
    e81c:	80 ea       	ldi	r24, 0xA0	; 160
    e81e:	95 e2       	ldi	r25, 0x25	; 37
    e820:	a6 e2       	ldi	r26, 0x26	; 38
    e822:	b0 e0       	ldi	r27, 0x00	; 0
    e824:	80 93 59 18 	sts	0x1859, r24	; 0x801859 <_mmc_clock>
    e828:	90 93 5a 18 	sts	0x185A, r25	; 0x80185a <_mmc_clock+0x1>
    e82c:	a0 93 5b 18 	sts	0x185B, r26	; 0x80185b <_mmc_clock+0x2>
    e830:	b0 93 5c 18 	sts	0x185C, r27	; 0x80185c <_mmc_clock+0x3>
    e834:	08 95       	ret

0000e836 <mmc_spi_TX_buffer>:
    e836:	0c 94 0b 29 	jmp	0x5216	; 0x5216 <spi_TX_buffer>
    e83a:	08 95       	ret

0000e83c <mmc_spi_RX_buffer>:
    e83c:	0c 94 0d 29 	jmp	0x521a	; 0x521a <spi_RX_buffer>
    e840:	08 95       	ret

0000e842 <mmc_spi_TXRX>:
    e842:	0c 94 7b 29 	jmp	0x52f6	; 0x52f6 <spi_TXRX>
    e846:	08 95       	ret

0000e848 <mmc_set_ms_timeout>:
    e848:	f8 94       	cli
    e84a:	90 93 5e 18 	sts	0x185E, r25	; 0x80185e <_mmc_timeout+0x1>
    e84e:	80 93 5d 18 	sts	0x185D, r24	; 0x80185d <_mmc_timeout>
    e852:	78 94       	sei
    e854:	08 95       	ret

0000e856 <mmc_test_timeout>:
    e856:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e85a:	81 fd       	sbrc	r24, 1
    e85c:	15 c0       	rjmp	.+42     	; 0xe888 <mmc_test_timeout+0x32>
    e85e:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <_mmc_timeout>
    e862:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <_mmc_timeout+0x1>
    e866:	89 2b       	or	r24, r25
    e868:	91 f4       	brne	.+36     	; 0xe88e <mmc_test_timeout+0x38>
    e86a:	80 e4       	ldi	r24, 0x40	; 64
    e86c:	98 e0       	ldi	r25, 0x08	; 8
    e86e:	1f 92       	push	r1
    e870:	9f 93       	push	r25
    e872:	8f 93       	push	r24
    e874:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    e878:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e87c:	83 60       	ori	r24, 0x03	; 3
    e87e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e882:	0f 90       	pop	r0
    e884:	0f 90       	pop	r0
    e886:	0f 90       	pop	r0
    e888:	81 e0       	ldi	r24, 0x01	; 1
    e88a:	90 e0       	ldi	r25, 0x00	; 0
    e88c:	08 95       	ret
    e88e:	80 e0       	ldi	r24, 0x00	; 0
    e890:	90 e0       	ldi	r25, 0x00	; 0
    e892:	08 95       	ret

0000e894 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e894:	a4 e0       	ldi	r26, 0x04	; 4
    e896:	b0 e0       	ldi	r27, 0x00	; 0
    e898:	e0 e5       	ldi	r30, 0x50	; 80
    e89a:	f4 e7       	ldi	r31, 0x74	; 116
    e89c:	0c 94 11 ed 	jmp	0x1da22	; 0x1da22 <__prologue_saves__+0x18>
    e8a0:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e8a2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    e8a6:	b5 df       	rcall	.-150    	; 0xe812 <mmc_spi_init>
    e8a8:	e1 14       	cp	r14, r1
    e8aa:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e8ac:	51 f0       	breq	.+20     	; 0xe8c2 <mmc_init+0x2e>
    e8ae:	80 e3       	ldi	r24, 0x30	; 48
    e8b0:	98 e0       	ldi	r25, 0x08	; 8
    e8b2:	1f 92       	push	r1
    e8b4:	9f 93       	push	r25
    e8b6:	8f 93       	push	r24
    e8b8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    e8bc:	0f 90       	pop	r0
    e8be:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e8c0:	0f 90       	pop	r0
    e8c2:	80 91 5f 18 	lds	r24, 0x185F	; 0x80185f <mmc_init_flag>
    e8c6:	90 91 60 18 	lds	r25, 0x1860	; 0x801860 <mmc_init_flag+0x1>
        mmc_install_timer();
    e8ca:	89 2b       	or	r24, r25
    e8cc:	09 f4       	brne	.+2      	; 0xe8d0 <mmc_init+0x3c>

    if( verbose)
    e8ce:	6c df       	rcall	.-296    	; 0xe7a8 <mmc_install_timer>
    e8d0:	e1 14       	cp	r14, r1
    e8d2:	f1 04       	cpc	r15, r1
    {
#if defined (_USE_LFN)
        printf("LFN Enabled");
    e8d4:	b9 f0       	breq	.+46     	; 0xe904 <mmc_init+0x70>
    e8d6:	84 e2       	ldi	r24, 0x24	; 36
    e8d8:	98 e0       	ldi	r25, 0x08	; 8
    e8da:	1f 92       	push	r1
    e8dc:	9f 93       	push	r25
    e8de:	8f 93       	push	r24
    e8e0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", _CODE_PAGE);
    e8e4:	81 e0       	ldi	r24, 0x01	; 1
    e8e6:	8f 93       	push	r24
    e8e8:	85 eb       	ldi	r24, 0xB5	; 181
    e8ea:	8f 93       	push	r24
    e8ec:	83 e1       	ldi	r24, 0x13	; 19
    e8ee:	98 e0       	ldi	r25, 0x08	; 8
    e8f0:	1f 92       	push	r1
    e8f2:	9f 93       	push	r25
    e8f4:	8f 93       	push	r24
    e8f6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    e8fa:	0f b6       	in	r0, 0x3f	; 63
    e8fc:	f8 94       	cli
    e8fe:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()
    e900:	0f be       	out	0x3f, r0	; 63
    e902:	cd bf       	out	0x3d, r28	; 61
    e904:	80 e0       	ldi	r24, 0x00	; 0
    e906:	55 da       	rcall	.-2902   	; 0xddb2 <disk_initialize>
    e908:	08 2f       	mov	r16, r24

    if( rc != RES_OK  || verbose )
    e90a:	10 e0       	ldi	r17, 0x00	; 0
    e90c:	01 15       	cp	r16, r1
    e90e:	11 05       	cpc	r17, r1
    e910:	71 f4       	brne	.+28     	; 0xe92e <mmc_init+0x9a>
    e912:	e1 14       	cp	r14, r1
    e914:	f1 04       	cpc	r15, r1
        put_rc(rc);
    }

    if( rc == RES_OK)
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    e916:	59 f4       	brne	.+22     	; 0xe92e <mmc_init+0x9a>
    e918:	40 e0       	ldi	r20, 0x00	; 0
    e91a:	6c e1       	ldi	r22, 0x1C	; 28
    e91c:	78 e0       	ldi	r23, 0x08	; 8
    e91e:	8b ea       	ldi	r24, 0xAB	; 171
    e920:	9a e1       	ldi	r25, 0x1A	; 26
    e922:	0e 94 ab 58 	call	0xb156	; 0xb156 <f_mount>
    }

    if( rc != RES_OK || verbose)
    e926:	8c 01       	movw	r16, r24
    e928:	89 2b       	or	r24, r25

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()

    if( rc != RES_OK  || verbose )
    {
        put_rc(rc);
    e92a:	39 f0       	breq	.+14     	; 0xe93a <mmc_init+0xa6>
    e92c:	0a c0       	rjmp	.+20     	; 0xe942 <mmc_init+0xae>
    e92e:	c8 01       	movw	r24, r16
    }

    if( rc == RES_OK)
    e930:	dc d0       	rcall	.+440    	; 0xeaea <put_rc>
    e932:	01 15       	cp	r16, r1
    e934:	11 05       	cpc	r17, r1
    e936:	29 f4       	brne	.+10     	; 0xe942 <mmc_init+0xae>
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    }

    if( rc != RES_OK || verbose)
    e938:	ef cf       	rjmp	.-34     	; 0xe918 <mmc_init+0x84>
    e93a:	e1 14       	cp	r14, r1
    e93c:	f1 04       	cpc	r15, r1
    {
        put_rc( rc );
    e93e:	09 f4       	brne	.+2      	; 0xe942 <mmc_init+0xae>
    e940:	43 c0       	rjmp	.+134    	; 0xe9c8 <mmc_init+0x134>
    e942:	c8 01       	movw	r24, r16
    }

    if (verbose )
    e944:	d2 d0       	rcall	.+420    	; 0xeaea <put_rc>
    e946:	e1 14       	cp	r14, r1
    e948:	f1 04       	cpc	r15, r1
    e94a:	09 f4       	brne	.+2      	; 0xe94e <mmc_init+0xba>
    {
        DWORD blksize = 0;
    e94c:	3d c0       	rjmp	.+122    	; 0xe9c8 <mmc_init+0x134>
    e94e:	19 82       	std	Y+1, r1	; 0x01
    e950:	1a 82       	std	Y+2, r1	; 0x02
    e952:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e954:	1c 82       	std	Y+4, r1	; 0x04
    e956:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( 0, GET_BLOCK_SIZE, (void *) &blksize);
    e958:	11 05       	cpc	r17, r1
    e95a:	61 f5       	brne	.+88     	; 0xe9b4 <mmc_init+0x120>
    e95c:	ae 01       	movw	r20, r28
    e95e:	4f 5f       	subi	r20, 0xFF	; 255
    e960:	5f 4f       	sbci	r21, 0xFF	; 255
    e962:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e964:	80 e0       	ldi	r24, 0x00	; 0
    e966:	4b da       	rcall	.-2922   	; 0xddfe <disk_ioctl>
            {
                put_rc( rc );
    e968:	8c 01       	movw	r16, r24
    e96a:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e96c:	61 f0       	breq	.+24     	; 0xe986 <mmc_init+0xf2>
    e96e:	bd d0       	rcall	.+378    	; 0xeaea <put_rc>
    e970:	85 ef       	ldi	r24, 0xF5	; 245
    e972:	97 e0       	ldi	r25, 0x07	; 7
    e974:	1f 92       	push	r1
    e976:	9f 93       	push	r25
    e978:	8f 93       	push	r24
    e97a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    e97e:	0f 90       	pop	r0
    e980:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e982:	0f 90       	pop	r0
    e984:	17 c0       	rjmp	.+46     	; 0xe9b4 <mmc_init+0x120>
    e986:	8c 81       	ldd	r24, Y+4	; 0x04
    e988:	8f 93       	push	r24
    e98a:	8b 81       	ldd	r24, Y+3	; 0x03
    e98c:	8f 93       	push	r24
    e98e:	8a 81       	ldd	r24, Y+2	; 0x02
    e990:	8f 93       	push	r24
    e992:	89 81       	ldd	r24, Y+1	; 0x01
    e994:	8f 93       	push	r24
    e996:	80 ee       	ldi	r24, 0xE0	; 224
    e998:	97 e0       	ldi	r25, 0x07	; 7
    e99a:	1f 92       	push	r1
    e99c:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e99e:	8f 93       	push	r24
    e9a0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    e9a4:	8c e1       	ldi	r24, 0x1C	; 28
    e9a6:	98 e0       	ldi	r25, 0x08	; 8
    e9a8:	2e d1       	rcall	.+604    	; 0xec06 <fatfs_status>
    e9aa:	0f b6       	in	r0, 0x3f	; 63
    e9ac:	f8 94       	cli
    e9ae:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e9b0:	0f be       	out	0x3f, r0	; 63
    e9b2:	cd bf       	out	0x3d, r28	; 61
    e9b4:	82 ed       	ldi	r24, 0xD2	; 210
    e9b6:	97 e0       	ldi	r25, 0x07	; 7
    e9b8:	1f 92       	push	r1
    e9ba:	9f 93       	push	r25
    e9bc:	8f 93       	push	r24
    e9be:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    e9c2:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e9c4:	0f 90       	pop	r0
    e9c6:	0f 90       	pop	r0
    e9c8:	81 e0       	ldi	r24, 0x01	; 1
    e9ca:	90 e0       	ldi	r25, 0x00	; 0
    e9cc:	90 93 60 18 	sts	0x1860, r25	; 0x801860 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e9d0:	80 93 5f 18 	sts	0x185F, r24	; 0x80185f <mmc_init_flag>
    e9d4:	c8 01       	movw	r24, r16
    e9d6:	24 96       	adiw	r28, 0x04	; 4
    e9d8:	e6 e0       	ldi	r30, 0x06	; 6
    e9da:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0000e9de <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e9de:	08 95       	ret

0000e9e0 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e9e0:	81 e0       	ldi	r24, 0x01	; 1
    e9e2:	90 e0       	ldi	r25, 0x00	; 0
    e9e4:	08 95       	ret

0000e9e6 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e9e6:	80 e0       	ldi	r24, 0x00	; 0
    e9e8:	90 e0       	ldi	r25, 0x00	; 0
    e9ea:	08 95       	ret

0000e9ec <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e9ec:	0f 93       	push	r16
    e9ee:	1f 93       	push	r17
    e9f0:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e9f2:	46 81       	ldd	r20, Z+6	; 0x06
    e9f4:	57 81       	ldd	r21, Z+7	; 0x07
    e9f6:	05 2e       	mov	r0, r21
    e9f8:	00 0c       	add	r0, r0
    e9fa:	66 0b       	sbc	r22, r22
    e9fc:	77 0b       	sbc	r23, r23
    e9fe:	ba 01       	movw	r22, r20
    ea00:	55 27       	eor	r21, r21
    ea02:	44 27       	eor	r20, r20
    ea04:	84 81       	ldd	r24, Z+4	; 0x04
    ea06:	95 81       	ldd	r25, Z+5	; 0x05
    ea08:	09 2e       	mov	r0, r25
    ea0a:	00 0c       	add	r0, r0
    ea0c:	aa 0b       	sbc	r26, r26
    ea0e:	bb 0b       	sbc	r27, r27
    ea10:	2b e0       	ldi	r18, 0x0B	; 11
    ea12:	88 0f       	add	r24, r24
    ea14:	99 1f       	adc	r25, r25
    ea16:	aa 1f       	adc	r26, r26
    ea18:	bb 1f       	adc	r27, r27
    ea1a:	2a 95       	dec	r18
    ea1c:	d1 f7       	brne	.-12     	; 0xea12 <tm_to_fat+0x26>
    ea1e:	48 2b       	or	r20, r24
    ea20:	59 2b       	or	r21, r25
    ea22:	6a 2b       	or	r22, r26
    ea24:	7b 2b       	or	r23, r27
    ea26:	82 81       	ldd	r24, Z+2	; 0x02
    ea28:	93 81       	ldd	r25, Z+3	; 0x03
    ea2a:	09 2e       	mov	r0, r25
    ea2c:	00 0c       	add	r0, r0
    ea2e:	aa 0b       	sbc	r26, r26
    ea30:	bb 0b       	sbc	r27, r27
    ea32:	35 e0       	ldi	r19, 0x05	; 5
    ea34:	88 0f       	add	r24, r24
    ea36:	99 1f       	adc	r25, r25
    ea38:	aa 1f       	adc	r26, r26
    ea3a:	bb 1f       	adc	r27, r27
    ea3c:	3a 95       	dec	r19
    ea3e:	d1 f7       	brne	.-12     	; 0xea34 <tm_to_fat+0x48>
    ea40:	48 2b       	or	r20, r24
    ea42:	59 2b       	or	r21, r25
    ea44:	6a 2b       	or	r22, r26
    ea46:	7b 2b       	or	r23, r27
    ea48:	80 81       	ld	r24, Z
    ea4a:	91 81       	ldd	r25, Z+1	; 0x01
    ea4c:	09 2e       	mov	r0, r25
    ea4e:	00 0c       	add	r0, r0
    ea50:	aa 0b       	sbc	r26, r26
    ea52:	bb 0b       	sbc	r27, r27
    ea54:	b6 95       	lsr	r27
    ea56:	a7 95       	ror	r26
    ea58:	97 95       	ror	r25
    ea5a:	87 95       	ror	r24
    ea5c:	84 2b       	or	r24, r20
    ea5e:	95 2b       	or	r25, r21
    ea60:	a6 2b       	or	r26, r22
    ea62:	b7 2b       	or	r27, r23
    ea64:	02 85       	ldd	r16, Z+10	; 0x0a
    ea66:	13 85       	ldd	r17, Z+11	; 0x0b
    ea68:	00 55       	subi	r16, 0x50	; 80
    ea6a:	11 09       	sbc	r17, r1
    ea6c:	01 2e       	mov	r0, r17
    ea6e:	00 0c       	add	r0, r0
    ea70:	22 0b       	sbc	r18, r18
    ea72:	33 0b       	sbc	r19, r19
    ea74:	49 e1       	ldi	r20, 0x19	; 25
    ea76:	00 0f       	add	r16, r16
    ea78:	11 1f       	adc	r17, r17
    ea7a:	22 1f       	adc	r18, r18
    ea7c:	33 1f       	adc	r19, r19
    ea7e:	4a 95       	dec	r20
    ea80:	d1 f7       	brne	.-12     	; 0xea76 <tm_to_fat+0x8a>
    ea82:	ac 01       	movw	r20, r24
    ea84:	bd 01       	movw	r22, r26
    ea86:	40 2b       	or	r20, r16
    ea88:	51 2b       	or	r21, r17
    ea8a:	62 2b       	or	r22, r18
    ea8c:	73 2b       	or	r23, r19
    ea8e:	80 85       	ldd	r24, Z+8	; 0x08
    ea90:	91 85       	ldd	r25, Z+9	; 0x09
    ea92:	09 2e       	mov	r0, r25
    ea94:	00 0c       	add	r0, r0
    ea96:	aa 0b       	sbc	r26, r26
    ea98:	bb 0b       	sbc	r27, r27
    ea9a:	01 96       	adiw	r24, 0x01	; 1
    ea9c:	a1 1d       	adc	r26, r1
    ea9e:	b1 1d       	adc	r27, r1
    eaa0:	e5 e1       	ldi	r30, 0x15	; 21
    eaa2:	88 0f       	add	r24, r24
    eaa4:	99 1f       	adc	r25, r25
    eaa6:	aa 1f       	adc	r26, r26
    eaa8:	bb 1f       	adc	r27, r27
    eaaa:	ea 95       	dec	r30
    eaac:	d1 f7       	brne	.-12     	; 0xeaa2 <tm_to_fat+0xb6>
    eaae:	8a 01       	movw	r16, r20
    eab0:	9b 01       	movw	r18, r22
    eab2:	08 2b       	or	r16, r24
    eab4:	19 2b       	or	r17, r25
    eab6:	2a 2b       	or	r18, r26
    eab8:	3b 2b       	or	r19, r27
    eaba:	c9 01       	movw	r24, r18
    eabc:	b8 01       	movw	r22, r16
}
    eabe:	1f 91       	pop	r17
    eac0:	0f 91       	pop	r16
    eac2:	08 95       	ret

0000eac4 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    eac4:	a4 e0       	ldi	r26, 0x04	; 4
    eac6:	b0 e0       	ldi	r27, 0x00	; 0
    eac8:	e8 e6       	ldi	r30, 0x68	; 104
    eaca:	f5 e7       	ldi	r31, 0x75	; 117
    eacc:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    ead0:	ce 01       	movw	r24, r28
    ead2:	01 96       	adiw	r24, 0x01	; 1
    ead4:	0e 94 bd 38 	call	0x717a	; 0x717a <time>
    return( tm_to_fat(localtime(&t)));
    ead8:	ce 01       	movw	r24, r28
    eada:	01 96       	adiw	r24, 0x01	; 1
    eadc:	0e 94 56 39 	call	0x72ac	; 0x72ac <localtime>
    eae0:	85 df       	rcall	.-246    	; 0xe9ec <tm_to_fat>
}
    eae2:	24 96       	adiw	r28, 0x04	; 4
    eae4:	e2 e0       	ldi	r30, 0x02	; 2
    eae6:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0000eaea <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    eaea:	9f 93       	push	r25
    eaec:	8f 93       	push	r24
    eaee:	8d e5       	ldi	r24, 0x5D	; 93
    eaf0:	9a e0       	ldi	r25, 0x0A	; 10
    eaf2:	1f 92       	push	r1
    eaf4:	9f 93       	push	r25
    eaf6:	8f 93       	push	r24
    eaf8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif
}
    eafc:	0f 90       	pop	r0
    eafe:	0f 90       	pop	r0
    eb00:	0f 90       	pop	r0
    eb02:	0f 90       	pop	r0
    eb04:	0f 90       	pop	r0
    eb06:	08 95       	ret

0000eb08 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    eb08:	a4 e4       	ldi	r26, 0x44	; 68
    eb0a:	b1 e0       	ldi	r27, 0x01	; 1
    eb0c:	ea e8       	ldi	r30, 0x8A	; 138
    eb0e:	f5 e7       	ldi	r31, 0x75	; 117
    eb10:	0c 94 10 ed 	jmp	0x1da20	; 0x1da20 <__prologue_saves__+0x16>
    eb14:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    eb16:	bc 01       	movw	r22, r24
    eb18:	ce 01       	movw	r24, r28
    eb1a:	89 5e       	subi	r24, 0xE9	; 233
    eb1c:	9e 4f       	sbci	r25, 0xFE	; 254
    eb1e:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_opendir>
    if (fr == FR_OK) {
    eb22:	00 97       	sbiw	r24, 0x00	; 0
    eb24:	09 f0       	breq	.+2      	; 0xeb28 <fatfs_scan_files+0x20>
    eb26:	5b c0       	rjmp	.+182    	; 0xebde <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    eb28:	8f e2       	ldi	r24, 0x2F	; 47
    eb2a:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    eb2c:	be 01       	movw	r22, r28
    eb2e:	6f 5f       	subi	r22, 0xFF	; 255
    eb30:	7f 4f       	sbci	r23, 0xFF	; 255
    eb32:	ce 01       	movw	r24, r28
    eb34:	89 5e       	subi	r24, 0xE9	; 233
    eb36:	9e 4f       	sbci	r25, 0xFE	; 254
    eb38:	0e 94 54 63 	call	0xc6a8	; 0xc6a8 <f_readdir>
    eb3c:	00 97       	sbiw	r24, 0x00	; 0
    eb3e:	09 f0       	breq	.+2      	; 0xeb42 <fatfs_scan_files+0x3a>
    eb40:	4e c0       	rjmp	.+156    	; 0xebde <fatfs_scan_files+0xd6>
    eb42:	2f 89       	ldd	r18, Y+23	; 0x17
    eb44:	22 23       	and	r18, r18
    eb46:	09 f4       	brne	.+2      	; 0xeb4a <fatfs_scan_files+0x42>
    eb48:	4a c0       	rjmp	.+148    	; 0xebde <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    eb4a:	89 85       	ldd	r24, Y+9	; 0x09
    eb4c:	84 ff       	sbrs	r24, 4
    eb4e:	25 c0       	rjmp	.+74     	; 0xeb9a <fatfs_scan_files+0x92>
                AccDirs++;
    eb50:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <AccDirs>
    eb54:	90 91 e5 1c 	lds	r25, 0x1CE5	; 0x801ce5 <AccDirs+0x1>
    eb58:	01 96       	adiw	r24, 0x01	; 1
    eb5a:	90 93 e5 1c 	sts	0x1CE5, r25	; 0x801ce5 <AccDirs+0x1>
    eb5e:	80 93 e4 1c 	sts	0x1CE4, r24	; 0x801ce4 <AccDirs>
                i = strlen(path);
    eb62:	f8 01       	movw	r30, r16
    eb64:	01 90       	ld	r0, Z+
    eb66:	00 20       	and	r0, r0
    eb68:	e9 f7       	brne	.-6      	; 0xeb64 <fatfs_scan_files+0x5c>
    eb6a:	31 97       	sbiw	r30, 0x01	; 1
    eb6c:	e0 1b       	sub	r30, r16
    eb6e:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    eb70:	78 01       	movw	r14, r16
    eb72:	ee 0e       	add	r14, r30
    eb74:	ff 1e       	adc	r15, r31
    eb76:	d7 01       	movw	r26, r14
    eb78:	dc 92       	st	X, r13
    eb7a:	cf 01       	movw	r24, r30
    eb7c:	01 96       	adiw	r24, 0x01	; 1
    eb7e:	be 01       	movw	r22, r28
    eb80:	69 5e       	subi	r22, 0xE9	; 233
    eb82:	7f 4f       	sbci	r23, 0xFF	; 255
    eb84:	80 0f       	add	r24, r16
    eb86:	91 1f       	adc	r25, r17
    eb88:	0e 94 4e 32 	call	0x649c	; 0x649c <strcpy>
                fr = fatfs_scan_files(path);
    eb8c:	c8 01       	movw	r24, r16
    eb8e:	bc df       	rcall	.-136    	; 0xeb08 <fatfs_scan_files>
                path[i] = 0;
    eb90:	f7 01       	movw	r30, r14
    eb92:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    eb94:	00 97       	sbiw	r24, 0x00	; 0
    eb96:	51 f2       	breq	.-108    	; 0xeb2c <fatfs_scan_files+0x24>
    eb98:	22 c0       	rjmp	.+68     	; 0xebde <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    eb9a:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <AccFiles>
    eb9e:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <AccFiles+0x1>
    eba2:	01 96       	adiw	r24, 0x01	; 1
    eba4:	90 93 e7 1c 	sts	0x1CE7, r25	; 0x801ce7 <AccFiles+0x1>
    eba8:	80 93 e6 1c 	sts	0x1CE6, r24	; 0x801ce6 <AccFiles>
                AccSize += info.fsize;
    ebac:	40 91 e0 1c 	lds	r20, 0x1CE0	; 0x801ce0 <AccSize>
    ebb0:	50 91 e1 1c 	lds	r21, 0x1CE1	; 0x801ce1 <AccSize+0x1>
    ebb4:	60 91 e2 1c 	lds	r22, 0x1CE2	; 0x801ce2 <AccSize+0x2>
    ebb8:	70 91 e3 1c 	lds	r23, 0x1CE3	; 0x801ce3 <AccSize+0x3>
    ebbc:	89 81       	ldd	r24, Y+1	; 0x01
    ebbe:	9a 81       	ldd	r25, Y+2	; 0x02
    ebc0:	ab 81       	ldd	r26, Y+3	; 0x03
    ebc2:	bc 81       	ldd	r27, Y+4	; 0x04
    ebc4:	84 0f       	add	r24, r20
    ebc6:	95 1f       	adc	r25, r21
    ebc8:	a6 1f       	adc	r26, r22
    ebca:	b7 1f       	adc	r27, r23
    ebcc:	80 93 e0 1c 	sts	0x1CE0, r24	; 0x801ce0 <AccSize>
    ebd0:	90 93 e1 1c 	sts	0x1CE1, r25	; 0x801ce1 <AccSize+0x1>
    ebd4:	a0 93 e2 1c 	sts	0x1CE2, r26	; 0x801ce2 <AccSize+0x2>
    ebd8:	b0 93 e3 1c 	sts	0x1CE3, r27	; 0x801ce3 <AccSize+0x3>
    ebdc:	a7 cf       	rjmp	.-178    	; 0xeb2c <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    ebde:	cc 5b       	subi	r28, 0xBC	; 188
    ebe0:	de 4f       	sbci	r29, 0xFE	; 254
    ebe2:	e7 e0       	ldi	r30, 0x07	; 7
    ebe4:	0c 94 2c ed 	jmp	0x1da58	; 0x1da58 <__epilogue_restores__+0x16>

0000ebe8 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    ebe8:	01 97       	sbiw	r24, 0x01	; 1
    ebea:	84 30       	cpi	r24, 0x04	; 4
    ebec:	91 05       	cpc	r25, r1
    ebee:	40 f4       	brcc	.+16     	; 0xec00 <fatfs_fstype+0x18>
    ebf0:	88 0f       	add	r24, r24
    ebf2:	99 1f       	adc	r25, r25
    ebf4:	fc 01       	movw	r30, r24
    ebf6:	e4 50       	subi	r30, 0x04	; 4
    ebf8:	f9 4f       	sbci	r31, 0xF9	; 249
    ebfa:	80 81       	ld	r24, Z
    ebfc:	91 81       	ldd	r25, Z+1	; 0x01
    ebfe:	08 95       	ret
    char *ptr;
    switch(type)
    ec00:	8e e1       	ldi	r24, 0x1E	; 30
    ec02:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    ec04:	08 95       	ret

0000ec06 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    ec06:	a4 e2       	ldi	r26, 0x24	; 36
    ec08:	b0 e0       	ldi	r27, 0x00	; 0
    ec0a:	e9 e0       	ldi	r30, 0x09	; 9
    ec0c:	f6 e7       	ldi	r31, 0x76	; 118
    ec0e:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    ec12:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    ec14:	fc 01       	movw	r30, r24
    ec16:	21 91       	ld	r18, Z+
    ec18:	cf 01       	movw	r24, r30
    ec1a:	20 32       	cpi	r18, 0x20	; 32
    ec1c:	d1 f3       	breq	.-12     	; 0xec12 <fatfs_status+0xc>
    ec1e:	29 30       	cpi	r18, 0x09	; 9
    ec20:	c1 f3       	breq	.-16     	; 0xec12 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    ec22:	1f 93       	push	r17
    ec24:	0f 93       	push	r16
    ec26:	8c e4       	ldi	r24, 0x4C	; 76
    ec28:	9a e0       	ldi	r25, 0x0A	; 10
    ec2a:	1f 92       	push	r1
    ec2c:	9f 93       	push	r25
    ec2e:	8f 93       	push	r24
    ec30:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    ec34:	ae 01       	movw	r20, r28
    ec36:	4d 5d       	subi	r20, 0xDD	; 221
    ec38:	5f 4f       	sbci	r21, 0xFF	; 255
    ec3a:	be 01       	movw	r22, r28
    ec3c:	61 5e       	subi	r22, 0xE1	; 225
    ec3e:	7f 4f       	sbci	r23, 0xFF	; 255
    ec40:	c8 01       	movw	r24, r16
    ec42:	0e 94 da 63 	call	0xc7b4	; 0xc7b4 <f_getfree>
    if (res)
    ec46:	0f 90       	pop	r0
    ec48:	0f 90       	pop	r0
    ec4a:	0f 90       	pop	r0
    ec4c:	0f 90       	pop	r0
    ec4e:	0f 90       	pop	r0
    ec50:	00 97       	sbiw	r24, 0x00	; 0
    ec52:	09 f0       	breq	.+2      	; 0xec56 <fatfs_status+0x50>
    ec54:	e8 c0       	rjmp	.+464    	; 0xee26 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    ec56:	eb a1       	ldd	r30, Y+35	; 0x23
    ec58:	fc a1       	ldd	r31, Y+36	; 0x24
    ec5a:	80 81       	ld	r24, Z
    ec5c:	90 e0       	ldi	r25, 0x00	; 0
    ec5e:	c4 df       	rcall	.-120    	; 0xebe8 <fatfs_fstype>
    ec60:	9f 93       	push	r25
    ec62:	8f 93       	push	r24
    ec64:	8e e2       	ldi	r24, 0x2E	; 46
    ec66:	9a e0       	ldi	r25, 0x0A	; 10
    ec68:	1f 92       	push	r1
    ec6a:	9f 93       	push	r25
    ec6c:	8f 93       	push	r24
    ec6e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    ec72:	eb a1       	ldd	r30, Y+35	; 0x23
    ec74:	fc a1       	ldd	r31, Y+36	; 0x24
    ec76:	81 85       	ldd	r24, Z+9	; 0x09
    ec78:	92 85       	ldd	r25, Z+10	; 0x0a
    ec7a:	a0 e0       	ldi	r26, 0x00	; 0
    ec7c:	b0 e0       	ldi	r27, 0x00	; 0
    ec7e:	49 e0       	ldi	r20, 0x09	; 9
    ec80:	88 0f       	add	r24, r24
    ec82:	99 1f       	adc	r25, r25
    ec84:	aa 1f       	adc	r26, r26
    ec86:	bb 1f       	adc	r27, r27
    ec88:	4a 95       	dec	r20
    ec8a:	d1 f7       	brne	.-12     	; 0xec80 <fatfs_status+0x7a>
    ec8c:	bf 93       	push	r27
    ec8e:	af 93       	push	r26
    ec90:	9f 93       	push	r25
    ec92:	8f 93       	push	r24
    ec94:	8f e0       	ldi	r24, 0x0F	; 15
    ec96:	9a e0       	ldi	r25, 0x0A	; 10
    ec98:	1f 92       	push	r1
    ec9a:	9f 93       	push	r25
    ec9c:	8f 93       	push	r24
    ec9e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    eca2:	eb a1       	ldd	r30, Y+35	; 0x23
    eca4:	fc a1       	ldd	r31, Y+36	; 0x24
    eca6:	82 81       	ldd	r24, Z+2	; 0x02
    eca8:	1f 92       	push	r1
    ecaa:	8f 93       	push	r24
    ecac:	81 ef       	ldi	r24, 0xF1	; 241
    ecae:	99 e0       	ldi	r25, 0x09	; 9
    ecb0:	1f 92       	push	r1
    ecb2:	9f 93       	push	r25
    ecb4:	8f 93       	push	r24
    ecb6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    ecba:	eb a1       	ldd	r30, Y+35	; 0x23
    ecbc:	fc a1       	ldd	r31, Y+36	; 0x24
    ecbe:	80 85       	ldd	r24, Z+8	; 0x08
    ecc0:	8f 93       	push	r24
    ecc2:	87 81       	ldd	r24, Z+7	; 0x07
    ecc4:	8f 93       	push	r24
    ecc6:	83 ed       	ldi	r24, 0xD3	; 211
    ecc8:	99 e0       	ldi	r25, 0x09	; 9
    ecca:	1f 92       	push	r1
    eccc:	9f 93       	push	r25
    ecce:	8f 93       	push	r24
    ecd0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    ecd4:	eb a1       	ldd	r30, Y+35	; 0x23
    ecd6:	fc a1       	ldd	r31, Y+36	; 0x24
    ecd8:	80 a1       	ldd	r24, Z+32	; 0x20
    ecda:	8f 93       	push	r24
    ecdc:	87 8d       	ldd	r24, Z+31	; 0x1f
    ecde:	8f 93       	push	r24
    ece0:	86 8d       	ldd	r24, Z+30	; 0x1e
    ece2:	8f 93       	push	r24
    ece4:	85 8d       	ldd	r24, Z+29	; 0x1d
    ece6:	8f 93       	push	r24
    ece8:	84 eb       	ldi	r24, 0xB4	; 180
    ecea:	99 e0       	ldi	r25, 0x09	; 9
    ecec:	1f 92       	push	r1
    ecee:	9f 93       	push	r25
    ecf0:	8f 93       	push	r24
    ecf2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    ecf6:	eb a1       	ldd	r30, Y+35	; 0x23
    ecf8:	fc a1       	ldd	r31, Y+36	; 0x24
    ecfa:	81 8d       	ldd	r24, Z+25	; 0x19
    ecfc:	92 8d       	ldd	r25, Z+26	; 0x1a
    ecfe:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ed00:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ed02:	02 97       	sbiw	r24, 0x02	; 2
    ed04:	a1 09       	sbc	r26, r1
    ed06:	b1 09       	sbc	r27, r1
    ed08:	bf 93       	push	r27
    ed0a:	af 93       	push	r26
    ed0c:	9f 93       	push	r25
    ed0e:	8f 93       	push	r24
    ed10:	85 e9       	ldi	r24, 0x95	; 149
    ed12:	99 e0       	ldi	r25, 0x09	; 9
    ed14:	1f 92       	push	r1
    ed16:	9f 93       	push	r25
    ed18:	8f 93       	push	r24
    ed1a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    ed1e:	0f b6       	in	r0, 0x3f	; 63
    ed20:	f8 94       	cli
    ed22:	de bf       	out	0x3e, r29	; 62
    ed24:	0f be       	out	0x3f, r0	; 63
    ed26:	cd bf       	out	0x3d, r28	; 61
    ed28:	eb a1       	ldd	r30, Y+35	; 0x23
    ed2a:	fc a1       	ldd	r31, Y+36	; 0x24
    ed2c:	80 a5       	ldd	r24, Z+40	; 0x28
    ed2e:	8f 93       	push	r24
    ed30:	87 a1       	ldd	r24, Z+39	; 0x27
    ed32:	8f 93       	push	r24
    ed34:	86 a1       	ldd	r24, Z+38	; 0x26
    ed36:	8f 93       	push	r24
    ed38:	85 a1       	ldd	r24, Z+37	; 0x25
    ed3a:	8f 93       	push	r24
    ed3c:	86 e7       	ldi	r24, 0x76	; 118
    ed3e:	99 e0       	ldi	r25, 0x09	; 9
    ed40:	1f 92       	push	r1
    ed42:	9f 93       	push	r25
    ed44:	8f 93       	push	r24
    ed46:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    ed4a:	eb a1       	ldd	r30, Y+35	; 0x23
    ed4c:	fc a1       	ldd	r31, Y+36	; 0x24
    ed4e:	84 a5       	ldd	r24, Z+44	; 0x2c
    ed50:	8f 93       	push	r24
    ed52:	83 a5       	ldd	r24, Z+43	; 0x2b
    ed54:	8f 93       	push	r24
    ed56:	82 a5       	ldd	r24, Z+42	; 0x2a
    ed58:	8f 93       	push	r24
    ed5a:	81 a5       	ldd	r24, Z+41	; 0x29
    ed5c:	8f 93       	push	r24
    ed5e:	87 e5       	ldi	r24, 0x57	; 87
    ed60:	99 e0       	ldi	r25, 0x09	; 9
    ed62:	1f 92       	push	r1
    ed64:	9f 93       	push	r25
    ed66:	8f 93       	push	r24
    ed68:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    ed6c:	eb a1       	ldd	r30, Y+35	; 0x23
    ed6e:	fc a1       	ldd	r31, Y+36	; 0x24
    ed70:	80 a9       	ldd	r24, Z+48	; 0x30
    ed72:	8f 93       	push	r24
    ed74:	87 a5       	ldd	r24, Z+47	; 0x2f
    ed76:	8f 93       	push	r24
    ed78:	86 a5       	ldd	r24, Z+46	; 0x2e
    ed7a:	8f 93       	push	r24
    ed7c:	85 a5       	ldd	r24, Z+45	; 0x2d
    ed7e:	8f 93       	push	r24
    ed80:	88 e3       	ldi	r24, 0x38	; 56
    ed82:	99 e0       	ldi	r25, 0x09	; 9
    ed84:	1f 92       	push	r1
    ed86:	9f 93       	push	r25
    ed88:	8f 93       	push	r24
    ed8a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

#if _USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    ed8e:	ae 01       	movw	r20, r28
    ed90:	45 5e       	subi	r20, 0xE5	; 229
    ed92:	5f 4f       	sbci	r21, 0xFF	; 255
    ed94:	be 01       	movw	r22, r28
    ed96:	6f 5f       	subi	r22, 0xFF	; 255
    ed98:	7f 4f       	sbci	r23, 0xFF	; 255
    ed9a:	c8 01       	movw	r24, r16
    ed9c:	0e 94 6c 68 	call	0xd0d8	; 0xd0d8 <f_getlabel>
    if (res)
    eda0:	0f b6       	in	r0, 0x3f	; 63
    eda2:	f8 94       	cli
    eda4:	de bf       	out	0x3e, r29	; 62
    eda6:	0f be       	out	0x3f, r0	; 63
    eda8:	cd bf       	out	0x3d, r28	; 61
    edaa:	00 97       	sbiw	r24, 0x00	; 0
    edac:	e1 f5       	brne	.+120    	; 0xee26 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    edae:	89 81       	ldd	r24, Y+1	; 0x01
    edb0:	81 11       	cpse	r24, r1
    edb2:	03 c0       	rjmp	.+6      	; 0xedba <fatfs_status+0x1b4>
    edb4:	86 e2       	ldi	r24, 0x26	; 38
    edb6:	98 e0       	ldi	r25, 0x08	; 8
    edb8:	02 c0       	rjmp	.+4      	; 0xedbe <fatfs_status+0x1b8>
    edba:	ce 01       	movw	r24, r28
    edbc:	01 96       	adiw	r24, 0x01	; 1
    edbe:	9f 93       	push	r25
    edc0:	8f 93       	push	r24
    edc2:	8a e1       	ldi	r24, 0x1A	; 26
    edc4:	99 e0       	ldi	r25, 0x09	; 9
    edc6:	1f 92       	push	r1
    edc8:	9f 93       	push	r25
    edca:	8f 93       	push	r24
    edcc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    edd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    edd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    edd4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    edd6:	be 8d       	ldd	r27, Y+30	; 0x1e
    edd8:	9f 93       	push	r25
    edda:	8f 93       	push	r24
    eddc:	cd 01       	movw	r24, r26
    edde:	aa 27       	eor	r26, r26
    ede0:	bb 27       	eor	r27, r27
    ede2:	9f 93       	push	r25
    ede4:	8f 93       	push	r24
    ede6:	85 ef       	ldi	r24, 0xF5	; 245
    ede8:	98 e0       	ldi	r25, 0x08	; 8
    edea:	1f 92       	push	r1
    edec:	9f 93       	push	r25
    edee:	8f 93       	push	r24
    edf0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    edf4:	10 92 e5 1c 	sts	0x1CE5, r1	; 0x801ce5 <AccDirs+0x1>
    edf8:	10 92 e4 1c 	sts	0x1CE4, r1	; 0x801ce4 <AccDirs>
    edfc:	10 92 e7 1c 	sts	0x1CE7, r1	; 0x801ce7 <AccFiles+0x1>
    ee00:	10 92 e6 1c 	sts	0x1CE6, r1	; 0x801ce6 <AccFiles>
    ee04:	10 92 e0 1c 	sts	0x1CE0, r1	; 0x801ce0 <AccSize>
    ee08:	10 92 e1 1c 	sts	0x1CE1, r1	; 0x801ce1 <AccSize+0x1>
    ee0c:	10 92 e2 1c 	sts	0x1CE2, r1	; 0x801ce2 <AccSize+0x2>
    ee10:	10 92 e3 1c 	sts	0x1CE3, r1	; 0x801ce3 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    ee14:	c8 01       	movw	r24, r16
    if (res)
    ee16:	78 de       	rcall	.-784    	; 0xeb08 <fatfs_scan_files>
    ee18:	0f b6       	in	r0, 0x3f	; 63
    ee1a:	f8 94       	cli
    ee1c:	de bf       	out	0x3e, r29	; 62
    ee1e:	0f be       	out	0x3f, r0	; 63
    ee20:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    ee22:	00 97       	sbiw	r24, 0x00	; 0
    ee24:	11 f0       	breq	.+4      	; 0xee2a <fatfs_status+0x224>
        return;
    ee26:	61 de       	rcall	.-830    	; 0xeaea <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    ee28:	56 c0       	rjmp	.+172    	; 0xeed6 <fatfs_status+0x2d0>
    ee2a:	0b a1       	ldd	r16, Y+35	; 0x23
    ee2c:	1c a1       	ldd	r17, Y+36	; 0x24
    ee2e:	f8 01       	movw	r30, r16
    ee30:	c1 84       	ldd	r12, Z+9	; 0x09
    ee32:	d2 84       	ldd	r13, Z+10	; 0x0a
    ee34:	e1 2c       	mov	r14, r1
    ee36:	f1 2c       	mov	r15, r1
    ee38:	6f 8d       	ldd	r22, Y+31	; 0x1f
    ee3a:	78 a1       	ldd	r23, Y+32	; 0x20
    ee3c:	89 a1       	ldd	r24, Y+33	; 0x21
    ee3e:	9a a1       	ldd	r25, Y+34	; 0x22
    ee40:	a7 01       	movw	r20, r14
    ee42:	96 01       	movw	r18, r12
    ee44:	0e 94 41 ec 	call	0x1d882	; 0x1d882 <__mulsi3>
    ee48:	22 e0       	ldi	r18, 0x02	; 2
    ee4a:	30 e0       	ldi	r19, 0x00	; 0
    ee4c:	40 e0       	ldi	r20, 0x00	; 0
    ee4e:	50 e0       	ldi	r21, 0x00	; 0
    ee50:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
    ee54:	5f 93       	push	r21
    ee56:	4f 93       	push	r20
    ee58:	3f 93       	push	r19
    ee5a:	2f 93       	push	r18
    ee5c:	f8 01       	movw	r30, r16
    ee5e:	81 8d       	ldd	r24, Z+25	; 0x19
    ee60:	92 8d       	ldd	r25, Z+26	; 0x1a
    ee62:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ee64:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ee66:	9c 01       	movw	r18, r24
    ee68:	ad 01       	movw	r20, r26
    ee6a:	22 50       	subi	r18, 0x02	; 2
    ee6c:	31 09       	sbc	r19, r1
    ee6e:	41 09       	sbc	r20, r1
    ee70:	51 09       	sbc	r21, r1
    ee72:	c7 01       	movw	r24, r14
    ee74:	b6 01       	movw	r22, r12
    ee76:	0e 94 41 ec 	call	0x1d882	; 0x1d882 <__mulsi3>
    ee7a:	dc 01       	movw	r26, r24
    ee7c:	cb 01       	movw	r24, r22
    ee7e:	b6 95       	lsr	r27
    ee80:	a7 95       	ror	r26
    ee82:	97 95       	ror	r25
    ee84:	87 95       	ror	r24
    ee86:	bf 93       	push	r27
    ee88:	af 93       	push	r26
    ee8a:	9f 93       	push	r25
    ee8c:	8f 93       	push	r24
    ee8e:	80 91 e5 1c 	lds	r24, 0x1CE5	; 0x801ce5 <AccDirs+0x1>
    ee92:	8f 93       	push	r24
    ee94:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <AccDirs>
    ee98:	8f 93       	push	r24
    ee9a:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <AccSize+0x3>
    ee9e:	8f 93       	push	r24
    eea0:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <AccSize+0x2>
    eea4:	8f 93       	push	r24
    eea6:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <AccSize+0x1>
    eeaa:	8f 93       	push	r24
    eeac:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <AccSize>
    eeb0:	8f 93       	push	r24
    eeb2:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <AccFiles+0x1>
    eeb6:	8f 93       	push	r24
    eeb8:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <AccFiles>
    eebc:	8f 93       	push	r24
    eebe:	88 ea       	ldi	r24, 0xA8	; 168
    eec0:	98 e0       	ldi	r25, 0x08	; 8
    eec2:	1f 92       	push	r1
    eec4:	9f 93       	push	r25
    eec6:	8f 93       	push	r24
    eec8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    eecc:	0f b6       	in	r0, 0x3f	; 63
    eece:	f8 94       	cli
    eed0:	de bf       	out	0x3e, r29	; 62
    eed2:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    eed4:	cd bf       	out	0x3d, r28	; 61
    eed6:	a4 96       	adiw	r28, 0x24	; 36
    eed8:	e8 e0       	ldi	r30, 0x08	; 8
    eeda:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000eede <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    eede:	a6 e0       	ldi	r26, 0x06	; 6
    eee0:	b0 e0       	ldi	r27, 0x00	; 0
    eee2:	e5 e7       	ldi	r30, 0x75	; 117
    eee4:	f7 e7       	ldi	r31, 0x77	; 119
    eee6:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    eeea:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    eeec:	86 89       	ldd	r24, Z+22	; 0x16
    eeee:	81 11       	cpse	r24, r1
    eef0:	0b c0       	rjmp	.+22     	; 0xef08 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    eef2:	8d e8       	ldi	r24, 0x8D	; 141
    eef4:	98 e0       	ldi	r25, 0x08	; 8
    eef6:	1f 92       	push	r1
    eef8:	9f 93       	push	r25
    eefa:	8f 93       	push	r24
    eefc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return;
    ef00:	0f 90       	pop	r0
    ef02:	0f 90       	pop	r0
    ef04:	0f 90       	pop	r0
    ef06:	6e c0       	rjmp	.+220    	; 0xefe4 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    ef08:	80 85       	ldd	r24, Z+8	; 0x08
    ef0a:	84 fd       	sbrc	r24, 4
    ef0c:	02 c0       	rjmp	.+4      	; 0xef12 <fatfs_filinfo_list+0x34>
    ef0e:	9d e2       	ldi	r25, 0x2D	; 45
    ef10:	01 c0       	rjmp	.+2      	; 0xef14 <fatfs_filinfo_list+0x36>
    ef12:	94 e4       	ldi	r25, 0x44	; 68
    ef14:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    ef16:	80 fd       	sbrc	r24, 0
    ef18:	02 c0       	rjmp	.+4      	; 0xef1e <fatfs_filinfo_list+0x40>
    ef1a:	9d e2       	ldi	r25, 0x2D	; 45
    ef1c:	01 c0       	rjmp	.+2      	; 0xef20 <fatfs_filinfo_list+0x42>
    ef1e:	92 e5       	ldi	r25, 0x52	; 82
    ef20:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    ef22:	81 fd       	sbrc	r24, 1
    ef24:	02 c0       	rjmp	.+4      	; 0xef2a <fatfs_filinfo_list+0x4c>
    ef26:	9d e2       	ldi	r25, 0x2D	; 45
    ef28:	01 c0       	rjmp	.+2      	; 0xef2c <fatfs_filinfo_list+0x4e>
    ef2a:	98 e4       	ldi	r25, 0x48	; 72
    ef2c:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    ef2e:	82 fd       	sbrc	r24, 2
    ef30:	02 c0       	rjmp	.+4      	; 0xef36 <fatfs_filinfo_list+0x58>
    ef32:	9d e2       	ldi	r25, 0x2D	; 45
    ef34:	01 c0       	rjmp	.+2      	; 0xef38 <fatfs_filinfo_list+0x5a>
    ef36:	93 e5       	ldi	r25, 0x53	; 83
    ef38:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    ef3a:	85 fd       	sbrc	r24, 5
    ef3c:	02 c0       	rjmp	.+4      	; 0xef42 <fatfs_filinfo_list+0x64>
    ef3e:	8d e2       	ldi	r24, 0x2D	; 45
    ef40:	01 c0       	rjmp	.+2      	; 0xef44 <fatfs_filinfo_list+0x66>
    ef42:	81 e4       	ldi	r24, 0x41	; 65
    ef44:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    ef46:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    ef48:	46 81       	ldd	r20, Z+6	; 0x06
    ef4a:	57 81       	ldd	r21, Z+7	; 0x07
    ef4c:	84 81       	ldd	r24, Z+4	; 0x04
    ef4e:	95 81       	ldd	r25, Z+5	; 0x05
    ef50:	9f 01       	movw	r18, r30
    ef52:	2a 5e       	subi	r18, 0xEA	; 234
    ef54:	3f 4f       	sbci	r19, 0xFF	; 255
    ef56:	3f 93       	push	r19
    ef58:	2f 93       	push	r18
    ef5a:	23 81       	ldd	r18, Z+3	; 0x03
    ef5c:	2f 93       	push	r18
    ef5e:	22 81       	ldd	r18, Z+2	; 0x02
    ef60:	2f 93       	push	r18
    ef62:	21 81       	ldd	r18, Z+1	; 0x01
    ef64:	2f 93       	push	r18
    ef66:	20 81       	ld	r18, Z
    ef68:	2f 93       	push	r18
    ef6a:	9a 01       	movw	r18, r20
    ef6c:	45 e0       	ldi	r20, 0x05	; 5
    ef6e:	36 95       	lsr	r19
    ef70:	27 95       	ror	r18
    ef72:	4a 95       	dec	r20
    ef74:	e1 f7       	brne	.-8      	; 0xef6e <fatfs_filinfo_list+0x90>
    ef76:	2f 73       	andi	r18, 0x3F	; 63
    ef78:	33 27       	eor	r19, r19
    ef7a:	3f 93       	push	r19
    ef7c:	2f 93       	push	r18
    ef7e:	25 2f       	mov	r18, r21
    ef80:	26 95       	lsr	r18
    ef82:	26 95       	lsr	r18
    ef84:	26 95       	lsr	r18
    ef86:	1f 92       	push	r1
    ef88:	2f 93       	push	r18
    ef8a:	9c 01       	movw	r18, r24
    ef8c:	2f 71       	andi	r18, 0x1F	; 31
    ef8e:	33 27       	eor	r19, r19
    ef90:	3f 93       	push	r19
    ef92:	2f 93       	push	r18
    ef94:	9c 01       	movw	r18, r24
    ef96:	55 e0       	ldi	r21, 0x05	; 5
    ef98:	36 95       	lsr	r19
    ef9a:	27 95       	ror	r18
    ef9c:	5a 95       	dec	r21
    ef9e:	e1 f7       	brne	.-8      	; 0xef98 <fatfs_filinfo_list+0xba>
    efa0:	2f 70       	andi	r18, 0x0F	; 15
    efa2:	33 27       	eor	r19, r19
    efa4:	3f 93       	push	r19
    efa6:	2f 93       	push	r18
    efa8:	89 2f       	mov	r24, r25
    efaa:	99 27       	eor	r25, r25
    efac:	86 95       	lsr	r24
    efae:	84 54       	subi	r24, 0x44	; 68
    efb0:	98 4f       	sbci	r25, 0xF8	; 248
    efb2:	9f 93       	push	r25
    efb4:	8f 93       	push	r24
    efb6:	ce 01       	movw	r24, r28
    efb8:	01 96       	adiw	r24, 0x01	; 1
    efba:	9f 93       	push	r25
    efbc:	8f 93       	push	r24
    efbe:	8b e6       	ldi	r24, 0x6B	; 107
    efc0:	98 e0       	ldi	r25, 0x08	; 8
    efc2:	1f 92       	push	r1
    efc4:	9f 93       	push	r25
    efc6:	8f 93       	push	r24
    efc8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    efcc:	89 e6       	ldi	r24, 0x69	; 105
    efce:	98 e0       	ldi	r25, 0x08	; 8
    efd0:	1f 92       	push	r1
    efd2:	9f 93       	push	r25
    efd4:	8f 93       	push	r24
    efd6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    efda:	0f b6       	in	r0, 0x3f	; 63
    efdc:	f8 94       	cli
    efde:	de bf       	out	0x3e, r29	; 62
    efe0:	0f be       	out	0x3f, r0	; 63
    efe2:	cd bf       	out	0x3d, r28	; 61
}
    efe4:	26 96       	adiw	r28, 0x06	; 6
    efe6:	e2 e0       	ldi	r30, 0x02	; 2
    efe8:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0000efec <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    efec:	cf 93       	push	r28
    efee:	df 93       	push	r29
    eff0:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    eff2:	8e ea       	ldi	r24, 0xAE	; 174
    eff4:	9b e0       	ldi	r25, 0x0B	; 11
    eff6:	1f 92       	push	r1
    eff8:	9f 93       	push	r25
    effa:	8f 93       	push	r24
    effc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    
    if(full)
    f000:	0f 90       	pop	r0
    f002:	0f 90       	pop	r0
    f004:	0f 90       	pop	r0
    f006:	cd 2b       	or	r28, r29
    f008:	51 f0       	breq	.+20     	; 0xf01e <fatfs_help+0x32>
    {
        printf(
    f00a:	82 e3       	ldi	r24, 0x32	; 50
    f00c:	9b e0       	ldi	r25, 0x0B	; 11
    f00e:	1f 92       	push	r1
    f010:	9f 93       	push	r25
    f012:	8f 93       	push	r24
    f014:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f018:	0f 90       	pop	r0
    f01a:	0f 90       	pop	r0
    f01c:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    f01e:	df 91       	pop	r29
    f020:	cf 91       	pop	r28
    f022:	08 95       	ret

0000f024 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    f024:	aa e4       	ldi	r26, 0x4A	; 74
    f026:	b2 e0       	ldi	r27, 0x02	; 2
    f028:	e8 e1       	ldi	r30, 0x18	; 24
    f02a:	f8 e7       	ldi	r31, 0x78	; 120
    f02c:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    f030:	8e 01       	movw	r16, r28
    f032:	09 5e       	subi	r16, 0xE9	; 233
    f034:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    f036:	00 97       	sbiw	r24, 0x00	; 0
    f038:	21 f0       	breq	.+8      	; 0xf042 <fatfs_ls+0x1e>
    f03a:	fc 01       	movw	r30, r24
    f03c:	20 81       	ld	r18, Z
    f03e:	21 11       	cpse	r18, r1
    f040:	03 c0       	rjmp	.+6      	; 0xf048 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    f042:	6b e5       	ldi	r22, 0x5B	; 91
    f044:	70 e1       	ldi	r23, 0x10	; 16
    f046:	01 c0       	rjmp	.+2      	; 0xf04a <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    f048:	bc 01       	movw	r22, r24
    f04a:	c8 01       	movw	r24, r16
    f04c:	0e 94 4e 32 	call	0x649c	; 0x649c <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    f050:	1f 93       	push	r17
    f052:	0f 93       	push	r16
    f054:	82 ea       	ldi	r24, 0xA2	; 162
    f056:	9a e0       	ldi	r25, 0x0A	; 10
    f058:	1f 92       	push	r1
    f05a:	9f 93       	push	r25
    f05c:	8f 93       	push	r24
    f05e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    res = f_opendir(&dirs, buff);
    f062:	b8 01       	movw	r22, r16
    f064:	ce 01       	movw	r24, r28
    f066:	89 5e       	subi	r24, 0xE9	; 233
    f068:	9d 4f       	sbci	r25, 0xFD	; 253
    f06a:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_opendir>
    if (res) { put_rc(res); return; }
    f06e:	0f 90       	pop	r0
    f070:	0f 90       	pop	r0
    f072:	0f 90       	pop	r0
    f074:	0f 90       	pop	r0
    f076:	0f 90       	pop	r0
    f078:	00 97       	sbiw	r24, 0x00	; 0
    f07a:	11 f0       	breq	.+4      	; 0xf080 <fatfs_ls+0x5c>
    f07c:	36 dd       	rcall	.-1428   	; 0xeaea <put_rc>
    p1 = s1 = s2 = 0;
    f07e:	9a c0       	rjmp	.+308    	; 0xf1b4 <fatfs_ls+0x190>
    f080:	cb 5b       	subi	r28, 0xBB	; 187
    f082:	dd 4f       	sbci	r29, 0xFD	; 253
    f084:	18 82       	st	Y, r1
    f086:	19 82       	std	Y+1, r1	; 0x01
    f088:	1a 82       	std	Y+2, r1	; 0x02
    f08a:	1b 82       	std	Y+3, r1	; 0x03
    f08c:	c5 54       	subi	r28, 0x45	; 69
    f08e:	d2 40       	sbci	r29, 0x02	; 2
    f090:	c1 2c       	mov	r12, r1
    f092:	d1 2c       	mov	r13, r1
    f094:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    f096:	f1 2c       	mov	r15, r1
    f098:	be 01       	movw	r22, r28
    f09a:	6f 5f       	subi	r22, 0xFF	; 255
    f09c:	7f 4f       	sbci	r23, 0xFF	; 255
    f09e:	ce 01       	movw	r24, r28
    f0a0:	89 5e       	subi	r24, 0xE9	; 233
    f0a2:	9d 4f       	sbci	r25, 0xFD	; 253
    f0a4:	0e 94 54 63 	call	0xc6a8	; 0xc6a8 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    f0a8:	89 2b       	or	r24, r25
    f0aa:	49 f5       	brne	.+82     	; 0xf0fe <fatfs_ls+0xda>
    f0ac:	8f 89       	ldd	r24, Y+23	; 0x17
    f0ae:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    f0b0:	31 f1       	breq	.+76     	; 0xf0fe <fatfs_ls+0xda>
    f0b2:	89 85       	ldd	r24, Y+9	; 0x09
    f0b4:	84 ff       	sbrs	r24, 4
        {
            s2++;
    f0b6:	04 c0       	rjmp	.+8      	; 0xf0c0 <fatfs_ls+0x9c>
    f0b8:	ff ef       	ldi	r31, 0xFF	; 255
    f0ba:	cf 1a       	sub	r12, r31
    f0bc:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    f0be:	1b c0       	rjmp	.+54     	; 0xf0f6 <fatfs_ls+0xd2>
    f0c0:	2f ef       	ldi	r18, 0xFF	; 255
    f0c2:	e2 1a       	sub	r14, r18
    f0c4:	f2 0a       	sbc	r15, r18
    f0c6:	49 81       	ldd	r20, Y+1	; 0x01
    f0c8:	5a 81       	ldd	r21, Y+2	; 0x02
    f0ca:	6b 81       	ldd	r22, Y+3	; 0x03
    f0cc:	7c 81       	ldd	r23, Y+4	; 0x04
    f0ce:	cb 5b       	subi	r28, 0xBB	; 187
    f0d0:	dd 4f       	sbci	r29, 0xFD	; 253
    f0d2:	88 81       	ld	r24, Y
    f0d4:	99 81       	ldd	r25, Y+1	; 0x01
    f0d6:	aa 81       	ldd	r26, Y+2	; 0x02
    f0d8:	bb 81       	ldd	r27, Y+3	; 0x03
    f0da:	c5 54       	subi	r28, 0x45	; 69
    f0dc:	d2 40       	sbci	r29, 0x02	; 2
    f0de:	84 0f       	add	r24, r20
    f0e0:	95 1f       	adc	r25, r21
    f0e2:	a6 1f       	adc	r26, r22
    f0e4:	b7 1f       	adc	r27, r23
    f0e6:	cb 5b       	subi	r28, 0xBB	; 187
    f0e8:	dd 4f       	sbci	r29, 0xFD	; 253
    f0ea:	88 83       	st	Y, r24
    f0ec:	99 83       	std	Y+1, r25	; 0x01
    f0ee:	aa 83       	std	Y+2, r26	; 0x02
    f0f0:	bb 83       	std	Y+3, r27	; 0x03
    f0f2:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    f0f4:	d2 40       	sbci	r29, 0x02	; 2
    f0f6:	ce 01       	movw	r24, r28
    f0f8:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    f0fa:	f1 de       	rcall	.-542    	; 0xeede <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    f0fc:	cd cf       	rjmp	.-102    	; 0xf098 <fatfs_ls+0x74>
    f0fe:	df 92       	push	r13
    f100:	cf 92       	push	r12
    f102:	c8 5b       	subi	r28, 0xB8	; 184
    f104:	dd 4f       	sbci	r29, 0xFD	; 253
    f106:	88 81       	ld	r24, Y
    f108:	c8 54       	subi	r28, 0x48	; 72
    f10a:	d2 40       	sbci	r29, 0x02	; 2
    f10c:	8f 93       	push	r24
    f10e:	c9 5b       	subi	r28, 0xB9	; 185
    f110:	dd 4f       	sbci	r29, 0xFD	; 253
    f112:	88 81       	ld	r24, Y
    f114:	c7 54       	subi	r28, 0x47	; 71
    f116:	d2 40       	sbci	r29, 0x02	; 2
    f118:	8f 93       	push	r24
    f11a:	ca 5b       	subi	r28, 0xBA	; 186
    f11c:	dd 4f       	sbci	r29, 0xFD	; 253
    f11e:	88 81       	ld	r24, Y
    f120:	c6 54       	subi	r28, 0x46	; 70
    f122:	d2 40       	sbci	r29, 0x02	; 2
    f124:	8f 93       	push	r24
    f126:	cb 5b       	subi	r28, 0xBB	; 187
    f128:	dd 4f       	sbci	r29, 0xFD	; 253
    f12a:	88 81       	ld	r24, Y
    f12c:	c5 54       	subi	r28, 0x45	; 69
    f12e:	d2 40       	sbci	r29, 0x02	; 2
    f130:	8f 93       	push	r24
    f132:	ff 92       	push	r15
    f134:	ef 92       	push	r14
    f136:	89 e7       	ldi	r24, 0x79	; 121
    f138:	9a e0       	ldi	r25, 0x0A	; 10
    f13a:	1f 92       	push	r1
    f13c:	9f 93       	push	r25
    f13e:	8f 93       	push	r24
    f140:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    f144:	ae 01       	movw	r20, r28
    f146:	47 5b       	subi	r20, 0xB7	; 183
    f148:	5d 4f       	sbci	r21, 0xFD	; 253
    f14a:	be 01       	movw	r22, r28
    f14c:	6b 5b       	subi	r22, 0xBB	; 187
    f14e:	7d 4f       	sbci	r23, 0xFD	; 253
    f150:	c8 01       	movw	r24, r16
    f152:	0e 94 da 63 	call	0xc7b4	; 0xc7b4 <f_getfree>
    f156:	0f b6       	in	r0, 0x3f	; 63
    f158:	f8 94       	cli
    f15a:	de bf       	out	0x3e, r29	; 62
    f15c:	0f be       	out	0x3f, r0	; 63
    f15e:	cd bf       	out	0x3d, r28	; 61
    f160:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    f162:	41 f5       	brne	.+80     	; 0xf1b4 <fatfs_ls+0x190>
    f164:	c7 5b       	subi	r28, 0xB7	; 183
    f166:	dd 4f       	sbci	r29, 0xFD	; 253
    f168:	e8 81       	ld	r30, Y
    f16a:	f9 81       	ldd	r31, Y+1	; 0x01
    f16c:	c9 54       	subi	r28, 0x49	; 73
    f16e:	d2 40       	sbci	r29, 0x02	; 2
    f170:	a1 85       	ldd	r26, Z+9	; 0x09
    f172:	b2 85       	ldd	r27, Z+10	; 0x0a
    f174:	cb 5b       	subi	r28, 0xBB	; 187
    f176:	dd 4f       	sbci	r29, 0xFD	; 253
    f178:	28 81       	ld	r18, Y
    f17a:	39 81       	ldd	r19, Y+1	; 0x01
    f17c:	4a 81       	ldd	r20, Y+2	; 0x02
    f17e:	5b 81       	ldd	r21, Y+3	; 0x03
    f180:	c5 54       	subi	r28, 0x45	; 69
    f182:	d2 40       	sbci	r29, 0x02	; 2
    f184:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
    f188:	22 e0       	ldi	r18, 0x02	; 2
    f18a:	30 e0       	ldi	r19, 0x00	; 0
    f18c:	40 e0       	ldi	r20, 0x00	; 0
    f18e:	50 e0       	ldi	r21, 0x00	; 0
    f190:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
    f194:	5f 93       	push	r21
    f196:	4f 93       	push	r20
    f198:	3f 93       	push	r19
    f19a:	2f 93       	push	r18
    f19c:	84 e6       	ldi	r24, 0x64	; 100
    f19e:	9a e0       	ldi	r25, 0x0A	; 10
    f1a0:	1f 92       	push	r1
    f1a2:	9f 93       	push	r25
    f1a4:	8f 93       	push	r24
    f1a6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f1aa:	0f b6       	in	r0, 0x3f	; 63
    f1ac:	f8 94       	cli
    f1ae:	de bf       	out	0x3e, r29	; 62
    f1b0:	0f be       	out	0x3f, r0	; 63
}
    f1b2:	cd bf       	out	0x3d, r28	; 61
    f1b4:	c6 5b       	subi	r28, 0xB6	; 182
    f1b6:	dd 4f       	sbci	r29, 0xFD	; 253
    f1b8:	e8 e0       	ldi	r30, 0x08	; 8
    f1ba:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000f1be <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    f1be:	82 e0       	ldi	r24, 0x02	; 2
    f1c0:	9b e0       	ldi	r25, 0x0B	; 11
    f1c2:	1f 92       	push	r1
    f1c4:	9f 93       	push	r25
    f1c6:	8f 93       	push	r24
    f1c8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("START MMC TEST\n");
    f1cc:	82 ef       	ldi	r24, 0xF2	; 242
    f1ce:	9a e0       	ldi	r25, 0x0A	; 10
    f1d0:	1f 92       	push	r1
    f1d2:	9f 93       	push	r25
    f1d4:	8f 93       	push	r24
    f1d6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    fatfs_status("/");
    f1da:	8c e1       	ldi	r24, 0x1C	; 28
    f1dc:	98 e0       	ldi	r25, 0x08	; 8
    f1de:	13 dd       	rcall	.-1498   	; 0xec06 <fatfs_status>
    printf("MMC Directory List\n");
    f1e0:	8e ed       	ldi	r24, 0xDE	; 222
    f1e2:	9a e0       	ldi	r25, 0x0A	; 10
    f1e4:	1f 92       	push	r1
    f1e6:	9f 93       	push	r25
    f1e8:	8f 93       	push	r24
    f1ea:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    fatfs_ls("/");
    f1ee:	8c e1       	ldi	r24, 0x1C	; 28
    f1f0:	98 e0       	ldi	r25, 0x08	; 8
    f1f2:	18 df       	rcall	.-464    	; 0xf024 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    f1f4:	80 ed       	ldi	r24, 0xD0	; 208
    f1f6:	9a e0       	ldi	r25, 0x0A	; 10
    f1f8:	1f 92       	push	r1
    f1fa:	9f 93       	push	r25
    f1fc:	8f 93       	push	r24
    f1fe:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("==============================\n");
    f202:	80 eb       	ldi	r24, 0xB0	; 176
    f204:	9a e0       	ldi	r25, 0x0A	; 10
    f206:	1f 92       	push	r1
    f208:	9f 93       	push	r25
    f20a:	8f 93       	push	r24
    f20c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
}
    f210:	8d b7       	in	r24, 0x3d	; 61
    f212:	9e b7       	in	r25, 0x3e	; 62
    f214:	0f 96       	adiw	r24, 0x0f	; 15
    f216:	0f b6       	in	r0, 0x3f	; 63
    f218:	f8 94       	cli
    f21a:	9e bf       	out	0x3e, r25	; 62
    f21c:	0f be       	out	0x3f, r0	; 63
    f21e:	8d bf       	out	0x3d, r24	; 61
    f220:	08 95       	ret

0000f222 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    f222:	ef 92       	push	r14
    f224:	ff 92       	push	r15
    f226:	0f 93       	push	r16
    f228:	1f 93       	push	r17
    f22a:	cf 93       	push	r28
    f22c:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    f22e:	fb 01       	movw	r30, r22
    f230:	20 81       	ld	r18, Z
    f232:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    f234:	21 15       	cp	r18, r1
    f236:	31 05       	cpc	r19, r1
    f238:	19 f4       	brne	.+6      	; 0xf240 <fatfs_tests+0x1e>
        return(0);
    f23a:	80 e0       	ldi	r24, 0x00	; 0
    f23c:	90 e0       	ldi	r25, 0x00	; 0
    f23e:	77 c0       	rjmp	.+238    	; 0xf32e <fatfs_tests+0x10c>
    f240:	eb 01       	movw	r28, r22
    f242:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    f244:	66 e4       	ldi	r22, 0x46	; 70
    f246:	78 e0       	ldi	r23, 0x08	; 8
    f248:	c9 01       	movw	r24, r18
    f24a:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
    f24e:	89 2b       	or	r24, r25
    f250:	a1 f3       	breq	.-24     	; 0xf23a <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    f252:	ea 80       	ldd	r14, Y+2	; 0x02
    f254:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    f256:	e1 14       	cp	r14, r1
    f258:	f1 04       	cpc	r15, r1
    f25a:	21 f4       	brne	.+8      	; 0xf264 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    f25c:	81 e0       	ldi	r24, 0x01	; 1
    f25e:	90 e0       	ldi	r25, 0x00	; 0
    f260:	c5 de       	rcall	.-630    	; 0xefec <fatfs_help>
    f262:	63 c0       	rjmp	.+198    	; 0xf32a <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    f264:	66 e4       	ldi	r22, 0x46	; 70
    f266:	76 e1       	ldi	r23, 0x16	; 22
    f268:	c7 01       	movw	r24, r14
    f26a:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
    f26e:	89 2b       	or	r24, r25
    f270:	a9 f7       	brne	.-22     	; 0xf25c <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    f272:	98 01       	movw	r18, r16
    f274:	42 e0       	ldi	r20, 0x02	; 2
    f276:	50 e0       	ldi	r21, 0x00	; 0
    f278:	6c e4       	ldi	r22, 0x4C	; 76
    f27a:	78 e0       	ldi	r23, 0x08	; 8
    f27c:	c7 01       	movw	r24, r14
    f27e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
    f282:	89 2b       	or	r24, r25
    f284:	51 f1       	breq	.+84     	; 0xf2da <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    f286:	1f 93       	push	r17
    f288:	0f 93       	push	r16
    f28a:	1f 92       	push	r1
    f28c:	82 e0       	ldi	r24, 0x02	; 2
    f28e:	8f 93       	push	r24
    f290:	82 e2       	ldi	r24, 0x22	; 34
    f292:	9b e0       	ldi	r25, 0x0B	; 11
    f294:	1f 92       	push	r1
    f296:	9f 93       	push	r25
    f298:	8f 93       	push	r24
    f29a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f29e:	7e 01       	movw	r14, r28
    f2a0:	f4 e0       	ldi	r31, 0x04	; 4
    f2a2:	ef 0e       	add	r14, r31
    f2a4:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    f2a6:	8d b7       	in	r24, 0x3d	; 61
    f2a8:	9e b7       	in	r25, 0x3e	; 62
    f2aa:	07 96       	adiw	r24, 0x07	; 7
    f2ac:	0f b6       	in	r0, 0x3f	; 63
    f2ae:	f8 94       	cli
    f2b0:	9e bf       	out	0x3e, r25	; 62
    f2b2:	0f be       	out	0x3f, r0	; 63
    f2b4:	8d bf       	out	0x3d, r24	; 61
    f2b6:	c2 e0       	ldi	r28, 0x02	; 2
    f2b8:	d0 e0       	ldi	r29, 0x00	; 0
    f2ba:	c0 17       	cp	r28, r16
    f2bc:	d1 07       	cpc	r29, r17
    f2be:	3c f4       	brge	.+14     	; 0xf2ce <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    f2c0:	f7 01       	movw	r30, r14
    f2c2:	81 91       	ld	r24, Z+
    f2c4:	91 91       	ld	r25, Z+
    f2c6:	7f 01       	movw	r14, r30
    f2c8:	ad de       	rcall	.-678    	; 0xf024 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    f2ca:	21 96       	adiw	r28, 0x01	; 1
    f2cc:	f6 cf       	rjmp	.-20     	; 0xf2ba <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    f2ce:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    f2d0:	61 f5       	brne	.+88     	; 0xf32a <fatfs_tests+0x108>
    f2d2:	88 e5       	ldi	r24, 0x58	; 88
    f2d4:	97 e1       	ldi	r25, 0x17	; 23
    f2d6:	a6 de       	rcall	.-692    	; 0xf024 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    f2d8:	28 c0       	rjmp	.+80     	; 0xf32a <fatfs_tests+0x108>
    f2da:	98 01       	movw	r18, r16
    f2dc:	42 e0       	ldi	r20, 0x02	; 2
    f2de:	50 e0       	ldi	r21, 0x00	; 0
    f2e0:	6f e4       	ldi	r22, 0x4F	; 79
    f2e2:	78 e0       	ldi	r23, 0x08	; 8
    f2e4:	c7 01       	movw	r24, r14
    f2e6:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
    {
        mmc_test();
    f2ea:	89 2b       	or	r24, r25
    f2ec:	11 f0       	breq	.+4      	; 0xf2f2 <fatfs_tests+0xd0>
    f2ee:	67 df       	rcall	.-306    	; 0xf1be <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    f2f0:	1c c0       	rjmp	.+56     	; 0xf32a <fatfs_tests+0x108>
    f2f2:	98 01       	movw	r18, r16
    f2f4:	42 e0       	ldi	r20, 0x02	; 2
    f2f6:	50 e0       	ldi	r21, 0x00	; 0
    f2f8:	68 e5       	ldi	r22, 0x58	; 88
    f2fa:	78 e0       	ldi	r23, 0x08	; 8
    f2fc:	c7 01       	movw	r24, r14
    f2fe:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
    {
        mmc_init(1);
    f302:	89 2b       	or	r24, r25
    f304:	21 f0       	breq	.+8      	; 0xf30e <fatfs_tests+0xec>
    f306:	81 e0       	ldi	r24, 0x01	; 1
    f308:	90 e0       	ldi	r25, 0x00	; 0
    f30a:	c4 da       	rcall	.-2680   	; 0xe894 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    f30c:	0e c0       	rjmp	.+28     	; 0xf32a <fatfs_tests+0x108>
    f30e:	98 01       	movw	r18, r16
    f310:	43 e0       	ldi	r20, 0x03	; 3
    f312:	50 e0       	ldi	r21, 0x00	; 0
    f314:	61 e6       	ldi	r22, 0x61	; 97
    f316:	78 e0       	ldi	r23, 0x08	; 8
    f318:	c7 01       	movw	r24, r14
    f31a:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
    f31e:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    f320:	09 f4       	brne	.+2      	; 0xf324 <fatfs_tests+0x102>
    f322:	8b cf       	rjmp	.-234    	; 0xf23a <fatfs_tests+0x18>
    f324:	8c 81       	ldd	r24, Y+4	; 0x04
    f326:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    f328:	6e dc       	rcall	.-1828   	; 0xec06 <fatfs_status>
    f32a:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    f32c:	90 e0       	ldi	r25, 0x00	; 0
    f32e:	cd b7       	in	r28, 0x3d	; 61
    f330:	de b7       	in	r29, 0x3e	; 62
    f332:	e6 e0       	ldi	r30, 0x06	; 6
    f334:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0000f338 <fatfs_getc>:
    f338:	8f 92       	push	r8
    f33a:	9f 92       	push	r9
    f33c:	af 92       	push	r10
    f33e:	bf 92       	push	r11
    f340:	ef 92       	push	r14
    f342:	ff 92       	push	r15
    f344:	0f 93       	push	r16
    f346:	1f 93       	push	r17
    f348:	cf 93       	push	r28
    f34a:	df 93       	push	r29
    f34c:	00 d0       	rcall	.+0      	; 0xf34e <fatfs_getc+0x16>
    f34e:	1f 92       	push	r1
    f350:	cd b7       	in	r28, 0x3d	; 61
    f352:	de b7       	in	r29, 0x3e	; 62
    f354:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    f358:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    f35c:	00 97       	sbiw	r24, 0x00	; 0
    f35e:	39 f4       	brne	.+14     	; 0xf36e <fatfs_getc+0x36>
    f360:	89 e0       	ldi	r24, 0x09	; 9
    f362:	90 e0       	ldi	r25, 0x00	; 0
    f364:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f368:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f36c:	2f c0       	rjmp	.+94     	; 0xf3cc <fatfs_getc+0x94>
    f36e:	fc 01       	movw	r30, r24
    f370:	e4 84       	ldd	r14, Z+12	; 0x0c
    f372:	f5 84       	ldd	r15, Z+13	; 0x0d
    f374:	e1 14       	cp	r14, r1
    f376:	f1 04       	cpc	r15, r1
    f378:	99 f3       	breq	.-26     	; 0xf360 <fatfs_getc+0x28>
    f37a:	8c 01       	movw	r16, r24
    f37c:	9e 01       	movw	r18, r28
    f37e:	2f 5f       	subi	r18, 0xFF	; 255
    f380:	3f 4f       	sbci	r19, 0xFF	; 255
    f382:	41 e0       	ldi	r20, 0x01	; 1
    f384:	50 e0       	ldi	r21, 0x00	; 0
    f386:	be 01       	movw	r22, r28
    f388:	6d 5f       	subi	r22, 0xFD	; 253
    f38a:	7f 4f       	sbci	r23, 0xFF	; 255
    f38c:	c7 01       	movw	r24, r14
    f38e:	0e 94 e5 5a 	call	0xb5ca	; 0xb5ca <f_read>
    f392:	00 97       	sbiw	r24, 0x00	; 0
    f394:	31 f4       	brne	.+12     	; 0xf3a2 <fatfs_getc+0x6a>
    f396:	29 81       	ldd	r18, Y+1	; 0x01
    f398:	3a 81       	ldd	r19, Y+2	; 0x02
    f39a:	21 30       	cpi	r18, 0x01	; 1
    f39c:	31 05       	cpc	r19, r1
    f39e:	c9 f0       	breq	.+50     	; 0xf3d2 <fatfs_getc+0x9a>
    f3a0:	03 c0       	rjmp	.+6      	; 0xf3a8 <fatfs_getc+0x70>
    f3a2:	84 31       	cpi	r24, 0x14	; 20
    f3a4:	91 05       	cpc	r25, r1
    f3a6:	40 f4       	brcc	.+16     	; 0xf3b8 <fatfs_getc+0x80>
    f3a8:	fc 01       	movw	r30, r24
    f3aa:	ec 5f       	subi	r30, 0xFC	; 252
    f3ac:	f8 4f       	sbci	r31, 0xF8	; 248
    f3ae:	80 81       	ld	r24, Z
    f3b0:	08 2e       	mov	r0, r24
    f3b2:	00 0c       	add	r0, r0
    f3b4:	99 0b       	sbc	r25, r25
    f3b6:	02 c0       	rjmp	.+4      	; 0xf3bc <fatfs_getc+0x84>
    f3b8:	83 e2       	ldi	r24, 0x23	; 35
    f3ba:	90 e0       	ldi	r25, 0x00	; 0
    f3bc:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f3c0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f3c4:	f8 01       	movw	r30, r16
    f3c6:	83 81       	ldd	r24, Z+3	; 0x03
    f3c8:	80 62       	ori	r24, 0x20	; 32
    f3ca:	83 83       	std	Z+3, r24	; 0x03
    f3cc:	8f ef       	ldi	r24, 0xFF	; 255
    f3ce:	9f ef       	ldi	r25, 0xFF	; 255
    f3d0:	28 c0       	rjmp	.+80     	; 0xf422 <fatfs_getc+0xea>
    f3d2:	8b 81       	ldd	r24, Y+3	; 0x03
    f3d4:	8d 30       	cpi	r24, 0x0D	; 13
    f3d6:	01 f5       	brne	.+64     	; 0xf418 <fatfs_getc+0xe0>
    f3d8:	f7 01       	movw	r30, r14
    f3da:	80 88       	ldd	r8, Z+16	; 0x10
    f3dc:	91 88       	ldd	r9, Z+17	; 0x11
    f3de:	a2 88       	ldd	r10, Z+18	; 0x12
    f3e0:	b3 88       	ldd	r11, Z+19	; 0x13
    f3e2:	9e 01       	movw	r18, r28
    f3e4:	2f 5f       	subi	r18, 0xFF	; 255
    f3e6:	3f 4f       	sbci	r19, 0xFF	; 255
    f3e8:	41 e0       	ldi	r20, 0x01	; 1
    f3ea:	50 e0       	ldi	r21, 0x00	; 0
    f3ec:	be 01       	movw	r22, r28
    f3ee:	6d 5f       	subi	r22, 0xFD	; 253
    f3f0:	7f 4f       	sbci	r23, 0xFF	; 255
    f3f2:	c7 01       	movw	r24, r14
    f3f4:	0e 94 e5 5a 	call	0xb5ca	; 0xb5ca <f_read>
    f3f8:	89 2b       	or	r24, r25
    f3fa:	89 f4       	brne	.+34     	; 0xf41e <fatfs_getc+0xe6>
    f3fc:	89 81       	ldd	r24, Y+1	; 0x01
    f3fe:	9a 81       	ldd	r25, Y+2	; 0x02
    f400:	01 97       	sbiw	r24, 0x01	; 1
    f402:	69 f4       	brne	.+26     	; 0xf41e <fatfs_getc+0xe6>
    f404:	8b 81       	ldd	r24, Y+3	; 0x03
    f406:	8a 30       	cpi	r24, 0x0A	; 10
    f408:	31 f0       	breq	.+12     	; 0xf416 <fatfs_getc+0xde>
    f40a:	b5 01       	movw	r22, r10
    f40c:	a4 01       	movw	r20, r8
    f40e:	c7 01       	movw	r24, r14
    f410:	0e 94 ef 5f 	call	0xbfde	; 0xbfde <f_lseek>
    f414:	04 c0       	rjmp	.+8      	; 0xf41e <fatfs_getc+0xe6>
    f416:	8b 83       	std	Y+3, r24	; 0x03
    f418:	8b 81       	ldd	r24, Y+3	; 0x03
    f41a:	90 e0       	ldi	r25, 0x00	; 0
    f41c:	02 c0       	rjmp	.+4      	; 0xf422 <fatfs_getc+0xea>
    f41e:	8a e0       	ldi	r24, 0x0A	; 10
    f420:	90 e0       	ldi	r25, 0x00	; 0
    f422:	0f 90       	pop	r0
    f424:	0f 90       	pop	r0
    f426:	0f 90       	pop	r0
    f428:	df 91       	pop	r29
    f42a:	cf 91       	pop	r28
    f42c:	1f 91       	pop	r17
    f42e:	0f 91       	pop	r16
    f430:	ff 90       	pop	r15
    f432:	ef 90       	pop	r14
    f434:	bf 90       	pop	r11
    f436:	af 90       	pop	r10
    f438:	9f 90       	pop	r9
    f43a:	8f 90       	pop	r8
    f43c:	08 95       	ret

0000f43e <fatfs_putc>:
    f43e:	a3 e0       	ldi	r26, 0x03	; 3
    f440:	b0 e0       	ldi	r27, 0x00	; 0
    f442:	e5 e2       	ldi	r30, 0x25	; 37
    f444:	fa e7       	ldi	r31, 0x7A	; 122
    f446:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    f44a:	8b 83       	std	Y+3, r24	; 0x03
    f44c:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    f450:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    f454:	61 15       	cp	r22, r1
    f456:	71 05       	cpc	r23, r1
    f458:	39 f4       	brne	.+14     	; 0xf468 <fatfs_putc+0x2a>
    f45a:	89 e0       	ldi	r24, 0x09	; 9
    f45c:	90 e0       	ldi	r25, 0x00	; 0
    f45e:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f462:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f466:	2d c0       	rjmp	.+90     	; 0xf4c2 <fatfs_putc+0x84>
    f468:	fb 01       	movw	r30, r22
    f46a:	84 85       	ldd	r24, Z+12	; 0x0c
    f46c:	95 85       	ldd	r25, Z+13	; 0x0d
    f46e:	00 97       	sbiw	r24, 0x00	; 0
    f470:	a1 f3       	breq	.-24     	; 0xf45a <fatfs_putc+0x1c>
    f472:	8b 01       	movw	r16, r22
    f474:	9e 01       	movw	r18, r28
    f476:	2f 5f       	subi	r18, 0xFF	; 255
    f478:	3f 4f       	sbci	r19, 0xFF	; 255
    f47a:	41 e0       	ldi	r20, 0x01	; 1
    f47c:	50 e0       	ldi	r21, 0x00	; 0
    f47e:	be 01       	movw	r22, r28
    f480:	6d 5f       	subi	r22, 0xFD	; 253
    f482:	7f 4f       	sbci	r23, 0xFF	; 255
    f484:	0e 94 30 5c 	call	0xb860	; 0xb860 <f_write>
    f488:	00 97       	sbiw	r24, 0x00	; 0
    f48a:	31 f4       	brne	.+12     	; 0xf498 <fatfs_putc+0x5a>
    f48c:	29 81       	ldd	r18, Y+1	; 0x01
    f48e:	3a 81       	ldd	r19, Y+2	; 0x02
    f490:	21 30       	cpi	r18, 0x01	; 1
    f492:	31 05       	cpc	r19, r1
    f494:	c9 f0       	breq	.+50     	; 0xf4c8 <fatfs_putc+0x8a>
    f496:	03 c0       	rjmp	.+6      	; 0xf49e <fatfs_putc+0x60>
    f498:	84 31       	cpi	r24, 0x14	; 20
    f49a:	91 05       	cpc	r25, r1
    f49c:	40 f4       	brcc	.+16     	; 0xf4ae <fatfs_putc+0x70>
    f49e:	fc 01       	movw	r30, r24
    f4a0:	ec 5f       	subi	r30, 0xFC	; 252
    f4a2:	f8 4f       	sbci	r31, 0xF8	; 248
    f4a4:	80 81       	ld	r24, Z
    f4a6:	08 2e       	mov	r0, r24
    f4a8:	00 0c       	add	r0, r0
    f4aa:	99 0b       	sbc	r25, r25
    f4ac:	02 c0       	rjmp	.+4      	; 0xf4b2 <fatfs_putc+0x74>
    f4ae:	83 e2       	ldi	r24, 0x23	; 35
    f4b0:	90 e0       	ldi	r25, 0x00	; 0
    f4b2:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f4b6:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f4ba:	f8 01       	movw	r30, r16
    f4bc:	83 81       	ldd	r24, Z+3	; 0x03
    f4be:	80 62       	ori	r24, 0x20	; 32
    f4c0:	83 83       	std	Z+3, r24	; 0x03
    f4c2:	8f ef       	ldi	r24, 0xFF	; 255
    f4c4:	9f ef       	ldi	r25, 0xFF	; 255
    f4c6:	02 c0       	rjmp	.+4      	; 0xf4cc <fatfs_putc+0x8e>
    f4c8:	8b 81       	ldd	r24, Y+3	; 0x03
    f4ca:	90 e0       	ldi	r25, 0x00	; 0
    f4cc:	23 96       	adiw	r28, 0x03	; 3
    f4ce:	e4 e0       	ldi	r30, 0x04	; 4
    f4d0:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

0000f4d4 <fgetc>:
    f4d4:	cf 93       	push	r28
    f4d6:	df 93       	push	r29
    f4d8:	ec 01       	movw	r28, r24
    f4da:	00 97       	sbiw	r24, 0x00	; 0
    f4dc:	39 f4       	brne	.+14     	; 0xf4ec <fgetc+0x18>
    f4de:	89 e0       	ldi	r24, 0x09	; 9
    f4e0:	90 e0       	ldi	r25, 0x00	; 0
    f4e2:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f4e6:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f4ea:	40 c0       	rjmp	.+128    	; 0xf56c <fgetc+0x98>
    f4ec:	2b 81       	ldd	r18, Y+3	; 0x03
    f4ee:	20 ff       	sbrs	r18, 0
    f4f0:	3d c0       	rjmp	.+122    	; 0xf56c <fgetc+0x98>
    f4f2:	26 ff       	sbrs	r18, 6
    f4f4:	0a c0       	rjmp	.+20     	; 0xf50a <fgetc+0x36>
    f4f6:	2f 7b       	andi	r18, 0xBF	; 191
    f4f8:	2b 83       	std	Y+3, r18	; 0x03
    f4fa:	8e 81       	ldd	r24, Y+6	; 0x06
    f4fc:	9f 81       	ldd	r25, Y+7	; 0x07
    f4fe:	01 96       	adiw	r24, 0x01	; 1
    f500:	9f 83       	std	Y+7, r25	; 0x07
    f502:	8e 83       	std	Y+6, r24	; 0x06
    f504:	8a 81       	ldd	r24, Y+2	; 0x02
    f506:	90 e0       	ldi	r25, 0x00	; 0
    f508:	33 c0       	rjmp	.+102    	; 0xf570 <fgetc+0x9c>
    f50a:	22 ff       	sbrs	r18, 2
    f50c:	0d c0       	rjmp	.+26     	; 0xf528 <fgetc+0x54>
    f50e:	e8 81       	ld	r30, Y
    f510:	f9 81       	ldd	r31, Y+1	; 0x01
    f512:	80 81       	ld	r24, Z
    f514:	90 e0       	ldi	r25, 0x00	; 0
    f516:	00 97       	sbiw	r24, 0x00	; 0
    f518:	19 f4       	brne	.+6      	; 0xf520 <fgetc+0x4c>
    f51a:	20 62       	ori	r18, 0x20	; 32
    f51c:	2b 83       	std	Y+3, r18	; 0x03
    f51e:	26 c0       	rjmp	.+76     	; 0xf56c <fgetc+0x98>
    f520:	31 96       	adiw	r30, 0x01	; 1
    f522:	f9 83       	std	Y+1, r31	; 0x01
    f524:	e8 83       	st	Y, r30
    f526:	1b c0       	rjmp	.+54     	; 0xf55e <fgetc+0x8a>
    f528:	ea 85       	ldd	r30, Y+10	; 0x0a
    f52a:	fb 85       	ldd	r31, Y+11	; 0x0b
    f52c:	30 97       	sbiw	r30, 0x00	; 0
    f52e:	59 f4       	brne	.+22     	; 0xf546 <fgetc+0x72>
    f530:	8e e7       	ldi	r24, 0x7E	; 126
    f532:	9c e0       	ldi	r25, 0x0C	; 12
    f534:	1f 92       	push	r1
    f536:	9f 93       	push	r25
    f538:	8f 93       	push	r24
    f53a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f53e:	0f 90       	pop	r0
    f540:	0f 90       	pop	r0
    f542:	0f 90       	pop	r0
    f544:	13 c0       	rjmp	.+38     	; 0xf56c <fgetc+0x98>
    f546:	09 95       	icall
    f548:	97 ff       	sbrs	r25, 7
    f54a:	09 c0       	rjmp	.+18     	; 0xf55e <fgetc+0x8a>
    f54c:	2b 81       	ldd	r18, Y+3	; 0x03
    f54e:	02 96       	adiw	r24, 0x02	; 2
    f550:	11 f0       	breq	.+4      	; 0xf556 <fgetc+0x82>
    f552:	80 e2       	ldi	r24, 0x20	; 32
    f554:	01 c0       	rjmp	.+2      	; 0xf558 <fgetc+0x84>
    f556:	80 e1       	ldi	r24, 0x10	; 16
    f558:	82 2b       	or	r24, r18
    f55a:	8b 83       	std	Y+3, r24	; 0x03
    f55c:	07 c0       	rjmp	.+14     	; 0xf56c <fgetc+0x98>
    f55e:	2e 81       	ldd	r18, Y+6	; 0x06
    f560:	3f 81       	ldd	r19, Y+7	; 0x07
    f562:	2f 5f       	subi	r18, 0xFF	; 255
    f564:	3f 4f       	sbci	r19, 0xFF	; 255
    f566:	3f 83       	std	Y+7, r19	; 0x07
    f568:	2e 83       	std	Y+6, r18	; 0x06
    f56a:	02 c0       	rjmp	.+4      	; 0xf570 <fgetc+0x9c>
    f56c:	8f ef       	ldi	r24, 0xFF	; 255
    f56e:	9f ef       	ldi	r25, 0xFF	; 255
    f570:	df 91       	pop	r29
    f572:	cf 91       	pop	r28
    f574:	08 95       	ret

0000f576 <fputc>:
    f576:	cf 93       	push	r28
    f578:	df 93       	push	r29
    f57a:	eb 01       	movw	r28, r22
    f57c:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    f580:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    f584:	20 91 ec 1c 	lds	r18, 0x1CEC	; 0x801cec <__iob+0x2>
    f588:	30 91 ed 1c 	lds	r19, 0x1CED	; 0x801ced <__iob+0x3>
    f58c:	62 17       	cp	r22, r18
    f58e:	73 07       	cpc	r23, r19
    f590:	49 f0       	breq	.+18     	; 0xf5a4 <fputc+0x2e>
    f592:	20 91 ee 1c 	lds	r18, 0x1CEE	; 0x801cee <__iob+0x4>
    f596:	30 91 ef 1c 	lds	r19, 0x1CEF	; 0x801cef <__iob+0x5>
    f59a:	62 17       	cp	r22, r18
    f59c:	73 07       	cpc	r23, r19
    f59e:	11 f0       	breq	.+4      	; 0xf5a4 <fputc+0x2e>
    f5a0:	4e df       	rcall	.-356    	; 0xf43e <fatfs_putc>
    f5a2:	33 c0       	rjmp	.+102    	; 0xf60a <fputc+0x94>
    f5a4:	2b 81       	ldd	r18, Y+3	; 0x03
    f5a6:	21 ff       	sbrs	r18, 1
    f5a8:	2e c0       	rjmp	.+92     	; 0xf606 <fputc+0x90>
    f5aa:	22 ff       	sbrs	r18, 2
    f5ac:	10 c0       	rjmp	.+32     	; 0xf5ce <fputc+0x58>
    f5ae:	4e 81       	ldd	r20, Y+6	; 0x06
    f5b0:	5f 81       	ldd	r21, Y+7	; 0x07
    f5b2:	2c 81       	ldd	r18, Y+4	; 0x04
    f5b4:	3d 81       	ldd	r19, Y+5	; 0x05
    f5b6:	42 17       	cp	r20, r18
    f5b8:	53 07       	cpc	r21, r19
    f5ba:	f4 f4       	brge	.+60     	; 0xf5f8 <fputc+0x82>
    f5bc:	e8 81       	ld	r30, Y
    f5be:	f9 81       	ldd	r31, Y+1	; 0x01
    f5c0:	9f 01       	movw	r18, r30
    f5c2:	2f 5f       	subi	r18, 0xFF	; 255
    f5c4:	3f 4f       	sbci	r19, 0xFF	; 255
    f5c6:	39 83       	std	Y+1, r19	; 0x01
    f5c8:	28 83       	st	Y, r18
    f5ca:	80 83       	st	Z, r24
    f5cc:	15 c0       	rjmp	.+42     	; 0xf5f8 <fputc+0x82>
    f5ce:	e8 85       	ldd	r30, Y+8	; 0x08
    f5d0:	f9 85       	ldd	r31, Y+9	; 0x09
    f5d2:	30 97       	sbiw	r30, 0x00	; 0
    f5d4:	59 f4       	brne	.+22     	; 0xf5ec <fputc+0x76>
    f5d6:	86 e6       	ldi	r24, 0x66	; 102
    f5d8:	9c e0       	ldi	r25, 0x0C	; 12
    f5da:	1f 92       	push	r1
    f5dc:	9f 93       	push	r25
    f5de:	8f 93       	push	r24
    f5e0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f5e4:	0f 90       	pop	r0
    f5e6:	0f 90       	pop	r0
    f5e8:	0f 90       	pop	r0
    f5ea:	0d c0       	rjmp	.+26     	; 0xf606 <fputc+0x90>
    f5ec:	be 01       	movw	r22, r28
    f5ee:	09 95       	icall
    f5f0:	8f 3f       	cpi	r24, 0xFF	; 255
    f5f2:	2f ef       	ldi	r18, 0xFF	; 255
    f5f4:	92 07       	cpc	r25, r18
    f5f6:	39 f0       	breq	.+14     	; 0xf606 <fputc+0x90>
    f5f8:	2e 81       	ldd	r18, Y+6	; 0x06
    f5fa:	3f 81       	ldd	r19, Y+7	; 0x07
    f5fc:	2f 5f       	subi	r18, 0xFF	; 255
    f5fe:	3f 4f       	sbci	r19, 0xFF	; 255
    f600:	3f 83       	std	Y+7, r19	; 0x07
    f602:	2e 83       	std	Y+6, r18	; 0x06
    f604:	02 c0       	rjmp	.+4      	; 0xf60a <fputc+0x94>
    f606:	8f ef       	ldi	r24, 0xFF	; 255
    f608:	9f ef       	ldi	r25, 0xFF	; 255
    f60a:	df 91       	pop	r29
    f60c:	cf 91       	pop	r28
    f60e:	08 95       	ret

0000f610 <_fprintf_putc>:
    f610:	fc 01       	movw	r30, r24
    f612:	86 2f       	mov	r24, r22
    f614:	26 81       	ldd	r18, Z+6	; 0x06
    f616:	37 81       	ldd	r19, Z+7	; 0x07
    f618:	2f 5f       	subi	r18, 0xFF	; 255
    f61a:	3f 4f       	sbci	r19, 0xFF	; 255
    f61c:	37 83       	std	Z+7, r19	; 0x07
    f61e:	26 83       	std	Z+6, r18	; 0x06
    f620:	62 81       	ldd	r22, Z+2	; 0x02
    f622:	73 81       	ldd	r23, Z+3	; 0x03
    f624:	90 e0       	ldi	r25, 0x00	; 0
    f626:	a7 cf       	rjmp	.-178    	; 0xf576 <fputc>
    f628:	08 95       	ret

0000f62a <getchar>:
    f62a:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <__iob>
    f62e:	90 91 eb 1c 	lds	r25, 0x1CEB	; 0x801ceb <__iob+0x1>
    f632:	50 cf       	rjmp	.-352    	; 0xf4d4 <fgetc>
    f634:	08 95       	ret

0000f636 <putchar>:
    f636:	60 91 ec 1c 	lds	r22, 0x1CEC	; 0x801cec <__iob+0x2>
    f63a:	70 91 ed 1c 	lds	r23, 0x1CED	; 0x801ced <__iob+0x3>
    f63e:	9b cf       	rjmp	.-202    	; 0xf576 <fputc>
    f640:	08 95       	ret

0000f642 <fgets>:
    f642:	a0 e0       	ldi	r26, 0x00	; 0
    f644:	b0 e0       	ldi	r27, 0x00	; 0
    f646:	e7 e2       	ldi	r30, 0x27	; 39
    f648:	fb e7       	ldi	r31, 0x7B	; 123
    f64a:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    f64e:	7c 01       	movw	r14, r24
    f650:	6a 01       	movw	r12, r20
    f652:	8b 01       	movw	r16, r22
    f654:	c0 e0       	ldi	r28, 0x00	; 0
    f656:	d0 e0       	ldi	r29, 0x00	; 0
    f658:	01 15       	cp	r16, r1
    f65a:	11 05       	cpc	r17, r1
    f65c:	41 f0       	breq	.+16     	; 0xf66e <fgets+0x2c>
    f65e:	c6 01       	movw	r24, r12
    f660:	39 df       	rcall	.-398    	; 0xf4d4 <fgetc>
    f662:	8f 3f       	cpi	r24, 0xFF	; 255
    f664:	2f ef       	ldi	r18, 0xFF	; 255
    f666:	92 07       	cpc	r25, r18
    f668:	39 f4       	brne	.+14     	; 0xf678 <fgets+0x36>
    f66a:	20 97       	sbiw	r28, 0x00	; 0
    f66c:	b9 f0       	breq	.+46     	; 0xf69c <fgets+0x5a>
    f66e:	ce 0d       	add	r28, r14
    f670:	df 1d       	adc	r29, r15
    f672:	18 82       	st	Y, r1
    f674:	c7 01       	movw	r24, r14
    f676:	14 c0       	rjmp	.+40     	; 0xf6a0 <fgets+0x5e>
    f678:	8a 30       	cpi	r24, 0x0A	; 10
    f67a:	91 05       	cpc	r25, r1
    f67c:	c1 f3       	breq	.-16     	; 0xf66e <fgets+0x2c>
    f67e:	88 30       	cpi	r24, 0x08	; 8
    f680:	91 05       	cpc	r25, r1
    f682:	21 f4       	brne	.+8      	; 0xf68c <fgets+0x4a>
    f684:	20 97       	sbiw	r28, 0x00	; 0
    f686:	39 f0       	breq	.+14     	; 0xf696 <fgets+0x54>
    f688:	21 97       	sbiw	r28, 0x01	; 1
    f68a:	05 c0       	rjmp	.+10     	; 0xf696 <fgets+0x54>
    f68c:	f7 01       	movw	r30, r14
    f68e:	ec 0f       	add	r30, r28
    f690:	fd 1f       	adc	r31, r29
    f692:	80 83       	st	Z, r24
    f694:	21 96       	adiw	r28, 0x01	; 1
    f696:	01 50       	subi	r16, 0x01	; 1
    f698:	11 09       	sbc	r17, r1
    f69a:	de cf       	rjmp	.-68     	; 0xf658 <fgets+0x16>
    f69c:	80 e0       	ldi	r24, 0x00	; 0
    f69e:	90 e0       	ldi	r25, 0x00	; 0
    f6a0:	cd b7       	in	r28, 0x3d	; 61
    f6a2:	de b7       	in	r29, 0x3e	; 62
    f6a4:	e8 e0       	ldi	r30, 0x08	; 8
    f6a6:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000f6aa <fputs>:
    f6aa:	0f 93       	push	r16
    f6ac:	1f 93       	push	r17
    f6ae:	cf 93       	push	r28
    f6b0:	df 93       	push	r29
    f6b2:	8b 01       	movw	r16, r22
    f6b4:	ec 01       	movw	r28, r24
    f6b6:	89 91       	ld	r24, Y+
    f6b8:	88 23       	and	r24, r24
    f6ba:	41 f0       	breq	.+16     	; 0xf6cc <fputs+0x22>
    f6bc:	b8 01       	movw	r22, r16
    f6be:	90 e0       	ldi	r25, 0x00	; 0
    f6c0:	5a df       	rcall	.-332    	; 0xf576 <fputc>
    f6c2:	8f 3f       	cpi	r24, 0xFF	; 255
    f6c4:	2f ef       	ldi	r18, 0xFF	; 255
    f6c6:	92 07       	cpc	r25, r18
    f6c8:	b1 f7       	brne	.-20     	; 0xf6b6 <fputs+0xc>
    f6ca:	02 c0       	rjmp	.+4      	; 0xf6d0 <fputs+0x26>
    f6cc:	80 e0       	ldi	r24, 0x00	; 0
    f6ce:	90 e0       	ldi	r25, 0x00	; 0
    f6d0:	df 91       	pop	r29
    f6d2:	cf 91       	pop	r28
    f6d4:	1f 91       	pop	r17
    f6d6:	0f 91       	pop	r16
    f6d8:	08 95       	ret

0000f6da <puts>:
    f6da:	cf 93       	push	r28
    f6dc:	df 93       	push	r29
    f6de:	ec 01       	movw	r28, r24
    f6e0:	89 91       	ld	r24, Y+
    f6e2:	60 91 ec 1c 	lds	r22, 0x1CEC	; 0x801cec <__iob+0x2>
    f6e6:	70 91 ed 1c 	lds	r23, 0x1CED	; 0x801ced <__iob+0x3>
    f6ea:	88 23       	and	r24, r24
    f6ec:	39 f0       	breq	.+14     	; 0xf6fc <puts+0x22>
    f6ee:	90 e0       	ldi	r25, 0x00	; 0
    f6f0:	42 df       	rcall	.-380    	; 0xf576 <fputc>
    f6f2:	8f 3f       	cpi	r24, 0xFF	; 255
    f6f4:	2f ef       	ldi	r18, 0xFF	; 255
    f6f6:	92 07       	cpc	r25, r18
    f6f8:	99 f7       	brne	.-26     	; 0xf6e0 <puts+0x6>
    f6fa:	03 c0       	rjmp	.+6      	; 0xf702 <puts+0x28>
    f6fc:	8a e0       	ldi	r24, 0x0A	; 10
    f6fe:	90 e0       	ldi	r25, 0x00	; 0
    f700:	3a df       	rcall	.-396    	; 0xf576 <fputc>
    f702:	df 91       	pop	r29
    f704:	cf 91       	pop	r28
    f706:	08 95       	ret

0000f708 <fileno>:
    f708:	00 97       	sbiw	r24, 0x00	; 0
    f70a:	39 f4       	brne	.+14     	; 0xf71a <fileno+0x12>
    f70c:	89 e0       	ldi	r24, 0x09	; 9
    f70e:	90 e0       	ldi	r25, 0x00	; 0
    f710:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f714:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f718:	0e c0       	rjmp	.+28     	; 0xf736 <fileno+0x2e>
    f71a:	ea ee       	ldi	r30, 0xEA	; 234
    f71c:	fc e1       	ldi	r31, 0x1C	; 28
    f71e:	20 e0       	ldi	r18, 0x00	; 0
    f720:	30 e0       	ldi	r19, 0x00	; 0
    f722:	41 91       	ld	r20, Z+
    f724:	51 91       	ld	r21, Z+
    f726:	84 17       	cp	r24, r20
    f728:	95 07       	cpc	r25, r21
    f72a:	41 f0       	breq	.+16     	; 0xf73c <fileno+0x34>
    f72c:	2f 5f       	subi	r18, 0xFF	; 255
    f72e:	3f 4f       	sbci	r19, 0xFF	; 255
    f730:	20 31       	cpi	r18, 0x10	; 16
    f732:	31 05       	cpc	r19, r1
    f734:	b1 f7       	brne	.-20     	; 0xf722 <fileno+0x1a>
    f736:	8f ef       	ldi	r24, 0xFF	; 255
    f738:	9f ef       	ldi	r25, 0xFF	; 255
    f73a:	08 95       	ret
    f73c:	c9 01       	movw	r24, r18
    f73e:	08 95       	ret

0000f740 <fileno_to_stream>:
    f740:	80 31       	cpi	r24, 0x10	; 16
    f742:	91 05       	cpc	r25, r1
    f744:	48 f4       	brcc	.+18     	; 0xf758 <fileno_to_stream+0x18>
    f746:	88 0f       	add	r24, r24
    f748:	99 1f       	adc	r25, r25
    f74a:	fc 01       	movw	r30, r24
    f74c:	e6 51       	subi	r30, 0x16	; 22
    f74e:	f3 4e       	sbci	r31, 0xE3	; 227
    f750:	80 81       	ld	r24, Z
    f752:	91 81       	ldd	r25, Z+1	; 0x01
    f754:	00 97       	sbiw	r24, 0x00	; 0
    f756:	41 f4       	brne	.+16     	; 0xf768 <fileno_to_stream+0x28>
    f758:	89 e0       	ldi	r24, 0x09	; 9
    f75a:	90 e0       	ldi	r25, 0x00	; 0
    f75c:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f760:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f764:	80 e0       	ldi	r24, 0x00	; 0
    f766:	90 e0       	ldi	r25, 0x00	; 0
    f768:	08 95       	ret

0000f76a <mctime>:
    f76a:	a4 e0       	ldi	r26, 0x04	; 4
    f76c:	b0 e0       	ldi	r27, 0x00	; 0
    f76e:	eb eb       	ldi	r30, 0xBB	; 187
    f770:	fb e7       	ldi	r31, 0x7B	; 123
    f772:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    f776:	69 83       	std	Y+1, r22	; 0x01
    f778:	7a 83       	std	Y+2, r23	; 0x02
    f77a:	8b 83       	std	Y+3, r24	; 0x03
    f77c:	9c 83       	std	Y+4, r25	; 0x04
    f77e:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    f782:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    f786:	ce 01       	movw	r24, r28
    f788:	01 96       	adiw	r24, 0x01	; 1
    f78a:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <ctime_gm>
    f78e:	fc 01       	movw	r30, r24
    f790:	01 90       	ld	r0, Z+
    f792:	00 20       	and	r0, r0
    f794:	e9 f7       	brne	.-6      	; 0xf790 <mctime+0x26>
    f796:	31 97       	sbiw	r30, 0x01	; 1
    f798:	e8 1b       	sub	r30, r24
    f79a:	f9 0b       	sbc	r31, r25
    f79c:	39 f0       	breq	.+14     	; 0xf7ac <mctime+0x42>
    f79e:	31 97       	sbiw	r30, 0x01	; 1
    f7a0:	e8 0f       	add	r30, r24
    f7a2:	f9 1f       	adc	r31, r25
    f7a4:	20 81       	ld	r18, Z
    f7a6:	2a 30       	cpi	r18, 0x0A	; 10
    f7a8:	09 f4       	brne	.+2      	; 0xf7ac <mctime+0x42>
    f7aa:	10 82       	st	Z, r1
    f7ac:	24 96       	adiw	r28, 0x04	; 4
    f7ae:	e2 e0       	ldi	r30, 0x02	; 2
    f7b0:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0000f7b4 <dump_stat>:
    f7b4:	cf 92       	push	r12
    f7b6:	df 92       	push	r13
    f7b8:	ef 92       	push	r14
    f7ba:	ff 92       	push	r15
    f7bc:	cf 93       	push	r28
    f7be:	df 93       	push	r29
    f7c0:	ec 01       	movw	r28, r24
    f7c2:	c8 84       	ldd	r12, Y+8	; 0x08
    f7c4:	d9 84       	ldd	r13, Y+9	; 0x09
    f7c6:	ea 84       	ldd	r14, Y+10	; 0x0a
    f7c8:	fb 84       	ldd	r15, Y+11	; 0x0b
    f7ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f7cc:	8f 93       	push	r24
    f7ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f7d0:	8f 93       	push	r24
    f7d2:	89 8d       	ldd	r24, Y+25	; 0x19
    f7d4:	8f 93       	push	r24
    f7d6:	88 8d       	ldd	r24, Y+24	; 0x18
    f7d8:	8f 93       	push	r24
    f7da:	8d e4       	ldi	r24, 0x4D	; 77
    f7dc:	9c e0       	ldi	r25, 0x0C	; 12
    f7de:	1f 92       	push	r1
    f7e0:	9f 93       	push	r25
    f7e2:	8f 93       	push	r24
    f7e4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f7e8:	84 e4       	ldi	r24, 0x44	; 68
    f7ea:	9c e0       	ldi	r25, 0x0C	; 12
    f7ec:	1f 92       	push	r1
    f7ee:	9f 93       	push	r25
    f7f0:	8f 93       	push	r24
    f7f2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f7f6:	d7 01       	movw	r26, r14
    f7f8:	c6 01       	movw	r24, r12
    f7fa:	88 27       	eor	r24, r24
    f7fc:	90 7f       	andi	r25, 0xF0	; 240
    f7fe:	aa 27       	eor	r26, r26
    f800:	bb 27       	eor	r27, r27
    f802:	2d b7       	in	r18, 0x3d	; 61
    f804:	3e b7       	in	r19, 0x3e	; 62
    f806:	26 5f       	subi	r18, 0xF6	; 246
    f808:	3f 4f       	sbci	r19, 0xFF	; 255
    f80a:	0f b6       	in	r0, 0x3f	; 63
    f80c:	f8 94       	cli
    f80e:	3e bf       	out	0x3e, r19	; 62
    f810:	0f be       	out	0x3f, r0	; 63
    f812:	2d bf       	out	0x3d, r18	; 61
    f814:	81 15       	cp	r24, r1
    f816:	30 e4       	ldi	r19, 0x40	; 64
    f818:	93 07       	cpc	r25, r19
    f81a:	a1 05       	cpc	r26, r1
    f81c:	b1 05       	cpc	r27, r1
    f81e:	19 f4       	brne	.+6      	; 0xf826 <dump_stat+0x72>
    f820:	8f e3       	ldi	r24, 0x3F	; 63
    f822:	9c e0       	ldi	r25, 0x0C	; 12
    f824:	0a c0       	rjmp	.+20     	; 0xf83a <dump_stat+0x86>
    f826:	81 15       	cp	r24, r1
    f828:	90 48       	sbci	r25, 0x80	; 128
    f82a:	a1 05       	cpc	r26, r1
    f82c:	b1 05       	cpc	r27, r1
    f82e:	19 f4       	brne	.+6      	; 0xf836 <dump_stat+0x82>
    f830:	89 e3       	ldi	r24, 0x39	; 57
    f832:	9c e0       	ldi	r25, 0x0C	; 12
    f834:	02 c0       	rjmp	.+4      	; 0xf83a <dump_stat+0x86>
    f836:	80 e3       	ldi	r24, 0x30	; 48
    f838:	9c e0       	ldi	r25, 0x0C	; 12
    f83a:	1f 92       	push	r1
    f83c:	9f 93       	push	r25
    f83e:	8f 93       	push	r24
    f840:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f844:	0f 90       	pop	r0
    f846:	0f 90       	pop	r0
    f848:	0f 90       	pop	r0
    f84a:	8b 85       	ldd	r24, Y+11	; 0x0b
    f84c:	8f 93       	push	r24
    f84e:	8a 85       	ldd	r24, Y+10	; 0x0a
    f850:	8f 93       	push	r24
    f852:	89 85       	ldd	r24, Y+9	; 0x09
    f854:	8f 93       	push	r24
    f856:	88 85       	ldd	r24, Y+8	; 0x08
    f858:	8f 93       	push	r24
    f85a:	83 e2       	ldi	r24, 0x23	; 35
    f85c:	9c e0       	ldi	r25, 0x0C	; 12
    f85e:	1f 92       	push	r1
    f860:	9f 93       	push	r25
    f862:	8f 93       	push	r24
    f864:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f868:	88 89       	ldd	r24, Y+16	; 0x10
    f86a:	99 89       	ldd	r25, Y+17	; 0x11
    f86c:	1f 92       	push	r1
    f86e:	1f 92       	push	r1
    f870:	9f 93       	push	r25
    f872:	8f 93       	push	r24
    f874:	86 e1       	ldi	r24, 0x16	; 22
    f876:	9c e0       	ldi	r25, 0x0C	; 12
    f878:	1f 92       	push	r1
    f87a:	9f 93       	push	r25
    f87c:	8f 93       	push	r24
    f87e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f882:	8a 89       	ldd	r24, Y+18	; 0x12
    f884:	9b 89       	ldd	r25, Y+19	; 0x13
    f886:	1f 92       	push	r1
    f888:	1f 92       	push	r1
    f88a:	9f 93       	push	r25
    f88c:	8f 93       	push	r24
    f88e:	89 e0       	ldi	r24, 0x09	; 9
    f890:	9c e0       	ldi	r25, 0x0C	; 12
    f892:	1f 92       	push	r1
    f894:	9f 93       	push	r25
    f896:	8f 93       	push	r24
    f898:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f89c:	6c a1       	ldd	r22, Y+36	; 0x24
    f89e:	7d a1       	ldd	r23, Y+37	; 0x25
    f8a0:	8e a1       	ldd	r24, Y+38	; 0x26
    f8a2:	9f a1       	ldd	r25, Y+39	; 0x27
    f8a4:	62 df       	rcall	.-316    	; 0xf76a <mctime>
    f8a6:	9f 93       	push	r25
    f8a8:	8f 93       	push	r24
    f8aa:	8d ef       	ldi	r24, 0xFD	; 253
    f8ac:	9b e0       	ldi	r25, 0x0B	; 11
    f8ae:	1f 92       	push	r1
    f8b0:	9f 93       	push	r25
    f8b2:	8f 93       	push	r24
    f8b4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f8b8:	68 a5       	ldd	r22, Y+40	; 0x28
    f8ba:	79 a5       	ldd	r23, Y+41	; 0x29
    f8bc:	8a a5       	ldd	r24, Y+42	; 0x2a
    f8be:	9b a5       	ldd	r25, Y+43	; 0x2b
    f8c0:	54 df       	rcall	.-344    	; 0xf76a <mctime>
    f8c2:	9f 93       	push	r25
    f8c4:	8f 93       	push	r24
    f8c6:	81 ef       	ldi	r24, 0xF1	; 241
    f8c8:	9b e0       	ldi	r25, 0x0B	; 11
    f8ca:	1f 92       	push	r1
    f8cc:	9f 93       	push	r25
    f8ce:	8f 93       	push	r24
    f8d0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f8d4:	6c a5       	ldd	r22, Y+44	; 0x2c
    f8d6:	7d a5       	ldd	r23, Y+45	; 0x2d
    f8d8:	8e a5       	ldd	r24, Y+46	; 0x2e
    f8da:	9f a5       	ldd	r25, Y+47	; 0x2f
    f8dc:	46 df       	rcall	.-372    	; 0xf76a <mctime>
    f8de:	9f 93       	push	r25
    f8e0:	8f 93       	push	r24
    f8e2:	85 ee       	ldi	r24, 0xE5	; 229
    f8e4:	9b e0       	ldi	r25, 0x0B	; 11
    f8e6:	1f 92       	push	r1
    f8e8:	9f 93       	push	r25
    f8ea:	8f 93       	push	r24
    f8ec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    f8f0:	8d b7       	in	r24, 0x3d	; 61
    f8f2:	9e b7       	in	r25, 0x3e	; 62
    f8f4:	84 96       	adiw	r24, 0x24	; 36
    f8f6:	0f b6       	in	r0, 0x3f	; 63
    f8f8:	f8 94       	cli
    f8fa:	9e bf       	out	0x3e, r25	; 62
    f8fc:	0f be       	out	0x3f, r0	; 63
    f8fe:	8d bf       	out	0x3d, r24	; 61
    f900:	df 91       	pop	r29
    f902:	cf 91       	pop	r28
    f904:	ff 90       	pop	r15
    f906:	ef 90       	pop	r14
    f908:	df 90       	pop	r13
    f90a:	cf 90       	pop	r12
    f90c:	08 95       	ret

0000f90e <basename>:
    f90e:	00 97       	sbiw	r24, 0x00	; 0
    f910:	49 f0       	breq	.+18     	; 0xf924 <basename+0x16>
    f912:	fc 01       	movw	r30, r24
    f914:	21 91       	ld	r18, Z+
    f916:	22 23       	and	r18, r18
    f918:	21 f0       	breq	.+8      	; 0xf922 <basename+0x14>
    f91a:	2f 32       	cpi	r18, 0x2F	; 47
    f91c:	d9 f7       	brne	.-10     	; 0xf914 <basename+0x6>
    f91e:	cf 01       	movw	r24, r30
    f920:	f9 cf       	rjmp	.-14     	; 0xf914 <basename+0x6>
    f922:	08 95       	ret
    f924:	88 e5       	ldi	r24, 0x58	; 88
    f926:	97 e1       	ldi	r25, 0x17	; 23
    f928:	08 95       	ret

0000f92a <chdir>:
    f92a:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    f92e:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    f932:	0e 94 60 5e 	call	0xbcc0	; 0xbcc0 <f_chdir>
    f936:	00 97       	sbiw	r24, 0x00	; 0
    f938:	a1 f0       	breq	.+40     	; 0xf962 <chdir+0x38>
    f93a:	84 31       	cpi	r24, 0x14	; 20
    f93c:	91 05       	cpc	r25, r1
    f93e:	40 f4       	brcc	.+16     	; 0xf950 <chdir+0x26>
    f940:	fc 01       	movw	r30, r24
    f942:	ec 5f       	subi	r30, 0xFC	; 252
    f944:	f8 4f       	sbci	r31, 0xF8	; 248
    f946:	80 81       	ld	r24, Z
    f948:	08 2e       	mov	r0, r24
    f94a:	00 0c       	add	r0, r0
    f94c:	99 0b       	sbc	r25, r25
    f94e:	02 c0       	rjmp	.+4      	; 0xf954 <chdir+0x2a>
    f950:	83 e2       	ldi	r24, 0x23	; 35
    f952:	90 e0       	ldi	r25, 0x00	; 0
    f954:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f958:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f95c:	8f ef       	ldi	r24, 0xFF	; 255
    f95e:	9f ef       	ldi	r25, 0xFF	; 255
    f960:	08 95       	ret
    f962:	80 e0       	ldi	r24, 0x00	; 0
    f964:	90 e0       	ldi	r25, 0x00	; 0
    f966:	08 95       	ret

0000f968 <chmod>:
    f968:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    f96c:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    f970:	42 79       	andi	r20, 0x92	; 146
    f972:	55 27       	eor	r21, r21
    f974:	66 27       	eor	r22, r22
    f976:	77 27       	eor	r23, r23
    f978:	45 2b       	or	r20, r21
    f97a:	46 2b       	or	r20, r22
    f97c:	47 2b       	or	r20, r23
    f97e:	19 f0       	breq	.+6      	; 0xf986 <chmod+0x1e>
    f980:	80 e0       	ldi	r24, 0x00	; 0
    f982:	90 e0       	ldi	r25, 0x00	; 0
    f984:	08 95       	ret
    f986:	41 e0       	ldi	r20, 0x01	; 1
    f988:	61 e0       	ldi	r22, 0x01	; 1
    f98a:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <f_chmod>
    f98e:	00 97       	sbiw	r24, 0x00	; 0
    f990:	b9 f3       	breq	.-18     	; 0xf980 <chmod+0x18>
    f992:	84 31       	cpi	r24, 0x14	; 20
    f994:	91 05       	cpc	r25, r1
    f996:	40 f4       	brcc	.+16     	; 0xf9a8 <chmod+0x40>
    f998:	fc 01       	movw	r30, r24
    f99a:	ec 5f       	subi	r30, 0xFC	; 252
    f99c:	f8 4f       	sbci	r31, 0xF8	; 248
    f99e:	80 81       	ld	r24, Z
    f9a0:	08 2e       	mov	r0, r24
    f9a2:	00 0c       	add	r0, r0
    f9a4:	99 0b       	sbc	r25, r25
    f9a6:	02 c0       	rjmp	.+4      	; 0xf9ac <chmod+0x44>
    f9a8:	83 e2       	ldi	r24, 0x23	; 35
    f9aa:	90 e0       	ldi	r25, 0x00	; 0
    f9ac:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f9b0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f9b4:	8f ef       	ldi	r24, 0xFF	; 255
    f9b6:	9f ef       	ldi	r25, 0xFF	; 255
    f9b8:	08 95       	ret

0000f9ba <getcwd>:
    f9ba:	cf 93       	push	r28
    f9bc:	df 93       	push	r29
    f9be:	d8 2f       	mov	r29, r24
    f9c0:	c9 2f       	mov	r28, r25
    f9c2:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    f9c6:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    f9ca:	0e 94 bb 5e 	call	0xbd76	; 0xbd76 <f_getcwd>
    f9ce:	00 97       	sbiw	r24, 0x00	; 0
    f9d0:	a1 f0       	breq	.+40     	; 0xf9fa <getcwd+0x40>
    f9d2:	84 31       	cpi	r24, 0x14	; 20
    f9d4:	91 05       	cpc	r25, r1
    f9d6:	40 f4       	brcc	.+16     	; 0xf9e8 <getcwd+0x2e>
    f9d8:	fc 01       	movw	r30, r24
    f9da:	ec 5f       	subi	r30, 0xFC	; 252
    f9dc:	f8 4f       	sbci	r31, 0xF8	; 248
    f9de:	80 81       	ld	r24, Z
    f9e0:	08 2e       	mov	r0, r24
    f9e2:	00 0c       	add	r0, r0
    f9e4:	99 0b       	sbc	r25, r25
    f9e6:	02 c0       	rjmp	.+4      	; 0xf9ec <getcwd+0x32>
    f9e8:	83 e2       	ldi	r24, 0x23	; 35
    f9ea:	90 e0       	ldi	r25, 0x00	; 0
    f9ec:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    f9f0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    f9f4:	80 e0       	ldi	r24, 0x00	; 0
    f9f6:	90 e0       	ldi	r25, 0x00	; 0
    f9f8:	02 c0       	rjmp	.+4      	; 0xf9fe <getcwd+0x44>
    f9fa:	8d 2f       	mov	r24, r29
    f9fc:	9c 2f       	mov	r25, r28
    f9fe:	df 91       	pop	r29
    fa00:	cf 91       	pop	r28
    fa02:	08 95       	ret

0000fa04 <mkdir>:
    fa04:	cf 93       	push	r28
    fa06:	df 93       	push	r29
    fa08:	ec 01       	movw	r28, r24
    fa0a:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    fa0e:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    fa12:	41 15       	cp	r20, r1
    fa14:	51 05       	cpc	r21, r1
    fa16:	61 05       	cpc	r22, r1
    fa18:	71 05       	cpc	r23, r1
    fa1a:	41 f4       	brne	.+16     	; 0xfa2c <mkdir+0x28>
    fa1c:	ce 01       	movw	r24, r28
    fa1e:	0e 94 70 65 	call	0xcae0	; 0xcae0 <f_mkdir>
    fa22:	00 97       	sbiw	r24, 0x00	; 0
    fa24:	39 f4       	brne	.+14     	; 0xfa34 <mkdir+0x30>
    fa26:	80 e0       	ldi	r24, 0x00	; 0
    fa28:	90 e0       	ldi	r25, 0x00	; 0
    fa2a:	17 c0       	rjmp	.+46     	; 0xfa5a <mkdir+0x56>
    fa2c:	9d df       	rcall	.-198    	; 0xf968 <chmod>
    fa2e:	89 2b       	or	r24, r25
    fa30:	a9 f3       	breq	.-22     	; 0xfa1c <mkdir+0x18>
    fa32:	11 c0       	rjmp	.+34     	; 0xfa56 <mkdir+0x52>
    fa34:	84 31       	cpi	r24, 0x14	; 20
    fa36:	91 05       	cpc	r25, r1
    fa38:	40 f4       	brcc	.+16     	; 0xfa4a <mkdir+0x46>
    fa3a:	fc 01       	movw	r30, r24
    fa3c:	ec 5f       	subi	r30, 0xFC	; 252
    fa3e:	f8 4f       	sbci	r31, 0xF8	; 248
    fa40:	80 81       	ld	r24, Z
    fa42:	08 2e       	mov	r0, r24
    fa44:	00 0c       	add	r0, r0
    fa46:	99 0b       	sbc	r25, r25
    fa48:	02 c0       	rjmp	.+4      	; 0xfa4e <mkdir+0x4a>
    fa4a:	83 e2       	ldi	r24, 0x23	; 35
    fa4c:	90 e0       	ldi	r25, 0x00	; 0
    fa4e:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    fa52:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    fa56:	8f ef       	ldi	r24, 0xFF	; 255
    fa58:	9f ef       	ldi	r25, 0xFF	; 255
    fa5a:	df 91       	pop	r29
    fa5c:	cf 91       	pop	r28
    fa5e:	08 95       	ret

0000fa60 <rename>:
    fa60:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    fa64:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    fa68:	0e 94 b7 66 	call	0xcd6e	; 0xcd6e <f_rename>
    fa6c:	00 97       	sbiw	r24, 0x00	; 0
    fa6e:	a1 f0       	breq	.+40     	; 0xfa98 <rename+0x38>
    fa70:	84 31       	cpi	r24, 0x14	; 20
    fa72:	91 05       	cpc	r25, r1
    fa74:	40 f4       	brcc	.+16     	; 0xfa86 <rename+0x26>
    fa76:	fc 01       	movw	r30, r24
    fa78:	ec 5f       	subi	r30, 0xFC	; 252
    fa7a:	f8 4f       	sbci	r31, 0xF8	; 248
    fa7c:	80 81       	ld	r24, Z
    fa7e:	08 2e       	mov	r0, r24
    fa80:	00 0c       	add	r0, r0
    fa82:	99 0b       	sbc	r25, r25
    fa84:	02 c0       	rjmp	.+4      	; 0xfa8a <rename+0x2a>
    fa86:	83 e2       	ldi	r24, 0x23	; 35
    fa88:	90 e0       	ldi	r25, 0x00	; 0
    fa8a:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    fa8e:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    fa92:	8f ef       	ldi	r24, 0xFF	; 255
    fa94:	9f ef       	ldi	r25, 0xFF	; 255
    fa96:	08 95       	ret
    fa98:	80 e0       	ldi	r24, 0x00	; 0
    fa9a:	90 e0       	ldi	r25, 0x00	; 0
    fa9c:	08 95       	ret

0000fa9e <unlink>:
    fa9e:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    faa2:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    faa6:	0e 94 c7 64 	call	0xc98e	; 0xc98e <f_unlink>
    faaa:	00 97       	sbiw	r24, 0x00	; 0
    faac:	a1 f0       	breq	.+40     	; 0xfad6 <unlink+0x38>
    faae:	84 31       	cpi	r24, 0x14	; 20
    fab0:	91 05       	cpc	r25, r1
    fab2:	40 f4       	brcc	.+16     	; 0xfac4 <unlink+0x26>
    fab4:	fc 01       	movw	r30, r24
    fab6:	ec 5f       	subi	r30, 0xFC	; 252
    fab8:	f8 4f       	sbci	r31, 0xF8	; 248
    faba:	80 81       	ld	r24, Z
    fabc:	08 2e       	mov	r0, r24
    fabe:	00 0c       	add	r0, r0
    fac0:	99 0b       	sbc	r25, r25
    fac2:	02 c0       	rjmp	.+4      	; 0xfac8 <unlink+0x2a>
    fac4:	83 e2       	ldi	r24, 0x23	; 35
    fac6:	90 e0       	ldi	r25, 0x00	; 0
    fac8:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    facc:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    fad0:	8f ef       	ldi	r24, 0xFF	; 255
    fad2:	9f ef       	ldi	r25, 0xFF	; 255
    fad4:	08 95       	ret
    fad6:	80 e0       	ldi	r24, 0x00	; 0
    fad8:	90 e0       	ldi	r25, 0x00	; 0
    fada:	08 95       	ret

0000fadc <rmdir>:
    fadc:	e0 cf       	rjmp	.-64     	; 0xfa9e <unlink>
    fade:	08 95       	ret

0000fae0 <closedir>:
    fae0:	0e 94 3f 63 	call	0xc67e	; 0xc67e <f_closedir>
    fae4:	00 97       	sbiw	r24, 0x00	; 0
    fae6:	a1 f0       	breq	.+40     	; 0xfb10 <closedir+0x30>
    fae8:	84 31       	cpi	r24, 0x14	; 20
    faea:	91 05       	cpc	r25, r1
    faec:	40 f4       	brcc	.+16     	; 0xfafe <closedir+0x1e>
    faee:	fc 01       	movw	r30, r24
    faf0:	ec 5f       	subi	r30, 0xFC	; 252
    faf2:	f8 4f       	sbci	r31, 0xF8	; 248
    faf4:	80 81       	ld	r24, Z
    faf6:	08 2e       	mov	r0, r24
    faf8:	00 0c       	add	r0, r0
    fafa:	99 0b       	sbc	r25, r25
    fafc:	02 c0       	rjmp	.+4      	; 0xfb02 <closedir+0x22>
    fafe:	83 e2       	ldi	r24, 0x23	; 35
    fb00:	90 e0       	ldi	r25, 0x00	; 0
    fb02:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    fb06:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    fb0a:	8f ef       	ldi	r24, 0xFF	; 255
    fb0c:	9f ef       	ldi	r25, 0xFF	; 255
    fb0e:	08 95       	ret
    fb10:	80 e0       	ldi	r24, 0x00	; 0
    fb12:	90 e0       	ldi	r25, 0x00	; 0
    fb14:	08 95       	ret

0000fb16 <opendir>:
    fb16:	bc 01       	movw	r22, r24
    fb18:	80 e6       	ldi	r24, 0x60	; 96
    fb1a:	99 e1       	ldi	r25, 0x19	; 25
    fb1c:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_opendir>
    fb20:	00 97       	sbiw	r24, 0x00	; 0
    fb22:	a1 f0       	breq	.+40     	; 0xfb4c <opendir+0x36>
    fb24:	84 31       	cpi	r24, 0x14	; 20
    fb26:	91 05       	cpc	r25, r1
    fb28:	40 f4       	brcc	.+16     	; 0xfb3a <opendir+0x24>
    fb2a:	fc 01       	movw	r30, r24
    fb2c:	ec 5f       	subi	r30, 0xFC	; 252
    fb2e:	f8 4f       	sbci	r31, 0xF8	; 248
    fb30:	80 81       	ld	r24, Z
    fb32:	08 2e       	mov	r0, r24
    fb34:	00 0c       	add	r0, r0
    fb36:	99 0b       	sbc	r25, r25
    fb38:	02 c0       	rjmp	.+4      	; 0xfb3e <opendir+0x28>
    fb3a:	83 e2       	ldi	r24, 0x23	; 35
    fb3c:	90 e0       	ldi	r25, 0x00	; 0
    fb3e:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    fb42:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    fb46:	80 e0       	ldi	r24, 0x00	; 0
    fb48:	90 e0       	ldi	r25, 0x00	; 0
    fb4a:	08 95       	ret
    fb4c:	80 e6       	ldi	r24, 0x60	; 96
    fb4e:	99 e1       	ldi	r25, 0x19	; 25
    fb50:	08 95       	ret

0000fb52 <readdir>:
    fb52:	a6 e1       	ldi	r26, 0x16	; 22
    fb54:	b1 e0       	ldi	r27, 0x01	; 1
    fb56:	ef ea       	ldi	r30, 0xAF	; 175
    fb58:	fd e7       	ldi	r31, 0x7D	; 125
    fb5a:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    fb5e:	10 92 61 18 	sts	0x1861, r1	; 0x801861 <_de>
    fb62:	be 01       	movw	r22, r28
    fb64:	6f 5f       	subi	r22, 0xFF	; 255
    fb66:	7f 4f       	sbci	r23, 0xFF	; 255
    fb68:	0e 94 54 63 	call	0xc6a8	; 0xc6a8 <f_readdir>
    fb6c:	00 97       	sbiw	r24, 0x00	; 0
    fb6e:	a1 f0       	breq	.+40     	; 0xfb98 <readdir+0x46>
    fb70:	84 31       	cpi	r24, 0x14	; 20
    fb72:	91 05       	cpc	r25, r1
    fb74:	40 f4       	brcc	.+16     	; 0xfb86 <readdir+0x34>
    fb76:	fc 01       	movw	r30, r24
    fb78:	ec 5f       	subi	r30, 0xFC	; 252
    fb7a:	f8 4f       	sbci	r31, 0xF8	; 248
    fb7c:	80 81       	ld	r24, Z
    fb7e:	08 2e       	mov	r0, r24
    fb80:	00 0c       	add	r0, r0
    fb82:	99 0b       	sbc	r25, r25
    fb84:	02 c0       	rjmp	.+4      	; 0xfb8a <readdir+0x38>
    fb86:	83 e2       	ldi	r24, 0x23	; 35
    fb88:	90 e0       	ldi	r25, 0x00	; 0
    fb8a:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    fb8e:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    fb92:	80 e0       	ldi	r24, 0x00	; 0
    fb94:	90 e0       	ldi	r25, 0x00	; 0
    fb96:	16 c0       	rjmp	.+44     	; 0xfbc4 <readdir+0x72>
    fb98:	be 01       	movw	r22, r28
    fb9a:	69 5e       	subi	r22, 0xE9	; 233
    fb9c:	7f 4f       	sbci	r23, 0xFF	; 255
    fb9e:	fb 01       	movw	r30, r22
    fba0:	01 90       	ld	r0, Z+
    fba2:	00 20       	and	r0, r0
    fba4:	e9 f7       	brne	.-6      	; 0xfba0 <readdir+0x4e>
    fba6:	31 97       	sbiw	r30, 0x01	; 1
    fba8:	8f 01       	movw	r16, r30
    fbaa:	06 1b       	sub	r16, r22
    fbac:	17 0b       	sbc	r17, r23
    fbae:	a8 01       	movw	r20, r16
    fbb0:	81 e6       	ldi	r24, 0x61	; 97
    fbb2:	98 e1       	ldi	r25, 0x18	; 24
    fbb4:	0e 94 59 32 	call	0x64b2	; 0x64b2 <strncpy>
    fbb8:	f8 01       	movw	r30, r16
    fbba:	ef 59       	subi	r30, 0x9F	; 159
    fbbc:	f7 4e       	sbci	r31, 0xE7	; 231
    fbbe:	10 82       	st	Z, r1
    fbc0:	81 e6       	ldi	r24, 0x61	; 97
    fbc2:	98 e1       	ldi	r25, 0x18	; 24
    fbc4:	ca 5e       	subi	r28, 0xEA	; 234
    fbc6:	de 4f       	sbci	r29, 0xFE	; 254
    fbc8:	e4 e0       	ldi	r30, 0x04	; 4
    fbca:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

0000fbce <perror>:
    fbce:	e0 91 e8 1c 	lds	r30, 0x1CE8	; 0x801ce8 <errno>
    fbd2:	f0 91 e9 1c 	lds	r31, 0x1CE9	; 0x801ce9 <errno+0x1>
    fbd6:	e3 32       	cpi	r30, 0x23	; 35
    fbd8:	f1 05       	cpc	r31, r1
    fbda:	38 f4       	brcc	.+14     	; 0xfbea <perror+0x1c>
    fbdc:	ee 0f       	add	r30, r30
    fbde:	ff 1f       	adc	r31, r31
    fbe0:	e3 5c       	subi	r30, 0xC3	; 195
    fbe2:	fe 4f       	sbci	r31, 0xFE	; 254
    fbe4:	20 81       	ld	r18, Z
    fbe6:	31 81       	ldd	r19, Z+1	; 0x01
    fbe8:	04 c0       	rjmp	.+8      	; 0xfbf2 <perror+0x24>
    fbea:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    fbee:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    fbf2:	00 97       	sbiw	r24, 0x00	; 0
    fbf4:	c1 f0       	breq	.+48     	; 0xfc26 <perror+0x58>
    fbf6:	fc 01       	movw	r30, r24
    fbf8:	40 81       	ld	r20, Z
    fbfa:	44 23       	and	r20, r20
    fbfc:	a1 f0       	breq	.+40     	; 0xfc26 <perror+0x58>
    fbfe:	3f 93       	push	r19
    fc00:	2f 93       	push	r18
    fc02:	9f 93       	push	r25
    fc04:	8f 93       	push	r24
    fc06:	8d ed       	ldi	r24, 0xDD	; 221
    fc08:	9b e0       	ldi	r25, 0x0B	; 11
    fc0a:	1f 92       	push	r1
    fc0c:	9f 93       	push	r25
    fc0e:	8f 93       	push	r24
    fc10:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    fc14:	8d b7       	in	r24, 0x3d	; 61
    fc16:	9e b7       	in	r25, 0x3e	; 62
    fc18:	07 96       	adiw	r24, 0x07	; 7
    fc1a:	0f b6       	in	r0, 0x3f	; 63
    fc1c:	f8 94       	cli
    fc1e:	9e bf       	out	0x3e, r25	; 62
    fc20:	0f be       	out	0x3f, r0	; 63
    fc22:	8d bf       	out	0x3d, r24	; 61
    fc24:	08 95       	ret
    fc26:	3f 93       	push	r19
    fc28:	2f 93       	push	r18
    fc2a:	89 ed       	ldi	r24, 0xD9	; 217
    fc2c:	9b e0       	ldi	r25, 0x0B	; 11
    fc2e:	1f 92       	push	r1
    fc30:	9f 93       	push	r25
    fc32:	8f 93       	push	r24
    fc34:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    fc38:	0f 90       	pop	r0
    fc3a:	0f 90       	pop	r0
    fc3c:	0f 90       	pop	r0
    fc3e:	0f 90       	pop	r0
    fc40:	0f 90       	pop	r0
    fc42:	08 95       	ret

0000fc44 <fdevopen>:
    fc44:	0f 93       	push	r16
    fc46:	1f 93       	push	r17
    fc48:	cf 93       	push	r28
    fc4a:	df 93       	push	r29
    fc4c:	00 97       	sbiw	r24, 0x00	; 0
    fc4e:	31 f4       	brne	.+12     	; 0xfc5c <fdevopen+0x18>
    fc50:	61 15       	cp	r22, r1
    fc52:	71 05       	cpc	r23, r1
    fc54:	19 f4       	brne	.+6      	; 0xfc5c <fdevopen+0x18>
    fc56:	80 e0       	ldi	r24, 0x00	; 0
    fc58:	90 e0       	ldi	r25, 0x00	; 0
    fc5a:	3a c0       	rjmp	.+116    	; 0xfcd0 <fdevopen+0x8c>
    fc5c:	8b 01       	movw	r16, r22
    fc5e:	ec 01       	movw	r28, r24
    fc60:	6e e0       	ldi	r22, 0x0E	; 14
    fc62:	70 e0       	ldi	r23, 0x00	; 0
    fc64:	81 e0       	ldi	r24, 0x01	; 1
    fc66:	90 e0       	ldi	r25, 0x00	; 0
    fc68:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
    fc6c:	fc 01       	movw	r30, r24
    fc6e:	89 2b       	or	r24, r25
    fc70:	91 f3       	breq	.-28     	; 0xfc56 <fdevopen+0x12>
    fc72:	80 e8       	ldi	r24, 0x80	; 128
    fc74:	83 83       	std	Z+3, r24	; 0x03
    fc76:	01 15       	cp	r16, r1
    fc78:	11 05       	cpc	r17, r1
    fc7a:	71 f0       	breq	.+28     	; 0xfc98 <fdevopen+0x54>
    fc7c:	13 87       	std	Z+11, r17	; 0x0b
    fc7e:	02 87       	std	Z+10, r16	; 0x0a
    fc80:	81 e8       	ldi	r24, 0x81	; 129
    fc82:	83 83       	std	Z+3, r24	; 0x03
    fc84:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <__iob>
    fc88:	90 91 eb 1c 	lds	r25, 0x1CEB	; 0x801ceb <__iob+0x1>
    fc8c:	89 2b       	or	r24, r25
    fc8e:	21 f4       	brne	.+8      	; 0xfc98 <fdevopen+0x54>
    fc90:	f0 93 eb 1c 	sts	0x1CEB, r31	; 0x801ceb <__iob+0x1>
    fc94:	e0 93 ea 1c 	sts	0x1CEA, r30	; 0x801cea <__iob>
    fc98:	20 97       	sbiw	r28, 0x00	; 0
    fc9a:	c9 f0       	breq	.+50     	; 0xfcce <fdevopen+0x8a>
    fc9c:	d1 87       	std	Z+9, r29	; 0x09
    fc9e:	c0 87       	std	Z+8, r28	; 0x08
    fca0:	83 81       	ldd	r24, Z+3	; 0x03
    fca2:	82 60       	ori	r24, 0x02	; 2
    fca4:	83 83       	std	Z+3, r24	; 0x03
    fca6:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <__iob+0x2>
    fcaa:	90 91 ed 1c 	lds	r25, 0x1CED	; 0x801ced <__iob+0x3>
    fcae:	89 2b       	or	r24, r25
    fcb0:	21 f4       	brne	.+8      	; 0xfcba <fdevopen+0x76>
    fcb2:	f0 93 ed 1c 	sts	0x1CED, r31	; 0x801ced <__iob+0x3>
    fcb6:	e0 93 ec 1c 	sts	0x1CEC, r30	; 0x801cec <__iob+0x2>
    fcba:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <__iob+0x4>
    fcbe:	90 91 ef 1c 	lds	r25, 0x1CEF	; 0x801cef <__iob+0x5>
    fcc2:	89 2b       	or	r24, r25
    fcc4:	21 f4       	brne	.+8      	; 0xfcce <fdevopen+0x8a>
    fcc6:	f0 93 ef 1c 	sts	0x1CEF, r31	; 0x801cef <__iob+0x5>
    fcca:	e0 93 ee 1c 	sts	0x1CEE, r30	; 0x801cee <__iob+0x4>
    fcce:	cf 01       	movw	r24, r30
    fcd0:	df 91       	pop	r29
    fcd2:	cf 91       	pop	r28
    fcd4:	1f 91       	pop	r17
    fcd6:	0f 91       	pop	r16
    fcd8:	08 95       	ret

0000fcda <mkfs>:
    fcda:	a9 e3       	ldi	r26, 0x39	; 57
    fcdc:	b2 e0       	ldi	r27, 0x02	; 2
    fcde:	e3 e7       	ldi	r30, 0x73	; 115
    fce0:	fe e7       	ldi	r31, 0x7E	; 126
    fce2:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
    fce6:	6c 01       	movw	r12, r24
    fce8:	68 e6       	ldi	r22, 0x68	; 104
    fcea:	78 e0       	ldi	r23, 0x08	; 8
    fcec:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
    fcf0:	00 97       	sbiw	r24, 0x00	; 0
    fcf2:	59 f4       	brne	.+22     	; 0xfd0a <mkfs+0x30>
    fcf4:	8a eb       	ldi	r24, 0xBA	; 186
    fcf6:	9b e0       	ldi	r25, 0x0B	; 11
    fcf8:	1f 92       	push	r1
    fcfa:	9f 93       	push	r25
    fcfc:	8f 93       	push	r24
    fcfe:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    fd02:	0f 90       	pop	r0
    fd04:	0f 90       	pop	r0
    fd06:	0f 90       	pop	r0
    fd08:	55 c0       	rjmp	.+170    	; 0xfdb4 <mkfs+0xda>
    fd0a:	2a e3       	ldi	r18, 0x3A	; 58
    fd0c:	c9 5c       	subi	r28, 0xC9	; 201
    fd0e:	dd 4f       	sbci	r29, 0xFD	; 253
    fd10:	28 83       	st	Y, r18
    fd12:	c7 53       	subi	r28, 0x37	; 55
    fd14:	d2 40       	sbci	r29, 0x02	; 2
    fd16:	c8 5c       	subi	r28, 0xC8	; 200
    fd18:	dd 4f       	sbci	r29, 0xFD	; 253
    fd1a:	18 82       	st	Y, r1
    fd1c:	c8 53       	subi	r28, 0x38	; 56
    fd1e:	d2 40       	sbci	r29, 0x02	; 2
    fd20:	8c 0d       	add	r24, r12
    fd22:	9d 1d       	adc	r25, r13
    fd24:	fc 01       	movw	r30, r24
    fd26:	31 97       	sbiw	r30, 0x01	; 1
    fd28:	80 81       	ld	r24, Z
    fd2a:	90 e0       	ldi	r25, 0x00	; 0
    fd2c:	0e 94 34 32 	call	0x6468	; 0x6468 <tolower>
    fd30:	9c 01       	movw	r18, r24
    fd32:	21 56       	subi	r18, 0x61	; 97
    fd34:	31 09       	sbc	r19, r1
    fd36:	2a 30       	cpi	r18, 0x0A	; 10
    fd38:	31 05       	cpc	r19, r1
    fd3a:	30 f4       	brcc	.+12     	; 0xfd48 <mkfs+0x6e>
    fd3c:	81 56       	subi	r24, 0x61	; 97
    fd3e:	ca 5c       	subi	r28, 0xCA	; 202
    fd40:	dd 4f       	sbci	r29, 0xFD	; 253
    fd42:	88 83       	st	Y, r24
    fd44:	c6 53       	subi	r28, 0x36	; 54
    fd46:	d2 40       	sbci	r29, 0x02	; 2
    fd48:	c7 5c       	subi	r28, 0xC7	; 199
    fd4a:	dd 4f       	sbci	r29, 0xFD	; 253
    fd4c:	18 82       	st	Y, r1
    fd4e:	c9 53       	subi	r28, 0x39	; 57
    fd50:	d2 40       	sbci	r29, 0x02	; 2
    fd52:	40 e0       	ldi	r20, 0x00	; 0
    fd54:	be 01       	movw	r22, r28
    fd56:	6a 5c       	subi	r22, 0xCA	; 202
    fd58:	7d 4f       	sbci	r23, 0xFD	; 253
    fd5a:	ce 01       	movw	r24, r28
    fd5c:	01 96       	adiw	r24, 0x01	; 1
    fd5e:	0e 94 ab 58 	call	0xb156	; 0xb156 <f_mount>
    fd62:	89 2b       	or	r24, r25
    fd64:	29 f4       	brne	.+10     	; 0xfd70 <mkfs+0x96>
    fd66:	80 e0       	ldi	r24, 0x00	; 0
    fd68:	90 e0       	ldi	r25, 0x00	; 0
    fd6a:	0e 94 75 75 	call	0xeaea	; 0xeaea <put_rc>
    fd6e:	22 c0       	rjmp	.+68     	; 0xfdb4 <mkfs+0xda>
    fd70:	80 e0       	ldi	r24, 0x00	; 0
    fd72:	94 e0       	ldi	r25, 0x04	; 4
    fd74:	0e 94 4e 2a 	call	0x549c	; 0x549c <safemalloc>
    fd78:	6c 01       	movw	r12, r24
    fd7a:	89 2b       	or	r24, r25
    fd7c:	d9 f0       	breq	.+54     	; 0xfdb4 <mkfs+0xda>
    fd7e:	e1 2c       	mov	r14, r1
    fd80:	84 e0       	ldi	r24, 0x04	; 4
    fd82:	f8 2e       	mov	r15, r24
    fd84:	86 01       	movw	r16, r12
    fd86:	20 e0       	ldi	r18, 0x00	; 0
    fd88:	30 e0       	ldi	r19, 0x00	; 0
    fd8a:	a9 01       	movw	r20, r18
    fd8c:	62 e0       	ldi	r22, 0x02	; 2
    fd8e:	ce 01       	movw	r24, r28
    fd90:	8a 5c       	subi	r24, 0xCA	; 202
    fd92:	9d 4f       	sbci	r25, 0xFD	; 253
    fd94:	0e 94 e6 68 	call	0xd1cc	; 0xd1cc <f_mkfs>
    fd98:	00 97       	sbiw	r24, 0x00	; 0
    fd9a:	31 f0       	breq	.+12     	; 0xfda8 <mkfs+0xce>
    fd9c:	0e 94 75 75 	call	0xeaea	; 0xeaea <put_rc>
    fda0:	c6 01       	movw	r24, r12
    fda2:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
    fda6:	06 c0       	rjmp	.+12     	; 0xfdb4 <mkfs+0xda>
    fda8:	c6 01       	movw	r24, r12
    fdaa:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
    fdae:	81 e0       	ldi	r24, 0x01	; 1
    fdb0:	90 e0       	ldi	r25, 0x00	; 0
    fdb2:	02 c0       	rjmp	.+4      	; 0xfdb8 <mkfs+0xde>
    fdb4:	80 e0       	ldi	r24, 0x00	; 0
    fdb6:	90 e0       	ldi	r25, 0x00	; 0
    fdb8:	c7 5c       	subi	r28, 0xC7	; 199
    fdba:	dd 4f       	sbci	r29, 0xFD	; 253
    fdbc:	e8 e0       	ldi	r30, 0x08	; 8
    fdbe:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0000fdc2 <fat_time_to_unix>:
    fdc2:	a6 e1       	ldi	r26, 0x16	; 22
    fdc4:	b0 e0       	ldi	r27, 0x00	; 0
    fdc6:	e7 ee       	ldi	r30, 0xE7	; 231
    fdc8:	fe e7       	ldi	r31, 0x7E	; 126
    fdca:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
    fdce:	fe 01       	movw	r30, r28
    fdd0:	31 96       	adiw	r30, 0x01	; 1
    fdd2:	26 e1       	ldi	r18, 0x16	; 22
    fdd4:	df 01       	movw	r26, r30
    fdd6:	1d 92       	st	X+, r1
    fdd8:	2a 95       	dec	r18
    fdda:	e9 f7       	brne	.-6      	; 0xfdd6 <fat_time_to_unix+0x14>
    fddc:	9b 01       	movw	r18, r22
    fdde:	22 0f       	add	r18, r18
    fde0:	33 1f       	adc	r19, r19
    fde2:	2e 73       	andi	r18, 0x3E	; 62
    fde4:	33 27       	eor	r19, r19
    fde6:	3a 83       	std	Y+2, r19	; 0x02
    fde8:	29 83       	std	Y+1, r18	; 0x01
    fdea:	9b 01       	movw	r18, r22
    fdec:	55 e0       	ldi	r21, 0x05	; 5
    fdee:	36 95       	lsr	r19
    fdf0:	27 95       	ror	r18
    fdf2:	5a 95       	dec	r21
    fdf4:	e1 f7       	brne	.-8      	; 0xfdee <fat_time_to_unix+0x2c>
    fdf6:	2f 73       	andi	r18, 0x3F	; 63
    fdf8:	33 27       	eor	r19, r19
    fdfa:	3c 83       	std	Y+4, r19	; 0x04
    fdfc:	2b 83       	std	Y+3, r18	; 0x03
    fdfe:	27 2f       	mov	r18, r23
    fe00:	26 95       	lsr	r18
    fe02:	26 95       	lsr	r18
    fe04:	26 95       	lsr	r18
    fe06:	2d 83       	std	Y+5, r18	; 0x05
    fe08:	1e 82       	std	Y+6, r1	; 0x06
    fe0a:	9c 01       	movw	r18, r24
    fe0c:	2f 71       	andi	r18, 0x1F	; 31
    fe0e:	33 27       	eor	r19, r19
    fe10:	38 87       	std	Y+8, r19	; 0x08
    fe12:	2f 83       	std	Y+7, r18	; 0x07
    fe14:	9c 01       	movw	r18, r24
    fe16:	65 e0       	ldi	r22, 0x05	; 5
    fe18:	36 95       	lsr	r19
    fe1a:	27 95       	ror	r18
    fe1c:	6a 95       	dec	r22
    fe1e:	e1 f7       	brne	.-8      	; 0xfe18 <fat_time_to_unix+0x56>
    fe20:	2f 70       	andi	r18, 0x0F	; 15
    fe22:	33 27       	eor	r19, r19
    fe24:	21 50       	subi	r18, 0x01	; 1
    fe26:	31 09       	sbc	r19, r1
    fe28:	3a 87       	std	Y+10, r19	; 0x0a
    fe2a:	29 87       	std	Y+9, r18	; 0x09
    fe2c:	9c 01       	movw	r18, r24
    fe2e:	23 2f       	mov	r18, r19
    fe30:	33 27       	eor	r19, r19
    fe32:	26 95       	lsr	r18
    fe34:	20 5b       	subi	r18, 0xB0	; 176
    fe36:	3f 4f       	sbci	r19, 0xFF	; 255
    fe38:	3c 87       	std	Y+12, r19	; 0x0c
    fe3a:	2b 87       	std	Y+11, r18	; 0x0b
    fe3c:	cf 01       	movw	r24, r30
    fe3e:	0e 94 22 3b 	call	0x7644	; 0x7644 <timegm>
    fe42:	66 96       	adiw	r28, 0x16	; 22
    fe44:	e2 e0       	ldi	r30, 0x02	; 2
    fe46:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0000fe4a <stat>:
    fe4a:	a6 e1       	ldi	r26, 0x16	; 22
    fe4c:	b1 e0       	ldi	r27, 0x01	; 1
    fe4e:	eb e2       	ldi	r30, 0x2B	; 43
    fe50:	ff e7       	ldi	r31, 0x7F	; 127
    fe52:	0c 94 11 ed 	jmp	0x1da22	; 0x1da22 <__prologue_saves__+0x18>
    fe56:	7c 01       	movw	r14, r24
    fe58:	8b 01       	movw	r16, r22
    fe5a:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
    fe5e:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
    fe62:	6c e1       	ldi	r22, 0x1C	; 28
    fe64:	78 e0       	ldi	r23, 0x08	; 8
    fe66:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
    fe6a:	89 2b       	or	r24, r25
    fe6c:	39 f0       	breq	.+14     	; 0xfe7c <stat+0x32>
    fe6e:	6b e5       	ldi	r22, 0x5B	; 91
    fe70:	70 e1       	ldi	r23, 0x10	; 16
    fe72:	c7 01       	movw	r24, r14
    fe74:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
    fe78:	89 2b       	or	r24, r25
    fe7a:	d1 f4       	brne	.+52     	; 0xfeb0 <stat+0x66>
    fe7c:	f8 01       	movw	r30, r16
    fe7e:	14 a2       	std	Z+36, r1	; 0x24
    fe80:	15 a2       	std	Z+37, r1	; 0x25
    fe82:	16 a2       	std	Z+38, r1	; 0x26
    fe84:	17 a2       	std	Z+39, r1	; 0x27
    fe86:	10 a6       	std	Z+40, r1	; 0x28
    fe88:	11 a6       	std	Z+41, r1	; 0x29
    fe8a:	12 a6       	std	Z+42, r1	; 0x2a
    fe8c:	13 a6       	std	Z+43, r1	; 0x2b
    fe8e:	14 a6       	std	Z+44, r1	; 0x2c
    fe90:	15 a6       	std	Z+45, r1	; 0x2d
    fe92:	16 a6       	std	Z+46, r1	; 0x2e
    fe94:	17 a6       	std	Z+47, r1	; 0x2f
    fe96:	11 8a       	std	Z+17, r1	; 0x11
    fe98:	10 8a       	std	Z+16, r1	; 0x10
    fe9a:	13 8a       	std	Z+19, r1	; 0x13
    fe9c:	12 8a       	std	Z+18, r1	; 0x12
    fe9e:	10 8e       	std	Z+24, r1	; 0x18
    fea0:	11 8e       	std	Z+25, r1	; 0x19
    fea2:	12 8e       	std	Z+26, r1	; 0x1a
    fea4:	13 8e       	std	Z+27, r1	; 0x1b
    fea6:	80 e0       	ldi	r24, 0x00	; 0
    fea8:	90 e4       	ldi	r25, 0x40	; 64
    feaa:	a0 e0       	ldi	r26, 0x00	; 0
    feac:	b0 e0       	ldi	r27, 0x00	; 0
    feae:	4e c0       	rjmp	.+156    	; 0xff4c <__DATA_REGION_LENGTH__+0x4c>
    feb0:	be 01       	movw	r22, r28
    feb2:	6f 5f       	subi	r22, 0xFF	; 255
    feb4:	7f 4f       	sbci	r23, 0xFF	; 255
    feb6:	c7 01       	movw	r24, r14
    feb8:	0e 94 9a 63 	call	0xc734	; 0xc734 <f_stat>
    febc:	00 97       	sbiw	r24, 0x00	; 0
    febe:	a1 f0       	breq	.+40     	; 0xfee8 <stat+0x9e>
    fec0:	84 31       	cpi	r24, 0x14	; 20
    fec2:	91 05       	cpc	r25, r1
    fec4:	40 f4       	brcc	.+16     	; 0xfed6 <stat+0x8c>
    fec6:	fc 01       	movw	r30, r24
    fec8:	ec 5f       	subi	r30, 0xFC	; 252
    feca:	f8 4f       	sbci	r31, 0xF8	; 248
    fecc:	80 81       	ld	r24, Z
    fece:	08 2e       	mov	r0, r24
    fed0:	00 0c       	add	r0, r0
    fed2:	99 0b       	sbc	r25, r25
    fed4:	02 c0       	rjmp	.+4      	; 0xfeda <stat+0x90>
    fed6:	83 e2       	ldi	r24, 0x23	; 35
    fed8:	90 e0       	ldi	r25, 0x00	; 0
    feda:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
    fede:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
    fee2:	8f ef       	ldi	r24, 0xFF	; 255
    fee4:	9f ef       	ldi	r25, 0xFF	; 255
    fee6:	38 c0       	rjmp	.+112    	; 0xff58 <__DATA_REGION_LENGTH__+0x58>
    fee8:	89 81       	ldd	r24, Y+1	; 0x01
    feea:	9a 81       	ldd	r25, Y+2	; 0x02
    feec:	ab 81       	ldd	r26, Y+3	; 0x03
    feee:	bc 81       	ldd	r27, Y+4	; 0x04
    fef0:	f8 01       	movw	r30, r16
    fef2:	80 8f       	std	Z+24, r24	; 0x18
    fef4:	91 8f       	std	Z+25, r25	; 0x19
    fef6:	a2 8f       	std	Z+26, r26	; 0x1a
    fef8:	b3 8f       	std	Z+27, r27	; 0x1b
    fefa:	6f 81       	ldd	r22, Y+7	; 0x07
    fefc:	78 85       	ldd	r23, Y+8	; 0x08
    fefe:	8d 81       	ldd	r24, Y+5	; 0x05
    ff00:	9e 81       	ldd	r25, Y+6	; 0x06
    ff02:	5f df       	rcall	.-322    	; 0xfdc2 <fat_time_to_unix>
    ff04:	f8 01       	movw	r30, r16
    ff06:	64 a3       	std	Z+36, r22	; 0x24
    ff08:	75 a3       	std	Z+37, r23	; 0x25
    ff0a:	86 a3       	std	Z+38, r24	; 0x26
    ff0c:	97 a3       	std	Z+39, r25	; 0x27
    ff0e:	60 a7       	std	Z+40, r22	; 0x28
    ff10:	71 a7       	std	Z+41, r23	; 0x29
    ff12:	82 a7       	std	Z+42, r24	; 0x2a
    ff14:	93 a7       	std	Z+43, r25	; 0x2b
    ff16:	64 a7       	std	Z+44, r22	; 0x2c
    ff18:	75 a7       	std	Z+45, r23	; 0x2d
    ff1a:	86 a7       	std	Z+46, r24	; 0x2e
    ff1c:	97 a7       	std	Z+47, r25	; 0x2f
    ff1e:	29 85       	ldd	r18, Y+9	; 0x09
    ff20:	20 fd       	sbrc	r18, 0
    ff22:	03 c0       	rjmp	.+6      	; 0xff2a <__DATA_REGION_LENGTH__+0x2a>
    ff24:	8f ef       	ldi	r24, 0xFF	; 255
    ff26:	91 e0       	ldi	r25, 0x01	; 1
    ff28:	02 c0       	rjmp	.+4      	; 0xff2e <__DATA_REGION_LENGTH__+0x2e>
    ff2a:	8d e6       	ldi	r24, 0x6D	; 109
    ff2c:	91 e0       	ldi	r25, 0x01	; 1
    ff2e:	48 ee       	ldi	r20, 0xE8	; 232
    ff30:	53 e0       	ldi	r21, 0x03	; 3
    ff32:	f8 01       	movw	r30, r16
    ff34:	51 8b       	std	Z+17, r21	; 0x11
    ff36:	40 8b       	std	Z+16, r20	; 0x10
    ff38:	53 8b       	std	Z+19, r21	; 0x13
    ff3a:	42 8b       	std	Z+18, r20	; 0x12
    ff3c:	24 ff       	sbrs	r18, 4
    ff3e:	02 c0       	rjmp	.+4      	; 0xff44 <__DATA_REGION_LENGTH__+0x44>
    ff40:	90 64       	ori	r25, 0x40	; 64
    ff42:	01 c0       	rjmp	.+2      	; 0xff46 <__DATA_REGION_LENGTH__+0x46>
    ff44:	90 68       	ori	r25, 0x80	; 128
    ff46:	a0 e0       	ldi	r26, 0x00	; 0
    ff48:	b0 e0       	ldi	r27, 0x00	; 0
    ff4a:	f8 01       	movw	r30, r16
    ff4c:	80 87       	std	Z+8, r24	; 0x08
    ff4e:	91 87       	std	Z+9, r25	; 0x09
    ff50:	a2 87       	std	Z+10, r26	; 0x0a
    ff52:	b3 87       	std	Z+11, r27	; 0x0b
    ff54:	80 e0       	ldi	r24, 0x00	; 0
    ff56:	90 e0       	ldi	r25, 0x00	; 0
    ff58:	ca 5e       	subi	r28, 0xEA	; 234
    ff5a:	de 4f       	sbci	r29, 0xFE	; 254
    ff5c:	e6 e0       	ldi	r30, 0x06	; 6
    ff5e:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0000ff62 <unix_time_to_fat>:
    ff62:	a4 e0       	ldi	r26, 0x04	; 4
    ff64:	b0 e0       	ldi	r27, 0x00	; 0
    ff66:	e7 eb       	ldi	r30, 0xB7	; 183
    ff68:	ff e7       	ldi	r31, 0x7F	; 127
    ff6a:	0c 94 11 ed 	jmp	0x1da22	; 0x1da22 <__prologue_saves__+0x18>
    ff6e:	69 83       	std	Y+1, r22	; 0x01
    ff70:	7a 83       	std	Y+2, r23	; 0x02
    ff72:	8b 83       	std	Y+3, r24	; 0x03
    ff74:	9c 83       	std	Y+4, r25	; 0x04
    ff76:	7a 01       	movw	r14, r20
    ff78:	89 01       	movw	r16, r18
    ff7a:	ce 01       	movw	r24, r28
    ff7c:	01 96       	adiw	r24, 0x01	; 1
    ff7e:	0e 94 62 38 	call	0x70c4	; 0x70c4 <gmtime>
    ff82:	fc 01       	movw	r30, r24
    ff84:	22 85       	ldd	r18, Z+10	; 0x0a
    ff86:	33 85       	ldd	r19, Z+11	; 0x0b
    ff88:	20 55       	subi	r18, 0x50	; 80
    ff8a:	31 09       	sbc	r19, r1
    ff8c:	c9 01       	movw	r24, r18
    ff8e:	98 2f       	mov	r25, r24
    ff90:	88 27       	eor	r24, r24
    ff92:	99 0f       	add	r25, r25
    ff94:	20 85       	ldd	r18, Z+8	; 0x08
    ff96:	31 85       	ldd	r19, Z+9	; 0x09
    ff98:	2f 5f       	subi	r18, 0xFF	; 255
    ff9a:	3f 4f       	sbci	r19, 0xFF	; 255
    ff9c:	45 e0       	ldi	r20, 0x05	; 5
    ff9e:	22 0f       	add	r18, r18
    ffa0:	33 1f       	adc	r19, r19
    ffa2:	4a 95       	dec	r20
    ffa4:	e1 f7       	brne	.-8      	; 0xff9e <unix_time_to_fat+0x3c>
    ffa6:	28 2b       	or	r18, r24
    ffa8:	39 2b       	or	r19, r25
    ffaa:	86 81       	ldd	r24, Z+6	; 0x06
    ffac:	97 81       	ldd	r25, Z+7	; 0x07
    ffae:	28 2b       	or	r18, r24
    ffb0:	39 2b       	or	r19, r25
    ffb2:	d7 01       	movw	r26, r14
    ffb4:	2d 93       	st	X+, r18
    ffb6:	3c 93       	st	X, r19
    ffb8:	84 81       	ldd	r24, Z+4	; 0x04
    ffba:	20 e0       	ldi	r18, 0x00	; 0
    ffbc:	30 e0       	ldi	r19, 0x00	; 0
    ffbe:	38 2f       	mov	r19, r24
    ffc0:	33 0f       	add	r19, r19
    ffc2:	33 0f       	add	r19, r19
    ffc4:	33 0f       	add	r19, r19
    ffc6:	82 81       	ldd	r24, Z+2	; 0x02
    ffc8:	93 81       	ldd	r25, Z+3	; 0x03
    ffca:	55 e0       	ldi	r21, 0x05	; 5
    ffcc:	88 0f       	add	r24, r24
    ffce:	99 1f       	adc	r25, r25
    ffd0:	5a 95       	dec	r21
    ffd2:	e1 f7       	brne	.-8      	; 0xffcc <unix_time_to_fat+0x6a>
    ffd4:	82 2b       	or	r24, r18
    ffd6:	93 2b       	or	r25, r19
    ffd8:	20 81       	ld	r18, Z
    ffda:	31 81       	ldd	r19, Z+1	; 0x01
    ffdc:	36 95       	lsr	r19
    ffde:	27 95       	ror	r18
    ffe0:	82 2b       	or	r24, r18
    ffe2:	93 2b       	or	r25, r19
    ffe4:	f8 01       	movw	r30, r16
    ffe6:	91 83       	std	Z+1, r25	; 0x01
    ffe8:	80 83       	st	Z, r24
    ffea:	24 96       	adiw	r28, 0x04	; 4
    ffec:	e6 e0       	ldi	r30, 0x06	; 6
    ffee:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0000fff2 <utime>:
    fff2:	aa e1       	ldi	r26, 0x1A	; 26
    fff4:	b1 e0       	ldi	r27, 0x01	; 1
    fff6:	ef ef       	ldi	r30, 0xFF	; 255
    fff8:	ff e7       	ldi	r31, 0x7F	; 127
    fffa:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
    fffe:	8c 01       	movw	r16, r24
   10000:	61 15       	cp	r22, r1
   10002:	71 05       	cpc	r23, r1
   10004:	31 f0       	breq	.+12     	; 0x10012 <__EEPROM_REGION_LENGTH__+0x12>
   10006:	fb 01       	movw	r30, r22
   10008:	64 81       	ldd	r22, Z+4	; 0x04
   1000a:	75 81       	ldd	r23, Z+5	; 0x05
   1000c:	86 81       	ldd	r24, Z+6	; 0x06
   1000e:	97 81       	ldd	r25, Z+7	; 0x07
   10010:	04 c0       	rjmp	.+8      	; 0x1001a <__EEPROM_REGION_LENGTH__+0x1a>
   10012:	80 e0       	ldi	r24, 0x00	; 0
   10014:	90 e0       	ldi	r25, 0x00	; 0
   10016:	0e 94 bd 38 	call	0x717a	; 0x717a <time>
   1001a:	9e 01       	movw	r18, r28
   1001c:	29 5e       	subi	r18, 0xE9	; 233
   1001e:	3e 4f       	sbci	r19, 0xFE	; 254
   10020:	ae 01       	movw	r20, r28
   10022:	47 5e       	subi	r20, 0xE7	; 231
   10024:	5e 4f       	sbci	r21, 0xFE	; 254
   10026:	9d df       	rcall	.-198    	; 0xff62 <unix_time_to_fat>
   10028:	c7 5e       	subi	r28, 0xE7	; 231
   1002a:	de 4f       	sbci	r29, 0xFE	; 254
   1002c:	88 81       	ld	r24, Y
   1002e:	99 81       	ldd	r25, Y+1	; 0x01
   10030:	c9 51       	subi	r28, 0x19	; 25
   10032:	d1 40       	sbci	r29, 0x01	; 1
   10034:	9e 83       	std	Y+6, r25	; 0x06
   10036:	8d 83       	std	Y+5, r24	; 0x05
   10038:	c9 5e       	subi	r28, 0xE9	; 233
   1003a:	de 4f       	sbci	r29, 0xFE	; 254
   1003c:	88 81       	ld	r24, Y
   1003e:	99 81       	ldd	r25, Y+1	; 0x01
   10040:	c7 51       	subi	r28, 0x17	; 23
   10042:	d1 40       	sbci	r29, 0x01	; 1
   10044:	98 87       	std	Y+8, r25	; 0x08
   10046:	8f 83       	std	Y+7, r24	; 0x07
   10048:	be 01       	movw	r22, r28
   1004a:	6f 5f       	subi	r22, 0xFF	; 255
   1004c:	7f 4f       	sbci	r23, 0xFF	; 255
   1004e:	c8 01       	movw	r24, r16
   10050:	0e 94 13 68 	call	0xd026	; 0xd026 <f_utime>
   10054:	84 31       	cpi	r24, 0x14	; 20
   10056:	91 05       	cpc	r25, r1
   10058:	40 f4       	brcc	.+16     	; 0x1006a <__EEPROM_REGION_LENGTH__+0x6a>
   1005a:	fc 01       	movw	r30, r24
   1005c:	ec 5f       	subi	r30, 0xFC	; 252
   1005e:	f8 4f       	sbci	r31, 0xF8	; 248
   10060:	80 81       	ld	r24, Z
   10062:	08 2e       	mov	r0, r24
   10064:	00 0c       	add	r0, r0
   10066:	99 0b       	sbc	r25, r25
   10068:	02 c0       	rjmp	.+4      	; 0x1006e <__EEPROM_REGION_LENGTH__+0x6e>
   1006a:	83 e2       	ldi	r24, 0x23	; 35
   1006c:	90 e0       	ldi	r25, 0x00	; 0
   1006e:	c6 5e       	subi	r28, 0xE6	; 230
   10070:	de 4f       	sbci	r29, 0xFE	; 254
   10072:	e4 e0       	ldi	r30, 0x04	; 4
   10074:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

00010078 <fileno_to_fatfs>:
   10078:	83 30       	cpi	r24, 0x03	; 3
   1007a:	91 05       	cpc	r25, r1
   1007c:	48 f4       	brcc	.+18     	; 0x10090 <fileno_to_fatfs+0x18>
   1007e:	89 e0       	ldi	r24, 0x09	; 9
   10080:	90 e0       	ldi	r25, 0x00	; 0
   10082:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   10086:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   1008a:	80 e0       	ldi	r24, 0x00	; 0
   1008c:	90 e0       	ldi	r25, 0x00	; 0
   1008e:	08 95       	ret
   10090:	57 db       	rcall	.-2386   	; 0xf740 <fileno_to_stream>
   10092:	00 97       	sbiw	r24, 0x00	; 0
   10094:	d1 f3       	breq	.-12     	; 0x1008a <fileno_to_fatfs+0x12>
   10096:	fc 01       	movw	r30, r24
   10098:	84 85       	ldd	r24, Z+12	; 0x0c
   1009a:	95 85       	ldd	r25, Z+13	; 0x0d
   1009c:	00 97       	sbiw	r24, 0x00	; 0
   1009e:	79 f3       	breq	.-34     	; 0x1007e <fileno_to_fatfs+0x6>
   100a0:	08 95       	ret

000100a2 <ftell>:
   100a2:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
   100a6:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
   100aa:	2e db       	rcall	.-2468   	; 0xf708 <fileno>
   100ac:	83 30       	cpi	r24, 0x03	; 3
   100ae:	91 05       	cpc	r25, r1
   100b0:	48 f0       	brcs	.+18     	; 0x100c4 <ftell+0x22>
   100b2:	e2 df       	rcall	.-60     	; 0x10078 <fileno_to_fatfs>
   100b4:	00 97       	sbiw	r24, 0x00	; 0
   100b6:	51 f4       	brne	.+20     	; 0x100cc <ftell+0x2a>
   100b8:	89 e0       	ldi	r24, 0x09	; 9
   100ba:	90 e0       	ldi	r25, 0x00	; 0
   100bc:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   100c0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   100c4:	6f ef       	ldi	r22, 0xFF	; 255
   100c6:	7f ef       	ldi	r23, 0xFF	; 255
   100c8:	cb 01       	movw	r24, r22
   100ca:	08 95       	ret
   100cc:	fc 01       	movw	r30, r24
   100ce:	60 89       	ldd	r22, Z+16	; 0x10
   100d0:	71 89       	ldd	r23, Z+17	; 0x11
   100d2:	82 89       	ldd	r24, Z+18	; 0x12
   100d4:	93 89       	ldd	r25, Z+19	; 0x13
   100d6:	08 95       	ret

000100d8 <lseek>:
   100d8:	a0 e0       	ldi	r26, 0x00	; 0
   100da:	b0 e0       	ldi	r27, 0x00	; 0
   100dc:	e2 e7       	ldi	r30, 0x72	; 114
   100de:	f0 e8       	ldi	r31, 0x80	; 128
   100e0:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   100e4:	5c 01       	movw	r10, r24
   100e6:	6a 01       	movw	r12, r20
   100e8:	7b 01       	movw	r14, r22
   100ea:	89 01       	movw	r16, r18
   100ec:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
   100f0:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
   100f4:	c1 df       	rcall	.-126    	; 0x10078 <fileno_to_fatfs>
   100f6:	ec 01       	movw	r28, r24
   100f8:	89 2b       	or	r24, r25
   100fa:	19 f4       	brne	.+6      	; 0x10102 <lseek+0x2a>
   100fc:	88 e1       	ldi	r24, 0x18	; 24
   100fe:	90 e0       	ldi	r25, 0x00	; 0
   10100:	26 c0       	rjmp	.+76     	; 0x1014e <lseek+0x76>
   10102:	83 e0       	ldi	r24, 0x03	; 3
   10104:	a8 16       	cp	r10, r24
   10106:	b1 04       	cpc	r11, r1
   10108:	d0 f1       	brcs	.+116    	; 0x1017e <lseek+0xa6>
   1010a:	c5 01       	movw	r24, r10
   1010c:	19 db       	rcall	.-2510   	; 0xf740 <fileno_to_stream>
   1010e:	fc 01       	movw	r30, r24
   10110:	93 81       	ldd	r25, Z+3	; 0x03
   10112:	90 64       	ori	r25, 0x40	; 64
   10114:	93 83       	std	Z+3, r25	; 0x03
   10116:	02 30       	cpi	r16, 0x02	; 2
   10118:	11 05       	cpc	r17, r1
   1011a:	a9 f5       	brne	.+106    	; 0x10186 <lseek+0xae>
   1011c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1011e:	9b 85       	ldd	r25, Y+11	; 0x0b
   10120:	ac 85       	ldd	r26, Y+12	; 0x0c
   10122:	bd 85       	ldd	r27, Y+13	; 0x0d
   10124:	c8 0e       	add	r12, r24
   10126:	d9 1e       	adc	r13, r25
   10128:	ea 1e       	adc	r14, r26
   1012a:	fb 1e       	adc	r15, r27
   1012c:	b7 01       	movw	r22, r14
   1012e:	a6 01       	movw	r20, r12
   10130:	ce 01       	movw	r24, r28
   10132:	0e 94 ef 5f 	call	0xbfde	; 0xbfde <f_lseek>
   10136:	00 97       	sbiw	r24, 0x00	; 0
   10138:	79 f0       	breq	.+30     	; 0x10158 <lseek+0x80>
   1013a:	84 31       	cpi	r24, 0x14	; 20
   1013c:	91 05       	cpc	r25, r1
   1013e:	58 f5       	brcc	.+86     	; 0x10196 <lseek+0xbe>
   10140:	fc 01       	movw	r30, r24
   10142:	ec 5f       	subi	r30, 0xFC	; 252
   10144:	f8 4f       	sbci	r31, 0xF8	; 248
   10146:	80 81       	ld	r24, Z
   10148:	08 2e       	mov	r0, r24
   1014a:	00 0c       	add	r0, r0
   1014c:	99 0b       	sbc	r25, r25
   1014e:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   10152:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   10156:	13 c0       	rjmp	.+38     	; 0x1017e <lseek+0xa6>
   10158:	68 89       	ldd	r22, Y+16	; 0x10
   1015a:	79 89       	ldd	r23, Y+17	; 0x11
   1015c:	8a 89       	ldd	r24, Y+18	; 0x12
   1015e:	9b 89       	ldd	r25, Y+19	; 0x13
   10160:	c6 16       	cp	r12, r22
   10162:	d7 06       	cpc	r13, r23
   10164:	e8 06       	cpc	r14, r24
   10166:	f9 06       	cpc	r15, r25
   10168:	c9 f0       	breq	.+50     	; 0x1019c <lseek+0xc4>
   1016a:	8a e5       	ldi	r24, 0x5A	; 90
   1016c:	9c e0       	ldi	r25, 0x0C	; 12
   1016e:	1f 92       	push	r1
   10170:	9f 93       	push	r25
   10172:	8f 93       	push	r24
   10174:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10178:	0f 90       	pop	r0
   1017a:	0f 90       	pop	r0
   1017c:	0f 90       	pop	r0
   1017e:	6f ef       	ldi	r22, 0xFF	; 255
   10180:	7f ef       	ldi	r23, 0xFF	; 255
   10182:	cb 01       	movw	r24, r22
   10184:	0b c0       	rjmp	.+22     	; 0x1019c <lseek+0xc4>
   10186:	01 30       	cpi	r16, 0x01	; 1
   10188:	11 05       	cpc	r17, r1
   1018a:	81 f6       	brne	.-96     	; 0x1012c <lseek+0x54>
   1018c:	88 89       	ldd	r24, Y+16	; 0x10
   1018e:	99 89       	ldd	r25, Y+17	; 0x11
   10190:	aa 89       	ldd	r26, Y+18	; 0x12
   10192:	bb 89       	ldd	r27, Y+19	; 0x13
   10194:	c7 cf       	rjmp	.-114    	; 0x10124 <lseek+0x4c>
   10196:	83 e2       	ldi	r24, 0x23	; 35
   10198:	90 e0       	ldi	r25, 0x00	; 0
   1019a:	d9 cf       	rjmp	.-78     	; 0x1014e <lseek+0x76>
   1019c:	cd b7       	in	r28, 0x3d	; 61
   1019e:	de b7       	in	r29, 0x3e	; 62
   101a0:	ea e0       	ldi	r30, 0x0A	; 10
   101a2:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

000101a6 <fseek>:
   101a6:	cf 92       	push	r12
   101a8:	df 92       	push	r13
   101aa:	ef 92       	push	r14
   101ac:	ff 92       	push	r15
   101ae:	cf 93       	push	r28
   101b0:	df 93       	push	r29
   101b2:	6a 01       	movw	r12, r20
   101b4:	7b 01       	movw	r14, r22
   101b6:	e9 01       	movw	r28, r18
   101b8:	a7 da       	rcall	.-2738   	; 0xf708 <fileno>
   101ba:	97 fd       	sbrc	r25, 7
   101bc:	12 c0       	rjmp	.+36     	; 0x101e2 <fseek+0x3c>
   101be:	9e 01       	movw	r18, r28
   101c0:	b7 01       	movw	r22, r14
   101c2:	a6 01       	movw	r20, r12
   101c4:	89 df       	rcall	.-238    	; 0x100d8 <lseek>
   101c6:	21 e0       	ldi	r18, 0x01	; 1
   101c8:	30 e0       	ldi	r19, 0x00	; 0
   101ca:	6f 3f       	cpi	r22, 0xFF	; 255
   101cc:	7f 4f       	sbci	r23, 0xFF	; 255
   101ce:	8f 4f       	sbci	r24, 0xFF	; 255
   101d0:	9f 4f       	sbci	r25, 0xFF	; 255
   101d2:	11 f0       	breq	.+4      	; 0x101d8 <fseek+0x32>
   101d4:	20 e0       	ldi	r18, 0x00	; 0
   101d6:	30 e0       	ldi	r19, 0x00	; 0
   101d8:	88 27       	eor	r24, r24
   101da:	99 27       	eor	r25, r25
   101dc:	82 1b       	sub	r24, r18
   101de:	93 0b       	sbc	r25, r19
   101e0:	02 c0       	rjmp	.+4      	; 0x101e6 <fseek+0x40>
   101e2:	8f ef       	ldi	r24, 0xFF	; 255
   101e4:	9f ef       	ldi	r25, 0xFF	; 255
   101e6:	df 91       	pop	r29
   101e8:	cf 91       	pop	r28
   101ea:	ff 90       	pop	r15
   101ec:	ef 90       	pop	r14
   101ee:	df 90       	pop	r13
   101f0:	cf 90       	pop	r12
   101f2:	08 95       	ret

000101f4 <read>:
   101f4:	a2 e0       	ldi	r26, 0x02	; 2
   101f6:	b0 e0       	ldi	r27, 0x00	; 0
   101f8:	e0 e0       	ldi	r30, 0x00	; 0
   101fa:	f1 e8       	ldi	r31, 0x81	; 129
   101fc:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   10200:	5c 01       	movw	r10, r24
   10202:	8b 01       	movw	r16, r22
   10204:	6a 01       	movw	r12, r20
   10206:	fb 01       	movw	r30, r22
   10208:	10 82       	st	Z, r1
   1020a:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
   1020e:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
   10212:	96 da       	rcall	.-2772   	; 0xf740 <fileno_to_stream>
   10214:	7c 01       	movw	r14, r24
   10216:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <__iob>
   1021a:	90 91 eb 1c 	lds	r25, 0x1CEB	; 0x801ceb <__iob+0x1>
   1021e:	e8 16       	cp	r14, r24
   10220:	f9 06       	cpc	r15, r25
   10222:	c9 f4       	brne	.+50     	; 0x10256 <read+0x62>
   10224:	f7 01       	movw	r30, r14
   10226:	83 81       	ldd	r24, Z+3	; 0x03
   10228:	80 64       	ori	r24, 0x40	; 64
   1022a:	83 83       	std	Z+3, r24	; 0x03
   1022c:	1a 82       	std	Y+2, r1	; 0x02
   1022e:	19 82       	std	Y+1, r1	; 0x01
   10230:	c0 0e       	add	r12, r16
   10232:	d1 1e       	adc	r13, r17
   10234:	0c 15       	cp	r16, r12
   10236:	1d 05       	cpc	r17, r13
   10238:	09 f4       	brne	.+2      	; 0x1023c <read+0x48>
   1023a:	3d c0       	rjmp	.+122    	; 0x102b6 <read+0xc2>
   1023c:	c7 01       	movw	r24, r14
   1023e:	4a d9       	rcall	.-3436   	; 0xf4d4 <fgetc>
   10240:	97 fd       	sbrc	r25, 7
   10242:	39 c0       	rjmp	.+114    	; 0x102b6 <read+0xc2>
   10244:	f8 01       	movw	r30, r16
   10246:	81 93       	st	Z+, r24
   10248:	8f 01       	movw	r16, r30
   1024a:	89 81       	ldd	r24, Y+1	; 0x01
   1024c:	9a 81       	ldd	r25, Y+2	; 0x02
   1024e:	01 96       	adiw	r24, 0x01	; 1
   10250:	9a 83       	std	Y+2, r25	; 0x02
   10252:	89 83       	std	Y+1, r24	; 0x01
   10254:	ef cf       	rjmp	.-34     	; 0x10234 <read+0x40>
   10256:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <__iob+0x2>
   1025a:	90 91 ed 1c 	lds	r25, 0x1CED	; 0x801ced <__iob+0x3>
   1025e:	e8 16       	cp	r14, r24
   10260:	f9 06       	cpc	r15, r25
   10262:	71 f1       	breq	.+92     	; 0x102c0 <read+0xcc>
   10264:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <__iob+0x4>
   10268:	90 91 ef 1c 	lds	r25, 0x1CEF	; 0x801cef <__iob+0x5>
   1026c:	e8 16       	cp	r14, r24
   1026e:	f9 06       	cpc	r15, r25
   10270:	39 f1       	breq	.+78     	; 0x102c0 <read+0xcc>
   10272:	c5 01       	movw	r24, r10
   10274:	01 df       	rcall	.-510    	; 0x10078 <fileno_to_fatfs>
   10276:	00 97       	sbiw	r24, 0x00	; 0
   10278:	19 f4       	brne	.+6      	; 0x10280 <read+0x8c>
   1027a:	89 e0       	ldi	r24, 0x09	; 9
   1027c:	90 e0       	ldi	r25, 0x00	; 0
   1027e:	16 c0       	rjmp	.+44     	; 0x102ac <read+0xb8>
   10280:	9e 01       	movw	r18, r28
   10282:	2f 5f       	subi	r18, 0xFF	; 255
   10284:	3f 4f       	sbci	r19, 0xFF	; 255
   10286:	a6 01       	movw	r20, r12
   10288:	b8 01       	movw	r22, r16
   1028a:	0e 94 e5 5a 	call	0xb5ca	; 0xb5ca <f_read>
   1028e:	00 97       	sbiw	r24, 0x00	; 0
   10290:	91 f0       	breq	.+36     	; 0x102b6 <read+0xc2>
   10292:	84 31       	cpi	r24, 0x14	; 20
   10294:	91 05       	cpc	r25, r1
   10296:	40 f4       	brcc	.+16     	; 0x102a8 <read+0xb4>
   10298:	fc 01       	movw	r30, r24
   1029a:	ec 5f       	subi	r30, 0xFC	; 252
   1029c:	f8 4f       	sbci	r31, 0xF8	; 248
   1029e:	80 81       	ld	r24, Z
   102a0:	08 2e       	mov	r0, r24
   102a2:	00 0c       	add	r0, r0
   102a4:	99 0b       	sbc	r25, r25
   102a6:	02 c0       	rjmp	.+4      	; 0x102ac <read+0xb8>
   102a8:	83 e2       	ldi	r24, 0x23	; 35
   102aa:	90 e0       	ldi	r25, 0x00	; 0
   102ac:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   102b0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   102b4:	05 c0       	rjmp	.+10     	; 0x102c0 <read+0xcc>
   102b6:	69 81       	ldd	r22, Y+1	; 0x01
   102b8:	7a 81       	ldd	r23, Y+2	; 0x02
   102ba:	80 e0       	ldi	r24, 0x00	; 0
   102bc:	90 e0       	ldi	r25, 0x00	; 0
   102be:	03 c0       	rjmp	.+6      	; 0x102c6 <read+0xd2>
   102c0:	6f ef       	ldi	r22, 0xFF	; 255
   102c2:	7f ef       	ldi	r23, 0xFF	; 255
   102c4:	cb 01       	movw	r24, r22
   102c6:	22 96       	adiw	r28, 0x02	; 2
   102c8:	ea e0       	ldi	r30, 0x0A	; 10
   102ca:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

000102ce <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   102ce:	0f 93       	push	r16
   102d0:	1f 93       	push	r17
   102d2:	cf 93       	push	r28
   102d4:	df 93       	push	r29
   102d6:	ec 01       	movw	r28, r24
   102d8:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   102da:	64 9f       	mul	r22, r20
   102dc:	80 01       	movw	r16, r0
   102de:	65 9f       	mul	r22, r21
   102e0:	10 0d       	add	r17, r0
   102e2:	74 9f       	mul	r23, r20
   102e4:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   102e6:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
   102e8:	0f da       	rcall	.-3042   	; 0xf708 <fileno>
   102ea:	a8 01       	movw	r20, r16
   102ec:	be 01       	movw	r22, r28
    if(ret < 0)
   102ee:	82 df       	rcall	.-252    	; 0x101f4 <read>
   102f0:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   102f2:	02 c0       	rjmp	.+4      	; 0x102f8 <fread+0x2a>
   102f4:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
   102f6:	02 c0       	rjmp	.+4      	; 0x102fc <fread+0x2e>
   102f8:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   102fa:	90 e0       	ldi	r25, 0x00	; 0
   102fc:	df 91       	pop	r29
   102fe:	cf 91       	pop	r28
   10300:	1f 91       	pop	r17
   10302:	0f 91       	pop	r16
   10304:	08 95       	ret

00010306 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
   10306:	cf 93       	push	r28
   10308:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
   1030a:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
   1030e:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   10312:	83 30       	cpi	r24, 0x03	; 3
   10314:	91 05       	cpc	r25, r1
   10316:	18 f4       	brcc	.+6      	; 0x1031e <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
   10318:	89 e0       	ldi	r24, 0x09	; 9
   1031a:	90 e0       	ldi	r25, 0x00	; 0
   1031c:	18 c0       	rjmp	.+48     	; 0x1034e <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
   1031e:	ec 01       	movw	r28, r24
   10320:	0f da       	rcall	.-3042   	; 0xf740 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
   10322:	fc 01       	movw	r30, r24
   10324:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   10326:	90 64       	ori	r25, 0x40	; 64
   10328:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
   1032a:	ce 01       	movw	r24, r28
   1032c:	a5 de       	rcall	.-694    	; 0x10078 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
   1032e:	00 97       	sbiw	r24, 0x00	; 0
   10330:	99 f3       	breq	.-26     	; 0x10318 <syncfs+0x12>
    if (res != FR_OK)
   10332:	0e 94 c7 5d 	call	0xbb8e	; 0xbb8e <f_sync>
   10336:	00 97       	sbiw	r24, 0x00	; 0
   10338:	a1 f0       	breq	.+40     	; 0x10362 <syncfs+0x5c>
   1033a:	84 31       	cpi	r24, 0x14	; 20
   1033c:	91 05       	cpc	r25, r1
   1033e:	70 f4       	brcc	.+28     	; 0x1035c <syncfs+0x56>
   10340:	fc 01       	movw	r30, r24
   10342:	ec 5f       	subi	r30, 0xFC	; 252
   10344:	f8 4f       	sbci	r31, 0xF8	; 248
   10346:	80 81       	ld	r24, Z
   10348:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
   1034a:	00 0c       	add	r0, r0
   1034c:	99 0b       	sbc	r25, r25
   1034e:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
        return(-1);
   10352:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   10356:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
   10358:	9f ef       	ldi	r25, 0xFF	; 255
   1035a:	05 c0       	rjmp	.+10     	; 0x10366 <syncfs+0x60>
   1035c:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
   1035e:	90 e0       	ldi	r25, 0x00	; 0
   10360:	f6 cf       	rjmp	.-20     	; 0x1034e <syncfs+0x48>
}
   10362:	80 e0       	ldi	r24, 0x00	; 0
   10364:	90 e0       	ldi	r25, 0x00	; 0
   10366:	df 91       	pop	r29
   10368:	cf 91       	pop	r28
   1036a:	08 95       	ret

0001036c <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
   1036c:	cf 93       	push	r28
   1036e:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
   10370:	c0 e0       	ldi	r28, 0x00	; 0
   10372:	d0 e0       	ldi	r29, 0x00	; 0
   10374:	21 96       	adiw	r28, 0x01	; 1
   10376:	c0 31       	cpi	r28, 0x10	; 16
   10378:	d1 05       	cpc	r29, r1
   1037a:	51 f0       	breq	.+20     	; 0x10390 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   1037c:	c3 30       	cpi	r28, 0x03	; 3
   1037e:	d1 05       	cpc	r29, r1
   10380:	cc f3       	brlt	.-14     	; 0x10374 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
   10382:	ce 01       	movw	r24, r28
   10384:	79 de       	rcall	.-782    	; 0x10078 <fileno_to_fatfs>
        if(fh == NULL)
   10386:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
   10388:	a9 f3       	breq	.-22     	; 0x10374 <sync+0x8>
   1038a:	ce 01       	movw	r24, r28
   1038c:	bc df       	rcall	.-136    	; 0x10306 <syncfs>
    }
}
   1038e:	f2 cf       	rjmp	.-28     	; 0x10374 <sync+0x8>
   10390:	df 91       	pop	r29
   10392:	cf 91       	pop	r28
   10394:	08 95       	ret

00010396 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
   10396:	a2 e0       	ldi	r26, 0x02	; 2
   10398:	b0 e0       	ldi	r27, 0x00	; 0
   1039a:	e1 ed       	ldi	r30, 0xD1	; 209
   1039c:	f1 e8       	ldi	r31, 0x81	; 129
   1039e:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   103a2:	8c 01       	movw	r16, r24
   103a4:	b6 2e       	mov	r11, r22
   103a6:	f7 2e       	mov	r15, r23
   103a8:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
   103aa:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
   103ae:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
   103b2:	c6 d9       	rcall	.-3188   	; 0xf740 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
   103b4:	6c 01       	movw	r12, r24
   103b6:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <__iob+0x2>
   103ba:	90 91 ed 1c 	lds	r25, 0x1CED	; 0x801ced <__iob+0x3>
   103be:	c8 16       	cp	r12, r24
   103c0:	d9 06       	cpc	r13, r25
   103c2:	39 f0       	breq	.+14     	; 0x103d2 <write+0x3c>
   103c4:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <__iob+0x4>
   103c8:	90 91 ef 1c 	lds	r25, 0x1CEF	; 0x801cef <__iob+0x5>
   103cc:	c8 16       	cp	r12, r24
   103ce:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
   103d0:	d1 f4       	brne	.+52     	; 0x10406 <write+0x70>
   103d2:	1a 82       	std	Y+2, r1	; 0x02
   103d4:	19 82       	std	Y+1, r1	; 0x01
   103d6:	0b 2d       	mov	r16, r11
   103d8:	1f 2d       	mov	r17, r15
   103da:	78 01       	movw	r14, r16
   103dc:	e8 0c       	add	r14, r8
        while(count--)
   103de:	f9 1c       	adc	r15, r9
   103e0:	0e 15       	cp	r16, r14
   103e2:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
   103e4:	d1 f1       	breq	.+116    	; 0x1045a <write+0xc4>
   103e6:	f8 01       	movw	r30, r16
   103e8:	a1 90       	ld	r10, Z+
   103ea:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
   103ec:	b1 2c       	mov	r11, r1
   103ee:	b6 01       	movw	r22, r12
   103f0:	c5 01       	movw	r24, r10
            if(c != ret)
   103f2:	c1 d8       	rcall	.-3710   	; 0xf576 <fputc>
   103f4:	a8 16       	cp	r10, r24
   103f6:	b9 06       	cpc	r11, r25
                break;

            ++size;
   103f8:	81 f5       	brne	.+96     	; 0x1045a <write+0xc4>
   103fa:	89 81       	ldd	r24, Y+1	; 0x01
   103fc:	9a 81       	ldd	r25, Y+2	; 0x02
   103fe:	01 96       	adiw	r24, 0x01	; 1
   10400:	9a 83       	std	Y+2, r25	; 0x02
   10402:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
   10404:	ed cf       	rjmp	.-38     	; 0x103e0 <write+0x4a>
   10406:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <__iob>
   1040a:	90 91 eb 1c 	lds	r25, 0x1CEB	; 0x801ceb <__iob+0x1>
   1040e:	c8 16       	cp	r12, r24
   10410:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   10412:	41 f1       	breq	.+80     	; 0x10464 <write+0xce>
   10414:	c8 01       	movw	r24, r16
    if ( fh == NULL )
   10416:	30 de       	rcall	.-928    	; 0x10078 <fileno_to_fatfs>
   10418:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
   1041a:	19 f4       	brne	.+6      	; 0x10422 <write+0x8c>
   1041c:	89 e0       	ldi	r24, 0x09	; 9
   1041e:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
   10420:	17 c0       	rjmp	.+46     	; 0x10450 <write+0xba>
   10422:	9e 01       	movw	r18, r28
   10424:	2f 5f       	subi	r18, 0xFF	; 255
   10426:	3f 4f       	sbci	r19, 0xFF	; 255
   10428:	a4 01       	movw	r20, r8
   1042a:	6b 2d       	mov	r22, r11
   1042c:	7f 2d       	mov	r23, r15
   1042e:	0e 94 30 5c 	call	0xb860	; 0xb860 <f_write>
    if(res != FR_OK)
   10432:	00 97       	sbiw	r24, 0x00	; 0
   10434:	91 f0       	breq	.+36     	; 0x1045a <write+0xc4>
   10436:	84 31       	cpi	r24, 0x14	; 20
   10438:	91 05       	cpc	r25, r1
   1043a:	40 f4       	brcc	.+16     	; 0x1044c <write+0xb6>
   1043c:	fc 01       	movw	r30, r24
   1043e:	ec 5f       	subi	r30, 0xFC	; 252
   10440:	f8 4f       	sbci	r31, 0xF8	; 248
   10442:	80 81       	ld	r24, Z
   10444:	08 2e       	mov	r0, r24
   10446:	00 0c       	add	r0, r0
   10448:	99 0b       	sbc	r25, r25
   1044a:	02 c0       	rjmp	.+4      	; 0x10450 <write+0xba>
   1044c:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
   1044e:	90 e0       	ldi	r25, 0x00	; 0
   10450:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   10454:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
        return(-1);
    }
    return ((ssize_t) size);
   10458:	05 c0       	rjmp	.+10     	; 0x10464 <write+0xce>
   1045a:	69 81       	ldd	r22, Y+1	; 0x01
   1045c:	7a 81       	ldd	r23, Y+2	; 0x02
   1045e:	80 e0       	ldi	r24, 0x00	; 0
   10460:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
   10462:	03 c0       	rjmp	.+6      	; 0x1046a <write+0xd4>
   10464:	6f ef       	ldi	r22, 0xFF	; 255
   10466:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
   10468:	cb 01       	movw	r24, r22
   1046a:	22 96       	adiw	r28, 0x02	; 2
   1046c:	ec e0       	ldi	r30, 0x0C	; 12
   1046e:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

00010472 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   10472:	0f 93       	push	r16
   10474:	1f 93       	push	r17
   10476:	cf 93       	push	r28
   10478:	df 93       	push	r29
   1047a:	ec 01       	movw	r28, r24
   1047c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   1047e:	64 9f       	mul	r22, r20
   10480:	80 01       	movw	r16, r0
   10482:	65 9f       	mul	r22, r21
   10484:	10 0d       	add	r17, r0
   10486:	74 9f       	mul	r23, r20
   10488:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   1048a:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
   1048c:	3d d9       	rcall	.-3462   	; 0xf708 <fileno>
   1048e:	a8 01       	movw	r20, r16
   10490:	be 01       	movw	r22, r28

    if(ret < 0)
   10492:	81 df       	rcall	.-254    	; 0x10396 <write>
   10494:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   10496:	02 c0       	rjmp	.+4      	; 0x1049c <fwrite+0x2a>
   10498:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
   1049a:	02 c0       	rjmp	.+4      	; 0x104a0 <fwrite+0x2e>
   1049c:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   1049e:	90 e0       	ldi	r25, 0x00	; 0
   104a0:	df 91       	pop	r29
   104a2:	cf 91       	pop	r28
   104a4:	1f 91       	pop	r17
   104a6:	0f 91       	pop	r16
   104a8:	08 95       	ret

000104aa <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
   104aa:	0f 93       	push	r16
   104ac:	1f 93       	push	r17
   104ae:	cf 93       	push	r28
   104b0:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   104b2:	83 30       	cpi	r24, 0x03	; 3
   104b4:	91 05       	cpc	r25, r1
   104b6:	48 f4       	brcc	.+18     	; 0x104ca <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
   104b8:	89 e0       	ldi	r24, 0x09	; 9
   104ba:	90 e0       	ldi	r25, 0x00	; 0
   104bc:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   104c0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
        return(-1);
   104c4:	8f ef       	ldi	r24, 0xFF	; 255
   104c6:	9f ef       	ldi	r25, 0xFF	; 255
   104c8:	20 c0       	rjmp	.+64     	; 0x1050a <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
   104ca:	ec 01       	movw	r28, r24
   104cc:	39 d9       	rcall	.-3470   	; 0xf740 <fileno_to_stream>
    if(stream == NULL)
   104ce:	8c 01       	movw	r16, r24
   104d0:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
   104d2:	c1 f3       	breq	.-16     	; 0x104c4 <free_file_descriptor+0x1a>
   104d4:	f8 01       	movw	r30, r16
   104d6:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
   104d8:	95 85       	ldd	r25, Z+13	; 0x0d
   104da:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
   104dc:	11 f0       	breq	.+4      	; 0x104e2 <free_file_descriptor+0x38>
   104de:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
   104e2:	f8 01       	movw	r30, r16
   104e4:	80 81       	ld	r24, Z
   104e6:	91 81       	ldd	r25, Z+1	; 0x01
   104e8:	00 97       	sbiw	r24, 0x00	; 0
   104ea:	21 f0       	breq	.+8      	; 0x104f4 <free_file_descriptor+0x4a>
   104ec:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
   104ee:	27 fd       	sbrc	r18, 7
   104f0:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
    }

    __iob[fileno]  = NULL;
   104f4:	fe 01       	movw	r30, r28
   104f6:	ee 0f       	add	r30, r30
   104f8:	ff 1f       	adc	r31, r31
   104fa:	e6 51       	subi	r30, 0x16	; 22
   104fc:	f3 4e       	sbci	r31, 0xE3	; 227
   104fe:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
   10500:	10 82       	st	Z, r1
   10502:	c8 01       	movw	r24, r16
   10504:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
    return(fileno);
}
   10508:	ce 01       	movw	r24, r28
   1050a:	df 91       	pop	r29
   1050c:	cf 91       	pop	r28
   1050e:	1f 91       	pop	r17
   10510:	0f 91       	pop	r16
   10512:	08 95       	ret

00010514 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
   10514:	0f 93       	push	r16
   10516:	1f 93       	push	r17
   10518:	cf 93       	push	r28
   1051a:	df 93       	push	r29
   1051c:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
   1051e:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
   10522:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
   10526:	0c d9       	rcall	.-3560   	; 0xf740 <fileno_to_stream>
   10528:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
   1052a:	d9 f0       	breq	.+54     	; 0x10562 <close+0x4e>
   1052c:	c8 01       	movw	r24, r16
    if(fh == NULL)
   1052e:	a4 dd       	rcall	.-1208   	; 0x10078 <fileno_to_fatfs>
   10530:	00 97       	sbiw	r24, 0x00	; 0
    {
        return(-1);
    }
    res = f_close(fh);
   10532:	b9 f0       	breq	.+46     	; 0x10562 <close+0x4e>
   10534:	0e 94 47 5e 	call	0xbc8e	; 0xbc8e <f_close>
    free_file_descriptor(fileno);
   10538:	ec 01       	movw	r28, r24
    if (res != FR_OK)
   1053a:	c8 01       	movw	r24, r16
   1053c:	b6 df       	rcall	.-148    	; 0x104aa <free_file_descriptor>
   1053e:	20 97       	sbiw	r28, 0x00	; 0
   10540:	99 f0       	breq	.+38     	; 0x10568 <close+0x54>
   10542:	c4 31       	cpi	r28, 0x14	; 20
   10544:	d1 05       	cpc	r29, r1
   10546:	38 f4       	brcc	.+14     	; 0x10556 <close+0x42>
   10548:	cc 5f       	subi	r28, 0xFC	; 252
   1054a:	d8 4f       	sbci	r29, 0xF8	; 248
   1054c:	88 81       	ld	r24, Y
   1054e:	08 2e       	mov	r0, r24
   10550:	00 0c       	add	r0, r0
   10552:	99 0b       	sbc	r25, r25
   10554:	02 c0       	rjmp	.+4      	; 0x1055a <close+0x46>
    {
        errno = fatfs_to_errno(res);
   10556:	83 e2       	ldi	r24, 0x23	; 35
   10558:	90 e0       	ldi	r25, 0x00	; 0
   1055a:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
        return(-1);
   1055e:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   10562:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
   10564:	9f ef       	ldi	r25, 0xFF	; 255
   10566:	02 c0       	rjmp	.+4      	; 0x1056c <close+0x58>
}
   10568:	80 e0       	ldi	r24, 0x00	; 0
   1056a:	90 e0       	ldi	r25, 0x00	; 0
   1056c:	df 91       	pop	r29
   1056e:	cf 91       	pop	r28
   10570:	1f 91       	pop	r17
   10572:	0f 91       	pop	r16
   10574:	08 95       	ret

00010576 <fclose>:
   10576:	c8 d8       	rcall	.-3696   	; 0xf708 <fileno>
   10578:	97 fd       	sbrc	r25, 7
   1057a:	02 c0       	rjmp	.+4      	; 0x10580 <fclose+0xa>
   1057c:	cb cf       	rjmp	.-106    	; 0x10514 <close>
   1057e:	08 95       	ret
   10580:	8f ef       	ldi	r24, 0xFF	; 255
   10582:	9f ef       	ldi	r25, 0xFF	; 255
   10584:	08 95       	ret

00010586 <new_file_descriptor>:
   10586:	0f 93       	push	r16
   10588:	1f 93       	push	r17
   1058a:	cf 93       	push	r28
   1058c:	df 93       	push	r29
   1058e:	ea ee       	ldi	r30, 0xEA	; 234
   10590:	fc e1       	ldi	r31, 0x1C	; 28
   10592:	c0 e0       	ldi	r28, 0x00	; 0
   10594:	d0 e0       	ldi	r29, 0x00	; 0
   10596:	21 96       	adiw	r28, 0x01	; 1
   10598:	c0 31       	cpi	r28, 0x10	; 16
   1059a:	d1 05       	cpc	r29, r1
   1059c:	49 f0       	breq	.+18     	; 0x105b0 <new_file_descriptor+0x2a>
   1059e:	c3 30       	cpi	r28, 0x03	; 3
   105a0:	d1 05       	cpc	r29, r1
   105a2:	24 f0       	brlt	.+8      	; 0x105ac <new_file_descriptor+0x26>
   105a4:	82 81       	ldd	r24, Z+2	; 0x02
   105a6:	93 81       	ldd	r25, Z+3	; 0x03
   105a8:	89 2b       	or	r24, r25
   105aa:	59 f0       	breq	.+22     	; 0x105c2 <new_file_descriptor+0x3c>
   105ac:	32 96       	adiw	r30, 0x02	; 2
   105ae:	f3 cf       	rjmp	.-26     	; 0x10596 <new_file_descriptor+0x10>
   105b0:	87 e1       	ldi	r24, 0x17	; 23
   105b2:	90 e0       	ldi	r25, 0x00	; 0
   105b4:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   105b8:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   105bc:	8f ef       	ldi	r24, 0xFF	; 255
   105be:	9f ef       	ldi	r25, 0xFF	; 255
   105c0:	22 c0       	rjmp	.+68     	; 0x10606 <new_file_descriptor+0x80>
   105c2:	61 e0       	ldi	r22, 0x01	; 1
   105c4:	70 e0       	ldi	r23, 0x00	; 0
   105c6:	8e e0       	ldi	r24, 0x0E	; 14
   105c8:	90 e0       	ldi	r25, 0x00	; 0
   105ca:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   105ce:	8c 01       	movw	r16, r24
   105d0:	89 2b       	or	r24, r25
   105d2:	59 f0       	breq	.+22     	; 0x105ea <new_file_descriptor+0x64>
   105d4:	61 e0       	ldi	r22, 0x01	; 1
   105d6:	70 e0       	ldi	r23, 0x00	; 0
   105d8:	84 e2       	ldi	r24, 0x24	; 36
   105da:	92 e0       	ldi	r25, 0x02	; 2
   105dc:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   105e0:	00 97       	sbiw	r24, 0x00	; 0
   105e2:	31 f4       	brne	.+12     	; 0x105f0 <new_file_descriptor+0x6a>
   105e4:	c8 01       	movw	r24, r16
   105e6:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
   105ea:	8c e0       	ldi	r24, 0x0C	; 12
   105ec:	90 e0       	ldi	r25, 0x00	; 0
   105ee:	e2 cf       	rjmp	.-60     	; 0x105b4 <new_file_descriptor+0x2e>
   105f0:	fe 01       	movw	r30, r28
   105f2:	ee 0f       	add	r30, r30
   105f4:	ff 1f       	adc	r31, r31
   105f6:	e6 51       	subi	r30, 0x16	; 22
   105f8:	f3 4e       	sbci	r31, 0xE3	; 227
   105fa:	11 83       	std	Z+1, r17	; 0x01
   105fc:	00 83       	st	Z, r16
   105fe:	f8 01       	movw	r30, r16
   10600:	95 87       	std	Z+13, r25	; 0x0d
   10602:	84 87       	std	Z+12, r24	; 0x0c
   10604:	ce 01       	movw	r24, r28
   10606:	df 91       	pop	r29
   10608:	cf 91       	pop	r28
   1060a:	1f 91       	pop	r17
   1060c:	0f 91       	pop	r16
   1060e:	08 95       	ret

00010610 <open>:
   10610:	a0 e0       	ldi	r26, 0x00	; 0
   10612:	b0 e0       	ldi	r27, 0x00	; 0
   10614:	ee e0       	ldi	r30, 0x0E	; 14
   10616:	f3 e8       	ldi	r31, 0x83	; 131
   10618:	0c 94 09 ed 	jmp	0x1da12	; 0x1da12 <__prologue_saves__+0x8>
   1061c:	5c 01       	movw	r10, r24
   1061e:	6b 01       	movw	r12, r22
   10620:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <errno+0x1>
   10624:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <errno>
   10628:	7b 01       	movw	r14, r22
   1062a:	83 e0       	ldi	r24, 0x03	; 3
   1062c:	e8 22       	and	r14, r24
   1062e:	ff 24       	eor	r15, r15
   10630:	e2 e0       	ldi	r30, 0x02	; 2
   10632:	ee 16       	cp	r14, r30
   10634:	f1 04       	cpc	r15, r1
   10636:	31 f0       	breq	.+12     	; 0x10644 <open+0x34>
   10638:	e1 14       	cp	r14, r1
   1063a:	f1 04       	cpc	r15, r1
   1063c:	31 f0       	breq	.+12     	; 0x1064a <open+0x3a>
   1063e:	02 e0       	ldi	r16, 0x02	; 2
   10640:	10 e0       	ldi	r17, 0x00	; 0
   10642:	05 c0       	rjmp	.+10     	; 0x1064e <open+0x3e>
   10644:	03 e0       	ldi	r16, 0x03	; 3
   10646:	10 e0       	ldi	r17, 0x00	; 0
   10648:	02 c0       	rjmp	.+4      	; 0x1064e <open+0x3e>
   1064a:	01 e0       	ldi	r16, 0x01	; 1
   1064c:	10 e0       	ldi	r17, 0x00	; 0
   1064e:	c6 fe       	sbrs	r12, 6
   10650:	05 c0       	rjmp	.+10     	; 0x1065c <open+0x4c>
   10652:	d1 fe       	sbrs	r13, 1
   10654:	02 c0       	rjmp	.+4      	; 0x1065a <open+0x4a>
   10656:	08 60       	ori	r16, 0x08	; 8
   10658:	01 c0       	rjmp	.+2      	; 0x1065c <open+0x4c>
   1065a:	00 61       	ori	r16, 0x10	; 16
   1065c:	94 df       	rcall	.-216    	; 0x10586 <new_file_descriptor>
   1065e:	3c 01       	movw	r6, r24
   10660:	6f d8       	rcall	.-3874   	; 0xf740 <fileno_to_stream>
   10662:	ec 01       	movw	r28, r24
   10664:	c3 01       	movw	r24, r6
   10666:	20 97       	sbiw	r28, 0x00	; 0
   10668:	09 f4       	brne	.+2      	; 0x1066c <open+0x5c>
   1066a:	48 c0       	rjmp	.+144    	; 0x106fc <open+0xec>
   1066c:	05 dd       	rcall	.-1526   	; 0x10078 <fileno_to_fatfs>
   1066e:	4c 01       	movw	r8, r24
   10670:	00 97       	sbiw	r24, 0x00	; 0
   10672:	59 f4       	brne	.+22     	; 0x1068a <open+0x7a>
   10674:	c3 01       	movw	r24, r6
   10676:	19 df       	rcall	.-462    	; 0x104aa <free_file_descriptor>
   10678:	89 e0       	ldi	r24, 0x09	; 9
   1067a:	90 e0       	ldi	r25, 0x00	; 0
   1067c:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   10680:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   10684:	8f ef       	ldi	r24, 0xFF	; 255
   10686:	9f ef       	ldi	r25, 0xFF	; 255
   10688:	5d c0       	rjmp	.+186    	; 0x10744 <open+0x134>
   1068a:	40 2f       	mov	r20, r16
   1068c:	b5 01       	movw	r22, r10
   1068e:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <f_open>
   10692:	00 97       	sbiw	r24, 0x00	; 0
   10694:	91 f0       	breq	.+36     	; 0x106ba <open+0xaa>
   10696:	84 31       	cpi	r24, 0x14	; 20
   10698:	91 05       	cpc	r25, r1
   1069a:	40 f4       	brcc	.+16     	; 0x106ac <open+0x9c>
   1069c:	fc 01       	movw	r30, r24
   1069e:	ec 5f       	subi	r30, 0xFC	; 252
   106a0:	f8 4f       	sbci	r31, 0xF8	; 248
   106a2:	80 81       	ld	r24, Z
   106a4:	08 2e       	mov	r0, r24
   106a6:	00 0c       	add	r0, r0
   106a8:	99 0b       	sbc	r25, r25
   106aa:	02 c0       	rjmp	.+4      	; 0x106b0 <open+0xa0>
   106ac:	83 e2       	ldi	r24, 0x23	; 35
   106ae:	90 e0       	ldi	r25, 0x00	; 0
   106b0:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   106b4:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   106b8:	20 c0       	rjmp	.+64     	; 0x106fa <open+0xea>
   106ba:	d2 fe       	sbrs	r13, 2
   106bc:	21 c0       	rjmp	.+66     	; 0x10700 <open+0xf0>
   106be:	f4 01       	movw	r30, r8
   106c0:	42 85       	ldd	r20, Z+10	; 0x0a
   106c2:	53 85       	ldd	r21, Z+11	; 0x0b
   106c4:	64 85       	ldd	r22, Z+12	; 0x0c
   106c6:	75 85       	ldd	r23, Z+13	; 0x0d
   106c8:	c4 01       	movw	r24, r8
   106ca:	0e 94 ef 5f 	call	0xbfde	; 0xbfde <f_lseek>
   106ce:	00 97       	sbiw	r24, 0x00	; 0
   106d0:	b9 f0       	breq	.+46     	; 0x10700 <open+0xf0>
   106d2:	84 31       	cpi	r24, 0x14	; 20
   106d4:	91 05       	cpc	r25, r1
   106d6:	40 f4       	brcc	.+16     	; 0x106e8 <open+0xd8>
   106d8:	fc 01       	movw	r30, r24
   106da:	ec 5f       	subi	r30, 0xFC	; 252
   106dc:	f8 4f       	sbci	r31, 0xF8	; 248
   106de:	80 81       	ld	r24, Z
   106e0:	08 2e       	mov	r0, r24
   106e2:	00 0c       	add	r0, r0
   106e4:	99 0b       	sbc	r25, r25
   106e6:	02 c0       	rjmp	.+4      	; 0x106ec <open+0xdc>
   106e8:	83 e2       	ldi	r24, 0x23	; 35
   106ea:	90 e0       	ldi	r25, 0x00	; 0
   106ec:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <errno+0x1>
   106f0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <errno>
   106f4:	c4 01       	movw	r24, r8
   106f6:	0e 94 47 5e 	call	0xbc8e	; 0xbc8e <f_close>
   106fa:	c3 01       	movw	r24, r6
   106fc:	d6 de       	rcall	.-596    	; 0x104aa <free_file_descriptor>
   106fe:	c2 cf       	rjmp	.-124    	; 0x10684 <open+0x74>
   10700:	f2 e0       	ldi	r31, 0x02	; 2
   10702:	ef 16       	cp	r14, r31
   10704:	f1 04       	cpc	r15, r1
   10706:	51 f4       	brne	.+20     	; 0x1071c <open+0x10c>
   10708:	8f e1       	ldi	r24, 0x1F	; 31
   1070a:	9a e7       	ldi	r25, 0x7A	; 122
   1070c:	99 87       	std	Y+9, r25	; 0x09
   1070e:	88 87       	std	Y+8, r24	; 0x08
   10710:	8c e9       	ldi	r24, 0x9C	; 156
   10712:	99 e7       	ldi	r25, 0x79	; 121
   10714:	9b 87       	std	Y+11, r25	; 0x0b
   10716:	8a 87       	std	Y+10, r24	; 0x0a
   10718:	83 e0       	ldi	r24, 0x03	; 3
   1071a:	12 c0       	rjmp	.+36     	; 0x10740 <open+0x130>
   1071c:	e1 14       	cp	r14, r1
   1071e:	f1 04       	cpc	r15, r1
   10720:	41 f4       	brne	.+16     	; 0x10732 <open+0x122>
   10722:	19 86       	std	Y+9, r1	; 0x09
   10724:	18 86       	std	Y+8, r1	; 0x08
   10726:	8c e9       	ldi	r24, 0x9C	; 156
   10728:	99 e7       	ldi	r25, 0x79	; 121
   1072a:	9b 87       	std	Y+11, r25	; 0x0b
   1072c:	8a 87       	std	Y+10, r24	; 0x0a
   1072e:	81 e0       	ldi	r24, 0x01	; 1
   10730:	07 c0       	rjmp	.+14     	; 0x10740 <open+0x130>
   10732:	8f e1       	ldi	r24, 0x1F	; 31
   10734:	9a e7       	ldi	r25, 0x7A	; 122
   10736:	99 87       	std	Y+9, r25	; 0x09
   10738:	88 87       	std	Y+8, r24	; 0x08
   1073a:	1b 86       	std	Y+11, r1	; 0x0b
   1073c:	1a 86       	std	Y+10, r1	; 0x0a
   1073e:	82 e0       	ldi	r24, 0x02	; 2
   10740:	8b 83       	std	Y+3, r24	; 0x03
   10742:	c3 01       	movw	r24, r6
   10744:	cd b7       	in	r28, 0x3d	; 61
   10746:	de b7       	in	r29, 0x3e	; 62
   10748:	ee e0       	ldi	r30, 0x0E	; 14
   1074a:	0c 94 25 ed 	jmp	0x1da4a	; 0x1da4a <__epilogue_restores__+0x8>

0001074e <posix_fopen_modes_to_open>:
   1074e:	cf 93       	push	r28
   10750:	df 93       	push	r29
   10752:	ec 01       	movw	r28, r24
   10754:	6b e2       	ldi	r22, 0x2B	; 43
   10756:	77 e0       	ldi	r23, 0x07	; 7
   10758:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   1075c:	00 97       	sbiw	r24, 0x00	; 0
   1075e:	09 f4       	brne	.+2      	; 0x10762 <posix_fopen_modes_to_open+0x14>
   10760:	5d c0       	rjmp	.+186    	; 0x1081c <posix_fopen_modes_to_open+0xce>
   10762:	60 e7       	ldi	r22, 0x70	; 112
   10764:	78 e0       	ldi	r23, 0x08	; 8
   10766:	ce 01       	movw	r24, r28
   10768:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   1076c:	00 97       	sbiw	r24, 0x00	; 0
   1076e:	09 f4       	brne	.+2      	; 0x10772 <posix_fopen_modes_to_open+0x24>
   10770:	55 c0       	rjmp	.+170    	; 0x1081c <posix_fopen_modes_to_open+0xce>
   10772:	63 e7       	ldi	r22, 0x73	; 115
   10774:	78 e0       	ldi	r23, 0x08	; 8
   10776:	ce 01       	movw	r24, r28
   10778:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   1077c:	89 2b       	or	r24, r25
   1077e:	09 f4       	brne	.+2      	; 0x10782 <posix_fopen_modes_to_open+0x34>
   10780:	42 c0       	rjmp	.+132    	; 0x10806 <posix_fopen_modes_to_open+0xb8>
   10782:	66 e7       	ldi	r22, 0x76	; 118
   10784:	78 e0       	ldi	r23, 0x08	; 8
   10786:	ce 01       	movw	r24, r28
   10788:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   1078c:	89 2b       	or	r24, r25
   1078e:	d9 f1       	breq	.+118    	; 0x10806 <posix_fopen_modes_to_open+0xb8>
   10790:	6a e7       	ldi	r22, 0x7A	; 122
   10792:	78 e0       	ldi	r23, 0x08	; 8
   10794:	ce 01       	movw	r24, r28
   10796:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   1079a:	89 2b       	or	r24, r25
   1079c:	a1 f1       	breq	.+104    	; 0x10806 <posix_fopen_modes_to_open+0xb8>
   1079e:	6f e2       	ldi	r22, 0x2F	; 47
   107a0:	7a e0       	ldi	r23, 0x0A	; 10
   107a2:	ce 01       	movw	r24, r28
   107a4:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   107a8:	89 2b       	or	r24, r25
   107aa:	81 f1       	breq	.+96     	; 0x1080c <posix_fopen_modes_to_open+0xbe>
   107ac:	6e e7       	ldi	r22, 0x7E	; 126
   107ae:	78 e0       	ldi	r23, 0x08	; 8
   107b0:	ce 01       	movw	r24, r28
   107b2:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   107b6:	89 2b       	or	r24, r25
   107b8:	49 f1       	breq	.+82     	; 0x1080c <posix_fopen_modes_to_open+0xbe>
   107ba:	61 e8       	ldi	r22, 0x81	; 129
   107bc:	78 e0       	ldi	r23, 0x08	; 8
   107be:	ce 01       	movw	r24, r28
   107c0:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   107c4:	89 2b       	or	r24, r25
   107c6:	29 f1       	breq	.+74     	; 0x10812 <posix_fopen_modes_to_open+0xc4>
   107c8:	64 e8       	ldi	r22, 0x84	; 132
   107ca:	78 e0       	ldi	r23, 0x08	; 8
   107cc:	ce 01       	movw	r24, r28
   107ce:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   107d2:	89 2b       	or	r24, r25
   107d4:	f1 f0       	breq	.+60     	; 0x10812 <posix_fopen_modes_to_open+0xc4>
   107d6:	68 e8       	ldi	r22, 0x88	; 136
   107d8:	78 e0       	ldi	r23, 0x08	; 8
   107da:	ce 01       	movw	r24, r28
   107dc:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   107e0:	89 2b       	or	r24, r25
   107e2:	b9 f0       	breq	.+46     	; 0x10812 <posix_fopen_modes_to_open+0xc4>
   107e4:	6c e8       	ldi	r22, 0x8C	; 140
   107e6:	70 e1       	ldi	r23, 0x10	; 16
   107e8:	ce 01       	movw	r24, r28
   107ea:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   107ee:	89 2b       	or	r24, r25
   107f0:	99 f0       	breq	.+38     	; 0x10818 <posix_fopen_modes_to_open+0xca>
   107f2:	6c e8       	ldi	r22, 0x8C	; 140
   107f4:	78 e0       	ldi	r23, 0x08	; 8
   107f6:	ce 01       	movw	r24, r28
   107f8:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcmp>
   107fc:	89 2b       	or	r24, r25
   107fe:	61 f0       	breq	.+24     	; 0x10818 <posix_fopen_modes_to_open+0xca>
   10800:	8f ef       	ldi	r24, 0xFF	; 255
   10802:	9f ef       	ldi	r25, 0xFF	; 255
   10804:	0b c0       	rjmp	.+22     	; 0x1081c <posix_fopen_modes_to_open+0xce>
   10806:	82 e0       	ldi	r24, 0x02	; 2
   10808:	92 e0       	ldi	r25, 0x02	; 2
   1080a:	08 c0       	rjmp	.+16     	; 0x1081c <posix_fopen_modes_to_open+0xce>
   1080c:	81 e4       	ldi	r24, 0x41	; 65
   1080e:	92 e0       	ldi	r25, 0x02	; 2
   10810:	05 c0       	rjmp	.+10     	; 0x1081c <posix_fopen_modes_to_open+0xce>
   10812:	82 e4       	ldi	r24, 0x42	; 66
   10814:	92 e0       	ldi	r25, 0x02	; 2
   10816:	02 c0       	rjmp	.+4      	; 0x1081c <posix_fopen_modes_to_open+0xce>
   10818:	81 e4       	ldi	r24, 0x41	; 65
   1081a:	94 e0       	ldi	r25, 0x04	; 4
   1081c:	df 91       	pop	r29
   1081e:	cf 91       	pop	r28
   10820:	08 95       	ret

00010822 <fopen>:
   10822:	cf 93       	push	r28
   10824:	df 93       	push	r29
   10826:	ec 01       	movw	r28, r24
   10828:	cb 01       	movw	r24, r22
   1082a:	91 df       	rcall	.-222    	; 0x1074e <posix_fopen_modes_to_open>
   1082c:	bc 01       	movw	r22, r24
   1082e:	ce 01       	movw	r24, r28
   10830:	ef de       	rcall	.-546    	; 0x10610 <open>
   10832:	0e 94 a0 7b 	call	0xf740	; 0xf740 <fileno_to_stream>
   10836:	df 91       	pop	r29
   10838:	cf 91       	pop	r28
   1083a:	08 95       	ret

0001083c <fprintf>:
   1083c:	a8 e0       	ldi	r26, 0x08	; 8
   1083e:	b0 e0       	ldi	r27, 0x00	; 0
   10840:	e4 e2       	ldi	r30, 0x24	; 36
   10842:	f4 e8       	ldi	r31, 0x84	; 132
   10844:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   10848:	88 e0       	ldi	r24, 0x08	; 8
   1084a:	9b e7       	ldi	r25, 0x7B	; 123
   1084c:	9a 83       	std	Y+2, r25	; 0x02
   1084e:	89 83       	std	Y+1, r24	; 0x01
   10850:	18 86       	std	Y+8, r1	; 0x08
   10852:	1f 82       	std	Y+7, r1	; 0x07
   10854:	8d 85       	ldd	r24, Y+13	; 0x0d
   10856:	9e 85       	ldd	r25, Y+14	; 0x0e
   10858:	9c 83       	std	Y+4, r25	; 0x04
   1085a:	8b 83       	std	Y+3, r24	; 0x03
   1085c:	4f 85       	ldd	r20, Y+15	; 0x0f
   1085e:	58 89       	ldd	r21, Y+16	; 0x10
   10860:	60 e8       	ldi	r22, 0x80	; 128
   10862:	9e 01       	movw	r18, r28
   10864:	2f 5e       	subi	r18, 0xEF	; 239
   10866:	3f 4f       	sbci	r19, 0xFF	; 255
   10868:	ce 01       	movw	r24, r28
   1086a:	01 96       	adiw	r24, 0x01	; 1
   1086c:	0e 94 99 42 	call	0x8532	; 0x8532 <_printf_fn>
   10870:	8f 81       	ldd	r24, Y+7	; 0x07
   10872:	98 85       	ldd	r25, Y+8	; 0x08
   10874:	28 96       	adiw	r28, 0x08	; 8
   10876:	e2 e0       	ldi	r30, 0x02	; 2
   10878:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

0001087c <posix_help>:
   1087c:	cf 93       	push	r28
   1087e:	df 93       	push	r29
   10880:	ec 01       	movw	r28, r24
   10882:	85 e9       	ldi	r24, 0x95	; 149
   10884:	9f e0       	ldi	r25, 0x0F	; 15
   10886:	1f 92       	push	r1
   10888:	9f 93       	push	r25
   1088a:	8f 93       	push	r24
   1088c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10890:	0f 90       	pop	r0
   10892:	0f 90       	pop	r0
   10894:	0f 90       	pop	r0
   10896:	cd 2b       	or	r28, r29
   10898:	51 f0       	breq	.+20     	; 0x108ae <posix_help+0x32>
   1089a:	8e e5       	ldi	r24, 0x5E	; 94
   1089c:	9e e0       	ldi	r25, 0x0E	; 14
   1089e:	1f 92       	push	r1
   108a0:	9f 93       	push	r25
   108a2:	8f 93       	push	r24
   108a4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   108a8:	0f 90       	pop	r0
   108aa:	0f 90       	pop	r0
   108ac:	0f 90       	pop	r0
   108ae:	df 91       	pop	r29
   108b0:	cf 91       	pop	r28
   108b2:	08 95       	ret

000108b4 <copy>:
   108b4:	4f 92       	push	r4
   108b6:	5f 92       	push	r5
   108b8:	6f 92       	push	r6
   108ba:	8f 92       	push	r8
   108bc:	9f 92       	push	r9
   108be:	af 92       	push	r10
   108c0:	bf 92       	push	r11
   108c2:	cf 92       	push	r12
   108c4:	df 92       	push	r13
   108c6:	ef 92       	push	r14
   108c8:	ff 92       	push	r15
   108ca:	0f 93       	push	r16
   108cc:	1f 93       	push	r17
   108ce:	cf 93       	push	r28
   108d0:	df 93       	push	r29
   108d2:	18 2f       	mov	r17, r24
   108d4:	09 2f       	mov	r16, r25
   108d6:	eb 01       	movw	r28, r22
   108d8:	9f 93       	push	r25
   108da:	8f 93       	push	r24
   108dc:	81 e3       	ldi	r24, 0x31	; 49
   108de:	9e e0       	ldi	r25, 0x0E	; 14
   108e0:	1f 92       	push	r1
   108e2:	9f 93       	push	r25
   108e4:	8f 93       	push	r24
   108e6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   108ea:	60 e7       	ldi	r22, 0x70	; 112
   108ec:	78 e0       	ldi	r23, 0x08	; 8
   108ee:	81 2f       	mov	r24, r17
   108f0:	90 2f       	mov	r25, r16
   108f2:	97 df       	rcall	.-210    	; 0x10822 <fopen>
   108f4:	7c 01       	movw	r14, r24
   108f6:	0f 90       	pop	r0
   108f8:	0f 90       	pop	r0
   108fa:	0f 90       	pop	r0
   108fc:	0f 90       	pop	r0
   108fe:	0f 90       	pop	r0
   10900:	89 2b       	or	r24, r25
   10902:	51 f4       	brne	.+20     	; 0x10918 <copy+0x64>
   10904:	0f 93       	push	r16
   10906:	1f 93       	push	r17
   10908:	81 e2       	ldi	r24, 0x21	; 33
   1090a:	9e e0       	ldi	r25, 0x0E	; 14
   1090c:	1f 92       	push	r1
   1090e:	9f 93       	push	r25
   10910:	8f 93       	push	r24
   10912:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10916:	21 c0       	rjmp	.+66     	; 0x1095a <copy+0xa6>
   10918:	df 93       	push	r29
   1091a:	cf 93       	push	r28
   1091c:	84 e1       	ldi	r24, 0x14	; 20
   1091e:	9e e0       	ldi	r25, 0x0E	; 14
   10920:	1f 92       	push	r1
   10922:	9f 93       	push	r25
   10924:	8f 93       	push	r24
   10926:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1092a:	6e e7       	ldi	r22, 0x7E	; 126
   1092c:	78 e0       	ldi	r23, 0x08	; 8
   1092e:	ce 01       	movw	r24, r28
   10930:	78 df       	rcall	.-272    	; 0x10822 <fopen>
   10932:	8c 01       	movw	r16, r24
   10934:	0f 90       	pop	r0
   10936:	0f 90       	pop	r0
   10938:	0f 90       	pop	r0
   1093a:	0f 90       	pop	r0
   1093c:	0f 90       	pop	r0
   1093e:	89 2b       	or	r24, r25
   10940:	b1 f4       	brne	.+44     	; 0x1096e <copy+0xba>
   10942:	df 93       	push	r29
   10944:	cf 93       	push	r28
   10946:	84 e0       	ldi	r24, 0x04	; 4
   10948:	9e e0       	ldi	r25, 0x0E	; 14
   1094a:	1f 92       	push	r1
   1094c:	9f 93       	push	r25
   1094e:	8f 93       	push	r24
   10950:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10954:	80 e0       	ldi	r24, 0x00	; 0
   10956:	90 e0       	ldi	r25, 0x00	; 0
   10958:	0e de       	rcall	.-996    	; 0x10576 <fclose>
   1095a:	0f 90       	pop	r0
   1095c:	0f 90       	pop	r0
   1095e:	0f 90       	pop	r0
   10960:	0f 90       	pop	r0
   10962:	0f 90       	pop	r0
   10964:	60 e0       	ldi	r22, 0x00	; 0
   10966:	70 e0       	ldi	r23, 0x00	; 0
   10968:	80 e0       	ldi	r24, 0x00	; 0
   1096a:	90 e0       	ldi	r25, 0x00	; 0
   1096c:	73 c0       	rjmp	.+230    	; 0x10a54 <copy+0x1a0>
   1096e:	61 e0       	ldi	r22, 0x01	; 1
   10970:	70 e0       	ldi	r23, 0x00	; 0
   10972:	80 e0       	ldi	r24, 0x00	; 0
   10974:	92 e0       	ldi	r25, 0x02	; 2
   10976:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   1097a:	6c 01       	movw	r12, r24
   1097c:	89 2b       	or	r24, r25
   1097e:	29 f4       	brne	.+10     	; 0x1098a <copy+0xd6>
   10980:	c7 01       	movw	r24, r14
   10982:	f9 dd       	rcall	.-1038   	; 0x10576 <fclose>
   10984:	c8 01       	movw	r24, r16
   10986:	f7 dd       	rcall	.-1042   	; 0x10576 <fclose>
   10988:	ed cf       	rjmp	.-38     	; 0x10964 <copy+0xb0>
   1098a:	87 ef       	ldi	r24, 0xF7	; 247
   1098c:	9d e0       	ldi	r25, 0x0D	; 13
   1098e:	1f 92       	push	r1
   10990:	9f 93       	push	r25
   10992:	8f 93       	push	r24
   10994:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10998:	0f 90       	pop	r0
   1099a:	0f 90       	pop	r0
   1099c:	0f 90       	pop	r0
   1099e:	81 2c       	mov	r8, r1
   109a0:	91 2c       	mov	r9, r1
   109a2:	54 01       	movw	r10, r8
   109a4:	8b ed       	ldi	r24, 0xDB	; 219
   109a6:	9d e0       	ldi	r25, 0x0D	; 13
   109a8:	2c 01       	movw	r4, r24
   109aa:	97 01       	movw	r18, r14
   109ac:	40 e0       	ldi	r20, 0x00	; 0
   109ae:	52 e0       	ldi	r21, 0x02	; 2
   109b0:	61 e0       	ldi	r22, 0x01	; 1
   109b2:	70 e0       	ldi	r23, 0x00	; 0
   109b4:	c6 01       	movw	r24, r12
   109b6:	8b dc       	rcall	.-1770   	; 0x102ce <fread>
   109b8:	ec 01       	movw	r28, r24
   109ba:	18 16       	cp	r1, r24
   109bc:	19 06       	cpc	r1, r25
   109be:	74 f5       	brge	.+92     	; 0x10a1c <copy+0x168>
   109c0:	98 01       	movw	r18, r16
   109c2:	ae 01       	movw	r20, r28
   109c4:	61 e0       	ldi	r22, 0x01	; 1
   109c6:	70 e0       	ldi	r23, 0x00	; 0
   109c8:	c6 01       	movw	r24, r12
   109ca:	53 dd       	rcall	.-1370   	; 0x10472 <fwrite>
   109cc:	8c 17       	cp	r24, r28
   109ce:	9d 07       	cpc	r25, r29
   109d0:	5c f4       	brge	.+22     	; 0x109e8 <copy+0x134>
   109d2:	8a ee       	ldi	r24, 0xEA	; 234
   109d4:	9d e0       	ldi	r25, 0x0D	; 13
   109d6:	1f 92       	push	r1
   109d8:	9f 93       	push	r25
   109da:	8f 93       	push	r24
   109dc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   109e0:	0f 90       	pop	r0
   109e2:	0f 90       	pop	r0
   109e4:	0f 90       	pop	r0
   109e6:	1a c0       	rjmp	.+52     	; 0x10a1c <copy+0x168>
   109e8:	ce 01       	movw	r24, r28
   109ea:	dd 0f       	add	r29, r29
   109ec:	aa 0b       	sbc	r26, r26
   109ee:	bb 0b       	sbc	r27, r27
   109f0:	88 0e       	add	r8, r24
   109f2:	99 1e       	adc	r9, r25
   109f4:	aa 1e       	adc	r10, r26
   109f6:	bb 1e       	adc	r11, r27
   109f8:	bf 92       	push	r11
   109fa:	af 92       	push	r10
   109fc:	9f 92       	push	r9
   109fe:	8f 92       	push	r8
   10a00:	1f 92       	push	r1
   10a02:	5f 92       	push	r5
   10a04:	4f 92       	push	r4
   10a06:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10a0a:	8d b7       	in	r24, 0x3d	; 61
   10a0c:	9e b7       	in	r25, 0x3e	; 62
   10a0e:	07 96       	adiw	r24, 0x07	; 7
   10a10:	0f b6       	in	r0, 0x3f	; 63
   10a12:	f8 94       	cli
   10a14:	9e bf       	out	0x3e, r25	; 62
   10a16:	0f be       	out	0x3f, r0	; 63
   10a18:	8d bf       	out	0x3d, r24	; 61
   10a1a:	c7 cf       	rjmp	.-114    	; 0x109aa <copy+0xf6>
   10a1c:	bf 92       	push	r11
   10a1e:	af 92       	push	r10
   10a20:	9f 92       	push	r9
   10a22:	8f 92       	push	r8
   10a24:	88 ec       	ldi	r24, 0xC8	; 200
   10a26:	9d e0       	ldi	r25, 0x0D	; 13
   10a28:	1f 92       	push	r1
   10a2a:	9f 93       	push	r25
   10a2c:	8f 93       	push	r24
   10a2e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10a32:	c6 01       	movw	r24, r12
   10a34:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
   10a38:	c7 01       	movw	r24, r14
   10a3a:	9d dd       	rcall	.-1222   	; 0x10576 <fclose>
   10a3c:	c8 01       	movw	r24, r16
   10a3e:	9b dd       	rcall	.-1226   	; 0x10576 <fclose>
   10a40:	8d b7       	in	r24, 0x3d	; 61
   10a42:	9e b7       	in	r25, 0x3e	; 62
   10a44:	07 96       	adiw	r24, 0x07	; 7
   10a46:	0f b6       	in	r0, 0x3f	; 63
   10a48:	f8 94       	cli
   10a4a:	9e bf       	out	0x3e, r25	; 62
   10a4c:	0f be       	out	0x3f, r0	; 63
   10a4e:	8d bf       	out	0x3d, r24	; 61
   10a50:	b4 01       	movw	r22, r8
   10a52:	c5 01       	movw	r24, r10
   10a54:	df 91       	pop	r29
   10a56:	cf 91       	pop	r28
   10a58:	1f 91       	pop	r17
   10a5a:	0f 91       	pop	r16
   10a5c:	ff 90       	pop	r15
   10a5e:	ef 90       	pop	r14
   10a60:	df 90       	pop	r13
   10a62:	cf 90       	pop	r12
   10a64:	bf 90       	pop	r11
   10a66:	af 90       	pop	r10
   10a68:	9f 90       	pop	r9
   10a6a:	8f 90       	pop	r8
   10a6c:	6f 90       	pop	r6
   10a6e:	5f 90       	pop	r5
   10a70:	4f 90       	pop	r4
   10a72:	08 95       	ret

00010a74 <testpage>:
   10a74:	cf 93       	push	r28
   10a76:	df 93       	push	r29
   10a78:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
   10a7c:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
   10a80:	82 17       	cp	r24, r18
   10a82:	93 07       	cpc	r25, r19
   10a84:	3c f1       	brlt	.+78     	; 0x10ad4 <testpage+0x60>
   10a86:	87 e9       	ldi	r24, 0x97	; 151
   10a88:	9d e0       	ldi	r25, 0x0D	; 13
   10a8a:	1f 92       	push	r1
   10a8c:	9f 93       	push	r25
   10a8e:	8f 93       	push	r24
   10a90:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10a94:	0e 94 15 7b 	call	0xf62a	; 0xf62a <getchar>
   10a98:	ec 01       	movw	r28, r24
   10a9a:	85 e9       	ldi	r24, 0x95	; 149
   10a9c:	9d e0       	ldi	r25, 0x0D	; 13
   10a9e:	1f 92       	push	r1
   10aa0:	9f 93       	push	r25
   10aa2:	8f 93       	push	r24
   10aa4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10aa8:	0f 90       	pop	r0
   10aaa:	0f 90       	pop	r0
   10aac:	0f 90       	pop	r0
   10aae:	0f 90       	pop	r0
   10ab0:	0f 90       	pop	r0
   10ab2:	0f 90       	pop	r0
   10ab4:	c1 37       	cpi	r28, 0x71	; 113
   10ab6:	d1 05       	cpc	r29, r1
   10ab8:	41 f0       	breq	.+16     	; 0x10aca <testpage+0x56>
   10aba:	2a 97       	sbiw	r28, 0x0a	; 10
   10abc:	49 f4       	brne	.+18     	; 0x10ad0 <testpage+0x5c>
   10abe:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
   10ac2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
   10ac6:	01 97       	sbiw	r24, 0x01	; 1
   10ac8:	05 c0       	rjmp	.+10     	; 0x10ad4 <testpage+0x60>
   10aca:	8f ef       	ldi	r24, 0xFF	; 255
   10acc:	9f ef       	ldi	r25, 0xFF	; 255
   10ace:	02 c0       	rjmp	.+4      	; 0x10ad4 <testpage+0x60>
   10ad0:	80 e0       	ldi	r24, 0x00	; 0
   10ad2:	90 e0       	ldi	r25, 0x00	; 0
   10ad4:	df 91       	pop	r29
   10ad6:	cf 91       	pop	r28
   10ad8:	08 95       	ret

00010ada <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   10ada:	a0 e0       	ldi	r26, 0x00	; 0
   10adc:	b1 e0       	ldi	r27, 0x01	; 1
   10ade:	e3 e7       	ldi	r30, 0x73	; 115
   10ae0:	f5 e8       	ldi	r31, 0x85	; 133
   10ae2:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   10ae6:	18 2f       	mov	r17, r24
   10ae8:	09 2f       	mov	r16, r25
   10aea:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   10aec:	60 e7       	ldi	r22, 0x70	; 112
   10aee:	78 e0       	ldi	r23, 0x08	; 8
   10af0:	98 de       	rcall	.-720    	; 0x10822 <fopen>
   10af2:	7c 01       	movw	r14, r24
    if (!fp)
   10af4:	89 2b       	or	r24, r25
   10af6:	41 f0       	breq	.+16     	; 0x10b08 <cat+0x2e>
   10af8:	c1 2c       	mov	r12, r1
   10afa:	d1 2c       	mov	r13, r1
   10afc:	a1 2c       	mov	r10, r1
   10afe:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10b00:	8e 01       	movw	r16, r28
   10b02:	0f 5f       	subi	r16, 0xFF	; 255
   10b04:	1f 4f       	sbci	r17, 0xFF	; 255
   10b06:	24 c0       	rjmp	.+72     	; 0x10b50 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10b08:	0f 93       	push	r16
   10b0a:	1f 93       	push	r17
   10b0c:	8a e4       	ldi	r24, 0x4A	; 74
   10b0e:	9e e0       	ldi	r25, 0x0E	; 14
   10b10:	1f 92       	push	r1
   10b12:	9f 93       	push	r25
   10b14:	8f 93       	push	r24
   10b16:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0);
   10b1a:	0f 90       	pop	r0
   10b1c:	0f 90       	pop	r0
   10b1e:	0f 90       	pop	r0
   10b20:	0f 90       	pop	r0
   10b22:	0f 90       	pop	r0
   10b24:	c1 2c       	mov	r12, r1
   10b26:	d1 2c       	mov	r13, r1
   10b28:	76 01       	movw	r14, r12
   10b2a:	3e c0       	rjmp	.+124    	; 0x10ba8 <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10b2c:	c8 01       	movw	r24, r16
   10b2e:	0e 94 a8 32 	call	0x6550	; 0x6550 <trim_tail>
        size += strlen(line);
   10b32:	f8 01       	movw	r30, r16
   10b34:	01 90       	ld	r0, Z+
   10b36:	00 20       	and	r0, r0
   10b38:	e9 f7       	brne	.-6      	; 0x10b34 <cat+0x5a>
   10b3a:	31 97       	sbiw	r30, 0x01	; 1
   10b3c:	e0 1b       	sub	r30, r16
   10b3e:	f1 0b       	sbc	r31, r17
   10b40:	ce 0e       	add	r12, r30
   10b42:	df 1e       	adc	r13, r31
        puts(line);
   10b44:	c8 01       	movw	r24, r16
   10b46:	0e 94 6d 7b 	call	0xf6da	; 0xf6da <puts>
        if(dopage)
   10b4a:	81 14       	cp	r8, r1
   10b4c:	91 04       	cpc	r9, r1
   10b4e:	49 f4       	brne	.+18     	; 0x10b62 <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10b50:	a7 01       	movw	r20, r14
   10b52:	6e ef       	ldi	r22, 0xFE	; 254
   10b54:	70 e0       	ldi	r23, 0x00	; 0
   10b56:	c8 01       	movw	r24, r16
   10b58:	0e 94 21 7b 	call	0xf642	; 0xf642 <fgets>
   10b5c:	89 2b       	or	r24, r25
   10b5e:	31 f7       	brne	.-52     	; 0x10b2c <cat+0x52>
   10b60:	06 c0       	rjmp	.+12     	; 0x10b6e <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10b62:	c5 01       	movw	r24, r10
   10b64:	01 96       	adiw	r24, 0x01	; 1
   10b66:	86 df       	rcall	.-244    	; 0x10a74 <testpage>
   10b68:	5c 01       	movw	r10, r24
            if(count < 0)
   10b6a:	97 ff       	sbrs	r25, 7
   10b6c:	f1 cf       	rjmp	.-30     	; 0x10b50 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10b6e:	88 e4       	ldi	r24, 0x48	; 72
   10b70:	9e e0       	ldi	r25, 0x0E	; 14
   10b72:	1f 92       	push	r1
   10b74:	9f 93       	push	r25
   10b76:	8f 93       	push	r24
   10b78:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    fclose(fp);
   10b7c:	c7 01       	movw	r24, r14
   10b7e:	fb dc       	rcall	.-1546   	; 0x10576 <fclose>
    printf("%ld bytes\n", (long)size);
   10b80:	0d 2c       	mov	r0, r13
   10b82:	00 0c       	add	r0, r0
   10b84:	ee 08       	sbc	r14, r14
   10b86:	ff 08       	sbc	r15, r15
   10b88:	ff 92       	push	r15
   10b8a:	ef 92       	push	r14
   10b8c:	df 92       	push	r13
   10b8e:	cf 92       	push	r12
   10b90:	8d e3       	ldi	r24, 0x3D	; 61
   10b92:	9e e0       	ldi	r25, 0x0E	; 14
   10b94:	1f 92       	push	r1
   10b96:	9f 93       	push	r25
   10b98:	8f 93       	push	r24
   10b9a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    return(size);
   10b9e:	0f b6       	in	r0, 0x3f	; 63
   10ba0:	f8 94       	cli
   10ba2:	de bf       	out	0x3e, r29	; 62
   10ba4:	0f be       	out	0x3f, r0	; 63
   10ba6:	cd bf       	out	0x3d, r28	; 61
}
   10ba8:	c7 01       	movw	r24, r14
   10baa:	b6 01       	movw	r22, r12
   10bac:	d3 95       	inc	r29
   10bae:	ec e0       	ldi	r30, 0x0C	; 12
   10bb0:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

00010bb4 <hexdump>:
/// @brief hex listing of file with paging, "q" exits
/// @param[in] *name: file to hexdump
/// @retrun void
MEMSPACE
int hexdump(char *name, int dopage)
{
   10bb4:	2f 92       	push	r2
   10bb6:	3f 92       	push	r3
   10bb8:	4f 92       	push	r4
   10bba:	5f 92       	push	r5
   10bbc:	6f 92       	push	r6
   10bbe:	7f 92       	push	r7
   10bc0:	8f 92       	push	r8
   10bc2:	af 92       	push	r10
   10bc4:	bf 92       	push	r11
   10bc6:	cf 92       	push	r12
   10bc8:	df 92       	push	r13
   10bca:	ef 92       	push	r14
   10bcc:	ff 92       	push	r15
   10bce:	0f 93       	push	r16
   10bd0:	1f 93       	push	r17
   10bd2:	cf 93       	push	r28
   10bd4:	df 93       	push	r29
   10bd6:	cd b7       	in	r28, 0x3d	; 61
   10bd8:	de b7       	in	r29, 0x3e	; 62
   10bda:	e0 97       	sbiw	r28, 0x30	; 48
   10bdc:	0f b6       	in	r0, 0x3f	; 63
   10bde:	f8 94       	cli
   10be0:	de bf       	out	0x3e, r29	; 62
   10be2:	0f be       	out	0x3f, r0	; 63
   10be4:	cd bf       	out	0x3d, r28	; 61
   10be6:	18 2f       	mov	r17, r24
   10be8:	09 2f       	mov	r16, r25
   10bea:	78 ab       	std	Y+48, r23	; 0x30
   10bec:	6f a7       	std	Y+47, r22	; 0x2f
    int i,len,count;

    FILE *fi;
    char buf[0x20];

    fi=fopen(name,"rb");
   10bee:	60 e7       	ldi	r22, 0x70	; 112
   10bf0:	78 e0       	ldi	r23, 0x08	; 8
   10bf2:	17 de       	rcall	.-978    	; 0x10822 <fopen>
   10bf4:	9a a3       	std	Y+34, r25	; 0x22
   10bf6:	89 a3       	std	Y+33, r24	; 0x21
    if(fi == NULL) 
   10bf8:	89 2b       	or	r24, r25
   10bfa:	49 f1       	breq	.+82     	; 0x10c4e <hexdump+0x9a>
   10bfc:	21 2c       	mov	r2, r1
   10bfe:	31 2c       	mov	r3, r1
   10c00:	c1 2c       	mov	r12, r1
   10c02:	d1 2c       	mov	r13, r1
   10c04:	76 01       	movw	r14, r12
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10c06:	9e 01       	movw	r18, r28
   10c08:	2f 5f       	subi	r18, 0xFF	; 255
   10c0a:	3f 4f       	sbci	r19, 0xFF	; 255
   10c0c:	29 01       	movw	r4, r18
    {
        printf("%08lx : ", addr);
   10c0e:	80 eb       	ldi	r24, 0xB0	; 176
   10c10:	9d e0       	ldi	r25, 0x0D	; 13
   10c12:	9c 01       	movw	r18, r24
   10c14:	40 e0       	ldi	r20, 0x00	; 0
   10c16:	2b a3       	std	Y+35, r18	; 0x23
   10c18:	3c a3       	std	Y+36, r19	; 0x24
   10c1a:	4d a3       	std	Y+37, r20	; 0x25

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10c1c:	8a ea       	ldi	r24, 0xAA	; 170
   10c1e:	9d e0       	ldi	r25, 0x0D	; 13
   10c20:	9c 01       	movw	r18, r24
   10c22:	40 e0       	ldi	r20, 0x00	; 0
   10c24:	2e a3       	std	Y+38, r18	; 0x26
   10c26:	3f a3       	std	Y+39, r19	; 0x27
   10c28:	48 a7       	std	Y+40, r20	; 0x28
        for(;i<16;++i) 
            printf("   ");
   10c2a:	86 ea       	ldi	r24, 0xA6	; 166
   10c2c:	9d e0       	ldi	r25, 0x0D	; 13
   10c2e:	9c 01       	movw	r18, r24
   10c30:	40 e0       	ldi	r20, 0x00	; 0
   10c32:	29 a7       	std	Y+41, r18	; 0x29
   10c34:	3a a7       	std	Y+42, r19	; 0x2a
   10c36:	4b a7       	std	Y+43, r20	; 0x2b

        printf(" : ");
   10c38:	82 ea       	ldi	r24, 0xA2	; 162
   10c3a:	9d e0       	ldi	r25, 0x0D	; 13
   10c3c:	9c 01       	movw	r18, r24
   10c3e:	40 e0       	ldi	r20, 0x00	; 0
   10c40:	2c a7       	std	Y+44, r18	; 0x2c
   10c42:	3d a7       	std	Y+45, r19	; 0x2d
   10c44:	4e a7       	std	Y+46, r20	; 0x2e
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   10c46:	80 ea       	ldi	r24, 0xA0	; 160
   10c48:	9d e0       	ldi	r25, 0x0D	; 13
   10c4a:	3c 01       	movw	r6, r24
   10c4c:	26 c0       	rjmp	.+76     	; 0x10c9a <hexdump+0xe6>
    char buf[0x20];

    fi=fopen(name,"rb");
    if(fi == NULL) 
    {
        printf("Can' open: %s\n", name);
   10c4e:	0f 93       	push	r16
   10c50:	1f 93       	push	r17
   10c52:	89 eb       	ldi	r24, 0xB9	; 185
   10c54:	9d e0       	ldi	r25, 0x0D	; 13
   10c56:	1f 92       	push	r1
   10c58:	9f 93       	push	r25
   10c5a:	8f 93       	push	r24
   10c5c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0);
   10c60:	0f 90       	pop	r0
   10c62:	0f 90       	pop	r0
   10c64:	0f 90       	pop	r0
   10c66:	0f 90       	pop	r0
   10c68:	0f 90       	pop	r0
   10c6a:	80 e0       	ldi	r24, 0x00	; 0
   10c6c:	90 e0       	ldi	r25, 0x00	; 0
   10c6e:	9e c0       	rjmp	.+316    	; 0x10dac <hexdump+0x1f8>
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   10c70:	1f 92       	push	r1
   10c72:	7f 92       	push	r7
   10c74:	6f 92       	push	r6
   10c76:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        addr += len;
   10c7a:	01 2e       	mov	r0, r17
   10c7c:	00 0c       	add	r0, r0
   10c7e:	22 0b       	sbc	r18, r18
   10c80:	33 0b       	sbc	r19, r19
   10c82:	c0 0e       	add	r12, r16
   10c84:	d1 1e       	adc	r13, r17
   10c86:	e2 1e       	adc	r14, r18
   10c88:	f3 1e       	adc	r15, r19
        if(dopage)
   10c8a:	0f 90       	pop	r0
   10c8c:	0f 90       	pop	r0
   10c8e:	0f 90       	pop	r0
   10c90:	8f a5       	ldd	r24, Y+47	; 0x2f
   10c92:	98 a9       	ldd	r25, Y+48	; 0x30
   10c94:	89 2b       	or	r24, r25
   10c96:	09 f0       	breq	.+2      	; 0x10c9a <hexdump+0xe6>
   10c98:	74 c0       	rjmp	.+232    	; 0x10d82 <hexdump+0x1ce>
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10c9a:	29 a1       	ldd	r18, Y+33	; 0x21
   10c9c:	3a a1       	ldd	r19, Y+34	; 0x22
   10c9e:	40 e1       	ldi	r20, 0x10	; 16
   10ca0:	50 e0       	ldi	r21, 0x00	; 0
   10ca2:	61 e0       	ldi	r22, 0x01	; 1
   10ca4:	70 e0       	ldi	r23, 0x00	; 0
   10ca6:	c2 01       	movw	r24, r4
   10ca8:	12 db       	rcall	.-2524   	; 0x102ce <fread>
   10caa:	8c 01       	movw	r16, r24
   10cac:	18 16       	cp	r1, r24
   10cae:	19 06       	cpc	r1, r25
   10cb0:	0c f0       	brlt	.+2      	; 0x10cb4 <hexdump+0x100>
   10cb2:	6d c0       	rjmp	.+218    	; 0x10d8e <hexdump+0x1da>
    {
        printf("%08lx : ", addr);
   10cb4:	ff 92       	push	r15
   10cb6:	ef 92       	push	r14
   10cb8:	df 92       	push	r13
   10cba:	cf 92       	push	r12
   10cbc:	1f 92       	push	r1
   10cbe:	3c a1       	ldd	r19, Y+36	; 0x24
   10cc0:	3f 93       	push	r19
   10cc2:	4b a1       	ldd	r20, Y+35	; 0x23
   10cc4:	4f 93       	push	r20
   10cc6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10cca:	0f b6       	in	r0, 0x3f	; 63
   10ccc:	f8 94       	cli
   10cce:	de bf       	out	0x3e, r29	; 62
   10cd0:	0f be       	out	0x3f, r0	; 63
   10cd2:	cd bf       	out	0x3d, r28	; 61
   10cd4:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10cd6:	f5 01       	movw	r30, r10
   10cd8:	81 91       	ld	r24, Z+
   10cda:	5f 01       	movw	r10, r30
   10cdc:	1f 92       	push	r1
   10cde:	8f 93       	push	r24
   10ce0:	1f 92       	push	r1
   10ce2:	ff a1       	ldd	r31, Y+39	; 0x27
   10ce4:	ff 93       	push	r31
   10ce6:	2e a1       	ldd	r18, Y+38	; 0x26
   10ce8:	2f 93       	push	r18
   10cea:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
   10cee:	c5 01       	movw	r24, r10
   10cf0:	84 19       	sub	r24, r4
   10cf2:	95 09       	sbc	r25, r5
   10cf4:	0f 90       	pop	r0
   10cf6:	0f 90       	pop	r0
   10cf8:	0f 90       	pop	r0
   10cfa:	0f 90       	pop	r0
   10cfc:	0f 90       	pop	r0
   10cfe:	80 17       	cp	r24, r16
   10d00:	91 07       	cpc	r25, r17
   10d02:	4c f3       	brlt	.-46     	; 0x10cd6 <hexdump+0x122>
   10d04:	58 01       	movw	r10, r16
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10d06:	90 e1       	ldi	r25, 0x10	; 16
   10d08:	a9 16       	cp	r10, r25
   10d0a:	b1 04       	cpc	r11, r1
   10d0c:	74 f4       	brge	.+28     	; 0x10d2a <hexdump+0x176>
            printf("   ");
   10d0e:	1f 92       	push	r1
   10d10:	3a a5       	ldd	r19, Y+42	; 0x2a
   10d12:	3f 93       	push	r19
   10d14:	49 a5       	ldd	r20, Y+41	; 0x29
   10d16:	4f 93       	push	r20
   10d18:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10d1c:	8f ef       	ldi	r24, 0xFF	; 255
   10d1e:	a8 1a       	sub	r10, r24
   10d20:	b8 0a       	sbc	r11, r24
   10d22:	0f 90       	pop	r0
   10d24:	0f 90       	pop	r0
   10d26:	0f 90       	pop	r0
   10d28:	ee cf       	rjmp	.-36     	; 0x10d06 <hexdump+0x152>
            printf("   ");

        printf(" : ");
   10d2a:	1f 92       	push	r1
   10d2c:	ed a5       	ldd	r30, Y+45	; 0x2d
   10d2e:	ef 93       	push	r30
   10d30:	fc a5       	ldd	r31, Y+44	; 0x2c
   10d32:	ff 93       	push	r31
   10d34:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10d38:	0f 90       	pop	r0
   10d3a:	0f 90       	pop	r0
   10d3c:	0f 90       	pop	r0
   10d3e:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
        {
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
   10d40:	f5 01       	movw	r30, r10
   10d42:	81 91       	ld	r24, Z+
   10d44:	5f 01       	movw	r10, r30
   10d46:	90 ee       	ldi	r25, 0xE0	; 224
   10d48:	98 0f       	add	r25, r24
   10d4a:	9f 35       	cpi	r25, 0x5F	; 95
   10d4c:	10 f4       	brcc	.+4      	; 0x10d52 <hexdump+0x19e>
                putchar(buf[i]);
   10d4e:	90 e0       	ldi	r25, 0x00	; 0
   10d50:	02 c0       	rjmp	.+4      	; 0x10d56 <hexdump+0x1a2>
            else
                putchar('.');
   10d52:	8e e2       	ldi	r24, 0x2E	; 46
   10d54:	90 e0       	ldi	r25, 0x00	; 0
   10d56:	0e 94 1b 7b 	call	0xf636	; 0xf636 <putchar>
        for(;i<16;++i) 
            printf("   ");

        printf(" : ");

        for(i=0;i<len;++i) 
   10d5a:	c5 01       	movw	r24, r10
   10d5c:	84 19       	sub	r24, r4
   10d5e:	95 09       	sbc	r25, r5
   10d60:	80 17       	cp	r24, r16
   10d62:	91 07       	cpc	r25, r17
   10d64:	6c f3       	brlt	.-38     	; 0x10d40 <hexdump+0x18c>
   10d66:	58 01       	movw	r10, r16
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10d68:	20 e1       	ldi	r18, 0x10	; 16
   10d6a:	a2 16       	cp	r10, r18
   10d6c:	b1 04       	cpc	r11, r1
   10d6e:	0c f0       	brlt	.+2      	; 0x10d72 <hexdump+0x1be>
   10d70:	7f cf       	rjmp	.-258    	; 0x10c70 <hexdump+0xbc>
            putchar('.');
   10d72:	8e e2       	ldi	r24, 0x2E	; 46
   10d74:	90 e0       	ldi	r25, 0x00	; 0
   10d76:	0e 94 1b 7b 	call	0xf636	; 0xf636 <putchar>
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10d7a:	ff ef       	ldi	r31, 0xFF	; 255
   10d7c:	af 1a       	sub	r10, r31
   10d7e:	bf 0a       	sbc	r11, r31

        printf("\n");
        addr += len;
        if(dopage)
        {
            count = testpage(++count);
   10d80:	f3 cf       	rjmp	.-26     	; 0x10d68 <hexdump+0x1b4>
   10d82:	c1 01       	movw	r24, r2
   10d84:	01 96       	adiw	r24, 0x01	; 1
   10d86:	76 de       	rcall	.-788    	; 0x10a74 <testpage>
            if(count < 0)
   10d88:	1c 01       	movw	r2, r24
   10d8a:	97 ff       	sbrs	r25, 7
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10d8c:	86 cf       	rjmp	.-244    	; 0x10c9a <hexdump+0xe6>
   10d8e:	8e e9       	ldi	r24, 0x9E	; 158
   10d90:	9d e0       	ldi	r25, 0x0D	; 13
   10d92:	1f 92       	push	r1
   10d94:	9f 93       	push	r25
   10d96:	8f 93       	push	r24
    fclose(fi);
   10d98:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   10d9c:	89 a1       	ldd	r24, Y+33	; 0x21
   10d9e:	9a a1       	ldd	r25, Y+34	; 0x22
    return(1);
   10da0:	ea db       	rcall	.-2092   	; 0x10576 <fclose>
   10da2:	0f 90       	pop	r0
   10da4:	0f 90       	pop	r0
   10da6:	0f 90       	pop	r0
   10da8:	81 e0       	ldi	r24, 0x01	; 1
}
   10daa:	90 e0       	ldi	r25, 0x00	; 0
   10dac:	e0 96       	adiw	r28, 0x30	; 48
   10dae:	0f b6       	in	r0, 0x3f	; 63
   10db0:	f8 94       	cli
   10db2:	de bf       	out	0x3e, r29	; 62
   10db4:	0f be       	out	0x3f, r0	; 63
   10db6:	cd bf       	out	0x3d, r28	; 61
   10db8:	df 91       	pop	r29
   10dba:	cf 91       	pop	r28
   10dbc:	1f 91       	pop	r17
   10dbe:	0f 91       	pop	r16
   10dc0:	ff 90       	pop	r15
   10dc2:	ef 90       	pop	r14
   10dc4:	df 90       	pop	r13
   10dc6:	cf 90       	pop	r12
   10dc8:	bf 90       	pop	r11
   10dca:	af 90       	pop	r10
   10dcc:	8f 90       	pop	r8
   10dce:	7f 90       	pop	r7
   10dd0:	6f 90       	pop	r6
   10dd2:	5f 90       	pop	r5
   10dd4:	4f 90       	pop	r4
   10dd6:	3f 90       	pop	r3
   10dd8:	2f 90       	pop	r2
   10dda:	08 95       	ret

00010ddc <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10ddc:	4f 92       	push	r4
   10dde:	5f 92       	push	r5
   10de0:	6f 92       	push	r6
   10de2:	7f 92       	push	r7
   10de4:	af 92       	push	r10
   10de6:	bf 92       	push	r11
   10de8:	cf 92       	push	r12
   10dea:	df 92       	push	r13
   10dec:	ef 92       	push	r14
   10dee:	ff 92       	push	r15
   10df0:	0f 93       	push	r16
   10df2:	1f 93       	push	r17
   10df4:	cf 93       	push	r28
   10df6:	df 93       	push	r29
   10df8:	cd b7       	in	r28, 0x3d	; 61
   10dfa:	de b7       	in	r29, 0x3e	; 62
   10dfc:	ec 97       	sbiw	r28, 0x3c	; 60
   10dfe:	0f b6       	in	r0, 0x3f	; 63
   10e00:	f8 94       	cli
   10e02:	de bf       	out	0x3e, r29	; 62
   10e04:	0f be       	out	0x3f, r0	; 63
   10e06:	cd bf       	out	0x3d, r28	; 61
   10e08:	8c 01       	movw	r16, r24
   10e0a:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10e0c:	be 01       	movw	r22, r28
   10e0e:	6f 5f       	subi	r22, 0xFF	; 255
   10e10:	7f 4f       	sbci	r23, 0xFF	; 255
   10e12:	1b d8       	rcall	.-4042   	; 0xfe4a <stat>
   10e14:	01 96       	adiw	r24, 0x01	; 1
   10e16:	89 f4       	brne	.+34     	; 0x10e3a <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   10e18:	1f 93       	push	r17
   10e1a:	0f 93       	push	r16
   10e1c:	83 e8       	ldi	r24, 0x83	; 131
   10e1e:	9d e0       	ldi	r25, 0x0D	; 13
   10e20:	1f 92       	push	r1
   10e22:	9f 93       	push	r25
   10e24:	8f 93       	push	r24
   10e26:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0);
   10e2a:	0f 90       	pop	r0
   10e2c:	0f 90       	pop	r0
   10e2e:	0f 90       	pop	r0
   10e30:	0f 90       	pop	r0
   10e32:	0f 90       	pop	r0
   10e34:	80 e0       	ldi	r24, 0x00	; 0
   10e36:	90 e0       	ldi	r25, 0x00	; 0
   10e38:	79 c0       	rjmp	.+242    	; 0x10f2c <ls_info+0x150>
    }

    if(!verbose)
   10e3a:	ef 28       	or	r14, r15
   10e3c:	91 f4       	brne	.+36     	; 0x10e62 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   10e3e:	c8 01       	movw	r24, r16
   10e40:	0e 94 87 7c 	call	0xf90e	; 0xf90e <basename>
   10e44:	9f 93       	push	r25
   10e46:	8f 93       	push	r24
   10e48:	8f e7       	ldi	r24, 0x7F	; 127
   10e4a:	9d e0       	ldi	r25, 0x0D	; 13
   10e4c:	1f 92       	push	r1
   10e4e:	9f 93       	push	r25
   10e50:	8f 93       	push	r24
   10e52:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(1);
   10e56:	0f 90       	pop	r0
   10e58:	0f 90       	pop	r0
   10e5a:	0f 90       	pop	r0
   10e5c:	0f 90       	pop	r0
   10e5e:	0f 90       	pop	r0
   10e60:	63 c0       	rjmp	.+198    	; 0x10f28 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10e62:	49 84       	ldd	r4, Y+9	; 0x09
   10e64:	5a 84       	ldd	r5, Y+10	; 0x0a
   10e66:	6b 84       	ldd	r6, Y+11	; 0x0b
   10e68:	7c 84       	ldd	r7, Y+12	; 0x0c
   10e6a:	d3 01       	movw	r26, r6
   10e6c:	c2 01       	movw	r24, r4
   10e6e:	88 27       	eor	r24, r24
   10e70:	90 7f       	andi	r25, 0xF0	; 240
   10e72:	aa 27       	eor	r26, r26
   10e74:	bb 27       	eor	r27, r27
   10e76:	81 15       	cp	r24, r1
   10e78:	90 44       	sbci	r25, 0x40	; 64
   10e7a:	a1 05       	cpc	r26, r1
   10e7c:	b1 05       	cpc	r27, r1
   10e7e:	11 f4       	brne	.+4      	; 0x10e84 <ls_info+0xa8>
        *p++ = 'd';
   10e80:	84 e6       	ldi	r24, 0x64	; 100
   10e82:	01 c0       	rjmp	.+2      	; 0x10e86 <ls_info+0xaa>
    else
        *p++ = '-';
   10e84:	8d e2       	ldi	r24, 0x2D	; 45
   10e86:	89 ab       	std	Y+49, r24	; 0x31
   10e88:	fe 01       	movw	r30, r28
   10e8a:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10e8c:	e1 2c       	mov	r14, r1
   10e8e:	ff 24       	eor	r15, r15
   10e90:	f3 94       	inc	r15
   10e92:	20 e0       	ldi	r18, 0x00	; 0
   10e94:	30 e0       	ldi	r19, 0x00	; 0
   10e96:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10e98:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10e9a:	53 e0       	ldi	r21, 0x03	; 3
   10e9c:	c5 2e       	mov	r12, r21
   10e9e:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   10ea0:	c7 01       	movw	r24, r14
   10ea2:	a0 e0       	ldi	r26, 0x00	; 0
   10ea4:	b0 e0       	ldi	r27, 0x00	; 0
   10ea6:	84 21       	and	r24, r4
   10ea8:	95 21       	and	r25, r5
   10eaa:	a6 21       	and	r26, r6
   10eac:	b7 21       	and	r27, r7
   10eae:	89 2b       	or	r24, r25
   10eb0:	8a 2b       	or	r24, r26
   10eb2:	8b 2b       	or	r24, r27
   10eb4:	51 f0       	breq	.+20     	; 0x10eca <ls_info+0xee>
            *p++ = cm[ i % 3];
   10eb6:	c9 01       	movw	r24, r18
   10eb8:	b6 01       	movw	r22, r12
   10eba:	0e 94 70 ec 	call	0x1d8e0	; 0x1d8e0 <__divmodhi4>
   10ebe:	dc 01       	movw	r26, r24
   10ec0:	a8 5e       	subi	r26, 0xE8	; 232
   10ec2:	b4 4f       	sbci	r27, 0xF4	; 244
   10ec4:	8c 91       	ld	r24, X
   10ec6:	81 83       	std	Z+1, r24	; 0x01
   10ec8:	01 c0       	rjmp	.+2      	; 0x10ecc <ls_info+0xf0>
        else
            *p++ = '-';
   10eca:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10ecc:	f6 94       	lsr	r15
   10ece:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10ed0:	2f 5f       	subi	r18, 0xFF	; 255
   10ed2:	3f 4f       	sbci	r19, 0xFF	; 255
   10ed4:	31 96       	adiw	r30, 0x01	; 1
   10ed6:	29 30       	cpi	r18, 0x09	; 9
   10ed8:	31 05       	cpc	r19, r1
   10eda:	11 f7       	brne	.-60     	; 0x10ea0 <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10edc:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10ede:	c8 01       	movw	r24, r16
   10ee0:	0e 94 87 7c 	call	0xf90e	; 0xf90e <basename>
   10ee4:	18 2f       	mov	r17, r24
   10ee6:	09 2f       	mov	r16, r25
   10ee8:	69 a5       	ldd	r22, Y+41	; 0x29
   10eea:	7a a5       	ldd	r23, Y+42	; 0x2a
   10eec:	8b a5       	ldd	r24, Y+43	; 0x2b
   10eee:	9c a5       	ldd	r25, Y+44	; 0x2c
   10ef0:	0e 94 b5 7b 	call	0xf76a	; 0xf76a <mctime>
   10ef4:	0f 93       	push	r16
   10ef6:	1f 93       	push	r17
   10ef8:	9f 93       	push	r25
   10efa:	8f 93       	push	r24
   10efc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10efe:	8f 93       	push	r24
   10f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10f02:	8f 93       	push	r24
   10f04:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10f06:	8f 93       	push	r24
   10f08:	89 8d       	ldd	r24, Y+25	; 0x19
   10f0a:	8f 93       	push	r24
   10f0c:	bf 92       	push	r11
   10f0e:	af 92       	push	r10
   10f10:	85 e6       	ldi	r24, 0x65	; 101
   10f12:	9d e0       	ldi	r25, 0x0D	; 13
   10f14:	1f 92       	push	r1
   10f16:	9f 93       	push	r25
   10f18:	8f 93       	push	r24
   10f1a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10f1e:	0f b6       	in	r0, 0x3f	; 63
   10f20:	f8 94       	cli
   10f22:	de bf       	out	0x3e, r29	; 62
   10f24:	0f be       	out	0x3f, r0	; 63
   10f26:	cd bf       	out	0x3d, r28	; 61
   10f28:	81 e0       	ldi	r24, 0x01	; 1
   10f2a:	90 e0       	ldi	r25, 0x00	; 0
}
   10f2c:	ec 96       	adiw	r28, 0x3c	; 60
   10f2e:	0f b6       	in	r0, 0x3f	; 63
   10f30:	f8 94       	cli
   10f32:	de bf       	out	0x3e, r29	; 62
   10f34:	0f be       	out	0x3f, r0	; 63
   10f36:	cd bf       	out	0x3d, r28	; 61
   10f38:	df 91       	pop	r29
   10f3a:	cf 91       	pop	r28
   10f3c:	1f 91       	pop	r17
   10f3e:	0f 91       	pop	r16
   10f40:	ff 90       	pop	r15
   10f42:	ef 90       	pop	r14
   10f44:	df 90       	pop	r13
   10f46:	cf 90       	pop	r12
   10f48:	bf 90       	pop	r11
   10f4a:	af 90       	pop	r10
   10f4c:	7f 90       	pop	r7
   10f4e:	6f 90       	pop	r6
   10f50:	5f 90       	pop	r5
   10f52:	4f 90       	pop	r4
   10f54:	08 95       	ret

00010f56 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10f56:	2f 92       	push	r2
   10f58:	3f 92       	push	r3
   10f5a:	4f 92       	push	r4
   10f5c:	5f 92       	push	r5
   10f5e:	6f 92       	push	r6
   10f60:	8f 92       	push	r8
   10f62:	9f 92       	push	r9
   10f64:	af 92       	push	r10
   10f66:	bf 92       	push	r11
   10f68:	cf 92       	push	r12
   10f6a:	df 92       	push	r13
   10f6c:	ef 92       	push	r14
   10f6e:	ff 92       	push	r15
   10f70:	0f 93       	push	r16
   10f72:	1f 93       	push	r17
   10f74:	cf 93       	push	r28
   10f76:	df 93       	push	r29
   10f78:	cd b7       	in	r28, 0x3d	; 61
   10f7a:	de b7       	in	r29, 0x3e	; 62
   10f7c:	c2 53       	subi	r28, 0x32	; 50
   10f7e:	d1 40       	sbci	r29, 0x01	; 1
   10f80:	0f b6       	in	r0, 0x3f	; 63
   10f82:	f8 94       	cli
   10f84:	de bf       	out	0x3e, r29	; 62
   10f86:	0f be       	out	0x3f, r0	; 63
   10f88:	cd bf       	out	0x3d, r28	; 61
   10f8a:	7c 01       	movw	r14, r24
   10f8c:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10f8e:	19 82       	std	Y+1, r1	; 0x01
   10f90:	8e 01       	movw	r16, r28
   10f92:	0f 5f       	subi	r16, 0xFF	; 255
   10f94:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10f96:	00 97       	sbiw	r24, 0x00	; 0
   10f98:	91 f4       	brne	.+36     	; 0x10fbe <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10f9a:	6e ef       	ldi	r22, 0xFE	; 254
   10f9c:	70 e0       	ldi	r23, 0x00	; 0
   10f9e:	c8 01       	movw	r24, r16
   10fa0:	0e 94 dd 7c 	call	0xf9ba	; 0xf9ba <getcwd>
   10fa4:	89 2b       	or	r24, r25
   10fa6:	d1 f4       	brne	.+52     	; 0x10fdc <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10fa8:	84 e4       	ldi	r24, 0x44	; 68
   10faa:	9d e0       	ldi	r25, 0x0D	; 13
   10fac:	1f 92       	push	r1
   10fae:	9f 93       	push	r25
   10fb0:	8f 93       	push	r24
   10fb2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            return(0); 
   10fb6:	0f 90       	pop	r0
   10fb8:	0f 90       	pop	r0
   10fba:	0f 90       	pop	r0
   10fbc:	3c c0       	rjmp	.+120    	; 0x11036 <ls+0xe0>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10fbe:	fc 01       	movw	r30, r24
   10fc0:	80 81       	ld	r24, Z
   10fc2:	88 23       	and	r24, r24
   10fc4:	51 f3       	breq	.-44     	; 0x10f9a <ls+0x44>
   10fc6:	6b e5       	ldi	r22, 0x5B	; 91
   10fc8:	70 e1       	ldi	r23, 0x10	; 16
   10fca:	c7 01       	movw	r24, r14
   10fcc:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   10fd0:	89 2b       	or	r24, r25
   10fd2:	19 f7       	brne	.-58     	; 0x10f9a <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10fd4:	b7 01       	movw	r22, r14
   10fd6:	c8 01       	movw	r24, r16
   10fd8:	0e 94 4e 32 	call	0x649c	; 0x649c <strcpy>
    }
    len = strlen(fullpath);
   10fdc:	f8 01       	movw	r30, r16
   10fde:	01 90       	ld	r0, Z+
   10fe0:	00 20       	and	r0, r0
   10fe2:	e9 f7       	brne	.-6      	; 0x10fde <ls+0x88>
   10fe4:	31 97       	sbiw	r30, 0x01	; 1
   10fe6:	1f 01       	movw	r2, r30
   10fe8:	20 1a       	sub	r2, r16
   10fea:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10fec:	1f 93       	push	r17
   10fee:	0f 93       	push	r16
   10ff0:	86 e3       	ldi	r24, 0x36	; 54
   10ff2:	9d e0       	ldi	r25, 0x0D	; 13
   10ff4:	1f 92       	push	r1
   10ff6:	9f 93       	push	r25
   10ff8:	8f 93       	push	r24
   10ffa:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    if (stat(fullpath, &st)) 
   10ffe:	be 01       	movw	r22, r28
   11000:	6f 5f       	subi	r22, 0xFF	; 255
   11002:	7e 4f       	sbci	r23, 0xFE	; 254
   11004:	c8 01       	movw	r24, r16
   11006:	0e 94 25 7f 	call	0xfe4a	; 0xfe4a <stat>
   1100a:	7c 01       	movw	r14, r24
   1100c:	0f 90       	pop	r0
   1100e:	0f 90       	pop	r0
   11010:	0f 90       	pop	r0
   11012:	0f 90       	pop	r0
   11014:	0f 90       	pop	r0
   11016:	89 2b       	or	r24, r25
   11018:	89 f0       	breq	.+34     	; 0x1103c <ls+0xe6>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   1101a:	1f 93       	push	r17
   1101c:	0f 93       	push	r16
   1101e:	80 e2       	ldi	r24, 0x20	; 32
   11020:	9d e0       	ldi	r25, 0x0D	; 13
   11022:	1f 92       	push	r1
   11024:	9f 93       	push	r25
   11026:	8f 93       	push	r24
   11028:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0); 
   1102c:	0f 90       	pop	r0
   1102e:	0f 90       	pop	r0
   11030:	0f 90       	pop	r0
   11032:	0f 90       	pop	r0
   11034:	0f 90       	pop	r0
   11036:	e1 2c       	mov	r14, r1
   11038:	f1 2c       	mov	r15, r1
   1103a:	8f c0       	rjmp	.+286    	; 0x1115a <ls+0x204>
    }

    switch (st.st_mode & S_IFMT) 
   1103c:	c7 5f       	subi	r28, 0xF7	; 247
   1103e:	de 4f       	sbci	r29, 0xFE	; 254
   11040:	88 81       	ld	r24, Y
   11042:	99 81       	ldd	r25, Y+1	; 0x01
   11044:	aa 81       	ldd	r26, Y+2	; 0x02
   11046:	bb 81       	ldd	r27, Y+3	; 0x03
   11048:	c9 50       	subi	r28, 0x09	; 9
   1104a:	d1 40       	sbci	r29, 0x01	; 1
   1104c:	88 27       	eor	r24, r24
   1104e:	90 7f       	andi	r25, 0xF0	; 240
   11050:	aa 27       	eor	r26, r26
   11052:	bb 27       	eor	r27, r27
   11054:	81 15       	cp	r24, r1
   11056:	f0 e4       	ldi	r31, 0x40	; 64
   11058:	9f 07       	cpc	r25, r31
   1105a:	a1 05       	cpc	r26, r1
   1105c:	b1 05       	cpc	r27, r1
   1105e:	51 f0       	breq	.+20     	; 0x11074 <ls+0x11e>
   11060:	81 15       	cp	r24, r1
   11062:	90 48       	sbci	r25, 0x80	; 128
   11064:	a1 05       	cpc	r26, r1
   11066:	b1 05       	cpc	r27, r1
   11068:	09 f0       	breq	.+2      	; 0x1106c <ls+0x116>
   1106a:	67 c0       	rjmp	.+206    	; 0x1113a <ls+0x1e4>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   1106c:	b4 01       	movw	r22, r8
   1106e:	c8 01       	movw	r24, r16
   11070:	b5 de       	rcall	.-662    	; 0x10ddc <ls_info>
   11072:	63 c0       	rjmp	.+198    	; 0x1113a <ls+0x1e4>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   11074:	c8 01       	movw	r24, r16
   11076:	0e 94 8b 7d 	call	0xfb16	; 0xfb16 <opendir>
   1107a:	5c 01       	movw	r10, r24
        if(!dirp)
   1107c:	89 2b       	or	r24, r25
   1107e:	79 f0       	breq	.+30     	; 0x1109e <ls+0x148>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   11080:	e1 2c       	mov	r14, r1
   11082:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   11084:	c8 01       	movw	r24, r16
   11086:	82 0d       	add	r24, r2
   11088:	93 1d       	adc	r25, r3
   1108a:	cf 5c       	subi	r28, 0xCF	; 207
   1108c:	de 4f       	sbci	r29, 0xFE	; 254
   1108e:	99 83       	std	Y+1, r25	; 0x01
   11090:	88 83       	st	Y, r24
   11092:	c1 53       	subi	r28, 0x31	; 49
   11094:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   11096:	8d ee       	ldi	r24, 0xED	; 237
   11098:	9c e0       	ldi	r25, 0x0C	; 12
   1109a:	2c 01       	movw	r4, r24
   1109c:	27 c0       	rjmp	.+78     	; 0x110ec <ls+0x196>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   1109e:	80 e1       	ldi	r24, 0x10	; 16
   110a0:	9d e0       	ldi	r25, 0x0D	; 13
   110a2:	1f 92       	push	r1
   110a4:	9f 93       	push	r25
   110a6:	8f 93       	push	r24
   110a8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            return(0);
   110ac:	0f 90       	pop	r0
   110ae:	0f 90       	pop	r0
   110b0:	0f 90       	pop	r0
   110b2:	53 c0       	rjmp	.+166    	; 0x1115a <ls+0x204>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   110b4:	f6 01       	movw	r30, r12
   110b6:	80 81       	ld	r24, Z
   110b8:	88 23       	and	r24, r24
   110ba:	f1 f0       	breq	.+60     	; 0x110f8 <ls+0x1a2>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   110bc:	f6 01       	movw	r30, r12
   110be:	01 90       	ld	r0, Z+
   110c0:	00 20       	and	r0, r0
   110c2:	e9 f7       	brne	.-6      	; 0x110be <ls+0x168>
   110c4:	31 97       	sbiw	r30, 0x01	; 1
   110c6:	ec 19       	sub	r30, r12
   110c8:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   110ca:	e2 0d       	add	r30, r2
   110cc:	f3 1d       	adc	r31, r3
   110ce:	ef 3f       	cpi	r30, 0xFF	; 255
   110d0:	f1 05       	cpc	r31, r1
   110d2:	b4 f0       	brlt	.+44     	; 0x11100 <ls+0x1aa>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   110d4:	df 92       	push	r13
   110d6:	cf 92       	push	r12
   110d8:	1f 92       	push	r1
   110da:	5f 92       	push	r5
   110dc:	4f 92       	push	r4
   110de:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                continue;
   110e2:	0f 90       	pop	r0
   110e4:	0f 90       	pop	r0
   110e6:	0f 90       	pop	r0
   110e8:	0f 90       	pop	r0
   110ea:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   110ec:	c5 01       	movw	r24, r10
   110ee:	0e 94 a9 7d 	call	0xfb52	; 0xfb52 <readdir>
   110f2:	6c 01       	movw	r12, r24
   110f4:	89 2b       	or	r24, r25
   110f6:	f1 f6       	brne	.-68     	; 0x110b4 <ls+0x15e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   110f8:	c5 01       	movw	r24, r10
   110fa:	0e 94 70 7d 	call	0xfae0	; 0xfae0 <closedir>
        break;
   110fe:	1f c0       	rjmp	.+62     	; 0x1113e <ls+0x1e8>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   11100:	6c e1       	ldi	r22, 0x1C	; 28
   11102:	78 e0       	ldi	r23, 0x08	; 8
   11104:	c8 01       	movw	r24, r16
   11106:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   1110a:	89 2b       	or	r24, r25
   1110c:	29 f4       	brne	.+10     	; 0x11118 <ls+0x1c2>
            {
                strcat(fullpath,"/");
   1110e:	6c e1       	ldi	r22, 0x1C	; 28
   11110:	78 e0       	ldi	r23, 0x08	; 8
   11112:	c8 01       	movw	r24, r16
   11114:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
            }
            strcat(fullpath,de->d_name);
   11118:	b6 01       	movw	r22, r12
   1111a:	c8 01       	movw	r24, r16
   1111c:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
            files +=ls_info(fullpath,verbose);
   11120:	b4 01       	movw	r22, r8
   11122:	c8 01       	movw	r24, r16
   11124:	5b de       	rcall	.-842    	; 0x10ddc <ls_info>
   11126:	e8 0e       	add	r14, r24
   11128:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   1112a:	cf 5c       	subi	r28, 0xCF	; 207
   1112c:	de 4f       	sbci	r29, 0xFE	; 254
   1112e:	e8 81       	ld	r30, Y
   11130:	f9 81       	ldd	r31, Y+1	; 0x01
   11132:	c1 53       	subi	r28, 0x31	; 49
   11134:	d1 40       	sbci	r29, 0x01	; 1
   11136:	10 82       	st	Z, r1
   11138:	d9 cf       	rjmp	.-78     	; 0x110ec <ls+0x196>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1113a:	e1 2c       	mov	r14, r1
   1113c:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   1113e:	ff 92       	push	r15
   11140:	ef 92       	push	r14
   11142:	82 ee       	ldi	r24, 0xE2	; 226
   11144:	9c e0       	ldi	r25, 0x0C	; 12
   11146:	1f 92       	push	r1
   11148:	9f 93       	push	r25
   1114a:	8f 93       	push	r24
   1114c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    return(files);
   11150:	0f 90       	pop	r0
   11152:	0f 90       	pop	r0
   11154:	0f 90       	pop	r0
   11156:	0f 90       	pop	r0
   11158:	0f 90       	pop	r0
}
   1115a:	c7 01       	movw	r24, r14
   1115c:	ce 5c       	subi	r28, 0xCE	; 206
   1115e:	de 4f       	sbci	r29, 0xFE	; 254
   11160:	0f b6       	in	r0, 0x3f	; 63
   11162:	f8 94       	cli
   11164:	de bf       	out	0x3e, r29	; 62
   11166:	0f be       	out	0x3f, r0	; 63
   11168:	cd bf       	out	0x3d, r28	; 61
   1116a:	df 91       	pop	r29
   1116c:	cf 91       	pop	r28
   1116e:	1f 91       	pop	r17
   11170:	0f 91       	pop	r16
   11172:	ff 90       	pop	r15
   11174:	ef 90       	pop	r14
   11176:	df 90       	pop	r13
   11178:	cf 90       	pop	r12
   1117a:	bf 90       	pop	r11
   1117c:	af 90       	pop	r10
   1117e:	9f 90       	pop	r9
   11180:	8f 90       	pop	r8
   11182:	6f 90       	pop	r6
   11184:	5f 90       	pop	r5
   11186:	4f 90       	pop	r4
   11188:	3f 90       	pop	r3
   1118a:	2f 90       	pop	r2
   1118c:	08 95       	ret

0001118e <logfile>:
/// @param[in] name: name of file to create.
/// @param[in] str: string containing file contents.
/// @return  size of string, or 0 on error
MEMSPACE
long logfile(char *name, char *str)
{
   1118e:	cf 92       	push	r12
   11190:	df 92       	push	r13
   11192:	ef 92       	push	r14
   11194:	ff 92       	push	r15
   11196:	cf 93       	push	r28
   11198:	df 93       	push	r29
   1119a:	f8 2e       	mov	r15, r24
   1119c:	e9 2e       	mov	r14, r25
   1119e:	eb 01       	movw	r28, r22
    long size = 0;
    FILE *fo;

    fo = fopen(name,"ab");
   111a0:	6c e8       	ldi	r22, 0x8C	; 140
   111a2:	78 e0       	ldi	r23, 0x08	; 8
   111a4:	3e db       	rcall	.-2436   	; 0x10822 <fopen>
    if (fo)
   111a6:	89 2b       	or	r24, r25
   111a8:	79 f0       	breq	.+30     	; 0x111c8 <logfile+0x3a>
    {
        printf("Can't open: %s\n", name);
   111aa:	ef 92       	push	r14
   111ac:	ff 92       	push	r15
   111ae:	82 ed       	ldi	r24, 0xD2	; 210
   111b0:	9c e0       	ldi	r25, 0x0C	; 12
   111b2:	1f 92       	push	r1
   111b4:	9f 93       	push	r25
   111b6:	8f 93       	push	r24
   111b8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0);
   111bc:	0f 90       	pop	r0
   111be:	0f 90       	pop	r0
   111c0:	0f 90       	pop	r0
   111c2:	0f 90       	pop	r0
   111c4:	0f 90       	pop	r0
   111c6:	22 c0       	rjmp	.+68     	; 0x1120c <logfile+0x7e>
    }

    size = strlen(str);
   111c8:	fe 01       	movw	r30, r28
   111ca:	01 90       	ld	r0, Z+
   111cc:	00 20       	and	r0, r0
   111ce:	e9 f7       	brne	.-6      	; 0x111ca <logfile+0x3c>
   111d0:	31 97       	sbiw	r30, 0x01	; 1
   111d2:	af 01       	movw	r20, r30
   111d4:	4c 1b       	sub	r20, r28
   111d6:	5d 0b       	sbc	r21, r29
   111d8:	6a 01       	movw	r12, r20
   111da:	e1 2c       	mov	r14, r1
   111dc:	f1 2c       	mov	r15, r1
    if( fwrite(str, 1, size, fo) < size)
   111de:	20 e0       	ldi	r18, 0x00	; 0
   111e0:	30 e0       	ldi	r19, 0x00	; 0
   111e2:	61 e0       	ldi	r22, 0x01	; 1
   111e4:	70 e0       	ldi	r23, 0x00	; 0
   111e6:	ce 01       	movw	r24, r28
   111e8:	44 d9       	rcall	.-3448   	; 0x10472 <fwrite>
   111ea:	a0 e0       	ldi	r26, 0x00	; 0
   111ec:	b0 e0       	ldi	r27, 0x00	; 0
   111ee:	8c 15       	cp	r24, r12
   111f0:	9d 05       	cpc	r25, r13
   111f2:	ae 05       	cpc	r26, r14
   111f4:	bf 05       	cpc	r27, r15
   111f6:	7c f4       	brge	.+30     	; 0x11216 <logfile+0x88>
    {
        printf("Write error\n");
   111f8:	85 ec       	ldi	r24, 0xC5	; 197
   111fa:	9c e0       	ldi	r25, 0x0C	; 12
   111fc:	1f 92       	push	r1
   111fe:	9f 93       	push	r25
   11200:	8f 93       	push	r24
   11202:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11206:	0f 90       	pop	r0
   11208:	0f 90       	pop	r0
   1120a:	0f 90       	pop	r0
   1120c:	60 e0       	ldi	r22, 0x00	; 0
   1120e:	70 e0       	ldi	r23, 0x00	; 0
   11210:	80 e0       	ldi	r24, 0x00	; 0
   11212:	90 e0       	ldi	r25, 0x00	; 0
        return(0);
    }
    fclose(fo);
   11214:	05 c0       	rjmp	.+10     	; 0x11220 <logfile+0x92>
   11216:	80 e0       	ldi	r24, 0x00	; 0
   11218:	90 e0       	ldi	r25, 0x00	; 0
    return(size);
   1121a:	ad d9       	rcall	.-3238   	; 0x10576 <fclose>
   1121c:	b6 01       	movw	r22, r12
}
   1121e:	c7 01       	movw	r24, r14
   11220:	df 91       	pop	r29
   11222:	cf 91       	pop	r28
   11224:	ff 90       	pop	r15
   11226:	ef 90       	pop	r14
   11228:	df 90       	pop	r13
   1122a:	cf 90       	pop	r12
   1122c:	08 95       	ret

0001122e <sum>:
/// @brief sum of a file with 16bit hex and integer results
/// @param[in] *name: file to sum
/// @retrun void
MEMSPACE
uint16_t sum(char *name)
{
   1122e:	a0 e0       	ldi	r26, 0x00	; 0
   11230:	b1 e0       	ldi	r27, 0x01	; 1
   11232:	ed e1       	ldi	r30, 0x1D	; 29
   11234:	f9 e8       	ldi	r31, 0x89	; 137
   11236:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   1123a:	18 2f       	mov	r17, r24
   1123c:	09 2f       	mov	r16, r25
    FILE *fi;
    uint16_t sum;
    int i,len;
    uint8_t buffer[256];

    fi=fopen(name,"rb");
   1123e:	60 e7       	ldi	r22, 0x70	; 112
   11240:	78 e0       	ldi	r23, 0x08	; 8
   11242:	ef da       	rcall	.-2594   	; 0x10822 <fopen>
   11244:	7c 01       	movw	r14, r24
    if(fi == NULL) 
   11246:	89 2b       	or	r24, r25
   11248:	89 f4       	brne	.+34     	; 0x1126c <sum+0x3e>
    {
        printf("Can' open: %s\n", name);
   1124a:	0f 93       	push	r16
   1124c:	1f 93       	push	r17
   1124e:	86 eb       	ldi	r24, 0xB6	; 182
   11250:	9c e0       	ldi	r25, 0x0C	; 12
   11252:	1f 92       	push	r1
   11254:	9f 93       	push	r25
   11256:	8f 93       	push	r24
   11258:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1125c:	0f 90       	pop	r0
   1125e:	0f 90       	pop	r0
   11260:	0f 90       	pop	r0
   11262:	0f 90       	pop	r0
   11264:	0f 90       	pop	r0
   11266:	80 e0       	ldi	r24, 0x00	; 0
   11268:	90 e0       	ldi	r25, 0x00	; 0
   1126a:	2d c0       	rjmp	.+90     	; 0x112c6 <sum+0x98>
   1126c:	00 e0       	ldi	r16, 0x00	; 0
   1126e:	10 e0       	ldi	r17, 0x00	; 0
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
   11270:	ce 01       	movw	r24, r28
   11272:	01 96       	adiw	r24, 0x01	; 1
   11274:	6c 01       	movw	r12, r24
   11276:	97 01       	movw	r18, r14
   11278:	40 e0       	ldi	r20, 0x00	; 0
   1127a:	51 e0       	ldi	r21, 0x01	; 1
   1127c:	61 e0       	ldi	r22, 0x01	; 1
   1127e:	70 e0       	ldi	r23, 0x00	; 0
   11280:	c6 01       	movw	r24, r12
   11282:	25 d8       	rcall	.-4022   	; 0x102ce <fread>
   11284:	18 16       	cp	r1, r24
   11286:	19 06       	cpc	r1, r25
   11288:	5c f4       	brge	.+22     	; 0x112a0 <sum+0x72>
   1128a:	f6 01       	movw	r30, r12
    {
        for(i=0;i<len;++i) 
            sum += (0xff & buffer[i]);
   1128c:	21 91       	ld	r18, Z+
   1128e:	02 0f       	add	r16, r18
   11290:	11 1d       	adc	r17, r1
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
    {
        for(i=0;i<len;++i) 
   11292:	9f 01       	movw	r18, r30
   11294:	2c 19       	sub	r18, r12
   11296:	3d 09       	sbc	r19, r13
   11298:	28 17       	cp	r18, r24
   1129a:	39 07       	cpc	r19, r25
   1129c:	bc f3       	brlt	.-18     	; 0x1128c <sum+0x5e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
    }
    fclose(fi);
   1129e:	eb cf       	rjmp	.-42     	; 0x11276 <sum+0x48>
   112a0:	c7 01       	movw	r24, r14
   112a2:	69 d9       	rcall	.-3374   	; 0x10576 <fclose>
    printf("Sum: %04Xh, %5u\n", (int) sum, (unsigned int) sum);
   112a4:	1f 93       	push	r17
   112a6:	0f 93       	push	r16
   112a8:	1f 93       	push	r17
   112aa:	0f 93       	push	r16
   112ac:	85 ea       	ldi	r24, 0xA5	; 165
   112ae:	9c e0       	ldi	r25, 0x0C	; 12
   112b0:	1f 92       	push	r1
   112b2:	9f 93       	push	r25
   112b4:	8f 93       	push	r24
   112b6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    return(sum);
   112ba:	0f b6       	in	r0, 0x3f	; 63
   112bc:	f8 94       	cli
   112be:	de bf       	out	0x3e, r29	; 62
   112c0:	0f be       	out	0x3f, r0	; 63
   112c2:	cd bf       	out	0x3d, r28	; 61
   112c4:	c8 01       	movw	r24, r16
}
   112c6:	d3 95       	inc	r29
   112c8:	e8 e0       	ldi	r30, 0x08	; 8
   112ca:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

000112ce <upload>:
/// First blank line exits capture
/// @param[in] *name: file to save on sdcard
/// @retrun void
MEMSPACE
long upload(char *name)
{
   112ce:	a0 e0       	ldi	r26, 0x00	; 0
   112d0:	b1 e0       	ldi	r27, 0x01	; 1
   112d2:	ed e6       	ldi	r30, 0x6D	; 109
   112d4:	f9 e8       	ldi	r31, 0x89	; 137
   112d6:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   112da:	18 2f       	mov	r17, r24
   112dc:	09 2f       	mov	r16, r25
    int len,len2;
    long size = 0;
    FILE *fp;
    char buffer[256];

    fp = fopen(name, "wb");
   112de:	6e e7       	ldi	r22, 0x7E	; 126
   112e0:	78 e0       	ldi	r23, 0x08	; 8
   112e2:	9f da       	rcall	.-2754   	; 0x10822 <fopen>
   112e4:	6c 01       	movw	r12, r24
    if( fp == NULL)
   112e6:	89 2b       	or	r24, r25
   112e8:	39 f0       	breq	.+14     	; 0x112f8 <upload+0x2a>
   112ea:	81 2c       	mov	r8, r1
   112ec:	91 2c       	mov	r9, r1
   112ee:	54 01       	movw	r10, r8
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   112f0:	ce 01       	movw	r24, r28
   112f2:	01 96       	adiw	r24, 0x01	; 1
   112f4:	7c 01       	movw	r14, r24
   112f6:	3c c0       	rjmp	.+120    	; 0x11370 <upload+0xa2>
    char buffer[256];

    fp = fopen(name, "wb");
    if( fp == NULL)
    {
        printf("Can' open: %s\n", name);
   112f8:	0f 93       	push	r16
   112fa:	1f 93       	push	r17
   112fc:	86 e9       	ldi	r24, 0x96	; 150
   112fe:	9c e0       	ldi	r25, 0x0C	; 12
   11300:	1f 92       	push	r1
   11302:	9f 93       	push	r25
   11304:	8f 93       	push	r24
   11306:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0);
   1130a:	0f 90       	pop	r0
   1130c:	0f 90       	pop	r0
   1130e:	0f 90       	pop	r0
   11310:	0f 90       	pop	r0
   11312:	0f 90       	pop	r0
   11314:	60 e0       	ldi	r22, 0x00	; 0
   11316:	70 e0       	ldi	r23, 0x00	; 0
   11318:	80 e0       	ldi	r24, 0x00	; 0
   1131a:	90 e0       	ldi	r25, 0x00	; 0
   1131c:	3a c0       	rjmp	.+116    	; 0x11392 <upload+0xc4>

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
            break;
        len = strlen(buffer);
   1131e:	f7 01       	movw	r30, r14
   11320:	01 90       	ld	r0, Z+
   11322:	00 20       	and	r0, r0
   11324:	e9 f7       	brne	.-6      	; 0x11320 <upload+0x52>
   11326:	31 97       	sbiw	r30, 0x01	; 1
   11328:	ee 19       	sub	r30, r14
   1132a:	ff 09       	sbc	r31, r15
        if(len < 1)
   1132c:	1e 16       	cp	r1, r30
   1132e:	1f 06       	cpc	r1, r31
   11330:	54 f5       	brge	.+84     	; 0x11386 <upload+0xb8>
            break;
        strcat(buffer,"\n");
   11332:	67 e5       	ldi	r22, 0x57	; 87
   11334:	77 e1       	ldi	r23, 0x17	; 23
   11336:	c7 01       	movw	r24, r14
   11338:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
        len = strlen(buffer);
   1133c:	f7 01       	movw	r30, r14
   1133e:	01 90       	ld	r0, Z+
   11340:	00 20       	and	r0, r0
   11342:	e9 f7       	brne	.-6      	; 0x1133e <upload+0x70>
   11344:	31 97       	sbiw	r30, 0x01	; 1
   11346:	8f 01       	movw	r16, r30
   11348:	0e 19       	sub	r16, r14
   1134a:	1f 09       	sbc	r17, r15
        len2 = fwrite(buffer, 1, len,fp);
   1134c:	96 01       	movw	r18, r12
   1134e:	a8 01       	movw	r20, r16
   11350:	61 e0       	ldi	r22, 0x01	; 1
   11352:	70 e0       	ldi	r23, 0x00	; 0
   11354:	c7 01       	movw	r24, r14
   11356:	8d d8       	rcall	.-3814   	; 0x10472 <fwrite>
        if(len != len2)
   11358:	08 17       	cp	r16, r24
   1135a:	19 07       	cpc	r17, r25
   1135c:	a1 f4       	brne	.+40     	; 0x11386 <upload+0xb8>
            break;
        size += len;
   1135e:	a8 01       	movw	r20, r16
   11360:	01 2e       	mov	r0, r17
   11362:	00 0c       	add	r0, r0
   11364:	66 0b       	sbc	r22, r22
   11366:	77 0b       	sbc	r23, r23
   11368:	84 0e       	add	r8, r20
   1136a:	95 1e       	adc	r9, r21
   1136c:	a6 1e       	adc	r10, r22
   1136e:	b7 1e       	adc	r11, r23
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   11370:	40 91 ea 1c 	lds	r20, 0x1CEA	; 0x801cea <__iob>
   11374:	50 91 eb 1c 	lds	r21, 0x1CEB	; 0x801ceb <__iob+0x1>
   11378:	6e ef       	ldi	r22, 0xFE	; 254
   1137a:	70 e0       	ldi	r23, 0x00	; 0
   1137c:	c7 01       	movw	r24, r14
   1137e:	0e 94 21 7b 	call	0xf642	; 0xf642 <fgets>
   11382:	89 2b       	or	r24, r25
        if(len != len2)
            break;
        size += len;
    }

    fclose(fp);
   11384:	61 f6       	brne	.-104    	; 0x1131e <upload+0x50>
   11386:	c6 01       	movw	r24, r12
   11388:	f6 d8       	rcall	.-3604   	; 0x10576 <fclose>
    sync();
   1138a:	0e 94 b6 81 	call	0x1036c	; 0x1036c <sync>
    return(size);
   1138e:	b4 01       	movw	r22, r8
   11390:	c5 01       	movw	r24, r10
}
   11392:	d3 95       	inc	r29
   11394:	ec e0       	ldi	r30, 0x0C	; 12
   11396:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

0001139a <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1139a:	a0 e0       	ldi	r26, 0x00	; 0
   1139c:	b1 e0       	ldi	r27, 0x01	; 1
   1139e:	e3 ed       	ldi	r30, 0xD3	; 211
   113a0:	f9 e8       	ldi	r31, 0x89	; 137
   113a2:	0c 94 07 ed 	jmp	0x1da0e	; 0x1da0e <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   113a6:	fb 01       	movw	r30, r22
   113a8:	c0 80       	ld	r12, Z
   113aa:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   113ac:	c1 14       	cp	r12, r1
   113ae:	d1 04       	cpc	r13, r1
   113b0:	19 f4       	brne	.+6      	; 0x113b8 <posix_tests+0x1e>
        return(0);
   113b2:	80 e0       	ldi	r24, 0x00	; 0
   113b4:	90 e0       	ldi	r25, 0x00	; 0
   113b6:	2d c2       	rjmp	.+1114   	; 0x11812 <posix_tests+0x478>
   113b8:	4b 01       	movw	r8, r22
   113ba:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   113bc:	6c e1       	ldi	r22, 0x1C	; 28
   113be:	7b e0       	ldi	r23, 0x0B	; 11
   113c0:	c6 01       	movw	r24, r12
   113c2:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   113c6:	89 2b       	or	r24, r25
   113c8:	a9 f0       	breq	.+42     	; 0x113f4 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   113ca:	f4 01       	movw	r30, r8
   113cc:	c2 80       	ldd	r12, Z+2	; 0x02
   113ce:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   113d0:	c1 14       	cp	r12, r1
   113d2:	d1 04       	cpc	r13, r1
   113d4:	21 f4       	brne	.+8      	; 0x113de <posix_tests+0x44>
        {
            posix_help(1);
   113d6:	81 e0       	ldi	r24, 0x01	; 1
   113d8:	90 e0       	ldi	r25, 0x00	; 0
   113da:	50 da       	rcall	.-2912   	; 0x1087c <posix_help>
   113dc:	18 c2       	rjmp	.+1072   	; 0x1180e <posix_tests+0x474>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   113de:	66 e4       	ldi	r22, 0x46	; 70
   113e0:	76 e1       	ldi	r23, 0x16	; 22
   113e2:	c6 01       	movw	r24, r12
   113e4:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   113e8:	89 2b       	or	r24, r25
   113ea:	a9 f7       	brne	.-22     	; 0x113d6 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   113ec:	f2 e0       	ldi	r31, 0x02	; 2
   113ee:	6f 2e       	mov	r6, r31
   113f0:	71 2c       	mov	r7, r1
   113f2:	03 c0       	rjmp	.+6      	; 0x113fa <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   113f4:	66 24       	eor	r6, r6
   113f6:	63 94       	inc	r6
   113f8:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   113fa:	73 01       	movw	r14, r6
   113fc:	ff ef       	ldi	r31, 0xFF	; 255
   113fe:	ef 1a       	sub	r14, r31
   11400:	ff 0a       	sbc	r15, r31
   11402:	98 01       	movw	r18, r16
   11404:	a7 01       	movw	r20, r14
   11406:	62 e2       	ldi	r22, 0x22	; 34
   11408:	7b e0       	ldi	r23, 0x0B	; 11
   1140a:	c6 01       	movw	r24, r12
   1140c:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   11410:	89 2b       	or	r24, r25
   11412:	a1 f1       	breq	.+104    	; 0x1147c <posix_tests+0xe2>
   11414:	73 01       	movw	r14, r6
   11416:	ee 0c       	add	r14, r14
   11418:	ff 1c       	adc	r15, r15
   1141a:	e8 0c       	add	r14, r8
   1141c:	f9 1c       	adc	r15, r9
   1141e:	57 01       	movw	r10, r14
   11420:	47 01       	movw	r8, r14
   11422:	63 01       	movw	r12, r6
   11424:	41 2c       	mov	r4, r1
   11426:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   11428:	c0 16       	cp	r12, r16
   1142a:	d1 06       	cpc	r13, r17
   1142c:	1c f5       	brge	.+70     	; 0x11474 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   1142e:	66 e2       	ldi	r22, 0x26	; 38
   11430:	7b e0       	ldi	r23, 0x0B	; 11
   11432:	f4 01       	movw	r30, r8
   11434:	81 91       	ld	r24, Z+
   11436:	91 91       	ld	r25, Z+
   11438:	4f 01       	movw	r8, r30
   1143a:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   1143e:	89 2b       	or	r24, r25
   11440:	19 f0       	breq	.+6      	; 0x11448 <posix_tests+0xae>
                page = 1;
   11442:	44 24       	eor	r4, r4
   11444:	43 94       	inc	r4
   11446:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   11448:	ff ef       	ldi	r31, 0xFF	; 255
   1144a:	cf 1a       	sub	r12, r31
   1144c:	df 0a       	sbc	r13, r31
   1144e:	ec cf       	rjmp	.-40     	; 0x11428 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   11450:	66 e2       	ldi	r22, 0x26	; 38
   11452:	7b e0       	ldi	r23, 0x0B	; 11
   11454:	f5 01       	movw	r30, r10
   11456:	81 91       	ld	r24, Z+
   11458:	91 91       	ld	r25, Z+
   1145a:	5f 01       	movw	r10, r30
   1145c:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   11460:	89 2b       	or	r24, r25
   11462:	29 f4       	brne	.+10     	; 0x1146e <posix_tests+0xd4>
                cat(argv[ind], page);
   11464:	b2 01       	movw	r22, r4
   11466:	f7 01       	movw	r30, r14
   11468:	80 81       	ld	r24, Z
   1146a:	91 81       	ldd	r25, Z+1	; 0x01
   1146c:	36 db       	rcall	.-2452   	; 0x10ada <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1146e:	ff ef       	ldi	r31, 0xFF	; 255
   11470:	6f 1a       	sub	r6, r31
   11472:	7f 0a       	sbc	r7, r31
   11474:	60 16       	cp	r6, r16
   11476:	71 06       	cpc	r7, r17
   11478:	5c f3       	brlt	.-42     	; 0x11450 <posix_tests+0xb6>
   1147a:	c9 c1       	rjmp	.+914    	; 0x1180e <posix_tests+0x474>
                cat(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"chmod",(ind+2),argc))
   1147c:	53 01       	movw	r10, r6
   1147e:	82 e0       	ldi	r24, 0x02	; 2
   11480:	a8 0e       	add	r10, r24
   11482:	b1 1c       	adc	r11, r1
   11484:	98 01       	movw	r18, r16
   11486:	a5 01       	movw	r20, r10
   11488:	69 e2       	ldi	r22, 0x29	; 41
   1148a:	7b e0       	ldi	r23, 0x0B	; 11
   1148c:	c6 01       	movw	r24, r12
   1148e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   11492:	89 2b       	or	r24, r25
   11494:	b1 f0       	breq	.+44     	; 0x114c2 <posix_tests+0x128>
    {
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
   11496:	ee 0c       	add	r14, r14
   11498:	ff 1c       	adc	r15, r15
   1149a:	e8 0c       	add	r14, r8
   1149c:	f9 1c       	adc	r15, r9
   1149e:	48 e0       	ldi	r20, 0x08	; 8
   114a0:	50 e0       	ldi	r21, 0x00	; 0
   114a2:	60 e0       	ldi	r22, 0x00	; 0
   114a4:	70 e0       	ldi	r23, 0x00	; 0
   114a6:	f7 01       	movw	r30, r14
   114a8:	80 81       	ld	r24, Z
   114aa:	91 81       	ldd	r25, Z+1	; 0x01
   114ac:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
   114b0:	ab 01       	movw	r20, r22
   114b2:	bc 01       	movw	r22, r24
   114b4:	f7 01       	movw	r30, r14
   114b6:	32 97       	sbiw	r30, 0x02	; 2
   114b8:	80 81       	ld	r24, Z
   114ba:	91 81       	ldd	r25, Z+1	; 0x01
   114bc:	0e 94 b4 7c 	call	0xf968	; 0xf968 <chmod>
   114c0:	a6 c1       	rjmp	.+844    	; 0x1180e <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   114c2:	98 01       	movw	r18, r16
   114c4:	a5 01       	movw	r20, r10
   114c6:	6f e2       	ldi	r22, 0x2F	; 47
   114c8:	7b e0       	ldi	r23, 0x0B	; 11
   114ca:	c6 01       	movw	r24, r12
   114cc:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   114d0:	89 2b       	or	r24, r25
   114d2:	61 f0       	breq	.+24     	; 0x114ec <posix_tests+0x152>
    {
        copy(argv[ind],argv[ind+1]);
   114d4:	ee 0c       	add	r14, r14
   114d6:	ff 1c       	adc	r15, r15
   114d8:	f4 01       	movw	r30, r8
   114da:	ee 0d       	add	r30, r14
   114dc:	ff 1d       	adc	r31, r15
   114de:	60 81       	ld	r22, Z
   114e0:	71 81       	ldd	r23, Z+1	; 0x01
   114e2:	32 97       	sbiw	r30, 0x02	; 2
   114e4:	80 81       	ld	r24, Z
   114e6:	91 81       	ldd	r25, Z+1	; 0x01
   114e8:	e5 d9       	rcall	.-3126   	; 0x108b4 <copy>
   114ea:	91 c1       	rjmp	.+802    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   114ec:	98 01       	movw	r18, r16
   114ee:	a7 01       	movw	r20, r14
   114f0:	64 e3       	ldi	r22, 0x34	; 52
   114f2:	7b e0       	ldi	r23, 0x0B	; 11
   114f4:	c6 01       	movw	r24, r12
   114f6:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   114fa:	89 2b       	or	r24, r25
   114fc:	59 f0       	breq	.+22     	; 0x11514 <posix_tests+0x17a>
    {
        chdir(argv[ind]);
   114fe:	73 01       	movw	r14, r6
   11500:	ee 0c       	add	r14, r14
   11502:	ff 1c       	adc	r15, r15
   11504:	f4 01       	movw	r30, r8
   11506:	ee 0d       	add	r30, r14
   11508:	ff 1d       	adc	r31, r15
   1150a:	80 81       	ld	r24, Z
   1150c:	91 81       	ldd	r25, Z+1	; 0x01
   1150e:	0e 94 95 7c 	call	0xf92a	; 0xf92a <chdir>
   11512:	7d c1       	rjmp	.+762    	; 0x1180e <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
   11514:	98 01       	movw	r18, r16
   11516:	a7 01       	movw	r20, r14
   11518:	67 e3       	ldi	r22, 0x37	; 55
   1151a:	7b e0       	ldi	r23, 0x0B	; 11
   1151c:	c6 01       	movw	r24, r12
   1151e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   11522:	89 2b       	or	r24, r25
   11524:	a1 f1       	breq	.+104    	; 0x1158e <posix_tests+0x1f4>
   11526:	73 01       	movw	r14, r6
   11528:	ee 0c       	add	r14, r14
   1152a:	ff 1c       	adc	r15, r15
   1152c:	e8 0c       	add	r14, r8
   1152e:	f9 1c       	adc	r15, r9
   11530:	57 01       	movw	r10, r14
   11532:	47 01       	movw	r8, r14
   11534:	63 01       	movw	r12, r6
   11536:	41 2c       	mov	r4, r1
   11538:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1153a:	c0 16       	cp	r12, r16
   1153c:	d1 06       	cpc	r13, r17
   1153e:	1c f5       	brge	.+70     	; 0x11586 <posix_tests+0x1ec>
        {
            if(MATCH(argv[i],"-p"))
   11540:	66 e2       	ldi	r22, 0x26	; 38
   11542:	7b e0       	ldi	r23, 0x0B	; 11
   11544:	f4 01       	movw	r30, r8
   11546:	81 91       	ld	r24, Z+
   11548:	91 91       	ld	r25, Z+
   1154a:	4f 01       	movw	r8, r30
   1154c:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   11550:	89 2b       	or	r24, r25
   11552:	19 f0       	breq	.+6      	; 0x1155a <posix_tests+0x1c0>
                page = 1;
   11554:	44 24       	eor	r4, r4
   11556:	43 94       	inc	r4
   11558:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1155a:	ff ef       	ldi	r31, 0xFF	; 255
   1155c:	cf 1a       	sub	r12, r31
   1155e:	df 0a       	sbc	r13, r31
   11560:	ec cf       	rjmp	.-40     	; 0x1153a <posix_tests+0x1a0>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   11562:	66 e2       	ldi	r22, 0x26	; 38
   11564:	7b e0       	ldi	r23, 0x0B	; 11
   11566:	f5 01       	movw	r30, r10
   11568:	81 91       	ld	r24, Z+
   1156a:	91 91       	ld	r25, Z+
   1156c:	5f 01       	movw	r10, r30
   1156e:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   11572:	89 2b       	or	r24, r25
   11574:	29 f4       	brne	.+10     	; 0x11580 <posix_tests+0x1e6>
                hexdump(argv[ind], page);
   11576:	b2 01       	movw	r22, r4
   11578:	f7 01       	movw	r30, r14
   1157a:	80 81       	ld	r24, Z
   1157c:	91 81       	ldd	r25, Z+1	; 0x01
   1157e:	1a db       	rcall	.-2508   	; 0x10bb4 <hexdump>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   11580:	ff ef       	ldi	r31, 0xFF	; 255
   11582:	6f 1a       	sub	r6, r31
   11584:	7f 0a       	sbc	r7, r31
   11586:	60 16       	cp	r6, r16
   11588:	71 06       	cpc	r7, r17
   1158a:	5c f3       	brlt	.-42     	; 0x11562 <posix_tests+0x1c8>
   1158c:	40 c1       	rjmp	.+640    	; 0x1180e <posix_tests+0x474>
                hexdump(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"log", (ind + 2), argc))
   1158e:	98 01       	movw	r18, r16
   11590:	a5 01       	movw	r20, r10
   11592:	6f e3       	ldi	r22, 0x3F	; 63
   11594:	7b e0       	ldi	r23, 0x0B	; 11
   11596:	c6 01       	movw	r24, r12
   11598:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1159c:	89 2b       	or	r24, r25
   1159e:	61 f0       	breq	.+24     	; 0x115b8 <posix_tests+0x21e>
    {
        logfile(argv[ind],argv[ind+1]);
   115a0:	ee 0c       	add	r14, r14
   115a2:	ff 1c       	adc	r15, r15
   115a4:	f4 01       	movw	r30, r8
   115a6:	ee 0d       	add	r30, r14
   115a8:	ff 1d       	adc	r31, r15
   115aa:	60 81       	ld	r22, Z
   115ac:	71 81       	ldd	r23, Z+1	; 0x01
   115ae:	32 97       	sbiw	r30, 0x02	; 2
   115b0:	80 81       	ld	r24, Z
   115b2:	91 81       	ldd	r25, Z+1	; 0x01
   115b4:	ec dd       	rcall	.-1064   	; 0x1118e <logfile>
   115b6:	2b c1       	rjmp	.+598    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   115b8:	98 01       	movw	r18, r16
   115ba:	a3 01       	movw	r20, r6
   115bc:	6c e4       	ldi	r22, 0x4C	; 76
   115be:	78 e0       	ldi	r23, 0x08	; 8
   115c0:	c6 01       	movw	r24, r12
   115c2:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   115c6:	89 2b       	or	r24, r25
   115c8:	69 f1       	breq	.+90     	; 0x11624 <posix_tests+0x28a>
   115ca:	73 01       	movw	r14, r6
   115cc:	ee 0c       	add	r14, r14
   115ce:	ff 1c       	adc	r15, r15
   115d0:	e8 0c       	add	r14, r8
   115d2:	f9 1c       	adc	r15, r9
   115d4:	c1 2c       	mov	r12, r1
   115d6:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   115d8:	c6 01       	movw	r24, r12
   115da:	86 0d       	add	r24, r6
   115dc:	97 1d       	adc	r25, r7
   115de:	80 17       	cp	r24, r16
   115e0:	91 07       	cpc	r25, r17
   115e2:	b4 f4       	brge	.+44     	; 0x11610 <posix_tests+0x276>
        {
            if(!MATCH(argv[i],"-l"))
   115e4:	63 e4       	ldi	r22, 0x43	; 67
   115e6:	7b e0       	ldi	r23, 0x0B	; 11
   115e8:	f7 01       	movw	r30, r14
   115ea:	80 81       	ld	r24, Z
   115ec:	91 81       	ldd	r25, Z+1	; 0x01
   115ee:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   115f2:	89 2b       	or	r24, r25
   115f4:	31 f4       	brne	.+12     	; 0x11602 <posix_tests+0x268>
                ls(argv[i],1);
   115f6:	61 e0       	ldi	r22, 0x01	; 1
   115f8:	70 e0       	ldi	r23, 0x00	; 0
   115fa:	f7 01       	movw	r30, r14
   115fc:	80 81       	ld	r24, Z
   115fe:	91 81       	ldd	r25, Z+1	; 0x01
   11600:	aa dc       	rcall	.-1708   	; 0x10f56 <ls>
            ++args;
   11602:	ff ef       	ldi	r31, 0xFF	; 255
   11604:	cf 1a       	sub	r12, r31
   11606:	df 0a       	sbc	r13, r31
   11608:	82 e0       	ldi	r24, 0x02	; 2
   1160a:	e8 0e       	add	r14, r24
   1160c:	f1 1c       	adc	r15, r1
   1160e:	e4 cf       	rjmp	.-56     	; 0x115d8 <posix_tests+0x23e>
        }
        if(!args)
   11610:	c1 14       	cp	r12, r1
   11612:	d1 04       	cpc	r13, r1
   11614:	09 f0       	breq	.+2      	; 0x11618 <posix_tests+0x27e>
        {
            ls("",1);
   11616:	fb c0       	rjmp	.+502    	; 0x1180e <posix_tests+0x474>
   11618:	61 e0       	ldi	r22, 0x01	; 1
   1161a:	70 e0       	ldi	r23, 0x00	; 0
   1161c:	88 e5       	ldi	r24, 0x58	; 88
   1161e:	97 e1       	ldi	r25, 0x17	; 23
   11620:	9a dc       	rcall	.-1740   	; 0x10f56 <ls>
   11622:	f5 c0       	rjmp	.+490    	; 0x1180e <posix_tests+0x474>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mkfs", (ind + 1), argc))
   11624:	98 01       	movw	r18, r16
   11626:	a7 01       	movw	r20, r14
   11628:	66 e4       	ldi	r22, 0x46	; 70
   1162a:	7b e0       	ldi	r23, 0x0B	; 11
   1162c:	c6 01       	movw	r24, r12
   1162e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   11632:	89 2b       	or	r24, r25
   11634:	59 f0       	breq	.+22     	; 0x1164c <posix_tests+0x2b2>
    {

        mkfs(argv[ind++]);
   11636:	73 01       	movw	r14, r6
   11638:	ee 0c       	add	r14, r14
   1163a:	ff 1c       	adc	r15, r15
   1163c:	f4 01       	movw	r30, r8
   1163e:	ee 0d       	add	r30, r14
   11640:	ff 1d       	adc	r31, r15
   11642:	80 81       	ld	r24, Z
   11644:	91 81       	ldd	r25, Z+1	; 0x01
   11646:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <mkfs>
   1164a:	e1 c0       	rjmp	.+450    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1164c:	98 01       	movw	r18, r16
   1164e:	a7 01       	movw	r20, r14
   11650:	6b e4       	ldi	r22, 0x4B	; 75
   11652:	7b e0       	ldi	r23, 0x0B	; 11
   11654:	c6 01       	movw	r24, r12
   11656:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1165a:	89 2b       	or	r24, r25
   1165c:	19 f1       	breq	.+70     	; 0x116a4 <posix_tests+0x30a>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   1165e:	e0 16       	cp	r14, r16
   11660:	f1 06       	cpc	r15, r17
   11662:	7c f4       	brge	.+30     	; 0x11682 <posix_tests+0x2e8>
        {
            mode = strtol(argv[ind+1],NULL,8);
   11664:	ee 0c       	add	r14, r14
   11666:	ff 1c       	adc	r15, r15
   11668:	f4 01       	movw	r30, r8
   1166a:	ee 0d       	add	r30, r14
   1166c:	ff 1d       	adc	r31, r15
   1166e:	48 e0       	ldi	r20, 0x08	; 8
   11670:	50 e0       	ldi	r21, 0x00	; 0
   11672:	60 e0       	ldi	r22, 0x00	; 0
   11674:	70 e0       	ldi	r23, 0x00	; 0
   11676:	80 81       	ld	r24, Z
   11678:	91 81       	ldd	r25, Z+1	; 0x01
   1167a:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <strtol>
   1167e:	ab 01       	movw	r20, r22
   11680:	02 c0       	rjmp	.+4      	; 0x11686 <posix_tests+0x2ec>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   11682:	4f ef       	ldi	r20, 0xFF	; 255
   11684:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   11686:	05 2e       	mov	r0, r21
   11688:	00 0c       	add	r0, r0
   1168a:	66 0b       	sbc	r22, r22
   1168c:	77 0b       	sbc	r23, r23
   1168e:	73 01       	movw	r14, r6
   11690:	ee 0c       	add	r14, r14
   11692:	ff 1c       	adc	r15, r15
   11694:	f4 01       	movw	r30, r8
   11696:	ee 0d       	add	r30, r14
   11698:	ff 1d       	adc	r31, r15
   1169a:	80 81       	ld	r24, Z
   1169c:	91 81       	ldd	r25, Z+1	; 0x01
   1169e:	0e 94 02 7d 	call	0xfa04	; 0xfa04 <mkdir>
   116a2:	b5 c0       	rjmp	.+362    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   116a4:	98 01       	movw	r18, r16
   116a6:	a7 01       	movw	r20, r14
   116a8:	61 e5       	ldi	r22, 0x51	; 81
   116aa:	7b e0       	ldi	r23, 0x0B	; 11
   116ac:	c6 01       	movw	r24, r12
   116ae:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   116b2:	89 2b       	or	r24, r25
   116b4:	79 f0       	breq	.+30     	; 0x116d4 <posix_tests+0x33a>
    {
        setpage(atoi(argv[ind]));
   116b6:	73 01       	movw	r14, r6
   116b8:	ee 0c       	add	r14, r14
   116ba:	ff 1c       	adc	r15, r15
   116bc:	f4 01       	movw	r30, r8
   116be:	ee 0d       	add	r30, r14
   116c0:	ff 1d       	adc	r31, r15
   116c2:	80 81       	ld	r24, Z
   116c4:	91 81       	ldd	r25, Z+1	; 0x01
   116c6:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   116ca:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   116ce:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
   116d2:	9d c0       	rjmp	.+314    	; 0x1180e <posix_tests+0x474>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   116d4:	98 01       	movw	r18, r16
   116d6:	a3 01       	movw	r20, r6
   116d8:	66 e5       	ldi	r22, 0x56	; 86
   116da:	7b e0       	ldi	r23, 0x0B	; 11
   116dc:	c6 01       	movw	r24, r12
   116de:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   116e2:	89 2b       	or	r24, r25
   116e4:	a9 f0       	breq	.+42     	; 0x11710 <posix_tests+0x376>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   116e6:	6e ef       	ldi	r22, 0xFE	; 254
   116e8:	70 e0       	ldi	r23, 0x00	; 0
   116ea:	ce 01       	movw	r24, r28
   116ec:	01 96       	adiw	r24, 0x01	; 1
   116ee:	0e 94 dd 7c 	call	0xf9ba	; 0xf9ba <getcwd>
   116f2:	9f 93       	push	r25
   116f4:	8f 93       	push	r24
   116f6:	8a e5       	ldi	r24, 0x5A	; 90
   116f8:	9e e0       	ldi	r25, 0x0E	; 14
   116fa:	1f 92       	push	r1
   116fc:	9f 93       	push	r25
   116fe:	8f 93       	push	r24
   11700:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11704:	0f 90       	pop	r0
   11706:	0f 90       	pop	r0
   11708:	0f 90       	pop	r0
   1170a:	0f 90       	pop	r0
   1170c:	0f 90       	pop	r0
   1170e:	7f c0       	rjmp	.+254    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   11710:	98 01       	movw	r18, r16
   11712:	a5 01       	movw	r20, r10
   11714:	6a e5       	ldi	r22, 0x5A	; 90
   11716:	7b e0       	ldi	r23, 0x0B	; 11
   11718:	c6 01       	movw	r24, r12
   1171a:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1171e:	89 2b       	or	r24, r25
   11720:	69 f0       	breq	.+26     	; 0x1173c <posix_tests+0x3a2>
    {
        rename(argv[ind],argv[ind+1]);
   11722:	ee 0c       	add	r14, r14
   11724:	ff 1c       	adc	r15, r15
   11726:	f4 01       	movw	r30, r8
   11728:	ee 0d       	add	r30, r14
   1172a:	ff 1d       	adc	r31, r15
   1172c:	60 81       	ld	r22, Z
   1172e:	71 81       	ldd	r23, Z+1	; 0x01
   11730:	32 97       	sbiw	r30, 0x02	; 2
   11732:	80 81       	ld	r24, Z
   11734:	91 81       	ldd	r25, Z+1	; 0x01
   11736:	0e 94 30 7d 	call	0xfa60	; 0xfa60 <rename>
   1173a:	69 c0       	rjmp	.+210    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1173c:	98 01       	movw	r18, r16
   1173e:	a7 01       	movw	r20, r14
   11740:	61 e6       	ldi	r22, 0x61	; 97
   11742:	7b e0       	ldi	r23, 0x0B	; 11
   11744:	c6 01       	movw	r24, r12
   11746:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1174a:	89 2b       	or	r24, r25
   1174c:	59 f0       	breq	.+22     	; 0x11764 <posix_tests+0x3ca>
    {
        unlink(argv[ind]);
   1174e:	73 01       	movw	r14, r6
   11750:	ee 0c       	add	r14, r14
   11752:	ff 1c       	adc	r15, r15
   11754:	f4 01       	movw	r30, r8
   11756:	ee 0d       	add	r30, r14
   11758:	ff 1d       	adc	r31, r15
   1175a:	80 81       	ld	r24, Z
   1175c:	91 81       	ldd	r25, Z+1	; 0x01
   1175e:	0e 94 4f 7d 	call	0xfa9e	; 0xfa9e <unlink>
   11762:	55 c0       	rjmp	.+170    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"sum", (ind + 1), argc))
   11764:	98 01       	movw	r18, r16
   11766:	a7 01       	movw	r20, r14
   11768:	64 e6       	ldi	r22, 0x64	; 100
   1176a:	7b e0       	ldi	r23, 0x0B	; 11
   1176c:	c6 01       	movw	r24, r12
   1176e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   11772:	89 2b       	or	r24, r25
   11774:	51 f0       	breq	.+20     	; 0x1178a <posix_tests+0x3f0>
    {
        sum(argv[ind]);
   11776:	73 01       	movw	r14, r6
   11778:	ee 0c       	add	r14, r14
   1177a:	ff 1c       	adc	r15, r15
   1177c:	f4 01       	movw	r30, r8
   1177e:	ee 0d       	add	r30, r14
   11780:	ff 1d       	adc	r31, r15
   11782:	80 81       	ld	r24, Z
   11784:	91 81       	ldd	r25, Z+1	; 0x01
   11786:	53 dd       	rcall	.-1370   	; 0x1122e <sum>
   11788:	42 c0       	rjmp	.+132    	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"stat", (ind + 1), argc))
   1178a:	98 01       	movw	r18, r16
   1178c:	a7 01       	movw	r20, r14
   1178e:	68 e6       	ldi	r22, 0x68	; 104
   11790:	7b e0       	ldi	r23, 0x0B	; 11
   11792:	c6 01       	movw	r24, r12
   11794:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   11798:	89 2b       	or	r24, r25
   1179a:	91 f0       	breq	.+36     	; 0x117c0 <posix_tests+0x426>
    {
        struct stat p;  
        stat(argv[ind], &p);                        // POSIX test
   1179c:	73 01       	movw	r14, r6
   1179e:	ee 0c       	add	r14, r14
   117a0:	ff 1c       	adc	r15, r15
   117a2:	f4 01       	movw	r30, r8
   117a4:	ee 0d       	add	r30, r14
   117a6:	ff 1d       	adc	r31, r15
   117a8:	be 01       	movw	r22, r28
   117aa:	6f 5f       	subi	r22, 0xFF	; 255
   117ac:	7f 4f       	sbci	r23, 0xFF	; 255
   117ae:	80 81       	ld	r24, Z
   117b0:	91 81       	ldd	r25, Z+1	; 0x01
   117b2:	0e 94 25 7f 	call	0xfe4a	; 0xfe4a <stat>
        dump_stat(&p);
   117b6:	ce 01       	movw	r24, r28
   117b8:	01 96       	adiw	r24, 0x01	; 1
   117ba:	0e 94 da 7b 	call	0xf7b4	; 0xf7b4 <dump_stat>
   117be:	27 c0       	rjmp	.+78     	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   117c0:	98 01       	movw	r18, r16
   117c2:	a7 01       	movw	r20, r14
   117c4:	6d e6       	ldi	r22, 0x6D	; 109
   117c6:	7b e0       	ldi	r23, 0x0B	; 11
   117c8:	c6 01       	movw	r24, r12
   117ca:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   117ce:	89 2b       	or	r24, r25
   117d0:	59 f0       	breq	.+22     	; 0x117e8 <posix_tests+0x44e>
    {
        rmdir(argv[ind]);
   117d2:	73 01       	movw	r14, r6
   117d4:	ee 0c       	add	r14, r14
   117d6:	ff 1c       	adc	r15, r15
   117d8:	f4 01       	movw	r30, r8
   117da:	ee 0d       	add	r30, r14
   117dc:	ff 1d       	adc	r31, r15
   117de:	80 81       	ld	r24, Z
   117e0:	91 81       	ldd	r25, Z+1	; 0x01
   117e2:	0e 94 6e 7d 	call	0xfadc	; 0xfadc <rmdir>
   117e6:	13 c0       	rjmp	.+38     	; 0x1180e <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"upload", (ind + 1), argc))
   117e8:	98 01       	movw	r18, r16
   117ea:	a7 01       	movw	r20, r14
   117ec:	63 e7       	ldi	r22, 0x73	; 115
   117ee:	7b e0       	ldi	r23, 0x0B	; 11
   117f0:	c6 01       	movw	r24, r12
   117f2:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   117f6:	89 2b       	or	r24, r25
   117f8:	09 f4       	brne	.+2      	; 0x117fc <posix_tests+0x462>
   117fa:	db cd       	rjmp	.-1098   	; 0x113b2 <posix_tests+0x18>
    {
        upload(argv[ind]);
   117fc:	73 01       	movw	r14, r6
   117fe:	ee 0c       	add	r14, r14
   11800:	ff 1c       	adc	r15, r15
   11802:	f4 01       	movw	r30, r8
   11804:	ee 0d       	add	r30, r14
   11806:	ff 1d       	adc	r31, r15
   11808:	80 81       	ld	r24, Z
   1180a:	91 81       	ldd	r25, Z+1	; 0x01
   1180c:	60 dd       	rcall	.-1344   	; 0x112ce <upload>
        return(1);
   1180e:	81 e0       	ldi	r24, 0x01	; 1
   11810:	90 e0       	ldi	r25, 0x00	; 0
    }

    return(0);
}
   11812:	d3 95       	inc	r29
   11814:	e0 e1       	ldi	r30, 0x10	; 16
   11816:	0c 94 23 ed 	jmp	0x1da46	; 0x1da46 <__epilogue_restores__+0x4>

0001181a <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1181a:	61 e0       	ldi	r22, 0x01	; 1
   1181c:	70 e0       	ldi	r23, 0x00	; 0
   1181e:	8a ea       	ldi	r24, 0xAA	; 170
   11820:	9d e8       	ldi	r25, 0x8D	; 141
   11822:	0e 94 82 35 	call	0x6b04	; 0x6b04 <set_timers>
   11826:	01 96       	adiw	r24, 0x01	; 1
   11828:	51 f4       	brne	.+20     	; 0x1183e <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   1182a:	8b ef       	ldi	r24, 0xFB	; 251
   1182c:	9f e0       	ldi	r25, 0x0F	; 15
   1182e:	1f 92       	push	r1
   11830:	9f 93       	push	r25
   11832:	8f 93       	push	r24
   11834:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11838:	0f 90       	pop	r0
   1183a:	0f 90       	pop	r0

    gpib_timer_reset();
   1183c:	0f 90       	pop	r0
   1183e:	78 c1       	rjmp	.+752    	; 0x11b30 <gpib_timer_reset>
   11840:	08 95       	ret

00011842 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   11842:	28 2f       	mov	r18, r24
   11844:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   11846:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   11848:	88 0f       	add	r24, r24
        if(mask & 1)
   1184a:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1184c:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   1184e:	26 95       	lsr	r18
   11850:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   11852:	d1 f7       	brne	.-12     	; 0x11848 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   11854:	08 95       	ret

00011856 <ppr_set>:
   11856:	f5 df       	rcall	.-22     	; 0x11842 <reverse_8bits>
   11858:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <_ppr_reg>
   1185c:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <SPI0_TXRX_Byte>
   11860:	2a 9a       	sbi	0x05, 2	; 5
   11862:	22 9a       	sbi	0x04, 2	; 4
   11864:	2a 98       	cbi	0x05, 2	; 5
   11866:	22 9a       	sbi	0x04, 2	; 4
   11868:	08 95       	ret

0001186a <ppr_reg>:
   1186a:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <_ppr_reg>
   1186e:	e9 cf       	rjmp	.-46     	; 0x11842 <reverse_8bits>
   11870:	08 95       	ret

00011872 <ppr_init>:
   11872:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11876:	81 ff       	sbrs	r24, 1
   11878:	0a c0       	rjmp	.+20     	; 0x1188e <ppr_init+0x1c>
   1187a:	88 ee       	ldi	r24, 0xE8	; 232
   1187c:	9f e0       	ldi	r25, 0x0F	; 15
   1187e:	1f 92       	push	r1
   11880:	9f 93       	push	r25
   11882:	8f 93       	push	r24
   11884:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11888:	0f 90       	pop	r0
   1188a:	0f 90       	pop	r0
   1188c:	0f 90       	pop	r0
   1188e:	80 e0       	ldi	r24, 0x00	; 0
   11890:	e2 cf       	rjmp	.-60     	; 0x11856 <ppr_set>
   11892:	08 95       	ret

00011894 <ppr_bit_set>:
   11894:	21 e0       	ldi	r18, 0x01	; 1
   11896:	30 e0       	ldi	r19, 0x00	; 0
   11898:	01 c0       	rjmp	.+2      	; 0x1189c <ppr_bit_set+0x8>
   1189a:	22 0f       	add	r18, r18
   1189c:	8a 95       	dec	r24
   1189e:	ea f7       	brpl	.-6      	; 0x1189a <ppr_bit_set+0x6>
   118a0:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <_ppr_reg>
   118a4:	82 2b       	or	r24, r18
   118a6:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <_ppr_reg>
   118aa:	d5 cf       	rjmp	.-86     	; 0x11856 <ppr_set>
   118ac:	08 95       	ret

000118ae <ppr_bit_clr>:
   118ae:	21 e0       	ldi	r18, 0x01	; 1
   118b0:	30 e0       	ldi	r19, 0x00	; 0
   118b2:	01 c0       	rjmp	.+2      	; 0x118b6 <ppr_bit_clr+0x8>
   118b4:	22 0f       	add	r18, r18
   118b6:	8a 95       	dec	r24
   118b8:	ea f7       	brpl	.-6      	; 0x118b4 <ppr_bit_clr+0x6>
   118ba:	20 95       	com	r18
   118bc:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <_ppr_reg>
   118c0:	82 23       	and	r24, r18
   118c2:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <_ppr_reg>
   118c6:	c7 cf       	rjmp	.-114    	; 0x11856 <ppr_set>
   118c8:	08 95       	ret

000118ca <dbf_open>:
   118ca:	0f 93       	push	r16
   118cc:	1f 93       	push	r17
   118ce:	cf 93       	push	r28
   118d0:	df 93       	push	r29
   118d2:	16 2f       	mov	r17, r22
   118d4:	07 2f       	mov	r16, r23
   118d6:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <f_open>
   118da:	ec 01       	movw	r28, r24
   118dc:	89 2b       	or	r24, r25
   118de:	89 f0       	breq	.+34     	; 0x11902 <dbf_open+0x38>
   118e0:	0f 93       	push	r16
   118e2:	1f 93       	push	r17
   118e4:	87 ed       	ldi	r24, 0xD7	; 215
   118e6:	9f e0       	ldi	r25, 0x0F	; 15
   118e8:	1f 92       	push	r1
   118ea:	9f 93       	push	r25
   118ec:	8f 93       	push	r24
   118ee:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   118f2:	ce 01       	movw	r24, r28
   118f4:	0e 94 75 75 	call	0xeaea	; 0xeaea <put_rc>
   118f8:	0f 90       	pop	r0
   118fa:	0f 90       	pop	r0
   118fc:	0f 90       	pop	r0
   118fe:	0f 90       	pop	r0
   11900:	0f 90       	pop	r0
   11902:	ce 01       	movw	r24, r28
   11904:	df 91       	pop	r29
   11906:	cf 91       	pop	r28
   11908:	1f 91       	pop	r17
   1190a:	0f 91       	pop	r16
   1190c:	08 95       	ret

0001190e <dbf_read>:
   1190e:	cf 93       	push	r28
   11910:	df 93       	push	r29
   11912:	0e 94 e5 5a 	call	0xb5ca	; 0xb5ca <f_read>
   11916:	ec 01       	movw	r28, r24
   11918:	89 2b       	or	r24, r25
   1191a:	69 f0       	breq	.+26     	; 0x11936 <dbf_read+0x28>
   1191c:	8a ec       	ldi	r24, 0xCA	; 202
   1191e:	9f e0       	ldi	r25, 0x0F	; 15
   11920:	1f 92       	push	r1
   11922:	9f 93       	push	r25
   11924:	8f 93       	push	r24
   11926:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1192a:	ce 01       	movw	r24, r28
   1192c:	0e 94 75 75 	call	0xeaea	; 0xeaea <put_rc>
   11930:	0f 90       	pop	r0
   11932:	0f 90       	pop	r0
   11934:	0f 90       	pop	r0
   11936:	ce 01       	movw	r24, r28
   11938:	df 91       	pop	r29
   1193a:	cf 91       	pop	r28
   1193c:	08 95       	ret

0001193e <dbf_write>:
   1193e:	cf 93       	push	r28
   11940:	df 93       	push	r29
   11942:	0e 94 30 5c 	call	0xb860	; 0xb860 <f_write>
   11946:	ec 01       	movw	r28, r24
   11948:	89 2b       	or	r24, r25
   1194a:	69 f0       	breq	.+26     	; 0x11966 <dbf_write+0x28>
   1194c:	8c eb       	ldi	r24, 0xBC	; 188
   1194e:	9f e0       	ldi	r25, 0x0F	; 15
   11950:	1f 92       	push	r1
   11952:	9f 93       	push	r25
   11954:	8f 93       	push	r24
   11956:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1195a:	ce 01       	movw	r24, r28
   1195c:	0e 94 75 75 	call	0xeaea	; 0xeaea <put_rc>
   11960:	0f 90       	pop	r0
   11962:	0f 90       	pop	r0
   11964:	0f 90       	pop	r0
   11966:	ce 01       	movw	r24, r28
   11968:	df 91       	pop	r29
   1196a:	cf 91       	pop	r28
   1196c:	08 95       	ret

0001196e <dbf_lseek>:
   1196e:	cf 93       	push	r28
   11970:	df 93       	push	r29
   11972:	0e 94 ef 5f 	call	0xbfde	; 0xbfde <f_lseek>
   11976:	ec 01       	movw	r28, r24
   11978:	89 2b       	or	r24, r25
   1197a:	69 f0       	breq	.+26     	; 0x11996 <dbf_lseek+0x28>
   1197c:	8f ea       	ldi	r24, 0xAF	; 175
   1197e:	9f e0       	ldi	r25, 0x0F	; 15
   11980:	1f 92       	push	r1
   11982:	9f 93       	push	r25
   11984:	8f 93       	push	r24
   11986:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1198a:	ce 01       	movw	r24, r28
   1198c:	0e 94 75 75 	call	0xeaea	; 0xeaea <put_rc>
   11990:	0f 90       	pop	r0
   11992:	0f 90       	pop	r0
   11994:	0f 90       	pop	r0
   11996:	ce 01       	movw	r24, r28
   11998:	df 91       	pop	r29
   1199a:	cf 91       	pop	r28
   1199c:	08 95       	ret

0001199e <dbf_close>:
   1199e:	cf 93       	push	r28
   119a0:	df 93       	push	r29
   119a2:	0e 94 47 5e 	call	0xbc8e	; 0xbc8e <f_close>
   119a6:	ec 01       	movw	r28, r24
   119a8:	89 2b       	or	r24, r25
   119aa:	69 f0       	breq	.+26     	; 0x119c6 <dbf_close+0x28>
   119ac:	81 ea       	ldi	r24, 0xA1	; 161
   119ae:	9f e0       	ldi	r25, 0x0F	; 15
   119b0:	1f 92       	push	r1
   119b2:	9f 93       	push	r25
   119b4:	8f 93       	push	r24
   119b6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   119ba:	ce 01       	movw	r24, r28
   119bc:	0e 94 75 75 	call	0xeaea	; 0xeaea <put_rc>
   119c0:	0f 90       	pop	r0
   119c2:	0f 90       	pop	r0
   119c4:	0f 90       	pop	r0
   119c6:	ce 01       	movw	r24, r28
   119c8:	df 91       	pop	r29
   119ca:	cf 91       	pop	r28
   119cc:	08 95       	ret

000119ce <dbf_open_read>:
   119ce:	a6 e2       	ldi	r26, 0x26	; 38
   119d0:	b2 e0       	ldi	r27, 0x02	; 2
   119d2:	ed ee       	ldi	r30, 0xED	; 237
   119d4:	fc e8       	ldi	r31, 0x8C	; 140
   119d6:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   119da:	4a 01       	movw	r8, r20
   119dc:	5b 01       	movw	r10, r22
   119de:	69 01       	movw	r12, r18
   119e0:	cb 5d       	subi	r28, 0xDB	; 219
   119e2:	dd 4f       	sbci	r29, 0xFD	; 253
   119e4:	19 82       	std	Y+1, r1	; 0x01
   119e6:	18 82       	st	Y, r1
   119e8:	c5 52       	subi	r28, 0x25	; 37
   119ea:	d2 40       	sbci	r29, 0x02	; 2
   119ec:	43 e0       	ldi	r20, 0x03	; 3
   119ee:	bc 01       	movw	r22, r24
   119f0:	ce 01       	movw	r24, r28
   119f2:	01 96       	adiw	r24, 0x01	; 1
   119f4:	6a df       	rcall	.-300    	; 0x118ca <dbf_open>
   119f6:	89 2b       	or	r24, r25
   119f8:	19 f0       	breq	.+6      	; 0x11a00 <dbf_open_read+0x32>
   119fa:	81 e1       	ldi	r24, 0x11	; 17
   119fc:	90 e0       	ldi	r25, 0x00	; 0
   119fe:	2f c0       	rjmp	.+94     	; 0x11a5e <dbf_open_read+0x90>
   11a00:	b5 01       	movw	r22, r10
   11a02:	a4 01       	movw	r20, r8
   11a04:	ce 01       	movw	r24, r28
   11a06:	01 96       	adiw	r24, 0x01	; 1
   11a08:	b2 df       	rcall	.-156    	; 0x1196e <dbf_lseek>
   11a0a:	89 2b       	or	r24, r25
   11a0c:	59 f0       	breq	.+22     	; 0x11a24 <dbf_open_read+0x56>
   11a0e:	85 e0       	ldi	r24, 0x05	; 5
   11a10:	90 e0       	ldi	r25, 0x00	; 0
   11a12:	f7 01       	movw	r30, r14
   11a14:	91 83       	std	Z+1, r25	; 0x01
   11a16:	80 83       	st	Z, r24
   11a18:	ce 01       	movw	r24, r28
   11a1a:	01 96       	adiw	r24, 0x01	; 1
   11a1c:	c0 df       	rcall	.-128    	; 0x1199e <dbf_close>
   11a1e:	8f ef       	ldi	r24, 0xFF	; 255
   11a20:	9f ef       	ldi	r25, 0xFF	; 255
   11a22:	27 c0       	rjmp	.+78     	; 0x11a72 <dbf_open_read+0xa4>
   11a24:	9e 01       	movw	r18, r28
   11a26:	2b 5d       	subi	r18, 0xDB	; 219
   11a28:	3d 4f       	sbci	r19, 0xFD	; 253
   11a2a:	a8 01       	movw	r20, r16
   11a2c:	b6 01       	movw	r22, r12
   11a2e:	ce 01       	movw	r24, r28
   11a30:	01 96       	adiw	r24, 0x01	; 1
   11a32:	6d df       	rcall	.-294    	; 0x1190e <dbf_read>
   11a34:	89 2b       	or	r24, r25
   11a36:	49 f4       	brne	.+18     	; 0x11a4a <dbf_open_read+0x7c>
   11a38:	cb 5d       	subi	r28, 0xDB	; 219
   11a3a:	dd 4f       	sbci	r29, 0xFD	; 253
   11a3c:	88 81       	ld	r24, Y
   11a3e:	99 81       	ldd	r25, Y+1	; 0x01
   11a40:	c5 52       	subi	r28, 0x25	; 37
   11a42:	d2 40       	sbci	r29, 0x02	; 2
   11a44:	08 17       	cp	r16, r24
   11a46:	19 07       	cpc	r17, r25
   11a48:	19 f0       	breq	.+6      	; 0x11a50 <dbf_open_read+0x82>
   11a4a:	81 e0       	ldi	r24, 0x01	; 1
   11a4c:	90 e0       	ldi	r25, 0x00	; 0
   11a4e:	e1 cf       	rjmp	.-62     	; 0x11a12 <dbf_open_read+0x44>
   11a50:	ce 01       	movw	r24, r28
   11a52:	01 96       	adiw	r24, 0x01	; 1
   11a54:	a4 df       	rcall	.-184    	; 0x1199e <dbf_close>
   11a56:	89 2b       	or	r24, r25
   11a58:	31 f0       	breq	.+12     	; 0x11a66 <dbf_open_read+0x98>
   11a5a:	80 e1       	ldi	r24, 0x10	; 16
   11a5c:	90 e0       	ldi	r25, 0x00	; 0
   11a5e:	f7 01       	movw	r30, r14
   11a60:	91 83       	std	Z+1, r25	; 0x01
   11a62:	80 83       	st	Z, r24
   11a64:	dc cf       	rjmp	.-72     	; 0x11a1e <dbf_open_read+0x50>
   11a66:	cb 5d       	subi	r28, 0xDB	; 219
   11a68:	dd 4f       	sbci	r29, 0xFD	; 253
   11a6a:	88 81       	ld	r24, Y
   11a6c:	99 81       	ldd	r25, Y+1	; 0x01
   11a6e:	c5 52       	subi	r28, 0x25	; 37
   11a70:	d2 40       	sbci	r29, 0x02	; 2
   11a72:	ca 5d       	subi	r28, 0xDA	; 218
   11a74:	dd 4f       	sbci	r29, 0xFD	; 253
   11a76:	ec e0       	ldi	r30, 0x0C	; 12
   11a78:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

00011a7c <dbf_open_write>:
   11a7c:	a6 e2       	ldi	r26, 0x26	; 38
   11a7e:	b2 e0       	ldi	r27, 0x02	; 2
   11a80:	e4 e4       	ldi	r30, 0x44	; 68
   11a82:	fd e8       	ldi	r31, 0x8D	; 141
   11a84:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   11a88:	4a 01       	movw	r8, r20
   11a8a:	5b 01       	movw	r10, r22
   11a8c:	69 01       	movw	r12, r18
   11a8e:	cb 5d       	subi	r28, 0xDB	; 219
   11a90:	dd 4f       	sbci	r29, 0xFD	; 253
   11a92:	19 82       	std	Y+1, r1	; 0x01
   11a94:	18 82       	st	Y, r1
   11a96:	c5 52       	subi	r28, 0x25	; 37
   11a98:	d2 40       	sbci	r29, 0x02	; 2
   11a9a:	43 e0       	ldi	r20, 0x03	; 3
   11a9c:	bc 01       	movw	r22, r24
   11a9e:	ce 01       	movw	r24, r28
   11aa0:	01 96       	adiw	r24, 0x01	; 1
   11aa2:	13 df       	rcall	.-474    	; 0x118ca <dbf_open>
   11aa4:	89 2b       	or	r24, r25
   11aa6:	19 f0       	breq	.+6      	; 0x11aae <dbf_open_write+0x32>
   11aa8:	81 e1       	ldi	r24, 0x11	; 17
   11aaa:	90 e0       	ldi	r25, 0x00	; 0
   11aac:	2f c0       	rjmp	.+94     	; 0x11b0c <dbf_open_write+0x90>
   11aae:	b5 01       	movw	r22, r10
   11ab0:	a4 01       	movw	r20, r8
   11ab2:	ce 01       	movw	r24, r28
   11ab4:	01 96       	adiw	r24, 0x01	; 1
   11ab6:	5b df       	rcall	.-330    	; 0x1196e <dbf_lseek>
   11ab8:	89 2b       	or	r24, r25
   11aba:	59 f0       	breq	.+22     	; 0x11ad2 <dbf_open_write+0x56>
   11abc:	85 e0       	ldi	r24, 0x05	; 5
   11abe:	90 e0       	ldi	r25, 0x00	; 0
   11ac0:	f7 01       	movw	r30, r14
   11ac2:	91 83       	std	Z+1, r25	; 0x01
   11ac4:	80 83       	st	Z, r24
   11ac6:	ce 01       	movw	r24, r28
   11ac8:	01 96       	adiw	r24, 0x01	; 1
   11aca:	69 df       	rcall	.-302    	; 0x1199e <dbf_close>
   11acc:	8f ef       	ldi	r24, 0xFF	; 255
   11ace:	9f ef       	ldi	r25, 0xFF	; 255
   11ad0:	27 c0       	rjmp	.+78     	; 0x11b20 <dbf_open_write+0xa4>
   11ad2:	9e 01       	movw	r18, r28
   11ad4:	2b 5d       	subi	r18, 0xDB	; 219
   11ad6:	3d 4f       	sbci	r19, 0xFD	; 253
   11ad8:	a8 01       	movw	r20, r16
   11ada:	b6 01       	movw	r22, r12
   11adc:	ce 01       	movw	r24, r28
   11ade:	01 96       	adiw	r24, 0x01	; 1
   11ae0:	2e df       	rcall	.-420    	; 0x1193e <dbf_write>
   11ae2:	89 2b       	or	r24, r25
   11ae4:	49 f4       	brne	.+18     	; 0x11af8 <dbf_open_write+0x7c>
   11ae6:	cb 5d       	subi	r28, 0xDB	; 219
   11ae8:	dd 4f       	sbci	r29, 0xFD	; 253
   11aea:	88 81       	ld	r24, Y
   11aec:	99 81       	ldd	r25, Y+1	; 0x01
   11aee:	c5 52       	subi	r28, 0x25	; 37
   11af0:	d2 40       	sbci	r29, 0x02	; 2
   11af2:	08 17       	cp	r16, r24
   11af4:	19 07       	cpc	r17, r25
   11af6:	19 f0       	breq	.+6      	; 0x11afe <dbf_open_write+0x82>
   11af8:	81 e0       	ldi	r24, 0x01	; 1
   11afa:	90 e0       	ldi	r25, 0x00	; 0
   11afc:	e1 cf       	rjmp	.-62     	; 0x11ac0 <dbf_open_write+0x44>
   11afe:	ce 01       	movw	r24, r28
   11b00:	01 96       	adiw	r24, 0x01	; 1
   11b02:	4d df       	rcall	.-358    	; 0x1199e <dbf_close>
   11b04:	89 2b       	or	r24, r25
   11b06:	31 f0       	breq	.+12     	; 0x11b14 <dbf_open_write+0x98>
   11b08:	80 e1       	ldi	r24, 0x10	; 16
   11b0a:	90 e0       	ldi	r25, 0x00	; 0
   11b0c:	f7 01       	movw	r30, r14
   11b0e:	91 83       	std	Z+1, r25	; 0x01
   11b10:	80 83       	st	Z, r24
   11b12:	dc cf       	rjmp	.-72     	; 0x11acc <dbf_open_write+0x50>
   11b14:	cb 5d       	subi	r28, 0xDB	; 219
   11b16:	dd 4f       	sbci	r29, 0xFD	; 253
   11b18:	88 81       	ld	r24, Y
   11b1a:	99 81       	ldd	r25, Y+1	; 0x01
   11b1c:	c5 52       	subi	r28, 0x25	; 37
   11b1e:	d2 40       	sbci	r29, 0x02	; 2
   11b20:	ca 5d       	subi	r28, 0xDA	; 218
   11b22:	dd 4f       	sbci	r29, 0xFD	; 253
   11b24:	ec e0       	ldi	r30, 0x0C	; 12
   11b26:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

00011b2a <gpib_timer_elapsed_begin>:
   11b2a:	0c 94 2e 36 	jmp	0x6c5c	; 0x6c5c <clock_elapsed_begin>
   11b2e:	08 95       	ret

00011b30 <gpib_timer_reset>:
   11b30:	f8 94       	cli
   11b32:	ea e0       	ldi	r30, 0x0A	; 10
   11b34:	fd e1       	ldi	r31, 0x1D	; 29
   11b36:	10 82       	st	Z, r1
   11b38:	11 82       	std	Z+1, r1	; 0x01
   11b3a:	12 82       	std	Z+2, r1	; 0x02
   11b3c:	13 82       	std	Z+3, r1	; 0x03
   11b3e:	14 82       	std	Z+4, r1	; 0x04
   11b40:	15 82       	std	Z+5, r1	; 0x05
   11b42:	16 82       	std	Z+6, r1	; 0x06
   11b44:	17 82       	std	Z+7, r1	; 0x07
   11b46:	81 e0       	ldi	r24, 0x01	; 1
   11b48:	80 87       	std	Z+8, r24	; 0x08
   11b4a:	78 94       	sei
   11b4c:	08 95       	ret

00011b4e <gpib_timer_elapsed_end>:
   11b4e:	0c 94 34 36 	jmp	0x6c68	; 0x6c68 <clock_elapsed_end>
   11b52:	08 95       	ret

00011b54 <gpib_timer_task>:
   11b54:	f8 94       	cli
   11b56:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <gpib_timer+0x4>
   11b5a:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <gpib_timer+0x5>
   11b5e:	a0 91 10 1d 	lds	r26, 0x1D10	; 0x801d10 <gpib_timer+0x6>
   11b62:	b0 91 11 1d 	lds	r27, 0x1D11	; 0x801d11 <gpib_timer+0x7>
   11b66:	89 2b       	or	r24, r25
   11b68:	8a 2b       	or	r24, r26
   11b6a:	8b 2b       	or	r24, r27
   11b6c:	a1 f0       	breq	.+40     	; 0x11b96 <gpib_timer_task+0x42>
   11b6e:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <gpib_timer+0x4>
   11b72:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <gpib_timer+0x5>
   11b76:	a0 91 10 1d 	lds	r26, 0x1D10	; 0x801d10 <gpib_timer+0x6>
   11b7a:	b0 91 11 1d 	lds	r27, 0x1D11	; 0x801d11 <gpib_timer+0x7>
   11b7e:	01 97       	sbiw	r24, 0x01	; 1
   11b80:	a1 09       	sbc	r26, r1
   11b82:	b1 09       	sbc	r27, r1
   11b84:	80 93 0e 1d 	sts	0x1D0E, r24	; 0x801d0e <gpib_timer+0x4>
   11b88:	90 93 0f 1d 	sts	0x1D0F, r25	; 0x801d0f <gpib_timer+0x5>
   11b8c:	a0 93 10 1d 	sts	0x1D10, r26	; 0x801d10 <gpib_timer+0x6>
   11b90:	b0 93 11 1d 	sts	0x1D11, r27	; 0x801d11 <gpib_timer+0x7>
   11b94:	03 c0       	rjmp	.+6      	; 0x11b9c <gpib_timer_task+0x48>
   11b96:	81 e0       	ldi	r24, 0x01	; 1
   11b98:	80 93 12 1d 	sts	0x1D12, r24	; 0x801d12 <gpib_timer+0x8>
   11b9c:	78 94       	sei
   11b9e:	08 95       	ret

00011ba0 <gpib_timeout_set>:
   11ba0:	f8 94       	cli
   11ba2:	ea e0       	ldi	r30, 0x0A	; 10
   11ba4:	fd e1       	ldi	r31, 0x1D	; 29
   11ba6:	64 83       	std	Z+4, r22	; 0x04
   11ba8:	75 83       	std	Z+5, r23	; 0x05
   11baa:	86 83       	std	Z+6, r24	; 0x06
   11bac:	97 83       	std	Z+7, r25	; 0x07
   11bae:	10 86       	std	Z+8, r1	; 0x08
   11bb0:	78 94       	sei
   11bb2:	08 95       	ret

00011bb4 <gpib_bus_read_init>:
   11bb4:	54 98       	cbi	0x0a, 4	; 10
   11bb6:	57 98       	cbi	0x0a, 7	; 10
   11bb8:	45 98       	cbi	0x08, 5	; 8
   11bba:	3d 9a       	sbi	0x07, 5	; 7
   11bbc:	11 b8       	out	0x01, r1	; 1
   11bbe:	2f ef       	ldi	r18, 0xFF	; 255
   11bc0:	22 b9       	out	0x02, r18	; 2
   11bc2:	43 98       	cbi	0x08, 3	; 8
   11bc4:	3b 9a       	sbi	0x07, 3	; 7
   11bc6:	21 98       	cbi	0x04, 1	; 4
   11bc8:	56 98       	cbi	0x0a, 6	; 10
   11bca:	20 98       	cbi	0x04, 0	; 4
   11bcc:	55 98       	cbi	0x0a, 5	; 10
   11bce:	89 2b       	or	r24, r25
   11bd0:	39 f4       	brne	.+14     	; 0x11be0 <gpib_bus_read_init+0x2c>
   11bd2:	52 98       	cbi	0x0a, 2	; 10
   11bd4:	53 98       	cbi	0x0a, 3	; 10
   11bd6:	8d e0       	ldi	r24, 0x0D	; 13
   11bd8:	8a 95       	dec	r24
   11bda:	f1 f7       	brne	.-4      	; 0x11bd8 <gpib_bus_read_init+0x24>
   11bdc:	00 00       	nop
   11bde:	04 c0       	rjmp	.+8      	; 0x11be8 <gpib_bus_read_init+0x34>
   11be0:	5b 98       	cbi	0x0b, 3	; 11
   11be2:	53 9a       	sbi	0x0a, 3	; 10
   11be4:	5a 98       	cbi	0x0b, 2	; 11
   11be6:	52 9a       	sbi	0x0a, 2	; 10
   11be8:	42 98       	cbi	0x08, 2	; 8
   11bea:	3a 9a       	sbi	0x07, 2	; 7
   11bec:	44 9a       	sbi	0x08, 4	; 8
   11bee:	3c 9a       	sbi	0x07, 4	; 7
   11bf0:	8d e0       	ldi	r24, 0x0D	; 13
   11bf2:	8a 95       	dec	r24
   11bf4:	f1 f7       	brne	.-4      	; 0x11bf2 <gpib_bus_read_init+0x3e>
   11bf6:	00 00       	nop
   11bf8:	08 95       	ret

00011bfa <gpib_bus_init>:
   11bfa:	10 92 8f 19 	sts	0x198F, r1	; 0x80198f <gpib_unread_f>
   11bfe:	11 b8       	out	0x01, r1	; 1
   11c00:	8f ef       	ldi	r24, 0xFF	; 255
   11c02:	82 b9       	out	0x02, r24	; 2
   11c04:	21 98       	cbi	0x04, 1	; 4
   11c06:	52 98       	cbi	0x0a, 2	; 10
   11c08:	53 98       	cbi	0x0a, 3	; 10
   11c0a:	54 98       	cbi	0x0a, 4	; 10
   11c0c:	57 98       	cbi	0x0a, 7	; 10
   11c0e:	56 98       	cbi	0x0a, 6	; 10
   11c10:	20 98       	cbi	0x04, 0	; 4
   11c12:	55 98       	cbi	0x0a, 5	; 10
   11c14:	45 98       	cbi	0x08, 5	; 8
   11c16:	3d 9a       	sbi	0x07, 5	; 7
   11c18:	43 98       	cbi	0x08, 3	; 8
   11c1a:	3b 9a       	sbi	0x07, 3	; 7
   11c1c:	42 98       	cbi	0x08, 2	; 8
   11c1e:	3a 9a       	sbi	0x07, 2	; 7
   11c20:	44 9a       	sbi	0x08, 4	; 8
   11c22:	3c 9a       	sbi	0x07, 4	; 7
   11c24:	8d e0       	ldi	r24, 0x0D	; 13
   11c26:	8a 95       	dec	r24
   11c28:	f1 f7       	brne	.-4      	; 0x11c26 <gpib_bus_init+0x2c>
   11c2a:	00 00       	nop
   11c2c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c30:	82 ff       	sbrs	r24, 2
   11c32:	0a c0       	rjmp	.+20     	; 0x11c48 <gpib_bus_init+0x4e>
   11c34:	84 ea       	ldi	r24, 0xA4	; 164
   11c36:	92 e1       	ldi	r25, 0x12	; 18
   11c38:	1f 92       	push	r1
   11c3a:	9f 93       	push	r25
   11c3c:	8f 93       	push	r24
   11c3e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11c42:	0f 90       	pop	r0
   11c44:	0f 90       	pop	r0
   11c46:	0f 90       	pop	r0
   11c48:	08 95       	ret

00011c4a <gpib_state_init>:
   11c4a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c4e:	82 ff       	sbrs	r24, 2
   11c50:	0a c0       	rjmp	.+20     	; 0x11c66 <gpib_state_init+0x1c>
   11c52:	81 e9       	ldi	r24, 0x91	; 145
   11c54:	92 e1       	ldi	r25, 0x12	; 18
   11c56:	1f 92       	push	r1
   11c58:	9f 93       	push	r25
   11c5a:	8f 93       	push	r24
   11c5c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11c60:	0f 90       	pop	r0
   11c62:	0f 90       	pop	r0
   11c64:	0f 90       	pop	r0
   11c66:	05 de       	rcall	.-1014   	; 0x11872 <ppr_init>
   11c68:	0e 94 68 98 	call	0x130d0	; 0x130d0 <listen_cleanup>
   11c6c:	0e 94 79 99 	call	0x132f2	; 0x132f2 <talk_cleanup>
   11c70:	10 92 16 1f 	sts	0x1F16, r1	; 0x801f16 <spoll>
   11c74:	10 92 19 1f 	sts	0x1F19, r1	; 0x801f19 <talking>
   11c78:	10 92 1c 1f 	sts	0x1F1C, r1	; 0x801f1c <talking_last>
   11c7c:	10 92 1b 1f 	sts	0x1F1B, r1	; 0x801f1b <listening>
   11c80:	10 92 15 1f 	sts	0x1F15, r1	; 0x801f15 <listening_last>
   11c84:	10 92 14 1d 	sts	0x1D14, r1	; 0x801d14 <lastcmd+0x1>
   11c88:	10 92 13 1d 	sts	0x1D13, r1	; 0x801d13 <lastcmd>
   11c8c:	10 92 18 1f 	sts	0x1F18, r1	; 0x801f18 <current+0x1>
   11c90:	10 92 17 1f 	sts	0x1F17, r1	; 0x801f17 <current>
   11c94:	10 92 1a 1f 	sts	0x1F1A, r1	; 0x801f1a <secondary>
   11c98:	08 95       	ret

00011c9a <gpib_enable_PPR>:
   11c9a:	cf 93       	push	r28
   11c9c:	df 93       	push	r29
   11c9e:	ec 01       	movw	r28, r24
   11ca0:	88 30       	cpi	r24, 0x08	; 8
   11ca2:	91 05       	cpc	r25, r1
   11ca4:	78 f0       	brcs	.+30     	; 0x11cc4 <gpib_enable_PPR+0x2a>
   11ca6:	df 93       	push	r29
   11ca8:	cf 93       	push	r28
   11caa:	8b e6       	ldi	r24, 0x6B	; 107
   11cac:	92 e1       	ldi	r25, 0x12	; 18
   11cae:	1f 92       	push	r1
   11cb0:	9f 93       	push	r25
   11cb2:	8f 93       	push	r24
   11cb4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11cb8:	0f 90       	pop	r0
   11cba:	0f 90       	pop	r0
   11cbc:	0f 90       	pop	r0
   11cbe:	0f 90       	pop	r0
   11cc0:	0f 90       	pop	r0
   11cc2:	19 c0       	rjmp	.+50     	; 0x11cf6 <gpib_enable_PPR+0x5c>
   11cc4:	e7 dd       	rcall	.-1074   	; 0x11894 <ppr_bit_set>
   11cc6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11cca:	81 ff       	sbrs	r24, 1
   11ccc:	14 c0       	rjmp	.+40     	; 0x11cf6 <gpib_enable_PPR+0x5c>
   11cce:	cd dd       	rcall	.-1126   	; 0x1186a <ppr_reg>
   11cd0:	1f 92       	push	r1
   11cd2:	8f 93       	push	r24
   11cd4:	df 93       	push	r29
   11cd6:	cf 93       	push	r28
   11cd8:	80 e5       	ldi	r24, 0x50	; 80
   11cda:	92 e1       	ldi	r25, 0x12	; 18
   11cdc:	1f 92       	push	r1
   11cde:	9f 93       	push	r25
   11ce0:	8f 93       	push	r24
   11ce2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11ce6:	8d b7       	in	r24, 0x3d	; 61
   11ce8:	9e b7       	in	r25, 0x3e	; 62
   11cea:	07 96       	adiw	r24, 0x07	; 7
   11cec:	0f b6       	in	r0, 0x3f	; 63
   11cee:	f8 94       	cli
   11cf0:	9e bf       	out	0x3e, r25	; 62
   11cf2:	0f be       	out	0x3f, r0	; 63
   11cf4:	8d bf       	out	0x3d, r24	; 61
   11cf6:	df 91       	pop	r29
   11cf8:	cf 91       	pop	r28
   11cfa:	08 95       	ret

00011cfc <gpib_disable_PPR>:
   11cfc:	cf 93       	push	r28
   11cfe:	df 93       	push	r29
   11d00:	ec 01       	movw	r28, r24
   11d02:	88 30       	cpi	r24, 0x08	; 8
   11d04:	91 05       	cpc	r25, r1
   11d06:	78 f0       	brcs	.+30     	; 0x11d26 <gpib_disable_PPR+0x2a>
   11d08:	df 93       	push	r29
   11d0a:	cf 93       	push	r28
   11d0c:	89 e2       	ldi	r24, 0x29	; 41
   11d0e:	92 e1       	ldi	r25, 0x12	; 18
   11d10:	1f 92       	push	r1
   11d12:	9f 93       	push	r25
   11d14:	8f 93       	push	r24
   11d16:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11d1a:	0f 90       	pop	r0
   11d1c:	0f 90       	pop	r0
   11d1e:	0f 90       	pop	r0
   11d20:	0f 90       	pop	r0
   11d22:	0f 90       	pop	r0
   11d24:	19 c0       	rjmp	.+50     	; 0x11d58 <gpib_disable_PPR+0x5c>
   11d26:	c3 dd       	rcall	.-1146   	; 0x118ae <ppr_bit_clr>
   11d28:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d2c:	81 ff       	sbrs	r24, 1
   11d2e:	14 c0       	rjmp	.+40     	; 0x11d58 <gpib_disable_PPR+0x5c>
   11d30:	9c dd       	rcall	.-1224   	; 0x1186a <ppr_reg>
   11d32:	1f 92       	push	r1
   11d34:	8f 93       	push	r24
   11d36:	df 93       	push	r29
   11d38:	cf 93       	push	r28
   11d3a:	8e e0       	ldi	r24, 0x0E	; 14
   11d3c:	92 e1       	ldi	r25, 0x12	; 18
   11d3e:	1f 92       	push	r1
   11d40:	9f 93       	push	r25
   11d42:	8f 93       	push	r24
   11d44:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11d48:	8d b7       	in	r24, 0x3d	; 61
   11d4a:	9e b7       	in	r25, 0x3e	; 62
   11d4c:	07 96       	adiw	r24, 0x07	; 7
   11d4e:	0f b6       	in	r0, 0x3f	; 63
   11d50:	f8 94       	cli
   11d52:	9e bf       	out	0x3e, r25	; 62
   11d54:	0f be       	out	0x3f, r0	; 63
   11d56:	8d bf       	out	0x3d, r24	; 61
   11d58:	df 91       	pop	r29
   11d5a:	cf 91       	pop	r28
   11d5c:	08 95       	ret

00011d5e <gpib_assert_ifc>:
   11d5e:	5c 98       	cbi	0x0b, 4	; 11
   11d60:	54 9a       	sbi	0x0a, 4	; 10
   11d62:	6a ef       	ldi	r22, 0xFA	; 250
   11d64:	70 e0       	ldi	r23, 0x00	; 0
   11d66:	80 e0       	ldi	r24, 0x00	; 0
   11d68:	90 e0       	ldi	r25, 0x00	; 0
   11d6a:	0e 94 99 2a 	call	0x5532	; 0x5532 <delayus>
   11d6e:	54 98       	cbi	0x0a, 4	; 10
   11d70:	6a ef       	ldi	r22, 0xFA	; 250
   11d72:	70 e0       	ldi	r23, 0x00	; 0
   11d74:	80 e0       	ldi	r24, 0x00	; 0
   11d76:	90 e0       	ldi	r25, 0x00	; 0
   11d78:	0e 94 99 2a 	call	0x5532	; 0x5532 <delayus>
   11d7c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d80:	82 ff       	sbrs	r24, 2
   11d82:	0a c0       	rjmp	.+20     	; 0x11d98 <gpib_assert_ifc+0x3a>
   11d84:	8f ed       	ldi	r24, 0xDF	; 223
   11d86:	91 e1       	ldi	r25, 0x11	; 17
   11d88:	1f 92       	push	r1
   11d8a:	9f 93       	push	r25
   11d8c:	8f 93       	push	r24
   11d8e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11d92:	0f 90       	pop	r0
   11d94:	0f 90       	pop	r0
   11d96:	0f 90       	pop	r0
   11d98:	08 95       	ret

00011d9a <gpib_unread>:
   11d9a:	cf 93       	push	r28
   11d9c:	df 93       	push	r29
   11d9e:	ec 01       	movw	r28, r24
   11da0:	80 91 8f 19 	lds	r24, 0x198F	; 0x80198f <gpib_unread_f>
   11da4:	81 11       	cpse	r24, r1
   11da6:	08 c0       	rjmp	.+16     	; 0x11db8 <gpib_unread+0x1e>
   11da8:	d0 93 1e 1f 	sts	0x1F1E, r29	; 0x801f1e <gpib_unread_data+0x1>
   11dac:	c0 93 1d 1f 	sts	0x1F1D, r28	; 0x801f1d <gpib_unread_data>
   11db0:	81 e0       	ldi	r24, 0x01	; 1
   11db2:	80 93 8f 19 	sts	0x198F, r24	; 0x80198f <gpib_unread_f>
   11db6:	12 c0       	rjmp	.+36     	; 0x11ddc <gpib_unread+0x42>
   11db8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11dbc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11dc0:	85 70       	andi	r24, 0x05	; 5
   11dc2:	99 27       	eor	r25, r25
   11dc4:	89 2b       	or	r24, r25
   11dc6:	51 f0       	breq	.+20     	; 0x11ddc <gpib_unread+0x42>
   11dc8:	8c e9       	ldi	r24, 0x9C	; 156
   11dca:	91 e1       	ldi	r25, 0x11	; 17
   11dcc:	1f 92       	push	r1
   11dce:	9f 93       	push	r25
   11dd0:	8f 93       	push	r24
   11dd2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11dd6:	0f 90       	pop	r0
   11dd8:	0f 90       	pop	r0
   11dda:	0f 90       	pop	r0
   11ddc:	ce 01       	movw	r24, r28
   11dde:	df 91       	pop	r29
   11de0:	cf 91       	pop	r28
   11de2:	08 95       	ret

00011de4 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   11de4:	11 b8       	out	0x01, r1	; 1
   11de6:	80 b1       	in	r24, 0x00	; 0
   11de8:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   11dea:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   11dec:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   11dee:	08 95       	ret

00011df0 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   11df0:	4e 99       	sbic	0x09, 6	; 9
   11df2:	03 c0       	rjmp	.+6      	; 0x11dfa <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   11df4:	80 e0       	ldi	r24, 0x00	; 0
   11df6:	94 e0       	ldi	r25, 0x04	; 4
   11df8:	02 c0       	rjmp	.+4      	; 0x11dfe <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   11dfa:	80 e0       	ldi	r24, 0x00	; 0
   11dfc:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   11dfe:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   11e00:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11e02:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11e04:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   11e06:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   11e08:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   11e0a:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   11e0c:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11e0e:	08 95       	ret

00011e10 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11e10:	19 99       	sbic	0x03, 1	; 3
   11e12:	03 c0       	rjmp	.+6      	; 0x11e1a <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11e14:	80 e0       	ldi	r24, 0x00	; 0
   11e16:	90 e2       	ldi	r25, 0x20	; 32
   11e18:	02 c0       	rjmp	.+4      	; 0x11e1e <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   11e1a:	80 e0       	ldi	r24, 0x00	; 0
   11e1c:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   11e1e:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11e20:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11e22:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11e24:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   11e26:	08 95       	ret

00011e28 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   11e28:	2f 92       	push	r2
   11e2a:	3f 92       	push	r3
   11e2c:	4f 92       	push	r4
   11e2e:	6f 92       	push	r6
   11e30:	7f 92       	push	r7
   11e32:	8f 92       	push	r8
   11e34:	cf 92       	push	r12
   11e36:	df 92       	push	r13
   11e38:	ef 92       	push	r14
   11e3a:	1f 93       	push	r17
   11e3c:	cf 93       	push	r28
   11e3e:	df 93       	push	r29
   11e40:	cd b7       	in	r28, 0x3d	; 61
   11e42:	de b7       	in	r29, 0x3e	; 62
   11e44:	28 97       	sbiw	r28, 0x08	; 8
   11e46:	0f b6       	in	r0, 0x3f	; 63
   11e48:	f8 94       	cli
   11e4a:	de bf       	out	0x3e, r29	; 62
   11e4c:	0f be       	out	0x3f, r0	; 63
   11e4e:	cd bf       	out	0x3d, r28	; 61
   11e50:	98 87       	std	Y+8, r25	; 0x08
   11e52:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   11e54:	80 e0       	ldi	r24, 0x00	; 0
   11e56:	90 e0       	ldi	r25, 0x00	; 0
   11e58:	ad de       	rcall	.-678    	; 0x11bb4 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   11e5a:	64 ef       	ldi	r22, 0xF4	; 244
   11e5c:	71 e0       	ldi	r23, 0x01	; 1
   11e5e:	80 e0       	ldi	r24, 0x00	; 0
   11e60:	90 e0       	ldi	r25, 0x00	; 0
   11e62:	9e de       	rcall	.-708    	; 0x11ba0 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11e64:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11e66:	8a e0       	ldi	r24, 0x0A	; 10
   11e68:	91 e1       	ldi	r25, 0x11	; 17
   11e6a:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   11e6c:	84 e2       	ldi	r24, 0x24	; 36
   11e6e:	91 e1       	ldi	r25, 0x11	; 17
   11e70:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11e72:	8f e3       	ldi	r24, 0x3F	; 63
   11e74:	91 e1       	ldi	r25, 0x11	; 17
   11e76:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11e78:	8a e5       	ldi	r24, 0x5A	; 90
   11e7a:	91 e1       	ldi	r25, 0x11	; 17
   11e7c:	9c 01       	movw	r18, r24
   11e7e:	40 e0       	ldi	r20, 0x00	; 0
   11e80:	29 83       	std	Y+1, r18	; 0x01
   11e82:	3a 83       	std	Y+2, r19	; 0x02
   11e84:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11e86:	82 e8       	ldi	r24, 0x82	; 130
   11e88:	91 e1       	ldi	r25, 0x11	; 17
   11e8a:	9c 01       	movw	r18, r24
   11e8c:	40 e0       	ldi	r20, 0x00	; 0
   11e8e:	2c 83       	std	Y+4, r18	; 0x04
   11e90:	3d 83       	std	Y+5, r19	; 0x05
   11e92:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11e94:	80 e0       	ldi	r24, 0x00	; 0
   11e96:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   11e9a:	89 2b       	or	r24, r25
   11e9c:	09 f0       	breq	.+2      	; 0x11ea0 <gpib_write_byte+0x78>
   11e9e:	17 c1       	rjmp	.+558    	; 0x120ce <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11ea0:	4c 99       	sbic	0x09, 4	; 9
   11ea2:	07 c0       	rjmp	.+14     	; 0x11eb2 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   11ea4:	8f 81       	ldd	r24, Y+7	; 0x07
   11ea6:	98 85       	ldd	r25, Y+8	; 0x08
   11ea8:	90 61       	ori	r25, 0x10	; 16
   11eaa:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   11eac:	8f 83       	std	Y+7, r24	; 0x07
   11eae:	a5 de       	rcall	.-694    	; 0x11bfa <gpib_bus_init>
            break;
   11eb0:	0e c1       	rjmp	.+540    	; 0x120ce <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   11eb2:	81 2f       	mov	r24, r17
   11eb4:	90 e0       	ldi	r25, 0x00	; 0
   11eb6:	8a 30       	cpi	r24, 0x0A	; 10
   11eb8:	91 05       	cpc	r25, r1
   11eba:	08 f0       	brcs	.+2      	; 0x11ebe <gpib_write_byte+0x96>
   11ebc:	fe c0       	rjmp	.+508    	; 0x120ba <gpib_write_byte+0x292>
   11ebe:	fc 01       	movw	r30, r24
   11ec0:	e3 54       	subi	r30, 0x43	; 67
   11ec2:	ff 4f       	sbci	r31, 0xFF	; 255
   11ec4:	0c 94 c1 ec 	jmp	0x1d982	; 0x1d982 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11ec8:	19 9b       	sbis	0x03, 1	; 3
   11eca:	12 c0       	rjmp	.+36     	; 0x11ef0 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   11ecc:	42 9a       	sbi	0x08, 2	; 8
   11ece:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   11ed0:	44 98       	cbi	0x08, 4	; 8
   11ed2:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11ed4:	2f 81       	ldd	r18, Y+7	; 0x07
   11ed6:	38 85       	ldd	r19, Y+8	; 0x08
   11ed8:	32 ff       	sbrs	r19, 2
   11eda:	03 c0       	rjmp	.+6      	; 0x11ee2 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   11edc:	5e 98       	cbi	0x0b, 6	; 11
   11ede:	56 9a       	sbi	0x0a, 6	; 10
   11ee0:	01 c0       	rjmp	.+2      	; 0x11ee4 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11ee2:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11ee4:	64 ef       	ldi	r22, 0xF4	; 244
   11ee6:	71 e0       	ldi	r23, 0x01	; 1
   11ee8:	80 e0       	ldi	r24, 0x00	; 0
   11eea:	90 e0       	ldi	r25, 0x00	; 0
   11eec:	59 de       	rcall	.-846    	; 0x11ba0 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11eee:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11ef0:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11ef4:	88 23       	and	r24, r24
   11ef6:	71 f2       	breq	.-100    	; 0x11e94 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11ef8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11efc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f00:	85 70       	andi	r24, 0x05	; 5
   11f02:	99 27       	eor	r25, r25
   11f04:	89 2b       	or	r24, r25
   11f06:	39 f1       	breq	.+78     	; 0x11f56 <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   11f08:	1f 92       	push	r1
   11f0a:	3d 81       	ldd	r19, Y+5	; 0x05
   11f0c:	3f 93       	push	r19
   11f0e:	4c 81       	ldd	r20, Y+4	; 0x04
   11f10:	4f 93       	push	r20
   11f12:	1c c0       	rjmp	.+56     	; 0x11f4c <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11f14:	4a 9b       	sbis	0x09, 2	; 9
   11f16:	08 c0       	rjmp	.+16     	; 0x11f28 <gpib_write_byte+0x100>
   11f18:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   11f1a:	06 c0       	rjmp	.+12     	; 0x11f28 <gpib_write_byte+0x100>
   11f1c:	64 ef       	ldi	r22, 0xF4	; 244
   11f1e:	71 e0       	ldi	r23, 0x01	; 1
   11f20:	80 e0       	ldi	r24, 0x00	; 0
   11f22:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11f24:	3d de       	rcall	.-902    	; 0x11ba0 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11f26:	12 e0       	ldi	r17, 0x02	; 2
   11f28:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11f2c:	88 23       	and	r24, r24
   11f2e:	09 f4       	brne	.+2      	; 0x11f32 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11f30:	b1 cf       	rjmp	.-158    	; 0x11e94 <gpib_write_byte+0x6c>
   11f32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f36:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f3a:	85 70       	andi	r24, 0x05	; 5
   11f3c:	99 27       	eor	r25, r25
   11f3e:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11f40:	51 f0       	breq	.+20     	; 0x11f56 <gpib_write_byte+0x12e>
   11f42:	1f 92       	push	r1
   11f44:	9a 81       	ldd	r25, Y+2	; 0x02
   11f46:	9f 93       	push	r25
   11f48:	29 81       	ldd	r18, Y+1	; 0x01
   11f4a:	2f 93       	push	r18
   11f4c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   11f50:	0f 90       	pop	r0
   11f52:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   11f54:	0f 90       	pop	r0
   11f56:	8f 81       	ldd	r24, Y+7	; 0x07
   11f58:	98 85       	ldd	r25, Y+8	; 0x08
   11f5a:	90 64       	ori	r25, 0x40	; 64
   11f5c:	98 87       	std	Y+8, r25	; 0x08
   11f5e:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11f60:	b4 c0       	rjmp	.+360    	; 0x120ca <gpib_write_byte+0x2a2>
   11f62:	2f 81       	ldd	r18, Y+7	; 0x07
   11f64:	38 85       	ldd	r19, Y+8	; 0x08
   11f66:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   11f68:	03 c0       	rjmp	.+6      	; 0x11f70 <gpib_write_byte+0x148>
   11f6a:	28 98       	cbi	0x05, 0	; 5
   11f6c:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11f6e:	01 c0       	rjmp	.+2      	; 0x11f72 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11f70:	20 98       	cbi	0x04, 0	; 4
   11f72:	8f ef       	ldi	r24, 0xFF	; 255
   11f74:	81 b9       	out	0x01, r24	; 1
   11f76:	8f 81       	ldd	r24, Y+7	; 0x07
   11f78:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11f7a:	82 b9       	out	0x02, r24	; 2
   11f7c:	43 9a       	sbi	0x08, 3	; 8
   11f7e:	3b 9a       	sbi	0x07, 3	; 7
   11f80:	3d e0       	ldi	r19, 0x0D	; 13
   11f82:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11f84:	f1 f7       	brne	.-4      	; 0x11f82 <gpib_write_byte+0x15a>
   11f86:	00 00       	nop
   11f88:	64 ef       	ldi	r22, 0xF4	; 244
   11f8a:	71 e0       	ldi	r23, 0x01	; 1
   11f8c:	80 e0       	ldi	r24, 0x00	; 0
   11f8e:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11f90:	07 de       	rcall	.-1010   	; 0x11ba0 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11f92:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   11f94:	7f cf       	rjmp	.-258    	; 0x11e94 <gpib_write_byte+0x6c>
   11f96:	29 98       	cbi	0x05, 1	; 5
   11f98:	21 9a       	sbi	0x04, 1	; 4
   11f9a:	64 ef       	ldi	r22, 0xF4	; 244
   11f9c:	71 e0       	ldi	r23, 0x01	; 1
   11f9e:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11fa0:	90 e0       	ldi	r25, 0x00	; 0
   11fa2:	fe dd       	rcall	.-1028   	; 0x11ba0 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11fa4:	14 e0       	ldi	r17, 0x04	; 4
   11fa6:	76 cf       	rjmp	.-276    	; 0x11e94 <gpib_write_byte+0x6c>
   11fa8:	4a 99       	sbic	0x09, 2	; 9
   11faa:	07 c0       	rjmp	.+14     	; 0x11fba <gpib_write_byte+0x192>
   11fac:	64 ef       	ldi	r22, 0xF4	; 244
   11fae:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11fb0:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11fb2:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11fb4:	f5 dd       	rcall	.-1046   	; 0x11ba0 <gpib_timeout_set>
   11fb6:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11fb8:	6d cf       	rjmp	.-294    	; 0x11e94 <gpib_write_byte+0x6c>
   11fba:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11fbe:	88 23       	and	r24, r24
   11fc0:	09 f4       	brne	.+2      	; 0x11fc4 <gpib_write_byte+0x19c>
   11fc2:	68 cf       	rjmp	.-304    	; 0x11e94 <gpib_write_byte+0x6c>
   11fc4:	8f 81       	ldd	r24, Y+7	; 0x07
   11fc6:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11fc8:	90 64       	ori	r25, 0x40	; 64
   11fca:	98 87       	std	Y+8, r25	; 0x08
   11fcc:	8f 83       	std	Y+7, r24	; 0x07
   11fce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11fd2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fd6:	85 70       	andi	r24, 0x05	; 5
   11fd8:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11fda:	89 2b       	or	r24, r25
   11fdc:	09 f4       	brne	.+2      	; 0x11fe0 <gpib_write_byte+0x1b8>
   11fde:	75 c0       	rjmp	.+234    	; 0x120ca <gpib_write_byte+0x2a2>
   11fe0:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11fe2:	3f 92       	push	r3
   11fe4:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11fe6:	3f c0       	rjmp	.+126    	; 0x12066 <gpib_write_byte+0x23e>
   11fe8:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11fea:	6b c0       	rjmp	.+214    	; 0x120c2 <gpib_write_byte+0x29a>
   11fec:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11ff0:	88 23       	and	r24, r24
   11ff2:	09 f4       	brne	.+2      	; 0x11ff6 <gpib_write_byte+0x1ce>
   11ff4:	4f cf       	rjmp	.-354    	; 0x11e94 <gpib_write_byte+0x6c>
   11ff6:	2f 81       	ldd	r18, Y+7	; 0x07
   11ff8:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11ffa:	30 64       	ori	r19, 0x40	; 64
   11ffc:	38 87       	std	Y+8, r19	; 0x08
   11ffe:	2f 83       	std	Y+7, r18	; 0x07
   12000:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12004:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12008:	85 70       	andi	r24, 0x05	; 5
   1200a:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   1200c:	89 2b       	or	r24, r25
   1200e:	09 f4       	brne	.+2      	; 0x12012 <gpib_write_byte+0x1ea>
   12010:	5c c0       	rjmp	.+184    	; 0x120ca <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   12012:	1f 92       	push	r1
   12014:	7f 92       	push	r7
   12016:	6f 92       	push	r6
   12018:	26 c0       	rjmp	.+76     	; 0x12066 <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   1201a:	21 98       	cbi	0x04, 1	; 4
   1201c:	3d e0       	ldi	r19, 0x0D	; 13
   1201e:	3a 95       	dec	r19
   12020:	f1 f7       	brne	.-4      	; 0x1201e <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   12022:	00 00       	nop
   12024:	80 e0       	ldi	r24, 0x00	; 0
   12026:	90 e0       	ldi	r25, 0x00	; 0
   12028:	c5 dd       	rcall	.-1142   	; 0x11bb4 <gpib_bus_read_init>
   1202a:	64 ef       	ldi	r22, 0xF4	; 244
   1202c:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   1202e:	80 e0       	ldi	r24, 0x00	; 0
                break;
   12030:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   12032:	b6 dd       	rcall	.-1172   	; 0x11ba0 <gpib_timeout_set>
   12034:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   12036:	2e cf       	rjmp	.-420    	; 0x11e94 <gpib_write_byte+0x6c>
   12038:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   1203a:	45 c0       	rjmp	.+138    	; 0x120c6 <gpib_write_byte+0x29e>
   1203c:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   12040:	88 23       	and	r24, r24
   12042:	09 f4       	brne	.+2      	; 0x12046 <gpib_write_byte+0x21e>
   12044:	27 cf       	rjmp	.-434    	; 0x11e94 <gpib_write_byte+0x6c>
   12046:	8f 81       	ldd	r24, Y+7	; 0x07
   12048:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   1204a:	90 64       	ori	r25, 0x40	; 64
   1204c:	98 87       	std	Y+8, r25	; 0x08
   1204e:	8f 83       	std	Y+7, r24	; 0x07
   12050:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12054:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12058:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   1205a:	99 27       	eor	r25, r25
   1205c:	89 2b       	or	r24, r25
   1205e:	a9 f1       	breq	.+106    	; 0x120ca <gpib_write_byte+0x2a2>
   12060:	1f 92       	push	r1
   12062:	df 92       	push	r13
   12064:	cf 92       	push	r12
   12066:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1206a:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   1206c:	0f 90       	pop	r0
   1206e:	0f 90       	pop	r0
   12070:	2c c0       	rjmp	.+88     	; 0x120ca <gpib_write_byte+0x2a2>
   12072:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12076:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1207a:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   1207c:	99 27       	eor	r25, r25
   1207e:	89 2b       	or	r24, r25
   12080:	c1 f0       	breq	.+48     	; 0x120b2 <gpib_write_byte+0x28a>
   12082:	99 b1       	in	r25, 0x09	; 9
   12084:	89 b1       	in	r24, 0x09	; 9
   12086:	93 fb       	bst	r25, 3
   12088:	99 27       	eor	r25, r25
   1208a:	90 f9       	bld	r25, 0
   1208c:	1f 92       	push	r1
   1208e:	9f 93       	push	r25
   12090:	82 fb       	bst	r24, 2
   12092:	88 27       	eor	r24, r24
   12094:	80 f9       	bld	r24, 0
   12096:	1f 92       	push	r1
   12098:	8f 93       	push	r24
   1209a:	87 ef       	ldi	r24, 0xF7	; 247
   1209c:	90 e1       	ldi	r25, 0x10	; 16
   1209e:	1f 92       	push	r1
   120a0:	9f 93       	push	r25
   120a2:	8f 93       	push	r24
   120a4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   120a8:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   120aa:	f8 94       	cli
   120ac:	de bf       	out	0x3e, r29	; 62
   120ae:	0f be       	out	0x3f, r0	; 63
   120b0:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   120b2:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   120b4:	90 e0       	ldi	r25, 0x00	; 0
   120b6:	7e dd       	rcall	.-1284   	; 0x11bb4 <gpib_bus_read_init>
   120b8:	0a c0       	rjmp	.+20     	; 0x120ce <gpib_write_byte+0x2a6>
   120ba:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   120bc:	09 f0       	breq	.+2      	; 0x120c0 <gpib_write_byte+0x298>
   120be:	ea ce       	rjmp	.-556    	; 0x11e94 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   120c0:	06 c0       	rjmp	.+12     	; 0x120ce <gpib_write_byte+0x2a6>
   120c2:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   120c4:	e7 ce       	rjmp	.-562    	; 0x11e94 <gpib_write_byte+0x6c>
   120c6:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   120c8:	e5 ce       	rjmp	.-566    	; 0x11e94 <gpib_write_byte+0x6c>
   120ca:	19 e0       	ldi	r17, 0x09	; 9
   120cc:	e3 ce       	rjmp	.-570    	; 0x11e94 <gpib_write_byte+0x6c>
   120ce:	8f 81       	ldd	r24, Y+7	; 0x07
   120d0:	98 85       	ldd	r25, Y+8	; 0x08
   120d2:	28 96       	adiw	r28, 0x08	; 8
   120d4:	0f b6       	in	r0, 0x3f	; 63
   120d6:	f8 94       	cli
   120d8:	de bf       	out	0x3e, r29	; 62
   120da:	0f be       	out	0x3f, r0	; 63
   120dc:	cd bf       	out	0x3d, r28	; 61
   120de:	df 91       	pop	r29
   120e0:	cf 91       	pop	r28
   120e2:	1f 91       	pop	r17
   120e4:	ef 90       	pop	r14
   120e6:	df 90       	pop	r13
   120e8:	cf 90       	pop	r12
   120ea:	8f 90       	pop	r8
   120ec:	7f 90       	pop	r7
   120ee:	6f 90       	pop	r6
   120f0:	4f 90       	pop	r4
   120f2:	3f 90       	pop	r3
   120f4:	2f 90       	pop	r2
   120f6:	08 95       	ret

000120f8 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   120f8:	cf 93       	push	r28
   120fa:	df 93       	push	r29
   120fc:	ec 01       	movw	r28, r24
    if(fo == NULL)
   120fe:	89 2b       	or	r24, r25
   12100:	21 f4       	brne	.+8      	; 0x1210a <gpib_decode_header+0x12>
        fo = stdout;
   12102:	c0 91 ec 1c 	lds	r28, 0x1CEC	; 0x801cec <__iob+0x2>
   12106:	d0 91 ed 1c 	lds	r29, 0x1CED	; 0x801ced <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   1210a:	be 01       	movw	r22, r28
   1210c:	86 e8       	ldi	r24, 0x86	; 134
   1210e:	9b e0       	ldi	r25, 0x0B	; 11
   12110:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"GPIB bus state\n");
   12114:	be 01       	movw	r22, r28
   12116:	83 eb       	ldi	r24, 0xB3	; 179
   12118:	9b e0       	ldi	r25, 0x0B	; 11
   1211a:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   1211e:	be 01       	movw	r22, r28
   12120:	83 ec       	ldi	r24, 0xC3	; 195
   12122:	9b e0       	ldi	r25, 0x0B	; 11
   12124:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   12128:	be 01       	movw	r22, r28
   1212a:	87 ed       	ldi	r24, 0xD7	; 215
   1212c:	9b e0       	ldi	r25, 0x0B	; 11
   1212e:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   12132:	be 01       	movw	r22, r28
   12134:	8a ef       	ldi	r24, 0xFA	; 250
   12136:	9b e0       	ldi	r25, 0x0B	; 11
   12138:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"     A = ATN\n");
   1213c:	be 01       	movw	r22, r28
   1213e:	84 e2       	ldi	r24, 0x24	; 36
   12140:	9c e0       	ldi	r25, 0x0C	; 12
   12142:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"      E = EOI\n");
   12146:	be 01       	movw	r22, r28
   12148:	82 e3       	ldi	r24, 0x32	; 50
   1214a:	9c e0       	ldi	r25, 0x0C	; 12
   1214c:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"       S = SRQ\n");
   12150:	be 01       	movw	r22, r28
   12152:	81 e4       	ldi	r24, 0x41	; 65
   12154:	9c e0       	ldi	r25, 0x0C	; 12
   12156:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"        R = REN\n");
   1215a:	be 01       	movw	r22, r28
   1215c:	81 e5       	ldi	r24, 0x51	; 81
   1215e:	9c e0       	ldi	r25, 0x0C	; 12
   12160:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"         I = IFC\n");
   12164:	be 01       	movw	r22, r28
   12166:	82 e6       	ldi	r24, 0x62	; 98
   12168:	9c e0       	ldi	r25, 0x0C	; 12
   1216a:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   1216e:	be 01       	movw	r22, r28
   12170:	84 e7       	ldi	r24, 0x74	; 116
   12172:	9c e0       	ldi	r25, 0x0C	; 12
   12174:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   12178:	be 01       	movw	r22, r28
   1217a:	86 e9       	ldi	r24, 0x96	; 150
   1217c:	9c e0       	ldi	r25, 0x0C	; 12
   1217e:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   12182:	be 01       	movw	r22, r28
   12184:	8e ea       	ldi	r24, 0xAE	; 174
   12186:	9c e0       	ldi	r25, 0x0C	; 12
   12188:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
    fprintf(fo,"              GPIB commands\n");
   1218c:	be 01       	movw	r22, r28
   1218e:	89 ec       	ldi	r24, 0xC9	; 201
   12190:	9c e0       	ldi	r25, 0x0C	; 12
   12192:	0e 94 55 7b 	call	0xf6aa	; 0xf6aa <fputs>
}
   12196:	df 91       	pop	r29
   12198:	cf 91       	pop	r28
   1219a:	08 95       	ret

0001219c <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   1219c:	a0 e8       	ldi	r26, 0x80	; 128
   1219e:	b0 e0       	ldi	r27, 0x00	; 0
   121a0:	e4 ed       	ldi	r30, 0xD4	; 212
   121a2:	f0 e9       	ldi	r31, 0x90	; 144
   121a4:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   121a8:	8c 01       	movw	r16, r24
   121aa:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   121ac:	19 82       	std	Y+1, r1	; 0x01
   121ae:	4c 01       	movw	r8, r24
   121b0:	88 24       	eor	r8, r8
   121b2:	44 e0       	ldi	r20, 0x04	; 4
   121b4:	94 22       	and	r9, r20
   121b6:	ce 01       	movw	r24, r28
   121b8:	01 96       	adiw	r24, 0x01	; 1
   121ba:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   121bc:	62 30       	cpi	r22, 0x02	; 2
   121be:	71 05       	cpc	r23, r1
   121c0:	f0 f4       	brcc	.+60     	; 0x121fe <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   121c2:	81 14       	cp	r8, r1
   121c4:	91 04       	cpc	r9, r1
   121c6:	29 f4       	brne	.+10     	; 0x121d2 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   121c8:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   121ca:	90 ee       	ldi	r25, 0xE0	; 224
   121cc:	90 0f       	add	r25, r16
   121ce:	9f 35       	cpi	r25, 0x5F	; 95
   121d0:	08 f0       	brcs	.+2      	; 0x121d4 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   121d2:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   121d4:	1f 92       	push	r1
   121d6:	8f 93       	push	r24
   121d8:	c8 01       	movw	r24, r16
   121da:	99 27       	eor	r25, r25
   121dc:	9f 93       	push	r25
   121de:	8f 93       	push	r24
   121e0:	8e ee       	ldi	r24, 0xEE	; 238
   121e2:	90 e1       	ldi	r25, 0x10	; 16
   121e4:	1f 92       	push	r1
   121e6:	9f 93       	push	r25
   121e8:	8f 93       	push	r24
   121ea:	df 92       	push	r13
   121ec:	cf 92       	push	r12
   121ee:	0e 94 ed 46 	call	0x8dda	; 0x8dda <sprintf_P>
   121f2:	0f b6       	in	r0, 0x3f	; 63
   121f4:	f8 94       	cli
   121f6:	de bf       	out	0x3e, r29	; 62
   121f8:	0f be       	out	0x3f, r0	; 63
   121fa:	cd bf       	out	0x3d, r28	; 61
   121fc:	0e c0       	rjmp	.+28     	; 0x1221a <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   121fe:	88 ee       	ldi	r24, 0xE8	; 232
   12200:	90 e1       	ldi	r25, 0x10	; 16
   12202:	1f 92       	push	r1
   12204:	9f 93       	push	r25
   12206:	8f 93       	push	r24
   12208:	df 92       	push	r13
   1220a:	cf 92       	push	r12
   1220c:	0e 94 ed 46 	call	0x8dda	; 0x8dda <sprintf_P>
   12210:	0f 90       	pop	r0
   12212:	0f 90       	pop	r0
   12214:	0f 90       	pop	r0
   12216:	0f 90       	pop	r0
   12218:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   1221a:	f6 01       	movw	r30, r12
   1221c:	01 90       	ld	r0, Z+
   1221e:	00 20       	and	r0, r0
   12220:	e9 f7       	brne	.-6      	; 0x1221c <gpib_trace_display+0x80>
   12222:	31 97       	sbiw	r30, 0x01	; 1
   12224:	cf 01       	movw	r24, r30
   12226:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   12228:	81 14       	cp	r8, r1
   1222a:	91 04       	cpc	r9, r1
   1222c:	11 f0       	breq	.+4      	; 0x12232 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   1222e:	21 e4       	ldi	r18, 0x41	; 65
   12230:	01 c0       	rjmp	.+2      	; 0x12234 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   12232:	2d e2       	ldi	r18, 0x2D	; 45
   12234:	20 83       	st	Z, r18
   12236:	dc 01       	movw	r26, r24
   12238:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   1223a:	10 ff       	sbrs	r17, 0
   1223c:	02 c0       	rjmp	.+4      	; 0x12242 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   1223e:	25 e4       	ldi	r18, 0x45	; 69
   12240:	01 c0       	rjmp	.+2      	; 0x12244 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   12242:	2d e2       	ldi	r18, 0x2D	; 45
   12244:	fc 01       	movw	r30, r24
   12246:	20 83       	st	Z, r18
   12248:	fd 01       	movw	r30, r26
   1224a:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   1224c:	11 ff       	sbrs	r17, 1
   1224e:	02 c0       	rjmp	.+4      	; 0x12254 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   12250:	83 e5       	ldi	r24, 0x53	; 83
   12252:	01 c0       	rjmp	.+2      	; 0x12256 <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   12254:	8d e2       	ldi	r24, 0x2D	; 45
   12256:	8c 93       	st	X, r24
   12258:	df 01       	movw	r26, r30
   1225a:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   1225c:	13 ff       	sbrs	r17, 3
   1225e:	02 c0       	rjmp	.+4      	; 0x12264 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   12260:	82 e5       	ldi	r24, 0x52	; 82
   12262:	01 c0       	rjmp	.+2      	; 0x12266 <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   12264:	8d e2       	ldi	r24, 0x2D	; 45
   12266:	80 83       	st	Z, r24
   12268:	fd 01       	movw	r30, r26
   1226a:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   1226c:	14 ff       	sbrs	r17, 4
   1226e:	02 c0       	rjmp	.+4      	; 0x12274 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   12270:	89 e4       	ldi	r24, 0x49	; 73
   12272:	01 c0       	rjmp	.+2      	; 0x12276 <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   12274:	8d e2       	ldi	r24, 0x2D	; 45
   12276:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   12278:	a1 14       	cp	r10, r1
   1227a:	b1 04       	cpc	r11, r1
   1227c:	d1 f4       	brne	.+52     	; 0x122b2 <gpib_trace_display+0x116>
   1227e:	df 01       	movw	r26, r30
   12280:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   12282:	15 ff       	sbrs	r17, 5
   12284:	02 c0       	rjmp	.+4      	; 0x1228a <gpib_trace_display+0xee>
            *tmp++ = 'P';
   12286:	80 e5       	ldi	r24, 0x50	; 80
   12288:	01 c0       	rjmp	.+2      	; 0x1228c <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   1228a:	8d e2       	ldi	r24, 0x2D	; 45
   1228c:	80 83       	st	Z, r24
   1228e:	fd 01       	movw	r30, r26
   12290:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   12292:	16 ff       	sbrs	r17, 6
   12294:	02 c0       	rjmp	.+4      	; 0x1229a <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   12296:	84 e5       	ldi	r24, 0x54	; 84
   12298:	01 c0       	rjmp	.+2      	; 0x1229c <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   1229a:	8d e2       	ldi	r24, 0x2D	; 45
   1229c:	8c 93       	st	X, r24
   1229e:	cf 01       	movw	r24, r30
   122a0:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   122a2:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   122a4:	17 ff       	sbrs	r17, 7
   122a6:	02 c0       	rjmp	.+4      	; 0x122ac <gpib_trace_display+0x110>
            *tmp++ = 'B';
   122a8:	82 e4       	ldi	r24, 0x42	; 66
   122aa:	01 c0       	rjmp	.+2      	; 0x122ae <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   122ac:	8d e2       	ldi	r24, 0x2D	; 45
   122ae:	80 83       	st	Z, r24
   122b0:	08 c0       	rjmp	.+16     	; 0x122c2 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   122b2:	8d e2       	ldi	r24, 0x2D	; 45
   122b4:	80 83       	st	Z, r24
        *tmp++ = '-';
   122b6:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   122b8:	7f 01       	movw	r14, r30
   122ba:	43 e0       	ldi	r20, 0x03	; 3
   122bc:	e4 0e       	add	r14, r20
   122be:	f1 1c       	adc	r15, r1
   122c0:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   122c2:	f7 01       	movw	r30, r14
   122c4:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   122c6:	f1 e0       	ldi	r31, 0x01	; 1
   122c8:	af 1a       	sub	r10, r31
   122ca:	b1 08       	sbc	r11, r1
   122cc:	42 e0       	ldi	r20, 0x02	; 2
   122ce:	a4 16       	cp	r10, r20
   122d0:	b1 04       	cpc	r11, r1
   122d2:	f0 f4       	brcc	.+60     	; 0x12310 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   122d4:	15 ff       	sbrs	r17, 5
   122d6:	03 c0       	rjmp	.+6      	; 0x122de <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   122d8:	66 ee       	ldi	r22, 0xE6	; 230
   122da:	7c e0       	ldi	r23, 0x0C	; 12
   122dc:	02 c0       	rjmp	.+4      	; 0x122e2 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   122de:	66 e1       	ldi	r22, 0x16	; 22
   122e0:	78 e0       	ldi	r23, 0x08	; 8
   122e2:	c6 01       	movw	r24, r12
   122e4:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
        if(status & NRFD_FLAG)
   122e8:	16 ff       	sbrs	r17, 6
   122ea:	03 c0       	rjmp	.+6      	; 0x122f2 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   122ec:	6c ee       	ldi	r22, 0xEC	; 236
   122ee:	7c e0       	ldi	r23, 0x0C	; 12
   122f0:	02 c0       	rjmp	.+4      	; 0x122f6 <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   122f2:	66 e1       	ldi	r22, 0x16	; 22
   122f4:	78 e0       	ldi	r23, 0x08	; 8
   122f6:	c6 01       	movw	r24, r12
   122f8:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
        if(status & NDAC_FLAG)
   122fc:	17 ff       	sbrs	r17, 7
   122fe:	03 c0       	rjmp	.+6      	; 0x12306 <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   12300:	62 ef       	ldi	r22, 0xF2	; 242
   12302:	7c e0       	ldi	r23, 0x0C	; 12
   12304:	02 c0       	rjmp	.+4      	; 0x1230a <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   12306:	66 e1       	ldi	r22, 0x16	; 22
   12308:	78 e0       	ldi	r23, 0x08	; 8
   1230a:	c6 01       	movw	r24, r12
   1230c:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
    }

    if( (status & ATN_FLAG) )
   12310:	81 14       	cp	r8, r1
   12312:	91 04       	cpc	r9, r1
   12314:	09 f4       	brne	.+2      	; 0x12318 <gpib_trace_display+0x17c>
   12316:	58 c0       	rjmp	.+176    	; 0x123c8 <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   12318:	c8 01       	movw	r24, r16
   1231a:	8f 77       	andi	r24, 0x7F	; 127
   1231c:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   1231e:	9c 01       	movw	r18, r24
   12320:	20 52       	subi	r18, 0x20	; 32
   12322:	31 09       	sbc	r19, r1
   12324:	2f 31       	cpi	r18, 0x1F	; 31
   12326:	31 05       	cpc	r19, r1
   12328:	38 f4       	brcc	.+14     	; 0x12338 <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   1232a:	0f 71       	andi	r16, 0x1F	; 31
   1232c:	11 27       	eor	r17, r17
   1232e:	1f 93       	push	r17
   12330:	0f 93       	push	r16
   12332:	8d ed       	ldi	r24, 0xDD	; 221
   12334:	90 e1       	ldi	r25, 0x10	; 16
   12336:	0c c0       	rjmp	.+24     	; 0x12350 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   12338:	9c 01       	movw	r18, r24
   1233a:	20 54       	subi	r18, 0x40	; 64
   1233c:	31 09       	sbc	r19, r1
   1233e:	2f 30       	cpi	r18, 0x0F	; 15
   12340:	31 05       	cpc	r19, r1
   12342:	98 f4       	brcc	.+38     	; 0x1236a <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   12344:	0f 71       	andi	r16, 0x1F	; 31
   12346:	11 27       	eor	r17, r17
   12348:	1f 93       	push	r17
   1234a:	0f 93       	push	r16
   1234c:	82 ed       	ldi	r24, 0xD2	; 210
   1234e:	90 e1       	ldi	r25, 0x10	; 16
   12350:	1f 92       	push	r1
   12352:	9f 93       	push	r25
   12354:	8f 93       	push	r24
   12356:	ff 92       	push	r15
   12358:	ef 92       	push	r14
   1235a:	0e 94 ed 46 	call	0x8dda	; 0x8dda <sprintf_P>
   1235e:	0f b6       	in	r0, 0x3f	; 63
   12360:	f8 94       	cli
   12362:	de bf       	out	0x3e, r29	; 62
   12364:	0f be       	out	0x3f, r0	; 63
   12366:	cd bf       	out	0x3d, r28	; 61
   12368:	2f c0       	rjmp	.+94     	; 0x123c8 <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   1236a:	9c 01       	movw	r18, r24
   1236c:	20 56       	subi	r18, 0x60	; 96
   1236e:	31 09       	sbc	r19, r1
   12370:	20 31       	cpi	r18, 0x10	; 16
   12372:	31 05       	cpc	r19, r1
   12374:	28 f0       	brcs	.+10     	; 0x12380 <gpib_trace_display+0x1e4>
   12376:	e9 e8       	ldi	r30, 0x89	; 137
   12378:	f1 e0       	ldi	r31, 0x01	; 1
   1237a:	00 e0       	ldi	r16, 0x00	; 0
   1237c:	10 e0       	ldi	r17, 0x00	; 0
   1237e:	09 c0       	rjmp	.+18     	; 0x12392 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   12380:	0f 71       	andi	r16, 0x1F	; 31
   12382:	11 27       	eor	r17, r17
   12384:	1f 93       	push	r17
   12386:	0f 93       	push	r16
   12388:	87 ec       	ldi	r24, 0xC7	; 199
   1238a:	90 e1       	ldi	r25, 0x10	; 16
   1238c:	e1 cf       	rjmp	.-62     	; 0x12350 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1238e:	0f 5f       	subi	r16, 0xFF	; 255
   12390:	1f 4f       	sbci	r17, 0xFF	; 255
   12392:	20 81       	ld	r18, Z
   12394:	31 81       	ldd	r19, Z+1	; 0x01
   12396:	2f 3f       	cpi	r18, 0xFF	; 255
   12398:	4f ef       	ldi	r20, 0xFF	; 255
   1239a:	34 07       	cpc	r19, r20
   1239c:	a9 f0       	breq	.+42     	; 0x123c8 <gpib_trace_display+0x22c>
   1239e:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   123a0:	82 17       	cp	r24, r18
   123a2:	93 07       	cpc	r25, r19
   123a4:	a1 f7       	brne	.-24     	; 0x1238e <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   123a6:	6a e1       	ldi	r22, 0x1A	; 26
   123a8:	78 e0       	ldi	r23, 0x08	; 8
   123aa:	c7 01       	movw	r24, r14
   123ac:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   123b0:	00 0f       	add	r16, r16
   123b2:	11 1f       	adc	r17, r17
   123b4:	00 0f       	add	r16, r16
   123b6:	11 1f       	adc	r17, r17
   123b8:	f8 01       	movw	r30, r16
   123ba:	e7 57       	subi	r30, 0x77	; 119
   123bc:	fe 4f       	sbci	r31, 0xFE	; 254
   123be:	62 81       	ldd	r22, Z+2	; 0x02
   123c0:	73 81       	ldd	r23, Z+3	; 0x03
   123c2:	c7 01       	movw	r24, r14
   123c4:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   123c8:	20 91 90 19 	lds	r18, 0x1990	; 0x801990 <gpib_log_fp>
   123cc:	30 91 91 19 	lds	r19, 0x1991	; 0x801991 <gpib_log_fp+0x1>
   123d0:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <__iob+0x2>
   123d4:	90 91 ed 1c 	lds	r25, 0x1CED	; 0x801ced <__iob+0x3>
   123d8:	23 2b       	or	r18, r19
   123da:	21 f4       	brne	.+8      	; 0x123e4 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   123dc:	90 93 91 19 	sts	0x1991, r25	; 0x801991 <gpib_log_fp+0x1>
   123e0:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   123e4:	20 91 90 19 	lds	r18, 0x1990	; 0x801990 <gpib_log_fp>
   123e8:	30 91 91 19 	lds	r19, 0x1991	; 0x801991 <gpib_log_fp+0x1>
   123ec:	82 17       	cp	r24, r18
   123ee:	93 07       	cpc	r25, r19
   123f0:	19 f0       	breq	.+6      	; 0x123f8 <gpib_trace_display+0x25c>
        puts(str);
   123f2:	c6 01       	movw	r24, r12
   123f4:	0e 94 6d 7b 	call	0xf6da	; 0xf6da <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   123f8:	df 92       	push	r13
   123fa:	cf 92       	push	r12
   123fc:	88 ef       	ldi	r24, 0xF8	; 248
   123fe:	9c e0       	ldi	r25, 0x0C	; 12
   12400:	9f 93       	push	r25
   12402:	8f 93       	push	r24
   12404:	80 91 91 19 	lds	r24, 0x1991	; 0x801991 <gpib_log_fp+0x1>
   12408:	8f 93       	push	r24
   1240a:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <gpib_log_fp>
   1240e:	8f 93       	push	r24
   12410:	0e 94 1e 84 	call	0x1083c	; 0x1083c <fprintf>
}
   12414:	0f 90       	pop	r0
   12416:	0f 90       	pop	r0
   12418:	0f 90       	pop	r0
   1241a:	0f 90       	pop	r0
   1241c:	0f 90       	pop	r0
   1241e:	0f 90       	pop	r0
   12420:	c0 58       	subi	r28, 0x80	; 128
   12422:	df 4f       	sbci	r29, 0xFF	; 255
   12424:	ec e0       	ldi	r30, 0x0C	; 12
   12426:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

0001242a <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1242a:	af 92       	push	r10
   1242c:	bf 92       	push	r11
   1242e:	cf 92       	push	r12
   12430:	df 92       	push	r13
   12432:	ff 92       	push	r15
   12434:	0f 93       	push	r16
   12436:	1f 93       	push	r17
   12438:	cf 93       	push	r28
   1243a:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   1243c:	20 91 8f 19 	lds	r18, 0x198F	; 0x80198f <gpib_unread_f>
   12440:	22 23       	and	r18, r18
   12442:	39 f0       	breq	.+14     	; 0x12452 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   12444:	10 92 8f 19 	sts	0x198F, r1	; 0x80198f <gpib_unread_f>
        return(gpib_unread_data);
   12448:	80 91 1d 1f 	lds	r24, 0x1F1D	; 0x801f1d <gpib_unread_data>
   1244c:	90 91 1e 1f 	lds	r25, 0x1F1E	; 0x801f1e <gpib_unread_data+0x1>
   12450:	b8 c0       	rjmp	.+368    	; 0x125c2 <gpib_read_byte+0x198>
   12452:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   12454:	81 e0       	ldi	r24, 0x01	; 1
   12456:	90 e0       	ldi	r25, 0x00	; 0
   12458:	ad db       	rcall	.-2214   	; 0x11bb4 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   1245a:	c1 14       	cp	r12, r1
   1245c:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   1245e:	51 f0       	breq	.+20     	; 0x12474 <gpib_read_byte+0x4a>
   12460:	c7 dc       	rcall	.-1650   	; 0x11df0 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   12462:	8c 01       	movw	r16, r24
   12464:	d5 dc       	rcall	.-1622   	; 0x11e10 <gpib_handshake_pin_read>
   12466:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   12468:	19 2b       	or	r17, r25
   1246a:	62 e0       	ldi	r22, 0x02	; 2
   1246c:	70 e0       	ldi	r23, 0x00	; 0
   1246e:	c8 01       	movw	r24, r16
   12470:	95 de       	rcall	.-726    	; 0x1219c <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   12472:	02 c0       	rjmp	.+4      	; 0x12478 <gpib_read_byte+0x4e>
   12474:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   12476:	10 e0       	ldi	r17, 0x00	; 0
   12478:	f1 2c       	mov	r15, r1
   1247a:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   1247c:	d0 e0       	ldi	r29, 0x00	; 0
   1247e:	80 e0       	ldi	r24, 0x00	; 0
   12480:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   12484:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   12486:	09 f0       	breq	.+2      	; 0x1248a <gpib_read_byte+0x60>
   12488:	78 c0       	rjmp	.+240    	; 0x1257a <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   1248a:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   1248c:	03 c0       	rjmp	.+6      	; 0x12494 <gpib_read_byte+0x6a>
   1248e:	d0 61       	ori	r29, 0x10	; 16
   12490:	b4 db       	rcall	.-2200   	; 0x11bfa <gpib_bus_init>
            break;
        }


        switch(rx_state)
   12492:	73 c0       	rjmp	.+230    	; 0x1257a <gpib_read_byte+0x150>
   12494:	8f 2d       	mov	r24, r15
   12496:	90 e0       	ldi	r25, 0x00	; 0
   12498:	89 30       	cpi	r24, 0x09	; 9
   1249a:	91 05       	cpc	r25, r1
   1249c:	08 f0       	brcs	.+2      	; 0x124a0 <gpib_read_byte+0x76>
   1249e:	51 c0       	rjmp	.+162    	; 0x12542 <gpib_read_byte+0x118>
   124a0:	fc 01       	movw	r30, r24
   124a2:	e9 53       	subi	r30, 0x39	; 57
   124a4:	ff 4f       	sbci	r31, 0xFF	; 255
   124a6:	0c 94 c1 ec 	jmp	0x1d982	; 0x1d982 <__tablejump2__>
   124aa:	52 98       	cbi	0x0a, 2	; 10
   124ac:	8d e0       	ldi	r24, 0x0D	; 13
   124ae:	8a 95       	dec	r24
   124b0:	f1 f7       	brne	.-4      	; 0x124ae <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   124b2:	00 00       	nop
   124b4:	ff 24       	eor	r15, r15
   124b6:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   124b8:	7f c0       	rjmp	.+254    	; 0x125b8 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   124ba:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   124bc:	7d c0       	rjmp	.+250    	; 0x125b8 <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   124be:	62 e0       	ldi	r22, 0x02	; 2
   124c0:	f6 2e       	mov	r15, r22
   124c2:	7a c0       	rjmp	.+244    	; 0x125b8 <gpib_read_byte+0x18e>
   124c4:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   124c6:	52 9a       	sbi	0x0a, 2	; 10
   124c8:	8d dc       	rcall	.-1766   	; 0x11de4 <gpib_bus_read>
   124ca:	a8 2e       	mov	r10, r24
   124cc:	b1 2c       	mov	r11, r1
                ch |= control_last;
   124ce:	90 dc       	rcall	.-1760   	; 0x11df0 <gpib_control_pin_read>
   124d0:	8c 01       	movw	r16, r24

                if(trace)
   124d2:	c8 2b       	or	r28, r24
   124d4:	d9 2b       	or	r29, r25
   124d6:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   124d8:	db 29       	or	r29, r11
   124da:	c1 14       	cp	r12, r1
   124dc:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   124de:	49 f0       	breq	.+18     	; 0x124f2 <gpib_read_byte+0xc8>
   124e0:	97 dc       	rcall	.-1746   	; 0x11e10 <gpib_handshake_pin_read>
   124e2:	08 2b       	or	r16, r24
   124e4:	19 2b       	or	r17, r25
   124e6:	61 e0       	ldi	r22, 0x01	; 1
   124e8:	70 e0       	ldi	r23, 0x00	; 0
   124ea:	c5 01       	movw	r24, r10
   124ec:	80 2b       	or	r24, r16
   124ee:	91 2b       	or	r25, r17
   124f0:	55 de       	rcall	.-854    	; 0x1219c <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   124f2:	53 98       	cbi	0x0a, 3	; 10
   124f4:	8d e0       	ldi	r24, 0x0D	; 13
   124f6:	8a 95       	dec	r24
   124f8:	f1 f7       	brne	.-4      	; 0x124f6 <gpib_read_byte+0xcc>
   124fa:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   124fc:	64 ef       	ldi	r22, 0xF4	; 244
   124fe:	71 e0       	ldi	r23, 0x01	; 1
   12500:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   12502:	90 e0       	ldi	r25, 0x00	; 0
   12504:	4d db       	rcall	.-2406   	; 0x11ba0 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   12506:	54 e0       	ldi	r21, 0x04	; 4
   12508:	f5 2e       	mov	r15, r21
   1250a:	56 c0       	rjmp	.+172    	; 0x125b8 <gpib_read_byte+0x18e>
   1250c:	4b 9b       	sbis	0x09, 3	; 9
   1250e:	0c c0       	rjmp	.+24     	; 0x12528 <gpib_read_byte+0xfe>
   12510:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   12512:	71 e0       	ldi	r23, 0x01	; 1
   12514:	80 e0       	ldi	r24, 0x00	; 0
   12516:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   12518:	43 db       	rcall	.-2426   	; 0x11ba0 <gpib_timeout_set>
   1251a:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   1251c:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1251e:	04 c0       	rjmp	.+8      	; 0x12528 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   12520:	19 9b       	sbis	0x03, 1	; 3
   12522:	02 c0       	rjmp	.+4      	; 0x12528 <gpib_read_byte+0xfe>
   12524:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   12526:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   12528:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <gpib_timer+0x8>
   1252c:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   1252e:	09 f4       	brne	.+2      	; 0x12532 <gpib_read_byte+0x108>
   12530:	43 c0       	rjmp	.+134    	; 0x125b8 <gpib_read_byte+0x18e>
   12532:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   12534:	27 e0       	ldi	r18, 0x07	; 7
   12536:	f2 2e       	mov	r15, r18
   12538:	3f c0       	rjmp	.+126    	; 0x125b8 <gpib_read_byte+0x18e>
   1253a:	81 e0       	ldi	r24, 0x01	; 1
   1253c:	90 e0       	ldi	r25, 0x00	; 0
   1253e:	3a db       	rcall	.-2444   	; 0x11bb4 <gpib_bus_read_init>
   12540:	04 c0       	rjmp	.+8      	; 0x1254a <gpib_read_byte+0x120>
   12542:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   12544:	d1 04       	cpc	r13, r1
   12546:	99 f0       	breq	.+38     	; 0x1256e <gpib_read_byte+0x144>
   12548:	05 c0       	rjmp	.+10     	; 0x12554 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   1254a:	c1 14       	cp	r12, r1
   1254c:	d1 04       	cpc	r13, r1
   1254e:	a9 f0       	breq	.+42     	; 0x1257a <gpib_read_byte+0x150>
   12550:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   12552:	f9 2e       	mov	r15, r25
   12554:	4d dc       	rcall	.-1894   	; 0x11df0 <gpib_control_pin_read>
   12556:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   12558:	5b dc       	rcall	.-1866   	; 0x11e10 <gpib_handshake_pin_read>
   1255a:	a8 2a       	or	r10, r24
   1255c:	b9 2a       	or	r11, r25
   1255e:	a0 16       	cp	r10, r16
   12560:	b1 06       	cpc	r11, r17
   12562:	31 f0       	breq	.+12     	; 0x12570 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   12564:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   12566:	70 e0       	ldi	r23, 0x00	; 0
   12568:	c5 01       	movw	r24, r10
   1256a:	18 de       	rcall	.-976    	; 0x1219c <gpib_trace_display>
   1256c:	01 c0       	rjmp	.+2      	; 0x12570 <gpib_read_byte+0x146>
   1256e:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   12570:	88 e0       	ldi	r24, 0x08	; 8
   12572:	f8 16       	cp	r15, r24
   12574:	11 f0       	breq	.+4      	; 0x1257a <gpib_read_byte+0x150>
   12576:	85 01       	movw	r16, r10
   12578:	82 cf       	rjmp	.-252    	; 0x1247e <gpib_read_byte+0x54>
   1257a:	80 91 17 1f 	lds	r24, 0x1F17	; 0x801f17 <current>
   1257e:	90 91 18 1f 	lds	r25, 0x1F18	; 0x801f18 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   12582:	90 93 14 1d 	sts	0x1D14, r25	; 0x801d14 <lastcmd+0x1>
   12586:	80 93 13 1d 	sts	0x1D13, r24	; 0x801d13 <lastcmd>
   1258a:	ce 01       	movw	r24, r28
   1258c:	88 27       	eor	r24, r24
        current = 0;
   1258e:	90 7d       	andi	r25, 0xD0	; 208
   12590:	89 2b       	or	r24, r25
   12592:	11 f4       	brne	.+4      	; 0x12598 <gpib_read_byte+0x16e>
   12594:	d2 fd       	sbrc	r29, 2
   12596:	05 c0       	rjmp	.+10     	; 0x125a2 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   12598:	10 92 18 1f 	sts	0x1F18, r1	; 0x801f18 <current+0x1>
   1259c:	10 92 17 1f 	sts	0x1F17, r1	; 0x801f17 <current>
   125a0:	07 c0       	rjmp	.+14     	; 0x125b0 <gpib_read_byte+0x186>
   125a2:	ce 01       	movw	r24, r28
   125a4:	8f 77       	andi	r24, 0x7F	; 127
   125a6:	99 27       	eor	r25, r25
   125a8:	90 93 18 1f 	sts	0x1F18, r25	; 0x801f18 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   125ac:	80 93 17 1f 	sts	0x1F17, r24	; 0x801f17 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   125b0:	ce 01       	movw	r24, r28
   125b2:	07 c0       	rjmp	.+14     	; 0x125c2 <gpib_read_byte+0x198>
   125b4:	86 e0       	ldi	r24, 0x06	; 6
   125b6:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   125b8:	c1 14       	cp	r12, r1
   125ba:	d1 04       	cpc	r13, r1
   125bc:	09 f4       	brne	.+2      	; 0x125c0 <gpib_read_byte+0x196>
   125be:	5f cf       	rjmp	.-322    	; 0x1247e <gpib_read_byte+0x54>
   125c0:	c9 cf       	rjmp	.-110    	; 0x12554 <gpib_read_byte+0x12a>
   125c2:	df 91       	pop	r29
   125c4:	cf 91       	pop	r28
   125c6:	1f 91       	pop	r17
   125c8:	0f 91       	pop	r16
   125ca:	ff 90       	pop	r15
   125cc:	df 90       	pop	r13
   125ce:	cf 90       	pop	r12
   125d0:	bf 90       	pop	r11
   125d2:	af 90       	pop	r10
   125d4:	08 95       	ret

000125d6 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   125d6:	60 e0       	ldi	r22, 0x00	; 0
   125d8:	70 e0       	ldi	r23, 0x00	; 0
   125da:	e0 cd       	rjmp	.-1088   	; 0x1219c <gpib_trace_display>
   125dc:	08 95       	ret

000125de <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   125de:	a0 e0       	ldi	r26, 0x00	; 0
   125e0:	b0 e0       	ldi	r27, 0x00	; 0
   125e2:	e5 ef       	ldi	r30, 0xF5	; 245
   125e4:	f2 e9       	ldi	r31, 0x92	; 146
   125e6:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   125ea:	5b 01       	movw	r10, r22
   125ec:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   125ee:	fa 01       	movw	r30, r20
   125f0:	20 81       	ld	r18, Z
   125f2:	31 81       	ldd	r19, Z+1	; 0x01
   125f4:	22 27       	eor	r18, r18
   125f6:	31 83       	std	Z+1, r19	; 0x01
   125f8:	20 83       	st	Z, r18

    if(!size)
   125fa:	67 2b       	or	r22, r23
   125fc:	21 f0       	breq	.+8      	; 0x12606 <gpib_read_str+0x28>
   125fe:	7c 01       	movw	r14, r24
   12600:	c0 e0       	ldi	r28, 0x00	; 0
   12602:	d0 e0       	ldi	r29, 0x00	; 0
   12604:	28 c0       	rjmp	.+80     	; 0x12656 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   12606:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1260a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1260e:	85 70       	andi	r24, 0x05	; 5
   12610:	99 27       	eor	r25, r25
   12612:	89 2b       	or	r24, r25
   12614:	09 f4       	brne	.+2      	; 0x12618 <gpib_read_str+0x3a>
   12616:	89 c0       	rjmp	.+274    	; 0x1272a <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   12618:	8e ea       	ldi	r24, 0xAE	; 174
   1261a:	90 e1       	ldi	r25, 0x10	; 16
   1261c:	1f 92       	push	r1
   1261e:	9f 93       	push	r25
   12620:	8f 93       	push	r24
   12622:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12626:	0f 90       	pop	r0
   12628:	0f 90       	pop	r0
   1262a:	0f 90       	pop	r0
   1262c:	7e c0       	rjmp	.+252    	; 0x1272a <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   1262e:	80 27       	eor	r24, r16
   12630:	91 27       	eor	r25, r17
   12632:	92 fd       	sbrc	r25, 2
   12634:	2e c0       	rjmp	.+92     	; 0x12692 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   12636:	c8 01       	movw	r24, r16
   12638:	88 27       	eor	r24, r24
   1263a:	94 70       	andi	r25, 0x04	; 4
   1263c:	12 ff       	sbrs	r17, 2
   1263e:	49 c0       	rjmp	.+146    	; 0x126d2 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   12640:	20 2f       	mov	r18, r16
   12642:	2f 77       	andi	r18, 0x7F	; 127
   12644:	f7 01       	movw	r30, r14
   12646:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   12648:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1264a:	89 2b       	or	r24, r25
   1264c:	09 f4       	brne	.+2      	; 0x12650 <gpib_read_str+0x72>
   1264e:	44 c0       	rjmp	.+136    	; 0x126d8 <gpib_read_str+0xfa>
   12650:	ff ef       	ldi	r31, 0xFF	; 255
   12652:	ef 1a       	sub	r14, r31
   12654:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   12656:	ca 15       	cp	r28, r10
   12658:	db 05       	cpc	r29, r11
   1265a:	0c f0       	brlt	.+2      	; 0x1265e <gpib_read_str+0x80>
   1265c:	47 c0       	rjmp	.+142    	; 0x126ec <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   1265e:	80 e0       	ldi	r24, 0x00	; 0
   12660:	90 e0       	ldi	r25, 0x00	; 0
   12662:	e3 de       	rcall	.-570    	; 0x1242a <gpib_read_byte>
   12664:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   12666:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1266a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1266e:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   12670:	02 c0       	rjmp	.+4      	; 0x12676 <gpib_read_str+0x98>
   12672:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   12674:	b0 df       	rcall	.-160    	; 0x125d6 <gpib_decode>
   12676:	98 01       	movw	r18, r16
   12678:	22 27       	eor	r18, r18
   1267a:	30 7d       	andi	r19, 0xD0	; 208
   1267c:	f6 01       	movw	r30, r12
   1267e:	80 81       	ld	r24, Z
   12680:	91 81       	ldd	r25, Z+1	; 0x01
   12682:	21 15       	cp	r18, r1
   12684:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   12686:	99 f2       	breq	.-90     	; 0x1262e <gpib_read_str+0x50>
   12688:	82 2b       	or	r24, r18
   1268a:	93 2b       	or	r25, r19
   1268c:	91 83       	std	Z+1, r25	; 0x01
            break;
   1268e:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   12690:	30 c0       	rjmp	.+96     	; 0x126f2 <gpib_read_str+0x114>
   12692:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12696:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1269a:	85 70       	andi	r24, 0x05	; 5
   1269c:	99 27       	eor	r25, r25
   1269e:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   126a0:	a9 f0       	breq	.+42     	; 0x126cc <gpib_read_str+0xee>
   126a2:	c8 01       	movw	r24, r16
   126a4:	99 27       	eor	r25, r25
   126a6:	9f 93       	push	r25
   126a8:	8f 93       	push	r24
   126aa:	df 93       	push	r29
   126ac:	cf 93       	push	r28
   126ae:	81 e8       	ldi	r24, 0x81	; 129
   126b0:	90 e1       	ldi	r25, 0x10	; 16
   126b2:	1f 92       	push	r1
   126b4:	9f 93       	push	r25
   126b6:	8f 93       	push	r24
   126b8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   126bc:	ed b7       	in	r30, 0x3d	; 61
   126be:	fe b7       	in	r31, 0x3e	; 62
   126c0:	37 96       	adiw	r30, 0x07	; 7
   126c2:	0f b6       	in	r0, 0x3f	; 63
   126c4:	f8 94       	cli
   126c6:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   126c8:	0f be       	out	0x3f, r0	; 63
   126ca:	ed bf       	out	0x3d, r30	; 61
   126cc:	c8 01       	movw	r24, r16
            break;
   126ce:	65 db       	rcall	.-2358   	; 0x11d9a <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   126d0:	10 c0       	rjmp	.+32     	; 0x126f2 <gpib_read_str+0x114>
   126d2:	f7 01       	movw	r30, r14
   126d4:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   126d6:	b8 cf       	rjmp	.-144    	; 0x12648 <gpib_read_str+0x6a>
   126d8:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   126da:	ba cf       	rjmp	.-140    	; 0x12650 <gpib_read_str+0x72>
   126dc:	f6 01       	movw	r30, r12
   126de:	80 81       	ld	r24, Z
   126e0:	91 81       	ldd	r25, Z+1	; 0x01
   126e2:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   126e4:	24 c0       	rjmp	.+72     	; 0x1272e <gpib_read_str+0x150>
   126e6:	91 60       	ori	r25, 0x01	; 1
   126e8:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   126ea:	80 83       	st	Z, r24
   126ec:	ca 15       	cp	r28, r10
   126ee:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   126f0:	f1 f0       	breq	.+60     	; 0x1272e <gpib_read_str+0x150>
   126f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   126f6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   126fa:	85 70       	andi	r24, 0x05	; 5
   126fc:	99 27       	eor	r25, r25
   126fe:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   12700:	b1 f0       	breq	.+44     	; 0x1272e <gpib_read_str+0x150>
   12702:	bf 92       	push	r11
   12704:	af 92       	push	r10
   12706:	df 93       	push	r29
   12708:	cf 93       	push	r28
   1270a:	8a e5       	ldi	r24, 0x5A	; 90
   1270c:	90 e1       	ldi	r25, 0x10	; 16
   1270e:	1f 92       	push	r1
   12710:	9f 93       	push	r25
   12712:	8f 93       	push	r24
   12714:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12718:	ed b7       	in	r30, 0x3d	; 61
   1271a:	fe b7       	in	r31, 0x3e	; 62
   1271c:	37 96       	adiw	r30, 0x07	; 7
   1271e:	0f b6       	in	r0, 0x3f	; 63
   12720:	f8 94       	cli
   12722:	fe bf       	out	0x3e, r31	; 62
   12724:	0f be       	out	0x3f, r0	; 63
   12726:	ed bf       	out	0x3d, r30	; 61
   12728:	02 c0       	rjmp	.+4      	; 0x1272e <gpib_read_str+0x150>
   1272a:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   1272c:	d0 e0       	ldi	r29, 0x00	; 0
   1272e:	ce 01       	movw	r24, r28
   12730:	cd b7       	in	r28, 0x3d	; 61
   12732:	de b7       	in	r29, 0x3e	; 62
   12734:	ea e0       	ldi	r30, 0x0A	; 10
   12736:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0001273a <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1273a:	a0 e0       	ldi	r26, 0x00	; 0
   1273c:	b0 e0       	ldi	r27, 0x00	; 0
   1273e:	e3 ea       	ldi	r30, 0xA3	; 163
   12740:	f3 e9       	ldi	r31, 0x93	; 147
   12742:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   12746:	8b 01       	movw	r16, r22
   12748:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1274a:	fa 01       	movw	r30, r20
   1274c:	20 81       	ld	r18, Z
   1274e:	31 81       	ldd	r19, Z+1	; 0x01
   12750:	22 27       	eor	r18, r18
   12752:	31 83       	std	Z+1, r19	; 0x01
   12754:	20 83       	st	Z, r18

    if(!size)
   12756:	67 2b       	or	r22, r23
   12758:	21 f0       	breq	.+8      	; 0x12762 <gpib_write_str+0x28>
   1275a:	6c 01       	movw	r12, r24
   1275c:	c0 e0       	ldi	r28, 0x00	; 0
   1275e:	d0 e0       	ldi	r29, 0x00	; 0
   12760:	35 c0       	rjmp	.+106    	; 0x127cc <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   12762:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12766:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1276a:	85 70       	andi	r24, 0x05	; 5
   1276c:	99 27       	eor	r25, r25
   1276e:	89 2b       	or	r24, r25
   12770:	09 f4       	brne	.+2      	; 0x12774 <gpib_write_str+0x3a>
   12772:	54 c0       	rjmp	.+168    	; 0x1281c <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   12774:	80 e4       	ldi	r24, 0x40	; 64
   12776:	90 e1       	ldi	r25, 0x10	; 16
   12778:	1f 92       	push	r1
   1277a:	9f 93       	push	r25
   1277c:	8f 93       	push	r24
   1277e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12782:	0f 90       	pop	r0
   12784:	0f 90       	pop	r0
   12786:	0f 90       	pop	r0
   12788:	49 c0       	rjmp	.+146    	; 0x1281c <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   1278a:	21 96       	adiw	r28, 0x01	; 1
   1278c:	f6 01       	movw	r30, r12
   1278e:	81 91       	ld	r24, Z+
   12790:	6f 01       	movw	r12, r30
   12792:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   12794:	f7 01       	movw	r30, r14
   12796:	20 81       	ld	r18, Z
   12798:	31 81       	ldd	r19, Z+1	; 0x01
   1279a:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   1279c:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   1279e:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   127a0:	19 c0       	rjmp	.+50     	; 0x127d4 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   127a2:	42 db       	rcall	.-2428   	; 0x11e28 <gpib_write_byte>
   127a4:	5c 01       	movw	r10, r24
   127a6:	aa 24       	eor	r10, r10
   127a8:	f0 ed       	ldi	r31, 0xD0	; 208
   127aa:	bf 22       	and	r11, r31
   127ac:	f7 01       	movw	r30, r14
   127ae:	20 81       	ld	r18, Z
   127b0:	31 81       	ldd	r19, Z+1	; 0x01
   127b2:	2a 29       	or	r18, r10
   127b4:	3b 29       	or	r19, r11
   127b6:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   127b8:	20 83       	st	Z, r18
   127ba:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   127be:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   127c2:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   127c4:	08 df       	rcall	.-496    	; 0x125d6 <gpib_decode>
   127c6:	a1 14       	cp	r10, r1
   127c8:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   127ca:	49 f4       	brne	.+18     	; 0x127de <gpib_write_str+0xa4>
   127cc:	c0 17       	cp	r28, r16
   127ce:	d1 07       	cpc	r29, r17
   127d0:	e4 f2       	brlt	.-72     	; 0x1278a <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   127d2:	05 c0       	rjmp	.+10     	; 0x127de <gpib_write_str+0xa4>
   127d4:	0c 17       	cp	r16, r28
   127d6:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   127d8:	21 f7       	brne	.-56     	; 0x127a2 <gpib_write_str+0x68>
   127da:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   127dc:	e2 cf       	rjmp	.-60     	; 0x127a2 <gpib_write_str+0x68>
   127de:	c0 17       	cp	r28, r16
   127e0:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   127e2:	f1 f0       	breq	.+60     	; 0x12820 <gpib_write_str+0xe6>
   127e4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   127e8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   127ec:	85 70       	andi	r24, 0x05	; 5
   127ee:	99 27       	eor	r25, r25
   127f0:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   127f2:	b1 f0       	breq	.+44     	; 0x12820 <gpib_write_str+0xe6>
   127f4:	1f 93       	push	r17
   127f6:	0f 93       	push	r16
   127f8:	df 93       	push	r29
   127fa:	cf 93       	push	r28
   127fc:	88 e1       	ldi	r24, 0x18	; 24
   127fe:	90 e1       	ldi	r25, 0x10	; 16
   12800:	1f 92       	push	r1
   12802:	9f 93       	push	r25
   12804:	8f 93       	push	r24
   12806:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1280a:	8d b7       	in	r24, 0x3d	; 61
   1280c:	9e b7       	in	r25, 0x3e	; 62
   1280e:	07 96       	adiw	r24, 0x07	; 7
   12810:	0f b6       	in	r0, 0x3f	; 63
   12812:	f8 94       	cli
   12814:	9e bf       	out	0x3e, r25	; 62
   12816:	0f be       	out	0x3f, r0	; 63
   12818:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1281a:	02 c0       	rjmp	.+4      	; 0x12820 <gpib_write_str+0xe6>
   1281c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   1281e:	d0 e0       	ldi	r29, 0x00	; 0
   12820:	ce 01       	movw	r24, r28
   12822:	cd b7       	in	r28, 0x3d	; 61
   12824:	de b7       	in	r29, 0x3e	; 62
   12826:	ea e0       	ldi	r30, 0x0A	; 10
   12828:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0001282c <gpib_file_init>:
   1282c:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   12830:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   12834:	8f eb       	ldi	r24, 0xBF	; 191
   12836:	91 e0       	ldi	r25, 0x01	; 1
   12838:	0e 94 36 bb 	call	0x1766c	; 0x1766c <Read_Config>
   1283c:	18 16       	cp	r1, r24
   1283e:	19 06       	cpc	r1, r25
   12840:	b4 f4       	brge	.+44     	; 0x1286e <gpib_file_init+0x42>
   12842:	9f 93       	push	r25
   12844:	8f 93       	push	r24
   12846:	8f eb       	ldi	r24, 0xBF	; 191
   12848:	91 e0       	ldi	r25, 0x01	; 1
   1284a:	9f 93       	push	r25
   1284c:	8f 93       	push	r24
   1284e:	87 e6       	ldi	r24, 0x67	; 103
   12850:	95 e1       	ldi	r25, 0x15	; 21
   12852:	1f 92       	push	r1
   12854:	9f 93       	push	r25
   12856:	8f 93       	push	r24
   12858:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1285c:	8d b7       	in	r24, 0x3d	; 61
   1285e:	9e b7       	in	r25, 0x3e	; 62
   12860:	07 96       	adiw	r24, 0x07	; 7
   12862:	0f b6       	in	r0, 0x3f	; 63
   12864:	f8 94       	cli
   12866:	9e bf       	out	0x3e, r25	; 62
   12868:	0f be       	out	0x3f, r0	; 63
   1286a:	8d bf       	out	0x3d, r24	; 61
   1286c:	12 c0       	rjmp	.+36     	; 0x12892 <gpib_file_init+0x66>
   1286e:	89 2b       	or	r24, r25
   12870:	81 f0       	breq	.+32     	; 0x12892 <gpib_file_init+0x66>
   12872:	8f eb       	ldi	r24, 0xBF	; 191
   12874:	91 e0       	ldi	r25, 0x01	; 1
   12876:	9f 93       	push	r25
   12878:	8f 93       	push	r24
   1287a:	86 e5       	ldi	r24, 0x56	; 86
   1287c:	95 e1       	ldi	r25, 0x15	; 21
   1287e:	1f 92       	push	r1
   12880:	9f 93       	push	r25
   12882:	8f 93       	push	r24
   12884:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12888:	0f 90       	pop	r0
   1288a:	0f 90       	pop	r0
   1288c:	0f 90       	pop	r0
   1288e:	0f 90       	pop	r0
   12890:	0f 90       	pop	r0
   12892:	0e 94 35 bb 	call	0x1766a	; 0x1766a <set_Config_Defaults>
   12896:	0e 94 f3 74 	call	0xe9e6	; 0xe9e6 <mmc_wp_status>
   1289a:	89 2b       	or	r24, r25
   1289c:	51 f0       	breq	.+20     	; 0x128b2 <gpib_file_init+0x86>
   1289e:	8d e3       	ldi	r24, 0x3D	; 61
   128a0:	95 e1       	ldi	r25, 0x15	; 21
   128a2:	1f 92       	push	r1
   128a4:	9f 93       	push	r25
   128a6:	8f 93       	push	r24
   128a8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   128ac:	0f 90       	pop	r0
   128ae:	0f 90       	pop	r0
   128b0:	0f 90       	pop	r0
   128b2:	08 95       	ret

000128b4 <SS80_is_MLA>:
   128b4:	40 e2       	ldi	r20, 0x20	; 32
   128b6:	50 e0       	ldi	r21, 0x00	; 0
   128b8:	bc 01       	movw	r22, r24
   128ba:	83 e0       	ldi	r24, 0x03	; 3
   128bc:	90 e0       	ldi	r25, 0x00	; 0
   128be:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   128c2:	8f 3f       	cpi	r24, 0xFF	; 255
   128c4:	2f ef       	ldi	r18, 0xFF	; 255
   128c6:	92 07       	cpc	r25, r18
   128c8:	19 f0       	breq	.+6      	; 0x128d0 <SS80_is_MLA+0x1c>
   128ca:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   128ce:	08 95       	ret
   128d0:	80 e0       	ldi	r24, 0x00	; 0
   128d2:	90 e0       	ldi	r25, 0x00	; 0
   128d4:	08 95       	ret

000128d6 <SS80_is_MTA>:
   128d6:	40 e4       	ldi	r20, 0x40	; 64
   128d8:	50 e0       	ldi	r21, 0x00	; 0
   128da:	bc 01       	movw	r22, r24
   128dc:	83 e0       	ldi	r24, 0x03	; 3
   128de:	90 e0       	ldi	r25, 0x00	; 0
   128e0:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   128e4:	8f 3f       	cpi	r24, 0xFF	; 255
   128e6:	2f ef       	ldi	r18, 0xFF	; 255
   128e8:	92 07       	cpc	r25, r18
   128ea:	19 f0       	breq	.+6      	; 0x128f2 <SS80_is_MTA+0x1c>
   128ec:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   128f0:	08 95       	ret
   128f2:	80 e0       	ldi	r24, 0x00	; 0
   128f4:	90 e0       	ldi	r25, 0x00	; 0
   128f6:	08 95       	ret

000128f8 <SS80_is_MSA>:
   128f8:	40 e6       	ldi	r20, 0x60	; 96
   128fa:	50 e0       	ldi	r21, 0x00	; 0
   128fc:	bc 01       	movw	r22, r24
   128fe:	83 e0       	ldi	r24, 0x03	; 3
   12900:	90 e0       	ldi	r25, 0x00	; 0
   12902:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   12906:	8f 3f       	cpi	r24, 0xFF	; 255
   12908:	2f ef       	ldi	r18, 0xFF	; 255
   1290a:	92 07       	cpc	r25, r18
   1290c:	19 f0       	breq	.+6      	; 0x12914 <SS80_is_MSA+0x1c>
   1290e:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   12912:	08 95       	ret
   12914:	80 e0       	ldi	r24, 0x00	; 0
   12916:	90 e0       	ldi	r25, 0x00	; 0
   12918:	08 95       	ret

0001291a <AMIGO_is_MLA>:
   1291a:	40 e2       	ldi	r20, 0x20	; 32
   1291c:	50 e0       	ldi	r21, 0x00	; 0
   1291e:	bc 01       	movw	r22, r24
   12920:	81 e0       	ldi	r24, 0x01	; 1
   12922:	90 e0       	ldi	r25, 0x00	; 0
   12924:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   12928:	8f 3f       	cpi	r24, 0xFF	; 255
   1292a:	2f ef       	ldi	r18, 0xFF	; 255
   1292c:	92 07       	cpc	r25, r18
   1292e:	19 f0       	breq	.+6      	; 0x12936 <AMIGO_is_MLA+0x1c>
   12930:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   12934:	08 95       	ret
   12936:	80 e0       	ldi	r24, 0x00	; 0
   12938:	90 e0       	ldi	r25, 0x00	; 0
   1293a:	08 95       	ret

0001293c <AMIGO_is_MTA>:
   1293c:	40 e4       	ldi	r20, 0x40	; 64
   1293e:	50 e0       	ldi	r21, 0x00	; 0
   12940:	bc 01       	movw	r22, r24
   12942:	81 e0       	ldi	r24, 0x01	; 1
   12944:	90 e0       	ldi	r25, 0x00	; 0
   12946:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   1294a:	8f 3f       	cpi	r24, 0xFF	; 255
   1294c:	2f ef       	ldi	r18, 0xFF	; 255
   1294e:	92 07       	cpc	r25, r18
   12950:	19 f0       	breq	.+6      	; 0x12958 <AMIGO_is_MTA+0x1c>
   12952:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   12956:	08 95       	ret
   12958:	80 e0       	ldi	r24, 0x00	; 0
   1295a:	90 e0       	ldi	r25, 0x00	; 0
   1295c:	08 95       	ret

0001295e <AMIGO_is_MSA>:
   1295e:	40 e6       	ldi	r20, 0x60	; 96
   12960:	50 e0       	ldi	r21, 0x00	; 0
   12962:	bc 01       	movw	r22, r24
   12964:	81 e0       	ldi	r24, 0x01	; 1
   12966:	90 e0       	ldi	r25, 0x00	; 0
   12968:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   1296c:	8f 3f       	cpi	r24, 0xFF	; 255
   1296e:	2f ef       	ldi	r18, 0xFF	; 255
   12970:	92 07       	cpc	r25, r18
   12972:	19 f0       	breq	.+6      	; 0x1297a <AMIGO_is_MSA+0x1c>
   12974:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   12978:	08 95       	ret
   1297a:	80 e0       	ldi	r24, 0x00	; 0
   1297c:	90 e0       	ldi	r25, 0x00	; 0
   1297e:	08 95       	ret

00012980 <PRINTER_is_MLA>:
   12980:	40 e2       	ldi	r20, 0x20	; 32
   12982:	50 e0       	ldi	r21, 0x00	; 0
   12984:	bc 01       	movw	r22, r24
   12986:	84 e0       	ldi	r24, 0x04	; 4
   12988:	90 e0       	ldi	r25, 0x00	; 0
   1298a:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   1298e:	8f 3f       	cpi	r24, 0xFF	; 255
   12990:	2f ef       	ldi	r18, 0xFF	; 255
   12992:	92 07       	cpc	r25, r18
   12994:	19 f0       	breq	.+6      	; 0x1299c <PRINTER_is_MLA+0x1c>
   12996:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   1299a:	08 95       	ret
   1299c:	80 e0       	ldi	r24, 0x00	; 0
   1299e:	90 e0       	ldi	r25, 0x00	; 0
   129a0:	08 95       	ret

000129a2 <PRINTER_is_MTA>:
   129a2:	40 e4       	ldi	r20, 0x40	; 64
   129a4:	50 e0       	ldi	r21, 0x00	; 0
   129a6:	bc 01       	movw	r22, r24
   129a8:	84 e0       	ldi	r24, 0x04	; 4
   129aa:	90 e0       	ldi	r25, 0x00	; 0
   129ac:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   129b0:	8f 3f       	cpi	r24, 0xFF	; 255
   129b2:	2f ef       	ldi	r18, 0xFF	; 255
   129b4:	92 07       	cpc	r25, r18
   129b6:	19 f0       	breq	.+6      	; 0x129be <PRINTER_is_MTA+0x1c>
   129b8:	0c 94 ff b7 	jmp	0x16ffe	; 0x16ffe <set_active_device>
   129bc:	08 95       	ret
   129be:	80 e0       	ldi	r24, 0x00	; 0
   129c0:	90 e0       	ldi	r25, 0x00	; 0
   129c2:	08 95       	ret

000129c4 <gpib_init_devices>:
   129c4:	1a d9       	rcall	.-3532   	; 0x11bfa <gpib_bus_init>
   129c6:	0e 94 9d a4 	call	0x1493a	; 0x1493a <SS80_init>
   129ca:	0e 94 22 aa 	call	0x15444	; 0x15444 <amigo_init>
   129ce:	0c 94 09 b5 	jmp	0x16a12	; 0x16a12 <printer_close>
   129d2:	08 95       	ret

000129d4 <gpib_trace_task>:
   129d4:	0f 93       	push	r16
   129d6:	1f 93       	push	r17
   129d8:	cf 93       	push	r28
   129da:	df 93       	push	r29
   129dc:	eb 01       	movw	r28, r22
   129de:	00 97       	sbiw	r24, 0x00	; 0
   129e0:	09 f4       	brne	.+2      	; 0x129e4 <gpib_trace_task+0x10>
   129e2:	42 c0       	rjmp	.+132    	; 0x12a68 <gpib_trace_task+0x94>
   129e4:	fc 01       	movw	r30, r24
   129e6:	20 81       	ld	r18, Z
   129e8:	22 23       	and	r18, r18
   129ea:	f1 f1       	breq	.+124    	; 0x12a68 <gpib_trace_task+0x94>
   129ec:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   129f0:	8c 01       	movw	r16, r24
   129f2:	1f 93       	push	r17
   129f4:	8f 93       	push	r24
   129f6:	83 e2       	ldi	r24, 0x23	; 35
   129f8:	95 e1       	ldi	r25, 0x15	; 21
   129fa:	1f 92       	push	r1
   129fc:	9f 93       	push	r25
   129fe:	8f 93       	push	r24
   12a00:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12a04:	0f 90       	pop	r0
   12a06:	0f 90       	pop	r0
   12a08:	0f 90       	pop	r0
   12a0a:	0f 90       	pop	r0
   12a0c:	0f 90       	pop	r0
   12a0e:	20 97       	sbiw	r28, 0x00	; 0
   12a10:	51 f0       	breq	.+20     	; 0x12a26 <gpib_trace_task+0x52>
   12a12:	88 ef       	ldi	r24, 0xF8	; 248
   12a14:	94 e1       	ldi	r25, 0x14	; 20
   12a16:	1f 92       	push	r1
   12a18:	9f 93       	push	r25
   12a1a:	8f 93       	push	r24
   12a1c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12a20:	0f 90       	pop	r0
   12a22:	0f 90       	pop	r0
   12a24:	0f 90       	pop	r0
   12a26:	81 ee       	ldi	r24, 0xE1	; 225
   12a28:	94 e1       	ldi	r25, 0x14	; 20
   12a2a:	1f 92       	push	r1
   12a2c:	9f 93       	push	r25
   12a2e:	8f 93       	push	r24
   12a30:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12a34:	6e e7       	ldi	r22, 0x7E	; 126
   12a36:	78 e0       	ldi	r23, 0x08	; 8
   12a38:	c8 01       	movw	r24, r16
   12a3a:	0e 94 11 84 	call	0x10822	; 0x10822 <fopen>
   12a3e:	90 93 91 19 	sts	0x1991, r25	; 0x801991 <gpib_log_fp+0x1>
   12a42:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <gpib_log_fp>
   12a46:	0f 90       	pop	r0
   12a48:	0f 90       	pop	r0
   12a4a:	0f 90       	pop	r0
   12a4c:	89 2b       	or	r24, r25
   12a4e:	a1 f4       	brne	.+40     	; 0x12a78 <gpib_trace_task+0xa4>
   12a50:	8c e2       	ldi	r24, 0x2C	; 44
   12a52:	9d e0       	ldi	r25, 0x0D	; 13
   12a54:	0e 94 e7 7d 	call	0xfbce	; 0xfbce <perror>
   12a58:	85 ed       	ldi	r24, 0xD5	; 213
   12a5a:	94 e1       	ldi	r25, 0x14	; 20
   12a5c:	1f 92       	push	r1
   12a5e:	9f 93       	push	r25
   12a60:	8f 93       	push	r24
   12a62:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12a66:	3b c0       	rjmp	.+118    	; 0x12ade <gpib_trace_task+0x10a>
   12a68:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <__iob+0x2>
   12a6c:	90 91 ed 1c 	lds	r25, 0x1CED	; 0x801ced <__iob+0x3>
   12a70:	90 93 91 19 	sts	0x1991, r25	; 0x801991 <gpib_log_fp+0x1>
   12a74:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <gpib_log_fp>
   12a78:	e8 d8       	rcall	.-3632   	; 0x11c4a <gpib_state_init>
   12a7a:	a4 df       	rcall	.-184    	; 0x129c4 <gpib_init_devices>
   12a7c:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <gpib_log_fp>
   12a80:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <gpib_log_fp+0x1>
   12a84:	39 db       	rcall	.-2446   	; 0x120f8 <gpib_decode_header>
   12a86:	80 e0       	ldi	r24, 0x00	; 0
   12a88:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   12a8c:	89 2b       	or	r24, r25
   12a8e:	31 f4       	brne	.+12     	; 0x12a9c <gpib_trace_task+0xc8>
   12a90:	ce 01       	movw	r24, r28
   12a92:	cb dc       	rcall	.-1642   	; 0x1242a <gpib_read_byte>
   12a94:	20 97       	sbiw	r28, 0x00	; 0
   12a96:	b9 f7       	brne	.-18     	; 0x12a86 <gpib_trace_task+0xb2>
   12a98:	9e dd       	rcall	.-1220   	; 0x125d6 <gpib_decode>
   12a9a:	f5 cf       	rjmp	.-22     	; 0x12a86 <gpib_trace_task+0xb2>
   12a9c:	8f ec       	ldi	r24, 0xCF	; 207
   12a9e:	94 e1       	ldi	r25, 0x14	; 20
   12aa0:	1f 92       	push	r1
   12aa2:	9f 93       	push	r25
   12aa4:	8f 93       	push	r24
   12aa6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12aaa:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <gpib_log_fp>
   12aae:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <gpib_log_fp+0x1>
   12ab2:	0f 90       	pop	r0
   12ab4:	0f 90       	pop	r0
   12ab6:	0f 90       	pop	r0
   12ab8:	00 97       	sbiw	r24, 0x00	; 0
   12aba:	a1 f0       	breq	.+40     	; 0x12ae4 <gpib_trace_task+0x110>
   12abc:	0e 94 bb 82 	call	0x10576	; 0x10576 <fclose>
   12ac0:	8d eb       	ldi	r24, 0xBD	; 189
   12ac2:	94 e1       	ldi	r25, 0x14	; 20
   12ac4:	1f 92       	push	r1
   12ac6:	9f 93       	push	r25
   12ac8:	8f 93       	push	r24
   12aca:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12ace:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <__iob+0x2>
   12ad2:	90 91 ed 1c 	lds	r25, 0x1CED	; 0x801ced <__iob+0x3>
   12ad6:	90 93 91 19 	sts	0x1991, r25	; 0x801991 <gpib_log_fp+0x1>
   12ada:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <gpib_log_fp>
   12ade:	0f 90       	pop	r0
   12ae0:	0f 90       	pop	r0
   12ae2:	0f 90       	pop	r0
   12ae4:	df 91       	pop	r29
   12ae6:	cf 91       	pop	r28
   12ae8:	1f 91       	pop	r17
   12aea:	0f 91       	pop	r16
   12aec:	08 95       	ret

00012aee <gpib_error_test>:
   12aee:	ef 92       	push	r14
   12af0:	ff 92       	push	r15
   12af2:	0f 93       	push	r16
   12af4:	1f 93       	push	r17
   12af6:	cf 93       	push	r28
   12af8:	df 93       	push	r29
   12afa:	7c 01       	movw	r14, r24
   12afc:	ec 01       	movw	r28, r24
   12afe:	cc 27       	eor	r28, r28
   12b00:	d0 7d       	andi	r29, 0xD0	; 208
   12b02:	20 97       	sbiw	r28, 0x00	; 0
   12b04:	61 f0       	breq	.+24     	; 0x12b1e <gpib_error_test+0x30>
   12b06:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12b0a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12b0e:	8e 72       	andi	r24, 0x2E	; 46
   12b10:	99 27       	eor	r25, r25
   12b12:	87 01       	movw	r16, r14
   12b14:	00 27       	eor	r16, r16
   12b16:	10 71       	andi	r17, 0x10	; 16
   12b18:	89 2b       	or	r24, r25
   12b1a:	59 f4       	brne	.+22     	; 0x12b32 <gpib_error_test+0x44>
   12b1c:	17 c0       	rjmp	.+46     	; 0x12b4c <gpib_error_test+0x5e>
   12b1e:	80 e0       	ldi	r24, 0x00	; 0
   12b20:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   12b24:	89 2b       	or	r24, r25
   12b26:	79 f7       	brne	.-34     	; 0x12b06 <gpib_error_test+0x18>
   12b28:	0e 94 f0 74 	call	0xe9e0	; 0xe9e0 <mmc_ins_status>
   12b2c:	01 97       	sbiw	r24, 0x01	; 1
   12b2e:	59 f7       	brne	.-42     	; 0x12b06 <gpib_error_test+0x18>
   12b30:	62 c0       	rjmp	.+196    	; 0x12bf6 <gpib_error_test+0x108>
   12b32:	01 15       	cp	r16, r1
   12b34:	11 05       	cpc	r17, r1
   12b36:	51 f0       	breq	.+20     	; 0x12b4c <gpib_error_test+0x5e>
   12b38:	86 eb       	ldi	r24, 0xB6	; 182
   12b3a:	94 e1       	ldi	r25, 0x14	; 20
   12b3c:	1f 92       	push	r1
   12b3e:	9f 93       	push	r25
   12b40:	8f 93       	push	r24
   12b42:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12b46:	0f 90       	pop	r0
   12b48:	0f 90       	pop	r0
   12b4a:	0f 90       	pop	r0
   12b4c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12b50:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12b54:	85 70       	andi	r24, 0x05	; 5
   12b56:	99 27       	eor	r25, r25
   12b58:	89 2b       	or	r24, r25
   12b5a:	c1 f0       	breq	.+48     	; 0x12b8c <gpib_error_test+0x9e>
   12b5c:	f6 fe       	sbrs	r15, 6
   12b5e:	0a c0       	rjmp	.+20     	; 0x12b74 <gpib_error_test+0x86>
   12b60:	8b ea       	ldi	r24, 0xAB	; 171
   12b62:	94 e1       	ldi	r25, 0x14	; 20
   12b64:	1f 92       	push	r1
   12b66:	9f 93       	push	r25
   12b68:	8f 93       	push	r24
   12b6a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12b6e:	0f 90       	pop	r0
   12b70:	0f 90       	pop	r0
   12b72:	0f 90       	pop	r0
   12b74:	d7 ff       	sbrs	r29, 7
   12b76:	0a c0       	rjmp	.+20     	; 0x12b8c <gpib_error_test+0x9e>
   12b78:	84 ea       	ldi	r24, 0xA4	; 164
   12b7a:	94 e1       	ldi	r25, 0x14	; 20
   12b7c:	1f 92       	push	r1
   12b7e:	9f 93       	push	r25
   12b80:	8f 93       	push	r24
   12b82:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12b86:	0f 90       	pop	r0
   12b88:	0f 90       	pop	r0
   12b8a:	0f 90       	pop	r0
   12b8c:	80 e0       	ldi	r24, 0x00	; 0
   12b8e:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   12b92:	89 2b       	or	r24, r25
   12b94:	51 f0       	breq	.+20     	; 0x12baa <gpib_error_test+0xbc>
   12b96:	87 e9       	ldi	r24, 0x97	; 151
   12b98:	94 e1       	ldi	r25, 0x14	; 20
   12b9a:	1f 92       	push	r1
   12b9c:	9f 93       	push	r25
   12b9e:	8f 93       	push	r24
   12ba0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12ba4:	0f 90       	pop	r0
   12ba6:	0f 90       	pop	r0
   12ba8:	0f 90       	pop	r0
   12baa:	0e 94 f0 74 	call	0xe9e0	; 0xe9e0 <mmc_ins_status>
   12bae:	01 97       	sbiw	r24, 0x01	; 1
   12bb0:	51 f0       	breq	.+20     	; 0x12bc6 <gpib_error_test+0xd8>
   12bb2:	86 e8       	ldi	r24, 0x86	; 134
   12bb4:	94 e1       	ldi	r25, 0x14	; 20
   12bb6:	1f 92       	push	r1
   12bb8:	9f 93       	push	r25
   12bba:	8f 93       	push	r24
   12bbc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12bc0:	0f 90       	pop	r0
   12bc2:	0f 90       	pop	r0
   12bc4:	0f 90       	pop	r0
   12bc6:	01 15       	cp	r16, r1
   12bc8:	11 05       	cpc	r17, r1
   12bca:	09 f0       	breq	.+2      	; 0x12bce <gpib_error_test+0xe0>
   12bcc:	fb de       	rcall	.-522    	; 0x129c4 <gpib_init_devices>
   12bce:	80 e0       	ldi	r24, 0x00	; 0
   12bd0:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   12bd4:	89 2b       	or	r24, r25
   12bd6:	11 f0       	breq	.+4      	; 0x12bdc <gpib_error_test+0xee>
   12bd8:	f5 de       	rcall	.-534    	; 0x129c4 <gpib_init_devices>
   12bda:	0b c0       	rjmp	.+22     	; 0x12bf2 <gpib_error_test+0x104>
   12bdc:	0e 94 f0 74 	call	0xe9e0	; 0xe9e0 <mmc_ins_status>
   12be0:	01 97       	sbiw	r24, 0x01	; 1
   12be2:	39 f4       	brne	.+14     	; 0x12bf2 <gpib_error_test+0x104>
   12be4:	01 15       	cp	r16, r1
   12be6:	11 05       	cpc	r17, r1
   12be8:	31 f0       	breq	.+12     	; 0x12bf6 <gpib_error_test+0x108>
   12bea:	54 98       	cbi	0x0a, 4	; 10
   12bec:	4c 9b       	sbis	0x09, 4	; 9
   12bee:	fd cf       	rjmp	.-6      	; 0x12bea <gpib_error_test+0xfc>
   12bf0:	02 c0       	rjmp	.+4      	; 0x12bf6 <gpib_error_test+0x108>
   12bf2:	c1 e0       	ldi	r28, 0x01	; 1
   12bf4:	d0 e0       	ldi	r29, 0x00	; 0
   12bf6:	ce 01       	movw	r24, r28
   12bf8:	cd b7       	in	r28, 0x3d	; 61
   12bfa:	de b7       	in	r29, 0x3e	; 62
   12bfc:	e6 e0       	ldi	r30, 0x06	; 6
   12bfe:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00012c02 <GPIB_COMMANDS>:
   12c02:	1f 93       	push	r17
   12c04:	cf 93       	push	r28
   12c06:	df 93       	push	r29
   12c08:	ec 01       	movw	r28, r24
   12c0a:	16 2f       	mov	r17, r22
   12c0c:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   12c10:	8f 35       	cpi	r24, 0x5F	; 95
   12c12:	91 f0       	breq	.+36     	; 0x12c38 <GPIB_COMMANDS+0x36>
   12c14:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   12c18:	90 e0       	ldi	r25, 0x00	; 0
   12c1a:	7f de       	rcall	.-770    	; 0x1291a <AMIGO_is_MLA>
   12c1c:	89 2b       	or	r24, r25
   12c1e:	c9 f4       	brne	.+50     	; 0x12c52 <GPIB_COMMANDS+0x50>
   12c20:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   12c24:	90 e0       	ldi	r25, 0x00	; 0
   12c26:	46 de       	rcall	.-884    	; 0x128b4 <SS80_is_MLA>
   12c28:	89 2b       	or	r24, r25
   12c2a:	11 f5       	brne	.+68     	; 0x12c70 <GPIB_COMMANDS+0x6e>
   12c2c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   12c30:	90 e0       	ldi	r25, 0x00	; 0
   12c32:	a6 de       	rcall	.-692    	; 0x12980 <PRINTER_is_MLA>
   12c34:	89 2b       	or	r24, r25
   12c36:	59 f5       	brne	.+86     	; 0x12c8e <GPIB_COMMANDS+0x8c>
   12c38:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   12c3c:	8f 33       	cpi	r24, 0x3F	; 63
   12c3e:	19 f4       	brne	.+6      	; 0x12c46 <GPIB_COMMANDS+0x44>
   12c40:	80 e0       	ldi	r24, 0x00	; 0
   12c42:	90 e0       	ldi	r25, 0x00	; 0
   12c44:	2e c0       	rjmp	.+92     	; 0x12ca2 <GPIB_COMMANDS+0xa0>
   12c46:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   12c4a:	90 e0       	ldi	r25, 0x00	; 0
   12c4c:	77 de       	rcall	.-786    	; 0x1293c <AMIGO_is_MTA>
   12c4e:	89 2b       	or	r24, r25
   12c50:	49 f0       	breq	.+18     	; 0x12c64 <GPIB_COMMANDS+0x62>
   12c52:	11 23       	and	r17, r17
   12c54:	11 f0       	breq	.+4      	; 0x12c5a <GPIB_COMMANDS+0x58>
   12c56:	ce 01       	movw	r24, r28
   12c58:	a0 d8       	rcall	.-3776   	; 0x11d9a <gpib_unread>
   12c5a:	80 91 1a 1f 	lds	r24, 0x1F1A	; 0x801f1a <secondary>
   12c5e:	0e 94 0a b4 	call	0x16814	; 0x16814 <AMIGO_COMMANDS>
   12c62:	1d c0       	rjmp	.+58     	; 0x12c9e <GPIB_COMMANDS+0x9c>
   12c64:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   12c68:	90 e0       	ldi	r25, 0x00	; 0
   12c6a:	35 de       	rcall	.-918    	; 0x128d6 <SS80_is_MTA>
   12c6c:	89 2b       	or	r24, r25
   12c6e:	49 f0       	breq	.+18     	; 0x12c82 <GPIB_COMMANDS+0x80>
   12c70:	11 23       	and	r17, r17
   12c72:	11 f0       	breq	.+4      	; 0x12c78 <GPIB_COMMANDS+0x76>
   12c74:	ce 01       	movw	r24, r28
   12c76:	91 d8       	rcall	.-3806   	; 0x11d9a <gpib_unread>
   12c78:	80 91 1a 1f 	lds	r24, 0x1F1A	; 0x801f1a <secondary>
   12c7c:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <SS80_COMMANDS>
   12c80:	0e c0       	rjmp	.+28     	; 0x12c9e <GPIB_COMMANDS+0x9c>
   12c82:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   12c86:	90 e0       	ldi	r25, 0x00	; 0
   12c88:	8c de       	rcall	.-744    	; 0x129a2 <PRINTER_is_MTA>
   12c8a:	89 2b       	or	r24, r25
   12c8c:	c9 f2       	breq	.-78     	; 0x12c40 <GPIB_COMMANDS+0x3e>
   12c8e:	11 23       	and	r17, r17
   12c90:	11 f0       	breq	.+4      	; 0x12c96 <GPIB_COMMANDS+0x94>
   12c92:	ce 01       	movw	r24, r28
   12c94:	82 d8       	rcall	.-3836   	; 0x11d9a <gpib_unread>
   12c96:	80 91 1a 1f 	lds	r24, 0x1F1A	; 0x801f1a <secondary>
   12c9a:	0e 94 6a b6 	call	0x16cd4	; 0x16cd4 <PRINTER_COMMANDS>
   12c9e:	10 92 1a 1f 	sts	0x1F1A, r1	; 0x801f1a <secondary>
   12ca2:	df 91       	pop	r29
   12ca4:	cf 91       	pop	r28
   12ca6:	1f 91       	pop	r17
   12ca8:	08 95       	ret

00012caa <Send_Identify>:
   12caa:	a4 e0       	ldi	r26, 0x04	; 4
   12cac:	b0 e0       	ldi	r27, 0x00	; 0
   12cae:	eb e5       	ldi	r30, 0x5B	; 91
   12cb0:	f6 e9       	ldi	r31, 0x96	; 150
   12cb2:	0c 94 10 ed 	jmp	0x1da20	; 0x1da20 <__prologue_saves__+0x16>
   12cb6:	d8 2e       	mov	r13, r24
   12cb8:	7b 01       	movw	r14, r22
   12cba:	80 e0       	ldi	r24, 0x00	; 0
   12cbc:	91 e0       	ldi	r25, 0x01	; 1
   12cbe:	9c 83       	std	Y+4, r25	; 0x04
   12cc0:	8b 83       	std	Y+3, r24	; 0x03
   12cc2:	8b 01       	movw	r16, r22
   12cc4:	20 e0       	ldi	r18, 0x00	; 0
   12cc6:	30 e0       	ldi	r19, 0x00	; 0
   12cc8:	42 e0       	ldi	r20, 0x02	; 2
   12cca:	50 e0       	ldi	r21, 0x00	; 0
   12ccc:	60 e0       	ldi	r22, 0x00	; 0
   12cce:	70 e0       	ldi	r23, 0x00	; 0
   12cd0:	ce 01       	movw	r24, r28
   12cd2:	01 96       	adiw	r24, 0x01	; 1
   12cd4:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   12cd8:	ae 01       	movw	r20, r28
   12cda:	4d 5f       	subi	r20, 0xFD	; 253
   12cdc:	5f 4f       	sbci	r21, 0xFF	; 255
   12cde:	62 e0       	ldi	r22, 0x02	; 2
   12ce0:	70 e0       	ldi	r23, 0x00	; 0
   12ce2:	ce 01       	movw	r24, r28
   12ce4:	01 96       	adiw	r24, 0x01	; 1
   12ce6:	29 dd       	rcall	.-1454   	; 0x1273a <gpib_write_str>
   12ce8:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12cec:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12cf0:	02 97       	sbiw	r24, 0x02	; 2
   12cf2:	59 f0       	breq	.+22     	; 0x12d0a <Send_Identify+0x60>
   12cf4:	25 70       	andi	r18, 0x05	; 5
   12cf6:	33 27       	eor	r19, r19
   12cf8:	23 2b       	or	r18, r19
   12cfa:	c9 f0       	breq	.+50     	; 0x12d2e <Send_Identify+0x84>
   12cfc:	ff 92       	push	r15
   12cfe:	ef 92       	push	r14
   12d00:	1f 92       	push	r1
   12d02:	df 92       	push	r13
   12d04:	85 e6       	ldi	r24, 0x65	; 101
   12d06:	94 e1       	ldi	r25, 0x14	; 20
   12d08:	08 c0       	rjmp	.+16     	; 0x12d1a <Send_Identify+0x70>
   12d0a:	22 ff       	sbrs	r18, 2
   12d0c:	10 c0       	rjmp	.+32     	; 0x12d2e <Send_Identify+0x84>
   12d0e:	ff 92       	push	r15
   12d10:	ef 92       	push	r14
   12d12:	1f 92       	push	r1
   12d14:	df 92       	push	r13
   12d16:	8b e4       	ldi	r24, 0x4B	; 75
   12d18:	94 e1       	ldi	r25, 0x14	; 20
   12d1a:	1f 92       	push	r1
   12d1c:	9f 93       	push	r25
   12d1e:	8f 93       	push	r24
   12d20:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12d24:	0f b6       	in	r0, 0x3f	; 63
   12d26:	f8 94       	cli
   12d28:	de bf       	out	0x3e, r29	; 62
   12d2a:	0f be       	out	0x3f, r0	; 63
   12d2c:	cd bf       	out	0x3d, r28	; 61
   12d2e:	8b 81       	ldd	r24, Y+3	; 0x03
   12d30:	9c 81       	ldd	r25, Y+4	; 0x04
   12d32:	88 27       	eor	r24, r24
   12d34:	90 7d       	andi	r25, 0xD0	; 208
   12d36:	24 96       	adiw	r28, 0x04	; 4
   12d38:	e7 e0       	ldi	r30, 0x07	; 7
   12d3a:	0c 94 2c ed 	jmp	0x1da58	; 0x1da58 <__epilogue_restores__+0x16>

00012d3e <GPIB>:
   12d3e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12d42:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12d46:	85 30       	cpi	r24, 0x05	; 5
   12d48:	89 f4       	brne	.+34     	; 0x12d6c <GPIB+0x2e>
   12d4a:	24 71       	andi	r18, 0x14	; 20
   12d4c:	33 27       	eor	r19, r19
   12d4e:	23 2b       	or	r18, r19
   12d50:	51 f0       	breq	.+20     	; 0x12d66 <GPIB+0x28>
   12d52:	88 e3       	ldi	r24, 0x38	; 56
   12d54:	94 e1       	ldi	r25, 0x14	; 20
   12d56:	1f 92       	push	r1
   12d58:	9f 93       	push	r25
   12d5a:	8f 93       	push	r24
   12d5c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12d60:	0f 90       	pop	r0
   12d62:	0f 90       	pop	r0
   12d64:	0f 90       	pop	r0
   12d66:	10 92 16 1f 	sts	0x1F16, r1	; 0x801f16 <spoll>
   12d6a:	9d c0       	rjmp	.+314    	; 0x12ea6 <GPIB+0x168>
   12d6c:	85 31       	cpi	r24, 0x15	; 21
   12d6e:	39 f4       	brne	.+14     	; 0x12d7e <GPIB+0x40>
   12d70:	24 71       	andi	r18, 0x14	; 20
   12d72:	33 27       	eor	r19, r19
   12d74:	23 2b       	or	r18, r19
   12d76:	b9 f3       	breq	.-18     	; 0x12d66 <GPIB+0x28>
   12d78:	85 e2       	ldi	r24, 0x25	; 37
   12d7a:	94 e1       	ldi	r25, 0x14	; 20
   12d7c:	ec cf       	rjmp	.-40     	; 0x12d56 <GPIB+0x18>
   12d7e:	88 31       	cpi	r24, 0x18	; 24
   12d80:	c9 f4       	brne	.+50     	; 0x12db4 <GPIB+0x76>
   12d82:	22 ff       	sbrs	r18, 2
   12d84:	0a c0       	rjmp	.+20     	; 0x12d9a <GPIB+0x5c>
   12d86:	8e e1       	ldi	r24, 0x1E	; 30
   12d88:	94 e1       	ldi	r25, 0x14	; 20
   12d8a:	1f 92       	push	r1
   12d8c:	9f 93       	push	r25
   12d8e:	8f 93       	push	r24
   12d90:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12d94:	0f 90       	pop	r0
   12d96:	0f 90       	pop	r0
   12d98:	0f 90       	pop	r0
   12d9a:	81 e0       	ldi	r24, 0x01	; 1
   12d9c:	80 93 16 1f 	sts	0x1F16, r24	; 0x801f16 <spoll>
   12da0:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   12da4:	90 e0       	ldi	r25, 0x00	; 0
   12da6:	97 dd       	rcall	.-1234   	; 0x128d6 <SS80_is_MTA>
   12da8:	89 2b       	or	r24, r25
   12daa:	09 f4       	brne	.+2      	; 0x12dae <GPIB+0x70>
   12dac:	7c c0       	rjmp	.+248    	; 0x12ea6 <GPIB+0x168>
   12dae:	0c 94 30 a4 	jmp	0x14860	; 0x14860 <SS80_Report>
   12db2:	08 95       	ret
   12db4:	89 31       	cpi	r24, 0x19	; 25
   12db6:	29 f4       	brne	.+10     	; 0x12dc2 <GPIB+0x84>
   12db8:	22 ff       	sbrs	r18, 2
   12dba:	d5 cf       	rjmp	.-86     	; 0x12d66 <GPIB+0x28>
   12dbc:	87 e1       	ldi	r24, 0x17	; 23
   12dbe:	94 e1       	ldi	r25, 0x14	; 20
   12dc0:	ca cf       	rjmp	.-108    	; 0x12d56 <GPIB+0x18>
   12dc2:	84 30       	cpi	r24, 0x04	; 4
   12dc4:	09 f0       	breq	.+2      	; 0x12dc8 <GPIB+0x8a>
   12dc6:	48 c0       	rjmp	.+144    	; 0x12e58 <GPIB+0x11a>
   12dc8:	22 ff       	sbrs	r18, 2
   12dca:	0a c0       	rjmp	.+20     	; 0x12de0 <GPIB+0xa2>
   12dcc:	80 e1       	ldi	r24, 0x10	; 16
   12dce:	94 e1       	ldi	r25, 0x14	; 20
   12dd0:	1f 92       	push	r1
   12dd2:	9f 93       	push	r25
   12dd4:	8f 93       	push	r24
   12dd6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12dda:	0f 90       	pop	r0
   12ddc:	0f 90       	pop	r0
   12dde:	0f 90       	pop	r0
   12de0:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   12de4:	90 e0       	ldi	r25, 0x00	; 0
   12de6:	66 dd       	rcall	.-1332   	; 0x128b4 <SS80_is_MLA>
   12de8:	89 2b       	or	r24, r25
   12dea:	d9 f0       	breq	.+54     	; 0x12e22 <GPIB+0xe4>
   12dec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12df0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12df4:	84 72       	andi	r24, 0x24	; 36
   12df6:	99 27       	eor	r25, r25
   12df8:	89 2b       	or	r24, r25
   12dfa:	51 f0       	breq	.+20     	; 0x12e10 <GPIB+0xd2>
   12dfc:	84 e0       	ldi	r24, 0x04	; 4
   12dfe:	94 e1       	ldi	r25, 0x14	; 20
   12e00:	1f 92       	push	r1
   12e02:	9f 93       	push	r25
   12e04:	8f 93       	push	r24
   12e06:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12e0a:	0f 90       	pop	r0
   12e0c:	0f 90       	pop	r0
   12e0e:	0f 90       	pop	r0
   12e10:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   12e14:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   12e18:	85 81       	ldd	r24, Z+5	; 0x05
   12e1a:	90 e0       	ldi	r25, 0x00	; 0
   12e1c:	0c 94 fe a4 	jmp	0x149fc	; 0x149fc <SS80_Selected_Device_Clear>
   12e20:	08 95       	ret
   12e22:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   12e26:	90 e0       	ldi	r25, 0x00	; 0
   12e28:	78 dd       	rcall	.-1296   	; 0x1291a <AMIGO_is_MLA>
   12e2a:	89 2b       	or	r24, r25
   12e2c:	e1 f1       	breq	.+120    	; 0x12ea6 <GPIB+0x168>
   12e2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12e32:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12e36:	84 72       	andi	r24, 0x24	; 36
   12e38:	99 27       	eor	r25, r25
   12e3a:	89 2b       	or	r24, r25
   12e3c:	51 f0       	breq	.+20     	; 0x12e52 <GPIB+0x114>
   12e3e:	87 ef       	ldi	r24, 0xF7	; 247
   12e40:	93 e1       	ldi	r25, 0x13	; 19
   12e42:	1f 92       	push	r1
   12e44:	9f 93       	push	r25
   12e46:	8f 93       	push	r24
   12e48:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12e4c:	0f 90       	pop	r0
   12e4e:	0f 90       	pop	r0
   12e50:	0f 90       	pop	r0
   12e52:	0c 94 dd ae 	jmp	0x15dba	; 0x15dba <amigo_cmd_clear>
   12e56:	08 95       	ret
   12e58:	84 31       	cpi	r24, 0x14	; 20
   12e5a:	99 f4       	brne	.+38     	; 0x12e82 <GPIB+0x144>
   12e5c:	22 ff       	sbrs	r18, 2
   12e5e:	0a c0       	rjmp	.+20     	; 0x12e74 <GPIB+0x136>
   12e60:	80 ef       	ldi	r24, 0xF0	; 240
   12e62:	93 e1       	ldi	r25, 0x13	; 19
   12e64:	1f 92       	push	r1
   12e66:	9f 93       	push	r25
   12e68:	8f 93       	push	r24
   12e6a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12e6e:	0f 90       	pop	r0
   12e70:	0f 90       	pop	r0
   12e72:	0f 90       	pop	r0
   12e74:	0e 94 f0 a4 	call	0x149e0	; 0x149e0 <SS80_Universal_Device_Clear>
   12e78:	0e 94 dd ae 	call	0x15dba	; 0x15dba <amigo_cmd_clear>
   12e7c:	0e 94 09 b5 	call	0x16a12	; 0x16a12 <printer_close>
   12e80:	12 c0       	rjmp	.+36     	; 0x12ea6 <GPIB+0x168>
   12e82:	25 71       	andi	r18, 0x15	; 21
   12e84:	33 27       	eor	r19, r19
   12e86:	23 2b       	or	r18, r19
   12e88:	71 f0       	breq	.+28     	; 0x12ea6 <GPIB+0x168>
   12e8a:	1f 92       	push	r1
   12e8c:	8f 93       	push	r24
   12e8e:	84 ed       	ldi	r24, 0xD4	; 212
   12e90:	93 e1       	ldi	r25, 0x13	; 19
   12e92:	1f 92       	push	r1
   12e94:	9f 93       	push	r25
   12e96:	8f 93       	push	r24
   12e98:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12e9c:	0f 90       	pop	r0
   12e9e:	0f 90       	pop	r0
   12ea0:	0f 90       	pop	r0
   12ea2:	0f 90       	pop	r0
   12ea4:	0f 90       	pop	r0
   12ea6:	80 e0       	ldi	r24, 0x00	; 0
   12ea8:	90 e0       	ldi	r25, 0x00	; 0
   12eaa:	08 95       	ret

00012eac <GPIB_TALK>:
   12eac:	0f 93       	push	r16
   12eae:	1f 93       	push	r17
   12eb0:	cf 93       	push	r28
   12eb2:	c8 2f       	mov	r28, r24
   12eb4:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   12eb8:	80 93 1c 1f 	sts	0x1F1C, r24	; 0x801f1c <talking_last>
   12ebc:	c0 93 19 1f 	sts	0x1F19, r28	; 0x801f19 <talking>
   12ec0:	cf 35       	cpi	r28, 0x5F	; 95
   12ec2:	79 f4       	brne	.+30     	; 0x12ee2 <GPIB_TALK+0x36>
   12ec4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12ec8:	82 ff       	sbrs	r24, 2
   12eca:	7f c0       	rjmp	.+254    	; 0x12fca <GPIB_TALK+0x11e>
   12ecc:	81 e8       	ldi	r24, 0x81	; 129
   12ece:	93 e1       	ldi	r25, 0x13	; 19
   12ed0:	1f 92       	push	r1
   12ed2:	9f 93       	push	r25
   12ed4:	8f 93       	push	r24
   12ed6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12eda:	0f 90       	pop	r0
   12edc:	0f 90       	pop	r0
   12ede:	0f 90       	pop	r0
   12ee0:	74 c0       	rjmp	.+232    	; 0x12fca <GPIB_TALK+0x11e>
   12ee2:	0c 2f       	mov	r16, r28
   12ee4:	10 e0       	ldi	r17, 0x00	; 0
   12ee6:	c8 01       	movw	r24, r16
   12ee8:	f6 dc       	rcall	.-1556   	; 0x128d6 <SS80_is_MTA>
   12eea:	89 2b       	or	r24, r25
   12eec:	f1 f0       	breq	.+60     	; 0x12f2a <GPIB_TALK+0x7e>
   12eee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12ef2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12ef6:	84 72       	andi	r24, 0x24	; 36
   12ef8:	99 27       	eor	r25, r25
   12efa:	89 2b       	or	r24, r25
   12efc:	71 f0       	breq	.+28     	; 0x12f1a <GPIB_TALK+0x6e>
   12efe:	1f 92       	push	r1
   12f00:	cf 93       	push	r28
   12f02:	80 e7       	ldi	r24, 0x70	; 112
   12f04:	93 e1       	ldi	r25, 0x13	; 19
   12f06:	1f 92       	push	r1
   12f08:	9f 93       	push	r25
   12f0a:	8f 93       	push	r24
   12f0c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12f10:	0f 90       	pop	r0
   12f12:	0f 90       	pop	r0
   12f14:	0f 90       	pop	r0
   12f16:	0f 90       	pop	r0
   12f18:	0f 90       	pop	r0
   12f1a:	80 91 16 1f 	lds	r24, 0x1F16	; 0x801f16 <spoll>
   12f1e:	88 23       	and	r24, r24
   12f20:	09 f4       	brne	.+2      	; 0x12f24 <GPIB_TALK+0x78>
   12f22:	53 c0       	rjmp	.+166    	; 0x12fca <GPIB_TALK+0x11e>
   12f24:	0e 94 30 a4 	call	0x14860	; 0x14860 <SS80_Report>
   12f28:	50 c0       	rjmp	.+160    	; 0x12fca <GPIB_TALK+0x11e>
   12f2a:	c8 01       	movw	r24, r16
   12f2c:	07 dd       	rcall	.-1522   	; 0x1293c <AMIGO_is_MTA>
   12f2e:	89 2b       	or	r24, r25
   12f30:	71 f0       	breq	.+28     	; 0x12f4e <GPIB_TALK+0xa2>
   12f32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12f36:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12f3a:	84 72       	andi	r24, 0x24	; 36
   12f3c:	99 27       	eor	r25, r25
   12f3e:	89 2b       	or	r24, r25
   12f40:	09 f4       	brne	.+2      	; 0x12f44 <GPIB_TALK+0x98>
   12f42:	43 c0       	rjmp	.+134    	; 0x12fca <GPIB_TALK+0x11e>
   12f44:	1f 92       	push	r1
   12f46:	cf 93       	push	r28
   12f48:	8e e5       	ldi	r24, 0x5E	; 94
   12f4a:	93 e1       	ldi	r25, 0x13	; 19
   12f4c:	34 c0       	rjmp	.+104    	; 0x12fb6 <GPIB_TALK+0x10a>
   12f4e:	c8 01       	movw	r24, r16
   12f50:	28 dd       	rcall	.-1456   	; 0x129a2 <PRINTER_is_MTA>
   12f52:	89 2b       	or	r24, r25
   12f54:	69 f0       	breq	.+26     	; 0x12f70 <GPIB_TALK+0xc4>
   12f56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12f5a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12f5e:	84 72       	andi	r24, 0x24	; 36
   12f60:	99 27       	eor	r25, r25
   12f62:	89 2b       	or	r24, r25
   12f64:	91 f1       	breq	.+100    	; 0x12fca <GPIB_TALK+0x11e>
   12f66:	1f 92       	push	r1
   12f68:	cf 93       	push	r28
   12f6a:	8a e4       	ldi	r24, 0x4A	; 74
   12f6c:	93 e1       	ldi	r25, 0x13	; 19
   12f6e:	23 c0       	rjmp	.+70     	; 0x12fb6 <GPIB_TALK+0x10a>
   12f70:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   12f74:	90 e0       	ldi	r25, 0x00	; 0
   12f76:	04 dd       	rcall	.-1528   	; 0x12980 <PRINTER_is_MLA>
   12f78:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12f7c:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12f80:	89 2b       	or	r24, r25
   12f82:	99 f0       	breq	.+38     	; 0x12faa <GPIB_TALK+0xfe>
   12f84:	24 72       	andi	r18, 0x24	; 36
   12f86:	33 27       	eor	r19, r19
   12f88:	23 2b       	or	r18, r19
   12f8a:	51 f0       	breq	.+20     	; 0x12fa0 <GPIB_TALK+0xf4>
   12f8c:	8a e3       	ldi	r24, 0x3A	; 58
   12f8e:	93 e1       	ldi	r25, 0x13	; 19
   12f90:	1f 92       	push	r1
   12f92:	9f 93       	push	r25
   12f94:	8f 93       	push	r24
   12f96:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12f9a:	0f 90       	pop	r0
   12f9c:	0f 90       	pop	r0
   12f9e:	0f 90       	pop	r0
   12fa0:	80 e0       	ldi	r24, 0x00	; 0
   12fa2:	90 e0       	ldi	r25, 0x00	; 0
   12fa4:	0e 94 56 b5 	call	0x16aac	; 0x16aac <printer_open>
   12fa8:	10 c0       	rjmp	.+32     	; 0x12fca <GPIB_TALK+0x11e>
   12faa:	22 ff       	sbrs	r18, 2
   12fac:	0e c0       	rjmp	.+28     	; 0x12fca <GPIB_TALK+0x11e>
   12fae:	1f 92       	push	r1
   12fb0:	cf 93       	push	r28
   12fb2:	8e e2       	ldi	r24, 0x2E	; 46
   12fb4:	93 e1       	ldi	r25, 0x13	; 19
   12fb6:	1f 92       	push	r1
   12fb8:	9f 93       	push	r25
   12fba:	8f 93       	push	r24
   12fbc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   12fc0:	0f 90       	pop	r0
   12fc2:	0f 90       	pop	r0
   12fc4:	0f 90       	pop	r0
   12fc6:	0f 90       	pop	r0
   12fc8:	0f 90       	pop	r0
   12fca:	80 e0       	ldi	r24, 0x00	; 0
   12fcc:	90 e0       	ldi	r25, 0x00	; 0
   12fce:	cf 91       	pop	r28
   12fd0:	1f 91       	pop	r17
   12fd2:	0f 91       	pop	r16
   12fd4:	08 95       	ret

00012fd6 <GPIB_SECONDARY_ADDRESS>:
   12fd6:	0f 93       	push	r16
   12fd8:	1f 93       	push	r17
   12fda:	cf 93       	push	r28
   12fdc:	c8 2f       	mov	r28, r24
   12fde:	08 2f       	mov	r16, r24
   12fe0:	10 e0       	ldi	r17, 0x00	; 0
   12fe2:	c8 01       	movw	r24, r16
   12fe4:	89 dc       	rcall	.-1774   	; 0x128f8 <SS80_is_MSA>
   12fe6:	89 2b       	or	r24, r25
   12fe8:	19 f1       	breq	.+70     	; 0x13030 <GPIB_SECONDARY_ADDRESS+0x5a>
   12fea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12fee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12ff2:	84 72       	andi	r24, 0x24	; 36
   12ff4:	99 27       	eor	r25, r25
   12ff6:	89 2b       	or	r24, r25
   12ff8:	71 f0       	breq	.+28     	; 0x13016 <GPIB_SECONDARY_ADDRESS+0x40>
   12ffa:	1f 92       	push	r1
   12ffc:	cf 93       	push	r28
   12ffe:	8d e1       	ldi	r24, 0x1D	; 29
   13000:	93 e1       	ldi	r25, 0x13	; 19
   13002:	1f 92       	push	r1
   13004:	9f 93       	push	r25
   13006:	8f 93       	push	r24
   13008:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1300c:	0f 90       	pop	r0
   1300e:	0f 90       	pop	r0
   13010:	0f 90       	pop	r0
   13012:	0f 90       	pop	r0
   13014:	0f 90       	pop	r0
   13016:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   1301a:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   1301e:	81 81       	ldd	r24, Z+1	; 0x01
   13020:	90 e0       	ldi	r25, 0x00	; 0
   13022:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   13026:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   1302a:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   1302e:	27 c0       	rjmp	.+78     	; 0x1307e <GPIB_SECONDARY_ADDRESS+0xa8>
   13030:	c8 01       	movw	r24, r16
   13032:	95 dc       	rcall	.-1750   	; 0x1295e <AMIGO_is_MSA>
   13034:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   13038:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1303c:	89 2b       	or	r24, r25
   1303e:	21 f1       	breq	.+72     	; 0x13088 <GPIB_SECONDARY_ADDRESS+0xb2>
   13040:	c9 01       	movw	r24, r18
   13042:	84 72       	andi	r24, 0x24	; 36
   13044:	99 27       	eor	r25, r25
   13046:	89 2b       	or	r24, r25
   13048:	71 f0       	breq	.+28     	; 0x13066 <GPIB_SECONDARY_ADDRESS+0x90>
   1304a:	1f 92       	push	r1
   1304c:	cf 93       	push	r28
   1304e:	8b e0       	ldi	r24, 0x0B	; 11
   13050:	93 e1       	ldi	r25, 0x13	; 19
   13052:	1f 92       	push	r1
   13054:	9f 93       	push	r25
   13056:	8f 93       	push	r24
   13058:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1305c:	0f 90       	pop	r0
   1305e:	0f 90       	pop	r0
   13060:	0f 90       	pop	r0
   13062:	0f 90       	pop	r0
   13064:	0f 90       	pop	r0
   13066:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   1306a:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   1306e:	81 81       	ldd	r24, Z+1	; 0x01
   13070:	90 e0       	ldi	r25, 0x00	; 0
   13072:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   13076:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   1307a:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   1307e:	63 a1       	ldd	r22, Z+35	; 0x23
   13080:	74 a1       	ldd	r23, Z+36	; 0x24
   13082:	8c 2f       	mov	r24, r28
   13084:	12 de       	rcall	.-988    	; 0x12caa <Send_Identify>
   13086:	20 c0       	rjmp	.+64     	; 0x130c8 <GPIB_SECONDARY_ADDRESS+0xf2>
   13088:	c9 01       	movw	r24, r18
   1308a:	84 72       	andi	r24, 0x24	; 36
   1308c:	99 27       	eor	r25, r25
   1308e:	00 97       	sbiw	r24, 0x00	; 0
   13090:	d9 f0       	breq	.+54     	; 0x130c8 <GPIB_SECONDARY_ADDRESS+0xf2>
   13092:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   13096:	1f 92       	push	r1
   13098:	8f 93       	push	r24
   1309a:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   1309e:	1f 92       	push	r1
   130a0:	8f 93       	push	r24
   130a2:	1f 92       	push	r1
   130a4:	cf 93       	push	r28
   130a6:	85 ee       	ldi	r24, 0xE5	; 229
   130a8:	92 e1       	ldi	r25, 0x12	; 18
   130aa:	1f 92       	push	r1
   130ac:	9f 93       	push	r25
   130ae:	8f 93       	push	r24
   130b0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   130b4:	8d b7       	in	r24, 0x3d	; 61
   130b6:	9e b7       	in	r25, 0x3e	; 62
   130b8:	09 96       	adiw	r24, 0x09	; 9
   130ba:	0f b6       	in	r0, 0x3f	; 63
   130bc:	f8 94       	cli
   130be:	9e bf       	out	0x3e, r25	; 62
   130c0:	0f be       	out	0x3f, r0	; 63
   130c2:	8d bf       	out	0x3d, r24	; 61
   130c4:	80 e0       	ldi	r24, 0x00	; 0
   130c6:	90 e0       	ldi	r25, 0x00	; 0
   130c8:	cf 91       	pop	r28
   130ca:	1f 91       	pop	r17
   130cc:	0f 91       	pop	r16
   130ce:	08 95       	ret

000130d0 <listen_cleanup>:
   130d0:	60 91 15 1f 	lds	r22, 0x1F15	; 0x801f15 <listening_last>
   130d4:	66 23       	and	r22, r22
   130d6:	e9 f0       	breq	.+58     	; 0x13112 <listen_cleanup+0x42>
   130d8:	70 e0       	ldi	r23, 0x00	; 0
   130da:	40 e2       	ldi	r20, 0x20	; 32
   130dc:	50 e0       	ldi	r21, 0x00	; 0
   130de:	84 e0       	ldi	r24, 0x04	; 4
   130e0:	90 e0       	ldi	r25, 0x00	; 0
   130e2:	0e 94 d5 b7 	call	0x16faa	; 0x16faa <find_device>
   130e6:	01 96       	adiw	r24, 0x01	; 1
   130e8:	a1 f0       	breq	.+40     	; 0x13112 <listen_cleanup+0x42>
   130ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   130ee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   130f2:	84 72       	andi	r24, 0x24	; 36
   130f4:	99 27       	eor	r25, r25
   130f6:	89 2b       	or	r24, r25
   130f8:	51 f0       	breq	.+20     	; 0x1310e <listen_cleanup+0x3e>
   130fa:	84 ed       	ldi	r24, 0xD4	; 212
   130fc:	92 e1       	ldi	r25, 0x12	; 18
   130fe:	1f 92       	push	r1
   13100:	9f 93       	push	r25
   13102:	8f 93       	push	r24
   13104:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13108:	0f 90       	pop	r0
   1310a:	0f 90       	pop	r0
   1310c:	0f 90       	pop	r0
   1310e:	0c 94 09 b5 	jmp	0x16a12	; 0x16a12 <printer_close>
   13112:	08 95       	ret

00013114 <GPIB_LISTEN>:
   13114:	0f 93       	push	r16
   13116:	1f 93       	push	r17
   13118:	cf 93       	push	r28
   1311a:	c8 2f       	mov	r28, r24
   1311c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   13120:	80 93 15 1f 	sts	0x1F15, r24	; 0x801f15 <listening_last>
   13124:	c0 93 1b 1f 	sts	0x1F1B, r28	; 0x801f1b <listening>
   13128:	d3 df       	rcall	.-90     	; 0x130d0 <listen_cleanup>
   1312a:	cf 33       	cpi	r28, 0x3F	; 63
   1312c:	19 f5       	brne	.+70     	; 0x13174 <GPIB_LISTEN+0x60>
   1312e:	10 92 1b 1f 	sts	0x1F1B, r1	; 0x801f1b <listening>
   13132:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13136:	82 ff       	sbrs	r24, 2
   13138:	75 c0       	rjmp	.+234    	; 0x13224 <GPIB_LISTEN+0x110>
   1313a:	8d ec       	ldi	r24, 0xCD	; 205
   1313c:	93 e1       	ldi	r25, 0x13	; 19
   1313e:	1f 92       	push	r1
   13140:	9f 93       	push	r25
   13142:	8f 93       	push	r24
   13144:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13148:	0f 90       	pop	r0
   1314a:	0f 90       	pop	r0
   1314c:	0f 90       	pop	r0
   1314e:	80 91 13 1d 	lds	r24, 0x1D13	; 0x801d13 <lastcmd>
   13152:	90 91 14 1d 	lds	r25, 0x1D14	; 0x801d14 <lastcmd+0x1>
   13156:	8f 35       	cpi	r24, 0x5F	; 95
   13158:	91 05       	cpc	r25, r1
   1315a:	09 f0       	breq	.+2      	; 0x1315e <GPIB_LISTEN+0x4a>
   1315c:	63 c0       	rjmp	.+198    	; 0x13224 <GPIB_LISTEN+0x110>
   1315e:	8b ec       	ldi	r24, 0xCB	; 203
   13160:	93 e1       	ldi	r25, 0x13	; 19
   13162:	1f 92       	push	r1
   13164:	9f 93       	push	r25
   13166:	8f 93       	push	r24
   13168:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1316c:	0f 90       	pop	r0
   1316e:	0f 90       	pop	r0
   13170:	0f 90       	pop	r0
   13172:	58 c0       	rjmp	.+176    	; 0x13224 <GPIB_LISTEN+0x110>
   13174:	0c 2f       	mov	r16, r28
   13176:	10 e0       	ldi	r17, 0x00	; 0
   13178:	c8 01       	movw	r24, r16
   1317a:	cf db       	rcall	.-2146   	; 0x1291a <AMIGO_is_MLA>
   1317c:	89 2b       	or	r24, r25
   1317e:	71 f0       	breq	.+28     	; 0x1319c <GPIB_LISTEN+0x88>
   13180:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13184:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   13188:	84 72       	andi	r24, 0x24	; 36
   1318a:	99 27       	eor	r25, r25
   1318c:	89 2b       	or	r24, r25
   1318e:	09 f4       	brne	.+2      	; 0x13192 <GPIB_LISTEN+0x7e>
   13190:	49 c0       	rjmp	.+146    	; 0x13224 <GPIB_LISTEN+0x110>
   13192:	1f 92       	push	r1
   13194:	cf 93       	push	r28
   13196:	89 eb       	ldi	r24, 0xB9	; 185
   13198:	93 e1       	ldi	r25, 0x13	; 19
   1319a:	3a c0       	rjmp	.+116    	; 0x13210 <GPIB_LISTEN+0xfc>
   1319c:	c8 01       	movw	r24, r16
   1319e:	8a db       	rcall	.-2284   	; 0x128b4 <SS80_is_MLA>
   131a0:	89 2b       	or	r24, r25
   131a2:	69 f0       	breq	.+26     	; 0x131be <GPIB_LISTEN+0xaa>
   131a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   131a8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   131ac:	84 72       	andi	r24, 0x24	; 36
   131ae:	99 27       	eor	r25, r25
   131b0:	89 2b       	or	r24, r25
   131b2:	c1 f1       	breq	.+112    	; 0x13224 <GPIB_LISTEN+0x110>
   131b4:	1f 92       	push	r1
   131b6:	cf 93       	push	r28
   131b8:	88 ea       	ldi	r24, 0xA8	; 168
   131ba:	93 e1       	ldi	r25, 0x13	; 19
   131bc:	29 c0       	rjmp	.+82     	; 0x13210 <GPIB_LISTEN+0xfc>
   131be:	c8 01       	movw	r24, r16
   131c0:	df db       	rcall	.-2114   	; 0x12980 <PRINTER_is_MLA>
   131c2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   131c6:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   131ca:	89 2b       	or	r24, r25
   131cc:	d9 f0       	breq	.+54     	; 0x13204 <GPIB_LISTEN+0xf0>
   131ce:	24 72       	andi	r18, 0x24	; 36
   131d0:	33 27       	eor	r19, r19
   131d2:	23 2b       	or	r18, r19
   131d4:	71 f0       	breq	.+28     	; 0x131f2 <GPIB_LISTEN+0xde>
   131d6:	1f 92       	push	r1
   131d8:	cf 93       	push	r28
   131da:	84 e9       	ldi	r24, 0x94	; 148
   131dc:	93 e1       	ldi	r25, 0x13	; 19
   131de:	1f 92       	push	r1
   131e0:	9f 93       	push	r25
   131e2:	8f 93       	push	r24
   131e4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   131e8:	0f 90       	pop	r0
   131ea:	0f 90       	pop	r0
   131ec:	0f 90       	pop	r0
   131ee:	0f 90       	pop	r0
   131f0:	0f 90       	pop	r0
   131f2:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   131f6:	8f 35       	cpi	r24, 0x5F	; 95
   131f8:	a9 f0       	breq	.+42     	; 0x13224 <GPIB_LISTEN+0x110>
   131fa:	80 e0       	ldi	r24, 0x00	; 0
   131fc:	90 e0       	ldi	r25, 0x00	; 0
   131fe:	0e 94 56 b5 	call	0x16aac	; 0x16aac <printer_open>
   13202:	10 c0       	rjmp	.+32     	; 0x13224 <GPIB_LISTEN+0x110>
   13204:	22 ff       	sbrs	r18, 2
   13206:	0e c0       	rjmp	.+28     	; 0x13224 <GPIB_LISTEN+0x110>
   13208:	1f 92       	push	r1
   1320a:	cf 93       	push	r28
   1320c:	88 e8       	ldi	r24, 0x88	; 136
   1320e:	93 e1       	ldi	r25, 0x13	; 19
   13210:	1f 92       	push	r1
   13212:	9f 93       	push	r25
   13214:	8f 93       	push	r24
   13216:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1321a:	0f 90       	pop	r0
   1321c:	0f 90       	pop	r0
   1321e:	0f 90       	pop	r0
   13220:	0f 90       	pop	r0
   13222:	0f 90       	pop	r0
   13224:	80 e0       	ldi	r24, 0x00	; 0
   13226:	90 e0       	ldi	r25, 0x00	; 0
   13228:	cf 91       	pop	r28
   1322a:	1f 91       	pop	r17
   1322c:	0f 91       	pop	r16
   1322e:	08 95       	ret

00013230 <gpib_task>:
   13230:	cf 93       	push	r28
   13232:	df 93       	push	r29
   13234:	0e 94 25 8e 	call	0x11c4a	; 0x11c4a <gpib_state_init>
   13238:	c5 db       	rcall	.-2166   	; 0x129c4 <gpib_init_devices>
   1323a:	10 92 91 19 	sts	0x1991, r1	; 0x801991 <gpib_log_fp+0x1>
   1323e:	10 92 90 19 	sts	0x1990, r1	; 0x801990 <gpib_log_fp>
   13242:	80 e0       	ldi	r24, 0x00	; 0
   13244:	90 e0       	ldi	r25, 0x00	; 0
   13246:	f1 d8       	rcall	.-3614   	; 0x1242a <gpib_read_byte>
   13248:	ec 01       	movw	r28, r24
   1324a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1324e:	83 ff       	sbrs	r24, 3
   13250:	02 c0       	rjmp	.+4      	; 0x13256 <gpib_task+0x26>
   13252:	ce 01       	movw	r24, r28
   13254:	c0 d9       	rcall	.-3200   	; 0x125d6 <gpib_decode>
   13256:	ce 01       	movw	r24, r28
   13258:	4a dc       	rcall	.-1900   	; 0x12aee <gpib_error_test>
   1325a:	9c 01       	movw	r18, r24
   1325c:	23 70       	andi	r18, 0x03	; 3
   1325e:	33 27       	eor	r19, r19
   13260:	23 2b       	or	r18, r19
   13262:	09 f0       	breq	.+2      	; 0x13266 <gpib_task+0x36>
   13264:	43 c0       	rjmp	.+134    	; 0x132ec <gpib_task+0xbc>
   13266:	89 2b       	or	r24, r25
   13268:	61 f7       	brne	.-40     	; 0x13242 <gpib_task+0x12>
   1326a:	d2 ff       	sbrs	r29, 2
   1326c:	26 c0       	rjmp	.+76     	; 0x132ba <gpib_task+0x8a>
   1326e:	8c 2f       	mov	r24, r28
   13270:	8f 77       	andi	r24, 0x7F	; 127
   13272:	80 32       	cpi	r24, 0x20	; 32
   13274:	10 f4       	brcc	.+4      	; 0x1327a <gpib_task+0x4a>
   13276:	63 dd       	rcall	.-1338   	; 0x12d3e <GPIB>
   13278:	e4 cf       	rjmp	.-56     	; 0x13242 <gpib_task+0x12>
   1327a:	90 ee       	ldi	r25, 0xE0	; 224
   1327c:	98 0f       	add	r25, r24
   1327e:	90 32       	cpi	r25, 0x20	; 32
   13280:	10 f4       	brcc	.+4      	; 0x13286 <gpib_task+0x56>
   13282:	48 df       	rcall	.-368    	; 0x13114 <GPIB_LISTEN>
   13284:	de cf       	rjmp	.-68     	; 0x13242 <gpib_task+0x12>
   13286:	90 ec       	ldi	r25, 0xC0	; 192
   13288:	98 0f       	add	r25, r24
   1328a:	90 32       	cpi	r25, 0x20	; 32
   1328c:	10 f4       	brcc	.+4      	; 0x13292 <gpib_task+0x62>
   1328e:	0e de       	rcall	.-996    	; 0x12eac <GPIB_TALK>
   13290:	d8 cf       	rjmp	.-80     	; 0x13242 <gpib_task+0x12>
   13292:	90 91 1b 1f 	lds	r25, 0x1F1B	; 0x801f1b <listening>
   13296:	99 23       	and	r25, r25
   13298:	59 f0       	breq	.+22     	; 0x132b0 <gpib_task+0x80>
   1329a:	20 91 13 1d 	lds	r18, 0x1D13	; 0x801d13 <lastcmd>
   1329e:	30 91 14 1d 	lds	r19, 0x1D14	; 0x801d14 <lastcmd+0x1>
   132a2:	2f 35       	cpi	r18, 0x5F	; 95
   132a4:	31 05       	cpc	r19, r1
   132a6:	21 f4       	brne	.+8      	; 0x132b0 <gpib_task+0x80>
   132a8:	10 92 1a 1f 	sts	0x1F1A, r1	; 0x801f1a <secondary>
   132ac:	94 de       	rcall	.-728    	; 0x12fd6 <GPIB_SECONDARY_ADDRESS>
   132ae:	c9 cf       	rjmp	.-110    	; 0x13242 <gpib_task+0x12>
   132b0:	80 93 1a 1f 	sts	0x1F1A, r24	; 0x801f1a <secondary>
   132b4:	60 e0       	ldi	r22, 0x00	; 0
   132b6:	90 e0       	ldi	r25, 0x00	; 0
   132b8:	12 c0       	rjmp	.+36     	; 0x132de <gpib_task+0xae>
   132ba:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   132be:	90 e0       	ldi	r25, 0x00	; 0
   132c0:	5f db       	rcall	.-2370   	; 0x12980 <PRINTER_is_MLA>
   132c2:	89 2b       	or	r24, r25
   132c4:	29 f0       	breq	.+10     	; 0x132d0 <gpib_task+0xa0>
   132c6:	ce 01       	movw	r24, r28
   132c8:	99 27       	eor	r25, r25
   132ca:	0e 94 f7 b5 	call	0x16bee	; 0x16bee <printer_buffer>
   132ce:	b9 cf       	rjmp	.-142    	; 0x13242 <gpib_task+0x12>
   132d0:	80 91 1a 1f 	lds	r24, 0x1F1A	; 0x801f1a <secondary>
   132d4:	88 23       	and	r24, r24
   132d6:	09 f4       	brne	.+2      	; 0x132da <gpib_task+0xaa>
   132d8:	b4 cf       	rjmp	.-152    	; 0x13242 <gpib_task+0x12>
   132da:	61 e0       	ldi	r22, 0x01	; 1
   132dc:	ce 01       	movw	r24, r28
   132de:	91 dc       	rcall	.-1758   	; 0x12c02 <GPIB_COMMANDS>
   132e0:	06 dc       	rcall	.-2036   	; 0x12aee <gpib_error_test>
   132e2:	83 70       	andi	r24, 0x03	; 3
   132e4:	99 27       	eor	r25, r25
   132e6:	89 2b       	or	r24, r25
   132e8:	09 f4       	brne	.+2      	; 0x132ec <gpib_task+0xbc>
   132ea:	ab cf       	rjmp	.-170    	; 0x13242 <gpib_task+0x12>
   132ec:	df 91       	pop	r29
   132ee:	cf 91       	pop	r28
   132f0:	08 95       	ret

000132f2 <talk_cleanup>:
   132f2:	08 95       	ret

000132f4 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   132f4:	cf 93       	push	r28
   132f6:	df 93       	push	r29
   132f8:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   132fa:	87 e2       	ldi	r24, 0x27	; 39
   132fc:	98 e1       	ldi	r25, 0x18	; 24
   132fe:	1f 92       	push	r1
   13300:	9f 93       	push	r25
   13302:	8f 93       	push	r24
   13304:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    if(full)
   13308:	0f 90       	pop	r0
   1330a:	0f 90       	pop	r0
   1330c:	0f 90       	pop	r0
   1330e:	cd 2b       	or	r28, r29
   13310:	51 f0       	breq	.+20     	; 0x13326 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   13312:	86 ea       	ldi	r24, 0xA6	; 166
   13314:	96 e1       	ldi	r25, 0x16	; 22
   13316:	1f 92       	push	r1
   13318:	9f 93       	push	r25
   1331a:	8f 93       	push	r24
   1331c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13320:	0f 90       	pop	r0
   13322:	0f 90       	pop	r0
   13324:	0f 90       	pop	r0
			"gpib port write latch [A-D] val\n"
			"gpib port write pins  [A-D] val\n"
            "\n"
            );
    }
}
   13326:	df 91       	pop	r29
   13328:	cf 91       	pop	r28
   1332a:	08 95       	ret

0001332c <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1332c:	ef 92       	push	r14
   1332e:	ff 92       	push	r15
   13330:	0f 93       	push	r16
   13332:	1f 93       	push	r17
   13334:	cf 93       	push	r28
   13336:	df 93       	push	r29
   13338:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1333a:	fb 01       	movw	r30, r22
   1333c:	80 81       	ld	r24, Z
   1333e:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   13340:	00 97       	sbiw	r24, 0x00	; 0
   13342:	19 f4       	brne	.+6      	; 0x1334a <gpib_tests+0x1e>
        return(0);
   13344:	80 e0       	ldi	r24, 0x00	; 0
   13346:	90 e0       	ldi	r25, 0x00	; 0
   13348:	e5 c2       	rjmp	.+1482   	; 0x13914 <gpib_tests+0x5e8>
   1334a:	eb 01       	movw	r28, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1334c:	68 e3       	ldi	r22, 0x38	; 56
   1334e:	7d e0       	ldi	r23, 0x0D	; 13
   13350:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   13354:	89 2b       	or	r24, r25
   13356:	b1 f3       	breq	.-20     	; 0x13344 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   13358:	0a 81       	ldd	r16, Y+2	; 0x02
   1335a:	1b 81       	ldd	r17, Y+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   1335c:	01 15       	cp	r16, r1
   1335e:	11 05       	cpc	r17, r1
   13360:	21 f4       	brne	.+8      	; 0x1336a <gpib_tests+0x3e>
    {
        gpib_help(1);
   13362:	81 e0       	ldi	r24, 0x01	; 1
   13364:	90 e0       	ldi	r25, 0x00	; 0
   13366:	c6 df       	rcall	.-116    	; 0x132f4 <gpib_help>
   13368:	d3 c2       	rjmp	.+1446   	; 0x13910 <gpib_tests+0x5e4>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   1336a:	66 e4       	ldi	r22, 0x46	; 70
   1336c:	76 e1       	ldi	r23, 0x16	; 22
   1336e:	c8 01       	movw	r24, r16
   13370:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   13374:	89 2b       	or	r24, r25
   13376:	a9 f7       	brne	.-22     	; 0x13362 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   13378:	97 01       	movw	r18, r14
   1337a:	42 e0       	ldi	r20, 0x02	; 2
   1337c:	50 e0       	ldi	r21, 0x00	; 0
   1337e:	6d e3       	ldi	r22, 0x3D	; 61
   13380:	7d e0       	ldi	r23, 0x0D	; 13
   13382:	c8 01       	movw	r24, r16
   13384:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   13388:	89 2b       	or	r24, r25
   1338a:	19 f0       	breq	.+6      	; 0x13392 <gpib_tests+0x66>
    {
        display_Addresses();
   1338c:	0e 94 53 c4 	call	0x188a6	; 0x188a6 <display_Addresses>
   13390:	bf c2       	rjmp	.+1406   	; 0x13910 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   13392:	97 01       	movw	r18, r14
   13394:	42 e0       	ldi	r20, 0x02	; 2
   13396:	50 e0       	ldi	r21, 0x00	; 0
   13398:	67 e4       	ldi	r22, 0x47	; 71
   1339a:	7d e0       	ldi	r23, 0x0D	; 13
   1339c:	c8 01       	movw	r24, r16
   1339e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   133a2:	89 2b       	or	r24, r25
   133a4:	19 f0       	breq	.+6      	; 0x133ac <gpib_tests+0x80>
    {
        display_Config();
   133a6:	0e 94 4e c5 	call	0x18a9c	; 0x18a9c <display_Config>
   133aa:	b2 c2       	rjmp	.+1380   	; 0x13910 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   133ac:	97 01       	movw	r18, r14
   133ae:	43 e0       	ldi	r20, 0x03	; 3
   133b0:	50 e0       	ldi	r21, 0x00	; 0
   133b2:	6e e4       	ldi	r22, 0x4E	; 78
   133b4:	7d e0       	ldi	r23, 0x0D	; 13
   133b6:	c8 01       	movw	r24, r16
   133b8:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   133bc:	89 2b       	or	r24, r25
   133be:	69 f0       	breq	.+26     	; 0x133da <gpib_tests+0xae>
    {
        debuglevel = get_value(argv[ind]);
   133c0:	8c 81       	ldd	r24, Y+4	; 0x04
   133c2:	9d 81       	ldd	r25, Y+5	; 0x05
   133c4:	0e 94 22 34 	call	0x6844	; 0x6844 <get_value>
   133c8:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   133cc:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   133d0:	7f 93       	push	r23
   133d2:	6f 93       	push	r22
   133d4:	89 e9       	ldi	r24, 0x99	; 153
   133d6:	96 e1       	ldi	r25, 0x16	; 22
   133d8:	b9 c1       	rjmp	.+882    	; 0x1374c <gpib_tests+0x420>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   133da:	97 01       	movw	r18, r14
   133dc:	42 e0       	ldi	r20, 0x02	; 2
   133de:	50 e0       	ldi	r21, 0x00	; 0
   133e0:	64 e5       	ldi	r22, 0x54	; 84
   133e2:	7d e0       	ldi	r23, 0x0D	; 13
   133e4:	c8 01       	movw	r24, r16
   133e6:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   133ea:	89 2b       	or	r24, r25
   133ec:	19 f0       	breq	.+6      	; 0x133f4 <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   133ee:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   133f2:	8e c2       	rjmp	.+1308   	; 0x13910 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   133f4:	97 01       	movw	r18, r14
   133f6:	42 e0       	ldi	r20, 0x02	; 2
   133f8:	50 e0       	ldi	r21, 0x00	; 0
   133fa:	62 e6       	ldi	r22, 0x62	; 98
   133fc:	7d e0       	ldi	r23, 0x0D	; 13
   133fe:	c8 01       	movw	r24, r16
   13400:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   13404:	89 2b       	or	r24, r25
   13406:	29 f0       	breq	.+10     	; 0x13412 <gpib_tests+0xe6>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   13408:	8a e6       	ldi	r24, 0x6A	; 106
   1340a:	9d e0       	ldi	r25, 0x0D	; 13
   1340c:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   13410:	7f c2       	rjmp	.+1278   	; 0x13910 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   13412:	97 01       	movw	r18, r14
   13414:	42 e0       	ldi	r20, 0x02	; 2
   13416:	50 e0       	ldi	r21, 0x00	; 0
   13418:	68 e7       	ldi	r22, 0x78	; 120
   1341a:	7d e0       	ldi	r23, 0x0D	; 13
   1341c:	c8 01       	movw	r24, r16
   1341e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   13422:	89 2b       	or	r24, r25
    {
        gpib_task();
   13424:	11 f0       	breq	.+4      	; 0x1342a <gpib_tests+0xfe>
   13426:	04 df       	rcall	.-504    	; 0x13230 <gpib_task>
   13428:	73 c2       	rjmp	.+1254   	; 0x13910 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   1342a:	97 01       	movw	r18, r14
   1342c:	43 e0       	ldi	r20, 0x03	; 3
   1342e:	50 e0       	ldi	r21, 0x00	; 0
   13430:	6d e7       	ldi	r22, 0x7D	; 125
   13432:	7d e0       	ldi	r23, 0x0D	; 13
   13434:	c8 01       	movw	r24, r16
   13436:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1343a:	89 2b       	or	r24, r25
   1343c:	a1 f0       	breq	.+40     	; 0x13466 <gpib_tests+0x13a>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1343e:	8e 81       	ldd	r24, Y+6	; 0x06
   13440:	9f 81       	ldd	r25, Y+7	; 0x07
   13442:	00 97       	sbiw	r24, 0x00	; 0
   13444:	51 f0       	breq	.+20     	; 0x1345a <gpib_tests+0x12e>
   13446:	63 e8       	ldi	r22, 0x83	; 131
   13448:	7d e0       	ldi	r23, 0x0D	; 13
   1344a:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   1344e:	61 e0       	ldi	r22, 0x01	; 1
   13450:	70 e0       	ldi	r23, 0x00	; 0
   13452:	89 2b       	or	r24, r25
   13454:	21 f4       	brne	.+8      	; 0x1345e <gpib_tests+0x132>
   13456:	60 e0       	ldi	r22, 0x00	; 0
   13458:	02 c0       	rjmp	.+4      	; 0x1345e <gpib_tests+0x132>
   1345a:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1345c:	70 e0       	ldi	r23, 0x00	; 0
   1345e:	8c 81       	ldd	r24, Y+4	; 0x04
   13460:	9d 81       	ldd	r25, Y+5	; 0x05
   13462:	b8 da       	rcall	.-2704   	; 0x129d4 <gpib_trace_task>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   13464:	55 c2       	rjmp	.+1194   	; 0x13910 <gpib_tests+0x5e4>
   13466:	97 01       	movw	r18, r14
   13468:	42 e0       	ldi	r20, 0x02	; 2
   1346a:	50 e0       	ldi	r21, 0x00	; 0
   1346c:	67 e8       	ldi	r22, 0x87	; 135
   1346e:	7d e0       	ldi	r23, 0x0D	; 13
   13470:	c8 01       	movw	r24, r16
   13472:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   13476:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   13478:	19 f0       	breq	.+6      	; 0x13480 <gpib_tests+0x154>
   1347a:	0e 94 af 8e 	call	0x11d5e	; 0x11d5e <gpib_assert_ifc>
        return(1);

    }

    if (MATCHARGS(ptr,"plot_echo", (ind+1) ,argc))
   1347e:	48 c2       	rjmp	.+1168   	; 0x13910 <gpib_tests+0x5e4>
   13480:	97 01       	movw	r18, r14
   13482:	43 e0       	ldi	r20, 0x03	; 3
   13484:	50 e0       	ldi	r21, 0x00	; 0
   13486:	6b e8       	ldi	r22, 0x8B	; 139
   13488:	7d e0       	ldi	r23, 0x0D	; 13
   1348a:	c8 01       	movw	r24, r16
   1348c:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   13490:	89 2b       	or	r24, r25
    {
        plot_echo(atoi(argv[ind]) );
   13492:	39 f0       	breq	.+14     	; 0x134a2 <gpib_tests+0x176>
   13494:	8c 81       	ldd	r24, Y+4	; 0x04
   13496:	9d 81       	ldd	r25, Y+5	; 0x05
   13498:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <atoi>
   1349c:	0e 94 99 b6 	call	0x16d32	; 0x16d32 <plot_echo>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_clr", (ind+1) ,argc))
   134a0:	37 c2       	rjmp	.+1134   	; 0x13910 <gpib_tests+0x5e4>
   134a2:	97 01       	movw	r18, r14
   134a4:	43 e0       	ldi	r20, 0x03	; 3
   134a6:	50 e0       	ldi	r21, 0x00	; 0
   134a8:	65 e9       	ldi	r22, 0x95	; 149
   134aa:	7d e0       	ldi	r23, 0x0D	; 13
   134ac:	c8 01       	movw	r24, r16
   134ae:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   134b2:	89 2b       	or	r24, r25
    {
        ppr_bit_clr(atoh(argv[ind] ));
   134b4:	41 f0       	breq	.+16     	; 0x134c6 <gpib_tests+0x19a>
   134b6:	8c 81       	ldd	r24, Y+4	; 0x04
   134b8:	9d 81       	ldd	r25, Y+5	; 0x05
   134ba:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <atoh>
   134be:	86 2f       	mov	r24, r22
   134c0:	0e 94 57 8c 	call	0x118ae	; 0x118ae <ppr_bit_clr>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_set", (ind+1) ,argc))
   134c4:	25 c2       	rjmp	.+1098   	; 0x13910 <gpib_tests+0x5e4>
   134c6:	97 01       	movw	r18, r14
   134c8:	43 e0       	ldi	r20, 0x03	; 3
   134ca:	50 e0       	ldi	r21, 0x00	; 0
   134cc:	61 ea       	ldi	r22, 0xA1	; 161
   134ce:	7d e0       	ldi	r23, 0x0D	; 13
   134d0:	c8 01       	movw	r24, r16
   134d2:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   134d6:	89 2b       	or	r24, r25
    {
        ppr_bit_set(atoh(argv[ind]) );
   134d8:	41 f0       	breq	.+16     	; 0x134ea <gpib_tests+0x1be>
   134da:	8c 81       	ldd	r24, Y+4	; 0x04
   134dc:	9d 81       	ldd	r25, Y+5	; 0x05
   134de:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <atoh>
   134e2:	86 2f       	mov	r24, r22
   134e4:	0e 94 4a 8c 	call	0x11894	; 0x11894 <ppr_bit_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_set", (ind+1) ,argc))
   134e8:	13 c2       	rjmp	.+1062   	; 0x13910 <gpib_tests+0x5e4>
   134ea:	97 01       	movw	r18, r14
   134ec:	43 e0       	ldi	r20, 0x03	; 3
   134ee:	50 e0       	ldi	r21, 0x00	; 0
   134f0:	6d ea       	ldi	r22, 0xAD	; 173
   134f2:	7d e0       	ldi	r23, 0x0D	; 13
   134f4:	c8 01       	movw	r24, r16
   134f6:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   134fa:	89 2b       	or	r24, r25
    {
        ppr_set(atoh(argv[ind]) );
   134fc:	41 f0       	breq	.+16     	; 0x1350e <gpib_tests+0x1e2>
   134fe:	8c 81       	ldd	r24, Y+4	; 0x04
   13500:	9d 81       	ldd	r25, Y+5	; 0x05
   13502:	0e 94 9a 47 	call	0x8f34	; 0x8f34 <atoh>
   13506:	86 2f       	mov	r24, r22
   13508:	0e 94 2b 8c 	call	0x11856	; 0x11856 <ppr_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_init",(ind+0),argc))
   1350c:	01 c2       	rjmp	.+1026   	; 0x13910 <gpib_tests+0x5e4>
   1350e:	97 01       	movw	r18, r14
   13510:	42 e0       	ldi	r20, 0x02	; 2
   13512:	50 e0       	ldi	r21, 0x00	; 0
   13514:	65 eb       	ldi	r22, 0xB5	; 181
   13516:	7d e0       	ldi	r23, 0x0D	; 13
   13518:	c8 01       	movw	r24, r16
   1351a:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1351e:	89 2b       	or	r24, r25
    {
        ppr_init();
   13520:	19 f0       	breq	.+6      	; 0x13528 <gpib_tests+0x1fc>
   13522:	0e 94 39 8c 	call	0x11872	; 0x11872 <ppr_init>
        return(1);
    }


	// port read
    if (MATCHARGS(ptr,"port",(ind+3),argc))
   13526:	f4 c1       	rjmp	.+1000   	; 0x13910 <gpib_tests+0x5e4>
   13528:	97 01       	movw	r18, r14
   1352a:	45 e0       	ldi	r20, 0x05	; 5
   1352c:	50 e0       	ldi	r21, 0x00	; 0
   1352e:	6e eb       	ldi	r22, 0xBE	; 190
   13530:	7d e0       	ldi	r23, 0x0D	; 13
   13532:	c8 01       	movw	r24, r16
   13534:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   13538:	89 2b       	or	r24, r25
   1353a:	09 f4       	brne	.+2      	; 0x1353e <gpib_tests+0x212>
    {
        if( MATCHI(argv[ind],"read") )
   1353c:	12 c1       	rjmp	.+548    	; 0x13762 <gpib_tests+0x436>
   1353e:	63 ec       	ldi	r22, 0xC3	; 195
   13540:	7d e0       	ldi	r23, 0x0D	; 13
   13542:	8c 81       	ldd	r24, Y+4	; 0x04
   13544:	9d 81       	ldd	r25, Y+5	; 0x05
   13546:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   1354a:	89 2b       	or	r24, r25
   1354c:	09 f4       	brne	.+2      	; 0x13550 <gpib_tests+0x224>
		{
			if( MATCHI(argv[ind+1],"pins") )
   1354e:	09 c1       	rjmp	.+530    	; 0x13762 <gpib_tests+0x436>
   13550:	68 ec       	ldi	r22, 0xC8	; 200
   13552:	7d e0       	ldi	r23, 0x0D	; 13
   13554:	8e 81       	ldd	r24, Y+6	; 0x06
   13556:	9f 81       	ldd	r25, Y+7	; 0x07
   13558:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   1355c:	89 2b       	or	r24, r25
   1355e:	09 f4       	brne	.+2      	; 0x13562 <gpib_tests+0x236>
			{   
				if( MATCHI(argv[ind+2],"A")) 
   13560:	4c c0       	rjmp	.+152    	; 0x135fa <gpib_tests+0x2ce>
   13562:	60 ec       	ldi	r22, 0xC0	; 192
   13564:	73 e1       	ldi	r23, 0x13	; 19
   13566:	88 85       	ldd	r24, Y+8	; 0x08
   13568:	99 85       	ldd	r25, Y+9	; 0x09
   1356a:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   1356e:	89 2b       	or	r24, r25
				{
					printf("Port pins A RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTA) );
   13570:	59 f0       	breq	.+22     	; 0x13588 <gpib_tests+0x25c>
   13572:	e2 b1       	in	r30, 0x02	; 2
   13574:	83 e0       	ldi	r24, 0x03	; 3
   13576:	e8 9f       	mul	r30, r24
   13578:	f0 01       	movw	r30, r0
   1357a:	11 24       	eor	r1, r1
   1357c:	80 a1       	ldd	r24, Z+32	; 0x20
   1357e:	1f 92       	push	r1
   13580:	8f 93       	push	r24
   13582:	81 e8       	ldi	r24, 0x81	; 129
   13584:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13586:	e2 c0       	rjmp	.+452    	; 0x1374c <gpib_tests+0x420>
   13588:	6d ec       	ldi	r22, 0xCD	; 205
   1358a:	7d e0       	ldi	r23, 0x0D	; 13
   1358c:	88 85       	ldd	r24, Y+8	; 0x08
   1358e:	99 85       	ldd	r25, Y+9	; 0x09
   13590:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13594:	89 2b       	or	r24, r25
				{
					printf("Port pins B RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTB) );
   13596:	59 f0       	breq	.+22     	; 0x135ae <gpib_tests+0x282>
   13598:	e5 b1       	in	r30, 0x05	; 5
   1359a:	83 e0       	ldi	r24, 0x03	; 3
   1359c:	e8 9f       	mul	r30, r24
   1359e:	f0 01       	movw	r30, r0
   135a0:	11 24       	eor	r1, r1
   135a2:	80 a1       	ldd	r24, Z+32	; 0x20
   135a4:	1f 92       	push	r1
   135a6:	8f 93       	push	r24
   135a8:	89 e6       	ldi	r24, 0x69	; 105
   135aa:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   135ac:	cf c0       	rjmp	.+414    	; 0x1374c <gpib_tests+0x420>
   135ae:	66 ef       	ldi	r22, 0xF6	; 246
   135b0:	7c e0       	ldi	r23, 0x0C	; 12
   135b2:	88 85       	ldd	r24, Y+8	; 0x08
   135b4:	99 85       	ldd	r25, Y+9	; 0x09
   135b6:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   135ba:	89 2b       	or	r24, r25
				{
					printf("Port pins C RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTC) );
   135bc:	59 f0       	breq	.+22     	; 0x135d4 <gpib_tests+0x2a8>
   135be:	e8 b1       	in	r30, 0x08	; 8
   135c0:	83 e0       	ldi	r24, 0x03	; 3
   135c2:	e8 9f       	mul	r30, r24
   135c4:	f0 01       	movw	r30, r0
   135c6:	11 24       	eor	r1, r1
   135c8:	80 a1       	ldd	r24, Z+32	; 0x20
   135ca:	1f 92       	push	r1
   135cc:	8f 93       	push	r24
   135ce:	81 e5       	ldi	r24, 0x51	; 81
   135d0:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   135d2:	bc c0       	rjmp	.+376    	; 0x1374c <gpib_tests+0x420>
   135d4:	63 e5       	ldi	r22, 0x53	; 83
   135d6:	77 e0       	ldi	r23, 0x07	; 7
   135d8:	88 85       	ldd	r24, Y+8	; 0x08
   135da:	99 85       	ldd	r25, Y+9	; 0x09
   135dc:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   135e0:	89 2b       	or	r24, r25
				{
					printf("Port pins D RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTD) );
   135e2:	59 f0       	breq	.+22     	; 0x135fa <gpib_tests+0x2ce>
   135e4:	eb b1       	in	r30, 0x0b	; 11
   135e6:	83 e0       	ldi	r24, 0x03	; 3
   135e8:	e8 9f       	mul	r30, r24
   135ea:	f0 01       	movw	r30, r0
   135ec:	11 24       	eor	r1, r1
   135ee:	80 a1       	ldd	r24, Z+32	; 0x20
   135f0:	1f 92       	push	r1
   135f2:	8f 93       	push	r24
   135f4:	89 e3       	ldi	r24, 0x39	; 57
   135f6:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   135f8:	a9 c0       	rjmp	.+338    	; 0x1374c <gpib_tests+0x420>
   135fa:	6f ec       	ldi	r22, 0xCF	; 207
   135fc:	7d e0       	ldi	r23, 0x0D	; 13
   135fe:	8e 81       	ldd	r24, Y+6	; 0x06
   13600:	9f 81       	ldd	r25, Y+7	; 0x07
   13602:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13606:	89 2b       	or	r24, r25
   13608:	09 f4       	brne	.+2      	; 0x1360c <gpib_tests+0x2e0>
			{   
				if( MATCHI(argv[ind+2],"A"))
   1360a:	4c c0       	rjmp	.+152    	; 0x136a4 <gpib_tests+0x378>
   1360c:	60 ec       	ldi	r22, 0xC0	; 192
   1360e:	73 e1       	ldi	r23, 0x13	; 19
   13610:	88 85       	ldd	r24, Y+8	; 0x08
   13612:	99 85       	ldd	r25, Y+9	; 0x09
   13614:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13618:	89 2b       	or	r24, r25
				{
					printf("Port latch A RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTA) );
   1361a:	59 f0       	breq	.+22     	; 0x13632 <gpib_tests+0x306>
   1361c:	e2 b1       	in	r30, 0x02	; 2
   1361e:	83 e0       	ldi	r24, 0x03	; 3
   13620:	e8 9f       	mul	r30, r24
   13622:	f0 01       	movw	r30, r0
   13624:	11 24       	eor	r1, r1
   13626:	82 a1       	ldd	r24, Z+34	; 0x22
   13628:	1f 92       	push	r1
   1362a:	8f 93       	push	r24
   1362c:	80 e2       	ldi	r24, 0x20	; 32
   1362e:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13630:	8d c0       	rjmp	.+282    	; 0x1374c <gpib_tests+0x420>
   13632:	6d ec       	ldi	r22, 0xCD	; 205
   13634:	7d e0       	ldi	r23, 0x0D	; 13
   13636:	88 85       	ldd	r24, Y+8	; 0x08
   13638:	99 85       	ldd	r25, Y+9	; 0x09
   1363a:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   1363e:	89 2b       	or	r24, r25
				{
					printf("Port latch B RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTB) );
   13640:	59 f0       	breq	.+22     	; 0x13658 <gpib_tests+0x32c>
   13642:	e5 b1       	in	r30, 0x05	; 5
   13644:	83 e0       	ldi	r24, 0x03	; 3
   13646:	e8 9f       	mul	r30, r24
   13648:	f0 01       	movw	r30, r0
   1364a:	11 24       	eor	r1, r1
   1364c:	82 a1       	ldd	r24, Z+34	; 0x22
   1364e:	1f 92       	push	r1
   13650:	8f 93       	push	r24
   13652:	87 e0       	ldi	r24, 0x07	; 7
   13654:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13656:	7a c0       	rjmp	.+244    	; 0x1374c <gpib_tests+0x420>
   13658:	66 ef       	ldi	r22, 0xF6	; 246
   1365a:	7c e0       	ldi	r23, 0x0C	; 12
   1365c:	88 85       	ldd	r24, Y+8	; 0x08
   1365e:	99 85       	ldd	r25, Y+9	; 0x09
   13660:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13664:	89 2b       	or	r24, r25
				{
					printf("Port latch C RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTC) );
   13666:	59 f0       	breq	.+22     	; 0x1367e <gpib_tests+0x352>
   13668:	e8 b1       	in	r30, 0x08	; 8
   1366a:	83 e0       	ldi	r24, 0x03	; 3
   1366c:	e8 9f       	mul	r30, r24
   1366e:	f0 01       	movw	r30, r0
   13670:	11 24       	eor	r1, r1
   13672:	82 a1       	ldd	r24, Z+34	; 0x22
   13674:	1f 92       	push	r1
   13676:	8f 93       	push	r24
   13678:	8e ee       	ldi	r24, 0xEE	; 238
   1367a:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1367c:	67 c0       	rjmp	.+206    	; 0x1374c <gpib_tests+0x420>
   1367e:	63 e5       	ldi	r22, 0x53	; 83
   13680:	77 e0       	ldi	r23, 0x07	; 7
   13682:	88 85       	ldd	r24, Y+8	; 0x08
   13684:	99 85       	ldd	r25, Y+9	; 0x09
   13686:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   1368a:	89 2b       	or	r24, r25
				{
					printf("Port latch D RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTD) );
   1368c:	59 f0       	breq	.+22     	; 0x136a4 <gpib_tests+0x378>
   1368e:	eb b1       	in	r30, 0x0b	; 11
   13690:	83 e0       	ldi	r24, 0x03	; 3
   13692:	e8 9f       	mul	r30, r24
   13694:	f0 01       	movw	r30, r0
   13696:	11 24       	eor	r1, r1
   13698:	82 a1       	ldd	r24, Z+34	; 0x22
   1369a:	1f 92       	push	r1
   1369c:	8f 93       	push	r24
   1369e:	85 ed       	ldi	r24, 0xD5	; 213
   136a0:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   136a2:	54 c0       	rjmp	.+168    	; 0x1374c <gpib_tests+0x420>
   136a4:	65 ed       	ldi	r22, 0xD5	; 213
   136a6:	7d e0       	ldi	r23, 0x0D	; 13
   136a8:	8e 81       	ldd	r24, Y+6	; 0x06
   136aa:	9f 81       	ldd	r25, Y+7	; 0x07
   136ac:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   136b0:	89 2b       	or	r24, r25
   136b2:	09 f4       	brne	.+2      	; 0x136b6 <gpib_tests+0x38a>
			{   
				if( MATCHI(argv[ind+2],"A"))
   136b4:	56 c0       	rjmp	.+172    	; 0x13762 <gpib_tests+0x436>
   136b6:	60 ec       	ldi	r22, 0xC0	; 192
   136b8:	73 e1       	ldi	r23, 0x13	; 19
   136ba:	88 85       	ldd	r24, Y+8	; 0x08
   136bc:	99 85       	ldd	r25, Y+9	; 0x09
   136be:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   136c2:	89 2b       	or	r24, r25
				{
					printf("Port ddr A RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTA) );
   136c4:	59 f0       	breq	.+22     	; 0x136dc <gpib_tests+0x3b0>
   136c6:	e2 b1       	in	r30, 0x02	; 2
   136c8:	83 e0       	ldi	r24, 0x03	; 3
   136ca:	e8 9f       	mul	r30, r24
   136cc:	f0 01       	movw	r30, r0
   136ce:	11 24       	eor	r1, r1
   136d0:	81 a1       	ldd	r24, Z+33	; 0x21
   136d2:	1f 92       	push	r1
   136d4:	8f 93       	push	r24
   136d6:	8e eb       	ldi	r24, 0xBE	; 190
   136d8:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   136da:	38 c0       	rjmp	.+112    	; 0x1374c <gpib_tests+0x420>
   136dc:	6d ec       	ldi	r22, 0xCD	; 205
   136de:	7d e0       	ldi	r23, 0x0D	; 13
   136e0:	88 85       	ldd	r24, Y+8	; 0x08
   136e2:	99 85       	ldd	r25, Y+9	; 0x09
   136e4:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   136e8:	89 2b       	or	r24, r25
				{
					printf("Port ddr B RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTB) );
   136ea:	59 f0       	breq	.+22     	; 0x13702 <gpib_tests+0x3d6>
   136ec:	e5 b1       	in	r30, 0x05	; 5
   136ee:	83 e0       	ldi	r24, 0x03	; 3
   136f0:	e8 9f       	mul	r30, r24
   136f2:	f0 01       	movw	r30, r0
   136f4:	11 24       	eor	r1, r1
   136f6:	81 a1       	ldd	r24, Z+33	; 0x21
   136f8:	1f 92       	push	r1
   136fa:	8f 93       	push	r24
   136fc:	87 ea       	ldi	r24, 0xA7	; 167
   136fe:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13700:	25 c0       	rjmp	.+74     	; 0x1374c <gpib_tests+0x420>
   13702:	66 ef       	ldi	r22, 0xF6	; 246
   13704:	7c e0       	ldi	r23, 0x0C	; 12
   13706:	88 85       	ldd	r24, Y+8	; 0x08
   13708:	99 85       	ldd	r25, Y+9	; 0x09
   1370a:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   1370e:	89 2b       	or	r24, r25
				{
					printf("Port ddr C RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTC) );
   13710:	59 f0       	breq	.+22     	; 0x13728 <gpib_tests+0x3fc>
   13712:	e8 b1       	in	r30, 0x08	; 8
   13714:	83 e0       	ldi	r24, 0x03	; 3
   13716:	e8 9f       	mul	r30, r24
   13718:	f0 01       	movw	r30, r0
   1371a:	11 24       	eor	r1, r1
   1371c:	81 a1       	ldd	r24, Z+33	; 0x21
   1371e:	1f 92       	push	r1
   13720:	8f 93       	push	r24
   13722:	80 e9       	ldi	r24, 0x90	; 144
   13724:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13726:	12 c0       	rjmp	.+36     	; 0x1374c <gpib_tests+0x420>
   13728:	63 e5       	ldi	r22, 0x53	; 83
   1372a:	77 e0       	ldi	r23, 0x07	; 7
   1372c:	88 85       	ldd	r24, Y+8	; 0x08
   1372e:	99 85       	ldd	r25, Y+9	; 0x09
   13730:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13734:	89 2b       	or	r24, r25
				{
					printf("Port ddr D RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTD) );
   13736:	a9 f0       	breq	.+42     	; 0x13762 <gpib_tests+0x436>
   13738:	eb b1       	in	r30, 0x0b	; 11
   1373a:	83 e0       	ldi	r24, 0x03	; 3
   1373c:	e8 9f       	mul	r30, r24
   1373e:	f0 01       	movw	r30, r0
   13740:	11 24       	eor	r1, r1
   13742:	81 a1       	ldd	r24, Z+33	; 0x21
   13744:	1f 92       	push	r1
   13746:	8f 93       	push	r24
   13748:	89 e7       	ldi	r24, 0x79	; 121
   1374a:	95 e1       	ldi	r25, 0x15	; 21
   1374c:	1f 92       	push	r1
   1374e:	9f 93       	push	r25
   13750:	8f 93       	push	r24
   13752:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
					return (1);
   13756:	0f 90       	pop	r0
   13758:	0f 90       	pop	r0
   1375a:	0f 90       	pop	r0
   1375c:	0f 90       	pop	r0
   1375e:	0f 90       	pop	r0
			}
		}
	} // port read 

	// port write
    if (MATCHARGS(ptr,"port",(ind+4),argc))
   13760:	d7 c0       	rjmp	.+430    	; 0x13910 <gpib_tests+0x5e4>
   13762:	97 01       	movw	r18, r14
   13764:	46 e0       	ldi	r20, 0x06	; 6
   13766:	50 e0       	ldi	r21, 0x00	; 0
   13768:	6e eb       	ldi	r22, 0xBE	; 190
   1376a:	7d e0       	ldi	r23, 0x0D	; 13
   1376c:	c8 01       	movw	r24, r16
   1376e:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   13772:	89 2b       	or	r24, r25
   13774:	09 f4       	brne	.+2      	; 0x13778 <gpib_tests+0x44c>
    {
		if( MATCHI(argv[ind],"write") )
   13776:	e6 cd       	rjmp	.-1076   	; 0x13344 <gpib_tests+0x18>
   13778:	6b e2       	ldi	r22, 0x2B	; 43
   1377a:	73 e1       	ldi	r23, 0x13	; 19
   1377c:	8c 81       	ldd	r24, Y+4	; 0x04
   1377e:	9d 81       	ldd	r25, Y+5	; 0x05
   13780:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13784:	89 2b       	or	r24, r25
   13786:	09 f4       	brne	.+2      	; 0x1378a <gpib_tests+0x45e>
		{
			uint8_t val;
			if( MATCHI(argv[ind+1],"pins") )
   13788:	dd cd       	rjmp	.-1094   	; 0x13344 <gpib_tests+0x18>
   1378a:	68 ec       	ldi	r22, 0xC8	; 200
   1378c:	7d e0       	ldi	r23, 0x0D	; 13
   1378e:	8e 81       	ldd	r24, Y+6	; 0x06
   13790:	9f 81       	ldd	r25, Y+7	; 0x07
   13792:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13796:	89 2b       	or	r24, r25
   13798:	09 f4       	brne	.+2      	; 0x1379c <gpib_tests+0x470>
			{   
				val = get_value(argv[ind+3]);
   1379a:	45 c0       	rjmp	.+138    	; 0x13826 <gpib_tests+0x4fa>
   1379c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1379e:	9b 85       	ldd	r25, Y+11	; 0x0b
   137a0:	0e 94 22 34 	call	0x6844	; 0x6844 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   137a4:	16 2f       	mov	r17, r22
   137a6:	60 ec       	ldi	r22, 0xC0	; 192
   137a8:	73 e1       	ldi	r23, 0x13	; 19
   137aa:	88 85       	ldd	r24, Y+8	; 0x08
   137ac:	99 85       	ldd	r25, Y+9	; 0x09
   137ae:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   137b2:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTA,val);
   137b4:	41 f0       	breq	.+16     	; 0x137c6 <gpib_tests+0x49a>
   137b6:	e2 b1       	in	r30, 0x02	; 2
   137b8:	83 e0       	ldi	r24, 0x03	; 3
   137ba:	e8 9f       	mul	r30, r24
   137bc:	f0 01       	movw	r30, r0
   137be:	11 24       	eor	r1, r1
   137c0:	8f ef       	ldi	r24, 0xFF	; 255
   137c2:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   137c4:	45 c0       	rjmp	.+138    	; 0x13850 <gpib_tests+0x524>
   137c6:	6d ec       	ldi	r22, 0xCD	; 205
   137c8:	7d e0       	ldi	r23, 0x0D	; 13
   137ca:	88 85       	ldd	r24, Y+8	; 0x08
   137cc:	99 85       	ldd	r25, Y+9	; 0x09
   137ce:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   137d2:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTB,val);
   137d4:	41 f0       	breq	.+16     	; 0x137e6 <gpib_tests+0x4ba>
   137d6:	e5 b1       	in	r30, 0x05	; 5
   137d8:	83 e0       	ldi	r24, 0x03	; 3
   137da:	e8 9f       	mul	r30, r24
   137dc:	f0 01       	movw	r30, r0
   137de:	11 24       	eor	r1, r1
   137e0:	8f ef       	ldi	r24, 0xFF	; 255
   137e2:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   137e4:	3f c0       	rjmp	.+126    	; 0x13864 <gpib_tests+0x538>
   137e6:	66 ef       	ldi	r22, 0xF6	; 246
   137e8:	7c e0       	ldi	r23, 0x0C	; 12
   137ea:	88 85       	ldd	r24, Y+8	; 0x08
   137ec:	99 85       	ldd	r25, Y+9	; 0x09
   137ee:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   137f2:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTC,val);
   137f4:	41 f0       	breq	.+16     	; 0x13806 <gpib_tests+0x4da>
   137f6:	e8 b1       	in	r30, 0x08	; 8
   137f8:	83 e0       	ldi	r24, 0x03	; 3
   137fa:	e8 9f       	mul	r30, r24
   137fc:	f0 01       	movw	r30, r0
   137fe:	11 24       	eor	r1, r1
   13800:	8f ef       	ldi	r24, 0xFF	; 255
   13802:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13804:	39 c0       	rjmp	.+114    	; 0x13878 <gpib_tests+0x54c>
   13806:	63 e5       	ldi	r22, 0x53	; 83
   13808:	77 e0       	ldi	r23, 0x07	; 7
   1380a:	88 85       	ldd	r24, Y+8	; 0x08
   1380c:	99 85       	ldd	r25, Y+9	; 0x09
   1380e:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13812:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTD,val);
   13814:	41 f0       	breq	.+16     	; 0x13826 <gpib_tests+0x4fa>
   13816:	eb b1       	in	r30, 0x0b	; 11
   13818:	83 e0       	ldi	r24, 0x03	; 3
   1381a:	e8 9f       	mul	r30, r24
   1381c:	f0 01       	movw	r30, r0
   1381e:	11 24       	eor	r1, r1
   13820:	8f ef       	ldi	r24, 0xFF	; 255
   13822:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   13824:	33 c0       	rjmp	.+102    	; 0x1388c <gpib_tests+0x560>
   13826:	6f ec       	ldi	r22, 0xCF	; 207
   13828:	7d e0       	ldi	r23, 0x0D	; 13
   1382a:	8e 81       	ldd	r24, Y+6	; 0x06
   1382c:	9f 81       	ldd	r25, Y+7	; 0x07
   1382e:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13832:	89 2b       	or	r24, r25
			{   

				val = get_value(argv[ind+3]);
   13834:	91 f1       	breq	.+100    	; 0x1389a <gpib_tests+0x56e>
   13836:	8a 85       	ldd	r24, Y+10	; 0x0a
   13838:	9b 85       	ldd	r25, Y+11	; 0x0b
   1383a:	0e 94 22 34 	call	0x6844	; 0x6844 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   1383e:	16 2f       	mov	r17, r22
   13840:	60 ec       	ldi	r22, 0xC0	; 192
   13842:	73 e1       	ldi	r23, 0x13	; 19
   13844:	88 85       	ldd	r24, Y+8	; 0x08
   13846:	99 85       	ldd	r25, Y+9	; 0x09
   13848:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   1384c:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTA,val);
   1384e:	11 f0       	breq	.+4      	; 0x13854 <gpib_tests+0x528>
   13850:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13852:	1d c0       	rjmp	.+58     	; 0x1388e <gpib_tests+0x562>
   13854:	6d ec       	ldi	r22, 0xCD	; 205
   13856:	7d e0       	ldi	r23, 0x0D	; 13
   13858:	88 85       	ldd	r24, Y+8	; 0x08
   1385a:	99 85       	ldd	r25, Y+9	; 0x09
   1385c:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13860:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTB,val);
   13862:	11 f0       	breq	.+4      	; 0x13868 <gpib_tests+0x53c>
   13864:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13866:	13 c0       	rjmp	.+38     	; 0x1388e <gpib_tests+0x562>
   13868:	66 ef       	ldi	r22, 0xF6	; 246
   1386a:	7c e0       	ldi	r23, 0x0C	; 12
   1386c:	88 85       	ldd	r24, Y+8	; 0x08
   1386e:	99 85       	ldd	r25, Y+9	; 0x09
   13870:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13874:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTC,val);
   13876:	11 f0       	breq	.+4      	; 0x1387c <gpib_tests+0x550>
   13878:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1387a:	09 c0       	rjmp	.+18     	; 0x1388e <gpib_tests+0x562>
   1387c:	63 e5       	ldi	r22, 0x53	; 83
   1387e:	77 e0       	ldi	r23, 0x07	; 7
   13880:	88 85       	ldd	r24, Y+8	; 0x08
   13882:	99 85       	ldd	r25, Y+9	; 0x09
   13884:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   13888:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTD,val);
   1388a:	39 f0       	breq	.+14     	; 0x1389a <gpib_tests+0x56e>
   1388c:	eb b1       	in	r30, 0x0b	; 11
   1388e:	83 e0       	ldi	r24, 0x03	; 3
   13890:	e8 9f       	mul	r30, r24
   13892:	f0 01       	movw	r30, r0
   13894:	11 24       	eor	r1, r1
   13896:	12 a3       	std	Z+34, r17	; 0x22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   13898:	3b c0       	rjmp	.+118    	; 0x13910 <gpib_tests+0x5e4>
   1389a:	65 ed       	ldi	r22, 0xD5	; 213
   1389c:	7d e0       	ldi	r23, 0x0D	; 13
   1389e:	8e 81       	ldd	r24, Y+6	; 0x06
   138a0:	9f 81       	ldd	r25, Y+7	; 0x07
   138a2:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   138a6:	89 2b       	or	r24, r25
   138a8:	09 f4       	brne	.+2      	; 0x138ac <gpib_tests+0x580>
			{   

				val = get_value(argv[ind+3]);
   138aa:	4c cd       	rjmp	.-1384   	; 0x13344 <gpib_tests+0x18>
   138ac:	8a 85       	ldd	r24, Y+10	; 0x0a
   138ae:	9b 85       	ldd	r25, Y+11	; 0x0b
   138b0:	0e 94 22 34 	call	0x6844	; 0x6844 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   138b4:	16 2f       	mov	r17, r22
   138b6:	60 ec       	ldi	r22, 0xC0	; 192
   138b8:	73 e1       	ldi	r23, 0x13	; 19
   138ba:	88 85       	ldd	r24, Y+8	; 0x08
   138bc:	99 85       	ldd	r25, Y+9	; 0x09
   138be:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   138c2:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTA,val);
   138c4:	11 f0       	breq	.+4      	; 0x138ca <gpib_tests+0x59e>
   138c6:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   138c8:	1e c0       	rjmp	.+60     	; 0x13906 <gpib_tests+0x5da>
   138ca:	6d ec       	ldi	r22, 0xCD	; 205
   138cc:	7d e0       	ldi	r23, 0x0D	; 13
   138ce:	88 85       	ldd	r24, Y+8	; 0x08
   138d0:	99 85       	ldd	r25, Y+9	; 0x09
   138d2:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   138d6:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTB,val);
   138d8:	11 f0       	breq	.+4      	; 0x138de <gpib_tests+0x5b2>
   138da:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   138dc:	14 c0       	rjmp	.+40     	; 0x13906 <gpib_tests+0x5da>
   138de:	66 ef       	ldi	r22, 0xF6	; 246
   138e0:	7c e0       	ldi	r23, 0x0C	; 12
   138e2:	88 85       	ldd	r24, Y+8	; 0x08
   138e4:	99 85       	ldd	r25, Y+9	; 0x09
   138e6:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   138ea:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTC,val);
   138ec:	11 f0       	breq	.+4      	; 0x138f2 <gpib_tests+0x5c6>
   138ee:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   138f0:	0a c0       	rjmp	.+20     	; 0x13906 <gpib_tests+0x5da>
   138f2:	63 e5       	ldi	r22, 0x53	; 83
   138f4:	77 e0       	ldi	r23, 0x07	; 7
   138f6:	88 85       	ldd	r24, Y+8	; 0x08
   138f8:	99 85       	ldd	r25, Y+9	; 0x09
   138fa:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <MATCHI>
   138fe:	89 2b       	or	r24, r25
   13900:	09 f4       	brne	.+2      	; 0x13904 <gpib_tests+0x5d8>
				{
					GPIO_PORT_DDR_WR(PORTD,val);
   13902:	20 cd       	rjmp	.-1472   	; 0x13344 <gpib_tests+0x18>
   13904:	eb b1       	in	r30, 0x0b	; 11
   13906:	83 e0       	ldi	r24, 0x03	; 3
   13908:	e8 9f       	mul	r30, r24
   1390a:	f0 01       	movw	r30, r0
   1390c:	11 24       	eor	r1, r1
					return (1);
   1390e:	11 a3       	std	Z+33, r17	; 0x21
   13910:	81 e0       	ldi	r24, 0x01	; 1
		}

	} // port write 

    return(0);
}
   13912:	90 e0       	ldi	r25, 0x00	; 0
   13914:	cd b7       	in	r28, 0x3d	; 61
   13916:	de b7       	in	r29, 0x3e	; 62
   13918:	e6 e0       	ldi	r30, 0x06	; 6
   1391a:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0001391e <SS80ControllerPack>:
   1391e:	0f 93       	push	r16
   13920:	1f 93       	push	r17
   13922:	25 e0       	ldi	r18, 0x05	; 5
   13924:	30 e0       	ldi	r19, 0x00	; 0
   13926:	fc 01       	movw	r30, r24
   13928:	31 83       	std	Z+1, r19	; 0x01
   1392a:	20 83       	st	Z, r18
   1392c:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13930:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13934:	05 a1       	ldd	r16, Z+37	; 0x25
   13936:	16 a1       	ldd	r17, Z+38	; 0x26
   13938:	20 e0       	ldi	r18, 0x00	; 0
   1393a:	30 e0       	ldi	r19, 0x00	; 0
   1393c:	42 e0       	ldi	r20, 0x02	; 2
   1393e:	50 e0       	ldi	r21, 0x00	; 0
   13940:	60 e0       	ldi	r22, 0x00	; 0
   13942:	70 e0       	ldi	r23, 0x00	; 0
   13944:	82 eb       	ldi	r24, 0xB2	; 178
   13946:	99 e1       	ldi	r25, 0x19	; 25
   13948:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   1394c:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13950:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13954:	07 a1       	ldd	r16, Z+39	; 0x27
   13956:	10 a5       	ldd	r17, Z+40	; 0x28
   13958:	20 e0       	ldi	r18, 0x00	; 0
   1395a:	30 e0       	ldi	r19, 0x00	; 0
   1395c:	42 e0       	ldi	r20, 0x02	; 2
   1395e:	50 e0       	ldi	r21, 0x00	; 0
   13960:	61 e0       	ldi	r22, 0x01	; 1
   13962:	70 e0       	ldi	r23, 0x00	; 0
   13964:	82 eb       	ldi	r24, 0xB2	; 178
   13966:	99 e1       	ldi	r25, 0x19	; 25
   13968:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   1396c:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13970:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13974:	01 a5       	ldd	r16, Z+41	; 0x29
   13976:	10 e0       	ldi	r17, 0x00	; 0
   13978:	20 e0       	ldi	r18, 0x00	; 0
   1397a:	30 e0       	ldi	r19, 0x00	; 0
   1397c:	41 e0       	ldi	r20, 0x01	; 1
   1397e:	50 e0       	ldi	r21, 0x00	; 0
   13980:	64 e0       	ldi	r22, 0x04	; 4
   13982:	70 e0       	ldi	r23, 0x00	; 0
   13984:	82 eb       	ldi	r24, 0xB2	; 178
   13986:	99 e1       	ldi	r25, 0x19	; 25
   13988:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   1398c:	82 eb       	ldi	r24, 0xB2	; 178
   1398e:	99 e1       	ldi	r25, 0x19	; 25
   13990:	1f 91       	pop	r17
   13992:	0f 91       	pop	r16
   13994:	08 95       	ret

00013996 <SS80UnitPack>:
   13996:	0f 93       	push	r16
   13998:	1f 93       	push	r17
   1399a:	23 e1       	ldi	r18, 0x13	; 19
   1399c:	30 e0       	ldi	r19, 0x00	; 0
   1399e:	fc 01       	movw	r30, r24
   139a0:	31 83       	std	Z+1, r19	; 0x01
   139a2:	20 83       	st	Z, r18
   139a4:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   139a8:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   139ac:	02 a5       	ldd	r16, Z+42	; 0x2a
   139ae:	10 e0       	ldi	r17, 0x00	; 0
   139b0:	20 e0       	ldi	r18, 0x00	; 0
   139b2:	30 e0       	ldi	r19, 0x00	; 0
   139b4:	41 e0       	ldi	r20, 0x01	; 1
   139b6:	50 e0       	ldi	r21, 0x00	; 0
   139b8:	60 e0       	ldi	r22, 0x00	; 0
   139ba:	70 e0       	ldi	r23, 0x00	; 0
   139bc:	8f e9       	ldi	r24, 0x9F	; 159
   139be:	99 e1       	ldi	r25, 0x19	; 25
   139c0:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   139c4:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   139c8:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   139cc:	03 a5       	ldd	r16, Z+43	; 0x2b
   139ce:	14 a5       	ldd	r17, Z+44	; 0x2c
   139d0:	25 a5       	ldd	r18, Z+45	; 0x2d
   139d2:	36 a5       	ldd	r19, Z+46	; 0x2e
   139d4:	43 e0       	ldi	r20, 0x03	; 3
   139d6:	50 e0       	ldi	r21, 0x00	; 0
   139d8:	61 e0       	ldi	r22, 0x01	; 1
   139da:	70 e0       	ldi	r23, 0x00	; 0
   139dc:	8f e9       	ldi	r24, 0x9F	; 159
   139de:	99 e1       	ldi	r25, 0x19	; 25
   139e0:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   139e4:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   139e8:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   139ec:	07 a5       	ldd	r16, Z+47	; 0x2f
   139ee:	10 a9       	ldd	r17, Z+48	; 0x30
   139f0:	20 e0       	ldi	r18, 0x00	; 0
   139f2:	30 e0       	ldi	r19, 0x00	; 0
   139f4:	42 e0       	ldi	r20, 0x02	; 2
   139f6:	50 e0       	ldi	r21, 0x00	; 0
   139f8:	64 e0       	ldi	r22, 0x04	; 4
   139fa:	70 e0       	ldi	r23, 0x00	; 0
   139fc:	8f e9       	ldi	r24, 0x9F	; 159
   139fe:	99 e1       	ldi	r25, 0x19	; 25
   13a00:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13a04:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13a08:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13a0c:	01 a9       	ldd	r16, Z+49	; 0x31
   13a0e:	10 e0       	ldi	r17, 0x00	; 0
   13a10:	20 e0       	ldi	r18, 0x00	; 0
   13a12:	30 e0       	ldi	r19, 0x00	; 0
   13a14:	41 e0       	ldi	r20, 0x01	; 1
   13a16:	50 e0       	ldi	r21, 0x00	; 0
   13a18:	66 e0       	ldi	r22, 0x06	; 6
   13a1a:	70 e0       	ldi	r23, 0x00	; 0
   13a1c:	8f e9       	ldi	r24, 0x9F	; 159
   13a1e:	99 e1       	ldi	r25, 0x19	; 25
   13a20:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13a24:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13a28:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13a2c:	02 a9       	ldd	r16, Z+50	; 0x32
   13a2e:	10 e0       	ldi	r17, 0x00	; 0
   13a30:	20 e0       	ldi	r18, 0x00	; 0
   13a32:	30 e0       	ldi	r19, 0x00	; 0
   13a34:	41 e0       	ldi	r20, 0x01	; 1
   13a36:	50 e0       	ldi	r21, 0x00	; 0
   13a38:	67 e0       	ldi	r22, 0x07	; 7
   13a3a:	70 e0       	ldi	r23, 0x00	; 0
   13a3c:	8f e9       	ldi	r24, 0x9F	; 159
   13a3e:	99 e1       	ldi	r25, 0x19	; 25
   13a40:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13a44:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13a48:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13a4c:	03 a9       	ldd	r16, Z+51	; 0x33
   13a4e:	14 a9       	ldd	r17, Z+52	; 0x34
   13a50:	20 e0       	ldi	r18, 0x00	; 0
   13a52:	30 e0       	ldi	r19, 0x00	; 0
   13a54:	42 e0       	ldi	r20, 0x02	; 2
   13a56:	50 e0       	ldi	r21, 0x00	; 0
   13a58:	68 e0       	ldi	r22, 0x08	; 8
   13a5a:	70 e0       	ldi	r23, 0x00	; 0
   13a5c:	8f e9       	ldi	r24, 0x9F	; 159
   13a5e:	99 e1       	ldi	r25, 0x19	; 25
   13a60:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13a64:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13a68:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13a6c:	05 a9       	ldd	r16, Z+53	; 0x35
   13a6e:	16 a9       	ldd	r17, Z+54	; 0x36
   13a70:	20 e0       	ldi	r18, 0x00	; 0
   13a72:	30 e0       	ldi	r19, 0x00	; 0
   13a74:	42 e0       	ldi	r20, 0x02	; 2
   13a76:	50 e0       	ldi	r21, 0x00	; 0
   13a78:	6a e0       	ldi	r22, 0x0A	; 10
   13a7a:	70 e0       	ldi	r23, 0x00	; 0
   13a7c:	8f e9       	ldi	r24, 0x9F	; 159
   13a7e:	99 e1       	ldi	r25, 0x19	; 25
   13a80:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13a84:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13a88:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13a8c:	07 a9       	ldd	r16, Z+55	; 0x37
   13a8e:	10 ad       	ldd	r17, Z+56	; 0x38
   13a90:	20 e0       	ldi	r18, 0x00	; 0
   13a92:	30 e0       	ldi	r19, 0x00	; 0
   13a94:	42 e0       	ldi	r20, 0x02	; 2
   13a96:	50 e0       	ldi	r21, 0x00	; 0
   13a98:	6c e0       	ldi	r22, 0x0C	; 12
   13a9a:	70 e0       	ldi	r23, 0x00	; 0
   13a9c:	8f e9       	ldi	r24, 0x9F	; 159
   13a9e:	99 e1       	ldi	r25, 0x19	; 25
   13aa0:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13aa4:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13aa8:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13aac:	01 ad       	ldd	r16, Z+57	; 0x39
   13aae:	12 ad       	ldd	r17, Z+58	; 0x3a
   13ab0:	20 e0       	ldi	r18, 0x00	; 0
   13ab2:	30 e0       	ldi	r19, 0x00	; 0
   13ab4:	42 e0       	ldi	r20, 0x02	; 2
   13ab6:	50 e0       	ldi	r21, 0x00	; 0
   13ab8:	6e e0       	ldi	r22, 0x0E	; 14
   13aba:	70 e0       	ldi	r23, 0x00	; 0
   13abc:	8f e9       	ldi	r24, 0x9F	; 159
   13abe:	99 e1       	ldi	r25, 0x19	; 25
   13ac0:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13ac4:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13ac8:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13acc:	03 ad       	ldd	r16, Z+59	; 0x3b
   13ace:	10 e0       	ldi	r17, 0x00	; 0
   13ad0:	20 e0       	ldi	r18, 0x00	; 0
   13ad2:	30 e0       	ldi	r19, 0x00	; 0
   13ad4:	41 e0       	ldi	r20, 0x01	; 1
   13ad6:	50 e0       	ldi	r21, 0x00	; 0
   13ad8:	60 e1       	ldi	r22, 0x10	; 16
   13ada:	70 e0       	ldi	r23, 0x00	; 0
   13adc:	8f e9       	ldi	r24, 0x9F	; 159
   13ade:	99 e1       	ldi	r25, 0x19	; 25
   13ae0:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13ae4:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13ae8:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13aec:	04 ad       	ldd	r16, Z+60	; 0x3c
   13aee:	10 e0       	ldi	r17, 0x00	; 0
   13af0:	20 e0       	ldi	r18, 0x00	; 0
   13af2:	30 e0       	ldi	r19, 0x00	; 0
   13af4:	41 e0       	ldi	r20, 0x01	; 1
   13af6:	50 e0       	ldi	r21, 0x00	; 0
   13af8:	61 e1       	ldi	r22, 0x11	; 17
   13afa:	70 e0       	ldi	r23, 0x00	; 0
   13afc:	8f e9       	ldi	r24, 0x9F	; 159
   13afe:	99 e1       	ldi	r25, 0x19	; 25
   13b00:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13b04:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13b08:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13b0c:	05 ad       	ldd	r16, Z+61	; 0x3d
   13b0e:	10 e0       	ldi	r17, 0x00	; 0
   13b10:	20 e0       	ldi	r18, 0x00	; 0
   13b12:	30 e0       	ldi	r19, 0x00	; 0
   13b14:	41 e0       	ldi	r20, 0x01	; 1
   13b16:	50 e0       	ldi	r21, 0x00	; 0
   13b18:	62 e1       	ldi	r22, 0x12	; 18
   13b1a:	70 e0       	ldi	r23, 0x00	; 0
   13b1c:	8f e9       	ldi	r24, 0x9F	; 159
   13b1e:	99 e1       	ldi	r25, 0x19	; 25
   13b20:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13b24:	8f e9       	ldi	r24, 0x9F	; 159
   13b26:	99 e1       	ldi	r25, 0x19	; 25
   13b28:	1f 91       	pop	r17
   13b2a:	0f 91       	pop	r16
   13b2c:	08 95       	ret

00013b2e <SS80VolumePack>:
   13b2e:	0f 93       	push	r16
   13b30:	1f 93       	push	r17
   13b32:	2d e0       	ldi	r18, 0x0D	; 13
   13b34:	30 e0       	ldi	r19, 0x00	; 0
   13b36:	fc 01       	movw	r30, r24
   13b38:	31 83       	std	Z+1, r19	; 0x01
   13b3a:	20 83       	st	Z, r18
   13b3c:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13b40:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13b44:	fe 96       	adiw	r30, 0x3e	; 62
   13b46:	00 81       	ld	r16, Z
   13b48:	11 81       	ldd	r17, Z+1	; 0x01
   13b4a:	22 81       	ldd	r18, Z+2	; 0x02
   13b4c:	33 81       	ldd	r19, Z+3	; 0x03
   13b4e:	43 e0       	ldi	r20, 0x03	; 3
   13b50:	50 e0       	ldi	r21, 0x00	; 0
   13b52:	60 e0       	ldi	r22, 0x00	; 0
   13b54:	70 e0       	ldi	r23, 0x00	; 0
   13b56:	82 e9       	ldi	r24, 0x92	; 146
   13b58:	99 e1       	ldi	r25, 0x19	; 25
   13b5a:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13b5e:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13b62:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13b66:	ee 5b       	subi	r30, 0xBE	; 190
   13b68:	ff 4f       	sbci	r31, 0xFF	; 255
   13b6a:	00 81       	ld	r16, Z
   13b6c:	10 e0       	ldi	r17, 0x00	; 0
   13b6e:	20 e0       	ldi	r18, 0x00	; 0
   13b70:	30 e0       	ldi	r19, 0x00	; 0
   13b72:	41 e0       	ldi	r20, 0x01	; 1
   13b74:	50 e0       	ldi	r21, 0x00	; 0
   13b76:	63 e0       	ldi	r22, 0x03	; 3
   13b78:	70 e0       	ldi	r23, 0x00	; 0
   13b7a:	82 e9       	ldi	r24, 0x92	; 146
   13b7c:	99 e1       	ldi	r25, 0x19	; 25
   13b7e:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13b82:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13b86:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13b8a:	ed 5b       	subi	r30, 0xBD	; 189
   13b8c:	ff 4f       	sbci	r31, 0xFF	; 255
   13b8e:	00 81       	ld	r16, Z
   13b90:	11 81       	ldd	r17, Z+1	; 0x01
   13b92:	20 e0       	ldi	r18, 0x00	; 0
   13b94:	30 e0       	ldi	r19, 0x00	; 0
   13b96:	42 e0       	ldi	r20, 0x02	; 2
   13b98:	50 e0       	ldi	r21, 0x00	; 0
   13b9a:	64 e0       	ldi	r22, 0x04	; 4
   13b9c:	70 e0       	ldi	r23, 0x00	; 0
   13b9e:	82 e9       	ldi	r24, 0x92	; 146
   13ba0:	99 e1       	ldi	r25, 0x19	; 25
   13ba2:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13ba6:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13baa:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13bae:	eb 5b       	subi	r30, 0xBB	; 187
   13bb0:	ff 4f       	sbci	r31, 0xFF	; 255
   13bb2:	00 81       	ld	r16, Z
   13bb4:	11 81       	ldd	r17, Z+1	; 0x01
   13bb6:	22 81       	ldd	r18, Z+2	; 0x02
   13bb8:	33 81       	ldd	r19, Z+3	; 0x03
   13bba:	46 e0       	ldi	r20, 0x06	; 6
   13bbc:	50 e0       	ldi	r21, 0x00	; 0
   13bbe:	66 e0       	ldi	r22, 0x06	; 6
   13bc0:	70 e0       	ldi	r23, 0x00	; 0
   13bc2:	82 e9       	ldi	r24, 0x92	; 146
   13bc4:	99 e1       	ldi	r25, 0x19	; 25
   13bc6:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13bca:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13bce:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13bd2:	e7 5b       	subi	r30, 0xB7	; 183
   13bd4:	ff 4f       	sbci	r31, 0xFF	; 255
   13bd6:	00 81       	ld	r16, Z
   13bd8:	10 e0       	ldi	r17, 0x00	; 0
   13bda:	20 e0       	ldi	r18, 0x00	; 0
   13bdc:	30 e0       	ldi	r19, 0x00	; 0
   13bde:	41 e0       	ldi	r20, 0x01	; 1
   13be0:	50 e0       	ldi	r21, 0x00	; 0
   13be2:	6c e0       	ldi	r22, 0x0C	; 12
   13be4:	70 e0       	ldi	r23, 0x00	; 0
   13be6:	82 e9       	ldi	r24, 0x92	; 146
   13be8:	99 e1       	ldi	r25, 0x19	; 25
   13bea:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13bee:	82 e9       	ldi	r24, 0x92	; 146
   13bf0:	99 e1       	ldi	r25, 0x19	; 25
   13bf2:	1f 91       	pop	r17
   13bf4:	0f 91       	pop	r16
   13bf6:	08 95       	ret

00013bf8 <SS80_test_extended_status>:
   13bf8:	9b 01       	movw	r18, r22
   13bfa:	43 e0       	ldi	r20, 0x03	; 3
   13bfc:	35 95       	asr	r19
   13bfe:	27 95       	ror	r18
   13c00:	4a 95       	dec	r20
   13c02:	e1 f7       	brne	.-8      	; 0x13bfc <SS80_test_extended_status+0x4>
   13c04:	82 0f       	add	r24, r18
   13c06:	93 1f       	adc	r25, r19
   13c08:	67 70       	andi	r22, 0x07	; 7
   13c0a:	77 27       	eor	r23, r23
   13c0c:	20 e8       	ldi	r18, 0x80	; 128
   13c0e:	30 e0       	ldi	r19, 0x00	; 0
   13c10:	02 c0       	rjmp	.+4      	; 0x13c16 <SS80_test_extended_status+0x1e>
   13c12:	35 95       	asr	r19
   13c14:	27 95       	ror	r18
   13c16:	6a 95       	dec	r22
   13c18:	e2 f7       	brpl	.-8      	; 0x13c12 <SS80_test_extended_status+0x1a>
   13c1a:	fc 01       	movw	r30, r24
   13c1c:	80 81       	ld	r24, Z
   13c1e:	28 23       	and	r18, r24
   13c20:	81 e0       	ldi	r24, 0x01	; 1
   13c22:	90 e0       	ldi	r25, 0x00	; 0
   13c24:	11 f4       	brne	.+4      	; 0x13c2a <SS80_test_extended_status+0x32>
   13c26:	80 e0       	ldi	r24, 0x00	; 0
   13c28:	90 e0       	ldi	r25, 0x00	; 0
   13c2a:	08 95       	ret

00013c2c <SS80_display_extended_status>:
   13c2c:	6f 92       	push	r6
   13c2e:	7f 92       	push	r7
   13c30:	8f 92       	push	r8
   13c32:	ef 92       	push	r14
   13c34:	ff 92       	push	r15
   13c36:	0f 93       	push	r16
   13c38:	1f 93       	push	r17
   13c3a:	cf 93       	push	r28
   13c3c:	df 93       	push	r29
   13c3e:	fc 01       	movw	r30, r24
   13c40:	ac 01       	movw	r20, r24
   13c42:	48 5f       	subi	r20, 0xF8	; 248
   13c44:	5f 4f       	sbci	r21, 0xFF	; 255
   13c46:	20 e0       	ldi	r18, 0x00	; 0
   13c48:	30 e0       	ldi	r19, 0x00	; 0
   13c4a:	a1 91       	ld	r26, Z+
   13c4c:	aa 23       	and	r26, r26
   13c4e:	11 f0       	breq	.+4      	; 0x13c54 <SS80_display_extended_status+0x28>
   13c50:	21 e0       	ldi	r18, 0x01	; 1
   13c52:	30 e0       	ldi	r19, 0x00	; 0
   13c54:	e4 17       	cp	r30, r20
   13c56:	f5 07       	cpc	r31, r21
   13c58:	c1 f7       	brne	.-16     	; 0x13c4a <SS80_display_extended_status+0x1e>
   13c5a:	23 2b       	or	r18, r19
   13c5c:	a1 f1       	breq	.+104    	; 0x13cc6 <SS80_display_extended_status+0x9a>
   13c5e:	8c 01       	movw	r16, r24
   13c60:	7f 93       	push	r23
   13c62:	6f 93       	push	r22
   13c64:	88 e8       	ldi	r24, 0x88	; 136
   13c66:	9e e1       	ldi	r25, 0x1E	; 30
   13c68:	1f 92       	push	r1
   13c6a:	9f 93       	push	r25
   13c6c:	8f 93       	push	r24
   13c6e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13c72:	cb ec       	ldi	r28, 0xCB	; 203
   13c74:	d1 e0       	ldi	r29, 0x01	; 1
   13c76:	0f 90       	pop	r0
   13c78:	0f 90       	pop	r0
   13c7a:	0f 90       	pop	r0
   13c7c:	0f 90       	pop	r0
   13c7e:	0f 90       	pop	r0
   13c80:	8d e7       	ldi	r24, 0x7D	; 125
   13c82:	9e e1       	ldi	r25, 0x1E	; 30
   13c84:	3c 01       	movw	r6, r24
   13c86:	e8 80       	ld	r14, Y
   13c88:	f9 80       	ldd	r15, Y+1	; 0x01
   13c8a:	9f ef       	ldi	r25, 0xFF	; 255
   13c8c:	e9 16       	cp	r14, r25
   13c8e:	f9 06       	cpc	r15, r25
   13c90:	d1 f0       	breq	.+52     	; 0x13cc6 <SS80_display_extended_status+0x9a>
   13c92:	b7 01       	movw	r22, r14
   13c94:	c8 01       	movw	r24, r16
   13c96:	b0 df       	rcall	.-160    	; 0x13bf8 <SS80_test_extended_status>
   13c98:	89 2b       	or	r24, r25
   13c9a:	99 f0       	breq	.+38     	; 0x13cc2 <SS80_display_extended_status+0x96>
   13c9c:	8b 81       	ldd	r24, Y+3	; 0x03
   13c9e:	8f 93       	push	r24
   13ca0:	8a 81       	ldd	r24, Y+2	; 0x02
   13ca2:	8f 93       	push	r24
   13ca4:	ff 92       	push	r15
   13ca6:	ef 92       	push	r14
   13ca8:	1f 92       	push	r1
   13caa:	7f 92       	push	r7
   13cac:	6f 92       	push	r6
   13cae:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13cb2:	8d b7       	in	r24, 0x3d	; 61
   13cb4:	9e b7       	in	r25, 0x3e	; 62
   13cb6:	07 96       	adiw	r24, 0x07	; 7
   13cb8:	0f b6       	in	r0, 0x3f	; 63
   13cba:	f8 94       	cli
   13cbc:	9e bf       	out	0x3e, r25	; 62
   13cbe:	0f be       	out	0x3f, r0	; 63
   13cc0:	8d bf       	out	0x3d, r24	; 61
   13cc2:	24 96       	adiw	r28, 0x04	; 4
   13cc4:	e0 cf       	rjmp	.-64     	; 0x13c86 <SS80_display_extended_status+0x5a>
   13cc6:	df 91       	pop	r29
   13cc8:	cf 91       	pop	r28
   13cca:	1f 91       	pop	r17
   13ccc:	0f 91       	pop	r16
   13cce:	ff 90       	pop	r15
   13cd0:	ef 90       	pop	r14
   13cd2:	8f 90       	pop	r8
   13cd4:	7f 90       	pop	r7
   13cd6:	6f 90       	pop	r6
   13cd8:	08 95       	ret

00013cda <SS80_send_status>:
   13cda:	a6 e1       	ldi	r26, 0x16	; 22
   13cdc:	b0 e0       	ldi	r27, 0x00	; 0
   13cde:	e3 e7       	ldi	r30, 0x73	; 115
   13ce0:	fe e9       	ldi	r31, 0x9E	; 158
   13ce2:	0c 94 11 ed 	jmp	0x1da22	; 0x1da22 <__prologue_saves__+0x18>
   13ce6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13cea:	85 ff       	sbrs	r24, 5
   13cec:	0a c0       	rjmp	.+20     	; 0x13d02 <SS80_send_status+0x28>
   13cee:	89 e6       	ldi	r24, 0x69	; 105
   13cf0:	9e e1       	ldi	r25, 0x1E	; 30
   13cf2:	1f 92       	push	r1
   13cf4:	9f 93       	push	r25
   13cf6:	8f 93       	push	r24
   13cf8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13cfc:	0f 90       	pop	r0
   13cfe:	0f 90       	pop	r0
   13d00:	0f 90       	pop	r0
   13d02:	ce 01       	movw	r24, r28
   13d04:	01 96       	adiw	r24, 0x01	; 1
   13d06:	7c 01       	movw	r14, r24
   13d08:	84 e1       	ldi	r24, 0x14	; 20
   13d0a:	f7 01       	movw	r30, r14
   13d0c:	11 92       	st	Z+, r1
   13d0e:	8a 95       	dec	r24
   13d10:	e9 f7       	brne	.-6      	; 0x13d0c <SS80_send_status+0x32>
   13d12:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   13d16:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   13d1a:	86 81       	ldd	r24, Z+6	; 0x06
   13d1c:	20 e1       	ldi	r18, 0x10	; 16
   13d1e:	82 9f       	mul	r24, r18
   13d20:	c0 01       	movw	r24, r0
   13d22:	11 24       	eor	r1, r1
   13d24:	95 81       	ldd	r25, Z+5	; 0x05
   13d26:	9f 70       	andi	r25, 0x0F	; 15
   13d28:	89 2b       	or	r24, r25
   13d2a:	89 83       	std	Y+1, r24	; 0x01
   13d2c:	8f ef       	ldi	r24, 0xFF	; 255
   13d2e:	8a 83       	std	Y+2, r24	; 0x02
   13d30:	83 81       	ldd	r24, Z+3	; 0x03
   13d32:	86 ff       	sbrs	r24, 6
   13d34:	02 c0       	rjmp	.+4      	; 0x13d3a <SS80_send_status+0x60>
   13d36:	92 e0       	ldi	r25, 0x02	; 2
   13d38:	9b 83       	std	Y+3, r25	; 0x03
   13d3a:	82 ff       	sbrs	r24, 2
   13d3c:	03 c0       	rjmp	.+6      	; 0x13d44 <SS80_send_status+0x6a>
   13d3e:	9b 81       	ldd	r25, Y+3	; 0x03
   13d40:	91 60       	ori	r25, 0x01	; 1
   13d42:	9b 83       	std	Y+3, r25	; 0x03
   13d44:	80 ff       	sbrs	r24, 0
   13d46:	02 c0       	rjmp	.+4      	; 0x13d4c <SS80_send_status+0x72>
   13d48:	82 e0       	ldi	r24, 0x02	; 2
   13d4a:	8d 83       	std	Y+5, r24	; 0x05
   13d4c:	83 81       	ldd	r24, Z+3	; 0x03
   13d4e:	81 ff       	sbrs	r24, 1
   13d50:	03 c0       	rjmp	.+6      	; 0x13d58 <SS80_send_status+0x7e>
   13d52:	8d 81       	ldd	r24, Y+5	; 0x05
   13d54:	82 60       	ori	r24, 0x02	; 2
   13d56:	8d 83       	std	Y+5, r24	; 0x05
   13d58:	83 81       	ldd	r24, Z+3	; 0x03
   13d5a:	83 ff       	sbrs	r24, 3
   13d5c:	02 c0       	rjmp	.+4      	; 0x13d62 <SS80_send_status+0x88>
   13d5e:	88 e0       	ldi	r24, 0x08	; 8
   13d60:	8f 83       	std	Y+7, r24	; 0x07
   13d62:	83 81       	ldd	r24, Z+3	; 0x03
   13d64:	94 81       	ldd	r25, Z+4	; 0x04
   13d66:	89 2b       	or	r24, r25
   13d68:	59 f4       	brne	.+22     	; 0x13d80 <SS80_send_status+0xa6>
   13d6a:	07 81       	ldd	r16, Z+7	; 0x07
   13d6c:	10 85       	ldd	r17, Z+8	; 0x08
   13d6e:	21 85       	ldd	r18, Z+9	; 0x09
   13d70:	32 85       	ldd	r19, Z+10	; 0x0a
   13d72:	46 e0       	ldi	r20, 0x06	; 6
   13d74:	50 e0       	ldi	r21, 0x00	; 0
   13d76:	6a e0       	ldi	r22, 0x0A	; 10
   13d78:	70 e0       	ldi	r23, 0x00	; 0
   13d7a:	c7 01       	movw	r24, r14
   13d7c:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   13d80:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   13d84:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   13d88:	83 81       	ldd	r24, Z+3	; 0x03
   13d8a:	94 81       	ldd	r25, Z+4	; 0x04
   13d8c:	89 2b       	or	r24, r25
   13d8e:	11 f0       	breq	.+4      	; 0x13d94 <SS80_send_status+0xba>
   13d90:	81 e0       	ldi	r24, 0x01	; 1
   13d92:	82 83       	std	Z+2, r24	; 0x02
   13d94:	80 e0       	ldi	r24, 0x00	; 0
   13d96:	91 e0       	ldi	r25, 0x01	; 1
   13d98:	9e 8b       	std	Y+22, r25	; 0x16
   13d9a:	8d 8b       	std	Y+21, r24	; 0x15
   13d9c:	ae 01       	movw	r20, r28
   13d9e:	4b 5e       	subi	r20, 0xEB	; 235
   13da0:	5f 4f       	sbci	r21, 0xFF	; 255
   13da2:	64 e1       	ldi	r22, 0x14	; 20
   13da4:	70 e0       	ldi	r23, 0x00	; 0
   13da6:	c7 01       	movw	r24, r14
   13da8:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   13dac:	44 97       	sbiw	r24, 0x14	; 20
   13dae:	71 f0       	breq	.+28     	; 0x13dcc <SS80_send_status+0xf2>
   13db0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13db4:	80 ff       	sbrs	r24, 0
   13db6:	0a c0       	rjmp	.+20     	; 0x13dcc <SS80_send_status+0xf2>
   13db8:	8e e4       	ldi	r24, 0x4E	; 78
   13dba:	9e e1       	ldi	r25, 0x1E	; 30
   13dbc:	1f 92       	push	r1
   13dbe:	9f 93       	push	r25
   13dc0:	8f 93       	push	r24
   13dc2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13dc6:	0f 90       	pop	r0
   13dc8:	0f 90       	pop	r0
   13dca:	0f 90       	pop	r0
   13dcc:	8d 89       	ldd	r24, Y+21	; 0x15
   13dce:	9e 89       	ldd	r25, Y+22	; 0x16
   13dd0:	88 27       	eor	r24, r24
   13dd2:	90 7d       	andi	r25, 0xD0	; 208
   13dd4:	66 96       	adiw	r28, 0x16	; 22
   13dd6:	e6 e0       	ldi	r30, 0x06	; 6
   13dd8:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00013ddc <SS80_describe>:
   13ddc:	a4 e0       	ldi	r26, 0x04	; 4
   13dde:	b0 e0       	ldi	r27, 0x00	; 0
   13de0:	e4 ef       	ldi	r30, 0xF4	; 244
   13de2:	fe e9       	ldi	r31, 0x9E	; 158
   13de4:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   13de8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13dec:	85 ff       	sbrs	r24, 5
   13dee:	0a c0       	rjmp	.+20     	; 0x13e04 <SS80_describe+0x28>
   13df0:	8d e3       	ldi	r24, 0x3D	; 61
   13df2:	9e e1       	ldi	r25, 0x1E	; 30
   13df4:	1f 92       	push	r1
   13df6:	9f 93       	push	r25
   13df8:	8f 93       	push	r24
   13dfa:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13dfe:	0f 90       	pop	r0
   13e00:	0f 90       	pop	r0
   13e02:	0f 90       	pop	r0
   13e04:	1c 82       	std	Y+4, r1	; 0x04
   13e06:	1b 82       	std	Y+3, r1	; 0x03
   13e08:	ce 01       	movw	r24, r28
   13e0a:	01 96       	adiw	r24, 0x01	; 1
   13e0c:	88 dd       	rcall	.-1264   	; 0x1391e <SS80ControllerPack>
   13e0e:	69 81       	ldd	r22, Y+1	; 0x01
   13e10:	7a 81       	ldd	r23, Y+2	; 0x02
   13e12:	ae 01       	movw	r20, r28
   13e14:	4d 5f       	subi	r20, 0xFD	; 253
   13e16:	5f 4f       	sbci	r21, 0xFF	; 255
   13e18:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   13e1c:	29 81       	ldd	r18, Y+1	; 0x01
   13e1e:	3a 81       	ldd	r19, Y+2	; 0x02
   13e20:	82 17       	cp	r24, r18
   13e22:	93 07       	cpc	r25, r19
   13e24:	39 f0       	breq	.+14     	; 0x13e34 <SS80_describe+0x58>
   13e26:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13e2a:	80 ff       	sbrs	r24, 0
   13e2c:	3c c0       	rjmp	.+120    	; 0x13ea6 <SS80_describe+0xca>
   13e2e:	8a e1       	ldi	r24, 0x1A	; 26
   13e30:	9e e1       	ldi	r25, 0x1E	; 30
   13e32:	31 c0       	rjmp	.+98     	; 0x13e96 <SS80_describe+0xba>
   13e34:	1c 82       	std	Y+4, r1	; 0x04
   13e36:	1b 82       	std	Y+3, r1	; 0x03
   13e38:	ce 01       	movw	r24, r28
   13e3a:	01 96       	adiw	r24, 0x01	; 1
   13e3c:	ac dd       	rcall	.-1192   	; 0x13996 <SS80UnitPack>
   13e3e:	69 81       	ldd	r22, Y+1	; 0x01
   13e40:	7a 81       	ldd	r23, Y+2	; 0x02
   13e42:	ae 01       	movw	r20, r28
   13e44:	4d 5f       	subi	r20, 0xFD	; 253
   13e46:	5f 4f       	sbci	r21, 0xFF	; 255
   13e48:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   13e4c:	29 81       	ldd	r18, Y+1	; 0x01
   13e4e:	3a 81       	ldd	r19, Y+2	; 0x02
   13e50:	82 17       	cp	r24, r18
   13e52:	93 07       	cpc	r25, r19
   13e54:	39 f0       	breq	.+14     	; 0x13e64 <SS80_describe+0x88>
   13e56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13e5a:	80 ff       	sbrs	r24, 0
   13e5c:	24 c0       	rjmp	.+72     	; 0x13ea6 <SS80_describe+0xca>
   13e5e:	8d ef       	ldi	r24, 0xFD	; 253
   13e60:	9d e1       	ldi	r25, 0x1D	; 29
   13e62:	19 c0       	rjmp	.+50     	; 0x13e96 <SS80_describe+0xba>
   13e64:	80 e0       	ldi	r24, 0x00	; 0
   13e66:	91 e0       	ldi	r25, 0x01	; 1
   13e68:	9c 83       	std	Y+4, r25	; 0x04
   13e6a:	8b 83       	std	Y+3, r24	; 0x03
   13e6c:	ce 01       	movw	r24, r28
   13e6e:	01 96       	adiw	r24, 0x01	; 1
   13e70:	5e de       	rcall	.-836    	; 0x13b2e <SS80VolumePack>
   13e72:	69 81       	ldd	r22, Y+1	; 0x01
   13e74:	7a 81       	ldd	r23, Y+2	; 0x02
   13e76:	ae 01       	movw	r20, r28
   13e78:	4d 5f       	subi	r20, 0xFD	; 253
   13e7a:	5f 4f       	sbci	r21, 0xFF	; 255
   13e7c:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   13e80:	29 81       	ldd	r18, Y+1	; 0x01
   13e82:	3a 81       	ldd	r19, Y+2	; 0x02
   13e84:	82 17       	cp	r24, r18
   13e86:	93 07       	cpc	r25, r19
   13e88:	99 f0       	breq	.+38     	; 0x13eb0 <SS80_describe+0xd4>
   13e8a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13e8e:	80 ff       	sbrs	r24, 0
   13e90:	0a c0       	rjmp	.+20     	; 0x13ea6 <SS80_describe+0xca>
   13e92:	8e ed       	ldi	r24, 0xDE	; 222
   13e94:	9d e1       	ldi	r25, 0x1D	; 29
   13e96:	1f 92       	push	r1
   13e98:	9f 93       	push	r25
   13e9a:	8f 93       	push	r24
   13e9c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13ea0:	0f 90       	pop	r0
   13ea2:	0f 90       	pop	r0
   13ea4:	0f 90       	pop	r0
   13ea6:	8b 81       	ldd	r24, Y+3	; 0x03
   13ea8:	9c 81       	ldd	r25, Y+4	; 0x04
   13eaa:	88 27       	eor	r24, r24
   13eac:	90 7d       	andi	r25, 0xD0	; 208
   13eae:	02 c0       	rjmp	.+4      	; 0x13eb4 <SS80_describe+0xd8>
   13eb0:	80 e0       	ldi	r24, 0x00	; 0
   13eb2:	90 e0       	ldi	r25, 0x00	; 0
   13eb4:	24 96       	adiw	r28, 0x04	; 4
   13eb6:	e2 e0       	ldi	r30, 0x02	; 2
   13eb8:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00013ebc <SS80_Check_Unit>:
   13ebc:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   13ec0:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   13ec4:	88 23       	and	r24, r24
   13ec6:	d1 f0       	breq	.+52     	; 0x13efc <SS80_Check_Unit+0x40>
   13ec8:	8f 30       	cpi	r24, 0x0F	; 15
   13eca:	c1 f0       	breq	.+48     	; 0x13efc <SS80_Check_Unit+0x40>
   13ecc:	23 81       	ldd	r18, Z+3	; 0x03
   13ece:	34 81       	ldd	r19, Z+4	; 0x04
   13ed0:	20 64       	ori	r18, 0x40	; 64
   13ed2:	34 83       	std	Z+4, r19	; 0x04
   13ed4:	23 83       	std	Z+3, r18	; 0x03
   13ed6:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   13eda:	90 ff       	sbrs	r25, 0
   13edc:	10 c0       	rjmp	.+32     	; 0x13efe <SS80_Check_Unit+0x42>
   13ede:	1f 92       	push	r1
   13ee0:	8f 93       	push	r24
   13ee2:	86 ec       	ldi	r24, 0xC6	; 198
   13ee4:	9d e1       	ldi	r25, 0x1D	; 29
   13ee6:	1f 92       	push	r1
   13ee8:	9f 93       	push	r25
   13eea:	8f 93       	push	r24
   13eec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13ef0:	0f 90       	pop	r0
   13ef2:	0f 90       	pop	r0
   13ef4:	0f 90       	pop	r0
   13ef6:	0f 90       	pop	r0
   13ef8:	0f 90       	pop	r0
   13efa:	08 95       	ret
   13efc:	85 83       	std	Z+5, r24	; 0x05
   13efe:	08 95       	ret

00013f00 <SS80_Check_Volume>:
   13f00:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   13f04:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   13f08:	88 23       	and	r24, r24
   13f0a:	c1 f0       	breq	.+48     	; 0x13f3c <SS80_Check_Volume+0x3c>
   13f0c:	23 81       	ldd	r18, Z+3	; 0x03
   13f0e:	34 81       	ldd	r19, Z+4	; 0x04
   13f10:	20 64       	ori	r18, 0x40	; 64
   13f12:	34 83       	std	Z+4, r19	; 0x04
   13f14:	23 83       	std	Z+3, r18	; 0x03
   13f16:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   13f1a:	90 ff       	sbrs	r25, 0
   13f1c:	10 c0       	rjmp	.+32     	; 0x13f3e <SS80_Check_Volume+0x3e>
   13f1e:	1f 92       	push	r1
   13f20:	8f 93       	push	r24
   13f22:	8c ea       	ldi	r24, 0xAC	; 172
   13f24:	9d e1       	ldi	r25, 0x1D	; 29
   13f26:	1f 92       	push	r1
   13f28:	9f 93       	push	r25
   13f2a:	8f 93       	push	r24
   13f2c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13f30:	0f 90       	pop	r0
   13f32:	0f 90       	pop	r0
   13f34:	0f 90       	pop	r0
   13f36:	0f 90       	pop	r0
   13f38:	0f 90       	pop	r0
   13f3a:	08 95       	ret
   13f3c:	16 82       	std	Z+6, r1	; 0x06
   13f3e:	08 95       	ret

00013f40 <SS80_Command_State>:
   13f40:	2f 92       	push	r2
   13f42:	3f 92       	push	r3
   13f44:	4f 92       	push	r4
   13f46:	6f 92       	push	r6
   13f48:	7f 92       	push	r7
   13f4a:	8f 92       	push	r8
   13f4c:	af 92       	push	r10
   13f4e:	bf 92       	push	r11
   13f50:	cf 92       	push	r12
   13f52:	df 92       	push	r13
   13f54:	ef 92       	push	r14
   13f56:	ff 92       	push	r15
   13f58:	0f 93       	push	r16
   13f5a:	1f 93       	push	r17
   13f5c:	cf 93       	push	r28
   13f5e:	df 93       	push	r29
   13f60:	cd b7       	in	r28, 0x3d	; 61
   13f62:	de b7       	in	r29, 0x3e	; 62
   13f64:	60 97       	sbiw	r28, 0x10	; 16
   13f66:	0f b6       	in	r0, 0x3f	; 63
   13f68:	f8 94       	cli
   13f6a:	de bf       	out	0x3e, r29	; 62
   13f6c:	0f be       	out	0x3f, r0	; 63
   13f6e:	cd bf       	out	0x3d, r28	; 61
   13f70:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   13f74:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   13f78:	81 81       	ldd	r24, Z+1	; 0x01
   13f7a:	90 e0       	ldi	r25, 0x00	; 0
   13f7c:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   13f80:	80 e0       	ldi	r24, 0x00	; 0
   13f82:	91 e0       	ldi	r25, 0x01	; 1
   13f84:	9a 83       	std	Y+2, r25	; 0x02
   13f86:	89 83       	std	Y+1, r24	; 0x01
   13f88:	ae 01       	movw	r20, r28
   13f8a:	4f 5f       	subi	r20, 0xFF	; 255
   13f8c:	5f 4f       	sbci	r21, 0xFF	; 255
   13f8e:	60 e0       	ldi	r22, 0x00	; 0
   13f90:	72 e0       	ldi	r23, 0x02	; 2
   13f92:	85 e1       	ldi	r24, 0x15	; 21
   13f94:	9d e1       	ldi	r25, 0x1D	; 29
   13f96:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
   13f9a:	6c 01       	movw	r12, r24
   13f9c:	89 81       	ldd	r24, Y+1	; 0x01
   13f9e:	9a 81       	ldd	r25, Y+2	; 0x02
   13fa0:	9c 01       	movw	r18, r24
   13fa2:	22 27       	eor	r18, r18
   13fa4:	30 7d       	andi	r19, 0xD0	; 208
   13fa6:	23 2b       	or	r18, r19
   13fa8:	79 f0       	breq	.+30     	; 0x13fc8 <SS80_Command_State+0x88>
   13faa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13fae:	80 ff       	sbrs	r24, 0
   13fb0:	21 c2       	rjmp	.+1090   	; 0x143f4 <SS80_Command_State+0x4b4>
   13fb2:	86 e8       	ldi	r24, 0x86	; 134
   13fb4:	9d e1       	ldi	r25, 0x1D	; 29
   13fb6:	1f 92       	push	r1
   13fb8:	9f 93       	push	r25
   13fba:	8f 93       	push	r24
   13fbc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13fc0:	0f 90       	pop	r0
   13fc2:	0f 90       	pop	r0
   13fc4:	0f 90       	pop	r0
   13fc6:	16 c2       	rjmp	.+1068   	; 0x143f4 <SS80_Command_State+0x4b4>
   13fc8:	c1 14       	cp	r12, r1
   13fca:	d1 04       	cpc	r13, r1
   13fcc:	09 f4       	brne	.+2      	; 0x13fd0 <SS80_Command_State+0x90>
   13fce:	17 c2       	rjmp	.+1070   	; 0x143fe <SS80_Command_State+0x4be>
   13fd0:	90 fd       	sbrc	r25, 0
   13fd2:	0e c0       	rjmp	.+28     	; 0x13ff0 <SS80_Command_State+0xb0>
   13fd4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13fd8:	80 ff       	sbrs	r24, 0
   13fda:	0a c0       	rjmp	.+20     	; 0x13ff0 <SS80_Command_State+0xb0>
   13fdc:	8d e6       	ldi	r24, 0x6D	; 109
   13fde:	9d e1       	ldi	r25, 0x1D	; 29
   13fe0:	1f 92       	push	r1
   13fe2:	9f 93       	push	r25
   13fe4:	8f 93       	push	r24
   13fe6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   13fea:	0f 90       	pop	r0
   13fec:	0f 90       	pop	r0
   13fee:	0f 90       	pop	r0
   13ff0:	e1 2c       	mov	r14, r1
   13ff2:	f1 2c       	mov	r15, r1
   13ff4:	81 e7       	ldi	r24, 0x71	; 113
   13ff6:	9c e1       	ldi	r25, 0x1C	; 28
   13ff8:	9c 01       	movw	r18, r24
   13ffa:	40 e0       	ldi	r20, 0x00	; 0
   13ffc:	2d 83       	std	Y+5, r18	; 0x05
   13ffe:	3e 83       	std	Y+6, r19	; 0x06
   14000:	4f 83       	std	Y+7, r20	; 0x07
   14002:	86 e9       	ldi	r24, 0x96	; 150
   14004:	9c e1       	ldi	r25, 0x1C	; 28
   14006:	9c 01       	movw	r18, r24
   14008:	40 e0       	ldi	r20, 0x00	; 0
   1400a:	28 87       	std	Y+8, r18	; 0x08
   1400c:	39 87       	std	Y+9, r19	; 0x09
   1400e:	4a 87       	std	Y+10, r20	; 0x0a
   14010:	80 eb       	ldi	r24, 0xB0	; 176
   14012:	9c e1       	ldi	r25, 0x1C	; 28
   14014:	9c 01       	movw	r18, r24
   14016:	40 e0       	ldi	r20, 0x00	; 0
   14018:	2b 87       	std	Y+11, r18	; 0x0b
   1401a:	3c 87       	std	Y+12, r19	; 0x0c
   1401c:	4d 87       	std	Y+13, r20	; 0x0d
   1401e:	86 ec       	ldi	r24, 0xC6	; 198
   14020:	9c e1       	ldi	r25, 0x1C	; 28
   14022:	3c 01       	movw	r6, r24
   14024:	84 ed       	ldi	r24, 0xD4	; 212
   14026:	9c e1       	ldi	r25, 0x1C	; 28
   14028:	9c 01       	movw	r18, r24
   1402a:	40 e0       	ldi	r20, 0x00	; 0
   1402c:	2e 87       	std	Y+14, r18	; 0x0e
   1402e:	3f 87       	std	Y+15, r19	; 0x0f
   14030:	48 8b       	std	Y+16, r20	; 0x10
   14032:	80 ef       	ldi	r24, 0xF0	; 240
   14034:	9c e1       	ldi	r25, 0x1C	; 28
   14036:	1c 01       	movw	r2, r24
   14038:	8e e3       	ldi	r24, 0x3E	; 62
   1403a:	a8 2e       	mov	r10, r24
   1403c:	8d e1       	ldi	r24, 0x1D	; 29
   1403e:	b8 2e       	mov	r11, r24
   14040:	87 01       	movw	r16, r14
   14042:	ec 14       	cp	r14, r12
   14044:	fd 04       	cpc	r15, r13
   14046:	0c f0       	brlt	.+2      	; 0x1404a <SS80_Command_State+0x10a>
   14048:	b6 c1       	rjmp	.+876    	; 0x143b6 <SS80_Command_State+0x476>
   1404a:	0f 5f       	subi	r16, 0xFF	; 255
   1404c:	1f 4f       	sbci	r17, 0xFF	; 255
   1404e:	f7 01       	movw	r30, r14
   14050:	eb 5e       	subi	r30, 0xEB	; 235
   14052:	f2 4e       	sbci	r31, 0xE2	; 226
   14054:	80 81       	ld	r24, Z
   14056:	28 2f       	mov	r18, r24
   14058:	30 e0       	ldi	r19, 0x00	; 0
   1405a:	a9 01       	movw	r20, r18
   1405c:	40 52       	subi	r20, 0x20	; 32
   1405e:	51 09       	sbc	r21, r1
   14060:	40 31       	cpi	r20, 0x10	; 16
   14062:	51 05       	cpc	r21, r1
   14064:	80 f4       	brcc	.+32     	; 0x14086 <SS80_Command_State+0x146>
   14066:	80 52       	subi	r24, 0x20	; 32
   14068:	29 df       	rcall	.-430    	; 0x13ebc <SS80_Check_Unit>
   1406a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1406e:	85 ff       	sbrs	r24, 5
   14070:	a0 c1       	rjmp	.+832    	; 0x143b2 <SS80_Command_State+0x472>
   14072:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14076:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   1407a:	85 81       	ldd	r24, Z+5	; 0x05
   1407c:	1f 92       	push	r1
   1407e:	8f 93       	push	r24
   14080:	87 e5       	ldi	r24, 0x57	; 87
   14082:	9d e1       	ldi	r25, 0x1D	; 29
   14084:	14 c0       	rjmp	.+40     	; 0x140ae <SS80_Command_State+0x16e>
   14086:	a9 01       	movw	r20, r18
   14088:	40 54       	subi	r20, 0x40	; 64
   1408a:	51 09       	sbc	r21, r1
   1408c:	40 31       	cpi	r20, 0x10	; 16
   1408e:	51 05       	cpc	r21, r1
   14090:	c8 f4       	brcc	.+50     	; 0x140c4 <SS80_Command_State+0x184>
   14092:	80 54       	subi	r24, 0x40	; 64
   14094:	35 df       	rcall	.-406    	; 0x13f00 <SS80_Check_Volume>
   14096:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1409a:	85 ff       	sbrs	r24, 5
   1409c:	8a c1       	rjmp	.+788    	; 0x143b2 <SS80_Command_State+0x472>
   1409e:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   140a2:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   140a6:	86 81       	ldd	r24, Z+6	; 0x06
   140a8:	1f 92       	push	r1
   140aa:	8f 93       	push	r24
   140ac:	c5 01       	movw	r24, r10
   140ae:	1f 92       	push	r1
   140b0:	9f 93       	push	r25
   140b2:	8f 93       	push	r24
   140b4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   140b8:	0f 90       	pop	r0
   140ba:	0f 90       	pop	r0
   140bc:	0f 90       	pop	r0
   140be:	0f 90       	pop	r0
   140c0:	0f 90       	pop	r0
   140c2:	77 c1       	rjmp	.+750    	; 0x143b2 <SS80_Command_State+0x472>
   140c4:	21 15       	cp	r18, r1
   140c6:	31 05       	cpc	r19, r1
   140c8:	79 f4       	brne	.+30     	; 0x140e8 <SS80_Command_State+0x1a8>
   140ca:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   140ce:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   140d2:	81 e0       	ldi	r24, 0x01	; 1
   140d4:	90 e0       	ldi	r25, 0x00	; 0
   140d6:	91 83       	std	Z+1, r25	; 0x01
   140d8:	80 83       	st	Z, r24
   140da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   140de:	85 ff       	sbrs	r24, 5
   140e0:	6a c1       	rjmp	.+724    	; 0x143b6 <SS80_Command_State+0x476>
   140e2:	86 e2       	ldi	r24, 0x26	; 38
   140e4:	9d e1       	ldi	r25, 0x1D	; 29
   140e6:	0f c0       	rjmp	.+30     	; 0x14106 <SS80_Command_State+0x1c6>
   140e8:	22 30       	cpi	r18, 0x02	; 2
   140ea:	31 05       	cpc	r19, r1
   140ec:	a9 f4       	brne	.+42     	; 0x14118 <SS80_Command_State+0x1d8>
   140ee:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   140f2:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   140f6:	31 83       	std	Z+1, r19	; 0x01
   140f8:	20 83       	st	Z, r18
   140fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   140fe:	85 ff       	sbrs	r24, 5
   14100:	5a c1       	rjmp	.+692    	; 0x143b6 <SS80_Command_State+0x476>
   14102:	8d e0       	ldi	r24, 0x0D	; 13
   14104:	9d e1       	ldi	r25, 0x1D	; 29
   14106:	1f 92       	push	r1
   14108:	9f 93       	push	r25
   1410a:	8f 93       	push	r24
   1410c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14110:	0f 90       	pop	r0
   14112:	0f 90       	pop	r0
   14114:	0f 90       	pop	r0
   14116:	4f c1       	rjmp	.+670    	; 0x143b6 <SS80_Command_State+0x476>
   14118:	20 31       	cpi	r18, 0x10	; 16
   1411a:	31 05       	cpc	r19, r1
   1411c:	a1 f5       	brne	.+104    	; 0x14186 <SS80_Command_State+0x246>
   1411e:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <SS80s>
   14122:	90 91 cb 19 	lds	r25, 0x19CB	; 0x8019cb <SS80s+0x1>
   14126:	9c 83       	std	Y+4, r25	; 0x04
   14128:	8b 83       	std	Y+3, r24	; 0x03
   1412a:	46 e0       	ldi	r20, 0x06	; 6
   1412c:	50 e0       	ldi	r21, 0x00	; 0
   1412e:	b8 01       	movw	r22, r16
   14130:	85 e1       	ldi	r24, 0x15	; 21
   14132:	9d e1       	ldi	r25, 0x1D	; 29
   14134:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   14138:	eb 81       	ldd	r30, Y+3	; 0x03
   1413a:	fc 81       	ldd	r31, Y+4	; 0x04
   1413c:	67 83       	std	Z+7, r22	; 0x07
   1413e:	70 87       	std	Z+8, r23	; 0x08
   14140:	81 87       	std	Z+9, r24	; 0x09
   14142:	92 87       	std	Z+10, r25	; 0x0a
   14144:	87 01       	movw	r16, r14
   14146:	09 5f       	subi	r16, 0xF9	; 249
   14148:	1f 4f       	sbci	r17, 0xFF	; 255
   1414a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1414e:	85 ff       	sbrs	r24, 5
   14150:	30 c1       	rjmp	.+608    	; 0x143b2 <SS80_Command_State+0x472>
   14152:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14156:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   1415a:	a0 91 cc 19 	lds	r26, 0x19CC	; 0x8019cc <SS80p>
   1415e:	b0 91 cd 19 	lds	r27, 0x19CD	; 0x8019cd <SS80p+0x1>
   14162:	9f 96       	adiw	r26, 0x2f	; 47
   14164:	0d 90       	ld	r0, X+
   14166:	bc 91       	ld	r27, X
   14168:	a0 2d       	mov	r26, r0
   1416a:	27 81       	ldd	r18, Z+7	; 0x07
   1416c:	30 85       	ldd	r19, Z+8	; 0x08
   1416e:	41 85       	ldd	r20, Z+9	; 0x09
   14170:	52 85       	ldd	r21, Z+10	; 0x0a
   14172:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
   14176:	9f 93       	push	r25
   14178:	8f 93       	push	r24
   1417a:	7f 93       	push	r23
   1417c:	6f 93       	push	r22
   1417e:	1f 92       	push	r1
   14180:	3f 92       	push	r3
   14182:	2f 92       	push	r2
   14184:	2e c0       	rjmp	.+92     	; 0x141e2 <SS80_Command_State+0x2a2>
   14186:	28 31       	cpi	r18, 0x18	; 24
   14188:	31 05       	cpc	r19, r1
   1418a:	99 f5       	brne	.+102    	; 0x141f2 <SS80_Command_State+0x2b2>
   1418c:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <SS80s>
   14190:	90 91 cb 19 	lds	r25, 0x19CB	; 0x8019cb <SS80s+0x1>
   14194:	9c 83       	std	Y+4, r25	; 0x04
   14196:	8b 83       	std	Y+3, r24	; 0x03
   14198:	44 e0       	ldi	r20, 0x04	; 4
   1419a:	50 e0       	ldi	r21, 0x00	; 0
   1419c:	b8 01       	movw	r22, r16
   1419e:	85 e1       	ldi	r24, 0x15	; 21
   141a0:	9d e1       	ldi	r25, 0x1D	; 29
   141a2:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   141a6:	eb 81       	ldd	r30, Y+3	; 0x03
   141a8:	fc 81       	ldd	r31, Y+4	; 0x04
   141aa:	63 87       	std	Z+11, r22	; 0x0b
   141ac:	74 87       	std	Z+12, r23	; 0x0c
   141ae:	85 87       	std	Z+13, r24	; 0x0d
   141b0:	96 87       	std	Z+14, r25	; 0x0e
   141b2:	87 01       	movw	r16, r14
   141b4:	0b 5f       	subi	r16, 0xFB	; 251
   141b6:	1f 4f       	sbci	r17, 0xFF	; 255
   141b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   141bc:	85 ff       	sbrs	r24, 5
   141be:	f9 c0       	rjmp	.+498    	; 0x143b2 <SS80_Command_State+0x472>
   141c0:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   141c4:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   141c8:	86 85       	ldd	r24, Z+14	; 0x0e
   141ca:	8f 93       	push	r24
   141cc:	85 85       	ldd	r24, Z+13	; 0x0d
   141ce:	8f 93       	push	r24
   141d0:	84 85       	ldd	r24, Z+12	; 0x0c
   141d2:	8f 93       	push	r24
   141d4:	83 85       	ldd	r24, Z+11	; 0x0b
   141d6:	8f 93       	push	r24
   141d8:	1f 92       	push	r1
   141da:	ff 85       	ldd	r31, Y+15	; 0x0f
   141dc:	ff 93       	push	r31
   141de:	2e 85       	ldd	r18, Y+14	; 0x0e
   141e0:	2f 93       	push	r18
   141e2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   141e6:	0f b6       	in	r0, 0x3f	; 63
   141e8:	f8 94       	cli
   141ea:	de bf       	out	0x3e, r29	; 62
   141ec:	0f be       	out	0x3f, r0	; 63
   141ee:	cd bf       	out	0x3d, r28	; 61
   141f0:	e0 c0       	rjmp	.+448    	; 0x143b2 <SS80_Command_State+0x472>
   141f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   141f6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   141fa:	24 33       	cpi	r18, 0x34	; 52
   141fc:	31 05       	cpc	r19, r1
   141fe:	31 f4       	brne	.+12     	; 0x1420c <SS80_Command_State+0x2cc>
   14200:	85 ff       	sbrs	r24, 5
   14202:	d7 c0       	rjmp	.+430    	; 0x143b2 <SS80_Command_State+0x472>
   14204:	1f 92       	push	r1
   14206:	7f 92       	push	r7
   14208:	6f 92       	push	r6
   1420a:	2c c0       	rjmp	.+88     	; 0x14264 <SS80_Command_State+0x324>
   1420c:	29 33       	cpi	r18, 0x39	; 57
   1420e:	31 05       	cpc	r19, r1
   14210:	59 f4       	brne	.+22     	; 0x14228 <SS80_Command_State+0x2e8>
   14212:	87 01       	movw	r16, r14
   14214:	0d 5f       	subi	r16, 0xFD	; 253
   14216:	1f 4f       	sbci	r17, 0xFF	; 255
   14218:	85 ff       	sbrs	r24, 5
   1421a:	cb c0       	rjmp	.+406    	; 0x143b2 <SS80_Command_State+0x472>
   1421c:	1f 92       	push	r1
   1421e:	9c 85       	ldd	r25, Y+12	; 0x0c
   14220:	9f 93       	push	r25
   14222:	eb 85       	ldd	r30, Y+11	; 0x0b
   14224:	ef 93       	push	r30
   14226:	1e c0       	rjmp	.+60     	; 0x14264 <SS80_Command_State+0x324>
   14228:	2b 33       	cpi	r18, 0x3B	; 59
   1422a:	31 05       	cpc	r19, r1
   1422c:	59 f4       	brne	.+22     	; 0x14244 <SS80_Command_State+0x304>
   1422e:	87 01       	movw	r16, r14
   14230:	0e 5f       	subi	r16, 0xFE	; 254
   14232:	1f 4f       	sbci	r17, 0xFF	; 255
   14234:	85 ff       	sbrs	r24, 5
   14236:	bd c0       	rjmp	.+378    	; 0x143b2 <SS80_Command_State+0x472>
   14238:	1f 92       	push	r1
   1423a:	f9 85       	ldd	r31, Y+9	; 0x09
   1423c:	ff 93       	push	r31
   1423e:	28 85       	ldd	r18, Y+8	; 0x08
   14240:	2f 93       	push	r18
   14242:	10 c0       	rjmp	.+32     	; 0x14264 <SS80_Command_State+0x324>
   14244:	28 34       	cpi	r18, 0x48	; 72
   14246:	31 05       	cpc	r19, r1
   14248:	99 f4       	brne	.+38     	; 0x14270 <SS80_Command_State+0x330>
   1424a:	87 01       	movw	r16, r14
   1424c:	0e 5f       	subi	r16, 0xFE	; 254
   1424e:	1f 4f       	sbci	r17, 0xFF	; 255
   14250:	80 73       	andi	r24, 0x30	; 48
   14252:	99 27       	eor	r25, r25
   14254:	89 2b       	or	r24, r25
   14256:	09 f4       	brne	.+2      	; 0x1425a <SS80_Command_State+0x31a>
   14258:	ac c0       	rjmp	.+344    	; 0x143b2 <SS80_Command_State+0x472>
   1425a:	1f 92       	push	r1
   1425c:	3e 81       	ldd	r19, Y+6	; 0x06
   1425e:	3f 93       	push	r19
   14260:	4d 81       	ldd	r20, Y+5	; 0x05
   14262:	4f 93       	push	r20
   14264:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14268:	0f 90       	pop	r0
   1426a:	0f 90       	pop	r0
   1426c:	0f 90       	pop	r0
   1426e:	a1 c0       	rjmp	.+322    	; 0x143b2 <SS80_Command_State+0x472>
   14270:	24 30       	cpi	r18, 0x04	; 4
   14272:	31 05       	cpc	r19, r1
   14274:	41 f4       	brne	.+16     	; 0x14286 <SS80_Command_State+0x346>
   14276:	80 73       	andi	r24, 0x30	; 48
   14278:	99 27       	eor	r25, r25
   1427a:	89 2b       	or	r24, r25
   1427c:	09 f4       	brne	.+2      	; 0x14280 <SS80_Command_State+0x340>
   1427e:	9b c0       	rjmp	.+310    	; 0x143b6 <SS80_Command_State+0x476>
   14280:	80 e5       	ldi	r24, 0x50	; 80
   14282:	9c e1       	ldi	r25, 0x1C	; 28
   14284:	40 cf       	rjmp	.-384    	; 0x14106 <SS80_Command_State+0x1c6>
   14286:	2e 30       	cpi	r18, 0x0E	; 14
   14288:	31 05       	cpc	r19, r1
   1428a:	29 f4       	brne	.+10     	; 0x14296 <SS80_Command_State+0x356>
   1428c:	85 ff       	sbrs	r24, 5
   1428e:	93 c0       	rjmp	.+294    	; 0x143b6 <SS80_Command_State+0x476>
   14290:	8a e3       	ldi	r24, 0x3A	; 58
   14292:	9c e1       	ldi	r25, 0x1C	; 28
   14294:	38 cf       	rjmp	.-400    	; 0x14106 <SS80_Command_State+0x1c6>
   14296:	2f 30       	cpi	r18, 0x0F	; 15
   14298:	31 05       	cpc	r19, r1
   1429a:	29 f4       	brne	.+10     	; 0x142a6 <SS80_Command_State+0x366>
   1429c:	85 ff       	sbrs	r24, 5
   1429e:	8b c0       	rjmp	.+278    	; 0x143b6 <SS80_Command_State+0x476>
   142a0:	8d e1       	ldi	r24, 0x1D	; 29
   142a2:	9c e1       	ldi	r25, 0x1C	; 28
   142a4:	30 cf       	rjmp	.-416    	; 0x14106 <SS80_Command_State+0x1c6>
   142a6:	21 33       	cpi	r18, 0x31	; 49
   142a8:	31 05       	cpc	r19, r1
   142aa:	41 f4       	brne	.+16     	; 0x142bc <SS80_Command_State+0x37c>
   142ac:	87 01       	movw	r16, r14
   142ae:	0d 5f       	subi	r16, 0xFD	; 253
   142b0:	1f 4f       	sbci	r17, 0xFF	; 255
   142b2:	85 ff       	sbrs	r24, 5
   142b4:	80 c0       	rjmp	.+256    	; 0x143b6 <SS80_Command_State+0x476>
   142b6:	81 e0       	ldi	r24, 0x01	; 1
   142b8:	9c e1       	ldi	r25, 0x1C	; 28
   142ba:	25 cf       	rjmp	.-438    	; 0x14106 <SS80_Command_State+0x1c6>
   142bc:	25 33       	cpi	r18, 0x35	; 53
   142be:	31 05       	cpc	r19, r1
   142c0:	69 f4       	brne	.+26     	; 0x142dc <SS80_Command_State+0x39c>
   142c2:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   142c6:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   142ca:	24 e0       	ldi	r18, 0x04	; 4
   142cc:	30 e0       	ldi	r19, 0x00	; 0
   142ce:	31 83       	std	Z+1, r19	; 0x01
   142d0:	20 83       	st	Z, r18
   142d2:	85 ff       	sbrs	r24, 5
   142d4:	70 c0       	rjmp	.+224    	; 0x143b6 <SS80_Command_State+0x476>
   142d6:	80 ef       	ldi	r24, 0xF0	; 240
   142d8:	9b e1       	ldi	r25, 0x1B	; 27
   142da:	15 cf       	rjmp	.-470    	; 0x14106 <SS80_Command_State+0x1c6>
   142dc:	27 33       	cpi	r18, 0x37	; 55
   142de:	31 05       	cpc	r19, r1
   142e0:	59 f4       	brne	.+22     	; 0x142f8 <SS80_Command_State+0x3b8>
   142e2:	87 01       	movw	r16, r14
   142e4:	0d 5f       	subi	r16, 0xFD	; 253
   142e6:	1f 4f       	sbci	r17, 0xFF	; 255
   142e8:	80 73       	andi	r24, 0x30	; 48
   142ea:	99 27       	eor	r25, r25
   142ec:	89 2b       	or	r24, r25
   142ee:	09 f4       	brne	.+2      	; 0x142f2 <SS80_Command_State+0x3b2>
   142f0:	62 c0       	rjmp	.+196    	; 0x143b6 <SS80_Command_State+0x476>
   142f2:	82 ed       	ldi	r24, 0xD2	; 210
   142f4:	9b e1       	ldi	r25, 0x1B	; 27
   142f6:	07 cf       	rjmp	.-498    	; 0x14106 <SS80_Command_State+0x1c6>
   142f8:	2e 33       	cpi	r18, 0x3E	; 62
   142fa:	31 05       	cpc	r19, r1
   142fc:	c1 f4       	brne	.+48     	; 0x1432e <SS80_Command_State+0x3ee>
   142fe:	80 73       	andi	r24, 0x30	; 48
   14300:	99 27       	eor	r25, r25
   14302:	89 2b       	or	r24, r25
   14304:	81 f0       	breq	.+32     	; 0x14326 <SS80_Command_State+0x3e6>
   14306:	83 eb       	ldi	r24, 0xB3	; 179
   14308:	9b e1       	ldi	r25, 0x1B	; 27
   1430a:	1f 92       	push	r1
   1430c:	9f 93       	push	r25
   1430e:	8f 93       	push	r24
   14310:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14314:	69 ed       	ldi	r22, 0xD9	; 217
   14316:	7d e0       	ldi	r23, 0x0D	; 13
   14318:	c8 01       	movw	r24, r16
   1431a:	8b 5e       	subi	r24, 0xEB	; 235
   1431c:	92 4e       	sbci	r25, 0xE2	; 226
   1431e:	86 dc       	rcall	.-1780   	; 0x13c2c <SS80_display_extended_status>
   14320:	0f 90       	pop	r0
   14322:	0f 90       	pop	r0
   14324:	0f 90       	pop	r0
   14326:	87 01       	movw	r16, r14
   14328:	07 5f       	subi	r16, 0xF7	; 247
   1432a:	1f 4f       	sbci	r17, 0xFF	; 255
   1432c:	44 c0       	rjmp	.+136    	; 0x143b6 <SS80_Command_State+0x476>
   1432e:	2c 34       	cpi	r18, 0x4C	; 76
   14330:	31 05       	cpc	r19, r1
   14332:	39 f4       	brne	.+14     	; 0x14342 <SS80_Command_State+0x402>
   14334:	80 73       	andi	r24, 0x30	; 48
   14336:	99 27       	eor	r25, r25
   14338:	89 2b       	or	r24, r25
   1433a:	e9 f1       	breq	.+122    	; 0x143b6 <SS80_Command_State+0x476>
   1433c:	88 e9       	ldi	r24, 0x98	; 152
   1433e:	9b e1       	ldi	r25, 0x1B	; 27
   14340:	e2 ce       	rjmp	.-572    	; 0x14106 <SS80_Command_State+0x1c6>
   14342:	2d 34       	cpi	r18, 0x4D	; 77
   14344:	31 05       	cpc	r19, r1
   14346:	39 f4       	brne	.+14     	; 0x14356 <SS80_Command_State+0x416>
   14348:	80 73       	andi	r24, 0x30	; 48
   1434a:	99 27       	eor	r25, r25
   1434c:	89 2b       	or	r24, r25
   1434e:	99 f1       	breq	.+102    	; 0x143b6 <SS80_Command_State+0x476>
   14350:	8f e7       	ldi	r24, 0x7F	; 127
   14352:	9b e1       	ldi	r25, 0x1B	; 27
   14354:	d8 ce       	rjmp	.-592    	; 0x14106 <SS80_Command_State+0x1c6>
   14356:	2d 30       	cpi	r18, 0x0D	; 13
   14358:	31 05       	cpc	r19, r1
   1435a:	69 f4       	brne	.+26     	; 0x14376 <SS80_Command_State+0x436>
   1435c:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14360:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14364:	23 e0       	ldi	r18, 0x03	; 3
   14366:	30 e0       	ldi	r19, 0x00	; 0
   14368:	31 83       	std	Z+1, r19	; 0x01
   1436a:	20 83       	st	Z, r18
   1436c:	85 ff       	sbrs	r24, 5
   1436e:	23 c0       	rjmp	.+70     	; 0x143b6 <SS80_Command_State+0x476>
   14370:	88 e6       	ldi	r24, 0x68	; 104
   14372:	9b e1       	ldi	r25, 0x1B	; 27
   14374:	c8 ce       	rjmp	.-624    	; 0x14106 <SS80_Command_State+0x1c6>
   14376:	23 33       	cpi	r18, 0x33	; 51
   14378:	31 05       	cpc	r19, r1
   1437a:	51 f4       	brne	.+20     	; 0x14390 <SS80_Command_State+0x450>
   1437c:	87 01       	movw	r16, r14
   1437e:	0c 5f       	subi	r16, 0xFC	; 252
   14380:	1f 4f       	sbci	r17, 0xFF	; 255
   14382:	80 73       	andi	r24, 0x30	; 48
   14384:	99 27       	eor	r25, r25
   14386:	89 2b       	or	r24, r25
   14388:	b1 f0       	breq	.+44     	; 0x143b6 <SS80_Command_State+0x476>
   1438a:	87 e4       	ldi	r24, 0x47	; 71
   1438c:	9b e1       	ldi	r25, 0x1B	; 27
   1438e:	bb ce       	rjmp	.-650    	; 0x14106 <SS80_Command_State+0x1c6>
   14390:	80 ff       	sbrs	r24, 0
   14392:	28 c0       	rjmp	.+80     	; 0x143e4 <SS80_Command_State+0x4a4>
   14394:	3f 93       	push	r19
   14396:	2f 93       	push	r18
   14398:	87 e2       	ldi	r24, 0x27	; 39
   1439a:	9b e1       	ldi	r25, 0x1B	; 27
   1439c:	1f 92       	push	r1
   1439e:	9f 93       	push	r25
   143a0:	8f 93       	push	r24
   143a2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   143a6:	0f 90       	pop	r0
   143a8:	0f 90       	pop	r0
   143aa:	0f 90       	pop	r0
   143ac:	0f 90       	pop	r0
   143ae:	0f 90       	pop	r0
   143b0:	02 c0       	rjmp	.+4      	; 0x143b6 <SS80_Command_State+0x476>
   143b2:	78 01       	movw	r14, r16
   143b4:	45 ce       	rjmp	.-886    	; 0x14040 <SS80_Command_State+0x100>
   143b6:	0c 15       	cp	r16, r12
   143b8:	1d 05       	cpc	r17, r13
   143ba:	a1 f0       	breq	.+40     	; 0x143e4 <SS80_Command_State+0x4a4>
   143bc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   143c0:	80 ff       	sbrs	r24, 0
   143c2:	10 c0       	rjmp	.+32     	; 0x143e4 <SS80_Command_State+0x4a4>
   143c4:	df 92       	push	r13
   143c6:	cf 92       	push	r12
   143c8:	1f 93       	push	r17
   143ca:	0f 93       	push	r16
   143cc:	8f ee       	ldi	r24, 0xEF	; 239
   143ce:	9a e1       	ldi	r25, 0x1A	; 26
   143d0:	1f 92       	push	r1
   143d2:	9f 93       	push	r25
   143d4:	8f 93       	push	r24
   143d6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   143da:	0f b6       	in	r0, 0x3f	; 63
   143dc:	f8 94       	cli
   143de:	de bf       	out	0x3e, r29	; 62
   143e0:	0f be       	out	0x3f, r0	; 63
   143e2:	cd bf       	out	0x3d, r28	; 61
   143e4:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   143e8:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   143ec:	81 81       	ldd	r24, Z+1	; 0x01
   143ee:	90 e0       	ldi	r25, 0x00	; 0
   143f0:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   143f4:	89 81       	ldd	r24, Y+1	; 0x01
   143f6:	9a 81       	ldd	r25, Y+2	; 0x02
   143f8:	88 27       	eor	r24, r24
   143fa:	90 7d       	andi	r25, 0xD0	; 208
   143fc:	02 c0       	rjmp	.+4      	; 0x14402 <SS80_Command_State+0x4c2>
   143fe:	80 e0       	ldi	r24, 0x00	; 0
   14400:	90 e0       	ldi	r25, 0x00	; 0
   14402:	60 96       	adiw	r28, 0x10	; 16
   14404:	0f b6       	in	r0, 0x3f	; 63
   14406:	f8 94       	cli
   14408:	de bf       	out	0x3e, r29	; 62
   1440a:	0f be       	out	0x3f, r0	; 63
   1440c:	cd bf       	out	0x3d, r28	; 61
   1440e:	df 91       	pop	r29
   14410:	cf 91       	pop	r28
   14412:	1f 91       	pop	r17
   14414:	0f 91       	pop	r16
   14416:	ff 90       	pop	r15
   14418:	ef 90       	pop	r14
   1441a:	df 90       	pop	r13
   1441c:	cf 90       	pop	r12
   1441e:	bf 90       	pop	r11
   14420:	af 90       	pop	r10
   14422:	8f 90       	pop	r8
   14424:	7f 90       	pop	r7
   14426:	6f 90       	pop	r6
   14428:	4f 90       	pop	r4
   1442a:	3f 90       	pop	r3
   1442c:	2f 90       	pop	r2
   1442e:	08 95       	ret

00014430 <SS80_cmd_seek>:
   14430:	a0 e0       	ldi	r26, 0x00	; 0
   14432:	b0 e0       	ldi	r27, 0x00	; 0
   14434:	ee e1       	ldi	r30, 0x1E	; 30
   14436:	f2 ea       	ldi	r31, 0xA2	; 162
   14438:	0c 94 07 ed 	jmp	0x1da0e	; 0x1da0e <__prologue_saves__+0x4>
   1443c:	c0 91 ca 19 	lds	r28, 0x19CA	; 0x8019ca <SS80s>
   14440:	d0 91 cb 19 	lds	r29, 0x19CB	; 0x8019cb <SS80s+0x1>
   14444:	8f 80       	ldd	r8, Y+7	; 0x07
   14446:	98 84       	ldd	r9, Y+8	; 0x08
   14448:	a9 84       	ldd	r10, Y+9	; 0x09
   1444a:	ba 84       	ldd	r11, Y+10	; 0x0a
   1444c:	00 91 cc 19 	lds	r16, 0x19CC	; 0x8019cc <SS80p>
   14450:	10 91 cd 19 	lds	r17, 0x19CD	; 0x8019cd <SS80p+0x1>
   14454:	f8 01       	movw	r30, r16
   14456:	c7 a4       	ldd	r12, Z+47	; 0x2f
   14458:	d0 a8       	ldd	r13, Z+48	; 0x30
   1445a:	e1 2c       	mov	r14, r1
   1445c:	f1 2c       	mov	r15, r1
   1445e:	6b 85       	ldd	r22, Y+11	; 0x0b
   14460:	7c 85       	ldd	r23, Y+12	; 0x0c
   14462:	8d 85       	ldd	r24, Y+13	; 0x0d
   14464:	9e 85       	ldd	r25, Y+14	; 0x0e
   14466:	a7 01       	movw	r20, r14
   14468:	96 01       	movw	r18, r12
   1446a:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
   1446e:	da 01       	movw	r26, r20
   14470:	c9 01       	movw	r24, r18
   14472:	88 0d       	add	r24, r8
   14474:	99 1d       	adc	r25, r9
   14476:	aa 1d       	adc	r26, r10
   14478:	bb 1d       	adc	r27, r11
   1447a:	f8 01       	movw	r30, r16
   1447c:	eb 5b       	subi	r30, 0xBB	; 187
   1447e:	ff 4f       	sbci	r31, 0xFF	; 255
   14480:	40 80       	ld	r4, Z
   14482:	51 80       	ldd	r5, Z+1	; 0x01
   14484:	62 80       	ldd	r6, Z+2	; 0x02
   14486:	73 80       	ldd	r7, Z+3	; 0x03
   14488:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1448c:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   14490:	48 16       	cp	r4, r24
   14492:	59 06       	cpc	r5, r25
   14494:	6a 06       	cpc	r6, r26
   14496:	7b 06       	cpc	r7, r27
   14498:	20 f5       	brcc	.+72     	; 0x144e2 <SS80_cmd_seek+0xb2>
   1449a:	81 e0       	ldi	r24, 0x01	; 1
   1449c:	8a 83       	std	Y+2, r24	; 0x02
   1449e:	8b 81       	ldd	r24, Y+3	; 0x03
   144a0:	9c 81       	ldd	r25, Y+4	; 0x04
   144a2:	84 60       	ori	r24, 0x04	; 4
   144a4:	9c 83       	std	Y+4, r25	; 0x04
   144a6:	8b 83       	std	Y+3, r24	; 0x03
   144a8:	40 ff       	sbrs	r20, 0
   144aa:	3c c0       	rjmp	.+120    	; 0x14524 <SS80_cmd_seek+0xf4>
   144ac:	f8 01       	movw	r30, r16
   144ae:	a7 a5       	ldd	r26, Z+47	; 0x2f
   144b0:	b0 a9       	ldd	r27, Z+48	; 0x30
   144b2:	a5 01       	movw	r20, r10
   144b4:	94 01       	movw	r18, r8
   144b6:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
   144ba:	9f 93       	push	r25
   144bc:	8f 93       	push	r24
   144be:	7f 93       	push	r23
   144c0:	6f 93       	push	r22
   144c2:	8c ea       	ldi	r24, 0xAC	; 172
   144c4:	99 e1       	ldi	r25, 0x19	; 25
   144c6:	1f 92       	push	r1
   144c8:	9f 93       	push	r25
   144ca:	8f 93       	push	r24
   144cc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   144d0:	8d b7       	in	r24, 0x3d	; 61
   144d2:	9e b7       	in	r25, 0x3e	; 62
   144d4:	07 96       	adiw	r24, 0x07	; 7
   144d6:	0f b6       	in	r0, 0x3f	; 63
   144d8:	f8 94       	cli
   144da:	9e bf       	out	0x3e, r25	; 62
   144dc:	0f be       	out	0x3f, r0	; 63
   144de:	8d bf       	out	0x3d, r24	; 61
   144e0:	21 c0       	rjmp	.+66     	; 0x14524 <SS80_cmd_seek+0xf4>
   144e2:	ca 01       	movw	r24, r20
   144e4:	80 72       	andi	r24, 0x20	; 32
   144e6:	99 27       	eor	r25, r25
   144e8:	45 ff       	sbrs	r20, 5
   144ea:	1e c0       	rjmp	.+60     	; 0x14528 <SS80_cmd_seek+0xf8>
   144ec:	a5 01       	movw	r20, r10
   144ee:	94 01       	movw	r18, r8
   144f0:	c7 01       	movw	r24, r14
   144f2:	b6 01       	movw	r22, r12
   144f4:	0e 94 41 ec 	call	0x1d882	; 0x1d882 <__mulsi3>
   144f8:	9f 93       	push	r25
   144fa:	8f 93       	push	r24
   144fc:	7f 93       	push	r23
   144fe:	6f 93       	push	r22
   14500:	88 e9       	ldi	r24, 0x98	; 152
   14502:	99 e1       	ldi	r25, 0x19	; 25
   14504:	1f 92       	push	r1
   14506:	9f 93       	push	r25
   14508:	8f 93       	push	r24
   1450a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1450e:	ed b7       	in	r30, 0x3d	; 61
   14510:	fe b7       	in	r31, 0x3e	; 62
   14512:	37 96       	adiw	r30, 0x07	; 7
   14514:	0f b6       	in	r0, 0x3f	; 63
   14516:	f8 94       	cli
   14518:	fe bf       	out	0x3e, r31	; 62
   1451a:	0f be       	out	0x3f, r0	; 63
   1451c:	ed bf       	out	0x3d, r30	; 61
   1451e:	80 e0       	ldi	r24, 0x00	; 0
   14520:	90 e0       	ldi	r25, 0x00	; 0
   14522:	02 c0       	rjmp	.+4      	; 0x14528 <SS80_cmd_seek+0xf8>
   14524:	81 e0       	ldi	r24, 0x01	; 1
   14526:	90 e0       	ldi	r25, 0x00	; 0
   14528:	cd b7       	in	r28, 0x3d	; 61
   1452a:	de b7       	in	r29, 0x3e	; 62
   1452c:	e0 e1       	ldi	r30, 0x10	; 16
   1452e:	0c 94 23 ed 	jmp	0x1da46	; 0x1da46 <__epilogue_restores__+0x4>

00014532 <SS80_locate_and_write>:
   14532:	a8 e0       	ldi	r26, 0x08	; 8
   14534:	b0 e0       	ldi	r27, 0x00	; 0
   14536:	ef e9       	ldi	r30, 0x9F	; 159
   14538:	f2 ea       	ldi	r31, 0xA2	; 162
   1453a:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1453e:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14542:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14546:	a0 91 cc 19 	lds	r26, 0x19CC	; 0x8019cc <SS80p>
   1454a:	b0 91 cd 19 	lds	r27, 0x19CD	; 0x8019cd <SS80p+0x1>
   1454e:	9f 96       	adiw	r26, 0x2f	; 47
   14550:	0d 90       	ld	r0, X+
   14552:	bc 91       	ld	r27, X
   14554:	a0 2d       	mov	r26, r0
   14556:	27 81       	ldd	r18, Z+7	; 0x07
   14558:	30 85       	ldd	r19, Z+8	; 0x08
   1455a:	41 85       	ldd	r20, Z+9	; 0x09
   1455c:	52 85       	ldd	r21, Z+10	; 0x0a
   1455e:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
   14562:	4b 01       	movw	r8, r22
   14564:	5c 01       	movw	r10, r24
   14566:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1456a:	85 ff       	sbrs	r24, 5
   1456c:	18 c0       	rjmp	.+48     	; 0x1459e <SS80_locate_and_write+0x6c>
   1456e:	86 85       	ldd	r24, Z+14	; 0x0e
   14570:	8f 93       	push	r24
   14572:	85 85       	ldd	r24, Z+13	; 0x0d
   14574:	8f 93       	push	r24
   14576:	84 85       	ldd	r24, Z+12	; 0x0c
   14578:	8f 93       	push	r24
   1457a:	83 85       	ldd	r24, Z+11	; 0x0b
   1457c:	8f 93       	push	r24
   1457e:	bf 92       	push	r11
   14580:	af 92       	push	r10
   14582:	9f 92       	push	r9
   14584:	8f 92       	push	r8
   14586:	8d e2       	ldi	r24, 0x2D	; 45
   14588:	9f e1       	ldi	r25, 0x1F	; 31
   1458a:	1f 92       	push	r1
   1458c:	9f 93       	push	r25
   1458e:	8f 93       	push	r24
   14590:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14594:	0f b6       	in	r0, 0x3f	; 63
   14596:	f8 94       	cli
   14598:	de bf       	out	0x3e, r29	; 62
   1459a:	0f be       	out	0x3f, r0	; 63
   1459c:	cd bf       	out	0x3d, r28	; 61
   1459e:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   145a2:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   145a6:	12 82       	std	Z+2, r1	; 0x02
   145a8:	54 98       	cbi	0x0a, 4	; 10
   145aa:	4c 99       	sbic	0x09, 4	; 9
   145ac:	03 c0       	rjmp	.+6      	; 0x145b4 <SS80_locate_and_write+0x82>
   145ae:	80 e0       	ldi	r24, 0x00	; 0
   145b0:	90 e1       	ldi	r25, 0x10	; 16
   145b2:	52 c1       	rjmp	.+676    	; 0x14858 <SS80_locate_and_write+0x326>
   145b4:	3d df       	rcall	.-390    	; 0x14430 <SS80_cmd_seek>
   145b6:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   145ba:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   145be:	89 2b       	or	r24, r25
   145c0:	41 f0       	breq	.+16     	; 0x145d2 <SS80_locate_and_write+0xa0>
   145c2:	83 81       	ldd	r24, Z+3	; 0x03
   145c4:	94 81       	ldd	r25, Z+4	; 0x04
   145c6:	82 60       	ori	r24, 0x02	; 2
   145c8:	94 83       	std	Z+4, r25	; 0x04
   145ca:	83 83       	std	Z+3, r24	; 0x03
   145cc:	01 e0       	ldi	r16, 0x01	; 1
   145ce:	10 e0       	ldi	r17, 0x00	; 0
   145d0:	02 c0       	rjmp	.+4      	; 0x145d6 <SS80_locate_and_write+0xa4>
   145d2:	00 e0       	ldi	r16, 0x00	; 0
   145d4:	10 e0       	ldi	r17, 0x00	; 0
   145d6:	23 84       	ldd	r2, Z+11	; 0x0b
   145d8:	34 84       	ldd	r3, Z+12	; 0x0c
   145da:	1a 82       	std	Y+2, r1	; 0x02
   145dc:	19 82       	std	Y+1, r1	; 0x01
   145de:	41 2c       	mov	r4, r1
   145e0:	51 2c       	mov	r5, r1
   145e2:	32 01       	movw	r6, r4
   145e4:	80 ee       	ldi	r24, 0xE0	; 224
   145e6:	9e e1       	ldi	r25, 0x1E	; 30
   145e8:	9c 01       	movw	r18, r24
   145ea:	40 e0       	ldi	r20, 0x00	; 0
   145ec:	2b 83       	std	Y+3, r18	; 0x03
   145ee:	3c 83       	std	Y+4, r19	; 0x04
   145f0:	4d 83       	std	Y+5, r20	; 0x05
   145f2:	86 e0       	ldi	r24, 0x06	; 6
   145f4:	9f e1       	ldi	r25, 0x1F	; 31
   145f6:	9c 01       	movw	r18, r24
   145f8:	40 e0       	ldi	r20, 0x00	; 0
   145fa:	2e 83       	std	Y+6, r18	; 0x06
   145fc:	3f 83       	std	Y+7, r19	; 0x07
   145fe:	48 87       	std	Y+8, r20	; 0x08
   14600:	12 14       	cp	r1, r2
   14602:	13 04       	cpc	r1, r3
   14604:	0c f0       	brlt	.+2      	; 0x14608 <SS80_locate_and_write+0xd6>
   14606:	f6 c0       	rjmp	.+492    	; 0x147f4 <SS80_locate_and_write+0x2c2>
   14608:	54 98       	cbi	0x0a, 4	; 10
   1460a:	4c 9b       	sbis	0x09, 4	; 9
   1460c:	d0 cf       	rjmp	.-96     	; 0x145ae <SS80_locate_and_write+0x7c>
   1460e:	71 01       	movw	r14, r2
   14610:	31 e0       	ldi	r19, 0x01	; 1
   14612:	23 16       	cp	r2, r19
   14614:	33 06       	cpc	r3, r19
   14616:	1c f0       	brlt	.+6      	; 0x1461e <SS80_locate_and_write+0xec>
   14618:	e1 2c       	mov	r14, r1
   1461a:	ff 24       	eor	r15, r15
   1461c:	f3 94       	inc	r15
   1461e:	e5 e1       	ldi	r30, 0x15	; 21
   14620:	fd e1       	ldi	r31, 0x1D	; 29
   14622:	20 e0       	ldi	r18, 0x00	; 0
   14624:	32 e0       	ldi	r19, 0x02	; 2
   14626:	11 92       	st	Z+, r1
   14628:	21 50       	subi	r18, 0x01	; 1
   1462a:	30 40       	sbci	r19, 0x00	; 0
   1462c:	e1 f7       	brne	.-8      	; 0x14626 <SS80_locate_and_write+0xf4>
   1462e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14632:	87 fd       	sbrc	r24, 7
   14634:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   14638:	ae 01       	movw	r20, r28
   1463a:	4f 5f       	subi	r20, 0xFF	; 255
   1463c:	5f 4f       	sbci	r21, 0xFF	; 255
   1463e:	b7 01       	movw	r22, r14
   14640:	85 e1       	ldi	r24, 0x15	; 21
   14642:	9d e1       	ldi	r25, 0x1D	; 29
   14644:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
   14648:	6c 01       	movw	r12, r24
   1464a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1464e:	87 ff       	sbrs	r24, 7
   14650:	04 c0       	rjmp	.+8      	; 0x1465a <SS80_locate_and_write+0x128>
   14652:	85 ef       	ldi	r24, 0xF5	; 245
   14654:	9d e0       	ldi	r25, 0x0D	; 13
   14656:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   1465a:	ce 14       	cp	r12, r14
   1465c:	df 04       	cpc	r13, r15
   1465e:	39 f1       	breq	.+78     	; 0x146ae <SS80_locate_and_write+0x17c>
   14660:	89 81       	ldd	r24, Y+1	; 0x01
   14662:	9a 81       	ldd	r25, Y+2	; 0x02
   14664:	9c 01       	movw	r18, r24
   14666:	22 27       	eor	r18, r18
   14668:	30 7d       	andi	r19, 0xD0	; 208
   1466a:	23 2b       	or	r18, r19
   1466c:	d1 f0       	breq	.+52     	; 0x146a2 <SS80_locate_and_write+0x170>
   1466e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14672:	80 ff       	sbrs	r24, 0
   14674:	0a c0       	rjmp	.+20     	; 0x1468a <SS80_locate_and_write+0x158>
   14676:	8a e1       	ldi	r24, 0x1A	; 26
   14678:	9f e1       	ldi	r25, 0x1F	; 31
   1467a:	1f 92       	push	r1
   1467c:	9f 93       	push	r25
   1467e:	8f 93       	push	r24
   14680:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14684:	0f 90       	pop	r0
   14686:	0f 90       	pop	r0
   14688:	0f 90       	pop	r0
   1468a:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   1468e:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14692:	83 81       	ldd	r24, Z+3	; 0x03
   14694:	94 81       	ldd	r25, Z+4	; 0x04
   14696:	82 60       	ori	r24, 0x02	; 2
   14698:	94 83       	std	Z+4, r25	; 0x04
   1469a:	83 83       	std	Z+3, r24	; 0x03
   1469c:	81 e0       	ldi	r24, 0x01	; 1
   1469e:	82 83       	std	Z+2, r24	; 0x02
   146a0:	9a c0       	rjmp	.+308    	; 0x147d6 <SS80_locate_and_write+0x2a4>
   146a2:	c1 14       	cp	r12, r1
   146a4:	d1 04       	cpc	r13, r1
   146a6:	09 f0       	breq	.+2      	; 0x146aa <SS80_locate_and_write+0x178>
   146a8:	d3 c0       	rjmp	.+422    	; 0x14850 <SS80_locate_and_write+0x31e>
   146aa:	90 fd       	sbrc	r25, 0
   146ac:	94 c0       	rjmp	.+296    	; 0x147d6 <SS80_locate_and_write+0x2a4>
   146ae:	01 15       	cp	r16, r1
   146b0:	11 05       	cpc	r17, r1
   146b2:	09 f0       	breq	.+2      	; 0x146b6 <SS80_locate_and_write+0x184>
   146b4:	85 c0       	rjmp	.+266    	; 0x147c0 <SS80_locate_and_write+0x28e>
   146b6:	c1 14       	cp	r12, r1
   146b8:	d1 04       	cpc	r13, r1
   146ba:	09 f4       	brne	.+2      	; 0x146be <SS80_locate_and_write+0x18c>
   146bc:	83 c0       	rjmp	.+262    	; 0x147c4 <SS80_locate_and_write+0x292>
   146be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   146c2:	86 fd       	sbrc	r24, 6
   146c4:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   146c8:	e0 90 ca 19 	lds	r14, 0x19CA	; 0x8019ca <SS80s>
   146cc:	f0 90 cb 19 	lds	r15, 0x19CB	; 0x8019cb <SS80s+0x1>
   146d0:	33 e0       	ldi	r19, 0x03	; 3
   146d2:	e3 0e       	add	r14, r19
   146d4:	f1 1c       	adc	r15, r1
   146d6:	80 91 cc 19 	lds	r24, 0x19CC	; 0x8019cc <SS80p>
   146da:	90 91 cd 19 	lds	r25, 0x19CD	; 0x8019cd <SS80p+0x1>
   146de:	86 01       	movw	r16, r12
   146e0:	25 e1       	ldi	r18, 0x15	; 21
   146e2:	3d e1       	ldi	r19, 0x1D	; 29
   146e4:	b5 01       	movw	r22, r10
   146e6:	a4 01       	movw	r20, r8
   146e8:	02 96       	adiw	r24, 0x02	; 2
   146ea:	0e 94 3e 8d 	call	0x11a7c	; 0x11a7c <dbf_open_write>
   146ee:	7c 01       	movw	r14, r24
   146f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   146f4:	86 ff       	sbrs	r24, 6
   146f6:	04 c0       	rjmp	.+8      	; 0x14700 <SS80_locate_and_write+0x1ce>
   146f8:	8f ef       	ldi	r24, 0xFF	; 255
   146fa:	9d e0       	ldi	r25, 0x0D	; 13
   146fc:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   14700:	ce 14       	cp	r12, r14
   14702:	df 04       	cpc	r13, r15
   14704:	39 f1       	breq	.+78     	; 0x14754 <SS80_locate_and_write+0x222>
   14706:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   1470a:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   1470e:	83 81       	ldd	r24, Z+3	; 0x03
   14710:	94 81       	ldd	r25, Z+4	; 0x04
   14712:	82 60       	ori	r24, 0x02	; 2
   14714:	94 83       	std	Z+4, r25	; 0x04
   14716:	83 83       	std	Z+3, r24	; 0x03
   14718:	0e 94 f3 74 	call	0xe9e6	; 0xe9e6 <mmc_wp_status>
   1471c:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14720:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14724:	89 2b       	or	r24, r25
   14726:	29 f0       	breq	.+10     	; 0x14732 <SS80_locate_and_write+0x200>
   14728:	83 81       	ldd	r24, Z+3	; 0x03
   1472a:	94 81       	ldd	r25, Z+4	; 0x04
   1472c:	88 60       	ori	r24, 0x08	; 8
   1472e:	94 83       	std	Z+4, r25	; 0x04
   14730:	83 83       	std	Z+3, r24	; 0x03
   14732:	41 e0       	ldi	r20, 0x01	; 1
   14734:	42 83       	std	Z+2, r20	; 0x02
   14736:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1473a:	80 ff       	sbrs	r24, 0
   1473c:	29 c0       	rjmp	.+82     	; 0x14790 <SS80_locate_and_write+0x25e>
   1473e:	1f 92       	push	r1
   14740:	8f 81       	ldd	r24, Y+7	; 0x07
   14742:	8f 93       	push	r24
   14744:	9e 81       	ldd	r25, Y+6	; 0x06
   14746:	9f 93       	push	r25
   14748:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1474c:	0f 90       	pop	r0
   1474e:	0f 90       	pop	r0
   14750:	0f 90       	pop	r0
   14752:	1e c0       	rjmp	.+60     	; 0x14790 <SS80_locate_and_write+0x25e>
   14754:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14758:	85 ff       	sbrs	r24, 5
   1475a:	0e c0       	rjmp	.+28     	; 0x14778 <SS80_locate_and_write+0x246>
   1475c:	df 92       	push	r13
   1475e:	cf 92       	push	r12
   14760:	1f 92       	push	r1
   14762:	ec 81       	ldd	r30, Y+4	; 0x04
   14764:	ef 93       	push	r30
   14766:	fb 81       	ldd	r31, Y+3	; 0x03
   14768:	ff 93       	push	r31
   1476a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1476e:	0f 90       	pop	r0
   14770:	0f 90       	pop	r0
   14772:	0f 90       	pop	r0
   14774:	0f 90       	pop	r0
   14776:	0f 90       	pop	r0
   14778:	c6 01       	movw	r24, r12
   1477a:	0d 2c       	mov	r0, r13
   1477c:	00 0c       	add	r0, r0
   1477e:	aa 0b       	sbc	r26, r26
   14780:	bb 0b       	sbc	r27, r27
   14782:	88 0e       	add	r8, r24
   14784:	99 1e       	adc	r9, r25
   14786:	aa 1e       	adc	r10, r26
   14788:	bb 1e       	adc	r11, r27
   1478a:	00 e0       	ldi	r16, 0x00	; 0
   1478c:	10 e0       	ldi	r17, 0x00	; 0
   1478e:	05 c0       	rjmp	.+10     	; 0x1479a <SS80_locate_and_write+0x268>
   14790:	ec 14       	cp	r14, r12
   14792:	fd 04       	cpc	r15, r13
   14794:	64 f0       	brlt	.+24     	; 0x147ae <SS80_locate_and_write+0x27c>
   14796:	01 e0       	ldi	r16, 0x01	; 1
   14798:	10 e0       	ldi	r17, 0x00	; 0
   1479a:	c7 01       	movw	r24, r14
   1479c:	0f 2c       	mov	r0, r15
   1479e:	00 0c       	add	r0, r0
   147a0:	aa 0b       	sbc	r26, r26
   147a2:	bb 0b       	sbc	r27, r27
   147a4:	48 0e       	add	r4, r24
   147a6:	59 1e       	adc	r5, r25
   147a8:	6a 1e       	adc	r6, r26
   147aa:	7b 1e       	adc	r7, r27
   147ac:	0b c0       	rjmp	.+22     	; 0x147c4 <SS80_locate_and_write+0x292>
   147ae:	c6 01       	movw	r24, r12
   147b0:	0d 2c       	mov	r0, r13
   147b2:	00 0c       	add	r0, r0
   147b4:	aa 0b       	sbc	r26, r26
   147b6:	bb 0b       	sbc	r27, r27
   147b8:	48 0e       	add	r4, r24
   147ba:	59 1e       	adc	r5, r25
   147bc:	6a 1e       	adc	r6, r26
   147be:	7b 1e       	adc	r7, r27
   147c0:	01 e0       	ldi	r16, 0x01	; 1
   147c2:	10 e0       	ldi	r17, 0x00	; 0
   147c4:	2c 18       	sub	r2, r12
   147c6:	3d 08       	sbc	r3, r13
   147c8:	89 81       	ldd	r24, Y+1	; 0x01
   147ca:	9a 81       	ldd	r25, Y+2	; 0x02
   147cc:	90 ff       	sbrs	r25, 0
   147ce:	18 cf       	rjmp	.-464    	; 0x14600 <SS80_locate_and_write+0xce>
   147d0:	12 14       	cp	r1, r2
   147d2:	13 04       	cpc	r1, r3
   147d4:	7c f4       	brge	.+30     	; 0x147f4 <SS80_locate_and_write+0x2c2>
   147d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   147da:	80 ff       	sbrs	r24, 0
   147dc:	1f c0       	rjmp	.+62     	; 0x1481c <SS80_locate_and_write+0x2ea>
   147de:	88 eb       	ldi	r24, 0xB8	; 184
   147e0:	9e e1       	ldi	r25, 0x1E	; 30
   147e2:	1f 92       	push	r1
   147e4:	9f 93       	push	r25
   147e6:	8f 93       	push	r24
   147e8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   147ec:	0f 90       	pop	r0
   147ee:	0f 90       	pop	r0
   147f0:	0f 90       	pop	r0
   147f2:	14 c0       	rjmp	.+40     	; 0x1481c <SS80_locate_and_write+0x2ea>
   147f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   147f8:	85 ff       	sbrs	r24, 5
   147fa:	10 c0       	rjmp	.+32     	; 0x1481c <SS80_locate_and_write+0x2ea>
   147fc:	7f 92       	push	r7
   147fe:	6f 92       	push	r6
   14800:	5f 92       	push	r5
   14802:	4f 92       	push	r4
   14804:	8d e8       	ldi	r24, 0x8D	; 141
   14806:	9e e1       	ldi	r25, 0x1E	; 30
   14808:	1f 92       	push	r1
   1480a:	9f 93       	push	r25
   1480c:	8f 93       	push	r24
   1480e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14812:	0f b6       	in	r0, 0x3f	; 63
   14814:	f8 94       	cli
   14816:	de bf       	out	0x3e, r29	; 62
   14818:	0f be       	out	0x3f, r0	; 63
   1481a:	cd bf       	out	0x3d, r28	; 61
   1481c:	00 91 ca 19 	lds	r16, 0x19CA	; 0x8019ca <SS80s>
   14820:	10 91 cb 19 	lds	r17, 0x19CB	; 0x8019cb <SS80s+0x1>
   14824:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   14828:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   1482c:	27 a5       	ldd	r18, Z+47	; 0x2f
   1482e:	30 a9       	ldd	r19, Z+48	; 0x30
   14830:	40 e0       	ldi	r20, 0x00	; 0
   14832:	50 e0       	ldi	r21, 0x00	; 0
   14834:	c5 01       	movw	r24, r10
   14836:	b4 01       	movw	r22, r8
   14838:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
   1483c:	f8 01       	movw	r30, r16
   1483e:	27 83       	std	Z+7, r18	; 0x07
   14840:	30 87       	std	Z+8, r19	; 0x08
   14842:	41 87       	std	Z+9, r20	; 0x09
   14844:	52 87       	std	Z+10, r21	; 0x0a
   14846:	89 81       	ldd	r24, Y+1	; 0x01
   14848:	9a 81       	ldd	r25, Y+2	; 0x02
   1484a:	88 27       	eor	r24, r24
   1484c:	90 7d       	andi	r25, 0xD0	; 208
   1484e:	04 c0       	rjmp	.+8      	; 0x14858 <SS80_locate_and_write+0x326>
   14850:	01 2b       	or	r16, r17
   14852:	09 f4       	brne	.+2      	; 0x14856 <SS80_locate_and_write+0x324>
   14854:	34 cf       	rjmp	.-408    	; 0x146be <SS80_locate_and_write+0x18c>
   14856:	b4 cf       	rjmp	.-152    	; 0x147c0 <SS80_locate_and_write+0x28e>
   14858:	28 96       	adiw	r28, 0x08	; 8
   1485a:	e2 e1       	ldi	r30, 0x12	; 18
   1485c:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

00014860 <SS80_Report>:
   14860:	a3 e0       	ldi	r26, 0x03	; 3
   14862:	b0 e0       	ldi	r27, 0x00	; 0
   14864:	e6 e3       	ldi	r30, 0x36	; 54
   14866:	f4 ea       	ldi	r31, 0xA4	; 164
   14868:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   1486c:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14870:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14874:	82 81       	ldd	r24, Z+2	; 0x02
   14876:	8b 83       	std	Y+3, r24	; 0x03
   14878:	80 e0       	ldi	r24, 0x00	; 0
   1487a:	91 e0       	ldi	r25, 0x01	; 1
   1487c:	9a 83       	std	Y+2, r25	; 0x02
   1487e:	89 83       	std	Y+1, r24	; 0x01
   14880:	ae 01       	movw	r20, r28
   14882:	4f 5f       	subi	r20, 0xFF	; 255
   14884:	5f 4f       	sbci	r21, 0xFF	; 255
   14886:	61 e0       	ldi	r22, 0x01	; 1
   14888:	70 e0       	ldi	r23, 0x00	; 0
   1488a:	ce 01       	movw	r24, r28
   1488c:	03 96       	adiw	r24, 0x03	; 3
   1488e:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   14892:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   14896:	01 97       	sbiw	r24, 0x01	; 1
   14898:	89 f0       	breq	.+34     	; 0x148bc <SS80_Report+0x5c>
   1489a:	20 ff       	sbrs	r18, 0
   1489c:	0a c0       	rjmp	.+20     	; 0x148b2 <SS80_Report+0x52>
   1489e:	8e e7       	ldi	r24, 0x7E	; 126
   148a0:	99 e1       	ldi	r25, 0x19	; 25
   148a2:	1f 92       	push	r1
   148a4:	9f 93       	push	r25
   148a6:	8f 93       	push	r24
   148a8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   148ac:	0f 90       	pop	r0
   148ae:	0f 90       	pop	r0
   148b0:	0f 90       	pop	r0
   148b2:	89 81       	ldd	r24, Y+1	; 0x01
   148b4:	9a 81       	ldd	r25, Y+2	; 0x02
   148b6:	88 27       	eor	r24, r24
   148b8:	90 7d       	andi	r25, 0xD0	; 208
   148ba:	1c c0       	rjmp	.+56     	; 0x148f4 <SS80_Report+0x94>
   148bc:	25 ff       	sbrs	r18, 5
   148be:	13 c0       	rjmp	.+38     	; 0x148e6 <SS80_Report+0x86>
   148c0:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   148c4:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   148c8:	82 81       	ldd	r24, Z+2	; 0x02
   148ca:	1f 92       	push	r1
   148cc:	8f 93       	push	r24
   148ce:	8b e6       	ldi	r24, 0x6B	; 107
   148d0:	99 e1       	ldi	r25, 0x19	; 25
   148d2:	1f 92       	push	r1
   148d4:	9f 93       	push	r25
   148d6:	8f 93       	push	r24
   148d8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   148dc:	0f 90       	pop	r0
   148de:	0f 90       	pop	r0
   148e0:	0f 90       	pop	r0
   148e2:	0f 90       	pop	r0
   148e4:	0f 90       	pop	r0
   148e6:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   148ea:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   148ee:	12 82       	std	Z+2, r1	; 0x02
   148f0:	80 e0       	ldi	r24, 0x00	; 0
   148f2:	90 e0       	ldi	r25, 0x00	; 0
   148f4:	23 96       	adiw	r28, 0x03	; 3
   148f6:	e2 e0       	ldi	r30, 0x02	; 2
   148f8:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

000148fc <Clear_Common>:
   148fc:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14900:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14904:	25 81       	ldd	r18, Z+5	; 0x05
   14906:	30 e0       	ldi	r19, 0x00	; 0
   14908:	28 17       	cp	r18, r24
   1490a:	39 07       	cpc	r19, r25
   1490c:	19 f0       	breq	.+6      	; 0x14914 <Clear_Common+0x18>
   1490e:	0f 97       	sbiw	r24, 0x0f	; 15
   14910:	99 f4       	brne	.+38     	; 0x14938 <Clear_Common+0x3c>
   14912:	03 c0       	rjmp	.+6      	; 0x1491a <Clear_Common+0x1e>
   14914:	2f 30       	cpi	r18, 0x0F	; 15
   14916:	31 05       	cpc	r19, r1
   14918:	09 f4       	brne	.+2      	; 0x1491c <Clear_Common+0x20>
   1491a:	15 82       	std	Z+5, r1	; 0x05
   1491c:	16 82       	std	Z+6, r1	; 0x06
   1491e:	17 82       	std	Z+7, r1	; 0x07
   14920:	10 86       	std	Z+8, r1	; 0x08
   14922:	11 86       	std	Z+9, r1	; 0x09
   14924:	12 86       	std	Z+10, r1	; 0x0a
   14926:	13 86       	std	Z+11, r1	; 0x0b
   14928:	14 86       	std	Z+12, r1	; 0x0c
   1492a:	15 86       	std	Z+13, r1	; 0x0d
   1492c:	16 86       	std	Z+14, r1	; 0x0e
   1492e:	11 82       	std	Z+1, r1	; 0x01
   14930:	10 82       	st	Z, r1
   14932:	14 82       	std	Z+4, r1	; 0x04
   14934:	13 82       	std	Z+3, r1	; 0x03
   14936:	12 82       	std	Z+2, r1	; 0x02
   14938:	08 95       	ret

0001493a <SS80_init>:
   1493a:	a0 e0       	ldi	r26, 0x00	; 0
   1493c:	b0 e0       	ldi	r27, 0x00	; 0
   1493e:	e3 ea       	ldi	r30, 0xA3	; 163
   14940:	f4 ea       	ldi	r31, 0xA4	; 164
   14942:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   14946:	0c e6       	ldi	r16, 0x6C	; 108
   14948:	1f e1       	ldi	r17, 0x1F	; 31
   1494a:	cb e0       	ldi	r28, 0x0B	; 11
   1494c:	d0 e0       	ldi	r29, 0x00	; 0
   1494e:	82 e0       	ldi	r24, 0x02	; 2
   14950:	f8 2e       	mov	r15, r24
   14952:	86 e3       	ldi	r24, 0x36	; 54
   14954:	90 e2       	ldi	r25, 0x20	; 32
   14956:	6c 01       	movw	r12, r24
   14958:	e1 2c       	mov	r14, r1
   1495a:	f8 01       	movw	r30, r16
   1495c:	80 81       	ld	r24, Z
   1495e:	83 30       	cpi	r24, 0x03	; 3
   14960:	39 f5       	brne	.+78     	; 0x149b0 <SS80_init+0x76>
   14962:	ce 01       	movw	r24, r28
   14964:	0e 94 ff b7 	call	0x16ffe	; 0x16ffe <set_active_device>
   14968:	89 2b       	or	r24, r25
   1496a:	11 f1       	breq	.+68     	; 0x149b0 <SS80_init+0x76>
   1496c:	8f e0       	ldi	r24, 0x0F	; 15
   1496e:	90 e0       	ldi	r25, 0x00	; 0
   14970:	c5 df       	rcall	.-118    	; 0x148fc <Clear_Common>
   14972:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14976:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   1497a:	f2 82       	std	Z+2, r15	; 0x02
   1497c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14980:	85 ff       	sbrs	r24, 5
   14982:	0e c0       	rjmp	.+28     	; 0x149a0 <SS80_init+0x66>
   14984:	f8 01       	movw	r30, r16
   14986:	81 81       	ldd	r24, Z+1	; 0x01
   14988:	1f 92       	push	r1
   1498a:	8f 93       	push	r24
   1498c:	1f 92       	push	r1
   1498e:	df 92       	push	r13
   14990:	cf 92       	push	r12
   14992:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14996:	0f 90       	pop	r0
   14998:	0f 90       	pop	r0
   1499a:	0f 90       	pop	r0
   1499c:	0f 90       	pop	r0
   1499e:	0f 90       	pop	r0
   149a0:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   149a4:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   149a8:	81 81       	ldd	r24, Z+1	; 0x01
   149aa:	90 e0       	ldi	r25, 0x00	; 0
   149ac:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   149b0:	21 97       	sbiw	r28, 0x01	; 1
   149b2:	07 50       	subi	r16, 0x07	; 7
   149b4:	11 09       	sbc	r17, r1
   149b6:	cf 3f       	cpi	r28, 0xFF	; 255
   149b8:	ff ef       	ldi	r31, 0xFF	; 255
   149ba:	df 07       	cpc	r29, r31
   149bc:	71 f6       	brne	.-100    	; 0x1495a <SS80_init+0x20>
   149be:	cd b7       	in	r28, 0x3d	; 61
   149c0:	de b7       	in	r29, 0x3e	; 62
   149c2:	e8 e0       	ldi	r30, 0x08	; 8
   149c4:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

000149c8 <SS80_Channel_Independent_Clear>:
   149c8:	99 df       	rcall	.-206    	; 0x148fc <Clear_Common>
   149ca:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   149ce:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   149d2:	81 81       	ldd	r24, Z+1	; 0x01
   149d4:	90 e0       	ldi	r25, 0x00	; 0
   149d6:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   149da:	80 e0       	ldi	r24, 0x00	; 0
   149dc:	90 e0       	ldi	r25, 0x00	; 0
   149de:	08 95       	ret

000149e0 <SS80_Universal_Device_Clear>:
   149e0:	8f e0       	ldi	r24, 0x0F	; 15
   149e2:	90 e0       	ldi	r25, 0x00	; 0
   149e4:	8b df       	rcall	.-234    	; 0x148fc <Clear_Common>
   149e6:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   149ea:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   149ee:	81 81       	ldd	r24, Z+1	; 0x01
   149f0:	90 e0       	ldi	r25, 0x00	; 0
   149f2:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   149f6:	80 e0       	ldi	r24, 0x00	; 0
   149f8:	90 e0       	ldi	r25, 0x00	; 0
   149fa:	08 95       	ret

000149fc <SS80_Selected_Device_Clear>:
   149fc:	cf 93       	push	r28
   149fe:	df 93       	push	r29
   14a00:	ec 01       	movw	r28, r24
   14a02:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14a06:	85 ff       	sbrs	r24, 5
   14a08:	0a c0       	rjmp	.+20     	; 0x14a1e <SS80_Selected_Device_Clear+0x22>
   14a0a:	8f e5       	ldi	r24, 0x5F	; 95
   14a0c:	99 e1       	ldi	r25, 0x19	; 25
   14a0e:	1f 92       	push	r1
   14a10:	9f 93       	push	r25
   14a12:	8f 93       	push	r24
   14a14:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14a18:	0f 90       	pop	r0
   14a1a:	0f 90       	pop	r0
   14a1c:	0f 90       	pop	r0
   14a1e:	ce 01       	movw	r24, r28
   14a20:	6d df       	rcall	.-294    	; 0x148fc <Clear_Common>
   14a22:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   14a26:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   14a2a:	81 81       	ldd	r24, Z+1	; 0x01
   14a2c:	90 e0       	ldi	r25, 0x00	; 0
   14a2e:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   14a32:	80 e0       	ldi	r24, 0x00	; 0
   14a34:	90 e0       	ldi	r25, 0x00	; 0
   14a36:	df 91       	pop	r29
   14a38:	cf 91       	pop	r28
   14a3a:	08 95       	ret

00014a3c <SS80_Amigo_Clear>:
   14a3c:	a3 e0       	ldi	r26, 0x03	; 3
   14a3e:	b0 e0       	ldi	r27, 0x00	; 0
   14a40:	e4 e2       	ldi	r30, 0x24	; 36
   14a42:	f5 ea       	ldi	r31, 0xA5	; 165
   14a44:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   14a48:	1a 82       	std	Y+2, r1	; 0x02
   14a4a:	19 82       	std	Y+1, r1	; 0x01
   14a4c:	ae 01       	movw	r20, r28
   14a4e:	4f 5f       	subi	r20, 0xFF	; 255
   14a50:	5f 4f       	sbci	r21, 0xFF	; 255
   14a52:	61 e0       	ldi	r22, 0x01	; 1
   14a54:	70 e0       	ldi	r23, 0x00	; 0
   14a56:	ce 01       	movw	r24, r28
   14a58:	03 96       	adiw	r24, 0x03	; 3
   14a5a:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
   14a5e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   14a62:	01 97       	sbiw	r24, 0x01	; 1
   14a64:	89 f0       	breq	.+34     	; 0x14a88 <SS80_Amigo_Clear+0x4c>
   14a66:	20 ff       	sbrs	r18, 0
   14a68:	0a c0       	rjmp	.+20     	; 0x14a7e <SS80_Amigo_Clear+0x42>
   14a6a:	8c e4       	ldi	r24, 0x4C	; 76
   14a6c:	99 e1       	ldi	r25, 0x19	; 25
   14a6e:	1f 92       	push	r1
   14a70:	9f 93       	push	r25
   14a72:	8f 93       	push	r24
   14a74:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14a78:	0f 90       	pop	r0
   14a7a:	0f 90       	pop	r0
   14a7c:	0f 90       	pop	r0
   14a7e:	89 81       	ldd	r24, Y+1	; 0x01
   14a80:	9a 81       	ldd	r25, Y+2	; 0x02
   14a82:	88 27       	eor	r24, r24
   14a84:	90 7d       	andi	r25, 0xD0	; 208
   14a86:	19 c0       	rjmp	.+50     	; 0x14aba <SS80_Amigo_Clear+0x7e>
   14a88:	25 ff       	sbrs	r18, 5
   14a8a:	0a c0       	rjmp	.+20     	; 0x14aa0 <SS80_Amigo_Clear+0x64>
   14a8c:	8d e3       	ldi	r24, 0x3D	; 61
   14a8e:	99 e1       	ldi	r25, 0x19	; 25
   14a90:	1f 92       	push	r1
   14a92:	9f 93       	push	r25
   14a94:	8f 93       	push	r24
   14a96:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14a9a:	0f 90       	pop	r0
   14a9c:	0f 90       	pop	r0
   14a9e:	0f 90       	pop	r0
   14aa0:	8f e0       	ldi	r24, 0x0F	; 15
   14aa2:	90 e0       	ldi	r25, 0x00	; 0
   14aa4:	2b df       	rcall	.-426    	; 0x148fc <Clear_Common>
   14aa6:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   14aaa:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   14aae:	81 81       	ldd	r24, Z+1	; 0x01
   14ab0:	90 e0       	ldi	r25, 0x00	; 0
   14ab2:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   14ab6:	80 e0       	ldi	r24, 0x00	; 0
   14ab8:	90 e0       	ldi	r25, 0x00	; 0
   14aba:	23 96       	adiw	r28, 0x03	; 3
   14abc:	e2 e0       	ldi	r30, 0x02	; 2
   14abe:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00014ac2 <SS80_Cancel>:
   14ac2:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14ac6:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14aca:	11 82       	std	Z+1, r1	; 0x01
   14acc:	10 82       	st	Z, r1
   14ace:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   14ad2:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   14ad6:	81 81       	ldd	r24, Z+1	; 0x01
   14ad8:	90 e0       	ldi	r25, 0x00	; 0
   14ada:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   14ade:	80 e0       	ldi	r24, 0x00	; 0
   14ae0:	90 e0       	ldi	r25, 0x00	; 0
   14ae2:	08 95       	ret

00014ae4 <SS80_Transparent_State>:
   14ae4:	a2 e0       	ldi	r26, 0x02	; 2
   14ae6:	b0 e0       	ldi	r27, 0x00	; 0
   14ae8:	e8 e7       	ldi	r30, 0x78	; 120
   14aea:	f5 ea       	ldi	r31, 0xA5	; 165
   14aec:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   14af0:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   14af4:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   14af8:	81 81       	ldd	r24, Z+1	; 0x01
   14afa:	90 e0       	ldi	r25, 0x00	; 0
   14afc:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   14b00:	80 e0       	ldi	r24, 0x00	; 0
   14b02:	91 e0       	ldi	r25, 0x01	; 1
   14b04:	9a 83       	std	Y+2, r25	; 0x02
   14b06:	89 83       	std	Y+1, r24	; 0x01
   14b08:	ae 01       	movw	r20, r28
   14b0a:	4f 5f       	subi	r20, 0xFF	; 255
   14b0c:	5f 4f       	sbci	r21, 0xFF	; 255
   14b0e:	60 e0       	ldi	r22, 0x00	; 0
   14b10:	72 e0       	ldi	r23, 0x02	; 2
   14b12:	85 e1       	ldi	r24, 0x15	; 21
   14b14:	9d e1       	ldi	r25, 0x1D	; 29
   14b16:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
   14b1a:	7c 01       	movw	r14, r24
   14b1c:	89 81       	ldd	r24, Y+1	; 0x01
   14b1e:	9a 81       	ldd	r25, Y+2	; 0x02
   14b20:	9c 01       	movw	r18, r24
   14b22:	22 27       	eor	r18, r18
   14b24:	30 7d       	andi	r19, 0xD0	; 208
   14b26:	23 2b       	or	r18, r19
   14b28:	79 f0       	breq	.+30     	; 0x14b48 <SS80_Transparent_State+0x64>
   14b2a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14b2e:	80 ff       	sbrs	r24, 0
   14b30:	e0 c0       	rjmp	.+448    	; 0x14cf2 <SS80_Transparent_State+0x20e>
   14b32:	8c ed       	ldi	r24, 0xDC	; 220
   14b34:	9a e1       	ldi	r25, 0x1A	; 26
   14b36:	1f 92       	push	r1
   14b38:	9f 93       	push	r25
   14b3a:	8f 93       	push	r24
   14b3c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14b40:	0f 90       	pop	r0
   14b42:	0f 90       	pop	r0
   14b44:	0f 90       	pop	r0
   14b46:	d5 c0       	rjmp	.+426    	; 0x14cf2 <SS80_Transparent_State+0x20e>
   14b48:	e1 14       	cp	r14, r1
   14b4a:	f1 04       	cpc	r15, r1
   14b4c:	09 f4       	brne	.+2      	; 0x14b50 <SS80_Transparent_State+0x6c>
   14b4e:	d6 c0       	rjmp	.+428    	; 0x14cfc <SS80_Transparent_State+0x218>
   14b50:	90 fd       	sbrc	r25, 0
   14b52:	0e c0       	rjmp	.+28     	; 0x14b70 <SS80_Transparent_State+0x8c>
   14b54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14b58:	80 ff       	sbrs	r24, 0
   14b5a:	0a c0       	rjmp	.+20     	; 0x14b70 <SS80_Transparent_State+0x8c>
   14b5c:	83 ec       	ldi	r24, 0xC3	; 195
   14b5e:	9a e1       	ldi	r25, 0x1A	; 26
   14b60:	1f 92       	push	r1
   14b62:	9f 93       	push	r25
   14b64:	8f 93       	push	r24
   14b66:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14b6a:	0f 90       	pop	r0
   14b6c:	0f 90       	pop	r0
   14b6e:	0f 90       	pop	r0
   14b70:	85 e1       	ldi	r24, 0x15	; 21
   14b72:	a8 2e       	mov	r10, r24
   14b74:	8d e1       	ldi	r24, 0x1D	; 29
   14b76:	b8 2e       	mov	r11, r24
   14b78:	00 e0       	ldi	r16, 0x00	; 0
   14b7a:	10 e0       	ldi	r17, 0x00	; 0
   14b7c:	0e 15       	cp	r16, r14
   14b7e:	1f 05       	cpc	r17, r15
   14b80:	0c f0       	brlt	.+2      	; 0x14b84 <SS80_Transparent_State+0xa0>
   14b82:	a0 c0       	rjmp	.+320    	; 0x14cc4 <SS80_Transparent_State+0x1e0>
   14b84:	68 01       	movw	r12, r16
   14b86:	8f ef       	ldi	r24, 0xFF	; 255
   14b88:	c8 1a       	sub	r12, r24
   14b8a:	d8 0a       	sbc	r13, r24
   14b8c:	f5 01       	movw	r30, r10
   14b8e:	81 91       	ld	r24, Z+
   14b90:	5f 01       	movw	r10, r30
   14b92:	28 2f       	mov	r18, r24
   14b94:	30 e0       	ldi	r19, 0x00	; 0
   14b96:	a9 01       	movw	r20, r18
   14b98:	40 52       	subi	r20, 0x20	; 32
   14b9a:	51 09       	sbc	r21, r1
   14b9c:	40 31       	cpi	r20, 0x10	; 16
   14b9e:	51 05       	cpc	r21, r1
   14ba0:	20 f4       	brcc	.+8      	; 0x14baa <SS80_Transparent_State+0xc6>
   14ba2:	80 52       	subi	r24, 0x20	; 32
   14ba4:	8b d9       	rcall	.-3306   	; 0x13ebc <SS80_Check_Unit>
   14ba6:	86 01       	movw	r16, r12
   14ba8:	e9 cf       	rjmp	.-46     	; 0x14b7c <SS80_Transparent_State+0x98>
   14baa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14bae:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   14bb2:	21 30       	cpi	r18, 0x01	; 1
   14bb4:	31 05       	cpc	r19, r1
   14bb6:	c9 f4       	brne	.+50     	; 0x14bea <SS80_Transparent_State+0x106>
   14bb8:	0e 5f       	subi	r16, 0xFE	; 254
   14bba:	1f 4f       	sbci	r17, 0xFF	; 255
   14bbc:	80 73       	andi	r24, 0x30	; 48
   14bbe:	99 27       	eor	r25, r25
   14bc0:	89 2b       	or	r24, r25
   14bc2:	51 f0       	breq	.+20     	; 0x14bd8 <SS80_Transparent_State+0xf4>
   14bc4:	8e e9       	ldi	r24, 0x9E	; 158
   14bc6:	9a e1       	ldi	r25, 0x1A	; 26
   14bc8:	1f 92       	push	r1
   14bca:	9f 93       	push	r25
   14bcc:	8f 93       	push	r24
   14bce:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14bd2:	0f 90       	pop	r0
   14bd4:	0f 90       	pop	r0
   14bd6:	0f 90       	pop	r0
   14bd8:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   14bdc:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   14be0:	81 81       	ldd	r24, Z+1	; 0x01
   14be2:	90 e0       	ldi	r25, 0x00	; 0
   14be4:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   14be8:	6d c0       	rjmp	.+218    	; 0x14cc4 <SS80_Transparent_State+0x1e0>
   14bea:	22 30       	cpi	r18, 0x02	; 2
   14bec:	31 05       	cpc	r19, r1
   14bee:	51 f4       	brne	.+20     	; 0x14c04 <SS80_Transparent_State+0x120>
   14bf0:	0b 5f       	subi	r16, 0xFB	; 251
   14bf2:	1f 4f       	sbci	r17, 0xFF	; 255
   14bf4:	80 73       	andi	r24, 0x30	; 48
   14bf6:	99 27       	eor	r25, r25
   14bf8:	89 2b       	or	r24, r25
   14bfa:	09 f4       	brne	.+2      	; 0x14bfe <SS80_Transparent_State+0x11a>
   14bfc:	63 c0       	rjmp	.+198    	; 0x14cc4 <SS80_Transparent_State+0x1e0>
   14bfe:	81 e8       	ldi	r24, 0x81	; 129
   14c00:	9a e1       	ldi	r25, 0x1A	; 26
   14c02:	0c c0       	rjmp	.+24     	; 0x14c1c <SS80_Transparent_State+0x138>
   14c04:	23 30       	cpi	r18, 0x03	; 3
   14c06:	31 05       	cpc	r19, r1
   14c08:	91 f4       	brne	.+36     	; 0x14c2e <SS80_Transparent_State+0x14a>
   14c0a:	0b 5f       	subi	r16, 0xFB	; 251
   14c0c:	1f 4f       	sbci	r17, 0xFF	; 255
   14c0e:	80 73       	andi	r24, 0x30	; 48
   14c10:	99 27       	eor	r25, r25
   14c12:	89 2b       	or	r24, r25
   14c14:	09 f4       	brne	.+2      	; 0x14c18 <SS80_Transparent_State+0x134>
   14c16:	56 c0       	rjmp	.+172    	; 0x14cc4 <SS80_Transparent_State+0x1e0>
   14c18:	83 e6       	ldi	r24, 0x63	; 99
   14c1a:	9a e1       	ldi	r25, 0x1A	; 26
   14c1c:	1f 92       	push	r1
   14c1e:	9f 93       	push	r25
   14c20:	8f 93       	push	r24
   14c22:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14c26:	0f 90       	pop	r0
   14c28:	0f 90       	pop	r0
   14c2a:	0f 90       	pop	r0
   14c2c:	4b c0       	rjmp	.+150    	; 0x14cc4 <SS80_Transparent_State+0x1e0>
   14c2e:	28 30       	cpi	r18, 0x08	; 8
   14c30:	31 05       	cpc	r19, r1
   14c32:	e9 f4       	brne	.+58     	; 0x14c6e <SS80_Transparent_State+0x18a>
   14c34:	85 ff       	sbrs	r24, 5
   14c36:	13 c0       	rjmp	.+38     	; 0x14c5e <SS80_Transparent_State+0x17a>
   14c38:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14c3c:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14c40:	85 81       	ldd	r24, Z+5	; 0x05
   14c42:	1f 92       	push	r1
   14c44:	8f 93       	push	r24
   14c46:	8c e3       	ldi	r24, 0x3C	; 60
   14c48:	9a e1       	ldi	r25, 0x1A	; 26
   14c4a:	1f 92       	push	r1
   14c4c:	9f 93       	push	r25
   14c4e:	8f 93       	push	r24
   14c50:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14c54:	0f 90       	pop	r0
   14c56:	0f 90       	pop	r0
   14c58:	0f 90       	pop	r0
   14c5a:	0f 90       	pop	r0
   14c5c:	0f 90       	pop	r0
   14c5e:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14c62:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14c66:	85 81       	ldd	r24, Z+5	; 0x05
   14c68:	90 e0       	ldi	r25, 0x00	; 0
   14c6a:	ae de       	rcall	.-676    	; 0x149c8 <SS80_Channel_Independent_Clear>
   14c6c:	49 c0       	rjmp	.+146    	; 0x14d00 <SS80_Transparent_State+0x21c>
   14c6e:	29 30       	cpi	r18, 0x09	; 9
   14c70:	31 05       	cpc	r19, r1
   14c72:	b9 f4       	brne	.+46     	; 0x14ca2 <SS80_Transparent_State+0x1be>
   14c74:	85 ff       	sbrs	r24, 5
   14c76:	13 c0       	rjmp	.+38     	; 0x14c9e <SS80_Transparent_State+0x1ba>
   14c78:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14c7c:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14c80:	85 81       	ldd	r24, Z+5	; 0x05
   14c82:	1f 92       	push	r1
   14c84:	8f 93       	push	r24
   14c86:	88 e2       	ldi	r24, 0x28	; 40
   14c88:	9a e1       	ldi	r25, 0x1A	; 26
   14c8a:	1f 92       	push	r1
   14c8c:	9f 93       	push	r25
   14c8e:	8f 93       	push	r24
   14c90:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14c94:	0f 90       	pop	r0
   14c96:	0f 90       	pop	r0
   14c98:	0f 90       	pop	r0
   14c9a:	0f 90       	pop	r0
   14c9c:	0f 90       	pop	r0
   14c9e:	11 df       	rcall	.-478    	; 0x14ac2 <SS80_Cancel>
   14ca0:	2f c0       	rjmp	.+94     	; 0x14d00 <SS80_Transparent_State+0x21c>
   14ca2:	80 ff       	sbrs	r24, 0
   14ca4:	26 c0       	rjmp	.+76     	; 0x14cf2 <SS80_Transparent_State+0x20e>
   14ca6:	3f 93       	push	r19
   14ca8:	2f 93       	push	r18
   14caa:	88 e0       	ldi	r24, 0x08	; 8
   14cac:	9a e1       	ldi	r25, 0x1A	; 26
   14cae:	1f 92       	push	r1
   14cb0:	9f 93       	push	r25
   14cb2:	8f 93       	push	r24
   14cb4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14cb8:	0f 90       	pop	r0
   14cba:	0f 90       	pop	r0
   14cbc:	0f 90       	pop	r0
   14cbe:	0f 90       	pop	r0
   14cc0:	0f 90       	pop	r0
   14cc2:	86 01       	movw	r16, r12
   14cc4:	0e 15       	cp	r16, r14
   14cc6:	1f 05       	cpc	r17, r15
   14cc8:	a1 f0       	breq	.+40     	; 0x14cf2 <SS80_Transparent_State+0x20e>
   14cca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14cce:	80 ff       	sbrs	r24, 0
   14cd0:	10 c0       	rjmp	.+32     	; 0x14cf2 <SS80_Transparent_State+0x20e>
   14cd2:	ff 92       	push	r15
   14cd4:	ef 92       	push	r14
   14cd6:	1f 93       	push	r17
   14cd8:	0f 93       	push	r16
   14cda:	8c ec       	ldi	r24, 0xCC	; 204
   14cdc:	99 e1       	ldi	r25, 0x19	; 25
   14cde:	1f 92       	push	r1
   14ce0:	9f 93       	push	r25
   14ce2:	8f 93       	push	r24
   14ce4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14ce8:	0f b6       	in	r0, 0x3f	; 63
   14cea:	f8 94       	cli
   14cec:	de bf       	out	0x3e, r29	; 62
   14cee:	0f be       	out	0x3f, r0	; 63
   14cf0:	cd bf       	out	0x3d, r28	; 61
   14cf2:	89 81       	ldd	r24, Y+1	; 0x01
   14cf4:	9a 81       	ldd	r25, Y+2	; 0x02
   14cf6:	88 27       	eor	r24, r24
   14cf8:	90 7d       	andi	r25, 0xD0	; 208
   14cfa:	02 c0       	rjmp	.+4      	; 0x14d00 <SS80_Transparent_State+0x21c>
   14cfc:	80 e0       	ldi	r24, 0x00	; 0
   14cfe:	90 e0       	ldi	r25, 0x00	; 0
   14d00:	22 96       	adiw	r28, 0x02	; 2
   14d02:	ea e0       	ldi	r30, 0x0A	; 10
   14d04:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

00014d08 <SS80_error_return>:
   14d08:	a3 e0       	ldi	r26, 0x03	; 3
   14d0a:	b0 e0       	ldi	r27, 0x00	; 0
   14d0c:	ea e8       	ldi	r30, 0x8A	; 138
   14d0e:	f6 ea       	ldi	r31, 0xA6	; 166
   14d10:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   14d14:	80 e0       	ldi	r24, 0x00	; 0
   14d16:	91 e0       	ldi	r25, 0x01	; 1
   14d18:	9a 83       	std	Y+2, r25	; 0x02
   14d1a:	89 83       	std	Y+1, r24	; 0x01
   14d1c:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14d20:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14d24:	81 e0       	ldi	r24, 0x01	; 1
   14d26:	82 83       	std	Z+2, r24	; 0x02
   14d28:	8b 83       	std	Y+3, r24	; 0x03
   14d2a:	ae 01       	movw	r20, r28
   14d2c:	4f 5f       	subi	r20, 0xFF	; 255
   14d2e:	5f 4f       	sbci	r21, 0xFF	; 255
   14d30:	61 e0       	ldi	r22, 0x01	; 1
   14d32:	70 e0       	ldi	r23, 0x00	; 0
   14d34:	ce 01       	movw	r24, r28
   14d36:	03 96       	adiw	r24, 0x03	; 3
   14d38:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   14d3c:	01 97       	sbiw	r24, 0x01	; 1
   14d3e:	99 f0       	breq	.+38     	; 0x14d66 <SS80_error_return+0x5e>
   14d40:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14d44:	80 ff       	sbrs	r24, 0
   14d46:	0a c0       	rjmp	.+20     	; 0x14d5c <SS80_error_return+0x54>
   14d48:	8e ef       	ldi	r24, 0xFE	; 254
   14d4a:	98 e1       	ldi	r25, 0x18	; 24
   14d4c:	1f 92       	push	r1
   14d4e:	9f 93       	push	r25
   14d50:	8f 93       	push	r24
   14d52:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14d56:	0f 90       	pop	r0
   14d58:	0f 90       	pop	r0
   14d5a:	0f 90       	pop	r0
   14d5c:	89 81       	ldd	r24, Y+1	; 0x01
   14d5e:	9a 81       	ldd	r25, Y+2	; 0x02
   14d60:	88 27       	eor	r24, r24
   14d62:	90 7d       	andi	r25, 0xD0	; 208
   14d64:	07 c0       	rjmp	.+14     	; 0x14d74 <SS80_error_return+0x6c>
   14d66:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14d6a:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14d6e:	12 82       	std	Z+2, r1	; 0x02
   14d70:	80 e0       	ldi	r24, 0x00	; 0
   14d72:	90 e0       	ldi	r25, 0x00	; 0
   14d74:	23 96       	adiw	r28, 0x03	; 3
   14d76:	e2 e0       	ldi	r30, 0x02	; 2
   14d78:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00014d7c <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   14d7c:	ac e0       	ldi	r26, 0x0C	; 12
   14d7e:	b0 e0       	ldi	r27, 0x00	; 0
   14d80:	e4 ec       	ldi	r30, 0xC4	; 196
   14d82:	f6 ea       	ldi	r31, 0xA6	; 166
   14d84:	0c 94 06 ed 	jmp	0x1da0c	; 0x1da0c <__prologue_saves__+0x2>
   14d88:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14d8c:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14d90:	27 81       	ldd	r18, Z+7	; 0x07
   14d92:	30 85       	ldd	r19, Z+8	; 0x08
   14d94:	41 85       	ldd	r20, Z+9	; 0x09
   14d96:	52 85       	ldd	r21, Z+10	; 0x0a
   14d98:	a0 91 cc 19 	lds	r26, 0x19CC	; 0x8019cc <SS80p>
   14d9c:	b0 91 cd 19 	lds	r27, 0x19CD	; 0x8019cd <SS80p+0x1>
   14da0:	9f 96       	adiw	r26, 0x2f	; 47
   14da2:	0d 90       	ld	r0, X+
   14da4:	bc 91       	ld	r27, X
   14da6:	a0 2d       	mov	r26, r0
   14da8:	12 82       	std	Z+2, r1	; 0x02
   14daa:	1a 82       	std	Y+2, r1	; 0x02
   14dac:	19 82       	std	Y+1, r1	; 0x01
   14dae:	54 98       	cbi	0x0a, 4	; 10
   14db0:	4c 99       	sbic	0x09, 4	; 9
   14db2:	03 c0       	rjmp	.+6      	; 0x14dba <SS80_locate_and_read+0x3e>
   14db4:	80 e0       	ldi	r24, 0x00	; 0
   14db6:	90 e1       	ldi	r25, 0x10	; 16
   14db8:	45 c1       	rjmp	.+650    	; 0x15044 <SS80_locate_and_read+0x2c8>
   14dba:	0e 94 e5 ec 	call	0x1d9ca	; 0x1d9ca <__muluhisi3>
   14dbe:	4b 01       	movw	r8, r22
   14dc0:	5c 01       	movw	r10, r24
   14dc2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14dc6:	85 ff       	sbrs	r24, 5
   14dc8:	1c c0       	rjmp	.+56     	; 0x14e02 <SS80_locate_and_read+0x86>
   14dca:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14dce:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14dd2:	86 85       	ldd	r24, Z+14	; 0x0e
   14dd4:	8f 93       	push	r24
   14dd6:	85 85       	ldd	r24, Z+13	; 0x0d
   14dd8:	8f 93       	push	r24
   14dda:	84 85       	ldd	r24, Z+12	; 0x0c
   14ddc:	8f 93       	push	r24
   14dde:	83 85       	ldd	r24, Z+11	; 0x0b
   14de0:	8f 93       	push	r24
   14de2:	bf 92       	push	r11
   14de4:	af 92       	push	r10
   14de6:	9f 92       	push	r9
   14de8:	8f 92       	push	r8
   14dea:	82 ef       	ldi	r24, 0xF2	; 242
   14dec:	9f e1       	ldi	r25, 0x1F	; 31
   14dee:	1f 92       	push	r1
   14df0:	9f 93       	push	r25
   14df2:	8f 93       	push	r24
   14df4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14df8:	0f b6       	in	r0, 0x3f	; 63
   14dfa:	f8 94       	cli
   14dfc:	de bf       	out	0x3e, r29	; 62
   14dfe:	0f be       	out	0x3f, r0	; 63
   14e00:	cd bf       	out	0x3d, r28	; 61
   14e02:	16 db       	rcall	.-2516   	; 0x14430 <SS80_cmd_seek>
   14e04:	89 2b       	or	r24, r25
   14e06:	09 f0       	breq	.+2      	; 0x14e0a <SS80_locate_and_read+0x8e>
   14e08:	af c0       	rjmp	.+350    	; 0x14f68 <SS80_locate_and_read+0x1ec>
   14e0a:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14e0e:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14e12:	43 84       	ldd	r4, Z+11	; 0x0b
   14e14:	54 84       	ldd	r5, Z+12	; 0x0c
   14e16:	65 84       	ldd	r6, Z+13	; 0x0d
   14e18:	76 84       	ldd	r7, Z+14	; 0x0e
   14e1a:	1b 82       	std	Y+3, r1	; 0x03
   14e1c:	1c 82       	std	Y+4, r1	; 0x04
   14e1e:	1d 82       	std	Y+5, r1	; 0x05
   14e20:	1e 82       	std	Y+6, r1	; 0x06
   14e22:	84 ed       	ldi	r24, 0xD4	; 212
   14e24:	9f e1       	ldi	r25, 0x1F	; 31
   14e26:	9c 01       	movw	r18, r24
   14e28:	40 e0       	ldi	r20, 0x00	; 0
   14e2a:	2f 83       	std	Y+7, r18	; 0x07
   14e2c:	38 87       	std	Y+8, r19	; 0x08
   14e2e:	49 87       	std	Y+9, r20	; 0x09
   14e30:	33 24       	eor	r3, r3
   14e32:	33 94       	inc	r3
   14e34:	83 ea       	ldi	r24, 0xA3	; 163
   14e36:	9f e1       	ldi	r25, 0x1F	; 31
   14e38:	9c 01       	movw	r18, r24
   14e3a:	40 e0       	ldi	r20, 0x00	; 0
   14e3c:	2a 87       	std	Y+10, r18	; 0x0a
   14e3e:	3b 87       	std	Y+11, r19	; 0x0b
   14e40:	4c 87       	std	Y+12, r20	; 0x0c
   14e42:	34 c0       	rjmp	.+104    	; 0x14eac <SS80_locate_and_read+0x130>
   14e44:	86 fd       	sbrc	r24, 6
   14e46:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   14e4a:	ae 01       	movw	r20, r28
   14e4c:	4f 5f       	subi	r20, 0xFF	; 255
   14e4e:	5f 4f       	sbci	r21, 0xFF	; 255
   14e50:	b6 01       	movw	r22, r12
   14e52:	85 e1       	ldi	r24, 0x15	; 21
   14e54:	9d e1       	ldi	r25, 0x1D	; 29
   14e56:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   14e5a:	8c 01       	movw	r16, r24
   14e5c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14e60:	86 ff       	sbrs	r24, 6
   14e62:	04 c0       	rjmp	.+8      	; 0x14e6c <SS80_locate_and_read+0xf0>
   14e64:	84 e1       	ldi	r24, 0x14	; 20
   14e66:	9e e0       	ldi	r25, 0x0E	; 14
   14e68:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   14e6c:	c0 16       	cp	r12, r16
   14e6e:	d1 06       	cpc	r13, r17
   14e70:	09 f0       	breq	.+2      	; 0x14e74 <SS80_locate_and_read+0xf8>
   14e72:	83 c0       	rjmp	.+262    	; 0x14f7a <SS80_locate_and_read+0x1fe>
   14e74:	0d 2c       	mov	r0, r13
   14e76:	00 0c       	add	r0, r0
   14e78:	ee 08       	sbc	r14, r14
   14e7a:	ff 08       	sbc	r15, r15
   14e7c:	8c 0c       	add	r8, r12
   14e7e:	9d 1c       	adc	r9, r13
   14e80:	ae 1c       	adc	r10, r14
   14e82:	bf 1c       	adc	r11, r15
   14e84:	01 2e       	mov	r0, r17
   14e86:	00 0c       	add	r0, r0
   14e88:	22 0b       	sbc	r18, r18
   14e8a:	33 0b       	sbc	r19, r19
   14e8c:	8b 81       	ldd	r24, Y+3	; 0x03
   14e8e:	9c 81       	ldd	r25, Y+4	; 0x04
   14e90:	ad 81       	ldd	r26, Y+5	; 0x05
   14e92:	be 81       	ldd	r27, Y+6	; 0x06
   14e94:	80 0f       	add	r24, r16
   14e96:	91 1f       	adc	r25, r17
   14e98:	a2 1f       	adc	r26, r18
   14e9a:	b3 1f       	adc	r27, r19
   14e9c:	8b 83       	std	Y+3, r24	; 0x03
   14e9e:	9c 83       	std	Y+4, r25	; 0x04
   14ea0:	ad 83       	std	Y+5, r26	; 0x05
   14ea2:	be 83       	std	Y+6, r27	; 0x06
   14ea4:	40 1a       	sub	r4, r16
   14ea6:	51 0a       	sbc	r5, r17
   14ea8:	62 0a       	sbc	r6, r18
   14eaa:	73 0a       	sbc	r7, r19
   14eac:	41 14       	cp	r4, r1
   14eae:	51 04       	cpc	r5, r1
   14eb0:	61 04       	cpc	r6, r1
   14eb2:	71 04       	cpc	r7, r1
   14eb4:	09 f4       	brne	.+2      	; 0x14eb8 <SS80_locate_and_read+0x13c>
   14eb6:	93 c0       	rjmp	.+294    	; 0x14fde <SS80_locate_and_read+0x262>
   14eb8:	54 98       	cbi	0x0a, 4	; 10
   14eba:	4c 9b       	sbis	0x09, 4	; 9
   14ebc:	7b cf       	rjmp	.-266    	; 0x14db4 <SS80_locate_and_read+0x38>
   14ebe:	31 e0       	ldi	r19, 0x01	; 1
   14ec0:	43 16       	cp	r4, r19
   14ec2:	53 06       	cpc	r5, r19
   14ec4:	61 04       	cpc	r6, r1
   14ec6:	71 04       	cpc	r7, r1
   14ec8:	08 f4       	brcc	.+2      	; 0x14ecc <SS80_locate_and_read+0x150>
   14eca:	50 c0       	rjmp	.+160    	; 0x14f6c <SS80_locate_and_read+0x1f0>
   14ecc:	1a 82       	std	Y+2, r1	; 0x02
   14ece:	19 82       	std	Y+1, r1	; 0x01
   14ed0:	c1 2c       	mov	r12, r1
   14ed2:	dd 24       	eor	r13, r13
   14ed4:	d3 94       	inc	r13
   14ed6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14eda:	86 fd       	sbrc	r24, 6
   14edc:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   14ee0:	e0 90 ca 19 	lds	r14, 0x19CA	; 0x8019ca <SS80s>
   14ee4:	f0 90 cb 19 	lds	r15, 0x19CB	; 0x8019cb <SS80s+0x1>
   14ee8:	43 e0       	ldi	r20, 0x03	; 3
   14eea:	e4 0e       	add	r14, r20
   14eec:	f1 1c       	adc	r15, r1
   14eee:	80 91 cc 19 	lds	r24, 0x19CC	; 0x8019cc <SS80p>
   14ef2:	90 91 cd 19 	lds	r25, 0x19CD	; 0x8019cd <SS80p+0x1>
   14ef6:	86 01       	movw	r16, r12
   14ef8:	25 e1       	ldi	r18, 0x15	; 21
   14efa:	3d e1       	ldi	r19, 0x1D	; 29
   14efc:	b5 01       	movw	r22, r10
   14efe:	a4 01       	movw	r20, r8
   14f00:	02 96       	adiw	r24, 0x02	; 2
   14f02:	0e 94 e7 8c 	call	0x119ce	; 0x119ce <dbf_open_read>
   14f06:	8c 01       	movw	r16, r24
   14f08:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14f0c:	86 ff       	sbrs	r24, 6
   14f0e:	04 c0       	rjmp	.+8      	; 0x14f18 <SS80_locate_and_read+0x19c>
   14f10:	8a e0       	ldi	r24, 0x0A	; 10
   14f12:	9e e0       	ldi	r25, 0x0E	; 14
   14f14:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   14f18:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14f1c:	85 ff       	sbrs	r24, 5
   14f1e:	0e c0       	rjmp	.+28     	; 0x14f3c <SS80_locate_and_read+0x1c0>
   14f20:	1f 93       	push	r17
   14f22:	0f 93       	push	r16
   14f24:	1f 92       	push	r1
   14f26:	88 85       	ldd	r24, Y+8	; 0x08
   14f28:	8f 93       	push	r24
   14f2a:	9f 81       	ldd	r25, Y+7	; 0x07
   14f2c:	9f 93       	push	r25
   14f2e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14f32:	0f 90       	pop	r0
   14f34:	0f 90       	pop	r0
   14f36:	0f 90       	pop	r0
   14f38:	0f 90       	pop	r0
   14f3a:	0f 90       	pop	r0
   14f3c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14f40:	17 ff       	sbrs	r17, 7
   14f42:	80 cf       	rjmp	.-256    	; 0x14e44 <SS80_locate_and_read+0xc8>
   14f44:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14f48:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14f4c:	91 e0       	ldi	r25, 0x01	; 1
   14f4e:	92 83       	std	Z+2, r25	; 0x02
   14f50:	80 ff       	sbrs	r24, 0
   14f52:	0a c0       	rjmp	.+20     	; 0x14f68 <SS80_locate_and_read+0x1ec>
   14f54:	8c eb       	ldi	r24, 0xBC	; 188
   14f56:	9f e1       	ldi	r25, 0x1F	; 31
   14f58:	1f 92       	push	r1
   14f5a:	9f 93       	push	r25
   14f5c:	8f 93       	push	r24
   14f5e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14f62:	0f 90       	pop	r0
   14f64:	0f 90       	pop	r0
   14f66:	0f 90       	pop	r0
   14f68:	cf de       	rcall	.-610    	; 0x14d08 <SS80_error_return>
   14f6a:	6c c0       	rjmp	.+216    	; 0x15044 <SS80_locate_and_read+0x2c8>
   14f6c:	62 01       	movw	r12, r4
   14f6e:	89 81       	ldd	r24, Y+1	; 0x01
   14f70:	9a 81       	ldd	r25, Y+2	; 0x02
   14f72:	91 60       	ori	r25, 0x01	; 1
   14f74:	9a 83       	std	Y+2, r25	; 0x02
   14f76:	89 83       	std	Y+1, r24	; 0x01
   14f78:	ae cf       	rjmp	.-164    	; 0x14ed6 <SS80_locate_and_read+0x15a>
   14f7a:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14f7e:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14f82:	32 82       	std	Z+2, r3	; 0x02
   14f84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14f88:	80 ff       	sbrs	r24, 0
   14f8a:	0a c0       	rjmp	.+20     	; 0x14fa0 <SS80_locate_and_read+0x224>
   14f8c:	1f 92       	push	r1
   14f8e:	ab 85       	ldd	r26, Y+11	; 0x0b
   14f90:	af 93       	push	r26
   14f92:	ba 85       	ldd	r27, Y+10	; 0x0a
   14f94:	bf 93       	push	r27
   14f96:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14f9a:	0f 90       	pop	r0
   14f9c:	0f 90       	pop	r0
   14f9e:	0f 90       	pop	r0
   14fa0:	89 81       	ldd	r24, Y+1	; 0x01
   14fa2:	9a 81       	ldd	r25, Y+2	; 0x02
   14fa4:	88 27       	eor	r24, r24
   14fa6:	90 7d       	andi	r25, 0xD0	; 208
   14fa8:	89 2b       	or	r24, r25
   14faa:	09 f4       	brne	.+2      	; 0x14fae <SS80_locate_and_read+0x232>
   14fac:	63 cf       	rjmp	.-314    	; 0x14e74 <SS80_locate_and_read+0xf8>
   14fae:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   14fb2:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   14fb6:	83 81       	ldd	r24, Z+3	; 0x03
   14fb8:	94 81       	ldd	r25, Z+4	; 0x04
   14fba:	80 62       	ori	r24, 0x20	; 32
   14fbc:	94 83       	std	Z+4, r25	; 0x04
   14fbe:	83 83       	std	Z+3, r24	; 0x03
   14fc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14fc4:	80 ff       	sbrs	r24, 0
   14fc6:	23 c0       	rjmp	.+70     	; 0x1500e <SS80_locate_and_read+0x292>
   14fc8:	8e e7       	ldi	r24, 0x7E	; 126
   14fca:	9f e1       	ldi	r25, 0x1F	; 31
   14fcc:	1f 92       	push	r1
   14fce:	9f 93       	push	r25
   14fd0:	8f 93       	push	r24
   14fd2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   14fd6:	0f 90       	pop	r0
   14fd8:	0f 90       	pop	r0
   14fda:	0f 90       	pop	r0
   14fdc:	18 c0       	rjmp	.+48     	; 0x1500e <SS80_locate_and_read+0x292>
   14fde:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14fe2:	85 ff       	sbrs	r24, 5
   14fe4:	14 c0       	rjmp	.+40     	; 0x1500e <SS80_locate_and_read+0x292>
   14fe6:	9e 81       	ldd	r25, Y+6	; 0x06
   14fe8:	9f 93       	push	r25
   14fea:	ad 81       	ldd	r26, Y+5	; 0x05
   14fec:	af 93       	push	r26
   14fee:	bc 81       	ldd	r27, Y+4	; 0x04
   14ff0:	bf 93       	push	r27
   14ff2:	eb 81       	ldd	r30, Y+3	; 0x03
   14ff4:	ef 93       	push	r30
   14ff6:	86 e5       	ldi	r24, 0x56	; 86
   14ff8:	9f e1       	ldi	r25, 0x1F	; 31
   14ffa:	1f 92       	push	r1
   14ffc:	9f 93       	push	r25
   14ffe:	8f 93       	push	r24
   15000:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15004:	0f b6       	in	r0, 0x3f	; 63
   15006:	f8 94       	cli
   15008:	de bf       	out	0x3e, r29	; 62
   1500a:	0f be       	out	0x3f, r0	; 63
   1500c:	cd bf       	out	0x3d, r28	; 61
   1500e:	00 91 ca 19 	lds	r16, 0x19CA	; 0x8019ca <SS80s>
   15012:	10 91 cb 19 	lds	r17, 0x19CB	; 0x8019cb <SS80s+0x1>
   15016:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   1501a:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   1501e:	27 a5       	ldd	r18, Z+47	; 0x2f
   15020:	30 a9       	ldd	r19, Z+48	; 0x30
   15022:	40 e0       	ldi	r20, 0x00	; 0
   15024:	50 e0       	ldi	r21, 0x00	; 0
   15026:	c5 01       	movw	r24, r10
   15028:	b4 01       	movw	r22, r8
   1502a:	0e 94 83 ec 	call	0x1d906	; 0x1d906 <__udivmodsi4>
   1502e:	d8 01       	movw	r26, r16
   15030:	17 96       	adiw	r26, 0x07	; 7
   15032:	2d 93       	st	X+, r18
   15034:	3d 93       	st	X+, r19
   15036:	4d 93       	st	X+, r20
   15038:	5c 93       	st	X, r21
   1503a:	1a 97       	sbiw	r26, 0x0a	; 10
   1503c:	89 81       	ldd	r24, Y+1	; 0x01
   1503e:	9a 81       	ldd	r25, Y+2	; 0x02
   15040:	88 27       	eor	r24, r24
   15042:	90 7d       	andi	r25, 0xD0	; 208
   15044:	2c 96       	adiw	r28, 0x0c	; 12
   15046:	e1 e1       	ldi	r30, 0x11	; 17
   15048:	0c 94 22 ed 	jmp	0x1da44	; 0x1da44 <__epilogue_restores__+0x2>

0001504c <SS80_Execute_State>:
   1504c:	cf 93       	push	r28
   1504e:	df 93       	push	r29
   15050:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   15054:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   15058:	81 81       	ldd	r24, Z+1	; 0x01
   1505a:	90 e0       	ldi	r25, 0x00	; 0
   1505c:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   15060:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   15064:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   15068:	80 81       	ld	r24, Z
   1506a:	91 81       	ldd	r25, Z+1	; 0x01
   1506c:	82 30       	cpi	r24, 0x02	; 2
   1506e:	91 05       	cpc	r25, r1
   15070:	89 f0       	breq	.+34     	; 0x15094 <SS80_Execute_State+0x48>
   15072:	3c f4       	brge	.+14     	; 0x15082 <SS80_Execute_State+0x36>
   15074:	00 97       	sbiw	r24, 0x00	; 0
   15076:	91 f1       	breq	.+100    	; 0x150dc <SS80_Execute_State+0x90>
   15078:	81 30       	cpi	r24, 0x01	; 1
   1507a:	91 05       	cpc	r25, r1
   1507c:	b9 f4       	brne	.+46     	; 0x150ac <SS80_Execute_State+0x60>
   1507e:	7e de       	rcall	.-772    	; 0x14d7c <SS80_locate_and_read>
   15080:	0d c0       	rjmp	.+26     	; 0x1509c <SS80_Execute_State+0x50>
   15082:	83 30       	cpi	r24, 0x03	; 3
   15084:	91 05       	cpc	r25, r1
   15086:	41 f0       	breq	.+16     	; 0x15098 <SS80_Execute_State+0x4c>
   15088:	84 30       	cpi	r24, 0x04	; 4
   1508a:	91 05       	cpc	r25, r1
   1508c:	79 f4       	brne	.+30     	; 0x150ac <SS80_Execute_State+0x60>
   1508e:	0e 94 ee 9e 	call	0x13ddc	; 0x13ddc <SS80_describe>
   15092:	04 c0       	rjmp	.+8      	; 0x1509c <SS80_Execute_State+0x50>
   15094:	4e da       	rcall	.-2916   	; 0x14532 <SS80_locate_and_write>
   15096:	02 c0       	rjmp	.+4      	; 0x1509c <SS80_Execute_State+0x50>
   15098:	0e 94 6d 9e 	call	0x13cda	; 0x13cda <SS80_send_status>
   1509c:	ec 01       	movw	r28, r24
   1509e:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   150a2:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   150a6:	11 82       	std	Z+1, r1	; 0x01
   150a8:	10 82       	st	Z, r1
   150aa:	1a c0       	rjmp	.+52     	; 0x150e0 <SS80_Execute_State+0x94>
   150ac:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   150b0:	20 ff       	sbrs	r18, 0
   150b2:	0e c0       	rjmp	.+28     	; 0x150d0 <SS80_Execute_State+0x84>
   150b4:	9f 93       	push	r25
   150b6:	8f 93       	push	r24
   150b8:	8a e1       	ldi	r24, 0x1A	; 26
   150ba:	90 e2       	ldi	r25, 0x20	; 32
   150bc:	1f 92       	push	r1
   150be:	9f 93       	push	r25
   150c0:	8f 93       	push	r24
   150c2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   150c6:	0f 90       	pop	r0
   150c8:	0f 90       	pop	r0
   150ca:	0f 90       	pop	r0
   150cc:	0f 90       	pop	r0
   150ce:	0f 90       	pop	r0
   150d0:	e0 91 ca 19 	lds	r30, 0x19CA	; 0x8019ca <SS80s>
   150d4:	f0 91 cb 19 	lds	r31, 0x19CB	; 0x8019cb <SS80s+0x1>
   150d8:	11 82       	std	Z+1, r1	; 0x01
   150da:	10 82       	st	Z, r1
   150dc:	c0 e0       	ldi	r28, 0x00	; 0
   150de:	d0 e0       	ldi	r29, 0x00	; 0
   150e0:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   150e4:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   150e8:	81 81       	ldd	r24, Z+1	; 0x01
   150ea:	90 e0       	ldi	r25, 0x00	; 0
   150ec:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   150f0:	ce 01       	movw	r24, r28
   150f2:	df 91       	pop	r29
   150f4:	cf 91       	pop	r28
   150f6:	08 95       	ret

000150f8 <SS80_COMMANDS>:
   150f8:	1f 93       	push	r17
   150fa:	cf 93       	push	r28
   150fc:	df 93       	push	r29
   150fe:	18 2f       	mov	r17, r24
   15100:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   15104:	90 e0       	ldi	r25, 0x00	; 0
   15106:	0e 94 6b 94 	call	0x128d6	; 0x128d6 <SS80_is_MTA>
   1510a:	89 2b       	or	r24, r25
   1510c:	19 f0       	breq	.+6      	; 0x15114 <SS80_COMMANDS+0x1c>
   1510e:	15 36       	cpi	r17, 0x65	; 101
   15110:	19 f5       	brne	.+70     	; 0x15158 <SS80_COMMANDS+0x60>
   15112:	09 c0       	rjmp	.+18     	; 0x15126 <SS80_COMMANDS+0x2e>
   15114:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15118:	90 e0       	ldi	r25, 0x00	; 0
   1511a:	0e 94 5a 94 	call	0x128b4	; 0x128b4 <SS80_is_MLA>
   1511e:	ec 01       	movw	r28, r24
   15120:	89 2b       	or	r24, r25
   15122:	a9 f7       	brne	.-22     	; 0x1510e <SS80_COMMANDS+0x16>
   15124:	ae c0       	rjmp	.+348    	; 0x15282 <SS80_COMMANDS+0x18a>
   15126:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   1512a:	90 e0       	ldi	r25, 0x00	; 0
   1512c:	0e 94 5a 94 	call	0x128b4	; 0x128b4 <SS80_is_MLA>
   15130:	89 2b       	or	r24, r25
   15132:	09 f4       	brne	.+2      	; 0x15136 <SS80_COMMANDS+0x3e>
   15134:	a3 c0       	rjmp	.+326    	; 0x1527c <SS80_COMMANDS+0x184>
   15136:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1513a:	85 ff       	sbrs	r24, 5
   1513c:	0a c0       	rjmp	.+20     	; 0x15152 <SS80_COMMANDS+0x5a>
   1513e:	88 ee       	ldi	r24, 0xE8	; 232
   15140:	98 e1       	ldi	r25, 0x18	; 24
   15142:	1f 92       	push	r1
   15144:	9f 93       	push	r25
   15146:	8f 93       	push	r24
   15148:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1514c:	0f 90       	pop	r0
   1514e:	0f 90       	pop	r0
   15150:	0f 90       	pop	r0
   15152:	0e 94 a0 9f 	call	0x13f40	; 0x13f40 <SS80_Command_State>
   15156:	73 c0       	rjmp	.+230    	; 0x1523e <SS80_COMMANDS+0x146>
   15158:	1e 36       	cpi	r17, 0x6E	; 110
   1515a:	01 f5       	brne	.+64     	; 0x1519c <SS80_COMMANDS+0xa4>
   1515c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15160:	90 e0       	ldi	r25, 0x00	; 0
   15162:	0e 94 5a 94 	call	0x128b4	; 0x128b4 <SS80_is_MLA>
   15166:	89 2b       	or	r24, r25
   15168:	79 f0       	breq	.+30     	; 0x15188 <SS80_COMMANDS+0x90>
   1516a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1516e:	85 ff       	sbrs	r24, 5
   15170:	13 c0       	rjmp	.+38     	; 0x15198 <SS80_COMMANDS+0xa0>
   15172:	82 ed       	ldi	r24, 0xD2	; 210
   15174:	98 e1       	ldi	r25, 0x18	; 24
   15176:	1f 92       	push	r1
   15178:	9f 93       	push	r25
   1517a:	8f 93       	push	r24
   1517c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15180:	0f 90       	pop	r0
   15182:	0f 90       	pop	r0
   15184:	0f 90       	pop	r0
   15186:	08 c0       	rjmp	.+16     	; 0x15198 <SS80_COMMANDS+0xa0>
   15188:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   1518c:	90 e0       	ldi	r25, 0x00	; 0
   1518e:	0e 94 6b 94 	call	0x128d6	; 0x128d6 <SS80_is_MTA>
   15192:	89 2b       	or	r24, r25
   15194:	51 f7       	brne	.-44     	; 0x1516a <SS80_COMMANDS+0x72>
   15196:	72 c0       	rjmp	.+228    	; 0x1527c <SS80_COMMANDS+0x184>
   15198:	59 df       	rcall	.-334    	; 0x1504c <SS80_Execute_State>
   1519a:	51 c0       	rjmp	.+162    	; 0x1523e <SS80_COMMANDS+0x146>
   1519c:	10 37       	cpi	r17, 0x70	; 112
   1519e:	b9 f5       	brne	.+110    	; 0x1520e <SS80_COMMANDS+0x116>
   151a0:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   151a4:	90 e0       	ldi	r25, 0x00	; 0
   151a6:	0e 94 6b 94 	call	0x128d6	; 0x128d6 <SS80_is_MTA>
   151aa:	89 2b       	or	r24, r25
   151ac:	81 f0       	breq	.+32     	; 0x151ce <SS80_COMMANDS+0xd6>
   151ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   151b2:	85 ff       	sbrs	r24, 5
   151b4:	0a c0       	rjmp	.+20     	; 0x151ca <SS80_COMMANDS+0xd2>
   151b6:	8d eb       	ldi	r24, 0xBD	; 189
   151b8:	98 e1       	ldi	r25, 0x18	; 24
   151ba:	1f 92       	push	r1
   151bc:	9f 93       	push	r25
   151be:	8f 93       	push	r24
   151c0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   151c4:	0f 90       	pop	r0
   151c6:	0f 90       	pop	r0
   151c8:	0f 90       	pop	r0
   151ca:	4a db       	rcall	.-2412   	; 0x14860 <SS80_Report>
   151cc:	38 c0       	rjmp	.+112    	; 0x1523e <SS80_COMMANDS+0x146>
   151ce:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   151d2:	90 e0       	ldi	r25, 0x00	; 0
   151d4:	0e 94 5a 94 	call	0x128b4	; 0x128b4 <SS80_is_MLA>
   151d8:	89 2b       	or	r24, r25
   151da:	09 f4       	brne	.+2      	; 0x151de <SS80_COMMANDS+0xe6>
   151dc:	4f c0       	rjmp	.+158    	; 0x1527c <SS80_COMMANDS+0x184>
   151de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   151e2:	85 ff       	sbrs	r24, 5
   151e4:	0a c0       	rjmp	.+20     	; 0x151fa <SS80_COMMANDS+0x102>
   151e6:	8e ea       	ldi	r24, 0xAE	; 174
   151e8:	98 e1       	ldi	r25, 0x18	; 24
   151ea:	1f 92       	push	r1
   151ec:	9f 93       	push	r25
   151ee:	8f 93       	push	r24
   151f0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   151f4:	0f 90       	pop	r0
   151f6:	0f 90       	pop	r0
   151f8:	0f 90       	pop	r0
   151fa:	e0 91 cc 19 	lds	r30, 0x19CC	; 0x8019cc <SS80p>
   151fe:	f0 91 cd 19 	lds	r31, 0x19CD	; 0x8019cd <SS80p+0x1>
   15202:	81 81       	ldd	r24, Z+1	; 0x01
   15204:	90 e0       	ldi	r25, 0x00	; 0
   15206:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   1520a:	18 dc       	rcall	.-2000   	; 0x14a3c <SS80_Amigo_Clear>
   1520c:	18 c0       	rjmp	.+48     	; 0x1523e <SS80_COMMANDS+0x146>
   1520e:	12 37       	cpi	r17, 0x72	; 114
   15210:	c1 f4       	brne	.+48     	; 0x15242 <SS80_COMMANDS+0x14a>
   15212:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15216:	90 e0       	ldi	r25, 0x00	; 0
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   15218:	0e 94 5a 94 	call	0x128b4	; 0x128b4 <SS80_is_MLA>
   1521c:	89 2b       	or	r24, r25
   1521e:	89 f0       	breq	.+34     	; 0x15242 <SS80_COMMANDS+0x14a>
   15220:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15224:	85 ff       	sbrs	r24, 5
   15226:	0a c0       	rjmp	.+20     	; 0x1523c <SS80_COMMANDS+0x144>
   15228:	8a e9       	ldi	r24, 0x9A	; 154
   1522a:	98 e1       	ldi	r25, 0x18	; 24
   1522c:	1f 92       	push	r1
   1522e:	9f 93       	push	r25
   15230:	8f 93       	push	r24
   15232:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15236:	0f 90       	pop	r0
   15238:	0f 90       	pop	r0
   1523a:	0f 90       	pop	r0
   1523c:	53 dc       	rcall	.-1882   	; 0x14ae4 <SS80_Transparent_State>
   1523e:	ec 01       	movw	r28, r24
   15240:	3d c0       	rjmp	.+122    	; 0x152bc <SS80_COMMANDS+0x1c4>
   15242:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15246:	80 ff       	sbrs	r24, 0
   15248:	19 c0       	rjmp	.+50     	; 0x1527c <SS80_COMMANDS+0x184>
   1524a:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   1524e:	1f 92       	push	r1
   15250:	8f 93       	push	r24
   15252:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15256:	1f 92       	push	r1
   15258:	8f 93       	push	r24
   1525a:	1f 92       	push	r1
   1525c:	1f 93       	push	r17
   1525e:	86 e6       	ldi	r24, 0x66	; 102
   15260:	98 e1       	ldi	r25, 0x18	; 24
   15262:	1f 92       	push	r1
   15264:	9f 93       	push	r25
   15266:	8f 93       	push	r24
   15268:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1526c:	8d b7       	in	r24, 0x3d	; 61
   1526e:	9e b7       	in	r25, 0x3e	; 62
   15270:	09 96       	adiw	r24, 0x09	; 9
   15272:	0f b6       	in	r0, 0x3f	; 63
   15274:	f8 94       	cli
   15276:	9e bf       	out	0x3e, r25	; 62
   15278:	0f be       	out	0x3f, r0	; 63
   1527a:	8d bf       	out	0x3d, r24	; 61
   1527c:	c0 e0       	ldi	r28, 0x00	; 0
   1527e:	d0 e0       	ldi	r29, 0x00	; 0
   15280:	1d c0       	rjmp	.+58     	; 0x152bc <SS80_COMMANDS+0x1c4>
   15282:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15286:	80 ff       	sbrs	r24, 0
   15288:	f9 cf       	rjmp	.-14     	; 0x1527c <SS80_COMMANDS+0x184>
   1528a:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   1528e:	1f 92       	push	r1
   15290:	8f 93       	push	r24
   15292:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15296:	1f 92       	push	r1
   15298:	8f 93       	push	r24
   1529a:	1f 92       	push	r1
   1529c:	1f 93       	push	r17
   1529e:	82 e3       	ldi	r24, 0x32	; 50
   152a0:	98 e1       	ldi	r25, 0x18	; 24
   152a2:	1f 92       	push	r1
   152a4:	9f 93       	push	r25
   152a6:	8f 93       	push	r24
   152a8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   152ac:	8d b7       	in	r24, 0x3d	; 61
   152ae:	9e b7       	in	r25, 0x3e	; 62
   152b0:	09 96       	adiw	r24, 0x09	; 9
   152b2:	0f b6       	in	r0, 0x3f	; 63
   152b4:	f8 94       	cli
   152b6:	9e bf       	out	0x3e, r25	; 62
   152b8:	0f be       	out	0x3f, r0	; 63
   152ba:	8d bf       	out	0x3d, r24	; 61
   152bc:	ce 01       	movw	r24, r28
   152be:	df 91       	pop	r29
   152c0:	cf 91       	pop	r28
   152c2:	1f 91       	pop	r17
   152c4:	08 95       	ret

000152c6 <amigo_overflow_check>:
   152c6:	cf 92       	push	r12
   152c8:	df 92       	push	r13
   152ca:	ef 92       	push	r14
   152cc:	0f 93       	push	r16
   152ce:	1f 93       	push	r17
   152d0:	cf 93       	push	r28
   152d2:	df 93       	push	r29
   152d4:	ec 01       	movw	r28, r24
   152d6:	8b 01       	movw	r16, r22
   152d8:	80 e0       	ldi	r24, 0x00	; 0
   152da:	90 e0       	ldi	r25, 0x00	; 0
   152dc:	29 e0       	ldi	r18, 0x09	; 9
   152de:	38 e2       	ldi	r19, 0x28	; 40
   152e0:	69 01       	movw	r12, r18
   152e2:	2d 81       	ldd	r18, Y+5	; 0x05
   152e4:	30 e0       	ldi	r19, 0x00	; 0
   152e6:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   152ea:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   152ee:	47 a1       	ldd	r20, Z+39	; 0x27
   152f0:	50 a5       	ldd	r21, Z+40	; 0x28
   152f2:	24 17       	cp	r18, r20
   152f4:	35 07       	cpc	r19, r21
   152f6:	7c f1       	brlt	.+94     	; 0x15356 <amigo_overflow_check+0x90>
   152f8:	1d 82       	std	Y+5, r1	; 0x05
   152fa:	2c 81       	ldd	r18, Y+4	; 0x04
   152fc:	2f 5f       	subi	r18, 0xFF	; 255
   152fe:	2c 83       	std	Y+4, r18	; 0x04
   15300:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15304:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15308:	2c 81       	ldd	r18, Y+4	; 0x04
   1530a:	30 e0       	ldi	r19, 0x00	; 0
   1530c:	41 a5       	ldd	r20, Z+41	; 0x29
   1530e:	52 a5       	ldd	r21, Z+42	; 0x2a
   15310:	24 17       	cp	r18, r20
   15312:	35 07       	cpc	r19, r21
   15314:	34 f3       	brlt	.-52     	; 0x152e2 <amigo_overflow_check+0x1c>
   15316:	1c 82       	std	Y+4, r1	; 0x04
   15318:	2b 81       	ldd	r18, Y+3	; 0x03
   1531a:	2f 5f       	subi	r18, 0xFF	; 255
   1531c:	2b 83       	std	Y+3, r18	; 0x03
   1531e:	30 e0       	ldi	r19, 0x00	; 0
   15320:	43 a5       	ldd	r20, Z+43	; 0x2b
   15322:	54 a5       	ldd	r21, Z+44	; 0x2c
   15324:	24 17       	cp	r18, r20
   15326:	35 07       	cpc	r19, r21
   15328:	5c f3       	brlt	.-42     	; 0x15300 <amigo_overflow_check+0x3a>
   1532a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1532e:	80 ff       	sbrs	r24, 0
   15330:	0f c0       	rjmp	.+30     	; 0x15350 <amigo_overflow_check+0x8a>
   15332:	01 15       	cp	r16, r1
   15334:	11 05       	cpc	r17, r1
   15336:	61 f0       	breq	.+24     	; 0x15350 <amigo_overflow_check+0x8a>
   15338:	1f 93       	push	r17
   1533a:	0f 93       	push	r16
   1533c:	1f 92       	push	r1
   1533e:	df 92       	push	r13
   15340:	cf 92       	push	r12
   15342:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15346:	0f 90       	pop	r0
   15348:	0f 90       	pop	r0
   1534a:	0f 90       	pop	r0
   1534c:	0f 90       	pop	r0
   1534e:	0f 90       	pop	r0
   15350:	81 e0       	ldi	r24, 0x01	; 1
   15352:	90 e0       	ldi	r25, 0x00	; 0
   15354:	d5 cf       	rjmp	.-86     	; 0x15300 <amigo_overflow_check+0x3a>
   15356:	df 91       	pop	r29
   15358:	cf 91       	pop	r28
   1535a:	1f 91       	pop	r17
   1535c:	0f 91       	pop	r16
   1535e:	ef 90       	pop	r14
   15360:	df 90       	pop	r13
   15362:	cf 90       	pop	r12
   15364:	08 95       	ret

00015366 <amigo_chs_to_logical>:
   15366:	a0 e0       	ldi	r26, 0x00	; 0
   15368:	b0 e0       	ldi	r27, 0x00	; 0
   1536a:	e9 eb       	ldi	r30, 0xB9	; 185
   1536c:	f9 ea       	ldi	r31, 0xA9	; 169
   1536e:	0c 94 0e ed 	jmp	0x1da1c	; 0x1da1c <__prologue_saves__+0x12>
   15372:	dc 01       	movw	r26, r24
   15374:	d6 2f       	mov	r29, r22
   15376:	17 2f       	mov	r17, r23
   15378:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   1537c:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15380:	87 a1       	ldd	r24, Z+39	; 0x27
   15382:	90 a5       	ldd	r25, Z+40	; 0x28
   15384:	14 96       	adiw	r26, 0x04	; 4
   15386:	cc 91       	ld	r28, X
   15388:	14 97       	sbiw	r26, 0x04	; 4
   1538a:	c8 9f       	mul	r28, r24
   1538c:	90 01       	movw	r18, r0
   1538e:	c9 9f       	mul	r28, r25
   15390:	30 0d       	add	r19, r0
   15392:	11 24       	eor	r1, r1
   15394:	a9 01       	movw	r20, r18
   15396:	33 0f       	add	r19, r19
   15398:	66 0b       	sbc	r22, r22
   1539a:	77 0b       	sbc	r23, r23
   1539c:	13 96       	adiw	r26, 0x03	; 3
   1539e:	0c 91       	ld	r16, X
   153a0:	13 97       	sbiw	r26, 0x03	; 3
   153a2:	21 a5       	ldd	r18, Z+41	; 0x29
   153a4:	32 a5       	ldd	r19, Z+42	; 0x2a
   153a6:	82 9f       	mul	r24, r18
   153a8:	70 01       	movw	r14, r0
   153aa:	83 9f       	mul	r24, r19
   153ac:	f0 0c       	add	r15, r0
   153ae:	92 9f       	mul	r25, r18
   153b0:	f0 0c       	add	r15, r0
   153b2:	11 24       	eor	r1, r1
   153b4:	0e 9d       	mul	r16, r14
   153b6:	90 01       	movw	r18, r0
   153b8:	0f 9d       	mul	r16, r15
   153ba:	30 0d       	add	r19, r0
   153bc:	11 24       	eor	r1, r1
   153be:	69 01       	movw	r12, r18
   153c0:	33 0f       	add	r19, r19
   153c2:	ee 08       	sbc	r14, r14
   153c4:	ff 08       	sbc	r15, r15
   153c6:	4c 0d       	add	r20, r12
   153c8:	5d 1d       	adc	r21, r13
   153ca:	6e 1d       	adc	r22, r14
   153cc:	7f 1d       	adc	r23, r15
   153ce:	15 96       	adiw	r26, 0x05	; 5
   153d0:	bc 90       	ld	r11, X
   153d2:	9a 01       	movw	r18, r20
   153d4:	ab 01       	movw	r20, r22
   153d6:	2b 0d       	add	r18, r11
   153d8:	31 1d       	adc	r19, r1
   153da:	41 1d       	adc	r20, r1
   153dc:	51 1d       	adc	r21, r1
   153de:	a5 a1       	ldd	r26, Z+37	; 0x25
   153e0:	b6 a1       	ldd	r27, Z+38	; 0x26
   153e2:	0e 94 ef ec 	call	0x1d9de	; 0x1d9de <__mulshisi3>
   153e6:	6b 01       	movw	r12, r22
   153e8:	7c 01       	movw	r14, r24
   153ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   153ee:	85 ff       	sbrs	r24, 5
   153f0:	22 c0       	rjmp	.+68     	; 0x15436 <amigo_chs_to_logical+0xd0>
   153f2:	1f 92       	push	r1
   153f4:	bf 92       	push	r11
   153f6:	1f 92       	push	r1
   153f8:	cf 93       	push	r28
   153fa:	1f 92       	push	r1
   153fc:	0f 93       	push	r16
   153fe:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15402:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15406:	81 81       	ldd	r24, Z+1	; 0x01
   15408:	1f 92       	push	r1
   1540a:	8f 93       	push	r24
   1540c:	ff 92       	push	r15
   1540e:	ef 92       	push	r14
   15410:	df 92       	push	r13
   15412:	cf 92       	push	r12
   15414:	1f 93       	push	r17
   15416:	df 93       	push	r29
   15418:	86 eb       	ldi	r24, 0xB6	; 182
   1541a:	97 e2       	ldi	r25, 0x27	; 39
   1541c:	1f 92       	push	r1
   1541e:	9f 93       	push	r25
   15420:	8f 93       	push	r24
   15422:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15426:	8d b7       	in	r24, 0x3d	; 61
   15428:	9e b7       	in	r25, 0x3e	; 62
   1542a:	41 96       	adiw	r24, 0x11	; 17
   1542c:	0f b6       	in	r0, 0x3f	; 63
   1542e:	f8 94       	cli
   15430:	9e bf       	out	0x3e, r25	; 62
   15432:	0f be       	out	0x3f, r0	; 63
   15434:	8d bf       	out	0x3d, r24	; 61
   15436:	b6 01       	movw	r22, r12
   15438:	c7 01       	movw	r24, r14
   1543a:	cd b7       	in	r28, 0x3d	; 61
   1543c:	de b7       	in	r29, 0x3e	; 62
   1543e:	e9 e0       	ldi	r30, 0x09	; 9
   15440:	0c 94 2a ed 	jmp	0x1da54	; 0x1da54 <__epilogue_restores__+0x12>

00015444 <amigo_init>:
   15444:	ef 92       	push	r14
   15446:	ff 92       	push	r15
   15448:	0f 93       	push	r16
   1544a:	1f 93       	push	r17
   1544c:	cf 93       	push	r28
   1544e:	df 93       	push	r29
   15450:	0c e6       	ldi	r16, 0x6C	; 108
   15452:	1f e1       	ldi	r17, 0x1F	; 31
   15454:	cb e0       	ldi	r28, 0x0B	; 11
   15456:	d0 e0       	ldi	r29, 0x00	; 0
   15458:	84 e0       	ldi	r24, 0x04	; 4
   1545a:	f8 2e       	mov	r15, r24
   1545c:	92 e0       	ldi	r25, 0x02	; 2
   1545e:	e9 2e       	mov	r14, r25
   15460:	d8 01       	movw	r26, r16
   15462:	8c 91       	ld	r24, X
   15464:	81 30       	cpi	r24, 0x01	; 1
   15466:	31 f5       	brne	.+76     	; 0x154b4 <amigo_init+0x70>
   15468:	ce 01       	movw	r24, r28
   1546a:	0e 94 ff b7 	call	0x16ffe	; 0x16ffe <set_active_device>
   1546e:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15472:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15476:	10 82       	st	Z, r1
   15478:	9f 01       	movw	r18, r30
   1547a:	27 5f       	subi	r18, 0xF7	; 247
   1547c:	3f 4f       	sbci	r19, 0xFF	; 255
   1547e:	d9 01       	movw	r26, r18
   15480:	8f 2d       	mov	r24, r15
   15482:	1d 92       	st	X+, r1
   15484:	8a 95       	dec	r24
   15486:	e9 f7       	brne	.-6      	; 0x15482 <amigo_init+0x3e>
   15488:	2c 5f       	subi	r18, 0xFC	; 252
   1548a:	3f 4f       	sbci	r19, 0xFF	; 255
   1548c:	d9 01       	movw	r26, r18
   1548e:	8f 2d       	mov	r24, r15
   15490:	1d 92       	st	X+, r1
   15492:	8a 95       	dec	r24
   15494:	e9 f7       	brne	.-6      	; 0x15490 <amigo_init+0x4c>
   15496:	11 82       	std	Z+1, r1	; 0x01
   15498:	15 82       	std	Z+5, r1	; 0x05
   1549a:	14 82       	std	Z+4, r1	; 0x04
   1549c:	13 82       	std	Z+3, r1	; 0x03
   1549e:	e6 82       	std	Z+6, r14	; 0x06
   154a0:	10 86       	std	Z+8, r1	; 0x08
   154a2:	17 82       	std	Z+7, r1	; 0x07
   154a4:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   154a8:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   154ac:	81 81       	ldd	r24, Z+1	; 0x01
   154ae:	90 e0       	ldi	r25, 0x00	; 0
   154b0:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
   154b4:	21 97       	sbiw	r28, 0x01	; 1
   154b6:	07 50       	subi	r16, 0x07	; 7
   154b8:	11 09       	sbc	r17, r1
   154ba:	cf 3f       	cpi	r28, 0xFF	; 255
   154bc:	af ef       	ldi	r26, 0xFF	; 255
   154be:	da 07       	cpc	r29, r26
   154c0:	79 f6       	brne	.-98     	; 0x15460 <amigo_init+0x1c>
   154c2:	cd b7       	in	r28, 0x3d	; 61
   154c4:	de b7       	in	r29, 0x3e	; 62
   154c6:	e6 e0       	ldi	r30, 0x06	; 6
   154c8:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

000154cc <amigo_request_logical_address>:
   154cc:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   154d0:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   154d4:	15 86       	std	Z+13, r1	; 0x0d
   154d6:	83 81       	ldd	r24, Z+3	; 0x03
   154d8:	86 87       	std	Z+14, r24	; 0x0e
   154da:	84 81       	ldd	r24, Z+4	; 0x04
   154dc:	87 87       	std	Z+15, r24	; 0x0f
   154de:	85 81       	ldd	r24, Z+5	; 0x05
   154e0:	80 8b       	std	Z+16, r24	; 0x10
   154e2:	80 e0       	ldi	r24, 0x00	; 0
   154e4:	90 e0       	ldi	r25, 0x00	; 0
   154e6:	08 95       	ret

000154e8 <amigo_request_status>:
   154e8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   154ec:	85 ff       	sbrs	r24, 5
   154ee:	0a c0       	rjmp	.+20     	; 0x15504 <amigo_request_status+0x1c>
   154f0:	89 e8       	ldi	r24, 0x89	; 137
   154f2:	98 e2       	ldi	r25, 0x28	; 40
   154f4:	1f 92       	push	r1
   154f6:	9f 93       	push	r25
   154f8:	8f 93       	push	r24
   154fa:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   154fe:	0f 90       	pop	r0
   15500:	0f 90       	pop	r0
   15502:	0f 90       	pop	r0
   15504:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15508:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1550c:	11 86       	std	Z+9, r1	; 0x09
   1550e:	81 81       	ldd	r24, Z+1	; 0x01
   15510:	82 87       	std	Z+10, r24	; 0x0a
   15512:	8d e0       	ldi	r24, 0x0D	; 13
   15514:	83 87       	std	Z+11, r24	; 0x0b
   15516:	14 86       	std	Z+12, r1	; 0x0c
   15518:	0e 94 f3 74 	call	0xe9e6	; 0xe9e6 <mmc_wp_status>
   1551c:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15520:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15524:	89 2b       	or	r24, r25
   15526:	19 f0       	breq	.+6      	; 0x1552e <amigo_request_status+0x46>
   15528:	84 85       	ldd	r24, Z+12	; 0x0c
   1552a:	80 66       	ori	r24, 0x60	; 96
   1552c:	84 87       	std	Z+12, r24	; 0x0c
   1552e:	86 81       	ldd	r24, Z+6	; 0x06
   15530:	82 30       	cpi	r24, 0x02	; 2
   15532:	31 f4       	brne	.+12     	; 0x15540 <amigo_request_status+0x58>
   15534:	83 e1       	ldi	r24, 0x13	; 19
   15536:	81 87       	std	Z+9, r24	; 0x09
   15538:	84 85       	ldd	r24, Z+12	; 0x0c
   1553a:	88 60       	ori	r24, 0x08	; 8
   1553c:	84 87       	std	Z+12, r24	; 0x0c
   1553e:	21 c0       	rjmp	.+66     	; 0x15582 <amigo_request_status+0x9a>
   15540:	27 81       	ldd	r18, Z+7	; 0x07
   15542:	30 85       	ldd	r19, Z+8	; 0x08
   15544:	21 15       	cp	r18, r1
   15546:	31 05       	cpc	r19, r1
   15548:	11 f4       	brne	.+4      	; 0x1554e <amigo_request_status+0x66>
   1554a:	81 30       	cpi	r24, 0x01	; 1
   1554c:	d1 f4       	brne	.+52     	; 0x15582 <amigo_request_status+0x9a>
   1554e:	26 fd       	sbrc	r18, 6
   15550:	0c c0       	rjmp	.+24     	; 0x1556a <amigo_request_status+0x82>
   15552:	25 ff       	sbrs	r18, 5
   15554:	03 c0       	rjmp	.+6      	; 0x1555c <amigo_request_status+0x74>
   15556:	8a e0       	ldi	r24, 0x0A	; 10
   15558:	81 87       	std	Z+9, r24	; 0x09
   1555a:	0d c0       	rjmp	.+26     	; 0x15576 <amigo_request_status+0x8e>
   1555c:	84 85       	ldd	r24, Z+12	; 0x0c
   1555e:	24 ff       	sbrs	r18, 4
   15560:	02 c0       	rjmp	.+4      	; 0x15566 <amigo_request_status+0x7e>
   15562:	83 60       	ori	r24, 0x03	; 3
   15564:	07 c0       	rjmp	.+14     	; 0x15574 <amigo_request_status+0x8c>
   15566:	21 ff       	sbrs	r18, 1
   15568:	02 c0       	rjmp	.+4      	; 0x1556e <amigo_request_status+0x86>
   1556a:	83 e1       	ldi	r24, 0x13	; 19
   1556c:	f5 cf       	rjmp	.-22     	; 0x15558 <amigo_request_status+0x70>
   1556e:	22 ff       	sbrs	r18, 2
   15570:	02 c0       	rjmp	.+4      	; 0x15576 <amigo_request_status+0x8e>
   15572:	84 60       	ori	r24, 0x04	; 4
   15574:	84 87       	std	Z+12, r24	; 0x0c
   15576:	84 85       	ldd	r24, Z+12	; 0x0c
   15578:	80 61       	ori	r24, 0x10	; 16
   1557a:	84 87       	std	Z+12, r24	; 0x0c
   1557c:	83 85       	ldd	r24, Z+11	; 0x0b
   1557e:	80 68       	ori	r24, 0x80	; 128
   15580:	83 87       	std	Z+11, r24	; 0x0b
   15582:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15586:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   1558a:	81 81       	ldd	r24, Z+1	; 0x01
   1558c:	90 e0       	ldi	r25, 0x00	; 0
   1558e:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   15592:	80 e0       	ldi	r24, 0x00	; 0
   15594:	90 e0       	ldi	r25, 0x00	; 0
   15596:	08 95       	ret

00015598 <amigo_send_logical_address>:
   15598:	a2 e0       	ldi	r26, 0x02	; 2
   1559a:	b0 e0       	ldi	r27, 0x00	; 0
   1559c:	e2 ed       	ldi	r30, 0xD2	; 210
   1559e:	fa ea       	ldi	r31, 0xAA	; 170
   155a0:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   155a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155a8:	85 ff       	sbrs	r24, 5
   155aa:	0a c0       	rjmp	.+20     	; 0x155c0 <amigo_send_logical_address+0x28>
   155ac:	8b e6       	ldi	r24, 0x6B	; 107
   155ae:	98 e2       	ldi	r25, 0x28	; 40
   155b0:	1f 92       	push	r1
   155b2:	9f 93       	push	r25
   155b4:	8f 93       	push	r24
   155b6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   155ba:	0f 90       	pop	r0
   155bc:	0f 90       	pop	r0
   155be:	0f 90       	pop	r0
   155c0:	80 e0       	ldi	r24, 0x00	; 0
   155c2:	91 e0       	ldi	r25, 0x01	; 1
   155c4:	9a 83       	std	Y+2, r25	; 0x02
   155c6:	89 83       	std	Y+1, r24	; 0x01
   155c8:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <AMIGOs>
   155cc:	90 91 c7 19 	lds	r25, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   155d0:	ae 01       	movw	r20, r28
   155d2:	4f 5f       	subi	r20, 0xFF	; 255
   155d4:	5f 4f       	sbci	r21, 0xFF	; 255
   155d6:	64 e0       	ldi	r22, 0x04	; 4
   155d8:	70 e0       	ldi	r23, 0x00	; 0
   155da:	0d 96       	adiw	r24, 0x0d	; 13
   155dc:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   155e0:	29 81       	ldd	r18, Y+1	; 0x01
   155e2:	3a 81       	ldd	r19, Y+2	; 0x02
   155e4:	22 27       	eor	r18, r18
   155e6:	30 7d       	andi	r19, 0xD0	; 208
   155e8:	23 2b       	or	r18, r19
   155ea:	49 f0       	breq	.+18     	; 0x155fe <amigo_send_logical_address+0x66>
   155ec:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   155f0:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   155f4:	27 81       	ldd	r18, Z+7	; 0x07
   155f6:	30 85       	ldd	r19, Z+8	; 0x08
   155f8:	20 62       	ori	r18, 0x20	; 32
   155fa:	30 87       	std	Z+8, r19	; 0x08
   155fc:	27 83       	std	Z+7, r18	; 0x07
   155fe:	04 97       	sbiw	r24, 0x04	; 4
   15600:	c9 f0       	breq	.+50     	; 0x15634 <amigo_send_logical_address+0x9c>
   15602:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15606:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1560a:	87 81       	ldd	r24, Z+7	; 0x07
   1560c:	90 85       	ldd	r25, Z+8	; 0x08
   1560e:	80 62       	ori	r24, 0x20	; 32
   15610:	90 87       	std	Z+8, r25	; 0x08
   15612:	87 83       	std	Z+7, r24	; 0x07
   15614:	81 e0       	ldi	r24, 0x01	; 1
   15616:	86 83       	std	Z+6, r24	; 0x06
   15618:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1561c:	80 ff       	sbrs	r24, 0
   1561e:	0a c0       	rjmp	.+20     	; 0x15634 <amigo_send_logical_address+0x9c>
   15620:	81 e5       	ldi	r24, 0x51	; 81
   15622:	98 e2       	ldi	r25, 0x28	; 40
   15624:	1f 92       	push	r1
   15626:	9f 93       	push	r25
   15628:	8f 93       	push	r24
   1562a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1562e:	0f 90       	pop	r0
   15630:	0f 90       	pop	r0
   15632:	0f 90       	pop	r0
   15634:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15638:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   1563c:	81 81       	ldd	r24, Z+1	; 0x01
   1563e:	90 e0       	ldi	r25, 0x00	; 0
   15640:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   15644:	89 81       	ldd	r24, Y+1	; 0x01
   15646:	9a 81       	ldd	r25, Y+2	; 0x02
   15648:	88 27       	eor	r24, r24
   1564a:	90 7d       	andi	r25, 0xD0	; 208
   1564c:	22 96       	adiw	r28, 0x02	; 2
   1564e:	e2 e0       	ldi	r30, 0x02	; 2
   15650:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00015654 <amigo_send_status>:
   15654:	a2 e0       	ldi	r26, 0x02	; 2
   15656:	b0 e0       	ldi	r27, 0x00	; 0
   15658:	e0 e3       	ldi	r30, 0x30	; 48
   1565a:	fb ea       	ldi	r31, 0xAB	; 171
   1565c:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   15660:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15664:	85 ff       	sbrs	r24, 5
   15666:	0a c0       	rjmp	.+20     	; 0x1567c <amigo_send_status+0x28>
   15668:	8c e3       	ldi	r24, 0x3C	; 60
   1566a:	98 e2       	ldi	r25, 0x28	; 40
   1566c:	1f 92       	push	r1
   1566e:	9f 93       	push	r25
   15670:	8f 93       	push	r24
   15672:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15676:	0f 90       	pop	r0
   15678:	0f 90       	pop	r0
   1567a:	0f 90       	pop	r0
   1567c:	80 e0       	ldi	r24, 0x00	; 0
   1567e:	91 e0       	ldi	r25, 0x01	; 1
   15680:	9a 83       	std	Y+2, r25	; 0x02
   15682:	89 83       	std	Y+1, r24	; 0x01
   15684:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <AMIGOs>
   15688:	90 91 c7 19 	lds	r25, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1568c:	ae 01       	movw	r20, r28
   1568e:	4f 5f       	subi	r20, 0xFF	; 255
   15690:	5f 4f       	sbci	r21, 0xFF	; 255
   15692:	64 e0       	ldi	r22, 0x04	; 4
   15694:	70 e0       	ldi	r23, 0x00	; 0
   15696:	09 96       	adiw	r24, 0x09	; 9
   15698:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   1569c:	29 81       	ldd	r18, Y+1	; 0x01
   1569e:	3a 81       	ldd	r19, Y+2	; 0x02
   156a0:	22 27       	eor	r18, r18
   156a2:	30 7d       	andi	r19, 0xD0	; 208
   156a4:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   156a8:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   156ac:	23 2b       	or	r18, r19
   156ae:	29 f0       	breq	.+10     	; 0x156ba <amigo_send_status+0x66>
   156b0:	27 81       	ldd	r18, Z+7	; 0x07
   156b2:	30 85       	ldd	r19, Z+8	; 0x08
   156b4:	20 62       	ori	r18, 0x20	; 32
   156b6:	30 87       	std	Z+8, r19	; 0x08
   156b8:	27 83       	std	Z+7, r18	; 0x07
   156ba:	04 97       	sbiw	r24, 0x04	; 4
   156bc:	b1 f0       	breq	.+44     	; 0x156ea <amigo_send_status+0x96>
   156be:	87 81       	ldd	r24, Z+7	; 0x07
   156c0:	90 85       	ldd	r25, Z+8	; 0x08
   156c2:	80 62       	ori	r24, 0x20	; 32
   156c4:	90 87       	std	Z+8, r25	; 0x08
   156c6:	87 83       	std	Z+7, r24	; 0x07
   156c8:	81 e0       	ldi	r24, 0x01	; 1
   156ca:	86 83       	std	Z+6, r24	; 0x06
   156cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   156d0:	80 ff       	sbrs	r24, 0
   156d2:	0e c0       	rjmp	.+28     	; 0x156f0 <amigo_send_status+0x9c>
   156d4:	82 e2       	ldi	r24, 0x22	; 34
   156d6:	98 e2       	ldi	r25, 0x28	; 40
   156d8:	1f 92       	push	r1
   156da:	9f 93       	push	r25
   156dc:	8f 93       	push	r24
   156de:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   156e2:	0f 90       	pop	r0
   156e4:	0f 90       	pop	r0
   156e6:	0f 90       	pop	r0
   156e8:	03 c0       	rjmp	.+6      	; 0x156f0 <amigo_send_status+0x9c>
   156ea:	10 86       	std	Z+8, r1	; 0x08
   156ec:	17 82       	std	Z+7, r1	; 0x07
   156ee:	16 82       	std	Z+6, r1	; 0x06
   156f0:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   156f4:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   156f8:	81 81       	ldd	r24, Z+1	; 0x01
   156fa:	90 e0       	ldi	r25, 0x00	; 0
   156fc:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   15700:	89 81       	ldd	r24, Y+1	; 0x01
   15702:	9a 81       	ldd	r25, Y+2	; 0x02
   15704:	88 27       	eor	r24, r24
   15706:	90 7d       	andi	r25, 0xD0	; 208
   15708:	22 96       	adiw	r28, 0x02	; 2
   1570a:	e2 e0       	ldi	r30, 0x02	; 2
   1570c:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00015710 <amigo_increment>:
   15710:	a1 e1       	ldi	r26, 0x11	; 17
   15712:	b0 e0       	ldi	r27, 0x00	; 0
   15714:	ee e8       	ldi	r30, 0x8E	; 142
   15716:	fb ea       	ldi	r31, 0xAB	; 171
   15718:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   1571c:	bc 01       	movw	r22, r24
   1571e:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15722:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15726:	91 e1       	ldi	r25, 0x11	; 17
   15728:	de 01       	movw	r26, r28
   1572a:	11 96       	adiw	r26, 0x01	; 1
   1572c:	01 90       	ld	r0, Z+
   1572e:	0d 92       	st	X+, r0
   15730:	9a 95       	dec	r25
   15732:	e1 f7       	brne	.-8      	; 0x1572c <amigo_increment+0x1c>
   15734:	9e 81       	ldd	r25, Y+6	; 0x06
   15736:	9f 5f       	subi	r25, 0xFF	; 255
   15738:	9e 83       	std	Y+6, r25	; 0x06
   1573a:	ce 01       	movw	r24, r28
   1573c:	01 96       	adiw	r24, 0x01	; 1
   1573e:	c3 dd       	rcall	.-1146   	; 0x152c6 <amigo_overflow_check>
   15740:	00 97       	sbiw	r24, 0x00	; 0
   15742:	59 f4       	brne	.+22     	; 0x1575a <amigo_increment+0x4a>
   15744:	a0 91 c6 19 	lds	r26, 0x19C6	; 0x8019c6 <AMIGOs>
   15748:	b0 91 c7 19 	lds	r27, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1574c:	21 e1       	ldi	r18, 0x11	; 17
   1574e:	fe 01       	movw	r30, r28
   15750:	31 96       	adiw	r30, 0x01	; 1
   15752:	01 90       	ld	r0, Z+
   15754:	0d 92       	st	X+, r0
   15756:	2a 95       	dec	r18
   15758:	e1 f7       	brne	.-8      	; 0x15752 <amigo_increment+0x42>
   1575a:	61 96       	adiw	r28, 0x11	; 17
   1575c:	e2 e0       	ldi	r30, 0x02	; 2
   1575e:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00015762 <amigo_seek>:
   15762:	0f 93       	push	r16
   15764:	1f 93       	push	r17
   15766:	cf 93       	push	r28
   15768:	df 93       	push	r29
   1576a:	ec 01       	movw	r28, r24
   1576c:	60 ef       	ldi	r22, 0xF0	; 240
   1576e:	72 e1       	ldi	r23, 0x12	; 18
   15770:	aa dd       	rcall	.-1196   	; 0x152c6 <amigo_overflow_check>
   15772:	8c 01       	movw	r16, r24
   15774:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15778:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1577c:	89 2b       	or	r24, r25
   1577e:	41 f0       	breq	.+16     	; 0x15790 <amigo_seek+0x2e>
   15780:	81 e0       	ldi	r24, 0x01	; 1
   15782:	86 83       	std	Z+6, r24	; 0x06
   15784:	87 81       	ldd	r24, Z+7	; 0x07
   15786:	90 85       	ldd	r25, Z+8	; 0x08
   15788:	84 60       	ori	r24, 0x04	; 4
   1578a:	90 87       	std	Z+8, r25	; 0x08
   1578c:	87 83       	std	Z+7, r24	; 0x07
   1578e:	06 c0       	rjmp	.+12     	; 0x1579c <amigo_seek+0x3a>
   15790:	8d 81       	ldd	r24, Y+5	; 0x05
   15792:	85 83       	std	Z+5, r24	; 0x05
   15794:	8c 81       	ldd	r24, Y+4	; 0x04
   15796:	84 83       	std	Z+4, r24	; 0x04
   15798:	8b 81       	ldd	r24, Y+3	; 0x03
   1579a:	83 83       	std	Z+3, r24	; 0x03
   1579c:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   157a0:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   157a4:	81 81       	ldd	r24, Z+1	; 0x01
   157a6:	90 e0       	ldi	r25, 0x00	; 0
   157a8:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   157ac:	c8 01       	movw	r24, r16
   157ae:	df 91       	pop	r29
   157b0:	cf 91       	pop	r28
   157b2:	1f 91       	pop	r17
   157b4:	0f 91       	pop	r16
   157b6:	08 95       	ret

000157b8 <amigo_verify>:
   157b8:	8f 92       	push	r8
   157ba:	9f 92       	push	r9
   157bc:	af 92       	push	r10
   157be:	bf 92       	push	r11
   157c0:	ef 92       	push	r14
   157c2:	ff 92       	push	r15
   157c4:	0f 93       	push	r16
   157c6:	1f 93       	push	r17
   157c8:	cf 93       	push	r28
   157ca:	df 93       	push	r29
   157cc:	7c 01       	movw	r14, r24
   157ce:	65 ef       	ldi	r22, 0xF5	; 245
   157d0:	72 e1       	ldi	r23, 0x12	; 18
   157d2:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <AMIGOs>
   157d6:	90 91 c7 19 	lds	r25, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   157da:	c5 dd       	rcall	.-1142   	; 0x15366 <amigo_chs_to_logical>
   157dc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   157e0:	25 ff       	sbrs	r18, 5
   157e2:	15 c0       	rjmp	.+42     	; 0x1580e <amigo_verify+0x56>
   157e4:	ff 92       	push	r15
   157e6:	ef 92       	push	r14
   157e8:	9f 93       	push	r25
   157ea:	8f 93       	push	r24
   157ec:	7f 93       	push	r23
   157ee:	6f 93       	push	r22
   157f0:	81 ee       	ldi	r24, 0xE1	; 225
   157f2:	97 e2       	ldi	r25, 0x27	; 39
   157f4:	1f 92       	push	r1
   157f6:	9f 93       	push	r25
   157f8:	8f 93       	push	r24
   157fa:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   157fe:	8d b7       	in	r24, 0x3d	; 61
   15800:	9e b7       	in	r25, 0x3e	; 62
   15802:	09 96       	adiw	r24, 0x09	; 9
   15804:	0f b6       	in	r0, 0x3f	; 63
   15806:	f8 94       	cli
   15808:	9e bf       	out	0x3e, r25	; 62
   1580a:	0f be       	out	0x3f, r0	; 63
   1580c:	8d bf       	out	0x3d, r24	; 61
   1580e:	e7 01       	movw	r28, r14
   15810:	20 97       	sbiw	r28, 0x00	; 0
   15812:	09 f4       	brne	.+2      	; 0x15816 <amigo_verify+0x5e>
   15814:	49 c0       	rjmp	.+146    	; 0x158a8 <amigo_verify+0xf0>
   15816:	62 e0       	ldi	r22, 0x02	; 2
   15818:	73 e1       	ldi	r23, 0x13	; 19
   1581a:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <AMIGOs>
   1581e:	90 91 c7 19 	lds	r25, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15822:	a1 dd       	rcall	.-1214   	; 0x15366 <amigo_chs_to_logical>
   15824:	4b 01       	movw	r8, r22
   15826:	5c 01       	movw	r10, r24
   15828:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1582c:	86 fd       	sbrc	r24, 6
   1582e:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   15832:	80 91 c8 19 	lds	r24, 0x19C8	; 0x8019c8 <AMIGOp>
   15836:	90 91 c9 19 	lds	r25, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   1583a:	e0 90 c6 19 	lds	r14, 0x19C6	; 0x8019c6 <AMIGOs>
   1583e:	f0 90 c7 19 	lds	r15, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15842:	e7 e0       	ldi	r30, 0x07	; 7
   15844:	ee 0e       	add	r14, r30
   15846:	f1 1c       	adc	r15, r1
   15848:	fc 01       	movw	r30, r24
   1584a:	05 a1       	ldd	r16, Z+37	; 0x25
   1584c:	16 a1       	ldd	r17, Z+38	; 0x26
   1584e:	25 e1       	ldi	r18, 0x15	; 21
   15850:	3d e1       	ldi	r19, 0x1D	; 29
   15852:	b5 01       	movw	r22, r10
   15854:	a4 01       	movw	r20, r8
   15856:	02 96       	adiw	r24, 0x02	; 2
   15858:	0e 94 e7 8c 	call	0x119ce	; 0x119ce <dbf_open_read>
   1585c:	7c 01       	movw	r14, r24
   1585e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15862:	86 ff       	sbrs	r24, 6
   15864:	04 c0       	rjmp	.+8      	; 0x1586e <amigo_verify+0xb6>
   15866:	8a e0       	ldi	r24, 0x0A	; 10
   15868:	9e e0       	ldi	r25, 0x0E	; 14
   1586a:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   1586e:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15872:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15876:	85 a1       	ldd	r24, Z+37	; 0x25
   15878:	96 a1       	ldd	r25, Z+38	; 0x26
   1587a:	e8 16       	cp	r14, r24
   1587c:	f9 06       	cpc	r15, r25
   1587e:	61 f0       	breq	.+24     	; 0x15898 <amigo_verify+0xe0>
   15880:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15884:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15888:	81 e0       	ldi	r24, 0x01	; 1
   1588a:	86 83       	std	Z+6, r24	; 0x06
   1588c:	87 81       	ldd	r24, Z+7	; 0x07
   1588e:	90 85       	ldd	r25, Z+8	; 0x08
   15890:	81 60       	ori	r24, 0x01	; 1
   15892:	90 87       	std	Z+8, r25	; 0x08
   15894:	87 83       	std	Z+7, r24	; 0x07
   15896:	0b c0       	rjmp	.+22     	; 0x158ae <amigo_verify+0xf6>
   15898:	8a e0       	ldi	r24, 0x0A	; 10
   1589a:	93 e1       	ldi	r25, 0x13	; 19
   1589c:	39 df       	rcall	.-398    	; 0x15710 <amigo_increment>
   1589e:	21 97       	sbiw	r28, 0x01	; 1
   158a0:	89 2b       	or	r24, r25
   158a2:	09 f4       	brne	.+2      	; 0x158a6 <amigo_verify+0xee>
   158a4:	b5 cf       	rjmp	.-150    	; 0x15810 <amigo_verify+0x58>
   158a6:	03 c0       	rjmp	.+6      	; 0x158ae <amigo_verify+0xf6>
   158a8:	c0 e0       	ldi	r28, 0x00	; 0
   158aa:	d0 e0       	ldi	r29, 0x00	; 0
   158ac:	02 c0       	rjmp	.+4      	; 0x158b2 <amigo_verify+0xfa>
   158ae:	c1 e0       	ldi	r28, 0x01	; 1
   158b0:	d0 e0       	ldi	r29, 0x00	; 0
   158b2:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   158b6:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   158ba:	81 81       	ldd	r24, Z+1	; 0x01
   158bc:	90 e0       	ldi	r25, 0x00	; 0
   158be:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   158c2:	ce 01       	movw	r24, r28
   158c4:	df 91       	pop	r29
   158c6:	cf 91       	pop	r28
   158c8:	1f 91       	pop	r17
   158ca:	0f 91       	pop	r16
   158cc:	ff 90       	pop	r15
   158ce:	ef 90       	pop	r14
   158d0:	bf 90       	pop	r11
   158d2:	af 90       	pop	r10
   158d4:	9f 90       	pop	r9
   158d6:	8f 90       	pop	r8
   158d8:	08 95       	ret

000158da <amigo_format>:
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   158da:	ef 92       	push	r14
   158dc:	ff 92       	push	r15
   158de:	0f 93       	push	r16
   158e0:	1f 93       	push	r17
   158e2:	cf 93       	push	r28
   158e4:	df 93       	push	r29
   158e6:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   158ea:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   158ee:	15 82       	std	Z+5, r1	; 0x05
   158f0:	14 82       	std	Z+4, r1	; 0x04
   158f2:	13 82       	std	Z+3, r1	; 0x03
   158f4:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   158f8:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   158fc:	45 a1       	ldd	r20, Z+37	; 0x25
   158fe:	56 a1       	ldd	r21, Z+38	; 0x26
   15900:	68 2f       	mov	r22, r24
   15902:	70 e0       	ldi	r23, 0x00	; 0
   15904:	85 e1       	ldi	r24, 0x15	; 21
   15906:	9d e1       	ldi	r25, 0x1D	; 29
   15908:	0e 94 d1 f1 	call	0x1e3a2	; 0x1e3a2 <memset>
   1590c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15910:	85 ff       	sbrs	r24, 5
   15912:	0a c0       	rjmp	.+20     	; 0x15928 <amigo_format+0x4e>
   15914:	86 ea       	ldi	r24, 0xA6	; 166
   15916:	97 e2       	ldi	r25, 0x27	; 39
   15918:	1f 92       	push	r1
   1591a:	9f 93       	push	r25
   1591c:	8f 93       	push	r24
   1591e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15922:	0f 90       	pop	r0
   15924:	0f 90       	pop	r0
   15926:	0f 90       	pop	r0
   15928:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1592c:	86 fd       	sbrc	r24, 6
   1592e:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   15932:	61 e1       	ldi	r22, 0x11	; 17
   15934:	73 e1       	ldi	r23, 0x13	; 19
   15936:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <AMIGOs>
   1593a:	90 91 c7 19 	lds	r25, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1593e:	13 dd       	rcall	.-1498   	; 0x15366 <amigo_chs_to_logical>
   15940:	ab 01       	movw	r20, r22
   15942:	bc 01       	movw	r22, r24
   15944:	80 91 c8 19 	lds	r24, 0x19C8	; 0x8019c8 <AMIGOp>
   15948:	90 91 c9 19 	lds	r25, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   1594c:	e0 90 c6 19 	lds	r14, 0x19C6	; 0x8019c6 <AMIGOs>
   15950:	f0 90 c7 19 	lds	r15, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15954:	27 e0       	ldi	r18, 0x07	; 7
   15956:	e2 0e       	add	r14, r18
   15958:	f1 1c       	adc	r15, r1
   1595a:	fc 01       	movw	r30, r24
   1595c:	05 a1       	ldd	r16, Z+37	; 0x25
   1595e:	16 a1       	ldd	r17, Z+38	; 0x26
   15960:	25 e1       	ldi	r18, 0x15	; 21
   15962:	3d e1       	ldi	r19, 0x1D	; 29
   15964:	02 96       	adiw	r24, 0x02	; 2
   15966:	0e 94 3e 8d 	call	0x11a7c	; 0x11a7c <dbf_open_write>
   1596a:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   1596e:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15972:	25 a1       	ldd	r18, Z+37	; 0x25
   15974:	36 a1       	ldd	r19, Z+38	; 0x26
    return ( uart_rx_count( uart ) );
   15976:	82 17       	cp	r24, r18
}
   15978:	93 07       	cpc	r25, r19
   1597a:	71 f0       	breq	.+28     	; 0x15998 <amigo_format+0xbe>
   1597c:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15980:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15984:	87 81       	ldd	r24, Z+7	; 0x07
   15986:	90 85       	ldd	r25, Z+8	; 0x08
   15988:	82 60       	ori	r24, 0x02	; 2
   1598a:	90 87       	std	Z+8, r25	; 0x08
   1598c:	87 83       	std	Z+7, r24	; 0x07
   1598e:	81 e0       	ldi	r24, 0x01	; 1
   15990:	86 83       	std	Z+6, r24	; 0x06
   15992:	c1 e0       	ldi	r28, 0x01	; 1
   15994:	d0 e0       	ldi	r29, 0x00	; 0
   15996:	0f c0       	rjmp	.+30     	; 0x159b6 <amigo_format+0xdc>
   15998:	80 e0       	ldi	r24, 0x00	; 0
   1599a:	90 e0       	ldi	r25, 0x00	; 0
   1599c:	b9 de       	rcall	.-654    	; 0x15710 <amigo_increment>
   1599e:	89 2b       	or	r24, r25
   159a0:	41 f2       	breq	.-112    	; 0x15932 <amigo_format+0x58>
   159a2:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   159a6:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   159aa:	15 82       	std	Z+5, r1	; 0x05
   159ac:	14 82       	std	Z+4, r1	; 0x04
   159ae:	13 82       	std	Z+3, r1	; 0x03
   159b0:	16 82       	std	Z+6, r1	; 0x06
   159b2:	c0 e0       	ldi	r28, 0x00	; 0
   159b4:	d0 e0       	ldi	r29, 0x00	; 0
   159b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159ba:	86 ff       	sbrs	r24, 6
   159bc:	04 c0       	rjmp	.+8      	; 0x159c6 <amigo_format+0xec>
   159be:	81 e1       	ldi	r24, 0x11	; 17
   159c0:	93 e1       	ldi	r25, 0x13	; 19
   159c2:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   159c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159ca:	85 ff       	sbrs	r24, 5
   159cc:	0a c0       	rjmp	.+20     	; 0x159e2 <amigo_format+0x108>
   159ce:	81 e9       	ldi	r24, 0x91	; 145
   159d0:	97 e2       	ldi	r25, 0x27	; 39
   159d2:	1f 92       	push	r1
   159d4:	9f 93       	push	r25
   159d6:	8f 93       	push	r24
   159d8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   159dc:	0f 90       	pop	r0
   159de:	0f 90       	pop	r0
   159e0:	0f 90       	pop	r0
   159e2:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   159e6:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   159ea:	81 81       	ldd	r24, Z+1	; 0x01
   159ec:	90 e0       	ldi	r25, 0x00	; 0
   159ee:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   159f2:	ce 01       	movw	r24, r28
   159f4:	cd b7       	in	r28, 0x3d	; 61
   159f6:	de b7       	in	r29, 0x3e	; 62
   159f8:	e6 e0       	ldi	r30, 0x06	; 6
   159fa:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

000159fe <amigo_buffered_read>:
   159fe:	8f 92       	push	r8
   15a00:	9f 92       	push	r9
   15a02:	af 92       	push	r10
   15a04:	bf 92       	push	r11
   15a06:	ef 92       	push	r14
   15a08:	ff 92       	push	r15
   15a0a:	0f 93       	push	r16
   15a0c:	1f 93       	push	r17
   15a0e:	cf 93       	push	r28
   15a10:	df 93       	push	r29
   15a12:	00 d0       	rcall	.+0      	; 0x15a14 <amigo_buffered_read+0x16>
   15a14:	cd b7       	in	r28, 0x3d	; 61
   15a16:	de b7       	in	r29, 0x3e	; 62
   15a18:	68 e1       	ldi	r22, 0x18	; 24
   15a1a:	73 e1       	ldi	r23, 0x13	; 19
   15a1c:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <AMIGOs>
   15a20:	90 91 c7 19 	lds	r25, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15a24:	a0 dc       	rcall	.-1728   	; 0x15366 <amigo_chs_to_logical>
   15a26:	4b 01       	movw	r8, r22
   15a28:	5c 01       	movw	r10, r24
   15a2a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a2e:	86 fd       	sbrc	r24, 6
   15a30:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   15a34:	80 91 c8 19 	lds	r24, 0x19C8	; 0x8019c8 <AMIGOp>
   15a38:	90 91 c9 19 	lds	r25, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15a3c:	e0 90 c6 19 	lds	r14, 0x19C6	; 0x8019c6 <AMIGOs>
   15a40:	f0 90 c7 19 	lds	r15, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15a44:	27 e0       	ldi	r18, 0x07	; 7
   15a46:	e2 0e       	add	r14, r18
   15a48:	f1 1c       	adc	r15, r1
   15a4a:	fc 01       	movw	r30, r24
   15a4c:	05 a1       	ldd	r16, Z+37	; 0x25
   15a4e:	16 a1       	ldd	r17, Z+38	; 0x26
   15a50:	25 e1       	ldi	r18, 0x15	; 21
   15a52:	3d e1       	ldi	r19, 0x1D	; 29
   15a54:	b5 01       	movw	r22, r10
   15a56:	a4 01       	movw	r20, r8
   15a58:	02 96       	adiw	r24, 0x02	; 2
   15a5a:	0e 94 e7 8c 	call	0x119ce	; 0x119ce <dbf_open_read>
   15a5e:	7c 01       	movw	r14, r24
   15a60:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a64:	86 ff       	sbrs	r24, 6
   15a66:	04 c0       	rjmp	.+8      	; 0x15a70 <amigo_buffered_read+0x72>
   15a68:	8a e0       	ldi	r24, 0x0A	; 10
   15a6a:	9e e0       	ldi	r25, 0x0E	; 14
   15a6c:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   15a70:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15a74:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15a78:	85 a1       	ldd	r24, Z+37	; 0x25
   15a7a:	96 a1       	ldd	r25, Z+38	; 0x26
   15a7c:	e8 16       	cp	r14, r24
   15a7e:	f9 06       	cpc	r15, r25
   15a80:	39 f0       	breq	.+14     	; 0x15a90 <amigo_buffered_read+0x92>
   15a82:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15a86:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15a8a:	81 e0       	ldi	r24, 0x01	; 1
   15a8c:	86 83       	std	Z+6, r24	; 0x06
   15a8e:	6c c0       	rjmp	.+216    	; 0x15b68 <amigo_buffered_read+0x16a>
   15a90:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a94:	87 fd       	sbrc	r24, 7
   15a96:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   15a9a:	80 e0       	ldi	r24, 0x00	; 0
   15a9c:	91 e0       	ldi	r25, 0x01	; 1
   15a9e:	9a 83       	std	Y+2, r25	; 0x02
   15aa0:	89 83       	std	Y+1, r24	; 0x01
   15aa2:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15aa6:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15aaa:	65 a1       	ldd	r22, Z+37	; 0x25
   15aac:	76 a1       	ldd	r23, Z+38	; 0x26
   15aae:	ae 01       	movw	r20, r28
   15ab0:	4f 5f       	subi	r20, 0xFF	; 255
   15ab2:	5f 4f       	sbci	r21, 0xFF	; 255
   15ab4:	85 e1       	ldi	r24, 0x15	; 21
   15ab6:	9d e1       	ldi	r25, 0x1D	; 29
   15ab8:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   15abc:	7c 01       	movw	r14, r24
   15abe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ac2:	87 ff       	sbrs	r24, 7
   15ac4:	04 c0       	rjmp	.+8      	; 0x15ace <amigo_buffered_read+0xd0>
   15ac6:	86 e2       	ldi	r24, 0x26	; 38
   15ac8:	93 e1       	ldi	r25, 0x13	; 19
   15aca:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   15ace:	89 81       	ldd	r24, Y+1	; 0x01
   15ad0:	9a 81       	ldd	r25, Y+2	; 0x02
   15ad2:	88 27       	eor	r24, r24
   15ad4:	90 7d       	andi	r25, 0xD0	; 208
   15ad6:	89 2b       	or	r24, r25
   15ad8:	49 f4       	brne	.+18     	; 0x15aec <amigo_buffered_read+0xee>
   15ada:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15ade:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15ae2:	85 a1       	ldd	r24, Z+37	; 0x25
   15ae4:	96 a1       	ldd	r25, Z+38	; 0x26
   15ae6:	e8 16       	cp	r14, r24
   15ae8:	f9 06       	cpc	r15, r25
   15aea:	31 f1       	breq	.+76     	; 0x15b38 <amigo_buffered_read+0x13a>
   15aec:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15af0:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15af4:	81 e0       	ldi	r24, 0x01	; 1
   15af6:	86 83       	std	Z+6, r24	; 0x06
   15af8:	87 81       	ldd	r24, Z+7	; 0x07
   15afa:	90 85       	ldd	r25, Z+8	; 0x08
   15afc:	80 62       	ori	r24, 0x20	; 32
   15afe:	90 87       	std	Z+8, r25	; 0x08
   15b00:	87 83       	std	Z+7, r24	; 0x07
   15b02:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b06:	80 ff       	sbrs	r24, 0
   15b08:	0a c0       	rjmp	.+20     	; 0x15b1e <amigo_buffered_read+0x120>
   15b0a:	87 e7       	ldi	r24, 0x77	; 119
   15b0c:	97 e2       	ldi	r25, 0x27	; 39
   15b0e:	1f 92       	push	r1
   15b10:	9f 93       	push	r25
   15b12:	8f 93       	push	r24
   15b14:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15b18:	0f 90       	pop	r0
   15b1a:	0f 90       	pop	r0
   15b1c:	0f 90       	pop	r0
   15b1e:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15b22:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15b26:	81 81       	ldd	r24, Z+1	; 0x01
   15b28:	90 e0       	ldi	r25, 0x00	; 0
   15b2a:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   15b2e:	89 81       	ldd	r24, Y+1	; 0x01
   15b30:	9a 81       	ldd	r25, Y+2	; 0x02
   15b32:	88 27       	eor	r24, r24
   15b34:	90 7d       	andi	r25, 0xD0	; 208
   15b36:	1a c0       	rjmp	.+52     	; 0x15b6c <amigo_buffered_read+0x16e>
   15b38:	88 e1       	ldi	r24, 0x18	; 24
   15b3a:	93 e1       	ldi	r25, 0x13	; 19
   15b3c:	e9 dd       	rcall	.-1070   	; 0x15710 <amigo_increment>
   15b3e:	89 2b       	or	r24, r25
   15b40:	59 f0       	breq	.+22     	; 0x15b58 <amigo_buffered_read+0x15a>
   15b42:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15b46:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15b4a:	81 e0       	ldi	r24, 0x01	; 1
   15b4c:	86 83       	std	Z+6, r24	; 0x06
   15b4e:	87 81       	ldd	r24, Z+7	; 0x07
   15b50:	90 85       	ldd	r25, Z+8	; 0x08
   15b52:	84 60       	ori	r24, 0x04	; 4
   15b54:	90 87       	std	Z+8, r25	; 0x08
   15b56:	87 83       	std	Z+7, r24	; 0x07
   15b58:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15b5c:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15b60:	81 81       	ldd	r24, Z+1	; 0x01
   15b62:	90 e0       	ldi	r25, 0x00	; 0
   15b64:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   15b68:	80 e0       	ldi	r24, 0x00	; 0
   15b6a:	90 e0       	ldi	r25, 0x00	; 0
   15b6c:	0f 90       	pop	r0
   15b6e:	0f 90       	pop	r0
   15b70:	df 91       	pop	r29
   15b72:	cf 91       	pop	r28
   15b74:	1f 91       	pop	r17
   15b76:	0f 91       	pop	r16
   15b78:	ff 90       	pop	r15
   15b7a:	ef 90       	pop	r14
   15b7c:	bf 90       	pop	r11
   15b7e:	af 90       	pop	r10
   15b80:	9f 90       	pop	r9
   15b82:	8f 90       	pop	r8
   15b84:	08 95       	ret

00015b86 <amigo_buffered_write>:
   15b86:	8f 92       	push	r8
   15b88:	9f 92       	push	r9
   15b8a:	af 92       	push	r10
   15b8c:	bf 92       	push	r11
   15b8e:	ef 92       	push	r14
   15b90:	ff 92       	push	r15
   15b92:	0f 93       	push	r16
   15b94:	1f 93       	push	r17
   15b96:	cf 93       	push	r28
   15b98:	df 93       	push	r29
   15b9a:	00 d0       	rcall	.+0      	; 0x15b9c <amigo_buffered_write+0x16>
   15b9c:	cd b7       	in	r28, 0x3d	; 61
   15b9e:	de b7       	in	r29, 0x3e	; 62
   15ba0:	61 e3       	ldi	r22, 0x31	; 49
   15ba2:	73 e1       	ldi	r23, 0x13	; 19
   15ba4:	80 91 c6 19 	lds	r24, 0x19C6	; 0x8019c6 <AMIGOs>
   15ba8:	90 91 c7 19 	lds	r25, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15bac:	dc db       	rcall	.-2120   	; 0x15366 <amigo_chs_to_logical>
   15bae:	4b 01       	movw	r8, r22
   15bb0:	5c 01       	movw	r10, r24
   15bb2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15bb6:	87 fd       	sbrc	r24, 7
   15bb8:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   15bbc:	1a 82       	std	Y+2, r1	; 0x02
   15bbe:	19 82       	std	Y+1, r1	; 0x01
   15bc0:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15bc4:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15bc8:	65 a1       	ldd	r22, Z+37	; 0x25
   15bca:	76 a1       	ldd	r23, Z+38	; 0x26
   15bcc:	ae 01       	movw	r20, r28
   15bce:	4f 5f       	subi	r20, 0xFF	; 255
   15bd0:	5f 4f       	sbci	r21, 0xFF	; 255
   15bd2:	85 e1       	ldi	r24, 0x15	; 21
   15bd4:	9d e1       	ldi	r25, 0x1D	; 29
   15bd6:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
   15bda:	7c 01       	movw	r14, r24
   15bdc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15be0:	87 ff       	sbrs	r24, 7
   15be2:	04 c0       	rjmp	.+8      	; 0x15bec <amigo_buffered_write+0x66>
   15be4:	80 e4       	ldi	r24, 0x40	; 64
   15be6:	93 e1       	ldi	r25, 0x13	; 19
   15be8:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   15bec:	89 81       	ldd	r24, Y+1	; 0x01
   15bee:	9a 81       	ldd	r25, Y+2	; 0x02
   15bf0:	88 27       	eor	r24, r24
   15bf2:	90 7d       	andi	r25, 0xD0	; 208
   15bf4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15bf8:	89 2b       	or	r24, r25
   15bfa:	49 f4       	brne	.+18     	; 0x15c0e <amigo_buffered_write+0x88>
   15bfc:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15c00:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15c04:	85 a1       	ldd	r24, Z+37	; 0x25
   15c06:	96 a1       	ldd	r25, Z+38	; 0x26
   15c08:	e8 16       	cp	r14, r24
   15c0a:	f9 06       	cpc	r15, r25
   15c0c:	c1 f0       	breq	.+48     	; 0x15c3e <amigo_buffered_write+0xb8>
   15c0e:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15c12:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15c16:	81 e0       	ldi	r24, 0x01	; 1
   15c18:	86 83       	std	Z+6, r24	; 0x06
   15c1a:	87 81       	ldd	r24, Z+7	; 0x07
   15c1c:	90 85       	ldd	r25, Z+8	; 0x08
   15c1e:	80 62       	ori	r24, 0x20	; 32
   15c20:	90 87       	std	Z+8, r25	; 0x08
   15c22:	87 83       	std	Z+7, r24	; 0x07
   15c24:	20 ff       	sbrs	r18, 0
   15c26:	4e c0       	rjmp	.+156    	; 0x15cc4 <amigo_buffered_write+0x13e>
   15c28:	88 e5       	ldi	r24, 0x58	; 88
   15c2a:	97 e2       	ldi	r25, 0x27	; 39
   15c2c:	1f 92       	push	r1
   15c2e:	9f 93       	push	r25
   15c30:	8f 93       	push	r24
   15c32:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15c36:	0f 90       	pop	r0
   15c38:	0f 90       	pop	r0
   15c3a:	0f 90       	pop	r0
   15c3c:	43 c0       	rjmp	.+134    	; 0x15cc4 <amigo_buffered_write+0x13e>
   15c3e:	26 fd       	sbrc	r18, 6
   15c40:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
   15c44:	80 91 c8 19 	lds	r24, 0x19C8	; 0x8019c8 <AMIGOp>
   15c48:	90 91 c9 19 	lds	r25, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15c4c:	e0 90 c6 19 	lds	r14, 0x19C6	; 0x8019c6 <AMIGOs>
   15c50:	f0 90 c7 19 	lds	r15, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15c54:	27 e0       	ldi	r18, 0x07	; 7
   15c56:	e2 0e       	add	r14, r18
   15c58:	f1 1c       	adc	r15, r1
   15c5a:	fc 01       	movw	r30, r24
   15c5c:	05 a1       	ldd	r16, Z+37	; 0x25
   15c5e:	16 a1       	ldd	r17, Z+38	; 0x26
   15c60:	25 e1       	ldi	r18, 0x15	; 21
   15c62:	3d e1       	ldi	r19, 0x1D	; 29
   15c64:	b5 01       	movw	r22, r10
   15c66:	a4 01       	movw	r20, r8
   15c68:	02 96       	adiw	r24, 0x02	; 2
   15c6a:	0e 94 3e 8d 	call	0x11a7c	; 0x11a7c <dbf_open_write>
   15c6e:	7c 01       	movw	r14, r24
   15c70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15c74:	86 ff       	sbrs	r24, 6
   15c76:	04 c0       	rjmp	.+8      	; 0x15c80 <amigo_buffered_write+0xfa>
   15c78:	8f ef       	ldi	r24, 0xFF	; 255
   15c7a:	9d e0       	ldi	r25, 0x0D	; 13
   15c7c:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
   15c80:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15c84:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15c88:	85 a1       	ldd	r24, Z+37	; 0x25
   15c8a:	96 a1       	ldd	r25, Z+38	; 0x26
   15c8c:	e8 16       	cp	r14, r24
   15c8e:	f9 06       	cpc	r15, r25
   15c90:	49 f0       	breq	.+18     	; 0x15ca4 <amigo_buffered_write+0x11e>
   15c92:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15c96:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15c9a:	81 e0       	ldi	r24, 0x01	; 1
   15c9c:	86 83       	std	Z+6, r24	; 0x06
   15c9e:	80 e0       	ldi	r24, 0x00	; 0
   15ca0:	90 e0       	ldi	r25, 0x00	; 0
   15ca2:	1c c0       	rjmp	.+56     	; 0x15cdc <amigo_buffered_write+0x156>
   15ca4:	81 e3       	ldi	r24, 0x31	; 49
   15ca6:	93 e1       	ldi	r25, 0x13	; 19
   15ca8:	33 dd       	rcall	.-1434   	; 0x15710 <amigo_increment>
   15caa:	89 2b       	or	r24, r25
   15cac:	59 f0       	breq	.+22     	; 0x15cc4 <amigo_buffered_write+0x13e>
   15cae:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15cb2:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15cb6:	81 e0       	ldi	r24, 0x01	; 1
   15cb8:	86 83       	std	Z+6, r24	; 0x06
   15cba:	87 81       	ldd	r24, Z+7	; 0x07
   15cbc:	90 85       	ldd	r25, Z+8	; 0x08
   15cbe:	84 60       	ori	r24, 0x04	; 4
   15cc0:	90 87       	std	Z+8, r25	; 0x08
   15cc2:	87 83       	std	Z+7, r24	; 0x07
   15cc4:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15cc8:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15ccc:	81 81       	ldd	r24, Z+1	; 0x01
   15cce:	90 e0       	ldi	r25, 0x00	; 0
   15cd0:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   15cd4:	89 81       	ldd	r24, Y+1	; 0x01
   15cd6:	9a 81       	ldd	r25, Y+2	; 0x02
   15cd8:	88 27       	eor	r24, r24
   15cda:	90 7d       	andi	r25, 0xD0	; 208
   15cdc:	0f 90       	pop	r0
   15cde:	0f 90       	pop	r0
   15ce0:	df 91       	pop	r29
   15ce2:	cf 91       	pop	r28
   15ce4:	1f 91       	pop	r17
   15ce6:	0f 91       	pop	r16
   15ce8:	ff 90       	pop	r15
   15cea:	ef 90       	pop	r14
   15cec:	bf 90       	pop	r11
   15cee:	af 90       	pop	r10
   15cf0:	9f 90       	pop	r9
   15cf2:	8f 90       	pop	r8
   15cf4:	08 95       	ret

00015cf6 <amigo_cmd_dsj>:
   15cf6:	a3 e0       	ldi	r26, 0x03	; 3
   15cf8:	b0 e0       	ldi	r27, 0x00	; 0
   15cfa:	e1 e8       	ldi	r30, 0x81	; 129
   15cfc:	fe ea       	ldi	r31, 0xAE	; 174
   15cfe:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   15d02:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15d06:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15d0a:	86 81       	ldd	r24, Z+6	; 0x06
   15d0c:	8b 83       	std	Y+3, r24	; 0x03
   15d0e:	80 e0       	ldi	r24, 0x00	; 0
   15d10:	91 e0       	ldi	r25, 0x01	; 1
   15d12:	9a 83       	std	Y+2, r25	; 0x02
   15d14:	89 83       	std	Y+1, r24	; 0x01
   15d16:	ae 01       	movw	r20, r28
   15d18:	4f 5f       	subi	r20, 0xFF	; 255
   15d1a:	5f 4f       	sbci	r21, 0xFF	; 255
   15d1c:	61 e0       	ldi	r22, 0x01	; 1
   15d1e:	70 e0       	ldi	r23, 0x00	; 0
   15d20:	ce 01       	movw	r24, r28
   15d22:	03 96       	adiw	r24, 0x03	; 3
   15d24:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   15d28:	29 81       	ldd	r18, Y+1	; 0x01
   15d2a:	3a 81       	ldd	r19, Y+2	; 0x02
   15d2c:	22 27       	eor	r18, r18
   15d2e:	30 7d       	andi	r19, 0xD0	; 208
   15d30:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15d34:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15d38:	23 2b       	or	r18, r19
   15d3a:	29 f0       	breq	.+10     	; 0x15d46 <amigo_cmd_dsj+0x50>
   15d3c:	27 81       	ldd	r18, Z+7	; 0x07
   15d3e:	30 85       	ldd	r19, Z+8	; 0x08
   15d40:	20 62       	ori	r18, 0x20	; 32
   15d42:	30 87       	std	Z+8, r19	; 0x08
   15d44:	27 83       	std	Z+7, r18	; 0x07
   15d46:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15d4a:	01 97       	sbiw	r24, 0x01	; 1
   15d4c:	c1 f0       	breq	.+48     	; 0x15d7e <amigo_cmd_dsj+0x88>
   15d4e:	81 e0       	ldi	r24, 0x01	; 1
   15d50:	86 83       	std	Z+6, r24	; 0x06
   15d52:	87 81       	ldd	r24, Z+7	; 0x07
   15d54:	90 85       	ldd	r25, Z+8	; 0x08
   15d56:	80 62       	ori	r24, 0x20	; 32
   15d58:	90 87       	std	Z+8, r25	; 0x08
   15d5a:	87 83       	std	Z+7, r24	; 0x07
   15d5c:	20 ff       	sbrs	r18, 0
   15d5e:	0a c0       	rjmp	.+20     	; 0x15d74 <amigo_cmd_dsj+0x7e>
   15d60:	8e e3       	ldi	r24, 0x3E	; 62
   15d62:	97 e2       	ldi	r25, 0x27	; 39
   15d64:	1f 92       	push	r1
   15d66:	9f 93       	push	r25
   15d68:	8f 93       	push	r24
   15d6a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15d6e:	0f 90       	pop	r0
   15d70:	0f 90       	pop	r0
   15d72:	0f 90       	pop	r0
   15d74:	89 81       	ldd	r24, Y+1	; 0x01
   15d76:	9a 81       	ldd	r25, Y+2	; 0x02
   15d78:	88 27       	eor	r24, r24
   15d7a:	90 7d       	andi	r25, 0xD0	; 208
   15d7c:	1a c0       	rjmp	.+52     	; 0x15db2 <amigo_cmd_dsj+0xbc>
   15d7e:	25 ff       	sbrs	r18, 5
   15d80:	0f c0       	rjmp	.+30     	; 0x15da0 <amigo_cmd_dsj+0xaa>
   15d82:	86 81       	ldd	r24, Z+6	; 0x06
   15d84:	1f 92       	push	r1
   15d86:	8f 93       	push	r24
   15d88:	81 e3       	ldi	r24, 0x31	; 49
   15d8a:	97 e2       	ldi	r25, 0x27	; 39
   15d8c:	1f 92       	push	r1
   15d8e:	9f 93       	push	r25
   15d90:	8f 93       	push	r24
   15d92:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15d96:	0f 90       	pop	r0
   15d98:	0f 90       	pop	r0
   15d9a:	0f 90       	pop	r0
   15d9c:	0f 90       	pop	r0
   15d9e:	0f 90       	pop	r0
   15da0:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15da4:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15da8:	16 82       	std	Z+6, r1	; 0x06
   15daa:	10 86       	std	Z+8, r1	; 0x08
   15dac:	17 82       	std	Z+7, r1	; 0x07
   15dae:	80 e0       	ldi	r24, 0x00	; 0
   15db0:	90 e0       	ldi	r25, 0x00	; 0
   15db2:	23 96       	adiw	r28, 0x03	; 3
   15db4:	e2 e0       	ldi	r30, 0x02	; 2
   15db6:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00015dba <amigo_cmd_clear>:
   15dba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15dbe:	85 ff       	sbrs	r24, 5
   15dc0:	0a c0       	rjmp	.+20     	; 0x15dd6 <amigo_cmd_clear+0x1c>
   15dc2:	88 ef       	ldi	r24, 0xF8	; 248
   15dc4:	96 e2       	ldi	r25, 0x26	; 38
   15dc6:	1f 92       	push	r1
   15dc8:	9f 93       	push	r25
   15dca:	8f 93       	push	r24
   15dcc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15dd0:	0f 90       	pop	r0
   15dd2:	0f 90       	pop	r0
   15dd4:	0f 90       	pop	r0
   15dd6:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15dda:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15dde:	15 82       	std	Z+5, r1	; 0x05
   15de0:	14 82       	std	Z+4, r1	; 0x04
   15de2:	13 82       	std	Z+3, r1	; 0x03
   15de4:	16 82       	std	Z+6, r1	; 0x06
   15de6:	10 86       	std	Z+8, r1	; 0x08
   15de8:	17 82       	std	Z+7, r1	; 0x07
   15dea:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15dee:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15df2:	81 81       	ldd	r24, Z+1	; 0x01
   15df4:	90 e0       	ldi	r25, 0x00	; 0
   15df6:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
   15dfa:	80 e0       	ldi	r24, 0x00	; 0
   15dfc:	90 e0       	ldi	r25, 0x00	; 0
   15dfe:	08 95       	ret

00015e00 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   15e00:	0f 93       	push	r16
   15e02:	1f 93       	push	r17
   15e04:	cf 93       	push	r28
   15e06:	df 93       	push	r29
   15e08:	c8 2f       	mov	r28, r24
   15e0a:	d6 2f       	mov	r29, r22
   15e0c:	14 2f       	mov	r17, r20
   15e0e:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   15e10:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15e14:	90 e0       	ldi	r25, 0x00	; 0
   15e16:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   15e1a:	20 91 19 1f 	lds	r18, 0x1F19	; 0x801f19 <talking>
   15e1e:	89 2b       	or	r24, r25
   15e20:	19 f1       	breq	.+70     	; 0x15e68 <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15e22:	1f 92       	push	r1
   15e24:	2f 93       	push	r18
   15e26:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15e2a:	1f 92       	push	r1
   15e2c:	8f 93       	push	r24
   15e2e:	0f 93       	push	r16
   15e30:	1f 93       	push	r17
   15e32:	1f 92       	push	r1
   15e34:	df 93       	push	r29
   15e36:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15e3a:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15e3e:	80 81       	ld	r24, Z
   15e40:	1f 92       	push	r1
   15e42:	8f 93       	push	r24
   15e44:	1f 92       	push	r1
   15e46:	cf 93       	push	r28
   15e48:	81 e9       	ldi	r24, 0x91	; 145
   15e4a:	96 e2       	ldi	r25, 0x26	; 38
   15e4c:	1f 92       	push	r1
   15e4e:	9f 93       	push	r25
   15e50:	8f 93       	push	r24
   15e52:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15e56:	8d b7       	in	r24, 0x3d	; 61
   15e58:	9e b7       	in	r25, 0x3e	; 62
   15e5a:	0f 96       	adiw	r24, 0x0f	; 15
   15e5c:	0f b6       	in	r0, 0x3f	; 63
   15e5e:	f8 94       	cli
   15e60:	9e bf       	out	0x3e, r25	; 62
   15e62:	0f be       	out	0x3f, r0	; 63
   15e64:	8d bf       	out	0x3d, r24	; 61
   15e66:	66 c0       	rjmp	.+204    	; 0x15f34 <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   15e68:	82 2f       	mov	r24, r18
   15e6a:	90 e0       	ldi	r25, 0x00	; 0
   15e6c:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   15e70:	30 91 1b 1f 	lds	r19, 0x1F1B	; 0x801f1b <listening>
   15e74:	20 91 19 1f 	lds	r18, 0x1F19	; 0x801f19 <talking>
   15e78:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15e7c:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15e80:	89 2b       	or	r24, r25
   15e82:	e9 f0       	breq	.+58     	; 0x15ebe <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15e84:	1f 92       	push	r1
   15e86:	2f 93       	push	r18
   15e88:	1f 92       	push	r1
   15e8a:	3f 93       	push	r19
   15e8c:	0f 93       	push	r16
   15e8e:	1f 93       	push	r17
   15e90:	1f 92       	push	r1
   15e92:	df 93       	push	r29
   15e94:	80 81       	ld	r24, Z
   15e96:	1f 92       	push	r1
   15e98:	8f 93       	push	r24
   15e9a:	1f 92       	push	r1
   15e9c:	cf 93       	push	r28
   15e9e:	8a e2       	ldi	r24, 0x2A	; 42
   15ea0:	96 e2       	ldi	r25, 0x26	; 38
   15ea2:	1f 92       	push	r1
   15ea4:	9f 93       	push	r25
   15ea6:	8f 93       	push	r24
   15ea8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15eac:	8d b7       	in	r24, 0x3d	; 61
   15eae:	9e b7       	in	r25, 0x3e	; 62
   15eb0:	0f 96       	adiw	r24, 0x0f	; 15
   15eb2:	0f b6       	in	r0, 0x3f	; 63
   15eb4:	f8 94       	cli
   15eb6:	9e bf       	out	0x3e, r25	; 62
   15eb8:	0f be       	out	0x3f, r0	; 63
   15eba:	8d bf       	out	0x3d, r24	; 61
   15ebc:	3b c0       	rjmp	.+118    	; 0x15f34 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   15ebe:	2f 35       	cpi	r18, 0x5F	; 95
   15ec0:	e9 f4       	brne	.+58     	; 0x15efc <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15ec2:	1f 92       	push	r1
   15ec4:	2f 93       	push	r18
   15ec6:	1f 92       	push	r1
   15ec8:	3f 93       	push	r19
   15eca:	0f 93       	push	r16
   15ecc:	1f 93       	push	r17
   15ece:	1f 92       	push	r1
   15ed0:	df 93       	push	r29
   15ed2:	80 81       	ld	r24, Z
   15ed4:	1f 92       	push	r1
   15ed6:	8f 93       	push	r24
   15ed8:	1f 92       	push	r1
   15eda:	cf 93       	push	r28
   15edc:	83 ec       	ldi	r24, 0xC3	; 195
   15ede:	95 e2       	ldi	r25, 0x25	; 37
   15ee0:	1f 92       	push	r1
   15ee2:	9f 93       	push	r25
   15ee4:	8f 93       	push	r24
   15ee6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15eea:	8d b7       	in	r24, 0x3d	; 61
   15eec:	9e b7       	in	r25, 0x3e	; 62
   15eee:	0f 96       	adiw	r24, 0x0f	; 15
   15ef0:	0f b6       	in	r0, 0x3f	; 63
   15ef2:	f8 94       	cli
   15ef4:	9e bf       	out	0x3e, r25	; 62
   15ef6:	0f be       	out	0x3f, r0	; 63
   15ef8:	8d bf       	out	0x3d, r24	; 61
   15efa:	1c c0       	rjmp	.+56     	; 0x15f34 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15efc:	1f 92       	push	r1
   15efe:	2f 93       	push	r18
   15f00:	1f 92       	push	r1
   15f02:	3f 93       	push	r19
   15f04:	0f 93       	push	r16
   15f06:	1f 93       	push	r17
   15f08:	1f 92       	push	r1
   15f0a:	df 93       	push	r29
   15f0c:	80 81       	ld	r24, Z
   15f0e:	1f 92       	push	r1
   15f10:	8f 93       	push	r24
   15f12:	1f 92       	push	r1
   15f14:	cf 93       	push	r28
   15f16:	8e e5       	ldi	r24, 0x5E	; 94
   15f18:	95 e2       	ldi	r25, 0x25	; 37
   15f1a:	1f 92       	push	r1
   15f1c:	9f 93       	push	r25
   15f1e:	8f 93       	push	r24
   15f20:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15f24:	8d b7       	in	r24, 0x3d	; 61
   15f26:	9e b7       	in	r25, 0x3e	; 62
   15f28:	0f 96       	adiw	r24, 0x0f	; 15
   15f2a:	0f b6       	in	r0, 0x3f	; 63
   15f2c:	f8 94       	cli
   15f2e:	9e bf       	out	0x3e, r25	; 62
   15f30:	0f be       	out	0x3f, r0	; 63
   15f32:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15f34:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   15f38:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   15f3c:	81 81       	ldd	r24, Z+1	; 0x01
   15f3e:	90 e0       	ldi	r25, 0x00	; 0
   15f40:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
    return(0);
}
   15f44:	80 e0       	ldi	r24, 0x00	; 0
   15f46:	90 e0       	ldi	r25, 0x00	; 0
   15f48:	df 91       	pop	r29
   15f4a:	cf 91       	pop	r28
   15f4c:	1f 91       	pop	r17
   15f4e:	0f 91       	pop	r16
   15f50:	08 95       	ret

00015f52 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   15f52:	cf 93       	push	r28
   15f54:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   15f56:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15f5a:	90 e0       	ldi	r25, 0x00	; 0
   15f5c:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   15f60:	20 91 19 1f 	lds	r18, 0x1F19	; 0x801f19 <talking>
   15f64:	89 2b       	or	r24, r25
   15f66:	f9 f0       	breq	.+62     	; 0x15fa6 <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15f68:	1f 92       	push	r1
   15f6a:	2f 93       	push	r18
   15f6c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   15f70:	1f 92       	push	r1
   15f72:	8f 93       	push	r24
   15f74:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15f78:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15f7c:	80 81       	ld	r24, Z
   15f7e:	1f 92       	push	r1
   15f80:	8f 93       	push	r24
   15f82:	1f 92       	push	r1
   15f84:	cf 93       	push	r28
   15f86:	8e e0       	ldi	r24, 0x0E	; 14
   15f88:	95 e2       	ldi	r25, 0x25	; 37
   15f8a:	1f 92       	push	r1
   15f8c:	9f 93       	push	r25
   15f8e:	8f 93       	push	r24
   15f90:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15f94:	8d b7       	in	r24, 0x3d	; 61
   15f96:	9e b7       	in	r25, 0x3e	; 62
   15f98:	0b 96       	adiw	r24, 0x0b	; 11
   15f9a:	0f b6       	in	r0, 0x3f	; 63
   15f9c:	f8 94       	cli
   15f9e:	9e bf       	out	0x3e, r25	; 62
   15fa0:	0f be       	out	0x3f, r0	; 63
   15fa2:	8d bf       	out	0x3d, r24	; 61
   15fa4:	5a c0       	rjmp	.+180    	; 0x1605a <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   15fa6:	82 2f       	mov	r24, r18
   15fa8:	90 e0       	ldi	r25, 0x00	; 0
   15faa:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   15fae:	30 91 1b 1f 	lds	r19, 0x1F1B	; 0x801f1b <listening>
   15fb2:	20 91 19 1f 	lds	r18, 0x1F19	; 0x801f19 <talking>
   15fb6:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   15fba:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   15fbe:	89 2b       	or	r24, r25
   15fc0:	c9 f0       	breq	.+50     	; 0x15ff4 <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15fc2:	1f 92       	push	r1
   15fc4:	2f 93       	push	r18
   15fc6:	1f 92       	push	r1
   15fc8:	3f 93       	push	r19
   15fca:	80 81       	ld	r24, Z
   15fcc:	1f 92       	push	r1
   15fce:	8f 93       	push	r24
   15fd0:	1f 92       	push	r1
   15fd2:	cf 93       	push	r28
   15fd4:	8e eb       	ldi	r24, 0xBE	; 190
   15fd6:	94 e2       	ldi	r25, 0x24	; 36
   15fd8:	1f 92       	push	r1
   15fda:	9f 93       	push	r25
   15fdc:	8f 93       	push	r24
   15fde:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   15fe2:	8d b7       	in	r24, 0x3d	; 61
   15fe4:	9e b7       	in	r25, 0x3e	; 62
   15fe6:	0b 96       	adiw	r24, 0x0b	; 11
   15fe8:	0f b6       	in	r0, 0x3f	; 63
   15fea:	f8 94       	cli
   15fec:	9e bf       	out	0x3e, r25	; 62
   15fee:	0f be       	out	0x3f, r0	; 63
   15ff0:	8d bf       	out	0x3d, r24	; 61
   15ff2:	33 c0       	rjmp	.+102    	; 0x1605a <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   15ff4:	2f 35       	cpi	r18, 0x5F	; 95
   15ff6:	c9 f4       	brne	.+50     	; 0x1602a <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15ff8:	1f 92       	push	r1
   15ffa:	2f 93       	push	r18
   15ffc:	1f 92       	push	r1
   15ffe:	3f 93       	push	r19
   16000:	80 81       	ld	r24, Z
   16002:	1f 92       	push	r1
   16004:	8f 93       	push	r24
   16006:	1f 92       	push	r1
   16008:	cf 93       	push	r28
   1600a:	8e e6       	ldi	r24, 0x6E	; 110
   1600c:	94 e2       	ldi	r25, 0x24	; 36
   1600e:	1f 92       	push	r1
   16010:	9f 93       	push	r25
   16012:	8f 93       	push	r24
   16014:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16018:	8d b7       	in	r24, 0x3d	; 61
   1601a:	9e b7       	in	r25, 0x3e	; 62
   1601c:	0b 96       	adiw	r24, 0x0b	; 11
   1601e:	0f b6       	in	r0, 0x3f	; 63
   16020:	f8 94       	cli
   16022:	9e bf       	out	0x3e, r25	; 62
   16024:	0f be       	out	0x3f, r0	; 63
   16026:	8d bf       	out	0x3d, r24	; 61
   16028:	18 c0       	rjmp	.+48     	; 0x1605a <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1602a:	1f 92       	push	r1
   1602c:	2f 93       	push	r18
   1602e:	1f 92       	push	r1
   16030:	3f 93       	push	r19
   16032:	80 81       	ld	r24, Z
   16034:	1f 92       	push	r1
   16036:	8f 93       	push	r24
   16038:	1f 92       	push	r1
   1603a:	cf 93       	push	r28
   1603c:	8d e1       	ldi	r24, 0x1D	; 29
   1603e:	94 e2       	ldi	r25, 0x24	; 36
   16040:	1f 92       	push	r1
   16042:	9f 93       	push	r25
   16044:	8f 93       	push	r24
   16046:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1604a:	8d b7       	in	r24, 0x3d	; 61
   1604c:	9e b7       	in	r25, 0x3e	; 62
   1604e:	0b 96       	adiw	r24, 0x0b	; 11
   16050:	0f b6       	in	r0, 0x3f	; 63
   16052:	f8 94       	cli
   16054:	9e bf       	out	0x3e, r25	; 62
   16056:	0f be       	out	0x3f, r0	; 63
   16058:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1605a:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   1605e:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   16062:	81 81       	ldd	r24, Z+1	; 0x01
   16064:	90 e0       	ldi	r25, 0x00	; 0
   16066:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
    return(0);
}
   1606a:	80 e0       	ldi	r24, 0x00	; 0
   1606c:	90 e0       	ldi	r25, 0x00	; 0
   1606e:	cf 91       	pop	r28
   16070:	08 95       	ret

00016072 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16072:	8f 30       	cpi	r24, 0x0F	; 15
   16074:	29 f0       	breq	.+10     	; 0x16080 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16076:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   1607a:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1607e:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16080:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   16084:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   16088:	81 81       	ldd	r24, Z+1	; 0x01
   1608a:	88 23       	and	r24, r24
   1608c:	29 f0       	breq	.+10     	; 0x16098 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   1608e:	87 81       	ldd	r24, Z+7	; 0x07
   16090:	90 85       	ldd	r25, Z+8	; 0x08
   16092:	80 64       	ori	r24, 0x40	; 64
   16094:	90 87       	std	Z+8, r25	; 0x08
   16096:	87 83       	std	Z+7, r24	; 0x07
   16098:	08 95       	ret

0001609a <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   1609a:	a3 e1       	ldi	r26, 0x13	; 19
   1609c:	b0 e0       	ldi	r27, 0x00	; 0
   1609e:	e3 e5       	ldi	r30, 0x53	; 83
   160a0:	f0 eb       	ldi	r31, 0xB0	; 176
   160a2:	0c 94 11 ed 	jmp	0x1da22	; 0x1da22 <__prologue_saves__+0x18>
   160a6:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   160a8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160ac:	85 ff       	sbrs	r24, 5
   160ae:	16 c0       	rjmp	.+44     	; 0x160dc <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   160b0:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   160b4:	1f 92       	push	r1
   160b6:	8f 93       	push	r24
   160b8:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   160bc:	1f 92       	push	r1
   160be:	8f 93       	push	r24
   160c0:	ff 92       	push	r15
   160c2:	ef 92       	push	r14
   160c4:	8b ee       	ldi	r24, 0xEB	; 235
   160c6:	93 e2       	ldi	r25, 0x23	; 35
   160c8:	1f 92       	push	r1
   160ca:	9f 93       	push	r25
   160cc:	8f 93       	push	r24
   160ce:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   160d2:	0f b6       	in	r0, 0x3f	; 63
   160d4:	f8 94       	cli
   160d6:	de bf       	out	0x3e, r29	; 62
   160d8:	0f be       	out	0x3f, r0	; 63
   160da:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   160dc:	9e e7       	ldi	r25, 0x7E	; 126
   160de:	e9 16       	cp	r14, r25
   160e0:	f1 04       	cpc	r15, r1
   160e2:	f1 f5       	brne	.+124    	; 0x16160 <Amigo_Command+0xc6>
   160e4:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   160e8:	90 e0       	ldi	r25, 0x00	; 0
   160ea:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   160ee:	89 2b       	or	r24, r25
   160f0:	09 f4       	brne	.+2      	; 0x160f4 <Amigo_Command+0x5a>
   160f2:	86 c0       	rjmp	.+268    	; 0x16200 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   160f4:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   160f8:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   160fc:	81 81       	ldd	r24, Z+1	; 0x01
   160fe:	90 e0       	ldi	r25, 0x00	; 0
   16100:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
        status = EOI_FLAG;
   16104:	80 e0       	ldi	r24, 0x00	; 0
   16106:	91 e0       	ldi	r25, 0x01	; 1
   16108:	9b 8b       	std	Y+19, r25	; 0x13
   1610a:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1610c:	ae 01       	movw	r20, r28
   1610e:	4e 5e       	subi	r20, 0xEE	; 238
   16110:	5f 4f       	sbci	r21, 0xFF	; 255
   16112:	60 e0       	ldi	r22, 0x00	; 0
   16114:	72 e0       	ldi	r23, 0x02	; 2
   16116:	85 e1       	ldi	r24, 0x15	; 21
   16118:	9d e1       	ldi	r25, 0x1D	; 29
   1611a:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1611e:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   16122:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   16126:	81 81       	ldd	r24, Z+1	; 0x01
   16128:	90 e0       	ldi	r25, 0x00	; 0
   1612a:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1612e:	8a 89       	ldd	r24, Y+18	; 0x12
   16130:	9b 89       	ldd	r25, Y+19	; 0x13
   16132:	88 27       	eor	r24, r24
   16134:	90 7d       	andi	r25, 0xD0	; 208
   16136:	89 2b       	or	r24, r25
   16138:	09 f4       	brne	.+2      	; 0x1613c <Amigo_Command+0xa2>
   1613a:	89 c2       	rjmp	.+1298   	; 0x1664e <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1613c:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   16140:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   16144:	81 e0       	ldi	r24, 0x01	; 1
   16146:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16148:	87 81       	ldd	r24, Z+7	; 0x07
   1614a:	90 85       	ldd	r25, Z+8	; 0x08
   1614c:	80 62       	ori	r24, 0x20	; 32
   1614e:	90 87       	std	Z+8, r25	; 0x08
   16150:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   16152:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16156:	80 ff       	sbrs	r24, 0
   16158:	7a c2       	rjmp	.+1268   	; 0x1664e <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   1615a:	89 ec       	ldi	r24, 0xC9	; 201
   1615c:	93 e2       	ldi	r25, 0x23	; 35
   1615e:	8e c0       	rjmp	.+284    	; 0x1627c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16160:	8f e7       	ldi	r24, 0x7F	; 127
   16162:	e8 16       	cp	r14, r24
   16164:	f1 04       	cpc	r15, r1
   16166:	09 f0       	breq	.+2      	; 0x1616a <Amigo_Command+0xd0>
   16168:	4b c0       	rjmp	.+150    	; 0x16200 <Amigo_Command+0x166>
   1616a:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   1616e:	90 e0       	ldi	r25, 0x00	; 0
   16170:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   16174:	89 2b       	or	r24, r25
   16176:	09 f4       	brne	.+2      	; 0x1617a <Amigo_Command+0xe0>
   16178:	43 c0       	rjmp	.+134    	; 0x16200 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1617a:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   1617e:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   16182:	81 81       	ldd	r24, Z+1	; 0x01
   16184:	90 e0       	ldi	r25, 0x00	; 0
   16186:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   1618a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1618e:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16190:	0e 94 95 8d 	call	0x11b2a	; 0x11b2a <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16194:	80 e0       	ldi	r24, 0x00	; 0
   16196:	91 e0       	ldi	r25, 0x01	; 1
   16198:	9b 8b       	std	Y+19, r25	; 0x13
   1619a:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1619c:	ae 01       	movw	r20, r28
   1619e:	4e 5e       	subi	r20, 0xEE	; 238
   161a0:	5f 4f       	sbci	r21, 0xFF	; 255
   161a2:	60 e0       	ldi	r22, 0x00	; 0
   161a4:	72 e0       	ldi	r23, 0x02	; 2
   161a6:	85 e1       	ldi	r24, 0x15	; 21
   161a8:	9d e1       	ldi	r25, 0x1D	; 29
   161aa:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   161ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   161b2:	87 ff       	sbrs	r24, 7
   161b4:	04 c0       	rjmp	.+8      	; 0x161be <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   161b6:	80 e4       	ldi	r24, 0x40	; 64
   161b8:	93 e1       	ldi	r25, 0x13	; 19
   161ba:	0e 94 a7 8d 	call	0x11b4e	; 0x11b4e <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   161be:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   161c2:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   161c6:	81 81       	ldd	r24, Z+1	; 0x01
   161c8:	90 e0       	ldi	r25, 0x00	; 0
   161ca:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
        if(status & ERROR_MASK)
   161ce:	8a 89       	ldd	r24, Y+18	; 0x12
   161d0:	9b 89       	ldd	r25, Y+19	; 0x13
   161d2:	88 27       	eor	r24, r24
   161d4:	90 7d       	andi	r25, 0xD0	; 208
   161d6:	89 2b       	or	r24, r25
   161d8:	09 f4       	brne	.+2      	; 0x161dc <Amigo_Command+0x142>
   161da:	39 c2       	rjmp	.+1138   	; 0x1664e <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   161dc:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   161e0:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   161e4:	81 e0       	ldi	r24, 0x01	; 1
   161e6:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   161e8:	87 81       	ldd	r24, Z+7	; 0x07
   161ea:	90 85       	ldd	r25, Z+8	; 0x08
   161ec:	80 62       	ori	r24, 0x20	; 32
   161ee:	90 87       	std	Z+8, r25	; 0x08
   161f0:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   161f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   161f6:	80 ff       	sbrs	r24, 0
   161f8:	2a c2       	rjmp	.+1108   	; 0x1664e <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   161fa:	88 ea       	ldi	r24, 0xA8	; 168
   161fc:	93 e2       	ldi	r25, 0x23	; 35
   161fe:	3e c0       	rjmp	.+124    	; 0x1627c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16200:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   16204:	90 e0       	ldi	r25, 0x00	; 0
   16206:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   1620a:	89 2b       	or	r24, r25
   1620c:	19 f4       	brne	.+6      	; 0x16214 <Amigo_Command+0x17a>
        return(0);
   1620e:	80 e0       	ldi	r24, 0x00	; 0
   16210:	90 e0       	ldi	r25, 0x00	; 0
   16212:	25 c2       	rjmp	.+1098   	; 0x1665e <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16214:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   16218:	90 e0       	ldi	r25, 0x00	; 0
   1621a:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   1621e:	89 2b       	or	r24, r25
   16220:	b1 f7       	brne	.-20     	; 0x1620e <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16222:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   16226:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   1622a:	81 81       	ldd	r24, Z+1	; 0x01
   1622c:	90 e0       	ldi	r25, 0x00	; 0
   1622e:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16232:	80 e0       	ldi	r24, 0x00	; 0
   16234:	91 e0       	ldi	r25, 0x01	; 1
   16236:	9b 8b       	std	Y+19, r25	; 0x13
   16238:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1623a:	ae 01       	movw	r20, r28
   1623c:	4e 5e       	subi	r20, 0xEE	; 238
   1623e:	5f 4f       	sbci	r21, 0xFF	; 255
   16240:	60 e0       	ldi	r22, 0x00	; 0
   16242:	72 e0       	ldi	r23, 0x02	; 2
   16244:	85 e1       	ldi	r24, 0x15	; 21
   16246:	9d e1       	ldi	r25, 0x1D	; 29
   16248:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
   1624c:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   1624e:	8a 89       	ldd	r24, Y+18	; 0x12
   16250:	9b 89       	ldd	r25, Y+19	; 0x13
   16252:	88 27       	eor	r24, r24
   16254:	90 7d       	andi	r25, 0xD0	; 208
   16256:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1625a:	89 2b       	or	r24, r25
   1625c:	c1 f0       	breq	.+48     	; 0x1628e <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   1625e:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   16262:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   16266:	81 e0       	ldi	r24, 0x01	; 1
   16268:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1626a:	87 81       	ldd	r24, Z+7	; 0x07
   1626c:	90 85       	ldd	r25, Z+8	; 0x08
   1626e:	80 62       	ori	r24, 0x20	; 32
   16270:	90 87       	std	Z+8, r25	; 0x08
   16272:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   16274:	20 ff       	sbrs	r18, 0
   16276:	eb c1       	rjmp	.+982    	; 0x1664e <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16278:	87 e8       	ldi	r24, 0x87	; 135
   1627a:	93 e2       	ldi	r25, 0x23	; 35
   1627c:	1f 92       	push	r1
   1627e:	9f 93       	push	r25
   16280:	8f 93       	push	r24
   16282:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16286:	0f 90       	pop	r0
   16288:	0f 90       	pop	r0
   1628a:	0f 90       	pop	r0
   1628c:	e0 c1       	rjmp	.+960    	; 0x1664e <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   1628e:	25 ff       	sbrs	r18, 5
   16290:	10 c0       	rjmp	.+32     	; 0x162b2 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16292:	1f 93       	push	r17
   16294:	0f 93       	push	r16
   16296:	ff 92       	push	r15
   16298:	ef 92       	push	r14
   1629a:	88 e5       	ldi	r24, 0x58	; 88
   1629c:	93 e2       	ldi	r25, 0x23	; 35
   1629e:	1f 92       	push	r1
   162a0:	9f 93       	push	r25
   162a2:	8f 93       	push	r24
   162a4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   162a8:	0f b6       	in	r0, 0x3f	; 63
   162aa:	f8 94       	cli
   162ac:	de bf       	out	0x3e, r29	; 62
   162ae:	0f be       	out	0x3f, r0	; 63
   162b0:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   162b2:	01 15       	cp	r16, r1
   162b4:	11 05       	cpc	r17, r1
   162b6:	61 f4       	brne	.+24     	; 0x162d0 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   162b8:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   162bc:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   162c0:	81 e0       	ldi	r24, 0x01	; 1
   162c2:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   162c4:	87 81       	ldd	r24, Z+7	; 0x07
   162c6:	90 85       	ldd	r25, Z+8	; 0x08
   162c8:	80 62       	ori	r24, 0x20	; 32
   162ca:	90 87       	std	Z+8, r25	; 0x08
   162cc:	87 83       	std	Z+7, r24	; 0x07
   162ce:	bf c1       	rjmp	.+894    	; 0x1664e <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   162d0:	60 91 15 1d 	lds	r22, 0x1D15	; 0x801d15 <gpib_iobuff>

    if (secondary == 0x68)
   162d4:	98 e6       	ldi	r25, 0x68	; 104
   162d6:	e9 16       	cp	r14, r25
   162d8:	f1 04       	cpc	r15, r1
   162da:	09 f0       	breq	.+2      	; 0x162de <Amigo_Command+0x244>
   162dc:	28 c1       	rjmp	.+592    	; 0x1652e <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   162de:	61 11       	cpse	r22, r1
   162e0:	2e c0       	rjmp	.+92     	; 0x1633e <Amigo_Command+0x2a4>
   162e2:	02 30       	cpi	r16, 0x02	; 2
   162e4:	11 05       	cpc	r17, r1
   162e6:	09 f0       	breq	.+2      	; 0x162ea <Amigo_Command+0x250>
   162e8:	b7 c1       	rjmp	.+878    	; 0x16658 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   162ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162ee:	85 ff       	sbrs	r24, 5
   162f0:	0a c0       	rjmp	.+20     	; 0x16306 <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   162f2:	88 e3       	ldi	r24, 0x38	; 56
   162f4:	93 e2       	ldi	r25, 0x23	; 35
   162f6:	1f 92       	push	r1
   162f8:	9f 93       	push	r25
   162fa:	8f 93       	push	r24
   162fc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16300:	0f 90       	pop	r0
   16302:	0f 90       	pop	r0
   16304:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16306:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   1630a:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1630e:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16310:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16312:	10 86       	std	Z+8, r1	; 0x08
   16314:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   16316:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16318:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
   1631c:	98 2f       	mov	r25, r24
   1631e:	92 95       	swap	r25
   16320:	96 95       	lsr	r25
   16322:	96 95       	lsr	r25
   16324:	93 70       	andi	r25, 0x03	; 3
   16326:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   16328:	8f 73       	andi	r24, 0x3F	; 63
   1632a:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1632c:	ce 01       	movw	r24, r28
   1632e:	01 96       	adiw	r24, 0x01	; 1
   16330:	18 da       	rcall	.-3024   	; 0x15762 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16332:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   16336:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1633a:	85 e0       	ldi	r24, 0x05	; 5
   1633c:	5c c1       	rjmp	.+696    	; 0x165f6 <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   1633e:	62 30       	cpi	r22, 0x02	; 2
   16340:	09 f0       	breq	.+2      	; 0x16344 <Amigo_Command+0x2aa>
   16342:	3f c0       	rjmp	.+126    	; 0x163c2 <Amigo_Command+0x328>
   16344:	05 30       	cpi	r16, 0x05	; 5
   16346:	11 05       	cpc	r17, r1
   16348:	d1 f4       	brne	.+52     	; 0x1637e <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   1634a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1634e:	85 ff       	sbrs	r24, 5
   16350:	0a c0       	rjmp	.+20     	; 0x16366 <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   16352:	84 e2       	ldi	r24, 0x24	; 36
   16354:	93 e2       	ldi	r25, 0x23	; 35
   16356:	1f 92       	push	r1
   16358:	9f 93       	push	r25
   1635a:	8f 93       	push	r24
   1635c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16360:	0f 90       	pop	r0
   16362:	0f 90       	pop	r0
   16364:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16366:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
   1636a:	83 de       	rcall	.-762    	; 0x16072 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   1636c:	80 91 17 1d 	lds	r24, 0x1D17	; 0x801d17 <gpib_iobuff+0x2>
   16370:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   16372:	80 91 18 1d 	lds	r24, 0x1D18	; 0x801d18 <gpib_iobuff+0x3>
   16376:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   16378:	80 91 19 1d 	lds	r24, 0x1D19	; 0x801d19 <gpib_iobuff+0x4>
   1637c:	1d c0       	rjmp	.+58     	; 0x163b8 <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   1637e:	06 30       	cpi	r16, 0x06	; 6
   16380:	11 05       	cpc	r17, r1
   16382:	09 f0       	breq	.+2      	; 0x16386 <Amigo_Command+0x2ec>
   16384:	69 c1       	rjmp	.+722    	; 0x16658 <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   16386:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1638a:	85 ff       	sbrs	r24, 5
   1638c:	0a c0       	rjmp	.+20     	; 0x163a2 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   1638e:	80 e1       	ldi	r24, 0x10	; 16
   16390:	93 e2       	ldi	r25, 0x23	; 35
   16392:	1f 92       	push	r1
   16394:	9f 93       	push	r25
   16396:	8f 93       	push	r24
   16398:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1639c:	0f 90       	pop	r0
   1639e:	0f 90       	pop	r0
   163a0:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   163a2:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
   163a6:	65 de       	rcall	.-822    	; 0x16072 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   163a8:	80 91 18 1d 	lds	r24, 0x1D18	; 0x801d18 <gpib_iobuff+0x3>
   163ac:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   163ae:	80 91 19 1d 	lds	r24, 0x1D19	; 0x801d19 <gpib_iobuff+0x4>
   163b2:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   163b4:	80 91 1a 1d 	lds	r24, 0x1D1A	; 0x801d1a <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   163b8:	8e 83       	std	Y+6, r24	; 0x06
   163ba:	ce 01       	movw	r24, r28
   163bc:	01 96       	adiw	r24, 0x01	; 1
   163be:	d1 d9       	rcall	.-3166   	; 0x15762 <amigo_seek>
   163c0:	1b c1       	rjmp	.+566    	; 0x165f8 <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   163c2:	63 30       	cpi	r22, 0x03	; 3
   163c4:	e9 f4       	brne	.+58     	; 0x16400 <Amigo_Command+0x366>
   163c6:	02 30       	cpi	r16, 0x02	; 2
   163c8:	11 05       	cpc	r17, r1
   163ca:	09 f0       	breq	.+2      	; 0x163ce <Amigo_Command+0x334>
   163cc:	45 c1       	rjmp	.+650    	; 0x16658 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   163ce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   163d2:	85 ff       	sbrs	r24, 5
   163d4:	0a c0       	rjmp	.+20     	; 0x163ea <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   163d6:	87 ee       	ldi	r24, 0xE7	; 231
   163d8:	92 e2       	ldi	r25, 0x22	; 34
   163da:	1f 92       	push	r1
   163dc:	9f 93       	push	r25
   163de:	8f 93       	push	r24
   163e0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   163e4:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   163e6:	0f 90       	pop	r0
   163e8:	0f 90       	pop	r0
   163ea:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            amigo_request_status();
   163ee:	41 de       	rcall	.-894    	; 0x16072 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   163f0:	7b d8       	rcall	.-3850   	; 0x154e8 <amigo_request_status>
   163f2:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   163f6:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   163fa:	83 e0       	ldi	r24, 0x03	; 3
   163fc:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   163fe:	27 c1       	rjmp	.+590    	; 0x1664e <Amigo_Command+0x5b4>
   16400:	65 30       	cpi	r22, 0x05	; 5
   16402:	d9 f4       	brne	.+54     	; 0x1643a <Amigo_Command+0x3a0>
   16404:	02 30       	cpi	r16, 0x02	; 2
   16406:	11 05       	cpc	r17, r1
   16408:	09 f0       	breq	.+2      	; 0x1640c <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   1640a:	26 c1       	rjmp	.+588    	; 0x16658 <Amigo_Command+0x5be>
   1640c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16410:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   16412:	0a c0       	rjmp	.+20     	; 0x16428 <Amigo_Command+0x38e>
   16414:	86 ec       	ldi	r24, 0xC6	; 198
   16416:	92 e2       	ldi	r25, 0x22	; 34
   16418:	1f 92       	push	r1
   1641a:	9f 93       	push	r25
   1641c:	8f 93       	push	r24
   1641e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16422:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16424:	0f 90       	pop	r0
   16426:	0f 90       	pop	r0
   16428:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1642c:	22 de       	rcall	.-956    	; 0x16072 <amigo_check_unit>
   1642e:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   16432:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   16436:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   16438:	de c0       	rjmp	.+444    	; 0x165f6 <Amigo_Command+0x55c>
   1643a:	67 30       	cpi	r22, 0x07	; 7
   1643c:	f9 f4       	brne	.+62     	; 0x1647c <Amigo_Command+0x3e2>
   1643e:	04 30       	cpi	r16, 0x04	; 4
   16440:	11 05       	cpc	r17, r1
   16442:	09 f0       	breq	.+2      	; 0x16446 <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   16444:	09 c1       	rjmp	.+530    	; 0x16658 <Amigo_Command+0x5be>
   16446:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1644a:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   1644c:	0a c0       	rjmp	.+20     	; 0x16462 <Amigo_Command+0x3c8>
   1644e:	86 eb       	ldi	r24, 0xB6	; 182
   16450:	92 e2       	ldi	r25, 0x22	; 34
   16452:	1f 92       	push	r1
   16454:	9f 93       	push	r25
   16456:	8f 93       	push	r24
   16458:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1645c:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1645e:	0f 90       	pop	r0
   16460:	0f 90       	pop	r0
   16462:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   16466:	05 de       	rcall	.-1014   	; 0x16072 <amigo_check_unit>
   16468:	80 91 17 1d 	lds	r24, 0x1D17	; 0x801d17 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1646c:	90 e0       	ldi	r25, 0x00	; 0
   1646e:	98 2f       	mov	r25, r24
   16470:	88 27       	eor	r24, r24
   16472:	20 91 18 1d 	lds	r18, 0x1D18	; 0x801d18 <gpib_iobuff+0x3>
   16476:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   16478:	9f d9       	rcall	.-3266   	; 0x157b8 <amigo_verify>
   1647a:	f1 c0       	rjmp	.+482    	; 0x1665e <Amigo_Command+0x5c4>
   1647c:	68 30       	cpi	r22, 0x08	; 8
   1647e:	d9 f4       	brne	.+54     	; 0x164b6 <Amigo_Command+0x41c>
   16480:	02 30       	cpi	r16, 0x02	; 2
   16482:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16484:	09 f0       	breq	.+2      	; 0x16488 <Amigo_Command+0x3ee>
   16486:	e8 c0       	rjmp	.+464    	; 0x16658 <Amigo_Command+0x5be>
   16488:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   1648c:	85 ff       	sbrs	r24, 5
   1648e:	0a c0       	rjmp	.+20     	; 0x164a4 <Amigo_Command+0x40a>
   16490:	84 e9       	ldi	r24, 0x94	; 148
   16492:	92 e2       	ldi	r25, 0x22	; 34
   16494:	1f 92       	push	r1
   16496:	9f 93       	push	r25
   16498:	8f 93       	push	r24
   1649a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1649e:	0f 90       	pop	r0
   164a0:	0f 90       	pop	r0
   164a2:	0f 90       	pop	r0
   164a4:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   164a8:	e4 dd       	rcall	.-1080   	; 0x16072 <amigo_check_unit>
   164aa:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   164ae:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   164b2:	88 e0       	ldi	r24, 0x08	; 8
   164b4:	a0 c0       	rjmp	.+320    	; 0x165f6 <Amigo_Command+0x55c>
   164b6:	86 2f       	mov	r24, r22
   164b8:	8f 7d       	andi	r24, 0xDF	; 223
   164ba:	8b 30       	cpi	r24, 0x0B	; 11
   164bc:	d9 f4       	brne	.+54     	; 0x164f4 <Amigo_Command+0x45a>
   164be:	02 30       	cpi	r16, 0x02	; 2
   164c0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   164c2:	09 f0       	breq	.+2      	; 0x164c6 <Amigo_Command+0x42c>
   164c4:	c9 c0       	rjmp	.+402    	; 0x16658 <Amigo_Command+0x5be>
   164c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   164ca:	85 ff       	sbrs	r24, 5
   164cc:	0a c0       	rjmp	.+20     	; 0x164e2 <Amigo_Command+0x448>
   164ce:	88 e7       	ldi	r24, 0x78	; 120
   164d0:	92 e2       	ldi	r25, 0x22	; 34
   164d2:	1f 92       	push	r1
   164d4:	9f 93       	push	r25
   164d6:	8f 93       	push	r24
   164d8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   164dc:	0f 90       	pop	r0
   164de:	0f 90       	pop	r0
   164e0:	0f 90       	pop	r0
   164e2:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   164e6:	c5 dd       	rcall	.-1142   	; 0x16072 <amigo_check_unit>
   164e8:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   164ec:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   164f0:	8a e0       	ldi	r24, 0x0A	; 10
   164f2:	81 c0       	rjmp	.+258    	; 0x165f6 <Amigo_Command+0x55c>
   164f4:	64 31       	cpi	r22, 0x14	; 20
   164f6:	09 f0       	breq	.+2      	; 0x164fa <Amigo_Command+0x460>
   164f8:	af c0       	rjmp	.+350    	; 0x16658 <Amigo_Command+0x5be>
   164fa:	02 30       	cpi	r16, 0x02	; 2
   164fc:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   164fe:	09 f0       	breq	.+2      	; 0x16502 <Amigo_Command+0x468>
   16500:	ab c0       	rjmp	.+342    	; 0x16658 <Amigo_Command+0x5be>
   16502:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   16506:	85 ff       	sbrs	r24, 5
   16508:	0a c0       	rjmp	.+20     	; 0x1651e <Amigo_Command+0x484>
   1650a:	8f e4       	ldi	r24, 0x4F	; 79
   1650c:	92 e2       	ldi	r25, 0x22	; 34
   1650e:	1f 92       	push	r1
   16510:	9f 93       	push	r25
   16512:	8f 93       	push	r24
   16514:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16518:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   1651a:	0f 90       	pop	r0
   1651c:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1651e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <amigo_request_logical_address>
   16522:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   16526:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1652a:	84 e0       	ldi	r24, 0x04	; 4
   1652c:	64 c0       	rjmp	.+200    	; 0x165f6 <Amigo_Command+0x55c>
   1652e:	89 e6       	ldi	r24, 0x69	; 105
   16530:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   16532:	f1 04       	cpc	r15, r1
   16534:	f1 f4       	brne	.+60     	; 0x16572 <Amigo_Command+0x4d8>
   16536:	68 30       	cpi	r22, 0x08	; 8
   16538:	09 f0       	breq	.+2      	; 0x1653c <Amigo_Command+0x4a2>
   1653a:	8e c0       	rjmp	.+284    	; 0x16658 <Amigo_Command+0x5be>
   1653c:	02 30       	cpi	r16, 0x02	; 2
   1653e:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16540:	09 f0       	breq	.+2      	; 0x16544 <Amigo_Command+0x4aa>
   16542:	8a c0       	rjmp	.+276    	; 0x16658 <Amigo_Command+0x5be>
   16544:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   16548:	85 ff       	sbrs	r24, 5
   1654a:	0a c0       	rjmp	.+20     	; 0x16560 <Amigo_Command+0x4c6>
   1654c:	8f e2       	ldi	r24, 0x2F	; 47
   1654e:	92 e2       	ldi	r25, 0x22	; 34
   16550:	1f 92       	push	r1
   16552:	9f 93       	push	r25
   16554:	8f 93       	push	r24
   16556:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1655a:	0f 90       	pop	r0
   1655c:	0f 90       	pop	r0
   1655e:	0f 90       	pop	r0
   16560:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   16564:	86 dd       	rcall	.-1268   	; 0x16072 <amigo_check_unit>
   16566:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   1656a:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   1656e:	89 e0       	ldi	r24, 0x09	; 9
   16570:	42 c0       	rjmp	.+132    	; 0x165f6 <Amigo_Command+0x55c>
   16572:	9a e6       	ldi	r25, 0x6A	; 106
   16574:	e9 16       	cp	r14, r25
   16576:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   16578:	09 f0       	breq	.+2      	; 0x1657c <Amigo_Command+0x4e2>
   1657a:	47 c0       	rjmp	.+142    	; 0x1660a <Amigo_Command+0x570>
   1657c:	68 30       	cpi	r22, 0x08	; 8
   1657e:	f1 f4       	brne	.+60     	; 0x165bc <Amigo_Command+0x522>
   16580:	02 30       	cpi	r16, 0x02	; 2
   16582:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16584:	09 f0       	breq	.+2      	; 0x16588 <Amigo_Command+0x4ee>
   16586:	68 c0       	rjmp	.+208    	; 0x16658 <Amigo_Command+0x5be>
   16588:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1658c:	85 ff       	sbrs	r24, 5
   1658e:	0a c0       	rjmp	.+20     	; 0x165a4 <Amigo_Command+0x50a>
   16590:	84 e0       	ldi	r24, 0x04	; 4
   16592:	92 e2       	ldi	r25, 0x22	; 34
   16594:	1f 92       	push	r1
   16596:	9f 93       	push	r25
   16598:	8f 93       	push	r24
   1659a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1659e:	0f 90       	pop	r0
   165a0:	0f 90       	pop	r0
   165a2:	0f 90       	pop	r0
   165a4:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   165a8:	64 dd       	rcall	.-1336   	; 0x16072 <amigo_check_unit>
   165aa:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   165ae:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
            amigo_request_status();
   165b2:	82 e0       	ldi	r24, 0x02	; 2
   165b4:	80 83       	st	Z, r24
   165b6:	0e 94 74 aa 	call	0x154e8	; 0x154e8 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   165ba:	49 c0       	rjmp	.+146    	; 0x1664e <Amigo_Command+0x5b4>
   165bc:	65 30       	cpi	r22, 0x05	; 5
   165be:	09 f0       	breq	.+2      	; 0x165c2 <Amigo_Command+0x528>
   165c0:	4b c0       	rjmp	.+150    	; 0x16658 <Amigo_Command+0x5be>
   165c2:	02 30       	cpi	r16, 0x02	; 2
   165c4:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   165c6:	09 f0       	breq	.+2      	; 0x165ca <Amigo_Command+0x530>
   165c8:	47 c0       	rjmp	.+142    	; 0x16658 <Amigo_Command+0x5be>
   165ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   165ce:	85 ff       	sbrs	r24, 5
   165d0:	0a c0       	rjmp	.+20     	; 0x165e6 <Amigo_Command+0x54c>
   165d2:	85 ee       	ldi	r24, 0xE5	; 229
   165d4:	91 e2       	ldi	r25, 0x21	; 33
   165d6:	1f 92       	push	r1
   165d8:	9f 93       	push	r25
   165da:	8f 93       	push	r24
   165dc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   165e0:	0f 90       	pop	r0
   165e2:	0f 90       	pop	r0
   165e4:	0f 90       	pop	r0
   165e6:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   165ea:	43 dd       	rcall	.-1402   	; 0x16072 <amigo_check_unit>
   165ec:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   165f0:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   165f4:	87 e0       	ldi	r24, 0x07	; 7
   165f6:	80 83       	st	Z, r24
   165f8:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   165fc:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   16600:	81 81       	ldd	r24, Z+1	; 0x01
   16602:	90 e0       	ldi	r25, 0x00	; 0
   16604:	0e 94 4d 8e 	call	0x11c9a	; 0x11c9a <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   16608:	22 c0       	rjmp	.+68     	; 0x1664e <Amigo_Command+0x5b4>
   1660a:	8c e6       	ldi	r24, 0x6C	; 108
   1660c:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   1660e:	f1 04       	cpc	r15, r1
   16610:	d1 f4       	brne	.+52     	; 0x16646 <Amigo_Command+0x5ac>
   16612:	68 31       	cpi	r22, 0x18	; 24
   16614:	09 f5       	brne	.+66     	; 0x16658 <Amigo_Command+0x5be>
   16616:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   16618:	11 05       	cpc	r17, r1
   1661a:	f1 f4       	brne	.+60     	; 0x16658 <Amigo_Command+0x5be>
   1661c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   16620:	85 ff       	sbrs	r24, 5
   16622:	0a c0       	rjmp	.+20     	; 0x16638 <Amigo_Command+0x59e>
   16624:	85 ed       	ldi	r24, 0xD5	; 213
   16626:	91 e2       	ldi	r25, 0x21	; 33
   16628:	1f 92       	push	r1
   1662a:	9f 93       	push	r25
   1662c:	8f 93       	push	r24
   1662e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16632:	0f 90       	pop	r0
   16634:	0f 90       	pop	r0
   16636:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   16638:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <gpib_iobuff+0x1>
   1663c:	1a dd       	rcall	.-1484   	; 0x16072 <amigo_check_unit>
   1663e:	80 91 19 1d 	lds	r24, 0x1D19	; 0x801d19 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   16642:	4b d9       	rcall	.-3434   	; 0x158da <amigo_format>
   16644:	04 c0       	rjmp	.+8      	; 0x1664e <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   16646:	90 e7       	ldi	r25, 0x70	; 112
   16648:	e9 16       	cp	r14, r25
   1664a:	f1 04       	cpc	r15, r1
   1664c:	29 f4       	brne	.+10     	; 0x16658 <Amigo_Command+0x5be>
   1664e:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   16650:	9b 89       	ldd	r25, Y+19	; 0x13
   16652:	88 27       	eor	r24, r24
   16654:	90 7d       	andi	r25, 0xD0	; 208
   16656:	03 c0       	rjmp	.+6      	; 0x1665e <Amigo_Command+0x5c4>
}
   16658:	a8 01       	movw	r20, r16
   1665a:	8e 2d       	mov	r24, r14
   1665c:	d1 db       	rcall	.-2142   	; 0x15e00 <amigo_todo_op>
   1665e:	63 96       	adiw	r28, 0x13	; 19
   16660:	e6 e0       	ldi	r30, 0x06	; 6
   16662:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00016666 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   16666:	cf 93       	push	r28
   16668:	df 93       	push	r29
   1666a:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   1666c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16670:	85 ff       	sbrs	r24, 5
   16672:	19 c0       	rjmp	.+50     	; 0x166a6 <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   16674:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   16678:	1f 92       	push	r1
   1667a:	8f 93       	push	r24
   1667c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   16680:	1f 92       	push	r1
   16682:	8f 93       	push	r24
   16684:	df 93       	push	r29
   16686:	cf 93       	push	r28
   16688:	83 ea       	ldi	r24, 0xA3	; 163
   1668a:	91 e2       	ldi	r25, 0x21	; 33
   1668c:	1f 92       	push	r1
   1668e:	9f 93       	push	r25
   16690:	8f 93       	push	r24
   16692:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16696:	8d b7       	in	r24, 0x3d	; 61
   16698:	9e b7       	in	r25, 0x3e	; 62
   1669a:	09 96       	adiw	r24, 0x09	; 9
   1669c:	0f b6       	in	r0, 0x3f	; 63
   1669e:	f8 94       	cli
   166a0:	9e bf       	out	0x3e, r25	; 62
   166a2:	0f be       	out	0x3f, r0	; 63
   166a4:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   166a6:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   166aa:	8f 35       	cpi	r24, 0x5F	; 95
   166ac:	09 f4       	brne	.+2      	; 0x166b0 <Amigo_Execute+0x4a>
   166ae:	ad c0       	rjmp	.+346    	; 0x1680a <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   166b0:	90 e0       	ldi	r25, 0x00	; 0
   166b2:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   166b6:	89 2b       	or	r24, r25
   166b8:	39 f0       	breq	.+14     	; 0x166c8 <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   166ba:	ce 01       	movw	r24, r28
   166bc:	87 7f       	andi	r24, 0xF7	; 247
   166be:	80 36       	cpi	r24, 0x60	; 96
   166c0:	91 05       	cpc	r25, r1
   166c2:	09 f0       	breq	.+2      	; 0x166c6 <Amigo_Execute+0x60>
   166c4:	a2 c0       	rjmp	.+324    	; 0x1680a <Amigo_Execute+0x1a4>
   166c6:	08 c0       	rjmp	.+16     	; 0x166d8 <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   166c8:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   166cc:	90 e0       	ldi	r25, 0x00	; 0
   166ce:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   166d2:	89 2b       	or	r24, r25
   166d4:	91 f7       	brne	.-28     	; 0x166ba <Amigo_Execute+0x54>
   166d6:	99 c0       	rjmp	.+306    	; 0x1680a <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   166d8:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   166dc:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   166e0:	81 81       	ldd	r24, Z+1	; 0x01
   166e2:	90 e0       	ldi	r25, 0x00	; 0
   166e4:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>

    if(secondary == 0x60)
   166e8:	c0 36       	cpi	r28, 0x60	; 96
   166ea:	d1 05       	cpc	r29, r1
   166ec:	09 f0       	breq	.+2      	; 0x166f0 <Amigo_Execute+0x8a>
   166ee:	4e c0       	rjmp	.+156    	; 0x1678c <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   166f0:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   166f4:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   166f8:	e0 81       	ld	r30, Z
   166fa:	8e 2f       	mov	r24, r30
   166fc:	90 e0       	ldi	r25, 0x00	; 0
   166fe:	8b 30       	cpi	r24, 0x0B	; 11
   16700:	91 05       	cpc	r25, r1
   16702:	08 f0       	brcs	.+2      	; 0x16706 <Amigo_Execute+0xa0>
   16704:	41 c0       	rjmp	.+130    	; 0x16788 <Amigo_Execute+0x122>
   16706:	fc 01       	movw	r30, r24
   16708:	e0 53       	subi	r30, 0x30	; 48
   1670a:	ff 4f       	sbci	r31, 0xFF	; 255
   1670c:	0c 94 c1 ec 	jmp	0x1d982	; 0x1d982 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   16710:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16714:	85 ff       	sbrs	r24, 5
   16716:	18 c0       	rjmp	.+48     	; 0x16748 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   16718:	83 e8       	ldi	r24, 0x83	; 131
   1671a:	91 e2       	ldi	r25, 0x21	; 33
   1671c:	0d c0       	rjmp	.+26     	; 0x16738 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1671e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16722:	85 ff       	sbrs	r24, 5
   16724:	11 c0       	rjmp	.+34     	; 0x16748 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   16726:	82 e6       	ldi	r24, 0x62	; 98
   16728:	91 e2       	ldi	r25, 0x21	; 33
   1672a:	06 c0       	rjmp	.+12     	; 0x16738 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1672c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16730:	85 ff       	sbrs	r24, 5
   16732:	0a c0       	rjmp	.+20     	; 0x16748 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   16734:	83 e4       	ldi	r24, 0x43	; 67
   16736:	91 e2       	ldi	r25, 0x21	; 33
   16738:	1f 92       	push	r1
   1673a:	9f 93       	push	r25
   1673c:	8f 93       	push	r24
   1673e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16742:	0f 90       	pop	r0
   16744:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   16746:	0f 90       	pop	r0
   16748:	5a d9       	rcall	.-3404   	; 0x159fe <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1674a:	61 c0       	rjmp	.+194    	; 0x1680e <Amigo_Execute+0x1a8>
   1674c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16750:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   16752:	18 c0       	rjmp	.+48     	; 0x16784 <Amigo_Execute+0x11e>
   16754:	81 e2       	ldi	r24, 0x21	; 33
   16756:	91 e2       	ldi	r25, 0x21	; 33
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   16758:	0d c0       	rjmp	.+26     	; 0x16774 <Amigo_Execute+0x10e>
   1675a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1675e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   16760:	11 c0       	rjmp	.+34     	; 0x16784 <Amigo_Execute+0x11e>
   16762:	85 e0       	ldi	r24, 0x05	; 5
   16764:	91 e2       	ldi	r25, 0x21	; 33
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16766:	06 c0       	rjmp	.+12     	; 0x16774 <Amigo_Execute+0x10e>
   16768:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1676c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   1676e:	0a c0       	rjmp	.+20     	; 0x16784 <Amigo_Execute+0x11e>
   16770:	85 ee       	ldi	r24, 0xE5	; 229
   16772:	90 e2       	ldi	r25, 0x20	; 32
   16774:	1f 92       	push	r1
   16776:	9f 93       	push	r25
   16778:	8f 93       	push	r24
   1677a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1677e:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   16780:	0f 90       	pop	r0
   16782:	0f 90       	pop	r0
   16784:	00 da       	rcall	.-3072   	; 0x15b86 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   16786:	43 c0       	rjmp	.+134    	; 0x1680e <Amigo_Execute+0x1a8>
   16788:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   1678a:	3d c0       	rjmp	.+122    	; 0x16806 <Amigo_Execute+0x1a0>
   1678c:	c8 36       	cpi	r28, 0x68	; 104
   1678e:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   16790:	e1 f5       	brne	.+120    	; 0x1680a <Amigo_Execute+0x1a4>
   16792:	e0 91 c6 19 	lds	r30, 0x19C6	; 0x8019c6 <AMIGOs>
   16796:	f0 91 c7 19 	lds	r31, 0x19C7	; 0x8019c7 <AMIGOs+0x1>
   1679a:	80 81       	ld	r24, Z
   1679c:	82 30       	cpi	r24, 0x02	; 2
   1679e:	81 f0       	breq	.+32     	; 0x167c0 <Amigo_Execute+0x15a>
   167a0:	18 f4       	brcc	.+6      	; 0x167a8 <Amigo_Execute+0x142>
   167a2:	88 23       	and	r24, r24
   167a4:	91 f1       	breq	.+100    	; 0x1680a <Amigo_Execute+0x1a4>
   167a6:	2e c0       	rjmp	.+92     	; 0x16804 <Amigo_Execute+0x19e>
   167a8:	83 30       	cpi	r24, 0x03	; 3
   167aa:	19 f0       	breq	.+6      	; 0x167b2 <Amigo_Execute+0x14c>
   167ac:	84 30       	cpi	r24, 0x04	; 4
   167ae:	c9 f0       	breq	.+50     	; 0x167e2 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   167b0:	29 c0       	rjmp	.+82     	; 0x16804 <Amigo_Execute+0x19e>
   167b2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167b6:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   167b8:	11 c0       	rjmp	.+34     	; 0x167dc <Amigo_Execute+0x176>
   167ba:	8c eb       	ldi	r24, 0xBC	; 188
   167bc:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   167be:	06 c0       	rjmp	.+12     	; 0x167cc <Amigo_Execute+0x166>
   167c0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167c4:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   167c6:	0a c0       	rjmp	.+20     	; 0x167dc <Amigo_Execute+0x176>
   167c8:	81 e9       	ldi	r24, 0x91	; 145
   167ca:	90 e2       	ldi	r25, 0x20	; 32
   167cc:	1f 92       	push	r1
   167ce:	9f 93       	push	r25
   167d0:	8f 93       	push	r24
   167d2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   167d6:	0f 90       	pop	r0
   167d8:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   167da:	0f 90       	pop	r0
   167dc:	0e 94 2a ab 	call	0x15654	; 0x15654 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   167e0:	16 c0       	rjmp	.+44     	; 0x1680e <Amigo_Execute+0x1a8>
   167e2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167e6:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   167e8:	0a c0       	rjmp	.+20     	; 0x167fe <Amigo_Execute+0x198>
   167ea:	88 e6       	ldi	r24, 0x68	; 104
   167ec:	90 e2       	ldi	r25, 0x20	; 32
   167ee:	1f 92       	push	r1
   167f0:	9f 93       	push	r25
   167f2:	8f 93       	push	r24
   167f4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   167f8:	0f 90       	pop	r0
   167fa:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   167fc:	0f 90       	pop	r0
   167fe:	0e 94 cc aa 	call	0x15598	; 0x15598 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   16802:	05 c0       	rjmp	.+10     	; 0x1680e <Amigo_Execute+0x1a8>
   16804:	88 e6       	ldi	r24, 0x68	; 104
   16806:	a5 db       	rcall	.-2230   	; 0x15f52 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   16808:	02 c0       	rjmp	.+4      	; 0x1680e <Amigo_Execute+0x1a8>
   1680a:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   1680c:	90 e0       	ldi	r25, 0x00	; 0
   1680e:	df 91       	pop	r29
   16810:	cf 91       	pop	r28
   16812:	08 95       	ret

00016814 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   16814:	cf 93       	push	r28
   16816:	df 93       	push	r29
   16818:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1681a:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   1681e:	90 e0       	ldi	r25, 0x00	; 0
   16820:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   16824:	89 2b       	or	r24, r25
   16826:	51 f0       	breq	.+20     	; 0x1683c <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   16828:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   1682c:	8f 35       	cpi	r24, 0x5F	; 95
   1682e:	71 f4       	brne	.+28     	; 0x1684c <AMIGO_COMMANDS+0x38>
   16830:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   16834:	90 e0       	ldi	r25, 0x00	; 0
   16836:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   1683a:	08 c0       	rjmp	.+16     	; 0x1684c <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1683c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   16840:	90 e0       	ldi	r25, 0x00	; 0
   16842:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   16846:	89 2b       	or	r24, r25
   16848:	79 f7       	brne	.-34     	; 0x16828 <AMIGO_COMMANDS+0x14>
   1684a:	76 c0       	rjmp	.+236    	; 0x16938 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   1684c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   16850:	81 11       	cpse	r24, r1
   16852:	05 c0       	rjmp	.+10     	; 0x1685e <AMIGO_COMMANDS+0x4a>
   16854:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   16858:	90 e0       	ldi	r25, 0x00	; 0
   1685a:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1685e:	c0 36       	cpi	r28, 0x60	; 96
   16860:	99 f4       	brne	.+38     	; 0x16888 <AMIGO_COMMANDS+0x74>
   16862:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   16866:	90 e0       	ldi	r25, 0x00	; 0
   16868:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   1686c:	89 2b       	or	r24, r25
   1686e:	19 f0       	breq	.+6      	; 0x16876 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   16870:	80 e6       	ldi	r24, 0x60	; 96
   16872:	90 e0       	ldi	r25, 0x00	; 0
   16874:	14 c0       	rjmp	.+40     	; 0x1689e <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   16876:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   1687a:	90 e0       	ldi	r25, 0x00	; 0
   1687c:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   16880:	89 2b       	or	r24, r25
   16882:	09 f4       	brne	.+2      	; 0x16886 <AMIGO_COMMANDS+0x72>
   16884:	59 c0       	rjmp	.+178    	; 0x16938 <AMIGO_COMMANDS+0x124>
   16886:	f4 cf       	rjmp	.-24     	; 0x16870 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   16888:	c8 36       	cpi	r28, 0x68	; 104
   1688a:	c1 f4       	brne	.+48     	; 0x168bc <AMIGO_COMMANDS+0xa8>
   1688c:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   16890:	90 e0       	ldi	r25, 0x00	; 0
   16892:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   16896:	89 2b       	or	r24, r25
   16898:	21 f0       	breq	.+8      	; 0x168a2 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1689a:	88 e6       	ldi	r24, 0x68	; 104
   1689c:	90 e0       	ldi	r25, 0x00	; 0
   1689e:	e3 de       	rcall	.-570    	; 0x16666 <Amigo_Execute>
   168a0:	0b c0       	rjmp	.+22     	; 0x168b8 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   168a2:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   168a6:	90 e0       	ldi	r25, 0x00	; 0
   168a8:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   168ac:	89 2b       	or	r24, r25
   168ae:	09 f4       	brne	.+2      	; 0x168b2 <AMIGO_COMMANDS+0x9e>
   168b0:	43 c0       	rjmp	.+134    	; 0x16938 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   168b2:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   168b4:	90 e0       	ldi	r25, 0x00	; 0
   168b6:	f1 db       	rcall	.-2078   	; 0x1609a <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   168b8:	ec 01       	movw	r28, r24
   168ba:	40 c0       	rjmp	.+128    	; 0x1693c <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   168bc:	c9 36       	cpi	r28, 0x69	; 105
   168be:	51 f4       	brne	.+20     	; 0x168d4 <AMIGO_COMMANDS+0xc0>
   168c0:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   168c4:	90 e0       	ldi	r25, 0x00	; 0
   168c6:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   168ca:	89 2b       	or	r24, r25
   168cc:	a9 f1       	breq	.+106    	; 0x16938 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   168ce:	89 e6       	ldi	r24, 0x69	; 105
   168d0:	90 e0       	ldi	r25, 0x00	; 0
   168d2:	f1 cf       	rjmp	.-30     	; 0x168b6 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   168d4:	ca 36       	cpi	r28, 0x6A	; 106
   168d6:	51 f4       	brne	.+20     	; 0x168ec <AMIGO_COMMANDS+0xd8>
   168d8:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   168dc:	90 e0       	ldi	r25, 0x00	; 0
   168de:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   168e2:	89 2b       	or	r24, r25
   168e4:	49 f1       	breq	.+82     	; 0x16938 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   168e6:	8a e6       	ldi	r24, 0x6A	; 106
   168e8:	90 e0       	ldi	r25, 0x00	; 0
   168ea:	e5 cf       	rjmp	.-54     	; 0x168b6 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   168ec:	cc 36       	cpi	r28, 0x6C	; 108
   168ee:	51 f4       	brne	.+20     	; 0x16904 <AMIGO_COMMANDS+0xf0>
   168f0:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   168f4:	90 e0       	ldi	r25, 0x00	; 0
   168f6:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   168fa:	89 2b       	or	r24, r25
   168fc:	e9 f0       	breq	.+58     	; 0x16938 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   168fe:	8c e6       	ldi	r24, 0x6C	; 108
   16900:	90 e0       	ldi	r25, 0x00	; 0
   16902:	d9 cf       	rjmp	.-78     	; 0x168b6 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   16904:	c0 37       	cpi	r28, 0x70	; 112
   16906:	c1 f4       	brne	.+48     	; 0x16938 <AMIGO_COMMANDS+0x124>
   16908:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   1690c:	90 e0       	ldi	r25, 0x00	; 0
   1690e:	0e 94 9e 94 	call	0x1293c	; 0x1293c <AMIGO_is_MTA>
   16912:	ec 01       	movw	r28, r24
   16914:	89 2b       	or	r24, r25
   16916:	51 f0       	breq	.+20     	; 0x1692c <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16918:	e0 91 c8 19 	lds	r30, 0x19C8	; 0x8019c8 <AMIGOp>
   1691c:	f0 91 c9 19 	lds	r31, 0x19C9	; 0x8019c9 <AMIGOp+0x1>
   16920:	81 81       	ldd	r24, Z+1	; 0x01
   16922:	90 e0       	ldi	r25, 0x00	; 0
   16924:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   16928:	e6 d9       	rcall	.-3124   	; 0x15cf6 <amigo_cmd_dsj>
   1692a:	c6 cf       	rjmp	.-116    	; 0x168b8 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   1692c:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   16930:	90 e0       	ldi	r25, 0x00	; 0
   16932:	0e 94 8d 94 	call	0x1291a	; 0x1291a <AMIGO_is_MLA>
   16936:	02 c0       	rjmp	.+4      	; 0x1693c <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   16938:	c0 e0       	ldi	r28, 0x00	; 0
   1693a:	d0 e0       	ldi	r29, 0x00	; 0
}
   1693c:	ce 01       	movw	r24, r28
   1693e:	df 91       	pop	r29
   16940:	cf 91       	pop	r28
   16942:	08 95       	ret

00016944 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   16944:	e7 eb       	ldi	r30, 0xB7	; 183
   16946:	f9 e1       	ldi	r31, 0x19	; 25
   16948:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   1694a:	10 82       	st	Z, r1
   1694c:	11 82       	std	Z+1, r1	; 0x01
   1694e:	12 82       	std	Z+2, r1	; 0x02
   16950:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   16952:	15 82       	std	Z+5, r1	; 0x05
   16954:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   16956:	12 86       	std	Z+10, r1	; 0x0a
   16958:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   1695a:	14 86       	std	Z+12, r1	; 0x0c
   1695c:	13 86       	std	Z+11, r1	; 0x0b
   1695e:	08 95       	ret

00016960 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   16960:	cf 93       	push	r28
   16962:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   16964:	20 91 c0 19 	lds	r18, 0x19C0	; 0x8019c0 <plot+0x9>
   16968:	30 91 c1 19 	lds	r19, 0x19C1	; 0x8019c1 <plot+0xa>
   1696c:	21 15       	cp	r18, r1
   1696e:	31 05       	cpc	r19, r1
   16970:	09 f4       	brne	.+2      	; 0x16974 <receive_plot_flush+0x14>
   16972:	4a c0       	rjmp	.+148    	; 0x16a08 <receive_plot_flush+0xa8>
   16974:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <plot+0x4>
   16978:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <plot+0x5>
   1697c:	00 97       	sbiw	r24, 0x00	; 0
   1697e:	09 f4       	brne	.+2      	; 0x16982 <receive_plot_flush+0x22>
   16980:	45 c0       	rjmp	.+138    	; 0x16a0c <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   16982:	ac 01       	movw	r20, r24
   16984:	61 e0       	ldi	r22, 0x01	; 1
   16986:	70 e0       	ldi	r23, 0x00	; 0
   16988:	80 91 c2 19 	lds	r24, 0x19C2	; 0x8019c2 <plot+0xb>
   1698c:	90 91 c3 19 	lds	r25, 0x19C3	; 0x8019c3 <plot+0xc>
   16990:	0e 94 39 82 	call	0x10472	; 0x10472 <fwrite>
   16994:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   16996:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <plot+0x4>
   1699a:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <plot+0x5>
   1699e:	c8 17       	cp	r28, r24
   169a0:	d9 07       	cpc	r29, r25
   169a2:	31 f1       	breq	.+76     	; 0x169f0 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   169a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169a8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   169ac:	81 72       	andi	r24, 0x21	; 33
   169ae:	99 27       	eor	r25, r25
   169b0:	89 2b       	or	r24, r25
   169b2:	d9 f0       	breq	.+54     	; 0x169ea <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   169b4:	8e e4       	ldi	r24, 0x4E	; 78
   169b6:	93 e1       	ldi	r25, 0x13	; 19
   169b8:	0e 94 e7 7d 	call	0xfbce	; 0xfbce <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   169bc:	df 93       	push	r29
   169be:	cf 93       	push	r28
   169c0:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <plot+0x5>
   169c4:	8f 93       	push	r24
   169c6:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <plot+0x4>
   169ca:	8f 93       	push	r24
   169cc:	8c e2       	ldi	r24, 0x2C	; 44
   169ce:	99 e2       	ldi	r25, 0x29	; 41
   169d0:	1f 92       	push	r1
   169d2:	9f 93       	push	r25
   169d4:	8f 93       	push	r24
   169d6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   169da:	8d b7       	in	r24, 0x3d	; 61
   169dc:	9e b7       	in	r25, 0x3e	; 62
   169de:	07 96       	adiw	r24, 0x07	; 7
   169e0:	0f b6       	in	r0, 0x3f	; 63
   169e2:	f8 94       	cli
   169e4:	9e bf       	out	0x3e, r25	; 62
   169e6:	0f be       	out	0x3f, r0	; 63
   169e8:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   169ea:	8f ef       	ldi	r24, 0xFF	; 255
   169ec:	9f ef       	ldi	r25, 0xFF	; 255
   169ee:	0e c0       	rjmp	.+28     	; 0x16a0c <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   169f0:	80 91 c0 19 	lds	r24, 0x19C0	; 0x8019c0 <plot+0x9>
   169f4:	90 91 c1 19 	lds	r25, 0x19C1	; 0x8019c1 <plot+0xa>
   169f8:	0e 94 84 7b 	call	0xf708	; 0xf708 <fileno>
    if(fno < 0)
   169fc:	97 fd       	sbrc	r25, 7
   169fe:	f5 cf       	rjmp	.-22     	; 0x169ea <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   16a00:	0e 94 83 81 	call	0x10306	; 0x10306 <syncfs>
    return (ret);
   16a04:	ce 01       	movw	r24, r28
   16a06:	02 c0       	rjmp	.+4      	; 0x16a0c <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   16a08:	80 e0       	ldi	r24, 0x00	; 0
   16a0a:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   16a0c:	df 91       	pop	r29
   16a0e:	cf 91       	pop	r28
   16a10:	08 95       	ret

00016a12 <printer_close>:
   16a12:	a6 df       	rcall	.-180    	; 0x16960 <receive_plot_flush>
   16a14:	97 ff       	sbrs	r25, 7
   16a16:	03 c0       	rjmp	.+6      	; 0x16a1e <printer_close+0xc>
   16a18:	81 e0       	ldi	r24, 0x01	; 1
   16a1a:	80 93 bf 19 	sts	0x19BF, r24	; 0x8019bf <plot+0x8>
   16a1e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16a22:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16a26:	81 72       	andi	r24, 0x21	; 33
   16a28:	99 27       	eor	r25, r25
   16a2a:	89 2b       	or	r24, r25
   16a2c:	71 f0       	breq	.+28     	; 0x16a4a <printer_close+0x38>
   16a2e:	80 91 bf 19 	lds	r24, 0x19BF	; 0x8019bf <plot+0x8>
   16a32:	88 23       	and	r24, r24
   16a34:	51 f0       	breq	.+20     	; 0x16a4a <printer_close+0x38>
   16a36:	8b e5       	ldi	r24, 0x5B	; 91
   16a38:	99 e2       	ldi	r25, 0x29	; 41
   16a3a:	1f 92       	push	r1
   16a3c:	9f 93       	push	r25
   16a3e:	8f 93       	push	r24
   16a40:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16a44:	0f 90       	pop	r0
   16a46:	0f 90       	pop	r0
   16a48:	0f 90       	pop	r0
   16a4a:	80 91 c0 19 	lds	r24, 0x19C0	; 0x8019c0 <plot+0x9>
   16a4e:	90 91 c1 19 	lds	r25, 0x19C1	; 0x8019c1 <plot+0xa>
   16a52:	00 97       	sbiw	r24, 0x00	; 0
   16a54:	09 f1       	breq	.+66     	; 0x16a98 <printer_close+0x86>
   16a56:	0e 94 bb 82 	call	0x10576	; 0x10576 <fclose>
   16a5a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16a5e:	85 ff       	sbrs	r24, 5
   16a60:	1b c0       	rjmp	.+54     	; 0x16a98 <printer_close+0x86>
   16a62:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <plot+0x3>
   16a66:	8f 93       	push	r24
   16a68:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <plot+0x2>
   16a6c:	8f 93       	push	r24
   16a6e:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <plot+0x1>
   16a72:	8f 93       	push	r24
   16a74:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot>
   16a78:	8f 93       	push	r24
   16a7a:	8d e4       	ldi	r24, 0x4D	; 77
   16a7c:	99 e2       	ldi	r25, 0x29	; 41
   16a7e:	1f 92       	push	r1
   16a80:	9f 93       	push	r25
   16a82:	8f 93       	push	r24
   16a84:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16a88:	8d b7       	in	r24, 0x3d	; 61
   16a8a:	9e b7       	in	r25, 0x3e	; 62
   16a8c:	07 96       	adiw	r24, 0x07	; 7
   16a8e:	0f b6       	in	r0, 0x3f	; 63
   16a90:	f8 94       	cli
   16a92:	9e bf       	out	0x3e, r25	; 62
   16a94:	0f be       	out	0x3f, r0	; 63
   16a96:	8d bf       	out	0x3d, r24	; 61
   16a98:	80 91 c2 19 	lds	r24, 0x19C2	; 0x8019c2 <plot+0xb>
   16a9c:	90 91 c3 19 	lds	r25, 0x19C3	; 0x8019c3 <plot+0xc>
   16aa0:	00 97       	sbiw	r24, 0x00	; 0
   16aa2:	11 f0       	breq	.+4      	; 0x16aa8 <printer_close+0x96>
   16aa4:	0e 94 6f 2a 	call	0x54de	; 0x54de <safefree>
   16aa8:	4d cf       	rjmp	.-358    	; 0x16944 <printer_init>
   16aaa:	08 95       	ret

00016aac <printer_open>:
   16aac:	ac e4       	ldi	r26, 0x4C	; 76
   16aae:	b0 e0       	ldi	r27, 0x00	; 0
   16ab0:	ec e5       	ldi	r30, 0x5C	; 92
   16ab2:	f5 eb       	ldi	r31, 0xB5	; 181
   16ab4:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   16ab8:	8c 01       	movw	r16, r24
   16aba:	89 2b       	or	r24, r25
   16abc:	09 f0       	breq	.+2      	; 0x16ac0 <printer_open+0x14>
   16abe:	4b c0       	rjmp	.+150    	; 0x16b56 <printer_open+0xaa>
   16ac0:	be 01       	movw	r22, r28
   16ac2:	6f 5b       	subi	r22, 0xBF	; 191
   16ac4:	7f 4f       	sbci	r23, 0xFF	; 255
   16ac6:	80 e0       	ldi	r24, 0x00	; 0
   16ac8:	90 e0       	ldi	r25, 0x00	; 0
   16aca:	0e 94 92 34 	call	0x6924	; 0x6924 <clock_gettime>
   16ace:	25 96       	adiw	r28, 0x05	; 5
   16ad0:	8c ad       	ldd	r24, Y+60	; 0x3c
   16ad2:	9d ad       	ldd	r25, Y+61	; 0x3d
   16ad4:	ae ad       	ldd	r26, Y+62	; 0x3e
   16ad6:	bf ad       	ldd	r27, Y+63	; 0x3f
   16ad8:	25 97       	sbiw	r28, 0x05	; 5
   16ada:	2d 96       	adiw	r28, 0x0d	; 13
   16adc:	8c af       	std	Y+60, r24	; 0x3c
   16ade:	9d af       	std	Y+61, r25	; 0x3d
   16ae0:	ae af       	std	Y+62, r26	; 0x3e
   16ae2:	bf af       	std	Y+63, r27	; 0x3f
   16ae4:	2d 97       	sbiw	r28, 0x0d	; 13
   16ae6:	ce 01       	movw	r24, r28
   16ae8:	87 5b       	subi	r24, 0xB7	; 183
   16aea:	9f 4f       	sbci	r25, 0xFF	; 255
   16aec:	0e 94 62 38 	call	0x70c4	; 0x70c4 <gmtime>
   16af0:	8c 01       	movw	r16, r24
   16af2:	fc 01       	movw	r30, r24
   16af4:	90 80       	ld	r9, Z
   16af6:	81 80       	ldd	r8, Z+1	; 0x01
   16af8:	b2 80       	ldd	r11, Z+2	; 0x02
   16afa:	a3 80       	ldd	r10, Z+3	; 0x03
   16afc:	d4 80       	ldd	r13, Z+4	; 0x04
   16afe:	c5 80       	ldd	r12, Z+5	; 0x05
   16b00:	e2 84       	ldd	r14, Z+10	; 0x0a
   16b02:	f3 84       	ldd	r15, Z+11	; 0x0b
   16b04:	f4 e9       	ldi	r31, 0x94	; 148
   16b06:	ef 1a       	sub	r14, r31
   16b08:	f8 ef       	ldi	r31, 0xF8	; 248
   16b0a:	ff 0a       	sbc	r15, r31
   16b0c:	fc 01       	movw	r30, r24
   16b0e:	80 85       	ldd	r24, Z+8	; 0x08
   16b10:	91 85       	ldd	r25, Z+9	; 0x09
   16b12:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <tm_mon_to_ascii>
   16b16:	8f 92       	push	r8
   16b18:	9f 92       	push	r9
   16b1a:	af 92       	push	r10
   16b1c:	bf 92       	push	r11
   16b1e:	cf 92       	push	r12
   16b20:	df 92       	push	r13
   16b22:	ff 92       	push	r15
   16b24:	ef 92       	push	r14
   16b26:	9f 93       	push	r25
   16b28:	8f 93       	push	r24
   16b2a:	f8 01       	movw	r30, r16
   16b2c:	87 81       	ldd	r24, Z+7	; 0x07
   16b2e:	8f 93       	push	r24
   16b30:	86 81       	ldd	r24, Z+6	; 0x06
   16b32:	8f 93       	push	r24
   16b34:	82 e9       	ldi	r24, 0x92	; 146
   16b36:	99 e2       	ldi	r25, 0x29	; 41
   16b38:	1f 92       	push	r1
   16b3a:	9f 93       	push	r25
   16b3c:	8f 93       	push	r24
   16b3e:	8e 01       	movw	r16, r28
   16b40:	0f 5f       	subi	r16, 0xFF	; 255
   16b42:	1f 4f       	sbci	r17, 0xFF	; 255
   16b44:	1f 93       	push	r17
   16b46:	0f 93       	push	r16
   16b48:	0e 94 ed 46 	call	0x8dda	; 0x8dda <sprintf_P>
   16b4c:	0f b6       	in	r0, 0x3f	; 63
   16b4e:	f8 94       	cli
   16b50:	de bf       	out	0x3e, r29	; 62
   16b52:	0f be       	out	0x3f, r0	; 63
   16b54:	cd bf       	out	0x3d, r28	; 61
   16b56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b5a:	85 ff       	sbrs	r24, 5
   16b5c:	0e c0       	rjmp	.+28     	; 0x16b7a <printer_open+0xce>
   16b5e:	1f 93       	push	r17
   16b60:	0f 93       	push	r16
   16b62:	8c e7       	ldi	r24, 0x7C	; 124
   16b64:	99 e2       	ldi	r25, 0x29	; 41
   16b66:	1f 92       	push	r1
   16b68:	9f 93       	push	r25
   16b6a:	8f 93       	push	r24
   16b6c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16b70:	0f 90       	pop	r0
   16b72:	0f 90       	pop	r0
   16b74:	0f 90       	pop	r0
   16b76:	0f 90       	pop	r0
   16b78:	0f 90       	pop	r0
   16b7a:	6e e7       	ldi	r22, 0x7E	; 126
   16b7c:	78 e0       	ldi	r23, 0x08	; 8
   16b7e:	c8 01       	movw	r24, r16
   16b80:	0e 94 11 84 	call	0x10822	; 0x10822 <fopen>
   16b84:	90 93 c1 19 	sts	0x19C1, r25	; 0x8019c1 <plot+0xa>
   16b88:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <plot+0x9>
   16b8c:	89 2b       	or	r24, r25
   16b8e:	b9 f4       	brne	.+46     	; 0x16bbe <printer_open+0x112>
   16b90:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b94:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16b98:	81 72       	andi	r24, 0x21	; 33
   16b9a:	99 27       	eor	r25, r25
   16b9c:	89 2b       	or	r24, r25
   16b9e:	11 f1       	breq	.+68     	; 0x16be4 <printer_open+0x138>
   16ba0:	8c e2       	ldi	r24, 0x2C	; 44
   16ba2:	9d e0       	ldi	r25, 0x0D	; 13
   16ba4:	0e 94 e7 7d 	call	0xfbce	; 0xfbce <perror>
   16ba8:	80 e7       	ldi	r24, 0x70	; 112
   16baa:	99 e2       	ldi	r25, 0x29	; 41
   16bac:	1f 92       	push	r1
   16bae:	9f 93       	push	r25
   16bb0:	8f 93       	push	r24
   16bb2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16bb6:	0f 90       	pop	r0
   16bb8:	0f 90       	pop	r0
   16bba:	0f 90       	pop	r0
   16bbc:	13 c0       	rjmp	.+38     	; 0x16be4 <printer_open+0x138>
   16bbe:	61 e0       	ldi	r22, 0x01	; 1
   16bc0:	70 e0       	ldi	r23, 0x00	; 0
   16bc2:	81 e0       	ldi	r24, 0x01	; 1
   16bc4:	92 e0       	ldi	r25, 0x02	; 2
   16bc6:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   16bca:	90 93 c3 19 	sts	0x19C3, r25	; 0x8019c3 <plot+0xc>
   16bce:	80 93 c2 19 	sts	0x19C2, r24	; 0x8019c2 <plot+0xb>
   16bd2:	89 2b       	or	r24, r25
   16bd4:	09 f4       	brne	.+2      	; 0x16bd8 <printer_open+0x12c>
   16bd6:	1d df       	rcall	.-454    	; 0x16a12 <printer_close>
   16bd8:	80 e0       	ldi	r24, 0x00	; 0
   16bda:	92 e0       	ldi	r25, 0x02	; 2
   16bdc:	90 93 be 19 	sts	0x19BE, r25	; 0x8019be <plot+0x7>
   16be0:	80 93 bd 19 	sts	0x19BD, r24	; 0x8019bd <plot+0x6>
   16be4:	c4 5b       	subi	r28, 0xB4	; 180
   16be6:	df 4f       	sbci	r29, 0xFF	; 255
   16be8:	ec e0       	ldi	r30, 0x0C	; 12
   16bea:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

00016bee <printer_buffer>:
   16bee:	cf 93       	push	r28
   16bf0:	df 93       	push	r29
   16bf2:	ec 01       	movw	r28, r24
   16bf4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16bf8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16bfc:	81 72       	andi	r24, 0x21	; 33
   16bfe:	99 27       	eor	r25, r25
   16c00:	89 2b       	or	r24, r25
   16c02:	e9 f0       	breq	.+58     	; 0x16c3e <printer_buffer+0x50>
   16c04:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot>
   16c08:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <plot+0x1>
   16c0c:	20 91 b9 19 	lds	r18, 0x19B9	; 0x8019b9 <plot+0x2>
   16c10:	30 91 ba 19 	lds	r19, 0x19BA	; 0x8019ba <plot+0x3>
   16c14:	81 11       	cpse	r24, r1
   16c16:	13 c0       	rjmp	.+38     	; 0x16c3e <printer_buffer+0x50>
   16c18:	3f 93       	push	r19
   16c1a:	2f 93       	push	r18
   16c1c:	9f 93       	push	r25
   16c1e:	8f 93       	push	r24
   16c20:	85 e2       	ldi	r24, 0x25	; 37
   16c22:	99 e2       	ldi	r25, 0x29	; 41
   16c24:	1f 92       	push	r1
   16c26:	9f 93       	push	r25
   16c28:	8f 93       	push	r24
   16c2a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16c2e:	8d b7       	in	r24, 0x3d	; 61
   16c30:	9e b7       	in	r25, 0x3e	; 62
   16c32:	07 96       	adiw	r24, 0x07	; 7
   16c34:	0f b6       	in	r0, 0x3f	; 63
   16c36:	f8 94       	cli
   16c38:	9e bf       	out	0x3e, r25	; 62
   16c3a:	0f be       	out	0x3f, r0	; 63
   16c3c:	8d bf       	out	0x3d, r24	; 61
   16c3e:	ce 01       	movw	r24, r28
   16c40:	88 27       	eor	r24, r24
   16c42:	97 7f       	andi	r25, 0xF7	; 247
   16c44:	89 2b       	or	r24, r25
   16c46:	41 f0       	breq	.+16     	; 0x16c58 <printer_buffer+0x6a>
   16c48:	8b de       	rcall	.-746    	; 0x16960 <receive_plot_flush>
   16c4a:	89 2b       	or	r24, r25
   16c4c:	09 f4       	brne	.+2      	; 0x16c50 <printer_buffer+0x62>
   16c4e:	3f c0       	rjmp	.+126    	; 0x16cce <printer_buffer+0xe0>
   16c50:	81 e0       	ldi	r24, 0x01	; 1
   16c52:	80 93 bf 19 	sts	0x19BF, r24	; 0x8019bf <plot+0x8>
   16c56:	3b c0       	rjmp	.+118    	; 0x16cce <printer_buffer+0xe0>
   16c58:	20 91 c2 19 	lds	r18, 0x19C2	; 0x8019c2 <plot+0xb>
   16c5c:	30 91 c3 19 	lds	r19, 0x19C3	; 0x8019c3 <plot+0xc>
   16c60:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <plot+0x4>
   16c64:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <plot+0x5>
   16c68:	ac 01       	movw	r20, r24
   16c6a:	4f 5f       	subi	r20, 0xFF	; 255
   16c6c:	5f 4f       	sbci	r21, 0xFF	; 255
   16c6e:	50 93 bc 19 	sts	0x19BC, r21	; 0x8019bc <plot+0x5>
   16c72:	40 93 bb 19 	sts	0x19BB, r20	; 0x8019bb <plot+0x4>
   16c76:	f9 01       	movw	r30, r18
   16c78:	e8 0f       	add	r30, r24
   16c7a:	f9 1f       	adc	r31, r25
   16c7c:	c0 83       	st	Z, r28
   16c7e:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot>
   16c82:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <plot+0x1>
   16c86:	a0 91 b9 19 	lds	r26, 0x19B9	; 0x8019b9 <plot+0x2>
   16c8a:	b0 91 ba 19 	lds	r27, 0x19BA	; 0x8019ba <plot+0x3>
   16c8e:	01 96       	adiw	r24, 0x01	; 1
   16c90:	a1 1d       	adc	r26, r1
   16c92:	b1 1d       	adc	r27, r1
   16c94:	80 93 b7 19 	sts	0x19B7, r24	; 0x8019b7 <plot>
   16c98:	90 93 b8 19 	sts	0x19B8, r25	; 0x8019b8 <plot+0x1>
   16c9c:	a0 93 b9 19 	sts	0x19B9, r26	; 0x8019b9 <plot+0x2>
   16ca0:	b0 93 ba 19 	sts	0x19BA, r27	; 0x8019ba <plot+0x3>
   16ca4:	20 91 bb 19 	lds	r18, 0x19BB	; 0x8019bb <plot+0x4>
   16ca8:	30 91 bc 19 	lds	r19, 0x19BC	; 0x8019bc <plot+0x5>
   16cac:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <plot+0x6>
   16cb0:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <plot+0x7>
   16cb4:	28 17       	cp	r18, r24
   16cb6:	39 07       	cpc	r19, r25
   16cb8:	54 f0       	brlt	.+20     	; 0x16cce <printer_buffer+0xe0>
   16cba:	52 de       	rcall	.-860    	; 0x16960 <receive_plot_flush>
   16cbc:	97 ff       	sbrs	r25, 7
   16cbe:	03 c0       	rjmp	.+6      	; 0x16cc6 <printer_buffer+0xd8>
   16cc0:	81 e0       	ldi	r24, 0x01	; 1
   16cc2:	80 93 bf 19 	sts	0x19BF, r24	; 0x8019bf <plot+0x8>
   16cc6:	10 92 bc 19 	sts	0x19BC, r1	; 0x8019bc <plot+0x5>
   16cca:	10 92 bb 19 	sts	0x19BB, r1	; 0x8019bb <plot+0x4>
   16cce:	df 91       	pop	r29
   16cd0:	cf 91       	pop	r28
   16cd2:	08 95       	ret

00016cd4 <PRINTER_COMMANDS>:
   16cd4:	cf 93       	push	r28
   16cd6:	c8 2f       	mov	r28, r24
   16cd8:	80 91 1b 1f 	lds	r24, 0x1F1B	; 0x801f1b <listening>
   16cdc:	90 e0       	ldi	r25, 0x00	; 0
   16cde:	0e 94 c0 94 	call	0x12980	; 0x12980 <PRINTER_is_MLA>
   16ce2:	89 2b       	or	r24, r25
   16ce4:	49 f0       	breq	.+18     	; 0x16cf8 <PRINTER_COMMANDS+0x24>
   16ce6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16cea:	85 ff       	sbrs	r24, 5
   16cec:	1e c0       	rjmp	.+60     	; 0x16d2a <PRINTER_COMMANDS+0x56>
   16cee:	1f 92       	push	r1
   16cf0:	cf 93       	push	r28
   16cf2:	89 e0       	ldi	r24, 0x09	; 9
   16cf4:	99 e2       	ldi	r25, 0x29	; 41
   16cf6:	0f c0       	rjmp	.+30     	; 0x16d16 <PRINTER_COMMANDS+0x42>
   16cf8:	80 91 19 1f 	lds	r24, 0x1F19	; 0x801f19 <talking>
   16cfc:	90 e0       	ldi	r25, 0x00	; 0
   16cfe:	0e 94 d1 94 	call	0x129a2	; 0x129a2 <PRINTER_is_MTA>
   16d02:	89 2b       	or	r24, r25
   16d04:	91 f0       	breq	.+36     	; 0x16d2a <PRINTER_COMMANDS+0x56>
   16d06:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d0a:	85 ff       	sbrs	r24, 5
   16d0c:	0e c0       	rjmp	.+28     	; 0x16d2a <PRINTER_COMMANDS+0x56>
   16d0e:	1f 92       	push	r1
   16d10:	cf 93       	push	r28
   16d12:	8f ee       	ldi	r24, 0xEF	; 239
   16d14:	98 e2       	ldi	r25, 0x28	; 40
   16d16:	1f 92       	push	r1
   16d18:	9f 93       	push	r25
   16d1a:	8f 93       	push	r24
   16d1c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16d20:	0f 90       	pop	r0
   16d22:	0f 90       	pop	r0
   16d24:	0f 90       	pop	r0
   16d26:	0f 90       	pop	r0
   16d28:	0f 90       	pop	r0
   16d2a:	80 e0       	ldi	r24, 0x00	; 0
   16d2c:	90 e0       	ldi	r25, 0x00	; 0
   16d2e:	cf 91       	pop	r28
   16d30:	08 95       	ret

00016d32 <plot_echo>:
   16d32:	cf 92       	push	r12
   16d34:	df 92       	push	r13
   16d36:	ff 92       	push	r15
   16d38:	0f 93       	push	r16
   16d3a:	1f 93       	push	r17
   16d3c:	cf 93       	push	r28
   16d3e:	df 93       	push	r29
   16d40:	cd b7       	in	r28, 0x3d	; 61
   16d42:	de b7       	in	r29, 0x3e	; 62
   16d44:	da 95       	dec	r29
   16d46:	0f b6       	in	r0, 0x3f	; 63
   16d48:	f8 94       	cli
   16d4a:	de bf       	out	0x3e, r29	; 62
   16d4c:	0f be       	out	0x3f, r0	; 63
   16d4e:	cd bf       	out	0x3d, r28	; 61
   16d50:	f8 2e       	mov	r15, r24
   16d52:	84 e0       	ldi	r24, 0x04	; 4
   16d54:	90 e0       	ldi	r25, 0x00	; 0
   16d56:	e9 d0       	rcall	.+466    	; 0x16f2a <find_type>
   16d58:	8c 01       	movw	r16, r24
   16d5a:	0f 3f       	cpi	r16, 0xFF	; 255
   16d5c:	8f ef       	ldi	r24, 0xFF	; 255
   16d5e:	18 07       	cpc	r17, r24
   16d60:	59 f4       	brne	.+22     	; 0x16d78 <plot_echo+0x46>
   16d62:	8a ed       	ldi	r24, 0xDA	; 218
   16d64:	98 e2       	ldi	r25, 0x28	; 40
   16d66:	1f 92       	push	r1
   16d68:	9f 93       	push	r25
   16d6a:	8f 93       	push	r24
   16d6c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16d70:	0f 90       	pop	r0
   16d72:	0f 90       	pop	r0
   16d74:	0f 90       	pop	r0
   16d76:	63 c0       	rjmp	.+198    	; 0x16e3e <plot_echo+0x10c>
   16d78:	4c de       	rcall	.-872    	; 0x16a12 <printer_close>
   16d7a:	80 e0       	ldi	r24, 0x00	; 0
   16d7c:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   16d80:	89 2b       	or	r24, r25
   16d82:	31 f0       	breq	.+12     	; 0x16d90 <plot_echo+0x5e>
   16d84:	80 e0       	ldi	r24, 0x00	; 0
   16d86:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <uart_rx_byte>
   16d8a:	0e 94 1b 7b 	call	0xf636	; 0xf636 <putchar>
   16d8e:	f5 cf       	rjmp	.-22     	; 0x16d7a <plot_echo+0x48>
   16d90:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <__iob+0x2>
   16d94:	90 91 ed 1c 	lds	r25, 0x1CED	; 0x801ced <__iob+0x3>
   16d98:	0e 94 7c 90 	call	0x120f8	; 0x120f8 <gpib_decode_header>
   16d9c:	20 e0       	ldi	r18, 0x00	; 0
   16d9e:	30 e0       	ldi	r19, 0x00	; 0
   16da0:	41 e6       	ldi	r20, 0x61	; 97
   16da2:	53 e1       	ldi	r21, 0x13	; 19
   16da4:	6f 2d       	mov	r22, r15
   16da6:	80 2f       	mov	r24, r16
   16da8:	0e 94 1c c9 	call	0x19238	; 0x19238 <controller_send_str>
   16dac:	20 e0       	ldi	r18, 0x00	; 0
   16dae:	31 e0       	ldi	r19, 0x01	; 1
   16db0:	ce 01       	movw	r24, r28
   16db2:	01 96       	adiw	r24, 0x01	; 1
   16db4:	6c 01       	movw	r12, r24
   16db6:	ac 01       	movw	r20, r24
   16db8:	60 2f       	mov	r22, r16
   16dba:	8f 2d       	mov	r24, r15
   16dbc:	0e 94 5f c9 	call	0x192be	; 0x192be <controller_read_str>
   16dc0:	df 92       	push	r13
   16dc2:	cf 92       	push	r12
   16dc4:	9f 93       	push	r25
   16dc6:	8f 93       	push	r24
   16dc8:	88 ec       	ldi	r24, 0xC8	; 200
   16dca:	98 e2       	ldi	r25, 0x28	; 40
   16dcc:	1f 92       	push	r1
   16dce:	9f 93       	push	r25
   16dd0:	8f 93       	push	r24
   16dd2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16dd6:	20 e0       	ldi	r18, 0x00	; 0
   16dd8:	30 e0       	ldi	r19, 0x00	; 0
   16dda:	48 e6       	ldi	r20, 0x68	; 104
   16ddc:	53 e1       	ldi	r21, 0x13	; 19
   16dde:	6f 2d       	mov	r22, r15
   16de0:	80 2f       	mov	r24, r16
   16de2:	0e 94 1c c9 	call	0x19238	; 0x19238 <controller_send_str>
   16de6:	20 e0       	ldi	r18, 0x00	; 0
   16de8:	31 e0       	ldi	r19, 0x01	; 1
   16dea:	a6 01       	movw	r20, r12
   16dec:	60 2f       	mov	r22, r16
   16dee:	8f 2d       	mov	r24, r15
   16df0:	0e 94 5f c9 	call	0x192be	; 0x192be <controller_read_str>
   16df4:	df 92       	push	r13
   16df6:	cf 92       	push	r12
   16df8:	9f 93       	push	r25
   16dfa:	8f 93       	push	r24
   16dfc:	86 eb       	ldi	r24, 0xB6	; 182
   16dfe:	98 e2       	ldi	r25, 0x28	; 40
   16e00:	1f 92       	push	r1
   16e02:	9f 93       	push	r25
   16e04:	8f 93       	push	r24
   16e06:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16e0a:	20 e0       	ldi	r18, 0x00	; 0
   16e0c:	30 e0       	ldi	r19, 0x00	; 0
   16e0e:	4b e7       	ldi	r20, 0x7B	; 123
   16e10:	53 e1       	ldi	r21, 0x13	; 19
   16e12:	6f 2d       	mov	r22, r15
   16e14:	80 2f       	mov	r24, r16
   16e16:	0e 94 1c c9 	call	0x19238	; 0x19238 <controller_send_str>
   16e1a:	60 2f       	mov	r22, r16
   16e1c:	8f 2d       	mov	r24, r15
   16e1e:	0e 94 a5 c9 	call	0x1934a	; 0x1934a <controller_read_trace>
   16e22:	9f 93       	push	r25
   16e24:	8f 93       	push	r24
   16e26:	81 ea       	ldi	r24, 0xA1	; 161
   16e28:	98 e2       	ldi	r25, 0x28	; 40
   16e2a:	1f 92       	push	r1
   16e2c:	9f 93       	push	r25
   16e2e:	8f 93       	push	r24
   16e30:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   16e34:	0f b6       	in	r0, 0x3f	; 63
   16e36:	f8 94       	cli
   16e38:	de bf       	out	0x3e, r29	; 62
   16e3a:	0f be       	out	0x3f, r0	; 63
   16e3c:	cd bf       	out	0x3d, r28	; 61
   16e3e:	d3 95       	inc	r29
   16e40:	0f b6       	in	r0, 0x3f	; 63
   16e42:	f8 94       	cli
   16e44:	de bf       	out	0x3e, r29	; 62
   16e46:	0f be       	out	0x3f, r0	; 63
   16e48:	cd bf       	out	0x3d, r28	; 61
   16e4a:	df 91       	pop	r29
   16e4c:	cf 91       	pop	r28
   16e4e:	1f 91       	pop	r17
   16e50:	0f 91       	pop	r16
   16e52:	ff 90       	pop	r15
   16e54:	df 90       	pop	r13
   16e56:	cf 90       	pop	r12
   16e58:	08 95       	ret

00016e5a <V2B_MSB>:
   16e5a:	0f 93       	push	r16
   16e5c:	1f 93       	push	r17
   16e5e:	da 01       	movw	r26, r20
   16e60:	11 97       	sbiw	r26, 0x01	; 1
   16e62:	b7 fd       	sbrc	r27, 7
   16e64:	0b c0       	rjmp	.+22     	; 0x16e7c <V2B_MSB+0x22>
   16e66:	fd 01       	movw	r30, r26
   16e68:	e6 0f       	add	r30, r22
   16e6a:	f7 1f       	adc	r31, r23
   16e6c:	e8 0f       	add	r30, r24
   16e6e:	f9 1f       	adc	r31, r25
   16e70:	00 83       	st	Z, r16
   16e72:	01 2f       	mov	r16, r17
   16e74:	12 2f       	mov	r17, r18
   16e76:	23 2f       	mov	r18, r19
   16e78:	33 27       	eor	r19, r19
   16e7a:	f2 cf       	rjmp	.-28     	; 0x16e60 <V2B_MSB+0x6>
   16e7c:	1f 91       	pop	r17
   16e7e:	0f 91       	pop	r16
   16e80:	08 95       	ret

00016e82 <V2B_LSB>:
   16e82:	0f 93       	push	r16
   16e84:	1f 93       	push	r17
   16e86:	fc 01       	movw	r30, r24
   16e88:	e6 0f       	add	r30, r22
   16e8a:	f7 1f       	adc	r31, r23
   16e8c:	bf 01       	movw	r22, r30
   16e8e:	cf 01       	movw	r24, r30
   16e90:	86 1b       	sub	r24, r22
   16e92:	97 0b       	sbc	r25, r23
   16e94:	84 17       	cp	r24, r20
   16e96:	95 07       	cpc	r25, r21
   16e98:	34 f4       	brge	.+12     	; 0x16ea6 <V2B_LSB+0x24>
   16e9a:	01 93       	st	Z+, r16
   16e9c:	01 2f       	mov	r16, r17
   16e9e:	12 2f       	mov	r17, r18
   16ea0:	23 2f       	mov	r18, r19
   16ea2:	33 27       	eor	r19, r19
   16ea4:	f4 cf       	rjmp	.-24     	; 0x16e8e <V2B_LSB+0xc>
   16ea6:	1f 91       	pop	r17
   16ea8:	0f 91       	pop	r16
   16eaa:	08 95       	ret

00016eac <B2V_MSB>:
   16eac:	cf 92       	push	r12
   16eae:	df 92       	push	r13
   16eb0:	ef 92       	push	r14
   16eb2:	ff 92       	push	r15
   16eb4:	fc 01       	movw	r30, r24
   16eb6:	e6 0f       	add	r30, r22
   16eb8:	f7 1f       	adc	r31, r23
   16eba:	60 e0       	ldi	r22, 0x00	; 0
   16ebc:	70 e0       	ldi	r23, 0x00	; 0
   16ebe:	cb 01       	movw	r24, r22
   16ec0:	df 01       	movw	r26, r30
   16ec2:	9f 01       	movw	r18, r30
   16ec4:	2a 1b       	sub	r18, r26
   16ec6:	3b 0b       	sbc	r19, r27
   16ec8:	24 17       	cp	r18, r20
   16eca:	35 07       	cpc	r19, r21
   16ecc:	4c f4       	brge	.+18     	; 0x16ee0 <B2V_MSB+0x34>
   16ece:	cc 24       	eor	r12, r12
   16ed0:	d6 2e       	mov	r13, r22
   16ed2:	e7 2e       	mov	r14, r23
   16ed4:	f8 2e       	mov	r15, r24
   16ed6:	21 91       	ld	r18, Z+
   16ed8:	c7 01       	movw	r24, r14
   16eda:	b6 01       	movw	r22, r12
   16edc:	62 2b       	or	r22, r18
   16ede:	f1 cf       	rjmp	.-30     	; 0x16ec2 <B2V_MSB+0x16>
   16ee0:	ff 90       	pop	r15
   16ee2:	ef 90       	pop	r14
   16ee4:	df 90       	pop	r13
   16ee6:	cf 90       	pop	r12
   16ee8:	08 95       	ret

00016eea <B2V_LSB>:
   16eea:	cf 92       	push	r12
   16eec:	df 92       	push	r13
   16eee:	ef 92       	push	r14
   16ef0:	ff 92       	push	r15
   16ef2:	9c 01       	movw	r18, r24
   16ef4:	db 01       	movw	r26, r22
   16ef6:	60 e0       	ldi	r22, 0x00	; 0
   16ef8:	70 e0       	ldi	r23, 0x00	; 0
   16efa:	cb 01       	movw	r24, r22
   16efc:	41 50       	subi	r20, 0x01	; 1
   16efe:	51 09       	sbc	r21, r1
   16f00:	57 fd       	sbrc	r21, 7
   16f02:	0e c0       	rjmp	.+28     	; 0x16f20 <B2V_LSB+0x36>
   16f04:	cc 24       	eor	r12, r12
   16f06:	d6 2e       	mov	r13, r22
   16f08:	e7 2e       	mov	r14, r23
   16f0a:	f8 2e       	mov	r15, r24
   16f0c:	fa 01       	movw	r30, r20
   16f0e:	ea 0f       	add	r30, r26
   16f10:	fb 1f       	adc	r31, r27
   16f12:	e2 0f       	add	r30, r18
   16f14:	f3 1f       	adc	r31, r19
   16f16:	e0 81       	ld	r30, Z
   16f18:	c7 01       	movw	r24, r14
   16f1a:	b6 01       	movw	r22, r12
   16f1c:	6e 2b       	or	r22, r30
   16f1e:	ee cf       	rjmp	.-36     	; 0x16efc <B2V_LSB+0x12>
   16f20:	ff 90       	pop	r15
   16f22:	ef 90       	pop	r14
   16f24:	df 90       	pop	r13
   16f26:	cf 90       	pop	r12
   16f28:	08 95       	ret

00016f2a <find_type>:
   16f2a:	ef e1       	ldi	r30, 0x1F	; 31
   16f2c:	ff e1       	ldi	r31, 0x1F	; 31
   16f2e:	20 e0       	ldi	r18, 0x00	; 0
   16f30:	30 e0       	ldi	r19, 0x00	; 0
   16f32:	40 81       	ld	r20, Z
   16f34:	50 e0       	ldi	r21, 0x00	; 0
   16f36:	48 17       	cp	r20, r24
   16f38:	59 07       	cpc	r21, r25
   16f3a:	49 f0       	breq	.+18     	; 0x16f4e <find_type+0x24>
   16f3c:	2f 5f       	subi	r18, 0xFF	; 255
   16f3e:	3f 4f       	sbci	r19, 0xFF	; 255
   16f40:	37 96       	adiw	r30, 0x07	; 7
   16f42:	2c 30       	cpi	r18, 0x0C	; 12
   16f44:	31 05       	cpc	r19, r1
   16f46:	a9 f7       	brne	.-22     	; 0x16f32 <find_type+0x8>
   16f48:	8f ef       	ldi	r24, 0xFF	; 255
   16f4a:	9f ef       	ldi	r25, 0xFF	; 255
   16f4c:	08 95       	ret
   16f4e:	c9 01       	movw	r24, r18
   16f50:	08 95       	ret

00016f52 <count_drive_types>:
   16f52:	28 2f       	mov	r18, r24
   16f54:	ef e1       	ldi	r30, 0x1F	; 31
   16f56:	ff e1       	ldi	r31, 0x1F	; 31
   16f58:	80 e0       	ldi	r24, 0x00	; 0
   16f5a:	90 e0       	ldi	r25, 0x00	; 0
   16f5c:	30 81       	ld	r19, Z
   16f5e:	32 13       	cpse	r19, r18
   16f60:	01 c0       	rjmp	.+2      	; 0x16f64 <count_drive_types+0x12>
   16f62:	01 96       	adiw	r24, 0x01	; 1
   16f64:	37 96       	adiw	r30, 0x07	; 7
   16f66:	3f e1       	ldi	r19, 0x1F	; 31
   16f68:	e3 37       	cpi	r30, 0x73	; 115
   16f6a:	f3 07       	cpc	r31, r19
   16f6c:	b9 f7       	brne	.-18     	; 0x16f5c <count_drive_types+0xa>
   16f6e:	08 95       	ret

00016f70 <type_to_str>:
   16f70:	00 97       	sbiw	r24, 0x00	; 0
   16f72:	59 f0       	breq	.+22     	; 0x16f8a <type_to_str+0x1a>
   16f74:	81 30       	cpi	r24, 0x01	; 1
   16f76:	91 05       	cpc	r25, r1
   16f78:	59 f0       	breq	.+22     	; 0x16f90 <type_to_str+0x20>
   16f7a:	83 30       	cpi	r24, 0x03	; 3
   16f7c:	91 05       	cpc	r25, r1
   16f7e:	59 f0       	breq	.+22     	; 0x16f96 <type_to_str+0x26>
   16f80:	04 97       	sbiw	r24, 0x04	; 4
   16f82:	61 f0       	breq	.+24     	; 0x16f9c <type_to_str+0x2c>
   16f84:	81 eb       	ldi	r24, 0xB1	; 177
   16f86:	93 e1       	ldi	r25, 0x13	; 19
   16f88:	08 95       	ret
   16f8a:	87 e8       	ldi	r24, 0x87	; 135
   16f8c:	93 e1       	ldi	r25, 0x13	; 19
   16f8e:	08 95       	ret
   16f90:	8f e8       	ldi	r24, 0x8F	; 143
   16f92:	93 e1       	ldi	r25, 0x13	; 19
   16f94:	08 95       	ret
   16f96:	87 ea       	ldi	r24, 0xA7	; 167
   16f98:	93 e1       	ldi	r25, 0x13	; 19
   16f9a:	08 95       	ret
   16f9c:	8a e9       	ldi	r24, 0x9A	; 154
   16f9e:	93 e1       	ldi	r25, 0x13	; 19
   16fa0:	08 95       	ret

00016fa2 <find_free>:
   16fa2:	80 e0       	ldi	r24, 0x00	; 0
   16fa4:	90 e0       	ldi	r25, 0x00	; 0
   16fa6:	c1 cf       	rjmp	.-126    	; 0x16f2a <find_type>
   16fa8:	08 95       	ret

00016faa <find_device>:
   16faa:	9b 01       	movw	r18, r22
   16fac:	20 52       	subi	r18, 0x20	; 32
   16fae:	31 09       	sbc	r19, r1
   16fb0:	2f 35       	cpi	r18, 0x5F	; 95
   16fb2:	31 05       	cpc	r19, r1
   16fb4:	f8 f4       	brcc	.+62     	; 0x16ff4 <find_device+0x4a>
   16fb6:	64 17       	cp	r22, r20
   16fb8:	75 07       	cpc	r23, r21
   16fba:	e4 f0       	brlt	.+56     	; 0x16ff4 <find_device+0x4a>
   16fbc:	9a 01       	movw	r18, r20
   16fbe:	22 5e       	subi	r18, 0xE2	; 226
   16fc0:	3f 4f       	sbci	r19, 0xFF	; 255
   16fc2:	26 17       	cp	r18, r22
   16fc4:	37 07       	cpc	r19, r23
   16fc6:	b4 f0       	brlt	.+44     	; 0x16ff4 <find_device+0x4a>
   16fc8:	64 1b       	sub	r22, r20
   16fca:	75 0b       	sbc	r23, r21
   16fcc:	ef e1       	ldi	r30, 0x1F	; 31
   16fce:	ff e1       	ldi	r31, 0x1F	; 31
   16fd0:	20 e0       	ldi	r18, 0x00	; 0
   16fd2:	30 e0       	ldi	r19, 0x00	; 0
   16fd4:	40 81       	ld	r20, Z
   16fd6:	50 e0       	ldi	r21, 0x00	; 0
   16fd8:	48 17       	cp	r20, r24
   16fda:	59 07       	cpc	r21, r25
   16fdc:	29 f4       	brne	.+10     	; 0x16fe8 <find_device+0x3e>
   16fde:	41 81       	ldd	r20, Z+1	; 0x01
   16fe0:	50 e0       	ldi	r21, 0x00	; 0
   16fe2:	64 17       	cp	r22, r20
   16fe4:	75 07       	cpc	r23, r21
   16fe6:	49 f0       	breq	.+18     	; 0x16ffa <find_device+0x50>
   16fe8:	2f 5f       	subi	r18, 0xFF	; 255
   16fea:	3f 4f       	sbci	r19, 0xFF	; 255
   16fec:	37 96       	adiw	r30, 0x07	; 7
   16fee:	2c 30       	cpi	r18, 0x0C	; 12
   16ff0:	31 05       	cpc	r19, r1
   16ff2:	81 f7       	brne	.-32     	; 0x16fd4 <find_device+0x2a>
   16ff4:	8f ef       	ldi	r24, 0xFF	; 255
   16ff6:	9f ef       	ldi	r25, 0xFF	; 255
   16ff8:	08 95       	ret
   16ffa:	c9 01       	movw	r24, r18
   16ffc:	08 95       	ret

00016ffe <set_active_device>:
   16ffe:	1f 93       	push	r17
   17000:	cf 93       	push	r28
   17002:	df 93       	push	r29
   17004:	8f 3f       	cpi	r24, 0xFF	; 255
   17006:	2f ef       	ldi	r18, 0xFF	; 255
   17008:	92 07       	cpc	r25, r18
   1700a:	09 f4       	brne	.+2      	; 0x1700e <set_active_device+0x10>
   1700c:	fa c0       	rjmp	.+500    	; 0x17202 <set_active_device+0x204>
   1700e:	ec 01       	movw	r28, r24
   17010:	0c 97       	sbiw	r24, 0x0c	; 12
   17012:	c0 f0       	brcs	.+48     	; 0x17044 <set_active_device+0x46>
   17014:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17018:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1701c:	9c 01       	movw	r18, r24
   1701e:	21 70       	andi	r18, 0x01	; 1
   17020:	33 27       	eor	r19, r19
   17022:	80 ff       	sbrs	r24, 0
   17024:	f0 c0       	rjmp	.+480    	; 0x17206 <set_active_device+0x208>
   17026:	df 93       	push	r29
   17028:	cf 93       	push	r28
   1702a:	8e e6       	ldi	r24, 0x6E	; 110
   1702c:	92 e3       	ldi	r25, 0x32	; 50
   1702e:	1f 92       	push	r1
   17030:	9f 93       	push	r25
   17032:	8f 93       	push	r24
   17034:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17038:	0f 90       	pop	r0
   1703a:	0f 90       	pop	r0
   1703c:	0f 90       	pop	r0
   1703e:	0f 90       	pop	r0
   17040:	0f 90       	pop	r0
   17042:	df c0       	rjmp	.+446    	; 0x17202 <set_active_device+0x204>
   17044:	87 e0       	ldi	r24, 0x07	; 7
   17046:	8c 9f       	mul	r24, r28
   17048:	f0 01       	movw	r30, r0
   1704a:	8d 9f       	mul	r24, r29
   1704c:	f0 0d       	add	r31, r0
   1704e:	11 24       	eor	r1, r1
   17050:	e1 5e       	subi	r30, 0xE1	; 225
   17052:	f0 4e       	sbci	r31, 0xE0	; 224
   17054:	81 81       	ldd	r24, Z+1	; 0x01
   17056:	8f 31       	cpi	r24, 0x1F	; 31
   17058:	e8 f0       	brcs	.+58     	; 0x17094 <set_active_device+0x96>
   1705a:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1705e:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   17062:	9a 01       	movw	r18, r20
   17064:	21 70       	andi	r18, 0x01	; 1
   17066:	33 27       	eor	r19, r19
   17068:	40 ff       	sbrs	r20, 0
   1706a:	cd c0       	rjmp	.+410    	; 0x17206 <set_active_device+0x208>
   1706c:	1f 92       	push	r1
   1706e:	8f 93       	push	r24
   17070:	df 93       	push	r29
   17072:	cf 93       	push	r28
   17074:	85 e3       	ldi	r24, 0x35	; 53
   17076:	92 e3       	ldi	r25, 0x32	; 50
   17078:	1f 92       	push	r1
   1707a:	9f 93       	push	r25
   1707c:	8f 93       	push	r24
   1707e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17082:	8d b7       	in	r24, 0x3d	; 61
   17084:	9e b7       	in	r25, 0x3e	; 62
   17086:	07 96       	adiw	r24, 0x07	; 7
   17088:	0f b6       	in	r0, 0x3f	; 63
   1708a:	f8 94       	cli
   1708c:	9e bf       	out	0x3e, r25	; 62
   1708e:	0f be       	out	0x3f, r0	; 63
   17090:	8d bf       	out	0x3d, r24	; 61
   17092:	b7 c0       	rjmp	.+366    	; 0x17202 <set_active_device+0x204>
   17094:	10 81       	ld	r17, Z
   17096:	81 2f       	mov	r24, r17
   17098:	90 e0       	ldi	r25, 0x00	; 0
   1709a:	23 81       	ldd	r18, Z+3	; 0x03
   1709c:	34 81       	ldd	r19, Z+4	; 0x04
   1709e:	21 15       	cp	r18, r1
   170a0:	31 05       	cpc	r19, r1
   170a2:	01 f5       	brne	.+64     	; 0x170e4 <set_active_device+0xe6>
   170a4:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   170a8:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   170ac:	9a 01       	movw	r18, r20
   170ae:	21 70       	andi	r18, 0x01	; 1
   170b0:	33 27       	eor	r19, r19
   170b2:	40 ff       	sbrs	r20, 0
   170b4:	a8 c0       	rjmp	.+336    	; 0x17206 <set_active_device+0x208>
   170b6:	5c df       	rcall	.-328    	; 0x16f70 <type_to_str>
   170b8:	9f 93       	push	r25
   170ba:	8f 93       	push	r24
   170bc:	1f 92       	push	r1
   170be:	1f 93       	push	r17
   170c0:	df 93       	push	r29
   170c2:	cf 93       	push	r28
   170c4:	80 e0       	ldi	r24, 0x00	; 0
   170c6:	92 e3       	ldi	r25, 0x32	; 50
   170c8:	1f 92       	push	r1
   170ca:	9f 93       	push	r25
   170cc:	8f 93       	push	r24
   170ce:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   170d2:	8d b7       	in	r24, 0x3d	; 61
   170d4:	9e b7       	in	r25, 0x3e	; 62
   170d6:	09 96       	adiw	r24, 0x09	; 9
   170d8:	0f b6       	in	r0, 0x3f	; 63
   170da:	f8 94       	cli
   170dc:	9e bf       	out	0x3e, r25	; 62
   170de:	0f be       	out	0x3f, r0	; 63
   170e0:	8d bf       	out	0x3d, r24	; 61
   170e2:	8f c0       	rjmp	.+286    	; 0x17202 <set_active_device+0x204>
   170e4:	00 97       	sbiw	r24, 0x00	; 0
   170e6:	11 f5       	brne	.+68     	; 0x1712c <set_active_device+0x12e>
   170e8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   170ec:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   170f0:	9c 01       	movw	r18, r24
   170f2:	21 70       	andi	r18, 0x01	; 1
   170f4:	33 27       	eor	r19, r19
   170f6:	80 ff       	sbrs	r24, 0
   170f8:	86 c0       	rjmp	.+268    	; 0x17206 <set_active_device+0x208>
   170fa:	80 e0       	ldi	r24, 0x00	; 0
   170fc:	90 e0       	ldi	r25, 0x00	; 0
   170fe:	38 df       	rcall	.-400    	; 0x16f70 <type_to_str>
   17100:	9f 93       	push	r25
   17102:	8f 93       	push	r24
   17104:	1f 92       	push	r1
   17106:	1f 92       	push	r1
   17108:	df 93       	push	r29
   1710a:	cf 93       	push	r28
   1710c:	8b ec       	ldi	r24, 0xCB	; 203
   1710e:	91 e3       	ldi	r25, 0x31	; 49
   17110:	1f 92       	push	r1
   17112:	9f 93       	push	r25
   17114:	8f 93       	push	r24
   17116:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1711a:	8d b7       	in	r24, 0x3d	; 61
   1711c:	9e b7       	in	r25, 0x3e	; 62
   1711e:	09 96       	adiw	r24, 0x09	; 9
   17120:	0f b6       	in	r0, 0x3f	; 63
   17122:	f8 94       	cli
   17124:	9e bf       	out	0x3e, r25	; 62
   17126:	0f be       	out	0x3f, r0	; 63
   17128:	8d bf       	out	0x3d, r24	; 61
   1712a:	6b c0       	rjmp	.+214    	; 0x17202 <set_active_device+0x204>
   1712c:	84 30       	cpi	r24, 0x04	; 4
   1712e:	91 05       	cpc	r25, r1
   17130:	29 f4       	brne	.+10     	; 0x1713c <set_active_device+0x13e>
   17132:	30 93 cf 19 	sts	0x19CF, r19	; 0x8019cf <PRINTERp+0x1>
   17136:	20 93 ce 19 	sts	0x19CE, r18	; 0x8019ce <PRINTERp>
   1713a:	41 c0       	rjmp	.+130    	; 0x171be <set_active_device+0x1c0>
   1713c:	41 2f       	mov	r20, r17
   1713e:	4d 7f       	andi	r20, 0xFD	; 253
   17140:	41 30       	cpi	r20, 0x01	; 1
   17142:	09 f0       	breq	.+2      	; 0x17146 <set_active_device+0x148>
   17144:	3f c0       	rjmp	.+126    	; 0x171c4 <set_active_device+0x1c6>
   17146:	45 81       	ldd	r20, Z+5	; 0x05
   17148:	56 81       	ldd	r21, Z+6	; 0x06
   1714a:	41 15       	cp	r20, r1
   1714c:	51 05       	cpc	r21, r1
   1714e:	01 f5       	brne	.+64     	; 0x17190 <set_active_device+0x192>
   17150:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   17154:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   17158:	9a 01       	movw	r18, r20
   1715a:	21 70       	andi	r18, 0x01	; 1
   1715c:	33 27       	eor	r19, r19
   1715e:	40 ff       	sbrs	r20, 0
   17160:	52 c0       	rjmp	.+164    	; 0x17206 <set_active_device+0x208>
   17162:	06 df       	rcall	.-500    	; 0x16f70 <type_to_str>
   17164:	9f 93       	push	r25
   17166:	8f 93       	push	r24
   17168:	1f 92       	push	r1
   1716a:	1f 93       	push	r17
   1716c:	df 93       	push	r29
   1716e:	cf 93       	push	r28
   17170:	83 e9       	ldi	r24, 0x93	; 147
   17172:	91 e3       	ldi	r25, 0x31	; 49
   17174:	1f 92       	push	r1
   17176:	9f 93       	push	r25
   17178:	8f 93       	push	r24
   1717a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1717e:	8d b7       	in	r24, 0x3d	; 61
   17180:	9e b7       	in	r25, 0x3e	; 62
   17182:	09 96       	adiw	r24, 0x09	; 9
   17184:	0f b6       	in	r0, 0x3f	; 63
   17186:	f8 94       	cli
   17188:	9e bf       	out	0x3e, r25	; 62
   1718a:	0f be       	out	0x3f, r0	; 63
   1718c:	8d bf       	out	0x3d, r24	; 61
   1718e:	39 c0       	rjmp	.+114    	; 0x17202 <set_active_device+0x204>
   17190:	81 30       	cpi	r24, 0x01	; 1
   17192:	91 05       	cpc	r25, r1
   17194:	49 f4       	brne	.+18     	; 0x171a8 <set_active_device+0x1aa>
   17196:	30 93 c9 19 	sts	0x19C9, r19	; 0x8019c9 <AMIGOp+0x1>
   1719a:	20 93 c8 19 	sts	0x19C8, r18	; 0x8019c8 <AMIGOp>
   1719e:	50 93 c7 19 	sts	0x19C7, r21	; 0x8019c7 <AMIGOs+0x1>
   171a2:	40 93 c6 19 	sts	0x19C6, r20	; 0x8019c6 <AMIGOs>
   171a6:	0b c0       	rjmp	.+22     	; 0x171be <set_active_device+0x1c0>
   171a8:	83 30       	cpi	r24, 0x03	; 3
   171aa:	91 05       	cpc	r25, r1
   171ac:	59 f4       	brne	.+22     	; 0x171c4 <set_active_device+0x1c6>
   171ae:	30 93 cd 19 	sts	0x19CD, r19	; 0x8019cd <SS80p+0x1>
   171b2:	20 93 cc 19 	sts	0x19CC, r18	; 0x8019cc <SS80p>
   171b6:	50 93 cb 19 	sts	0x19CB, r21	; 0x8019cb <SS80s+0x1>
   171ba:	40 93 ca 19 	sts	0x19CA, r20	; 0x8019ca <SS80s>
   171be:	21 e0       	ldi	r18, 0x01	; 1
   171c0:	30 e0       	ldi	r19, 0x00	; 0
   171c2:	21 c0       	rjmp	.+66     	; 0x17206 <set_active_device+0x208>
   171c4:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   171c8:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   171cc:	9a 01       	movw	r18, r20
   171ce:	21 70       	andi	r18, 0x01	; 1
   171d0:	33 27       	eor	r19, r19
   171d2:	40 ff       	sbrs	r20, 0
   171d4:	18 c0       	rjmp	.+48     	; 0x17206 <set_active_device+0x208>
   171d6:	cc de       	rcall	.-616    	; 0x16f70 <type_to_str>
   171d8:	9f 93       	push	r25
   171da:	8f 93       	push	r24
   171dc:	1f 92       	push	r1
   171de:	1f 93       	push	r17
   171e0:	df 93       	push	r29
   171e2:	cf 93       	push	r28
   171e4:	88 e6       	ldi	r24, 0x68	; 104
   171e6:	91 e3       	ldi	r25, 0x31	; 49
   171e8:	1f 92       	push	r1
   171ea:	9f 93       	push	r25
   171ec:	8f 93       	push	r24
   171ee:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   171f2:	8d b7       	in	r24, 0x3d	; 61
   171f4:	9e b7       	in	r25, 0x3e	; 62
   171f6:	09 96       	adiw	r24, 0x09	; 9
   171f8:	0f b6       	in	r0, 0x3f	; 63
   171fa:	f8 94       	cli
   171fc:	9e bf       	out	0x3e, r25	; 62
   171fe:	0f be       	out	0x3f, r0	; 63
   17200:	8d bf       	out	0x3d, r24	; 61
   17202:	20 e0       	ldi	r18, 0x00	; 0
   17204:	30 e0       	ldi	r19, 0x00	; 0
   17206:	c9 01       	movw	r24, r18
   17208:	df 91       	pop	r29
   1720a:	cf 91       	pop	r28
   1720c:	1f 91       	pop	r17
   1720e:	08 95       	ret

00017210 <SS80_Set_Defaults>:
   17210:	0f 93       	push	r16
   17212:	1f 93       	push	r17
   17214:	cf 93       	push	r28
   17216:	df 93       	push	r29
   17218:	ec 01       	movw	r28, r24
   1721a:	82 e0       	ldi	r24, 0x02	; 2
   1721c:	90 e0       	ldi	r25, 0x00	; 0
   1721e:	85 de       	rcall	.-758    	; 0x16f2a <find_type>
   17220:	97 fd       	sbrc	r25, 7
   17222:	88 c0       	rjmp	.+272    	; 0x17334 <SS80_Set_Defaults+0x124>
   17224:	27 e0       	ldi	r18, 0x07	; 7
   17226:	2c 9f       	mul	r18, r28
   17228:	f0 01       	movw	r30, r0
   1722a:	2d 9f       	mul	r18, r29
   1722c:	f0 0d       	add	r31, r0
   1722e:	11 24       	eor	r1, r1
   17230:	e1 5e       	subi	r30, 0xE1	; 225
   17232:	f0 4e       	sbci	r31, 0xE0	; 224
   17234:	c3 81       	ldd	r28, Z+3	; 0x03
   17236:	d4 81       	ldd	r29, Z+4	; 0x04
   17238:	28 9f       	mul	r18, r24
   1723a:	f0 01       	movw	r30, r0
   1723c:	29 9f       	mul	r18, r25
   1723e:	f0 0d       	add	r31, r0
   17240:	11 24       	eor	r1, r1
   17242:	e1 5e       	subi	r30, 0xE1	; 225
   17244:	f0 4e       	sbci	r31, 0xE0	; 224
   17246:	03 81       	ldd	r16, Z+3	; 0x03
   17248:	14 81       	ldd	r17, Z+4	; 0x04
   1724a:	f8 01       	movw	r30, r16
   1724c:	80 81       	ld	r24, Z
   1724e:	88 83       	st	Y, r24
   17250:	81 81       	ldd	r24, Z+1	; 0x01
   17252:	89 83       	std	Y+1, r24	; 0x01
   17254:	b8 01       	movw	r22, r16
   17256:	6e 5f       	subi	r22, 0xFE	; 254
   17258:	7f 4f       	sbci	r23, 0xFF	; 255
   1725a:	40 e2       	ldi	r20, 0x20	; 32
   1725c:	50 e0       	ldi	r21, 0x00	; 0
   1725e:	ce 01       	movw	r24, r28
   17260:	02 96       	adiw	r24, 0x02	; 2
   17262:	0e 94 59 32 	call	0x64b2	; 0x64b2 <strncpy>
   17266:	f8 01       	movw	r30, r16
   17268:	83 a1       	ldd	r24, Z+35	; 0x23
   1726a:	94 a1       	ldd	r25, Z+36	; 0x24
   1726c:	9c a3       	std	Y+36, r25	; 0x24
   1726e:	8b a3       	std	Y+35, r24	; 0x23
   17270:	85 a1       	ldd	r24, Z+37	; 0x25
   17272:	96 a1       	ldd	r25, Z+38	; 0x26
   17274:	9e a3       	std	Y+38, r25	; 0x26
   17276:	8d a3       	std	Y+37, r24	; 0x25
   17278:	87 a1       	ldd	r24, Z+39	; 0x27
   1727a:	90 a5       	ldd	r25, Z+40	; 0x28
   1727c:	98 a7       	std	Y+40, r25	; 0x28
   1727e:	8f a3       	std	Y+39, r24	; 0x27
   17280:	81 a5       	ldd	r24, Z+41	; 0x29
   17282:	89 a7       	std	Y+41, r24	; 0x29
   17284:	82 a5       	ldd	r24, Z+42	; 0x2a
   17286:	8a a7       	std	Y+42, r24	; 0x2a
   17288:	83 a5       	ldd	r24, Z+43	; 0x2b
   1728a:	94 a5       	ldd	r25, Z+44	; 0x2c
   1728c:	a5 a5       	ldd	r26, Z+45	; 0x2d
   1728e:	b6 a5       	ldd	r27, Z+46	; 0x2e
   17290:	8b a7       	std	Y+43, r24	; 0x2b
   17292:	9c a7       	std	Y+44, r25	; 0x2c
   17294:	ad a7       	std	Y+45, r26	; 0x2d
   17296:	be a7       	std	Y+46, r27	; 0x2e
   17298:	87 a5       	ldd	r24, Z+47	; 0x2f
   1729a:	90 a9       	ldd	r25, Z+48	; 0x30
   1729c:	98 ab       	std	Y+48, r25	; 0x30
   1729e:	8f a7       	std	Y+47, r24	; 0x2f
   172a0:	81 a9       	ldd	r24, Z+49	; 0x31
   172a2:	89 ab       	std	Y+49, r24	; 0x31
   172a4:	82 a9       	ldd	r24, Z+50	; 0x32
   172a6:	8a ab       	std	Y+50, r24	; 0x32
   172a8:	83 a9       	ldd	r24, Z+51	; 0x33
   172aa:	94 a9       	ldd	r25, Z+52	; 0x34
   172ac:	9c ab       	std	Y+52, r25	; 0x34
   172ae:	8b ab       	std	Y+51, r24	; 0x33
   172b0:	85 a9       	ldd	r24, Z+53	; 0x35
   172b2:	96 a9       	ldd	r25, Z+54	; 0x36
   172b4:	9e ab       	std	Y+54, r25	; 0x36
   172b6:	8d ab       	std	Y+53, r24	; 0x35
   172b8:	87 a9       	ldd	r24, Z+55	; 0x37
   172ba:	90 ad       	ldd	r25, Z+56	; 0x38
   172bc:	98 af       	std	Y+56, r25	; 0x38
   172be:	8f ab       	std	Y+55, r24	; 0x37
   172c0:	81 ad       	ldd	r24, Z+57	; 0x39
   172c2:	92 ad       	ldd	r25, Z+58	; 0x3a
   172c4:	9a af       	std	Y+58, r25	; 0x3a
   172c6:	89 af       	std	Y+57, r24	; 0x39
   172c8:	83 ad       	ldd	r24, Z+59	; 0x3b
   172ca:	8b af       	std	Y+59, r24	; 0x3b
   172cc:	84 ad       	ldd	r24, Z+60	; 0x3c
   172ce:	8c af       	std	Y+60, r24	; 0x3c
   172d0:	fe 96       	adiw	r30, 0x3e	; 62
   172d2:	80 81       	ld	r24, Z
   172d4:	91 81       	ldd	r25, Z+1	; 0x01
   172d6:	a2 81       	ldd	r26, Z+2	; 0x02
   172d8:	b3 81       	ldd	r27, Z+3	; 0x03
   172da:	fe 01       	movw	r30, r28
   172dc:	fe 96       	adiw	r30, 0x3e	; 62
   172de:	80 83       	st	Z, r24
   172e0:	91 83       	std	Z+1, r25	; 0x01
   172e2:	a2 83       	std	Z+2, r26	; 0x02
   172e4:	b3 83       	std	Z+3, r27	; 0x03
   172e6:	f8 01       	movw	r30, r16
   172e8:	ee 5b       	subi	r30, 0xBE	; 190
   172ea:	ff 4f       	sbci	r31, 0xFF	; 255
   172ec:	80 81       	ld	r24, Z
   172ee:	fe 01       	movw	r30, r28
   172f0:	ee 5b       	subi	r30, 0xBE	; 190
   172f2:	ff 4f       	sbci	r31, 0xFF	; 255
   172f4:	80 83       	st	Z, r24
   172f6:	f8 01       	movw	r30, r16
   172f8:	ed 5b       	subi	r30, 0xBD	; 189
   172fa:	ff 4f       	sbci	r31, 0xFF	; 255
   172fc:	80 81       	ld	r24, Z
   172fe:	91 81       	ldd	r25, Z+1	; 0x01
   17300:	fe 01       	movw	r30, r28
   17302:	ed 5b       	subi	r30, 0xBD	; 189
   17304:	ff 4f       	sbci	r31, 0xFF	; 255
   17306:	91 83       	std	Z+1, r25	; 0x01
   17308:	80 83       	st	Z, r24
   1730a:	f8 01       	movw	r30, r16
   1730c:	eb 5b       	subi	r30, 0xBB	; 187
   1730e:	ff 4f       	sbci	r31, 0xFF	; 255
   17310:	80 81       	ld	r24, Z
   17312:	91 81       	ldd	r25, Z+1	; 0x01
   17314:	a2 81       	ldd	r26, Z+2	; 0x02
   17316:	b3 81       	ldd	r27, Z+3	; 0x03
   17318:	fe 01       	movw	r30, r28
   1731a:	eb 5b       	subi	r30, 0xBB	; 187
   1731c:	ff 4f       	sbci	r31, 0xFF	; 255
   1731e:	80 83       	st	Z, r24
   17320:	91 83       	std	Z+1, r25	; 0x01
   17322:	a2 83       	std	Z+2, r26	; 0x02
   17324:	b3 83       	std	Z+3, r27	; 0x03
   17326:	f8 01       	movw	r30, r16
   17328:	e7 5b       	subi	r30, 0xB7	; 183
   1732a:	ff 4f       	sbci	r31, 0xFF	; 255
   1732c:	80 81       	ld	r24, Z
   1732e:	c7 5b       	subi	r28, 0xB7	; 183
   17330:	df 4f       	sbci	r29, 0xFF	; 255
   17332:	88 83       	st	Y, r24
   17334:	df 91       	pop	r29
   17336:	cf 91       	pop	r28
   17338:	1f 91       	pop	r17
   1733a:	0f 91       	pop	r16
   1733c:	08 95       	ret

0001733e <alloc_device>:
   1733e:	0f 93       	push	r16
   17340:	1f 93       	push	r17
   17342:	cf 93       	push	r28
   17344:	df 93       	push	r29
   17346:	ec 01       	movw	r28, r24
   17348:	2c de       	rcall	.-936    	; 0x16fa2 <find_free>
   1734a:	8c 01       	movw	r16, r24
   1734c:	0f 3f       	cpi	r16, 0xFF	; 255
   1734e:	8f ef       	ldi	r24, 0xFF	; 255
   17350:	18 07       	cpc	r17, r24
   17352:	99 f4       	brne	.+38     	; 0x1737a <alloc_device+0x3c>
   17354:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17358:	80 ff       	sbrs	r24, 0
   1735a:	9e c0       	rjmp	.+316    	; 0x17498 <alloc_device+0x15a>
   1735c:	df 93       	push	r29
   1735e:	cf 93       	push	r28
   17360:	84 e4       	ldi	r24, 0x44	; 68
   17362:	91 e3       	ldi	r25, 0x31	; 49
   17364:	1f 92       	push	r1
   17366:	9f 93       	push	r25
   17368:	8f 93       	push	r24
   1736a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1736e:	0f 90       	pop	r0
   17370:	0f 90       	pop	r0
   17372:	0f 90       	pop	r0
   17374:	0f 90       	pop	r0
   17376:	0f 90       	pop	r0
   17378:	8f c0       	rjmp	.+286    	; 0x17498 <alloc_device+0x15a>
   1737a:	c2 30       	cpi	r28, 0x02	; 2
   1737c:	d1 05       	cpc	r29, r1
   1737e:	c1 f1       	breq	.+112    	; 0x173f0 <alloc_device+0xb2>
   17380:	dc f4       	brge	.+54     	; 0x173b8 <alloc_device+0x7a>
   17382:	c1 30       	cpi	r28, 0x01	; 1
   17384:	d1 05       	cpc	r29, r1
   17386:	09 f0       	breq	.+2      	; 0x1738a <alloc_device+0x4c>
   17388:	6c c0       	rjmp	.+216    	; 0x17462 <alloc_device+0x124>
   1738a:	87 e0       	ldi	r24, 0x07	; 7
   1738c:	80 9f       	mul	r24, r16
   1738e:	e0 01       	movw	r28, r0
   17390:	81 9f       	mul	r24, r17
   17392:	d0 0d       	add	r29, r0
   17394:	11 24       	eor	r1, r1
   17396:	c1 5e       	subi	r28, 0xE1	; 225
   17398:	d0 4e       	sbci	r29, 0xE0	; 224
   1739a:	81 e0       	ldi	r24, 0x01	; 1
   1739c:	88 83       	st	Y, r24
   1739e:	61 e0       	ldi	r22, 0x01	; 1
   173a0:	70 e0       	ldi	r23, 0x00	; 0
   173a2:	84 e3       	ldi	r24, 0x34	; 52
   173a4:	90 e0       	ldi	r25, 0x00	; 0
   173a6:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   173aa:	9c 83       	std	Y+4, r25	; 0x04
   173ac:	8b 83       	std	Y+3, r24	; 0x03
   173ae:	61 e0       	ldi	r22, 0x01	; 1
   173b0:	70 e0       	ldi	r23, 0x00	; 0
   173b2:	88 e1       	ldi	r24, 0x18	; 24
   173b4:	90 e0       	ldi	r25, 0x00	; 0
   173b6:	50 c0       	rjmp	.+160    	; 0x17458 <alloc_device+0x11a>
   173b8:	c3 30       	cpi	r28, 0x03	; 3
   173ba:	d1 05       	cpc	r29, r1
   173bc:	81 f1       	breq	.+96     	; 0x1741e <alloc_device+0xe0>
   173be:	c4 30       	cpi	r28, 0x04	; 4
   173c0:	d1 05       	cpc	r29, r1
   173c2:	09 f0       	breq	.+2      	; 0x173c6 <alloc_device+0x88>
   173c4:	4e c0       	rjmp	.+156    	; 0x17462 <alloc_device+0x124>
   173c6:	87 e0       	ldi	r24, 0x07	; 7
   173c8:	80 9f       	mul	r24, r16
   173ca:	e0 01       	movw	r28, r0
   173cc:	81 9f       	mul	r24, r17
   173ce:	d0 0d       	add	r29, r0
   173d0:	11 24       	eor	r1, r1
   173d2:	c1 5e       	subi	r28, 0xE1	; 225
   173d4:	d0 4e       	sbci	r29, 0xE0	; 224
   173d6:	84 e0       	ldi	r24, 0x04	; 4
   173d8:	88 83       	st	Y, r24
   173da:	61 e0       	ldi	r22, 0x01	; 1
   173dc:	70 e0       	ldi	r23, 0x00	; 0
   173de:	8a e2       	ldi	r24, 0x2A	; 42
   173e0:	90 e0       	ldi	r25, 0x00	; 0
   173e2:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   173e6:	9c 83       	std	Y+4, r25	; 0x04
   173e8:	8b 83       	std	Y+3, r24	; 0x03
   173ea:	1e 82       	std	Y+6, r1	; 0x06
   173ec:	1d 82       	std	Y+5, r1	; 0x05
   173ee:	54 c0       	rjmp	.+168    	; 0x17498 <alloc_device+0x15a>
   173f0:	87 e0       	ldi	r24, 0x07	; 7
   173f2:	80 9f       	mul	r24, r16
   173f4:	e0 01       	movw	r28, r0
   173f6:	81 9f       	mul	r24, r17
   173f8:	d0 0d       	add	r29, r0
   173fa:	11 24       	eor	r1, r1
   173fc:	c1 5e       	subi	r28, 0xE1	; 225
   173fe:	d0 4e       	sbci	r29, 0xE0	; 224
   17400:	82 e0       	ldi	r24, 0x02	; 2
   17402:	88 83       	st	Y, r24
   17404:	61 e0       	ldi	r22, 0x01	; 1
   17406:	70 e0       	ldi	r23, 0x00	; 0
   17408:	81 e5       	ldi	r24, 0x51	; 81
   1740a:	90 e0       	ldi	r25, 0x00	; 0
   1740c:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   17410:	9c 83       	std	Y+4, r25	; 0x04
   17412:	8b 83       	std	Y+3, r24	; 0x03
   17414:	61 e0       	ldi	r22, 0x01	; 1
   17416:	70 e0       	ldi	r23, 0x00	; 0
   17418:	86 e1       	ldi	r24, 0x16	; 22
   1741a:	90 e0       	ldi	r25, 0x00	; 0
   1741c:	1d c0       	rjmp	.+58     	; 0x17458 <alloc_device+0x11a>
   1741e:	87 e0       	ldi	r24, 0x07	; 7
   17420:	80 9f       	mul	r24, r16
   17422:	e0 01       	movw	r28, r0
   17424:	81 9f       	mul	r24, r17
   17426:	d0 0d       	add	r29, r0
   17428:	11 24       	eor	r1, r1
   1742a:	c1 5e       	subi	r28, 0xE1	; 225
   1742c:	d0 4e       	sbci	r29, 0xE0	; 224
   1742e:	83 e0       	ldi	r24, 0x03	; 3
   17430:	88 83       	st	Y, r24
   17432:	61 e0       	ldi	r22, 0x01	; 1
   17434:	70 e0       	ldi	r23, 0x00	; 0
   17436:	81 e5       	ldi	r24, 0x51	; 81
   17438:	90 e0       	ldi	r25, 0x00	; 0
   1743a:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   1743e:	9c 83       	std	Y+4, r25	; 0x04
   17440:	8b 83       	std	Y+3, r24	; 0x03
   17442:	61 e0       	ldi	r22, 0x01	; 1
   17444:	70 e0       	ldi	r23, 0x00	; 0
   17446:	86 e1       	ldi	r24, 0x16	; 22
   17448:	90 e0       	ldi	r25, 0x00	; 0
   1744a:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   1744e:	9e 83       	std	Y+6, r25	; 0x06
   17450:	8d 83       	std	Y+5, r24	; 0x05
   17452:	c8 01       	movw	r24, r16
   17454:	dd de       	rcall	.-582    	; 0x17210 <SS80_Set_Defaults>
   17456:	20 c0       	rjmp	.+64     	; 0x17498 <alloc_device+0x15a>
   17458:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   1745c:	9e 83       	std	Y+6, r25	; 0x06
   1745e:	8d 83       	std	Y+5, r24	; 0x05
   17460:	1b c0       	rjmp	.+54     	; 0x17498 <alloc_device+0x15a>
   17462:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17466:	80 ff       	sbrs	r24, 0
   17468:	15 c0       	rjmp	.+42     	; 0x17494 <alloc_device+0x156>
   1746a:	ce 01       	movw	r24, r28
   1746c:	81 dd       	rcall	.-1278   	; 0x16f70 <type_to_str>
   1746e:	9f 93       	push	r25
   17470:	8f 93       	push	r24
   17472:	df 93       	push	r29
   17474:	cf 93       	push	r28
   17476:	82 e2       	ldi	r24, 0x22	; 34
   17478:	91 e3       	ldi	r25, 0x31	; 49
   1747a:	1f 92       	push	r1
   1747c:	9f 93       	push	r25
   1747e:	8f 93       	push	r24
   17480:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17484:	8d b7       	in	r24, 0x3d	; 61
   17486:	9e b7       	in	r25, 0x3e	; 62
   17488:	07 96       	adiw	r24, 0x07	; 7
   1748a:	0f b6       	in	r0, 0x3f	; 63
   1748c:	f8 94       	cli
   1748e:	9e bf       	out	0x3e, r25	; 62
   17490:	0f be       	out	0x3f, r0	; 63
   17492:	8d bf       	out	0x3d, r24	; 61
   17494:	0f ef       	ldi	r16, 0xFF	; 255
   17496:	1f ef       	ldi	r17, 0xFF	; 255
   17498:	c8 01       	movw	r24, r16
   1749a:	df 91       	pop	r29
   1749c:	cf 91       	pop	r28
   1749e:	1f 91       	pop	r17
   174a0:	0f 91       	pop	r16
   174a2:	08 95       	ret

000174a4 <init_Devices>:
   174a4:	10 92 db 19 	sts	0x19DB, r1	; 0x8019db <stack_ind+0x1>
   174a8:	10 92 da 19 	sts	0x19DA, r1	; 0x8019da <stack_ind>
   174ac:	ef e1       	ldi	r30, 0x1F	; 31
   174ae:	ff e1       	ldi	r31, 0x1F	; 31
   174b0:	8f ef       	ldi	r24, 0xFF	; 255
   174b2:	10 82       	st	Z, r1
   174b4:	11 82       	std	Z+1, r1	; 0x01
   174b6:	82 83       	std	Z+2, r24	; 0x02
   174b8:	14 82       	std	Z+4, r1	; 0x04
   174ba:	13 82       	std	Z+3, r1	; 0x03
   174bc:	16 82       	std	Z+6, r1	; 0x06
   174be:	15 82       	std	Z+5, r1	; 0x05
   174c0:	37 96       	adiw	r30, 0x07	; 7
   174c2:	9f e1       	ldi	r25, 0x1F	; 31
   174c4:	e3 37       	cpi	r30, 0x73	; 115
   174c6:	f9 07       	cpc	r31, r25
   174c8:	a1 f7       	brne	.-24     	; 0x174b2 <init_Devices+0xe>
   174ca:	08 95       	ret

000174cc <push_state>:
   174cc:	20 91 da 19 	lds	r18, 0x19DA	; 0x8019da <stack_ind>
   174d0:	30 91 db 19 	lds	r19, 0x19DB	; 0x8019db <stack_ind+0x1>
   174d4:	25 30       	cpi	r18, 0x05	; 5
   174d6:	31 05       	cpc	r19, r1
   174d8:	7c f4       	brge	.+30     	; 0x174f8 <push_state+0x2c>
   174da:	a9 01       	movw	r20, r18
   174dc:	4f 5f       	subi	r20, 0xFF	; 255
   174de:	5f 4f       	sbci	r21, 0xFF	; 255
   174e0:	50 93 db 19 	sts	0x19DB, r21	; 0x8019db <stack_ind+0x1>
   174e4:	40 93 da 19 	sts	0x19DA, r20	; 0x8019da <stack_ind>
   174e8:	22 0f       	add	r18, r18
   174ea:	33 1f       	adc	r19, r19
   174ec:	f9 01       	movw	r30, r18
   174ee:	e0 53       	subi	r30, 0x30	; 48
   174f0:	f6 4e       	sbci	r31, 0xE6	; 230
   174f2:	80 83       	st	Z, r24
   174f4:	91 83       	std	Z+1, r25	; 0x01
   174f6:	08 95       	ret
   174f8:	80 e0       	ldi	r24, 0x00	; 0
   174fa:	90 e0       	ldi	r25, 0x00	; 0
   174fc:	08 95       	ret

000174fe <pop_state>:
   174fe:	80 91 da 19 	lds	r24, 0x19DA	; 0x8019da <stack_ind>
   17502:	90 91 db 19 	lds	r25, 0x19DB	; 0x8019db <stack_ind+0x1>
   17506:	18 16       	cp	r1, r24
   17508:	19 06       	cpc	r1, r25
   1750a:	6c f4       	brge	.+26     	; 0x17526 <pop_state+0x28>
   1750c:	01 97       	sbiw	r24, 0x01	; 1
   1750e:	90 93 db 19 	sts	0x19DB, r25	; 0x8019db <stack_ind+0x1>
   17512:	80 93 da 19 	sts	0x19DA, r24	; 0x8019da <stack_ind>
   17516:	88 0f       	add	r24, r24
   17518:	99 1f       	adc	r25, r25
   1751a:	fc 01       	movw	r30, r24
   1751c:	e0 53       	subi	r30, 0x30	; 48
   1751e:	f6 4e       	sbci	r31, 0xE6	; 230
   17520:	80 81       	ld	r24, Z
   17522:	91 81       	ldd	r25, Z+1	; 0x01
   17524:	08 95       	ret
   17526:	80 e0       	ldi	r24, 0x00	; 0
   17528:	90 e0       	ldi	r25, 0x00	; 0
   1752a:	08 95       	ret

0001752c <assign_value>:
   1752c:	a0 e0       	ldi	r26, 0x00	; 0
   1752e:	b0 e0       	ldi	r27, 0x00	; 0
   17530:	ec e9       	ldi	r30, 0x9C	; 156
   17532:	fa eb       	ldi	r31, 0xBA	; 186
   17534:	0c 94 07 ed 	jmp	0x1da0e	; 0x1da0e <__prologue_saves__+0x4>
   17538:	2a 01       	movw	r4, r20
   1753a:	3b 01       	movw	r6, r22
   1753c:	48 01       	movw	r8, r16
   1753e:	59 01       	movw	r10, r18
   17540:	87 01       	movw	r16, r14
   17542:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   17546:	ec 01       	movw	r28, r24
   17548:	88 81       	ld	r24, Y
   1754a:	8d 33       	cpi	r24, 0x3D	; 61
   1754c:	29 f4       	brne	.+10     	; 0x17558 <assign_value+0x2c>
   1754e:	ce 01       	movw	r24, r28
   17550:	01 96       	adiw	r24, 0x01	; 1
   17552:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   17556:	ec 01       	movw	r28, r24
   17558:	88 81       	ld	r24, Y
   1755a:	81 11       	cpse	r24, r1
   1755c:	17 c0       	rjmp	.+46     	; 0x1758c <assign_value+0x60>
   1755e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17562:	80 ff       	sbrs	r24, 0
   17564:	7a c0       	rjmp	.+244    	; 0x1765a <assign_value+0x12e>
   17566:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   1756a:	8f 93       	push	r24
   1756c:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17570:	8f 93       	push	r24
   17572:	8a e0       	ldi	r24, 0x0A	; 10
   17574:	91 e3       	ldi	r25, 0x31	; 49
   17576:	1f 92       	push	r1
   17578:	9f 93       	push	r25
   1757a:	8f 93       	push	r24
   1757c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17580:	0f 90       	pop	r0
   17582:	0f 90       	pop	r0
   17584:	0f 90       	pop	r0
   17586:	0f 90       	pop	r0
   17588:	0f 90       	pop	r0
   1758a:	67 c0       	rjmp	.+206    	; 0x1765a <assign_value+0x12e>
   1758c:	ce 01       	movw	r24, r28
   1758e:	0e 94 22 34 	call	0x6844	; 0x6844 <get_value>
   17592:	6b 01       	movw	r12, r22
   17594:	7c 01       	movw	r14, r24
   17596:	f8 01       	movw	r30, r16
   17598:	60 83       	st	Z, r22
   1759a:	71 83       	std	Z+1, r23	; 0x01
   1759c:	82 83       	std	Z+2, r24	; 0x02
   1759e:	93 83       	std	Z+3, r25	; 0x03
   175a0:	41 14       	cp	r4, r1
   175a2:	51 04       	cpc	r5, r1
   175a4:	61 04       	cpc	r6, r1
   175a6:	71 04       	cpc	r7, r1
   175a8:	39 f1       	breq	.+78     	; 0x175f8 <assign_value+0xcc>
   175aa:	c4 14       	cp	r12, r4
   175ac:	d5 04       	cpc	r13, r5
   175ae:	e6 04       	cpc	r14, r6
   175b0:	f7 04       	cpc	r15, r7
   175b2:	10 f5       	brcc	.+68     	; 0x175f8 <assign_value+0xcc>
   175b4:	5f 92       	push	r5
   175b6:	4f 92       	push	r4
   175b8:	df 93       	push	r29
   175ba:	cf 93       	push	r28
   175bc:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   175c0:	8f 93       	push	r24
   175c2:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   175c6:	8f 93       	push	r24
   175c8:	8b ee       	ldi	r24, 0xEB	; 235
   175ca:	90 e3       	ldi	r25, 0x30	; 48
   175cc:	1f 92       	push	r1
   175ce:	9f 93       	push	r25
   175d0:	8f 93       	push	r24
   175d2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   175d6:	ed b7       	in	r30, 0x3d	; 61
   175d8:	fe b7       	in	r31, 0x3e	; 62
   175da:	39 96       	adiw	r30, 0x09	; 9
   175dc:	0f b6       	in	r0, 0x3f	; 63
   175de:	f8 94       	cli
   175e0:	fe bf       	out	0x3e, r31	; 62
   175e2:	0f be       	out	0x3f, r0	; 63
   175e4:	ed bf       	out	0x3d, r30	; 61
   175e6:	ff ef       	ldi	r31, 0xFF	; 255
   175e8:	8f 16       	cp	r8, r31
   175ea:	9f 06       	cpc	r9, r31
   175ec:	af 06       	cpc	r10, r31
   175ee:	bf 06       	cpc	r11, r31
   175f0:	a1 f1       	breq	.+104    	; 0x1765a <assign_value+0x12e>
   175f2:	61 e0       	ldi	r22, 0x01	; 1
   175f4:	70 e0       	ldi	r23, 0x00	; 0
   175f6:	08 c0       	rjmp	.+16     	; 0x17608 <assign_value+0xdc>
   175f8:	ff ef       	ldi	r31, 0xFF	; 255
   175fa:	8f 16       	cp	r8, r31
   175fc:	9f 06       	cpc	r9, r31
   175fe:	af 06       	cpc	r10, r31
   17600:	bf 06       	cpc	r11, r31
   17602:	31 f1       	breq	.+76     	; 0x17650 <assign_value+0x124>
   17604:	60 e0       	ldi	r22, 0x00	; 0
   17606:	70 e0       	ldi	r23, 0x00	; 0
   17608:	8c 14       	cp	r8, r12
   1760a:	9d 04       	cpc	r9, r13
   1760c:	ae 04       	cpc	r10, r14
   1760e:	bf 04       	cpc	r11, r15
   17610:	d0 f4       	brcc	.+52     	; 0x17646 <assign_value+0x11a>
   17612:	9f 92       	push	r9
   17614:	8f 92       	push	r8
   17616:	df 93       	push	r29
   17618:	cf 93       	push	r28
   1761a:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   1761e:	8f 93       	push	r24
   17620:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17624:	8f 93       	push	r24
   17626:	8c ec       	ldi	r24, 0xCC	; 204
   17628:	90 e3       	ldi	r25, 0x30	; 48
   1762a:	1f 92       	push	r1
   1762c:	9f 93       	push	r25
   1762e:	8f 93       	push	r24
   17630:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17634:	ed b7       	in	r30, 0x3d	; 61
   17636:	fe b7       	in	r31, 0x3e	; 62
   17638:	39 96       	adiw	r30, 0x09	; 9
   1763a:	0f b6       	in	r0, 0x3f	; 63
   1763c:	f8 94       	cli
   1763e:	fe bf       	out	0x3e, r31	; 62
   17640:	0f be       	out	0x3f, r0	; 63
   17642:	ed bf       	out	0x3d, r30	; 61
   17644:	0a c0       	rjmp	.+20     	; 0x1765a <assign_value+0x12e>
   17646:	f1 e0       	ldi	r31, 0x01	; 1
   17648:	6f 27       	eor	r22, r31
   1764a:	80 e0       	ldi	r24, 0x00	; 0
   1764c:	90 e0       	ldi	r25, 0x00	; 0
   1764e:	08 c0       	rjmp	.+16     	; 0x17660 <assign_value+0x134>
   17650:	61 e0       	ldi	r22, 0x01	; 1
   17652:	70 e0       	ldi	r23, 0x00	; 0
   17654:	80 e0       	ldi	r24, 0x00	; 0
   17656:	90 e0       	ldi	r25, 0x00	; 0
   17658:	03 c0       	rjmp	.+6      	; 0x17660 <assign_value+0x134>
   1765a:	60 e0       	ldi	r22, 0x00	; 0
   1765c:	70 e0       	ldi	r23, 0x00	; 0
   1765e:	cb 01       	movw	r24, r22
   17660:	cd b7       	in	r28, 0x3d	; 61
   17662:	de b7       	in	r29, 0x3e	; 62
   17664:	e0 e1       	ldi	r30, 0x10	; 16
   17666:	0c 94 23 ed 	jmp	0x1da46	; 0x1da46 <__epilogue_restores__+0x4>

0001766a <set_Config_Defaults>:
   1766a:	08 95       	ret

0001766c <Read_Config>:
   1766c:	aa e9       	ldi	r26, 0x9A	; 154
   1766e:	b0 e0       	ldi	r27, 0x00	; 0
   17670:	ec e3       	ldi	r30, 0x3C	; 60
   17672:	fb eb       	ldi	r31, 0xBB	; 187
   17674:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   17678:	d8 2e       	mov	r13, r24
   1767a:	c9 2e       	mov	r12, r25
   1767c:	13 df       	rcall	.-474    	; 0x174a4 <init_Devices>
   1767e:	10 92 c5 19 	sts	0x19C5, r1	; 0x8019c5 <lines+0x1>
   17682:	10 92 c4 19 	sts	0x19C4, r1	; 0x8019c4 <lines>
   17686:	cf 92       	push	r12
   17688:	df 92       	push	r13
   1768a:	8f eb       	ldi	r24, 0xBF	; 191
   1768c:	90 e3       	ldi	r25, 0x30	; 48
   1768e:	1f 92       	push	r1
   17690:	9f 93       	push	r25
   17692:	8f 93       	push	r24
   17694:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17698:	60 e7       	ldi	r22, 0x70	; 112
   1769a:	78 e0       	ldi	r23, 0x08	; 8
   1769c:	8d 2d       	mov	r24, r13
   1769e:	9c 2d       	mov	r25, r12
   176a0:	0e 94 11 84 	call	0x10822	; 0x10822 <fopen>
   176a4:	c9 57       	subi	r28, 0x79	; 121
   176a6:	df 4f       	sbci	r29, 0xFF	; 255
   176a8:	99 83       	std	Y+1, r25	; 0x01
   176aa:	88 83       	st	Y, r24
   176ac:	c7 58       	subi	r28, 0x87	; 135
   176ae:	d0 40       	sbci	r29, 0x00	; 0
   176b0:	0f 90       	pop	r0
   176b2:	0f 90       	pop	r0
   176b4:	0f 90       	pop	r0
   176b6:	0f 90       	pop	r0
   176b8:	0f 90       	pop	r0
   176ba:	89 2b       	or	r24, r25
   176bc:	09 f4       	brne	.+2      	; 0x176c0 <Read_Config+0x54>
   176be:	53 c0       	rjmp	.+166    	; 0x17766 <Read_Config+0xfa>
   176c0:	21 2c       	mov	r2, r1
   176c2:	31 2c       	mov	r3, r1
   176c4:	41 2c       	mov	r4, r1
   176c6:	51 2c       	mov	r5, r1
   176c8:	cb 57       	subi	r28, 0x7B	; 123
   176ca:	df 4f       	sbci	r29, 0xFF	; 255
   176cc:	19 82       	std	Y+1, r1	; 0x01
   176ce:	18 82       	st	Y, r1
   176d0:	c5 58       	subi	r28, 0x85	; 133
   176d2:	d0 40       	sbci	r29, 0x00	; 0
   176d4:	61 2c       	mov	r6, r1
   176d6:	71 2c       	mov	r7, r1
   176d8:	a1 2c       	mov	r10, r1
   176da:	b1 2c       	mov	r11, r1
   176dc:	81 2c       	mov	r8, r1
   176de:	91 2c       	mov	r9, r1
   176e0:	88 ef       	ldi	r24, 0xF8	; 248
   176e2:	9d e2       	ldi	r25, 0x2D	; 45
   176e4:	9c 01       	movw	r18, r24
   176e6:	40 e0       	ldi	r20, 0x00	; 0
   176e8:	c7 57       	subi	r28, 0x77	; 119
   176ea:	df 4f       	sbci	r29, 0xFF	; 255
   176ec:	28 83       	st	Y, r18
   176ee:	39 83       	std	Y+1, r19	; 0x01
   176f0:	4a 83       	std	Y+2, r20	; 0x02
   176f2:	c9 58       	subi	r28, 0x89	; 137
   176f4:	d0 40       	sbci	r29, 0x00	; 0
   176f6:	8a e1       	ldi	r24, 0x1A	; 26
   176f8:	9e e2       	ldi	r25, 0x2E	; 46
   176fa:	9c 01       	movw	r18, r24
   176fc:	40 e0       	ldi	r20, 0x00	; 0
   176fe:	c4 57       	subi	r28, 0x74	; 116
   17700:	df 4f       	sbci	r29, 0xFF	; 255
   17702:	28 83       	st	Y, r18
   17704:	39 83       	std	Y+1, r19	; 0x01
   17706:	4a 83       	std	Y+2, r20	; 0x02
   17708:	cc 58       	subi	r28, 0x8C	; 140
   1770a:	d0 40       	sbci	r29, 0x00	; 0
   1770c:	8a e4       	ldi	r24, 0x4A	; 74
   1770e:	9e e2       	ldi	r25, 0x2E	; 46
   17710:	9c 01       	movw	r18, r24
   17712:	40 e0       	ldi	r20, 0x00	; 0
   17714:	c1 57       	subi	r28, 0x71	; 113
   17716:	df 4f       	sbci	r29, 0xFF	; 255
   17718:	28 83       	st	Y, r18
   1771a:	39 83       	std	Y+1, r19	; 0x01
   1771c:	4a 83       	std	Y+2, r20	; 0x02
   1771e:	cf 58       	subi	r28, 0x8F	; 143
   17720:	d0 40       	sbci	r29, 0x00	; 0
   17722:	89 e7       	ldi	r24, 0x79	; 121
   17724:	9e e2       	ldi	r25, 0x2E	; 46
   17726:	9c 01       	movw	r18, r24
   17728:	40 e0       	ldi	r20, 0x00	; 0
   1772a:	ce 56       	subi	r28, 0x6E	; 110
   1772c:	df 4f       	sbci	r29, 0xFF	; 255
   1772e:	28 83       	st	Y, r18
   17730:	39 83       	std	Y+1, r19	; 0x01
   17732:	4a 83       	std	Y+2, r20	; 0x02
   17734:	c2 59       	subi	r28, 0x92	; 146
   17736:	d0 40       	sbci	r29, 0x00	; 0
   17738:	89 ea       	ldi	r24, 0xA9	; 169
   1773a:	9e e2       	ldi	r25, 0x2E	; 46
   1773c:	9c 01       	movw	r18, r24
   1773e:	40 e0       	ldi	r20, 0x00	; 0
   17740:	cb 56       	subi	r28, 0x6B	; 107
   17742:	df 4f       	sbci	r29, 0xFF	; 255
   17744:	28 83       	st	Y, r18
   17746:	39 83       	std	Y+1, r19	; 0x01
   17748:	4a 83       	std	Y+2, r20	; 0x02
   1774a:	c5 59       	subi	r28, 0x95	; 149
   1774c:	d0 40       	sbci	r29, 0x00	; 0
   1774e:	82 ec       	ldi	r24, 0xC2	; 194
   17750:	9e e2       	ldi	r25, 0x2E	; 46
   17752:	9c 01       	movw	r18, r24
   17754:	40 e0       	ldi	r20, 0x00	; 0
   17756:	c8 56       	subi	r28, 0x68	; 104
   17758:	df 4f       	sbci	r29, 0xFF	; 255
   1775a:	28 83       	st	Y, r18
   1775c:	39 83       	std	Y+1, r19	; 0x01
   1775e:	4a 83       	std	Y+2, r20	; 0x02
   17760:	c8 59       	subi	r28, 0x98	; 152
   17762:	d0 40       	sbci	r29, 0x00	; 0
   17764:	2f c0       	rjmp	.+94     	; 0x177c4 <Read_Config+0x158>
   17766:	85 ee       	ldi	r24, 0xE5	; 229
   17768:	93 e1       	ldi	r25, 0x13	; 19
   1776a:	0e 94 e7 7d 	call	0xfbce	; 0xfbce <perror>
   1776e:	cf 92       	push	r12
   17770:	df 92       	push	r13
   17772:	81 ea       	ldi	r24, 0xA1	; 161
   17774:	90 e3       	ldi	r25, 0x30	; 48
   17776:	1f 92       	push	r1
   17778:	9f 93       	push	r25
   1777a:	8f 93       	push	r24
   1777c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17780:	0f 90       	pop	r0
   17782:	0f 90       	pop	r0
   17784:	0f 90       	pop	r0
   17786:	0f 90       	pop	r0
   17788:	0f 90       	pop	r0
   1778a:	81 e0       	ldi	r24, 0x01	; 1
   1778c:	90 e0       	ldi	r25, 0x00	; 0
   1778e:	ee c7       	rjmp	.+4060   	; 0x1876c <Read_Config+0x1100>
   17790:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17794:	90 91 c5 19 	lds	r25, 0x19C5	; 0x8019c5 <lines+0x1>
   17798:	01 96       	adiw	r24, 0x01	; 1
   1779a:	90 93 c5 19 	sts	0x19C5, r25	; 0x8019c5 <lines+0x1>
   1779e:	80 93 c4 19 	sts	0x19C4, r24	; 0x8019c4 <lines>
   177a2:	ce 01       	movw	r24, r28
   177a4:	01 96       	adiw	r24, 0x01	; 1
   177a6:	0e 94 a8 32 	call	0x6550	; 0x6550 <trim_tail>
   177aa:	ce 01       	movw	r24, r28
   177ac:	01 96       	adiw	r24, 0x01	; 1
   177ae:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   177b2:	6c 01       	movw	r12, r24
   177b4:	fc 01       	movw	r30, r24
   177b6:	01 90       	ld	r0, Z+
   177b8:	00 20       	and	r0, r0
   177ba:	e9 f7       	brne	.-6      	; 0x177b6 <Read_Config+0x14a>
   177bc:	31 97       	sbiw	r30, 0x01	; 1
   177be:	8e 17       	cp	r24, r30
   177c0:	9f 07       	cpc	r25, r31
   177c2:	79 f4       	brne	.+30     	; 0x177e2 <Read_Config+0x176>
   177c4:	c9 57       	subi	r28, 0x79	; 121
   177c6:	df 4f       	sbci	r29, 0xFF	; 255
   177c8:	48 81       	ld	r20, Y
   177ca:	59 81       	ldd	r21, Y+1	; 0x01
   177cc:	c7 58       	subi	r28, 0x87	; 135
   177ce:	d0 40       	sbci	r29, 0x00	; 0
   177d0:	6e e7       	ldi	r22, 0x7E	; 126
   177d2:	70 e0       	ldi	r23, 0x00	; 0
   177d4:	ce 01       	movw	r24, r28
   177d6:	01 96       	adiw	r24, 0x01	; 1
   177d8:	0e 94 21 7b 	call	0xf642	; 0xf642 <fgets>
   177dc:	89 2b       	or	r24, r25
   177de:	c1 f6       	brne	.-80     	; 0x17790 <Read_Config+0x124>
   177e0:	78 c7       	rjmp	.+3824   	; 0x186d2 <Read_Config+0x1066>
   177e2:	dc 01       	movw	r26, r24
   177e4:	8c 91       	ld	r24, X
   177e6:	83 32       	cpi	r24, 0x23	; 35
   177e8:	69 f3       	breq	.-38     	; 0x177c4 <Read_Config+0x158>
   177ea:	68 ef       	ldi	r22, 0xF8	; 248
   177ec:	73 e1       	ldi	r23, 0x13	; 19
   177ee:	c6 01       	movw	r24, r12
   177f0:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   177f4:	89 2b       	or	r24, r25
   177f6:	19 f0       	breq	.+6      	; 0x177fe <Read_Config+0x192>
   177f8:	82 de       	rcall	.-764    	; 0x174fe <pop_state>
   177fa:	4c 01       	movw	r8, r24
   177fc:	e3 cf       	rjmp	.-58     	; 0x177c4 <Read_Config+0x158>
   177fe:	b0 e1       	ldi	r27, 0x10	; 16
   17800:	8b 16       	cp	r8, r27
   17802:	91 04       	cpc	r9, r1
   17804:	08 f0       	brcs	.+2      	; 0x17808 <Read_Config+0x19c>
   17806:	45 c7       	rjmp	.+3722   	; 0x18692 <Read_Config+0x1026>
   17808:	f4 01       	movw	r30, r8
   1780a:	e5 52       	subi	r30, 0x25	; 37
   1780c:	ff 4f       	sbci	r31, 0xFF	; 255
   1780e:	0c 94 c1 ec 	jmp	0x1d982	; 0x1d982 <__tablejump2__>
   17812:	6c ef       	ldi	r22, 0xFC	; 252
   17814:	73 e1       	ldi	r23, 0x13	; 19
   17816:	c6 01       	movw	r24, r12
   17818:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   1781c:	89 2b       	or	r24, r25
   1781e:	51 f0       	breq	.+20     	; 0x17834 <Read_Config+0x1c8>
   17820:	80 e0       	ldi	r24, 0x00	; 0
   17822:	90 e0       	ldi	r25, 0x00	; 0
   17824:	53 de       	rcall	.-858    	; 0x174cc <push_state>
   17826:	82 e0       	ldi	r24, 0x02	; 2
   17828:	90 e0       	ldi	r25, 0x00	; 0
   1782a:	89 dd       	rcall	.-1262   	; 0x1733e <alloc_device>
   1782c:	3c 01       	movw	r6, r24
   1782e:	01 96       	adiw	r24, 0x01	; 1
   17830:	91 f4       	brne	.+36     	; 0x17856 <Read_Config+0x1ea>
   17832:	c8 cf       	rjmp	.-112    	; 0x177c4 <Read_Config+0x158>
   17834:	69 e0       	ldi	r22, 0x09	; 9
   17836:	74 e1       	ldi	r23, 0x14	; 20
   17838:	c6 01       	movw	r24, r12
   1783a:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   1783e:	89 2b       	or	r24, r25
   17840:	c1 f0       	breq	.+48     	; 0x17872 <Read_Config+0x206>
   17842:	80 e0       	ldi	r24, 0x00	; 0
   17844:	90 e0       	ldi	r25, 0x00	; 0
   17846:	42 de       	rcall	.-892    	; 0x174cc <push_state>
   17848:	83 e0       	ldi	r24, 0x03	; 3
   1784a:	90 e0       	ldi	r25, 0x00	; 0
   1784c:	78 dd       	rcall	.-1296   	; 0x1733e <alloc_device>
   1784e:	3c 01       	movw	r6, r24
   17850:	01 96       	adiw	r24, 0x01	; 1
   17852:	09 f4       	brne	.+2      	; 0x17856 <Read_Config+0x1ea>
   17854:	b7 cf       	rjmp	.-146    	; 0x177c4 <Read_Config+0x158>
   17856:	87 e0       	ldi	r24, 0x07	; 7
   17858:	86 9d       	mul	r24, r6
   1785a:	f0 01       	movw	r30, r0
   1785c:	87 9d       	mul	r24, r7
   1785e:	f0 0d       	add	r31, r0
   17860:	11 24       	eor	r1, r1
   17862:	e1 5e       	subi	r30, 0xE1	; 225
   17864:	f0 4e       	sbci	r31, 0xE0	; 224
   17866:	43 80       	ldd	r4, Z+3	; 0x03
   17868:	54 80       	ldd	r5, Z+4	; 0x04
   1786a:	88 24       	eor	r8, r8
   1786c:	83 94       	inc	r8
   1786e:	91 2c       	mov	r9, r1
   17870:	a9 cf       	rjmp	.-174    	; 0x177c4 <Read_Config+0x158>
   17872:	6e e0       	ldi	r22, 0x0E	; 14
   17874:	74 e1       	ldi	r23, 0x14	; 20
   17876:	c6 01       	movw	r24, r12
   17878:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   1787c:	89 2b       	or	r24, r25
   1787e:	c1 f0       	breq	.+48     	; 0x178b0 <Read_Config+0x244>
   17880:	80 e0       	ldi	r24, 0x00	; 0
   17882:	90 e0       	ldi	r25, 0x00	; 0
   17884:	23 de       	rcall	.-954    	; 0x174cc <push_state>
   17886:	81 e0       	ldi	r24, 0x01	; 1
   17888:	90 e0       	ldi	r25, 0x00	; 0
   1788a:	59 dd       	rcall	.-1358   	; 0x1733e <alloc_device>
   1788c:	3c 01       	movw	r6, r24
   1788e:	01 96       	adiw	r24, 0x01	; 1
   17890:	09 f4       	brne	.+2      	; 0x17894 <Read_Config+0x228>
   17892:	98 cf       	rjmp	.-208    	; 0x177c4 <Read_Config+0x158>
   17894:	87 e0       	ldi	r24, 0x07	; 7
   17896:	86 9d       	mul	r24, r6
   17898:	f0 01       	movw	r30, r0
   1789a:	87 9d       	mul	r24, r7
   1789c:	f0 0d       	add	r31, r0
   1789e:	11 24       	eor	r1, r1
   178a0:	e1 5e       	subi	r30, 0xE1	; 225
   178a2:	f0 4e       	sbci	r31, 0xE0	; 224
   178a4:	23 80       	ldd	r2, Z+3	; 0x03
   178a6:	34 80       	ldd	r3, Z+4	; 0x04
   178a8:	aa e0       	ldi	r26, 0x0A	; 10
   178aa:	8a 2e       	mov	r8, r26
   178ac:	91 2c       	mov	r9, r1
   178ae:	8a cf       	rjmp	.-236    	; 0x177c4 <Read_Config+0x158>
   178b0:	64 e1       	ldi	r22, 0x14	; 20
   178b2:	74 e1       	ldi	r23, 0x14	; 20
   178b4:	c6 01       	movw	r24, r12
   178b6:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   178ba:	89 2b       	or	r24, r25
   178bc:	f1 f0       	breq	.+60     	; 0x178fa <Read_Config+0x28e>
   178be:	80 e0       	ldi	r24, 0x00	; 0
   178c0:	90 e0       	ldi	r25, 0x00	; 0
   178c2:	04 de       	rcall	.-1016   	; 0x174cc <push_state>
   178c4:	84 e0       	ldi	r24, 0x04	; 4
   178c6:	90 e0       	ldi	r25, 0x00	; 0
   178c8:	3a dd       	rcall	.-1420   	; 0x1733e <alloc_device>
   178ca:	3c 01       	movw	r6, r24
   178cc:	01 96       	adiw	r24, 0x01	; 1
   178ce:	09 f4       	brne	.+2      	; 0x178d2 <Read_Config+0x266>
   178d0:	79 cf       	rjmp	.-270    	; 0x177c4 <Read_Config+0x158>
   178d2:	87 e0       	ldi	r24, 0x07	; 7
   178d4:	86 9d       	mul	r24, r6
   178d6:	f0 01       	movw	r30, r0
   178d8:	87 9d       	mul	r24, r7
   178da:	f0 0d       	add	r31, r0
   178dc:	11 24       	eor	r1, r1
   178de:	e1 5e       	subi	r30, 0xE1	; 225
   178e0:	f0 4e       	sbci	r31, 0xE0	; 224
   178e2:	83 81       	ldd	r24, Z+3	; 0x03
   178e4:	94 81       	ldd	r25, Z+4	; 0x04
   178e6:	cb 57       	subi	r28, 0x7B	; 123
   178e8:	df 4f       	sbci	r29, 0xFF	; 255
   178ea:	99 83       	std	Y+1, r25	; 0x01
   178ec:	88 83       	st	Y, r24
   178ee:	c5 58       	subi	r28, 0x85	; 133
   178f0:	d0 40       	sbci	r29, 0x00	; 0
   178f2:	fe e0       	ldi	r31, 0x0E	; 14
   178f4:	8f 2e       	mov	r8, r31
   178f6:	91 2c       	mov	r9, r1
   178f8:	65 cf       	rjmp	.-310    	; 0x177c4 <Read_Config+0x158>
   178fa:	6c e1       	ldi	r22, 0x1C	; 28
   178fc:	74 e1       	ldi	r23, 0x14	; 20
   178fe:	c6 01       	movw	r24, r12
   17900:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17904:	00 97       	sbiw	r24, 0x00	; 0
   17906:	f1 f0       	breq	.+60     	; 0x17944 <Read_Config+0x2d8>
   17908:	de 01       	movw	r26, r28
   1790a:	af 57       	subi	r26, 0x7F	; 127
   1790c:	bf 4f       	sbci	r27, 0xFF	; 255
   1790e:	7d 01       	movw	r14, r26
   17910:	0f ef       	ldi	r16, 0xFF	; 255
   17912:	1f ef       	ldi	r17, 0xFF	; 255
   17914:	20 e0       	ldi	r18, 0x00	; 0
   17916:	30 e0       	ldi	r19, 0x00	; 0
   17918:	40 e0       	ldi	r20, 0x00	; 0
   1791a:	50 e0       	ldi	r21, 0x00	; 0
   1791c:	ba 01       	movw	r22, r20
   1791e:	8c 0d       	add	r24, r12
   17920:	9d 1d       	adc	r25, r13
   17922:	04 de       	rcall	.-1016   	; 0x1752c <assign_value>
   17924:	67 2b       	or	r22, r23
   17926:	68 2b       	or	r22, r24
   17928:	69 2b       	or	r22, r25
   1792a:	09 f4       	brne	.+2      	; 0x1792e <Read_Config+0x2c2>
   1792c:	4b cf       	rjmp	.-362    	; 0x177c4 <Read_Config+0x158>
   1792e:	cf 57       	subi	r28, 0x7F	; 127
   17930:	df 4f       	sbci	r29, 0xFF	; 255
   17932:	88 81       	ld	r24, Y
   17934:	99 81       	ldd	r25, Y+1	; 0x01
   17936:	c1 58       	subi	r28, 0x81	; 129
   17938:	d0 40       	sbci	r29, 0x00	; 0
   1793a:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1793e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
   17942:	40 cf       	rjmp	.-384    	; 0x177c4 <Read_Config+0x158>
   17944:	62 e2       	ldi	r22, 0x22	; 34
   17946:	74 e1       	ldi	r23, 0x14	; 20
   17948:	c6 01       	movw	r24, r12
   1794a:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   1794e:	30 91 c5 19 	lds	r19, 0x19C5	; 0x8019c5 <lines+0x1>
   17952:	20 91 c4 19 	lds	r18, 0x19C4	; 0x8019c4 <lines>
   17956:	00 97       	sbiw	r24, 0x00	; 0
   17958:	61 f0       	breq	.+24     	; 0x17972 <Read_Config+0x306>
   1795a:	3f 93       	push	r19
   1795c:	2f 93       	push	r18
   1795e:	c8 0e       	add	r12, r24
   17960:	d9 1e       	adc	r13, r25
   17962:	df 92       	push	r13
   17964:	cf 92       	push	r12
   17966:	88 e8       	ldi	r24, 0x88	; 136
   17968:	90 e3       	ldi	r25, 0x30	; 48
   1796a:	1f 92       	push	r1
   1796c:	9f 93       	push	r25
   1796e:	8f 93       	push	r24
   17970:	00 c5       	rjmp	.+2560   	; 0x18372 <Read_Config+0xd06>
   17972:	3f 93       	push	r19
   17974:	2f 93       	push	r18
   17976:	df 92       	push	r13
   17978:	cf 92       	push	r12
   1797a:	80 e6       	ldi	r24, 0x60	; 96
   1797c:	90 e3       	ldi	r25, 0x30	; 48
   1797e:	b5 c0       	rjmp	.+362    	; 0x17aea <Read_Config+0x47e>
   17980:	6a e3       	ldi	r22, 0x3A	; 58
   17982:	74 e1       	ldi	r23, 0x14	; 20
   17984:	c6 01       	movw	r24, r12
   17986:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   1798a:	89 2b       	or	r24, r25
   1798c:	39 f0       	breq	.+14     	; 0x1799c <Read_Config+0x330>
   1798e:	8e e0       	ldi	r24, 0x0E	; 14
   17990:	90 e0       	ldi	r25, 0x00	; 0
   17992:	9c dd       	rcall	.-1224   	; 0x174cc <push_state>
   17994:	ef e0       	ldi	r30, 0x0F	; 15
   17996:	8e 2e       	mov	r8, r30
   17998:	91 2c       	mov	r9, r1
   1799a:	14 cf       	rjmp	.-472    	; 0x177c4 <Read_Config+0x158>
   1799c:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   179a0:	8f 93       	push	r24
   179a2:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   179a6:	8f 93       	push	r24
   179a8:	df 92       	push	r13
   179aa:	cf 92       	push	r12
   179ac:	86 e3       	ldi	r24, 0x36	; 54
   179ae:	90 e3       	ldi	r25, 0x30	; 48
   179b0:	1f 92       	push	r1
   179b2:	9f 93       	push	r25
   179b4:	8f 93       	push	r24
   179b6:	aa c5       	rjmp	.+2900   	; 0x1850c <Read_Config+0xea0>
   179b8:	62 e3       	ldi	r22, 0x32	; 50
   179ba:	74 e1       	ldi	r23, 0x14	; 20
   179bc:	c6 01       	movw	r24, r12
   179be:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   179c2:	00 97       	sbiw	r24, 0x00	; 0
   179c4:	79 f1       	breq	.+94     	; 0x17a24 <Read_Config+0x3b8>
   179c6:	de 01       	movw	r26, r28
   179c8:	af 57       	subi	r26, 0x7F	; 127
   179ca:	bf 4f       	sbci	r27, 0xFF	; 255
   179cc:	7d 01       	movw	r14, r26
   179ce:	0e e0       	ldi	r16, 0x0E	; 14
   179d0:	10 e0       	ldi	r17, 0x00	; 0
   179d2:	20 e0       	ldi	r18, 0x00	; 0
   179d4:	30 e0       	ldi	r19, 0x00	; 0
   179d6:	40 e0       	ldi	r20, 0x00	; 0
   179d8:	50 e0       	ldi	r21, 0x00	; 0
   179da:	ba 01       	movw	r22, r20
   179dc:	8c 0d       	add	r24, r12
   179de:	9d 1d       	adc	r25, r13
   179e0:	a5 dd       	rcall	.-1206   	; 0x1752c <assign_value>
   179e2:	67 2b       	or	r22, r23
   179e4:	68 2b       	or	r22, r24
   179e6:	69 2b       	or	r22, r25
   179e8:	29 f4       	brne	.+10     	; 0x179f4 <Read_Config+0x388>
   179ea:	bf ef       	ldi	r27, 0xFF	; 255
   179ec:	ab 1a       	sub	r10, r27
   179ee:	bb 0a       	sbc	r11, r27
   179f0:	8f ef       	ldi	r24, 0xFF	; 255
   179f2:	05 c0       	rjmp	.+10     	; 0x179fe <Read_Config+0x392>
   179f4:	cf 57       	subi	r28, 0x7F	; 127
   179f6:	df 4f       	sbci	r29, 0xFF	; 255
   179f8:	88 81       	ld	r24, Y
   179fa:	c1 58       	subi	r28, 0x81	; 129
   179fc:	d0 40       	sbci	r29, 0x00	; 0
   179fe:	97 e0       	ldi	r25, 0x07	; 7
   17a00:	96 9d       	mul	r25, r6
   17a02:	f0 01       	movw	r30, r0
   17a04:	97 9d       	mul	r25, r7
   17a06:	f0 0d       	add	r31, r0
   17a08:	11 24       	eor	r1, r1
   17a0a:	e1 5e       	subi	r30, 0xE1	; 225
   17a0c:	f0 4e       	sbci	r31, 0xE0	; 224
   17a0e:	81 83       	std	Z+1, r24	; 0x01
   17a10:	cb 57       	subi	r28, 0x7B	; 123
   17a12:	df 4f       	sbci	r29, 0xFF	; 255
   17a14:	a8 81       	ld	r26, Y
   17a16:	b9 81       	ldd	r27, Y+1	; 0x01
   17a18:	c5 58       	subi	r28, 0x85	; 133
   17a1a:	d0 40       	sbci	r29, 0x00	; 0
   17a1c:	8c 93       	st	X, r24
   17a1e:	8f ef       	ldi	r24, 0xFF	; 255
   17a20:	82 83       	std	Z+2, r24	; 0x02
   17a22:	c2 c0       	rjmp	.+388    	; 0x17ba8 <Read_Config+0x53c>
   17a24:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   17a28:	8f 93       	push	r24
   17a2a:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17a2e:	8f 93       	push	r24
   17a30:	df 92       	push	r13
   17a32:	cf 92       	push	r12
   17a34:	85 e0       	ldi	r24, 0x05	; 5
   17a36:	90 e3       	ldi	r25, 0x30	; 48
   17a38:	1f 92       	push	r1
   17a3a:	9f 93       	push	r25
   17a3c:	8f 93       	push	r24
   17a3e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   17a42:	bf ef       	ldi	r27, 0xFF	; 255
   17a44:	ab 1a       	sub	r10, r27
   17a46:	bb 0a       	sbc	r11, r27
   17a48:	3e c6       	rjmp	.+3196   	; 0x186c6 <Read_Config+0x105a>
   17a4a:	61 e4       	ldi	r22, 0x41	; 65
   17a4c:	74 e1       	ldi	r23, 0x14	; 20
   17a4e:	c6 01       	movw	r24, r12
   17a50:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17a54:	89 2b       	or	r24, r25
   17a56:	39 f0       	breq	.+14     	; 0x17a66 <Read_Config+0x3fa>
   17a58:	81 e0       	ldi	r24, 0x01	; 1
   17a5a:	90 e0       	ldi	r25, 0x00	; 0
   17a5c:	37 dd       	rcall	.-1426   	; 0x174cc <push_state>
   17a5e:	72 e0       	ldi	r23, 0x02	; 2
   17a60:	87 2e       	mov	r8, r23
   17a62:	91 2c       	mov	r9, r1
   17a64:	af ce       	rjmp	.-674    	; 0x177c4 <Read_Config+0x158>
   17a66:	6a e3       	ldi	r22, 0x3A	; 58
   17a68:	74 e1       	ldi	r23, 0x14	; 20
   17a6a:	c6 01       	movw	r24, r12
   17a6c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17a70:	89 2b       	or	r24, r25
   17a72:	39 f0       	breq	.+14     	; 0x17a82 <Read_Config+0x416>
   17a74:	81 e0       	ldi	r24, 0x01	; 1
   17a76:	90 e0       	ldi	r25, 0x00	; 0
   17a78:	29 dd       	rcall	.-1454   	; 0x174cc <push_state>
   17a7a:	63 e0       	ldi	r22, 0x03	; 3
   17a7c:	86 2e       	mov	r8, r22
   17a7e:	91 2c       	mov	r9, r1
   17a80:	a1 ce       	rjmp	.-702    	; 0x177c4 <Read_Config+0x158>
   17a82:	68 e4       	ldi	r22, 0x48	; 72
   17a84:	74 e1       	ldi	r23, 0x14	; 20
   17a86:	c6 01       	movw	r24, r12
   17a88:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17a8c:	89 2b       	or	r24, r25
   17a8e:	39 f0       	breq	.+14     	; 0x17a9e <Read_Config+0x432>
   17a90:	81 e0       	ldi	r24, 0x01	; 1
   17a92:	90 e0       	ldi	r25, 0x00	; 0
   17a94:	1b dd       	rcall	.-1482   	; 0x174cc <push_state>
   17a96:	54 e0       	ldi	r21, 0x04	; 4
   17a98:	85 2e       	mov	r8, r21
   17a9a:	91 2c       	mov	r9, r1
   17a9c:	93 ce       	rjmp	.-730    	; 0x177c4 <Read_Config+0x158>
   17a9e:	63 e5       	ldi	r22, 0x53	; 83
   17aa0:	74 e1       	ldi	r23, 0x14	; 20
   17aa2:	c6 01       	movw	r24, r12
   17aa4:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17aa8:	89 2b       	or	r24, r25
   17aaa:	39 f0       	breq	.+14     	; 0x17aba <Read_Config+0x44e>
   17aac:	81 e0       	ldi	r24, 0x01	; 1
   17aae:	90 e0       	ldi	r25, 0x00	; 0
   17ab0:	0d dd       	rcall	.-1510   	; 0x174cc <push_state>
   17ab2:	45 e0       	ldi	r20, 0x05	; 5
   17ab4:	84 2e       	mov	r8, r20
   17ab6:	91 2c       	mov	r9, r1
   17ab8:	85 ce       	rjmp	.-758    	; 0x177c4 <Read_Config+0x158>
   17aba:	68 e5       	ldi	r22, 0x58	; 88
   17abc:	74 e1       	ldi	r23, 0x14	; 20
   17abe:	c6 01       	movw	r24, r12
   17ac0:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17ac4:	89 2b       	or	r24, r25
   17ac6:	39 f0       	breq	.+14     	; 0x17ad6 <Read_Config+0x46a>
   17ac8:	81 e0       	ldi	r24, 0x01	; 1
   17aca:	90 e0       	ldi	r25, 0x00	; 0
   17acc:	ff dc       	rcall	.-1538   	; 0x174cc <push_state>
   17ace:	36 e0       	ldi	r19, 0x06	; 6
   17ad0:	83 2e       	mov	r8, r19
   17ad2:	91 2c       	mov	r9, r1
   17ad4:	77 ce       	rjmp	.-786    	; 0x177c4 <Read_Config+0x158>
   17ad6:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   17ada:	8f 93       	push	r24
   17adc:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17ae0:	8f 93       	push	r24
   17ae2:	df 92       	push	r13
   17ae4:	cf 92       	push	r12
   17ae6:	88 ed       	ldi	r24, 0xD8	; 216
   17ae8:	9f e2       	ldi	r25, 0x2F	; 47
   17aea:	1f 92       	push	r1
   17aec:	9f 93       	push	r25
   17aee:	8f 93       	push	r24
   17af0:	ca c5       	rjmp	.+2964   	; 0x18686 <Read_Config+0x101a>
   17af2:	62 e3       	ldi	r22, 0x32	; 50
   17af4:	74 e1       	ldi	r23, 0x14	; 20
   17af6:	c6 01       	movw	r24, r12
   17af8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17afc:	00 97       	sbiw	r24, 0x00	; 0
   17afe:	39 f1       	breq	.+78     	; 0x17b4e <Read_Config+0x4e2>
   17b00:	de 01       	movw	r26, r28
   17b02:	af 57       	subi	r26, 0x7F	; 127
   17b04:	bf 4f       	sbci	r27, 0xFF	; 255
   17b06:	7d 01       	movw	r14, r26
   17b08:	0e e1       	ldi	r16, 0x1E	; 30
   17b0a:	10 e0       	ldi	r17, 0x00	; 0
   17b0c:	20 e0       	ldi	r18, 0x00	; 0
   17b0e:	30 e0       	ldi	r19, 0x00	; 0
   17b10:	40 e0       	ldi	r20, 0x00	; 0
   17b12:	50 e0       	ldi	r21, 0x00	; 0
   17b14:	ba 01       	movw	r22, r20
   17b16:	8c 0d       	add	r24, r12
   17b18:	9d 1d       	adc	r25, r13
   17b1a:	08 dd       	rcall	.-1520   	; 0x1752c <assign_value>
   17b1c:	67 2b       	or	r22, r23
   17b1e:	68 2b       	or	r22, r24
   17b20:	69 2b       	or	r22, r25
   17b22:	29 f4       	brne	.+10     	; 0x17b2e <Read_Config+0x4c2>
   17b24:	bf ef       	ldi	r27, 0xFF	; 255
   17b26:	ab 1a       	sub	r10, r27
   17b28:	bb 0a       	sbc	r11, r27
   17b2a:	8f ef       	ldi	r24, 0xFF	; 255
   17b2c:	05 c0       	rjmp	.+10     	; 0x17b38 <Read_Config+0x4cc>
   17b2e:	cf 57       	subi	r28, 0x7F	; 127
   17b30:	df 4f       	sbci	r29, 0xFF	; 255
   17b32:	88 81       	ld	r24, Y
   17b34:	c1 58       	subi	r28, 0x81	; 129
   17b36:	d0 40       	sbci	r29, 0x00	; 0
   17b38:	97 e0       	ldi	r25, 0x07	; 7
   17b3a:	96 9d       	mul	r25, r6
   17b3c:	f0 01       	movw	r30, r0
   17b3e:	97 9d       	mul	r25, r7
   17b40:	f0 0d       	add	r31, r0
   17b42:	11 24       	eor	r1, r1
   17b44:	e1 5e       	subi	r30, 0xE1	; 225
   17b46:	f0 4e       	sbci	r31, 0xE0	; 224
   17b48:	81 83       	std	Z+1, r24	; 0x01
   17b4a:	f2 01       	movw	r30, r4
   17b4c:	42 c4       	rjmp	.+2180   	; 0x183d2 <Read_Config+0xd66>
   17b4e:	6f e5       	ldi	r22, 0x5F	; 95
   17b50:	74 e1       	ldi	r23, 0x14	; 20
   17b52:	c6 01       	movw	r24, r12
   17b54:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17b58:	00 97       	sbiw	r24, 0x00	; 0
   17b5a:	49 f1       	breq	.+82     	; 0x17bae <Read_Config+0x542>
   17b5c:	9e 01       	movw	r18, r28
   17b5e:	2f 57       	subi	r18, 0x7F	; 127
   17b60:	3f 4f       	sbci	r19, 0xFF	; 255
   17b62:	79 01       	movw	r14, r18
   17b64:	07 e0       	ldi	r16, 0x07	; 7
   17b66:	10 e0       	ldi	r17, 0x00	; 0
   17b68:	20 e0       	ldi	r18, 0x00	; 0
   17b6a:	30 e0       	ldi	r19, 0x00	; 0
   17b6c:	40 e0       	ldi	r20, 0x00	; 0
   17b6e:	50 e0       	ldi	r21, 0x00	; 0
   17b70:	ba 01       	movw	r22, r20
   17b72:	8c 0d       	add	r24, r12
   17b74:	9d 1d       	adc	r25, r13
   17b76:	da dc       	rcall	.-1612   	; 0x1752c <assign_value>
   17b78:	67 2b       	or	r22, r23
   17b7a:	68 2b       	or	r22, r24
   17b7c:	69 2b       	or	r22, r25
   17b7e:	29 f4       	brne	.+10     	; 0x17b8a <Read_Config+0x51e>
   17b80:	3f ef       	ldi	r19, 0xFF	; 255
   17b82:	a3 1a       	sub	r10, r19
   17b84:	b3 0a       	sbc	r11, r19
   17b86:	8f ef       	ldi	r24, 0xFF	; 255
   17b88:	05 c0       	rjmp	.+10     	; 0x17b94 <Read_Config+0x528>
   17b8a:	cf 57       	subi	r28, 0x7F	; 127
   17b8c:	df 4f       	sbci	r29, 0xFF	; 255
   17b8e:	88 81       	ld	r24, Y
   17b90:	c1 58       	subi	r28, 0x81	; 129
   17b92:	d0 40       	sbci	r29, 0x00	; 0
   17b94:	97 e0       	ldi	r25, 0x07	; 7
   17b96:	96 9d       	mul	r25, r6
   17b98:	f0 01       	movw	r30, r0
   17b9a:	97 9d       	mul	r25, r7
   17b9c:	f0 0d       	add	r31, r0
   17b9e:	11 24       	eor	r1, r1
   17ba0:	e1 5e       	subi	r30, 0xE1	; 225
   17ba2:	f0 4e       	sbci	r31, 0xE0	; 224
   17ba4:	82 83       	std	Z+2, r24	; 0x02
   17ba6:	d2 01       	movw	r26, r4
   17ba8:	11 96       	adiw	r26, 0x01	; 1
   17baa:	8c 93       	st	X, r24
   17bac:	0b ce       	rjmp	.-1002   	; 0x177c4 <Read_Config+0x158>
   17bae:	63 e6       	ldi	r22, 0x63	; 99
   17bb0:	74 e1       	ldi	r23, 0x14	; 20
   17bb2:	c6 01       	movw	r24, r12
   17bb4:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17bb8:	00 97       	sbiw	r24, 0x00	; 0
   17bba:	a1 f0       	breq	.+40     	; 0x17be4 <Read_Config+0x578>
   17bbc:	8c 0d       	add	r24, r12
   17bbe:	9d 1d       	adc	r25, r13
   17bc0:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   17bc4:	fc 01       	movw	r30, r24
   17bc6:	20 81       	ld	r18, Z
   17bc8:	2d 33       	cpi	r18, 0x3D	; 61
   17bca:	19 f4       	brne	.+6      	; 0x17bd2 <Read_Config+0x566>
   17bcc:	01 96       	adiw	r24, 0x01	; 1
   17bce:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   17bd2:	40 e2       	ldi	r20, 0x20	; 32
   17bd4:	50 e0       	ldi	r21, 0x00	; 0
   17bd6:	bc 01       	movw	r22, r24
   17bd8:	c2 01       	movw	r24, r4
   17bda:	02 96       	adiw	r24, 0x02	; 2
   17bdc:	0e 94 59 32 	call	0x64b2	; 0x64b2 <strncpy>
   17be0:	d2 01       	movw	r26, r4
   17be2:	41 c4       	rjmp	.+2178   	; 0x18466 <Read_Config+0xdfa>
   17be4:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   17be8:	8f 93       	push	r24
   17bea:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17bee:	8f 93       	push	r24
   17bf0:	df 92       	push	r13
   17bf2:	cf 92       	push	r12
   17bf4:	8a ea       	ldi	r24, 0xAA	; 170
   17bf6:	9f e2       	ldi	r25, 0x2F	; 47
   17bf8:	1f cf       	rjmp	.-450    	; 0x17a38 <Read_Config+0x3cc>
   17bfa:	68 e6       	ldi	r22, 0x68	; 104
   17bfc:	74 e1       	ldi	r23, 0x14	; 20
   17bfe:	c6 01       	movw	r24, r12
   17c00:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17c04:	00 97       	sbiw	r24, 0x00	; 0
   17c06:	09 f1       	breq	.+66     	; 0x17c4a <Read_Config+0x5de>
   17c08:	9e 01       	movw	r18, r28
   17c0a:	2f 57       	subi	r18, 0x7F	; 127
   17c0c:	3f 4f       	sbci	r19, 0xFF	; 255
   17c0e:	79 01       	movw	r14, r18
   17c10:	0f ef       	ldi	r16, 0xFF	; 255
   17c12:	1f ef       	ldi	r17, 0xFF	; 255
   17c14:	20 e0       	ldi	r18, 0x00	; 0
   17c16:	30 e0       	ldi	r19, 0x00	; 0
   17c18:	40 e0       	ldi	r20, 0x00	; 0
   17c1a:	50 e0       	ldi	r21, 0x00	; 0
   17c1c:	ba 01       	movw	r22, r20
   17c1e:	8c 0d       	add	r24, r12
   17c20:	9d 1d       	adc	r25, r13
   17c22:	84 dc       	rcall	.-1784   	; 0x1752c <assign_value>
   17c24:	67 2b       	or	r22, r23
   17c26:	68 2b       	or	r22, r24
   17c28:	69 2b       	or	r22, r25
   17c2a:	19 f4       	brne	.+6      	; 0x17c32 <Read_Config+0x5c6>
   17c2c:	3f ef       	ldi	r19, 0xFF	; 255
   17c2e:	a3 1a       	sub	r10, r19
   17c30:	b3 0a       	sbc	r11, r19
   17c32:	cf 57       	subi	r28, 0x7F	; 127
   17c34:	df 4f       	sbci	r29, 0xFF	; 255
   17c36:	88 81       	ld	r24, Y
   17c38:	99 81       	ldd	r25, Y+1	; 0x01
   17c3a:	c1 58       	subi	r28, 0x81	; 129
   17c3c:	d0 40       	sbci	r29, 0x00	; 0
   17c3e:	d2 01       	movw	r26, r4
   17c40:	94 96       	adiw	r26, 0x24	; 36
   17c42:	9c 93       	st	X, r25
   17c44:	8e 93       	st	-X, r24
   17c46:	93 97       	sbiw	r26, 0x23	; 35
   17c48:	bd cd       	rjmp	.-1158   	; 0x177c4 <Read_Config+0x158>
   17c4a:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   17c4e:	8f 93       	push	r24
   17c50:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17c54:	8f 93       	push	r24
   17c56:	df 92       	push	r13
   17c58:	cf 92       	push	r12
   17c5a:	8c e7       	ldi	r24, 0x7C	; 124
   17c5c:	9f e2       	ldi	r25, 0x2F	; 47
   17c5e:	ec ce       	rjmp	.-552    	; 0x17a38 <Read_Config+0x3cc>
   17c60:	6b e6       	ldi	r22, 0x6B	; 107
   17c62:	74 e1       	ldi	r23, 0x14	; 20
   17c64:	c6 01       	movw	r24, r12
   17c66:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17c6a:	00 97       	sbiw	r24, 0x00	; 0
   17c6c:	09 f1       	breq	.+66     	; 0x17cb0 <Read_Config+0x644>
   17c6e:	9e 01       	movw	r18, r28
   17c70:	2f 57       	subi	r18, 0x7F	; 127
   17c72:	3f 4f       	sbci	r19, 0xFF	; 255
   17c74:	79 01       	movw	r14, r18
   17c76:	0f ef       	ldi	r16, 0xFF	; 255
   17c78:	1f ef       	ldi	r17, 0xFF	; 255
   17c7a:	20 e0       	ldi	r18, 0x00	; 0
   17c7c:	30 e0       	ldi	r19, 0x00	; 0
   17c7e:	40 e0       	ldi	r20, 0x00	; 0
   17c80:	50 e0       	ldi	r21, 0x00	; 0
   17c82:	ba 01       	movw	r22, r20
   17c84:	8c 0d       	add	r24, r12
   17c86:	9d 1d       	adc	r25, r13
   17c88:	51 dc       	rcall	.-1886   	; 0x1752c <assign_value>
   17c8a:	67 2b       	or	r22, r23
   17c8c:	68 2b       	or	r22, r24
   17c8e:	69 2b       	or	r22, r25
   17c90:	19 f4       	brne	.+6      	; 0x17c98 <Read_Config+0x62c>
   17c92:	3f ef       	ldi	r19, 0xFF	; 255
   17c94:	a3 1a       	sub	r10, r19
   17c96:	b3 0a       	sbc	r11, r19
   17c98:	cf 57       	subi	r28, 0x7F	; 127
   17c9a:	df 4f       	sbci	r29, 0xFF	; 255
   17c9c:	88 81       	ld	r24, Y
   17c9e:	99 81       	ldd	r25, Y+1	; 0x01
   17ca0:	c1 58       	subi	r28, 0x81	; 129
   17ca2:	d0 40       	sbci	r29, 0x00	; 0
   17ca4:	d2 01       	movw	r26, r4
   17ca6:	96 96       	adiw	r26, 0x26	; 38
   17ca8:	9c 93       	st	X, r25
   17caa:	8e 93       	st	-X, r24
   17cac:	95 97       	sbiw	r26, 0x25	; 37
   17cae:	8a cd       	rjmp	.-1260   	; 0x177c4 <Read_Config+0x158>
   17cb0:	63 ed       	ldi	r22, 0xD3	; 211
   17cb2:	74 e1       	ldi	r23, 0x14	; 20
   17cb4:	c6 01       	movw	r24, r12
   17cb6:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17cba:	00 97       	sbiw	r24, 0x00	; 0
   17cbc:	e9 f0       	breq	.+58     	; 0x17cf8 <Read_Config+0x68c>
   17cbe:	fe 01       	movw	r30, r28
   17cc0:	ef 57       	subi	r30, 0x7F	; 127
   17cc2:	ff 4f       	sbci	r31, 0xFF	; 255
   17cc4:	7f 01       	movw	r14, r30
   17cc6:	0f ef       	ldi	r16, 0xFF	; 255
   17cc8:	1f ef       	ldi	r17, 0xFF	; 255
   17cca:	20 e0       	ldi	r18, 0x00	; 0
   17ccc:	30 e0       	ldi	r19, 0x00	; 0
   17cce:	40 e0       	ldi	r20, 0x00	; 0
   17cd0:	50 e0       	ldi	r21, 0x00	; 0
   17cd2:	ba 01       	movw	r22, r20
   17cd4:	8c 0d       	add	r24, r12
   17cd6:	9d 1d       	adc	r25, r13
   17cd8:	29 dc       	rcall	.-1966   	; 0x1752c <assign_value>
   17cda:	67 2b       	or	r22, r23
   17cdc:	68 2b       	or	r22, r24
   17cde:	69 2b       	or	r22, r25
   17ce0:	19 f4       	brne	.+6      	; 0x17ce8 <Read_Config+0x67c>
   17ce2:	ff ef       	ldi	r31, 0xFF	; 255
   17ce4:	af 1a       	sub	r10, r31
   17ce6:	bf 0a       	sbc	r11, r31
   17ce8:	cf 57       	subi	r28, 0x7F	; 127
   17cea:	df 4f       	sbci	r29, 0xFF	; 255
   17cec:	88 81       	ld	r24, Y
   17cee:	99 81       	ldd	r25, Y+1	; 0x01
   17cf0:	c1 58       	subi	r28, 0x81	; 129
   17cf2:	d0 40       	sbci	r29, 0x00	; 0
   17cf4:	d2 01       	movw	r26, r4
   17cf6:	5b c4       	rjmp	.+2230   	; 0x185ae <Read_Config+0xf42>
   17cf8:	69 eb       	ldi	r22, 0xB9	; 185
   17cfa:	73 e1       	ldi	r23, 0x13	; 19
   17cfc:	c6 01       	movw	r24, r12
   17cfe:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17d02:	00 97       	sbiw	r24, 0x00	; 0
   17d04:	f1 f0       	breq	.+60     	; 0x17d42 <Read_Config+0x6d6>
   17d06:	fe 01       	movw	r30, r28
   17d08:	ef 57       	subi	r30, 0x7F	; 127
   17d0a:	ff 4f       	sbci	r31, 0xFF	; 255
   17d0c:	7f 01       	movw	r14, r30
   17d0e:	0f ef       	ldi	r16, 0xFF	; 255
   17d10:	1f ef       	ldi	r17, 0xFF	; 255
   17d12:	20 e0       	ldi	r18, 0x00	; 0
   17d14:	30 e0       	ldi	r19, 0x00	; 0
   17d16:	40 e0       	ldi	r20, 0x00	; 0
   17d18:	50 e0       	ldi	r21, 0x00	; 0
   17d1a:	ba 01       	movw	r22, r20
   17d1c:	8c 0d       	add	r24, r12
   17d1e:	9d 1d       	adc	r25, r13
   17d20:	05 dc       	rcall	.-2038   	; 0x1752c <assign_value>
   17d22:	67 2b       	or	r22, r23
   17d24:	68 2b       	or	r22, r24
   17d26:	69 2b       	or	r22, r25
   17d28:	19 f4       	brne	.+6      	; 0x17d30 <Read_Config+0x6c4>
   17d2a:	ff ef       	ldi	r31, 0xFF	; 255
   17d2c:	af 1a       	sub	r10, r31
   17d2e:	bf 0a       	sbc	r11, r31
   17d30:	cf 57       	subi	r28, 0x7F	; 127
   17d32:	df 4f       	sbci	r29, 0xFF	; 255
   17d34:	88 81       	ld	r24, Y
   17d36:	c1 58       	subi	r28, 0x81	; 129
   17d38:	d0 40       	sbci	r29, 0x00	; 0
   17d3a:	d2 01       	movw	r26, r4
   17d3c:	99 96       	adiw	r26, 0x29	; 41
   17d3e:	8c 93       	st	X, r24
   17d40:	41 cd       	rjmp	.-1406   	; 0x177c4 <Read_Config+0x158>
   17d42:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   17d46:	8f 93       	push	r24
   17d48:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   17d4c:	8f 93       	push	r24
   17d4e:	df 92       	push	r13
   17d50:	cf 92       	push	r12
   17d52:	8a e4       	ldi	r24, 0x4A	; 74
   17d54:	9f e2       	ldi	r25, 0x2F	; 47
   17d56:	70 ce       	rjmp	.-800    	; 0x17a38 <Read_Config+0x3cc>
   17d58:	6b e7       	ldi	r22, 0x7B	; 123
   17d5a:	74 e1       	ldi	r23, 0x14	; 20
   17d5c:	c6 01       	movw	r24, r12
   17d5e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17d62:	00 97       	sbiw	r24, 0x00	; 0
   17d64:	f1 f0       	breq	.+60     	; 0x17da2 <Read_Config+0x736>
   17d66:	9e 01       	movw	r18, r28
   17d68:	2f 57       	subi	r18, 0x7F	; 127
   17d6a:	3f 4f       	sbci	r19, 0xFF	; 255
   17d6c:	79 01       	movw	r14, r18
   17d6e:	0f ef       	ldi	r16, 0xFF	; 255
   17d70:	1f ef       	ldi	r17, 0xFF	; 255
   17d72:	20 e0       	ldi	r18, 0x00	; 0
   17d74:	30 e0       	ldi	r19, 0x00	; 0
   17d76:	40 e0       	ldi	r20, 0x00	; 0
   17d78:	50 e0       	ldi	r21, 0x00	; 0
   17d7a:	ba 01       	movw	r22, r20
   17d7c:	8c 0d       	add	r24, r12
   17d7e:	9d 1d       	adc	r25, r13
   17d80:	d5 db       	rcall	.-2134   	; 0x1752c <assign_value>
   17d82:	67 2b       	or	r22, r23
   17d84:	68 2b       	or	r22, r24
   17d86:	69 2b       	or	r22, r25
   17d88:	19 f4       	brne	.+6      	; 0x17d90 <Read_Config+0x724>
   17d8a:	3f ef       	ldi	r19, 0xFF	; 255
   17d8c:	a3 1a       	sub	r10, r19
   17d8e:	b3 0a       	sbc	r11, r19
   17d90:	cf 57       	subi	r28, 0x7F	; 127
   17d92:	df 4f       	sbci	r29, 0xFF	; 255
   17d94:	88 81       	ld	r24, Y
   17d96:	c1 58       	subi	r28, 0x81	; 129
   17d98:	d0 40       	sbci	r29, 0x00	; 0
   17d9a:	d2 01       	movw	r26, r4
   17d9c:	9a 96       	adiw	r26, 0x2a	; 42
   17d9e:	8c 93       	st	X, r24
   17da0:	11 cd       	rjmp	.-1502   	; 0x177c4 <Read_Config+0x158>
   17da2:	65 e8       	ldi	r22, 0x85	; 133
   17da4:	74 e1       	ldi	r23, 0x14	; 20
   17da6:	c6 01       	movw	r24, r12
   17da8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17dac:	00 97       	sbiw	r24, 0x00	; 0
   17dae:	11 f1       	breq	.+68     	; 0x17df4 <Read_Config+0x788>
   17db0:	fe 01       	movw	r30, r28
   17db2:	ef 57       	subi	r30, 0x7F	; 127
   17db4:	ff 4f       	sbci	r31, 0xFF	; 255
   17db6:	7f 01       	movw	r14, r30
   17db8:	0f ef       	ldi	r16, 0xFF	; 255
   17dba:	1f ef       	ldi	r17, 0xFF	; 255
   17dbc:	98 01       	movw	r18, r16
   17dbe:	40 e0       	ldi	r20, 0x00	; 0
   17dc0:	50 e0       	ldi	r21, 0x00	; 0
   17dc2:	ba 01       	movw	r22, r20
   17dc4:	8c 0d       	add	r24, r12
   17dc6:	9d 1d       	adc	r25, r13
   17dc8:	b1 db       	rcall	.-2206   	; 0x1752c <assign_value>
   17dca:	67 2b       	or	r22, r23
   17dcc:	68 2b       	or	r22, r24
   17dce:	69 2b       	or	r22, r25
   17dd0:	19 f4       	brne	.+6      	; 0x17dd8 <Read_Config+0x76c>
   17dd2:	ff ef       	ldi	r31, 0xFF	; 255
   17dd4:	af 1a       	sub	r10, r31
   17dd6:	bf 0a       	sbc	r11, r31
   17dd8:	cf 57       	subi	r28, 0x7F	; 127
   17dda:	df 4f       	sbci	r29, 0xFF	; 255
   17ddc:	88 81       	ld	r24, Y
   17dde:	99 81       	ldd	r25, Y+1	; 0x01
   17de0:	aa 81       	ldd	r26, Y+2	; 0x02
   17de2:	bb 81       	ldd	r27, Y+3	; 0x03
   17de4:	c1 58       	subi	r28, 0x81	; 129
   17de6:	d0 40       	sbci	r29, 0x00	; 0
   17de8:	f2 01       	movw	r30, r4
   17dea:	83 a7       	std	Z+43, r24	; 0x2b
   17dec:	94 a7       	std	Z+44, r25	; 0x2c
   17dee:	a5 a7       	std	Z+45, r26	; 0x2d
   17df0:	b6 a7       	std	Z+46, r27	; 0x2e
   17df2:	e8 cc       	rjmp	.-1584   	; 0x177c4 <Read_Config+0x158>
   17df4:	63 e9       	ldi	r22, 0x93	; 147
   17df6:	74 e1       	ldi	r23, 0x14	; 20
   17df8:	c6 01       	movw	r24, r12
   17dfa:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17dfe:	00 97       	sbiw	r24, 0x00	; 0
   17e00:	09 f1       	breq	.+66     	; 0x17e44 <Read_Config+0x7d8>
   17e02:	9e 01       	movw	r18, r28
   17e04:	2f 57       	subi	r18, 0x7F	; 127
   17e06:	3f 4f       	sbci	r19, 0xFF	; 255
   17e08:	79 01       	movw	r14, r18
   17e0a:	00 e0       	ldi	r16, 0x00	; 0
   17e0c:	10 e1       	ldi	r17, 0x10	; 16
   17e0e:	20 e0       	ldi	r18, 0x00	; 0
   17e10:	30 e0       	ldi	r19, 0x00	; 0
   17e12:	40 e0       	ldi	r20, 0x00	; 0
   17e14:	50 e0       	ldi	r21, 0x00	; 0
   17e16:	ba 01       	movw	r22, r20
   17e18:	8c 0d       	add	r24, r12
   17e1a:	9d 1d       	adc	r25, r13
   17e1c:	87 db       	rcall	.-2290   	; 0x1752c <assign_value>
   17e1e:	67 2b       	or	r22, r23
   17e20:	68 2b       	or	r22, r24
   17e22:	69 2b       	or	r22, r25
   17e24:	19 f4       	brne	.+6      	; 0x17e2c <Read_Config+0x7c0>
   17e26:	3f ef       	ldi	r19, 0xFF	; 255
   17e28:	a3 1a       	sub	r10, r19
   17e2a:	b3 0a       	sbc	r11, r19
   17e2c:	cf 57       	subi	r28, 0x7F	; 127
   17e2e:	df 4f       	sbci	r29, 0xFF	; 255
   17e30:	88 81       	ld	r24, Y
   17e32:	99 81       	ldd	r25, Y+1	; 0x01
   17e34:	c1 58       	subi	r28, 0x81	; 129
   17e36:	d0 40       	sbci	r29, 0x00	; 0
   17e38:	d2 01       	movw	r26, r4
   17e3a:	d0 96       	adiw	r26, 0x30	; 48
   17e3c:	9c 93       	st	X, r25
   17e3e:	8e 93       	st	-X, r24
   17e40:	9f 97       	sbiw	r26, 0x2f	; 47
   17e42:	c0 cc       	rjmp	.-1664   	; 0x177c4 <Read_Config+0x158>
   17e44:	63 ea       	ldi	r22, 0xA3	; 163
   17e46:	74 e1       	ldi	r23, 0x14	; 20
   17e48:	c6 01       	movw	r24, r12
   17e4a:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17e4e:	00 97       	sbiw	r24, 0x00	; 0
   17e50:	f9 f0       	breq	.+62     	; 0x17e90 <Read_Config+0x824>
   17e52:	fe 01       	movw	r30, r28
   17e54:	ef 57       	subi	r30, 0x7F	; 127
   17e56:	ff 4f       	sbci	r31, 0xFF	; 255
   17e58:	7f 01       	movw	r14, r30
   17e5a:	01 e0       	ldi	r16, 0x01	; 1
   17e5c:	10 e0       	ldi	r17, 0x00	; 0
   17e5e:	20 e0       	ldi	r18, 0x00	; 0
   17e60:	30 e0       	ldi	r19, 0x00	; 0
   17e62:	41 e0       	ldi	r20, 0x01	; 1
   17e64:	50 e0       	ldi	r21, 0x00	; 0
   17e66:	60 e0       	ldi	r22, 0x00	; 0
   17e68:	70 e0       	ldi	r23, 0x00	; 0
   17e6a:	8c 0d       	add	r24, r12
   17e6c:	9d 1d       	adc	r25, r13
   17e6e:	5e db       	rcall	.-2372   	; 0x1752c <assign_value>
   17e70:	67 2b       	or	r22, r23
   17e72:	68 2b       	or	r22, r24
   17e74:	69 2b       	or	r22, r25
   17e76:	19 f4       	brne	.+6      	; 0x17e7e <Read_Config+0x812>
   17e78:	ff ef       	ldi	r31, 0xFF	; 255
   17e7a:	af 1a       	sub	r10, r31
   17e7c:	bf 0a       	sbc	r11, r31
   17e7e:	cf 57       	subi	r28, 0x7F	; 127
   17e80:	df 4f       	sbci	r29, 0xFF	; 255
   17e82:	88 81       	ld	r24, Y
   17e84:	c1 58       	subi	r28, 0x81	; 129
   17e86:	d0 40       	sbci	r29, 0x00	; 0
   17e88:	d2 01       	movw	r26, r4
   17e8a:	d1 96       	adiw	r26, 0x31	; 49
   17e8c:	8c 93       	st	X, r24
   17e8e:	9a cc       	rjmp	.-1740   	; 0x177c4 <Read_Config+0x158>
   17e90:	63 eb       	ldi	r22, 0xB3	; 179
   17e92:	74 e1       	ldi	r23, 0x14	; 20
   17e94:	c6 01       	movw	r24, r12
   17e96:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17e9a:	00 97       	sbiw	r24, 0x00	; 0
   17e9c:	e9 f0       	breq	.+58     	; 0x17ed8 <Read_Config+0x86c>
   17e9e:	fe 01       	movw	r30, r28
   17ea0:	ef 57       	subi	r30, 0x7F	; 127
   17ea2:	ff 4f       	sbci	r31, 0xFF	; 255
   17ea4:	7f 01       	movw	r14, r30
   17ea6:	00 e0       	ldi	r16, 0x00	; 0
   17ea8:	10 e0       	ldi	r17, 0x00	; 0
   17eaa:	98 01       	movw	r18, r16
   17eac:	40 e0       	ldi	r20, 0x00	; 0
   17eae:	50 e0       	ldi	r21, 0x00	; 0
   17eb0:	ba 01       	movw	r22, r20
   17eb2:	8c 0d       	add	r24, r12
   17eb4:	9d 1d       	adc	r25, r13
   17eb6:	3a db       	rcall	.-2444   	; 0x1752c <assign_value>
   17eb8:	67 2b       	or	r22, r23
   17eba:	68 2b       	or	r22, r24
   17ebc:	69 2b       	or	r22, r25
   17ebe:	19 f4       	brne	.+6      	; 0x17ec6 <Read_Config+0x85a>
   17ec0:	ff ef       	ldi	r31, 0xFF	; 255
   17ec2:	af 1a       	sub	r10, r31
   17ec4:	bf 0a       	sbc	r11, r31
   17ec6:	cf 57       	subi	r28, 0x7F	; 127
   17ec8:	df 4f       	sbci	r29, 0xFF	; 255
   17eca:	88 81       	ld	r24, Y
   17ecc:	c1 58       	subi	r28, 0x81	; 129
   17ece:	d0 40       	sbci	r29, 0x00	; 0
   17ed0:	d2 01       	movw	r26, r4
   17ed2:	d2 96       	adiw	r26, 0x32	; 50
   17ed4:	8c 93       	st	X, r24
   17ed6:	76 cc       	rjmp	.-1812   	; 0x177c4 <Read_Config+0x158>
   17ed8:	6e eb       	ldi	r22, 0xBE	; 190
   17eda:	74 e1       	ldi	r23, 0x14	; 20
   17edc:	c6 01       	movw	r24, r12
   17ede:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17ee2:	00 97       	sbiw	r24, 0x00	; 0
   17ee4:	09 f1       	breq	.+66     	; 0x17f28 <Read_Config+0x8bc>
   17ee6:	fe 01       	movw	r30, r28
   17ee8:	ef 57       	subi	r30, 0x7F	; 127
   17eea:	ff 4f       	sbci	r31, 0xFF	; 255
   17eec:	7f 01       	movw	r14, r30
   17eee:	0f ef       	ldi	r16, 0xFF	; 255
   17ef0:	1f ef       	ldi	r17, 0xFF	; 255
   17ef2:	20 e0       	ldi	r18, 0x00	; 0
   17ef4:	30 e0       	ldi	r19, 0x00	; 0
   17ef6:	40 e0       	ldi	r20, 0x00	; 0
   17ef8:	50 e0       	ldi	r21, 0x00	; 0
   17efa:	ba 01       	movw	r22, r20
   17efc:	8c 0d       	add	r24, r12
   17efe:	9d 1d       	adc	r25, r13
   17f00:	15 db       	rcall	.-2518   	; 0x1752c <assign_value>
   17f02:	67 2b       	or	r22, r23
   17f04:	68 2b       	or	r22, r24
   17f06:	69 2b       	or	r22, r25
   17f08:	19 f4       	brne	.+6      	; 0x17f10 <Read_Config+0x8a4>
   17f0a:	ff ef       	ldi	r31, 0xFF	; 255
   17f0c:	af 1a       	sub	r10, r31
   17f0e:	bf 0a       	sbc	r11, r31
   17f10:	cf 57       	subi	r28, 0x7F	; 127
   17f12:	df 4f       	sbci	r29, 0xFF	; 255
   17f14:	88 81       	ld	r24, Y
   17f16:	99 81       	ldd	r25, Y+1	; 0x01
   17f18:	c1 58       	subi	r28, 0x81	; 129
   17f1a:	d0 40       	sbci	r29, 0x00	; 0
   17f1c:	d2 01       	movw	r26, r4
   17f1e:	d4 96       	adiw	r26, 0x34	; 52
   17f20:	9c 93       	st	X, r25
   17f22:	8e 93       	st	-X, r24
   17f24:	d3 97       	sbiw	r26, 0x33	; 51
   17f26:	4e cc       	rjmp	.-1892   	; 0x177c4 <Read_Config+0x158>
   17f28:	69 ec       	ldi	r22, 0xC9	; 201
   17f2a:	74 e1       	ldi	r23, 0x14	; 20
   17f2c:	c6 01       	movw	r24, r12
   17f2e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17f32:	00 97       	sbiw	r24, 0x00	; 0
   17f34:	09 f1       	breq	.+66     	; 0x17f78 <Read_Config+0x90c>
   17f36:	fe 01       	movw	r30, r28
   17f38:	ef 57       	subi	r30, 0x7F	; 127
   17f3a:	ff 4f       	sbci	r31, 0xFF	; 255
   17f3c:	7f 01       	movw	r14, r30
   17f3e:	0f ef       	ldi	r16, 0xFF	; 255
   17f40:	1f ef       	ldi	r17, 0xFF	; 255
   17f42:	20 e0       	ldi	r18, 0x00	; 0
   17f44:	30 e0       	ldi	r19, 0x00	; 0
   17f46:	40 e0       	ldi	r20, 0x00	; 0
   17f48:	50 e0       	ldi	r21, 0x00	; 0
   17f4a:	ba 01       	movw	r22, r20
   17f4c:	8c 0d       	add	r24, r12
   17f4e:	9d 1d       	adc	r25, r13
   17f50:	ed da       	rcall	.-2598   	; 0x1752c <assign_value>
   17f52:	67 2b       	or	r22, r23
   17f54:	68 2b       	or	r22, r24
   17f56:	69 2b       	or	r22, r25
   17f58:	19 f4       	brne	.+6      	; 0x17f60 <Read_Config+0x8f4>
   17f5a:	ff ef       	ldi	r31, 0xFF	; 255
   17f5c:	af 1a       	sub	r10, r31
   17f5e:	bf 0a       	sbc	r11, r31
   17f60:	cf 57       	subi	r28, 0x7F	; 127
   17f62:	df 4f       	sbci	r29, 0xFF	; 255
   17f64:	88 81       	ld	r24, Y
   17f66:	99 81       	ldd	r25, Y+1	; 0x01
   17f68:	c1 58       	subi	r28, 0x81	; 129
   17f6a:	d0 40       	sbci	r29, 0x00	; 0
   17f6c:	d2 01       	movw	r26, r4
   17f6e:	d6 96       	adiw	r26, 0x36	; 54
   17f70:	9c 93       	st	X, r25
   17f72:	8e 93       	st	-X, r24
   17f74:	d5 97       	sbiw	r26, 0x35	; 53
   17f76:	26 cc       	rjmp	.-1972   	; 0x177c4 <Read_Config+0x158>
   17f78:	61 ee       	ldi	r22, 0xE1	; 225
   17f7a:	74 e1       	ldi	r23, 0x14	; 20
   17f7c:	c6 01       	movw	r24, r12
   17f7e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17f82:	00 97       	sbiw	r24, 0x00	; 0
   17f84:	09 f1       	breq	.+66     	; 0x17fc8 <Read_Config+0x95c>
   17f86:	fe 01       	movw	r30, r28
   17f88:	ef 57       	subi	r30, 0x7F	; 127
   17f8a:	ff 4f       	sbci	r31, 0xFF	; 255
   17f8c:	7f 01       	movw	r14, r30
   17f8e:	0f ef       	ldi	r16, 0xFF	; 255
   17f90:	1f ef       	ldi	r17, 0xFF	; 255
   17f92:	20 e0       	ldi	r18, 0x00	; 0
   17f94:	30 e0       	ldi	r19, 0x00	; 0
   17f96:	40 e0       	ldi	r20, 0x00	; 0
   17f98:	50 e0       	ldi	r21, 0x00	; 0
   17f9a:	ba 01       	movw	r22, r20
   17f9c:	8c 0d       	add	r24, r12
   17f9e:	9d 1d       	adc	r25, r13
   17fa0:	c5 da       	rcall	.-2678   	; 0x1752c <assign_value>
   17fa2:	67 2b       	or	r22, r23
   17fa4:	68 2b       	or	r22, r24
   17fa6:	69 2b       	or	r22, r25
   17fa8:	19 f4       	brne	.+6      	; 0x17fb0 <Read_Config+0x944>
   17faa:	ff ef       	ldi	r31, 0xFF	; 255
   17fac:	af 1a       	sub	r10, r31
   17fae:	bf 0a       	sbc	r11, r31
   17fb0:	cf 57       	subi	r28, 0x7F	; 127
   17fb2:	df 4f       	sbci	r29, 0xFF	; 255
   17fb4:	88 81       	ld	r24, Y
   17fb6:	99 81       	ldd	r25, Y+1	; 0x01
   17fb8:	c1 58       	subi	r28, 0x81	; 129
   17fba:	d0 40       	sbci	r29, 0x00	; 0
   17fbc:	d2 01       	movw	r26, r4
   17fbe:	d8 96       	adiw	r26, 0x38	; 56
   17fc0:	9c 93       	st	X, r25
   17fc2:	8e 93       	st	-X, r24
   17fc4:	d7 97       	sbiw	r26, 0x37	; 55
   17fc6:	fe cb       	rjmp	.-2052   	; 0x177c4 <Read_Config+0x158>
   17fc8:	64 ef       	ldi	r22, 0xF4	; 244
   17fca:	74 e1       	ldi	r23, 0x14	; 20
   17fcc:	c6 01       	movw	r24, r12
   17fce:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   17fd2:	00 97       	sbiw	r24, 0x00	; 0
   17fd4:	09 f1       	breq	.+66     	; 0x18018 <Read_Config+0x9ac>
   17fd6:	fe 01       	movw	r30, r28
   17fd8:	ef 57       	subi	r30, 0x7F	; 127
   17fda:	ff 4f       	sbci	r31, 0xFF	; 255
   17fdc:	7f 01       	movw	r14, r30
   17fde:	0f ef       	ldi	r16, 0xFF	; 255
   17fe0:	1f ef       	ldi	r17, 0xFF	; 255
   17fe2:	20 e0       	ldi	r18, 0x00	; 0
   17fe4:	30 e0       	ldi	r19, 0x00	; 0
   17fe6:	40 e0       	ldi	r20, 0x00	; 0
   17fe8:	50 e0       	ldi	r21, 0x00	; 0
   17fea:	ba 01       	movw	r22, r20
   17fec:	8c 0d       	add	r24, r12
   17fee:	9d 1d       	adc	r25, r13
   17ff0:	9d da       	rcall	.-2758   	; 0x1752c <assign_value>
   17ff2:	67 2b       	or	r22, r23
   17ff4:	68 2b       	or	r22, r24
   17ff6:	69 2b       	or	r22, r25
   17ff8:	19 f4       	brne	.+6      	; 0x18000 <Read_Config+0x994>
   17ffa:	ff ef       	ldi	r31, 0xFF	; 255
   17ffc:	af 1a       	sub	r10, r31
   17ffe:	bf 0a       	sbc	r11, r31
   18000:	cf 57       	subi	r28, 0x7F	; 127
   18002:	df 4f       	sbci	r29, 0xFF	; 255
   18004:	88 81       	ld	r24, Y
   18006:	99 81       	ldd	r25, Y+1	; 0x01
   18008:	c1 58       	subi	r28, 0x81	; 129
   1800a:	d0 40       	sbci	r29, 0x00	; 0
   1800c:	d2 01       	movw	r26, r4
   1800e:	da 96       	adiw	r26, 0x3a	; 58
   18010:	9c 93       	st	X, r25
   18012:	8e 93       	st	-X, r24
   18014:	d9 97       	sbiw	r26, 0x39	; 57
   18016:	d6 cb       	rjmp	.-2132   	; 0x177c4 <Read_Config+0x158>
   18018:	60 e0       	ldi	r22, 0x00	; 0
   1801a:	75 e1       	ldi	r23, 0x15	; 21
   1801c:	c6 01       	movw	r24, r12
   1801e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18022:	00 97       	sbiw	r24, 0x00	; 0
   18024:	f1 f0       	breq	.+60     	; 0x18062 <Read_Config+0x9f6>
   18026:	fe 01       	movw	r30, r28
   18028:	ef 57       	subi	r30, 0x7F	; 127
   1802a:	ff 4f       	sbci	r31, 0xFF	; 255
   1802c:	7f 01       	movw	r14, r30
   1802e:	0f ef       	ldi	r16, 0xFF	; 255
   18030:	10 e0       	ldi	r17, 0x00	; 0
   18032:	20 e0       	ldi	r18, 0x00	; 0
   18034:	30 e0       	ldi	r19, 0x00	; 0
   18036:	40 e0       	ldi	r20, 0x00	; 0
   18038:	50 e0       	ldi	r21, 0x00	; 0
   1803a:	ba 01       	movw	r22, r20
   1803c:	8c 0d       	add	r24, r12
   1803e:	9d 1d       	adc	r25, r13
   18040:	75 da       	rcall	.-2838   	; 0x1752c <assign_value>
   18042:	67 2b       	or	r22, r23
   18044:	68 2b       	or	r22, r24
   18046:	69 2b       	or	r22, r25
   18048:	19 f4       	brne	.+6      	; 0x18050 <Read_Config+0x9e4>
   1804a:	ff ef       	ldi	r31, 0xFF	; 255
   1804c:	af 1a       	sub	r10, r31
   1804e:	bf 0a       	sbc	r11, r31
   18050:	cf 57       	subi	r28, 0x7F	; 127
   18052:	df 4f       	sbci	r29, 0xFF	; 255
   18054:	88 81       	ld	r24, Y
   18056:	c1 58       	subi	r28, 0x81	; 129
   18058:	d0 40       	sbci	r29, 0x00	; 0
   1805a:	d2 01       	movw	r26, r4
   1805c:	db 96       	adiw	r26, 0x3b	; 59
   1805e:	8c 93       	st	X, r24
   18060:	b1 cb       	rjmp	.-2206   	; 0x177c4 <Read_Config+0x158>
   18062:	63 e1       	ldi	r22, 0x13	; 19
   18064:	75 e1       	ldi	r23, 0x15	; 21
   18066:	c6 01       	movw	r24, r12
   18068:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   1806c:	00 97       	sbiw	r24, 0x00	; 0
   1806e:	f1 f0       	breq	.+60     	; 0x180ac <Read_Config+0xa40>
   18070:	fe 01       	movw	r30, r28
   18072:	ef 57       	subi	r30, 0x7F	; 127
   18074:	ff 4f       	sbci	r31, 0xFF	; 255
   18076:	7f 01       	movw	r14, r30
   18078:	0f ef       	ldi	r16, 0xFF	; 255
   1807a:	10 e0       	ldi	r17, 0x00	; 0
   1807c:	20 e0       	ldi	r18, 0x00	; 0
   1807e:	30 e0       	ldi	r19, 0x00	; 0
   18080:	40 e0       	ldi	r20, 0x00	; 0
   18082:	50 e0       	ldi	r21, 0x00	; 0
   18084:	ba 01       	movw	r22, r20
   18086:	8c 0d       	add	r24, r12
   18088:	9d 1d       	adc	r25, r13
   1808a:	50 da       	rcall	.-2912   	; 0x1752c <assign_value>
   1808c:	67 2b       	or	r22, r23
   1808e:	68 2b       	or	r22, r24
   18090:	69 2b       	or	r22, r25
   18092:	19 f4       	brne	.+6      	; 0x1809a <Read_Config+0xa2e>
   18094:	ff ef       	ldi	r31, 0xFF	; 255
   18096:	af 1a       	sub	r10, r31
   18098:	bf 0a       	sbc	r11, r31
   1809a:	cf 57       	subi	r28, 0x7F	; 127
   1809c:	df 4f       	sbci	r29, 0xFF	; 255
   1809e:	88 81       	ld	r24, Y
   180a0:	c1 58       	subi	r28, 0x81	; 129
   180a2:	d0 40       	sbci	r29, 0x00	; 0
   180a4:	d2 01       	movw	r26, r4
   180a6:	dc 96       	adiw	r26, 0x3c	; 60
   180a8:	8c 93       	st	X, r24
   180aa:	8c cb       	rjmp	.-2280   	; 0x177c4 <Read_Config+0x158>
   180ac:	61 e2       	ldi	r22, 0x21	; 33
   180ae:	75 e1       	ldi	r23, 0x15	; 21
   180b0:	c6 01       	movw	r24, r12
   180b2:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   180b6:	00 97       	sbiw	r24, 0x00	; 0
   180b8:	f1 f0       	breq	.+60     	; 0x180f6 <Read_Config+0xa8a>
   180ba:	fe 01       	movw	r30, r28
   180bc:	ef 57       	subi	r30, 0x7F	; 127
   180be:	ff 4f       	sbci	r31, 0xFF	; 255
   180c0:	7f 01       	movw	r14, r30
   180c2:	0f ef       	ldi	r16, 0xFF	; 255
   180c4:	10 e0       	ldi	r17, 0x00	; 0
   180c6:	20 e0       	ldi	r18, 0x00	; 0
   180c8:	30 e0       	ldi	r19, 0x00	; 0
   180ca:	40 e0       	ldi	r20, 0x00	; 0
   180cc:	50 e0       	ldi	r21, 0x00	; 0
   180ce:	ba 01       	movw	r22, r20
   180d0:	8c 0d       	add	r24, r12
   180d2:	9d 1d       	adc	r25, r13
   180d4:	2b da       	rcall	.-2986   	; 0x1752c <assign_value>
   180d6:	67 2b       	or	r22, r23
   180d8:	68 2b       	or	r22, r24
   180da:	69 2b       	or	r22, r25
   180dc:	19 f4       	brne	.+6      	; 0x180e4 <Read_Config+0xa78>
   180de:	ff ef       	ldi	r31, 0xFF	; 255
   180e0:	af 1a       	sub	r10, r31
   180e2:	bf 0a       	sbc	r11, r31
   180e4:	cf 57       	subi	r28, 0x7F	; 127
   180e6:	df 4f       	sbci	r29, 0xFF	; 255
   180e8:	88 81       	ld	r24, Y
   180ea:	c1 58       	subi	r28, 0x81	; 129
   180ec:	d0 40       	sbci	r29, 0x00	; 0
   180ee:	d2 01       	movw	r26, r4
   180f0:	dd 96       	adiw	r26, 0x3d	; 61
   180f2:	8c 93       	st	X, r24
   180f4:	67 cb       	rjmp	.-2354   	; 0x177c4 <Read_Config+0x158>
   180f6:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   180fa:	8f 93       	push	r24
   180fc:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   18100:	8f 93       	push	r24
   18102:	df 92       	push	r13
   18104:	cf 92       	push	r12
   18106:	8e e1       	ldi	r24, 0x1E	; 30
   18108:	9f e2       	ldi	r25, 0x2F	; 47
   1810a:	96 cc       	rjmp	.-1748   	; 0x17a38 <Read_Config+0x3cc>
   1810c:	63 e3       	ldi	r22, 0x33	; 51
   1810e:	75 e1       	ldi	r23, 0x15	; 21
   18110:	c6 01       	movw	r24, r12
   18112:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18116:	00 97       	sbiw	r24, 0x00	; 0
   18118:	f9 f0       	breq	.+62     	; 0x18158 <Read_Config+0xaec>
   1811a:	9e 01       	movw	r18, r28
   1811c:	2f 57       	subi	r18, 0x7F	; 127
   1811e:	3f 4f       	sbci	r19, 0xFF	; 255
   18120:	79 01       	movw	r14, r18
   18122:	0f ef       	ldi	r16, 0xFF	; 255
   18124:	1f ef       	ldi	r17, 0xFF	; 255
   18126:	98 01       	movw	r18, r16
   18128:	40 e0       	ldi	r20, 0x00	; 0
   1812a:	50 e0       	ldi	r21, 0x00	; 0
   1812c:	ba 01       	movw	r22, r20
   1812e:	8c 0d       	add	r24, r12
   18130:	9d 1d       	adc	r25, r13
   18132:	fc d9       	rcall	.-3080   	; 0x1752c <assign_value>
   18134:	67 2b       	or	r22, r23
   18136:	68 2b       	or	r22, r24
   18138:	69 2b       	or	r22, r25
   1813a:	19 f4       	brne	.+6      	; 0x18142 <Read_Config+0xad6>
   1813c:	3f ef       	ldi	r19, 0xFF	; 255
   1813e:	a3 1a       	sub	r10, r19
   18140:	b3 0a       	sbc	r11, r19
   18142:	cf 57       	subi	r28, 0x7F	; 127
   18144:	df 4f       	sbci	r29, 0xFF	; 255
   18146:	88 81       	ld	r24, Y
   18148:	99 81       	ldd	r25, Y+1	; 0x01
   1814a:	aa 81       	ldd	r26, Y+2	; 0x02
   1814c:	bb 81       	ldd	r27, Y+3	; 0x03
   1814e:	c1 58       	subi	r28, 0x81	; 129
   18150:	d0 40       	sbci	r29, 0x00	; 0
   18152:	f2 01       	movw	r30, r4
   18154:	fe 96       	adiw	r30, 0x3e	; 62
   18156:	73 c0       	rjmp	.+230    	; 0x1823e <Read_Config+0xbd2>
   18158:	60 e4       	ldi	r22, 0x40	; 64
   1815a:	75 e1       	ldi	r23, 0x15	; 21
   1815c:	c6 01       	movw	r24, r12
   1815e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18162:	00 97       	sbiw	r24, 0x00	; 0
   18164:	f1 f0       	breq	.+60     	; 0x181a2 <Read_Config+0xb36>
   18166:	de 01       	movw	r26, r28
   18168:	af 57       	subi	r26, 0x7F	; 127
   1816a:	bf 4f       	sbci	r27, 0xFF	; 255
   1816c:	7d 01       	movw	r14, r26
   1816e:	0f ef       	ldi	r16, 0xFF	; 255
   18170:	10 e0       	ldi	r17, 0x00	; 0
   18172:	20 e0       	ldi	r18, 0x00	; 0
   18174:	30 e0       	ldi	r19, 0x00	; 0
   18176:	40 e0       	ldi	r20, 0x00	; 0
   18178:	50 e0       	ldi	r21, 0x00	; 0
   1817a:	ba 01       	movw	r22, r20
   1817c:	8c 0d       	add	r24, r12
   1817e:	9d 1d       	adc	r25, r13
   18180:	d5 d9       	rcall	.-3158   	; 0x1752c <assign_value>
   18182:	67 2b       	or	r22, r23
   18184:	68 2b       	or	r22, r24
   18186:	69 2b       	or	r22, r25
   18188:	19 f4       	brne	.+6      	; 0x18190 <Read_Config+0xb24>
   1818a:	bf ef       	ldi	r27, 0xFF	; 255
   1818c:	ab 1a       	sub	r10, r27
   1818e:	bb 0a       	sbc	r11, r27
   18190:	cf 57       	subi	r28, 0x7F	; 127
   18192:	df 4f       	sbci	r29, 0xFF	; 255
   18194:	88 81       	ld	r24, Y
   18196:	c1 58       	subi	r28, 0x81	; 129
   18198:	d0 40       	sbci	r29, 0x00	; 0
   1819a:	f2 01       	movw	r30, r4
   1819c:	ee 5b       	subi	r30, 0xBE	; 190
   1819e:	ff 4f       	sbci	r31, 0xFF	; 255
   181a0:	18 c1       	rjmp	.+560    	; 0x183d2 <Read_Config+0xd66>
   181a2:	69 e4       	ldi	r22, 0x49	; 73
   181a4:	75 e1       	ldi	r23, 0x15	; 21
   181a6:	c6 01       	movw	r24, r12
   181a8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   181ac:	00 97       	sbiw	r24, 0x00	; 0
   181ae:	09 f1       	breq	.+66     	; 0x181f2 <Read_Config+0xb86>
   181b0:	fe 01       	movw	r30, r28
   181b2:	ef 57       	subi	r30, 0x7F	; 127
   181b4:	ff 4f       	sbci	r31, 0xFF	; 255
   181b6:	7f 01       	movw	r14, r30
   181b8:	0f ef       	ldi	r16, 0xFF	; 255
   181ba:	1f ef       	ldi	r17, 0xFF	; 255
   181bc:	20 e0       	ldi	r18, 0x00	; 0
   181be:	30 e0       	ldi	r19, 0x00	; 0
   181c0:	40 e0       	ldi	r20, 0x00	; 0
   181c2:	50 e0       	ldi	r21, 0x00	; 0
   181c4:	ba 01       	movw	r22, r20
   181c6:	8c 0d       	add	r24, r12
   181c8:	9d 1d       	adc	r25, r13
   181ca:	b0 d9       	rcall	.-3232   	; 0x1752c <assign_value>
   181cc:	67 2b       	or	r22, r23
   181ce:	68 2b       	or	r22, r24
   181d0:	69 2b       	or	r22, r25
   181d2:	19 f4       	brne	.+6      	; 0x181da <Read_Config+0xb6e>
   181d4:	ff ef       	ldi	r31, 0xFF	; 255
   181d6:	af 1a       	sub	r10, r31
   181d8:	bf 0a       	sbc	r11, r31
   181da:	cf 57       	subi	r28, 0x7F	; 127
   181dc:	df 4f       	sbci	r29, 0xFF	; 255
   181de:	88 81       	ld	r24, Y
   181e0:	99 81       	ldd	r25, Y+1	; 0x01
   181e2:	c1 58       	subi	r28, 0x81	; 129
   181e4:	d0 40       	sbci	r29, 0x00	; 0
   181e6:	f2 01       	movw	r30, r4
   181e8:	ed 5b       	subi	r30, 0xBD	; 189
   181ea:	ff 4f       	sbci	r31, 0xFF	; 255
   181ec:	91 83       	std	Z+1, r25	; 0x01
   181ee:	80 83       	st	Z, r24
   181f0:	e9 ca       	rjmp	.-2606   	; 0x177c4 <Read_Config+0x158>
   181f2:	64 e5       	ldi	r22, 0x54	; 84
   181f4:	75 e1       	ldi	r23, 0x15	; 21
   181f6:	c6 01       	movw	r24, r12
   181f8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   181fc:	00 97       	sbiw	r24, 0x00	; 0
   181fe:	21 f1       	breq	.+72     	; 0x18248 <Read_Config+0xbdc>
   18200:	9e 01       	movw	r18, r28
   18202:	2f 57       	subi	r18, 0x7F	; 127
   18204:	3f 4f       	sbci	r19, 0xFF	; 255
   18206:	79 01       	movw	r14, r18
   18208:	0f ef       	ldi	r16, 0xFF	; 255
   1820a:	1f ef       	ldi	r17, 0xFF	; 255
   1820c:	98 01       	movw	r18, r16
   1820e:	40 e0       	ldi	r20, 0x00	; 0
   18210:	50 e0       	ldi	r21, 0x00	; 0
   18212:	ba 01       	movw	r22, r20
   18214:	8c 0d       	add	r24, r12
   18216:	9d 1d       	adc	r25, r13
   18218:	89 d9       	rcall	.-3310   	; 0x1752c <assign_value>
   1821a:	67 2b       	or	r22, r23
   1821c:	68 2b       	or	r22, r24
   1821e:	69 2b       	or	r22, r25
   18220:	19 f4       	brne	.+6      	; 0x18228 <Read_Config+0xbbc>
   18222:	3f ef       	ldi	r19, 0xFF	; 255
   18224:	a3 1a       	sub	r10, r19
   18226:	b3 0a       	sbc	r11, r19
   18228:	cf 57       	subi	r28, 0x7F	; 127
   1822a:	df 4f       	sbci	r29, 0xFF	; 255
   1822c:	88 81       	ld	r24, Y
   1822e:	99 81       	ldd	r25, Y+1	; 0x01
   18230:	aa 81       	ldd	r26, Y+2	; 0x02
   18232:	bb 81       	ldd	r27, Y+3	; 0x03
   18234:	c1 58       	subi	r28, 0x81	; 129
   18236:	d0 40       	sbci	r29, 0x00	; 0
   18238:	f2 01       	movw	r30, r4
   1823a:	eb 5b       	subi	r30, 0xBB	; 187
   1823c:	ff 4f       	sbci	r31, 0xFF	; 255
   1823e:	80 83       	st	Z, r24
   18240:	91 83       	std	Z+1, r25	; 0x01
   18242:	a2 83       	std	Z+2, r26	; 0x02
   18244:	b3 83       	std	Z+3, r27	; 0x03
   18246:	be ca       	rjmp	.-2692   	; 0x177c4 <Read_Config+0x158>
   18248:	68 e0       	ldi	r22, 0x08	; 8
   1824a:	75 e1       	ldi	r23, 0x15	; 21
   1824c:	c6 01       	movw	r24, r12
   1824e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18252:	00 97       	sbiw	r24, 0x00	; 0
   18254:	f1 f0       	breq	.+60     	; 0x18292 <Read_Config+0xc26>
   18256:	de 01       	movw	r26, r28
   18258:	af 57       	subi	r26, 0x7F	; 127
   1825a:	bf 4f       	sbci	r27, 0xFF	; 255
   1825c:	7d 01       	movw	r14, r26
   1825e:	0f ef       	ldi	r16, 0xFF	; 255
   18260:	10 e0       	ldi	r17, 0x00	; 0
   18262:	20 e0       	ldi	r18, 0x00	; 0
   18264:	30 e0       	ldi	r19, 0x00	; 0
   18266:	40 e0       	ldi	r20, 0x00	; 0
   18268:	50 e0       	ldi	r21, 0x00	; 0
   1826a:	ba 01       	movw	r22, r20
   1826c:	8c 0d       	add	r24, r12
   1826e:	9d 1d       	adc	r25, r13
   18270:	5d d9       	rcall	.-3398   	; 0x1752c <assign_value>
   18272:	67 2b       	or	r22, r23
   18274:	68 2b       	or	r22, r24
   18276:	69 2b       	or	r22, r25
   18278:	19 f4       	brne	.+6      	; 0x18280 <Read_Config+0xc14>
   1827a:	bf ef       	ldi	r27, 0xFF	; 255
   1827c:	ab 1a       	sub	r10, r27
   1827e:	bb 0a       	sbc	r11, r27
   18280:	cf 57       	subi	r28, 0x7F	; 127
   18282:	df 4f       	sbci	r29, 0xFF	; 255
   18284:	88 81       	ld	r24, Y
   18286:	c1 58       	subi	r28, 0x81	; 129
   18288:	d0 40       	sbci	r29, 0x00	; 0
   1828a:	f2 01       	movw	r30, r4
   1828c:	e7 5b       	subi	r30, 0xB7	; 183
   1828e:	ff 4f       	sbci	r31, 0xFF	; 255
   18290:	a0 c0       	rjmp	.+320    	; 0x183d2 <Read_Config+0xd66>
   18292:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   18296:	8f 93       	push	r24
   18298:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   1829c:	8f 93       	push	r24
   1829e:	df 92       	push	r13
   182a0:	cf 92       	push	r12
   182a2:	80 ef       	ldi	r24, 0xF0	; 240
   182a4:	9e e2       	ldi	r25, 0x2E	; 46
   182a6:	1f 92       	push	r1
   182a8:	9f 93       	push	r25
   182aa:	8f 93       	push	r24
   182ac:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   182b0:	ef ef       	ldi	r30, 0xFF	; 255
   182b2:	ae 1a       	sub	r10, r30
   182b4:	be 0a       	sbc	r11, r30
   182b6:	07 c2       	rjmp	.+1038   	; 0x186c6 <Read_Config+0x105a>
   182b8:	61 e4       	ldi	r22, 0x41	; 65
   182ba:	74 e1       	ldi	r23, 0x14	; 20
   182bc:	c6 01       	movw	r24, r12
   182be:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   182c2:	89 2b       	or	r24, r25
   182c4:	39 f0       	breq	.+14     	; 0x182d4 <Read_Config+0xc68>
   182c6:	8a e0       	ldi	r24, 0x0A	; 10
   182c8:	90 e0       	ldi	r25, 0x00	; 0
   182ca:	00 d9       	rcall	.-3584   	; 0x174cc <push_state>
   182cc:	2b e0       	ldi	r18, 0x0B	; 11
   182ce:	82 2e       	mov	r8, r18
   182d0:	91 2c       	mov	r9, r1
   182d2:	78 ca       	rjmp	.-2832   	; 0x177c4 <Read_Config+0x158>
   182d4:	6a e3       	ldi	r22, 0x3A	; 58
   182d6:	74 e1       	ldi	r23, 0x14	; 20
   182d8:	c6 01       	movw	r24, r12
   182da:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   182de:	89 2b       	or	r24, r25
   182e0:	39 f0       	breq	.+14     	; 0x182f0 <Read_Config+0xc84>
   182e2:	8a e0       	ldi	r24, 0x0A	; 10
   182e4:	90 e0       	ldi	r25, 0x00	; 0
   182e6:	f2 d8       	rcall	.-3612   	; 0x174cc <push_state>
   182e8:	9c e0       	ldi	r25, 0x0C	; 12
   182ea:	89 2e       	mov	r8, r25
   182ec:	91 2c       	mov	r9, r1
   182ee:	6a ca       	rjmp	.-2860   	; 0x177c4 <Read_Config+0x158>
   182f0:	65 e6       	ldi	r22, 0x65	; 101
   182f2:	75 e1       	ldi	r23, 0x15	; 21
   182f4:	c6 01       	movw	r24, r12
   182f6:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   182fa:	89 2b       	or	r24, r25
   182fc:	39 f0       	breq	.+14     	; 0x1830c <Read_Config+0xca0>
   182fe:	8a e0       	ldi	r24, 0x0A	; 10
   18300:	90 e0       	ldi	r25, 0x00	; 0
   18302:	e4 d8       	rcall	.-3640   	; 0x174cc <push_state>
   18304:	8d e0       	ldi	r24, 0x0D	; 13
   18306:	88 2e       	mov	r8, r24
   18308:	91 2c       	mov	r9, r1
   1830a:	5c ca       	rjmp	.-2888   	; 0x177c4 <Read_Config+0x158>
   1830c:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   18310:	8f 93       	push	r24
   18312:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   18316:	8f 93       	push	r24
   18318:	df 92       	push	r13
   1831a:	cf 92       	push	r12
   1831c:	1f 92       	push	r1
   1831e:	c7 56       	subi	r28, 0x67	; 103
   18320:	df 4f       	sbci	r29, 0xFF	; 255
   18322:	38 81       	ld	r19, Y
   18324:	c9 59       	subi	r28, 0x99	; 153
   18326:	d0 40       	sbci	r29, 0x00	; 0
   18328:	3f 93       	push	r19
   1832a:	c8 56       	subi	r28, 0x68	; 104
   1832c:	df 4f       	sbci	r29, 0xFF	; 255
   1832e:	48 81       	ld	r20, Y
   18330:	c8 59       	subi	r28, 0x98	; 152
   18332:	d0 40       	sbci	r29, 0x00	; 0
   18334:	c2 c1       	rjmp	.+900    	; 0x186ba <Read_Config+0x104e>
   18336:	6e e6       	ldi	r22, 0x6E	; 110
   18338:	75 e1       	ldi	r23, 0x15	; 21
   1833a:	c6 01       	movw	r24, r12
   1833c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18340:	00 97       	sbiw	r24, 0x00	; 0
   18342:	d1 f0       	breq	.+52     	; 0x18378 <Read_Config+0xd0c>
   18344:	20 91 c5 19 	lds	r18, 0x19C5	; 0x8019c5 <lines+0x1>
   18348:	2f 93       	push	r18
   1834a:	20 91 c4 19 	lds	r18, 0x19C4	; 0x8019c4 <lines>
   1834e:	2f 93       	push	r18
   18350:	c8 0e       	add	r12, r24
   18352:	d9 1e       	adc	r13, r25
   18354:	df 92       	push	r13
   18356:	cf 92       	push	r12
   18358:	1f 92       	push	r1
   1835a:	ca 56       	subi	r28, 0x6A	; 106
   1835c:	df 4f       	sbci	r29, 0xFF	; 255
   1835e:	b8 81       	ld	r27, Y
   18360:	c6 59       	subi	r28, 0x96	; 150
   18362:	d0 40       	sbci	r29, 0x00	; 0
   18364:	bf 93       	push	r27
   18366:	cb 56       	subi	r28, 0x6B	; 107
   18368:	df 4f       	sbci	r29, 0xFF	; 255
   1836a:	e8 81       	ld	r30, Y
   1836c:	c5 59       	subi	r28, 0x95	; 149
   1836e:	d0 40       	sbci	r29, 0x00	; 0
   18370:	ef 93       	push	r30
   18372:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18376:	a7 c1       	rjmp	.+846    	; 0x186c6 <Read_Config+0x105a>
   18378:	62 e3       	ldi	r22, 0x32	; 50
   1837a:	74 e1       	ldi	r23, 0x14	; 20
   1837c:	c6 01       	movw	r24, r12
   1837e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18382:	00 97       	sbiw	r24, 0x00	; 0
   18384:	41 f1       	breq	.+80     	; 0x183d6 <Read_Config+0xd6a>
   18386:	de 01       	movw	r26, r28
   18388:	af 57       	subi	r26, 0x7F	; 127
   1838a:	bf 4f       	sbci	r27, 0xFF	; 255
   1838c:	7d 01       	movw	r14, r26
   1838e:	0e e0       	ldi	r16, 0x0E	; 14
   18390:	10 e0       	ldi	r17, 0x00	; 0
   18392:	20 e0       	ldi	r18, 0x00	; 0
   18394:	30 e0       	ldi	r19, 0x00	; 0
   18396:	40 e0       	ldi	r20, 0x00	; 0
   18398:	50 e0       	ldi	r21, 0x00	; 0
   1839a:	ba 01       	movw	r22, r20
   1839c:	8c 0d       	add	r24, r12
   1839e:	9d 1d       	adc	r25, r13
   183a0:	c5 d8       	rcall	.-3702   	; 0x1752c <assign_value>
   183a2:	67 2b       	or	r22, r23
   183a4:	68 2b       	or	r22, r24
   183a6:	69 2b       	or	r22, r25
   183a8:	29 f4       	brne	.+10     	; 0x183b4 <Read_Config+0xd48>
   183aa:	bf ef       	ldi	r27, 0xFF	; 255
   183ac:	ab 1a       	sub	r10, r27
   183ae:	bb 0a       	sbc	r11, r27
   183b0:	8f ef       	ldi	r24, 0xFF	; 255
   183b2:	05 c0       	rjmp	.+10     	; 0x183be <Read_Config+0xd52>
   183b4:	cf 57       	subi	r28, 0x7F	; 127
   183b6:	df 4f       	sbci	r29, 0xFF	; 255
   183b8:	88 81       	ld	r24, Y
   183ba:	c1 58       	subi	r28, 0x81	; 129
   183bc:	d0 40       	sbci	r29, 0x00	; 0
   183be:	97 e0       	ldi	r25, 0x07	; 7
   183c0:	96 9d       	mul	r25, r6
   183c2:	f0 01       	movw	r30, r0
   183c4:	97 9d       	mul	r25, r7
   183c6:	f0 0d       	add	r31, r0
   183c8:	11 24       	eor	r1, r1
   183ca:	e1 5e       	subi	r30, 0xE1	; 225
   183cc:	f0 4e       	sbci	r31, 0xE0	; 224
   183ce:	81 83       	std	Z+1, r24	; 0x01
   183d0:	f1 01       	movw	r30, r2
   183d2:	80 83       	st	Z, r24
   183d4:	f7 c9       	rjmp	.-3090   	; 0x177c4 <Read_Config+0x158>
   183d6:	6f e5       	ldi	r22, 0x5F	; 95
   183d8:	74 e1       	ldi	r23, 0x14	; 20
   183da:	c6 01       	movw	r24, r12
   183dc:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   183e0:	00 97       	sbiw	r24, 0x00	; 0
   183e2:	39 f1       	breq	.+78     	; 0x18432 <Read_Config+0xdc6>
   183e4:	9e 01       	movw	r18, r28
   183e6:	2f 57       	subi	r18, 0x7F	; 127
   183e8:	3f 4f       	sbci	r19, 0xFF	; 255
   183ea:	79 01       	movw	r14, r18
   183ec:	07 e0       	ldi	r16, 0x07	; 7
   183ee:	10 e0       	ldi	r17, 0x00	; 0
   183f0:	20 e0       	ldi	r18, 0x00	; 0
   183f2:	30 e0       	ldi	r19, 0x00	; 0
   183f4:	40 e0       	ldi	r20, 0x00	; 0
   183f6:	50 e0       	ldi	r21, 0x00	; 0
   183f8:	ba 01       	movw	r22, r20
   183fa:	8c 0d       	add	r24, r12
   183fc:	9d 1d       	adc	r25, r13
   183fe:	96 d8       	rcall	.-3796   	; 0x1752c <assign_value>
   18400:	67 2b       	or	r22, r23
   18402:	68 2b       	or	r22, r24
   18404:	69 2b       	or	r22, r25
   18406:	29 f4       	brne	.+10     	; 0x18412 <Read_Config+0xda6>
   18408:	3f ef       	ldi	r19, 0xFF	; 255
   1840a:	a3 1a       	sub	r10, r19
   1840c:	b3 0a       	sbc	r11, r19
   1840e:	8f ef       	ldi	r24, 0xFF	; 255
   18410:	05 c0       	rjmp	.+10     	; 0x1841c <Read_Config+0xdb0>
   18412:	cf 57       	subi	r28, 0x7F	; 127
   18414:	df 4f       	sbci	r29, 0xFF	; 255
   18416:	88 81       	ld	r24, Y
   18418:	c1 58       	subi	r28, 0x81	; 129
   1841a:	d0 40       	sbci	r29, 0x00	; 0
   1841c:	97 e0       	ldi	r25, 0x07	; 7
   1841e:	96 9d       	mul	r25, r6
   18420:	f0 01       	movw	r30, r0
   18422:	97 9d       	mul	r25, r7
   18424:	f0 0d       	add	r31, r0
   18426:	11 24       	eor	r1, r1
   18428:	e1 5e       	subi	r30, 0xE1	; 225
   1842a:	f0 4e       	sbci	r31, 0xE0	; 224
   1842c:	82 83       	std	Z+2, r24	; 0x02
   1842e:	d1 01       	movw	r26, r2
   18430:	bb cb       	rjmp	.-2186   	; 0x17ba8 <Read_Config+0x53c>
   18432:	63 e6       	ldi	r22, 0x63	; 99
   18434:	74 e1       	ldi	r23, 0x14	; 20
   18436:	c6 01       	movw	r24, r12
   18438:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   1843c:	00 97       	sbiw	r24, 0x00	; 0
   1843e:	b1 f0       	breq	.+44     	; 0x1846c <Read_Config+0xe00>
   18440:	8c 0d       	add	r24, r12
   18442:	9d 1d       	adc	r25, r13
   18444:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   18448:	fc 01       	movw	r30, r24
   1844a:	20 81       	ld	r18, Z
   1844c:	2d 33       	cpi	r18, 0x3D	; 61
   1844e:	19 f4       	brne	.+6      	; 0x18456 <Read_Config+0xdea>
   18450:	01 96       	adiw	r24, 0x01	; 1
   18452:	0e 94 b6 32 	call	0x656c	; 0x656c <skipspaces>
   18456:	40 e2       	ldi	r20, 0x20	; 32
   18458:	50 e0       	ldi	r21, 0x00	; 0
   1845a:	bc 01       	movw	r22, r24
   1845c:	c1 01       	movw	r24, r2
   1845e:	02 96       	adiw	r24, 0x02	; 2
   18460:	0e 94 59 32 	call	0x64b2	; 0x64b2 <strncpy>
   18464:	d1 01       	movw	r26, r2
   18466:	92 96       	adiw	r26, 0x22	; 34
   18468:	1c 92       	st	X, r1
   1846a:	ac c9       	rjmp	.-3240   	; 0x177c4 <Read_Config+0x158>
   1846c:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   18470:	8f 93       	push	r24
   18472:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   18476:	8f 93       	push	r24
   18478:	df 92       	push	r13
   1847a:	cf 92       	push	r12
   1847c:	1f 92       	push	r1
   1847e:	cd 56       	subi	r28, 0x6D	; 109
   18480:	df 4f       	sbci	r29, 0xFF	; 255
   18482:	b8 81       	ld	r27, Y
   18484:	c3 59       	subi	r28, 0x93	; 147
   18486:	d0 40       	sbci	r29, 0x00	; 0
   18488:	bf 93       	push	r27
   1848a:	ce 56       	subi	r28, 0x6E	; 110
   1848c:	df 4f       	sbci	r29, 0xFF	; 255
   1848e:	e8 81       	ld	r30, Y
   18490:	c2 59       	subi	r28, 0x92	; 146
   18492:	d0 40       	sbci	r29, 0x00	; 0
   18494:	f7 c0       	rjmp	.+494    	; 0x18684 <Read_Config+0x1018>
   18496:	68 e6       	ldi	r22, 0x68	; 104
   18498:	74 e1       	ldi	r23, 0x14	; 20
   1849a:	c6 01       	movw	r24, r12
   1849c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   184a0:	00 97       	sbiw	r24, 0x00	; 0
   184a2:	f9 f0       	breq	.+62     	; 0x184e2 <Read_Config+0xe76>
   184a4:	de 01       	movw	r26, r28
   184a6:	af 57       	subi	r26, 0x7F	; 127
   184a8:	bf 4f       	sbci	r27, 0xFF	; 255
   184aa:	7d 01       	movw	r14, r26
   184ac:	0f ef       	ldi	r16, 0xFF	; 255
   184ae:	1f ef       	ldi	r17, 0xFF	; 255
   184b0:	20 e0       	ldi	r18, 0x00	; 0
   184b2:	30 e0       	ldi	r19, 0x00	; 0
   184b4:	40 e0       	ldi	r20, 0x00	; 0
   184b6:	50 e0       	ldi	r21, 0x00	; 0
   184b8:	ba 01       	movw	r22, r20
   184ba:	8c 0d       	add	r24, r12
   184bc:	9d 1d       	adc	r25, r13
   184be:	36 d8       	rcall	.-3988   	; 0x1752c <assign_value>
   184c0:	67 2b       	or	r22, r23
   184c2:	68 2b       	or	r22, r24
   184c4:	69 2b       	or	r22, r25
   184c6:	19 f4       	brne	.+6      	; 0x184ce <Read_Config+0xe62>
   184c8:	bf ef       	ldi	r27, 0xFF	; 255
   184ca:	ab 1a       	sub	r10, r27
   184cc:	bb 0a       	sbc	r11, r27
   184ce:	cf 57       	subi	r28, 0x7F	; 127
   184d0:	df 4f       	sbci	r29, 0xFF	; 255
   184d2:	88 81       	ld	r24, Y
   184d4:	99 81       	ldd	r25, Y+1	; 0x01
   184d6:	c1 58       	subi	r28, 0x81	; 129
   184d8:	d0 40       	sbci	r29, 0x00	; 0
   184da:	f1 01       	movw	r30, r2
   184dc:	94 a3       	std	Z+36, r25	; 0x24
   184de:	83 a3       	std	Z+35, r24	; 0x23
   184e0:	71 c9       	rjmp	.-3358   	; 0x177c4 <Read_Config+0x158>
   184e2:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   184e6:	8f 93       	push	r24
   184e8:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   184ec:	8f 93       	push	r24
   184ee:	df 92       	push	r13
   184f0:	cf 92       	push	r12
   184f2:	1f 92       	push	r1
   184f4:	c0 57       	subi	r28, 0x70	; 112
   184f6:	df 4f       	sbci	r29, 0xFF	; 255
   184f8:	f8 81       	ld	r31, Y
   184fa:	c0 59       	subi	r28, 0x90	; 144
   184fc:	d0 40       	sbci	r29, 0x00	; 0
   184fe:	ff 93       	push	r31
   18500:	c1 57       	subi	r28, 0x71	; 113
   18502:	df 4f       	sbci	r29, 0xFF	; 255
   18504:	28 81       	ld	r18, Y
   18506:	cf 58       	subi	r28, 0x8F	; 143
   18508:	d0 40       	sbci	r29, 0x00	; 0
   1850a:	2f 93       	push	r18
   1850c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18510:	3f ef       	ldi	r19, 0xFF	; 255
   18512:	a3 1a       	sub	r10, r19
   18514:	b3 0a       	sbc	r11, r19
   18516:	d7 c0       	rjmp	.+430    	; 0x186c6 <Read_Config+0x105a>
   18518:	64 e7       	ldi	r22, 0x74	; 116
   1851a:	75 e1       	ldi	r23, 0x15	; 21
   1851c:	c6 01       	movw	r24, r12
   1851e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18522:	00 97       	sbiw	r24, 0x00	; 0
   18524:	01 f1       	breq	.+64     	; 0x18566 <Read_Config+0xefa>
   18526:	de 01       	movw	r26, r28
   18528:	af 57       	subi	r26, 0x7F	; 127
   1852a:	bf 4f       	sbci	r27, 0xFF	; 255
   1852c:	7d 01       	movw	r14, r26
   1852e:	00 e0       	ldi	r16, 0x00	; 0
   18530:	10 e1       	ldi	r17, 0x10	; 16
   18532:	20 e0       	ldi	r18, 0x00	; 0
   18534:	30 e0       	ldi	r19, 0x00	; 0
   18536:	40 e0       	ldi	r20, 0x00	; 0
   18538:	50 e0       	ldi	r21, 0x00	; 0
   1853a:	ba 01       	movw	r22, r20
   1853c:	8c 0d       	add	r24, r12
   1853e:	9d 1d       	adc	r25, r13
   18540:	0e 94 96 ba 	call	0x1752c	; 0x1752c <assign_value>
   18544:	67 2b       	or	r22, r23
   18546:	68 2b       	or	r22, r24
   18548:	69 2b       	or	r22, r25
   1854a:	19 f4       	brne	.+6      	; 0x18552 <Read_Config+0xee6>
   1854c:	bf ef       	ldi	r27, 0xFF	; 255
   1854e:	ab 1a       	sub	r10, r27
   18550:	bb 0a       	sbc	r11, r27
   18552:	cf 57       	subi	r28, 0x7F	; 127
   18554:	df 4f       	sbci	r29, 0xFF	; 255
   18556:	88 81       	ld	r24, Y
   18558:	99 81       	ldd	r25, Y+1	; 0x01
   1855a:	c1 58       	subi	r28, 0x81	; 129
   1855c:	d0 40       	sbci	r29, 0x00	; 0
   1855e:	f1 01       	movw	r30, r2
   18560:	96 a3       	std	Z+38, r25	; 0x26
   18562:	85 a3       	std	Z+37, r24	; 0x25
   18564:	2f c9       	rjmp	.-3490   	; 0x177c4 <Read_Config+0x158>
   18566:	65 e8       	ldi	r22, 0x85	; 133
   18568:	75 e1       	ldi	r23, 0x15	; 21
   1856a:	c6 01       	movw	r24, r12
   1856c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18570:	00 97       	sbiw	r24, 0x00	; 0
   18572:	11 f1       	breq	.+68     	; 0x185b8 <Read_Config+0xf4c>
   18574:	9e 01       	movw	r18, r28
   18576:	2f 57       	subi	r18, 0x7F	; 127
   18578:	3f 4f       	sbci	r19, 0xFF	; 255
   1857a:	79 01       	movw	r14, r18
   1857c:	0f ef       	ldi	r16, 0xFF	; 255
   1857e:	10 e0       	ldi	r17, 0x00	; 0
   18580:	20 e0       	ldi	r18, 0x00	; 0
   18582:	30 e0       	ldi	r19, 0x00	; 0
   18584:	40 e0       	ldi	r20, 0x00	; 0
   18586:	50 e0       	ldi	r21, 0x00	; 0
   18588:	ba 01       	movw	r22, r20
   1858a:	8c 0d       	add	r24, r12
   1858c:	9d 1d       	adc	r25, r13
   1858e:	0e 94 96 ba 	call	0x1752c	; 0x1752c <assign_value>
   18592:	67 2b       	or	r22, r23
   18594:	68 2b       	or	r22, r24
   18596:	69 2b       	or	r22, r25
   18598:	19 f4       	brne	.+6      	; 0x185a0 <Read_Config+0xf34>
   1859a:	3f ef       	ldi	r19, 0xFF	; 255
   1859c:	a3 1a       	sub	r10, r19
   1859e:	b3 0a       	sbc	r11, r19
   185a0:	cf 57       	subi	r28, 0x7F	; 127
   185a2:	df 4f       	sbci	r29, 0xFF	; 255
   185a4:	88 81       	ld	r24, Y
   185a6:	99 81       	ldd	r25, Y+1	; 0x01
   185a8:	c1 58       	subi	r28, 0x81	; 129
   185aa:	d0 40       	sbci	r29, 0x00	; 0
   185ac:	d1 01       	movw	r26, r2
   185ae:	98 96       	adiw	r26, 0x28	; 40
   185b0:	9c 93       	st	X, r25
   185b2:	8e 93       	st	-X, r24
   185b4:	97 97       	sbiw	r26, 0x27	; 39
   185b6:	06 c9       	rjmp	.-3572   	; 0x177c4 <Read_Config+0x158>
   185b8:	67 e9       	ldi	r22, 0x97	; 151
   185ba:	75 e1       	ldi	r23, 0x15	; 21
   185bc:	c6 01       	movw	r24, r12
   185be:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   185c2:	00 97       	sbiw	r24, 0x00	; 0
   185c4:	11 f1       	breq	.+68     	; 0x1860a <Read_Config+0xf9e>
   185c6:	fe 01       	movw	r30, r28
   185c8:	ef 57       	subi	r30, 0x7F	; 127
   185ca:	ff 4f       	sbci	r31, 0xFF	; 255
   185cc:	7f 01       	movw	r14, r30
   185ce:	0f ef       	ldi	r16, 0xFF	; 255
   185d0:	10 e0       	ldi	r17, 0x00	; 0
   185d2:	20 e0       	ldi	r18, 0x00	; 0
   185d4:	30 e0       	ldi	r19, 0x00	; 0
   185d6:	40 e0       	ldi	r20, 0x00	; 0
   185d8:	50 e0       	ldi	r21, 0x00	; 0
   185da:	ba 01       	movw	r22, r20
   185dc:	8c 0d       	add	r24, r12
   185de:	9d 1d       	adc	r25, r13
   185e0:	0e 94 96 ba 	call	0x1752c	; 0x1752c <assign_value>
   185e4:	67 2b       	or	r22, r23
   185e6:	68 2b       	or	r22, r24
   185e8:	69 2b       	or	r22, r25
   185ea:	19 f4       	brne	.+6      	; 0x185f2 <Read_Config+0xf86>
   185ec:	ff ef       	ldi	r31, 0xFF	; 255
   185ee:	af 1a       	sub	r10, r31
   185f0:	bf 0a       	sbc	r11, r31
   185f2:	cf 57       	subi	r28, 0x7F	; 127
   185f4:	df 4f       	sbci	r29, 0xFF	; 255
   185f6:	88 81       	ld	r24, Y
   185f8:	99 81       	ldd	r25, Y+1	; 0x01
   185fa:	c1 58       	subi	r28, 0x81	; 129
   185fc:	d0 40       	sbci	r29, 0x00	; 0
   185fe:	d1 01       	movw	r26, r2
   18600:	9a 96       	adiw	r26, 0x2a	; 42
   18602:	9c 93       	st	X, r25
   18604:	8e 93       	st	-X, r24
   18606:	99 97       	sbiw	r26, 0x29	; 41
   18608:	dd c8       	rjmp	.-3654   	; 0x177c4 <Read_Config+0x158>
   1860a:	6d e9       	ldi	r22, 0x9D	; 157
   1860c:	75 e1       	ldi	r23, 0x15	; 21
   1860e:	c6 01       	movw	r24, r12
   18610:	0e 94 f6 33 	call	0x67ec	; 0x67ec <token>
   18614:	00 97       	sbiw	r24, 0x00	; 0
   18616:	11 f1       	breq	.+68     	; 0x1865c <Read_Config+0xff0>
   18618:	fe 01       	movw	r30, r28
   1861a:	ef 57       	subi	r30, 0x7F	; 127
   1861c:	ff 4f       	sbci	r31, 0xFF	; 255
   1861e:	7f 01       	movw	r14, r30
   18620:	0f ef       	ldi	r16, 0xFF	; 255
   18622:	10 e0       	ldi	r17, 0x00	; 0
   18624:	20 e0       	ldi	r18, 0x00	; 0
   18626:	30 e0       	ldi	r19, 0x00	; 0
   18628:	40 e0       	ldi	r20, 0x00	; 0
   1862a:	50 e0       	ldi	r21, 0x00	; 0
   1862c:	ba 01       	movw	r22, r20
   1862e:	8c 0d       	add	r24, r12
   18630:	9d 1d       	adc	r25, r13
   18632:	0e 94 96 ba 	call	0x1752c	; 0x1752c <assign_value>
   18636:	67 2b       	or	r22, r23
   18638:	68 2b       	or	r22, r24
   1863a:	69 2b       	or	r22, r25
   1863c:	19 f4       	brne	.+6      	; 0x18644 <Read_Config+0xfd8>
   1863e:	ff ef       	ldi	r31, 0xFF	; 255
   18640:	af 1a       	sub	r10, r31
   18642:	bf 0a       	sbc	r11, r31
   18644:	cf 57       	subi	r28, 0x7F	; 127
   18646:	df 4f       	sbci	r29, 0xFF	; 255
   18648:	88 81       	ld	r24, Y
   1864a:	99 81       	ldd	r25, Y+1	; 0x01
   1864c:	c1 58       	subi	r28, 0x81	; 129
   1864e:	d0 40       	sbci	r29, 0x00	; 0
   18650:	d1 01       	movw	r26, r2
   18652:	9c 96       	adiw	r26, 0x2c	; 44
   18654:	9c 93       	st	X, r25
   18656:	8e 93       	st	-X, r24
   18658:	9b 97       	sbiw	r26, 0x2b	; 43
   1865a:	b4 c8       	rjmp	.-3736   	; 0x177c4 <Read_Config+0x158>
   1865c:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   18660:	8f 93       	push	r24
   18662:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   18666:	8f 93       	push	r24
   18668:	df 92       	push	r13
   1866a:	cf 92       	push	r12
   1866c:	1f 92       	push	r1
   1866e:	c3 57       	subi	r28, 0x73	; 115
   18670:	df 4f       	sbci	r29, 0xFF	; 255
   18672:	b8 81       	ld	r27, Y
   18674:	cd 58       	subi	r28, 0x8D	; 141
   18676:	d0 40       	sbci	r29, 0x00	; 0
   18678:	bf 93       	push	r27
   1867a:	c4 57       	subi	r28, 0x74	; 116
   1867c:	df 4f       	sbci	r29, 0xFF	; 255
   1867e:	e8 81       	ld	r30, Y
   18680:	cc 58       	subi	r28, 0x8C	; 140
   18682:	d0 40       	sbci	r29, 0x00	; 0
   18684:	ef 93       	push	r30
   18686:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1868a:	ff ef       	ldi	r31, 0xFF	; 255
   1868c:	af 1a       	sub	r10, r31
   1868e:	bf 0a       	sbc	r11, r31
   18690:	1a c0       	rjmp	.+52     	; 0x186c6 <Read_Config+0x105a>
   18692:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   18696:	8f 93       	push	r24
   18698:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   1869c:	8f 93       	push	r24
   1869e:	df 92       	push	r13
   186a0:	cf 92       	push	r12
   186a2:	1f 92       	push	r1
   186a4:	c6 57       	subi	r28, 0x76	; 118
   186a6:	df 4f       	sbci	r29, 0xFF	; 255
   186a8:	38 81       	ld	r19, Y
   186aa:	ca 58       	subi	r28, 0x8A	; 138
   186ac:	d0 40       	sbci	r29, 0x00	; 0
   186ae:	3f 93       	push	r19
   186b0:	c7 57       	subi	r28, 0x77	; 119
   186b2:	df 4f       	sbci	r29, 0xFF	; 255
   186b4:	48 81       	ld	r20, Y
   186b6:	c9 58       	subi	r28, 0x89	; 137
   186b8:	d0 40       	sbci	r29, 0x00	; 0
   186ba:	4f 93       	push	r20
   186bc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   186c0:	8f ef       	ldi	r24, 0xFF	; 255
   186c2:	a8 1a       	sub	r10, r24
   186c4:	b8 0a       	sbc	r11, r24
   186c6:	0f b6       	in	r0, 0x3f	; 63
   186c8:	f8 94       	cli
   186ca:	de bf       	out	0x3e, r29	; 62
   186cc:	0f be       	out	0x3f, r0	; 63
   186ce:	cd bf       	out	0x3d, r28	; 61
   186d0:	79 c8       	rjmp	.-3854   	; 0x177c4 <Read_Config+0x158>
   186d2:	81 14       	cp	r8, r1
   186d4:	91 04       	cpc	r9, r1
   186d6:	a9 f0       	breq	.+42     	; 0x18702 <Read_Config+0x1096>
   186d8:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   186dc:	8f 93       	push	r24
   186de:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   186e2:	8f 93       	push	r24
   186e4:	86 ed       	ldi	r24, 0xD6	; 214
   186e6:	9d e2       	ldi	r25, 0x2D	; 45
   186e8:	1f 92       	push	r1
   186ea:	9f 93       	push	r25
   186ec:	8f 93       	push	r24
   186ee:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   186f2:	bf ef       	ldi	r27, 0xFF	; 255
   186f4:	ab 1a       	sub	r10, r27
   186f6:	bb 0a       	sbc	r11, r27
   186f8:	0f 90       	pop	r0
   186fa:	0f 90       	pop	r0
   186fc:	0f 90       	pop	r0
   186fe:	0f 90       	pop	r0
   18700:	0f 90       	pop	r0
   18702:	80 91 c5 19 	lds	r24, 0x19C5	; 0x8019c5 <lines+0x1>
   18706:	8f 93       	push	r24
   18708:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <lines>
   1870c:	8f 93       	push	r24
   1870e:	89 eb       	ldi	r24, 0xB9	; 185
   18710:	9d e2       	ldi	r25, 0x2D	; 45
   18712:	1f 92       	push	r1
   18714:	9f 93       	push	r25
   18716:	8f 93       	push	r24
   18718:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1871c:	0f 90       	pop	r0
   1871e:	0f 90       	pop	r0
   18720:	0f 90       	pop	r0
   18722:	0f 90       	pop	r0
   18724:	0f 90       	pop	r0
   18726:	a1 14       	cp	r10, r1
   18728:	b1 04       	cpc	r11, r1
   1872a:	71 f0       	breq	.+28     	; 0x18748 <Read_Config+0x10dc>
   1872c:	bf 92       	push	r11
   1872e:	af 92       	push	r10
   18730:	82 e9       	ldi	r24, 0x92	; 146
   18732:	9d e2       	ldi	r25, 0x2D	; 45
   18734:	1f 92       	push	r1
   18736:	9f 93       	push	r25
   18738:	8f 93       	push	r24
   1873a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1873e:	0f 90       	pop	r0
   18740:	0f 90       	pop	r0
   18742:	0f 90       	pop	r0
   18744:	0f 90       	pop	r0
   18746:	0f 90       	pop	r0
   18748:	c9 57       	subi	r28, 0x79	; 121
   1874a:	df 4f       	sbci	r29, 0xFF	; 255
   1874c:	88 81       	ld	r24, Y
   1874e:	99 81       	ldd	r25, Y+1	; 0x01
   18750:	c7 58       	subi	r28, 0x87	; 135
   18752:	d0 40       	sbci	r29, 0x00	; 0
   18754:	0e 94 bb 82 	call	0x10576	; 0x10576 <fclose>
   18758:	01 96       	adiw	r24, 0x01	; 1
   1875a:	39 f4       	brne	.+14     	; 0x1876a <Read_Config+0x10fe>
   1875c:	87 ea       	ldi	r24, 0xA7	; 167
   1875e:	95 e1       	ldi	r25, 0x15	; 21
   18760:	0e 94 e7 7d 	call	0xfbce	; 0xfbce <perror>
   18764:	c5 01       	movw	r24, r10
   18766:	01 96       	adiw	r24, 0x01	; 1
   18768:	01 c0       	rjmp	.+2      	; 0x1876c <Read_Config+0x1100>
   1876a:	c5 01       	movw	r24, r10
   1876c:	c6 56       	subi	r28, 0x66	; 102
   1876e:	df 4f       	sbci	r29, 0xFF	; 255
   18770:	e2 e1       	ldi	r30, 0x12	; 18
   18772:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

00018776 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   18776:	cf 92       	push	r12
   18778:	df 92       	push	r13
   1877a:	ef 92       	push	r14
   1877c:	0f 93       	push	r16
   1877e:	1f 93       	push	r17
   18780:	cf 93       	push	r28
   18782:	df 93       	push	r29
   18784:	cd b7       	in	r28, 0x3d	; 61
   18786:	de b7       	in	r29, 0x3e	; 62
   18788:	c0 54       	subi	r28, 0x40	; 64
   1878a:	d1 09       	sbc	r29, r1
   1878c:	0f b6       	in	r0, 0x3f	; 63
   1878e:	f8 94       	cli
   18790:	de bf       	out	0x3e, r29	; 62
   18792:	0f be       	out	0x3f, r0	; 63
   18794:	cd bf       	out	0x3d, r28	; 61
   18796:	6b 01       	movw	r12, r22
   18798:	e8 2e       	mov	r14, r24
   1879a:	75 2f       	mov	r23, r21
   1879c:	de 01       	movw	r26, r28
   1879e:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   187a0:	80 e0       	ldi	r24, 0x00	; 0
   187a2:	90 e0       	ldi	r25, 0x00	; 0
   187a4:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   187a6:	f6 01       	movw	r30, r12
   187a8:	5e 2d       	mov	r21, r14
   187aa:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
   187ae:	66 23       	and	r22, r22
   187b0:	51 f0       	breq	.+20     	; 0x187c6 <print_var_P+0x50>
   187b2:	8e 33       	cpi	r24, 0x3E	; 62
   187b4:	91 05       	cpc	r25, r1
   187b6:	39 f0       	breq	.+14     	; 0x187c6 <print_var_P+0x50>
        tmp[i++] = *str++;
   187b8:	01 96       	adiw	r24, 0x01	; 1
   187ba:	5f ef       	ldi	r21, 0xFF	; 255
   187bc:	c5 1a       	sub	r12, r21
   187be:	d5 0a       	sbc	r13, r21
   187c0:	e5 0a       	sbc	r14, r21
   187c2:	6d 93       	st	X+, r22
   187c4:	f0 cf       	rjmp	.-32     	; 0x187a6 <print_var_P+0x30>
    tmp[i++] = 0;
   187c6:	f8 01       	movw	r30, r16
   187c8:	e8 0f       	add	r30, r24
   187ca:	f9 1f       	adc	r31, r25
   187cc:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   187ce:	7f 93       	push	r23
   187d0:	4f 93       	push	r20
   187d2:	3f 93       	push	r19
   187d4:	2f 93       	push	r18
   187d6:	7f 93       	push	r23
   187d8:	4f 93       	push	r20
   187da:	3f 93       	push	r19
   187dc:	2f 93       	push	r18
   187de:	1f 93       	push	r17
   187e0:	0f 93       	push	r16
   187e2:	89 e7       	ldi	r24, 0x79	; 121
   187e4:	9d e2       	ldi	r25, 0x2D	; 45
   187e6:	1f 92       	push	r1
   187e8:	9f 93       	push	r25
   187ea:	8f 93       	push	r24
   187ec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
}
   187f0:	0f b6       	in	r0, 0x3f	; 63
   187f2:	f8 94       	cli
   187f4:	de bf       	out	0x3e, r29	; 62
   187f6:	0f be       	out	0x3f, r0	; 63
   187f8:	cd bf       	out	0x3d, r28	; 61
   187fa:	c0 5c       	subi	r28, 0xC0	; 192
   187fc:	df 4f       	sbci	r29, 0xFF	; 255
   187fe:	0f b6       	in	r0, 0x3f	; 63
   18800:	f8 94       	cli
   18802:	de bf       	out	0x3e, r29	; 62
   18804:	0f be       	out	0x3f, r0	; 63
   18806:	cd bf       	out	0x3d, r28	; 61
   18808:	df 91       	pop	r29
   1880a:	cf 91       	pop	r28
   1880c:	1f 91       	pop	r17
   1880e:	0f 91       	pop	r16
   18810:	ef 90       	pop	r14
   18812:	df 90       	pop	r13
   18814:	cf 90       	pop	r12
   18816:	08 95       	ret

00018818 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   18818:	cf 92       	push	r12
   1881a:	df 92       	push	r13
   1881c:	ef 92       	push	r14
   1881e:	cf 93       	push	r28
   18820:	df 93       	push	r29
   18822:	cd b7       	in	r28, 0x3d	; 61
   18824:	de b7       	in	r29, 0x3e	; 62
   18826:	c0 54       	subi	r28, 0x40	; 64
   18828:	d1 09       	sbc	r29, r1
   1882a:	0f b6       	in	r0, 0x3f	; 63
   1882c:	f8 94       	cli
   1882e:	de bf       	out	0x3e, r29	; 62
   18830:	0f be       	out	0x3f, r0	; 63
   18832:	cd bf       	out	0x3d, r28	; 61
   18834:	6b 01       	movw	r12, r22
   18836:	e8 2e       	mov	r14, r24
   18838:	75 2f       	mov	r23, r21
   1883a:	de 01       	movw	r26, r28
   1883c:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   1883e:	80 e0       	ldi	r24, 0x00	; 0
   18840:	90 e0       	ldi	r25, 0x00	; 0
   18842:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   18844:	f6 01       	movw	r30, r12
   18846:	5e 2d       	mov	r21, r14
   18848:	0e 94 3c ed 	call	0x1da78	; 0x1da78 <__xload_1>
   1884c:	66 23       	and	r22, r22
   1884e:	51 f0       	breq	.+20     	; 0x18864 <print_str_P+0x4c>
   18850:	8e 33       	cpi	r24, 0x3E	; 62
   18852:	91 05       	cpc	r25, r1
   18854:	39 f0       	breq	.+14     	; 0x18864 <print_str_P+0x4c>
        tmp[i++] = *str++;
   18856:	01 96       	adiw	r24, 0x01	; 1
   18858:	5f ef       	ldi	r21, 0xFF	; 255
   1885a:	c5 1a       	sub	r12, r21
   1885c:	d5 0a       	sbc	r13, r21
   1885e:	e5 0a       	sbc	r14, r21
   18860:	6d 93       	st	X+, r22
   18862:	f0 cf       	rjmp	.-32     	; 0x18844 <print_str_P+0x2c>
    tmp[i++] = 0;
   18864:	f9 01       	movw	r30, r18
   18866:	e8 0f       	add	r30, r24
   18868:	f9 1f       	adc	r31, r25
   1886a:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   1886c:	7f 93       	push	r23
   1886e:	4f 93       	push	r20
   18870:	3f 93       	push	r19
   18872:	2f 93       	push	r18
   18874:	87 e6       	ldi	r24, 0x67	; 103
   18876:	9d e2       	ldi	r25, 0x2D	; 45
   18878:	1f 92       	push	r1
   1887a:	9f 93       	push	r25
   1887c:	8f 93       	push	r24
   1887e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
}
   18882:	0f b6       	in	r0, 0x3f	; 63
   18884:	f8 94       	cli
   18886:	de bf       	out	0x3e, r29	; 62
   18888:	0f be       	out	0x3f, r0	; 63
   1888a:	cd bf       	out	0x3d, r28	; 61
   1888c:	c0 5c       	subi	r28, 0xC0	; 192
   1888e:	df 4f       	sbci	r29, 0xFF	; 255
   18890:	0f b6       	in	r0, 0x3f	; 63
   18892:	f8 94       	cli
   18894:	de bf       	out	0x3e, r29	; 62
   18896:	0f be       	out	0x3f, r0	; 63
   18898:	cd bf       	out	0x3d, r28	; 61
   1889a:	df 91       	pop	r29
   1889c:	cf 91       	pop	r28
   1889e:	ef 90       	pop	r14
   188a0:	df 90       	pop	r13
   188a2:	cf 90       	pop	r12
   188a4:	08 95       	ret

000188a6 <display_Addresses>:

/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   188a6:	2f 92       	push	r2
   188a8:	3f 92       	push	r3
   188aa:	4f 92       	push	r4
   188ac:	6f 92       	push	r6
   188ae:	7f 92       	push	r7
   188b0:	8f 92       	push	r8
   188b2:	af 92       	push	r10
   188b4:	bf 92       	push	r11
   188b6:	cf 92       	push	r12
   188b8:	df 92       	push	r13
   188ba:	ef 92       	push	r14
   188bc:	0f 93       	push	r16
   188be:	1f 93       	push	r17
   188c0:	cf 93       	push	r28
   188c2:	df 93       	push	r29
   188c4:	cd b7       	in	r28, 0x3d	; 61
   188c6:	de b7       	in	r29, 0x3e	; 62
   188c8:	2b 97       	sbiw	r28, 0x0b	; 11
   188ca:	0f b6       	in	r0, 0x3f	; 63
   188cc:	f8 94       	cli
   188ce:	de bf       	out	0x3e, r29	; 62
   188d0:	0f be       	out	0x3f, r0	; 63
   188d2:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   188d4:	85 e4       	ldi	r24, 0x45	; 69
   188d6:	9d e2       	ldi	r25, 0x2D	; 45
   188d8:	1f 92       	push	r1
   188da:	9f 93       	push	r25
   188dc:	8f 93       	push	r24
   188de:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   188e2:	0f e1       	ldi	r16, 0x1F	; 31
   188e4:	1f e1       	ldi	r17, 0x1F	; 31
   188e6:	0f 90       	pop	r0
   188e8:	0f 90       	pop	r0
   188ea:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   188ec:	84 ea       	ldi	r24, 0xA4	; 164
   188ee:	9c e2       	ldi	r25, 0x2C	; 44
   188f0:	9c 01       	movw	r18, r24
   188f2:	40 e0       	ldi	r20, 0x00	; 0
   188f4:	29 83       	std	Y+1, r18	; 0x01
   188f6:	3a 83       	std	Y+2, r19	; 0x02
   188f8:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   188fa:	8d e8       	ldi	r24, 0x8D	; 141
   188fc:	9c e2       	ldi	r25, 0x2C	; 44
   188fe:	9c 01       	movw	r18, r24
   18900:	40 e0       	ldi	r20, 0x00	; 0
   18902:	2c 83       	std	Y+4, r18	; 0x04
   18904:	3d 83       	std	Y+5, r19	; 0x05
   18906:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   18908:	86 e7       	ldi	r24, 0x76	; 118
   1890a:	9c e2       	ldi	r25, 0x2C	; 44
   1890c:	9c 01       	movw	r18, r24
   1890e:	40 e0       	ldi	r20, 0x00	; 0
   18910:	2f 83       	std	Y+7, r18	; 0x07
   18912:	38 87       	std	Y+8, r19	; 0x08
   18914:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   18916:	89 ee       	ldi	r24, 0xE9	; 233
   18918:	9c e2       	ldi	r25, 0x2C	; 44
   1891a:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1891c:	82 ed       	ldi	r24, 0xD2	; 210
   1891e:	9c e2       	ldi	r25, 0x2C	; 44
   18920:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   18922:	8b eb       	ldi	r24, 0xBB	; 187
   18924:	9c e2       	ldi	r25, 0x2C	; 44
   18926:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   18928:	8e e2       	ldi	r24, 0x2E	; 46
   1892a:	a8 2e       	mov	r10, r24
   1892c:	8d e2       	ldi	r24, 0x2D	; 45
   1892e:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18930:	f8 01       	movw	r30, r16
   18932:	80 81       	ld	r24, Z
   18934:	88 23       	and	r24, r24
   18936:	09 f4       	brne	.+2      	; 0x1893a <display_Addresses+0x94>
   18938:	8a c0       	rjmp	.+276    	; 0x18a4e <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   1893a:	f1 81       	ldd	r31, Z+1	; 0x01
   1893c:	2f 2f       	mov	r18, r31
   1893e:	30 e0       	ldi	r19, 0x00	; 0
   18940:	3b 87       	std	Y+11, r19	; 0x0b
   18942:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   18944:	83 30       	cpi	r24, 0x03	; 3
   18946:	49 f5       	brne	.+82     	; 0x1899a <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   18948:	c9 01       	movw	r24, r18
   1894a:	80 96       	adiw	r24, 0x20	; 32
   1894c:	9f 93       	push	r25
   1894e:	8f 93       	push	r24
   18950:	c5 01       	movw	r24, r10
   18952:	1f 92       	push	r1
   18954:	9f 93       	push	r25
   18956:	af 92       	push	r10
   18958:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   1895c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1895e:	9b 85       	ldd	r25, Y+11	; 0x0b
   18960:	80 5c       	subi	r24, 0xC0	; 192
   18962:	9f 4f       	sbci	r25, 0xFF	; 255
   18964:	9f 93       	push	r25
   18966:	8f 93       	push	r24
   18968:	87 e1       	ldi	r24, 0x17	; 23
   1896a:	9d e2       	ldi	r25, 0x2D	; 45
   1896c:	1f 92       	push	r1
   1896e:	9f 93       	push	r25
   18970:	8f 93       	push	r24
   18972:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   18976:	8a 85       	ldd	r24, Y+10	; 0x0a
   18978:	9b 85       	ldd	r25, Y+11	; 0x0b
   1897a:	80 5a       	subi	r24, 0xA0	; 160
   1897c:	9f 4f       	sbci	r25, 0xFF	; 255
   1897e:	9f 93       	push	r25
   18980:	8f 93       	push	r24
   18982:	80 e0       	ldi	r24, 0x00	; 0
   18984:	9d e2       	ldi	r25, 0x2D	; 45
   18986:	1f 92       	push	r1
   18988:	9f 93       	push	r25
   1898a:	8f 93       	push	r24
   1898c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18990:	0f b6       	in	r0, 0x3f	; 63
   18992:	f8 94       	cli
   18994:	de bf       	out	0x3e, r29	; 62
   18996:	0f be       	out	0x3f, r0	; 63
   18998:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1899a:	f8 01       	movw	r30, r16
   1899c:	80 81       	ld	r24, Z
   1899e:	81 30       	cpi	r24, 0x01	; 1
   189a0:	29 f5       	brne	.+74     	; 0x189ec <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   189a2:	8a 85       	ldd	r24, Y+10	; 0x0a
   189a4:	9b 85       	ldd	r25, Y+11	; 0x0b
   189a6:	80 96       	adiw	r24, 0x20	; 32
   189a8:	9f 93       	push	r25
   189aa:	8f 93       	push	r24
   189ac:	1f 92       	push	r1
   189ae:	df 92       	push	r13
   189b0:	cf 92       	push	r12
   189b2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   189b6:	8a 85       	ldd	r24, Y+10	; 0x0a
   189b8:	9b 85       	ldd	r25, Y+11	; 0x0b
   189ba:	80 5c       	subi	r24, 0xC0	; 192
   189bc:	9f 4f       	sbci	r25, 0xFF	; 255
   189be:	9f 93       	push	r25
   189c0:	8f 93       	push	r24
   189c2:	1f 92       	push	r1
   189c4:	7f 92       	push	r7
   189c6:	6f 92       	push	r6
   189c8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   189cc:	8a 85       	ldd	r24, Y+10	; 0x0a
   189ce:	9b 85       	ldd	r25, Y+11	; 0x0b
   189d0:	80 5a       	subi	r24, 0xA0	; 160
   189d2:	9f 4f       	sbci	r25, 0xFF	; 255
   189d4:	9f 93       	push	r25
   189d6:	8f 93       	push	r24
   189d8:	1f 92       	push	r1
   189da:	3f 92       	push	r3
   189dc:	2f 92       	push	r2
   189de:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   189e2:	0f b6       	in	r0, 0x3f	; 63
   189e4:	f8 94       	cli
   189e6:	de bf       	out	0x3e, r29	; 62
   189e8:	0f be       	out	0x3f, r0	; 63
   189ea:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   189ec:	f8 01       	movw	r30, r16
   189ee:	80 81       	ld	r24, Z
   189f0:	84 30       	cpi	r24, 0x04	; 4
   189f2:	69 f5       	brne	.+90     	; 0x18a4e <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   189f4:	8a 85       	ldd	r24, Y+10	; 0x0a
   189f6:	9b 85       	ldd	r25, Y+11	; 0x0b
   189f8:	80 96       	adiw	r24, 0x20	; 32
   189fa:	9f 93       	push	r25
   189fc:	8f 93       	push	r24
   189fe:	1f 92       	push	r1
   18a00:	fa 81       	ldd	r31, Y+2	; 0x02
   18a02:	ff 93       	push	r31
   18a04:	29 81       	ldd	r18, Y+1	; 0x01
   18a06:	2f 93       	push	r18
   18a08:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   18a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
   18a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
   18a10:	80 5c       	subi	r24, 0xC0	; 192
   18a12:	9f 4f       	sbci	r25, 0xFF	; 255
   18a14:	9f 93       	push	r25
   18a16:	8f 93       	push	r24
   18a18:	1f 92       	push	r1
   18a1a:	3d 81       	ldd	r19, Y+5	; 0x05
   18a1c:	3f 93       	push	r19
   18a1e:	4c 81       	ldd	r20, Y+4	; 0x04
   18a20:	4f 93       	push	r20
   18a22:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   18a26:	8a 85       	ldd	r24, Y+10	; 0x0a
   18a28:	9b 85       	ldd	r25, Y+11	; 0x0b
   18a2a:	80 5a       	subi	r24, 0xA0	; 160
   18a2c:	9f 4f       	sbci	r25, 0xFF	; 255
   18a2e:	9b 87       	std	Y+11, r25	; 0x0b
   18a30:	8a 87       	std	Y+10, r24	; 0x0a
   18a32:	9f 93       	push	r25
   18a34:	8f 93       	push	r24
   18a36:	1f 92       	push	r1
   18a38:	98 85       	ldd	r25, Y+8	; 0x08
   18a3a:	9f 93       	push	r25
   18a3c:	ef 81       	ldd	r30, Y+7	; 0x07
   18a3e:	ef 93       	push	r30
   18a40:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18a44:	0f b6       	in	r0, 0x3f	; 63
   18a46:	f8 94       	cli
   18a48:	de bf       	out	0x3e, r29	; 62
   18a4a:	0f be       	out	0x3f, r0	; 63
   18a4c:	cd bf       	out	0x3d, r28	; 61
   18a4e:	09 5f       	subi	r16, 0xF9	; 249
   18a50:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18a52:	3f e1       	ldi	r19, 0x1F	; 31
   18a54:	03 37       	cpi	r16, 0x73	; 115
   18a56:	13 07       	cpc	r17, r19
   18a58:	09 f0       	breq	.+2      	; 0x18a5c <display_Addresses+0x1b6>
   18a5a:	6a cf       	rjmp	.-300    	; 0x18930 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   18a5c:	84 e7       	ldi	r24, 0x74	; 116
   18a5e:	9c e2       	ldi	r25, 0x2C	; 44
   18a60:	1f 92       	push	r1
   18a62:	9f 93       	push	r25
   18a64:	8f 93       	push	r24
   18a66:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
}
   18a6a:	0f 90       	pop	r0
   18a6c:	0f 90       	pop	r0
   18a6e:	0f 90       	pop	r0
   18a70:	2b 96       	adiw	r28, 0x0b	; 11
   18a72:	0f b6       	in	r0, 0x3f	; 63
   18a74:	f8 94       	cli
   18a76:	de bf       	out	0x3e, r29	; 62
   18a78:	0f be       	out	0x3f, r0	; 63
   18a7a:	cd bf       	out	0x3d, r28	; 61
   18a7c:	df 91       	pop	r29
   18a7e:	cf 91       	pop	r28
   18a80:	1f 91       	pop	r17
   18a82:	0f 91       	pop	r16
   18a84:	ef 90       	pop	r14
   18a86:	df 90       	pop	r13
   18a88:	cf 90       	pop	r12
   18a8a:	bf 90       	pop	r11
   18a8c:	af 90       	pop	r10
   18a8e:	8f 90       	pop	r8
   18a90:	7f 90       	pop	r7
   18a92:	6f 90       	pop	r6
   18a94:	4f 90       	pop	r4
   18a96:	3f 90       	pop	r3
   18a98:	2f 90       	pop	r2
   18a9a:	08 95       	ret

00018a9c <display_Config>:

/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   18a9c:	2f 92       	push	r2
   18a9e:	3f 92       	push	r3
   18aa0:	4f 92       	push	r4
   18aa2:	6f 92       	push	r6
   18aa4:	7f 92       	push	r7
   18aa6:	8f 92       	push	r8
   18aa8:	af 92       	push	r10
   18aaa:	bf 92       	push	r11
   18aac:	cf 92       	push	r12
   18aae:	df 92       	push	r13
   18ab0:	ef 92       	push	r14
   18ab2:	0f 93       	push	r16
   18ab4:	1f 93       	push	r17
   18ab6:	cf 93       	push	r28
   18ab8:	df 93       	push	r29
   18aba:	cd b7       	in	r28, 0x3d	; 61
   18abc:	de b7       	in	r29, 0x3e	; 62
   18abe:	2b 97       	sbiw	r28, 0x0b	; 11
   18ac0:	0f b6       	in	r0, 0x3f	; 63
   18ac2:	f8 94       	cli
   18ac4:	de bf       	out	0x3e, r29	; 62
   18ac6:	0f be       	out	0x3f, r0	; 63
   18ac8:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   18aca:	84 e5       	ldi	r24, 0x54	; 84
   18acc:	9c e2       	ldi	r25, 0x2C	; 44
   18ace:	1f 92       	push	r1
   18ad0:	9f 93       	push	r25
   18ad2:	8f 93       	push	r24
   18ad4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18ad8:	0f e1       	ldi	r16, 0x1F	; 31
   18ada:	1f e1       	ldi	r17, 0x1F	; 31
   18adc:	0f 90       	pop	r0
   18ade:	0f 90       	pop	r0
   18ae0:	0f 90       	pop	r0

            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
   18ae2:	83 e1       	ldi	r24, 0x13	; 19
   18ae4:	9a e2       	ldi	r25, 0x2A	; 42
   18ae6:	9c 01       	movw	r18, r24
   18ae8:	40 e0       	ldi	r20, 0x00	; 0
   18aea:	29 83       	std	Y+1, r18	; 0x01
   18aec:	3a 83       	std	Y+2, r19	; 0x02
   18aee:	4b 83       	std	Y+3, r20	; 0x03

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   18af0:	87 e2       	ldi	r24, 0x27	; 39
   18af2:	9a e2       	ldi	r25, 0x2A	; 42
   18af4:	9c 01       	movw	r18, r24
   18af6:	40 e0       	ldi	r20, 0x00	; 0
   18af8:	2c 83       	std	Y+4, r18	; 0x04
   18afa:	3d 83       	std	Y+5, r19	; 0x05
   18afc:	4e 83       	std	Y+6, r20	; 0x06
            printf("  CONFIG\n");
   18afe:	8d e1       	ldi	r24, 0x1D	; 29
   18b00:	9a e2       	ldi	r25, 0x2A	; 42
   18b02:	9c 01       	movw	r18, r24
   18b04:	40 e0       	ldi	r20, 0x00	; 0
   18b06:	2f 83       	std	Y+7, r18	; 0x07
   18b08:	38 87       	std	Y+8, r19	; 0x08
   18b0a:	49 87       	std	Y+9, r20	; 0x09
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   18b0c:	85 e1       	ldi	r24, 0x15	; 21
   18b0e:	9a e2       	ldi	r25, 0x2A	; 42
   18b10:	3c 01       	movw	r6, r24
   18b12:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO\n");
   18b14:	8f eb       	ldi	r24, 0xBF	; 191
   18b16:	9a e2       	ldi	r25, 0x2A	; 42
   18b18:	1c 01       	movw	r2, r24
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   18b1a:	80 ea       	ldi	r24, 0xA0	; 160
   18b1c:	9a e2       	ldi	r25, 0x2A	; 42
   18b1e:	6c 01       	movw	r12, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18b20:	f8 01       	movw	r30, r16
   18b22:	80 81       	ld	r24, Z
   18b24:	88 23       	and	r24, r24
   18b26:	09 f4       	brne	.+2      	; 0x18b2a <display_Config+0x8e>
   18b28:	17 c2       	rjmp	.+1070   	; 0x18f58 <display_Config+0x4bc>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18b2a:	83 30       	cpi	r24, 0x03	; 3
   18b2c:	09 f0       	breq	.+2      	; 0x18b30 <display_Config+0x94>
   18b2e:	48 c1       	rjmp	.+656    	; 0x18dc0 <display_Config+0x324>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   18b30:	23 81       	ldd	r18, Z+3	; 0x03
   18b32:	34 81       	ldd	r19, Z+4	; 0x04
   18b34:	3b 87       	std	Y+11, r19	; 0x0b
   18b36:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80\n");
   18b38:	8e e4       	ldi	r24, 0x4E	; 78
   18b3a:	9c e2       	ldi	r25, 0x2C	; 44
   18b3c:	1f 92       	push	r1
   18b3e:	9f 93       	push	r25
   18b40:	8f 93       	push	r24
   18b42:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   18b46:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b48:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b4a:	80 81       	ld	r24, Z
   18b4c:	1f 92       	push	r1
   18b4e:	8f 93       	push	r24
   18b50:	8f e2       	ldi	r24, 0x2F	; 47
   18b52:	9c e2       	ldi	r25, 0x2C	; 44
   18b54:	1f 92       	push	r1
   18b56:	9f 93       	push	r25
   18b58:	8f 93       	push	r24
   18b5a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            printf("  CONFIG\n");
   18b5e:	85 e2       	ldi	r24, 0x25	; 37
   18b60:	9c e2       	ldi	r25, 0x2C	; 44
   18b62:	1f 92       	push	r1
   18b64:	9f 93       	push	r25
   18b66:	8f 93       	push	r24
   18b68:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   18b6c:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b6e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b70:	20 81       	ld	r18, Z
   18b72:	30 e0       	ldi	r19, 0x00	; 0
   18b74:	40 e0       	ldi	r20, 0x00	; 0
   18b76:	50 e0       	ldi	r21, 0x00	; 0
   18b78:	6d e1       	ldi	r22, 0x1D	; 29
   18b7a:	7c e2       	ldi	r23, 0x2C	; 44
   18b7c:	80 e0       	ldi	r24, 0x00	; 0
   18b7e:	fb dd       	rcall	.-1034   	; 0x18776 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   18b80:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b82:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b84:	21 81       	ldd	r18, Z+1	; 0x01
   18b86:	30 e0       	ldi	r19, 0x00	; 0
   18b88:	40 e0       	ldi	r20, 0x00	; 0
   18b8a:	50 e0       	ldi	r21, 0x00	; 0
   18b8c:	69 e1       	ldi	r22, 0x19	; 25
   18b8e:	7c e2       	ldi	r23, 0x2C	; 44
   18b90:	80 e0       	ldi	r24, 0x00	; 0
   18b92:	f1 dd       	rcall	.-1054   	; 0x18776 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   18b94:	4a 85       	ldd	r20, Y+10	; 0x0a
   18b96:	5b 85       	ldd	r21, Y+11	; 0x0b
   18b98:	4e 5f       	subi	r20, 0xFE	; 254
   18b9a:	5f 4f       	sbci	r21, 0xFF	; 255
   18b9c:	64 e1       	ldi	r22, 0x14	; 20
   18b9e:	7c e2       	ldi	r23, 0x2C	; 44
   18ba0:	80 e0       	ldi	r24, 0x00	; 0
   18ba2:	3a de       	rcall	.-908    	; 0x18818 <print_str_P>
            printf("  HEADER\n");
   18ba4:	8a e0       	ldi	r24, 0x0A	; 10
   18ba6:	9c e2       	ldi	r25, 0x2C	; 44
   18ba8:	1f 92       	push	r1
   18baa:	9f 93       	push	r25
   18bac:	8f 93       	push	r24
   18bae:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   18bb2:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bb4:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bb6:	23 a1       	ldd	r18, Z+35	; 0x23
   18bb8:	34 a1       	ldd	r19, Z+36	; 0x24
   18bba:	40 e0       	ldi	r20, 0x00	; 0
   18bbc:	50 e0       	ldi	r21, 0x00	; 0
   18bbe:	67 e0       	ldi	r22, 0x07	; 7
   18bc0:	7c e2       	ldi	r23, 0x2C	; 44
   18bc2:	80 e0       	ldi	r24, 0x00	; 0
   18bc4:	d8 dd       	rcall	.-1104   	; 0x18776 <print_var_P>
            printf("  CONTROLLER\n");
   18bc6:	89 ef       	ldi	r24, 0xF9	; 249
   18bc8:	9b e2       	ldi	r25, 0x2B	; 43
   18bca:	1f 92       	push	r1
   18bcc:	9f 93       	push	r25
   18bce:	8f 93       	push	r24
   18bd0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   18bd4:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bd6:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bd8:	25 a1       	ldd	r18, Z+37	; 0x25
   18bda:	36 a1       	ldd	r19, Z+38	; 0x26
   18bdc:	40 e0       	ldi	r20, 0x00	; 0
   18bde:	50 e0       	ldi	r21, 0x00	; 0
   18be0:	69 ee       	ldi	r22, 0xE9	; 233
   18be2:	7b e2       	ldi	r23, 0x2B	; 43
   18be4:	80 e0       	ldi	r24, 0x00	; 0
   18be6:	c7 dd       	rcall	.-1138   	; 0x18776 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   18be8:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bea:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bec:	27 a1       	ldd	r18, Z+39	; 0x27
   18bee:	30 a5       	ldd	r19, Z+40	; 0x28
   18bf0:	40 e0       	ldi	r20, 0x00	; 0
   18bf2:	50 e0       	ldi	r21, 0x00	; 0
   18bf4:	6b ed       	ldi	r22, 0xDB	; 219
   18bf6:	7b e2       	ldi	r23, 0x2B	; 43
   18bf8:	80 e0       	ldi	r24, 0x00	; 0
   18bfa:	bd dd       	rcall	.-1158   	; 0x18776 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   18bfc:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bfe:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c00:	21 a5       	ldd	r18, Z+41	; 0x29
   18c02:	30 e0       	ldi	r19, 0x00	; 0
   18c04:	40 e0       	ldi	r20, 0x00	; 0
   18c06:	50 e0       	ldi	r21, 0x00	; 0
   18c08:	66 ed       	ldi	r22, 0xD6	; 214
   18c0a:	7b e2       	ldi	r23, 0x2B	; 43
   18c0c:	80 e0       	ldi	r24, 0x00	; 0
   18c0e:	b3 dd       	rcall	.-1178   	; 0x18776 <print_var_P>
            printf("  UNIT\n");
   18c10:	8e ec       	ldi	r24, 0xCE	; 206
   18c12:	9b e2       	ldi	r25, 0x2B	; 43
   18c14:	1f 92       	push	r1
   18c16:	9f 93       	push	r25
   18c18:	8f 93       	push	r24
   18c1a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   18c1e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c20:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c22:	22 a5       	ldd	r18, Z+42	; 0x2a
   18c24:	30 e0       	ldi	r19, 0x00	; 0
   18c26:	40 e0       	ldi	r20, 0x00	; 0
   18c28:	50 e0       	ldi	r21, 0x00	; 0
   18c2a:	64 ec       	ldi	r22, 0xC4	; 196
   18c2c:	7b e2       	ldi	r23, 0x2B	; 43
   18c2e:	80 e0       	ldi	r24, 0x00	; 0
   18c30:	a2 dd       	rcall	.-1212   	; 0x18776 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   18c32:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c34:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c36:	23 a5       	ldd	r18, Z+43	; 0x2b
   18c38:	34 a5       	ldd	r19, Z+44	; 0x2c
   18c3a:	45 a5       	ldd	r20, Z+45	; 0x2d
   18c3c:	56 a5       	ldd	r21, Z+46	; 0x2e
   18c3e:	66 eb       	ldi	r22, 0xB6	; 182
   18c40:	7b e2       	ldi	r23, 0x2B	; 43
   18c42:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   18c44:	98 dd       	rcall	.-1232   	; 0x18776 <print_var_P>
   18c46:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c48:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c4a:	27 a5       	ldd	r18, Z+47	; 0x2f
   18c4c:	30 a9       	ldd	r19, Z+48	; 0x30
   18c4e:	40 e0       	ldi	r20, 0x00	; 0
   18c50:	50 e0       	ldi	r21, 0x00	; 0
   18c52:	66 ea       	ldi	r22, 0xA6	; 166
   18c54:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   18c56:	80 e0       	ldi	r24, 0x00	; 0
   18c58:	8e dd       	rcall	.-1252   	; 0x18776 <print_var_P>
   18c5a:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c5c:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c5e:	21 a9       	ldd	r18, Z+49	; 0x31
   18c60:	30 e0       	ldi	r19, 0x00	; 0
   18c62:	40 e0       	ldi	r20, 0x00	; 0
   18c64:	50 e0       	ldi	r21, 0x00	; 0
   18c66:	66 e9       	ldi	r22, 0x96	; 150
   18c68:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   18c6a:	80 e0       	ldi	r24, 0x00	; 0
   18c6c:	84 dd       	rcall	.-1272   	; 0x18776 <print_var_P>
   18c6e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c70:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c72:	22 a9       	ldd	r18, Z+50	; 0x32
   18c74:	30 e0       	ldi	r19, 0x00	; 0
   18c76:	40 e0       	ldi	r20, 0x00	; 0
   18c78:	50 e0       	ldi	r21, 0x00	; 0
   18c7a:	6b e8       	ldi	r22, 0x8B	; 139
   18c7c:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   18c7e:	80 e0       	ldi	r24, 0x00	; 0
   18c80:	7a dd       	rcall	.-1292   	; 0x18776 <print_var_P>
   18c82:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c84:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c86:	23 a9       	ldd	r18, Z+51	; 0x33
   18c88:	34 a9       	ldd	r19, Z+52	; 0x34
   18c8a:	40 e0       	ldi	r20, 0x00	; 0
   18c8c:	50 e0       	ldi	r21, 0x00	; 0
   18c8e:	60 e8       	ldi	r22, 0x80	; 128
   18c90:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   18c92:	80 e0       	ldi	r24, 0x00	; 0
   18c94:	70 dd       	rcall	.-1312   	; 0x18776 <print_var_P>
   18c96:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c98:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c9a:	25 a9       	ldd	r18, Z+53	; 0x35
   18c9c:	36 a9       	ldd	r19, Z+54	; 0x36
   18c9e:	40 e0       	ldi	r20, 0x00	; 0
   18ca0:	50 e0       	ldi	r21, 0x00	; 0
   18ca2:	68 e6       	ldi	r22, 0x68	; 104
   18ca4:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   18ca6:	80 e0       	ldi	r24, 0x00	; 0
   18ca8:	66 dd       	rcall	.-1332   	; 0x18776 <print_var_P>
   18caa:	ea 85       	ldd	r30, Y+10	; 0x0a
   18cac:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cae:	27 a9       	ldd	r18, Z+55	; 0x37
   18cb0:	30 ad       	ldd	r19, Z+56	; 0x38
   18cb2:	40 e0       	ldi	r20, 0x00	; 0
   18cb4:	50 e0       	ldi	r21, 0x00	; 0
   18cb6:	65 e5       	ldi	r22, 0x55	; 85
   18cb8:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   18cba:	80 e0       	ldi	r24, 0x00	; 0
   18cbc:	5c dd       	rcall	.-1352   	; 0x18776 <print_var_P>
   18cbe:	ea 85       	ldd	r30, Y+10	; 0x0a
   18cc0:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cc2:	21 ad       	ldd	r18, Z+57	; 0x39
   18cc4:	32 ad       	ldd	r19, Z+58	; 0x3a
   18cc6:	40 e0       	ldi	r20, 0x00	; 0
   18cc8:	50 e0       	ldi	r21, 0x00	; 0
   18cca:	69 e4       	ldi	r22, 0x49	; 73
   18ccc:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   18cce:	80 e0       	ldi	r24, 0x00	; 0
   18cd0:	52 dd       	rcall	.-1372   	; 0x18776 <print_var_P>
   18cd2:	ea 85       	ldd	r30, Y+10	; 0x0a
   18cd4:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cd6:	23 ad       	ldd	r18, Z+59	; 0x3b
   18cd8:	30 e0       	ldi	r19, 0x00	; 0
   18cda:	40 e0       	ldi	r20, 0x00	; 0
   18cdc:	50 e0       	ldi	r21, 0x00	; 0
   18cde:	66 e3       	ldi	r22, 0x36	; 54
   18ce0:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   18ce2:	80 e0       	ldi	r24, 0x00	; 0
   18ce4:	48 dd       	rcall	.-1392   	; 0x18776 <print_var_P>
   18ce6:	ea 85       	ldd	r30, Y+10	; 0x0a
   18ce8:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cea:	24 ad       	ldd	r18, Z+60	; 0x3c
   18cec:	30 e0       	ldi	r19, 0x00	; 0
   18cee:	40 e0       	ldi	r20, 0x00	; 0
   18cf0:	50 e0       	ldi	r21, 0x00	; 0
   18cf2:	68 e2       	ldi	r22, 0x28	; 40
   18cf4:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   18cf6:	80 e0       	ldi	r24, 0x00	; 0
   18cf8:	3e dd       	rcall	.-1412   	; 0x18776 <print_var_P>
   18cfa:	ea 85       	ldd	r30, Y+10	; 0x0a
   18cfc:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cfe:	25 ad       	ldd	r18, Z+61	; 0x3d
   18d00:	30 e0       	ldi	r19, 0x00	; 0
   18d02:	40 e0       	ldi	r20, 0x00	; 0
   18d04:	50 e0       	ldi	r21, 0x00	; 0
   18d06:	66 e1       	ldi	r22, 0x16	; 22
   18d08:	7b e2       	ldi	r23, 0x2B	; 43
            printf("  VOLUME\n");
   18d0a:	80 e0       	ldi	r24, 0x00	; 0
   18d0c:	34 dd       	rcall	.-1432   	; 0x18776 <print_var_P>
   18d0e:	8c e0       	ldi	r24, 0x0C	; 12
   18d10:	9b e2       	ldi	r25, 0x2B	; 43
   18d12:	1f 92       	push	r1
   18d14:	9f 93       	push	r25
   18d16:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   18d18:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18d1c:	ea 85       	ldd	r30, Y+10	; 0x0a
   18d1e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18d20:	fe 96       	adiw	r30, 0x3e	; 62
   18d22:	20 81       	ld	r18, Z
   18d24:	31 81       	ldd	r19, Z+1	; 0x01
   18d26:	42 81       	ldd	r20, Z+2	; 0x02
   18d28:	53 81       	ldd	r21, Z+3	; 0x03
   18d2a:	6f ef       	ldi	r22, 0xFF	; 255
   18d2c:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   18d2e:	80 e0       	ldi	r24, 0x00	; 0
   18d30:	22 dd       	rcall	.-1468   	; 0x18776 <print_var_P>
   18d32:	ea 85       	ldd	r30, Y+10	; 0x0a
   18d34:	fb 85       	ldd	r31, Y+11	; 0x0b
   18d36:	ee 5b       	subi	r30, 0xBE	; 190
   18d38:	ff 4f       	sbci	r31, 0xFF	; 255
   18d3a:	20 81       	ld	r18, Z
   18d3c:	30 e0       	ldi	r19, 0x00	; 0
   18d3e:	40 e0       	ldi	r20, 0x00	; 0
   18d40:	50 e0       	ldi	r21, 0x00	; 0
   18d42:	66 ef       	ldi	r22, 0xF6	; 246
   18d44:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   18d46:	80 e0       	ldi	r24, 0x00	; 0
   18d48:	16 dd       	rcall	.-1492   	; 0x18776 <print_var_P>
   18d4a:	ea 85       	ldd	r30, Y+10	; 0x0a
   18d4c:	fb 85       	ldd	r31, Y+11	; 0x0b
   18d4e:	ed 5b       	subi	r30, 0xBD	; 189
   18d50:	ff 4f       	sbci	r31, 0xFF	; 255
   18d52:	20 81       	ld	r18, Z
   18d54:	31 81       	ldd	r19, Z+1	; 0x01
   18d56:	40 e0       	ldi	r20, 0x00	; 0
   18d58:	50 e0       	ldi	r21, 0x00	; 0
   18d5a:	6b ee       	ldi	r22, 0xEB	; 235
   18d5c:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   18d5e:	80 e0       	ldi	r24, 0x00	; 0
   18d60:	0a dd       	rcall	.-1516   	; 0x18776 <print_var_P>
   18d62:	aa 84       	ldd	r10, Y+10	; 0x0a
   18d64:	bb 84       	ldd	r11, Y+11	; 0x0b
   18d66:	f5 e4       	ldi	r31, 0x45	; 69
   18d68:	af 0e       	add	r10, r31
   18d6a:	b1 1c       	adc	r11, r1
   18d6c:	f5 01       	movw	r30, r10
   18d6e:	20 81       	ld	r18, Z
   18d70:	31 81       	ldd	r19, Z+1	; 0x01
   18d72:	42 81       	ldd	r20, Z+2	; 0x02
   18d74:	53 81       	ldd	r21, Z+3	; 0x03
   18d76:	6a ed       	ldi	r22, 0xDA	; 218
   18d78:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   18d7a:	80 e0       	ldi	r24, 0x00	; 0
   18d7c:	fc dc       	rcall	.-1544   	; 0x18776 <print_var_P>
   18d7e:	2a 85       	ldd	r18, Y+10	; 0x0a
   18d80:	3b 85       	ldd	r19, Y+11	; 0x0b
   18d82:	27 5b       	subi	r18, 0xB7	; 183
   18d84:	3f 4f       	sbci	r19, 0xFF	; 255
   18d86:	f9 01       	movw	r30, r18
   18d88:	20 81       	ld	r18, Z
   18d8a:	30 e0       	ldi	r19, 0x00	; 0
   18d8c:	40 e0       	ldi	r20, 0x00	; 0
   18d8e:	50 e0       	ldi	r21, 0x00	; 0
   18d90:	6f ec       	ldi	r22, 0xCF	; 207
   18d92:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   18d94:	80 e0       	ldi	r24, 0x00	; 0
   18d96:	ef dc       	rcall	.-1570   	; 0x18776 <print_var_P>
   18d98:	f5 01       	movw	r30, r10
   18d9a:	80 81       	ld	r24, Z
   18d9c:	91 81       	ldd	r25, Z+1	; 0x01
   18d9e:	a2 81       	ldd	r26, Z+2	; 0x02
   18da0:	b3 81       	ldd	r27, Z+3	; 0x03
   18da2:	9c 01       	movw	r18, r24
   18da4:	ad 01       	movw	r20, r26
   18da6:	2f 5f       	subi	r18, 0xFF	; 255
   18da8:	3f 4f       	sbci	r19, 0xFF	; 255
   18daa:	4f 4f       	sbci	r20, 0xFF	; 255
   18dac:	5f 4f       	sbci	r21, 0xFF	; 255
   18dae:	66 ec       	ldi	r22, 0xC6	; 198
   18db0:	7a e2       	ldi	r23, 0x2A	; 42
   18db2:	80 e0       	ldi	r24, 0x00	; 0
   18db4:	e0 dc       	rcall	.-1600   	; 0x18776 <print_var_P>
   18db6:	0f b6       	in	r0, 0x3f	; 63
   18db8:	f8 94       	cli
   18dba:	de bf       	out	0x3e, r29	; 62
   18dbc:	0f be       	out	0x3f, r0	; 63
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18dbe:	cd bf       	out	0x3d, r28	; 61
   18dc0:	f8 01       	movw	r30, r16
   18dc2:	80 81       	ld	r24, Z
   18dc4:	81 30       	cpi	r24, 0x01	; 1
   18dc6:	09 f0       	breq	.+2      	; 0x18dca <display_Config+0x32e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18dc8:	98 c0       	rjmp	.+304    	; 0x18efa <display_Config+0x45e>
   18dca:	23 81       	ldd	r18, Z+3	; 0x03
   18dcc:	34 81       	ldd	r19, Z+4	; 0x04
   18dce:	3b 87       	std	Y+11, r19	; 0x0b

            printf("AMIGO\n");
   18dd0:	2a 87       	std	Y+10, r18	; 0x0a
   18dd2:	1f 92       	push	r1
   18dd4:	3f 92       	push	r3
   18dd6:	2f 92       	push	r2
   18dd8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   18ddc:	ea 85       	ldd	r30, Y+10	; 0x0a
   18dde:	fb 85       	ldd	r31, Y+11	; 0x0b
   18de0:	80 81       	ld	r24, Z
   18de2:	1f 92       	push	r1
   18de4:	8f 93       	push	r24
   18de6:	1f 92       	push	r1
   18de8:	df 92       	push	r13
   18dea:	cf 92       	push	r12
            printf("  HEADER\n");
   18dec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18df0:	26 e9       	ldi	r18, 0x96	; 150
   18df2:	3a e2       	ldi	r19, 0x2A	; 42
   18df4:	c9 01       	movw	r24, r18
   18df6:	1f 92       	push	r1
   18df8:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   18dfa:	2f 93       	push	r18
   18dfc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18e00:	ea 85       	ldd	r30, Y+10	; 0x0a
   18e02:	fb 85       	ldd	r31, Y+11	; 0x0b
   18e04:	20 81       	ld	r18, Z
   18e06:	30 e0       	ldi	r19, 0x00	; 0
   18e08:	40 e0       	ldi	r20, 0x00	; 0
   18e0a:	50 e0       	ldi	r21, 0x00	; 0
   18e0c:	6e e8       	ldi	r22, 0x8E	; 142
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   18e0e:	7a e2       	ldi	r23, 0x2A	; 42
   18e10:	80 e0       	ldi	r24, 0x00	; 0
   18e12:	b1 dc       	rcall	.-1694   	; 0x18776 <print_var_P>
   18e14:	ea 85       	ldd	r30, Y+10	; 0x0a
   18e16:	fb 85       	ldd	r31, Y+11	; 0x0b
   18e18:	21 81       	ldd	r18, Z+1	; 0x01
   18e1a:	30 e0       	ldi	r19, 0x00	; 0
   18e1c:	40 e0       	ldi	r20, 0x00	; 0
   18e1e:	50 e0       	ldi	r21, 0x00	; 0
   18e20:	6a e8       	ldi	r22, 0x8A	; 138
                print_str("FILE", AMIGOp->HEADER.NAME);
   18e22:	7a e2       	ldi	r23, 0x2A	; 42
   18e24:	80 e0       	ldi	r24, 0x00	; 0
   18e26:	a7 dc       	rcall	.-1714   	; 0x18776 <print_var_P>
   18e28:	4a 85       	ldd	r20, Y+10	; 0x0a
   18e2a:	5b 85       	ldd	r21, Y+11	; 0x0b
   18e2c:	4e 5f       	subi	r20, 0xFE	; 254
   18e2e:	5f 4f       	sbci	r21, 0xFF	; 255
   18e30:	65 e8       	ldi	r22, 0x85	; 133
   18e32:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  CONFIG\n");
   18e34:	80 e0       	ldi	r24, 0x00	; 0
   18e36:	f0 dc       	rcall	.-1568   	; 0x18818 <print_str_P>
   18e38:	8b e7       	ldi	r24, 0x7B	; 123
   18e3a:	9a e2       	ldi	r25, 0x2A	; 42
   18e3c:	1f 92       	push	r1
   18e3e:	9f 93       	push	r25
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   18e40:	8f 93       	push	r24
   18e42:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18e46:	ea 85       	ldd	r30, Y+10	; 0x0a
   18e48:	fb 85       	ldd	r31, Y+11	; 0x0b
   18e4a:	23 a1       	ldd	r18, Z+35	; 0x23
   18e4c:	34 a1       	ldd	r19, Z+36	; 0x24
   18e4e:	40 e0       	ldi	r20, 0x00	; 0
   18e50:	50 e0       	ldi	r21, 0x00	; 0
   18e52:	68 e7       	ldi	r22, 0x78	; 120
            printf("  GEOMETRY\n");
   18e54:	7a e2       	ldi	r23, 0x2A	; 42
   18e56:	80 e0       	ldi	r24, 0x00	; 0
   18e58:	8e dc       	rcall	.-1764   	; 0x18776 <print_var_P>
   18e5a:	8c e6       	ldi	r24, 0x6C	; 108
   18e5c:	9a e2       	ldi	r25, 0x2A	; 42
   18e5e:	1f 92       	push	r1
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   18e60:	9f 93       	push	r25
   18e62:	8f 93       	push	r24
   18e64:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18e68:	ea 85       	ldd	r30, Y+10	; 0x0a
   18e6a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18e6c:	25 a1       	ldd	r18, Z+37	; 0x25
   18e6e:	36 a1       	ldd	r19, Z+38	; 0x26
   18e70:	03 2e       	mov	r0, r19
   18e72:	00 0c       	add	r0, r0
   18e74:	44 0b       	sbc	r20, r20
   18e76:	55 0b       	sbc	r21, r21
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   18e78:	6b e5       	ldi	r22, 0x5B	; 91
   18e7a:	7a e2       	ldi	r23, 0x2A	; 42
   18e7c:	80 e0       	ldi	r24, 0x00	; 0
   18e7e:	7b dc       	rcall	.-1802   	; 0x18776 <print_var_P>
   18e80:	ea 85       	ldd	r30, Y+10	; 0x0a
   18e82:	fb 85       	ldd	r31, Y+11	; 0x0b
   18e84:	27 a1       	ldd	r18, Z+39	; 0x27
   18e86:	30 a5       	ldd	r19, Z+40	; 0x28
   18e88:	03 2e       	mov	r0, r19
   18e8a:	00 0c       	add	r0, r0
   18e8c:	44 0b       	sbc	r20, r20
   18e8e:	55 0b       	sbc	r21, r21
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   18e90:	69 e4       	ldi	r22, 0x49	; 73
   18e92:	7a e2       	ldi	r23, 0x2A	; 42
   18e94:	80 e0       	ldi	r24, 0x00	; 0
   18e96:	6f dc       	rcall	.-1826   	; 0x18776 <print_var_P>
   18e98:	ea 85       	ldd	r30, Y+10	; 0x0a
   18e9a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18e9c:	21 a5       	ldd	r18, Z+41	; 0x29
   18e9e:	32 a5       	ldd	r19, Z+42	; 0x2a
   18ea0:	03 2e       	mov	r0, r19
   18ea2:	00 0c       	add	r0, r0
   18ea4:	44 0b       	sbc	r20, r20
   18ea6:	55 0b       	sbc	r21, r21
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   18ea8:	63 e4       	ldi	r22, 0x43	; 67
   18eaa:	7a e2       	ldi	r23, 0x2A	; 42
   18eac:	80 e0       	ldi	r24, 0x00	; 0
   18eae:	63 dc       	rcall	.-1850   	; 0x18776 <print_var_P>
   18eb0:	ea 85       	ldd	r30, Y+10	; 0x0a
   18eb2:	fb 85       	ldd	r31, Y+11	; 0x0b
   18eb4:	23 a5       	ldd	r18, Z+43	; 0x2b
   18eb6:	34 a5       	ldd	r19, Z+44	; 0x2c
   18eb8:	03 2e       	mov	r0, r19
   18eba:	00 0c       	add	r0, r0
   18ebc:	44 0b       	sbc	r20, r20
   18ebe:	55 0b       	sbc	r21, r21
   18ec0:	69 e3       	ldi	r22, 0x39	; 57
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   18ec2:	7a e2       	ldi	r23, 0x2A	; 42
   18ec4:	80 e0       	ldi	r24, 0x00	; 0
   18ec6:	57 dc       	rcall	.-1874   	; 0x18776 <print_var_P>
   18ec8:	ea 85       	ldd	r30, Y+10	; 0x0a
   18eca:	fb 85       	ldd	r31, Y+11	; 0x0b
   18ecc:	23 a5       	ldd	r18, Z+43	; 0x2b
   18ece:	34 a5       	ldd	r19, Z+44	; 0x2c
   18ed0:	a7 a1       	ldd	r26, Z+39	; 0x27
   18ed2:	b0 a5       	ldd	r27, Z+40	; 0x28
   18ed4:	0e 94 ca ec 	call	0x1d994	; 0x1d994 <__mulhisi3>
   18ed8:	9b 01       	movw	r18, r22
   18eda:	ac 01       	movw	r20, r24
   18edc:	a1 a5       	ldd	r26, Z+41	; 0x29
   18ede:	b2 a5       	ldd	r27, Z+42	; 0x2a
   18ee0:	0e 94 ef ec 	call	0x1d9de	; 0x1d9de <__mulshisi3>
   18ee4:	9b 01       	movw	r18, r22
   18ee6:	ac 01       	movw	r20, r24
   18ee8:	60 e3       	ldi	r22, 0x30	; 48
   18eea:	7a e2       	ldi	r23, 0x2A	; 42
   18eec:	80 e0       	ldi	r24, 0x00	; 0
   18eee:	43 dc       	rcall	.-1914   	; 0x18776 <print_var_P>
   18ef0:	0f b6       	in	r0, 0x3f	; 63
   18ef2:	f8 94       	cli
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   18ef4:	de bf       	out	0x3e, r29	; 62
   18ef6:	0f be       	out	0x3f, r0	; 63
   18ef8:	cd bf       	out	0x3d, r28	; 61
   18efa:	f8 01       	movw	r30, r16
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   18efc:	80 81       	ld	r24, Z
   18efe:	84 30       	cpi	r24, 0x04	; 4
   18f00:	09 f5       	brne	.+66     	; 0x18f44 <display_Config+0x4a8>
   18f02:	23 81       	ldd	r18, Z+3	; 0x03

            printf("PRINTER\n");
   18f04:	34 81       	ldd	r19, Z+4	; 0x04
   18f06:	3b 87       	std	Y+11, r19	; 0x0b
   18f08:	2a 87       	std	Y+10, r18	; 0x0a
   18f0a:	1f 92       	push	r1
   18f0c:	3d 81       	ldd	r19, Y+5	; 0x05
   18f0e:	3f 93       	push	r19
   18f10:	4c 81       	ldd	r20, Y+4	; 0x04
            printf("  CONFIG\n");
   18f12:	4f 93       	push	r20
   18f14:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18f18:	1f 92       	push	r1
   18f1a:	88 85       	ldd	r24, Y+8	; 0x08
   18f1c:	8f 93       	push	r24
   18f1e:	9f 81       	ldd	r25, Y+7	; 0x07
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   18f20:	9f 93       	push	r25
   18f22:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18f26:	ea 85       	ldd	r30, Y+10	; 0x0a
   18f28:	fb 85       	ldd	r31, Y+11	; 0x0b
   18f2a:	20 81       	ld	r18, Z
   18f2c:	30 e0       	ldi	r19, 0x00	; 0
   18f2e:	40 e0       	ldi	r20, 0x00	; 0
   18f30:	50 e0       	ldi	r21, 0x00	; 0
   18f32:	88 2d       	mov	r24, r8
   18f34:	b3 01       	movw	r22, r6
   18f36:	1f dc       	rcall	.-1986   	; 0x18776 <print_var_P>
   18f38:	0f 90       	pop	r0
   18f3a:	0f 90       	pop	r0
   18f3c:	0f 90       	pop	r0
   18f3e:	0f 90       	pop	r0
        }
        printf("\n");
   18f40:	0f 90       	pop	r0
   18f42:	0f 90       	pop	r0
   18f44:	1f 92       	push	r1
   18f46:	fa 81       	ldd	r31, Y+2	; 0x02
   18f48:	ff 93       	push	r31
   18f4a:	29 81       	ldd	r18, Y+1	; 0x01
   18f4c:	2f 93       	push	r18
   18f4e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18f52:	0f 90       	pop	r0
   18f54:	0f 90       	pop	r0
   18f56:	0f 90       	pop	r0
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18f58:	09 5f       	subi	r16, 0xF9	; 249
   18f5a:	1f 4f       	sbci	r17, 0xFF	; 255
   18f5c:	3f e1       	ldi	r19, 0x1F	; 31
   18f5e:	03 37       	cpi	r16, 0x73	; 115
   18f60:	13 07       	cpc	r17, r19
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
    }
    printf("END\n");
   18f62:	09 f0       	breq	.+2      	; 0x18f66 <display_Config+0x4ca>
   18f64:	dd cd       	rjmp	.-1094   	; 0x18b20 <display_Config+0x84>
   18f66:	8e e0       	ldi	r24, 0x0E	; 14
   18f68:	9a e2       	ldi	r25, 0x2A	; 42
   18f6a:	1f 92       	push	r1
   18f6c:	9f 93       	push	r25
   18f6e:	8f 93       	push	r24
    printf("\n");
   18f70:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18f74:	8c e0       	ldi	r24, 0x0C	; 12
   18f76:	9a e2       	ldi	r25, 0x2A	; 42
   18f78:	1f 92       	push	r1
   18f7a:	9f 93       	push	r25
   18f7c:	8f 93       	push	r24
    printf("\n");
   18f7e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18f82:	8a e0       	ldi	r24, 0x0A	; 10
   18f84:	9a e2       	ldi	r25, 0x2A	; 42
   18f86:	1f 92       	push	r1
   18f88:	9f 93       	push	r25
   18f8a:	8f 93       	push	r24
}
   18f8c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   18f90:	0f b6       	in	r0, 0x3f	; 63
   18f92:	f8 94       	cli
   18f94:	de bf       	out	0x3e, r29	; 62
   18f96:	0f be       	out	0x3f, r0	; 63
   18f98:	cd bf       	out	0x3d, r28	; 61
   18f9a:	2b 96       	adiw	r28, 0x0b	; 11
   18f9c:	0f b6       	in	r0, 0x3f	; 63
   18f9e:	f8 94       	cli
   18fa0:	de bf       	out	0x3e, r29	; 62
   18fa2:	0f be       	out	0x3f, r0	; 63
   18fa4:	cd bf       	out	0x3d, r28	; 61
   18fa6:	df 91       	pop	r29
   18fa8:	cf 91       	pop	r28
   18faa:	1f 91       	pop	r17
   18fac:	0f 91       	pop	r16
   18fae:	ef 90       	pop	r14
   18fb0:	df 90       	pop	r13
   18fb2:	cf 90       	pop	r12
   18fb4:	bf 90       	pop	r11
   18fb6:	af 90       	pop	r10
   18fb8:	8f 90       	pop	r8
   18fba:	7f 90       	pop	r7
   18fbc:	6f 90       	pop	r6
   18fbe:	4f 90       	pop	r4
   18fc0:	3f 90       	pop	r3
   18fc2:	2f 90       	pop	r2
   18fc4:	08 95       	ret

00018fc6 <format_drives>:

/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   18fc6:	2f 92       	push	r2
   18fc8:	3f 92       	push	r3
   18fca:	4f 92       	push	r4
   18fcc:	5f 92       	push	r5
   18fce:	6f 92       	push	r6
   18fd0:	7f 92       	push	r7
   18fd2:	8f 92       	push	r8
   18fd4:	af 92       	push	r10
   18fd6:	bf 92       	push	r11
   18fd8:	cf 92       	push	r12
   18fda:	df 92       	push	r13
   18fdc:	ef 92       	push	r14
   18fde:	ff 92       	push	r15
   18fe0:	0f 93       	push	r16
   18fe2:	1f 93       	push	r17
   18fe4:	cf 93       	push	r28
   18fe6:	df 93       	push	r29
   18fe8:	cd b7       	in	r28, 0x3d	; 61
   18fea:	de b7       	in	r29, 0x3e	; 62
   18fec:	cd 55       	subi	r28, 0x5D	; 93
   18fee:	d1 09       	sbc	r29, r1
   18ff0:	0f b6       	in	r0, 0x3f	; 63
   18ff2:	f8 94       	cli
   18ff4:	de bf       	out	0x3e, r29	; 62
   18ff6:	0f be       	out	0x3f, r0	; 63
   18ff8:	cd bf       	out	0x3d, r28	; 61
   18ffa:	8f e1       	ldi	r24, 0x1F	; 31
   18ffc:	a8 2e       	mov	r10, r24
   18ffe:	8f e1       	ldi	r24, 0x1F	; 31
   19000:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   19002:	21 e0       	ldi	r18, 0x01	; 1
   19004:	30 e0       	ldi	r19, 0x00	; 0
   19006:	65 96       	adiw	r28, 0x15	; 21
   19008:	3f af       	std	Y+63, r19	; 0x3f
   1900a:	2e af       	std	Y+62, r18	; 0x3e
   1900c:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   1900e:	81 e0       	ldi	r24, 0x01	; 1
   19010:	90 e0       	ldi	r25, 0x00	; 0
   19012:	63 96       	adiw	r28, 0x13	; 19
   19014:	9f af       	std	Y+63, r25	; 0x3f
   19016:	8e af       	std	Y+62, r24	; 0x3e
   19018:	63 97       	sbiw	r28, 0x13	; 19
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;

                sprintf(label,"AMIGO%d", amigo);
   1901a:	86 eb       	ldi	r24, 0xB6	; 182
   1901c:	99 e2       	ldi	r25, 0x29	; 41
   1901e:	9c 01       	movw	r18, r24
   19020:	40 e0       	ldi	r20, 0x00	; 0
   19022:	68 96       	adiw	r28, 0x18	; 24
   19024:	2d af       	std	Y+61, r18	; 0x3d
   19026:	3e af       	std	Y+62, r19	; 0x3e
   19028:	4f af       	std	Y+63, r20	; 0x3f
   1902a:	68 97       	sbiw	r28, 0x18	; 24
   1902c:	2e 01       	movw	r4, r28
   1902e:	31 e3       	ldi	r19, 0x31	; 49
   19030:	43 0e       	add	r4, r19
   19032:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   19034:	8e eb       	ldi	r24, 0xBE	; 190
   19036:	99 e2       	ldi	r25, 0x29	; 41
   19038:	9c 01       	movw	r18, r24
   1903a:	40 e0       	ldi	r20, 0x00	; 0
   1903c:	6b 96       	adiw	r28, 0x1b	; 27
   1903e:	2d af       	std	Y+61, r18	; 0x3d
   19040:	3e af       	std	Y+62, r19	; 0x3e
   19042:	4f af       	std	Y+63, r20	; 0x3f
   19044:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
                sprintf(label,"SS80-%d", ss80);
   19046:	80 ee       	ldi	r24, 0xE0	; 224
   19048:	99 e2       	ldi	r25, 0x29	; 41
   1904a:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   1904c:	88 ee       	ldi	r24, 0xE8	; 232
   1904e:	99 e2       	ldi	r25, 0x29	; 41
   19050:	9c 01       	movw	r18, r24
   19052:	40 e0       	ldi	r20, 0x00	; 0
   19054:	6e 96       	adiw	r28, 0x1e	; 30
   19056:	2d af       	std	Y+61, r18	; 0x3d
   19058:	3e af       	std	Y+62, r19	; 0x3e
   1905a:	4f af       	std	Y+63, r20	; 0x3f
   1905c:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1905e:	f5 01       	movw	r30, r10
   19060:	80 81       	ld	r24, Z
   19062:	88 23       	and	r24, r24
   19064:	09 f4       	brne	.+2      	; 0x19068 <format_drives+0xa2>
   19066:	bc c0       	rjmp	.+376    	; 0x191e0 <format_drives+0x21a>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   19068:	83 30       	cpi	r24, 0x03	; 3
   1906a:	09 f0       	breq	.+2      	; 0x1906e <format_drives+0xa8>
   1906c:	4c c0       	rjmp	.+152    	; 0x19106 <format_drives+0x140>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1906e:	03 81       	ldd	r16, Z+3	; 0x03
   19070:	14 81       	ldd	r17, Z+4	; 0x04

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   19072:	18 01       	movw	r2, r16
   19074:	f2 e0       	ldi	r31, 0x02	; 2
   19076:	2f 0e       	add	r2, r31
   19078:	31 1c       	adc	r3, r1
   1907a:	be 01       	movw	r22, r28
   1907c:	6f 5f       	subi	r22, 0xFF	; 255
   1907e:	7f 4f       	sbci	r23, 0xFF	; 255
   19080:	c1 01       	movw	r24, r2
   19082:	0e 94 25 7f 	call	0xfe4a	; 0xfe4a <stat>
   19086:	01 96       	adiw	r24, 0x01	; 1
   19088:	a1 f5       	brne	.+104    	; 0x190f2 <format_drives+0x12c>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   1908a:	f8 01       	movw	r30, r16
   1908c:	87 a5       	ldd	r24, Z+47	; 0x2f
   1908e:	90 a9       	ldd	r25, Z+48	; 0x30
   19090:	81 15       	cp	r24, r1
   19092:	91 40       	sbci	r25, 0x01	; 1
   19094:	49 f0       	breq	.+18     	; 0x190a8 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   19096:	1f 92       	push	r1
   19098:	6d 96       	adiw	r28, 0x1d	; 29
   1909a:	2f ad       	ldd	r18, Y+63	; 0x3f
   1909c:	6d 97       	sbiw	r28, 0x1d	; 29
   1909e:	2f 93       	push	r18
   190a0:	6c 96       	adiw	r28, 0x1c	; 28
   190a2:	3f ad       	ldd	r19, Y+63	; 0x3f
   190a4:	6c 97       	sbiw	r28, 0x1c	; 28
   190a6:	51 c0       	rjmp	.+162    	; 0x1914a <format_drives+0x184>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
   190a8:	f8 01       	movw	r30, r16
   190aa:	eb 5b       	subi	r30, 0xBB	; 187
   190ac:	ff 4f       	sbci	r31, 0xFF	; 255
   190ae:	c0 80       	ld	r12, Z
   190b0:	d1 80       	ldd	r13, Z+1	; 0x01
   190b2:	e2 80       	ldd	r14, Z+2	; 0x02
   190b4:	f3 80       	ldd	r15, Z+3	; 0x03
                sprintf(label,"SS80-%d", ss80);
   190b6:	63 96       	adiw	r28, 0x13	; 19
   190b8:	4f ad       	ldd	r20, Y+63	; 0x3f
   190ba:	63 97       	sbiw	r28, 0x13	; 19
   190bc:	4f 93       	push	r20
   190be:	62 96       	adiw	r28, 0x12	; 18
   190c0:	8f ad       	ldd	r24, Y+63	; 0x3f
   190c2:	62 97       	sbiw	r28, 0x12	; 18
   190c4:	8f 93       	push	r24
   190c6:	1f 92       	push	r1
   190c8:	7f 92       	push	r7
   190ca:	6f 92       	push	r6
   190cc:	5f 92       	push	r5
   190ce:	4f 92       	push	r4
   190d0:	0e 94 ed 46 	call	0x8dda	; 0x8dda <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   190d4:	87 01       	movw	r16, r14
   190d6:	76 01       	movw	r14, r12
   190d8:	20 e8       	ldi	r18, 0x80	; 128
   190da:	30 e0       	ldi	r19, 0x00	; 0
   190dc:	40 e0       	ldi	r20, 0x00	; 0
   190de:	50 e0       	ldi	r21, 0x00	; 0
   190e0:	b2 01       	movw	r22, r4
   190e2:	c1 01       	movw	r24, r2
   190e4:	0e 94 88 e7 	call	0x1cf10	; 0x1cf10 <lif_create_image>
   190e8:	0f b6       	in	r0, 0x3f	; 63
   190ea:	f8 94       	cli
   190ec:	de bf       	out	0x3e, r29	; 62
   190ee:	0f be       	out	0x3f, r0	; 63
   190f0:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   190f2:	63 96       	adiw	r28, 0x13	; 19
   190f4:	2e ad       	ldd	r18, Y+62	; 0x3e
   190f6:	3f ad       	ldd	r19, Y+63	; 0x3f
   190f8:	63 97       	sbiw	r28, 0x13	; 19
   190fa:	2f 5f       	subi	r18, 0xFF	; 255
   190fc:	3f 4f       	sbci	r19, 0xFF	; 255
   190fe:	63 96       	adiw	r28, 0x13	; 19
   19100:	3f af       	std	Y+63, r19	; 0x3f
   19102:	2e af       	std	Y+62, r18	; 0x3e
   19104:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   19106:	f5 01       	movw	r30, r10
   19108:	80 81       	ld	r24, Z
   1910a:	81 30       	cpi	r24, 0x01	; 1
   1910c:	09 f0       	breq	.+2      	; 0x19110 <format_drives+0x14a>
   1910e:	68 c0       	rjmp	.+208    	; 0x191e0 <format_drives+0x21a>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   19110:	03 81       	ldd	r16, Z+3	; 0x03
   19112:	14 81       	ldd	r17, Z+4	; 0x04
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   19114:	68 01       	movw	r12, r16
   19116:	f2 e0       	ldi	r31, 0x02	; 2
   19118:	cf 0e       	add	r12, r31
   1911a:	d1 1c       	adc	r13, r1
   1911c:	be 01       	movw	r22, r28
   1911e:	6f 5f       	subi	r22, 0xFF	; 255
   19120:	7f 4f       	sbci	r23, 0xFF	; 255
   19122:	c6 01       	movw	r24, r12
   19124:	0e 94 25 7f 	call	0xfe4a	; 0xfe4a <stat>
   19128:	01 96       	adiw	r24, 0x01	; 1
   1912a:	09 f0       	breq	.+2      	; 0x1912e <format_drives+0x168>
   1912c:	50 c0       	rjmp	.+160    	; 0x191ce <format_drives+0x208>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   1912e:	f8 01       	movw	r30, r16
   19130:	85 a1       	ldd	r24, Z+37	; 0x25
   19132:	96 a1       	ldd	r25, Z+38	; 0x26
   19134:	81 15       	cp	r24, r1
   19136:	91 40       	sbci	r25, 0x01	; 1
   19138:	79 f0       	breq	.+30     	; 0x19158 <format_drives+0x192>
                {
                    printf("Can not use non 256 byte sectors\n");
   1913a:	1f 92       	push	r1
   1913c:	6a 96       	adiw	r28, 0x1a	; 26
   1913e:	2f ad       	ldd	r18, Y+63	; 0x3f
   19140:	6a 97       	sbiw	r28, 0x1a	; 26
   19142:	2f 93       	push	r18
   19144:	69 96       	adiw	r28, 0x19	; 25
   19146:	3f ad       	ldd	r19, Y+63	; 0x3f
   19148:	69 97       	sbiw	r28, 0x19	; 25
   1914a:	3f 93       	push	r19
   1914c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                    continue;
   19150:	0f 90       	pop	r0
   19152:	0f 90       	pop	r0
   19154:	0f 90       	pop	r0
   19156:	44 c0       	rjmp	.+136    	; 0x191e0 <format_drives+0x21a>
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;
   19158:	f8 01       	movw	r30, r16
   1915a:	47 a1       	ldd	r20, Z+39	; 0x27
   1915c:	50 a5       	ldd	r21, Z+40	; 0x28
   1915e:	81 a5       	ldd	r24, Z+41	; 0x29
   19160:	92 a5       	ldd	r25, Z+42	; 0x2a
   19162:	48 9f       	mul	r20, r24
   19164:	90 01       	movw	r18, r0
   19166:	49 9f       	mul	r20, r25
   19168:	30 0d       	add	r19, r0
   1916a:	58 9f       	mul	r21, r24
   1916c:	30 0d       	add	r19, r0
   1916e:	11 24       	eor	r1, r1
   19170:	83 a5       	ldd	r24, Z+43	; 0x2b
   19172:	94 a5       	ldd	r25, Z+44	; 0x2c
   19174:	28 9f       	mul	r18, r24
   19176:	70 01       	movw	r14, r0
   19178:	29 9f       	mul	r18, r25
   1917a:	f0 0c       	add	r15, r0
   1917c:	38 9f       	mul	r19, r24
   1917e:	f0 0c       	add	r15, r0
   19180:	11 24       	eor	r1, r1

                sprintf(label,"AMIGO%d", amigo);
   19182:	65 96       	adiw	r28, 0x15	; 21
   19184:	ff ad       	ldd	r31, Y+63	; 0x3f
   19186:	65 97       	sbiw	r28, 0x15	; 21
   19188:	ff 93       	push	r31
   1918a:	64 96       	adiw	r28, 0x14	; 20
   1918c:	2f ad       	ldd	r18, Y+63	; 0x3f
   1918e:	64 97       	sbiw	r28, 0x14	; 20
   19190:	2f 93       	push	r18
   19192:	1f 92       	push	r1
   19194:	67 96       	adiw	r28, 0x17	; 23
   19196:	3f ad       	ldd	r19, Y+63	; 0x3f
   19198:	67 97       	sbiw	r28, 0x17	; 23
   1919a:	3f 93       	push	r19
   1919c:	66 96       	adiw	r28, 0x16	; 22
   1919e:	4f ad       	ldd	r20, Y+63	; 0x3f
   191a0:	66 97       	sbiw	r28, 0x16	; 22
   191a2:	4f 93       	push	r20
   191a4:	5f 92       	push	r5
   191a6:	4f 92       	push	r4
   191a8:	0e 94 ed 46 	call	0x8dda	; 0x8dda <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   191ac:	0f 2c       	mov	r0, r15
   191ae:	00 0c       	add	r0, r0
   191b0:	00 0b       	sbc	r16, r16
   191b2:	11 0b       	sbc	r17, r17
   191b4:	2f e0       	ldi	r18, 0x0F	; 15
   191b6:	30 e0       	ldi	r19, 0x00	; 0
   191b8:	40 e0       	ldi	r20, 0x00	; 0
   191ba:	50 e0       	ldi	r21, 0x00	; 0
   191bc:	b2 01       	movw	r22, r4
   191be:	c6 01       	movw	r24, r12
   191c0:	0e 94 88 e7 	call	0x1cf10	; 0x1cf10 <lif_create_image>
   191c4:	0f b6       	in	r0, 0x3f	; 63
   191c6:	f8 94       	cli
   191c8:	de bf       	out	0x3e, r29	; 62
   191ca:	0f be       	out	0x3f, r0	; 63
   191cc:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   191ce:	65 96       	adiw	r28, 0x15	; 21
   191d0:	ee ad       	ldd	r30, Y+62	; 0x3e
   191d2:	ff ad       	ldd	r31, Y+63	; 0x3f
   191d4:	65 97       	sbiw	r28, 0x15	; 21
   191d6:	31 96       	adiw	r30, 0x01	; 1
   191d8:	65 96       	adiw	r28, 0x15	; 21
   191da:	ff af       	std	Y+63, r31	; 0x3f
   191dc:	ee af       	std	Y+62, r30	; 0x3e
   191de:	65 97       	sbiw	r28, 0x15	; 21
   191e0:	f7 e0       	ldi	r31, 0x07	; 7
   191e2:	af 0e       	add	r10, r31
   191e4:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   191e6:	23 e7       	ldi	r18, 0x73	; 115
   191e8:	3f e1       	ldi	r19, 0x1F	; 31
   191ea:	2a 15       	cp	r18, r10
   191ec:	3b 05       	cpc	r19, r11
   191ee:	09 f0       	breq	.+2      	; 0x191f2 <format_drives+0x22c>
   191f0:	36 cf       	rjmp	.-404    	; 0x1905e <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   191f2:	84 eb       	ldi	r24, 0xB4	; 180
   191f4:	99 e2       	ldi	r25, 0x29	; 41
   191f6:	1f 92       	push	r1
   191f8:	9f 93       	push	r25
   191fa:	8f 93       	push	r24
   191fc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
}
   19200:	0f 90       	pop	r0
   19202:	0f 90       	pop	r0
   19204:	0f 90       	pop	r0
   19206:	c3 5a       	subi	r28, 0xA3	; 163
   19208:	df 4f       	sbci	r29, 0xFF	; 255
   1920a:	0f b6       	in	r0, 0x3f	; 63
   1920c:	f8 94       	cli
   1920e:	de bf       	out	0x3e, r29	; 62
   19210:	0f be       	out	0x3f, r0	; 63
   19212:	cd bf       	out	0x3d, r28	; 61
   19214:	df 91       	pop	r29
   19216:	cf 91       	pop	r28
   19218:	1f 91       	pop	r17
   1921a:	0f 91       	pop	r16
   1921c:	ff 90       	pop	r15
   1921e:	ef 90       	pop	r14
   19220:	df 90       	pop	r13
   19222:	cf 90       	pop	r12
   19224:	bf 90       	pop	r11
   19226:	af 90       	pop	r10
   19228:	8f 90       	pop	r8
   1922a:	7f 90       	pop	r7
   1922c:	6f 90       	pop	r6
   1922e:	5f 90       	pop	r5
   19230:	4f 90       	pop	r4
   19232:	3f 90       	pop	r3
   19234:	2f 90       	pop	r2
   19236:	08 95       	ret

00019238 <controller_send_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to send
/// @param[in] len: number of bytes to send (if 0 then length of string)
/// @return  number of bytes sent
int controller_send_str(uint8_t from, uint8_t to, char *str, int len)
{
   19238:	a2 e0       	ldi	r26, 0x02	; 2
   1923a:	b0 e0       	ldi	r27, 0x00	; 0
   1923c:	e2 e2       	ldi	r30, 0x22	; 34
   1923e:	f9 ec       	ldi	r31, 0xC9	; 201
   19240:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   19244:	e8 2e       	mov	r14, r24
   19246:	f6 2e       	mov	r15, r22
   19248:	6a 01       	movw	r12, r20
   1924a:	89 01       	movw	r16, r18
    uint16_t status = 0;
   1924c:	1a 82       	std	Y+2, r1	; 0x02
   1924e:	19 82       	std	Y+1, r1	; 0x01
    int size;
    if(len == 0)
   19250:	23 2b       	or	r18, r19
   19252:	41 f4       	brne	.+16     	; 0x19264 <controller_send_str+0x2c>
        len = strlen((char *)str);
   19254:	fa 01       	movw	r30, r20
   19256:	01 90       	ld	r0, Z+
   19258:	00 20       	and	r0, r0
   1925a:	e9 f7       	brne	.-6      	; 0x19256 <controller_send_str+0x1e>
   1925c:	31 97       	sbiw	r30, 0x01	; 1
   1925e:	8f 01       	movw	r16, r30
   19260:	04 1b       	sub	r16, r20
   19262:	15 0b       	sbc	r17, r21

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   19264:	8f e5       	ldi	r24, 0x5F	; 95
   19266:	94 e0       	ldi	r25, 0x04	; 4
   19268:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   1926c:	8f e3       	ldi	r24, 0x3F	; 63
   1926e:	94 e0       	ldi	r25, 0x04	; 4
   19270:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);// GPIB talker
   19274:	8e 2d       	mov	r24, r14
   19276:	80 64       	ori	r24, 0x40	; 64
   19278:	90 e0       	ldi	r25, 0x00	; 0
   1927a:	94 60       	ori	r25, 0x04	; 4
   1927c:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);  // GPIB listener
   19280:	8f 2d       	mov	r24, r15
   19282:	80 62       	ori	r24, 0x20	; 32
   19284:	90 e0       	ldi	r25, 0x00	; 0
   19286:	94 60       	ori	r25, 0x04	; 4
   19288:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>

    status = EOI_FLAG;
   1928c:	80 e0       	ldi	r24, 0x00	; 0
   1928e:	91 e0       	ldi	r25, 0x01	; 1
   19290:	9a 83       	std	Y+2, r25	; 0x02
   19292:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_write_str((uint8_t *)str, len, &status);
   19294:	ae 01       	movw	r20, r28
   19296:	4f 5f       	subi	r20, 0xFF	; 255
   19298:	5f 4f       	sbci	r21, 0xFF	; 255
   1929a:	b8 01       	movw	r22, r16
   1929c:	c6 01       	movw	r24, r12
   1929e:	0e 94 9d 93 	call	0x1273a	; 0x1273a <gpib_write_str>
   192a2:	8c 01       	movw	r16, r24

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   192a4:	8f e5       	ldi	r24, 0x5F	; 95
   192a6:	94 e0       	ldi	r25, 0x04	; 4
   192a8:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   192ac:	8f e3       	ldi	r24, 0x3F	; 63
   192ae:	94 e0       	ldi	r25, 0x04	; 4
   192b0:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    return(size);
}
   192b4:	c8 01       	movw	r24, r16
   192b6:	22 96       	adiw	r28, 0x02	; 2
   192b8:	e8 e0       	ldi	r30, 0x08	; 8
   192ba:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

000192be <controller_read_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to read
/// @param[in] len: maximum number of bytes to read
/// @return  number of bytes read
int controller_read_str(uint8_t from, uint8_t to, char *str, int len)
{
   192be:	a2 e0       	ldi	r26, 0x02	; 2
   192c0:	b0 e0       	ldi	r27, 0x00	; 0
   192c2:	e5 e6       	ldi	r30, 0x65	; 101
   192c4:	f9 ec       	ldi	r31, 0xC9	; 201
   192c6:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   192ca:	c8 2e       	mov	r12, r24
   192cc:	d6 2e       	mov	r13, r22
   192ce:	7a 01       	movw	r14, r20
   192d0:	89 01       	movw	r16, r18
    uint16_t status;
    int size;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   192d2:	8f e5       	ldi	r24, 0x5F	; 95
   192d4:	94 e0       	ldi	r25, 0x04	; 4
   192d6:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   192da:	8f e3       	ldi	r24, 0x3F	; 63
   192dc:	94 e0       	ldi	r25, 0x04	; 4
   192de:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   192e2:	8c 2d       	mov	r24, r12
   192e4:	80 64       	ori	r24, 0x40	; 64
   192e6:	90 e0       	ldi	r25, 0x00	; 0
   192e8:	94 60       	ori	r25, 0x04	; 4
   192ea:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   192ee:	8d 2d       	mov	r24, r13
   192f0:	80 62       	ori	r24, 0x20	; 32
   192f2:	90 e0       	ldi	r25, 0x00	; 0
   192f4:	94 60       	ori	r25, 0x04	; 4
   192f6:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>

    status = EOI_FLAG;
   192fa:	80 e0       	ldi	r24, 0x00	; 0
   192fc:	91 e0       	ldi	r25, 0x01	; 1
   192fe:	9a 83       	std	Y+2, r25	; 0x02
   19300:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_read_str((uint8_t *)str,len, &status);
   19302:	ae 01       	movw	r20, r28
   19304:	4f 5f       	subi	r20, 0xFF	; 255
   19306:	5f 4f       	sbci	r21, 0xFF	; 255
   19308:	b8 01       	movw	r22, r16
   1930a:	c7 01       	movw	r24, r14
   1930c:	0e 94 ef 92 	call	0x125de	; 0x125de <gpib_read_str>
   19310:	6c 01       	movw	r12, r24
    if(size > 0)
   19312:	18 16       	cp	r1, r24
   19314:	19 06       	cpc	r1, r25
   19316:	64 f4       	brge	.+24     	; 0x19330 <controller_read_str+0x72>
    {
        if(size < len)
   19318:	80 17       	cp	r24, r16
   1931a:	91 07       	cpc	r25, r17
   1931c:	24 f4       	brge	.+8      	; 0x19326 <controller_read_str+0x68>
            str[size] = 0;
   1931e:	f7 01       	movw	r30, r14
   19320:	e8 0f       	add	r30, r24
   19322:	f9 1f       	adc	r31, r25
   19324:	04 c0       	rjmp	.+8      	; 0x1932e <controller_read_str+0x70>
        else
            str[len-1] = 0;
   19326:	0e 0d       	add	r16, r14
   19328:	1f 1d       	adc	r17, r15
   1932a:	f8 01       	movw	r30, r16
   1932c:	31 97       	sbiw	r30, 0x01	; 1
   1932e:	10 82       	st	Z, r1
    }

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   19330:	8f e5       	ldi	r24, 0x5F	; 95
   19332:	94 e0       	ldi	r25, 0x04	; 4
   19334:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   19338:	8f e3       	ldi	r24, 0x3F	; 63
   1933a:	94 e0       	ldi	r25, 0x04	; 4
   1933c:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    return(size);
}
   19340:	c6 01       	movw	r24, r12
   19342:	22 96       	adiw	r28, 0x02	; 2
   19344:	e8 e0       	ldi	r30, 0x08	; 8
   19346:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0001934a <controller_read_trace>:
/// Stops reading at EOI
/// @param[in] from:    GPIB talker
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
   1934a:	cf 92       	push	r12
   1934c:	df 92       	push	r13
   1934e:	ef 92       	push	r14
   19350:	ff 92       	push	r15
   19352:	cf 93       	push	r28
   19354:	df 93       	push	r29
   19356:	d8 2f       	mov	r29, r24
   19358:	c6 2f       	mov	r28, r22
    uint16_t ch;
    long len =0;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   1935a:	8f e5       	ldi	r24, 0x5F	; 95
   1935c:	94 e0       	ldi	r25, 0x04	; 4
   1935e:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   19362:	8f e3       	ldi	r24, 0x3F	; 63
   19364:	94 e0       	ldi	r25, 0x04	; 4
   19366:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   1936a:	d0 64       	ori	r29, 0x40	; 64
   1936c:	8d 2f       	mov	r24, r29
   1936e:	90 e0       	ldi	r25, 0x00	; 0
   19370:	94 60       	ori	r25, 0x04	; 4
   19372:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   19376:	c0 62       	ori	r28, 0x20	; 32
   19378:	8c 2f       	mov	r24, r28
   1937a:	90 e0       	ldi	r25, 0x00	; 0
   1937c:	94 60       	ori	r25, 0x04	; 4
   1937e:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
    uint16_t ch;
    long len =0;
   19382:	c1 2c       	mov	r12, r1
   19384:	d1 2c       	mov	r13, r1
   19386:	76 01       	movw	r14, r12
    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener

    while(1) // loop until EOI or user ABORT
    {
        if(uart_keyhit(0))
   19388:	80 e0       	ldi	r24, 0x00	; 0
   1938a:	0e 94 bc 2c 	call	0x5978	; 0x5978 <uart_keyhit>
   1938e:	89 2b       	or	r24, r25
   19390:	79 f4       	brne	.+30     	; 0x193b0 <controller_read_trace+0x66>
            break;
        ch = gpib_read_byte(0);
   19392:	80 e0       	ldi	r24, 0x00	; 0
   19394:	90 e0       	ldi	r25, 0x00	; 0
   19396:	0e 94 15 92 	call	0x1242a	; 0x1242a <gpib_read_byte>
   1939a:	ec 01       	movw	r28, r24
        gpib_decode(ch);
   1939c:	0e 94 eb 92 	call	0x125d6	; 0x125d6 <gpib_decode>
       if(ch & EOI_FLAG)
   193a0:	d0 fd       	sbrc	r29, 0
   193a2:	06 c0       	rjmp	.+12     	; 0x193b0 <controller_read_trace+0x66>
            break;
        ++len;
   193a4:	8f ef       	ldi	r24, 0xFF	; 255
   193a6:	c8 1a       	sub	r12, r24
   193a8:	d8 0a       	sbc	r13, r24
   193aa:	e8 0a       	sbc	r14, r24
   193ac:	f8 0a       	sbc	r15, r24
    }
   193ae:	ec cf       	rjmp	.-40     	; 0x19388 <controller_read_trace+0x3e>

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   193b0:	8f e5       	ldi	r24, 0x5F	; 95
   193b2:	94 e0       	ldi	r25, 0x04	; 4
   193b4:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   193b8:	8f e3       	ldi	r24, 0x3F	; 63
   193ba:	94 e0       	ldi	r25, 0x04	; 4
   193bc:	0e 94 14 8f 	call	0x11e28	; 0x11e28 <gpib_write_byte>
    return(len);
}
   193c0:	c6 01       	movw	r24, r12
   193c2:	df 91       	pop	r29
   193c4:	cf 91       	pop	r28
   193c6:	ff 90       	pop	r15
   193c8:	ef 90       	pop	r14
   193ca:	df 90       	pop	r13
   193cc:	cf 90       	pop	r12
   193ce:	08 95       	ret

000193d0 <lif_help>:
   193d0:	cf 93       	push	r28
   193d2:	df 93       	push	r29
   193d4:	ec 01       	movw	r28, r24
   193d6:	8a e3       	ldi	r24, 0x3A	; 58
   193d8:	96 e4       	ldi	r25, 0x46	; 70
   193da:	1f 92       	push	r1
   193dc:	9f 93       	push	r25
   193de:	8f 93       	push	r24
   193e0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   193e4:	0f 90       	pop	r0
   193e6:	0f 90       	pop	r0
   193e8:	0f 90       	pop	r0
   193ea:	cd 2b       	or	r28, r29
   193ec:	51 f0       	breq	.+20     	; 0x19402 <lif_help+0x32>
   193ee:	85 e9       	ldi	r24, 0x95	; 149
   193f0:	94 e4       	ldi	r25, 0x44	; 68
   193f2:	1f 92       	push	r1
   193f4:	9f 93       	push	r25
   193f6:	8f 93       	push	r24
   193f8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   193fc:	0f 90       	pop	r0
   193fe:	0f 90       	pop	r0
   19400:	0f 90       	pop	r0
   19402:	df 91       	pop	r29
   19404:	cf 91       	pop	r28
   19406:	08 95       	ret

00019408 <lif_calloc>:
   19408:	ef 92       	push	r14
   1940a:	ff 92       	push	r15
   1940c:	0f 93       	push	r16
   1940e:	1f 93       	push	r17
   19410:	cf 93       	push	r28
   19412:	df 93       	push	r29
   19414:	16 2f       	mov	r17, r22
   19416:	07 2f       	mov	r16, r23
   19418:	f8 2e       	mov	r15, r24
   1941a:	e9 2e       	mov	r14, r25
   1941c:	61 e0       	ldi	r22, 0x01	; 1
   1941e:	70 e0       	ldi	r23, 0x00	; 0
   19420:	81 2f       	mov	r24, r17
   19422:	90 2f       	mov	r25, r16
   19424:	0e 94 26 2a 	call	0x544c	; 0x544c <safecalloc>
   19428:	ec 01       	movw	r28, r24
   1942a:	89 2b       	or	r24, r25
   1942c:	99 f4       	brne	.+38     	; 0x19454 <lif_calloc+0x4c>
   1942e:	ef 92       	push	r14
   19430:	ff 92       	push	r15
   19432:	0f 93       	push	r16
   19434:	1f 93       	push	r17
   19436:	8c e6       	ldi	r24, 0x6C	; 108
   19438:	94 e4       	ldi	r25, 0x44	; 68
   1943a:	1f 92       	push	r1
   1943c:	9f 93       	push	r25
   1943e:	8f 93       	push	r24
   19440:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19444:	8d b7       	in	r24, 0x3d	; 61
   19446:	9e b7       	in	r25, 0x3e	; 62
   19448:	07 96       	adiw	r24, 0x07	; 7
   1944a:	0f b6       	in	r0, 0x3f	; 63
   1944c:	f8 94       	cli
   1944e:	9e bf       	out	0x3e, r25	; 62
   19450:	0f be       	out	0x3f, r0	; 63
   19452:	8d bf       	out	0x3d, r24	; 61
   19454:	ce 01       	movw	r24, r28
   19456:	cd b7       	in	r28, 0x3d	; 61
   19458:	de b7       	in	r29, 0x3e	; 62
   1945a:	e6 e0       	ldi	r30, 0x06	; 6
   1945c:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00019460 <lif_free>:
   19460:	00 97       	sbiw	r24, 0x00	; 0
   19462:	59 f4       	brne	.+22     	; 0x1947a <lif_free+0x1a>
   19464:	84 e5       	ldi	r24, 0x54	; 84
   19466:	94 e4       	ldi	r25, 0x44	; 68
   19468:	1f 92       	push	r1
   1946a:	9f 93       	push	r25
   1946c:	8f 93       	push	r24
   1946e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19472:	0f 90       	pop	r0
   19474:	0f 90       	pop	r0
   19476:	0f 90       	pop	r0
   19478:	08 95       	ret
   1947a:	0c 94 6f 2a 	jmp	0x54de	; 0x54de <safefree>
   1947e:	08 95       	ret

00019480 <lif_stralloc>:
   19480:	0f 93       	push	r16
   19482:	1f 93       	push	r17
   19484:	cf 93       	push	r28
   19486:	df 93       	push	r29
   19488:	ec 01       	movw	r28, r24
   1948a:	fc 01       	movw	r30, r24
   1948c:	01 90       	ld	r0, Z+
   1948e:	00 20       	and	r0, r0
   19490:	e9 f7       	brne	.-6      	; 0x1948c <lif_stralloc+0xc>
   19492:	bf 01       	movw	r22, r30
   19494:	68 1b       	sub	r22, r24
   19496:	79 0b       	sbc	r23, r25
   19498:	6d 5f       	subi	r22, 0xFD	; 253
   1949a:	7f 4f       	sbci	r23, 0xFF	; 255
   1949c:	07 2e       	mov	r0, r23
   1949e:	00 0c       	add	r0, r0
   194a0:	88 0b       	sbc	r24, r24
   194a2:	99 0b       	sbc	r25, r25
   194a4:	b1 df       	rcall	.-158    	; 0x19408 <lif_calloc>
   194a6:	8c 01       	movw	r16, r24
   194a8:	00 97       	sbiw	r24, 0x00	; 0
   194aa:	19 f0       	breq	.+6      	; 0x194b2 <lif_stralloc+0x32>
   194ac:	be 01       	movw	r22, r28
   194ae:	0e 94 4e 32 	call	0x649c	; 0x649c <strcpy>
   194b2:	c8 01       	movw	r24, r16
   194b4:	df 91       	pop	r29
   194b6:	cf 91       	pop	r28
   194b8:	1f 91       	pop	r17
   194ba:	0f 91       	pop	r16
   194bc:	08 95       	ret

000194be <lif_open>:
   194be:	ef 92       	push	r14
   194c0:	ff 92       	push	r15
   194c2:	0f 93       	push	r16
   194c4:	1f 93       	push	r17
   194c6:	cf 93       	push	r28
   194c8:	df 93       	push	r29
   194ca:	18 2f       	mov	r17, r24
   194cc:	09 2f       	mov	r16, r25
   194ce:	f6 2e       	mov	r15, r22
   194d0:	e7 2e       	mov	r14, r23
   194d2:	0e 94 11 84 	call	0x10822	; 0x10822 <fopen>
   194d6:	ec 01       	movw	r28, r24
   194d8:	89 2b       	or	r24, r25
   194da:	99 f4       	brne	.+38     	; 0x19502 <lif_open+0x44>
   194dc:	ef 92       	push	r14
   194de:	ff 92       	push	r15
   194e0:	0f 93       	push	r16
   194e2:	1f 93       	push	r17
   194e4:	8f e2       	ldi	r24, 0x2F	; 47
   194e6:	94 e4       	ldi	r25, 0x44	; 68
   194e8:	1f 92       	push	r1
   194ea:	9f 93       	push	r25
   194ec:	8f 93       	push	r24
   194ee:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   194f2:	8d b7       	in	r24, 0x3d	; 61
   194f4:	9e b7       	in	r25, 0x3e	; 62
   194f6:	07 96       	adiw	r24, 0x07	; 7
   194f8:	0f b6       	in	r0, 0x3f	; 63
   194fa:	f8 94       	cli
   194fc:	9e bf       	out	0x3e, r25	; 62
   194fe:	0f be       	out	0x3f, r0	; 63
   19500:	8d bf       	out	0x3d, r24	; 61
   19502:	ce 01       	movw	r24, r28
   19504:	cd b7       	in	r28, 0x3d	; 61
   19506:	de b7       	in	r29, 0x3e	; 62
   19508:	e6 e0       	ldi	r30, 0x06	; 6
   1950a:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0001950e <lif_stat>:
   1950e:	0f 93       	push	r16
   19510:	1f 93       	push	r17
   19512:	cf 93       	push	r28
   19514:	df 93       	push	r29
   19516:	18 2f       	mov	r17, r24
   19518:	09 2f       	mov	r16, r25
   1951a:	d6 2f       	mov	r29, r22
   1951c:	c7 2f       	mov	r28, r23
   1951e:	0e 94 25 7f 	call	0xfe4a	; 0xfe4a <stat>
   19522:	97 ff       	sbrs	r25, 7
   19524:	11 c0       	rjmp	.+34     	; 0x19548 <lif_stat+0x3a>
   19526:	0f 93       	push	r16
   19528:	1f 93       	push	r17
   1952a:	86 e1       	ldi	r24, 0x16	; 22
   1952c:	94 e4       	ldi	r25, 0x44	; 68
   1952e:	1f 92       	push	r1
   19530:	9f 93       	push	r25
   19532:	8f 93       	push	r24
   19534:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19538:	0f 90       	pop	r0
   1953a:	0f 90       	pop	r0
   1953c:	0f 90       	pop	r0
   1953e:	0f 90       	pop	r0
   19540:	0f 90       	pop	r0
   19542:	80 e0       	ldi	r24, 0x00	; 0
   19544:	90 e0       	ldi	r25, 0x00	; 0
   19546:	02 c0       	rjmp	.+4      	; 0x1954c <lif_stat+0x3e>
   19548:	8d 2f       	mov	r24, r29
   1954a:	9c 2f       	mov	r25, r28
   1954c:	df 91       	pop	r29
   1954e:	cf 91       	pop	r28
   19550:	1f 91       	pop	r17
   19552:	0f 91       	pop	r16
   19554:	08 95       	ret

00019556 <lif_seek_msg>:
   19556:	a0 e0       	ldi	r26, 0x00	; 0
   19558:	b0 e0       	ldi	r27, 0x00	; 0
   1955a:	e1 eb       	ldi	r30, 0xB1	; 177
   1955c:	fa ec       	ldi	r31, 0xCA	; 202
   1955e:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   19562:	ec 01       	movw	r28, r24
   19564:	6a 01       	movw	r12, r20
   19566:	7b 01       	movw	r14, r22
   19568:	12 2f       	mov	r17, r18
   1956a:	03 2f       	mov	r16, r19
   1956c:	0e 94 51 80 	call	0x100a2	; 0x100a2 <ftell>
   19570:	6c 15       	cp	r22, r12
   19572:	7d 05       	cpc	r23, r13
   19574:	8e 05       	cpc	r24, r14
   19576:	9f 05       	cpc	r25, r15
   19578:	19 f4       	brne	.+6      	; 0x19580 <lif_seek_msg+0x2a>
   1957a:	81 e0       	ldi	r24, 0x01	; 1
   1957c:	90 e0       	ldi	r25, 0x00	; 0
   1957e:	20 c0       	rjmp	.+64     	; 0x195c0 <lif_seek_msg+0x6a>
   19580:	20 e0       	ldi	r18, 0x00	; 0
   19582:	30 e0       	ldi	r19, 0x00	; 0
   19584:	b7 01       	movw	r22, r14
   19586:	a6 01       	movw	r20, r12
   19588:	ce 01       	movw	r24, r28
   1958a:	0e 94 d3 80 	call	0x101a6	; 0x101a6 <fseek>
   1958e:	97 ff       	sbrs	r25, 7
   19590:	f4 cf       	rjmp	.-24     	; 0x1957a <lif_seek_msg+0x24>
   19592:	ff 92       	push	r15
   19594:	ef 92       	push	r14
   19596:	df 92       	push	r13
   19598:	cf 92       	push	r12
   1959a:	0f 93       	push	r16
   1959c:	1f 93       	push	r17
   1959e:	85 ef       	ldi	r24, 0xF5	; 245
   195a0:	93 e4       	ldi	r25, 0x43	; 67
   195a2:	1f 92       	push	r1
   195a4:	9f 93       	push	r25
   195a6:	8f 93       	push	r24
   195a8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   195ac:	8d b7       	in	r24, 0x3d	; 61
   195ae:	9e b7       	in	r25, 0x3e	; 62
   195b0:	09 96       	adiw	r24, 0x09	; 9
   195b2:	0f b6       	in	r0, 0x3f	; 63
   195b4:	f8 94       	cli
   195b6:	9e bf       	out	0x3e, r25	; 62
   195b8:	0f be       	out	0x3f, r0	; 63
   195ba:	8d bf       	out	0x3d, r24	; 61
   195bc:	80 e0       	ldi	r24, 0x00	; 0
   195be:	90 e0       	ldi	r25, 0x00	; 0
   195c0:	cd b7       	in	r28, 0x3d	; 61
   195c2:	de b7       	in	r29, 0x3e	; 62
   195c4:	e8 e0       	ldi	r30, 0x08	; 8
   195c6:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

000195ca <lif_read>:
   195ca:	a0 e0       	ldi	r26, 0x00	; 0
   195cc:	b0 e0       	ldi	r27, 0x00	; 0
   195ce:	eb ee       	ldi	r30, 0xEB	; 235
   195d0:	fa ec       	ldi	r31, 0xCA	; 202
   195d2:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   195d6:	ec 01       	movw	r28, r24
   195d8:	7b 01       	movw	r14, r22
   195da:	b2 2e       	mov	r11, r18
   195dc:	a3 2e       	mov	r10, r19
   195de:	94 2e       	mov	r9, r20
   195e0:	85 2e       	mov	r8, r21
   195e2:	28 81       	ld	r18, Y
   195e4:	39 81       	ldd	r19, Y+1	; 0x01
   195e6:	4b 2d       	mov	r20, r11
   195e8:	5a 2d       	mov	r21, r10
   195ea:	69 2d       	mov	r22, r9
   195ec:	78 2d       	mov	r23, r8
   195ee:	8a 81       	ldd	r24, Y+2	; 0x02
   195f0:	9b 81       	ldd	r25, Y+3	; 0x03
   195f2:	b1 df       	rcall	.-158    	; 0x19556 <lif_seek_msg>
   195f4:	89 2b       	or	r24, r25
   195f6:	b9 f1       	breq	.+110    	; 0x19666 <lif_read+0x9c>
   195f8:	2a 81       	ldd	r18, Y+2	; 0x02
   195fa:	3b 81       	ldd	r19, Y+3	; 0x03
   195fc:	a8 01       	movw	r20, r16
   195fe:	61 e0       	ldi	r22, 0x01	; 1
   19600:	70 e0       	ldi	r23, 0x00	; 0
   19602:	c7 01       	movw	r24, r14
   19604:	0e 94 67 81 	call	0x102ce	; 0x102ce <fread>
   19608:	6c 01       	movw	r12, r24
   1960a:	e1 2c       	mov	r14, r1
   1960c:	f1 2c       	mov	r15, r1
   1960e:	b8 01       	movw	r22, r16
   19610:	01 2e       	mov	r0, r17
   19612:	00 0c       	add	r0, r0
   19614:	88 0b       	sbc	r24, r24
   19616:	99 0b       	sbc	r25, r25
   19618:	c6 16       	cp	r12, r22
   1961a:	d7 06       	cpc	r13, r23
   1961c:	e8 06       	cpc	r14, r24
   1961e:	f9 06       	cpc	r15, r25
   19620:	41 f1       	breq	.+80     	; 0x19672 <lif_read+0xa8>
   19622:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19626:	80 ff       	sbrs	r24, 0
   19628:	22 c0       	rjmp	.+68     	; 0x1966e <lif_read+0xa4>
   1962a:	1f 93       	push	r17
   1962c:	0f 93       	push	r16
   1962e:	1f 92       	push	r1
   19630:	1f 92       	push	r1
   19632:	df 92       	push	r13
   19634:	cf 92       	push	r12
   19636:	8f 92       	push	r8
   19638:	9f 92       	push	r9
   1963a:	af 92       	push	r10
   1963c:	bf 92       	push	r11
   1963e:	89 81       	ldd	r24, Y+1	; 0x01
   19640:	8f 93       	push	r24
   19642:	88 81       	ld	r24, Y
   19644:	8f 93       	push	r24
   19646:	89 eb       	ldi	r24, 0xB9	; 185
   19648:	93 e4       	ldi	r25, 0x43	; 67
   1964a:	1f 92       	push	r1
   1964c:	9f 93       	push	r25
   1964e:	8f 93       	push	r24
   19650:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19654:	8d b7       	in	r24, 0x3d	; 61
   19656:	9e b7       	in	r25, 0x3e	; 62
   19658:	0f 96       	adiw	r24, 0x0f	; 15
   1965a:	0f b6       	in	r0, 0x3f	; 63
   1965c:	f8 94       	cli
   1965e:	9e bf       	out	0x3e, r25	; 62
   19660:	0f be       	out	0x3f, r0	; 63
   19662:	8d bf       	out	0x3d, r24	; 61
   19664:	04 c0       	rjmp	.+8      	; 0x1966e <lif_read+0xa4>
   19666:	60 e0       	ldi	r22, 0x00	; 0
   19668:	70 e0       	ldi	r23, 0x00	; 0
   1966a:	cb 01       	movw	r24, r22
   1966c:	02 c0       	rjmp	.+4      	; 0x19672 <lif_read+0xa8>
   1966e:	c7 01       	movw	r24, r14
   19670:	b6 01       	movw	r22, r12
   19672:	cd b7       	in	r28, 0x3d	; 61
   19674:	de b7       	in	r29, 0x3e	; 62
   19676:	ec e0       	ldi	r30, 0x0C	; 12
   19678:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

0001967c <lif_write>:
   1967c:	a0 e0       	ldi	r26, 0x00	; 0
   1967e:	b0 e0       	ldi	r27, 0x00	; 0
   19680:	e4 e4       	ldi	r30, 0x44	; 68
   19682:	fb ec       	ldi	r31, 0xCB	; 203
   19684:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   19688:	7c 01       	movw	r14, r24
   1968a:	eb 01       	movw	r28, r22
   1968c:	d2 2e       	mov	r13, r18
   1968e:	c3 2e       	mov	r12, r19
   19690:	b4 2e       	mov	r11, r20
   19692:	a5 2e       	mov	r10, r21
   19694:	fc 01       	movw	r30, r24
   19696:	20 81       	ld	r18, Z
   19698:	31 81       	ldd	r19, Z+1	; 0x01
   1969a:	4d 2d       	mov	r20, r13
   1969c:	5c 2d       	mov	r21, r12
   1969e:	6b 2d       	mov	r22, r11
   196a0:	7a 2d       	mov	r23, r10
   196a2:	82 81       	ldd	r24, Z+2	; 0x02
   196a4:	93 81       	ldd	r25, Z+3	; 0x03
   196a6:	57 df       	rcall	.-338    	; 0x19556 <lif_seek_msg>
   196a8:	00 97       	sbiw	r24, 0x00	; 0
   196aa:	89 f1       	breq	.+98     	; 0x1970e <lif_write+0x92>
   196ac:	f7 01       	movw	r30, r14
   196ae:	22 81       	ldd	r18, Z+2	; 0x02
   196b0:	33 81       	ldd	r19, Z+3	; 0x03
   196b2:	a8 01       	movw	r20, r16
   196b4:	61 e0       	ldi	r22, 0x01	; 1
   196b6:	70 e0       	ldi	r23, 0x00	; 0
   196b8:	ce 01       	movw	r24, r28
   196ba:	0e 94 39 82 	call	0x10472	; 0x10472 <fwrite>
   196be:	ec 01       	movw	r28, r24
   196c0:	08 17       	cp	r16, r24
   196c2:	19 07       	cpc	r17, r25
   196c4:	09 f1       	breq	.+66     	; 0x19708 <lif_write+0x8c>
   196c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   196ca:	80 ff       	sbrs	r24, 0
   196cc:	1f c0       	rjmp	.+62     	; 0x1970c <lif_write+0x90>
   196ce:	1f 93       	push	r17
   196d0:	0f 93       	push	r16
   196d2:	df 93       	push	r29
   196d4:	cf 93       	push	r28
   196d6:	af 92       	push	r10
   196d8:	bf 92       	push	r11
   196da:	cf 92       	push	r12
   196dc:	df 92       	push	r13
   196de:	f7 01       	movw	r30, r14
   196e0:	81 81       	ldd	r24, Z+1	; 0x01
   196e2:	8f 93       	push	r24
   196e4:	80 81       	ld	r24, Z
   196e6:	8f 93       	push	r24
   196e8:	8c e7       	ldi	r24, 0x7C	; 124
   196ea:	93 e4       	ldi	r25, 0x43	; 67
   196ec:	1f 92       	push	r1
   196ee:	9f 93       	push	r25
   196f0:	8f 93       	push	r24
   196f2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   196f6:	8d b7       	in	r24, 0x3d	; 61
   196f8:	9e b7       	in	r25, 0x3e	; 62
   196fa:	0d 96       	adiw	r24, 0x0d	; 13
   196fc:	0f b6       	in	r0, 0x3f	; 63
   196fe:	f8 94       	cli
   19700:	9e bf       	out	0x3e, r25	; 62
   19702:	0f be       	out	0x3f, r0	; 63
   19704:	8d bf       	out	0x3d, r24	; 61
   19706:	02 c0       	rjmp	.+4      	; 0x1970c <lif_write+0x90>
   19708:	c8 01       	movw	r24, r16
   1970a:	01 c0       	rjmp	.+2      	; 0x1970e <lif_write+0x92>
   1970c:	ce 01       	movw	r24, r28
   1970e:	cd b7       	in	r28, 0x3d	; 61
   19710:	de b7       	in	r29, 0x3e	; 62
   19712:	ea e0       	ldi	r30, 0x0A	; 10
   19714:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

00019718 <lif_chars>:
   19718:	80 32       	cpi	r24, 0x20	; 32
   1971a:	91 05       	cpc	r25, r1
   1971c:	e1 f0       	breq	.+56     	; 0x19756 <lif_chars+0x3e>
   1971e:	9c 01       	movw	r18, r24
   19720:	21 56       	subi	r18, 0x61	; 97
   19722:	31 09       	sbc	r19, r1
   19724:	2a 31       	cpi	r18, 0x1A	; 26
   19726:	31 05       	cpc	r19, r1
   19728:	10 f4       	brcc	.+4      	; 0x1972e <lif_chars+0x16>
   1972a:	80 97       	sbiw	r24, 0x20	; 32
   1972c:	08 95       	ret
   1972e:	9c 01       	movw	r18, r24
   19730:	21 54       	subi	r18, 0x41	; 65
   19732:	31 09       	sbc	r19, r1
   19734:	2a 31       	cpi	r18, 0x1A	; 26
   19736:	31 05       	cpc	r19, r1
   19738:	c8 f0       	brcs	.+50     	; 0x1976c <lif_chars+0x54>
   1973a:	16 16       	cp	r1, r22
   1973c:	17 06       	cpc	r1, r23
   1973e:	74 f4       	brge	.+28     	; 0x1975c <lif_chars+0x44>
   19740:	2f 5e       	subi	r18, 0xEF	; 239
   19742:	3f 4f       	sbci	r19, 0xFF	; 255
   19744:	2a 30       	cpi	r18, 0x0A	; 10
   19746:	31 05       	cpc	r19, r1
   19748:	88 f0       	brcs	.+34     	; 0x1976c <lif_chars+0x54>
   1974a:	8f 35       	cpi	r24, 0x5F	; 95
   1974c:	91 05       	cpc	r25, r1
   1974e:	49 f0       	breq	.+18     	; 0x19762 <lif_chars+0x4a>
   19750:	8d 97       	sbiw	r24, 0x2d	; 45
   19752:	21 f4       	brne	.+8      	; 0x1975c <lif_chars+0x44>
   19754:	09 c0       	rjmp	.+18     	; 0x19768 <lif_chars+0x50>
   19756:	80 e2       	ldi	r24, 0x20	; 32
   19758:	90 e0       	ldi	r25, 0x00	; 0
   1975a:	08 95       	ret
   1975c:	80 e0       	ldi	r24, 0x00	; 0
   1975e:	90 e0       	ldi	r25, 0x00	; 0
   19760:	08 95       	ret
   19762:	8f e5       	ldi	r24, 0x5F	; 95
   19764:	90 e0       	ldi	r25, 0x00	; 0
   19766:	08 95       	ret
   19768:	8d e2       	ldi	r24, 0x2D	; 45
   1976a:	90 e0       	ldi	r25, 0x00	; 0
   1976c:	08 95       	ret

0001976e <lif_B2S>:
   1976e:	a0 e0       	ldi	r26, 0x00	; 0
   19770:	b0 e0       	ldi	r27, 0x00	; 0
   19772:	ed eb       	ldi	r30, 0xBD	; 189
   19774:	fb ec       	ldi	r31, 0xCB	; 203
   19776:	0c 94 0b ed 	jmp	0x1da16	; 0x1da16 <__prologue_saves__+0xc>
   1977a:	5c 01       	movw	r10, r24
   1977c:	6b 01       	movw	r12, r22
   1977e:	ea 01       	movw	r28, r20
   19780:	4c 01       	movw	r8, r24
   19782:	ee 24       	eor	r14, r14
   19784:	e3 94       	inc	r14
   19786:	f1 2c       	mov	r15, r1
   19788:	00 e0       	ldi	r16, 0x00	; 0
   1978a:	10 e0       	ldi	r17, 0x00	; 0
   1978c:	0c 17       	cp	r16, r28
   1978e:	1d 07       	cpc	r17, r29
   19790:	6c f4       	brge	.+26     	; 0x197ac <lif_B2S+0x3e>
   19792:	f4 01       	movw	r30, r8
   19794:	81 91       	ld	r24, Z+
   19796:	4f 01       	movw	r8, r30
   19798:	b8 01       	movw	r22, r16
   1979a:	90 e0       	ldi	r25, 0x00	; 0
   1979c:	bd df       	rcall	.-134    	; 0x19718 <lif_chars>
   1979e:	89 2b       	or	r24, r25
   197a0:	11 f4       	brne	.+4      	; 0x197a6 <lif_B2S+0x38>
   197a2:	e1 2c       	mov	r14, r1
   197a4:	f1 2c       	mov	r15, r1
   197a6:	0f 5f       	subi	r16, 0xFF	; 255
   197a8:	1f 4f       	sbci	r17, 0xFF	; 255
   197aa:	f0 cf       	rjmp	.-32     	; 0x1978c <lif_B2S+0x1e>
   197ac:	d6 01       	movw	r26, r12
   197ae:	f5 01       	movw	r30, r10
   197b0:	cf 01       	movw	r24, r30
   197b2:	8a 19       	sub	r24, r10
   197b4:	9b 09       	sbc	r25, r11
   197b6:	8c 17       	cp	r24, r28
   197b8:	9d 07       	cpc	r25, r29
   197ba:	1c f4       	brge	.+6      	; 0x197c2 <lif_B2S+0x54>
   197bc:	81 91       	ld	r24, Z+
   197be:	8d 93       	st	X+, r24
   197c0:	f7 cf       	rjmp	.-18     	; 0x197b0 <lif_B2S+0x42>
   197c2:	d7 ff       	sbrs	r29, 7
   197c4:	02 c0       	rjmp	.+4      	; 0x197ca <lif_B2S+0x5c>
   197c6:	c0 e0       	ldi	r28, 0x00	; 0
   197c8:	d0 e0       	ldi	r29, 0x00	; 0
   197ca:	cc 0d       	add	r28, r12
   197cc:	dd 1d       	adc	r29, r13
   197ce:	18 82       	st	Y, r1
   197d0:	c6 01       	movw	r24, r12
   197d2:	0e 94 a8 32 	call	0x6550	; 0x6550 <trim_tail>
   197d6:	c7 01       	movw	r24, r14
   197d8:	cd b7       	in	r28, 0x3d	; 61
   197da:	de b7       	in	r29, 0x3e	; 62
   197dc:	ec e0       	ldi	r30, 0x0C	; 12
   197de:	0c 94 27 ed 	jmp	0x1da4e	; 0x1da4e <__epilogue_restores__+0xc>

000197e2 <lif_checkname>:
   197e2:	ef 92       	push	r14
   197e4:	ff 92       	push	r15
   197e6:	0f 93       	push	r16
   197e8:	1f 93       	push	r17
   197ea:	cf 93       	push	r28
   197ec:	df 93       	push	r29
   197ee:	7c 01       	movw	r14, r24
   197f0:	ec 01       	movw	r28, r24
   197f2:	01 e0       	ldi	r16, 0x01	; 1
   197f4:	10 e0       	ldi	r17, 0x00	; 0
   197f6:	be 01       	movw	r22, r28
   197f8:	6e 19       	sub	r22, r14
   197fa:	7f 09       	sbc	r23, r15
   197fc:	89 91       	ld	r24, Y+
   197fe:	88 23       	and	r24, r24
   19800:	39 f0       	breq	.+14     	; 0x19810 <lif_checkname+0x2e>
   19802:	90 e0       	ldi	r25, 0x00	; 0
   19804:	89 df       	rcall	.-238    	; 0x19718 <lif_chars>
   19806:	89 2b       	or	r24, r25
   19808:	b1 f7       	brne	.-20     	; 0x197f6 <lif_checkname+0x14>
   1980a:	00 e0       	ldi	r16, 0x00	; 0
   1980c:	10 e0       	ldi	r17, 0x00	; 0
   1980e:	f3 cf       	rjmp	.-26     	; 0x197f6 <lif_checkname+0x14>
   19810:	c8 01       	movw	r24, r16
   19812:	cd b7       	in	r28, 0x3d	; 61
   19814:	de b7       	in	r29, 0x3e	; 62
   19816:	e6 e0       	ldi	r30, 0x06	; 6
   19818:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

0001981c <lif_S2B>:
   1981c:	fb 01       	movw	r30, r22
   1981e:	dc 01       	movw	r26, r24
   19820:	20 e0       	ldi	r18, 0x00	; 0
   19822:	30 e0       	ldi	r19, 0x00	; 0
   19824:	61 91       	ld	r22, Z+
   19826:	61 11       	cpse	r22, r1
   19828:	05 c0       	rjmp	.+10     	; 0x19834 <lif_S2B+0x18>
   1982a:	fc 01       	movw	r30, r24
   1982c:	e2 0f       	add	r30, r18
   1982e:	f3 1f       	adc	r31, r19
   19830:	60 e2       	ldi	r22, 0x20	; 32
   19832:	08 c0       	rjmp	.+16     	; 0x19844 <lif_S2B+0x28>
   19834:	24 17       	cp	r18, r20
   19836:	35 07       	cpc	r19, r21
   19838:	24 f4       	brge	.+8      	; 0x19842 <lif_S2B+0x26>
   1983a:	6d 93       	st	X+, r22
   1983c:	2f 5f       	subi	r18, 0xFF	; 255
   1983e:	3f 4f       	sbci	r19, 0xFF	; 255
   19840:	f1 cf       	rjmp	.-30     	; 0x19824 <lif_S2B+0x8>
   19842:	08 95       	ret
   19844:	9f 01       	movw	r18, r30
   19846:	28 1b       	sub	r18, r24
   19848:	39 0b       	sbc	r19, r25
   1984a:	24 17       	cp	r18, r20
   1984c:	35 07       	cpc	r19, r21
   1984e:	14 f4       	brge	.+4      	; 0x19854 <lif_S2B+0x38>
   19850:	61 93       	st	Z+, r22
   19852:	f8 cf       	rjmp	.-16     	; 0x19844 <lif_S2B+0x28>
   19854:	08 95       	ret

00019856 <lif_fixname>:
   19856:	a0 e0       	ldi	r26, 0x00	; 0
   19858:	b0 e0       	ldi	r27, 0x00	; 0
   1985a:	e1 e3       	ldi	r30, 0x31	; 49
   1985c:	fc ec       	ldi	r31, 0xCC	; 204
   1985e:	0c 94 0e ed 	jmp	0x1da1c	; 0x1da1c <__prologue_saves__+0x12>
   19862:	8c 01       	movw	r16, r24
   19864:	cb 01       	movw	r24, r22
   19866:	7a 01       	movw	r14, r20
   19868:	0e 94 87 7c 	call	0xf90e	; 0xf90e <basename>
   1986c:	6c 01       	movw	r12, r24
   1986e:	e8 01       	movw	r28, r16
   19870:	80 e2       	ldi	r24, 0x20	; 32
   19872:	b8 2e       	mov	r11, r24
   19874:	be 01       	movw	r22, r28
   19876:	60 1b       	sub	r22, r16
   19878:	71 0b       	sbc	r23, r17
   1987a:	f6 01       	movw	r30, r12
   1987c:	81 91       	ld	r24, Z+
   1987e:	6f 01       	movw	r12, r30
   19880:	81 11       	cpse	r24, r1
   19882:	02 c0       	rjmp	.+4      	; 0x19888 <lif_fixname+0x32>
   19884:	20 e2       	ldi	r18, 0x20	; 32
   19886:	0e c0       	rjmp	.+28     	; 0x198a4 <lif_fixname+0x4e>
   19888:	1e 14       	cp	r1, r14
   1988a:	1f 04       	cpc	r1, r15
   1988c:	dc f7       	brge	.-10     	; 0x19884 <lif_fixname+0x2e>
   1988e:	8e 32       	cpi	r24, 0x2E	; 46
   19890:	c9 f3       	breq	.-14     	; 0x19884 <lif_fixname+0x2e>
   19892:	90 e0       	ldi	r25, 0x00	; 0
   19894:	41 df       	rcall	.-382    	; 0x19718 <lif_chars>
   19896:	88 23       	and	r24, r24
   19898:	11 f0       	breq	.+4      	; 0x1989e <lif_fixname+0x48>
   1989a:	88 83       	st	Y, r24
   1989c:	01 c0       	rjmp	.+2      	; 0x198a0 <lif_fixname+0x4a>
   1989e:	b8 82       	st	Y, r11
   198a0:	21 96       	adiw	r28, 0x01	; 1
   198a2:	e8 cf       	rjmp	.-48     	; 0x19874 <lif_fixname+0x1e>
   198a4:	ce 01       	movw	r24, r28
   198a6:	80 1b       	sub	r24, r16
   198a8:	91 0b       	sbc	r25, r17
   198aa:	8e 15       	cp	r24, r14
   198ac:	9f 05       	cpc	r25, r15
   198ae:	14 f4       	brge	.+4      	; 0x198b4 <lif_fixname+0x5e>
   198b0:	29 93       	st	Y+, r18
   198b2:	f8 cf       	rjmp	.-16     	; 0x198a4 <lif_fixname+0x4e>
   198b4:	18 82       	st	Y, r1
   198b6:	f8 01       	movw	r30, r16
   198b8:	01 90       	ld	r0, Z+
   198ba:	00 20       	and	r0, r0
   198bc:	e9 f7       	brne	.-6      	; 0x198b8 <lif_fixname+0x62>
   198be:	cf 01       	movw	r24, r30
   198c0:	01 97       	sbiw	r24, 0x01	; 1
   198c2:	80 1b       	sub	r24, r16
   198c4:	91 0b       	sbc	r25, r17
   198c6:	cd b7       	in	r28, 0x3d	; 61
   198c8:	de b7       	in	r29, 0x3e	; 62
   198ca:	e9 e0       	ldi	r30, 0x09	; 9
   198cc:	0c 94 2a ed 	jmp	0x1da54	; 0x1da54 <__epilogue_restores__+0x12>

000198d0 <lif_vol2str>:
   198d0:	ef 92       	push	r14
   198d2:	ff 92       	push	r15
   198d4:	0f 93       	push	r16
   198d6:	1f 93       	push	r17
   198d8:	cf 93       	push	r28
   198da:	df 93       	push	r29
   198dc:	7c 01       	movw	r14, r24
   198de:	eb 01       	movw	r28, r22
   198e0:	fc 01       	movw	r30, r24
   198e2:	04 a1       	ldd	r16, Z+36	; 0x24
   198e4:	15 a1       	ldd	r17, Z+37	; 0x25
   198e6:	20 e0       	ldi	r18, 0x00	; 0
   198e8:	30 e0       	ldi	r19, 0x00	; 0
   198ea:	42 e0       	ldi	r20, 0x02	; 2
   198ec:	50 e0       	ldi	r21, 0x00	; 0
   198ee:	60 e0       	ldi	r22, 0x00	; 0
   198f0:	70 e0       	ldi	r23, 0x00	; 0
   198f2:	ce 01       	movw	r24, r28
   198f4:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   198f8:	b7 01       	movw	r22, r14
   198fa:	6a 5d       	subi	r22, 0xDA	; 218
   198fc:	7f 4f       	sbci	r23, 0xFF	; 255
   198fe:	46 e0       	ldi	r20, 0x06	; 6
   19900:	50 e0       	ldi	r21, 0x00	; 0
   19902:	ce 01       	movw	r24, r28
   19904:	02 96       	adiw	r24, 0x02	; 2
   19906:	8a df       	rcall	.-236    	; 0x1981c <lif_S2B>
   19908:	f7 01       	movw	r30, r14
   1990a:	05 a5       	ldd	r16, Z+45	; 0x2d
   1990c:	16 a5       	ldd	r17, Z+46	; 0x2e
   1990e:	27 a5       	ldd	r18, Z+47	; 0x2f
   19910:	30 a9       	ldd	r19, Z+48	; 0x30
   19912:	44 e0       	ldi	r20, 0x04	; 4
   19914:	50 e0       	ldi	r21, 0x00	; 0
   19916:	68 e0       	ldi	r22, 0x08	; 8
   19918:	70 e0       	ldi	r23, 0x00	; 0
   1991a:	ce 01       	movw	r24, r28
   1991c:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19920:	f7 01       	movw	r30, r14
   19922:	01 a9       	ldd	r16, Z+49	; 0x31
   19924:	12 a9       	ldd	r17, Z+50	; 0x32
   19926:	20 e0       	ldi	r18, 0x00	; 0
   19928:	30 e0       	ldi	r19, 0x00	; 0
   1992a:	42 e0       	ldi	r20, 0x02	; 2
   1992c:	50 e0       	ldi	r21, 0x00	; 0
   1992e:	6c e0       	ldi	r22, 0x0C	; 12
   19930:	70 e0       	ldi	r23, 0x00	; 0
   19932:	ce 01       	movw	r24, r28
   19934:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19938:	00 e0       	ldi	r16, 0x00	; 0
   1993a:	10 e0       	ldi	r17, 0x00	; 0
   1993c:	98 01       	movw	r18, r16
   1993e:	42 e0       	ldi	r20, 0x02	; 2
   19940:	50 e0       	ldi	r21, 0x00	; 0
   19942:	6e e0       	ldi	r22, 0x0E	; 14
   19944:	70 e0       	ldi	r23, 0x00	; 0
   19946:	ce 01       	movw	r24, r28
   19948:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   1994c:	f7 01       	movw	r30, r14
   1994e:	05 a9       	ldd	r16, Z+53	; 0x35
   19950:	16 a9       	ldd	r17, Z+54	; 0x36
   19952:	27 a9       	ldd	r18, Z+55	; 0x37
   19954:	30 ad       	ldd	r19, Z+56	; 0x38
   19956:	44 e0       	ldi	r20, 0x04	; 4
   19958:	50 e0       	ldi	r21, 0x00	; 0
   1995a:	60 e1       	ldi	r22, 0x10	; 16
   1995c:	70 e0       	ldi	r23, 0x00	; 0
   1995e:	ce 01       	movw	r24, r28
   19960:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19964:	f7 01       	movw	r30, r14
   19966:	01 ad       	ldd	r16, Z+57	; 0x39
   19968:	12 ad       	ldd	r17, Z+58	; 0x3a
   1996a:	20 e0       	ldi	r18, 0x00	; 0
   1996c:	30 e0       	ldi	r19, 0x00	; 0
   1996e:	42 e0       	ldi	r20, 0x02	; 2
   19970:	50 e0       	ldi	r21, 0x00	; 0
   19972:	64 e1       	ldi	r22, 0x14	; 20
   19974:	70 e0       	ldi	r23, 0x00	; 0
   19976:	ce 01       	movw	r24, r28
   19978:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   1997c:	00 e0       	ldi	r16, 0x00	; 0
   1997e:	10 e0       	ldi	r17, 0x00	; 0
   19980:	98 01       	movw	r18, r16
   19982:	42 e0       	ldi	r20, 0x02	; 2
   19984:	50 e0       	ldi	r21, 0x00	; 0
   19986:	66 e1       	ldi	r22, 0x16	; 22
   19988:	70 e0       	ldi	r23, 0x00	; 0
   1998a:	ce 01       	movw	r24, r28
   1998c:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19990:	f7 01       	movw	r30, r14
   19992:	fd 96       	adiw	r30, 0x3d	; 61
   19994:	00 81       	ld	r16, Z
   19996:	11 81       	ldd	r17, Z+1	; 0x01
   19998:	22 81       	ldd	r18, Z+2	; 0x02
   1999a:	33 81       	ldd	r19, Z+3	; 0x03
   1999c:	44 e0       	ldi	r20, 0x04	; 4
   1999e:	50 e0       	ldi	r21, 0x00	; 0
   199a0:	68 e1       	ldi	r22, 0x18	; 24
   199a2:	70 e0       	ldi	r23, 0x00	; 0
   199a4:	ce 01       	movw	r24, r28
   199a6:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   199aa:	f7 01       	movw	r30, r14
   199ac:	ef 5b       	subi	r30, 0xBF	; 191
   199ae:	ff 4f       	sbci	r31, 0xFF	; 255
   199b0:	00 81       	ld	r16, Z
   199b2:	11 81       	ldd	r17, Z+1	; 0x01
   199b4:	22 81       	ldd	r18, Z+2	; 0x02
   199b6:	33 81       	ldd	r19, Z+3	; 0x03
   199b8:	44 e0       	ldi	r20, 0x04	; 4
   199ba:	50 e0       	ldi	r21, 0x00	; 0
   199bc:	6c e1       	ldi	r22, 0x1C	; 28
   199be:	70 e0       	ldi	r23, 0x00	; 0
   199c0:	ce 01       	movw	r24, r28
   199c2:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   199c6:	f7 01       	movw	r30, r14
   199c8:	eb 5b       	subi	r30, 0xBB	; 187
   199ca:	ff 4f       	sbci	r31, 0xFF	; 255
   199cc:	00 81       	ld	r16, Z
   199ce:	11 81       	ldd	r17, Z+1	; 0x01
   199d0:	22 81       	ldd	r18, Z+2	; 0x02
   199d2:	33 81       	ldd	r19, Z+3	; 0x03
   199d4:	44 e0       	ldi	r20, 0x04	; 4
   199d6:	50 e0       	ldi	r21, 0x00	; 0
   199d8:	60 e2       	ldi	r22, 0x20	; 32
   199da:	70 e0       	ldi	r23, 0x00	; 0
   199dc:	ce 01       	movw	r24, r28
   199de:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   199e2:	de 01       	movw	r26, r28
   199e4:	94 96       	adiw	r26, 0x24	; 36
   199e6:	f7 01       	movw	r30, r14
   199e8:	e7 5b       	subi	r30, 0xB7	; 183
   199ea:	ff 4f       	sbci	r31, 0xFF	; 255
   199ec:	86 e0       	ldi	r24, 0x06	; 6
   199ee:	01 90       	ld	r0, Z+
   199f0:	0d 92       	st	X+, r0
   199f2:	8a 95       	dec	r24
   199f4:	e1 f7       	brne	.-8      	; 0x199ee <lif_vol2str+0x11e>
   199f6:	cd b7       	in	r28, 0x3d	; 61
   199f8:	de b7       	in	r29, 0x3e	; 62
   199fa:	e6 e0       	ldi	r30, 0x06	; 6
   199fc:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00019a00 <lif_str2vol>:
   19a00:	0f 93       	push	r16
   19a02:	1f 93       	push	r17
   19a04:	cf 93       	push	r28
   19a06:	df 93       	push	r29
   19a08:	8c 01       	movw	r16, r24
   19a0a:	eb 01       	movw	r28, r22
   19a0c:	42 e0       	ldi	r20, 0x02	; 2
   19a0e:	50 e0       	ldi	r21, 0x00	; 0
   19a10:	60 e0       	ldi	r22, 0x00	; 0
   19a12:	70 e0       	ldi	r23, 0x00	; 0
   19a14:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19a18:	7d a3       	std	Y+37, r23	; 0x25
   19a1a:	6c a3       	std	Y+36, r22	; 0x24
   19a1c:	be 01       	movw	r22, r28
   19a1e:	6a 5d       	subi	r22, 0xDA	; 218
   19a20:	7f 4f       	sbci	r23, 0xFF	; 255
   19a22:	46 e0       	ldi	r20, 0x06	; 6
   19a24:	50 e0       	ldi	r21, 0x00	; 0
   19a26:	c8 01       	movw	r24, r16
   19a28:	02 96       	adiw	r24, 0x02	; 2
   19a2a:	a1 de       	rcall	.-702    	; 0x1976e <lif_B2S>
   19a2c:	44 e0       	ldi	r20, 0x04	; 4
   19a2e:	50 e0       	ldi	r21, 0x00	; 0
   19a30:	68 e0       	ldi	r22, 0x08	; 8
   19a32:	70 e0       	ldi	r23, 0x00	; 0
   19a34:	c8 01       	movw	r24, r16
   19a36:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19a3a:	6d a7       	std	Y+45, r22	; 0x2d
   19a3c:	7e a7       	std	Y+46, r23	; 0x2e
   19a3e:	8f a7       	std	Y+47, r24	; 0x2f
   19a40:	98 ab       	std	Y+48, r25	; 0x30
   19a42:	42 e0       	ldi	r20, 0x02	; 2
   19a44:	50 e0       	ldi	r21, 0x00	; 0
   19a46:	6c e0       	ldi	r22, 0x0C	; 12
   19a48:	70 e0       	ldi	r23, 0x00	; 0
   19a4a:	c8 01       	movw	r24, r16
   19a4c:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19a50:	7a ab       	std	Y+50, r23	; 0x32
   19a52:	69 ab       	std	Y+49, r22	; 0x31
   19a54:	42 e0       	ldi	r20, 0x02	; 2
   19a56:	50 e0       	ldi	r21, 0x00	; 0
   19a58:	6e e0       	ldi	r22, 0x0E	; 14
   19a5a:	70 e0       	ldi	r23, 0x00	; 0
   19a5c:	c8 01       	movw	r24, r16
   19a5e:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19a62:	7c ab       	std	Y+52, r23	; 0x34
   19a64:	6b ab       	std	Y+51, r22	; 0x33
   19a66:	44 e0       	ldi	r20, 0x04	; 4
   19a68:	50 e0       	ldi	r21, 0x00	; 0
   19a6a:	60 e1       	ldi	r22, 0x10	; 16
   19a6c:	70 e0       	ldi	r23, 0x00	; 0
   19a6e:	c8 01       	movw	r24, r16
   19a70:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19a74:	6d ab       	std	Y+53, r22	; 0x35
   19a76:	7e ab       	std	Y+54, r23	; 0x36
   19a78:	8f ab       	std	Y+55, r24	; 0x37
   19a7a:	98 af       	std	Y+56, r25	; 0x38
   19a7c:	42 e0       	ldi	r20, 0x02	; 2
   19a7e:	50 e0       	ldi	r21, 0x00	; 0
   19a80:	64 e1       	ldi	r22, 0x14	; 20
   19a82:	70 e0       	ldi	r23, 0x00	; 0
   19a84:	c8 01       	movw	r24, r16
   19a86:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19a8a:	7a af       	std	Y+58, r23	; 0x3a
   19a8c:	69 af       	std	Y+57, r22	; 0x39
   19a8e:	42 e0       	ldi	r20, 0x02	; 2
   19a90:	50 e0       	ldi	r21, 0x00	; 0
   19a92:	66 e1       	ldi	r22, 0x16	; 22
   19a94:	70 e0       	ldi	r23, 0x00	; 0
   19a96:	c8 01       	movw	r24, r16
   19a98:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19a9c:	7c af       	std	Y+60, r23	; 0x3c
   19a9e:	6b af       	std	Y+59, r22	; 0x3b
   19aa0:	44 e0       	ldi	r20, 0x04	; 4
   19aa2:	50 e0       	ldi	r21, 0x00	; 0
   19aa4:	68 e1       	ldi	r22, 0x18	; 24
   19aa6:	70 e0       	ldi	r23, 0x00	; 0
   19aa8:	c8 01       	movw	r24, r16
   19aaa:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19aae:	fe 01       	movw	r30, r28
   19ab0:	fd 96       	adiw	r30, 0x3d	; 61
   19ab2:	60 83       	st	Z, r22
   19ab4:	71 83       	std	Z+1, r23	; 0x01
   19ab6:	82 83       	std	Z+2, r24	; 0x02
   19ab8:	93 83       	std	Z+3, r25	; 0x03
   19aba:	44 e0       	ldi	r20, 0x04	; 4
   19abc:	50 e0       	ldi	r21, 0x00	; 0
   19abe:	6c e1       	ldi	r22, 0x1C	; 28
   19ac0:	70 e0       	ldi	r23, 0x00	; 0
   19ac2:	c8 01       	movw	r24, r16
   19ac4:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19ac8:	fe 01       	movw	r30, r28
   19aca:	ef 5b       	subi	r30, 0xBF	; 191
   19acc:	ff 4f       	sbci	r31, 0xFF	; 255
   19ace:	60 83       	st	Z, r22
   19ad0:	71 83       	std	Z+1, r23	; 0x01
   19ad2:	82 83       	std	Z+2, r24	; 0x02
   19ad4:	93 83       	std	Z+3, r25	; 0x03
   19ad6:	44 e0       	ldi	r20, 0x04	; 4
   19ad8:	50 e0       	ldi	r21, 0x00	; 0
   19ada:	60 e2       	ldi	r22, 0x20	; 32
   19adc:	70 e0       	ldi	r23, 0x00	; 0
   19ade:	c8 01       	movw	r24, r16
   19ae0:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19ae4:	fe 01       	movw	r30, r28
   19ae6:	eb 5b       	subi	r30, 0xBB	; 187
   19ae8:	ff 4f       	sbci	r31, 0xFF	; 255
   19aea:	60 83       	st	Z, r22
   19aec:	71 83       	std	Z+1, r23	; 0x01
   19aee:	82 83       	std	Z+2, r24	; 0x02
   19af0:	93 83       	std	Z+3, r25	; 0x03
   19af2:	de 01       	movw	r26, r28
   19af4:	a7 5b       	subi	r26, 0xB7	; 183
   19af6:	bf 4f       	sbci	r27, 0xFF	; 255
   19af8:	f8 01       	movw	r30, r16
   19afa:	b4 96       	adiw	r30, 0x24	; 36
   19afc:	86 e0       	ldi	r24, 0x06	; 6
   19afe:	01 90       	ld	r0, Z+
   19b00:	0d 92       	st	X+, r0
   19b02:	8a 95       	dec	r24
   19b04:	e1 f7       	brne	.-8      	; 0x19afe <lif_str2vol+0xfe>
   19b06:	df 91       	pop	r29
   19b08:	cf 91       	pop	r28
   19b0a:	1f 91       	pop	r17
   19b0c:	0f 91       	pop	r16
   19b0e:	08 95       	ret

00019b10 <lif_dir2str>:
   19b10:	ef 92       	push	r14
   19b12:	ff 92       	push	r15
   19b14:	0f 93       	push	r16
   19b16:	1f 93       	push	r17
   19b18:	cf 93       	push	r28
   19b1a:	df 93       	push	r29
   19b1c:	ec 01       	movw	r28, r24
   19b1e:	7b 01       	movw	r14, r22
   19b20:	bc 01       	movw	r22, r24
   19b22:	61 5b       	subi	r22, 0xB1	; 177
   19b24:	7f 4f       	sbci	r23, 0xFF	; 255
   19b26:	4a e0       	ldi	r20, 0x0A	; 10
   19b28:	50 e0       	ldi	r21, 0x00	; 0
   19b2a:	c7 01       	movw	r24, r14
   19b2c:	77 de       	rcall	.-786    	; 0x1981c <lif_S2B>
   19b2e:	fe 01       	movw	r30, r28
   19b30:	e6 5a       	subi	r30, 0xA6	; 166
   19b32:	ff 4f       	sbci	r31, 0xFF	; 255
   19b34:	00 81       	ld	r16, Z
   19b36:	11 81       	ldd	r17, Z+1	; 0x01
   19b38:	20 e0       	ldi	r18, 0x00	; 0
   19b3a:	30 e0       	ldi	r19, 0x00	; 0
   19b3c:	42 e0       	ldi	r20, 0x02	; 2
   19b3e:	50 e0       	ldi	r21, 0x00	; 0
   19b40:	6a e0       	ldi	r22, 0x0A	; 10
   19b42:	70 e0       	ldi	r23, 0x00	; 0
   19b44:	c7 01       	movw	r24, r14
   19b46:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19b4a:	fe 01       	movw	r30, r28
   19b4c:	e4 5a       	subi	r30, 0xA4	; 164
   19b4e:	ff 4f       	sbci	r31, 0xFF	; 255
   19b50:	00 81       	ld	r16, Z
   19b52:	11 81       	ldd	r17, Z+1	; 0x01
   19b54:	22 81       	ldd	r18, Z+2	; 0x02
   19b56:	33 81       	ldd	r19, Z+3	; 0x03
   19b58:	44 e0       	ldi	r20, 0x04	; 4
   19b5a:	50 e0       	ldi	r21, 0x00	; 0
   19b5c:	6c e0       	ldi	r22, 0x0C	; 12
   19b5e:	70 e0       	ldi	r23, 0x00	; 0
   19b60:	c7 01       	movw	r24, r14
   19b62:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19b66:	fe 01       	movw	r30, r28
   19b68:	e0 5a       	subi	r30, 0xA0	; 160
   19b6a:	ff 4f       	sbci	r31, 0xFF	; 255
   19b6c:	00 81       	ld	r16, Z
   19b6e:	11 81       	ldd	r17, Z+1	; 0x01
   19b70:	22 81       	ldd	r18, Z+2	; 0x02
   19b72:	33 81       	ldd	r19, Z+3	; 0x03
   19b74:	44 e0       	ldi	r20, 0x04	; 4
   19b76:	50 e0       	ldi	r21, 0x00	; 0
   19b78:	60 e1       	ldi	r22, 0x10	; 16
   19b7a:	70 e0       	ldi	r23, 0x00	; 0
   19b7c:	c7 01       	movw	r24, r14
   19b7e:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19b82:	d7 01       	movw	r26, r14
   19b84:	54 96       	adiw	r26, 0x14	; 20
   19b86:	fe 01       	movw	r30, r28
   19b88:	ec 59       	subi	r30, 0x9C	; 156
   19b8a:	ff 4f       	sbci	r31, 0xFF	; 255
   19b8c:	86 e0       	ldi	r24, 0x06	; 6
   19b8e:	01 90       	ld	r0, Z+
   19b90:	0d 92       	st	X+, r0
   19b92:	8a 95       	dec	r24
   19b94:	e1 f7       	brne	.-8      	; 0x19b8e <lif_dir2str+0x7e>
   19b96:	fe 01       	movw	r30, r28
   19b98:	e6 59       	subi	r30, 0x96	; 150
   19b9a:	ff 4f       	sbci	r31, 0xFF	; 255
   19b9c:	00 81       	ld	r16, Z
   19b9e:	11 81       	ldd	r17, Z+1	; 0x01
   19ba0:	20 e0       	ldi	r18, 0x00	; 0
   19ba2:	30 e0       	ldi	r19, 0x00	; 0
   19ba4:	42 e0       	ldi	r20, 0x02	; 2
   19ba6:	50 e0       	ldi	r21, 0x00	; 0
   19ba8:	6a e1       	ldi	r22, 0x1A	; 26
   19baa:	70 e0       	ldi	r23, 0x00	; 0
   19bac:	c7 01       	movw	r24, r14
   19bae:	0e 94 2d b7 	call	0x16e5a	; 0x16e5a <V2B_MSB>
   19bb2:	fe 01       	movw	r30, r28
   19bb4:	e4 59       	subi	r30, 0x94	; 148
   19bb6:	ff 4f       	sbci	r31, 0xFF	; 255
   19bb8:	00 81       	ld	r16, Z
   19bba:	11 81       	ldd	r17, Z+1	; 0x01
   19bbc:	20 e0       	ldi	r18, 0x00	; 0
   19bbe:	30 e0       	ldi	r19, 0x00	; 0
   19bc0:	42 e0       	ldi	r20, 0x02	; 2
   19bc2:	50 e0       	ldi	r21, 0x00	; 0
   19bc4:	6c e1       	ldi	r22, 0x1C	; 28
   19bc6:	70 e0       	ldi	r23, 0x00	; 0
   19bc8:	c7 01       	movw	r24, r14
   19bca:	0e 94 41 b7 	call	0x16e82	; 0x16e82 <V2B_LSB>
   19bce:	c2 59       	subi	r28, 0x92	; 146
   19bd0:	df 4f       	sbci	r29, 0xFF	; 255
   19bd2:	08 81       	ld	r16, Y
   19bd4:	19 81       	ldd	r17, Y+1	; 0x01
   19bd6:	20 e0       	ldi	r18, 0x00	; 0
   19bd8:	30 e0       	ldi	r19, 0x00	; 0
   19bda:	42 e0       	ldi	r20, 0x02	; 2
   19bdc:	50 e0       	ldi	r21, 0x00	; 0
   19bde:	6e e1       	ldi	r22, 0x1E	; 30
   19be0:	70 e0       	ldi	r23, 0x00	; 0
   19be2:	c7 01       	movw	r24, r14
   19be4:	0e 94 41 b7 	call	0x16e82	; 0x16e82 <V2B_LSB>
   19be8:	cd b7       	in	r28, 0x3d	; 61
   19bea:	de b7       	in	r29, 0x3e	; 62
   19bec:	e6 e0       	ldi	r30, 0x06	; 6
   19bee:	0c 94 2d ed 	jmp	0x1da5a	; 0x1da5a <__epilogue_restores__+0x18>

00019bf2 <lif_str2dir>:
   19bf2:	0f 93       	push	r16
   19bf4:	1f 93       	push	r17
   19bf6:	cf 93       	push	r28
   19bf8:	df 93       	push	r29
   19bfa:	8c 01       	movw	r16, r24
   19bfc:	eb 01       	movw	r28, r22
   19bfe:	61 5b       	subi	r22, 0xB1	; 177
   19c00:	7f 4f       	sbci	r23, 0xFF	; 255
   19c02:	4a e0       	ldi	r20, 0x0A	; 10
   19c04:	50 e0       	ldi	r21, 0x00	; 0
   19c06:	b3 dd       	rcall	.-1178   	; 0x1976e <lif_B2S>
   19c08:	42 e0       	ldi	r20, 0x02	; 2
   19c0a:	50 e0       	ldi	r21, 0x00	; 0
   19c0c:	6a e0       	ldi	r22, 0x0A	; 10
   19c0e:	70 e0       	ldi	r23, 0x00	; 0
   19c10:	c8 01       	movw	r24, r16
   19c12:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19c16:	fe 01       	movw	r30, r28
   19c18:	e6 5a       	subi	r30, 0xA6	; 166
   19c1a:	ff 4f       	sbci	r31, 0xFF	; 255
   19c1c:	71 83       	std	Z+1, r23	; 0x01
   19c1e:	60 83       	st	Z, r22
   19c20:	44 e0       	ldi	r20, 0x04	; 4
   19c22:	50 e0       	ldi	r21, 0x00	; 0
   19c24:	6c e0       	ldi	r22, 0x0C	; 12
   19c26:	70 e0       	ldi	r23, 0x00	; 0
   19c28:	c8 01       	movw	r24, r16
   19c2a:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19c2e:	fe 01       	movw	r30, r28
   19c30:	e4 5a       	subi	r30, 0xA4	; 164
   19c32:	ff 4f       	sbci	r31, 0xFF	; 255
   19c34:	60 83       	st	Z, r22
   19c36:	71 83       	std	Z+1, r23	; 0x01
   19c38:	82 83       	std	Z+2, r24	; 0x02
   19c3a:	93 83       	std	Z+3, r25	; 0x03
   19c3c:	44 e0       	ldi	r20, 0x04	; 4
   19c3e:	50 e0       	ldi	r21, 0x00	; 0
   19c40:	60 e1       	ldi	r22, 0x10	; 16
   19c42:	70 e0       	ldi	r23, 0x00	; 0
   19c44:	c8 01       	movw	r24, r16
   19c46:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19c4a:	fe 01       	movw	r30, r28
   19c4c:	e0 5a       	subi	r30, 0xA0	; 160
   19c4e:	ff 4f       	sbci	r31, 0xFF	; 255
   19c50:	60 83       	st	Z, r22
   19c52:	71 83       	std	Z+1, r23	; 0x01
   19c54:	82 83       	std	Z+2, r24	; 0x02
   19c56:	93 83       	std	Z+3, r25	; 0x03
   19c58:	de 01       	movw	r26, r28
   19c5a:	ac 59       	subi	r26, 0x9C	; 156
   19c5c:	bf 4f       	sbci	r27, 0xFF	; 255
   19c5e:	f8 01       	movw	r30, r16
   19c60:	74 96       	adiw	r30, 0x14	; 20
   19c62:	86 e0       	ldi	r24, 0x06	; 6
   19c64:	01 90       	ld	r0, Z+
   19c66:	0d 92       	st	X+, r0
   19c68:	8a 95       	dec	r24
   19c6a:	e1 f7       	brne	.-8      	; 0x19c64 <lif_str2dir+0x72>
   19c6c:	42 e0       	ldi	r20, 0x02	; 2
   19c6e:	50 e0       	ldi	r21, 0x00	; 0
   19c70:	6a e1       	ldi	r22, 0x1A	; 26
   19c72:	70 e0       	ldi	r23, 0x00	; 0
   19c74:	c8 01       	movw	r24, r16
   19c76:	0e 94 56 b7 	call	0x16eac	; 0x16eac <B2V_MSB>
   19c7a:	fe 01       	movw	r30, r28
   19c7c:	e6 59       	subi	r30, 0x96	; 150
   19c7e:	ff 4f       	sbci	r31, 0xFF	; 255
   19c80:	71 83       	std	Z+1, r23	; 0x01
   19c82:	60 83       	st	Z, r22
   19c84:	42 e0       	ldi	r20, 0x02	; 2
   19c86:	50 e0       	ldi	r21, 0x00	; 0
   19c88:	6c e1       	ldi	r22, 0x1C	; 28
   19c8a:	70 e0       	ldi	r23, 0x00	; 0
   19c8c:	c8 01       	movw	r24, r16
   19c8e:	0e 94 75 b7 	call	0x16eea	; 0x16eea <B2V_LSB>
   19c92:	fe 01       	movw	r30, r28
   19c94:	e4 59       	subi	r30, 0x94	; 148
   19c96:	ff 4f       	sbci	r31, 0xFF	; 255
   19c98:	71 83       	std	Z+1, r23	; 0x01
   19c9a:	60 83       	st	Z, r22
   19c9c:	42 e0       	ldi	r20, 0x02	; 2
   19c9e:	50 e0       	ldi	r21, 0x00	; 0
   19ca0:	6e e1       	ldi	r22, 0x1E	; 30
   19ca2:	70 e0       	ldi	r23, 0x00	; 0
   19ca4:	c8 01       	movw	r24, r16
   19ca6:	0e 94 75 b7 	call	0x16eea	; 0x16eea <B2V_LSB>
   19caa:	c2 59       	subi	r28, 0x92	; 146
   19cac:	df 4f       	sbci	r29, 0xFF	; 255
   19cae:	79 83       	std	Y+1, r23	; 0x01
   19cb0:	68 83       	st	Y, r22
   19cb2:	df 91       	pop	r29
   19cb4:	cf 91       	pop	r28
   19cb6:	1f 91       	pop	r17
   19cb8:	0f 91       	pop	r16
   19cba:	08 95       	ret

00019cbc <lif_BIN2BCD>:
   19cbc:	6a e0       	ldi	r22, 0x0A	; 10
   19cbe:	0e 94 50 ec 	call	0x1d8a0	; 0x1d8a0 <__udivmodqi4>
   19cc2:	82 95       	swap	r24
   19cc4:	80 7f       	andi	r24, 0xF0	; 240
   19cc6:	89 2b       	or	r24, r25
   19cc8:	08 95       	ret

00019cca <lif_BCD2BIN>:
   19cca:	28 2f       	mov	r18, r24
   19ccc:	22 95       	swap	r18
   19cce:	2f 70       	andi	r18, 0x0F	; 15
   19cd0:	8f 70       	andi	r24, 0x0F	; 15
   19cd2:	90 e0       	ldi	r25, 0x00	; 0
   19cd4:	3a e0       	ldi	r19, 0x0A	; 10
   19cd6:	23 9f       	mul	r18, r19
   19cd8:	80 0d       	add	r24, r0
   19cda:	91 1d       	adc	r25, r1
   19cdc:	11 24       	eor	r1, r1
   19cde:	08 95       	ret

00019ce0 <lif_time2lifbcd>:
   19ce0:	aa e1       	ldi	r26, 0x1A	; 26
   19ce2:	b0 e0       	ldi	r27, 0x00	; 0
   19ce4:	e6 e7       	ldi	r30, 0x76	; 118
   19ce6:	fe ec       	ldi	r31, 0xCE	; 206
   19ce8:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
   19cec:	8b 01       	movw	r16, r22
   19cee:	9c 01       	movw	r18, r24
   19cf0:	6f 8b       	std	Y+23, r22	; 0x17
   19cf2:	78 8f       	std	Y+24, r23	; 0x18
   19cf4:	89 8f       	std	Y+25, r24	; 0x19
   19cf6:	9a 8f       	std	Y+26, r25	; 0x1a
   19cf8:	67 2b       	or	r22, r23
   19cfa:	68 2b       	or	r22, r24
   19cfc:	69 2b       	or	r22, r25
   19cfe:	41 f4       	brne	.+16     	; 0x19d10 <lif_time2lifbcd+0x30>
   19d00:	fa 01       	movw	r30, r20
   19d02:	ca 01       	movw	r24, r20
   19d04:	06 96       	adiw	r24, 0x06	; 6
   19d06:	11 92       	st	Z+, r1
   19d08:	e8 17       	cp	r30, r24
   19d0a:	f9 07       	cpc	r31, r25
   19d0c:	e1 f7       	brne	.-8      	; 0x19d06 <lif_time2lifbcd+0x26>
   19d0e:	26 c0       	rjmp	.+76     	; 0x19d5c <lif_time2lifbcd+0x7c>
   19d10:	8a 01       	movw	r16, r20
   19d12:	be 01       	movw	r22, r28
   19d14:	6f 5f       	subi	r22, 0xFF	; 255
   19d16:	7f 4f       	sbci	r23, 0xFF	; 255
   19d18:	ce 01       	movw	r24, r28
   19d1a:	47 96       	adiw	r24, 0x17	; 23
   19d1c:	0e 94 4d 38 	call	0x709a	; 0x709a <gmtime_r>
   19d20:	8b 85       	ldd	r24, Y+11	; 0x0b
   19d22:	9c 85       	ldd	r25, Y+12	; 0x0c
   19d24:	64 e6       	ldi	r22, 0x64	; 100
   19d26:	70 e0       	ldi	r23, 0x00	; 0
   19d28:	0e 94 70 ec 	call	0x1d8e0	; 0x1d8e0 <__divmodhi4>
   19d2c:	c7 df       	rcall	.-114    	; 0x19cbc <lif_BIN2BCD>
   19d2e:	f8 01       	movw	r30, r16
   19d30:	80 83       	st	Z, r24
   19d32:	89 85       	ldd	r24, Y+9	; 0x09
   19d34:	8f 5f       	subi	r24, 0xFF	; 255
   19d36:	c2 df       	rcall	.-124    	; 0x19cbc <lif_BIN2BCD>
   19d38:	f8 01       	movw	r30, r16
   19d3a:	81 83       	std	Z+1, r24	; 0x01
   19d3c:	8f 81       	ldd	r24, Y+7	; 0x07
   19d3e:	be df       	rcall	.-132    	; 0x19cbc <lif_BIN2BCD>
   19d40:	f8 01       	movw	r30, r16
   19d42:	82 83       	std	Z+2, r24	; 0x02
   19d44:	8d 81       	ldd	r24, Y+5	; 0x05
   19d46:	ba df       	rcall	.-140    	; 0x19cbc <lif_BIN2BCD>
   19d48:	f8 01       	movw	r30, r16
   19d4a:	83 83       	std	Z+3, r24	; 0x03
   19d4c:	8b 81       	ldd	r24, Y+3	; 0x03
   19d4e:	b6 df       	rcall	.-148    	; 0x19cbc <lif_BIN2BCD>
   19d50:	f8 01       	movw	r30, r16
   19d52:	84 83       	std	Z+4, r24	; 0x04
   19d54:	89 81       	ldd	r24, Y+1	; 0x01
   19d56:	b2 df       	rcall	.-156    	; 0x19cbc <lif_BIN2BCD>
   19d58:	f8 01       	movw	r30, r16
   19d5a:	85 83       	std	Z+5, r24	; 0x05
   19d5c:	6a 96       	adiw	r28, 0x1a	; 26
   19d5e:	e4 e0       	ldi	r30, 0x04	; 4
   19d60:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

00019d64 <lif_lifbcd2time>:
   19d64:	a6 e1       	ldi	r26, 0x16	; 22
   19d66:	b0 e0       	ldi	r27, 0x00	; 0
   19d68:	e8 eb       	ldi	r30, 0xB8	; 184
   19d6a:	fe ec       	ldi	r31, 0xCE	; 206
   19d6c:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   19d70:	8c 01       	movw	r16, r24
   19d72:	7c 01       	movw	r14, r24
   19d74:	5c 01       	movw	r10, r24
   19d76:	26 e0       	ldi	r18, 0x06	; 6
   19d78:	a2 0e       	add	r10, r18
   19d7a:	b1 1c       	adc	r11, r1
   19d7c:	cc 24       	eor	r12, r12
   19d7e:	c3 94       	inc	r12
   19d80:	d1 2c       	mov	r13, r1
   19d82:	f7 01       	movw	r30, r14
   19d84:	81 91       	ld	r24, Z+
   19d86:	7f 01       	movw	r14, r30
   19d88:	a0 df       	rcall	.-192    	; 0x19cca <lif_BCD2BIN>
   19d8a:	89 2b       	or	r24, r25
   19d8c:	11 f0       	breq	.+4      	; 0x19d92 <lif_lifbcd2time+0x2e>
   19d8e:	c1 2c       	mov	r12, r1
   19d90:	d1 2c       	mov	r13, r1
   19d92:	ea 14       	cp	r14, r10
   19d94:	fb 04       	cpc	r15, r11
   19d96:	a9 f7       	brne	.-22     	; 0x19d82 <lif_lifbcd2time+0x1e>
   19d98:	c1 14       	cp	r12, r1
   19d9a:	d1 04       	cpc	r13, r1
   19d9c:	61 f5       	brne	.+88     	; 0x19df6 <lif_lifbcd2time+0x92>
   19d9e:	f8 01       	movw	r30, r16
   19da0:	80 81       	ld	r24, Z
   19da2:	93 df       	rcall	.-218    	; 0x19cca <lif_BCD2BIN>
   19da4:	7c 01       	movw	r14, r24
   19da6:	f8 01       	movw	r30, r16
   19da8:	81 81       	ldd	r24, Z+1	; 0x01
   19daa:	8f df       	rcall	.-226    	; 0x19cca <lif_BCD2BIN>
   19dac:	01 97       	sbiw	r24, 0x01	; 1
   19dae:	f6 e4       	ldi	r31, 0x46	; 70
   19db0:	ef 16       	cp	r14, r31
   19db2:	f1 04       	cpc	r15, r1
   19db4:	1c f4       	brge	.+6      	; 0x19dbc <lif_lifbcd2time+0x58>
   19db6:	24 e6       	ldi	r18, 0x64	; 100
   19db8:	e2 0e       	add	r14, r18
   19dba:	f1 1c       	adc	r15, r1
   19dbc:	fc 86       	std	Y+12, r15	; 0x0c
   19dbe:	eb 86       	std	Y+11, r14	; 0x0b
   19dc0:	9a 87       	std	Y+10, r25	; 0x0a
   19dc2:	89 87       	std	Y+9, r24	; 0x09
   19dc4:	f8 01       	movw	r30, r16
   19dc6:	82 81       	ldd	r24, Z+2	; 0x02
   19dc8:	80 df       	rcall	.-256    	; 0x19cca <lif_BCD2BIN>
   19dca:	98 87       	std	Y+8, r25	; 0x08
   19dcc:	8f 83       	std	Y+7, r24	; 0x07
   19dce:	f8 01       	movw	r30, r16
   19dd0:	83 81       	ldd	r24, Z+3	; 0x03
   19dd2:	7b df       	rcall	.-266    	; 0x19cca <lif_BCD2BIN>
   19dd4:	9e 83       	std	Y+6, r25	; 0x06
   19dd6:	8d 83       	std	Y+5, r24	; 0x05
   19dd8:	f8 01       	movw	r30, r16
   19dda:	84 81       	ldd	r24, Z+4	; 0x04
   19ddc:	76 df       	rcall	.-276    	; 0x19cca <lif_BCD2BIN>
   19dde:	9c 83       	std	Y+4, r25	; 0x04
   19de0:	8b 83       	std	Y+3, r24	; 0x03
   19de2:	f8 01       	movw	r30, r16
   19de4:	85 81       	ldd	r24, Z+5	; 0x05
   19de6:	71 df       	rcall	.-286    	; 0x19cca <lif_BCD2BIN>
   19de8:	9a 83       	std	Y+2, r25	; 0x02
   19dea:	89 83       	std	Y+1, r24	; 0x01
   19dec:	ce 01       	movw	r24, r28
   19dee:	01 96       	adiw	r24, 0x01	; 1
   19df0:	0e 94 22 3b 	call	0x7644	; 0x7644 <timegm>
   19df4:	03 c0       	rjmp	.+6      	; 0x19dfc <lif_lifbcd2time+0x98>
   19df6:	60 e0       	ldi	r22, 0x00	; 0
   19df8:	70 e0       	ldi	r23, 0x00	; 0
   19dfa:	cb 01       	movw	r24, r22
   19dfc:	66 96       	adiw	r28, 0x16	; 22
   19dfe:	ea e0       	ldi	r30, 0x0A	; 10
   19e00:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

00019e04 <lif_ctime_gmt>:
   19e04:	a6 e1       	ldi	r26, 0x16	; 22
   19e06:	b0 e0       	ldi	r27, 0x00	; 0
   19e08:	e8 e0       	ldi	r30, 0x08	; 8
   19e0a:	ff ec       	ldi	r31, 0xCF	; 207
   19e0c:	0c 94 13 ed 	jmp	0x1da26	; 0x1da26 <__prologue_saves__+0x1c>
   19e10:	20 e2       	ldi	r18, 0x20	; 32
   19e12:	ec ef       	ldi	r30, 0xFC	; 252
   19e14:	f9 e1       	ldi	r31, 0x19	; 25
   19e16:	df 01       	movw	r26, r30
   19e18:	1d 92       	st	X+, r1
   19e1a:	2a 95       	dec	r18
   19e1c:	e9 f7       	brne	.-6      	; 0x19e18 <lif_ctime_gmt+0x14>
   19e1e:	be 01       	movw	r22, r28
   19e20:	6f 5f       	subi	r22, 0xFF	; 255
   19e22:	7f 4f       	sbci	r23, 0xFF	; 255
   19e24:	0e 94 4d 38 	call	0x709a	; 0x709a <gmtime_r>
   19e28:	6c ef       	ldi	r22, 0xFC	; 252
   19e2a:	79 e1       	ldi	r23, 0x19	; 25
   19e2c:	0e 94 78 3d 	call	0x7af0	; 0x7af0 <asctime_r>
   19e30:	8c 01       	movw	r16, r24
   19e32:	0e 94 a8 32 	call	0x6550	; 0x6550 <trim_tail>
   19e36:	c8 01       	movw	r24, r16
   19e38:	66 96       	adiw	r28, 0x16	; 22
   19e3a:	e4 e0       	ldi	r30, 0x04	; 4
   19e3c:	0c 94 2f ed 	jmp	0x1da5e	; 0x1da5e <__epilogue_restores__+0x1c>

00019e40 <lif_lifbcd2timestr>:
   19e40:	a4 e0       	ldi	r26, 0x04	; 4
   19e42:	b0 e0       	ldi	r27, 0x00	; 0
   19e44:	e6 e2       	ldi	r30, 0x26	; 38
   19e46:	ff ec       	ldi	r31, 0xCF	; 207
   19e48:	0c 94 15 ed 	jmp	0x1da2a	; 0x1da2a <__prologue_saves__+0x20>
   19e4c:	20 e2       	ldi	r18, 0x20	; 32
   19e4e:	ec ed       	ldi	r30, 0xDC	; 220
   19e50:	f9 e1       	ldi	r31, 0x19	; 25
   19e52:	df 01       	movw	r26, r30
   19e54:	1d 92       	st	X+, r1
   19e56:	2a 95       	dec	r18
   19e58:	e9 f7       	brne	.-6      	; 0x19e54 <lif_lifbcd2timestr+0x14>
   19e5a:	84 df       	rcall	.-248    	; 0x19d64 <lif_lifbcd2time>
   19e5c:	69 83       	std	Y+1, r22	; 0x01
   19e5e:	7a 83       	std	Y+2, r23	; 0x02
   19e60:	8b 83       	std	Y+3, r24	; 0x03
   19e62:	9c 83       	std	Y+4, r25	; 0x04
   19e64:	67 2b       	or	r22, r23
   19e66:	68 2b       	or	r22, r24
   19e68:	69 2b       	or	r22, r25
   19e6a:	29 f0       	breq	.+10     	; 0x19e76 <lif_lifbcd2timestr+0x36>
   19e6c:	ce 01       	movw	r24, r28
   19e6e:	01 96       	adiw	r24, 0x01	; 1
   19e70:	c9 df       	rcall	.-110    	; 0x19e04 <lif_ctime_gmt>
   19e72:	bc 01       	movw	r22, r24
   19e74:	02 c0       	rjmp	.+4      	; 0x19e7a <lif_lifbcd2timestr+0x3a>
   19e76:	61 ec       	ldi	r22, 0xC1	; 193
   19e78:	75 e1       	ldi	r23, 0x15	; 21
   19e7a:	8c ed       	ldi	r24, 0xDC	; 220
   19e7c:	99 e1       	ldi	r25, 0x19	; 25
   19e7e:	0e 94 4e 32 	call	0x649c	; 0x649c <strcpy>
   19e82:	8c ed       	ldi	r24, 0xDC	; 220
   19e84:	99 e1       	ldi	r25, 0x19	; 25
   19e86:	24 96       	adiw	r28, 0x04	; 4
   19e88:	e2 e0       	ldi	r30, 0x02	; 2
   19e8a:	0c 94 31 ed 	jmp	0x1da62	; 0x1da62 <__epilogue_restores__+0x20>

00019e8e <lif_image_clear>:
   19e8e:	20 e7       	ldi	r18, 0x70	; 112
   19e90:	fc 01       	movw	r30, r24
   19e92:	11 92       	st	Z+, r1
   19e94:	2a 95       	dec	r18
   19e96:	e9 f7       	brne	.-6      	; 0x19e92 <lif_image_clear+0x4>
   19e98:	08 95       	ret

00019e9a <lif_dir_clear>:
   19e9a:	81 5b       	subi	r24, 0xB1	; 177
   19e9c:	9f 4f       	sbci	r25, 0xFF	; 255
   19e9e:	21 e2       	ldi	r18, 0x21	; 33
   19ea0:	fc 01       	movw	r30, r24
   19ea2:	11 92       	st	Z+, r1
   19ea4:	2a 95       	dec	r18
   19ea6:	e9 f7       	brne	.-6      	; 0x19ea2 <lif_dir_clear+0x8>
   19ea8:	08 95       	ret

00019eaa <lif_vol_clear>:
   19eaa:	84 96       	adiw	r24, 0x24	; 36
   19eac:	2b e2       	ldi	r18, 0x2B	; 43
   19eae:	fc 01       	movw	r30, r24
   19eb0:	11 92       	st	Z+, r1
   19eb2:	2a 95       	dec	r18
   19eb4:	e9 f7       	brne	.-6      	; 0x19eb0 <lif_vol_clear+0x6>
   19eb6:	08 95       	ret

00019eb8 <lif_dump_vol>:
   19eb8:	cf 93       	push	r28
   19eba:	df 93       	push	r29
   19ebc:	ec 01       	movw	r28, r24
   19ebe:	7f 93       	push	r23
   19ec0:	6f 93       	push	r22
   19ec2:	87 e7       	ldi	r24, 0x77	; 119
   19ec4:	93 e4       	ldi	r25, 0x43	; 67
   19ec6:	1f 92       	push	r1
   19ec8:	9f 93       	push	r25
   19eca:	8f 93       	push	r24
   19ecc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19ed0:	89 81       	ldd	r24, Y+1	; 0x01
   19ed2:	8f 93       	push	r24
   19ed4:	88 81       	ld	r24, Y
   19ed6:	8f 93       	push	r24
   19ed8:	8d e5       	ldi	r24, 0x5D	; 93
   19eda:	93 e4       	ldi	r25, 0x43	; 67
   19edc:	1f 92       	push	r1
   19ede:	9f 93       	push	r25
   19ee0:	8f 93       	push	r24
   19ee2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19ee6:	8f 81       	ldd	r24, Y+7	; 0x07
   19ee8:	8f 93       	push	r24
   19eea:	8e 81       	ldd	r24, Y+6	; 0x06
   19eec:	8f 93       	push	r24
   19eee:	8d 81       	ldd	r24, Y+5	; 0x05
   19ef0:	8f 93       	push	r24
   19ef2:	8c 81       	ldd	r24, Y+4	; 0x04
   19ef4:	8f 93       	push	r24
   19ef6:	80 e4       	ldi	r24, 0x40	; 64
   19ef8:	93 e4       	ldi	r25, 0x43	; 67
   19efa:	1f 92       	push	r1
   19efc:	9f 93       	push	r25
   19efe:	8f 93       	push	r24
   19f00:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19f04:	8b 85       	ldd	r24, Y+11	; 0x0b
   19f06:	8f 93       	push	r24
   19f08:	8a 85       	ldd	r24, Y+10	; 0x0a
   19f0a:	8f 93       	push	r24
   19f0c:	89 85       	ldd	r24, Y+9	; 0x09
   19f0e:	8f 93       	push	r24
   19f10:	88 85       	ldd	r24, Y+8	; 0x08
   19f12:	8f 93       	push	r24
   19f14:	83 e2       	ldi	r24, 0x23	; 35
   19f16:	93 e4       	ldi	r25, 0x43	; 67
   19f18:	1f 92       	push	r1
   19f1a:	9f 93       	push	r25
   19f1c:	8f 93       	push	r24
   19f1e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19f22:	8f 85       	ldd	r24, Y+15	; 0x0f
   19f24:	8f 93       	push	r24
   19f26:	8e 85       	ldd	r24, Y+14	; 0x0e
   19f28:	8f 93       	push	r24
   19f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
   19f2c:	8f 93       	push	r24
   19f2e:	8c 85       	ldd	r24, Y+12	; 0x0c
   19f30:	8f 93       	push	r24
   19f32:	86 e0       	ldi	r24, 0x06	; 6
   19f34:	93 e4       	ldi	r25, 0x43	; 67
   19f36:	1f 92       	push	r1
   19f38:	9f 93       	push	r25
   19f3a:	8f 93       	push	r24
   19f3c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19f40:	8b 89       	ldd	r24, Y+19	; 0x13
   19f42:	8f 93       	push	r24
   19f44:	8a 89       	ldd	r24, Y+18	; 0x12
   19f46:	8f 93       	push	r24
   19f48:	89 89       	ldd	r24, Y+17	; 0x11
   19f4a:	8f 93       	push	r24
   19f4c:	88 89       	ldd	r24, Y+16	; 0x10
   19f4e:	8f 93       	push	r24
   19f50:	89 ee       	ldi	r24, 0xE9	; 233
   19f52:	92 e4       	ldi	r25, 0x42	; 66
   19f54:	1f 92       	push	r1
   19f56:	9f 93       	push	r25
   19f58:	8f 93       	push	r24
   19f5a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19f5e:	8d b7       	in	r24, 0x3d	; 61
   19f60:	9e b7       	in	r25, 0x3e	; 62
   19f62:	86 96       	adiw	r24, 0x26	; 38
   19f64:	0f b6       	in	r0, 0x3f	; 63
   19f66:	f8 94       	cli
   19f68:	9e bf       	out	0x3e, r25	; 62
   19f6a:	0f be       	out	0x3f, r0	; 63
   19f6c:	8d bf       	out	0x3d, r24	; 61
   19f6e:	8f 89       	ldd	r24, Y+23	; 0x17
   19f70:	8f 93       	push	r24
   19f72:	8e 89       	ldd	r24, Y+22	; 0x16
   19f74:	8f 93       	push	r24
   19f76:	8d 89       	ldd	r24, Y+21	; 0x15
   19f78:	8f 93       	push	r24
   19f7a:	8c 89       	ldd	r24, Y+20	; 0x14
   19f7c:	8f 93       	push	r24
   19f7e:	8c ec       	ldi	r24, 0xCC	; 204
   19f80:	92 e4       	ldi	r25, 0x42	; 66
   19f82:	1f 92       	push	r1
   19f84:	9f 93       	push	r25
   19f86:	8f 93       	push	r24
   19f88:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19f8e:	8f 93       	push	r24
   19f90:	8a 8d       	ldd	r24, Y+26	; 0x1a
   19f92:	8f 93       	push	r24
   19f94:	89 8d       	ldd	r24, Y+25	; 0x19
   19f96:	8f 93       	push	r24
   19f98:	88 8d       	ldd	r24, Y+24	; 0x18
   19f9a:	8f 93       	push	r24
   19f9c:	8f ea       	ldi	r24, 0xAF	; 175
   19f9e:	92 e4       	ldi	r25, 0x42	; 66
   19fa0:	1f 92       	push	r1
   19fa2:	9f 93       	push	r25
   19fa4:	8f 93       	push	r24
   19fa6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19faa:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19fac:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19fae:	09 2e       	mov	r0, r25
   19fb0:	00 0c       	add	r0, r0
   19fb2:	aa 0b       	sbc	r26, r26
   19fb4:	bb 0b       	sbc	r27, r27
   19fb6:	bf 93       	push	r27
   19fb8:	af 93       	push	r26
   19fba:	9f 93       	push	r25
   19fbc:	8f 93       	push	r24
   19fbe:	82 e9       	ldi	r24, 0x92	; 146
   19fc0:	92 e4       	ldi	r25, 0x42	; 66
   19fc2:	1f 92       	push	r1
   19fc4:	9f 93       	push	r25
   19fc6:	8f 93       	push	r24
   19fc8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19fcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
   19fce:	9f 8d       	ldd	r25, Y+31	; 0x1f
   19fd0:	09 2e       	mov	r0, r25
   19fd2:	00 0c       	add	r0, r0
   19fd4:	aa 0b       	sbc	r26, r26
   19fd6:	bb 0b       	sbc	r27, r27
   19fd8:	bf 93       	push	r27
   19fda:	af 93       	push	r26
   19fdc:	9f 93       	push	r25
   19fde:	8f 93       	push	r24
   19fe0:	85 e7       	ldi	r24, 0x75	; 117
   19fe2:	92 e4       	ldi	r25, 0x42	; 66
   19fe4:	1f 92       	push	r1
   19fe6:	9f 93       	push	r25
   19fe8:	8f 93       	push	r24
   19fea:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   19fee:	ce 01       	movw	r24, r28
   19ff0:	86 96       	adiw	r24, 0x26	; 38
   19ff2:	9f 93       	push	r25
   19ff4:	8f 93       	push	r24
   19ff6:	8b e5       	ldi	r24, 0x5B	; 91
   19ff8:	92 e4       	ldi	r25, 0x42	; 66
   19ffa:	1f 92       	push	r1
   19ffc:	9f 93       	push	r25
   19ffe:	8f 93       	push	r24
   1a000:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a004:	8d b7       	in	r24, 0x3d	; 61
   1a006:	9e b7       	in	r25, 0x3e	; 62
   1a008:	81 96       	adiw	r24, 0x21	; 33
   1a00a:	0f b6       	in	r0, 0x3f	; 63
   1a00c:	f8 94       	cli
   1a00e:	9e bf       	out	0x3e, r25	; 62
   1a010:	0f be       	out	0x3f, r0	; 63
   1a012:	8d bf       	out	0x3d, r24	; 61
   1a014:	8d a1       	ldd	r24, Y+37	; 0x25
   1a016:	8f 93       	push	r24
   1a018:	8c a1       	ldd	r24, Y+36	; 0x24
   1a01a:	8f 93       	push	r24
   1a01c:	8f e3       	ldi	r24, 0x3F	; 63
   1a01e:	92 e4       	ldi	r25, 0x42	; 66
   1a020:	1f 92       	push	r1
   1a022:	9f 93       	push	r25
   1a024:	8f 93       	push	r24
   1a026:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a02a:	88 a9       	ldd	r24, Y+48	; 0x30
   1a02c:	8f 93       	push	r24
   1a02e:	8f a5       	ldd	r24, Y+47	; 0x2f
   1a030:	8f 93       	push	r24
   1a032:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a034:	8f 93       	push	r24
   1a036:	8d a5       	ldd	r24, Y+45	; 0x2d
   1a038:	8f 93       	push	r24
   1a03a:	82 e2       	ldi	r24, 0x22	; 34
   1a03c:	92 e4       	ldi	r25, 0x42	; 66
   1a03e:	1f 92       	push	r1
   1a040:	9f 93       	push	r25
   1a042:	8f 93       	push	r24
   1a044:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a048:	88 ad       	ldd	r24, Y+56	; 0x38
   1a04a:	8f 93       	push	r24
   1a04c:	8f a9       	ldd	r24, Y+55	; 0x37
   1a04e:	8f 93       	push	r24
   1a050:	8e a9       	ldd	r24, Y+54	; 0x36
   1a052:	8f 93       	push	r24
   1a054:	8d a9       	ldd	r24, Y+53	; 0x35
   1a056:	8f 93       	push	r24
   1a058:	85 e0       	ldi	r24, 0x05	; 5
   1a05a:	92 e4       	ldi	r25, 0x42	; 66
   1a05c:	1f 92       	push	r1
   1a05e:	9f 93       	push	r25
   1a060:	8f 93       	push	r24
   1a062:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a066:	8a a9       	ldd	r24, Y+50	; 0x32
   1a068:	8f 93       	push	r24
   1a06a:	89 a9       	ldd	r24, Y+49	; 0x31
   1a06c:	8f 93       	push	r24
   1a06e:	89 ee       	ldi	r24, 0xE9	; 233
   1a070:	91 e4       	ldi	r25, 0x41	; 65
   1a072:	1f 92       	push	r1
   1a074:	9f 93       	push	r25
   1a076:	8f 93       	push	r24
   1a078:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a07c:	8a ad       	ldd	r24, Y+58	; 0x3a
   1a07e:	8f 93       	push	r24
   1a080:	89 ad       	ldd	r24, Y+57	; 0x39
   1a082:	8f 93       	push	r24
   1a084:	8d ec       	ldi	r24, 0xCD	; 205
   1a086:	91 e4       	ldi	r25, 0x41	; 65
   1a088:	1f 92       	push	r1
   1a08a:	9f 93       	push	r25
   1a08c:	8f 93       	push	r24
   1a08e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a092:	ce 01       	movw	r24, r28
   1a094:	87 5b       	subi	r24, 0xB7	; 183
   1a096:	9f 4f       	sbci	r25, 0xFF	; 255
   1a098:	d3 de       	rcall	.-602    	; 0x19e40 <lif_lifbcd2timestr>
   1a09a:	9f 93       	push	r25
   1a09c:	8f 93       	push	r24
   1a09e:	83 eb       	ldi	r24, 0xB3	; 179
   1a0a0:	91 e4       	ldi	r25, 0x41	; 65
   1a0a2:	1f 92       	push	r1
   1a0a4:	9f 93       	push	r25
   1a0a6:	8f 93       	push	r24
   1a0a8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a0ac:	8d b7       	in	r24, 0x3d	; 61
   1a0ae:	9e b7       	in	r25, 0x3e	; 62
   1a0b0:	82 96       	adiw	r24, 0x22	; 34
   1a0b2:	0f b6       	in	r0, 0x3f	; 63
   1a0b4:	f8 94       	cli
   1a0b6:	9e bf       	out	0x3e, r25	; 62
   1a0b8:	0f be       	out	0x3f, r0	; 63
   1a0ba:	8d bf       	out	0x3d, r24	; 61
   1a0bc:	ce 01       	movw	r24, r28
   1a0be:	81 5b       	subi	r24, 0xB1	; 177
   1a0c0:	9f 4f       	sbci	r25, 0xFF	; 255
   1a0c2:	9f 93       	push	r25
   1a0c4:	8f 93       	push	r24
   1a0c6:	89 e9       	ldi	r24, 0x99	; 153
   1a0c8:	91 e4       	ldi	r25, 0x41	; 65
   1a0ca:	1f 92       	push	r1
   1a0cc:	9f 93       	push	r25
   1a0ce:	8f 93       	push	r24
   1a0d0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a0d4:	fe 01       	movw	r30, r28
   1a0d6:	e6 5a       	subi	r30, 0xA6	; 166
   1a0d8:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0da:	81 81       	ldd	r24, Z+1	; 0x01
   1a0dc:	8f 93       	push	r24
   1a0de:	80 81       	ld	r24, Z
   1a0e0:	8f 93       	push	r24
   1a0e2:	8d e7       	ldi	r24, 0x7D	; 125
   1a0e4:	91 e4       	ldi	r25, 0x41	; 65
   1a0e6:	1f 92       	push	r1
   1a0e8:	9f 93       	push	r25
   1a0ea:	8f 93       	push	r24
   1a0ec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a0f0:	fe 01       	movw	r30, r28
   1a0f2:	e6 59       	subi	r30, 0x96	; 150
   1a0f4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0f6:	81 81       	ldd	r24, Z+1	; 0x01
   1a0f8:	8f 93       	push	r24
   1a0fa:	80 81       	ld	r24, Z
   1a0fc:	8f 93       	push	r24
   1a0fe:	81 e6       	ldi	r24, 0x61	; 97
   1a100:	91 e4       	ldi	r25, 0x41	; 65
   1a102:	1f 92       	push	r1
   1a104:	9f 93       	push	r25
   1a106:	8f 93       	push	r24
   1a108:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a10c:	fe 01       	movw	r30, r28
   1a10e:	e4 5a       	subi	r30, 0xA4	; 164
   1a110:	ff 4f       	sbci	r31, 0xFF	; 255
   1a112:	83 81       	ldd	r24, Z+3	; 0x03
   1a114:	8f 93       	push	r24
   1a116:	82 81       	ldd	r24, Z+2	; 0x02
   1a118:	8f 93       	push	r24
   1a11a:	81 81       	ldd	r24, Z+1	; 0x01
   1a11c:	8f 93       	push	r24
   1a11e:	80 81       	ld	r24, Z
   1a120:	8f 93       	push	r24
   1a122:	84 e4       	ldi	r24, 0x44	; 68
   1a124:	91 e4       	ldi	r25, 0x41	; 65
   1a126:	1f 92       	push	r1
   1a128:	9f 93       	push	r25
   1a12a:	8f 93       	push	r24
   1a12c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a130:	fe 01       	movw	r30, r28
   1a132:	e0 5a       	subi	r30, 0xA0	; 160
   1a134:	ff 4f       	sbci	r31, 0xFF	; 255
   1a136:	83 81       	ldd	r24, Z+3	; 0x03
   1a138:	8f 93       	push	r24
   1a13a:	82 81       	ldd	r24, Z+2	; 0x02
   1a13c:	8f 93       	push	r24
   1a13e:	81 81       	ldd	r24, Z+1	; 0x01
   1a140:	8f 93       	push	r24
   1a142:	80 81       	ld	r24, Z
   1a144:	8f 93       	push	r24
   1a146:	87 e2       	ldi	r24, 0x27	; 39
   1a148:	91 e4       	ldi	r25, 0x41	; 65
   1a14a:	1f 92       	push	r1
   1a14c:	9f 93       	push	r25
   1a14e:	8f 93       	push	r24
   1a150:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a154:	fe 01       	movw	r30, r28
   1a156:	e4 59       	subi	r30, 0x94	; 148
   1a158:	ff 4f       	sbci	r31, 0xFF	; 255
   1a15a:	80 81       	ld	r24, Z
   1a15c:	91 81       	ldd	r25, Z+1	; 0x01
   1a15e:	1f 92       	push	r1
   1a160:	1f 92       	push	r1
   1a162:	9f 93       	push	r25
   1a164:	8f 93       	push	r24
   1a166:	8a e0       	ldi	r24, 0x0A	; 10
   1a168:	91 e4       	ldi	r25, 0x41	; 65
   1a16a:	1f 92       	push	r1
   1a16c:	9f 93       	push	r25
   1a16e:	8f 93       	push	r24
   1a170:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a174:	8d b7       	in	r24, 0x3d	; 61
   1a176:	9e b7       	in	r25, 0x3e	; 62
   1a178:	84 96       	adiw	r24, 0x24	; 36
   1a17a:	0f b6       	in	r0, 0x3f	; 63
   1a17c:	f8 94       	cli
   1a17e:	9e bf       	out	0x3e, r25	; 62
   1a180:	0f be       	out	0x3f, r0	; 63
   1a182:	8d bf       	out	0x3d, r24	; 61
   1a184:	fe 01       	movw	r30, r28
   1a186:	e2 59       	subi	r30, 0x92	; 146
   1a188:	ff 4f       	sbci	r31, 0xFF	; 255
   1a18a:	81 81       	ldd	r24, Z+1	; 0x01
   1a18c:	8f 93       	push	r24
   1a18e:	80 81       	ld	r24, Z
   1a190:	8f 93       	push	r24
   1a192:	8e ee       	ldi	r24, 0xEE	; 238
   1a194:	90 e4       	ldi	r25, 0x40	; 64
   1a196:	1f 92       	push	r1
   1a198:	9f 93       	push	r25
   1a19a:	8f 93       	push	r24
   1a19c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a1a0:	ce 01       	movw	r24, r28
   1a1a2:	8c 59       	subi	r24, 0x9C	; 156
   1a1a4:	9f 4f       	sbci	r25, 0xFF	; 255
   1a1a6:	4c de       	rcall	.-872    	; 0x19e40 <lif_lifbcd2timestr>
   1a1a8:	9f 93       	push	r25
   1a1aa:	8f 93       	push	r24
   1a1ac:	84 ed       	ldi	r24, 0xD4	; 212
   1a1ae:	90 e4       	ldi	r25, 0x40	; 64
   1a1b0:	1f 92       	push	r1
   1a1b2:	9f 93       	push	r25
   1a1b4:	8f 93       	push	r24
   1a1b6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a1ba:	82 ed       	ldi	r24, 0xD2	; 210
   1a1bc:	90 e4       	ldi	r25, 0x40	; 64
   1a1be:	1f 92       	push	r1
   1a1c0:	9f 93       	push	r25
   1a1c2:	8f 93       	push	r24
   1a1c4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a1c8:	8d b7       	in	r24, 0x3d	; 61
   1a1ca:	9e b7       	in	r25, 0x3e	; 62
   1a1cc:	0d 96       	adiw	r24, 0x0d	; 13
   1a1ce:	0f b6       	in	r0, 0x3f	; 63
   1a1d0:	f8 94       	cli
   1a1d2:	9e bf       	out	0x3e, r25	; 62
   1a1d4:	0f be       	out	0x3f, r0	; 63
   1a1d6:	8d bf       	out	0x3d, r24	; 61
   1a1d8:	df 91       	pop	r29
   1a1da:	cf 91       	pop	r28
   1a1dc:	08 95       	ret

0001a1de <lif_check_volume>:
   1a1de:	0f 93       	push	r16
   1a1e0:	1f 93       	push	r17
   1a1e2:	cf 93       	push	r28
   1a1e4:	df 93       	push	r29
   1a1e6:	ec 01       	movw	r28, r24
   1a1e8:	86 96       	adiw	r24, 0x26	; 38
   1a1ea:	fb da       	rcall	.-2570   	; 0x197e2 <lif_checkname>
   1a1ec:	89 2b       	or	r24, r25
   1a1ee:	79 f4       	brne	.+30     	; 0x1a20e <lif_check_volume+0x30>
   1a1f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a1f4:	80 ff       	sbrs	r24, 0
   1a1f6:	0e c0       	rjmp	.+28     	; 0x1a214 <lif_check_volume+0x36>
   1a1f8:	83 eb       	ldi	r24, 0xB3	; 179
   1a1fa:	90 e4       	ldi	r25, 0x40	; 64
   1a1fc:	1f 92       	push	r1
   1a1fe:	9f 93       	push	r25
   1a200:	8f 93       	push	r24
   1a202:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a206:	0f 90       	pop	r0
   1a208:	0f 90       	pop	r0
   1a20a:	0f 90       	pop	r0
   1a20c:	03 c0       	rjmp	.+6      	; 0x1a214 <lif_check_volume+0x36>
   1a20e:	81 e0       	ldi	r24, 0x01	; 1
   1a210:	90 e0       	ldi	r25, 0x00	; 0
   1a212:	02 c0       	rjmp	.+4      	; 0x1a218 <lif_check_volume+0x3a>
   1a214:	80 e0       	ldi	r24, 0x00	; 0
   1a216:	90 e0       	ldi	r25, 0x00	; 0
   1a218:	29 a9       	ldd	r18, Y+49	; 0x31
   1a21a:	3a a9       	ldd	r19, Y+50	; 0x32
   1a21c:	21 15       	cp	r18, r1
   1a21e:	40 e1       	ldi	r20, 0x10	; 16
   1a220:	34 07       	cpc	r19, r20
   1a222:	a1 f0       	breq	.+40     	; 0x1a24c <lif_check_volume+0x6e>
   1a224:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a228:	80 ff       	sbrs	r24, 0
   1a22a:	0e c0       	rjmp	.+28     	; 0x1a248 <lif_check_volume+0x6a>
   1a22c:	3f 93       	push	r19
   1a22e:	2f 93       	push	r18
   1a230:	8a e7       	ldi	r24, 0x7A	; 122
   1a232:	90 e4       	ldi	r25, 0x40	; 64
   1a234:	1f 92       	push	r1
   1a236:	9f 93       	push	r25
   1a238:	8f 93       	push	r24
   1a23a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a23e:	0f 90       	pop	r0
   1a240:	0f 90       	pop	r0
   1a242:	0f 90       	pop	r0
   1a244:	0f 90       	pop	r0
   1a246:	0f 90       	pop	r0
   1a248:	80 e0       	ldi	r24, 0x00	; 0
   1a24a:	90 e0       	ldi	r25, 0x00	; 0
   1a24c:	29 ad       	ldd	r18, Y+57	; 0x39
   1a24e:	3a ad       	ldd	r19, Y+58	; 0x3a
   1a250:	22 30       	cpi	r18, 0x02	; 2
   1a252:	31 05       	cpc	r19, r1
   1a254:	a0 f0       	brcs	.+40     	; 0x1a27e <lif_check_volume+0xa0>
   1a256:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a25a:	80 ff       	sbrs	r24, 0
   1a25c:	0e c0       	rjmp	.+28     	; 0x1a27a <lif_check_volume+0x9c>
   1a25e:	3f 93       	push	r19
   1a260:	2f 93       	push	r18
   1a262:	82 e6       	ldi	r24, 0x62	; 98
   1a264:	90 e4       	ldi	r25, 0x40	; 64
   1a266:	1f 92       	push	r1
   1a268:	9f 93       	push	r25
   1a26a:	8f 93       	push	r24
   1a26c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a270:	0f 90       	pop	r0
   1a272:	0f 90       	pop	r0
   1a274:	0f 90       	pop	r0
   1a276:	0f 90       	pop	r0
   1a278:	0f 90       	pop	r0
   1a27a:	80 e0       	ldi	r24, 0x00	; 0
   1a27c:	90 e0       	ldi	r25, 0x00	; 0
   1a27e:	2b a9       	ldd	r18, Y+51	; 0x33
   1a280:	3c a9       	ldd	r19, Y+52	; 0x34
   1a282:	23 2b       	or	r18, r19
   1a284:	81 f0       	breq	.+32     	; 0x1a2a6 <lif_check_volume+0xc8>
   1a286:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a28a:	80 ff       	sbrs	r24, 0
   1a28c:	0a c0       	rjmp	.+20     	; 0x1a2a2 <lif_check_volume+0xc4>
   1a28e:	89 e2       	ldi	r24, 0x29	; 41
   1a290:	90 e4       	ldi	r25, 0x40	; 64
   1a292:	1f 92       	push	r1
   1a294:	9f 93       	push	r25
   1a296:	8f 93       	push	r24
   1a298:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a29c:	0f 90       	pop	r0
   1a29e:	0f 90       	pop	r0
   1a2a0:	0f 90       	pop	r0
   1a2a2:	80 e0       	ldi	r24, 0x00	; 0
   1a2a4:	90 e0       	ldi	r25, 0x00	; 0
   1a2a6:	2b ad       	ldd	r18, Y+59	; 0x3b
   1a2a8:	3c ad       	ldd	r19, Y+60	; 0x3c
   1a2aa:	23 2b       	or	r18, r19
   1a2ac:	81 f0       	breq	.+32     	; 0x1a2ce <lif_check_volume+0xf0>
   1a2ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a2b2:	80 ff       	sbrs	r24, 0
   1a2b4:	0a c0       	rjmp	.+20     	; 0x1a2ca <lif_check_volume+0xec>
   1a2b6:	80 ef       	ldi	r24, 0xF0	; 240
   1a2b8:	9f e3       	ldi	r25, 0x3F	; 63
   1a2ba:	1f 92       	push	r1
   1a2bc:	9f 93       	push	r25
   1a2be:	8f 93       	push	r24
   1a2c0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a2c4:	0f 90       	pop	r0
   1a2c6:	0f 90       	pop	r0
   1a2c8:	0f 90       	pop	r0
   1a2ca:	80 e0       	ldi	r24, 0x00	; 0
   1a2cc:	90 e0       	ldi	r25, 0x00	; 0
   1a2ce:	4d a5       	ldd	r20, Y+45	; 0x2d
   1a2d0:	5e a5       	ldd	r21, Y+46	; 0x2e
   1a2d2:	6f a5       	ldd	r22, Y+47	; 0x2f
   1a2d4:	78 a9       	ldd	r23, Y+48	; 0x30
   1a2d6:	45 2b       	or	r20, r21
   1a2d8:	46 2b       	or	r20, r22
   1a2da:	47 2b       	or	r20, r23
   1a2dc:	c9 f4       	brne	.+50     	; 0x1a310 <lif_check_volume+0x132>
   1a2de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a2e2:	80 ff       	sbrs	r24, 0
   1a2e4:	13 c0       	rjmp	.+38     	; 0x1a30c <lif_check_volume+0x12e>
   1a2e6:	1f 92       	push	r1
   1a2e8:	1f 92       	push	r1
   1a2ea:	1f 92       	push	r1
   1a2ec:	1f 92       	push	r1
   1a2ee:	8b ec       	ldi	r24, 0xCB	; 203
   1a2f0:	9f e3       	ldi	r25, 0x3F	; 63
   1a2f2:	1f 92       	push	r1
   1a2f4:	9f 93       	push	r25
   1a2f6:	8f 93       	push	r24
   1a2f8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a2fc:	8d b7       	in	r24, 0x3d	; 61
   1a2fe:	9e b7       	in	r25, 0x3e	; 62
   1a300:	07 96       	adiw	r24, 0x07	; 7
   1a302:	0f b6       	in	r0, 0x3f	; 63
   1a304:	f8 94       	cli
   1a306:	9e bf       	out	0x3e, r25	; 62
   1a308:	0f be       	out	0x3f, r0	; 63
   1a30a:	8d bf       	out	0x3d, r24	; 61
   1a30c:	80 e0       	ldi	r24, 0x00	; 0
   1a30e:	90 e0       	ldi	r25, 0x00	; 0
   1a310:	4d a9       	ldd	r20, Y+53	; 0x35
   1a312:	5e a9       	ldd	r21, Y+54	; 0x36
   1a314:	6f a9       	ldd	r22, Y+55	; 0x37
   1a316:	78 ad       	ldd	r23, Y+56	; 0x38
   1a318:	45 2b       	or	r20, r21
   1a31a:	46 2b       	or	r20, r22
   1a31c:	47 2b       	or	r20, r23
   1a31e:	81 f4       	brne	.+32     	; 0x1a340 <lif_check_volume+0x162>
   1a320:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a324:	80 ff       	sbrs	r24, 0
   1a326:	0a c0       	rjmp	.+20     	; 0x1a33c <lif_check_volume+0x15e>
   1a328:	8c e9       	ldi	r24, 0x9C	; 156
   1a32a:	9f e3       	ldi	r25, 0x3F	; 63
   1a32c:	1f 92       	push	r1
   1a32e:	9f 93       	push	r25
   1a330:	8f 93       	push	r24
   1a332:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a336:	0f 90       	pop	r0
   1a338:	0f 90       	pop	r0
   1a33a:	0f 90       	pop	r0
   1a33c:	80 e0       	ldi	r24, 0x00	; 0
   1a33e:	90 e0       	ldi	r25, 0x00	; 0
   1a340:	0d a5       	ldd	r16, Y+45	; 0x2d
   1a342:	1e a5       	ldd	r17, Y+46	; 0x2e
   1a344:	2f a5       	ldd	r18, Y+47	; 0x2f
   1a346:	38 a9       	ldd	r19, Y+48	; 0x30
   1a348:	4d a9       	ldd	r20, Y+53	; 0x35
   1a34a:	5e a9       	ldd	r21, Y+54	; 0x36
   1a34c:	6f a9       	ldd	r22, Y+55	; 0x37
   1a34e:	78 ad       	ldd	r23, Y+56	; 0x38
   1a350:	40 0f       	add	r20, r16
   1a352:	51 1f       	adc	r21, r17
   1a354:	62 1f       	adc	r22, r18
   1a356:	73 1f       	adc	r23, r19
   1a358:	0c 81       	ldd	r16, Y+4	; 0x04
   1a35a:	1d 81       	ldd	r17, Y+5	; 0x05
   1a35c:	2e 81       	ldd	r18, Y+6	; 0x06
   1a35e:	3f 81       	ldd	r19, Y+7	; 0x07
   1a360:	04 17       	cp	r16, r20
   1a362:	15 07       	cpc	r17, r21
   1a364:	26 07       	cpc	r18, r22
   1a366:	37 07       	cpc	r19, r23
   1a368:	80 f4       	brcc	.+32     	; 0x1a38a <lif_check_volume+0x1ac>
   1a36a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a36e:	80 ff       	sbrs	r24, 0
   1a370:	0a c0       	rjmp	.+20     	; 0x1a386 <lif_check_volume+0x1a8>
   1a372:	80 e7       	ldi	r24, 0x70	; 112
   1a374:	9f e3       	ldi	r25, 0x3F	; 63
   1a376:	1f 92       	push	r1
   1a378:	9f 93       	push	r25
   1a37a:	8f 93       	push	r24
   1a37c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a380:	0f 90       	pop	r0
   1a382:	0f 90       	pop	r0
   1a384:	0f 90       	pop	r0
   1a386:	80 e0       	ldi	r24, 0x00	; 0
   1a388:	90 e0       	ldi	r25, 0x00	; 0
   1a38a:	df 91       	pop	r29
   1a38c:	cf 91       	pop	r28
   1a38e:	1f 91       	pop	r17
   1a390:	0f 91       	pop	r16
   1a392:	08 95       	ret

0001a394 <lif_check_dir>:
   1a394:	a4 e0       	ldi	r26, 0x04	; 4
   1a396:	b0 e0       	ldi	r27, 0x00	; 0
   1a398:	e0 ed       	ldi	r30, 0xD0	; 208
   1a39a:	f1 ed       	ldi	r31, 0xD1	; 209
   1a39c:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1a3a0:	6c 01       	movw	r12, r24
   1a3a2:	2a e5       	ldi	r18, 0x5A	; 90
   1a3a4:	c2 0e       	add	r12, r18
   1a3a6:	d1 1c       	adc	r13, r1
   1a3a8:	f6 01       	movw	r30, r12
   1a3aa:	20 81       	ld	r18, Z
   1a3ac:	31 81       	ldd	r19, Z+1	; 0x01
   1a3ae:	21 50       	subi	r18, 0x01	; 1
   1a3b0:	31 09       	sbc	r19, r1
   1a3b2:	2e 3f       	cpi	r18, 0xFE	; 254
   1a3b4:	3f 4f       	sbci	r19, 0xFF	; 255
   1a3b6:	08 f0       	brcs	.+2      	; 0x1a3ba <lif_check_dir+0x26>
   1a3b8:	98 c1       	rjmp	.+816    	; 0x1a6ea <lif_check_dir+0x356>
   1a3ba:	9c 83       	std	Y+4, r25	; 0x04
   1a3bc:	8b 83       	std	Y+3, r24	; 0x03
   1a3be:	8c 01       	movw	r16, r24
   1a3c0:	01 5b       	subi	r16, 0xB1	; 177
   1a3c2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3c4:	c8 01       	movw	r24, r16
   1a3c6:	0d da       	rcall	.-3046   	; 0x197e2 <lif_checkname>
   1a3c8:	89 2b       	or	r24, r25
   1a3ca:	99 f4       	brne	.+38     	; 0x1a3f2 <lif_check_dir+0x5e>
   1a3cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a3d0:	80 ff       	sbrs	r24, 0
   1a3d2:	12 c0       	rjmp	.+36     	; 0x1a3f8 <lif_check_dir+0x64>
   1a3d4:	1f 93       	push	r17
   1a3d6:	0f 93       	push	r16
   1a3d8:	8f e4       	ldi	r24, 0x4F	; 79
   1a3da:	9f e3       	ldi	r25, 0x3F	; 63
   1a3dc:	1f 92       	push	r1
   1a3de:	9f 93       	push	r25
   1a3e0:	8f 93       	push	r24
   1a3e2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a3e6:	0f 90       	pop	r0
   1a3e8:	0f 90       	pop	r0
   1a3ea:	0f 90       	pop	r0
   1a3ec:	0f 90       	pop	r0
   1a3ee:	0f 90       	pop	r0
   1a3f0:	03 c0       	rjmp	.+6      	; 0x1a3f8 <lif_check_dir+0x64>
   1a3f2:	ee 24       	eor	r14, r14
   1a3f4:	e3 94       	inc	r14
   1a3f6:	01 c0       	rjmp	.+2      	; 0x1a3fa <lif_check_dir+0x66>
   1a3f8:	e1 2c       	mov	r14, r1
   1a3fa:	f1 2c       	mov	r15, r1
   1a3fc:	eb 81       	ldd	r30, Y+3	; 0x03
   1a3fe:	fc 81       	ldd	r31, Y+4	; 0x04
   1a400:	84 85       	ldd	r24, Z+12	; 0x0c
   1a402:	95 85       	ldd	r25, Z+13	; 0x0d
   1a404:	a6 85       	ldd	r26, Z+14	; 0x0e
   1a406:	b7 85       	ldd	r27, Z+15	; 0x0f
   1a408:	00 97       	sbiw	r24, 0x00	; 0
   1a40a:	a1 05       	cpc	r26, r1
   1a40c:	b1 05       	cpc	r27, r1
   1a40e:	39 f1       	breq	.+78     	; 0x1a45e <lif_check_dir+0xca>
   1a410:	e4 5a       	subi	r30, 0xA4	; 164
   1a412:	ff 4f       	sbci	r31, 0xFF	; 255
   1a414:	40 81       	ld	r20, Z
   1a416:	51 81       	ldd	r21, Z+1	; 0x01
   1a418:	62 81       	ldd	r22, Z+2	; 0x02
   1a41a:	73 81       	ldd	r23, Z+3	; 0x03
   1a41c:	48 17       	cp	r20, r24
   1a41e:	59 07       	cpc	r21, r25
   1a420:	6a 07       	cpc	r22, r26
   1a422:	7b 07       	cpc	r23, r27
   1a424:	e0 f4       	brcc	.+56     	; 0x1a45e <lif_check_dir+0xca>
   1a426:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a42a:	20 ff       	sbrs	r18, 0
   1a42c:	16 c0       	rjmp	.+44     	; 0x1a45a <lif_check_dir+0xc6>
   1a42e:	bf 93       	push	r27
   1a430:	af 93       	push	r26
   1a432:	9f 93       	push	r25
   1a434:	8f 93       	push	r24
   1a436:	7f 93       	push	r23
   1a438:	6f 93       	push	r22
   1a43a:	5f 93       	push	r21
   1a43c:	4f 93       	push	r20
   1a43e:	1f 93       	push	r17
   1a440:	0f 93       	push	r16
   1a442:	8b e0       	ldi	r24, 0x0B	; 11
   1a444:	9f e3       	ldi	r25, 0x3F	; 63
   1a446:	1f 92       	push	r1
   1a448:	9f 93       	push	r25
   1a44a:	8f 93       	push	r24
   1a44c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a450:	0f b6       	in	r0, 0x3f	; 63
   1a452:	f8 94       	cli
   1a454:	de bf       	out	0x3e, r29	; 62
   1a456:	0f be       	out	0x3f, r0	; 63
   1a458:	cd bf       	out	0x3d, r28	; 61
   1a45a:	e1 2c       	mov	r14, r1
   1a45c:	f1 2c       	mov	r15, r1
   1a45e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a460:	fc 81       	ldd	r31, Y+4	; 0x04
   1a462:	44 81       	ldd	r20, Z+4	; 0x04
   1a464:	55 81       	ldd	r21, Z+5	; 0x05
   1a466:	66 81       	ldd	r22, Z+6	; 0x06
   1a468:	77 81       	ldd	r23, Z+7	; 0x07
   1a46a:	41 15       	cp	r20, r1
   1a46c:	51 05       	cpc	r21, r1
   1a46e:	61 05       	cpc	r22, r1
   1a470:	71 05       	cpc	r23, r1
   1a472:	99 f1       	breq	.+102    	; 0x1a4da <lif_check_dir+0x146>
   1a474:	e4 5a       	subi	r30, 0xA4	; 164
   1a476:	ff 4f       	sbci	r31, 0xFF	; 255
   1a478:	80 80       	ld	r8, Z
   1a47a:	91 80       	ldd	r9, Z+1	; 0x01
   1a47c:	a2 80       	ldd	r10, Z+2	; 0x02
   1a47e:	b3 80       	ldd	r11, Z+3	; 0x03
   1a480:	eb 81       	ldd	r30, Y+3	; 0x03
   1a482:	fc 81       	ldd	r31, Y+4	; 0x04
   1a484:	e0 5a       	subi	r30, 0xA0	; 160
   1a486:	ff 4f       	sbci	r31, 0xFF	; 255
   1a488:	80 81       	ld	r24, Z
   1a48a:	91 81       	ldd	r25, Z+1	; 0x01
   1a48c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a48e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a490:	88 0d       	add	r24, r8
   1a492:	99 1d       	adc	r25, r9
   1a494:	aa 1d       	adc	r26, r10
   1a496:	bb 1d       	adc	r27, r11
   1a498:	48 17       	cp	r20, r24
   1a49a:	59 07       	cpc	r21, r25
   1a49c:	6a 07       	cpc	r22, r26
   1a49e:	7b 07       	cpc	r23, r27
   1a4a0:	e0 f4       	brcc	.+56     	; 0x1a4da <lif_check_dir+0x146>
   1a4a2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a4a6:	20 ff       	sbrs	r18, 0
   1a4a8:	16 c0       	rjmp	.+44     	; 0x1a4d6 <lif_check_dir+0x142>
   1a4aa:	7f 93       	push	r23
   1a4ac:	6f 93       	push	r22
   1a4ae:	5f 93       	push	r21
   1a4b0:	4f 93       	push	r20
   1a4b2:	bf 93       	push	r27
   1a4b4:	af 93       	push	r26
   1a4b6:	9f 93       	push	r25
   1a4b8:	8f 93       	push	r24
   1a4ba:	1f 93       	push	r17
   1a4bc:	0f 93       	push	r16
   1a4be:	8a ec       	ldi	r24, 0xCA	; 202
   1a4c0:	9e e3       	ldi	r25, 0x3E	; 62
   1a4c2:	1f 92       	push	r1
   1a4c4:	9f 93       	push	r25
   1a4c6:	8f 93       	push	r24
   1a4c8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a4cc:	0f b6       	in	r0, 0x3f	; 63
   1a4ce:	f8 94       	cli
   1a4d0:	de bf       	out	0x3e, r29	; 62
   1a4d2:	0f be       	out	0x3f, r0	; 63
   1a4d4:	cd bf       	out	0x3d, r28	; 61
   1a4d6:	e1 2c       	mov	r14, r1
   1a4d8:	f1 2c       	mov	r15, r1
   1a4da:	eb 81       	ldd	r30, Y+3	; 0x03
   1a4dc:	fc 81       	ldd	r31, Y+4	; 0x04
   1a4de:	e6 59       	subi	r30, 0x96	; 150
   1a4e0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4e2:	80 81       	ld	r24, Z
   1a4e4:	91 81       	ldd	r25, Z+1	; 0x01
   1a4e6:	81 30       	cpi	r24, 0x01	; 1
   1a4e8:	30 e8       	ldi	r19, 0x80	; 128
   1a4ea:	93 07       	cpc	r25, r19
   1a4ec:	b1 f0       	breq	.+44     	; 0x1a51a <lif_check_dir+0x186>
   1a4ee:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a4f2:	20 ff       	sbrs	r18, 0
   1a4f4:	10 c0       	rjmp	.+32     	; 0x1a516 <lif_check_dir+0x182>
   1a4f6:	9f 93       	push	r25
   1a4f8:	8f 93       	push	r24
   1a4fa:	1f 93       	push	r17
   1a4fc:	0f 93       	push	r16
   1a4fe:	8c e9       	ldi	r24, 0x9C	; 156
   1a500:	9e e3       	ldi	r25, 0x3E	; 62
   1a502:	1f 92       	push	r1
   1a504:	9f 93       	push	r25
   1a506:	8f 93       	push	r24
   1a508:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a50c:	0f b6       	in	r0, 0x3f	; 63
   1a50e:	f8 94       	cli
   1a510:	de bf       	out	0x3e, r29	; 62
   1a512:	0f be       	out	0x3f, r0	; 63
   1a514:	cd bf       	out	0x3d, r28	; 61
   1a516:	e1 2c       	mov	r14, r1
   1a518:	f1 2c       	mov	r15, r1
   1a51a:	f6 01       	movw	r30, r12
   1a51c:	80 81       	ld	r24, Z
   1a51e:	91 81       	ldd	r25, Z+1	; 0x01
   1a520:	8c 7f       	andi	r24, 0xFC	; 252
   1a522:	80 31       	cpi	r24, 0x10	; 16
   1a524:	90 4e       	sbci	r25, 0xE0	; 224
   1a526:	09 f0       	breq	.+2      	; 0x1a52a <lif_check_dir+0x196>
   1a528:	b3 c0       	rjmp	.+358    	; 0x1a690 <lif_check_dir+0x2fc>
   1a52a:	cb 80       	ldd	r12, Y+3	; 0x03
   1a52c:	dc 80       	ldd	r13, Y+4	; 0x04
   1a52e:	2c e6       	ldi	r18, 0x6C	; 108
   1a530:	c2 0e       	add	r12, r18
   1a532:	d1 1c       	adc	r13, r1
   1a534:	f6 01       	movw	r30, r12
   1a536:	20 81       	ld	r18, Z
   1a538:	31 81       	ldd	r19, Z+1	; 0x01
   1a53a:	21 15       	cp	r18, r1
   1a53c:	31 05       	cpc	r19, r1
   1a53e:	09 f4       	brne	.+2      	; 0x1a542 <lif_check_dir+0x1ae>
   1a540:	a7 c0       	rjmp	.+334    	; 0x1a690 <lif_check_dir+0x2fc>
   1a542:	49 01       	movw	r8, r18
   1a544:	a1 2c       	mov	r10, r1
   1a546:	b1 2c       	mov	r11, r1
   1a548:	bb 27       	eor	r27, r27
   1a54a:	ab 2d       	mov	r26, r11
   1a54c:	9a 2d       	mov	r25, r10
   1a54e:	89 2d       	mov	r24, r9
   1a550:	33 27       	eor	r19, r19
   1a552:	2c 01       	movw	r4, r24
   1a554:	3d 01       	movw	r6, r26
   1a556:	21 15       	cp	r18, r1
   1a558:	31 05       	cpc	r19, r1
   1a55a:	29 f0       	breq	.+10     	; 0x1a566 <lif_check_dir+0x1d2>
   1a55c:	ff ef       	ldi	r31, 0xFF	; 255
   1a55e:	4f 1a       	sub	r4, r31
   1a560:	5f 0a       	sbc	r5, r31
   1a562:	6f 0a       	sbc	r6, r31
   1a564:	7f 0a       	sbc	r7, r31
   1a566:	2b 80       	ldd	r2, Y+3	; 0x03
   1a568:	3c 80       	ldd	r3, Y+4	; 0x04
   1a56a:	40 e6       	ldi	r20, 0x60	; 96
   1a56c:	24 0e       	add	r2, r20
   1a56e:	31 1c       	adc	r3, r1
   1a570:	f1 01       	movw	r30, r2
   1a572:	40 81       	ld	r20, Z
   1a574:	51 81       	ldd	r21, Z+1	; 0x01
   1a576:	62 81       	ldd	r22, Z+2	; 0x02
   1a578:	73 81       	ldd	r23, Z+3	; 0x03
   1a57a:	44 15       	cp	r20, r4
   1a57c:	55 05       	cpc	r21, r5
   1a57e:	66 05       	cpc	r22, r6
   1a580:	77 05       	cpc	r23, r7
   1a582:	28 f5       	brcc	.+74     	; 0x1a5ce <lif_check_dir+0x23a>
   1a584:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   1a588:	e0 ff       	sbrs	r30, 0
   1a58a:	1f c0       	rjmp	.+62     	; 0x1a5ca <lif_check_dir+0x236>
   1a58c:	23 2b       	or	r18, r19
   1a58e:	19 f0       	breq	.+6      	; 0x1a596 <lif_check_dir+0x202>
   1a590:	01 96       	adiw	r24, 0x01	; 1
   1a592:	a1 1d       	adc	r26, r1
   1a594:	b1 1d       	adc	r27, r1
   1a596:	7f 93       	push	r23
   1a598:	6f 93       	push	r22
   1a59a:	5f 93       	push	r21
   1a59c:	4f 93       	push	r20
   1a59e:	bf 93       	push	r27
   1a5a0:	af 93       	push	r26
   1a5a2:	9f 93       	push	r25
   1a5a4:	8f 93       	push	r24
   1a5a6:	1f 92       	push	r1
   1a5a8:	1f 92       	push	r1
   1a5aa:	9f 92       	push	r9
   1a5ac:	8f 92       	push	r8
   1a5ae:	1f 93       	push	r17
   1a5b0:	0f 93       	push	r16
   1a5b2:	81 e5       	ldi	r24, 0x51	; 81
   1a5b4:	9e e3       	ldi	r25, 0x3E	; 62
   1a5b6:	1f 92       	push	r1
   1a5b8:	9f 93       	push	r25
   1a5ba:	8f 93       	push	r24
   1a5bc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a5c0:	0f b6       	in	r0, 0x3f	; 63
   1a5c2:	f8 94       	cli
   1a5c4:	de bf       	out	0x3e, r29	; 62
   1a5c6:	0f be       	out	0x3f, r0	; 63
   1a5c8:	cd bf       	out	0x3d, r28	; 61
   1a5ca:	e1 2c       	mov	r14, r1
   1a5cc:	f1 2c       	mov	r15, r1
   1a5ce:	f6 01       	movw	r30, r12
   1a5d0:	20 81       	ld	r18, Z
   1a5d2:	31 81       	ldd	r19, Z+1	; 0x01
   1a5d4:	49 01       	movw	r8, r18
   1a5d6:	a1 2c       	mov	r10, r1
   1a5d8:	b1 2c       	mov	r11, r1
   1a5da:	bb 27       	eor	r27, r27
   1a5dc:	ab 2d       	mov	r26, r11
   1a5de:	9a 2d       	mov	r25, r10
   1a5e0:	89 2d       	mov	r24, r9
   1a5e2:	a9 01       	movw	r20, r18
   1a5e4:	55 27       	eor	r21, r21
   1a5e6:	5a 83       	std	Y+2, r21	; 0x02
   1a5e8:	49 83       	std	Y+1, r20	; 0x01
   1a5ea:	2c 01       	movw	r4, r24
   1a5ec:	3d 01       	movw	r6, r26
   1a5ee:	45 2b       	or	r20, r21
   1a5f0:	29 f0       	breq	.+10     	; 0x1a5fc <lif_check_dir+0x268>
   1a5f2:	5f ef       	ldi	r21, 0xFF	; 255
   1a5f4:	45 1a       	sub	r4, r21
   1a5f6:	55 0a       	sbc	r5, r21
   1a5f8:	65 0a       	sbc	r6, r21
   1a5fa:	75 0a       	sbc	r7, r21
   1a5fc:	f1 01       	movw	r30, r2
   1a5fe:	40 81       	ld	r20, Z
   1a600:	51 81       	ldd	r21, Z+1	; 0x01
   1a602:	62 81       	ldd	r22, Z+2	; 0x02
   1a604:	73 81       	ldd	r23, Z+3	; 0x03
   1a606:	44 16       	cp	r4, r20
   1a608:	55 06       	cpc	r5, r21
   1a60a:	66 06       	cpc	r6, r22
   1a60c:	77 06       	cpc	r7, r23
   1a60e:	38 f5       	brcc	.+78     	; 0x1a65e <lif_check_dir+0x2ca>
   1a610:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a614:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a618:	32 ff       	sbrs	r19, 2
   1a61a:	21 c0       	rjmp	.+66     	; 0x1a65e <lif_check_dir+0x2ca>
   1a61c:	29 81       	ldd	r18, Y+1	; 0x01
   1a61e:	3a 81       	ldd	r19, Y+2	; 0x02
   1a620:	23 2b       	or	r18, r19
   1a622:	19 f0       	breq	.+6      	; 0x1a62a <lif_check_dir+0x296>
   1a624:	01 96       	adiw	r24, 0x01	; 1
   1a626:	a1 1d       	adc	r26, r1
   1a628:	b1 1d       	adc	r27, r1
   1a62a:	7f 93       	push	r23
   1a62c:	6f 93       	push	r22
   1a62e:	5f 93       	push	r21
   1a630:	4f 93       	push	r20
   1a632:	bf 93       	push	r27
   1a634:	af 93       	push	r26
   1a636:	9f 93       	push	r25
   1a638:	8f 93       	push	r24
   1a63a:	1f 92       	push	r1
   1a63c:	1f 92       	push	r1
   1a63e:	9f 92       	push	r9
   1a640:	8f 92       	push	r8
   1a642:	1f 93       	push	r17
   1a644:	0f 93       	push	r16
   1a646:	86 e0       	ldi	r24, 0x06	; 6
   1a648:	9e e3       	ldi	r25, 0x3E	; 62
   1a64a:	1f 92       	push	r1
   1a64c:	9f 93       	push	r25
   1a64e:	8f 93       	push	r24
   1a650:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a654:	0f b6       	in	r0, 0x3f	; 63
   1a656:	f8 94       	cli
   1a658:	de bf       	out	0x3e, r29	; 62
   1a65a:	0f be       	out	0x3f, r0	; 63
   1a65c:	cd bf       	out	0x3d, r28	; 61
   1a65e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a662:	80 ff       	sbrs	r24, 0
   1a664:	15 c0       	rjmp	.+42     	; 0x1a690 <lif_check_dir+0x2fc>
   1a666:	f6 01       	movw	r30, r12
   1a668:	80 81       	ld	r24, Z
   1a66a:	91 81       	ldd	r25, Z+1	; 0x01
   1a66c:	89 2b       	or	r24, r25
   1a66e:	81 f4       	brne	.+32     	; 0x1a690 <lif_check_dir+0x2fc>
   1a670:	1f 93       	push	r17
   1a672:	0f 93       	push	r16
   1a674:	8b ed       	ldi	r24, 0xDB	; 219
   1a676:	9d e3       	ldi	r25, 0x3D	; 61
   1a678:	1f 92       	push	r1
   1a67a:	9f 93       	push	r25
   1a67c:	8f 93       	push	r24
   1a67e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a682:	0f 90       	pop	r0
   1a684:	0f 90       	pop	r0
   1a686:	0f 90       	pop	r0
   1a688:	0f 90       	pop	r0
   1a68a:	0f 90       	pop	r0
   1a68c:	e1 2c       	mov	r14, r1
   1a68e:	f1 2c       	mov	r15, r1
   1a690:	eb 81       	ldd	r30, Y+3	; 0x03
   1a692:	fc 81       	ldd	r31, Y+4	; 0x04
   1a694:	e2 59       	subi	r30, 0x92	; 146
   1a696:	ff 4f       	sbci	r31, 0xFF	; 255
   1a698:	20 81       	ld	r18, Z
   1a69a:	31 81       	ldd	r19, Z+1	; 0x01
   1a69c:	21 15       	cp	r18, r1
   1a69e:	f1 e0       	ldi	r31, 0x01	; 1
   1a6a0:	3f 07       	cpc	r19, r31
   1a6a2:	31 f1       	breq	.+76     	; 0x1a6f0 <lif_check_dir+0x35c>
   1a6a4:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a6a8:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a6ac:	ca 01       	movw	r24, r20
   1a6ae:	81 70       	andi	r24, 0x01	; 1
   1a6b0:	99 27       	eor	r25, r25
   1a6b2:	40 ff       	sbrs	r20, 0
   1a6b4:	1e c0       	rjmp	.+60     	; 0x1a6f2 <lif_check_dir+0x35e>
   1a6b6:	c9 01       	movw	r24, r18
   1a6b8:	1f 92       	push	r1
   1a6ba:	1f 92       	push	r1
   1a6bc:	9f 93       	push	r25
   1a6be:	2f 93       	push	r18
   1a6c0:	eb 81       	ldd	r30, Y+3	; 0x03
   1a6c2:	fc 81       	ldd	r31, Y+4	; 0x04
   1a6c4:	81 81       	ldd	r24, Z+1	; 0x01
   1a6c6:	8f 93       	push	r24
   1a6c8:	80 81       	ld	r24, Z
   1a6ca:	8f 93       	push	r24
   1a6cc:	8f ea       	ldi	r24, 0xAF	; 175
   1a6ce:	9d e3       	ldi	r25, 0x3D	; 61
   1a6d0:	1f 92       	push	r1
   1a6d2:	9f 93       	push	r25
   1a6d4:	8f 93       	push	r24
   1a6d6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a6da:	0f b6       	in	r0, 0x3f	; 63
   1a6dc:	f8 94       	cli
   1a6de:	de bf       	out	0x3e, r29	; 62
   1a6e0:	0f be       	out	0x3f, r0	; 63
   1a6e2:	cd bf       	out	0x3d, r28	; 61
   1a6e4:	80 e0       	ldi	r24, 0x00	; 0
   1a6e6:	90 e0       	ldi	r25, 0x00	; 0
   1a6e8:	04 c0       	rjmp	.+8      	; 0x1a6f2 <lif_check_dir+0x35e>
   1a6ea:	81 e0       	ldi	r24, 0x01	; 1
   1a6ec:	90 e0       	ldi	r25, 0x00	; 0
   1a6ee:	01 c0       	rjmp	.+2      	; 0x1a6f2 <lif_check_dir+0x35e>
   1a6f0:	c7 01       	movw	r24, r14
   1a6f2:	24 96       	adiw	r28, 0x04	; 4
   1a6f4:	e2 e1       	ldi	r30, 0x12	; 18
   1a6f6:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001a6fa <lif_close_volume>:
   1a6fa:	cf 93       	push	r28
   1a6fc:	df 93       	push	r29
   1a6fe:	00 97       	sbiw	r24, 0x00	; 0
   1a700:	f9 f0       	breq	.+62     	; 0x1a740 <lif_close_volume+0x46>
   1a702:	ec 01       	movw	r28, r24
   1a704:	8a 81       	ldd	r24, Y+2	; 0x02
   1a706:	9b 81       	ldd	r25, Y+3	; 0x03
   1a708:	00 97       	sbiw	r24, 0x00	; 0
   1a70a:	79 f0       	breq	.+30     	; 0x1a72a <lif_close_volume+0x30>
   1a70c:	22 e0       	ldi	r18, 0x02	; 2
   1a70e:	30 e0       	ldi	r19, 0x00	; 0
   1a710:	40 e0       	ldi	r20, 0x00	; 0
   1a712:	50 e0       	ldi	r21, 0x00	; 0
   1a714:	ba 01       	movw	r22, r20
   1a716:	0e 94 d3 80 	call	0x101a6	; 0x101a6 <fseek>
   1a71a:	8a 81       	ldd	r24, Y+2	; 0x02
   1a71c:	9b 81       	ldd	r25, Y+3	; 0x03
   1a71e:	0e 94 bb 82 	call	0x10576	; 0x10576 <fclose>
   1a722:	1b 82       	std	Y+3, r1	; 0x03
   1a724:	1a 82       	std	Y+2, r1	; 0x02
   1a726:	0e 94 b6 81 	call	0x1036c	; 0x1036c <sync>
   1a72a:	88 81       	ld	r24, Y
   1a72c:	99 81       	ldd	r25, Y+1	; 0x01
   1a72e:	00 97       	sbiw	r24, 0x00	; 0
   1a730:	11 f0       	breq	.+4      	; 0x1a736 <lif_close_volume+0x3c>
   1a732:	0e 94 30 ca 	call	0x19460	; 0x19460 <lif_free>
   1a736:	ce 01       	movw	r24, r28
   1a738:	b8 db       	rcall	.-2192   	; 0x19eaa <lif_vol_clear>
   1a73a:	ce 01       	movw	r24, r28
   1a73c:	0e 94 30 ca 	call	0x19460	; 0x19460 <lif_free>
   1a740:	df 91       	pop	r29
   1a742:	cf 91       	pop	r28
   1a744:	08 95       	ret

0001a746 <lif_checkdirindex>:
   1a746:	a0 e0       	ldi	r26, 0x00	; 0
   1a748:	b0 e0       	ldi	r27, 0x00	; 0
   1a74a:	e9 ea       	ldi	r30, 0xA9	; 169
   1a74c:	f3 ed       	ldi	r31, 0xD3	; 211
   1a74e:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   1a752:	77 fd       	sbrc	r23, 7
   1a754:	26 c0       	rjmp	.+76     	; 0x1a7a2 <lif_checkdirindex+0x5c>
   1a756:	8b 01       	movw	r16, r22
   1a758:	07 2e       	mov	r0, r23
   1a75a:	00 0c       	add	r0, r0
   1a75c:	22 0b       	sbc	r18, r18
   1a75e:	33 0b       	sbc	r19, r19
   1a760:	45 e0       	ldi	r20, 0x05	; 5
   1a762:	00 0f       	add	r16, r16
   1a764:	11 1f       	adc	r17, r17
   1a766:	22 1f       	adc	r18, r18
   1a768:	33 1f       	adc	r19, r19
   1a76a:	4a 95       	dec	r20
   1a76c:	d1 f7       	brne	.-12     	; 0x1a762 <lif_checkdirindex+0x1c>
   1a76e:	c1 2e       	mov	r12, r17
   1a770:	d2 2e       	mov	r13, r18
   1a772:	e3 2e       	mov	r14, r19
   1a774:	ff 24       	eor	r15, r15
   1a776:	11 27       	eor	r17, r17
   1a778:	22 27       	eor	r18, r18
   1a77a:	33 27       	eor	r19, r19
   1a77c:	01 2b       	or	r16, r17
   1a77e:	02 2b       	or	r16, r18
   1a780:	03 2b       	or	r16, r19
   1a782:	29 f0       	breq	.+10     	; 0x1a78e <lif_checkdirindex+0x48>
   1a784:	2f ef       	ldi	r18, 0xFF	; 255
   1a786:	c2 1a       	sub	r12, r18
   1a788:	d2 0a       	sbc	r13, r18
   1a78a:	e2 0a       	sbc	r14, r18
   1a78c:	f2 0a       	sbc	r15, r18
   1a78e:	fc 01       	movw	r30, r24
   1a790:	05 a9       	ldd	r16, Z+53	; 0x35
   1a792:	16 a9       	ldd	r17, Z+54	; 0x36
   1a794:	27 a9       	ldd	r18, Z+55	; 0x37
   1a796:	30 ad       	ldd	r19, Z+56	; 0x38
   1a798:	0c 15       	cp	r16, r12
   1a79a:	1d 05       	cpc	r17, r13
   1a79c:	2e 05       	cpc	r18, r14
   1a79e:	3f 05       	cpc	r19, r15
   1a7a0:	30 f5       	brcc	.+76     	; 0x1a7ee <lif_checkdirindex+0xa8>
   1a7a2:	ec 01       	movw	r28, r24
   1a7a4:	7f 93       	push	r23
   1a7a6:	6f 93       	push	r22
   1a7a8:	89 81       	ldd	r24, Y+1	; 0x01
   1a7aa:	8f 93       	push	r24
   1a7ac:	88 81       	ld	r24, Y
   1a7ae:	8f 93       	push	r24
   1a7b0:	80 ef       	ldi	r24, 0xF0	; 240
   1a7b2:	9c e3       	ldi	r25, 0x3C	; 60
   1a7b4:	1f 92       	push	r1
   1a7b6:	9f 93       	push	r25
   1a7b8:	8f 93       	push	r24
   1a7ba:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a7be:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a7c2:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a7c6:	8d b7       	in	r24, 0x3d	; 61
   1a7c8:	9e b7       	in	r25, 0x3e	; 62
   1a7ca:	07 96       	adiw	r24, 0x07	; 7
   1a7cc:	0f b6       	in	r0, 0x3f	; 63
   1a7ce:	f8 94       	cli
   1a7d0:	9e bf       	out	0x3e, r25	; 62
   1a7d2:	0f be       	out	0x3f, r0	; 63
   1a7d4:	8d bf       	out	0x3d, r24	; 61
   1a7d6:	c9 01       	movw	r24, r18
   1a7d8:	88 27       	eor	r24, r24
   1a7da:	94 70       	andi	r25, 0x04	; 4
   1a7dc:	32 ff       	sbrs	r19, 2
   1a7de:	09 c0       	rjmp	.+18     	; 0x1a7f2 <lif_checkdirindex+0xac>
   1a7e0:	69 ec       	ldi	r22, 0xC9	; 201
   1a7e2:	75 e1       	ldi	r23, 0x15	; 21
   1a7e4:	ce 01       	movw	r24, r28
   1a7e6:	68 db       	rcall	.-2352   	; 0x19eb8 <lif_dump_vol>
   1a7e8:	80 e0       	ldi	r24, 0x00	; 0
   1a7ea:	90 e0       	ldi	r25, 0x00	; 0
   1a7ec:	02 c0       	rjmp	.+4      	; 0x1a7f2 <lif_checkdirindex+0xac>
   1a7ee:	81 e0       	ldi	r24, 0x01	; 1
   1a7f0:	90 e0       	ldi	r25, 0x00	; 0
   1a7f2:	cd b7       	in	r28, 0x3d	; 61
   1a7f4:	de b7       	in	r29, 0x3e	; 62
   1a7f6:	e8 e0       	ldi	r30, 0x08	; 8
   1a7f8:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0001a7fc <lif_readdirindex>:
   1a7fc:	a0 e2       	ldi	r26, 0x20	; 32
   1a7fe:	b0 e0       	ldi	r27, 0x00	; 0
   1a800:	e4 e0       	ldi	r30, 0x04	; 4
   1a802:	f4 ed       	ldi	r31, 0xD4	; 212
   1a804:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   1a808:	7c 01       	movw	r14, r24
   1a80a:	6b 01       	movw	r12, r22
   1a80c:	9c df       	rcall	.-200    	; 0x1a746 <lif_checkdirindex>
   1a80e:	89 2b       	or	r24, r25
   1a810:	19 f4       	brne	.+6      	; 0x1a818 <lif_readdirindex+0x1c>
   1a812:	00 e0       	ldi	r16, 0x00	; 0
   1a814:	10 e0       	ldi	r17, 0x00	; 0
   1a816:	56 c0       	rjmp	.+172    	; 0x1a8c4 <lif_readdirindex+0xc8>
   1a818:	f7 01       	movw	r30, r14
   1a81a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a81c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a81e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a820:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a822:	44 27       	eor	r20, r20
   1a824:	58 2f       	mov	r21, r24
   1a826:	69 2f       	mov	r22, r25
   1a828:	7a 2f       	mov	r23, r26
   1a82a:	c6 01       	movw	r24, r12
   1a82c:	0d 2c       	mov	r0, r13
   1a82e:	00 0c       	add	r0, r0
   1a830:	aa 0b       	sbc	r26, r26
   1a832:	bb 0b       	sbc	r27, r27
   1a834:	35 e0       	ldi	r19, 0x05	; 5
   1a836:	88 0f       	add	r24, r24
   1a838:	99 1f       	adc	r25, r25
   1a83a:	aa 1f       	adc	r26, r26
   1a83c:	bb 1f       	adc	r27, r27
   1a83e:	3a 95       	dec	r19
   1a840:	d1 f7       	brne	.-12     	; 0x1a836 <lif_readdirindex+0x3a>
   1a842:	9a 01       	movw	r18, r20
   1a844:	ab 01       	movw	r20, r22
   1a846:	28 0f       	add	r18, r24
   1a848:	39 1f       	adc	r19, r25
   1a84a:	4a 1f       	adc	r20, r26
   1a84c:	5b 1f       	adc	r21, r27
   1a84e:	00 e2       	ldi	r16, 0x20	; 32
   1a850:	10 e0       	ldi	r17, 0x00	; 0
   1a852:	be 01       	movw	r22, r28
   1a854:	6f 5f       	subi	r22, 0xFF	; 255
   1a856:	7f 4f       	sbci	r23, 0xFF	; 255
   1a858:	c7 01       	movw	r24, r14
   1a85a:	0e 94 e5 ca 	call	0x195ca	; 0x195ca <lif_read>
   1a85e:	60 32       	cpi	r22, 0x20	; 32
   1a860:	71 05       	cpc	r23, r1
   1a862:	81 05       	cpc	r24, r1
   1a864:	91 05       	cpc	r25, r1
   1a866:	a8 f2       	brcs	.-86     	; 0x1a812 <lif_readdirindex+0x16>
   1a868:	b7 01       	movw	r22, r14
   1a86a:	ce 01       	movw	r24, r28
   1a86c:	01 96       	adiw	r24, 0x01	; 1
   1a86e:	c1 d9       	rcall	.-3198   	; 0x19bf2 <lif_str2dir>
   1a870:	f7 01       	movw	r30, r14
   1a872:	e6 5a       	subi	r30, 0xA6	; 166
   1a874:	ff 4f       	sbci	r31, 0xFF	; 255
   1a876:	80 81       	ld	r24, Z
   1a878:	91 81       	ldd	r25, Z+1	; 0x01
   1a87a:	01 96       	adiw	r24, 0x01	; 1
   1a87c:	19 f4       	brne	.+6      	; 0x1a884 <lif_readdirindex+0x88>
   1a87e:	f7 01       	movw	r30, r14
   1a880:	d3 a2       	std	Z+35, r13	; 0x23
   1a882:	c2 a2       	std	Z+34, r12	; 0x22
   1a884:	c7 01       	movw	r24, r14
   1a886:	86 dd       	rcall	.-1268   	; 0x1a394 <lif_check_dir>
   1a888:	8c 01       	movw	r16, r24
   1a88a:	89 2b       	or	r24, r25
   1a88c:	c9 f4       	brne	.+50     	; 0x1a8c0 <lif_readdirindex+0xc4>
   1a88e:	df 92       	push	r13
   1a890:	cf 92       	push	r12
   1a892:	80 ed       	ldi	r24, 0xD0	; 208
   1a894:	9c e3       	ldi	r25, 0x3C	; 60
   1a896:	1f 92       	push	r1
   1a898:	9f 93       	push	r25
   1a89a:	8f 93       	push	r24
   1a89c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1a8a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a8a4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a8a8:	0f 90       	pop	r0
   1a8aa:	0f 90       	pop	r0
   1a8ac:	0f 90       	pop	r0
   1a8ae:	0f 90       	pop	r0
   1a8b0:	0f 90       	pop	r0
   1a8b2:	92 ff       	sbrs	r25, 2
   1a8b4:	ae cf       	rjmp	.-164    	; 0x1a812 <lif_readdirindex+0x16>
   1a8b6:	6a ed       	ldi	r22, 0xDA	; 218
   1a8b8:	75 e1       	ldi	r23, 0x15	; 21
   1a8ba:	c7 01       	movw	r24, r14
   1a8bc:	fd da       	rcall	.-2566   	; 0x19eb8 <lif_dump_vol>
   1a8be:	02 c0       	rjmp	.+4      	; 0x1a8c4 <lif_readdirindex+0xc8>
   1a8c0:	01 e0       	ldi	r16, 0x01	; 1
   1a8c2:	10 e0       	ldi	r17, 0x00	; 0
   1a8c4:	c8 01       	movw	r24, r16
   1a8c6:	a0 96       	adiw	r28, 0x20	; 32
   1a8c8:	e8 e0       	ldi	r30, 0x08	; 8
   1a8ca:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0001a8ce <lif_writedirindex>:
   1a8ce:	a0 e2       	ldi	r26, 0x20	; 32
   1a8d0:	b0 e0       	ldi	r27, 0x00	; 0
   1a8d2:	ed e6       	ldi	r30, 0x6D	; 109
   1a8d4:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8d6:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   1a8da:	5c 01       	movw	r10, r24
   1a8dc:	6b 01       	movw	r12, r22
   1a8de:	5a dd       	rcall	.-1356   	; 0x1a394 <lif_check_dir>
   1a8e0:	7c 01       	movw	r14, r24
   1a8e2:	89 2b       	or	r24, r25
   1a8e4:	71 f4       	brne	.+28     	; 0x1a902 <lif_writedirindex+0x34>
   1a8e6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a8ea:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a8ee:	92 fd       	sbrc	r25, 2
   1a8f0:	03 c0       	rjmp	.+6      	; 0x1a8f8 <lif_writedirindex+0x2a>
   1a8f2:	e1 2c       	mov	r14, r1
   1a8f4:	f1 2c       	mov	r15, r1
   1a8f6:	42 c0       	rjmp	.+132    	; 0x1a97c <lif_writedirindex+0xae>
   1a8f8:	6b ee       	ldi	r22, 0xEB	; 235
   1a8fa:	75 e1       	ldi	r23, 0x15	; 21
   1a8fc:	c5 01       	movw	r24, r10
   1a8fe:	dc da       	rcall	.-2632   	; 0x19eb8 <lif_dump_vol>
   1a900:	3d c0       	rjmp	.+122    	; 0x1a97c <lif_writedirindex+0xae>
   1a902:	b6 01       	movw	r22, r12
   1a904:	c5 01       	movw	r24, r10
   1a906:	1f df       	rcall	.-450    	; 0x1a746 <lif_checkdirindex>
   1a908:	89 2b       	or	r24, r25
   1a90a:	99 f3       	breq	.-26     	; 0x1a8f2 <lif_writedirindex+0x24>
   1a90c:	f5 01       	movw	r30, r10
   1a90e:	e6 5a       	subi	r30, 0xA6	; 166
   1a910:	ff 4f       	sbci	r31, 0xFF	; 255
   1a912:	80 81       	ld	r24, Z
   1a914:	91 81       	ldd	r25, Z+1	; 0x01
   1a916:	01 96       	adiw	r24, 0x01	; 1
   1a918:	19 f4       	brne	.+6      	; 0x1a920 <lif_writedirindex+0x52>
   1a91a:	f5 01       	movw	r30, r10
   1a91c:	d3 a2       	std	Z+35, r13	; 0x23
   1a91e:	c2 a2       	std	Z+34, r12	; 0x22
   1a920:	f5 01       	movw	r30, r10
   1a922:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a924:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a926:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a928:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a92a:	ba 2f       	mov	r27, r26
   1a92c:	a9 2f       	mov	r26, r25
   1a92e:	98 2f       	mov	r25, r24
   1a930:	88 27       	eor	r24, r24
   1a932:	0d 2c       	mov	r0, r13
   1a934:	00 0c       	add	r0, r0
   1a936:	ee 08       	sbc	r14, r14
   1a938:	ff 08       	sbc	r15, r15
   1a93a:	35 e0       	ldi	r19, 0x05	; 5
   1a93c:	cc 0c       	add	r12, r12
   1a93e:	dd 1c       	adc	r13, r13
   1a940:	ee 1c       	adc	r14, r14
   1a942:	ff 1c       	adc	r15, r15
   1a944:	3a 95       	dec	r19
   1a946:	d1 f7       	brne	.-12     	; 0x1a93c <lif_writedirindex+0x6e>
   1a948:	c8 0e       	add	r12, r24
   1a94a:	d9 1e       	adc	r13, r25
   1a94c:	ea 1e       	adc	r14, r26
   1a94e:	fb 1e       	adc	r15, r27
   1a950:	be 01       	movw	r22, r28
   1a952:	6f 5f       	subi	r22, 0xFF	; 255
   1a954:	7f 4f       	sbci	r23, 0xFF	; 255
   1a956:	c5 01       	movw	r24, r10
   1a958:	db d8       	rcall	.-3658   	; 0x19b10 <lif_dir2str>
   1a95a:	00 e2       	ldi	r16, 0x20	; 32
   1a95c:	10 e0       	ldi	r17, 0x00	; 0
   1a95e:	a7 01       	movw	r20, r14
   1a960:	96 01       	movw	r18, r12
   1a962:	be 01       	movw	r22, r28
   1a964:	6f 5f       	subi	r22, 0xFF	; 255
   1a966:	7f 4f       	sbci	r23, 0xFF	; 255
   1a968:	c5 01       	movw	r24, r10
   1a96a:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
   1a96e:	31 e0       	ldi	r19, 0x01	; 1
   1a970:	20 e0       	ldi	r18, 0x00	; 0
   1a972:	80 97       	sbiw	r24, 0x20	; 32
   1a974:	0c f4       	brge	.+2      	; 0x1a978 <lif_writedirindex+0xaa>
   1a976:	30 e0       	ldi	r19, 0x00	; 0
   1a978:	e3 2e       	mov	r14, r19
   1a97a:	f2 2e       	mov	r15, r18
   1a97c:	c7 01       	movw	r24, r14
   1a97e:	a0 96       	adiw	r28, 0x20	; 32
   1a980:	ea e0       	ldi	r30, 0x0A	; 10
   1a982:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0001a986 <lif_writedirEOF>:
   1a986:	0f 93       	push	r16
   1a988:	1f 93       	push	r17
   1a98a:	cf 93       	push	r28
   1a98c:	df 93       	push	r29
   1a98e:	ec 01       	movw	r28, r24
   1a990:	8b 01       	movw	r16, r22
   1a992:	83 da       	rcall	.-2810   	; 0x19e9a <lif_dir_clear>
   1a994:	fe 01       	movw	r30, r28
   1a996:	e6 5a       	subi	r30, 0xA6	; 166
   1a998:	ff 4f       	sbci	r31, 0xFF	; 255
   1a99a:	8f ef       	ldi	r24, 0xFF	; 255
   1a99c:	9f ef       	ldi	r25, 0xFF	; 255
   1a99e:	91 83       	std	Z+1, r25	; 0x01
   1a9a0:	80 83       	st	Z, r24
   1a9a2:	1b a3       	std	Y+35, r17	; 0x23
   1a9a4:	0a a3       	std	Y+34, r16	; 0x22
   1a9a6:	b8 01       	movw	r22, r16
   1a9a8:	ce 01       	movw	r24, r28
   1a9aa:	91 df       	rcall	.-222    	; 0x1a8ce <lif_writedirindex>
   1a9ac:	df 91       	pop	r29
   1a9ae:	cf 91       	pop	r28
   1a9b0:	1f 91       	pop	r17
   1a9b2:	0f 91       	pop	r16
   1a9b4:	08 95       	ret

0001a9b6 <lif_updatefree>:
   1a9b6:	2f 92       	push	r2
   1a9b8:	3f 92       	push	r3
   1a9ba:	4f 92       	push	r4
   1a9bc:	5f 92       	push	r5
   1a9be:	6f 92       	push	r6
   1a9c0:	7f 92       	push	r7
   1a9c2:	8f 92       	push	r8
   1a9c4:	af 92       	push	r10
   1a9c6:	bf 92       	push	r11
   1a9c8:	cf 92       	push	r12
   1a9ca:	df 92       	push	r13
   1a9cc:	ef 92       	push	r14
   1a9ce:	ff 92       	push	r15
   1a9d0:	0f 93       	push	r16
   1a9d2:	1f 93       	push	r17
   1a9d4:	cf 93       	push	r28
   1a9d6:	df 93       	push	r29
   1a9d8:	cd b7       	in	r28, 0x3d	; 61
   1a9da:	de b7       	in	r29, 0x3e	; 62
   1a9dc:	28 97       	sbiw	r28, 0x08	; 8
   1a9de:	0f b6       	in	r0, 0x3f	; 63
   1a9e0:	f8 94       	cli
   1a9e2:	de bf       	out	0x3e, r29	; 62
   1a9e4:	0f be       	out	0x3f, r0	; 63
   1a9e6:	cd bf       	out	0x3d, r28	; 61
   1a9e8:	98 87       	std	Y+8, r25	; 0x08
   1a9ea:	8f 83       	std	Y+7, r24	; 0x07
   1a9ec:	fc 01       	movw	r30, r24
   1a9ee:	24 84       	ldd	r2, Z+12	; 0x0c
   1a9f0:	35 84       	ldd	r3, Z+13	; 0x0d
   1a9f2:	46 84       	ldd	r4, Z+14	; 0x0e
   1a9f4:	57 84       	ldd	r5, Z+15	; 0x0f
   1a9f6:	80 89       	ldd	r24, Z+16	; 0x10
   1a9f8:	91 89       	ldd	r25, Z+17	; 0x11
   1a9fa:	a2 89       	ldd	r26, Z+18	; 0x12
   1a9fc:	b3 89       	ldd	r27, Z+19	; 0x13
   1a9fe:	80 8f       	std	Z+24, r24	; 0x18
   1aa00:	91 8f       	std	Z+25, r25	; 0x19
   1aa02:	a2 8f       	std	Z+26, r26	; 0x1a
   1aa04:	b3 8f       	std	Z+27, r27	; 0x1b
   1aa06:	14 8a       	std	Z+20, r1	; 0x14
   1aa08:	15 8a       	std	Z+21, r1	; 0x15
   1aa0a:	16 8a       	std	Z+22, r1	; 0x16
   1aa0c:	17 8a       	std	Z+23, r1	; 0x17
   1aa0e:	17 8e       	std	Z+31, r1	; 0x1f
   1aa10:	16 8e       	std	Z+30, r1	; 0x1e
   1aa12:	15 8e       	std	Z+29, r1	; 0x1d
   1aa14:	14 8e       	std	Z+28, r1	; 0x1c
   1aa16:	11 a2       	std	Z+33, r1	; 0x21
   1aa18:	10 a2       	std	Z+32, r1	; 0x20
   1aa1a:	13 a2       	std	Z+35, r1	; 0x23
   1aa1c:	12 a2       	std	Z+34, r1	; 0x22
   1aa1e:	cc 24       	eor	r12, r12
   1aa20:	c3 94       	inc	r12
   1aa22:	d1 2c       	mov	r13, r1
   1aa24:	0f ef       	ldi	r16, 0xFF	; 255
   1aa26:	1f ef       	ldi	r17, 0xFF	; 255
   1aa28:	e6 5a       	subi	r30, 0xA6	; 166
   1aa2a:	ff 4f       	sbci	r31, 0xFF	; 255
   1aa2c:	fc 83       	std	Y+4, r31	; 0x04
   1aa2e:	eb 83       	std	Y+3, r30	; 0x03
   1aa30:	af 80       	ldd	r10, Y+7	; 0x07
   1aa32:	b8 84       	ldd	r11, Y+8	; 0x08
   1aa34:	fc e5       	ldi	r31, 0x5C	; 92
   1aa36:	af 0e       	add	r10, r31
   1aa38:	b1 1c       	adc	r11, r1
   1aa3a:	8f 81       	ldd	r24, Y+7	; 0x07
   1aa3c:	98 85       	ldd	r25, Y+8	; 0x08
   1aa3e:	80 5a       	subi	r24, 0xA0	; 160
   1aa40:	9f 4f       	sbci	r25, 0xFF	; 255
   1aa42:	9e 83       	std	Y+6, r25	; 0x06
   1aa44:	8d 83       	std	Y+5, r24	; 0x05
   1aa46:	ef 81       	ldd	r30, Y+7	; 0x07
   1aa48:	f8 85       	ldd	r31, Y+8	; 0x08
   1aa4a:	e1 5b       	subi	r30, 0xB1	; 177
   1aa4c:	ff 4f       	sbci	r31, 0xFF	; 255
   1aa4e:	fa 83       	std	Y+2, r31	; 0x02
   1aa50:	e9 83       	std	Y+1, r30	; 0x01
   1aa52:	83 e8       	ldi	r24, 0x83	; 131
   1aa54:	9c e3       	ldi	r25, 0x3C	; 60
   1aa56:	3c 01       	movw	r6, r24
   1aa58:	76 01       	movw	r14, r12
   1aa5a:	21 e0       	ldi	r18, 0x01	; 1
   1aa5c:	e2 1a       	sub	r14, r18
   1aa5e:	f1 08       	sbc	r15, r1
   1aa60:	b7 01       	movw	r22, r14
   1aa62:	8f 81       	ldd	r24, Y+7	; 0x07
   1aa64:	98 85       	ldd	r25, Y+8	; 0x08
   1aa66:	ca de       	rcall	.-620    	; 0x1a7fc <lif_readdirindex>
   1aa68:	89 2b       	or	r24, r25
   1aa6a:	19 f4       	brne	.+6      	; 0x1aa72 <lif_updatefree+0xbc>
   1aa6c:	80 e0       	ldi	r24, 0x00	; 0
   1aa6e:	90 e0       	ldi	r25, 0x00	; 0
   1aa70:	92 c0       	rjmp	.+292    	; 0x1ab96 <lif_updatefree+0x1e0>
   1aa72:	eb 81       	ldd	r30, Y+3	; 0x03
   1aa74:	fc 81       	ldd	r31, Y+4	; 0x04
   1aa76:	80 81       	ld	r24, Z
   1aa78:	91 81       	ldd	r25, Z+1	; 0x01
   1aa7a:	8f 3f       	cpi	r24, 0xFF	; 255
   1aa7c:	ff ef       	ldi	r31, 0xFF	; 255
   1aa7e:	9f 07       	cpc	r25, r31
   1aa80:	c1 f4       	brne	.+48     	; 0x1aab2 <lif_updatefree+0xfc>
   1aa82:	ef 81       	ldd	r30, Y+7	; 0x07
   1aa84:	f8 85       	ldd	r31, Y+8	; 0x08
   1aa86:	0f 3f       	cpi	r16, 0xFF	; 255
   1aa88:	2f ef       	ldi	r18, 0xFF	; 255
   1aa8a:	12 07       	cpc	r17, r18
   1aa8c:	09 f4       	brne	.+2      	; 0x1aa90 <lif_updatefree+0xda>
   1aa8e:	79 c0       	rjmp	.+242    	; 0x1ab82 <lif_updatefree+0x1cc>
   1aa90:	13 a3       	std	Z+35, r17	; 0x23
   1aa92:	02 a3       	std	Z+34, r16	; 0x22
   1aa94:	e0 1a       	sub	r14, r16
   1aa96:	f1 0a       	sbc	r15, r17
   1aa98:	86 8d       	ldd	r24, Z+30	; 0x1e
   1aa9a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1aa9c:	8e 19       	sub	r24, r14
   1aa9e:	9f 09       	sbc	r25, r15
   1aaa0:	97 8f       	std	Z+31, r25	; 0x1f
   1aaa2:	86 8f       	std	Z+30, r24	; 0x1e
   1aaa4:	b8 01       	movw	r22, r16
   1aaa6:	cf 01       	movw	r24, r30
   1aaa8:	6e df       	rcall	.-292    	; 0x1a986 <lif_writedirEOF>
   1aaaa:	89 2b       	or	r24, r25
   1aaac:	09 f0       	breq	.+2      	; 0x1aab0 <lif_updatefree+0xfa>
   1aaae:	6b c0       	rjmp	.+214    	; 0x1ab86 <lif_updatefree+0x1d0>
   1aab0:	dd cf       	rjmp	.-70     	; 0x1aa6c <lif_updatefree+0xb6>
   1aab2:	89 2b       	or	r24, r25
   1aab4:	81 f4       	brne	.+32     	; 0x1aad6 <lif_updatefree+0x120>
   1aab6:	0f 3f       	cpi	r16, 0xFF	; 255
   1aab8:	ff ef       	ldi	r31, 0xFF	; 255
   1aaba:	1f 07       	cpc	r17, r31
   1aabc:	09 f4       	brne	.+2      	; 0x1aac0 <lif_updatefree+0x10a>
   1aabe:	87 01       	movw	r16, r14
   1aac0:	ef 81       	ldd	r30, Y+7	; 0x07
   1aac2:	f8 85       	ldd	r31, Y+8	; 0x08
   1aac4:	86 8d       	ldd	r24, Z+30	; 0x1e
   1aac6:	97 8d       	ldd	r25, Z+31	; 0x1f
   1aac8:	01 96       	adiw	r24, 0x01	; 1
   1aaca:	97 8f       	std	Z+31, r25	; 0x1f
   1aacc:	86 8f       	std	Z+30, r24	; 0x1e
   1aace:	ff ef       	ldi	r31, 0xFF	; 255
   1aad0:	cf 1a       	sub	r12, r31
   1aad2:	df 0a       	sbc	r13, r31
   1aad4:	c1 cf       	rjmp	.-126    	; 0x1aa58 <lif_updatefree+0xa2>
   1aad6:	f5 01       	movw	r30, r10
   1aad8:	80 81       	ld	r24, Z
   1aada:	91 81       	ldd	r25, Z+1	; 0x01
   1aadc:	a2 81       	ldd	r26, Z+2	; 0x02
   1aade:	b3 81       	ldd	r27, Z+3	; 0x03
   1aae0:	82 15       	cp	r24, r2
   1aae2:	93 05       	cpc	r25, r3
   1aae4:	a4 05       	cpc	r26, r4
   1aae6:	b5 05       	cpc	r27, r5
   1aae8:	c0 f4       	brcc	.+48     	; 0x1ab1a <lif_updatefree+0x164>
   1aaea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1aaee:	80 ff       	sbrs	r24, 0
   1aaf0:	14 c0       	rjmp	.+40     	; 0x1ab1a <lif_updatefree+0x164>
   1aaf2:	fa 81       	ldd	r31, Y+2	; 0x02
   1aaf4:	ff 93       	push	r31
   1aaf6:	29 81       	ldd	r18, Y+1	; 0x01
   1aaf8:	2f 93       	push	r18
   1aafa:	ef 81       	ldd	r30, Y+7	; 0x07
   1aafc:	f8 85       	ldd	r31, Y+8	; 0x08
   1aafe:	81 81       	ldd	r24, Z+1	; 0x01
   1ab00:	8f 93       	push	r24
   1ab02:	80 81       	ld	r24, Z
   1ab04:	8f 93       	push	r24
   1ab06:	1f 92       	push	r1
   1ab08:	7f 92       	push	r7
   1ab0a:	6f 92       	push	r6
   1ab0c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1ab10:	0f b6       	in	r0, 0x3f	; 63
   1ab12:	f8 94       	cli
   1ab14:	de bf       	out	0x3e, r29	; 62
   1ab16:	0f be       	out	0x3f, r0	; 63
   1ab18:	cd bf       	out	0x3d, r28	; 61
   1ab1a:	ed 81       	ldd	r30, Y+5	; 0x05
   1ab1c:	fe 81       	ldd	r31, Y+6	; 0x06
   1ab1e:	80 81       	ld	r24, Z
   1ab20:	91 81       	ldd	r25, Z+1	; 0x01
   1ab22:	a2 81       	ldd	r26, Z+2	; 0x02
   1ab24:	b3 81       	ldd	r27, Z+3	; 0x03
   1ab26:	ef 81       	ldd	r30, Y+7	; 0x07
   1ab28:	f8 85       	ldd	r31, Y+8	; 0x08
   1ab2a:	44 89       	ldd	r20, Z+20	; 0x14
   1ab2c:	55 89       	ldd	r21, Z+21	; 0x15
   1ab2e:	66 89       	ldd	r22, Z+22	; 0x16
   1ab30:	77 89       	ldd	r23, Z+23	; 0x17
   1ab32:	48 0f       	add	r20, r24
   1ab34:	59 1f       	adc	r21, r25
   1ab36:	6a 1f       	adc	r22, r26
   1ab38:	7b 1f       	adc	r23, r27
   1ab3a:	44 8b       	std	Z+20, r20	; 0x14
   1ab3c:	55 8b       	std	Z+21, r21	; 0x15
   1ab3e:	66 8b       	std	Z+22, r22	; 0x16
   1ab40:	77 8b       	std	Z+23, r23	; 0x17
   1ab42:	40 8d       	ldd	r20, Z+24	; 0x18
   1ab44:	51 8d       	ldd	r21, Z+25	; 0x19
   1ab46:	62 8d       	ldd	r22, Z+26	; 0x1a
   1ab48:	73 8d       	ldd	r23, Z+27	; 0x1b
   1ab4a:	48 1b       	sub	r20, r24
   1ab4c:	59 0b       	sbc	r21, r25
   1ab4e:	6a 0b       	sbc	r22, r26
   1ab50:	7b 0b       	sbc	r23, r27
   1ab52:	40 8f       	std	Z+24, r20	; 0x18
   1ab54:	51 8f       	std	Z+25, r21	; 0x19
   1ab56:	62 8f       	std	Z+26, r22	; 0x1a
   1ab58:	73 8f       	std	Z+27, r23	; 0x1b
   1ab5a:	24 8d       	ldd	r18, Z+28	; 0x1c
   1ab5c:	35 8d       	ldd	r19, Z+29	; 0x1d
   1ab5e:	2f 5f       	subi	r18, 0xFF	; 255
   1ab60:	3f 4f       	sbci	r19, 0xFF	; 255
   1ab62:	35 8f       	std	Z+29, r19	; 0x1d
   1ab64:	24 8f       	std	Z+28, r18	; 0x1c
   1ab66:	f5 01       	movw	r30, r10
   1ab68:	40 81       	ld	r20, Z
   1ab6a:	51 81       	ldd	r21, Z+1	; 0x01
   1ab6c:	62 81       	ldd	r22, Z+2	; 0x02
   1ab6e:	73 81       	ldd	r23, Z+3	; 0x03
   1ab70:	1c 01       	movw	r2, r24
   1ab72:	2d 01       	movw	r4, r26
   1ab74:	24 0e       	add	r2, r20
   1ab76:	35 1e       	adc	r3, r21
   1ab78:	46 1e       	adc	r4, r22
   1ab7a:	57 1e       	adc	r5, r23
   1ab7c:	0f ef       	ldi	r16, 0xFF	; 255
   1ab7e:	1f ef       	ldi	r17, 0xFF	; 255
   1ab80:	a6 cf       	rjmp	.-180    	; 0x1aace <lif_updatefree+0x118>
   1ab82:	f3 a2       	std	Z+35, r15	; 0x23
   1ab84:	e2 a2       	std	Z+34, r14	; 0x22
   1ab86:	8f ef       	ldi	r24, 0xFF	; 255
   1ab88:	9f ef       	ldi	r25, 0xFF	; 255
   1ab8a:	ef 81       	ldd	r30, Y+7	; 0x07
   1ab8c:	f8 85       	ldd	r31, Y+8	; 0x08
   1ab8e:	91 a3       	std	Z+33, r25	; 0x21
   1ab90:	80 a3       	std	Z+32, r24	; 0x20
   1ab92:	8f 81       	ldd	r24, Y+7	; 0x07
   1ab94:	98 85       	ldd	r25, Y+8	; 0x08
   1ab96:	28 96       	adiw	r28, 0x08	; 8
   1ab98:	0f b6       	in	r0, 0x3f	; 63
   1ab9a:	f8 94       	cli
   1ab9c:	de bf       	out	0x3e, r29	; 62
   1ab9e:	0f be       	out	0x3f, r0	; 63
   1aba0:	cd bf       	out	0x3d, r28	; 61
   1aba2:	df 91       	pop	r29
   1aba4:	cf 91       	pop	r28
   1aba6:	1f 91       	pop	r17
   1aba8:	0f 91       	pop	r16
   1abaa:	ff 90       	pop	r15
   1abac:	ef 90       	pop	r14
   1abae:	df 90       	pop	r13
   1abb0:	cf 90       	pop	r12
   1abb2:	bf 90       	pop	r11
   1abb4:	af 90       	pop	r10
   1abb6:	8f 90       	pop	r8
   1abb8:	7f 90       	pop	r7
   1abba:	6f 90       	pop	r6
   1abbc:	5f 90       	pop	r5
   1abbe:	4f 90       	pop	r4
   1abc0:	3f 90       	pop	r3
   1abc2:	2f 90       	pop	r2
   1abc4:	08 95       	ret

0001abc6 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1abc6:	a6 e1       	ldi	r26, 0x16	; 22
   1abc8:	b1 e0       	ldi	r27, 0x01	; 1
   1abca:	e9 ee       	ldi	r30, 0xE9	; 233
   1abcc:	f5 ed       	ldi	r31, 0xD5	; 213
   1abce:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1abd2:	4c 01       	movw	r8, r24
   1abd4:	1b 01       	movw	r2, r22
   1abd6:	29 01       	movw	r4, r18
   1abd8:	3a 01       	movw	r6, r20
   1abda:	cd 5e       	subi	r28, 0xED	; 237
   1abdc:	de 4f       	sbci	r29, 0xFE	; 254
   1abde:	e8 82       	st	Y, r14
   1abe0:	f9 82       	std	Y+1, r15	; 0x01
   1abe2:	0a 83       	std	Y+2, r16	; 0x02
   1abe4:	1b 83       	std	Y+3, r17	; 0x03
   1abe6:	c3 51       	subi	r28, 0x13	; 19
   1abe8:	d1 40       	sbci	r29, 0x01	; 1
   1abea:	c5 5f       	subi	r28, 0xF5	; 245
   1abec:	de 4f       	sbci	r29, 0xFE	; 254
   1abee:	a8 82       	st	Y, r10
   1abf0:	b9 82       	std	Y+1, r11	; 0x01
   1abf2:	ca 82       	std	Y+2, r12	; 0x02
   1abf4:	db 82       	std	Y+3, r13	; 0x03
   1abf6:	cb 50       	subi	r28, 0x0B	; 11
   1abf8:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1abfa:	80 e0       	ldi	r24, 0x00	; 0
   1abfc:	90 e0       	ldi	r25, 0x00	; 0
   1abfe:	0e 94 bd 38 	call	0x717a	; 0x717a <time>
   1ac02:	6b 01       	movw	r12, r22
   1ac04:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1ac06:	64 e7       	ldi	r22, 0x74	; 116
   1ac08:	70 e0       	ldi	r23, 0x00	; 0
   1ac0a:	80 e0       	ldi	r24, 0x00	; 0
   1ac0c:	90 e0       	ldi	r25, 0x00	; 0
   1ac0e:	0e 94 04 ca 	call	0x19408	; 0x19408 <lif_calloc>
   1ac12:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1ac14:	89 2b       	or	r24, r25
   1ac16:	09 f4       	brne	.+2      	; 0x1ac1a <lif_create_volume+0x54>
   1ac18:	f9 c2       	rjmp	.+1522   	; 0x1b20c <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:%10s, Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1ac1a:	c2 5f       	subi	r28, 0xF2	; 242
   1ac1c:	de 4f       	sbci	r29, 0xFE	; 254
   1ac1e:	28 81       	ld	r18, Y
   1ac20:	ce 50       	subi	r28, 0x0E	; 14
   1ac22:	d1 40       	sbci	r29, 0x01	; 1
   1ac24:	2f 93       	push	r18
   1ac26:	c3 5f       	subi	r28, 0xF3	; 243
   1ac28:	de 4f       	sbci	r29, 0xFE	; 254
   1ac2a:	38 81       	ld	r19, Y
   1ac2c:	cd 50       	subi	r28, 0x0D	; 13
   1ac2e:	d1 40       	sbci	r29, 0x01	; 1
   1ac30:	3f 93       	push	r19
   1ac32:	c4 5f       	subi	r28, 0xF4	; 244
   1ac34:	de 4f       	sbci	r29, 0xFE	; 254
   1ac36:	48 81       	ld	r20, Y
   1ac38:	cc 50       	subi	r28, 0x0C	; 12
   1ac3a:	d1 40       	sbci	r29, 0x01	; 1
   1ac3c:	4f 93       	push	r20
   1ac3e:	c5 5f       	subi	r28, 0xF5	; 245
   1ac40:	de 4f       	sbci	r29, 0xFE	; 254
   1ac42:	58 81       	ld	r21, Y
   1ac44:	cb 50       	subi	r28, 0x0B	; 11
   1ac46:	d1 40       	sbci	r29, 0x01	; 1
   1ac48:	5f 93       	push	r21
   1ac4a:	ca 5e       	subi	r28, 0xEA	; 234
   1ac4c:	de 4f       	sbci	r29, 0xFE	; 254
   1ac4e:	88 81       	ld	r24, Y
   1ac50:	c6 51       	subi	r28, 0x16	; 22
   1ac52:	d1 40       	sbci	r29, 0x01	; 1
   1ac54:	8f 93       	push	r24
   1ac56:	cb 5e       	subi	r28, 0xEB	; 235
   1ac58:	de 4f       	sbci	r29, 0xFE	; 254
   1ac5a:	98 81       	ld	r25, Y
   1ac5c:	c5 51       	subi	r28, 0x15	; 21
   1ac5e:	d1 40       	sbci	r29, 0x01	; 1
   1ac60:	9f 93       	push	r25
   1ac62:	cc 5e       	subi	r28, 0xEC	; 236
   1ac64:	de 4f       	sbci	r29, 0xFE	; 254
   1ac66:	a8 81       	ld	r26, Y
   1ac68:	c4 51       	subi	r28, 0x14	; 20
   1ac6a:	d1 40       	sbci	r29, 0x01	; 1
   1ac6c:	af 93       	push	r26
   1ac6e:	cd 5e       	subi	r28, 0xED	; 237
   1ac70:	de 4f       	sbci	r29, 0xFE	; 254
   1ac72:	b8 81       	ld	r27, Y
   1ac74:	c3 51       	subi	r28, 0x13	; 19
   1ac76:	d1 40       	sbci	r29, 0x01	; 1
   1ac78:	bf 93       	push	r27
   1ac7a:	7f 92       	push	r7
   1ac7c:	6f 92       	push	r6
   1ac7e:	5f 92       	push	r5
   1ac80:	4f 92       	push	r4
   1ac82:	3f 92       	push	r3
   1ac84:	2f 92       	push	r2
   1ac86:	9f 92       	push	r9
   1ac88:	8f 92       	push	r8
   1ac8a:	8a e5       	ldi	r24, 0x5A	; 90
   1ac8c:	9d e3       	ldi	r25, 0x3D	; 61
   1ac8e:	1f 92       	push	r1
   1ac90:	9f 93       	push	r25
   1ac92:	8f 93       	push	r24
   1ac94:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   1ac98:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ac9c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1aca0:	0f b6       	in	r0, 0x3f	; 63
   1aca2:	f8 94       	cli
   1aca4:	de bf       	out	0x3e, r29	; 62
   1aca6:	0f be       	out	0x3f, r0	; 63
   1aca8:	cd bf       	out	0x3d, r28	; 61
   1acaa:	92 ff       	sbrs	r25, 2
   1acac:	04 c0       	rjmp	.+8      	; 0x1acb6 <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   1acae:	6d ef       	ldi	r22, 0xFD	; 253
   1acb0:	75 e1       	ldi	r23, 0x15	; 21
   1acb2:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   1acb4:	01 d9       	rcall	.-3582   	; 0x19eb8 <lif_dump_vol>
   1acb6:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1acb8:	ea d8       	rcall	.-3628   	; 0x19e8e <lif_image_clear>
   1acba:	80 e0       	ldi	r24, 0x00	; 0
   1acbc:	90 e8       	ldi	r25, 0x80	; 128
   1acbe:	d5 01       	movw	r26, r10
   1acc0:	95 96       	adiw	r26, 0x25	; 37
   1acc2:	9c 93       	st	X, r25
   1acc4:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1acc6:	94 97       	sbiw	r26, 0x24	; 36
   1acc8:	46 e0       	ldi	r20, 0x06	; 6
   1acca:	50 e0       	ldi	r21, 0x00	; 0
   1accc:	b1 01       	movw	r22, r2
   1acce:	c5 01       	movw	r24, r10
   1acd0:	86 96       	adiw	r24, 0x26	; 38
   1acd2:	0e 94 2b cc 	call	0x19856	; 0x19856 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1acd6:	f5 01       	movw	r30, r10
   1acd8:	45 a6       	std	Z+45, r4	; 0x2d
   1acda:	56 a6       	std	Z+46, r5	; 0x2e
   1acdc:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   1acde:	70 aa       	std	Z+48, r7	; 0x30
   1ace0:	cd 5e       	subi	r28, 0xED	; 237
   1ace2:	de 4f       	sbci	r29, 0xFE	; 254
   1ace4:	28 81       	ld	r18, Y
   1ace6:	39 81       	ldd	r19, Y+1	; 0x01
   1ace8:	4a 81       	ldd	r20, Y+2	; 0x02
   1acea:	5b 81       	ldd	r21, Y+3	; 0x03
   1acec:	c3 51       	subi	r28, 0x13	; 19
   1acee:	d1 40       	sbci	r29, 0x01	; 1
   1acf0:	25 ab       	std	Z+53, r18	; 0x35
   1acf2:	36 ab       	std	Z+54, r19	; 0x36
   1acf4:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1acf6:	50 af       	std	Z+56, r21	; 0x38
   1acf8:	80 e0       	ldi	r24, 0x00	; 0
   1acfa:	90 e1       	ldi	r25, 0x10	; 16
   1acfc:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   1acfe:	81 ab       	std	Z+49, r24	; 0x31
   1ad00:	fd 96       	adiw	r30, 0x3d	; 61
   1ad02:	10 82       	st	Z, r1
   1ad04:	11 82       	std	Z+1, r1	; 0x01
   1ad06:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1ad08:	13 82       	std	Z+3, r1	; 0x03
   1ad0a:	34 96       	adiw	r30, 0x04	; 4
   1ad0c:	10 82       	st	Z, r1
   1ad0e:	11 82       	std	Z+1, r1	; 0x01
   1ad10:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1ad12:	13 82       	std	Z+3, r1	; 0x03
   1ad14:	34 96       	adiw	r30, 0x04	; 4
   1ad16:	10 82       	st	Z, r1
   1ad18:	11 82       	std	Z+1, r1	; 0x01
   1ad1a:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1ad1c:	13 82       	std	Z+3, r1	; 0x03
   1ad1e:	a5 01       	movw	r20, r10
   1ad20:	47 5b       	subi	r20, 0xB7	; 183
   1ad22:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad24:	c7 01       	movw	r24, r14
   1ad26:	b6 01       	movw	r22, r12
   1ad28:	0e 94 70 ce 	call	0x19ce0	; 0x19ce0 <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   1ad2c:	c4 01       	movw	r24, r8
   1ad2e:	0e 94 40 ca 	call	0x19480	; 0x19480 <lif_stralloc>
   1ad32:	f5 01       	movw	r30, r10
   1ad34:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   1ad36:	80 83       	st	Z, r24
   1ad38:	89 2b       	or	r24, r25
   1ad3a:	09 f4       	brne	.+2      	; 0x1ad3e <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   1ad3c:	5c c2       	rjmp	.+1208   	; 0x1b1f6 <lif_create_volume+0x630>
   1ad3e:	c5 5f       	subi	r28, 0xF5	; 245
   1ad40:	de 4f       	sbci	r29, 0xFE	; 254
   1ad42:	28 81       	ld	r18, Y
   1ad44:	39 81       	ldd	r19, Y+1	; 0x01
   1ad46:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad48:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad4a:	cb 50       	subi	r28, 0x0B	; 11
   1ad4c:	d1 40       	sbci	r29, 0x01	; 1
   1ad4e:	20 8b       	std	Z+16, r18	; 0x10
   1ad50:	31 8b       	std	Z+17, r19	; 0x11
   1ad52:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   1ad54:	53 8b       	std	Z+19, r21	; 0x13
   1ad56:	cd 5e       	subi	r28, 0xED	; 237
   1ad58:	de 4f       	sbci	r29, 0xFE	; 254
   1ad5a:	88 81       	ld	r24, Y
   1ad5c:	99 81       	ldd	r25, Y+1	; 0x01
   1ad5e:	aa 81       	ldd	r26, Y+2	; 0x02
   1ad60:	bb 81       	ldd	r27, Y+3	; 0x03
   1ad62:	c3 51       	subi	r28, 0x13	; 19
   1ad64:	d1 40       	sbci	r29, 0x01	; 1
   1ad66:	84 0d       	add	r24, r4
   1ad68:	95 1d       	adc	r25, r5
   1ad6a:	a6 1d       	adc	r26, r6
   1ad6c:	b7 1d       	adc	r27, r7
   1ad6e:	f5 01       	movw	r30, r10
   1ad70:	84 87       	std	Z+12, r24	; 0x0c
   1ad72:	95 87       	std	Z+13, r25	; 0x0d
   1ad74:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1ad76:	b7 87       	std	Z+15, r27	; 0x0f
   1ad78:	82 0f       	add	r24, r18
   1ad7a:	93 1f       	adc	r25, r19
   1ad7c:	a4 1f       	adc	r26, r20
   1ad7e:	b5 1f       	adc	r27, r21
   1ad80:	84 83       	std	Z+4, r24	; 0x04
   1ad82:	95 83       	std	Z+5, r25	; 0x05
   1ad84:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1ad86:	b7 83       	std	Z+7, r27	; 0x07
   1ad88:	ba 2f       	mov	r27, r26
   1ad8a:	a9 2f       	mov	r26, r25
   1ad8c:	98 2f       	mov	r25, r24
   1ad8e:	88 27       	eor	r24, r24
   1ad90:	80 87       	std	Z+8, r24	; 0x08
   1ad92:	91 87       	std	Z+9, r25	; 0x09
   1ad94:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1ad96:	b3 87       	std	Z+11, r27	; 0x0b
   1ad98:	20 8f       	std	Z+24, r18	; 0x18
   1ad9a:	31 8f       	std	Z+25, r19	; 0x19
   1ad9c:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   1ad9e:	53 8f       	std	Z+27, r21	; 0x1b
   1ada0:	14 8a       	std	Z+20, r1	; 0x14
   1ada2:	15 8a       	std	Z+21, r1	; 0x15
   1ada4:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1ada6:	17 8a       	std	Z+23, r1	; 0x17
   1ada8:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1adaa:	14 8e       	std	Z+28, r1	; 0x1c
   1adac:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   1adae:	16 8e       	std	Z+30, r1	; 0x1e
   1adb0:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1adb2:	10 a2       	std	Z+32, r1	; 0x20
   1adb4:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1adb6:	12 a2       	std	Z+34, r1	; 0x22
   1adb8:	c1 2c       	mov	r12, r1
   1adba:	dd 24       	eor	r13, r13
   1adbc:	d3 94       	inc	r13
   1adbe:	9e 01       	movw	r18, r28
   1adc0:	2f 5f       	subi	r18, 0xFF	; 255
   1adc2:	3f 4f       	sbci	r19, 0xFF	; 255
   1adc4:	79 01       	movw	r14, r18
   1adc6:	d9 01       	movw	r26, r18
   1adc8:	f6 01       	movw	r30, r12
   1adca:	1d 92       	st	X+, r1
   1adcc:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   1adce:	e9 f7       	brne	.-6      	; 0x1adca <lif_create_volume+0x204>
   1add0:	b9 01       	movw	r22, r18
   1add2:	c5 01       	movw	r24, r10
   1add4:	0e 94 68 cc 	call	0x198d0	; 0x198d0 <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1add8:	68 e8       	ldi	r22, 0x88	; 136
   1adda:	78 e0       	ldi	r23, 0x08	; 8
   1addc:	d5 01       	movw	r26, r10
   1adde:	8d 91       	ld	r24, X+
   1ade0:	9c 91       	ld	r25, X
   1ade2:	0e 94 5f ca 	call	0x194be	; 0x194be <lif_open>
   1ade6:	f5 01       	movw	r30, r10
   1ade8:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1adea:	82 83       	std	Z+2, r24	; 0x02
   1adec:	89 2b       	or	r24, r25
   1adee:	09 f4       	brne	.+2      	; 0x1adf2 <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1adf0:	02 c2       	rjmp	.+1028   	; 0x1b1f6 <lif_create_volume+0x630>
   1adf2:	00 e0       	ldi	r16, 0x00	; 0
   1adf4:	11 e0       	ldi	r17, 0x01	; 1
   1adf6:	20 e0       	ldi	r18, 0x00	; 0
   1adf8:	30 e0       	ldi	r19, 0x00	; 0
   1adfa:	a9 01       	movw	r20, r18
   1adfc:	b7 01       	movw	r22, r14
   1adfe:	c5 01       	movw	r24, r10
   1ae00:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
   1ae04:	9c 01       	movw	r18, r24
   1ae06:	99 0f       	add	r25, r25
   1ae08:	44 0b       	sbc	r20, r20
   1ae0a:	55 0b       	sbc	r21, r21
   1ae0c:	c9 5f       	subi	r28, 0xF9	; 249
   1ae0e:	de 4f       	sbci	r29, 0xFE	; 254
   1ae10:	28 83       	st	Y, r18
   1ae12:	39 83       	std	Y+1, r19	; 0x01
   1ae14:	4a 83       	std	Y+2, r20	; 0x02
   1ae16:	5b 83       	std	Y+3, r21	; 0x03
   1ae18:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   1ae1a:	d1 40       	sbci	r29, 0x01	; 1
   1ae1c:	2f 3f       	cpi	r18, 0xFF	; 255
   1ae1e:	31 05       	cpc	r19, r1
   1ae20:	41 05       	cpc	r20, r1
   1ae22:	51 05       	cpc	r21, r1
   1ae24:	09 f0       	breq	.+2      	; 0x1ae28 <lif_create_volume+0x262>
   1ae26:	0c f4       	brge	.+2      	; 0x1ae2a <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   1ae28:	e6 c1       	rjmp	.+972    	; 0x1b1f6 <lif_create_volume+0x630>
   1ae2a:	d7 01       	movw	r26, r14
   1ae2c:	f6 01       	movw	r30, r12
   1ae2e:	1d 92       	st	X+, r1
   1ae30:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1ae32:	e9 f7       	brne	.-6      	; 0x1ae2e <lif_create_volume+0x268>
   1ae34:	21 e0       	ldi	r18, 0x01	; 1
   1ae36:	30 e0       	ldi	r19, 0x00	; 0
   1ae38:	40 e0       	ldi	r20, 0x00	; 0
   1ae3a:	50 e0       	ldi	r21, 0x00	; 0
   1ae3c:	cd 5f       	subi	r28, 0xFD	; 253
   1ae3e:	de 4f       	sbci	r29, 0xFE	; 254
   1ae40:	28 83       	st	Y, r18
   1ae42:	39 83       	std	Y+1, r19	; 0x01
   1ae44:	4a 83       	std	Y+2, r20	; 0x02
   1ae46:	5b 83       	std	Y+3, r21	; 0x03
   1ae48:	c3 50       	subi	r28, 0x03	; 3
   1ae4a:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("Wrote: %ld\r", count);
   1ae4c:	47 01       	movw	r8, r14
   1ae4e:	8e e4       	ldi	r24, 0x4E	; 78
   1ae50:	9d e3       	ldi	r25, 0x3D	; 61


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1ae52:	6c 01       	movw	r12, r24
   1ae54:	cd 5f       	subi	r28, 0xFD	; 253
   1ae56:	de 4f       	sbci	r29, 0xFE	; 254
   1ae58:	88 81       	ld	r24, Y
   1ae5a:	99 81       	ldd	r25, Y+1	; 0x01
   1ae5c:	aa 81       	ldd	r26, Y+2	; 0x02
   1ae5e:	bb 81       	ldd	r27, Y+3	; 0x03
   1ae60:	c3 50       	subi	r28, 0x03	; 3
   1ae62:	d1 40       	sbci	r29, 0x01	; 1
   1ae64:	84 15       	cp	r24, r4
   1ae66:	95 05       	cpc	r25, r5
   1ae68:	a6 05       	cpc	r26, r6
   1ae6a:	b7 05       	cpc	r27, r7
   1ae6c:	0c f0       	brlt	.+2      	; 0x1ae70 <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1ae6e:	64 c0       	rjmp	.+200    	; 0x1af38 <lif_create_volume+0x372>
   1ae70:	00 e0       	ldi	r16, 0x00	; 0
   1ae72:	11 e0       	ldi	r17, 0x01	; 1
   1ae74:	c9 5f       	subi	r28, 0xF9	; 249
   1ae76:	de 4f       	sbci	r29, 0xFE	; 254
   1ae78:	28 81       	ld	r18, Y
   1ae7a:	39 81       	ldd	r19, Y+1	; 0x01
   1ae7c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae7e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae80:	c7 50       	subi	r28, 0x07	; 7
   1ae82:	d1 40       	sbci	r29, 0x01	; 1
   1ae84:	b4 01       	movw	r22, r8
   1ae86:	c5 01       	movw	r24, r10
   1ae88:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
   1ae8c:	09 2e       	mov	r0, r25
   1ae8e:	00 0c       	add	r0, r0
   1ae90:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1ae92:	bb 0b       	sbc	r27, r27
   1ae94:	8f 3f       	cpi	r24, 0xFF	; 255
   1ae96:	91 05       	cpc	r25, r1
   1ae98:	a1 05       	cpc	r26, r1
   1ae9a:	b1 05       	cpc	r27, r1
   1ae9c:	09 f0       	breq	.+2      	; 0x1aea0 <lif_create_volume+0x2da>
   1ae9e:	0c f4       	brge	.+2      	; 0x1aea2 <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1aea0:	aa c1       	rjmp	.+852    	; 0x1b1f6 <lif_create_volume+0x630>
   1aea2:	c9 5f       	subi	r28, 0xF9	; 249
   1aea4:	de 4f       	sbci	r29, 0xFE	; 254
   1aea6:	28 81       	ld	r18, Y
   1aea8:	39 81       	ldd	r19, Y+1	; 0x01
   1aeaa:	4a 81       	ldd	r20, Y+2	; 0x02
   1aeac:	5b 81       	ldd	r21, Y+3	; 0x03
   1aeae:	c7 50       	subi	r28, 0x07	; 7
   1aeb0:	d1 40       	sbci	r29, 0x01	; 1
   1aeb2:	28 0f       	add	r18, r24
   1aeb4:	39 1f       	adc	r19, r25
   1aeb6:	4a 1f       	adc	r20, r26
   1aeb8:	5b 1f       	adc	r21, r27
   1aeba:	c9 5f       	subi	r28, 0xF9	; 249
   1aebc:	de 4f       	sbci	r29, 0xFE	; 254
   1aebe:	28 83       	st	Y, r18
   1aec0:	39 83       	std	Y+1, r19	; 0x01
   1aec2:	4a 83       	std	Y+2, r20	; 0x02
   1aec4:	5b 83       	std	Y+3, r21	; 0x03
   1aec6:	c7 50       	subi	r28, 0x07	; 7
            printf("Wrote: %ld\r", count);
   1aec8:	d1 40       	sbci	r29, 0x01	; 1
   1aeca:	ca 5f       	subi	r28, 0xFA	; 250
   1aecc:	de 4f       	sbci	r29, 0xFE	; 254
   1aece:	38 81       	ld	r19, Y
   1aed0:	c6 50       	subi	r28, 0x06	; 6
   1aed2:	d1 40       	sbci	r29, 0x01	; 1
   1aed4:	3f 93       	push	r19
   1aed6:	cb 5f       	subi	r28, 0xFB	; 251
   1aed8:	de 4f       	sbci	r29, 0xFE	; 254
   1aeda:	48 81       	ld	r20, Y
   1aedc:	c5 50       	subi	r28, 0x05	; 5
   1aede:	d1 40       	sbci	r29, 0x01	; 1
   1aee0:	4f 93       	push	r20
   1aee2:	cc 5f       	subi	r28, 0xFC	; 252
   1aee4:	de 4f       	sbci	r29, 0xFE	; 254
   1aee6:	58 81       	ld	r21, Y
   1aee8:	c4 50       	subi	r28, 0x04	; 4
   1aeea:	d1 40       	sbci	r29, 0x01	; 1
   1aeec:	5f 93       	push	r21
   1aeee:	cd 5f       	subi	r28, 0xFD	; 253
   1aef0:	de 4f       	sbci	r29, 0xFE	; 254
   1aef2:	88 81       	ld	r24, Y
   1aef4:	c3 50       	subi	r28, 0x03	; 3
   1aef6:	d1 40       	sbci	r29, 0x01	; 1
   1aef8:	8f 93       	push	r24
   1aefa:	1f 92       	push	r1
   1aefc:	df 92       	push	r13
   1aefe:	cf 92       	push	r12
   1af00:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1af04:	cd 5f       	subi	r28, 0xFD	; 253
   1af06:	de 4f       	sbci	r29, 0xFE	; 254
   1af08:	28 81       	ld	r18, Y
   1af0a:	39 81       	ldd	r19, Y+1	; 0x01
   1af0c:	4a 81       	ldd	r20, Y+2	; 0x02
   1af0e:	5b 81       	ldd	r21, Y+3	; 0x03
   1af10:	c3 50       	subi	r28, 0x03	; 3
   1af12:	d1 40       	sbci	r29, 0x01	; 1
   1af14:	2f 5f       	subi	r18, 0xFF	; 255
   1af16:	3f 4f       	sbci	r19, 0xFF	; 255
   1af18:	4f 4f       	sbci	r20, 0xFF	; 255
   1af1a:	5f 4f       	sbci	r21, 0xFF	; 255
   1af1c:	cd 5f       	subi	r28, 0xFD	; 253
   1af1e:	de 4f       	sbci	r29, 0xFE	; 254
   1af20:	28 83       	st	Y, r18
   1af22:	39 83       	std	Y+1, r19	; 0x01
   1af24:	4a 83       	std	Y+2, r20	; 0x02
   1af26:	5b 83       	std	Y+3, r21	; 0x03
   1af28:	c3 50       	subi	r28, 0x03	; 3
   1af2a:	d1 40       	sbci	r29, 0x01	; 1
   1af2c:	0f b6       	in	r0, 0x3f	; 63
   1af2e:	f8 94       	cli
   1af30:	de bf       	out	0x3e, r29	; 62
   1af32:	0f be       	out	0x3f, r0	; 63
   1af34:	cd bf       	out	0x3d, r28	; 61
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1af36:	8e cf       	rjmp	.-228    	; 0x1ae54 <lif_create_volume+0x28e>
   1af38:	c5 01       	movw	r24, r10
   1af3a:	0e 94 4d cf 	call	0x19e9a	; 0x19e9a <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1af3e:	8f ef       	ldi	r24, 0xFF	; 255
   1af40:	9f ef       	ldi	r25, 0xFF	; 255
   1af42:	f5 01       	movw	r30, r10
   1af44:	e6 5a       	subi	r30, 0xA6	; 166
   1af46:	ff 4f       	sbci	r31, 0xFF	; 255
   1af48:	91 83       	std	Z+1, r25	; 0x01
   1af4a:	80 83       	st	Z, r24
   1af4c:	74 01       	movw	r14, r8
   1af4e:	6e 01       	movw	r12, r28
   1af50:	91 e0       	ldi	r25, 0x01	; 1
   1af52:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1af54:	d9 1e       	adc	r13, r25
   1af56:	b7 01       	movw	r22, r14
   1af58:	c5 01       	movw	r24, r10
   1af5a:	0e 94 88 cd 	call	0x19b10	; 0x19b10 <lif_dir2str>
   1af5e:	a0 e2       	ldi	r26, 0x20	; 32
   1af60:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1af62:	f1 1c       	adc	r15, r1
   1af64:	ce 14       	cp	r12, r14
   1af66:	df 04       	cpc	r13, r15
   1af68:	b1 f7       	brne	.-20     	; 0x1af56 <lif_create_volume+0x390>
   1af6a:	c1 2c       	mov	r12, r1
   1af6c:	d1 2c       	mov	r13, r1
   1af6e:	76 01       	movw	r14, r12
   1af70:	fe 01       	movw	r30, r28
   1af72:	31 96       	adiw	r30, 0x01	; 1
   1af74:	cf 5f       	subi	r28, 0xFF	; 255
   1af76:	de 4f       	sbci	r29, 0xFE	; 254
   1af78:	f9 83       	std	Y+1, r31	; 0x01
   1af7a:	e8 83       	st	Y, r30
   1af7c:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1af7e:	d1 40       	sbci	r29, 0x01	; 1
   1af80:	84 e6       	ldi	r24, 0x64	; 100
   1af82:	28 2e       	mov	r2, r24
   1af84:	31 2c       	mov	r3, r1
   1af86:	41 2c       	mov	r4, r1
            printf("Wrote: %ld\r", count);
   1af88:	51 2c       	mov	r5, r1
   1af8a:	82 e4       	ldi	r24, 0x42	; 66
   1af8c:	9d e3       	ldi	r25, 0x3D	; 61
   1af8e:	3c 01       	movw	r6, r24
   1af90:	81 2c       	mov	r8, r1
   1af92:	cd 5f       	subi	r28, 0xFD	; 253
   1af94:	de 4f       	sbci	r29, 0xFE	; 254
   1af96:	28 81       	ld	r18, Y
   1af98:	39 81       	ldd	r19, Y+1	; 0x01
   1af9a:	4a 81       	ldd	r20, Y+2	; 0x02
   1af9c:	5b 81       	ldd	r21, Y+3	; 0x03
   1af9e:	c3 50       	subi	r28, 0x03	; 3
   1afa0:	d1 40       	sbci	r29, 0x01	; 1
   1afa2:	2c 0d       	add	r18, r12
   1afa4:	3d 1d       	adc	r19, r13
   1afa6:	4e 1d       	adc	r20, r14
   1afa8:	5f 1d       	adc	r21, r15
   1afaa:	c1 5f       	subi	r28, 0xF1	; 241
   1afac:	de 4f       	sbci	r29, 0xFE	; 254
   1afae:	28 83       	st	Y, r18
   1afb0:	39 83       	std	Y+1, r19	; 0x01
   1afb2:	4a 83       	std	Y+2, r20	; 0x02
   1afb4:	5b 83       	std	Y+3, r21	; 0x03
   1afb6:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1afb8:	d1 40       	sbci	r29, 0x01	; 1
   1afba:	cd 5e       	subi	r28, 0xED	; 237
   1afbc:	de 4f       	sbci	r29, 0xFE	; 254
   1afbe:	88 81       	ld	r24, Y
   1afc0:	99 81       	ldd	r25, Y+1	; 0x01
   1afc2:	aa 81       	ldd	r26, Y+2	; 0x02
   1afc4:	bb 81       	ldd	r27, Y+3	; 0x03
   1afc6:	c3 51       	subi	r28, 0x13	; 19
   1afc8:	d1 40       	sbci	r29, 0x01	; 1
   1afca:	c8 16       	cp	r12, r24
   1afcc:	d9 06       	cpc	r13, r25
   1afce:	ea 06       	cpc	r14, r26
   1afd0:	fb 06       	cpc	r15, r27
   1afd2:	0c f0       	brlt	.+2      	; 0x1afd6 <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1afd4:	67 c0       	rjmp	.+206    	; 0x1b0a4 <lif_create_volume+0x4de>
   1afd6:	00 e0       	ldi	r16, 0x00	; 0
   1afd8:	11 e0       	ldi	r17, 0x01	; 1
   1afda:	c9 5f       	subi	r28, 0xF9	; 249
   1afdc:	de 4f       	sbci	r29, 0xFE	; 254
   1afde:	28 81       	ld	r18, Y
   1afe0:	39 81       	ldd	r19, Y+1	; 0x01
   1afe2:	4a 81       	ldd	r20, Y+2	; 0x02
   1afe4:	5b 81       	ldd	r21, Y+3	; 0x03
   1afe6:	c7 50       	subi	r28, 0x07	; 7
   1afe8:	d1 40       	sbci	r29, 0x01	; 1
   1afea:	be 01       	movw	r22, r28
   1afec:	6f 5f       	subi	r22, 0xFF	; 255
   1afee:	7f 4f       	sbci	r23, 0xFF	; 255
   1aff0:	c5 01       	movw	r24, r10
   1aff2:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
   1aff6:	09 2e       	mov	r0, r25
   1aff8:	00 0c       	add	r0, r0
   1affa:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1affc:	bb 0b       	sbc	r27, r27
   1affe:	8f 3f       	cpi	r24, 0xFF	; 255
   1b000:	91 05       	cpc	r25, r1
   1b002:	a1 05       	cpc	r26, r1
   1b004:	b1 05       	cpc	r27, r1
   1b006:	09 f0       	breq	.+2      	; 0x1b00a <lif_create_volume+0x444>
   1b008:	0c f4       	brge	.+2      	; 0x1b00c <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1b00a:	f5 c0       	rjmp	.+490    	; 0x1b1f6 <lif_create_volume+0x630>
   1b00c:	c9 5f       	subi	r28, 0xF9	; 249
   1b00e:	de 4f       	sbci	r29, 0xFE	; 254
   1b010:	28 81       	ld	r18, Y
   1b012:	39 81       	ldd	r19, Y+1	; 0x01
   1b014:	4a 81       	ldd	r20, Y+2	; 0x02
   1b016:	5b 81       	ldd	r21, Y+3	; 0x03
   1b018:	c7 50       	subi	r28, 0x07	; 7
   1b01a:	d1 40       	sbci	r29, 0x01	; 1
   1b01c:	28 0f       	add	r18, r24
   1b01e:	39 1f       	adc	r19, r25
   1b020:	4a 1f       	adc	r20, r26
   1b022:	5b 1f       	adc	r21, r27
   1b024:	c9 5f       	subi	r28, 0xF9	; 249
   1b026:	de 4f       	sbci	r29, 0xFE	; 254
   1b028:	28 83       	st	Y, r18
   1b02a:	39 83       	std	Y+1, r19	; 0x01
   1b02c:	4a 83       	std	Y+2, r20	; 0x02
   1b02e:	5b 83       	std	Y+3, r21	; 0x03
   1b030:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1b032:	d1 40       	sbci	r29, 0x01	; 1
   1b034:	c1 5f       	subi	r28, 0xF1	; 241
   1b036:	de 4f       	sbci	r29, 0xFE	; 254
   1b038:	68 81       	ld	r22, Y
   1b03a:	79 81       	ldd	r23, Y+1	; 0x01
   1b03c:	8a 81       	ldd	r24, Y+2	; 0x02
   1b03e:	9b 81       	ldd	r25, Y+3	; 0x03
   1b040:	cf 50       	subi	r28, 0x0F	; 15
   1b042:	d1 40       	sbci	r29, 0x01	; 1
   1b044:	a2 01       	movw	r20, r4
   1b046:	91 01       	movw	r18, r2
   1b048:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
   1b04c:	67 2b       	or	r22, r23
   1b04e:	68 2b       	or	r22, r24
   1b050:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1b052:	11 f5       	brne	.+68     	; 0x1b098 <lif_create_volume+0x4d2>
   1b054:	ce 5e       	subi	r28, 0xEE	; 238
   1b056:	de 4f       	sbci	r29, 0xFE	; 254
   1b058:	38 81       	ld	r19, Y
   1b05a:	c2 51       	subi	r28, 0x12	; 18
   1b05c:	d1 40       	sbci	r29, 0x01	; 1
   1b05e:	3f 93       	push	r19
   1b060:	cf 5e       	subi	r28, 0xEF	; 239
   1b062:	de 4f       	sbci	r29, 0xFE	; 254
   1b064:	48 81       	ld	r20, Y
   1b066:	c1 51       	subi	r28, 0x11	; 17
   1b068:	d1 40       	sbci	r29, 0x01	; 1
   1b06a:	4f 93       	push	r20
   1b06c:	c0 5f       	subi	r28, 0xF0	; 240
   1b06e:	de 4f       	sbci	r29, 0xFE	; 254
   1b070:	58 81       	ld	r21, Y
   1b072:	c0 51       	subi	r28, 0x10	; 16
   1b074:	d1 40       	sbci	r29, 0x01	; 1
   1b076:	5f 93       	push	r21
   1b078:	c1 5f       	subi	r28, 0xF1	; 241
   1b07a:	de 4f       	sbci	r29, 0xFE	; 254
   1b07c:	88 81       	ld	r24, Y
   1b07e:	cf 50       	subi	r28, 0x0F	; 15
   1b080:	d1 40       	sbci	r29, 0x01	; 1
   1b082:	8f 93       	push	r24
   1b084:	1f 92       	push	r1
   1b086:	7f 92       	push	r7
   1b088:	6f 92       	push	r6
   1b08a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b08e:	0f b6       	in	r0, 0x3f	; 63
   1b090:	f8 94       	cli
   1b092:	de bf       	out	0x3e, r29	; 62
   1b094:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1b096:	cd bf       	out	0x3d, r28	; 61
   1b098:	bf ef       	ldi	r27, 0xFF	; 255
   1b09a:	cb 1a       	sub	r12, r27
   1b09c:	db 0a       	sbc	r13, r27
   1b09e:	eb 0a       	sbc	r14, r27
   1b0a0:	fb 0a       	sbc	r15, r27
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1b0a2:	77 cf       	rjmp	.-274    	; 0x1af92 <lif_create_volume+0x3cc>
   1b0a4:	80 e0       	ldi	r24, 0x00	; 0
   1b0a6:	91 e0       	ldi	r25, 0x01	; 1
   1b0a8:	cf 5f       	subi	r28, 0xFF	; 255
   1b0aa:	de 4f       	sbci	r29, 0xFE	; 254
   1b0ac:	a8 81       	ld	r26, Y
   1b0ae:	b9 81       	ldd	r27, Y+1	; 0x01
   1b0b0:	c1 50       	subi	r28, 0x01	; 1
   1b0b2:	d1 40       	sbci	r29, 0x01	; 1
   1b0b4:	fc 01       	movw	r30, r24
   1b0b6:	1d 92       	st	X+, r1
   1b0b8:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1b0ba:	e9 f7       	brne	.-6      	; 0x1b0b6 <lif_create_volume+0x4f0>
   1b0bc:	41 2c       	mov	r4, r1
   1b0be:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1b0c0:	32 01       	movw	r6, r4
   1b0c2:	86 e3       	ldi	r24, 0x36	; 54
   1b0c4:	9d e3       	ldi	r25, 0x3D	; 61
   1b0c6:	9c 01       	movw	r18, r24
   1b0c8:	40 e0       	ldi	r20, 0x00	; 0
   1b0ca:	cd 5f       	subi	r28, 0xFD	; 253
   1b0cc:	de 4f       	sbci	r29, 0xFE	; 254
   1b0ce:	28 83       	st	Y, r18
   1b0d0:	39 83       	std	Y+1, r19	; 0x01
   1b0d2:	4a 83       	std	Y+2, r20	; 0x02
   1b0d4:	c3 50       	subi	r28, 0x03	; 3
   1b0d6:	d1 40       	sbci	r29, 0x01	; 1
   1b0d8:	c1 5f       	subi	r28, 0xF1	; 241
   1b0da:	de 4f       	sbci	r29, 0xFE	; 254
   1b0dc:	c8 80       	ld	r12, Y
   1b0de:	d9 80       	ldd	r13, Y+1	; 0x01
   1b0e0:	ea 80       	ldd	r14, Y+2	; 0x02
   1b0e2:	fb 80       	ldd	r15, Y+3	; 0x03
   1b0e4:	cf 50       	subi	r28, 0x0F	; 15
   1b0e6:	d1 40       	sbci	r29, 0x01	; 1
   1b0e8:	c4 0c       	add	r12, r4
   1b0ea:	d5 1c       	adc	r13, r5
   1b0ec:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1b0ee:	f7 1c       	adc	r15, r7
   1b0f0:	c5 5f       	subi	r28, 0xF5	; 245
   1b0f2:	de 4f       	sbci	r29, 0xFE	; 254
   1b0f4:	28 81       	ld	r18, Y
   1b0f6:	39 81       	ldd	r19, Y+1	; 0x01
   1b0f8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b0fa:	5b 81       	ldd	r21, Y+3	; 0x03
   1b0fc:	cb 50       	subi	r28, 0x0B	; 11
   1b0fe:	d1 40       	sbci	r29, 0x01	; 1
   1b100:	42 16       	cp	r4, r18
   1b102:	53 06       	cpc	r5, r19
   1b104:	64 06       	cpc	r6, r20
   1b106:	75 06       	cpc	r7, r21
   1b108:	0c f0       	brlt	.+2      	; 0x1b10c <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1b10a:	59 c0       	rjmp	.+178    	; 0x1b1be <lif_create_volume+0x5f8>
   1b10c:	00 e0       	ldi	r16, 0x00	; 0
   1b10e:	11 e0       	ldi	r17, 0x01	; 1
   1b110:	c9 5f       	subi	r28, 0xF9	; 249
   1b112:	de 4f       	sbci	r29, 0xFE	; 254
   1b114:	28 81       	ld	r18, Y
   1b116:	39 81       	ldd	r19, Y+1	; 0x01
   1b118:	4a 81       	ldd	r20, Y+2	; 0x02
   1b11a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b11c:	c7 50       	subi	r28, 0x07	; 7
   1b11e:	d1 40       	sbci	r29, 0x01	; 1
   1b120:	be 01       	movw	r22, r28
   1b122:	6f 5f       	subi	r22, 0xFF	; 255
   1b124:	7f 4f       	sbci	r23, 0xFF	; 255
   1b126:	c5 01       	movw	r24, r10
   1b128:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
   1b12c:	09 2e       	mov	r0, r25
   1b12e:	00 0c       	add	r0, r0
   1b130:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1b132:	bb 0b       	sbc	r27, r27
   1b134:	8f 3f       	cpi	r24, 0xFF	; 255
   1b136:	91 05       	cpc	r25, r1
   1b138:	a1 05       	cpc	r26, r1
   1b13a:	b1 05       	cpc	r27, r1
   1b13c:	09 f0       	breq	.+2      	; 0x1b140 <lif_create_volume+0x57a>
   1b13e:	0c f4       	brge	.+2      	; 0x1b142 <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1b140:	5a c0       	rjmp	.+180    	; 0x1b1f6 <lif_create_volume+0x630>
   1b142:	c9 5f       	subi	r28, 0xF9	; 249
   1b144:	de 4f       	sbci	r29, 0xFE	; 254
   1b146:	28 81       	ld	r18, Y
   1b148:	39 81       	ldd	r19, Y+1	; 0x01
   1b14a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b14c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b14e:	c7 50       	subi	r28, 0x07	; 7
   1b150:	d1 40       	sbci	r29, 0x01	; 1
   1b152:	28 0f       	add	r18, r24
   1b154:	39 1f       	adc	r19, r25
   1b156:	4a 1f       	adc	r20, r26
   1b158:	5b 1f       	adc	r21, r27
   1b15a:	c9 5f       	subi	r28, 0xF9	; 249
   1b15c:	de 4f       	sbci	r29, 0xFE	; 254
   1b15e:	28 83       	st	Y, r18
   1b160:	39 83       	std	Y+1, r19	; 0x01
   1b162:	4a 83       	std	Y+2, r20	; 0x02
   1b164:	5b 83       	std	Y+3, r21	; 0x03
   1b166:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1b168:	d1 40       	sbci	r29, 0x01	; 1
   1b16a:	c7 01       	movw	r24, r14
   1b16c:	b6 01       	movw	r22, r12
   1b16e:	24 e6       	ldi	r18, 0x64	; 100
   1b170:	30 e0       	ldi	r19, 0x00	; 0
   1b172:	40 e0       	ldi	r20, 0x00	; 0
   1b174:	50 e0       	ldi	r21, 0x00	; 0
   1b176:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
   1b17a:	67 2b       	or	r22, r23
   1b17c:	68 2b       	or	r22, r24
   1b17e:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1b180:	c1 f4       	brne	.+48     	; 0x1b1b2 <lif_create_volume+0x5ec>
   1b182:	ff 92       	push	r15
   1b184:	ef 92       	push	r14
   1b186:	df 92       	push	r13
   1b188:	cf 92       	push	r12
   1b18a:	1f 92       	push	r1
   1b18c:	cc 5f       	subi	r28, 0xFC	; 252
   1b18e:	de 4f       	sbci	r29, 0xFE	; 254
   1b190:	38 81       	ld	r19, Y
   1b192:	c4 50       	subi	r28, 0x04	; 4
   1b194:	d1 40       	sbci	r29, 0x01	; 1
   1b196:	3f 93       	push	r19
   1b198:	cd 5f       	subi	r28, 0xFD	; 253
   1b19a:	de 4f       	sbci	r29, 0xFE	; 254
   1b19c:	48 81       	ld	r20, Y
   1b19e:	c3 50       	subi	r28, 0x03	; 3
   1b1a0:	d1 40       	sbci	r29, 0x01	; 1
   1b1a2:	4f 93       	push	r20
   1b1a4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b1a8:	0f b6       	in	r0, 0x3f	; 63
   1b1aa:	f8 94       	cli
   1b1ac:	de bf       	out	0x3e, r29	; 62
   1b1ae:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1b1b0:	cd bf       	out	0x3d, r28	; 61
   1b1b2:	9f ef       	ldi	r25, 0xFF	; 255
   1b1b4:	49 1a       	sub	r4, r25
   1b1b6:	59 0a       	sbc	r5, r25
   1b1b8:	69 0a       	sbc	r6, r25
   1b1ba:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
        ++count;
    }
    printf("Wrote: %ld\n", count);
   1b1bc:	8d cf       	rjmp	.-230    	; 0x1b0d8 <lif_create_volume+0x512>
   1b1be:	ff 92       	push	r15
   1b1c0:	ef 92       	push	r14
   1b1c2:	df 92       	push	r13
   1b1c4:	cf 92       	push	r12
   1b1c6:	8a e2       	ldi	r24, 0x2A	; 42
   1b1c8:	9d e3       	ldi	r25, 0x3D	; 61
   1b1ca:	1f 92       	push	r1
   1b1cc:	9f 93       	push	r25
   1b1ce:	8f 93       	push	r24
   1b1d0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1b1d4:	8f ef       	ldi	r24, 0xFF	; 255
   1b1d6:	9f ef       	ldi	r25, 0xFF	; 255
   1b1d8:	d5 01       	movw	r26, r10
   1b1da:	91 96       	adiw	r26, 0x21	; 33
   1b1dc:	9c 93       	st	X, r25
   1b1de:	8e 93       	st	-X, r24
    printf("Wrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1b1e0:	90 97       	sbiw	r26, 0x20	; 32
   1b1e2:	c5 01       	movw	r24, r10
   1b1e4:	0e 94 ef d0 	call	0x1a1de	; 0x1a1de <lif_check_volume>
   1b1e8:	0f b6       	in	r0, 0x3f	; 63
   1b1ea:	f8 94       	cli
   1b1ec:	de bf       	out	0x3e, r29	; 62
   1b1ee:	0f be       	out	0x3f, r0	; 63
   1b1f0:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1f2:	89 2b       	or	r24, r25
   1b1f4:	19 f4       	brne	.+6      	; 0x1b1fc <lif_create_volume+0x636>
   1b1f6:	c5 01       	movw	r24, r10
   1b1f8:	80 da       	rcall	.-2816   	; 0x1a6fa <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1b1fa:	08 c0       	rjmp	.+16     	; 0x1b20c <lif_create_volume+0x646>
   1b1fc:	c5 01       	movw	r24, r10
   1b1fe:	db db       	rcall	.-2122   	; 0x1a9b6 <lif_updatefree>
   1b200:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b202:	89 2b       	or	r24, r25
   1b204:	31 f4       	brne	.+12     	; 0x1b212 <lif_create_volume+0x64c>
   1b206:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1b208:	78 da       	rcall	.-2832   	; 0x1a6fa <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1b20a:	04 c0       	rjmp	.+8      	; 0x1b214 <lif_create_volume+0x64e>
   1b20c:	e1 2c       	mov	r14, r1
   1b20e:	f1 2c       	mov	r15, r1
   1b210:	01 c0       	rjmp	.+2      	; 0x1b214 <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1b212:	75 01       	movw	r14, r10
   1b214:	c7 01       	movw	r24, r14
   1b216:	ca 5e       	subi	r28, 0xEA	; 234
   1b218:	de 4f       	sbci	r29, 0xFE	; 254
   1b21a:	e2 e1       	ldi	r30, 0x12	; 18
   1b21c:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001b220 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1b220:	ac e0       	ldi	r26, 0x0C	; 12
   1b222:	b0 e0       	ldi	r27, 0x00	; 0
   1b224:	e6 e1       	ldi	r30, 0x16	; 22
   1b226:	f9 ed       	ldi	r31, 0xD9	; 217
   1b228:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1b22c:	9c 87       	std	Y+12, r25	; 0x0c
   1b22e:	8b 87       	std	Y+11, r24	; 0x0b
   1b230:	6a 01       	movw	r12, r20
   1b232:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1b234:	fc 01       	movw	r30, r24
   1b236:	84 84       	ldd	r8, Z+12	; 0x0c
   1b238:	95 84       	ldd	r9, Z+13	; 0x0d
   1b23a:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1b23c:	b7 84       	ldd	r11, Z+15	; 0x0f
   1b23e:	bb db       	rcall	.-2186   	; 0x1a9b6 <lif_updatefree>
   1b240:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1b242:	b1 f4       	brne	.+44     	; 0x1b270 <lif_newdir+0x50>
   1b244:	ff 92       	push	r15
   1b246:	ef 92       	push	r14
   1b248:	df 92       	push	r13
   1b24a:	cf 92       	push	r12
   1b24c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b24e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b250:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b252:	8f 93       	push	r24
   1b254:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b256:	8f 93       	push	r24
   1b258:	81 8d       	ldd	r24, Z+25	; 0x19
   1b25a:	8f 93       	push	r24
   1b25c:	80 8d       	ldd	r24, Z+24	; 0x18
   1b25e:	8f 93       	push	r24
   1b260:	8b e4       	ldi	r24, 0x4B	; 75
   1b262:	9c e3       	ldi	r25, 0x3C	; 60
   1b264:	1f 92       	push	r1
   1b266:	9f 93       	push	r25
   1b268:	8f 93       	push	r24
   1b26a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1b26e:	2c c0       	rjmp	.+88     	; 0x1b2c8 <lif_newdir+0xa8>
   1b270:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b272:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b274:	80 8d       	ldd	r24, Z+24	; 0x18
   1b276:	91 8d       	ldd	r25, Z+25	; 0x19
   1b278:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b27a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b27c:	8c 15       	cp	r24, r12
   1b27e:	9d 05       	cpc	r25, r13
   1b280:	ae 05       	cpc	r26, r14
   1b282:	bf 05       	cpc	r27, r15
   1b284:	b4 f0       	brlt	.+44     	; 0x1b2b2 <lif_newdir+0x92>
   1b286:	44 24       	eor	r4, r4
   1b288:	43 94       	inc	r4
   1b28a:	51 2c       	mov	r5, r1
   1b28c:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1b28e:	71 2c       	mov	r7, r1
   1b290:	e6 5a       	subi	r30, 0xA6	; 166
   1b292:	ff 4f       	sbci	r31, 0xFF	; 255
   1b294:	fc 83       	std	Y+4, r31	; 0x04
   1b296:	eb 83       	std	Y+3, r30	; 0x03
   1b298:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b29a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b29c:	84 5a       	subi	r24, 0xA4	; 164
   1b29e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b2a0:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1b2a2:	89 83       	std	Y+1, r24	; 0x01
   1b2a4:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b2a6:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b2a8:	e0 5a       	subi	r30, 0xA0	; 160
   1b2aa:	ff 4f       	sbci	r31, 0xFF	; 255
   1b2ac:	fe 83       	std	Y+6, r31	; 0x06
   1b2ae:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1b2b0:	23 c0       	rjmp	.+70     	; 0x1b2f8 <lif_newdir+0xd8>
   1b2b2:	bf 93       	push	r27
   1b2b4:	af 93       	push	r26
   1b2b6:	9f 93       	push	r25
   1b2b8:	8f 93       	push	r24
   1b2ba:	82 e2       	ldi	r24, 0x22	; 34
   1b2bc:	9c e3       	ldi	r25, 0x3C	; 60
   1b2be:	1f 92       	push	r1
   1b2c0:	9f 93       	push	r25
   1b2c2:	8f 93       	push	r24
   1b2c4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
   1b2c8:	0f b6       	in	r0, 0x3f	; 63
   1b2ca:	f8 94       	cli
   1b2cc:	de bf       	out	0x3e, r29	; 62
   1b2ce:	0f be       	out	0x3f, r0	; 63
   1b2d0:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1b2d2:	05 c1       	rjmp	.+522    	; 0x1b4de <lif_newdir+0x2be>
   1b2d4:	eb 81       	ldd	r30, Y+3	; 0x03
   1b2d6:	fc 81       	ldd	r31, Y+4	; 0x04
   1b2d8:	80 81       	ld	r24, Z
   1b2da:	91 81       	ldd	r25, Z+1	; 0x01
   1b2dc:	8f 3f       	cpi	r24, 0xFF	; 255
   1b2de:	ff ef       	ldi	r31, 0xFF	; 255
   1b2e0:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1b2e2:	a1 f0       	breq	.+40     	; 0x1b30c <lif_newdir+0xec>
   1b2e4:	89 2b       	or	r24, r25
   1b2e6:	09 f0       	breq	.+2      	; 0x1b2ea <lif_newdir+0xca>
        {
            if(freestate == 0)
   1b2e8:	d0 c0       	rjmp	.+416    	; 0x1b48a <lif_newdir+0x26a>
   1b2ea:	61 14       	cp	r6, r1
   1b2ec:	71 04       	cpc	r7, r1
   1b2ee:	09 f4       	brne	.+2      	; 0x1b2f2 <lif_newdir+0xd2>
   1b2f0:	c3 c0       	rjmp	.+390    	; 0x1b478 <lif_newdir+0x258>
   1b2f2:	9f ef       	ldi	r25, 0xFF	; 255
   1b2f4:	49 1a       	sub	r4, r25
   1b2f6:	59 0a       	sbc	r5, r25
   1b2f8:	82 01       	movw	r16, r4
   1b2fa:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1b2fc:	11 09       	sbc	r17, r1
   1b2fe:	b8 01       	movw	r22, r16
   1b300:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b302:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b304:	7b da       	rcall	.-2826   	; 0x1a7fc <lif_readdirindex>
   1b306:	89 2b       	or	r24, r25
   1b308:	29 f7       	brne	.-54     	; 0x1b2d4 <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1b30a:	e9 c0       	rjmp	.+466    	; 0x1b4de <lif_newdir+0x2be>
   1b30c:	22 e0       	ldi	r18, 0x02	; 2
   1b30e:	62 16       	cp	r6, r18
   1b310:	71 04       	cpc	r7, r1
   1b312:	09 f0       	breq	.+2      	; 0x1b316 <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1b314:	46 c0       	rjmp	.+140    	; 0x1b3a2 <lif_newdir+0x182>
   1b316:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b318:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b31a:	0e 94 4d cf 	call	0x19e9a	; 0x19e9a <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1b31e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b320:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b322:	e4 5a       	subi	r30, 0xA4	; 164
   1b324:	ff 4f       	sbci	r31, 0xFF	; 255
   1b326:	8f 81       	ldd	r24, Y+7	; 0x07
   1b328:	80 83       	st	Z, r24
   1b32a:	98 85       	ldd	r25, Y+8	; 0x08
   1b32c:	91 83       	std	Z+1, r25	; 0x01
   1b32e:	29 85       	ldd	r18, Y+9	; 0x09
   1b330:	22 83       	std	Z+2, r18	; 0x02
   1b332:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1b334:	83 83       	std	Z+3, r24	; 0x03
   1b336:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b338:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b33a:	e0 5a       	subi	r30, 0xA0	; 160
   1b33c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b33e:	c0 82       	st	Z, r12
   1b340:	d1 82       	std	Z+1, r13	; 0x01
   1b342:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1b344:	f3 82       	std	Z+3, r15	; 0x03
   1b346:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b348:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b34a:	84 89       	ldd	r24, Z+20	; 0x14
   1b34c:	95 89       	ldd	r25, Z+21	; 0x15
   1b34e:	a6 89       	ldd	r26, Z+22	; 0x16
   1b350:	b7 89       	ldd	r27, Z+23	; 0x17
   1b352:	8c 0d       	add	r24, r12
   1b354:	9d 1d       	adc	r25, r13
   1b356:	ae 1d       	adc	r26, r14
   1b358:	bf 1d       	adc	r27, r15
   1b35a:	84 8b       	std	Z+20, r24	; 0x14
   1b35c:	95 8b       	std	Z+21, r25	; 0x15
   1b35e:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1b360:	b7 8b       	std	Z+23, r27	; 0x17
   1b362:	80 8d       	ldd	r24, Z+24	; 0x18
   1b364:	91 8d       	ldd	r25, Z+25	; 0x19
   1b366:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b368:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b36a:	8c 19       	sub	r24, r12
   1b36c:	9d 09       	sbc	r25, r13
   1b36e:	ae 09       	sbc	r26, r14
   1b370:	bf 09       	sbc	r27, r15
   1b372:	80 8f       	std	Z+24, r24	; 0x18
   1b374:	91 8f       	std	Z+25, r25	; 0x19
   1b376:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1b378:	b3 8f       	std	Z+27, r27	; 0x1b
   1b37a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b37c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b37e:	01 96       	adiw	r24, 0x01	; 1
   1b380:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1b382:	84 8f       	std	Z+28, r24	; 0x1c
   1b384:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b386:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b388:	01 97       	sbiw	r24, 0x01	; 1
   1b38a:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1b38c:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1b38e:	20 a2       	std	Z+32, r2	; 0x20
   1b390:	31 a2       	std	Z+33, r3	; 0x21
   1b392:	b1 01       	movw	r22, r2
   1b394:	cf 01       	movw	r24, r30
   1b396:	9b da       	rcall	.-2762   	; 0x1a8ce <lif_writedirindex>
   1b398:	89 2b       	or	r24, r25
   1b39a:	09 f4       	brne	.+2      	; 0x1b39e <lif_newdir+0x17e>
   1b39c:	a0 c0       	rjmp	.+320    	; 0x1b4de <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1b39e:	c1 01       	movw	r24, r2
   1b3a0:	a0 c0       	rjmp	.+320    	; 0x1b4e2 <lif_newdir+0x2c2>
   1b3a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b3a6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1b3aa:	92 ff       	sbrs	r25, 2
   1b3ac:	20 c0       	rjmp	.+64     	; 0x1b3ee <lif_newdir+0x1ce>
   1b3ae:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b3b0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b3b2:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b3b4:	8f 93       	push	r24
   1b3b6:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b3b8:	8f 93       	push	r24
   1b3ba:	81 8d       	ldd	r24, Z+25	; 0x19
   1b3bc:	8f 93       	push	r24
   1b3be:	80 8d       	ldd	r24, Z+24	; 0x18
   1b3c0:	8f 93       	push	r24
   1b3c2:	ff 92       	push	r15
   1b3c4:	ef 92       	push	r14
   1b3c6:	df 92       	push	r13
   1b3c8:	cf 92       	push	r12
   1b3ca:	bf 92       	push	r11
   1b3cc:	af 92       	push	r10
   1b3ce:	9f 92       	push	r9
   1b3d0:	8f 92       	push	r8
   1b3d2:	1f 93       	push	r17
   1b3d4:	0f 93       	push	r16
   1b3d6:	81 ed       	ldi	r24, 0xD1	; 209
   1b3d8:	9b e3       	ldi	r25, 0x3B	; 59
   1b3da:	1f 92       	push	r1
   1b3dc:	9f 93       	push	r25
   1b3de:	8f 93       	push	r24
   1b3e0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b3e4:	0f b6       	in	r0, 0x3f	; 63
   1b3e6:	f8 94       	cli
   1b3e8:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1b3ea:	0f be       	out	0x3f, r0	; 63
   1b3ec:	cd bf       	out	0x3d, r28	; 61
   1b3ee:	b8 01       	movw	r22, r16
   1b3f0:	6f 5f       	subi	r22, 0xFF	; 255
   1b3f2:	7f 4f       	sbci	r23, 0xFF	; 255
   1b3f4:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b3f6:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b3f8:	c6 da       	rcall	.-2676   	; 0x1a986 <lif_writedirEOF>
   1b3fa:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1b3fc:	09 f4       	brne	.+2      	; 0x1b400 <lif_newdir+0x1e0>
   1b3fe:	6f c0       	rjmp	.+222    	; 0x1b4de <lif_newdir+0x2be>
   1b400:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b402:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1b404:	0e 94 4d cf 	call	0x19e9a	; 0x19e9a <lif_dir_clear>
   1b408:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b40a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b40c:	e4 5a       	subi	r30, 0xA4	; 164
   1b40e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b410:	80 82       	st	Z, r8
   1b412:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1b414:	a2 82       	std	Z+2, r10	; 0x02
   1b416:	b3 82       	std	Z+3, r11	; 0x03
   1b418:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b41a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b41c:	e0 5a       	subi	r30, 0xA0	; 160
   1b41e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b420:	c0 82       	st	Z, r12
   1b422:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1b424:	e2 82       	std	Z+2, r14	; 0x02
   1b426:	f3 82       	std	Z+3, r15	; 0x03
   1b428:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b42a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b42c:	84 89       	ldd	r24, Z+20	; 0x14
   1b42e:	95 89       	ldd	r25, Z+21	; 0x15
   1b430:	a6 89       	ldd	r26, Z+22	; 0x16
   1b432:	b7 89       	ldd	r27, Z+23	; 0x17
   1b434:	8c 0d       	add	r24, r12
   1b436:	9d 1d       	adc	r25, r13
   1b438:	ae 1d       	adc	r26, r14
   1b43a:	bf 1d       	adc	r27, r15
   1b43c:	84 8b       	std	Z+20, r24	; 0x14
   1b43e:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1b440:	a6 8b       	std	Z+22, r26	; 0x16
   1b442:	b7 8b       	std	Z+23, r27	; 0x17
   1b444:	80 8d       	ldd	r24, Z+24	; 0x18
   1b446:	91 8d       	ldd	r25, Z+25	; 0x19
   1b448:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b44a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b44c:	8c 19       	sub	r24, r12
   1b44e:	9d 09       	sbc	r25, r13
   1b450:	ae 09       	sbc	r26, r14
   1b452:	bf 09       	sbc	r27, r15
   1b454:	80 8f       	std	Z+24, r24	; 0x18
   1b456:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1b458:	a2 8f       	std	Z+26, r26	; 0x1a
   1b45a:	b3 8f       	std	Z+27, r27	; 0x1b
   1b45c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b45e:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1b460:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1b462:	95 8f       	std	Z+29, r25	; 0x1d
   1b464:	84 8f       	std	Z+28, r24	; 0x1c
   1b466:	11 a3       	std	Z+33, r17	; 0x21
   1b468:	00 a3       	std	Z+32, r16	; 0x20
   1b46a:	b8 01       	movw	r22, r16
   1b46c:	cf 01       	movw	r24, r30
   1b46e:	2f da       	rcall	.-2978   	; 0x1a8ce <lif_writedirindex>
   1b470:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1b472:	a9 f1       	breq	.+106    	; 0x1b4de <lif_newdir+0x2be>
   1b474:	c8 01       	movw	r24, r16
   1b476:	35 c0       	rjmp	.+106    	; 0x1b4e2 <lif_newdir+0x2c2>
   1b478:	8f 82       	std	Y+7, r8	; 0x07
   1b47a:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1b47c:	a9 86       	std	Y+9, r10	; 0x09
   1b47e:	ba 86       	std	Y+10, r11	; 0x0a
   1b480:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1b482:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1b484:	63 94       	inc	r6
   1b486:	71 2c       	mov	r7, r1
   1b488:	34 cf       	rjmp	.-408    	; 0x1b2f2 <lif_newdir+0xd2>
   1b48a:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1b48c:	6f 16       	cp	r6, r31
   1b48e:	71 04       	cpc	r7, r1
   1b490:	a9 f4       	brne	.+42     	; 0x1b4bc <lif_newdir+0x29c>
   1b492:	e9 81       	ldd	r30, Y+1	; 0x01
   1b494:	fa 81       	ldd	r31, Y+2	; 0x02
   1b496:	80 81       	ld	r24, Z
   1b498:	91 81       	ldd	r25, Z+1	; 0x01
   1b49a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b49c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b49e:	88 19       	sub	r24, r8
   1b4a0:	99 09       	sbc	r25, r9
   1b4a2:	aa 09       	sbc	r26, r10
   1b4a4:	bb 09       	sbc	r27, r11
   1b4a6:	8c 15       	cp	r24, r12
   1b4a8:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1b4aa:	ae 05       	cpc	r26, r14
   1b4ac:	bf 05       	cpc	r27, r15
   1b4ae:	1c f4       	brge	.+6      	; 0x1b4b6 <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1b4b0:	61 2c       	mov	r6, r1
   1b4b2:	71 2c       	mov	r7, r1
   1b4b4:	03 c0       	rjmp	.+6      	; 0x1b4bc <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1b4b6:	82 e0       	ldi	r24, 0x02	; 2
   1b4b8:	68 2e       	mov	r6, r24
   1b4ba:	71 2c       	mov	r7, r1
   1b4bc:	e9 81       	ldd	r30, Y+1	; 0x01
   1b4be:	fa 81       	ldd	r31, Y+2	; 0x02
   1b4c0:	80 80       	ld	r8, Z
   1b4c2:	91 80       	ldd	r9, Z+1	; 0x01
   1b4c4:	a2 80       	ldd	r10, Z+2	; 0x02
   1b4c6:	b3 80       	ldd	r11, Z+3	; 0x03
   1b4c8:	ed 81       	ldd	r30, Y+5	; 0x05
   1b4ca:	fe 81       	ldd	r31, Y+6	; 0x06
   1b4cc:	80 81       	ld	r24, Z
   1b4ce:	91 81       	ldd	r25, Z+1	; 0x01
   1b4d0:	a2 81       	ldd	r26, Z+2	; 0x02
   1b4d2:	b3 81       	ldd	r27, Z+3	; 0x03
   1b4d4:	88 0e       	add	r8, r24
   1b4d6:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1b4d8:	aa 1e       	adc	r10, r26
   1b4da:	bb 1e       	adc	r11, r27
}
   1b4dc:	0a cf       	rjmp	.-492    	; 0x1b2f2 <lif_newdir+0xd2>
   1b4de:	8f ef       	ldi	r24, 0xFF	; 255
   1b4e0:	9f ef       	ldi	r25, 0xFF	; 255
   1b4e2:	2c 96       	adiw	r28, 0x0c	; 12
   1b4e4:	e2 e1       	ldi	r30, 0x12	; 18
   1b4e6:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001b4ea <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1b4ea:	a0 e3       	ldi	r26, 0x30	; 48
   1b4ec:	b1 e0       	ldi	r27, 0x01	; 1
   1b4ee:	eb e7       	ldi	r30, 0x7B	; 123
   1b4f0:	fa ed       	ldi	r31, 0xDA	; 218
   1b4f2:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   1b4f6:	b8 2e       	mov	r11, r24
   1b4f8:	a9 2e       	mov	r10, r25
   1b4fa:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1b4fc:	be 01       	movw	r22, r28
   1b4fe:	6f 5f       	subi	r22, 0xFF	; 255
   1b500:	7e 4f       	sbci	r23, 0xFE	; 254
   1b502:	0e 94 87 ca 	call	0x1950e	; 0x1950e <lif_stat>
   1b506:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1b508:	00 97       	sbiw	r24, 0x00	; 0
   1b50a:	09 f1       	breq	.+66     	; 0x1b54e <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1b50c:	fc 01       	movw	r30, r24
   1b50e:	80 8d       	ldd	r24, Z+24	; 0x18
   1b510:	91 8d       	ldd	r25, Z+25	; 0x19
   1b512:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b514:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b516:	81 15       	cp	r24, r1
   1b518:	f2 e0       	ldi	r31, 0x02	; 2
   1b51a:	9f 07       	cpc	r25, r31
   1b51c:	a1 05       	cpc	r26, r1
   1b51e:	b1 05       	cpc	r27, r1
   1b520:	c8 f4       	brcc	.+50     	; 0x1b554 <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1b522:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b526:	20 ff       	sbrs	r18, 0
   1b528:	12 c0       	rjmp	.+36     	; 0x1b54e <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1b52a:	bf 93       	push	r27
   1b52c:	af 93       	push	r26
   1b52e:	9f 93       	push	r25
   1b530:	8f 93       	push	r24
   1b532:	af 92       	push	r10
   1b534:	bf 92       	push	r11
   1b536:	82 e9       	ldi	r24, 0x92	; 146
   1b538:	9b e3       	ldi	r25, 0x3B	; 59
   1b53a:	1f 92       	push	r1
   1b53c:	9f 93       	push	r25
   1b53e:	8f 93       	push	r24
   1b540:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b544:	0f b6       	in	r0, 0x3f	; 63
   1b546:	f8 94       	cli
   1b548:	de bf       	out	0x3e, r29	; 62
   1b54a:	0f be       	out	0x3f, r0	; 63
   1b54c:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1b54e:	00 e0       	ldi	r16, 0x00	; 0
   1b550:	10 e0       	ldi	r17, 0x00	; 0
   1b552:	c5 c0       	rjmp	.+394    	; 0x1b6de <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1b554:	64 e7       	ldi	r22, 0x74	; 116
   1b556:	70 e0       	ldi	r23, 0x00	; 0
   1b558:	80 e0       	ldi	r24, 0x00	; 0
   1b55a:	90 e0       	ldi	r25, 0x00	; 0
   1b55c:	0e 94 04 ca 	call	0x19408	; 0x19408 <lif_calloc>
   1b560:	7c 01       	movw	r14, r24
    if(!LIF)
   1b562:	89 2b       	or	r24, r25
   1b564:	a1 f3       	breq	.-24     	; 0x1b54e <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1b566:	8b 2d       	mov	r24, r11
   1b568:	9a 2d       	mov	r25, r10
   1b56a:	0e 94 40 ca 	call	0x19480	; 0x19480 <lif_stralloc>
   1b56e:	f7 01       	movw	r30, r14
   1b570:	91 83       	std	Z+1, r25	; 0x01
   1b572:	80 83       	st	Z, r24
    if(!LIF->name)
   1b574:	00 97       	sbiw	r24, 0x00	; 0
   1b576:	09 f4       	brne	.+2      	; 0x1b57a <lif_open_volume+0x90>
   1b578:	5a c0       	rjmp	.+180    	; 0x1b62e <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1b57a:	f8 01       	movw	r30, r16
   1b57c:	00 8d       	ldd	r16, Z+24	; 0x18
   1b57e:	11 8d       	ldd	r17, Z+25	; 0x19
   1b580:	22 8d       	ldd	r18, Z+26	; 0x1a
   1b582:	33 8d       	ldd	r19, Z+27	; 0x1b
   1b584:	f7 01       	movw	r30, r14
   1b586:	00 87       	std	Z+8, r16	; 0x08
   1b588:	11 87       	std	Z+9, r17	; 0x09
   1b58a:	22 87       	std	Z+10, r18	; 0x0a
   1b58c:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b58e:	77 27       	eor	r23, r23
   1b590:	63 2f       	mov	r22, r19
   1b592:	52 2f       	mov	r21, r18
   1b594:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b596:	00 23       	and	r16, r16
   1b598:	21 f0       	breq	.+8      	; 0x1b5a2 <lif_open_volume+0xb8>
        ++sectors;
   1b59a:	4f 5f       	subi	r20, 0xFF	; 255
   1b59c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b59e:	6f 4f       	sbci	r22, 0xFF	; 255
   1b5a0:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1b5a2:	f7 01       	movw	r30, r14
   1b5a4:	44 83       	std	Z+4, r20	; 0x04
   1b5a6:	55 83       	std	Z+5, r21	; 0x05
   1b5a8:	66 83       	std	Z+6, r22	; 0x06
   1b5aa:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1b5ac:	b6 01       	movw	r22, r12
   1b5ae:	0e 94 5f ca 	call	0x194be	; 0x194be <lif_open>
   1b5b2:	f7 01       	movw	r30, r14
   1b5b4:	93 83       	std	Z+3, r25	; 0x03
   1b5b6:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1b5b8:	89 2b       	or	r24, r25
   1b5ba:	c9 f1       	breq	.+114    	; 0x1b62e <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1b5bc:	00 e0       	ldi	r16, 0x00	; 0
   1b5be:	11 e0       	ldi	r17, 0x01	; 1
   1b5c0:	20 e0       	ldi	r18, 0x00	; 0
   1b5c2:	30 e0       	ldi	r19, 0x00	; 0
   1b5c4:	a9 01       	movw	r20, r18
   1b5c6:	be 01       	movw	r22, r28
   1b5c8:	6f 5f       	subi	r22, 0xFF	; 255
   1b5ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1b5cc:	c7 01       	movw	r24, r14
   1b5ce:	0e 94 e5 ca 	call	0x195ca	; 0x195ca <lif_read>
   1b5d2:	6f 3f       	cpi	r22, 0xFF	; 255
   1b5d4:	71 05       	cpc	r23, r1
   1b5d6:	81 05       	cpc	r24, r1
   1b5d8:	91 05       	cpc	r25, r1
   1b5da:	09 f0       	breq	.+2      	; 0x1b5de <lif_open_volume+0xf4>
   1b5dc:	4c f4       	brge	.+18     	; 0x1b5f0 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1b5de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b5e2:	80 ff       	sbrs	r24, 0
   1b5e4:	24 c0       	rjmp	.+72     	; 0x1b62e <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1b5e6:	af 92       	push	r10
   1b5e8:	bf 92       	push	r11
   1b5ea:	8c e5       	ldi	r24, 0x5C	; 92
   1b5ec:	9b e3       	ldi	r25, 0x3B	; 59
   1b5ee:	15 c0       	rjmp	.+42     	; 0x1b61a <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1b5f0:	b7 01       	movw	r22, r14
   1b5f2:	ce 01       	movw	r24, r28
   1b5f4:	01 96       	adiw	r24, 0x01	; 1
   1b5f6:	0e 94 00 cd 	call	0x19a00	; 0x19a00 <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1b5fa:	c7 01       	movw	r24, r14
   1b5fc:	0e 94 ef d0 	call	0x1a1de	; 0x1a1de <lif_check_volume>
   1b600:	89 2b       	or	r24, r25
   1b602:	c1 f4       	brne	.+48     	; 0x1b634 <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1b604:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b608:	80 ff       	sbrs	r24, 0
   1b60a:	11 c0       	rjmp	.+34     	; 0x1b62e <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1b60c:	f7 01       	movw	r30, r14
   1b60e:	81 81       	ldd	r24, Z+1	; 0x01
   1b610:	8f 93       	push	r24
   1b612:	80 81       	ld	r24, Z
   1b614:	8f 93       	push	r24
   1b616:	89 e2       	ldi	r24, 0x29	; 41
   1b618:	9b e3       	ldi	r25, 0x3B	; 59
   1b61a:	1f 92       	push	r1
   1b61c:	9f 93       	push	r25
   1b61e:	8f 93       	push	r24
   1b620:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b624:	0f 90       	pop	r0
   1b626:	0f 90       	pop	r0
   1b628:	0f 90       	pop	r0
   1b62a:	0f 90       	pop	r0
   1b62c:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b62e:	c7 01       	movw	r24, r14
   1b630:	64 d8       	rcall	.-3896   	; 0x1a6fa <lif_close_volume>
   1b632:	8d cf       	rjmp	.-230    	; 0x1b54e <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1b634:	f7 01       	movw	r30, r14
   1b636:	45 a5       	ldd	r20, Z+45	; 0x2d
   1b638:	56 a5       	ldd	r21, Z+46	; 0x2e
   1b63a:	67 a5       	ldd	r22, Z+47	; 0x2f
   1b63c:	70 a9       	ldd	r23, Z+48	; 0x30
   1b63e:	85 a9       	ldd	r24, Z+53	; 0x35
   1b640:	96 a9       	ldd	r25, Z+54	; 0x36
   1b642:	a7 a9       	ldd	r26, Z+55	; 0x37
   1b644:	b0 ad       	ldd	r27, Z+56	; 0x38
   1b646:	48 0f       	add	r20, r24
   1b648:	59 1f       	adc	r21, r25
   1b64a:	6a 1f       	adc	r22, r26
   1b64c:	7b 1f       	adc	r23, r27
   1b64e:	44 87       	std	Z+12, r20	; 0x0c
   1b650:	55 87       	std	Z+13, r21	; 0x0d
   1b652:	66 87       	std	Z+14, r22	; 0x0e
   1b654:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1b656:	84 81       	ldd	r24, Z+4	; 0x04
   1b658:	95 81       	ldd	r25, Z+5	; 0x05
   1b65a:	a6 81       	ldd	r26, Z+6	; 0x06
   1b65c:	b7 81       	ldd	r27, Z+7	; 0x07
   1b65e:	84 1b       	sub	r24, r20
   1b660:	95 0b       	sbc	r25, r21
   1b662:	a6 0b       	sbc	r26, r22
   1b664:	b7 0b       	sbc	r27, r23
   1b666:	80 8b       	std	Z+16, r24	; 0x10
   1b668:	91 8b       	std	Z+17, r25	; 0x11
   1b66a:	a2 8b       	std	Z+18, r26	; 0x12
   1b66c:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1b66e:	80 8f       	std	Z+24, r24	; 0x18
   1b670:	91 8f       	std	Z+25, r25	; 0x19
   1b672:	a2 8f       	std	Z+26, r26	; 0x1a
   1b674:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1b676:	14 8a       	std	Z+20, r1	; 0x14
   1b678:	15 8a       	std	Z+21, r1	; 0x15
   1b67a:	16 8a       	std	Z+22, r1	; 0x16
   1b67c:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1b67e:	17 8e       	std	Z+31, r1	; 0x1f
   1b680:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1b682:	15 8e       	std	Z+29, r1	; 0x1d
   1b684:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1b686:	11 a2       	std	Z+33, r1	; 0x21
   1b688:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1b68a:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1b68c:	12 a2       	std	Z+34, r1	; 0x22
   1b68e:	c7 01       	movw	r24, r14
   1b690:	92 d9       	rcall	.-3292   	; 0x1a9b6 <lif_updatefree>
   1b692:	8c 01       	movw	r16, r24
   1b694:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b698:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b69c:	01 15       	cp	r16, r1
   1b69e:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1b6a0:	b1 f4       	brne	.+44     	; 0x1b6ce <lif_open_volume+0x1e4>
   1b6a2:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1b6a4:	11 c0       	rjmp	.+34     	; 0x1b6c8 <lif_open_volume+0x1de>
   1b6a6:	f7 01       	movw	r30, r14
   1b6a8:	81 81       	ldd	r24, Z+1	; 0x01
   1b6aa:	8f 93       	push	r24
   1b6ac:	80 81       	ld	r24, Z
   1b6ae:	8f 93       	push	r24
   1b6b0:	86 ef       	ldi	r24, 0xF6	; 246
   1b6b2:	9a e3       	ldi	r25, 0x3A	; 58
   1b6b4:	1f 92       	push	r1
   1b6b6:	9f 93       	push	r25
   1b6b8:	8f 93       	push	r24
   1b6ba:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b6be:	0f 90       	pop	r0
   1b6c0:	0f 90       	pop	r0
   1b6c2:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6c4:	0f 90       	pop	r0
   1b6c6:	0f 90       	pop	r0
   1b6c8:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1b6ca:	17 d8       	rcall	.-4050   	; 0x1a6fa <lif_close_volume>
    }

	if(debuglevel &0x400)
   1b6cc:	08 c0       	rjmp	.+16     	; 0x1b6de <lif_open_volume+0x1f4>
   1b6ce:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1b6d0:	05 c0       	rjmp	.+10     	; 0x1b6dc <lif_open_volume+0x1f2>
   1b6d2:	6f e0       	ldi	r22, 0x0F	; 15
   1b6d4:	76 e1       	ldi	r23, 0x16	; 22
   1b6d6:	c7 01       	movw	r24, r14
   1b6d8:	0e 94 5c cf 	call	0x19eb8	; 0x19eb8 <lif_dump_vol>
    return( LIF );
}
   1b6dc:	87 01       	movw	r16, r14
   1b6de:	c8 01       	movw	r24, r16
   1b6e0:	c0 5d       	subi	r28, 0xD0	; 208
   1b6e2:	de 4f       	sbci	r29, 0xFE	; 254
   1b6e4:	ea e0       	ldi	r30, 0x0A	; 10
   1b6e6:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0001b6ea <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1b6ea:	a1 e1       	ldi	r26, 0x11	; 17
   1b6ec:	b0 e0       	ldi	r27, 0x00	; 0
   1b6ee:	eb e7       	ldi	r30, 0x7B	; 123
   1b6f0:	fb ed       	ldi	r31, 0xDB	; 219
   1b6f2:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1b6f6:	6a e7       	ldi	r22, 0x7A	; 122
   1b6f8:	78 e0       	ldi	r23, 0x08	; 8
   1b6fa:	f7 de       	rcall	.-530    	; 0x1b4ea <lif_open_volume>
   1b6fc:	99 8b       	std	Y+17, r25	; 0x11
   1b6fe:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1b700:	00 97       	sbiw	r24, 0x00	; 0
   1b702:	09 f4       	brne	.+2      	; 0x1b706 <lif_dir+0x1c>
   1b704:	5b c1       	rjmp	.+694    	; 0x1b9bc <lif_dir+0x2d2>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1b706:	fc 01       	movw	r30, r24
   1b708:	86 a1       	ldd	r24, Z+38	; 0x26
   1b70a:	88 23       	and	r24, r24
   1b70c:	21 f0       	breq	.+8      	; 0x1b716 <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1b70e:	8f 01       	movw	r16, r30
   1b710:	0a 5d       	subi	r16, 0xDA	; 218
   1b712:	1f 4f       	sbci	r17, 0xFF	; 255
   1b714:	02 c0       	rjmp	.+4      	; 0x1b71a <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1b716:	01 ec       	ldi	r16, 0xC1	; 193
   1b718:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1b71a:	88 89       	ldd	r24, Y+16	; 0x10
   1b71c:	99 89       	ldd	r25, Y+17	; 0x11
   1b71e:	87 5b       	subi	r24, 0xB7	; 183
   1b720:	9f 4f       	sbci	r25, 0xFF	; 255
   1b722:	0e 94 20 cf 	call	0x19e40	; 0x19e40 <lif_lifbcd2timestr>
   1b726:	9f 93       	push	r25
   1b728:	8f 93       	push	r24
   1b72a:	1f 93       	push	r17
   1b72c:	0f 93       	push	r16
   1b72e:	8f ed       	ldi	r24, 0xDF	; 223
   1b730:	9a e3       	ldi	r25, 0x3A	; 58
   1b732:	1f 92       	push	r1
   1b734:	9f 93       	push	r25
   1b736:	8f 93       	push	r24
   1b738:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1b73c:	8f e9       	ldi	r24, 0x9F	; 159
   1b73e:	9a e3       	ldi	r25, 0x3A	; 58
   1b740:	1f 92       	push	r1
   1b742:	9f 93       	push	r25
   1b744:	8f 93       	push	r24
   1b746:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b74a:	0f b6       	in	r0, 0x3f	; 63
   1b74c:	f8 94       	cli
   1b74e:	de bf       	out	0x3e, r29	; 62
   1b750:	0f be       	out	0x3f, r0	; 63
   1b752:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1b754:	60 e2       	ldi	r22, 0x20	; 32
   1b756:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1b758:	00 e0       	ldi	r16, 0x00	; 0
   1b75a:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b75c:	88 89       	ldd	r24, Y+16	; 0x10
   1b75e:	99 89       	ldd	r25, Y+17	; 0x11
   1b760:	86 5a       	subi	r24, 0xA6	; 166
   1b762:	9f 4f       	sbci	r25, 0xFF	; 255
   1b764:	9c 83       	std	Y+4, r25	; 0x04
   1b766:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b768:	e8 89       	ldd	r30, Y+16	; 0x10
   1b76a:	f9 89       	ldd	r31, Y+17	; 0x11
   1b76c:	e0 5a       	subi	r30, 0xA0	; 160
   1b76e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b770:	fb 87       	std	Y+11, r31	; 0x0b
   1b772:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b774:	28 89       	ldd	r18, Y+16	; 0x10
   1b776:	39 89       	ldd	r19, Y+17	; 0x11
   1b778:	24 59       	subi	r18, 0x94	; 148
   1b77a:	3f 4f       	sbci	r19, 0xFF	; 255
   1b77c:	3d 87       	std	Y+13, r19	; 0x0d
   1b77e:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b780:	88 89       	ldd	r24, Y+16	; 0x10
   1b782:	99 89       	ldd	r25, Y+17	; 0x11
   1b784:	81 5b       	subi	r24, 0xB1	; 177
   1b786:	9f 4f       	sbci	r25, 0xFF	; 255
   1b788:	9a 83       	std	Y+2, r25	; 0x02
   1b78a:	89 83       	std	Y+1, r24	; 0x01
   1b78c:	83 e5       	ldi	r24, 0x53	; 83
   1b78e:	9a e3       	ldi	r25, 0x3A	; 58
   1b790:	3c 01       	movw	r6, r24
   1b792:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b794:	e8 89       	ldd	r30, Y+16	; 0x10
   1b796:	f9 89       	ldd	r31, Y+17	; 0x11
   1b798:	ec 59       	subi	r30, 0x9C	; 156
   1b79a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b79c:	ff 87       	std	Y+15, r31	; 0x0f
   1b79e:	ee 87       	std	Y+14, r30	; 0x0e
   1b7a0:	28 89       	ldd	r18, Y+16	; 0x10
   1b7a2:	39 89       	ldd	r19, Y+17	; 0x11
   1b7a4:	22 59       	subi	r18, 0x92	; 146
   1b7a6:	3f 4f       	sbci	r19, 0xFF	; 255
   1b7a8:	3e 83       	std	Y+6, r19	; 0x06
   1b7aa:	2d 83       	std	Y+5, r18	; 0x05
   1b7ac:	a8 88       	ldd	r10, Y+16	; 0x10
   1b7ae:	b9 88       	ldd	r11, Y+17	; 0x11
   1b7b0:	3c e5       	ldi	r19, 0x5C	; 92
   1b7b2:	a3 0e       	add	r10, r19
   1b7b4:	b1 1c       	adc	r11, r1
   1b7b6:	83 e2       	ldi	r24, 0x23	; 35
   1b7b8:	9a e3       	ldi	r25, 0x3A	; 58
   1b7ba:	9c 01       	movw	r18, r24
   1b7bc:	40 e0       	ldi	r20, 0x00	; 0
   1b7be:	2f 83       	std	Y+7, r18	; 0x07
   1b7c0:	38 87       	std	Y+8, r19	; 0x08
   1b7c2:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1b7c4:	b8 01       	movw	r22, r16
   1b7c6:	88 89       	ldd	r24, Y+16	; 0x10
   1b7c8:	99 89       	ldd	r25, Y+17	; 0x11
   1b7ca:	18 d8       	rcall	.-4048   	; 0x1a7fc <lif_readdirindex>
   1b7cc:	89 2b       	or	r24, r25
   1b7ce:	09 f4       	brne	.+2      	; 0x1b7d2 <lif_dir+0xe8>
   1b7d0:	9d c0       	rjmp	.+314    	; 0x1b90c <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b7d2:	eb 81       	ldd	r30, Y+3	; 0x03
   1b7d4:	fc 81       	ldd	r31, Y+4	; 0x04
   1b7d6:	20 81       	ld	r18, Z
   1b7d8:	31 81       	ldd	r19, Z+1	; 0x01
   1b7da:	2f 3f       	cpi	r18, 0xFF	; 255
   1b7dc:	ff ef       	ldi	r31, 0xFF	; 255
   1b7de:	3f 07       	cpc	r19, r31
   1b7e0:	09 f4       	brne	.+2      	; 0x1b7e4 <lif_dir+0xfa>
   1b7e2:	94 c0       	rjmp	.+296    	; 0x1b90c <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b7e4:	ea 85       	ldd	r30, Y+10	; 0x0a
   1b7e6:	fb 85       	ldd	r31, Y+11	; 0x0b
   1b7e8:	80 81       	ld	r24, Z
   1b7ea:	91 81       	ldd	r25, Z+1	; 0x01
   1b7ec:	a2 81       	ldd	r26, Z+2	; 0x02
   1b7ee:	b3 81       	ldd	r27, Z+3	; 0x03
   1b7f0:	cc 24       	eor	r12, r12
   1b7f2:	d8 2e       	mov	r13, r24
   1b7f4:	e9 2e       	mov	r14, r25
   1b7f6:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1b7f8:	2c 7f       	andi	r18, 0xFC	; 252
   1b7fa:	20 31       	cpi	r18, 0x10	; 16
   1b7fc:	30 4e       	sbci	r19, 0xE0	; 224
   1b7fe:	09 f0       	breq	.+2      	; 0x1b802 <lif_dir+0x118>
   1b800:	4b c0       	rjmp	.+150    	; 0x1b898 <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b802:	ec 85       	ldd	r30, Y+12	; 0x0c
   1b804:	fd 85       	ldd	r31, Y+13	; 0x0d
   1b806:	20 81       	ld	r18, Z
   1b808:	31 81       	ldd	r19, Z+1	; 0x01
   1b80a:	21 15       	cp	r18, r1
   1b80c:	31 05       	cpc	r19, r1
   1b80e:	a9 f0       	breq	.+42     	; 0x1b83a <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b810:	19 01       	movw	r2, r18
   1b812:	41 2c       	mov	r4, r1
   1b814:	51 2c       	mov	r5, r1
   1b816:	77 27       	eor	r23, r23
   1b818:	65 2d       	mov	r22, r5
   1b81a:	54 2d       	mov	r21, r4
   1b81c:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b81e:	22 23       	and	r18, r18
   1b820:	21 f0       	breq	.+8      	; 0x1b82a <lif_dir+0x140>
        ++sectors;
   1b822:	4f 5f       	subi	r20, 0xFF	; 255
   1b824:	5f 4f       	sbci	r21, 0xFF	; 255
   1b826:	6f 4f       	sbci	r22, 0xFF	; 255
   1b828:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b82a:	84 17       	cp	r24, r20
   1b82c:	95 07       	cpc	r25, r21
   1b82e:	a6 07       	cpc	r26, r22
   1b830:	b7 07       	cpc	r27, r23
   1b832:	19 f4       	brne	.+6      	; 0x1b83a <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1b834:	72 01       	movw	r14, r4
   1b836:	61 01       	movw	r12, r2
   1b838:	2f c0       	rjmp	.+94     	; 0x1b898 <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1b83a:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1b83e:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b842:	52 ff       	sbrs	r21, 2
   1b844:	27 c0       	rjmp	.+78     	; 0x1b894 <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b846:	19 01       	movw	r2, r18
   1b848:	41 2c       	mov	r4, r1
   1b84a:	51 2c       	mov	r5, r1
   1b84c:	77 27       	eor	r23, r23
   1b84e:	65 2d       	mov	r22, r5
   1b850:	54 2d       	mov	r21, r4
   1b852:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b854:	22 23       	and	r18, r18
   1b856:	21 f0       	breq	.+8      	; 0x1b860 <lif_dir+0x176>
        ++sectors;
   1b858:	4f 5f       	subi	r20, 0xFF	; 255
   1b85a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b85c:	6f 4f       	sbci	r22, 0xFF	; 255
   1b85e:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b860:	bf 93       	push	r27
   1b862:	af 93       	push	r26
   1b864:	9f 93       	push	r25
   1b866:	8f 93       	push	r24
   1b868:	7f 93       	push	r23
   1b86a:	6f 93       	push	r22
   1b86c:	5f 93       	push	r21
   1b86e:	4f 93       	push	r20
   1b870:	1f 92       	push	r1
   1b872:	1f 92       	push	r1
   1b874:	3f 92       	push	r3
   1b876:	2f 92       	push	r2
   1b878:	fa 81       	ldd	r31, Y+2	; 0x02
   1b87a:	ff 93       	push	r31
   1b87c:	29 81       	ldd	r18, Y+1	; 0x01
   1b87e:	2f 93       	push	r18
   1b880:	1f 92       	push	r1
   1b882:	7f 92       	push	r7
   1b884:	6f 92       	push	r6
   1b886:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1b88a:	0f b6       	in	r0, 0x3f	; 63
   1b88c:	f8 94       	cli
   1b88e:	de bf       	out	0x3e, r29	; 62
   1b890:	0f be       	out	0x3f, r0	; 63
   1b892:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1b894:	81 e2       	ldi	r24, 0x21	; 33
   1b896:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b898:	8e 85       	ldd	r24, Y+14	; 0x0e
   1b89a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1b89c:	0e 94 20 cf 	call	0x19e40	; 0x19e40 <lif_lifbcd2timestr>
   1b8a0:	ed 81       	ldd	r30, Y+5	; 0x05
   1b8a2:	fe 81       	ldd	r31, Y+6	; 0x06
   1b8a4:	a0 81       	ld	r26, Z
   1b8a6:	b1 81       	ldd	r27, Z+1	; 0x01
   1b8a8:	f5 01       	movw	r30, r10
   1b8aa:	60 81       	ld	r22, Z
   1b8ac:	71 81       	ldd	r23, Z+1	; 0x01
   1b8ae:	52 80       	ldd	r5, Z+2	; 0x02
   1b8b0:	43 80       	ldd	r4, Z+3	; 0x03
   1b8b2:	eb 81       	ldd	r30, Y+3	; 0x03
   1b8b4:	fc 81       	ldd	r31, Y+4	; 0x04
   1b8b6:	40 81       	ld	r20, Z
   1b8b8:	51 81       	ldd	r21, Z+1	; 0x01
   1b8ba:	41 15       	cp	r20, r1
   1b8bc:	51 05       	cpc	r21, r1
   1b8be:	19 f0       	breq	.+6      	; 0x1b8c6 <lif_dir+0x1dc>
   1b8c0:	29 81       	ldd	r18, Y+1	; 0x01
   1b8c2:	3a 81       	ldd	r19, Y+2	; 0x02
   1b8c4:	02 c0       	rjmp	.+4      	; 0x1b8ca <lif_dir+0x1e0>
   1b8c6:	2e e1       	ldi	r18, 0x1E	; 30
   1b8c8:	36 e1       	ldi	r19, 0x16	; 22
   1b8ca:	9f 93       	push	r25
   1b8cc:	8f 93       	push	r24
   1b8ce:	bf 93       	push	r27
   1b8d0:	af 93       	push	r26
   1b8d2:	1f 92       	push	r1
   1b8d4:	9f 92       	push	r9
   1b8d6:	ff 92       	push	r15
   1b8d8:	ef 92       	push	r14
   1b8da:	df 92       	push	r13
   1b8dc:	cf 92       	push	r12
   1b8de:	4f 92       	push	r4
   1b8e0:	5f 92       	push	r5
   1b8e2:	7f 93       	push	r23
   1b8e4:	6f 93       	push	r22
   1b8e6:	5f 93       	push	r21
   1b8e8:	4f 93       	push	r20
   1b8ea:	3f 93       	push	r19
   1b8ec:	2f 93       	push	r18
   1b8ee:	1f 92       	push	r1
   1b8f0:	f8 85       	ldd	r31, Y+8	; 0x08
   1b8f2:	ff 93       	push	r31
   1b8f4:	2f 81       	ldd	r18, Y+7	; 0x07
   1b8f6:	2f 93       	push	r18
   1b8f8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1b8fc:	0f 5f       	subi	r16, 0xFF	; 255
   1b8fe:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1b900:	0f b6       	in	r0, 0x3f	; 63
   1b902:	f8 94       	cli
   1b904:	de bf       	out	0x3e, r29	; 62
   1b906:	0f be       	out	0x3f, r0	; 63
   1b908:	cd bf       	out	0x3d, r28	; 61
   1b90a:	5c cf       	rjmp	.-328    	; 0x1b7c4 <lif_dir+0xda>

    printf("\n");
   1b90c:	81 e2       	ldi	r24, 0x21	; 33
   1b90e:	9a e3       	ldi	r25, 0x3A	; 58
   1b910:	1f 92       	push	r1
   1b912:	9f 93       	push	r25
   1b914:	8f 93       	push	r24
   1b916:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1b91a:	e8 89       	ldd	r30, Y+16	; 0x10
   1b91c:	f9 89       	ldd	r31, Y+17	; 0x11
   1b91e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b920:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b922:	09 2e       	mov	r0, r25
   1b924:	00 0c       	add	r0, r0
   1b926:	aa 0b       	sbc	r26, r26
   1b928:	bb 0b       	sbc	r27, r27
   1b92a:	bf 93       	push	r27
   1b92c:	af 93       	push	r26
   1b92e:	9f 93       	push	r25
   1b930:	8f 93       	push	r24
   1b932:	85 e1       	ldi	r24, 0x15	; 21
   1b934:	9a e3       	ldi	r25, 0x3A	; 58
   1b936:	1f 92       	push	r1
   1b938:	9f 93       	push	r25
   1b93a:	8f 93       	push	r24
   1b93c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1b940:	e8 89       	ldd	r30, Y+16	; 0x10
   1b942:	f9 89       	ldd	r31, Y+17	; 0x11
   1b944:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b946:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b948:	09 2e       	mov	r0, r25
   1b94a:	00 0c       	add	r0, r0
   1b94c:	aa 0b       	sbc	r26, r26
   1b94e:	bb 0b       	sbc	r27, r27
   1b950:	bf 93       	push	r27
   1b952:	af 93       	push	r26
   1b954:	9f 93       	push	r25
   1b956:	8f 93       	push	r24
   1b958:	88 e0       	ldi	r24, 0x08	; 8
   1b95a:	9a e3       	ldi	r25, 0x3A	; 58
   1b95c:	1f 92       	push	r1
   1b95e:	9f 93       	push	r25
   1b960:	8f 93       	push	r24
   1b962:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1b966:	e8 89       	ldd	r30, Y+16	; 0x10
   1b968:	f9 89       	ldd	r31, Y+17	; 0x11
   1b96a:	87 89       	ldd	r24, Z+23	; 0x17
   1b96c:	8f 93       	push	r24
   1b96e:	86 89       	ldd	r24, Z+22	; 0x16
   1b970:	8f 93       	push	r24
   1b972:	85 89       	ldd	r24, Z+21	; 0x15
   1b974:	8f 93       	push	r24
   1b976:	84 89       	ldd	r24, Z+20	; 0x14
   1b978:	8f 93       	push	r24
   1b97a:	85 ef       	ldi	r24, 0xF5	; 245
   1b97c:	99 e3       	ldi	r25, 0x39	; 57
   1b97e:	1f 92       	push	r1
   1b980:	9f 93       	push	r25
   1b982:	8f 93       	push	r24
   1b984:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1b988:	e8 89       	ldd	r30, Y+16	; 0x10
   1b98a:	f9 89       	ldd	r31, Y+17	; 0x11
   1b98c:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b98e:	8f 93       	push	r24
   1b990:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b992:	8f 93       	push	r24
   1b994:	81 8d       	ldd	r24, Z+25	; 0x19
   1b996:	8f 93       	push	r24
   1b998:	80 8d       	ldd	r24, Z+24	; 0x18
   1b99a:	8f 93       	push	r24
   1b99c:	82 ee       	ldi	r24, 0xE2	; 226
   1b99e:	99 e3       	ldi	r25, 0x39	; 57
   1b9a0:	1f 92       	push	r1
   1b9a2:	9f 93       	push	r25
   1b9a4:	8f 93       	push	r24
   1b9a6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9aa:	88 89       	ldd	r24, Y+16	; 0x10
   1b9ac:	99 89       	ldd	r25, Y+17	; 0x11
   1b9ae:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1b9b2:	0f b6       	in	r0, 0x3f	; 63
   1b9b4:	f8 94       	cli
   1b9b6:	de bf       	out	0x3e, r29	; 62
   1b9b8:	0f be       	out	0x3f, r0	; 63
   1b9ba:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Purged\n", (long)LIF->purged);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1b9bc:	61 96       	adiw	r28, 0x11	; 17
   1b9be:	e2 e1       	ldi	r30, 0x12	; 18
   1b9c0:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001b9c4 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1b9c4:	a0 e0       	ldi	r26, 0x00	; 0
   1b9c6:	b0 e0       	ldi	r27, 0x00	; 0
   1b9c8:	e8 ee       	ldi	r30, 0xE8	; 232
   1b9ca:	fc ed       	ldi	r31, 0xDC	; 220
   1b9cc:	0c 94 0d ed 	jmp	0x1da1a	; 0x1da1a <__prologue_saves__+0x10>
   1b9d0:	7c 01       	movw	r14, r24
   1b9d2:	16 2f       	mov	r17, r22
   1b9d4:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1b9d6:	86 2f       	mov	r24, r22
   1b9d8:	97 2f       	mov	r25, r23
   1b9da:	0e 94 f1 cb 	call	0x197e2	; 0x197e2 <lif_checkname>
   1b9de:	89 2b       	or	r24, r25
   1b9e0:	49 f4       	brne	.+18     	; 0x1b9f4 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1b9e2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b9e6:	80 ff       	sbrs	r24, 0
   1b9e8:	48 c0       	rjmp	.+144    	; 0x1ba7a <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1b9ea:	0f 93       	push	r16
   1b9ec:	1f 93       	push	r17
   1b9ee:	8b eb       	ldi	r24, 0xBB	; 187
   1b9f0:	99 e3       	ldi	r25, 0x39	; 57
   1b9f2:	13 c0       	rjmp	.+38     	; 0x1ba1a <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1b9f4:	a1 2f       	mov	r26, r17
   1b9f6:	b0 2f       	mov	r27, r16
   1b9f8:	fd 01       	movw	r30, r26
   1b9fa:	01 90       	ld	r0, Z+
   1b9fc:	00 20       	and	r0, r0
   1b9fe:	e9 f7       	brne	.-6      	; 0x1b9fa <lif_find_file+0x36>
   1ba00:	31 97       	sbiw	r30, 0x01	; 1
   1ba02:	ea 1b       	sub	r30, r26
   1ba04:	fb 0b       	sbc	r31, r27
   1ba06:	3b 97       	sbiw	r30, 0x0b	; 11
   1ba08:	98 f0       	brcs	.+38     	; 0x1ba30 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1ba0a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ba0e:	80 ff       	sbrs	r24, 0
   1ba10:	34 c0       	rjmp	.+104    	; 0x1ba7a <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1ba12:	0f 93       	push	r16
   1ba14:	1f 93       	push	r17
   1ba16:	86 e9       	ldi	r24, 0x96	; 150
   1ba18:	99 e3       	ldi	r25, 0x39	; 57
   1ba1a:	1f 92       	push	r1
   1ba1c:	9f 93       	push	r25
   1ba1e:	8f 93       	push	r24
   1ba20:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1ba24:	0f 90       	pop	r0
   1ba26:	0f 90       	pop	r0
   1ba28:	0f 90       	pop	r0
   1ba2a:	0f 90       	pop	r0
   1ba2c:	0f 90       	pop	r0
   1ba2e:	25 c0       	rjmp	.+74     	; 0x1ba7a <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1ba30:	e1 14       	cp	r14, r1
   1ba32:	f1 04       	cpc	r15, r1
   1ba34:	11 f1       	breq	.+68     	; 0x1ba7a <lif_find_file+0xb6>
   1ba36:	c0 e0       	ldi	r28, 0x00	; 0
   1ba38:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1ba3a:	67 01       	movw	r12, r14
   1ba3c:	2a e5       	ldi	r18, 0x5A	; 90
   1ba3e:	c2 0e       	add	r12, r18
   1ba40:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ba42:	57 01       	movw	r10, r14
   1ba44:	8f e4       	ldi	r24, 0x4F	; 79
   1ba46:	a8 0e       	add	r10, r24
   1ba48:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1ba4a:	be 01       	movw	r22, r28
   1ba4c:	c7 01       	movw	r24, r14
   1ba4e:	0e 94 fe d3 	call	0x1a7fc	; 0x1a7fc <lif_readdirindex>
   1ba52:	89 2b       	or	r24, r25
   1ba54:	91 f0       	breq	.+36     	; 0x1ba7a <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1ba56:	f6 01       	movw	r30, r12
   1ba58:	80 81       	ld	r24, Z
   1ba5a:	91 81       	ldd	r25, Z+1	; 0x01
   1ba5c:	8f 3f       	cpi	r24, 0xFF	; 255
   1ba5e:	ff ef       	ldi	r31, 0xFF	; 255
   1ba60:	9f 07       	cpc	r25, r31
   1ba62:	59 f0       	breq	.+22     	; 0x1ba7a <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ba64:	89 2b       	or	r24, r25
   1ba66:	39 f0       	breq	.+14     	; 0x1ba76 <lif_find_file+0xb2>
   1ba68:	61 2f       	mov	r22, r17
   1ba6a:	70 2f       	mov	r23, r16
   1ba6c:	c5 01       	movw	r24, r10
   1ba6e:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <strcasecmp>
   1ba72:	89 2b       	or	r24, r25
   1ba74:	29 f0       	breq	.+10     	; 0x1ba80 <lif_find_file+0xbc>
            break;
        ++index;
   1ba76:	21 96       	adiw	r28, 0x01	; 1
   1ba78:	e8 cf       	rjmp	.-48     	; 0x1ba4a <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1ba7a:	8f ef       	ldi	r24, 0xFF	; 255
   1ba7c:	9f ef       	ldi	r25, 0xFF	; 255
   1ba7e:	01 c0       	rjmp	.+2      	; 0x1ba82 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ba80:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1ba82:	cd b7       	in	r28, 0x3d	; 61
   1ba84:	de b7       	in	r29, 0x3e	; 62
   1ba86:	ea e0       	ldi	r30, 0x0A	; 10
   1ba88:	0c 94 29 ed 	jmp	0x1da52	; 0x1da52 <__epilogue_restores__+0x10>

0001ba8c <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1ba8c:	a0 e0       	ldi	r26, 0x00	; 0
   1ba8e:	b0 e0       	ldi	r27, 0x00	; 0
   1ba90:	ec e4       	ldi	r30, 0x4C	; 76
   1ba92:	fd ed       	ldi	r31, 0xDD	; 221
   1ba94:	0c 94 0f ed 	jmp	0x1da1e	; 0x1da1e <__prologue_saves__+0x14>
   1ba98:	6b 01       	movw	r12, r22
   1ba9a:	7c 01       	movw	r14, r24
   1ba9c:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1ba9e:	20 e0       	ldi	r18, 0x00	; 0
   1baa0:	31 e0       	ldi	r19, 0x01	; 1
   1baa2:	40 e0       	ldi	r20, 0x00	; 0
   1baa4:	50 e0       	ldi	r21, 0x00	; 0
   1baa6:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
    if(!pos)
   1baaa:	61 15       	cp	r22, r1
   1baac:	71 05       	cpc	r23, r1
   1baae:	e1 f1       	breq	.+120    	; 0x1bb28 <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1bab0:	c0 e0       	ldi	r28, 0x00	; 0
   1bab2:	d1 e0       	ldi	r29, 0x01	; 1
   1bab4:	c6 1b       	sub	r28, r22
   1bab6:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1bab8:	f8 01       	movw	r30, r16
   1baba:	8f ee       	ldi	r24, 0xEF	; 239
   1babc:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1babe:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1bac0:	cf 01       	movw	r24, r30
   1bac2:	80 1b       	sub	r24, r16
   1bac4:	91 0b       	sbc	r25, r17
   1bac6:	8c 17       	cp	r24, r28
   1bac8:	9d 07       	cpc	r25, r29
   1baca:	14 f4       	brge	.+4      	; 0x1bad0 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1bacc:	21 93       	st	Z+, r18
   1bace:	f8 cf       	rjmp	.-16     	; 0x1bac0 <lif_e010_pad_sector+0x34>
   1bad0:	1c 16       	cp	r1, r28
   1bad2:	1d 06       	cpc	r1, r29
   1bad4:	14 f0       	brlt	.+4      	; 0x1bada <lif_e010_pad_sector+0x4e>
   1bad6:	c1 e0       	ldi	r28, 0x01	; 1
   1bad8:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1bada:	ce 01       	movw	r24, r28
   1badc:	0d 2e       	mov	r0, r29
   1bade:	00 0c       	add	r0, r0
   1bae0:	aa 0b       	sbc	r26, r26
   1bae2:	bb 0b       	sbc	r27, r27
   1bae4:	bc 01       	movw	r22, r24
   1bae6:	cd 01       	movw	r24, r26
   1bae8:	6c 0d       	add	r22, r12
   1baea:	7d 1d       	adc	r23, r13
   1baec:	8e 1d       	adc	r24, r14
   1baee:	9f 1d       	adc	r25, r15
   1baf0:	20 e0       	ldi	r18, 0x00	; 0
   1baf2:	31 e0       	ldi	r19, 0x01	; 1
   1baf4:	40 e0       	ldi	r20, 0x00	; 0
   1baf6:	50 e0       	ldi	r21, 0x00	; 0
   1baf8:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1bafc:	61 15       	cp	r22, r1
   1bafe:	71 05       	cpc	r23, r1
   1bb00:	b1 f0       	breq	.+44     	; 0x1bb2e <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1bb02:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1bb06:	20 ff       	sbrs	r18, 0
   1bb08:	14 c0       	rjmp	.+40     	; 0x1bb32 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1bb0a:	7f 93       	push	r23
   1bb0c:	6f 93       	push	r22
   1bb0e:	8d e5       	ldi	r24, 0x5D	; 93
   1bb10:	99 e3       	ldi	r25, 0x39	; 57
   1bb12:	1f 92       	push	r1
   1bb14:	9f 93       	push	r25
   1bb16:	8f 93       	push	r24
   1bb18:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1bb1c:	0f 90       	pop	r0
   1bb1e:	0f 90       	pop	r0
   1bb20:	0f 90       	pop	r0
   1bb22:	0f 90       	pop	r0
   1bb24:	0f 90       	pop	r0
   1bb26:	05 c0       	rjmp	.+10     	; 0x1bb32 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1bb28:	80 e0       	ldi	r24, 0x00	; 0
   1bb2a:	90 e0       	ldi	r25, 0x00	; 0
   1bb2c:	04 c0       	rjmp	.+8      	; 0x1bb36 <lif_e010_pad_sector+0xaa>
   1bb2e:	ce 01       	movw	r24, r28
   1bb30:	02 c0       	rjmp	.+4      	; 0x1bb36 <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1bb32:	8f ef       	ldi	r24, 0xFF	; 255
   1bb34:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1bb36:	cd b7       	in	r28, 0x3d	; 61
   1bb38:	de b7       	in	r29, 0x3e	; 62
   1bb3a:	e8 e0       	ldi	r30, 0x08	; 8
   1bb3c:	0c 94 2b ed 	jmp	0x1da56	; 0x1da56 <__epilogue_restores__+0x14>

0001bb40 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1bb40:	a0 e0       	ldi	r26, 0x00	; 0
   1bb42:	b0 e0       	ldi	r27, 0x00	; 0
   1bb44:	e6 ea       	ldi	r30, 0xA6	; 166
   1bb46:	fd ed       	ldi	r31, 0xDD	; 221
   1bb48:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1bb4c:	ec 01       	movw	r28, r24
   1bb4e:	4a 01       	movw	r8, r20
   1bb50:	5b 01       	movw	r10, r22
   1bb52:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1bb54:	fc 01       	movw	r30, r24
   1bb56:	01 90       	ld	r0, Z+
   1bb58:	00 20       	and	r0, r0
   1bb5a:	e9 f7       	brne	.-6      	; 0x1bb56 <lif_ascii_string_to_e010+0x16>
   1bb5c:	31 97       	sbiw	r30, 0x01	; 1
   1bb5e:	6f 01       	movw	r12, r30
   1bb60:	c8 1a       	sub	r12, r24
   1bb62:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1bb64:	41 2c       	mov	r4, r1
   1bb66:	51 2c       	mov	r5, r1
   1bb68:	32 01       	movw	r6, r4
   1bb6a:	53 94       	inc	r5
   1bb6c:	cb 01       	movw	r24, r22
   1bb6e:	ba 01       	movw	r22, r20
   1bb70:	a3 01       	movw	r20, r6
   1bb72:	92 01       	movw	r18, r4
   1bb74:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
   1bb78:	21 2c       	mov	r2, r1
   1bb7a:	33 24       	eor	r3, r3
   1bb7c:	33 94       	inc	r3
   1bb7e:	c1 01       	movw	r24, r2
   1bb80:	86 1b       	sub	r24, r22
   1bb82:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1bb84:	86 30       	cpi	r24, 0x06	; 6
   1bb86:	91 05       	cpc	r25, r1
   1bb88:	20 f0       	brcs	.+8      	; 0x1bb92 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1bb8a:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1bb8c:	00 e0       	ldi	r16, 0x00	; 0
   1bb8e:	10 e0       	ldi	r17, 0x00	; 0
   1bb90:	17 c0       	rjmp	.+46     	; 0x1bbc0 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1bb92:	a7 01       	movw	r20, r14
   1bb94:	c5 01       	movw	r24, r10
   1bb96:	b4 01       	movw	r22, r8
   1bb98:	79 df       	rcall	.-270    	; 0x1ba8c <lif_e010_pad_sector>
   1bb9a:	8c 01       	movw	r16, r24
        if(ind < 0)
   1bb9c:	97 fd       	sbrc	r25, 7
   1bb9e:	84 c0       	rjmp	.+264    	; 0x1bca8 <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1bba0:	09 2e       	mov	r0, r25
   1bba2:	00 0c       	add	r0, r0
   1bba4:	aa 0b       	sbc	r26, r26
   1bba6:	bb 0b       	sbc	r27, r27
   1bba8:	bc 01       	movw	r22, r24
   1bbaa:	cd 01       	movw	r24, r26
   1bbac:	68 0d       	add	r22, r8
   1bbae:	79 1d       	adc	r23, r9
   1bbb0:	8a 1d       	adc	r24, r10
   1bbb2:	9b 1d       	adc	r25, r11
   1bbb4:	a3 01       	movw	r20, r6
   1bbb6:	92 01       	movw	r18, r4
   1bbb8:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
   1bbbc:	26 1a       	sub	r2, r22
   1bbbe:	37 0a       	sbc	r3, r23
   1bbc0:	f7 01       	movw	r30, r14
   1bbc2:	e0 0f       	add	r30, r16
   1bbc4:	f1 1f       	adc	r31, r17
   1bbc6:	0d 5f       	subi	r16, 0xFD	; 253
   1bbc8:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1bbca:	c6 01       	movw	r24, r12
   1bbcc:	02 96       	adiw	r24, 0x02	; 2
   1bbce:	82 15       	cp	r24, r2
   1bbd0:	93 05       	cpc	r25, r3
   1bbd2:	84 f4       	brge	.+32     	; 0x1bbf4 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1bbd4:	8f ed       	ldi	r24, 0xDF	; 223
   1bbd6:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1bbd8:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1bbda:	d2 82       	std	Z+2, r13	; 0x02
   1bbdc:	f7 01       	movw	r30, r14
   1bbde:	e0 0f       	add	r30, r16
   1bbe0:	f1 1f       	adc	r31, r17
   1bbe2:	cf 01       	movw	r24, r30
   1bbe4:	8e 19       	sub	r24, r14
   1bbe6:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1bbe8:	29 91       	ld	r18, Y+
   1bbea:	22 23       	and	r18, r18
   1bbec:	09 f4       	brne	.+2      	; 0x1bbf0 <lif_ascii_string_to_e010+0xb0>
   1bbee:	5c c0       	rjmp	.+184    	; 0x1bca8 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1bbf0:	21 93       	st	Z+, r18
   1bbf2:	f7 cf       	rjmp	.-18     	; 0x1bbe2 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1bbf4:	8f ec       	ldi	r24, 0xCF	; 207
   1bbf6:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1bbf8:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1bbfa:	d2 82       	std	Z+2, r13	; 0x02
   1bbfc:	d7 01       	movw	r26, r14
   1bbfe:	a0 0f       	add	r26, r16
   1bc00:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1bc02:	fe 01       	movw	r30, r28
   1bc04:	81 91       	ld	r24, Z+
   1bc06:	81 11       	cpse	r24, r1
   1bc08:	0e c0       	rjmp	.+28     	; 0x1bc26 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1bc0a:	c8 01       	movw	r24, r16
   1bc0c:	01 2e       	mov	r0, r17
   1bc0e:	00 0c       	add	r0, r0
   1bc10:	aa 0b       	sbc	r26, r26
   1bc12:	bb 0b       	sbc	r27, r27
   1bc14:	bc 01       	movw	r22, r24
   1bc16:	cd 01       	movw	r24, r26
   1bc18:	68 0d       	add	r22, r8
   1bc1a:	79 1d       	adc	r23, r9
   1bc1c:	8a 1d       	adc	r24, r10
   1bc1e:	9b 1d       	adc	r25, r11
   1bc20:	61 11       	cpse	r22, r1
   1bc22:	09 c0       	rjmp	.+18     	; 0x1bc36 <lif_ascii_string_to_e010+0xf6>
   1bc24:	21 c0       	rjmp	.+66     	; 0x1bc68 <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1bc26:	02 15       	cp	r16, r2
   1bc28:	13 05       	cpc	r17, r3
   1bc2a:	7c f7       	brge	.-34     	; 0x1bc0a <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1bc2c:	0f 5f       	subi	r16, 0xFF	; 255
   1bc2e:	1f 4f       	sbci	r17, 0xFF	; 255
   1bc30:	8d 93       	st	X+, r24
   1bc32:	ef 01       	movw	r28, r30
   1bc34:	e6 cf       	rjmp	.-52     	; 0x1bc02 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1bc36:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1bc3a:	20 ff       	sbrs	r18, 0
   1bc3c:	33 c0       	rjmp	.+102    	; 0x1bca4 <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1bc3e:	20 e0       	ldi	r18, 0x00	; 0
   1bc40:	31 e0       	ldi	r19, 0x01	; 1
   1bc42:	40 e0       	ldi	r20, 0x00	; 0
   1bc44:	50 e0       	ldi	r21, 0x00	; 0
   1bc46:	0e 94 a5 ec 	call	0x1d94a	; 0x1d94a <__divmodsi4>
   1bc4a:	7f 93       	push	r23
   1bc4c:	6f 93       	push	r22
   1bc4e:	89 e3       	ldi	r24, 0x39	; 57
   1bc50:	99 e3       	ldi	r25, 0x39	; 57
   1bc52:	1f 92       	push	r1
   1bc54:	9f 93       	push	r25
   1bc56:	8f 93       	push	r24
   1bc58:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1bc5c:	0f 90       	pop	r0
   1bc5e:	0f 90       	pop	r0
   1bc60:	0f 90       	pop	r0
   1bc62:	0f 90       	pop	r0
   1bc64:	0f 90       	pop	r0
   1bc66:	1e c0       	rjmp	.+60     	; 0x1bca4 <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1bc68:	fe 01       	movw	r30, r28
   1bc6a:	01 90       	ld	r0, Z+
   1bc6c:	00 20       	and	r0, r0
   1bc6e:	e9 f7       	brne	.-6      	; 0x1bc6a <lif_ascii_string_to_e010+0x12a>
   1bc70:	31 97       	sbiw	r30, 0x01	; 1
   1bc72:	ec 1b       	sub	r30, r28
   1bc74:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1bc76:	d7 01       	movw	r26, r14
   1bc78:	a0 0f       	add	r26, r16
   1bc7a:	b1 1f       	adc	r27, r17
   1bc7c:	8f e6       	ldi	r24, 0x6F	; 111
   1bc7e:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1bc80:	11 96       	adiw	r26, 0x01	; 1
   1bc82:	ec 93       	st	X, r30
   1bc84:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1bc86:	12 96       	adiw	r26, 0x02	; 2
   1bc88:	fc 93       	st	X, r31
   1bc8a:	0d 5f       	subi	r16, 0xFD	; 253
   1bc8c:	1f 4f       	sbci	r17, 0xFF	; 255
   1bc8e:	f7 01       	movw	r30, r14
   1bc90:	e0 0f       	add	r30, r16
   1bc92:	f1 1f       	adc	r31, r17
   1bc94:	cf 01       	movw	r24, r30
   1bc96:	8e 19       	sub	r24, r14
   1bc98:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1bc9a:	29 91       	ld	r18, Y+
   1bc9c:	22 23       	and	r18, r18
   1bc9e:	21 f0       	breq	.+8      	; 0x1bca8 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1bca0:	21 93       	st	Z+, r18
   1bca2:	f8 cf       	rjmp	.-16     	; 0x1bc94 <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1bca4:	8f ef       	ldi	r24, 0xFF	; 255
   1bca6:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1bca8:	cd b7       	in	r28, 0x3d	; 61
   1bcaa:	de b7       	in	r29, 0x3e	; 62
   1bcac:	e2 e1       	ldi	r30, 0x12	; 18
   1bcae:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001bcb2 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1bcb2:	a6 e0       	ldi	r26, 0x06	; 6
   1bcb4:	b3 e0       	ldi	r27, 0x03	; 3
   1bcb6:	ef e5       	ldi	r30, 0x5F	; 95
   1bcb8:	fe ed       	ldi	r31, 0xDE	; 222
   1bcba:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1bcbe:	7c 01       	movw	r14, r24
   1bcc0:	4a 01       	movw	r8, r20
   1bcc2:	5b 01       	movw	r10, r22
   1bcc4:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1bcc6:	60 e7       	ldi	r22, 0x70	; 112
   1bcc8:	78 e0       	ldi	r23, 0x08	; 8
   1bcca:	0e 94 5f ca 	call	0x194be	; 0x194be <lif_open>
   1bcce:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1bcd0:	89 2b       	or	r24, r25
   1bcd2:	09 f4       	brne	.+2      	; 0x1bcd6 <lif_add_ascii_file_as_e010_wrapper+0x24>
   1bcd4:	6b c0       	rjmp	.+214    	; 0x1bdac <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1bcd6:	21 2c       	mov	r2, r1
   1bcd8:	31 2c       	mov	r3, r1
   1bcda:	41 2c       	mov	r4, r1
   1bcdc:	51 2c       	mov	r5, r1
   1bcde:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
   1bce0:	8c e2       	ldi	r24, 0x2C	; 44
   1bce2:	99 e3       	ldi	r25, 0x39	; 57
   1bce4:	9c 01       	movw	r18, r24
   1bce6:	40 e0       	ldi	r20, 0x00	; 0
   1bce8:	cc 5f       	subi	r28, 0xFC	; 252
   1bcea:	dc 4f       	sbci	r29, 0xFC	; 252
   1bcec:	28 83       	st	Y, r18
   1bcee:	39 83       	std	Y+1, r19	; 0x01
   1bcf0:	4a 83       	std	Y+2, r20	; 0x02
   1bcf2:	c4 50       	subi	r28, 0x04	; 4
   1bcf4:	d3 40       	sbci	r29, 0x03	; 3
   1bcf6:	1a c0       	rjmp	.+52     	; 0x1bd2c <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1bcf8:	ce 5f       	subi	r28, 0xFE	; 254
   1bcfa:	dc 4f       	sbci	r29, 0xFC	; 252
   1bcfc:	28 81       	ld	r18, Y
   1bcfe:	39 81       	ldd	r19, Y+1	; 0x01
   1bd00:	c2 50       	subi	r28, 0x02	; 2
   1bd02:	d3 40       	sbci	r29, 0x03	; 3
   1bd04:	c9 01       	movw	r24, r18
   1bd06:	03 2e       	mov	r0, r19
   1bd08:	00 0c       	add	r0, r0
   1bd0a:	aa 0b       	sbc	r26, r26
   1bd0c:	bb 0b       	sbc	r27, r27
   1bd0e:	88 0e       	add	r8, r24
   1bd10:	99 1e       	adc	r9, r25
   1bd12:	aa 1e       	adc	r10, r26
   1bd14:	bb 1e       	adc	r11, r27
        bytes += size;
   1bd16:	48 0e       	add	r4, r24
   1bd18:	59 1e       	adc	r5, r25
   1bd1a:	6a 1e       	adc	r6, r26
   1bd1c:	7b 1e       	adc	r7, r27
        count += size;
   1bd1e:	22 0e       	add	r2, r18
   1bd20:	33 1e       	adc	r3, r19

        if(count > 256)
   1bd22:	31 e0       	ldi	r19, 0x01	; 1
   1bd24:	23 16       	cp	r2, r19
   1bd26:	33 06       	cpc	r3, r19
   1bd28:	0c f0       	brlt	.+2      	; 0x1bd2c <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1bd2a:	45 c0       	rjmp	.+138    	; 0x1bdb6 <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1bd2c:	a6 01       	movw	r20, r12
   1bd2e:	6d ef       	ldi	r22, 0xFD	; 253
   1bd30:	70 e0       	ldi	r23, 0x00	; 0
   1bd32:	ce 01       	movw	r24, r28
   1bd34:	8f 5f       	subi	r24, 0xFF	; 255
   1bd36:	9d 4f       	sbci	r25, 0xFD	; 253
   1bd38:	0e 94 21 7b 	call	0xf642	; 0xf642 <fgets>
   1bd3c:	89 2b       	or	r24, r25
   1bd3e:	09 f4       	brne	.+2      	; 0x1bd42 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1bd40:	58 c0       	rjmp	.+176    	; 0x1bdf2 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1bd42:	ce 01       	movw	r24, r28
   1bd44:	8f 5f       	subi	r24, 0xFF	; 255
   1bd46:	9d 4f       	sbci	r25, 0xFD	; 253
   1bd48:	0e 94 a8 32 	call	0x6550	; 0x6550 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1bd4c:	67 e2       	ldi	r22, 0x27	; 39
   1bd4e:	76 e1       	ldi	r23, 0x16	; 22
   1bd50:	ce 01       	movw	r24, r28
   1bd52:	8f 5f       	subi	r24, 0xFF	; 255
   1bd54:	9d 4f       	sbci	r25, 0xFD	; 253
   1bd56:	0e 94 6f 32 	call	0x64de	; 0x64de <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1bd5a:	9e 01       	movw	r18, r28
   1bd5c:	2f 5f       	subi	r18, 0xFF	; 255
   1bd5e:	3f 4f       	sbci	r19, 0xFF	; 255
   1bd60:	b5 01       	movw	r22, r10
   1bd62:	a4 01       	movw	r20, r8
   1bd64:	ce 01       	movw	r24, r28
   1bd66:	8f 5f       	subi	r24, 0xFF	; 255
   1bd68:	9d 4f       	sbci	r25, 0xFD	; 253
   1bd6a:	ea de       	rcall	.-556    	; 0x1bb40 <lif_ascii_string_to_e010>
   1bd6c:	ce 5f       	subi	r28, 0xFE	; 254
   1bd6e:	dc 4f       	sbci	r29, 0xFC	; 252
   1bd70:	99 83       	std	Y+1, r25	; 0x01
   1bd72:	88 83       	st	Y, r24
   1bd74:	c2 50       	subi	r28, 0x02	; 2
   1bd76:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1bd78:	e1 14       	cp	r14, r1
   1bd7a:	f1 04       	cpc	r15, r1
   1bd7c:	09 f4       	brne	.+2      	; 0x1bd80 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1bd7e:	bc cf       	rjmp	.-136    	; 0x1bcf8 <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1bd80:	8c 01       	movw	r16, r24
   1bd82:	a5 01       	movw	r20, r10
   1bd84:	94 01       	movw	r18, r8
   1bd86:	be 01       	movw	r22, r28
   1bd88:	6f 5f       	subi	r22, 0xFF	; 255
   1bd8a:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd8c:	c7 01       	movw	r24, r14
   1bd8e:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
            if(len < size)
   1bd92:	ce 5f       	subi	r28, 0xFE	; 254
   1bd94:	dc 4f       	sbci	r29, 0xFC	; 252
   1bd96:	08 81       	ld	r16, Y
   1bd98:	19 81       	ldd	r17, Y+1	; 0x01
   1bd9a:	c2 50       	subi	r28, 0x02	; 2
   1bd9c:	d3 40       	sbci	r29, 0x03	; 3
   1bd9e:	80 17       	cp	r24, r16
   1bda0:	91 07       	cpc	r25, r17
   1bda2:	0c f0       	brlt	.+2      	; 0x1bda6 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1bda4:	a9 cf       	rjmp	.-174    	; 0x1bcf8 <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1bda6:	c6 01       	movw	r24, r12
   1bda8:	0e 94 bb 82 	call	0x10576	; 0x10576 <fclose>
                return(-1);
   1bdac:	6f ef       	ldi	r22, 0xFF	; 255
   1bdae:	7f ef       	ldi	r23, 0xFF	; 255
   1bdb0:	8f ef       	ldi	r24, 0xFF	; 255
   1bdb2:	9f ef       	ldi	r25, 0xFF	; 255
   1bdb4:	86 c0       	rjmp	.+268    	; 0x1bec2 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1bdb6:	e1 14       	cp	r14, r1
   1bdb8:	f1 04       	cpc	r15, r1
   1bdba:	c1 f0       	breq	.+48     	; 0x1bdec <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("Wrote: %8ld\r", (long)bytes);
   1bdbc:	7f 92       	push	r7
   1bdbe:	6f 92       	push	r6
   1bdc0:	5f 92       	push	r5
   1bdc2:	4f 92       	push	r4
   1bdc4:	1f 92       	push	r1
   1bdc6:	cb 5f       	subi	r28, 0xFB	; 251
   1bdc8:	dc 4f       	sbci	r29, 0xFC	; 252
   1bdca:	48 81       	ld	r20, Y
   1bdcc:	c5 50       	subi	r28, 0x05	; 5
   1bdce:	d3 40       	sbci	r29, 0x03	; 3
   1bdd0:	4f 93       	push	r20
   1bdd2:	cc 5f       	subi	r28, 0xFC	; 252
   1bdd4:	dc 4f       	sbci	r29, 0xFC	; 252
   1bdd6:	88 81       	ld	r24, Y
   1bdd8:	c4 50       	subi	r28, 0x04	; 4
   1bdda:	d3 40       	sbci	r29, 0x03	; 3
   1bddc:	8f 93       	push	r24
   1bdde:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1bde2:	0f b6       	in	r0, 0x3f	; 63
   1bde4:	f8 94       	cli
   1bde6:	de bf       	out	0x3e, r29	; 62
   1bde8:	0f be       	out	0x3f, r0	; 63
   1bdea:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1bdec:	21 2c       	mov	r2, r1
   1bdee:	31 2c       	mov	r3, r1
   1bdf0:	9d cf       	rjmp	.-198    	; 0x1bd2c <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1bdf2:	c6 01       	movw	r24, r12
   1bdf4:	0e 94 bb 82 	call	0x10576	; 0x10576 <fclose>

    // Write EOF
    str[0] = 0;
   1bdf8:	cf 5f       	subi	r28, 0xFF	; 255
   1bdfa:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdfc:	18 82       	st	Y, r1
   1bdfe:	c1 50       	subi	r28, 0x01	; 1
   1be00:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1be02:	9e 01       	movw	r18, r28
   1be04:	2f 5f       	subi	r18, 0xFF	; 255
   1be06:	3f 4f       	sbci	r19, 0xFF	; 255
   1be08:	b5 01       	movw	r22, r10
   1be0a:	a4 01       	movw	r20, r8
   1be0c:	ce 01       	movw	r24, r28
   1be0e:	8f 5f       	subi	r24, 0xFF	; 255
   1be10:	9d 4f       	sbci	r25, 0xFD	; 253
   1be12:	96 de       	rcall	.-724    	; 0x1bb40 <lif_ascii_string_to_e010>
   1be14:	6c 01       	movw	r12, r24

    if(LIF)
   1be16:	e1 14       	cp	r14, r1
   1be18:	f1 04       	cpc	r15, r1
   1be1a:	b9 f4       	brne	.+46     	; 0x1be4a <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1be1c:	c6 01       	movw	r24, r12
   1be1e:	dd 0c       	add	r13, r13
   1be20:	aa 0b       	sbc	r26, r26
   1be22:	bb 0b       	sbc	r27, r27
   1be24:	48 0e       	add	r4, r24
   1be26:	59 1e       	adc	r5, r25
   1be28:	6a 1e       	adc	r6, r26
   1be2a:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1be2c:	88 0e       	add	r8, r24
   1be2e:	99 1e       	adc	r9, r25
   1be30:	aa 1e       	adc	r10, r26
   1be32:	bb 1e       	adc	r11, r27
   1be34:	ae 01       	movw	r20, r28
   1be36:	4f 5f       	subi	r20, 0xFF	; 255
   1be38:	5f 4f       	sbci	r21, 0xFF	; 255
   1be3a:	c5 01       	movw	r24, r10
   1be3c:	b4 01       	movw	r22, r8
   1be3e:	26 de       	rcall	.-948    	; 0x1ba8c <lif_e010_pad_sector>
   1be40:	6c 01       	movw	r12, r24
    if(LIF)
   1be42:	e1 14       	cp	r14, r1
   1be44:	f1 04       	cpc	r15, r1
   1be46:	f1 f4       	brne	.+60     	; 0x1be84 <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1be48:	3a c0       	rjmp	.+116    	; 0x1bebe <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("Wrote: %8ld\r", (long)bytes);
   1be4a:	7f 92       	push	r7
   1be4c:	6f 92       	push	r6
   1be4e:	5f 92       	push	r5
   1be50:	4f 92       	push	r4
   1be52:	8f e1       	ldi	r24, 0x1F	; 31
   1be54:	99 e3       	ldi	r25, 0x39	; 57
   1be56:	1f 92       	push	r1
   1be58:	9f 93       	push	r25
   1be5a:	8f 93       	push	r24
   1be5c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1be60:	86 01       	movw	r16, r12
   1be62:	a5 01       	movw	r20, r10
   1be64:	94 01       	movw	r18, r8
   1be66:	be 01       	movw	r22, r28
   1be68:	6f 5f       	subi	r22, 0xFF	; 255
   1be6a:	7f 4f       	sbci	r23, 0xFF	; 255
   1be6c:	c7 01       	movw	r24, r14
   1be6e:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
        if(len < size)
   1be72:	0f b6       	in	r0, 0x3f	; 63
   1be74:	f8 94       	cli
   1be76:	de bf       	out	0x3e, r29	; 62
   1be78:	0f be       	out	0x3f, r0	; 63
   1be7a:	cd bf       	out	0x3d, r28	; 61
   1be7c:	8c 15       	cp	r24, r12
   1be7e:	9d 05       	cpc	r25, r13
   1be80:	6c f6       	brge	.-102    	; 0x1be1c <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1be82:	94 cf       	rjmp	.-216    	; 0x1bdac <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1be84:	8c 01       	movw	r16, r24
   1be86:	a5 01       	movw	r20, r10
   1be88:	94 01       	movw	r18, r8
   1be8a:	be 01       	movw	r22, r28
   1be8c:	6f 5f       	subi	r22, 0xFF	; 255
   1be8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1be90:	c7 01       	movw	r24, r14
   1be92:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
        if(len < size)
   1be96:	8c 15       	cp	r24, r12
   1be98:	9d 05       	cpc	r25, r13
   1be9a:	0c f4       	brge	.+2      	; 0x1be9e <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1be9c:	87 cf       	rjmp	.-242    	; 0x1bdac <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("Wrote: %8ld\r",(long)bytes);
   1be9e:	7f 92       	push	r7
   1bea0:	6f 92       	push	r6
   1bea2:	5f 92       	push	r5
   1bea4:	4f 92       	push	r4
   1bea6:	82 e1       	ldi	r24, 0x12	; 18
   1bea8:	99 e3       	ldi	r25, 0x39	; 57
   1beaa:	1f 92       	push	r1
   1beac:	9f 93       	push	r25
   1beae:	8f 93       	push	r24
   1beb0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1beb4:	0f b6       	in	r0, 0x3f	; 63
   1beb6:	f8 94       	cli
   1beb8:	de bf       	out	0x3e, r29	; 62
   1beba:	0f be       	out	0x3f, r0	; 63
   1bebc:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1bebe:	b2 01       	movw	r22, r4
   1bec0:	c3 01       	movw	r24, r6
}
   1bec2:	ca 5f       	subi	r28, 0xFA	; 250
   1bec4:	dc 4f       	sbci	r29, 0xFC	; 252
   1bec6:	e2 e1       	ldi	r30, 0x12	; 18
   1bec8:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001becc <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1becc:	a2 e3       	ldi	r26, 0x32	; 50
   1bece:	b0 e0       	ldi	r27, 0x00	; 0
   1bed0:	ec e6       	ldi	r30, 0x6C	; 108
   1bed2:	ff ed       	ldi	r31, 0xDF	; 223
   1bed4:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1bed8:	6c 01       	movw	r12, r24
   1beda:	1b 01       	movw	r2, r22
   1bedc:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1bede:	fc 01       	movw	r30, r24
   1bee0:	80 81       	ld	r24, Z
   1bee2:	81 11       	cpse	r24, r1
   1bee4:	03 c0       	rjmp	.+6      	; 0x1beec <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1bee6:	8f ed       	ldi	r24, 0xDF	; 223
   1bee8:	98 e3       	ldi	r25, 0x38	; 56
   1beea:	1a c0       	rjmp	.+52     	; 0x1bf20 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1beec:	fb 01       	movw	r30, r22
   1beee:	80 81       	ld	r24, Z
   1bef0:	81 11       	cpse	r24, r1
   1bef2:	03 c0       	rjmp	.+6      	; 0x1befa <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1bef4:	81 eb       	ldi	r24, 0xB1	; 177
   1bef6:	98 e3       	ldi	r25, 0x38	; 56
   1bef8:	13 c0       	rjmp	.+38     	; 0x1bf20 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1befa:	fa 01       	movw	r30, r20
   1befc:	80 81       	ld	r24, Z
   1befe:	81 11       	cpse	r24, r1
   1bf00:	03 c0       	rjmp	.+6      	; 0x1bf08 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1bf02:	82 e8       	ldi	r24, 0x82	; 130
   1bf04:	98 e3       	ldi	r25, 0x38	; 56
   1bf06:	0c c0       	rjmp	.+24     	; 0x1bf20 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1bf08:	be 01       	movw	r22, r28
   1bf0a:	6f 5f       	subi	r22, 0xFF	; 255
   1bf0c:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf0e:	ca 01       	movw	r24, r20
   1bf10:	0e 94 87 ca 	call	0x1950e	; 0x1950e <lif_stat>
   1bf14:	9a ab       	std	Y+50, r25	; 0x32
   1bf16:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1bf18:	89 2b       	or	r24, r25
   1bf1a:	59 f4       	brne	.+22     	; 0x1bf32 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1bf1c:	82 e5       	ldi	r24, 0x52	; 82
   1bf1e:	98 e3       	ldi	r25, 0x38	; 56
   1bf20:	1f 92       	push	r1
   1bf22:	9f 93       	push	r25
   1bf24:	8f 93       	push	r24
   1bf26:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
   1bf2a:	0f 90       	pop	r0
   1bf2c:	0f 90       	pop	r0
   1bf2e:	0f 90       	pop	r0
   1bf30:	fe c0       	rjmp	.+508    	; 0x1c12e <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1bf32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bf36:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bf3a:	92 ff       	sbrs	r25, 2
   1bf3c:	12 c0       	rjmp	.+36     	; 0x1bf62 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1bf3e:	ff 92       	push	r15
   1bf40:	ef 92       	push	r14
   1bf42:	3f 92       	push	r3
   1bf44:	2f 92       	push	r2
   1bf46:	df 92       	push	r13
   1bf48:	cf 92       	push	r12
   1bf4a:	83 e2       	ldi	r24, 0x23	; 35
   1bf4c:	98 e3       	ldi	r25, 0x38	; 56
   1bf4e:	1f 92       	push	r1
   1bf50:	9f 93       	push	r25
   1bf52:	8f 93       	push	r24
   1bf54:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1bf58:	0f b6       	in	r0, 0x3f	; 63
   1bf5a:	f8 94       	cli
   1bf5c:	de bf       	out	0x3e, r29	; 62
   1bf5e:	0f be       	out	0x3f, r0	; 63
   1bf60:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1bf62:	97 01       	movw	r18, r14
   1bf64:	40 e0       	ldi	r20, 0x00	; 0
   1bf66:	50 e0       	ldi	r21, 0x00	; 0
   1bf68:	ba 01       	movw	r22, r20
   1bf6a:	80 e0       	ldi	r24, 0x00	; 0
   1bf6c:	90 e0       	ldi	r25, 0x00	; 0
   1bf6e:	a1 de       	rcall	.-702    	; 0x1bcb2 <lif_add_ascii_file_as_e010_wrapper>
   1bf70:	4b 01       	movw	r8, r22
   1bf72:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1bf74:	47 2e       	mov	r4, r23
   1bf76:	58 2e       	mov	r5, r24
   1bf78:	69 2e       	mov	r6, r25
   1bf7a:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1bf7c:	66 23       	and	r22, r22
   1bf7e:	29 f0       	breq	.+10     	; 0x1bf8a <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1bf80:	9f ef       	ldi	r25, 0xFF	; 255
   1bf82:	49 1a       	sub	r4, r25
   1bf84:	59 0a       	sbc	r5, r25
   1bf86:	69 0a       	sbc	r6, r25
   1bf88:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1bf8a:	63 e7       	ldi	r22, 0x73	; 115
   1bf8c:	78 e0       	ldi	r23, 0x08	; 8
   1bf8e:	c6 01       	movw	r24, r12
   1bf90:	ac da       	rcall	.-2728   	; 0x1b4ea <lif_open_volume>
   1bf92:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1bf94:	00 97       	sbiw	r24, 0x00	; 0
   1bf96:	09 f4       	brne	.+2      	; 0x1bf9a <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1bf98:	ca c0       	rjmp	.+404    	; 0x1c12e <lif_add_ascii_file_as_e010+0x262>
   1bf9a:	b3 01       	movw	r22, r6
   1bf9c:	a2 01       	movw	r20, r4
   1bf9e:	40 d9       	rcall	.-3456   	; 0x1b220 <lif_newdir>
    if(index == -1)
   1bfa0:	3c 01       	movw	r6, r24
   1bfa2:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1bfa4:	a1 f4       	brne	.+40     	; 0x1bfce <lif_add_ascii_file_as_e010+0x102>
   1bfa6:	ff 92       	push	r15
   1bfa8:	ef 92       	push	r14
   1bfaa:	df 92       	push	r13
   1bfac:	cf 92       	push	r12
   1bfae:	83 ef       	ldi	r24, 0xF3	; 243
   1bfb0:	97 e3       	ldi	r25, 0x37	; 55
   1bfb2:	1f 92       	push	r1
   1bfb4:	9f 93       	push	r25
   1bfb6:	8f 93       	push	r24
   1bfb8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bfbc:	c8 01       	movw	r24, r16
   1bfbe:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1bfc2:	0f b6       	in	r0, 0x3f	; 63
   1bfc4:	f8 94       	cli
   1bfc6:	de bf       	out	0x3e, r29	; 62
   1bfc8:	0f be       	out	0x3f, r0	; 63
   1bfca:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1bfcc:	b0 c0       	rjmp	.+352    	; 0x1c12e <lif_add_ascii_file_as_e010+0x262>
   1bfce:	68 01       	movw	r12, r16
   1bfd0:	9f e4       	ldi	r25, 0x4F	; 79
   1bfd2:	c9 0e       	add	r12, r25
   1bfd4:	d1 1c       	adc	r13, r1
   1bfd6:	4a e0       	ldi	r20, 0x0A	; 10
   1bfd8:	50 e0       	ldi	r21, 0x00	; 0
   1bfda:	b1 01       	movw	r22, r2
   1bfdc:	c6 01       	movw	r24, r12
   1bfde:	0e 94 2b cc 	call	0x19856	; 0x19856 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1bfe2:	80 e1       	ldi	r24, 0x10	; 16
   1bfe4:	90 ee       	ldi	r25, 0xE0	; 224
   1bfe6:	f8 01       	movw	r30, r16
   1bfe8:	e6 5a       	subi	r30, 0xA6	; 166
   1bfea:	ff 4f       	sbci	r31, 0xFF	; 255
   1bfec:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1bfee:	80 83       	st	Z, r24
   1bff0:	e9 a9       	ldd	r30, Y+49	; 0x31
   1bff2:	fa a9       	ldd	r31, Y+50	; 0x32
   1bff4:	60 a5       	ldd	r22, Z+40	; 0x28
   1bff6:	71 a5       	ldd	r23, Z+41	; 0x29
   1bff8:	82 a5       	ldd	r24, Z+42	; 0x2a
   1bffa:	93 a5       	ldd	r25, Z+43	; 0x2b
   1bffc:	a8 01       	movw	r20, r16
   1bffe:	4c 59       	subi	r20, 0x9C	; 156
   1c000:	5f 4f       	sbci	r21, 0xFF	; 255
   1c002:	0e 94 70 ce 	call	0x19ce0	; 0x19ce0 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1c006:	81 e0       	ldi	r24, 0x01	; 1
   1c008:	90 e8       	ldi	r25, 0x80	; 128
   1c00a:	f8 01       	movw	r30, r16
   1c00c:	e6 59       	subi	r30, 0x96	; 150
   1c00e:	ff 4f       	sbci	r31, 0xFF	; 255
   1c010:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1c012:	80 83       	st	Z, r24
   1c014:	32 96       	adiw	r30, 0x02	; 2
   1c016:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1c018:	80 82       	st	Z, r8
   1c01a:	80 e0       	ldi	r24, 0x00	; 0
   1c01c:	91 e0       	ldi	r25, 0x01	; 1
   1c01e:	32 96       	adiw	r30, 0x02	; 2
   1c020:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c022:	80 83       	st	Z, r24
   1c024:	58 01       	movw	r10, r16
   1c026:	fc e5       	ldi	r31, 0x5C	; 92
   1c028:	af 0e       	add	r10, r31
   1c02a:	b1 1c       	adc	r11, r1
   1c02c:	f5 01       	movw	r30, r10
   1c02e:	80 81       	ld	r24, Z
   1c030:	91 81       	ldd	r25, Z+1	; 0x01
   1c032:	a2 81       	ldd	r26, Z+2	; 0x02
   1c034:	b3 81       	ldd	r27, Z+3	; 0x03
   1c036:	22 24       	eor	r2, r2
   1c038:	38 2e       	mov	r3, r24
   1c03a:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1c03c:	5a 2e       	mov	r5, r26
   1c03e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c042:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c046:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1c048:	05 c0       	rjmp	.+10     	; 0x1c054 <lif_add_ascii_file_as_e010+0x188>
   1c04a:	69 e2       	ldi	r22, 0x29	; 41
   1c04c:	76 e1       	ldi	r23, 0x16	; 22
   1c04e:	c8 01       	movw	r24, r16
   1c050:	0e 94 5c cf 	call	0x19eb8	; 0x19eb8 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1c054:	97 01       	movw	r18, r14
   1c056:	b2 01       	movw	r22, r4
   1c058:	a1 01       	movw	r20, r2
   1c05a:	c8 01       	movw	r24, r16
   1c05c:	2a de       	rcall	.-940    	; 0x1bcb2 <lif_add_ascii_file_as_e010_wrapper>
   1c05e:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1c060:	7c 01       	movw	r14, r24
   1c062:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c066:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c06a:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1c06c:	40 c0       	rjmp	.+128    	; 0x1c0ee <lif_add_ascii_file_as_e010+0x222>
   1c06e:	8c ec       	ldi	r24, 0xCC	; 204
   1c070:	97 e3       	ldi	r25, 0x37	; 55
   1c072:	1f 92       	push	r1
   1c074:	9f 93       	push	r25
   1c076:	8f 93       	push	r24
   1c078:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1c07c:	df 92       	push	r13
   1c07e:	cf 92       	push	r12
   1c080:	85 eb       	ldi	r24, 0xB5	; 181
   1c082:	97 e3       	ldi	r25, 0x37	; 55
   1c084:	1f 92       	push	r1
   1c086:	9f 93       	push	r25
   1c088:	8f 93       	push	r24
   1c08a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1c08e:	7f 92       	push	r7
   1c090:	6f 92       	push	r6
   1c092:	8e e9       	ldi	r24, 0x9E	; 158
   1c094:	97 e3       	ldi	r25, 0x37	; 55
   1c096:	1f 92       	push	r1
   1c098:	9f 93       	push	r25
   1c09a:	8f 93       	push	r24
   1c09c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1c0a0:	f5 01       	movw	r30, r10
   1c0a2:	83 81       	ldd	r24, Z+3	; 0x03
   1c0a4:	8f 93       	push	r24
   1c0a6:	82 81       	ldd	r24, Z+2	; 0x02
   1c0a8:	8f 93       	push	r24
   1c0aa:	81 81       	ldd	r24, Z+1	; 0x01
   1c0ac:	8f 93       	push	r24
   1c0ae:	80 81       	ld	r24, Z
   1c0b0:	8f 93       	push	r24
   1c0b2:	85 e8       	ldi	r24, 0x85	; 133
   1c0b4:	97 e3       	ldi	r25, 0x37	; 55
   1c0b6:	1f 92       	push	r1
   1c0b8:	9f 93       	push	r25
   1c0ba:	8f 93       	push	r24
   1c0bc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1c0c0:	f8 01       	movw	r30, r16
   1c0c2:	e0 5a       	subi	r30, 0xA0	; 160
   1c0c4:	ff 4f       	sbci	r31, 0xFF	; 255
   1c0c6:	83 81       	ldd	r24, Z+3	; 0x03
   1c0c8:	8f 93       	push	r24
   1c0ca:	82 81       	ldd	r24, Z+2	; 0x02
   1c0cc:	8f 93       	push	r24
   1c0ce:	81 81       	ldd	r24, Z+1	; 0x01
   1c0d0:	8f 93       	push	r24
   1c0d2:	80 81       	ld	r24, Z
   1c0d4:	8f 93       	push	r24
   1c0d6:	8c e6       	ldi	r24, 0x6C	; 108
   1c0d8:	97 e3       	ldi	r25, 0x37	; 55
   1c0da:	1f 92       	push	r1
   1c0dc:	9f 93       	push	r25
   1c0de:	8f 93       	push	r24
   1c0e0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1c0e4:	0f b6       	in	r0, 0x3f	; 63
   1c0e6:	f8 94       	cli
   1c0e8:	de bf       	out	0x3e, r29	; 62
   1c0ea:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1c0ec:	cd bf       	out	0x3d, r28	; 61
   1c0ee:	b3 01       	movw	r22, r6
   1c0f0:	c8 01       	movw	r24, r16
   1c0f2:	0e 94 67 d4 	call	0x1a8ce	; 0x1a8ce <lif_writedirindex>
   1c0f6:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c0f8:	21 f4       	brne	.+8      	; 0x1c102 <lif_add_ascii_file_as_e010+0x236>
   1c0fa:	c8 01       	movw	r24, r16
   1c0fc:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1c100:	16 c0       	rjmp	.+44     	; 0x1c12e <lif_add_ascii_file_as_e010+0x262>
   1c102:	c8 01       	movw	r24, r16
   1c104:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("Wrote: %8ld\n", bytes);
   1c108:	ff 92       	push	r15
   1c10a:	ef 92       	push	r14
   1c10c:	9f 92       	push	r9
   1c10e:	8f 92       	push	r8
   1c110:	8f e5       	ldi	r24, 0x5F	; 95
   1c112:	97 e3       	ldi	r25, 0x37	; 55
   1c114:	1f 92       	push	r1
   1c116:	9f 93       	push	r25
   1c118:	8f 93       	push	r24
   1c11a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    // Return file size
    return(bytes);
   1c11e:	0f b6       	in	r0, 0x3f	; 63
   1c120:	f8 94       	cli
   1c122:	de bf       	out	0x3e, r29	; 62
   1c124:	0f be       	out	0x3f, r0	; 63
   1c126:	cd bf       	out	0x3d, r28	; 61
   1c128:	b4 01       	movw	r22, r8
   1c12a:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1c12c:	04 c0       	rjmp	.+8      	; 0x1c136 <lif_add_ascii_file_as_e010+0x26a>
   1c12e:	6f ef       	ldi	r22, 0xFF	; 255
   1c130:	7f ef       	ldi	r23, 0xFF	; 255
   1c132:	8f ef       	ldi	r24, 0xFF	; 255

    printf("Wrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1c134:	9f ef       	ldi	r25, 0xFF	; 255
   1c136:	e2 96       	adiw	r28, 0x32	; 50
   1c138:	e2 e1       	ldi	r30, 0x12	; 18
   1c13a:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001c13e <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1c13e:	ac e2       	ldi	r26, 0x2C	; 44
   1c140:	b2 e0       	ldi	r27, 0x02	; 2
   1c142:	e5 ea       	ldi	r30, 0xA5	; 165
   1c144:	f0 ee       	ldi	r31, 0xE0	; 224
   1c146:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1c14a:	f8 2e       	mov	r15, r24
   1c14c:	b9 2e       	mov	r11, r25
   1c14e:	16 2f       	mov	r17, r22
   1c150:	07 2f       	mov	r16, r23
   1c152:	c4 5e       	subi	r28, 0xE4	; 228
   1c154:	dd 4f       	sbci	r29, 0xFD	; 253
   1c156:	48 83       	st	Y, r20
   1c158:	cc 51       	subi	r28, 0x1C	; 28
   1c15a:	d2 40       	sbci	r29, 0x02	; 2
   1c15c:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1c15e:	6b e2       	ldi	r22, 0x2B	; 43
   1c160:	77 e0       	ldi	r23, 0x07	; 7
   1c162:	c3 d9       	rcall	.-3194   	; 0x1b4ea <lif_open_volume>
   1c164:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1c166:	00 97       	sbiw	r24, 0x00	; 0
   1c168:	51 f4       	brne	.+20     	; 0x1c17e <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1c16a:	bf 92       	push	r11
   1c16c:	ff 92       	push	r15
   1c16e:	87 e4       	ldi	r24, 0x47	; 71
   1c170:	97 e3       	ldi	r25, 0x37	; 55
   1c172:	1f 92       	push	r1
   1c174:	9f 93       	push	r25
   1c176:	8f 93       	push	r24
   1c178:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1c17c:	11 c0       	rjmp	.+34     	; 0x1c1a0 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1c17e:	61 2f       	mov	r22, r17
   1c180:	70 2f       	mov	r23, r16
   1c182:	20 dc       	rcall	.-1984   	; 0x1b9c4 <lif_find_file>
    if(index == -1)
   1c184:	01 96       	adiw	r24, 0x01	; 1
   1c186:	a1 f4       	brne	.+40     	; 0x1c1b0 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1c188:	0f 93       	push	r16
   1c18a:	1f 93       	push	r17
   1c18c:	80 e3       	ldi	r24, 0x30	; 48
   1c18e:	97 e3       	ldi	r25, 0x37	; 55
   1c190:	1f 92       	push	r1
   1c192:	9f 93       	push	r25
   1c194:	8f 93       	push	r24
   1c196:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c19a:	c6 01       	movw	r24, r12
   1c19c:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1c1a0:	0f 90       	pop	r0
   1c1a2:	0f 90       	pop	r0
   1c1a4:	0f 90       	pop	r0
   1c1a6:	0f 90       	pop	r0
   1c1a8:	0f 90       	pop	r0
   1c1aa:	80 e0       	ldi	r24, 0x00	; 0
   1c1ac:	90 e0       	ldi	r25, 0x00	; 0
   1c1ae:	ae c2       	rjmp	.+1372   	; 0x1c70c <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1c1b0:	f6 01       	movw	r30, r12
   1c1b2:	e6 5a       	subi	r30, 0xA6	; 166
   1c1b4:	ff 4f       	sbci	r31, 0xFF	; 255
   1c1b6:	80 81       	ld	r24, Z
   1c1b8:	91 81       	ldd	r25, Z+1	; 0x01
   1c1ba:	9c 01       	movw	r18, r24
   1c1bc:	2c 7f       	andi	r18, 0xFC	; 252
   1c1be:	20 31       	cpi	r18, 0x10	; 16
   1c1c0:	30 4e       	sbci	r19, 0xE0	; 224
   1c1c2:	c9 f0       	breq	.+50     	; 0x1c1f6 <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1c1c4:	9f 93       	push	r25
   1c1c6:	8f 93       	push	r24
   1c1c8:	ef 92       	push	r14
   1c1ca:	c4 5e       	subi	r28, 0xE4	; 228
   1c1cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1ce:	58 81       	ld	r21, Y
   1c1d0:	cc 51       	subi	r28, 0x1C	; 28
   1c1d2:	d2 40       	sbci	r29, 0x02	; 2
   1c1d4:	5f 93       	push	r21
   1c1d6:	88 ef       	ldi	r24, 0xF8	; 248
   1c1d8:	96 e3       	ldi	r25, 0x36	; 54
   1c1da:	1f 92       	push	r1
   1c1dc:	9f 93       	push	r25
   1c1de:	8f 93       	push	r24
   1c1e0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c1e4:	c6 01       	movw	r24, r12
   1c1e6:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1c1ea:	0f b6       	in	r0, 0x3f	; 63
   1c1ec:	f8 94       	cli
   1c1ee:	de bf       	out	0x3e, r29	; 62
   1c1f0:	0f be       	out	0x3f, r0	; 63
   1c1f2:	cd bf       	out	0x3d, r28	; 61
   1c1f4:	da cf       	rjmp	.-76     	; 0x1c1aa <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1c1f6:	f6 01       	movw	r30, r12
   1c1f8:	e4 5a       	subi	r30, 0xA4	; 164
   1c1fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1c1fc:	80 80       	ld	r8, Z
   1c1fe:	91 80       	ldd	r9, Z+1	; 0x01
   1c200:	a2 80       	ldd	r10, Z+2	; 0x02
   1c202:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1c204:	34 96       	adiw	r30, 0x04	; 4
   1c206:	80 81       	ld	r24, Z
   1c208:	91 81       	ldd	r25, Z+1	; 0x01
   1c20a:	a2 81       	ldd	r26, Z+2	; 0x02
   1c20c:	b3 81       	ldd	r27, Z+3	; 0x03
   1c20e:	a5 01       	movw	r20, r10
   1c210:	94 01       	movw	r18, r8
   1c212:	28 0f       	add	r18, r24
   1c214:	39 1f       	adc	r19, r25
   1c216:	4a 1f       	adc	r20, r26
   1c218:	5b 1f       	adc	r21, r27
   1c21a:	c9 5d       	subi	r28, 0xD9	; 217
   1c21c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c21e:	28 83       	st	Y, r18
   1c220:	39 83       	std	Y+1, r19	; 0x01
   1c222:	4a 83       	std	Y+2, r20	; 0x02
   1c224:	5b 83       	std	Y+3, r21	; 0x03
   1c226:	c7 52       	subi	r28, 0x27	; 39
   1c228:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1c22a:	c6 01       	movw	r24, r12
   1c22c:	8c 59       	subi	r24, 0x9C	; 156
   1c22e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c230:	0e 94 b2 ce 	call	0x19d64	; 0x19d64 <lif_lifbcd2time>
   1c234:	c3 5e       	subi	r28, 0xE3	; 227
   1c236:	dd 4f       	sbci	r29, 0xFD	; 253
   1c238:	68 83       	st	Y, r22
   1c23a:	79 83       	std	Y+1, r23	; 0x01
   1c23c:	8a 83       	std	Y+2, r24	; 0x02
   1c23e:	9b 83       	std	Y+3, r25	; 0x03
   1c240:	cd 51       	subi	r28, 0x1D	; 29
   1c242:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1c244:	ba 2d       	mov	r27, r10
   1c246:	a9 2d       	mov	r26, r9
   1c248:	98 2d       	mov	r25, r8
   1c24a:	88 27       	eor	r24, r24
   1c24c:	cf 5e       	subi	r28, 0xEF	; 239
   1c24e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c250:	88 83       	st	Y, r24
   1c252:	99 83       	std	Y+1, r25	; 0x01
   1c254:	aa 83       	std	Y+2, r26	; 0x02
   1c256:	bb 83       	std	Y+3, r27	; 0x03
   1c258:	c1 51       	subi	r28, 0x11	; 17
   1c25a:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1c25c:	6e e7       	ldi	r22, 0x7E	; 126
   1c25e:	78 e0       	ldi	r23, 0x08	; 8
   1c260:	c4 5e       	subi	r28, 0xE4	; 228
   1c262:	dd 4f       	sbci	r29, 0xFD	; 253
   1c264:	88 81       	ld	r24, Y
   1c266:	cc 51       	subi	r28, 0x1C	; 28
   1c268:	d2 40       	sbci	r29, 0x02	; 2
   1c26a:	9e 2d       	mov	r25, r14
   1c26c:	0e 94 5f ca 	call	0x194be	; 0x194be <lif_open>
   1c270:	c6 5e       	subi	r28, 0xE6	; 230
   1c272:	dd 4f       	sbci	r29, 0xFD	; 253
   1c274:	99 83       	std	Y+1, r25	; 0x01
   1c276:	88 83       	st	Y, r24
   1c278:	ca 51       	subi	r28, 0x1A	; 26
   1c27a:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1c27c:	89 2b       	or	r24, r25
   1c27e:	21 f4       	brne	.+8      	; 0x1c288 <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c280:	c6 01       	movw	r24, r12
   1c282:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1c286:	91 cf       	rjmp	.-222    	; 0x1c1aa <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1c288:	ef 92       	push	r14
   1c28a:	c4 5e       	subi	r28, 0xE4	; 228
   1c28c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c28e:	98 81       	ld	r25, Y
   1c290:	cc 51       	subi	r28, 0x1C	; 28
   1c292:	d2 40       	sbci	r29, 0x02	; 2
   1c294:	9f 93       	push	r25
   1c296:	88 ee       	ldi	r24, 0xE8	; 232
   1c298:	96 e3       	ldi	r25, 0x36	; 54
   1c29a:	1f 92       	push	r1
   1c29c:	9f 93       	push	r25
   1c29e:	8f 93       	push	r24
   1c2a0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1c2a4:	0f 90       	pop	r0
   1c2a6:	0f 90       	pop	r0
   1c2a8:	0f 90       	pop	r0
   1c2aa:	0f 90       	pop	r0
   1c2ac:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1c2ae:	81 2c       	mov	r8, r1
   1c2b0:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1c2b2:	c8 5e       	subi	r28, 0xE8	; 232
   1c2b4:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2b6:	19 82       	std	Y+1, r1	; 0x01
   1c2b8:	18 82       	st	Y, r1
   1c2ba:	c8 51       	subi	r28, 0x18	; 24
   1c2bc:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1c2be:	a1 e0       	ldi	r26, 0x01	; 1
   1c2c0:	cb 5e       	subi	r28, 0xEB	; 235
   1c2c2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2c4:	a8 83       	st	Y, r26
   1c2c6:	c5 51       	subi	r28, 0x15	; 21
   1c2c8:	d2 40       	sbci	r29, 0x02	; 2
   1c2ca:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1c2cc:	41 2c       	mov	r4, r1
   1c2ce:	51 2c       	mov	r5, r1
   1c2d0:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("Wrote: %8ld\r", bytes);
   1c2d2:	88 e2       	ldi	r24, 0x28	; 40
   1c2d4:	96 e3       	ldi	r25, 0x36	; 54
   1c2d6:	9c 01       	movw	r18, r24
   1c2d8:	40 e0       	ldi	r20, 0x00	; 0
   1c2da:	cf 5d       	subi	r28, 0xDF	; 223
   1c2dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2de:	28 83       	st	Y, r18
   1c2e0:	39 83       	std	Y+1, r19	; 0x01
   1c2e2:	4a 83       	std	Y+2, r20	; 0x02
   1c2e4:	c1 52       	subi	r28, 0x21	; 33
   1c2e6:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1c2e8:	85 e3       	ldi	r24, 0x35	; 53
   1c2ea:	96 e3       	ldi	r25, 0x36	; 54
   1c2ec:	9c 01       	movw	r18, r24
   1c2ee:	40 e0       	ldi	r20, 0x00	; 0
   1c2f0:	cc 5d       	subi	r28, 0xDC	; 220
   1c2f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2f4:	28 83       	st	Y, r18
   1c2f6:	39 83       	std	Y+1, r19	; 0x01
   1c2f8:	4a 83       	std	Y+2, r20	; 0x02
   1c2fa:	c4 52       	subi	r28, 0x24	; 36
   1c2fc:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1c2fe:	cf 5e       	subi	r28, 0xEF	; 239
   1c300:	dd 4f       	sbci	r29, 0xFD	; 253
   1c302:	28 81       	ld	r18, Y
   1c304:	39 81       	ldd	r19, Y+1	; 0x01
   1c306:	4a 81       	ldd	r20, Y+2	; 0x02
   1c308:	5b 81       	ldd	r21, Y+3	; 0x03
   1c30a:	c1 51       	subi	r28, 0x11	; 17
   1c30c:	d2 40       	sbci	r29, 0x02	; 2
   1c30e:	bb 27       	eor	r27, r27
   1c310:	a5 2f       	mov	r26, r21
   1c312:	94 2f       	mov	r25, r20
   1c314:	83 2f       	mov	r24, r19
   1c316:	c9 5d       	subi	r28, 0xD9	; 217
   1c318:	dd 4f       	sbci	r29, 0xFD	; 253
   1c31a:	28 81       	ld	r18, Y
   1c31c:	39 81       	ldd	r19, Y+1	; 0x01
   1c31e:	4a 81       	ldd	r20, Y+2	; 0x02
   1c320:	5b 81       	ldd	r21, Y+3	; 0x03
   1c322:	c7 52       	subi	r28, 0x27	; 39
   1c324:	d2 40       	sbci	r29, 0x02	; 2
   1c326:	28 17       	cp	r18, r24
   1c328:	39 07       	cpc	r19, r25
   1c32a:	4a 07       	cpc	r20, r26
   1c32c:	5b 07       	cpc	r21, r27
   1c32e:	08 f4       	brcc	.+2      	; 0x1c332 <lif_extract_e010_as_ascii+0x1f4>
   1c330:	76 c1       	rjmp	.+748    	; 0x1c61e <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1c332:	00 e0       	ldi	r16, 0x00	; 0
   1c334:	11 e0       	ldi	r17, 0x01	; 1
   1c336:	cf 5e       	subi	r28, 0xEF	; 239
   1c338:	dd 4f       	sbci	r29, 0xFD	; 253
   1c33a:	28 81       	ld	r18, Y
   1c33c:	39 81       	ldd	r19, Y+1	; 0x01
   1c33e:	4a 81       	ldd	r20, Y+2	; 0x02
   1c340:	5b 81       	ldd	r21, Y+3	; 0x03
   1c342:	c1 51       	subi	r28, 0x11	; 17
   1c344:	d2 40       	sbci	r29, 0x02	; 2
   1c346:	be 01       	movw	r22, r28
   1c348:	6b 5f       	subi	r22, 0xFB	; 251
   1c34a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c34c:	c6 01       	movw	r24, r12
   1c34e:	0e 94 e5 ca 	call	0x195ca	; 0x195ca <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1c352:	6f 3f       	cpi	r22, 0xFF	; 255
   1c354:	71 05       	cpc	r23, r1
   1c356:	09 f0       	breq	.+2      	; 0x1c35a <lif_extract_e010_as_ascii+0x21c>
   1c358:	0c f4       	brge	.+2      	; 0x1c35c <lif_extract_e010_as_ascii+0x21e>
   1c35a:	5b c1       	rjmp	.+694    	; 0x1c612 <lif_extract_e010_as_ascii+0x4d4>
   1c35c:	00 e0       	ldi	r16, 0x00	; 0
   1c35e:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1c360:	c8 5e       	subi	r28, 0xE8	; 232
   1c362:	dd 4f       	sbci	r29, 0xFD	; 253
   1c364:	a8 81       	ld	r26, Y
   1c366:	b9 81       	ldd	r27, Y+1	; 0x01
   1c368:	c8 51       	subi	r28, 0x18	; 24
   1c36a:	d2 40       	sbci	r29, 0x02	; 2
   1c36c:	ab 2b       	or	r26, r27
   1c36e:	09 f0       	breq	.+2      	; 0x1c372 <lif_extract_e010_as_ascii+0x234>
   1c370:	3c c1       	rjmp	.+632    	; 0x1c5ea <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1c372:	e5 e0       	ldi	r30, 0x05	; 5
   1c374:	f1 e0       	ldi	r31, 0x01	; 1
   1c376:	ec 0f       	add	r30, r28
   1c378:	fd 1f       	adc	r31, r29
   1c37a:	e0 0f       	add	r30, r16
   1c37c:	f1 1f       	adc	r31, r17
   1c37e:	80 81       	ld	r24, Z
   1c380:	98 2f       	mov	r25, r24
   1c382:	9f 7e       	andi	r25, 0xEF	; 239
   1c384:	9f 3c       	cpi	r25, 0xCF	; 207
   1c386:	11 f0       	breq	.+4      	; 0x1c38c <lif_extract_e010_as_ascii+0x24e>
   1c388:	8f 36       	cpi	r24, 0x6F	; 111
   1c38a:	d9 f5       	brne	.+118    	; 0x1c402 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1c38c:	e5 e0       	ldi	r30, 0x05	; 5
   1c38e:	f1 e0       	ldi	r31, 0x01	; 1
   1c390:	ec 0f       	add	r30, r28
   1c392:	fd 1f       	adc	r31, r29
   1c394:	e0 0f       	add	r30, r16
   1c396:	f1 1f       	adc	r31, r17
   1c398:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1c39a:	f8 01       	movw	r30, r16
   1c39c:	32 96       	adiw	r30, 0x02	; 2
   1c39e:	45 e0       	ldi	r20, 0x05	; 5
   1c3a0:	51 e0       	ldi	r21, 0x01	; 1
   1c3a2:	4c 0f       	add	r20, r28
   1c3a4:	5d 1f       	adc	r21, r29
   1c3a6:	e4 0f       	add	r30, r20
   1c3a8:	f5 1f       	adc	r31, r21
   1c3aa:	0d 5f       	subi	r16, 0xFD	; 253
   1c3ac:	1f 4f       	sbci	r17, 0xFF	; 255
   1c3ae:	80 81       	ld	r24, Z
   1c3b0:	31 2c       	mov	r3, r1
   1c3b2:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1c3b4:	21 14       	cp	r2, r1
   1c3b6:	31 04       	cpc	r3, r1
   1c3b8:	09 f4       	brne	.+2      	; 0x1c3bc <lif_extract_e010_as_ascii+0x27e>
   1c3ba:	0f c1       	rjmp	.+542    	; 0x1c5da <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1c3bc:	5f ef       	ldi	r21, 0xFF	; 255
   1c3be:	25 16       	cp	r2, r21
   1c3c0:	31 04       	cpc	r3, r1
   1c3c2:	09 f0       	breq	.+2      	; 0x1c3c6 <lif_extract_e010_as_ascii+0x288>
   1c3c4:	7c f4       	brge	.+30     	; 0x1c3e4 <lif_extract_e010_as_ascii+0x2a6>
   1c3c6:	ca 5e       	subi	r28, 0xEA	; 234
   1c3c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1c3ca:	19 82       	std	Y+1, r1	; 0x01
   1c3cc:	18 82       	st	Y, r1
   1c3ce:	c6 51       	subi	r28, 0x16	; 22
   1c3d0:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1c3d2:	c1 01       	movw	r24, r2
   1c3d4:	01 97       	sbiw	r24, 0x01	; 1
   1c3d6:	c5 5d       	subi	r28, 0xD5	; 213
   1c3d8:	dd 4f       	sbci	r29, 0xFD	; 253
   1c3da:	99 83       	std	Y+1, r25	; 0x01
   1c3dc:	88 83       	st	Y, r24
   1c3de:	cb 52       	subi	r28, 0x2B	; 43
   1c3e0:	d2 40       	sbci	r29, 0x02	; 2
   1c3e2:	7b c0       	rjmp	.+246    	; 0x1c4da <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1c3e4:	3f 92       	push	r3
   1c3e6:	2f 92       	push	r2
   1c3e8:	83 eb       	ldi	r24, 0xB3	; 179
   1c3ea:	96 e3       	ldi	r25, 0x36	; 54
   1c3ec:	1f 92       	push	r1
   1c3ee:	9f 93       	push	r25
   1c3f0:	8f 93       	push	r24
   1c3f2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1c3f6:	0f 90       	pop	r0
   1c3f8:	0f 90       	pop	r0
   1c3fa:	0f 90       	pop	r0
   1c3fc:	0f 90       	pop	r0
   1c3fe:	0f 90       	pop	r0
   1c400:	2b c0       	rjmp	.+86     	; 0x1c458 <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1c402:	8f 3e       	cpi	r24, 0xEF	; 239
   1c404:	09 f4       	brne	.+2      	; 0x1c408 <lif_extract_e010_as_ascii+0x2ca>
   1c406:	f1 c0       	rjmp	.+482    	; 0x1c5ea <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1c408:	1f 93       	push	r17
   1c40a:	0f 93       	push	r16
   1c40c:	cc 5e       	subi	r28, 0xEC	; 236
   1c40e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c410:	b8 81       	ld	r27, Y
   1c412:	c4 51       	subi	r28, 0x14	; 20
   1c414:	d2 40       	sbci	r29, 0x02	; 2
   1c416:	bf 93       	push	r27
   1c418:	cd 5e       	subi	r28, 0xED	; 237
   1c41a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c41c:	28 81       	ld	r18, Y
   1c41e:	c3 51       	subi	r28, 0x13	; 19
   1c420:	d2 40       	sbci	r29, 0x02	; 2
   1c422:	2f 93       	push	r18
   1c424:	ce 5e       	subi	r28, 0xEE	; 238
   1c426:	dd 4f       	sbci	r29, 0xFD	; 253
   1c428:	38 81       	ld	r19, Y
   1c42a:	c2 51       	subi	r28, 0x12	; 18
   1c42c:	d2 40       	sbci	r29, 0x02	; 2
   1c42e:	3f 93       	push	r19
   1c430:	cf 5e       	subi	r28, 0xEF	; 239
   1c432:	dd 4f       	sbci	r29, 0xFD	; 253
   1c434:	48 81       	ld	r20, Y
   1c436:	c1 51       	subi	r28, 0x11	; 17
   1c438:	d2 40       	sbci	r29, 0x02	; 2
   1c43a:	4f 93       	push	r20
   1c43c:	1f 92       	push	r1
   1c43e:	8f 93       	push	r24
   1c440:	8d e5       	ldi	r24, 0x5D	; 93
   1c442:	96 e3       	ldi	r25, 0x36	; 54
   1c444:	1f 92       	push	r1
   1c446:	9f 93       	push	r25
   1c448:	8f 93       	push	r24
   1c44a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                status = 0;
                done = 1;
                break;
   1c44e:	0f b6       	in	r0, 0x3f	; 63
   1c450:	f8 94       	cli
   1c452:	de bf       	out	0x3e, r29	; 62
   1c454:	0f be       	out	0x3f, r0	; 63
   1c456:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1c458:	a1 e0       	ldi	r26, 0x01	; 1
   1c45a:	b0 e0       	ldi	r27, 0x00	; 0
   1c45c:	c8 5e       	subi	r28, 0xE8	; 232
   1c45e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c460:	b9 83       	std	Y+1, r27	; 0x01
   1c462:	a8 83       	st	Y, r26
   1c464:	c8 51       	subi	r28, 0x18	; 24
   1c466:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1c468:	cb 5e       	subi	r28, 0xEB	; 235
   1c46a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c46c:	18 82       	st	Y, r1
   1c46e:	c5 51       	subi	r28, 0x15	; 21
   1c470:	d2 40       	sbci	r29, 0x02	; 2
   1c472:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1c474:	ba c0       	rjmp	.+372    	; 0x1c5ea <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1c476:	0f 3f       	cpi	r16, 0xFF	; 255
   1c478:	11 05       	cpc	r17, r1
   1c47a:	11 f0       	breq	.+4      	; 0x1c480 <lif_extract_e010_as_ascii+0x342>
   1c47c:	0c f0       	brlt	.+2      	; 0x1c480 <lif_extract_e010_as_ascii+0x342>
   1c47e:	b5 c0       	rjmp	.+362    	; 0x1c5ea <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1c480:	e5 e0       	ldi	r30, 0x05	; 5
   1c482:	f1 e0       	ldi	r31, 0x01	; 1
   1c484:	ec 0f       	add	r30, r28
   1c486:	fd 1f       	adc	r31, r29
   1c488:	e0 0f       	add	r30, r16
   1c48a:	f1 1f       	adc	r31, r17
   1c48c:	20 81       	ld	r18, Z
   1c48e:	a4 01       	movw	r20, r8
   1c490:	4f 5f       	subi	r20, 0xFF	; 255
   1c492:	5f 4f       	sbci	r21, 0xFF	; 255
   1c494:	5a 01       	movw	r10, r20
   1c496:	2d 30       	cpi	r18, 0x0D	; 13
   1c498:	51 f1       	breq	.+84     	; 0x1c4ee <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1c49a:	9a 2d       	mov	r25, r10
   1c49c:	8b 2d       	mov	r24, r11
   1c49e:	0f 5f       	subi	r16, 0xFF	; 255
   1c4a0:	1f 4f       	sbci	r17, 0xFF	; 255
   1c4a2:	e1 e0       	ldi	r30, 0x01	; 1
   1c4a4:	f0 e0       	ldi	r31, 0x00	; 0
   1c4a6:	ec 0f       	add	r30, r28
   1c4a8:	fd 1f       	adc	r31, r29
   1c4aa:	e8 0d       	add	r30, r8
   1c4ac:	f9 1d       	adc	r31, r9
   1c4ae:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1c4b0:	2f ef       	ldi	r18, 0xFF	; 255
   1c4b2:	a2 16       	cp	r10, r18
   1c4b4:	b1 04       	cpc	r11, r1
   1c4b6:	09 f0       	breq	.+2      	; 0x1c4ba <lif_extract_e010_as_ascii+0x37c>
   1c4b8:	ac f5       	brge	.+106    	; 0x1c524 <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1c4ba:	ca 5e       	subi	r28, 0xEA	; 234
   1c4bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c4be:	48 81       	ld	r20, Y
   1c4c0:	59 81       	ldd	r21, Y+1	; 0x01
   1c4c2:	c6 51       	subi	r28, 0x16	; 22
   1c4c4:	d2 40       	sbci	r29, 0x02	; 2
   1c4c6:	4f 5f       	subi	r20, 0xFF	; 255
   1c4c8:	5f 4f       	sbci	r21, 0xFF	; 255
   1c4ca:	ca 5e       	subi	r28, 0xEA	; 234
   1c4cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c4ce:	59 83       	std	Y+1, r21	; 0x01
   1c4d0:	48 83       	st	Y, r20
   1c4d2:	c6 51       	subi	r28, 0x16	; 22
   1c4d4:	d2 40       	sbci	r29, 0x02	; 2
   1c4d6:	89 2e       	mov	r8, r25
   1c4d8:	98 2e       	mov	r9, r24
   1c4da:	ca 5e       	subi	r28, 0xEA	; 234
   1c4dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c4de:	88 81       	ld	r24, Y
   1c4e0:	99 81       	ldd	r25, Y+1	; 0x01
   1c4e2:	c6 51       	subi	r28, 0x16	; 22
   1c4e4:	d2 40       	sbci	r29, 0x02	; 2
   1c4e6:	82 15       	cp	r24, r2
   1c4e8:	93 05       	cpc	r25, r3
   1c4ea:	2c f2       	brlt	.-118    	; 0x1c476 <lif_extract_e010_as_ascii+0x338>
   1c4ec:	70 c0       	rjmp	.+224    	; 0x1c5ce <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1c4ee:	ca 5e       	subi	r28, 0xEA	; 234
   1c4f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c4f2:	88 81       	ld	r24, Y
   1c4f4:	99 81       	ldd	r25, Y+1	; 0x01
   1c4f6:	c6 51       	subi	r28, 0x16	; 22
   1c4f8:	d2 40       	sbci	r29, 0x02	; 2
   1c4fa:	c5 5d       	subi	r28, 0xD5	; 213
   1c4fc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c4fe:	a8 81       	ld	r26, Y
   1c500:	b9 81       	ldd	r27, Y+1	; 0x01
   1c502:	cb 52       	subi	r28, 0x2B	; 43
   1c504:	d2 40       	sbci	r29, 0x02	; 2
   1c506:	8a 17       	cp	r24, r26
   1c508:	9b 07       	cpc	r25, r27
   1c50a:	39 f6       	brne	.-114    	; 0x1c49a <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1c50c:	e1 e0       	ldi	r30, 0x01	; 1
   1c50e:	f0 e0       	ldi	r31, 0x00	; 0
   1c510:	ec 0f       	add	r30, r28
   1c512:	fd 1f       	adc	r31, r29
   1c514:	e8 0d       	add	r30, r8
   1c516:	f9 1d       	adc	r31, r9
   1c518:	ba e0       	ldi	r27, 0x0A	; 10
   1c51a:	b0 83       	st	Z, r27
                    ++ind;
   1c51c:	0f 5f       	subi	r16, 0xFF	; 255
   1c51e:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1c520:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1c522:	55 c0       	rjmp	.+170    	; 0x1c5ce <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1c524:	c6 5e       	subi	r28, 0xE6	; 230
   1c526:	dd 4f       	sbci	r29, 0xFD	; 253
   1c528:	28 81       	ld	r18, Y
   1c52a:	39 81       	ldd	r19, Y+1	; 0x01
   1c52c:	ca 51       	subi	r28, 0x1A	; 26
   1c52e:	d2 40       	sbci	r29, 0x02	; 2
   1c530:	a5 01       	movw	r20, r10
   1c532:	61 e0       	ldi	r22, 0x01	; 1
   1c534:	70 e0       	ldi	r23, 0x00	; 0
   1c536:	ce 01       	movw	r24, r28
   1c538:	01 96       	adiw	r24, 0x01	; 1
   1c53a:	0e 94 39 82 	call	0x10472	; 0x10472 <fwrite>
                    if(size < wind)
   1c53e:	8a 15       	cp	r24, r10
   1c540:	9b 05       	cpc	r25, r11
   1c542:	14 f5       	brge	.+68     	; 0x1c588 <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1c544:	1f 92       	push	r1
   1c546:	cb 5d       	subi	r28, 0xDB	; 219
   1c548:	dd 4f       	sbci	r29, 0xFD	; 253
   1c54a:	38 81       	ld	r19, Y
   1c54c:	c5 52       	subi	r28, 0x25	; 37
   1c54e:	d2 40       	sbci	r29, 0x02	; 2
   1c550:	3f 93       	push	r19
   1c552:	cc 5d       	subi	r28, 0xDC	; 220
   1c554:	dd 4f       	sbci	r29, 0xFD	; 253
   1c556:	48 81       	ld	r20, Y
   1c558:	c4 52       	subi	r28, 0x24	; 36
   1c55a:	d2 40       	sbci	r29, 0x02	; 2
   1c55c:	4f 93       	push	r20
   1c55e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1c562:	0f 90       	pop	r0
   1c564:	0f 90       	pop	r0
   1c566:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1c568:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1c56a:	81 e0       	ldi	r24, 0x01	; 1
   1c56c:	90 e0       	ldi	r25, 0x00	; 0
   1c56e:	c8 5e       	subi	r28, 0xE8	; 232
   1c570:	dd 4f       	sbci	r29, 0xFD	; 253
   1c572:	99 83       	std	Y+1, r25	; 0x01
   1c574:	88 83       	st	Y, r24
   1c576:	c8 51       	subi	r28, 0x18	; 24
   1c578:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1c57a:	cb 5e       	subi	r28, 0xEB	; 235
   1c57c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c57e:	18 82       	st	Y, r1
   1c580:	c5 51       	subi	r28, 0x15	; 21
   1c582:	d2 40       	sbci	r29, 0x02	; 2
   1c584:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1c586:	23 c0       	rjmp	.+70     	; 0x1c5ce <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1c588:	09 2e       	mov	r0, r25
   1c58a:	00 0c       	add	r0, r0
   1c58c:	aa 0b       	sbc	r26, r26
   1c58e:	bb 0b       	sbc	r27, r27
   1c590:	48 0e       	add	r4, r24
   1c592:	59 1e       	adc	r5, r25
   1c594:	6a 1e       	adc	r6, r26
   1c596:	7b 1e       	adc	r7, r27
                    printf("Wrote: %8ld\r", bytes);
   1c598:	7f 92       	push	r7
   1c59a:	6f 92       	push	r6
   1c59c:	5f 92       	push	r5
   1c59e:	4f 92       	push	r4
   1c5a0:	1f 92       	push	r1
   1c5a2:	ce 5d       	subi	r28, 0xDE	; 222
   1c5a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1c5a6:	98 81       	ld	r25, Y
   1c5a8:	c2 52       	subi	r28, 0x22	; 34
   1c5aa:	d2 40       	sbci	r29, 0x02	; 2
   1c5ac:	9f 93       	push	r25
   1c5ae:	cf 5d       	subi	r28, 0xDF	; 223
   1c5b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c5b2:	a8 81       	ld	r26, Y
   1c5b4:	c1 52       	subi	r28, 0x21	; 33
   1c5b6:	d2 40       	sbci	r29, 0x02	; 2
   1c5b8:	af 93       	push	r26
   1c5ba:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1c5be:	0f b6       	in	r0, 0x3f	; 63
   1c5c0:	f8 94       	cli
   1c5c2:	de bf       	out	0x3e, r29	; 62
   1c5c4:	0f be       	out	0x3f, r0	; 63
   1c5c6:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1c5c8:	90 e0       	ldi	r25, 0x00	; 0
   1c5ca:	80 e0       	ldi	r24, 0x00	; 0
   1c5cc:	76 cf       	rjmp	.-276    	; 0x1c4ba <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1c5ce:	0f 3f       	cpi	r16, 0xFF	; 255
   1c5d0:	11 05       	cpc	r17, r1
   1c5d2:	09 f0       	breq	.+2      	; 0x1c5d6 <lif_extract_e010_as_ascii+0x498>
   1c5d4:	0c f4       	brge	.+2      	; 0x1c5d8 <lif_extract_e010_as_ascii+0x49a>
   1c5d6:	c4 ce       	rjmp	.-632    	; 0x1c360 <lif_extract_e010_as_ascii+0x222>
   1c5d8:	08 c0       	rjmp	.+16     	; 0x1c5ea <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1c5da:	21 e0       	ldi	r18, 0x01	; 1
   1c5dc:	30 e0       	ldi	r19, 0x00	; 0
   1c5de:	c8 5e       	subi	r28, 0xE8	; 232
   1c5e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c5e2:	39 83       	std	Y+1, r19	; 0x01
   1c5e4:	28 83       	st	Y, r18
   1c5e6:	c8 51       	subi	r28, 0x18	; 24
   1c5e8:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1c5ea:	cf 5e       	subi	r28, 0xEF	; 239
   1c5ec:	dd 4f       	sbci	r29, 0xFD	; 253
   1c5ee:	88 81       	ld	r24, Y
   1c5f0:	99 81       	ldd	r25, Y+1	; 0x01
   1c5f2:	aa 81       	ldd	r26, Y+2	; 0x02
   1c5f4:	bb 81       	ldd	r27, Y+3	; 0x03
   1c5f6:	c1 51       	subi	r28, 0x11	; 17
   1c5f8:	d2 40       	sbci	r29, 0x02	; 2
   1c5fa:	9f 5f       	subi	r25, 0xFF	; 255
   1c5fc:	af 4f       	sbci	r26, 0xFF	; 255
   1c5fe:	bf 4f       	sbci	r27, 0xFF	; 255
   1c600:	cf 5e       	subi	r28, 0xEF	; 239
   1c602:	dd 4f       	sbci	r29, 0xFD	; 253
   1c604:	88 83       	st	Y, r24
   1c606:	99 83       	std	Y+1, r25	; 0x01
   1c608:	aa 83       	std	Y+2, r26	; 0x02
   1c60a:	bb 83       	std	Y+3, r27	; 0x03
   1c60c:	c1 51       	subi	r28, 0x11	; 17
   1c60e:	d2 40       	sbci	r29, 0x02	; 2
   1c610:	76 ce       	rjmp	.-788    	; 0x1c2fe <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1c612:	cb 5e       	subi	r28, 0xEB	; 235
   1c614:	dd 4f       	sbci	r29, 0xFD	; 253
   1c616:	18 82       	st	Y, r1
   1c618:	c5 51       	subi	r28, 0x15	; 21
   1c61a:	d2 40       	sbci	r29, 0x02	; 2
   1c61c:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c61e:	c6 01       	movw	r24, r12
   1c620:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1c624:	81 14       	cp	r8, r1
   1c626:	91 04       	cpc	r9, r1
   1c628:	51 f1       	breq	.+84     	; 0x1c67e <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1c62a:	c6 5e       	subi	r28, 0xE6	; 230
   1c62c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c62e:	28 81       	ld	r18, Y
   1c630:	39 81       	ldd	r19, Y+1	; 0x01
   1c632:	ca 51       	subi	r28, 0x1A	; 26
   1c634:	d2 40       	sbci	r29, 0x02	; 2
   1c636:	a4 01       	movw	r20, r8
   1c638:	61 e0       	ldi	r22, 0x01	; 1
   1c63a:	70 e0       	ldi	r23, 0x00	; 0
   1c63c:	ce 01       	movw	r24, r28
   1c63e:	01 96       	adiw	r24, 0x01	; 1
   1c640:	0e 94 39 82 	call	0x10472	; 0x10472 <fwrite>
   1c644:	8c 01       	movw	r16, r24
        if(size < wind)
   1c646:	88 15       	cp	r24, r8
   1c648:	99 05       	cpc	r25, r9
   1c64a:	84 f4       	brge	.+32     	; 0x1c66c <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1c64c:	80 e0       	ldi	r24, 0x00	; 0
   1c64e:	96 e3       	ldi	r25, 0x36	; 54
   1c650:	1f 92       	push	r1
   1c652:	9f 93       	push	r25
   1c654:	8f 93       	push	r24
   1c656:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1c65a:	0f 90       	pop	r0
   1c65c:	0f 90       	pop	r0
   1c65e:	0f 90       	pop	r0
            status = 0;
   1c660:	cb 5e       	subi	r28, 0xEB	; 235
   1c662:	dd 4f       	sbci	r29, 0xFD	; 253
   1c664:	18 82       	st	Y, r1
   1c666:	c5 51       	subi	r28, 0x15	; 21
   1c668:	d2 40       	sbci	r29, 0x02	; 2
   1c66a:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1c66c:	c8 01       	movw	r24, r16
   1c66e:	01 2e       	mov	r0, r17
   1c670:	00 0c       	add	r0, r0
   1c672:	aa 0b       	sbc	r26, r26
   1c674:	bb 0b       	sbc	r27, r27
   1c676:	48 0e       	add	r4, r24
   1c678:	59 1e       	adc	r5, r25
   1c67a:	6a 1e       	adc	r6, r26
   1c67c:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1c67e:	c6 5e       	subi	r28, 0xE6	; 230
   1c680:	dd 4f       	sbci	r29, 0xFD	; 253
   1c682:	88 81       	ld	r24, Y
   1c684:	99 81       	ldd	r25, Y+1	; 0x01
   1c686:	ca 51       	subi	r28, 0x1A	; 26
   1c688:	d2 40       	sbci	r29, 0x02	; 2
   1c68a:	0e 94 bb 82 	call	0x10576	; 0x10576 <fclose>
    if(t)
   1c68e:	c3 5e       	subi	r28, 0xE3	; 227
   1c690:	dd 4f       	sbci	r29, 0xFD	; 253
   1c692:	88 81       	ld	r24, Y
   1c694:	99 81       	ldd	r25, Y+1	; 0x01
   1c696:	aa 81       	ldd	r26, Y+2	; 0x02
   1c698:	bb 81       	ldd	r27, Y+3	; 0x03
   1c69a:	cd 51       	subi	r28, 0x1D	; 29
   1c69c:	d2 40       	sbci	r29, 0x02	; 2
   1c69e:	00 97       	sbiw	r24, 0x00	; 0
   1c6a0:	a1 05       	cpc	r26, r1
   1c6a2:	b1 05       	cpc	r27, r1
   1c6a4:	d9 f0       	breq	.+54     	; 0x1c6dc <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1c6a6:	c3 5f       	subi	r28, 0xF3	; 243
   1c6a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6aa:	88 83       	st	Y, r24
   1c6ac:	99 83       	std	Y+1, r25	; 0x01
   1c6ae:	aa 83       	std	Y+2, r26	; 0x02
   1c6b0:	bb 83       	std	Y+3, r27	; 0x03
   1c6b2:	cd 50       	subi	r28, 0x0D	; 13
   1c6b4:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1c6b6:	c7 5f       	subi	r28, 0xF7	; 247
   1c6b8:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6ba:	88 83       	st	Y, r24
   1c6bc:	99 83       	std	Y+1, r25	; 0x01
   1c6be:	aa 83       	std	Y+2, r26	; 0x02
   1c6c0:	bb 83       	std	Y+3, r27	; 0x03
   1c6c2:	c9 50       	subi	r28, 0x09	; 9
   1c6c4:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1c6c6:	be 01       	movw	r22, r28
   1c6c8:	67 5f       	subi	r22, 0xF7	; 247
   1c6ca:	7d 4f       	sbci	r23, 0xFD	; 253
   1c6cc:	c4 5e       	subi	r28, 0xE4	; 228
   1c6ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6d0:	88 81       	ld	r24, Y
   1c6d2:	cc 51       	subi	r28, 0x1C	; 28
   1c6d4:	d2 40       	sbci	r29, 0x02	; 2
   1c6d6:	9e 2d       	mov	r25, r14
   1c6d8:	0e 94 f9 7f 	call	0xfff2	; 0xfff2 <utime>
    }
    sync();
   1c6dc:	0e 94 b6 81 	call	0x1036c	; 0x1036c <sync>
    printf("Wrote: %8ld\n", bytes);
   1c6e0:	7f 92       	push	r7
   1c6e2:	6f 92       	push	r6
   1c6e4:	5f 92       	push	r5
   1c6e6:	4f 92       	push	r4
   1c6e8:	83 ef       	ldi	r24, 0xF3	; 243
   1c6ea:	95 e3       	ldi	r25, 0x35	; 53
   1c6ec:	1f 92       	push	r1
   1c6ee:	9f 93       	push	r25
   1c6f0:	8f 93       	push	r24
   1c6f2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    return(status);
   1c6f6:	0f b6       	in	r0, 0x3f	; 63
   1c6f8:	f8 94       	cli
   1c6fa:	de bf       	out	0x3e, r29	; 62
   1c6fc:	0f be       	out	0x3f, r0	; 63
   1c6fe:	cd bf       	out	0x3d, r28	; 61
   1c700:	cb 5e       	subi	r28, 0xEB	; 235
   1c702:	dd 4f       	sbci	r29, 0xFD	; 253
   1c704:	88 81       	ld	r24, Y
   1c706:	c5 51       	subi	r28, 0x15	; 21
   1c708:	d2 40       	sbci	r29, 0x02	; 2
   1c70a:	9f 2d       	mov	r25, r15
}
   1c70c:	c4 5d       	subi	r28, 0xD4	; 212
   1c70e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c710:	e2 e1       	ldi	r30, 0x12	; 18
   1c712:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001c716 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1c716:	ad e0       	ldi	r26, 0x0D	; 13
   1c718:	b1 e0       	ldi	r27, 0x01	; 1
   1c71a:	e1 e9       	ldi	r30, 0x91	; 145
   1c71c:	f3 ee       	ldi	r31, 0xE3	; 227
   1c71e:	0c 94 05 ed 	jmp	0x1da0a	; 0x1da0a <__prologue_saves__>
   1c722:	f8 2e       	mov	r15, r24
   1c724:	e9 2e       	mov	r14, r25
   1c726:	16 2f       	mov	r17, r22
   1c728:	07 2f       	mov	r16, r23
   1c72a:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1c72c:	6b e2       	ldi	r22, 0x2B	; 43
   1c72e:	77 e0       	ldi	r23, 0x07	; 7
   1c730:	0e 94 75 da 	call	0x1b4ea	; 0x1b4ea <lif_open_volume>
   1c734:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1c736:	00 97       	sbiw	r24, 0x00	; 0
   1c738:	51 f4       	brne	.+20     	; 0x1c74e <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1c73a:	ef 92       	push	r14
   1c73c:	ff 92       	push	r15
   1c73e:	8b ed       	ldi	r24, 0xDB	; 219
   1c740:	95 e3       	ldi	r25, 0x35	; 53
   1c742:	1f 92       	push	r1
   1c744:	9f 93       	push	r25
   1c746:	8f 93       	push	r24
   1c748:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1c74c:	11 c0       	rjmp	.+34     	; 0x1c770 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1c74e:	61 2f       	mov	r22, r17
   1c750:	70 2f       	mov	r23, r16
   1c752:	38 d9       	rcall	.-3472   	; 0x1b9c4 <lif_find_file>
    if(index == -1)
   1c754:	01 96       	adiw	r24, 0x01	; 1
   1c756:	a1 f4       	brne	.+40     	; 0x1c780 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1c758:	0f 93       	push	r16
   1c75a:	1f 93       	push	r17
   1c75c:	88 ec       	ldi	r24, 0xC8	; 200
   1c75e:	95 e3       	ldi	r25, 0x35	; 53
   1c760:	1f 92       	push	r1
   1c762:	9f 93       	push	r25
   1c764:	8f 93       	push	r24
   1c766:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c76a:	c4 01       	movw	r24, r8
   1c76c:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1c770:	0f 90       	pop	r0
   1c772:	0f 90       	pop	r0
   1c774:	0f 90       	pop	r0
   1c776:	0f 90       	pop	r0
   1c778:	0f 90       	pop	r0
   1c77a:	00 e0       	ldi	r16, 0x00	; 0
   1c77c:	10 e0       	ldi	r17, 0x00	; 0
   1c77e:	0c c1       	rjmp	.+536    	; 0x1c998 <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1c780:	a4 01       	movw	r20, r8
   1c782:	40 5a       	subi	r20, 0xA0	; 160
   1c784:	5f 4f       	sbci	r21, 0xFF	; 255
   1c786:	c4 5f       	subi	r28, 0xF4	; 244
   1c788:	de 4f       	sbci	r29, 0xFE	; 254
   1c78a:	59 83       	std	Y+1, r21	; 0x01
   1c78c:	48 83       	st	Y, r20
   1c78e:	cc 50       	subi	r28, 0x0C	; 12
   1c790:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1c792:	da 01       	movw	r26, r20
   1c794:	ad 90       	ld	r10, X+
   1c796:	bc 90       	ld	r11, X
   1c798:	0b 2c       	mov	r0, r11
   1c79a:	00 0c       	add	r0, r0
   1c79c:	cc 08       	sbc	r12, r12
   1c79e:	dd 08       	sbc	r13, r13
   1c7a0:	e1 2c       	mov	r14, r1
   1c7a2:	f1 2c       	mov	r15, r1
   1c7a4:	87 01       	movw	r16, r14
   1c7a6:	e3 94       	inc	r14
   1c7a8:	21 e0       	ldi	r18, 0x01	; 1
   1c7aa:	30 e0       	ldi	r19, 0x00	; 0
   1c7ac:	40 e0       	ldi	r20, 0x00	; 0
   1c7ae:	50 e0       	ldi	r21, 0x00	; 0
   1c7b0:	6e e3       	ldi	r22, 0x3E	; 62
   1c7b2:	76 e1       	ldi	r23, 0x16	; 22
   1c7b4:	c3 01       	movw	r24, r6
   1c7b6:	0e 94 e3 d5 	call	0x1abc6	; 0x1abc6 <lif_create_volume>
   1c7ba:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1c7bc:	89 2b       	or	r24, r25
   1c7be:	11 f4       	brne	.+4      	; 0x1c7c4 <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c7c0:	c4 01       	movw	r24, r8
   1c7c2:	cf c0       	rjmp	.+414    	; 0x1c962 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1c7c4:	81 e2       	ldi	r24, 0x21	; 33
   1c7c6:	f4 01       	movw	r30, r8
   1c7c8:	e1 5b       	subi	r30, 0xB1	; 177
   1c7ca:	ff 4f       	sbci	r31, 0xFF	; 255
   1c7cc:	d5 01       	movw	r26, r10
   1c7ce:	a1 5b       	subi	r26, 0xB1	; 177
   1c7d0:	bf 4f       	sbci	r27, 0xFF	; 255
   1c7d2:	01 90       	ld	r0, Z+
   1c7d4:	0d 92       	st	X+, r0
   1c7d6:	8a 95       	dec	r24
   1c7d8:	e1 f7       	brne	.-8      	; 0x1c7d2 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1c7da:	82 e0       	ldi	r24, 0x02	; 2
   1c7dc:	90 e0       	ldi	r25, 0x00	; 0
   1c7de:	a0 e0       	ldi	r26, 0x00	; 0
   1c7e0:	b0 e0       	ldi	r27, 0x00	; 0
   1c7e2:	f5 01       	movw	r30, r10
   1c7e4:	e4 5a       	subi	r30, 0xA4	; 164
   1c7e6:	ff 4f       	sbci	r31, 0xFF	; 255
   1c7e8:	80 83       	st	Z, r24
   1c7ea:	91 83       	std	Z+1, r25	; 0x01
   1c7ec:	a2 83       	std	Z+2, r26	; 0x02
   1c7ee:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1c7f0:	c4 5f       	subi	r28, 0xF4	; 244
   1c7f2:	de 4f       	sbci	r29, 0xFE	; 254
   1c7f4:	e8 81       	ld	r30, Y
   1c7f6:	f9 81       	ldd	r31, Y+1	; 0x01
   1c7f8:	cc 50       	subi	r28, 0x0C	; 12
   1c7fa:	d1 40       	sbci	r29, 0x01	; 1
   1c7fc:	80 81       	ld	r24, Z
   1c7fe:	91 81       	ldd	r25, Z+1	; 0x01
   1c800:	a2 81       	ldd	r26, Z+2	; 0x02
   1c802:	b3 81       	ldd	r27, Z+3	; 0x03
   1c804:	f5 01       	movw	r30, r10
   1c806:	80 8b       	std	Z+16, r24	; 0x10
   1c808:	91 8b       	std	Z+17, r25	; 0x11
   1c80a:	a2 8b       	std	Z+18, r26	; 0x12
   1c80c:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1c80e:	60 e0       	ldi	r22, 0x00	; 0
   1c810:	70 e0       	ldi	r23, 0x00	; 0
   1c812:	c5 01       	movw	r24, r10
   1c814:	0e 94 67 d4 	call	0x1a8ce	; 0x1a8ce <lif_writedirindex>
   1c818:	8c 01       	movw	r16, r24
   1c81a:	89 2b       	or	r24, r25
   1c81c:	41 f0       	breq	.+16     	; 0x1c82e <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1c81e:	61 e0       	ldi	r22, 0x01	; 1
   1c820:	70 e0       	ldi	r23, 0x00	; 0
   1c822:	c5 01       	movw	r24, r10
   1c824:	0e 94 c3 d4 	call	0x1a986	; 0x1a986 <lif_writedirEOF>
   1c828:	8c 01       	movw	r16, r24
   1c82a:	89 2b       	or	r24, r25
   1c82c:	39 f4       	brne	.+14     	; 0x1c83c <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c82e:	c4 01       	movw	r24, r8
   1c830:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1c834:	c5 01       	movw	r24, r10
   1c836:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1c83a:	ae c0       	rjmp	.+348    	; 0x1c998 <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1c83c:	d5 01       	movw	r26, r10
   1c83e:	1c 96       	adiw	r26, 0x0c	; 12
   1c840:	cd 90       	ld	r12, X+
   1c842:	dd 90       	ld	r13, X+
   1c844:	ed 90       	ld	r14, X+
   1c846:	fc 90       	ld	r15, X
   1c848:	1f 97       	sbiw	r26, 0x0f	; 15
   1c84a:	fe 2c       	mov	r15, r14
   1c84c:	ed 2c       	mov	r14, r13
   1c84e:	dc 2c       	mov	r13, r12
   1c850:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c852:	f4 01       	movw	r30, r8
   1c854:	e4 5a       	subi	r30, 0xA4	; 164
   1c856:	ff 4f       	sbci	r31, 0xFF	; 255
   1c858:	80 81       	ld	r24, Z
   1c85a:	91 81       	ldd	r25, Z+1	; 0x01
   1c85c:	a2 81       	ldd	r26, Z+2	; 0x02
   1c85e:	b3 81       	ldd	r27, Z+3	; 0x03
   1c860:	22 27       	eor	r18, r18
   1c862:	38 2f       	mov	r19, r24
   1c864:	49 2f       	mov	r20, r25
   1c866:	5a 2f       	mov	r21, r26
   1c868:	cb 5f       	subi	r28, 0xFB	; 251
   1c86a:	de 4f       	sbci	r29, 0xFE	; 254
   1c86c:	28 83       	st	Y, r18
   1c86e:	39 83       	std	Y+1, r19	; 0x01
   1c870:	4a 83       	std	Y+2, r20	; 0x02
   1c872:	5b 83       	std	Y+3, r21	; 0x03
   1c874:	c5 50       	subi	r28, 0x05	; 5
   1c876:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c878:	21 2c       	mov	r2, r1
   1c87a:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c87c:	8b eb       	ldi	r24, 0xBB	; 187
   1c87e:	95 e3       	ldi	r25, 0x35	; 53
   1c880:	9c 01       	movw	r18, r24
   1c882:	40 e0       	ldi	r20, 0x00	; 0
   1c884:	c7 5f       	subi	r28, 0xF7	; 247
   1c886:	de 4f       	sbci	r29, 0xFE	; 254
   1c888:	28 83       	st	Y, r18
   1c88a:	39 83       	std	Y+1, r19	; 0x01
   1c88c:	4a 83       	std	Y+2, r20	; 0x02
   1c88e:	c9 50       	subi	r28, 0x09	; 9
   1c890:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c892:	41 c0       	rjmp	.+130    	; 0x1c916 <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1c894:	00 e0       	ldi	r16, 0x00	; 0
   1c896:	11 e0       	ldi	r17, 0x01	; 1
   1c898:	a7 01       	movw	r20, r14
   1c89a:	96 01       	movw	r18, r12
   1c89c:	be 01       	movw	r22, r28
   1c89e:	6f 5f       	subi	r22, 0xFF	; 255
   1c8a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8a2:	c5 01       	movw	r24, r10
   1c8a4:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1c8a8:	05 2c       	mov	r0, r5
   1c8aa:	00 0c       	add	r0, r0
   1c8ac:	66 08       	sbc	r6, r6
   1c8ae:	77 08       	sbc	r7, r7
   1c8b0:	c4 0c       	add	r12, r4
   1c8b2:	d5 1c       	adc	r13, r5
   1c8b4:	e6 1c       	adc	r14, r6
   1c8b6:	f7 1c       	adc	r15, r7
        offset += size;
   1c8b8:	cb 5f       	subi	r28, 0xFB	; 251
   1c8ba:	de 4f       	sbci	r29, 0xFE	; 254
   1c8bc:	88 81       	ld	r24, Y
   1c8be:	99 81       	ldd	r25, Y+1	; 0x01
   1c8c0:	aa 81       	ldd	r26, Y+2	; 0x02
   1c8c2:	bb 81       	ldd	r27, Y+3	; 0x03
   1c8c4:	c5 50       	subi	r28, 0x05	; 5
   1c8c6:	d1 40       	sbci	r29, 0x01	; 1
   1c8c8:	84 0d       	add	r24, r4
   1c8ca:	95 1d       	adc	r25, r5
   1c8cc:	a6 1d       	adc	r26, r6
   1c8ce:	b7 1d       	adc	r27, r7
   1c8d0:	cb 5f       	subi	r28, 0xFB	; 251
   1c8d2:	de 4f       	sbci	r29, 0xFE	; 254
   1c8d4:	88 83       	st	Y, r24
   1c8d6:	99 83       	std	Y+1, r25	; 0x01
   1c8d8:	aa 83       	std	Y+2, r26	; 0x02
   1c8da:	bb 83       	std	Y+3, r27	; 0x03
   1c8dc:	c5 50       	subi	r28, 0x05	; 5
   1c8de:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c8e0:	ff 92       	push	r15
   1c8e2:	ef 92       	push	r14
   1c8e4:	df 92       	push	r13
   1c8e6:	cf 92       	push	r12
   1c8e8:	1f 92       	push	r1
   1c8ea:	c6 5f       	subi	r28, 0xF6	; 246
   1c8ec:	de 4f       	sbci	r29, 0xFE	; 254
   1c8ee:	98 81       	ld	r25, Y
   1c8f0:	ca 50       	subi	r28, 0x0A	; 10
   1c8f2:	d1 40       	sbci	r29, 0x01	; 1
   1c8f4:	9f 93       	push	r25
   1c8f6:	c7 5f       	subi	r28, 0xF7	; 247
   1c8f8:	de 4f       	sbci	r29, 0xFE	; 254
   1c8fa:	a8 81       	ld	r26, Y
   1c8fc:	c9 50       	subi	r28, 0x09	; 9
   1c8fe:	d1 40       	sbci	r29, 0x01	; 1
   1c900:	af 93       	push	r26
   1c902:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c906:	bf ef       	ldi	r27, 0xFF	; 255
   1c908:	2b 1a       	sub	r2, r27
   1c90a:	3b 0a       	sbc	r3, r27
   1c90c:	0f b6       	in	r0, 0x3f	; 63
   1c90e:	f8 94       	cli
   1c910:	de bf       	out	0x3e, r29	; 62
   1c912:	0f be       	out	0x3f, r0	; 63
   1c914:	cd bf       	out	0x3d, r28	; 61
   1c916:	c4 5f       	subi	r28, 0xF4	; 244
   1c918:	de 4f       	sbci	r29, 0xFE	; 254
   1c91a:	a8 81       	ld	r26, Y
   1c91c:	b9 81       	ldd	r27, Y+1	; 0x01
   1c91e:	cc 50       	subi	r28, 0x0C	; 12
   1c920:	d1 40       	sbci	r29, 0x01	; 1
   1c922:	8d 91       	ld	r24, X+
   1c924:	9c 91       	ld	r25, X
   1c926:	28 16       	cp	r2, r24
   1c928:	39 06       	cpc	r3, r25
   1c92a:	f4 f4       	brge	.+60     	; 0x1c968 <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1c92c:	00 e0       	ldi	r16, 0x00	; 0
   1c92e:	11 e0       	ldi	r17, 0x01	; 1
   1c930:	cb 5f       	subi	r28, 0xFB	; 251
   1c932:	de 4f       	sbci	r29, 0xFE	; 254
   1c934:	28 81       	ld	r18, Y
   1c936:	39 81       	ldd	r19, Y+1	; 0x01
   1c938:	4a 81       	ldd	r20, Y+2	; 0x02
   1c93a:	5b 81       	ldd	r21, Y+3	; 0x03
   1c93c:	c5 50       	subi	r28, 0x05	; 5
   1c93e:	d1 40       	sbci	r29, 0x01	; 1
   1c940:	be 01       	movw	r22, r28
   1c942:	6f 5f       	subi	r22, 0xFF	; 255
   1c944:	7f 4f       	sbci	r23, 0xFF	; 255
   1c946:	c4 01       	movw	r24, r8
   1c948:	0e 94 e5 ca 	call	0x195ca	; 0x195ca <lif_read>
   1c94c:	2b 01       	movw	r4, r22
   1c94e:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1c950:	6f 3f       	cpi	r22, 0xFF	; 255
   1c952:	71 05       	cpc	r23, r1
   1c954:	11 f0       	breq	.+4      	; 0x1c95a <lif_extract_lif_as_lif+0x244>
   1c956:	0c f0       	brlt	.+2      	; 0x1c95a <lif_extract_lif_as_lif+0x244>
   1c958:	9d cf       	rjmp	.-198    	; 0x1c894 <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c95a:	c4 01       	movw	r24, r8
   1c95c:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1c960:	c5 01       	movw	r24, r10
   1c962:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1c966:	09 cf       	rjmp	.-494    	; 0x1c77a <lif_extract_lif_as_lif+0x64>
   1c968:	c4 01       	movw	r24, r8
   1c96a:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1c96e:	c5 01       	movw	r24, r10
   1c970:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("Wrote: %8ld\n", bytes);
   1c974:	ff 92       	push	r15
   1c976:	ef 92       	push	r14
   1c978:	df 92       	push	r13
   1c97a:	cf 92       	push	r12
   1c97c:	8e ea       	ldi	r24, 0xAE	; 174
   1c97e:	95 e3       	ldi	r25, 0x35	; 53
   1c980:	1f 92       	push	r1
   1c982:	9f 93       	push	r25
   1c984:	8f 93       	push	r24
   1c986:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    return(1);
   1c98a:	0f b6       	in	r0, 0x3f	; 63
   1c98c:	f8 94       	cli
   1c98e:	de bf       	out	0x3e, r29	; 62
   1c990:	0f be       	out	0x3f, r0	; 63
   1c992:	cd bf       	out	0x3d, r28	; 61
   1c994:	01 e0       	ldi	r16, 0x01	; 1
   1c996:	10 e0       	ldi	r17, 0x00	; 0
}
   1c998:	c8 01       	movw	r24, r16
   1c99a:	c3 5f       	subi	r28, 0xF3	; 243
   1c99c:	de 4f       	sbci	r29, 0xFE	; 254
   1c99e:	e2 e1       	ldi	r30, 0x12	; 18
   1c9a0:	0c 94 21 ed 	jmp	0x1da42	; 0x1da42 <__epilogue_restores__>

0001c9a4 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1c9a4:	2f 92       	push	r2
   1c9a6:	3f 92       	push	r3
   1c9a8:	4f 92       	push	r4
   1c9aa:	5f 92       	push	r5
   1c9ac:	6f 92       	push	r6
   1c9ae:	8f 92       	push	r8
   1c9b0:	9f 92       	push	r9
   1c9b2:	af 92       	push	r10
   1c9b4:	bf 92       	push	r11
   1c9b6:	cf 92       	push	r12
   1c9b8:	df 92       	push	r13
   1c9ba:	ef 92       	push	r14
   1c9bc:	ff 92       	push	r15
   1c9be:	0f 93       	push	r16
   1c9c0:	1f 93       	push	r17
   1c9c2:	cf 93       	push	r28
   1c9c4:	df 93       	push	r29
   1c9c6:	cd b7       	in	r28, 0x3d	; 61
   1c9c8:	de b7       	in	r29, 0x3e	; 62
   1c9ca:	c4 51       	subi	r28, 0x14	; 20
   1c9cc:	d1 40       	sbci	r29, 0x01	; 1
   1c9ce:	0f b6       	in	r0, 0x3f	; 63
   1c9d0:	f8 94       	cli
   1c9d2:	de bf       	out	0x3e, r29	; 62
   1c9d4:	0f be       	out	0x3f, r0	; 63
   1c9d6:	cd bf       	out	0x3d, r28	; 61
   1c9d8:	7c 01       	movw	r14, r24
   1c9da:	5b 01       	movw	r10, r22
   1c9dc:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1c9de:	dc 01       	movw	r26, r24
   1c9e0:	8c 91       	ld	r24, X
   1c9e2:	81 11       	cpse	r24, r1
   1c9e4:	03 c0       	rjmp	.+6      	; 0x1c9ec <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1c9e6:	8e e8       	ldi	r24, 0x8E	; 142
   1c9e8:	95 e3       	ldi	r25, 0x35	; 53
   1c9ea:	06 c0       	rjmp	.+12     	; 0x1c9f8 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1c9ec:	fb 01       	movw	r30, r22
   1c9ee:	80 81       	ld	r24, Z
   1c9f0:	81 11       	cpse	r24, r1
   1c9f2:	0b c0       	rjmp	.+22     	; 0x1ca0a <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1c9f4:	83 e7       	ldi	r24, 0x73	; 115
   1c9f6:	95 e3       	ldi	r25, 0x35	; 53
   1c9f8:	1f 92       	push	r1
   1c9fa:	9f 93       	push	r25
   1c9fc:	8f 93       	push	r24
   1c9fe:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
   1ca02:	0f 90       	pop	r0
   1ca04:	0f 90       	pop	r0
   1ca06:	0f 90       	pop	r0
   1ca08:	32 c1       	rjmp	.+612    	; 0x1cc6e <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1ca0a:	da 01       	movw	r26, r20
   1ca0c:	8c 91       	ld	r24, X
   1ca0e:	81 11       	cpse	r24, r1
   1ca10:	03 c0       	rjmp	.+6      	; 0x1ca18 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1ca12:	87 e5       	ldi	r24, 0x57	; 87
   1ca14:	95 e3       	ldi	r25, 0x35	; 53
   1ca16:	f0 cf       	rjmp	.-32     	; 0x1c9f8 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1ca18:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ca1c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1ca20:	92 ff       	sbrs	r25, 2
   1ca22:	12 c0       	rjmp	.+36     	; 0x1ca48 <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1ca24:	df 92       	push	r13
   1ca26:	4f 93       	push	r20
   1ca28:	bf 92       	push	r11
   1ca2a:	6f 93       	push	r22
   1ca2c:	ff 92       	push	r15
   1ca2e:	ef 92       	push	r14
   1ca30:	88 e2       	ldi	r24, 0x28	; 40
   1ca32:	95 e3       	ldi	r25, 0x35	; 53
   1ca34:	1f 92       	push	r1
   1ca36:	9f 93       	push	r25
   1ca38:	8f 93       	push	r24
   1ca3a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1ca3e:	0f b6       	in	r0, 0x3f	; 63
   1ca40:	f8 94       	cli
   1ca42:	de bf       	out	0x3e, r29	; 62
   1ca44:	0f be       	out	0x3f, r0	; 63
   1ca46:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1ca48:	6a e7       	ldi	r22, 0x7A	; 122
   1ca4a:	78 e0       	ldi	r23, 0x08	; 8
   1ca4c:	c6 01       	movw	r24, r12
   1ca4e:	0e 94 75 da 	call	0x1b4ea	; 0x1b4ea <lif_open_volume>
   1ca52:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1ca54:	00 97       	sbiw	r24, 0x00	; 0
   1ca56:	09 f4       	brne	.+2      	; 0x1ca5a <lif_add_lif_file+0xb6>
   1ca58:	0a c1       	rjmp	.+532    	; 0x1cc6e <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1ca5a:	b5 01       	movw	r22, r10
   1ca5c:	0e 94 e2 dc 	call	0x1b9c4	; 0x1b9c4 <lif_find_file>
    if(index == -1)
   1ca60:	01 96       	adiw	r24, 0x01	; 1
   1ca62:	b1 f4       	brne	.+44     	; 0x1ca90 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1ca64:	bf 92       	push	r11
   1ca66:	af 92       	push	r10
   1ca68:	85 e1       	ldi	r24, 0x15	; 21
   1ca6a:	95 e3       	ldi	r25, 0x35	; 53
   1ca6c:	1f 92       	push	r1
   1ca6e:	9f 93       	push	r25
   1ca70:	8f 93       	push	r24
   1ca72:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ca76:	c4 01       	movw	r24, r8
   1ca78:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1ca7c:	0f 90       	pop	r0
   1ca7e:	0f 90       	pop	r0
   1ca80:	0f 90       	pop	r0
   1ca82:	0f 90       	pop	r0
   1ca84:	0f 90       	pop	r0
   1ca86:	60 e0       	ldi	r22, 0x00	; 0
   1ca88:	70 e0       	ldi	r23, 0x00	; 0
   1ca8a:	80 e0       	ldi	r24, 0x00	; 0
   1ca8c:	90 e0       	ldi	r25, 0x00	; 0
   1ca8e:	09 c1       	rjmp	.+530    	; 0x1cca2 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1ca90:	6a e7       	ldi	r22, 0x7A	; 122
   1ca92:	78 e0       	ldi	r23, 0x08	; 8
   1ca94:	c7 01       	movw	r24, r14
   1ca96:	0e 94 75 da 	call	0x1b4ea	; 0x1b4ea <lif_open_volume>
   1ca9a:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1ca9c:	00 97       	sbiw	r24, 0x00	; 0
   1ca9e:	09 f4       	brne	.+2      	; 0x1caa2 <lif_add_lif_file+0xfe>
   1caa0:	e6 c0       	rjmp	.+460    	; 0x1cc6e <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1caa2:	f4 01       	movw	r30, r8
   1caa4:	e0 5a       	subi	r30, 0xA0	; 160
   1caa6:	ff 4f       	sbci	r31, 0xFF	; 255
   1caa8:	40 81       	ld	r20, Z
   1caaa:	51 81       	ldd	r21, Z+1	; 0x01
   1caac:	62 81       	ldd	r22, Z+2	; 0x02
   1caae:	73 81       	ldd	r23, Z+3	; 0x03
   1cab0:	0e 94 10 d9 	call	0x1b220	; 0x1b220 <lif_newdir>
   1cab4:	c3 5f       	subi	r28, 0xF3	; 243
   1cab6:	de 4f       	sbci	r29, 0xFE	; 254
   1cab8:	99 83       	std	Y+1, r25	; 0x01
   1caba:	88 83       	st	Y, r24
   1cabc:	cd 50       	subi	r28, 0x0D	; 13
   1cabe:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1cac0:	01 96       	adiw	r24, 0x01	; 1
   1cac2:	b9 f4       	brne	.+46     	; 0x1caf2 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1cac4:	df 92       	push	r13
   1cac6:	cf 92       	push	r12
   1cac8:	ff 92       	push	r15
   1caca:	ef 92       	push	r14
   1cacc:	85 ee       	ldi	r24, 0xE5	; 229
   1cace:	94 e3       	ldi	r25, 0x34	; 52
   1cad0:	1f 92       	push	r1
   1cad2:	9f 93       	push	r25
   1cad4:	8f 93       	push	r24
   1cad6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cada:	c5 01       	movw	r24, r10
   1cadc:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1cae0:	c4 01       	movw	r24, r8
   1cae2:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1cae6:	0f b6       	in	r0, 0x3f	; 63
   1cae8:	f8 94       	cli
   1caea:	de bf       	out	0x3e, r29	; 62
   1caec:	0f be       	out	0x3f, r0	; 63
   1caee:	cd bf       	out	0x3d, r28	; 61
   1caf0:	be c0       	rjmp	.+380    	; 0x1cc6e <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1caf2:	c5 01       	movw	r24, r10
   1caf4:	84 5a       	subi	r24, 0xA4	; 164
   1caf6:	9f 4f       	sbci	r25, 0xFF	; 255
   1caf8:	dc 01       	movw	r26, r24
   1cafa:	4d 91       	ld	r20, X+
   1cafc:	5d 91       	ld	r21, X+
   1cafe:	6d 91       	ld	r22, X+
   1cb00:	7c 91       	ld	r23, X
   1cb02:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1cb04:	21 e2       	ldi	r18, 0x21	; 33
   1cb06:	f4 01       	movw	r30, r8
   1cb08:	e1 5b       	subi	r30, 0xB1	; 177
   1cb0a:	ff 4f       	sbci	r31, 0xFF	; 255
   1cb0c:	1d 97       	sbiw	r26, 0x0d	; 13
   1cb0e:	01 90       	ld	r0, Z+
   1cb10:	0d 92       	st	X+, r0
   1cb12:	2a 95       	dec	r18
   1cb14:	e1 f7       	brne	.-8      	; 0x1cb0e <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1cb16:	fc 01       	movw	r30, r24
   1cb18:	40 83       	st	Z, r20
   1cb1a:	51 83       	std	Z+1, r21	; 0x01
   1cb1c:	62 83       	std	Z+2, r22	; 0x02
   1cb1e:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1cb20:	b6 2f       	mov	r27, r22
   1cb22:	a5 2f       	mov	r26, r21
   1cb24:	94 2f       	mov	r25, r20
   1cb26:	88 27       	eor	r24, r24
   1cb28:	cb 5f       	subi	r28, 0xFB	; 251
   1cb2a:	de 4f       	sbci	r29, 0xFE	; 254
   1cb2c:	88 83       	st	Y, r24
   1cb2e:	99 83       	std	Y+1, r25	; 0x01
   1cb30:	aa 83       	std	Y+2, r26	; 0x02
   1cb32:	bb 83       	std	Y+3, r27	; 0x03
   1cb34:	c5 50       	subi	r28, 0x05	; 5
   1cb36:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1cb38:	f4 01       	movw	r30, r8
   1cb3a:	e4 5a       	subi	r30, 0xA4	; 164
   1cb3c:	ff 4f       	sbci	r31, 0xFF	; 255
   1cb3e:	80 81       	ld	r24, Z
   1cb40:	91 81       	ldd	r25, Z+1	; 0x01
   1cb42:	a2 81       	ldd	r26, Z+2	; 0x02
   1cb44:	b3 81       	ldd	r27, Z+3	; 0x03
   1cb46:	22 27       	eor	r18, r18
   1cb48:	38 2f       	mov	r19, r24
   1cb4a:	49 2f       	mov	r20, r25
   1cb4c:	5a 2f       	mov	r21, r26
   1cb4e:	c7 5f       	subi	r28, 0xF7	; 247
   1cb50:	de 4f       	sbci	r29, 0xFE	; 254
   1cb52:	28 83       	st	Y, r18
   1cb54:	39 83       	std	Y+1, r19	; 0x01
   1cb56:	4a 83       	std	Y+2, r20	; 0x02
   1cb58:	5b 83       	std	Y+3, r21	; 0x03
   1cb5a:	c9 50       	subi	r28, 0x09	; 9
   1cb5c:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1cb5e:	21 2c       	mov	r2, r1
   1cb60:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1cb62:	c1 2c       	mov	r12, r1
   1cb64:	d1 2c       	mov	r13, r1
   1cb66:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1cb68:	a5 01       	movw	r20, r10
   1cb6a:	40 5a       	subi	r20, 0xA0	; 160
   1cb6c:	5f 4f       	sbci	r21, 0xFF	; 255
   1cb6e:	cd 5e       	subi	r28, 0xED	; 237
   1cb70:	de 4f       	sbci	r29, 0xFE	; 254
   1cb72:	59 83       	std	Y+1, r21	; 0x01
   1cb74:	48 83       	st	Y, r20
   1cb76:	c3 51       	subi	r28, 0x13	; 19
   1cb78:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("Wrote: %8ld\r", bytes);
   1cb7a:	88 ed       	ldi	r24, 0xD8	; 216
   1cb7c:	94 e3       	ldi	r25, 0x34	; 52
   1cb7e:	2c 01       	movw	r4, r24
   1cb80:	c7 5f       	subi	r28, 0xF7	; 247
   1cb82:	de 4f       	sbci	r29, 0xFE	; 254
   1cb84:	28 81       	ld	r18, Y
   1cb86:	39 81       	ldd	r19, Y+1	; 0x01
   1cb88:	4a 81       	ldd	r20, Y+2	; 0x02
   1cb8a:	5b 81       	ldd	r21, Y+3	; 0x03
   1cb8c:	c9 50       	subi	r28, 0x09	; 9
   1cb8e:	d1 40       	sbci	r29, 0x01	; 1
   1cb90:	2c 0d       	add	r18, r12
   1cb92:	3d 1d       	adc	r19, r13
   1cb94:	4e 1d       	adc	r20, r14
   1cb96:	5f 1d       	adc	r21, r15
   1cb98:	cb 5f       	subi	r28, 0xFB	; 251
   1cb9a:	de 4f       	sbci	r29, 0xFE	; 254
   1cb9c:	88 81       	ld	r24, Y
   1cb9e:	99 81       	ldd	r25, Y+1	; 0x01
   1cba0:	aa 81       	ldd	r26, Y+2	; 0x02
   1cba2:	bb 81       	ldd	r27, Y+3	; 0x03
   1cba4:	c5 50       	subi	r28, 0x05	; 5
   1cba6:	d1 40       	sbci	r29, 0x01	; 1
   1cba8:	8c 0d       	add	r24, r12
   1cbaa:	9d 1d       	adc	r25, r13
   1cbac:	ae 1d       	adc	r26, r14
   1cbae:	bf 1d       	adc	r27, r15
   1cbb0:	c1 5f       	subi	r28, 0xF1	; 241
   1cbb2:	de 4f       	sbci	r29, 0xFE	; 254
   1cbb4:	88 83       	st	Y, r24
   1cbb6:	99 83       	std	Y+1, r25	; 0x01
   1cbb8:	aa 83       	std	Y+2, r26	; 0x02
   1cbba:	bb 83       	std	Y+3, r27	; 0x03
   1cbbc:	cf 50       	subi	r28, 0x0F	; 15
   1cbbe:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1cbc0:	cd 5e       	subi	r28, 0xED	; 237
   1cbc2:	de 4f       	sbci	r29, 0xFE	; 254
   1cbc4:	a8 81       	ld	r26, Y
   1cbc6:	b9 81       	ldd	r27, Y+1	; 0x01
   1cbc8:	c3 51       	subi	r28, 0x13	; 19
   1cbca:	d1 40       	sbci	r29, 0x01	; 1
   1cbcc:	8d 91       	ld	r24, X+
   1cbce:	9c 91       	ld	r25, X
   1cbd0:	28 16       	cp	r2, r24
   1cbd2:	39 06       	cpc	r3, r25
   1cbd4:	dc f5       	brge	.+118    	; 0x1cc4c <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1cbd6:	00 e0       	ldi	r16, 0x00	; 0
   1cbd8:	11 e0       	ldi	r17, 0x01	; 1
   1cbda:	be 01       	movw	r22, r28
   1cbdc:	6f 5f       	subi	r22, 0xFF	; 255
   1cbde:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbe0:	c4 01       	movw	r24, r8
   1cbe2:	0e 94 e5 ca 	call	0x195ca	; 0x195ca <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1cbe6:	6f 3f       	cpi	r22, 0xFF	; 255
   1cbe8:	71 05       	cpc	r23, r1
   1cbea:	a9 f0       	breq	.+42     	; 0x1cc16 <lif_add_lif_file+0x272>
   1cbec:	a4 f0       	brlt	.+40     	; 0x1cc16 <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1cbee:	00 e0       	ldi	r16, 0x00	; 0
   1cbf0:	11 e0       	ldi	r17, 0x01	; 1
   1cbf2:	c1 5f       	subi	r28, 0xF1	; 241
   1cbf4:	de 4f       	sbci	r29, 0xFE	; 254
   1cbf6:	28 81       	ld	r18, Y
   1cbf8:	39 81       	ldd	r19, Y+1	; 0x01
   1cbfa:	4a 81       	ldd	r20, Y+2	; 0x02
   1cbfc:	5b 81       	ldd	r21, Y+3	; 0x03
   1cbfe:	cf 50       	subi	r28, 0x0F	; 15
   1cc00:	d1 40       	sbci	r29, 0x01	; 1
   1cc02:	be 01       	movw	r22, r28
   1cc04:	6f 5f       	subi	r22, 0xFF	; 255
   1cc06:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc08:	c5 01       	movw	r24, r10
   1cc0a:	0e 94 3e cb 	call	0x1967c	; 0x1967c <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1cc0e:	8f 3f       	cpi	r24, 0xFF	; 255
   1cc10:	91 05       	cpc	r25, r1
   1cc12:	09 f0       	breq	.+2      	; 0x1cc16 <lif_add_lif_file+0x272>
   1cc14:	2c f4       	brge	.+10     	; 0x1cc20 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cc16:	c5 01       	movw	r24, r10
   1cc18:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1cc1c:	c4 01       	movw	r24, r8
   1cc1e:	25 c0       	rjmp	.+74     	; 0x1cc6a <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1cc20:	5f ef       	ldi	r21, 0xFF	; 255
   1cc22:	d5 1a       	sub	r13, r21
   1cc24:	e5 0a       	sbc	r14, r21
   1cc26:	f5 0a       	sbc	r15, r21
        printf("Wrote: %8ld\r", bytes);
   1cc28:	ff 92       	push	r15
   1cc2a:	ef 92       	push	r14
   1cc2c:	df 92       	push	r13
   1cc2e:	cf 92       	push	r12
   1cc30:	1f 92       	push	r1
   1cc32:	5f 92       	push	r5
   1cc34:	4f 92       	push	r4
   1cc36:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1cc3a:	8f ef       	ldi	r24, 0xFF	; 255
   1cc3c:	28 1a       	sub	r2, r24
   1cc3e:	38 0a       	sbc	r3, r24
   1cc40:	0f b6       	in	r0, 0x3f	; 63
   1cc42:	f8 94       	cli
   1cc44:	de bf       	out	0x3e, r29	; 62
   1cc46:	0f be       	out	0x3f, r0	; 63
   1cc48:	cd bf       	out	0x3d, r28	; 61
   1cc4a:	9a cf       	rjmp	.-204    	; 0x1cb80 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cc4c:	c4 01       	movw	r24, r8
   1cc4e:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1cc52:	c3 5f       	subi	r28, 0xF3	; 243
   1cc54:	de 4f       	sbci	r29, 0xFE	; 254
   1cc56:	68 81       	ld	r22, Y
   1cc58:	79 81       	ldd	r23, Y+1	; 0x01
   1cc5a:	cd 50       	subi	r28, 0x0D	; 13
   1cc5c:	d1 40       	sbci	r29, 0x01	; 1
   1cc5e:	c5 01       	movw	r24, r10
   1cc60:	0e 94 67 d4 	call	0x1a8ce	; 0x1a8ce <lif_writedirindex>
   1cc64:	89 2b       	or	r24, r25
   1cc66:	41 f4       	brne	.+16     	; 0x1cc78 <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cc68:	c5 01       	movw	r24, r10
   1cc6a:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1cc6e:	6f ef       	ldi	r22, 0xFF	; 255
   1cc70:	7f ef       	ldi	r23, 0xFF	; 255
   1cc72:	8f ef       	ldi	r24, 0xFF	; 255
   1cc74:	9f ef       	ldi	r25, 0xFF	; 255
   1cc76:	15 c0       	rjmp	.+42     	; 0x1cca2 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cc78:	c5 01       	movw	r24, r10
   1cc7a:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("Wrote: %8ld\n", bytes);
   1cc7e:	ff 92       	push	r15
   1cc80:	ef 92       	push	r14
   1cc82:	df 92       	push	r13
   1cc84:	cf 92       	push	r12
   1cc86:	8b ec       	ldi	r24, 0xCB	; 203
   1cc88:	94 e3       	ldi	r25, 0x34	; 52
   1cc8a:	1f 92       	push	r1
   1cc8c:	9f 93       	push	r25
   1cc8e:	8f 93       	push	r24
   1cc90:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    return(bytes);
   1cc94:	0f b6       	in	r0, 0x3f	; 63
   1cc96:	f8 94       	cli
   1cc98:	de bf       	out	0x3e, r29	; 62
   1cc9a:	0f be       	out	0x3f, r0	; 63
   1cc9c:	cd bf       	out	0x3d, r28	; 61
   1cc9e:	b6 01       	movw	r22, r12
   1cca0:	c7 01       	movw	r24, r14
}
   1cca2:	cc 5e       	subi	r28, 0xEC	; 236
   1cca4:	de 4f       	sbci	r29, 0xFE	; 254
   1cca6:	0f b6       	in	r0, 0x3f	; 63
   1cca8:	f8 94       	cli
   1ccaa:	de bf       	out	0x3e, r29	; 62
   1ccac:	0f be       	out	0x3f, r0	; 63
   1ccae:	cd bf       	out	0x3d, r28	; 61
   1ccb0:	df 91       	pop	r29
   1ccb2:	cf 91       	pop	r28
   1ccb4:	1f 91       	pop	r17
   1ccb6:	0f 91       	pop	r16
   1ccb8:	ff 90       	pop	r15
   1ccba:	ef 90       	pop	r14
   1ccbc:	df 90       	pop	r13
   1ccbe:	cf 90       	pop	r12
   1ccc0:	bf 90       	pop	r11
   1ccc2:	af 90       	pop	r10
   1ccc4:	9f 90       	pop	r9
   1ccc6:	8f 90       	pop	r8
   1ccc8:	6f 90       	pop	r6
   1ccca:	5f 90       	pop	r5
   1cccc:	4f 90       	pop	r4
   1ccce:	3f 90       	pop	r3
   1ccd0:	2f 90       	pop	r2
   1ccd2:	08 95       	ret

0001ccd4 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1ccd4:	ef 92       	push	r14
   1ccd6:	ff 92       	push	r15
   1ccd8:	0f 93       	push	r16
   1ccda:	1f 93       	push	r17
   1ccdc:	cf 93       	push	r28
   1ccde:	df 93       	push	r29
   1cce0:	7c 01       	movw	r14, r24
   1cce2:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1cce4:	fc 01       	movw	r30, r24
   1cce6:	80 81       	ld	r24, Z
   1cce8:	81 11       	cpse	r24, r1
   1ccea:	03 c0       	rjmp	.+6      	; 0x1ccf2 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1ccec:	86 ea       	ldi	r24, 0xA6	; 166
   1ccee:	94 e3       	ldi	r25, 0x34	; 52
   1ccf0:	06 c0       	rjmp	.+12     	; 0x1ccfe <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1ccf2:	fb 01       	movw	r30, r22
   1ccf4:	80 81       	ld	r24, Z
   1ccf6:	81 11       	cpse	r24, r1
   1ccf8:	0b c0       	rjmp	.+22     	; 0x1cd10 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1ccfa:	86 e8       	ldi	r24, 0x86	; 134
   1ccfc:	94 e3       	ldi	r25, 0x34	; 52
   1ccfe:	1f 92       	push	r1
   1cd00:	9f 93       	push	r25
   1cd02:	8f 93       	push	r24
   1cd04:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
   1cd08:	0f 90       	pop	r0
   1cd0a:	0f 90       	pop	r0
   1cd0c:	0f 90       	pop	r0
   1cd0e:	74 c0       	rjmp	.+232    	; 0x1cdf8 <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1cd10:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1cd14:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1cd18:	92 ff       	sbrs	r25, 2
   1cd1a:	13 c0       	rjmp	.+38     	; 0x1cd42 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1cd1c:	1f 93       	push	r17
   1cd1e:	6f 93       	push	r22
   1cd20:	ff 92       	push	r15
   1cd22:	ef 92       	push	r14
   1cd24:	87 e6       	ldi	r24, 0x67	; 103
   1cd26:	94 e3       	ldi	r25, 0x34	; 52
   1cd28:	1f 92       	push	r1
   1cd2a:	9f 93       	push	r25
   1cd2c:	8f 93       	push	r24
   1cd2e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1cd32:	8d b7       	in	r24, 0x3d	; 61
   1cd34:	9e b7       	in	r25, 0x3e	; 62
   1cd36:	07 96       	adiw	r24, 0x07	; 7
   1cd38:	0f b6       	in	r0, 0x3f	; 63
   1cd3a:	f8 94       	cli
   1cd3c:	9e bf       	out	0x3e, r25	; 62
   1cd3e:	0f be       	out	0x3f, r0	; 63
   1cd40:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1cd42:	6a e7       	ldi	r22, 0x7A	; 122
   1cd44:	78 e0       	ldi	r23, 0x08	; 8
   1cd46:	c7 01       	movw	r24, r14
   1cd48:	0e 94 75 da 	call	0x1b4ea	; 0x1b4ea <lif_open_volume>
   1cd4c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1cd4e:	00 97       	sbiw	r24, 0x00	; 0
   1cd50:	09 f4       	brne	.+2      	; 0x1cd54 <lif_del_file+0x80>
   1cd52:	52 c0       	rjmp	.+164    	; 0x1cdf8 <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1cd54:	b8 01       	movw	r22, r16
   1cd56:	0e 94 e2 dc 	call	0x1b9c4	; 0x1b9c4 <lif_find_file>
    if(index == -1)
   1cd5a:	8f 3f       	cpi	r24, 0xFF	; 255
   1cd5c:	ef ef       	ldi	r30, 0xFF	; 255
   1cd5e:	9e 07       	cpc	r25, r30
   1cd60:	c9 f4       	brne	.+50     	; 0x1cd94 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cd62:	ce 01       	movw	r24, r28
   1cd64:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1cd68:	1f 93       	push	r17
   1cd6a:	0f 93       	push	r16
   1cd6c:	ff 92       	push	r15
   1cd6e:	ef 92       	push	r14
   1cd70:	8f e3       	ldi	r24, 0x3F	; 63
   1cd72:	94 e3       	ldi	r25, 0x34	; 52
   1cd74:	1f 92       	push	r1
   1cd76:	9f 93       	push	r25
   1cd78:	8f 93       	push	r24
   1cd7a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(0);
   1cd7e:	8d b7       	in	r24, 0x3d	; 61
   1cd80:	9e b7       	in	r25, 0x3e	; 62
   1cd82:	07 96       	adiw	r24, 0x07	; 7
   1cd84:	0f b6       	in	r0, 0x3f	; 63
   1cd86:	f8 94       	cli
   1cd88:	9e bf       	out	0x3e, r25	; 62
   1cd8a:	0f be       	out	0x3f, r0	; 63
   1cd8c:	8d bf       	out	0x3d, r24	; 61
   1cd8e:	80 e0       	ldi	r24, 0x00	; 0
   1cd90:	90 e0       	ldi	r25, 0x00	; 0
   1cd92:	34 c0       	rjmp	.+104    	; 0x1cdfc <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1cd94:	2a a1       	ldd	r18, Y+34	; 0x22
   1cd96:	3b a1       	ldd	r19, Y+35	; 0x23
   1cd98:	21 50       	subi	r18, 0x01	; 1
   1cd9a:	31 09       	sbc	r19, r1
   1cd9c:	fe 01       	movw	r30, r28
   1cd9e:	e6 5a       	subi	r30, 0xA6	; 166
   1cda0:	ff 4f       	sbci	r31, 0xFF	; 255
   1cda2:	82 17       	cp	r24, r18
   1cda4:	93 07       	cpc	r25, r19
   1cda6:	2c f0       	brlt	.+10     	; 0x1cdb2 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1cda8:	2f ef       	ldi	r18, 0xFF	; 255
   1cdaa:	3f ef       	ldi	r19, 0xFF	; 255
   1cdac:	31 83       	std	Z+1, r19	; 0x01
   1cdae:	20 83       	st	Z, r18
   1cdb0:	02 c0       	rjmp	.+4      	; 0x1cdb6 <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1cdb2:	11 82       	std	Z+1, r1	; 0x01
   1cdb4:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1cdb6:	bc 01       	movw	r22, r24
   1cdb8:	ce 01       	movw	r24, r28
   1cdba:	0e 94 67 d4 	call	0x1a8ce	; 0x1a8ce <lif_writedirindex>
   1cdbe:	89 2b       	or	r24, r25
   1cdc0:	21 f4       	brne	.+8      	; 0x1cdca <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cdc2:	ce 01       	movw	r24, r28
   1cdc4:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1cdc8:	17 c0       	rjmp	.+46     	; 0x1cdf8 <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1cdca:	ce 01       	movw	r24, r28
   1cdcc:	0e 94 db d4 	call	0x1a9b6	; 0x1a9b6 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cdd0:	ce 01       	movw	r24, r28
   1cdd2:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1cdd6:	1f 93       	push	r17
   1cdd8:	0f 93       	push	r16
   1cdda:	80 e3       	ldi	r24, 0x30	; 48
   1cddc:	94 e3       	ldi	r25, 0x34	; 52
   1cdde:	1f 92       	push	r1
   1cde0:	9f 93       	push	r25
   1cde2:	8f 93       	push	r24
   1cde4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    return(1);
   1cde8:	0f 90       	pop	r0
   1cdea:	0f 90       	pop	r0
   1cdec:	0f 90       	pop	r0
   1cdee:	0f 90       	pop	r0
   1cdf0:	0f 90       	pop	r0
   1cdf2:	81 e0       	ldi	r24, 0x01	; 1
   1cdf4:	90 e0       	ldi	r25, 0x00	; 0
   1cdf6:	02 c0       	rjmp	.+4      	; 0x1cdfc <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1cdf8:	8f ef       	ldi	r24, 0xFF	; 255
   1cdfa:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1cdfc:	cd b7       	in	r28, 0x3d	; 61
   1cdfe:	de b7       	in	r29, 0x3e	; 62
   1ce00:	e6 e0       	ldi	r30, 0x06	; 6
   1ce02:	2b c6       	rjmp	.+3158   	; 0x1da5a <__epilogue_restores__+0x18>

0001ce04 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1ce04:	a0 e0       	ldi	r26, 0x00	; 0
   1ce06:	b0 e0       	ldi	r27, 0x00	; 0
   1ce08:	e7 e0       	ldi	r30, 0x07	; 7
   1ce0a:	f7 ee       	ldi	r31, 0xE7	; 231
   1ce0c:	06 c6       	rjmp	.+3084   	; 0x1da1a <__prologue_saves__+0x10>
   1ce0e:	6c 01       	movw	r12, r24
   1ce10:	8b 01       	movw	r16, r22
   1ce12:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1ce14:	fc 01       	movw	r30, r24
   1ce16:	80 81       	ld	r24, Z
   1ce18:	81 11       	cpse	r24, r1
   1ce1a:	03 c0       	rjmp	.+6      	; 0x1ce22 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1ce1c:	88 e0       	ldi	r24, 0x08	; 8
   1ce1e:	94 e3       	ldi	r25, 0x34	; 52
   1ce20:	06 c0       	rjmp	.+12     	; 0x1ce2e <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1ce22:	fb 01       	movw	r30, r22
   1ce24:	80 81       	ld	r24, Z
   1ce26:	81 11       	cpse	r24, r1
   1ce28:	0b c0       	rjmp	.+22     	; 0x1ce40 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1ce2a:	81 ee       	ldi	r24, 0xE1	; 225
   1ce2c:	93 e3       	ldi	r25, 0x33	; 51
   1ce2e:	1f 92       	push	r1
   1ce30:	9f 93       	push	r25
   1ce32:	8f 93       	push	r24
   1ce34:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
   1ce38:	0f 90       	pop	r0
   1ce3a:	0f 90       	pop	r0
   1ce3c:	0f 90       	pop	r0
   1ce3e:	62 c0       	rjmp	.+196    	; 0x1cf04 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1ce40:	fa 01       	movw	r30, r20
   1ce42:	80 81       	ld	r24, Z
   1ce44:	81 11       	cpse	r24, r1
   1ce46:	03 c0       	rjmp	.+6      	; 0x1ce4e <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1ce48:	8a eb       	ldi	r24, 0xBA	; 186
   1ce4a:	93 e3       	ldi	r25, 0x33	; 51
   1ce4c:	f0 cf       	rjmp	.-32     	; 0x1ce2e <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1ce4e:	ca 01       	movw	r24, r20
   1ce50:	0e 94 f1 cb 	call	0x197e2	; 0x197e2 <lif_checkname>
   1ce54:	89 2b       	or	r24, r25
   1ce56:	19 f4       	brne	.+6      	; 0x1ce5e <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1ce58:	84 e8       	ldi	r24, 0x84	; 132
   1ce5a:	93 e3       	ldi	r25, 0x33	; 51
   1ce5c:	e8 cf       	rjmp	.-48     	; 0x1ce2e <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1ce5e:	6a e7       	ldi	r22, 0x7A	; 122
   1ce60:	78 e0       	ldi	r23, 0x08	; 8
   1ce62:	c6 01       	movw	r24, r12
   1ce64:	0e 94 75 da 	call	0x1b4ea	; 0x1b4ea <lif_open_volume>
   1ce68:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1ce6a:	00 97       	sbiw	r24, 0x00	; 0
   1ce6c:	09 f4       	brne	.+2      	; 0x1ce70 <lif_rename_file+0x6c>
   1ce6e:	4a c0       	rjmp	.+148    	; 0x1cf04 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1ce70:	b8 01       	movw	r22, r16
   1ce72:	0e 94 e2 dc 	call	0x1b9c4	; 0x1b9c4 <lif_find_file>
   1ce76:	5c 01       	movw	r10, r24
    if(index == -1)
   1ce78:	01 96       	adiw	r24, 0x01	; 1
   1ce7a:	c9 f4       	brne	.+50     	; 0x1ceae <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1ce7c:	1f 93       	push	r17
   1ce7e:	0f 93       	push	r16
   1ce80:	df 92       	push	r13
   1ce82:	cf 92       	push	r12
   1ce84:	8b e5       	ldi	r24, 0x5B	; 91
   1ce86:	93 e3       	ldi	r25, 0x33	; 51
   1ce88:	1f 92       	push	r1
   1ce8a:	9f 93       	push	r25
   1ce8c:	8f 93       	push	r24
   1ce8e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ce92:	ce 01       	movw	r24, r28
   1ce94:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1ce98:	8d b7       	in	r24, 0x3d	; 61
   1ce9a:	9e b7       	in	r25, 0x3e	; 62
   1ce9c:	07 96       	adiw	r24, 0x07	; 7
   1ce9e:	0f b6       	in	r0, 0x3f	; 63
   1cea0:	f8 94       	cli
   1cea2:	9e bf       	out	0x3e, r25	; 62
   1cea4:	0f be       	out	0x3f, r0	; 63
   1cea6:	8d bf       	out	0x3d, r24	; 61
   1cea8:	80 e0       	ldi	r24, 0x00	; 0
   1ceaa:	90 e0       	ldi	r25, 0x00	; 0
   1ceac:	2d c0       	rjmp	.+90     	; 0x1cf08 <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1ceae:	4a e0       	ldi	r20, 0x0A	; 10
   1ceb0:	50 e0       	ldi	r21, 0x00	; 0
   1ceb2:	b7 01       	movw	r22, r14
   1ceb4:	ce 01       	movw	r24, r28
   1ceb6:	81 5b       	subi	r24, 0xB1	; 177
   1ceb8:	9f 4f       	sbci	r25, 0xFF	; 255
   1ceba:	0e 94 2b cc 	call	0x19856	; 0x19856 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1cebe:	b5 01       	movw	r22, r10
   1cec0:	ce 01       	movw	r24, r28
   1cec2:	0e 94 67 d4 	call	0x1a8ce	; 0x1a8ce <lif_writedirindex>
   1cec6:	89 2b       	or	r24, r25
   1cec8:	21 f4       	brne	.+8      	; 0x1ced2 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ceca:	ce 01       	movw	r24, r28
   1cecc:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
   1ced0:	19 c0       	rjmp	.+50     	; 0x1cf04 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1ced2:	ff 92       	push	r15
   1ced4:	ef 92       	push	r14
   1ced6:	1f 93       	push	r17
   1ced8:	0f 93       	push	r16
   1ceda:	84 e4       	ldi	r24, 0x44	; 68
   1cedc:	93 e3       	ldi	r25, 0x33	; 51
   1cede:	1f 92       	push	r1
   1cee0:	9f 93       	push	r25
   1cee2:	8f 93       	push	r24
   1cee4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cee8:	ce 01       	movw	r24, r28
   1ceea:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1ceee:	ed b7       	in	r30, 0x3d	; 61
   1cef0:	fe b7       	in	r31, 0x3e	; 62
   1cef2:	37 96       	adiw	r30, 0x07	; 7
   1cef4:	0f b6       	in	r0, 0x3f	; 63
   1cef6:	f8 94       	cli
   1cef8:	fe bf       	out	0x3e, r31	; 62
   1cefa:	0f be       	out	0x3f, r0	; 63
   1cefc:	ed bf       	out	0x3d, r30	; 61
   1cefe:	81 e0       	ldi	r24, 0x01	; 1
   1cf00:	90 e0       	ldi	r25, 0x00	; 0
   1cf02:	02 c0       	rjmp	.+4      	; 0x1cf08 <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1cf04:	8f ef       	ldi	r24, 0xFF	; 255
   1cf06:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1cf08:	cd b7       	in	r28, 0x3d	; 61
   1cf0a:	de b7       	in	r29, 0x3e	; 62
   1cf0c:	ea e0       	ldi	r30, 0x0A	; 10
   1cf0e:	a1 c5       	rjmp	.+2882   	; 0x1da52 <__epilogue_restores__+0x10>

0001cf10 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1cf10:	4f 92       	push	r4
   1cf12:	5f 92       	push	r5
   1cf14:	6f 92       	push	r6
   1cf16:	7f 92       	push	r7
   1cf18:	af 92       	push	r10
   1cf1a:	bf 92       	push	r11
   1cf1c:	cf 92       	push	r12
   1cf1e:	df 92       	push	r13
   1cf20:	ef 92       	push	r14
   1cf22:	ff 92       	push	r15
   1cf24:	0f 93       	push	r16
   1cf26:	1f 93       	push	r17
   1cf28:	cf 93       	push	r28
   1cf2a:	df 93       	push	r29
   1cf2c:	27 01       	movw	r4, r14
   1cf2e:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1cf30:	dc 01       	movw	r26, r24
   1cf32:	ec 91       	ld	r30, X
   1cf34:	e1 11       	cpse	r30, r1
   1cf36:	03 c0       	rjmp	.+6      	; 0x1cf3e <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1cf38:	8b e1       	ldi	r24, 0x1B	; 27
   1cf3a:	93 e3       	ldi	r25, 0x33	; 51
   1cf3c:	16 c0       	rjmp	.+44     	; 0x1cf6a <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1cf3e:	db 01       	movw	r26, r22
   1cf40:	ec 91       	ld	r30, X
   1cf42:	e1 11       	cpse	r30, r1
   1cf44:	03 c0       	rjmp	.+6      	; 0x1cf4c <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1cf46:	86 ef       	ldi	r24, 0xF6	; 246
   1cf48:	92 e3       	ldi	r25, 0x32	; 50
   1cf4a:	0f c0       	rjmp	.+30     	; 0x1cf6a <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1cf4c:	21 15       	cp	r18, r1
   1cf4e:	31 05       	cpc	r19, r1
   1cf50:	41 05       	cpc	r20, r1
   1cf52:	51 05       	cpc	r21, r1
   1cf54:	19 f4       	brne	.+6      	; 0x1cf5c <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1cf56:	83 ed       	ldi	r24, 0xD3	; 211
   1cf58:	92 e3       	ldi	r25, 0x32	; 50
   1cf5a:	07 c0       	rjmp	.+14     	; 0x1cf6a <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1cf5c:	e1 14       	cp	r14, r1
   1cf5e:	f1 04       	cpc	r15, r1
   1cf60:	01 05       	cpc	r16, r1
   1cf62:	11 05       	cpc	r17, r1
   1cf64:	59 f4       	brne	.+22     	; 0x1cf7c <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1cf66:	83 eb       	ldi	r24, 0xB3	; 179
   1cf68:	92 e3       	ldi	r25, 0x32	; 50
   1cf6a:	1f 92       	push	r1
   1cf6c:	9f 93       	push	r25
   1cf6e:	8f 93       	push	r24
   1cf70:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
        return(-1);
   1cf74:	0f 90       	pop	r0
   1cf76:	0f 90       	pop	r0
   1cf78:	0f 90       	pop	r0
   1cf7a:	30 c0       	rjmp	.+96     	; 0x1cfdc <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1cf7c:	67 01       	movw	r12, r14
   1cf7e:	78 01       	movw	r14, r16
   1cf80:	b2 e0       	ldi	r27, 0x02	; 2
   1cf82:	cb 1a       	sub	r12, r27
   1cf84:	d1 08       	sbc	r13, r1
   1cf86:	e1 08       	sbc	r14, r1
   1cf88:	f1 08       	sbc	r15, r1
   1cf8a:	56 01       	movw	r10, r12
   1cf8c:	67 01       	movw	r12, r14
   1cf8e:	a2 1a       	sub	r10, r18
   1cf90:	b3 0a       	sbc	r11, r19
   1cf92:	c4 0a       	sbc	r12, r20
   1cf94:	d5 0a       	sbc	r13, r21
   1cf96:	79 01       	movw	r14, r18
   1cf98:	8a 01       	movw	r16, r20
   1cf9a:	22 e0       	ldi	r18, 0x02	; 2
   1cf9c:	30 e0       	ldi	r19, 0x00	; 0
   1cf9e:	40 e0       	ldi	r20, 0x00	; 0
   1cfa0:	50 e0       	ldi	r21, 0x00	; 0
   1cfa2:	0e 94 e3 d5 	call	0x1abc6	; 0x1abc6 <lif_create_volume>
    if(LIF == NULL)
   1cfa6:	00 97       	sbiw	r24, 0x00	; 0
   1cfa8:	c9 f0       	breq	.+50     	; 0x1cfdc <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1cfaa:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <lif_close_volume>

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
   1cfae:	82 01       	movw	r16, r4
   1cfb0:	d6 2d       	mov	r29, r6
   1cfb2:	c7 2d       	mov	r28, r7
   1cfb4:	7f 92       	push	r7
   1cfb6:	6f 92       	push	r6
   1cfb8:	5f 92       	push	r5
   1cfba:	4f 92       	push	r4
   1cfbc:	83 e9       	ldi	r24, 0x93	; 147
   1cfbe:	92 e3       	ldi	r25, 0x32	; 50
   1cfc0:	1f 92       	push	r1
   1cfc2:	9f 93       	push	r25
   1cfc4:	8f 93       	push	r24
   1cfc6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    return(end);
   1cfca:	8d b7       	in	r24, 0x3d	; 61
   1cfcc:	9e b7       	in	r25, 0x3e	; 62
   1cfce:	07 96       	adiw	r24, 0x07	; 7
   1cfd0:	0f b6       	in	r0, 0x3f	; 63
   1cfd2:	f8 94       	cli
   1cfd4:	9e bf       	out	0x3e, r25	; 62
   1cfd6:	0f be       	out	0x3f, r0	; 63
   1cfd8:	8d bf       	out	0x3d, r24	; 61
   1cfda:	04 c0       	rjmp	.+8      	; 0x1cfe4 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1cfdc:	0f ef       	ldi	r16, 0xFF	; 255
   1cfde:	1f ef       	ldi	r17, 0xFF	; 255
   1cfe0:	df ef       	ldi	r29, 0xFF	; 255
   1cfe2:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
    return(end);
}
   1cfe4:	b8 01       	movw	r22, r16
   1cfe6:	8d 2f       	mov	r24, r29
   1cfe8:	9c 2f       	mov	r25, r28
   1cfea:	df 91       	pop	r29
   1cfec:	cf 91       	pop	r28
   1cfee:	1f 91       	pop	r17
   1cff0:	0f 91       	pop	r16
   1cff2:	ff 90       	pop	r15
   1cff4:	ef 90       	pop	r14
   1cff6:	df 90       	pop	r13
   1cff8:	cf 90       	pop	r12
   1cffa:	bf 90       	pop	r11
   1cffc:	af 90       	pop	r10
   1cffe:	7f 90       	pop	r7
   1d000:	6f 90       	pop	r6
   1d002:	5f 90       	pop	r5
   1d004:	4f 90       	pop	r4
   1d006:	08 95       	ret

0001d008 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1d008:	a0 e0       	ldi	r26, 0x00	; 0
   1d00a:	b0 e0       	ldi	r27, 0x00	; 0
   1d00c:	e9 e0       	ldi	r30, 0x09	; 9
   1d00e:	f8 ee       	ldi	r31, 0xE8	; 232
   1d010:	02 c5       	rjmp	.+2564   	; 0x1da16 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1d012:	fb 01       	movw	r30, r22
   1d014:	20 81       	ld	r18, Z
   1d016:	31 81       	ldd	r19, Z+1	; 0x01
   1d018:	23 2b       	or	r18, r19
   1d01a:	59 f0       	breq	.+22     	; 0x1d032 <lif_tests+0x2a>
   1d01c:	8b 01       	movw	r16, r22
   1d01e:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1d020:	fb 01       	movw	r30, r22
   1d022:	a2 80       	ldd	r10, Z+2	; 0x02
   1d024:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1d026:	02 97       	sbiw	r24, 0x02	; 2
   1d028:	3c f4       	brge	.+14     	; 0x1d038 <lif_tests+0x30>
    {
        lif_help(1);
   1d02a:	81 e0       	ldi	r24, 0x01	; 1
   1d02c:	90 e0       	ldi	r25, 0x00	; 0
   1d02e:	0e 94 e8 c9 	call	0x193d0	; 0x193d0 <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1d032:	80 e0       	ldi	r24, 0x00	; 0
   1d034:	90 e0       	ldi	r25, 0x00	; 0
   1d036:	0a c1       	rjmp	.+532    	; 0x1d24c <lif_tests+0x244>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1d038:	a1 14       	cp	r10, r1
   1d03a:	b1 04       	cpc	r11, r1
   1d03c:	b1 f3       	breq	.-20     	; 0x1d02a <lif_tests+0x22>
   1d03e:	66 e4       	ldi	r22, 0x46	; 70
   1d040:	76 e1       	ldi	r23, 0x16	; 22
   1d042:	c5 01       	movw	r24, r10
   1d044:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   1d048:	89 2b       	or	r24, r25
   1d04a:	79 f7       	brne	.-34     	; 0x1d02a <lif_tests+0x22>
   1d04c:	65 e4       	ldi	r22, 0x45	; 69
   1d04e:	76 e1       	ldi	r23, 0x16	; 22
   1d050:	c5 01       	movw	r24, r10
   1d052:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   1d056:	89 2b       	or	r24, r25
   1d058:	41 f7       	brne	.-48     	; 0x1d02a <lif_tests+0x22>
   1d05a:	6b e4       	ldi	r22, 0x4B	; 75
   1d05c:	76 e1       	ldi	r23, 0x16	; 22
   1d05e:	c5 01       	movw	r24, r10
   1d060:	0e 94 29 33 	call	0x6652	; 0x6652 <MATCH>
   1d064:	89 2b       	or	r24, r25
   1d066:	09 f7       	brne	.-62     	; 0x1d02a <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1d068:	94 01       	movw	r18, r8
   1d06a:	42 e0       	ldi	r20, 0x02	; 2
   1d06c:	50 e0       	ldi	r21, 0x00	; 0
   1d06e:	6e e4       	ldi	r22, 0x4E	; 78
   1d070:	76 e1       	ldi	r23, 0x16	; 22
   1d072:	c5 01       	movw	r24, r10
   1d074:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d078:	89 2b       	or	r24, r25
   1d07a:	69 f0       	breq	.+26     	; 0x1d096 <lif_tests+0x8e>
    {
		debuglevel = 0xffff;
   1d07c:	8f ef       	ldi	r24, 0xFF	; 255
   1d07e:	9f ef       	ldi	r25, 0xFF	; 255
   1d080:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1d084:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1d088:	f8 01       	movw	r30, r16
   1d08a:	a4 80       	ldd	r10, Z+4	; 0x04
   1d08c:	b5 80       	ldd	r11, Z+5	; 0x05
   1d08e:	f3 e0       	ldi	r31, 0x03	; 3
   1d090:	ef 2e       	mov	r14, r31
   1d092:	f1 2c       	mov	r15, r1
   1d094:	03 c0       	rjmp	.+6      	; 0x1d09c <lif_tests+0x94>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1d096:	e2 e0       	ldi	r30, 0x02	; 2
   1d098:	ee 2e       	mov	r14, r30
   1d09a:	f1 2c       	mov	r15, r1
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1d09c:	67 01       	movw	r12, r14
   1d09e:	f3 e0       	ldi	r31, 0x03	; 3
   1d0a0:	cf 0e       	add	r12, r31
   1d0a2:	d1 1c       	adc	r13, r1
   1d0a4:	94 01       	movw	r18, r8
   1d0a6:	a6 01       	movw	r20, r12
   1d0a8:	61 e5       	ldi	r22, 0x51	; 81
   1d0aa:	76 e1       	ldi	r23, 0x16	; 22
   1d0ac:	c5 01       	movw	r24, r10
   1d0ae:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d0b2:	e7 01       	movw	r28, r14
   1d0b4:	22 96       	adiw	r28, 0x02	; 2
   1d0b6:	89 2b       	or	r24, r25
   1d0b8:	79 f0       	breq	.+30     	; 0x1d0d8 <lif_tests+0xd0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1d0ba:	cc 0f       	add	r28, r28
   1d0bc:	dd 1f       	adc	r29, r29
   1d0be:	c0 0f       	add	r28, r16
   1d0c0:	d1 1f       	adc	r29, r17
   1d0c2:	48 81       	ld	r20, Y
   1d0c4:	59 81       	ldd	r21, Y+1	; 0x01
   1d0c6:	fe 01       	movw	r30, r28
   1d0c8:	32 97       	sbiw	r30, 0x02	; 2
   1d0ca:	60 81       	ld	r22, Z
   1d0cc:	71 81       	ldd	r23, Z+1	; 0x01
   1d0ce:	24 97       	sbiw	r28, 0x04	; 4
   1d0d0:	88 81       	ld	r24, Y
   1d0d2:	99 81       	ldd	r25, Y+1	; 0x01
   1d0d4:	67 dc       	rcall	.-1842   	; 0x1c9a4 <lif_add_lif_file>
   1d0d6:	b8 c0       	rjmp	.+368    	; 0x1d248 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1d0d8:	94 01       	movw	r18, r8
   1d0da:	a6 01       	movw	r20, r12
   1d0dc:	68 e5       	ldi	r22, 0x58	; 88
   1d0de:	76 e1       	ldi	r23, 0x16	; 22
   1d0e0:	c5 01       	movw	r24, r10
   1d0e2:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d0e6:	89 2b       	or	r24, r25
   1d0e8:	81 f0       	breq	.+32     	; 0x1d10a <lif_tests+0x102>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1d0ea:	cc 0f       	add	r28, r28
   1d0ec:	dd 1f       	adc	r29, r29
   1d0ee:	c0 0f       	add	r28, r16
   1d0f0:	d1 1f       	adc	r29, r17
   1d0f2:	48 81       	ld	r20, Y
   1d0f4:	59 81       	ldd	r21, Y+1	; 0x01
   1d0f6:	fe 01       	movw	r30, r28
   1d0f8:	32 97       	sbiw	r30, 0x02	; 2
   1d0fa:	60 81       	ld	r22, Z
   1d0fc:	71 81       	ldd	r23, Z+1	; 0x01
   1d0fe:	24 97       	sbiw	r28, 0x04	; 4
   1d100:	88 81       	ld	r24, Y
   1d102:	99 81       	ldd	r25, Y+1	; 0x01
   1d104:	0e 94 66 df 	call	0x1becc	; 0x1becc <lif_add_ascii_file_as_e010>
   1d108:	9f c0       	rjmp	.+318    	; 0x1d248 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1d10a:	94 01       	movw	r18, r8
   1d10c:	ae 01       	movw	r20, r28
   1d10e:	6c e5       	ldi	r22, 0x5C	; 92
   1d110:	76 e1       	ldi	r23, 0x16	; 22
   1d112:	c5 01       	movw	r24, r10
   1d114:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d118:	89 2b       	or	r24, r25
   1d11a:	71 f0       	breq	.+28     	; 0x1d138 <lif_tests+0x130>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1d11c:	c7 01       	movw	r24, r14
   1d11e:	01 96       	adiw	r24, 0x01	; 1
   1d120:	88 0f       	add	r24, r24
   1d122:	99 1f       	adc	r25, r25
   1d124:	e8 01       	movw	r28, r16
   1d126:	c8 0f       	add	r28, r24
   1d128:	d9 1f       	adc	r29, r25
   1d12a:	68 81       	ld	r22, Y
   1d12c:	79 81       	ldd	r23, Y+1	; 0x01
   1d12e:	22 97       	sbiw	r28, 0x02	; 2
   1d130:	88 81       	ld	r24, Y
   1d132:	99 81       	ldd	r25, Y+1	; 0x01
   1d134:	cf dd       	rcall	.-1122   	; 0x1ccd4 <lif_del_file>
   1d136:	88 c0       	rjmp	.+272    	; 0x1d248 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1d138:	94 01       	movw	r18, r8
   1d13a:	a7 01       	movw	r20, r14
   1d13c:	4c 5f       	subi	r20, 0xFC	; 252
   1d13e:	5f 4f       	sbci	r21, 0xFF	; 255
   1d140:	60 e6       	ldi	r22, 0x60	; 96
   1d142:	76 e1       	ldi	r23, 0x16	; 22
   1d144:	c5 01       	movw	r24, r10
   1d146:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d14a:	89 2b       	or	r24, r25
   1d14c:	f1 f0       	breq	.+60     	; 0x1d18a <lif_tests+0x182>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1d14e:	e6 01       	movw	r28, r12
   1d150:	cc 0f       	add	r28, r28
   1d152:	dd 1f       	adc	r29, r29
   1d154:	c0 0f       	add	r28, r16
   1d156:	d1 1f       	adc	r29, r17
   1d158:	88 81       	ld	r24, Y
   1d15a:	99 81       	ldd	r25, Y+1	; 0x01
   1d15c:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <atol>
   1d160:	6b 01       	movw	r12, r22
   1d162:	7c 01       	movw	r14, r24
   1d164:	fe 01       	movw	r30, r28
   1d166:	32 97       	sbiw	r30, 0x02	; 2
   1d168:	80 81       	ld	r24, Z
   1d16a:	91 81       	ldd	r25, Z+1	; 0x01
   1d16c:	0e 94 a7 47 	call	0x8f4e	; 0x8f4e <atol>
   1d170:	9b 01       	movw	r18, r22
   1d172:	ac 01       	movw	r20, r24
   1d174:	fe 01       	movw	r30, r28
   1d176:	34 97       	sbiw	r30, 0x04	; 4
   1d178:	60 81       	ld	r22, Z
   1d17a:	71 81       	ldd	r23, Z+1	; 0x01
   1d17c:	26 97       	sbiw	r28, 0x06	; 6
   1d17e:	87 01       	movw	r16, r14
   1d180:	76 01       	movw	r14, r12
   1d182:	88 81       	ld	r24, Y
   1d184:	99 81       	ldd	r25, Y+1	; 0x01
   1d186:	c4 de       	rcall	.-632    	; 0x1cf10 <lif_create_image>
   1d188:	5f c0       	rjmp	.+190    	; 0x1d248 <lif_tests+0x240>
        return(1);
    }
    else if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1d18a:	94 01       	movw	r18, r8
   1d18c:	a7 01       	movw	r20, r14
   1d18e:	4f 5f       	subi	r20, 0xFF	; 255
   1d190:	5f 4f       	sbci	r21, 0xFF	; 255
   1d192:	6d e4       	ldi	r22, 0x4D	; 77
   1d194:	7b e0       	ldi	r23, 0x0B	; 11
   1d196:	c5 01       	movw	r24, r10
   1d198:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d19c:	89 2b       	or	r24, r25
   1d19e:	59 f0       	breq	.+22     	; 0x1d1b6 <lif_tests+0x1ae>
    {
        lif_dir(argv[ind]);
   1d1a0:	c7 01       	movw	r24, r14
   1d1a2:	88 0f       	add	r24, r24
   1d1a4:	99 1f       	adc	r25, r25
   1d1a6:	e8 01       	movw	r28, r16
   1d1a8:	c8 0f       	add	r28, r24
   1d1aa:	d9 1f       	adc	r29, r25
   1d1ac:	88 81       	ld	r24, Y
   1d1ae:	99 81       	ldd	r25, Y+1	; 0x01
   1d1b0:	0e 94 75 db 	call	0x1b6ea	; 0x1b6ea <lif_dir>
   1d1b4:	49 c0       	rjmp	.+146    	; 0x1d248 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1d1b6:	94 01       	movw	r18, r8
   1d1b8:	a6 01       	movw	r20, r12
   1d1ba:	67 e6       	ldi	r22, 0x67	; 103
   1d1bc:	76 e1       	ldi	r23, 0x16	; 22
   1d1be:	c5 01       	movw	r24, r10
   1d1c0:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d1c4:	89 2b       	or	r24, r25
   1d1c6:	79 f0       	breq	.+30     	; 0x1d1e6 <lif_tests+0x1de>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1d1c8:	cc 0f       	add	r28, r28
   1d1ca:	dd 1f       	adc	r29, r29
   1d1cc:	c0 0f       	add	r28, r16
   1d1ce:	d1 1f       	adc	r29, r17
   1d1d0:	48 81       	ld	r20, Y
   1d1d2:	59 81       	ldd	r21, Y+1	; 0x01
   1d1d4:	fe 01       	movw	r30, r28
   1d1d6:	32 97       	sbiw	r30, 0x02	; 2
   1d1d8:	60 81       	ld	r22, Z
   1d1da:	71 81       	ldd	r23, Z+1	; 0x01
   1d1dc:	24 97       	sbiw	r28, 0x04	; 4
   1d1de:	88 81       	ld	r24, Y
   1d1e0:	99 81       	ldd	r25, Y+1	; 0x01
   1d1e2:	99 da       	rcall	.-2766   	; 0x1c716 <lif_extract_lif_as_lif>
   1d1e4:	31 c0       	rjmp	.+98     	; 0x1d248 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1d1e6:	94 01       	movw	r18, r8
   1d1e8:	a6 01       	movw	r20, r12
   1d1ea:	62 e7       	ldi	r22, 0x72	; 114
   1d1ec:	76 e1       	ldi	r23, 0x16	; 22
   1d1ee:	c5 01       	movw	r24, r10
   1d1f0:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d1f4:	89 2b       	or	r24, r25
   1d1f6:	81 f0       	breq	.+32     	; 0x1d218 <lif_tests+0x210>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1d1f8:	cc 0f       	add	r28, r28
   1d1fa:	dd 1f       	adc	r29, r29
   1d1fc:	c0 0f       	add	r28, r16
   1d1fe:	d1 1f       	adc	r29, r17
   1d200:	48 81       	ld	r20, Y
   1d202:	59 81       	ldd	r21, Y+1	; 0x01
   1d204:	fe 01       	movw	r30, r28
   1d206:	32 97       	sbiw	r30, 0x02	; 2
   1d208:	60 81       	ld	r22, Z
   1d20a:	71 81       	ldd	r23, Z+1	; 0x01
   1d20c:	24 97       	sbiw	r28, 0x04	; 4
   1d20e:	88 81       	ld	r24, Y
   1d210:	99 81       	ldd	r25, Y+1	; 0x01
   1d212:	0e 94 9f e0 	call	0x1c13e	; 0x1c13e <lif_extract_e010_as_ascii>
   1d216:	18 c0       	rjmp	.+48     	; 0x1d248 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1d218:	94 01       	movw	r18, r8
   1d21a:	a6 01       	movw	r20, r12
   1d21c:	6a e5       	ldi	r22, 0x5A	; 90
   1d21e:	7b e0       	ldi	r23, 0x0B	; 11
   1d220:	c5 01       	movw	r24, r10
   1d222:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d226:	89 2b       	or	r24, r25
   1d228:	09 f4       	brne	.+2      	; 0x1d22c <lif_tests+0x224>
   1d22a:	03 cf       	rjmp	.-506    	; 0x1d032 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1d22c:	cc 0f       	add	r28, r28
   1d22e:	dd 1f       	adc	r29, r29
   1d230:	c0 0f       	add	r28, r16
   1d232:	d1 1f       	adc	r29, r17
   1d234:	48 81       	ld	r20, Y
   1d236:	59 81       	ldd	r21, Y+1	; 0x01
   1d238:	fe 01       	movw	r30, r28
   1d23a:	32 97       	sbiw	r30, 0x02	; 2
   1d23c:	60 81       	ld	r22, Z
   1d23e:	71 81       	ldd	r23, Z+1	; 0x01
   1d240:	24 97       	sbiw	r28, 0x04	; 4
   1d242:	88 81       	ld	r24, Y
   1d244:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1d246:	de dd       	rcall	.-1092   	; 0x1ce04 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1d248:	81 e0       	ldi	r24, 0x01	; 1
   1d24a:	90 e0       	ldi	r25, 0x00	; 0
   1d24c:	cd b7       	in	r28, 0x3d	; 61
   1d24e:	de b7       	in	r29, 0x3e	; 62
   1d250:	ec e0       	ldi	r30, 0x0C	; 12
   1d252:	fd c3       	rjmp	.+2042   	; 0x1da4e <__epilogue_restores__+0xc>

0001d254 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1d254:	8d ea       	ldi	r24, 0xAD	; 173
   1d256:	99 e4       	ldi	r25, 0x49	; 73
   1d258:	1f 92       	push	r1
   1d25a:	9f 93       	push	r25
   1d25c:	8f 93       	push	r24
   1d25e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1d262:	8e e8       	ldi	r24, 0x8E	; 142
   1d264:	99 e4       	ldi	r25, 0x49	; 73
   1d266:	1f 92       	push	r1
   1d268:	9f 93       	push	r25
   1d26a:	8f 93       	push	r24
   1d26c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1d270:	81 e7       	ldi	r24, 0x71	; 113
   1d272:	99 e4       	ldi	r25, 0x49	; 73
   1d274:	1f 92       	push	r1
   1d276:	9f 93       	push	r25
   1d278:	8f 93       	push	r24
   1d27a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf(" GNU version 3\n");
   1d27e:	81 e6       	ldi	r24, 0x61	; 97
   1d280:	99 e4       	ldi	r25, 0x49	; 73
   1d282:	1f 92       	push	r1
   1d284:	9f 93       	push	r25
   1d286:	8f 93       	push	r24
   1d288:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1d28c:	8a e3       	ldi	r24, 0x3A	; 58
   1d28e:	99 e4       	ldi	r25, 0x49	; 73
   1d290:	1f 92       	push	r1
   1d292:	9f 93       	push	r25
   1d294:	8f 93       	push	r24
   1d296:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1d29a:	8a e7       	ldi	r24, 0x7A	; 122
   1d29c:	96 e1       	ldi	r25, 0x16	; 22
   1d29e:	9f 93       	push	r25
   1d2a0:	8f 93       	push	r24
   1d2a2:	80 e2       	ldi	r24, 0x20	; 32
   1d2a4:	99 e4       	ldi	r25, 0x49	; 73
   1d2a6:	1f 92       	push	r1
   1d2a8:	9f 93       	push	r25
   1d2aa:	8f 93       	push	r24
   1d2ac:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1d2b0:	8e e9       	ldi	r24, 0x9E	; 158
   1d2b2:	96 e1       	ldi	r25, 0x16	; 22
   1d2b4:	9f 93       	push	r25
   1d2b6:	8f 93       	push	r24
   1d2b8:	86 e0       	ldi	r24, 0x06	; 6
   1d2ba:	99 e4       	ldi	r25, 0x49	; 73
   1d2bc:	1f 92       	push	r1
   1d2be:	9f 93       	push	r25
   1d2c0:	8f 93       	push	r24
   1d2c2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
    printf("\n");
   1d2c6:	84 e0       	ldi	r24, 0x04	; 4
   1d2c8:	99 e4       	ldi	r25, 0x49	; 73
   1d2ca:	1f 92       	push	r1
   1d2cc:	9f 93       	push	r25
   1d2ce:	8f 93       	push	r24
   1d2d0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
}
   1d2d4:	8d b7       	in	r24, 0x3d	; 61
   1d2d6:	9e b7       	in	r25, 0x3e	; 62
   1d2d8:	4c 96       	adiw	r24, 0x1c	; 28
   1d2da:	0f b6       	in	r0, 0x3f	; 63
   1d2dc:	f8 94       	cli
   1d2de:	9e bf       	out	0x3e, r25	; 62
   1d2e0:	0f be       	out	0x3f, r0	; 63
   1d2e2:	8d bf       	out	0x3d, r24	; 61
   1d2e4:	08 95       	ret

0001d2e6 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1d2e6:	85 ef       	ldi	r24, 0xF5	; 245
   1d2e8:	98 e4       	ldi	r25, 0x48	; 72
   1d2ea:	1f 92       	push	r1
   1d2ec:	9f 93       	push	r25
   1d2ee:	8f 93       	push	r24
   1d2f0:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    clock_elapsed_begin();
   1d2f4:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1d2f8:	82 ec       	ldi	r24, 0xC2	; 194
   1d2fa:	96 e1       	ldi	r25, 0x16	; 22
   1d2fc:	0e 94 34 36 	call	0x6c68	; 0x6c68 <clock_elapsed_end>

    clock_elapsed_begin();
   1d300:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <clock_elapsed_begin>
   1d304:	83 ef       	ldi	r24, 0xF3	; 243
   1d306:	91 e0       	ldi	r25, 0x01	; 1
   1d308:	01 97       	sbiw	r24, 0x01	; 1
   1d30a:	f1 f7       	brne	.-4      	; 0x1d308 <delay_tests+0x22>
   1d30c:	00 c0       	rjmp	.+0      	; 0x1d30e <delay_tests+0x28>
   1d30e:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1d310:	89 ed       	ldi	r24, 0xD9	; 217
   1d312:	96 e1       	ldi	r25, 0x16	; 22
   1d314:	0e 94 34 36 	call	0x6c68	; 0x6c68 <clock_elapsed_end>

    clock_elapsed_begin();
   1d318:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <clock_elapsed_begin>
   1d31c:	83 ec       	ldi	r24, 0xC3	; 195
   1d31e:	99 e0       	ldi	r25, 0x09	; 9
   1d320:	01 97       	sbiw	r24, 0x01	; 1
   1d322:	f1 f7       	brne	.-4      	; 0x1d320 <delay_tests+0x3a>
   1d324:	00 c0       	rjmp	.+0      	; 0x1d326 <delay_tests+0x40>
   1d326:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1d328:	88 ee       	ldi	r24, 0xE8	; 232
   1d32a:	96 e1       	ldi	r25, 0x16	; 22
   1d32c:	0e 94 34 36 	call	0x6c68	; 0x6c68 <clock_elapsed_end>

    printf("My delays\n");
   1d330:	8a ee       	ldi	r24, 0xEA	; 234
   1d332:	98 e4       	ldi	r25, 0x48	; 72
   1d334:	1f 92       	push	r1
   1d336:	9f 93       	push	r25
   1d338:	8f 93       	push	r24
   1d33a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>

    clock_elapsed_begin();
   1d33e:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <clock_elapsed_begin>
    delayus(100U);
   1d342:	64 e6       	ldi	r22, 0x64	; 100
   1d344:	70 e0       	ldi	r23, 0x00	; 0
   1d346:	80 e0       	ldi	r24, 0x00	; 0
   1d348:	90 e0       	ldi	r25, 0x00	; 0
   1d34a:	0e 94 99 2a 	call	0x5532	; 0x5532 <delayus>
    clock_elapsed_end("delayus(100)");
   1d34e:	87 ef       	ldi	r24, 0xF7	; 247
   1d350:	96 e1       	ldi	r25, 0x16	; 22
   1d352:	0e 94 34 36 	call	0x6c68	; 0x6c68 <clock_elapsed_end>

    clock_elapsed_begin();
   1d356:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <clock_elapsed_begin>
    delayus(500U);
   1d35a:	64 ef       	ldi	r22, 0xF4	; 244
   1d35c:	71 e0       	ldi	r23, 0x01	; 1
   1d35e:	80 e0       	ldi	r24, 0x00	; 0
   1d360:	90 e0       	ldi	r25, 0x00	; 0
   1d362:	0e 94 99 2a 	call	0x5532	; 0x5532 <delayus>
    clock_elapsed_end("delayus(500)");
   1d366:	84 e0       	ldi	r24, 0x04	; 4
   1d368:	97 e1       	ldi	r25, 0x17	; 23
   1d36a:	0e 94 34 36 	call	0x6c68	; 0x6c68 <clock_elapsed_end>

    clock_elapsed_begin();
   1d36e:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <clock_elapsed_begin>
    delayus(1100);
   1d372:	6c e4       	ldi	r22, 0x4C	; 76
   1d374:	74 e0       	ldi	r23, 0x04	; 4
   1d376:	80 e0       	ldi	r24, 0x00	; 0
   1d378:	90 e0       	ldi	r25, 0x00	; 0
   1d37a:	0e 94 99 2a 	call	0x5532	; 0x5532 <delayus>
    clock_elapsed_end("delayus(1100)");
   1d37e:	81 e1       	ldi	r24, 0x11	; 17
   1d380:	97 e1       	ldi	r25, 0x17	; 23
   1d382:	0e 94 34 36 	call	0x6c68	; 0x6c68 <clock_elapsed_end>

    clock_elapsed_begin();
   1d386:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <clock_elapsed_begin>
    delayms(1000);
   1d38a:	68 ee       	ldi	r22, 0xE8	; 232
   1d38c:	73 e0       	ldi	r23, 0x03	; 3
   1d38e:	80 e0       	ldi	r24, 0x00	; 0
   1d390:	90 e0       	ldi	r25, 0x00	; 0
   1d392:	0e 94 c6 2a 	call	0x558c	; 0x558c <delayms>
    clock_elapsed_end("delayms(1100)");
   1d396:	8f e1       	ldi	r24, 0x1F	; 31
   1d398:	97 e1       	ldi	r25, 0x17	; 23
   1d39a:	0e 94 34 36 	call	0x6c68	; 0x6c68 <clock_elapsed_end>
}
   1d39e:	0f 90       	pop	r0
   1d3a0:	0f 90       	pop	r0
   1d3a2:	0f 90       	pop	r0
   1d3a4:	0f 90       	pop	r0
   1d3a6:	0f 90       	pop	r0
   1d3a8:	0f 90       	pop	r0
   1d3aa:	08 95       	ret

0001d3ac <help>:
   1d3ac:	53 df       	rcall	.-346    	; 0x1d254 <copyright>
   1d3ae:	80 e0       	ldi	r24, 0x00	; 0
   1d3b0:	90 e0       	ldi	r25, 0x00	; 0
   1d3b2:	0e 94 f6 77 	call	0xefec	; 0xefec <fatfs_help>
   1d3b6:	80 e0       	ldi	r24, 0x00	; 0
   1d3b8:	90 e0       	ldi	r25, 0x00	; 0
   1d3ba:	0e 94 3e 84 	call	0x1087c	; 0x1087c <posix_help>
   1d3be:	80 e0       	ldi	r24, 0x00	; 0
   1d3c0:	90 e0       	ldi	r25, 0x00	; 0
   1d3c2:	0e 94 e8 c9 	call	0x193d0	; 0x193d0 <lif_help>
   1d3c6:	80 e0       	ldi	r24, 0x00	; 0
   1d3c8:	90 e0       	ldi	r25, 0x00	; 0
   1d3ca:	0e 94 7a 99 	call	0x132f4	; 0x132f4 <gpib_help>
   1d3ce:	8b ec       	ldi	r24, 0xCB	; 203
   1d3d0:	98 e4       	ldi	r25, 0x48	; 72
   1d3d2:	1f 92       	push	r1
   1d3d4:	9f 93       	push	r25
   1d3d6:	8f 93       	push	r24
   1d3d8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d3dc:	0f 90       	pop	r0
   1d3de:	0f 90       	pop	r0
   1d3e0:	0f 90       	pop	r0
   1d3e2:	08 95       	ret

0001d3e4 <task>:
   1d3e4:	a4 ee       	ldi	r26, 0xE4	; 228
   1d3e6:	b0 e0       	ldi	r27, 0x00	; 0
   1d3e8:	e7 ef       	ldi	r30, 0xF7	; 247
   1d3ea:	f9 ee       	ldi	r31, 0xE9	; 233
   1d3ec:	1a c3       	rjmp	.+1588   	; 0x1da22 <__prologue_saves__+0x18>
   1d3ee:	81 11       	cpse	r24, r1
   1d3f0:	0e 94 18 99 	call	0x13230	; 0x13230 <gpib_task>
   1d3f4:	80 e0       	ldi	r24, 0x00	; 0
   1d3f6:	0e 94 39 2c 	call	0x5872	; 0x5872 <uart_rx_count>
   1d3fa:	89 2b       	or	r24, r25
   1d3fc:	09 f4       	brne	.+2      	; 0x1d400 <task+0x1c>
   1d3fe:	a0 c0       	rjmp	.+320    	; 0x1d540 <task+0x15c>
   1d400:	88 ec       	ldi	r24, 0xC8	; 200
   1d402:	98 e4       	ldi	r25, 0x48	; 72
   1d404:	1f 92       	push	r1
   1d406:	9f 93       	push	r25
   1d408:	8f 93       	push	r24
   1d40a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d40e:	40 91 ea 1c 	lds	r20, 0x1CEA	; 0x801cea <__iob>
   1d412:	50 91 eb 1c 	lds	r21, 0x1CEB	; 0x801ceb <__iob+0x1>
   1d416:	6e e7       	ldi	r22, 0x7E	; 126
   1d418:	70 e0       	ldi	r23, 0x00	; 0
   1d41a:	ce 01       	movw	r24, r28
   1d41c:	01 96       	adiw	r24, 0x01	; 1
   1d41e:	0e 94 21 7b 	call	0xf642	; 0xf642 <fgets>
   1d422:	42 e3       	ldi	r20, 0x32	; 50
   1d424:	50 e0       	ldi	r21, 0x00	; 0
   1d426:	be 01       	movw	r22, r28
   1d428:	6f 57       	subi	r22, 0x7F	; 127
   1d42a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d42c:	ce 01       	movw	r24, r28
   1d42e:	01 96       	adiw	r24, 0x01	; 1
   1d430:	0e 94 9a 33 	call	0x6734	; 0x6734 <split_args>
   1d434:	8c 01       	movw	r16, r24
   1d436:	cf 57       	subi	r28, 0x7F	; 127
   1d438:	df 4f       	sbci	r29, 0xFF	; 255
   1d43a:	e8 80       	ld	r14, Y
   1d43c:	f9 80       	ldd	r15, Y+1	; 0x01
   1d43e:	c1 58       	subi	r28, 0x81	; 129
   1d440:	d0 40       	sbci	r29, 0x00	; 0
   1d442:	0f 90       	pop	r0
   1d444:	0f 90       	pop	r0
   1d446:	0f 90       	pop	r0
   1d448:	e1 14       	cp	r14, r1
   1d44a:	f1 04       	cpc	r15, r1
   1d44c:	09 f4       	brne	.+2      	; 0x1d450 <task+0x6c>
   1d44e:	78 c0       	rjmp	.+240    	; 0x1d540 <task+0x15c>
   1d450:	9c 01       	movw	r18, r24
   1d452:	41 e0       	ldi	r20, 0x01	; 1
   1d454:	50 e0       	ldi	r21, 0x00	; 0
   1d456:	6d e2       	ldi	r22, 0x2D	; 45
   1d458:	77 e1       	ldi	r23, 0x17	; 23
   1d45a:	c7 01       	movw	r24, r14
   1d45c:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d460:	89 2b       	or	r24, r25
   1d462:	11 f0       	breq	.+4      	; 0x1d468 <task+0x84>
   1d464:	40 df       	rcall	.-384    	; 0x1d2e6 <delay_tests>
   1d466:	6c c0       	rjmp	.+216    	; 0x1d540 <task+0x15c>
   1d468:	98 01       	movw	r18, r16
   1d46a:	41 e0       	ldi	r20, 0x01	; 1
   1d46c:	50 e0       	ldi	r21, 0x00	; 0
   1d46e:	69 e3       	ldi	r22, 0x39	; 57
   1d470:	77 e1       	ldi	r23, 0x17	; 23
   1d472:	c7 01       	movw	r24, r14
   1d474:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d478:	89 2b       	or	r24, r25
   1d47a:	61 f4       	brne	.+24     	; 0x1d494 <task+0xb0>
   1d47c:	98 01       	movw	r18, r16
   1d47e:	41 e0       	ldi	r20, 0x01	; 1
   1d480:	50 e0       	ldi	r21, 0x00	; 0
   1d482:	6e e3       	ldi	r22, 0x3E	; 62
   1d484:	77 e1       	ldi	r23, 0x17	; 23
   1d486:	c7 01       	movw	r24, r14
   1d488:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d48c:	89 2b       	or	r24, r25
   1d48e:	29 f0       	breq	.+10     	; 0x1d49a <task+0xb6>
   1d490:	0e 94 3d 3c 	call	0x787a	; 0x787a <setdate>
   1d494:	0e 94 56 3e 	call	0x7cac	; 0x7cac <display_clock>
   1d498:	53 c0       	rjmp	.+166    	; 0x1d540 <task+0x15c>
   1d49a:	98 01       	movw	r18, r16
   1d49c:	41 e0       	ldi	r20, 0x01	; 1
   1d49e:	50 e0       	ldi	r21, 0x00	; 0
   1d4a0:	66 e4       	ldi	r22, 0x46	; 70
   1d4a2:	77 e1       	ldi	r23, 0x17	; 23
   1d4a4:	c7 01       	movw	r24, r14
   1d4a6:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d4aa:	89 2b       	or	r24, r25
   1d4ac:	19 f0       	breq	.+6      	; 0x1d4b4 <task+0xd0>
   1d4ae:	0e 94 a3 29 	call	0x5346	; 0x5346 <PrintFree>
   1d4b2:	46 c0       	rjmp	.+140    	; 0x1d540 <task+0x15c>
   1d4b4:	98 01       	movw	r18, r16
   1d4b6:	41 e0       	ldi	r20, 0x01	; 1
   1d4b8:	50 e0       	ldi	r21, 0x00	; 0
   1d4ba:	66 e4       	ldi	r22, 0x46	; 70
   1d4bc:	76 e1       	ldi	r23, 0x16	; 22
   1d4be:	c7 01       	movw	r24, r14
   1d4c0:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d4c4:	89 2b       	or	r24, r25
   1d4c6:	11 f0       	breq	.+4      	; 0x1d4cc <task+0xe8>
   1d4c8:	71 df       	rcall	.-286    	; 0x1d3ac <help>
   1d4ca:	3a c0       	rjmp	.+116    	; 0x1d540 <task+0x15c>
   1d4cc:	98 01       	movw	r18, r16
   1d4ce:	41 e0       	ldi	r20, 0x01	; 1
   1d4d0:	50 e0       	ldi	r21, 0x00	; 0
   1d4d2:	6c e4       	ldi	r22, 0x4C	; 76
   1d4d4:	76 e1       	ldi	r23, 0x16	; 22
   1d4d6:	c7 01       	movw	r24, r14
   1d4d8:	0e 94 3d 33 	call	0x667a	; 0x667a <MATCHARGS>
   1d4dc:	89 2b       	or	r24, r25
   1d4de:	a1 f7       	brne	.-24     	; 0x1d4c8 <task+0xe4>
   1d4e0:	be 01       	movw	r22, r28
   1d4e2:	6f 57       	subi	r22, 0x7F	; 127
   1d4e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d4e6:	c8 01       	movw	r24, r16
   1d4e8:	0e 94 96 99 	call	0x1332c	; 0x1332c <gpib_tests>
   1d4ec:	89 2b       	or	r24, r25
   1d4ee:	19 f0       	breq	.+6      	; 0x1d4f6 <task+0x112>
   1d4f0:	0e 94 e2 94 	call	0x129c4	; 0x129c4 <gpib_init_devices>
   1d4f4:	25 c0       	rjmp	.+74     	; 0x1d540 <task+0x15c>
   1d4f6:	be 01       	movw	r22, r28
   1d4f8:	6f 57       	subi	r22, 0x7F	; 127
   1d4fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1d4fc:	c8 01       	movw	r24, r16
   1d4fe:	0e 94 cd 89 	call	0x1139a	; 0x1139a <posix_tests>
   1d502:	89 2b       	or	r24, r25
   1d504:	e9 f4       	brne	.+58     	; 0x1d540 <task+0x15c>
   1d506:	be 01       	movw	r22, r28
   1d508:	6f 57       	subi	r22, 0x7F	; 127
   1d50a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d50c:	c8 01       	movw	r24, r16
   1d50e:	0e 94 11 79 	call	0xf222	; 0xf222 <fatfs_tests>
   1d512:	89 2b       	or	r24, r25
   1d514:	a9 f4       	brne	.+42     	; 0x1d540 <task+0x15c>
   1d516:	be 01       	movw	r22, r28
   1d518:	6f 57       	subi	r22, 0x7F	; 127
   1d51a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d51c:	c8 01       	movw	r24, r16
   1d51e:	74 dd       	rcall	.-1304   	; 0x1d008 <lif_tests>
   1d520:	89 2b       	or	r24, r25
   1d522:	71 f4       	brne	.+28     	; 0x1d540 <task+0x15c>
   1d524:	ff 92       	push	r15
   1d526:	ef 92       	push	r14
   1d528:	8c eb       	ldi	r24, 0xBC	; 188
   1d52a:	98 e4       	ldi	r25, 0x48	; 72
   1d52c:	1f 92       	push	r1
   1d52e:	9f 93       	push	r25
   1d530:	8f 93       	push	r24
   1d532:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d536:	0f 90       	pop	r0
   1d538:	0f 90       	pop	r0
   1d53a:	0f 90       	pop	r0
   1d53c:	0f 90       	pop	r0
   1d53e:	0f 90       	pop	r0
   1d540:	cc 51       	subi	r28, 0x1C	; 28
   1d542:	df 4f       	sbci	r29, 0xFF	; 255
   1d544:	e6 e0       	ldi	r30, 0x06	; 6
   1d546:	89 c2       	rjmp	.+1298   	; 0x1da5a <__epilogue_restores__+0x18>

0001d548 <main>:
   1d548:	a8 e0       	ldi	r26, 0x08	; 8
   1d54a:	b0 e0       	ldi	r27, 0x00	; 0
   1d54c:	e9 ea       	ldi	r30, 0xA9	; 169
   1d54e:	fa ee       	ldi	r31, 0xEA	; 234
   1d550:	67 c2       	rjmp	.+1230   	; 0x1da20 <__prologue_saves__+0x16>
   1d552:	0e 94 fd 8d 	call	0x11bfa	; 0x11bfa <gpib_bus_init>
   1d556:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <init_timers>
   1d55a:	40 e0       	ldi	r20, 0x00	; 0
   1d55c:	52 ec       	ldi	r21, 0xC2	; 194
   1d55e:	61 e0       	ldi	r22, 0x01	; 1
   1d560:	70 e0       	ldi	r23, 0x00	; 0
   1d562:	80 e0       	ldi	r24, 0x00	; 0
   1d564:	0e 94 a8 2b 	call	0x5750	; 0x5750 <uart_init>
   1d568:	06 2f       	mov	r16, r22
   1d56a:	f7 2e       	mov	r15, r23
   1d56c:	e8 2e       	mov	r14, r24
   1d56e:	d9 2e       	mov	r13, r25
   1d570:	68 ec       	ldi	r22, 0xC8	; 200
   1d572:	70 e0       	ldi	r23, 0x00	; 0
   1d574:	80 e0       	ldi	r24, 0x00	; 0
   1d576:	90 e0       	ldi	r25, 0x00	; 0
   1d578:	0e 94 c6 2a 	call	0x558c	; 0x558c <delayms>
   1d57c:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d580:	85 eb       	ldi	r24, 0xB5	; 181
   1d582:	98 e4       	ldi	r25, 0x48	; 72
   1d584:	1f 92       	push	r1
   1d586:	9f 93       	push	r25
   1d588:	8f 93       	push	r24
   1d58a:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d58e:	11 e0       	ldi	r17, 0x01	; 1
   1d590:	1f 93       	push	r17
   1d592:	81 e3       	ldi	r24, 0x31	; 49
   1d594:	8f 93       	push	r24
   1d596:	8d e2       	ldi	r24, 0x2D	; 45
   1d598:	8f 93       	push	r24
   1d59a:	1f 92       	push	r1
   1d59c:	84 ea       	ldi	r24, 0xA4	; 164
   1d59e:	98 e4       	ldi	r25, 0x48	; 72
   1d5a0:	1f 92       	push	r1
   1d5a2:	9f 93       	push	r25
   1d5a4:	8f 93       	push	r24
   1d5a6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d5aa:	df 92       	push	r13
   1d5ac:	ef 92       	push	r14
   1d5ae:	ff 92       	push	r15
   1d5b0:	0f 93       	push	r16
   1d5b2:	1f 92       	push	r1
   1d5b4:	1f 93       	push	r17
   1d5b6:	82 ec       	ldi	r24, 0xC2	; 194
   1d5b8:	8f 93       	push	r24
   1d5ba:	1f 92       	push	r1
   1d5bc:	8d e7       	ldi	r24, 0x7D	; 125
   1d5be:	98 e4       	ldi	r25, 0x48	; 72
   1d5c0:	1f 92       	push	r1
   1d5c2:	9f 93       	push	r25
   1d5c4:	8f 93       	push	r24
   1d5c6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d5ca:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d5ce:	8e e5       	ldi	r24, 0x5E	; 94
   1d5d0:	98 e4       	ldi	r25, 0x48	; 72
   1d5d2:	1f 92       	push	r1
   1d5d4:	9f 93       	push	r25
   1d5d6:	8f 93       	push	r24
   1d5d8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d5dc:	81 e4       	ldi	r24, 0x41	; 65
   1d5de:	98 e4       	ldi	r25, 0x48	; 72
   1d5e0:	1f 92       	push	r1
   1d5e2:	9f 93       	push	r25
   1d5e4:	8f 93       	push	r24
   1d5e6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d5ea:	81 e3       	ldi	r24, 0x31	; 49
   1d5ec:	98 e4       	ldi	r25, 0x48	; 72
   1d5ee:	1f 92       	push	r1
   1d5f0:	9f 93       	push	r25
   1d5f2:	8f 93       	push	r24
   1d5f4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d5f8:	8a e0       	ldi	r24, 0x0A	; 10
   1d5fa:	98 e4       	ldi	r25, 0x48	; 72
   1d5fc:	1f 92       	push	r1
   1d5fe:	9f 93       	push	r25
   1d600:	8f 93       	push	r24
   1d602:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d606:	0f b6       	in	r0, 0x3f	; 63
   1d608:	f8 94       	cli
   1d60a:	de bf       	out	0x3e, r29	; 62
   1d60c:	0f be       	out	0x3f, r0	; 63
   1d60e:	cd bf       	out	0x3d, r28	; 61
   1d610:	8a e7       	ldi	r24, 0x7A	; 122
   1d612:	96 e1       	ldi	r25, 0x16	; 22
   1d614:	9f 93       	push	r25
   1d616:	8f 93       	push	r24
   1d618:	80 ef       	ldi	r24, 0xF0	; 240
   1d61a:	97 e4       	ldi	r25, 0x47	; 71
   1d61c:	1f 92       	push	r1
   1d61e:	9f 93       	push	r25
   1d620:	8f 93       	push	r24
   1d622:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d626:	8e e9       	ldi	r24, 0x9E	; 158
   1d628:	96 e1       	ldi	r25, 0x16	; 22
   1d62a:	9f 93       	push	r25
   1d62c:	8f 93       	push	r24
   1d62e:	86 ed       	ldi	r24, 0xD6	; 214
   1d630:	97 e4       	ldi	r25, 0x47	; 71
   1d632:	1f 92       	push	r1
   1d634:	9f 93       	push	r25
   1d636:	8f 93       	push	r24
   1d638:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d63c:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d640:	0e 94 a3 29 	call	0x5346	; 0x5346 <PrintFree>
   1d644:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d648:	68 ec       	ldi	r22, 0xC8	; 200
   1d64a:	70 e0       	ldi	r23, 0x00	; 0
   1d64c:	80 e0       	ldi	r24, 0x00	; 0
   1d64e:	90 e0       	ldi	r25, 0x00	; 0
   1d650:	0e 94 c6 2a 	call	0x558c	; 0x558c <delayms>
   1d654:	80 ec       	ldi	r24, 0xC0	; 192
   1d656:	97 e4       	ldi	r25, 0x47	; 71
   1d658:	1f 92       	push	r1
   1d65a:	9f 93       	push	r25
   1d65c:	8f 93       	push	r24
   1d65e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d662:	4b e0       	ldi	r20, 0x0B	; 11
   1d664:	50 e0       	ldi	r21, 0x00	; 0
   1d666:	60 e2       	ldi	r22, 0x20	; 32
   1d668:	71 ea       	ldi	r23, 0xA1	; 161
   1d66a:	87 e0       	ldi	r24, 0x07	; 7
   1d66c:	90 e0       	ldi	r25, 0x00	; 0
   1d66e:	0e 94 1f 29 	call	0x523e	; 0x523e <spi_init>
   1d672:	8a ea       	ldi	r24, 0xAA	; 170
   1d674:	97 e4       	ldi	r25, 0x47	; 71
   1d676:	1f 92       	push	r1
   1d678:	9f 93       	push	r25
   1d67a:	8f 93       	push	r24
   1d67c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d680:	61 e1       	ldi	r22, 0x11	; 17
   1d682:	81 e0       	ldi	r24, 0x01	; 1
   1d684:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <TWI_Init>
   1d688:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d68c:	88 e9       	ldi	r24, 0x98	; 152
   1d68e:	97 e4       	ldi	r25, 0x47	; 71
   1d690:	1f 92       	push	r1
   1d692:	9f 93       	push	r25
   1d694:	8f 93       	push	r24
   1d696:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d69a:	0e 94 76 36 	call	0x6cec	; 0x6cec <clock_clear>
   1d69e:	89 e8       	ldi	r24, 0x89	; 137
   1d6a0:	97 e4       	ldi	r25, 0x47	; 71
   1d6a2:	1f 92       	push	r1
   1d6a4:	9f 93       	push	r25
   1d6a6:	8f 93       	push	r24
   1d6a8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d6ac:	be 01       	movw	r22, r28
   1d6ae:	6f 5f       	subi	r22, 0xFF	; 255
   1d6b0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d6b2:	80 e0       	ldi	r24, 0x00	; 0
   1d6b4:	90 e0       	ldi	r25, 0x00	; 0
   1d6b6:	0e 94 11 37 	call	0x6e22	; 0x6e22 <clock_getres>
   1d6ba:	88 85       	ldd	r24, Y+8	; 0x08
   1d6bc:	8f 93       	push	r24
   1d6be:	8f 81       	ldd	r24, Y+7	; 0x07
   1d6c0:	8f 93       	push	r24
   1d6c2:	8e 81       	ldd	r24, Y+6	; 0x06
   1d6c4:	8f 93       	push	r24
   1d6c6:	8d 81       	ldd	r24, Y+5	; 0x05
   1d6c8:	8f 93       	push	r24
   1d6ca:	8c e6       	ldi	r24, 0x6C	; 108
   1d6cc:	97 e4       	ldi	r25, 0x47	; 71
   1d6ce:	1f 92       	push	r1
   1d6d0:	9f 93       	push	r25
   1d6d2:	8f 93       	push	r24
   1d6d4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d6d8:	8c e2       	ldi	r24, 0x2C	; 44
   1d6da:	91 e0       	ldi	r25, 0x01	; 1
   1d6dc:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <initialize_clock>
   1d6e0:	0e 94 56 3e 	call	0x7cac	; 0x7cac <display_clock>
   1d6e4:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d6e8:	8e e4       	ldi	r24, 0x4E	; 78
   1d6ea:	97 e4       	ldi	r25, 0x47	; 71
   1d6ec:	1f 92       	push	r1
   1d6ee:	9f 93       	push	r25
   1d6f0:	8f 93       	push	r24
   1d6f2:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d6f6:	0f b6       	in	r0, 0x3f	; 63
   1d6f8:	f8 94       	cli
   1d6fa:	de bf       	out	0x3e, r29	; 62
   1d6fc:	0f be       	out	0x3f, r0	; 63
   1d6fe:	cd bf       	out	0x3d, r28	; 61
   1d700:	84 ee       	ldi	r24, 0xE4	; 228
   1d702:	0e 94 3c 31 	call	0x6278	; 0x6278 <LCD_init>
   1d706:	89 2b       	or	r24, r25
   1d708:	e9 f0       	breq	.+58     	; 0x1d744 <main+0x1fc>
   1d70a:	60 e0       	ldi	r22, 0x00	; 0
   1d70c:	80 e0       	ldi	r24, 0x00	; 0
   1d70e:	0e 94 06 31 	call	0x620c	; 0x620c <LCD_pos>
   1d712:	8a e4       	ldi	r24, 0x4A	; 74
   1d714:	97 e1       	ldi	r25, 0x17	; 23
   1d716:	9f 93       	push	r25
   1d718:	8f 93       	push	r24
   1d71a:	0e 94 f5 31 	call	0x63ea	; 0x63ea <lcd_printf>
   1d71e:	89 e5       	ldi	r24, 0x59	; 89
   1d720:	97 e1       	ldi	r25, 0x17	; 23
   1d722:	9f 93       	push	r25
   1d724:	8f 93       	push	r24
   1d726:	0e 94 f5 31 	call	0x63ea	; 0x63ea <lcd_printf>
   1d72a:	81 e3       	ldi	r24, 0x31	; 49
   1d72c:	97 e4       	ldi	r25, 0x47	; 71
   1d72e:	1f 92       	push	r1
   1d730:	9f 93       	push	r25
   1d732:	8f 93       	push	r24
   1d734:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d738:	0f b6       	in	r0, 0x3f	; 63
   1d73a:	f8 94       	cli
   1d73c:	de bf       	out	0x3e, r29	; 62
   1d73e:	0f be       	out	0x3f, r0	; 63
   1d740:	cd bf       	out	0x3d, r28	; 61
   1d742:	0a c0       	rjmp	.+20     	; 0x1d758 <main+0x210>
   1d744:	87 e1       	ldi	r24, 0x17	; 23
   1d746:	97 e4       	ldi	r25, 0x47	; 71
   1d748:	1f 92       	push	r1
   1d74a:	9f 93       	push	r25
   1d74c:	8f 93       	push	r24
   1d74e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d752:	0f 90       	pop	r0
   1d754:	0f 90       	pop	r0
   1d756:	0f 90       	pop	r0
   1d758:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d75c:	8f ef       	ldi	r24, 0xFF	; 255
   1d75e:	96 e4       	ldi	r25, 0x46	; 70
   1d760:	1f 92       	push	r1
   1d762:	9f 93       	push	r25
   1d764:	8f 93       	push	r24
   1d766:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d76a:	81 e0       	ldi	r24, 0x01	; 1
   1d76c:	90 e0       	ldi	r25, 0x00	; 0
   1d76e:	0e 94 4a 74 	call	0xe894	; 0xe894 <mmc_init>
   1d772:	8e ee       	ldi	r24, 0xEE	; 238
   1d774:	96 e4       	ldi	r25, 0x46	; 70
   1d776:	1f 92       	push	r1
   1d778:	9f 93       	push	r25
   1d77a:	8f 93       	push	r24
   1d77c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d780:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d784:	0e 94 fd 8d 	call	0x11bfa	; 0x11bfa <gpib_bus_init>
   1d788:	88 ed       	ldi	r24, 0xD8	; 216
   1d78a:	96 e4       	ldi	r25, 0x46	; 70
   1d78c:	1f 92       	push	r1
   1d78e:	9f 93       	push	r25
   1d790:	8f 93       	push	r24
   1d792:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d796:	0e 94 a2 b4 	call	0x16944	; 0x16944 <printer_init>
   1d79a:	83 ec       	ldi	r24, 0xC3	; 195
   1d79c:	96 e4       	ldi	r25, 0x46	; 70
   1d79e:	1f 92       	push	r1
   1d7a0:	9f 93       	push	r25
   1d7a2:	8f 93       	push	r24
   1d7a4:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d7a8:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d7ac:	81 eb       	ldi	r24, 0xB1	; 177
   1d7ae:	96 e4       	ldi	r25, 0x46	; 70
   1d7b0:	1f 92       	push	r1
   1d7b2:	9f 93       	push	r25
   1d7b4:	8f 93       	push	r24
   1d7b6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d7ba:	0e 94 0d 8c 	call	0x1181a	; 0x1181a <gpib_timer_init>
   1d7be:	89 e9       	ldi	r24, 0x99	; 153
   1d7c0:	96 e4       	ldi	r25, 0x46	; 70
   1d7c2:	1f 92       	push	r1
   1d7c4:	9f 93       	push	r25
   1d7c6:	8f 93       	push	r24
   1d7c8:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d7cc:	0e 94 16 94 	call	0x1282c	; 0x1282c <gpib_file_init>
   1d7d0:	84 e8       	ldi	r24, 0x84	; 132
   1d7d2:	96 e4       	ldi	r25, 0x46	; 70
   1d7d4:	1f 92       	push	r1
   1d7d6:	9f 93       	push	r25
   1d7d8:	8f 93       	push	r24
   1d7da:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d7de:	0e 94 25 8e 	call	0x11c4a	; 0x11c4a <gpib_state_init>
   1d7e2:	8e e6       	ldi	r24, 0x6E	; 110
   1d7e4:	96 e4       	ldi	r25, 0x46	; 70
   1d7e6:	1f 92       	push	r1
   1d7e8:	9f 93       	push	r25
   1d7ea:	8f 93       	push	r24
   1d7ec:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d7f0:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d7f4:	0e 94 4e c5 	call	0x18a9c	; 0x18a9c <display_Config>
   1d7f8:	0e 94 e3 c7 	call	0x18fc6	; 0x18fc6 <format_drives>
   1d7fc:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d800:	0e 94 53 c4 	call	0x188a6	; 0x188a6 <display_Addresses>
   1d804:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d808:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1d80c:	8f 93       	push	r24
   1d80e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1d812:	8f 93       	push	r24
   1d814:	88 e5       	ldi	r24, 0x58	; 88
   1d816:	96 e4       	ldi	r25, 0x46	; 70
   1d818:	1f 92       	push	r1
   1d81a:	9f 93       	push	r25
   1d81c:	8f 93       	push	r24
   1d81e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d822:	60 e0       	ldi	r22, 0x00	; 0
   1d824:	80 e0       	ldi	r24, 0x00	; 0
   1d826:	0e 94 06 31 	call	0x620c	; 0x620c <LCD_pos>
   1d82a:	83 e0       	ldi	r24, 0x03	; 3
   1d82c:	0e 94 a9 b7 	call	0x16f52	; 0x16f52 <count_drive_types>
   1d830:	9f 93       	push	r25
   1d832:	8f 93       	push	r24
   1d834:	87 e6       	ldi	r24, 0x67	; 103
   1d836:	97 e1       	ldi	r25, 0x17	; 23
   1d838:	9f 93       	push	r25
   1d83a:	8f 93       	push	r24
   1d83c:	0e 94 f5 31 	call	0x63ea	; 0x63ea <lcd_printf>
   1d840:	0f b6       	in	r0, 0x3f	; 63
   1d842:	f8 94       	cli
   1d844:	de bf       	out	0x3e, r29	; 62
   1d846:	0f be       	out	0x3f, r0	; 63
   1d848:	cd bf       	out	0x3d, r28	; 61
   1d84a:	81 e0       	ldi	r24, 0x01	; 1
   1d84c:	0e 94 a9 b7 	call	0x16f52	; 0x16f52 <count_drive_types>
   1d850:	9f 93       	push	r25
   1d852:	8f 93       	push	r24
   1d854:	87 e7       	ldi	r24, 0x77	; 119
   1d856:	97 e1       	ldi	r25, 0x17	; 23
   1d858:	9f 93       	push	r25
   1d85a:	8f 93       	push	r24
   1d85c:	0e 94 f5 31 	call	0x63ea	; 0x63ea <lcd_printf>
   1d860:	0e 94 13 32 	call	0x6426	; 0x6426 <sep>
   1d864:	84 e4       	ldi	r24, 0x44	; 68
   1d866:	96 e4       	ldi	r25, 0x46	; 70
   1d868:	1f 92       	push	r1
   1d86a:	9f 93       	push	r25
   1d86c:	8f 93       	push	r24
   1d86e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <printf_P>
   1d872:	0f b6       	in	r0, 0x3f	; 63
   1d874:	f8 94       	cli
   1d876:	de bf       	out	0x3e, r29	; 62
   1d878:	0f be       	out	0x3f, r0	; 63
   1d87a:	cd bf       	out	0x3d, r28	; 61
   1d87c:	81 e0       	ldi	r24, 0x01	; 1
   1d87e:	b2 dd       	rcall	.-1180   	; 0x1d3e4 <task>
   1d880:	fd cf       	rjmp	.-6      	; 0x1d87c <main+0x334>

0001d882 <__mulsi3>:
   1d882:	db 01       	movw	r26, r22
   1d884:	8f 93       	push	r24
   1d886:	9f 93       	push	r25
   1d888:	a0 d0       	rcall	.+320    	; 0x1d9ca <__muluhisi3>
   1d88a:	bf 91       	pop	r27
   1d88c:	af 91       	pop	r26
   1d88e:	a2 9f       	mul	r26, r18
   1d890:	80 0d       	add	r24, r0
   1d892:	91 1d       	adc	r25, r1
   1d894:	a3 9f       	mul	r26, r19
   1d896:	90 0d       	add	r25, r0
   1d898:	b2 9f       	mul	r27, r18
   1d89a:	90 0d       	add	r25, r0
   1d89c:	11 24       	eor	r1, r1
   1d89e:	08 95       	ret

0001d8a0 <__udivmodqi4>:
   1d8a0:	99 1b       	sub	r25, r25
   1d8a2:	79 e0       	ldi	r23, 0x09	; 9
   1d8a4:	04 c0       	rjmp	.+8      	; 0x1d8ae <__udivmodqi4_ep>

0001d8a6 <__udivmodqi4_loop>:
   1d8a6:	99 1f       	adc	r25, r25
   1d8a8:	96 17       	cp	r25, r22
   1d8aa:	08 f0       	brcs	.+2      	; 0x1d8ae <__udivmodqi4_ep>
   1d8ac:	96 1b       	sub	r25, r22

0001d8ae <__udivmodqi4_ep>:
   1d8ae:	88 1f       	adc	r24, r24
   1d8b0:	7a 95       	dec	r23
   1d8b2:	c9 f7       	brne	.-14     	; 0x1d8a6 <__udivmodqi4_loop>
   1d8b4:	80 95       	com	r24
   1d8b6:	08 95       	ret

0001d8b8 <__udivmodhi4>:
   1d8b8:	aa 1b       	sub	r26, r26
   1d8ba:	bb 1b       	sub	r27, r27
   1d8bc:	51 e1       	ldi	r21, 0x11	; 17
   1d8be:	07 c0       	rjmp	.+14     	; 0x1d8ce <__udivmodhi4_ep>

0001d8c0 <__udivmodhi4_loop>:
   1d8c0:	aa 1f       	adc	r26, r26
   1d8c2:	bb 1f       	adc	r27, r27
   1d8c4:	a6 17       	cp	r26, r22
   1d8c6:	b7 07       	cpc	r27, r23
   1d8c8:	10 f0       	brcs	.+4      	; 0x1d8ce <__udivmodhi4_ep>
   1d8ca:	a6 1b       	sub	r26, r22
   1d8cc:	b7 0b       	sbc	r27, r23

0001d8ce <__udivmodhi4_ep>:
   1d8ce:	88 1f       	adc	r24, r24
   1d8d0:	99 1f       	adc	r25, r25
   1d8d2:	5a 95       	dec	r21
   1d8d4:	a9 f7       	brne	.-22     	; 0x1d8c0 <__udivmodhi4_loop>
   1d8d6:	80 95       	com	r24
   1d8d8:	90 95       	com	r25
   1d8da:	bc 01       	movw	r22, r24
   1d8dc:	cd 01       	movw	r24, r26
   1d8de:	08 95       	ret

0001d8e0 <__divmodhi4>:
   1d8e0:	97 fb       	bst	r25, 7
   1d8e2:	07 2e       	mov	r0, r23
   1d8e4:	16 f4       	brtc	.+4      	; 0x1d8ea <__divmodhi4+0xa>
   1d8e6:	00 94       	com	r0
   1d8e8:	06 d0       	rcall	.+12     	; 0x1d8f6 <__divmodhi4_neg1>
   1d8ea:	77 fd       	sbrc	r23, 7
   1d8ec:	08 d0       	rcall	.+16     	; 0x1d8fe <__divmodhi4_neg2>
   1d8ee:	e4 df       	rcall	.-56     	; 0x1d8b8 <__udivmodhi4>
   1d8f0:	07 fc       	sbrc	r0, 7
   1d8f2:	05 d0       	rcall	.+10     	; 0x1d8fe <__divmodhi4_neg2>
   1d8f4:	3e f4       	brtc	.+14     	; 0x1d904 <__divmodhi4_exit>

0001d8f6 <__divmodhi4_neg1>:
   1d8f6:	90 95       	com	r25
   1d8f8:	81 95       	neg	r24
   1d8fa:	9f 4f       	sbci	r25, 0xFF	; 255
   1d8fc:	08 95       	ret

0001d8fe <__divmodhi4_neg2>:
   1d8fe:	70 95       	com	r23
   1d900:	61 95       	neg	r22
   1d902:	7f 4f       	sbci	r23, 0xFF	; 255

0001d904 <__divmodhi4_exit>:
   1d904:	08 95       	ret

0001d906 <__udivmodsi4>:
   1d906:	a1 e2       	ldi	r26, 0x21	; 33
   1d908:	1a 2e       	mov	r1, r26
   1d90a:	aa 1b       	sub	r26, r26
   1d90c:	bb 1b       	sub	r27, r27
   1d90e:	fd 01       	movw	r30, r26
   1d910:	0d c0       	rjmp	.+26     	; 0x1d92c <__udivmodsi4_ep>

0001d912 <__udivmodsi4_loop>:
   1d912:	aa 1f       	adc	r26, r26
   1d914:	bb 1f       	adc	r27, r27
   1d916:	ee 1f       	adc	r30, r30
   1d918:	ff 1f       	adc	r31, r31
   1d91a:	a2 17       	cp	r26, r18
   1d91c:	b3 07       	cpc	r27, r19
   1d91e:	e4 07       	cpc	r30, r20
   1d920:	f5 07       	cpc	r31, r21
   1d922:	20 f0       	brcs	.+8      	; 0x1d92c <__udivmodsi4_ep>
   1d924:	a2 1b       	sub	r26, r18
   1d926:	b3 0b       	sbc	r27, r19
   1d928:	e4 0b       	sbc	r30, r20
   1d92a:	f5 0b       	sbc	r31, r21

0001d92c <__udivmodsi4_ep>:
   1d92c:	66 1f       	adc	r22, r22
   1d92e:	77 1f       	adc	r23, r23
   1d930:	88 1f       	adc	r24, r24
   1d932:	99 1f       	adc	r25, r25
   1d934:	1a 94       	dec	r1
   1d936:	69 f7       	brne	.-38     	; 0x1d912 <__udivmodsi4_loop>
   1d938:	60 95       	com	r22
   1d93a:	70 95       	com	r23
   1d93c:	80 95       	com	r24
   1d93e:	90 95       	com	r25
   1d940:	9b 01       	movw	r18, r22
   1d942:	ac 01       	movw	r20, r24
   1d944:	bd 01       	movw	r22, r26
   1d946:	cf 01       	movw	r24, r30
   1d948:	08 95       	ret

0001d94a <__divmodsi4>:
   1d94a:	05 2e       	mov	r0, r21
   1d94c:	97 fb       	bst	r25, 7
   1d94e:	16 f4       	brtc	.+4      	; 0x1d954 <__divmodsi4+0xa>
   1d950:	00 94       	com	r0
   1d952:	0f d0       	rcall	.+30     	; 0x1d972 <__negsi2>
   1d954:	57 fd       	sbrc	r21, 7
   1d956:	05 d0       	rcall	.+10     	; 0x1d962 <__divmodsi4_neg2>
   1d958:	d6 df       	rcall	.-84     	; 0x1d906 <__udivmodsi4>
   1d95a:	07 fc       	sbrc	r0, 7
   1d95c:	02 d0       	rcall	.+4      	; 0x1d962 <__divmodsi4_neg2>
   1d95e:	46 f4       	brtc	.+16     	; 0x1d970 <__divmodsi4_exit>
   1d960:	08 c0       	rjmp	.+16     	; 0x1d972 <__negsi2>

0001d962 <__divmodsi4_neg2>:
   1d962:	50 95       	com	r21
   1d964:	40 95       	com	r20
   1d966:	30 95       	com	r19
   1d968:	21 95       	neg	r18
   1d96a:	3f 4f       	sbci	r19, 0xFF	; 255
   1d96c:	4f 4f       	sbci	r20, 0xFF	; 255
   1d96e:	5f 4f       	sbci	r21, 0xFF	; 255

0001d970 <__divmodsi4_exit>:
   1d970:	08 95       	ret

0001d972 <__negsi2>:
   1d972:	90 95       	com	r25
   1d974:	80 95       	com	r24
   1d976:	70 95       	com	r23
   1d978:	61 95       	neg	r22
   1d97a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d97c:	8f 4f       	sbci	r24, 0xFF	; 255
   1d97e:	9f 4f       	sbci	r25, 0xFF	; 255
   1d980:	08 95       	ret

0001d982 <__tablejump2__>:
   1d982:	ee 0f       	add	r30, r30
   1d984:	ff 1f       	adc	r31, r31
   1d986:	00 24       	eor	r0, r0
   1d988:	00 1c       	adc	r0, r0
   1d98a:	0b be       	out	0x3b, r0	; 59
   1d98c:	07 90       	elpm	r0, Z+
   1d98e:	f6 91       	elpm	r31, Z
   1d990:	e0 2d       	mov	r30, r0
   1d992:	09 94       	ijmp

0001d994 <__mulhisi3>:
   1d994:	05 d0       	rcall	.+10     	; 0x1d9a0 <__umulhisi3>
   1d996:	33 23       	and	r19, r19
   1d998:	12 f4       	brpl	.+4      	; 0x1d99e <__mulhisi3+0xa>
   1d99a:	8a 1b       	sub	r24, r26
   1d99c:	9b 0b       	sbc	r25, r27
   1d99e:	10 c0       	rjmp	.+32     	; 0x1d9c0 <__usmulhisi3_tail>

0001d9a0 <__umulhisi3>:
   1d9a0:	a2 9f       	mul	r26, r18
   1d9a2:	b0 01       	movw	r22, r0
   1d9a4:	b3 9f       	mul	r27, r19
   1d9a6:	c0 01       	movw	r24, r0
   1d9a8:	a3 9f       	mul	r26, r19
   1d9aa:	70 0d       	add	r23, r0
   1d9ac:	81 1d       	adc	r24, r1
   1d9ae:	11 24       	eor	r1, r1
   1d9b0:	91 1d       	adc	r25, r1
   1d9b2:	b2 9f       	mul	r27, r18
   1d9b4:	70 0d       	add	r23, r0
   1d9b6:	81 1d       	adc	r24, r1
   1d9b8:	11 24       	eor	r1, r1
   1d9ba:	91 1d       	adc	r25, r1
   1d9bc:	08 95       	ret

0001d9be <__usmulhisi3>:
   1d9be:	f0 df       	rcall	.-32     	; 0x1d9a0 <__umulhisi3>

0001d9c0 <__usmulhisi3_tail>:
   1d9c0:	b7 ff       	sbrs	r27, 7
   1d9c2:	08 95       	ret
   1d9c4:	82 1b       	sub	r24, r18
   1d9c6:	93 0b       	sbc	r25, r19
   1d9c8:	08 95       	ret

0001d9ca <__muluhisi3>:
   1d9ca:	ea df       	rcall	.-44     	; 0x1d9a0 <__umulhisi3>
   1d9cc:	a5 9f       	mul	r26, r21
   1d9ce:	90 0d       	add	r25, r0
   1d9d0:	b4 9f       	mul	r27, r20
   1d9d2:	90 0d       	add	r25, r0
   1d9d4:	a4 9f       	mul	r26, r20
   1d9d6:	80 0d       	add	r24, r0
   1d9d8:	91 1d       	adc	r25, r1
   1d9da:	11 24       	eor	r1, r1
   1d9dc:	08 95       	ret

0001d9de <__mulshisi3>:
   1d9de:	b7 ff       	sbrs	r27, 7
   1d9e0:	f4 cf       	rjmp	.-24     	; 0x1d9ca <__muluhisi3>

0001d9e2 <__mulohisi3>:
   1d9e2:	f3 df       	rcall	.-26     	; 0x1d9ca <__muluhisi3>
   1d9e4:	82 1b       	sub	r24, r18
   1d9e6:	93 0b       	sbc	r25, r19
   1d9e8:	08 95       	ret

0001d9ea <__negdi2>:
   1d9ea:	60 95       	com	r22
   1d9ec:	70 95       	com	r23
   1d9ee:	80 95       	com	r24
   1d9f0:	90 95       	com	r25
   1d9f2:	30 95       	com	r19
   1d9f4:	40 95       	com	r20
   1d9f6:	50 95       	com	r21
   1d9f8:	21 95       	neg	r18
   1d9fa:	3f 4f       	sbci	r19, 0xFF	; 255
   1d9fc:	4f 4f       	sbci	r20, 0xFF	; 255
   1d9fe:	5f 4f       	sbci	r21, 0xFF	; 255
   1da00:	6f 4f       	sbci	r22, 0xFF	; 255
   1da02:	7f 4f       	sbci	r23, 0xFF	; 255
   1da04:	8f 4f       	sbci	r24, 0xFF	; 255
   1da06:	9f 4f       	sbci	r25, 0xFF	; 255
   1da08:	08 95       	ret

0001da0a <__prologue_saves__>:
   1da0a:	2f 92       	push	r2
   1da0c:	3f 92       	push	r3
   1da0e:	4f 92       	push	r4
   1da10:	5f 92       	push	r5
   1da12:	6f 92       	push	r6
   1da14:	7f 92       	push	r7
   1da16:	8f 92       	push	r8
   1da18:	9f 92       	push	r9
   1da1a:	af 92       	push	r10
   1da1c:	bf 92       	push	r11
   1da1e:	cf 92       	push	r12
   1da20:	df 92       	push	r13
   1da22:	ef 92       	push	r14
   1da24:	ff 92       	push	r15
   1da26:	0f 93       	push	r16
   1da28:	1f 93       	push	r17
   1da2a:	cf 93       	push	r28
   1da2c:	df 93       	push	r29
   1da2e:	cd b7       	in	r28, 0x3d	; 61
   1da30:	de b7       	in	r29, 0x3e	; 62
   1da32:	ca 1b       	sub	r28, r26
   1da34:	db 0b       	sbc	r29, r27
   1da36:	0f b6       	in	r0, 0x3f	; 63
   1da38:	f8 94       	cli
   1da3a:	de bf       	out	0x3e, r29	; 62
   1da3c:	0f be       	out	0x3f, r0	; 63
   1da3e:	cd bf       	out	0x3d, r28	; 61
   1da40:	09 94       	ijmp

0001da42 <__epilogue_restores__>:
   1da42:	2a 88       	ldd	r2, Y+18	; 0x12
   1da44:	39 88       	ldd	r3, Y+17	; 0x11
   1da46:	48 88       	ldd	r4, Y+16	; 0x10
   1da48:	5f 84       	ldd	r5, Y+15	; 0x0f
   1da4a:	6e 84       	ldd	r6, Y+14	; 0x0e
   1da4c:	7d 84       	ldd	r7, Y+13	; 0x0d
   1da4e:	8c 84       	ldd	r8, Y+12	; 0x0c
   1da50:	9b 84       	ldd	r9, Y+11	; 0x0b
   1da52:	aa 84       	ldd	r10, Y+10	; 0x0a
   1da54:	b9 84       	ldd	r11, Y+9	; 0x09
   1da56:	c8 84       	ldd	r12, Y+8	; 0x08
   1da58:	df 80       	ldd	r13, Y+7	; 0x07
   1da5a:	ee 80       	ldd	r14, Y+6	; 0x06
   1da5c:	fd 80       	ldd	r15, Y+5	; 0x05
   1da5e:	0c 81       	ldd	r16, Y+4	; 0x04
   1da60:	1b 81       	ldd	r17, Y+3	; 0x03
   1da62:	aa 81       	ldd	r26, Y+2	; 0x02
   1da64:	b9 81       	ldd	r27, Y+1	; 0x01
   1da66:	ce 0f       	add	r28, r30
   1da68:	d1 1d       	adc	r29, r1
   1da6a:	0f b6       	in	r0, 0x3f	; 63
   1da6c:	f8 94       	cli
   1da6e:	de bf       	out	0x3e, r29	; 62
   1da70:	0f be       	out	0x3f, r0	; 63
   1da72:	cd bf       	out	0x3d, r28	; 61
   1da74:	ed 01       	movw	r28, r26
   1da76:	08 95       	ret

0001da78 <__xload_1>:
   1da78:	57 fd       	sbrc	r21, 7
   1da7a:	03 c0       	rjmp	.+6      	; 0x1da82 <__xload_1+0xa>
   1da7c:	5b bf       	out	0x3b, r21	; 59
   1da7e:	67 91       	elpm	r22, Z+
   1da80:	08 95       	ret
   1da82:	60 81       	ld	r22, Z
   1da84:	08 95       	ret

0001da86 <__cmpdi2_s8>:
   1da86:	00 24       	eor	r0, r0
   1da88:	a7 fd       	sbrc	r26, 7
   1da8a:	00 94       	com	r0
   1da8c:	2a 17       	cp	r18, r26
   1da8e:	30 05       	cpc	r19, r0
   1da90:	40 05       	cpc	r20, r0
   1da92:	50 05       	cpc	r21, r0
   1da94:	60 05       	cpc	r22, r0
   1da96:	70 05       	cpc	r23, r0
   1da98:	80 05       	cpc	r24, r0
   1da9a:	90 05       	cpc	r25, r0
   1da9c:	08 95       	ret

0001da9e <__subsf3>:
   1da9e:	50 58       	subi	r21, 0x80	; 128

0001daa0 <__addsf3>:
   1daa0:	bb 27       	eor	r27, r27
   1daa2:	aa 27       	eor	r26, r26
   1daa4:	0e d0       	rcall	.+28     	; 0x1dac2 <__addsf3x>
   1daa6:	75 c1       	rjmp	.+746    	; 0x1dd92 <__fp_round>
   1daa8:	66 d1       	rcall	.+716    	; 0x1dd76 <__fp_pscA>
   1daaa:	30 f0       	brcs	.+12     	; 0x1dab8 <__addsf3+0x18>
   1daac:	6b d1       	rcall	.+726    	; 0x1dd84 <__fp_pscB>
   1daae:	20 f0       	brcs	.+8      	; 0x1dab8 <__addsf3+0x18>
   1dab0:	31 f4       	brne	.+12     	; 0x1dabe <__addsf3+0x1e>
   1dab2:	9f 3f       	cpi	r25, 0xFF	; 255
   1dab4:	11 f4       	brne	.+4      	; 0x1daba <__addsf3+0x1a>
   1dab6:	1e f4       	brtc	.+6      	; 0x1dabe <__addsf3+0x1e>
   1dab8:	5b c1       	rjmp	.+694    	; 0x1dd70 <__fp_nan>
   1daba:	0e f4       	brtc	.+2      	; 0x1dabe <__addsf3+0x1e>
   1dabc:	e0 95       	com	r30
   1dabe:	e7 fb       	bst	r30, 7
   1dac0:	51 c1       	rjmp	.+674    	; 0x1dd64 <__fp_inf>

0001dac2 <__addsf3x>:
   1dac2:	e9 2f       	mov	r30, r25
   1dac4:	77 d1       	rcall	.+750    	; 0x1ddb4 <__fp_split3>
   1dac6:	80 f3       	brcs	.-32     	; 0x1daa8 <__addsf3+0x8>
   1dac8:	ba 17       	cp	r27, r26
   1daca:	62 07       	cpc	r22, r18
   1dacc:	73 07       	cpc	r23, r19
   1dace:	84 07       	cpc	r24, r20
   1dad0:	95 07       	cpc	r25, r21
   1dad2:	18 f0       	brcs	.+6      	; 0x1dada <__addsf3x+0x18>
   1dad4:	71 f4       	brne	.+28     	; 0x1daf2 <__addsf3x+0x30>
   1dad6:	9e f5       	brtc	.+102    	; 0x1db3e <__addsf3x+0x7c>
   1dad8:	8f c1       	rjmp	.+798    	; 0x1ddf8 <__fp_zero>
   1dada:	0e f4       	brtc	.+2      	; 0x1dade <__addsf3x+0x1c>
   1dadc:	e0 95       	com	r30
   1dade:	0b 2e       	mov	r0, r27
   1dae0:	ba 2f       	mov	r27, r26
   1dae2:	a0 2d       	mov	r26, r0
   1dae4:	0b 01       	movw	r0, r22
   1dae6:	b9 01       	movw	r22, r18
   1dae8:	90 01       	movw	r18, r0
   1daea:	0c 01       	movw	r0, r24
   1daec:	ca 01       	movw	r24, r20
   1daee:	a0 01       	movw	r20, r0
   1daf0:	11 24       	eor	r1, r1
   1daf2:	ff 27       	eor	r31, r31
   1daf4:	59 1b       	sub	r21, r25
   1daf6:	99 f0       	breq	.+38     	; 0x1db1e <__addsf3x+0x5c>
   1daf8:	59 3f       	cpi	r21, 0xF9	; 249
   1dafa:	50 f4       	brcc	.+20     	; 0x1db10 <__addsf3x+0x4e>
   1dafc:	50 3e       	cpi	r21, 0xE0	; 224
   1dafe:	68 f1       	brcs	.+90     	; 0x1db5a <__addsf3x+0x98>
   1db00:	1a 16       	cp	r1, r26
   1db02:	f0 40       	sbci	r31, 0x00	; 0
   1db04:	a2 2f       	mov	r26, r18
   1db06:	23 2f       	mov	r18, r19
   1db08:	34 2f       	mov	r19, r20
   1db0a:	44 27       	eor	r20, r20
   1db0c:	58 5f       	subi	r21, 0xF8	; 248
   1db0e:	f3 cf       	rjmp	.-26     	; 0x1daf6 <__addsf3x+0x34>
   1db10:	46 95       	lsr	r20
   1db12:	37 95       	ror	r19
   1db14:	27 95       	ror	r18
   1db16:	a7 95       	ror	r26
   1db18:	f0 40       	sbci	r31, 0x00	; 0
   1db1a:	53 95       	inc	r21
   1db1c:	c9 f7       	brne	.-14     	; 0x1db10 <__addsf3x+0x4e>
   1db1e:	7e f4       	brtc	.+30     	; 0x1db3e <__addsf3x+0x7c>
   1db20:	1f 16       	cp	r1, r31
   1db22:	ba 0b       	sbc	r27, r26
   1db24:	62 0b       	sbc	r22, r18
   1db26:	73 0b       	sbc	r23, r19
   1db28:	84 0b       	sbc	r24, r20
   1db2a:	ba f0       	brmi	.+46     	; 0x1db5a <__addsf3x+0x98>
   1db2c:	91 50       	subi	r25, 0x01	; 1
   1db2e:	a1 f0       	breq	.+40     	; 0x1db58 <__addsf3x+0x96>
   1db30:	ff 0f       	add	r31, r31
   1db32:	bb 1f       	adc	r27, r27
   1db34:	66 1f       	adc	r22, r22
   1db36:	77 1f       	adc	r23, r23
   1db38:	88 1f       	adc	r24, r24
   1db3a:	c2 f7       	brpl	.-16     	; 0x1db2c <__addsf3x+0x6a>
   1db3c:	0e c0       	rjmp	.+28     	; 0x1db5a <__addsf3x+0x98>
   1db3e:	ba 0f       	add	r27, r26
   1db40:	62 1f       	adc	r22, r18
   1db42:	73 1f       	adc	r23, r19
   1db44:	84 1f       	adc	r24, r20
   1db46:	48 f4       	brcc	.+18     	; 0x1db5a <__addsf3x+0x98>
   1db48:	87 95       	ror	r24
   1db4a:	77 95       	ror	r23
   1db4c:	67 95       	ror	r22
   1db4e:	b7 95       	ror	r27
   1db50:	f7 95       	ror	r31
   1db52:	9e 3f       	cpi	r25, 0xFE	; 254
   1db54:	08 f0       	brcs	.+2      	; 0x1db58 <__addsf3x+0x96>
   1db56:	b3 cf       	rjmp	.-154    	; 0x1dabe <__addsf3+0x1e>
   1db58:	93 95       	inc	r25
   1db5a:	88 0f       	add	r24, r24
   1db5c:	08 f0       	brcs	.+2      	; 0x1db60 <__addsf3x+0x9e>
   1db5e:	99 27       	eor	r25, r25
   1db60:	ee 0f       	add	r30, r30
   1db62:	97 95       	ror	r25
   1db64:	87 95       	ror	r24
   1db66:	08 95       	ret

0001db68 <__cmpsf2>:
   1db68:	d9 d0       	rcall	.+434    	; 0x1dd1c <__fp_cmp>
   1db6a:	08 f4       	brcc	.+2      	; 0x1db6e <__cmpsf2+0x6>
   1db6c:	81 e0       	ldi	r24, 0x01	; 1
   1db6e:	08 95       	ret

0001db70 <__divsf3>:
   1db70:	0c d0       	rcall	.+24     	; 0x1db8a <__divsf3x>
   1db72:	0f c1       	rjmp	.+542    	; 0x1dd92 <__fp_round>
   1db74:	07 d1       	rcall	.+526    	; 0x1dd84 <__fp_pscB>
   1db76:	40 f0       	brcs	.+16     	; 0x1db88 <__divsf3+0x18>
   1db78:	fe d0       	rcall	.+508    	; 0x1dd76 <__fp_pscA>
   1db7a:	30 f0       	brcs	.+12     	; 0x1db88 <__divsf3+0x18>
   1db7c:	21 f4       	brne	.+8      	; 0x1db86 <__divsf3+0x16>
   1db7e:	5f 3f       	cpi	r21, 0xFF	; 255
   1db80:	19 f0       	breq	.+6      	; 0x1db88 <__divsf3+0x18>
   1db82:	f0 c0       	rjmp	.+480    	; 0x1dd64 <__fp_inf>
   1db84:	51 11       	cpse	r21, r1
   1db86:	39 c1       	rjmp	.+626    	; 0x1ddfa <__fp_szero>
   1db88:	f3 c0       	rjmp	.+486    	; 0x1dd70 <__fp_nan>

0001db8a <__divsf3x>:
   1db8a:	14 d1       	rcall	.+552    	; 0x1ddb4 <__fp_split3>
   1db8c:	98 f3       	brcs	.-26     	; 0x1db74 <__divsf3+0x4>

0001db8e <__divsf3_pse>:
   1db8e:	99 23       	and	r25, r25
   1db90:	c9 f3       	breq	.-14     	; 0x1db84 <__divsf3+0x14>
   1db92:	55 23       	and	r21, r21
   1db94:	b1 f3       	breq	.-20     	; 0x1db82 <__divsf3+0x12>
   1db96:	95 1b       	sub	r25, r21
   1db98:	55 0b       	sbc	r21, r21
   1db9a:	bb 27       	eor	r27, r27
   1db9c:	aa 27       	eor	r26, r26
   1db9e:	62 17       	cp	r22, r18
   1dba0:	73 07       	cpc	r23, r19
   1dba2:	84 07       	cpc	r24, r20
   1dba4:	38 f0       	brcs	.+14     	; 0x1dbb4 <__divsf3_pse+0x26>
   1dba6:	9f 5f       	subi	r25, 0xFF	; 255
   1dba8:	5f 4f       	sbci	r21, 0xFF	; 255
   1dbaa:	22 0f       	add	r18, r18
   1dbac:	33 1f       	adc	r19, r19
   1dbae:	44 1f       	adc	r20, r20
   1dbb0:	aa 1f       	adc	r26, r26
   1dbb2:	a9 f3       	breq	.-22     	; 0x1db9e <__divsf3_pse+0x10>
   1dbb4:	33 d0       	rcall	.+102    	; 0x1dc1c <__divsf3_pse+0x8e>
   1dbb6:	0e 2e       	mov	r0, r30
   1dbb8:	3a f0       	brmi	.+14     	; 0x1dbc8 <__divsf3_pse+0x3a>
   1dbba:	e0 e8       	ldi	r30, 0x80	; 128
   1dbbc:	30 d0       	rcall	.+96     	; 0x1dc1e <__divsf3_pse+0x90>
   1dbbe:	91 50       	subi	r25, 0x01	; 1
   1dbc0:	50 40       	sbci	r21, 0x00	; 0
   1dbc2:	e6 95       	lsr	r30
   1dbc4:	00 1c       	adc	r0, r0
   1dbc6:	ca f7       	brpl	.-14     	; 0x1dbba <__divsf3_pse+0x2c>
   1dbc8:	29 d0       	rcall	.+82     	; 0x1dc1c <__divsf3_pse+0x8e>
   1dbca:	fe 2f       	mov	r31, r30
   1dbcc:	27 d0       	rcall	.+78     	; 0x1dc1c <__divsf3_pse+0x8e>
   1dbce:	66 0f       	add	r22, r22
   1dbd0:	77 1f       	adc	r23, r23
   1dbd2:	88 1f       	adc	r24, r24
   1dbd4:	bb 1f       	adc	r27, r27
   1dbd6:	26 17       	cp	r18, r22
   1dbd8:	37 07       	cpc	r19, r23
   1dbda:	48 07       	cpc	r20, r24
   1dbdc:	ab 07       	cpc	r26, r27
   1dbde:	b0 e8       	ldi	r27, 0x80	; 128
   1dbe0:	09 f0       	breq	.+2      	; 0x1dbe4 <__divsf3_pse+0x56>
   1dbe2:	bb 0b       	sbc	r27, r27
   1dbe4:	80 2d       	mov	r24, r0
   1dbe6:	bf 01       	movw	r22, r30
   1dbe8:	ff 27       	eor	r31, r31
   1dbea:	93 58       	subi	r25, 0x83	; 131
   1dbec:	5f 4f       	sbci	r21, 0xFF	; 255
   1dbee:	2a f0       	brmi	.+10     	; 0x1dbfa <__divsf3_pse+0x6c>
   1dbf0:	9e 3f       	cpi	r25, 0xFE	; 254
   1dbf2:	51 05       	cpc	r21, r1
   1dbf4:	68 f0       	brcs	.+26     	; 0x1dc10 <__divsf3_pse+0x82>
   1dbf6:	b6 c0       	rjmp	.+364    	; 0x1dd64 <__fp_inf>
   1dbf8:	00 c1       	rjmp	.+512    	; 0x1ddfa <__fp_szero>
   1dbfa:	5f 3f       	cpi	r21, 0xFF	; 255
   1dbfc:	ec f3       	brlt	.-6      	; 0x1dbf8 <__divsf3_pse+0x6a>
   1dbfe:	98 3e       	cpi	r25, 0xE8	; 232
   1dc00:	dc f3       	brlt	.-10     	; 0x1dbf8 <__divsf3_pse+0x6a>
   1dc02:	86 95       	lsr	r24
   1dc04:	77 95       	ror	r23
   1dc06:	67 95       	ror	r22
   1dc08:	b7 95       	ror	r27
   1dc0a:	f7 95       	ror	r31
   1dc0c:	9f 5f       	subi	r25, 0xFF	; 255
   1dc0e:	c9 f7       	brne	.-14     	; 0x1dc02 <__divsf3_pse+0x74>
   1dc10:	88 0f       	add	r24, r24
   1dc12:	91 1d       	adc	r25, r1
   1dc14:	96 95       	lsr	r25
   1dc16:	87 95       	ror	r24
   1dc18:	97 f9       	bld	r25, 7
   1dc1a:	08 95       	ret
   1dc1c:	e1 e0       	ldi	r30, 0x01	; 1
   1dc1e:	66 0f       	add	r22, r22
   1dc20:	77 1f       	adc	r23, r23
   1dc22:	88 1f       	adc	r24, r24
   1dc24:	bb 1f       	adc	r27, r27
   1dc26:	62 17       	cp	r22, r18
   1dc28:	73 07       	cpc	r23, r19
   1dc2a:	84 07       	cpc	r24, r20
   1dc2c:	ba 07       	cpc	r27, r26
   1dc2e:	20 f0       	brcs	.+8      	; 0x1dc38 <__divsf3_pse+0xaa>
   1dc30:	62 1b       	sub	r22, r18
   1dc32:	73 0b       	sbc	r23, r19
   1dc34:	84 0b       	sbc	r24, r20
   1dc36:	ba 0b       	sbc	r27, r26
   1dc38:	ee 1f       	adc	r30, r30
   1dc3a:	88 f7       	brcc	.-30     	; 0x1dc1e <__divsf3_pse+0x90>
   1dc3c:	e0 95       	com	r30
   1dc3e:	08 95       	ret

0001dc40 <__fixsfsi>:
   1dc40:	04 d0       	rcall	.+8      	; 0x1dc4a <__fixunssfsi>
   1dc42:	68 94       	set
   1dc44:	b1 11       	cpse	r27, r1
   1dc46:	d9 c0       	rjmp	.+434    	; 0x1ddfa <__fp_szero>
   1dc48:	08 95       	ret

0001dc4a <__fixunssfsi>:
   1dc4a:	bc d0       	rcall	.+376    	; 0x1ddc4 <__fp_splitA>
   1dc4c:	88 f0       	brcs	.+34     	; 0x1dc70 <__fixunssfsi+0x26>
   1dc4e:	9f 57       	subi	r25, 0x7F	; 127
   1dc50:	90 f0       	brcs	.+36     	; 0x1dc76 <__fixunssfsi+0x2c>
   1dc52:	b9 2f       	mov	r27, r25
   1dc54:	99 27       	eor	r25, r25
   1dc56:	b7 51       	subi	r27, 0x17	; 23
   1dc58:	a0 f0       	brcs	.+40     	; 0x1dc82 <__fixunssfsi+0x38>
   1dc5a:	d1 f0       	breq	.+52     	; 0x1dc90 <__fixunssfsi+0x46>
   1dc5c:	66 0f       	add	r22, r22
   1dc5e:	77 1f       	adc	r23, r23
   1dc60:	88 1f       	adc	r24, r24
   1dc62:	99 1f       	adc	r25, r25
   1dc64:	1a f0       	brmi	.+6      	; 0x1dc6c <__fixunssfsi+0x22>
   1dc66:	ba 95       	dec	r27
   1dc68:	c9 f7       	brne	.-14     	; 0x1dc5c <__fixunssfsi+0x12>
   1dc6a:	12 c0       	rjmp	.+36     	; 0x1dc90 <__fixunssfsi+0x46>
   1dc6c:	b1 30       	cpi	r27, 0x01	; 1
   1dc6e:	81 f0       	breq	.+32     	; 0x1dc90 <__fixunssfsi+0x46>
   1dc70:	c3 d0       	rcall	.+390    	; 0x1ddf8 <__fp_zero>
   1dc72:	b1 e0       	ldi	r27, 0x01	; 1
   1dc74:	08 95       	ret
   1dc76:	c0 c0       	rjmp	.+384    	; 0x1ddf8 <__fp_zero>
   1dc78:	67 2f       	mov	r22, r23
   1dc7a:	78 2f       	mov	r23, r24
   1dc7c:	88 27       	eor	r24, r24
   1dc7e:	b8 5f       	subi	r27, 0xF8	; 248
   1dc80:	39 f0       	breq	.+14     	; 0x1dc90 <__fixunssfsi+0x46>
   1dc82:	b9 3f       	cpi	r27, 0xF9	; 249
   1dc84:	cc f3       	brlt	.-14     	; 0x1dc78 <__fixunssfsi+0x2e>
   1dc86:	86 95       	lsr	r24
   1dc88:	77 95       	ror	r23
   1dc8a:	67 95       	ror	r22
   1dc8c:	b3 95       	inc	r27
   1dc8e:	d9 f7       	brne	.-10     	; 0x1dc86 <__fixunssfsi+0x3c>
   1dc90:	3e f4       	brtc	.+14     	; 0x1dca0 <__fixunssfsi+0x56>
   1dc92:	90 95       	com	r25
   1dc94:	80 95       	com	r24
   1dc96:	70 95       	com	r23
   1dc98:	61 95       	neg	r22
   1dc9a:	7f 4f       	sbci	r23, 0xFF	; 255
   1dc9c:	8f 4f       	sbci	r24, 0xFF	; 255
   1dc9e:	9f 4f       	sbci	r25, 0xFF	; 255
   1dca0:	08 95       	ret

0001dca2 <__floatunsisf>:
   1dca2:	e8 94       	clt
   1dca4:	09 c0       	rjmp	.+18     	; 0x1dcb8 <__floatsisf+0x12>

0001dca6 <__floatsisf>:
   1dca6:	97 fb       	bst	r25, 7
   1dca8:	3e f4       	brtc	.+14     	; 0x1dcb8 <__floatsisf+0x12>
   1dcaa:	90 95       	com	r25
   1dcac:	80 95       	com	r24
   1dcae:	70 95       	com	r23
   1dcb0:	61 95       	neg	r22
   1dcb2:	7f 4f       	sbci	r23, 0xFF	; 255
   1dcb4:	8f 4f       	sbci	r24, 0xFF	; 255
   1dcb6:	9f 4f       	sbci	r25, 0xFF	; 255
   1dcb8:	99 23       	and	r25, r25
   1dcba:	a9 f0       	breq	.+42     	; 0x1dce6 <__floatsisf+0x40>
   1dcbc:	f9 2f       	mov	r31, r25
   1dcbe:	96 e9       	ldi	r25, 0x96	; 150
   1dcc0:	bb 27       	eor	r27, r27
   1dcc2:	93 95       	inc	r25
   1dcc4:	f6 95       	lsr	r31
   1dcc6:	87 95       	ror	r24
   1dcc8:	77 95       	ror	r23
   1dcca:	67 95       	ror	r22
   1dccc:	b7 95       	ror	r27
   1dcce:	f1 11       	cpse	r31, r1
   1dcd0:	f8 cf       	rjmp	.-16     	; 0x1dcc2 <__floatsisf+0x1c>
   1dcd2:	fa f4       	brpl	.+62     	; 0x1dd12 <__floatsisf+0x6c>
   1dcd4:	bb 0f       	add	r27, r27
   1dcd6:	11 f4       	brne	.+4      	; 0x1dcdc <__floatsisf+0x36>
   1dcd8:	60 ff       	sbrs	r22, 0
   1dcda:	1b c0       	rjmp	.+54     	; 0x1dd12 <__floatsisf+0x6c>
   1dcdc:	6f 5f       	subi	r22, 0xFF	; 255
   1dcde:	7f 4f       	sbci	r23, 0xFF	; 255
   1dce0:	8f 4f       	sbci	r24, 0xFF	; 255
   1dce2:	9f 4f       	sbci	r25, 0xFF	; 255
   1dce4:	16 c0       	rjmp	.+44     	; 0x1dd12 <__floatsisf+0x6c>
   1dce6:	88 23       	and	r24, r24
   1dce8:	11 f0       	breq	.+4      	; 0x1dcee <__floatsisf+0x48>
   1dcea:	96 e9       	ldi	r25, 0x96	; 150
   1dcec:	11 c0       	rjmp	.+34     	; 0x1dd10 <__floatsisf+0x6a>
   1dcee:	77 23       	and	r23, r23
   1dcf0:	21 f0       	breq	.+8      	; 0x1dcfa <__floatsisf+0x54>
   1dcf2:	9e e8       	ldi	r25, 0x8E	; 142
   1dcf4:	87 2f       	mov	r24, r23
   1dcf6:	76 2f       	mov	r23, r22
   1dcf8:	05 c0       	rjmp	.+10     	; 0x1dd04 <__floatsisf+0x5e>
   1dcfa:	66 23       	and	r22, r22
   1dcfc:	71 f0       	breq	.+28     	; 0x1dd1a <__floatsisf+0x74>
   1dcfe:	96 e8       	ldi	r25, 0x86	; 134
   1dd00:	86 2f       	mov	r24, r22
   1dd02:	70 e0       	ldi	r23, 0x00	; 0
   1dd04:	60 e0       	ldi	r22, 0x00	; 0
   1dd06:	2a f0       	brmi	.+10     	; 0x1dd12 <__floatsisf+0x6c>
   1dd08:	9a 95       	dec	r25
   1dd0a:	66 0f       	add	r22, r22
   1dd0c:	77 1f       	adc	r23, r23
   1dd0e:	88 1f       	adc	r24, r24
   1dd10:	da f7       	brpl	.-10     	; 0x1dd08 <__floatsisf+0x62>
   1dd12:	88 0f       	add	r24, r24
   1dd14:	96 95       	lsr	r25
   1dd16:	87 95       	ror	r24
   1dd18:	97 f9       	bld	r25, 7
   1dd1a:	08 95       	ret

0001dd1c <__fp_cmp>:
   1dd1c:	99 0f       	add	r25, r25
   1dd1e:	00 08       	sbc	r0, r0
   1dd20:	55 0f       	add	r21, r21
   1dd22:	aa 0b       	sbc	r26, r26
   1dd24:	e0 e8       	ldi	r30, 0x80	; 128
   1dd26:	fe ef       	ldi	r31, 0xFE	; 254
   1dd28:	16 16       	cp	r1, r22
   1dd2a:	17 06       	cpc	r1, r23
   1dd2c:	e8 07       	cpc	r30, r24
   1dd2e:	f9 07       	cpc	r31, r25
   1dd30:	c0 f0       	brcs	.+48     	; 0x1dd62 <__fp_cmp+0x46>
   1dd32:	12 16       	cp	r1, r18
   1dd34:	13 06       	cpc	r1, r19
   1dd36:	e4 07       	cpc	r30, r20
   1dd38:	f5 07       	cpc	r31, r21
   1dd3a:	98 f0       	brcs	.+38     	; 0x1dd62 <__fp_cmp+0x46>
   1dd3c:	62 1b       	sub	r22, r18
   1dd3e:	73 0b       	sbc	r23, r19
   1dd40:	84 0b       	sbc	r24, r20
   1dd42:	95 0b       	sbc	r25, r21
   1dd44:	39 f4       	brne	.+14     	; 0x1dd54 <__fp_cmp+0x38>
   1dd46:	0a 26       	eor	r0, r26
   1dd48:	61 f0       	breq	.+24     	; 0x1dd62 <__fp_cmp+0x46>
   1dd4a:	23 2b       	or	r18, r19
   1dd4c:	24 2b       	or	r18, r20
   1dd4e:	25 2b       	or	r18, r21
   1dd50:	21 f4       	brne	.+8      	; 0x1dd5a <__fp_cmp+0x3e>
   1dd52:	08 95       	ret
   1dd54:	0a 26       	eor	r0, r26
   1dd56:	09 f4       	brne	.+2      	; 0x1dd5a <__fp_cmp+0x3e>
   1dd58:	a1 40       	sbci	r26, 0x01	; 1
   1dd5a:	a6 95       	lsr	r26
   1dd5c:	8f ef       	ldi	r24, 0xFF	; 255
   1dd5e:	81 1d       	adc	r24, r1
   1dd60:	81 1d       	adc	r24, r1
   1dd62:	08 95       	ret

0001dd64 <__fp_inf>:
   1dd64:	97 f9       	bld	r25, 7
   1dd66:	9f 67       	ori	r25, 0x7F	; 127
   1dd68:	80 e8       	ldi	r24, 0x80	; 128
   1dd6a:	70 e0       	ldi	r23, 0x00	; 0
   1dd6c:	60 e0       	ldi	r22, 0x00	; 0
   1dd6e:	08 95       	ret

0001dd70 <__fp_nan>:
   1dd70:	9f ef       	ldi	r25, 0xFF	; 255
   1dd72:	80 ec       	ldi	r24, 0xC0	; 192
   1dd74:	08 95       	ret

0001dd76 <__fp_pscA>:
   1dd76:	00 24       	eor	r0, r0
   1dd78:	0a 94       	dec	r0
   1dd7a:	16 16       	cp	r1, r22
   1dd7c:	17 06       	cpc	r1, r23
   1dd7e:	18 06       	cpc	r1, r24
   1dd80:	09 06       	cpc	r0, r25
   1dd82:	08 95       	ret

0001dd84 <__fp_pscB>:
   1dd84:	00 24       	eor	r0, r0
   1dd86:	0a 94       	dec	r0
   1dd88:	12 16       	cp	r1, r18
   1dd8a:	13 06       	cpc	r1, r19
   1dd8c:	14 06       	cpc	r1, r20
   1dd8e:	05 06       	cpc	r0, r21
   1dd90:	08 95       	ret

0001dd92 <__fp_round>:
   1dd92:	09 2e       	mov	r0, r25
   1dd94:	03 94       	inc	r0
   1dd96:	00 0c       	add	r0, r0
   1dd98:	11 f4       	brne	.+4      	; 0x1dd9e <__fp_round+0xc>
   1dd9a:	88 23       	and	r24, r24
   1dd9c:	52 f0       	brmi	.+20     	; 0x1ddb2 <__fp_round+0x20>
   1dd9e:	bb 0f       	add	r27, r27
   1dda0:	40 f4       	brcc	.+16     	; 0x1ddb2 <__fp_round+0x20>
   1dda2:	bf 2b       	or	r27, r31
   1dda4:	11 f4       	brne	.+4      	; 0x1ddaa <__fp_round+0x18>
   1dda6:	60 ff       	sbrs	r22, 0
   1dda8:	04 c0       	rjmp	.+8      	; 0x1ddb2 <__fp_round+0x20>
   1ddaa:	6f 5f       	subi	r22, 0xFF	; 255
   1ddac:	7f 4f       	sbci	r23, 0xFF	; 255
   1ddae:	8f 4f       	sbci	r24, 0xFF	; 255
   1ddb0:	9f 4f       	sbci	r25, 0xFF	; 255
   1ddb2:	08 95       	ret

0001ddb4 <__fp_split3>:
   1ddb4:	57 fd       	sbrc	r21, 7
   1ddb6:	90 58       	subi	r25, 0x80	; 128
   1ddb8:	44 0f       	add	r20, r20
   1ddba:	55 1f       	adc	r21, r21
   1ddbc:	59 f0       	breq	.+22     	; 0x1ddd4 <__fp_splitA+0x10>
   1ddbe:	5f 3f       	cpi	r21, 0xFF	; 255
   1ddc0:	71 f0       	breq	.+28     	; 0x1ddde <__fp_splitA+0x1a>
   1ddc2:	47 95       	ror	r20

0001ddc4 <__fp_splitA>:
   1ddc4:	88 0f       	add	r24, r24
   1ddc6:	97 fb       	bst	r25, 7
   1ddc8:	99 1f       	adc	r25, r25
   1ddca:	61 f0       	breq	.+24     	; 0x1dde4 <__fp_splitA+0x20>
   1ddcc:	9f 3f       	cpi	r25, 0xFF	; 255
   1ddce:	79 f0       	breq	.+30     	; 0x1ddee <__fp_splitA+0x2a>
   1ddd0:	87 95       	ror	r24
   1ddd2:	08 95       	ret
   1ddd4:	12 16       	cp	r1, r18
   1ddd6:	13 06       	cpc	r1, r19
   1ddd8:	14 06       	cpc	r1, r20
   1ddda:	55 1f       	adc	r21, r21
   1dddc:	f2 cf       	rjmp	.-28     	; 0x1ddc2 <__fp_split3+0xe>
   1ddde:	46 95       	lsr	r20
   1dde0:	f1 df       	rcall	.-30     	; 0x1ddc4 <__fp_splitA>
   1dde2:	08 c0       	rjmp	.+16     	; 0x1ddf4 <__fp_splitA+0x30>
   1dde4:	16 16       	cp	r1, r22
   1dde6:	17 06       	cpc	r1, r23
   1dde8:	18 06       	cpc	r1, r24
   1ddea:	99 1f       	adc	r25, r25
   1ddec:	f1 cf       	rjmp	.-30     	; 0x1ddd0 <__fp_splitA+0xc>
   1ddee:	86 95       	lsr	r24
   1ddf0:	71 05       	cpc	r23, r1
   1ddf2:	61 05       	cpc	r22, r1
   1ddf4:	08 94       	sec
   1ddf6:	08 95       	ret

0001ddf8 <__fp_zero>:
   1ddf8:	e8 94       	clt

0001ddfa <__fp_szero>:
   1ddfa:	bb 27       	eor	r27, r27
   1ddfc:	66 27       	eor	r22, r22
   1ddfe:	77 27       	eor	r23, r23
   1de00:	cb 01       	movw	r24, r22
   1de02:	97 f9       	bld	r25, 7
   1de04:	08 95       	ret

0001de06 <__gesf2>:
   1de06:	8a df       	rcall	.-236    	; 0x1dd1c <__fp_cmp>
   1de08:	08 f4       	brcc	.+2      	; 0x1de0c <__gesf2+0x6>
   1de0a:	8f ef       	ldi	r24, 0xFF	; 255
   1de0c:	08 95       	ret

0001de0e <__mulsf3>:
   1de0e:	0b d0       	rcall	.+22     	; 0x1de26 <__mulsf3x>
   1de10:	c0 cf       	rjmp	.-128    	; 0x1dd92 <__fp_round>
   1de12:	b1 df       	rcall	.-158    	; 0x1dd76 <__fp_pscA>
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1de14:	28 f0       	brcs	.+10     	; 0x1de20 <__mulsf3+0x12>
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1de16:	b6 df       	rcall	.-148    	; 0x1dd84 <__fp_pscB>
   1de18:	18 f0       	brcs	.+6      	; 0x1de20 <__mulsf3+0x12>
   1de1a:	95 23       	and	r25, r21
   1de1c:	09 f0       	breq	.+2      	; 0x1de20 <__mulsf3+0x12>
   1de1e:	a2 cf       	rjmp	.-188    	; 0x1dd64 <__fp_inf>
   1de20:	a7 cf       	rjmp	.-178    	; 0x1dd70 <__fp_nan>
   1de22:	11 24       	eor	r1, r1
   1de24:	ea cf       	rjmp	.-44     	; 0x1ddfa <__fp_szero>

0001de26 <__mulsf3x>:
   1de26:	c6 df       	rcall	.-116    	; 0x1ddb4 <__fp_split3>
   1de28:	a0 f3       	brcs	.-24     	; 0x1de12 <__mulsf3+0x4>

0001de2a <__mulsf3_pse>:
   1de2a:	95 9f       	mul	r25, r21
   1de2c:	d1 f3       	breq	.-12     	; 0x1de22 <__mulsf3+0x14>
   1de2e:	95 0f       	add	r25, r21
   1de30:	50 e0       	ldi	r21, 0x00	; 0
   1de32:	55 1f       	adc	r21, r21
   1de34:	62 9f       	mul	r22, r18
   1de36:	f0 01       	movw	r30, r0
   1de38:	72 9f       	mul	r23, r18
   1de3a:	bb 27       	eor	r27, r27
   1de3c:	f0 0d       	add	r31, r0
   1de3e:	b1 1d       	adc	r27, r1
   1de40:	63 9f       	mul	r22, r19
   1de42:	aa 27       	eor	r26, r26
   1de44:	f0 0d       	add	r31, r0
   1de46:	b1 1d       	adc	r27, r1
   1de48:	aa 1f       	adc	r26, r26
   1de4a:	64 9f       	mul	r22, r20
   1de4c:	66 27       	eor	r22, r22
   1de4e:	b0 0d       	add	r27, r0
   1de50:	a1 1d       	adc	r26, r1
   1de52:	66 1f       	adc	r22, r22
   1de54:	82 9f       	mul	r24, r18
   1de56:	22 27       	eor	r18, r18
   1de58:	b0 0d       	add	r27, r0
   1de5a:	a1 1d       	adc	r26, r1
   1de5c:	62 1f       	adc	r22, r18
   1de5e:	73 9f       	mul	r23, r19
   1de60:	b0 0d       	add	r27, r0
   1de62:	a1 1d       	adc	r26, r1
   1de64:	62 1f       	adc	r22, r18
   1de66:	83 9f       	mul	r24, r19
   1de68:	a0 0d       	add	r26, r0
   1de6a:	61 1d       	adc	r22, r1
   1de6c:	22 1f       	adc	r18, r18
   1de6e:	74 9f       	mul	r23, r20
   1de70:	33 27       	eor	r19, r19
   1de72:	a0 0d       	add	r26, r0
   1de74:	61 1d       	adc	r22, r1
   1de76:	23 1f       	adc	r18, r19
   1de78:	84 9f       	mul	r24, r20
   1de7a:	60 0d       	add	r22, r0
   1de7c:	21 1d       	adc	r18, r1
   1de7e:	82 2f       	mov	r24, r18
   1de80:	76 2f       	mov	r23, r22
   1de82:	6a 2f       	mov	r22, r26
   1de84:	11 24       	eor	r1, r1
   1de86:	9f 57       	subi	r25, 0x7F	; 127
   1de88:	50 40       	sbci	r21, 0x00	; 0
   1de8a:	8a f0       	brmi	.+34     	; 0x1deae <__mulsf3_pse+0x84>
   1de8c:	e1 f0       	breq	.+56     	; 0x1dec6 <__mulsf3_pse+0x9c>
   1de8e:	88 23       	and	r24, r24
   1de90:	4a f0       	brmi	.+18     	; 0x1dea4 <__mulsf3_pse+0x7a>
   1de92:	ee 0f       	add	r30, r30
   1de94:	ff 1f       	adc	r31, r31
   1de96:	bb 1f       	adc	r27, r27
   1de98:	66 1f       	adc	r22, r22
   1de9a:	77 1f       	adc	r23, r23
   1de9c:	88 1f       	adc	r24, r24
   1de9e:	91 50       	subi	r25, 0x01	; 1
   1dea0:	50 40       	sbci	r21, 0x00	; 0
   1dea2:	a9 f7       	brne	.-22     	; 0x1de8e <__mulsf3_pse+0x64>
   1dea4:	9e 3f       	cpi	r25, 0xFE	; 254
   1dea6:	51 05       	cpc	r21, r1
   1dea8:	70 f0       	brcs	.+28     	; 0x1dec6 <__mulsf3_pse+0x9c>
   1deaa:	5c cf       	rjmp	.-328    	; 0x1dd64 <__fp_inf>
   1deac:	a6 cf       	rjmp	.-180    	; 0x1ddfa <__fp_szero>
   1deae:	5f 3f       	cpi	r21, 0xFF	; 255
   1deb0:	ec f3       	brlt	.-6      	; 0x1deac <__mulsf3_pse+0x82>
   1deb2:	98 3e       	cpi	r25, 0xE8	; 232
   1deb4:	dc f3       	brlt	.-10     	; 0x1deac <__mulsf3_pse+0x82>
   1deb6:	86 95       	lsr	r24
   1deb8:	77 95       	ror	r23
   1deba:	67 95       	ror	r22
   1debc:	b7 95       	ror	r27
   1debe:	f7 95       	ror	r31
   1dec0:	e7 95       	ror	r30
   1dec2:	9f 5f       	subi	r25, 0xFF	; 255
   1dec4:	c1 f7       	brne	.-16     	; 0x1deb6 <__mulsf3_pse+0x8c>
   1dec6:	fe 2b       	or	r31, r30
   1dec8:	88 0f       	add	r24, r24
   1deca:	91 1d       	adc	r25, r1
   1decc:	96 95       	lsr	r25
   1dece:	87 95       	ror	r24
   1ded0:	97 f9       	bld	r25, 7
   1ded2:	08 95       	ret

0001ded4 <round>:
   1ded4:	77 df       	rcall	.-274    	; 0x1ddc4 <__fp_splitA>
   1ded6:	e0 f0       	brcs	.+56     	; 0x1df10 <round+0x3c>
   1ded8:	9e 37       	cpi	r25, 0x7E	; 126
   1deda:	d8 f0       	brcs	.+54     	; 0x1df12 <round+0x3e>
   1dedc:	96 39       	cpi	r25, 0x96	; 150
   1dede:	b8 f4       	brcc	.+46     	; 0x1df0e <round+0x3a>
   1dee0:	9e 38       	cpi	r25, 0x8E	; 142
   1dee2:	48 f4       	brcc	.+18     	; 0x1def6 <round+0x22>
   1dee4:	67 2f       	mov	r22, r23
   1dee6:	78 2f       	mov	r23, r24
   1dee8:	88 27       	eor	r24, r24
   1deea:	98 5f       	subi	r25, 0xF8	; 248
   1deec:	f9 cf       	rjmp	.-14     	; 0x1dee0 <round+0xc>
   1deee:	86 95       	lsr	r24
   1def0:	77 95       	ror	r23
   1def2:	67 95       	ror	r22
   1def4:	93 95       	inc	r25
   1def6:	95 39       	cpi	r25, 0x95	; 149
   1def8:	d0 f3       	brcs	.-12     	; 0x1deee <round+0x1a>
   1defa:	b6 2f       	mov	r27, r22
   1defc:	b1 70       	andi	r27, 0x01	; 1
   1defe:	6b 0f       	add	r22, r27
   1df00:	71 1d       	adc	r23, r1
   1df02:	81 1d       	adc	r24, r1
   1df04:	20 f4       	brcc	.+8      	; 0x1df0e <round+0x3a>
   1df06:	87 95       	ror	r24
   1df08:	77 95       	ror	r23
   1df0a:	67 95       	ror	r22
   1df0c:	93 95       	inc	r25
   1df0e:	02 c0       	rjmp	.+4      	; 0x1df14 <__fp_mintl>
   1df10:	1c c0       	rjmp	.+56     	; 0x1df4a <__fp_mpack>
   1df12:	73 cf       	rjmp	.-282    	; 0x1ddfa <__fp_szero>

0001df14 <__fp_mintl>:
   1df14:	88 23       	and	r24, r24
   1df16:	71 f4       	brne	.+28     	; 0x1df34 <__fp_mintl+0x20>
   1df18:	77 23       	and	r23, r23
   1df1a:	21 f0       	breq	.+8      	; 0x1df24 <__fp_mintl+0x10>
   1df1c:	98 50       	subi	r25, 0x08	; 8
   1df1e:	87 2b       	or	r24, r23
   1df20:	76 2f       	mov	r23, r22
   1df22:	07 c0       	rjmp	.+14     	; 0x1df32 <__fp_mintl+0x1e>
   1df24:	66 23       	and	r22, r22
   1df26:	11 f4       	brne	.+4      	; 0x1df2c <__fp_mintl+0x18>
   1df28:	99 27       	eor	r25, r25
   1df2a:	0d c0       	rjmp	.+26     	; 0x1df46 <__fp_mintl+0x32>
   1df2c:	90 51       	subi	r25, 0x10	; 16
   1df2e:	86 2b       	or	r24, r22
   1df30:	70 e0       	ldi	r23, 0x00	; 0
   1df32:	60 e0       	ldi	r22, 0x00	; 0
   1df34:	2a f0       	brmi	.+10     	; 0x1df40 <__fp_mintl+0x2c>
   1df36:	9a 95       	dec	r25
   1df38:	66 0f       	add	r22, r22
   1df3a:	77 1f       	adc	r23, r23
   1df3c:	88 1f       	adc	r24, r24
   1df3e:	da f7       	brpl	.-10     	; 0x1df36 <__fp_mintl+0x22>
   1df40:	88 0f       	add	r24, r24
   1df42:	96 95       	lsr	r25
   1df44:	87 95       	ror	r24
   1df46:	97 f9       	bld	r25, 7
   1df48:	08 95       	ret

0001df4a <__fp_mpack>:
   1df4a:	9f 3f       	cpi	r25, 0xFF	; 255
   1df4c:	31 f0       	breq	.+12     	; 0x1df5a <__fp_mpack_finite+0xc>

0001df4e <__fp_mpack_finite>:
   1df4e:	91 50       	subi	r25, 0x01	; 1
   1df50:	20 f4       	brcc	.+8      	; 0x1df5a <__fp_mpack_finite+0xc>
   1df52:	87 95       	ror	r24
   1df54:	77 95       	ror	r23
   1df56:	67 95       	ror	r22
   1df58:	b7 95       	ror	r27
   1df5a:	88 0f       	add	r24, r24
   1df5c:	91 1d       	adc	r25, r1
   1df5e:	96 95       	lsr	r25
   1df60:	87 95       	ror	r24
   1df62:	97 f9       	bld	r25, 7
   1df64:	08 95       	ret

0001df66 <calloc>:
   1df66:	0f 93       	push	r16
   1df68:	1f 93       	push	r17
   1df6a:	cf 93       	push	r28
   1df6c:	df 93       	push	r29
   1df6e:	86 9f       	mul	r24, r22
   1df70:	80 01       	movw	r16, r0
   1df72:	87 9f       	mul	r24, r23
   1df74:	10 0d       	add	r17, r0
   1df76:	96 9f       	mul	r25, r22
   1df78:	10 0d       	add	r17, r0
   1df7a:	11 24       	eor	r1, r1
   1df7c:	c8 01       	movw	r24, r16
   1df7e:	0d d0       	rcall	.+26     	; 0x1df9a <malloc>
   1df80:	ec 01       	movw	r28, r24
   1df82:	00 97       	sbiw	r24, 0x00	; 0
   1df84:	21 f0       	breq	.+8      	; 0x1df8e <calloc+0x28>
   1df86:	a8 01       	movw	r20, r16
   1df88:	60 e0       	ldi	r22, 0x00	; 0
   1df8a:	70 e0       	ldi	r23, 0x00	; 0
   1df8c:	0a d2       	rcall	.+1044   	; 0x1e3a2 <memset>
   1df8e:	ce 01       	movw	r24, r28
   1df90:	df 91       	pop	r29
   1df92:	cf 91       	pop	r28
   1df94:	1f 91       	pop	r17
   1df96:	0f 91       	pop	r16
   1df98:	08 95       	ret

0001df9a <malloc>:
   1df9a:	0f 93       	push	r16
   1df9c:	1f 93       	push	r17
   1df9e:	cf 93       	push	r28
   1dfa0:	df 93       	push	r29
   1dfa2:	82 30       	cpi	r24, 0x02	; 2
   1dfa4:	91 05       	cpc	r25, r1
   1dfa6:	10 f4       	brcc	.+4      	; 0x1dfac <malloc+0x12>
   1dfa8:	82 e0       	ldi	r24, 0x02	; 2
   1dfaa:	90 e0       	ldi	r25, 0x00	; 0
   1dfac:	e0 91 13 20 	lds	r30, 0x2013	; 0x802013 <__flp>
   1dfb0:	f0 91 14 20 	lds	r31, 0x2014	; 0x802014 <__flp+0x1>
   1dfb4:	20 e0       	ldi	r18, 0x00	; 0
   1dfb6:	30 e0       	ldi	r19, 0x00	; 0
   1dfb8:	a0 e0       	ldi	r26, 0x00	; 0
   1dfba:	b0 e0       	ldi	r27, 0x00	; 0
   1dfbc:	30 97       	sbiw	r30, 0x00	; 0
   1dfbe:	19 f1       	breq	.+70     	; 0x1e006 <malloc+0x6c>
   1dfc0:	40 81       	ld	r20, Z
   1dfc2:	51 81       	ldd	r21, Z+1	; 0x01
   1dfc4:	02 81       	ldd	r16, Z+2	; 0x02
   1dfc6:	13 81       	ldd	r17, Z+3	; 0x03
   1dfc8:	48 17       	cp	r20, r24
   1dfca:	59 07       	cpc	r21, r25
   1dfcc:	c8 f0       	brcs	.+50     	; 0x1e000 <malloc+0x66>
   1dfce:	84 17       	cp	r24, r20
   1dfd0:	95 07       	cpc	r25, r21
   1dfd2:	69 f4       	brne	.+26     	; 0x1dfee <malloc+0x54>
   1dfd4:	10 97       	sbiw	r26, 0x00	; 0
   1dfd6:	31 f0       	breq	.+12     	; 0x1dfe4 <malloc+0x4a>
   1dfd8:	12 96       	adiw	r26, 0x02	; 2
   1dfda:	0c 93       	st	X, r16
   1dfdc:	12 97       	sbiw	r26, 0x02	; 2
   1dfde:	13 96       	adiw	r26, 0x03	; 3
   1dfe0:	1c 93       	st	X, r17
   1dfe2:	27 c0       	rjmp	.+78     	; 0x1e032 <malloc+0x98>
   1dfe4:	00 93 13 20 	sts	0x2013, r16	; 0x802013 <__flp>
   1dfe8:	10 93 14 20 	sts	0x2014, r17	; 0x802014 <__flp+0x1>
   1dfec:	22 c0       	rjmp	.+68     	; 0x1e032 <malloc+0x98>
   1dfee:	21 15       	cp	r18, r1
   1dff0:	31 05       	cpc	r19, r1
   1dff2:	19 f0       	breq	.+6      	; 0x1dffa <malloc+0x60>
   1dff4:	42 17       	cp	r20, r18
   1dff6:	53 07       	cpc	r21, r19
   1dff8:	18 f4       	brcc	.+6      	; 0x1e000 <malloc+0x66>
   1dffa:	9a 01       	movw	r18, r20
   1dffc:	bd 01       	movw	r22, r26
   1dffe:	ef 01       	movw	r28, r30
   1e000:	df 01       	movw	r26, r30
   1e002:	f8 01       	movw	r30, r16
   1e004:	db cf       	rjmp	.-74     	; 0x1dfbc <malloc+0x22>
   1e006:	21 15       	cp	r18, r1
   1e008:	31 05       	cpc	r19, r1
   1e00a:	f9 f0       	breq	.+62     	; 0x1e04a <malloc+0xb0>
   1e00c:	28 1b       	sub	r18, r24
   1e00e:	39 0b       	sbc	r19, r25
   1e010:	24 30       	cpi	r18, 0x04	; 4
   1e012:	31 05       	cpc	r19, r1
   1e014:	80 f4       	brcc	.+32     	; 0x1e036 <malloc+0x9c>
   1e016:	8a 81       	ldd	r24, Y+2	; 0x02
   1e018:	9b 81       	ldd	r25, Y+3	; 0x03
   1e01a:	61 15       	cp	r22, r1
   1e01c:	71 05       	cpc	r23, r1
   1e01e:	21 f0       	breq	.+8      	; 0x1e028 <malloc+0x8e>
   1e020:	fb 01       	movw	r30, r22
   1e022:	93 83       	std	Z+3, r25	; 0x03
   1e024:	82 83       	std	Z+2, r24	; 0x02
   1e026:	04 c0       	rjmp	.+8      	; 0x1e030 <malloc+0x96>
   1e028:	90 93 14 20 	sts	0x2014, r25	; 0x802014 <__flp+0x1>
   1e02c:	80 93 13 20 	sts	0x2013, r24	; 0x802013 <__flp>
   1e030:	fe 01       	movw	r30, r28
   1e032:	32 96       	adiw	r30, 0x02	; 2
   1e034:	44 c0       	rjmp	.+136    	; 0x1e0be <malloc+0x124>
   1e036:	fe 01       	movw	r30, r28
   1e038:	e2 0f       	add	r30, r18
   1e03a:	f3 1f       	adc	r31, r19
   1e03c:	81 93       	st	Z+, r24
   1e03e:	91 93       	st	Z+, r25
   1e040:	22 50       	subi	r18, 0x02	; 2
   1e042:	31 09       	sbc	r19, r1
   1e044:	39 83       	std	Y+1, r19	; 0x01
   1e046:	28 83       	st	Y, r18
   1e048:	3a c0       	rjmp	.+116    	; 0x1e0be <malloc+0x124>
   1e04a:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <__brkval>
   1e04e:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <__brkval+0x1>
   1e052:	23 2b       	or	r18, r19
   1e054:	41 f4       	brne	.+16     	; 0x1e066 <malloc+0xcc>
   1e056:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_start>
   1e05a:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
   1e05e:	30 93 12 20 	sts	0x2012, r19	; 0x802012 <__brkval+0x1>
   1e062:	20 93 11 20 	sts	0x2011, r18	; 0x802011 <__brkval>
   1e066:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__malloc_heap_end>
   1e06a:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
   1e06e:	21 15       	cp	r18, r1
   1e070:	31 05       	cpc	r19, r1
   1e072:	41 f4       	brne	.+16     	; 0x1e084 <malloc+0xea>
   1e074:	2d b7       	in	r18, 0x3d	; 61
   1e076:	3e b7       	in	r19, 0x3e	; 62
   1e078:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__malloc_margin>
   1e07c:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <__malloc_margin+0x1>
   1e080:	24 1b       	sub	r18, r20
   1e082:	35 0b       	sbc	r19, r21
   1e084:	e0 91 11 20 	lds	r30, 0x2011	; 0x802011 <__brkval>
   1e088:	f0 91 12 20 	lds	r31, 0x2012	; 0x802012 <__brkval+0x1>
   1e08c:	e2 17       	cp	r30, r18
   1e08e:	f3 07       	cpc	r31, r19
   1e090:	a0 f4       	brcc	.+40     	; 0x1e0ba <malloc+0x120>
   1e092:	2e 1b       	sub	r18, r30
   1e094:	3f 0b       	sbc	r19, r31
   1e096:	28 17       	cp	r18, r24
   1e098:	39 07       	cpc	r19, r25
   1e09a:	78 f0       	brcs	.+30     	; 0x1e0ba <malloc+0x120>
   1e09c:	ac 01       	movw	r20, r24
   1e09e:	4e 5f       	subi	r20, 0xFE	; 254
   1e0a0:	5f 4f       	sbci	r21, 0xFF	; 255
   1e0a2:	24 17       	cp	r18, r20
   1e0a4:	35 07       	cpc	r19, r21
   1e0a6:	48 f0       	brcs	.+18     	; 0x1e0ba <malloc+0x120>
   1e0a8:	4e 0f       	add	r20, r30
   1e0aa:	5f 1f       	adc	r21, r31
   1e0ac:	50 93 12 20 	sts	0x2012, r21	; 0x802012 <__brkval+0x1>
   1e0b0:	40 93 11 20 	sts	0x2011, r20	; 0x802011 <__brkval>
   1e0b4:	81 93       	st	Z+, r24
   1e0b6:	91 93       	st	Z+, r25
   1e0b8:	02 c0       	rjmp	.+4      	; 0x1e0be <malloc+0x124>
   1e0ba:	e0 e0       	ldi	r30, 0x00	; 0
   1e0bc:	f0 e0       	ldi	r31, 0x00	; 0
   1e0be:	cf 01       	movw	r24, r30
   1e0c0:	df 91       	pop	r29
   1e0c2:	cf 91       	pop	r28
   1e0c4:	1f 91       	pop	r17
   1e0c6:	0f 91       	pop	r16
   1e0c8:	08 95       	ret

0001e0ca <free>:
   1e0ca:	cf 93       	push	r28
   1e0cc:	df 93       	push	r29
   1e0ce:	00 97       	sbiw	r24, 0x00	; 0
   1e0d0:	09 f4       	brne	.+2      	; 0x1e0d4 <free+0xa>
   1e0d2:	81 c0       	rjmp	.+258    	; 0x1e1d6 <free+0x10c>
   1e0d4:	fc 01       	movw	r30, r24
   1e0d6:	32 97       	sbiw	r30, 0x02	; 2
   1e0d8:	13 82       	std	Z+3, r1	; 0x03
   1e0da:	12 82       	std	Z+2, r1	; 0x02
   1e0dc:	a0 91 13 20 	lds	r26, 0x2013	; 0x802013 <__flp>
   1e0e0:	b0 91 14 20 	lds	r27, 0x2014	; 0x802014 <__flp+0x1>
   1e0e4:	10 97       	sbiw	r26, 0x00	; 0
   1e0e6:	81 f4       	brne	.+32     	; 0x1e108 <free+0x3e>
   1e0e8:	20 81       	ld	r18, Z
   1e0ea:	31 81       	ldd	r19, Z+1	; 0x01
   1e0ec:	82 0f       	add	r24, r18
   1e0ee:	93 1f       	adc	r25, r19
   1e0f0:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <__brkval>
   1e0f4:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <__brkval+0x1>
   1e0f8:	28 17       	cp	r18, r24
   1e0fa:	39 07       	cpc	r19, r25
   1e0fc:	51 f5       	brne	.+84     	; 0x1e152 <free+0x88>
   1e0fe:	f0 93 12 20 	sts	0x2012, r31	; 0x802012 <__brkval+0x1>
   1e102:	e0 93 11 20 	sts	0x2011, r30	; 0x802011 <__brkval>
   1e106:	67 c0       	rjmp	.+206    	; 0x1e1d6 <free+0x10c>
   1e108:	ed 01       	movw	r28, r26
   1e10a:	20 e0       	ldi	r18, 0x00	; 0
   1e10c:	30 e0       	ldi	r19, 0x00	; 0
   1e10e:	ce 17       	cp	r28, r30
   1e110:	df 07       	cpc	r29, r31
   1e112:	40 f4       	brcc	.+16     	; 0x1e124 <free+0x5a>
   1e114:	4a 81       	ldd	r20, Y+2	; 0x02
   1e116:	5b 81       	ldd	r21, Y+3	; 0x03
   1e118:	9e 01       	movw	r18, r28
   1e11a:	41 15       	cp	r20, r1
   1e11c:	51 05       	cpc	r21, r1
   1e11e:	f1 f0       	breq	.+60     	; 0x1e15c <free+0x92>
   1e120:	ea 01       	movw	r28, r20
   1e122:	f5 cf       	rjmp	.-22     	; 0x1e10e <free+0x44>
   1e124:	d3 83       	std	Z+3, r29	; 0x03
   1e126:	c2 83       	std	Z+2, r28	; 0x02
   1e128:	40 81       	ld	r20, Z
   1e12a:	51 81       	ldd	r21, Z+1	; 0x01
   1e12c:	84 0f       	add	r24, r20
   1e12e:	95 1f       	adc	r25, r21
   1e130:	c8 17       	cp	r28, r24
   1e132:	d9 07       	cpc	r29, r25
   1e134:	59 f4       	brne	.+22     	; 0x1e14c <free+0x82>
   1e136:	88 81       	ld	r24, Y
   1e138:	99 81       	ldd	r25, Y+1	; 0x01
   1e13a:	84 0f       	add	r24, r20
   1e13c:	95 1f       	adc	r25, r21
   1e13e:	02 96       	adiw	r24, 0x02	; 2
   1e140:	91 83       	std	Z+1, r25	; 0x01
   1e142:	80 83       	st	Z, r24
   1e144:	8a 81       	ldd	r24, Y+2	; 0x02
   1e146:	9b 81       	ldd	r25, Y+3	; 0x03
   1e148:	93 83       	std	Z+3, r25	; 0x03
   1e14a:	82 83       	std	Z+2, r24	; 0x02
   1e14c:	21 15       	cp	r18, r1
   1e14e:	31 05       	cpc	r19, r1
   1e150:	29 f4       	brne	.+10     	; 0x1e15c <free+0x92>
   1e152:	f0 93 14 20 	sts	0x2014, r31	; 0x802014 <__flp+0x1>
   1e156:	e0 93 13 20 	sts	0x2013, r30	; 0x802013 <__flp>
   1e15a:	3d c0       	rjmp	.+122    	; 0x1e1d6 <free+0x10c>
   1e15c:	e9 01       	movw	r28, r18
   1e15e:	fb 83       	std	Y+3, r31	; 0x03
   1e160:	ea 83       	std	Y+2, r30	; 0x02
   1e162:	49 91       	ld	r20, Y+
   1e164:	59 91       	ld	r21, Y+
   1e166:	c4 0f       	add	r28, r20
   1e168:	d5 1f       	adc	r29, r21
   1e16a:	ec 17       	cp	r30, r28
   1e16c:	fd 07       	cpc	r31, r29
   1e16e:	61 f4       	brne	.+24     	; 0x1e188 <free+0xbe>
   1e170:	80 81       	ld	r24, Z
   1e172:	91 81       	ldd	r25, Z+1	; 0x01
   1e174:	84 0f       	add	r24, r20
   1e176:	95 1f       	adc	r25, r21
   1e178:	02 96       	adiw	r24, 0x02	; 2
   1e17a:	e9 01       	movw	r28, r18
   1e17c:	99 83       	std	Y+1, r25	; 0x01
   1e17e:	88 83       	st	Y, r24
   1e180:	82 81       	ldd	r24, Z+2	; 0x02
   1e182:	93 81       	ldd	r25, Z+3	; 0x03
   1e184:	9b 83       	std	Y+3, r25	; 0x03
   1e186:	8a 83       	std	Y+2, r24	; 0x02
   1e188:	e0 e0       	ldi	r30, 0x00	; 0
   1e18a:	f0 e0       	ldi	r31, 0x00	; 0
   1e18c:	12 96       	adiw	r26, 0x02	; 2
   1e18e:	8d 91       	ld	r24, X+
   1e190:	9c 91       	ld	r25, X
   1e192:	13 97       	sbiw	r26, 0x03	; 3
   1e194:	00 97       	sbiw	r24, 0x00	; 0
   1e196:	19 f0       	breq	.+6      	; 0x1e19e <free+0xd4>
   1e198:	fd 01       	movw	r30, r26
   1e19a:	dc 01       	movw	r26, r24
   1e19c:	f7 cf       	rjmp	.-18     	; 0x1e18c <free+0xc2>
   1e19e:	8d 91       	ld	r24, X+
   1e1a0:	9c 91       	ld	r25, X
   1e1a2:	11 97       	sbiw	r26, 0x01	; 1
   1e1a4:	9d 01       	movw	r18, r26
   1e1a6:	2e 5f       	subi	r18, 0xFE	; 254
   1e1a8:	3f 4f       	sbci	r19, 0xFF	; 255
   1e1aa:	82 0f       	add	r24, r18
   1e1ac:	93 1f       	adc	r25, r19
   1e1ae:	20 91 11 20 	lds	r18, 0x2011	; 0x802011 <__brkval>
   1e1b2:	30 91 12 20 	lds	r19, 0x2012	; 0x802012 <__brkval+0x1>
   1e1b6:	28 17       	cp	r18, r24
   1e1b8:	39 07       	cpc	r19, r25
   1e1ba:	69 f4       	brne	.+26     	; 0x1e1d6 <free+0x10c>
   1e1bc:	30 97       	sbiw	r30, 0x00	; 0
   1e1be:	29 f4       	brne	.+10     	; 0x1e1ca <free+0x100>
   1e1c0:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <__flp+0x1>
   1e1c4:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <__flp>
   1e1c8:	02 c0       	rjmp	.+4      	; 0x1e1ce <free+0x104>
   1e1ca:	13 82       	std	Z+3, r1	; 0x03
   1e1cc:	12 82       	std	Z+2, r1	; 0x02
   1e1ce:	b0 93 12 20 	sts	0x2012, r27	; 0x802012 <__brkval+0x1>
   1e1d2:	a0 93 11 20 	sts	0x2011, r26	; 0x802011 <__brkval>
   1e1d6:	df 91       	pop	r29
   1e1d8:	cf 91       	pop	r28
   1e1da:	08 95       	ret

0001e1dc <__ftoa_engine>:
   1e1dc:	28 30       	cpi	r18, 0x08	; 8
   1e1de:	08 f0       	brcs	.+2      	; 0x1e1e2 <__ftoa_engine+0x6>
   1e1e0:	27 e0       	ldi	r18, 0x07	; 7
   1e1e2:	33 27       	eor	r19, r19
   1e1e4:	da 01       	movw	r26, r20
   1e1e6:	99 0f       	add	r25, r25
   1e1e8:	31 1d       	adc	r19, r1
   1e1ea:	87 fd       	sbrc	r24, 7
   1e1ec:	91 60       	ori	r25, 0x01	; 1
   1e1ee:	00 96       	adiw	r24, 0x00	; 0
   1e1f0:	61 05       	cpc	r22, r1
   1e1f2:	71 05       	cpc	r23, r1
   1e1f4:	39 f4       	brne	.+14     	; 0x1e204 <__ftoa_engine+0x28>
   1e1f6:	32 60       	ori	r19, 0x02	; 2
   1e1f8:	2e 5f       	subi	r18, 0xFE	; 254
   1e1fa:	3d 93       	st	X+, r19
   1e1fc:	30 e3       	ldi	r19, 0x30	; 48
   1e1fe:	2a 95       	dec	r18
   1e200:	e1 f7       	brne	.-8      	; 0x1e1fa <__ftoa_engine+0x1e>
   1e202:	08 95       	ret
   1e204:	9f 3f       	cpi	r25, 0xFF	; 255
   1e206:	30 f0       	brcs	.+12     	; 0x1e214 <__ftoa_engine+0x38>
   1e208:	80 38       	cpi	r24, 0x80	; 128
   1e20a:	71 05       	cpc	r23, r1
   1e20c:	61 05       	cpc	r22, r1
   1e20e:	09 f0       	breq	.+2      	; 0x1e212 <__ftoa_engine+0x36>
   1e210:	3c 5f       	subi	r19, 0xFC	; 252
   1e212:	3c 5f       	subi	r19, 0xFC	; 252
   1e214:	3d 93       	st	X+, r19
   1e216:	91 30       	cpi	r25, 0x01	; 1
   1e218:	08 f0       	brcs	.+2      	; 0x1e21c <__ftoa_engine+0x40>
   1e21a:	80 68       	ori	r24, 0x80	; 128
   1e21c:	91 1d       	adc	r25, r1
   1e21e:	df 93       	push	r29
   1e220:	cf 93       	push	r28
   1e222:	1f 93       	push	r17
   1e224:	0f 93       	push	r16
   1e226:	ff 92       	push	r15
   1e228:	ef 92       	push	r14
   1e22a:	19 2f       	mov	r17, r25
   1e22c:	98 7f       	andi	r25, 0xF8	; 248
   1e22e:	96 95       	lsr	r25
   1e230:	e9 2f       	mov	r30, r25
   1e232:	96 95       	lsr	r25
   1e234:	96 95       	lsr	r25
   1e236:	e9 0f       	add	r30, r25
   1e238:	ff 27       	eor	r31, r31
   1e23a:	e8 5c       	subi	r30, 0xC8	; 200
   1e23c:	fd 4f       	sbci	r31, 0xFD	; 253
   1e23e:	99 27       	eor	r25, r25
   1e240:	33 27       	eor	r19, r19
   1e242:	ee 24       	eor	r14, r14
   1e244:	ff 24       	eor	r15, r15
   1e246:	a7 01       	movw	r20, r14
   1e248:	e7 01       	movw	r28, r14
   1e24a:	05 90       	lpm	r0, Z+
   1e24c:	08 94       	sec
   1e24e:	07 94       	ror	r0
   1e250:	28 f4       	brcc	.+10     	; 0x1e25c <__ftoa_engine+0x80>
   1e252:	36 0f       	add	r19, r22
   1e254:	e7 1e       	adc	r14, r23
   1e256:	f8 1e       	adc	r15, r24
   1e258:	49 1f       	adc	r20, r25
   1e25a:	51 1d       	adc	r21, r1
   1e25c:	66 0f       	add	r22, r22
   1e25e:	77 1f       	adc	r23, r23
   1e260:	88 1f       	adc	r24, r24
   1e262:	99 1f       	adc	r25, r25
   1e264:	06 94       	lsr	r0
   1e266:	a1 f7       	brne	.-24     	; 0x1e250 <__ftoa_engine+0x74>
   1e268:	05 90       	lpm	r0, Z+
   1e26a:	07 94       	ror	r0
   1e26c:	28 f4       	brcc	.+10     	; 0x1e278 <__ftoa_engine+0x9c>
   1e26e:	e7 0e       	add	r14, r23
   1e270:	f8 1e       	adc	r15, r24
   1e272:	49 1f       	adc	r20, r25
   1e274:	56 1f       	adc	r21, r22
   1e276:	c1 1d       	adc	r28, r1
   1e278:	77 0f       	add	r23, r23
   1e27a:	88 1f       	adc	r24, r24
   1e27c:	99 1f       	adc	r25, r25
   1e27e:	66 1f       	adc	r22, r22
   1e280:	06 94       	lsr	r0
   1e282:	a1 f7       	brne	.-24     	; 0x1e26c <__ftoa_engine+0x90>
   1e284:	05 90       	lpm	r0, Z+
   1e286:	07 94       	ror	r0
   1e288:	28 f4       	brcc	.+10     	; 0x1e294 <__ftoa_engine+0xb8>
   1e28a:	f8 0e       	add	r15, r24
   1e28c:	49 1f       	adc	r20, r25
   1e28e:	56 1f       	adc	r21, r22
   1e290:	c7 1f       	adc	r28, r23
   1e292:	d1 1d       	adc	r29, r1
   1e294:	88 0f       	add	r24, r24
   1e296:	99 1f       	adc	r25, r25
   1e298:	66 1f       	adc	r22, r22
   1e29a:	77 1f       	adc	r23, r23
   1e29c:	06 94       	lsr	r0
   1e29e:	a1 f7       	brne	.-24     	; 0x1e288 <__ftoa_engine+0xac>
   1e2a0:	05 90       	lpm	r0, Z+
   1e2a2:	07 94       	ror	r0
   1e2a4:	20 f4       	brcc	.+8      	; 0x1e2ae <__ftoa_engine+0xd2>
   1e2a6:	49 0f       	add	r20, r25
   1e2a8:	56 1f       	adc	r21, r22
   1e2aa:	c7 1f       	adc	r28, r23
   1e2ac:	d8 1f       	adc	r29, r24
   1e2ae:	99 0f       	add	r25, r25
   1e2b0:	66 1f       	adc	r22, r22
   1e2b2:	77 1f       	adc	r23, r23
   1e2b4:	88 1f       	adc	r24, r24
   1e2b6:	06 94       	lsr	r0
   1e2b8:	a9 f7       	brne	.-22     	; 0x1e2a4 <__ftoa_engine+0xc8>
   1e2ba:	84 91       	lpm	r24, Z
   1e2bc:	10 95       	com	r17
   1e2be:	17 70       	andi	r17, 0x07	; 7
   1e2c0:	41 f0       	breq	.+16     	; 0x1e2d2 <__ftoa_engine+0xf6>
   1e2c2:	d6 95       	lsr	r29
   1e2c4:	c7 95       	ror	r28
   1e2c6:	57 95       	ror	r21
   1e2c8:	47 95       	ror	r20
   1e2ca:	f7 94       	ror	r15
   1e2cc:	e7 94       	ror	r14
   1e2ce:	1a 95       	dec	r17
   1e2d0:	c1 f7       	brne	.-16     	; 0x1e2c2 <__ftoa_engine+0xe6>
   1e2d2:	ee ed       	ldi	r30, 0xDE	; 222
   1e2d4:	f1 e0       	ldi	r31, 0x01	; 1
   1e2d6:	68 94       	set
   1e2d8:	15 90       	lpm	r1, Z+
   1e2da:	15 91       	lpm	r17, Z+
   1e2dc:	35 91       	lpm	r19, Z+
   1e2de:	65 91       	lpm	r22, Z+
   1e2e0:	95 91       	lpm	r25, Z+
   1e2e2:	05 90       	lpm	r0, Z+
   1e2e4:	7f e2       	ldi	r23, 0x2F	; 47
   1e2e6:	73 95       	inc	r23
   1e2e8:	e1 18       	sub	r14, r1
   1e2ea:	f1 0a       	sbc	r15, r17
   1e2ec:	43 0b       	sbc	r20, r19
   1e2ee:	56 0b       	sbc	r21, r22
   1e2f0:	c9 0b       	sbc	r28, r25
   1e2f2:	d0 09       	sbc	r29, r0
   1e2f4:	c0 f7       	brcc	.-16     	; 0x1e2e6 <__ftoa_engine+0x10a>
   1e2f6:	e1 0c       	add	r14, r1
   1e2f8:	f1 1e       	adc	r15, r17
   1e2fa:	43 1f       	adc	r20, r19
   1e2fc:	56 1f       	adc	r21, r22
   1e2fe:	c9 1f       	adc	r28, r25
   1e300:	d0 1d       	adc	r29, r0
   1e302:	7e f4       	brtc	.+30     	; 0x1e322 <__ftoa_engine+0x146>
   1e304:	70 33       	cpi	r23, 0x30	; 48
   1e306:	11 f4       	brne	.+4      	; 0x1e30c <__ftoa_engine+0x130>
   1e308:	8a 95       	dec	r24
   1e30a:	e6 cf       	rjmp	.-52     	; 0x1e2d8 <__ftoa_engine+0xfc>
   1e30c:	e8 94       	clt
   1e30e:	01 50       	subi	r16, 0x01	; 1
   1e310:	30 f0       	brcs	.+12     	; 0x1e31e <__ftoa_engine+0x142>
   1e312:	08 0f       	add	r16, r24
   1e314:	0a f4       	brpl	.+2      	; 0x1e318 <__ftoa_engine+0x13c>
   1e316:	00 27       	eor	r16, r16
   1e318:	02 17       	cp	r16, r18
   1e31a:	08 f4       	brcc	.+2      	; 0x1e31e <__ftoa_engine+0x142>
   1e31c:	20 2f       	mov	r18, r16
   1e31e:	23 95       	inc	r18
   1e320:	02 2f       	mov	r16, r18
   1e322:	7a 33       	cpi	r23, 0x3A	; 58
   1e324:	28 f0       	brcs	.+10     	; 0x1e330 <__ftoa_engine+0x154>
   1e326:	79 e3       	ldi	r23, 0x39	; 57
   1e328:	7d 93       	st	X+, r23
   1e32a:	2a 95       	dec	r18
   1e32c:	e9 f7       	brne	.-6      	; 0x1e328 <__ftoa_engine+0x14c>
   1e32e:	10 c0       	rjmp	.+32     	; 0x1e350 <__ftoa_engine+0x174>
   1e330:	7d 93       	st	X+, r23
   1e332:	2a 95       	dec	r18
   1e334:	89 f6       	brne	.-94     	; 0x1e2d8 <__ftoa_engine+0xfc>
   1e336:	06 94       	lsr	r0
   1e338:	97 95       	ror	r25
   1e33a:	67 95       	ror	r22
   1e33c:	37 95       	ror	r19
   1e33e:	17 95       	ror	r17
   1e340:	17 94       	ror	r1
   1e342:	e1 18       	sub	r14, r1
   1e344:	f1 0a       	sbc	r15, r17
   1e346:	43 0b       	sbc	r20, r19
   1e348:	56 0b       	sbc	r21, r22
   1e34a:	c9 0b       	sbc	r28, r25
   1e34c:	d0 09       	sbc	r29, r0
   1e34e:	98 f0       	brcs	.+38     	; 0x1e376 <__ftoa_engine+0x19a>
   1e350:	23 95       	inc	r18
   1e352:	7e 91       	ld	r23, -X
   1e354:	73 95       	inc	r23
   1e356:	7a 33       	cpi	r23, 0x3A	; 58
   1e358:	08 f0       	brcs	.+2      	; 0x1e35c <__ftoa_engine+0x180>
   1e35a:	70 e3       	ldi	r23, 0x30	; 48
   1e35c:	7c 93       	st	X, r23
   1e35e:	20 13       	cpse	r18, r16
   1e360:	b8 f7       	brcc	.-18     	; 0x1e350 <__ftoa_engine+0x174>
   1e362:	7e 91       	ld	r23, -X
   1e364:	70 61       	ori	r23, 0x10	; 16
   1e366:	7d 93       	st	X+, r23
   1e368:	30 f0       	brcs	.+12     	; 0x1e376 <__ftoa_engine+0x19a>
   1e36a:	83 95       	inc	r24
   1e36c:	71 e3       	ldi	r23, 0x31	; 49
   1e36e:	7d 93       	st	X+, r23
   1e370:	70 e3       	ldi	r23, 0x30	; 48
   1e372:	2a 95       	dec	r18
   1e374:	e1 f7       	brne	.-8      	; 0x1e36e <__ftoa_engine+0x192>
   1e376:	11 24       	eor	r1, r1
   1e378:	ef 90       	pop	r14
   1e37a:	ff 90       	pop	r15
   1e37c:	0f 91       	pop	r16
   1e37e:	1f 91       	pop	r17
   1e380:	cf 91       	pop	r28
   1e382:	df 91       	pop	r29
   1e384:	99 27       	eor	r25, r25
   1e386:	87 fd       	sbrc	r24, 7
   1e388:	90 95       	com	r25
   1e38a:	08 95       	ret

0001e38c <strnlen_P>:
   1e38c:	fc 01       	movw	r30, r24
   1e38e:	05 90       	lpm	r0, Z+
   1e390:	61 50       	subi	r22, 0x01	; 1
   1e392:	70 40       	sbci	r23, 0x00	; 0
   1e394:	01 10       	cpse	r0, r1
   1e396:	d8 f7       	brcc	.-10     	; 0x1e38e <strnlen_P+0x2>
   1e398:	80 95       	com	r24
   1e39a:	90 95       	com	r25
   1e39c:	8e 0f       	add	r24, r30
   1e39e:	9f 1f       	adc	r25, r31
   1e3a0:	08 95       	ret

0001e3a2 <memset>:
   1e3a2:	dc 01       	movw	r26, r24
   1e3a4:	01 c0       	rjmp	.+2      	; 0x1e3a8 <memset+0x6>
   1e3a6:	6d 93       	st	X+, r22
   1e3a8:	41 50       	subi	r20, 0x01	; 1
   1e3aa:	50 40       	sbci	r21, 0x00	; 0
   1e3ac:	e0 f7       	brcc	.-8      	; 0x1e3a6 <memset+0x4>
   1e3ae:	08 95       	ret

0001e3b0 <strnlen>:
   1e3b0:	fc 01       	movw	r30, r24
   1e3b2:	61 50       	subi	r22, 0x01	; 1
   1e3b4:	70 40       	sbci	r23, 0x00	; 0
   1e3b6:	01 90       	ld	r0, Z+
   1e3b8:	01 10       	cpse	r0, r1
   1e3ba:	d8 f7       	brcc	.-10     	; 0x1e3b2 <strnlen+0x2>
   1e3bc:	80 95       	com	r24
   1e3be:	90 95       	com	r25
   1e3c0:	8e 0f       	add	r24, r30
   1e3c2:	9f 1f       	adc	r25, r31
   1e3c4:	08 95       	ret

0001e3c6 <__ultoa_invert>:
   1e3c6:	fa 01       	movw	r30, r20
   1e3c8:	aa 27       	eor	r26, r26
   1e3ca:	28 30       	cpi	r18, 0x08	; 8
   1e3cc:	51 f1       	breq	.+84     	; 0x1e422 <__ultoa_invert+0x5c>
   1e3ce:	20 31       	cpi	r18, 0x10	; 16
   1e3d0:	81 f1       	breq	.+96     	; 0x1e432 <__ultoa_invert+0x6c>
   1e3d2:	e8 94       	clt
   1e3d4:	6f 93       	push	r22
   1e3d6:	6e 7f       	andi	r22, 0xFE	; 254
   1e3d8:	6e 5f       	subi	r22, 0xFE	; 254
   1e3da:	7f 4f       	sbci	r23, 0xFF	; 255
   1e3dc:	8f 4f       	sbci	r24, 0xFF	; 255
   1e3de:	9f 4f       	sbci	r25, 0xFF	; 255
   1e3e0:	af 4f       	sbci	r26, 0xFF	; 255
   1e3e2:	b1 e0       	ldi	r27, 0x01	; 1
   1e3e4:	3e d0       	rcall	.+124    	; 0x1e462 <__ultoa_invert+0x9c>
   1e3e6:	b4 e0       	ldi	r27, 0x04	; 4
   1e3e8:	3c d0       	rcall	.+120    	; 0x1e462 <__ultoa_invert+0x9c>
   1e3ea:	67 0f       	add	r22, r23
   1e3ec:	78 1f       	adc	r23, r24
   1e3ee:	89 1f       	adc	r24, r25
   1e3f0:	9a 1f       	adc	r25, r26
   1e3f2:	a1 1d       	adc	r26, r1
   1e3f4:	68 0f       	add	r22, r24
   1e3f6:	79 1f       	adc	r23, r25
   1e3f8:	8a 1f       	adc	r24, r26
   1e3fa:	91 1d       	adc	r25, r1
   1e3fc:	a1 1d       	adc	r26, r1
   1e3fe:	6a 0f       	add	r22, r26
   1e400:	71 1d       	adc	r23, r1
   1e402:	81 1d       	adc	r24, r1
   1e404:	91 1d       	adc	r25, r1
   1e406:	a1 1d       	adc	r26, r1
   1e408:	20 d0       	rcall	.+64     	; 0x1e44a <__ultoa_invert+0x84>
   1e40a:	09 f4       	brne	.+2      	; 0x1e40e <__ultoa_invert+0x48>
   1e40c:	68 94       	set
   1e40e:	3f 91       	pop	r19
   1e410:	2a e0       	ldi	r18, 0x0A	; 10
   1e412:	26 9f       	mul	r18, r22
   1e414:	11 24       	eor	r1, r1
   1e416:	30 19       	sub	r19, r0
   1e418:	30 5d       	subi	r19, 0xD0	; 208
   1e41a:	31 93       	st	Z+, r19
   1e41c:	de f6       	brtc	.-74     	; 0x1e3d4 <__ultoa_invert+0xe>
   1e41e:	cf 01       	movw	r24, r30
   1e420:	08 95       	ret
   1e422:	46 2f       	mov	r20, r22
   1e424:	47 70       	andi	r20, 0x07	; 7
   1e426:	40 5d       	subi	r20, 0xD0	; 208
   1e428:	41 93       	st	Z+, r20
   1e42a:	b3 e0       	ldi	r27, 0x03	; 3
   1e42c:	0f d0       	rcall	.+30     	; 0x1e44c <__ultoa_invert+0x86>
   1e42e:	c9 f7       	brne	.-14     	; 0x1e422 <__ultoa_invert+0x5c>
   1e430:	f6 cf       	rjmp	.-20     	; 0x1e41e <__ultoa_invert+0x58>
   1e432:	46 2f       	mov	r20, r22
   1e434:	4f 70       	andi	r20, 0x0F	; 15
   1e436:	40 5d       	subi	r20, 0xD0	; 208
   1e438:	4a 33       	cpi	r20, 0x3A	; 58
   1e43a:	18 f0       	brcs	.+6      	; 0x1e442 <__ultoa_invert+0x7c>
   1e43c:	49 5d       	subi	r20, 0xD9	; 217
   1e43e:	31 fd       	sbrc	r19, 1
   1e440:	40 52       	subi	r20, 0x20	; 32
   1e442:	41 93       	st	Z+, r20
   1e444:	02 d0       	rcall	.+4      	; 0x1e44a <__ultoa_invert+0x84>
   1e446:	a9 f7       	brne	.-22     	; 0x1e432 <__ultoa_invert+0x6c>
   1e448:	ea cf       	rjmp	.-44     	; 0x1e41e <__ultoa_invert+0x58>
   1e44a:	b4 e0       	ldi	r27, 0x04	; 4
   1e44c:	a6 95       	lsr	r26
   1e44e:	97 95       	ror	r25
   1e450:	87 95       	ror	r24
   1e452:	77 95       	ror	r23
   1e454:	67 95       	ror	r22
   1e456:	ba 95       	dec	r27
   1e458:	c9 f7       	brne	.-14     	; 0x1e44c <__ultoa_invert+0x86>
   1e45a:	00 97       	sbiw	r24, 0x00	; 0
   1e45c:	61 05       	cpc	r22, r1
   1e45e:	71 05       	cpc	r23, r1
   1e460:	08 95       	ret
   1e462:	9b 01       	movw	r18, r22
   1e464:	ac 01       	movw	r20, r24
   1e466:	0a 2e       	mov	r0, r26
   1e468:	06 94       	lsr	r0
   1e46a:	57 95       	ror	r21
   1e46c:	47 95       	ror	r20
   1e46e:	37 95       	ror	r19
   1e470:	27 95       	ror	r18
   1e472:	ba 95       	dec	r27
   1e474:	c9 f7       	brne	.-14     	; 0x1e468 <__ultoa_invert+0xa2>
   1e476:	62 0f       	add	r22, r18
   1e478:	73 1f       	adc	r23, r19
   1e47a:	84 1f       	adc	r24, r20
   1e47c:	95 1f       	adc	r25, r21
   1e47e:	a0 1d       	adc	r26, r0
   1e480:	08 95       	ret

0001e482 <_exit>:
   1e482:	f8 94       	cli

0001e484 <__stop_program>:
   1e484:	ff cf       	rjmp	.-2      	; 0x1e484 <__stop_program>
