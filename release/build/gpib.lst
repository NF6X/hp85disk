
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000164e  00800100  0001d5da  0001d66e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d5da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  0080174e  0080174e  0001ecbc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ecbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ecd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001720  00000000  00000000  0001ed10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00029087  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000615d  00000000  00000000  000494b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001254f  00000000  00000000  0004f614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005118  00000000  00000000  00061b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a0c  00000000  00000000  00066c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002454b  00000000  00000000  0006b688  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001768  00000000  00000000  0008fbd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 25 	jmp	0x4be8	; 0x4be8 <__ctors_end>
       4:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
       8:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
       c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      10:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      14:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      18:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      1c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      20:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      24:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      28:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      2c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      30:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      34:	0c 94 a2 33 	jmp	0x6744	; 0x6744 <__vector_13>
      38:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      3c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      40:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      44:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      48:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      4c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      50:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <__vector_20>
      54:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      58:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      5c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      60:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      64:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      68:	0c 94 c5 2d 	jmp	0x5b8a	; 0x5b8a <__vector_26>
      6c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      70:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      74:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      78:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      7c:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      80:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      84:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      88:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__bad_interrupt>
      8c:	d2 43       	sbci	r29, 0x32	; 50
      8e:	22 45       	sbci	r18, 0x52	; 82
      90:	0a 44       	sbci	r16, 0x4A	; 74
      92:	f5 44       	sbci	r31, 0x45	; 69
      94:	f5 44       	sbci	r31, 0x45	; 69
      96:	22 45       	sbci	r18, 0x52	; 82
      98:	22 45       	sbci	r18, 0x52	; 82
      9a:	22 45       	sbci	r18, 0x52	; 82
      9c:	22 45       	sbci	r18, 0x52	; 82
      9e:	22 45       	sbci	r18, 0x52	; 82
      a0:	22 45       	sbci	r18, 0x52	; 82
      a2:	22 45       	sbci	r18, 0x52	; 82
      a4:	22 45       	sbci	r18, 0x52	; 82
      a6:	d2 43       	sbci	r29, 0x32	; 50
      a8:	cf 43       	sbci	r28, 0x3F	; 63
      aa:	22 45       	sbci	r18, 0x52	; 82
      ac:	22 45       	sbci	r18, 0x52	; 82
      ae:	18 45       	sbci	r17, 0x58	; 88
      b0:	22 45       	sbci	r18, 0x52	; 82
      b2:	04 44       	sbci	r16, 0x44	; 68
      b4:	22 45       	sbci	r18, 0x52	; 82
      b6:	22 45       	sbci	r18, 0x52	; 82
      b8:	d2 43       	sbci	r29, 0x32	; 50
      ba:	22 45       	sbci	r18, 0x52	; 82
      bc:	22 45       	sbci	r18, 0x52	; 82
      be:	22 45       	sbci	r18, 0x52	; 82
      c0:	22 45       	sbci	r18, 0x52	; 82
      c2:	22 45       	sbci	r18, 0x52	; 82
      c4:	22 45       	sbci	r18, 0x52	; 82
      c6:	22 45       	sbci	r18, 0x52	; 82
      c8:	22 45       	sbci	r18, 0x52	; 82
      ca:	22 45       	sbci	r18, 0x52	; 82
      cc:	d2 43       	sbci	r29, 0x32	; 50
      ce:	1d 45       	sbci	r17, 0x5D	; 93
      d0:	0a 44       	sbci	r16, 0x4A	; 74
      d2:	f5 44       	sbci	r31, 0x45	; 69
      d4:	f5 44       	sbci	r31, 0x45	; 69
      d6:	22 45       	sbci	r18, 0x52	; 82
      d8:	22 45       	sbci	r18, 0x52	; 82
      da:	22 45       	sbci	r18, 0x52	; 82
      dc:	22 45       	sbci	r18, 0x52	; 82
      de:	22 45       	sbci	r18, 0x52	; 82
      e0:	22 45       	sbci	r18, 0x52	; 82
      e2:	22 45       	sbci	r18, 0x52	; 82
      e4:	22 45       	sbci	r18, 0x52	; 82
      e6:	d2 43       	sbci	r29, 0x32	; 50
      e8:	cf 43       	sbci	r28, 0x3F	; 63
      ea:	22 45       	sbci	r18, 0x52	; 82
      ec:	22 45       	sbci	r18, 0x52	; 82
      ee:	13 45       	sbci	r17, 0x53	; 83
      f0:	22 45       	sbci	r18, 0x52	; 82
      f2:	04 44       	sbci	r16, 0x44	; 68
      f4:	22 45       	sbci	r18, 0x52	; 82
      f6:	22 45       	sbci	r18, 0x52	; 82
      f8:	d2 43       	sbci	r29, 0x32	; 50
      fa:	47 45       	sbci	r20, 0x57	; 87
      fc:	88 46       	sbci	r24, 0x68	; 104
      fe:	3a 45       	sbci	r19, 0x5A	; 90
     100:	a2 45       	sbci	r26, 0x52	; 82
     102:	86 45       	sbci	r24, 0x56	; 86
     104:	88 46       	sbci	r24, 0x68	; 104
     106:	88 46       	sbci	r24, 0x68	; 104
     108:	88 46       	sbci	r24, 0x68	; 104
     10a:	88 46       	sbci	r24, 0x68	; 104
     10c:	88 46       	sbci	r24, 0x68	; 104
     10e:	88 46       	sbci	r24, 0x68	; 104
     110:	88 46       	sbci	r24, 0x68	; 104
     112:	88 46       	sbci	r24, 0x68	; 104
     114:	54 45       	sbci	r21, 0x54	; 84
     116:	68 45       	sbci	r22, 0x58	; 88
     118:	88 46       	sbci	r24, 0x68	; 104
     11a:	88 46       	sbci	r24, 0x68	; 104
     11c:	2e 46       	sbci	r18, 0x6E	; 110
     11e:	88 46       	sbci	r24, 0x68	; 104
     120:	36 45       	sbci	r19, 0x56	; 86
     122:	88 46       	sbci	r24, 0x68	; 104
     124:	88 46       	sbci	r24, 0x68	; 104
     126:	68 45       	sbci	r22, 0x58	; 88
     128:	88 46       	sbci	r24, 0x68	; 104
     12a:	88 46       	sbci	r24, 0x68	; 104
     12c:	88 46       	sbci	r24, 0x68	; 104
     12e:	88 46       	sbci	r24, 0x68	; 104
     130:	88 46       	sbci	r24, 0x68	; 104
     132:	88 46       	sbci	r24, 0x68	; 104
     134:	88 46       	sbci	r24, 0x68	; 104
     136:	88 46       	sbci	r24, 0x68	; 104
     138:	88 46       	sbci	r24, 0x68	; 104
     13a:	47 45       	sbci	r20, 0x57	; 87
     13c:	d6 45       	sbci	r29, 0x56	; 86
     13e:	3a 45       	sbci	r19, 0x5A	; 90
     140:	a2 45       	sbci	r26, 0x52	; 82
     142:	86 45       	sbci	r24, 0x56	; 86
     144:	88 46       	sbci	r24, 0x68	; 104
     146:	88 46       	sbci	r24, 0x68	; 104
     148:	88 46       	sbci	r24, 0x68	; 104
     14a:	88 46       	sbci	r24, 0x68	; 104
     14c:	88 46       	sbci	r24, 0x68	; 104
     14e:	88 46       	sbci	r24, 0x68	; 104
     150:	88 46       	sbci	r24, 0x68	; 104
     152:	88 46       	sbci	r24, 0x68	; 104
     154:	54 45       	sbci	r21, 0x54	; 84
     156:	68 45       	sbci	r22, 0x58	; 88
     158:	88 46       	sbci	r24, 0x68	; 104
     15a:	88 46       	sbci	r24, 0x68	; 104
     15c:	d6 45       	sbci	r29, 0x56	; 86
     15e:	88 46       	sbci	r24, 0x68	; 104
     160:	36 45       	sbci	r19, 0x56	; 86
     162:	88 46       	sbci	r24, 0x68	; 104
     164:	88 46       	sbci	r24, 0x68	; 104
     166:	68 45       	sbci	r22, 0x58	; 88
     168:	67 69       	ori	r22, 0x97	; 151
     16a:	71 69       	ori	r23, 0x91	; 145
     16c:	79 69       	ori	r23, 0x99	; 153
     16e:	7c 69       	ori	r23, 0x9C	; 156
     170:	7f 69       	ori	r23, 0x9F	; 159
     172:	82 69       	ori	r24, 0x92	; 146
     174:	85 69       	ori	r24, 0x95	; 149
     176:	88 69       	ori	r24, 0x98	; 152
     178:	8b 69       	ori	r24, 0x9B	; 155
     17a:	64 87       	std	Z+12, r22	; 0x0c
     17c:	6c 87       	std	Y+12, r22	; 0x0c
     17e:	9d 87       	std	Y+13, r25	; 0x0d
     180:	b6 87       	std	Z+14, r27	; 0x0e
     182:	d2 87       	std	Z+10, r29	; 0x0a
     184:	df 87       	std	Y+15, r29	; 0x0f
     186:	fb 87       	std	Y+11, r31	; 0x0b
     188:	25 88       	ldd	r2, Z+21	; 0x15
     18a:	08 88       	ldd	r0, Y+16	; 0x10
     18c:	65 9f       	mul	r22, r21
     18e:	35 a0       	ldd	r3, Z+37	; 0x25
     190:	71 a0       	ldd	r7, Z+33	; 0x21
     192:	a4 a0       	ldd	r10, Z+36	; 0x24
     194:	b4 a0       	ldd	r11, Z+36	; 0x24
     196:	d1 a0       	ldd	r13, Z+33	; 0x21
     198:	31 a1       	ldd	r19, Z+33	; 0x21
     19a:	1c a2       	std	Y+36, r1	; 0x24
     19c:	1c a2       	std	Y+36, r1	; 0x24
     19e:	1c a2       	std	Y+36, r1	; 0x24
     1a0:	65 a1       	ldd	r22, Z+37	; 0x25
     1a2:	91 a1       	ldd	r25, Z+33	; 0x21
     1a4:	d4 a1       	ldd	r29, Z+36	; 0x24
     1a6:	eb a1       	ldd	r30, Y+35	; 0x23
     1a8:	fe 9f       	mul	r31, r30
     1aa:	11 a0       	ldd	r1, Z+33	; 0x21
     1ac:	a2 bd       	out	0x22, r26	; 34
     1ae:	61 bd       	out	0x21, r22	; 33
     1b0:	61 bd       	out	0x21, r22	; 33
     1b2:	61 bd       	out	0x21, r22	; 33
     1b4:	61 bd       	out	0x21, r22	; 33
     1b6:	25 bd       	out	0x25, r18	; 37
     1b8:	2c bd       	out	0x2c, r18	; 44
     1ba:	33 bd       	out	0x23, r19	; 35
     1bc:	43 bd       	out	0x23, r20	; 35
     1be:	51 bd       	out	0x21, r21	; 33
     1c0:	4a bd       	out	0x2a, r20	; 42

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3651>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3649>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3647>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3644>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3642>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3640>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3638>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3636>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3628>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3626>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3622>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3609>:
     aef:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000afd <__c.3607>:
     afd:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b0d:	73 74 0a 00                                         st..

00000b11 <__c.3605>:
     b11:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b21 <__c.3587>:
     b21:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b31:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b41:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b51:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b61:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b71:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b81:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     b91:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000b9e <__c.3919>:
     b9e:	25 73 0a 00                                         %s..

00000ba2 <__c.3917>:
     ba2:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000baa <__c.3672>:
     baa:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bb6 <__c.3601>:
     bb6:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bc6:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bce <__c.3594>:
     bce:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bde:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000be6 <__c.3764>:
     be6:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bf1 <__c.3760>:
     bf1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c01:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c11:	68 0a 00                                            h..

00000c14 <__c.3757>:
     c14:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c24 <__c.3752>:
     c24:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c32 <__c.3750>:
     c32:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c42:	5b 25 73 5d 0a 00                                   [%s]..

00000c48 <__c.3748>:
     c48:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c58:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c69 <__c.3735>:
     c69:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c79:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c83 <__c.3730>:
     c83:	25 73 0a 00                                         %s..

00000c87 <__c.3728>:
     c87:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c97:	0a 00                                               ..

00000c99 <__c.3716>:
     c99:	0d 00                                               ..

00000c9b <__c.3714>:
     c9b:	4d 6f 72 65 2e 2e 00                                More...

00000ca2 <__c.3704>:
     ca2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cb2:	2e 0a 00                                            ...

00000cb5 <__c.3700>:
     cb5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cc4 <__c.3697>:
     cc4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cd1 <__c.3695>:
     cd1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cde <__c.3693>:
     cde:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cee <__c.3691>:
     cee:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cfb <__c.3689>:
     cfb:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d0b <__c.3687>:
     d0b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d17 <__c.3676>:
     d17:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d22 <__c.3674>:
     d22:	0a 00                                               ..

00000d24 <__c.3669>:
     d24:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d34 <__c.3659>:
     d34:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d45 <__c.3657>:
     d45:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d53 <__c.3655>:
     d53:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d64 <__c.3653>:
     d64:	25 73 0a 00                                         %s..

00000d68 <__c.3651>:
     d68:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d74 <__c.3647>:
     d74:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d85 <__c.3640>:
     d85:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d95:	74 20 23 20 25 64 0a 00                             t # %d..

00000d9d <__c.3636>:
     d9d:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dae <__c.3620>:
     dae:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dbe:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dce:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dde:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dee:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dfe:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e0e:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e1e:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e2e:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e3e:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e4e:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e5e:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e6e:	6e 65 77 0a 0a 00                                   new...

00000e74 <__c.3618>:
     e74:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e80 <__c.3807>:
     e80:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e8e <__c.3801>:
     e8e:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e9b <__c.3794>:
     e9b:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ea9 <__c.3785>:
     ea9:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eb6 <__c.3776>:
     eb6:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ec7 <__c.3762>:
     ec7:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ed7:	5d 0a 00                                            ]..

00000eda <__c.3744>:
     eda:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     eea:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ef7 <__c.4418>:
     ef7:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f07:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f17:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f1f <__c.4410>:
     f1f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f2f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f39 <__c.4405>:
     f39:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f49:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f59:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f67 <__c.4403>:
     f67:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f77:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f81 <__c.4393>:
     f81:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f91:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fa1:	28 25 64 29 5d 0a 00                                (%d)]..

00000fa8 <__c.4389>:
     fa8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fb8:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fc8:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fd5 <__c.4386>:
     fd5:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fe5:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fee <__c.4370>:
     fee:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000ff9 <__c.4368>:
     ff9:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001004 <__c.4366>:
    1004:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

0000100f <__c.4362>:
    100f:	20 20 20 20 20 00                                        .

00001015 <__c.4360>:
    1015:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000101e <__c.4334>:
    101e:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    102e:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000103c <__c.4318>:
    103c:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    104c:	3e 0a 00                                            >..

0000104f <__c.4313>:
    104f:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    105f:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    106f:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000107e <__c.4309>:
    107e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    108e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    109e:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ae:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010ba <__c.4305>:
    10ba:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10ca:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10da:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ea:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010f6 <__c.4303>:
    10f6:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1106:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1116:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1126:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001135 <__c.4298>:
    1135:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1145:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001154 <__c.4282>:
    1154:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1164:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1174:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001182 <__c.4266>:
    1182:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1192:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000119d <__c.4264>:
    119d:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11ad:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11bd:	72 61 6e 67 65 0a 00                                range..

000011c4 <__c.4259>:
    11c4:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11d4:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011df <__c.4257>:
    11df:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11ef:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    11ff:	61 6e 67 65 0a 00                                   ange..

00001205 <__c.4252>:
    1205:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1215:	5d 0a 00                                            ]..

00001218 <__c.4240>:
    1218:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001229 <__c.4417>:
    1229:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000123a <__c.4412>:
    123a:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    124a:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    125a:	32 58 48 5d 0a 00                                   2XH]..

00001260 <__c.4410>:
    1260:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1270:	0a 00                                               ..

00001272 <__c.4408>:
    1272:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001283 <__c.4403>:
    1283:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000128f <__c.4401>:
    128f:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000129f <__c.4399>:
    129f:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12af:	52 5d 0a 00                                         R]..

000012b3 <__c.4397>:
    12b3:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12c3:	0a 00                                               ..

000012c5 <__c.4395>:
    12c5:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012d6 <__c.4393>:
    12d6:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012dd <__c.4388>:
    12dd:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012e9 <__c.4386>:
    12e9:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12f9:	52 5d 0a 00                                         R]..

000012fd <__c.4384>:
    12fd:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000130e <__c.4382>:
    130e:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    131e:	0a 00                                               ..

00001320 <__c.4380>:
    1320:	0a 00                                               ..

00001322 <__c.4378>:
    1322:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001329 <__c.4373>:
    1329:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1339:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000134a <__c.4371>:
    134a:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001351 <__c.4369>:
    1351:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000135e <__c.4367>:
    135e:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000136a <__c.4365>:
    136a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001371 <__c.4363>:
    1371:	5b 53 50 44 5d 0a 00                                [SPD]..

00001378 <__c.4361>:
    1378:	5b 53 50 45 5d 0a 00                                [SPE]..

0000137f <__c.4359>:
    137f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    138f:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001397 <__c.4357>:
    1397:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13a7:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013af <__c.4352>:
    13af:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13bf:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013c9 <__c.4350>:
    13c9:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13d9:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013ea <__c.4323>:
    13ea:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013fb <__c.4321>:
    13fb:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001408 <__c.4319>:
    1408:	3c 42 55 53 3e 0a 00                                <BUS>..

0000140f <__c.4317>:
    140f:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000141a <__c.4315>:
    141a:	3c 49 46 43 3e 0a 00                                <IFC>..

00001421 <__c.4310>:
    1421:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1431:	0a 00                                               ..

00001433 <__c.4308>:
    1433:	44 6f 6e 65 0a 00                                   Done..

00001439 <__c.4304>:
    1439:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001445 <__c.4302>:
    1445:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1455:	20 65 78 69 74 0a 00                                 exit..

0000145c <__c.4300>:
    145c:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    146c:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    147c:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001487 <__c.4298>:
    1487:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1497:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014a1 <__c.4252>:
    14a1:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14b1:	6f 74 65 63 74 65 64 0a 00                          otected..

000014ba <__c.4250>:
    14ba:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014cb <__c.4248>:
    14cb:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14db:	0a 00                                               ..

000014dd <__c.4443>:
    14dd:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014ea <__c.4435>:
    14ea:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14fa:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    150a:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    151a:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    152a:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    153a:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    154a:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    155a:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    156a:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    157a:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    158a:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    159a:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15aa:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15ba:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15ca:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15da:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15ea:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    15fa:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    160a:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    161a:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    162a:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    163a:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    164a:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    165a:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    166a:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    167a:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    168a:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    169a:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16aa:	74 61 74 65 73 0a 0a 0a 67 70 69 62 20 6d 6f 75     tates...gpib mou
    16ba:	6e 74 0a 20 20 20 20 20 64 69 73 70 6c 61 79 73     nt.     displays
    16ca:	20 61 20 6c 69 73 74 20 6f 66 20 6d 6f 75 6e 74      a list of mount
    16da:	65 64 20 64 72 69 76 65 73 20 6f 6e 65 20 70 65     ed drives one pe
    16ea:	72 20 6c 69 6e 65 0a 67 70 69 62 20 6d 6f 75 6e     r line.gpib moun
    16fa:	74 20 41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64     t AMIGO|SS80 mod
    170a:	65 6c 20 61 64 64 72 65 73 73 20 66 69 6c 65 0a     el address file.
    171a:	20 20 20 20 20 45 78 61 6d 70 6c 65 3a 20 67 70          Example: gp
    172a:	69 62 20 6d 6f 75 6e 74 20 39 31 32 31 20 20 36     ib mount 9121  6
    173a:	20 2f 61 6d 69 67 6f 36 2e 6c 69 66 0a 20 20 20      /amigo6.lif.   
    174a:	20 20 45 78 61 6d 70 6c 65 3a 20 67 70 69 62 20       Example: gpib 
    175a:	6d 6f 75 6e 74 20 39 31 33 34 44 20 32 20 2f 61     mount 9134D 2 /a
    176a:	6d 69 67 6f 32 2e 6c 69 66 0a 67 70 69 62 20 6d     migo2.lif.gpib m
    177a:	6f 75 6e 74 20 50 52 49 4e 54 45 52 20 61 64 64     ount PRINTER add
    178a:	72 65 73 73 0a 20 20 20 20 20 45 78 61 6d 70 6c     ress.     Exampl
    179a:	65 3a 20 67 70 69 62 20 6d 6f 75 6e 74 20 50 52     e: gpib mount PR
    17aa:	49 4e 54 45 52 20 35 0a 67 70 69 62 20 75 6d 6f     INTER 5.gpib umo
    17ba:	75 6e 74 20 61 64 64 72 65 73 73 20 20 20 20 20     unt address     
    17ca:	45 78 61 6d 70 6c 65 3a 20 67 70 69 62 20 75 6d     Example: gpib um
    17da:	6f 75 6e 74 20 36 0a 00                             ount 6..

000017e2 <__c.4433>:
    17e2:	67 70 69 62 20 20 68 65 6c 70 0a 00                 gpib  help..

000017ee <__c.4966>:
    17ee:	0a 00                                               ..

000017f0 <__c.4961>:
    17f0:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

00001800 <__c.4956>:
    1800:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    1810:	0a 00                                               ..

00001812 <__c.4954>:
    1812:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    1822:	20 25 73 0a 00                                       %s..

00001827 <__c.4952>:
    1827:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    1837:	20 25 73 0a 00                                       %s..

0000183c <__c.4944>:
    183c:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    184c:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    185c:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

00001865 <__c.4942>:
    1865:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1875:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    1885:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

00001890 <__c.4938>:
    1890:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    18a0:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    18b0:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

000018ba <__c.4934>:
    18ba:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    18ca:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    18da:	72 2e 69 6e 69 21 0a 00                             r.ini!..

000018e2 <__c.4932>:
    18e2:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    18f2:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    1902:	74 75 72 65 0a 00                                   ture..

00001908 <__c.4921>:
    1908:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    1918:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

00001927 <__c.4919>:
    1927:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    1937:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    1947:	73 0a 00                                            s..

0000194a <__c.4917>:
    194a:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    195a:	0a 00                                               ..

0000195c <__c.4915>:
    195c:	55 73 61 67 65 3a 0a 00                             Usage:..

00001964 <__c.4879>:
    1964:	20 20 20 20 6d 6f 75 6e 74 0a 00                        mount..

0000196f <__c.4877>:
    196f:	44 69 73 70 6c 61 79 69 6e 67 20 6d 6f 75 6e 74     Displaying mount
    197f:	65 64 20 64 72 69 76 65 73 0a 00                    ed drives..

0000198a <__c.4875>:
    198a:	0a 00                                               ..

0000198c <__c.4873>:
    198c:	20 20 20 20 6d 6f 75 6e 74 20 50 52 49 4e 54 45         mount PRINTE
    199c:	52 20 35 0a 00                                      R 5..

000019a1 <__c.4871>:
    19a1:	4d 6f 75 6e 74 69 6e 67 20 70 72 69 6e 74 65 72     Mounting printer
    19b1:	0a 00                                               ..

000019b3 <__c.4869>:
    19b3:	0a 00                                               ..

000019b5 <__c.4867>:
    19b5:	20 20 20 20 6d 6f 75 6e 74 20 39 31 33 34 44 20         mount 9134D 
    19c5:	33 20 73 73 38 30 2d 33 2e 6c 69 66 0a 00           3 ss80-3.lif..

000019d3 <__c.4865>:
    19d3:	20 20 20 20 6d 6f 75 6e 74 20 39 31 32 31 20 32         mount 9121 2
    19e3:	20 61 6d 69 67 6f 2d 32 32 2e 6c 69 66 0a 00         amigo-22.lif..

000019f2 <__c.4863>:
    19f2:	4d 6f 75 6e 74 69 6e 67 20 64 72 69 76 65 73 0a     Mounting drives.
	...

00001a03 <__c.4861>:
    1a03:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

00001a0c <__c.4853>:
    1a0c:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001a14 <__c.4851>:
    1a14:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1a24:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001a2e <__c.4849>:
    1a2e:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1a3e:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a4e:	0a 00                                               ..

00001a50 <__c.4847>:
    1a50:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001a58 <__c.4845>:
    1a58:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1a68:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001a72 <__c.4843>:
    1a72:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1a82:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1a92:	0a 00                                               ..

00001a94 <__c.4823>:
    1a94:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1aa4:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001aaf <__c.4821>:
    1aaf:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1abf:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1acf:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1adf:	6f 20 32 35 36 0a 00                                o 256..

00001ae6 <__c.4819>:
    1ae6:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1af6:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1b06:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1b16:	20 32 35 36 0a 00                                    256..

00001b1c <__c.4813>:
    1b1c:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1b2c:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001b37 <__c.4797>:
    1b37:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1b47:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1b57:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001b5f <__c.4791>:
    1b5f:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1b6f:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1b7f:	66 20 53 53 38 30 0a 00                             f SS80..

00001b87 <__c.4755>:
    1b87:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1b97:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1ba7:	0a 00                                               ..

00001ba9 <__c.4747>:
    1ba9:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1bb9:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1bc9:	6c 6c 0a 00                                         ll..

00001bcd <__c.4726>:
    1bcd:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1bdd:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1bed:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001bf8 <__c.4724>:
    1bf8:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c08:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1c18:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1c28:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001c30 <__c.4722>:
    1c30:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c40:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1c50:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1c60:	3a 25 73 0a 00                                      :%s..

00001c65 <__c.4720>:
    1c65:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c75:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1c85:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1c95:	55 4c 4c 0a 00                                      ULL..

00001c9a <__c.4718>:
    1c9a:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1caa:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1cba:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1cca:	66 20 72 61 6e 67 65 0a 00                          f range..

00001cd3 <__c.4716>:
    1cd3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ce3:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1cf3:	6e 67 65 0a 00                                      nge..

00001cf8 <__c.4677>:
    1cf8:	0a 00                                               ..

00001cfa <__c.4672>:
    1cfa:	0a 00                                               ..

00001cfc <__c.4670>:
    1cfc:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d0c:	6c 64 0a 00                                         ld..

00001d10 <__c.4668>:
    1d10:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1d20:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001d2f <__c.4666>:
    1d2f:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d39 <__c.4664>:
    1d39:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1d49:	6c 64 0a 00                                         ld..

00001d4d <__c.4662>:
    1d4d:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1d5d:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001d6c <__c.4660>:
    1d6c:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001d75 <__c.4657>:
    1d75:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1d85:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001d95 <__c.4648>:
    1d95:	0a 00                                               ..

00001d97 <__c.4643>:
    1d97:	0a 00                                               ..

00001d99 <__c.4641>:
    1d99:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001da2 <__c.4639>:
    1da2:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001dac <__c.4637>:
    1dac:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001db5 <__c.4634>:
    1db5:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1dc5:	0a 00                                               ..

00001dc7 <__c.4628>:
    1dc7:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1dd7:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1de7:	2a 2a 2a 2a 2a 0a 00                                *****..

00001dee <__c.4626>:
    1dee:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1dfe:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001e0b <__c.4624>:
    1e0b:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1e1b:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1e2b:	0a 00                                               ..

00001e2d <__c.4620>:
    1e2d:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1e3d:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1e4d:	0a 00                                               ..

00001e4f <__c.4617>:
    1e4f:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e5f:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1e6f:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e7f <__c.4608>:
    1e7f:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e8f:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1e9f:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001eae <__c.4605>:
    1eae:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1ebe:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1ece:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ede <__c.4596>:
    1ede:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1eee:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1efe:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f0c <__c.4588>:
    1f0c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f1c:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1f2c:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f3a <__c.4578>:
    1f3a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f4a:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1f5a:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001f66 <__c.4561>:
    1f66:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f76:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1f86:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1f96:	0a 00                                               ..

00001f98 <__c.4553>:
    1f98:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fa8:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1fb8:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001fc6 <__c.4550>:
    1fc6:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1fd6:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1fe6:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ff4 <__c.4542>:
    1ff4:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2004:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2014:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002021 <__c.4532>:
    2021:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2031:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2041:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002052 <__c.4529>:
    2052:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2062:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    2072:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

0000207c <__c.4525>:
    207c:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    208c:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    209c:	0a 00                                               ..

0000209e <__c.4514>:
    209e:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    20ae:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    20be:	0a 00                                               ..

000020c0 <__c.4511>:
    20c0:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    20d0:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

000020de <__c.4509>:
    20de:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

000020eb <__c.4488>:
    20eb:	25 73 0a 00                                         %s..

000020ef <__c.4478>:
    20ef:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

000020fb <__c.4467>:
    20fb:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    210b:	6c 64 29 0a 00                                      ld)..

00002110 <__c.3648>:
    2110:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    2120:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    2130:	0a 00                                               ..

00002132 <__c.3643>:
    2132:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    2142:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

00002150 <__c.3641>:
    2150:	25 73 20 25 73 0a 00                                %s %s..

00002157 <__c.3637>:
    2157:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    2167:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00002174 <__c.4560>:
    2174:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    2184:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2194:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    21a4:	48 5d 0a 00                                         H]..

000021a8 <__c.4558>:
    21a8:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    21b8:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    21c8:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    21d8:	48 5d 0a 00                                         H]..

000021dc <__c.4556>:
    21dc:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    21ec:	74 5d 0a 00                                         t]..

000021f0 <__c.4554>:
    21f0:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000021ff <__c.4552>:
    21ff:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    220f:	74 65 5d 0a 00                                      te]..

00002214 <__c.4550>:
    2214:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2224:	61 74 65 5d 0a 00                                   ate]..

0000222a <__c.4548>:
    222a:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    223a:	61 74 65 5d 0a 00                                   ate]..

00002240 <__c.4543>:
    2240:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2250:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2260:	5d 0a 00                                            ]..

00002263 <__c.4529>:
    2263:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002272 <__c.4527>:
    2272:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2282:	5d 0a 00                                            ]..

00002285 <__c.4520>:
    2285:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00002291 <__c.4506>:
    2291:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    22a1:	5d 0a 00                                            ]..

000022a4 <__c.4504>:
    22a4:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    22b4:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000022be <__c.4497>:
    22be:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    22ce:	48 5d 0a 00                                         H]..

000022d2 <__c.4495>:
    22d2:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    22e2:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000022f2 <__c.4490>:
    22f2:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2302:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2312:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2322:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

0000232e <__c.4487>:
    232e:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    233e:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000234e <__c.4485>:
    234e:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    235e:	29 5d 0a 00                                         )]..

00002362 <__c.4483>:
    2362:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2372:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2382:	28 25 64 29 5d 0a 00                                (%d)]..

00002389 <__c.4481>:
    2389:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2399:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000023a7 <__c.4479>:
    23a7:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    23b7:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000023c4 <__c.4476>:
    23c4:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    23d4:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    23e4:	44 4f 5d 0a 00                                      DO]..

000023e9 <__c.4473>:
    23e9:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    23f9:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002402 <__c.4471>:
    2402:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2412:	5d 0a 00                                            ]..

00002415 <__c.4462>:
    2415:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2425:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2435:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2445:	43 6f 64 65 73 5d 0a 00                             Codes]..

0000244d <__c.4459>:
    244d:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    245d:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000246d <__c.4457>:
    246d:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    247d:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    248d:	5d 0a 00                                            ]..

00002490 <__c.4455>:
    2490:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    24a0:	61 74 75 73 5d 0a 00                                atus]..

000024a7 <__c.4453>:
    24a7:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    24b7:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000024c0 <__c.4451>:
    24c0:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    24d0:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000024db <__c.4449>:
    24db:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    24eb:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000024fa <__c.4447>:
    24fa:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    250a:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002518 <__c.4445>:
    2518:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002529 <__c.4443>:
    2529:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2539:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002545 <__c.4441>:
    2545:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2555:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002562 <__c.4439>:
    2562:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2572:	2d 4f 50 5d 0a 00                                   -OP]..

00002578 <__c.4437>:
    2578:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2588:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002599 <__c.4435>:
    2599:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    25a9:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    25b9:	44 4f 5d 0a 00                                      DO]..

000025be <__c.4433>:
    25be:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    25ce:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000025d8 <__c.4431>:
    25d8:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    25e8:	2d 4f 50 5d 0a 00                                   -OP]..

000025ee <__c.4429>:
    25ee:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000025fc <__c.4427>:
    25fc:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    260c:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002618 <__c.4425>:
    2618:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    2628:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002635 <__c.4423>:
    2635:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2645:	20 57 72 69 74 65 5d 0a 00                           Write]..

0000264e <__c.4420>:
    264e:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    265e:	20 52 65 61 64 5d 0a 00                              Read]..

00002666 <__c.4418>:
    2666:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2676:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000267f <__c.4415>:
    267f:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    268f:	25 64 29 5d 0a 00                                   %d)]..

00002695 <__c.4413>:
    2695:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    26a5:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000026ae <__c.4411>:
    26ae:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    26be:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    26ce:	52 4f 52 5d 0a 00                                   ROR]..

000026d4 <__c.4402>:
    26d4:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    26e4:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000026ee <__c.4397>:
    26ee:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    26fe:	76 61 6c 69 64 5d 0a 00                             valid]..

00002706 <__c.4392>:
    2706:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2716:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002725 <__c.4390>:
    2725:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2735:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002742 <__c.4388>:
    2742:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2752:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2762:	5d 0a 00                                            ]..

00002765 <__c.4386>:
    2765:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002776 <__c.4378>:
    2776:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2786:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002791 <__c.4376>:
    2791:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    27a1:	73 5d 0a 00                                         s]..

000027a5 <__c.4366>:
    27a5:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000027b0 <__c.4364>:
    27b0:	25 73 3a 0a 00                                      %s:..

000027b5 <__c.4339>:
    27b5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27c5:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    27d5:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000027e0 <__c.4337>:
    27e0:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27f0:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2800:	49 4e 49 53 48 5d 0a 00                             INISH]..

00002808 <__c.4333>:
    2808:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2818:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    2828:	58 48 29 5d 0a 00                                   XH)]..

0000282e <__c.4331>:
    282e:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    283e:	72 5d 0a 00                                         r]..

00002842 <__c.4327>:
    2842:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2852:	5d 0a 00                                            ]..

00002855 <__c.4325>:
    2855:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2865:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2875:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000287e <__c.4313>:
    287e:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    288e:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    289e:	62 79 74 65 73 5d 0a 00                             bytes]..

000028a6 <__c.4311>:
    28a6:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    28b6:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    28c6:	53 48 5d 0a 00                                      SH]..

000028cb <__c.4306>:
    28cb:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    28db:	20 45 72 72 6f 72 5d 0a 00                           Error]..

000028e4 <__c.4304>:
    28e4:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    28f4:	45 72 72 6f 72 5d 0a 00                             Error]..

000028fc <__c.4302>:
    28fc:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    290c:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000291a <__c.4300>:
    291a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    292a:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    293a:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002942 <__c.4283>:
    2942:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2952:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000295e <__c.4267>:
    295e:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    296e:	5d 0a 00                                            ]..

00002971 <__c.4383>:
    2971:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2981:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2991:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000299a <__c.4380>:
    299a:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    29aa:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    29ba:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000029c5 <__c.4377>:
    29c5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29d5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    29e5:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000029ee <__c.4372>:
    29ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    29fe:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002a0e <__c.4369>:
    2a0e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2a1e:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002a2a <__c.4366>:
    2a2a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a3a:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2a4a:	0a 00                                               ..

00002a4c <__c.4363>:
    2a4c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a5c:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002a6b <__c.4360>:
    2a6b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a7b:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002a8c <__c.4357>:
    2a8c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2a9c:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002aac <__c.4353>:
    2aac:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2abc:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2acc:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2adc:	0a 00                                               ..

00002ade <__c.4348>:
    2ade:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002aee <__c.4345>:
    2aee:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2afe:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002b0d <__c.4343>:
    2b0d:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b1d:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2b2d:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002b38 <__c.4341>:
    2b38:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2b48:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002b58 <__c.4339>:
    2b58:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2b68:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2b78:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b81 <__c.4337>:
    2b81:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2b91:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002b9d <__c.4335>:
    2b9d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2bad:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2bbd:	0a 00                                               ..

00002bbf <__c.4333>:
    2bbf:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002bcf <__c.4330>:
    2bcf:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2bdf:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002bf0 <__c.4328>:
    2bf0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2c00:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2c10:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002c19 <__c.4326>:
    2c19:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c29:	36 5d 0a 00                                         6]..

00002c2d <__c.4323>:
    2c2d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c3d:	35 5d 0a 00                                         5]..

00002c41 <__c.4320>:
    2c41:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2c51:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002c61 <__c.4317>:
    2c61:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c71:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2c81:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002c90 <__c.4315>:
    2c90:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ca0:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002cb1 <__c.4313>:
    2cb1:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2cc1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002cd2 <__c.4311>:
    2cd2:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2ce2:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2cf2:	0a 00                                               ..

00002cf4 <__c.4309>:
    2cf4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2d04:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2d14:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2d24:	0a 00                                               ..

00002d26 <__c.4297>:
    2d26:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2d36:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2d46:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2d56:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2d66:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002d77 <__c.4295>:
    2d77:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2d87:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d97:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2da7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2db7:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002dc7 <__c.4293>:
    2dc7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2dd7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2de7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2df7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e07:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e17 <__c.4291>:
    2e17:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2e27:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e37:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e47:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e57:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e67 <__c.4286>:
    2e67:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2e77:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2e87:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2e97:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2ea7:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2eb7:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2ec7:	58 48 5d 0a 00                                      XH]..

00002ecc <__c.4284>:
    2ecc:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2edc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2eec:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2efc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f0c:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f1c:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f2c:	30 32 58 48 5d 0a 00                                02XH]..

00002f33 <__c.4282>:
    2f33:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2f43:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f53:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f63:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f73:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f83:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f93:	30 32 58 48 5d 0a 00                                02XH]..

00002f9a <__c.4280>:
    2f9a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2faa:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2fba:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2fca:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2fda:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2fea:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ffa:	30 32 58 48 5d 0a 00                                02XH]..

00003001 <__c.4273>:
    3001:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00003010 <__c.4260>:
    3010:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

0000301d <__c.4258>:
    301d:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    302d:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00003037 <__c.4251>:
    3037:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    3047:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00003057 <__c.4249>:
    3057:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    3067:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00003076 <__c.4247>:
    3076:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    3086:	0a 00                                               ..

00003088 <__c.4240>:
    3088:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3098:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030a2 <__c.4234>:
    30a2:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    30b2:	0a 00                                               ..

000030b4 <__c.4228>:
    30b4:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    30c4:	6e 65 5d 0a 00                                      ne]..

000030c9 <__c.4224>:
    30c9:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

000030d9 <__c.4183>:
    30d9:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    30e9:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    30f9:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00003104 <__c.4213>:
    3104:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    3114:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    3124:	25 30 34 58 48 5d 0a 00                             %04XH]..

0000312c <__c.4190>:
    312c:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    313c:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00003145 <__c.4176>:
    3145:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3155:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000315f <__c.4174>:
    315f:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    316f:	75 73 5d 0a 00                                      us]..

00003174 <__c.4168>:
    3174:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3184:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000318e <__c.4166>:
    318e:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    319e:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

000031ac <__c.4160>:
    31ac:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    31bc:	74 61 74 75 73 5d 0a 00                             tatus]..

000031c4 <__c.4145>:
    31c4:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    31d4:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000031de <__c.4143>:
    31de:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    31ee:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

000031fa <__c.4138>:
    31fa:	25 30 38 6c 64 0d 00                                %08ld..

00003201 <__c.4132>:
    3201:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3211:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003222 <__c.4126>:
    3222:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003230 <__c.4124>:
    3230:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3240:	69 74 65 0a 00                                      ite..

00003245 <__c.4118>:
    3245:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00003251 <__c.4116>:
    3251:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    3261:	6f 3a 25 73 0a 00                                   o:%s..

00003267 <__c.4114>:
    3267:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    3277:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3287:	74 00                                               t.

00003289 <__c.4555>:
    3289:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    3299:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

000032a9 <__c.4553>:
    32a9:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32b9:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

000032c9 <__c.4551>:
    32c9:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32d9:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    32e9:	30 0a 00                                            0..

000032ec <__c.4549>:
    32ec:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32fc:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    330c:	70 74 79 0a 00                                      pty..

00003311 <__c.4547>:
    3311:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3321:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3331:	73 20 65 6d 70 74 79 0a 00                          s empty..

0000333a <__c.4534>:
    333a:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    334a:	20 25 31 30 73 0a 00                                 %10s..

00003351 <__c.4532>:
    3351:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3361:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3371:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000337a <__c.4530>:
    337a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    338a:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    339a:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    33aa:	74 65 72 73 0a 00                                   ters..

000033b0 <__c.4528>:
    33b0:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33c0:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    33d0:	65 6d 70 74 79 0a 00                                empty..

000033d7 <__c.4526>:
    33d7:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33e7:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    33f7:	65 6d 70 74 79 0a 00                                empty..

000033fe <__c.4524>:
    33fe:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    340e:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    341e:	20 65 6d 70 74 79 0a 00                              empty..

00003426 <__c.4515>:
    3426:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003435 <__c.4513>:
    3435:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3445:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3455:	20 66 6f 75 6e 64 0a 00                              found..

0000345d <__c.4511>:
    345d:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    346d:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000347c <__c.4509>:
    347c:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    348c:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000349c <__c.4507>:
    349c:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34ac:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    34bc:	70 74 79 0a 00                                      pty..

000034c1 <__c.4499>:
    34c1:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000034cf <__c.4494>:
    34cf:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034dd <__c.4492>:
    34dd:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34ed:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    34fd:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000350d <__c.4490>:
    350d:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    351d:	73 0a 00                                            s..

00003520 <__c.4488>:
    3520:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3530:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3540:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000354f <__c.4486>:
    354f:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    355f:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000356b <__c.4484>:
    356b:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    357b:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003586 <__c.4482>:
    3586:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3596:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035a6 <__c.4465>:
    35a6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035b4 <__c.4460>:
    35b4:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035c2 <__c.4458>:
    35c2:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    35d2:	73 0a 00                                            s..

000035d5 <__c.4456>:
    35d5:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35e5:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035ed <__c.4439>:
    35ed:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035fb <__c.4436>:
    35fb:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    360b:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    361b:	20 65 72 72 6f 72 0a 00                              error..

00003623 <__c.4428>:
    3623:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003631 <__c.4426>:
    3631:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3641:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3651:	20 65 72 72 6f 72 0a 00                              error..

00003659 <__c.4423>:
    3659:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3669:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3679:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3689:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3699:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    36a9:	30 32 58 48 0a 00                                   02XH..

000036af <__c.4421>:
    36af:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36bf:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    36cf:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    36df:	20 25 64 0a 00                                       %d..

000036e4 <__c.4417>:
    36e4:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000036f4 <__c.4415>:
    36f4:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3704:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3714:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3724:	30 78 45 30 31 33 0a 00                             0xE013..

0000372c <__c.4413>:
    372c:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    373c:	6e 64 3a 25 73 0a 00                                nd:%s..

00003743 <__c.4411>:
    3743:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3753:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000375b <__c.4387>:
    375b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003769 <__c.4385>:
    3769:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3779:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003782 <__c.4383>:
    3782:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3792:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000379b <__c.4381>:
    379b:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    37ab:	20 20 25 34 64 0a 00                                  %4d..

000037b2 <__c.4379>:
    37b2:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    37c2:	20 20 20 25 73 0a 00                                   %s..

000037c9 <__c.4377>:
    37c9:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    37d9:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    37e9:	77 72 69 74 65 0a 00                                write..

000037f0 <__c.4375>:
    37f0:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3800:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3810:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003820 <__c.4373>:
    3820:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3830:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3840:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000384f <__c.4371>:
    384f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    385f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    386f:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000387f <__c.4369>:
    387f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    388f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    389f:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000038ae <__c.4367>:
    38ae:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38be:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    38ce:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

000038dc <__c.4365>:
    38dc:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38ec:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    38fc:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    390c:	79 0a 00                                            y..

0000390f <__c.4351>:
    390f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000391d <__c.4349>:
    391d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000392b <__c.4344>:
    392b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003939 <__c.4327>:
    3939:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3949:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3959:	25 64 0a 00                                         %d..

0000395d <__c.4310>:
    395d:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    396d:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    397d:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    398d:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003996 <__c.4296>:
    3996:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39a6:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    39b6:	62 69 67 0a 00                                      big..

000039bb <__c.4294>:
    39bb:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39cb:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    39db:	63 74 65 72 73 0a 00                                cters..

000039e2 <__c.4287>:
    39e2:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    39f2:	73 0a 00                                            s..

000039f5 <__c.4285>:
    39f5:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a05:	73 0a 00                                            s..

00003a08 <__c.4283>:
    3a08:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3a18:	73 0a 00                                            s..

00003a1b <__c.4281>:
    3a1b:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003a2c <__c.4279>:
    3a2c:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a39 <__c.4277>:
    3a39:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a45 <__c.4275>:
    3a45:	0a 00                                               ..

00003a47 <__c.4272>:
    3a47:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3a57:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3a67:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003a77 <__c.4270>:
    3a77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a87:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a97:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3aa7:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3ab7:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003ac3 <__c.4267>:
    3ac3:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3ad3:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3ae3:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3af3:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003b03 <__c.4265>:
    3b03:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3b13:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003b1a <__c.4255>:
    3b1a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b2a:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b3a:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b4a:	64 0a 00                                            d..

00003b4d <__c.4253>:
    3b4d:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b5d:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b6d:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3b7d:	64 0a 00                                            d..

00003b80 <__c.4251>:
    3b80:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b90:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3ba0:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3bb0:	69 6c 65 64 0a 00                                   iled..

00003bb6 <__c.4249>:
    3bb6:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bc6:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3bd6:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3be6:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003bf5 <__c.4236>:
    3bf5:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3c05:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3c15:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c25:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c35:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c46 <__c.4233>:
    3c46:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c56:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c66:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003c6f <__c.4231>:
    3c6f:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c7f:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c8f:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c9f:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003ca7 <__c.4219>:
    3ca7:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3cb7:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3cc7:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3cd7:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3ce7:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003cf4 <__c.4194>:
    3cf4:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3d04:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003d14 <__c.4185>:
    3d14:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d24:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d34:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d44:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d4e <__c.4166>:
    3d4e:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003d5b <__c.4161>:
    3d5b:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d68 <__c.4156>:
    3d68:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d75 <__c.4148>:
    3d75:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d82 <__c.4146>:
    3d82:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3d92:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3da2:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3db2:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3dc2:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3dd2:	25 6c 64 0a 00                                      %ld..

00003dd7 <__c.4130>:
    3dd7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3de7:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3df7:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003e03 <__c.4128>:
    3e03:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e13:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e23:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003e2e <__c.4126>:
    3e2e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e3e:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e4e:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e5e:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3e6e:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e79 <__c.4124>:
    3e79:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e89:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e99:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ea9:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3eb9:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ec4 <__c.4122>:
    3ec4:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ed4:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3ee4:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003ef2 <__c.4120>:
    3ef2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f02:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3f12:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3f22:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003f33 <__c.4118>:
    3f33:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f43:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3f53:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3f63:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3f73:	58 68 0a 00                                         Xh..

00003f77 <__c.4116>:
    3f77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f87:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f98 <__c.4110>:
    3f98:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fa8:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3fb8:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003fc4 <__c.4108>:
    3fc4:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fd4:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3fe4:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003ff3 <__c.4106>:
    3ff3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4003:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    4013:	25 6c 64 0a 00                                      %ld..

00004018 <__c.4104>:
    4018:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4028:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4038:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    4048:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004051 <__c.4102>:
    4051:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4061:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4071:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    4081:	62 65 20 7a 65 72 6f 0a 00                          be zero..

0000408a <__c.4100>:
    408a:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    409a:	58 48 20 3e 20 31 0a 00                             XH > 1..

000040a2 <__c.4098>:
    40a2:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40b2:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    40c2:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    40d2:	64 20 31 30 30 30 48 0a 00                          d 1000H..

000040db <__c.4096>:
    40db:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40eb:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

000040fa <__c.4089>:
    40fa:	0a 00                                               ..

000040fc <__c.4087>:
    40fc:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    410c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004116 <__c.4085>:
    4116:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4126:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00004132 <__c.4083>:
    4132:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    4142:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000414f <__c.4081>:
    414f:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    415f:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000416c <__c.4079>:
    416c:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    417c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004189 <__c.4077>:
    4189:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    4199:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000041a5 <__c.4075>:
    41a5:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    41b5:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041c1 <__c.4073>:
    41c1:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    41d1:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041db <__c.4071>:
    41db:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    41eb:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041f5 <__c.4069>:
    41f5:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4205:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004211 <__c.4067>:
    4211:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4221:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000422d <__c.4065>:
    422d:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    423d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000424a <__c.4063>:
    424a:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    425a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004267 <__c.4061>:
    4267:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4277:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004283 <__c.4059>:
    4283:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4293:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000429d <__c.4057>:
    429d:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    42ad:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042ba <__c.4055>:
    42ba:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    42ca:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042d7 <__c.4053>:
    42d7:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    42e7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042f4 <__c.4051>:
    42f4:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4304:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004311 <__c.4049>:
    4311:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4321:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000432e <__c.4047>:
    432e:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    433e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000434b <__c.4045>:
    434b:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    435b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004368 <__c.4043>:
    4368:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4378:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004385 <__c.4041>:
    4385:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4395:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000439f <__c.4039>:
    439f:	0a 25 73 0a 00                                      .%s..

000043a4 <__c.3916>:
    43a4:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    43b4:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    43c4:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    43d4:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000043e1 <__c.3907>:
    43e1:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    43f1:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4401:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4411:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000441d <__c.3898>:
    441d:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    442d:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000443e <__c.3891>:
    443e:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    444e:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004457 <__c.3885>:
    4457:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4467:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4477:	25 73 5d 0a 00                                      %s]..

0000447c <__c.3873>:
    447c:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    448c:	6f 69 6e 74 65 72 0a 00                             ointer..

00004494 <__c.3868>:
    4494:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    44a4:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    44b4:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000044bd <__c.3862>:
    44bd:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    44cd:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

000044da <__c.3860>:
    44da:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    44ea:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

000044fb <__c.3847>:
    44fb:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    450b:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    451b:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    452b:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    453b:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    454b:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    455b:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    456b:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    457b:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    458b:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    459b:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    45ab:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    45bb:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    45cb:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    45db:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    45eb:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    45fb:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    460b:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    461b:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    462b:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    463b:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    464b:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    465b:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    466b:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    467b:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    468b:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    469b:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    46ab:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    46bb:	67 0a 0a 00                                         g...

000046bf <__c.3845>:
    46bf:	6c 69 66 20 20 20 68 65 6c 70 0a 00                 lif   help..

000046cb <__c.4636>:
    46cb:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    46db:	53 4b 0a 00                                         SK..

000046df <__c.4634>:
    46df:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46ef:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046f9 <__c.4632>:
    46f9:	25 2d 31 36 73 00                                   %-16s.

000046ff <__c.4630>:
    46ff:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    470f:	30 34 78 48 0a 00                                   04xH..

00004715 <__c.4628>:
    4715:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4725:	64 6f 6e 65 0a 00                                   done..

0000472b <__c.4626>:
    472b:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    473b:	6f 6e 65 0a 00                                      one..

00004740 <__c.4624>:
    4740:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4750:	61 6c 69 7a 65 64 0a 00                             alized..

00004758 <__c.4622>:
    4758:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4768:	0a 00                                               ..

0000476a <__c.4620>:
    476a:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    477a:	7a 65 64 0a 00                                      zed..

0000477f <__c.4618>:
    477f:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    478f:	69 7a 65 64 0a 00                                   ized..

00004795 <__c.4616>:
    4795:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000047a6 <__c.4614>:
    47a6:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    47b6:	20 73 74 61 72 74 0a 00                              start..

000047be <__c.4612>:
    47be:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    47ce:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    47de:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

000047ec <__c.4610>:
    47ec:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000047fb <__c.4608>:
    47fb:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    480b:	0a 00                                               ..

0000480d <__c.4606>:
    480d:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    481d:	20 62 75 73 0a 00                                    bus..

00004823 <__c.4604>:
    4823:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    4833:	20 62 75 73 0a 00                                    bus..

00004839 <__c.4602>:
    4839:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4849:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004853 <__c.4600>:
    4853:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4863:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000486d <__c.4598>:
    486d:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    487d:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    488d:	35 64 69 73 6b 0a 00                                5disk..

00004894 <__c.4596>:
    4894:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048a4 <__c.4594>:
    48a4:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    48b4:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000048c1 <__c.4592>:
    48c1:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    48d1:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000048e0 <__c.4590>:
    48e0:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    48f0:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4900:	3a 20 25 6c 64 0a 00                                : %ld..

00004907 <__c.4588>:
    4907:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004918 <__c.4586>:
    4918:	53 74 61 72 74 0a 00                                Start..

0000491f <__c.4578>:
    491f:	25 2d 31 36 73 00                                   %-16s.

00004925 <__c.4576>:
    4925:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004936 <__c.4568>:
    4936:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

00004943 <__c.4566>:
    4943:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    4953:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

0000495c <__c.4564>:
    495c:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

0000496d <__c.4562>:
    496d:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

0000497d <__c.4560>:
    497d:	4f 4b 0a 00                                         OK..

00004981 <__c.4552>:
    4981:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    4991:	20 25 73 0a 00                                       %s..

00004996 <__c.4547>:
    4996:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

0000499f <__c.4545>:
    499f:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    49af:	20 25 64 0a 00                                       %d..

000049b4 <__c.4543>:
    49b4:	0a 3e 00                                            .>.

000049b7 <__c.4530>:
    49b7:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    49c7:	42 42 0a 68 65 6c 70 0a 64 69 72 20 64 69 72 65     BB.help.dir dire
    49d7:	63 74 6f 72 69 65 73 20 6f 72 20 66 69 6c 65 20     ctories or file 
    49e7:	6c 69 73 74 0a 69 6e 70 75 74 20 20 20 2d 20 74     list.input   - t
    49f7:	6f 67 67 6c 65 20 69 6e 70 75 74 20 64 65 62 75     oggle input debu
    4a07:	67 67 69 6e 67 0a 6d 65 6d 20 20 20 20 20 2d 20     gging.mem     - 
    4a17:	64 69 73 70 6c 61 79 20 66 72 65 65 20 6d 65 6d     display free mem
    4a27:	6f 72 79 0a 72 65 73 65 74 20 20 20 2d 20 72 65     ory.reset   - re
    4a37:	73 65 74 20 65 6d 75 6c 61 74 6f 72 0a 73 65 74     set emulator.set
    4a47:	64 61 74 65 20 2d 20 73 65 74 20 64 61 74 65 0a     date - set date.
    4a57:	74 69 6d 65 20 20 20 20 2d 20 64 69 73 70 6c 61     time    - displa
    4a67:	79 20 63 75 72 72 65 6e 74 20 74 69 6d 65 0a 0a     y current time..
	...

00004a78 <__c.4523>:
    4a78:	25 2d 31 36 73 00                                   %-16s.

00004a7e <__c.4521>:
    4a7e:	25 2d 31 36 73 00                                   %-16s.

00004a84 <__c.4514>:
    4a84:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4a94:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004a9e <__c.4512>:
    4a9e:	25 2d 31 36 73 00                                   %-16s.

00004aa4 <__c.4510>:
    4aa4:	25 2d 31 36 73 00                                   %-16s.

00004aaa <__c.4508>:
    4aaa:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4aba:	69 6c 65 64 0a 00                                   iled..

00004ac0 <__c.4506>:
    4ac0:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4ad0:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004ade <__c.4500>:
    4ade:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4aee:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004af8 <__c.4494>:
    4af8:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4b08:	3a 25 30 32 64 00                                   :%02d.

00004b0e <__c.4480>:
    4b0e:	0a 00                                               ..

00004b10 <__c.4478>:
    4b10:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4b20:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004b2a <__c.4476>:
    4b2a:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4b3a:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004b44 <__c.4474>:
    4b44:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4b54:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4b64:	35 64 69 73 6b 0a 00                                5disk..

00004b6b <__c.4472>:
    4b6b:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004b7b <__c.4470>:
    4b7b:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4b8b:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004b98 <__c.4468>:
    4b98:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4ba8:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004bb7 <__c.4466>:
    4bb7:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4bc7:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4bd7:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004be8 <__ctors_end>:
    4be8:	11 24       	eor	r1, r1
    4bea:	1f be       	out	0x3f, r1	; 63
    4bec:	cf ef       	ldi	r28, 0xFF	; 255
    4bee:	d0 e4       	ldi	r29, 0x40	; 64
    4bf0:	de bf       	out	0x3e, r29	; 62
    4bf2:	cd bf       	out	0x3d, r28	; 61

00004bf4 <__do_copy_data>:
    4bf4:	17 e1       	ldi	r17, 0x17	; 23
    4bf6:	a0 e0       	ldi	r26, 0x00	; 0
    4bf8:	b1 e0       	ldi	r27, 0x01	; 1
    4bfa:	ea ed       	ldi	r30, 0xDA	; 218
    4bfc:	f5 ed       	ldi	r31, 0xD5	; 213
    4bfe:	01 e0       	ldi	r16, 0x01	; 1
    4c00:	0b bf       	out	0x3b, r16	; 59
    4c02:	02 c0       	rjmp	.+4      	; 0x4c08 <__do_copy_data+0x14>
    4c04:	07 90       	elpm	r0, Z+
    4c06:	0d 92       	st	X+, r0
    4c08:	ae 34       	cpi	r26, 0x4E	; 78
    4c0a:	b1 07       	cpc	r27, r17
    4c0c:	d9 f7       	brne	.-10     	; 0x4c04 <__do_copy_data+0x10>

00004c0e <__do_clear_bss>:
    4c0e:	20 e2       	ldi	r18, 0x20	; 32
    4c10:	ae e4       	ldi	r26, 0x4E	; 78
    4c12:	b7 e1       	ldi	r27, 0x17	; 23
    4c14:	01 c0       	rjmp	.+2      	; 0x4c18 <.do_clear_bss_start>

00004c16 <.do_clear_bss_loop>:
    4c16:	1d 92       	st	X+, r1

00004c18 <.do_clear_bss_start>:
    4c18:	a0 33       	cpi	r26, 0x30	; 48
    4c1a:	b2 07       	cpc	r27, r18
    4c1c:	e1 f7       	brne	.-8      	; 0x4c16 <.do_clear_bss_loop>
    4c1e:	0e 94 86 e4 	call	0x1c90c	; 0x1c90c <main>
    4c22:	0c 94 eb ea 	jmp	0x1d5d6	; 0x1d5d6 <_exit>

00004c26 <__bad_interrupt>:
    4c26:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004c2a <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4c2a:	e8 2f       	mov	r30, r24
    4c2c:	e6 95       	lsr	r30
    4c2e:	e6 95       	lsr	r30
    4c30:	e6 95       	lsr	r30
    4c32:	93 e0       	ldi	r25, 0x03	; 3
    4c34:	e9 9f       	mul	r30, r25
    4c36:	f0 01       	movw	r30, r0
    4c38:	11 24       	eor	r1, r1
    4c3a:	32 a1       	ldd	r19, Z+34	; 0x22
    4c3c:	28 2f       	mov	r18, r24
    4c3e:	27 70       	andi	r18, 0x07	; 7
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	01 c0       	rjmp	.+2      	; 0x4c48 <chip_select+0x1e>
    4c46:	88 0f       	add	r24, r24
    4c48:	2a 95       	dec	r18
    4c4a:	ea f7       	brpl	.-6      	; 0x4c46 <chip_select+0x1c>
    4c4c:	98 2f       	mov	r25, r24
    4c4e:	90 95       	com	r25
    4c50:	93 23       	and	r25, r19
    4c52:	92 a3       	std	Z+34, r25	; 0x22
    4c54:	91 a1       	ldd	r25, Z+33	; 0x21
    4c56:	89 2b       	or	r24, r25
    4c58:	81 a3       	std	Z+33, r24	; 0x21
    4c5a:	08 95       	ret

00004c5c <chip_deselect>:
    4c5c:	e8 2f       	mov	r30, r24
    4c5e:	e6 95       	lsr	r30
    4c60:	e6 95       	lsr	r30
    4c62:	e6 95       	lsr	r30
    4c64:	93 e0       	ldi	r25, 0x03	; 3
    4c66:	e9 9f       	mul	r30, r25
    4c68:	f0 01       	movw	r30, r0
    4c6a:	11 24       	eor	r1, r1
    4c6c:	32 a1       	ldd	r19, Z+34	; 0x22
    4c6e:	28 2f       	mov	r18, r24
    4c70:	27 70       	andi	r18, 0x07	; 7
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	01 c0       	rjmp	.+2      	; 0x4c7a <chip_deselect+0x1e>
    4c78:	88 0f       	add	r24, r24
    4c7a:	2a 95       	dec	r18
    4c7c:	ea f7       	brpl	.-6      	; 0x4c78 <chip_deselect+0x1c>
    4c7e:	93 2f       	mov	r25, r19
    4c80:	98 2b       	or	r25, r24
    4c82:	92 a3       	std	Z+34, r25	; 0x22
    4c84:	91 a1       	ldd	r25, Z+33	; 0x21
    4c86:	89 2b       	or	r24, r25
    4c88:	81 a3       	std	Z+33, r24	; 0x21
    4c8a:	08 95       	ret

00004c8c <chip_select_init>:
    4c8c:	e7 cf       	rjmp	.-50     	; 0x4c5c <chip_deselect>
    4c8e:	08 95       	ret

00004c90 <spi_end>:
    4c90:	cf 93       	push	r28
    4c92:	ad b7       	in	r26, 0x3d	; 61
    4c94:	be b7       	in	r27, 0x3e	; 62
    4c96:	17 97       	sbiw	r26, 0x07	; 7
    4c98:	0f b6       	in	r0, 0x3f	; 63
    4c9a:	f8 94       	cli
    4c9c:	be bf       	out	0x3e, r27	; 62
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	ad bf       	out	0x3d, r26	; 61
    4ca2:	c8 2f       	mov	r28, r24
    4ca4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4ca8:	8c 17       	cp	r24, r28
    4caa:	99 f0       	breq	.+38     	; 0x4cd2 <spi_end+0x42>
    4cac:	8f 3f       	cpi	r24, 0xFF	; 255
    4cae:	89 f0       	breq	.+34     	; 0x4cd2 <spi_end+0x42>
    4cb0:	2c 2f       	mov	r18, r28
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	ed b7       	in	r30, 0x3d	; 61
    4cb6:	fe b7       	in	r31, 0x3e	; 62
    4cb8:	37 83       	std	Z+7, r19	; 0x07
    4cba:	26 83       	std	Z+6, r18	; 0x06
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	95 83       	std	Z+5, r25	; 0x05
    4cc0:	84 83       	std	Z+4, r24	; 0x04
    4cc2:	82 ec       	ldi	r24, 0xC2	; 194
    4cc4:	91 e0       	ldi	r25, 0x01	; 1
    4cc6:	a0 e0       	ldi	r26, 0x00	; 0
    4cc8:	81 83       	std	Z+1, r24	; 0x01
    4cca:	92 83       	std	Z+2, r25	; 0x02
    4ccc:	a3 83       	std	Z+3, r26	; 0x03
    4cce:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    4cd2:	8c 2f       	mov	r24, r28
    4cd4:	c3 df       	rcall	.-122    	; 0x4c5c <chip_deselect>
    4cd6:	8f ef       	ldi	r24, 0xFF	; 255
    4cd8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4cdc:	ad b7       	in	r26, 0x3d	; 61
    4cde:	be b7       	in	r27, 0x3e	; 62
    4ce0:	17 96       	adiw	r26, 0x07	; 7
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	f8 94       	cli
    4ce6:	be bf       	out	0x3e, r27	; 62
    4ce8:	0f be       	out	0x3f, r0	; 63
    4cea:	ad bf       	out	0x3d, r26	; 61
    4cec:	cf 91       	pop	r28
    4cee:	08 95       	ret

00004cf0 <spi_TX_buffer>:
    4cf0:	cd c4       	rjmp	.+2458   	; 0x568c <SPI0_TX>
    4cf2:	08 95       	ret

00004cf4 <spi_RX_buffer>:
    4cf4:	f5 c4       	rjmp	.+2538   	; 0x56e0 <SPI0_RX>
    4cf6:	08 95       	ret

00004cf8 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4cf8:	a1 e0       	ldi	r26, 0x01	; 1
    4cfa:	b0 e0       	ldi	r27, 0x00	; 0
    4cfc:	e2 e8       	ldi	r30, 0x82	; 130
    4cfe:	f6 e2       	ldi	r31, 0x26	; 38
    4d00:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    4d04:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4d06:	61 e0       	ldi	r22, 0x01	; 1
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	ce 01       	movw	r24, r28
    4d0c:	01 96       	adiw	r24, 0x01	; 1
    4d0e:	be d4       	rcall	.+2428   	; 0x568c <SPI0_TX>
#endif
}
    4d10:	21 96       	adiw	r28, 0x01	; 1
    4d12:	e2 e0       	ldi	r30, 0x02	; 2
    4d14:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00004d18 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4d18:	cf 92       	push	r12
    4d1a:	df 92       	push	r13
    4d1c:	ef 92       	push	r14
    4d1e:	ff 92       	push	r15
    4d20:	6b 01       	movw	r12, r22
    4d22:	7c 01       	movw	r14, r24
    4d24:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4d26:	9a df       	rcall	.-204    	; 0x4c5c <chip_deselect>
    _cs_pin = 0xff;
    4d28:	8f ef       	ldi	r24, 0xFF	; 255
    4d2a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4d2e:	c7 01       	movw	r24, r14
    4d30:	b6 01       	movw	r22, r12
    4d32:	7f d4       	rcall	.+2302   	; 0x5632 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4d34:	80 e0       	ldi	r24, 0x00	; 0
    4d36:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4d38:	3c d4       	rcall	.+2168   	; 0x55b2 <SPI0_Mode>
    4d3a:	8f ef       	ldi	r24, 0xFF	; 255
    4d3c:	dd df       	rcall	.-70     	; 0x4cf8 <spi_TX>
    _spi_clock = clock;
    4d3e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d42:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d46:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d4a:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4d4e:	ff 90       	pop	r15
    4d50:	ef 90       	pop	r14
    4d52:	df 90       	pop	r13
    4d54:	cf 90       	pop	r12
    4d56:	08 95       	ret

00004d58 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4d58:	cf 92       	push	r12
    4d5a:	df 92       	push	r13
    4d5c:	ef 92       	push	r14
    4d5e:	ff 92       	push	r15
    4d60:	cf 93       	push	r28
    4d62:	df 93       	push	r29
    4d64:	ad b7       	in	r26, 0x3d	; 61
    4d66:	be b7       	in	r27, 0x3e	; 62
    4d68:	17 97       	sbiw	r26, 0x07	; 7
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	be bf       	out	0x3e, r27	; 62
    4d70:	0f be       	out	0x3f, r0	; 63
    4d72:	ad bf       	out	0x3d, r26	; 61
    4d74:	6b 01       	movw	r12, r22
    4d76:	7c 01       	movw	r14, r24
    4d78:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4d7a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4d7e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d80:	79 f0       	breq	.+30     	; 0x4da0 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4d82:	ed b7       	in	r30, 0x3d	; 61
    4d84:	fe b7       	in	r31, 0x3e	; 62
    4d86:	46 83       	std	Z+6, r20	; 0x06
    4d88:	d7 83       	std	Z+7, r29	; 0x07
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	95 83       	std	Z+5, r25	; 0x05
    4d8e:	84 83       	std	Z+4, r24	; 0x04
    4d90:	80 ee       	ldi	r24, 0xE0	; 224
    4d92:	91 e0       	ldi	r25, 0x01	; 1
    4d94:	a0 e0       	ldi	r26, 0x00	; 0
    4d96:	81 83       	std	Z+1, r24	; 0x01
    4d98:	92 83       	std	Z+2, r25	; 0x02
    4d9a:	a3 83       	std	Z+3, r26	; 0x03
    4d9c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4da0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4da4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4da8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4dac:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4db0:	8c 15       	cp	r24, r12
    4db2:	9d 05       	cpc	r25, r13
    4db4:	ae 05       	cpc	r26, r14
    4db6:	bf 05       	cpc	r27, r15
    4db8:	21 f0       	breq	.+8      	; 0x4dc2 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4dba:	ae 01       	movw	r20, r28
    4dbc:	c7 01       	movw	r24, r14
    4dbe:	b6 01       	movw	r22, r12
    4dc0:	ab df       	rcall	.-170    	; 0x4d18 <spi_init>
    }

    chip_select(pin);
    4dc2:	8c 2f       	mov	r24, r28
    4dc4:	32 df       	rcall	.-412    	; 0x4c2a <chip_select>
    _cs_pin = pin;
    4dc6:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4dca:	ad b7       	in	r26, 0x3d	; 61
    4dcc:	be b7       	in	r27, 0x3e	; 62
    4dce:	17 96       	adiw	r26, 0x07	; 7
    4dd0:	0f b6       	in	r0, 0x3f	; 63
    4dd2:	f8 94       	cli
    4dd4:	be bf       	out	0x3e, r27	; 62
    4dd6:	0f be       	out	0x3f, r0	; 63
    4dd8:	ad bf       	out	0x3d, r26	; 61
    4dda:	df 91       	pop	r29
    4ddc:	cf 91       	pop	r28
    4dde:	ff 90       	pop	r15
    4de0:	ef 90       	pop	r14
    4de2:	df 90       	pop	r13
    4de4:	cf 90       	pop	r12
    4de6:	08 95       	ret

00004de8 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4de8:	a1 e0       	ldi	r26, 0x01	; 1
    4dea:	b0 e0       	ldi	r27, 0x00	; 0
    4dec:	ea ef       	ldi	r30, 0xFA	; 250
    4dee:	f6 e2       	ldi	r31, 0x26	; 38
    4df0:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    4df4:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4df6:	61 e0       	ldi	r22, 0x01	; 1
    4df8:	70 e0       	ldi	r23, 0x00	; 0
    4dfa:	ce 01       	movw	r24, r28
    4dfc:	01 96       	adiw	r24, 0x01	; 1
    4dfe:	5a d4       	rcall	.+2228   	; 0x56b4 <SPI0_TXRX>
#endif
    return(data);
}
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
    4e02:	21 96       	adiw	r28, 0x01	; 1
    4e04:	e2 e0       	ldi	r30, 0x02	; 2
    4e06:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00004e0a <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4e0a:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <__data_end>
    GPIO_PIN_HI(LED2);
    4e0e:	2c 9a       	sbi	0x05, 4	; 5
    4e10:	24 9a       	sbi	0x04, 4	; 4
    4e12:	08 95       	ret

00004e14 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4e14:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <__data_end>
    GPIO_PIN_LOW(LED2);
    4e18:	2c 98       	cbi	0x05, 4	; 5
    4e1a:	24 9a       	sbi	0x04, 4	; 4
    4e1c:	08 95       	ret

00004e1e <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4e1e:	a2 e0       	ldi	r26, 0x02	; 2
    4e20:	b0 e0       	ldi	r27, 0x00	; 0
    4e22:	e5 e1       	ldi	r30, 0x15	; 21
    4e24:	f7 e2       	ldi	r31, 0x27	; 39
    4e26:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4e2a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    4e2e:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    4e32:	21 15       	cp	r18, r1
    4e34:	31 05       	cpc	r19, r1
    4e36:	11 f4       	brne	.+4      	; 0x4e3c <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4e38:	20 e3       	ldi	r18, 0x30	; 48
    4e3a:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	01 96       	adiw	r24, 0x01	; 1
    4e40:	82 1b       	sub	r24, r18
    4e42:	93 0b       	sbc	r25, r19
    4e44:	22 96       	adiw	r28, 0x02	; 2
    4e46:	e2 e0       	ldi	r30, 0x02	; 2
    4e48:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00004e4c <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e4c:	a9 e0       	ldi	r26, 0x09	; 9
    4e4e:	b0 e0       	ldi	r27, 0x00	; 0
    4e50:	ec e2       	ldi	r30, 0x2C	; 44
    4e52:	f7 e2       	ldi	r31, 0x27	; 39
    4e54:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4e58:	e2 df       	rcall	.-60     	; 0x4e1e <freeRam>
    4e5a:	99 87       	std	Y+9, r25	; 0x09
    4e5c:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4e5e:	ed b7       	in	r30, 0x3d	; 61
    4e60:	fe b7       	in	r31, 0x3e	; 62
    4e62:	95 83       	std	Z+5, r25	; 0x05
    4e64:	84 83       	std	Z+4, r24	; 0x04
    4e66:	87 e0       	ldi	r24, 0x07	; 7
    4e68:	93 e0       	ldi	r25, 0x03	; 3
    4e6a:	a0 e0       	ldi	r26, 0x00	; 0
    4e6c:	81 83       	std	Z+1, r24	; 0x01
    4e6e:	92 83       	std	Z+2, r25	; 0x02
    4e70:	a3 83       	std	Z+3, r26	; 0x03
    4e72:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4e76:	8f ef       	ldi	r24, 0xFF	; 255
    4e78:	90 e4       	ldi	r25, 0x40	; 64
    4e7a:	ed b7       	in	r30, 0x3d	; 61
    4e7c:	fe b7       	in	r31, 0x3e	; 62
    4e7e:	95 83       	std	Z+5, r25	; 0x05
    4e80:	84 83       	std	Z+4, r24	; 0x04
    4e82:	84 ef       	ldi	r24, 0xF4	; 244
    4e84:	92 e0       	ldi	r25, 0x02	; 2
    4e86:	a0 e0       	ldi	r26, 0x00	; 0
    4e88:	81 83       	std	Z+1, r24	; 0x01
    4e8a:	92 83       	std	Z+2, r25	; 0x02
    4e8c:	a3 83       	std	Z+3, r26	; 0x03
    4e8e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4e92:	ce 01       	movw	r24, r28
    4e94:	08 96       	adiw	r24, 0x08	; 8
    4e96:	ed b7       	in	r30, 0x3d	; 61
    4e98:	fe b7       	in	r31, 0x3e	; 62
    4e9a:	95 83       	std	Z+5, r25	; 0x05
    4e9c:	84 83       	std	Z+4, r24	; 0x04
    4e9e:	81 ee       	ldi	r24, 0xE1	; 225
    4ea0:	92 e0       	ldi	r25, 0x02	; 2
    4ea2:	a0 e0       	ldi	r26, 0x00	; 0
    4ea4:	81 83       	std	Z+1, r24	; 0x01
    4ea6:	92 83       	std	Z+2, r25	; 0x02
    4ea8:	a3 83       	std	Z+3, r26	; 0x03
    4eaa:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4eae:	80 e3       	ldi	r24, 0x30	; 48
    4eb0:	90 e2       	ldi	r25, 0x20	; 32
    4eb2:	ed b7       	in	r30, 0x3d	; 61
    4eb4:	fe b7       	in	r31, 0x3e	; 62
    4eb6:	97 83       	std	Z+7, r25	; 0x07
    4eb8:	86 83       	std	Z+6, r24	; 0x06
    4eba:	8e e4       	ldi	r24, 0x4E	; 78
    4ebc:	97 e1       	ldi	r25, 0x17	; 23
    4ebe:	95 83       	std	Z+5, r25	; 0x05
    4ec0:	84 83       	std	Z+4, r24	; 0x04
    4ec2:	83 ec       	ldi	r24, 0xC3	; 195
    4ec4:	92 e0       	ldi	r25, 0x02	; 2
    4ec6:	a0 e0       	ldi	r26, 0x00	; 0
    4ec8:	81 83       	std	Z+1, r24	; 0x01
    4eca:	92 83       	std	Z+2, r25	; 0x02
    4ecc:	a3 83       	std	Z+3, r26	; 0x03
    4ece:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4ed2:	8e e4       	ldi	r24, 0x4E	; 78
    4ed4:	97 e1       	ldi	r25, 0x17	; 23
    4ed6:	ed b7       	in	r30, 0x3d	; 61
    4ed8:	fe b7       	in	r31, 0x3e	; 62
    4eda:	97 83       	std	Z+7, r25	; 0x07
    4edc:	86 83       	std	Z+6, r24	; 0x06
    4ede:	80 e0       	ldi	r24, 0x00	; 0
    4ee0:	91 e0       	ldi	r25, 0x01	; 1
    4ee2:	95 83       	std	Z+5, r25	; 0x05
    4ee4:	84 83       	std	Z+4, r24	; 0x04
    4ee6:	85 ea       	ldi	r24, 0xA5	; 165
    4ee8:	92 e0       	ldi	r25, 0x02	; 2
    4eea:	a0 e0       	ldi	r26, 0x00	; 0
    4eec:	81 83       	std	Z+1, r24	; 0x01
    4eee:	92 83       	std	Z+2, r25	; 0x02
    4ef0:	a3 83       	std	Z+3, r26	; 0x03
    4ef2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	ed b7       	in	r30, 0x3d	; 61
    4efc:	fe b7       	in	r31, 0x3e	; 62
    4efe:	97 83       	std	Z+7, r25	; 0x07
    4f00:	86 83       	std	Z+6, r24	; 0x06
    4f02:	80 e3       	ldi	r24, 0x30	; 48
    4f04:	90 e2       	ldi	r25, 0x20	; 32
    4f06:	95 83       	std	Z+5, r25	; 0x05
    4f08:	84 83       	std	Z+4, r24	; 0x04
    4f0a:	87 e8       	ldi	r24, 0x87	; 135
    4f0c:	92 e0       	ldi	r25, 0x02	; 2
    4f0e:	a0 e0       	ldi	r26, 0x00	; 0
    4f10:	81 83       	std	Z+1, r24	; 0x01
    4f12:	92 83       	std	Z+2, r25	; 0x02
    4f14:	a3 83       	std	Z+3, r26	; 0x03
    4f16:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4f1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4f1e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4f22:	ed b7       	in	r30, 0x3d	; 61
    4f24:	fe b7       	in	r31, 0x3e	; 62
    4f26:	97 83       	std	Z+7, r25	; 0x07
    4f28:	86 83       	std	Z+6, r24	; 0x06
    4f2a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4f2e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f32:	95 83       	std	Z+5, r25	; 0x05
    4f34:	84 83       	std	Z+4, r24	; 0x04
    4f36:	89 e6       	ldi	r24, 0x69	; 105
    4f38:	92 e0       	ldi	r25, 0x02	; 2
    4f3a:	a0 e0       	ldi	r26, 0x00	; 0
    4f3c:	81 83       	std	Z+1, r24	; 0x01
    4f3e:	92 83       	std	Z+2, r25	; 0x02
    4f40:	a3 83       	std	Z+3, r26	; 0x03
    4f42:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4f46:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__brkval>
    4f4a:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <__brkval+0x1>
    4f4e:	ed b7       	in	r30, 0x3d	; 61
    4f50:	fe b7       	in	r31, 0x3e	; 62
    4f52:	95 83       	std	Z+5, r25	; 0x05
    4f54:	84 83       	std	Z+4, r24	; 0x04
    4f56:	85 e5       	ldi	r24, 0x55	; 85
    4f58:	92 e0       	ldi	r25, 0x02	; 2
    4f5a:	a0 e0       	ldi	r26, 0x00	; 0
    4f5c:	81 83       	std	Z+1, r24	; 0x01
    4f5e:	92 83       	std	Z+2, r25	; 0x02
    4f60:	a3 83       	std	Z+3, r26	; 0x03
    4f62:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

}
    4f66:	29 96       	adiw	r28, 0x09	; 9
    4f68:	e2 e0       	ldi	r30, 0x02	; 2
    4f6a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00004f6e <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4f6e:	ef 92       	push	r14
    4f70:	ff 92       	push	r15
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	cf 93       	push	r28
    4f78:	df 93       	push	r29
    4f7a:	ad b7       	in	r26, 0x3d	; 61
    4f7c:	be b7       	in	r27, 0x3e	; 62
    4f7e:	17 97       	sbiw	r26, 0x07	; 7
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	be bf       	out	0x3e, r27	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	ad bf       	out	0x3d, r26	; 61
    4f8a:	8c 01       	movw	r16, r24
    4f8c:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4f8e:	0e 94 a9 e9 	call	0x1d352	; 0x1d352 <calloc>
    4f92:	ec 01       	movw	r28, r24
    if(!p)
    4f94:	89 2b       	or	r24, r25
    4f96:	71 f4       	brne	.+28     	; 0x4fb4 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4f98:	ed b7       	in	r30, 0x3d	; 61
    4f9a:	fe b7       	in	r31, 0x3e	; 62
    4f9c:	f7 82       	std	Z+7, r15	; 0x07
    4f9e:	e6 82       	std	Z+6, r14	; 0x06
    4fa0:	15 83       	std	Z+5, r17	; 0x05
    4fa2:	04 83       	std	Z+4, r16	; 0x04
    4fa4:	8a e3       	ldi	r24, 0x3A	; 58
    4fa6:	92 e0       	ldi	r25, 0x02	; 2
    4fa8:	a0 e0       	ldi	r26, 0x00	; 0
    4faa:	81 83       	std	Z+1, r24	; 0x01
    4fac:	92 83       	std	Z+2, r25	; 0x02
    4fae:	a3 83       	std	Z+3, r26	; 0x03
    4fb0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }
    return(p);
}
    4fb4:	ce 01       	movw	r24, r28
    4fb6:	cd b7       	in	r28, 0x3d	; 61
    4fb8:	de b7       	in	r29, 0x3e	; 62
    4fba:	27 96       	adiw	r28, 0x07	; 7
    4fbc:	e6 e0       	ldi	r30, 0x06	; 6
    4fbe:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00004fc2 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4fc2:	0f 93       	push	r16
    4fc4:	1f 93       	push	r17
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	00 d0       	rcall	.+0      	; 0x4fcc <safemalloc+0xa>
    4fcc:	00 d0       	rcall	.+0      	; 0x4fce <safemalloc+0xc>
    4fce:	1f 92       	push	r1
    4fd0:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4fd2:	61 e0       	ldi	r22, 0x01	; 1
    4fd4:	70 e0       	ldi	r23, 0x00	; 0
    4fd6:	0e 94 a9 e9 	call	0x1d352	; 0x1d352 <calloc>
    4fda:	ec 01       	movw	r28, r24
    if(!p)
    4fdc:	89 2b       	or	r24, r25
    4fde:	61 f4       	brne	.+24     	; 0x4ff8 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4fe0:	ed b7       	in	r30, 0x3d	; 61
    4fe2:	fe b7       	in	r31, 0x3e	; 62
    4fe4:	15 83       	std	Z+5, r17	; 0x05
    4fe6:	04 83       	std	Z+4, r16	; 0x04
    4fe8:	82 e2       	ldi	r24, 0x22	; 34
    4fea:	92 e0       	ldi	r25, 0x02	; 2
    4fec:	a0 e0       	ldi	r26, 0x00	; 0
    4fee:	81 83       	std	Z+1, r24	; 0x01
    4ff0:	92 83       	std	Z+2, r25	; 0x02
    4ff2:	a3 83       	std	Z+3, r26	; 0x03
    4ff4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }
    return(p);
}
    4ff8:	ce 01       	movw	r24, r28
    4ffa:	cd b7       	in	r28, 0x3d	; 61
    4ffc:	de b7       	in	r29, 0x3e	; 62
    4ffe:	25 96       	adiw	r28, 0x05	; 5
    5000:	e4 e0       	ldi	r30, 0x04	; 4
    5002:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00005006 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    5006:	ad b7       	in	r26, 0x3d	; 61
    5008:	be b7       	in	r27, 0x3e	; 62
    500a:	17 97       	sbiw	r26, 0x07	; 7
    500c:	0f b6       	in	r0, 0x3f	; 63
    500e:	f8 94       	cli
    5010:	be bf       	out	0x3e, r27	; 62
    5012:	0f be       	out	0x3f, r0	; 63
    5014:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5016:	00 97       	sbiw	r24, 0x00	; 0
    5018:	11 f1       	breq	.+68     	; 0x505e <safefree+0x58>
        return;

    if(__brkval)
    501a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    501e:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    5022:	21 15       	cp	r18, r1
    5024:	31 05       	cpc	r19, r1
    5026:	11 f4       	brne	.+4      	; 0x502c <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5028:	20 e3       	ldi	r18, 0x30	; 48
    502a:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    502c:	40 e2       	ldi	r20, 0x20	; 32
    502e:	80 33       	cpi	r24, 0x30	; 48
    5030:	94 07       	cpc	r25, r20
    5032:	30 f0       	brcs	.+12     	; 0x5040 <safefree+0x3a>
    5034:	28 17       	cp	r18, r24
    5036:	39 07       	cpc	r19, r25
    5038:	18 f0       	brcs	.+6      	; 0x5040 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    503a:	0e 94 5b ea 	call	0x1d4b6	; 0x1d4b6 <free>
        return;
    503e:	0f c0       	rjmp	.+30     	; 0x505e <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5040:	ed b7       	in	r30, 0x3d	; 61
    5042:	fe b7       	in	r31, 0x3e	; 62
    5044:	37 83       	std	Z+7, r19	; 0x07
    5046:	26 83       	std	Z+6, r18	; 0x06
    5048:	95 83       	std	Z+5, r25	; 0x05
    504a:	84 83       	std	Z+4, r24	; 0x04
    504c:	8d ef       	ldi	r24, 0xFD	; 253
    504e:	91 e0       	ldi	r25, 0x01	; 1
    5050:	a0 e0       	ldi	r26, 0x00	; 0
    5052:	81 83       	std	Z+1, r24	; 0x01
    5054:	92 83       	std	Z+2, r25	; 0x02
    5056:	a3 83       	std	Z+3, r26	; 0x03
    5058:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    PrintFree();
    505c:	f7 de       	rcall	.-530    	; 0x4e4c <PrintFree>
}
    505e:	ad b7       	in	r26, 0x3d	; 61
    5060:	be b7       	in	r27, 0x3e	; 62
    5062:	17 96       	adiw	r26, 0x07	; 7
    5064:	0f b6       	in	r0, 0x3f	; 63
    5066:	f8 94       	cli
    5068:	be bf       	out	0x3e, r27	; 62
    506a:	0f be       	out	0x3f, r0	; 63
    506c:	ad bf       	out	0x3d, r26	; 61
    506e:	08 95       	ret

00005070 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5070:	64 36       	cpi	r22, 0x64	; 100
    5072:	71 05       	cpc	r23, r1
    5074:	81 05       	cpc	r24, r1
    5076:	91 05       	cpc	r25, r1
    5078:	58 f0       	brcs	.+22     	; 0x5090 <delayus+0x20>
    {
        us -= 100U;
    507a:	64 56       	subi	r22, 0x64	; 100
    507c:	71 09       	sbc	r23, r1
    507e:	81 09       	sbc	r24, r1
    5080:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5082:	e3 ef       	ldi	r30, 0xF3	; 243
    5084:	f1 e0       	ldi	r31, 0x01	; 1
    5086:	31 97       	sbiw	r30, 0x01	; 1
    5088:	f1 f7       	brne	.-4      	; 0x5086 <delayus+0x16>
    508a:	00 c0       	rjmp	.+0      	; 0x508c <delayus+0x1c>
    508c:	00 00       	nop
    508e:	f0 cf       	rjmp	.-32     	; 0x5070 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5090:	6a 30       	cpi	r22, 0x0A	; 10
    5092:	71 05       	cpc	r23, r1
    5094:	81 05       	cpc	r24, r1
    5096:	91 05       	cpc	r25, r1
    5098:	48 f0       	brcs	.+18     	; 0x50ac <delayus+0x3c>
    {
        us -= 10U;
    509a:	6a 50       	subi	r22, 0x0A	; 10
    509c:	71 09       	sbc	r23, r1
    509e:	81 09       	sbc	r24, r1
    50a0:	91 09       	sbc	r25, r1
    50a2:	f2 e4       	ldi	r31, 0x42	; 66
    50a4:	fa 95       	dec	r31
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <delayus+0x34>
    50a8:	00 c0       	rjmp	.+0      	; 0x50aa <delayus+0x3a>
    50aa:	f2 cf       	rjmp	.-28     	; 0x5090 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    50ac:	61 15       	cp	r22, r1
    50ae:	71 05       	cpc	r23, r1
    50b0:	81 05       	cpc	r24, r1
    50b2:	91 05       	cpc	r25, r1
    50b4:	49 f0       	breq	.+18     	; 0x50c8 <delayus+0x58>
    {
        --us;
    50b6:	61 50       	subi	r22, 0x01	; 1
    50b8:	71 09       	sbc	r23, r1
    50ba:	81 09       	sbc	r24, r1
    50bc:	91 09       	sbc	r25, r1
    50be:	26 e0       	ldi	r18, 0x06	; 6
    50c0:	2a 95       	dec	r18
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <delayus+0x50>
    50c4:	00 c0       	rjmp	.+0      	; 0x50c6 <delayus+0x56>
    50c6:	f2 cf       	rjmp	.-28     	; 0x50ac <delayus+0x3c>
        _delay_us(1);
    }
}
    50c8:	08 95       	ret

000050ca <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    50ca:	61 15       	cp	r22, r1
    50cc:	71 05       	cpc	r23, r1
    50ce:	81 05       	cpc	r24, r1
    50d0:	91 05       	cpc	r25, r1
    50d2:	09 f4       	brne	.+2      	; 0x50d6 <delayms+0xc>
    50d4:	41 c0       	rjmp	.+130    	; 0x5158 <delayms+0x8e>
    50d6:	e3 ef       	ldi	r30, 0xF3	; 243
    50d8:	f1 e0       	ldi	r31, 0x01	; 1
    50da:	31 97       	sbiw	r30, 0x01	; 1
    50dc:	f1 f7       	brne	.-4      	; 0x50da <delayms+0x10>
    50de:	00 c0       	rjmp	.+0      	; 0x50e0 <delayms+0x16>
    50e0:	00 00       	nop
    50e2:	e3 ef       	ldi	r30, 0xF3	; 243
    50e4:	f1 e0       	ldi	r31, 0x01	; 1
    50e6:	31 97       	sbiw	r30, 0x01	; 1
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <delayms+0x1c>
    50ea:	00 c0       	rjmp	.+0      	; 0x50ec <delayms+0x22>
    50ec:	00 00       	nop
    50ee:	e3 ef       	ldi	r30, 0xF3	; 243
    50f0:	f1 e0       	ldi	r31, 0x01	; 1
    50f2:	31 97       	sbiw	r30, 0x01	; 1
    50f4:	f1 f7       	brne	.-4      	; 0x50f2 <delayms+0x28>
    50f6:	00 c0       	rjmp	.+0      	; 0x50f8 <delayms+0x2e>
    50f8:	00 00       	nop
    50fa:	e3 ef       	ldi	r30, 0xF3	; 243
    50fc:	f1 e0       	ldi	r31, 0x01	; 1
    50fe:	31 97       	sbiw	r30, 0x01	; 1
    5100:	f1 f7       	brne	.-4      	; 0x50fe <delayms+0x34>
    5102:	00 c0       	rjmp	.+0      	; 0x5104 <delayms+0x3a>
    5104:	00 00       	nop
    5106:	e3 ef       	ldi	r30, 0xF3	; 243
    5108:	f1 e0       	ldi	r31, 0x01	; 1
    510a:	31 97       	sbiw	r30, 0x01	; 1
    510c:	f1 f7       	brne	.-4      	; 0x510a <delayms+0x40>
    510e:	00 c0       	rjmp	.+0      	; 0x5110 <delayms+0x46>
    5110:	00 00       	nop
    5112:	e3 ef       	ldi	r30, 0xF3	; 243
    5114:	f1 e0       	ldi	r31, 0x01	; 1
    5116:	31 97       	sbiw	r30, 0x01	; 1
    5118:	f1 f7       	brne	.-4      	; 0x5116 <delayms+0x4c>
    511a:	00 c0       	rjmp	.+0      	; 0x511c <delayms+0x52>
    511c:	00 00       	nop
    511e:	e3 ef       	ldi	r30, 0xF3	; 243
    5120:	f1 e0       	ldi	r31, 0x01	; 1
    5122:	31 97       	sbiw	r30, 0x01	; 1
    5124:	f1 f7       	brne	.-4      	; 0x5122 <delayms+0x58>
    5126:	00 c0       	rjmp	.+0      	; 0x5128 <delayms+0x5e>
    5128:	00 00       	nop
    512a:	e3 ef       	ldi	r30, 0xF3	; 243
    512c:	f1 e0       	ldi	r31, 0x01	; 1
    512e:	31 97       	sbiw	r30, 0x01	; 1
    5130:	f1 f7       	brne	.-4      	; 0x512e <delayms+0x64>
    5132:	00 c0       	rjmp	.+0      	; 0x5134 <delayms+0x6a>
    5134:	00 00       	nop
    5136:	e3 ef       	ldi	r30, 0xF3	; 243
    5138:	f1 e0       	ldi	r31, 0x01	; 1
    513a:	31 97       	sbiw	r30, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <delayms+0x70>
    513e:	00 c0       	rjmp	.+0      	; 0x5140 <delayms+0x76>
    5140:	00 00       	nop
    5142:	e3 ef       	ldi	r30, 0xF3	; 243
    5144:	f1 e0       	ldi	r31, 0x01	; 1
    5146:	31 97       	sbiw	r30, 0x01	; 1
    5148:	f1 f7       	brne	.-4      	; 0x5146 <delayms+0x7c>
    514a:	00 c0       	rjmp	.+0      	; 0x514c <delayms+0x82>
    514c:	00 00       	nop
    514e:	61 50       	subi	r22, 0x01	; 1
    5150:	71 09       	sbc	r23, r1
    5152:	81 09       	sbc	r24, r1
    5154:	91 09       	sbc	r25, r1
    5156:	b9 cf       	rjmp	.-142    	; 0x50ca <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    5158:	08 95       	ret

0000515a <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    515a:	81 11       	cpse	r24, r1
    515c:	0e c0       	rjmp	.+28     	; 0x517a <uart_rx_flush+0x20>
    515e:	f8 94       	cli
    5160:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    5164:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    5168:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    516c:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    5170:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    5174:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    5178:	78 94       	sei
    517a:	08 95       	ret

0000517c <uart_ubr>:
    517c:	4f 92       	push	r4
    517e:	5f 92       	push	r5
    5180:	6f 92       	push	r6
    5182:	7f 92       	push	r7
    5184:	8f 92       	push	r8
    5186:	9f 92       	push	r9
    5188:	af 92       	push	r10
    518a:	bf 92       	push	r11
    518c:	cf 92       	push	r12
    518e:	df 92       	push	r13
    5190:	ef 92       	push	r14
    5192:	ff 92       	push	r15
    5194:	cf 93       	push	r28
    5196:	df 93       	push	r29
    5198:	5a 01       	movw	r10, r20
    519a:	e9 01       	movw	r28, r18
    519c:	0e 94 47 e8 	call	0x1d08e	; 0x1d08e <__floatunsisf>
    51a0:	2b 01       	movw	r4, r22
    51a2:	3c 01       	movw	r6, r24
    51a4:	20 e0       	ldi	r18, 0x00	; 0
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	40 e0       	ldi	r20, 0x00	; 0
    51aa:	51 e4       	ldi	r21, 0x41	; 65
    51ac:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    51b0:	9b 01       	movw	r18, r22
    51b2:	ac 01       	movw	r20, r24
    51b4:	60 e8       	ldi	r22, 0x80	; 128
    51b6:	76 e9       	ldi	r23, 0x96	; 150
    51b8:	88 e9       	ldi	r24, 0x98	; 152
    51ba:	9b e4       	ldi	r25, 0x4B	; 75
    51bc:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    51c0:	20 e0       	ldi	r18, 0x00	; 0
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	40 e8       	ldi	r20, 0x80	; 128
    51c6:	5f e3       	ldi	r21, 0x3F	; 63
    51c8:	0e 94 45 e7 	call	0x1ce8a	; 0x1ce8a <__subsf3>
    51cc:	0e 94 60 e9 	call	0x1d2c0	; 0x1d2c0 <round>
    51d0:	0e 94 1b e8 	call	0x1d036	; 0x1d036 <__fixunssfsi>
    51d4:	6b 01       	movw	r12, r22
    51d6:	7c 01       	movw	r14, r24
    51d8:	c1 14       	cp	r12, r1
    51da:	80 e1       	ldi	r24, 0x10	; 16
    51dc:	d8 06       	cpc	r13, r24
    51de:	e1 04       	cpc	r14, r1
    51e0:	f1 04       	cpc	r15, r1
    51e2:	58 f4       	brcc	.+22     	; 0x51fa <uart_ubr+0x7e>
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	f5 01       	movw	r30, r10
    51ea:	91 83       	std	Z+1, r25	; 0x01
    51ec:	80 83       	st	Z, r24
    51ee:	81 2c       	mov	r8, r1
    51f0:	91 2c       	mov	r9, r1
    51f2:	a1 2c       	mov	r10, r1
    51f4:	21 e4       	ldi	r18, 0x41	; 65
    51f6:	b2 2e       	mov	r11, r18
    51f8:	31 c0       	rjmp	.+98     	; 0x525c <uart_ubr+0xe0>
    51fa:	f5 01       	movw	r30, r10
    51fc:	11 82       	std	Z+1, r1	; 0x01
    51fe:	10 82       	st	Z, r1
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e8       	ldi	r20, 0x80	; 128
    5206:	51 e4       	ldi	r21, 0x41	; 65
    5208:	c3 01       	movw	r24, r6
    520a:	b2 01       	movw	r22, r4
    520c:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    5210:	9b 01       	movw	r18, r22
    5212:	ac 01       	movw	r20, r24
    5214:	60 e8       	ldi	r22, 0x80	; 128
    5216:	76 e9       	ldi	r23, 0x96	; 150
    5218:	88 e9       	ldi	r24, 0x98	; 152
    521a:	9b e4       	ldi	r25, 0x4B	; 75
    521c:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	40 e8       	ldi	r20, 0x80	; 128
    5226:	5f e3       	ldi	r21, 0x3F	; 63
    5228:	0e 94 45 e7 	call	0x1ce8a	; 0x1ce8a <__subsf3>
    522c:	0e 94 60 e9 	call	0x1d2c0	; 0x1d2c0 <round>
    5230:	0e 94 1b e8 	call	0x1d036	; 0x1d036 <__fixunssfsi>
    5234:	6b 01       	movw	r12, r22
    5236:	7c 01       	movw	r14, r24
    5238:	81 2c       	mov	r8, r1
    523a:	91 2c       	mov	r9, r1
    523c:	90 e8       	ldi	r25, 0x80	; 128
    523e:	a9 2e       	mov	r10, r25
    5240:	91 e4       	ldi	r25, 0x41	; 65
    5242:	b9 2e       	mov	r11, r25
    5244:	c1 14       	cp	r12, r1
    5246:	f0 e1       	ldi	r31, 0x10	; 16
    5248:	df 06       	cpc	r13, r31
    524a:	e1 04       	cpc	r14, r1
    524c:	f1 04       	cpc	r15, r1
    524e:	30 f0       	brcs	.+12     	; 0x525c <uart_ubr+0xe0>
    5250:	cc 24       	eor	r12, r12
    5252:	ca 94       	dec	r12
    5254:	8f e0       	ldi	r24, 0x0F	; 15
    5256:	d8 2e       	mov	r13, r24
    5258:	e1 2c       	mov	r14, r1
    525a:	f1 2c       	mov	r15, r1
    525c:	c7 01       	movw	r24, r14
    525e:	b6 01       	movw	r22, r12
    5260:	6f 5f       	subi	r22, 0xFF	; 255
    5262:	7f 4f       	sbci	r23, 0xFF	; 255
    5264:	8f 4f       	sbci	r24, 0xFF	; 255
    5266:	9f 4f       	sbci	r25, 0xFF	; 255
    5268:	0e 94 47 e8 	call	0x1d08e	; 0x1d08e <__floatunsisf>
    526c:	a5 01       	movw	r20, r10
    526e:	94 01       	movw	r18, r8
    5270:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    5274:	9b 01       	movw	r18, r22
    5276:	ac 01       	movw	r20, r24
    5278:	60 e8       	ldi	r22, 0x80	; 128
    527a:	76 e9       	ldi	r23, 0x96	; 150
    527c:	88 e9       	ldi	r24, 0x98	; 152
    527e:	9b e4       	ldi	r25, 0x4B	; 75
    5280:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    5284:	0e 94 1b e8 	call	0x1d036	; 0x1d036 <__fixunssfsi>
    5288:	68 83       	st	Y, r22
    528a:	79 83       	std	Y+1, r23	; 0x01
    528c:	8a 83       	std	Y+2, r24	; 0x02
    528e:	9b 83       	std	Y+3, r25	; 0x03
    5290:	c6 01       	movw	r24, r12
    5292:	df 91       	pop	r29
    5294:	cf 91       	pop	r28
    5296:	ff 90       	pop	r15
    5298:	ef 90       	pop	r14
    529a:	df 90       	pop	r13
    529c:	cf 90       	pop	r12
    529e:	bf 90       	pop	r11
    52a0:	af 90       	pop	r10
    52a2:	9f 90       	pop	r9
    52a4:	8f 90       	pop	r8
    52a6:	7f 90       	pop	r7
    52a8:	6f 90       	pop	r6
    52aa:	5f 90       	pop	r5
    52ac:	4f 90       	pop	r4
    52ae:	08 95       	ret

000052b0 <uart_init>:
    52b0:	a6 e0       	ldi	r26, 0x06	; 6
    52b2:	b0 e0       	ldi	r27, 0x00	; 0
    52b4:	ee e5       	ldi	r30, 0x5E	; 94
    52b6:	f9 e2       	ldi	r31, 0x29	; 41
    52b8:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    52bc:	1e 82       	std	Y+6, r1	; 0x06
    52be:	1d 82       	std	Y+5, r1	; 0x05
    52c0:	81 11       	cpse	r24, r1
    52c2:	36 c0       	rjmp	.+108    	; 0x5330 <uart_init+0x80>
    52c4:	cb 01       	movw	r24, r22
    52c6:	ba 01       	movw	r22, r20
    52c8:	9e 01       	movw	r18, r28
    52ca:	2f 5f       	subi	r18, 0xFF	; 255
    52cc:	3f 4f       	sbci	r19, 0xFF	; 255
    52ce:	ae 01       	movw	r20, r28
    52d0:	4b 5f       	subi	r20, 0xFB	; 251
    52d2:	5f 4f       	sbci	r21, 0xFF	; 255
    52d4:	53 df       	rcall	.-346    	; 0x517c <uart_ubr>
    52d6:	f8 94       	cli
    52d8:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    52dc:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    52e0:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    52e4:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    52e8:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    52ec:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    52f0:	78 94       	sei
    52f2:	f8 94       	cli
    52f4:	58 9a       	sbi	0x0b, 0	; 11
    52f6:	59 9a       	sbi	0x0b, 1	; 11
    52f8:	50 98       	cbi	0x0a, 0	; 10
    52fa:	51 9a       	sbi	0x0a, 1	; 10
    52fc:	28 e9       	ldi	r18, 0x98	; 152
    52fe:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5302:	2d 81       	ldd	r18, Y+5	; 0x05
    5304:	3e 81       	ldd	r19, Y+6	; 0x06
    5306:	23 2b       	or	r18, r19
    5308:	19 f0       	breq	.+6      	; 0x5310 <uart_init+0x60>
    530a:	22 e0       	ldi	r18, 0x02	; 2
    530c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5310:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5314:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5318:	78 94       	sei
    531a:	61 e5       	ldi	r22, 0x51	; 81
    531c:	7a e2       	ldi	r23, 0x2A	; 42
    531e:	86 e6       	ldi	r24, 0x66	; 102
    5320:	9a e2       	ldi	r25, 0x2A	; 42
    5322:	0e 94 c0 78 	call	0xf180	; 0xf180 <fdevopen>
    5326:	69 81       	ldd	r22, Y+1	; 0x01
    5328:	7a 81       	ldd	r23, Y+2	; 0x02
    532a:	8b 81       	ldd	r24, Y+3	; 0x03
    532c:	9c 81       	ldd	r25, Y+4	; 0x04
    532e:	03 c0       	rjmp	.+6      	; 0x5336 <uart_init+0x86>
    5330:	60 e0       	ldi	r22, 0x00	; 0
    5332:	70 e0       	ldi	r23, 0x00	; 0
    5334:	cb 01       	movw	r24, r22
    5336:	26 96       	adiw	r28, 0x06	; 6
    5338:	e2 e0       	ldi	r30, 0x02	; 2
    533a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000533e <uart_rx_interrupt>:
    533e:	cf 93       	push	r28
    5340:	df 93       	push	r29
    5342:	27 e5       	ldi	r18, 0x57	; 87
    5344:	82 9f       	mul	r24, r18
    5346:	c0 01       	movw	r24, r0
    5348:	11 24       	eor	r1, r1
    534a:	fc 01       	movw	r30, r24
    534c:	e1 51       	subi	r30, 0x11	; 17
    534e:	f6 4e       	sbci	r31, 0xE6	; 230
    5350:	83 81       	ldd	r24, Z+3	; 0x03
    5352:	94 81       	ldd	r25, Z+4	; 0x04
    5354:	80 35       	cpi	r24, 0x50	; 80
    5356:	91 05       	cpc	r25, r1
    5358:	84 f4       	brge	.+32     	; 0x537a <uart_rx_interrupt+0x3c>
    535a:	30 81       	ld	r19, Z
    535c:	21 e0       	ldi	r18, 0x01	; 1
    535e:	23 0f       	add	r18, r19
    5360:	20 83       	st	Z, r18
    5362:	ef 01       	movw	r28, r30
    5364:	c3 0f       	add	r28, r19
    5366:	d1 1d       	adc	r29, r1
    5368:	6f 77       	andi	r22, 0x7F	; 127
    536a:	6e 83       	std	Y+6, r22	; 0x06
    536c:	01 96       	adiw	r24, 0x01	; 1
    536e:	94 83       	std	Z+4, r25	; 0x04
    5370:	83 83       	std	Z+3, r24	; 0x03
    5372:	20 35       	cpi	r18, 0x50	; 80
    5374:	28 f0       	brcs	.+10     	; 0x5380 <uart_rx_interrupt+0x42>
    5376:	10 82       	st	Z, r1
    5378:	03 c0       	rjmp	.+6      	; 0x5380 <uart_rx_interrupt+0x42>
    537a:	85 81       	ldd	r24, Z+5	; 0x05
    537c:	81 60       	ori	r24, 0x01	; 1
    537e:	85 83       	std	Z+5, r24	; 0x05
    5380:	df 91       	pop	r29
    5382:	cf 91       	pop	r28
    5384:	08 95       	ret

00005386 <__vector_20>:
    5386:	1f 92       	push	r1
    5388:	0f 92       	push	r0
    538a:	0f b6       	in	r0, 0x3f	; 63
    538c:	0f 92       	push	r0
    538e:	11 24       	eor	r1, r1
    5390:	0b b6       	in	r0, 0x3b	; 59
    5392:	0f 92       	push	r0
    5394:	2f 93       	push	r18
    5396:	3f 93       	push	r19
    5398:	4f 93       	push	r20
    539a:	5f 93       	push	r21
    539c:	6f 93       	push	r22
    539e:	7f 93       	push	r23
    53a0:	8f 93       	push	r24
    53a2:	9f 93       	push	r25
    53a4:	af 93       	push	r26
    53a6:	bf 93       	push	r27
    53a8:	ef 93       	push	r30
    53aa:	ff 93       	push	r31
    53ac:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    53b0:	80 e0       	ldi	r24, 0x00	; 0
    53b2:	c5 df       	rcall	.-118    	; 0x533e <uart_rx_interrupt>
    53b4:	ff 91       	pop	r31
    53b6:	ef 91       	pop	r30
    53b8:	bf 91       	pop	r27
    53ba:	af 91       	pop	r26
    53bc:	9f 91       	pop	r25
    53be:	8f 91       	pop	r24
    53c0:	7f 91       	pop	r23
    53c2:	6f 91       	pop	r22
    53c4:	5f 91       	pop	r21
    53c6:	4f 91       	pop	r20
    53c8:	3f 91       	pop	r19
    53ca:	2f 91       	pop	r18
    53cc:	0f 90       	pop	r0
    53ce:	0b be       	out	0x3b, r0	; 59
    53d0:	0f 90       	pop	r0
    53d2:	0f be       	out	0x3f, r0	; 63
    53d4:	0f 90       	pop	r0
    53d6:	1f 90       	pop	r1
    53d8:	18 95       	reti

000053da <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    53da:	81 11       	cpse	r24, r1
    53dc:	07 c0       	rjmp	.+14     	; 0x53ec <uart_rx_count+0x12>
        return(EOF);

    cli();
    53de:	f8 94       	cli

    count = uarts[uart].rx_count;
    53e0:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <uarts+0x3>
    53e4:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <uarts+0x4>

    sei();
    53e8:	78 94       	sei

    return (count );
    53ea:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    53f0:	08 95       	ret

000053f2 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    53f2:	81 11       	cpse	r24, r1
    53f4:	21 c0       	rjmp	.+66     	; 0x5438 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    53f6:	80 e0       	ldi	r24, 0x00	; 0
    53f8:	f0 df       	rcall	.-32     	; 0x53da <uart_rx_count>
    53fa:	18 16       	cp	r1, r24
    53fc:	19 06       	cpc	r1, r25
    53fe:	dc f7       	brge	.-10     	; 0x53f6 <uart_get_tail+0x4>
        ;

    cli();
    5400:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5402:	e0 91 f0 19 	lds	r30, 0x19F0	; 0x8019f0 <uarts+0x1>
    5406:	91 e0       	ldi	r25, 0x01	; 1
    5408:	9e 0f       	add	r25, r30
    540a:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <uarts+0x1>
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	e1 51       	subi	r30, 0x11	; 17
    5412:	f6 4e       	sbci	r31, 0xE6	; 230
    5414:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5416:	90 35       	cpi	r25, 0x50	; 80
    5418:	10 f0       	brcs	.+4      	; 0x541e <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    541a:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    uarts[uart].rx_count--;
    541e:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <uarts+0x3>
    5422:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <uarts+0x4>
    5426:	21 50       	subi	r18, 0x01	; 1
    5428:	31 09       	sbc	r19, r1
    542a:	30 93 f3 19 	sts	0x19F3, r19	; 0x8019f3 <uarts+0x4>
    542e:	20 93 f2 19 	sts	0x19F2, r18	; 0x8019f2 <uarts+0x3>
    sei();
    5432:	78 94       	sei

    return (c & 0xff);
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5438:	8f ef       	ldi	r24, 0xFF	; 255
    543a:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    543c:	08 95       	ret

0000543e <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    543e:	d9 df       	rcall	.-78     	; 0x53f2 <uart_get_tail>
}
    5440:	99 27       	eor	r25, r25
    5442:	08 95       	ret

00005444 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    5444:	61 11       	cpse	r22, r1
    5446:	09 c0       	rjmp	.+18     	; 0x545a <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5448:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    544c:	25 ff       	sbrs	r18, 5
    544e:	fc cf       	rjmp	.-8      	; 0x5448 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    5450:	28 2f       	mov	r18, r24
    5452:	2f 77       	andi	r18, 0x7F	; 127
    5454:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    5458:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    545a:	61 30       	cpi	r22, 0x01	; 1
    545c:	49 f4       	brne	.+18     	; 0x5470 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    545e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5462:	25 ff       	sbrs	r18, 5
    5464:	fc cf       	rjmp	.-8      	; 0x545e <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    5466:	28 2f       	mov	r18, r24
    5468:	2f 77       	andi	r18, 0x7F	; 127
    546a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    546e:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    5470:	8f ef       	ldi	r24, 0xFF	; 255
    5472:	9f ef       	ldi	r25, 0xFF	; 255
}
    5474:	08 95       	ret

00005476 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5476:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    5478:	81 11       	cpse	r24, r1
    547a:	0f c0       	rjmp	.+30     	; 0x549a <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    547c:	e0 df       	rcall	.-64     	; 0x543e <uart_rx_byte>
    547e:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    5480:	60 e0       	ldi	r22, 0x00	; 0
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	df df       	rcall	.-66     	; 0x5444 <uart_tx_byte>
    if(c == '\r')
    5486:	cd 30       	cpi	r28, 0x0D	; 13
    5488:	29 f4       	brne	.+10     	; 0x5494 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    548a:	60 e0       	ldi	r22, 0x00	; 0
    548c:	8a e0       	ldi	r24, 0x0A	; 10
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	d9 df       	rcall	.-78     	; 0x5444 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    5492:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    5494:	8c 2f       	mov	r24, r28
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	02 c0       	rjmp	.+4      	; 0x549e <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    549a:	8f ef       	ldi	r24, 0xFF	; 255
    549c:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    549e:	cf 91       	pop	r28
    54a0:	08 95       	ret

000054a2 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    54a2:	80 e0       	ldi	r24, 0x00	; 0
    54a4:	e8 cf       	rjmp	.-48     	; 0x5476 <uart_getchar>
}
    54a6:	08 95       	ret

000054a8 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    54a8:	1f 93       	push	r17
    54aa:	cf 93       	push	r28
    54ac:	df 93       	push	r29
    54ae:	ec 01       	movw	r28, r24
    54b0:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    54b2:	c8 df       	rcall	.-112    	; 0x5444 <uart_tx_byte>

    if( c == '\n' )
    54b4:	ca 30       	cpi	r28, 0x0A	; 10
    54b6:	d1 05       	cpc	r29, r1
    54b8:	21 f4       	brne	.+8      	; 0x54c2 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    54ba:	61 2f       	mov	r22, r17
    54bc:	8d e0       	ldi	r24, 0x0D	; 13
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	c1 df       	rcall	.-126    	; 0x5444 <uart_tx_byte>

    return(c);
}
    54c2:	ce 01       	movw	r24, r28
    54c4:	df 91       	pop	r29
    54c6:	cf 91       	pop	r28
    54c8:	1f 91       	pop	r17
    54ca:	08 95       	ret

000054cc <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    54cc:	cf 93       	push	r28
    54ce:	df 93       	push	r29
    54d0:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    54d2:	60 e0       	ldi	r22, 0x00	; 0
    54d4:	70 e0       	ldi	r23, 0x00	; 0
    54d6:	e8 df       	rcall	.-48     	; 0x54a8 <uart_putchar>
    return(c);
}
    54d8:	ce 01       	movw	r24, r28
    54da:	df 91       	pop	r29
    54dc:	cf 91       	pop	r28
    54de:	08 95       	ret

000054e0 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    54e0:	7c cf       	rjmp	.-264    	; 0x53da <uart_rx_count>
}
    54e2:	08 95       	ret

000054e4 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    54e4:	cf 92       	push	r12
    54e6:	df 92       	push	r13
    54e8:	ef 92       	push	r14
    54ea:	ff 92       	push	r15
    54ec:	6b 01       	movw	r12, r22
    54ee:	7c 01       	movw	r14, r24
    54f0:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <SPI0_Speed_value>
    54f4:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <SPI0_Speed_value+0x1>
    54f8:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <SPI0_Speed_value+0x2>
    54fc:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <SPI0_Speed_value+0x3>
    5500:	8c 15       	cp	r24, r12
    5502:	9d 05       	cpc	r25, r13
    5504:	ae 05       	cpc	r26, r14
    5506:	bf 05       	cpc	r27, r15
    5508:	09 f4       	brne	.+2      	; 0x550c <SPI0_Speed+0x28>
    550a:	4e c0       	rjmp	.+156    	; 0x55a8 <SPI0_Speed+0xc4>
    550c:	60 e0       	ldi	r22, 0x00	; 0
    550e:	7d e2       	ldi	r23, 0x2D	; 45
    5510:	81 e3       	ldi	r24, 0x31	; 49
    5512:	91 e0       	ldi	r25, 0x01	; 1
    5514:	a7 01       	movw	r20, r14
    5516:	96 01       	movw	r18, r12
    5518:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    551c:	20 38       	cpi	r18, 0x80	; 128
    551e:	31 05       	cpc	r19, r1
    5520:	41 05       	cpc	r20, r1
    5522:	51 05       	cpc	r21, r1
    5524:	28 f4       	brcc	.+10     	; 0x5530 <SPI0_Speed+0x4c>
    5526:	20 34       	cpi	r18, 0x40	; 64
    5528:	31 05       	cpc	r19, r1
    552a:	41 05       	cpc	r20, r1
    552c:	51 05       	cpc	r21, r1
    552e:	30 f0       	brcs	.+12     	; 0x553c <SPI0_Speed+0x58>
    5530:	8d b5       	in	r24, 0x2d	; 45
    5532:	8e 7f       	andi	r24, 0xFE	; 254
    5534:	8d bd       	out	0x2d, r24	; 45
    5536:	8c b5       	in	r24, 0x2c	; 44
    5538:	82 60       	ori	r24, 0x02	; 2
    553a:	1b c0       	rjmp	.+54     	; 0x5572 <SPI0_Speed+0x8e>
    553c:	8d b5       	in	r24, 0x2d	; 45
    553e:	20 32       	cpi	r18, 0x20	; 32
    5540:	31 05       	cpc	r19, r1
    5542:	41 05       	cpc	r20, r1
    5544:	51 05       	cpc	r21, r1
    5546:	28 f0       	brcs	.+10     	; 0x5552 <SPI0_Speed+0x6e>
    5548:	81 60       	ori	r24, 0x01	; 1
    554a:	8d bd       	out	0x2d, r24	; 45
    554c:	8c b5       	in	r24, 0x2c	; 44
    554e:	82 60       	ori	r24, 0x02	; 2
    5550:	1f c0       	rjmp	.+62     	; 0x5590 <SPI0_Speed+0xac>
    5552:	20 31       	cpi	r18, 0x10	; 16
    5554:	31 05       	cpc	r19, r1
    5556:	41 05       	cpc	r20, r1
    5558:	51 05       	cpc	r21, r1
    555a:	10 f0       	brcs	.+4      	; 0x5560 <SPI0_Speed+0x7c>
    555c:	8e 7f       	andi	r24, 0xFE	; 254
    555e:	06 c0       	rjmp	.+12     	; 0x556c <SPI0_Speed+0x88>
    5560:	28 30       	cpi	r18, 0x08	; 8
    5562:	31 05       	cpc	r19, r1
    5564:	41 05       	cpc	r20, r1
    5566:	51 05       	cpc	r21, r1
    5568:	40 f0       	brcs	.+16     	; 0x557a <SPI0_Speed+0x96>
    556a:	81 60       	ori	r24, 0x01	; 1
    556c:	8d bd       	out	0x2d, r24	; 45
    556e:	8c b5       	in	r24, 0x2c	; 44
    5570:	8d 7f       	andi	r24, 0xFD	; 253
    5572:	8c bd       	out	0x2c, r24	; 44
    5574:	8c b5       	in	r24, 0x2c	; 44
    5576:	81 60       	ori	r24, 0x01	; 1
    5578:	0e c0       	rjmp	.+28     	; 0x5596 <SPI0_Speed+0xb2>
    557a:	24 30       	cpi	r18, 0x04	; 4
    557c:	31 05       	cpc	r19, r1
    557e:	41 05       	cpc	r20, r1
    5580:	51 05       	cpc	r21, r1
    5582:	10 f0       	brcs	.+4      	; 0x5588 <SPI0_Speed+0xa4>
    5584:	8e 7f       	andi	r24, 0xFE	; 254
    5586:	01 c0       	rjmp	.+2      	; 0x558a <SPI0_Speed+0xa6>
    5588:	81 60       	ori	r24, 0x01	; 1
    558a:	8d bd       	out	0x2d, r24	; 45
    558c:	8c b5       	in	r24, 0x2c	; 44
    558e:	8d 7f       	andi	r24, 0xFD	; 253
    5590:	8c bd       	out	0x2c, r24	; 44
    5592:	8c b5       	in	r24, 0x2c	; 44
    5594:	8e 7f       	andi	r24, 0xFE	; 254
    5596:	8c bd       	out	0x2c, r24	; 44
    5598:	c0 92 51 17 	sts	0x1751, r12	; 0x801751 <SPI0_Speed_value>
    559c:	d0 92 52 17 	sts	0x1752, r13	; 0x801752 <SPI0_Speed_value+0x1>
    55a0:	e0 92 53 17 	sts	0x1753, r14	; 0x801753 <SPI0_Speed_value+0x2>
    55a4:	f0 92 54 17 	sts	0x1754, r15	; 0x801754 <SPI0_Speed_value+0x3>
    55a8:	ff 90       	pop	r15
    55aa:	ef 90       	pop	r14
    55ac:	df 90       	pop	r13
    55ae:	cf 90       	pop	r12
    55b0:	08 95       	ret

000055b2 <SPI0_Mode>:
    55b2:	cf 93       	push	r28
    55b4:	df 93       	push	r29
    55b6:	00 d0       	rcall	.+0      	; 0x55b8 <SPI0_Mode+0x6>
    55b8:	00 d0       	rcall	.+0      	; 0x55ba <SPI0_Mode+0x8>
    55ba:	1f 92       	push	r1
    55bc:	ec 01       	movw	r28, r24
    55be:	81 30       	cpi	r24, 0x01	; 1
    55c0:	91 05       	cpc	r25, r1
    55c2:	71 f0       	breq	.+28     	; 0x55e0 <SPI0_Mode+0x2e>
    55c4:	2c f4       	brge	.+10     	; 0x55d0 <SPI0_Mode+0x1e>
    55c6:	89 2b       	or	r24, r25
    55c8:	c1 f4       	brne	.+48     	; 0x55fa <SPI0_Mode+0x48>
    55ca:	8c b5       	in	r24, 0x2c	; 44
    55cc:	87 7f       	andi	r24, 0xF7	; 247
    55ce:	11 c0       	rjmp	.+34     	; 0x55f2 <SPI0_Mode+0x40>
    55d0:	82 30       	cpi	r24, 0x02	; 2
    55d2:	91 05       	cpc	r25, r1
    55d4:	61 f0       	breq	.+24     	; 0x55ee <SPI0_Mode+0x3c>
    55d6:	03 97       	sbiw	r24, 0x03	; 3
    55d8:	81 f4       	brne	.+32     	; 0x55fa <SPI0_Mode+0x48>
    55da:	8c b5       	in	r24, 0x2c	; 44
    55dc:	88 60       	ori	r24, 0x08	; 8
    55de:	02 c0       	rjmp	.+4      	; 0x55e4 <SPI0_Mode+0x32>
    55e0:	8c b5       	in	r24, 0x2c	; 44
    55e2:	87 7f       	andi	r24, 0xF7	; 247
    55e4:	8c bd       	out	0x2c, r24	; 44
    55e6:	8c b5       	in	r24, 0x2c	; 44
    55e8:	84 60       	ori	r24, 0x04	; 4
    55ea:	8c bd       	out	0x2c, r24	; 44
    55ec:	12 c0       	rjmp	.+36     	; 0x5612 <SPI0_Mode+0x60>
    55ee:	8c b5       	in	r24, 0x2c	; 44
    55f0:	88 60       	ori	r24, 0x08	; 8
    55f2:	8c bd       	out	0x2c, r24	; 44
    55f4:	8c b5       	in	r24, 0x2c	; 44
    55f6:	8b 7f       	andi	r24, 0xFB	; 251
    55f8:	f8 cf       	rjmp	.-16     	; 0x55ea <SPI0_Mode+0x38>
    55fa:	ed b7       	in	r30, 0x3d	; 61
    55fc:	fe b7       	in	r31, 0x3e	; 62
    55fe:	d5 83       	std	Z+5, r29	; 0x05
    5600:	c4 83       	std	Z+4, r28	; 0x04
    5602:	84 e1       	ldi	r24, 0x14	; 20
    5604:	93 e0       	ldi	r25, 0x03	; 3
    5606:	a0 e0       	ldi	r26, 0x00	; 0
    5608:	81 83       	std	Z+1, r24	; 0x01
    560a:	92 83       	std	Z+2, r25	; 0x02
    560c:	a3 83       	std	Z+3, r26	; 0x03
    560e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    5612:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <SPI0_Mode_value+0x1>
    5616:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <SPI0_Mode_value>
    561a:	cd b7       	in	r28, 0x3d	; 61
    561c:	de b7       	in	r29, 0x3e	; 62
    561e:	25 96       	adiw	r28, 0x05	; 5
    5620:	e2 e0       	ldi	r30, 0x02	; 2
    5622:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00005626 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5626:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5628:	0d b4       	in	r0, 0x2d	; 45
    562a:	07 fe       	sbrs	r0, 7
    562c:	fd cf       	rjmp	.-6      	; 0x5628 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    562e:	8e b5       	in	r24, 0x2e	; 46
}
    5630:	08 95       	ret

00005632 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5632:	cf 92       	push	r12
    5634:	df 92       	push	r13
    5636:	ef 92       	push	r14
    5638:	ff 92       	push	r15
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	1f 92       	push	r1
    5640:	cd b7       	in	r28, 0x3d	; 61
    5642:	de b7       	in	r29, 0x3e	; 62
    5644:	6b 01       	movw	r12, r22
    5646:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5648:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    564a:	2f 9a       	sbi	0x05, 7	; 5
    564c:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    564e:	2d 9a       	sbi	0x05, 5	; 5
    5650:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5652:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5654:	2c 98       	cbi	0x05, 4	; 5
    5656:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5658:	8c b5       	in	r24, 0x2c	; 44
    565a:	80 61       	ori	r24, 0x10	; 16
    565c:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    565e:	8c b5       	in	r24, 0x2c	; 44
    5660:	80 64       	ori	r24, 0x40	; 64
    5662:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    5664:	8d b5       	in	r24, 0x2d	; 45
    5666:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    5668:	8e b5       	in	r24, 0x2e	; 46
    566a:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    566c:	80 e0       	ldi	r24, 0x00	; 0
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	a0 df       	rcall	.-192    	; 0x55b2 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    5672:	c7 01       	movw	r24, r14
    5674:	b6 01       	movw	r22, r12
    5676:	36 df       	rcall	.-404    	; 0x54e4 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5678:	8f ef       	ldi	r24, 0xFF	; 255
    567a:	d5 df       	rcall	.-86     	; 0x5626 <SPI0_TXRX_Byte>
    567c:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    567e:	df 91       	pop	r29
    5680:	cf 91       	pop	r28
    5682:	ff 90       	pop	r15
    5684:	ef 90       	pop	r14
    5686:	df 90       	pop	r13
    5688:	cf 90       	pop	r12
    568a:	08 95       	ret

0000568c <SPI0_TX>:
    568c:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    568e:	1f 93       	push	r17
    5690:	cf 93       	push	r28
    5692:	df 93       	push	r29
    5694:	8c 01       	movw	r16, r24
    5696:	eb 01       	movw	r28, r22

    while(count > 0)
    5698:	1c 16       	cp	r1, r28
    569a:	1d 06       	cpc	r1, r29
    569c:	34 f4       	brge	.+12     	; 0x56aa <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    569e:	f8 01       	movw	r30, r16
    56a0:	81 91       	ld	r24, Z+
    56a2:	8f 01       	movw	r16, r30
    56a4:	c0 df       	rcall	.-128    	; 0x5626 <SPI0_TXRX_Byte>
        ++data;
        --count;
    56a6:	21 97       	sbiw	r28, 0x01	; 1
    56a8:	f7 cf       	rjmp	.-18     	; 0x5698 <SPI0_TX+0xc>
    }
}
    56aa:	df 91       	pop	r29
    56ac:	cf 91       	pop	r28
    56ae:	1f 91       	pop	r17
    56b0:	0f 91       	pop	r16
    56b2:	08 95       	ret

000056b4 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    56b4:	0f 93       	push	r16
    56b6:	1f 93       	push	r17
    56b8:	cf 93       	push	r28
    56ba:	df 93       	push	r29
    56bc:	8c 01       	movw	r16, r24
    56be:	eb 01       	movw	r28, r22

    while(count > 0)
    56c0:	1c 16       	cp	r1, r28
    56c2:	1d 06       	cpc	r1, r29
    56c4:	44 f4       	brge	.+16     	; 0x56d6 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    56c6:	f8 01       	movw	r30, r16
    56c8:	80 81       	ld	r24, Z
    56ca:	ad df       	rcall	.-166    	; 0x5626 <SPI0_TXRX_Byte>
    56cc:	f8 01       	movw	r30, r16
    56ce:	81 93       	st	Z+, r24
    56d0:	8f 01       	movw	r16, r30
        ++data;
        --count;
    56d2:	21 97       	sbiw	r28, 0x01	; 1
    56d4:	f5 cf       	rjmp	.-22     	; 0x56c0 <SPI0_TXRX+0xc>
    }
}
    56d6:	df 91       	pop	r29
    56d8:	cf 91       	pop	r28
    56da:	1f 91       	pop	r17
    56dc:	0f 91       	pop	r16
    56de:	08 95       	ret

000056e0 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    56e0:	0f 93       	push	r16
    56e2:	1f 93       	push	r17
    56e4:	cf 93       	push	r28
    56e6:	df 93       	push	r29
    56e8:	8c 01       	movw	r16, r24
    56ea:	eb 01       	movw	r28, r22

    while(count > 0)
    56ec:	1c 16       	cp	r1, r28
    56ee:	1d 06       	cpc	r1, r29
    56f0:	3c f4       	brge	.+14     	; 0x5700 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    56f2:	8f ef       	ldi	r24, 0xFF	; 255
    56f4:	98 df       	rcall	.-208    	; 0x5626 <SPI0_TXRX_Byte>
    56f6:	f8 01       	movw	r30, r16
    56f8:	81 93       	st	Z+, r24
    56fa:	8f 01       	movw	r16, r30
        ++data;
        --count;
    56fc:	21 97       	sbiw	r28, 0x01	; 1
    56fe:	f6 cf       	rjmp	.-20     	; 0x56ec <SPI0_RX+0xc>
    }
}
    5700:	df 91       	pop	r29
    5702:	cf 91       	pop	r28
    5704:	1f 91       	pop	r17
    5706:	0f 91       	pop	r16
    5708:	08 95       	ret

0000570a <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    570a:	2f b7       	in	r18, 0x3f	; 63
    570c:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    5710:	81 11       	cpse	r24, r1
    5712:	04 c0       	rjmp	.+8      	; 0x571c <i2c_timer+0x12>
    5714:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5718:	81 11       	cpse	r24, r1
    571a:	0b c0       	rjmp	.+22     	; 0x5732 <i2c_timer+0x28>
    571c:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x4>
    5720:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x5>
    5724:	00 97       	sbiw	r24, 0x00	; 0
    5726:	29 f0       	breq	.+10     	; 0x5732 <i2c_timer+0x28>
    5728:	01 97       	sbiw	r24, 0x01	; 1
    572a:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <i2c+0x5>
    572e:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <i2c+0x4>
    5732:	2f bf       	out	0x3f, r18	; 63
    5734:	08 95       	ret

00005736 <i2c_check_op>:
    5736:	ad b7       	in	r26, 0x3d	; 61
    5738:	be b7       	in	r27, 0x3e	; 62
    573a:	17 97       	sbiw	r26, 0x07	; 7
    573c:	0f b6       	in	r0, 0x3f	; 63
    573e:	f8 94       	cli
    5740:	be bf       	out	0x3e, r27	; 62
    5742:	0f be       	out	0x3f, r0	; 63
    5744:	ad bf       	out	0x3d, r26	; 61
    5746:	28 2f       	mov	r18, r24
    5748:	08 2e       	mov	r0, r24
    574a:	00 0c       	add	r0, r0
    574c:	33 0b       	sbc	r19, r19
    574e:	80 31       	cpi	r24, 0x10	; 16
    5750:	88 f0       	brcs	.+34     	; 0x5774 <i2c_check_op+0x3e>
    5752:	80 e1       	ldi	r24, 0x10	; 16
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	ed b7       	in	r30, 0x3d	; 61
    5758:	fe b7       	in	r31, 0x3e	; 62
    575a:	97 83       	std	Z+7, r25	; 0x07
    575c:	86 83       	std	Z+6, r24	; 0x06
    575e:	35 83       	std	Z+5, r19	; 0x05
    5760:	24 83       	std	Z+4, r18	; 0x04
    5762:	89 e2       	ldi	r24, 0x29	; 41
    5764:	94 e0       	ldi	r25, 0x04	; 4
    5766:	a0 e0       	ldi	r26, 0x00	; 0
    5768:	81 83       	std	Z+1, r24	; 0x01
    576a:	92 83       	std	Z+2, r25	; 0x02
    576c:	a3 83       	std	Z+3, r26	; 0x03
    576e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    5772:	24 c0       	rjmp	.+72     	; 0x57bc <i2c_check_op+0x86>
    5774:	f9 01       	movw	r30, r18
    5776:	ee 0f       	add	r30, r30
    5778:	ff 1f       	adc	r31, r31
    577a:	ea 5a       	subi	r30, 0xAA	; 170
    577c:	f8 4e       	sbci	r31, 0xE8	; 232
    577e:	01 90       	ld	r0, Z+
    5780:	f0 81       	ld	r31, Z
    5782:	e0 2d       	mov	r30, r0
    5784:	30 97       	sbiw	r30, 0x00	; 0
    5786:	d1 f0       	breq	.+52     	; 0x57bc <i2c_check_op+0x86>
    5788:	80 85       	ldd	r24, Z+8	; 0x08
    578a:	91 85       	ldd	r25, Z+9	; 0x09
    578c:	89 2b       	or	r24, r25
    578e:	39 f4       	brne	.+14     	; 0x579e <i2c_check_op+0x68>
    5790:	ed b7       	in	r30, 0x3d	; 61
    5792:	fe b7       	in	r31, 0x3e	; 62
    5794:	35 83       	std	Z+5, r19	; 0x05
    5796:	24 83       	std	Z+4, r18	; 0x04
    5798:	80 e1       	ldi	r24, 0x10	; 16
    579a:	94 e0       	ldi	r25, 0x04	; 4
    579c:	09 c0       	rjmp	.+18     	; 0x57b0 <i2c_check_op+0x7a>
    579e:	86 81       	ldd	r24, Z+6	; 0x06
    57a0:	81 11       	cpse	r24, r1
    57a2:	0e c0       	rjmp	.+28     	; 0x57c0 <i2c_check_op+0x8a>
    57a4:	ed b7       	in	r30, 0x3d	; 61
    57a6:	fe b7       	in	r31, 0x3e	; 62
    57a8:	35 83       	std	Z+5, r19	; 0x05
    57aa:	24 83       	std	Z+4, r18	; 0x04
    57ac:	8a ef       	ldi	r24, 0xFA	; 250
    57ae:	93 e0       	ldi	r25, 0x03	; 3
    57b0:	a0 e0       	ldi	r26, 0x00	; 0
    57b2:	81 83       	std	Z+1, r24	; 0x01
    57b4:	92 83       	std	Z+2, r25	; 0x02
    57b6:	a3 83       	std	Z+3, r26	; 0x03
    57b8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    57bc:	80 e0       	ldi	r24, 0x00	; 0
    57be:	01 c0       	rjmp	.+2      	; 0x57c2 <i2c_check_op+0x8c>
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	ad b7       	in	r26, 0x3d	; 61
    57c4:	be b7       	in	r27, 0x3e	; 62
    57c6:	17 96       	adiw	r26, 0x07	; 7
    57c8:	0f b6       	in	r0, 0x3f	; 63
    57ca:	f8 94       	cli
    57cc:	be bf       	out	0x3e, r27	; 62
    57ce:	0f be       	out	0x3f, r0	; 63
    57d0:	ad bf       	out	0x3d, r26	; 61
    57d2:	08 95       	ret

000057d4 <i2c_task_init>:
    57d4:	8f b7       	in	r24, 0x3f	; 63
    57d6:	f8 94       	cli
    57d8:	e6 e5       	ldi	r30, 0x56	; 86
    57da:	f7 e1       	ldi	r31, 0x17	; 23
    57dc:	11 92       	st	Z+, r1
    57de:	11 92       	st	Z+, r1
    57e0:	97 e1       	ldi	r25, 0x17	; 23
    57e2:	e6 37       	cpi	r30, 0x76	; 118
    57e4:	f9 07       	cpc	r31, r25
    57e6:	d1 f7       	brne	.-12     	; 0x57dc <i2c_task_init+0x8>
    57e8:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    57ec:	91 e0       	ldi	r25, 0x01	; 1
    57ee:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <i2c_task+0x2>
    57f2:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>
    57f6:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
    57fa:	8f bf       	out	0x3f, r24	; 63
    57fc:	08 95       	ret

000057fe <i2c_task_op_add>:
    57fe:	ef 92       	push	r14
    5800:	ff 92       	push	r15
    5802:	0f 93       	push	r16
    5804:	1f 93       	push	r17
    5806:	cf 93       	push	r28
    5808:	df 93       	push	r29
    580a:	d8 2f       	mov	r29, r24
    580c:	c6 2f       	mov	r28, r22
    580e:	7a 01       	movw	r14, r20
    5810:	02 2f       	mov	r16, r18
    5812:	1f b7       	in	r17, 0x3f	; 63
    5814:	6a e0       	ldi	r22, 0x0A	; 10
    5816:	70 e0       	ldi	r23, 0x00	; 0
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	a8 db       	rcall	.-2224   	; 0x4f6e <safecalloc>
    581e:	fc 01       	movw	r30, r24
    5820:	89 2b       	or	r24, r25
    5822:	89 f0       	breq	.+34     	; 0x5846 <i2c_task_op_add+0x48>
    5824:	f8 94       	cli
    5826:	11 82       	std	Z+1, r1	; 0x01
    5828:	12 82       	std	Z+2, r1	; 0x02
    582a:	dd 0f       	add	r29, r29
    582c:	c1 70       	andi	r28, 0x01	; 1
    582e:	cd 2b       	or	r28, r29
    5830:	c0 83       	st	Z, r28
    5832:	8a e0       	ldi	r24, 0x0A	; 10
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	95 83       	std	Z+5, r25	; 0x05
    5838:	84 83       	std	Z+4, r24	; 0x04
    583a:	13 82       	std	Z+3, r1	; 0x03
    583c:	06 83       	std	Z+6, r16	; 0x06
    583e:	17 82       	std	Z+7, r1	; 0x07
    5840:	f1 86       	std	Z+9, r15	; 0x09
    5842:	e0 86       	std	Z+8, r14	; 0x08
    5844:	1f bf       	out	0x3f, r17	; 63
    5846:	cf 01       	movw	r24, r30
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
    584c:	e6 e0       	ldi	r30, 0x06	; 6
    584e:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00005852 <i2c_init>:
    5852:	cf 93       	push	r28
    5854:	00 d0       	rcall	.+0      	; 0x5856 <i2c_init+0x4>
    5856:	1f 92       	push	r1
    5858:	9b 01       	movw	r18, r22
    585a:	ac 01       	movw	r20, r24
    585c:	cf b7       	in	r28, 0x3f	; 63
    585e:	60 e0       	ldi	r22, 0x00	; 0
    5860:	7d e2       	ldi	r23, 0x2D	; 45
    5862:	81 e3       	ldi	r24, 0x31	; 49
    5864:	91 e0       	ldi	r25, 0x01	; 1
    5866:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    586a:	da 01       	movw	r26, r20
    586c:	c9 01       	movw	r24, r18
    586e:	40 97       	sbiw	r24, 0x10	; 16
    5870:	a1 09       	sbc	r26, r1
    5872:	b1 09       	sbc	r27, r1
    5874:	ac 01       	movw	r20, r24
    5876:	bd 01       	movw	r22, r26
    5878:	76 95       	lsr	r23
    587a:	67 95       	ror	r22
    587c:	57 95       	ror	r21
    587e:	47 95       	ror	r20
    5880:	ca 01       	movw	r24, r20
    5882:	88 27       	eor	r24, r24
    5884:	89 2b       	or	r24, r25
    5886:	59 f0       	breq	.+22     	; 0x589e <i2c_init+0x4c>
    5888:	8e ed       	ldi	r24, 0xDE	; 222
    588a:	93 e0       	ldi	r25, 0x03	; 3
    588c:	a0 e0       	ldi	r26, 0x00	; 0
    588e:	ed b7       	in	r30, 0x3d	; 61
    5890:	fe b7       	in	r31, 0x3e	; 62
    5892:	81 83       	std	Z+1, r24	; 0x01
    5894:	92 83       	std	Z+2, r25	; 0x02
    5896:	a3 83       	std	Z+3, r26	; 0x03
    5898:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    589c:	3a c0       	rjmp	.+116    	; 0x5912 <i2c_init+0xc0>
    589e:	f8 94       	cli
    58a0:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    58a4:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    58a8:	81 e0       	ldi	r24, 0x01	; 1
    58aa:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
    58ae:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    58b2:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
    58b6:	40 9a       	sbi	0x08, 0	; 8
    58b8:	41 9a       	sbi	0x08, 1	; 8
    58ba:	84 e8       	ldi	r24, 0x84	; 132
    58bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    58c0:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    58c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    58c8:	8c 7f       	andi	r24, 0xFC	; 252
    58ca:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    58ce:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <i2c_init_status>
    58d2:	81 11       	cpse	r24, r1
    58d4:	1d c0       	rjmp	.+58     	; 0x5910 <i2c_init+0xbe>
    58d6:	e6 e5       	ldi	r30, 0x56	; 86
    58d8:	f7 e1       	ldi	r31, 0x17	; 23
    58da:	11 92       	st	Z+, r1
    58dc:	11 92       	st	Z+, r1
    58de:	27 e1       	ldi	r18, 0x17	; 23
    58e0:	e6 37       	cpi	r30, 0x76	; 118
    58e2:	f2 07       	cpc	r31, r18
    58e4:	d1 f7       	brne	.-12     	; 0x58da <i2c_init+0x88>
    58e6:	61 e0       	ldi	r22, 0x01	; 1
    58e8:	70 e0       	ldi	r23, 0x00	; 0
    58ea:	85 e8       	ldi	r24, 0x85	; 133
    58ec:	9b e2       	ldi	r25, 0x2B	; 43
    58ee:	0e 94 b9 34 	call	0x6972	; 0x6972 <set_timers>
    58f2:	01 96       	adiw	r24, 0x01	; 1
    58f4:	51 f4       	brne	.+20     	; 0x590a <i2c_init+0xb8>
    58f6:	87 ec       	ldi	r24, 0xC7	; 199
    58f8:	93 e0       	ldi	r25, 0x03	; 3
    58fa:	a0 e0       	ldi	r26, 0x00	; 0
    58fc:	ed b7       	in	r30, 0x3d	; 61
    58fe:	fe b7       	in	r31, 0x3e	; 62
    5900:	81 83       	std	Z+1, r24	; 0x01
    5902:	92 83       	std	Z+2, r25	; 0x02
    5904:	a3 83       	std	Z+3, r26	; 0x03
    5906:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	80 93 55 17 	sts	0x1755, r24	; 0x801755 <i2c_init_status>
    5910:	cf bf       	out	0x3f, r28	; 63
    5912:	0f 90       	pop	r0
    5914:	0f 90       	pop	r0
    5916:	0f 90       	pop	r0
    5918:	cf 91       	pop	r28
    591a:	08 95       	ret

0000591c <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    591c:	61 e0       	ldi	r22, 0x01	; 1
    591e:	70 e0       	ldi	r23, 0x00	; 0
    5920:	80 e0       	ldi	r24, 0x00	; 0
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	a5 db       	rcall	.-2230   	; 0x5070 <delayus>
	if(!i2c.enable || i2c.done )
    5926:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    592a:	88 23       	and	r24, r24
    592c:	39 f0       	breq	.+14     	; 0x593c <i2c_done+0x20>
		return(1);
    592e:	81 e0       	ldi	r24, 0x01	; 1
    5930:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5934:	91 11       	cpse	r25, r1
    5936:	03 c0       	rjmp	.+6      	; 0x593e <i2c_done+0x22>
    5938:	80 e0       	ldi	r24, 0x00	; 0
    593a:	08 95       	ret
    593c:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    593e:	08 95       	ret

00005940 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5940:	61 e0       	ldi	r22, 0x01	; 1
    5942:	70 e0       	ldi	r23, 0x00	; 0
    5944:	80 e0       	ldi	r24, 0x00	; 0
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	93 db       	rcall	.-2266   	; 0x5070 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    594a:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    594e:	88 23       	and	r24, r24
    5950:	39 f0       	breq	.+14     	; 0x5960 <i2c_task_done+0x20>
		return(1);
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <i2c_task+0x2>
    5958:	91 11       	cpse	r25, r1
    595a:	03 c0       	rjmp	.+6      	; 0x5962 <i2c_task_done+0x22>
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	08 95       	ret
    5960:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5962:	08 95       	ret

00005964 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    5964:	e6 e4       	ldi	r30, 0x46	; 70
    5966:	fa e1       	ldi	r31, 0x1A	; 26
    5968:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    596a:	81 e0       	ldi	r24, 0x01	; 1
    596c:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    596e:	8a e0       	ldi	r24, 0x0A	; 10
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	95 83       	std	Z+5, r25	; 0x05
    5974:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5976:	85 ea       	ldi	r24, 0xA5	; 165
    5978:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    597c:	08 95       	ret

0000597e <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    597e:	ef 92       	push	r14
    5980:	ff 92       	push	r15
    5982:	0f 93       	push	r16
    5984:	1f 93       	push	r17
    5986:	cf 93       	push	r28
    5988:	df 93       	push	r29
	uint8_t sreg = SREG;
    598a:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    598c:	f8 94       	cli
	i2c_task.done = 0;
    598e:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>
	i2c_task.error = 0;
    5992:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
	i2c_task.ind = 0;
    5996:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    599a:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    599c:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    599e:	ee 24       	eor	r14, r14
    59a0:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    59a2:	0a e0       	ldi	r16, 0x0A	; 10
    59a4:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59a6:	8c 2f       	mov	r24, r28
    59a8:	c6 de       	rcall	.-628    	; 0x5736 <i2c_check_op>
    59aa:	88 23       	and	r24, r24
    59ac:	d1 f0       	breq	.+52     	; 0x59e2 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    59ae:	ec 2f       	mov	r30, r28
    59b0:	ee 0f       	add	r30, r30
    59b2:	ff 0b       	sbc	r31, r31
    59b4:	ea 5a       	subi	r30, 0xAA	; 170
    59b6:	f8 4e       	sbci	r31, 0xE8	; 232
    59b8:	01 90       	ld	r0, Z+
    59ba:	f0 81       	ld	r31, Z
    59bc:	e0 2d       	mov	r30, r0
		o->enable = 1;
    59be:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    59c0:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    59c2:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    59c4:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    59c6:	15 83       	std	Z+5, r17	; 0x05
    59c8:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    59ca:	d1 11       	cpse	r29, r1
    59cc:	07 c0       	rjmp	.+14     	; 0x59dc <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    59ce:	8a e0       	ldi	r24, 0x0A	; 10
    59d0:	a6 e4       	ldi	r26, 0x46	; 70
    59d2:	ba e1       	ldi	r27, 0x1A	; 26
    59d4:	01 90       	ld	r0, Z+
    59d6:	0d 92       	st	X+, r0
    59d8:	8a 95       	dec	r24
    59da:	e1 f7       	brne	.-8      	; 0x59d4 <i2c_task_run+0x56>
    59dc:	cf 5f       	subi	r28, 0xFF	; 255
    59de:	d1 e0       	ldi	r29, 0x01	; 1
    59e0:	e2 cf       	rjmp	.-60     	; 0x59a6 <i2c_task_run+0x28>
		}
	}

	if(run)
    59e2:	dd 23       	and	r29, r29
    59e4:	91 f0       	breq	.+36     	; 0x5a0a <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    59e6:	8c e5       	ldi	r24, 0x5C	; 92
    59e8:	9d e2       	ldi	r25, 0x2D	; 45
    59ea:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <i2c_callback+0x1>
    59ee:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c_callback>

		i2c_task.enable = 1;
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task>
		i2c_task.done = 0;
    59f8:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    59fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a00:	8c 7f       	andi	r24, 0xFC	; 252
    5a02:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5a06:	ae df       	rcall	.-164    	; 0x5964 <i2c_send_start>
    5a08:	15 c0       	rjmp	.+42     	; 0x5a34 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5a0a:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5a0e:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5a12:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5a16:	81 e0       	ldi	r24, 0x01	; 1
    5a18:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5a1c:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
        i2c.enable = 0;
    5a20:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5a24:	84 e8       	ldi	r24, 0x84	; 132
    5a26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a2a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a2e:	8c 7f       	andi	r24, 0xFC	; 252
    5a30:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5a34:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5a38:	ff be       	out	0x3f, r15	; 63

}
    5a3a:	cd b7       	in	r28, 0x3d	; 61
    5a3c:	de b7       	in	r29, 0x3e	; 62
    5a3e:	e6 e0       	ldi	r30, 0x06	; 6
    5a40:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00005a44 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5a44:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5a46:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5a48:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5a4c:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

	i2c.enable = 1; // Enabled
    5a50:	31 e0       	ldi	r19, 0x01	; 1
    5a52:	30 93 47 1a 	sts	0x1A47, r19	; 0x801a47 <i2c+0x1>
	i2c.done = 0;
    5a56:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5a5a:	88 0f       	add	r24, r24
    5a5c:	61 70       	andi	r22, 0x01	; 1
    5a5e:	68 2b       	or	r22, r24
    5a60:	60 93 46 1a 	sts	0x1A46, r22	; 0x801a46 <i2c>
	i2c.flags = 0;
    5a64:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
    i2c.len = len;
    5a68:	20 93 4c 1a 	sts	0x1A4C, r18	; 0x801a4c <i2c+0x6>
    i2c.ind = 0;
    5a6c:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
    i2c.buf = buf;
    5a70:	50 93 4f 1a 	sts	0x1A4F, r21	; 0x801a4f <i2c+0x9>
    5a74:	40 93 4e 1a 	sts	0x1A4E, r20	; 0x801a4e <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a78:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a7c:	8c 7f       	andi	r24, 0xFC	; 252
    5a7e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5a82:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5a86:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5a88:	6d df       	rcall	.-294    	; 0x5964 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5a8a:	48 df       	rcall	.-368    	; 0x591c <i2c_done>
    5a8c:	88 23       	and	r24, r24
    5a8e:	e9 f3       	breq	.-6      	; 0x5a8a <i2c_fn+0x46>
    5a90:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5a92:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <i2c+0x3>
    5a96:	91 11       	cpse	r25, r1
    5a98:	80 e0       	ldi	r24, 0x00	; 0
    5a9a:	08 95       	ret

00005a9c <i2c_send_stop>:
}
    5a9c:	e6 e4       	ldi	r30, 0x46	; 70
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5a9e:	fa e1       	ldi	r31, 0x1A	; 26
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5aa4:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5aa6:	84 e9       	ldi	r24, 0x94	; 148
    5aa8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5aac:	6a e0       	ldi	r22, 0x0A	; 10
    5aae:	70 e0       	ldi	r23, 0x00	; 0
    5ab0:	80 e0       	ldi	r24, 0x00	; 0
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	dd ca       	rjmp	.-2630   	; 0x5070 <delayus>
    5ab6:	08 95       	ret

00005ab8 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5ab8:	cf 93       	push	r28
    5aba:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5abc:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5ac0:	88 23       	and	r24, r24
    5ac2:	09 f4       	brne	.+2      	; 0x5ac6 <i2c_task_next_op+0xe>
    5ac4:	46 c0       	rjmp	.+140    	; 0x5b52 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5ac6:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5aca:	35 de       	rcall	.-918    	; 0x5736 <i2c_check_op>
    5acc:	88 23       	and	r24, r24
    5ace:	b1 f0       	breq	.+44     	; 0x5afc <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5ad0:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5ad4:	ee 0f       	add	r30, r30
    5ad6:	ff 0b       	sbc	r31, r31
    5ad8:	ea 5a       	subi	r30, 0xAA	; 170
    5ada:	f8 4e       	sbci	r31, 0xE8	; 232
    5adc:	c0 81       	ld	r28, Z
    5ade:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5ae0:	8a e0       	ldi	r24, 0x0A	; 10
    5ae2:	e6 e4       	ldi	r30, 0x46	; 70
    5ae4:	fa e1       	ldi	r31, 0x1A	; 26
    5ae6:	de 01       	movw	r26, r28
    5ae8:	01 90       	ld	r0, Z+
    5aea:	0d 92       	st	X+, r0
    5aec:	8a 95       	dec	r24
    5aee:	e1 f7       	brne	.-8      	; 0x5ae8 <i2c_task_next_op+0x30>
			if(o->flags)
    5af0:	8b 81       	ldd	r24, Y+3	; 0x03
    5af2:	88 23       	and	r24, r24
    5af4:	19 f0       	breq	.+6      	; 0x5afc <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5afc:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5b00:	8f 5f       	subi	r24, 0xFF	; 255
    5b02:	19 de       	rcall	.-974    	; 0x5736 <i2c_check_op>
    5b04:	88 23       	and	r24, r24
    5b06:	29 f1       	breq	.+74     	; 0x5b52 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5b08:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5b0c:	ef 5f       	subi	r30, 0xFF	; 255
    5b0e:	e0 93 77 17 	sts	0x1777, r30	; 0x801777 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5b12:	ee 0f       	add	r30, r30
    5b14:	ff 0b       	sbc	r31, r31
    5b16:	ea 5a       	subi	r30, 0xAA	; 170
    5b18:	f8 4e       	sbci	r31, 0xE8	; 232
    5b1a:	01 90       	ld	r0, Z+
    5b1c:	f0 81       	ld	r31, Z
    5b1e:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5b20:	81 81       	ldd	r24, Z+1	; 0x01
    5b22:	81 30       	cpi	r24, 0x01	; 1
    5b24:	19 f0       	breq	.+6      	; 0x5b2c <i2c_task_next_op+0x74>
    5b26:	82 81       	ldd	r24, Z+2	; 0x02
    5b28:	81 11       	cpse	r24, r1
    5b2a:	13 c0       	rjmp	.+38     	; 0x5b52 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5b2c:	8a e0       	ldi	r24, 0x0A	; 10
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	95 83       	std	Z+5, r25	; 0x05
    5b32:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5b34:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5b36:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5b3c:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5b3e:	8a e0       	ldi	r24, 0x0A	; 10
    5b40:	a6 e4       	ldi	r26, 0x46	; 70
    5b42:	ba e1       	ldi	r27, 0x1A	; 26
    5b44:	01 90       	ld	r0, Z+
    5b46:	0d 92       	st	X+, r0
    5b48:	8a 95       	dec	r24

				i2c_send_start();
    5b4a:	e1 f7       	brne	.-8      	; 0x5b44 <i2c_task_next_op+0x8c>
    5b4c:	0b df       	rcall	.-490    	; 0x5964 <i2c_send_start>

				return(1);
    5b4e:	81 e0       	ldi	r24, 0x01	; 1
    5b50:	0f c0       	rjmp	.+30     	; 0x5b70 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5b52:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
	i2c_task.done = 1;
    5b56:	81 e0       	ldi	r24, 0x01	; 1
    5b58:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5b5c:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
	i2c.enable = 0;
    5b60:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
	i2c.flags = 0;
    5b64:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
	i2c.ind = 0;
    5b68:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>

	i2c_send_stop();
    5b6c:	97 df       	rcall	.-210    	; 0x5a9c <i2c_send_stop>

	return(0);
    5b6e:	80 e0       	ldi	r24, 0x00	; 0
}
    5b70:	df 91       	pop	r29
    5b72:	cf 91       	pop	r28
    5b74:	08 95       	ret

00005b76 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5b76:	e0 91 7a 17 	lds	r30, 0x177A	; 0x80177a <i2c_callback>
    5b7a:	f0 91 7b 17 	lds	r31, 0x177B	; 0x80177b <i2c_callback+0x1>
    5b7e:	30 97       	sbiw	r30, 0x00	; 0
    5b80:	11 f0       	breq	.+4      	; 0x5b86 <i2c_next+0x10>
	    i2c_callback();
    5b82:	09 95       	icall
    5b84:	08 95       	ret
	else
		i2c_send_stop();
    5b86:	8a cf       	rjmp	.-236    	; 0x5a9c <i2c_send_stop>
    5b88:	08 95       	ret

00005b8a <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5b8a:	1f 92       	push	r1
    5b8c:	0f 92       	push	r0
    5b8e:	0f b6       	in	r0, 0x3f	; 63
    5b90:	0f 92       	push	r0
    5b92:	11 24       	eor	r1, r1
    5b94:	0b b6       	in	r0, 0x3b	; 59
    5b96:	0f 92       	push	r0
    5b98:	2f 93       	push	r18
    5b9a:	3f 93       	push	r19
    5b9c:	4f 93       	push	r20
    5b9e:	5f 93       	push	r21
    5ba0:	6f 93       	push	r22
    5ba2:	7f 93       	push	r23
    5ba4:	8f 93       	push	r24
    5ba6:	9f 93       	push	r25
    5ba8:	af 93       	push	r26
    5baa:	bf 93       	push	r27
    5bac:	ef 93       	push	r30
    5bae:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5bb0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5bb4:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <i2c+0x1>
    5bb8:	99 23       	and	r25, r25
    5bba:	09 f1       	breq	.+66     	; 0x5bfe <__vector_26+0x74>
    5bbc:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    5bc0:	91 11       	cpse	r25, r1
    5bc2:	1d c0       	rjmp	.+58     	; 0x5bfe <__vector_26+0x74>
    5bc4:	20 91 4e 1a 	lds	r18, 0x1A4E	; 0x801a4e <i2c+0x8>
    5bc8:	30 91 4f 1a 	lds	r19, 0x1A4F	; 0x801a4f <i2c+0x9>
    5bcc:	21 15       	cp	r18, r1
    5bce:	31 05       	cpc	r19, r1
    5bd0:	b1 f0       	breq	.+44     	; 0x5bfe <__vector_26+0x74>
    5bd2:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <i2c+0x6>
    5bd6:	99 23       	and	r25, r25
    5bd8:	91 f0       	breq	.+36     	; 0x5bfe <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5bda:	40 91 4a 1a 	lds	r20, 0x1A4A	; 0x801a4a <i2c+0x4>
    5bde:	50 91 4b 1a 	lds	r21, 0x1A4B	; 0x801a4b <i2c+0x5>
    5be2:	45 2b       	or	r20, r21
    5be4:	71 f4       	brne	.+28     	; 0x5c02 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5be6:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5bea:	81 60       	ori	r24, 0x01	; 1
    5bec:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
		i2c_task.enable = 0;
    5bf0:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5bf4:	81 e0       	ldi	r24, 0x01	; 1
    5bf6:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
		i2c_task.error = 1;
    5bfa:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		i2c_send_stop();
    5bfe:	4e df       	rcall	.-356    	; 0x5a9c <i2c_send_stop>
		return;
    5c00:	9b c0       	rjmp	.+310    	; 0x5d38 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5c02:	88 7f       	andi	r24, 0xF8	; 248
    5c04:	80 33       	cpi	r24, 0x30	; 48
    5c06:	09 f4       	brne	.+2      	; 0x5c0a <__vector_26+0x80>
    5c08:	83 c0       	rjmp	.+262    	; 0x5d10 <__vector_26+0x186>
    5c0a:	70 f4       	brcc	.+28     	; 0x5c28 <__vector_26+0x9e>
    5c0c:	88 31       	cpi	r24, 0x18	; 24
    5c0e:	09 f1       	breq	.+66     	; 0x5c52 <__vector_26+0xc8>
    5c10:	28 f4       	brcc	.+10     	; 0x5c1c <__vector_26+0x92>
    5c12:	88 30       	cpi	r24, 0x08	; 8
    5c14:	c9 f0       	breq	.+50     	; 0x5c48 <__vector_26+0xbe>
    5c16:	80 31       	cpi	r24, 0x10	; 16
    5c18:	b9 f0       	breq	.+46     	; 0x5c48 <__vector_26+0xbe>
    5c1a:	83 c0       	rjmp	.+262    	; 0x5d22 <__vector_26+0x198>
    5c1c:	80 32       	cpi	r24, 0x20	; 32
    5c1e:	09 f4       	brne	.+2      	; 0x5c22 <__vector_26+0x98>
    5c20:	65 c0       	rjmp	.+202    	; 0x5cec <__vector_26+0x162>
    5c22:	88 32       	cpi	r24, 0x28	; 40
    5c24:	b1 f0       	breq	.+44     	; 0x5c52 <__vector_26+0xc8>
    5c26:	7d c0       	rjmp	.+250    	; 0x5d22 <__vector_26+0x198>
    5c28:	88 34       	cpi	r24, 0x48	; 72
    5c2a:	09 f4       	brne	.+2      	; 0x5c2e <__vector_26+0xa4>
    5c2c:	68 c0       	rjmp	.+208    	; 0x5cfe <__vector_26+0x174>
    5c2e:	38 f4       	brcc	.+14     	; 0x5c3e <__vector_26+0xb4>
    5c30:	88 33       	cpi	r24, 0x38	; 56
    5c32:	09 f4       	brne	.+2      	; 0x5c36 <__vector_26+0xac>
    5c34:	57 c0       	rjmp	.+174    	; 0x5ce4 <__vector_26+0x15a>
    5c36:	80 34       	cpi	r24, 0x40	; 64
    5c38:	09 f4       	brne	.+2      	; 0x5c3c <__vector_26+0xb2>
    5c3a:	42 c0       	rjmp	.+132    	; 0x5cc0 <__vector_26+0x136>
    5c3c:	72 c0       	rjmp	.+228    	; 0x5d22 <__vector_26+0x198>
    5c3e:	80 35       	cpi	r24, 0x50	; 80
    5c40:	79 f1       	breq	.+94     	; 0x5ca0 <__vector_26+0x116>
    5c42:	88 35       	cpi	r24, 0x58	; 88
    5c44:	b9 f0       	breq	.+46     	; 0x5c74 <__vector_26+0xea>
    5c46:	6d c0       	rjmp	.+218    	; 0x5d22 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5c48:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
			TWDR = i2c.address;
    5c4c:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c>
    5c50:	0e c0       	rjmp	.+28     	; 0x5c6e <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5c52:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5c56:	89 17       	cp	r24, r25
    5c58:	ec f4       	brge	.+58     	; 0x5c94 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5c5a:	91 e0       	ldi	r25, 0x01	; 1
    5c5c:	98 0f       	add	r25, r24
    5c5e:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5c62:	f9 01       	movw	r30, r18
    5c64:	e8 0f       	add	r30, r24
    5c66:	f1 1d       	adc	r31, r1
    5c68:	87 fd       	sbrc	r24, 7
    5c6a:	fa 95       	dec	r31
    5c6c:	80 81       	ld	r24, Z
    5c6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c72:	36 c0       	rjmp	.+108    	; 0x5ce0 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5c74:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5c78:	89 17       	cp	r24, r25
    5c7a:	64 f4       	brge	.+24     	; 0x5c94 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5c7c:	91 e0       	ldi	r25, 0x01	; 1
    5c7e:	98 0f       	add	r25, r24
    5c80:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5c84:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c88:	f9 01       	movw	r30, r18
    5c8a:	e8 0f       	add	r30, r24
    5c8c:	f1 1d       	adc	r31, r1
    5c8e:	87 fd       	sbrc	r24, 7
    5c90:	fa 95       	dec	r31
    5c92:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5c94:	81 e0       	ldi	r24, 0x01	; 1
    5c96:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
				i2c.enable = 0;
    5c9a:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    5c9e:	4b c0       	rjmp	.+150    	; 0x5d36 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5ca0:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5ca4:	89 17       	cp	r24, r25
    5ca6:	64 f4       	brge	.+24     	; 0x5cc0 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5ca8:	91 e0       	ldi	r25, 0x01	; 1
    5caa:	98 0f       	add	r25, r24
    5cac:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    5cb0:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cb4:	f9 01       	movw	r30, r18
    5cb6:	e8 0f       	add	r30, r24
    5cb8:	f1 1d       	adc	r31, r1
    5cba:	87 fd       	sbrc	r24, 7
    5cbc:	fa 95       	dec	r31
    5cbe:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5cc0:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    5cc4:	08 2e       	mov	r0, r24
    5cc6:	00 0c       	add	r0, r0
    5cc8:	99 0b       	sbc	r25, r25
    5cca:	01 96       	adiw	r24, 0x01	; 1
    5ccc:	20 91 4c 1a 	lds	r18, 0x1A4C	; 0x801a4c <i2c+0x6>
    5cd0:	02 2e       	mov	r0, r18
    5cd2:	00 0c       	add	r0, r0
    5cd4:	33 0b       	sbc	r19, r19
    5cd6:	82 17       	cp	r24, r18
    5cd8:	93 07       	cpc	r25, r19
    5cda:	14 f4       	brge	.+4      	; 0x5ce0 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5cdc:	85 ec       	ldi	r24, 0xC5	; 197
    5cde:	03 c0       	rjmp	.+6      	; 0x5ce6 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5ce0:	85 e8       	ldi	r24, 0x85	; 133
    5ce2:	01 c0       	rjmp	.+2      	; 0x5ce6 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5ce4:	85 ea       	ldi	r24, 0xA5	; 165
    5ce6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5cea:	26 c0       	rjmp	.+76     	; 0x5d38 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5cec:	81 e0       	ldi	r24, 0x01	; 1
    5cee:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5cf2:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5cf6:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5cfa:	88 60       	ori	r24, 0x08	; 8
    5cfc:	1a c0       	rjmp	.+52     	; 0x5d32 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d04:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5d08:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d0c:	80 61       	ori	r24, 0x10	; 16
    5d0e:	11 c0       	rjmp	.+34     	; 0x5d32 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5d10:	81 e0       	ldi	r24, 0x01	; 1
    5d12:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d16:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5d1a:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d1e:	80 62       	ori	r24, 0x20	; 32
    5d20:	08 c0       	rjmp	.+16     	; 0x5d32 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5d28:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5d2c:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5d30:	80 64       	ori	r24, 0x40	; 64
    5d32:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
			i2c_next();
    5d36:	1f df       	rcall	.-450    	; 0x5b76 <i2c_next>
			break;
	}
}
    5d38:	ff 91       	pop	r31
    5d3a:	ef 91       	pop	r30
    5d3c:	bf 91       	pop	r27
    5d3e:	af 91       	pop	r26
    5d40:	9f 91       	pop	r25
    5d42:	8f 91       	pop	r24
    5d44:	7f 91       	pop	r23
    5d46:	6f 91       	pop	r22
    5d48:	5f 91       	pop	r21
    5d4a:	4f 91       	pop	r20
    5d4c:	3f 91       	pop	r19
    5d4e:	2f 91       	pop	r18
    5d50:	0f 90       	pop	r0
    5d52:	0b be       	out	0x3b, r0	; 59
    5d54:	0f 90       	pop	r0
    5d56:	0f be       	out	0x3f, r0	; 63
    5d58:	0f 90       	pop	r0
    5d5a:	1f 90       	pop	r1
    5d5c:	18 95       	reti

00005d5e <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5d5e:	cf 93       	push	r28
    5d60:	00 d0       	rcall	.+0      	; 0x5d62 <i2c_print_error+0x4>
    5d62:	00 d0       	rcall	.+0      	; 0x5d64 <i2c_print_error+0x6>
    5d64:	1f 92       	push	r1
    int flags = o->flags;
    5d66:	fc 01       	movw	r30, r24
    5d68:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5d6a:	cc 23       	and	r28, r28
    5d6c:	09 f4       	brne	.+2      	; 0x5d70 <i2c_print_error+0x12>
    5d6e:	67 c0       	rjmp	.+206    	; 0x5e3e <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5d70:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5d74:	81 11       	cpse	r24, r1
    5d76:	03 c0       	rjmp	.+6      	; 0x5d7e <i2c_print_error+0x20>
    5d78:	88 e2       	ldi	r24, 0x28	; 40
    5d7a:	93 e0       	ldi	r25, 0x03	; 3
    5d7c:	02 c0       	rjmp	.+4      	; 0x5d82 <i2c_print_error+0x24>
    5d7e:	83 e2       	ldi	r24, 0x23	; 35
    5d80:	93 e0       	ldi	r25, 0x03	; 3
    5d82:	ed b7       	in	r30, 0x3d	; 61
    5d84:	fe b7       	in	r31, 0x3e	; 62
    5d86:	95 83       	std	Z+5, r25	; 0x05
    5d88:	84 83       	std	Z+4, r24	; 0x04
    5d8a:	81 ec       	ldi	r24, 0xC1	; 193
    5d8c:	93 e0       	ldi	r25, 0x03	; 3
    5d8e:	a0 e0       	ldi	r26, 0x00	; 0
    5d90:	81 83       	std	Z+1, r24	; 0x01
    5d92:	92 83       	std	Z+2, r25	; 0x02
    5d94:	a3 83       	std	Z+3, r26	; 0x03
    5d96:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5d9a:	c0 ff       	sbrs	r28, 0
    5d9c:	0a c0       	rjmp	.+20     	; 0x5db2 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5d9e:	83 eb       	ldi	r24, 0xB3	; 179
    5da0:	93 e0       	ldi	r25, 0x03	; 3
    5da2:	a0 e0       	ldi	r26, 0x00	; 0
    5da4:	ed b7       	in	r30, 0x3d	; 61
    5da6:	fe b7       	in	r31, 0x3e	; 62
    5da8:	81 83       	std	Z+1, r24	; 0x01
    5daa:	92 83       	std	Z+2, r25	; 0x02
    5dac:	a3 83       	std	Z+3, r26	; 0x03
    5dae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		if(flags & I2C_OP_LEN)
    5db2:	c1 ff       	sbrs	r28, 1
    5db4:	0a c0       	rjmp	.+20     	; 0x5dca <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5db6:	89 ea       	ldi	r24, 0xA9	; 169
    5db8:	93 e0       	ldi	r25, 0x03	; 3
    5dba:	a0 e0       	ldi	r26, 0x00	; 0
    5dbc:	ed b7       	in	r30, 0x3d	; 61
    5dbe:	fe b7       	in	r31, 0x3e	; 62
    5dc0:	81 83       	std	Z+1, r24	; 0x01
    5dc2:	92 83       	std	Z+2, r25	; 0x02
    5dc4:	a3 83       	std	Z+3, r26	; 0x03
    5dc6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		if(flags & I2C_OP_ERROR)
    5dca:	c2 ff       	sbrs	r28, 2
    5dcc:	0a c0       	rjmp	.+20     	; 0x5de2 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5dce:	8d e9       	ldi	r24, 0x9D	; 157
    5dd0:	93 e0       	ldi	r25, 0x03	; 3
    5dd2:	a0 e0       	ldi	r26, 0x00	; 0
    5dd4:	ed b7       	in	r30, 0x3d	; 61
    5dd6:	fe b7       	in	r31, 0x3e	; 62
    5dd8:	81 83       	std	Z+1, r24	; 0x01
    5dda:	92 83       	std	Z+2, r25	; 0x02
    5ddc:	a3 83       	std	Z+3, r26	; 0x03
    5dde:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5de2:	c4 ff       	sbrs	r28, 4
    5de4:	0a c0       	rjmp	.+20     	; 0x5dfa <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5de6:	8b e8       	ldi	r24, 0x8B	; 139
    5de8:	93 e0       	ldi	r25, 0x03	; 3
    5dea:	a0 e0       	ldi	r26, 0x00	; 0
    5dec:	ed b7       	in	r30, 0x3d	; 61
    5dee:	fe b7       	in	r31, 0x3e	; 62
    5df0:	81 83       	std	Z+1, r24	; 0x01
    5df2:	92 83       	std	Z+2, r25	; 0x02
    5df4:	a3 83       	std	Z+3, r26	; 0x03
    5df6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5dfa:	c3 ff       	sbrs	r28, 3
    5dfc:	0a c0       	rjmp	.+20     	; 0x5e12 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5dfe:	89 e7       	ldi	r24, 0x79	; 121
    5e00:	93 e0       	ldi	r25, 0x03	; 3
    5e02:	a0 e0       	ldi	r26, 0x00	; 0
    5e04:	ed b7       	in	r30, 0x3d	; 61
    5e06:	fe b7       	in	r31, 0x3e	; 62
    5e08:	81 83       	std	Z+1, r24	; 0x01
    5e0a:	92 83       	std	Z+2, r25	; 0x02
    5e0c:	a3 83       	std	Z+3, r26	; 0x03
    5e0e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5e12:	c5 ff       	sbrs	r28, 5
    5e14:	0a c0       	rjmp	.+20     	; 0x5e2a <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5e16:	86 e6       	ldi	r24, 0x66	; 102
    5e18:	93 e0       	ldi	r25, 0x03	; 3
    5e1a:	a0 e0       	ldi	r26, 0x00	; 0
    5e1c:	ed b7       	in	r30, 0x3d	; 61
    5e1e:	fe b7       	in	r31, 0x3e	; 62
    5e20:	81 83       	std	Z+1, r24	; 0x01
    5e22:	92 83       	std	Z+2, r25	; 0x02
    5e24:	a3 83       	std	Z+3, r26	; 0x03
    5e26:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		printf("\n");
    5e2a:	84 e6       	ldi	r24, 0x64	; 100
    5e2c:	93 e0       	ldi	r25, 0x03	; 3
    5e2e:	a0 e0       	ldi	r26, 0x00	; 0
    5e30:	ed b7       	in	r30, 0x3d	; 61
    5e32:	fe b7       	in	r31, 0x3e	; 62
    5e34:	81 83       	std	Z+1, r24	; 0x01
    5e36:	92 83       	std	Z+2, r25	; 0x02
    5e38:	a3 83       	std	Z+3, r26	; 0x03
    5e3a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	}
}
    5e3e:	0f 90       	pop	r0
    5e40:	0f 90       	pop	r0
    5e42:	0f 90       	pop	r0
    5e44:	0f 90       	pop	r0
    5e46:	0f 90       	pop	r0
    5e48:	cf 91       	pop	r28
    5e4a:	08 95       	ret

00005e4c <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5e4c:	6f 92       	push	r6
    5e4e:	7f 92       	push	r7
    5e50:	8f 92       	push	r8
    5e52:	af 92       	push	r10
    5e54:	bf 92       	push	r11
    5e56:	cf 92       	push	r12
    5e58:	df 92       	push	r13
    5e5a:	ef 92       	push	r14
    5e5c:	0f 93       	push	r16
    5e5e:	1f 93       	push	r17
    5e60:	cf 93       	push	r28
    5e62:	df 93       	push	r29
    5e64:	00 d0       	rcall	.+0      	; 0x5e66 <i2c_display_task_errors+0x1a>
    5e66:	00 d0       	rcall	.+0      	; 0x5e68 <i2c_display_task_errors+0x1c>
    5e68:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5e6a:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
    5e6e:	90 e0       	ldi	r25, 0x00	; 0
    5e70:	ed b7       	in	r30, 0x3d	; 61
    5e72:	fe b7       	in	r31, 0x3e	; 62
    5e74:	95 83       	std	Z+5, r25	; 0x05
    5e76:	84 83       	std	Z+4, r24	; 0x04
    5e78:	81 e5       	ldi	r24, 0x51	; 81
    5e7a:	93 e0       	ldi	r25, 0x03	; 3
    5e7c:	a0 e0       	ldi	r26, 0x00	; 0
    5e7e:	81 83       	std	Z+1, r24	; 0x01
    5e80:	92 83       	std	Z+2, r25	; 0x02
    5e82:	a3 83       	std	Z+3, r26	; 0x03
    5e84:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5e88:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	ed b7       	in	r30, 0x3d	; 61
    5e90:	fe b7       	in	r31, 0x3e	; 62
    5e92:	95 83       	std	Z+5, r25	; 0x05
    5e94:	84 83       	std	Z+4, r24	; 0x04
    5e96:	8d e3       	ldi	r24, 0x3D	; 61
    5e98:	93 e0       	ldi	r25, 0x03	; 3
    5e9a:	a0 e0       	ldi	r26, 0x00	; 0
    5e9c:	81 83       	std	Z+1, r24	; 0x01
    5e9e:	92 83       	std	Z+2, r25	; 0x02
    5ea0:	a3 83       	std	Z+3, r26	; 0x03
    5ea2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    5ea6:	c6 e5       	ldi	r28, 0x56	; 86
    5ea8:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5eaa:	00 e0       	ldi	r16, 0x00	; 0
    5eac:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5eae:	83 e3       	ldi	r24, 0x33	; 51
    5eb0:	93 e0       	ldi	r25, 0x03	; 3
    5eb2:	6c 01       	movw	r12, r24
    5eb4:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5eb6:	81 e3       	ldi	r24, 0x31	; 49
    5eb8:	93 e0       	ldi	r25, 0x03	; 3
    5eba:	3c 01       	movw	r6, r24
    5ebc:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ebe:	30 2f       	mov	r19, r16
    5ec0:	21 2f       	mov	r18, r17
    5ec2:	5e 01       	movw	r10, r28
    5ec4:	0f 5f       	subi	r16, 0xFF	; 255
    5ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec8:	88 81       	ld	r24, Y
    5eca:	99 81       	ldd	r25, Y+1	; 0x01
    5ecc:	89 2b       	or	r24, r25
    5ece:	b1 f0       	breq	.+44     	; 0x5efc <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5ed0:	ed b7       	in	r30, 0x3d	; 61
    5ed2:	fe b7       	in	r31, 0x3e	; 62
    5ed4:	34 83       	std	Z+4, r19	; 0x04
    5ed6:	25 83       	std	Z+5, r18	; 0x05
    5ed8:	c1 82       	std	Z+1, r12	; 0x01
    5eda:	d2 82       	std	Z+2, r13	; 0x02
    5edc:	e3 82       	std	Z+3, r14	; 0x03
    5ede:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    5ee2:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5ee4:	f5 01       	movw	r30, r10
    5ee6:	80 81       	ld	r24, Z
    5ee8:	91 81       	ldd	r25, Z+1	; 0x01
    5eea:	39 df       	rcall	.-398    	; 0x5d5e <i2c_print_error>
		printf("\n");
    5eec:	ed b7       	in	r30, 0x3d	; 61
    5eee:	fe b7       	in	r31, 0x3e	; 62
    5ef0:	61 82       	std	Z+1, r6	; 0x01
    5ef2:	72 82       	std	Z+2, r7	; 0x02
    5ef4:	83 82       	std	Z+3, r8	; 0x03
    5ef6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    5efa:	e1 cf       	rjmp	.-62     	; 0x5ebe <i2c_display_task_errors+0x72>
	}
}
    5efc:	0f 90       	pop	r0
    5efe:	0f 90       	pop	r0
    5f00:	0f 90       	pop	r0
    5f02:	0f 90       	pop	r0
    5f04:	0f 90       	pop	r0
    5f06:	df 91       	pop	r29
    5f08:	cf 91       	pop	r28
    5f0a:	1f 91       	pop	r17
    5f0c:	0f 91       	pop	r16
    5f0e:	ef 90       	pop	r14
    5f10:	df 90       	pop	r13
    5f12:	cf 90       	pop	r12
    5f14:	bf 90       	pop	r11
    5f16:	af 90       	pop	r10
    5f18:	8f 90       	pop	r8
    5f1a:	7f 90       	pop	r7
    5f1c:	6f 90       	pop	r6
    5f1e:	08 95       	ret

00005f20 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5f20:	6a e0       	ldi	r22, 0x0A	; 10
    5f22:	0e 94 4c e6 	call	0x1cc98	; 0x1cc98 <__udivmodqi4>
    5f26:	82 95       	swap	r24
    5f28:	80 7f       	andi	r24, 0xF0	; 240
    5f2a:	89 2b       	or	r24, r25
    5f2c:	08 95       	ret

00005f2e <BCDtoBIN>:
    5f2e:	98 2f       	mov	r25, r24
    5f30:	92 95       	swap	r25
    5f32:	9f 70       	andi	r25, 0x0F	; 15
    5f34:	8f 70       	andi	r24, 0x0F	; 15
    5f36:	2a e0       	ldi	r18, 0x0A	; 10
    5f38:	92 9f       	mul	r25, r18
    5f3a:	80 0d       	add	r24, r0
    5f3c:	11 24       	eor	r1, r1
    5f3e:	08 95       	ret

00005f40 <i2c_rtc_write>:
    5f40:	ac e0       	ldi	r26, 0x0C	; 12
    5f42:	b0 e0       	ldi	r27, 0x00	; 0
    5f44:	e6 ea       	ldi	r30, 0xA6	; 166
    5f46:	ff e2       	ldi	r31, 0x2F	; 47
    5f48:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    5f4c:	9f ef       	ldi	r25, 0xFF	; 255
    5f4e:	92 0f       	add	r25, r18
    5f50:	98 30       	cpi	r25, 0x08	; 8
    5f52:	50 f5       	brcc	.+84     	; 0x5fa8 <i2c_rtc_write+0x68>
    5f54:	6c 83       	std	Y+4, r22	; 0x04
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	02 2f       	mov	r16, r18
    5f5a:	10 e0       	ldi	r17, 0x00	; 0
    5f5c:	69 2f       	mov	r22, r25
    5f5e:	09 2e       	mov	r0, r25
    5f60:	00 0c       	add	r0, r0
    5f62:	77 0b       	sbc	r23, r23
    5f64:	60 17       	cp	r22, r16
    5f66:	71 07       	cpc	r23, r17
    5f68:	6c f4       	brge	.+26     	; 0x5f84 <i2c_rtc_write+0x44>
    5f6a:	a5 e0       	ldi	r26, 0x05	; 5
    5f6c:	b0 e0       	ldi	r27, 0x00	; 0
    5f6e:	ac 0f       	add	r26, r28
    5f70:	bd 1f       	adc	r27, r29
    5f72:	a6 0f       	add	r26, r22
    5f74:	b7 1f       	adc	r27, r23
    5f76:	64 0f       	add	r22, r20
    5f78:	75 1f       	adc	r23, r21
    5f7a:	fb 01       	movw	r30, r22
    5f7c:	30 81       	ld	r19, Z
    5f7e:	3c 93       	st	X, r19
    5f80:	9f 5f       	subi	r25, 0xFF	; 255
    5f82:	ec cf       	rjmp	.-40     	; 0x5f5c <i2c_rtc_write+0x1c>
    5f84:	2f 5f       	subi	r18, 0xFF	; 255
    5f86:	ae 01       	movw	r20, r28
    5f88:	4c 5f       	subi	r20, 0xFC	; 252
    5f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f8c:	60 e0       	ldi	r22, 0x00	; 0
    5f8e:	5a dd       	rcall	.-1356   	; 0x5a44 <i2c_fn>
    5f90:	81 11       	cpse	r24, r1
    5f92:	0c c0       	rjmp	.+24     	; 0x5fac <i2c_rtc_write+0x6c>
    5f94:	8e ed       	ldi	r24, 0xDE	; 222
    5f96:	94 e0       	ldi	r25, 0x04	; 4
    5f98:	a0 e0       	ldi	r26, 0x00	; 0
    5f9a:	ed b7       	in	r30, 0x3d	; 61
    5f9c:	fe b7       	in	r31, 0x3e	; 62
    5f9e:	81 83       	std	Z+1, r24	; 0x01
    5fa0:	92 83       	std	Z+2, r25	; 0x02
    5fa2:	a3 83       	std	Z+3, r26	; 0x03
    5fa4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    5fa8:	80 e0       	ldi	r24, 0x00	; 0
    5faa:	01 c0       	rjmp	.+2      	; 0x5fae <i2c_rtc_write+0x6e>
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	2c 96       	adiw	r28, 0x0c	; 12
    5fb0:	e4 e0       	ldi	r30, 0x04	; 4
    5fb2:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00005fb6 <i2c_rtc_read>:
    5fb6:	a4 e0       	ldi	r26, 0x04	; 4
    5fb8:	b0 e0       	ldi	r27, 0x00	; 0
    5fba:	e1 ee       	ldi	r30, 0xE1	; 225
    5fbc:	ff e2       	ldi	r31, 0x2F	; 47
    5fbe:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
    5fc2:	6c 83       	std	Y+4, r22	; 0x04
    5fc4:	9f ef       	ldi	r25, 0xFF	; 255
    5fc6:	92 0f       	add	r25, r18
    5fc8:	98 30       	cpi	r25, 0x08	; 8
    5fca:	f8 f4       	brcc	.+62     	; 0x600a <i2c_rtc_read+0x54>
    5fcc:	02 2f       	mov	r16, r18
    5fce:	7a 01       	movw	r14, r20
    5fd0:	18 2f       	mov	r17, r24
    5fd2:	21 e0       	ldi	r18, 0x01	; 1
    5fd4:	ae 01       	movw	r20, r28
    5fd6:	4c 5f       	subi	r20, 0xFC	; 252
    5fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fda:	60 e0       	ldi	r22, 0x00	; 0
    5fdc:	33 dd       	rcall	.-1434   	; 0x5a44 <i2c_fn>
    5fde:	81 11       	cpse	r24, r1
    5fe0:	03 c0       	rjmp	.+6      	; 0x5fe8 <i2c_rtc_read+0x32>
    5fe2:	82 ec       	ldi	r24, 0xC2	; 194
    5fe4:	94 e0       	ldi	r25, 0x04	; 4
    5fe6:	09 c0       	rjmp	.+18     	; 0x5ffa <i2c_rtc_read+0x44>
    5fe8:	20 2f       	mov	r18, r16
    5fea:	a7 01       	movw	r20, r14
    5fec:	61 e0       	ldi	r22, 0x01	; 1
    5fee:	81 2f       	mov	r24, r17
    5ff0:	29 dd       	rcall	.-1454   	; 0x5a44 <i2c_fn>
    5ff2:	81 11       	cpse	r24, r1
    5ff4:	0c c0       	rjmp	.+24     	; 0x600e <i2c_rtc_read+0x58>
    5ff6:	89 ea       	ldi	r24, 0xA9	; 169
    5ff8:	94 e0       	ldi	r25, 0x04	; 4
    5ffa:	a0 e0       	ldi	r26, 0x00	; 0
    5ffc:	ed b7       	in	r30, 0x3d	; 61
    5ffe:	fe b7       	in	r31, 0x3e	; 62
    6000:	81 83       	std	Z+1, r24	; 0x01
    6002:	92 83       	std	Z+2, r25	; 0x02
    6004:	a3 83       	std	Z+3, r26	; 0x03
    6006:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    600a:	80 e0       	ldi	r24, 0x00	; 0
    600c:	01 c0       	rjmp	.+2      	; 0x6010 <i2c_rtc_read+0x5a>
    600e:	81 e0       	ldi	r24, 0x01	; 1
    6010:	24 96       	adiw	r28, 0x04	; 4
    6012:	e6 e0       	ldi	r30, 0x06	; 6
    6014:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00006018 <i2c_rtc_init>:
    6018:	60 ea       	ldi	r22, 0xA0	; 160
    601a:	76 e8       	ldi	r23, 0x86	; 134
    601c:	81 e0       	ldi	r24, 0x01	; 1
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	18 cc       	rjmp	.-2000   	; 0x5852 <i2c_init>
    6022:	08 95       	ret

00006024 <rtc_write>:
    6024:	ab e0       	ldi	r26, 0x0B	; 11
    6026:	b0 e0       	ldi	r27, 0x00	; 0
    6028:	e8 e1       	ldi	r30, 0x18	; 24
    602a:	f0 e3       	ldi	r31, 0x30	; 48
    602c:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    6030:	8c 01       	movw	r16, r24
    6032:	fc 01       	movw	r30, r24
    6034:	80 81       	ld	r24, Z
    6036:	74 df       	rcall	.-280    	; 0x5f20 <BINtoBCD>
    6038:	8f 77       	andi	r24, 0x7F	; 127
    603a:	8c 83       	std	Y+4, r24	; 0x04
    603c:	f8 01       	movw	r30, r16
    603e:	82 81       	ldd	r24, Z+2	; 0x02
    6040:	6f df       	rcall	.-290    	; 0x5f20 <BINtoBCD>
    6042:	8f 77       	andi	r24, 0x7F	; 127
    6044:	8d 83       	std	Y+5, r24	; 0x05
    6046:	f8 01       	movw	r30, r16
    6048:	84 81       	ldd	r24, Z+4	; 0x04
    604a:	6a df       	rcall	.-300    	; 0x5f20 <BINtoBCD>
    604c:	8f 73       	andi	r24, 0x3F	; 63
    604e:	8e 83       	std	Y+6, r24	; 0x06
    6050:	f8 01       	movw	r30, r16
    6052:	84 85       	ldd	r24, Z+12	; 0x0c
    6054:	87 70       	andi	r24, 0x07	; 7
    6056:	8f 5f       	subi	r24, 0xFF	; 255
    6058:	8f 83       	std	Y+7, r24	; 0x07
    605a:	86 81       	ldd	r24, Z+6	; 0x06
    605c:	61 df       	rcall	.-318    	; 0x5f20 <BINtoBCD>
    605e:	8f 73       	andi	r24, 0x3F	; 63
    6060:	88 87       	std	Y+8, r24	; 0x08
    6062:	f8 01       	movw	r30, r16
    6064:	80 85       	ldd	r24, Z+8	; 0x08
    6066:	8f 5f       	subi	r24, 0xFF	; 255
    6068:	5b df       	rcall	.-330    	; 0x5f20 <BINtoBCD>
    606a:	8f 71       	andi	r24, 0x1F	; 31
    606c:	89 87       	std	Y+9, r24	; 0x09
    606e:	f8 01       	movw	r30, r16
    6070:	82 85       	ldd	r24, Z+10	; 0x0a
    6072:	84 56       	subi	r24, 0x64	; 100
    6074:	55 df       	rcall	.-342    	; 0x5f20 <BINtoBCD>
    6076:	8a 87       	std	Y+10, r24	; 0x0a
    6078:	83 e9       	ldi	r24, 0x93	; 147
    607a:	8b 87       	std	Y+11, r24	; 0x0b
    607c:	28 e0       	ldi	r18, 0x08	; 8
    607e:	ae 01       	movw	r20, r28
    6080:	4c 5f       	subi	r20, 0xFC	; 252
    6082:	5f 4f       	sbci	r21, 0xFF	; 255
    6084:	60 e0       	ldi	r22, 0x00	; 0
    6086:	88 e6       	ldi	r24, 0x68	; 104
    6088:	5b df       	rcall	.-330    	; 0x5f40 <i2c_rtc_write>
    608a:	81 11       	cpse	r24, r1
    608c:	0c c0       	rjmp	.+24     	; 0x60a6 <rtc_write+0x82>
    608e:	88 e9       	ldi	r24, 0x98	; 152
    6090:	94 e0       	ldi	r25, 0x04	; 4
    6092:	a0 e0       	ldi	r26, 0x00	; 0
    6094:	ed b7       	in	r30, 0x3d	; 61
    6096:	fe b7       	in	r31, 0x3e	; 62
    6098:	81 83       	std	Z+1, r24	; 0x01
    609a:	92 83       	std	Z+2, r25	; 0x02
    609c:	a3 83       	std	Z+3, r26	; 0x03
    609e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    60a2:	80 e0       	ldi	r24, 0x00	; 0
    60a4:	01 c0       	rjmp	.+2      	; 0x60a8 <rtc_write+0x84>
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	2b 96       	adiw	r28, 0x0b	; 11
    60aa:	e4 e0       	ldi	r30, 0x04	; 4
    60ac:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

000060b0 <rtc_read>:
    60b0:	ab e0       	ldi	r26, 0x0B	; 11
    60b2:	b0 e0       	ldi	r27, 0x00	; 0
    60b4:	ee e5       	ldi	r30, 0x5E	; 94
    60b6:	f0 e3       	ldi	r31, 0x30	; 48
    60b8:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    60bc:	8c 01       	movw	r16, r24
    60be:	28 e0       	ldi	r18, 0x08	; 8
    60c0:	ae 01       	movw	r20, r28
    60c2:	4c 5f       	subi	r20, 0xFC	; 252
    60c4:	5f 4f       	sbci	r21, 0xFF	; 255
    60c6:	60 e0       	ldi	r22, 0x00	; 0
    60c8:	88 e6       	ldi	r24, 0x68	; 104
    60ca:	75 df       	rcall	.-278    	; 0x5fb6 <i2c_rtc_read>
    60cc:	81 11       	cpse	r24, r1
    60ce:	0c c0       	rjmp	.+24     	; 0x60e8 <rtc_read+0x38>
    60d0:	88 e8       	ldi	r24, 0x88	; 136
    60d2:	94 e0       	ldi	r25, 0x04	; 4
    60d4:	a0 e0       	ldi	r26, 0x00	; 0
    60d6:	ed b7       	in	r30, 0x3d	; 61
    60d8:	fe b7       	in	r31, 0x3e	; 62
    60da:	81 83       	std	Z+1, r24	; 0x01
    60dc:	92 83       	std	Z+2, r25	; 0x02
    60de:	a3 83       	std	Z+3, r26	; 0x03
    60e0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    60e4:	80 e0       	ldi	r24, 0x00	; 0
    60e6:	33 c0       	rjmp	.+102    	; 0x614e <rtc_read+0x9e>
    60e8:	8c 81       	ldd	r24, Y+4	; 0x04
    60ea:	8f 77       	andi	r24, 0x7F	; 127
    60ec:	20 df       	rcall	.-448    	; 0x5f2e <BCDtoBIN>
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	f8 01       	movw	r30, r16
    60f2:	91 83       	std	Z+1, r25	; 0x01
    60f4:	80 83       	st	Z, r24
    60f6:	8d 81       	ldd	r24, Y+5	; 0x05
    60f8:	8f 77       	andi	r24, 0x7F	; 127
    60fa:	19 df       	rcall	.-462    	; 0x5f2e <BCDtoBIN>
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	f8 01       	movw	r30, r16
    6100:	93 83       	std	Z+3, r25	; 0x03
    6102:	82 83       	std	Z+2, r24	; 0x02
    6104:	8e 81       	ldd	r24, Y+6	; 0x06
    6106:	8f 73       	andi	r24, 0x3F	; 63
    6108:	12 df       	rcall	.-476    	; 0x5f2e <BCDtoBIN>
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	f8 01       	movw	r30, r16
    610e:	95 83       	std	Z+5, r25	; 0x05
    6110:	84 83       	std	Z+4, r24	; 0x04
    6112:	8f 81       	ldd	r24, Y+7	; 0x07
    6114:	87 70       	andi	r24, 0x07	; 7
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	01 97       	sbiw	r24, 0x01	; 1
    611a:	95 87       	std	Z+13, r25	; 0x0d
    611c:	84 87       	std	Z+12, r24	; 0x0c
    611e:	88 85       	ldd	r24, Y+8	; 0x08
    6120:	8f 73       	andi	r24, 0x3F	; 63
    6122:	05 df       	rcall	.-502    	; 0x5f2e <BCDtoBIN>
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	f8 01       	movw	r30, r16
    6128:	97 83       	std	Z+7, r25	; 0x07
    612a:	86 83       	std	Z+6, r24	; 0x06
    612c:	89 85       	ldd	r24, Y+9	; 0x09
    612e:	8f 71       	andi	r24, 0x1F	; 31
    6130:	fe de       	rcall	.-516    	; 0x5f2e <BCDtoBIN>
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	01 97       	sbiw	r24, 0x01	; 1
    6136:	f8 01       	movw	r30, r16
    6138:	91 87       	std	Z+9, r25	; 0x09
    613a:	80 87       	std	Z+8, r24	; 0x08
    613c:	8a 85       	ldd	r24, Y+10	; 0x0a
    613e:	f7 de       	rcall	.-530    	; 0x5f2e <BCDtoBIN>
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	8c 59       	subi	r24, 0x9C	; 156
    6144:	9f 4f       	sbci	r25, 0xFF	; 255
    6146:	f8 01       	movw	r30, r16
    6148:	93 87       	std	Z+11, r25	; 0x0b
    614a:	82 87       	std	Z+10, r24	; 0x0a
    614c:	81 e0       	ldi	r24, 0x01	; 1
    614e:	2b 96       	adiw	r28, 0x0b	; 11
    6150:	e4 e0       	ldi	r30, 0x04	; 4
    6152:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00006156 <rtc_run>:
    6156:	a4 e0       	ldi	r26, 0x04	; 4
    6158:	b0 e0       	ldi	r27, 0x00	; 0
    615a:	e1 eb       	ldi	r30, 0xB1	; 177
    615c:	f0 e3       	ldi	r31, 0x30	; 48
    615e:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    6162:	8c 01       	movw	r16, r24
    6164:	21 e0       	ldi	r18, 0x01	; 1
    6166:	ae 01       	movw	r20, r28
    6168:	4c 5f       	subi	r20, 0xFC	; 252
    616a:	5f 4f       	sbci	r21, 0xFF	; 255
    616c:	60 e0       	ldi	r22, 0x00	; 0
    616e:	88 e6       	ldi	r24, 0x68	; 104
    6170:	22 df       	rcall	.-444    	; 0x5fb6 <i2c_rtc_read>
    6172:	81 11       	cpse	r24, r1
    6174:	03 c0       	rjmp	.+6      	; 0x617c <rtc_run+0x26>
    6176:	84 e7       	ldi	r24, 0x74	; 116
    6178:	94 e0       	ldi	r25, 0x04	; 4
    617a:	24 c0       	rjmp	.+72     	; 0x61c4 <rtc_run+0x6e>
    617c:	8c 81       	ldd	r24, Y+4	; 0x04
    617e:	0f 3f       	cpi	r16, 0xFF	; 255
    6180:	ff ef       	ldi	r31, 0xFF	; 255
    6182:	1f 07       	cpc	r17, r31
    6184:	59 f4       	brne	.+22     	; 0x619c <rtc_run+0x46>
    6186:	08 2e       	mov	r0, r24
    6188:	00 0c       	add	r0, r0
    618a:	99 0b       	sbc	r25, r25
    618c:	80 95       	com	r24
    618e:	90 95       	com	r25
    6190:	89 2f       	mov	r24, r25
    6192:	88 1f       	adc	r24, r24
    6194:	88 27       	eor	r24, r24
    6196:	88 1f       	adc	r24, r24
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	20 c0       	rjmp	.+64     	; 0x61dc <rtc_run+0x86>
    619c:	8f 77       	andi	r24, 0x7F	; 127
    619e:	01 15       	cp	r16, r1
    61a0:	11 05       	cpc	r17, r1
    61a2:	11 f4       	brne	.+4      	; 0x61a8 <rtc_run+0x52>
    61a4:	90 e8       	ldi	r25, 0x80	; 128
    61a6:	01 c0       	rjmp	.+2      	; 0x61aa <rtc_run+0x54>
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	89 2b       	or	r24, r25
    61ac:	8c 83       	std	Y+4, r24	; 0x04
    61ae:	21 e0       	ldi	r18, 0x01	; 1
    61b0:	ae 01       	movw	r20, r28
    61b2:	4c 5f       	subi	r20, 0xFC	; 252
    61b4:	5f 4f       	sbci	r21, 0xFF	; 255
    61b6:	60 e0       	ldi	r22, 0x00	; 0
    61b8:	88 e6       	ldi	r24, 0x68	; 104
    61ba:	c2 de       	rcall	.-636    	; 0x5f40 <i2c_rtc_write>
    61bc:	81 11       	cpse	r24, r1
    61be:	0d c0       	rjmp	.+26     	; 0x61da <rtc_run+0x84>
    61c0:	8f e5       	ldi	r24, 0x5F	; 95
    61c2:	94 e0       	ldi	r25, 0x04	; 4
    61c4:	a0 e0       	ldi	r26, 0x00	; 0
    61c6:	ed b7       	in	r30, 0x3d	; 61
    61c8:	fe b7       	in	r31, 0x3e	; 62
    61ca:	81 83       	std	Z+1, r24	; 0x01
    61cc:	92 83       	std	Z+2, r25	; 0x02
    61ce:	a3 83       	std	Z+3, r26	; 0x03
    61d0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	9f ef       	ldi	r25, 0xFF	; 255
    61d8:	01 c0       	rjmp	.+2      	; 0x61dc <rtc_run+0x86>
    61da:	c8 01       	movw	r24, r16
    61dc:	24 96       	adiw	r28, 0x04	; 4
    61de:	e4 e0       	ldi	r30, 0x04	; 4
    61e0:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

000061e4 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    61e4:	a7 e0       	ldi	r26, 0x07	; 7
    61e6:	b0 e0       	ldi	r27, 0x00	; 0
    61e8:	e8 ef       	ldi	r30, 0xF8	; 248
    61ea:	f0 e3       	ldi	r31, 0x30	; 48
    61ec:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    61f0:	8c 01       	movw	r16, r24
    61f2:	4c 83       	std	Y+4, r20	; 0x04
    61f4:	5d 83       	std	Y+5, r21	; 0x05
    61f6:	6e 83       	std	Y+6, r22	; 0x06
    61f8:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    61fa:	0e df       	rcall	.-484    	; 0x6018 <i2c_rtc_init>

    if(!force)
    61fc:	01 15       	cp	r16, r1
    61fe:	11 05       	cpc	r17, r1
    6200:	39 f4       	brne	.+14     	; 0x6210 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    6202:	8f ef       	ldi	r24, 0xFF	; 255
    6204:	9f ef       	ldi	r25, 0xFF	; 255
    6206:	a7 df       	rcall	.-178    	; 0x6156 <rtc_run>
        if(state < 0)
    6208:	87 fd       	sbrc	r24, 7
    620a:	16 c0       	rjmp	.+44     	; 0x6238 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    620c:	81 11       	cpse	r24, r1
    620e:	22 c0       	rjmp	.+68     	; 0x6254 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    6210:	80 e0       	ldi	r24, 0x00	; 0
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	a0 df       	rcall	.-192    	; 0x6156 <rtc_run>
    6216:	97 fd       	sbrc	r25, 7
    6218:	0f c0       	rjmp	.+30     	; 0x6238 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    621a:	ce 01       	movw	r24, r28
    621c:	04 96       	adiw	r24, 0x04	; 4
    621e:	a3 d6       	rcall	.+3398   	; 0x6f66 <gmtime>
    6220:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    6222:	81 f4       	brne	.+32     	; 0x6244 <rtc_init+0x60>
    6224:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    6226:	94 e0       	ldi	r25, 0x04	; 4
    6228:	a0 e0       	ldi	r26, 0x00	; 0
    622a:	ed b7       	in	r30, 0x3d	; 61
    622c:	fe b7       	in	r31, 0x3e	; 62
    622e:	81 83       	std	Z+1, r24	; 0x01
    6230:	92 83       	std	Z+2, r25	; 0x02
    6232:	a3 83       	std	Z+3, r26	; 0x03
    6234:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    6238:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <rtc_ok+0x1>
            rtc_ok = 0;
    623c:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <rtc_ok>
            return 0;
    6240:	80 e0       	ldi	r24, 0x00	; 0
    6242:	0e c0       	rjmp	.+28     	; 0x6260 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    6244:	ef de       	rcall	.-546    	; 0x6024 <rtc_write>
    6246:	88 23       	and	r24, r24
    6248:	69 f3       	breq	.-38     	; 0x6224 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    624a:	81 e0       	ldi	r24, 0x01	; 1
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	83 df       	rcall	.-250    	; 0x6156 <rtc_run>
    6250:	97 fd       	sbrc	r25, 7
    6252:	f2 cf       	rjmp	.-28     	; 0x6238 <rtc_init+0x54>
    6254:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <rtc_ok+0x1>
    625c:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <rtc_ok>
    6260:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    6262:	e4 e0       	ldi	r30, 0x04	; 4
    6264:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00006268 <islower>:
    6268:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    626a:	21 56       	subi	r18, 0x61	; 97
    626c:	31 09       	sbc	r19, r1
    626e:	81 e0       	ldi	r24, 0x01	; 1
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	2a 31       	cpi	r18, 0x1A	; 26
    6274:	31 05       	cpc	r19, r1
    6276:	10 f0       	brcs	.+4      	; 0x627c <islower+0x14>
    6278:	80 e0       	ldi	r24, 0x00	; 0
    627a:	90 e0       	ldi	r25, 0x00	; 0
    627c:	08 95       	ret

0000627e <toupper>:
    627e:	cf 93       	push	r28
    6280:	df 93       	push	r29
    6282:	ec 01       	movw	r28, r24
    6284:	f1 df       	rcall	.-30     	; 0x6268 <islower>
    6286:	89 2b       	or	r24, r25
    6288:	19 f0       	breq	.+6      	; 0x6290 <toupper+0x12>
    628a:	ce 01       	movw	r24, r28
    628c:	80 97       	sbiw	r24, 0x20	; 32
    628e:	01 c0       	rjmp	.+2      	; 0x6292 <toupper+0x14>
    6290:	ce 01       	movw	r24, r28
    6292:	df 91       	pop	r29
    6294:	cf 91       	pop	r28
    6296:	08 95       	ret

00006298 <strcpy>:
    6298:	fc 01       	movw	r30, r24
    629a:	db 01       	movw	r26, r22
    629c:	2d 91       	ld	r18, X+
    629e:	bd 01       	movw	r22, r26
    62a0:	01 96       	adiw	r24, 0x01	; 1
    62a2:	22 23       	and	r18, r18
    62a4:	11 f0       	breq	.+4      	; 0x62aa <strcpy+0x12>
    62a6:	20 83       	st	Z, r18
    62a8:	f7 cf       	rjmp	.-18     	; 0x6298 <strcpy>
    62aa:	10 82       	st	Z, r1
    62ac:	08 95       	ret

000062ae <strncpy>:
    62ae:	db 01       	movw	r26, r22
    62b0:	fc 01       	movw	r30, r24
    62b2:	2d 91       	ld	r18, X+
    62b4:	21 11       	cpse	r18, r1
    62b6:	03 c0       	rjmp	.+6      	; 0x62be <strncpy+0x10>
    62b8:	4e 0f       	add	r20, r30
    62ba:	5f 1f       	adc	r21, r31
    62bc:	08 c0       	rjmp	.+16     	; 0x62ce <strncpy+0x20>
    62be:	41 15       	cp	r20, r1
    62c0:	51 05       	cpc	r21, r1
    62c2:	21 f0       	breq	.+8      	; 0x62cc <strncpy+0x1e>
    62c4:	21 93       	st	Z+, r18
    62c6:	41 50       	subi	r20, 0x01	; 1
    62c8:	51 09       	sbc	r21, r1
    62ca:	f3 cf       	rjmp	.-26     	; 0x62b2 <strncpy+0x4>
    62cc:	08 95       	ret
    62ce:	4e 17       	cp	r20, r30
    62d0:	5f 07       	cpc	r21, r31
    62d2:	11 f0       	breq	.+4      	; 0x62d8 <strncpy+0x2a>
    62d4:	11 92       	st	Z+, r1
    62d6:	fb cf       	rjmp	.-10     	; 0x62ce <strncpy+0x20>
    62d8:	08 95       	ret

000062da <strcat>:
    62da:	cf 93       	push	r28
    62dc:	df 93       	push	r29
    62de:	d8 2f       	mov	r29, r24
    62e0:	c9 2f       	mov	r28, r25
    62e2:	28 2f       	mov	r18, r24
    62e4:	39 2f       	mov	r19, r25
    62e6:	c9 01       	movw	r24, r18
    62e8:	2f 5f       	subi	r18, 0xFF	; 255
    62ea:	3f 4f       	sbci	r19, 0xFF	; 255
    62ec:	fc 01       	movw	r30, r24
    62ee:	40 81       	ld	r20, Z
    62f0:	41 11       	cpse	r20, r1
    62f2:	f9 cf       	rjmp	.-14     	; 0x62e6 <strcat+0xc>
    62f4:	d1 df       	rcall	.-94     	; 0x6298 <strcpy>
    62f6:	8d 2f       	mov	r24, r29
    62f8:	9c 2f       	mov	r25, r28
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	08 95       	ret

00006300 <reverse>:
    6300:	fc 01       	movw	r30, r24
    6302:	01 90       	ld	r0, Z+
    6304:	00 20       	and	r0, r0
    6306:	e9 f7       	brne	.-6      	; 0x6302 <reverse+0x2>
    6308:	31 97       	sbiw	r30, 0x01	; 1
    630a:	e8 1b       	sub	r30, r24
    630c:	f9 0b       	sbc	r31, r25
    630e:	af 01       	movw	r20, r30
    6310:	55 95       	asr	r21
    6312:	47 95       	ror	r20
    6314:	e8 0f       	add	r30, r24
    6316:	f9 1f       	adc	r31, r25
    6318:	dc 01       	movw	r26, r24
    631a:	9d 01       	movw	r18, r26
    631c:	28 1b       	sub	r18, r24
    631e:	39 0b       	sbc	r19, r25
    6320:	24 17       	cp	r18, r20
    6322:	35 07       	cpc	r19, r21
    6324:	2c f4       	brge	.+10     	; 0x6330 <reverse+0x30>
    6326:	22 91       	ld	r18, -Z
    6328:	3c 91       	ld	r19, X
    632a:	30 83       	st	Z, r19
    632c:	2d 93       	st	X+, r18
    632e:	f5 cf       	rjmp	.-22     	; 0x631a <reverse+0x1a>
    6330:	08 95       	ret

00006332 <strupper>:
    6332:	cf 93       	push	r28
    6334:	df 93       	push	r29
    6336:	ec 01       	movw	r28, r24
    6338:	88 81       	ld	r24, Y
    633a:	88 23       	and	r24, r24
    633c:	21 f0       	breq	.+8      	; 0x6346 <strupper+0x14>
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	9e df       	rcall	.-196    	; 0x627e <toupper>
    6342:	89 93       	st	Y+, r24
    6344:	f9 cf       	rjmp	.-14     	; 0x6338 <strupper+0x6>
    6346:	df 91       	pop	r29
    6348:	cf 91       	pop	r28
    634a:	08 95       	ret

0000634c <strcmp>:
    634c:	dc 01       	movw	r26, r24
    634e:	fb 01       	movw	r30, r22
    6350:	2d 91       	ld	r18, X+
    6352:	41 91       	ld	r20, Z+
    6354:	50 e0       	ldi	r21, 0x00	; 0
    6356:	30 e0       	ldi	r19, 0x00	; 0
    6358:	c9 01       	movw	r24, r18
    635a:	84 1b       	sub	r24, r20
    635c:	95 0b       	sbc	r25, r21
    635e:	11 f4       	brne	.+4      	; 0x6364 <strcmp+0x18>
    6360:	45 2b       	or	r20, r21
    6362:	b1 f7       	brne	.-20     	; 0x6350 <strcmp+0x4>
    6364:	08 95       	ret

00006366 <strcasecmp>:
    6366:	ef 92       	push	r14
    6368:	ff 92       	push	r15
    636a:	0f 93       	push	r16
    636c:	1f 93       	push	r17
    636e:	cf 93       	push	r28
    6370:	df 93       	push	r29
    6372:	7c 01       	movw	r14, r24
    6374:	8b 01       	movw	r16, r22
    6376:	f7 01       	movw	r30, r14
    6378:	81 91       	ld	r24, Z+
    637a:	7f 01       	movw	r14, r30
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	7f df       	rcall	.-258    	; 0x627e <toupper>
    6380:	ec 01       	movw	r28, r24
    6382:	f8 01       	movw	r30, r16
    6384:	81 91       	ld	r24, Z+
    6386:	8f 01       	movw	r16, r30
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	79 df       	rcall	.-270    	; 0x627e <toupper>
    638c:	9c 01       	movw	r18, r24
    638e:	ce 01       	movw	r24, r28
    6390:	82 1b       	sub	r24, r18
    6392:	93 0b       	sbc	r25, r19
    6394:	11 f4       	brne	.+4      	; 0x639a <strcasecmp+0x34>
    6396:	23 2b       	or	r18, r19
    6398:	71 f7       	brne	.-36     	; 0x6376 <strcasecmp+0x10>
    639a:	cd b7       	in	r28, 0x3d	; 61
    639c:	de b7       	in	r29, 0x3e	; 62
    639e:	e6 e0       	ldi	r30, 0x06	; 6
    63a0:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

000063a4 <strncasecmp>:
    63a4:	a0 e0       	ldi	r26, 0x00	; 0
    63a6:	b0 e0       	ldi	r27, 0x00	; 0
    63a8:	e8 ed       	ldi	r30, 0xD8	; 216
    63aa:	f1 e3       	ldi	r31, 0x31	; 49
    63ac:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    63b0:	8c 01       	movw	r16, r24
    63b2:	7b 01       	movw	r14, r22
    63b4:	6c 01       	movw	r12, r24
    63b6:	c4 0e       	add	r12, r20
    63b8:	d5 1e       	adc	r13, r21
    63ba:	0c 15       	cp	r16, r12
    63bc:	1d 05       	cpc	r17, r13
    63be:	99 f0       	breq	.+38     	; 0x63e6 <strncasecmp+0x42>
    63c0:	f8 01       	movw	r30, r16
    63c2:	81 91       	ld	r24, Z+
    63c4:	8f 01       	movw	r16, r30
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	5a df       	rcall	.-332    	; 0x627e <toupper>
    63ca:	ec 01       	movw	r28, r24
    63cc:	f7 01       	movw	r30, r14
    63ce:	81 91       	ld	r24, Z+
    63d0:	7f 01       	movw	r14, r30
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	54 df       	rcall	.-344    	; 0x627e <toupper>
    63d6:	9c 01       	movw	r18, r24
    63d8:	ce 01       	movw	r24, r28
    63da:	82 1b       	sub	r24, r18
    63dc:	93 0b       	sbc	r25, r19
    63de:	29 f4       	brne	.+10     	; 0x63ea <strncasecmp+0x46>
    63e0:	23 2b       	or	r18, r19
    63e2:	59 f7       	brne	.-42     	; 0x63ba <strncasecmp+0x16>
    63e4:	02 c0       	rjmp	.+4      	; 0x63ea <strncasecmp+0x46>
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	cd b7       	in	r28, 0x3d	; 61
    63ec:	de b7       	in	r29, 0x3e	; 62
    63ee:	e8 e0       	ldi	r30, 0x08	; 8
    63f0:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

000063f4 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    63f4:	0f 93       	push	r16
    63f6:	1f 93       	push	r17
    63f8:	cf 93       	push	r28
    63fa:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	99 f0       	breq	.+38     	; 0x6426 <stralloc+0x32>
    6400:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6402:	fc 01       	movw	r30, r24
    6404:	01 90       	ld	r0, Z+
    6406:	00 20       	and	r0, r0
    6408:	e9 f7       	brne	.-6      	; 0x6404 <stralloc+0x10>
    640a:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    640c:	61 e0       	ldi	r22, 0x01	; 1
    640e:	70 e0       	ldi	r23, 0x00	; 0
    6410:	8c 1b       	sub	r24, r28
    6412:	9d 0b       	sbc	r25, r29
    6414:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
    6418:	8c 01       	movw	r16, r24
    if(!ptr)
    641a:	00 97       	sbiw	r24, 0x00	; 0
    641c:	21 f0       	breq	.+8      	; 0x6426 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    641e:	be 01       	movw	r22, r28
    6420:	3b df       	rcall	.-394    	; 0x6298 <strcpy>
    return(ptr);
    6422:	c8 01       	movw	r24, r16
    6424:	02 c0       	rjmp	.+4      	; 0x642a <stralloc+0x36>
    6426:	80 e0       	ldi	r24, 0x00	; 0
    6428:	90 e0       	ldi	r25, 0x00	; 0
}
    642a:	df 91       	pop	r29
    642c:	cf 91       	pop	r28
    642e:	1f 91       	pop	r17
    6430:	0f 91       	pop	r16
    6432:	08 95       	ret

00006434 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6434:	00 d0       	rcall	.+0      	; 0x6436 <sep+0x2>
    6436:	1f 92       	push	r1
    6438:	8e e1       	ldi	r24, 0x1E	; 30
    643a:	95 e0       	ldi	r25, 0x05	; 5
    643c:	a0 e0       	ldi	r26, 0x00	; 0
    643e:	ed b7       	in	r30, 0x3d	; 61
    6440:	fe b7       	in	r31, 0x3e	; 62
    6442:	81 83       	std	Z+1, r24	; 0x01
    6444:	92 83       	std	Z+2, r25	; 0x02
    6446:	a3 83       	std	Z+3, r26	; 0x03
    6448:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    644c:	0f 90       	pop	r0
    644e:	0f 90       	pop	r0
    6450:	0f 90       	pop	r0
    6452:	08 95       	ret

00006454 <trim_tail>:
    6454:	00 97       	sbiw	r24, 0x00	; 0
    6456:	69 f0       	breq	.+26     	; 0x6472 <trim_tail+0x1e>
    6458:	fc 01       	movw	r30, r24
    645a:	01 90       	ld	r0, Z+
    645c:	00 20       	and	r0, r0
    645e:	e9 f7       	brne	.-6      	; 0x645a <trim_tail+0x6>
    6460:	31 97       	sbiw	r30, 0x01	; 1
    6462:	e8 17       	cp	r30, r24
    6464:	f9 07       	cpc	r31, r25
    6466:	29 f0       	breq	.+10     	; 0x6472 <trim_tail+0x1e>
    6468:	22 91       	ld	r18, -Z
    646a:	21 32       	cpi	r18, 0x21	; 33
    646c:	10 f4       	brcc	.+4      	; 0x6472 <trim_tail+0x1e>
    646e:	10 82       	st	Z, r1
    6470:	f8 cf       	rjmp	.-16     	; 0x6462 <trim_tail+0xe>
    6472:	08 95       	ret

00006474 <skipspaces>:
    6474:	00 97       	sbiw	r24, 0x00	; 0
    6476:	39 f0       	breq	.+14     	; 0x6486 <skipspaces+0x12>
    6478:	fc 01       	movw	r30, r24
    647a:	cf 01       	movw	r24, r30
    647c:	21 91       	ld	r18, Z+
    647e:	20 32       	cpi	r18, 0x20	; 32
    6480:	e1 f3       	breq	.-8      	; 0x647a <skipspaces+0x6>
    6482:	29 30       	cpi	r18, 0x09	; 9
    6484:	d1 f3       	breq	.-12     	; 0x647a <skipspaces+0x6>
    6486:	08 95       	ret

00006488 <MATCH>:
    6488:	cf 93       	push	r28
    648a:	df 93       	push	r29
    648c:	fb 01       	movw	r30, r22
    648e:	01 90       	ld	r0, Z+
    6490:	00 20       	and	r0, r0
    6492:	e9 f7       	brne	.-6      	; 0x648e <MATCH+0x6>
    6494:	31 97       	sbiw	r30, 0x01	; 1
    6496:	ef 01       	movw	r28, r30
    6498:	c6 1b       	sub	r28, r22
    649a:	d7 0b       	sbc	r29, r23
    649c:	57 df       	rcall	.-338    	; 0x634c <strcmp>
    649e:	89 2b       	or	r24, r25
    64a0:	11 f4       	brne	.+4      	; 0x64a6 <MATCH+0x1e>
    64a2:	ce 01       	movw	r24, r28
    64a4:	02 c0       	rjmp	.+4      	; 0x64aa <MATCH+0x22>
    64a6:	80 e0       	ldi	r24, 0x00	; 0
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	df 91       	pop	r29
    64ac:	cf 91       	pop	r28
    64ae:	08 95       	ret

000064b0 <MATCHI>:
    64b0:	cf 93       	push	r28
    64b2:	df 93       	push	r29
    64b4:	fb 01       	movw	r30, r22
    64b6:	01 90       	ld	r0, Z+
    64b8:	00 20       	and	r0, r0
    64ba:	e9 f7       	brne	.-6      	; 0x64b6 <MATCHI+0x6>
    64bc:	31 97       	sbiw	r30, 0x01	; 1
    64be:	ef 01       	movw	r28, r30
    64c0:	c6 1b       	sub	r28, r22
    64c2:	d7 0b       	sbc	r29, r23
    64c4:	50 df       	rcall	.-352    	; 0x6366 <strcasecmp>
    64c6:	89 2b       	or	r24, r25
    64c8:	11 f4       	brne	.+4      	; 0x64ce <MATCHI+0x1e>
    64ca:	ce 01       	movw	r24, r28
    64cc:	02 c0       	rjmp	.+4      	; 0x64d2 <MATCHI+0x22>
    64ce:	80 e0       	ldi	r24, 0x00	; 0
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	df 91       	pop	r29
    64d4:	cf 91       	pop	r28
    64d6:	08 95       	ret

000064d8 <MATCHARGS>:
    64d8:	a9 e0       	ldi	r26, 0x09	; 9
    64da:	b0 e0       	ldi	r27, 0x00	; 0
    64dc:	e2 e7       	ldi	r30, 0x72	; 114
    64de:	f2 e3       	ldi	r31, 0x32	; 50
    64e0:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
    64e4:	eb 01       	movw	r28, r22
    64e6:	8a 01       	movw	r16, r20
    64e8:	79 01       	movw	r14, r18
    64ea:	e2 df       	rcall	.-60     	; 0x64b0 <MATCHI>
    64ec:	00 97       	sbiw	r24, 0x00	; 0
    64ee:	c1 f0       	breq	.+48     	; 0x6520 <MATCHARGS+0x48>
    64f0:	e0 16       	cp	r14, r16
    64f2:	f1 06       	cpc	r15, r17
    64f4:	9c f4       	brge	.+38     	; 0x651c <MATCHARGS+0x44>
    64f6:	ed b7       	in	r30, 0x3d	; 61
    64f8:	fe b7       	in	r31, 0x3e	; 62
    64fa:	f1 86       	std	Z+9, r15	; 0x09
    64fc:	e0 86       	std	Z+8, r14	; 0x08
    64fe:	17 83       	std	Z+7, r17	; 0x07
    6500:	06 83       	std	Z+6, r16	; 0x06
    6502:	d5 83       	std	Z+5, r29	; 0x05
    6504:	c4 83       	std	Z+4, r28	; 0x04
    6506:	88 ef       	ldi	r24, 0xF8	; 248
    6508:	94 e0       	ldi	r25, 0x04	; 4
    650a:	a0 e0       	ldi	r26, 0x00	; 0
    650c:	81 83       	std	Z+1, r24	; 0x01
    650e:	92 83       	std	Z+2, r25	; 0x02
    6510:	a3 83       	std	Z+3, r26	; 0x03
    6512:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    6516:	80 e0       	ldi	r24, 0x00	; 0
    6518:	90 e0       	ldi	r25, 0x00	; 0
    651a:	02 c0       	rjmp	.+4      	; 0x6520 <MATCHARGS+0x48>
    651c:	81 e0       	ldi	r24, 0x01	; 1
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	cd b7       	in	r28, 0x3d	; 61
    6522:	de b7       	in	r29, 0x3e	; 62
    6524:	29 96       	adiw	r28, 0x09	; 9
    6526:	e6 e0       	ldi	r30, 0x06	; 6
    6528:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0000652c <MATCHI_LEN>:
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
    6530:	00 97       	sbiw	r24, 0x00	; 0
    6532:	89 f0       	breq	.+34     	; 0x6556 <MATCHI_LEN+0x2a>
    6534:	61 15       	cp	r22, r1
    6536:	71 05       	cpc	r23, r1
    6538:	71 f0       	breq	.+28     	; 0x6556 <MATCHI_LEN+0x2a>
    653a:	eb 01       	movw	r28, r22
    653c:	09 90       	ld	r0, Y+
    653e:	00 20       	and	r0, r0
    6540:	e9 f7       	brne	.-6      	; 0x653c <MATCHI_LEN+0x10>
    6542:	21 97       	sbiw	r28, 0x01	; 1
    6544:	c6 1b       	sub	r28, r22
    6546:	d7 0b       	sbc	r29, r23
    6548:	31 f0       	breq	.+12     	; 0x6556 <MATCHI_LEN+0x2a>
    654a:	ae 01       	movw	r20, r28
    654c:	2b df       	rcall	.-426    	; 0x63a4 <strncasecmp>
    654e:	89 2b       	or	r24, r25
    6550:	11 f4       	brne	.+4      	; 0x6556 <MATCHI_LEN+0x2a>
    6552:	ce 01       	movw	r24, r28
    6554:	02 c0       	rjmp	.+4      	; 0x655a <MATCHI_LEN+0x2e>
    6556:	80 e0       	ldi	r24, 0x00	; 0
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	df 91       	pop	r29
    655c:	cf 91       	pop	r28
    655e:	08 95       	ret

00006560 <split_args>:
    6560:	a0 e0       	ldi	r26, 0x00	; 0
    6562:	b0 e0       	ldi	r27, 0x00	; 0
    6564:	e6 eb       	ldi	r30, 0xB6	; 182
    6566:	f2 e3       	ldi	r31, 0x32	; 50
    6568:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    656c:	dc 01       	movw	r26, r24
    656e:	6a 01       	movw	r12, r20
    6570:	8b 01       	movw	r16, r22
    6572:	fb 01       	movw	r30, r22
    6574:	80 e0       	ldi	r24, 0x00	; 0
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	8c 15       	cp	r24, r12
    657a:	9d 05       	cpc	r25, r13
    657c:	24 f4       	brge	.+8      	; 0x6586 <split_args+0x26>
    657e:	11 92       	st	Z+, r1
    6580:	11 92       	st	Z+, r1
    6582:	01 96       	adiw	r24, 0x01	; 1
    6584:	f9 cf       	rjmp	.-14     	; 0x6578 <split_args+0x18>
    6586:	c1 14       	cp	r12, r1
    6588:	d1 04       	cpc	r13, r1
    658a:	d9 f1       	breq	.+118    	; 0x6602 <split_args+0xa2>
    658c:	10 97       	sbiw	r26, 0x00	; 0
    658e:	c9 f1       	breq	.+114    	; 0x6602 <split_args+0xa2>
    6590:	ee 24       	eor	r14, r14
    6592:	e3 94       	inc	r14
    6594:	f1 2c       	mov	r15, r1
    6596:	c0 e0       	ldi	r28, 0x00	; 0
    6598:	d0 e0       	ldi	r29, 0x00	; 0
    659a:	8c 91       	ld	r24, X
    659c:	88 23       	and	r24, r24
    659e:	b1 f1       	breq	.+108    	; 0x660c <split_args+0xac>
    65a0:	cc 15       	cp	r28, r12
    65a2:	dd 05       	cpc	r29, r13
    65a4:	9c f5       	brge	.+102    	; 0x660c <split_args+0xac>
    65a6:	cd 01       	movw	r24, r26
    65a8:	65 df       	rcall	.-310    	; 0x6474 <skipspaces>
    65aa:	dc 01       	movw	r26, r24
    65ac:	2c 91       	ld	r18, X
    65ae:	22 23       	and	r18, r18
    65b0:	69 f1       	breq	.+90     	; 0x660c <split_args+0xac>
    65b2:	22 32       	cpi	r18, 0x22	; 34
    65b4:	79 f4       	brne	.+30     	; 0x65d4 <split_args+0x74>
    65b6:	fc 01       	movw	r30, r24
    65b8:	31 96       	adiw	r30, 0x01	; 1
    65ba:	d8 01       	movw	r26, r16
    65bc:	ed 93       	st	X+, r30
    65be:	fc 93       	st	X, r31
    65c0:	df 01       	movw	r26, r30
    65c2:	80 81       	ld	r24, Z
    65c4:	31 96       	adiw	r30, 0x01	; 1
    65c6:	88 23       	and	r24, r24
    65c8:	a9 f0       	breq	.+42     	; 0x65f4 <split_args+0x94>
    65ca:	82 32       	cpi	r24, 0x22	; 34
    65cc:	c9 f7       	brne	.-14     	; 0x65c0 <split_args+0x60>
    65ce:	1c 92       	st	X, r1
    65d0:	df 01       	movw	r26, r30
    65d2:	10 c0       	rjmp	.+32     	; 0x65f4 <split_args+0x94>
    65d4:	f8 01       	movw	r30, r16
    65d6:	91 83       	std	Z+1, r25	; 0x01
    65d8:	80 83       	st	Z, r24
    65da:	fc 01       	movw	r30, r24
    65dc:	2e 2f       	mov	r18, r30
    65de:	9f 2f       	mov	r25, r31
    65e0:	81 91       	ld	r24, Z+
    65e2:	3f ed       	ldi	r19, 0xDF	; 223
    65e4:	38 0f       	add	r19, r24
    65e6:	3e 35       	cpi	r19, 0x5E	; 94
    65e8:	c8 f3       	brcs	.-14     	; 0x65dc <split_args+0x7c>
    65ea:	88 23       	and	r24, r24
    65ec:	69 f0       	breq	.+26     	; 0x6608 <split_args+0xa8>
    65ee:	a2 2f       	mov	r26, r18
    65f0:	b9 2f       	mov	r27, r25
    65f2:	1d 92       	st	X+, r1
    65f4:	21 96       	adiw	r28, 0x01	; 1
    65f6:	ff ef       	ldi	r31, 0xFF	; 255
    65f8:	ef 1a       	sub	r14, r31
    65fa:	ff 0a       	sbc	r15, r31
    65fc:	0e 5f       	subi	r16, 0xFE	; 254
    65fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6600:	cc cf       	rjmp	.-104    	; 0x659a <split_args+0x3a>
    6602:	80 e0       	ldi	r24, 0x00	; 0
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	03 c0       	rjmp	.+6      	; 0x660e <split_args+0xae>
    6608:	c7 01       	movw	r24, r14
    660a:	01 c0       	rjmp	.+2      	; 0x660e <split_args+0xae>
    660c:	ce 01       	movw	r24, r28
    660e:	cd b7       	in	r28, 0x3d	; 61
    6610:	de b7       	in	r29, 0x3e	; 62
    6612:	e8 e0       	ldi	r30, 0x08	; 8
    6614:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

00006618 <get_token>:
    6618:	ef 92       	push	r14
    661a:	ff 92       	push	r15
    661c:	0f 93       	push	r16
    661e:	1f 93       	push	r17
    6620:	cf 93       	push	r28
    6622:	df 93       	push	r29
    6624:	eb 01       	movw	r28, r22
    6626:	8a 01       	movw	r16, r20
    6628:	18 82       	st	Y, r1
    662a:	00 97       	sbiw	r24, 0x00	; 0
    662c:	89 f1       	breq	.+98     	; 0x6690 <get_token+0x78>
    662e:	fc 01       	movw	r30, r24
    6630:	20 81       	ld	r18, Z
    6632:	22 23       	and	r18, r18
    6634:	79 f1       	breq	.+94     	; 0x6694 <get_token+0x7c>
    6636:	1e df       	rcall	.-452    	; 0x6474 <skipspaces>
    6638:	7c 01       	movw	r14, r24
    663a:	0c df       	rcall	.-488    	; 0x6454 <trim_tail>
    663c:	f7 01       	movw	r30, r14
    663e:	cf 01       	movw	r24, r30
    6640:	21 91       	ld	r18, Z+
    6642:	21 32       	cpi	r18, 0x21	; 33
    6644:	e0 f0       	brcs	.+56     	; 0x667e <get_token+0x66>
    6646:	10 16       	cp	r1, r16
    6648:	11 06       	cpc	r1, r17
    664a:	cc f4       	brge	.+50     	; 0x667e <get_token+0x66>
    664c:	22 32       	cpi	r18, 0x22	; 34
    664e:	79 f4       	brne	.+30     	; 0x666e <get_token+0x56>
    6650:	fc 01       	movw	r30, r24
    6652:	31 96       	adiw	r30, 0x01	; 1
    6654:	0c 0f       	add	r16, r28
    6656:	1d 1f       	adc	r17, r29
    6658:	cf 01       	movw	r24, r30
    665a:	21 91       	ld	r18, Z+
    665c:	22 23       	and	r18, r18
    665e:	79 f0       	breq	.+30     	; 0x667e <get_token+0x66>
    6660:	22 32       	cpi	r18, 0x22	; 34
    6662:	59 f0       	breq	.+22     	; 0x667a <get_token+0x62>
    6664:	c0 17       	cp	r28, r16
    6666:	d1 07       	cpc	r29, r17
    6668:	51 f0       	breq	.+20     	; 0x667e <get_token+0x66>
    666a:	29 93       	st	Y+, r18
    666c:	f5 cf       	rjmp	.-22     	; 0x6658 <get_token+0x40>
    666e:	2c 32       	cpi	r18, 0x2C	; 44
    6670:	31 f0       	breq	.+12     	; 0x667e <get_token+0x66>
    6672:	29 93       	st	Y+, r18
    6674:	01 50       	subi	r16, 0x01	; 1
    6676:	11 09       	sbc	r17, r1
    6678:	e2 cf       	rjmp	.-60     	; 0x663e <get_token+0x26>
    667a:	cf 01       	movw	r24, r30
    667c:	18 82       	st	Y, r1
    667e:	fa de       	rcall	.-524    	; 0x6474 <skipspaces>
    6680:	fc 01       	movw	r30, r24
    6682:	80 81       	ld	r24, Z
    6684:	8c 32       	cpi	r24, 0x2C	; 44
    6686:	09 f4       	brne	.+2      	; 0x668a <get_token+0x72>
    6688:	31 96       	adiw	r30, 0x01	; 1
    668a:	18 82       	st	Y, r1
    668c:	cf 01       	movw	r24, r30
    668e:	02 c0       	rjmp	.+4      	; 0x6694 <get_token+0x7c>
    6690:	80 e0       	ldi	r24, 0x00	; 0
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	cd b7       	in	r28, 0x3d	; 61
    6696:	de b7       	in	r29, 0x3e	; 62
    6698:	e6 e0       	ldi	r30, 0x06	; 6
    669a:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0000669e <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    669e:	a2 e0       	ldi	r26, 0x02	; 2
    66a0:	b0 e0       	ldi	r27, 0x00	; 0
    66a2:	e5 e5       	ldi	r30, 0x55	; 85
    66a4:	f3 e3       	ldi	r31, 0x33	; 51
    66a6:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    66aa:	00 97       	sbiw	r24, 0x00	; 0
    66ac:	79 f1       	breq	.+94     	; 0x670c <get_value+0x6e>
    66ae:	fc 01       	movw	r30, r24
    66b0:	20 81       	ld	r18, Z
    66b2:	22 23       	and	r18, r18
    66b4:	59 f1       	breq	.+86     	; 0x670c <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    66b6:	de de       	rcall	.-580    	; 0x6474 <skipspaces>
    66b8:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    66ba:	6f e2       	ldi	r22, 0x2F	; 47
    66bc:	73 e0       	ldi	r23, 0x03	; 3
    66be:	36 df       	rcall	.-404    	; 0x652c <MATCHI_LEN>
    66c0:	00 97       	sbiw	r24, 0x00	; 0
    66c2:	29 f0       	breq	.+10     	; 0x66ce <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    66c4:	08 0f       	add	r16, r24
    66c6:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    66c8:	40 e1       	ldi	r20, 0x10	; 16
    66ca:	50 e0       	ldi	r21, 0x00	; 0
    66cc:	18 c0       	rjmp	.+48     	; 0x66fe <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    66ce:	62 e3       	ldi	r22, 0x32	; 50
    66d0:	73 e0       	ldi	r23, 0x03	; 3
    66d2:	c8 01       	movw	r24, r16
    66d4:	2b df       	rcall	.-426    	; 0x652c <MATCHI_LEN>
    66d6:	00 97       	sbiw	r24, 0x00	; 0
    66d8:	29 f0       	breq	.+10     	; 0x66e4 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    66da:	08 0f       	add	r16, r24
    66dc:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    66de:	48 e0       	ldi	r20, 0x08	; 8
    66e0:	50 e0       	ldi	r21, 0x00	; 0
    66e2:	0d c0       	rjmp	.+26     	; 0x66fe <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    66e4:	65 e3       	ldi	r22, 0x35	; 53
    66e6:	73 e0       	ldi	r23, 0x03	; 3
    66e8:	c8 01       	movw	r24, r16
    66ea:	20 df       	rcall	.-448    	; 0x652c <MATCHI_LEN>
    66ec:	00 97       	sbiw	r24, 0x00	; 0
    66ee:	29 f0       	breq	.+10     	; 0x66fa <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    66f0:	08 0f       	add	r16, r24
    66f2:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    66f4:	42 e0       	ldi	r20, 0x02	; 2
    66f6:	50 e0       	ldi	r21, 0x00	; 0
    66f8:	02 c0       	rjmp	.+4      	; 0x66fe <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    66fa:	4a e0       	ldi	r20, 0x0A	; 10
    66fc:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    66fe:	be 01       	movw	r22, r28
    6700:	6f 5f       	subi	r22, 0xFF	; 255
    6702:	7f 4f       	sbci	r23, 0xFF	; 255
    6704:	c8 01       	movw	r24, r16
    6706:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
    670a:	03 c0       	rjmp	.+6      	; 0x6712 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    670c:	60 e0       	ldi	r22, 0x00	; 0
    670e:	70 e0       	ldi	r23, 0x00	; 0
    6710:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6712:	22 96       	adiw	r28, 0x02	; 2
    6714:	e4 e0       	ldi	r30, 0x04	; 4
    6716:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

0000671a <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    671a:	78 94       	sei
    671c:	08 95       	ret

0000671e <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    671e:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6720:	89 e0       	ldi	r24, 0x09	; 9
    6722:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6726:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    672a:	8f e1       	ldi	r24, 0x1F	; 31
    672c:	9e e4       	ldi	r25, 0x4E	; 78
    672e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6732:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6736:	ef e6       	ldi	r30, 0x6F	; 111
    6738:	f0 e0       	ldi	r31, 0x00	; 0
    673a:	80 81       	ld	r24, Z
    673c:	82 60       	ori	r24, 0x02	; 2
    673e:	80 83       	st	Z, r24
    sei();
    6740:	78 94       	sei
    6742:	08 95       	ret

00006744 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6744:	1f 92       	push	r1
    6746:	0f 92       	push	r0
    6748:	0f b6       	in	r0, 0x3f	; 63
    674a:	0f 92       	push	r0
    674c:	11 24       	eor	r1, r1
    674e:	0b b6       	in	r0, 0x3b	; 59
    6750:	0f 92       	push	r0
    6752:	2f 93       	push	r18
    6754:	3f 93       	push	r19
    6756:	4f 93       	push	r20
    6758:	5f 93       	push	r21
    675a:	6f 93       	push	r22
    675c:	7f 93       	push	r23
    675e:	8f 93       	push	r24
    6760:	9f 93       	push	r25
    6762:	af 93       	push	r26
    6764:	bf 93       	push	r27
    6766:	ef 93       	push	r30
    6768:	ff 93       	push	r31
    execute_timers();
    676a:	36 d2       	rcall	.+1132   	; 0x6bd8 <execute_timers>
}
    676c:	ff 91       	pop	r31
    676e:	ef 91       	pop	r30
    6770:	bf 91       	pop	r27
    6772:	af 91       	pop	r26
    6774:	9f 91       	pop	r25
    6776:	8f 91       	pop	r24
    6778:	7f 91       	pop	r23
    677a:	6f 91       	pop	r22
    677c:	5f 91       	pop	r21
    677e:	4f 91       	pop	r20
    6780:	3f 91       	pop	r19
    6782:	2f 91       	pop	r18
    6784:	0f 90       	pop	r0
    6786:	0b be       	out	0x3b, r0	; 59
    6788:	0f 90       	pop	r0
    678a:	0f be       	out	0x3f, r0	; 63
    678c:	0f 90       	pop	r0
    678e:	1f 90       	pop	r1
    6790:	18 95       	reti

00006792 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6792:	0f 93       	push	r16
    6794:	1f 93       	push	r17
    6796:	cf 93       	push	r28
    6798:	df 93       	push	r29
    679a:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    679c:	f8 94       	cli

    count1 = TCNT1;
    679e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    67a2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    67a6:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    67aa:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    67ae:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    67b2:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    67b6:	80 83       	st	Z, r24
    67b8:	91 83       	std	Z+1, r25	; 0x01
    67ba:	a2 83       	std	Z+2, r26	; 0x02
    67bc:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    67be:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    67c2:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    67c6:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    67ca:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    67ce:	84 83       	std	Z+4, r24	; 0x04
    67d0:	95 83       	std	Z+5, r25	; 0x05
    67d2:	a6 83       	std	Z+6, r26	; 0x06
    67d4:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    67d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    67da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    67de:	b1 9b       	sbis	0x16, 1	; 22
    67e0:	03 c0       	rjmp	.+6      	; 0x67e8 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    67e2:	c0 e0       	ldi	r28, 0x00	; 0
    67e4:	d0 e0       	ldi	r29, 0x00	; 0
    67e6:	3f c0       	rjmp	.+126    	; 0x6866 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    67e8:	82 17       	cp	r24, r18
    67ea:	93 07       	cpc	r25, r19
    67ec:	d0 f1       	brcs	.+116    	; 0x6862 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    67ee:	c0 e0       	ldi	r28, 0x00	; 0
    67f0:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    67f2:	40 e0       	ldi	r20, 0x00	; 0
    67f4:	50 e0       	ldi	r21, 0x00	; 0
    67f6:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    67f8:	9a 01       	movw	r18, r20
    67fa:	ab 01       	movw	r20, r22
    67fc:	28 0f       	add	r18, r24
    67fe:	39 1f       	adc	r19, r25
    6800:	41 1d       	adc	r20, r1
    6802:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6804:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6806:	a2 e3       	ldi	r26, 0x32	; 50
    6808:	b0 e0       	ldi	r27, 0x00	; 0
    680a:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    680e:	04 81       	ldd	r16, Z+4	; 0x04
    6810:	15 81       	ldd	r17, Z+5	; 0x05
    6812:	26 81       	ldd	r18, Z+6	; 0x06
    6814:	37 81       	ldd	r19, Z+7	; 0x07
    6816:	dc 01       	movw	r26, r24
    6818:	cb 01       	movw	r24, r22
    681a:	80 0f       	add	r24, r16
    681c:	91 1f       	adc	r25, r17
    681e:	a2 1f       	adc	r26, r18
    6820:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6822:	81 15       	cp	r24, r1
    6824:	2a ec       	ldi	r18, 0xCA	; 202
    6826:	92 07       	cpc	r25, r18
    6828:	2a e9       	ldi	r18, 0x9A	; 154
    682a:	a2 07       	cpc	r26, r18
    682c:	2b e3       	ldi	r18, 0x3B	; 59
    682e:	b2 07       	cpc	r27, r18
    6830:	2c f4       	brge	.+10     	; 0x683c <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6832:	84 83       	std	Z+4, r24	; 0x04
    6834:	95 83       	std	Z+5, r25	; 0x05
    6836:	a6 83       	std	Z+6, r26	; 0x06
    6838:	b7 83       	std	Z+7, r27	; 0x07
    683a:	1a c0       	rjmp	.+52     	; 0x6870 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    683c:	9a 5c       	subi	r25, 0xCA	; 202
    683e:	aa 49       	sbci	r26, 0x9A	; 154
    6840:	bb 43       	sbci	r27, 0x3B	; 59
    6842:	84 83       	std	Z+4, r24	; 0x04
    6844:	95 83       	std	Z+5, r25	; 0x05
    6846:	a6 83       	std	Z+6, r26	; 0x06
    6848:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    684a:	80 81       	ld	r24, Z
    684c:	91 81       	ldd	r25, Z+1	; 0x01
    684e:	a2 81       	ldd	r26, Z+2	; 0x02
    6850:	b3 81       	ldd	r27, Z+3	; 0x03
    6852:	01 96       	adiw	r24, 0x01	; 1
    6854:	a1 1d       	adc	r26, r1
    6856:	b1 1d       	adc	r27, r1
    6858:	80 83       	st	Z, r24
    685a:	91 83       	std	Z+1, r25	; 0x01
    685c:	a2 83       	std	Z+2, r26	; 0x02
    685e:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6860:	07 c0       	rjmp	.+14     	; 0x6870 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6862:	cf ef       	ldi	r28, 0xFF	; 255
    6864:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6866:	40 e2       	ldi	r20, 0x20	; 32
    6868:	5e e4       	ldi	r21, 0x4E	; 78
    686a:	60 e0       	ldi	r22, 0x00	; 0
    686c:	70 e0       	ldi	r23, 0x00	; 0
    686e:	c4 cf       	rjmp	.-120    	; 0x67f8 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6870:	ce 01       	movw	r24, r28
    6872:	df 91       	pop	r29
    6874:	cf 91       	pop	r28
    6876:	1f 91       	pop	r17
    6878:	0f 91       	pop	r16
    687a:	08 95       	ret

0000687c <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    687c:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6880:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6884:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6888:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    688c:	80 5c       	subi	r24, 0xC0	; 192
    688e:	9d 4b       	sbci	r25, 0xBD	; 189
    6890:	a0 4f       	sbci	r26, 0xF0	; 240
    6892:	bf 4f       	sbci	r27, 0xFF	; 255
    6894:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    6898:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    689c:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    68a0:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    68a4:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    68a8:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    68ac:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    68b0:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    68b4:	81 15       	cp	r24, r1
    68b6:	9a 4c       	sbci	r25, 0xCA	; 202
    68b8:	aa 49       	sbci	r26, 0x9A	; 154
    68ba:	bb 43       	sbci	r27, 0x3B	; 59
    68bc:	dc f0       	brlt	.+54     	; 0x68f4 <clock_task+0x78>
    68be:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    68c2:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    68c6:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    68ca:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    68ce:	01 96       	adiw	r24, 0x01	; 1
    68d0:	a1 1d       	adc	r26, r1
    68d2:	b1 1d       	adc	r27, r1
    68d4:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    68d8:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    68dc:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    68e0:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    68e4:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x4>
    68e8:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <__clock+0x5>
    68ec:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <__clock+0x6>
    68f0:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <__clock+0x7>
    68f4:	08 95       	ret

000068f6 <clock_settime.part.2>:
    68f6:	fc 01       	movw	r30, r24
    68f8:	84 81       	ldd	r24, Z+4	; 0x04
    68fa:	95 81       	ldd	r25, Z+5	; 0x05
    68fc:	a6 81       	ldd	r26, Z+6	; 0x06
    68fe:	b7 81       	ldd	r27, Z+7	; 0x07
    6900:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    6904:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    6908:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    690c:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    6910:	80 81       	ld	r24, Z
    6912:	91 81       	ldd	r25, Z+1	; 0x01
    6914:	a2 81       	ldd	r26, Z+2	; 0x02
    6916:	b3 81       	ldd	r27, Z+3	; 0x03
    6918:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    691c:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    6920:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    6924:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    6928:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    692c:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6930:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6934:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6938:	44 81       	ldd	r20, Z+4	; 0x04
    693a:	55 81       	ldd	r21, Z+5	; 0x05
    693c:	66 81       	ldd	r22, Z+6	; 0x06
    693e:	77 81       	ldd	r23, Z+7	; 0x07
    6940:	48 17       	cp	r20, r24
    6942:	59 07       	cpc	r21, r25
    6944:	6a 07       	cpc	r22, r26
    6946:	7b 07       	cpc	r23, r27
    6948:	b9 f6       	brne	.-82     	; 0x68f8 <clock_settime.part.2+0x2>
    694a:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    694e:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6952:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6956:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    695a:	40 81       	ld	r20, Z
    695c:	51 81       	ldd	r21, Z+1	; 0x01
    695e:	62 81       	ldd	r22, Z+2	; 0x02
    6960:	73 81       	ldd	r23, Z+3	; 0x03
    6962:	48 17       	cp	r20, r24
    6964:	59 07       	cpc	r21, r25
    6966:	6a 07       	cpc	r22, r26
    6968:	7b 07       	cpc	r23, r27
    696a:	31 f6       	brne	.-116    	; 0x68f8 <clock_settime.part.2+0x2>
    696c:	80 e0       	ldi	r24, 0x00	; 0
    696e:	90 e0       	ldi	r25, 0x00	; 0
    6970:	08 95       	ret

00006972 <set_timers>:
    6972:	00 d0       	rcall	.+0      	; 0x6974 <set_timers+0x2>
    6974:	1f 92       	push	r1
    6976:	00 97       	sbiw	r24, 0x00	; 0
    6978:	79 f1       	breq	.+94     	; 0x69d8 <set_timers+0x66>
    697a:	e8 e5       	ldi	r30, 0x58	; 88
    697c:	fa e1       	ldi	r31, 0x1A	; 26
    697e:	4f ef       	ldi	r20, 0xFF	; 255
    6980:	5f ef       	ldi	r21, 0xFF	; 255
    6982:	20 e0       	ldi	r18, 0x00	; 0
    6984:	30 e0       	ldi	r19, 0x00	; 0
    6986:	60 81       	ld	r22, Z
    6988:	71 81       	ldd	r23, Z+1	; 0x01
    698a:	86 17       	cp	r24, r22
    698c:	97 07       	cpc	r25, r23
    698e:	79 f0       	breq	.+30     	; 0x69ae <set_timers+0x3c>
    6990:	67 2b       	or	r22, r23
    6992:	71 f4       	brne	.+28     	; 0x69b0 <set_timers+0x3e>
    6994:	f9 01       	movw	r30, r18
    6996:	ee 0f       	add	r30, r30
    6998:	ff 1f       	adc	r31, r31
    699a:	e2 0f       	add	r30, r18
    699c:	f3 1f       	adc	r31, r19
    699e:	e8 5a       	subi	r30, 0xA8	; 168
    69a0:	f5 4e       	sbci	r31, 0xE5	; 229
    69a2:	91 83       	std	Z+1, r25	; 0x01
    69a4:	80 83       	st	Z, r24
    69a6:	81 e0       	ldi	r24, 0x01	; 1
    69a8:	82 83       	std	Z+2, r24	; 0x02
    69aa:	c9 01       	movw	r24, r18
    69ac:	19 c0       	rjmp	.+50     	; 0x69e0 <set_timers+0x6e>
    69ae:	a9 01       	movw	r20, r18
    69b0:	2f 5f       	subi	r18, 0xFF	; 255
    69b2:	3f 4f       	sbci	r19, 0xFF	; 255
    69b4:	33 96       	adiw	r30, 0x03	; 3
    69b6:	28 30       	cpi	r18, 0x08	; 8
    69b8:	31 05       	cpc	r19, r1
    69ba:	29 f7       	brne	.-54     	; 0x6986 <set_timers+0x14>
    69bc:	4f 3f       	cpi	r20, 0xFF	; 255
    69be:	8f ef       	ldi	r24, 0xFF	; 255
    69c0:	58 07       	cpc	r21, r24
    69c2:	69 f4       	brne	.+26     	; 0x69de <set_timers+0x6c>
    69c4:	8d ec       	ldi	r24, 0xCD	; 205
    69c6:	95 e0       	ldi	r25, 0x05	; 5
    69c8:	a0 e0       	ldi	r26, 0x00	; 0
    69ca:	ed b7       	in	r30, 0x3d	; 61
    69cc:	fe b7       	in	r31, 0x3e	; 62
    69ce:	81 83       	std	Z+1, r24	; 0x01
    69d0:	92 83       	std	Z+2, r25	; 0x02
    69d2:	a3 83       	std	Z+3, r26	; 0x03
    69d4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    69d8:	8f ef       	ldi	r24, 0xFF	; 255
    69da:	9f ef       	ldi	r25, 0xFF	; 255
    69dc:	01 c0       	rjmp	.+2      	; 0x69e0 <set_timers+0x6e>
    69de:	ca 01       	movw	r24, r20
    69e0:	0f 90       	pop	r0
    69e2:	0f 90       	pop	r0
    69e4:	0f 90       	pop	r0
    69e6:	08 95       	ret

000069e8 <delete_all_timers>:
    69e8:	e8 e5       	ldi	r30, 0x58	; 88
    69ea:	fa e1       	ldi	r31, 0x1A	; 26
    69ec:	12 82       	std	Z+2, r1	; 0x02
    69ee:	11 82       	std	Z+1, r1	; 0x01
    69f0:	10 82       	st	Z, r1
    69f2:	33 96       	adiw	r30, 0x03	; 3
    69f4:	8a e1       	ldi	r24, 0x1A	; 26
    69f6:	e0 37       	cpi	r30, 0x70	; 112
    69f8:	f8 07       	cpc	r31, r24
    69fa:	c1 f7       	brne	.-16     	; 0x69ec <delete_all_timers+0x4>
    69fc:	08 95       	ret

000069fe <subtract_timespec>:
    69fe:	0f 93       	push	r16
    6a00:	1f 93       	push	r17
    6a02:	cf 93       	push	r28
    6a04:	df 93       	push	r29
    6a06:	fc 01       	movw	r30, r24
    6a08:	84 81       	ldd	r24, Z+4	; 0x04
    6a0a:	95 81       	ldd	r25, Z+5	; 0x05
    6a0c:	a6 81       	ldd	r26, Z+6	; 0x06
    6a0e:	b7 81       	ldd	r27, Z+7	; 0x07
    6a10:	eb 01       	movw	r28, r22
    6a12:	0c 81       	ldd	r16, Y+4	; 0x04
    6a14:	1d 81       	ldd	r17, Y+5	; 0x05
    6a16:	2e 81       	ldd	r18, Y+6	; 0x06
    6a18:	3f 81       	ldd	r19, Y+7	; 0x07
    6a1a:	80 1b       	sub	r24, r16
    6a1c:	91 0b       	sbc	r25, r17
    6a1e:	a2 0b       	sbc	r26, r18
    6a20:	b3 0b       	sbc	r27, r19
    6a22:	b7 fd       	sbrc	r27, 7
    6a24:	05 c0       	rjmp	.+10     	; 0x6a30 <subtract_timespec+0x32>
    6a26:	84 83       	std	Z+4, r24	; 0x04
    6a28:	95 83       	std	Z+5, r25	; 0x05
    6a2a:	a6 83       	std	Z+6, r26	; 0x06
    6a2c:	b7 83       	std	Z+7, r27	; 0x07
    6a2e:	12 c0       	rjmp	.+36     	; 0x6a54 <subtract_timespec+0x56>
    6a30:	96 53       	subi	r25, 0x36	; 54
    6a32:	a5 46       	sbci	r26, 0x65	; 101
    6a34:	b4 4c       	sbci	r27, 0xC4	; 196
    6a36:	84 83       	std	Z+4, r24	; 0x04
    6a38:	95 83       	std	Z+5, r25	; 0x05
    6a3a:	a6 83       	std	Z+6, r26	; 0x06
    6a3c:	b7 83       	std	Z+7, r27	; 0x07
    6a3e:	80 81       	ld	r24, Z
    6a40:	91 81       	ldd	r25, Z+1	; 0x01
    6a42:	a2 81       	ldd	r26, Z+2	; 0x02
    6a44:	b3 81       	ldd	r27, Z+3	; 0x03
    6a46:	01 97       	sbiw	r24, 0x01	; 1
    6a48:	a1 09       	sbc	r26, r1
    6a4a:	b1 09       	sbc	r27, r1
    6a4c:	80 83       	st	Z, r24
    6a4e:	91 83       	std	Z+1, r25	; 0x01
    6a50:	a2 83       	std	Z+2, r26	; 0x02
    6a52:	b3 83       	std	Z+3, r27	; 0x03
    6a54:	80 81       	ld	r24, Z
    6a56:	91 81       	ldd	r25, Z+1	; 0x01
    6a58:	a2 81       	ldd	r26, Z+2	; 0x02
    6a5a:	b3 81       	ldd	r27, Z+3	; 0x03
    6a5c:	eb 01       	movw	r28, r22
    6a5e:	48 81       	ld	r20, Y
    6a60:	59 81       	ldd	r21, Y+1	; 0x01
    6a62:	6a 81       	ldd	r22, Y+2	; 0x02
    6a64:	7b 81       	ldd	r23, Y+3	; 0x03
    6a66:	84 1b       	sub	r24, r20
    6a68:	95 0b       	sbc	r25, r21
    6a6a:	a6 0b       	sbc	r26, r22
    6a6c:	b7 0b       	sbc	r27, r23
    6a6e:	80 83       	st	Z, r24
    6a70:	91 83       	std	Z+1, r25	; 0x01
    6a72:	a2 83       	std	Z+2, r26	; 0x02
    6a74:	b3 83       	std	Z+3, r27	; 0x03
    6a76:	df 91       	pop	r29
    6a78:	cf 91       	pop	r28
    6a7a:	1f 91       	pop	r17
    6a7c:	0f 91       	pop	r16
    6a7e:	08 95       	ret

00006a80 <ts_to_str>:
    6a80:	ad b7       	in	r26, 0x3d	; 61
    6a82:	be b7       	in	r27, 0x3e	; 62
    6a84:	1f 97       	sbiw	r26, 0x0f	; 15
    6a86:	0f b6       	in	r0, 0x3f	; 63
    6a88:	f8 94       	cli
    6a8a:	be bf       	out	0x3e, r27	; 62
    6a8c:	0f be       	out	0x3f, r0	; 63
    6a8e:	ad bf       	out	0x3d, r26	; 61
    6a90:	fc 01       	movw	r30, r24
    6a92:	44 81       	ldd	r20, Z+4	; 0x04
    6a94:	55 81       	ldd	r21, Z+5	; 0x05
    6a96:	66 81       	ldd	r22, Z+6	; 0x06
    6a98:	77 81       	ldd	r23, Z+7	; 0x07
    6a9a:	ed b7       	in	r30, 0x3d	; 61
    6a9c:	fe b7       	in	r31, 0x3e	; 62
    6a9e:	44 87       	std	Z+12, r20	; 0x0c
    6aa0:	55 87       	std	Z+13, r21	; 0x0d
    6aa2:	66 87       	std	Z+14, r22	; 0x0e
    6aa4:	77 87       	std	Z+15, r23	; 0x0f
    6aa6:	fc 01       	movw	r30, r24
    6aa8:	80 81       	ld	r24, Z
    6aaa:	91 81       	ldd	r25, Z+1	; 0x01
    6aac:	a2 81       	ldd	r26, Z+2	; 0x02
    6aae:	b3 81       	ldd	r27, Z+3	; 0x03
    6ab0:	ed b7       	in	r30, 0x3d	; 61
    6ab2:	fe b7       	in	r31, 0x3e	; 62
    6ab4:	80 87       	std	Z+8, r24	; 0x08
    6ab6:	91 87       	std	Z+9, r25	; 0x09
    6ab8:	a2 87       	std	Z+10, r26	; 0x0a
    6aba:	b3 87       	std	Z+11, r27	; 0x0b
    6abc:	83 ec       	ldi	r24, 0xC3	; 195
    6abe:	95 e0       	ldi	r25, 0x05	; 5
    6ac0:	a0 e0       	ldi	r26, 0x00	; 0
    6ac2:	85 83       	std	Z+5, r24	; 0x05
    6ac4:	96 83       	std	Z+6, r25	; 0x06
    6ac6:	a7 83       	std	Z+7, r26	; 0x07
    6ac8:	8f e1       	ldi	r24, 0x1F	; 31
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	94 83       	std	Z+4, r25	; 0x04
    6ace:	83 83       	std	Z+3, r24	; 0x03
    6ad0:	84 e8       	ldi	r24, 0x84	; 132
    6ad2:	97 e1       	ldi	r25, 0x17	; 23
    6ad4:	92 83       	std	Z+2, r25	; 0x02
    6ad6:	81 83       	std	Z+1, r24	; 0x01
    6ad8:	0e 94 e3 46 	call	0x8dc6	; 0x8dc6 <snprintf_P>
    6adc:	84 e8       	ldi	r24, 0x84	; 132
    6ade:	97 e1       	ldi	r25, 0x17	; 23
    6ae0:	ad b7       	in	r26, 0x3d	; 61
    6ae2:	be b7       	in	r27, 0x3e	; 62
    6ae4:	1f 96       	adiw	r26, 0x0f	; 15
    6ae6:	0f b6       	in	r0, 0x3f	; 63
    6ae8:	f8 94       	cli
    6aea:	be bf       	out	0x3e, r27	; 62
    6aec:	0f be       	out	0x3f, r0	; 63
    6aee:	ad bf       	out	0x3d, r26	; 61
    6af0:	08 95       	ret

00006af2 <clock_elapsed_begin>:
    6af2:	6c e7       	ldi	r22, 0x7C	; 124
    6af4:	77 e1       	ldi	r23, 0x17	; 23
    6af6:	80 e0       	ldi	r24, 0x00	; 0
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	4b ce       	rjmp	.-874    	; 0x6792 <clock_gettime>
    6afc:	08 95       	ret

00006afe <clock_elapsed_end>:
    6afe:	af e0       	ldi	r26, 0x0F	; 15
    6b00:	b0 e0       	ldi	r27, 0x00	; 0
    6b02:	e5 e8       	ldi	r30, 0x85	; 133
    6b04:	f5 e3       	ldi	r31, 0x35	; 53
    6b06:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    6b0a:	8c 01       	movw	r16, r24
    6b0c:	be 01       	movw	r22, r28
    6b0e:	68 5f       	subi	r22, 0xF8	; 248
    6b10:	7f 4f       	sbci	r23, 0xFF	; 255
    6b12:	80 e0       	ldi	r24, 0x00	; 0
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	3d de       	rcall	.-902    	; 0x6792 <clock_gettime>
    6b18:	6c e7       	ldi	r22, 0x7C	; 124
    6b1a:	77 e1       	ldi	r23, 0x17	; 23
    6b1c:	ce 01       	movw	r24, r28
    6b1e:	08 96       	adiw	r24, 0x08	; 8
    6b20:	6e df       	rcall	.-292    	; 0x69fe <subtract_timespec>
    6b22:	01 15       	cp	r16, r1
    6b24:	11 05       	cpc	r17, r1
    6b26:	b1 f0       	breq	.+44     	; 0x6b54 <clock_elapsed_end+0x56>
    6b28:	f8 01       	movw	r30, r16
    6b2a:	80 81       	ld	r24, Z
    6b2c:	88 23       	and	r24, r24
    6b2e:	91 f0       	breq	.+36     	; 0x6b54 <clock_elapsed_end+0x56>
    6b30:	ce 01       	movw	r24, r28
    6b32:	08 96       	adiw	r24, 0x08	; 8
    6b34:	a5 df       	rcall	.-182    	; 0x6a80 <ts_to_str>
    6b36:	ed b7       	in	r30, 0x3d	; 61
    6b38:	fe b7       	in	r31, 0x3e	; 62
    6b3a:	97 83       	std	Z+7, r25	; 0x07
    6b3c:	86 83       	std	Z+6, r24	; 0x06
    6b3e:	15 83       	std	Z+5, r17	; 0x05
    6b40:	04 83       	std	Z+4, r16	; 0x04
    6b42:	85 eb       	ldi	r24, 0xB5	; 181
    6b44:	95 e0       	ldi	r25, 0x05	; 5
    6b46:	a0 e0       	ldi	r26, 0x00	; 0
    6b48:	81 83       	std	Z+1, r24	; 0x01
    6b4a:	92 83       	std	Z+2, r25	; 0x02
    6b4c:	a3 83       	std	Z+3, r26	; 0x03
    6b4e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    6b52:	0f c0       	rjmp	.+30     	; 0x6b72 <clock_elapsed_end+0x74>
    6b54:	ce 01       	movw	r24, r28
    6b56:	08 96       	adiw	r24, 0x08	; 8
    6b58:	93 df       	rcall	.-218    	; 0x6a80 <ts_to_str>
    6b5a:	ed b7       	in	r30, 0x3d	; 61
    6b5c:	fe b7       	in	r31, 0x3e	; 62
    6b5e:	95 83       	std	Z+5, r25	; 0x05
    6b60:	84 83       	std	Z+4, r24	; 0x04
    6b62:	8a ea       	ldi	r24, 0xAA	; 170
    6b64:	95 e0       	ldi	r25, 0x05	; 5
    6b66:	a0 e0       	ldi	r26, 0x00	; 0
    6b68:	81 83       	std	Z+1, r24	; 0x01
    6b6a:	92 83       	std	Z+2, r25	; 0x02
    6b6c:	a3 83       	std	Z+3, r26	; 0x03
    6b6e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    6b72:	2f 96       	adiw	r28, 0x0f	; 15
    6b74:	e4 e0       	ldi	r30, 0x04	; 4
    6b76:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00006b7a <clock_clear>:
    6b7a:	a8 e0       	ldi	r26, 0x08	; 8
    6b7c:	b0 e0       	ldi	r27, 0x00	; 0
    6b7e:	e3 ec       	ldi	r30, 0xC3	; 195
    6b80:	f5 e3       	ldi	r31, 0x35	; 53
    6b82:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    6b86:	1d 82       	std	Y+5, r1	; 0x05
    6b88:	1e 82       	std	Y+6, r1	; 0x06
    6b8a:	1f 82       	std	Y+7, r1	; 0x07
    6b8c:	18 86       	std	Y+8, r1	; 0x08
    6b8e:	19 82       	std	Y+1, r1	; 0x01
    6b90:	1a 82       	std	Y+2, r1	; 0x02
    6b92:	1b 82       	std	Y+3, r1	; 0x03
    6b94:	1c 82       	std	Y+4, r1	; 0x04
    6b96:	ce 01       	movw	r24, r28
    6b98:	01 96       	adiw	r24, 0x01	; 1
    6b9a:	ad de       	rcall	.-678    	; 0x68f6 <clock_settime.part.2>
    6b9c:	e0 e7       	ldi	r30, 0x70	; 112
    6b9e:	fa e1       	ldi	r31, 0x1A	; 26
    6ba0:	11 82       	std	Z+1, r1	; 0x01
    6ba2:	10 82       	st	Z, r1
    6ba4:	13 82       	std	Z+3, r1	; 0x03
    6ba6:	12 82       	std	Z+2, r1	; 0x02
    6ba8:	28 96       	adiw	r28, 0x08	; 8
    6baa:	e2 e0       	ldi	r30, 0x02	; 2
    6bac:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00006bb0 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6bb0:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6bb4:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6bb8:	89 2b       	or	r24, r25
    6bba:	69 f0       	breq	.+26     	; 0x6bd6 <enable_timers+0x26>
    6bbc:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <timers_enabled>
    6bc0:	90 91 a7 17 	lds	r25, 0x17A7	; 0x8017a7 <timers_enabled+0x1>
    6bc4:	89 2b       	or	r24, r25
    6bc6:	39 f4       	brne	.+14     	; 0x6bd6 <enable_timers+0x26>
    {
        enable_system_task();
    6bc8:	a8 dd       	rcall	.-1200   	; 0x671a <enable_system_task>
        timers_enabled = 1;
    6bca:	81 e0       	ldi	r24, 0x01	; 1
    6bcc:	90 e0       	ldi	r25, 0x00	; 0
    6bce:	90 93 a7 17 	sts	0x17A7, r25	; 0x8017a7 <timers_enabled+0x1>
    6bd2:	80 93 a6 17 	sts	0x17A6, r24	; 0x8017a6 <timers_enabled>
    6bd6:	08 95       	ret

00006bd8 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6bd8:	cf 93       	push	r28
    6bda:	df 93       	push	r29
    6bdc:	c8 e5       	ldi	r28, 0x58	; 88
    6bde:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6be0:	8a 81       	ldd	r24, Y+2	; 0x02
    6be2:	88 23       	and	r24, r24
    6be4:	29 f0       	breq	.+10     	; 0x6bf0 <execute_timers+0x18>
    6be6:	e8 81       	ld	r30, Y
    6be8:	f9 81       	ldd	r31, Y+1	; 0x01
    6bea:	30 97       	sbiw	r30, 0x00	; 0
    6bec:	09 f0       	breq	.+2      	; 0x6bf0 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6bee:	09 95       	icall
    6bf0:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6bf2:	8a e1       	ldi	r24, 0x1A	; 26
    6bf4:	c0 37       	cpi	r28, 0x70	; 112
    6bf6:	d8 07       	cpc	r29, r24
    6bf8:	99 f7       	brne	.-26     	; 0x6be0 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6bfa:	df 91       	pop	r29
    6bfc:	cf 91       	pop	r28
    6bfe:	08 95       	ret

00006c00 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6c00:	00 d0       	rcall	.+0      	; 0x6c02 <init_timers+0x2>
    6c02:	1f 92       	push	r1
    printf("Timers init called\n");
    6c04:	86 e9       	ldi	r24, 0x96	; 150
    6c06:	95 e0       	ldi	r25, 0x05	; 5
    6c08:	a0 e0       	ldi	r26, 0x00	; 0
    6c0a:	ed b7       	in	r30, 0x3d	; 61
    6c0c:	fe b7       	in	r31, 0x3e	; 62
    6c0e:	81 83       	std	Z+1, r24	; 0x01
    6c10:	92 83       	std	Z+2, r25	; 0x02
    6c12:	a3 83       	std	Z+3, r26	; 0x03
    6c14:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    if(!timers_configured)
    6c18:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6c1c:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6c20:	89 2b       	or	r24, r25
    6c22:	a9 f4       	brne	.+42     	; 0x6c4e <init_timers+0x4e>
    {
        install_timers_isr();
    6c24:	7c dd       	rcall	.-1288   	; 0x671e <install_timers_isr>
        timers_configured = 1;
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	90 e0       	ldi	r25, 0x00	; 0
    6c2a:	90 93 a5 17 	sts	0x17A5, r25	; 0x8017a5 <timers_configured+0x1>
    6c2e:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <timers_configured>
        timers_enabled = 0;
    6c32:	10 92 a7 17 	sts	0x17A7, r1	; 0x8017a7 <timers_enabled+0x1>
    6c36:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <timers_enabled>
        printf("Timers configured\n");
    6c3a:	83 e8       	ldi	r24, 0x83	; 131
    6c3c:	95 e0       	ldi	r25, 0x05	; 5
    6c3e:	a0 e0       	ldi	r26, 0x00	; 0
    6c40:	ed b7       	in	r30, 0x3d	; 61
    6c42:	fe b7       	in	r31, 0x3e	; 62
    6c44:	81 83       	std	Z+1, r24	; 0x01
    6c46:	92 83       	std	Z+2, r25	; 0x02
    6c48:	a3 83       	std	Z+3, r26	; 0x03
    6c4a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6c4e:	cc de       	rcall	.-616    	; 0x69e8 <delete_all_timers>
    6c50:	94 df       	rcall	.-216    	; 0x6b7a <clock_clear>
    printf("Clock Init\n");
    6c52:	87 e7       	ldi	r24, 0x77	; 119
    6c54:	95 e0       	ldi	r25, 0x05	; 5
    6c56:	a0 e0       	ldi	r26, 0x00	; 0
    6c58:	ed b7       	in	r30, 0x3d	; 61
    6c5a:	fe b7       	in	r31, 0x3e	; 62
    6c5c:	81 83       	std	Z+1, r24	; 0x01
    6c5e:	92 83       	std	Z+2, r25	; 0x02
    6c60:	a3 83       	std	Z+3, r26	; 0x03
    6c62:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6c66:	61 e0       	ldi	r22, 0x01	; 1
    6c68:	70 e0       	ldi	r23, 0x00	; 0
    6c6a:	8e e3       	ldi	r24, 0x3E	; 62
    6c6c:	94 e3       	ldi	r25, 0x34	; 52
    6c6e:	81 de       	rcall	.-766    	; 0x6972 <set_timers>
    6c70:	01 96       	adiw	r24, 0x01	; 1
    6c72:	51 f4       	brne	.+20     	; 0x6c88 <init_timers+0x88>
        printf("Clock task init failed\n");
    6c74:	8f e5       	ldi	r24, 0x5F	; 95
    6c76:	95 e0       	ldi	r25, 0x05	; 5
    6c78:	a0 e0       	ldi	r26, 0x00	; 0
    6c7a:	ed b7       	in	r30, 0x3d	; 61
    6c7c:	fe b7       	in	r31, 0x3e	; 62
    6c7e:	81 83       	std	Z+1, r24	; 0x01
    6c80:	92 83       	std	Z+2, r25	; 0x02
    6c82:	a3 83       	std	Z+3, r26	; 0x03
    6c84:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Clock Installed\n");
    6c88:	8e e4       	ldi	r24, 0x4E	; 78
    6c8a:	95 e0       	ldi	r25, 0x05	; 5
    6c8c:	a0 e0       	ldi	r26, 0x00	; 0
    6c8e:	ed b7       	in	r30, 0x3d	; 61
    6c90:	fe b7       	in	r31, 0x3e	; 62
    6c92:	81 83       	std	Z+1, r24	; 0x01
    6c94:	92 83       	std	Z+2, r25	; 0x02
    6c96:	a3 83       	std	Z+3, r26	; 0x03
    6c98:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    enable_timers();
    6c9c:	89 df       	rcall	.-238    	; 0x6bb0 <enable_timers>

    printf("Timers enabled\n");
    6c9e:	8e e3       	ldi	r24, 0x3E	; 62
    6ca0:	95 e0       	ldi	r25, 0x05	; 5
    6ca2:	a0 e0       	ldi	r26, 0x00	; 0
    6ca4:	ed b7       	in	r30, 0x3d	; 61
    6ca6:	fe b7       	in	r31, 0x3e	; 62
    6ca8:	81 83       	std	Z+1, r24	; 0x01
    6caa:	92 83       	std	Z+2, r25	; 0x02
    6cac:	a3 83       	std	Z+3, r26	; 0x03
    6cae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
}
    6cb2:	0f 90       	pop	r0
    6cb4:	0f 90       	pop	r0
    6cb6:	0f 90       	pop	r0
    6cb8:	08 95       	ret

00006cba <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6cba:	89 2b       	or	r24, r25
    6cbc:	81 f4       	brne	.+32     	; 0x6cde <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6cbe:	fb 01       	movw	r30, r22
    6cc0:	10 82       	st	Z, r1
    6cc2:	11 82       	std	Z+1, r1	; 0x01
    6cc4:	12 82       	std	Z+2, r1	; 0x02
    6cc6:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6cc8:	80 e4       	ldi	r24, 0x40	; 64
    6cca:	92 e4       	ldi	r25, 0x42	; 66
    6ccc:	af e0       	ldi	r26, 0x0F	; 15
    6cce:	b0 e0       	ldi	r27, 0x00	; 0
    6cd0:	84 83       	std	Z+4, r24	; 0x04
    6cd2:	95 83       	std	Z+5, r25	; 0x05
    6cd4:	a6 83       	std	Z+6, r26	; 0x06
    6cd6:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6cd8:	80 e0       	ldi	r24, 0x00	; 0
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6cde:	8f ef       	ldi	r24, 0xFF	; 255
    6ce0:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6ce2:	08 95       	ret

00006ce4 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6ce4:	89 2b       	or	r24, r25
    6ce6:	19 f4       	brne	.+6      	; 0x6cee <clock_settime+0xa>
    6ce8:	cb 01       	movw	r24, r22
    6cea:	05 ce       	rjmp	.-1014   	; 0x68f6 <clock_settime.part.2>
    6cec:	08 95       	ret
        return(-1);
    6cee:	8f ef       	ldi	r24, 0xFF	; 255
    6cf0:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6cf2:	08 95       	ret

00006cf4 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6cf4:	9c 01       	movw	r18, r24
    6cf6:	83 70       	andi	r24, 0x03	; 3
    6cf8:	99 27       	eor	r25, r25
    6cfa:	00 97       	sbiw	r24, 0x00	; 0
    6cfc:	69 f4       	brne	.+26     	; 0x6d18 <IS_Leap+0x24>
    6cfe:	2c 36       	cpi	r18, 0x6C	; 108
    6d00:	47 e0       	ldi	r20, 0x07	; 7
    6d02:	34 07       	cpc	r19, r20
    6d04:	59 f0       	breq	.+22     	; 0x6d1c <IS_Leap+0x28>
    6d06:	51 e0       	ldi	r21, 0x01	; 1
    6d08:	40 e0       	ldi	r20, 0x00	; 0
    6d0a:	24 33       	cpi	r18, 0x34	; 52
    6d0c:	38 40       	sbci	r19, 0x08	; 8
    6d0e:	09 f4       	brne	.+2      	; 0x6d12 <IS_Leap+0x1e>
    6d10:	50 e0       	ldi	r21, 0x00	; 0
    6d12:	85 2f       	mov	r24, r21
    6d14:	94 2f       	mov	r25, r20
    6d16:	08 95       	ret
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	08 95       	ret

00006d1e <tm_mon_to_ascii>:
    6d1e:	8c 30       	cpi	r24, 0x0C	; 12
    6d20:	91 05       	cpc	r25, r1
    6d22:	40 f4       	brcc	.+16     	; 0x6d34 <tm_mon_to_ascii+0x16>
    6d24:	88 0f       	add	r24, r24
    6d26:	99 1f       	adc	r25, r25
    6d28:	fc 01       	movw	r30, r24
    6d2a:	e5 5f       	subi	r30, 0xF5	; 245
    6d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    6d2e:	80 81       	ld	r24, Z
    6d30:	91 81       	ldd	r25, Z+1	; 0x01
    6d32:	08 95       	ret
    6d34:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6d38:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6d3c:	08 95       	ret

00006d3e <Days_Per_Month>:
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	8c 30       	cpi	r24, 0x0C	; 12
    6d44:	91 05       	cpc	r25, r1
    6d46:	24 f0       	brlt	.+8      	; 0x6d50 <Days_Per_Month+0x12>
    6d48:	6f 5f       	subi	r22, 0xFF	; 255
    6d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d4c:	0c 97       	sbiw	r24, 0x0c	; 12
    6d4e:	f9 cf       	rjmp	.-14     	; 0x6d42 <Days_Per_Month+0x4>
    6d50:	97 ff       	sbrs	r25, 7
    6d52:	04 c0       	rjmp	.+8      	; 0x6d5c <Days_Per_Month+0x1e>
    6d54:	61 50       	subi	r22, 0x01	; 1
    6d56:	71 09       	sbc	r23, r1
    6d58:	0c 96       	adiw	r24, 0x0c	; 12
    6d5a:	fa cf       	rjmp	.-12     	; 0x6d50 <Days_Per_Month+0x12>
    6d5c:	fc 01       	movw	r30, r24
    6d5e:	ee 0f       	add	r30, r30
    6d60:	ff 1f       	adc	r31, r31
    6d62:	e8 57       	subi	r30, 0x78	; 120
    6d64:	fc 4f       	sbci	r31, 0xFC	; 252
    6d66:	c0 81       	ld	r28, Z
    6d68:	d1 81       	ldd	r29, Z+1	; 0x01
    6d6a:	01 97       	sbiw	r24, 0x01	; 1
    6d6c:	29 f4       	brne	.+10     	; 0x6d78 <Days_Per_Month+0x3a>
    6d6e:	cb 01       	movw	r24, r22
    6d70:	c1 df       	rcall	.-126    	; 0x6cf4 <IS_Leap>
    6d72:	89 2b       	or	r24, r25
    6d74:	09 f0       	breq	.+2      	; 0x6d78 <Days_Per_Month+0x3a>
    6d76:	21 96       	adiw	r28, 0x01	; 1
    6d78:	ce 01       	movw	r24, r28
    6d7a:	df 91       	pop	r29
    6d7c:	cf 91       	pop	r28
    6d7e:	08 95       	ret

00006d80 <time_to_tm>:
    6d80:	a0 e0       	ldi	r26, 0x00	; 0
    6d82:	b0 e0       	ldi	r27, 0x00	; 0
    6d84:	e6 ec       	ldi	r30, 0xC6	; 198
    6d86:	f6 e3       	ldi	r31, 0x36	; 54
    6d88:	0c 94 ee e6 	jmp	0x1cddc	; 0x1cddc <__prologue_saves__+0x4>
    6d8c:	e8 01       	movw	r28, r16
    6d8e:	e6 e1       	ldi	r30, 0x16	; 22
    6d90:	d8 01       	movw	r26, r16
    6d92:	1d 92       	st	X+, r1
    6d94:	ea 95       	dec	r30
    6d96:	e9 f7       	brne	.-6      	; 0x6d92 <time_to_tm+0x12>
    6d98:	61 15       	cp	r22, r1
    6d9a:	bd e5       	ldi	r27, 0x5D	; 93
    6d9c:	7b 07       	cpc	r23, r27
    6d9e:	bd ef       	ldi	r27, 0xFD	; 253
    6da0:	8b 07       	cpc	r24, r27
    6da2:	bf ef       	ldi	r27, 0xFF	; 255
    6da4:	9b 07       	cpc	r25, r27
    6da6:	08 f0       	brcs	.+2      	; 0x6daa <time_to_tm+0x2a>
    6da8:	c0 c0       	rjmp	.+384    	; 0x6f2a <time_to_tm+0x1aa>
    6daa:	6b 01       	movw	r12, r22
    6dac:	7c 01       	movw	r14, r24
    6dae:	c2 1a       	sub	r12, r18
    6db0:	d3 0a       	sbc	r13, r19
    6db2:	e4 0a       	sbc	r14, r20
    6db4:	f5 0a       	sbc	r15, r21
    6db6:	46 01       	movw	r8, r12
    6db8:	57 01       	movw	r10, r14
    6dba:	e0 e8       	ldi	r30, 0x80	; 128
    6dbc:	ce 16       	cp	r12, r30
    6dbe:	ee ea       	ldi	r30, 0xAE	; 174
    6dc0:	de 06       	cpc	r13, r30
    6dc2:	ee ef       	ldi	r30, 0xFE	; 254
    6dc4:	ee 06       	cpc	r14, r30
    6dc6:	ef ef       	ldi	r30, 0xFF	; 255
    6dc8:	fe 06       	cpc	r15, r30
    6dca:	50 f0       	brcs	.+20     	; 0x6de0 <time_to_tm+0x60>
    6dcc:	80 e8       	ldi	r24, 0x80	; 128
    6dce:	88 0e       	add	r8, r24
    6dd0:	81 e5       	ldi	r24, 0x51	; 81
    6dd2:	98 1e       	adc	r9, r24
    6dd4:	81 e0       	ldi	r24, 0x01	; 1
    6dd6:	a8 1e       	adc	r10, r24
    6dd8:	b1 1c       	adc	r11, r1
    6dda:	01 e0       	ldi	r16, 0x01	; 1
    6ddc:	10 e0       	ldi	r17, 0x00	; 0
    6dde:	02 c0       	rjmp	.+4      	; 0x6de4 <time_to_tm+0x64>
    6de0:	00 e0       	ldi	r16, 0x00	; 0
    6de2:	10 e0       	ldi	r17, 0x00	; 0
    6de4:	8c e3       	ldi	r24, 0x3C	; 60
    6de6:	48 2e       	mov	r4, r24
    6de8:	51 2c       	mov	r5, r1
    6dea:	61 2c       	mov	r6, r1
    6dec:	71 2c       	mov	r7, r1
    6dee:	c5 01       	movw	r24, r10
    6df0:	b4 01       	movw	r22, r8
    6df2:	a3 01       	movw	r20, r6
    6df4:	92 01       	movw	r18, r4
    6df6:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    6dfa:	79 83       	std	Y+1, r23	; 0x01
    6dfc:	68 83       	st	Y, r22
    6dfe:	ca 01       	movw	r24, r20
    6e00:	b9 01       	movw	r22, r18
    6e02:	a3 01       	movw	r20, r6
    6e04:	92 01       	movw	r18, r4
    6e06:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    6e0a:	7b 83       	std	Y+3, r23	; 0x03
    6e0c:	6a 83       	std	Y+2, r22	; 0x02
    6e0e:	c5 01       	movw	r24, r10
    6e10:	b4 01       	movw	r22, r8
    6e12:	20 e1       	ldi	r18, 0x10	; 16
    6e14:	3e e0       	ldi	r19, 0x0E	; 14
    6e16:	40 e0       	ldi	r20, 0x00	; 0
    6e18:	50 e0       	ldi	r21, 0x00	; 0
    6e1a:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    6e1e:	ca 01       	movw	r24, r20
    6e20:	b9 01       	movw	r22, r18
    6e22:	28 e1       	ldi	r18, 0x18	; 24
    6e24:	30 e0       	ldi	r19, 0x00	; 0
    6e26:	40 e0       	ldi	r20, 0x00	; 0
    6e28:	50 e0       	ldi	r21, 0x00	; 0
    6e2a:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    6e2e:	7d 83       	std	Y+5, r23	; 0x05
    6e30:	6c 83       	std	Y+4, r22	; 0x04
    6e32:	01 15       	cp	r16, r1
    6e34:	11 05       	cpc	r17, r1
    6e36:	89 f0       	breq	.+34     	; 0x6e5a <time_to_tm+0xda>
    6e38:	85 e4       	ldi	r24, 0x45	; 69
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	9b 87       	std	Y+11, r25	; 0x0b
    6e3e:	8a 87       	std	Y+10, r24	; 0x0a
    6e40:	8b e0       	ldi	r24, 0x0B	; 11
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	99 87       	std	Y+9, r25	; 0x09
    6e46:	88 87       	std	Y+8, r24	; 0x08
    6e48:	8f e1       	ldi	r24, 0x1F	; 31
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	9f 83       	std	Y+7, r25	; 0x07
    6e4e:	8e 83       	std	Y+6, r24	; 0x06
    6e50:	83 e0       	ldi	r24, 0x03	; 3
    6e52:	90 e0       	ldi	r25, 0x00	; 0
    6e54:	9d 87       	std	Y+13, r25	; 0x0d
    6e56:	8c 87       	std	Y+12, r24	; 0x0c
    6e58:	65 c0       	rjmp	.+202    	; 0x6f24 <time_to_tm+0x1a4>
    6e5a:	c5 01       	movw	r24, r10
    6e5c:	b4 01       	movw	r22, r8
    6e5e:	20 e8       	ldi	r18, 0x80	; 128
    6e60:	31 e5       	ldi	r19, 0x51	; 81
    6e62:	41 e0       	ldi	r20, 0x01	; 1
    6e64:	50 e0       	ldi	r21, 0x00	; 0
    6e66:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    6e6a:	49 01       	movw	r8, r18
    6e6c:	5a 01       	movw	r10, r20
    6e6e:	ca 01       	movw	r24, r20
    6e70:	b9 01       	movw	r22, r18
    6e72:	6c 5f       	subi	r22, 0xFC	; 252
    6e74:	7f 4f       	sbci	r23, 0xFF	; 255
    6e76:	8f 4f       	sbci	r24, 0xFF	; 255
    6e78:	9f 4f       	sbci	r25, 0xFF	; 255
    6e7a:	27 e0       	ldi	r18, 0x07	; 7
    6e7c:	30 e0       	ldi	r19, 0x00	; 0
    6e7e:	40 e0       	ldi	r20, 0x00	; 0
    6e80:	50 e0       	ldi	r21, 0x00	; 0
    6e82:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
    6e86:	7d 87       	std	Y+13, r23	; 0x0d
    6e88:	6c 87       	std	Y+12, r22	; 0x0c
    6e8a:	02 eb       	ldi	r16, 0xB2	; 178
    6e8c:	17 e0       	ldi	r17, 0x07	; 7
    6e8e:	c8 01       	movw	r24, r16
    6e90:	31 df       	rcall	.-414    	; 0x6cf4 <IS_Leap>
    6e92:	00 97       	sbiw	r24, 0x00	; 0
    6e94:	19 f4       	brne	.+6      	; 0x6e9c <time_to_tm+0x11c>
    6e96:	4d e6       	ldi	r20, 0x6D	; 109
    6e98:	51 e0       	ldi	r21, 0x01	; 1
    6e9a:	02 c0       	rjmp	.+4      	; 0x6ea0 <time_to_tm+0x120>
    6e9c:	4e e6       	ldi	r20, 0x6E	; 110
    6e9e:	51 e0       	ldi	r21, 0x01	; 1
    6ea0:	05 2e       	mov	r0, r21
    6ea2:	00 0c       	add	r0, r0
    6ea4:	66 0b       	sbc	r22, r22
    6ea6:	77 0b       	sbc	r23, r23
    6ea8:	84 16       	cp	r8, r20
    6eaa:	95 06       	cpc	r9, r21
    6eac:	a6 06       	cpc	r10, r22
    6eae:	b7 06       	cpc	r11, r23
    6eb0:	3c f0       	brlt	.+14     	; 0x6ec0 <time_to_tm+0x140>
    6eb2:	0f 5f       	subi	r16, 0xFF	; 255
    6eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    6eb6:	84 1a       	sub	r8, r20
    6eb8:	95 0a       	sbc	r9, r21
    6eba:	a6 0a       	sbc	r10, r22
    6ebc:	b7 0a       	sbc	r11, r23
    6ebe:	e7 cf       	rjmp	.-50     	; 0x6e8e <time_to_tm+0x10e>
    6ec0:	0c 56       	subi	r16, 0x6C	; 108
    6ec2:	17 40       	sbci	r17, 0x07	; 7
    6ec4:	1b 87       	std	Y+11, r17	; 0x0b
    6ec6:	0a 87       	std	Y+10, r16	; 0x0a
    6ec8:	9f 86       	std	Y+15, r9	; 0x0f
    6eca:	8e 86       	std	Y+14, r8	; 0x0e
    6ecc:	e8 e8       	ldi	r30, 0x88	; 136
    6ece:	f3 e0       	ldi	r31, 0x03	; 3
    6ed0:	20 e0       	ldi	r18, 0x00	; 0
    6ed2:	30 e0       	ldi	r19, 0x00	; 0
    6ed4:	18 14       	cp	r1, r8
    6ed6:	19 04       	cpc	r1, r9
    6ed8:	1a 04       	cpc	r1, r10
    6eda:	1b 04       	cpc	r1, r11
    6edc:	e4 f4       	brge	.+56     	; 0x6f16 <time_to_tm+0x196>
    6ede:	2c 30       	cpi	r18, 0x0C	; 12
    6ee0:	31 05       	cpc	r19, r1
    6ee2:	c9 f0       	breq	.+50     	; 0x6f16 <time_to_tm+0x196>
    6ee4:	41 91       	ld	r20, Z+
    6ee6:	51 91       	ld	r21, Z+
    6ee8:	21 30       	cpi	r18, 0x01	; 1
    6eea:	31 05       	cpc	r19, r1
    6eec:	21 f4       	brne	.+8      	; 0x6ef6 <time_to_tm+0x176>
    6eee:	00 97       	sbiw	r24, 0x00	; 0
    6ef0:	11 f0       	breq	.+4      	; 0x6ef6 <time_to_tm+0x176>
    6ef2:	4f 5f       	subi	r20, 0xFF	; 255
    6ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ef6:	05 2e       	mov	r0, r21
    6ef8:	00 0c       	add	r0, r0
    6efa:	66 0b       	sbc	r22, r22
    6efc:	77 0b       	sbc	r23, r23
    6efe:	84 16       	cp	r8, r20
    6f00:	95 06       	cpc	r9, r21
    6f02:	a6 06       	cpc	r10, r22
    6f04:	b7 06       	cpc	r11, r23
    6f06:	3c f0       	brlt	.+14     	; 0x6f16 <time_to_tm+0x196>
    6f08:	84 1a       	sub	r8, r20
    6f0a:	95 0a       	sbc	r9, r21
    6f0c:	a6 0a       	sbc	r10, r22
    6f0e:	b7 0a       	sbc	r11, r23
    6f10:	2f 5f       	subi	r18, 0xFF	; 255
    6f12:	3f 4f       	sbci	r19, 0xFF	; 255
    6f14:	df cf       	rjmp	.-66     	; 0x6ed4 <time_to_tm+0x154>
    6f16:	39 87       	std	Y+9, r19	; 0x09
    6f18:	28 87       	std	Y+8, r18	; 0x08
    6f1a:	af ef       	ldi	r26, 0xFF	; 255
    6f1c:	8a 1a       	sub	r8, r26
    6f1e:	9a 0a       	sbc	r9, r26
    6f20:	9f 82       	std	Y+7, r9	; 0x07
    6f22:	8e 82       	std	Y+6, r8	; 0x06
    6f24:	b6 01       	movw	r22, r12
    6f26:	c7 01       	movw	r24, r14
    6f28:	04 c0       	rjmp	.+8      	; 0x6f32 <time_to_tm+0x1b2>
    6f2a:	6f ef       	ldi	r22, 0xFF	; 255
    6f2c:	7f ef       	ldi	r23, 0xFF	; 255
    6f2e:	8f ef       	ldi	r24, 0xFF	; 255
    6f30:	9f ef       	ldi	r25, 0xFF	; 255
    6f32:	cd b7       	in	r28, 0x3d	; 61
    6f34:	de b7       	in	r29, 0x3e	; 62
    6f36:	e0 e1       	ldi	r30, 0x10	; 16
    6f38:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__epilogue_restores__+0x4>

00006f3c <gmtime_r>:
    6f3c:	0f 93       	push	r16
    6f3e:	1f 93       	push	r17
    6f40:	cf 93       	push	r28
    6f42:	df 93       	push	r29
    6f44:	eb 01       	movw	r28, r22
    6f46:	fc 01       	movw	r30, r24
    6f48:	60 81       	ld	r22, Z
    6f4a:	71 81       	ldd	r23, Z+1	; 0x01
    6f4c:	82 81       	ldd	r24, Z+2	; 0x02
    6f4e:	93 81       	ldd	r25, Z+3	; 0x03
    6f50:	8e 01       	movw	r16, r28
    6f52:	20 e0       	ldi	r18, 0x00	; 0
    6f54:	30 e0       	ldi	r19, 0x00	; 0
    6f56:	a9 01       	movw	r20, r18
    6f58:	13 df       	rcall	.-474    	; 0x6d80 <time_to_tm>
    6f5a:	ce 01       	movw	r24, r28
    6f5c:	df 91       	pop	r29
    6f5e:	cf 91       	pop	r28
    6f60:	1f 91       	pop	r17
    6f62:	0f 91       	pop	r16
    6f64:	08 95       	ret

00006f66 <gmtime>:
    6f66:	26 ec       	ldi	r18, 0xC6	; 198
    6f68:	37 e1       	ldi	r19, 0x17	; 23
    6f6a:	30 93 dd 17 	sts	0x17DD, r19	; 0x8017dd <p.3677+0x1>
    6f6e:	20 93 dc 17 	sts	0x17DC, r18	; 0x8017dc <p.3677>
    6f72:	b9 01       	movw	r22, r18
    6f74:	e3 df       	rcall	.-58     	; 0x6f3c <gmtime_r>
    6f76:	86 ec       	ldi	r24, 0xC6	; 198
    6f78:	97 e1       	ldi	r25, 0x17	; 23
    6f7a:	08 95       	ret

00006f7c <gettimezone>:
    6f7c:	e0 e7       	ldi	r30, 0x70	; 112
    6f7e:	fa e1       	ldi	r31, 0x1A	; 26
    6f80:	20 81       	ld	r18, Z
    6f82:	31 81       	ldd	r19, Z+1	; 0x01
    6f84:	dc 01       	movw	r26, r24
    6f86:	2d 93       	st	X+, r18
    6f88:	3c 93       	st	X, r19
    6f8a:	22 81       	ldd	r18, Z+2	; 0x02
    6f8c:	33 81       	ldd	r19, Z+3	; 0x03
    6f8e:	fc 01       	movw	r30, r24
    6f90:	33 83       	std	Z+3, r19	; 0x03
    6f92:	22 83       	std	Z+2, r18	; 0x02
    6f94:	80 e0       	ldi	r24, 0x00	; 0
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	08 95       	ret

00006f9a <settimezone>:
    6f9a:	cf 93       	push	r28
    6f9c:	df 93       	push	r29
    6f9e:	ec 01       	movw	r28, r24
    6fa0:	28 81       	ld	r18, Y
    6fa2:	39 81       	ldd	r19, Y+1	; 0x01
    6fa4:	e0 e7       	ldi	r30, 0x70	; 112
    6fa6:	fa e1       	ldi	r31, 0x1A	; 26
    6fa8:	31 83       	std	Z+1, r19	; 0x01
    6faa:	20 83       	st	Z, r18
    6fac:	8a 81       	ldd	r24, Y+2	; 0x02
    6fae:	9b 81       	ldd	r25, Y+3	; 0x03
    6fb0:	93 83       	std	Z+3, r25	; 0x03
    6fb2:	82 83       	std	Z+2, r24	; 0x02
    6fb4:	80 e0       	ldi	r24, 0x00	; 0
    6fb6:	90 e0       	ldi	r25, 0x00	; 0
    6fb8:	df 91       	pop	r29
    6fba:	cf 91       	pop	r28
    6fbc:	08 95       	ret

00006fbe <gettimeofday>:
    6fbe:	a8 e0       	ldi	r26, 0x08	; 8
    6fc0:	b0 e0       	ldi	r27, 0x00	; 0
    6fc2:	e5 ee       	ldi	r30, 0xE5	; 229
    6fc4:	f7 e3       	ldi	r31, 0x37	; 55
    6fc6:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
    6fca:	8c 01       	movw	r16, r24
    6fcc:	7b 01       	movw	r14, r22
    6fce:	be 01       	movw	r22, r28
    6fd0:	6f 5f       	subi	r22, 0xFF	; 255
    6fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    6fd4:	80 e0       	ldi	r24, 0x00	; 0
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	dc db       	rcall	.-2120   	; 0x6792 <clock_gettime>
    6fda:	89 81       	ldd	r24, Y+1	; 0x01
    6fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    6fde:	ab 81       	ldd	r26, Y+3	; 0x03
    6fe0:	bc 81       	ldd	r27, Y+4	; 0x04
    6fe2:	f8 01       	movw	r30, r16
    6fe4:	80 83       	st	Z, r24
    6fe6:	91 83       	std	Z+1, r25	; 0x01
    6fe8:	a2 83       	std	Z+2, r26	; 0x02
    6fea:	b3 83       	std	Z+3, r27	; 0x03
    6fec:	6d 81       	ldd	r22, Y+5	; 0x05
    6fee:	7e 81       	ldd	r23, Y+6	; 0x06
    6ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ff2:	98 85       	ldd	r25, Y+8	; 0x08
    6ff4:	28 ee       	ldi	r18, 0xE8	; 232
    6ff6:	33 e0       	ldi	r19, 0x03	; 3
    6ff8:	40 e0       	ldi	r20, 0x00	; 0
    6ffa:	50 e0       	ldi	r21, 0x00	; 0
    6ffc:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
    7000:	f8 01       	movw	r30, r16
    7002:	24 83       	std	Z+4, r18	; 0x04
    7004:	35 83       	std	Z+5, r19	; 0x05
    7006:	46 83       	std	Z+6, r20	; 0x06
    7008:	57 83       	std	Z+7, r21	; 0x07
    700a:	c7 01       	movw	r24, r14
    700c:	b7 df       	rcall	.-146    	; 0x6f7c <gettimezone>
    700e:	80 e0       	ldi	r24, 0x00	; 0
    7010:	90 e0       	ldi	r25, 0x00	; 0
    7012:	28 96       	adiw	r28, 0x08	; 8
    7014:	e6 e0       	ldi	r30, 0x06	; 6
    7016:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0000701a <time>:
    701a:	cf 93       	push	r28
    701c:	df 93       	push	r29
    701e:	ec 01       	movw	r28, r24
    7020:	68 ea       	ldi	r22, 0xA8	; 168
    7022:	77 e1       	ldi	r23, 0x17	; 23
    7024:	80 e0       	ldi	r24, 0x00	; 0
    7026:	90 e0       	ldi	r25, 0x00	; 0
    7028:	b4 db       	rcall	.-2200   	; 0x6792 <clock_gettime>
    702a:	20 97       	sbiw	r28, 0x00	; 0
    702c:	61 f0       	breq	.+24     	; 0x7046 <time+0x2c>
    702e:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <ts.3755>
    7032:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    7036:	a0 91 aa 17 	lds	r26, 0x17AA	; 0x8017aa <ts.3755+0x2>
    703a:	b0 91 ab 17 	lds	r27, 0x17AB	; 0x8017ab <ts.3755+0x3>
    703e:	88 83       	st	Y, r24
    7040:	99 83       	std	Y+1, r25	; 0x01
    7042:	aa 83       	std	Y+2, r26	; 0x02
    7044:	bb 83       	std	Y+3, r27	; 0x03
    7046:	60 91 a8 17 	lds	r22, 0x17A8	; 0x8017a8 <ts.3755>
    704a:	70 91 a9 17 	lds	r23, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    704e:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <ts.3755+0x2>
    7052:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <ts.3755+0x3>
    7056:	df 91       	pop	r29
    7058:	cf 91       	pop	r28
    705a:	08 95       	ret

0000705c <is_dst>:
    705c:	cf 92       	push	r12
    705e:	df 92       	push	r13
    7060:	ef 92       	push	r14
    7062:	ff 92       	push	r15
    7064:	6b 01       	movw	r12, r22
    7066:	7c 01       	movw	r14, r24
    7068:	05 d4       	rcall	.+2058   	; 0x7874 <set_dst>
    706a:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <dst>
    706e:	90 91 75 1a 	lds	r25, 0x1A75	; 0x801a75 <dst+0x1>
    7072:	a0 91 76 1a 	lds	r26, 0x1A76	; 0x801a76 <dst+0x2>
    7076:	b0 91 77 1a 	lds	r27, 0x1A77	; 0x801a77 <dst+0x3>
    707a:	c8 16       	cp	r12, r24
    707c:	d9 06       	cpc	r13, r25
    707e:	ea 06       	cpc	r14, r26
    7080:	fb 06       	cpc	r15, r27
    7082:	88 f0       	brcs	.+34     	; 0x70a6 <is_dst+0x4a>
    7084:	81 e0       	ldi	r24, 0x01	; 1
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	40 91 78 1a 	lds	r20, 0x1A78	; 0x801a78 <dst+0x4>
    708c:	50 91 79 1a 	lds	r21, 0x1A79	; 0x801a79 <dst+0x5>
    7090:	60 91 7a 1a 	lds	r22, 0x1A7A	; 0x801a7a <dst+0x6>
    7094:	70 91 7b 1a 	lds	r23, 0x1A7B	; 0x801a7b <dst+0x7>
    7098:	4c 15       	cp	r20, r12
    709a:	5d 05       	cpc	r21, r13
    709c:	6e 05       	cpc	r22, r14
    709e:	7f 05       	cpc	r23, r15
    70a0:	20 f4       	brcc	.+8      	; 0x70aa <is_dst+0x4e>
    70a2:	80 e0       	ldi	r24, 0x00	; 0
    70a4:	02 c0       	rjmp	.+4      	; 0x70aa <is_dst+0x4e>
    70a6:	80 e0       	ldi	r24, 0x00	; 0
    70a8:	90 e0       	ldi	r25, 0x00	; 0
    70aa:	ff 90       	pop	r15
    70ac:	ef 90       	pop	r14
    70ae:	df 90       	pop	r13
    70b0:	cf 90       	pop	r12
    70b2:	08 95       	ret

000070b4 <localtime_r>:
    70b4:	4f 92       	push	r4
    70b6:	5f 92       	push	r5
    70b8:	6f 92       	push	r6
    70ba:	7f 92       	push	r7
    70bc:	af 92       	push	r10
    70be:	bf 92       	push	r11
    70c0:	cf 92       	push	r12
    70c2:	df 92       	push	r13
    70c4:	ef 92       	push	r14
    70c6:	ff 92       	push	r15
    70c8:	0f 93       	push	r16
    70ca:	1f 93       	push	r17
    70cc:	cf 93       	push	r28
    70ce:	df 93       	push	r29
    70d0:	00 d0       	rcall	.+0      	; 0x70d2 <localtime_r+0x1e>
    70d2:	00 d0       	rcall	.+0      	; 0x70d4 <localtime_r+0x20>
    70d4:	cd b7       	in	r28, 0x3d	; 61
    70d6:	de b7       	in	r29, 0x3e	; 62
    70d8:	5b 01       	movw	r10, r22
    70da:	fc 01       	movw	r30, r24
    70dc:	40 80       	ld	r4, Z
    70de:	51 80       	ldd	r5, Z+1	; 0x01
    70e0:	62 80       	ldd	r6, Z+2	; 0x02
    70e2:	73 80       	ldd	r7, Z+3	; 0x03
    70e4:	ce 01       	movw	r24, r28
    70e6:	01 96       	adiw	r24, 0x01	; 1
    70e8:	49 df       	rcall	.-366    	; 0x6f7c <gettimezone>
    70ea:	a9 81       	ldd	r26, Y+1	; 0x01
    70ec:	ba 81       	ldd	r27, Y+2	; 0x02
    70ee:	2c e3       	ldi	r18, 0x3C	; 60
    70f0:	30 e0       	ldi	r19, 0x00	; 0
    70f2:	0e 94 c6 e6 	call	0x1cd8c	; 0x1cd8c <__usmulhisi3>
    70f6:	6b 01       	movw	r12, r22
    70f8:	7c 01       	movw	r14, r24
    70fa:	c3 01       	movw	r24, r6
    70fc:	b2 01       	movw	r22, r4
    70fe:	6c 19       	sub	r22, r12
    7100:	7d 09       	sbc	r23, r13
    7102:	8e 09       	sbc	r24, r14
    7104:	9f 09       	sbc	r25, r15
    7106:	aa df       	rcall	.-172    	; 0x705c <is_dst>
    7108:	89 2b       	or	r24, r25
    710a:	31 f0       	breq	.+12     	; 0x7118 <localtime_r+0x64>
    710c:	f0 e1       	ldi	r31, 0x10	; 16
    710e:	cf 1a       	sub	r12, r31
    7110:	fe e0       	ldi	r31, 0x0E	; 14
    7112:	df 0a       	sbc	r13, r31
    7114:	e1 08       	sbc	r14, r1
    7116:	f1 08       	sbc	r15, r1
    7118:	85 01       	movw	r16, r10
    711a:	a7 01       	movw	r20, r14
    711c:	96 01       	movw	r18, r12
    711e:	c3 01       	movw	r24, r6
    7120:	b2 01       	movw	r22, r4
    7122:	2e de       	rcall	.-932    	; 0x6d80 <time_to_tm>
    7124:	c5 01       	movw	r24, r10
    7126:	0f 90       	pop	r0
    7128:	0f 90       	pop	r0
    712a:	0f 90       	pop	r0
    712c:	0f 90       	pop	r0
    712e:	df 91       	pop	r29
    7130:	cf 91       	pop	r28
    7132:	1f 91       	pop	r17
    7134:	0f 91       	pop	r16
    7136:	ff 90       	pop	r15
    7138:	ef 90       	pop	r14
    713a:	df 90       	pop	r13
    713c:	cf 90       	pop	r12
    713e:	bf 90       	pop	r11
    7140:	af 90       	pop	r10
    7142:	7f 90       	pop	r7
    7144:	6f 90       	pop	r6
    7146:	5f 90       	pop	r5
    7148:	4f 90       	pop	r4
    714a:	08 95       	ret

0000714c <localtime>:
    714c:	60 eb       	ldi	r22, 0xB0	; 176
    714e:	77 e1       	ldi	r23, 0x17	; 23
    7150:	b1 cf       	rjmp	.-158    	; 0x70b4 <localtime_r>
    7152:	08 95       	ret

00007154 <normalize>:
    7154:	aa e0       	ldi	r26, 0x0A	; 10
    7156:	b0 e0       	ldi	r27, 0x00	; 0
    7158:	e0 eb       	ldi	r30, 0xB0	; 176
    715a:	f8 e3       	ldi	r31, 0x38	; 56
    715c:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    7160:	7c 01       	movw	r14, r24
    7162:	7a 87       	std	Y+10, r23	; 0x0a
    7164:	69 87       	std	Y+9, r22	; 0x09
    7166:	f7 01       	movw	r30, r14
    7168:	80 81       	ld	r24, Z
    716a:	91 81       	ldd	r25, Z+1	; 0x01
    716c:	8c 33       	cpi	r24, 0x3C	; 60
    716e:	91 05       	cpc	r25, r1
    7170:	5c f0       	brlt	.+22     	; 0x7188 <normalize+0x34>
    7172:	f7 01       	movw	r30, r14
    7174:	22 81       	ldd	r18, Z+2	; 0x02
    7176:	33 81       	ldd	r19, Z+3	; 0x03
    7178:	2f 5f       	subi	r18, 0xFF	; 255
    717a:	3f 4f       	sbci	r19, 0xFF	; 255
    717c:	33 83       	std	Z+3, r19	; 0x03
    717e:	22 83       	std	Z+2, r18	; 0x02
    7180:	cc 97       	sbiw	r24, 0x3c	; 60
    7182:	91 83       	std	Z+1, r25	; 0x01
    7184:	80 83       	st	Z, r24
    7186:	ef cf       	rjmp	.-34     	; 0x7166 <normalize+0x12>
    7188:	f7 01       	movw	r30, r14
    718a:	01 90       	ld	r0, Z+
    718c:	f0 81       	ld	r31, Z
    718e:	e0 2d       	mov	r30, r0
    7190:	fe 83       	std	Y+6, r31	; 0x06
    7192:	ed 83       	std	Y+5, r30	; 0x05
    7194:	f7 ff       	sbrs	r31, 7
    7196:	0d c0       	rjmp	.+26     	; 0x71b2 <normalize+0x5e>
    7198:	f7 01       	movw	r30, r14
    719a:	82 81       	ldd	r24, Z+2	; 0x02
    719c:	93 81       	ldd	r25, Z+3	; 0x03
    719e:	01 97       	sbiw	r24, 0x01	; 1
    71a0:	93 83       	std	Z+3, r25	; 0x03
    71a2:	82 83       	std	Z+2, r24	; 0x02
    71a4:	6d 81       	ldd	r22, Y+5	; 0x05
    71a6:	7e 81       	ldd	r23, Y+6	; 0x06
    71a8:	64 5c       	subi	r22, 0xC4	; 196
    71aa:	7f 4f       	sbci	r23, 0xFF	; 255
    71ac:	71 83       	std	Z+1, r23	; 0x01
    71ae:	60 83       	st	Z, r22
    71b0:	eb cf       	rjmp	.-42     	; 0x7188 <normalize+0x34>
    71b2:	f7 01       	movw	r30, r14
    71b4:	82 81       	ldd	r24, Z+2	; 0x02
    71b6:	93 81       	ldd	r25, Z+3	; 0x03
    71b8:	8c 33       	cpi	r24, 0x3C	; 60
    71ba:	91 05       	cpc	r25, r1
    71bc:	5c f0       	brlt	.+22     	; 0x71d4 <normalize+0x80>
    71be:	f7 01       	movw	r30, r14
    71c0:	24 81       	ldd	r18, Z+4	; 0x04
    71c2:	35 81       	ldd	r19, Z+5	; 0x05
    71c4:	2f 5f       	subi	r18, 0xFF	; 255
    71c6:	3f 4f       	sbci	r19, 0xFF	; 255
    71c8:	35 83       	std	Z+5, r19	; 0x05
    71ca:	24 83       	std	Z+4, r18	; 0x04
    71cc:	cc 97       	sbiw	r24, 0x3c	; 60
    71ce:	93 83       	std	Z+3, r25	; 0x03
    71d0:	82 83       	std	Z+2, r24	; 0x02
    71d2:	ef cf       	rjmp	.-34     	; 0x71b2 <normalize+0x5e>
    71d4:	f7 01       	movw	r30, r14
    71d6:	22 80       	ldd	r2, Z+2	; 0x02
    71d8:	33 80       	ldd	r3, Z+3	; 0x03
    71da:	37 fe       	sbrs	r3, 7
    71dc:	0d c0       	rjmp	.+26     	; 0x71f8 <normalize+0xa4>
    71de:	f7 01       	movw	r30, r14
    71e0:	84 81       	ldd	r24, Z+4	; 0x04
    71e2:	95 81       	ldd	r25, Z+5	; 0x05
    71e4:	01 97       	sbiw	r24, 0x01	; 1
    71e6:	95 83       	std	Z+5, r25	; 0x05
    71e8:	84 83       	std	Z+4, r24	; 0x04
    71ea:	fc e3       	ldi	r31, 0x3C	; 60
    71ec:	2f 0e       	add	r2, r31
    71ee:	31 1c       	adc	r3, r1
    71f0:	f7 01       	movw	r30, r14
    71f2:	33 82       	std	Z+3, r3	; 0x03
    71f4:	22 82       	std	Z+2, r2	; 0x02
    71f6:	ee cf       	rjmp	.-36     	; 0x71d4 <normalize+0x80>
    71f8:	f7 01       	movw	r30, r14
    71fa:	84 81       	ldd	r24, Z+4	; 0x04
    71fc:	95 81       	ldd	r25, Z+5	; 0x05
    71fe:	88 31       	cpi	r24, 0x18	; 24
    7200:	91 05       	cpc	r25, r1
    7202:	5c f0       	brlt	.+22     	; 0x721a <normalize+0xc6>
    7204:	f7 01       	movw	r30, r14
    7206:	26 81       	ldd	r18, Z+6	; 0x06
    7208:	37 81       	ldd	r19, Z+7	; 0x07
    720a:	2f 5f       	subi	r18, 0xFF	; 255
    720c:	3f 4f       	sbci	r19, 0xFF	; 255
    720e:	37 83       	std	Z+7, r19	; 0x07
    7210:	26 83       	std	Z+6, r18	; 0x06
    7212:	48 97       	sbiw	r24, 0x18	; 24
    7214:	95 83       	std	Z+5, r25	; 0x05
    7216:	84 83       	std	Z+4, r24	; 0x04
    7218:	ef cf       	rjmp	.-34     	; 0x71f8 <normalize+0xa4>
    721a:	f7 01       	movw	r30, r14
    721c:	04 81       	ldd	r16, Z+4	; 0x04
    721e:	15 81       	ldd	r17, Z+5	; 0x05
    7220:	17 ff       	sbrs	r17, 7
    7222:	0b c0       	rjmp	.+22     	; 0x723a <normalize+0xe6>
    7224:	f7 01       	movw	r30, r14
    7226:	86 81       	ldd	r24, Z+6	; 0x06
    7228:	97 81       	ldd	r25, Z+7	; 0x07
    722a:	01 97       	sbiw	r24, 0x01	; 1
    722c:	97 83       	std	Z+7, r25	; 0x07
    722e:	86 83       	std	Z+6, r24	; 0x06
    7230:	08 5e       	subi	r16, 0xE8	; 232
    7232:	1f 4f       	sbci	r17, 0xFF	; 255
    7234:	15 83       	std	Z+5, r17	; 0x05
    7236:	04 83       	std	Z+4, r16	; 0x04
    7238:	f0 cf       	rjmp	.-32     	; 0x721a <normalize+0xc6>
    723a:	f7 01       	movw	r30, r14
    723c:	80 85       	ldd	r24, Z+8	; 0x08
    723e:	91 85       	ldd	r25, Z+9	; 0x09
    7240:	8c 30       	cpi	r24, 0x0C	; 12
    7242:	91 05       	cpc	r25, r1
    7244:	5c f0       	brlt	.+22     	; 0x725c <normalize+0x108>
    7246:	f7 01       	movw	r30, r14
    7248:	22 85       	ldd	r18, Z+10	; 0x0a
    724a:	33 85       	ldd	r19, Z+11	; 0x0b
    724c:	2f 5f       	subi	r18, 0xFF	; 255
    724e:	3f 4f       	sbci	r19, 0xFF	; 255
    7250:	33 87       	std	Z+11, r19	; 0x0b
    7252:	22 87       	std	Z+10, r18	; 0x0a
    7254:	0c 97       	sbiw	r24, 0x0c	; 12
    7256:	91 87       	std	Z+9, r25	; 0x09
    7258:	80 87       	std	Z+8, r24	; 0x08
    725a:	ef cf       	rjmp	.-34     	; 0x723a <normalize+0xe6>
    725c:	f7 01       	movw	r30, r14
    725e:	80 85       	ldd	r24, Z+8	; 0x08
    7260:	91 85       	ldd	r25, Z+9	; 0x09
    7262:	97 ff       	sbrs	r25, 7
    7264:	2d c0       	rjmp	.+90     	; 0x72c0 <normalize+0x16c>
    7266:	f7 01       	movw	r30, r14
    7268:	22 85       	ldd	r18, Z+10	; 0x0a
    726a:	33 85       	ldd	r19, Z+11	; 0x0b
    726c:	21 50       	subi	r18, 0x01	; 1
    726e:	31 09       	sbc	r19, r1
    7270:	33 87       	std	Z+11, r19	; 0x0b
    7272:	22 87       	std	Z+10, r18	; 0x0a
    7274:	0c 96       	adiw	r24, 0x0c	; 12
    7276:	91 87       	std	Z+9, r25	; 0x09
    7278:	80 87       	std	Z+8, r24	; 0x08
    727a:	f0 cf       	rjmp	.-32     	; 0x725c <normalize+0x108>
    727c:	f7 01       	movw	r30, r14
    727e:	c6 80       	ldd	r12, Z+6	; 0x06
    7280:	d7 80       	ldd	r13, Z+7	; 0x07
    7282:	a0 84       	ldd	r10, Z+8	; 0x08
    7284:	b1 84       	ldd	r11, Z+9	; 0x09
    7286:	b4 01       	movw	r22, r8
    7288:	c5 01       	movw	r24, r10
    728a:	59 dd       	rcall	.-1358   	; 0x6d3e <Days_Per_Month>
    728c:	8c 15       	cp	r24, r12
    728e:	9d 05       	cpc	r25, r13
    7290:	84 f5       	brge	.+96     	; 0x72f2 <normalize+0x19e>
    7292:	c8 1a       	sub	r12, r24
    7294:	d9 0a       	sbc	r13, r25
    7296:	f7 01       	movw	r30, r14
    7298:	d7 82       	std	Z+7, r13	; 0x07
    729a:	c6 82       	std	Z+6, r12	; 0x06
    729c:	c5 01       	movw	r24, r10
    729e:	01 96       	adiw	r24, 0x01	; 1
    72a0:	91 87       	std	Z+9, r25	; 0x09
    72a2:	80 87       	std	Z+8, r24	; 0x08
    72a4:	0c 97       	sbiw	r24, 0x0c	; 12
    72a6:	54 f3       	brlt	.-44     	; 0x727c <normalize+0x128>
    72a8:	fb e0       	ldi	r31, 0x0B	; 11
    72aa:	af 1a       	sub	r10, r31
    72ac:	b1 08       	sbc	r11, r1
    72ae:	f7 01       	movw	r30, r14
    72b0:	b1 86       	std	Z+9, r11	; 0x09
    72b2:	a0 86       	std	Z+8, r10	; 0x08
    72b4:	ff ef       	ldi	r31, 0xFF	; 255
    72b6:	8f 1a       	sub	r8, r31
    72b8:	9f 0a       	sbc	r9, r31
    72ba:	f7 01       	movw	r30, r14
    72bc:	93 86       	std	Z+11, r9	; 0x0b
    72be:	82 86       	std	Z+10, r8	; 0x0a
    72c0:	f7 01       	movw	r30, r14
    72c2:	82 84       	ldd	r8, Z+10	; 0x0a
    72c4:	93 84       	ldd	r9, Z+11	; 0x0b
    72c6:	da cf       	rjmp	.-76     	; 0x727c <normalize+0x128>
    72c8:	f7 01       	movw	r30, r14
    72ca:	80 85       	ldd	r24, Z+8	; 0x08
    72cc:	91 85       	ldd	r25, Z+9	; 0x09
    72ce:	9c 01       	movw	r18, r24
    72d0:	21 50       	subi	r18, 0x01	; 1
    72d2:	31 09       	sbc	r19, r1
    72d4:	37 fd       	sbrc	r19, 7
    72d6:	16 c0       	rjmp	.+44     	; 0x7304 <normalize+0x1b0>
    72d8:	31 87       	std	Z+9, r19	; 0x09
    72da:	20 87       	std	Z+8, r18	; 0x08
    72dc:	f7 01       	movw	r30, r14
    72de:	62 85       	ldd	r22, Z+10	; 0x0a
    72e0:	73 85       	ldd	r23, Z+11	; 0x0b
    72e2:	80 85       	ldd	r24, Z+8	; 0x08
    72e4:	91 85       	ldd	r25, Z+9	; 0x09
    72e6:	2b dd       	rcall	.-1450   	; 0x6d3e <Days_Per_Month>
    72e8:	88 0d       	add	r24, r8
    72ea:	99 1d       	adc	r25, r9
    72ec:	f7 01       	movw	r30, r14
    72ee:	97 83       	std	Z+7, r25	; 0x07
    72f0:	86 83       	std	Z+6, r24	; 0x06
    72f2:	f7 01       	movw	r30, r14
    72f4:	86 80       	ldd	r8, Z+6	; 0x06
    72f6:	97 80       	ldd	r9, Z+7	; 0x07
    72f8:	a2 84       	ldd	r10, Z+10	; 0x0a
    72fa:	b3 84       	ldd	r11, Z+11	; 0x0b
    72fc:	18 14       	cp	r1, r8
    72fe:	19 04       	cpc	r1, r9
    7300:	1c f7       	brge	.-58     	; 0x72c8 <normalize+0x174>
    7302:	0b c0       	rjmp	.+22     	; 0x731a <normalize+0x1c6>
    7304:	0b 96       	adiw	r24, 0x0b	; 11
    7306:	f7 01       	movw	r30, r14
    7308:	91 87       	std	Z+9, r25	; 0x09
    730a:	80 87       	std	Z+8, r24	; 0x08
    730c:	f1 e0       	ldi	r31, 0x01	; 1
    730e:	af 1a       	sub	r10, r31
    7310:	b1 08       	sbc	r11, r1
    7312:	f7 01       	movw	r30, r14
    7314:	b3 86       	std	Z+11, r11	; 0x0b
    7316:	a2 86       	std	Z+10, r10	; 0x0a
    7318:	e1 cf       	rjmp	.-62     	; 0x72dc <normalize+0x188>
    731a:	a5 01       	movw	r20, r10
    731c:	44 59       	subi	r20, 0x94	; 148
    731e:	58 4f       	sbci	r21, 0xF8	; 248
    7320:	58 87       	std	Y+8, r21	; 0x08
    7322:	4f 83       	std	Y+7, r20	; 0x07
    7324:	35 01       	movw	r6, r10
    7326:	56 e4       	ldi	r21, 0x46	; 70
    7328:	65 1a       	sub	r6, r21
    732a:	71 08       	sbc	r7, r1
    732c:	89 e8       	ldi	r24, 0x89	; 137
    732e:	68 16       	cp	r6, r24
    7330:	71 04       	cpc	r7, r1
    7332:	08 f0       	brcs	.+2      	; 0x7336 <normalize+0x1e2>
    7334:	9b c0       	rjmp	.+310    	; 0x746c <normalize+0x318>
    7336:	c0 84       	ldd	r12, Z+8	; 0x08
    7338:	d1 84       	ldd	r13, Z+9	; 0x09
    733a:	9c e0       	ldi	r25, 0x0C	; 12
    733c:	c9 16       	cp	r12, r25
    733e:	d1 04       	cpc	r13, r1
    7340:	08 f0       	brcs	.+2      	; 0x7344 <normalize+0x1f0>
    7342:	94 c0       	rjmp	.+296    	; 0x746c <normalize+0x318>
    7344:	24 01       	movw	r4, r8
    7346:	e1 e0       	ldi	r30, 0x01	; 1
    7348:	4e 1a       	sub	r4, r30
    734a:	51 08       	sbc	r5, r1
    734c:	6f 81       	ldd	r22, Y+7	; 0x07
    734e:	78 85       	ldd	r23, Y+8	; 0x08
    7350:	c6 01       	movw	r24, r12
    7352:	f5 dc       	rcall	.-1558   	; 0x6d3e <Days_Per_Month>
    7354:	48 16       	cp	r4, r24
    7356:	59 06       	cpc	r5, r25
    7358:	0c f0       	brlt	.+2      	; 0x735c <normalize+0x208>
    735a:	88 c0       	rjmp	.+272    	; 0x746c <normalize+0x318>
    735c:	08 31       	cpi	r16, 0x18	; 24
    735e:	11 05       	cpc	r17, r1
    7360:	0c f0       	brlt	.+2      	; 0x7364 <normalize+0x210>
    7362:	84 c0       	rjmp	.+264    	; 0x746c <normalize+0x318>
    7364:	fc e3       	ldi	r31, 0x3C	; 60
    7366:	2f 16       	cp	r2, r31
    7368:	31 04       	cpc	r3, r1
    736a:	0c f0       	brlt	.+2      	; 0x736e <normalize+0x21a>
    736c:	7f c0       	rjmp	.+254    	; 0x746c <normalize+0x318>
    736e:	4d 81       	ldd	r20, Y+5	; 0x05
    7370:	5e 81       	ldd	r21, Y+6	; 0x06
    7372:	4c 33       	cpi	r20, 0x3C	; 60
    7374:	51 05       	cpc	r21, r1
    7376:	0c f0       	brlt	.+2      	; 0x737a <normalize+0x226>
    7378:	79 c0       	rjmp	.+242    	; 0x746c <normalize+0x318>
    737a:	2d e6       	ldi	r18, 0x6D	; 109
    737c:	31 e0       	ldi	r19, 0x01	; 1
    737e:	d3 01       	movw	r26, r6
    7380:	0e 94 c6 e6 	call	0x1cd8c	; 0x1cd8c <__usmulhisi3>
    7384:	f6 01       	movw	r30, r12
    7386:	ee 0f       	add	r30, r30
    7388:	ff 1f       	adc	r31, r31
    738a:	e0 56       	subi	r30, 0x60	; 96
    738c:	fc 4f       	sbci	r31, 0xFC	; 252
    738e:	20 81       	ld	r18, Z
    7390:	31 81       	ldd	r19, Z+1	; 0x01
    7392:	dc 01       	movw	r26, r24
    7394:	cb 01       	movw	r24, r22
    7396:	82 0f       	add	r24, r18
    7398:	93 1f       	adc	r25, r19
    739a:	a1 1d       	adc	r26, r1
    739c:	b1 1d       	adc	r27, r1
    739e:	05 2c       	mov	r0, r5
    73a0:	00 0c       	add	r0, r0
    73a2:	66 08       	sbc	r6, r6
    73a4:	77 08       	sbc	r7, r7
    73a6:	48 0e       	add	r4, r24
    73a8:	59 1e       	adc	r5, r25
    73aa:	6a 1e       	adc	r6, r26
    73ac:	7b 1e       	adc	r7, r27
    73ae:	1a 14       	cp	r1, r10
    73b0:	1b 04       	cpc	r1, r11
    73b2:	1c f4       	brge	.+6      	; 0x73ba <normalize+0x266>
    73b4:	51 e0       	ldi	r21, 0x01	; 1
    73b6:	a5 1a       	sub	r10, r21
    73b8:	b1 08       	sbc	r11, r1
    73ba:	45 01       	movw	r8, r10
    73bc:	95 94       	asr	r9
    73be:	87 94       	ror	r8
    73c0:	95 94       	asr	r9
    73c2:	87 94       	ror	r8
    73c4:	88 ec       	ldi	r24, 0xC8	; 200
    73c6:	a8 16       	cp	r10, r24
    73c8:	b1 04       	cpc	r11, r1
    73ca:	1c f0       	brlt	.+6      	; 0x73d2 <normalize+0x27e>
    73cc:	91 e0       	ldi	r25, 0x01	; 1
    73ce:	89 1a       	sub	r8, r25
    73d0:	91 08       	sbc	r9, r1
    73d2:	09 2c       	mov	r0, r9
    73d4:	00 0c       	add	r0, r0
    73d6:	aa 08       	sbc	r10, r10
    73d8:	bb 08       	sbc	r11, r11
    73da:	84 0c       	add	r8, r4
    73dc:	95 1c       	adc	r9, r5
    73de:	a6 1c       	adc	r10, r6
    73e0:	b7 1c       	adc	r11, r7
    73e2:	24 01       	movw	r4, r8
    73e4:	35 01       	movw	r6, r10
    73e6:	e1 e1       	ldi	r30, 0x11	; 17
    73e8:	4e 1a       	sub	r4, r30
    73ea:	51 08       	sbc	r5, r1
    73ec:	61 08       	sbc	r6, r1
    73ee:	71 08       	sbc	r7, r1
    73f0:	f2 e0       	ldi	r31, 0x02	; 2
    73f2:	cf 16       	cp	r12, r31
    73f4:	d1 04       	cpc	r13, r1
    73f6:	64 f0       	brlt	.+24     	; 0x7410 <normalize+0x2bc>
    73f8:	8f 81       	ldd	r24, Y+7	; 0x07
    73fa:	98 85       	ldd	r25, Y+8	; 0x08
    73fc:	7b dc       	rcall	.-1802   	; 0x6cf4 <IS_Leap>
    73fe:	89 2b       	or	r24, r25
    7400:	39 f0       	breq	.+14     	; 0x7410 <normalize+0x2bc>
    7402:	24 01       	movw	r4, r8
    7404:	35 01       	movw	r6, r10
    7406:	40 e1       	ldi	r20, 0x10	; 16
    7408:	44 1a       	sub	r4, r20
    740a:	51 08       	sbc	r5, r1
    740c:	61 08       	sbc	r6, r1
    740e:	71 08       	sbc	r7, r1
    7410:	a8 e1       	ldi	r26, 0x18	; 24
    7412:	b0 e0       	ldi	r27, 0x00	; 0
    7414:	a3 01       	movw	r20, r6
    7416:	92 01       	movw	r18, r4
    7418:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    741c:	01 2e       	mov	r0, r17
    741e:	00 0c       	add	r0, r0
    7420:	22 0b       	sbc	r18, r18
    7422:	33 0b       	sbc	r19, r19
    7424:	a9 01       	movw	r20, r18
    7426:	98 01       	movw	r18, r16
    7428:	26 0f       	add	r18, r22
    742a:	37 1f       	adc	r19, r23
    742c:	48 1f       	adc	r20, r24
    742e:	59 1f       	adc	r21, r25
    7430:	ac e3       	ldi	r26, 0x3C	; 60
    7432:	b0 e0       	ldi	r27, 0x00	; 0
    7434:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    7438:	81 01       	movw	r16, r2
    743a:	03 2c       	mov	r0, r3
    743c:	00 0c       	add	r0, r0
    743e:	22 0b       	sbc	r18, r18
    7440:	33 0b       	sbc	r19, r19
    7442:	a9 01       	movw	r20, r18
    7444:	98 01       	movw	r18, r16
    7446:	26 0f       	add	r18, r22
    7448:	37 1f       	adc	r19, r23
    744a:	48 1f       	adc	r20, r24
    744c:	59 1f       	adc	r21, r25
    744e:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    7452:	ed 81       	ldd	r30, Y+5	; 0x05
    7454:	fe 81       	ldd	r31, Y+6	; 0x06
    7456:	8f 01       	movw	r16, r30
    7458:	ff 0f       	add	r31, r31
    745a:	22 0b       	sbc	r18, r18
    745c:	33 0b       	sbc	r19, r19
    745e:	48 01       	movw	r8, r16
    7460:	59 01       	movw	r10, r18
    7462:	86 0e       	add	r8, r22
    7464:	97 1e       	adc	r9, r23
    7466:	a8 1e       	adc	r10, r24
    7468:	b9 1e       	adc	r11, r25
    746a:	04 c0       	rjmp	.+8      	; 0x7474 <normalize+0x320>
    746c:	88 24       	eor	r8, r8
    746e:	8a 94       	dec	r8
    7470:	98 2c       	mov	r9, r8
    7472:	54 01       	movw	r10, r8
    7474:	49 85       	ldd	r20, Y+9	; 0x09
    7476:	5a 85       	ldd	r21, Y+10	; 0x0a
    7478:	45 2b       	or	r20, r21
    747a:	e9 f0       	breq	.+58     	; 0x74b6 <normalize+0x362>
    747c:	ce 01       	movw	r24, r28
    747e:	01 96       	adiw	r24, 0x01	; 1
    7480:	7d dd       	rcall	.-1286   	; 0x6f7c <gettimezone>
    7482:	a9 81       	ldd	r26, Y+1	; 0x01
    7484:	ba 81       	ldd	r27, Y+2	; 0x02
    7486:	2c e3       	ldi	r18, 0x3C	; 60
    7488:	30 e0       	ldi	r19, 0x00	; 0
    748a:	0e 94 c6 e6 	call	0x1cd8c	; 0x1cd8c <__usmulhisi3>
    748e:	2b 01       	movw	r4, r22
    7490:	3c 01       	movw	r6, r24
    7492:	c5 01       	movw	r24, r10
    7494:	b4 01       	movw	r22, r8
    7496:	e2 dd       	rcall	.-1084   	; 0x705c <is_dst>
    7498:	89 2b       	or	r24, r25
    749a:	51 f0       	breq	.+20     	; 0x74b0 <normalize+0x35c>
    749c:	50 e1       	ldi	r21, 0x10	; 16
    749e:	45 1a       	sub	r4, r21
    74a0:	5e e0       	ldi	r21, 0x0E	; 14
    74a2:	55 0a       	sbc	r5, r21
    74a4:	61 08       	sbc	r6, r1
    74a6:	71 08       	sbc	r7, r1
    74a8:	cc 24       	eor	r12, r12
    74aa:	c3 94       	inc	r12
    74ac:	d1 2c       	mov	r13, r1
    74ae:	08 c0       	rjmp	.+16     	; 0x74c0 <normalize+0x36c>
    74b0:	c1 2c       	mov	r12, r1
    74b2:	d1 2c       	mov	r13, r1
    74b4:	05 c0       	rjmp	.+10     	; 0x74c0 <normalize+0x36c>
    74b6:	c1 2c       	mov	r12, r1
    74b8:	d1 2c       	mov	r13, r1
    74ba:	41 2c       	mov	r4, r1
    74bc:	51 2c       	mov	r5, r1
    74be:	32 01       	movw	r6, r4
    74c0:	87 01       	movw	r16, r14
    74c2:	a3 01       	movw	r20, r6
    74c4:	92 01       	movw	r18, r4
    74c6:	c5 01       	movw	r24, r10
    74c8:	b4 01       	movw	r22, r8
    74ca:	5a dc       	rcall	.-1868   	; 0x6d80 <time_to_tm>
    74cc:	c1 14       	cp	r12, r1
    74ce:	d1 04       	cpc	r13, r1
    74d0:	29 f0       	breq	.+10     	; 0x74dc <normalize+0x388>
    74d2:	21 e0       	ldi	r18, 0x01	; 1
    74d4:	30 e0       	ldi	r19, 0x00	; 0
    74d6:	f7 01       	movw	r30, r14
    74d8:	31 8b       	std	Z+17, r19	; 0x11
    74da:	20 8b       	std	Z+16, r18	; 0x10
    74dc:	2a 96       	adiw	r28, 0x0a	; 10
    74de:	e2 e1       	ldi	r30, 0x12	; 18
    74e0:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

000074e4 <timegm>:
    74e4:	60 e0       	ldi	r22, 0x00	; 0
    74e6:	70 e0       	ldi	r23, 0x00	; 0
    74e8:	35 ce       	rjmp	.-918    	; 0x7154 <normalize>
    74ea:	08 95       	ret

000074ec <setdate_r>:
    74ec:	cf 92       	push	r12
    74ee:	df 92       	push	r13
    74f0:	ef 92       	push	r14
    74f2:	ff 92       	push	r15
    74f4:	cf 93       	push	r28
    74f6:	df 93       	push	r29
    74f8:	cd b7       	in	r28, 0x3d	; 61
    74fa:	de b7       	in	r29, 0x3e	; 62
    74fc:	a5 97       	sbiw	r28, 0x25	; 37
    74fe:	0f b6       	in	r0, 0x3f	; 63
    7500:	f8 94       	cli
    7502:	de bf       	out	0x3e, r29	; 62
    7504:	0f be       	out	0x3f, r0	; 63
    7506:	cd bf       	out	0x3d, r28	; 61
    7508:	9d a3       	std	Y+37, r25	; 0x25
    750a:	8c a3       	std	Y+36, r24	; 0x24
    750c:	1f 82       	std	Y+7, r1	; 0x07
    750e:	1e 82       	std	Y+6, r1	; 0x06
    7510:	19 86       	std	Y+9, r1	; 0x09
    7512:	18 86       	std	Y+8, r1	; 0x08
    7514:	1b 86       	std	Y+11, r1	; 0x0b
    7516:	1a 86       	std	Y+10, r1	; 0x0a
    7518:	1d 86       	std	Y+13, r1	; 0x0d
    751a:	1c 86       	std	Y+12, r1	; 0x0c
    751c:	1f 86       	std	Y+15, r1	; 0x0f
    751e:	1e 86       	std	Y+14, r1	; 0x0e
    7520:	19 8a       	std	Y+17, r1	; 0x11
    7522:	18 8a       	std	Y+16, r1	; 0x10
    7524:	8c a1       	ldd	r24, Y+36	; 0x24
    7526:	9d a1       	ldd	r25, Y+37	; 0x25
    7528:	fc 01       	movw	r30, r24
    752a:	20 81       	ld	r18, Z
    752c:	20 32       	cpi	r18, 0x20	; 32
    752e:	21 f4       	brne	.+8      	; 0x7538 <setdate_r+0x4c>
    7530:	01 96       	adiw	r24, 0x01	; 1
    7532:	9d a3       	std	Y+37, r25	; 0x25
    7534:	8c a3       	std	Y+36, r24	; 0x24
    7536:	f6 cf       	rjmp	.-20     	; 0x7524 <setdate_r+0x38>
    7538:	4a e0       	ldi	r20, 0x0A	; 10
    753a:	50 e0       	ldi	r21, 0x00	; 0
    753c:	be 01       	movw	r22, r28
    753e:	6c 5d       	subi	r22, 0xDC	; 220
    7540:	7f 4f       	sbci	r23, 0xFF	; 255
    7542:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
    7546:	79 8b       	std	Y+17, r23	; 0x11
    7548:	68 8b       	std	Y+16, r22	; 0x10
    754a:	8c a1       	ldd	r24, Y+36	; 0x24
    754c:	9d a1       	ldd	r25, Y+37	; 0x25
    754e:	fc 01       	movw	r30, r24
    7550:	20 81       	ld	r18, Z
    7552:	20 32       	cpi	r18, 0x20	; 32
    7554:	21 f4       	brne	.+8      	; 0x755e <setdate_r+0x72>
    7556:	01 96       	adiw	r24, 0x01	; 1
    7558:	9d a3       	std	Y+37, r25	; 0x25
    755a:	8c a3       	std	Y+36, r24	; 0x24
    755c:	f6 cf       	rjmp	.-20     	; 0x754a <setdate_r+0x5e>
    755e:	4a e0       	ldi	r20, 0x0A	; 10
    7560:	50 e0       	ldi	r21, 0x00	; 0
    7562:	be 01       	movw	r22, r28
    7564:	6c 5d       	subi	r22, 0xDC	; 220
    7566:	7f 4f       	sbci	r23, 0xFF	; 255
    7568:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
    756c:	7f 87       	std	Y+15, r23	; 0x0f
    756e:	6e 87       	std	Y+14, r22	; 0x0e
    7570:	8c a1       	ldd	r24, Y+36	; 0x24
    7572:	9d a1       	ldd	r25, Y+37	; 0x25
    7574:	fc 01       	movw	r30, r24
    7576:	20 81       	ld	r18, Z
    7578:	20 32       	cpi	r18, 0x20	; 32
    757a:	21 f4       	brne	.+8      	; 0x7584 <setdate_r+0x98>
    757c:	01 96       	adiw	r24, 0x01	; 1
    757e:	9d a3       	std	Y+37, r25	; 0x25
    7580:	8c a3       	std	Y+36, r24	; 0x24
    7582:	f6 cf       	rjmp	.-20     	; 0x7570 <setdate_r+0x84>
    7584:	4a e0       	ldi	r20, 0x0A	; 10
    7586:	50 e0       	ldi	r21, 0x00	; 0
    7588:	be 01       	movw	r22, r28
    758a:	6c 5d       	subi	r22, 0xDC	; 220
    758c:	7f 4f       	sbci	r23, 0xFF	; 255
    758e:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
    7592:	7d 87       	std	Y+13, r23	; 0x0d
    7594:	6c 87       	std	Y+12, r22	; 0x0c
    7596:	8c a1       	ldd	r24, Y+36	; 0x24
    7598:	9d a1       	ldd	r25, Y+37	; 0x25
    759a:	fc 01       	movw	r30, r24
    759c:	20 81       	ld	r18, Z
    759e:	20 32       	cpi	r18, 0x20	; 32
    75a0:	21 f4       	brne	.+8      	; 0x75aa <setdate_r+0xbe>
    75a2:	01 96       	adiw	r24, 0x01	; 1
    75a4:	9d a3       	std	Y+37, r25	; 0x25
    75a6:	8c a3       	std	Y+36, r24	; 0x24
    75a8:	f6 cf       	rjmp	.-20     	; 0x7596 <setdate_r+0xaa>
    75aa:	4a e0       	ldi	r20, 0x0A	; 10
    75ac:	50 e0       	ldi	r21, 0x00	; 0
    75ae:	be 01       	movw	r22, r28
    75b0:	6c 5d       	subi	r22, 0xDC	; 220
    75b2:	7f 4f       	sbci	r23, 0xFF	; 255
    75b4:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
    75b8:	7b 87       	std	Y+11, r23	; 0x0b
    75ba:	6a 87       	std	Y+10, r22	; 0x0a
    75bc:	ec a1       	ldd	r30, Y+36	; 0x24
    75be:	fd a1       	ldd	r31, Y+37	; 0x25
    75c0:	80 81       	ld	r24, Z
    75c2:	88 23       	and	r24, r24
    75c4:	39 f0       	breq	.+14     	; 0x75d4 <setdate_r+0xe8>
    75c6:	80 32       	cpi	r24, 0x20	; 32
    75c8:	11 f0       	breq	.+4      	; 0x75ce <setdate_r+0xe2>
    75ca:	8a 33       	cpi	r24, 0x3A	; 58
    75cc:	19 f4       	brne	.+6      	; 0x75d4 <setdate_r+0xe8>
    75ce:	31 96       	adiw	r30, 0x01	; 1
    75d0:	fd a3       	std	Y+37, r31	; 0x25
    75d2:	ec a3       	std	Y+36, r30	; 0x24
    75d4:	4a e0       	ldi	r20, 0x0A	; 10
    75d6:	50 e0       	ldi	r21, 0x00	; 0
    75d8:	be 01       	movw	r22, r28
    75da:	6c 5d       	subi	r22, 0xDC	; 220
    75dc:	7f 4f       	sbci	r23, 0xFF	; 255
    75de:	8c a1       	ldd	r24, Y+36	; 0x24
    75e0:	9d a1       	ldd	r25, Y+37	; 0x25
    75e2:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
    75e6:	79 87       	std	Y+9, r23	; 0x09
    75e8:	68 87       	std	Y+8, r22	; 0x08
    75ea:	ec a1       	ldd	r30, Y+36	; 0x24
    75ec:	fd a1       	ldd	r31, Y+37	; 0x25
    75ee:	80 81       	ld	r24, Z
    75f0:	88 23       	and	r24, r24
    75f2:	39 f0       	breq	.+14     	; 0x7602 <setdate_r+0x116>
    75f4:	80 32       	cpi	r24, 0x20	; 32
    75f6:	11 f0       	breq	.+4      	; 0x75fc <setdate_r+0x110>
    75f8:	8a 33       	cpi	r24, 0x3A	; 58
    75fa:	19 f4       	brne	.+6      	; 0x7602 <setdate_r+0x116>
    75fc:	31 96       	adiw	r30, 0x01	; 1
    75fe:	fd a3       	std	Y+37, r31	; 0x25
    7600:	ec a3       	std	Y+36, r30	; 0x24
    7602:	4a e0       	ldi	r20, 0x0A	; 10
    7604:	50 e0       	ldi	r21, 0x00	; 0
    7606:	be 01       	movw	r22, r28
    7608:	6c 5d       	subi	r22, 0xDC	; 220
    760a:	7f 4f       	sbci	r23, 0xFF	; 255
    760c:	8c a1       	ldd	r24, Y+36	; 0x24
    760e:	9d a1       	ldd	r25, Y+37	; 0x25
    7610:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
    7614:	7f 83       	std	Y+7, r23	; 0x07
    7616:	6e 83       	std	Y+6, r22	; 0x06
    7618:	2e 85       	ldd	r18, Y+14	; 0x0e
    761a:	3f 85       	ldd	r19, Y+15	; 0x0f
    761c:	21 50       	subi	r18, 0x01	; 1
    761e:	31 09       	sbc	r19, r1
    7620:	3f 87       	std	Y+15, r19	; 0x0f
    7622:	2e 87       	std	Y+14, r18	; 0x0e
    7624:	88 89       	ldd	r24, Y+16	; 0x10
    7626:	99 89       	ldd	r25, Y+17	; 0x11
    7628:	ac 01       	movw	r20, r24
    762a:	42 5b       	subi	r20, 0xB2	; 178
    762c:	57 40       	sbci	r21, 0x07	; 7
    762e:	45 34       	cpi	r20, 0x45	; 69
    7630:	51 05       	cpc	r21, r1
    7632:	38 f0       	brcs	.+14     	; 0x7642 <setdate_r+0x156>
    7634:	ed b7       	in	r30, 0x3d	; 61
    7636:	fe b7       	in	r31, 0x3e	; 62
    7638:	95 83       	std	Z+5, r25	; 0x05
    763a:	84 83       	std	Z+4, r24	; 0x04
    763c:	89 e1       	ldi	r24, 0x19	; 25
    763e:	97 e0       	ldi	r25, 0x07	; 7
    7640:	34 c0       	rjmp	.+104    	; 0x76aa <setdate_r+0x1be>
    7642:	8c 56       	subi	r24, 0x6C	; 108
    7644:	97 40       	sbci	r25, 0x07	; 7
    7646:	99 8b       	std	Y+17, r25	; 0x11
    7648:	88 8b       	std	Y+16, r24	; 0x10
    764a:	2c 30       	cpi	r18, 0x0C	; 12
    764c:	31 05       	cpc	r19, r1
    764e:	38 f0       	brcs	.+14     	; 0x765e <setdate_r+0x172>
    7650:	ed b7       	in	r30, 0x3d	; 61
    7652:	fe b7       	in	r31, 0x3e	; 62
    7654:	95 83       	std	Z+5, r25	; 0x05
    7656:	84 83       	std	Z+4, r24	; 0x04
    7658:	88 e0       	ldi	r24, 0x08	; 8
    765a:	97 e0       	ldi	r25, 0x07	; 7
    765c:	26 c0       	rjmp	.+76     	; 0x76aa <setdate_r+0x1be>
    765e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7660:	9d 85       	ldd	r25, Y+13	; 0x0d
    7662:	9c 01       	movw	r18, r24
    7664:	21 50       	subi	r18, 0x01	; 1
    7666:	31 09       	sbc	r19, r1
    7668:	2f 31       	cpi	r18, 0x1F	; 31
    766a:	31 05       	cpc	r19, r1
    766c:	38 f0       	brcs	.+14     	; 0x767c <setdate_r+0x190>
    766e:	ed b7       	in	r30, 0x3d	; 61
    7670:	fe b7       	in	r31, 0x3e	; 62
    7672:	95 83       	std	Z+5, r25	; 0x05
    7674:	84 83       	std	Z+4, r24	; 0x04
    7676:	87 ef       	ldi	r24, 0xF7	; 247
    7678:	96 e0       	ldi	r25, 0x06	; 6
    767a:	17 c0       	rjmp	.+46     	; 0x76aa <setdate_r+0x1be>
    767c:	8a 85       	ldd	r24, Y+10	; 0x0a
    767e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7680:	88 31       	cpi	r24, 0x18	; 24
    7682:	91 05       	cpc	r25, r1
    7684:	38 f0       	brcs	.+14     	; 0x7694 <setdate_r+0x1a8>
    7686:	ed b7       	in	r30, 0x3d	; 61
    7688:	fe b7       	in	r31, 0x3e	; 62
    768a:	95 83       	std	Z+5, r25	; 0x05
    768c:	84 83       	std	Z+4, r24	; 0x04
    768e:	85 ee       	ldi	r24, 0xE5	; 229
    7690:	96 e0       	ldi	r25, 0x06	; 6
    7692:	0b c0       	rjmp	.+22     	; 0x76aa <setdate_r+0x1be>
    7694:	88 85       	ldd	r24, Y+8	; 0x08
    7696:	99 85       	ldd	r25, Y+9	; 0x09
    7698:	8c 33       	cpi	r24, 0x3C	; 60
    769a:	91 05       	cpc	r25, r1
    769c:	68 f0       	brcs	.+26     	; 0x76b8 <setdate_r+0x1cc>
    769e:	ed b7       	in	r30, 0x3d	; 61
    76a0:	fe b7       	in	r31, 0x3e	; 62
    76a2:	95 83       	std	Z+5, r25	; 0x05
    76a4:	84 83       	std	Z+4, r24	; 0x04
    76a6:	84 ed       	ldi	r24, 0xD4	; 212
    76a8:	96 e0       	ldi	r25, 0x06	; 6
    76aa:	a0 e0       	ldi	r26, 0x00	; 0
    76ac:	81 83       	std	Z+1, r24	; 0x01
    76ae:	92 83       	std	Z+2, r25	; 0x02
    76b0:	a3 83       	std	Z+3, r26	; 0x03
    76b2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    76b6:	25 c0       	rjmp	.+74     	; 0x7702 <setdate_r+0x216>
    76b8:	ce 01       	movw	r24, r28
    76ba:	06 96       	adiw	r24, 0x06	; 6
    76bc:	13 df       	rcall	.-474    	; 0x74e4 <timegm>
    76be:	6b 01       	movw	r12, r22
    76c0:	7c 01       	movw	r14, r24
    76c2:	6c 8f       	std	Y+28, r22	; 0x1c
    76c4:	7d 8f       	std	Y+29, r23	; 0x1d
    76c6:	8e 8f       	std	Y+30, r24	; 0x1e
    76c8:	9f 8f       	std	Y+31, r25	; 0x1f
    76ca:	18 a2       	std	Y+32, r1	; 0x20
    76cc:	19 a2       	std	Y+33, r1	; 0x21
    76ce:	1a a2       	std	Y+34, r1	; 0x22
    76d0:	1b a2       	std	Y+35, r1	; 0x23
    76d2:	be 01       	movw	r22, r28
    76d4:	64 5e       	subi	r22, 0xE4	; 228
    76d6:	7f 4f       	sbci	r23, 0xFF	; 255
    76d8:	80 e0       	ldi	r24, 0x00	; 0
    76da:	90 e0       	ldi	r25, 0x00	; 0
    76dc:	03 db       	rcall	.-2554   	; 0x6ce4 <clock_settime>
    76de:	b7 01       	movw	r22, r14
    76e0:	a6 01       	movw	r20, r12
    76e2:	81 e0       	ldi	r24, 0x01	; 1
    76e4:	90 e0       	ldi	r25, 0x00	; 0
    76e6:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <rtc_init>
    76ea:	81 11       	cpse	r24, r1
    76ec:	0d c0       	rjmp	.+26     	; 0x7708 <setdate_r+0x21c>
    76ee:	8d eb       	ldi	r24, 0xBD	; 189
    76f0:	96 e0       	ldi	r25, 0x06	; 6
    76f2:	a0 e0       	ldi	r26, 0x00	; 0
    76f4:	ed b7       	in	r30, 0x3d	; 61
    76f6:	fe b7       	in	r31, 0x3e	; 62
    76f8:	81 83       	std	Z+1, r24	; 0x01
    76fa:	92 83       	std	Z+2, r25	; 0x02
    76fc:	a3 83       	std	Z+3, r26	; 0x03
    76fe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    7702:	8f ef       	ldi	r24, 0xFF	; 255
    7704:	9f ef       	ldi	r25, 0xFF	; 255
    7706:	02 c0       	rjmp	.+4      	; 0x770c <setdate_r+0x220>
    7708:	80 e0       	ldi	r24, 0x00	; 0
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	a5 96       	adiw	r28, 0x25	; 37
    770e:	0f b6       	in	r0, 0x3f	; 63
    7710:	f8 94       	cli
    7712:	de bf       	out	0x3e, r29	; 62
    7714:	0f be       	out	0x3f, r0	; 63
    7716:	cd bf       	out	0x3d, r28	; 61
    7718:	df 91       	pop	r29
    771a:	cf 91       	pop	r28
    771c:	ff 90       	pop	r15
    771e:	ef 90       	pop	r14
    7720:	df 90       	pop	r13
    7722:	cf 90       	pop	r12
    7724:	08 95       	ret

00007726 <setdate>:
    7726:	ab e2       	ldi	r26, 0x2B	; 43
    7728:	b0 e0       	ldi	r27, 0x00	; 0
    772a:	e9 e9       	ldi	r30, 0x99	; 153
    772c:	fb e3       	ldi	r31, 0x3B	; 59
    772e:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    7732:	8b e2       	ldi	r24, 0x2B	; 43
    7734:	97 e0       	ldi	r25, 0x07	; 7
    7736:	a0 e0       	ldi	r26, 0x00	; 0
    7738:	ed b7       	in	r30, 0x3d	; 61
    773a:	fe b7       	in	r31, 0x3e	; 62
    773c:	81 83       	std	Z+1, r24	; 0x01
    773e:	92 83       	std	Z+2, r25	; 0x02
    7740:	a3 83       	std	Z+3, r26	; 0x03
    7742:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    7746:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
    774a:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
    774e:	66 e2       	ldi	r22, 0x26	; 38
    7750:	70 e0       	ldi	r23, 0x00	; 0
    7752:	ce 01       	movw	r24, r28
    7754:	04 96       	adiw	r24, 0x04	; 4
    7756:	0e 94 62 76 	call	0xecc4	; 0xecc4 <fgets>
    775a:	ce 01       	movw	r24, r28
    775c:	04 96       	adiw	r24, 0x04	; 4
    775e:	c6 de       	rcall	.-628    	; 0x74ec <setdate_r>
    7760:	ab 96       	adiw	r28, 0x2b	; 43
    7762:	e2 e0       	ldi	r30, 0x02	; 2
    7764:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00007768 <find_dst>:
    7768:	a8 e2       	ldi	r26, 0x28	; 40
    776a:	b0 e0       	ldi	r27, 0x00	; 0
    776c:	ea eb       	ldi	r30, 0xBA	; 186
    776e:	fb e3       	ldi	r31, 0x3B	; 59
    7770:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    7774:	3c 01       	movw	r6, r24
    7776:	1a 01       	movw	r2, r20
    7778:	2b 01       	movw	r4, r22
    777a:	49 01       	movw	r8, r18
    777c:	1c a3       	std	Y+36, r17	; 0x24
    777e:	0b a3       	std	Y+35, r16	; 0x23
    7780:	de a2       	std	Y+38, r13	; 0x26
    7782:	cd a2       	std	Y+37, r12	; 0x25
    7784:	b8 a6       	std	Y+40, r11	; 0x28
    7786:	af a2       	std	Y+39, r10	; 0x27
    7788:	be 01       	movw	r22, r28
    778a:	61 5e       	subi	r22, 0xE1	; 225
    778c:	7f 4f       	sbci	r23, 0xFF	; 255
    778e:	ce 01       	movw	r24, r28
    7790:	47 96       	adiw	r24, 0x17	; 23
    7792:	15 dc       	rcall	.-2006   	; 0x6fbe <gettimeofday>
    7794:	af 8d       	ldd	r26, Y+31	; 0x1f
    7796:	b8 a1       	ldd	r27, Y+32	; 0x20
    7798:	2c e3       	ldi	r18, 0x3C	; 60
    779a:	30 e0       	ldi	r19, 0x00	; 0
    779c:	0e 94 c6 e6 	call	0x1cd8c	; 0x1cd8c <__usmulhisi3>
    77a0:	5b 01       	movw	r10, r22
    77a2:	6c 01       	movw	r12, r24
    77a4:	61 14       	cp	r6, r1
    77a6:	71 04       	cpc	r7, r1
    77a8:	31 f0       	breq	.+12     	; 0x77b6 <find_dst+0x4e>
    77aa:	20 e1       	ldi	r18, 0x10	; 16
    77ac:	a2 1a       	sub	r10, r18
    77ae:	2e e0       	ldi	r18, 0x0E	; 14
    77b0:	b2 0a       	sbc	r11, r18
    77b2:	c1 08       	sbc	r12, r1
    77b4:	d1 08       	sbc	r13, r1
    77b6:	81 14       	cp	r8, r1
    77b8:	91 04       	cpc	r9, r1
    77ba:	39 f0       	breq	.+14     	; 0x77ca <find_dst+0x62>
    77bc:	4c e6       	ldi	r20, 0x6C	; 108
    77be:	84 1a       	sub	r8, r20
    77c0:	47 e0       	ldi	r20, 0x07	; 7
    77c2:	94 0a       	sbc	r9, r20
    77c4:	9c 86       	std	Y+12, r9	; 0x0c
    77c6:	8b 86       	std	Y+11, r8	; 0x0b
    77c8:	11 c0       	rjmp	.+34     	; 0x77ec <find_dst+0x84>
    77ca:	21 14       	cp	r2, r1
    77cc:	31 04       	cpc	r3, r1
    77ce:	41 04       	cpc	r4, r1
    77d0:	51 04       	cpc	r5, r1
    77d2:	21 f4       	brne	.+8      	; 0x77dc <find_dst+0x74>
    77d4:	2f 88       	ldd	r2, Y+23	; 0x17
    77d6:	38 8c       	ldd	r3, Y+24	; 0x18
    77d8:	49 8c       	ldd	r4, Y+25	; 0x19
    77da:	5a 8c       	ldd	r5, Y+26	; 0x1a
    77dc:	8e 01       	movw	r16, r28
    77de:	0f 5f       	subi	r16, 0xFF	; 255
    77e0:	1f 4f       	sbci	r17, 0xFF	; 255
    77e2:	a6 01       	movw	r20, r12
    77e4:	95 01       	movw	r18, r10
    77e6:	c2 01       	movw	r24, r4
    77e8:	b1 01       	movw	r22, r2
    77ea:	ca da       	rcall	.-2668   	; 0x6d80 <time_to_tm>
    77ec:	8b a1       	ldd	r24, Y+35	; 0x23
    77ee:	9c a1       	ldd	r25, Y+36	; 0x24
    77f0:	01 97       	sbiw	r24, 0x01	; 1
    77f2:	9a 87       	std	Y+10, r25	; 0x0a
    77f4:	89 87       	std	Y+9, r24	; 0x09
    77f6:	81 e0       	ldi	r24, 0x01	; 1
    77f8:	90 e0       	ldi	r25, 0x00	; 0
    77fa:	98 87       	std	Y+8, r25	; 0x08
    77fc:	8f 83       	std	Y+7, r24	; 0x07
    77fe:	8f a1       	ldd	r24, Y+39	; 0x27
    7800:	98 a5       	ldd	r25, Y+40	; 0x28
    7802:	9e 83       	std	Y+6, r25	; 0x06
    7804:	8d 83       	std	Y+5, r24	; 0x05
    7806:	1c 82       	std	Y+4, r1	; 0x04
    7808:	1b 82       	std	Y+3, r1	; 0x03
    780a:	1a 82       	std	Y+2, r1	; 0x02
    780c:	19 82       	std	Y+1, r1	; 0x01
    780e:	ce 01       	movw	r24, r28
    7810:	01 96       	adiw	r24, 0x01	; 1
    7812:	68 de       	rcall	.-816    	; 0x74e4 <timegm>
    7814:	45 01       	movw	r8, r10
    7816:	56 01       	movw	r10, r12
    7818:	86 0e       	add	r8, r22
    781a:	97 1e       	adc	r9, r23
    781c:	a8 1e       	adc	r10, r24
    781e:	b9 1e       	adc	r11, r25
    7820:	8e 01       	movw	r16, r28
    7822:	0f 5f       	subi	r16, 0xFF	; 255
    7824:	1f 4f       	sbci	r17, 0xFF	; 255
    7826:	20 e0       	ldi	r18, 0x00	; 0
    7828:	30 e0       	ldi	r19, 0x00	; 0
    782a:	a9 01       	movw	r20, r18
    782c:	c5 01       	movw	r24, r10
    782e:	b4 01       	movw	r22, r8
    7830:	a7 da       	rcall	.-2738   	; 0x6d80 <time_to_tm>
    7832:	2d 85       	ldd	r18, Y+13	; 0x0d
    7834:	3e 85       	ldd	r19, Y+14	; 0x0e
    7836:	e7 e0       	ldi	r30, 0x07	; 7
    7838:	f0 e0       	ldi	r31, 0x00	; 0
    783a:	c9 01       	movw	r24, r18
    783c:	bf 01       	movw	r22, r30
    783e:	0e 94 6c e6 	call	0x1ccd8	; 0x1ccd8 <__divmodhi4>
    7842:	4d a1       	ldd	r20, Y+37	; 0x25
    7844:	5e a1       	ldd	r21, Y+38	; 0x26
    7846:	48 17       	cp	r20, r24
    7848:	59 07       	cpc	r21, r25
    784a:	21 f4       	brne	.+8      	; 0x7854 <find_dst+0xec>
    784c:	51 e0       	ldi	r21, 0x01	; 1
    784e:	e5 1a       	sub	r14, r21
    7850:	f1 08       	sbc	r15, r1
    7852:	51 f0       	breq	.+20     	; 0x7868 <find_dst+0x100>
    7854:	80 e8       	ldi	r24, 0x80	; 128
    7856:	88 0e       	add	r8, r24
    7858:	81 e5       	ldi	r24, 0x51	; 81
    785a:	98 1e       	adc	r9, r24
    785c:	81 e0       	ldi	r24, 0x01	; 1
    785e:	a8 1e       	adc	r10, r24
    7860:	b1 1c       	adc	r11, r1
    7862:	2f 5f       	subi	r18, 0xFF	; 255
    7864:	3f 4f       	sbci	r19, 0xFF	; 255
    7866:	e9 cf       	rjmp	.-46     	; 0x783a <find_dst+0xd2>
    7868:	c5 01       	movw	r24, r10
    786a:	b4 01       	movw	r22, r8
    786c:	a8 96       	adiw	r28, 0x28	; 40
    786e:	e2 e1       	ldi	r30, 0x12	; 18
    7870:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00007874 <set_dst>:
    7874:	4f 92       	push	r4
    7876:	5f 92       	push	r5
    7878:	6f 92       	push	r6
    787a:	7f 92       	push	r7
    787c:	af 92       	push	r10
    787e:	bf 92       	push	r11
    7880:	cf 92       	push	r12
    7882:	df 92       	push	r13
    7884:	ef 92       	push	r14
    7886:	ff 92       	push	r15
    7888:	0f 93       	push	r16
    788a:	1f 93       	push	r17
    788c:	cf 93       	push	r28
    788e:	df 93       	push	r29
    7890:	cd b7       	in	r28, 0x3d	; 61
    7892:	de b7       	in	r29, 0x3e	; 62
    7894:	2c 97       	sbiw	r28, 0x0c	; 12
    7896:	0f b6       	in	r0, 0x3f	; 63
    7898:	f8 94       	cli
    789a:	de bf       	out	0x3e, r29	; 62
    789c:	0f be       	out	0x3f, r0	; 63
    789e:	cd bf       	out	0x3d, r28	; 61
    78a0:	2b 01       	movw	r4, r22
    78a2:	3c 01       	movw	r6, r24
    78a4:	67 2b       	or	r22, r23
    78a6:	68 2b       	or	r22, r24
    78a8:	69 2b       	or	r22, r25
    78aa:	51 f4       	brne	.+20     	; 0x78c0 <set_dst+0x4c>
    78ac:	be 01       	movw	r22, r28
    78ae:	67 5f       	subi	r22, 0xF7	; 247
    78b0:	7f 4f       	sbci	r23, 0xFF	; 255
    78b2:	ce 01       	movw	r24, r28
    78b4:	01 96       	adiw	r24, 0x01	; 1
    78b6:	83 db       	rcall	.-2298   	; 0x6fbe <gettimeofday>
    78b8:	49 80       	ldd	r4, Y+1	; 0x01
    78ba:	5a 80       	ldd	r5, Y+2	; 0x02
    78bc:	6b 80       	ldd	r6, Y+3	; 0x03
    78be:	7c 80       	ldd	r7, Y+4	; 0x04
    78c0:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst+0x8>
    78c4:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x9>
    78c8:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0xa>
    78cc:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0xb>
    78d0:	84 15       	cp	r24, r4
    78d2:	95 05       	cpc	r25, r5
    78d4:	a6 05       	cpc	r26, r6
    78d6:	b7 05       	cpc	r27, r7
    78d8:	50 f0       	brcs	.+20     	; 0x78ee <set_dst+0x7a>
    78da:	84 19       	sub	r24, r4
    78dc:	95 09       	sbc	r25, r5
    78de:	a6 09       	sbc	r26, r6
    78e0:	b7 09       	sbc	r27, r7
    78e2:	80 38       	cpi	r24, 0x80	; 128
    78e4:	91 45       	sbci	r25, 0x51	; 81
    78e6:	a1 40       	sbci	r26, 0x01	; 1
    78e8:	b1 05       	cpc	r27, r1
    78ea:	70 f4       	brcc	.+28     	; 0x7908 <set_dst+0x94>
    78ec:	42 c0       	rjmp	.+132    	; 0x7972 <set_dst+0xfe>
    78ee:	a3 01       	movw	r20, r6
    78f0:	92 01       	movw	r18, r4
    78f2:	28 1b       	sub	r18, r24
    78f4:	39 0b       	sbc	r19, r25
    78f6:	4a 0b       	sbc	r20, r26
    78f8:	5b 0b       	sbc	r21, r27
    78fa:	da 01       	movw	r26, r20
    78fc:	c9 01       	movw	r24, r18
    78fe:	80 38       	cpi	r24, 0x80	; 128
    7900:	91 45       	sbci	r25, 0x51	; 81
    7902:	a1 40       	sbci	r26, 0x01	; 1
    7904:	b1 05       	cpc	r27, r1
    7906:	a8 f1       	brcs	.+106    	; 0x7972 <set_dst+0xfe>
    7908:	40 92 7c 1a 	sts	0x1A7C, r4	; 0x801a7c <dst+0x8>
    790c:	50 92 7d 1a 	sts	0x1A7D, r5	; 0x801a7d <dst+0x9>
    7910:	60 92 7e 1a 	sts	0x1A7E, r6	; 0x801a7e <dst+0xa>
    7914:	70 92 7f 1a 	sts	0x1A7F, r7	; 0x801a7f <dst+0xb>
    7918:	82 e0       	ldi	r24, 0x02	; 2
    791a:	a8 2e       	mov	r10, r24
    791c:	b1 2c       	mov	r11, r1
    791e:	c1 2c       	mov	r12, r1
    7920:	d1 2c       	mov	r13, r1
    7922:	92 e0       	ldi	r25, 0x02	; 2
    7924:	e9 2e       	mov	r14, r25
    7926:	f1 2c       	mov	r15, r1
    7928:	03 e0       	ldi	r16, 0x03	; 3
    792a:	10 e0       	ldi	r17, 0x00	; 0
    792c:	20 e0       	ldi	r18, 0x00	; 0
    792e:	30 e0       	ldi	r19, 0x00	; 0
    7930:	b3 01       	movw	r22, r6
    7932:	a2 01       	movw	r20, r4
    7934:	80 e0       	ldi	r24, 0x00	; 0
    7936:	90 e0       	ldi	r25, 0x00	; 0
    7938:	17 df       	rcall	.-466    	; 0x7768 <find_dst>
    793a:	60 93 74 1a 	sts	0x1A74, r22	; 0x801a74 <dst>
    793e:	70 93 75 1a 	sts	0x1A75, r23	; 0x801a75 <dst+0x1>
    7942:	80 93 76 1a 	sts	0x1A76, r24	; 0x801a76 <dst+0x2>
    7946:	90 93 77 1a 	sts	0x1A77, r25	; 0x801a77 <dst+0x3>
    794a:	ee 24       	eor	r14, r14
    794c:	e3 94       	inc	r14
    794e:	f1 2c       	mov	r15, r1
    7950:	0b e0       	ldi	r16, 0x0B	; 11
    7952:	10 e0       	ldi	r17, 0x00	; 0
    7954:	20 e0       	ldi	r18, 0x00	; 0
    7956:	30 e0       	ldi	r19, 0x00	; 0
    7958:	b3 01       	movw	r22, r6
    795a:	a2 01       	movw	r20, r4
    795c:	81 e0       	ldi	r24, 0x01	; 1
    795e:	90 e0       	ldi	r25, 0x00	; 0
    7960:	03 df       	rcall	.-506    	; 0x7768 <find_dst>
    7962:	60 93 78 1a 	sts	0x1A78, r22	; 0x801a78 <dst+0x4>
    7966:	70 93 79 1a 	sts	0x1A79, r23	; 0x801a79 <dst+0x5>
    796a:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <dst+0x6>
    796e:	90 93 7b 1a 	sts	0x1A7B, r25	; 0x801a7b <dst+0x7>
    7972:	2c 96       	adiw	r28, 0x0c	; 12
    7974:	0f b6       	in	r0, 0x3f	; 63
    7976:	f8 94       	cli
    7978:	de bf       	out	0x3e, r29	; 62
    797a:	0f be       	out	0x3f, r0	; 63
    797c:	cd bf       	out	0x3d, r28	; 61
    797e:	df 91       	pop	r29
    7980:	cf 91       	pop	r28
    7982:	1f 91       	pop	r17
    7984:	0f 91       	pop	r16
    7986:	ff 90       	pop	r15
    7988:	ef 90       	pop	r14
    798a:	df 90       	pop	r13
    798c:	cf 90       	pop	r12
    798e:	bf 90       	pop	r11
    7990:	af 90       	pop	r10
    7992:	7f 90       	pop	r7
    7994:	6f 90       	pop	r6
    7996:	5f 90       	pop	r5
    7998:	4f 90       	pop	r4
    799a:	08 95       	ret

0000799c <asctime_r>:
    799c:	a5 e1       	ldi	r26, 0x15	; 21
    799e:	b0 e0       	ldi	r27, 0x00	; 0
    79a0:	e4 ed       	ldi	r30, 0xD4	; 212
    79a2:	fc e3       	ldi	r31, 0x3C	; 60
    79a4:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    79a8:	ec 01       	movw	r28, r24
    79aa:	8b 01       	movw	r16, r22
    79ac:	60 e0       	ldi	r22, 0x00	; 0
    79ae:	70 e0       	ldi	r23, 0x00	; 0
    79b0:	d1 db       	rcall	.-2142   	; 0x7154 <normalize>
    79b2:	80 e2       	ldi	r24, 0x20	; 32
    79b4:	f8 01       	movw	r30, r16
    79b6:	11 92       	st	Z+, r1
    79b8:	8a 95       	dec	r24
    79ba:	e9 f7       	brne	.-6      	; 0x79b6 <asctime_r+0x1a>
    79bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    79be:	9b 85       	ldd	r25, Y+11	; 0x0b
    79c0:	84 59       	subi	r24, 0x94	; 148
    79c2:	98 4f       	sbci	r25, 0xF8	; 248
    79c4:	ed b7       	in	r30, 0x3d	; 61
    79c6:	fe b7       	in	r31, 0x3e	; 62
    79c8:	95 8b       	std	Z+21, r25	; 0x15
    79ca:	84 8b       	std	Z+20, r24	; 0x14
    79cc:	88 81       	ld	r24, Y
    79ce:	99 81       	ldd	r25, Y+1	; 0x01
    79d0:	93 8b       	std	Z+19, r25	; 0x13
    79d2:	82 8b       	std	Z+18, r24	; 0x12
    79d4:	8a 81       	ldd	r24, Y+2	; 0x02
    79d6:	9b 81       	ldd	r25, Y+3	; 0x03
    79d8:	91 8b       	std	Z+17, r25	; 0x11
    79da:	80 8b       	std	Z+16, r24	; 0x10
    79dc:	8c 81       	ldd	r24, Y+4	; 0x04
    79de:	9d 81       	ldd	r25, Y+5	; 0x05
    79e0:	97 87       	std	Z+15, r25	; 0x0f
    79e2:	86 87       	std	Z+14, r24	; 0x0e
    79e4:	8e 81       	ldd	r24, Y+6	; 0x06
    79e6:	9f 81       	ldd	r25, Y+7	; 0x07
    79e8:	95 87       	std	Z+13, r25	; 0x0d
    79ea:	84 87       	std	Z+12, r24	; 0x0c
    79ec:	e8 85       	ldd	r30, Y+8	; 0x08
    79ee:	f9 85       	ldd	r31, Y+9	; 0x09
    79f0:	ee 0f       	add	r30, r30
    79f2:	ff 1f       	adc	r31, r31
    79f4:	e5 5f       	subi	r30, 0xF5	; 245
    79f6:	fe 4f       	sbci	r31, 0xFE	; 254
    79f8:	80 81       	ld	r24, Z
    79fa:	91 81       	ldd	r25, Z+1	; 0x01
    79fc:	ed b7       	in	r30, 0x3d	; 61
    79fe:	fe b7       	in	r31, 0x3e	; 62
    7a00:	93 87       	std	Z+11, r25	; 0x0b
    7a02:	82 87       	std	Z+10, r24	; 0x0a
    7a04:	ec 85       	ldd	r30, Y+12	; 0x0c
    7a06:	fd 85       	ldd	r31, Y+13	; 0x0d
    7a08:	ee 0f       	add	r30, r30
    7a0a:	ff 1f       	adc	r31, r31
    7a0c:	eb 5d       	subi	r30, 0xDB	; 219
    7a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    7a10:	80 81       	ld	r24, Z
    7a12:	91 81       	ldd	r25, Z+1	; 0x01
    7a14:	ed b7       	in	r30, 0x3d	; 61
    7a16:	fe b7       	in	r31, 0x3e	; 62
    7a18:	91 87       	std	Z+9, r25	; 0x09
    7a1a:	80 87       	std	Z+8, r24	; 0x08
    7a1c:	8c e4       	ldi	r24, 0x4C	; 76
    7a1e:	97 e0       	ldi	r25, 0x07	; 7
    7a20:	a0 e0       	ldi	r26, 0x00	; 0
    7a22:	85 83       	std	Z+5, r24	; 0x05
    7a24:	96 83       	std	Z+6, r25	; 0x06
    7a26:	a7 83       	std	Z+7, r26	; 0x07
    7a28:	80 e2       	ldi	r24, 0x20	; 32
    7a2a:	90 e0       	ldi	r25, 0x00	; 0
    7a2c:	94 83       	std	Z+4, r25	; 0x04
    7a2e:	83 83       	std	Z+3, r24	; 0x03
    7a30:	12 83       	std	Z+2, r17	; 0x02
    7a32:	01 83       	std	Z+1, r16	; 0x01
    7a34:	0e 94 e3 46 	call	0x8dc6	; 0x8dc6 <snprintf_P>
    7a38:	c8 01       	movw	r24, r16
    7a3a:	cd b7       	in	r28, 0x3d	; 61
    7a3c:	de b7       	in	r29, 0x3e	; 62
    7a3e:	65 96       	adiw	r28, 0x15	; 21
    7a40:	e4 e0       	ldi	r30, 0x04	; 4
    7a42:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00007a46 <asctime>:
    7a46:	6e ef       	ldi	r22, 0xFE	; 254
    7a48:	77 e1       	ldi	r23, 0x17	; 23
    7a4a:	a8 cf       	rjmp	.-176    	; 0x799c <asctime_r>
    7a4c:	08 95       	ret

00007a4e <ctime_gm>:
    7a4e:	a6 e1       	ldi	r26, 0x16	; 22
    7a50:	b0 e0       	ldi	r27, 0x00	; 0
    7a52:	ed e2       	ldi	r30, 0x2D	; 45
    7a54:	fd e3       	ldi	r31, 0x3D	; 61
    7a56:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    7a5a:	be 01       	movw	r22, r28
    7a5c:	6f 5f       	subi	r22, 0xFF	; 255
    7a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a60:	6d da       	rcall	.-2854   	; 0x6f3c <gmtime_r>
    7a62:	6e ed       	ldi	r22, 0xDE	; 222
    7a64:	77 e1       	ldi	r23, 0x17	; 23
    7a66:	9a df       	rcall	.-204    	; 0x799c <asctime_r>
    7a68:	66 96       	adiw	r28, 0x16	; 22
    7a6a:	e2 e0       	ldi	r30, 0x02	; 2
    7a6c:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00007a70 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7a70:	a5 e2       	ldi	r26, 0x25	; 37
    7a72:	b0 e0       	ldi	r27, 0x00	; 0
    7a74:	ee e3       	ldi	r30, 0x3E	; 62
    7a76:	fd e3       	ldi	r31, 0x3D	; 61
    7a78:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    7a7c:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7a7e:	40 e0       	ldi	r20, 0x00	; 0
    7a80:	50 e0       	ldi	r21, 0x00	; 0
    7a82:	ba 01       	movw	r22, r20
    7a84:	80 e0       	ldi	r24, 0x00	; 0
    7a86:	90 e0       	ldi	r25, 0x00	; 0
    7a88:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <rtc_init>
    7a8c:	81 11       	cpse	r24, r1
    7a8e:	27 c0       	rjmp	.+78     	; 0x7ade <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7a90:	8b ea       	ldi	r24, 0xAB	; 171
    7a92:	96 e0       	ldi	r25, 0x06	; 6
    7a94:	a0 e0       	ldi	r26, 0x00	; 0
    7a96:	ed b7       	in	r30, 0x3d	; 61
    7a98:	fe b7       	in	r31, 0x3e	; 62
    7a9a:	81 83       	std	Z+1, r24	; 0x01
    7a9c:	92 83       	std	Z+2, r25	; 0x02
    7a9e:	a3 83       	std	Z+3, r26	; 0x03
    7aa0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("attempting rtc init\n");
    7aa4:	86 e9       	ldi	r24, 0x96	; 150
    7aa6:	96 e0       	ldi	r25, 0x06	; 6
    7aa8:	a0 e0       	ldi	r26, 0x00	; 0
    7aaa:	ed b7       	in	r30, 0x3d	; 61
    7aac:	fe b7       	in	r31, 0x3e	; 62
    7aae:	81 83       	std	Z+1, r24	; 0x01
    7ab0:	92 83       	std	Z+2, r25	; 0x02
    7ab2:	a3 83       	std	Z+3, r26	; 0x03
    7ab4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7ab8:	40 e0       	ldi	r20, 0x00	; 0
    7aba:	50 e0       	ldi	r21, 0x00	; 0
    7abc:	ba 01       	movw	r22, r20
    7abe:	81 e0       	ldi	r24, 0x01	; 1
    7ac0:	90 e0       	ldi	r25, 0x00	; 0
    7ac2:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <rtc_init>
    7ac6:	81 11       	cpse	r24, r1
    7ac8:	0a c0       	rjmp	.+20     	; 0x7ade <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7aca:	8f e7       	ldi	r24, 0x7F	; 127
    7acc:	96 e0       	ldi	r25, 0x06	; 6
    7ace:	a0 e0       	ldi	r26, 0x00	; 0
    7ad0:	ed b7       	in	r30, 0x3d	; 61
    7ad2:	fe b7       	in	r31, 0x3e	; 62
    7ad4:	81 83       	std	Z+1, r24	; 0x01
    7ad6:	92 83       	std	Z+2, r25	; 0x02
    7ad8:	a3 83       	std	Z+3, r26	; 0x03
    7ada:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7ade:	ce 01       	movw	r24, r28
    7ae0:	04 96       	adiw	r24, 0x04	; 4
    7ae2:	0e 94 58 30 	call	0x60b0	; 0x60b0 <rtc_read>
    7ae6:	88 23       	and	r24, r24
    7ae8:	51 f0       	breq	.+20     	; 0x7afe <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7aea:	ce 01       	movw	r24, r28
    7aec:	04 96       	adiw	r24, 0x04	; 4
    7aee:	fa dc       	rcall	.-1548   	; 0x74e4 <timegm>
    7af0:	6b 01       	movw	r12, r22
    7af2:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7af4:	67 2b       	or	r22, r23
    7af6:	68 2b       	or	r22, r24
    7af8:	69 2b       	or	r22, r25
    7afa:	c1 f4       	brne	.+48     	; 0x7b2c <initialize_clock+0xbc>
    7afc:	0a c0       	rjmp	.+20     	; 0x7b12 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7afe:	85 e6       	ldi	r24, 0x65	; 101
    7b00:	96 e0       	ldi	r25, 0x06	; 6
    7b02:	a0 e0       	ldi	r26, 0x00	; 0
    7b04:	ed b7       	in	r30, 0x3d	; 61
    7b06:	fe b7       	in	r31, 0x3e	; 62
    7b08:	81 83       	std	Z+1, r24	; 0x01
    7b0a:	92 83       	std	Z+2, r25	; 0x02
    7b0c:	a3 83       	std	Z+3, r26	; 0x03
    7b0e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7b12:	81 e4       	ldi	r24, 0x41	; 65
    7b14:	96 e0       	ldi	r25, 0x06	; 6
    7b16:	a0 e0       	ldi	r26, 0x00	; 0
    7b18:	ed b7       	in	r30, 0x3d	; 61
    7b1a:	fe b7       	in	r31, 0x3e	; 62
    7b1c:	81 83       	std	Z+1, r24	; 0x01
    7b1e:	92 83       	std	Z+2, r25	; 0x02
    7b20:	a3 83       	std	Z+3, r26	; 0x03
    7b22:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    7b26:	c1 2c       	mov	r12, r1
    7b28:	d1 2c       	mov	r13, r1
    7b2a:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7b2c:	1b a3       	std	Y+35, r17	; 0x23
    7b2e:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7b30:	1d a2       	std	Y+37, r1	; 0x25
    7b32:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7b34:	ce 01       	movw	r24, r28
    7b36:	82 96       	adiw	r24, 0x22	; 34
    7b38:	30 da       	rcall	.-2976   	; 0x6f9a <settimezone>

    ts.tv_sec = seconds;
    7b3a:	ca 8e       	std	Y+26, r12	; 0x1a
    7b3c:	db 8e       	std	Y+27, r13	; 0x1b
    7b3e:	ec 8e       	std	Y+28, r14	; 0x1c
    7b40:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7b42:	1e 8e       	std	Y+30, r1	; 0x1e
    7b44:	1f 8e       	std	Y+31, r1	; 0x1f
    7b46:	18 a2       	std	Y+32, r1	; 0x20
    7b48:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7b4a:	be 01       	movw	r22, r28
    7b4c:	66 5e       	subi	r22, 0xE6	; 230
    7b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b50:	80 e0       	ldi	r24, 0x00	; 0
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	c7 d8       	rcall	.-3698   	; 0x6ce4 <clock_settime>
}
    7b56:	a5 96       	adiw	r28, 0x25	; 37
    7b58:	e8 e0       	ldi	r30, 0x08	; 8
    7b5a:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

00007b5e <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7b5e:	a9 e2       	ldi	r26, 0x29	; 41
    7b60:	b0 e0       	ldi	r27, 0x00	; 0
    7b62:	e5 eb       	ldi	r30, 0xB5	; 181
    7b64:	fd e3       	ldi	r31, 0x3D	; 61
    7b66:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7b6a:	ce 01       	movw	r24, r28
    7b6c:	08 96       	adiw	r24, 0x08	; 8
    7b6e:	0e 94 58 30 	call	0x60b0	; 0x60b0 <rtc_read>
    7b72:	88 23       	and	r24, r24
    7b74:	29 f1       	breq	.+74     	; 0x7bc0 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7b76:	ce 01       	movw	r24, r28
    7b78:	08 96       	adiw	r24, 0x08	; 8
    7b7a:	b4 dc       	rcall	.-1688   	; 0x74e4 <timegm>
    7b7c:	6e a3       	std	Y+38, r22	; 0x26
    7b7e:	7f a3       	std	Y+39, r23	; 0x27
    7b80:	88 a7       	std	Y+40, r24	; 0x28
    7b82:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7b84:	ed b7       	in	r30, 0x3d	; 61
    7b86:	fe b7       	in	r31, 0x3e	; 62
    7b88:	64 83       	std	Z+4, r22	; 0x04
    7b8a:	75 83       	std	Z+5, r23	; 0x05
    7b8c:	86 83       	std	Z+6, r24	; 0x06
    7b8e:	97 83       	std	Z+7, r25	; 0x07
    7b90:	8f e2       	ldi	r24, 0x2F	; 47
    7b92:	96 e0       	ldi	r25, 0x06	; 6
    7b94:	a0 e0       	ldi	r26, 0x00	; 0
    7b96:	81 83       	std	Z+1, r24	; 0x01
    7b98:	92 83       	std	Z+2, r25	; 0x02
    7b9a:	a3 83       	std	Z+3, r26	; 0x03
    7b9c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7ba0:	ce 01       	movw	r24, r28
    7ba2:	08 96       	adiw	r24, 0x08	; 8
    7ba4:	50 df       	rcall	.-352    	; 0x7a46 <asctime>
    7ba6:	ed b7       	in	r30, 0x3d	; 61
    7ba8:	fe b7       	in	r31, 0x3e	; 62
    7baa:	95 83       	std	Z+5, r25	; 0x05
    7bac:	84 83       	std	Z+4, r24	; 0x04
    7bae:	8e e1       	ldi	r24, 0x1E	; 30
    7bb0:	96 e0       	ldi	r25, 0x06	; 6
    7bb2:	a0 e0       	ldi	r26, 0x00	; 0
    7bb4:	81 83       	std	Z+1, r24	; 0x01
    7bb6:	92 83       	std	Z+2, r25	; 0x02
    7bb8:	a3 83       	std	Z+3, r26	; 0x03
    7bba:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    7bbe:	0a c0       	rjmp	.+20     	; 0x7bd4 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7bc0:	8d e0       	ldi	r24, 0x0D	; 13
    7bc2:	96 e0       	ldi	r25, 0x06	; 6
    7bc4:	a0 e0       	ldi	r26, 0x00	; 0
    7bc6:	ed b7       	in	r30, 0x3d	; 61
    7bc8:	fe b7       	in	r31, 0x3e	; 62
    7bca:	81 83       	std	Z+1, r24	; 0x01
    7bcc:	92 83       	std	Z+2, r25	; 0x02
    7bce:	a3 83       	std	Z+3, r26	; 0x03
    7bd0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7bd4:	be 01       	movw	r22, r28
    7bd6:	62 5e       	subi	r22, 0xE2	; 226
    7bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7bda:	80 e0       	ldi	r24, 0x00	; 0
    7bdc:	90 e0       	ldi	r25, 0x00	; 0
    7bde:	0e 94 c9 33 	call	0x6792	; 0x6792 <clock_gettime>
    seconds = ts.tv_sec;
    7be2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7be4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7be6:	a8 a1       	ldd	r26, Y+32	; 0x20
    7be8:	b9 a1       	ldd	r27, Y+33	; 0x21
    7bea:	8e a3       	std	Y+38, r24	; 0x26
    7bec:	9f a3       	std	Y+39, r25	; 0x27
    7bee:	a8 a7       	std	Y+40, r26	; 0x28
    7bf0:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7bf2:	ed b7       	in	r30, 0x3d	; 61
    7bf4:	fe b7       	in	r31, 0x3e	; 62
    7bf6:	84 83       	std	Z+4, r24	; 0x04
    7bf8:	95 83       	std	Z+5, r25	; 0x05
    7bfa:	a6 83       	std	Z+6, r26	; 0x06
    7bfc:	b7 83       	std	Z+7, r27	; 0x07
    7bfe:	8b ef       	ldi	r24, 0xFB	; 251
    7c00:	95 e0       	ldi	r25, 0x05	; 5
    7c02:	a0 e0       	ldi	r26, 0x00	; 0
    7c04:	81 83       	std	Z+1, r24	; 0x01
    7c06:	92 83       	std	Z+2, r25	; 0x02
    7c08:	a3 83       	std	Z+3, r26	; 0x03
    7c0a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7c0e:	ce 01       	movw	r24, r28
    7c10:	86 96       	adiw	r24, 0x26	; 38
    7c12:	a9 d9       	rcall	.-3246   	; 0x6f66 <gmtime>
    7c14:	18 df       	rcall	.-464    	; 0x7a46 <asctime>
    7c16:	ed b7       	in	r30, 0x3d	; 61
    7c18:	fe b7       	in	r31, 0x3e	; 62
    7c1a:	95 83       	std	Z+5, r25	; 0x05
    7c1c:	84 83       	std	Z+4, r24	; 0x04
    7c1e:	8a ee       	ldi	r24, 0xEA	; 234
    7c20:	95 e0       	ldi	r25, 0x05	; 5
    7c22:	a0 e0       	ldi	r26, 0x00	; 0
    7c24:	81 83       	std	Z+1, r24	; 0x01
    7c26:	92 83       	std	Z+2, r25	; 0x02
    7c28:	a3 83       	std	Z+3, r26	; 0x03
    7c2a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
}
    7c2e:	a9 96       	adiw	r28, 0x29	; 41
    7c30:	e2 e0       	ldi	r30, 0x02	; 2
    7c32:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00007c36 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7c36:	fc 01       	movw	r30, r24
    7c38:	84 81       	ldd	r24, Z+4	; 0x04
    7c3a:	95 81       	ldd	r25, Z+5	; 0x05
    7c3c:	00 97       	sbiw	r24, 0x00	; 0
    7c3e:	79 f0       	breq	.+30     	; 0x7c5e <_putc_buffer_fn+0x28>
    7c40:	66 23       	and	r22, r22
    7c42:	69 f0       	breq	.+26     	; 0x7c5e <_putc_buffer_fn+0x28>
    7c44:	01 97       	sbiw	r24, 0x01	; 1
    7c46:	95 83       	std	Z+5, r25	; 0x05
    7c48:	84 83       	std	Z+4, r24	; 0x04
    7c4a:	86 81       	ldd	r24, Z+6	; 0x06
    7c4c:	97 81       	ldd	r25, Z+7	; 0x07
    7c4e:	01 96       	adiw	r24, 0x01	; 1
    7c50:	97 83       	std	Z+7, r25	; 0x07
    7c52:	86 83       	std	Z+6, r24	; 0x06
    7c54:	a2 81       	ldd	r26, Z+2	; 0x02
    7c56:	b3 81       	ldd	r27, Z+3	; 0x03
    7c58:	6d 93       	st	X+, r22
    7c5a:	b3 83       	std	Z+3, r27	; 0x03
    7c5c:	a2 83       	std	Z+2, r26	; 0x02
    7c5e:	02 80       	ldd	r0, Z+2	; 0x02
    7c60:	f3 81       	ldd	r31, Z+3	; 0x03
    7c62:	e0 2d       	mov	r30, r0
    7c64:	10 82       	st	Z, r1
    7c66:	08 95       	ret

00007c68 <_putc_fn>:
    7c68:	fc 01       	movw	r30, r24
    7c6a:	26 81       	ldd	r18, Z+6	; 0x06
    7c6c:	37 81       	ldd	r19, Z+7	; 0x07
    7c6e:	2f 5f       	subi	r18, 0xFF	; 255
    7c70:	3f 4f       	sbci	r19, 0xFF	; 255
    7c72:	37 83       	std	Z+7, r19	; 0x07
    7c74:	26 83       	std	Z+6, r18	; 0x06
    7c76:	86 2f       	mov	r24, r22
    7c78:	90 e0       	ldi	r25, 0x00	; 0
    7c7a:	0c 94 5c 76 	jmp	0xecb8	; 0xecb8 <putchar>
    7c7e:	08 95       	ret

00007c80 <bin2num>:
    7c80:	a0 e0       	ldi	r26, 0x00	; 0
    7c82:	b0 e0       	ldi	r27, 0x00	; 0
    7c84:	e6 e4       	ldi	r30, 0x46	; 70
    7c86:	fe e3       	ldi	r31, 0x3E	; 62
    7c88:	0c 94 f3 e6 	jmp	0x1cde6	; 0x1cde6 <__prologue_saves__+0xe>
    7c8c:	ea 01       	movw	r28, r20
    7c8e:	53 e0       	ldi	r21, 0x03	; 3
    7c90:	ee 0c       	add	r14, r14
    7c92:	ff 1c       	adc	r15, r15
    7c94:	5a 95       	dec	r21
    7c96:	e1 f7       	brne	.-8      	; 0x7c90 <bin2num+0x10>
    7c98:	fc 01       	movw	r30, r24
    7c9a:	af 01       	movw	r20, r30
    7c9c:	48 1b       	sub	r20, r24
    7c9e:	59 0b       	sbc	r21, r25
    7ca0:	c4 17       	cp	r28, r20
    7ca2:	d5 07       	cpc	r29, r21
    7ca4:	14 f0       	brlt	.+4      	; 0x7caa <bin2num+0x2a>
    7ca6:	11 92       	st	Z+, r1
    7ca8:	f8 cf       	rjmp	.-16     	; 0x7c9a <bin2num+0x1a>
    7caa:	41 e0       	ldi	r20, 0x01	; 1
    7cac:	e4 1a       	sub	r14, r20
    7cae:	f1 08       	sbc	r15, r1
    7cb0:	5b 01       	movw	r10, r22
    7cb2:	42 e0       	ldi	r20, 0x02	; 2
    7cb4:	a4 1a       	sub	r10, r20
    7cb6:	b1 08       	sbc	r11, r1
    7cb8:	f7 fc       	sbrc	r15, 7
    7cba:	3b c0       	rjmp	.+118    	; 0x7d32 <bin2num+0xb2>
    7cbc:	f7 01       	movw	r30, r14
    7cbe:	43 e0       	ldi	r20, 0x03	; 3
    7cc0:	f5 95       	asr	r31
    7cc2:	e7 95       	ror	r30
    7cc4:	4a 95       	dec	r20
    7cc6:	e1 f7       	brne	.-8      	; 0x7cc0 <bin2num+0x40>
    7cc8:	e0 0f       	add	r30, r16
    7cca:	f1 1f       	adc	r31, r17
    7ccc:	40 81       	ld	r20, Z
    7cce:	50 e0       	ldi	r21, 0x00	; 0
    7cd0:	f7 01       	movw	r30, r14
    7cd2:	e7 70       	andi	r30, 0x07	; 7
    7cd4:	ff 27       	eor	r31, r31
    7cd6:	02 c0       	rjmp	.+4      	; 0x7cdc <bin2num+0x5c>
    7cd8:	55 95       	asr	r21
    7cda:	47 95       	ror	r20
    7cdc:	ea 95       	dec	r30
    7cde:	e2 f7       	brpl	.-8      	; 0x7cd8 <bin2num+0x58>
    7ce0:	41 70       	andi	r20, 0x01	; 1
    7ce2:	55 27       	eor	r21, r21
    7ce4:	dc 01       	movw	r26, r24
    7ce6:	e0 e0       	ldi	r30, 0x00	; 0
    7ce8:	f0 e0       	ldi	r31, 0x00	; 0
    7cea:	ec 17       	cp	r30, r28
    7cec:	fd 07       	cpc	r31, r29
    7cee:	ec f4       	brge	.+58     	; 0x7d2a <bin2num+0xaa>
    7cf0:	ea 15       	cp	r30, r10
    7cf2:	fb 05       	cpc	r31, r11
    7cf4:	4c f0       	brlt	.+18     	; 0x7d08 <bin2num+0x88>
    7cf6:	dc 01       	movw	r26, r24
    7cf8:	ae 0f       	add	r26, r30
    7cfa:	bf 1f       	adc	r27, r31
    7cfc:	1c 92       	st	X, r1
    7cfe:	41 e0       	ldi	r20, 0x01	; 1
    7d00:	e4 1a       	sub	r14, r20
    7d02:	f1 08       	sbc	r15, r1
    7d04:	ef 01       	movw	r28, r30
    7d06:	d8 cf       	rjmp	.-80     	; 0x7cb8 <bin2num+0x38>
    7d08:	9c 90       	ld	r9, X
    7d0a:	99 0c       	add	r9, r9
    7d0c:	94 2a       	or	r9, r20
    7d0e:	49 2d       	mov	r20, r9
    7d10:	50 e0       	ldi	r21, 0x00	; 0
    7d12:	42 17       	cp	r20, r18
    7d14:	53 07       	cpc	r21, r19
    7d16:	24 f0       	brlt	.+8      	; 0x7d20 <bin2num+0xa0>
    7d18:	92 1a       	sub	r9, r18
    7d1a:	41 e0       	ldi	r20, 0x01	; 1
    7d1c:	50 e0       	ldi	r21, 0x00	; 0
    7d1e:	02 c0       	rjmp	.+4      	; 0x7d24 <bin2num+0xa4>
    7d20:	40 e0       	ldi	r20, 0x00	; 0
    7d22:	50 e0       	ldi	r21, 0x00	; 0
    7d24:	9d 92       	st	X+, r9
    7d26:	31 96       	adiw	r30, 0x01	; 1
    7d28:	e0 cf       	rjmp	.-64     	; 0x7cea <bin2num+0x6a>
    7d2a:	41 15       	cp	r20, r1
    7d2c:	51 05       	cpc	r21, r1
    7d2e:	01 f7       	brne	.-64     	; 0x7cf0 <bin2num+0x70>
    7d30:	e2 cf       	rjmp	.-60     	; 0x7cf6 <bin2num+0x76>
    7d32:	fc 01       	movw	r30, r24
    7d34:	9f 01       	movw	r18, r30
    7d36:	28 1b       	sub	r18, r24
    7d38:	39 0b       	sbc	r19, r25
    7d3a:	2c 17       	cp	r18, r28
    7d3c:	3d 07       	cpc	r19, r29
    7d3e:	4c f4       	brge	.+18     	; 0x7d52 <bin2num+0xd2>
    7d40:	20 81       	ld	r18, Z
    7d42:	2a 30       	cpi	r18, 0x0A	; 10
    7d44:	10 f4       	brcc	.+4      	; 0x7d4a <bin2num+0xca>
    7d46:	20 5d       	subi	r18, 0xD0	; 208
    7d48:	01 c0       	rjmp	.+2      	; 0x7d4c <bin2num+0xcc>
    7d4a:	29 5a       	subi	r18, 0xA9	; 169
    7d4c:	20 83       	st	Z, r18
    7d4e:	31 96       	adiw	r30, 0x01	; 1
    7d50:	f1 cf       	rjmp	.-30     	; 0x7d34 <bin2num+0xb4>
    7d52:	9e 01       	movw	r18, r28
    7d54:	d7 ff       	sbrs	r29, 7
    7d56:	02 c0       	rjmp	.+4      	; 0x7d5c <bin2num+0xdc>
    7d58:	20 e0       	ldi	r18, 0x00	; 0
    7d5a:	30 e0       	ldi	r19, 0x00	; 0
    7d5c:	c1 14       	cp	r12, r1
    7d5e:	d1 04       	cpc	r13, r1
    7d60:	61 f0       	breq	.+24     	; 0x7d7a <bin2num+0xfa>
    7d62:	61 50       	subi	r22, 0x01	; 1
    7d64:	71 09       	sbc	r23, r1
    7d66:	26 17       	cp	r18, r22
    7d68:	37 07       	cpc	r19, r23
    7d6a:	3c f4       	brge	.+14     	; 0x7d7a <bin2num+0xfa>
    7d6c:	fc 01       	movw	r30, r24
    7d6e:	e2 0f       	add	r30, r18
    7d70:	f3 1f       	adc	r31, r19
    7d72:	c0 82       	st	Z, r12
    7d74:	21 96       	adiw	r28, 0x01	; 1
    7d76:	2f 5f       	subi	r18, 0xFF	; 255
    7d78:	3f 4f       	sbci	r19, 0xFF	; 255
    7d7a:	fc 01       	movw	r30, r24
    7d7c:	e2 0f       	add	r30, r18
    7d7e:	f3 1f       	adc	r31, r19
    7d80:	10 82       	st	Z, r1
    7d82:	0e 94 80 31 	call	0x6300	; 0x6300 <reverse>
    7d86:	ce 01       	movw	r24, r28
    7d88:	cd b7       	in	r28, 0x3d	; 61
    7d8a:	de b7       	in	r29, 0x3e	; 62
    7d8c:	eb e0       	ldi	r30, 0x0B	; 11
    7d8e:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__epilogue_restores__+0xe>

00007d92 <pch>:
    7d92:	fc 01       	movw	r30, r24
    7d94:	22 81       	ldd	r18, Z+2	; 0x02
    7d96:	33 81       	ldd	r19, Z+3	; 0x03
    7d98:	44 81       	ldd	r20, Z+4	; 0x04
    7d9a:	55 81       	ldd	r21, Z+5	; 0x05
    7d9c:	80 81       	ld	r24, Z
    7d9e:	91 81       	ldd	r25, Z+1	; 0x01
    7da0:	24 17       	cp	r18, r20
    7da2:	35 07       	cpc	r19, r21
    7da4:	54 f4       	brge	.+20     	; 0x7dba <pch+0x28>
    7da6:	a9 01       	movw	r20, r18
    7da8:	4f 5f       	subi	r20, 0xFF	; 255
    7daa:	5f 4f       	sbci	r21, 0xFF	; 255
    7dac:	53 83       	std	Z+3, r21	; 0x03
    7dae:	42 83       	std	Z+2, r20	; 0x02
    7db0:	dc 01       	movw	r26, r24
    7db2:	a2 0f       	add	r26, r18
    7db4:	b3 1f       	adc	r27, r19
    7db6:	6c 93       	st	X, r22
    7db8:	04 c0       	rjmp	.+8      	; 0x7dc2 <pch+0x30>
    7dba:	dc 01       	movw	r26, r24
    7dbc:	a2 0f       	add	r26, r18
    7dbe:	b3 1f       	adc	r27, r19
    7dc0:	1c 92       	st	X, r1
    7dc2:	82 81       	ldd	r24, Z+2	; 0x02
    7dc4:	93 81       	ldd	r25, Z+3	; 0x03
    7dc6:	08 95       	ret

00007dc8 <p_ntoa>:
    7dc8:	af 92       	push	r10
    7dca:	cf 92       	push	r12
    7dcc:	df 92       	push	r13
    7dce:	ef 92       	push	r14
    7dd0:	ff 92       	push	r15
    7dd2:	0f 93       	push	r16
    7dd4:	1f 93       	push	r17
    7dd6:	cf 93       	push	r28
    7dd8:	df 93       	push	r29
    7dda:	dc 01       	movw	r26, r24
    7ddc:	eb 01       	movw	r28, r22
    7dde:	fa 01       	movw	r30, r20
    7de0:	b9 01       	movw	r22, r18
    7de2:	98 01       	movw	r18, r16
    7de4:	a6 01       	movw	r20, r12
    7de6:	9a 2d       	mov	r25, r10
    7de8:	a5 fa       	bst	r10, 5
    7dea:	cc 24       	eor	r12, r12
    7dec:	c0 f8       	bld	r12, 0
    7dee:	a6 fc       	sbrc	r10, 6
    7df0:	07 c0       	rjmp	.+14     	; 0x7e00 <p_ntoa+0x38>
    7df2:	a2 fc       	sbrc	r10, 2
    7df4:	08 c0       	rjmp	.+16     	; 0x7e06 <p_ntoa+0x3e>
    7df6:	a4 fe       	sbrs	r10, 4
    7df8:	09 c0       	rjmp	.+18     	; 0x7e0c <p_ntoa+0x44>
    7dfa:	00 e2       	ldi	r16, 0x20	; 32
    7dfc:	10 e0       	ldi	r17, 0x00	; 0
    7dfe:	08 c0       	rjmp	.+16     	; 0x7e10 <p_ntoa+0x48>
    7e00:	0d e2       	ldi	r16, 0x2D	; 45
    7e02:	10 e0       	ldi	r17, 0x00	; 0
    7e04:	05 c0       	rjmp	.+10     	; 0x7e10 <p_ntoa+0x48>
    7e06:	0b e2       	ldi	r16, 0x2B	; 43
    7e08:	10 e0       	ldi	r17, 0x00	; 0
    7e0a:	02 c0       	rjmp	.+4      	; 0x7e10 <p_ntoa+0x48>
    7e0c:	00 e0       	ldi	r16, 0x00	; 0
    7e0e:	10 e0       	ldi	r17, 0x00	; 0
    7e10:	95 ff       	sbrs	r25, 5
    7e12:	04 c0       	rjmp	.+8      	; 0x7e1c <p_ntoa+0x54>
    7e14:	89 2f       	mov	r24, r25
    7e16:	8a 70       	andi	r24, 0x0A	; 10
    7e18:	09 f0       	breq	.+2      	; 0x7e1c <p_ntoa+0x54>
    7e1a:	c1 2c       	mov	r12, r1
    7e1c:	c0 fa       	bst	r12, 0
    7e1e:	95 f9       	bld	r25, 5
    7e20:	89 2f       	mov	r24, r25
    7e22:	82 70       	andi	r24, 0x02	; 2
    7e24:	c8 2e       	mov	r12, r24
    7e26:	91 fd       	sbrc	r25, 1
    7e28:	02 c0       	rjmp	.+4      	; 0x7e2e <p_ntoa+0x66>
    7e2a:	40 e0       	ldi	r20, 0x00	; 0
    7e2c:	50 e0       	ldi	r21, 0x00	; 0
    7e2e:	89 2f       	mov	r24, r25
    7e30:	83 70       	andi	r24, 0x03	; 3
    7e32:	11 f4       	brne	.+4      	; 0x7e38 <p_ntoa+0x70>
    7e34:	41 e0       	ldi	r20, 0x01	; 1
    7e36:	50 e0       	ldi	r21, 0x00	; 0
    7e38:	90 ff       	sbrs	r25, 0
    7e3a:	0c c0       	rjmp	.+24     	; 0x7e54 <p_ntoa+0x8c>
    7e3c:	95 fd       	sbrc	r25, 5
    7e3e:	05 c0       	rjmp	.+10     	; 0x7e4a <p_ntoa+0x82>
    7e40:	c1 10       	cpse	r12, r1
    7e42:	08 c0       	rjmp	.+16     	; 0x7e54 <p_ntoa+0x8c>
    7e44:	41 e0       	ldi	r20, 0x01	; 1
    7e46:	50 e0       	ldi	r21, 0x00	; 0
    7e48:	05 c0       	rjmp	.+10     	; 0x7e54 <p_ntoa+0x8c>
    7e4a:	94 75       	andi	r25, 0x54	; 84
    7e4c:	a7 01       	movw	r20, r14
    7e4e:	11 f0       	breq	.+4      	; 0x7e54 <p_ntoa+0x8c>
    7e50:	41 50       	subi	r20, 0x01	; 1
    7e52:	51 09       	sbc	r21, r1
    7e54:	68 01       	movw	r12, r16
    7e56:	7e 01       	movw	r14, r28
    7e58:	8d 01       	movw	r16, r26
    7e5a:	cf 01       	movw	r24, r30
    7e5c:	11 df       	rcall	.-478    	; 0x7c80 <bin2num>
    7e5e:	df 91       	pop	r29
    7e60:	cf 91       	pop	r28
    7e62:	1f 91       	pop	r17
    7e64:	0f 91       	pop	r16
    7e66:	ff 90       	pop	r15
    7e68:	ef 90       	pop	r14
    7e6a:	df 90       	pop	r13
    7e6c:	cf 90       	pop	r12
    7e6e:	af 90       	pop	r10
    7e70:	08 95       	ret

00007e72 <p_ftoa>:
    7e72:	aa e0       	ldi	r26, 0x0A	; 10
    7e74:	b0 e0       	ldi	r27, 0x00	; 0
    7e76:	ef e3       	ldi	r30, 0x3F	; 63
    7e78:	ff e3       	ldi	r31, 0x3F	; 63
    7e7a:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    7e7e:	4b 01       	movw	r8, r22
    7e80:	5c 01       	movw	r10, r24
    7e82:	1a 01       	movw	r2, r20
    7e84:	28 01       	movw	r4, r16
    7e86:	c6 fa       	bst	r12, 6
    7e88:	11 27       	eor	r17, r17
    7e8a:	10 f9       	bld	r17, 0
    7e8c:	5a 83       	std	Y+2, r21	; 0x02
    7e8e:	49 83       	std	Y+1, r20	; 0x01
    7e90:	1c 82       	std	Y+4, r1	; 0x04
    7e92:	1b 82       	std	Y+3, r1	; 0x03
    7e94:	21 50       	subi	r18, 0x01	; 1
    7e96:	31 09       	sbc	r19, r1
    7e98:	3e 83       	std	Y+6, r19	; 0x06
    7e9a:	2d 83       	std	Y+5, r18	; 0x05
    7e9c:	fa 01       	movw	r30, r20
    7e9e:	10 82       	st	Z, r1
    7ea0:	20 e0       	ldi	r18, 0x00	; 0
    7ea2:	30 e0       	ldi	r19, 0x00	; 0
    7ea4:	a9 01       	movw	r20, r18
    7ea6:	0e 94 aa e7 	call	0x1cf54	; 0x1cf54 <__cmpsf2>
    7eaa:	87 ff       	sbrs	r24, 7
    7eac:	05 c0       	rjmp	.+10     	; 0x7eb8 <p_ftoa+0x46>
    7eae:	b7 fa       	bst	r11, 7
    7eb0:	b0 94       	com	r11
    7eb2:	b7 f8       	bld	r11, 7
    7eb4:	b0 94       	com	r11
    7eb6:	11 e0       	ldi	r17, 0x01	; 1
    7eb8:	10 fb       	bst	r17, 0
    7eba:	c6 f8       	bld	r12, 6
    7ebc:	c6 fe       	sbrs	r12, 6
    7ebe:	02 c0       	rjmp	.+4      	; 0x7ec4 <p_ftoa+0x52>
    7ec0:	6d e2       	ldi	r22, 0x2D	; 45
    7ec2:	07 c0       	rjmp	.+14     	; 0x7ed2 <p_ftoa+0x60>
    7ec4:	c2 fe       	sbrs	r12, 2
    7ec6:	02 c0       	rjmp	.+4      	; 0x7ecc <p_ftoa+0x5a>
    7ec8:	6b e2       	ldi	r22, 0x2B	; 43
    7eca:	03 c0       	rjmp	.+6      	; 0x7ed2 <p_ftoa+0x60>
    7ecc:	c4 fe       	sbrs	r12, 4
    7ece:	04 c0       	rjmp	.+8      	; 0x7ed8 <p_ftoa+0x66>
    7ed0:	60 e2       	ldi	r22, 0x20	; 32
    7ed2:	ce 01       	movw	r24, r28
    7ed4:	01 96       	adiw	r24, 0x01	; 1
    7ed6:	5d df       	rcall	.-326    	; 0x7d92 <pch>
    7ed8:	37 01       	movw	r6, r14
    7eda:	f7 fe       	sbrs	r15, 7
    7edc:	02 c0       	rjmp	.+4      	; 0x7ee2 <p_ftoa+0x70>
    7ede:	61 2c       	mov	r6, r1
    7ee0:	71 2c       	mov	r7, r1
    7ee2:	20 e0       	ldi	r18, 0x00	; 0
    7ee4:	30 e0       	ldi	r19, 0x00	; 0
    7ee6:	a9 01       	movw	r20, r18
    7ee8:	c5 01       	movw	r24, r10
    7eea:	b4 01       	movw	r22, r8
    7eec:	0e 94 aa e7 	call	0x1cf54	; 0x1cf54 <__cmpsf2>
    7ef0:	88 23       	and	r24, r24
    7ef2:	d1 f1       	breq	.+116    	; 0x7f68 <p_ftoa+0xf6>
    7ef4:	c1 fe       	sbrs	r12, 1
    7ef6:	11 c0       	rjmp	.+34     	; 0x7f1a <p_ftoa+0xa8>
    7ef8:	83 01       	movw	r16, r6
    7efa:	60 e0       	ldi	r22, 0x00	; 0
    7efc:	70 e0       	ldi	r23, 0x00	; 0
    7efe:	80 e0       	ldi	r24, 0x00	; 0
    7f00:	9f e3       	ldi	r25, 0x3F	; 63
    7f02:	01 15       	cp	r16, r1
    7f04:	11 05       	cpc	r17, r1
    7f06:	69 f0       	breq	.+26     	; 0x7f22 <p_ftoa+0xb0>
    7f08:	20 e0       	ldi	r18, 0x00	; 0
    7f0a:	30 e0       	ldi	r19, 0x00	; 0
    7f0c:	40 e2       	ldi	r20, 0x20	; 32
    7f0e:	51 e4       	ldi	r21, 0x41	; 65
    7f10:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    7f14:	01 50       	subi	r16, 0x01	; 1
    7f16:	11 09       	sbc	r17, r1
    7f18:	f4 cf       	rjmp	.-24     	; 0x7f02 <p_ftoa+0x90>
    7f1a:	60 e0       	ldi	r22, 0x00	; 0
    7f1c:	70 e0       	ldi	r23, 0x00	; 0
    7f1e:	80 e0       	ldi	r24, 0x00	; 0
    7f20:	9f e3       	ldi	r25, 0x3F	; 63
    7f22:	9b 01       	movw	r18, r22
    7f24:	ac 01       	movw	r20, r24
    7f26:	c5 01       	movw	r24, r10
    7f28:	b4 01       	movw	r22, r8
    7f2a:	0e 94 46 e7 	call	0x1ce8c	; 0x1ce8c <__addsf3>
    7f2e:	4b 01       	movw	r8, r22
    7f30:	5c 01       	movw	r10, r24
    7f32:	ee 24       	eor	r14, r14
    7f34:	e3 94       	inc	r14
    7f36:	f1 2c       	mov	r15, r1
    7f38:	20 e0       	ldi	r18, 0x00	; 0
    7f3a:	30 e0       	ldi	r19, 0x00	; 0
    7f3c:	40 e2       	ldi	r20, 0x20	; 32
    7f3e:	51 e4       	ldi	r21, 0x41	; 65
    7f40:	c5 01       	movw	r24, r10
    7f42:	b4 01       	movw	r22, r8
    7f44:	0e 94 f9 e8 	call	0x1d1f2	; 0x1d1f2 <__gesf2>
    7f48:	87 fd       	sbrc	r24, 7
    7f4a:	11 c0       	rjmp	.+34     	; 0x7f6e <p_ftoa+0xfc>
    7f4c:	ff ef       	ldi	r31, 0xFF	; 255
    7f4e:	ef 1a       	sub	r14, r31
    7f50:	ff 0a       	sbc	r15, r31
    7f52:	20 e0       	ldi	r18, 0x00	; 0
    7f54:	30 e0       	ldi	r19, 0x00	; 0
    7f56:	40 e2       	ldi	r20, 0x20	; 32
    7f58:	51 e4       	ldi	r21, 0x41	; 65
    7f5a:	c5 01       	movw	r24, r10
    7f5c:	b4 01       	movw	r22, r8
    7f5e:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    7f62:	4b 01       	movw	r8, r22
    7f64:	5c 01       	movw	r10, r24
    7f66:	e8 cf       	rjmp	.-48     	; 0x7f38 <p_ftoa+0xc6>
    7f68:	ee 24       	eor	r14, r14
    7f6a:	e3 94       	inc	r14
    7f6c:	f1 2c       	mov	r15, r1
    7f6e:	8c 2d       	mov	r24, r12
    7f70:	88 72       	andi	r24, 0x28	; 40
    7f72:	80 32       	cpi	r24, 0x20	; 32
    7f74:	c1 f4       	brne	.+48     	; 0x7fa6 <p_ftoa+0x134>
    7f76:	82 01       	movw	r16, r4
    7f78:	0e 19       	sub	r16, r14
    7f7a:	1f 09       	sbc	r17, r15
    7f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    7f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    7f80:	08 1b       	sub	r16, r24
    7f82:	19 0b       	sbc	r17, r25
    7f84:	c1 fe       	sbrs	r12, 1
    7f86:	07 c0       	rjmp	.+14     	; 0x7f96 <p_ftoa+0x124>
    7f88:	61 14       	cp	r6, r1
    7f8a:	71 04       	cpc	r7, r1
    7f8c:	21 f0       	breq	.+8      	; 0x7f96 <p_ftoa+0x124>
    7f8e:	06 19       	sub	r16, r6
    7f90:	17 09       	sbc	r17, r7
    7f92:	01 50       	subi	r16, 0x01	; 1
    7f94:	11 09       	sbc	r17, r1
    7f96:	10 16       	cp	r1, r16
    7f98:	11 06       	cpc	r1, r17
    7f9a:	2c f4       	brge	.+10     	; 0x7fa6 <p_ftoa+0x134>
    7f9c:	60 e3       	ldi	r22, 0x30	; 48
    7f9e:	ce 01       	movw	r24, r28
    7fa0:	01 96       	adiw	r24, 0x01	; 1
    7fa2:	f7 de       	rcall	.-530    	; 0x7d92 <pch>
    7fa4:	f6 cf       	rjmp	.-20     	; 0x7f92 <p_ftoa+0x120>
    7fa6:	c5 01       	movw	r24, r10
    7fa8:	b4 01       	movw	r22, r8
    7faa:	0e 94 16 e8 	call	0x1d02c	; 0x1d02c <__fixsfsi>
    7fae:	6f 83       	std	Y+7, r22	; 0x07
    7fb0:	78 87       	std	Y+8, r23	; 0x08
    7fb2:	89 87       	std	Y+9, r24	; 0x09
    7fb4:	9a 87       	std	Y+10, r25	; 0x0a
    7fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    7fb8:	60 5d       	subi	r22, 0xD0	; 208
    7fba:	ce 01       	movw	r24, r28
    7fbc:	01 96       	adiw	r24, 0x01	; 1
    7fbe:	e9 de       	rcall	.-558    	; 0x7d92 <pch>
    7fc0:	2f 81       	ldd	r18, Y+7	; 0x07
    7fc2:	38 85       	ldd	r19, Y+8	; 0x08
    7fc4:	b9 01       	movw	r22, r18
    7fc6:	33 0f       	add	r19, r19
    7fc8:	88 0b       	sbc	r24, r24
    7fca:	99 0b       	sbc	r25, r25
    7fcc:	0e 94 49 e8 	call	0x1d092	; 0x1d092 <__floatsisf>
    7fd0:	9b 01       	movw	r18, r22
    7fd2:	ac 01       	movw	r20, r24
    7fd4:	c5 01       	movw	r24, r10
    7fd6:	b4 01       	movw	r22, r8
    7fd8:	0e 94 45 e7 	call	0x1ce8a	; 0x1ce8a <__subsf3>
    7fdc:	31 e0       	ldi	r19, 0x01	; 1
    7fde:	e3 1a       	sub	r14, r19
    7fe0:	f1 08       	sbc	r15, r1
    7fe2:	20 e0       	ldi	r18, 0x00	; 0
    7fe4:	30 e0       	ldi	r19, 0x00	; 0
    7fe6:	40 e2       	ldi	r20, 0x20	; 32
    7fe8:	51 e4       	ldi	r21, 0x41	; 65
    7fea:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    7fee:	4b 01       	movw	r8, r22
    7ff0:	5c 01       	movw	r10, r24
    7ff2:	e1 14       	cp	r14, r1
    7ff4:	f1 04       	cpc	r15, r1
    7ff6:	b9 f6       	brne	.-82     	; 0x7fa6 <p_ftoa+0x134>
    7ff8:	c1 fc       	sbrc	r12, 1
    7ffa:	10 c0       	rjmp	.+32     	; 0x801c <p_ftoa+0x1aa>
    7ffc:	60 e0       	ldi	r22, 0x00	; 0
    7ffe:	ce 01       	movw	r24, r28
    8000:	01 96       	adiw	r24, 0x01	; 1
    8002:	c7 de       	rcall	.-626    	; 0x7d92 <pch>
    8004:	f1 01       	movw	r30, r2
    8006:	01 90       	ld	r0, Z+
    8008:	00 20       	and	r0, r0
    800a:	e9 f7       	brne	.-6      	; 0x8006 <p_ftoa+0x194>
    800c:	31 97       	sbiw	r30, 0x01	; 1
    800e:	cf 01       	movw	r24, r30
    8010:	82 19       	sub	r24, r2
    8012:	93 09       	sbc	r25, r3
    8014:	2a 96       	adiw	r28, 0x0a	; 10
    8016:	e2 e1       	ldi	r30, 0x12	; 18
    8018:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>
    801c:	61 14       	cp	r6, r1
    801e:	71 04       	cpc	r7, r1
    8020:	69 f3       	breq	.-38     	; 0x7ffc <p_ftoa+0x18a>
    8022:	6e e2       	ldi	r22, 0x2E	; 46
    8024:	ce 01       	movw	r24, r28
    8026:	01 96       	adiw	r24, 0x01	; 1
    8028:	b4 de       	rcall	.-664    	; 0x7d92 <pch>
    802a:	c5 01       	movw	r24, r10
    802c:	b4 01       	movw	r22, r8
    802e:	0e 94 16 e8 	call	0x1d02c	; 0x1d02c <__fixsfsi>
    8032:	6b 01       	movw	r12, r22
    8034:	7c 01       	movw	r14, r24
    8036:	07 2e       	mov	r0, r23
    8038:	00 0c       	add	r0, r0
    803a:	88 0b       	sbc	r24, r24
    803c:	99 0b       	sbc	r25, r25
    803e:	0e 94 49 e8 	call	0x1d092	; 0x1d092 <__floatsisf>
    8042:	9b 01       	movw	r18, r22
    8044:	ac 01       	movw	r20, r24
    8046:	c5 01       	movw	r24, r10
    8048:	b4 01       	movw	r22, r8
    804a:	0e 94 45 e7 	call	0x1ce8a	; 0x1ce8a <__subsf3>
    804e:	4b 01       	movw	r8, r22
    8050:	5c 01       	movw	r10, r24
    8052:	b6 01       	movw	r22, r12
    8054:	60 5d       	subi	r22, 0xD0	; 208
    8056:	7f 4f       	sbci	r23, 0xFF	; 255
    8058:	ce 01       	movw	r24, r28
    805a:	01 96       	adiw	r24, 0x01	; 1
    805c:	9a de       	rcall	.-716    	; 0x7d92 <pch>
    805e:	81 e0       	ldi	r24, 0x01	; 1
    8060:	68 1a       	sub	r6, r24
    8062:	71 08       	sbc	r7, r1
    8064:	20 e0       	ldi	r18, 0x00	; 0
    8066:	30 e0       	ldi	r19, 0x00	; 0
    8068:	40 e2       	ldi	r20, 0x20	; 32
    806a:	51 e4       	ldi	r21, 0x41	; 65
    806c:	c5 01       	movw	r24, r10
    806e:	b4 01       	movw	r22, r8
    8070:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    8074:	4b 01       	movw	r8, r22
    8076:	5c 01       	movw	r10, r24
    8078:	61 14       	cp	r6, r1
    807a:	71 04       	cpc	r7, r1
    807c:	b1 f6       	brne	.-84     	; 0x802a <p_ftoa+0x1b8>
    807e:	be cf       	rjmp	.-132    	; 0x7ffc <p_ftoa+0x18a>

00008080 <p_etoa>:
    8080:	a3 e1       	ldi	r26, 0x13	; 19
    8082:	b0 e0       	ldi	r27, 0x00	; 0
    8084:	e6 e4       	ldi	r30, 0x46	; 70
    8086:	f0 e4       	ldi	r31, 0x40	; 64
    8088:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    808c:	4b 01       	movw	r8, r22
    808e:	5c 01       	movw	r10, r24
    8090:	59 8b       	std	Y+17, r21	; 0x11
    8092:	48 8b       	std	Y+16, r20	; 0x10
    8094:	1b 8b       	std	Y+19, r17	; 0x13
    8096:	0a 8b       	std	Y+18, r16	; 0x12
    8098:	3c 2c       	mov	r3, r12
    809a:	c6 fa       	bst	r12, 6
    809c:	11 27       	eor	r17, r17
    809e:	10 f9       	bld	r17, 0
    80a0:	59 87       	std	Y+9, r21	; 0x09
    80a2:	48 87       	std	Y+8, r20	; 0x08
    80a4:	1b 86       	std	Y+11, r1	; 0x0b
    80a6:	1a 86       	std	Y+10, r1	; 0x0a
    80a8:	21 50       	subi	r18, 0x01	; 1
    80aa:	31 09       	sbc	r19, r1
    80ac:	3d 87       	std	Y+13, r19	; 0x0d
    80ae:	2c 87       	std	Y+12, r18	; 0x0c
    80b0:	fa 01       	movw	r30, r20
    80b2:	10 82       	st	Z, r1
    80b4:	20 e0       	ldi	r18, 0x00	; 0
    80b6:	30 e0       	ldi	r19, 0x00	; 0
    80b8:	a9 01       	movw	r20, r18
    80ba:	0e 94 aa e7 	call	0x1cf54	; 0x1cf54 <__cmpsf2>
    80be:	87 ff       	sbrs	r24, 7
    80c0:	05 c0       	rjmp	.+10     	; 0x80cc <p_etoa+0x4c>
    80c2:	b7 fa       	bst	r11, 7
    80c4:	b0 94       	com	r11
    80c6:	b7 f8       	bld	r11, 7
    80c8:	b0 94       	com	r11
    80ca:	11 e0       	ldi	r17, 0x01	; 1
    80cc:	10 fb       	bst	r17, 0
    80ce:	36 f8       	bld	r3, 6
    80d0:	36 fe       	sbrs	r3, 6
    80d2:	02 c0       	rjmp	.+4      	; 0x80d8 <p_etoa+0x58>
    80d4:	6d e2       	ldi	r22, 0x2D	; 45
    80d6:	07 c0       	rjmp	.+14     	; 0x80e6 <p_etoa+0x66>
    80d8:	32 fe       	sbrs	r3, 2
    80da:	02 c0       	rjmp	.+4      	; 0x80e0 <p_etoa+0x60>
    80dc:	6b e2       	ldi	r22, 0x2B	; 43
    80de:	03 c0       	rjmp	.+6      	; 0x80e6 <p_etoa+0x66>
    80e0:	34 fe       	sbrs	r3, 4
    80e2:	04 c0       	rjmp	.+8      	; 0x80ec <p_etoa+0x6c>
    80e4:	60 e2       	ldi	r22, 0x20	; 32
    80e6:	ce 01       	movw	r24, r28
    80e8:	08 96       	adiw	r24, 0x08	; 8
    80ea:	53 de       	rcall	.-858    	; 0x7d92 <pch>
    80ec:	37 01       	movw	r6, r14
    80ee:	f7 fe       	sbrs	r15, 7
    80f0:	02 c0       	rjmp	.+4      	; 0x80f6 <p_etoa+0x76>
    80f2:	61 2c       	mov	r6, r1
    80f4:	71 2c       	mov	r7, r1
    80f6:	1f 86       	std	Y+15, r1	; 0x0f
    80f8:	1e 86       	std	Y+14, r1	; 0x0e
    80fa:	20 e0       	ldi	r18, 0x00	; 0
    80fc:	30 e0       	ldi	r19, 0x00	; 0
    80fe:	a9 01       	movw	r20, r18
    8100:	c5 01       	movw	r24, r10
    8102:	b4 01       	movw	r22, r8
    8104:	0e 94 aa e7 	call	0x1cf54	; 0x1cf54 <__cmpsf2>
    8108:	f3 2d       	mov	r31, r3
    810a:	f2 70       	andi	r31, 0x02	; 2
    810c:	2f 2e       	mov	r2, r31
    810e:	88 23       	and	r24, r24
    8110:	09 f4       	brne	.+2      	; 0x8114 <p_etoa+0x94>
    8112:	70 c0       	rjmp	.+224    	; 0x81f4 <p_etoa+0x174>
    8114:	ff 23       	and	r31, r31
    8116:	b1 f0       	breq	.+44     	; 0x8144 <p_etoa+0xc4>
    8118:	83 01       	movw	r16, r6
    811a:	c1 2c       	mov	r12, r1
    811c:	d1 2c       	mov	r13, r1
    811e:	e1 2c       	mov	r14, r1
    8120:	2f e3       	ldi	r18, 0x3F	; 63
    8122:	f2 2e       	mov	r15, r18
    8124:	01 15       	cp	r16, r1
    8126:	11 05       	cpc	r17, r1
    8128:	91 f0       	breq	.+36     	; 0x814e <p_etoa+0xce>
    812a:	20 e0       	ldi	r18, 0x00	; 0
    812c:	30 e0       	ldi	r19, 0x00	; 0
    812e:	40 e2       	ldi	r20, 0x20	; 32
    8130:	51 e4       	ldi	r21, 0x41	; 65
    8132:	c7 01       	movw	r24, r14
    8134:	b6 01       	movw	r22, r12
    8136:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    813a:	6b 01       	movw	r12, r22
    813c:	7c 01       	movw	r14, r24
    813e:	01 50       	subi	r16, 0x01	; 1
    8140:	11 09       	sbc	r17, r1
    8142:	f0 cf       	rjmp	.-32     	; 0x8124 <p_etoa+0xa4>
    8144:	c1 2c       	mov	r12, r1
    8146:	d1 2c       	mov	r13, r1
    8148:	e1 2c       	mov	r14, r1
    814a:	9f e3       	ldi	r25, 0x3F	; 63
    814c:	f9 2e       	mov	r15, r25
    814e:	41 2c       	mov	r4, r1
    8150:	51 2c       	mov	r5, r1
    8152:	82 01       	movw	r16, r4
    8154:	01 50       	subi	r16, 0x01	; 1
    8156:	11 09       	sbc	r17, r1
    8158:	20 e0       	ldi	r18, 0x00	; 0
    815a:	30 e0       	ldi	r19, 0x00	; 0
    815c:	40 e8       	ldi	r20, 0x80	; 128
    815e:	5f e3       	ldi	r21, 0x3F	; 63
    8160:	c5 01       	movw	r24, r10
    8162:	b4 01       	movw	r22, r8
    8164:	0e 94 aa e7 	call	0x1cf54	; 0x1cf54 <__cmpsf2>
    8168:	87 ff       	sbrs	r24, 7
    816a:	0c c0       	rjmp	.+24     	; 0x8184 <p_etoa+0x104>
    816c:	20 e0       	ldi	r18, 0x00	; 0
    816e:	30 e0       	ldi	r19, 0x00	; 0
    8170:	40 e2       	ldi	r20, 0x20	; 32
    8172:	51 e4       	ldi	r21, 0x41	; 65
    8174:	c5 01       	movw	r24, r10
    8176:	b4 01       	movw	r22, r8
    8178:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    817c:	4b 01       	movw	r8, r22
    817e:	5c 01       	movw	r10, r24
    8180:	28 01       	movw	r4, r16
    8182:	e7 cf       	rjmp	.-50     	; 0x8152 <p_etoa+0xd2>
    8184:	82 01       	movw	r16, r4
    8186:	0f 5f       	subi	r16, 0xFF	; 255
    8188:	1f 4f       	sbci	r17, 0xFF	; 255
    818a:	20 e0       	ldi	r18, 0x00	; 0
    818c:	30 e0       	ldi	r19, 0x00	; 0
    818e:	40 e2       	ldi	r20, 0x20	; 32
    8190:	51 e4       	ldi	r21, 0x41	; 65
    8192:	c5 01       	movw	r24, r10
    8194:	b4 01       	movw	r22, r8
    8196:	0e 94 f9 e8 	call	0x1d1f2	; 0x1d1f2 <__gesf2>
    819a:	87 fd       	sbrc	r24, 7
    819c:	0c c0       	rjmp	.+24     	; 0x81b6 <p_etoa+0x136>
    819e:	20 e0       	ldi	r18, 0x00	; 0
    81a0:	30 e0       	ldi	r19, 0x00	; 0
    81a2:	40 e2       	ldi	r20, 0x20	; 32
    81a4:	51 e4       	ldi	r21, 0x41	; 65
    81a6:	c5 01       	movw	r24, r10
    81a8:	b4 01       	movw	r22, r8
    81aa:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    81ae:	4b 01       	movw	r8, r22
    81b0:	5c 01       	movw	r10, r24
    81b2:	28 01       	movw	r4, r16
    81b4:	e7 cf       	rjmp	.-50     	; 0x8184 <p_etoa+0x104>
    81b6:	a7 01       	movw	r20, r14
    81b8:	96 01       	movw	r18, r12
    81ba:	c5 01       	movw	r24, r10
    81bc:	b4 01       	movw	r22, r8
    81be:	0e 94 46 e7 	call	0x1ce8c	; 0x1ce8c <__addsf3>
    81c2:	4b 01       	movw	r8, r22
    81c4:	5c 01       	movw	r10, r24
    81c6:	82 01       	movw	r16, r4
    81c8:	2f ef       	ldi	r18, 0xFF	; 255
    81ca:	42 1a       	sub	r4, r18
    81cc:	52 0a       	sbc	r5, r18
    81ce:	20 e0       	ldi	r18, 0x00	; 0
    81d0:	30 e0       	ldi	r19, 0x00	; 0
    81d2:	40 e2       	ldi	r20, 0x20	; 32
    81d4:	51 e4       	ldi	r21, 0x41	; 65
    81d6:	0e 94 f9 e8 	call	0x1d1f2	; 0x1d1f2 <__gesf2>
    81da:	87 fd       	sbrc	r24, 7
    81dc:	09 c0       	rjmp	.+18     	; 0x81f0 <p_etoa+0x170>
    81de:	20 e0       	ldi	r18, 0x00	; 0
    81e0:	30 e0       	ldi	r19, 0x00	; 0
    81e2:	40 e2       	ldi	r20, 0x20	; 32
    81e4:	51 e4       	ldi	r21, 0x41	; 65
    81e6:	c5 01       	movw	r24, r10
    81e8:	b4 01       	movw	r22, r8
    81ea:	0e 94 ae e7 	call	0x1cf5c	; 0x1cf5c <__divsf3>
    81ee:	e9 cf       	rjmp	.-46     	; 0x81c2 <p_etoa+0x142>
    81f0:	0e 87       	std	Y+14, r16	; 0x0e
    81f2:	1f 87       	std	Y+15, r17	; 0x0f
    81f4:	85 e6       	ldi	r24, 0x65	; 101
    81f6:	89 83       	std	Y+1, r24	; 0x01
    81f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    81fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    81fc:	97 ff       	sbrs	r25, 7
    81fe:	08 c0       	rjmp	.+16     	; 0x8210 <p_etoa+0x190>
    8200:	91 95       	neg	r25
    8202:	81 95       	neg	r24
    8204:	91 09       	sbc	r25, r1
    8206:	9f 87       	std	Y+15, r25	; 0x0f
    8208:	8e 87       	std	Y+14, r24	; 0x0e
    820a:	8d e2       	ldi	r24, 0x2D	; 45
    820c:	90 e0       	ldi	r25, 0x00	; 0
    820e:	02 c0       	rjmp	.+4      	; 0x8214 <p_etoa+0x194>
    8210:	8b e2       	ldi	r24, 0x2B	; 43
    8212:	90 e0       	ldi	r25, 0x00	; 0
    8214:	6c 01       	movw	r12, r24
    8216:	82 e0       	ldi	r24, 0x02	; 2
    8218:	e8 2e       	mov	r14, r24
    821a:	f1 2c       	mov	r15, r1
    821c:	8e 01       	movw	r16, r28
    821e:	02 5f       	subi	r16, 0xF2	; 242
    8220:	1f 4f       	sbci	r17, 0xFF	; 255
    8222:	2a e0       	ldi	r18, 0x0A	; 10
    8224:	30 e0       	ldi	r19, 0x00	; 0
    8226:	42 e0       	ldi	r20, 0x02	; 2
    8228:	50 e0       	ldi	r21, 0x00	; 0
    822a:	65 e0       	ldi	r22, 0x05	; 5
    822c:	70 e0       	ldi	r23, 0x00	; 0
    822e:	ce 01       	movw	r24, r28
    8230:	02 96       	adiw	r24, 0x02	; 2
    8232:	26 dd       	rcall	.-1460   	; 0x7c80 <bin2num>
    8234:	9c 01       	movw	r18, r24
    8236:	93 2d       	mov	r25, r3
    8238:	98 72       	andi	r25, 0x28	; 40
    823a:	90 32       	cpi	r25, 0x20	; 32
    823c:	71 f0       	breq	.+28     	; 0x825a <p_etoa+0x1da>
    823e:	c5 01       	movw	r24, r10
    8240:	b4 01       	movw	r22, r8
    8242:	0e 94 16 e8 	call	0x1d02c	; 0x1d02c <__fixsfsi>
    8246:	6b 01       	movw	r12, r22
    8248:	7c 01       	movw	r14, r24
    824a:	60 e3       	ldi	r22, 0x30	; 48
    824c:	6c 0d       	add	r22, r12
    824e:	ce 01       	movw	r24, r28
    8250:	08 96       	adiw	r24, 0x08	; 8
    8252:	9f dd       	rcall	.-1218   	; 0x7d92 <pch>
    8254:	21 10       	cpse	r2, r1
    8256:	20 c0       	rjmp	.+64     	; 0x8298 <p_etoa+0x218>
    8258:	63 c0       	rjmp	.+198    	; 0x8320 <p_etoa+0x2a0>
    825a:	8a 85       	ldd	r24, Y+10	; 0x0a
    825c:	9b 85       	ldd	r25, Y+11	; 0x0b
    825e:	0a 89       	ldd	r16, Y+18	; 0x12
    8260:	1b 89       	ldd	r17, Y+19	; 0x13
    8262:	08 1b       	sub	r16, r24
    8264:	19 0b       	sbc	r17, r25
    8266:	22 20       	and	r2, r2
    8268:	41 f0       	breq	.+16     	; 0x827a <p_etoa+0x1fa>
    826a:	61 14       	cp	r6, r1
    826c:	71 04       	cpc	r7, r1
    826e:	29 f0       	breq	.+10     	; 0x827a <p_etoa+0x1fa>
    8270:	06 19       	sub	r16, r6
    8272:	17 09       	sbc	r17, r7
    8274:	06 50       	subi	r16, 0x06	; 6
    8276:	11 09       	sbc	r17, r1
    8278:	02 c0       	rjmp	.+4      	; 0x827e <p_etoa+0x1fe>
    827a:	05 50       	subi	r16, 0x05	; 5
    827c:	11 09       	sbc	r17, r1
    827e:	24 30       	cpi	r18, 0x04	; 4
    8280:	31 05       	cpc	r19, r1
    8282:	14 f0       	brlt	.+4      	; 0x8288 <p_etoa+0x208>
    8284:	01 50       	subi	r16, 0x01	; 1
    8286:	11 09       	sbc	r17, r1
    8288:	10 16       	cp	r1, r16
    828a:	11 06       	cpc	r1, r17
    828c:	c4 f6       	brge	.-80     	; 0x823e <p_etoa+0x1be>
    828e:	60 e3       	ldi	r22, 0x30	; 48
    8290:	ce 01       	movw	r24, r28
    8292:	08 96       	adiw	r24, 0x08	; 8
    8294:	7e dd       	rcall	.-1284   	; 0x7d92 <pch>
    8296:	f6 cf       	rjmp	.-20     	; 0x8284 <p_etoa+0x204>
    8298:	61 14       	cp	r6, r1
    829a:	71 04       	cpc	r7, r1
    829c:	09 f4       	brne	.+2      	; 0x82a0 <p_etoa+0x220>
    829e:	40 c0       	rjmp	.+128    	; 0x8320 <p_etoa+0x2a0>
    82a0:	b6 01       	movw	r22, r12
    82a2:	dd 0c       	add	r13, r13
    82a4:	88 0b       	sbc	r24, r24
    82a6:	99 0b       	sbc	r25, r25
    82a8:	0e 94 49 e8 	call	0x1d092	; 0x1d092 <__floatsisf>
    82ac:	9b 01       	movw	r18, r22
    82ae:	ac 01       	movw	r20, r24
    82b0:	c5 01       	movw	r24, r10
    82b2:	b4 01       	movw	r22, r8
    82b4:	0e 94 45 e7 	call	0x1ce8a	; 0x1ce8a <__subsf3>
    82b8:	20 e0       	ldi	r18, 0x00	; 0
    82ba:	30 e0       	ldi	r19, 0x00	; 0
    82bc:	40 e2       	ldi	r20, 0x20	; 32
    82be:	51 e4       	ldi	r21, 0x41	; 65
    82c0:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    82c4:	4b 01       	movw	r8, r22
    82c6:	5c 01       	movw	r10, r24
    82c8:	6e e2       	ldi	r22, 0x2E	; 46
    82ca:	ce 01       	movw	r24, r28
    82cc:	08 96       	adiw	r24, 0x08	; 8
    82ce:	61 dd       	rcall	.-1342   	; 0x7d92 <pch>
    82d0:	c5 01       	movw	r24, r10
    82d2:	b4 01       	movw	r22, r8
    82d4:	0e 94 16 e8 	call	0x1d02c	; 0x1d02c <__fixsfsi>
    82d8:	6b 01       	movw	r12, r22
    82da:	7c 01       	movw	r14, r24
    82dc:	07 2e       	mov	r0, r23
    82de:	00 0c       	add	r0, r0
    82e0:	88 0b       	sbc	r24, r24
    82e2:	99 0b       	sbc	r25, r25
    82e4:	0e 94 49 e8 	call	0x1d092	; 0x1d092 <__floatsisf>
    82e8:	9b 01       	movw	r18, r22
    82ea:	ac 01       	movw	r20, r24
    82ec:	c5 01       	movw	r24, r10
    82ee:	b4 01       	movw	r22, r8
    82f0:	0e 94 45 e7 	call	0x1ce8a	; 0x1ce8a <__subsf3>
    82f4:	4b 01       	movw	r8, r22
    82f6:	5c 01       	movw	r10, r24
    82f8:	b6 01       	movw	r22, r12
    82fa:	60 5d       	subi	r22, 0xD0	; 208
    82fc:	7f 4f       	sbci	r23, 0xFF	; 255
    82fe:	ce 01       	movw	r24, r28
    8300:	08 96       	adiw	r24, 0x08	; 8
    8302:	47 dd       	rcall	.-1394   	; 0x7d92 <pch>
    8304:	20 e0       	ldi	r18, 0x00	; 0
    8306:	30 e0       	ldi	r19, 0x00	; 0
    8308:	40 e2       	ldi	r20, 0x20	; 32
    830a:	51 e4       	ldi	r21, 0x41	; 65
    830c:	c5 01       	movw	r24, r10
    830e:	b4 01       	movw	r22, r8
    8310:	0e 94 fd e8 	call	0x1d1fa	; 0x1d1fa <__mulsf3>
    8314:	4b 01       	movw	r8, r22
    8316:	5c 01       	movw	r10, r24
    8318:	31 e0       	ldi	r19, 0x01	; 1
    831a:	63 1a       	sub	r6, r19
    831c:	71 08       	sbc	r7, r1
    831e:	c1 f6       	brne	.-80     	; 0x82d0 <p_etoa+0x250>
    8320:	8e 01       	movw	r16, r28
    8322:	0f 5f       	subi	r16, 0xFF	; 255
    8324:	1f 4f       	sbci	r17, 0xFF	; 255
    8326:	f8 01       	movw	r30, r16
    8328:	61 91       	ld	r22, Z+
    832a:	8f 01       	movw	r16, r30
    832c:	ce 01       	movw	r24, r28
    832e:	08 96       	adiw	r24, 0x08	; 8
    8330:	66 23       	and	r22, r22
    8332:	11 f0       	breq	.+4      	; 0x8338 <p_etoa+0x2b8>
    8334:	2e dd       	rcall	.-1444   	; 0x7d92 <pch>
    8336:	f7 cf       	rjmp	.-18     	; 0x8326 <p_etoa+0x2a6>
    8338:	2c dd       	rcall	.-1448   	; 0x7d92 <pch>
    833a:	e8 89       	ldd	r30, Y+16	; 0x10
    833c:	f9 89       	ldd	r31, Y+17	; 0x11
    833e:	01 90       	ld	r0, Z+
    8340:	00 20       	and	r0, r0
    8342:	e9 f7       	brne	.-6      	; 0x833e <p_etoa+0x2be>
    8344:	cf 01       	movw	r24, r30
    8346:	01 97       	sbiw	r24, 0x01	; 1
    8348:	28 89       	ldd	r18, Y+16	; 0x10
    834a:	39 89       	ldd	r19, Y+17	; 0x11
    834c:	82 1b       	sub	r24, r18
    834e:	93 0b       	sbc	r25, r19
    8350:	63 96       	adiw	r28, 0x13	; 19
    8352:	e2 e1       	ldi	r30, 0x12	; 18
    8354:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00008358 <_puts_pad>:
    8358:	a0 e0       	ldi	r26, 0x00	; 0
    835a:	b0 e0       	ldi	r27, 0x00	; 0
    835c:	e2 eb       	ldi	r30, 0xB2	; 178
    835e:	f1 e4       	ldi	r31, 0x41	; 65
    8360:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
    8364:	6c 01       	movw	r12, r24
    8366:	4b 01       	movw	r8, r22
    8368:	79 01       	movw	r14, r18
    836a:	24 17       	cp	r18, r20
    836c:	35 07       	cpc	r19, r21
    836e:	24 f4       	brge	.+8      	; 0x8378 <_puts_pad+0x20>
    8370:	ea 01       	movw	r28, r20
    8372:	c2 1b       	sub	r28, r18
    8374:	d3 0b       	sbc	r29, r19
    8376:	02 c0       	rjmp	.+4      	; 0x837c <_puts_pad+0x24>
    8378:	c0 e0       	ldi	r28, 0x00	; 0
    837a:	d0 e0       	ldi	r29, 0x00	; 0
    837c:	01 15       	cp	r16, r1
    837e:	11 05       	cpc	r17, r1
    8380:	49 f4       	brne	.+18     	; 0x8394 <_puts_pad+0x3c>
    8382:	21 97       	sbiw	r28, 0x01	; 1
    8384:	38 f0       	brcs	.+14     	; 0x8394 <_puts_pad+0x3c>
    8386:	d6 01       	movw	r26, r12
    8388:	ed 91       	ld	r30, X+
    838a:	fc 91       	ld	r31, X
    838c:	60 e2       	ldi	r22, 0x20	; 32
    838e:	c6 01       	movw	r24, r12
    8390:	09 95       	icall
    8392:	f7 cf       	rjmp	.-18     	; 0x8382 <_puts_pad+0x2a>
    8394:	54 01       	movw	r10, r8
    8396:	f5 01       	movw	r30, r10
    8398:	61 91       	ld	r22, Z+
    839a:	5f 01       	movw	r10, r30
    839c:	66 23       	and	r22, r22
    839e:	61 f0       	breq	.+24     	; 0x83b8 <_puts_pad+0x60>
    83a0:	e1 14       	cp	r14, r1
    83a2:	f1 04       	cpc	r15, r1
    83a4:	49 f0       	breq	.+18     	; 0x83b8 <_puts_pad+0x60>
    83a6:	d6 01       	movw	r26, r12
    83a8:	ed 91       	ld	r30, X+
    83aa:	fc 91       	ld	r31, X
    83ac:	c6 01       	movw	r24, r12
    83ae:	09 95       	icall
    83b0:	b1 e0       	ldi	r27, 0x01	; 1
    83b2:	eb 1a       	sub	r14, r27
    83b4:	f1 08       	sbc	r15, r1
    83b6:	ef cf       	rjmp	.-34     	; 0x8396 <_puts_pad+0x3e>
    83b8:	01 15       	cp	r16, r1
    83ba:	11 05       	cpc	r17, r1
    83bc:	51 f0       	breq	.+20     	; 0x83d2 <_puts_pad+0x7a>
    83be:	20 97       	sbiw	r28, 0x00	; 0
    83c0:	41 f0       	breq	.+16     	; 0x83d2 <_puts_pad+0x7a>
    83c2:	d6 01       	movw	r26, r12
    83c4:	ed 91       	ld	r30, X+
    83c6:	fc 91       	ld	r31, X
    83c8:	60 e2       	ldi	r22, 0x20	; 32
    83ca:	c6 01       	movw	r24, r12
    83cc:	09 95       	icall
    83ce:	21 97       	sbiw	r28, 0x01	; 1
    83d0:	f6 cf       	rjmp	.-20     	; 0x83be <_puts_pad+0x66>
    83d2:	cd b7       	in	r28, 0x3d	; 61
    83d4:	de b7       	in	r29, 0x3e	; 62
    83d6:	ec e0       	ldi	r30, 0x0C	; 12
    83d8:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

000083dc <_puts_pad_X>:
    83dc:	2f 92       	push	r2
    83de:	3f 92       	push	r3
    83e0:	4f 92       	push	r4
    83e2:	6f 92       	push	r6
    83e4:	7f 92       	push	r7
    83e6:	8f 92       	push	r8
    83e8:	cf 92       	push	r12
    83ea:	df 92       	push	r13
    83ec:	ef 92       	push	r14
    83ee:	ff 92       	push	r15
    83f0:	0f 93       	push	r16
    83f2:	1f 93       	push	r17
    83f4:	cf 93       	push	r28
    83f6:	df 93       	push	r29
    83f8:	6c 01       	movw	r12, r24
    83fa:	3a 01       	movw	r6, r20
    83fc:	86 2e       	mov	r8, r22
    83fe:	02 17       	cp	r16, r18
    8400:	13 07       	cpc	r17, r19
    8402:	24 f4       	brge	.+8      	; 0x840c <_puts_pad_X+0x30>
    8404:	e9 01       	movw	r28, r18
    8406:	c0 1b       	sub	r28, r16
    8408:	d1 0b       	sbc	r29, r17
    840a:	02 c0       	rjmp	.+4      	; 0x8410 <_puts_pad_X+0x34>
    840c:	c0 e0       	ldi	r28, 0x00	; 0
    840e:	d0 e0       	ldi	r29, 0x00	; 0
    8410:	e1 14       	cp	r14, r1
    8412:	f1 04       	cpc	r15, r1
    8414:	49 f4       	brne	.+18     	; 0x8428 <_puts_pad_X+0x4c>
    8416:	21 97       	sbiw	r28, 0x01	; 1
    8418:	38 f0       	brcs	.+14     	; 0x8428 <_puts_pad_X+0x4c>
    841a:	d6 01       	movw	r26, r12
    841c:	ed 91       	ld	r30, X+
    841e:	fc 91       	ld	r31, X
    8420:	60 e2       	ldi	r22, 0x20	; 32
    8422:	c6 01       	movw	r24, r12
    8424:	09 95       	icall
    8426:	f7 cf       	rjmp	.-18     	; 0x8416 <_puts_pad_X+0x3a>
    8428:	13 01       	movw	r2, r6
    842a:	48 2c       	mov	r4, r8
    842c:	20 0e       	add	r2, r16
    842e:	31 1e       	adc	r3, r17
    8430:	41 1c       	adc	r4, r1
    8432:	17 fd       	sbrc	r17, 7
    8434:	4a 94       	dec	r4
    8436:	f3 01       	movw	r30, r6
    8438:	58 2d       	mov	r21, r8
    843a:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    843e:	66 23       	and	r22, r22
    8440:	71 f0       	breq	.+28     	; 0x845e <_puts_pad_X+0x82>
    8442:	62 14       	cp	r6, r2
    8444:	73 04       	cpc	r7, r3
    8446:	84 04       	cpc	r8, r4
    8448:	51 f0       	breq	.+20     	; 0x845e <_puts_pad_X+0x82>
    844a:	d6 01       	movw	r26, r12
    844c:	ed 91       	ld	r30, X+
    844e:	fc 91       	ld	r31, X
    8450:	c6 01       	movw	r24, r12
    8452:	09 95       	icall
    8454:	bf ef       	ldi	r27, 0xFF	; 255
    8456:	6b 1a       	sub	r6, r27
    8458:	7b 0a       	sbc	r7, r27
    845a:	8b 0a       	sbc	r8, r27
    845c:	ec cf       	rjmp	.-40     	; 0x8436 <_puts_pad_X+0x5a>
    845e:	ef 28       	or	r14, r15
    8460:	51 f0       	breq	.+20     	; 0x8476 <_puts_pad_X+0x9a>
    8462:	20 97       	sbiw	r28, 0x00	; 0
    8464:	41 f0       	breq	.+16     	; 0x8476 <_puts_pad_X+0x9a>
    8466:	d6 01       	movw	r26, r12
    8468:	ed 91       	ld	r30, X+
    846a:	fc 91       	ld	r31, X
    846c:	60 e2       	ldi	r22, 0x20	; 32
    846e:	c6 01       	movw	r24, r12
    8470:	09 95       	icall
    8472:	21 97       	sbiw	r28, 0x01	; 1
    8474:	f6 cf       	rjmp	.-20     	; 0x8462 <_puts_pad_X+0x86>
    8476:	df 91       	pop	r29
    8478:	cf 91       	pop	r28
    847a:	1f 91       	pop	r17
    847c:	0f 91       	pop	r16
    847e:	ff 90       	pop	r15
    8480:	ef 90       	pop	r14
    8482:	df 90       	pop	r13
    8484:	cf 90       	pop	r12
    8486:	8f 90       	pop	r8
    8488:	7f 90       	pop	r7
    848a:	6f 90       	pop	r6
    848c:	4f 90       	pop	r4
    848e:	3f 90       	pop	r3
    8490:	2f 90       	pop	r2
    8492:	08 95       	ret

00008494 <strlen_X>:
    8494:	cf 92       	push	r12
    8496:	df 92       	push	r13
    8498:	ef 92       	push	r14
    849a:	9b 01       	movw	r18, r22
    849c:	48 2f       	mov	r20, r24
    849e:	80 e0       	ldi	r24, 0x00	; 0
    84a0:	90 e0       	ldi	r25, 0x00	; 0
    84a2:	2f 5f       	subi	r18, 0xFF	; 255
    84a4:	3f 4f       	sbci	r19, 0xFF	; 255
    84a6:	4f 4f       	sbci	r20, 0xFF	; 255
    84a8:	69 01       	movw	r12, r18
    84aa:	e4 2e       	mov	r14, r20
    84ac:	51 e0       	ldi	r21, 0x01	; 1
    84ae:	c5 1a       	sub	r12, r21
    84b0:	d1 08       	sbc	r13, r1
    84b2:	e1 08       	sbc	r14, r1
    84b4:	f6 01       	movw	r30, r12
    84b6:	5e 2d       	mov	r21, r14
    84b8:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    84bc:	66 23       	and	r22, r22
    84be:	11 f0       	breq	.+4      	; 0x84c4 <strlen_X+0x30>
    84c0:	01 96       	adiw	r24, 0x01	; 1
    84c2:	ef cf       	rjmp	.-34     	; 0x84a2 <strlen_X+0xe>
    84c4:	ef 90       	pop	r14
    84c6:	df 90       	pop	r13
    84c8:	cf 90       	pop	r12
    84ca:	08 95       	ret

000084cc <_printf_fn>:
    84cc:	ae e6       	ldi	r26, 0x6E	; 110
    84ce:	b0 e0       	ldi	r27, 0x00	; 0
    84d0:	ec e6       	ldi	r30, 0x6C	; 108
    84d2:	f2 e4       	ldi	r31, 0x42	; 66
    84d4:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    84d8:	a5 96       	adiw	r28, 0x25	; 37
    84da:	9f af       	std	Y+63, r25	; 0x3f
    84dc:	8e af       	std	Y+62, r24	; 0x3e
    84de:	a5 97       	sbiw	r28, 0x25	; 37
    84e0:	6a 01       	movw	r12, r20
    84e2:	e6 2e       	mov	r14, r22
    84e4:	19 01       	movw	r2, r18
    84e6:	a9 96       	adiw	r28, 0x29	; 41
    84e8:	1c ae       	std	Y+60, r1	; 0x3c
    84ea:	1d ae       	std	Y+61, r1	; 0x3d
    84ec:	1e ae       	std	Y+62, r1	; 0x3e
    84ee:	1f ae       	std	Y+63, r1	; 0x3f
    84f0:	a9 97       	sbiw	r28, 0x29	; 41
    84f2:	8a e1       	ldi	r24, 0x1A	; 26
    84f4:	94 e0       	ldi	r25, 0x04	; 4
    84f6:	9c 01       	movw	r18, r24
    84f8:	40 e8       	ldi	r20, 0x80	; 128
    84fa:	ae 96       	adiw	r28, 0x2e	; 46
    84fc:	2d af       	std	Y+61, r18	; 0x3d
    84fe:	3e af       	std	Y+62, r19	; 0x3e
    8500:	4f af       	std	Y+63, r20	; 0x3f
    8502:	ae 97       	sbiw	r28, 0x2e	; 46
    8504:	ae 01       	movw	r20, r28
    8506:	4f 5a       	subi	r20, 0xAF	; 175
    8508:	5f 4f       	sbci	r21, 0xFF	; 255
    850a:	67 96       	adiw	r28, 0x17	; 23
    850c:	5f af       	std	Y+63, r21	; 0x3f
    850e:	4e af       	std	Y+62, r20	; 0x3e
    8510:	67 97       	sbiw	r28, 0x17	; 23
    8512:	ce 01       	movw	r24, r28
    8514:	8d 5b       	subi	r24, 0xBD	; 189
    8516:	9f 4f       	sbci	r25, 0xFF	; 255
    8518:	69 96       	adiw	r28, 0x19	; 25
    851a:	9f af       	std	Y+63, r25	; 0x3f
    851c:	8e af       	std	Y+62, r24	; 0x3e
    851e:	69 97       	sbiw	r28, 0x19	; 25
    8520:	de 01       	movw	r26, r28
    8522:	a5 5b       	subi	r26, 0xB5	; 181
    8524:	bf 4f       	sbci	r27, 0xFF	; 255
    8526:	6b 96       	adiw	r28, 0x1b	; 27
    8528:	bf af       	std	Y+63, r27	; 0x3f
    852a:	ae af       	std	Y+62, r26	; 0x3e
    852c:	6b 97       	sbiw	r28, 0x1b	; 27
    852e:	fe 01       	movw	r30, r28
    8530:	ed 5a       	subi	r30, 0xAD	; 173
    8532:	ff 4f       	sbci	r31, 0xFF	; 255
    8534:	6d 96       	adiw	r28, 0x1d	; 29
    8536:	ff af       	std	Y+63, r31	; 0x3f
    8538:	ee af       	std	Y+62, r30	; 0x3e
    853a:	6d 97       	sbiw	r28, 0x1d	; 29
    853c:	f6 01       	movw	r30, r12
    853e:	5e 2d       	mov	r21, r14
    8540:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    8544:	66 23       	and	r22, r22
    8546:	09 f4       	brne	.+2      	; 0x854a <_printf_fn+0x7e>
    8548:	13 c4       	rjmp	.+2086   	; 0x8d70 <_printf_fn+0x8a4>
    854a:	ae 2d       	mov	r26, r14
    854c:	c6 01       	movw	r24, r12
    854e:	01 96       	adiw	r24, 0x01	; 1
    8550:	a1 1d       	adc	r26, r1
    8552:	3c 01       	movw	r6, r24
    8554:	8a 2e       	mov	r8, r26
    8556:	65 32       	cpi	r22, 0x25	; 37
    8558:	51 f0       	breq	.+20     	; 0x856e <_printf_fn+0xa2>
    855a:	a5 96       	adiw	r28, 0x25	; 37
    855c:	ae ad       	ldd	r26, Y+62	; 0x3e
    855e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8560:	a5 97       	sbiw	r28, 0x25	; 37
    8562:	ed 91       	ld	r30, X+
    8564:	fc 91       	ld	r31, X
    8566:	11 97       	sbiw	r26, 0x01	; 1
    8568:	cd 01       	movw	r24, r26
    856a:	09 95       	icall
    856c:	d5 c3       	rjmp	.+1962   	; 0x8d18 <_printf_fn+0x84c>
    856e:	91 2c       	mov	r9, r1
    8570:	f3 01       	movw	r30, r6
    8572:	58 2d       	mov	r21, r8
    8574:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    8578:	63 32       	cpi	r22, 0x23	; 35
    857a:	19 f4       	brne	.+6      	; 0x8582 <_printf_fn+0xb6>
    857c:	68 94       	set
    857e:	97 f8       	bld	r9, 7
    8580:	04 c0       	rjmp	.+8      	; 0x858a <_printf_fn+0xbe>
    8582:	6b 32       	cpi	r22, 0x2B	; 43
    8584:	39 f4       	brne	.+14     	; 0x8594 <_printf_fn+0xc8>
    8586:	68 94       	set
    8588:	92 f8       	bld	r9, 2
    858a:	bf ef       	ldi	r27, 0xFF	; 255
    858c:	6b 1a       	sub	r6, r27
    858e:	7b 0a       	sbc	r7, r27
    8590:	8b 0a       	sbc	r8, r27
    8592:	ee cf       	rjmp	.-36     	; 0x8570 <_printf_fn+0xa4>
    8594:	6d 32       	cpi	r22, 0x2D	; 45
    8596:	a9 f4       	brne	.+42     	; 0x85c2 <_printf_fn+0xf6>
    8598:	93 fc       	sbrc	r9, 3
    859a:	05 c0       	rjmp	.+10     	; 0x85a6 <_printf_fn+0xda>
    859c:	6d 32       	cpi	r22, 0x2D	; 45
    859e:	19 f4       	brne	.+6      	; 0x85a6 <_printf_fn+0xda>
    85a0:	68 94       	set
    85a2:	93 f8       	bld	r9, 3
    85a4:	f2 cf       	rjmp	.-28     	; 0x858a <_printf_fn+0xbe>
    85a6:	94 fc       	sbrc	r9, 4
    85a8:	05 c0       	rjmp	.+10     	; 0x85b4 <_printf_fn+0xe8>
    85aa:	60 32       	cpi	r22, 0x20	; 32
    85ac:	19 f4       	brne	.+6      	; 0x85b4 <_printf_fn+0xe8>
    85ae:	68 94       	set
    85b0:	94 f8       	bld	r9, 4
    85b2:	eb cf       	rjmp	.-42     	; 0x858a <_printf_fn+0xbe>
    85b4:	95 fc       	sbrc	r9, 5
    85b6:	e9 cf       	rjmp	.-46     	; 0x858a <_printf_fn+0xbe>
    85b8:	60 33       	cpi	r22, 0x30	; 48
    85ba:	39 f7       	brne	.-50     	; 0x858a <_printf_fn+0xbe>
    85bc:	68 94       	set
    85be:	95 f8       	bld	r9, 5
    85c0:	e4 cf       	rjmp	.-56     	; 0x858a <_printf_fn+0xbe>
    85c2:	86 2f       	mov	r24, r22
    85c4:	8f 7e       	andi	r24, 0xEF	; 239
    85c6:	80 32       	cpi	r24, 0x20	; 32
    85c8:	39 f3       	breq	.-50     	; 0x8598 <_printf_fn+0xcc>
    85ca:	70 e0       	ldi	r23, 0x00	; 0
    85cc:	60 53       	subi	r22, 0x30	; 48
    85ce:	71 09       	sbc	r23, r1
    85d0:	6f 96       	adiw	r28, 0x1f	; 31
    85d2:	1f ae       	std	Y+63, r1	; 0x3f
    85d4:	1e ae       	std	Y+62, r1	; 0x3e
    85d6:	6f 97       	sbiw	r28, 0x1f	; 31
    85d8:	6a 30       	cpi	r22, 0x0A	; 10
    85da:	71 05       	cpc	r23, r1
    85dc:	10 f5       	brcc	.+68     	; 0x8622 <_printf_fn+0x156>
    85de:	2a e0       	ldi	r18, 0x0A	; 10
    85e0:	f3 01       	movw	r30, r6
    85e2:	58 2d       	mov	r21, r8
    85e4:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    85e8:	70 e0       	ldi	r23, 0x00	; 0
    85ea:	cb 01       	movw	r24, r22
    85ec:	c0 97       	sbiw	r24, 0x30	; 48
    85ee:	0a 97       	sbiw	r24, 0x0a	; 10
    85f0:	b0 f4       	brcc	.+44     	; 0x861e <_printf_fn+0x152>
    85f2:	ef ef       	ldi	r30, 0xFF	; 255
    85f4:	6e 1a       	sub	r6, r30
    85f6:	7e 0a       	sbc	r7, r30
    85f8:	8e 0a       	sbc	r8, r30
    85fa:	6f 96       	adiw	r28, 0x1f	; 31
    85fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    85fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    8600:	6f 97       	sbiw	r28, 0x1f	; 31
    8602:	24 9f       	mul	r18, r20
    8604:	c0 01       	movw	r24, r0
    8606:	25 9f       	mul	r18, r21
    8608:	90 0d       	add	r25, r0
    860a:	11 24       	eor	r1, r1
    860c:	68 0f       	add	r22, r24
    860e:	79 1f       	adc	r23, r25
    8610:	cb 01       	movw	r24, r22
    8612:	c0 97       	sbiw	r24, 0x30	; 48
    8614:	6f 96       	adiw	r28, 0x1f	; 31
    8616:	9f af       	std	Y+63, r25	; 0x3f
    8618:	8e af       	std	Y+62, r24	; 0x3e
    861a:	6f 97       	sbiw	r28, 0x1f	; 31
    861c:	e1 cf       	rjmp	.-62     	; 0x85e0 <_printf_fn+0x114>
    861e:	68 94       	set
    8620:	90 f8       	bld	r9, 0
    8622:	f3 01       	movw	r30, r6
    8624:	58 2d       	mov	r21, r8
    8626:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    862a:	6e 32       	cpi	r22, 0x2E	; 46
    862c:	61 f5       	brne	.+88     	; 0x8686 <_printf_fn+0x1ba>
    862e:	9f ef       	ldi	r25, 0xFF	; 255
    8630:	69 1a       	sub	r6, r25
    8632:	79 0a       	sbc	r7, r25
    8634:	89 0a       	sbc	r8, r25
    8636:	a1 96       	adiw	r28, 0x21	; 33
    8638:	1f ae       	std	Y+63, r1	; 0x3f
    863a:	1e ae       	std	Y+62, r1	; 0x3e
    863c:	a1 97       	sbiw	r28, 0x21	; 33
    863e:	2a e0       	ldi	r18, 0x0A	; 10
    8640:	f3 01       	movw	r30, r6
    8642:	58 2d       	mov	r21, r8
    8644:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    8648:	70 e0       	ldi	r23, 0x00	; 0
    864a:	cb 01       	movw	r24, r22
    864c:	c0 97       	sbiw	r24, 0x30	; 48
    864e:	0a 97       	sbiw	r24, 0x0a	; 10
    8650:	b8 f4       	brcc	.+46     	; 0x8680 <_printf_fn+0x1b4>
    8652:	af ef       	ldi	r26, 0xFF	; 255
    8654:	6a 1a       	sub	r6, r26
    8656:	7a 0a       	sbc	r7, r26
    8658:	8a 0a       	sbc	r8, r26
    865a:	a1 96       	adiw	r28, 0x21	; 33
    865c:	ee ad       	ldd	r30, Y+62	; 0x3e
    865e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8660:	a1 97       	sbiw	r28, 0x21	; 33
    8662:	2e 9f       	mul	r18, r30
    8664:	c0 01       	movw	r24, r0
    8666:	2f 9f       	mul	r18, r31
    8668:	90 0d       	add	r25, r0
    866a:	11 24       	eor	r1, r1
    866c:	68 0f       	add	r22, r24
    866e:	79 1f       	adc	r23, r25
    8670:	ab 01       	movw	r20, r22
    8672:	40 53       	subi	r20, 0x30	; 48
    8674:	51 09       	sbc	r21, r1
    8676:	a1 96       	adiw	r28, 0x21	; 33
    8678:	5f af       	std	Y+63, r21	; 0x3f
    867a:	4e af       	std	Y+62, r20	; 0x3e
    867c:	a1 97       	sbiw	r28, 0x21	; 33
    867e:	e0 cf       	rjmp	.-64     	; 0x8640 <_printf_fn+0x174>
    8680:	68 94       	set
    8682:	91 f8       	bld	r9, 1
    8684:	04 c0       	rjmp	.+8      	; 0x868e <_printf_fn+0x1c2>
    8686:	a1 96       	adiw	r28, 0x21	; 33
    8688:	1f ae       	std	Y+63, r1	; 0x3f
    868a:	1e ae       	std	Y+62, r1	; 0x3e
    868c:	a1 97       	sbiw	r28, 0x21	; 33
    868e:	f3 01       	movw	r30, r6
    8690:	58 2d       	mov	r21, r8
    8692:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    8696:	69 34       	cpi	r22, 0x49	; 73
    8698:	91 f5       	brne	.+100    	; 0x86fe <_printf_fn+0x232>
    869a:	5f ef       	ldi	r21, 0xFF	; 255
    869c:	65 1a       	sub	r6, r21
    869e:	75 0a       	sbc	r7, r21
    86a0:	85 0a       	sbc	r8, r21
    86a2:	41 2c       	mov	r4, r1
    86a4:	51 2c       	mov	r5, r1
    86a6:	2a e0       	ldi	r18, 0x0A	; 10
    86a8:	f3 01       	movw	r30, r6
    86aa:	58 2d       	mov	r21, r8
    86ac:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    86b0:	70 e0       	ldi	r23, 0x00	; 0
    86b2:	cb 01       	movw	r24, r22
    86b4:	c0 97       	sbiw	r24, 0x30	; 48
    86b6:	0a 97       	sbiw	r24, 0x0a	; 10
    86b8:	80 f4       	brcc	.+32     	; 0x86da <_printf_fn+0x20e>
    86ba:	8f ef       	ldi	r24, 0xFF	; 255
    86bc:	68 1a       	sub	r6, r24
    86be:	78 0a       	sbc	r7, r24
    86c0:	88 0a       	sbc	r8, r24
    86c2:	24 9d       	mul	r18, r4
    86c4:	c0 01       	movw	r24, r0
    86c6:	25 9d       	mul	r18, r5
    86c8:	90 0d       	add	r25, r0
    86ca:	11 24       	eor	r1, r1
    86cc:	68 0f       	add	r22, r24
    86ce:	79 1f       	adc	r23, r25
    86d0:	2b 01       	movw	r4, r22
    86d2:	90 e3       	ldi	r25, 0x30	; 48
    86d4:	49 1a       	sub	r4, r25
    86d6:	51 08       	sbc	r5, r1
    86d8:	e7 cf       	rjmp	.-50     	; 0x86a8 <_printf_fn+0x1dc>
    86da:	41 14       	cp	r4, r1
    86dc:	51 04       	cpc	r5, r1
    86de:	09 f4       	brne	.+2      	; 0x86e2 <_printf_fn+0x216>
    86e0:	40 c0       	rjmp	.+128    	; 0x8762 <_printf_fn+0x296>
    86e2:	c2 01       	movw	r24, r4
    86e4:	87 70       	andi	r24, 0x07	; 7
    86e6:	99 27       	eor	r25, r25
    86e8:	89 2b       	or	r24, r25
    86ea:	c9 f5       	brne	.+114    	; 0x875e <_printf_fn+0x292>
    86ec:	63 e0       	ldi	r22, 0x03	; 3
    86ee:	55 94       	asr	r5
    86f0:	47 94       	ror	r4
    86f2:	6a 95       	dec	r22
    86f4:	e1 f7       	brne	.-8      	; 0x86ee <_printf_fn+0x222>
    86f6:	41 14       	cp	r4, r1
    86f8:	51 04       	cpc	r5, r1
    86fa:	99 f1       	breq	.+102    	; 0x8762 <_printf_fn+0x296>
    86fc:	21 c0       	rjmp	.+66     	; 0x8740 <_printf_fn+0x274>
    86fe:	68 36       	cpi	r22, 0x68	; 104
    8700:	29 f4       	brne	.+10     	; 0x870c <_printf_fn+0x240>
    8702:	af ef       	ldi	r26, 0xFF	; 255
    8704:	6a 1a       	sub	r6, r26
    8706:	7a 0a       	sbc	r7, r26
    8708:	8a 0a       	sbc	r8, r26
    870a:	09 c3       	rjmp	.+1554   	; 0x8d1e <_printf_fn+0x852>
    870c:	6c 36       	cpi	r22, 0x6C	; 108
    870e:	09 f0       	breq	.+2      	; 0x8712 <_printf_fn+0x246>
    8710:	06 c3       	rjmp	.+1548   	; 0x8d1e <_printf_fn+0x852>
    8712:	a8 2d       	mov	r26, r8
    8714:	c3 01       	movw	r24, r6
    8716:	01 96       	adiw	r24, 0x01	; 1
    8718:	a1 1d       	adc	r26, r1
    871a:	fc 01       	movw	r30, r24
    871c:	5a 2f       	mov	r21, r26
    871e:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    8722:	6c 36       	cpi	r22, 0x6C	; 108
    8724:	31 f0       	breq	.+12     	; 0x8732 <_printf_fn+0x266>
    8726:	3c 01       	movw	r6, r24
    8728:	8a 2e       	mov	r8, r26
    872a:	54 e0       	ldi	r21, 0x04	; 4
    872c:	45 2e       	mov	r4, r21
    872e:	51 2c       	mov	r5, r1
    8730:	07 c0       	rjmp	.+14     	; 0x8740 <_printf_fn+0x274>
    8732:	b2 e0       	ldi	r27, 0x02	; 2
    8734:	6b 0e       	add	r6, r27
    8736:	71 1c       	adc	r7, r1
    8738:	81 1c       	adc	r8, r1
    873a:	48 e0       	ldi	r20, 0x08	; 8
    873c:	44 2e       	mov	r4, r20
    873e:	51 2c       	mov	r5, r1
    8740:	f3 01       	movw	r30, r6
    8742:	58 2d       	mov	r21, r8
    8744:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    8748:	e6 2f       	mov	r30, r22
    874a:	f0 e0       	ldi	r31, 0x00	; 0
    874c:	a3 96       	adiw	r28, 0x23	; 35
    874e:	ff af       	std	Y+63, r31	; 0x3f
    8750:	ee af       	std	Y+62, r30	; 0x3e
    8752:	a3 97       	sbiw	r28, 0x23	; 35
    8754:	e4 36       	cpi	r30, 0x64	; 100
    8756:	f1 05       	cpc	r31, r1
    8758:	09 f4       	brne	.+2      	; 0x875c <_printf_fn+0x290>
    875a:	e5 c2       	rjmp	.+1482   	; 0x8d26 <_printf_fn+0x85a>
    875c:	06 c0       	rjmp	.+12     	; 0x876a <_printf_fn+0x29e>
    875e:	41 2c       	mov	r4, r1
    8760:	51 2c       	mov	r5, r1
    8762:	a3 96       	adiw	r28, 0x23	; 35
    8764:	1f ae       	std	Y+63, r1	; 0x3f
    8766:	1e ae       	std	Y+62, r1	; 0x3e
    8768:	a3 97       	sbiw	r28, 0x23	; 35
    876a:	31 e0       	ldi	r19, 0x01	; 1
    876c:	20 e0       	ldi	r18, 0x00	; 0
    876e:	a3 96       	adiw	r28, 0x23	; 35
    8770:	4e ad       	ldd	r20, Y+62	; 0x3e
    8772:	5f ad       	ldd	r21, Y+63	; 0x3f
    8774:	a3 97       	sbiw	r28, 0x23	; 35
    8776:	44 34       	cpi	r20, 0x44	; 68
    8778:	51 05       	cpc	r21, r1
    877a:	09 f0       	breq	.+2      	; 0x877e <_printf_fn+0x2b2>
    877c:	30 e0       	ldi	r19, 0x00	; 0
    877e:	83 2f       	mov	r24, r19
    8780:	92 2f       	mov	r25, r18
    8782:	a3 96       	adiw	r28, 0x23	; 35
    8784:	ee ad       	ldd	r30, Y+62	; 0x3e
    8786:	ff ad       	ldd	r31, Y+63	; 0x3f
    8788:	a3 97       	sbiw	r28, 0x23	; 35
    878a:	e2 54       	subi	r30, 0x42	; 66
    878c:	f1 09       	sbc	r31, r1
    878e:	e7 33       	cpi	r30, 0x37	; 55
    8790:	f1 05       	cpc	r31, r1
    8792:	08 f0       	brcs	.+2      	; 0x8796 <_printf_fn+0x2ca>
    8794:	57 c1       	rjmp	.+686    	; 0x8a44 <_printf_fn+0x578>
    8796:	ea 5b       	subi	r30, 0xBA	; 186
    8798:	ff 4f       	sbci	r31, 0xFF	; 255
    879a:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__tablejump2__>
    879e:	32 e0       	ldi	r19, 0x02	; 2
    87a0:	43 2e       	mov	r4, r19
    87a2:	51 2c       	mov	r5, r1
    87a4:	29 2d       	mov	r18, r9
    87a6:	28 72       	andi	r18, 0x28	; 40
    87a8:	28 32       	cpi	r18, 0x28	; 40
    87aa:	11 f4       	brne	.+4      	; 0x87b0 <_printf_fn+0x2e4>
    87ac:	e8 94       	clt
    87ae:	95 f8       	bld	r9, 5
    87b0:	29 2d       	mov	r18, r9
    87b2:	22 72       	andi	r18, 0x22	; 34
    87b4:	22 32       	cpi	r18, 0x22	; 34
    87b6:	11 f4       	brne	.+4      	; 0x87bc <_printf_fn+0x2f0>
    87b8:	e8 94       	clt
    87ba:	95 f8       	bld	r9, 5
    87bc:	29 2d       	mov	r18, r9
    87be:	21 72       	andi	r18, 0x21	; 33
    87c0:	21 32       	cpi	r18, 0x21	; 33
    87c2:	79 f4       	brne	.+30     	; 0x87e2 <_printf_fn+0x316>
    87c4:	a1 96       	adiw	r28, 0x21	; 33
    87c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    87c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    87ca:	a1 97       	sbiw	r28, 0x21	; 33
    87cc:	6f 96       	adiw	r28, 0x1f	; 31
    87ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    87d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    87d2:	6f 97       	sbiw	r28, 0x1f	; 31
    87d4:	ae 17       	cp	r26, r30
    87d6:	bf 07       	cpc	r27, r31
    87d8:	24 f4       	brge	.+8      	; 0x87e2 <_printf_fn+0x316>
    87da:	a1 96       	adiw	r28, 0x21	; 33
    87dc:	ff af       	std	Y+63, r31	; 0x3f
    87de:	ee af       	std	Y+62, r30	; 0x3e
    87e0:	a1 97       	sbiw	r28, 0x21	; 33
    87e2:	29 2d       	mov	r18, r9
    87e4:	23 72       	andi	r18, 0x23	; 35
    87e6:	23 32       	cpi	r18, 0x23	; 35
    87e8:	79 f4       	brne	.+30     	; 0x8808 <_printf_fn+0x33c>
    87ea:	a1 96       	adiw	r28, 0x21	; 33
    87ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    87ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    87f0:	a1 97       	sbiw	r28, 0x21	; 33
    87f2:	6f 96       	adiw	r28, 0x1f	; 31
    87f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    87f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    87f8:	6f 97       	sbiw	r28, 0x1f	; 31
    87fa:	24 17       	cp	r18, r20
    87fc:	35 07       	cpc	r19, r21
    87fe:	24 f4       	brge	.+8      	; 0x8808 <_printf_fn+0x33c>
    8800:	a1 96       	adiw	r28, 0x21	; 33
    8802:	5f af       	std	Y+63, r21	; 0x3f
    8804:	4e af       	std	Y+62, r20	; 0x3e
    8806:	a1 97       	sbiw	r28, 0x21	; 33
    8808:	e8 94       	clt
    880a:	94 f8       	bld	r9, 4
    880c:	e8 94       	clt
    880e:	92 f8       	bld	r9, 2
    8810:	e8 94       	clt
    8812:	96 f8       	bld	r9, 6
    8814:	52 e0       	ldi	r21, 0x02	; 2
    8816:	45 16       	cp	r4, r21
    8818:	51 04       	cpc	r5, r1
    881a:	f9 f4       	brne	.+62     	; 0x885a <_printf_fn+0x38e>
    881c:	51 01       	movw	r10, r2
    881e:	82 e0       	ldi	r24, 0x02	; 2
    8820:	a8 0e       	add	r10, r24
    8822:	b1 1c       	adc	r11, r1
    8824:	d1 01       	movw	r26, r2
    8826:	8d 91       	ld	r24, X+
    8828:	9c 91       	ld	r25, X
    882a:	65 96       	adiw	r28, 0x15	; 21
    882c:	9f af       	std	Y+63, r25	; 0x3f
    882e:	8e af       	std	Y+62, r24	; 0x3e
    8830:	65 97       	sbiw	r28, 0x15	; 21
    8832:	a3 96       	adiw	r28, 0x23	; 35
    8834:	ee ad       	ldd	r30, Y+62	; 0x3e
    8836:	ff ad       	ldd	r31, Y+63	; 0x3f
    8838:	a3 97       	sbiw	r28, 0x23	; 35
    883a:	e4 34       	cpi	r30, 0x44	; 68
    883c:	f1 05       	cpc	r31, r1
    883e:	09 f0       	breq	.+2      	; 0x8842 <_printf_fn+0x376>
    8840:	ac c0       	rjmp	.+344    	; 0x899a <_printf_fn+0x4ce>
    8842:	97 ff       	sbrs	r25, 7
    8844:	a7 c0       	rjmp	.+334    	; 0x8994 <_printf_fn+0x4c8>
    8846:	68 94       	set
    8848:	96 f8       	bld	r9, 6
    884a:	91 95       	neg	r25
    884c:	81 95       	neg	r24
    884e:	91 09       	sbc	r25, r1
    8850:	65 96       	adiw	r28, 0x15	; 21
    8852:	9f af       	std	Y+63, r25	; 0x3f
    8854:	8e af       	std	Y+62, r24	; 0x3e
    8856:	65 97       	sbiw	r28, 0x15	; 21
    8858:	9d c0       	rjmp	.+314    	; 0x8994 <_printf_fn+0x4c8>
    885a:	f4 e0       	ldi	r31, 0x04	; 4
    885c:	4f 16       	cp	r4, r31
    885e:	51 04       	cpc	r5, r1
    8860:	59 f5       	brne	.+86     	; 0x88b8 <_printf_fn+0x3ec>
    8862:	51 01       	movw	r10, r2
    8864:	24 e0       	ldi	r18, 0x04	; 4
    8866:	a2 0e       	add	r10, r18
    8868:	b1 1c       	adc	r11, r1
    886a:	f1 01       	movw	r30, r2
    886c:	80 81       	ld	r24, Z
    886e:	91 81       	ldd	r25, Z+1	; 0x01
    8870:	a2 81       	ldd	r26, Z+2	; 0x02
    8872:	b3 81       	ldd	r27, Z+3	; 0x03
    8874:	2f 96       	adiw	r28, 0x0f	; 15
    8876:	8c af       	std	Y+60, r24	; 0x3c
    8878:	9d af       	std	Y+61, r25	; 0x3d
    887a:	ae af       	std	Y+62, r26	; 0x3e
    887c:	bf af       	std	Y+63, r27	; 0x3f
    887e:	2f 97       	sbiw	r28, 0x0f	; 15
    8880:	a3 96       	adiw	r28, 0x23	; 35
    8882:	2e ad       	ldd	r18, Y+62	; 0x3e
    8884:	3f ad       	ldd	r19, Y+63	; 0x3f
    8886:	a3 97       	sbiw	r28, 0x23	; 35
    8888:	24 34       	cpi	r18, 0x44	; 68
    888a:	31 05       	cpc	r19, r1
    888c:	09 f0       	breq	.+2      	; 0x8890 <_printf_fn+0x3c4>
    888e:	8f c0       	rjmp	.+286    	; 0x89ae <_printf_fn+0x4e2>
    8890:	b7 ff       	sbrs	r27, 7
    8892:	8a c0       	rjmp	.+276    	; 0x89a8 <_printf_fn+0x4dc>
    8894:	68 94       	set
    8896:	96 f8       	bld	r9, 6
    8898:	b0 95       	com	r27
    889a:	a0 95       	com	r26
    889c:	90 95       	com	r25
    889e:	81 95       	neg	r24
    88a0:	9f 4f       	sbci	r25, 0xFF	; 255
    88a2:	af 4f       	sbci	r26, 0xFF	; 255
    88a4:	bf 4f       	sbci	r27, 0xFF	; 255
    88a6:	2f 96       	adiw	r28, 0x0f	; 15
    88a8:	8c af       	std	Y+60, r24	; 0x3c
    88aa:	9d af       	std	Y+61, r25	; 0x3d
    88ac:	ae af       	std	Y+62, r26	; 0x3e
    88ae:	bf af       	std	Y+63, r27	; 0x3f
    88b0:	2f 97       	sbiw	r28, 0x0f	; 15
    88b2:	7a c0       	rjmp	.+244    	; 0x89a8 <_printf_fn+0x4dc>
    88b4:	81 e0       	ldi	r24, 0x01	; 1
    88b6:	90 e0       	ldi	r25, 0x00	; 0
    88b8:	51 01       	movw	r10, r2
    88ba:	38 e0       	ldi	r19, 0x08	; 8
    88bc:	43 16       	cp	r4, r19
    88be:	51 04       	cpc	r5, r1
    88c0:	09 f0       	breq	.+2      	; 0x88c4 <_printf_fn+0x3f8>
    88c2:	7c c0       	rjmp	.+248    	; 0x89bc <_printf_fn+0x4f0>
    88c4:	48 e0       	ldi	r20, 0x08	; 8
    88c6:	a4 0e       	add	r10, r20
    88c8:	b1 1c       	adc	r11, r1
    88ca:	d1 01       	movw	r26, r2
    88cc:	fc 90       	ld	r15, X
    88ce:	f1 01       	movw	r30, r2
    88d0:	01 81       	ldd	r16, Z+1	; 0x01
    88d2:	12 81       	ldd	r17, Z+2	; 0x02
    88d4:	f3 81       	ldd	r31, Z+3	; 0x03
    88d6:	aa 96       	adiw	r28, 0x2a	; 42
    88d8:	ff af       	std	Y+63, r31	; 0x3f
    88da:	aa 97       	sbiw	r28, 0x2a	; 42
    88dc:	f1 01       	movw	r30, r2
    88de:	f4 81       	ldd	r31, Z+4	; 0x04
    88e0:	ab 96       	adiw	r28, 0x2b	; 43
    88e2:	ff af       	std	Y+63, r31	; 0x3f
    88e4:	ab 97       	sbiw	r28, 0x2b	; 43
    88e6:	f1 01       	movw	r30, r2
    88e8:	b5 81       	ldd	r27, Z+5	; 0x05
    88ea:	f6 81       	ldd	r31, Z+6	; 0x06
    88ec:	af 96       	adiw	r28, 0x2f	; 47
    88ee:	ff af       	std	Y+63, r31	; 0x3f
    88f0:	af 97       	sbiw	r28, 0x2f	; 47
    88f2:	f1 01       	movw	r30, r2
    88f4:	37 80       	ldd	r3, Z+7	; 0x07
    88f6:	24 96       	adiw	r28, 0x04	; 4
    88f8:	ff ae       	std	Y+63, r15	; 0x3f
    88fa:	24 97       	sbiw	r28, 0x04	; 4
    88fc:	25 96       	adiw	r28, 0x05	; 5
    88fe:	0f af       	std	Y+63, r16	; 0x3f
    8900:	25 97       	sbiw	r28, 0x05	; 5
    8902:	26 96       	adiw	r28, 0x06	; 6
    8904:	1f af       	std	Y+63, r17	; 0x3f
    8906:	26 97       	sbiw	r28, 0x06	; 6
    8908:	aa 96       	adiw	r28, 0x2a	; 42
    890a:	ff ad       	ldd	r31, Y+63	; 0x3f
    890c:	aa 97       	sbiw	r28, 0x2a	; 42
    890e:	27 96       	adiw	r28, 0x07	; 7
    8910:	ff af       	std	Y+63, r31	; 0x3f
    8912:	27 97       	sbiw	r28, 0x07	; 7
    8914:	ab 96       	adiw	r28, 0x2b	; 43
    8916:	ef ad       	ldd	r30, Y+63	; 0x3f
    8918:	ab 97       	sbiw	r28, 0x2b	; 43
    891a:	28 96       	adiw	r28, 0x08	; 8
    891c:	ef af       	std	Y+63, r30	; 0x3f
    891e:	28 97       	sbiw	r28, 0x08	; 8
    8920:	29 96       	adiw	r28, 0x09	; 9
    8922:	bf af       	std	Y+63, r27	; 0x3f
    8924:	29 97       	sbiw	r28, 0x09	; 9
    8926:	af 96       	adiw	r28, 0x2f	; 47
    8928:	ff ad       	ldd	r31, Y+63	; 0x3f
    892a:	af 97       	sbiw	r28, 0x2f	; 47
    892c:	2a 96       	adiw	r28, 0x0a	; 10
    892e:	ff af       	std	Y+63, r31	; 0x3f
    8930:	2a 97       	sbiw	r28, 0x0a	; 10
    8932:	2b 96       	adiw	r28, 0x0b	; 11
    8934:	3f ae       	std	Y+63, r3	; 0x3f
    8936:	2b 97       	sbiw	r28, 0x0b	; 11
    8938:	89 2b       	or	r24, r25
    893a:	09 f4       	brne	.+2      	; 0x893e <_printf_fn+0x472>
    893c:	4a c0       	rjmp	.+148    	; 0x89d2 <_printf_fn+0x506>
    893e:	2f 2d       	mov	r18, r15
    8940:	30 2f       	mov	r19, r16
    8942:	41 2f       	mov	r20, r17
    8944:	aa 96       	adiw	r28, 0x2a	; 42
    8946:	5f ad       	ldd	r21, Y+63	; 0x3f
    8948:	aa 97       	sbiw	r28, 0x2a	; 42
    894a:	6e 2f       	mov	r22, r30
    894c:	7b 2f       	mov	r23, r27
    894e:	8f 2f       	mov	r24, r31
    8950:	93 2d       	mov	r25, r3
    8952:	a0 e0       	ldi	r26, 0x00	; 0
    8954:	0e 94 2a e7 	call	0x1ce54	; 0x1ce54 <__cmpdi2_s8>
    8958:	e4 f5       	brge	.+120    	; 0x89d2 <_printf_fn+0x506>
    895a:	68 94       	set
    895c:	96 f8       	bld	r9, 6
    895e:	0e 94 dc e6 	call	0x1cdb8	; 0x1cdb8 <__negdi2>
    8962:	24 96       	adiw	r28, 0x04	; 4
    8964:	2f af       	std	Y+63, r18	; 0x3f
    8966:	24 97       	sbiw	r28, 0x04	; 4
    8968:	25 96       	adiw	r28, 0x05	; 5
    896a:	3f af       	std	Y+63, r19	; 0x3f
    896c:	25 97       	sbiw	r28, 0x05	; 5
    896e:	26 96       	adiw	r28, 0x06	; 6
    8970:	4f af       	std	Y+63, r20	; 0x3f
    8972:	26 97       	sbiw	r28, 0x06	; 6
    8974:	27 96       	adiw	r28, 0x07	; 7
    8976:	5f af       	std	Y+63, r21	; 0x3f
    8978:	27 97       	sbiw	r28, 0x07	; 7
    897a:	28 96       	adiw	r28, 0x08	; 8
    897c:	6f af       	std	Y+63, r22	; 0x3f
    897e:	28 97       	sbiw	r28, 0x08	; 8
    8980:	29 96       	adiw	r28, 0x09	; 9
    8982:	7f af       	std	Y+63, r23	; 0x3f
    8984:	29 97       	sbiw	r28, 0x09	; 9
    8986:	2a 96       	adiw	r28, 0x0a	; 10
    8988:	8f af       	std	Y+63, r24	; 0x3f
    898a:	2a 97       	sbiw	r28, 0x0a	; 10
    898c:	2b 96       	adiw	r28, 0x0b	; 11
    898e:	9f af       	std	Y+63, r25	; 0x3f
    8990:	2b 97       	sbiw	r28, 0x0b	; 11
    8992:	1f c0       	rjmp	.+62     	; 0x89d2 <_printf_fn+0x506>
    8994:	22 e0       	ldi	r18, 0x02	; 2
    8996:	42 2e       	mov	r4, r18
    8998:	51 2c       	mov	r5, r1
    899a:	6c 96       	adiw	r28, 0x1c	; 28
    899c:	8f ad       	ldd	r24, Y+63	; 0x3f
    899e:	6c 97       	sbiw	r28, 0x1c	; 28
    89a0:	6d 96       	adiw	r28, 0x1d	; 29
    89a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    89a4:	6d 97       	sbiw	r28, 0x1d	; 29
    89a6:	1b c0       	rjmp	.+54     	; 0x89de <_printf_fn+0x512>
    89a8:	94 e0       	ldi	r25, 0x04	; 4
    89aa:	49 2e       	mov	r4, r25
    89ac:	51 2c       	mov	r5, r1
    89ae:	6a 96       	adiw	r28, 0x1a	; 26
    89b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    89b2:	6a 97       	sbiw	r28, 0x1a	; 26
    89b4:	6b 96       	adiw	r28, 0x1b	; 27
    89b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    89b8:	6b 97       	sbiw	r28, 0x1b	; 27
    89ba:	11 c0       	rjmp	.+34     	; 0x89de <_printf_fn+0x512>
    89bc:	66 96       	adiw	r28, 0x16	; 22
    89be:	8f ad       	ldd	r24, Y+63	; 0x3f
    89c0:	66 97       	sbiw	r28, 0x16	; 22
    89c2:	67 96       	adiw	r28, 0x17	; 23
    89c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    89c6:	67 97       	sbiw	r28, 0x17	; 23
    89c8:	a3 96       	adiw	r28, 0x23	; 35
    89ca:	1f ae       	std	Y+63, r1	; 0x3f
    89cc:	1e ae       	std	Y+62, r1	; 0x3e
    89ce:	a3 97       	sbiw	r28, 0x23	; 35
    89d0:	06 c0       	rjmp	.+12     	; 0x89de <_printf_fn+0x512>
    89d2:	68 96       	adiw	r28, 0x18	; 24
    89d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    89d6:	68 97       	sbiw	r28, 0x18	; 24
    89d8:	69 96       	adiw	r28, 0x19	; 25
    89da:	9f ad       	ldd	r25, Y+63	; 0x3f
    89dc:	69 97       	sbiw	r28, 0x19	; 25
    89de:	2f ef       	ldi	r18, 0xFF	; 255
    89e0:	62 1a       	sub	r6, r18
    89e2:	72 0a       	sbc	r7, r18
    89e4:	82 0a       	sbc	r8, r18
    89e6:	15 01       	movw	r2, r10
    89e8:	33 c0       	rjmp	.+102    	; 0x8a50 <_printf_fn+0x584>
    89ea:	91 fc       	sbrc	r9, 1
    89ec:	08 c0       	rjmp	.+16     	; 0x89fe <_printf_fn+0x532>
    89ee:	68 94       	set
    89f0:	91 f8       	bld	r9, 1
    89f2:	46 e0       	ldi	r20, 0x06	; 6
    89f4:	50 e0       	ldi	r21, 0x00	; 0
    89f6:	a1 96       	adiw	r28, 0x21	; 33
    89f8:	5f af       	std	Y+63, r21	; 0x3f
    89fa:	4e af       	std	Y+62, r20	; 0x3e
    89fc:	a1 97       	sbiw	r28, 0x21	; 33
    89fe:	d1 01       	movw	r26, r2
    8a00:	8d 91       	ld	r24, X+
    8a02:	9d 91       	ld	r25, X+
    8a04:	0d 90       	ld	r0, X+
    8a06:	bc 91       	ld	r27, X
    8a08:	a0 2d       	mov	r26, r0
    8a0a:	a9 96       	adiw	r28, 0x29	; 41
    8a0c:	8c af       	std	Y+60, r24	; 0x3c
    8a0e:	9d af       	std	Y+61, r25	; 0x3d
    8a10:	ae af       	std	Y+62, r26	; 0x3e
    8a12:	bf af       	std	Y+63, r27	; 0x3f
    8a14:	a9 97       	sbiw	r28, 0x29	; 41
    8a16:	bf ef       	ldi	r27, 0xFF	; 255
    8a18:	6b 1a       	sub	r6, r27
    8a1a:	7b 0a       	sbc	r7, r27
    8a1c:	8b 0a       	sbc	r8, r27
    8a1e:	f1 01       	movw	r30, r2
    8a20:	34 96       	adiw	r30, 0x04	; 4
    8a22:	1f 01       	movw	r2, r30
    8a24:	0f c0       	rjmp	.+30     	; 0x8a44 <_printf_fn+0x578>
    8a26:	ff ef       	ldi	r31, 0xFF	; 255
    8a28:	6f 1a       	sub	r6, r31
    8a2a:	7f 0a       	sbc	r7, r31
    8a2c:	8f 0a       	sbc	r8, r31
    8a2e:	c5 c0       	rjmp	.+394    	; 0x8bba <_printf_fn+0x6ee>
    8a30:	2f ef       	ldi	r18, 0xFF	; 255
    8a32:	62 1a       	sub	r6, r18
    8a34:	72 0a       	sbc	r7, r18
    8a36:	82 0a       	sbc	r8, r18
    8a38:	11 c1       	rjmp	.+546    	; 0x8c5c <_printf_fn+0x790>
    8a3a:	3f ef       	ldi	r19, 0xFF	; 255
    8a3c:	63 1a       	sub	r6, r19
    8a3e:	73 0a       	sbc	r7, r19
    8a40:	83 0a       	sbc	r8, r19
    8a42:	c8 c0       	rjmp	.+400    	; 0x8bd4 <_printf_fn+0x708>
    8a44:	66 96       	adiw	r28, 0x16	; 22
    8a46:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a48:	66 97       	sbiw	r28, 0x16	; 22
    8a4a:	67 96       	adiw	r28, 0x17	; 23
    8a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a4e:	67 97       	sbiw	r28, 0x17	; 23
    8a50:	a3 96       	adiw	r28, 0x23	; 35
    8a52:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a54:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a56:	a3 97       	sbiw	r28, 0x23	; 35
    8a58:	e2 54       	subi	r30, 0x42	; 66
    8a5a:	f1 09       	sbc	r31, r1
    8a5c:	e7 33       	cpi	r30, 0x37	; 55
    8a5e:	f1 05       	cpc	r31, r1
    8a60:	08 f0       	brcs	.+2      	; 0x8a64 <_printf_fn+0x598>
    8a62:	56 c1       	rjmp	.+684    	; 0x8d10 <_printf_fn+0x844>
    8a64:	e3 58       	subi	r30, 0x83	; 131
    8a66:	ff 4f       	sbci	r31, 0xFF	; 255
    8a68:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__tablejump2__>
    8a6c:	e8 94       	clt
    8a6e:	94 f8       	bld	r9, 4
    8a70:	e8 94       	clt
    8a72:	92 f8       	bld	r9, 2
    8a74:	a9 2c       	mov	r10, r9
    8a76:	b1 2c       	mov	r11, r1
    8a78:	a1 96       	adiw	r28, 0x21	; 33
    8a7a:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a7c:	df ac       	ldd	r13, Y+63	; 0x3f
    8a7e:	a1 97       	sbiw	r28, 0x21	; 33
    8a80:	6f 96       	adiw	r28, 0x1f	; 31
    8a82:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a84:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a86:	6f 97       	sbiw	r28, 0x1f	; 31
    8a88:	0a e0       	ldi	r16, 0x0A	; 10
    8a8a:	10 e0       	ldi	r17, 0x00	; 0
    8a8c:	19 c0       	rjmp	.+50     	; 0x8ac0 <_printf_fn+0x5f4>
    8a8e:	a9 2c       	mov	r10, r9
    8a90:	b1 2c       	mov	r11, r1
    8a92:	a1 96       	adiw	r28, 0x21	; 33
    8a94:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a96:	df ac       	ldd	r13, Y+63	; 0x3f
    8a98:	a1 97       	sbiw	r28, 0x21	; 33
    8a9a:	6f 96       	adiw	r28, 0x1f	; 31
    8a9c:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a9e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8aa0:	6f 97       	sbiw	r28, 0x1f	; 31
    8aa2:	02 e0       	ldi	r16, 0x02	; 2
    8aa4:	10 e0       	ldi	r17, 0x00	; 0
    8aa6:	0c c0       	rjmp	.+24     	; 0x8ac0 <_printf_fn+0x5f4>
    8aa8:	a9 2c       	mov	r10, r9
    8aaa:	b1 2c       	mov	r11, r1
    8aac:	a1 96       	adiw	r28, 0x21	; 33
    8aae:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ab0:	df ac       	ldd	r13, Y+63	; 0x3f
    8ab2:	a1 97       	sbiw	r28, 0x21	; 33
    8ab4:	6f 96       	adiw	r28, 0x1f	; 31
    8ab6:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ab8:	ff ac       	ldd	r15, Y+63	; 0x3f
    8aba:	6f 97       	sbiw	r28, 0x1f	; 31
    8abc:	08 e0       	ldi	r16, 0x08	; 8
    8abe:	10 e0       	ldi	r17, 0x00	; 0
    8ac0:	22 e4       	ldi	r18, 0x42	; 66
    8ac2:	30 e0       	ldi	r19, 0x00	; 0
    8ac4:	ae 01       	movw	r20, r28
    8ac6:	4f 5f       	subi	r20, 0xFF	; 255
    8ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    8aca:	b2 01       	movw	r22, r4
    8acc:	7d d9       	rcall	.-3334   	; 0x7dc8 <p_ntoa>
    8ace:	34 c0       	rjmp	.+104    	; 0x8b38 <_printf_fn+0x66c>
    8ad0:	a9 2c       	mov	r10, r9
    8ad2:	b1 2c       	mov	r11, r1
    8ad4:	a1 96       	adiw	r28, 0x21	; 33
    8ad6:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ad8:	df ac       	ldd	r13, Y+63	; 0x3f
    8ada:	a1 97       	sbiw	r28, 0x21	; 33
    8adc:	6f 96       	adiw	r28, 0x1f	; 31
    8ade:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ae0:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ae2:	6f 97       	sbiw	r28, 0x1f	; 31
    8ae4:	00 e1       	ldi	r16, 0x10	; 16
    8ae6:	10 e0       	ldi	r17, 0x00	; 0
    8ae8:	22 e4       	ldi	r18, 0x42	; 66
    8aea:	30 e0       	ldi	r19, 0x00	; 0
    8aec:	ae 01       	movw	r20, r28
    8aee:	4f 5f       	subi	r20, 0xFF	; 255
    8af0:	5f 4f       	sbci	r21, 0xFF	; 255
    8af2:	b2 01       	movw	r22, r4
    8af4:	69 d9       	rcall	.-3374   	; 0x7dc8 <p_ntoa>
    8af6:	6c 01       	movw	r12, r24
    8af8:	a3 96       	adiw	r28, 0x23	; 35
    8afa:	6e ad       	ldd	r22, Y+62	; 0x3e
    8afc:	7f ad       	ldd	r23, Y+63	; 0x3f
    8afe:	a3 97       	sbiw	r28, 0x23	; 35
    8b00:	67 7f       	andi	r22, 0xF7	; 247
    8b02:	60 35       	cpi	r22, 0x50	; 80
    8b04:	71 05       	cpc	r23, r1
    8b06:	09 f0       	breq	.+2      	; 0x8b0a <_printf_fn+0x63e>
    8b08:	3f c0       	rjmp	.+126    	; 0x8b88 <_printf_fn+0x6bc>
    8b0a:	3a c0       	rjmp	.+116    	; 0x8b80 <_printf_fn+0x6b4>
    8b0c:	c9 2c       	mov	r12, r9
    8b0e:	d1 2c       	mov	r13, r1
    8b10:	a1 96       	adiw	r28, 0x21	; 33
    8b12:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b14:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b16:	a1 97       	sbiw	r28, 0x21	; 33
    8b18:	6f 96       	adiw	r28, 0x1f	; 31
    8b1a:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b1c:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b1e:	6f 97       	sbiw	r28, 0x1f	; 31
    8b20:	22 e4       	ldi	r18, 0x42	; 66
    8b22:	30 e0       	ldi	r19, 0x00	; 0
    8b24:	ae 01       	movw	r20, r28
    8b26:	4f 5f       	subi	r20, 0xFF	; 255
    8b28:	5f 4f       	sbci	r21, 0xFF	; 255
    8b2a:	a9 96       	adiw	r28, 0x29	; 41
    8b2c:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b2e:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b30:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b32:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b34:	a9 97       	sbiw	r28, 0x29	; 41
    8b36:	9d d9       	rcall	.-3270   	; 0x7e72 <p_ftoa>
    8b38:	93 fa       	bst	r9, 3
    8b3a:	00 27       	eor	r16, r16
    8b3c:	00 f9       	bld	r16, 0
    8b3e:	10 e0       	ldi	r17, 0x00	; 0
    8b40:	9c 01       	movw	r18, r24
    8b42:	27 c0       	rjmp	.+78     	; 0x8b92 <_printf_fn+0x6c6>
    8b44:	c9 2c       	mov	r12, r9
    8b46:	d1 2c       	mov	r13, r1
    8b48:	a1 96       	adiw	r28, 0x21	; 33
    8b4a:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b4c:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b4e:	a1 97       	sbiw	r28, 0x21	; 33
    8b50:	6f 96       	adiw	r28, 0x1f	; 31
    8b52:	0e ad       	ldd	r16, Y+62	; 0x3e
    8b54:	1f ad       	ldd	r17, Y+63	; 0x3f
    8b56:	6f 97       	sbiw	r28, 0x1f	; 31
    8b58:	22 e4       	ldi	r18, 0x42	; 66
    8b5a:	30 e0       	ldi	r19, 0x00	; 0
    8b5c:	ae 01       	movw	r20, r28
    8b5e:	4f 5f       	subi	r20, 0xFF	; 255
    8b60:	5f 4f       	sbci	r21, 0xFF	; 255
    8b62:	a9 96       	adiw	r28, 0x29	; 41
    8b64:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b66:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b68:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b6c:	a9 97       	sbiw	r28, 0x29	; 41
    8b6e:	88 da       	rcall	.-2800   	; 0x8080 <p_etoa>
    8b70:	6c 01       	movw	r12, r24
    8b72:	a3 96       	adiw	r28, 0x23	; 35
    8b74:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b76:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b78:	a3 97       	sbiw	r28, 0x23	; 35
    8b7a:	45 34       	cpi	r20, 0x45	; 69
    8b7c:	51 05       	cpc	r21, r1
    8b7e:	21 f4       	brne	.+8      	; 0x8b88 <_printf_fn+0x6bc>
    8b80:	ce 01       	movw	r24, r28
    8b82:	01 96       	adiw	r24, 0x01	; 1
    8b84:	0e 94 99 31 	call	0x6332	; 0x6332 <strupper>
    8b88:	93 fa       	bst	r9, 3
    8b8a:	00 27       	eor	r16, r16
    8b8c:	00 f9       	bld	r16, 0
    8b8e:	10 e0       	ldi	r17, 0x00	; 0
    8b90:	96 01       	movw	r18, r12
    8b92:	6f 96       	adiw	r28, 0x1f	; 31
    8b94:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b96:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b98:	6f 97       	sbiw	r28, 0x1f	; 31
    8b9a:	be 01       	movw	r22, r28
    8b9c:	6f 5f       	subi	r22, 0xFF	; 255
    8b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    8ba0:	a5 96       	adiw	r28, 0x25	; 37
    8ba2:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ba4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ba6:	a5 97       	sbiw	r28, 0x25	; 37
    8ba8:	d7 db       	rcall	.-2130   	; 0x8358 <_puts_pad>
    8baa:	b6 c0       	rjmp	.+364    	; 0x8d18 <_printf_fn+0x84c>
    8bac:	a3 96       	adiw	r28, 0x23	; 35
    8bae:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bb2:	a3 97       	sbiw	r28, 0x23	; 35
    8bb4:	83 37       	cpi	r24, 0x73	; 115
    8bb6:	91 05       	cpc	r25, r1
    8bb8:	69 f4       	brne	.+26     	; 0x8bd4 <_printf_fn+0x708>
    8bba:	61 01       	movw	r12, r2
    8bbc:	92 e0       	ldi	r25, 0x02	; 2
    8bbe:	c9 0e       	add	r12, r25
    8bc0:	d1 1c       	adc	r13, r1
    8bc2:	d1 01       	movw	r26, r2
    8bc4:	6d 91       	ld	r22, X+
    8bc6:	7c 91       	ld	r23, X
    8bc8:	61 15       	cp	r22, r1
    8bca:	71 05       	cpc	r23, r1
    8bcc:	91 f4       	brne	.+36     	; 0x8bf2 <_printf_fn+0x726>
    8bce:	6a e1       	ldi	r22, 0x1A	; 26
    8bd0:	74 e0       	ldi	r23, 0x04	; 4
    8bd2:	0f c0       	rjmp	.+30     	; 0x8bf2 <_printf_fn+0x726>
    8bd4:	61 01       	movw	r12, r2
    8bd6:	b2 e0       	ldi	r27, 0x02	; 2
    8bd8:	cb 0e       	add	r12, r27
    8bda:	d1 1c       	adc	r13, r1
    8bdc:	f1 01       	movw	r30, r2
    8bde:	80 81       	ld	r24, Z
    8be0:	60 96       	adiw	r28, 0x10	; 16
    8be2:	8f af       	std	Y+63, r24	; 0x3f
    8be4:	60 97       	sbiw	r28, 0x10	; 16
    8be6:	61 96       	adiw	r28, 0x11	; 17
    8be8:	1f ae       	std	Y+63, r1	; 0x3f
    8bea:	61 97       	sbiw	r28, 0x11	; 17
    8bec:	be 01       	movw	r22, r28
    8bee:	61 5b       	subi	r22, 0xB1	; 177
    8bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    8bf2:	fb 01       	movw	r30, r22
    8bf4:	01 90       	ld	r0, Z+
    8bf6:	00 20       	and	r0, r0
    8bf8:	e9 f7       	brne	.-6      	; 0x8bf4 <_printf_fn+0x728>
    8bfa:	31 97       	sbiw	r30, 0x01	; 1
    8bfc:	e6 1b       	sub	r30, r22
    8bfe:	f7 0b       	sbc	r31, r23
    8c00:	a1 96       	adiw	r28, 0x21	; 33
    8c02:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c04:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c06:	a1 97       	sbiw	r28, 0x21	; 33
    8c08:	23 2b       	or	r18, r19
    8c0a:	21 f4       	brne	.+8      	; 0x8c14 <_printf_fn+0x748>
    8c0c:	a1 96       	adiw	r28, 0x21	; 33
    8c0e:	ff af       	std	Y+63, r31	; 0x3f
    8c10:	ee af       	std	Y+62, r30	; 0x3e
    8c12:	a1 97       	sbiw	r28, 0x21	; 33
    8c14:	6f 96       	adiw	r28, 0x1f	; 31
    8c16:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c18:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c1a:	6f 97       	sbiw	r28, 0x1f	; 31
    8c1c:	a1 96       	adiw	r28, 0x21	; 33
    8c1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c20:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c22:	a1 97       	sbiw	r28, 0x21	; 33
    8c24:	48 17       	cp	r20, r24
    8c26:	59 07       	cpc	r21, r25
    8c28:	3c f4       	brge	.+14     	; 0x8c38 <_printf_fn+0x76c>
    8c2a:	41 15       	cp	r20, r1
    8c2c:	51 05       	cpc	r21, r1
    8c2e:	21 f0       	breq	.+8      	; 0x8c38 <_printf_fn+0x76c>
    8c30:	a1 96       	adiw	r28, 0x21	; 33
    8c32:	5f af       	std	Y+63, r21	; 0x3f
    8c34:	4e af       	std	Y+62, r20	; 0x3e
    8c36:	a1 97       	sbiw	r28, 0x21	; 33
    8c38:	93 fa       	bst	r9, 3
    8c3a:	00 27       	eor	r16, r16
    8c3c:	00 f9       	bld	r16, 0
    8c3e:	10 e0       	ldi	r17, 0x00	; 0
    8c40:	a1 96       	adiw	r28, 0x21	; 33
    8c42:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c44:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c46:	a1 97       	sbiw	r28, 0x21	; 33
    8c48:	6f 96       	adiw	r28, 0x1f	; 31
    8c4a:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c4c:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c4e:	6f 97       	sbiw	r28, 0x1f	; 31
    8c50:	a5 96       	adiw	r28, 0x25	; 37
    8c52:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c54:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c56:	a5 97       	sbiw	r28, 0x25	; 37
    8c58:	7f db       	rcall	.-2306   	; 0x8358 <_puts_pad>
    8c5a:	45 c0       	rjmp	.+138    	; 0x8ce6 <_printf_fn+0x81a>
    8c5c:	61 01       	movw	r12, r2
    8c5e:	92 e0       	ldi	r25, 0x02	; 2
    8c60:	c9 0e       	add	r12, r25
    8c62:	d1 1c       	adc	r13, r1
    8c64:	d1 01       	movw	r26, r2
    8c66:	2d 90       	ld	r2, X+
    8c68:	3c 90       	ld	r3, X
    8c6a:	41 2c       	mov	r4, r1
    8c6c:	21 14       	cp	r2, r1
    8c6e:	31 04       	cpc	r3, r1
    8c70:	41 04       	cpc	r4, r1
    8c72:	29 f4       	brne	.+10     	; 0x8c7e <_printf_fn+0x7b2>
    8c74:	ae 96       	adiw	r28, 0x2e	; 46
    8c76:	2d ac       	ldd	r2, Y+61	; 0x3d
    8c78:	3e ac       	ldd	r3, Y+62	; 0x3e
    8c7a:	4f ac       	ldd	r4, Y+63	; 0x3f
    8c7c:	ae 97       	sbiw	r28, 0x2e	; 46
    8c7e:	84 2d       	mov	r24, r4
    8c80:	b1 01       	movw	r22, r2
    8c82:	08 dc       	rcall	.-2032   	; 0x8494 <strlen_X>
    8c84:	a1 96       	adiw	r28, 0x21	; 33
    8c86:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c88:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c8a:	a1 97       	sbiw	r28, 0x21	; 33
    8c8c:	ef 2b       	or	r30, r31
    8c8e:	31 f4       	brne	.+12     	; 0x8c9c <_printf_fn+0x7d0>
    8c90:	a0 96       	adiw	r28, 0x20	; 32
    8c92:	8f af       	std	Y+63, r24	; 0x3f
    8c94:	a0 97       	sbiw	r28, 0x20	; 32
    8c96:	a1 96       	adiw	r28, 0x21	; 33
    8c98:	9f af       	std	Y+63, r25	; 0x3f
    8c9a:	a1 97       	sbiw	r28, 0x21	; 33
    8c9c:	6f 96       	adiw	r28, 0x1f	; 31
    8c9e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8ca0:	3f ad       	ldd	r19, Y+63	; 0x3f
    8ca2:	6f 97       	sbiw	r28, 0x1f	; 31
    8ca4:	a1 96       	adiw	r28, 0x21	; 33
    8ca6:	4e ad       	ldd	r20, Y+62	; 0x3e
    8ca8:	5f ad       	ldd	r21, Y+63	; 0x3f
    8caa:	a1 97       	sbiw	r28, 0x21	; 33
    8cac:	24 17       	cp	r18, r20
    8cae:	35 07       	cpc	r19, r21
    8cb0:	3c f4       	brge	.+14     	; 0x8cc0 <_printf_fn+0x7f4>
    8cb2:	21 15       	cp	r18, r1
    8cb4:	31 05       	cpc	r19, r1
    8cb6:	21 f0       	breq	.+8      	; 0x8cc0 <_printf_fn+0x7f4>
    8cb8:	a1 96       	adiw	r28, 0x21	; 33
    8cba:	3f af       	std	Y+63, r19	; 0x3f
    8cbc:	2e af       	std	Y+62, r18	; 0x3e
    8cbe:	a1 97       	sbiw	r28, 0x21	; 33
    8cc0:	93 fa       	bst	r9, 3
    8cc2:	ee 24       	eor	r14, r14
    8cc4:	e0 f8       	bld	r14, 0
    8cc6:	f1 2c       	mov	r15, r1
    8cc8:	a1 96       	adiw	r28, 0x21	; 33
    8cca:	0e ad       	ldd	r16, Y+62	; 0x3e
    8ccc:	1f ad       	ldd	r17, Y+63	; 0x3f
    8cce:	a1 97       	sbiw	r28, 0x21	; 33
    8cd0:	6f 96       	adiw	r28, 0x1f	; 31
    8cd2:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cd4:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cd6:	6f 97       	sbiw	r28, 0x1f	; 31
    8cd8:	64 2d       	mov	r22, r4
    8cda:	a1 01       	movw	r20, r2
    8cdc:	a5 96       	adiw	r28, 0x25	; 37
    8cde:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ce0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ce2:	a5 97       	sbiw	r28, 0x25	; 37
    8ce4:	7b db       	rcall	.-2314   	; 0x83dc <_puts_pad_X>
    8ce6:	16 01       	movw	r2, r12
    8ce8:	17 c0       	rjmp	.+46     	; 0x8d18 <_printf_fn+0x84c>
    8cea:	f6 01       	movw	r30, r12
    8cec:	5e 2d       	mov	r21, r14
    8cee:	0e 94 23 e7 	call	0x1ce46	; 0x1ce46 <__xload_1>
    8cf2:	66 23       	and	r22, r22
    8cf4:	89 f0       	breq	.+34     	; 0x8d18 <_printf_fn+0x84c>
    8cf6:	5f ef       	ldi	r21, 0xFF	; 255
    8cf8:	c5 1a       	sub	r12, r21
    8cfa:	d5 0a       	sbc	r13, r21
    8cfc:	e5 0a       	sbc	r14, r21
    8cfe:	a5 96       	adiw	r28, 0x25	; 37
    8d00:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d02:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d04:	a5 97       	sbiw	r28, 0x25	; 37
    8d06:	ed 91       	ld	r30, X+
    8d08:	fc 91       	ld	r31, X
    8d0a:	11 97       	sbiw	r26, 0x01	; 1
    8d0c:	cd 01       	movw	r24, r26
    8d0e:	09 95       	icall
    8d10:	6c 14       	cp	r6, r12
    8d12:	7d 04       	cpc	r7, r13
    8d14:	8e 04       	cpc	r8, r14
    8d16:	48 f7       	brcc	.-46     	; 0x8cea <_printf_fn+0x81e>
    8d18:	e8 2c       	mov	r14, r8
    8d1a:	63 01       	movw	r12, r6
    8d1c:	0f cc       	rjmp	.-2018   	; 0x853c <_printf_fn+0x70>
    8d1e:	82 e0       	ldi	r24, 0x02	; 2
    8d20:	48 2e       	mov	r4, r24
    8d22:	51 2c       	mov	r5, r1
    8d24:	0d cd       	rjmp	.-1510   	; 0x8740 <_printf_fn+0x274>
    8d26:	f2 e0       	ldi	r31, 0x02	; 2
    8d28:	4f 16       	cp	r4, r31
    8d2a:	51 04       	cpc	r5, r1
    8d2c:	61 f4       	brne	.+24     	; 0x8d46 <_printf_fn+0x87a>
    8d2e:	51 01       	movw	r10, r2
    8d30:	b2 e0       	ldi	r27, 0x02	; 2
    8d32:	ab 0e       	add	r10, r27
    8d34:	b1 1c       	adc	r11, r1
    8d36:	f1 01       	movw	r30, r2
    8d38:	80 81       	ld	r24, Z
    8d3a:	91 81       	ldd	r25, Z+1	; 0x01
    8d3c:	65 96       	adiw	r28, 0x15	; 21
    8d3e:	9f af       	std	Y+63, r25	; 0x3f
    8d40:	8e af       	std	Y+62, r24	; 0x3e
    8d42:	65 97       	sbiw	r28, 0x15	; 21
    8d44:	7e cd       	rjmp	.-1284   	; 0x8842 <_printf_fn+0x376>
    8d46:	f4 e0       	ldi	r31, 0x04	; 4
    8d48:	4f 16       	cp	r4, r31
    8d4a:	51 04       	cpc	r5, r1
    8d4c:	09 f0       	breq	.+2      	; 0x8d50 <_printf_fn+0x884>
    8d4e:	b2 cd       	rjmp	.-1180   	; 0x88b4 <_printf_fn+0x3e8>
    8d50:	51 01       	movw	r10, r2
    8d52:	24 e0       	ldi	r18, 0x04	; 4
    8d54:	a2 0e       	add	r10, r18
    8d56:	b1 1c       	adc	r11, r1
    8d58:	f1 01       	movw	r30, r2
    8d5a:	80 81       	ld	r24, Z
    8d5c:	91 81       	ldd	r25, Z+1	; 0x01
    8d5e:	a2 81       	ldd	r26, Z+2	; 0x02
    8d60:	b3 81       	ldd	r27, Z+3	; 0x03
    8d62:	2f 96       	adiw	r28, 0x0f	; 15
    8d64:	8c af       	std	Y+60, r24	; 0x3c
    8d66:	9d af       	std	Y+61, r25	; 0x3d
    8d68:	ae af       	std	Y+62, r26	; 0x3e
    8d6a:	bf af       	std	Y+63, r27	; 0x3f
    8d6c:	2f 97       	sbiw	r28, 0x0f	; 15
    8d6e:	90 cd       	rjmp	.-1248   	; 0x8890 <_printf_fn+0x3c4>
    8d70:	c2 59       	subi	r28, 0x92	; 146
    8d72:	df 4f       	sbci	r29, 0xFF	; 255
    8d74:	e2 e1       	ldi	r30, 0x12	; 18
    8d76:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00008d7a <vsnprintf_P>:
    8d7a:	a8 e0       	ldi	r26, 0x08	; 8
    8d7c:	b0 e0       	ldi	r27, 0x00	; 0
    8d7e:	e3 ec       	ldi	r30, 0xC3	; 195
    8d80:	f6 e4       	ldi	r31, 0x46	; 70
    8d82:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
    8d86:	7c 01       	movw	r14, r24
    8d88:	cb 01       	movw	r24, r22
    8d8a:	64 2f       	mov	r22, r20
    8d8c:	a9 01       	movw	r20, r18
    8d8e:	98 01       	movw	r18, r16
    8d90:	f7 01       	movw	r30, r14
    8d92:	10 82       	st	Z, r1
    8d94:	eb e1       	ldi	r30, 0x1B	; 27
    8d96:	fe e3       	ldi	r31, 0x3E	; 62
    8d98:	fa 83       	std	Y+2, r31	; 0x02
    8d9a:	e9 83       	std	Y+1, r30	; 0x01
    8d9c:	9e 83       	std	Y+6, r25	; 0x06
    8d9e:	8d 83       	std	Y+5, r24	; 0x05
    8da0:	18 86       	std	Y+8, r1	; 0x08
    8da2:	1f 82       	std	Y+7, r1	; 0x07
    8da4:	fc 82       	std	Y+4, r15	; 0x04
    8da6:	eb 82       	std	Y+3, r14	; 0x03
    8da8:	ce 01       	movw	r24, r28
    8daa:	01 96       	adiw	r24, 0x01	; 1
    8dac:	8f db       	rcall	.-2274   	; 0x84cc <_printf_fn>
    8dae:	f7 01       	movw	r30, r14
    8db0:	01 90       	ld	r0, Z+
    8db2:	00 20       	and	r0, r0
    8db4:	e9 f7       	brne	.-6      	; 0x8db0 <vsnprintf_P+0x36>
    8db6:	cf 01       	movw	r24, r30
    8db8:	01 97       	sbiw	r24, 0x01	; 1
    8dba:	8e 19       	sub	r24, r14
    8dbc:	9f 09       	sbc	r25, r15
    8dbe:	28 96       	adiw	r28, 0x08	; 8
    8dc0:	e6 e0       	ldi	r30, 0x06	; 6
    8dc2:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00008dc6 <snprintf_P>:
    8dc6:	a0 e0       	ldi	r26, 0x00	; 0
    8dc8:	b0 e0       	ldi	r27, 0x00	; 0
    8dca:	e9 ee       	ldi	r30, 0xE9	; 233
    8dcc:	f6 e4       	ldi	r31, 0x46	; 70
    8dce:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    8dd2:	8e 01       	movw	r16, r28
    8dd4:	02 5f       	subi	r16, 0xF2	; 242
    8dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    8dd8:	2b 85       	ldd	r18, Y+11	; 0x0b
    8dda:	3c 85       	ldd	r19, Y+12	; 0x0c
    8ddc:	4d 85       	ldd	r20, Y+13	; 0x0d
    8dde:	69 85       	ldd	r22, Y+9	; 0x09
    8de0:	7a 85       	ldd	r23, Y+10	; 0x0a
    8de2:	8f 81       	ldd	r24, Y+7	; 0x07
    8de4:	98 85       	ldd	r25, Y+8	; 0x08
    8de6:	c9 df       	rcall	.-110    	; 0x8d7a <vsnprintf_P>
    8de8:	e4 e0       	ldi	r30, 0x04	; 4
    8dea:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00008dee <sprintf_P>:
    8dee:	a0 e0       	ldi	r26, 0x00	; 0
    8df0:	b0 e0       	ldi	r27, 0x00	; 0
    8df2:	ed ef       	ldi	r30, 0xFD	; 253
    8df4:	f6 e4       	ldi	r31, 0x46	; 70
    8df6:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    8dfa:	8e 01       	movw	r16, r28
    8dfc:	04 5f       	subi	r16, 0xF4	; 244
    8dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    8e00:	29 85       	ldd	r18, Y+9	; 0x09
    8e02:	3a 85       	ldd	r19, Y+10	; 0x0a
    8e04:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e06:	60 e0       	ldi	r22, 0x00	; 0
    8e08:	74 e0       	ldi	r23, 0x04	; 4
    8e0a:	8f 81       	ldd	r24, Y+7	; 0x07
    8e0c:	98 85       	ldd	r25, Y+8	; 0x08
    8e0e:	b5 df       	rcall	.-150    	; 0x8d7a <vsnprintf_P>
    8e10:	e4 e0       	ldi	r30, 0x04	; 4
    8e12:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00008e16 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8e16:	a8 e0       	ldi	r26, 0x08	; 8
    8e18:	b0 e0       	ldi	r27, 0x00	; 0
    8e1a:	e1 e1       	ldi	r30, 0x11	; 17
    8e1c:	f7 e4       	ldi	r31, 0x47	; 71
    8e1e:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    8e22:	9e 01       	movw	r18, r28
    8e24:	23 5f       	subi	r18, 0xF3	; 243
    8e26:	3f 4f       	sbci	r19, 0xFF	; 255
    8e28:	f9 01       	movw	r30, r18
    8e2a:	41 91       	ld	r20, Z+
    8e2c:	51 91       	ld	r21, Z+
    8e2e:	61 91       	ld	r22, Z+
    8e30:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8e32:	84 e3       	ldi	r24, 0x34	; 52
    8e34:	9e e3       	ldi	r25, 0x3E	; 62
    8e36:	9a 83       	std	Y+2, r25	; 0x02
    8e38:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8e3a:	18 86       	std	Y+8, r1	; 0x08
    8e3c:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8e3e:	ce 01       	movw	r24, r28
    8e40:	01 96       	adiw	r24, 0x01	; 1
    8e42:	44 db       	rcall	.-2424   	; 0x84cc <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e44:	8f 81       	ldd	r24, Y+7	; 0x07
    8e46:	98 85       	ldd	r25, Y+8	; 0x08
    8e48:	28 96       	adiw	r28, 0x08	; 8
    8e4a:	e2 e0       	ldi	r30, 0x02	; 2
    8e4c:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00008e50 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8e50:	9c 01       	movw	r18, r24
    8e52:	20 53       	subi	r18, 0x30	; 48
    8e54:	31 09       	sbc	r19, r1
    8e56:	2a 30       	cpi	r18, 0x0A	; 10
    8e58:	31 05       	cpc	r19, r1
    8e5a:	10 f4       	brcc	.+4      	; 0x8e60 <atodigit+0x10>
    8e5c:	c9 01       	movw	r24, r18
    8e5e:	10 c0       	rjmp	.+32     	; 0x8e80 <atodigit+0x30>
    8e60:	9c 01       	movw	r18, r24
    8e62:	21 54       	subi	r18, 0x41	; 65
    8e64:	31 09       	sbc	r19, r1
    8e66:	26 30       	cpi	r18, 0x06	; 6
    8e68:	31 05       	cpc	r19, r1
    8e6a:	10 f4       	brcc	.+4      	; 0x8e70 <atodigit+0x20>
    8e6c:	c7 97       	sbiw	r24, 0x37	; 55
    8e6e:	08 c0       	rjmp	.+16     	; 0x8e80 <atodigit+0x30>
    8e70:	9c 01       	movw	r18, r24
    8e72:	21 56       	subi	r18, 0x61	; 97
    8e74:	31 09       	sbc	r19, r1
    8e76:	26 30       	cpi	r18, 0x06	; 6
    8e78:	31 05       	cpc	r19, r1
    8e7a:	28 f4       	brcc	.+10     	; 0x8e86 <atodigit+0x36>
    8e7c:	87 55       	subi	r24, 0x57	; 87
    8e7e:	91 09       	sbc	r25, r1
    8e80:	86 17       	cp	r24, r22
    8e82:	97 07       	cpc	r25, r23
    8e84:	14 f0       	brlt	.+4      	; 0x8e8a <atodigit+0x3a>
    8e86:	8f ef       	ldi	r24, 0xFF	; 255
    8e88:	9f ef       	ldi	r25, 0xFF	; 255
    8e8a:	08 95       	ret

00008e8c <strtol>:
    8e8c:	a0 e0       	ldi	r26, 0x00	; 0
    8e8e:	b0 e0       	ldi	r27, 0x00	; 0
    8e90:	ec e4       	ldi	r30, 0x4C	; 76
    8e92:	f7 e4       	ldi	r31, 0x47	; 71
    8e94:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    8e98:	2b 01       	movw	r4, r22
    8e9a:	8a 01       	movw	r16, r20
    8e9c:	ec 01       	movw	r28, r24
    8e9e:	28 81       	ld	r18, Y
    8ea0:	01 96       	adiw	r24, 0x01	; 1
    8ea2:	20 32       	cpi	r18, 0x20	; 32
    8ea4:	d9 f3       	breq	.-10     	; 0x8e9c <strtol+0x10>
    8ea6:	29 30       	cpi	r18, 0x09	; 9
    8ea8:	c9 f3       	breq	.-14     	; 0x8e9c <strtol+0x10>
    8eaa:	2d 32       	cpi	r18, 0x2D	; 45
    8eac:	29 f4       	brne	.+10     	; 0x8eb8 <strtol+0x2c>
    8eae:	ec 01       	movw	r28, r24
    8eb0:	66 24       	eor	r6, r6
    8eb2:	63 94       	inc	r6
    8eb4:	71 2c       	mov	r7, r1
    8eb6:	05 c0       	rjmp	.+10     	; 0x8ec2 <strtol+0x36>
    8eb8:	2b 32       	cpi	r18, 0x2B	; 43
    8eba:	09 f4       	brne	.+2      	; 0x8ebe <strtol+0x32>
    8ebc:	ec 01       	movw	r28, r24
    8ebe:	61 2c       	mov	r6, r1
    8ec0:	71 2c       	mov	r7, r1
    8ec2:	9e 01       	movw	r18, r28
    8ec4:	2f 5f       	subi	r18, 0xFF	; 255
    8ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ec8:	88 81       	ld	r24, Y
    8eca:	80 33       	cpi	r24, 0x30	; 48
    8ecc:	11 f4       	brne	.+4      	; 0x8ed2 <strtol+0x46>
    8ece:	e9 01       	movw	r28, r18
    8ed0:	f8 cf       	rjmp	.-16     	; 0x8ec2 <strtol+0x36>
    8ed2:	c1 2c       	mov	r12, r1
    8ed4:	d1 2c       	mov	r13, r1
    8ed6:	76 01       	movw	r14, r12
    8ed8:	48 01       	movw	r8, r16
    8eda:	01 2e       	mov	r0, r17
    8edc:	00 0c       	add	r0, r0
    8ede:	aa 08       	sbc	r10, r10
    8ee0:	bb 08       	sbc	r11, r11
    8ee2:	3c 2e       	mov	r3, r28
    8ee4:	2d 2e       	mov	r2, r29
    8ee6:	89 91       	ld	r24, Y+
    8ee8:	88 23       	and	r24, r24
    8eea:	31 f0       	breq	.+12     	; 0x8ef8 <strtol+0x6c>
    8eec:	b8 01       	movw	r22, r16
    8eee:	90 e0       	ldi	r25, 0x00	; 0
    8ef0:	af df       	rcall	.-162    	; 0x8e50 <atodigit>
    8ef2:	fc 01       	movw	r30, r24
    8ef4:	97 ff       	sbrs	r25, 7
    8ef6:	0c c0       	rjmp	.+24     	; 0x8f10 <strtol+0x84>
    8ef8:	61 14       	cp	r6, r1
    8efa:	71 04       	cpc	r7, r1
    8efc:	c1 f0       	breq	.+48     	; 0x8f2e <strtol+0xa2>
    8efe:	f0 94       	com	r15
    8f00:	e0 94       	com	r14
    8f02:	d0 94       	com	r13
    8f04:	c0 94       	com	r12
    8f06:	c1 1c       	adc	r12, r1
    8f08:	d1 1c       	adc	r13, r1
    8f0a:	e1 1c       	adc	r14, r1
    8f0c:	f1 1c       	adc	r15, r1
    8f0e:	0f c0       	rjmp	.+30     	; 0x8f2e <strtol+0xa2>
    8f10:	a5 01       	movw	r20, r10
    8f12:	94 01       	movw	r18, r8
    8f14:	c7 01       	movw	r24, r14
    8f16:	b6 01       	movw	r22, r12
    8f18:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__mulsi3>
    8f1c:	6f 01       	movw	r12, r30
    8f1e:	ff 0f       	add	r31, r31
    8f20:	ee 08       	sbc	r14, r14
    8f22:	ff 08       	sbc	r15, r15
    8f24:	c6 0e       	add	r12, r22
    8f26:	d7 1e       	adc	r13, r23
    8f28:	e8 1e       	adc	r14, r24
    8f2a:	f9 1e       	adc	r15, r25
    8f2c:	da cf       	rjmp	.-76     	; 0x8ee2 <strtol+0x56>
    8f2e:	41 14       	cp	r4, r1
    8f30:	51 04       	cpc	r5, r1
    8f32:	19 f0       	breq	.+6      	; 0x8f3a <strtol+0xae>
    8f34:	f2 01       	movw	r30, r4
    8f36:	30 82       	st	Z, r3
    8f38:	21 82       	std	Z+1, r2	; 0x01
    8f3a:	c7 01       	movw	r24, r14
    8f3c:	b6 01       	movw	r22, r12
    8f3e:	cd b7       	in	r28, 0x3d	; 61
    8f40:	de b7       	in	r29, 0x3e	; 62
    8f42:	e2 e1       	ldi	r30, 0x12	; 18
    8f44:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00008f48 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f48:	4a e0       	ldi	r20, 0x0A	; 10
    8f4a:	50 e0       	ldi	r21, 0x00	; 0
    8f4c:	60 e0       	ldi	r22, 0x00	; 0
    8f4e:	70 e0       	ldi	r23, 0x00	; 0
    8f50:	9d df       	rcall	.-198    	; 0x8e8c <strtol>
    return((int)num);
}
    8f52:	cb 01       	movw	r24, r22
    8f54:	08 95       	ret

00008f56 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f56:	4a e0       	ldi	r20, 0x0A	; 10
    8f58:	50 e0       	ldi	r21, 0x00	; 0
    8f5a:	60 e0       	ldi	r22, 0x00	; 0
    8f5c:	70 e0       	ldi	r23, 0x00	; 0
    8f5e:	96 cf       	rjmp	.-212    	; 0x8e8c <strtol>
    return(num);
}
    8f60:	08 95       	ret

00008f62 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8f62:	fc 01       	movw	r30, r24
    8f64:	62 81       	ldd	r22, Z+2	; 0x02
    8f66:	73 81       	ldd	r23, Z+3	; 0x03
    8f68:	cb 01       	movw	r24, r22
    8f6a:	a0 e0       	ldi	r26, 0x00	; 0
    8f6c:	b0 e0       	ldi	r27, 0x00	; 0
    8f6e:	ba 2f       	mov	r27, r26
    8f70:	a9 2f       	mov	r26, r25
    8f72:	98 2f       	mov	r25, r24
    8f74:	88 27       	eor	r24, r24
    8f76:	21 81       	ldd	r18, Z+1	; 0x01
    8f78:	82 2b       	or	r24, r18
    8f7a:	ba 2f       	mov	r27, r26
    8f7c:	a9 2f       	mov	r26, r25
    8f7e:	98 2f       	mov	r25, r24
    8f80:	88 27       	eor	r24, r24
    8f82:	20 81       	ld	r18, Z
    8f84:	bc 01       	movw	r22, r24
    8f86:	cd 01       	movw	r24, r26
    8f88:	62 2b       	or	r22, r18
    8f8a:	08 95       	ret

00008f8c <st_dword>:
    8f8c:	fc 01       	movw	r30, r24
    8f8e:	40 83       	st	Z, r20
    8f90:	51 83       	std	Z+1, r21	; 0x01
    8f92:	62 83       	std	Z+2, r22	; 0x02
    8f94:	73 83       	std	Z+3, r23	; 0x03
    8f96:	08 95       	ret

00008f98 <mem_set>:
    8f98:	48 0f       	add	r20, r24
    8f9a:	59 1f       	adc	r21, r25
    8f9c:	fc 01       	movw	r30, r24
    8f9e:	61 93       	st	Z+, r22
    8fa0:	cf 01       	movw	r24, r30
    8fa2:	e4 17       	cp	r30, r20
    8fa4:	f5 07       	cpc	r31, r21
    8fa6:	d1 f7       	brne	.-12     	; 0x8f9c <mem_set+0x4>
    8fa8:	08 95       	ret

00008faa <mem_cmp>:
    8faa:	dc 01       	movw	r26, r24
    8fac:	fb 01       	movw	r30, r22
    8fae:	2d 91       	ld	r18, X+
    8fb0:	81 91       	ld	r24, Z+
    8fb2:	30 e0       	ldi	r19, 0x00	; 0
    8fb4:	b9 01       	movw	r22, r18
    8fb6:	68 1b       	sub	r22, r24
    8fb8:	71 09       	sbc	r23, r1
    8fba:	cb 01       	movw	r24, r22
    8fbc:	41 50       	subi	r20, 0x01	; 1
    8fbe:	51 09       	sbc	r21, r1
    8fc0:	11 f0       	breq	.+4      	; 0x8fc6 <mem_cmp+0x1c>
    8fc2:	00 97       	sbiw	r24, 0x00	; 0
    8fc4:	a1 f3       	breq	.-24     	; 0x8fae <mem_cmp+0x4>
    8fc6:	08 95       	ret

00008fc8 <clst2sect>:
    8fc8:	0f 93       	push	r16
    8fca:	1f 93       	push	r17
    8fcc:	fc 01       	movw	r30, r24
    8fce:	9a 01       	movw	r18, r20
    8fd0:	ab 01       	movw	r20, r22
    8fd2:	22 50       	subi	r18, 0x02	; 2
    8fd4:	31 09       	sbc	r19, r1
    8fd6:	41 09       	sbc	r20, r1
    8fd8:	51 09       	sbc	r21, r1
    8fda:	81 8d       	ldd	r24, Z+25	; 0x19
    8fdc:	92 8d       	ldd	r25, Z+26	; 0x1a
    8fde:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8fe0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8fe2:	02 97       	sbiw	r24, 0x02	; 2
    8fe4:	a1 09       	sbc	r26, r1
    8fe6:	b1 09       	sbc	r27, r1
    8fe8:	28 17       	cp	r18, r24
    8fea:	39 07       	cpc	r19, r25
    8fec:	4a 07       	cpc	r20, r26
    8fee:	5b 07       	cpc	r21, r27
    8ff0:	68 f4       	brcc	.+26     	; 0x900c <clst2sect+0x44>
    8ff2:	a1 85       	ldd	r26, Z+9	; 0x09
    8ff4:	b2 85       	ldd	r27, Z+10	; 0x0a
    8ff6:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    8ffa:	05 a5       	ldd	r16, Z+45	; 0x2d
    8ffc:	16 a5       	ldd	r17, Z+46	; 0x2e
    8ffe:	27 a5       	ldd	r18, Z+47	; 0x2f
    9000:	30 a9       	ldd	r19, Z+48	; 0x30
    9002:	60 0f       	add	r22, r16
    9004:	71 1f       	adc	r23, r17
    9006:	82 1f       	adc	r24, r18
    9008:	93 1f       	adc	r25, r19
    900a:	03 c0       	rjmp	.+6      	; 0x9012 <clst2sect+0x4a>
    900c:	60 e0       	ldi	r22, 0x00	; 0
    900e:	70 e0       	ldi	r23, 0x00	; 0
    9010:	cb 01       	movw	r24, r22
    9012:	1f 91       	pop	r17
    9014:	0f 91       	pop	r16
    9016:	08 95       	ret

00009018 <clmt_clust>:
    9018:	cf 93       	push	r28
    901a:	df 93       	push	r29
    901c:	fc 01       	movw	r30, r24
    901e:	c2 a1       	ldd	r28, Z+34	; 0x22
    9020:	d3 a1       	ldd	r29, Z+35	; 0x23
    9022:	24 96       	adiw	r28, 0x04	; 4
    9024:	cb 01       	movw	r24, r22
    9026:	ba 01       	movw	r22, r20
    9028:	29 e0       	ldi	r18, 0x09	; 9
    902a:	96 95       	lsr	r25
    902c:	87 95       	ror	r24
    902e:	77 95       	ror	r23
    9030:	67 95       	ror	r22
    9032:	2a 95       	dec	r18
    9034:	d1 f7       	brne	.-12     	; 0x902a <clmt_clust+0x12>
    9036:	01 90       	ld	r0, Z+
    9038:	f0 81       	ld	r31, Z
    903a:	e0 2d       	mov	r30, r0
    903c:	21 85       	ldd	r18, Z+9	; 0x09
    903e:	32 85       	ldd	r19, Z+10	; 0x0a
    9040:	40 e0       	ldi	r20, 0x00	; 0
    9042:	50 e0       	ldi	r21, 0x00	; 0
    9044:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    9048:	88 81       	ld	r24, Y
    904a:	99 81       	ldd	r25, Y+1	; 0x01
    904c:	aa 81       	ldd	r26, Y+2	; 0x02
    904e:	bb 81       	ldd	r27, Y+3	; 0x03
    9050:	00 97       	sbiw	r24, 0x00	; 0
    9052:	a1 05       	cpc	r26, r1
    9054:	b1 05       	cpc	r27, r1
    9056:	b1 f0       	breq	.+44     	; 0x9084 <clmt_clust+0x6c>
    9058:	28 17       	cp	r18, r24
    905a:	39 07       	cpc	r19, r25
    905c:	4a 07       	cpc	r20, r26
    905e:	5b 07       	cpc	r21, r27
    9060:	30 f0       	brcs	.+12     	; 0x906e <clmt_clust+0x56>
    9062:	28 1b       	sub	r18, r24
    9064:	39 0b       	sbc	r19, r25
    9066:	4a 0b       	sbc	r20, r26
    9068:	5b 0b       	sbc	r21, r27
    906a:	28 96       	adiw	r28, 0x08	; 8
    906c:	ed cf       	rjmp	.-38     	; 0x9048 <clmt_clust+0x30>
    906e:	8c 81       	ldd	r24, Y+4	; 0x04
    9070:	9d 81       	ldd	r25, Y+5	; 0x05
    9072:	ae 81       	ldd	r26, Y+6	; 0x06
    9074:	bf 81       	ldd	r27, Y+7	; 0x07
    9076:	bc 01       	movw	r22, r24
    9078:	cd 01       	movw	r24, r26
    907a:	62 0f       	add	r22, r18
    907c:	73 1f       	adc	r23, r19
    907e:	84 1f       	adc	r24, r20
    9080:	95 1f       	adc	r25, r21
    9082:	03 c0       	rjmp	.+6      	; 0x908a <clmt_clust+0x72>
    9084:	60 e0       	ldi	r22, 0x00	; 0
    9086:	70 e0       	ldi	r23, 0x00	; 0
    9088:	cb 01       	movw	r24, r22
    908a:	df 91       	pop	r29
    908c:	cf 91       	pop	r28
    908e:	08 95       	ret

00009090 <sum_sfn>:
    9090:	fc 01       	movw	r30, r24
    9092:	9c 01       	movw	r18, r24
    9094:	25 5f       	subi	r18, 0xF5	; 245
    9096:	3f 4f       	sbci	r19, 0xFF	; 255
    9098:	80 e0       	ldi	r24, 0x00	; 0
    909a:	98 2f       	mov	r25, r24
    909c:	90 fb       	bst	r25, 0
    909e:	97 95       	ror	r25
    90a0:	97 f9       	bld	r25, 7
    90a2:	81 91       	ld	r24, Z+
    90a4:	89 0f       	add	r24, r25
    90a6:	e2 17       	cp	r30, r18
    90a8:	f3 07       	cpc	r31, r19
    90aa:	b9 f7       	brne	.-18     	; 0x909a <sum_sfn+0xa>
    90ac:	08 95       	ret

000090ae <get_ldnumber>:
    90ae:	cf 93       	push	r28
    90b0:	df 93       	push	r29
    90b2:	dc 01       	movw	r26, r24
    90b4:	ed 91       	ld	r30, X+
    90b6:	fc 91       	ld	r31, X
    90b8:	11 97       	sbiw	r26, 0x01	; 1
    90ba:	30 97       	sbiw	r30, 0x00	; 0
    90bc:	f9 f0       	breq	.+62     	; 0x90fc <get_ldnumber+0x4e>
    90be:	9f 01       	movw	r18, r30
    90c0:	2f 5f       	subi	r18, 0xFF	; 255
    90c2:	3f 4f       	sbci	r19, 0xFF	; 255
    90c4:	e9 01       	movw	r28, r18
    90c6:	21 97       	sbiw	r28, 0x01	; 1
    90c8:	88 81       	ld	r24, Y
    90ca:	80 32       	cpi	r24, 0x20	; 32
    90cc:	18 f0       	brcs	.+6      	; 0x90d4 <get_ldnumber+0x26>
    90ce:	8a 33       	cpi	r24, 0x3A	; 58
    90d0:	b9 f7       	brne	.-18     	; 0x90c0 <get_ldnumber+0x12>
    90d2:	04 c0       	rjmp	.+8      	; 0x90dc <get_ldnumber+0x2e>
    90d4:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <CurrVol>
    90d8:	90 e0       	ldi	r25, 0x00	; 0
    90da:	12 c0       	rjmp	.+36     	; 0x9100 <get_ldnumber+0x52>
    90dc:	90 81       	ld	r25, Z
    90de:	80 ed       	ldi	r24, 0xD0	; 208
    90e0:	89 0f       	add	r24, r25
    90e2:	8a 30       	cpi	r24, 0x0A	; 10
    90e4:	58 f4       	brcc	.+22     	; 0x90fc <get_ldnumber+0x4e>
    90e6:	32 96       	adiw	r30, 0x02	; 2
    90e8:	2e 17       	cp	r18, r30
    90ea:	3f 07       	cpc	r19, r31
    90ec:	39 f4       	brne	.+14     	; 0x90fc <get_ldnumber+0x4e>
    90ee:	90 33       	cpi	r25, 0x30	; 48
    90f0:	29 f4       	brne	.+10     	; 0x90fc <get_ldnumber+0x4e>
    90f2:	2d 93       	st	X+, r18
    90f4:	3c 93       	st	X, r19
    90f6:	80 e0       	ldi	r24, 0x00	; 0
    90f8:	90 e0       	ldi	r25, 0x00	; 0
    90fa:	02 c0       	rjmp	.+4      	; 0x9100 <get_ldnumber+0x52>
    90fc:	8f ef       	ldi	r24, 0xFF	; 255
    90fe:	9f ef       	ldi	r25, 0xFF	; 255
    9100:	df 91       	pop	r29
    9102:	cf 91       	pop	r28
    9104:	08 95       	ret

00009106 <validate>:
    9106:	0f 93       	push	r16
    9108:	1f 93       	push	r17
    910a:	cf 93       	push	r28
    910c:	df 93       	push	r29
    910e:	ec 01       	movw	r28, r24
    9110:	8b 01       	movw	r16, r22
    9112:	89 2b       	or	r24, r25
    9114:	f9 f0       	breq	.+62     	; 0x9154 <validate+0x4e>
    9116:	e8 81       	ld	r30, Y
    9118:	f9 81       	ldd	r31, Y+1	; 0x01
    911a:	30 97       	sbiw	r30, 0x00	; 0
    911c:	d9 f0       	breq	.+54     	; 0x9154 <validate+0x4e>
    911e:	80 81       	ld	r24, Z
    9120:	88 23       	and	r24, r24
    9122:	c1 f0       	breq	.+48     	; 0x9154 <validate+0x4e>
    9124:	2a 81       	ldd	r18, Y+2	; 0x02
    9126:	3b 81       	ldd	r19, Y+3	; 0x03
    9128:	85 81       	ldd	r24, Z+5	; 0x05
    912a:	96 81       	ldd	r25, Z+6	; 0x06
    912c:	28 17       	cp	r18, r24
    912e:	39 07       	cpc	r19, r25
    9130:	89 f4       	brne	.+34     	; 0x9154 <validate+0x4e>
    9132:	81 81       	ldd	r24, Z+1	; 0x01
    9134:	0e 94 99 69 	call	0xd332	; 0xd332 <disk_status>
    9138:	80 fd       	sbrc	r24, 0
    913a:	0c c0       	rjmp	.+24     	; 0x9154 <validate+0x4e>
    913c:	28 81       	ld	r18, Y
    913e:	39 81       	ldd	r19, Y+1	; 0x01
    9140:	80 e0       	ldi	r24, 0x00	; 0
    9142:	90 e0       	ldi	r25, 0x00	; 0
    9144:	f8 01       	movw	r30, r16
    9146:	31 83       	std	Z+1, r19	; 0x01
    9148:	20 83       	st	Z, r18
    914a:	df 91       	pop	r29
    914c:	cf 91       	pop	r28
    914e:	1f 91       	pop	r17
    9150:	0f 91       	pop	r16
    9152:	08 95       	ret
    9154:	89 e0       	ldi	r24, 0x09	; 9
    9156:	90 e0       	ldi	r25, 0x00	; 0
    9158:	20 e0       	ldi	r18, 0x00	; 0
    915a:	30 e0       	ldi	r19, 0x00	; 0
    915c:	f3 cf       	rjmp	.-26     	; 0x9144 <validate+0x3e>

0000915e <get_fileinfo>:
    915e:	a8 e0       	ldi	r26, 0x08	; 8
    9160:	b0 e0       	ldi	r27, 0x00	; 0
    9162:	e5 eb       	ldi	r30, 0xB5	; 181
    9164:	f8 e4       	ldi	r31, 0x48	; 72
    9166:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    916a:	fc 01       	movw	r30, r24
    916c:	01 90       	ld	r0, Z+
    916e:	f0 81       	ld	r31, Z
    9170:	e0 2d       	mov	r30, r0
    9172:	f8 87       	std	Y+8, r31	; 0x08
    9174:	ef 83       	std	Y+7, r30	; 0x07
    9176:	fb 01       	movw	r30, r22
    9178:	16 8a       	std	Z+22, r1	; 0x16
    917a:	fc 01       	movw	r30, r24
    917c:	06 89       	ldd	r16, Z+22	; 0x16
    917e:	17 89       	ldd	r17, Z+23	; 0x17
    9180:	20 8d       	ldd	r18, Z+24	; 0x18
    9182:	31 8d       	ldd	r19, Z+25	; 0x19
    9184:	01 15       	cp	r16, r1
    9186:	11 05       	cpc	r17, r1
    9188:	21 05       	cpc	r18, r1
    918a:	31 05       	cpc	r19, r1
    918c:	09 f4       	brne	.+2      	; 0x9190 <get_fileinfo+0x32>
    918e:	0d c1       	rjmp	.+538    	; 0x93aa <get_fileinfo+0x24c>
    9190:	7e 83       	std	Y+6, r23	; 0x06
    9192:	6d 83       	std	Y+5, r22	; 0x05
    9194:	7c 01       	movw	r14, r24
    9196:	80 a5       	ldd	r24, Z+40	; 0x28
    9198:	91 a5       	ldd	r25, Z+41	; 0x29
    919a:	a2 a5       	ldd	r26, Z+42	; 0x2a
    919c:	b3 a5       	ldd	r27, Z+43	; 0x2b
    919e:	8f 3f       	cpi	r24, 0xFF	; 255
    91a0:	9f 4f       	sbci	r25, 0xFF	; 255
    91a2:	af 4f       	sbci	r26, 0xFF	; 255
    91a4:	bf 4f       	sbci	r27, 0xFF	; 255
    91a6:	09 f4       	brne	.+2      	; 0x91aa <get_fileinfo+0x4c>
    91a8:	6c c0       	rjmp	.+216    	; 0x9282 <get_fileinfo+0x124>
    91aa:	a1 2c       	mov	r10, r1
    91ac:	b1 2c       	mov	r11, r1
    91ae:	c1 2c       	mov	r12, r1
    91b0:	d1 2c       	mov	r13, r1
    91b2:	00 e0       	ldi	r16, 0x00	; 0
    91b4:	10 e0       	ldi	r17, 0x00	; 0
    91b6:	66 24       	eor	r6, r6
    91b8:	6a 94       	dec	r6
    91ba:	71 2c       	mov	r7, r1
    91bc:	ef 81       	ldd	r30, Y+7	; 0x07
    91be:	f8 85       	ldd	r31, Y+8	; 0x08
    91c0:	83 85       	ldd	r24, Z+11	; 0x0b
    91c2:	94 85       	ldd	r25, Z+12	; 0x0c
    91c4:	fc 01       	movw	r30, r24
    91c6:	ea 0d       	add	r30, r10
    91c8:	fb 1d       	adc	r31, r11
    91ca:	80 81       	ld	r24, Z
    91cc:	91 81       	ldd	r25, Z+1	; 0x01
    91ce:	00 97       	sbiw	r24, 0x00	; 0
    91d0:	09 f4       	brne	.+2      	; 0x91d4 <get_fileinfo+0x76>
    91d2:	4d c0       	rjmp	.+154    	; 0x926e <get_fileinfo+0x110>
    91d4:	c1 14       	cp	r12, r1
    91d6:	d1 04       	cpc	r13, r1
    91d8:	29 f4       	brne	.+10     	; 0x91e4 <get_fileinfo+0x86>
    91da:	9c 01       	movw	r18, r24
    91dc:	38 5d       	subi	r19, 0xD8	; 216
    91de:	21 15       	cp	r18, r1
    91e0:	38 40       	sbci	r19, 0x08	; 8
    91e2:	f0 f1       	brcs	.+124    	; 0x9260 <get_fileinfo+0x102>
    91e4:	43 01       	movw	r8, r6
    91e6:	80 1a       	sub	r8, r16
    91e8:	91 0a       	sbc	r9, r17
    91ea:	a6 01       	movw	r20, r12
    91ec:	60 e0       	ldi	r22, 0x00	; 0
    91ee:	70 e0       	ldi	r23, 0x00	; 0
    91f0:	2a 01       	movw	r4, r20
    91f2:	33 24       	eor	r3, r3
    91f4:	22 24       	eor	r2, r2
    91f6:	a0 e0       	ldi	r26, 0x00	; 0
    91f8:	b0 e0       	ldi	r27, 0x00	; 0
    91fa:	28 2a       	or	r2, r24
    91fc:	39 2a       	or	r3, r25
    91fe:	4a 2a       	or	r4, r26
    9200:	5b 2a       	or	r5, r27
    9202:	c2 01       	movw	r24, r4
    9204:	b1 01       	movw	r22, r2
    9206:	45 eb       	ldi	r20, 0xB5	; 181
    9208:	51 e0       	ldi	r21, 0x01	; 1
    920a:	0e 94 ef 68 	call	0xd1de	; 0xd1de <ff_uni2oem>
    920e:	8f 3f       	cpi	r24, 0xFF	; 255
    9210:	91 05       	cpc	r25, r1
    9212:	89 f0       	breq	.+34     	; 0x9236 <get_fileinfo+0xd8>
    9214:	80 f0       	brcs	.+32     	; 0x9236 <get_fileinfo+0xd8>
    9216:	22 e0       	ldi	r18, 0x02	; 2
    9218:	82 16       	cp	r8, r18
    921a:	91 04       	cpc	r9, r1
    921c:	c0 f0       	brcs	.+48     	; 0x924e <get_fileinfo+0xf0>
    921e:	ed 81       	ldd	r30, Y+5	; 0x05
    9220:	fe 81       	ldd	r31, Y+6	; 0x06
    9222:	e0 0f       	add	r30, r16
    9224:	f1 1f       	adc	r31, r17
    9226:	96 8b       	std	Z+22, r25	; 0x16
    9228:	ed 81       	ldd	r30, Y+5	; 0x05
    922a:	fe 81       	ldd	r31, Y+6	; 0x06
    922c:	e0 0f       	add	r30, r16
    922e:	f1 1f       	adc	r31, r17
    9230:	87 8b       	std	Z+23, r24	; 0x17
    9232:	82 e0       	ldi	r24, 0x02	; 2
    9234:	0d c0       	rjmp	.+26     	; 0x9250 <get_fileinfo+0xf2>
    9236:	00 97       	sbiw	r24, 0x00	; 0
    9238:	51 f0       	breq	.+20     	; 0x924e <get_fileinfo+0xf0>
    923a:	81 14       	cp	r8, r1
    923c:	91 04       	cpc	r9, r1
    923e:	39 f0       	breq	.+14     	; 0x924e <get_fileinfo+0xf0>
    9240:	ed 81       	ldd	r30, Y+5	; 0x05
    9242:	fe 81       	ldd	r31, Y+6	; 0x06
    9244:	e0 0f       	add	r30, r16
    9246:	f1 1f       	adc	r31, r17
    9248:	86 8b       	std	Z+22, r24	; 0x16
    924a:	81 e0       	ldi	r24, 0x01	; 1
    924c:	01 c0       	rjmp	.+2      	; 0x9250 <get_fileinfo+0xf2>
    924e:	80 e0       	ldi	r24, 0x00	; 0
    9250:	28 2f       	mov	r18, r24
    9252:	30 e0       	ldi	r19, 0x00	; 0
    9254:	88 23       	and	r24, r24
    9256:	49 f0       	breq	.+18     	; 0x926a <get_fileinfo+0x10c>
    9258:	02 0f       	add	r16, r18
    925a:	13 1f       	adc	r17, r19
    925c:	80 e0       	ldi	r24, 0x00	; 0
    925e:	90 e0       	ldi	r25, 0x00	; 0
    9260:	32 e0       	ldi	r19, 0x02	; 2
    9262:	a3 0e       	add	r10, r19
    9264:	b1 1c       	adc	r11, r1
    9266:	6c 01       	movw	r12, r24
    9268:	a9 cf       	rjmp	.-174    	; 0x91bc <get_fileinfo+0x5e>
    926a:	00 e0       	ldi	r16, 0x00	; 0
    926c:	10 e0       	ldi	r17, 0x00	; 0
    926e:	c1 14       	cp	r12, r1
    9270:	d1 04       	cpc	r13, r1
    9272:	11 f0       	breq	.+4      	; 0x9278 <get_fileinfo+0x11a>
    9274:	00 e0       	ldi	r16, 0x00	; 0
    9276:	10 e0       	ldi	r17, 0x00	; 0
    9278:	ed 81       	ldd	r30, Y+5	; 0x05
    927a:	fe 81       	ldd	r31, Y+6	; 0x06
    927c:	e0 0f       	add	r30, r16
    927e:	f1 1f       	adc	r31, r17
    9280:	16 8a       	std	Z+22, r1	; 0x16
    9282:	80 e0       	ldi	r24, 0x00	; 0
    9284:	90 e0       	ldi	r25, 0x00	; 0
    9286:	20 e0       	ldi	r18, 0x00	; 0
    9288:	30 e0       	ldi	r19, 0x00	; 0
    928a:	6e e2       	ldi	r22, 0x2E	; 46
    928c:	a9 01       	movw	r20, r18
    928e:	4f 5f       	subi	r20, 0xFF	; 255
    9290:	5f 4f       	sbci	r21, 0xFF	; 255
    9292:	f7 01       	movw	r30, r14
    9294:	a2 8d       	ldd	r26, Z+26	; 0x1a
    9296:	b3 8d       	ldd	r27, Z+27	; 0x1b
    9298:	fd 01       	movw	r30, r26
    929a:	e2 0f       	add	r30, r18
    929c:	f3 1f       	adc	r31, r19
    929e:	20 81       	ld	r18, Z
    92a0:	30 e0       	ldi	r19, 0x00	; 0
    92a2:	20 32       	cpi	r18, 0x20	; 32
    92a4:	31 05       	cpc	r19, r1
    92a6:	b9 f0       	breq	.+46     	; 0x92d6 <get_fileinfo+0x178>
    92a8:	25 30       	cpi	r18, 0x05	; 5
    92aa:	31 05       	cpc	r19, r1
    92ac:	11 f4       	brne	.+4      	; 0x92b2 <get_fileinfo+0x154>
    92ae:	25 ee       	ldi	r18, 0xE5	; 229
    92b0:	30 e0       	ldi	r19, 0x00	; 0
    92b2:	49 30       	cpi	r20, 0x09	; 9
    92b4:	51 05       	cpc	r21, r1
    92b6:	49 f4       	brne	.+18     	; 0x92ca <get_fileinfo+0x16c>
    92b8:	8c 30       	cpi	r24, 0x0C	; 12
    92ba:	91 05       	cpc	r25, r1
    92bc:	30 f4       	brcc	.+12     	; 0x92ca <get_fileinfo+0x16c>
    92be:	ed 81       	ldd	r30, Y+5	; 0x05
    92c0:	fe 81       	ldd	r31, Y+6	; 0x06
    92c2:	e8 0f       	add	r30, r24
    92c4:	f9 1f       	adc	r31, r25
    92c6:	61 87       	std	Z+9, r22	; 0x09
    92c8:	01 96       	adiw	r24, 0x01	; 1
    92ca:	ed 81       	ldd	r30, Y+5	; 0x05
    92cc:	fe 81       	ldd	r31, Y+6	; 0x06
    92ce:	e8 0f       	add	r30, r24
    92d0:	f9 1f       	adc	r31, r25
    92d2:	21 87       	std	Z+9, r18	; 0x09
    92d4:	01 96       	adiw	r24, 0x01	; 1
    92d6:	9a 01       	movw	r18, r20
    92d8:	4b 30       	cpi	r20, 0x0B	; 11
    92da:	51 05       	cpc	r21, r1
    92dc:	b9 f6       	brne	.-82     	; 0x928c <get_fileinfo+0x12e>
    92de:	ed 81       	ldd	r30, Y+5	; 0x05
    92e0:	fe 81       	ldd	r31, Y+6	; 0x06
    92e2:	e8 0f       	add	r30, r24
    92e4:	f9 1f       	adc	r31, r25
    92e6:	11 86       	std	Z+9, r1	; 0x09
    92e8:	ed 81       	ldd	r30, Y+5	; 0x05
    92ea:	fe 81       	ldd	r31, Y+6	; 0x06
    92ec:	26 89       	ldd	r18, Z+22	; 0x16
    92ee:	21 11       	cpse	r18, r1
    92f0:	3a c0       	rjmp	.+116    	; 0x9366 <get_fileinfo+0x208>
    92f2:	89 2b       	or	r24, r25
    92f4:	31 f0       	breq	.+12     	; 0x9302 <get_fileinfo+0x1a4>
    92f6:	df 01       	movw	r26, r30
    92f8:	19 96       	adiw	r26, 0x09	; 9
    92fa:	58 e0       	ldi	r21, 0x08	; 8
    92fc:	20 e0       	ldi	r18, 0x00	; 0
    92fe:	30 e0       	ldi	r19, 0x00	; 0
    9300:	16 c0       	rjmp	.+44     	; 0x932e <get_fileinfo+0x1d0>
    9302:	8f e3       	ldi	r24, 0x3F	; 63
    9304:	ed 81       	ldd	r30, Y+5	; 0x05
    9306:	fe 81       	ldd	r31, Y+6	; 0x06
    9308:	86 8b       	std	Z+22, r24	; 0x16
    930a:	21 e0       	ldi	r18, 0x01	; 1
    930c:	30 e0       	ldi	r19, 0x00	; 0
    930e:	1c c0       	rjmp	.+56     	; 0x9348 <get_fileinfo+0x1ea>
    9310:	90 e0       	ldi	r25, 0x00	; 0
    9312:	8e 32       	cpi	r24, 0x2E	; 46
    9314:	91 05       	cpc	r25, r1
    9316:	09 f4       	brne	.+2      	; 0x931a <get_fileinfo+0x1bc>
    9318:	50 e1       	ldi	r21, 0x10	; 16
    931a:	bc 01       	movw	r22, r24
    931c:	61 54       	subi	r22, 0x41	; 65
    931e:	71 09       	sbc	r23, r1
    9320:	6a 31       	cpi	r22, 0x1A	; 26
    9322:	71 05       	cpc	r23, r1
    9324:	40 f0       	brcs	.+16     	; 0x9336 <get_fileinfo+0x1d8>
    9326:	fd 01       	movw	r30, r26
    9328:	84 87       	std	Z+12, r24	; 0x0c
    932a:	2f 5f       	subi	r18, 0xFF	; 255
    932c:	3f 4f       	sbci	r19, 0xFF	; 255
    932e:	8d 91       	ld	r24, X+
    9330:	81 11       	cpse	r24, r1
    9332:	ee cf       	rjmp	.-36     	; 0x9310 <get_fileinfo+0x1b2>
    9334:	09 c0       	rjmp	.+18     	; 0x9348 <get_fileinfo+0x1ea>
    9336:	f7 01       	movw	r30, r14
    9338:	62 8d       	ldd	r22, Z+26	; 0x1a
    933a:	73 8d       	ldd	r23, Z+27	; 0x1b
    933c:	fb 01       	movw	r30, r22
    933e:	44 85       	ldd	r20, Z+12	; 0x0c
    9340:	45 23       	and	r20, r21
    9342:	89 f3       	breq	.-30     	; 0x9326 <get_fileinfo+0x1c8>
    9344:	80 96       	adiw	r24, 0x20	; 32
    9346:	ef cf       	rjmp	.-34     	; 0x9326 <get_fileinfo+0x1c8>
    9348:	ed 81       	ldd	r30, Y+5	; 0x05
    934a:	fe 81       	ldd	r31, Y+6	; 0x06
    934c:	e2 0f       	add	r30, r18
    934e:	f3 1f       	adc	r31, r19
    9350:	16 8a       	std	Z+22, r1	; 0x16
    9352:	f7 01       	movw	r30, r14
    9354:	82 8d       	ldd	r24, Z+26	; 0x1a
    9356:	93 8d       	ldd	r25, Z+27	; 0x1b
    9358:	fc 01       	movw	r30, r24
    935a:	84 85       	ldd	r24, Z+12	; 0x0c
    935c:	81 11       	cpse	r24, r1
    935e:	03 c0       	rjmp	.+6      	; 0x9366 <get_fileinfo+0x208>
    9360:	ed 81       	ldd	r30, Y+5	; 0x05
    9362:	fe 81       	ldd	r31, Y+6	; 0x06
    9364:	11 86       	std	Z+9, r1	; 0x09
    9366:	f7 01       	movw	r30, r14
    9368:	82 8d       	ldd	r24, Z+26	; 0x1a
    936a:	93 8d       	ldd	r25, Z+27	; 0x1b
    936c:	fc 01       	movw	r30, r24
    936e:	83 85       	ldd	r24, Z+11	; 0x0b
    9370:	ed 81       	ldd	r30, Y+5	; 0x05
    9372:	fe 81       	ldd	r31, Y+6	; 0x06
    9374:	80 87       	std	Z+8, r24	; 0x08
    9376:	f7 01       	movw	r30, r14
    9378:	02 8d       	ldd	r16, Z+26	; 0x1a
    937a:	13 8d       	ldd	r17, Z+27	; 0x1b
    937c:	c8 01       	movw	r24, r16
    937e:	4c 96       	adiw	r24, 0x1c	; 28
    9380:	f0 dd       	rcall	.-1056   	; 0x8f62 <ld_dword>
    9382:	ed 81       	ldd	r30, Y+5	; 0x05
    9384:	fe 81       	ldd	r31, Y+6	; 0x06
    9386:	60 83       	st	Z, r22
    9388:	71 83       	std	Z+1, r23	; 0x01
    938a:	82 83       	std	Z+2, r24	; 0x02
    938c:	93 83       	std	Z+3, r25	; 0x03
    938e:	f8 01       	movw	r30, r16
    9390:	86 89       	ldd	r24, Z+22	; 0x16
    9392:	97 89       	ldd	r25, Z+23	; 0x17
    9394:	ed 81       	ldd	r30, Y+5	; 0x05
    9396:	fe 81       	ldd	r31, Y+6	; 0x06
    9398:	97 83       	std	Z+7, r25	; 0x07
    939a:	86 83       	std	Z+6, r24	; 0x06
    939c:	f8 01       	movw	r30, r16
    939e:	80 8d       	ldd	r24, Z+24	; 0x18
    93a0:	91 8d       	ldd	r25, Z+25	; 0x19
    93a2:	ed 81       	ldd	r30, Y+5	; 0x05
    93a4:	fe 81       	ldd	r31, Y+6	; 0x06
    93a6:	95 83       	std	Z+5, r25	; 0x05
    93a8:	84 83       	std	Z+4, r24	; 0x04
    93aa:	28 96       	adiw	r28, 0x08	; 8
    93ac:	e2 e1       	ldi	r30, 0x12	; 18
    93ae:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

000093b2 <mem_cpy.part.0>:
    93b2:	fb 01       	movw	r30, r22
    93b4:	48 0f       	add	r20, r24
    93b6:	59 1f       	adc	r21, r25
    93b8:	21 91       	ld	r18, Z+
    93ba:	dc 01       	movw	r26, r24
    93bc:	2d 93       	st	X+, r18
    93be:	cd 01       	movw	r24, r26
    93c0:	a4 17       	cp	r26, r20
    93c2:	b5 07       	cpc	r27, r21
    93c4:	c9 f7       	brne	.-14     	; 0x93b8 <mem_cpy.part.0+0x6>
    93c6:	08 95       	ret

000093c8 <ld_clust.isra.3>:
    93c8:	fb 01       	movw	r30, r22
    93ca:	42 8d       	ldd	r20, Z+26	; 0x1a
    93cc:	53 8d       	ldd	r21, Z+27	; 0x1b
    93ce:	60 e0       	ldi	r22, 0x00	; 0
    93d0:	70 e0       	ldi	r23, 0x00	; 0
    93d2:	83 30       	cpi	r24, 0x03	; 3
    93d4:	59 f4       	brne	.+22     	; 0x93ec <ld_clust.isra.3+0x24>
    93d6:	84 89       	ldd	r24, Z+20	; 0x14
    93d8:	95 89       	ldd	r25, Z+21	; 0x15
    93da:	a0 e0       	ldi	r26, 0x00	; 0
    93dc:	b0 e0       	ldi	r27, 0x00	; 0
    93de:	dc 01       	movw	r26, r24
    93e0:	99 27       	eor	r25, r25
    93e2:	88 27       	eor	r24, r24
    93e4:	48 2b       	or	r20, r24
    93e6:	59 2b       	or	r21, r25
    93e8:	6a 2b       	or	r22, r26
    93ea:	7b 2b       	or	r23, r27
    93ec:	cb 01       	movw	r24, r22
    93ee:	ba 01       	movw	r22, r20
    93f0:	08 95       	ret

000093f2 <st_clust.isra.4>:
    93f2:	fb 01       	movw	r30, r22
    93f4:	22 8f       	std	Z+26, r18	; 0x1a
    93f6:	33 8f       	std	Z+27, r19	; 0x1b
    93f8:	dc 01       	movw	r26, r24
    93fa:	8c 91       	ld	r24, X
    93fc:	83 30       	cpi	r24, 0x03	; 3
    93fe:	29 f4       	brne	.+10     	; 0x940a <st_clust.isra.4+0x18>
    9400:	ca 01       	movw	r24, r20
    9402:	aa 27       	eor	r26, r26
    9404:	bb 27       	eor	r27, r27
    9406:	84 8b       	std	Z+20, r24	; 0x14
    9408:	95 8b       	std	Z+21, r25	; 0x15
    940a:	08 95       	ret

0000940c <sync_window.part.5>:
    940c:	8f 92       	push	r8
    940e:	9f 92       	push	r9
    9410:	af 92       	push	r10
    9412:	bf 92       	push	r11
    9414:	ef 92       	push	r14
    9416:	ff 92       	push	r15
    9418:	0f 93       	push	r16
    941a:	1f 93       	push	r17
    941c:	cf 93       	push	r28
    941e:	df 93       	push	r29
    9420:	ec 01       	movw	r28, r24
    9422:	7c 01       	movw	r14, r24
    9424:	45 e3       	ldi	r20, 0x35	; 53
    9426:	e4 0e       	add	r14, r20
    9428:	f1 1c       	adc	r15, r1
    942a:	29 a9       	ldd	r18, Y+49	; 0x31
    942c:	3a a9       	ldd	r19, Y+50	; 0x32
    942e:	4b a9       	ldd	r20, Y+51	; 0x33
    9430:	5c a9       	ldd	r21, Y+52	; 0x34
    9432:	01 e0       	ldi	r16, 0x01	; 1
    9434:	10 e0       	ldi	r17, 0x00	; 0
    9436:	b7 01       	movw	r22, r14
    9438:	89 81       	ldd	r24, Y+1	; 0x01
    943a:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    943e:	89 2b       	or	r24, r25
    9440:	41 f5       	brne	.+80     	; 0x9492 <sync_window.part.5+0x86>
    9442:	1b 82       	std	Y+3, r1	; 0x03
    9444:	09 a9       	ldd	r16, Y+49	; 0x31
    9446:	1a a9       	ldd	r17, Y+50	; 0x32
    9448:	2b a9       	ldd	r18, Y+51	; 0x33
    944a:	3c a9       	ldd	r19, Y+52	; 0x34
    944c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    944e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9450:	af 8d       	ldd	r26, Y+31	; 0x1f
    9452:	b8 a1       	ldd	r27, Y+32	; 0x20
    9454:	8d a0       	ldd	r8, Y+37	; 0x25
    9456:	9e a0       	ldd	r9, Y+38	; 0x26
    9458:	af a0       	ldd	r10, Y+39	; 0x27
    945a:	b8 a4       	ldd	r11, Y+40	; 0x28
    945c:	b9 01       	movw	r22, r18
    945e:	a8 01       	movw	r20, r16
    9460:	48 19       	sub	r20, r8
    9462:	59 09       	sbc	r21, r9
    9464:	6a 09       	sbc	r22, r10
    9466:	7b 09       	sbc	r23, r11
    9468:	48 17       	cp	r20, r24
    946a:	59 07       	cpc	r21, r25
    946c:	6a 07       	cpc	r22, r26
    946e:	7b 07       	cpc	r23, r27
    9470:	98 f4       	brcc	.+38     	; 0x9498 <sync_window.part.5+0x8c>
    9472:	6a 81       	ldd	r22, Y+2	; 0x02
    9474:	62 30       	cpi	r22, 0x02	; 2
    9476:	81 f4       	brne	.+32     	; 0x9498 <sync_window.part.5+0x8c>
    9478:	a9 01       	movw	r20, r18
    947a:	98 01       	movw	r18, r16
    947c:	28 0f       	add	r18, r24
    947e:	39 1f       	adc	r19, r25
    9480:	4a 1f       	adc	r20, r26
    9482:	5b 1f       	adc	r21, r27
    9484:	01 e0       	ldi	r16, 0x01	; 1
    9486:	10 e0       	ldi	r17, 0x00	; 0
    9488:	b7 01       	movw	r22, r14
    948a:	89 81       	ldd	r24, Y+1	; 0x01
    948c:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    9490:	03 c0       	rjmp	.+6      	; 0x9498 <sync_window.part.5+0x8c>
    9492:	81 e0       	ldi	r24, 0x01	; 1
    9494:	90 e0       	ldi	r25, 0x00	; 0
    9496:	02 c0       	rjmp	.+4      	; 0x949c <sync_window.part.5+0x90>
    9498:	80 e0       	ldi	r24, 0x00	; 0
    949a:	90 e0       	ldi	r25, 0x00	; 0
    949c:	df 91       	pop	r29
    949e:	cf 91       	pop	r28
    94a0:	1f 91       	pop	r17
    94a2:	0f 91       	pop	r16
    94a4:	ff 90       	pop	r15
    94a6:	ef 90       	pop	r14
    94a8:	bf 90       	pop	r11
    94aa:	af 90       	pop	r10
    94ac:	9f 90       	pop	r9
    94ae:	8f 90       	pop	r8
    94b0:	08 95       	ret

000094b2 <sync_fs>:
    94b2:	ef 92       	push	r14
    94b4:	ff 92       	push	r15
    94b6:	0f 93       	push	r16
    94b8:	1f 93       	push	r17
    94ba:	cf 93       	push	r28
    94bc:	df 93       	push	r29
    94be:	ec 01       	movw	r28, r24
    94c0:	8b 81       	ldd	r24, Y+3	; 0x03
    94c2:	81 11       	cpse	r24, r1
    94c4:	05 c0       	rjmp	.+10     	; 0x94d0 <sync_fs+0x1e>
    94c6:	88 81       	ld	r24, Y
    94c8:	83 30       	cpi	r24, 0x03	; 3
    94ca:	09 f0       	breq	.+2      	; 0x94ce <sync_fs+0x1c>
    94cc:	52 c0       	rjmp	.+164    	; 0x9572 <sync_fs+0xc0>
    94ce:	06 c0       	rjmp	.+12     	; 0x94dc <sync_fs+0x2a>
    94d0:	ce 01       	movw	r24, r28
    94d2:	9c df       	rcall	.-200    	; 0x940c <sync_window.part.5>
    94d4:	00 97       	sbiw	r24, 0x00	; 0
    94d6:	09 f0       	breq	.+2      	; 0x94da <sync_fs+0x28>
    94d8:	59 c0       	rjmp	.+178    	; 0x958c <sync_fs+0xda>
    94da:	f5 cf       	rjmp	.-22     	; 0x94c6 <sync_fs+0x14>
    94dc:	8c 81       	ldd	r24, Y+4	; 0x04
    94de:	81 30       	cpi	r24, 0x01	; 1
    94e0:	09 f0       	breq	.+2      	; 0x94e4 <sync_fs+0x32>
    94e2:	47 c0       	rjmp	.+142    	; 0x9572 <sync_fs+0xc0>
    94e4:	40 e0       	ldi	r20, 0x00	; 0
    94e6:	52 e0       	ldi	r21, 0x02	; 2
    94e8:	60 e0       	ldi	r22, 0x00	; 0
    94ea:	70 e0       	ldi	r23, 0x00	; 0
    94ec:	7e 01       	movw	r14, r28
    94ee:	85 e3       	ldi	r24, 0x35	; 53
    94f0:	e8 0e       	add	r14, r24
    94f2:	f1 1c       	adc	r15, r1
    94f4:	c7 01       	movw	r24, r14
    94f6:	50 dd       	rcall	.-1376   	; 0x8f98 <mem_set>
    94f8:	85 e5       	ldi	r24, 0x55	; 85
    94fa:	fe 01       	movw	r30, r28
    94fc:	ed 5c       	subi	r30, 0xCD	; 205
    94fe:	fd 4f       	sbci	r31, 0xFD	; 253
    9500:	80 83       	st	Z, r24
    9502:	8a ea       	ldi	r24, 0xAA	; 170
    9504:	31 96       	adiw	r30, 0x01	; 1
    9506:	80 83       	st	Z, r24
    9508:	82 e5       	ldi	r24, 0x52	; 82
    950a:	8d ab       	std	Y+53, r24	; 0x35
    950c:	8e ab       	std	Y+54, r24	; 0x36
    950e:	81 e6       	ldi	r24, 0x61	; 97
    9510:	8f ab       	std	Y+55, r24	; 0x37
    9512:	91 e4       	ldi	r25, 0x41	; 65
    9514:	98 af       	std	Y+56, r25	; 0x38
    9516:	22 e7       	ldi	r18, 0x72	; 114
    9518:	7b 97       	sbiw	r30, 0x1b	; 27
    951a:	20 83       	st	Z, r18
    951c:	31 96       	adiw	r30, 0x01	; 1
    951e:	20 83       	st	Z, r18
    9520:	31 96       	adiw	r30, 0x01	; 1
    9522:	90 83       	st	Z, r25
    9524:	31 96       	adiw	r30, 0x01	; 1
    9526:	80 83       	st	Z, r24
    9528:	49 89       	ldd	r20, Y+17	; 0x11
    952a:	5a 89       	ldd	r21, Y+18	; 0x12
    952c:	6b 89       	ldd	r22, Y+19	; 0x13
    952e:	7c 89       	ldd	r23, Y+20	; 0x14
    9530:	ce 01       	movw	r24, r28
    9532:	83 5e       	subi	r24, 0xE3	; 227
    9534:	9d 4f       	sbci	r25, 0xFD	; 253
    9536:	2a dd       	rcall	.-1452   	; 0x8f8c <st_dword>
    9538:	4d 85       	ldd	r20, Y+13	; 0x0d
    953a:	5e 85       	ldd	r21, Y+14	; 0x0e
    953c:	6f 85       	ldd	r22, Y+15	; 0x0f
    953e:	78 89       	ldd	r23, Y+16	; 0x10
    9540:	ce 01       	movw	r24, r28
    9542:	8f 5d       	subi	r24, 0xDF	; 223
    9544:	9d 4f       	sbci	r25, 0xFD	; 253
    9546:	22 dd       	rcall	.-1468   	; 0x8f8c <st_dword>
    9548:	89 a1       	ldd	r24, Y+33	; 0x21
    954a:	9a a1       	ldd	r25, Y+34	; 0x22
    954c:	ab a1       	ldd	r26, Y+35	; 0x23
    954e:	bc a1       	ldd	r27, Y+36	; 0x24
    9550:	9c 01       	movw	r18, r24
    9552:	ad 01       	movw	r20, r26
    9554:	2f 5f       	subi	r18, 0xFF	; 255
    9556:	3f 4f       	sbci	r19, 0xFF	; 255
    9558:	4f 4f       	sbci	r20, 0xFF	; 255
    955a:	5f 4f       	sbci	r21, 0xFF	; 255
    955c:	29 ab       	std	Y+49, r18	; 0x31
    955e:	3a ab       	std	Y+50, r19	; 0x32
    9560:	4b ab       	std	Y+51, r20	; 0x33
    9562:	5c ab       	std	Y+52, r21	; 0x34
    9564:	01 e0       	ldi	r16, 0x01	; 1
    9566:	10 e0       	ldi	r17, 0x00	; 0
    9568:	b7 01       	movw	r22, r14
    956a:	89 81       	ldd	r24, Y+1	; 0x01
    956c:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    9570:	1c 82       	std	Y+4, r1	; 0x04
    9572:	40 e0       	ldi	r20, 0x00	; 0
    9574:	50 e0       	ldi	r21, 0x00	; 0
    9576:	60 e0       	ldi	r22, 0x00	; 0
    9578:	89 81       	ldd	r24, Y+1	; 0x01
    957a:	0e 94 c5 69 	call	0xd38a	; 0xd38a <disk_ioctl>
    957e:	31 e0       	ldi	r19, 0x01	; 1
    9580:	20 e0       	ldi	r18, 0x00	; 0
    9582:	89 2b       	or	r24, r25
    9584:	09 f4       	brne	.+2      	; 0x9588 <sync_fs+0xd6>
    9586:	30 e0       	ldi	r19, 0x00	; 0
    9588:	83 2f       	mov	r24, r19
    958a:	92 2f       	mov	r25, r18
    958c:	cd b7       	in	r28, 0x3d	; 61
    958e:	de b7       	in	r29, 0x3e	; 62
    9590:	e6 e0       	ldi	r30, 0x06	; 6
    9592:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00009596 <dir_clear>:
    9596:	4f 92       	push	r4
    9598:	5f 92       	push	r5
    959a:	6f 92       	push	r6
    959c:	7f 92       	push	r7
    959e:	af 92       	push	r10
    95a0:	bf 92       	push	r11
    95a2:	cf 92       	push	r12
    95a4:	df 92       	push	r13
    95a6:	ef 92       	push	r14
    95a8:	ff 92       	push	r15
    95aa:	0f 93       	push	r16
    95ac:	1f 93       	push	r17
    95ae:	cf 93       	push	r28
    95b0:	df 93       	push	r29
    95b2:	ec 01       	movw	r28, r24
    95b4:	6a 01       	movw	r12, r20
    95b6:	7b 01       	movw	r14, r22
    95b8:	8b 81       	ldd	r24, Y+3	; 0x03
    95ba:	81 11       	cpse	r24, r1
    95bc:	28 c0       	rjmp	.+80     	; 0x960e <dir_clear+0x78>
    95be:	b7 01       	movw	r22, r14
    95c0:	a6 01       	movw	r20, r12
    95c2:	ce 01       	movw	r24, r28
    95c4:	01 dd       	rcall	.-1534   	; 0x8fc8 <clst2sect>
    95c6:	2b 01       	movw	r4, r22
    95c8:	3c 01       	movw	r6, r24
    95ca:	69 ab       	std	Y+49, r22	; 0x31
    95cc:	7a ab       	std	Y+50, r23	; 0x32
    95ce:	8b ab       	std	Y+51, r24	; 0x33
    95d0:	9c ab       	std	Y+52, r25	; 0x34
    95d2:	5e 01       	movw	r10, r28
    95d4:	25 e3       	ldi	r18, 0x35	; 53
    95d6:	a2 0e       	add	r10, r18
    95d8:	b1 1c       	adc	r11, r1
    95da:	40 e0       	ldi	r20, 0x00	; 0
    95dc:	52 e0       	ldi	r21, 0x02	; 2
    95de:	60 e0       	ldi	r22, 0x00	; 0
    95e0:	70 e0       	ldi	r23, 0x00	; 0
    95e2:	c5 01       	movw	r24, r10
    95e4:	d9 dc       	rcall	.-1614   	; 0x8f98 <mem_set>
    95e6:	09 85       	ldd	r16, Y+9	; 0x09
    95e8:	1a 85       	ldd	r17, Y+10	; 0x0a
    95ea:	c8 01       	movw	r24, r16
    95ec:	a0 e0       	ldi	r26, 0x00	; 0
    95ee:	b0 e0       	ldi	r27, 0x00	; 0
    95f0:	39 e0       	ldi	r19, 0x09	; 9
    95f2:	88 0f       	add	r24, r24
    95f4:	99 1f       	adc	r25, r25
    95f6:	aa 1f       	adc	r26, r26
    95f8:	bb 1f       	adc	r27, r27
    95fa:	3a 95       	dec	r19
    95fc:	d1 f7       	brne	.-12     	; 0x95f2 <dir_clear+0x5c>
    95fe:	81 15       	cp	r24, r1
    9600:	90 48       	sbci	r25, 0x80	; 128
    9602:	a1 05       	cpc	r26, r1
    9604:	b1 05       	cpc	r27, r1
    9606:	50 f0       	brcs	.+20     	; 0x961c <dir_clear+0x86>
    9608:	00 e0       	ldi	r16, 0x00	; 0
    960a:	10 e8       	ldi	r17, 0x80	; 128
    960c:	14 c0       	rjmp	.+40     	; 0x9636 <dir_clear+0xa0>
    960e:	ce 01       	movw	r24, r28
    9610:	fd de       	rcall	.-518    	; 0x940c <sync_window.part.5>
    9612:	89 2b       	or	r24, r25
    9614:	a1 f2       	breq	.-88     	; 0x95be <dir_clear+0x28>
    9616:	81 e0       	ldi	r24, 0x01	; 1
    9618:	90 e0       	ldi	r25, 0x00	; 0
    961a:	56 c0       	rjmp	.+172    	; 0x96c8 <dir_clear+0x132>
    961c:	10 2f       	mov	r17, r16
    961e:	00 27       	eor	r16, r16
    9620:	11 0f       	add	r17, r17
    9622:	09 c0       	rjmp	.+18     	; 0x9636 <dir_clear+0xa0>
    9624:	c8 01       	movw	r24, r16
    9626:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <ff_memalloc>
    962a:	6c 01       	movw	r12, r24
    962c:	00 97       	sbiw	r24, 0x00	; 0
    962e:	09 f0       	breq	.+2      	; 0x9632 <dir_clear+0x9c>
    9630:	40 c0       	rjmp	.+128    	; 0x96b2 <dir_clear+0x11c>
    9632:	16 95       	lsr	r17
    9634:	07 95       	ror	r16
    9636:	01 30       	cpi	r16, 0x01	; 1
    9638:	82 e0       	ldi	r24, 0x02	; 2
    963a:	18 07       	cpc	r17, r24
    963c:	98 f7       	brcc	.-26     	; 0x9624 <dir_clear+0x8e>
    963e:	e1 2c       	mov	r14, r1
    9640:	f1 2c       	mov	r15, r1
    9642:	11 c0       	rjmp	.+34     	; 0x9666 <dir_clear+0xd0>
    9644:	01 e0       	ldi	r16, 0x01	; 1
    9646:	10 e0       	ldi	r17, 0x00	; 0
    9648:	a3 01       	movw	r20, r6
    964a:	92 01       	movw	r18, r4
    964c:	2e 0d       	add	r18, r14
    964e:	3f 1d       	adc	r19, r15
    9650:	41 1d       	adc	r20, r1
    9652:	51 1d       	adc	r21, r1
    9654:	b5 01       	movw	r22, r10
    9656:	89 81       	ldd	r24, Y+1	; 0x01
    9658:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    965c:	89 2b       	or	r24, r25
    965e:	01 f5       	brne	.+64     	; 0x96a0 <dir_clear+0x10a>
    9660:	2f ef       	ldi	r18, 0xFF	; 255
    9662:	e2 1a       	sub	r14, r18
    9664:	f2 0a       	sbc	r15, r18
    9666:	89 85       	ldd	r24, Y+9	; 0x09
    9668:	9a 85       	ldd	r25, Y+10	; 0x0a
    966a:	e8 16       	cp	r14, r24
    966c:	f9 06       	cpc	r15, r25
    966e:	50 f3       	brcs	.-44     	; 0x9644 <dir_clear+0xae>
    9670:	17 c0       	rjmp	.+46     	; 0x96a0 <dir_clear+0x10a>
    9672:	85 01       	movw	r16, r10
    9674:	a3 01       	movw	r20, r6
    9676:	92 01       	movw	r18, r4
    9678:	2e 0d       	add	r18, r14
    967a:	3f 1d       	adc	r19, r15
    967c:	41 1d       	adc	r20, r1
    967e:	51 1d       	adc	r21, r1
    9680:	b6 01       	movw	r22, r12
    9682:	89 81       	ldd	r24, Y+1	; 0x01
    9684:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    9688:	89 2b       	or	r24, r25
    968a:	39 f4       	brne	.+14     	; 0x969a <dir_clear+0x104>
    968c:	ea 0c       	add	r14, r10
    968e:	fb 1c       	adc	r15, r11
    9690:	89 85       	ldd	r24, Y+9	; 0x09
    9692:	9a 85       	ldd	r25, Y+10	; 0x0a
    9694:	e8 16       	cp	r14, r24
    9696:	f9 06       	cpc	r15, r25
    9698:	60 f3       	brcs	.-40     	; 0x9672 <dir_clear+0xdc>
    969a:	c6 01       	movw	r24, r12
    969c:	0e 94 ec 68 	call	0xd1d8	; 0xd1d8 <ff_memfree>
    96a0:	81 e0       	ldi	r24, 0x01	; 1
    96a2:	90 e0       	ldi	r25, 0x00	; 0
    96a4:	29 85       	ldd	r18, Y+9	; 0x09
    96a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    96a8:	2e 15       	cp	r18, r14
    96aa:	3f 05       	cpc	r19, r15
    96ac:	69 f4       	brne	.+26     	; 0x96c8 <dir_clear+0x132>
    96ae:	80 e0       	ldi	r24, 0x00	; 0
    96b0:	0b c0       	rjmp	.+22     	; 0x96c8 <dir_clear+0x132>
    96b2:	a8 01       	movw	r20, r16
    96b4:	60 e0       	ldi	r22, 0x00	; 0
    96b6:	70 e0       	ldi	r23, 0x00	; 0
    96b8:	6f dc       	rcall	.-1826   	; 0x8f98 <mem_set>
    96ba:	58 01       	movw	r10, r16
    96bc:	ab 2c       	mov	r10, r11
    96be:	bb 24       	eor	r11, r11
    96c0:	a6 94       	lsr	r10
    96c2:	e1 2c       	mov	r14, r1
    96c4:	f1 2c       	mov	r15, r1
    96c6:	e4 cf       	rjmp	.-56     	; 0x9690 <dir_clear+0xfa>
    96c8:	df 91       	pop	r29
    96ca:	cf 91       	pop	r28
    96cc:	1f 91       	pop	r17
    96ce:	0f 91       	pop	r16
    96d0:	ff 90       	pop	r15
    96d2:	ef 90       	pop	r14
    96d4:	df 90       	pop	r13
    96d6:	cf 90       	pop	r12
    96d8:	bf 90       	pop	r11
    96da:	af 90       	pop	r10
    96dc:	7f 90       	pop	r7
    96de:	6f 90       	pop	r6
    96e0:	5f 90       	pop	r5
    96e2:	4f 90       	pop	r4
    96e4:	08 95       	ret

000096e6 <move_window>:
    96e6:	a0 e0       	ldi	r26, 0x00	; 0
    96e8:	b0 e0       	ldi	r27, 0x00	; 0
    96ea:	e9 e7       	ldi	r30, 0x79	; 121
    96ec:	fb e4       	ldi	r31, 0x4B	; 75
    96ee:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    96f2:	ec 01       	movw	r28, r24
    96f4:	6a 01       	movw	r12, r20
    96f6:	7b 01       	movw	r14, r22
    96f8:	89 a9       	ldd	r24, Y+49	; 0x31
    96fa:	9a a9       	ldd	r25, Y+50	; 0x32
    96fc:	ab a9       	ldd	r26, Y+51	; 0x33
    96fe:	bc a9       	ldd	r27, Y+52	; 0x34
    9700:	84 17       	cp	r24, r20
    9702:	95 07       	cpc	r25, r21
    9704:	a6 07       	cpc	r26, r22
    9706:	b7 07       	cpc	r27, r23
    9708:	11 f1       	breq	.+68     	; 0x974e <move_window+0x68>
    970a:	8b 81       	ldd	r24, Y+3	; 0x03
    970c:	81 11       	cpse	r24, r1
    970e:	13 c0       	rjmp	.+38     	; 0x9736 <move_window+0x50>
    9710:	01 e0       	ldi	r16, 0x01	; 1
    9712:	10 e0       	ldi	r17, 0x00	; 0
    9714:	a7 01       	movw	r20, r14
    9716:	96 01       	movw	r18, r12
    9718:	be 01       	movw	r22, r28
    971a:	6b 5c       	subi	r22, 0xCB	; 203
    971c:	7f 4f       	sbci	r23, 0xFF	; 255
    971e:	89 81       	ldd	r24, Y+1	; 0x01
    9720:	0e 94 a5 69 	call	0xd34a	; 0xd34a <disk_read>
    9724:	89 2b       	or	r24, r25
    9726:	61 f0       	breq	.+24     	; 0x9740 <move_window+0x5a>
    9728:	81 e0       	ldi	r24, 0x01	; 1
    972a:	90 e0       	ldi	r25, 0x00	; 0
    972c:	cc 24       	eor	r12, r12
    972e:	ca 94       	dec	r12
    9730:	dc 2c       	mov	r13, r12
    9732:	76 01       	movw	r14, r12
    9734:	07 c0       	rjmp	.+14     	; 0x9744 <move_window+0x5e>
    9736:	ce 01       	movw	r24, r28
    9738:	69 de       	rcall	.-814    	; 0x940c <sync_window.part.5>
    973a:	00 97       	sbiw	r24, 0x00	; 0
    973c:	51 f4       	brne	.+20     	; 0x9752 <move_window+0x6c>
    973e:	e8 cf       	rjmp	.-48     	; 0x9710 <move_window+0x2a>
    9740:	80 e0       	ldi	r24, 0x00	; 0
    9742:	90 e0       	ldi	r25, 0x00	; 0
    9744:	c9 aa       	std	Y+49, r12	; 0x31
    9746:	da aa       	std	Y+50, r13	; 0x32
    9748:	eb aa       	std	Y+51, r14	; 0x33
    974a:	fc aa       	std	Y+52, r15	; 0x34
    974c:	02 c0       	rjmp	.+4      	; 0x9752 <move_window+0x6c>
    974e:	80 e0       	ldi	r24, 0x00	; 0
    9750:	90 e0       	ldi	r25, 0x00	; 0
    9752:	cd b7       	in	r28, 0x3d	; 61
    9754:	de b7       	in	r29, 0x3e	; 62
    9756:	e8 e0       	ldi	r30, 0x08	; 8
    9758:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000975c <check_fs>:
    975c:	cf 93       	push	r28
    975e:	df 93       	push	r29
    9760:	ec 01       	movw	r28, r24
    9762:	1b 82       	std	Y+3, r1	; 0x03
    9764:	8f ef       	ldi	r24, 0xFF	; 255
    9766:	9f ef       	ldi	r25, 0xFF	; 255
    9768:	dc 01       	movw	r26, r24
    976a:	89 ab       	std	Y+49, r24	; 0x31
    976c:	9a ab       	std	Y+50, r25	; 0x32
    976e:	ab ab       	std	Y+51, r26	; 0x33
    9770:	bc ab       	std	Y+52, r27	; 0x34
    9772:	ce 01       	movw	r24, r28
    9774:	b8 df       	rcall	.-144    	; 0x96e6 <move_window>
    9776:	89 2b       	or	r24, r25
    9778:	19 f5       	brne	.+70     	; 0x97c0 <check_fs+0x64>
    977a:	fe 01       	movw	r30, r28
    977c:	ed 5c       	subi	r30, 0xCD	; 205
    977e:	fd 4f       	sbci	r31, 0xFD	; 253
    9780:	80 81       	ld	r24, Z
    9782:	91 81       	ldd	r25, Z+1	; 0x01
    9784:	85 35       	cpi	r24, 0x55	; 85
    9786:	9a 4a       	sbci	r25, 0xAA	; 170
    9788:	f1 f4       	brne	.+60     	; 0x97c6 <check_fs+0x6a>
    978a:	8d a9       	ldd	r24, Y+53	; 0x35
    978c:	8b 3e       	cpi	r24, 0xEB	; 235
    978e:	19 f0       	breq	.+6      	; 0x9796 <check_fs+0x3a>
    9790:	88 5e       	subi	r24, 0xE8	; 232
    9792:	82 30       	cpi	r24, 0x02	; 2
    9794:	f0 f4       	brcc	.+60     	; 0x97d2 <check_fs+0x76>
    9796:	43 e0       	ldi	r20, 0x03	; 3
    9798:	50 e0       	ldi	r21, 0x00	; 0
    979a:	66 ec       	ldi	r22, 0xC6	; 198
    979c:	78 e0       	ldi	r23, 0x08	; 8
    979e:	ce 01       	movw	r24, r28
    97a0:	85 59       	subi	r24, 0x95	; 149
    97a2:	9f 4f       	sbci	r25, 0xFF	; 255
    97a4:	02 dc       	rcall	.-2044   	; 0x8faa <mem_cmp>
    97a6:	89 2b       	or	r24, r25
    97a8:	89 f0       	breq	.+34     	; 0x97cc <check_fs+0x70>
    97aa:	45 e0       	ldi	r20, 0x05	; 5
    97ac:	50 e0       	ldi	r21, 0x00	; 0
    97ae:	61 e2       	ldi	r22, 0x21	; 33
    97b0:	74 e0       	ldi	r23, 0x04	; 4
    97b2:	ce 01       	movw	r24, r28
    97b4:	89 57       	subi	r24, 0x79	; 121
    97b6:	9f 4f       	sbci	r25, 0xFF	; 255
    97b8:	f8 db       	rcall	.-2064   	; 0x8faa <mem_cmp>
    97ba:	89 2b       	or	r24, r25
    97bc:	51 f4       	brne	.+20     	; 0x97d2 <check_fs+0x76>
    97be:	06 c0       	rjmp	.+12     	; 0x97cc <check_fs+0x70>
    97c0:	84 e0       	ldi	r24, 0x04	; 4
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	08 c0       	rjmp	.+16     	; 0x97d6 <check_fs+0x7a>
    97c6:	83 e0       	ldi	r24, 0x03	; 3
    97c8:	90 e0       	ldi	r25, 0x00	; 0
    97ca:	05 c0       	rjmp	.+10     	; 0x97d6 <check_fs+0x7a>
    97cc:	80 e0       	ldi	r24, 0x00	; 0
    97ce:	90 e0       	ldi	r25, 0x00	; 0
    97d0:	02 c0       	rjmp	.+4      	; 0x97d6 <check_fs+0x7a>
    97d2:	82 e0       	ldi	r24, 0x02	; 2
    97d4:	90 e0       	ldi	r25, 0x00	; 0
    97d6:	df 91       	pop	r29
    97d8:	cf 91       	pop	r28
    97da:	08 95       	ret

000097dc <mount_volume>:
    97dc:	a0 e2       	ldi	r26, 0x20	; 32
    97de:	b0 e0       	ldi	r27, 0x00	; 0
    97e0:	e4 ef       	ldi	r30, 0xF4	; 244
    97e2:	fb e4       	ldi	r31, 0x4B	; 75
    97e4:	0c 94 ee e6 	jmp	0x1cddc	; 0x1cddc <__prologue_saves__+0x4>
    97e8:	5b 01       	movw	r10, r22
    97ea:	f4 2e       	mov	r15, r20
    97ec:	db 01       	movw	r26, r22
    97ee:	1d 92       	st	X+, r1
    97f0:	1c 92       	st	X, r1
    97f2:	5d dc       	rcall	.-1862   	; 0x90ae <get_ldnumber>
    97f4:	6c 01       	movw	r12, r24
    97f6:	97 fd       	sbrc	r25, 7
    97f8:	39 c2       	rjmp	.+1138   	; 0x9c6c <mount_volume+0x490>
    97fa:	fc 01       	movw	r30, r24
    97fc:	ee 0f       	add	r30, r30
    97fe:	ff 1f       	adc	r31, r31
    9800:	ef 5d       	subi	r30, 0xDF	; 223
    9802:	f7 4e       	sbci	r31, 0xE7	; 231
    9804:	00 81       	ld	r16, Z
    9806:	11 81       	ldd	r17, Z+1	; 0x01
    9808:	01 15       	cp	r16, r1
    980a:	11 05       	cpc	r17, r1
    980c:	09 f4       	brne	.+2      	; 0x9810 <mount_volume+0x34>
    980e:	31 c2       	rjmp	.+1122   	; 0x9c72 <mount_volume+0x496>
    9810:	f5 01       	movw	r30, r10
    9812:	11 83       	std	Z+1, r17	; 0x01
    9814:	00 83       	st	Z, r16
    9816:	ff 2d       	mov	r31, r15
    9818:	fe 7f       	andi	r31, 0xFE	; 254
    981a:	ff 2e       	mov	r15, r31
    981c:	d8 01       	movw	r26, r16
    981e:	8c 91       	ld	r24, X
    9820:	88 23       	and	r24, r24
    9822:	71 f0       	breq	.+28     	; 0x9840 <mount_volume+0x64>
    9824:	f8 01       	movw	r30, r16
    9826:	81 81       	ldd	r24, Z+1	; 0x01
    9828:	0e 94 99 69 	call	0xd332	; 0xd332 <disk_status>
    982c:	80 fd       	sbrc	r24, 0
    982e:	08 c0       	rjmp	.+16     	; 0x9840 <mount_volume+0x64>
    9830:	ff 20       	and	r15, r15
    9832:	09 f4       	brne	.+2      	; 0x9836 <mount_volume+0x5a>
    9834:	21 c2       	rjmp	.+1090   	; 0x9c78 <mount_volume+0x49c>
    9836:	82 ff       	sbrs	r24, 2
    9838:	1f c2       	rjmp	.+1086   	; 0x9c78 <mount_volume+0x49c>
    983a:	8a e0       	ldi	r24, 0x0A	; 10
    983c:	90 e0       	ldi	r25, 0x00	; 0
    983e:	24 c2       	rjmp	.+1096   	; 0x9c88 <mount_volume+0x4ac>
    9840:	d8 01       	movw	r26, r16
    9842:	1c 92       	st	X, r1
    9844:	f8 01       	movw	r30, r16
    9846:	c1 82       	std	Z+1, r12	; 0x01
    9848:	8c 2d       	mov	r24, r12
    984a:	0e 94 9f 69 	call	0xd33e	; 0xd33e <disk_initialize>
    984e:	80 fd       	sbrc	r24, 0
    9850:	16 c2       	rjmp	.+1068   	; 0x9c7e <mount_volume+0x4a2>
    9852:	ff 20       	and	r15, r15
    9854:	11 f0       	breq	.+4      	; 0x985a <mount_volume+0x7e>
    9856:	82 fd       	sbrc	r24, 2
    9858:	f0 cf       	rjmp	.-32     	; 0x983a <mount_volume+0x5e>
    985a:	40 e0       	ldi	r20, 0x00	; 0
    985c:	50 e0       	ldi	r21, 0x00	; 0
    985e:	ba 01       	movw	r22, r20
    9860:	c8 01       	movw	r24, r16
    9862:	7c df       	rcall	.-264    	; 0x975c <check_fs>
    9864:	82 30       	cpi	r24, 0x02	; 2
    9866:	91 05       	cpc	r25, r1
    9868:	b9 f5       	brne	.+110    	; 0x98d8 <mount_volume+0xfc>
    986a:	68 01       	movw	r12, r16
    986c:	f5 e0       	ldi	r31, 0x05	; 5
    986e:	cf 1a       	sub	r12, r31
    9870:	fe ef       	ldi	r31, 0xFE	; 254
    9872:	df 0a       	sbc	r13, r31
    9874:	9e 01       	movw	r18, r28
    9876:	2f 5f       	subi	r18, 0xFF	; 255
    9878:	3f 4f       	sbci	r19, 0xFF	; 255
    987a:	79 01       	movw	r14, r18
    987c:	48 01       	movw	r8, r16
    987e:	35 ec       	ldi	r19, 0xC5	; 197
    9880:	83 1a       	sub	r8, r19
    9882:	3d ef       	ldi	r19, 0xFD	; 253
    9884:	93 0a       	sbc	r9, r19
    9886:	57 01       	movw	r10, r14
    9888:	c6 01       	movw	r24, r12
    988a:	6b db       	rcall	.-2346   	; 0x8f62 <ld_dword>
    988c:	d5 01       	movw	r26, r10
    988e:	6d 93       	st	X+, r22
    9890:	7d 93       	st	X+, r23
    9892:	8d 93       	st	X+, r24
    9894:	9d 93       	st	X+, r25
    9896:	5d 01       	movw	r10, r26
    9898:	b0 e1       	ldi	r27, 0x10	; 16
    989a:	cb 0e       	add	r12, r27
    989c:	d1 1c       	adc	r13, r1
    989e:	c8 14       	cp	r12, r8
    98a0:	d9 04       	cpc	r13, r9
    98a2:	91 f7       	brne	.-28     	; 0x9888 <mount_volume+0xac>
    98a4:	6e 01       	movw	r12, r28
    98a6:	e1 e1       	ldi	r30, 0x11	; 17
    98a8:	ce 0e       	add	r12, r30
    98aa:	d1 1c       	adc	r13, r1
    98ac:	d7 01       	movw	r26, r14
    98ae:	4d 91       	ld	r20, X+
    98b0:	5d 91       	ld	r21, X+
    98b2:	6d 91       	ld	r22, X+
    98b4:	7d 91       	ld	r23, X+
    98b6:	7d 01       	movw	r14, r26
    98b8:	41 15       	cp	r20, r1
    98ba:	51 05       	cpc	r21, r1
    98bc:	61 05       	cpc	r22, r1
    98be:	71 05       	cpc	r23, r1
    98c0:	31 f0       	breq	.+12     	; 0x98ce <mount_volume+0xf2>
    98c2:	c8 01       	movw	r24, r16
    98c4:	4b df       	rcall	.-362    	; 0x975c <check_fs>
    98c6:	82 30       	cpi	r24, 0x02	; 2
    98c8:	91 05       	cpc	r25, r1
    98ca:	18 f4       	brcc	.+6      	; 0x98d2 <mount_volume+0xf6>
    98cc:	05 c0       	rjmp	.+10     	; 0x98d8 <mount_volume+0xfc>
    98ce:	83 e0       	ldi	r24, 0x03	; 3
    98d0:	90 e0       	ldi	r25, 0x00	; 0
    98d2:	ce 14       	cp	r12, r14
    98d4:	df 04       	cpc	r13, r15
    98d6:	51 f7       	brne	.-44     	; 0x98ac <mount_volume+0xd0>
    98d8:	84 30       	cpi	r24, 0x04	; 4
    98da:	91 05       	cpc	r25, r1
    98dc:	09 f4       	brne	.+2      	; 0x98e0 <mount_volume+0x104>
    98de:	d2 c1       	rjmp	.+932    	; 0x9c84 <mount_volume+0x4a8>
    98e0:	02 97       	sbiw	r24, 0x02	; 2
    98e2:	18 f0       	brcs	.+6      	; 0x98ea <mount_volume+0x10e>
    98e4:	8d e0       	ldi	r24, 0x0D	; 13
    98e6:	90 e0       	ldi	r25, 0x00	; 0
    98e8:	cf c1       	rjmp	.+926    	; 0x9c88 <mount_volume+0x4ac>
    98ea:	f8 01       	movw	r30, r16
    98ec:	e0 5c       	subi	r30, 0xC0	; 192
    98ee:	ff 4f       	sbci	r31, 0xFF	; 255
    98f0:	80 81       	ld	r24, Z
    98f2:	91 81       	ldd	r25, Z+1	; 0x01
    98f4:	81 15       	cp	r24, r1
    98f6:	92 40       	sbci	r25, 0x02	; 2
    98f8:	a9 f7       	brne	.-22     	; 0x98e4 <mount_volume+0x108>
    98fa:	3b 96       	adiw	r30, 0x0b	; 11
    98fc:	40 80       	ld	r4, Z
    98fe:	51 80       	ldd	r5, Z+1	; 0x01
    9900:	41 14       	cp	r4, r1
    9902:	51 04       	cpc	r5, r1
    9904:	19 f0       	breq	.+6      	; 0x990c <mount_volume+0x130>
    9906:	61 2c       	mov	r6, r1
    9908:	71 2c       	mov	r7, r1
    990a:	06 c0       	rjmp	.+12     	; 0x9918 <mount_volume+0x13c>
    990c:	c8 01       	movw	r24, r16
    990e:	87 5a       	subi	r24, 0xA7	; 167
    9910:	9f 4f       	sbci	r25, 0xFF	; 255
    9912:	27 db       	rcall	.-2482   	; 0x8f62 <ld_dword>
    9914:	2b 01       	movw	r4, r22
    9916:	3c 01       	movw	r6, r24
    9918:	f8 01       	movw	r30, r16
    991a:	21 a9       	ldd	r18, Z+49	; 0x31
    991c:	32 a9       	ldd	r19, Z+50	; 0x32
    991e:	43 a9       	ldd	r20, Z+51	; 0x33
    9920:	54 a9       	ldd	r21, Z+52	; 0x34
    9922:	29 8b       	std	Y+17, r18	; 0x11
    9924:	3a 8b       	std	Y+18, r19	; 0x12
    9926:	4b 8b       	std	Y+19, r20	; 0x13
    9928:	5c 8b       	std	Y+20, r21	; 0x14
    992a:	45 8e       	std	Z+29, r4	; 0x1d
    992c:	56 8e       	std	Z+30, r5	; 0x1e
    992e:	67 8e       	std	Z+31, r6	; 0x1f
    9930:	70 a2       	std	Z+32, r7	; 0x20
    9932:	eb 5b       	subi	r30, 0xBB	; 187
    9934:	ff 4f       	sbci	r31, 0xFF	; 255
    9936:	a0 80       	ld	r10, Z
    9938:	f8 01       	movw	r30, r16
    993a:	a2 82       	std	Z+2, r10	; 0x02
    993c:	8f ef       	ldi	r24, 0xFF	; 255
    993e:	8a 0d       	add	r24, r10
    9940:	82 30       	cpi	r24, 0x02	; 2
    9942:	80 f6       	brcc	.-96     	; 0x98e4 <mount_volume+0x108>
    9944:	ee 5b       	subi	r30, 0xBE	; 190
    9946:	ff 4f       	sbci	r31, 0xFF	; 255
    9948:	b0 80       	ld	r11, Z
    994a:	8b 2d       	mov	r24, r11
    994c:	90 e0       	ldi	r25, 0x00	; 0
    994e:	f8 01       	movw	r30, r16
    9950:	92 87       	std	Z+10, r25	; 0x0a
    9952:	81 87       	std	Z+9, r24	; 0x09
    9954:	00 97       	sbiw	r24, 0x00	; 0
    9956:	31 f2       	breq	.-116    	; 0x98e4 <mount_volume+0x108>
    9958:	9c 01       	movw	r18, r24
    995a:	21 50       	subi	r18, 0x01	; 1
    995c:	31 09       	sbc	r19, r1
    995e:	82 23       	and	r24, r18
    9960:	93 23       	and	r25, r19
    9962:	89 2b       	or	r24, r25
    9964:	09 f0       	breq	.+2      	; 0x9968 <mount_volume+0x18c>
    9966:	be cf       	rjmp	.-132    	; 0x98e4 <mount_volume+0x108>
    9968:	ea 5b       	subi	r30, 0xBA	; 186
    996a:	ff 4f       	sbci	r31, 0xFF	; 255
    996c:	80 80       	ld	r8, Z
    996e:	91 80       	ldd	r9, Z+1	; 0x01
    9970:	f8 01       	movw	r30, r16
    9972:	90 86       	std	Z+8, r9	; 0x08
    9974:	87 82       	std	Z+7, r8	; 0x07
    9976:	c4 01       	movw	r24, r8
    9978:	8f 70       	andi	r24, 0x0F	; 15
    997a:	99 27       	eor	r25, r25
    997c:	89 2b       	or	r24, r25
    997e:	09 f0       	breq	.+2      	; 0x9982 <mount_volume+0x1a6>
    9980:	b1 cf       	rjmp	.-158    	; 0x98e4 <mount_volume+0x108>
    9982:	e8 5b       	subi	r30, 0xB8	; 184
    9984:	ff 4f       	sbci	r31, 0xFF	; 255
    9986:	80 81       	ld	r24, Z
    9988:	91 81       	ldd	r25, Z+1	; 0x01
    998a:	6c 01       	movw	r12, r24
    998c:	e1 2c       	mov	r14, r1
    998e:	f1 2c       	mov	r15, r1
    9990:	89 2b       	or	r24, r25
    9992:	31 f4       	brne	.+12     	; 0x99a0 <mount_volume+0x1c4>
    9994:	c8 01       	movw	r24, r16
    9996:	8b 5a       	subi	r24, 0xAB	; 171
    9998:	9f 4f       	sbci	r25, 0xFF	; 255
    999a:	e3 da       	rcall	.-2618   	; 0x8f62 <ld_dword>
    999c:	6b 01       	movw	r12, r22
    999e:	7c 01       	movw	r14, r24
    99a0:	f8 01       	movw	r30, r16
    99a2:	ed 5b       	subi	r30, 0xBD	; 189
    99a4:	ff 4f       	sbci	r31, 0xFF	; 255
    99a6:	01 90       	ld	r0, Z+
    99a8:	f0 81       	ld	r31, Z
    99aa:	e0 2d       	mov	r30, r0
    99ac:	30 97       	sbiw	r30, 0x00	; 0
    99ae:	09 f4       	brne	.+2      	; 0x99b2 <mount_volume+0x1d6>
    99b0:	99 cf       	rjmp	.-206    	; 0x98e4 <mount_volume+0x108>
    99b2:	aa 2d       	mov	r26, r10
    99b4:	b0 e0       	ldi	r27, 0x00	; 0
    99b6:	a3 01       	movw	r20, r6
    99b8:	92 01       	movw	r18, r4
    99ba:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    99be:	69 8f       	std	Y+25, r22	; 0x19
    99c0:	7a 8f       	std	Y+26, r23	; 0x1a
    99c2:	8b 8f       	std	Y+27, r24	; 0x1b
    99c4:	9c 8f       	std	Y+28, r25	; 0x1c
    99c6:	9f 01       	movw	r18, r30
    99c8:	40 e0       	ldi	r20, 0x00	; 0
    99ca:	50 e0       	ldi	r21, 0x00	; 0
    99cc:	2d 8f       	std	Y+29, r18	; 0x1d
    99ce:	3e 8f       	std	Y+30, r19	; 0x1e
    99d0:	4f 8f       	std	Y+31, r20	; 0x1f
    99d2:	58 a3       	std	Y+32, r21	; 0x20
    99d4:	c4 01       	movw	r24, r8
    99d6:	f4 e0       	ldi	r31, 0x04	; 4
    99d8:	96 95       	lsr	r25
    99da:	87 95       	ror	r24
    99dc:	fa 95       	dec	r31
    99de:	e1 f7       	brne	.-8      	; 0x99d8 <mount_volume+0x1fc>
    99e0:	28 0f       	add	r18, r24
    99e2:	39 1f       	adc	r19, r25
    99e4:	41 1d       	adc	r20, r1
    99e6:	51 1d       	adc	r21, r1
    99e8:	da 01       	movw	r26, r20
    99ea:	c9 01       	movw	r24, r18
    99ec:	29 8d       	ldd	r18, Y+25	; 0x19
    99ee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    99f0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    99f2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    99f4:	28 0f       	add	r18, r24
    99f6:	39 1f       	adc	r19, r25
    99f8:	4a 1f       	adc	r20, r26
    99fa:	5b 1f       	adc	r21, r27
    99fc:	2d 8b       	std	Y+21, r18	; 0x15
    99fe:	3e 8b       	std	Y+22, r19	; 0x16
    9a00:	4f 8b       	std	Y+23, r20	; 0x17
    9a02:	58 8f       	std	Y+24, r21	; 0x18
    9a04:	c2 16       	cp	r12, r18
    9a06:	d3 06       	cpc	r13, r19
    9a08:	e4 06       	cpc	r14, r20
    9a0a:	f5 06       	cpc	r15, r21
    9a0c:	08 f4       	brcc	.+2      	; 0x9a10 <mount_volume+0x234>
    9a0e:	6a cf       	rjmp	.-300    	; 0x98e4 <mount_volume+0x108>
    9a10:	c7 01       	movw	r24, r14
    9a12:	b6 01       	movw	r22, r12
    9a14:	62 1b       	sub	r22, r18
    9a16:	73 0b       	sbc	r23, r19
    9a18:	84 0b       	sbc	r24, r20
    9a1a:	95 0b       	sbc	r25, r21
    9a1c:	2b 2d       	mov	r18, r11
    9a1e:	30 e0       	ldi	r19, 0x00	; 0
    9a20:	40 e0       	ldi	r20, 0x00	; 0
    9a22:	50 e0       	ldi	r21, 0x00	; 0
    9a24:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    9a28:	da 01       	movw	r26, r20
    9a2a:	c9 01       	movw	r24, r18
    9a2c:	01 97       	sbiw	r24, 0x01	; 1
    9a2e:	a1 09       	sbc	r26, r1
    9a30:	b1 09       	sbc	r27, r1
    9a32:	85 3f       	cpi	r24, 0xF5	; 245
    9a34:	9f 4f       	sbci	r25, 0xFF	; 255
    9a36:	af 4f       	sbci	r26, 0xFF	; 255
    9a38:	bf 40       	sbci	r27, 0x0F	; 15
    9a3a:	08 f0       	brcs	.+2      	; 0x9a3e <mount_volume+0x262>
    9a3c:	53 cf       	rjmp	.-346    	; 0x98e4 <mount_volume+0x108>
    9a3e:	26 3f       	cpi	r18, 0xF6	; 246
    9a40:	8f ef       	ldi	r24, 0xFF	; 255
    9a42:	38 07       	cpc	r19, r24
    9a44:	41 05       	cpc	r20, r1
    9a46:	51 05       	cpc	r21, r1
    9a48:	50 f4       	brcc	.+20     	; 0x9a5e <mount_volume+0x282>
    9a4a:	26 3f       	cpi	r18, 0xF6	; 246
    9a4c:	9f e0       	ldi	r25, 0x0F	; 15
    9a4e:	39 07       	cpc	r19, r25
    9a50:	41 05       	cpc	r20, r1
    9a52:	51 05       	cpc	r21, r1
    9a54:	40 f4       	brcc	.+16     	; 0x9a66 <mount_volume+0x28a>
    9a56:	aa 24       	eor	r10, r10
    9a58:	a3 94       	inc	r10
    9a5a:	b1 2c       	mov	r11, r1
    9a5c:	07 c0       	rjmp	.+14     	; 0x9a6c <mount_volume+0x290>
    9a5e:	73 e0       	ldi	r23, 0x03	; 3
    9a60:	a7 2e       	mov	r10, r23
    9a62:	b1 2c       	mov	r11, r1
    9a64:	03 c0       	rjmp	.+6      	; 0x9a6c <mount_volume+0x290>
    9a66:	62 e0       	ldi	r22, 0x02	; 2
    9a68:	a6 2e       	mov	r10, r22
    9a6a:	b1 2c       	mov	r11, r1
    9a6c:	69 01       	movw	r12, r18
    9a6e:	7a 01       	movw	r14, r20
    9a70:	a2 e0       	ldi	r26, 0x02	; 2
    9a72:	ca 0e       	add	r12, r26
    9a74:	d1 1c       	adc	r13, r1
    9a76:	e1 1c       	adc	r14, r1
    9a78:	f1 1c       	adc	r15, r1
    9a7a:	f8 01       	movw	r30, r16
    9a7c:	c1 8e       	std	Z+25, r12	; 0x19
    9a7e:	d2 8e       	std	Z+26, r13	; 0x1a
    9a80:	e3 8e       	std	Z+27, r14	; 0x1b
    9a82:	f4 8e       	std	Z+28, r15	; 0x1c
    9a84:	29 89       	ldd	r18, Y+17	; 0x11
    9a86:	3a 89       	ldd	r19, Y+18	; 0x12
    9a88:	4b 89       	ldd	r20, Y+19	; 0x13
    9a8a:	5c 89       	ldd	r21, Y+20	; 0x14
    9a8c:	21 a3       	std	Z+33, r18	; 0x21
    9a8e:	32 a3       	std	Z+34, r19	; 0x22
    9a90:	43 a3       	std	Z+35, r20	; 0x23
    9a92:	54 a3       	std	Z+36, r21	; 0x24
    9a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9a96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9a98:	af 8d       	ldd	r26, Y+31	; 0x1f
    9a9a:	b8 a1       	ldd	r27, Y+32	; 0x20
    9a9c:	28 0f       	add	r18, r24
    9a9e:	39 1f       	adc	r19, r25
    9aa0:	4a 1f       	adc	r20, r26
    9aa2:	5b 1f       	adc	r21, r27
    9aa4:	2d 8f       	std	Y+29, r18	; 0x1d
    9aa6:	3e 8f       	std	Y+30, r19	; 0x1e
    9aa8:	4f 8f       	std	Y+31, r20	; 0x1f
    9aaa:	58 a3       	std	Y+32, r21	; 0x20
    9aac:	25 a3       	std	Z+37, r18	; 0x25
    9aae:	36 a3       	std	Z+38, r19	; 0x26
    9ab0:	47 a3       	std	Z+39, r20	; 0x27
    9ab2:	50 a7       	std	Z+40, r21	; 0x28
    9ab4:	49 89       	ldd	r20, Y+17	; 0x11
    9ab6:	5a 89       	ldd	r21, Y+18	; 0x12
    9ab8:	6b 89       	ldd	r22, Y+19	; 0x13
    9aba:	7c 89       	ldd	r23, Y+20	; 0x14
    9abc:	8d 89       	ldd	r24, Y+21	; 0x15
    9abe:	9e 89       	ldd	r25, Y+22	; 0x16
    9ac0:	af 89       	ldd	r26, Y+23	; 0x17
    9ac2:	b8 8d       	ldd	r27, Y+24	; 0x18
    9ac4:	48 0f       	add	r20, r24
    9ac6:	59 1f       	adc	r21, r25
    9ac8:	6a 1f       	adc	r22, r26
    9aca:	7b 1f       	adc	r23, r27
    9acc:	45 a7       	std	Z+45, r20	; 0x2d
    9ace:	56 a7       	std	Z+46, r21	; 0x2e
    9ad0:	67 a7       	std	Z+47, r22	; 0x2f
    9ad2:	70 ab       	std	Z+48, r23	; 0x30
    9ad4:	f3 e0       	ldi	r31, 0x03	; 3
    9ad6:	af 16       	cp	r10, r31
    9ad8:	b1 04       	cpc	r11, r1
    9ada:	e9 f4       	brne	.+58     	; 0x9b16 <mount_volume+0x33a>
    9adc:	f8 01       	movw	r30, r16
    9ade:	e1 5a       	subi	r30, 0xA1	; 161
    9ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    9ae2:	80 81       	ld	r24, Z
    9ae4:	91 81       	ldd	r25, Z+1	; 0x01
    9ae6:	89 2b       	or	r24, r25
    9ae8:	09 f0       	breq	.+2      	; 0x9aec <mount_volume+0x310>
    9aea:	fc ce       	rjmp	.-520    	; 0x98e4 <mount_volume+0x108>
    9aec:	81 14       	cp	r8, r1
    9aee:	91 04       	cpc	r9, r1
    9af0:	09 f0       	breq	.+2      	; 0x9af4 <mount_volume+0x318>
    9af2:	f8 ce       	rjmp	.-528    	; 0x98e4 <mount_volume+0x108>
    9af4:	c8 01       	movw	r24, r16
    9af6:	8f 59       	subi	r24, 0x9F	; 159
    9af8:	9f 4f       	sbci	r25, 0xFF	; 255
    9afa:	33 da       	rcall	.-2970   	; 0x8f62 <ld_dword>
    9afc:	f8 01       	movw	r30, r16
    9afe:	61 a7       	std	Z+41, r22	; 0x29
    9b00:	72 a7       	std	Z+42, r23	; 0x2a
    9b02:	83 a7       	std	Z+43, r24	; 0x2b
    9b04:	94 a7       	std	Z+44, r25	; 0x2c
    9b06:	42 e0       	ldi	r20, 0x02	; 2
    9b08:	cc 0c       	add	r12, r12
    9b0a:	dd 1c       	adc	r13, r13
    9b0c:	ee 1c       	adc	r14, r14
    9b0e:	ff 1c       	adc	r15, r15
    9b10:	4a 95       	dec	r20
    9b12:	d1 f7       	brne	.-12     	; 0x9b08 <mount_volume+0x32c>
    9b14:	33 c0       	rjmp	.+102    	; 0x9b7c <mount_volume+0x3a0>
    9b16:	81 14       	cp	r8, r1
    9b18:	91 04       	cpc	r9, r1
    9b1a:	09 f4       	brne	.+2      	; 0x9b1e <mount_volume+0x342>
    9b1c:	e3 ce       	rjmp	.-570    	; 0x98e4 <mount_volume+0x108>
    9b1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9b20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9b22:	af 8d       	ldd	r26, Y+31	; 0x1f
    9b24:	b8 a1       	ldd	r27, Y+32	; 0x20
    9b26:	29 8d       	ldd	r18, Y+25	; 0x19
    9b28:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9b2a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9b2c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9b2e:	82 0f       	add	r24, r18
    9b30:	93 1f       	adc	r25, r19
    9b32:	a4 1f       	adc	r26, r20
    9b34:	b5 1f       	adc	r27, r21
    9b36:	f8 01       	movw	r30, r16
    9b38:	81 a7       	std	Z+41, r24	; 0x29
    9b3a:	92 a7       	std	Z+42, r25	; 0x2a
    9b3c:	a3 a7       	std	Z+43, r26	; 0x2b
    9b3e:	b4 a7       	std	Z+44, r27	; 0x2c
    9b40:	f2 e0       	ldi	r31, 0x02	; 2
    9b42:	af 16       	cp	r10, r31
    9b44:	b1 04       	cpc	r11, r1
    9b46:	29 f4       	brne	.+10     	; 0x9b52 <mount_volume+0x376>
    9b48:	cc 0c       	add	r12, r12
    9b4a:	dd 1c       	adc	r13, r13
    9b4c:	ee 1c       	adc	r14, r14
    9b4e:	ff 1c       	adc	r15, r15
    9b50:	15 c0       	rjmp	.+42     	; 0x9b7c <mount_volume+0x3a0>
    9b52:	a3 e0       	ldi	r26, 0x03	; 3
    9b54:	b0 e0       	ldi	r27, 0x00	; 0
    9b56:	a7 01       	movw	r20, r14
    9b58:	96 01       	movw	r18, r12
    9b5a:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    9b5e:	dc 01       	movw	r26, r24
    9b60:	cb 01       	movw	r24, r22
    9b62:	b6 95       	lsr	r27
    9b64:	a7 95       	ror	r26
    9b66:	97 95       	ror	r25
    9b68:	87 95       	ror	r24
    9b6a:	21 e0       	ldi	r18, 0x01	; 1
    9b6c:	c2 22       	and	r12, r18
    9b6e:	dd 24       	eor	r13, r13
    9b70:	ee 24       	eor	r14, r14
    9b72:	ff 24       	eor	r15, r15
    9b74:	c8 0e       	add	r12, r24
    9b76:	d9 1e       	adc	r13, r25
    9b78:	ea 1e       	adc	r14, r26
    9b7a:	fb 1e       	adc	r15, r27
    9b7c:	3f ef       	ldi	r19, 0xFF	; 255
    9b7e:	c3 0e       	add	r12, r19
    9b80:	31 e0       	ldi	r19, 0x01	; 1
    9b82:	d3 1e       	adc	r13, r19
    9b84:	e1 1c       	adc	r14, r1
    9b86:	f1 1c       	adc	r15, r1
    9b88:	89 e0       	ldi	r24, 0x09	; 9
    9b8a:	f6 94       	lsr	r15
    9b8c:	e7 94       	ror	r14
    9b8e:	d7 94       	ror	r13
    9b90:	c7 94       	ror	r12
    9b92:	8a 95       	dec	r24
    9b94:	d1 f7       	brne	.-12     	; 0x9b8a <mount_volume+0x3ae>
    9b96:	4c 14       	cp	r4, r12
    9b98:	5d 04       	cpc	r5, r13
    9b9a:	6e 04       	cpc	r6, r14
    9b9c:	7f 04       	cpc	r7, r15
    9b9e:	08 f4       	brcc	.+2      	; 0x9ba2 <mount_volume+0x3c6>
    9ba0:	a1 ce       	rjmp	.-702    	; 0x98e4 <mount_volume+0x108>
    9ba2:	8f ef       	ldi	r24, 0xFF	; 255
    9ba4:	9f ef       	ldi	r25, 0xFF	; 255
    9ba6:	dc 01       	movw	r26, r24
    9ba8:	f8 01       	movw	r30, r16
    9baa:	81 8b       	std	Z+17, r24	; 0x11
    9bac:	92 8b       	std	Z+18, r25	; 0x12
    9bae:	a3 8b       	std	Z+19, r26	; 0x13
    9bb0:	b4 8b       	std	Z+20, r27	; 0x14
    9bb2:	85 87       	std	Z+13, r24	; 0x0d
    9bb4:	96 87       	std	Z+14, r25	; 0x0e
    9bb6:	a7 87       	std	Z+15, r26	; 0x0f
    9bb8:	b0 8b       	std	Z+16, r27	; 0x10
    9bba:	80 e8       	ldi	r24, 0x80	; 128
    9bbc:	84 83       	std	Z+4, r24	; 0x04
    9bbe:	f3 e0       	ldi	r31, 0x03	; 3
    9bc0:	af 16       	cp	r10, r31
    9bc2:	b1 04       	cpc	r11, r1
    9bc4:	09 f0       	breq	.+2      	; 0x9bc8 <mount_volume+0x3ec>
    9bc6:	3f c0       	rjmp	.+126    	; 0x9c46 <mount_volume+0x46a>
    9bc8:	f8 01       	movw	r30, r16
    9bca:	eb 59       	subi	r30, 0x9B	; 155
    9bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    9bce:	80 81       	ld	r24, Z
    9bd0:	91 81       	ldd	r25, Z+1	; 0x01
    9bd2:	01 97       	sbiw	r24, 0x01	; 1
    9bd4:	c1 f5       	brne	.+112    	; 0x9c46 <mount_volume+0x46a>
    9bd6:	49 89       	ldd	r20, Y+17	; 0x11
    9bd8:	5a 89       	ldd	r21, Y+18	; 0x12
    9bda:	6b 89       	ldd	r22, Y+19	; 0x13
    9bdc:	7c 89       	ldd	r23, Y+20	; 0x14
    9bde:	4f 5f       	subi	r20, 0xFF	; 255
    9be0:	5f 4f       	sbci	r21, 0xFF	; 255
    9be2:	6f 4f       	sbci	r22, 0xFF	; 255
    9be4:	7f 4f       	sbci	r23, 0xFF	; 255
    9be6:	c8 01       	movw	r24, r16
    9be8:	7e dd       	rcall	.-1284   	; 0x96e6 <move_window>
    9bea:	89 2b       	or	r24, r25
    9bec:	61 f5       	brne	.+88     	; 0x9c46 <mount_volume+0x46a>
    9bee:	f8 01       	movw	r30, r16
    9bf0:	14 82       	std	Z+4, r1	; 0x04
    9bf2:	ed 5c       	subi	r30, 0xCD	; 205
    9bf4:	fd 4f       	sbci	r31, 0xFD	; 253
    9bf6:	80 81       	ld	r24, Z
    9bf8:	91 81       	ldd	r25, Z+1	; 0x01
    9bfa:	85 35       	cpi	r24, 0x55	; 85
    9bfc:	9a 4a       	sbci	r25, 0xAA	; 170
    9bfe:	19 f5       	brne	.+70     	; 0x9c46 <mount_volume+0x46a>
    9c00:	c8 01       	movw	r24, r16
    9c02:	c5 96       	adiw	r24, 0x35	; 53
    9c04:	ae d9       	rcall	.-3236   	; 0x8f62 <ld_dword>
    9c06:	62 35       	cpi	r22, 0x52	; 82
    9c08:	72 45       	sbci	r23, 0x52	; 82
    9c0a:	81 46       	sbci	r24, 0x61	; 97
    9c0c:	91 44       	sbci	r25, 0x41	; 65
    9c0e:	d9 f4       	brne	.+54     	; 0x9c46 <mount_volume+0x46a>
    9c10:	c8 01       	movw	r24, r16
    9c12:	87 5e       	subi	r24, 0xE7	; 231
    9c14:	9d 4f       	sbci	r25, 0xFD	; 253
    9c16:	a5 d9       	rcall	.-3254   	; 0x8f62 <ld_dword>
    9c18:	62 37       	cpi	r22, 0x72	; 114
    9c1a:	72 47       	sbci	r23, 0x72	; 114
    9c1c:	81 44       	sbci	r24, 0x41	; 65
    9c1e:	91 46       	sbci	r25, 0x61	; 97
    9c20:	91 f4       	brne	.+36     	; 0x9c46 <mount_volume+0x46a>
    9c22:	c8 01       	movw	r24, r16
    9c24:	83 5e       	subi	r24, 0xE3	; 227
    9c26:	9d 4f       	sbci	r25, 0xFD	; 253
    9c28:	9c d9       	rcall	.-3272   	; 0x8f62 <ld_dword>
    9c2a:	f8 01       	movw	r30, r16
    9c2c:	61 8b       	std	Z+17, r22	; 0x11
    9c2e:	72 8b       	std	Z+18, r23	; 0x12
    9c30:	83 8b       	std	Z+19, r24	; 0x13
    9c32:	94 8b       	std	Z+20, r25	; 0x14
    9c34:	c8 01       	movw	r24, r16
    9c36:	8f 5d       	subi	r24, 0xDF	; 223
    9c38:	9d 4f       	sbci	r25, 0xFD	; 253
    9c3a:	93 d9       	rcall	.-3290   	; 0x8f62 <ld_dword>
    9c3c:	f8 01       	movw	r30, r16
    9c3e:	65 87       	std	Z+13, r22	; 0x0d
    9c40:	76 87       	std	Z+14, r23	; 0x0e
    9c42:	87 87       	std	Z+15, r24	; 0x0f
    9c44:	90 8b       	std	Z+16, r25	; 0x10
    9c46:	d8 01       	movw	r26, r16
    9c48:	ac 92       	st	X, r10
    9c4a:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <Fsid>
    9c4e:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <Fsid+0x1>
    9c52:	01 96       	adiw	r24, 0x01	; 1
    9c54:	90 93 20 18 	sts	0x1820, r25	; 0x801820 <Fsid+0x1>
    9c58:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <Fsid>
    9c5c:	f8 01       	movw	r30, r16
    9c5e:	96 83       	std	Z+6, r25	; 0x06
    9c60:	85 83       	std	Z+5, r24	; 0x05
    9c62:	15 8a       	std	Z+21, r1	; 0x15
    9c64:	16 8a       	std	Z+22, r1	; 0x16
    9c66:	17 8a       	std	Z+23, r1	; 0x17
    9c68:	10 8e       	std	Z+24, r1	; 0x18
    9c6a:	06 c0       	rjmp	.+12     	; 0x9c78 <mount_volume+0x49c>
    9c6c:	8b e0       	ldi	r24, 0x0B	; 11
    9c6e:	90 e0       	ldi	r25, 0x00	; 0
    9c70:	0b c0       	rjmp	.+22     	; 0x9c88 <mount_volume+0x4ac>
    9c72:	8c e0       	ldi	r24, 0x0C	; 12
    9c74:	90 e0       	ldi	r25, 0x00	; 0
    9c76:	08 c0       	rjmp	.+16     	; 0x9c88 <mount_volume+0x4ac>
    9c78:	80 e0       	ldi	r24, 0x00	; 0
    9c7a:	90 e0       	ldi	r25, 0x00	; 0
    9c7c:	05 c0       	rjmp	.+10     	; 0x9c88 <mount_volume+0x4ac>
    9c7e:	83 e0       	ldi	r24, 0x03	; 3
    9c80:	90 e0       	ldi	r25, 0x00	; 0
    9c82:	02 c0       	rjmp	.+4      	; 0x9c88 <mount_volume+0x4ac>
    9c84:	81 e0       	ldi	r24, 0x01	; 1
    9c86:	90 e0       	ldi	r25, 0x00	; 0
    9c88:	a0 96       	adiw	r28, 0x20	; 32
    9c8a:	e0 e1       	ldi	r30, 0x10	; 16
    9c8c:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__epilogue_restores__+0x4>

00009c90 <put_fat>:
    9c90:	a6 e0       	ldi	r26, 0x06	; 6
    9c92:	b0 e0       	ldi	r27, 0x00	; 0
    9c94:	ee e4       	ldi	r30, 0x4E	; 78
    9c96:	fe e4       	ldi	r31, 0x4E	; 78
    9c98:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    9c9c:	42 30       	cpi	r20, 0x02	; 2
    9c9e:	51 05       	cpc	r21, r1
    9ca0:	61 05       	cpc	r22, r1
    9ca2:	71 05       	cpc	r23, r1
    9ca4:	08 f4       	brcc	.+2      	; 0x9ca8 <put_fat+0x18>
    9ca6:	e5 c0       	rjmp	.+458    	; 0x9e72 <put_fat+0x1e2>
    9ca8:	fc 01       	movw	r30, r24
    9caa:	c1 8c       	ldd	r12, Z+25	; 0x19
    9cac:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9cae:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9cb0:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9cb2:	4c 15       	cp	r20, r12
    9cb4:	5d 05       	cpc	r21, r13
    9cb6:	6e 05       	cpc	r22, r14
    9cb8:	7f 05       	cpc	r23, r15
    9cba:	08 f0       	brcs	.+2      	; 0x9cbe <put_fat+0x2e>
    9cbc:	da c0       	rjmp	.+436    	; 0x9e72 <put_fat+0x1e2>
    9cbe:	28 01       	movw	r4, r16
    9cc0:	39 01       	movw	r6, r18
    9cc2:	6a 01       	movw	r12, r20
    9cc4:	7b 01       	movw	r14, r22
    9cc6:	9e 83       	std	Y+6, r25	; 0x06
    9cc8:	8d 83       	std	Y+5, r24	; 0x05
    9cca:	80 81       	ld	r24, Z
    9ccc:	82 30       	cpi	r24, 0x02	; 2
    9cce:	09 f4       	brne	.+2      	; 0x9cd2 <put_fat+0x42>
    9cd0:	73 c0       	rjmp	.+230    	; 0x9db8 <put_fat+0x128>
    9cd2:	83 30       	cpi	r24, 0x03	; 3
    9cd4:	09 f4       	brne	.+2      	; 0x9cd8 <put_fat+0x48>
    9cd6:	92 c0       	rjmp	.+292    	; 0x9dfc <put_fat+0x16c>
    9cd8:	81 30       	cpi	r24, 0x01	; 1
    9cda:	09 f0       	breq	.+2      	; 0x9cde <put_fat+0x4e>
    9cdc:	ca c0       	rjmp	.+404    	; 0x9e72 <put_fat+0x1e2>
    9cde:	4a 01       	movw	r8, r20
    9ce0:	96 94       	lsr	r9
    9ce2:	87 94       	ror	r8
    9ce4:	84 0e       	add	r8, r20
    9ce6:	95 1e       	adc	r9, r21
    9ce8:	c4 01       	movw	r24, r8
    9cea:	89 2f       	mov	r24, r25
    9cec:	99 27       	eor	r25, r25
    9cee:	86 95       	lsr	r24
    9cf0:	45 a1       	ldd	r20, Z+37	; 0x25
    9cf2:	56 a1       	ldd	r21, Z+38	; 0x26
    9cf4:	67 a1       	ldd	r22, Z+39	; 0x27
    9cf6:	70 a5       	ldd	r23, Z+40	; 0x28
    9cf8:	48 0f       	add	r20, r24
    9cfa:	59 1f       	adc	r21, r25
    9cfc:	61 1d       	adc	r22, r1
    9cfe:	71 1d       	adc	r23, r1
    9d00:	cf 01       	movw	r24, r30
    9d02:	f1 dc       	rcall	.-1566   	; 0x96e6 <move_window>
    9d04:	5c 01       	movw	r10, r24
    9d06:	89 2b       	or	r24, r25
    9d08:	09 f0       	breq	.+2      	; 0x9d0c <put_fat+0x7c>
    9d0a:	b6 c0       	rjmp	.+364    	; 0x9e78 <put_fat+0x1e8>
    9d0c:	2d 80       	ldd	r2, Y+5	; 0x05
    9d0e:	3e 80       	ldd	r3, Y+6	; 0x06
    9d10:	f5 e3       	ldi	r31, 0x35	; 53
    9d12:	2f 0e       	add	r2, r31
    9d14:	31 1c       	adc	r3, r1
    9d16:	84 01       	movw	r16, r8
    9d18:	0f 5f       	subi	r16, 0xFF	; 255
    9d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    9d1c:	21 e0       	ldi	r18, 0x01	; 1
    9d1e:	92 22       	and	r9, r18
    9d20:	f1 01       	movw	r30, r2
    9d22:	e8 0d       	add	r30, r8
    9d24:	f9 1d       	adc	r31, r9
    9d26:	d7 01       	movw	r26, r14
    9d28:	c6 01       	movw	r24, r12
    9d2a:	81 70       	andi	r24, 0x01	; 1
    9d2c:	99 27       	eor	r25, r25
    9d2e:	aa 27       	eor	r26, r26
    9d30:	bb 27       	eor	r27, r27
    9d32:	89 83       	std	Y+1, r24	; 0x01
    9d34:	9a 83       	std	Y+2, r25	; 0x02
    9d36:	ab 83       	std	Y+3, r26	; 0x03
    9d38:	bc 83       	std	Y+4, r27	; 0x04
    9d3a:	c0 fe       	sbrs	r12, 0
    9d3c:	09 c0       	rjmp	.+18     	; 0x9d50 <put_fat+0xc0>
    9d3e:	80 81       	ld	r24, Z
    9d40:	28 2f       	mov	r18, r24
    9d42:	2f 70       	andi	r18, 0x0F	; 15
    9d44:	a0 e1       	ldi	r26, 0x10	; 16
    9d46:	4a 9e       	mul	r4, r26
    9d48:	c0 01       	movw	r24, r0
    9d4a:	11 24       	eor	r1, r1
    9d4c:	82 2b       	or	r24, r18
    9d4e:	01 c0       	rjmp	.+2      	; 0x9d52 <put_fat+0xc2>
    9d50:	84 2d       	mov	r24, r4
    9d52:	80 83       	st	Z, r24
    9d54:	81 e0       	ldi	r24, 0x01	; 1
    9d56:	ed 81       	ldd	r30, Y+5	; 0x05
    9d58:	fe 81       	ldd	r31, Y+6	; 0x06
    9d5a:	83 83       	std	Z+3, r24	; 0x03
    9d5c:	45 a1       	ldd	r20, Z+37	; 0x25
    9d5e:	56 a1       	ldd	r21, Z+38	; 0x26
    9d60:	67 a1       	ldd	r22, Z+39	; 0x27
    9d62:	70 a5       	ldd	r23, Z+40	; 0x28
    9d64:	c8 01       	movw	r24, r16
    9d66:	89 2f       	mov	r24, r25
    9d68:	99 27       	eor	r25, r25
    9d6a:	86 95       	lsr	r24
    9d6c:	48 0f       	add	r20, r24
    9d6e:	59 1f       	adc	r21, r25
    9d70:	61 1d       	adc	r22, r1
    9d72:	71 1d       	adc	r23, r1
    9d74:	cf 01       	movw	r24, r30
    9d76:	b7 dc       	rcall	.-1682   	; 0x96e6 <move_window>
    9d78:	5c 01       	movw	r10, r24
    9d7a:	89 2b       	or	r24, r25
    9d7c:	09 f0       	breq	.+2      	; 0x9d80 <put_fat+0xf0>
    9d7e:	7c c0       	rjmp	.+248    	; 0x9e78 <put_fat+0x1e8>
    9d80:	11 70       	andi	r17, 0x01	; 1
    9d82:	f1 01       	movw	r30, r2
    9d84:	e0 0f       	add	r30, r16
    9d86:	f1 1f       	adc	r31, r17
    9d88:	89 81       	ldd	r24, Y+1	; 0x01
    9d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    9d8c:	ab 81       	ldd	r26, Y+3	; 0x03
    9d8e:	bc 81       	ldd	r27, Y+4	; 0x04
    9d90:	89 2b       	or	r24, r25
    9d92:	8a 2b       	or	r24, r26
    9d94:	8b 2b       	or	r24, r27
    9d96:	41 f0       	breq	.+16     	; 0x9da8 <put_fat+0x118>
    9d98:	54 e0       	ldi	r21, 0x04	; 4
    9d9a:	76 94       	lsr	r7
    9d9c:	67 94       	ror	r6
    9d9e:	57 94       	ror	r5
    9da0:	47 94       	ror	r4
    9da2:	5a 95       	dec	r21
    9da4:	d1 f7       	brne	.-12     	; 0x9d9a <put_fat+0x10a>
    9da6:	06 c0       	rjmp	.+12     	; 0x9db4 <put_fat+0x124>
    9da8:	00 81       	ld	r16, Z
    9daa:	00 7f       	andi	r16, 0xF0	; 240
    9dac:	85 2d       	mov	r24, r5
    9dae:	8f 70       	andi	r24, 0x0F	; 15
    9db0:	40 2e       	mov	r4, r16
    9db2:	48 2a       	or	r4, r24
    9db4:	40 82       	st	Z, r4
    9db6:	58 c0       	rjmp	.+176    	; 0x9e68 <put_fat+0x1d8>
    9db8:	77 27       	eor	r23, r23
    9dba:	6f 2d       	mov	r22, r15
    9dbc:	5e 2d       	mov	r21, r14
    9dbe:	4d 2d       	mov	r20, r13
    9dc0:	ed 81       	ldd	r30, Y+5	; 0x05
    9dc2:	fe 81       	ldd	r31, Y+6	; 0x06
    9dc4:	85 a1       	ldd	r24, Z+37	; 0x25
    9dc6:	96 a1       	ldd	r25, Z+38	; 0x26
    9dc8:	a7 a1       	ldd	r26, Z+39	; 0x27
    9dca:	b0 a5       	ldd	r27, Z+40	; 0x28
    9dcc:	48 0f       	add	r20, r24
    9dce:	59 1f       	adc	r21, r25
    9dd0:	6a 1f       	adc	r22, r26
    9dd2:	7b 1f       	adc	r23, r27
    9dd4:	cf 01       	movw	r24, r30
    9dd6:	87 dc       	rcall	.-1778   	; 0x96e6 <move_window>
    9dd8:	5c 01       	movw	r10, r24
    9dda:	89 2b       	or	r24, r25
    9ddc:	09 f0       	breq	.+2      	; 0x9de0 <put_fat+0x150>
    9dde:	4c c0       	rjmp	.+152    	; 0x9e78 <put_fat+0x1e8>
    9de0:	ed 81       	ldd	r30, Y+5	; 0x05
    9de2:	fe 81       	ldd	r31, Y+6	; 0x06
    9de4:	f5 96       	adiw	r30, 0x35	; 53
    9de6:	cc 0c       	add	r12, r12
    9de8:	dd 1c       	adc	r13, r13
    9dea:	e8 94       	clt
    9dec:	c0 f8       	bld	r12, 0
    9dee:	21 e0       	ldi	r18, 0x01	; 1
    9df0:	d2 22       	and	r13, r18
    9df2:	ec 0d       	add	r30, r12
    9df4:	fd 1d       	adc	r31, r13
    9df6:	40 82       	st	Z, r4
    9df8:	51 82       	std	Z+1, r5	; 0x01
    9dfa:	36 c0       	rjmp	.+108    	; 0x9e68 <put_fat+0x1d8>
    9dfc:	ed 81       	ldd	r30, Y+5	; 0x05
    9dfe:	fe 81       	ldd	r31, Y+6	; 0x06
    9e00:	85 a1       	ldd	r24, Z+37	; 0x25
    9e02:	96 a1       	ldd	r25, Z+38	; 0x26
    9e04:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e06:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e08:	27 e0       	ldi	r18, 0x07	; 7
    9e0a:	76 95       	lsr	r23
    9e0c:	67 95       	ror	r22
    9e0e:	57 95       	ror	r21
    9e10:	47 95       	ror	r20
    9e12:	2a 95       	dec	r18
    9e14:	d1 f7       	brne	.-12     	; 0x9e0a <put_fat+0x17a>
    9e16:	48 0f       	add	r20, r24
    9e18:	59 1f       	adc	r21, r25
    9e1a:	6a 1f       	adc	r22, r26
    9e1c:	7b 1f       	adc	r23, r27
    9e1e:	cf 01       	movw	r24, r30
    9e20:	62 dc       	rcall	.-1852   	; 0x96e6 <move_window>
    9e22:	5c 01       	movw	r10, r24
    9e24:	89 2b       	or	r24, r25
    9e26:	41 f5       	brne	.+80     	; 0x9e78 <put_fat+0x1e8>
    9e28:	4d 81       	ldd	r20, Y+5	; 0x05
    9e2a:	5e 81       	ldd	r21, Y+6	; 0x06
    9e2c:	4b 5c       	subi	r20, 0xCB	; 203
    9e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    9e30:	cc 0c       	add	r12, r12
    9e32:	dd 1c       	adc	r13, r13
    9e34:	cc 0c       	add	r12, r12
    9e36:	dd 1c       	adc	r13, r13
    9e38:	fc ef       	ldi	r31, 0xFC	; 252
    9e3a:	cf 22       	and	r12, r31
    9e3c:	f1 e0       	ldi	r31, 0x01	; 1
    9e3e:	df 22       	and	r13, r31
    9e40:	c4 0e       	add	r12, r20
    9e42:	d5 1e       	adc	r13, r21
    9e44:	c6 01       	movw	r24, r12
    9e46:	8d d8       	rcall	.-3814   	; 0x8f62 <ld_dword>
    9e48:	2f e0       	ldi	r18, 0x0F	; 15
    9e4a:	72 22       	and	r7, r18
    9e4c:	dc 01       	movw	r26, r24
    9e4e:	cb 01       	movw	r24, r22
    9e50:	88 27       	eor	r24, r24
    9e52:	99 27       	eor	r25, r25
    9e54:	aa 27       	eor	r26, r26
    9e56:	b0 7f       	andi	r27, 0xF0	; 240
    9e58:	b3 01       	movw	r22, r6
    9e5a:	a2 01       	movw	r20, r4
    9e5c:	48 2b       	or	r20, r24
    9e5e:	59 2b       	or	r21, r25
    9e60:	6a 2b       	or	r22, r26
    9e62:	7b 2b       	or	r23, r27
    9e64:	c6 01       	movw	r24, r12
    9e66:	92 d8       	rcall	.-3804   	; 0x8f8c <st_dword>
    9e68:	81 e0       	ldi	r24, 0x01	; 1
    9e6a:	ed 81       	ldd	r30, Y+5	; 0x05
    9e6c:	fe 81       	ldd	r31, Y+6	; 0x06
    9e6e:	83 83       	std	Z+3, r24	; 0x03
    9e70:	03 c0       	rjmp	.+6      	; 0x9e78 <put_fat+0x1e8>
    9e72:	82 e0       	ldi	r24, 0x02	; 2
    9e74:	a8 2e       	mov	r10, r24
    9e76:	b1 2c       	mov	r11, r1
    9e78:	c5 01       	movw	r24, r10
    9e7a:	26 96       	adiw	r28, 0x06	; 6
    9e7c:	e2 e1       	ldi	r30, 0x12	; 18
    9e7e:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00009e82 <get_fat.isra.9>:
    9e82:	a0 e0       	ldi	r26, 0x00	; 0
    9e84:	b0 e0       	ldi	r27, 0x00	; 0
    9e86:	e7 e4       	ldi	r30, 0x47	; 71
    9e88:	ff e4       	ldi	r31, 0x4F	; 79
    9e8a:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
    9e8e:	42 30       	cpi	r20, 0x02	; 2
    9e90:	51 05       	cpc	r21, r1
    9e92:	61 05       	cpc	r22, r1
    9e94:	71 05       	cpc	r23, r1
    9e96:	08 f4       	brcc	.+2      	; 0x9e9a <get_fat.isra.9+0x18>
    9e98:	9f c0       	rjmp	.+318    	; 0x9fd8 <get_fat.isra.9+0x156>
    9e9a:	fc 01       	movw	r30, r24
    9e9c:	01 8d       	ldd	r16, Z+25	; 0x19
    9e9e:	12 8d       	ldd	r17, Z+26	; 0x1a
    9ea0:	23 8d       	ldd	r18, Z+27	; 0x1b
    9ea2:	34 8d       	ldd	r19, Z+28	; 0x1c
    9ea4:	40 17       	cp	r20, r16
    9ea6:	51 07       	cpc	r21, r17
    9ea8:	62 07       	cpc	r22, r18
    9eaa:	73 07       	cpc	r23, r19
    9eac:	08 f0       	brcs	.+2      	; 0x9eb0 <get_fat.isra.9+0x2e>
    9eae:	94 c0       	rjmp	.+296    	; 0x9fd8 <get_fat.isra.9+0x156>
    9eb0:	6a 01       	movw	r12, r20
    9eb2:	7b 01       	movw	r14, r22
    9eb4:	8c 01       	movw	r16, r24
    9eb6:	80 81       	ld	r24, Z
    9eb8:	82 30       	cpi	r24, 0x02	; 2
    9eba:	09 f4       	brne	.+2      	; 0x9ebe <get_fat.isra.9+0x3c>
    9ebc:	4b c0       	rjmp	.+150    	; 0x9f54 <get_fat.isra.9+0xd2>
    9ebe:	83 30       	cpi	r24, 0x03	; 3
    9ec0:	09 f4       	brne	.+2      	; 0x9ec4 <get_fat.isra.9+0x42>
    9ec2:	67 c0       	rjmp	.+206    	; 0x9f92 <get_fat.isra.9+0x110>
    9ec4:	81 30       	cpi	r24, 0x01	; 1
    9ec6:	09 f0       	breq	.+2      	; 0x9eca <get_fat.isra.9+0x48>
    9ec8:	87 c0       	rjmp	.+270    	; 0x9fd8 <get_fat.isra.9+0x156>
    9eca:	ea 01       	movw	r28, r20
    9ecc:	d6 95       	lsr	r29
    9ece:	c7 95       	ror	r28
    9ed0:	cc 0d       	add	r28, r12
    9ed2:	dd 1d       	adc	r29, r13
    9ed4:	ce 01       	movw	r24, r28
    9ed6:	89 2f       	mov	r24, r25
    9ed8:	99 27       	eor	r25, r25
    9eda:	86 95       	lsr	r24
    9edc:	45 a1       	ldd	r20, Z+37	; 0x25
    9ede:	56 a1       	ldd	r21, Z+38	; 0x26
    9ee0:	67 a1       	ldd	r22, Z+39	; 0x27
    9ee2:	70 a5       	ldd	r23, Z+40	; 0x28
    9ee4:	48 0f       	add	r20, r24
    9ee6:	59 1f       	adc	r21, r25
    9ee8:	61 1d       	adc	r22, r1
    9eea:	71 1d       	adc	r23, r1
    9eec:	cf 01       	movw	r24, r30
    9eee:	fb db       	rcall	.-2058   	; 0x96e6 <move_window>
    9ef0:	89 2b       	or	r24, r25
    9ef2:	21 f0       	breq	.+8      	; 0x9efc <get_fat.isra.9+0x7a>
    9ef4:	6f ef       	ldi	r22, 0xFF	; 255
    9ef6:	7f ef       	ldi	r23, 0xFF	; 255
    9ef8:	cb 01       	movw	r24, r22
    9efa:	72 c0       	rjmp	.+228    	; 0x9fe0 <get_fat.isra.9+0x15e>
    9efc:	5e 01       	movw	r10, r28
    9efe:	ff ef       	ldi	r31, 0xFF	; 255
    9f00:	af 1a       	sub	r10, r31
    9f02:	bf 0a       	sbc	r11, r31
    9f04:	d1 70       	andi	r29, 0x01	; 1
    9f06:	c0 0f       	add	r28, r16
    9f08:	d1 1f       	adc	r29, r17
    9f0a:	cd a9       	ldd	r28, Y+53	; 0x35
    9f0c:	c5 01       	movw	r24, r10
    9f0e:	89 2f       	mov	r24, r25
    9f10:	99 27       	eor	r25, r25
    9f12:	86 95       	lsr	r24
    9f14:	f8 01       	movw	r30, r16
    9f16:	45 a1       	ldd	r20, Z+37	; 0x25
    9f18:	56 a1       	ldd	r21, Z+38	; 0x26
    9f1a:	67 a1       	ldd	r22, Z+39	; 0x27
    9f1c:	70 a5       	ldd	r23, Z+40	; 0x28
    9f1e:	48 0f       	add	r20, r24
    9f20:	59 1f       	adc	r21, r25
    9f22:	61 1d       	adc	r22, r1
    9f24:	71 1d       	adc	r23, r1
    9f26:	c8 01       	movw	r24, r16
    9f28:	de db       	rcall	.-2116   	; 0x96e6 <move_window>
    9f2a:	89 2b       	or	r24, r25
    9f2c:	19 f7       	brne	.-58     	; 0x9ef4 <get_fat.isra.9+0x72>
    9f2e:	f1 e0       	ldi	r31, 0x01	; 1
    9f30:	bf 22       	and	r11, r31
    9f32:	f8 01       	movw	r30, r16
    9f34:	ea 0d       	add	r30, r10
    9f36:	fb 1d       	adc	r31, r11
    9f38:	85 a9       	ldd	r24, Z+53	; 0x35
    9f3a:	6c 2f       	mov	r22, r28
    9f3c:	70 e0       	ldi	r23, 0x00	; 0
    9f3e:	78 2b       	or	r23, r24
    9f40:	c0 fe       	sbrs	r12, 0
    9f42:	06 c0       	rjmp	.+12     	; 0x9f50 <get_fat.isra.9+0xce>
    9f44:	54 e0       	ldi	r21, 0x04	; 4
    9f46:	76 95       	lsr	r23
    9f48:	67 95       	ror	r22
    9f4a:	5a 95       	dec	r21
    9f4c:	e1 f7       	brne	.-8      	; 0x9f46 <get_fat.isra.9+0xc4>
    9f4e:	1e c0       	rjmp	.+60     	; 0x9f8c <get_fat.isra.9+0x10a>
    9f50:	7f 70       	andi	r23, 0x0F	; 15
    9f52:	1c c0       	rjmp	.+56     	; 0x9f8c <get_fat.isra.9+0x10a>
    9f54:	77 27       	eor	r23, r23
    9f56:	6f 2d       	mov	r22, r15
    9f58:	5e 2d       	mov	r21, r14
    9f5a:	4d 2d       	mov	r20, r13
    9f5c:	85 a1       	ldd	r24, Z+37	; 0x25
    9f5e:	96 a1       	ldd	r25, Z+38	; 0x26
    9f60:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f62:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f64:	48 0f       	add	r20, r24
    9f66:	59 1f       	adc	r21, r25
    9f68:	6a 1f       	adc	r22, r26
    9f6a:	7b 1f       	adc	r23, r27
    9f6c:	cf 01       	movw	r24, r30
    9f6e:	bb db       	rcall	.-2186   	; 0x96e6 <move_window>
    9f70:	89 2b       	or	r24, r25
    9f72:	09 f0       	breq	.+2      	; 0x9f76 <get_fat.isra.9+0xf4>
    9f74:	bf cf       	rjmp	.-130    	; 0x9ef4 <get_fat.isra.9+0x72>
    9f76:	cc 0c       	add	r12, r12
    9f78:	dd 1c       	adc	r13, r13
    9f7a:	e8 94       	clt
    9f7c:	c0 f8       	bld	r12, 0
    9f7e:	f1 e0       	ldi	r31, 0x01	; 1
    9f80:	df 22       	and	r13, r31
    9f82:	f8 01       	movw	r30, r16
    9f84:	ec 0d       	add	r30, r12
    9f86:	fd 1d       	adc	r31, r13
    9f88:	65 a9       	ldd	r22, Z+53	; 0x35
    9f8a:	76 a9       	ldd	r23, Z+54	; 0x36
    9f8c:	80 e0       	ldi	r24, 0x00	; 0
    9f8e:	90 e0       	ldi	r25, 0x00	; 0
    9f90:	27 c0       	rjmp	.+78     	; 0x9fe0 <get_fat.isra.9+0x15e>
    9f92:	85 a1       	ldd	r24, Z+37	; 0x25
    9f94:	96 a1       	ldd	r25, Z+38	; 0x26
    9f96:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f98:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f9a:	27 e0       	ldi	r18, 0x07	; 7
    9f9c:	76 95       	lsr	r23
    9f9e:	67 95       	ror	r22
    9fa0:	57 95       	ror	r21
    9fa2:	47 95       	ror	r20
    9fa4:	2a 95       	dec	r18
    9fa6:	d1 f7       	brne	.-12     	; 0x9f9c <get_fat.isra.9+0x11a>
    9fa8:	48 0f       	add	r20, r24
    9faa:	59 1f       	adc	r21, r25
    9fac:	6a 1f       	adc	r22, r26
    9fae:	7b 1f       	adc	r23, r27
    9fb0:	cf 01       	movw	r24, r30
    9fb2:	99 db       	rcall	.-2254   	; 0x96e6 <move_window>
    9fb4:	89 2b       	or	r24, r25
    9fb6:	09 f0       	breq	.+2      	; 0x9fba <get_fat.isra.9+0x138>
    9fb8:	9d cf       	rjmp	.-198    	; 0x9ef4 <get_fat.isra.9+0x72>
    9fba:	0b 5c       	subi	r16, 0xCB	; 203
    9fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    9fbe:	cc 0c       	add	r12, r12
    9fc0:	dd 1c       	adc	r13, r13
    9fc2:	cc 0c       	add	r12, r12
    9fc4:	dd 1c       	adc	r13, r13
    9fc6:	c6 01       	movw	r24, r12
    9fc8:	8c 7f       	andi	r24, 0xFC	; 252
    9fca:	91 70       	andi	r25, 0x01	; 1
    9fcc:	80 0f       	add	r24, r16
    9fce:	91 1f       	adc	r25, r17
    9fd0:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <ld_dword>
    9fd4:	9f 70       	andi	r25, 0x0F	; 15
    9fd6:	04 c0       	rjmp	.+8      	; 0x9fe0 <get_fat.isra.9+0x15e>
    9fd8:	61 e0       	ldi	r22, 0x01	; 1
    9fda:	70 e0       	ldi	r23, 0x00	; 0
    9fdc:	80 e0       	ldi	r24, 0x00	; 0
    9fde:	90 e0       	ldi	r25, 0x00	; 0
    9fe0:	cd b7       	in	r28, 0x3d	; 61
    9fe2:	de b7       	in	r29, 0x3e	; 62
    9fe4:	ea e0       	ldi	r30, 0x0A	; 10
    9fe6:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

00009fea <dir_sdi>:
    9fea:	a0 e0       	ldi	r26, 0x00	; 0
    9fec:	b0 e0       	ldi	r27, 0x00	; 0
    9fee:	eb ef       	ldi	r30, 0xFB	; 251
    9ff0:	ff e4       	ldi	r31, 0x4F	; 79
    9ff2:	0c 94 ee e6 	jmp	0x1cddc	; 0x1cddc <__prologue_saves__+0x4>
    9ff6:	ec 01       	movw	r28, r24
    9ff8:	6a 01       	movw	r12, r20
    9ffa:	7b 01       	movw	r14, r22
    9ffc:	41 15       	cp	r20, r1
    9ffe:	51 05       	cpc	r21, r1
    a000:	80 e2       	ldi	r24, 0x20	; 32
    a002:	68 07       	cpc	r22, r24
    a004:	71 05       	cpc	r23, r1
    a006:	18 f0       	brcs	.+6      	; 0xa00e <dir_sdi+0x24>
    a008:	82 e0       	ldi	r24, 0x02	; 2
    a00a:	90 e0       	ldi	r25, 0x00	; 0
    a00c:	aa c0       	rjmp	.+340    	; 0xa162 <dir_sdi+0x178>
    a00e:	db 01       	movw	r26, r22
    a010:	ca 01       	movw	r24, r20
    a012:	8f 71       	andi	r24, 0x1F	; 31
    a014:	99 27       	eor	r25, r25
    a016:	aa 27       	eor	r26, r26
    a018:	bb 27       	eor	r27, r27
    a01a:	89 2b       	or	r24, r25
    a01c:	8a 2b       	or	r24, r26
    a01e:	8b 2b       	or	r24, r27
    a020:	99 f7       	brne	.-26     	; 0xa008 <dir_sdi+0x1e>
    a022:	08 81       	ld	r16, Y
    a024:	19 81       	ldd	r17, Y+1	; 0x01
    a026:	4e 87       	std	Y+14, r20	; 0x0e
    a028:	5f 87       	std	Y+15, r21	; 0x0f
    a02a:	68 8b       	std	Y+16, r22	; 0x10
    a02c:	79 8b       	std	Y+17, r23	; 0x11
    a02e:	8e 80       	ldd	r8, Y+6	; 0x06
    a030:	9f 80       	ldd	r9, Y+7	; 0x07
    a032:	a8 84       	ldd	r10, Y+8	; 0x08
    a034:	b9 84       	ldd	r11, Y+9	; 0x09
    a036:	81 14       	cp	r8, r1
    a038:	91 04       	cpc	r9, r1
    a03a:	a1 04       	cpc	r10, r1
    a03c:	b1 04       	cpc	r11, r1
    a03e:	51 f5       	brne	.+84     	; 0xa094 <dir_sdi+0xaa>
    a040:	f8 01       	movw	r30, r16
    a042:	80 81       	ld	r24, Z
    a044:	83 30       	cpi	r24, 0x03	; 3
    a046:	40 f0       	brcs	.+16     	; 0xa058 <dir_sdi+0x6e>
    a048:	81 a5       	ldd	r24, Z+41	; 0x29
    a04a:	92 a5       	ldd	r25, Z+42	; 0x2a
    a04c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a04e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a050:	00 97       	sbiw	r24, 0x00	; 0
    a052:	a1 05       	cpc	r26, r1
    a054:	b1 05       	cpc	r27, r1
    a056:	e1 f4       	brne	.+56     	; 0xa090 <dir_sdi+0xa6>
    a058:	f8 01       	movw	r30, r16
    a05a:	87 81       	ldd	r24, Z+7	; 0x07
    a05c:	90 85       	ldd	r25, Z+8	; 0x08
    a05e:	a0 e0       	ldi	r26, 0x00	; 0
    a060:	b0 e0       	ldi	r27, 0x00	; 0
    a062:	b7 01       	movw	r22, r14
    a064:	a6 01       	movw	r20, r12
    a066:	25 e0       	ldi	r18, 0x05	; 5
    a068:	76 95       	lsr	r23
    a06a:	67 95       	ror	r22
    a06c:	57 95       	ror	r21
    a06e:	47 95       	ror	r20
    a070:	2a 95       	dec	r18
    a072:	d1 f7       	brne	.-12     	; 0xa068 <dir_sdi+0x7e>
    a074:	48 17       	cp	r20, r24
    a076:	59 07       	cpc	r21, r25
    a078:	6a 07       	cpc	r22, r26
    a07a:	7b 07       	cpc	r23, r27
    a07c:	28 f6       	brcc	.-118    	; 0xa008 <dir_sdi+0x1e>
    a07e:	81 a5       	ldd	r24, Z+41	; 0x29
    a080:	92 a5       	ldd	r25, Z+42	; 0x2a
    a082:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a084:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a086:	8e 8b       	std	Y+22, r24	; 0x16
    a088:	9f 8b       	std	Y+23, r25	; 0x17
    a08a:	a8 8f       	std	Y+24, r26	; 0x18
    a08c:	b9 8f       	std	Y+25, r27	; 0x19
    a08e:	3e c0       	rjmp	.+124    	; 0xa10c <dir_sdi+0x122>
    a090:	4c 01       	movw	r8, r24
    a092:	5d 01       	movw	r10, r26
    a094:	f8 01       	movw	r30, r16
    a096:	41 84       	ldd	r4, Z+9	; 0x09
    a098:	52 84       	ldd	r5, Z+10	; 0x0a
    a09a:	61 2c       	mov	r6, r1
    a09c:	71 2c       	mov	r7, r1
    a09e:	39 e0       	ldi	r19, 0x09	; 9
    a0a0:	44 0c       	add	r4, r4
    a0a2:	55 1c       	adc	r5, r5
    a0a4:	66 1c       	adc	r6, r6
    a0a6:	77 1c       	adc	r7, r7
    a0a8:	3a 95       	dec	r19
    a0aa:	d1 f7       	brne	.-12     	; 0xa0a0 <dir_sdi+0xb6>
    a0ac:	b5 01       	movw	r22, r10
    a0ae:	a4 01       	movw	r20, r8
    a0b0:	c4 14       	cp	r12, r4
    a0b2:	d5 04       	cpc	r13, r5
    a0b4:	e6 04       	cpc	r14, r6
    a0b6:	f7 04       	cpc	r15, r7
    a0b8:	10 f1       	brcs	.+68     	; 0xa0fe <dir_sdi+0x114>
    a0ba:	88 81       	ld	r24, Y
    a0bc:	99 81       	ldd	r25, Y+1	; 0x01
    a0be:	e1 de       	rcall	.-574    	; 0x9e82 <get_fat.isra.9>
    a0c0:	4b 01       	movw	r8, r22
    a0c2:	5c 01       	movw	r10, r24
    a0c4:	6f 3f       	cpi	r22, 0xFF	; 255
    a0c6:	7f 4f       	sbci	r23, 0xFF	; 255
    a0c8:	8f 4f       	sbci	r24, 0xFF	; 255
    a0ca:	9f 4f       	sbci	r25, 0xFF	; 255
    a0cc:	09 f4       	brne	.+2      	; 0xa0d0 <dir_sdi+0xe6>
    a0ce:	47 c0       	rjmp	.+142    	; 0xa15e <dir_sdi+0x174>
    a0d0:	82 e0       	ldi	r24, 0x02	; 2
    a0d2:	88 16       	cp	r8, r24
    a0d4:	91 04       	cpc	r9, r1
    a0d6:	a1 04       	cpc	r10, r1
    a0d8:	b1 04       	cpc	r11, r1
    a0da:	08 f4       	brcc	.+2      	; 0xa0de <dir_sdi+0xf4>
    a0dc:	95 cf       	rjmp	.-214    	; 0xa008 <dir_sdi+0x1e>
    a0de:	f8 01       	movw	r30, r16
    a0e0:	81 8d       	ldd	r24, Z+25	; 0x19
    a0e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    a0e4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a0e6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a0e8:	88 16       	cp	r8, r24
    a0ea:	99 06       	cpc	r9, r25
    a0ec:	aa 06       	cpc	r10, r26
    a0ee:	bb 06       	cpc	r11, r27
    a0f0:	08 f0       	brcs	.+2      	; 0xa0f4 <dir_sdi+0x10a>
    a0f2:	8a cf       	rjmp	.-236    	; 0xa008 <dir_sdi+0x1e>
    a0f4:	c4 18       	sub	r12, r4
    a0f6:	d5 08       	sbc	r13, r5
    a0f8:	e6 08       	sbc	r14, r6
    a0fa:	f7 08       	sbc	r15, r7
    a0fc:	d7 cf       	rjmp	.-82     	; 0xa0ac <dir_sdi+0xc2>
    a0fe:	c8 01       	movw	r24, r16
    a100:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    a104:	6e 8b       	std	Y+22, r22	; 0x16
    a106:	7f 8b       	std	Y+23, r23	; 0x17
    a108:	88 8f       	std	Y+24, r24	; 0x18
    a10a:	99 8f       	std	Y+25, r25	; 0x19
    a10c:	8a 8a       	std	Y+18, r8	; 0x12
    a10e:	9b 8a       	std	Y+19, r9	; 0x13
    a110:	ac 8a       	std	Y+20, r10	; 0x14
    a112:	bd 8a       	std	Y+21, r11	; 0x15
    a114:	8e 89       	ldd	r24, Y+22	; 0x16
    a116:	9f 89       	ldd	r25, Y+23	; 0x17
    a118:	a8 8d       	ldd	r26, Y+24	; 0x18
    a11a:	b9 8d       	ldd	r27, Y+25	; 0x19
    a11c:	00 97       	sbiw	r24, 0x00	; 0
    a11e:	a1 05       	cpc	r26, r1
    a120:	b1 05       	cpc	r27, r1
    a122:	09 f4       	brne	.+2      	; 0xa126 <dir_sdi+0x13c>
    a124:	71 cf       	rjmp	.-286    	; 0xa008 <dir_sdi+0x1e>
    a126:	b7 01       	movw	r22, r14
    a128:	a6 01       	movw	r20, r12
    a12a:	29 e0       	ldi	r18, 0x09	; 9
    a12c:	76 95       	lsr	r23
    a12e:	67 95       	ror	r22
    a130:	57 95       	ror	r21
    a132:	47 95       	ror	r20
    a134:	2a 95       	dec	r18
    a136:	d1 f7       	brne	.-12     	; 0xa12c <dir_sdi+0x142>
    a138:	84 0f       	add	r24, r20
    a13a:	95 1f       	adc	r25, r21
    a13c:	a6 1f       	adc	r26, r22
    a13e:	b7 1f       	adc	r27, r23
    a140:	8e 8b       	std	Y+22, r24	; 0x16
    a142:	9f 8b       	std	Y+23, r25	; 0x17
    a144:	a8 8f       	std	Y+24, r26	; 0x18
    a146:	b9 8f       	std	Y+25, r27	; 0x19
    a148:	0b 5c       	subi	r16, 0xCB	; 203
    a14a:	1f 4f       	sbci	r17, 0xFF	; 255
    a14c:	f1 e0       	ldi	r31, 0x01	; 1
    a14e:	df 22       	and	r13, r31
    a150:	c0 0e       	add	r12, r16
    a152:	d1 1e       	adc	r13, r17
    a154:	db 8e       	std	Y+27, r13	; 0x1b
    a156:	ca 8e       	std	Y+26, r12	; 0x1a
    a158:	80 e0       	ldi	r24, 0x00	; 0
    a15a:	90 e0       	ldi	r25, 0x00	; 0
    a15c:	02 c0       	rjmp	.+4      	; 0xa162 <dir_sdi+0x178>
    a15e:	81 e0       	ldi	r24, 0x01	; 1
    a160:	90 e0       	ldi	r25, 0x00	; 0
    a162:	cd b7       	in	r28, 0x3d	; 61
    a164:	de b7       	in	r29, 0x3e	; 62
    a166:	e0 e1       	ldi	r30, 0x10	; 16
    a168:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__epilogue_restores__+0x4>

0000a16c <create_chain>:
    a16c:	a0 e0       	ldi	r26, 0x00	; 0
    a16e:	b0 e0       	ldi	r27, 0x00	; 0
    a170:	ec eb       	ldi	r30, 0xBC	; 188
    a172:	f0 e5       	ldi	r31, 0x50	; 80
    a174:	0c 94 ee e6 	jmp	0x1cddc	; 0x1cddc <__prologue_saves__+0x4>
    a178:	8c 01       	movw	r16, r24
    a17a:	2a 01       	movw	r4, r20
    a17c:	3b 01       	movw	r6, r22
    a17e:	fc 01       	movw	r30, r24
    a180:	c0 81       	ld	r28, Z
    a182:	d1 81       	ldd	r29, Z+1	; 0x01
    a184:	41 15       	cp	r20, r1
    a186:	51 05       	cpc	r21, r1
    a188:	61 05       	cpc	r22, r1
    a18a:	71 05       	cpc	r23, r1
    a18c:	99 f4       	brne	.+38     	; 0xa1b4 <create_chain+0x48>
    a18e:	8d 84       	ldd	r8, Y+13	; 0x0d
    a190:	9e 84       	ldd	r9, Y+14	; 0x0e
    a192:	af 84       	ldd	r10, Y+15	; 0x0f
    a194:	b8 88       	ldd	r11, Y+16	; 0x10
    a196:	81 14       	cp	r8, r1
    a198:	91 04       	cpc	r9, r1
    a19a:	a1 04       	cpc	r10, r1
    a19c:	b1 04       	cpc	r11, r1
    a19e:	51 f1       	breq	.+84     	; 0xa1f4 <create_chain+0x88>
    a1a0:	89 8d       	ldd	r24, Y+25	; 0x19
    a1a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1a4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1a6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1a8:	88 16       	cp	r8, r24
    a1aa:	99 06       	cpc	r9, r25
    a1ac:	aa 06       	cpc	r10, r26
    a1ae:	bb 06       	cpc	r11, r27
    a1b0:	28 f1       	brcs	.+74     	; 0xa1fc <create_chain+0x90>
    a1b2:	20 c0       	rjmp	.+64     	; 0xa1f4 <create_chain+0x88>
    a1b4:	ce 01       	movw	r24, r28
    a1b6:	65 de       	rcall	.-822    	; 0x9e82 <get_fat.isra.9>
    a1b8:	62 30       	cpi	r22, 0x02	; 2
    a1ba:	71 05       	cpc	r23, r1
    a1bc:	81 05       	cpc	r24, r1
    a1be:	91 05       	cpc	r25, r1
    a1c0:	08 f4       	brcc	.+2      	; 0xa1c4 <create_chain+0x58>
    a1c2:	ea c0       	rjmp	.+468    	; 0xa398 <create_chain+0x22c>
    a1c4:	6f 3f       	cpi	r22, 0xFF	; 255
    a1c6:	ff ef       	ldi	r31, 0xFF	; 255
    a1c8:	7f 07       	cpc	r23, r31
    a1ca:	8f 07       	cpc	r24, r31
    a1cc:	9f 07       	cpc	r25, r31
    a1ce:	29 f4       	brne	.+10     	; 0xa1da <create_chain+0x6e>
    a1d0:	4f ef       	ldi	r20, 0xFF	; 255
    a1d2:	3f ef       	ldi	r19, 0xFF	; 255
    a1d4:	2f ef       	ldi	r18, 0xFF	; 255
    a1d6:	9f ef       	ldi	r25, 0xFF	; 255
    a1d8:	e7 c0       	rjmp	.+462    	; 0xa3a8 <create_chain+0x23c>
    a1da:	c9 8c       	ldd	r12, Y+25	; 0x19
    a1dc:	da 8c       	ldd	r13, Y+26	; 0x1a
    a1de:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a1e0:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a1e2:	6c 15       	cp	r22, r12
    a1e4:	7d 05       	cpc	r23, r13
    a1e6:	8e 05       	cpc	r24, r14
    a1e8:	9f 05       	cpc	r25, r15
    a1ea:	08 f4       	brcc	.+2      	; 0xa1ee <create_chain+0x82>
    a1ec:	da c0       	rjmp	.+436    	; 0xa3a2 <create_chain+0x236>
    a1ee:	53 01       	movw	r10, r6
    a1f0:	42 01       	movw	r8, r4
    a1f2:	04 c0       	rjmp	.+8      	; 0xa1fc <create_chain+0x90>
    a1f4:	81 2c       	mov	r8, r1
    a1f6:	91 2c       	mov	r9, r1
    a1f8:	54 01       	movw	r10, r8
    a1fa:	83 94       	inc	r8
    a1fc:	89 89       	ldd	r24, Y+17	; 0x11
    a1fe:	9a 89       	ldd	r25, Y+18	; 0x12
    a200:	ab 89       	ldd	r26, Y+19	; 0x13
    a202:	bc 89       	ldd	r27, Y+20	; 0x14
    a204:	89 2b       	or	r24, r25
    a206:	8a 2b       	or	r24, r26
    a208:	8b 2b       	or	r24, r27
    a20a:	11 f4       	brne	.+4      	; 0xa210 <create_chain+0xa4>
    a20c:	40 e0       	ldi	r20, 0x00	; 0
    a20e:	c5 c0       	rjmp	.+394    	; 0xa39a <create_chain+0x22e>
    a210:	84 14       	cp	r8, r4
    a212:	95 04       	cpc	r9, r5
    a214:	a6 04       	cpc	r10, r6
    a216:	b7 04       	cpc	r11, r7
    a218:	09 f0       	breq	.+2      	; 0xa21c <create_chain+0xb0>
    a21a:	46 c0       	rjmp	.+140    	; 0xa2a8 <create_chain+0x13c>
    a21c:	75 01       	movw	r14, r10
    a21e:	64 01       	movw	r12, r8
    a220:	2f ef       	ldi	r18, 0xFF	; 255
    a222:	c2 1a       	sub	r12, r18
    a224:	d2 0a       	sbc	r13, r18
    a226:	e2 0a       	sbc	r14, r18
    a228:	f2 0a       	sbc	r15, r18
    a22a:	89 8d       	ldd	r24, Y+25	; 0x19
    a22c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a22e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a230:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a232:	c8 16       	cp	r12, r24
    a234:	d9 06       	cpc	r13, r25
    a236:	ea 06       	cpc	r14, r26
    a238:	fb 06       	cpc	r15, r27
    a23a:	28 f0       	brcs	.+10     	; 0xa246 <create_chain+0xda>
    a23c:	92 e0       	ldi	r25, 0x02	; 2
    a23e:	c9 2e       	mov	r12, r25
    a240:	d1 2c       	mov	r13, r1
    a242:	e1 2c       	mov	r14, r1
    a244:	f1 2c       	mov	r15, r1
    a246:	b7 01       	movw	r22, r14
    a248:	a6 01       	movw	r20, r12
    a24a:	f8 01       	movw	r30, r16
    a24c:	80 81       	ld	r24, Z
    a24e:	91 81       	ldd	r25, Z+1	; 0x01
    a250:	18 de       	rcall	.-976    	; 0x9e82 <get_fat.isra.9>
    a252:	61 30       	cpi	r22, 0x01	; 1
    a254:	71 05       	cpc	r23, r1
    a256:	81 05       	cpc	r24, r1
    a258:	91 05       	cpc	r25, r1
    a25a:	09 f4       	brne	.+2      	; 0xa25e <create_chain+0xf2>
    a25c:	9d c0       	rjmp	.+314    	; 0xa398 <create_chain+0x22c>
    a25e:	6f 3f       	cpi	r22, 0xFF	; 255
    a260:	ff ef       	ldi	r31, 0xFF	; 255
    a262:	7f 07       	cpc	r23, r31
    a264:	8f 07       	cpc	r24, r31
    a266:	9f 07       	cpc	r25, r31
    a268:	09 f4       	brne	.+2      	; 0xa26c <create_chain+0x100>
    a26a:	b2 cf       	rjmp	.-156    	; 0xa1d0 <create_chain+0x64>
    a26c:	67 2b       	or	r22, r23
    a26e:	68 2b       	or	r22, r24
    a270:	69 2b       	or	r22, r25
    a272:	a9 f0       	breq	.+42     	; 0xa29e <create_chain+0x132>
    a274:	8d 85       	ldd	r24, Y+13	; 0x0d
    a276:	9e 85       	ldd	r25, Y+14	; 0x0e
    a278:	af 85       	ldd	r26, Y+15	; 0x0f
    a27a:	b8 89       	ldd	r27, Y+16	; 0x10
    a27c:	82 30       	cpi	r24, 0x02	; 2
    a27e:	91 05       	cpc	r25, r1
    a280:	a1 05       	cpc	r26, r1
    a282:	b1 05       	cpc	r27, r1
    a284:	88 f0       	brcs	.+34     	; 0xa2a8 <create_chain+0x13c>
    a286:	49 8d       	ldd	r20, Y+25	; 0x19
    a288:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a28a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a28c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a28e:	84 17       	cp	r24, r20
    a290:	95 07       	cpc	r25, r21
    a292:	a6 07       	cpc	r26, r22
    a294:	b7 07       	cpc	r27, r23
    a296:	40 f4       	brcc	.+16     	; 0xa2a8 <create_chain+0x13c>
    a298:	4c 01       	movw	r8, r24
    a29a:	5d 01       	movw	r10, r26
    a29c:	05 c0       	rjmp	.+10     	; 0xa2a8 <create_chain+0x13c>
    a29e:	c1 14       	cp	r12, r1
    a2a0:	d1 04       	cpc	r13, r1
    a2a2:	e1 04       	cpc	r14, r1
    a2a4:	f1 04       	cpc	r15, r1
    a2a6:	c9 f5       	brne	.+114    	; 0xa31a <create_chain+0x1ae>
    a2a8:	75 01       	movw	r14, r10
    a2aa:	64 01       	movw	r12, r8
    a2ac:	2f ef       	ldi	r18, 0xFF	; 255
    a2ae:	c2 1a       	sub	r12, r18
    a2b0:	d2 0a       	sbc	r13, r18
    a2b2:	e2 0a       	sbc	r14, r18
    a2b4:	f2 0a       	sbc	r15, r18
    a2b6:	89 8d       	ldd	r24, Y+25	; 0x19
    a2b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a2ba:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a2bc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a2be:	c8 16       	cp	r12, r24
    a2c0:	d9 06       	cpc	r13, r25
    a2c2:	ea 06       	cpc	r14, r26
    a2c4:	fb 06       	cpc	r15, r27
    a2c6:	60 f0       	brcs	.+24     	; 0xa2e0 <create_chain+0x174>
    a2c8:	82 e0       	ldi	r24, 0x02	; 2
    a2ca:	88 16       	cp	r8, r24
    a2cc:	91 04       	cpc	r9, r1
    a2ce:	a1 04       	cpc	r10, r1
    a2d0:	b1 04       	cpc	r11, r1
    a2d2:	08 f4       	brcc	.+2      	; 0xa2d6 <create_chain+0x16a>
    a2d4:	9b cf       	rjmp	.-202    	; 0xa20c <create_chain+0xa0>
    a2d6:	82 e0       	ldi	r24, 0x02	; 2
    a2d8:	c8 2e       	mov	r12, r24
    a2da:	d1 2c       	mov	r13, r1
    a2dc:	e1 2c       	mov	r14, r1
    a2de:	f1 2c       	mov	r15, r1
    a2e0:	b7 01       	movw	r22, r14
    a2e2:	a6 01       	movw	r20, r12
    a2e4:	f8 01       	movw	r30, r16
    a2e6:	80 81       	ld	r24, Z
    a2e8:	91 81       	ldd	r25, Z+1	; 0x01
    a2ea:	cb dd       	rcall	.-1130   	; 0x9e82 <get_fat.isra.9>
    a2ec:	61 15       	cp	r22, r1
    a2ee:	71 05       	cpc	r23, r1
    a2f0:	81 05       	cpc	r24, r1
    a2f2:	91 05       	cpc	r25, r1
    a2f4:	91 f0       	breq	.+36     	; 0xa31a <create_chain+0x1ae>
    a2f6:	61 30       	cpi	r22, 0x01	; 1
    a2f8:	71 05       	cpc	r23, r1
    a2fa:	81 05       	cpc	r24, r1
    a2fc:	91 05       	cpc	r25, r1
    a2fe:	09 f4       	brne	.+2      	; 0xa302 <create_chain+0x196>
    a300:	4b c0       	rjmp	.+150    	; 0xa398 <create_chain+0x22c>
    a302:	6f 3f       	cpi	r22, 0xFF	; 255
    a304:	7f 4f       	sbci	r23, 0xFF	; 255
    a306:	8f 4f       	sbci	r24, 0xFF	; 255
    a308:	9f 4f       	sbci	r25, 0xFF	; 255
    a30a:	09 f4       	brne	.+2      	; 0xa30e <create_chain+0x1a2>
    a30c:	61 cf       	rjmp	.-318    	; 0xa1d0 <create_chain+0x64>
    a30e:	c8 14       	cp	r12, r8
    a310:	d9 04       	cpc	r13, r9
    a312:	ea 04       	cpc	r14, r10
    a314:	fb 04       	cpc	r15, r11
    a316:	51 f6       	brne	.-108    	; 0xa2ac <create_chain+0x140>
    a318:	79 cf       	rjmp	.-270    	; 0xa20c <create_chain+0xa0>
    a31a:	0f ef       	ldi	r16, 0xFF	; 255
    a31c:	1f ef       	ldi	r17, 0xFF	; 255
    a31e:	98 01       	movw	r18, r16
    a320:	b7 01       	movw	r22, r14
    a322:	a6 01       	movw	r20, r12
    a324:	ce 01       	movw	r24, r28
    a326:	b4 dc       	rcall	.-1688   	; 0x9c90 <put_fat>
    a328:	00 97       	sbiw	r24, 0x00	; 0
    a32a:	99 f5       	brne	.+102    	; 0xa392 <create_chain+0x226>
    a32c:	41 14       	cp	r4, r1
    a32e:	51 04       	cpc	r5, r1
    a330:	61 04       	cpc	r6, r1
    a332:	71 04       	cpc	r7, r1
    a334:	e9 f4       	brne	.+58     	; 0xa370 <create_chain+0x204>
    a336:	cd 86       	std	Y+13, r12	; 0x0d
    a338:	de 86       	std	Y+14, r13	; 0x0e
    a33a:	ef 86       	std	Y+15, r14	; 0x0f
    a33c:	f8 8a       	std	Y+16, r15	; 0x10
    a33e:	89 89       	ldd	r24, Y+17	; 0x11
    a340:	9a 89       	ldd	r25, Y+18	; 0x12
    a342:	ab 89       	ldd	r26, Y+19	; 0x13
    a344:	bc 89       	ldd	r27, Y+20	; 0x14
    a346:	49 8d       	ldd	r20, Y+25	; 0x19
    a348:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a34a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a34c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a34e:	42 50       	subi	r20, 0x02	; 2
    a350:	51 09       	sbc	r21, r1
    a352:	61 09       	sbc	r22, r1
    a354:	71 09       	sbc	r23, r1
    a356:	48 17       	cp	r20, r24
    a358:	59 07       	cpc	r21, r25
    a35a:	6a 07       	cpc	r22, r26
    a35c:	7b 07       	cpc	r23, r27
    a35e:	88 f0       	brcs	.+34     	; 0xa382 <create_chain+0x216>
    a360:	01 97       	sbiw	r24, 0x01	; 1
    a362:	a1 09       	sbc	r26, r1
    a364:	b1 09       	sbc	r27, r1
    a366:	89 8b       	std	Y+17, r24	; 0x11
    a368:	9a 8b       	std	Y+18, r25	; 0x12
    a36a:	ab 8b       	std	Y+19, r26	; 0x13
    a36c:	bc 8b       	std	Y+20, r27	; 0x14
    a36e:	09 c0       	rjmp	.+18     	; 0xa382 <create_chain+0x216>
    a370:	97 01       	movw	r18, r14
    a372:	86 01       	movw	r16, r12
    a374:	b3 01       	movw	r22, r6
    a376:	a2 01       	movw	r20, r4
    a378:	ce 01       	movw	r24, r28
    a37a:	8a dc       	rcall	.-1772   	; 0x9c90 <put_fat>
    a37c:	00 97       	sbiw	r24, 0x00	; 0
    a37e:	d9 f2       	breq	.-74     	; 0xa336 <create_chain+0x1ca>
    a380:	08 c0       	rjmp	.+16     	; 0xa392 <create_chain+0x226>
    a382:	8c 81       	ldd	r24, Y+4	; 0x04
    a384:	81 60       	ori	r24, 0x01	; 1
    a386:	8c 83       	std	Y+4, r24	; 0x04
    a388:	4c 2d       	mov	r20, r12
    a38a:	3d 2d       	mov	r19, r13
    a38c:	2e 2d       	mov	r18, r14
    a38e:	9f 2d       	mov	r25, r15
    a390:	0b c0       	rjmp	.+22     	; 0xa3a8 <create_chain+0x23c>
    a392:	01 97       	sbiw	r24, 0x01	; 1
    a394:	09 f4       	brne	.+2      	; 0xa398 <create_chain+0x22c>
    a396:	1c cf       	rjmp	.-456    	; 0xa1d0 <create_chain+0x64>
    a398:	41 e0       	ldi	r20, 0x01	; 1
    a39a:	30 e0       	ldi	r19, 0x00	; 0
    a39c:	20 e0       	ldi	r18, 0x00	; 0
    a39e:	90 e0       	ldi	r25, 0x00	; 0
    a3a0:	03 c0       	rjmp	.+6      	; 0xa3a8 <create_chain+0x23c>
    a3a2:	46 2f       	mov	r20, r22
    a3a4:	37 2f       	mov	r19, r23
    a3a6:	28 2f       	mov	r18, r24
    a3a8:	64 2f       	mov	r22, r20
    a3aa:	73 2f       	mov	r23, r19
    a3ac:	82 2f       	mov	r24, r18
    a3ae:	cd b7       	in	r28, 0x3d	; 61
    a3b0:	de b7       	in	r29, 0x3e	; 62
    a3b2:	e0 e1       	ldi	r30, 0x10	; 16
    a3b4:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__epilogue_restores__+0x4>

0000a3b8 <remove_chain>:
    a3b8:	4f 92       	push	r4
    a3ba:	5f 92       	push	r5
    a3bc:	6f 92       	push	r6
    a3be:	7f 92       	push	r7
    a3c0:	af 92       	push	r10
    a3c2:	bf 92       	push	r11
    a3c4:	cf 92       	push	r12
    a3c6:	df 92       	push	r13
    a3c8:	ef 92       	push	r14
    a3ca:	ff 92       	push	r15
    a3cc:	0f 93       	push	r16
    a3ce:	1f 93       	push	r17
    a3d0:	cf 93       	push	r28
    a3d2:	df 93       	push	r29
    a3d4:	5c 01       	movw	r10, r24
    a3d6:	6a 01       	movw	r12, r20
    a3d8:	7b 01       	movw	r14, r22
    a3da:	b9 01       	movw	r22, r18
    a3dc:	a8 01       	movw	r20, r16
    a3de:	22 e0       	ldi	r18, 0x02	; 2
    a3e0:	c2 16       	cp	r12, r18
    a3e2:	d1 04       	cpc	r13, r1
    a3e4:	e1 04       	cpc	r14, r1
    a3e6:	f1 04       	cpc	r15, r1
    a3e8:	10 f4       	brcc	.+4      	; 0xa3ee <remove_chain+0x36>
    a3ea:	22 e0       	ldi	r18, 0x02	; 2
    a3ec:	27 c0       	rjmp	.+78     	; 0xa43c <remove_chain+0x84>
    a3ee:	fc 01       	movw	r30, r24
    a3f0:	c0 81       	ld	r28, Z
    a3f2:	d1 81       	ldd	r29, Z+1	; 0x01
    a3f4:	89 8d       	ldd	r24, Y+25	; 0x19
    a3f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3f8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3fa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3fc:	c8 16       	cp	r12, r24
    a3fe:	d9 06       	cpc	r13, r25
    a400:	ea 06       	cpc	r14, r26
    a402:	fb 06       	cpc	r15, r27
    a404:	90 f7       	brcc	.-28     	; 0xa3ea <remove_chain+0x32>
    a406:	41 15       	cp	r20, r1
    a408:	51 05       	cpc	r21, r1
    a40a:	61 05       	cpc	r22, r1
    a40c:	71 05       	cpc	r23, r1
    a40e:	41 f0       	breq	.+16     	; 0xa420 <remove_chain+0x68>
    a410:	0f ef       	ldi	r16, 0xFF	; 255
    a412:	1f ef       	ldi	r17, 0xFF	; 255
    a414:	98 01       	movw	r18, r16
    a416:	ce 01       	movw	r24, r28
    a418:	3b dc       	rcall	.-1930   	; 0x9c90 <put_fat>
    a41a:	00 97       	sbiw	r24, 0x00	; 0
    a41c:	09 f0       	breq	.+2      	; 0xa420 <remove_chain+0x68>
    a41e:	4c c0       	rjmp	.+152    	; 0xa4b8 <remove_chain+0x100>
    a420:	b7 01       	movw	r22, r14
    a422:	a6 01       	movw	r20, r12
    a424:	f5 01       	movw	r30, r10
    a426:	80 81       	ld	r24, Z
    a428:	91 81       	ldd	r25, Z+1	; 0x01
    a42a:	2b dd       	rcall	.-1450   	; 0x9e82 <get_fat.isra.9>
    a42c:	2b 01       	movw	r4, r22
    a42e:	3c 01       	movw	r6, r24
    a430:	61 15       	cp	r22, r1
    a432:	71 05       	cpc	r23, r1
    a434:	81 05       	cpc	r24, r1
    a436:	91 05       	cpc	r25, r1
    a438:	19 f4       	brne	.+6      	; 0xa440 <remove_chain+0x88>
    a43a:	20 e0       	ldi	r18, 0x00	; 0
    a43c:	90 e0       	ldi	r25, 0x00	; 0
    a43e:	3d c0       	rjmp	.+122    	; 0xa4ba <remove_chain+0x102>
    a440:	61 30       	cpi	r22, 0x01	; 1
    a442:	71 05       	cpc	r23, r1
    a444:	81 05       	cpc	r24, r1
    a446:	91 05       	cpc	r25, r1
    a448:	81 f2       	breq	.-96     	; 0xa3ea <remove_chain+0x32>
    a44a:	6f 3f       	cpi	r22, 0xFF	; 255
    a44c:	7f 4f       	sbci	r23, 0xFF	; 255
    a44e:	8f 4f       	sbci	r24, 0xFF	; 255
    a450:	9f 4f       	sbci	r25, 0xFF	; 255
    a452:	81 f1       	breq	.+96     	; 0xa4b4 <remove_chain+0xfc>
    a454:	00 e0       	ldi	r16, 0x00	; 0
    a456:	10 e0       	ldi	r17, 0x00	; 0
    a458:	98 01       	movw	r18, r16
    a45a:	b7 01       	movw	r22, r14
    a45c:	a6 01       	movw	r20, r12
    a45e:	ce 01       	movw	r24, r28
    a460:	17 dc       	rcall	.-2002   	; 0x9c90 <put_fat>
    a462:	00 97       	sbiw	r24, 0x00	; 0
    a464:	49 f5       	brne	.+82     	; 0xa4b8 <remove_chain+0x100>
    a466:	89 89       	ldd	r24, Y+17	; 0x11
    a468:	9a 89       	ldd	r25, Y+18	; 0x12
    a46a:	ab 89       	ldd	r26, Y+19	; 0x13
    a46c:	bc 89       	ldd	r27, Y+20	; 0x14
    a46e:	49 8d       	ldd	r20, Y+25	; 0x19
    a470:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a472:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a474:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a476:	6a 01       	movw	r12, r20
    a478:	7b 01       	movw	r14, r22
    a47a:	e2 e0       	ldi	r30, 0x02	; 2
    a47c:	ce 1a       	sub	r12, r30
    a47e:	d1 08       	sbc	r13, r1
    a480:	e1 08       	sbc	r14, r1
    a482:	f1 08       	sbc	r15, r1
    a484:	8c 15       	cp	r24, r12
    a486:	9d 05       	cpc	r25, r13
    a488:	ae 05       	cpc	r26, r14
    a48a:	bf 05       	cpc	r27, r15
    a48c:	50 f4       	brcc	.+20     	; 0xa4a2 <remove_chain+0xea>
    a48e:	01 96       	adiw	r24, 0x01	; 1
    a490:	a1 1d       	adc	r26, r1
    a492:	b1 1d       	adc	r27, r1
    a494:	89 8b       	std	Y+17, r24	; 0x11
    a496:	9a 8b       	std	Y+18, r25	; 0x12
    a498:	ab 8b       	std	Y+19, r26	; 0x13
    a49a:	bc 8b       	std	Y+20, r27	; 0x14
    a49c:	8c 81       	ldd	r24, Y+4	; 0x04
    a49e:	81 60       	ori	r24, 0x01	; 1
    a4a0:	8c 83       	std	Y+4, r24	; 0x04
    a4a2:	73 01       	movw	r14, r6
    a4a4:	62 01       	movw	r12, r4
    a4a6:	44 16       	cp	r4, r20
    a4a8:	55 06       	cpc	r5, r21
    a4aa:	66 06       	cpc	r6, r22
    a4ac:	77 06       	cpc	r7, r23
    a4ae:	08 f4       	brcc	.+2      	; 0xa4b2 <remove_chain+0xfa>
    a4b0:	b7 cf       	rjmp	.-146    	; 0xa420 <remove_chain+0x68>
    a4b2:	c3 cf       	rjmp	.-122    	; 0xa43a <remove_chain+0x82>
    a4b4:	21 e0       	ldi	r18, 0x01	; 1
    a4b6:	c2 cf       	rjmp	.-124    	; 0xa43c <remove_chain+0x84>
    a4b8:	28 2f       	mov	r18, r24
    a4ba:	82 2f       	mov	r24, r18
    a4bc:	df 91       	pop	r29
    a4be:	cf 91       	pop	r28
    a4c0:	1f 91       	pop	r17
    a4c2:	0f 91       	pop	r16
    a4c4:	ff 90       	pop	r15
    a4c6:	ef 90       	pop	r14
    a4c8:	df 90       	pop	r13
    a4ca:	cf 90       	pop	r12
    a4cc:	bf 90       	pop	r11
    a4ce:	af 90       	pop	r10
    a4d0:	7f 90       	pop	r7
    a4d2:	6f 90       	pop	r6
    a4d4:	5f 90       	pop	r5
    a4d6:	4f 90       	pop	r4
    a4d8:	08 95       	ret

0000a4da <dir_next>:
    a4da:	4f 92       	push	r4
    a4dc:	5f 92       	push	r5
    a4de:	6f 92       	push	r6
    a4e0:	7f 92       	push	r7
    a4e2:	af 92       	push	r10
    a4e4:	bf 92       	push	r11
    a4e6:	cf 92       	push	r12
    a4e8:	df 92       	push	r13
    a4ea:	ef 92       	push	r14
    a4ec:	ff 92       	push	r15
    a4ee:	0f 93       	push	r16
    a4f0:	1f 93       	push	r17
    a4f2:	cf 93       	push	r28
    a4f4:	df 93       	push	r29
    a4f6:	ec 01       	movw	r28, r24
    a4f8:	08 81       	ld	r16, Y
    a4fa:	19 81       	ldd	r17, Y+1	; 0x01
    a4fc:	ce 84       	ldd	r12, Y+14	; 0x0e
    a4fe:	df 84       	ldd	r13, Y+15	; 0x0f
    a500:	e8 88       	ldd	r14, Y+16	; 0x10
    a502:	f9 88       	ldd	r15, Y+17	; 0x11
    a504:	80 e2       	ldi	r24, 0x20	; 32
    a506:	c8 0e       	add	r12, r24
    a508:	d1 1c       	adc	r13, r1
    a50a:	e1 1c       	adc	r14, r1
    a50c:	f1 1c       	adc	r15, r1
    a50e:	c1 14       	cp	r12, r1
    a510:	d1 04       	cpc	r13, r1
    a512:	e0 e2       	ldi	r30, 0x20	; 32
    a514:	ee 06       	cpc	r14, r30
    a516:	f1 04       	cpc	r15, r1
    a518:	20 f0       	brcs	.+8      	; 0xa522 <dir_next+0x48>
    a51a:	1e 8a       	std	Y+22, r1	; 0x16
    a51c:	1f 8a       	std	Y+23, r1	; 0x17
    a51e:	18 8e       	std	Y+24, r1	; 0x18
    a520:	19 8e       	std	Y+25, r1	; 0x19
    a522:	8e 89       	ldd	r24, Y+22	; 0x16
    a524:	9f 89       	ldd	r25, Y+23	; 0x17
    a526:	a8 8d       	ldd	r26, Y+24	; 0x18
    a528:	b9 8d       	ldd	r27, Y+25	; 0x19
    a52a:	00 97       	sbiw	r24, 0x00	; 0
    a52c:	a1 05       	cpc	r26, r1
    a52e:	b1 05       	cpc	r27, r1
    a530:	09 f4       	brne	.+2      	; 0xa534 <dir_next+0x5a>
    a532:	a7 c0       	rjmp	.+334    	; 0xa682 <dir_next+0x1a8>
    a534:	5b 01       	movw	r10, r22
    a536:	b7 01       	movw	r22, r14
    a538:	a6 01       	movw	r20, r12
    a53a:	51 70       	andi	r21, 0x01	; 1
    a53c:	66 27       	eor	r22, r22
    a53e:	77 27       	eor	r23, r23
    a540:	45 2b       	or	r20, r21
    a542:	46 2b       	or	r20, r22
    a544:	47 2b       	or	r20, r23
    a546:	09 f0       	breq	.+2      	; 0xa54a <dir_next+0x70>
    a548:	8d c0       	rjmp	.+282    	; 0xa664 <dir_next+0x18a>
    a54a:	01 96       	adiw	r24, 0x01	; 1
    a54c:	a1 1d       	adc	r26, r1
    a54e:	b1 1d       	adc	r27, r1
    a550:	8e 8b       	std	Y+22, r24	; 0x16
    a552:	9f 8b       	std	Y+23, r25	; 0x17
    a554:	a8 8f       	std	Y+24, r26	; 0x18
    a556:	b9 8f       	std	Y+25, r27	; 0x19
    a558:	4a 89       	ldd	r20, Y+18	; 0x12
    a55a:	5b 89       	ldd	r21, Y+19	; 0x13
    a55c:	6c 89       	ldd	r22, Y+20	; 0x14
    a55e:	7d 89       	ldd	r23, Y+21	; 0x15
    a560:	f8 01       	movw	r30, r16
    a562:	41 15       	cp	r20, r1
    a564:	51 05       	cpc	r21, r1
    a566:	61 05       	cpc	r22, r1
    a568:	71 05       	cpc	r23, r1
    a56a:	c1 f4       	brne	.+48     	; 0xa59c <dir_next+0xc2>
    a56c:	87 81       	ldd	r24, Z+7	; 0x07
    a56e:	90 85       	ldd	r25, Z+8	; 0x08
    a570:	a0 e0       	ldi	r26, 0x00	; 0
    a572:	b0 e0       	ldi	r27, 0x00	; 0
    a574:	b7 01       	movw	r22, r14
    a576:	a6 01       	movw	r20, r12
    a578:	35 e0       	ldi	r19, 0x05	; 5
    a57a:	76 95       	lsr	r23
    a57c:	67 95       	ror	r22
    a57e:	57 95       	ror	r21
    a580:	47 95       	ror	r20
    a582:	3a 95       	dec	r19
    a584:	d1 f7       	brne	.-12     	; 0xa57a <dir_next+0xa0>
    a586:	48 17       	cp	r20, r24
    a588:	59 07       	cpc	r21, r25
    a58a:	6a 07       	cpc	r22, r26
    a58c:	7b 07       	cpc	r23, r27
    a58e:	08 f4       	brcc	.+2      	; 0xa592 <dir_next+0xb8>
    a590:	69 c0       	rjmp	.+210    	; 0xa664 <dir_next+0x18a>
    a592:	1e 8a       	std	Y+22, r1	; 0x16
    a594:	1f 8a       	std	Y+23, r1	; 0x17
    a596:	18 8e       	std	Y+24, r1	; 0x18
    a598:	19 8e       	std	Y+25, r1	; 0x19
    a59a:	73 c0       	rjmp	.+230    	; 0xa682 <dir_next+0x1a8>
    a59c:	81 85       	ldd	r24, Z+9	; 0x09
    a59e:	92 85       	ldd	r25, Z+10	; 0x0a
    a5a0:	01 97       	sbiw	r24, 0x01	; 1
    a5a2:	a0 e0       	ldi	r26, 0x00	; 0
    a5a4:	b0 e0       	ldi	r27, 0x00	; 0
    a5a6:	26 01       	movw	r4, r12
    a5a8:	37 01       	movw	r6, r14
    a5aa:	29 e0       	ldi	r18, 0x09	; 9
    a5ac:	76 94       	lsr	r7
    a5ae:	67 94       	ror	r6
    a5b0:	57 94       	ror	r5
    a5b2:	47 94       	ror	r4
    a5b4:	2a 95       	dec	r18
    a5b6:	d1 f7       	brne	.-12     	; 0xa5ac <dir_next+0xd2>
    a5b8:	84 21       	and	r24, r4
    a5ba:	95 21       	and	r25, r5
    a5bc:	a6 21       	and	r26, r6
    a5be:	b7 21       	and	r27, r7
    a5c0:	89 2b       	or	r24, r25
    a5c2:	8a 2b       	or	r24, r26
    a5c4:	8b 2b       	or	r24, r27
    a5c6:	09 f0       	breq	.+2      	; 0xa5ca <dir_next+0xf0>
    a5c8:	4d c0       	rjmp	.+154    	; 0xa664 <dir_next+0x18a>
    a5ca:	c8 01       	movw	r24, r16
    a5cc:	5a dc       	rcall	.-1868   	; 0x9e82 <get_fat.isra.9>
    a5ce:	2b 01       	movw	r4, r22
    a5d0:	3c 01       	movw	r6, r24
    a5d2:	62 30       	cpi	r22, 0x02	; 2
    a5d4:	71 05       	cpc	r23, r1
    a5d6:	81 05       	cpc	r24, r1
    a5d8:	91 05       	cpc	r25, r1
    a5da:	18 f4       	brcc	.+6      	; 0xa5e2 <dir_next+0x108>
    a5dc:	82 e0       	ldi	r24, 0x02	; 2
    a5de:	90 e0       	ldi	r25, 0x00	; 0
    a5e0:	55 c0       	rjmp	.+170    	; 0xa68c <dir_next+0x1b2>
    a5e2:	8f ef       	ldi	r24, 0xFF	; 255
    a5e4:	48 16       	cp	r4, r24
    a5e6:	58 06       	cpc	r5, r24
    a5e8:	68 06       	cpc	r6, r24
    a5ea:	78 06       	cpc	r7, r24
    a5ec:	19 f4       	brne	.+6      	; 0xa5f4 <dir_next+0x11a>
    a5ee:	81 e0       	ldi	r24, 0x01	; 1
    a5f0:	90 e0       	ldi	r25, 0x00	; 0
    a5f2:	4c c0       	rjmp	.+152    	; 0xa68c <dir_next+0x1b2>
    a5f4:	f8 01       	movw	r30, r16
    a5f6:	81 8d       	ldd	r24, Z+25	; 0x19
    a5f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    a5fa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a5fc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a5fe:	48 16       	cp	r4, r24
    a600:	59 06       	cpc	r5, r25
    a602:	6a 06       	cpc	r6, r26
    a604:	7b 06       	cpc	r7, r27
    a606:	08 f1       	brcs	.+66     	; 0xa64a <dir_next+0x170>
    a608:	ab 28       	or	r10, r11
    a60a:	19 f2       	breq	.-122    	; 0xa592 <dir_next+0xb8>
    a60c:	4a 89       	ldd	r20, Y+18	; 0x12
    a60e:	5b 89       	ldd	r21, Y+19	; 0x13
    a610:	6c 89       	ldd	r22, Y+20	; 0x14
    a612:	7d 89       	ldd	r23, Y+21	; 0x15
    a614:	ce 01       	movw	r24, r28
    a616:	aa dd       	rcall	.-1196   	; 0xa16c <create_chain>
    a618:	2b 01       	movw	r4, r22
    a61a:	3c 01       	movw	r6, r24
    a61c:	61 15       	cp	r22, r1
    a61e:	71 05       	cpc	r23, r1
    a620:	81 05       	cpc	r24, r1
    a622:	91 05       	cpc	r25, r1
    a624:	89 f1       	breq	.+98     	; 0xa688 <dir_next+0x1ae>
    a626:	61 30       	cpi	r22, 0x01	; 1
    a628:	71 05       	cpc	r23, r1
    a62a:	81 05       	cpc	r24, r1
    a62c:	91 05       	cpc	r25, r1
    a62e:	b1 f2       	breq	.-84     	; 0xa5dc <dir_next+0x102>
    a630:	8f ef       	ldi	r24, 0xFF	; 255
    a632:	48 16       	cp	r4, r24
    a634:	58 06       	cpc	r5, r24
    a636:	68 06       	cpc	r6, r24
    a638:	78 06       	cpc	r7, r24
    a63a:	c9 f2       	breq	.-78     	; 0xa5ee <dir_next+0x114>
    a63c:	b3 01       	movw	r22, r6
    a63e:	a2 01       	movw	r20, r4
    a640:	c8 01       	movw	r24, r16
    a642:	0e 94 cb 4a 	call	0x9596	; 0x9596 <dir_clear>
    a646:	89 2b       	or	r24, r25
    a648:	91 f6       	brne	.-92     	; 0xa5ee <dir_next+0x114>
    a64a:	4a 8a       	std	Y+18, r4	; 0x12
    a64c:	5b 8a       	std	Y+19, r5	; 0x13
    a64e:	6c 8a       	std	Y+20, r6	; 0x14
    a650:	7d 8a       	std	Y+21, r7	; 0x15
    a652:	b3 01       	movw	r22, r6
    a654:	a2 01       	movw	r20, r4
    a656:	c8 01       	movw	r24, r16
    a658:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    a65c:	6e 8b       	std	Y+22, r22	; 0x16
    a65e:	7f 8b       	std	Y+23, r23	; 0x17
    a660:	88 8f       	std	Y+24, r24	; 0x18
    a662:	99 8f       	std	Y+25, r25	; 0x19
    a664:	ce 86       	std	Y+14, r12	; 0x0e
    a666:	df 86       	std	Y+15, r13	; 0x0f
    a668:	e8 8a       	std	Y+16, r14	; 0x10
    a66a:	f9 8a       	std	Y+17, r15	; 0x11
    a66c:	0b 5c       	subi	r16, 0xCB	; 203
    a66e:	1f 4f       	sbci	r17, 0xFF	; 255
    a670:	e1 e0       	ldi	r30, 0x01	; 1
    a672:	de 22       	and	r13, r30
    a674:	c0 0e       	add	r12, r16
    a676:	d1 1e       	adc	r13, r17
    a678:	db 8e       	std	Y+27, r13	; 0x1b
    a67a:	ca 8e       	std	Y+26, r12	; 0x1a
    a67c:	80 e0       	ldi	r24, 0x00	; 0
    a67e:	90 e0       	ldi	r25, 0x00	; 0
    a680:	05 c0       	rjmp	.+10     	; 0xa68c <dir_next+0x1b2>
    a682:	84 e0       	ldi	r24, 0x04	; 4
    a684:	90 e0       	ldi	r25, 0x00	; 0
    a686:	02 c0       	rjmp	.+4      	; 0xa68c <dir_next+0x1b2>
    a688:	87 e0       	ldi	r24, 0x07	; 7
    a68a:	90 e0       	ldi	r25, 0x00	; 0
    a68c:	df 91       	pop	r29
    a68e:	cf 91       	pop	r28
    a690:	1f 91       	pop	r17
    a692:	0f 91       	pop	r16
    a694:	ff 90       	pop	r15
    a696:	ef 90       	pop	r14
    a698:	df 90       	pop	r13
    a69a:	cf 90       	pop	r12
    a69c:	bf 90       	pop	r11
    a69e:	af 90       	pop	r10
    a6a0:	7f 90       	pop	r7
    a6a2:	6f 90       	pop	r6
    a6a4:	5f 90       	pop	r5
    a6a6:	4f 90       	pop	r4
    a6a8:	08 95       	ret

0000a6aa <dir_alloc>:
    a6aa:	a0 e0       	ldi	r26, 0x00	; 0
    a6ac:	b0 e0       	ldi	r27, 0x00	; 0
    a6ae:	eb e5       	ldi	r30, 0x5B	; 91
    a6b0:	f3 e5       	ldi	r31, 0x53	; 83
    a6b2:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    a6b6:	ec 01       	movw	r28, r24
    a6b8:	6b 01       	movw	r12, r22
    a6ba:	e8 80       	ld	r14, Y
    a6bc:	f9 80       	ldd	r15, Y+1	; 0x01
    a6be:	40 e0       	ldi	r20, 0x00	; 0
    a6c0:	50 e0       	ldi	r21, 0x00	; 0
    a6c2:	ba 01       	movw	r22, r20
    a6c4:	92 dc       	rcall	.-1756   	; 0x9fea <dir_sdi>
    a6c6:	00 97       	sbiw	r24, 0x00	; 0
    a6c8:	f9 f4       	brne	.+62     	; 0xa708 <dir_alloc+0x5e>
    a6ca:	00 e0       	ldi	r16, 0x00	; 0
    a6cc:	10 e0       	ldi	r17, 0x00	; 0
    a6ce:	4e 89       	ldd	r20, Y+22	; 0x16
    a6d0:	5f 89       	ldd	r21, Y+23	; 0x17
    a6d2:	68 8d       	ldd	r22, Y+24	; 0x18
    a6d4:	79 8d       	ldd	r23, Y+25	; 0x19
    a6d6:	c7 01       	movw	r24, r14
    a6d8:	06 d8       	rcall	.-4084   	; 0x96e6 <move_window>
    a6da:	00 97       	sbiw	r24, 0x00	; 0
    a6dc:	a9 f4       	brne	.+42     	; 0xa708 <dir_alloc+0x5e>
    a6de:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a6e0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a6e2:	20 81       	ld	r18, Z
    a6e4:	25 3e       	cpi	r18, 0xE5	; 229
    a6e6:	11 f0       	breq	.+4      	; 0xa6ec <dir_alloc+0x42>
    a6e8:	21 11       	cpse	r18, r1
    a6ea:	06 c0       	rjmp	.+12     	; 0xa6f8 <dir_alloc+0x4e>
    a6ec:	0f 5f       	subi	r16, 0xFF	; 255
    a6ee:	1f 4f       	sbci	r17, 0xFF	; 255
    a6f0:	0c 15       	cp	r16, r12
    a6f2:	1d 05       	cpc	r17, r13
    a6f4:	19 f4       	brne	.+6      	; 0xa6fc <dir_alloc+0x52>
    a6f6:	0d c0       	rjmp	.+26     	; 0xa712 <dir_alloc+0x68>
    a6f8:	00 e0       	ldi	r16, 0x00	; 0
    a6fa:	10 e0       	ldi	r17, 0x00	; 0
    a6fc:	61 e0       	ldi	r22, 0x01	; 1
    a6fe:	70 e0       	ldi	r23, 0x00	; 0
    a700:	ce 01       	movw	r24, r28
    a702:	eb de       	rcall	.-554    	; 0xa4da <dir_next>
    a704:	00 97       	sbiw	r24, 0x00	; 0
    a706:	19 f3       	breq	.-58     	; 0xa6ce <dir_alloc+0x24>
    a708:	84 30       	cpi	r24, 0x04	; 4
    a70a:	91 05       	cpc	r25, r1
    a70c:	11 f4       	brne	.+4      	; 0xa712 <dir_alloc+0x68>
    a70e:	87 e0       	ldi	r24, 0x07	; 7
    a710:	90 e0       	ldi	r25, 0x00	; 0
    a712:	cd b7       	in	r28, 0x3d	; 61
    a714:	de b7       	in	r29, 0x3e	; 62
    a716:	e8 e0       	ldi	r30, 0x08	; 8
    a718:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000a71c <dir_read>:
    a71c:	a0 e0       	ldi	r26, 0x00	; 0
    a71e:	b0 e0       	ldi	r27, 0x00	; 0
    a720:	e4 e9       	ldi	r30, 0x94	; 148
    a722:	f3 e5       	ldi	r31, 0x53	; 83
    a724:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
    a728:	ec 01       	movw	r28, r24
    a72a:	7b 01       	movw	r14, r22
    a72c:	a8 80       	ld	r10, Y
    a72e:	b9 80       	ldd	r11, Y+1	; 0x01
    a730:	dd 24       	eor	r13, r13
    a732:	da 94       	dec	r13
    a734:	1f ef       	ldi	r17, 0xFF	; 255
    a736:	84 e0       	ldi	r24, 0x04	; 4
    a738:	90 e0       	ldi	r25, 0x00	; 0
    a73a:	fd e0       	ldi	r31, 0x0D	; 13
    a73c:	cf 2e       	mov	r12, r31
    a73e:	4e 89       	ldd	r20, Y+22	; 0x16
    a740:	5f 89       	ldd	r21, Y+23	; 0x17
    a742:	68 8d       	ldd	r22, Y+24	; 0x18
    a744:	79 8d       	ldd	r23, Y+25	; 0x19
    a746:	41 15       	cp	r20, r1
    a748:	51 05       	cpc	r21, r1
    a74a:	61 05       	cpc	r22, r1
    a74c:	71 05       	cpc	r23, r1
    a74e:	09 f4       	brne	.+2      	; 0xa752 <dir_read+0x36>
    a750:	9a c0       	rjmp	.+308    	; 0xa886 <dir_read+0x16a>
    a752:	c5 01       	movw	r24, r10
    a754:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    a758:	00 97       	sbiw	r24, 0x00	; 0
    a75a:	09 f0       	breq	.+2      	; 0xa75e <dir_read+0x42>
    a75c:	96 c0       	rjmp	.+300    	; 0xa88a <dir_read+0x16e>
    a75e:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a760:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a762:	f4 01       	movw	r30, r8
    a764:	00 81       	ld	r16, Z
    a766:	00 23       	and	r16, r16
    a768:	09 f4       	brne	.+2      	; 0xa76c <dir_read+0x50>
    a76a:	97 c0       	rjmp	.+302    	; 0xa89a <dir_read+0x17e>
    a76c:	83 85       	ldd	r24, Z+11	; 0x0b
    a76e:	8f 73       	andi	r24, 0x3F	; 63
    a770:	8c 83       	std	Y+4, r24	; 0x04
    a772:	05 3e       	cpi	r16, 0xE5	; 229
    a774:	09 f4       	brne	.+2      	; 0xa778 <dir_read+0x5c>
    a776:	7e c0       	rjmp	.+252    	; 0xa874 <dir_read+0x158>
    a778:	0e 32       	cpi	r16, 0x2E	; 46
    a77a:	09 f4       	brne	.+2      	; 0xa77e <dir_read+0x62>
    a77c:	7b c0       	rjmp	.+246    	; 0xa874 <dir_read+0x158>
    a77e:	21 e0       	ldi	r18, 0x01	; 1
    a780:	30 e0       	ldi	r19, 0x00	; 0
    a782:	98 2f       	mov	r25, r24
    a784:	9f 71       	andi	r25, 0x1F	; 31
    a786:	98 30       	cpi	r25, 0x08	; 8
    a788:	11 f0       	breq	.+4      	; 0xa78e <dir_read+0x72>
    a78a:	20 e0       	ldi	r18, 0x00	; 0
    a78c:	30 e0       	ldi	r19, 0x00	; 0
    a78e:	2e 15       	cp	r18, r14
    a790:	3f 05       	cpc	r19, r15
    a792:	09 f0       	breq	.+2      	; 0xa796 <dir_read+0x7a>
    a794:	6f c0       	rjmp	.+222    	; 0xa874 <dir_read+0x158>
    a796:	8f 30       	cpi	r24, 0x0F	; 15
    a798:	09 f0       	breq	.+2      	; 0xa79c <dir_read+0x80>
    a79a:	5c c0       	rjmp	.+184    	; 0xa854 <dir_read+0x138>
    a79c:	06 ff       	sbrs	r16, 6
    a79e:	0c c0       	rjmp	.+24     	; 0xa7b8 <dir_read+0x9c>
    a7a0:	f4 01       	movw	r30, r8
    a7a2:	85 85       	ldd	r24, Z+13	; 0x0d
    a7a4:	0f 7b       	andi	r16, 0xBF	; 191
    a7a6:	4e 85       	ldd	r20, Y+14	; 0x0e
    a7a8:	5f 85       	ldd	r21, Y+15	; 0x0f
    a7aa:	68 89       	ldd	r22, Y+16	; 0x10
    a7ac:	79 89       	ldd	r23, Y+17	; 0x11
    a7ae:	48 a7       	std	Y+40, r20	; 0x28
    a7b0:	59 a7       	std	Y+41, r21	; 0x29
    a7b2:	6a a7       	std	Y+42, r22	; 0x2a
    a7b4:	7b a7       	std	Y+43, r23	; 0x2b
    a7b6:	03 c0       	rjmp	.+6      	; 0xa7be <dir_read+0xa2>
    a7b8:	10 13       	cpse	r17, r16
    a7ba:	5c c0       	rjmp	.+184    	; 0xa874 <dir_read+0x158>
    a7bc:	8d 2d       	mov	r24, r13
    a7be:	f4 01       	movw	r30, r8
    a7c0:	d5 84       	ldd	r13, Z+13	; 0x0d
    a7c2:	d8 12       	cpse	r13, r24
    a7c4:	56 c0       	rjmp	.+172    	; 0xa872 <dir_read+0x156>
    a7c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    a7c8:	93 8d       	ldd	r25, Z+27	; 0x1b
    a7ca:	89 2b       	or	r24, r25
    a7cc:	09 f0       	breq	.+2      	; 0xa7d0 <dir_read+0xb4>
    a7ce:	52 c0       	rjmp	.+164    	; 0xa874 <dir_read+0x158>
    a7d0:	f5 01       	movw	r30, r10
    a7d2:	63 85       	ldd	r22, Z+11	; 0x0b
    a7d4:	74 85       	ldd	r23, Z+12	; 0x0c
    a7d6:	f4 01       	movw	r30, r8
    a7d8:	80 81       	ld	r24, Z
    a7da:	90 e0       	ldi	r25, 0x00	; 0
    a7dc:	8f 7b       	andi	r24, 0xBF	; 191
    a7de:	01 97       	sbiw	r24, 0x01	; 1
    a7e0:	c8 9e       	mul	r12, r24
    a7e2:	90 01       	movw	r18, r0
    a7e4:	c9 9e       	mul	r12, r25
    a7e6:	30 0d       	add	r19, r0
    a7e8:	11 24       	eor	r1, r1
    a7ea:	ab ee       	ldi	r26, 0xEB	; 235
    a7ec:	b4 e0       	ldi	r27, 0x04	; 4
    a7ee:	81 e0       	ldi	r24, 0x01	; 1
    a7f0:	90 e0       	ldi	r25, 0x00	; 0
    a7f2:	4d 91       	ld	r20, X+
    a7f4:	f4 01       	movw	r30, r8
    a7f6:	e4 0f       	add	r30, r20
    a7f8:	f1 1d       	adc	r31, r1
    a7fa:	40 81       	ld	r20, Z
    a7fc:	51 81       	ldd	r21, Z+1	; 0x01
    a7fe:	00 97       	sbiw	r24, 0x00	; 0
    a800:	81 f0       	breq	.+32     	; 0xa822 <dir_read+0x106>
    a802:	2f 3f       	cpi	r18, 0xFF	; 255
    a804:	31 05       	cpc	r19, r1
    a806:	09 f0       	breq	.+2      	; 0xa80a <dir_read+0xee>
    a808:	a8 f5       	brcc	.+106    	; 0xa874 <dir_read+0x158>
    a80a:	c9 01       	movw	r24, r18
    a80c:	88 0f       	add	r24, r24
    a80e:	99 1f       	adc	r25, r25
    a810:	86 0f       	add	r24, r22
    a812:	97 1f       	adc	r25, r23
    a814:	fc 01       	movw	r30, r24
    a816:	51 83       	std	Z+1, r21	; 0x01
    a818:	40 83       	st	Z, r20
    a81a:	ca 01       	movw	r24, r20
    a81c:	2f 5f       	subi	r18, 0xFF	; 255
    a81e:	3f 4f       	sbci	r19, 0xFF	; 255
    a820:	03 c0       	rjmp	.+6      	; 0xa828 <dir_read+0x10c>
    a822:	4f 3f       	cpi	r20, 0xFF	; 255
    a824:	5f 4f       	sbci	r21, 0xFF	; 255
    a826:	31 f5       	brne	.+76     	; 0xa874 <dir_read+0x158>
    a828:	44 e0       	ldi	r20, 0x04	; 4
    a82a:	a8 3f       	cpi	r26, 0xF8	; 248
    a82c:	b4 07       	cpc	r27, r20
    a82e:	09 f7       	brne	.-62     	; 0xa7f2 <dir_read+0xd6>
    a830:	f4 01       	movw	r30, r8
    a832:	40 81       	ld	r20, Z
    a834:	46 ff       	sbrs	r20, 6
    a836:	2e c0       	rjmp	.+92     	; 0xa894 <dir_read+0x178>
    a838:	89 2b       	or	r24, r25
    a83a:	61 f1       	breq	.+88     	; 0xa894 <dir_read+0x178>
    a83c:	2f 3f       	cpi	r18, 0xFF	; 255
    a83e:	31 05       	cpc	r19, r1
    a840:	09 f0       	breq	.+2      	; 0xa844 <dir_read+0x128>
    a842:	c0 f4       	brcc	.+48     	; 0xa874 <dir_read+0x158>
    a844:	22 0f       	add	r18, r18
    a846:	33 1f       	adc	r19, r19
    a848:	fb 01       	movw	r30, r22
    a84a:	e2 0f       	add	r30, r18
    a84c:	f3 1f       	adc	r31, r19
    a84e:	11 82       	std	Z+1, r1	; 0x01
    a850:	10 82       	st	Z, r1
    a852:	20 c0       	rjmp	.+64     	; 0xa894 <dir_read+0x178>
    a854:	11 11       	cpse	r17, r1
    a856:	05 c0       	rjmp	.+10     	; 0xa862 <dir_read+0x146>
    a858:	c4 01       	movw	r24, r8
    a85a:	0e 94 48 48 	call	0x9090	; 0x9090 <sum_sfn>
    a85e:	d8 16       	cp	r13, r24
    a860:	f9 f0       	breq	.+62     	; 0xa8a0 <dir_read+0x184>
    a862:	8f ef       	ldi	r24, 0xFF	; 255
    a864:	9f ef       	ldi	r25, 0xFF	; 255
    a866:	dc 01       	movw	r26, r24
    a868:	88 a7       	std	Y+40, r24	; 0x28
    a86a:	99 a7       	std	Y+41, r25	; 0x29
    a86c:	aa a7       	std	Y+42, r26	; 0x2a
    a86e:	bb a7       	std	Y+43, r27	; 0x2b
    a870:	17 c0       	rjmp	.+46     	; 0xa8a0 <dir_read+0x184>
    a872:	d8 2e       	mov	r13, r24
    a874:	1f ef       	ldi	r17, 0xFF	; 255
    a876:	60 e0       	ldi	r22, 0x00	; 0
    a878:	70 e0       	ldi	r23, 0x00	; 0
    a87a:	ce 01       	movw	r24, r28
    a87c:	2e de       	rcall	.-932    	; 0xa4da <dir_next>
    a87e:	00 97       	sbiw	r24, 0x00	; 0
    a880:	09 f4       	brne	.+2      	; 0xa884 <dir_read+0x168>
    a882:	5d cf       	rjmp	.-326    	; 0xa73e <dir_read+0x22>
    a884:	02 c0       	rjmp	.+4      	; 0xa88a <dir_read+0x16e>
    a886:	00 97       	sbiw	r24, 0x00	; 0
    a888:	59 f0       	breq	.+22     	; 0xa8a0 <dir_read+0x184>
    a88a:	1e 8a       	std	Y+22, r1	; 0x16
    a88c:	1f 8a       	std	Y+23, r1	; 0x17
    a88e:	18 8e       	std	Y+24, r1	; 0x18
    a890:	19 8e       	std	Y+25, r1	; 0x19
    a892:	08 c0       	rjmp	.+16     	; 0xa8a4 <dir_read+0x188>
    a894:	1f ef       	ldi	r17, 0xFF	; 255
    a896:	10 0f       	add	r17, r16
    a898:	ee cf       	rjmp	.-36     	; 0xa876 <dir_read+0x15a>
    a89a:	84 e0       	ldi	r24, 0x04	; 4
    a89c:	90 e0       	ldi	r25, 0x00	; 0
    a89e:	f5 cf       	rjmp	.-22     	; 0xa88a <dir_read+0x16e>
    a8a0:	80 e0       	ldi	r24, 0x00	; 0
    a8a2:	90 e0       	ldi	r25, 0x00	; 0
    a8a4:	cd b7       	in	r28, 0x3d	; 61
    a8a6:	de b7       	in	r29, 0x3e	; 62
    a8a8:	ec e0       	ldi	r30, 0x0C	; 12
    a8aa:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

0000a8ae <dir_remove>:
    a8ae:	a0 e0       	ldi	r26, 0x00	; 0
    a8b0:	b0 e0       	ldi	r27, 0x00	; 0
    a8b2:	ed e5       	ldi	r30, 0x5D	; 93
    a8b4:	f4 e5       	ldi	r31, 0x54	; 84
    a8b6:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
    a8ba:	ec 01       	movw	r28, r24
    a8bc:	08 81       	ld	r16, Y
    a8be:	19 81       	ldd	r17, Y+1	; 0x01
    a8c0:	ce 84       	ldd	r12, Y+14	; 0x0e
    a8c2:	df 84       	ldd	r13, Y+15	; 0x0f
    a8c4:	e8 88       	ldd	r14, Y+16	; 0x10
    a8c6:	f9 88       	ldd	r15, Y+17	; 0x11
    a8c8:	48 a5       	ldd	r20, Y+40	; 0x28
    a8ca:	59 a5       	ldd	r21, Y+41	; 0x29
    a8cc:	6a a5       	ldd	r22, Y+42	; 0x2a
    a8ce:	7b a5       	ldd	r23, Y+43	; 0x2b
    a8d0:	4f 3f       	cpi	r20, 0xFF	; 255
    a8d2:	8f ef       	ldi	r24, 0xFF	; 255
    a8d4:	58 07       	cpc	r21, r24
    a8d6:	68 07       	cpc	r22, r24
    a8d8:	78 07       	cpc	r23, r24
    a8da:	29 f4       	brne	.+10     	; 0xa8e6 <dir_remove+0x38>
    a8dc:	85 ee       	ldi	r24, 0xE5	; 229
    a8de:	b8 2e       	mov	r11, r24
    a8e0:	aa 24       	eor	r10, r10
    a8e2:	a3 94       	inc	r10
    a8e4:	19 c0       	rjmp	.+50     	; 0xa918 <dir_remove+0x6a>
    a8e6:	ce 01       	movw	r24, r28
    a8e8:	80 db       	rcall	.-2304   	; 0x9fea <dir_sdi>
    a8ea:	00 97       	sbiw	r24, 0x00	; 0
    a8ec:	19 f5       	brne	.+70     	; 0xa934 <dir_remove+0x86>
    a8ee:	f6 cf       	rjmp	.-20     	; 0xa8dc <dir_remove+0x2e>
    a8f0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a8f2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a8f4:	b0 82       	st	Z, r11
    a8f6:	f8 01       	movw	r30, r16
    a8f8:	a3 82       	std	Z+3, r10	; 0x03
    a8fa:	4e 85       	ldd	r20, Y+14	; 0x0e
    a8fc:	5f 85       	ldd	r21, Y+15	; 0x0f
    a8fe:	68 89       	ldd	r22, Y+16	; 0x10
    a900:	79 89       	ldd	r23, Y+17	; 0x11
    a902:	4c 15       	cp	r20, r12
    a904:	5d 05       	cpc	r21, r13
    a906:	6e 05       	cpc	r22, r14
    a908:	7f 05       	cpc	r23, r15
    a90a:	a0 f4       	brcc	.+40     	; 0xa934 <dir_remove+0x86>
    a90c:	60 e0       	ldi	r22, 0x00	; 0
    a90e:	70 e0       	ldi	r23, 0x00	; 0
    a910:	ce 01       	movw	r24, r28
    a912:	e3 dd       	rcall	.-1082   	; 0xa4da <dir_next>
    a914:	00 97       	sbiw	r24, 0x00	; 0
    a916:	49 f4       	brne	.+18     	; 0xa92a <dir_remove+0x7c>
    a918:	4e 89       	ldd	r20, Y+22	; 0x16
    a91a:	5f 89       	ldd	r21, Y+23	; 0x17
    a91c:	68 8d       	ldd	r22, Y+24	; 0x18
    a91e:	79 8d       	ldd	r23, Y+25	; 0x19
    a920:	c8 01       	movw	r24, r16
    a922:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    a926:	00 97       	sbiw	r24, 0x00	; 0
    a928:	19 f3       	breq	.-58     	; 0xa8f0 <dir_remove+0x42>
    a92a:	84 30       	cpi	r24, 0x04	; 4
    a92c:	91 05       	cpc	r25, r1
    a92e:	11 f4       	brne	.+4      	; 0xa934 <dir_remove+0x86>
    a930:	82 e0       	ldi	r24, 0x02	; 2
    a932:	90 e0       	ldi	r25, 0x00	; 0
    a934:	cd b7       	in	r28, 0x3d	; 61
    a936:	de b7       	in	r29, 0x3e	; 62
    a938:	ea e0       	ldi	r30, 0x0A	; 10
    a93a:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0000a93e <dir_find>:
    a93e:	ac e0       	ldi	r26, 0x0C	; 12
    a940:	b0 e0       	ldi	r27, 0x00	; 0
    a942:	e5 ea       	ldi	r30, 0xA5	; 165
    a944:	f4 e5       	ldi	r31, 0x54	; 84
    a946:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    a94a:	9c 87       	std	Y+12, r25	; 0x0c
    a94c:	8b 87       	std	Y+11, r24	; 0x0b
    a94e:	fc 01       	movw	r30, r24
    a950:	01 90       	ld	r0, Z+
    a952:	f0 81       	ld	r31, Z
    a954:	e0 2d       	mov	r30, r0
    a956:	fc 83       	std	Y+4, r31	; 0x04
    a958:	eb 83       	std	Y+3, r30	; 0x03
    a95a:	40 e0       	ldi	r20, 0x00	; 0
    a95c:	50 e0       	ldi	r21, 0x00	; 0
    a95e:	ba 01       	movw	r22, r20
    a960:	44 db       	rcall	.-2424   	; 0x9fea <dir_sdi>
    a962:	00 97       	sbiw	r24, 0x00	; 0
    a964:	09 f0       	breq	.+2      	; 0xa968 <dir_find+0x2a>
    a966:	e7 c0       	rjmp	.+462    	; 0xab36 <dir_find+0x1f8>
    a968:	8f ef       	ldi	r24, 0xFF	; 255
    a96a:	9f ef       	ldi	r25, 0xFF	; 255
    a96c:	dc 01       	movw	r26, r24
    a96e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a970:	fc 85       	ldd	r31, Y+12	; 0x0c
    a972:	80 a7       	std	Z+40, r24	; 0x28
    a974:	91 a7       	std	Z+41, r25	; 0x29
    a976:	a2 a7       	std	Z+42, r26	; 0x2a
    a978:	b3 a7       	std	Z+43, r27	; 0x2b
    a97a:	0f ef       	ldi	r16, 0xFF	; 255
    a97c:	1f ef       	ldi	r17, 0xFF	; 255
    a97e:	44 24       	eor	r4, r4
    a980:	4a 94       	dec	r4
    a982:	54 2c       	mov	r5, r4
    a984:	32 01       	movw	r6, r4
    a986:	7c 96       	adiw	r30, 0x1c	; 28
    a988:	fa 87       	std	Y+10, r31	; 0x0a
    a98a:	e9 87       	std	Y+9, r30	; 0x09
    a98c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a98e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a990:	46 89       	ldd	r20, Z+22	; 0x16
    a992:	57 89       	ldd	r21, Z+23	; 0x17
    a994:	60 8d       	ldd	r22, Z+24	; 0x18
    a996:	71 8d       	ldd	r23, Z+25	; 0x19
    a998:	8b 81       	ldd	r24, Y+3	; 0x03
    a99a:	9c 81       	ldd	r25, Y+4	; 0x04
    a99c:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    a9a0:	00 97       	sbiw	r24, 0x00	; 0
    a9a2:	09 f0       	breq	.+2      	; 0xa9a6 <dir_find+0x68>
    a9a4:	c8 c0       	rjmp	.+400    	; 0xab36 <dir_find+0x1f8>
    a9a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9aa:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a9ac:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a9ae:	f7 01       	movw	r30, r14
    a9b0:	d0 80       	ld	r13, Z
    a9b2:	dd 20       	and	r13, r13
    a9b4:	09 f4       	brne	.+2      	; 0xa9b8 <dir_find+0x7a>
    a9b6:	c1 c0       	rjmp	.+386    	; 0xab3a <dir_find+0x1fc>
    a9b8:	93 85       	ldd	r25, Z+11	; 0x0b
    a9ba:	89 2f       	mov	r24, r25
    a9bc:	8f 73       	andi	r24, 0x3F	; 63
    a9be:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9c0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9c2:	84 83       	std	Z+4, r24	; 0x04
    a9c4:	f5 ee       	ldi	r31, 0xE5	; 229
    a9c6:	df 16       	cp	r13, r31
    a9c8:	09 f4       	brne	.+2      	; 0xa9cc <dir_find+0x8e>
    a9ca:	a6 c0       	rjmp	.+332    	; 0xab18 <dir_find+0x1da>
    a9cc:	93 ff       	sbrs	r25, 3
    a9ce:	04 c0       	rjmp	.+8      	; 0xa9d8 <dir_find+0x9a>
    a9d0:	8f 30       	cpi	r24, 0x0F	; 15
    a9d2:	09 f0       	breq	.+2      	; 0xa9d6 <dir_find+0x98>
    a9d4:	a1 c0       	rjmp	.+322    	; 0xab18 <dir_find+0x1da>
    a9d6:	03 c0       	rjmp	.+6      	; 0xa9de <dir_find+0xa0>
    a9d8:	8f 30       	cpi	r24, 0x0F	; 15
    a9da:	09 f0       	breq	.+2      	; 0xa9de <dir_find+0xa0>
    a9dc:	88 c0       	rjmp	.+272    	; 0xaaee <dir_find+0x1b0>
    a9de:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9e2:	87 a1       	ldd	r24, Z+39	; 0x27
    a9e4:	86 fd       	sbrc	r24, 6
    a9e6:	9f c0       	rjmp	.+318    	; 0xab26 <dir_find+0x1e8>
    a9e8:	d6 fe       	sbrs	r13, 6
    a9ea:	10 c0       	rjmp	.+32     	; 0xaa0c <dir_find+0xce>
    a9ec:	f7 01       	movw	r30, r14
    a9ee:	05 85       	ldd	r16, Z+13	; 0x0d
    a9f0:	fd 2d       	mov	r31, r13
    a9f2:	ff 7b       	andi	r31, 0xBF	; 191
    a9f4:	df 2e       	mov	r13, r31
    a9f6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9fa:	86 85       	ldd	r24, Z+14	; 0x0e
    a9fc:	97 85       	ldd	r25, Z+15	; 0x0f
    a9fe:	a0 89       	ldd	r26, Z+16	; 0x10
    aa00:	b1 89       	ldd	r27, Z+17	; 0x11
    aa02:	80 a7       	std	Z+40, r24	; 0x28
    aa04:	91 a7       	std	Z+41, r25	; 0x29
    aa06:	a2 a7       	std	Z+42, r26	; 0x2a
    aa08:	b3 a7       	std	Z+43, r27	; 0x2b
    aa0a:	02 c0       	rjmp	.+4      	; 0xaa10 <dir_find+0xd2>
    aa0c:	1d 11       	cpse	r17, r13
    aa0e:	8a c0       	rjmp	.+276    	; 0xab24 <dir_find+0x1e6>
    aa10:	f7 01       	movw	r30, r14
    aa12:	c5 84       	ldd	r12, Z+13	; 0x0d
    aa14:	c0 12       	cpse	r12, r16
    aa16:	86 c0       	rjmp	.+268    	; 0xab24 <dir_find+0x1e6>
    aa18:	82 8d       	ldd	r24, Z+26	; 0x1a
    aa1a:	93 8d       	ldd	r25, Z+27	; 0x1b
    aa1c:	89 2b       	or	r24, r25
    aa1e:	09 f0       	breq	.+2      	; 0xaa22 <dir_find+0xe4>
    aa20:	91 c0       	rjmp	.+290    	; 0xab44 <dir_find+0x206>
    aa22:	eb 81       	ldd	r30, Y+3	; 0x03
    aa24:	fc 81       	ldd	r31, Y+4	; 0x04
    aa26:	03 84       	ldd	r0, Z+11	; 0x0b
    aa28:	f4 85       	ldd	r31, Z+12	; 0x0c
    aa2a:	e0 2d       	mov	r30, r0
    aa2c:	fe 83       	std	Y+6, r31	; 0x06
    aa2e:	ed 83       	std	Y+5, r30	; 0x05
    aa30:	f7 01       	movw	r30, r14
    aa32:	80 81       	ld	r24, Z
    aa34:	8f 73       	andi	r24, 0x3F	; 63
    aa36:	90 e0       	ldi	r25, 0x00	; 0
    aa38:	01 97       	sbiw	r24, 0x01	; 1
    aa3a:	fd e0       	ldi	r31, 0x0D	; 13
    aa3c:	f8 9f       	mul	r31, r24
    aa3e:	80 01       	movw	r16, r0
    aa40:	f9 9f       	mul	r31, r25
    aa42:	10 0d       	add	r17, r0
    aa44:	11 24       	eor	r1, r1
    aa46:	2b ee       	ldi	r18, 0xEB	; 235
    aa48:	34 e0       	ldi	r19, 0x04	; 4
    aa4a:	3a 83       	std	Y+2, r19	; 0x02
    aa4c:	29 83       	std	Y+1, r18	; 0x01
    aa4e:	81 e0       	ldi	r24, 0x01	; 1
    aa50:	90 e0       	ldi	r25, 0x00	; 0
    aa52:	e9 81       	ldd	r30, Y+1	; 0x01
    aa54:	fa 81       	ldd	r31, Y+2	; 0x02
    aa56:	21 91       	ld	r18, Z+
    aa58:	fa 83       	std	Y+2, r31	; 0x02
    aa5a:	e9 83       	std	Y+1, r30	; 0x01
    aa5c:	f7 01       	movw	r30, r14
    aa5e:	e2 0f       	add	r30, r18
    aa60:	f1 1d       	adc	r31, r1
    aa62:	20 80       	ld	r2, Z
    aa64:	31 80       	ldd	r3, Z+1	; 0x01
    aa66:	00 97       	sbiw	r24, 0x00	; 0
    aa68:	39 f1       	breq	.+78     	; 0xaab8 <dir_find+0x17a>
    aa6a:	0f 3f       	cpi	r16, 0xFF	; 255
    aa6c:	11 05       	cpc	r17, r1
    aa6e:	11 f0       	breq	.+4      	; 0xaa74 <dir_find+0x136>
    aa70:	08 f0       	brcs	.+2      	; 0xaa74 <dir_find+0x136>
    aa72:	68 c0       	rjmp	.+208    	; 0xab44 <dir_find+0x206>
    aa74:	b1 01       	movw	r22, r2
    aa76:	80 e0       	ldi	r24, 0x00	; 0
    aa78:	90 e0       	ldi	r25, 0x00	; 0
    aa7a:	0e 94 37 69 	call	0xd26e	; 0xd26e <ff_wtoupper>
    aa7e:	4b 01       	movw	r8, r22
    aa80:	5c 01       	movw	r10, r24
    aa82:	98 01       	movw	r18, r16
    aa84:	2f 5f       	subi	r18, 0xFF	; 255
    aa86:	3f 4f       	sbci	r19, 0xFF	; 255
    aa88:	38 87       	std	Y+8, r19	; 0x08
    aa8a:	2f 83       	std	Y+7, r18	; 0x07
    aa8c:	00 0f       	add	r16, r16
    aa8e:	11 1f       	adc	r17, r17
    aa90:	ed 81       	ldd	r30, Y+5	; 0x05
    aa92:	fe 81       	ldd	r31, Y+6	; 0x06
    aa94:	e0 0f       	add	r30, r16
    aa96:	f1 1f       	adc	r31, r17
    aa98:	60 81       	ld	r22, Z
    aa9a:	71 81       	ldd	r23, Z+1	; 0x01
    aa9c:	80 e0       	ldi	r24, 0x00	; 0
    aa9e:	90 e0       	ldi	r25, 0x00	; 0
    aaa0:	0e 94 37 69 	call	0xd26e	; 0xd26e <ff_wtoupper>
    aaa4:	86 16       	cp	r8, r22
    aaa6:	97 06       	cpc	r9, r23
    aaa8:	a8 06       	cpc	r10, r24
    aaaa:	b9 06       	cpc	r11, r25
    aaac:	09 f0       	breq	.+2      	; 0xaab0 <dir_find+0x172>
    aaae:	4a c0       	rjmp	.+148    	; 0xab44 <dir_find+0x206>
    aab0:	c1 01       	movw	r24, r2
    aab2:	0f 81       	ldd	r16, Y+7	; 0x07
    aab4:	18 85       	ldd	r17, Y+8	; 0x08
    aab6:	05 c0       	rjmp	.+10     	; 0xaac2 <dir_find+0x184>
    aab8:	3f ef       	ldi	r19, 0xFF	; 255
    aaba:	23 16       	cp	r2, r19
    aabc:	33 06       	cpc	r3, r19
    aabe:	09 f0       	breq	.+2      	; 0xaac2 <dir_find+0x184>
    aac0:	41 c0       	rjmp	.+130    	; 0xab44 <dir_find+0x206>
    aac2:	e9 81       	ldd	r30, Y+1	; 0x01
    aac4:	fa 81       	ldd	r31, Y+2	; 0x02
    aac6:	e8 5f       	subi	r30, 0xF8	; 248
    aac8:	f4 40       	sbci	r31, 0x04	; 4
    aaca:	19 f6       	brne	.-122    	; 0xaa52 <dir_find+0x114>
    aacc:	f7 01       	movw	r30, r14
    aace:	20 81       	ld	r18, Z
    aad0:	26 ff       	sbrs	r18, 6
    aad2:	3a c0       	rjmp	.+116    	; 0xab48 <dir_find+0x20a>
    aad4:	89 2b       	or	r24, r25
    aad6:	c1 f1       	breq	.+112    	; 0xab48 <dir_find+0x20a>
    aad8:	00 0f       	add	r16, r16
    aada:	11 1f       	adc	r17, r17
    aadc:	ed 81       	ldd	r30, Y+5	; 0x05
    aade:	fe 81       	ldd	r31, Y+6	; 0x06
    aae0:	e0 0f       	add	r30, r16
    aae2:	f1 1f       	adc	r31, r17
    aae4:	80 81       	ld	r24, Z
    aae6:	91 81       	ldd	r25, Z+1	; 0x01
    aae8:	89 2b       	or	r24, r25
    aaea:	71 f1       	breq	.+92     	; 0xab48 <dir_find+0x20a>
    aaec:	2b c0       	rjmp	.+86     	; 0xab44 <dir_find+0x206>
    aaee:	11 11       	cpse	r17, r1
    aaf0:	05 c0       	rjmp	.+10     	; 0xaafc <dir_find+0x1be>
    aaf2:	c7 01       	movw	r24, r14
    aaf4:	0e 94 48 48 	call	0x9090	; 0x9090 <sum_sfn>
    aaf8:	08 17       	cp	r16, r24
    aafa:	09 f1       	breq	.+66     	; 0xab3e <dir_find+0x200>
    aafc:	eb 85       	ldd	r30, Y+11	; 0x0b
    aafe:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab00:	87 a1       	ldd	r24, Z+39	; 0x27
    ab02:	80 fd       	sbrc	r24, 0
    ab04:	09 c0       	rjmp	.+18     	; 0xab18 <dir_find+0x1da>
    ab06:	4b e0       	ldi	r20, 0x0B	; 11
    ab08:	50 e0       	ldi	r21, 0x00	; 0
    ab0a:	69 85       	ldd	r22, Y+9	; 0x09
    ab0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    ab0e:	c7 01       	movw	r24, r14
    ab10:	0e 94 d5 47 	call	0x8faa	; 0x8faa <mem_cmp>
    ab14:	89 2b       	or	r24, r25
    ab16:	99 f0       	breq	.+38     	; 0xab3e <dir_find+0x200>
    ab18:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab1a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab1c:	40 a6       	std	Z+40, r4	; 0x28
    ab1e:	51 a6       	std	Z+41, r5	; 0x29
    ab20:	62 a6       	std	Z+42, r6	; 0x2a
    ab22:	73 a6       	std	Z+43, r7	; 0x2b
    ab24:	1f ef       	ldi	r17, 0xFF	; 255
    ab26:	60 e0       	ldi	r22, 0x00	; 0
    ab28:	70 e0       	ldi	r23, 0x00	; 0
    ab2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab2e:	d5 dc       	rcall	.-1622   	; 0xa4da <dir_next>
    ab30:	00 97       	sbiw	r24, 0x00	; 0
    ab32:	09 f4       	brne	.+2      	; 0xab36 <dir_find+0x1f8>
    ab34:	2b cf       	rjmp	.-426    	; 0xa98c <dir_find+0x4e>
    ab36:	28 2f       	mov	r18, r24
    ab38:	0b c0       	rjmp	.+22     	; 0xab50 <dir_find+0x212>
    ab3a:	24 e0       	ldi	r18, 0x04	; 4
    ab3c:	01 c0       	rjmp	.+2      	; 0xab40 <dir_find+0x202>
    ab3e:	20 e0       	ldi	r18, 0x00	; 0
    ab40:	90 e0       	ldi	r25, 0x00	; 0
    ab42:	06 c0       	rjmp	.+12     	; 0xab50 <dir_find+0x212>
    ab44:	0c 2d       	mov	r16, r12
    ab46:	ee cf       	rjmp	.-36     	; 0xab24 <dir_find+0x1e6>
    ab48:	1f ef       	ldi	r17, 0xFF	; 255
    ab4a:	1d 0d       	add	r17, r13
    ab4c:	0c 2d       	mov	r16, r12
    ab4e:	eb cf       	rjmp	.-42     	; 0xab26 <dir_find+0x1e8>
    ab50:	82 2f       	mov	r24, r18
    ab52:	2c 96       	adiw	r28, 0x0c	; 12
    ab54:	e2 e1       	ldi	r30, 0x12	; 18
    ab56:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000ab5a <dir_register>:
    ab5a:	a6 e1       	ldi	r26, 0x16	; 22
    ab5c:	b0 e0       	ldi	r27, 0x00	; 0
    ab5e:	e3 eb       	ldi	r30, 0xB3	; 179
    ab60:	f5 e5       	ldi	r31, 0x55	; 85
    ab62:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    ab66:	fc 01       	movw	r30, r24
    ab68:	27 a1       	ldd	r18, Z+39	; 0x27
    ab6a:	20 7a       	andi	r18, 0xA0	; 160
    ab6c:	09 f0       	breq	.+2      	; 0xab70 <dir_register+0x16>
    ab6e:	53 c1       	rjmp	.+678    	; 0xae16 <dir_register+0x2bc>
    ab70:	c0 80       	ld	r12, Z
    ab72:	d1 80       	ldd	r13, Z+1	; 0x01
    ab74:	f6 01       	movw	r30, r12
    ab76:	a3 85       	ldd	r26, Z+11	; 0x0b
    ab78:	b4 85       	ldd	r27, Z+12	; 0x0c
    ab7a:	81 2c       	mov	r8, r1
    ab7c:	91 2c       	mov	r9, r1
    ab7e:	2d 91       	ld	r18, X+
    ab80:	3d 91       	ld	r19, X+
    ab82:	23 2b       	or	r18, r19
    ab84:	21 f0       	breq	.+8      	; 0xab8e <dir_register+0x34>
    ab86:	ff ef       	ldi	r31, 0xFF	; 255
    ab88:	8f 1a       	sub	r8, r31
    ab8a:	9f 0a       	sbc	r9, r31
    ab8c:	f8 cf       	rjmp	.-16     	; 0xab7e <dir_register+0x24>
    ab8e:	8c 01       	movw	r16, r24
    ab90:	5c 01       	movw	r10, r24
    ab92:	2c e1       	ldi	r18, 0x1C	; 28
    ab94:	a2 0e       	add	r10, r18
    ab96:	b1 1c       	adc	r11, r1
    ab98:	4c e0       	ldi	r20, 0x0C	; 12
    ab9a:	50 e0       	ldi	r21, 0x00	; 0
    ab9c:	b5 01       	movw	r22, r10
    ab9e:	ce 01       	movw	r24, r28
    aba0:	01 96       	adiw	r24, 0x01	; 1
    aba2:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    aba6:	8c 85       	ldd	r24, Y+12	; 0x0c
    aba8:	80 ff       	sbrs	r24, 0
    abaa:	94 c0       	rjmp	.+296    	; 0xacd4 <dir_register+0x17a>
    abac:	80 e4       	ldi	r24, 0x40	; 64
    abae:	f8 01       	movw	r30, r16
    abb0:	87 a3       	std	Z+39, r24	; 0x27
    abb2:	41 2c       	mov	r4, r1
    abb4:	51 2c       	mov	r5, r1
    abb6:	32 01       	movw	r6, r4
    abb8:	43 94       	inc	r4
    abba:	72 01       	movw	r14, r4
    abbc:	f6 01       	movw	r30, r12
    abbe:	23 84       	ldd	r2, Z+11	; 0x0b
    abc0:	34 84       	ldd	r3, Z+12	; 0x0c
    abc2:	4b e0       	ldi	r20, 0x0B	; 11
    abc4:	50 e0       	ldi	r21, 0x00	; 0
    abc6:	be 01       	movw	r22, r28
    abc8:	6f 5f       	subi	r22, 0xFF	; 255
    abca:	7f 4f       	sbci	r23, 0xFF	; 255
    abcc:	c5 01       	movw	r24, r10
    abce:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    abd2:	f6 e0       	ldi	r31, 0x06	; 6
    abd4:	4f 16       	cp	r4, r31
    abd6:	51 04       	cpc	r5, r1
    abd8:	18 f1       	brcs	.+70     	; 0xac20 <dir_register+0xc6>
    abda:	f1 01       	movw	r30, r2
    abdc:	b3 01       	movw	r22, r6
    abde:	a2 01       	movw	r20, r4
    abe0:	81 91       	ld	r24, Z+
    abe2:	91 91       	ld	r25, Z+
    abe4:	00 97       	sbiw	r24, 0x00	; 0
    abe6:	d9 f0       	breq	.+54     	; 0xac1e <dir_register+0xc4>
    abe8:	20 e1       	ldi	r18, 0x10	; 16
    abea:	30 e0       	ldi	r19, 0x00	; 0
    abec:	44 0f       	add	r20, r20
    abee:	55 1f       	adc	r21, r21
    abf0:	66 1f       	adc	r22, r22
    abf2:	77 1f       	adc	r23, r23
    abf4:	dc 01       	movw	r26, r24
    abf6:	a1 70       	andi	r26, 0x01	; 1
    abf8:	bb 27       	eor	r27, r27
    abfa:	4a 0f       	add	r20, r26
    abfc:	5b 1f       	adc	r21, r27
    abfe:	61 1d       	adc	r22, r1
    ac00:	71 1d       	adc	r23, r1
    ac02:	96 95       	lsr	r25
    ac04:	87 95       	ror	r24
    ac06:	60 ff       	sbrs	r22, 0
    ac08:	06 c0       	rjmp	.+12     	; 0xac16 <dir_register+0xbc>
    ac0a:	a1 e2       	ldi	r26, 0x21	; 33
    ac0c:	4a 27       	eor	r20, r26
    ac0e:	a0 e1       	ldi	r26, 0x10	; 16
    ac10:	5a 27       	eor	r21, r26
    ac12:	a1 e0       	ldi	r26, 0x01	; 1
    ac14:	6a 27       	eor	r22, r26
    ac16:	21 50       	subi	r18, 0x01	; 1
    ac18:	31 09       	sbc	r19, r1
    ac1a:	41 f7       	brne	.-48     	; 0xabec <dir_register+0x92>
    ac1c:	e1 cf       	rjmp	.-62     	; 0xabe0 <dir_register+0x86>
    ac1e:	7a 01       	movw	r14, r20
    ac20:	fe 01       	movw	r30, r28
    ac22:	75 96       	adiw	r30, 0x15	; 21
    ac24:	27 e0       	ldi	r18, 0x07	; 7
    ac26:	30 e0       	ldi	r19, 0x00	; 0
    ac28:	9e 2d       	mov	r25, r14
    ac2a:	9f 70       	andi	r25, 0x0F	; 15
    ac2c:	80 e3       	ldi	r24, 0x30	; 48
    ac2e:	89 0f       	add	r24, r25
    ac30:	8a 33       	cpi	r24, 0x3A	; 58
    ac32:	10 f0       	brcs	.+4      	; 0xac38 <dir_register+0xde>
    ac34:	87 e3       	ldi	r24, 0x37	; 55
    ac36:	89 0f       	add	r24, r25
    ac38:	21 50       	subi	r18, 0x01	; 1
    ac3a:	31 09       	sbc	r19, r1
    ac3c:	82 93       	st	-Z, r24
    ac3e:	a4 e0       	ldi	r26, 0x04	; 4
    ac40:	f6 94       	lsr	r15
    ac42:	e7 94       	ror	r14
    ac44:	aa 95       	dec	r26
    ac46:	e1 f7       	brne	.-8      	; 0xac40 <dir_register+0xe6>
    ac48:	e1 14       	cp	r14, r1
    ac4a:	f1 04       	cpc	r15, r1
    ac4c:	69 f7       	brne	.-38     	; 0xac28 <dir_register+0xce>
    ac4e:	ed e0       	ldi	r30, 0x0D	; 13
    ac50:	f0 e0       	ldi	r31, 0x00	; 0
    ac52:	ec 0f       	add	r30, r28
    ac54:	fd 1f       	adc	r31, r29
    ac56:	e2 0f       	add	r30, r18
    ac58:	f3 1f       	adc	r31, r19
    ac5a:	4e e7       	ldi	r20, 0x7E	; 126
    ac5c:	40 83       	st	Z, r20
    ac5e:	f5 01       	movw	r30, r10
    ac60:	80 e0       	ldi	r24, 0x00	; 0
    ac62:	90 e0       	ldi	r25, 0x00	; 0
    ac64:	28 17       	cp	r18, r24
    ac66:	39 07       	cpc	r19, r25
    ac68:	29 f0       	breq	.+10     	; 0xac74 <dir_register+0x11a>
    ac6a:	41 91       	ld	r20, Z+
    ac6c:	40 32       	cpi	r20, 0x20	; 32
    ac6e:	11 f0       	breq	.+4      	; 0xac74 <dir_register+0x11a>
    ac70:	01 96       	adiw	r24, 0x01	; 1
    ac72:	f8 cf       	rjmp	.-16     	; 0xac64 <dir_register+0x10a>
    ac74:	f5 01       	movw	r30, r10
    ac76:	e8 0f       	add	r30, r24
    ac78:	f9 1f       	adc	r31, r25
    ac7a:	28 30       	cpi	r18, 0x08	; 8
    ac7c:	31 05       	cpc	r19, r1
    ac7e:	50 f4       	brcc	.+20     	; 0xac94 <dir_register+0x13a>
    ac80:	ad e0       	ldi	r26, 0x0D	; 13
    ac82:	b0 e0       	ldi	r27, 0x00	; 0
    ac84:	ac 0f       	add	r26, r28
    ac86:	bd 1f       	adc	r27, r29
    ac88:	a2 0f       	add	r26, r18
    ac8a:	b3 1f       	adc	r27, r19
    ac8c:	8c 91       	ld	r24, X
    ac8e:	2f 5f       	subi	r18, 0xFF	; 255
    ac90:	3f 4f       	sbci	r19, 0xFF	; 255
    ac92:	01 c0       	rjmp	.+2      	; 0xac96 <dir_register+0x13c>
    ac94:	80 e2       	ldi	r24, 0x20	; 32
    ac96:	81 93       	st	Z+, r24
    ac98:	cf 01       	movw	r24, r30
    ac9a:	8a 19       	sub	r24, r10
    ac9c:	9b 09       	sbc	r25, r11
    ac9e:	08 97       	sbiw	r24, 0x08	; 8
    aca0:	60 f3       	brcs	.-40     	; 0xac7a <dir_register+0x120>
    aca2:	c8 01       	movw	r24, r16
    aca4:	4c de       	rcall	.-872    	; 0xa93e <dir_find>
    aca6:	00 97       	sbiw	r24, 0x00	; 0
    aca8:	71 f4       	brne	.+28     	; 0xacc6 <dir_register+0x16c>
    acaa:	8f ef       	ldi	r24, 0xFF	; 255
    acac:	48 1a       	sub	r4, r24
    acae:	58 0a       	sbc	r5, r24
    acb0:	68 0a       	sbc	r6, r24
    acb2:	78 0a       	sbc	r7, r24
    acb4:	94 e6       	ldi	r25, 0x64	; 100
    acb6:	49 16       	cp	r4, r25
    acb8:	51 04       	cpc	r5, r1
    acba:	61 04       	cpc	r6, r1
    acbc:	71 04       	cpc	r7, r1
    acbe:	09 f0       	breq	.+2      	; 0xacc2 <dir_register+0x168>
    acc0:	7c cf       	rjmp	.-264    	; 0xabba <dir_register+0x60>
    acc2:	27 e0       	ldi	r18, 0x07	; 7
    acc4:	a9 c0       	rjmp	.+338    	; 0xae18 <dir_register+0x2be>
    acc6:	84 30       	cpi	r24, 0x04	; 4
    acc8:	91 05       	cpc	r25, r1
    acca:	09 f0       	breq	.+2      	; 0xacce <dir_register+0x174>
    accc:	ce c0       	rjmp	.+412    	; 0xae6a <dir_register+0x310>
    acce:	8c 85       	ldd	r24, Y+12	; 0x0c
    acd0:	f8 01       	movw	r30, r16
    acd2:	87 a3       	std	Z+39, r24	; 0x27
    acd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    acd6:	81 ff       	sbrs	r24, 1
    acd8:	0b c0       	rjmp	.+22     	; 0xacf0 <dir_register+0x196>
    acda:	c4 01       	movw	r24, r8
    acdc:	0c 96       	adiw	r24, 0x0c	; 12
    acde:	6d e0       	ldi	r22, 0x0D	; 13
    ace0:	70 e0       	ldi	r23, 0x00	; 0
    ace2:	0e 94 58 e6 	call	0x1ccb0	; 0x1ccb0 <__udivmodhi4>
    ace6:	7b 01       	movw	r14, r22
    ace8:	ff ef       	ldi	r31, 0xFF	; 255
    acea:	ef 1a       	sub	r14, r31
    acec:	ff 0a       	sbc	r15, r31
    acee:	03 c0       	rjmp	.+6      	; 0xacf6 <dir_register+0x19c>
    acf0:	ee 24       	eor	r14, r14
    acf2:	e3 94       	inc	r14
    acf4:	f1 2c       	mov	r15, r1
    acf6:	b7 01       	movw	r22, r14
    acf8:	c8 01       	movw	r24, r16
    acfa:	d7 dc       	rcall	.-1618   	; 0xa6aa <dir_alloc>
    acfc:	00 97       	sbiw	r24, 0x00	; 0
    acfe:	09 f0       	breq	.+2      	; 0xad02 <dir_register+0x1a8>
    ad00:	b4 c0       	rjmp	.+360    	; 0xae6a <dir_register+0x310>
    ad02:	21 e0       	ldi	r18, 0x01	; 1
    ad04:	e2 1a       	sub	r14, r18
    ad06:	f1 08       	sbc	r15, r1
    ad08:	09 f4       	brne	.+2      	; 0xad0c <dir_register+0x1b2>
    ad0a:	88 c0       	rjmp	.+272    	; 0xae1c <dir_register+0x2c2>
    ad0c:	f8 01       	movw	r30, r16
    ad0e:	46 85       	ldd	r20, Z+14	; 0x0e
    ad10:	57 85       	ldd	r21, Z+15	; 0x0f
    ad12:	60 89       	ldd	r22, Z+16	; 0x10
    ad14:	71 89       	ldd	r23, Z+17	; 0x11
    ad16:	c7 01       	movw	r24, r14
    ad18:	e5 e0       	ldi	r30, 0x05	; 5
    ad1a:	88 0f       	add	r24, r24
    ad1c:	99 1f       	adc	r25, r25
    ad1e:	ea 95       	dec	r30
    ad20:	e1 f7       	brne	.-8      	; 0xad1a <dir_register+0x1c0>
    ad22:	48 1b       	sub	r20, r24
    ad24:	59 0b       	sbc	r21, r25
    ad26:	61 09       	sbc	r22, r1
    ad28:	71 09       	sbc	r23, r1
    ad2a:	c8 01       	movw	r24, r16
    ad2c:	5e d9       	rcall	.-3396   	; 0x9fea <dir_sdi>
    ad2e:	00 97       	sbiw	r24, 0x00	; 0
    ad30:	09 f0       	breq	.+2      	; 0xad34 <dir_register+0x1da>
    ad32:	9b c0       	rjmp	.+310    	; 0xae6a <dir_register+0x310>
    ad34:	c5 01       	movw	r24, r10
    ad36:	0e 94 48 48 	call	0x9090	; 0x9090 <sum_sfn>
    ad3a:	68 2e       	mov	r6, r24
    ad3c:	5f e0       	ldi	r21, 0x0F	; 15
    ad3e:	35 2e       	mov	r3, r21
    ad40:	6d e0       	ldi	r22, 0x0D	; 13
    ad42:	46 2e       	mov	r4, r22
    ad44:	78 ef       	ldi	r23, 0xF8	; 248
    ad46:	87 2e       	mov	r8, r23
    ad48:	74 e0       	ldi	r23, 0x04	; 4
    ad4a:	97 2e       	mov	r9, r23
    ad4c:	55 24       	eor	r5, r5
    ad4e:	53 94       	inc	r5
    ad50:	f8 01       	movw	r30, r16
    ad52:	46 89       	ldd	r20, Z+22	; 0x16
    ad54:	57 89       	ldd	r21, Z+23	; 0x17
    ad56:	60 8d       	ldd	r22, Z+24	; 0x18
    ad58:	71 8d       	ldd	r23, Z+25	; 0x19
    ad5a:	c6 01       	movw	r24, r12
    ad5c:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    ad60:	00 97       	sbiw	r24, 0x00	; 0
    ad62:	09 f0       	breq	.+2      	; 0xad66 <dir_register+0x20c>
    ad64:	82 c0       	rjmp	.+260    	; 0xae6a <dir_register+0x310>
    ad66:	f6 01       	movw	r30, r12
    ad68:	63 85       	ldd	r22, Z+11	; 0x0b
    ad6a:	74 85       	ldd	r23, Z+12	; 0x0c
    ad6c:	f8 01       	movw	r30, r16
    ad6e:	02 8c       	ldd	r0, Z+26	; 0x1a
    ad70:	f3 8d       	ldd	r31, Z+27	; 0x1b
    ad72:	e0 2d       	mov	r30, r0
    ad74:	fe 8b       	std	Y+22, r31	; 0x16
    ad76:	ed 8b       	std	Y+21, r30	; 0x15
    ad78:	7e 2c       	mov	r7, r14
    ad7a:	65 86       	std	Z+13, r6	; 0x0d
    ad7c:	33 86       	std	Z+11, r3	; 0x0b
    ad7e:	14 86       	std	Z+12, r1	; 0x0c
    ad80:	12 8e       	std	Z+26, r1	; 0x1a
    ad82:	13 8e       	std	Z+27, r1	; 0x1b
    ad84:	97 01       	movw	r18, r14
    ad86:	33 27       	eor	r19, r19
    ad88:	21 50       	subi	r18, 0x01	; 1
    ad8a:	31 09       	sbc	r19, r1
    ad8c:	42 9e       	mul	r4, r18
    ad8e:	c0 01       	movw	r24, r0
    ad90:	43 9e       	mul	r4, r19
    ad92:	90 0d       	add	r25, r0
    ad94:	11 24       	eor	r1, r1
    ad96:	ab ee       	ldi	r26, 0xEB	; 235
    ad98:	b4 e0       	ldi	r27, 0x04	; 4
    ad9a:	20 e0       	ldi	r18, 0x00	; 0
    ad9c:	30 e0       	ldi	r19, 0x00	; 0
    ad9e:	2f 3f       	cpi	r18, 0xFF	; 255
    ada0:	ff ef       	ldi	r31, 0xFF	; 255
    ada2:	3f 07       	cpc	r19, r31
    ada4:	49 f0       	breq	.+18     	; 0xadb8 <dir_register+0x25e>
    ada6:	9c 01       	movw	r18, r24
    ada8:	22 0f       	add	r18, r18
    adaa:	33 1f       	adc	r19, r19
    adac:	26 0f       	add	r18, r22
    adae:	37 1f       	adc	r19, r23
    adb0:	f9 01       	movw	r30, r18
    adb2:	20 81       	ld	r18, Z
    adb4:	31 81       	ldd	r19, Z+1	; 0x01
    adb6:	01 96       	adiw	r24, 0x01	; 1
    adb8:	4d 91       	ld	r20, X+
    adba:	ed 89       	ldd	r30, Y+21	; 0x15
    adbc:	fe 89       	ldd	r31, Y+22	; 0x16
    adbe:	e4 0f       	add	r30, r20
    adc0:	f1 1d       	adc	r31, r1
    adc2:	20 83       	st	Z, r18
    adc4:	31 83       	std	Z+1, r19	; 0x01
    adc6:	21 15       	cp	r18, r1
    adc8:	31 05       	cpc	r19, r1
    adca:	11 f4       	brne	.+4      	; 0xadd0 <dir_register+0x276>
    adcc:	2f ef       	ldi	r18, 0xFF	; 255
    adce:	3f ef       	ldi	r19, 0xFF	; 255
    add0:	8a 16       	cp	r8, r26
    add2:	9b 06       	cpc	r9, r27
    add4:	21 f7       	brne	.-56     	; 0xad9e <dir_register+0x244>
    add6:	2f 3f       	cpi	r18, 0xFF	; 255
    add8:	3f 4f       	sbci	r19, 0xFF	; 255
    adda:	49 f0       	breq	.+18     	; 0xadee <dir_register+0x294>
    addc:	88 0f       	add	r24, r24
    adde:	99 1f       	adc	r25, r25
    ade0:	db 01       	movw	r26, r22
    ade2:	a8 0f       	add	r26, r24
    ade4:	b9 1f       	adc	r27, r25
    ade6:	8d 91       	ld	r24, X+
    ade8:	9c 91       	ld	r25, X
    adea:	89 2b       	or	r24, r25
    adec:	19 f4       	brne	.+6      	; 0xadf4 <dir_register+0x29a>
    adee:	27 2d       	mov	r18, r7
    adf0:	20 64       	ori	r18, 0x40	; 64
    adf2:	72 2e       	mov	r7, r18
    adf4:	ed 89       	ldd	r30, Y+21	; 0x15
    adf6:	fe 89       	ldd	r31, Y+22	; 0x16
    adf8:	70 82       	st	Z, r7
    adfa:	f6 01       	movw	r30, r12
    adfc:	53 82       	std	Z+3, r5	; 0x03
    adfe:	60 e0       	ldi	r22, 0x00	; 0
    ae00:	70 e0       	ldi	r23, 0x00	; 0
    ae02:	c8 01       	movw	r24, r16
    ae04:	6a db       	rcall	.-2348   	; 0xa4da <dir_next>
    ae06:	00 97       	sbiw	r24, 0x00	; 0
    ae08:	81 f5       	brne	.+96     	; 0xae6a <dir_register+0x310>
    ae0a:	f1 e0       	ldi	r31, 0x01	; 1
    ae0c:	ef 1a       	sub	r14, r31
    ae0e:	f1 08       	sbc	r15, r1
    ae10:	09 f0       	breq	.+2      	; 0xae14 <dir_register+0x2ba>
    ae12:	9e cf       	rjmp	.-196    	; 0xad50 <dir_register+0x1f6>
    ae14:	03 c0       	rjmp	.+6      	; 0xae1c <dir_register+0x2c2>
    ae16:	26 e0       	ldi	r18, 0x06	; 6
    ae18:	90 e0       	ldi	r25, 0x00	; 0
    ae1a:	28 c0       	rjmp	.+80     	; 0xae6c <dir_register+0x312>
    ae1c:	f8 01       	movw	r30, r16
    ae1e:	46 89       	ldd	r20, Z+22	; 0x16
    ae20:	57 89       	ldd	r21, Z+23	; 0x17
    ae22:	60 8d       	ldd	r22, Z+24	; 0x18
    ae24:	71 8d       	ldd	r23, Z+25	; 0x19
    ae26:	c6 01       	movw	r24, r12
    ae28:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    ae2c:	00 97       	sbiw	r24, 0x00	; 0
    ae2e:	e9 f4       	brne	.+58     	; 0xae6a <dir_register+0x310>
    ae30:	40 e2       	ldi	r20, 0x20	; 32
    ae32:	50 e0       	ldi	r21, 0x00	; 0
    ae34:	60 e0       	ldi	r22, 0x00	; 0
    ae36:	70 e0       	ldi	r23, 0x00	; 0
    ae38:	f8 01       	movw	r30, r16
    ae3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae3c:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae3e:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <mem_set>
    ae42:	4b e0       	ldi	r20, 0x0B	; 11
    ae44:	50 e0       	ldi	r21, 0x00	; 0
    ae46:	b5 01       	movw	r22, r10
    ae48:	f8 01       	movw	r30, r16
    ae4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae4c:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae4e:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    ae52:	f8 01       	movw	r30, r16
    ae54:	22 8d       	ldd	r18, Z+26	; 0x1a
    ae56:	33 8d       	ldd	r19, Z+27	; 0x1b
    ae58:	87 a1       	ldd	r24, Z+39	; 0x27
    ae5a:	88 71       	andi	r24, 0x18	; 24
    ae5c:	f9 01       	movw	r30, r18
    ae5e:	84 87       	std	Z+12, r24	; 0x0c
    ae60:	81 e0       	ldi	r24, 0x01	; 1
    ae62:	f6 01       	movw	r30, r12
    ae64:	83 83       	std	Z+3, r24	; 0x03
    ae66:	20 e0       	ldi	r18, 0x00	; 0
    ae68:	d7 cf       	rjmp	.-82     	; 0xae18 <dir_register+0x2be>
    ae6a:	28 2f       	mov	r18, r24
    ae6c:	82 2f       	mov	r24, r18
    ae6e:	66 96       	adiw	r28, 0x16	; 22
    ae70:	e2 e1       	ldi	r30, 0x12	; 18
    ae72:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000ae76 <follow_path>:
    ae76:	a8 e0       	ldi	r26, 0x08	; 8
    ae78:	b0 e0       	ldi	r27, 0x00	; 0
    ae7a:	e1 e4       	ldi	r30, 0x41	; 65
    ae7c:	f7 e5       	ldi	r31, 0x57	; 87
    ae7e:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    ae82:	8c 01       	movw	r16, r24
    ae84:	78 87       	std	Y+8, r23	; 0x08
    ae86:	6f 83       	std	Y+7, r22	; 0x07
    ae88:	dc 01       	movw	r26, r24
    ae8a:	0d 90       	ld	r0, X+
    ae8c:	bc 91       	ld	r27, X
    ae8e:	a0 2d       	mov	r26, r0
    ae90:	ba 83       	std	Y+2, r27	; 0x02
    ae92:	a9 83       	std	Y+1, r26	; 0x01
    ae94:	fb 01       	movw	r30, r22
    ae96:	80 81       	ld	r24, Z
    ae98:	8f 32       	cpi	r24, 0x2F	; 47
    ae9a:	11 f0       	breq	.+4      	; 0xaea0 <follow_path+0x2a>
    ae9c:	8c 35       	cpi	r24, 0x5C	; 92
    ae9e:	19 f4       	brne	.+6      	; 0xaea6 <follow_path+0x30>
    aea0:	2f 81       	ldd	r18, Y+7	; 0x07
    aea2:	38 85       	ldd	r19, Y+8	; 0x08
    aea4:	0c c0       	rjmp	.+24     	; 0xaebe <follow_path+0x48>
    aea6:	e9 81       	ldd	r30, Y+1	; 0x01
    aea8:	fa 81       	ldd	r31, Y+2	; 0x02
    aeaa:	85 89       	ldd	r24, Z+21	; 0x15
    aeac:	96 89       	ldd	r25, Z+22	; 0x16
    aeae:	a7 89       	ldd	r26, Z+23	; 0x17
    aeb0:	b0 8d       	ldd	r27, Z+24	; 0x18
    aeb2:	f8 01       	movw	r30, r16
    aeb4:	86 83       	std	Z+6, r24	; 0x06
    aeb6:	97 83       	std	Z+7, r25	; 0x07
    aeb8:	a0 87       	std	Z+8, r26	; 0x08
    aeba:	b1 87       	std	Z+9, r27	; 0x09
    aebc:	0f c0       	rjmp	.+30     	; 0xaedc <follow_path+0x66>
    aebe:	38 87       	std	Y+8, r19	; 0x08
    aec0:	2f 83       	std	Y+7, r18	; 0x07
    aec2:	d9 01       	movw	r26, r18
    aec4:	8c 91       	ld	r24, X
    aec6:	2f 5f       	subi	r18, 0xFF	; 255
    aec8:	3f 4f       	sbci	r19, 0xFF	; 255
    aeca:	8f 32       	cpi	r24, 0x2F	; 47
    aecc:	c1 f3       	breq	.-16     	; 0xaebe <follow_path+0x48>
    aece:	8c 35       	cpi	r24, 0x5C	; 92
    aed0:	b1 f3       	breq	.-20     	; 0xaebe <follow_path+0x48>
    aed2:	f8 01       	movw	r30, r16
    aed4:	16 82       	std	Z+6, r1	; 0x06
    aed6:	17 82       	std	Z+7, r1	; 0x07
    aed8:	10 86       	std	Z+8, r1	; 0x08
    aeda:	11 86       	std	Z+9, r1	; 0x09
    aedc:	af 81       	ldd	r26, Y+7	; 0x07
    aede:	b8 85       	ldd	r27, Y+8	; 0x08
    aee0:	8c 91       	ld	r24, X
    aee2:	80 32       	cpi	r24, 0x20	; 32
    aee4:	58 f0       	brcs	.+22     	; 0xaefc <follow_path+0x86>
    aee6:	f8 01       	movw	r30, r16
    aee8:	7c 96       	adiw	r30, 0x1c	; 28
    aeea:	fc 83       	std	Y+4, r31	; 0x04
    aeec:	eb 83       	std	Y+3, r30	; 0x03
    aeee:	29 81       	ldd	r18, Y+1	; 0x01
    aef0:	3a 81       	ldd	r19, Y+2	; 0x02
    aef2:	2b 5c       	subi	r18, 0xCB	; 203
    aef4:	3f 4f       	sbci	r19, 0xFF	; 255
    aef6:	3e 83       	std	Y+6, r19	; 0x06
    aef8:	2d 83       	std	Y+5, r18	; 0x05
    aefa:	76 c0       	rjmp	.+236    	; 0xafe8 <follow_path+0x172>
    aefc:	80 e8       	ldi	r24, 0x80	; 128
    aefe:	f8 01       	movw	r30, r16
    af00:	87 a3       	std	Z+39, r24	; 0x27
    af02:	40 e0       	ldi	r20, 0x00	; 0
    af04:	50 e0       	ldi	r21, 0x00	; 0
    af06:	ba 01       	movw	r22, r20
    af08:	c8 01       	movw	r24, r16
    af0a:	6f d8       	rcall	.-3874   	; 0x9fea <dir_sdi>
    af0c:	ec c1       	rjmp	.+984    	; 0xb2e6 <follow_path+0x470>
    af0e:	65 eb       	ldi	r22, 0xB5	; 181
    af10:	71 e0       	ldi	r23, 0x01	; 1
    af12:	0e 94 22 69 	call	0xd244	; 0xd244 <ff_oem2uni>
    af16:	00 97       	sbiw	r24, 0x00	; 0
    af18:	09 f4       	brne	.+2      	; 0xaf1c <follow_path+0xa6>
    af1a:	b8 c1       	rjmp	.+880    	; 0xb28c <follow_path+0x416>
    af1c:	80 32       	cpi	r24, 0x20	; 32
    af1e:	91 05       	cpc	r25, r1
    af20:	30 f1       	brcs	.+76     	; 0xaf6e <follow_path+0xf8>
    af22:	8f 32       	cpi	r24, 0x2F	; 47
    af24:	91 05       	cpc	r25, r1
    af26:	09 f4       	brne	.+2      	; 0xaf2a <follow_path+0xb4>
    af28:	6b c0       	rjmp	.+214    	; 0xb000 <follow_path+0x18a>
    af2a:	8c 35       	cpi	r24, 0x5C	; 92
    af2c:	91 05       	cpc	r25, r1
    af2e:	09 f4       	brne	.+2      	; 0xaf32 <follow_path+0xbc>
    af30:	67 c0       	rjmp	.+206    	; 0xb000 <follow_path+0x18a>
    af32:	80 38       	cpi	r24, 0x80	; 128
    af34:	91 05       	cpc	r25, r1
    af36:	28 f4       	brcc	.+10     	; 0xaf42 <follow_path+0xcc>
    af38:	e7 e2       	ldi	r30, 0x27	; 39
    af3a:	f4 e0       	ldi	r31, 0x04	; 4
    af3c:	21 91       	ld	r18, Z+
    af3e:	21 11       	cpse	r18, r1
    af40:	61 c0       	rjmp	.+194    	; 0xb004 <follow_path+0x18e>
    af42:	ef 81       	ldd	r30, Y+7	; 0x07
    af44:	f8 85       	ldd	r31, Y+8	; 0x08
    af46:	ef 3f       	cpi	r30, 0xFF	; 255
    af48:	f1 05       	cpc	r31, r1
    af4a:	09 f4       	brne	.+2      	; 0xaf4e <follow_path+0xd8>
    af4c:	9f c1       	rjmp	.+830    	; 0xb28c <follow_path+0x416>
    af4e:	31 96       	adiw	r30, 0x01	; 1
    af50:	f8 87       	std	Y+8, r31	; 0x08
    af52:	ef 83       	std	Y+7, r30	; 0x07
    af54:	d6 01       	movw	r26, r12
    af56:	8d 93       	st	X+, r24
    af58:	9d 93       	st	X+, r25
    af5a:	6d 01       	movw	r12, r26
    af5c:	bf ef       	ldi	r27, 0xFF	; 255
    af5e:	eb 1a       	sub	r14, r27
    af60:	fb 0a       	sbc	r15, r27
    af62:	f7 01       	movw	r30, r14
    af64:	31 97       	sbiw	r30, 0x01	; 1
    af66:	80 81       	ld	r24, Z
    af68:	90 e0       	ldi	r25, 0x00	; 0
    af6a:	00 97       	sbiw	r24, 0x00	; 0
    af6c:	81 f6       	brne	.-96     	; 0xaf0e <follow_path+0x98>
    af6e:	74 e0       	ldi	r23, 0x04	; 4
    af70:	37 2e       	mov	r3, r23
    af72:	2f 81       	ldd	r18, Y+7	; 0x07
    af74:	38 85       	ldd	r19, Y+8	; 0x08
    af76:	22 0f       	add	r18, r18
    af78:	33 1f       	adc	r19, r19
    af7a:	8f 81       	ldd	r24, Y+7	; 0x07
    af7c:	98 85       	ldd	r25, Y+8	; 0x08
    af7e:	01 97       	sbiw	r24, 0x01	; 1
    af80:	09 f0       	breq	.+2      	; 0xaf84 <follow_path+0x10e>
    af82:	51 c0       	rjmp	.+162    	; 0xb026 <follow_path+0x1b0>
    af84:	d5 01       	movw	r26, r10
    af86:	8d 91       	ld	r24, X+
    af88:	9c 91       	ld	r25, X
    af8a:	8e 97       	sbiw	r24, 0x2e	; 46
    af8c:	09 f0       	breq	.+2      	; 0xaf90 <follow_path+0x11a>
    af8e:	57 c0       	rjmp	.+174    	; 0xb03e <follow_path+0x1c8>
    af90:	f9 01       	movw	r30, r18
    af92:	ea 0d       	add	r30, r10
    af94:	fb 1d       	adc	r31, r11
    af96:	11 82       	std	Z+1, r1	; 0x01
    af98:	10 82       	st	Z, r1
    af9a:	f8 01       	movw	r30, r16
    af9c:	7c 96       	adiw	r30, 0x1c	; 28
    af9e:	80 e0       	ldi	r24, 0x00	; 0
    afa0:	90 e0       	ldi	r25, 0x00	; 0
    afa2:	2f 81       	ldd	r18, Y+7	; 0x07
    afa4:	38 85       	ldd	r19, Y+8	; 0x08
    afa6:	82 17       	cp	r24, r18
    afa8:	93 07       	cpc	r25, r19
    afaa:	08 f0       	brcs	.+2      	; 0xafae <follow_path+0x138>
    afac:	4c c0       	rjmp	.+152    	; 0xb046 <follow_path+0x1d0>
    afae:	2e e2       	ldi	r18, 0x2E	; 46
    afb0:	21 93       	st	Z+, r18
    afb2:	01 96       	adiw	r24, 0x01	; 1
    afb4:	8b 30       	cpi	r24, 0x0B	; 11
    afb6:	91 05       	cpc	r25, r1
    afb8:	a1 f7       	brne	.-24     	; 0xafa2 <follow_path+0x12c>
    afba:	83 2d       	mov	r24, r3
    afbc:	80 62       	ori	r24, 0x20	; 32
    afbe:	f8 01       	movw	r30, r16
    afc0:	87 a3       	std	Z+39, r24	; 0x27
    afc2:	c8 01       	movw	r24, r16
    afc4:	bc dc       	rcall	.-1672   	; 0xa93e <dir_find>
    afc6:	f8 01       	movw	r30, r16
    afc8:	27 a1       	ldd	r18, Z+39	; 0x27
    afca:	00 97       	sbiw	r24, 0x00	; 0
    afcc:	09 f4       	brne	.+2      	; 0xafd0 <follow_path+0x15a>
    afce:	6a c1       	rjmp	.+724    	; 0xb2a4 <follow_path+0x42e>
    afd0:	84 30       	cpi	r24, 0x04	; 4
    afd2:	91 05       	cpc	r25, r1
    afd4:	09 f0       	breq	.+2      	; 0xafd8 <follow_path+0x162>
    afd6:	87 c1       	rjmp	.+782    	; 0xb2e6 <follow_path+0x470>
    afd8:	32 2f       	mov	r19, r18
    afda:	34 70       	andi	r19, 0x04	; 4
    afdc:	25 ff       	sbrs	r18, 5
    afde:	5f c1       	rjmp	.+702    	; 0xb29e <follow_path+0x428>
    afe0:	31 11       	cpse	r19, r1
    afe2:	57 c1       	rjmp	.+686    	; 0xb292 <follow_path+0x41c>
    afe4:	f8 86       	std	Y+8, r15	; 0x08
    afe6:	ef 82       	std	Y+7, r14	; 0x07
    afe8:	d8 01       	movw	r26, r16
    afea:	ed 91       	ld	r30, X+
    afec:	fc 91       	ld	r31, X
    afee:	a3 84       	ldd	r10, Z+11	; 0x0b
    aff0:	b4 84       	ldd	r11, Z+12	; 0x0c
    aff2:	45 01       	movw	r8, r10
    aff4:	65 01       	movw	r12, r10
    aff6:	ef 80       	ldd	r14, Y+7	; 0x07
    aff8:	f8 84       	ldd	r15, Y+8	; 0x08
    affa:	18 86       	std	Y+8, r1	; 0x08
    affc:	1f 82       	std	Y+7, r1	; 0x07
    affe:	ae cf       	rjmp	.-164    	; 0xaf5c <follow_path+0xe6>
    b000:	97 01       	movw	r18, r14
    b002:	06 c0       	rjmp	.+12     	; 0xb010 <follow_path+0x19a>
    b004:	30 e0       	ldi	r19, 0x00	; 0
    b006:	82 17       	cp	r24, r18
    b008:	93 07       	cpc	r25, r19
    b00a:	09 f0       	breq	.+2      	; 0xb00e <follow_path+0x198>
    b00c:	97 cf       	rjmp	.-210    	; 0xaf3c <follow_path+0xc6>
    b00e:	3e c1       	rjmp	.+636    	; 0xb28c <follow_path+0x416>
    b010:	79 01       	movw	r14, r18
    b012:	f9 01       	movw	r30, r18
    b014:	80 81       	ld	r24, Z
    b016:	2f 5f       	subi	r18, 0xFF	; 255
    b018:	3f 4f       	sbci	r19, 0xFF	; 255
    b01a:	8f 32       	cpi	r24, 0x2F	; 47
    b01c:	c9 f3       	breq	.-14     	; 0xb010 <follow_path+0x19a>
    b01e:	8c 35       	cpi	r24, 0x5C	; 92
    b020:	b9 f3       	breq	.-18     	; 0xb010 <follow_path+0x19a>
    b022:	31 2c       	mov	r3, r1
    b024:	a6 cf       	rjmp	.-180    	; 0xaf72 <follow_path+0xfc>
    b026:	ef 81       	ldd	r30, Y+7	; 0x07
    b028:	f8 85       	ldd	r31, Y+8	; 0x08
    b02a:	32 97       	sbiw	r30, 0x02	; 2
    b02c:	41 f4       	brne	.+16     	; 0xb03e <follow_path+0x1c8>
    b02e:	f5 01       	movw	r30, r10
    b030:	82 81       	ldd	r24, Z+2	; 0x02
    b032:	93 81       	ldd	r25, Z+3	; 0x03
    b034:	8e 97       	sbiw	r24, 0x2e	; 46
    b036:	19 f4       	brne	.+6      	; 0xb03e <follow_path+0x1c8>
    b038:	80 81       	ld	r24, Z
    b03a:	91 81       	ldd	r25, Z+1	; 0x01
    b03c:	a6 cf       	rjmp	.-180    	; 0xaf8a <follow_path+0x114>
    b03e:	f9 01       	movw	r30, r18
    b040:	ea 0d       	add	r30, r10
    b042:	fb 1d       	adc	r31, r11
    b044:	0d c0       	rjmp	.+26     	; 0xb060 <follow_path+0x1ea>
    b046:	20 e2       	ldi	r18, 0x20	; 32
    b048:	b3 cf       	rjmp	.-154    	; 0xafb0 <follow_path+0x13a>
    b04a:	92 91       	ld	r25, -Z
    b04c:	82 91       	ld	r24, -Z
    b04e:	80 32       	cpi	r24, 0x20	; 32
    b050:	91 05       	cpc	r25, r1
    b052:	59 f4       	brne	.+22     	; 0xb06a <follow_path+0x1f4>
    b054:	2f 81       	ldd	r18, Y+7	; 0x07
    b056:	38 85       	ldd	r19, Y+8	; 0x08
    b058:	21 50       	subi	r18, 0x01	; 1
    b05a:	31 09       	sbc	r19, r1
    b05c:	38 87       	std	Y+8, r19	; 0x08
    b05e:	2f 83       	std	Y+7, r18	; 0x07
    b060:	8f 81       	ldd	r24, Y+7	; 0x07
    b062:	98 85       	ldd	r25, Y+8	; 0x08
    b064:	89 2b       	or	r24, r25
    b066:	89 f7       	brne	.-30     	; 0xb04a <follow_path+0x1d4>
    b068:	02 c0       	rjmp	.+4      	; 0xb06e <follow_path+0x1f8>
    b06a:	8e 97       	sbiw	r24, 0x2e	; 46
    b06c:	99 f3       	breq	.-26     	; 0xb054 <follow_path+0x1de>
    b06e:	ef 81       	ldd	r30, Y+7	; 0x07
    b070:	f8 85       	ldd	r31, Y+8	; 0x08
    b072:	ee 0f       	add	r30, r30
    b074:	ff 1f       	adc	r31, r31
    b076:	ea 0d       	add	r30, r10
    b078:	fb 1d       	adc	r31, r11
    b07a:	11 82       	std	Z+1, r1	; 0x01
    b07c:	10 82       	st	Z, r1
    b07e:	af 81       	ldd	r26, Y+7	; 0x07
    b080:	b8 85       	ldd	r27, Y+8	; 0x08
    b082:	ab 2b       	or	r26, r27
    b084:	09 f4       	brne	.+2      	; 0xb088 <follow_path+0x212>
    b086:	02 c1       	rjmp	.+516    	; 0xb28c <follow_path+0x416>
    b088:	61 2c       	mov	r6, r1
    b08a:	71 2c       	mov	r7, r1
    b08c:	d4 01       	movw	r26, r8
    b08e:	8d 91       	ld	r24, X+
    b090:	9d 91       	ld	r25, X+
    b092:	4d 01       	movw	r8, r26
    b094:	80 32       	cpi	r24, 0x20	; 32
    b096:	91 05       	cpc	r25, r1
    b098:	21 f4       	brne	.+8      	; 0xb0a2 <follow_path+0x22c>
    b09a:	bf ef       	ldi	r27, 0xFF	; 255
    b09c:	6b 1a       	sub	r6, r27
    b09e:	7b 0a       	sbc	r7, r27
    b0a0:	f5 cf       	rjmp	.-22     	; 0xb08c <follow_path+0x216>
    b0a2:	61 14       	cp	r6, r1
    b0a4:	71 04       	cpc	r7, r1
    b0a6:	11 f4       	brne	.+4      	; 0xb0ac <follow_path+0x236>
    b0a8:	8e 97       	sbiw	r24, 0x2e	; 46
    b0aa:	61 f4       	brne	.+24     	; 0xb0c4 <follow_path+0x24e>
    b0ac:	b3 2d       	mov	r27, r3
    b0ae:	b3 60       	ori	r27, 0x03	; 3
    b0b0:	3b 2e       	mov	r3, r27
    b0b2:	08 c0       	rjmp	.+16     	; 0xb0c4 <follow_path+0x24e>
    b0b4:	2f 81       	ldd	r18, Y+7	; 0x07
    b0b6:	38 85       	ldd	r19, Y+8	; 0x08
    b0b8:	21 50       	subi	r18, 0x01	; 1
    b0ba:	31 09       	sbc	r19, r1
    b0bc:	38 87       	std	Y+8, r19	; 0x08
    b0be:	2f 83       	std	Y+7, r18	; 0x07
    b0c0:	23 2b       	or	r18, r19
    b0c2:	21 f0       	breq	.+8      	; 0xb0cc <follow_path+0x256>
    b0c4:	92 91       	ld	r25, -Z
    b0c6:	82 91       	ld	r24, -Z
    b0c8:	8e 97       	sbiw	r24, 0x2e	; 46
    b0ca:	a1 f7       	brne	.-24     	; 0xb0b4 <follow_path+0x23e>
    b0cc:	4b e0       	ldi	r20, 0x0B	; 11
    b0ce:	50 e0       	ldi	r21, 0x00	; 0
    b0d0:	60 e2       	ldi	r22, 0x20	; 32
    b0d2:	70 e0       	ldi	r23, 0x00	; 0
    b0d4:	8b 81       	ldd	r24, Y+3	; 0x03
    b0d6:	9c 81       	ldd	r25, Y+4	; 0x04
    b0d8:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <mem_set>
    b0dc:	48 e0       	ldi	r20, 0x08	; 8
    b0de:	84 2e       	mov	r8, r20
    b0e0:	91 2c       	mov	r9, r1
    b0e2:	c1 2c       	mov	r12, r1
    b0e4:	d1 2c       	mov	r13, r1
    b0e6:	21 2c       	mov	r2, r1
    b0e8:	23 01       	movw	r4, r6
    b0ea:	3f ef       	ldi	r19, 0xFF	; 255
    b0ec:	43 1a       	sub	r4, r19
    b0ee:	53 0a       	sbc	r5, r19
    b0f0:	66 0c       	add	r6, r6
    b0f2:	77 1c       	adc	r7, r7
    b0f4:	f5 01       	movw	r30, r10
    b0f6:	e6 0d       	add	r30, r6
    b0f8:	f7 1d       	adc	r31, r7
    b0fa:	80 81       	ld	r24, Z
    b0fc:	91 81       	ldd	r25, Z+1	; 0x01
    b0fe:	00 97       	sbiw	r24, 0x00	; 0
    b100:	09 f4       	brne	.+2      	; 0xb104 <follow_path+0x28e>
    b102:	9e c0       	rjmp	.+316    	; 0xb240 <follow_path+0x3ca>
    b104:	80 32       	cpi	r24, 0x20	; 32
    b106:	91 05       	cpc	r25, r1
    b108:	41 f0       	breq	.+16     	; 0xb11a <follow_path+0x2a4>
    b10a:	8e 32       	cpi	r24, 0x2E	; 46
    b10c:	91 05       	cpc	r25, r1
    b10e:	51 f4       	brne	.+20     	; 0xb124 <follow_path+0x2ae>
    b110:	8f 81       	ldd	r24, Y+7	; 0x07
    b112:	98 85       	ldd	r25, Y+8	; 0x08
    b114:	84 15       	cp	r24, r4
    b116:	95 05       	cpc	r25, r5
    b118:	71 f0       	breq	.+28     	; 0xb136 <follow_path+0x2c0>
    b11a:	93 2d       	mov	r25, r3
    b11c:	93 60       	ori	r25, 0x03	; 3
    b11e:	39 2e       	mov	r3, r25
    b120:	32 01       	movw	r6, r4
    b122:	e2 cf       	rjmp	.-60     	; 0xb0e8 <follow_path+0x272>
    b124:	c8 14       	cp	r12, r8
    b126:	d9 04       	cpc	r13, r9
    b128:	50 f4       	brcc	.+20     	; 0xb13e <follow_path+0x2c8>
    b12a:	af 81       	ldd	r26, Y+7	; 0x07
    b12c:	b8 85       	ldd	r27, Y+8	; 0x08
    b12e:	a4 15       	cp	r26, r4
    b130:	b5 05       	cpc	r27, r5
    b132:	49 f5       	brne	.+82     	; 0xb186 <follow_path+0x310>
    b134:	d2 c0       	rjmp	.+420    	; 0xb2da <follow_path+0x464>
    b136:	c8 14       	cp	r12, r8
    b138:	d9 04       	cpc	r13, r9
    b13a:	08 f4       	brcc	.+2      	; 0xb13e <follow_path+0x2c8>
    b13c:	ce c0       	rjmp	.+412    	; 0xb2da <follow_path+0x464>
    b13e:	bb e0       	ldi	r27, 0x0B	; 11
    b140:	8b 16       	cp	r8, r27
    b142:	91 04       	cpc	r9, r1
    b144:	39 f4       	brne	.+14     	; 0xb154 <follow_path+0x2de>
    b146:	e3 2d       	mov	r30, r3
    b148:	e3 60       	ori	r30, 0x03	; 3
    b14a:	3e 2e       	mov	r3, r30
    b14c:	2b e0       	ldi	r18, 0x0B	; 11
    b14e:	82 2e       	mov	r8, r18
    b150:	91 2c       	mov	r9, r1
    b152:	76 c0       	rjmp	.+236    	; 0xb240 <follow_path+0x3ca>
    b154:	2f 81       	ldd	r18, Y+7	; 0x07
    b156:	38 85       	ldd	r19, Y+8	; 0x08
    b158:	24 15       	cp	r18, r4
    b15a:	35 05       	cpc	r19, r5
    b15c:	49 f0       	breq	.+18     	; 0xb170 <follow_path+0x2fa>
    b15e:	33 2d       	mov	r19, r3
    b160:	33 60       	ori	r19, 0x03	; 3
    b162:	33 2e       	mov	r3, r19
    b164:	8f 81       	ldd	r24, Y+7	; 0x07
    b166:	98 85       	ldd	r25, Y+8	; 0x08
    b168:	84 15       	cp	r24, r4
    b16a:	95 05       	cpc	r25, r5
    b16c:	08 f4       	brcc	.+2      	; 0xb170 <follow_path+0x2fa>
    b16e:	68 c0       	rjmp	.+208    	; 0xb240 <follow_path+0x3ca>
    b170:	22 0c       	add	r2, r2
    b172:	22 0c       	add	r2, r2
    b174:	4f 80       	ldd	r4, Y+7	; 0x07
    b176:	58 84       	ldd	r5, Y+8	; 0x08
    b178:	8b e0       	ldi	r24, 0x0B	; 11
    b17a:	88 2e       	mov	r8, r24
    b17c:	91 2c       	mov	r9, r1
    b17e:	98 e0       	ldi	r25, 0x08	; 8
    b180:	c9 2e       	mov	r12, r25
    b182:	d1 2c       	mov	r13, r1
    b184:	cd cf       	rjmp	.-102    	; 0xb120 <follow_path+0x2aa>
    b186:	80 38       	cpi	r24, 0x80	; 128
    b188:	91 05       	cpc	r25, r1
    b18a:	70 f1       	brcs	.+92     	; 0xb1e8 <follow_path+0x372>
    b18c:	a3 2d       	mov	r26, r3
    b18e:	a2 60       	ori	r26, 0x02	; 2
    b190:	7a 2e       	mov	r7, r26
    b192:	bc 01       	movw	r22, r24
    b194:	80 e0       	ldi	r24, 0x00	; 0
    b196:	90 e0       	ldi	r25, 0x00	; 0
    b198:	45 eb       	ldi	r20, 0xB5	; 181
    b19a:	51 e0       	ldi	r21, 0x01	; 1
    b19c:	0e 94 ef 68 	call	0xd1de	; 0xd1de <ff_uni2oem>
    b1a0:	87 ff       	sbrs	r24, 7
    b1a2:	08 c0       	rjmp	.+16     	; 0xb1b4 <follow_path+0x33e>
    b1a4:	8f 77       	andi	r24, 0x7F	; 127
    b1a6:	99 27       	eor	r25, r25
    b1a8:	fc 01       	movw	r30, r24
    b1aa:	e5 59       	subi	r30, 0x95	; 149
    b1ac:	fb 4f       	sbci	r31, 0xFB	; 251
    b1ae:	80 81       	ld	r24, Z
    b1b0:	90 e0       	ldi	r25, 0x00	; 0
    b1b2:	17 c0       	rjmp	.+46     	; 0xb1e2 <follow_path+0x36c>
    b1b4:	8f 3f       	cpi	r24, 0xFF	; 255
    b1b6:	91 05       	cpc	r25, r1
    b1b8:	a1 f0       	breq	.+40     	; 0xb1e2 <follow_path+0x36c>
    b1ba:	98 f0       	brcs	.+38     	; 0xb1e2 <follow_path+0x36c>
    b1bc:	94 01       	movw	r18, r8
    b1be:	21 50       	subi	r18, 0x01	; 1
    b1c0:	31 09       	sbc	r19, r1
    b1c2:	c2 16       	cp	r12, r18
    b1c4:	d3 06       	cpc	r13, r19
    b1c6:	28 f0       	brcs	.+10     	; 0xb1d2 <follow_path+0x35c>
    b1c8:	b3 2d       	mov	r27, r3
    b1ca:	b3 60       	ori	r27, 0x03	; 3
    b1cc:	3b 2e       	mov	r3, r27
    b1ce:	64 01       	movw	r12, r8
    b1d0:	a7 cf       	rjmp	.-178    	; 0xb120 <follow_path+0x2aa>
    b1d2:	f8 01       	movw	r30, r16
    b1d4:	ec 0d       	add	r30, r12
    b1d6:	fd 1d       	adc	r31, r13
    b1d8:	94 8f       	std	Z+28, r25	; 0x1c
    b1da:	f6 01       	movw	r30, r12
    b1dc:	31 96       	adiw	r30, 0x01	; 1
    b1de:	6f 01       	movw	r12, r30
    b1e0:	26 c0       	rjmp	.+76     	; 0xb22e <follow_path+0x3b8>
    b1e2:	00 97       	sbiw	r24, 0x00	; 0
    b1e4:	59 f0       	breq	.+22     	; 0xb1fc <follow_path+0x386>
    b1e6:	01 c0       	rjmp	.+2      	; 0xb1ea <follow_path+0x374>
    b1e8:	73 2c       	mov	r7, r3
    b1ea:	e0 e3       	ldi	r30, 0x30	; 48
    b1ec:	f4 e0       	ldi	r31, 0x04	; 4
    b1ee:	21 91       	ld	r18, Z+
    b1f0:	22 23       	and	r18, r18
    b1f2:	51 f0       	breq	.+20     	; 0xb208 <follow_path+0x392>
    b1f4:	30 e0       	ldi	r19, 0x00	; 0
    b1f6:	82 17       	cp	r24, r18
    b1f8:	93 07       	cpc	r25, r19
    b1fa:	c9 f7       	brne	.-14     	; 0xb1ee <follow_path+0x378>
    b1fc:	f7 2d       	mov	r31, r7
    b1fe:	f3 60       	ori	r31, 0x03	; 3
    b200:	7f 2e       	mov	r7, r31
    b202:	8f e5       	ldi	r24, 0x5F	; 95
    b204:	90 e0       	ldi	r25, 0x00	; 0
    b206:	13 c0       	rjmp	.+38     	; 0xb22e <follow_path+0x3b8>
    b208:	9c 01       	movw	r18, r24
    b20a:	21 54       	subi	r18, 0x41	; 65
    b20c:	31 09       	sbc	r19, r1
    b20e:	2a 31       	cpi	r18, 0x1A	; 26
    b210:	31 05       	cpc	r19, r1
    b212:	18 f4       	brcc	.+6      	; 0xb21a <follow_path+0x3a4>
    b214:	22 2d       	mov	r18, r2
    b216:	22 60       	ori	r18, 0x02	; 2
    b218:	22 2e       	mov	r2, r18
    b21a:	9c 01       	movw	r18, r24
    b21c:	21 56       	subi	r18, 0x61	; 97
    b21e:	31 09       	sbc	r19, r1
    b220:	2a 31       	cpi	r18, 0x1A	; 26
    b222:	31 05       	cpc	r19, r1
    b224:	20 f4       	brcc	.+8      	; 0xb22e <follow_path+0x3b8>
    b226:	32 2d       	mov	r19, r2
    b228:	31 60       	ori	r19, 0x01	; 1
    b22a:	23 2e       	mov	r2, r19
    b22c:	80 97       	sbiw	r24, 0x20	; 32
    b22e:	f8 01       	movw	r30, r16
    b230:	ec 0d       	add	r30, r12
    b232:	fd 1d       	adc	r31, r13
    b234:	84 8f       	std	Z+28, r24	; 0x1c
    b236:	c6 01       	movw	r24, r12
    b238:	01 96       	adiw	r24, 0x01	; 1
    b23a:	6c 01       	movw	r12, r24
    b23c:	37 2c       	mov	r3, r7
    b23e:	70 cf       	rjmp	.-288    	; 0xb120 <follow_path+0x2aa>
    b240:	f8 01       	movw	r30, r16
    b242:	84 8d       	ldd	r24, Z+28	; 0x1c
    b244:	85 3e       	cpi	r24, 0xE5	; 229
    b246:	11 f4       	brne	.+4      	; 0xb24c <follow_path+0x3d6>
    b248:	25 e0       	ldi	r18, 0x05	; 5
    b24a:	24 8f       	std	Z+28, r18	; 0x1c
    b24c:	38 e0       	ldi	r19, 0x08	; 8
    b24e:	83 16       	cp	r8, r19
    b250:	91 04       	cpc	r9, r1
    b252:	11 f4       	brne	.+4      	; 0xb258 <follow_path+0x3e2>
    b254:	22 0c       	add	r2, r2
    b256:	22 0c       	add	r2, r2
    b258:	82 2d       	mov	r24, r2
    b25a:	8c 70       	andi	r24, 0x0C	; 12
    b25c:	8c 30       	cpi	r24, 0x0C	; 12
    b25e:	21 f0       	breq	.+8      	; 0xb268 <follow_path+0x3f2>
    b260:	82 2d       	mov	r24, r2
    b262:	83 70       	andi	r24, 0x03	; 3
    b264:	83 30       	cpi	r24, 0x03	; 3
    b266:	19 f4       	brne	.+6      	; 0xb26e <follow_path+0x3f8>
    b268:	83 2d       	mov	r24, r3
    b26a:	82 60       	ori	r24, 0x02	; 2
    b26c:	38 2e       	mov	r3, r24
    b26e:	31 fc       	sbrc	r3, 1
    b270:	0a c0       	rjmp	.+20     	; 0xb286 <follow_path+0x410>
    b272:	20 fe       	sbrs	r2, 0
    b274:	03 c0       	rjmp	.+6      	; 0xb27c <follow_path+0x406>
    b276:	93 2d       	mov	r25, r3
    b278:	90 61       	ori	r25, 0x10	; 16
    b27a:	39 2e       	mov	r3, r25
    b27c:	22 fe       	sbrs	r2, 2
    b27e:	03 c0       	rjmp	.+6      	; 0xb286 <follow_path+0x410>
    b280:	a3 2d       	mov	r26, r3
    b282:	a8 60       	ori	r26, 0x08	; 8
    b284:	3a 2e       	mov	r3, r26
    b286:	f8 01       	movw	r30, r16
    b288:	37 a2       	std	Z+39, r3	; 0x27
    b28a:	9b ce       	rjmp	.-714    	; 0xafc2 <follow_path+0x14c>
    b28c:	86 e0       	ldi	r24, 0x06	; 6
    b28e:	90 e0       	ldi	r25, 0x00	; 0
    b290:	2a c0       	rjmp	.+84     	; 0xb2e6 <follow_path+0x470>
    b292:	80 e8       	ldi	r24, 0x80	; 128
    b294:	f8 01       	movw	r30, r16
    b296:	87 a3       	std	Z+39, r24	; 0x27
    b298:	80 e0       	ldi	r24, 0x00	; 0
    b29a:	90 e0       	ldi	r25, 0x00	; 0
    b29c:	24 c0       	rjmp	.+72     	; 0xb2e6 <follow_path+0x470>
    b29e:	33 23       	and	r19, r19
    b2a0:	c9 f0       	breq	.+50     	; 0xb2d4 <follow_path+0x45e>
    b2a2:	21 c0       	rjmp	.+66     	; 0xb2e6 <follow_path+0x470>
    b2a4:	22 fd       	sbrc	r18, 2
    b2a6:	1f c0       	rjmp	.+62     	; 0xb2e6 <follow_path+0x470>
    b2a8:	f8 01       	movw	r30, r16
    b2aa:	84 81       	ldd	r24, Z+4	; 0x04
    b2ac:	84 ff       	sbrs	r24, 4
    b2ae:	12 c0       	rjmp	.+36     	; 0xb2d4 <follow_path+0x45e>
    b2b0:	66 85       	ldd	r22, Z+14	; 0x0e
    b2b2:	77 85       	ldd	r23, Z+15	; 0x0f
    b2b4:	71 70       	andi	r23, 0x01	; 1
    b2b6:	2d 81       	ldd	r18, Y+5	; 0x05
    b2b8:	3e 81       	ldd	r19, Y+6	; 0x06
    b2ba:	62 0f       	add	r22, r18
    b2bc:	73 1f       	adc	r23, r19
    b2be:	a9 81       	ldd	r26, Y+1	; 0x01
    b2c0:	ba 81       	ldd	r27, Y+2	; 0x02
    b2c2:	8c 91       	ld	r24, X
    b2c4:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    b2c8:	f8 01       	movw	r30, r16
    b2ca:	66 83       	std	Z+6, r22	; 0x06
    b2cc:	77 83       	std	Z+7, r23	; 0x07
    b2ce:	80 87       	std	Z+8, r24	; 0x08
    b2d0:	91 87       	std	Z+9, r25	; 0x09
    b2d2:	88 ce       	rjmp	.-752    	; 0xafe4 <follow_path+0x16e>
    b2d4:	85 e0       	ldi	r24, 0x05	; 5
    b2d6:	90 e0       	ldi	r25, 0x00	; 0
    b2d8:	06 c0       	rjmp	.+12     	; 0xb2e6 <follow_path+0x470>
    b2da:	fb e0       	ldi	r31, 0x0B	; 11
    b2dc:	8f 16       	cp	r8, r31
    b2de:	91 04       	cpc	r9, r1
    b2e0:	09 f0       	breq	.+2      	; 0xb2e4 <follow_path+0x46e>
    b2e2:	46 cf       	rjmp	.-372    	; 0xb170 <follow_path+0x2fa>
    b2e4:	30 cf       	rjmp	.-416    	; 0xb146 <follow_path+0x2d0>
    b2e6:	28 96       	adiw	r28, 0x08	; 8
    b2e8:	e2 e1       	ldi	r30, 0x12	; 18
    b2ea:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000b2ee <f_mount>:
    b2ee:	a6 e0       	ldi	r26, 0x06	; 6
    b2f0:	b0 e0       	ldi	r27, 0x00	; 0
    b2f2:	ed e7       	ldi	r30, 0x7D	; 125
    b2f4:	f9 e5       	ldi	r31, 0x59	; 89
    b2f6:	0c 94 fb e6 	jmp	0x1cdf6	; 0x1cdf6 <__prologue_saves__+0x1e>
    b2fa:	9c 83       	std	Y+4, r25	; 0x04
    b2fc:	8b 83       	std	Y+3, r24	; 0x03
    b2fe:	7e 83       	std	Y+6, r23	; 0x06
    b300:	6d 83       	std	Y+5, r22	; 0x05
    b302:	14 2f       	mov	r17, r20
    b304:	7a 83       	std	Y+2, r23	; 0x02
    b306:	69 83       	std	Y+1, r22	; 0x01
    b308:	ce 01       	movw	r24, r28
    b30a:	01 96       	adiw	r24, 0x01	; 1
    b30c:	0e 94 57 48 	call	0x90ae	; 0x90ae <get_ldnumber>
    b310:	97 fd       	sbrc	r25, 7
    b312:	20 c0       	rjmp	.+64     	; 0xb354 <f_mount+0x66>
    b314:	88 0f       	add	r24, r24
    b316:	99 1f       	adc	r25, r25
    b318:	fc 01       	movw	r30, r24
    b31a:	ef 5d       	subi	r30, 0xDF	; 223
    b31c:	f7 4e       	sbci	r31, 0xE7	; 231
    b31e:	01 90       	ld	r0, Z+
    b320:	f0 81       	ld	r31, Z
    b322:	e0 2d       	mov	r30, r0
    b324:	30 97       	sbiw	r30, 0x00	; 0
    b326:	09 f0       	breq	.+2      	; 0xb32a <f_mount+0x3c>
    b328:	10 82       	st	Z, r1
    b32a:	eb 81       	ldd	r30, Y+3	; 0x03
    b32c:	fc 81       	ldd	r31, Y+4	; 0x04
    b32e:	30 97       	sbiw	r30, 0x00	; 0
    b330:	09 f0       	breq	.+2      	; 0xb334 <f_mount+0x46>
    b332:	10 82       	st	Z, r1
    b334:	dc 01       	movw	r26, r24
    b336:	af 5d       	subi	r26, 0xDF	; 223
    b338:	b7 4e       	sbci	r27, 0xE7	; 231
    b33a:	ed 93       	st	X+, r30
    b33c:	fc 93       	st	X, r31
    b33e:	11 23       	and	r17, r17
    b340:	61 f0       	breq	.+24     	; 0xb35a <f_mount+0x6c>
    b342:	40 e0       	ldi	r20, 0x00	; 0
    b344:	be 01       	movw	r22, r28
    b346:	6d 5f       	subi	r22, 0xFD	; 253
    b348:	7f 4f       	sbci	r23, 0xFF	; 255
    b34a:	ce 01       	movw	r24, r28
    b34c:	05 96       	adiw	r24, 0x05	; 5
    b34e:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    b352:	05 c0       	rjmp	.+10     	; 0xb35e <f_mount+0x70>
    b354:	8b e0       	ldi	r24, 0x0B	; 11
    b356:	90 e0       	ldi	r25, 0x00	; 0
    b358:	02 c0       	rjmp	.+4      	; 0xb35e <f_mount+0x70>
    b35a:	80 e0       	ldi	r24, 0x00	; 0
    b35c:	90 e0       	ldi	r25, 0x00	; 0
    b35e:	26 96       	adiw	r28, 0x06	; 6
    b360:	e3 e0       	ldi	r30, 0x03	; 3
    b362:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__epilogue_restores__+0x1e>

0000b366 <f_open>:
    b366:	a6 e3       	ldi	r26, 0x36	; 54
    b368:	b0 e0       	ldi	r27, 0x00	; 0
    b36a:	e9 eb       	ldi	r30, 0xB9	; 185
    b36c:	f9 e5       	ldi	r31, 0x59	; 89
    b36e:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    b372:	7a ab       	std	Y+50, r23	; 0x32
    b374:	69 ab       	std	Y+49, r22	; 0x31
    b376:	00 97       	sbiw	r24, 0x00	; 0
    b378:	09 f4       	brne	.+2      	; 0xb37c <f_open+0x16>
    b37a:	93 c1       	rjmp	.+806    	; 0xb6a2 <f_open+0x33c>
    b37c:	74 2e       	mov	r7, r20
    b37e:	7c 01       	movw	r14, r24
    b380:	24 2f       	mov	r18, r20
    b382:	2f 73       	andi	r18, 0x3F	; 63
    b384:	32 2e       	mov	r3, r18
    b386:	42 2f       	mov	r20, r18
    b388:	be 01       	movw	r22, r28
    b38a:	61 5d       	subi	r22, 0xD1	; 209
    b38c:	7f 4f       	sbci	r23, 0xFF	; 255
    b38e:	ce 01       	movw	r24, r28
    b390:	c1 96       	adiw	r24, 0x31	; 49
    b392:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    b396:	00 97       	sbiw	r24, 0x00	; 0
    b398:	09 f0       	breq	.+2      	; 0xb39c <f_open+0x36>
    b39a:	7d c1       	rjmp	.+762    	; 0xb696 <f_open+0x330>
    b39c:	8f a5       	ldd	r24, Y+47	; 0x2f
    b39e:	98 a9       	ldd	r25, Y+48	; 0x30
    b3a0:	9a 83       	std	Y+2, r25	; 0x02
    b3a2:	89 83       	std	Y+1, r24	; 0x01
    b3a4:	80 e0       	ldi	r24, 0x00	; 0
    b3a6:	92 e0       	ldi	r25, 0x02	; 2
    b3a8:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <ff_memalloc>
    b3ac:	5c 01       	movw	r10, r24
    b3ae:	00 97       	sbiw	r24, 0x00	; 0
    b3b0:	09 f4       	brne	.+2      	; 0xb3b4 <f_open+0x4e>
    b3b2:	79 c1       	rjmp	.+754    	; 0xb6a6 <f_open+0x340>
    b3b4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3b6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3b8:	94 87       	std	Z+12, r25	; 0x0c
    b3ba:	83 87       	std	Z+11, r24	; 0x0b
    b3bc:	69 a9       	ldd	r22, Y+49	; 0x31
    b3be:	7a a9       	ldd	r23, Y+50	; 0x32
    b3c0:	ce 01       	movw	r24, r28
    b3c2:	01 96       	adiw	r24, 0x01	; 1
    b3c4:	58 dd       	rcall	.-1360   	; 0xae76 <follow_path>
    b3c6:	8c 01       	movw	r16, r24
    b3c8:	89 2b       	or	r24, r25
    b3ca:	29 f4       	brne	.+10     	; 0xb3d6 <f_open+0x70>
    b3cc:	88 a5       	ldd	r24, Y+40	; 0x28
    b3ce:	87 ff       	sbrs	r24, 7
    b3d0:	02 c0       	rjmp	.+4      	; 0xb3d6 <f_open+0x70>
    b3d2:	06 e0       	ldi	r16, 0x06	; 6
    b3d4:	10 e0       	ldi	r17, 0x00	; 0
    b3d6:	87 2d       	mov	r24, r7
    b3d8:	8c 71       	andi	r24, 0x1C	; 28
    b3da:	09 f4       	brne	.+2      	; 0xb3de <f_open+0x78>
    b3dc:	75 c0       	rjmp	.+234    	; 0xb4c8 <f_open+0x162>
    b3de:	01 15       	cp	r16, r1
    b3e0:	11 05       	cpc	r17, r1
    b3e2:	79 f0       	breq	.+30     	; 0xb402 <f_open+0x9c>
    b3e4:	04 30       	cpi	r16, 0x04	; 4
    b3e6:	11 05       	cpc	r17, r1
    b3e8:	09 f0       	breq	.+2      	; 0xb3ec <f_open+0x86>
    b3ea:	6d c1       	rjmp	.+730    	; 0xb6c6 <f_open+0x360>
    b3ec:	ce 01       	movw	r24, r28
    b3ee:	01 96       	adiw	r24, 0x01	; 1
    b3f0:	b4 db       	rcall	.-2200   	; 0xab5a <dir_register>
    b3f2:	8c 01       	movw	r16, r24
    b3f4:	89 2b       	or	r24, r25
    b3f6:	09 f0       	breq	.+2      	; 0xb3fa <f_open+0x94>
    b3f8:	66 c1       	rjmp	.+716    	; 0xb6c6 <f_open+0x360>
    b3fa:	33 2d       	mov	r19, r3
    b3fc:	38 60       	ori	r19, 0x08	; 8
    b3fe:	33 2e       	mov	r3, r19
    b400:	06 c0       	rjmp	.+12     	; 0xb40e <f_open+0xa8>
    b402:	8d 81       	ldd	r24, Y+5	; 0x05
    b404:	81 71       	andi	r24, 0x11	; 17
    b406:	09 f0       	breq	.+2      	; 0xb40a <f_open+0xa4>
    b408:	5c c1       	rjmp	.+696    	; 0xb6c2 <f_open+0x35c>
    b40a:	72 fc       	sbrc	r7, 2
    b40c:	51 c1       	rjmp	.+674    	; 0xb6b0 <f_open+0x34a>
    b40e:	33 fe       	sbrs	r3, 3
    b410:	6b c0       	rjmp	.+214    	; 0xb4e8 <f_open+0x182>
    b412:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b414:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b416:	ef a5       	ldd	r30, Y+47	; 0x2f
    b418:	f8 a9       	ldd	r31, Y+48	; 0x30
    b41a:	b8 01       	movw	r22, r16
    b41c:	80 81       	ld	r24, Z
    b41e:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    b422:	2b 01       	movw	r4, r22
    b424:	3c 01       	movw	r6, r24
    b426:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <get_fattime>
    b42a:	ab 01       	movw	r20, r22
    b42c:	bc 01       	movw	r22, r24
    b42e:	c8 01       	movw	r24, r16
    b430:	0e 96       	adiw	r24, 0x0e	; 14
    b432:	0e 94 c6 47 	call	0x8f8c	; 0x8f8c <st_dword>
    b436:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b438:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b43a:	80 e2       	ldi	r24, 0x20	; 32
    b43c:	83 87       	std	Z+11, r24	; 0x0b
    b43e:	af a5       	ldd	r26, Y+47	; 0x2f
    b440:	b8 a9       	ldd	r27, Y+48	; 0x30
    b442:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b444:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b446:	12 8e       	std	Z+26, r1	; 0x1a
    b448:	13 8e       	std	Z+27, r1	; 0x1b
    b44a:	8c 91       	ld	r24, X
    b44c:	83 30       	cpi	r24, 0x03	; 3
    b44e:	11 f4       	brne	.+4      	; 0xb454 <f_open+0xee>
    b450:	14 8a       	std	Z+20, r1	; 0x14
    b452:	15 8a       	std	Z+21, r1	; 0x15
    b454:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b456:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b458:	14 8e       	std	Z+28, r1	; 0x1c
    b45a:	15 8e       	std	Z+29, r1	; 0x1d
    b45c:	16 8e       	std	Z+30, r1	; 0x1e
    b45e:	17 8e       	std	Z+31, r1	; 0x1f
    b460:	81 e0       	ldi	r24, 0x01	; 1
    b462:	fd 01       	movw	r30, r26
    b464:	83 83       	std	Z+3, r24	; 0x03
    b466:	41 14       	cp	r4, r1
    b468:	51 04       	cpc	r5, r1
    b46a:	61 04       	cpc	r6, r1
    b46c:	71 04       	cpc	r7, r1
    b46e:	c9 f1       	breq	.+114    	; 0xb4e2 <f_open+0x17c>
    b470:	21 a9       	ldd	r18, Z+49	; 0x31
    b472:	32 a9       	ldd	r19, Z+50	; 0x32
    b474:	43 a9       	ldd	r20, Z+51	; 0x33
    b476:	54 a9       	ldd	r21, Z+52	; 0x34
    b478:	2b ab       	std	Y+51, r18	; 0x33
    b47a:	3c ab       	std	Y+52, r19	; 0x34
    b47c:	4d ab       	std	Y+53, r20	; 0x35
    b47e:	5e ab       	std	Y+54, r21	; 0x36
    b480:	00 e0       	ldi	r16, 0x00	; 0
    b482:	10 e0       	ldi	r17, 0x00	; 0
    b484:	98 01       	movw	r18, r16
    b486:	b3 01       	movw	r22, r6
    b488:	a2 01       	movw	r20, r4
    b48a:	ce 01       	movw	r24, r28
    b48c:	01 96       	adiw	r24, 0x01	; 1
    b48e:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <remove_chain>
    b492:	8c 01       	movw	r16, r24
    b494:	89 2b       	or	r24, r25
    b496:	09 f0       	breq	.+2      	; 0xb49a <f_open+0x134>
    b498:	16 c1       	rjmp	.+556    	; 0xb6c6 <f_open+0x360>
    b49a:	4b a9       	ldd	r20, Y+51	; 0x33
    b49c:	5c a9       	ldd	r21, Y+52	; 0x34
    b49e:	6d a9       	ldd	r22, Y+53	; 0x35
    b4a0:	7e a9       	ldd	r23, Y+54	; 0x36
    b4a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    b4a4:	98 a9       	ldd	r25, Y+48	; 0x30
    b4a6:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    b4aa:	8c 01       	movw	r16, r24
    b4ac:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4ae:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4b0:	21 e0       	ldi	r18, 0x01	; 1
    b4b2:	42 1a       	sub	r4, r18
    b4b4:	51 08       	sbc	r5, r1
    b4b6:	61 08       	sbc	r6, r1
    b4b8:	71 08       	sbc	r7, r1
    b4ba:	45 86       	std	Z+13, r4	; 0x0d
    b4bc:	56 86       	std	Z+14, r5	; 0x0e
    b4be:	67 86       	std	Z+15, r6	; 0x0f
    b4c0:	70 8a       	std	Z+16, r7	; 0x10
    b4c2:	89 2b       	or	r24, r25
    b4c4:	61 f0       	breq	.+24     	; 0xb4de <f_open+0x178>
    b4c6:	ff c0       	rjmp	.+510    	; 0xb6c6 <f_open+0x360>
    b4c8:	01 15       	cp	r16, r1
    b4ca:	11 05       	cpc	r17, r1
    b4cc:	09 f0       	breq	.+2      	; 0xb4d0 <f_open+0x16a>
    b4ce:	fb c0       	rjmp	.+502    	; 0xb6c6 <f_open+0x360>
    b4d0:	8d 81       	ldd	r24, Y+5	; 0x05
    b4d2:	84 fd       	sbrc	r24, 4
    b4d4:	f3 c0       	rjmp	.+486    	; 0xb6bc <f_open+0x356>
    b4d6:	71 fe       	sbrs	r7, 1
    b4d8:	02 c0       	rjmp	.+4      	; 0xb4de <f_open+0x178>
    b4da:	80 fd       	sbrc	r24, 0
    b4dc:	f2 c0       	rjmp	.+484    	; 0xb6c2 <f_open+0x35c>
    b4de:	33 fe       	sbrs	r3, 3
    b4e0:	03 c0       	rjmp	.+6      	; 0xb4e8 <f_open+0x182>
    b4e2:	33 2d       	mov	r19, r3
    b4e4:	30 64       	ori	r19, 0x40	; 64
    b4e6:	33 2e       	mov	r3, r19
    b4e8:	0f a5       	ldd	r16, Y+47	; 0x2f
    b4ea:	18 a9       	ldd	r17, Y+48	; 0x30
    b4ec:	f8 01       	movw	r30, r16
    b4ee:	81 a9       	ldd	r24, Z+49	; 0x31
    b4f0:	92 a9       	ldd	r25, Z+50	; 0x32
    b4f2:	a3 a9       	ldd	r26, Z+51	; 0x33
    b4f4:	b4 a9       	ldd	r27, Z+52	; 0x34
    b4f6:	f7 01       	movw	r30, r14
    b4f8:	84 8f       	std	Z+28, r24	; 0x1c
    b4fa:	95 8f       	std	Z+29, r25	; 0x1d
    b4fc:	a6 8f       	std	Z+30, r26	; 0x1e
    b4fe:	b7 8f       	std	Z+31, r27	; 0x1f
    b500:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b502:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b504:	71 a2       	std	Z+33, r7	; 0x21
    b506:	60 a2       	std	Z+32, r6	; 0x20
    b508:	b3 01       	movw	r22, r6
    b50a:	f8 01       	movw	r30, r16
    b50c:	80 81       	ld	r24, Z
    b50e:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    b512:	f7 01       	movw	r30, r14
    b514:	66 83       	std	Z+6, r22	; 0x06
    b516:	77 83       	std	Z+7, r23	; 0x07
    b518:	80 87       	std	Z+8, r24	; 0x08
    b51a:	91 87       	std	Z+9, r25	; 0x09
    b51c:	c3 01       	movw	r24, r6
    b51e:	4c 96       	adiw	r24, 0x1c	; 28
    b520:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <ld_dword>
    b524:	f7 01       	movw	r30, r14
    b526:	62 87       	std	Z+10, r22	; 0x0a
    b528:	73 87       	std	Z+11, r23	; 0x0b
    b52a:	84 87       	std	Z+12, r24	; 0x0c
    b52c:	95 87       	std	Z+13, r25	; 0x0d
    b52e:	13 a2       	std	Z+35, r1	; 0x23
    b530:	12 a2       	std	Z+34, r1	; 0x22
    b532:	11 83       	std	Z+1, r17	; 0x01
    b534:	00 83       	st	Z, r16
    b536:	f8 01       	movw	r30, r16
    b538:	85 81       	ldd	r24, Z+5	; 0x05
    b53a:	96 81       	ldd	r25, Z+6	; 0x06
    b53c:	f7 01       	movw	r30, r14
    b53e:	93 83       	std	Z+3, r25	; 0x03
    b540:	82 83       	std	Z+2, r24	; 0x02
    b542:	36 86       	std	Z+14, r3	; 0x0e
    b544:	17 86       	std	Z+15, r1	; 0x0f
    b546:	10 8e       	std	Z+24, r1	; 0x18
    b548:	11 8e       	std	Z+25, r1	; 0x19
    b54a:	12 8e       	std	Z+26, r1	; 0x1a
    b54c:	13 8e       	std	Z+27, r1	; 0x1b
    b54e:	10 8a       	std	Z+16, r1	; 0x10
    b550:	11 8a       	std	Z+17, r1	; 0x11
    b552:	12 8a       	std	Z+18, r1	; 0x12
    b554:	13 8a       	std	Z+19, r1	; 0x13
    b556:	67 01       	movw	r12, r14
    b558:	f4 e2       	ldi	r31, 0x24	; 36
    b55a:	cf 0e       	add	r12, r31
    b55c:	d1 1c       	adc	r13, r1
    b55e:	40 e0       	ldi	r20, 0x00	; 0
    b560:	52 e0       	ldi	r21, 0x02	; 2
    b562:	60 e0       	ldi	r22, 0x00	; 0
    b564:	70 e0       	ldi	r23, 0x00	; 0
    b566:	c6 01       	movw	r24, r12
    b568:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <mem_set>
    b56c:	35 fc       	sbrc	r3, 5
    b56e:	03 c0       	rjmp	.+6      	; 0xb576 <f_open+0x210>
    b570:	00 e0       	ldi	r16, 0x00	; 0
    b572:	10 e0       	ldi	r17, 0x00	; 0
    b574:	89 c0       	rjmp	.+274    	; 0xb688 <f_open+0x322>
    b576:	f7 01       	movw	r30, r14
    b578:	62 84       	ldd	r6, Z+10	; 0x0a
    b57a:	73 84       	ldd	r7, Z+11	; 0x0b
    b57c:	84 84       	ldd	r8, Z+12	; 0x0c
    b57e:	95 84       	ldd	r9, Z+13	; 0x0d
    b580:	61 14       	cp	r6, r1
    b582:	71 04       	cpc	r7, r1
    b584:	81 04       	cpc	r8, r1
    b586:	91 04       	cpc	r9, r1
    b588:	99 f3       	breq	.-26     	; 0xb570 <f_open+0x20a>
    b58a:	60 8a       	std	Z+16, r6	; 0x10
    b58c:	71 8a       	std	Z+17, r7	; 0x11
    b58e:	82 8a       	std	Z+18, r8	; 0x12
    b590:	93 8a       	std	Z+19, r9	; 0x13
    b592:	ef a5       	ldd	r30, Y+47	; 0x2f
    b594:	f8 a9       	ldd	r31, Y+48	; 0x30
    b596:	21 84       	ldd	r2, Z+9	; 0x09
    b598:	32 84       	ldd	r3, Z+10	; 0x0a
    b59a:	c1 01       	movw	r24, r2
    b59c:	a0 e0       	ldi	r26, 0x00	; 0
    b59e:	b0 e0       	ldi	r27, 0x00	; 0
    b5a0:	1c 01       	movw	r2, r24
    b5a2:	2d 01       	movw	r4, r26
    b5a4:	59 e0       	ldi	r21, 0x09	; 9
    b5a6:	22 0c       	add	r2, r2
    b5a8:	33 1c       	adc	r3, r3
    b5aa:	44 1c       	adc	r4, r4
    b5ac:	55 1c       	adc	r5, r5
    b5ae:	5a 95       	dec	r21
    b5b0:	d1 f7       	brne	.-12     	; 0xb5a6 <f_open+0x240>
    b5b2:	f7 01       	movw	r30, r14
    b5b4:	46 81       	ldd	r20, Z+6	; 0x06
    b5b6:	57 81       	ldd	r21, Z+7	; 0x07
    b5b8:	60 85       	ldd	r22, Z+8	; 0x08
    b5ba:	71 85       	ldd	r23, Z+9	; 0x09
    b5bc:	26 14       	cp	r2, r6
    b5be:	37 04       	cpc	r3, r7
    b5c0:	48 04       	cpc	r4, r8
    b5c2:	59 04       	cpc	r5, r9
    b5c4:	f0 f4       	brcc	.+60     	; 0xb602 <f_open+0x29c>
    b5c6:	f7 01       	movw	r30, r14
    b5c8:	80 81       	ld	r24, Z
    b5ca:	91 81       	ldd	r25, Z+1	; 0x01
    b5cc:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <get_fat.isra.9>
    b5d0:	ab 01       	movw	r20, r22
    b5d2:	bc 01       	movw	r22, r24
    b5d4:	d4 01       	movw	r26, r8
    b5d6:	c3 01       	movw	r24, r6
    b5d8:	82 19       	sub	r24, r2
    b5da:	93 09       	sbc	r25, r3
    b5dc:	a4 09       	sbc	r26, r4
    b5de:	b5 09       	sbc	r27, r5
    b5e0:	3c 01       	movw	r6, r24
    b5e2:	4d 01       	movw	r8, r26
    b5e4:	42 30       	cpi	r20, 0x02	; 2
    b5e6:	51 05       	cpc	r21, r1
    b5e8:	61 05       	cpc	r22, r1
    b5ea:	71 05       	cpc	r23, r1
    b5ec:	08 f4       	brcc	.+2      	; 0xb5f0 <f_open+0x28a>
    b5ee:	63 c0       	rjmp	.+198    	; 0xb6b6 <f_open+0x350>
    b5f0:	4f 3f       	cpi	r20, 0xFF	; 255
    b5f2:	ff ef       	ldi	r31, 0xFF	; 255
    b5f4:	5f 07       	cpc	r21, r31
    b5f6:	6f 07       	cpc	r22, r31
    b5f8:	7f 07       	cpc	r23, r31
    b5fa:	01 f7       	brne	.-64     	; 0xb5bc <f_open+0x256>
    b5fc:	01 e0       	ldi	r16, 0x01	; 1
    b5fe:	10 e0       	ldi	r17, 0x00	; 0
    b600:	02 c0       	rjmp	.+4      	; 0xb606 <f_open+0x2a0>
    b602:	00 e0       	ldi	r16, 0x00	; 0
    b604:	10 e0       	ldi	r17, 0x00	; 0
    b606:	f7 01       	movw	r30, r14
    b608:	44 8b       	std	Z+20, r20	; 0x14
    b60a:	55 8b       	std	Z+21, r21	; 0x15
    b60c:	66 8b       	std	Z+22, r22	; 0x16
    b60e:	77 8b       	std	Z+23, r23	; 0x17
    b610:	01 15       	cp	r16, r1
    b612:	11 05       	cpc	r17, r1
    b614:	c9 f5       	brne	.+114    	; 0xb688 <f_open+0x322>
    b616:	d4 01       	movw	r26, r8
    b618:	c3 01       	movw	r24, r6
    b61a:	91 70       	andi	r25, 0x01	; 1
    b61c:	aa 27       	eor	r26, r26
    b61e:	bb 27       	eor	r27, r27
    b620:	89 2b       	or	r24, r25
    b622:	8a 2b       	or	r24, r26
    b624:	8b 2b       	or	r24, r27
    b626:	09 f4       	brne	.+2      	; 0xb62a <f_open+0x2c4>
    b628:	a3 cf       	rjmp	.-186    	; 0xb570 <f_open+0x20a>
    b62a:	4f a4       	ldd	r4, Y+47	; 0x2f
    b62c:	58 a8       	ldd	r5, Y+48	; 0x30
    b62e:	c2 01       	movw	r24, r4
    b630:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    b634:	61 15       	cp	r22, r1
    b636:	71 05       	cpc	r23, r1
    b638:	81 05       	cpc	r24, r1
    b63a:	91 05       	cpc	r25, r1
    b63c:	19 f1       	breq	.+70     	; 0xb684 <f_open+0x31e>
    b63e:	94 01       	movw	r18, r8
    b640:	83 01       	movw	r16, r6
    b642:	49 e0       	ldi	r20, 0x09	; 9
    b644:	36 95       	lsr	r19
    b646:	27 95       	ror	r18
    b648:	17 95       	ror	r17
    b64a:	07 95       	ror	r16
    b64c:	4a 95       	dec	r20
    b64e:	d1 f7       	brne	.-12     	; 0xb644 <f_open+0x2de>
    b650:	a9 01       	movw	r20, r18
    b652:	98 01       	movw	r18, r16
    b654:	26 0f       	add	r18, r22
    b656:	37 1f       	adc	r19, r23
    b658:	48 1f       	adc	r20, r24
    b65a:	59 1f       	adc	r21, r25
    b65c:	f7 01       	movw	r30, r14
    b65e:	20 8f       	std	Z+24, r18	; 0x18
    b660:	31 8f       	std	Z+25, r19	; 0x19
    b662:	42 8f       	std	Z+26, r20	; 0x1a
    b664:	53 8f       	std	Z+27, r21	; 0x1b
    b666:	01 e0       	ldi	r16, 0x01	; 1
    b668:	10 e0       	ldi	r17, 0x00	; 0
    b66a:	b6 01       	movw	r22, r12
    b66c:	f2 01       	movw	r30, r4
    b66e:	81 81       	ldd	r24, Z+1	; 0x01
    b670:	0e 94 a5 69 	call	0xd34a	; 0xd34a <disk_read>
    b674:	31 e0       	ldi	r19, 0x01	; 1
    b676:	20 e0       	ldi	r18, 0x00	; 0
    b678:	89 2b       	or	r24, r25
    b67a:	09 f4       	brne	.+2      	; 0xb67e <f_open+0x318>
    b67c:	30 e0       	ldi	r19, 0x00	; 0
    b67e:	03 2f       	mov	r16, r19
    b680:	12 2f       	mov	r17, r18
    b682:	02 c0       	rjmp	.+4      	; 0xb688 <f_open+0x322>
    b684:	02 e0       	ldi	r16, 0x02	; 2
    b686:	10 e0       	ldi	r17, 0x00	; 0
    b688:	c5 01       	movw	r24, r10
    b68a:	0e 94 ec 68 	call	0xd1d8	; 0xd1d8 <ff_memfree>
    b68e:	01 15       	cp	r16, r1
    b690:	11 05       	cpc	r17, r1
    b692:	59 f0       	breq	.+22     	; 0xb6aa <f_open+0x344>
    b694:	01 c0       	rjmp	.+2      	; 0xb698 <f_open+0x332>
    b696:	8c 01       	movw	r16, r24
    b698:	f7 01       	movw	r30, r14
    b69a:	11 82       	std	Z+1, r1	; 0x01
    b69c:	10 82       	st	Z, r1
    b69e:	c8 01       	movw	r24, r16
    b6a0:	16 c0       	rjmp	.+44     	; 0xb6ce <f_open+0x368>
    b6a2:	89 e0       	ldi	r24, 0x09	; 9
    b6a4:	03 c0       	rjmp	.+6      	; 0xb6ac <f_open+0x346>
    b6a6:	81 e1       	ldi	r24, 0x11	; 17
    b6a8:	01 c0       	rjmp	.+2      	; 0xb6ac <f_open+0x346>
    b6aa:	80 e0       	ldi	r24, 0x00	; 0
    b6ac:	90 e0       	ldi	r25, 0x00	; 0
    b6ae:	0f c0       	rjmp	.+30     	; 0xb6ce <f_open+0x368>
    b6b0:	08 e0       	ldi	r16, 0x08	; 8
    b6b2:	10 e0       	ldi	r17, 0x00	; 0
    b6b4:	08 c0       	rjmp	.+16     	; 0xb6c6 <f_open+0x360>
    b6b6:	02 e0       	ldi	r16, 0x02	; 2
    b6b8:	10 e0       	ldi	r17, 0x00	; 0
    b6ba:	a5 cf       	rjmp	.-182    	; 0xb606 <f_open+0x2a0>
    b6bc:	04 e0       	ldi	r16, 0x04	; 4
    b6be:	10 e0       	ldi	r17, 0x00	; 0
    b6c0:	02 c0       	rjmp	.+4      	; 0xb6c6 <f_open+0x360>
    b6c2:	07 e0       	ldi	r16, 0x07	; 7
    b6c4:	10 e0       	ldi	r17, 0x00	; 0
    b6c6:	c5 01       	movw	r24, r10
    b6c8:	0e 94 ec 68 	call	0xd1d8	; 0xd1d8 <ff_memfree>
    b6cc:	e5 cf       	rjmp	.-54     	; 0xb698 <f_open+0x332>
    b6ce:	e6 96       	adiw	r28, 0x36	; 54
    b6d0:	e2 e1       	ldi	r30, 0x12	; 18
    b6d2:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000b6d6 <f_read>:
    b6d6:	a6 e0       	ldi	r26, 0x06	; 6
    b6d8:	b0 e0       	ldi	r27, 0x00	; 0
    b6da:	e1 e7       	ldi	r30, 0x71	; 113
    b6dc:	fb e5       	ldi	r31, 0x5B	; 91
    b6de:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    b6e2:	7c 01       	movw	r14, r24
    b6e4:	4b 01       	movw	r8, r22
    b6e6:	5a 01       	movw	r10, r20
    b6e8:	3e 83       	std	Y+6, r19	; 0x06
    b6ea:	2d 83       	std	Y+5, r18	; 0x05
    b6ec:	f9 01       	movw	r30, r18
    b6ee:	11 82       	std	Z+1, r1	; 0x01
    b6f0:	10 82       	st	Z, r1
    b6f2:	be 01       	movw	r22, r28
    b6f4:	6f 5f       	subi	r22, 0xFF	; 255
    b6f6:	7f 4f       	sbci	r23, 0xFF	; 255
    b6f8:	0e 94 83 48 	call	0x9106	; 0x9106 <validate>
    b6fc:	00 97       	sbiw	r24, 0x00	; 0
    b6fe:	09 f0       	breq	.+2      	; 0xb702 <f_read+0x2c>
    b700:	31 c1       	rjmp	.+610    	; 0xb964 <f_read+0x28e>
    b702:	f7 01       	movw	r30, r14
    b704:	87 85       	ldd	r24, Z+15	; 0x0f
    b706:	90 e0       	ldi	r25, 0x00	; 0
    b708:	00 97       	sbiw	r24, 0x00	; 0
    b70a:	09 f0       	breq	.+2      	; 0xb70e <f_read+0x38>
    b70c:	2b c1       	rjmp	.+598    	; 0xb964 <f_read+0x28e>
    b70e:	86 85       	ldd	r24, Z+14	; 0x0e
    b710:	80 ff       	sbrs	r24, 0
    b712:	26 c1       	rjmp	.+588    	; 0xb960 <f_read+0x28a>
    b714:	82 85       	ldd	r24, Z+10	; 0x0a
    b716:	93 85       	ldd	r25, Z+11	; 0x0b
    b718:	a4 85       	ldd	r26, Z+12	; 0x0c
    b71a:	b5 85       	ldd	r27, Z+13	; 0x0d
    b71c:	40 89       	ldd	r20, Z+16	; 0x10
    b71e:	51 89       	ldd	r21, Z+17	; 0x11
    b720:	62 89       	ldd	r22, Z+18	; 0x12
    b722:	73 89       	ldd	r23, Z+19	; 0x13
    b724:	84 1b       	sub	r24, r20
    b726:	95 0b       	sbc	r25, r21
    b728:	a6 0b       	sbc	r26, r22
    b72a:	b7 0b       	sbc	r27, r23
    b72c:	a5 01       	movw	r20, r10
    b72e:	60 e0       	ldi	r22, 0x00	; 0
    b730:	70 e0       	ldi	r23, 0x00	; 0
    b732:	84 17       	cp	r24, r20
    b734:	95 07       	cpc	r25, r21
    b736:	a6 07       	cpc	r26, r22
    b738:	b7 07       	cpc	r27, r23
    b73a:	08 f4       	brcc	.+2      	; 0xb73e <f_read+0x68>
    b73c:	5c 01       	movw	r10, r24
    b73e:	17 01       	movw	r2, r14
    b740:	f4 e2       	ldi	r31, 0x24	; 36
    b742:	2f 0e       	add	r2, r31
    b744:	31 1c       	adc	r3, r1
    b746:	a1 14       	cp	r10, r1
    b748:	b1 04       	cpc	r11, r1
    b74a:	09 f4       	brne	.+2      	; 0xb74e <f_read+0x78>
    b74c:	07 c1       	rjmp	.+526    	; 0xb95c <f_read+0x286>
    b74e:	f7 01       	movw	r30, r14
    b750:	40 89       	ldd	r20, Z+16	; 0x10
    b752:	51 89       	ldd	r21, Z+17	; 0x11
    b754:	62 89       	ldd	r22, Z+18	; 0x12
    b756:	73 89       	ldd	r23, Z+19	; 0x13
    b758:	db 01       	movw	r26, r22
    b75a:	ca 01       	movw	r24, r20
    b75c:	91 70       	andi	r25, 0x01	; 1
    b75e:	aa 27       	eor	r26, r26
    b760:	bb 27       	eor	r27, r27
    b762:	89 2b       	or	r24, r25
    b764:	8a 2b       	or	r24, r26
    b766:	8b 2b       	or	r24, r27
    b768:	09 f0       	breq	.+2      	; 0xb76c <f_read+0x96>
    b76a:	cb c0       	rjmp	.+406    	; 0xb902 <f_read+0x22c>
    b76c:	e9 81       	ldd	r30, Y+1	; 0x01
    b76e:	fa 81       	ldd	r31, Y+2	; 0x02
    b770:	01 85       	ldd	r16, Z+9	; 0x09
    b772:	12 85       	ldd	r17, Z+10	; 0x0a
    b774:	01 50       	subi	r16, 0x01	; 1
    b776:	11 09       	sbc	r17, r1
    b778:	db 01       	movw	r26, r22
    b77a:	ca 01       	movw	r24, r20
    b77c:	e9 e0       	ldi	r30, 0x09	; 9
    b77e:	b6 95       	lsr	r27
    b780:	a7 95       	ror	r26
    b782:	97 95       	ror	r25
    b784:	87 95       	ror	r24
    b786:	ea 95       	dec	r30
    b788:	d1 f7       	brne	.-12     	; 0xb77e <f_read+0xa8>
    b78a:	08 23       	and	r16, r24
    b78c:	19 23       	and	r17, r25
    b78e:	01 15       	cp	r16, r1
    b790:	11 05       	cpc	r17, r1
    b792:	91 f5       	brne	.+100    	; 0xb7f8 <f_read+0x122>
    b794:	f7 01       	movw	r30, r14
    b796:	41 15       	cp	r20, r1
    b798:	51 05       	cpc	r21, r1
    b79a:	61 05       	cpc	r22, r1
    b79c:	71 05       	cpc	r23, r1
    b79e:	29 f4       	brne	.+10     	; 0xb7aa <f_read+0xd4>
    b7a0:	66 81       	ldd	r22, Z+6	; 0x06
    b7a2:	77 81       	ldd	r23, Z+7	; 0x07
    b7a4:	80 85       	ldd	r24, Z+8	; 0x08
    b7a6:	91 85       	ldd	r25, Z+9	; 0x09
    b7a8:	11 c0       	rjmp	.+34     	; 0xb7cc <f_read+0xf6>
    b7aa:	82 a1       	ldd	r24, Z+34	; 0x22
    b7ac:	93 a1       	ldd	r25, Z+35	; 0x23
    b7ae:	89 2b       	or	r24, r25
    b7b0:	21 f0       	breq	.+8      	; 0xb7ba <f_read+0xe4>
    b7b2:	c7 01       	movw	r24, r14
    b7b4:	0e 94 0c 48 	call	0x9018	; 0x9018 <clmt_clust>
    b7b8:	09 c0       	rjmp	.+18     	; 0xb7cc <f_read+0xf6>
    b7ba:	f7 01       	movw	r30, r14
    b7bc:	44 89       	ldd	r20, Z+20	; 0x14
    b7be:	55 89       	ldd	r21, Z+21	; 0x15
    b7c0:	66 89       	ldd	r22, Z+22	; 0x16
    b7c2:	77 89       	ldd	r23, Z+23	; 0x17
    b7c4:	80 81       	ld	r24, Z
    b7c6:	91 81       	ldd	r25, Z+1	; 0x01
    b7c8:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <get_fat.isra.9>
    b7cc:	62 30       	cpi	r22, 0x02	; 2
    b7ce:	71 05       	cpc	r23, r1
    b7d0:	81 05       	cpc	r24, r1
    b7d2:	91 05       	cpc	r25, r1
    b7d4:	10 f4       	brcc	.+4      	; 0xb7da <f_read+0x104>
    b7d6:	82 e0       	ldi	r24, 0x02	; 2
    b7d8:	07 c0       	rjmp	.+14     	; 0xb7e8 <f_read+0x112>
    b7da:	6f 3f       	cpi	r22, 0xFF	; 255
    b7dc:	ff ef       	ldi	r31, 0xFF	; 255
    b7de:	7f 07       	cpc	r23, r31
    b7e0:	8f 07       	cpc	r24, r31
    b7e2:	9f 07       	cpc	r25, r31
    b7e4:	21 f4       	brne	.+8      	; 0xb7ee <f_read+0x118>
    b7e6:	81 e0       	ldi	r24, 0x01	; 1
    b7e8:	f7 01       	movw	r30, r14
    b7ea:	87 87       	std	Z+15, r24	; 0x0f
    b7ec:	ba c0       	rjmp	.+372    	; 0xb962 <f_read+0x28c>
    b7ee:	f7 01       	movw	r30, r14
    b7f0:	64 8b       	std	Z+20, r22	; 0x14
    b7f2:	75 8b       	std	Z+21, r23	; 0x15
    b7f4:	86 8b       	std	Z+22, r24	; 0x16
    b7f6:	97 8b       	std	Z+23, r25	; 0x17
    b7f8:	89 81       	ldd	r24, Y+1	; 0x01
    b7fa:	9a 81       	ldd	r25, Y+2	; 0x02
    b7fc:	9c 83       	std	Y+4, r25	; 0x04
    b7fe:	8b 83       	std	Y+3, r24	; 0x03
    b800:	f7 01       	movw	r30, r14
    b802:	44 89       	ldd	r20, Z+20	; 0x14
    b804:	55 89       	ldd	r21, Z+21	; 0x15
    b806:	66 89       	ldd	r22, Z+22	; 0x16
    b808:	77 89       	ldd	r23, Z+23	; 0x17
    b80a:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    b80e:	61 15       	cp	r22, r1
    b810:	71 05       	cpc	r23, r1
    b812:	81 05       	cpc	r24, r1
    b814:	91 05       	cpc	r25, r1
    b816:	f9 f2       	breq	.-66     	; 0xb7d6 <f_read+0x100>
    b818:	2b 01       	movw	r4, r22
    b81a:	3c 01       	movw	r6, r24
    b81c:	40 0e       	add	r4, r16
    b81e:	51 1e       	adc	r5, r17
    b820:	61 1c       	adc	r6, r1
    b822:	71 1c       	adc	r7, r1
    b824:	65 01       	movw	r12, r10
    b826:	cd 2c       	mov	r12, r13
    b828:	dd 24       	eor	r13, r13
    b82a:	c6 94       	lsr	r12
    b82c:	c1 14       	cp	r12, r1
    b82e:	d1 04       	cpc	r13, r1
    b830:	d1 f1       	breq	.+116    	; 0xb8a6 <f_read+0x1d0>
    b832:	eb 81       	ldd	r30, Y+3	; 0x03
    b834:	fc 81       	ldd	r31, Y+4	; 0x04
    b836:	81 85       	ldd	r24, Z+9	; 0x09
    b838:	92 85       	ldd	r25, Z+10	; 0x0a
    b83a:	98 01       	movw	r18, r16
    b83c:	2c 0d       	add	r18, r12
    b83e:	3d 1d       	adc	r19, r13
    b840:	82 17       	cp	r24, r18
    b842:	93 07       	cpc	r25, r19
    b844:	18 f4       	brcc	.+6      	; 0xb84c <f_read+0x176>
    b846:	6c 01       	movw	r12, r24
    b848:	c0 1a       	sub	r12, r16
    b84a:	d1 0a       	sbc	r13, r17
    b84c:	86 01       	movw	r16, r12
    b84e:	a3 01       	movw	r20, r6
    b850:	92 01       	movw	r18, r4
    b852:	b4 01       	movw	r22, r8
    b854:	eb 81       	ldd	r30, Y+3	; 0x03
    b856:	fc 81       	ldd	r31, Y+4	; 0x04
    b858:	81 81       	ldd	r24, Z+1	; 0x01
    b85a:	0e 94 a5 69 	call	0xd34a	; 0xd34a <disk_read>
    b85e:	89 2b       	or	r24, r25
    b860:	11 f6       	brne	.-124    	; 0xb7e6 <f_read+0x110>
    b862:	f7 01       	movw	r30, r14
    b864:	86 85       	ldd	r24, Z+14	; 0x0e
    b866:	87 ff       	sbrs	r24, 7
    b868:	1a c0       	rjmp	.+52     	; 0xb89e <f_read+0x1c8>
    b86a:	80 8d       	ldd	r24, Z+24	; 0x18
    b86c:	91 8d       	ldd	r25, Z+25	; 0x19
    b86e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b870:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b872:	84 19       	sub	r24, r4
    b874:	95 09       	sbc	r25, r5
    b876:	a6 09       	sbc	r26, r6
    b878:	b7 09       	sbc	r27, r7
    b87a:	a6 01       	movw	r20, r12
    b87c:	60 e0       	ldi	r22, 0x00	; 0
    b87e:	70 e0       	ldi	r23, 0x00	; 0
    b880:	84 17       	cp	r24, r20
    b882:	95 07       	cpc	r25, r21
    b884:	a6 07       	cpc	r26, r22
    b886:	b7 07       	cpc	r27, r23
    b888:	50 f4       	brcc	.+20     	; 0xb89e <f_read+0x1c8>
    b88a:	98 2f       	mov	r25, r24
    b88c:	88 27       	eor	r24, r24
    b88e:	99 0f       	add	r25, r25
    b890:	40 e0       	ldi	r20, 0x00	; 0
    b892:	52 e0       	ldi	r21, 0x02	; 2
    b894:	b1 01       	movw	r22, r2
    b896:	88 0d       	add	r24, r8
    b898:	99 1d       	adc	r25, r9
    b89a:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    b89e:	dc 2c       	mov	r13, r12
    b8a0:	cc 24       	eor	r12, r12
    b8a2:	dd 0c       	add	r13, r13
    b8a4:	41 c0       	rjmp	.+130    	; 0xb928 <f_read+0x252>
    b8a6:	f7 01       	movw	r30, r14
    b8a8:	20 8d       	ldd	r18, Z+24	; 0x18
    b8aa:	31 8d       	ldd	r19, Z+25	; 0x19
    b8ac:	42 8d       	ldd	r20, Z+26	; 0x1a
    b8ae:	53 8d       	ldd	r21, Z+27	; 0x1b
    b8b0:	42 16       	cp	r4, r18
    b8b2:	53 06       	cpc	r5, r19
    b8b4:	64 06       	cpc	r6, r20
    b8b6:	75 06       	cpc	r7, r21
    b8b8:	f9 f0       	breq	.+62     	; 0xb8f8 <f_read+0x222>
    b8ba:	86 85       	ldd	r24, Z+14	; 0x0e
    b8bc:	87 ff       	sbrs	r24, 7
    b8be:	0f c0       	rjmp	.+30     	; 0xb8de <f_read+0x208>
    b8c0:	01 e0       	ldi	r16, 0x01	; 1
    b8c2:	10 e0       	ldi	r17, 0x00	; 0
    b8c4:	b1 01       	movw	r22, r2
    b8c6:	eb 81       	ldd	r30, Y+3	; 0x03
    b8c8:	fc 81       	ldd	r31, Y+4	; 0x04
    b8ca:	81 81       	ldd	r24, Z+1	; 0x01
    b8cc:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    b8d0:	89 2b       	or	r24, r25
    b8d2:	09 f0       	breq	.+2      	; 0xb8d6 <f_read+0x200>
    b8d4:	88 cf       	rjmp	.-240    	; 0xb7e6 <f_read+0x110>
    b8d6:	f7 01       	movw	r30, r14
    b8d8:	86 85       	ldd	r24, Z+14	; 0x0e
    b8da:	8f 77       	andi	r24, 0x7F	; 127
    b8dc:	86 87       	std	Z+14, r24	; 0x0e
    b8de:	e9 81       	ldd	r30, Y+1	; 0x01
    b8e0:	fa 81       	ldd	r31, Y+2	; 0x02
    b8e2:	01 e0       	ldi	r16, 0x01	; 1
    b8e4:	10 e0       	ldi	r17, 0x00	; 0
    b8e6:	a3 01       	movw	r20, r6
    b8e8:	92 01       	movw	r18, r4
    b8ea:	b1 01       	movw	r22, r2
    b8ec:	81 81       	ldd	r24, Z+1	; 0x01
    b8ee:	0e 94 a5 69 	call	0xd34a	; 0xd34a <disk_read>
    b8f2:	89 2b       	or	r24, r25
    b8f4:	09 f0       	breq	.+2      	; 0xb8f8 <f_read+0x222>
    b8f6:	77 cf       	rjmp	.-274    	; 0xb7e6 <f_read+0x110>
    b8f8:	f7 01       	movw	r30, r14
    b8fa:	40 8e       	std	Z+24, r4	; 0x18
    b8fc:	51 8e       	std	Z+25, r5	; 0x19
    b8fe:	62 8e       	std	Z+26, r6	; 0x1a
    b900:	73 8e       	std	Z+27, r7	; 0x1b
    b902:	f7 01       	movw	r30, r14
    b904:	60 89       	ldd	r22, Z+16	; 0x10
    b906:	71 89       	ldd	r23, Z+17	; 0x11
    b908:	71 70       	andi	r23, 0x01	; 1
    b90a:	80 e0       	ldi	r24, 0x00	; 0
    b90c:	92 e0       	ldi	r25, 0x02	; 2
    b90e:	86 1b       	sub	r24, r22
    b910:	97 0b       	sbc	r25, r23
    b912:	65 01       	movw	r12, r10
    b914:	8a 15       	cp	r24, r10
    b916:	9b 05       	cpc	r25, r11
    b918:	08 f4       	brcc	.+2      	; 0xb91c <f_read+0x246>
    b91a:	6c 01       	movw	r12, r24
    b91c:	62 0d       	add	r22, r2
    b91e:	73 1d       	adc	r23, r3
    b920:	a6 01       	movw	r20, r12
    b922:	c4 01       	movw	r24, r8
    b924:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    b928:	ac 18       	sub	r10, r12
    b92a:	bd 08       	sbc	r11, r13
    b92c:	ed 81       	ldd	r30, Y+5	; 0x05
    b92e:	fe 81       	ldd	r31, Y+6	; 0x06
    b930:	80 81       	ld	r24, Z
    b932:	91 81       	ldd	r25, Z+1	; 0x01
    b934:	8c 0d       	add	r24, r12
    b936:	9d 1d       	adc	r25, r13
    b938:	91 83       	std	Z+1, r25	; 0x01
    b93a:	80 83       	st	Z, r24
    b93c:	8c 0c       	add	r8, r12
    b93e:	9d 1c       	adc	r9, r13
    b940:	f7 01       	movw	r30, r14
    b942:	80 89       	ldd	r24, Z+16	; 0x10
    b944:	91 89       	ldd	r25, Z+17	; 0x11
    b946:	a2 89       	ldd	r26, Z+18	; 0x12
    b948:	b3 89       	ldd	r27, Z+19	; 0x13
    b94a:	8c 0d       	add	r24, r12
    b94c:	9d 1d       	adc	r25, r13
    b94e:	a1 1d       	adc	r26, r1
    b950:	b1 1d       	adc	r27, r1
    b952:	80 8b       	std	Z+16, r24	; 0x10
    b954:	91 8b       	std	Z+17, r25	; 0x11
    b956:	a2 8b       	std	Z+18, r26	; 0x12
    b958:	b3 8b       	std	Z+19, r27	; 0x13
    b95a:	f5 ce       	rjmp	.-534    	; 0xb746 <f_read+0x70>
    b95c:	80 e0       	ldi	r24, 0x00	; 0
    b95e:	01 c0       	rjmp	.+2      	; 0xb962 <f_read+0x28c>
    b960:	87 e0       	ldi	r24, 0x07	; 7
    b962:	90 e0       	ldi	r25, 0x00	; 0
    b964:	26 96       	adiw	r28, 0x06	; 6
    b966:	e2 e1       	ldi	r30, 0x12	; 18
    b968:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000b96c <f_write>:
    b96c:	a8 e0       	ldi	r26, 0x08	; 8
    b96e:	b0 e0       	ldi	r27, 0x00	; 0
    b970:	ec eb       	ldi	r30, 0xBC	; 188
    b972:	fc e5       	ldi	r31, 0x5C	; 92
    b974:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    b978:	7c 01       	movw	r14, r24
    b97a:	3b 01       	movw	r6, r22
    b97c:	5a 01       	movw	r10, r20
    b97e:	38 87       	std	Y+8, r19	; 0x08
    b980:	2f 83       	std	Y+7, r18	; 0x07
    b982:	f9 01       	movw	r30, r18
    b984:	11 82       	std	Z+1, r1	; 0x01
    b986:	10 82       	st	Z, r1
    b988:	be 01       	movw	r22, r28
    b98a:	6f 5f       	subi	r22, 0xFF	; 255
    b98c:	7f 4f       	sbci	r23, 0xFF	; 255
    b98e:	0e 94 83 48 	call	0x9106	; 0x9106 <validate>
    b992:	00 97       	sbiw	r24, 0x00	; 0
    b994:	09 f0       	breq	.+2      	; 0xb998 <f_write+0x2c>
    b996:	7d c1       	rjmp	.+762    	; 0xbc92 <f_write+0x326>
    b998:	f7 01       	movw	r30, r14
    b99a:	87 85       	ldd	r24, Z+15	; 0x0f
    b99c:	90 e0       	ldi	r25, 0x00	; 0
    b99e:	00 97       	sbiw	r24, 0x00	; 0
    b9a0:	09 f0       	breq	.+2      	; 0xb9a4 <f_write+0x38>
    b9a2:	77 c1       	rjmp	.+750    	; 0xbc92 <f_write+0x326>
    b9a4:	86 85       	ldd	r24, Z+14	; 0x0e
    b9a6:	81 ff       	sbrs	r24, 1
    b9a8:	72 c1       	rjmp	.+740    	; 0xbc8e <f_write+0x322>
    b9aa:	80 89       	ldd	r24, Z+16	; 0x10
    b9ac:	91 89       	ldd	r25, Z+17	; 0x11
    b9ae:	a2 89       	ldd	r26, Z+18	; 0x12
    b9b0:	b3 89       	ldd	r27, Z+19	; 0x13
    b9b2:	ac 01       	movw	r20, r24
    b9b4:	bd 01       	movw	r22, r26
    b9b6:	4a 0d       	add	r20, r10
    b9b8:	5b 1d       	adc	r21, r11
    b9ba:	61 1d       	adc	r22, r1
    b9bc:	71 1d       	adc	r23, r1
    b9be:	48 17       	cp	r20, r24
    b9c0:	59 07       	cpc	r21, r25
    b9c2:	6a 07       	cpc	r22, r26
    b9c4:	7b 07       	cpc	r23, r27
    b9c6:	18 f4       	brcc	.+6      	; 0xb9ce <f_write+0x62>
    b9c8:	5c 01       	movw	r10, r24
    b9ca:	a0 94       	com	r10
    b9cc:	b0 94       	com	r11
    b9ce:	97 01       	movw	r18, r14
    b9d0:	2c 5d       	subi	r18, 0xDC	; 220
    b9d2:	3f 4f       	sbci	r19, 0xFF	; 255
    b9d4:	3e 83       	std	Y+6, r19	; 0x06
    b9d6:	2d 83       	std	Y+5, r18	; 0x05
    b9d8:	a1 14       	cp	r10, r1
    b9da:	b1 04       	cpc	r11, r1
    b9dc:	09 f4       	brne	.+2      	; 0xb9e0 <f_write+0x74>
    b9de:	4d c0       	rjmp	.+154    	; 0xba7a <f_write+0x10e>
    b9e0:	f7 01       	movw	r30, r14
    b9e2:	40 89       	ldd	r20, Z+16	; 0x10
    b9e4:	51 89       	ldd	r21, Z+17	; 0x11
    b9e6:	62 89       	ldd	r22, Z+18	; 0x12
    b9e8:	73 89       	ldd	r23, Z+19	; 0x13
    b9ea:	db 01       	movw	r26, r22
    b9ec:	ca 01       	movw	r24, r20
    b9ee:	91 70       	andi	r25, 0x01	; 1
    b9f0:	aa 27       	eor	r26, r26
    b9f2:	bb 27       	eor	r27, r27
    b9f4:	89 2b       	or	r24, r25
    b9f6:	8a 2b       	or	r24, r26
    b9f8:	8b 2b       	or	r24, r27
    b9fa:	09 f0       	breq	.+2      	; 0xb9fe <f_write+0x92>
    b9fc:	05 c1       	rjmp	.+522    	; 0xbc08 <f_write+0x29c>
    b9fe:	e9 81       	ldd	r30, Y+1	; 0x01
    ba00:	fa 81       	ldd	r31, Y+2	; 0x02
    ba02:	81 84       	ldd	r8, Z+9	; 0x09
    ba04:	92 84       	ldd	r9, Z+10	; 0x0a
    ba06:	f1 e0       	ldi	r31, 0x01	; 1
    ba08:	8f 1a       	sub	r8, r31
    ba0a:	91 08       	sbc	r9, r1
    ba0c:	db 01       	movw	r26, r22
    ba0e:	ca 01       	movw	r24, r20
    ba10:	e9 e0       	ldi	r30, 0x09	; 9
    ba12:	b6 95       	lsr	r27
    ba14:	a7 95       	ror	r26
    ba16:	97 95       	ror	r25
    ba18:	87 95       	ror	r24
    ba1a:	ea 95       	dec	r30
    ba1c:	d1 f7       	brne	.-12     	; 0xba12 <f_write+0xa6>
    ba1e:	88 22       	and	r8, r24
    ba20:	99 22       	and	r9, r25
    ba22:	81 14       	cp	r8, r1
    ba24:	91 04       	cpc	r9, r1
    ba26:	09 f0       	breq	.+2      	; 0xba2a <f_write+0xbe>
    ba28:	51 c0       	rjmp	.+162    	; 0xbacc <f_write+0x160>
    ba2a:	f7 01       	movw	r30, r14
    ba2c:	41 15       	cp	r20, r1
    ba2e:	51 05       	cpc	r21, r1
    ba30:	61 05       	cpc	r22, r1
    ba32:	71 05       	cpc	r23, r1
    ba34:	69 f4       	brne	.+26     	; 0xba50 <f_write+0xe4>
    ba36:	66 81       	ldd	r22, Z+6	; 0x06
    ba38:	77 81       	ldd	r23, Z+7	; 0x07
    ba3a:	80 85       	ldd	r24, Z+8	; 0x08
    ba3c:	91 85       	ldd	r25, Z+9	; 0x09
    ba3e:	61 15       	cp	r22, r1
    ba40:	71 05       	cpc	r23, r1
    ba42:	81 05       	cpc	r24, r1
    ba44:	91 05       	cpc	r25, r1
    ba46:	f9 f4       	brne	.+62     	; 0xba86 <f_write+0x11a>
    ba48:	40 e0       	ldi	r20, 0x00	; 0
    ba4a:	50 e0       	ldi	r21, 0x00	; 0
    ba4c:	ba 01       	movw	r22, r20
    ba4e:	0d c0       	rjmp	.+26     	; 0xba6a <f_write+0xfe>
    ba50:	82 a1       	ldd	r24, Z+34	; 0x22
    ba52:	93 a1       	ldd	r25, Z+35	; 0x23
    ba54:	89 2b       	or	r24, r25
    ba56:	21 f0       	breq	.+8      	; 0xba60 <f_write+0xf4>
    ba58:	c7 01       	movw	r24, r14
    ba5a:	0e 94 0c 48 	call	0x9018	; 0x9018 <clmt_clust>
    ba5e:	08 c0       	rjmp	.+16     	; 0xba70 <f_write+0x104>
    ba60:	f7 01       	movw	r30, r14
    ba62:	44 89       	ldd	r20, Z+20	; 0x14
    ba64:	55 89       	ldd	r21, Z+21	; 0x15
    ba66:	66 89       	ldd	r22, Z+22	; 0x16
    ba68:	77 89       	ldd	r23, Z+23	; 0x17
    ba6a:	c7 01       	movw	r24, r14
    ba6c:	0e 94 b6 50 	call	0xa16c	; 0xa16c <create_chain>
    ba70:	61 15       	cp	r22, r1
    ba72:	71 05       	cpc	r23, r1
    ba74:	81 05       	cpc	r24, r1
    ba76:	91 05       	cpc	r25, r1
    ba78:	31 f4       	brne	.+12     	; 0xba86 <f_write+0x11a>
    ba7a:	f7 01       	movw	r30, r14
    ba7c:	86 85       	ldd	r24, Z+14	; 0x0e
    ba7e:	80 64       	ori	r24, 0x40	; 64
    ba80:	86 87       	std	Z+14, r24	; 0x0e
    ba82:	80 e0       	ldi	r24, 0x00	; 0
    ba84:	05 c1       	rjmp	.+522    	; 0xbc90 <f_write+0x324>
    ba86:	61 30       	cpi	r22, 0x01	; 1
    ba88:	71 05       	cpc	r23, r1
    ba8a:	81 05       	cpc	r24, r1
    ba8c:	91 05       	cpc	r25, r1
    ba8e:	11 f4       	brne	.+4      	; 0xba94 <f_write+0x128>
    ba90:	82 e0       	ldi	r24, 0x02	; 2
    ba92:	07 c0       	rjmp	.+14     	; 0xbaa2 <f_write+0x136>
    ba94:	6f 3f       	cpi	r22, 0xFF	; 255
    ba96:	ff ef       	ldi	r31, 0xFF	; 255
    ba98:	7f 07       	cpc	r23, r31
    ba9a:	8f 07       	cpc	r24, r31
    ba9c:	9f 07       	cpc	r25, r31
    ba9e:	21 f4       	brne	.+8      	; 0xbaa8 <f_write+0x13c>
    baa0:	81 e0       	ldi	r24, 0x01	; 1
    baa2:	f7 01       	movw	r30, r14
    baa4:	87 87       	std	Z+15, r24	; 0x0f
    baa6:	f4 c0       	rjmp	.+488    	; 0xbc90 <f_write+0x324>
    baa8:	f7 01       	movw	r30, r14
    baaa:	64 8b       	std	Z+20, r22	; 0x14
    baac:	75 8b       	std	Z+21, r23	; 0x15
    baae:	86 8b       	std	Z+22, r24	; 0x16
    bab0:	97 8b       	std	Z+23, r25	; 0x17
    bab2:	06 81       	ldd	r16, Z+6	; 0x06
    bab4:	17 81       	ldd	r17, Z+7	; 0x07
    bab6:	20 85       	ldd	r18, Z+8	; 0x08
    bab8:	31 85       	ldd	r19, Z+9	; 0x09
    baba:	01 15       	cp	r16, r1
    babc:	11 05       	cpc	r17, r1
    babe:	21 05       	cpc	r18, r1
    bac0:	31 05       	cpc	r19, r1
    bac2:	21 f4       	brne	.+8      	; 0xbacc <f_write+0x160>
    bac4:	66 83       	std	Z+6, r22	; 0x06
    bac6:	77 83       	std	Z+7, r23	; 0x07
    bac8:	80 87       	std	Z+8, r24	; 0x08
    baca:	91 87       	std	Z+9, r25	; 0x09
    bacc:	f7 01       	movw	r30, r14
    bace:	86 85       	ldd	r24, Z+14	; 0x0e
    bad0:	87 ff       	sbrs	r24, 7
    bad2:	13 c0       	rjmp	.+38     	; 0xbafa <f_write+0x18e>
    bad4:	20 8d       	ldd	r18, Z+24	; 0x18
    bad6:	31 8d       	ldd	r19, Z+25	; 0x19
    bad8:	42 8d       	ldd	r20, Z+26	; 0x1a
    bada:	53 8d       	ldd	r21, Z+27	; 0x1b
    badc:	e9 81       	ldd	r30, Y+1	; 0x01
    bade:	fa 81       	ldd	r31, Y+2	; 0x02
    bae0:	01 e0       	ldi	r16, 0x01	; 1
    bae2:	10 e0       	ldi	r17, 0x00	; 0
    bae4:	6d 81       	ldd	r22, Y+5	; 0x05
    bae6:	7e 81       	ldd	r23, Y+6	; 0x06
    bae8:	81 81       	ldd	r24, Z+1	; 0x01
    baea:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    baee:	89 2b       	or	r24, r25
    baf0:	b9 f6       	brne	.-82     	; 0xbaa0 <f_write+0x134>
    baf2:	f7 01       	movw	r30, r14
    baf4:	86 85       	ldd	r24, Z+14	; 0x0e
    baf6:	8f 77       	andi	r24, 0x7F	; 127
    baf8:	86 87       	std	Z+14, r24	; 0x0e
    bafa:	29 81       	ldd	r18, Y+1	; 0x01
    bafc:	3a 81       	ldd	r19, Y+2	; 0x02
    bafe:	3c 83       	std	Y+4, r19	; 0x04
    bb00:	2b 83       	std	Y+3, r18	; 0x03
    bb02:	f7 01       	movw	r30, r14
    bb04:	44 89       	ldd	r20, Z+20	; 0x14
    bb06:	55 89       	ldd	r21, Z+21	; 0x15
    bb08:	66 89       	ldd	r22, Z+22	; 0x16
    bb0a:	77 89       	ldd	r23, Z+23	; 0x17
    bb0c:	c9 01       	movw	r24, r18
    bb0e:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    bb12:	61 15       	cp	r22, r1
    bb14:	71 05       	cpc	r23, r1
    bb16:	81 05       	cpc	r24, r1
    bb18:	91 05       	cpc	r25, r1
    bb1a:	09 f4       	brne	.+2      	; 0xbb1e <f_write+0x1b2>
    bb1c:	b9 cf       	rjmp	.-142    	; 0xba90 <f_write+0x124>
    bb1e:	1b 01       	movw	r2, r22
    bb20:	2c 01       	movw	r4, r24
    bb22:	28 0c       	add	r2, r8
    bb24:	39 1c       	adc	r3, r9
    bb26:	41 1c       	adc	r4, r1
    bb28:	51 1c       	adc	r5, r1
    bb2a:	65 01       	movw	r12, r10
    bb2c:	cd 2c       	mov	r12, r13
    bb2e:	dd 24       	eor	r13, r13
    bb30:	c6 94       	lsr	r12
    bb32:	c1 14       	cp	r12, r1
    bb34:	d1 04       	cpc	r13, r1
    bb36:	f1 f1       	breq	.+124    	; 0xbbb4 <f_write+0x248>
    bb38:	eb 81       	ldd	r30, Y+3	; 0x03
    bb3a:	fc 81       	ldd	r31, Y+4	; 0x04
    bb3c:	81 85       	ldd	r24, Z+9	; 0x09
    bb3e:	92 85       	ldd	r25, Z+10	; 0x0a
    bb40:	94 01       	movw	r18, r8
    bb42:	2c 0d       	add	r18, r12
    bb44:	3d 1d       	adc	r19, r13
    bb46:	82 17       	cp	r24, r18
    bb48:	93 07       	cpc	r25, r19
    bb4a:	18 f4       	brcc	.+6      	; 0xbb52 <f_write+0x1e6>
    bb4c:	6c 01       	movw	r12, r24
    bb4e:	c8 18       	sub	r12, r8
    bb50:	d9 08       	sbc	r13, r9
    bb52:	86 01       	movw	r16, r12
    bb54:	a2 01       	movw	r20, r4
    bb56:	91 01       	movw	r18, r2
    bb58:	b3 01       	movw	r22, r6
    bb5a:	eb 81       	ldd	r30, Y+3	; 0x03
    bb5c:	fc 81       	ldd	r31, Y+4	; 0x04
    bb5e:	81 81       	ldd	r24, Z+1	; 0x01
    bb60:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    bb64:	89 2b       	or	r24, r25
    bb66:	09 f0       	breq	.+2      	; 0xbb6a <f_write+0x1fe>
    bb68:	9b cf       	rjmp	.-202    	; 0xbaa0 <f_write+0x134>
    bb6a:	f7 01       	movw	r30, r14
    bb6c:	80 8d       	ldd	r24, Z+24	; 0x18
    bb6e:	91 8d       	ldd	r25, Z+25	; 0x19
    bb70:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb72:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb74:	82 19       	sub	r24, r2
    bb76:	93 09       	sbc	r25, r3
    bb78:	a4 09       	sbc	r26, r4
    bb7a:	b5 09       	sbc	r27, r5
    bb7c:	a6 01       	movw	r20, r12
    bb7e:	60 e0       	ldi	r22, 0x00	; 0
    bb80:	70 e0       	ldi	r23, 0x00	; 0
    bb82:	84 17       	cp	r24, r20
    bb84:	95 07       	cpc	r25, r21
    bb86:	a6 07       	cpc	r26, r22
    bb88:	b7 07       	cpc	r27, r23
    bb8a:	80 f4       	brcc	.+32     	; 0xbbac <f_write+0x240>
    bb8c:	98 2f       	mov	r25, r24
    bb8e:	88 27       	eor	r24, r24
    bb90:	99 0f       	add	r25, r25
    bb92:	b3 01       	movw	r22, r6
    bb94:	68 0f       	add	r22, r24
    bb96:	79 1f       	adc	r23, r25
    bb98:	40 e0       	ldi	r20, 0x00	; 0
    bb9a:	52 e0       	ldi	r21, 0x02	; 2
    bb9c:	8d 81       	ldd	r24, Y+5	; 0x05
    bb9e:	9e 81       	ldd	r25, Y+6	; 0x06
    bba0:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    bba4:	f7 01       	movw	r30, r14
    bba6:	86 85       	ldd	r24, Z+14	; 0x0e
    bba8:	8f 77       	andi	r24, 0x7F	; 127
    bbaa:	86 87       	std	Z+14, r24	; 0x0e
    bbac:	dc 2c       	mov	r13, r12
    bbae:	cc 24       	eor	r12, r12
    bbb0:	dd 0c       	add	r13, r13
    bbb2:	43 c0       	rjmp	.+134    	; 0xbc3a <f_write+0x2ce>
    bbb4:	f7 01       	movw	r30, r14
    bbb6:	80 8d       	ldd	r24, Z+24	; 0x18
    bbb8:	91 8d       	ldd	r25, Z+25	; 0x19
    bbba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbbc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bbbe:	28 16       	cp	r2, r24
    bbc0:	39 06       	cpc	r3, r25
    bbc2:	4a 06       	cpc	r4, r26
    bbc4:	5b 06       	cpc	r5, r27
    bbc6:	d9 f0       	breq	.+54     	; 0xbbfe <f_write+0x292>
    bbc8:	40 89       	ldd	r20, Z+16	; 0x10
    bbca:	51 89       	ldd	r21, Z+17	; 0x11
    bbcc:	62 89       	ldd	r22, Z+18	; 0x12
    bbce:	73 89       	ldd	r23, Z+19	; 0x13
    bbd0:	82 85       	ldd	r24, Z+10	; 0x0a
    bbd2:	93 85       	ldd	r25, Z+11	; 0x0b
    bbd4:	a4 85       	ldd	r26, Z+12	; 0x0c
    bbd6:	b5 85       	ldd	r27, Z+13	; 0x0d
    bbd8:	48 17       	cp	r20, r24
    bbda:	59 07       	cpc	r21, r25
    bbdc:	6a 07       	cpc	r22, r26
    bbde:	7b 07       	cpc	r23, r27
    bbe0:	70 f4       	brcc	.+28     	; 0xbbfe <f_write+0x292>
    bbe2:	01 e0       	ldi	r16, 0x01	; 1
    bbe4:	10 e0       	ldi	r17, 0x00	; 0
    bbe6:	a2 01       	movw	r20, r4
    bbe8:	91 01       	movw	r18, r2
    bbea:	6d 81       	ldd	r22, Y+5	; 0x05
    bbec:	7e 81       	ldd	r23, Y+6	; 0x06
    bbee:	eb 81       	ldd	r30, Y+3	; 0x03
    bbf0:	fc 81       	ldd	r31, Y+4	; 0x04
    bbf2:	81 81       	ldd	r24, Z+1	; 0x01
    bbf4:	0e 94 a5 69 	call	0xd34a	; 0xd34a <disk_read>
    bbf8:	89 2b       	or	r24, r25
    bbfa:	09 f0       	breq	.+2      	; 0xbbfe <f_write+0x292>
    bbfc:	51 cf       	rjmp	.-350    	; 0xbaa0 <f_write+0x134>
    bbfe:	f7 01       	movw	r30, r14
    bc00:	20 8e       	std	Z+24, r2	; 0x18
    bc02:	31 8e       	std	Z+25, r3	; 0x19
    bc04:	42 8e       	std	Z+26, r4	; 0x1a
    bc06:	53 8e       	std	Z+27, r5	; 0x1b
    bc08:	f7 01       	movw	r30, r14
    bc0a:	80 89       	ldd	r24, Z+16	; 0x10
    bc0c:	91 89       	ldd	r25, Z+17	; 0x11
    bc0e:	91 70       	andi	r25, 0x01	; 1
    bc10:	20 e0       	ldi	r18, 0x00	; 0
    bc12:	32 e0       	ldi	r19, 0x02	; 2
    bc14:	28 1b       	sub	r18, r24
    bc16:	39 0b       	sbc	r19, r25
    bc18:	65 01       	movw	r12, r10
    bc1a:	2a 15       	cp	r18, r10
    bc1c:	3b 05       	cpc	r19, r11
    bc1e:	08 f4       	brcc	.+2      	; 0xbc22 <f_write+0x2b6>
    bc20:	69 01       	movw	r12, r18
    bc22:	a6 01       	movw	r20, r12
    bc24:	b3 01       	movw	r22, r6
    bc26:	2d 81       	ldd	r18, Y+5	; 0x05
    bc28:	3e 81       	ldd	r19, Y+6	; 0x06
    bc2a:	82 0f       	add	r24, r18
    bc2c:	93 1f       	adc	r25, r19
    bc2e:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    bc32:	f7 01       	movw	r30, r14
    bc34:	86 85       	ldd	r24, Z+14	; 0x0e
    bc36:	80 68       	ori	r24, 0x80	; 128
    bc38:	86 87       	std	Z+14, r24	; 0x0e
    bc3a:	ac 18       	sub	r10, r12
    bc3c:	bd 08       	sbc	r11, r13
    bc3e:	ef 81       	ldd	r30, Y+7	; 0x07
    bc40:	f8 85       	ldd	r31, Y+8	; 0x08
    bc42:	80 81       	ld	r24, Z
    bc44:	91 81       	ldd	r25, Z+1	; 0x01
    bc46:	8c 0d       	add	r24, r12
    bc48:	9d 1d       	adc	r25, r13
    bc4a:	91 83       	std	Z+1, r25	; 0x01
    bc4c:	80 83       	st	Z, r24
    bc4e:	6c 0c       	add	r6, r12
    bc50:	7d 1c       	adc	r7, r13
    bc52:	f7 01       	movw	r30, r14
    bc54:	80 89       	ldd	r24, Z+16	; 0x10
    bc56:	91 89       	ldd	r25, Z+17	; 0x11
    bc58:	a2 89       	ldd	r26, Z+18	; 0x12
    bc5a:	b3 89       	ldd	r27, Z+19	; 0x13
    bc5c:	8c 0d       	add	r24, r12
    bc5e:	9d 1d       	adc	r25, r13
    bc60:	a1 1d       	adc	r26, r1
    bc62:	b1 1d       	adc	r27, r1
    bc64:	80 8b       	std	Z+16, r24	; 0x10
    bc66:	91 8b       	std	Z+17, r25	; 0x11
    bc68:	a2 8b       	std	Z+18, r26	; 0x12
    bc6a:	b3 8b       	std	Z+19, r27	; 0x13
    bc6c:	42 85       	ldd	r20, Z+10	; 0x0a
    bc6e:	53 85       	ldd	r21, Z+11	; 0x0b
    bc70:	64 85       	ldd	r22, Z+12	; 0x0c
    bc72:	75 85       	ldd	r23, Z+13	; 0x0d
    bc74:	48 17       	cp	r20, r24
    bc76:	59 07       	cpc	r21, r25
    bc78:	6a 07       	cpc	r22, r26
    bc7a:	7b 07       	cpc	r23, r27
    bc7c:	10 f4       	brcc	.+4      	; 0xbc82 <f_write+0x316>
    bc7e:	ac 01       	movw	r20, r24
    bc80:	bd 01       	movw	r22, r26
    bc82:	f7 01       	movw	r30, r14
    bc84:	42 87       	std	Z+10, r20	; 0x0a
    bc86:	53 87       	std	Z+11, r21	; 0x0b
    bc88:	64 87       	std	Z+12, r22	; 0x0c
    bc8a:	75 87       	std	Z+13, r23	; 0x0d
    bc8c:	a5 ce       	rjmp	.-694    	; 0xb9d8 <f_write+0x6c>
    bc8e:	87 e0       	ldi	r24, 0x07	; 7
    bc90:	90 e0       	ldi	r25, 0x00	; 0
    bc92:	28 96       	adiw	r28, 0x08	; 8
    bc94:	e2 e1       	ldi	r30, 0x12	; 18
    bc96:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000bc9a <f_sync>:
    bc9a:	8f 92       	push	r8
    bc9c:	9f 92       	push	r9
    bc9e:	af 92       	push	r10
    bca0:	bf 92       	push	r11
    bca2:	ef 92       	push	r14
    bca4:	ff 92       	push	r15
    bca6:	0f 93       	push	r16
    bca8:	1f 93       	push	r17
    bcaa:	cf 93       	push	r28
    bcac:	df 93       	push	r29
    bcae:	00 d0       	rcall	.+0      	; 0xbcb0 <f_sync+0x16>
    bcb0:	cd b7       	in	r28, 0x3d	; 61
    bcb2:	de b7       	in	r29, 0x3e	; 62
    bcb4:	7c 01       	movw	r14, r24
    bcb6:	be 01       	movw	r22, r28
    bcb8:	6f 5f       	subi	r22, 0xFF	; 255
    bcba:	7f 4f       	sbci	r23, 0xFF	; 255
    bcbc:	0e 94 83 48 	call	0x9106	; 0x9106 <validate>
    bcc0:	00 97       	sbiw	r24, 0x00	; 0
    bcc2:	09 f0       	breq	.+2      	; 0xbcc6 <f_sync+0x2c>
    bcc4:	5d c0       	rjmp	.+186    	; 0xbd80 <f_sync+0xe6>
    bcc6:	f7 01       	movw	r30, r14
    bcc8:	86 85       	ldd	r24, Z+14	; 0x0e
    bcca:	86 ff       	sbrs	r24, 6
    bccc:	55 c0       	rjmp	.+170    	; 0xbd78 <f_sync+0xde>
    bcce:	87 ff       	sbrs	r24, 7
    bcd0:	15 c0       	rjmp	.+42     	; 0xbcfc <f_sync+0x62>
    bcd2:	20 8d       	ldd	r18, Z+24	; 0x18
    bcd4:	31 8d       	ldd	r19, Z+25	; 0x19
    bcd6:	42 8d       	ldd	r20, Z+26	; 0x1a
    bcd8:	53 8d       	ldd	r21, Z+27	; 0x1b
    bcda:	e9 81       	ldd	r30, Y+1	; 0x01
    bcdc:	fa 81       	ldd	r31, Y+2	; 0x02
    bcde:	01 e0       	ldi	r16, 0x01	; 1
    bce0:	10 e0       	ldi	r17, 0x00	; 0
    bce2:	b7 01       	movw	r22, r14
    bce4:	6c 5d       	subi	r22, 0xDC	; 220
    bce6:	7f 4f       	sbci	r23, 0xFF	; 255
    bce8:	81 81       	ldd	r24, Z+1	; 0x01
    bcea:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    bcee:	89 2b       	or	r24, r25
    bcf0:	09 f0       	breq	.+2      	; 0xbcf4 <f_sync+0x5a>
    bcf2:	44 c0       	rjmp	.+136    	; 0xbd7c <f_sync+0xe2>
    bcf4:	f7 01       	movw	r30, r14
    bcf6:	86 85       	ldd	r24, Z+14	; 0x0e
    bcf8:	8f 77       	andi	r24, 0x7F	; 127
    bcfa:	86 87       	std	Z+14, r24	; 0x0e
    bcfc:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <get_fattime>
    bd00:	4b 01       	movw	r8, r22
    bd02:	5c 01       	movw	r10, r24
    bd04:	f7 01       	movw	r30, r14
    bd06:	44 8d       	ldd	r20, Z+28	; 0x1c
    bd08:	55 8d       	ldd	r21, Z+29	; 0x1d
    bd0a:	66 8d       	ldd	r22, Z+30	; 0x1e
    bd0c:	77 8d       	ldd	r23, Z+31	; 0x1f
    bd0e:	89 81       	ldd	r24, Y+1	; 0x01
    bd10:	9a 81       	ldd	r25, Y+2	; 0x02
    bd12:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    bd16:	00 97       	sbiw	r24, 0x00	; 0
    bd18:	99 f5       	brne	.+102    	; 0xbd80 <f_sync+0xe6>
    bd1a:	f7 01       	movw	r30, r14
    bd1c:	00 a1       	ldd	r16, Z+32	; 0x20
    bd1e:	11 a1       	ldd	r17, Z+33	; 0x21
    bd20:	f8 01       	movw	r30, r16
    bd22:	83 85       	ldd	r24, Z+11	; 0x0b
    bd24:	80 62       	ori	r24, 0x20	; 32
    bd26:	83 87       	std	Z+11, r24	; 0x0b
    bd28:	f7 01       	movw	r30, r14
    bd2a:	26 81       	ldd	r18, Z+6	; 0x06
    bd2c:	37 81       	ldd	r19, Z+7	; 0x07
    bd2e:	40 85       	ldd	r20, Z+8	; 0x08
    bd30:	51 85       	ldd	r21, Z+9	; 0x09
    bd32:	b8 01       	movw	r22, r16
    bd34:	80 81       	ld	r24, Z
    bd36:	91 81       	ldd	r25, Z+1	; 0x01
    bd38:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <st_clust.isra.4>
    bd3c:	f7 01       	movw	r30, r14
    bd3e:	42 85       	ldd	r20, Z+10	; 0x0a
    bd40:	53 85       	ldd	r21, Z+11	; 0x0b
    bd42:	64 85       	ldd	r22, Z+12	; 0x0c
    bd44:	75 85       	ldd	r23, Z+13	; 0x0d
    bd46:	c8 01       	movw	r24, r16
    bd48:	4c 96       	adiw	r24, 0x1c	; 28
    bd4a:	0e 94 c6 47 	call	0x8f8c	; 0x8f8c <st_dword>
    bd4e:	b5 01       	movw	r22, r10
    bd50:	a4 01       	movw	r20, r8
    bd52:	c8 01       	movw	r24, r16
    bd54:	46 96       	adiw	r24, 0x16	; 22
    bd56:	0e 94 c6 47 	call	0x8f8c	; 0x8f8c <st_dword>
    bd5a:	f8 01       	movw	r30, r16
    bd5c:	12 8a       	std	Z+18, r1	; 0x12
    bd5e:	13 8a       	std	Z+19, r1	; 0x13
    bd60:	89 81       	ldd	r24, Y+1	; 0x01
    bd62:	9a 81       	ldd	r25, Y+2	; 0x02
    bd64:	21 e0       	ldi	r18, 0x01	; 1
    bd66:	fc 01       	movw	r30, r24
    bd68:	23 83       	std	Z+3, r18	; 0x03
    bd6a:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <sync_fs>
    bd6e:	f7 01       	movw	r30, r14
    bd70:	26 85       	ldd	r18, Z+14	; 0x0e
    bd72:	2f 7b       	andi	r18, 0xBF	; 191
    bd74:	26 87       	std	Z+14, r18	; 0x0e
    bd76:	04 c0       	rjmp	.+8      	; 0xbd80 <f_sync+0xe6>
    bd78:	80 e0       	ldi	r24, 0x00	; 0
    bd7a:	01 c0       	rjmp	.+2      	; 0xbd7e <f_sync+0xe4>
    bd7c:	81 e0       	ldi	r24, 0x01	; 1
    bd7e:	90 e0       	ldi	r25, 0x00	; 0
    bd80:	0f 90       	pop	r0
    bd82:	0f 90       	pop	r0
    bd84:	df 91       	pop	r29
    bd86:	cf 91       	pop	r28
    bd88:	1f 91       	pop	r17
    bd8a:	0f 91       	pop	r16
    bd8c:	ff 90       	pop	r15
    bd8e:	ef 90       	pop	r14
    bd90:	bf 90       	pop	r11
    bd92:	af 90       	pop	r10
    bd94:	9f 90       	pop	r9
    bd96:	8f 90       	pop	r8
    bd98:	08 95       	ret

0000bd9a <f_close>:
    bd9a:	a2 e0       	ldi	r26, 0x02	; 2
    bd9c:	b0 e0       	ldi	r27, 0x00	; 0
    bd9e:	e3 ed       	ldi	r30, 0xD3	; 211
    bda0:	fe e5       	ldi	r31, 0x5E	; 94
    bda2:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    bda6:	8c 01       	movw	r16, r24
    bda8:	78 df       	rcall	.-272    	; 0xbc9a <f_sync>
    bdaa:	00 97       	sbiw	r24, 0x00	; 0
    bdac:	59 f4       	brne	.+22     	; 0xbdc4 <f_close+0x2a>
    bdae:	be 01       	movw	r22, r28
    bdb0:	6f 5f       	subi	r22, 0xFF	; 255
    bdb2:	7f 4f       	sbci	r23, 0xFF	; 255
    bdb4:	c8 01       	movw	r24, r16
    bdb6:	0e 94 83 48 	call	0x9106	; 0x9106 <validate>
    bdba:	00 97       	sbiw	r24, 0x00	; 0
    bdbc:	19 f4       	brne	.+6      	; 0xbdc4 <f_close+0x2a>
    bdbe:	f8 01       	movw	r30, r16
    bdc0:	11 82       	std	Z+1, r1	; 0x01
    bdc2:	10 82       	st	Z, r1
    bdc4:	22 96       	adiw	r28, 0x02	; 2
    bdc6:	e4 e0       	ldi	r30, 0x04	; 4
    bdc8:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

0000bdcc <f_chdir>:
    bdcc:	a2 e3       	ldi	r26, 0x32	; 50
    bdce:	b0 e0       	ldi	r27, 0x00	; 0
    bdd0:	ec ee       	ldi	r30, 0xEC	; 236
    bdd2:	fe e5       	ldi	r31, 0x5E	; 94
    bdd4:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    bdd8:	9a ab       	std	Y+50, r25	; 0x32
    bdda:	89 ab       	std	Y+49, r24	; 0x31
    bddc:	40 e0       	ldi	r20, 0x00	; 0
    bdde:	be 01       	movw	r22, r28
    bde0:	61 5d       	subi	r22, 0xD1	; 209
    bde2:	7f 4f       	sbci	r23, 0xFF	; 255
    bde4:	ce 01       	movw	r24, r28
    bde6:	c1 96       	adiw	r24, 0x31	; 49
    bde8:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    bdec:	00 97       	sbiw	r24, 0x00	; 0
    bdee:	09 f0       	breq	.+2      	; 0xbdf2 <f_chdir+0x26>
    bdf0:	44 c0       	rjmp	.+136    	; 0xbe7a <f_chdir+0xae>
    bdf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    bdf4:	98 a9       	ldd	r25, Y+48	; 0x30
    bdf6:	9a 83       	std	Y+2, r25	; 0x02
    bdf8:	89 83       	std	Y+1, r24	; 0x01
    bdfa:	80 e0       	ldi	r24, 0x00	; 0
    bdfc:	92 e0       	ldi	r25, 0x02	; 2
    bdfe:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <ff_memalloc>
    be02:	7c 01       	movw	r14, r24
    be04:	00 97       	sbiw	r24, 0x00	; 0
    be06:	a9 f1       	breq	.+106    	; 0xbe72 <f_chdir+0xa6>
    be08:	ef a5       	ldd	r30, Y+47	; 0x2f
    be0a:	f8 a9       	ldd	r31, Y+48	; 0x30
    be0c:	94 87       	std	Z+12, r25	; 0x0c
    be0e:	83 87       	std	Z+11, r24	; 0x0b
    be10:	69 a9       	ldd	r22, Y+49	; 0x31
    be12:	7a a9       	ldd	r23, Y+50	; 0x32
    be14:	ce 01       	movw	r24, r28
    be16:	01 96       	adiw	r24, 0x01	; 1
    be18:	2e d8       	rcall	.-4004   	; 0xae76 <follow_path>
    be1a:	8c 01       	movw	r16, r24
    be1c:	89 2b       	or	r24, r25
    be1e:	09 f5       	brne	.+66     	; 0xbe62 <f_chdir+0x96>
    be20:	88 a5       	ldd	r24, Y+40	; 0x28
    be22:	87 ff       	sbrs	r24, 7
    be24:	0b c0       	rjmp	.+22     	; 0xbe3c <f_chdir+0x70>
    be26:	ef a5       	ldd	r30, Y+47	; 0x2f
    be28:	f8 a9       	ldd	r31, Y+48	; 0x30
    be2a:	8f 81       	ldd	r24, Y+7	; 0x07
    be2c:	98 85       	ldd	r25, Y+8	; 0x08
    be2e:	a9 85       	ldd	r26, Y+9	; 0x09
    be30:	ba 85       	ldd	r27, Y+10	; 0x0a
    be32:	85 8b       	std	Z+21, r24	; 0x15
    be34:	96 8b       	std	Z+22, r25	; 0x16
    be36:	a7 8b       	std	Z+23, r26	; 0x17
    be38:	b0 8f       	std	Z+24, r27	; 0x18
    be3a:	13 c0       	rjmp	.+38     	; 0xbe62 <f_chdir+0x96>
    be3c:	8d 81       	ldd	r24, Y+5	; 0x05
    be3e:	84 ff       	sbrs	r24, 4
    be40:	0e c0       	rjmp	.+28     	; 0xbe5e <f_chdir+0x92>
    be42:	cf a4       	ldd	r12, Y+47	; 0x2f
    be44:	d8 a8       	ldd	r13, Y+48	; 0x30
    be46:	6b 8d       	ldd	r22, Y+27	; 0x1b
    be48:	7c 8d       	ldd	r23, Y+28	; 0x1c
    be4a:	f6 01       	movw	r30, r12
    be4c:	80 81       	ld	r24, Z
    be4e:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    be52:	f6 01       	movw	r30, r12
    be54:	65 8b       	std	Z+21, r22	; 0x15
    be56:	76 8b       	std	Z+22, r23	; 0x16
    be58:	87 8b       	std	Z+23, r24	; 0x17
    be5a:	90 8f       	std	Z+24, r25	; 0x18
    be5c:	02 c0       	rjmp	.+4      	; 0xbe62 <f_chdir+0x96>
    be5e:	05 e0       	ldi	r16, 0x05	; 5
    be60:	10 e0       	ldi	r17, 0x00	; 0
    be62:	c7 01       	movw	r24, r14
    be64:	0e 94 ec 68 	call	0xd1d8	; 0xd1d8 <ff_memfree>
    be68:	04 30       	cpi	r16, 0x04	; 4
    be6a:	11 05       	cpc	r17, r1
    be6c:	29 f4       	brne	.+10     	; 0xbe78 <f_chdir+0xac>
    be6e:	85 e0       	ldi	r24, 0x05	; 5
    be70:	01 c0       	rjmp	.+2      	; 0xbe74 <f_chdir+0xa8>
    be72:	81 e1       	ldi	r24, 0x11	; 17
    be74:	90 e0       	ldi	r25, 0x00	; 0
    be76:	01 c0       	rjmp	.+2      	; 0xbe7a <f_chdir+0xae>
    be78:	c8 01       	movw	r24, r16
    be7a:	e2 96       	adiw	r28, 0x32	; 50
    be7c:	e8 e0       	ldi	r30, 0x08	; 8
    be7e:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000be82 <f_getcwd>:
    be82:	a8 e4       	ldi	r26, 0x48	; 72
    be84:	b1 e0       	ldi	r27, 0x01	; 1
    be86:	e7 e4       	ldi	r30, 0x47	; 71
    be88:	ff e5       	ldi	r31, 0x5F	; 95
    be8a:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    be8e:	c9 5b       	subi	r28, 0xB9	; 185
    be90:	de 4f       	sbci	r29, 0xFE	; 254
    be92:	99 83       	std	Y+1, r25	; 0x01
    be94:	88 83       	st	Y, r24
    be96:	c7 54       	subi	r28, 0x47	; 71
    be98:	d1 40       	sbci	r29, 0x01	; 1
    be9a:	4b 01       	movw	r8, r22
    be9c:	7c 01       	movw	r14, r24
    be9e:	fc 01       	movw	r30, r24
    bea0:	10 82       	st	Z, r1
    bea2:	40 e0       	ldi	r20, 0x00	; 0
    bea4:	be 01       	movw	r22, r28
    bea6:	6b 5b       	subi	r22, 0xBB	; 187
    bea8:	7e 4f       	sbci	r23, 0xFE	; 254
    beaa:	ce 01       	movw	r24, r28
    beac:	89 5b       	subi	r24, 0xB9	; 185
    beae:	9e 4f       	sbci	r25, 0xFE	; 254
    beb0:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    beb4:	1c 01       	movw	r2, r24
    beb6:	89 2b       	or	r24, r25
    beb8:	09 f0       	breq	.+2      	; 0xbebc <f_getcwd+0x3a>
    beba:	03 c1       	rjmp	.+518    	; 0xc0c2 <f_getcwd+0x240>
    bebc:	cb 5b       	subi	r28, 0xBB	; 187
    bebe:	de 4f       	sbci	r29, 0xFE	; 254
    bec0:	88 81       	ld	r24, Y
    bec2:	99 81       	ldd	r25, Y+1	; 0x01
    bec4:	c5 54       	subi	r28, 0x45	; 69
    bec6:	d1 40       	sbci	r29, 0x01	; 1
    bec8:	c9 5e       	subi	r28, 0xE9	; 233
    beca:	de 4f       	sbci	r29, 0xFE	; 254
    becc:	99 83       	std	Y+1, r25	; 0x01
    bece:	88 83       	st	Y, r24
    bed0:	c7 51       	subi	r28, 0x17	; 23
    bed2:	d1 40       	sbci	r29, 0x01	; 1
    bed4:	80 e0       	ldi	r24, 0x00	; 0
    bed6:	92 e0       	ldi	r25, 0x02	; 2
    bed8:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <ff_memalloc>
    bedc:	5c 01       	movw	r10, r24
    bede:	00 97       	sbiw	r24, 0x00	; 0
    bee0:	09 f4       	brne	.+2      	; 0xbee4 <f_getcwd+0x62>
    bee2:	f3 c0       	rjmp	.+486    	; 0xc0ca <f_getcwd+0x248>
    bee4:	cb 5b       	subi	r28, 0xBB	; 187
    bee6:	de 4f       	sbci	r29, 0xFE	; 254
    bee8:	e8 81       	ld	r30, Y
    beea:	f9 81       	ldd	r31, Y+1	; 0x01
    beec:	c5 54       	subi	r28, 0x45	; 69
    beee:	d1 40       	sbci	r29, 0x01	; 1
    bef0:	94 87       	std	Z+12, r25	; 0x0c
    bef2:	83 87       	std	Z+11, r24	; 0x0b
    bef4:	85 89       	ldd	r24, Z+21	; 0x15
    bef6:	96 89       	ldd	r25, Z+22	; 0x16
    bef8:	a7 89       	ldd	r26, Z+23	; 0x17
    befa:	b0 8d       	ldd	r27, Z+24	; 0x18
    befc:	c3 5e       	subi	r28, 0xE3	; 227
    befe:	de 4f       	sbci	r29, 0xFE	; 254
    bf00:	88 83       	st	Y, r24
    bf02:	99 83       	std	Y+1, r25	; 0x01
    bf04:	aa 83       	std	Y+2, r26	; 0x02
    bf06:	bb 83       	std	Y+3, r27	; 0x03
    bf08:	cd 51       	subi	r28, 0x1D	; 29
    bf0a:	d1 40       	sbci	r29, 0x01	; 1
    bf0c:	84 01       	movw	r16, r8
    bf0e:	ce 01       	movw	r24, r28
    bf10:	01 96       	adiw	r24, 0x01	; 1
    bf12:	6c 01       	movw	r12, r24
    bf14:	c3 5e       	subi	r28, 0xE3	; 227
    bf16:	de 4f       	sbci	r29, 0xFE	; 254
    bf18:	48 80       	ld	r4, Y
    bf1a:	59 80       	ldd	r5, Y+1	; 0x01
    bf1c:	6a 80       	ldd	r6, Y+2	; 0x02
    bf1e:	7b 80       	ldd	r7, Y+3	; 0x03
    bf20:	cd 51       	subi	r28, 0x1D	; 29
    bf22:	d1 40       	sbci	r29, 0x01	; 1
    bf24:	41 14       	cp	r4, r1
    bf26:	51 04       	cpc	r5, r1
    bf28:	61 04       	cpc	r6, r1
    bf2a:	71 04       	cpc	r7, r1
    bf2c:	09 f4       	brne	.+2      	; 0xbf30 <f_getcwd+0xae>
    bf2e:	a3 c0       	rjmp	.+326    	; 0xc076 <f_getcwd+0x1f4>
    bf30:	40 e2       	ldi	r20, 0x20	; 32
    bf32:	50 e0       	ldi	r21, 0x00	; 0
    bf34:	60 e0       	ldi	r22, 0x00	; 0
    bf36:	70 e0       	ldi	r23, 0x00	; 0
    bf38:	ce 01       	movw	r24, r28
    bf3a:	89 5e       	subi	r24, 0xE9	; 233
    bf3c:	9e 4f       	sbci	r25, 0xFE	; 254
    bf3e:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <dir_sdi>
    bf42:	00 97       	sbiw	r24, 0x00	; 0
    bf44:	09 f0       	breq	.+2      	; 0xbf48 <f_getcwd+0xc6>
    bf46:	c6 c0       	rjmp	.+396    	; 0xc0d4 <f_getcwd+0x252>
    bf48:	c3 5d       	subi	r28, 0xD3	; 211
    bf4a:	de 4f       	sbci	r29, 0xFE	; 254
    bf4c:	48 81       	ld	r20, Y
    bf4e:	59 81       	ldd	r21, Y+1	; 0x01
    bf50:	6a 81       	ldd	r22, Y+2	; 0x02
    bf52:	7b 81       	ldd	r23, Y+3	; 0x03
    bf54:	cd 52       	subi	r28, 0x2D	; 45
    bf56:	d1 40       	sbci	r29, 0x01	; 1
    bf58:	cb 5b       	subi	r28, 0xBB	; 187
    bf5a:	de 4f       	sbci	r29, 0xFE	; 254
    bf5c:	88 81       	ld	r24, Y
    bf5e:	99 81       	ldd	r25, Y+1	; 0x01
    bf60:	c5 54       	subi	r28, 0x45	; 69
    bf62:	d1 40       	sbci	r29, 0x01	; 1
    bf64:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    bf68:	00 97       	sbiw	r24, 0x00	; 0
    bf6a:	09 f0       	breq	.+2      	; 0xbf6e <f_getcwd+0xec>
    bf6c:	b3 c0       	rjmp	.+358    	; 0xc0d4 <f_getcwd+0x252>
    bf6e:	cf 5c       	subi	r28, 0xCF	; 207
    bf70:	de 4f       	sbci	r29, 0xFE	; 254
    bf72:	68 81       	ld	r22, Y
    bf74:	79 81       	ldd	r23, Y+1	; 0x01
    bf76:	c1 53       	subi	r28, 0x31	; 49
    bf78:	d1 40       	sbci	r29, 0x01	; 1
    bf7a:	cb 5b       	subi	r28, 0xBB	; 187
    bf7c:	de 4f       	sbci	r29, 0xFE	; 254
    bf7e:	e8 81       	ld	r30, Y
    bf80:	f9 81       	ldd	r31, Y+1	; 0x01
    bf82:	c5 54       	subi	r28, 0x45	; 69
    bf84:	d1 40       	sbci	r29, 0x01	; 1
    bf86:	80 81       	ld	r24, Z
    bf88:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    bf8c:	c3 5e       	subi	r28, 0xE3	; 227
    bf8e:	de 4f       	sbci	r29, 0xFE	; 254
    bf90:	68 83       	st	Y, r22
    bf92:	79 83       	std	Y+1, r23	; 0x01
    bf94:	8a 83       	std	Y+2, r24	; 0x02
    bf96:	9b 83       	std	Y+3, r25	; 0x03
    bf98:	cd 51       	subi	r28, 0x1D	; 29
    bf9a:	d1 40       	sbci	r29, 0x01	; 1
    bf9c:	40 e0       	ldi	r20, 0x00	; 0
    bf9e:	50 e0       	ldi	r21, 0x00	; 0
    bfa0:	ba 01       	movw	r22, r20
    bfa2:	ce 01       	movw	r24, r28
    bfa4:	89 5e       	subi	r24, 0xE9	; 233
    bfa6:	9e 4f       	sbci	r25, 0xFE	; 254
    bfa8:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <dir_sdi>
    bfac:	00 97       	sbiw	r24, 0x00	; 0
    bfae:	09 f0       	breq	.+2      	; 0xbfb2 <f_getcwd+0x130>
    bfb0:	91 c0       	rjmp	.+290    	; 0xc0d4 <f_getcwd+0x252>
    bfb2:	60 e0       	ldi	r22, 0x00	; 0
    bfb4:	70 e0       	ldi	r23, 0x00	; 0
    bfb6:	ce 01       	movw	r24, r28
    bfb8:	89 5e       	subi	r24, 0xE9	; 233
    bfba:	9e 4f       	sbci	r25, 0xFE	; 254
    bfbc:	0e 94 8e 53 	call	0xa71c	; 0xa71c <dir_read>
    bfc0:	00 97       	sbiw	r24, 0x00	; 0
    bfc2:	09 f0       	breq	.+2      	; 0xbfc6 <f_getcwd+0x144>
    bfc4:	89 c0       	rjmp	.+274    	; 0xc0d8 <f_getcwd+0x256>
    bfc6:	cf 5c       	subi	r28, 0xCF	; 207
    bfc8:	de 4f       	sbci	r29, 0xFE	; 254
    bfca:	68 81       	ld	r22, Y
    bfcc:	79 81       	ldd	r23, Y+1	; 0x01
    bfce:	c1 53       	subi	r28, 0x31	; 49
    bfd0:	d1 40       	sbci	r29, 0x01	; 1
    bfd2:	cb 5b       	subi	r28, 0xBB	; 187
    bfd4:	de 4f       	sbci	r29, 0xFE	; 254
    bfd6:	e8 81       	ld	r30, Y
    bfd8:	f9 81       	ldd	r31, Y+1	; 0x01
    bfda:	c5 54       	subi	r28, 0x45	; 69
    bfdc:	d1 40       	sbci	r29, 0x01	; 1
    bfde:	80 81       	ld	r24, Z
    bfe0:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    bfe4:	46 16       	cp	r4, r22
    bfe6:	57 06       	cpc	r5, r23
    bfe8:	68 06       	cpc	r6, r24
    bfea:	79 06       	cpc	r7, r25
    bfec:	41 f4       	brne	.+16     	; 0xbffe <f_getcwd+0x17c>
    bfee:	b6 01       	movw	r22, r12
    bff0:	ce 01       	movw	r24, r28
    bff2:	89 5e       	subi	r24, 0xE9	; 233
    bff4:	9e 4f       	sbci	r25, 0xFE	; 254
    bff6:	0e 94 af 48 	call	0x915e	; 0x915e <get_fileinfo>
    bffa:	f6 01       	movw	r30, r12
    bffc:	0a c0       	rjmp	.+20     	; 0xc012 <f_getcwd+0x190>
    bffe:	60 e0       	ldi	r22, 0x00	; 0
    c000:	70 e0       	ldi	r23, 0x00	; 0
    c002:	ce 01       	movw	r24, r28
    c004:	89 5e       	subi	r24, 0xE9	; 233
    c006:	9e 4f       	sbci	r25, 0xFE	; 254
    c008:	0e 94 6d 52 	call	0xa4da	; 0xa4da <dir_next>
    c00c:	00 97       	sbiw	r24, 0x00	; 0
    c00e:	89 f2       	breq	.-94     	; 0xbfb2 <f_getcwd+0x130>
    c010:	63 c0       	rjmp	.+198    	; 0xc0d8 <f_getcwd+0x256>
    c012:	cf 01       	movw	r24, r30
    c014:	8c 19       	sub	r24, r12
    c016:	9d 09       	sbc	r25, r13
    c018:	31 96       	adiw	r30, 0x01	; 1
    c01a:	25 89       	ldd	r18, Z+21	; 0x15
    c01c:	21 11       	cpse	r18, r1
    c01e:	f9 cf       	rjmp	.-14     	; 0xc012 <f_getcwd+0x190>
    c020:	9c 01       	movw	r18, r24
    c022:	2f 5f       	subi	r18, 0xFF	; 255
    c024:	3f 4f       	sbci	r19, 0xFF	; 255
    c026:	02 17       	cp	r16, r18
    c028:	13 07       	cpc	r17, r19
    c02a:	08 f4       	brcc	.+2      	; 0xc02e <f_getcwd+0x1ac>
    c02c:	51 c0       	rjmp	.+162    	; 0xc0d0 <f_getcwd+0x24e>
    c02e:	f6 01       	movw	r30, r12
    c030:	e8 0f       	add	r30, r24
    c032:	f9 1f       	adc	r31, r25
    c034:	98 01       	movw	r18, r16
    c036:	ce 16       	cp	r12, r30
    c038:	df 06       	cpc	r13, r31
    c03a:	71 f0       	breq	.+28     	; 0xc058 <f_getcwd+0x1d6>
    c03c:	21 50       	subi	r18, 0x01	; 1
    c03e:	31 09       	sbc	r19, r1
    c040:	45 89       	ldd	r20, Z+21	; 0x15
    c042:	c9 5b       	subi	r28, 0xB9	; 185
    c044:	de 4f       	sbci	r29, 0xFE	; 254
    c046:	a8 81       	ld	r26, Y
    c048:	b9 81       	ldd	r27, Y+1	; 0x01
    c04a:	c7 54       	subi	r28, 0x47	; 71
    c04c:	d1 40       	sbci	r29, 0x01	; 1
    c04e:	a2 0f       	add	r26, r18
    c050:	b3 1f       	adc	r27, r19
    c052:	4c 93       	st	X, r20
    c054:	31 97       	sbiw	r30, 0x01	; 1
    c056:	ef cf       	rjmp	.-34     	; 0xc036 <f_getcwd+0x1b4>
    c058:	80 95       	com	r24
    c05a:	90 95       	com	r25
    c05c:	08 0f       	add	r16, r24
    c05e:	19 1f       	adc	r17, r25
    c060:	c9 5b       	subi	r28, 0xB9	; 185
    c062:	de 4f       	sbci	r29, 0xFE	; 254
    c064:	e8 81       	ld	r30, Y
    c066:	f9 81       	ldd	r31, Y+1	; 0x01
    c068:	c7 54       	subi	r28, 0x47	; 71
    c06a:	d1 40       	sbci	r29, 0x01	; 1
    c06c:	e0 0f       	add	r30, r16
    c06e:	f1 1f       	adc	r31, r17
    c070:	9f e2       	ldi	r25, 0x2F	; 47
    c072:	90 83       	st	Z, r25
    c074:	4f cf       	rjmp	.-354    	; 0xbf14 <f_getcwd+0x92>
    c076:	08 15       	cp	r16, r8
    c078:	19 05       	cpc	r17, r9
    c07a:	61 f4       	brne	.+24     	; 0xc094 <f_getcwd+0x212>
    c07c:	01 50       	subi	r16, 0x01	; 1
    c07e:	11 09       	sbc	r17, r1
    c080:	c9 5b       	subi	r28, 0xB9	; 185
    c082:	de 4f       	sbci	r29, 0xFE	; 254
    c084:	e8 81       	ld	r30, Y
    c086:	f9 81       	ldd	r31, Y+1	; 0x01
    c088:	c7 54       	subi	r28, 0x47	; 71
    c08a:	d1 40       	sbci	r29, 0x01	; 1
    c08c:	e0 0f       	add	r30, r16
    c08e:	f1 1f       	adc	r31, r17
    c090:	8f e2       	ldi	r24, 0x2F	; 47
    c092:	80 83       	st	Z, r24
    c094:	ef ef       	ldi	r30, 0xFF	; 255
    c096:	ee 1a       	sub	r14, r30
    c098:	fe 0a       	sbc	r15, r30
    c09a:	c9 5b       	subi	r28, 0xB9	; 185
    c09c:	de 4f       	sbci	r29, 0xFE	; 254
    c09e:	e8 81       	ld	r30, Y
    c0a0:	f9 81       	ldd	r31, Y+1	; 0x01
    c0a2:	c7 54       	subi	r28, 0x47	; 71
    c0a4:	d1 40       	sbci	r29, 0x01	; 1
    c0a6:	e0 0f       	add	r30, r16
    c0a8:	f1 1f       	adc	r31, r17
    c0aa:	80 81       	ld	r24, Z
    c0ac:	f7 01       	movw	r30, r14
    c0ae:	31 97       	sbiw	r30, 0x01	; 1
    c0b0:	80 83       	st	Z, r24
    c0b2:	0f 5f       	subi	r16, 0xFF	; 255
    c0b4:	1f 4f       	sbci	r17, 0xFF	; 255
    c0b6:	08 15       	cp	r16, r8
    c0b8:	19 05       	cpc	r17, r9
    c0ba:	60 f3       	brcs	.-40     	; 0xc094 <f_getcwd+0x212>
    c0bc:	c5 01       	movw	r24, r10
    c0be:	0e 94 ec 68 	call	0xd1d8	; 0xd1d8 <ff_memfree>
    c0c2:	f7 01       	movw	r30, r14
    c0c4:	10 82       	st	Z, r1
    c0c6:	c1 01       	movw	r24, r2
    c0c8:	0d c0       	rjmp	.+26     	; 0xc0e4 <f_getcwd+0x262>
    c0ca:	81 e1       	ldi	r24, 0x11	; 17
    c0cc:	90 e0       	ldi	r25, 0x00	; 0
    c0ce:	0a c0       	rjmp	.+20     	; 0xc0e4 <f_getcwd+0x262>
    c0d0:	81 e1       	ldi	r24, 0x11	; 17
    c0d2:	90 e0       	ldi	r25, 0x00	; 0
    c0d4:	1c 01       	movw	r2, r24
    c0d6:	f2 cf       	rjmp	.-28     	; 0xc0bc <f_getcwd+0x23a>
    c0d8:	84 30       	cpi	r24, 0x04	; 4
    c0da:	91 05       	cpc	r25, r1
    c0dc:	d9 f7       	brne	.-10     	; 0xc0d4 <f_getcwd+0x252>
    c0de:	82 e0       	ldi	r24, 0x02	; 2
    c0e0:	90 e0       	ldi	r25, 0x00	; 0
    c0e2:	f8 cf       	rjmp	.-16     	; 0xc0d4 <f_getcwd+0x252>
    c0e4:	c8 5b       	subi	r28, 0xB8	; 184
    c0e6:	de 4f       	sbci	r29, 0xFE	; 254
    c0e8:	e2 e1       	ldi	r30, 0x12	; 18
    c0ea:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000c0ee <f_lseek>:
    c0ee:	aa e0       	ldi	r26, 0x0A	; 10
    c0f0:	b0 e0       	ldi	r27, 0x00	; 0
    c0f2:	ed e7       	ldi	r30, 0x7D	; 125
    c0f4:	f0 e6       	ldi	r31, 0x60	; 96
    c0f6:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    c0fa:	1c 01       	movw	r2, r24
    c0fc:	6a 01       	movw	r12, r20
    c0fe:	7b 01       	movw	r14, r22
    c100:	be 01       	movw	r22, r28
    c102:	6f 5f       	subi	r22, 0xFF	; 255
    c104:	7f 4f       	sbci	r23, 0xFF	; 255
    c106:	0e 94 83 48 	call	0x9106	; 0x9106 <validate>
    c10a:	00 97       	sbiw	r24, 0x00	; 0
    c10c:	09 f0       	breq	.+2      	; 0xc110 <f_lseek+0x22>
    c10e:	a6 c2       	rjmp	.+1356   	; 0xc65c <f_lseek+0x56e>
    c110:	f1 01       	movw	r30, r2
    c112:	87 85       	ldd	r24, Z+15	; 0x0f
    c114:	90 e0       	ldi	r25, 0x00	; 0
    c116:	00 97       	sbiw	r24, 0x00	; 0
    c118:	09 f0       	breq	.+2      	; 0xc11c <f_lseek+0x2e>
    c11a:	a0 c2       	rjmp	.+1344   	; 0xc65c <f_lseek+0x56e>
    c11c:	22 a1       	ldd	r18, Z+34	; 0x22
    c11e:	33 a1       	ldd	r19, Z+35	; 0x23
    c120:	21 15       	cp	r18, r1
    c122:	31 05       	cpc	r19, r1
    c124:	09 f4       	brne	.+2      	; 0xc128 <f_lseek+0x3a>
    c126:	2d c1       	rjmp	.+602    	; 0xc382 <f_lseek+0x294>
    c128:	ff ef       	ldi	r31, 0xFF	; 255
    c12a:	cf 16       	cp	r12, r31
    c12c:	df 06       	cpc	r13, r31
    c12e:	ef 06       	cpc	r14, r31
    c130:	ff 06       	cpc	r15, r31
    c132:	09 f0       	breq	.+2      	; 0xc136 <f_lseek+0x48>
    c134:	9a c0       	rjmp	.+308    	; 0xc26a <f_lseek+0x17c>
    c136:	89 01       	movw	r16, r18
    c138:	0c 5f       	subi	r16, 0xFC	; 252
    c13a:	1f 4f       	sbci	r17, 0xFF	; 255
    c13c:	d9 01       	movw	r26, r18
    c13e:	4d 91       	ld	r20, X+
    c140:	5d 91       	ld	r21, X+
    c142:	6d 91       	ld	r22, X+
    c144:	7c 91       	ld	r23, X
    c146:	4f 83       	std	Y+7, r20	; 0x07
    c148:	58 87       	std	Y+8, r21	; 0x08
    c14a:	69 87       	std	Y+9, r22	; 0x09
    c14c:	7a 87       	std	Y+10, r23	; 0x0a
    c14e:	f1 01       	movw	r30, r2
    c150:	86 80       	ldd	r8, Z+6	; 0x06
    c152:	97 80       	ldd	r9, Z+7	; 0x07
    c154:	a0 84       	ldd	r10, Z+8	; 0x08
    c156:	b1 84       	ldd	r11, Z+9	; 0x09
    c158:	52 e0       	ldi	r21, 0x02	; 2
    c15a:	c5 2e       	mov	r12, r21
    c15c:	d1 2c       	mov	r13, r1
    c15e:	e1 2c       	mov	r14, r1
    c160:	f1 2c       	mov	r15, r1
    c162:	81 14       	cp	r8, r1
    c164:	91 04       	cpc	r9, r1
    c166:	a1 04       	cpc	r10, r1
    c168:	b1 04       	cpc	r11, r1
    c16a:	09 f4       	brne	.+2      	; 0xc16e <f_lseek+0x80>
    c16c:	65 c0       	rjmp	.+202    	; 0xc238 <f_lseek+0x14a>
    c16e:	24 01       	movw	r4, r8
    c170:	35 01       	movw	r6, r10
    c172:	1b 82       	std	Y+3, r1	; 0x03
    c174:	1c 82       	std	Y+4, r1	; 0x04
    c176:	1d 82       	std	Y+5, r1	; 0x05
    c178:	1e 82       	std	Y+6, r1	; 0x06
    c17a:	2b 81       	ldd	r18, Y+3	; 0x03
    c17c:	3c 81       	ldd	r19, Y+4	; 0x04
    c17e:	4d 81       	ldd	r20, Y+5	; 0x05
    c180:	5e 81       	ldd	r21, Y+6	; 0x06
    c182:	2f 5f       	subi	r18, 0xFF	; 255
    c184:	3f 4f       	sbci	r19, 0xFF	; 255
    c186:	4f 4f       	sbci	r20, 0xFF	; 255
    c188:	5f 4f       	sbci	r21, 0xFF	; 255
    c18a:	2b 83       	std	Y+3, r18	; 0x03
    c18c:	3c 83       	std	Y+4, r19	; 0x04
    c18e:	4d 83       	std	Y+5, r20	; 0x05
    c190:	5e 83       	std	Y+6, r21	; 0x06
    c192:	b3 01       	movw	r22, r6
    c194:	a2 01       	movw	r20, r4
    c196:	d1 01       	movw	r26, r2
    c198:	8d 91       	ld	r24, X+
    c19a:	9c 91       	ld	r25, X
    c19c:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <get_fat.isra.9>
    c1a0:	62 30       	cpi	r22, 0x02	; 2
    c1a2:	71 05       	cpc	r23, r1
    c1a4:	81 05       	cpc	r24, r1
    c1a6:	91 05       	cpc	r25, r1
    c1a8:	10 f4       	brcc	.+4      	; 0xc1ae <f_lseek+0xc0>
    c1aa:	82 e0       	ldi	r24, 0x02	; 2
    c1ac:	07 c0       	rjmp	.+14     	; 0xc1bc <f_lseek+0xce>
    c1ae:	6f 3f       	cpi	r22, 0xFF	; 255
    c1b0:	ff ef       	ldi	r31, 0xFF	; 255
    c1b2:	7f 07       	cpc	r23, r31
    c1b4:	8f 07       	cpc	r24, r31
    c1b6:	9f 07       	cpc	r25, r31
    c1b8:	29 f4       	brne	.+10     	; 0xc1c4 <f_lseek+0xd6>
    c1ba:	81 e0       	ldi	r24, 0x01	; 1
    c1bc:	f1 01       	movw	r30, r2
    c1be:	87 87       	std	Z+15, r24	; 0x0f
    c1c0:	90 e0       	ldi	r25, 0x00	; 0
    c1c2:	4c c2       	rjmp	.+1176   	; 0xc65c <f_lseek+0x56e>
    c1c4:	a3 01       	movw	r20, r6
    c1c6:	92 01       	movw	r18, r4
    c1c8:	2f 5f       	subi	r18, 0xFF	; 255
    c1ca:	3f 4f       	sbci	r19, 0xFF	; 255
    c1cc:	4f 4f       	sbci	r20, 0xFF	; 255
    c1ce:	5f 4f       	sbci	r21, 0xFF	; 255
    c1d0:	2b 01       	movw	r4, r22
    c1d2:	3c 01       	movw	r6, r24
    c1d4:	62 17       	cp	r22, r18
    c1d6:	73 07       	cpc	r23, r19
    c1d8:	84 07       	cpc	r24, r20
    c1da:	95 07       	cpc	r25, r21
    c1dc:	71 f2       	breq	.-100    	; 0xc17a <f_lseek+0x8c>
    c1de:	f2 e0       	ldi	r31, 0x02	; 2
    c1e0:	cf 0e       	add	r12, r31
    c1e2:	d1 1c       	adc	r13, r1
    c1e4:	e1 1c       	adc	r14, r1
    c1e6:	f1 1c       	adc	r15, r1
    c1e8:	2f 81       	ldd	r18, Y+7	; 0x07
    c1ea:	38 85       	ldd	r19, Y+8	; 0x08
    c1ec:	49 85       	ldd	r20, Y+9	; 0x09
    c1ee:	5a 85       	ldd	r21, Y+10	; 0x0a
    c1f0:	2c 15       	cp	r18, r12
    c1f2:	3d 05       	cpc	r19, r13
    c1f4:	4e 05       	cpc	r20, r14
    c1f6:	5f 05       	cpc	r21, r15
    c1f8:	88 f0       	brcs	.+34     	; 0xc21c <f_lseek+0x12e>
    c1fa:	2b 81       	ldd	r18, Y+3	; 0x03
    c1fc:	3c 81       	ldd	r19, Y+4	; 0x04
    c1fe:	4d 81       	ldd	r20, Y+5	; 0x05
    c200:	5e 81       	ldd	r21, Y+6	; 0x06
    c202:	d8 01       	movw	r26, r16
    c204:	2d 93       	st	X+, r18
    c206:	3d 93       	st	X+, r19
    c208:	4d 93       	st	X+, r20
    c20a:	5c 93       	st	X, r21
    c20c:	13 97       	sbiw	r26, 0x03	; 3
    c20e:	f8 01       	movw	r30, r16
    c210:	84 82       	std	Z+4, r8	; 0x04
    c212:	95 82       	std	Z+5, r9	; 0x05
    c214:	a6 82       	std	Z+6, r10	; 0x06
    c216:	b7 82       	std	Z+7, r11	; 0x07
    c218:	08 5f       	subi	r16, 0xF8	; 248
    c21a:	1f 4f       	sbci	r17, 0xFF	; 255
    c21c:	e9 81       	ldd	r30, Y+1	; 0x01
    c21e:	fa 81       	ldd	r31, Y+2	; 0x02
    c220:	81 8c       	ldd	r8, Z+25	; 0x19
    c222:	92 8c       	ldd	r9, Z+26	; 0x1a
    c224:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c226:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c228:	68 15       	cp	r22, r8
    c22a:	79 05       	cpc	r23, r9
    c22c:	8a 05       	cpc	r24, r10
    c22e:	9b 05       	cpc	r25, r11
    c230:	18 f4       	brcc	.+6      	; 0xc238 <f_lseek+0x14a>
    c232:	4b 01       	movw	r8, r22
    c234:	5c 01       	movw	r10, r24
    c236:	9b cf       	rjmp	.-202    	; 0xc16e <f_lseek+0x80>
    c238:	f1 01       	movw	r30, r2
    c23a:	a2 a1       	ldd	r26, Z+34	; 0x22
    c23c:	b3 a1       	ldd	r27, Z+35	; 0x23
    c23e:	cd 92       	st	X+, r12
    c240:	dd 92       	st	X+, r13
    c242:	ed 92       	st	X+, r14
    c244:	fc 92       	st	X, r15
    c246:	13 97       	sbiw	r26, 0x03	; 3
    c248:	2f 81       	ldd	r18, Y+7	; 0x07
    c24a:	38 85       	ldd	r19, Y+8	; 0x08
    c24c:	49 85       	ldd	r20, Y+9	; 0x09
    c24e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c250:	2c 15       	cp	r18, r12
    c252:	3d 05       	cpc	r19, r13
    c254:	4e 05       	cpc	r20, r14
    c256:	5f 05       	cpc	r21, r15
    c258:	08 f4       	brcc	.+2      	; 0xc25c <f_lseek+0x16e>
    c25a:	f7 c1       	rjmp	.+1006   	; 0xc64a <f_lseek+0x55c>
    c25c:	d8 01       	movw	r26, r16
    c25e:	1d 92       	st	X+, r1
    c260:	1d 92       	st	X+, r1
    c262:	1d 92       	st	X+, r1
    c264:	1c 92       	st	X, r1
    c266:	13 97       	sbiw	r26, 0x03	; 3
    c268:	ee c1       	rjmp	.+988    	; 0xc646 <f_lseek+0x558>
    c26a:	f1 01       	movw	r30, r2
    c26c:	82 85       	ldd	r24, Z+10	; 0x0a
    c26e:	93 85       	ldd	r25, Z+11	; 0x0b
    c270:	a4 85       	ldd	r26, Z+12	; 0x0c
    c272:	b5 85       	ldd	r27, Z+13	; 0x0d
    c274:	46 01       	movw	r8, r12
    c276:	57 01       	movw	r10, r14
    c278:	8c 15       	cp	r24, r12
    c27a:	9d 05       	cpc	r25, r13
    c27c:	ae 05       	cpc	r26, r14
    c27e:	bf 05       	cpc	r27, r15
    c280:	10 f4       	brcc	.+4      	; 0xc286 <f_lseek+0x198>
    c282:	4c 01       	movw	r8, r24
    c284:	5d 01       	movw	r10, r26
    c286:	f1 01       	movw	r30, r2
    c288:	80 8a       	std	Z+16, r8	; 0x10
    c28a:	91 8a       	std	Z+17, r9	; 0x11
    c28c:	a2 8a       	std	Z+18, r10	; 0x12
    c28e:	b3 8a       	std	Z+19, r11	; 0x13
    c290:	81 14       	cp	r8, r1
    c292:	91 04       	cpc	r9, r1
    c294:	a1 04       	cpc	r10, r1
    c296:	b1 04       	cpc	r11, r1
    c298:	09 f4       	brne	.+2      	; 0xc29c <f_lseek+0x1ae>
    c29a:	d5 c1       	rjmp	.+938    	; 0xc646 <f_lseek+0x558>
    c29c:	24 01       	movw	r4, r8
    c29e:	35 01       	movw	r6, r10
    c2a0:	f1 e0       	ldi	r31, 0x01	; 1
    c2a2:	4f 1a       	sub	r4, r31
    c2a4:	51 08       	sbc	r5, r1
    c2a6:	61 08       	sbc	r6, r1
    c2a8:	71 08       	sbc	r7, r1
    c2aa:	b3 01       	movw	r22, r6
    c2ac:	a2 01       	movw	r20, r4
    c2ae:	c1 01       	movw	r24, r2
    c2b0:	0e 94 0c 48 	call	0x9018	; 0x9018 <clmt_clust>
    c2b4:	ab 01       	movw	r20, r22
    c2b6:	bc 01       	movw	r22, r24
    c2b8:	f1 01       	movw	r30, r2
    c2ba:	44 8b       	std	Z+20, r20	; 0x14
    c2bc:	55 8b       	std	Z+21, r21	; 0x15
    c2be:	66 8b       	std	Z+22, r22	; 0x16
    c2c0:	77 8b       	std	Z+23, r23	; 0x17
    c2c2:	e9 80       	ldd	r14, Y+1	; 0x01
    c2c4:	fa 80       	ldd	r15, Y+2	; 0x02
    c2c6:	c7 01       	movw	r24, r14
    c2c8:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    c2cc:	61 15       	cp	r22, r1
    c2ce:	71 05       	cpc	r23, r1
    c2d0:	81 05       	cpc	r24, r1
    c2d2:	91 05       	cpc	r25, r1
    c2d4:	09 f4       	brne	.+2      	; 0xc2d8 <f_lseek+0x1ea>
    c2d6:	69 cf       	rjmp	.-302    	; 0xc1aa <f_lseek+0xbc>
    c2d8:	95 01       	movw	r18, r10
    c2da:	84 01       	movw	r16, r8
    c2dc:	11 70       	andi	r17, 0x01	; 1
    c2de:	22 27       	eor	r18, r18
    c2e0:	33 27       	eor	r19, r19
    c2e2:	01 15       	cp	r16, r1
    c2e4:	11 05       	cpc	r17, r1
    c2e6:	21 05       	cpc	r18, r1
    c2e8:	31 05       	cpc	r19, r1
    c2ea:	09 f4       	brne	.+2      	; 0xc2ee <f_lseek+0x200>
    c2ec:	ac c1       	rjmp	.+856    	; 0xc646 <f_lseek+0x558>
    c2ee:	f7 01       	movw	r30, r14
    c2f0:	81 84       	ldd	r8, Z+9	; 0x09
    c2f2:	92 84       	ldd	r9, Z+10	; 0x0a
    c2f4:	f1 e0       	ldi	r31, 0x01	; 1
    c2f6:	8f 1a       	sub	r8, r31
    c2f8:	91 08       	sbc	r9, r1
    c2fa:	a1 2c       	mov	r10, r1
    c2fc:	b1 2c       	mov	r11, r1
    c2fe:	49 e0       	ldi	r20, 0x09	; 9
    c300:	76 94       	lsr	r7
    c302:	67 94       	ror	r6
    c304:	57 94       	ror	r5
    c306:	47 94       	ror	r4
    c308:	4a 95       	dec	r20
    c30a:	d1 f7       	brne	.-12     	; 0xc300 <f_lseek+0x212>
    c30c:	48 20       	and	r4, r8
    c30e:	59 20       	and	r5, r9
    c310:	6a 20       	and	r6, r10
    c312:	7b 20       	and	r7, r11
    c314:	53 01       	movw	r10, r6
    c316:	42 01       	movw	r8, r4
    c318:	86 0e       	add	r8, r22
    c31a:	97 1e       	adc	r9, r23
    c31c:	a8 1e       	adc	r10, r24
    c31e:	b9 1e       	adc	r11, r25
    c320:	f1 01       	movw	r30, r2
    c322:	20 8d       	ldd	r18, Z+24	; 0x18
    c324:	31 8d       	ldd	r19, Z+25	; 0x19
    c326:	42 8d       	ldd	r20, Z+26	; 0x1a
    c328:	53 8d       	ldd	r21, Z+27	; 0x1b
    c32a:	82 16       	cp	r8, r18
    c32c:	93 06       	cpc	r9, r19
    c32e:	a4 06       	cpc	r10, r20
    c330:	b5 06       	cpc	r11, r21
    c332:	09 f4       	brne	.+2      	; 0xc336 <f_lseek+0x248>
    c334:	88 c1       	rjmp	.+784    	; 0xc646 <f_lseek+0x558>
    c336:	86 85       	ldd	r24, Z+14	; 0x0e
    c338:	b1 01       	movw	r22, r2
    c33a:	6c 5d       	subi	r22, 0xDC	; 220
    c33c:	7f 4f       	sbci	r23, 0xFF	; 255
    c33e:	6b 01       	movw	r12, r22
    c340:	87 ff       	sbrs	r24, 7
    c342:	0d c0       	rjmp	.+26     	; 0xc35e <f_lseek+0x270>
    c344:	01 e0       	ldi	r16, 0x01	; 1
    c346:	10 e0       	ldi	r17, 0x00	; 0
    c348:	f7 01       	movw	r30, r14
    c34a:	81 81       	ldd	r24, Z+1	; 0x01
    c34c:	0e 94 b5 69 	call	0xd36a	; 0xd36a <disk_write>
    c350:	89 2b       	or	r24, r25
    c352:	09 f0       	breq	.+2      	; 0xc356 <f_lseek+0x268>
    c354:	32 cf       	rjmp	.-412    	; 0xc1ba <f_lseek+0xcc>
    c356:	f1 01       	movw	r30, r2
    c358:	86 85       	ldd	r24, Z+14	; 0x0e
    c35a:	8f 77       	andi	r24, 0x7F	; 127
    c35c:	86 87       	std	Z+14, r24	; 0x0e
    c35e:	e9 81       	ldd	r30, Y+1	; 0x01
    c360:	fa 81       	ldd	r31, Y+2	; 0x02
    c362:	01 e0       	ldi	r16, 0x01	; 1
    c364:	10 e0       	ldi	r17, 0x00	; 0
    c366:	a5 01       	movw	r20, r10
    c368:	94 01       	movw	r18, r8
    c36a:	b6 01       	movw	r22, r12
    c36c:	81 81       	ldd	r24, Z+1	; 0x01
    c36e:	ed d7       	rcall	.+4058   	; 0xd34a <disk_read>
    c370:	89 2b       	or	r24, r25
    c372:	09 f0       	breq	.+2      	; 0xc376 <f_lseek+0x288>
    c374:	22 cf       	rjmp	.-444    	; 0xc1ba <f_lseek+0xcc>
    c376:	f1 01       	movw	r30, r2
    c378:	80 8e       	std	Z+24, r8	; 0x18
    c37a:	91 8e       	std	Z+25, r9	; 0x19
    c37c:	a2 8e       	std	Z+26, r10	; 0x1a
    c37e:	b3 8e       	std	Z+27, r11	; 0x1b
    c380:	62 c1       	rjmp	.+708    	; 0xc646 <f_lseek+0x558>
    c382:	f1 01       	movw	r30, r2
    c384:	82 85       	ldd	r24, Z+10	; 0x0a
    c386:	93 85       	ldd	r25, Z+11	; 0x0b
    c388:	a4 85       	ldd	r26, Z+12	; 0x0c
    c38a:	b5 85       	ldd	r27, Z+13	; 0x0d
    c38c:	8c 15       	cp	r24, r12
    c38e:	9d 05       	cpc	r25, r13
    c390:	ae 05       	cpc	r26, r14
    c392:	bf 05       	cpc	r27, r15
    c394:	28 f4       	brcc	.+10     	; 0xc3a0 <f_lseek+0x2b2>
    c396:	26 85       	ldd	r18, Z+14	; 0x0e
    c398:	21 fd       	sbrc	r18, 1
    c39a:	02 c0       	rjmp	.+4      	; 0xc3a0 <f_lseek+0x2b2>
    c39c:	6c 01       	movw	r12, r24
    c39e:	7d 01       	movw	r14, r26
    c3a0:	f1 01       	movw	r30, r2
    c3a2:	40 88       	ldd	r4, Z+16	; 0x10
    c3a4:	51 88       	ldd	r5, Z+17	; 0x11
    c3a6:	62 88       	ldd	r6, Z+18	; 0x12
    c3a8:	73 88       	ldd	r7, Z+19	; 0x13
    c3aa:	10 8a       	std	Z+16, r1	; 0x10
    c3ac:	11 8a       	std	Z+17, r1	; 0x11
    c3ae:	12 8a       	std	Z+18, r1	; 0x12
    c3b0:	13 8a       	std	Z+19, r1	; 0x13
    c3b2:	c1 14       	cp	r12, r1
    c3b4:	d1 04       	cpc	r13, r1
    c3b6:	e1 04       	cpc	r14, r1
    c3b8:	f1 04       	cpc	r15, r1
    c3ba:	09 f4       	brne	.+2      	; 0xc3be <f_lseek+0x2d0>
    c3bc:	48 c1       	rjmp	.+656    	; 0xc64e <f_lseek+0x560>
    c3be:	e9 81       	ldd	r30, Y+1	; 0x01
    c3c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c3c2:	81 84       	ldd	r8, Z+9	; 0x09
    c3c4:	92 84       	ldd	r9, Z+10	; 0x0a
    c3c6:	a1 2c       	mov	r10, r1
    c3c8:	b1 2c       	mov	r11, r1
    c3ca:	39 e0       	ldi	r19, 0x09	; 9
    c3cc:	88 0c       	add	r8, r8
    c3ce:	99 1c       	adc	r9, r9
    c3d0:	aa 1c       	adc	r10, r10
    c3d2:	bb 1c       	adc	r11, r11
    c3d4:	3a 95       	dec	r19
    c3d6:	d1 f7       	brne	.-12     	; 0xc3cc <f_lseek+0x2de>
    c3d8:	41 14       	cp	r4, r1
    c3da:	51 04       	cpc	r5, r1
    c3dc:	61 04       	cpc	r6, r1
    c3de:	71 04       	cpc	r7, r1
    c3e0:	d9 f1       	breq	.+118    	; 0xc458 <f_lseek+0x36a>
    c3e2:	f1 e0       	ldi	r31, 0x01	; 1
    c3e4:	4f 1a       	sub	r4, r31
    c3e6:	51 08       	sbc	r5, r1
    c3e8:	61 08       	sbc	r6, r1
    c3ea:	71 08       	sbc	r7, r1
    c3ec:	c7 01       	movw	r24, r14
    c3ee:	b6 01       	movw	r22, r12
    c3f0:	61 50       	subi	r22, 0x01	; 1
    c3f2:	71 09       	sbc	r23, r1
    c3f4:	81 09       	sbc	r24, r1
    c3f6:	91 09       	sbc	r25, r1
    c3f8:	a5 01       	movw	r20, r10
    c3fa:	94 01       	movw	r18, r8
    c3fc:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    c400:	2b 83       	std	Y+3, r18	; 0x03
    c402:	3c 83       	std	Y+4, r19	; 0x04
    c404:	4d 83       	std	Y+5, r20	; 0x05
    c406:	5e 83       	std	Y+6, r21	; 0x06
    c408:	c3 01       	movw	r24, r6
    c40a:	b2 01       	movw	r22, r4
    c40c:	a5 01       	movw	r20, r10
    c40e:	94 01       	movw	r18, r8
    c410:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
    c414:	6b 81       	ldd	r22, Y+3	; 0x03
    c416:	7c 81       	ldd	r23, Y+4	; 0x04
    c418:	8d 81       	ldd	r24, Y+5	; 0x05
    c41a:	9e 81       	ldd	r25, Y+6	; 0x06
    c41c:	62 17       	cp	r22, r18
    c41e:	73 07       	cpc	r23, r19
    c420:	84 07       	cpc	r24, r20
    c422:	95 07       	cpc	r25, r21
    c424:	c8 f0       	brcs	.+50     	; 0xc458 <f_lseek+0x36a>
    c426:	88 27       	eor	r24, r24
    c428:	99 27       	eor	r25, r25
    c42a:	dc 01       	movw	r26, r24
    c42c:	88 19       	sub	r24, r8
    c42e:	99 09       	sbc	r25, r9
    c430:	aa 09       	sbc	r26, r10
    c432:	bb 09       	sbc	r27, r11
    c434:	48 22       	and	r4, r24
    c436:	59 22       	and	r5, r25
    c438:	6a 22       	and	r6, r26
    c43a:	7b 22       	and	r7, r27
    c43c:	f1 01       	movw	r30, r2
    c43e:	40 8a       	std	Z+16, r4	; 0x10
    c440:	51 8a       	std	Z+17, r5	; 0x11
    c442:	62 8a       	std	Z+18, r6	; 0x12
    c444:	73 8a       	std	Z+19, r7	; 0x13
    c446:	c4 18       	sub	r12, r4
    c448:	d5 08       	sbc	r13, r5
    c44a:	e6 08       	sbc	r14, r6
    c44c:	f7 08       	sbc	r15, r7
    c44e:	44 89       	ldd	r20, Z+20	; 0x14
    c450:	55 89       	ldd	r21, Z+21	; 0x15
    c452:	66 89       	ldd	r22, Z+22	; 0x16
    c454:	77 89       	ldd	r23, Z+23	; 0x17
    c456:	29 c0       	rjmp	.+82     	; 0xc4aa <f_lseek+0x3bc>
    c458:	f1 01       	movw	r30, r2
    c45a:	46 81       	ldd	r20, Z+6	; 0x06
    c45c:	57 81       	ldd	r21, Z+7	; 0x07
    c45e:	60 85       	ldd	r22, Z+8	; 0x08
    c460:	71 85       	ldd	r23, Z+9	; 0x09
    c462:	41 15       	cp	r20, r1
    c464:	51 05       	cpc	r21, r1
    c466:	61 05       	cpc	r22, r1
    c468:	71 05       	cpc	r23, r1
    c46a:	d1 f4       	brne	.+52     	; 0xc4a0 <f_lseek+0x3b2>
    c46c:	40 e0       	ldi	r20, 0x00	; 0
    c46e:	50 e0       	ldi	r21, 0x00	; 0
    c470:	ba 01       	movw	r22, r20
    c472:	c1 01       	movw	r24, r2
    c474:	0e 94 b6 50 	call	0xa16c	; 0xa16c <create_chain>
    c478:	ab 01       	movw	r20, r22
    c47a:	bc 01       	movw	r22, r24
    c47c:	41 30       	cpi	r20, 0x01	; 1
    c47e:	51 05       	cpc	r21, r1
    c480:	61 05       	cpc	r22, r1
    c482:	71 05       	cpc	r23, r1
    c484:	09 f4       	brne	.+2      	; 0xc488 <f_lseek+0x39a>
    c486:	91 ce       	rjmp	.-734    	; 0xc1aa <f_lseek+0xbc>
    c488:	4f 3f       	cpi	r20, 0xFF	; 255
    c48a:	ff ef       	ldi	r31, 0xFF	; 255
    c48c:	5f 07       	cpc	r21, r31
    c48e:	6f 07       	cpc	r22, r31
    c490:	7f 07       	cpc	r23, r31
    c492:	09 f4       	brne	.+2      	; 0xc496 <f_lseek+0x3a8>
    c494:	92 ce       	rjmp	.-732    	; 0xc1ba <f_lseek+0xcc>
    c496:	f1 01       	movw	r30, r2
    c498:	46 83       	std	Z+6, r20	; 0x06
    c49a:	57 83       	std	Z+7, r21	; 0x07
    c49c:	60 87       	std	Z+8, r22	; 0x08
    c49e:	71 87       	std	Z+9, r23	; 0x09
    c4a0:	f1 01       	movw	r30, r2
    c4a2:	44 8b       	std	Z+20, r20	; 0x14
    c4a4:	55 8b       	std	Z+21, r21	; 0x15
    c4a6:	66 8b       	std	Z+22, r22	; 0x16
    c4a8:	77 8b       	std	Z+23, r23	; 0x17
    c4aa:	41 15       	cp	r20, r1
    c4ac:	51 05       	cpc	r21, r1
    c4ae:	61 05       	cpc	r22, r1
    c4b0:	71 05       	cpc	r23, r1
    c4b2:	09 f0       	breq	.+2      	; 0xc4b6 <f_lseek+0x3c8>
    c4b4:	40 c0       	rjmp	.+128    	; 0xc536 <f_lseek+0x448>
    c4b6:	c1 2c       	mov	r12, r1
    c4b8:	d1 2c       	mov	r13, r1
    c4ba:	76 01       	movw	r14, r12
    c4bc:	79 c0       	rjmp	.+242    	; 0xc5b0 <f_lseek+0x4c2>
    c4be:	c8 18       	sub	r12, r8
    c4c0:	d9 08       	sbc	r13, r9
    c4c2:	ea 08       	sbc	r14, r10
    c4c4:	fb 08       	sbc	r15, r11
    c4c6:	f1 01       	movw	r30, r2
    c4c8:	80 89       	ldd	r24, Z+16	; 0x10
    c4ca:	91 89       	ldd	r25, Z+17	; 0x11
    c4cc:	a2 89       	ldd	r26, Z+18	; 0x12
    c4ce:	b3 89       	ldd	r27, Z+19	; 0x13
    c4d0:	88 0d       	add	r24, r8
    c4d2:	99 1d       	adc	r25, r9
    c4d4:	aa 1d       	adc	r26, r10
    c4d6:	bb 1d       	adc	r27, r11
    c4d8:	80 8b       	std	Z+16, r24	; 0x10
    c4da:	91 8b       	std	Z+17, r25	; 0x11
    c4dc:	a2 8b       	std	Z+18, r26	; 0x12
    c4de:	b3 8b       	std	Z+19, r27	; 0x13
    c4e0:	86 85       	ldd	r24, Z+14	; 0x0e
    c4e2:	81 ff       	sbrs	r24, 1
    c4e4:	2f c0       	rjmp	.+94     	; 0xc544 <f_lseek+0x456>
    c4e6:	c1 01       	movw	r24, r2
    c4e8:	0e 94 b6 50 	call	0xa16c	; 0xa16c <create_chain>
    c4ec:	ab 01       	movw	r20, r22
    c4ee:	bc 01       	movw	r22, r24
    c4f0:	41 15       	cp	r20, r1
    c4f2:	51 05       	cpc	r21, r1
    c4f4:	61 05       	cpc	r22, r1
    c4f6:	71 05       	cpc	r23, r1
    c4f8:	61 f1       	breq	.+88     	; 0xc552 <f_lseek+0x464>
    c4fa:	4f 3f       	cpi	r20, 0xFF	; 255
    c4fc:	bf ef       	ldi	r27, 0xFF	; 255
    c4fe:	5b 07       	cpc	r21, r27
    c500:	6b 07       	cpc	r22, r27
    c502:	7b 07       	cpc	r23, r27
    c504:	09 f4       	brne	.+2      	; 0xc508 <f_lseek+0x41a>
    c506:	59 ce       	rjmp	.-846    	; 0xc1ba <f_lseek+0xcc>
    c508:	42 30       	cpi	r20, 0x02	; 2
    c50a:	51 05       	cpc	r21, r1
    c50c:	61 05       	cpc	r22, r1
    c50e:	71 05       	cpc	r23, r1
    c510:	08 f4       	brcc	.+2      	; 0xc514 <f_lseek+0x426>
    c512:	4b ce       	rjmp	.-874    	; 0xc1aa <f_lseek+0xbc>
    c514:	e9 81       	ldd	r30, Y+1	; 0x01
    c516:	fa 81       	ldd	r31, Y+2	; 0x02
    c518:	81 8d       	ldd	r24, Z+25	; 0x19
    c51a:	92 8d       	ldd	r25, Z+26	; 0x1a
    c51c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c51e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c520:	48 17       	cp	r20, r24
    c522:	59 07       	cpc	r21, r25
    c524:	6a 07       	cpc	r22, r26
    c526:	7b 07       	cpc	r23, r27
    c528:	08 f0       	brcs	.+2      	; 0xc52c <f_lseek+0x43e>
    c52a:	3f ce       	rjmp	.-898    	; 0xc1aa <f_lseek+0xbc>
    c52c:	f1 01       	movw	r30, r2
    c52e:	44 8b       	std	Z+20, r20	; 0x14
    c530:	55 8b       	std	Z+21, r21	; 0x15
    c532:	66 8b       	std	Z+22, r22	; 0x16
    c534:	77 8b       	std	Z+23, r23	; 0x17
    c536:	8c 14       	cp	r8, r12
    c538:	9d 04       	cpc	r9, r13
    c53a:	ae 04       	cpc	r10, r14
    c53c:	bf 04       	cpc	r11, r15
    c53e:	08 f4       	brcc	.+2      	; 0xc542 <f_lseek+0x454>
    c540:	be cf       	rjmp	.-132    	; 0xc4be <f_lseek+0x3d0>
    c542:	0a c0       	rjmp	.+20     	; 0xc558 <f_lseek+0x46a>
    c544:	80 81       	ld	r24, Z
    c546:	91 81       	ldd	r25, Z+1	; 0x01
    c548:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <get_fat.isra.9>
    c54c:	ab 01       	movw	r20, r22
    c54e:	bc 01       	movw	r22, r24
    c550:	d4 cf       	rjmp	.-88     	; 0xc4fa <f_lseek+0x40c>
    c552:	c1 2c       	mov	r12, r1
    c554:	d1 2c       	mov	r13, r1
    c556:	76 01       	movw	r14, r12
    c558:	f1 01       	movw	r30, r2
    c55a:	80 89       	ldd	r24, Z+16	; 0x10
    c55c:	91 89       	ldd	r25, Z+17	; 0x11
    c55e:	a2 89       	ldd	r26, Z+18	; 0x12
    c560:	b3 89       	ldd	r27, Z+19	; 0x13
    c562:	8c 0d       	add	r24, r12
    c564:	9d 1d       	adc	r25, r13
    c566:	ae 1d       	adc	r26, r14
    c568:	bf 1d       	adc	r27, r15
    c56a:	80 8b       	std	Z+16, r24	; 0x10
    c56c:	91 8b       	std	Z+17, r25	; 0x11
    c56e:	a2 8b       	std	Z+18, r26	; 0x12
    c570:	b3 8b       	std	Z+19, r27	; 0x13
    c572:	d7 01       	movw	r26, r14
    c574:	c6 01       	movw	r24, r12
    c576:	91 70       	andi	r25, 0x01	; 1
    c578:	aa 27       	eor	r26, r26
    c57a:	bb 27       	eor	r27, r27
    c57c:	89 2b       	or	r24, r25
    c57e:	8a 2b       	or	r24, r26
    c580:	8b 2b       	or	r24, r27
    c582:	09 f4       	brne	.+2      	; 0xc586 <f_lseek+0x498>
    c584:	98 cf       	rjmp	.-208    	; 0xc4b6 <f_lseek+0x3c8>
    c586:	89 81       	ldd	r24, Y+1	; 0x01
    c588:	9a 81       	ldd	r25, Y+2	; 0x02
    c58a:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    c58e:	61 15       	cp	r22, r1
    c590:	71 05       	cpc	r23, r1
    c592:	81 05       	cpc	r24, r1
    c594:	91 05       	cpc	r25, r1
    c596:	09 f4       	brne	.+2      	; 0xc59a <f_lseek+0x4ac>
    c598:	08 ce       	rjmp	.-1008   	; 0xc1aa <f_lseek+0xbc>
    c59a:	29 e0       	ldi	r18, 0x09	; 9
    c59c:	f6 94       	lsr	r15
    c59e:	e7 94       	ror	r14
    c5a0:	d7 94       	ror	r13
    c5a2:	c7 94       	ror	r12
    c5a4:	2a 95       	dec	r18
    c5a6:	d1 f7       	brne	.-12     	; 0xc59c <f_lseek+0x4ae>
    c5a8:	c6 0e       	add	r12, r22
    c5aa:	d7 1e       	adc	r13, r23
    c5ac:	e8 1e       	adc	r14, r24
    c5ae:	f9 1e       	adc	r15, r25
    c5b0:	f1 01       	movw	r30, r2
    c5b2:	80 89       	ldd	r24, Z+16	; 0x10
    c5b4:	91 89       	ldd	r25, Z+17	; 0x11
    c5b6:	a2 89       	ldd	r26, Z+18	; 0x12
    c5b8:	b3 89       	ldd	r27, Z+19	; 0x13
    c5ba:	42 85       	ldd	r20, Z+10	; 0x0a
    c5bc:	53 85       	ldd	r21, Z+11	; 0x0b
    c5be:	64 85       	ldd	r22, Z+12	; 0x0c
    c5c0:	75 85       	ldd	r23, Z+13	; 0x0d
    c5c2:	48 17       	cp	r20, r24
    c5c4:	59 07       	cpc	r21, r25
    c5c6:	6a 07       	cpc	r22, r26
    c5c8:	7b 07       	cpc	r23, r27
    c5ca:	38 f4       	brcc	.+14     	; 0xc5da <f_lseek+0x4ec>
    c5cc:	82 87       	std	Z+10, r24	; 0x0a
    c5ce:	93 87       	std	Z+11, r25	; 0x0b
    c5d0:	a4 87       	std	Z+12, r26	; 0x0c
    c5d2:	b5 87       	std	Z+13, r27	; 0x0d
    c5d4:	26 85       	ldd	r18, Z+14	; 0x0e
    c5d6:	20 64       	ori	r18, 0x40	; 64
    c5d8:	26 87       	std	Z+14, r18	; 0x0e
    c5da:	91 70       	andi	r25, 0x01	; 1
    c5dc:	aa 27       	eor	r26, r26
    c5de:	bb 27       	eor	r27, r27
    c5e0:	89 2b       	or	r24, r25
    c5e2:	8a 2b       	or	r24, r26
    c5e4:	8b 2b       	or	r24, r27
    c5e6:	79 f1       	breq	.+94     	; 0xc646 <f_lseek+0x558>
    c5e8:	f1 01       	movw	r30, r2
    c5ea:	20 8d       	ldd	r18, Z+24	; 0x18
    c5ec:	31 8d       	ldd	r19, Z+25	; 0x19
    c5ee:	42 8d       	ldd	r20, Z+26	; 0x1a
    c5f0:	53 8d       	ldd	r21, Z+27	; 0x1b
    c5f2:	2c 15       	cp	r18, r12
    c5f4:	3d 05       	cpc	r19, r13
    c5f6:	4e 05       	cpc	r20, r14
    c5f8:	5f 05       	cpc	r21, r15
    c5fa:	29 f1       	breq	.+74     	; 0xc646 <f_lseek+0x558>
    c5fc:	86 85       	ldd	r24, Z+14	; 0x0e
    c5fe:	b1 01       	movw	r22, r2
    c600:	6c 5d       	subi	r22, 0xDC	; 220
    c602:	7f 4f       	sbci	r23, 0xFF	; 255
    c604:	5b 01       	movw	r10, r22
    c606:	87 ff       	sbrs	r24, 7
    c608:	0d c0       	rjmp	.+26     	; 0xc624 <f_lseek+0x536>
    c60a:	e9 81       	ldd	r30, Y+1	; 0x01
    c60c:	fa 81       	ldd	r31, Y+2	; 0x02
    c60e:	01 e0       	ldi	r16, 0x01	; 1
    c610:	10 e0       	ldi	r17, 0x00	; 0
    c612:	81 81       	ldd	r24, Z+1	; 0x01
    c614:	aa d6       	rcall	.+3412   	; 0xd36a <disk_write>
    c616:	89 2b       	or	r24, r25
    c618:	09 f0       	breq	.+2      	; 0xc61c <f_lseek+0x52e>
    c61a:	cf cd       	rjmp	.-1122   	; 0xc1ba <f_lseek+0xcc>
    c61c:	f1 01       	movw	r30, r2
    c61e:	86 85       	ldd	r24, Z+14	; 0x0e
    c620:	8f 77       	andi	r24, 0x7F	; 127
    c622:	86 87       	std	Z+14, r24	; 0x0e
    c624:	e9 81       	ldd	r30, Y+1	; 0x01
    c626:	fa 81       	ldd	r31, Y+2	; 0x02
    c628:	01 e0       	ldi	r16, 0x01	; 1
    c62a:	10 e0       	ldi	r17, 0x00	; 0
    c62c:	a7 01       	movw	r20, r14
    c62e:	96 01       	movw	r18, r12
    c630:	b5 01       	movw	r22, r10
    c632:	81 81       	ldd	r24, Z+1	; 0x01
    c634:	8a d6       	rcall	.+3348   	; 0xd34a <disk_read>
    c636:	89 2b       	or	r24, r25
    c638:	09 f0       	breq	.+2      	; 0xc63c <f_lseek+0x54e>
    c63a:	bf cd       	rjmp	.-1154   	; 0xc1ba <f_lseek+0xcc>
    c63c:	f1 01       	movw	r30, r2
    c63e:	c0 8e       	std	Z+24, r12	; 0x18
    c640:	d1 8e       	std	Z+25, r13	; 0x19
    c642:	e2 8e       	std	Z+26, r14	; 0x1a
    c644:	f3 8e       	std	Z+27, r15	; 0x1b
    c646:	80 e0       	ldi	r24, 0x00	; 0
    c648:	bb cd       	rjmp	.-1162   	; 0xc1c0 <f_lseek+0xd2>
    c64a:	81 e1       	ldi	r24, 0x11	; 17
    c64c:	b9 cd       	rjmp	.-1166   	; 0xc1c0 <f_lseek+0xd2>
    c64e:	80 e0       	ldi	r24, 0x00	; 0
    c650:	90 e0       	ldi	r25, 0x00	; 0
    c652:	dc 01       	movw	r26, r24
    c654:	c1 2c       	mov	r12, r1
    c656:	d1 2c       	mov	r13, r1
    c658:	76 01       	movw	r14, r12
    c65a:	bf cf       	rjmp	.-130    	; 0xc5da <f_lseek+0x4ec>
    c65c:	2a 96       	adiw	r28, 0x0a	; 10
    c65e:	e2 e1       	ldi	r30, 0x12	; 18
    c660:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000c664 <f_opendir>:
    c664:	a4 e0       	ldi	r26, 0x04	; 4
    c666:	b0 e0       	ldi	r27, 0x00	; 0
    c668:	e8 e3       	ldi	r30, 0x38	; 56
    c66a:	f3 e6       	ldi	r31, 0x63	; 99
    c66c:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    c670:	7c 83       	std	Y+4, r23	; 0x04
    c672:	6b 83       	std	Y+3, r22	; 0x03
    c674:	00 97       	sbiw	r24, 0x00	; 0
    c676:	09 f4       	brne	.+2      	; 0xc67a <f_opendir+0x16>
    c678:	48 c0       	rjmp	.+144    	; 0xc70a <f_opendir+0xa6>
    c67a:	8c 01       	movw	r16, r24
    c67c:	40 e0       	ldi	r20, 0x00	; 0
    c67e:	be 01       	movw	r22, r28
    c680:	6f 5f       	subi	r22, 0xFF	; 255
    c682:	7f 4f       	sbci	r23, 0xFF	; 255
    c684:	ce 01       	movw	r24, r28
    c686:	03 96       	adiw	r24, 0x03	; 3
    c688:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    c68c:	7c 01       	movw	r14, r24
    c68e:	89 2b       	or	r24, r25
    c690:	b9 f5       	brne	.+110    	; 0xc700 <f_opendir+0x9c>
    c692:	89 81       	ldd	r24, Y+1	; 0x01
    c694:	9a 81       	ldd	r25, Y+2	; 0x02
    c696:	f8 01       	movw	r30, r16
    c698:	91 83       	std	Z+1, r25	; 0x01
    c69a:	80 83       	st	Z, r24
    c69c:	80 e0       	ldi	r24, 0x00	; 0
    c69e:	92 e0       	ldi	r25, 0x02	; 2
    c6a0:	98 d5       	rcall	.+2864   	; 0xd1d2 <ff_memalloc>
    c6a2:	6c 01       	movw	r12, r24
    c6a4:	00 97       	sbiw	r24, 0x00	; 0
    c6a6:	99 f1       	breq	.+102    	; 0xc70e <f_opendir+0xaa>
    c6a8:	e9 81       	ldd	r30, Y+1	; 0x01
    c6aa:	fa 81       	ldd	r31, Y+2	; 0x02
    c6ac:	94 87       	std	Z+12, r25	; 0x0c
    c6ae:	83 87       	std	Z+11, r24	; 0x0b
    c6b0:	6b 81       	ldd	r22, Y+3	; 0x03
    c6b2:	7c 81       	ldd	r23, Y+4	; 0x04
    c6b4:	c8 01       	movw	r24, r16
    c6b6:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    c6ba:	7c 01       	movw	r14, r24
    c6bc:	89 2b       	or	r24, r25
    c6be:	b9 f4       	brne	.+46     	; 0xc6ee <f_opendir+0x8a>
    c6c0:	f8 01       	movw	r30, r16
    c6c2:	87 a1       	ldd	r24, Z+39	; 0x27
    c6c4:	87 fd       	sbrc	r24, 7
    c6c6:	28 c0       	rjmp	.+80     	; 0xc718 <f_opendir+0xb4>
    c6c8:	84 81       	ldd	r24, Z+4	; 0x04
    c6ca:	84 ff       	sbrs	r24, 4
    c6cc:	0d c0       	rjmp	.+26     	; 0xc6e8 <f_opendir+0x84>
    c6ce:	62 8d       	ldd	r22, Z+26	; 0x1a
    c6d0:	73 8d       	ldd	r23, Z+27	; 0x1b
    c6d2:	e9 81       	ldd	r30, Y+1	; 0x01
    c6d4:	fa 81       	ldd	r31, Y+2	; 0x02
    c6d6:	80 81       	ld	r24, Z
    c6d8:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    c6dc:	f8 01       	movw	r30, r16
    c6de:	66 83       	std	Z+6, r22	; 0x06
    c6e0:	77 83       	std	Z+7, r23	; 0x07
    c6e2:	80 87       	std	Z+8, r24	; 0x08
    c6e4:	91 87       	std	Z+9, r25	; 0x09
    c6e6:	18 c0       	rjmp	.+48     	; 0xc718 <f_opendir+0xb4>
    c6e8:	95 e0       	ldi	r25, 0x05	; 5
    c6ea:	e9 2e       	mov	r14, r25
    c6ec:	f1 2c       	mov	r15, r1
    c6ee:	c6 01       	movw	r24, r12
    c6f0:	73 d5       	rcall	.+2790   	; 0xd1d8 <ff_memfree>
    c6f2:	f4 e0       	ldi	r31, 0x04	; 4
    c6f4:	ef 16       	cp	r14, r31
    c6f6:	f1 04       	cpc	r15, r1
    c6f8:	f1 f0       	breq	.+60     	; 0xc736 <f_opendir+0xd2>
    c6fa:	e1 14       	cp	r14, r1
    c6fc:	f1 04       	cpc	r15, r1
    c6fe:	49 f0       	breq	.+18     	; 0xc712 <f_opendir+0xae>
    c700:	f8 01       	movw	r30, r16
    c702:	11 82       	std	Z+1, r1	; 0x01
    c704:	10 82       	st	Z, r1
    c706:	c7 01       	movw	r24, r14
    c708:	1a c0       	rjmp	.+52     	; 0xc73e <f_opendir+0xda>
    c70a:	89 e0       	ldi	r24, 0x09	; 9
    c70c:	03 c0       	rjmp	.+6      	; 0xc714 <f_opendir+0xb0>
    c70e:	81 e1       	ldi	r24, 0x11	; 17
    c710:	01 c0       	rjmp	.+2      	; 0xc714 <f_opendir+0xb0>
    c712:	80 e0       	ldi	r24, 0x00	; 0
    c714:	90 e0       	ldi	r25, 0x00	; 0
    c716:	13 c0       	rjmp	.+38     	; 0xc73e <f_opendir+0xda>
    c718:	e9 81       	ldd	r30, Y+1	; 0x01
    c71a:	fa 81       	ldd	r31, Y+2	; 0x02
    c71c:	85 81       	ldd	r24, Z+5	; 0x05
    c71e:	96 81       	ldd	r25, Z+6	; 0x06
    c720:	f8 01       	movw	r30, r16
    c722:	93 83       	std	Z+3, r25	; 0x03
    c724:	82 83       	std	Z+2, r24	; 0x02
    c726:	40 e0       	ldi	r20, 0x00	; 0
    c728:	50 e0       	ldi	r21, 0x00	; 0
    c72a:	ba 01       	movw	r22, r20
    c72c:	c8 01       	movw	r24, r16
    c72e:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <dir_sdi>
    c732:	7c 01       	movw	r14, r24
    c734:	dc cf       	rjmp	.-72     	; 0xc6ee <f_opendir+0x8a>
    c736:	85 e0       	ldi	r24, 0x05	; 5
    c738:	e8 2e       	mov	r14, r24
    c73a:	f1 2c       	mov	r15, r1
    c73c:	e1 cf       	rjmp	.-62     	; 0xc700 <f_opendir+0x9c>
    c73e:	24 96       	adiw	r28, 0x04	; 4
    c740:	e8 e0       	ldi	r30, 0x08	; 8
    c742:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000c746 <f_closedir>:
    c746:	a2 e0       	ldi	r26, 0x02	; 2
    c748:	b0 e0       	ldi	r27, 0x00	; 0
    c74a:	e9 ea       	ldi	r30, 0xA9	; 169
    c74c:	f3 e6       	ldi	r31, 0x63	; 99
    c74e:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    c752:	8c 01       	movw	r16, r24
    c754:	be 01       	movw	r22, r28
    c756:	6f 5f       	subi	r22, 0xFF	; 255
    c758:	7f 4f       	sbci	r23, 0xFF	; 255
    c75a:	0e 94 83 48 	call	0x9106	; 0x9106 <validate>
    c75e:	00 97       	sbiw	r24, 0x00	; 0
    c760:	19 f4       	brne	.+6      	; 0xc768 <f_closedir+0x22>
    c762:	f8 01       	movw	r30, r16
    c764:	11 82       	std	Z+1, r1	; 0x01
    c766:	10 82       	st	Z, r1
    c768:	22 96       	adiw	r28, 0x02	; 2
    c76a:	e4 e0       	ldi	r30, 0x04	; 4
    c76c:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

0000c770 <f_readdir>:
    c770:	a2 e0       	ldi	r26, 0x02	; 2
    c772:	b0 e0       	ldi	r27, 0x00	; 0
    c774:	ee eb       	ldi	r30, 0xBE	; 190
    c776:	f3 e6       	ldi	r31, 0x63	; 99
    c778:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
    c77c:	7c 01       	movw	r14, r24
    c77e:	5b 01       	movw	r10, r22
    c780:	be 01       	movw	r22, r28
    c782:	6f 5f       	subi	r22, 0xFF	; 255
    c784:	7f 4f       	sbci	r23, 0xFF	; 255
    c786:	0e 94 83 48 	call	0x9106	; 0x9106 <validate>
    c78a:	00 97       	sbiw	r24, 0x00	; 0
    c78c:	89 f5       	brne	.+98     	; 0xc7f0 <f_readdir+0x80>
    c78e:	a1 14       	cp	r10, r1
    c790:	b1 04       	cpc	r11, r1
    c792:	39 f4       	brne	.+14     	; 0xc7a2 <f_readdir+0x32>
    c794:	40 e0       	ldi	r20, 0x00	; 0
    c796:	50 e0       	ldi	r21, 0x00	; 0
    c798:	ba 01       	movw	r22, r20
    c79a:	c7 01       	movw	r24, r14
    c79c:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <dir_sdi>
    c7a0:	27 c0       	rjmp	.+78     	; 0xc7f0 <f_readdir+0x80>
    c7a2:	80 e0       	ldi	r24, 0x00	; 0
    c7a4:	92 e0       	ldi	r25, 0x02	; 2
    c7a6:	15 d5       	rcall	.+2602   	; 0xd1d2 <ff_memalloc>
    c7a8:	6c 01       	movw	r12, r24
    c7aa:	00 97       	sbiw	r24, 0x00	; 0
    c7ac:	f9 f0       	breq	.+62     	; 0xc7ec <f_readdir+0x7c>
    c7ae:	e9 81       	ldd	r30, Y+1	; 0x01
    c7b0:	fa 81       	ldd	r31, Y+2	; 0x02
    c7b2:	94 87       	std	Z+12, r25	; 0x0c
    c7b4:	83 87       	std	Z+11, r24	; 0x0b
    c7b6:	60 e0       	ldi	r22, 0x00	; 0
    c7b8:	70 e0       	ldi	r23, 0x00	; 0
    c7ba:	c7 01       	movw	r24, r14
    c7bc:	0e 94 8e 53 	call	0xa71c	; 0xa71c <dir_read>
    c7c0:	8c 01       	movw	r16, r24
    c7c2:	8b 7f       	andi	r24, 0xFB	; 251
    c7c4:	89 2b       	or	r24, r25
    c7c6:	71 f4       	brne	.+28     	; 0xc7e4 <f_readdir+0x74>
    c7c8:	b5 01       	movw	r22, r10
    c7ca:	c7 01       	movw	r24, r14
    c7cc:	0e 94 af 48 	call	0x915e	; 0x915e <get_fileinfo>
    c7d0:	60 e0       	ldi	r22, 0x00	; 0
    c7d2:	70 e0       	ldi	r23, 0x00	; 0
    c7d4:	c7 01       	movw	r24, r14
    c7d6:	0e 94 6d 52 	call	0xa4da	; 0xa4da <dir_next>
    c7da:	8c 01       	movw	r16, r24
    c7dc:	04 97       	sbiw	r24, 0x04	; 4
    c7de:	11 f4       	brne	.+4      	; 0xc7e4 <f_readdir+0x74>
    c7e0:	00 e0       	ldi	r16, 0x00	; 0
    c7e2:	10 e0       	ldi	r17, 0x00	; 0
    c7e4:	c6 01       	movw	r24, r12
    c7e6:	f8 d4       	rcall	.+2544   	; 0xd1d8 <ff_memfree>
    c7e8:	c8 01       	movw	r24, r16
    c7ea:	02 c0       	rjmp	.+4      	; 0xc7f0 <f_readdir+0x80>
    c7ec:	81 e1       	ldi	r24, 0x11	; 17
    c7ee:	90 e0       	ldi	r25, 0x00	; 0
    c7f0:	22 96       	adiw	r28, 0x02	; 2
    c7f2:	ea e0       	ldi	r30, 0x0A	; 10
    c7f4:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0000c7f8 <f_stat>:
    c7f8:	a0 e3       	ldi	r26, 0x30	; 48
    c7fa:	b0 e0       	ldi	r27, 0x00	; 0
    c7fc:	e2 e0       	ldi	r30, 0x02	; 2
    c7fe:	f4 e6       	ldi	r31, 0x64	; 100
    c800:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    c804:	98 ab       	std	Y+48, r25	; 0x30
    c806:	8f a7       	std	Y+47, r24	; 0x2f
    c808:	6b 01       	movw	r12, r22
    c80a:	40 e0       	ldi	r20, 0x00	; 0
    c80c:	be 01       	movw	r22, r28
    c80e:	6f 5f       	subi	r22, 0xFF	; 255
    c810:	7f 4f       	sbci	r23, 0xFF	; 255
    c812:	ce 01       	movw	r24, r28
    c814:	8f 96       	adiw	r24, 0x2f	; 47
    c816:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    c81a:	00 97       	sbiw	r24, 0x00	; 0
    c81c:	39 f5       	brne	.+78     	; 0xc86c <f_stat+0x74>
    c81e:	80 e0       	ldi	r24, 0x00	; 0
    c820:	92 e0       	ldi	r25, 0x02	; 2
    c822:	d7 d4       	rcall	.+2478   	; 0xd1d2 <ff_memalloc>
    c824:	7c 01       	movw	r14, r24
    c826:	00 97       	sbiw	r24, 0x00	; 0
    c828:	f9 f0       	breq	.+62     	; 0xc868 <f_stat+0x70>
    c82a:	e9 81       	ldd	r30, Y+1	; 0x01
    c82c:	fa 81       	ldd	r31, Y+2	; 0x02
    c82e:	94 87       	std	Z+12, r25	; 0x0c
    c830:	83 87       	std	Z+11, r24	; 0x0b
    c832:	6f a5       	ldd	r22, Y+47	; 0x2f
    c834:	78 a9       	ldd	r23, Y+48	; 0x30
    c836:	ce 01       	movw	r24, r28
    c838:	01 96       	adiw	r24, 0x01	; 1
    c83a:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    c83e:	8c 01       	movw	r16, r24
    c840:	89 2b       	or	r24, r25
    c842:	71 f4       	brne	.+28     	; 0xc860 <f_stat+0x68>
    c844:	88 a5       	ldd	r24, Y+40	; 0x28
    c846:	87 fd       	sbrc	r24, 7
    c848:	09 c0       	rjmp	.+18     	; 0xc85c <f_stat+0x64>
    c84a:	c1 14       	cp	r12, r1
    c84c:	d1 04       	cpc	r13, r1
    c84e:	41 f0       	breq	.+16     	; 0xc860 <f_stat+0x68>
    c850:	b6 01       	movw	r22, r12
    c852:	ce 01       	movw	r24, r28
    c854:	01 96       	adiw	r24, 0x01	; 1
    c856:	0e 94 af 48 	call	0x915e	; 0x915e <get_fileinfo>
    c85a:	02 c0       	rjmp	.+4      	; 0xc860 <f_stat+0x68>
    c85c:	06 e0       	ldi	r16, 0x06	; 6
    c85e:	10 e0       	ldi	r17, 0x00	; 0
    c860:	c7 01       	movw	r24, r14
    c862:	ba d4       	rcall	.+2420   	; 0xd1d8 <ff_memfree>
    c864:	c8 01       	movw	r24, r16
    c866:	02 c0       	rjmp	.+4      	; 0xc86c <f_stat+0x74>
    c868:	81 e1       	ldi	r24, 0x11	; 17
    c86a:	90 e0       	ldi	r25, 0x00	; 0
    c86c:	e0 96       	adiw	r28, 0x30	; 48
    c86e:	e8 e0       	ldi	r30, 0x08	; 8
    c870:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000c874 <f_getfree>:
    c874:	aa e0       	ldi	r26, 0x0A	; 10
    c876:	b0 e0       	ldi	r27, 0x00	; 0
    c878:	e0 e4       	ldi	r30, 0x40	; 64
    c87a:	f4 e6       	ldi	r31, 0x64	; 100
    c87c:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
    c880:	9c 83       	std	Y+4, r25	; 0x04
    c882:	8b 83       	std	Y+3, r24	; 0x03
    c884:	7e 83       	std	Y+6, r23	; 0x06
    c886:	6d 83       	std	Y+5, r22	; 0x05
    c888:	7a 01       	movw	r14, r20
    c88a:	40 e0       	ldi	r20, 0x00	; 0
    c88c:	be 01       	movw	r22, r28
    c88e:	6f 5f       	subi	r22, 0xFF	; 255
    c890:	7f 4f       	sbci	r23, 0xFF	; 255
    c892:	ce 01       	movw	r24, r28
    c894:	03 96       	adiw	r24, 0x03	; 3
    c896:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    c89a:	8c 01       	movw	r16, r24
    c89c:	89 2b       	or	r24, r25
    c89e:	09 f0       	breq	.+2      	; 0xc8a2 <f_getfree+0x2e>
    c8a0:	c4 c0       	rjmp	.+392    	; 0xca2a <f_getfree+0x1b6>
    c8a2:	69 80       	ldd	r6, Y+1	; 0x01
    c8a4:	7a 80       	ldd	r7, Y+2	; 0x02
    c8a6:	d7 01       	movw	r26, r14
    c8a8:	6d 92       	st	X+, r6
    c8aa:	7c 92       	st	X, r7
    c8ac:	f3 01       	movw	r30, r6
    c8ae:	81 89       	ldd	r24, Z+17	; 0x11
    c8b0:	92 89       	ldd	r25, Z+18	; 0x12
    c8b2:	a3 89       	ldd	r26, Z+19	; 0x13
    c8b4:	b4 89       	ldd	r27, Z+20	; 0x14
    c8b6:	81 8c       	ldd	r8, Z+25	; 0x19
    c8b8:	92 8c       	ldd	r9, Z+26	; 0x1a
    c8ba:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c8bc:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c8be:	b5 01       	movw	r22, r10
    c8c0:	a4 01       	movw	r20, r8
    c8c2:	42 50       	subi	r20, 0x02	; 2
    c8c4:	51 09       	sbc	r21, r1
    c8c6:	61 09       	sbc	r22, r1
    c8c8:	71 09       	sbc	r23, r1
    c8ca:	48 17       	cp	r20, r24
    c8cc:	59 07       	cpc	r21, r25
    c8ce:	6a 07       	cpc	r22, r26
    c8d0:	7b 07       	cpc	r23, r27
    c8d2:	38 f0       	brcs	.+14     	; 0xc8e2 <f_getfree+0x6e>
    c8d4:	ed 81       	ldd	r30, Y+5	; 0x05
    c8d6:	fe 81       	ldd	r31, Y+6	; 0x06
    c8d8:	80 83       	st	Z, r24
    c8da:	91 83       	std	Z+1, r25	; 0x01
    c8dc:	a2 83       	std	Z+2, r26	; 0x02
    c8de:	b3 83       	std	Z+3, r27	; 0x03
    c8e0:	a4 c0       	rjmp	.+328    	; 0xca2a <f_getfree+0x1b6>
    c8e2:	80 81       	ld	r24, Z
    c8e4:	81 30       	cpi	r24, 0x01	; 1
    c8e6:	a1 f5       	brne	.+104    	; 0xc950 <f_getfree+0xdc>
    c8e8:	82 e0       	ldi	r24, 0x02	; 2
    c8ea:	88 2e       	mov	r8, r24
    c8ec:	91 2c       	mov	r9, r1
    c8ee:	a1 2c       	mov	r10, r1
    c8f0:	b1 2c       	mov	r11, r1
    c8f2:	c1 2c       	mov	r12, r1
    c8f4:	d1 2c       	mov	r13, r1
    c8f6:	76 01       	movw	r14, r12
    c8f8:	b5 01       	movw	r22, r10
    c8fa:	a4 01       	movw	r20, r8
    c8fc:	c3 01       	movw	r24, r6
    c8fe:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <get_fat.isra.9>
    c902:	6f 3f       	cpi	r22, 0xFF	; 255
    c904:	bf ef       	ldi	r27, 0xFF	; 255
    c906:	7b 07       	cpc	r23, r27
    c908:	8b 07       	cpc	r24, r27
    c90a:	9b 07       	cpc	r25, r27
    c90c:	09 f4       	brne	.+2      	; 0xc910 <f_getfree+0x9c>
    c90e:	76 c0       	rjmp	.+236    	; 0xc9fc <f_getfree+0x188>
    c910:	61 30       	cpi	r22, 0x01	; 1
    c912:	71 05       	cpc	r23, r1
    c914:	81 05       	cpc	r24, r1
    c916:	91 05       	cpc	r25, r1
    c918:	09 f4       	brne	.+2      	; 0xc91c <f_getfree+0xa8>
    c91a:	73 c0       	rjmp	.+230    	; 0xca02 <f_getfree+0x18e>
    c91c:	67 2b       	or	r22, r23
    c91e:	68 2b       	or	r22, r24
    c920:	69 2b       	or	r22, r25
    c922:	29 f4       	brne	.+10     	; 0xc92e <f_getfree+0xba>
    c924:	ef ef       	ldi	r30, 0xFF	; 255
    c926:	ce 1a       	sub	r12, r30
    c928:	de 0a       	sbc	r13, r30
    c92a:	ee 0a       	sbc	r14, r30
    c92c:	fe 0a       	sbc	r15, r30
    c92e:	ff ef       	ldi	r31, 0xFF	; 255
    c930:	8f 1a       	sub	r8, r31
    c932:	9f 0a       	sbc	r9, r31
    c934:	af 0a       	sbc	r10, r31
    c936:	bf 0a       	sbc	r11, r31
    c938:	e9 81       	ldd	r30, Y+1	; 0x01
    c93a:	fa 81       	ldd	r31, Y+2	; 0x02
    c93c:	81 8d       	ldd	r24, Z+25	; 0x19
    c93e:	92 8d       	ldd	r25, Z+26	; 0x1a
    c940:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c942:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c944:	88 16       	cp	r8, r24
    c946:	99 06       	cpc	r9, r25
    c948:	aa 06       	cpc	r10, r26
    c94a:	bb 06       	cpc	r11, r27
    c94c:	a8 f2       	brcs	.-86     	; 0xc8f8 <f_getfree+0x84>
    c94e:	5d c0       	rjmp	.+186    	; 0xca0a <f_getfree+0x196>
    c950:	f3 01       	movw	r30, r6
    c952:	45 a0       	ldd	r4, Z+37	; 0x25
    c954:	56 a0       	ldd	r5, Z+38	; 0x26
    c956:	67 a0       	ldd	r6, Z+39	; 0x27
    c958:	70 a4       	ldd	r7, Z+40	; 0x28
    c95a:	21 2c       	mov	r2, r1
    c95c:	31 2c       	mov	r3, r1
    c95e:	c1 2c       	mov	r12, r1
    c960:	d1 2c       	mov	r13, r1
    c962:	76 01       	movw	r14, r12
    c964:	21 14       	cp	r2, r1
    c966:	31 04       	cpc	r3, r1
    c968:	b1 f4       	brne	.+44     	; 0xc996 <f_getfree+0x122>
    c96a:	d3 01       	movw	r26, r6
    c96c:	c2 01       	movw	r24, r4
    c96e:	01 96       	adiw	r24, 0x01	; 1
    c970:	a1 1d       	adc	r26, r1
    c972:	b1 1d       	adc	r27, r1
    c974:	8f 83       	std	Y+7, r24	; 0x07
    c976:	98 87       	std	Y+8, r25	; 0x08
    c978:	a9 87       	std	Y+9, r26	; 0x09
    c97a:	ba 87       	std	Y+10, r27	; 0x0a
    c97c:	b3 01       	movw	r22, r6
    c97e:	a2 01       	movw	r20, r4
    c980:	89 81       	ldd	r24, Y+1	; 0x01
    c982:	9a 81       	ldd	r25, Y+2	; 0x02
    c984:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    c988:	00 97       	sbiw	r24, 0x00	; 0
    c98a:	09 f0       	breq	.+2      	; 0xc98e <f_getfree+0x11a>
    c98c:	3d c0       	rjmp	.+122    	; 0xca08 <f_getfree+0x194>
    c98e:	4f 80       	ldd	r4, Y+7	; 0x07
    c990:	58 84       	ldd	r5, Y+8	; 0x08
    c992:	69 84       	ldd	r6, Y+9	; 0x09
    c994:	7a 84       	ldd	r7, Y+10	; 0x0a
    c996:	e9 81       	ldd	r30, Y+1	; 0x01
    c998:	fa 81       	ldd	r31, Y+2	; 0x02
    c99a:	80 81       	ld	r24, Z
    c99c:	82 30       	cpi	r24, 0x02	; 2
    c99e:	79 f4       	brne	.+30     	; 0xc9be <f_getfree+0x14a>
    c9a0:	e2 0d       	add	r30, r2
    c9a2:	f3 1d       	adc	r31, r3
    c9a4:	85 a9       	ldd	r24, Z+53	; 0x35
    c9a6:	96 a9       	ldd	r25, Z+54	; 0x36
    c9a8:	89 2b       	or	r24, r25
    c9aa:	29 f4       	brne	.+10     	; 0xc9b6 <f_getfree+0x142>
    c9ac:	9f ef       	ldi	r25, 0xFF	; 255
    c9ae:	c9 1a       	sub	r12, r25
    c9b0:	d9 0a       	sbc	r13, r25
    c9b2:	e9 0a       	sbc	r14, r25
    c9b4:	f9 0a       	sbc	r15, r25
    c9b6:	a2 e0       	ldi	r26, 0x02	; 2
    c9b8:	2a 0e       	add	r2, r26
    c9ba:	31 1c       	adc	r3, r1
    c9bc:	15 c0       	rjmp	.+42     	; 0xc9e8 <f_getfree+0x174>
    c9be:	cf 01       	movw	r24, r30
    c9c0:	c5 96       	adiw	r24, 0x35	; 53
    c9c2:	82 0d       	add	r24, r2
    c9c4:	93 1d       	adc	r25, r3
    c9c6:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <ld_dword>
    c9ca:	dc 01       	movw	r26, r24
    c9cc:	cb 01       	movw	r24, r22
    c9ce:	bf 70       	andi	r27, 0x0F	; 15
    c9d0:	89 2b       	or	r24, r25
    c9d2:	8a 2b       	or	r24, r26
    c9d4:	8b 2b       	or	r24, r27
    c9d6:	29 f4       	brne	.+10     	; 0xc9e2 <f_getfree+0x16e>
    c9d8:	bf ef       	ldi	r27, 0xFF	; 255
    c9da:	cb 1a       	sub	r12, r27
    c9dc:	db 0a       	sbc	r13, r27
    c9de:	eb 0a       	sbc	r14, r27
    c9e0:	fb 0a       	sbc	r15, r27
    c9e2:	e4 e0       	ldi	r30, 0x04	; 4
    c9e4:	2e 0e       	add	r2, r30
    c9e6:	31 1c       	adc	r3, r1
    c9e8:	f1 e0       	ldi	r31, 0x01	; 1
    c9ea:	3f 22       	and	r3, r31
    c9ec:	21 e0       	ldi	r18, 0x01	; 1
    c9ee:	82 1a       	sub	r8, r18
    c9f0:	91 08       	sbc	r9, r1
    c9f2:	a1 08       	sbc	r10, r1
    c9f4:	b1 08       	sbc	r11, r1
    c9f6:	09 f0       	breq	.+2      	; 0xc9fa <f_getfree+0x186>
    c9f8:	b5 cf       	rjmp	.-150    	; 0xc964 <f_getfree+0xf0>
    c9fa:	07 c0       	rjmp	.+14     	; 0xca0a <f_getfree+0x196>
    c9fc:	01 e0       	ldi	r16, 0x01	; 1
    c9fe:	10 e0       	ldi	r17, 0x00	; 0
    ca00:	04 c0       	rjmp	.+8      	; 0xca0a <f_getfree+0x196>
    ca02:	02 e0       	ldi	r16, 0x02	; 2
    ca04:	10 e0       	ldi	r17, 0x00	; 0
    ca06:	01 c0       	rjmp	.+2      	; 0xca0a <f_getfree+0x196>
    ca08:	8c 01       	movw	r16, r24
    ca0a:	ad 81       	ldd	r26, Y+5	; 0x05
    ca0c:	be 81       	ldd	r27, Y+6	; 0x06
    ca0e:	cd 92       	st	X+, r12
    ca10:	dd 92       	st	X+, r13
    ca12:	ed 92       	st	X+, r14
    ca14:	fc 92       	st	X, r15
    ca16:	13 97       	sbiw	r26, 0x03	; 3
    ca18:	e9 81       	ldd	r30, Y+1	; 0x01
    ca1a:	fa 81       	ldd	r31, Y+2	; 0x02
    ca1c:	c1 8a       	std	Z+17, r12	; 0x11
    ca1e:	d2 8a       	std	Z+18, r13	; 0x12
    ca20:	e3 8a       	std	Z+19, r14	; 0x13
    ca22:	f4 8a       	std	Z+20, r15	; 0x14
    ca24:	84 81       	ldd	r24, Z+4	; 0x04
    ca26:	81 60       	ori	r24, 0x01	; 1
    ca28:	84 83       	std	Z+4, r24	; 0x04
    ca2a:	c8 01       	movw	r24, r16
    ca2c:	2a 96       	adiw	r28, 0x0a	; 10
    ca2e:	e2 e1       	ldi	r30, 0x12	; 18
    ca30:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0000ca34 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    ca34:	a0 e6       	ldi	r26, 0x60	; 96
    ca36:	b0 e0       	ldi	r27, 0x00	; 0
    ca38:	e0 e2       	ldi	r30, 0x20	; 32
    ca3a:	f5 e6       	ldi	r31, 0x65	; 101
    ca3c:	0c 94 f3 e6 	jmp	0x1cde6	; 0x1cde6 <__prologue_saves__+0xe>
    ca40:	a1 96       	adiw	r28, 0x21	; 33
    ca42:	9f af       	std	Y+63, r25	; 0x3f
    ca44:	8e af       	std	Y+62, r24	; 0x3e
    ca46:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    ca48:	42 e0       	ldi	r20, 0x02	; 2
    ca4a:	be 01       	movw	r22, r28
    ca4c:	63 5a       	subi	r22, 0xA3	; 163
    ca4e:	7f 4f       	sbci	r23, 0xFF	; 255
    ca50:	ce 01       	movw	r24, r28
    ca52:	81 5a       	subi	r24, 0xA1	; 161
    ca54:	9f 4f       	sbci	r25, 0xFF	; 255
    ca56:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
	if (res == FR_OK) {
    ca5a:	00 97       	sbiw	r24, 0x00	; 0
    ca5c:	09 f0       	breq	.+2      	; 0xca60 <f_unlink+0x2c>
    ca5e:	8c c0       	rjmp	.+280    	; 0xcb78 <f_unlink+0x144>
		dj.obj.fs = fs;
    ca60:	6f 96       	adiw	r28, 0x1f	; 31
    ca62:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca64:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca66:	6f 97       	sbiw	r28, 0x1f	; 31
    ca68:	98 ab       	std	Y+48, r25	; 0x30
    ca6a:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ca6c:	80 e0       	ldi	r24, 0x00	; 0
    ca6e:	92 e0       	ldi	r25, 0x02	; 2
    ca70:	b0 d3       	rcall	.+1888   	; 0xd1d2 <ff_memalloc>
    ca72:	5c 01       	movw	r10, r24
    ca74:	00 97       	sbiw	r24, 0x00	; 0
    ca76:	09 f4       	brne	.+2      	; 0xca7a <f_unlink+0x46>
    ca78:	49 c0       	rjmp	.+146    	; 0xcb0c <f_unlink+0xd8>
    ca7a:	6f 96       	adiw	r28, 0x1f	; 31
    ca7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca80:	6f 97       	sbiw	r28, 0x1f	; 31
    ca82:	94 87       	std	Z+12, r25	; 0x0c
    ca84:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    ca86:	a1 96       	adiw	r28, 0x21	; 33
    ca88:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca8a:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca8c:	a1 97       	sbiw	r28, 0x21	; 33
    ca8e:	ce 01       	movw	r24, r28
    ca90:	8f 96       	adiw	r24, 0x2f	; 47
    ca92:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    ca96:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ca98:	89 2b       	or	r24, r25
    ca9a:	a1 f5       	brne	.+104    	; 0xcb04 <f_unlink+0xd0>
    ca9c:	67 96       	adiw	r28, 0x17	; 23
    ca9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    caa0:	67 97       	sbiw	r28, 0x17	; 23
    caa2:	85 fd       	sbrc	r24, 5
    caa4:	36 c0       	rjmp	.+108    	; 0xcb12 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    caa6:	87 fd       	sbrc	r24, 7
    caa8:	34 c0       	rjmp	.+104    	; 0xcb12 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    caaa:	9b a8       	ldd	r9, Y+51	; 0x33
    caac:	90 fc       	sbrc	r9, 0
    caae:	40 c0       	rjmp	.+128    	; 0xcb30 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cab0:	6f 96       	adiw	r28, 0x1f	; 31
    cab2:	0e ad       	ldd	r16, Y+62	; 0x3e
    cab4:	1f ad       	ldd	r17, Y+63	; 0x3f
    cab6:	6f 97       	sbiw	r28, 0x1f	; 31
    cab8:	2b 96       	adiw	r28, 0x0b	; 11
    caba:	6e ad       	ldd	r22, Y+62	; 0x3e
    cabc:	7f ad       	ldd	r23, Y+63	; 0x3f
    cabe:	2b 97       	sbiw	r28, 0x0b	; 11
    cac0:	f8 01       	movw	r30, r16
    cac2:	80 81       	ld	r24, Z
    cac4:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    cac8:	6b 01       	movw	r12, r22
    caca:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cacc:	94 fe       	sbrs	r9, 4
    cace:	33 c0       	rjmp	.+102    	; 0xcb36 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cad0:	f8 01       	movw	r30, r16
    cad2:	85 89       	ldd	r24, Z+21	; 0x15
    cad4:	96 89       	ldd	r25, Z+22	; 0x16
    cad6:	a7 89       	ldd	r26, Z+23	; 0x17
    cad8:	b0 8d       	ldd	r27, Z+24	; 0x18
    cada:	c8 16       	cp	r12, r24
    cadc:	d9 06       	cpc	r13, r25
    cade:	ea 06       	cpc	r14, r26
    cae0:	fb 06       	cpc	r15, r27
    cae2:	31 f1       	breq	.+76     	; 0xcb30 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cae4:	1a 83       	std	Y+2, r17	; 0x02
    cae6:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cae8:	cf 82       	std	Y+7, r12	; 0x07
    caea:	d8 86       	std	Y+8, r13	; 0x08
    caec:	e9 86       	std	Y+9, r14	; 0x09
    caee:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    caf0:	40 e0       	ldi	r20, 0x00	; 0
    caf2:	50 e0       	ldi	r21, 0x00	; 0
    caf4:	ba 01       	movw	r22, r20
    caf6:	ce 01       	movw	r24, r28
    caf8:	01 96       	adiw	r24, 0x01	; 1
    cafa:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <dir_sdi>
    cafe:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cb00:	89 2b       	or	r24, r25
    cb02:	51 f0       	breq	.+20     	; 0xcb18 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cb04:	c5 01       	movw	r24, r10
    cb06:	68 d3       	rcall	.+1744   	; 0xd1d8 <ff_memfree>
    cb08:	c8 01       	movw	r24, r16
    cb0a:	36 c0       	rjmp	.+108    	; 0xcb78 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb0c:	81 e1       	ldi	r24, 0x11	; 17
    cb0e:	90 e0       	ldi	r25, 0x00	; 0
    cb10:	33 c0       	rjmp	.+102    	; 0xcb78 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cb12:	06 e0       	ldi	r16, 0x06	; 6
    cb14:	10 e0       	ldi	r17, 0x00	; 0
    cb16:	f6 cf       	rjmp	.-20     	; 0xcb04 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cb18:	60 e0       	ldi	r22, 0x00	; 0
    cb1a:	70 e0       	ldi	r23, 0x00	; 0
    cb1c:	ce 01       	movw	r24, r28
    cb1e:	01 96       	adiw	r24, 0x01	; 1
    cb20:	0e 94 8e 53 	call	0xa71c	; 0xa71c <dir_read>
    cb24:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cb26:	00 97       	sbiw	r24, 0x00	; 0
    cb28:	19 f0       	breq	.+6      	; 0xcb30 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cb2a:	04 97       	sbiw	r24, 0x04	; 4
    cb2c:	21 f0       	breq	.+8      	; 0xcb36 <f_unlink+0x102>
    cb2e:	ea cf       	rjmp	.-44     	; 0xcb04 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cb30:	07 e0       	ldi	r16, 0x07	; 7
    cb32:	10 e0       	ldi	r17, 0x00	; 0
    cb34:	e7 cf       	rjmp	.-50     	; 0xcb04 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cb36:	ce 01       	movw	r24, r28
    cb38:	8f 96       	adiw	r24, 0x2f	; 47
    cb3a:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <dir_remove>
    cb3e:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cb40:	89 2b       	or	r24, r25
    cb42:	01 f7       	brne	.-64     	; 0xcb04 <f_unlink+0xd0>
    cb44:	c1 14       	cp	r12, r1
    cb46:	d1 04       	cpc	r13, r1
    cb48:	e1 04       	cpc	r14, r1
    cb4a:	f1 04       	cpc	r15, r1
    cb4c:	41 f4       	brne	.+16     	; 0xcb5e <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb4e:	6f 96       	adiw	r28, 0x1f	; 31
    cb50:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb52:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb54:	6f 97       	sbiw	r28, 0x1f	; 31
    cb56:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <sync_fs>
    cb5a:	8c 01       	movw	r16, r24
    cb5c:	d3 cf       	rjmp	.-90     	; 0xcb04 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cb5e:	00 e0       	ldi	r16, 0x00	; 0
    cb60:	10 e0       	ldi	r17, 0x00	; 0
    cb62:	98 01       	movw	r18, r16
    cb64:	b7 01       	movw	r22, r14
    cb66:	a6 01       	movw	r20, r12
    cb68:	ce 01       	movw	r24, r28
    cb6a:	8f 96       	adiw	r24, 0x2f	; 47
    cb6c:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <remove_chain>
    cb70:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb72:	89 2b       	or	r24, r25
    cb74:	39 f6       	brne	.-114    	; 0xcb04 <f_unlink+0xd0>
    cb76:	eb cf       	rjmp	.-42     	; 0xcb4e <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb78:	c0 5a       	subi	r28, 0xA0	; 160
    cb7a:	df 4f       	sbci	r29, 0xFF	; 255
    cb7c:	eb e0       	ldi	r30, 0x0B	; 11
    cb7e:	0c 94 0f e7 	jmp	0x1ce1e	; 0x1ce1e <__epilogue_restores__+0xe>

0000cb82 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cb82:	a0 e4       	ldi	r26, 0x40	; 64
    cb84:	b0 e0       	ldi	r27, 0x00	; 0
    cb86:	e7 ec       	ldi	r30, 0xC7	; 199
    cb88:	f5 e6       	ldi	r31, 0x65	; 101
    cb8a:	0c 94 ee e6 	jmp	0x1cddc	; 0x1cddc <__prologue_saves__+0x4>
    cb8e:	21 96       	adiw	r28, 0x01	; 1
    cb90:	9f af       	std	Y+63, r25	; 0x3f
    cb92:	8e af       	std	Y+62, r24	; 0x3e
    cb94:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cb96:	42 e0       	ldi	r20, 0x02	; 2
    cb98:	be 01       	movw	r22, r28
    cb9a:	63 5c       	subi	r22, 0xC3	; 195
    cb9c:	7f 4f       	sbci	r23, 0xFF	; 255
    cb9e:	ce 01       	movw	r24, r28
    cba0:	cf 96       	adiw	r24, 0x3f	; 63
    cba2:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
	if (res == FR_OK) {
    cba6:	00 97       	sbiw	r24, 0x00	; 0
    cba8:	09 f0       	breq	.+2      	; 0xcbac <f_mkdir+0x2a>
    cbaa:	d6 c0       	rjmp	.+428    	; 0xcd58 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cbac:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbae:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbb0:	9a 83       	std	Y+2, r25	; 0x02
    cbb2:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cbb4:	80 e0       	ldi	r24, 0x00	; 0
    cbb6:	92 e0       	ldi	r25, 0x02	; 2
    cbb8:	0c d3       	rcall	.+1560   	; 0xd1d2 <ff_memalloc>
    cbba:	6c 01       	movw	r12, r24
    cbbc:	00 97       	sbiw	r24, 0x00	; 0
    cbbe:	e9 f0       	breq	.+58     	; 0xcbfa <f_mkdir+0x78>
    cbc0:	ed ad       	ldd	r30, Y+61	; 0x3d
    cbc2:	fe ad       	ldd	r31, Y+62	; 0x3e
    cbc4:	94 87       	std	Z+12, r25	; 0x0c
    cbc6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cbc8:	21 96       	adiw	r28, 0x01	; 1
    cbca:	6e ad       	ldd	r22, Y+62	; 0x3e
    cbcc:	7f ad       	ldd	r23, Y+63	; 0x3f
    cbce:	21 97       	sbiw	r28, 0x01	; 1
    cbd0:	ce 01       	movw	r24, r28
    cbd2:	01 96       	adiw	r24, 0x01	; 1
    cbd4:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    cbd8:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cbda:	89 2b       	or	r24, r25
    cbdc:	89 f0       	breq	.+34     	; 0xcc00 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cbde:	84 e0       	ldi	r24, 0x04	; 4
    cbe0:	e8 16       	cp	r14, r24
    cbe2:	f1 04       	cpc	r15, r1
    cbe4:	31 f4       	brne	.+12     	; 0xcbf2 <f_mkdir+0x70>
    cbe6:	88 a5       	ldd	r24, Y+40	; 0x28
    cbe8:	85 ff       	sbrs	r24, 5
    cbea:	0e c0       	rjmp	.+28     	; 0xcc08 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cbec:	26 e0       	ldi	r18, 0x06	; 6
    cbee:	e2 2e       	mov	r14, r18
    cbf0:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cbf2:	c6 01       	movw	r24, r12
    cbf4:	f1 d2       	rcall	.+1506   	; 0xd1d8 <ff_memfree>
    cbf6:	c7 01       	movw	r24, r14
    cbf8:	af c0       	rjmp	.+350    	; 0xcd58 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cbfa:	81 e1       	ldi	r24, 0x11	; 17
    cbfc:	90 e0       	ldi	r25, 0x00	; 0
    cbfe:	ac c0       	rjmp	.+344    	; 0xcd58 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cc00:	38 e0       	ldi	r19, 0x08	; 8
    cc02:	e3 2e       	mov	r14, r19
    cc04:	f1 2c       	mov	r15, r1
    cc06:	f5 cf       	rjmp	.-22     	; 0xcbf2 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cc08:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc0c:	98 ab       	std	Y+48, r25	; 0x30
    cc0e:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cc10:	40 e0       	ldi	r20, 0x00	; 0
    cc12:	50 e0       	ldi	r21, 0x00	; 0
    cc14:	ba 01       	movw	r22, r20
    cc16:	ce 01       	movw	r24, r28
    cc18:	8f 96       	adiw	r24, 0x2f	; 47
    cc1a:	0e 94 b6 50 	call	0xa16c	; 0xa16c <create_chain>
    cc1e:	4b 01       	movw	r8, r22
    cc20:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc22:	67 2b       	or	r22, r23
    cc24:	68 2b       	or	r22, r24
    cc26:	69 2b       	or	r22, r25
    cc28:	09 f1       	breq	.+66     	; 0xcc6c <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc2a:	e1 e0       	ldi	r30, 0x01	; 1
    cc2c:	8e 16       	cp	r8, r30
    cc2e:	91 04       	cpc	r9, r1
    cc30:	a1 04       	cpc	r10, r1
    cc32:	b1 04       	cpc	r11, r1
    cc34:	61 f0       	breq	.+24     	; 0xcc4e <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cc36:	ff ef       	ldi	r31, 0xFF	; 255
    cc38:	8f 16       	cp	r8, r31
    cc3a:	9f 06       	cpc	r9, r31
    cc3c:	af 06       	cpc	r10, r31
    cc3e:	bf 06       	cpc	r11, r31
    cc40:	d9 f4       	brne	.+54     	; 0xcc78 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cc42:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <get_fattime>
    cc46:	ee 24       	eor	r14, r14
    cc48:	e3 94       	inc	r14
    cc4a:	f1 2c       	mov	r15, r1
    cc4c:	05 c0       	rjmp	.+10     	; 0xcc58 <f_mkdir+0xd6>
    cc4e:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cc52:	92 e0       	ldi	r25, 0x02	; 2
    cc54:	e9 2e       	mov	r14, r25
    cc56:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cc58:	00 e0       	ldi	r16, 0x00	; 0
    cc5a:	10 e0       	ldi	r17, 0x00	; 0
    cc5c:	98 01       	movw	r18, r16
    cc5e:	b5 01       	movw	r22, r10
    cc60:	a4 01       	movw	r20, r8
    cc62:	ce 01       	movw	r24, r28
    cc64:	8f 96       	adiw	r24, 0x2f	; 47
    cc66:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <remove_chain>
    cc6a:	c3 cf       	rjmp	.-122    	; 0xcbf2 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc6c:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc70:	87 e0       	ldi	r24, 0x07	; 7
    cc72:	e8 2e       	mov	r14, r24
    cc74:	f1 2c       	mov	r15, r1
    cc76:	f0 cf       	rjmp	.-32     	; 0xcc58 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc78:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <get_fattime>
    cc7c:	2b 01       	movw	r4, r22
    cc7e:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cc80:	b5 01       	movw	r22, r10
    cc82:	a4 01       	movw	r20, r8
    cc84:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc86:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc88:	0e 94 cb 4a 	call	0x9596	; 0x9596 <dir_clear>
    cc8c:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    cc8e:	89 2b       	or	r24, r25
    cc90:	19 f7       	brne	.-58     	; 0xcc58 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cc92:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc94:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc96:	4b e0       	ldi	r20, 0x0B	; 11
    cc98:	50 e0       	ldi	r21, 0x00	; 0
    cc9a:	60 e2       	ldi	r22, 0x20	; 32
    cc9c:	70 e0       	ldi	r23, 0x00	; 0
    cc9e:	c5 96       	adiw	r24, 0x35	; 53
    cca0:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <mem_set>
						fs->win[DIR_Name] = '.';
    cca4:	8d ad       	ldd	r24, Y+61	; 0x3d
    cca6:	9e ad       	ldd	r25, Y+62	; 0x3e
    cca8:	1e e2       	ldi	r17, 0x2E	; 46
    ccaa:	fc 01       	movw	r30, r24
    ccac:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    ccae:	e0 5c       	subi	r30, 0xC0	; 192
    ccb0:	ff 4f       	sbci	r31, 0xFF	; 255
    ccb2:	20 e1       	ldi	r18, 0x10	; 16
    ccb4:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    ccb6:	b3 01       	movw	r22, r6
    ccb8:	a2 01       	movw	r20, r4
    ccba:	85 5b       	subi	r24, 0xB5	; 181
    ccbc:	9f 4f       	sbci	r25, 0xFF	; 255
    ccbe:	0e 94 c6 47 	call	0x8f8c	; 0x8f8c <st_dword>
						st_clust(fs, fs->win, dcl);
    ccc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccc6:	bc 01       	movw	r22, r24
    ccc8:	6b 5c       	subi	r22, 0xCB	; 203
    ccca:	7f 4f       	sbci	r23, 0xFF	; 255
    cccc:	a5 01       	movw	r20, r10
    ccce:	94 01       	movw	r18, r8
    ccd0:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    ccd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccd8:	bc 01       	movw	r22, r24
    ccda:	6b 5c       	subi	r22, 0xCB	; 203
    ccdc:	7f 4f       	sbci	r23, 0xFF	; 255
    ccde:	40 e2       	ldi	r20, 0x20	; 32
    cce0:	50 e0       	ldi	r21, 0x00	; 0
    cce2:	8b 5a       	subi	r24, 0xAB	; 171
    cce4:	9f 4f       	sbci	r25, 0xFF	; 255
    cce6:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    ccea:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccec:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccee:	fc 01       	movw	r30, r24
    ccf0:	ea 5a       	subi	r30, 0xAA	; 170
    ccf2:	ff 4f       	sbci	r31, 0xFF	; 255
    ccf4:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    ccf6:	2f 81       	ldd	r18, Y+7	; 0x07
    ccf8:	38 85       	ldd	r19, Y+8	; 0x08
    ccfa:	49 85       	ldd	r20, Y+9	; 0x09
    ccfc:	5a 85       	ldd	r21, Y+10	; 0x0a
    ccfe:	bc 01       	movw	r22, r24
    cd00:	6b 5a       	subi	r22, 0xAB	; 171
    cd02:	7f 4f       	sbci	r23, 0xFF	; 255
    cd04:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <st_clust.isra.4>
						fs->wflag = 1;
    cd08:	ed ad       	ldd	r30, Y+61	; 0x3d
    cd0a:	fe ad       	ldd	r31, Y+62	; 0x3e
    cd0c:	81 e0       	ldi	r24, 0x01	; 1
    cd0e:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cd10:	ce 01       	movw	r24, r28
    cd12:	01 96       	adiw	r24, 0x01	; 1
    cd14:	0e 94 ad 55 	call	0xab5a	; 0xab5a <dir_register>
    cd18:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cd1a:	89 2b       	or	r24, r25
    cd1c:	09 f0       	breq	.+2      	; 0xcd20 <f_mkdir+0x19e>
    cd1e:	9c cf       	rjmp	.-200    	; 0xcc58 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cd20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd24:	b3 01       	movw	r22, r6
    cd26:	a2 01       	movw	r20, r4
    cd28:	46 96       	adiw	r24, 0x16	; 22
    cd2a:	0e 94 c6 47 	call	0x8f8c	; 0x8f8c <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cd2e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cd30:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cd32:	a5 01       	movw	r20, r10
    cd34:	94 01       	movw	r18, r8
    cd36:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd38:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd3a:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cd3e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd40:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd42:	80 e1       	ldi	r24, 0x10	; 16
    cd44:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cd46:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd48:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd4a:	21 e0       	ldi	r18, 0x01	; 1
    cd4c:	fc 01       	movw	r30, r24
    cd4e:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cd50:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <sync_fs>
    cd54:	7c 01       	movw	r14, r24
    cd56:	4d cf       	rjmp	.-358    	; 0xcbf2 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd58:	c0 5c       	subi	r28, 0xC0	; 192
    cd5a:	df 4f       	sbci	r29, 0xFF	; 255
    cd5c:	e0 e1       	ldi	r30, 0x10	; 16
    cd5e:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__epilogue_restores__+0x4>

0000cd62 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cd62:	a2 e8       	ldi	r26, 0x82	; 130
    cd64:	b0 e0       	ldi	r27, 0x00	; 0
    cd66:	e7 eb       	ldi	r30, 0xB7	; 183
    cd68:	f6 e6       	ldi	r31, 0x66	; 102
    cd6a:	0c 94 f5 e6 	jmp	0x1cdea	; 0x1cdea <__prologue_saves__+0x12>
    cd6e:	c1 58       	subi	r28, 0x81	; 129
    cd70:	df 4f       	sbci	r29, 0xFF	; 255
    cd72:	99 83       	std	Y+1, r25	; 0x01
    cd74:	88 83       	st	Y, r24
    cd76:	cf 57       	subi	r28, 0x7F	; 127
    cd78:	d0 40       	sbci	r29, 0x00	; 0
    cd7a:	cf 57       	subi	r28, 0x7F	; 127
    cd7c:	df 4f       	sbci	r29, 0xFF	; 255
    cd7e:	79 83       	std	Y+1, r23	; 0x01
    cd80:	68 83       	st	Y, r22
    cd82:	c1 58       	subi	r28, 0x81	; 129
    cd84:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cd86:	ce 01       	movw	r24, r28
    cd88:	8f 57       	subi	r24, 0x7F	; 127
    cd8a:	9f 4f       	sbci	r25, 0xFF	; 255
    cd8c:	0e 94 57 48 	call	0x90ae	; 0x90ae <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cd90:	42 e0       	ldi	r20, 0x02	; 2
    cd92:	be 01       	movw	r22, r28
    cd94:	63 58       	subi	r22, 0x83	; 131
    cd96:	7f 4f       	sbci	r23, 0xFF	; 255
    cd98:	ce 01       	movw	r24, r28
    cd9a:	81 58       	subi	r24, 0x81	; 129
    cd9c:	9f 4f       	sbci	r25, 0xFF	; 255
    cd9e:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
	if (res == FR_OK) {
    cda2:	00 97       	sbiw	r24, 0x00	; 0
    cda4:	09 f0       	breq	.+2      	; 0xcda8 <f_rename+0x46>
    cda6:	ed c0       	rjmp	.+474    	; 0xcf82 <f_rename+0x220>
		djo.obj.fs = fs;
    cda8:	ef 96       	adiw	r28, 0x3f	; 63
    cdaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    cdac:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdae:	ef 97       	sbiw	r28, 0x3f	; 63
    cdb0:	98 ab       	std	Y+48, r25	; 0x30
    cdb2:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cdb4:	80 e0       	ldi	r24, 0x00	; 0
    cdb6:	92 e0       	ldi	r25, 0x02	; 2
    cdb8:	0c d2       	rcall	.+1048   	; 0xd1d2 <ff_memalloc>
    cdba:	6c 01       	movw	r12, r24
    cdbc:	00 97       	sbiw	r24, 0x00	; 0
    cdbe:	f1 f0       	breq	.+60     	; 0xcdfc <f_rename+0x9a>
    cdc0:	ef 96       	adiw	r28, 0x3f	; 63
    cdc2:	ee ad       	ldd	r30, Y+62	; 0x3e
    cdc4:	ff ad       	ldd	r31, Y+63	; 0x3f
    cdc6:	ef 97       	sbiw	r28, 0x3f	; 63
    cdc8:	94 87       	std	Z+12, r25	; 0x0c
    cdca:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cdcc:	c1 58       	subi	r28, 0x81	; 129
    cdce:	df 4f       	sbci	r29, 0xFF	; 255
    cdd0:	68 81       	ld	r22, Y
    cdd2:	79 81       	ldd	r23, Y+1	; 0x01
    cdd4:	cf 57       	subi	r28, 0x7F	; 127
    cdd6:	d0 40       	sbci	r29, 0x00	; 0
    cdd8:	ce 01       	movw	r24, r28
    cdda:	8f 96       	adiw	r24, 0x2f	; 47
    cddc:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    cde0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cde2:	89 2b       	or	r24, r25
    cde4:	39 f4       	brne	.+14     	; 0xcdf4 <f_rename+0x92>
    cde6:	67 96       	adiw	r28, 0x17	; 23
    cde8:	8f ad       	ldd	r24, Y+63	; 0x3f
    cdea:	67 97       	sbiw	r28, 0x17	; 23
    cdec:	80 7a       	andi	r24, 0xA0	; 160
    cdee:	49 f0       	breq	.+18     	; 0xce02 <f_rename+0xa0>
    cdf0:	06 e0       	ldi	r16, 0x06	; 6
    cdf2:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cdf4:	c6 01       	movw	r24, r12
    cdf6:	f0 d1       	rcall	.+992    	; 0xd1d8 <ff_memfree>
    cdf8:	c8 01       	movw	r24, r16
    cdfa:	c3 c0       	rjmp	.+390    	; 0xcf82 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cdfc:	81 e1       	ldi	r24, 0x11	; 17
    cdfe:	90 e0       	ldi	r25, 0x00	; 0
    ce00:	c0 c0       	rjmp	.+384    	; 0xcf82 <f_rename+0x220>
    ce02:	2b 96       	adiw	r28, 0x0b	; 11
    ce04:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce06:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce08:	2b 97       	sbiw	r28, 0x0b	; 11
    ce0a:	40 e2       	ldi	r20, 0x20	; 32
    ce0c:	50 e0       	ldi	r21, 0x00	; 0
    ce0e:	ce 01       	movw	r24, r28
    ce10:	83 5a       	subi	r24, 0xA3	; 163
    ce12:	9f 4f       	sbci	r25, 0xFF	; 255
    ce14:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
    ce18:	4e e2       	ldi	r20, 0x2E	; 46
    ce1a:	50 e0       	ldi	r21, 0x00	; 0
    ce1c:	be 01       	movw	r22, r28
    ce1e:	61 5d       	subi	r22, 0xD1	; 209
    ce20:	7f 4f       	sbci	r23, 0xFF	; 255
    ce22:	ce 01       	movw	r24, r28
    ce24:	01 96       	adiw	r24, 0x01	; 1
    ce26:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    ce2a:	cf 57       	subi	r28, 0x7F	; 127
    ce2c:	df 4f       	sbci	r29, 0xFF	; 255
    ce2e:	68 81       	ld	r22, Y
    ce30:	79 81       	ldd	r23, Y+1	; 0x01
    ce32:	c1 58       	subi	r28, 0x81	; 129
    ce34:	d0 40       	sbci	r29, 0x00	; 0
    ce36:	ce 01       	movw	r24, r28
    ce38:	01 96       	adiw	r24, 0x01	; 1
    ce3a:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    ce3e:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    ce40:	89 2b       	or	r24, r25
    ce42:	f9 f4       	brne	.+62     	; 0xce82 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    ce44:	4f 81       	ldd	r20, Y+7	; 0x07
    ce46:	58 85       	ldd	r21, Y+8	; 0x08
    ce48:	69 85       	ldd	r22, Y+9	; 0x09
    ce4a:	7a 85       	ldd	r23, Y+10	; 0x0a
    ce4c:	8d a9       	ldd	r24, Y+53	; 0x35
    ce4e:	9e a9       	ldd	r25, Y+54	; 0x36
    ce50:	af a9       	ldd	r26, Y+55	; 0x37
    ce52:	b8 ad       	ldd	r27, Y+56	; 0x38
    ce54:	48 17       	cp	r20, r24
    ce56:	59 07       	cpc	r21, r25
    ce58:	6a 07       	cpc	r22, r26
    ce5a:	7b 07       	cpc	r23, r27
    ce5c:	09 f0       	breq	.+2      	; 0xce60 <f_rename+0xfe>
    ce5e:	8b c0       	rjmp	.+278    	; 0xcf76 <f_rename+0x214>
    ce60:	4f 85       	ldd	r20, Y+15	; 0x0f
    ce62:	58 89       	ldd	r21, Y+16	; 0x10
    ce64:	69 89       	ldd	r22, Y+17	; 0x11
    ce66:	7a 89       	ldd	r23, Y+18	; 0x12
    ce68:	21 96       	adiw	r28, 0x01	; 1
    ce6a:	8c ad       	ldd	r24, Y+60	; 0x3c
    ce6c:	9d ad       	ldd	r25, Y+61	; 0x3d
    ce6e:	ae ad       	ldd	r26, Y+62	; 0x3e
    ce70:	bf ad       	ldd	r27, Y+63	; 0x3f
    ce72:	21 97       	sbiw	r28, 0x01	; 1
    ce74:	48 17       	cp	r20, r24
    ce76:	59 07       	cpc	r21, r25
    ce78:	6a 07       	cpc	r22, r26
    ce7a:	7b 07       	cpc	r23, r27
    ce7c:	09 f0       	breq	.+2      	; 0xce80 <f_rename+0x11e>
    ce7e:	7b c0       	rjmp	.+246    	; 0xcf76 <f_rename+0x214>
    ce80:	04 c0       	rjmp	.+8      	; 0xce8a <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ce82:	04 30       	cpi	r16, 0x04	; 4
    ce84:	11 05       	cpc	r17, r1
    ce86:	09 f0       	breq	.+2      	; 0xce8a <f_rename+0x128>
    ce88:	b5 cf       	rjmp	.-150    	; 0xcdf4 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    ce8a:	ce 01       	movw	r24, r28
    ce8c:	01 96       	adiw	r24, 0x01	; 1
    ce8e:	0e 94 ad 55 	call	0xab5a	; 0xab5a <dir_register>
    ce92:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    ce94:	89 2b       	or	r24, r25
    ce96:	09 f0       	breq	.+2      	; 0xce9a <f_rename+0x138>
    ce98:	ad cf       	rjmp	.-166    	; 0xcdf4 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    ce9a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ce9c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ce9e:	6d e5       	ldi	r22, 0x5D	; 93
    cea0:	70 e0       	ldi	r23, 0x00	; 0
    cea2:	6c 0f       	add	r22, r28
    cea4:	7d 1f       	adc	r23, r29
    cea6:	63 5f       	subi	r22, 0xF3	; 243
    cea8:	7f 4f       	sbci	r23, 0xFF	; 255
    ceaa:	43 e1       	ldi	r20, 0x13	; 19
    ceac:	50 e0       	ldi	r21, 0x00	; 0
    ceae:	c8 01       	movw	r24, r16
    ceb0:	0d 96       	adiw	r24, 0x0d	; 13
    ceb2:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ceb6:	a9 96       	adiw	r28, 0x29	; 41
    ceb8:	8f ad       	ldd	r24, Y+63	; 0x3f
    ceba:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cebc:	84 ff       	sbrs	r24, 4
    cebe:	80 62       	ori	r24, 0x20	; 32
    cec0:	f8 01       	movw	r30, r16
    cec2:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cec4:	ef 96       	adiw	r28, 0x3f	; 63
    cec6:	ee ac       	ldd	r14, Y+62	; 0x3e
    cec8:	ff ac       	ldd	r15, Y+63	; 0x3f
    ceca:	ef 97       	sbiw	r28, 0x3f	; 63
    cecc:	bb 24       	eor	r11, r11
    cece:	b3 94       	inc	r11
    ced0:	f7 01       	movw	r30, r14
    ced2:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ced4:	f8 01       	movw	r30, r16
    ced6:	83 85       	ldd	r24, Z+11	; 0x0b
    ced8:	84 ff       	sbrs	r24, 4
    ceda:	3d c0       	rjmp	.+122    	; 0xcf56 <f_rename+0x1f4>
    cedc:	4d a9       	ldd	r20, Y+53	; 0x35
    cede:	5e a9       	ldd	r21, Y+54	; 0x36
    cee0:	6f a9       	ldd	r22, Y+55	; 0x37
    cee2:	78 ad       	ldd	r23, Y+56	; 0x38
    cee4:	8f 81       	ldd	r24, Y+7	; 0x07
    cee6:	98 85       	ldd	r25, Y+8	; 0x08
    cee8:	a9 85       	ldd	r26, Y+9	; 0x09
    ceea:	ba 85       	ldd	r27, Y+10	; 0x0a
    ceec:	48 17       	cp	r20, r24
    ceee:	59 07       	cpc	r21, r25
    cef0:	6a 07       	cpc	r22, r26
    cef2:	7b 07       	cpc	r23, r27
    cef4:	81 f1       	breq	.+96     	; 0xcf56 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cef6:	b8 01       	movw	r22, r16
    cef8:	f7 01       	movw	r30, r14
    cefa:	80 81       	ld	r24, Z
    cefc:	0e 94 e4 49 	call	0x93c8	; 0x93c8 <ld_clust.isra.3>
    cf00:	ab 01       	movw	r20, r22
    cf02:	bc 01       	movw	r22, r24
    cf04:	c7 01       	movw	r24, r14
    cf06:	0e 94 e4 47 	call	0x8fc8	; 0x8fc8 <clst2sect>
    cf0a:	ab 01       	movw	r20, r22
    cf0c:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cf0e:	41 15       	cp	r20, r1
    cf10:	51 05       	cpc	r21, r1
    cf12:	61 05       	cpc	r22, r1
    cf14:	71 05       	cpc	r23, r1
    cf16:	91 f1       	breq	.+100    	; 0xcf7c <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cf18:	c7 01       	movw	r24, r14
    cf1a:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    cf1e:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cf20:	89 2b       	or	r24, r25
    cf22:	09 f0       	breq	.+2      	; 0xcf26 <f_rename+0x1c4>
    cf24:	67 cf       	rjmp	.-306    	; 0xcdf4 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf26:	ef 96       	adiw	r28, 0x3f	; 63
    cf28:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf2c:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cf2e:	fc 01       	movw	r30, r24
    cf30:	ea 5a       	subi	r30, 0xAA	; 170
    cf32:	ff 4f       	sbci	r31, 0xFF	; 255
    cf34:	20 81       	ld	r18, Z
    cf36:	2e 32       	cpi	r18, 0x2E	; 46
    cf38:	71 f4       	brne	.+28     	; 0xcf56 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cf3a:	2f 81       	ldd	r18, Y+7	; 0x07
    cf3c:	38 85       	ldd	r19, Y+8	; 0x08
    cf3e:	49 85       	ldd	r20, Y+9	; 0x09
    cf40:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf42:	bc 01       	movw	r22, r24
    cf44:	6b 5a       	subi	r22, 0xAB	; 171
    cf46:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cf48:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <st_clust.isra.4>
									fs->wflag = 1;
    cf4c:	ef 96       	adiw	r28, 0x3f	; 63
    cf4e:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf50:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf52:	ef 97       	sbiw	r28, 0x3f	; 63
    cf54:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cf56:	ce 01       	movw	r24, r28
    cf58:	8f 96       	adiw	r24, 0x2f	; 47
    cf5a:	0e 94 57 54 	call	0xa8ae	; 0xa8ae <dir_remove>
    cf5e:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cf60:	89 2b       	or	r24, r25
    cf62:	09 f0       	breq	.+2      	; 0xcf66 <f_rename+0x204>
    cf64:	47 cf       	rjmp	.-370    	; 0xcdf4 <f_rename+0x92>
					res = sync_fs(fs);
    cf66:	ef 96       	adiw	r28, 0x3f	; 63
    cf68:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf6c:	ef 97       	sbiw	r28, 0x3f	; 63
    cf6e:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <sync_fs>
    cf72:	8c 01       	movw	r16, r24
    cf74:	3f cf       	rjmp	.-386    	; 0xcdf4 <f_rename+0x92>
    cf76:	08 e0       	ldi	r16, 0x08	; 8
    cf78:	10 e0       	ldi	r17, 0x00	; 0
    cf7a:	3c cf       	rjmp	.-392    	; 0xcdf4 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cf7c:	02 e0       	ldi	r16, 0x02	; 2
    cf7e:	10 e0       	ldi	r17, 0x00	; 0
    cf80:	39 cf       	rjmp	.-398    	; 0xcdf4 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf82:	ce 57       	subi	r28, 0x7E	; 126
    cf84:	df 4f       	sbci	r29, 0xFF	; 255
    cf86:	e9 e0       	ldi	r30, 0x09	; 9
    cf88:	0c 94 11 e7 	jmp	0x1ce22	; 0x1ce22 <__epilogue_restores__+0x12>

0000cf8c <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cf8c:	a2 e3       	ldi	r26, 0x32	; 50
    cf8e:	b0 e0       	ldi	r27, 0x00	; 0
    cf90:	ec ec       	ldi	r30, 0xCC	; 204
    cf92:	f7 e6       	ldi	r31, 0x67	; 103
    cf94:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    cf98:	9a ab       	std	Y+50, r25	; 0x32
    cf9a:	89 ab       	std	Y+49, r24	; 0x31
    cf9c:	e6 2e       	mov	r14, r22
    cf9e:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cfa0:	42 e0       	ldi	r20, 0x02	; 2
    cfa2:	be 01       	movw	r22, r28
    cfa4:	61 5d       	subi	r22, 0xD1	; 209
    cfa6:	7f 4f       	sbci	r23, 0xFF	; 255
    cfa8:	ce 01       	movw	r24, r28
    cfaa:	c1 96       	adiw	r24, 0x31	; 49
    cfac:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
	if (res == FR_OK) {
    cfb0:	00 97       	sbiw	r24, 0x00	; 0
    cfb2:	a9 f5       	brne	.+106    	; 0xd01e <f_chmod+0x92>
		dj.obj.fs = fs;
    cfb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfb6:	98 a9       	ldd	r25, Y+48	; 0x30
    cfb8:	9a 83       	std	Y+2, r25	; 0x02
    cfba:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cfbc:	80 e0       	ldi	r24, 0x00	; 0
    cfbe:	92 e0       	ldi	r25, 0x02	; 2
    cfc0:	08 d1       	rcall	.+528    	; 0xd1d2 <ff_memalloc>
    cfc2:	6c 01       	movw	r12, r24
    cfc4:	00 97       	sbiw	r24, 0x00	; 0
    cfc6:	b1 f0       	breq	.+44     	; 0xcff4 <f_chmod+0x68>
    cfc8:	ef a5       	ldd	r30, Y+47	; 0x2f
    cfca:	f8 a9       	ldd	r31, Y+48	; 0x30
    cfcc:	94 87       	std	Z+12, r25	; 0x0c
    cfce:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cfd0:	69 a9       	ldd	r22, Y+49	; 0x31
    cfd2:	7a a9       	ldd	r23, Y+50	; 0x32
    cfd4:	ce 01       	movw	r24, r28
    cfd6:	01 96       	adiw	r24, 0x01	; 1
    cfd8:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    cfdc:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cfde:	89 2b       	or	r24, r25
    cfe0:	29 f4       	brne	.+10     	; 0xcfec <f_chmod+0x60>
    cfe2:	88 a5       	ldd	r24, Y+40	; 0x28
    cfe4:	80 7a       	andi	r24, 0xA0	; 160
    cfe6:	49 f0       	breq	.+18     	; 0xcffa <f_chmod+0x6e>
    cfe8:	06 e0       	ldi	r16, 0x06	; 6
    cfea:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cfec:	c6 01       	movw	r24, r12
    cfee:	f4 d0       	rcall	.+488    	; 0xd1d8 <ff_memfree>
    cff0:	c8 01       	movw	r24, r16
    cff2:	15 c0       	rjmp	.+42     	; 0xd01e <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cff4:	81 e1       	ldi	r24, 0x11	; 17
    cff6:	90 e0       	ldi	r25, 0x00	; 0
    cff8:	12 c0       	rjmp	.+36     	; 0xd01e <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cffa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cffc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cffe:	83 85       	ldd	r24, Z+11	; 0x0b
    d000:	6e 2d       	mov	r22, r14
    d002:	68 27       	eor	r22, r24
    d004:	6f 21       	and	r22, r15
    d006:	67 72       	andi	r22, 0x27	; 39
    d008:	68 27       	eor	r22, r24
    d00a:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    d00c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d00e:	98 a9       	ldd	r25, Y+48	; 0x30
    d010:	21 e0       	ldi	r18, 0x01	; 1
    d012:	fc 01       	movw	r30, r24
    d014:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d016:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <sync_fs>
    d01a:	8c 01       	movw	r16, r24
    d01c:	e7 cf       	rjmp	.-50     	; 0xcfec <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d01e:	e2 96       	adiw	r28, 0x32	; 50
    d020:	e8 e0       	ldi	r30, 0x08	; 8
    d022:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000d026 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d026:	a2 e3       	ldi	r26, 0x32	; 50
    d028:	b0 e0       	ldi	r27, 0x00	; 0
    d02a:	e9 e1       	ldi	r30, 0x19	; 25
    d02c:	f8 e6       	ldi	r31, 0x68	; 104
    d02e:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    d032:	9a ab       	std	Y+50, r25	; 0x32
    d034:	89 ab       	std	Y+49, r24	; 0x31
    d036:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d038:	42 e0       	ldi	r20, 0x02	; 2
    d03a:	be 01       	movw	r22, r28
    d03c:	61 5d       	subi	r22, 0xD1	; 209
    d03e:	7f 4f       	sbci	r23, 0xFF	; 255
    d040:	ce 01       	movw	r24, r28
    d042:	c1 96       	adiw	r24, 0x31	; 49
    d044:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
	if (res == FR_OK) {
    d048:	00 97       	sbiw	r24, 0x00	; 0
    d04a:	09 f0       	breq	.+2      	; 0xd04e <f_utime+0x28>
    d04c:	41 c0       	rjmp	.+130    	; 0xd0d0 <f_utime+0xaa>
		dj.obj.fs = fs;
    d04e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d050:	98 a9       	ldd	r25, Y+48	; 0x30
    d052:	9a 83       	std	Y+2, r25	; 0x02
    d054:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d056:	80 e0       	ldi	r24, 0x00	; 0
    d058:	92 e0       	ldi	r25, 0x02	; 2
    d05a:	bb d0       	rcall	.+374    	; 0xd1d2 <ff_memalloc>
    d05c:	7c 01       	movw	r14, r24
    d05e:	00 97       	sbiw	r24, 0x00	; 0
    d060:	b1 f0       	breq	.+44     	; 0xd08e <f_utime+0x68>
    d062:	ef a5       	ldd	r30, Y+47	; 0x2f
    d064:	f8 a9       	ldd	r31, Y+48	; 0x30
    d066:	94 87       	std	Z+12, r25	; 0x0c
    d068:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d06a:	69 a9       	ldd	r22, Y+49	; 0x31
    d06c:	7a a9       	ldd	r23, Y+50	; 0x32
    d06e:	ce 01       	movw	r24, r28
    d070:	01 96       	adiw	r24, 0x01	; 1
    d072:	0e 94 3b 57 	call	0xae76	; 0xae76 <follow_path>
    d076:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d078:	89 2b       	or	r24, r25
    d07a:	29 f4       	brne	.+10     	; 0xd086 <f_utime+0x60>
    d07c:	88 a5       	ldd	r24, Y+40	; 0x28
    d07e:	80 7a       	andi	r24, 0xA0	; 160
    d080:	49 f0       	breq	.+18     	; 0xd094 <f_utime+0x6e>
    d082:	06 e0       	ldi	r16, 0x06	; 6
    d084:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d086:	c7 01       	movw	r24, r14
    d088:	a7 d0       	rcall	.+334    	; 0xd1d8 <ff_memfree>
    d08a:	c8 01       	movw	r24, r16
    d08c:	21 c0       	rjmp	.+66     	; 0xd0d0 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d08e:	81 e1       	ldi	r24, 0x11	; 17
    d090:	90 e0       	ldi	r25, 0x00	; 0
    d092:	1e c0       	rjmp	.+60     	; 0xd0d0 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d094:	f6 01       	movw	r30, r12
    d096:	44 81       	ldd	r20, Z+4	; 0x04
    d098:	55 81       	ldd	r21, Z+5	; 0x05
    d09a:	60 e0       	ldi	r22, 0x00	; 0
    d09c:	70 e0       	ldi	r23, 0x00	; 0
    d09e:	ba 01       	movw	r22, r20
    d0a0:	55 27       	eor	r21, r21
    d0a2:	44 27       	eor	r20, r20
    d0a4:	86 81       	ldd	r24, Z+6	; 0x06
    d0a6:	97 81       	ldd	r25, Z+7	; 0x07
    d0a8:	a0 e0       	ldi	r26, 0x00	; 0
    d0aa:	b0 e0       	ldi	r27, 0x00	; 0
    d0ac:	48 2b       	or	r20, r24
    d0ae:	59 2b       	or	r21, r25
    d0b0:	6a 2b       	or	r22, r26
    d0b2:	7b 2b       	or	r23, r27
    d0b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d0b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d0b8:	46 96       	adiw	r24, 0x16	; 22
    d0ba:	0e 94 c6 47 	call	0x8f8c	; 0x8f8c <st_dword>
				fs->wflag = 1;
    d0be:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0c0:	98 a9       	ldd	r25, Y+48	; 0x30
    d0c2:	21 e0       	ldi	r18, 0x01	; 1
    d0c4:	fc 01       	movw	r30, r24
    d0c6:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d0c8:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <sync_fs>
    d0cc:	8c 01       	movw	r16, r24
    d0ce:	db cf       	rjmp	.-74     	; 0xd086 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d0d0:	e2 96       	adiw	r28, 0x32	; 50
    d0d2:	e8 e0       	ldi	r30, 0x08	; 8
    d0d4:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000d0d8 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d0d8:	a2 e3       	ldi	r26, 0x32	; 50
    d0da:	b0 e0       	ldi	r27, 0x00	; 0
    d0dc:	e2 e7       	ldi	r30, 0x72	; 114
    d0de:	f8 e6       	ldi	r31, 0x68	; 104
    d0e0:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    d0e4:	9a ab       	std	Y+50, r25	; 0x32
    d0e6:	89 ab       	std	Y+49, r24	; 0x31
    d0e8:	7b 01       	movw	r14, r22
    d0ea:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d0ec:	40 e0       	ldi	r20, 0x00	; 0
    d0ee:	be 01       	movw	r22, r28
    d0f0:	61 5d       	subi	r22, 0xD1	; 209
    d0f2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0f4:	ce 01       	movw	r24, r28
    d0f6:	c1 96       	adiw	r24, 0x31	; 49
    d0f8:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <mount_volume>
    d0fc:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d0fe:	89 2b       	or	r24, r25
    d100:	09 f0       	breq	.+2      	; 0xd104 <f_getlabel+0x2c>
    d102:	62 c0       	rjmp	.+196    	; 0xd1c8 <f_getlabel+0xf0>
    d104:	e1 14       	cp	r14, r1
    d106:	f1 04       	cpc	r15, r1
    d108:	a1 f1       	breq	.+104    	; 0xd172 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d10a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d10c:	98 a9       	ldd	r25, Y+48	; 0x30
    d10e:	9a 83       	std	Y+2, r25	; 0x02
    d110:	89 83       	std	Y+1, r24	; 0x01
    d112:	1f 82       	std	Y+7, r1	; 0x07
    d114:	18 86       	std	Y+8, r1	; 0x08
    d116:	19 86       	std	Y+9, r1	; 0x09
    d118:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d11a:	40 e0       	ldi	r20, 0x00	; 0
    d11c:	50 e0       	ldi	r21, 0x00	; 0
    d11e:	ba 01       	movw	r22, r20
    d120:	ce 01       	movw	r24, r28
    d122:	01 96       	adiw	r24, 0x01	; 1
    d124:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <dir_sdi>
		if (res == FR_OK) {
    d128:	00 97       	sbiw	r24, 0x00	; 0
    d12a:	f1 f4       	brne	.+60     	; 0xd168 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d12c:	61 e0       	ldi	r22, 0x01	; 1
    d12e:	70 e0       	ldi	r23, 0x00	; 0
    d130:	ce 01       	movw	r24, r28
    d132:	01 96       	adiw	r24, 0x01	; 1
    d134:	0e 94 8e 53 	call	0xa71c	; 0xa71c <dir_read>
		 	if (res == FR_OK) {
    d138:	00 97       	sbiw	r24, 0x00	; 0
    d13a:	b1 f4       	brne	.+44     	; 0xd168 <f_getlabel+0x90>
    d13c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d13e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d140:	f7 01       	movw	r30, r14
    d142:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d144:	a7 01       	movw	r20, r14
    d146:	dc 01       	movw	r26, r24
    d148:	2d 91       	ld	r18, X+
    d14a:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d14c:	da 01       	movw	r26, r20
    d14e:	2d 93       	st	X+, r18
    d150:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d152:	ae 17       	cp	r26, r30
    d154:	bf 07       	cpc	r27, r31
    d156:	b9 f7       	brne	.-18     	; 0xd146 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d158:	10 82       	st	Z, r1
						if (di == 0) break;
    d15a:	ee 16       	cp	r14, r30
    d15c:	ff 06       	cpc	r15, r31
    d15e:	49 f0       	breq	.+18     	; 0xd172 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d160:	82 91       	ld	r24, -Z
    d162:	80 32       	cpi	r24, 0x20	; 32
    d164:	c9 f3       	breq	.-14     	; 0xd158 <f_getlabel+0x80>
    d166:	05 c0       	rjmp	.+10     	; 0xd172 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d168:	84 30       	cpi	r24, 0x04	; 4
    d16a:	91 05       	cpc	r25, r1
    d16c:	61 f5       	brne	.+88     	; 0xd1c6 <f_getlabel+0xee>
			label[0] = 0;
    d16e:	f7 01       	movw	r30, r14
    d170:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d172:	c1 14       	cp	r12, r1
    d174:	d1 04       	cpc	r13, r1
    d176:	41 f1       	breq	.+80     	; 0xd1c8 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d178:	8f a5       	ldd	r24, Y+47	; 0x2f
    d17a:	98 a9       	ldd	r25, Y+48	; 0x30
    d17c:	fc 01       	movw	r30, r24
    d17e:	41 a1       	ldd	r20, Z+33	; 0x21
    d180:	52 a1       	ldd	r21, Z+34	; 0x22
    d182:	63 a1       	ldd	r22, Z+35	; 0x23
    d184:	74 a1       	ldd	r23, Z+36	; 0x24
    d186:	0e 94 73 4b 	call	0x96e6	; 0x96e6 <move_window>
    d18a:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d18c:	89 2b       	or	r24, r25
    d18e:	e1 f4       	brne	.+56     	; 0xd1c8 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d190:	ef a5       	ldd	r30, Y+47	; 0x2f
    d192:	f8 a9       	ldd	r31, Y+48	; 0x30
    d194:	80 81       	ld	r24, Z
    d196:	83 30       	cpi	r24, 0x03	; 3
    d198:	29 f0       	breq	.+10     	; 0xd1a4 <f_getlabel+0xcc>
    d19a:	84 30       	cpi	r24, 0x04	; 4
    d19c:	31 f0       	breq	.+12     	; 0xd1aa <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d19e:	87 e2       	ldi	r24, 0x27	; 39
    d1a0:	90 e0       	ldi	r25, 0x00	; 0
    d1a2:	05 c0       	rjmp	.+10     	; 0xd1ae <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d1a4:	83 e4       	ldi	r24, 0x43	; 67
    d1a6:	90 e0       	ldi	r25, 0x00	; 0
    d1a8:	02 c0       	rjmp	.+4      	; 0xd1ae <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d1aa:	84 e6       	ldi	r24, 0x64	; 100
    d1ac:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d1ae:	f5 96       	adiw	r30, 0x35	; 53
    d1b0:	8e 0f       	add	r24, r30
    d1b2:	9f 1f       	adc	r25, r31
    d1b4:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <ld_dword>
    d1b8:	d6 01       	movw	r26, r12
    d1ba:	6d 93       	st	X+, r22
    d1bc:	7d 93       	st	X+, r23
    d1be:	8d 93       	st	X+, r24
    d1c0:	9c 93       	st	X, r25
    d1c2:	13 97       	sbiw	r26, 0x03	; 3
    d1c4:	01 c0       	rjmp	.+2      	; 0xd1c8 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d1c6:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d1c8:	c8 01       	movw	r24, r16
    d1ca:	e2 96       	adiw	r28, 0x32	; 50
    d1cc:	e8 e0       	ldi	r30, 0x08	; 8
    d1ce:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000d1d2 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d1d2:	0c 94 e1 27 	jmp	0x4fc2	; 0x4fc2 <safemalloc>
}
    d1d6:	08 95       	ret

0000d1d8 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d1d8:	0c 94 03 28 	jmp	0x5006	; 0x5006 <safefree>
    d1dc:	08 95       	ret

0000d1de <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d1de:	cf 92       	push	r12
    d1e0:	df 92       	push	r13
    d1e2:	ef 92       	push	r14
    d1e4:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d1e6:	60 38       	cpi	r22, 0x80	; 128
    d1e8:	71 05       	cpc	r23, r1
    d1ea:	81 05       	cpc	r24, r1
    d1ec:	91 05       	cpc	r25, r1
    d1ee:	10 f4       	brcc	.+4      	; 0xd1f4 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d1f0:	cb 01       	movw	r24, r22
    d1f2:	23 c0       	rjmp	.+70     	; 0xd23a <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d1f4:	61 15       	cp	r22, r1
    d1f6:	71 05       	cpc	r23, r1
    d1f8:	21 e0       	ldi	r18, 0x01	; 1
    d1fa:	82 07       	cpc	r24, r18
    d1fc:	91 05       	cpc	r25, r1
    d1fe:	d8 f4       	brcc	.+54     	; 0xd236 <ff_uni2oem+0x58>
    d200:	45 3b       	cpi	r20, 0xB5	; 181
    d202:	51 40       	sbci	r21, 0x01	; 1
    d204:	c1 f4       	brne	.+48     	; 0xd236 <ff_uni2oem+0x58>
    d206:	e6 ea       	ldi	r30, 0xA6	; 166
    d208:	f7 e0       	ldi	r31, 0x07	; 7
    d20a:	20 e0       	ldi	r18, 0x00	; 0
    d20c:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d20e:	c1 90       	ld	r12, Z+
    d210:	d1 90       	ld	r13, Z+
    d212:	e1 2c       	mov	r14, r1
    d214:	f1 2c       	mov	r15, r1
    d216:	6c 15       	cp	r22, r12
    d218:	7d 05       	cpc	r23, r13
    d21a:	8e 05       	cpc	r24, r14
    d21c:	9f 05       	cpc	r25, r15
    d21e:	29 f0       	breq	.+10     	; 0xd22a <ff_uni2oem+0x4c>
    d220:	2f 5f       	subi	r18, 0xFF	; 255
    d222:	3f 4f       	sbci	r19, 0xFF	; 255
    d224:	20 38       	cpi	r18, 0x80	; 128
    d226:	31 05       	cpc	r19, r1
    d228:	91 f7       	brne	.-28     	; 0xd20e <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d22a:	b9 01       	movw	r22, r18
    d22c:	60 58       	subi	r22, 0x80	; 128
    d22e:	7f 4f       	sbci	r23, 0xFF	; 255
    d230:	cb 01       	movw	r24, r22
    d232:	99 27       	eor	r25, r25
    d234:	02 c0       	rjmp	.+4      	; 0xd23a <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d236:	80 e0       	ldi	r24, 0x00	; 0
    d238:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d23a:	ff 90       	pop	r15
    d23c:	ef 90       	pop	r14
    d23e:	df 90       	pop	r13
    d240:	cf 90       	pop	r12
    d242:	08 95       	ret

0000d244 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d244:	80 38       	cpi	r24, 0x80	; 128
    d246:	91 05       	cpc	r25, r1
    d248:	88 f0       	brcs	.+34     	; 0xd26c <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d24a:	65 3b       	cpi	r22, 0xB5	; 181
    d24c:	71 40       	sbci	r23, 0x01	; 1
    d24e:	61 f4       	brne	.+24     	; 0xd268 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d250:	8f 3f       	cpi	r24, 0xFF	; 255
    d252:	91 05       	cpc	r25, r1
    d254:	09 f0       	breq	.+2      	; 0xd258 <ff_oem2uni+0x14>
    d256:	40 f4       	brcc	.+16     	; 0xd268 <ff_oem2uni+0x24>
    d258:	88 0f       	add	r24, r24
    d25a:	99 1f       	adc	r25, r25
    d25c:	fc 01       	movw	r30, r24
    d25e:	ea 55       	subi	r30, 0x5A	; 90
    d260:	f9 4f       	sbci	r31, 0xF9	; 249
    d262:	80 81       	ld	r24, Z
    d264:	91 81       	ldd	r25, Z+1	; 0x01
    d266:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d268:	80 e0       	ldi	r24, 0x00	; 0
    d26a:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d26c:	08 95       	ret

0000d26e <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d26e:	61 15       	cp	r22, r1
    d270:	71 05       	cpc	r23, r1
    d272:	21 e0       	ldi	r18, 0x01	; 1
    d274:	82 07       	cpc	r24, r18
    d276:	91 05       	cpc	r25, r1
    d278:	08 f0       	brcs	.+2      	; 0xd27c <ff_wtoupper+0xe>
    d27a:	5a c0       	rjmp	.+180    	; 0xd330 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d27c:	61 15       	cp	r22, r1
    d27e:	80 e1       	ldi	r24, 0x10	; 16
    d280:	78 07       	cpc	r23, r24
    d282:	18 f0       	brcs	.+6      	; 0xd28a <ff_wtoupper+0x1c>
    d284:	a8 ef       	ldi	r26, 0xF8	; 248
    d286:	b4 e0       	ldi	r27, 0x04	; 4
    d288:	02 c0       	rjmp	.+4      	; 0xd28e <ff_wtoupper+0x20>
    d28a:	a4 eb       	ldi	r26, 0xB4	; 180
    d28c:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d28e:	2d 91       	ld	r18, X+
    d290:	3c 91       	ld	r19, X
    d292:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d294:	21 15       	cp	r18, r1
    d296:	31 05       	cpc	r19, r1
    d298:	09 f4       	brne	.+2      	; 0xd29c <ff_wtoupper+0x2e>
    d29a:	48 c0       	rjmp	.+144    	; 0xd32c <ff_wtoupper+0xbe>
    d29c:	62 17       	cp	r22, r18
    d29e:	73 07       	cpc	r23, r19
    d2a0:	08 f4       	brcc	.+2      	; 0xd2a4 <ff_wtoupper+0x36>
    d2a2:	44 c0       	rjmp	.+136    	; 0xd32c <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d2a4:	14 96       	adiw	r26, 0x04	; 4
    d2a6:	fd 01       	movw	r30, r26
    d2a8:	32 97       	sbiw	r30, 0x02	; 2
    d2aa:	80 81       	ld	r24, Z
    d2ac:	91 81       	ldd	r25, Z+1	; 0x01
    d2ae:	e9 2f       	mov	r30, r25
    d2b0:	ff 27       	eor	r31, r31
    d2b2:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d2b4:	a9 01       	movw	r20, r18
    d2b6:	48 0f       	add	r20, r24
    d2b8:	59 1f       	adc	r21, r25
    d2ba:	64 17       	cp	r22, r20
    d2bc:	75 07       	cpc	r23, r21
    d2be:	70 f5       	brcc	.+92     	; 0xd31c <ff_wtoupper+0xae>
				switch (cmd) {
    d2c0:	e9 30       	cpi	r30, 0x09	; 9
    d2c2:	f1 05       	cpc	r31, r1
    d2c4:	98 f5       	brcc	.+102    	; 0xd32c <ff_wtoupper+0xbe>
    d2c6:	ec 54       	subi	r30, 0x4C	; 76
    d2c8:	ff 4f       	sbci	r31, 0xFF	; 255
    d2ca:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d2ce:	62 1b       	sub	r22, r18
    d2d0:	73 0b       	sbc	r23, r19
    d2d2:	fb 01       	movw	r30, r22
    d2d4:	ee 0f       	add	r30, r30
    d2d6:	ff 1f       	adc	r31, r31
    d2d8:	ea 0f       	add	r30, r26
    d2da:	fb 1f       	adc	r31, r27
    d2dc:	60 81       	ld	r22, Z
    d2de:	71 81       	ldd	r23, Z+1	; 0x01
    d2e0:	25 c0       	rjmp	.+74     	; 0xd32c <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d2e2:	cb 01       	movw	r24, r22
    d2e4:	82 1b       	sub	r24, r18
    d2e6:	93 0b       	sbc	r25, r19
    d2e8:	81 70       	andi	r24, 0x01	; 1
    d2ea:	99 27       	eor	r25, r25
    d2ec:	68 1b       	sub	r22, r24
    d2ee:	79 0b       	sbc	r23, r25
    d2f0:	1d c0       	rjmp	.+58     	; 0xd32c <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d2f2:	60 51       	subi	r22, 0x10	; 16
    d2f4:	71 09       	sbc	r23, r1
    d2f6:	1a c0       	rjmp	.+52     	; 0xd32c <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d2f8:	60 52       	subi	r22, 0x20	; 32
    d2fa:	71 09       	sbc	r23, r1
    d2fc:	17 c0       	rjmp	.+46     	; 0xd32c <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d2fe:	60 53       	subi	r22, 0x30	; 48
    d300:	71 09       	sbc	r23, r1
    d302:	14 c0       	rjmp	.+40     	; 0xd32c <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d304:	6a 51       	subi	r22, 0x1A	; 26
    d306:	71 09       	sbc	r23, r1
    d308:	11 c0       	rjmp	.+34     	; 0xd32c <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d30a:	68 5f       	subi	r22, 0xF8	; 248
    d30c:	7f 4f       	sbci	r23, 0xFF	; 255
    d30e:	0e c0       	rjmp	.+28     	; 0xd32c <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d310:	60 55       	subi	r22, 0x50	; 80
    d312:	71 09       	sbc	r23, r1
    d314:	0b c0       	rjmp	.+22     	; 0xd32c <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d316:	60 56       	subi	r22, 0x60	; 96
    d318:	7c 41       	sbci	r23, 0x1C	; 28
    d31a:	08 c0       	rjmp	.+16     	; 0xd32c <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d31c:	ef 2b       	or	r30, r31
    d31e:	09 f0       	breq	.+2      	; 0xd322 <ff_wtoupper+0xb4>
    d320:	b6 cf       	rjmp	.-148    	; 0xd28e <ff_wtoupper+0x20>
    d322:	88 0f       	add	r24, r24
    d324:	99 1f       	adc	r25, r25
    d326:	a8 0f       	add	r26, r24
    d328:	b9 1f       	adc	r27, r25
    d32a:	b1 cf       	rjmp	.-158    	; 0xd28e <ff_wtoupper+0x20>
		}
		uni = uc;
    d32c:	80 e0       	ldi	r24, 0x00	; 0
    d32e:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d330:	08 95       	ret

0000d332 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d332:	81 11       	cpse	r24, r1
    d334:	02 c0       	rjmp	.+4      	; 0xd33a <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d336:	a1 c1       	rjmp	.+834    	; 0xd67a <mmc_disk_status>
    d338:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d33a:	81 e0       	ldi	r24, 0x01	; 1
}
    d33c:	08 95       	ret

0000d33e <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d33e:	81 11       	cpse	r24, r1
    d340:	02 c0       	rjmp	.+4      	; 0xd346 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d342:	f6 c0       	rjmp	.+492    	; 0xd530 <mmc_disk_initialize>
    d344:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d346:	81 e0       	ldi	r24, 0x01	; 1
}
    d348:	08 95       	ret

0000d34a <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d34a:	0f 93       	push	r16
    d34c:	1f 93       	push	r17
    d34e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d350:	81 11       	cpse	r24, r1
    d352:	06 c0       	rjmp	.+12     	; 0xd360 <disk_read+0x16>
    d354:	ba 01       	movw	r22, r20
    d356:	a9 01       	movw	r20, r18
    d358:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d35a:	98 01       	movw	r18, r16
    d35c:	91 d1       	rcall	.+802    	; 0xd680 <mmc_disk_read>
    d35e:	02 c0       	rjmp	.+4      	; 0xd364 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d360:	84 e0       	ldi	r24, 0x04	; 4
    d362:	90 e0       	ldi	r25, 0x00	; 0
}
    d364:	1f 91       	pop	r17
    d366:	0f 91       	pop	r16
    d368:	08 95       	ret

0000d36a <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d36a:	0f 93       	push	r16
    d36c:	1f 93       	push	r17
    d36e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d370:	81 11       	cpse	r24, r1
    d372:	06 c0       	rjmp	.+12     	; 0xd380 <disk_write+0x16>
    d374:	ba 01       	movw	r22, r20
    d376:	a9 01       	movw	r20, r18
    d378:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d37a:	98 01       	movw	r18, r16
    d37c:	e2 d1       	rcall	.+964    	; 0xd742 <mmc_disk_write>
    d37e:	02 c0       	rjmp	.+4      	; 0xd384 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d380:	84 e0       	ldi	r24, 0x04	; 4
    d382:	90 e0       	ldi	r25, 0x00	; 0
}
    d384:	1f 91       	pop	r17
    d386:	0f 91       	pop	r16
    d388:	08 95       	ret

0000d38a <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d38a:	96 2f       	mov	r25, r22
    switch (pdrv)
    d38c:	81 11       	cpse	r24, r1
    d38e:	04 c0       	rjmp	.+8      	; 0xd398 <disk_ioctl+0xe>
    d390:	ba 01       	movw	r22, r20
    d392:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d394:	4a c2       	rjmp	.+1172   	; 0xd82a <mmc_disk_ioctl>
    d396:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d398:	84 e0       	ldi	r24, 0x04	; 4
    d39a:	90 e0       	ldi	r25, 0x00	; 0
}
    d39c:	08 95       	ret

0000d39e <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d39e:	f9 c4       	rjmp	.+2546   	; 0xdd92 <mmc_spi_TXRX>
    return dat;
}
    d3a0:	08 95       	ret

0000d3a2 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d3a2:	ce d4       	rcall	.+2460   	; 0xdd40 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3a4:	8f ef       	ldi	r24, 0xFF	; 255
    d3a6:	fb df       	rcall	.-10     	; 0xd39e <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d3a8:	8f ef       	ldi	r24, 0xFF	; 255
    d3aa:	f9 cf       	rjmp	.-14     	; 0xd39e <xchg_spi>
    d3ac:	08 95       	ret

0000d3ae <rcvr_datablock>:
    d3ae:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d3b0:	1f 93       	push	r17
    d3b2:	cf 93       	push	r28
    d3b4:	df 93       	push	r29
    d3b6:	ec 01       	movw	r28, r24
    d3b8:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d3ba:	88 ee       	ldi	r24, 0xE8	; 232
    d3bc:	93 e0       	ldi	r25, 0x03	; 3
    d3be:	ec d4       	rcall	.+2520   	; 0xdd98 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3c0:	8f ef       	ldi	r24, 0xFF	; 255
    d3c2:	e7 d4       	rcall	.+2510   	; 0xdd92 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d3c4:	8f 3f       	cpi	r24, 0xFF	; 255
    d3c6:	31 f4       	brne	.+12     	; 0xd3d4 <rcvr_datablock+0x26>
    d3c8:	ee d4       	rcall	.+2524   	; 0xdda6 <mmc_test_timeout>
    d3ca:	89 2b       	or	r24, r25
    d3cc:	c9 f3       	breq	.-14     	; 0xd3c0 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d3ce:	80 e0       	ldi	r24, 0x00	; 0
    d3d0:	90 e0       	ldi	r25, 0x00	; 0
    d3d2:	0b c0       	rjmp	.+22     	; 0xd3ea <rcvr_datablock+0x3c>
    d3d4:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d3d6:	d9 f7       	brne	.-10     	; 0xd3ce <rcvr_datablock+0x20>
    d3d8:	b8 01       	movw	r22, r16
    d3da:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d3dc:	d7 d4       	rcall	.+2478   	; 0xdd8c <mmc_spi_RX_buffer>
    d3de:	8f ef       	ldi	r24, 0xFF	; 255
    d3e0:	de df       	rcall	.-68     	; 0xd39e <xchg_spi>
    xchg_spi(0xFF);
    d3e2:	8f ef       	ldi	r24, 0xFF	; 255
    d3e4:	dc df       	rcall	.-72     	; 0xd39e <xchg_spi>
    d3e6:	81 e0       	ldi	r24, 0x01	; 1
    d3e8:	90 e0       	ldi	r25, 0x00	; 0
    d3ea:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d3ec:	cf 91       	pop	r28
    d3ee:	1f 91       	pop	r17
    d3f0:	0f 91       	pop	r16
    d3f2:	08 95       	ret

0000d3f4 <wait_ready>:
    d3f4:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d3f6:	d0 d4       	rcall	.+2464   	; 0xdd98 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3f8:	8f ef       	ldi	r24, 0xFF	; 255
    d3fa:	cb d4       	rcall	.+2454   	; 0xdd92 <mmc_spi_TXRX>
    d3fc:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d3fe:	8f 3f       	cpi	r24, 0xFF	; 255
    d400:	19 f0       	breq	.+6      	; 0xd408 <wait_ready+0x14>
    d402:	d1 d4       	rcall	.+2466   	; 0xdda6 <mmc_test_timeout>
    d404:	89 2b       	or	r24, r25
    d406:	c1 f3       	breq	.-16     	; 0xd3f8 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d408:	81 e0       	ldi	r24, 0x01	; 1
    d40a:	90 e0       	ldi	r25, 0x00	; 0
    d40c:	cf 3f       	cpi	r28, 0xFF	; 255
    d40e:	11 f0       	breq	.+4      	; 0xd414 <wait_ready+0x20>
    d410:	80 e0       	ldi	r24, 0x00	; 0
    d412:	90 e0       	ldi	r25, 0x00	; 0
}
    d414:	cf 91       	pop	r28
    d416:	08 95       	ret

0000d418 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d418:	cf 93       	push	r28
    d41a:	df 93       	push	r29
    d41c:	00 d0       	rcall	.+0      	; 0xd41e <select+0x6>
    d41e:	1f 92       	push	r1
    CS_LOW();
    d420:	82 d4       	rcall	.+2308   	; 0xdd26 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d422:	8f ef       	ldi	r24, 0xFF	; 255
    d424:	bc df       	rcall	.-136    	; 0xd39e <xchg_spi>

    if (wait_ready(1000))
    d426:	88 ee       	ldi	r24, 0xE8	; 232
    d428:	93 e0       	ldi	r25, 0x03	; 3
    d42a:	e4 df       	rcall	.-56     	; 0xd3f4 <wait_ready>
    d42c:	ec 01       	movw	r28, r24
    d42e:	89 2b       	or	r24, r25
    d430:	61 f4       	brne	.+24     	; 0xd44a <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d432:	89 e6       	ldi	r24, 0x69	; 105
    d434:	97 e0       	ldi	r25, 0x07	; 7
    d436:	a0 e0       	ldi	r26, 0x00	; 0
    d438:	ed b7       	in	r30, 0x3d	; 61
    d43a:	fe b7       	in	r31, 0x3e	; 62
    d43c:	81 83       	std	Z+1, r24	; 0x01
    d43e:	92 83       	std	Z+2, r25	; 0x02
    d440:	a3 83       	std	Z+3, r26	; 0x03
    d442:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    deselect();
    d446:	ad df       	rcall	.-166    	; 0xd3a2 <deselect>
    d448:	02 c0       	rjmp	.+4      	; 0xd44e <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d44a:	c1 e0       	ldi	r28, 0x01	; 1
    d44c:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d44e:	ce 01       	movw	r24, r28
    d450:	cd b7       	in	r28, 0x3d	; 61
    d452:	de b7       	in	r29, 0x3e	; 62
    d454:	23 96       	adiw	r28, 0x03	; 3
    d456:	e2 e0       	ldi	r30, 0x02	; 2
    d458:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000d45c <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d45c:	ff 92       	push	r15
    d45e:	0f 93       	push	r16
    d460:	1f 93       	push	r17
    d462:	cf 93       	push	r28
    d464:	df 93       	push	r29
    d466:	c8 2f       	mov	r28, r24
    d468:	d4 2f       	mov	r29, r20
    d46a:	15 2f       	mov	r17, r21
    d46c:	06 2f       	mov	r16, r22
    d46e:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d470:	87 ff       	sbrs	r24, 7
    d472:	08 c0       	rjmp	.+16     	; 0xd484 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d474:	40 e0       	ldi	r20, 0x00	; 0
    d476:	50 e0       	ldi	r21, 0x00	; 0
    d478:	ba 01       	movw	r22, r20
    d47a:	87 e3       	ldi	r24, 0x37	; 55
    d47c:	ef df       	rcall	.-34     	; 0xd45c <send_cmd>
        if (res > 1) return res;
    d47e:	82 30       	cpi	r24, 0x02	; 2
    d480:	58 f5       	brcc	.+86     	; 0xd4d8 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d482:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d484:	cc 30       	cpi	r28, 0x0C	; 12
    d486:	71 f4       	brne	.+28     	; 0xd4a4 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d488:	8c 2f       	mov	r24, r28
    d48a:	80 64       	ori	r24, 0x40	; 64
    d48c:	88 df       	rcall	.-240    	; 0xd39e <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d48e:	8f 2d       	mov	r24, r15
    d490:	86 df       	rcall	.-244    	; 0xd39e <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d492:	80 2f       	mov	r24, r16
    d494:	84 df       	rcall	.-248    	; 0xd39e <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d496:	81 2f       	mov	r24, r17
    d498:	82 df       	rcall	.-252    	; 0xd39e <xchg_spi>
    d49a:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d49c:	80 df       	rcall	.-256    	; 0xd39e <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d49e:	cc 23       	and	r28, r28
    d4a0:	c9 f0       	breq	.+50     	; 0xd4d4 <send_cmd+0x78>
    d4a2:	06 c0       	rjmp	.+12     	; 0xd4b0 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d4a4:	7e df       	rcall	.-260    	; 0xd3a2 <deselect>
    d4a6:	b8 df       	rcall	.-144    	; 0xd418 <select>
        if (!select()) return 0xFF;
    d4a8:	89 2b       	or	r24, r25
    d4aa:	71 f7       	brne	.-36     	; 0xd488 <send_cmd+0x2c>
    d4ac:	8f ef       	ldi	r24, 0xFF	; 255
    d4ae:	14 c0       	rjmp	.+40     	; 0xd4d8 <send_cmd+0x7c>
    d4b0:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d4b2:	11 f4       	brne	.+4      	; 0xd4b8 <send_cmd+0x5c>
    d4b4:	87 e8       	ldi	r24, 0x87	; 135
    d4b6:	01 c0       	rjmp	.+2      	; 0xd4ba <send_cmd+0x5e>

    xchg_spi(n);
    d4b8:	81 e0       	ldi	r24, 0x01	; 1
    d4ba:	71 df       	rcall	.-286    	; 0xd39e <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d4bc:	cc 30       	cpi	r28, 0x0C	; 12
    d4be:	11 f4       	brne	.+4      	; 0xd4c4 <send_cmd+0x68>
    d4c0:	8f ef       	ldi	r24, 0xFF	; 255
    d4c2:	6d df       	rcall	.-294    	; 0xd39e <xchg_spi>
    d4c4:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d4c6:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d4c8:	64 d4       	rcall	.+2248   	; 0xdd92 <mmc_spi_TXRX>
    d4ca:	87 ff       	sbrs	r24, 7
    d4cc:	05 c0       	rjmp	.+10     	; 0xd4d8 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d4ce:	c1 50       	subi	r28, 0x01	; 1
    d4d0:	d1 f7       	brne	.-12     	; 0xd4c6 <send_cmd+0x6a>
    d4d2:	02 c0       	rjmp	.+4      	; 0xd4d8 <send_cmd+0x7c>
    d4d4:	85 e9       	ldi	r24, 0x95	; 149
    d4d6:	f5 cf       	rjmp	.-22     	; 0xd4c2 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d4d8:	cd b7       	in	r28, 0x3d	; 61
    d4da:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d4dc:	e5 e0       	ldi	r30, 0x05	; 5
    d4de:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__epilogue_restores__+0x1a>

0000d4e2 <xmit_datablock>:
    d4e2:	0f 93       	push	r16
    d4e4:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d4e6:	cf 93       	push	r28
    d4e8:	8c 01       	movw	r16, r24
    d4ea:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d4ec:	88 ee       	ldi	r24, 0xE8	; 232
    d4ee:	93 e0       	ldi	r25, 0x03	; 3
    d4f0:	81 df       	rcall	.-254    	; 0xd3f4 <wait_ready>
    d4f2:	00 97       	sbiw	r24, 0x00	; 0
    d4f4:	c9 f0       	breq	.+50     	; 0xd528 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d4f6:	8c 2f       	mov	r24, r28
    d4f8:	52 df       	rcall	.-348    	; 0xd39e <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d4fa:	cd 3f       	cpi	r28, 0xFD	; 253
    d4fc:	99 f0       	breq	.+38     	; 0xd524 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d4fe:	60 e0       	ldi	r22, 0x00	; 0
    d500:	72 e0       	ldi	r23, 0x02	; 2
    d502:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d504:	40 d4       	rcall	.+2176   	; 0xdd86 <mmc_spi_TX_buffer>
    d506:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d508:	4a df       	rcall	.-364    	; 0xd39e <xchg_spi>
    d50a:	8f ef       	ldi	r24, 0xFF	; 255
    d50c:	48 df       	rcall	.-368    	; 0xd39e <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d50e:	8f ef       	ldi	r24, 0xFF	; 255
    d510:	40 d4       	rcall	.+2176   	; 0xdd92 <mmc_spi_TXRX>
    d512:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d514:	31 e0       	ldi	r19, 0x01	; 1
    d516:	20 e0       	ldi	r18, 0x00	; 0
    d518:	85 30       	cpi	r24, 0x05	; 5
    d51a:	09 f0       	breq	.+2      	; 0xd51e <xmit_datablock+0x3c>
    d51c:	30 e0       	ldi	r19, 0x00	; 0
    d51e:	83 2f       	mov	r24, r19
    d520:	92 2f       	mov	r25, r18
    d522:	02 c0       	rjmp	.+4      	; 0xd528 <xmit_datablock+0x46>
    d524:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d526:	90 e0       	ldi	r25, 0x00	; 0
    d528:	cf 91       	pop	r28
}
    d52a:	1f 91       	pop	r17
    d52c:	0f 91       	pop	r16
    d52e:	08 95       	ret

0000d530 <mmc_disk_initialize>:
    d530:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d532:	b0 e0       	ldi	r27, 0x00	; 0
    d534:	ee e9       	ldi	r30, 0x9E	; 158
    d536:	fa e6       	ldi	r31, 0x6A	; 106
    d538:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d53c:	59 d4       	rcall	.+2226   	; 0xddf0 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d53e:	64 e6       	ldi	r22, 0x64	; 100
    d540:	70 e0       	ldi	r23, 0x00	; 0
    d542:	80 e0       	ldi	r24, 0x00	; 0
    d544:	90 e0       	ldi	r25, 0x00	; 0
    d546:	0e 94 65 28 	call	0x50ca	; 0x50ca <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d54a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d54e:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d550:	8e c0       	rjmp	.+284    	; 0xd66e <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d552:	4d d4       	rcall	.+2202   	; 0xddee <mmc_power_on>
    d554:	f9 d3       	rcall	.+2034   	; 0xdd48 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d556:	1a e0       	ldi	r17, 0x0A	; 10
    d558:	8f ef       	ldi	r24, 0xFF	; 255
    d55a:	21 df       	rcall	.-446    	; 0xd39e <xchg_spi>
    d55c:	11 50       	subi	r17, 0x01	; 1
    d55e:	e1 f7       	brne	.-8      	; 0xd558 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d560:	40 e0       	ldi	r20, 0x00	; 0
    d562:	50 e0       	ldi	r21, 0x00	; 0
    d564:	ba 01       	movw	r22, r20
    d566:	80 e0       	ldi	r24, 0x00	; 0
    d568:	79 df       	rcall	.-270    	; 0xd45c <send_cmd>
    d56a:	81 30       	cpi	r24, 0x01	; 1
    d56c:	09 f0       	breq	.+2      	; 0xd570 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d56e:	6f c0       	rjmp	.+222    	; 0xd64e <mmc_disk_initialize+0x11e>
    d570:	80 ed       	ldi	r24, 0xD0	; 208
    d572:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d574:	11 d4       	rcall	.+2082   	; 0xdd98 <mmc_set_ms_timeout>
    d576:	4a ea       	ldi	r20, 0xAA	; 170
    d578:	51 e0       	ldi	r21, 0x01	; 1
    d57a:	60 e0       	ldi	r22, 0x00	; 0
    d57c:	70 e0       	ldi	r23, 0x00	; 0
    d57e:	88 e0       	ldi	r24, 0x08	; 8
    d580:	6d df       	rcall	.-294    	; 0xd45c <send_cmd>
    d582:	81 30       	cpi	r24, 0x01	; 1
    d584:	09 f0       	breq	.+2      	; 0xd588 <mmc_disk_initialize+0x58>
    d586:	3d c0       	rjmp	.+122    	; 0xd602 <mmc_disk_initialize+0xd2>
    d588:	8e 01       	movw	r16, r28
    d58a:	0f 5f       	subi	r16, 0xFF	; 255
    d58c:	1f 4f       	sbci	r17, 0xFF	; 255
    d58e:	6e 01       	movw	r12, r28
    d590:	85 e0       	ldi	r24, 0x05	; 5
    d592:	c8 0e       	add	r12, r24
    d594:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d596:	78 01       	movw	r14, r16
    d598:	8f ef       	ldi	r24, 0xFF	; 255
    d59a:	fb d3       	rcall	.+2038   	; 0xdd92 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d59c:	f7 01       	movw	r30, r14
    d59e:	81 93       	st	Z+, r24
    d5a0:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d5a2:	ce 16       	cp	r12, r30
    d5a4:	df 06       	cpc	r13, r31
    d5a6:	c1 f7       	brne	.-16     	; 0xd598 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d5a8:	8b 81       	ldd	r24, Y+3	; 0x03
    d5aa:	81 30       	cpi	r24, 0x01	; 1
    d5ac:	09 f0       	breq	.+2      	; 0xd5b0 <mmc_disk_initialize+0x80>
    d5ae:	4f c0       	rjmp	.+158    	; 0xd64e <mmc_disk_initialize+0x11e>
    d5b0:	8c 81       	ldd	r24, Y+4	; 0x04
    d5b2:	8a 3a       	cpi	r24, 0xAA	; 170
    d5b4:	09 f0       	breq	.+2      	; 0xd5b8 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d5b6:	4b c0       	rjmp	.+150    	; 0xd64e <mmc_disk_initialize+0x11e>
    d5b8:	f6 d3       	rcall	.+2028   	; 0xdda6 <mmc_test_timeout>
    d5ba:	89 2b       	or	r24, r25
    d5bc:	29 f0       	breq	.+10     	; 0xd5c8 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d5be:	f3 d3       	rcall	.+2022   	; 0xdda6 <mmc_test_timeout>
    d5c0:	89 2b       	or	r24, r25
    d5c2:	09 f0       	breq	.+2      	; 0xd5c6 <mmc_disk_initialize+0x96>
    d5c4:	44 c0       	rjmp	.+136    	; 0xd64e <mmc_disk_initialize+0x11e>
    d5c6:	09 c0       	rjmp	.+18     	; 0xd5da <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d5c8:	40 e0       	ldi	r20, 0x00	; 0
    d5ca:	50 e0       	ldi	r21, 0x00	; 0
    d5cc:	60 e0       	ldi	r22, 0x00	; 0
    d5ce:	70 e4       	ldi	r23, 0x40	; 64
    d5d0:	89 ea       	ldi	r24, 0xA9	; 169
    d5d2:	44 df       	rcall	.-376    	; 0xd45c <send_cmd>
    d5d4:	81 11       	cpse	r24, r1
    d5d6:	f0 cf       	rjmp	.-32     	; 0xd5b8 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d5d8:	f2 cf       	rjmp	.-28     	; 0xd5be <mmc_disk_initialize+0x8e>
    d5da:	40 e0       	ldi	r20, 0x00	; 0
    d5dc:	50 e0       	ldi	r21, 0x00	; 0
    d5de:	ba 01       	movw	r22, r20
    d5e0:	8a e3       	ldi	r24, 0x3A	; 58
    d5e2:	3c df       	rcall	.-392    	; 0xd45c <send_cmd>
    d5e4:	81 11       	cpse	r24, r1
    d5e6:	33 c0       	rjmp	.+102    	; 0xd64e <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5e8:	8f ef       	ldi	r24, 0xFF	; 255
    d5ea:	d3 d3       	rcall	.+1958   	; 0xdd92 <mmc_spi_TXRX>
    d5ec:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d5ee:	81 93       	st	Z+, r24
    d5f0:	8f 01       	movw	r16, r30
    d5f2:	ce 16       	cp	r12, r30
    d5f4:	df 06       	cpc	r13, r31
    d5f6:	c1 f7       	brne	.-16     	; 0xd5e8 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d5f8:	89 81       	ldd	r24, Y+1	; 0x01
    d5fa:	86 fd       	sbrc	r24, 6
    d5fc:	2a c0       	rjmp	.+84     	; 0xd652 <mmc_disk_initialize+0x122>
    d5fe:	14 e0       	ldi	r17, 0x04	; 4
    d600:	29 c0       	rjmp	.+82     	; 0xd654 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d602:	80 ed       	ldi	r24, 0xD0	; 208
    d604:	97 e0       	ldi	r25, 0x07	; 7
    d606:	c8 d3       	rcall	.+1936   	; 0xdd98 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d608:	40 e0       	ldi	r20, 0x00	; 0
    d60a:	50 e0       	ldi	r21, 0x00	; 0
    d60c:	ba 01       	movw	r22, r20
    d60e:	89 ea       	ldi	r24, 0xA9	; 169
    d610:	25 df       	rcall	.-438    	; 0xd45c <send_cmd>
    d612:	82 30       	cpi	r24, 0x02	; 2
    d614:	18 f0       	brcs	.+6      	; 0xd61c <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d616:	11 e0       	ldi	r17, 0x01	; 1
    d618:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d61a:	02 c0       	rjmp	.+4      	; 0xd620 <mmc_disk_initialize+0xf0>
    d61c:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d61e:	09 ea       	ldi	r16, 0xA9	; 169
    d620:	c2 d3       	rcall	.+1924   	; 0xdda6 <mmc_test_timeout>
    d622:	89 2b       	or	r24, r25
    d624:	21 f0       	breq	.+8      	; 0xd62e <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d626:	bf d3       	rcall	.+1918   	; 0xdda6 <mmc_test_timeout>
    d628:	89 2b       	or	r24, r25
    d62a:	89 f4       	brne	.+34     	; 0xd64e <mmc_disk_initialize+0x11e>
    d62c:	08 c0       	rjmp	.+16     	; 0xd63e <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d62e:	40 e0       	ldi	r20, 0x00	; 0
    d630:	50 e0       	ldi	r21, 0x00	; 0
    d632:	ba 01       	movw	r22, r20
    d634:	80 2f       	mov	r24, r16
    d636:	12 df       	rcall	.-476    	; 0xd45c <send_cmd>
    d638:	81 11       	cpse	r24, r1
    d63a:	f2 cf       	rjmp	.-28     	; 0xd620 <mmc_disk_initialize+0xf0>
    d63c:	f4 cf       	rjmp	.-24     	; 0xd626 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d63e:	40 e0       	ldi	r20, 0x00	; 0
    d640:	52 e0       	ldi	r21, 0x02	; 2
    d642:	60 e0       	ldi	r22, 0x00	; 0
    d644:	70 e0       	ldi	r23, 0x00	; 0
    d646:	80 e1       	ldi	r24, 0x10	; 16
    d648:	09 df       	rcall	.-494    	; 0xd45c <send_cmd>
    d64a:	88 23       	and	r24, r24
                ty = 0;
    d64c:	19 f0       	breq	.+6      	; 0xd654 <mmc_disk_initialize+0x124>
    d64e:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d650:	01 c0       	rjmp	.+2      	; 0xd654 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d652:	1c e0       	ldi	r17, 0x0C	; 12
    d654:	10 93 23 18 	sts	0x1823, r17	; 0x801823 <CardType>
    deselect();
    d658:	a4 de       	rcall	.-696    	; 0xd3a2 <deselect>

    if (ty)                                       /* Initialization succeded */
    d65a:	11 23       	and	r17, r17
    d65c:	39 f0       	breq	.+14     	; 0xd66c <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d65e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d662:	8e 7f       	andi	r24, 0xFE	; 254
    d664:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d668:	81 d3       	rcall	.+1794   	; 0xdd6c <mmc_fast>
    d66a:	01 c0       	rjmp	.+2      	; 0xd66e <mmc_disk_initialize+0x13e>
    d66c:	c1 d3       	rcall	.+1922   	; 0xddf0 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d66e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d672:	24 96       	adiw	r28, 0x04	; 4
    d674:	e8 e0       	ldi	r30, 0x08	; 8
}
    d676:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000d67a <mmc_disk_status>:
    d67a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d67e:	08 95       	ret

0000d680 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d680:	8f 92       	push	r8
    d682:	9f 92       	push	r9
    d684:	af 92       	push	r10
    d686:	bf 92       	push	r11
    d688:	ef 92       	push	r14
    d68a:	ff 92       	push	r15
    d68c:	1f 93       	push	r17
    d68e:	cf 93       	push	r28
    d690:	df 93       	push	r29
    d692:	7c 01       	movw	r14, r24
    d694:	4a 01       	movw	r8, r20
    d696:	5b 01       	movw	r10, r22
    d698:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d69a:	20 97       	sbiw	r28, 0x00	; 0
    d69c:	19 f4       	brne	.+6      	; 0xd6a4 <mmc_disk_read+0x24>
    {
        deselect();
    d69e:	81 de       	rcall	.-766    	; 0xd3a2 <deselect>
        return RES_PARERR;
    d6a0:	84 e0       	ldi	r24, 0x04	; 4
    d6a2:	0d c0       	rjmp	.+26     	; 0xd6be <mmc_disk_read+0x3e>
    }

	if( Stat )
    d6a4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6a8:	88 23       	and	r24, r24
    d6aa:	19 f0       	breq	.+6      	; 0xd6b2 <mmc_disk_read+0x32>
		set_error(1);
    d6ac:	81 e0       	ldi	r24, 0x01	; 1
    d6ae:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <set_error>

    if (Stat & STA_NOINIT)
    d6b2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6b6:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d6b8:	04 c0       	rjmp	.+8      	; 0xd6c2 <mmc_disk_read+0x42>
    d6ba:	73 de       	rcall	.-794    	; 0xd3a2 <deselect>
        return RES_NOTRDY;
    d6bc:	83 e0       	ldi	r24, 0x03	; 3
    d6be:	90 e0       	ldi	r25, 0x00	; 0
    d6c0:	36 c0       	rjmp	.+108    	; 0xd72e <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d6c2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6c6:	81 fd       	sbrc	r24, 1
    d6c8:	f8 cf       	rjmp	.-16     	; 0xd6ba <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d6ca:	46 9a       	sbi	0x08, 6	; 8
    d6cc:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d6ce:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d6d2:	83 fd       	sbrc	r24, 3
    d6d4:	07 c0       	rjmp	.+14     	; 0xd6e4 <mmc_disk_read+0x64>
    d6d6:	89 e0       	ldi	r24, 0x09	; 9
    d6d8:	88 0c       	add	r8, r8
    d6da:	99 1c       	adc	r9, r9
    d6dc:	aa 1c       	adc	r10, r10
    d6de:	bb 1c       	adc	r11, r11
    d6e0:	8a 95       	dec	r24
    d6e2:	d1 f7       	brne	.-12     	; 0xd6d8 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d6e4:	c2 30       	cpi	r28, 0x02	; 2
    d6e6:	d1 05       	cpc	r29, r1
    d6e8:	10 f4       	brcc	.+4      	; 0xd6ee <mmc_disk_read+0x6e>
    d6ea:	11 e1       	ldi	r17, 0x11	; 17
    d6ec:	01 c0       	rjmp	.+2      	; 0xd6f0 <mmc_disk_read+0x70>
    d6ee:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d6f0:	b5 01       	movw	r22, r10
    d6f2:	a4 01       	movw	r20, r8
    d6f4:	81 2f       	mov	r24, r17
    d6f6:	b2 de       	rcall	.-668    	; 0xd45c <send_cmd>
    d6f8:	81 11       	cpse	r24, r1
    d6fa:	11 c0       	rjmp	.+34     	; 0xd71e <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d6fc:	60 e0       	ldi	r22, 0x00	; 0
    d6fe:	72 e0       	ldi	r23, 0x02	; 2
    d700:	c7 01       	movw	r24, r14
    d702:	55 de       	rcall	.-854    	; 0xd3ae <rcvr_datablock>
    d704:	89 2b       	or	r24, r25
    d706:	21 f0       	breq	.+8      	; 0xd710 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d708:	8e ef       	ldi	r24, 0xFE	; 254
    d70a:	f8 1a       	sub	r15, r24
        } while (--count);
    d70c:	21 97       	sbiw	r28, 0x01	; 1
    d70e:	b1 f7       	brne	.-20     	; 0xd6fc <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d710:	12 31       	cpi	r17, 0x12	; 18
    d712:	29 f4       	brne	.+10     	; 0xd71e <mmc_disk_read+0x9e>
    d714:	40 e0       	ldi	r20, 0x00	; 0
    d716:	50 e0       	ldi	r21, 0x00	; 0
    d718:	ba 01       	movw	r22, r20
    d71a:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d71c:	9f de       	rcall	.-706    	; 0xd45c <send_cmd>
    d71e:	41 de       	rcall	.-894    	; 0xd3a2 <deselect>
    GPIO_PIN_LOW(LED1);
    d720:	46 98       	cbi	0x08, 6	; 8
    d722:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d724:	81 e0       	ldi	r24, 0x01	; 1
    d726:	90 e0       	ldi	r25, 0x00	; 0
    d728:	cd 2b       	or	r28, r29
    d72a:	09 f4       	brne	.+2      	; 0xd72e <mmc_disk_read+0xae>
    d72c:	80 e0       	ldi	r24, 0x00	; 0
}
    d72e:	df 91       	pop	r29
    d730:	cf 91       	pop	r28
    d732:	1f 91       	pop	r17
    d734:	ff 90       	pop	r15
    d736:	ef 90       	pop	r14
    d738:	bf 90       	pop	r11
    d73a:	af 90       	pop	r10
    d73c:	9f 90       	pop	r9
    d73e:	8f 90       	pop	r8
    d740:	08 95       	ret

0000d742 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d742:	a0 e0       	ldi	r26, 0x00	; 0
    d744:	b0 e0       	ldi	r27, 0x00	; 0
    d746:	e7 ea       	ldi	r30, 0xA7	; 167
    d748:	fb e6       	ldi	r31, 0x6B	; 107
    d74a:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    d74e:	8c 01       	movw	r16, r24
    d750:	6a 01       	movw	r12, r20
    d752:	7b 01       	movw	r14, r22
    d754:	e9 01       	movw	r28, r18
    if (!count)
    d756:	20 97       	sbiw	r28, 0x00	; 0
    d758:	19 f4       	brne	.+6      	; 0xd760 <mmc_disk_write+0x1e>
    {
        deselect();
    d75a:	23 de       	rcall	.-954    	; 0xd3a2 <deselect>
        return RES_PARERR;
    d75c:	84 e0       	ldi	r24, 0x04	; 4
    d75e:	18 c0       	rjmp	.+48     	; 0xd790 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d760:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d764:	88 23       	and	r24, r24
    d766:	19 f0       	breq	.+6      	; 0xd76e <mmc_disk_write+0x2c>
		set_error(1);
    d768:	81 e0       	ldi	r24, 0x01	; 1
    d76a:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <set_error>

    if (Stat & STA_NOINIT)
    d76e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d772:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d774:	03 c0       	rjmp	.+6      	; 0xd77c <mmc_disk_write+0x3a>
    d776:	15 de       	rcall	.-982    	; 0xd3a2 <deselect>
        return RES_NOTRDY;
    d778:	83 e0       	ldi	r24, 0x03	; 3
    d77a:	0a c0       	rjmp	.+20     	; 0xd790 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d77c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d780:	81 fd       	sbrc	r24, 1
    d782:	f9 cf       	rjmp	.-14     	; 0xd776 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d784:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d788:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d78a:	04 c0       	rjmp	.+8      	; 0xd794 <mmc_disk_write+0x52>
    d78c:	0a de       	rcall	.-1004   	; 0xd3a2 <deselect>
        return RES_WRPRT;
    d78e:	82 e0       	ldi	r24, 0x02	; 2
    d790:	90 e0       	ldi	r25, 0x00	; 0
    d792:	46 c0       	rjmp	.+140    	; 0xd820 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d794:	46 9a       	sbi	0x08, 6	; 8
    d796:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d798:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d79c:	83 fd       	sbrc	r24, 3
    d79e:	07 c0       	rjmp	.+14     	; 0xd7ae <mmc_disk_write+0x6c>
    d7a0:	99 e0       	ldi	r25, 0x09	; 9
    d7a2:	cc 0c       	add	r12, r12
    d7a4:	dd 1c       	adc	r13, r13
    d7a6:	ee 1c       	adc	r14, r14
    d7a8:	ff 1c       	adc	r15, r15
    d7aa:	9a 95       	dec	r25
    d7ac:	d1 f7       	brne	.-12     	; 0xd7a2 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d7ae:	c1 30       	cpi	r28, 0x01	; 1
    d7b0:	d1 05       	cpc	r29, r1
    d7b2:	89 f4       	brne	.+34     	; 0xd7d6 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d7b4:	b7 01       	movw	r22, r14
    d7b6:	a6 01       	movw	r20, r12
    d7b8:	88 e1       	ldi	r24, 0x18	; 24
    d7ba:	50 de       	rcall	.-864    	; 0xd45c <send_cmd>
    d7bc:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d7be:	26 c0       	rjmp	.+76     	; 0xd80c <mmc_disk_write+0xca>
    d7c0:	6e ef       	ldi	r22, 0xFE	; 254
    d7c2:	c8 01       	movw	r24, r16
    d7c4:	8e de       	rcall	.-740    	; 0xd4e2 <xmit_datablock>
    d7c6:	31 e0       	ldi	r19, 0x01	; 1
    d7c8:	20 e0       	ldi	r18, 0x00	; 0
    d7ca:	89 2b       	or	r24, r25
    d7cc:	09 f0       	breq	.+2      	; 0xd7d0 <mmc_disk_write+0x8e>
    d7ce:	30 e0       	ldi	r19, 0x00	; 0
    d7d0:	c3 2f       	mov	r28, r19
    d7d2:	d2 2f       	mov	r29, r18
    d7d4:	1d c0       	rjmp	.+58     	; 0xd810 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d7d6:	86 70       	andi	r24, 0x06	; 6
    d7d8:	29 f0       	breq	.+10     	; 0xd7e4 <mmc_disk_write+0xa2>
    d7da:	ae 01       	movw	r20, r28
    d7dc:	60 e0       	ldi	r22, 0x00	; 0
    d7de:	70 e0       	ldi	r23, 0x00	; 0
    d7e0:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d7e2:	3c de       	rcall	.-904    	; 0xd45c <send_cmd>
    d7e4:	b7 01       	movw	r22, r14
    d7e6:	a6 01       	movw	r20, r12
    d7e8:	89 e1       	ldi	r24, 0x19	; 25
    d7ea:	38 de       	rcall	.-912    	; 0xd45c <send_cmd>
    d7ec:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d7ee:	10 c0       	rjmp	.+32     	; 0xd810 <mmc_disk_write+0xce>
    d7f0:	6c ef       	ldi	r22, 0xFC	; 252
    d7f2:	c8 01       	movw	r24, r16
    d7f4:	76 de       	rcall	.-788    	; 0xd4e2 <xmit_datablock>
    d7f6:	89 2b       	or	r24, r25
                buff += 512;
    d7f8:	19 f0       	breq	.+6      	; 0xd800 <mmc_disk_write+0xbe>
            } while (--count);
    d7fa:	1e 5f       	subi	r17, 0xFE	; 254
    d7fc:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d7fe:	c1 f7       	brne	.-16     	; 0xd7f0 <mmc_disk_write+0xae>
    d800:	6d ef       	ldi	r22, 0xFD	; 253
    d802:	80 e0       	ldi	r24, 0x00	; 0
    d804:	90 e0       	ldi	r25, 0x00	; 0
    d806:	6d de       	rcall	.-806    	; 0xd4e2 <xmit_datablock>
    d808:	89 2b       	or	r24, r25
                count = 1;
    d80a:	11 f4       	brne	.+4      	; 0xd810 <mmc_disk_write+0xce>
    d80c:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d80e:	d0 e0       	ldi	r29, 0x00	; 0
    d810:	c8 dd       	rcall	.-1136   	; 0xd3a2 <deselect>
    GPIO_PIN_LOW(LED1);
    d812:	46 98       	cbi	0x08, 6	; 8
    d814:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d816:	81 e0       	ldi	r24, 0x01	; 1
    d818:	90 e0       	ldi	r25, 0x00	; 0
    d81a:	cd 2b       	or	r28, r29
    d81c:	09 f4       	brne	.+2      	; 0xd820 <mmc_disk_write+0xde>
    d81e:	80 e0       	ldi	r24, 0x00	; 0
}
    d820:	cd b7       	in	r28, 0x3d	; 61
    d822:	de b7       	in	r29, 0x3e	; 62
    d824:	e8 e0       	ldi	r30, 0x08	; 8
    d826:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000d82a <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d82a:	a0 e1       	ldi	r26, 0x10	; 16
    d82c:	b0 e0       	ldi	r27, 0x00	; 0
    d82e:	eb e1       	ldi	r30, 0x1B	; 27
    d830:	fc e6       	ldi	r31, 0x6C	; 108
    d832:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d836:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d83a:	90 fd       	sbrc	r25, 0
    d83c:	31 c2       	rjmp	.+1122   	; 0xdca0 <mmc_disk_ioctl+0x476>
    d83e:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d840:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d844:	91 ff       	sbrs	r25, 1
    d846:	02 c0       	rjmp	.+4      	; 0xd84c <mmc_disk_ioctl+0x22>
    {
        deselect();
    d848:	ac dd       	rcall	.-1192   	; 0xd3a2 <deselect>
    d84a:	2a c2       	rjmp	.+1108   	; 0xdca0 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d84c:	83 33       	cpi	r24, 0x33	; 51
    d84e:	09 f4       	brne	.+2      	; 0xd852 <mmc_disk_ioctl+0x28>
    d850:	01 c1       	rjmp	.+514    	; 0xda54 <mmc_disk_ioctl+0x22a>
    d852:	a0 f4       	brcc	.+40     	; 0xd87c <mmc_disk_ioctl+0x52>
    d854:	83 30       	cpi	r24, 0x03	; 3
    d856:	09 f4       	brne	.+2      	; 0xd85a <mmc_disk_ioctl+0x30>
    d858:	85 c0       	rjmp	.+266    	; 0xd964 <mmc_disk_ioctl+0x13a>
    d85a:	28 f4       	brcc	.+10     	; 0xd866 <mmc_disk_ioctl+0x3c>
    d85c:	88 23       	and	r24, r24
    d85e:	11 f1       	breq	.+68     	; 0xd8a4 <mmc_disk_ioctl+0x7a>
    d860:	81 30       	cpi	r24, 0x01	; 1
    d862:	11 f1       	breq	.+68     	; 0xd8a8 <mmc_disk_ioctl+0x7e>
    d864:	1f c2       	rjmp	.+1086   	; 0xdca4 <mmc_disk_ioctl+0x47a>
    d866:	87 30       	cpi	r24, 0x07	; 7
    d868:	09 f4       	brne	.+2      	; 0xd86c <mmc_disk_ioctl+0x42>
    d86a:	2a c1       	rjmp	.+596    	; 0xdac0 <mmc_disk_ioctl+0x296>
    d86c:	82 33       	cpi	r24, 0x32	; 50
    d86e:	09 f0       	breq	.+2      	; 0xd872 <mmc_disk_ioctl+0x48>
    d870:	19 c2       	rjmp	.+1074   	; 0xdca4 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d872:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d876:	fb 01       	movw	r30, r22
    d878:	80 83       	st	Z, r24
    d87a:	28 c1       	rjmp	.+592    	; 0xdacc <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d87c:	86 33       	cpi	r24, 0x36	; 54
    d87e:	09 f4       	brne	.+2      	; 0xd882 <mmc_disk_ioctl+0x58>
    d880:	0c c1       	rjmp	.+536    	; 0xda9a <mmc_disk_ioctl+0x270>
    d882:	38 f4       	brcc	.+14     	; 0xd892 <mmc_disk_ioctl+0x68>
    d884:	84 33       	cpi	r24, 0x34	; 52
    d886:	09 f4       	brne	.+2      	; 0xd88a <mmc_disk_ioctl+0x60>
    d888:	ea c0       	rjmp	.+468    	; 0xda5e <mmc_disk_ioctl+0x234>
    d88a:	85 33       	cpi	r24, 0x35	; 53
    d88c:	09 f4       	brne	.+2      	; 0xd890 <mmc_disk_ioctl+0x66>
    d88e:	f1 c0       	rjmp	.+482    	; 0xda72 <mmc_disk_ioctl+0x248>
    d890:	09 c2       	rjmp	.+1042   	; 0xdca4 <mmc_disk_ioctl+0x47a>
    d892:	88 33       	cpi	r24, 0x38	; 56
    d894:	09 f4       	brne	.+2      	; 0xd898 <mmc_disk_ioctl+0x6e>
    d896:	74 c1       	rjmp	.+744    	; 0xdb80 <mmc_disk_ioctl+0x356>
    d898:	08 f4       	brcc	.+2      	; 0xd89c <mmc_disk_ioctl+0x72>
    d89a:	1a c1       	rjmp	.+564    	; 0xdad0 <mmc_disk_ioctl+0x2a6>
    d89c:	89 33       	cpi	r24, 0x39	; 57
    d89e:	09 f4       	brne	.+2      	; 0xd8a2 <mmc_disk_ioctl+0x78>
    d8a0:	bc c1       	rjmp	.+888    	; 0xdc1a <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d8a2:	00 c2       	rjmp	.+1024   	; 0xdca4 <mmc_disk_ioctl+0x47a>
    d8a4:	b9 dd       	rcall	.-1166   	; 0xd418 <select>
    d8a6:	06 c1       	rjmp	.+524    	; 0xdab4 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d8a8:	40 e0       	ldi	r20, 0x00	; 0
    d8aa:	50 e0       	ldi	r21, 0x00	; 0
    d8ac:	ba 01       	movw	r22, r20
    d8ae:	89 e0       	ldi	r24, 0x09	; 9
    d8b0:	d5 dd       	rcall	.-1110   	; 0xd45c <send_cmd>
    d8b2:	81 11       	cpse	r24, r1
    d8b4:	f1 c1       	rjmp	.+994    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    d8b6:	60 e1       	ldi	r22, 0x10	; 16
    d8b8:	70 e0       	ldi	r23, 0x00	; 0
    d8ba:	ce 01       	movw	r24, r28
    d8bc:	01 96       	adiw	r24, 0x01	; 1
    d8be:	77 dd       	rcall	.-1298   	; 0xd3ae <rcvr_datablock>
    d8c0:	89 2b       	or	r24, r25
    d8c2:	09 f4       	brne	.+2      	; 0xd8c6 <mmc_disk_ioctl+0x9c>
    d8c4:	e9 c1       	rjmp	.+978    	; 0xdc98 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d8c6:	99 81       	ldd	r25, Y+1	; 0x01
    d8c8:	92 95       	swap	r25
    d8ca:	96 95       	lsr	r25
    d8cc:	96 95       	lsr	r25
    d8ce:	93 70       	andi	r25, 0x03	; 3
    d8d0:	29 85       	ldd	r18, Y+9	; 0x09
    d8d2:	4a 85       	ldd	r20, Y+10	; 0x0a
    d8d4:	88 85       	ldd	r24, Y+8	; 0x08
    d8d6:	91 30       	cpi	r25, 0x01	; 1
    d8d8:	d9 f4       	brne	.+54     	; 0xd910 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d8da:	30 e0       	ldi	r19, 0x00	; 0
    d8dc:	32 2f       	mov	r19, r18
    d8de:	22 27       	eor	r18, r18
    d8e0:	24 0f       	add	r18, r20
    d8e2:	31 1d       	adc	r19, r1
    d8e4:	8f 73       	andi	r24, 0x3F	; 63
    d8e6:	90 e0       	ldi	r25, 0x00	; 0
    d8e8:	a0 e0       	ldi	r26, 0x00	; 0
    d8ea:	b0 e0       	ldi	r27, 0x00	; 0
    d8ec:	dc 01       	movw	r26, r24
    d8ee:	99 27       	eor	r25, r25
    d8f0:	88 27       	eor	r24, r24
    d8f2:	01 96       	adiw	r24, 0x01	; 1
    d8f4:	a1 1d       	adc	r26, r1
    d8f6:	b1 1d       	adc	r27, r1
    d8f8:	82 0f       	add	r24, r18
    d8fa:	93 1f       	adc	r25, r19
    d8fc:	a1 1d       	adc	r26, r1
    d8fe:	b1 1d       	adc	r27, r1
    d900:	fa e0       	ldi	r31, 0x0A	; 10
    d902:	88 0f       	add	r24, r24
    d904:	99 1f       	adc	r25, r25
    d906:	aa 1f       	adc	r26, r26
    d908:	bb 1f       	adc	r27, r27
    d90a:	fa 95       	dec	r31
    d90c:	d1 f7       	brne	.-12     	; 0xd902 <mmc_disk_ioctl+0xd8>
    d90e:	9b c0       	rjmp	.+310    	; 0xda46 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d910:	22 95       	swap	r18
    d912:	26 95       	lsr	r18
    d914:	26 95       	lsr	r18
    d916:	23 70       	andi	r18, 0x03	; 3
    d918:	f4 e0       	ldi	r31, 0x04	; 4
    d91a:	8f 9f       	mul	r24, r31
    d91c:	c0 01       	movw	r24, r0
    d91e:	11 24       	eor	r1, r1
    d920:	82 0f       	add	r24, r18
    d922:	91 1d       	adc	r25, r1
    d924:	01 96       	adiw	r24, 0x01	; 1
    d926:	2f 81       	ldd	r18, Y+7	; 0x07
    d928:	23 70       	andi	r18, 0x03	; 3
    d92a:	30 e0       	ldi	r19, 0x00	; 0
    d92c:	32 2f       	mov	r19, r18
    d92e:	22 27       	eor	r18, r18
    d930:	33 0f       	add	r19, r19
    d932:	33 0f       	add	r19, r19
    d934:	82 0f       	add	r24, r18
    d936:	93 1f       	adc	r25, r19
    d938:	a0 e0       	ldi	r26, 0x00	; 0
    d93a:	b0 e0       	ldi	r27, 0x00	; 0
    d93c:	2e 81       	ldd	r18, Y+6	; 0x06
    d93e:	32 2f       	mov	r19, r18
    d940:	3f 70       	andi	r19, 0x0F	; 15
    d942:	2b 85       	ldd	r18, Y+11	; 0x0b
    d944:	22 1f       	adc	r18, r18
    d946:	22 27       	eor	r18, r18
    d948:	22 1f       	adc	r18, r18
    d94a:	23 0f       	add	r18, r19
    d94c:	43 70       	andi	r20, 0x03	; 3
    d94e:	44 0f       	add	r20, r20
    d950:	42 0f       	add	r20, r18
    d952:	47 50       	subi	r20, 0x07	; 7
    d954:	04 c0       	rjmp	.+8      	; 0xd95e <mmc_disk_ioctl+0x134>
    d956:	88 0f       	add	r24, r24
    d958:	99 1f       	adc	r25, r25
    d95a:	aa 1f       	adc	r26, r26
    d95c:	bb 1f       	adc	r27, r27
    d95e:	4a 95       	dec	r20
    d960:	d2 f7       	brpl	.-12     	; 0xd956 <mmc_disk_ioctl+0x12c>
    d962:	71 c0       	rjmp	.+226    	; 0xda46 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d964:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d968:	40 e0       	ldi	r20, 0x00	; 0
    d96a:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d96c:	ba 01       	movw	r22, r20
    d96e:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d970:	24 c0       	rjmp	.+72     	; 0xd9ba <mmc_disk_ioctl+0x190>
    d972:	8d e8       	ldi	r24, 0x8D	; 141
    d974:	73 dd       	rcall	.-1306   	; 0xd45c <send_cmd>
    d976:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d978:	8f c1       	rjmp	.+798    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    d97a:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d97c:	10 dd       	rcall	.-1504   	; 0xd39e <xchg_spi>
    d97e:	60 e1       	ldi	r22, 0x10	; 16
    d980:	70 e0       	ldi	r23, 0x00	; 0
    d982:	ce 01       	movw	r24, r28
    d984:	01 96       	adiw	r24, 0x01	; 1
    d986:	13 dd       	rcall	.-1498   	; 0xd3ae <rcvr_datablock>
    d988:	89 2b       	or	r24, r25
    d98a:	09 f4       	brne	.+2      	; 0xd98e <mmc_disk_ioctl+0x164>
    d98c:	85 c1       	rjmp	.+778    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    d98e:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d990:	f5 2e       	mov	r15, r21
    d992:	8f ef       	ldi	r24, 0xFF	; 255
    d994:	04 dd       	rcall	.-1528   	; 0xd39e <xchg_spi>
    d996:	fa 94       	dec	r15
    d998:	f1 10       	cpse	r15, r1
    d99a:	fb cf       	rjmp	.-10     	; 0xd992 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d99c:	2b 85       	ldd	r18, Y+11	; 0x0b
    d99e:	22 95       	swap	r18
    d9a0:	2f 70       	andi	r18, 0x0F	; 15
    d9a2:	80 e1       	ldi	r24, 0x10	; 16
    d9a4:	90 e0       	ldi	r25, 0x00	; 0
    d9a6:	a0 e0       	ldi	r26, 0x00	; 0
    d9a8:	b0 e0       	ldi	r27, 0x00	; 0
    d9aa:	04 c0       	rjmp	.+8      	; 0xd9b4 <mmc_disk_ioctl+0x18a>
    d9ac:	88 0f       	add	r24, r24
    d9ae:	99 1f       	adc	r25, r25
    d9b0:	aa 1f       	adc	r26, r26
    d9b2:	bb 1f       	adc	r27, r27
    d9b4:	2a 95       	dec	r18
    d9b6:	d2 f7       	brpl	.-12     	; 0xd9ac <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d9b8:	46 c0       	rjmp	.+140    	; 0xda46 <mmc_disk_ioctl+0x21c>
    d9ba:	89 e0       	ldi	r24, 0x09	; 9
    d9bc:	4f dd       	rcall	.-1378   	; 0xd45c <send_cmd>
    d9be:	81 11       	cpse	r24, r1
    d9c0:	6b c1       	rjmp	.+726    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    d9c2:	60 e1       	ldi	r22, 0x10	; 16
    d9c4:	70 e0       	ldi	r23, 0x00	; 0
    d9c6:	ce 01       	movw	r24, r28
    d9c8:	01 96       	adiw	r24, 0x01	; 1
    d9ca:	f1 dc       	rcall	.-1566   	; 0xd3ae <rcvr_datablock>
    d9cc:	89 2b       	or	r24, r25
    d9ce:	09 f4       	brne	.+2      	; 0xd9d2 <mmc_disk_ioctl+0x1a8>
    d9d0:	63 c1       	rjmp	.+710    	; 0xdc98 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d9d2:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <CardType>
    d9d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    d9d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    d9da:	91 ff       	sbrs	r25, 1
    d9dc:	16 c0       	rjmp	.+44     	; 0xda0a <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d9de:	2f 73       	andi	r18, 0x3F	; 63
    d9e0:	88 1f       	adc	r24, r24
    d9e2:	88 27       	eor	r24, r24
    d9e4:	88 1f       	adc	r24, r24
    d9e6:	90 e0       	ldi	r25, 0x00	; 0
    d9e8:	01 96       	adiw	r24, 0x01	; 1
    d9ea:	82 0f       	add	r24, r18
    d9ec:	91 1d       	adc	r25, r1
    d9ee:	82 0f       	add	r24, r18
    d9f0:	91 1d       	adc	r25, r1
    d9f2:	2e 85       	ldd	r18, Y+14	; 0x0e
    d9f4:	22 95       	swap	r18
    d9f6:	26 95       	lsr	r18
    d9f8:	26 95       	lsr	r18
    d9fa:	23 70       	andi	r18, 0x03	; 3
    d9fc:	21 50       	subi	r18, 0x01	; 1
    d9fe:	02 c0       	rjmp	.+4      	; 0xda04 <mmc_disk_ioctl+0x1da>
    da00:	88 0f       	add	r24, r24
    da02:	99 1f       	adc	r25, r25
    da04:	2a 95       	dec	r18
    da06:	e2 f7       	brpl	.-8      	; 0xda00 <mmc_disk_ioctl+0x1d6>
    da08:	1c c0       	rjmp	.+56     	; 0xda42 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    da0a:	38 2f       	mov	r19, r24
    da0c:	33 70       	andi	r19, 0x03	; 3
    da0e:	82 95       	swap	r24
    da10:	86 95       	lsr	r24
    da12:	87 70       	andi	r24, 0x07	; 7
    da14:	90 e0       	ldi	r25, 0x00	; 0
    da16:	f8 e0       	ldi	r31, 0x08	; 8
    da18:	3f 9f       	mul	r19, r31
    da1a:	80 0d       	add	r24, r0
    da1c:	91 1d       	adc	r25, r1
    da1e:	11 24       	eor	r1, r1
    da20:	01 96       	adiw	r24, 0x01	; 1
    da22:	2c 77       	andi	r18, 0x7C	; 124
    da24:	30 e0       	ldi	r19, 0x00	; 0
    da26:	35 95       	asr	r19
    da28:	27 95       	ror	r18
    da2a:	35 95       	asr	r19
    da2c:	27 95       	ror	r18
    da2e:	2f 5f       	subi	r18, 0xFF	; 255
    da30:	3f 4f       	sbci	r19, 0xFF	; 255
    da32:	82 9f       	mul	r24, r18
    da34:	a0 01       	movw	r20, r0
    da36:	83 9f       	mul	r24, r19
    da38:	50 0d       	add	r21, r0
    da3a:	92 9f       	mul	r25, r18
    da3c:	50 0d       	add	r21, r0
    da3e:	11 24       	eor	r1, r1
    da40:	ca 01       	movw	r24, r20
    da42:	a0 e0       	ldi	r26, 0x00	; 0
    da44:	b0 e0       	ldi	r27, 0x00	; 0
    da46:	f8 01       	movw	r30, r16
    da48:	80 83       	st	Z, r24
    da4a:	91 83       	std	Z+1, r25	; 0x01
    da4c:	a2 83       	std	Z+2, r26	; 0x02
    da4e:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    da50:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    da52:	23 c1       	rjmp	.+582    	; 0xdc9a <mmc_disk_ioctl+0x470>
    da54:	40 e0       	ldi	r20, 0x00	; 0
    da56:	50 e0       	ldi	r21, 0x00	; 0
    da58:	ba 01       	movw	r22, r20
    da5a:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    da5c:	04 c0       	rjmp	.+8      	; 0xda66 <mmc_disk_ioctl+0x23c>
    da5e:	40 e0       	ldi	r20, 0x00	; 0
    da60:	50 e0       	ldi	r21, 0x00	; 0
    da62:	ba 01       	movw	r22, r20
    da64:	8a e0       	ldi	r24, 0x0A	; 10
    da66:	fa dc       	rcall	.-1548   	; 0xd45c <send_cmd>
    da68:	81 11       	cpse	r24, r1
    da6a:	16 c1       	rjmp	.+556    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    da6c:	60 e1       	ldi	r22, 0x10	; 16
    da6e:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    da70:	1f c0       	rjmp	.+62     	; 0xdab0 <mmc_disk_ioctl+0x286>
    da72:	40 e0       	ldi	r20, 0x00	; 0
    da74:	50 e0       	ldi	r21, 0x00	; 0
    da76:	ba 01       	movw	r22, r20
    da78:	8a e3       	ldi	r24, 0x3A	; 58
    da7a:	f0 dc       	rcall	.-1568   	; 0xd45c <send_cmd>
    da7c:	81 11       	cpse	r24, r1
    da7e:	0c c1       	rjmp	.+536    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    da80:	78 01       	movw	r14, r16
    da82:	f4 e0       	ldi	r31, 0x04	; 4
    da84:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    da86:	f1 1c       	adc	r15, r1
    da88:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    da8a:	83 d1       	rcall	.+774    	; 0xdd92 <mmc_spi_TXRX>
    da8c:	f8 01       	movw	r30, r16
    da8e:	81 93       	st	Z+, r24
    da90:	8f 01       	movw	r16, r30
    da92:	ee 15       	cp	r30, r14
    da94:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    da96:	c1 f7       	brne	.-16     	; 0xda88 <mmc_disk_ioctl+0x25e>
    da98:	db cf       	rjmp	.-74     	; 0xda50 <mmc_disk_ioctl+0x226>
    da9a:	40 e0       	ldi	r20, 0x00	; 0
    da9c:	50 e0       	ldi	r21, 0x00	; 0
    da9e:	ba 01       	movw	r22, r20
    daa0:	8d e8       	ldi	r24, 0x8D	; 141
    daa2:	dc dc       	rcall	.-1608   	; 0xd45c <send_cmd>
            {
                xchg_spi(0xFF);
    daa4:	81 11       	cpse	r24, r1
    daa6:	f8 c0       	rjmp	.+496    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    daa8:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    daaa:	79 dc       	rcall	.-1806   	; 0xd39e <xchg_spi>
    daac:	60 e4       	ldi	r22, 0x40	; 64
    daae:	70 e0       	ldi	r23, 0x00	; 0
    dab0:	c8 01       	movw	r24, r16
    dab2:	7d dc       	rcall	.-1798   	; 0xd3ae <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dab4:	01 e0       	ldi	r16, 0x01	; 1
    dab6:	10 e0       	ldi	r17, 0x00	; 0
    dab8:	89 2b       	or	r24, r25
    daba:	09 f4       	brne	.+2      	; 0xdabe <mmc_disk_ioctl+0x294>
    dabc:	ef c0       	rjmp	.+478    	; 0xdc9c <mmc_disk_ioctl+0x472>
    dabe:	ea c0       	rjmp	.+468    	; 0xdc94 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    dac0:	97 d1       	rcall	.+814    	; 0xddf0 <mmc_power_off>
    dac2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    dac6:	81 60       	ori	r24, 0x01	; 1
    dac8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dacc:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    dace:	eb c0       	rjmp	.+470    	; 0xdca6 <mmc_disk_ioctl+0x47c>
    dad0:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dad2:	43 81       	ldd	r20, Z+3	; 0x03
    dad4:	54 81       	ldd	r21, Z+4	; 0x04
    dad6:	65 81       	ldd	r22, Z+5	; 0x05
    dad8:	76 81       	ldd	r23, Z+6	; 0x06
    dada:	39 e0       	ldi	r19, 0x09	; 9
    dadc:	44 0f       	add	r20, r20
    dade:	55 1f       	adc	r21, r21
    dae0:	66 1f       	adc	r22, r22
    dae2:	77 1f       	adc	r23, r23
    dae4:	3a 95       	dec	r19
    dae6:	d1 f7       	brne	.-12     	; 0xdadc <mmc_disk_ioctl+0x2b2>
    dae8:	70 68       	ori	r23, 0x80	; 128
    daea:	80 81       	ld	r24, Z
    daec:	90 e0       	ldi	r25, 0x00	; 0
    daee:	a0 e0       	ldi	r26, 0x00	; 0
    daf0:	b0 e0       	ldi	r27, 0x00	; 0
    daf2:	2c e1       	ldi	r18, 0x1C	; 28
    daf4:	88 0f       	add	r24, r24
    daf6:	99 1f       	adc	r25, r25
    daf8:	aa 1f       	adc	r26, r26
    dafa:	bb 1f       	adc	r27, r27
    dafc:	2a 95       	dec	r18
    dafe:	d1 f7       	brne	.-12     	; 0xdaf4 <mmc_disk_ioctl+0x2ca>
    db00:	48 2b       	or	r20, r24
    db02:	59 2b       	or	r21, r25
    db04:	6a 2b       	or	r22, r26
    db06:	7b 2b       	or	r23, r27
    db08:	81 81       	ldd	r24, Z+1	; 0x01
    db0a:	92 81       	ldd	r25, Z+2	; 0x02
    db0c:	01 97       	sbiw	r24, 0x01	; 1
    db0e:	91 70       	andi	r25, 0x01	; 1
    db10:	a0 e0       	ldi	r26, 0x00	; 0
    db12:	b0 e0       	ldi	r27, 0x00	; 0
    db14:	48 2b       	or	r20, r24
    db16:	59 2b       	or	r21, r25
    db18:	6a 2b       	or	r22, r26
    db1a:	7b 2b       	or	r23, r27
    db1c:	80 e3       	ldi	r24, 0x30	; 48
    db1e:	9e dc       	rcall	.-1732   	; 0xd45c <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    db20:	81 11       	cpse	r24, r1
    db22:	ba c0       	rjmp	.+372    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    db24:	88 ee       	ldi	r24, 0xE8	; 232
    db26:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db28:	37 d1       	rcall	.+622    	; 0xdd98 <mmc_set_ms_timeout>
    db2a:	8f ef       	ldi	r24, 0xFF	; 255
    db2c:	32 d1       	rcall	.+612    	; 0xdd92 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    db2e:	8f 3f       	cpi	r24, 0xFF	; 255
    db30:	21 f4       	brne	.+8      	; 0xdb3a <mmc_disk_ioctl+0x310>
    db32:	39 d1       	rcall	.+626    	; 0xdda6 <mmc_test_timeout>
    db34:	89 2b       	or	r24, r25
    db36:	c9 f3       	breq	.-14     	; 0xdb2a <mmc_disk_ioctl+0x300>
    db38:	af c0       	rjmp	.+350    	; 0xdc98 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    db3a:	8e 3f       	cpi	r24, 0xFE	; 254
    db3c:	09 f0       	breq	.+2      	; 0xdb40 <mmc_disk_ioctl+0x316>
    db3e:	ac c0       	rjmp	.+344    	; 0xdc98 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db40:	f8 01       	movw	r30, r16
    db42:	e7 80       	ldd	r14, Z+7	; 0x07
    db44:	f0 84       	ldd	r15, Z+8	; 0x08
    db46:	c1 80       	ldd	r12, Z+1	; 0x01
    db48:	d2 80       	ldd	r13, Z+2	; 0x02
    db4a:	ce 0c       	add	r12, r14
    db4c:	df 1c       	adc	r13, r15
    db4e:	ce 14       	cp	r12, r14
    db50:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db52:	31 f0       	breq	.+12     	; 0xdb60 <mmc_disk_ioctl+0x336>
    db54:	8f ef       	ldi	r24, 0xFF	; 255
    db56:	1d d1       	rcall	.+570    	; 0xdd92 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    db58:	f7 01       	movw	r30, r14
    db5a:	81 93       	st	Z+, r24
    db5c:	7f 01       	movw	r14, r30
    db5e:	f7 cf       	rjmp	.-18     	; 0xdb4e <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    db60:	f8 01       	movw	r30, r16
    db62:	81 81       	ldd	r24, Z+1	; 0x01
    db64:	92 81       	ldd	r25, Z+2	; 0x02
    db66:	02 e0       	ldi	r16, 0x02	; 2
    db68:	12 e0       	ldi	r17, 0x02	; 2
    db6a:	08 1b       	sub	r16, r24
    db6c:	19 0b       	sbc	r17, r25
    db6e:	01 15       	cp	r16, r1
    db70:	11 05       	cpc	r17, r1
    db72:	09 f4       	brne	.+2      	; 0xdb76 <mmc_disk_ioctl+0x34c>
    db74:	6d cf       	rjmp	.-294    	; 0xda50 <mmc_disk_ioctl+0x226>
    db76:	8f ef       	ldi	r24, 0xFF	; 255
    db78:	12 dc       	rcall	.-2012   	; 0xd39e <xchg_spi>
    db7a:	01 50       	subi	r16, 0x01	; 1
    db7c:	11 09       	sbc	r17, r1
    db7e:	f7 cf       	rjmp	.-18     	; 0xdb6e <mmc_disk_ioctl+0x344>
    db80:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    db82:	43 81       	ldd	r20, Z+3	; 0x03
    db84:	54 81       	ldd	r21, Z+4	; 0x04
    db86:	65 81       	ldd	r22, Z+5	; 0x05
    db88:	76 81       	ldd	r23, Z+6	; 0x06
    db8a:	39 e0       	ldi	r19, 0x09	; 9
    db8c:	44 0f       	add	r20, r20
    db8e:	55 1f       	adc	r21, r21
    db90:	66 1f       	adc	r22, r22
    db92:	77 1f       	adc	r23, r23
    db94:	3a 95       	dec	r19
    db96:	d1 f7       	brne	.-12     	; 0xdb8c <mmc_disk_ioctl+0x362>
    db98:	70 68       	ori	r23, 0x80	; 128
    db9a:	80 81       	ld	r24, Z
    db9c:	90 e0       	ldi	r25, 0x00	; 0
    db9e:	a0 e0       	ldi	r26, 0x00	; 0
    dba0:	b0 e0       	ldi	r27, 0x00	; 0
    dba2:	2c e1       	ldi	r18, 0x1C	; 28
    dba4:	88 0f       	add	r24, r24
    dba6:	99 1f       	adc	r25, r25
    dba8:	aa 1f       	adc	r26, r26
    dbaa:	bb 1f       	adc	r27, r27
    dbac:	2a 95       	dec	r18
    dbae:	d1 f7       	brne	.-12     	; 0xdba4 <mmc_disk_ioctl+0x37a>
    dbb0:	48 2b       	or	r20, r24
    dbb2:	59 2b       	or	r21, r25
    dbb4:	6a 2b       	or	r22, r26
    dbb6:	7b 2b       	or	r23, r27
    dbb8:	81 81       	ldd	r24, Z+1	; 0x01
    dbba:	92 81       	ldd	r25, Z+2	; 0x02
    dbbc:	01 97       	sbiw	r24, 0x01	; 1
    dbbe:	91 70       	andi	r25, 0x01	; 1
    dbc0:	a0 e0       	ldi	r26, 0x00	; 0
    dbc2:	b0 e0       	ldi	r27, 0x00	; 0
    dbc4:	48 2b       	or	r20, r24
    dbc6:	59 2b       	or	r21, r25
    dbc8:	6a 2b       	or	r22, r26
    dbca:	7b 2b       	or	r23, r27
    dbcc:	81 e3       	ldi	r24, 0x31	; 49
    dbce:	46 dc       	rcall	.-1908   	; 0xd45c <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dbd0:	81 11       	cpse	r24, r1
    dbd2:	62 c0       	rjmp	.+196    	; 0xdc98 <mmc_disk_ioctl+0x46e>
    dbd4:	8f ef       	ldi	r24, 0xFF	; 255
    dbd6:	e3 db       	rcall	.-2106   	; 0xd39e <xchg_spi>
    dbd8:	8e ef       	ldi	r24, 0xFE	; 254
    dbda:	e1 db       	rcall	.-2110   	; 0xd39e <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    dbdc:	f8 01       	movw	r30, r16
    dbde:	e7 80       	ldd	r14, Z+7	; 0x07
    dbe0:	f0 84       	ldd	r15, Z+8	; 0x08
    dbe2:	c1 80       	ldd	r12, Z+1	; 0x01
    dbe4:	d2 80       	ldd	r13, Z+2	; 0x02
    dbe6:	ce 0c       	add	r12, r14
    dbe8:	df 1c       	adc	r13, r15
    dbea:	ec 14       	cp	r14, r12
    dbec:	fd 04       	cpc	r15, r13
    dbee:	29 f0       	breq	.+10     	; 0xdbfa <mmc_disk_ioctl+0x3d0>
    dbf0:	f7 01       	movw	r30, r14
    dbf2:	81 91       	ld	r24, Z+
    dbf4:	7f 01       	movw	r14, r30
    dbf6:	d3 db       	rcall	.-2138   	; 0xd39e <xchg_spi>
    dbf8:	f8 cf       	rjmp	.-16     	; 0xdbea <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dbfa:	f8 01       	movw	r30, r16
    dbfc:	81 81       	ldd	r24, Z+1	; 0x01
    dbfe:	92 81       	ldd	r25, Z+2	; 0x02
    dc00:	02 e0       	ldi	r16, 0x02	; 2
    dc02:	12 e0       	ldi	r17, 0x02	; 2
    dc04:	08 1b       	sub	r16, r24
    dc06:	19 0b       	sbc	r17, r25
    dc08:	8f ef       	ldi	r24, 0xFF	; 255
    dc0a:	01 15       	cp	r16, r1
    dc0c:	11 05       	cpc	r17, r1
    dc0e:	09 f4       	brne	.+2      	; 0xdc12 <mmc_disk_ioctl+0x3e8>
    dc10:	3b c0       	rjmp	.+118    	; 0xdc88 <mmc_disk_ioctl+0x45e>
    dc12:	c5 db       	rcall	.-2166   	; 0xd39e <xchg_spi>
    dc14:	01 50       	subi	r16, 0x01	; 1
    dc16:	11 09       	sbc	r17, r1
    dc18:	f7 cf       	rjmp	.-18     	; 0xdc08 <mmc_disk_ioctl+0x3de>
    dc1a:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    dc1c:	43 81       	ldd	r20, Z+3	; 0x03
    dc1e:	54 81       	ldd	r21, Z+4	; 0x04
    dc20:	65 81       	ldd	r22, Z+5	; 0x05
    dc22:	76 81       	ldd	r23, Z+6	; 0x06
    dc24:	89 e0       	ldi	r24, 0x09	; 9
    dc26:	44 0f       	add	r20, r20
    dc28:	55 1f       	adc	r21, r21
    dc2a:	66 1f       	adc	r22, r22
    dc2c:	77 1f       	adc	r23, r23
    dc2e:	8a 95       	dec	r24
    dc30:	d1 f7       	brne	.-12     	; 0xdc26 <mmc_disk_ioctl+0x3fc>
    dc32:	74 68       	ori	r23, 0x84	; 132
    dc34:	80 81       	ld	r24, Z
    dc36:	90 e0       	ldi	r25, 0x00	; 0
    dc38:	a0 e0       	ldi	r26, 0x00	; 0
    dc3a:	b0 e0       	ldi	r27, 0x00	; 0
    dc3c:	2c e1       	ldi	r18, 0x1C	; 28
    dc3e:	88 0f       	add	r24, r24
    dc40:	99 1f       	adc	r25, r25
    dc42:	aa 1f       	adc	r26, r26
    dc44:	bb 1f       	adc	r27, r27
    dc46:	2a 95       	dec	r18
    dc48:	d1 f7       	brne	.-12     	; 0xdc3e <mmc_disk_ioctl+0x414>
    dc4a:	48 2b       	or	r20, r24
    dc4c:	59 2b       	or	r21, r25
    dc4e:	6a 2b       	or	r22, r26
    dc50:	7b 2b       	or	r23, r27
    dc52:	82 81       	ldd	r24, Z+2	; 0x02
    dc54:	90 e0       	ldi	r25, 0x00	; 0
    dc56:	a0 e0       	ldi	r26, 0x00	; 0
    dc58:	b0 e0       	ldi	r27, 0x00	; 0
    dc5a:	48 2b       	or	r20, r24
    dc5c:	59 2b       	or	r21, r25
    dc5e:	6a 2b       	or	r22, r26
    dc60:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dc62:	81 e3       	ldi	r24, 0x31	; 49
    dc64:	fb db       	rcall	.-2058   	; 0xd45c <send_cmd>
    dc66:	81 11       	cpse	r24, r1
    dc68:	17 c0       	rjmp	.+46     	; 0xdc98 <mmc_disk_ioctl+0x46e>
    dc6a:	8f ef       	ldi	r24, 0xFF	; 255
    dc6c:	98 db       	rcall	.-2256   	; 0xd39e <xchg_spi>
                xchg_spi(sdi->ndata);
    dc6e:	8e ef       	ldi	r24, 0xFE	; 254
    dc70:	96 db       	rcall	.-2260   	; 0xd39e <xchg_spi>
    dc72:	f8 01       	movw	r30, r16
    dc74:	81 81       	ldd	r24, Z+1	; 0x01
    dc76:	93 db       	rcall	.-2266   	; 0xd39e <xchg_spi>
    dc78:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dc7a:	12 e0       	ldi	r17, 0x02	; 2
    dc7c:	8f ef       	ldi	r24, 0xFF	; 255
    dc7e:	8f db       	rcall	.-2274   	; 0xd39e <xchg_spi>
    dc80:	01 50       	subi	r16, 0x01	; 1
    dc82:	11 09       	sbc	r17, r1
    dc84:	d9 f7       	brne	.-10     	; 0xdc7c <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dc86:	8f ef       	ldi	r24, 0xFF	; 255
    dc88:	84 d0       	rcall	.+264    	; 0xdd92 <mmc_spi_TXRX>
    dc8a:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dc8c:	01 e0       	ldi	r16, 0x01	; 1
    dc8e:	10 e0       	ldi	r17, 0x00	; 0
    dc90:	85 30       	cpi	r24, 0x05	; 5
    dc92:	21 f4       	brne	.+8      	; 0xdc9c <mmc_disk_ioctl+0x472>
    dc94:	00 e0       	ldi	r16, 0x00	; 0
    dc96:	02 c0       	rjmp	.+4      	; 0xdc9c <mmc_disk_ioctl+0x472>
    dc98:	01 e0       	ldi	r16, 0x01	; 1
    dc9a:	10 e0       	ldi	r17, 0x00	; 0
    dc9c:	82 db       	rcall	.-2300   	; 0xd3a2 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dc9e:	04 c0       	rjmp	.+8      	; 0xdca8 <mmc_disk_ioctl+0x47e>
    dca0:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dca2:	01 c0       	rjmp	.+2      	; 0xdca6 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dca4:	04 e0       	ldi	r16, 0x04	; 4
    dca6:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dca8:	c8 01       	movw	r24, r16
    dcaa:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dcac:	e8 e0       	ldi	r30, 0x08	; 8
    dcae:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000dcb2 <mmc_disk_timerproc>:
    dcb2:	cf 93       	push	r28
    dcb4:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dcb8:	88 23       	and	r24, r24
    dcba:	19 f0       	breq	.+6      	; 0xdcc2 <mmc_disk_timerproc+0x10>
    dcbc:	81 50       	subi	r24, 0x01	; 1
    dcbe:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <Timer1>
    n = Timer2;
    dcc2:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <Timer2>
    if (n) Timer2 = --n;
    dcc6:	88 23       	and	r24, r24
    dcc8:	19 f0       	breq	.+6      	; 0xdcd0 <mmc_disk_timerproc+0x1e>
    dcca:	81 50       	subi	r24, 0x01	; 1
    dccc:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <Timer2>

    s = Stat;
    dcd0:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dcd4:	8e d0       	rcall	.+284    	; 0xddf2 <mmc_ins_status>
    dcd6:	89 2b       	or	r24, r25
    dcd8:	11 f0       	breq	.+4      	; 0xdcde <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dcda:	cd 7f       	andi	r28, 0xFD	; 253
    dcdc:	04 c0       	rjmp	.+8      	; 0xdce6 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dcde:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dce0:	81 e0       	ldi	r24, 0x01	; 1
    dce2:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dce6:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    dcea:	cf 91       	pop	r28
    dcec:	08 95       	ret

0000dcee <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dcee:	00 d0       	rcall	.+0      	; 0xdcf0 <mmc_install_timer+0x2>
    dcf0:	1f 92       	push	r1
    dcf2:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_mmc_timeout+0x1>
    dcf6:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_mmc_timeout>
    dcfa:	61 e0       	ldi	r22, 0x01	; 1
    dcfc:	70 e0       	ldi	r23, 0x00	; 0
    dcfe:	86 e0       	ldi	r24, 0x06	; 6
    dd00:	9f e6       	ldi	r25, 0x6F	; 111
    dd02:	0e 94 b9 34 	call	0x6972	; 0x6972 <set_timers>
    dd06:	01 96       	adiw	r24, 0x01	; 1
    dd08:	51 f4       	brne	.+20     	; 0xdd1e <mmc_install_timer+0x30>
    dd0a:	87 e2       	ldi	r24, 0x27	; 39
    dd0c:	98 e0       	ldi	r25, 0x08	; 8
    dd0e:	a0 e0       	ldi	r26, 0x00	; 0
    dd10:	ed b7       	in	r30, 0x3d	; 61
    dd12:	fe b7       	in	r31, 0x3e	; 62
    dd14:	81 83       	std	Z+1, r24	; 0x01
    dd16:	92 83       	std	Z+2, r25	; 0x02
    dd18:	a3 83       	std	Z+3, r26	; 0x03
    dd1a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    dd1e:	0f 90       	pop	r0
    dd20:	0f 90       	pop	r0
    dd22:	0f 90       	pop	r0
    dd24:	08 95       	ret

0000dd26 <mmc_spi_begin>:
    dd26:	60 91 2a 18 	lds	r22, 0x182A	; 0x80182a <_mmc_clock>
    dd2a:	70 91 2b 18 	lds	r23, 0x182B	; 0x80182b <_mmc_clock+0x1>
    dd2e:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_clock+0x2>
    dd32:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_clock+0x3>
    dd36:	4b e0       	ldi	r20, 0x0B	; 11
    dd38:	50 e0       	ldi	r21, 0x00	; 0
    dd3a:	0c 94 ac 26 	jmp	0x4d58	; 0x4d58 <spi_begin>
    dd3e:	08 95       	ret

0000dd40 <mmc_spi_end>:
    dd40:	8b e0       	ldi	r24, 0x0B	; 11
    dd42:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <spi_end>
    dd46:	08 95       	ret

0000dd48 <mmc_slow>:
    dd48:	80 e2       	ldi	r24, 0x20	; 32
    dd4a:	91 ea       	ldi	r25, 0xA1	; 161
    dd4c:	a7 e0       	ldi	r26, 0x07	; 7
    dd4e:	b0 e0       	ldi	r27, 0x00	; 0
    dd50:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    dd54:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    dd58:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    dd5c:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    dd60:	08 95       	ret

0000dd62 <mmc_spi_init>:
    dd62:	8b e0       	ldi	r24, 0x0B	; 11
    dd64:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <chip_select_init>
    dd68:	ef cf       	rjmp	.-34     	; 0xdd48 <mmc_slow>
    dd6a:	08 95       	ret

0000dd6c <mmc_fast>:
    dd6c:	80 ea       	ldi	r24, 0xA0	; 160
    dd6e:	95 e2       	ldi	r25, 0x25	; 37
    dd70:	a6 e2       	ldi	r26, 0x26	; 38
    dd72:	b0 e0       	ldi	r27, 0x00	; 0
    dd74:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    dd78:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    dd7c:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    dd80:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    dd84:	08 95       	ret

0000dd86 <mmc_spi_TX_buffer>:
    dd86:	0c 94 78 26 	jmp	0x4cf0	; 0x4cf0 <spi_TX_buffer>
    dd8a:	08 95       	ret

0000dd8c <mmc_spi_RX_buffer>:
    dd8c:	0c 94 7a 26 	jmp	0x4cf4	; 0x4cf4 <spi_RX_buffer>
    dd90:	08 95       	ret

0000dd92 <mmc_spi_TXRX>:
    dd92:	0c 94 f4 26 	jmp	0x4de8	; 0x4de8 <spi_TXRX>
    dd96:	08 95       	ret

0000dd98 <mmc_set_ms_timeout>:
    dd98:	f8 94       	cli
    dd9a:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    dd9e:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>
    dda2:	78 94       	sei
    dda4:	08 95       	ret

0000dda6 <mmc_test_timeout>:
    dda6:	00 d0       	rcall	.+0      	; 0xdda8 <mmc_test_timeout+0x2>
    dda8:	1f 92       	push	r1
    ddaa:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    ddae:	81 fd       	sbrc	r24, 1
    ddb0:	15 c0       	rjmp	.+42     	; 0xdddc <mmc_test_timeout+0x36>
    ddb2:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    ddb6:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    ddba:	89 2b       	or	r24, r25
    ddbc:	91 f4       	brne	.+36     	; 0xdde2 <mmc_test_timeout+0x3c>
    ddbe:	8a e1       	ldi	r24, 0x1A	; 26
    ddc0:	98 e0       	ldi	r25, 0x08	; 8
    ddc2:	a0 e0       	ldi	r26, 0x00	; 0
    ddc4:	ed b7       	in	r30, 0x3d	; 61
    ddc6:	fe b7       	in	r31, 0x3e	; 62
    ddc8:	81 83       	std	Z+1, r24	; 0x01
    ddca:	92 83       	std	Z+2, r25	; 0x02
    ddcc:	a3 83       	std	Z+3, r26	; 0x03
    ddce:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    ddd2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    ddd6:	83 60       	ori	r24, 0x03	; 3
    ddd8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dddc:	81 e0       	ldi	r24, 0x01	; 1
    ddde:	90 e0       	ldi	r25, 0x00	; 0
    dde0:	02 c0       	rjmp	.+4      	; 0xdde6 <mmc_test_timeout+0x40>
    dde2:	80 e0       	ldi	r24, 0x00	; 0
    dde4:	90 e0       	ldi	r25, 0x00	; 0
    dde6:	0f 90       	pop	r0
    dde8:	0f 90       	pop	r0
    ddea:	0f 90       	pop	r0
    ddec:	08 95       	ret

0000ddee <mmc_power_on>:
    ddee:	08 95       	ret

0000ddf0 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    ddf0:	08 95       	ret

0000ddf2 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    ddf2:	3f 98       	cbi	0x07, 7	; 7
    ddf4:	86 b1       	in	r24, 0x06	; 6
    ddf6:	08 2e       	mov	r0, r24
    ddf8:	00 0c       	add	r0, r0
    ddfa:	99 0b       	sbc	r25, r25
    ddfc:	80 95       	com	r24
    ddfe:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    de00:	89 2f       	mov	r24, r25
    de02:	88 1f       	adc	r24, r24
    de04:	88 27       	eor	r24, r24
    de06:	88 1f       	adc	r24, r24
    de08:	90 e0       	ldi	r25, 0x00	; 0
    de0a:	08 95       	ret

0000de0c <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    de0c:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    de10:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    de14:	00 97       	sbiw	r24, 0x00	; 0
    de16:	29 f0       	breq	.+10     	; 0xde22 <mmc_task+0x16>
        _mmc_timeout--;
    de18:	01 97       	sbiw	r24, 0x01	; 1
    de1a:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    de1e:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    de22:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <_mmc_pre>
    de26:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <_mmc_pre+0x1>
    de2a:	8a 30       	cpi	r24, 0x0A	; 10
    de2c:	91 05       	cpc	r25, r1
    de2e:	30 f4       	brcc	.+12     	; 0xde3c <mmc_task+0x30>
    de30:	01 96       	adiw	r24, 0x01	; 1
    de32:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_pre+0x1>
    de36:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_pre>
    de3a:	08 95       	ret
        return;

    _mmc_pre = 0;
    de3c:	10 92 29 18 	sts	0x1829, r1	; 0x801829 <_mmc_pre+0x1>
    de40:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_mmc_pre>

	if(!mmc_ins_status())
    de44:	d6 df       	rcall	.-84     	; 0xddf2 <mmc_ins_status>
    de46:	89 2b       	or	r24, r25
    de48:	19 f4       	brne	.+6      	; 0xde50 <mmc_task+0x44>
		set_error(1);
    de4a:	81 e0       	ldi	r24, 0x01	; 1
    de4c:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <set_error>

    mmc_disk_timerproc();
    de50:	30 cf       	rjmp	.-416    	; 0xdcb2 <mmc_disk_timerproc>
    de52:	08 95       	ret

0000de54 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    de54:	ac e0       	ldi	r26, 0x0C	; 12
    de56:	b1 e0       	ldi	r27, 0x01	; 1
    de58:	e0 e3       	ldi	r30, 0x30	; 48
    de5a:	ff e6       	ldi	r31, 0x6F	; 111
    de5c:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
    de60:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    de62:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    de66:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    de6a:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    de6c:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    de6e:	79 df       	rcall	.-270    	; 0xdd62 <mmc_spi_init>

    if( verbose)
    de70:	e1 14       	cp	r14, r1
    de72:	f1 04       	cpc	r15, r1
    de74:	51 f0       	breq	.+20     	; 0xde8a <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    de76:	8a e0       	ldi	r24, 0x0A	; 10
    de78:	98 e0       	ldi	r25, 0x08	; 8
    de7a:	a0 e0       	ldi	r26, 0x00	; 0
    de7c:	ed b7       	in	r30, 0x3d	; 61
    de7e:	fe b7       	in	r31, 0x3e	; 62
    de80:	81 83       	std	Z+1, r24	; 0x01
    de82:	92 83       	std	Z+2, r25	; 0x02
    de84:	a3 83       	std	Z+3, r26	; 0x03
    de86:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    de8a:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <mmc_init_flag>
    de8e:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <mmc_init_flag+0x1>
    de92:	89 2b       	or	r24, r25
        mmc_install_timer();
    de94:	09 f4       	brne	.+2      	; 0xde98 <mmc_init+0x44>

	if(!mmc_ins_status())
    de96:	2b df       	rcall	.-426    	; 0xdcee <mmc_install_timer>
    de98:	ac df       	rcall	.-168    	; 0xddf2 <mmc_ins_status>
    de9a:	89 2b       	or	r24, r25
    de9c:	61 f4       	brne	.+24     	; 0xdeb6 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    de9e:	8a ee       	ldi	r24, 0xEA	; 234
    dea0:	97 e0       	ldi	r25, 0x07	; 7
    dea2:	a0 e0       	ldi	r26, 0x00	; 0
    dea4:	ed b7       	in	r30, 0x3d	; 61
    dea6:	fe b7       	in	r31, 0x3e	; 62
    dea8:	81 83       	std	Z+1, r24	; 0x01
    deaa:	92 83       	std	Z+2, r25	; 0x02
    deac:	a3 83       	std	Z+3, r26	; 0x03
    deae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		return(RES_NOTRDY);	
    deb2:	83 e0       	ldi	r24, 0x03	; 3
    deb4:	9a c0       	rjmp	.+308    	; 0xdfea <mmc_init+0x196>
	}


    if( verbose)
    deb6:	e1 14       	cp	r14, r1
    deb8:	f1 04       	cpc	r15, r1
    deba:	11 f1       	breq	.+68     	; 0xdf00 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    debc:	87 ed       	ldi	r24, 0xD7	; 215
    debe:	97 e0       	ldi	r25, 0x07	; 7
    dec0:	a0 e0       	ldi	r26, 0x00	; 0
    dec2:	ed b7       	in	r30, 0x3d	; 61
    dec4:	fe b7       	in	r31, 0x3e	; 62
    dec6:	81 83       	std	Z+1, r24	; 0x01
    dec8:	92 83       	std	Z+2, r25	; 0x02
    deca:	a3 83       	std	Z+3, r26	; 0x03
    decc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    ded0:	8b ec       	ldi	r24, 0xCB	; 203
    ded2:	97 e0       	ldi	r25, 0x07	; 7
    ded4:	a0 e0       	ldi	r26, 0x00	; 0
    ded6:	ed b7       	in	r30, 0x3d	; 61
    ded8:	fe b7       	in	r31, 0x3e	; 62
    deda:	81 83       	std	Z+1, r24	; 0x01
    dedc:	92 83       	std	Z+2, r25	; 0x02
    dede:	a3 83       	std	Z+3, r26	; 0x03
    dee0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dee4:	85 eb       	ldi	r24, 0xB5	; 181
    dee6:	91 e0       	ldi	r25, 0x01	; 1
    dee8:	ed b7       	in	r30, 0x3d	; 61
    deea:	fe b7       	in	r31, 0x3e	; 62
    deec:	95 83       	std	Z+5, r25	; 0x05
    deee:	84 83       	std	Z+4, r24	; 0x04
    def0:	8a eb       	ldi	r24, 0xBA	; 186
    def2:	97 e0       	ldi	r25, 0x07	; 7
    def4:	a0 e0       	ldi	r26, 0x00	; 0
    def6:	81 83       	std	Z+1, r24	; 0x01
    def8:	92 83       	std	Z+2, r25	; 0x02
    defa:	a3 83       	std	Z+3, r26	; 0x03
    defc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    df00:	80 e0       	ldi	r24, 0x00	; 0
    df02:	1d da       	rcall	.-3014   	; 0xd33e <disk_initialize>
    df04:	08 2f       	mov	r16, r24
    df06:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    df08:	01 15       	cp	r16, r1
    df0a:	11 05       	cpc	r17, r1
        put_rc(rc);
    df0c:	19 f0       	breq	.+6      	; 0xdf14 <mmc_init+0xc0>
    df0e:	c8 01       	movw	r24, r16
    df10:	f4 d0       	rcall	.+488    	; 0xe0fa <put_rc>
    df12:	0e c0       	rjmp	.+28     	; 0xdf30 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    df14:	40 e0       	ldi	r20, 0x00	; 0
    df16:	66 ea       	ldi	r22, 0xA6	; 166
    df18:	78 e0       	ldi	r23, 0x08	; 8
    df1a:	80 e8       	ldi	r24, 0x80	; 128
    df1c:	9a e1       	ldi	r25, 0x1A	; 26
    df1e:	0e 94 77 59 	call	0xb2ee	; 0xb2ee <f_mount>
    df22:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    df24:	89 2b       	or	r24, r25
    df26:	21 f4       	brne	.+8      	; 0xdf30 <mmc_init+0xdc>
    df28:	e1 14       	cp	r14, r1
    df2a:	f1 04       	cpc	r15, r1
    df2c:	09 f4       	brne	.+2      	; 0xdf30 <mmc_init+0xdc>
        put_rc( rc );
    df2e:	4f c0       	rjmp	.+158    	; 0xdfce <mmc_init+0x17a>
    df30:	c8 01       	movw	r24, r16
    df32:	e3 d0       	rcall	.+454    	; 0xe0fa <put_rc>

    if (verbose )
    df34:	e1 14       	cp	r14, r1
    df36:	f1 04       	cpc	r15, r1
    df38:	09 f4       	brne	.+2      	; 0xdf3c <mmc_init+0xe8>
    df3a:	49 c0       	rjmp	.+146    	; 0xdfce <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    df3c:	c7 5f       	subi	r28, 0xF7	; 247
    df3e:	de 4f       	sbci	r29, 0xFE	; 254
    df40:	18 82       	st	Y, r1
    df42:	19 82       	std	Y+1, r1	; 0x01
    df44:	1a 82       	std	Y+2, r1	; 0x02
    df46:	1b 82       	std	Y+3, r1	; 0x03
    df48:	c9 50       	subi	r28, 0x09	; 9
    df4a:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    df4c:	01 15       	cp	r16, r1
    df4e:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    df50:	a1 f5       	brne	.+104    	; 0xdfba <mmc_init+0x166>
    df52:	ae 01       	movw	r20, r28
    df54:	47 5f       	subi	r20, 0xF7	; 247
    df56:	5e 4f       	sbci	r21, 0xFE	; 254
    df58:	63 e0       	ldi	r22, 0x03	; 3
    df5a:	80 e0       	ldi	r24, 0x00	; 0
    df5c:	16 da       	rcall	.-3028   	; 0xd38a <disk_ioctl>
            if( rc != RES_OK)
    df5e:	8c 01       	movw	r16, r24
    df60:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    df62:	61 f0       	breq	.+24     	; 0xdf7c <mmc_init+0x128>
    df64:	ca d0       	rcall	.+404    	; 0xe0fa <put_rc>
                printf("MMC Block Size - read failed\n");
    df66:	8c e9       	ldi	r24, 0x9C	; 156
    df68:	97 e0       	ldi	r25, 0x07	; 7
    df6a:	a0 e0       	ldi	r26, 0x00	; 0
    df6c:	ed b7       	in	r30, 0x3d	; 61
    df6e:	fe b7       	in	r31, 0x3e	; 62
    df70:	81 83       	std	Z+1, r24	; 0x01
    df72:	92 83       	std	Z+2, r25	; 0x02
    df74:	a3 83       	std	Z+3, r26	; 0x03
    df76:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    df7a:	1f c0       	rjmp	.+62     	; 0xdfba <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    df7c:	c7 5f       	subi	r28, 0xF7	; 247
    df7e:	de 4f       	sbci	r29, 0xFE	; 254
    df80:	88 81       	ld	r24, Y
    df82:	99 81       	ldd	r25, Y+1	; 0x01
    df84:	aa 81       	ldd	r26, Y+2	; 0x02
    df86:	bb 81       	ldd	r27, Y+3	; 0x03
    df88:	c9 50       	subi	r28, 0x09	; 9
    df8a:	d1 40       	sbci	r29, 0x01	; 1
    df8c:	ed b7       	in	r30, 0x3d	; 61
    df8e:	fe b7       	in	r31, 0x3e	; 62
    df90:	84 83       	std	Z+4, r24	; 0x04
    df92:	95 83       	std	Z+5, r25	; 0x05
    df94:	a6 83       	std	Z+6, r26	; 0x06
    df96:	b7 83       	std	Z+7, r27	; 0x07
    df98:	87 e8       	ldi	r24, 0x87	; 135
    df9a:	97 e0       	ldi	r25, 0x07	; 7
    df9c:	a0 e0       	ldi	r26, 0x00	; 0
    df9e:	81 83       	std	Z+1, r24	; 0x01
    dfa0:	92 83       	std	Z+2, r25	; 0x02
    dfa2:	a3 83       	std	Z+3, r26	; 0x03
    dfa4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    dfa8:	66 ea       	ldi	r22, 0xA6	; 166
    dfaa:	78 e0       	ldi	r23, 0x08	; 8
    dfac:	ce 01       	movw	r24, r28
    dfae:	08 96       	adiw	r24, 0x08	; 8
    dfb0:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
                fatfs_status(buff);
    dfb4:	ce 01       	movw	r24, r28
    dfb6:	08 96       	adiw	r24, 0x08	; 8
    dfb8:	34 d1       	rcall	.+616    	; 0xe222 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dfba:	89 e7       	ldi	r24, 0x79	; 121
    dfbc:	97 e0       	ldi	r25, 0x07	; 7
    dfbe:	a0 e0       	ldi	r26, 0x00	; 0
    dfc0:	ed b7       	in	r30, 0x3d	; 61
    dfc2:	fe b7       	in	r31, 0x3e	; 62
    dfc4:	81 83       	std	Z+1, r24	; 0x01
    dfc6:	92 83       	std	Z+2, r25	; 0x02
    dfc8:	a3 83       	std	Z+3, r26	; 0x03
    dfca:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }
    mmc_init_flag = 1;
    dfce:	81 e0       	ldi	r24, 0x01	; 1
    dfd0:	90 e0       	ldi	r25, 0x00	; 0
    dfd2:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <mmc_init_flag+0x1>
    dfd6:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <mmc_init_flag>

	if(rc != RES_OK)
    dfda:	01 15       	cp	r16, r1
    dfdc:	11 05       	cpc	r17, r1
    dfde:	21 f0       	breq	.+8      	; 0xdfe8 <mmc_init+0x194>
		set_error(1);
    dfe0:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <set_error>
    dfe4:	c8 01       	movw	r24, r16
    dfe6:	02 c0       	rjmp	.+4      	; 0xdfec <mmc_init+0x198>
    dfe8:	80 e0       	ldi	r24, 0x00	; 0
    dfea:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dfec:	c4 5f       	subi	r28, 0xF4	; 244
    dfee:	de 4f       	sbci	r29, 0xFE	; 254
    dff0:	e6 e0       	ldi	r30, 0x06	; 6
    dff2:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0000dff6 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dff6:	80 e0       	ldi	r24, 0x00	; 0
    dff8:	90 e0       	ldi	r25, 0x00	; 0
    dffa:	08 95       	ret

0000dffc <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dffc:	0f 93       	push	r16
    dffe:	1f 93       	push	r17
    e000:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e002:	46 81       	ldd	r20, Z+6	; 0x06
    e004:	57 81       	ldd	r21, Z+7	; 0x07
    e006:	05 2e       	mov	r0, r21
    e008:	00 0c       	add	r0, r0
    e00a:	66 0b       	sbc	r22, r22
    e00c:	77 0b       	sbc	r23, r23
    e00e:	ba 01       	movw	r22, r20
    e010:	55 27       	eor	r21, r21
    e012:	44 27       	eor	r20, r20
    e014:	84 81       	ldd	r24, Z+4	; 0x04
    e016:	95 81       	ldd	r25, Z+5	; 0x05
    e018:	09 2e       	mov	r0, r25
    e01a:	00 0c       	add	r0, r0
    e01c:	aa 0b       	sbc	r26, r26
    e01e:	bb 0b       	sbc	r27, r27
    e020:	2b e0       	ldi	r18, 0x0B	; 11
    e022:	88 0f       	add	r24, r24
    e024:	99 1f       	adc	r25, r25
    e026:	aa 1f       	adc	r26, r26
    e028:	bb 1f       	adc	r27, r27
    e02a:	2a 95       	dec	r18
    e02c:	d1 f7       	brne	.-12     	; 0xe022 <tm_to_fat+0x26>
    e02e:	48 2b       	or	r20, r24
    e030:	59 2b       	or	r21, r25
    e032:	6a 2b       	or	r22, r26
    e034:	7b 2b       	or	r23, r27
    e036:	82 81       	ldd	r24, Z+2	; 0x02
    e038:	93 81       	ldd	r25, Z+3	; 0x03
    e03a:	09 2e       	mov	r0, r25
    e03c:	00 0c       	add	r0, r0
    e03e:	aa 0b       	sbc	r26, r26
    e040:	bb 0b       	sbc	r27, r27
    e042:	35 e0       	ldi	r19, 0x05	; 5
    e044:	88 0f       	add	r24, r24
    e046:	99 1f       	adc	r25, r25
    e048:	aa 1f       	adc	r26, r26
    e04a:	bb 1f       	adc	r27, r27
    e04c:	3a 95       	dec	r19
    e04e:	d1 f7       	brne	.-12     	; 0xe044 <tm_to_fat+0x48>
    e050:	48 2b       	or	r20, r24
    e052:	59 2b       	or	r21, r25
    e054:	6a 2b       	or	r22, r26
    e056:	7b 2b       	or	r23, r27
    e058:	80 81       	ld	r24, Z
    e05a:	91 81       	ldd	r25, Z+1	; 0x01
    e05c:	09 2e       	mov	r0, r25
    e05e:	00 0c       	add	r0, r0
    e060:	aa 0b       	sbc	r26, r26
    e062:	bb 0b       	sbc	r27, r27
    e064:	b6 95       	lsr	r27
    e066:	a7 95       	ror	r26
    e068:	97 95       	ror	r25
    e06a:	87 95       	ror	r24
    e06c:	84 2b       	or	r24, r20
    e06e:	95 2b       	or	r25, r21
    e070:	a6 2b       	or	r26, r22
    e072:	b7 2b       	or	r27, r23
    e074:	02 85       	ldd	r16, Z+10	; 0x0a
    e076:	13 85       	ldd	r17, Z+11	; 0x0b
    e078:	00 55       	subi	r16, 0x50	; 80
    e07a:	11 09       	sbc	r17, r1
    e07c:	01 2e       	mov	r0, r17
    e07e:	00 0c       	add	r0, r0
    e080:	22 0b       	sbc	r18, r18
    e082:	33 0b       	sbc	r19, r19
    e084:	49 e1       	ldi	r20, 0x19	; 25
    e086:	00 0f       	add	r16, r16
    e088:	11 1f       	adc	r17, r17
    e08a:	22 1f       	adc	r18, r18
    e08c:	33 1f       	adc	r19, r19
    e08e:	4a 95       	dec	r20
    e090:	d1 f7       	brne	.-12     	; 0xe086 <tm_to_fat+0x8a>
    e092:	ac 01       	movw	r20, r24
    e094:	bd 01       	movw	r22, r26
    e096:	40 2b       	or	r20, r16
    e098:	51 2b       	or	r21, r17
    e09a:	62 2b       	or	r22, r18
    e09c:	73 2b       	or	r23, r19
    e09e:	80 85       	ldd	r24, Z+8	; 0x08
    e0a0:	91 85       	ldd	r25, Z+9	; 0x09
    e0a2:	09 2e       	mov	r0, r25
    e0a4:	00 0c       	add	r0, r0
    e0a6:	aa 0b       	sbc	r26, r26
    e0a8:	bb 0b       	sbc	r27, r27
    e0aa:	01 96       	adiw	r24, 0x01	; 1
    e0ac:	a1 1d       	adc	r26, r1
    e0ae:	b1 1d       	adc	r27, r1
    e0b0:	e5 e1       	ldi	r30, 0x15	; 21
    e0b2:	88 0f       	add	r24, r24
    e0b4:	99 1f       	adc	r25, r25
    e0b6:	aa 1f       	adc	r26, r26
    e0b8:	bb 1f       	adc	r27, r27
    e0ba:	ea 95       	dec	r30
    e0bc:	d1 f7       	brne	.-12     	; 0xe0b2 <tm_to_fat+0xb6>
    e0be:	8a 01       	movw	r16, r20
    e0c0:	9b 01       	movw	r18, r22
    e0c2:	08 2b       	or	r16, r24
    e0c4:	19 2b       	or	r17, r25
    e0c6:	2a 2b       	or	r18, r26
    e0c8:	3b 2b       	or	r19, r27
    e0ca:	c9 01       	movw	r24, r18
    e0cc:	b8 01       	movw	r22, r16
}
    e0ce:	1f 91       	pop	r17
    e0d0:	0f 91       	pop	r16
    e0d2:	08 95       	ret

0000e0d4 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e0d4:	a4 e0       	ldi	r26, 0x04	; 4
    e0d6:	b0 e0       	ldi	r27, 0x00	; 0
    e0d8:	e0 e7       	ldi	r30, 0x70	; 112
    e0da:	f0 e7       	ldi	r31, 0x70	; 112
    e0dc:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e0e0:	ce 01       	movw	r24, r28
    e0e2:	01 96       	adiw	r24, 0x01	; 1
    e0e4:	0e 94 0d 38 	call	0x701a	; 0x701a <time>
    return( tm_to_fat(localtime(&t)));
    e0e8:	ce 01       	movw	r24, r28
    e0ea:	01 96       	adiw	r24, 0x01	; 1
    e0ec:	0e 94 a6 38 	call	0x714c	; 0x714c <localtime>
    e0f0:	85 df       	rcall	.-246    	; 0xdffc <tm_to_fat>
}
    e0f2:	24 96       	adiw	r28, 0x04	; 4
    e0f4:	e2 e0       	ldi	r30, 0x02	; 2
    e0f6:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000e0fa <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e0fa:	00 d0       	rcall	.+0      	; 0xe0fc <put_rc+0x2>
    e0fc:	00 d0       	rcall	.+0      	; 0xe0fe <put_rc+0x4>
    e0fe:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e100:	ed b7       	in	r30, 0x3d	; 61
    e102:	fe b7       	in	r31, 0x3e	; 62
    e104:	95 83       	std	Z+5, r25	; 0x05
    e106:	84 83       	std	Z+4, r24	; 0x04
    e108:	8c e9       	ldi	r24, 0x9C	; 156
    e10a:	9a e0       	ldi	r25, 0x0A	; 10
    e10c:	a0 e0       	ldi	r26, 0x00	; 0
    e10e:	81 83       	std	Z+1, r24	; 0x01
    e110:	92 83       	std	Z+2, r25	; 0x02
    e112:	a3 83       	std	Z+3, r26	; 0x03
    e114:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
}
    e118:	0f 90       	pop	r0
    e11a:	0f 90       	pop	r0
    e11c:	0f 90       	pop	r0
    e11e:	0f 90       	pop	r0
    e120:	0f 90       	pop	r0
    e122:	08 95       	ret

0000e124 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e124:	a4 e4       	ldi	r26, 0x44	; 68
    e126:	b1 e0       	ldi	r27, 0x01	; 1
    e128:	e8 e9       	ldi	r30, 0x98	; 152
    e12a:	f0 e7       	ldi	r31, 0x70	; 112
    e12c:	0c 94 f7 e6 	jmp	0x1cdee	; 0x1cdee <__prologue_saves__+0x16>
    e130:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e132:	bc 01       	movw	r22, r24
    e134:	ce 01       	movw	r24, r28
    e136:	89 5e       	subi	r24, 0xE9	; 233
    e138:	9e 4f       	sbci	r25, 0xFE	; 254
    e13a:	0e 94 32 63 	call	0xc664	; 0xc664 <f_opendir>
    if (fr == FR_OK)
    e13e:	00 97       	sbiw	r24, 0x00	; 0
    e140:	09 f0       	breq	.+2      	; 0xe144 <fatfs_scan_files+0x20>
    e142:	5b c0       	rjmp	.+182    	; 0xe1fa <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e144:	8f e2       	ldi	r24, 0x2F	; 47
    e146:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e148:	be 01       	movw	r22, r28
    e14a:	6f 5f       	subi	r22, 0xFF	; 255
    e14c:	7f 4f       	sbci	r23, 0xFF	; 255
    e14e:	ce 01       	movw	r24, r28
    e150:	89 5e       	subi	r24, 0xE9	; 233
    e152:	9e 4f       	sbci	r25, 0xFE	; 254
    e154:	0e 94 b8 63 	call	0xc770	; 0xc770 <f_readdir>
    e158:	00 97       	sbiw	r24, 0x00	; 0
    e15a:	09 f0       	breq	.+2      	; 0xe15e <fatfs_scan_files+0x3a>
    e15c:	4e c0       	rjmp	.+156    	; 0xe1fa <fatfs_scan_files+0xd6>
    e15e:	2f 89       	ldd	r18, Y+23	; 0x17
    e160:	22 23       	and	r18, r18
    e162:	09 f4       	brne	.+2      	; 0xe166 <fatfs_scan_files+0x42>
    e164:	4a c0       	rjmp	.+148    	; 0xe1fa <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e166:	89 85       	ldd	r24, Y+9	; 0x09
    e168:	84 ff       	sbrs	r24, 4
    e16a:	25 c0       	rjmp	.+74     	; 0xe1b6 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e16c:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e170:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e174:	01 96       	adiw	r24, 0x01	; 1
    e176:	90 93 ba 1c 	sts	0x1CBA, r25	; 0x801cba <AccDirs+0x1>
    e17a:	80 93 b9 1c 	sts	0x1CB9, r24	; 0x801cb9 <AccDirs>
                i = strlen(path);
    e17e:	f8 01       	movw	r30, r16
    e180:	01 90       	ld	r0, Z+
    e182:	00 20       	and	r0, r0
    e184:	e9 f7       	brne	.-6      	; 0xe180 <fatfs_scan_files+0x5c>
    e186:	31 97       	sbiw	r30, 0x01	; 1
    e188:	e0 1b       	sub	r30, r16
    e18a:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e18c:	78 01       	movw	r14, r16
    e18e:	ee 0e       	add	r14, r30
    e190:	ff 1e       	adc	r15, r31
    e192:	d7 01       	movw	r26, r14
    e194:	dc 92       	st	X, r13
    e196:	cf 01       	movw	r24, r30
    e198:	01 96       	adiw	r24, 0x01	; 1
    e19a:	be 01       	movw	r22, r28
    e19c:	69 5e       	subi	r22, 0xE9	; 233
    e19e:	7f 4f       	sbci	r23, 0xFF	; 255
    e1a0:	80 0f       	add	r24, r16
    e1a2:	91 1f       	adc	r25, r17
    e1a4:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
                fr = fatfs_scan_files(path);
    e1a8:	c8 01       	movw	r24, r16
    e1aa:	bc df       	rcall	.-136    	; 0xe124 <fatfs_scan_files>
                path[i] = 0;
    e1ac:	f7 01       	movw	r30, r14
    e1ae:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e1b0:	00 97       	sbiw	r24, 0x00	; 0
    e1b2:	51 f2       	breq	.-108    	; 0xe148 <fatfs_scan_files+0x24>
    e1b4:	22 c0       	rjmp	.+68     	; 0xe1fa <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e1b6:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e1ba:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e1be:	01 96       	adiw	r24, 0x01	; 1
    e1c0:	90 93 bc 1c 	sts	0x1CBC, r25	; 0x801cbc <AccFiles+0x1>
    e1c4:	80 93 bb 1c 	sts	0x1CBB, r24	; 0x801cbb <AccFiles>
                AccSize += info.fsize;
    e1c8:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <AccSize>
    e1cc:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e1d0:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e1d4:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e1d8:	89 81       	ldd	r24, Y+1	; 0x01
    e1da:	9a 81       	ldd	r25, Y+2	; 0x02
    e1dc:	ab 81       	ldd	r26, Y+3	; 0x03
    e1de:	bc 81       	ldd	r27, Y+4	; 0x04
    e1e0:	84 0f       	add	r24, r20
    e1e2:	95 1f       	adc	r25, r21
    e1e4:	a6 1f       	adc	r26, r22
    e1e6:	b7 1f       	adc	r27, r23
    e1e8:	80 93 b5 1c 	sts	0x1CB5, r24	; 0x801cb5 <AccSize>
    e1ec:	90 93 b6 1c 	sts	0x1CB6, r25	; 0x801cb6 <AccSize+0x1>
    e1f0:	a0 93 b7 1c 	sts	0x1CB7, r26	; 0x801cb7 <AccSize+0x2>
    e1f4:	b0 93 b8 1c 	sts	0x1CB8, r27	; 0x801cb8 <AccSize+0x3>
    e1f8:	a7 cf       	rjmp	.-178    	; 0xe148 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e1fa:	cc 5b       	subi	r28, 0xBC	; 188
    e1fc:	de 4f       	sbci	r29, 0xFE	; 254
    e1fe:	e7 e0       	ldi	r30, 0x07	; 7
    e200:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__epilogue_restores__+0x16>

0000e204 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e204:	01 97       	sbiw	r24, 0x01	; 1
    e206:	84 30       	cpi	r24, 0x04	; 4
    e208:	91 05       	cpc	r25, r1
    e20a:	40 f4       	brcc	.+16     	; 0xe21c <fatfs_fstype+0x18>
    e20c:	88 0f       	add	r24, r24
    e20e:	99 1f       	adc	r25, r25
    e210:	fc 01       	movw	r30, r24
    e212:	e6 53       	subi	r30, 0x36	; 54
    e214:	f7 4f       	sbci	r31, 0xF7	; 247
    e216:	80 81       	ld	r24, Z
    e218:	91 81       	ldd	r25, Z+1	; 0x01
    e21a:	08 95       	ret
    char *ptr;
    switch(type)
    e21c:	88 ea       	ldi	r24, 0xA8	; 168
    e21e:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e220:	08 95       	ret

0000e222 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    e222:	a7 e3       	ldi	r26, 0x37	; 55
    e224:	b0 e0       	ldi	r27, 0x00	; 0
    e226:	e7 e1       	ldi	r30, 0x17	; 23
    e228:	f1 e7       	ldi	r31, 0x71	; 113
    e22a:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    e22e:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e230:	fc 01       	movw	r30, r24
    e232:	21 91       	ld	r18, Z+
    e234:	cf 01       	movw	r24, r30
    e236:	20 32       	cpi	r18, 0x20	; 32
    e238:	d1 f3       	breq	.-12     	; 0xe22e <fatfs_status+0xc>
    e23a:	29 30       	cpi	r18, 0x09	; 9
    e23c:	c1 f3       	breq	.-16     	; 0xe22e <fatfs_status+0xc>
        ++ptr;

    printf("fatfs status:%s\n",ptr);
    e23e:	ed b7       	in	r30, 0x3d	; 61
    e240:	fe b7       	in	r31, 0x3e	; 62
    e242:	e4 82       	std	Z+4, r14	; 0x04
    e244:	f5 82       	std	Z+5, r15	; 0x05
    e246:	8b e8       	ldi	r24, 0x8B	; 139
    e248:	9a e0       	ldi	r25, 0x0A	; 10
    e24a:	a0 e0       	ldi	r26, 0x00	; 0
    e24c:	81 83       	std	Z+1, r24	; 0x01
    e24e:	92 83       	std	Z+2, r25	; 0x02
    e250:	a3 83       	std	Z+3, r26	; 0x03
    e252:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e256:	ae 01       	movw	r20, r28
    e258:	4a 5c       	subi	r20, 0xCA	; 202
    e25a:	5f 4f       	sbci	r21, 0xFF	; 255
    e25c:	be 01       	movw	r22, r28
    e25e:	6e 5c       	subi	r22, 0xCE	; 206
    e260:	7f 4f       	sbci	r23, 0xFF	; 255
    e262:	c7 01       	movw	r24, r14
    e264:	0e 94 3a 64 	call	0xc874	; 0xc874 <f_getfree>
    if (res)
    e268:	89 2b       	or	r24, r25
    e26a:	19 f0       	breq	.+6      	; 0xe272 <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    e26c:	8c e6       	ldi	r24, 0x6C	; 108
    e26e:	9a e0       	ldi	r25, 0x0A	; 10
    e270:	c0 c0       	rjmp	.+384    	; 0xe3f2 <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e272:	ee a9       	ldd	r30, Y+54	; 0x36
    e274:	ff a9       	ldd	r31, Y+55	; 0x37
    e276:	80 81       	ld	r24, Z
    e278:	90 e0       	ldi	r25, 0x00	; 0
    e27a:	c4 df       	rcall	.-120    	; 0xe204 <fatfs_fstype>
    e27c:	ed b7       	in	r30, 0x3d	; 61
    e27e:	fe b7       	in	r31, 0x3e	; 62
    e280:	95 83       	std	Z+5, r25	; 0x05
    e282:	84 83       	std	Z+4, r24	; 0x04
    e284:	8e e4       	ldi	r24, 0x4E	; 78
    e286:	9a e0       	ldi	r25, 0x0A	; 10
    e288:	a0 e0       	ldi	r26, 0x00	; 0
    e28a:	81 83       	std	Z+1, r24	; 0x01
    e28c:	92 83       	std	Z+2, r25	; 0x02
    e28e:	a3 83       	std	Z+3, r26	; 0x03
    e290:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e294:	ee a9       	ldd	r30, Y+54	; 0x36
    e296:	ff a9       	ldd	r31, Y+55	; 0x37
    e298:	81 85       	ldd	r24, Z+9	; 0x09
    e29a:	92 85       	ldd	r25, Z+10	; 0x0a
    e29c:	a0 e0       	ldi	r26, 0x00	; 0
    e29e:	b0 e0       	ldi	r27, 0x00	; 0
    e2a0:	39 e0       	ldi	r19, 0x09	; 9
    e2a2:	88 0f       	add	r24, r24
    e2a4:	99 1f       	adc	r25, r25
    e2a6:	aa 1f       	adc	r26, r26
    e2a8:	bb 1f       	adc	r27, r27
    e2aa:	3a 95       	dec	r19
    e2ac:	d1 f7       	brne	.-12     	; 0xe2a2 <fatfs_status+0x80>
    e2ae:	ed b7       	in	r30, 0x3d	; 61
    e2b0:	fe b7       	in	r31, 0x3e	; 62
    e2b2:	84 83       	std	Z+4, r24	; 0x04
    e2b4:	95 83       	std	Z+5, r25	; 0x05
    e2b6:	a6 83       	std	Z+6, r26	; 0x06
    e2b8:	b7 83       	std	Z+7, r27	; 0x07
    e2ba:	8f e2       	ldi	r24, 0x2F	; 47
    e2bc:	9a e0       	ldi	r25, 0x0A	; 10
    e2be:	a0 e0       	ldi	r26, 0x00	; 0
    e2c0:	81 83       	std	Z+1, r24	; 0x01
    e2c2:	92 83       	std	Z+2, r25	; 0x02
    e2c4:	a3 83       	std	Z+3, r26	; 0x03
    e2c6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e2ca:	ee a9       	ldd	r30, Y+54	; 0x36
    e2cc:	ff a9       	ldd	r31, Y+55	; 0x37
    e2ce:	82 81       	ldd	r24, Z+2	; 0x02
    e2d0:	90 e0       	ldi	r25, 0x00	; 0
    e2d2:	ed b7       	in	r30, 0x3d	; 61
    e2d4:	fe b7       	in	r31, 0x3e	; 62
    e2d6:	95 83       	std	Z+5, r25	; 0x05
    e2d8:	84 83       	std	Z+4, r24	; 0x04
    e2da:	81 e1       	ldi	r24, 0x11	; 17
    e2dc:	9a e0       	ldi	r25, 0x0A	; 10
    e2de:	a0 e0       	ldi	r26, 0x00	; 0
    e2e0:	81 83       	std	Z+1, r24	; 0x01
    e2e2:	92 83       	std	Z+2, r25	; 0x02
    e2e4:	a3 83       	std	Z+3, r26	; 0x03
    e2e6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e2ea:	ee a9       	ldd	r30, Y+54	; 0x36
    e2ec:	ff a9       	ldd	r31, Y+55	; 0x37
    e2ee:	87 81       	ldd	r24, Z+7	; 0x07
    e2f0:	90 85       	ldd	r25, Z+8	; 0x08
    e2f2:	ed b7       	in	r30, 0x3d	; 61
    e2f4:	fe b7       	in	r31, 0x3e	; 62
    e2f6:	95 83       	std	Z+5, r25	; 0x05
    e2f8:	84 83       	std	Z+4, r24	; 0x04
    e2fa:	83 ef       	ldi	r24, 0xF3	; 243
    e2fc:	99 e0       	ldi	r25, 0x09	; 9
    e2fe:	a0 e0       	ldi	r26, 0x00	; 0
    e300:	81 83       	std	Z+1, r24	; 0x01
    e302:	92 83       	std	Z+2, r25	; 0x02
    e304:	a3 83       	std	Z+3, r26	; 0x03
    e306:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e30a:	ee a9       	ldd	r30, Y+54	; 0x36
    e30c:	ff a9       	ldd	r31, Y+55	; 0x37
    e30e:	85 8d       	ldd	r24, Z+29	; 0x1d
    e310:	96 8d       	ldd	r25, Z+30	; 0x1e
    e312:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e314:	b0 a1       	ldd	r27, Z+32	; 0x20
    e316:	ed b7       	in	r30, 0x3d	; 61
    e318:	fe b7       	in	r31, 0x3e	; 62
    e31a:	84 83       	std	Z+4, r24	; 0x04
    e31c:	95 83       	std	Z+5, r25	; 0x05
    e31e:	a6 83       	std	Z+6, r26	; 0x06
    e320:	b7 83       	std	Z+7, r27	; 0x07
    e322:	84 ed       	ldi	r24, 0xD4	; 212
    e324:	99 e0       	ldi	r25, 0x09	; 9
    e326:	a0 e0       	ldi	r26, 0x00	; 0
    e328:	81 83       	std	Z+1, r24	; 0x01
    e32a:	92 83       	std	Z+2, r25	; 0x02
    e32c:	a3 83       	std	Z+3, r26	; 0x03
    e32e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e332:	ee a9       	ldd	r30, Y+54	; 0x36
    e334:	ff a9       	ldd	r31, Y+55	; 0x37
    e336:	81 8d       	ldd	r24, Z+25	; 0x19
    e338:	92 8d       	ldd	r25, Z+26	; 0x1a
    e33a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e33c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e33e:	02 97       	sbiw	r24, 0x02	; 2
    e340:	a1 09       	sbc	r26, r1
    e342:	b1 09       	sbc	r27, r1
    e344:	ed b7       	in	r30, 0x3d	; 61
    e346:	fe b7       	in	r31, 0x3e	; 62
    e348:	84 83       	std	Z+4, r24	; 0x04
    e34a:	95 83       	std	Z+5, r25	; 0x05
    e34c:	a6 83       	std	Z+6, r26	; 0x06
    e34e:	b7 83       	std	Z+7, r27	; 0x07
    e350:	85 eb       	ldi	r24, 0xB5	; 181
    e352:	99 e0       	ldi	r25, 0x09	; 9
    e354:	a0 e0       	ldi	r26, 0x00	; 0
    e356:	81 83       	std	Z+1, r24	; 0x01
    e358:	92 83       	std	Z+2, r25	; 0x02
    e35a:	a3 83       	std	Z+3, r26	; 0x03
    e35c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e360:	ee a9       	ldd	r30, Y+54	; 0x36
    e362:	ff a9       	ldd	r31, Y+55	; 0x37
    e364:	85 a1       	ldd	r24, Z+37	; 0x25
    e366:	96 a1       	ldd	r25, Z+38	; 0x26
    e368:	a7 a1       	ldd	r26, Z+39	; 0x27
    e36a:	b0 a5       	ldd	r27, Z+40	; 0x28
    e36c:	ed b7       	in	r30, 0x3d	; 61
    e36e:	fe b7       	in	r31, 0x3e	; 62
    e370:	84 83       	std	Z+4, r24	; 0x04
    e372:	95 83       	std	Z+5, r25	; 0x05
    e374:	a6 83       	std	Z+6, r26	; 0x06
    e376:	b7 83       	std	Z+7, r27	; 0x07
    e378:	86 e9       	ldi	r24, 0x96	; 150
    e37a:	99 e0       	ldi	r25, 0x09	; 9
    e37c:	a0 e0       	ldi	r26, 0x00	; 0
    e37e:	81 83       	std	Z+1, r24	; 0x01
    e380:	92 83       	std	Z+2, r25	; 0x02
    e382:	a3 83       	std	Z+3, r26	; 0x03
    e384:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e388:	ee a9       	ldd	r30, Y+54	; 0x36
    e38a:	ff a9       	ldd	r31, Y+55	; 0x37
    e38c:	81 a5       	ldd	r24, Z+41	; 0x29
    e38e:	92 a5       	ldd	r25, Z+42	; 0x2a
    e390:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e392:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e394:	ed b7       	in	r30, 0x3d	; 61
    e396:	fe b7       	in	r31, 0x3e	; 62
    e398:	84 83       	std	Z+4, r24	; 0x04
    e39a:	95 83       	std	Z+5, r25	; 0x05
    e39c:	a6 83       	std	Z+6, r26	; 0x06
    e39e:	b7 83       	std	Z+7, r27	; 0x07
    e3a0:	87 e7       	ldi	r24, 0x77	; 119
    e3a2:	99 e0       	ldi	r25, 0x09	; 9
    e3a4:	a0 e0       	ldi	r26, 0x00	; 0
    e3a6:	81 83       	std	Z+1, r24	; 0x01
    e3a8:	92 83       	std	Z+2, r25	; 0x02
    e3aa:	a3 83       	std	Z+3, r26	; 0x03
    e3ac:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e3b0:	ee a9       	ldd	r30, Y+54	; 0x36
    e3b2:	ff a9       	ldd	r31, Y+55	; 0x37
    e3b4:	85 a5       	ldd	r24, Z+45	; 0x2d
    e3b6:	96 a5       	ldd	r25, Z+46	; 0x2e
    e3b8:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e3ba:	b0 a9       	ldd	r27, Z+48	; 0x30
    e3bc:	ed b7       	in	r30, 0x3d	; 61
    e3be:	fe b7       	in	r31, 0x3e	; 62
    e3c0:	84 83       	std	Z+4, r24	; 0x04
    e3c2:	95 83       	std	Z+5, r25	; 0x05
    e3c4:	a6 83       	std	Z+6, r26	; 0x06
    e3c6:	b7 83       	std	Z+7, r27	; 0x07
    e3c8:	88 e5       	ldi	r24, 0x58	; 88
    e3ca:	99 e0       	ldi	r25, 0x09	; 9
    e3cc:	a0 e0       	ldi	r26, 0x00	; 0
    e3ce:	81 83       	std	Z+1, r24	; 0x01
    e3d0:	92 83       	std	Z+2, r25	; 0x02
    e3d2:	a3 83       	std	Z+3, r26	; 0x03
    e3d4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e3d8:	ae 01       	movw	r20, r28
    e3da:	42 5d       	subi	r20, 0xD2	; 210
    e3dc:	5f 4f       	sbci	r21, 0xFF	; 255
    e3de:	be 01       	movw	r22, r28
    e3e0:	6c 5e       	subi	r22, 0xEC	; 236
    e3e2:	7f 4f       	sbci	r23, 0xFF	; 255
    e3e4:	c7 01       	movw	r24, r14
    e3e6:	0e 94 6c 68 	call	0xd0d8	; 0xd0d8 <f_getlabel>
    if (res)
    e3ea:	89 2b       	or	r24, r25
    e3ec:	69 f0       	breq	.+26     	; 0xe408 <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e3ee:	88 e3       	ldi	r24, 0x38	; 56
    e3f0:	99 e0       	ldi	r25, 0x09	; 9
    e3f2:	a0 e0       	ldi	r26, 0x00	; 0
    e3f4:	ed b7       	in	r30, 0x3d	; 61
    e3f6:	fe b7       	in	r31, 0x3e	; 62
    e3f8:	81 83       	std	Z+1, r24	; 0x01
    e3fa:	92 83       	std	Z+2, r25	; 0x02
    e3fc:	a3 83       	std	Z+3, r26	; 0x03
    e3fe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(0);
    e402:	80 e0       	ldi	r24, 0x00	; 0
    e404:	90 e0       	ldi	r25, 0x00	; 0
    e406:	95 c0       	rjmp	.+298    	; 0xe532 <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e408:	8c 89       	ldd	r24, Y+20	; 0x14
    e40a:	81 11       	cpse	r24, r1
    e40c:	03 c0       	rjmp	.+6      	; 0xe414 <fatfs_status+0x1f2>
    e40e:	80 eb       	ldi	r24, 0xB0	; 176
    e410:	98 e0       	ldi	r25, 0x08	; 8
    e412:	02 c0       	rjmp	.+4      	; 0xe418 <fatfs_status+0x1f6>
    e414:	ce 01       	movw	r24, r28
    e416:	44 96       	adiw	r24, 0x14	; 20
    e418:	ed b7       	in	r30, 0x3d	; 61
    e41a:	fe b7       	in	r31, 0x3e	; 62
    e41c:	95 83       	std	Z+5, r25	; 0x05
    e41e:	84 83       	std	Z+4, r24	; 0x04
    e420:	8a e1       	ldi	r24, 0x1A	; 26
    e422:	99 e0       	ldi	r25, 0x09	; 9
    e424:	a0 e0       	ldi	r26, 0x00	; 0
    e426:	81 83       	std	Z+1, r24	; 0x01
    e428:	92 83       	std	Z+2, r25	; 0x02
    e42a:	a3 83       	std	Z+3, r26	; 0x03
    e42c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e430:	8e a5       	ldd	r24, Y+46	; 0x2e
    e432:	9f a5       	ldd	r25, Y+47	; 0x2f
    e434:	a8 a9       	ldd	r26, Y+48	; 0x30
    e436:	b9 a9       	ldd	r27, Y+49	; 0x31
    e438:	ed b7       	in	r30, 0x3d	; 61
    e43a:	fe b7       	in	r31, 0x3e	; 62
    e43c:	97 83       	std	Z+7, r25	; 0x07
    e43e:	86 83       	std	Z+6, r24	; 0x06
    e440:	b5 83       	std	Z+5, r27	; 0x05
    e442:	a4 83       	std	Z+4, r26	; 0x04
    e444:	85 ef       	ldi	r24, 0xF5	; 245
    e446:	98 e0       	ldi	r25, 0x08	; 8
    e448:	a0 e0       	ldi	r26, 0x00	; 0
    e44a:	81 83       	std	Z+1, r24	; 0x01
    e44c:	92 83       	std	Z+2, r25	; 0x02
    e44e:	a3 83       	std	Z+3, r26	; 0x03
    e450:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e454:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccDirs+0x1>
    e458:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccDirs>
    e45c:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccFiles+0x1>
    e460:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccFiles>
    e464:	10 92 b5 1c 	sts	0x1CB5, r1	; 0x801cb5 <AccSize>
    e468:	10 92 b6 1c 	sts	0x1CB6, r1	; 0x801cb6 <AccSize+0x1>
    e46c:	10 92 b7 1c 	sts	0x1CB7, r1	; 0x801cb7 <AccSize+0x2>
    e470:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e474:	c7 01       	movw	r24, r14
    e476:	56 de       	rcall	.-852    	; 0xe124 <fatfs_scan_files>
    if (res)
    e478:	89 2b       	or	r24, r25
    e47a:	19 f0       	breq	.+6      	; 0xe482 <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e47c:	8f ec       	ldi	r24, 0xCF	; 207
    e47e:	98 e0       	ldi	r25, 0x08	; 8
    e480:	b8 cf       	rjmp	.-144    	; 0xe3f2 <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e482:	0e a9       	ldd	r16, Y+54	; 0x36
    e484:	1f a9       	ldd	r17, Y+55	; 0x37
    e486:	f8 01       	movw	r30, r16
    e488:	c1 84       	ldd	r12, Z+9	; 0x09
    e48a:	d2 84       	ldd	r13, Z+10	; 0x0a
    e48c:	e1 2c       	mov	r14, r1
    e48e:	f1 2c       	mov	r15, r1
    e490:	6a a9       	ldd	r22, Y+50	; 0x32
    e492:	7b a9       	ldd	r23, Y+51	; 0x33
    e494:	8c a9       	ldd	r24, Y+52	; 0x34
    e496:	9d a9       	ldd	r25, Y+53	; 0x35
    e498:	a7 01       	movw	r20, r14
    e49a:	96 01       	movw	r18, r12
    e49c:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__mulsi3>
    e4a0:	22 e0       	ldi	r18, 0x02	; 2
    e4a2:	30 e0       	ldi	r19, 0x00	; 0
    e4a4:	40 e0       	ldi	r20, 0x00	; 0
    e4a6:	50 e0       	ldi	r21, 0x00	; 0
    e4a8:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
    e4ac:	ed b7       	in	r30, 0x3d	; 61
    e4ae:	fe b7       	in	r31, 0x3e	; 62
    e4b0:	20 8b       	std	Z+16, r18	; 0x10
    e4b2:	31 8b       	std	Z+17, r19	; 0x11
    e4b4:	42 8b       	std	Z+18, r20	; 0x12
    e4b6:	53 8b       	std	Z+19, r21	; 0x13
    e4b8:	f8 01       	movw	r30, r16
    e4ba:	81 8d       	ldd	r24, Z+25	; 0x19
    e4bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    e4be:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e4c0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e4c2:	9c 01       	movw	r18, r24
    e4c4:	ad 01       	movw	r20, r26
    e4c6:	22 50       	subi	r18, 0x02	; 2
    e4c8:	31 09       	sbc	r19, r1
    e4ca:	41 09       	sbc	r20, r1
    e4cc:	51 09       	sbc	r21, r1
    e4ce:	c7 01       	movw	r24, r14
    e4d0:	b6 01       	movw	r22, r12
    e4d2:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__mulsi3>
    e4d6:	dc 01       	movw	r26, r24
    e4d8:	cb 01       	movw	r24, r22
    e4da:	b6 95       	lsr	r27
    e4dc:	a7 95       	ror	r26
    e4de:	97 95       	ror	r25
    e4e0:	87 95       	ror	r24
    e4e2:	ed b7       	in	r30, 0x3d	; 61
    e4e4:	fe b7       	in	r31, 0x3e	; 62
    e4e6:	84 87       	std	Z+12, r24	; 0x0c
    e4e8:	95 87       	std	Z+13, r25	; 0x0d
    e4ea:	a6 87       	std	Z+14, r26	; 0x0e
    e4ec:	b7 87       	std	Z+15, r27	; 0x0f
    e4ee:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e4f2:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e4f6:	93 87       	std	Z+11, r25	; 0x0b
    e4f8:	82 87       	std	Z+10, r24	; 0x0a
    e4fa:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <AccSize>
    e4fe:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e502:	a0 91 b7 1c 	lds	r26, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e506:	b0 91 b8 1c 	lds	r27, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e50a:	86 83       	std	Z+6, r24	; 0x06
    e50c:	97 83       	std	Z+7, r25	; 0x07
    e50e:	a0 87       	std	Z+8, r26	; 0x08
    e510:	b1 87       	std	Z+9, r27	; 0x09
    e512:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e516:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e51a:	95 83       	std	Z+5, r25	; 0x05
    e51c:	84 83       	std	Z+4, r24	; 0x04
    e51e:	82 e8       	ldi	r24, 0x82	; 130
    e520:	98 e0       	ldi	r25, 0x08	; 8
    e522:	a0 e0       	ldi	r26, 0x00	; 0
    e524:	81 83       	std	Z+1, r24	; 0x01
    e526:	92 83       	std	Z+2, r25	; 0x02
    e528:	a3 83       	std	Z+3, r26	; 0x03
    e52a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e52e:	81 e0       	ldi	r24, 0x01	; 1
    e530:	90 e0       	ldi	r25, 0x00	; 0
}
    e532:	e7 96       	adiw	r28, 0x37	; 55
    e534:	e8 e0       	ldi	r30, 0x08	; 8
    e536:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000e53a <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e53a:	ab e1       	ldi	r26, 0x1B	; 27
    e53c:	b0 e0       	ldi	r27, 0x00	; 0
    e53e:	e3 ea       	ldi	r30, 0xA3	; 163
    e540:	f2 e7       	ldi	r31, 0x72	; 114
    e542:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    e546:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e548:	fc 01       	movw	r30, r24
    e54a:	86 89       	ldd	r24, Z+22	; 0x16
    e54c:	81 11       	cpse	r24, r1
    e54e:	03 c0       	rjmp	.+6      	; 0xe556 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e550:	87 e6       	ldi	r24, 0x67	; 103
    e552:	98 e0       	ldi	r25, 0x08	; 8
    e554:	69 c0       	rjmp	.+210    	; 0xe628 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e556:	fd 01       	movw	r30, r26
    e558:	80 85       	ldd	r24, Z+8	; 0x08
    e55a:	84 fd       	sbrc	r24, 4
    e55c:	02 c0       	rjmp	.+4      	; 0xe562 <fatfs_filinfo_list+0x28>
    e55e:	9d e2       	ldi	r25, 0x2D	; 45
    e560:	01 c0       	rjmp	.+2      	; 0xe564 <fatfs_filinfo_list+0x2a>
    e562:	94 e4       	ldi	r25, 0x44	; 68
    e564:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e566:	80 fd       	sbrc	r24, 0
    e568:	02 c0       	rjmp	.+4      	; 0xe56e <fatfs_filinfo_list+0x34>
    e56a:	9d e2       	ldi	r25, 0x2D	; 45
    e56c:	01 c0       	rjmp	.+2      	; 0xe570 <fatfs_filinfo_list+0x36>
    e56e:	92 e5       	ldi	r25, 0x52	; 82
    e570:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e572:	81 fd       	sbrc	r24, 1
    e574:	02 c0       	rjmp	.+4      	; 0xe57a <fatfs_filinfo_list+0x40>
    e576:	9d e2       	ldi	r25, 0x2D	; 45
    e578:	01 c0       	rjmp	.+2      	; 0xe57c <fatfs_filinfo_list+0x42>
    e57a:	98 e4       	ldi	r25, 0x48	; 72
    e57c:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e57e:	82 fd       	sbrc	r24, 2
    e580:	02 c0       	rjmp	.+4      	; 0xe586 <fatfs_filinfo_list+0x4c>
    e582:	9d e2       	ldi	r25, 0x2D	; 45
    e584:	01 c0       	rjmp	.+2      	; 0xe588 <fatfs_filinfo_list+0x4e>
    e586:	93 e5       	ldi	r25, 0x53	; 83
    e588:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e58a:	85 fd       	sbrc	r24, 5
    e58c:	02 c0       	rjmp	.+4      	; 0xe592 <fatfs_filinfo_list+0x58>
    e58e:	8d e2       	ldi	r24, 0x2D	; 45
    e590:	01 c0       	rjmp	.+2      	; 0xe594 <fatfs_filinfo_list+0x5a>
    e592:	81 e4       	ldi	r24, 0x41	; 65
    e594:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e596:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e598:	fd 01       	movw	r30, r26
    e59a:	24 81       	ldd	r18, Z+4	; 0x04
    e59c:	35 81       	ldd	r19, Z+5	; 0x05
    e59e:	46 81       	ldd	r20, Z+6	; 0x06
    e5a0:	57 81       	ldd	r21, Z+7	; 0x07
    e5a2:	cd 01       	movw	r24, r26
    e5a4:	46 96       	adiw	r24, 0x16	; 22
    e5a6:	ed b7       	in	r30, 0x3d	; 61
    e5a8:	fe b7       	in	r31, 0x3e	; 62
    e5aa:	95 8b       	std	Z+21, r25	; 0x15
    e5ac:	84 8b       	std	Z+20, r24	; 0x14
    e5ae:	8d 91       	ld	r24, X+
    e5b0:	9d 91       	ld	r25, X+
    e5b2:	0d 90       	ld	r0, X+
    e5b4:	bc 91       	ld	r27, X
    e5b6:	a0 2d       	mov	r26, r0
    e5b8:	80 8b       	std	Z+16, r24	; 0x10
    e5ba:	91 8b       	std	Z+17, r25	; 0x11
    e5bc:	a2 8b       	std	Z+18, r26	; 0x12
    e5be:	b3 8b       	std	Z+19, r27	; 0x13
    e5c0:	ca 01       	movw	r24, r20
    e5c2:	45 e0       	ldi	r20, 0x05	; 5
    e5c4:	96 95       	lsr	r25
    e5c6:	87 95       	ror	r24
    e5c8:	4a 95       	dec	r20
    e5ca:	e1 f7       	brne	.-8      	; 0xe5c4 <fatfs_filinfo_list+0x8a>
    e5cc:	8f 73       	andi	r24, 0x3F	; 63
    e5ce:	99 27       	eor	r25, r25
    e5d0:	97 87       	std	Z+15, r25	; 0x0f
    e5d2:	86 87       	std	Z+14, r24	; 0x0e
    e5d4:	85 2f       	mov	r24, r21
    e5d6:	86 95       	lsr	r24
    e5d8:	86 95       	lsr	r24
    e5da:	86 95       	lsr	r24
    e5dc:	84 87       	std	Z+12, r24	; 0x0c
    e5de:	15 86       	std	Z+13, r1	; 0x0d
    e5e0:	c9 01       	movw	r24, r18
    e5e2:	8f 71       	andi	r24, 0x1F	; 31
    e5e4:	99 27       	eor	r25, r25
    e5e6:	93 87       	std	Z+11, r25	; 0x0b
    e5e8:	82 87       	std	Z+10, r24	; 0x0a
    e5ea:	c9 01       	movw	r24, r18
    e5ec:	55 e0       	ldi	r21, 0x05	; 5
    e5ee:	96 95       	lsr	r25
    e5f0:	87 95       	ror	r24
    e5f2:	5a 95       	dec	r21
    e5f4:	e1 f7       	brne	.-8      	; 0xe5ee <fatfs_filinfo_list+0xb4>
    e5f6:	8f 70       	andi	r24, 0x0F	; 15
    e5f8:	99 27       	eor	r25, r25
    e5fa:	91 87       	std	Z+9, r25	; 0x09
    e5fc:	80 87       	std	Z+8, r24	; 0x08
    e5fe:	23 2f       	mov	r18, r19
    e600:	33 27       	eor	r19, r19
    e602:	26 95       	lsr	r18
    e604:	24 54       	subi	r18, 0x44	; 68
    e606:	38 4f       	sbci	r19, 0xF8	; 248
    e608:	37 83       	std	Z+7, r19	; 0x07
    e60a:	26 83       	std	Z+6, r18	; 0x06
    e60c:	ce 01       	movw	r24, r28
    e60e:	46 96       	adiw	r24, 0x16	; 22
    e610:	95 83       	std	Z+5, r25	; 0x05
    e612:	84 83       	std	Z+4, r24	; 0x04
    e614:	85 e4       	ldi	r24, 0x45	; 69
    e616:	98 e0       	ldi	r25, 0x08	; 8
    e618:	a0 e0       	ldi	r26, 0x00	; 0
    e61a:	81 83       	std	Z+1, r24	; 0x01
    e61c:	92 83       	std	Z+2, r25	; 0x02
    e61e:	a3 83       	std	Z+3, r26	; 0x03
    e620:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e624:	83 e4       	ldi	r24, 0x43	; 67
    e626:	98 e0       	ldi	r25, 0x08	; 8
    e628:	a0 e0       	ldi	r26, 0x00	; 0
    e62a:	ed b7       	in	r30, 0x3d	; 61
    e62c:	fe b7       	in	r31, 0x3e	; 62
    e62e:	81 83       	std	Z+1, r24	; 0x01
    e630:	92 83       	std	Z+2, r25	; 0x02
    e632:	a3 83       	std	Z+3, r26	; 0x03
    e634:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
}
    e638:	6b 96       	adiw	r28, 0x1b	; 27
    e63a:	e2 e0       	ldi	r30, 0x02	; 2
    e63c:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000e640 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e640:	00 d0       	rcall	.+0      	; 0xe642 <fatfs_help+0x2>
    e642:	1f 92       	push	r1
    if(full)
    e644:	89 2b       	or	r24, r25
    e646:	51 f0       	breq	.+20     	; 0xe65c <fatfs_help+0x1c>
    {
        printf(
    e648:	81 e2       	ldi	r24, 0x21	; 33
    e64a:	9b e0       	ldi	r25, 0x0B	; 11
    e64c:	a0 e0       	ldi	r26, 0x00	; 0
    e64e:	ed b7       	in	r30, 0x3d	; 61
    e650:	fe b7       	in	r31, 0x3e	; 62
    e652:	81 83       	std	Z+1, r24	; 0x01
    e654:	92 83       	std	Z+2, r25	; 0x02
    e656:	a3 83       	std	Z+3, r26	; 0x03
    e658:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
            "\n"
            );
    }

}
    e65c:	0f 90       	pop	r0
    e65e:	0f 90       	pop	r0
    e660:	0f 90       	pop	r0
    e662:	08 95       	ret

0000e664 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e664:	a6 e5       	ldi	r26, 0x56	; 86
    e666:	b2 e0       	ldi	r27, 0x02	; 2
    e668:	e8 e3       	ldi	r30, 0x38	; 56
    e66a:	f3 e7       	ldi	r31, 0x73	; 115
    e66c:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e670:	8e 01       	movw	r16, r28
    e672:	0e 5d       	subi	r16, 0xDE	; 222
    e674:	1e 4f       	sbci	r17, 0xFE	; 254
    e676:	20 e0       	ldi	r18, 0x00	; 0
    e678:	31 e0       	ldi	r19, 0x01	; 1
    e67a:	f8 01       	movw	r30, r16
    e67c:	a9 01       	movw	r20, r18
    e67e:	11 92       	st	Z+, r1
    e680:	41 50       	subi	r20, 0x01	; 1
    e682:	50 40       	sbci	r21, 0x00	; 0
    e684:	e1 f7       	brne	.-8      	; 0xe67e <fatfs_ls+0x1a>

    if(!name || !*name)
    e686:	00 97       	sbiw	r24, 0x00	; 0
    e688:	21 f0       	breq	.+8      	; 0xe692 <fatfs_ls+0x2e>
    e68a:	fc 01       	movw	r30, r24
    e68c:	20 81       	ld	r18, Z
    e68e:	21 11       	cpse	r18, r1
    e690:	03 c0       	rjmp	.+6      	; 0xe698 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e692:	61 ef       	ldi	r22, 0xF1	; 241
    e694:	72 e1       	ldi	r23, 0x12	; 18
    e696:	01 c0       	rjmp	.+2      	; 0xe69a <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e698:	bc 01       	movw	r22, r24
    e69a:	c8 01       	movw	r24, r16
    e69c:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e6a0:	ed b7       	in	r30, 0x3d	; 61
    e6a2:	fe b7       	in	r31, 0x3e	; 62
    e6a4:	15 83       	std	Z+5, r17	; 0x05
    e6a6:	04 83       	std	Z+4, r16	; 0x04
    e6a8:	81 ee       	ldi	r24, 0xE1	; 225
    e6aa:	9a e0       	ldi	r25, 0x0A	; 10
    e6ac:	a0 e0       	ldi	r26, 0x00	; 0
    e6ae:	81 83       	std	Z+1, r24	; 0x01
    e6b0:	92 83       	std	Z+2, r25	; 0x02
    e6b2:	a3 83       	std	Z+3, r26	; 0x03
    e6b4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    res = f_opendir(&dirs, buff);
    e6b8:	b8 01       	movw	r22, r16
    e6ba:	ce 01       	movw	r24, r28
    e6bc:	8d 5d       	subi	r24, 0xDD	; 221
    e6be:	9d 4f       	sbci	r25, 0xFD	; 253
    e6c0:	0e 94 32 63 	call	0xc664	; 0xc664 <f_opendir>
    if (res != FR_OK) 
    e6c4:	89 2b       	or	r24, r25
    e6c6:	09 f0       	breq	.+2      	; 0xe6ca <fatfs_ls+0x66>
    e6c8:	96 c0       	rjmp	.+300    	; 0xe7f6 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e6ca:	cf 5a       	subi	r28, 0xAF	; 175
    e6cc:	dd 4f       	sbci	r29, 0xFD	; 253
    e6ce:	18 82       	st	Y, r1
    e6d0:	19 82       	std	Y+1, r1	; 0x01
    e6d2:	1a 82       	std	Y+2, r1	; 0x02
    e6d4:	1b 82       	std	Y+3, r1	; 0x03
    e6d6:	c1 55       	subi	r28, 0x51	; 81
    e6d8:	d2 40       	sbci	r29, 0x02	; 2
    e6da:	a1 2c       	mov	r10, r1
    e6dc:	b1 2c       	mov	r11, r1
    e6de:	c1 2c       	mov	r12, r1
    e6e0:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e6e2:	be 01       	movw	r22, r28
    e6e4:	64 5f       	subi	r22, 0xF4	; 244
    e6e6:	7f 4f       	sbci	r23, 0xFF	; 255
    e6e8:	ce 01       	movw	r24, r28
    e6ea:	8d 5d       	subi	r24, 0xDD	; 221
    e6ec:	9d 4f       	sbci	r25, 0xFD	; 253
    e6ee:	0e 94 b8 63 	call	0xc770	; 0xc770 <f_readdir>
    e6f2:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e6f4:	89 2b       	or	r24, r25
    e6f6:	49 f5       	brne	.+82     	; 0xe74a <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e6f8:	8a a1       	ldd	r24, Y+34	; 0x22
    e6fa:	88 23       	and	r24, r24
    e6fc:	31 f1       	breq	.+76     	; 0xe74a <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e6fe:	8c 89       	ldd	r24, Y+20	; 0x14
    e700:	84 ff       	sbrs	r24, 4
    e702:	04 c0       	rjmp	.+8      	; 0xe70c <fatfs_ls+0xa8>
        {
            s2++;
    e704:	ff ef       	ldi	r31, 0xFF	; 255
    e706:	af 1a       	sub	r10, r31
    e708:	bf 0a       	sbc	r11, r31
    e70a:	1b c0       	rjmp	.+54     	; 0xe742 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e70c:	4f ef       	ldi	r20, 0xFF	; 255
    e70e:	c4 1a       	sub	r12, r20
    e710:	d4 0a       	sbc	r13, r20
    e712:	4c 85       	ldd	r20, Y+12	; 0x0c
    e714:	5d 85       	ldd	r21, Y+13	; 0x0d
    e716:	6e 85       	ldd	r22, Y+14	; 0x0e
    e718:	7f 85       	ldd	r23, Y+15	; 0x0f
    e71a:	cf 5a       	subi	r28, 0xAF	; 175
    e71c:	dd 4f       	sbci	r29, 0xFD	; 253
    e71e:	88 81       	ld	r24, Y
    e720:	99 81       	ldd	r25, Y+1	; 0x01
    e722:	aa 81       	ldd	r26, Y+2	; 0x02
    e724:	bb 81       	ldd	r27, Y+3	; 0x03
    e726:	c1 55       	subi	r28, 0x51	; 81
    e728:	d2 40       	sbci	r29, 0x02	; 2
    e72a:	84 0f       	add	r24, r20
    e72c:	95 1f       	adc	r25, r21
    e72e:	a6 1f       	adc	r26, r22
    e730:	b7 1f       	adc	r27, r23
    e732:	cf 5a       	subi	r28, 0xAF	; 175
    e734:	dd 4f       	sbci	r29, 0xFD	; 253
    e736:	88 83       	st	Y, r24
    e738:	99 83       	std	Y+1, r25	; 0x01
    e73a:	aa 83       	std	Y+2, r26	; 0x02
    e73c:	bb 83       	std	Y+3, r27	; 0x03
    e73e:	c1 55       	subi	r28, 0x51	; 81
    e740:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e742:	ce 01       	movw	r24, r28
    e744:	0c 96       	adiw	r24, 0x0c	; 12
    e746:	f9 de       	rcall	.-526    	; 0xe53a <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e748:	cc cf       	rjmp	.-104    	; 0xe6e2 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e74a:	ce 01       	movw	r24, r28
    e74c:	8d 5d       	subi	r24, 0xDD	; 221
    e74e:	9d 4f       	sbci	r25, 0xFD	; 253
    e750:	0e 94 a3 63 	call	0xc746	; 0xc746 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e754:	ed b7       	in	r30, 0x3d	; 61
    e756:	fe b7       	in	r31, 0x3e	; 62
    e758:	b3 86       	std	Z+11, r11	; 0x0b
    e75a:	a2 86       	std	Z+10, r10	; 0x0a
    e75c:	cf 5a       	subi	r28, 0xAF	; 175
    e75e:	dd 4f       	sbci	r29, 0xFD	; 253
    e760:	88 81       	ld	r24, Y
    e762:	99 81       	ldd	r25, Y+1	; 0x01
    e764:	aa 81       	ldd	r26, Y+2	; 0x02
    e766:	bb 81       	ldd	r27, Y+3	; 0x03
    e768:	c1 55       	subi	r28, 0x51	; 81
    e76a:	d2 40       	sbci	r29, 0x02	; 2
    e76c:	86 83       	std	Z+6, r24	; 0x06
    e76e:	97 83       	std	Z+7, r25	; 0x07
    e770:	a0 87       	std	Z+8, r26	; 0x08
    e772:	b1 87       	std	Z+9, r27	; 0x09
    e774:	d5 82       	std	Z+5, r13	; 0x05
    e776:	c4 82       	std	Z+4, r12	; 0x04
    e778:	88 eb       	ldi	r24, 0xB8	; 184
    e77a:	9a e0       	ldi	r25, 0x0A	; 10
    e77c:	a0 e0       	ldi	r26, 0x00	; 0
    e77e:	81 83       	std	Z+1, r24	; 0x01
    e780:	92 83       	std	Z+2, r25	; 0x02
    e782:	a3 83       	std	Z+3, r26	; 0x03
    e784:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e788:	ae 01       	movw	r20, r28
    e78a:	4b 5a       	subi	r20, 0xAB	; 171
    e78c:	5d 4f       	sbci	r21, 0xFD	; 253
    e78e:	be 01       	movw	r22, r28
    e790:	6f 5a       	subi	r22, 0xAF	; 175
    e792:	7d 4f       	sbci	r23, 0xFD	; 253
    e794:	c8 01       	movw	r24, r16
    e796:	0e 94 3a 64 	call	0xc874	; 0xc874 <f_getfree>
    e79a:	89 2b       	or	r24, r25
    e79c:	31 f5       	brne	.+76     	; 0xe7ea <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e79e:	cb 5a       	subi	r28, 0xAB	; 171
    e7a0:	dd 4f       	sbci	r29, 0xFD	; 253
    e7a2:	e8 81       	ld	r30, Y
    e7a4:	f9 81       	ldd	r31, Y+1	; 0x01
    e7a6:	c5 55       	subi	r28, 0x55	; 85
    e7a8:	d2 40       	sbci	r29, 0x02	; 2
    e7aa:	a1 85       	ldd	r26, Z+9	; 0x09
    e7ac:	b2 85       	ldd	r27, Z+10	; 0x0a
    e7ae:	cf 5a       	subi	r28, 0xAF	; 175
    e7b0:	dd 4f       	sbci	r29, 0xFD	; 253
    e7b2:	28 81       	ld	r18, Y
    e7b4:	39 81       	ldd	r19, Y+1	; 0x01
    e7b6:	4a 81       	ldd	r20, Y+2	; 0x02
    e7b8:	5b 81       	ldd	r21, Y+3	; 0x03
    e7ba:	c1 55       	subi	r28, 0x51	; 81
    e7bc:	d2 40       	sbci	r29, 0x02	; 2
    e7be:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
    e7c2:	22 e0       	ldi	r18, 0x02	; 2
    e7c4:	30 e0       	ldi	r19, 0x00	; 0
    e7c6:	40 e0       	ldi	r20, 0x00	; 0
    e7c8:	50 e0       	ldi	r21, 0x00	; 0
    e7ca:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
    e7ce:	ed b7       	in	r30, 0x3d	; 61
    e7d0:	fe b7       	in	r31, 0x3e	; 62
    e7d2:	24 83       	std	Z+4, r18	; 0x04
    e7d4:	35 83       	std	Z+5, r19	; 0x05
    e7d6:	46 83       	std	Z+6, r20	; 0x06
    e7d8:	57 83       	std	Z+7, r21	; 0x07
    e7da:	83 ea       	ldi	r24, 0xA3	; 163
    e7dc:	9a e0       	ldi	r25, 0x0A	; 10
    e7de:	a0 e0       	ldi	r26, 0x00	; 0
    e7e0:	81 83       	std	Z+1, r24	; 0x01
    e7e2:	92 83       	std	Z+2, r25	; 0x02
    e7e4:	a3 83       	std	Z+3, r26	; 0x03
    e7e6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	if(res)
    e7ea:	e1 14       	cp	r14, r1
    e7ec:	f1 04       	cpc	r15, r1
    e7ee:	31 f4       	brne	.+12     	; 0xe7fc <fatfs_ls+0x198>
		return(-1);
	return(1);
    e7f0:	81 e0       	ldi	r24, 0x01	; 1
    e7f2:	90 e0       	ldi	r25, 0x00	; 0
    e7f4:	05 c0       	rjmp	.+10     	; 0xe800 <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e7f6:	80 e0       	ldi	r24, 0x00	; 0
    e7f8:	90 e0       	ldi	r25, 0x00	; 0
    e7fa:	02 c0       	rjmp	.+4      	; 0xe800 <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e7fc:	8f ef       	ldi	r24, 0xFF	; 255
    e7fe:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e800:	ca 5a       	subi	r28, 0xAA	; 170
    e802:	dd 4f       	sbci	r29, 0xFD	; 253
    e804:	ea e0       	ldi	r30, 0x0A	; 10
    e806:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0000e80a <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e80a:	a4 e0       	ldi	r26, 0x04	; 4
    e80c:	b1 e0       	ldi	r27, 0x01	; 1
    e80e:	eb e0       	ldi	r30, 0x0B	; 11
    e810:	f4 e7       	ldi	r31, 0x74	; 116
    e812:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    char buff[MAX_NAME_LEN+1];

    sep();
    e816:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
    printf("START MMC TEST\n");
    e81a:	81 e1       	ldi	r24, 0x11	; 17
    e81c:	9b e0       	ldi	r25, 0x0B	; 11
    e81e:	a0 e0       	ldi	r26, 0x00	; 0
    e820:	ed b7       	in	r30, 0x3d	; 61
    e822:	fe b7       	in	r31, 0x3e	; 62
    e824:	81 83       	std	Z+1, r24	; 0x01
    e826:	92 83       	std	Z+2, r25	; 0x02
    e828:	a3 83       	std	Z+3, r26	; 0x03
    e82a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    strcpy(buff,"/");
    e82e:	66 ea       	ldi	r22, 0xA6	; 166
    e830:	78 e0       	ldi	r23, 0x08	; 8
    e832:	ce 01       	movw	r24, r28
    e834:	04 96       	adiw	r24, 0x04	; 4
    e836:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
    fatfs_status(buff);
    e83a:	ce 01       	movw	r24, r28
    e83c:	04 96       	adiw	r24, 0x04	; 4
    e83e:	f1 dc       	rcall	.-1566   	; 0xe222 <fatfs_status>
    printf("MMC Directory List\n");
    e840:	8d ef       	ldi	r24, 0xFD	; 253
    e842:	9a e0       	ldi	r25, 0x0A	; 10
    e844:	a0 e0       	ldi	r26, 0x00	; 0
    e846:	ed b7       	in	r30, 0x3d	; 61
    e848:	fe b7       	in	r31, 0x3e	; 62
    e84a:	81 83       	std	Z+1, r24	; 0x01
    e84c:	92 83       	std	Z+2, r25	; 0x02
    e84e:	a3 83       	std	Z+3, r26	; 0x03
    e850:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fatfs_ls("/");
    e854:	86 ea       	ldi	r24, 0xA6	; 166
    e856:	98 e0       	ldi	r25, 0x08	; 8
    e858:	05 df       	rcall	.-502    	; 0xe664 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e85a:	8f ee       	ldi	r24, 0xEF	; 239
    e85c:	9a e0       	ldi	r25, 0x0A	; 10
    e85e:	a0 e0       	ldi	r26, 0x00	; 0
    e860:	ed b7       	in	r30, 0x3d	; 61
    e862:	fe b7       	in	r31, 0x3e	; 62
    e864:	81 83       	std	Z+1, r24	; 0x01
    e866:	92 83       	std	Z+2, r25	; 0x02
    e868:	a3 83       	std	Z+3, r26	; 0x03
    e86a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    sep();
    e86e:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
}
    e872:	cc 5f       	subi	r28, 0xFC	; 252
    e874:	de 4f       	sbci	r29, 0xFE	; 254
    e876:	e2 e0       	ldi	r30, 0x02	; 2
    e878:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000e87c <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e87c:	a4 e0       	ldi	r26, 0x04	; 4
    e87e:	b1 e0       	ldi	r27, 0x01	; 1
    e880:	e4 e4       	ldi	r30, 0x44	; 68
    e882:	f4 e7       	ldi	r31, 0x74	; 116
    e884:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    int ind;

    char buff[MAX_NAME_LEN+1];

    ind = 0;
    ptr = argv[ind];
    e888:	fb 01       	movw	r30, r22
    e88a:	20 81       	ld	r18, Z
    e88c:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e88e:	21 15       	cp	r18, r1
    e890:	31 05       	cpc	r19, r1
    e892:	19 f4       	brne	.+6      	; 0xe89a <fatfs_tests+0x1e>
        return(0);
    e894:	80 e0       	ldi	r24, 0x00	; 0
    e896:	90 e0       	ldi	r25, 0x00	; 0
    e898:	81 c0       	rjmp	.+258    	; 0xe99c <fatfs_tests+0x120>
    e89a:	8b 01       	movw	r16, r22
    e89c:	6c 01       	movw	r12, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e89e:	62 ed       	ldi	r22, 0xD2	; 210
    e8a0:	78 e0       	ldi	r23, 0x08	; 8
    e8a2:	c9 01       	movw	r24, r18
    e8a4:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
    e8a8:	89 2b       	or	r24, r25
    e8aa:	a1 f3       	breq	.-24     	; 0xe894 <fatfs_tests+0x18>
    {
        ptr = argv[++ind];
    e8ac:	f8 01       	movw	r30, r16
    e8ae:	e2 80       	ldd	r14, Z+2	; 0x02
    e8b0:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e8b2:	e1 14       	cp	r14, r1
    e8b4:	f1 04       	cpc	r15, r1
    e8b6:	59 f4       	brne	.+22     	; 0xe8ce <fatfs_tests+0x52>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e8b8:	81 e2       	ldi	r24, 0x21	; 33
    e8ba:	9b e0       	ldi	r25, 0x0B	; 11
    e8bc:	a0 e0       	ldi	r26, 0x00	; 0
    e8be:	ed b7       	in	r30, 0x3d	; 61
    e8c0:	fe b7       	in	r31, 0x3e	; 62
    e8c2:	81 83       	std	Z+1, r24	; 0x01
    e8c4:	92 83       	std	Z+2, r25	; 0x02
    e8c6:	a3 83       	std	Z+3, r26	; 0x03
    e8c8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    e8cc:	40 c0       	rjmp	.+128    	; 0xe94e <fatfs_tests+0xd2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e8ce:	6d e6       	ldi	r22, 0x6D	; 109
    e8d0:	76 e1       	ldi	r23, 0x16	; 22
    e8d2:	c7 01       	movw	r24, r14
    e8d4:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
    e8d8:	89 2b       	or	r24, r25
    e8da:	71 f7       	brne	.-36     	; 0xe8b8 <fatfs_tests+0x3c>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e8dc:	68 ed       	ldi	r22, 0xD8	; 216
    e8de:	78 e0       	ldi	r23, 0x08	; 8
    e8e0:	c7 01       	movw	r24, r14
    e8e2:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
    e8e6:	89 2b       	or	r24, r25
    e8e8:	31 f0       	breq	.+12     	; 0xe8f6 <fatfs_tests+0x7a>
    e8ea:	0c 5f       	subi	r16, 0xFC	; 252
    e8ec:	1f 4f       	sbci	r17, 0xFF	; 255
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e8ee:	82 e0       	ldi	r24, 0x02	; 2
    e8f0:	e8 2e       	mov	r14, r24
    e8f2:	f1 2c       	mov	r15, r1
    e8f4:	12 c0       	rjmp	.+36     	; 0xe91a <fatfs_tests+0x9e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e8f6:	68 ed       	ldi	r22, 0xD8	; 216
    e8f8:	7b e0       	ldi	r23, 0x0B	; 11
    e8fa:	c7 01       	movw	r24, r14
    e8fc:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
    e900:	89 2b       	or	r24, r25
    e902:	99 f7       	brne	.-26     	; 0xe8ea <fatfs_tests+0x6e>
    e904:	19 c0       	rjmp	.+50     	; 0xe938 <fatfs_tests+0xbc>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e906:	f8 01       	movw	r30, r16
    e908:	81 91       	ld	r24, Z+
    e90a:	91 91       	ld	r25, Z+
    e90c:	8f 01       	movw	r16, r30
    e90e:	aa de       	rcall	.-684    	; 0xe664 <fatfs_ls>
    e910:	89 2b       	or	r24, r25
    e912:	79 f0       	breq	.+30     	; 0xe932 <fatfs_tests+0xb6>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e914:	ff ef       	ldi	r31, 0xFF	; 255
    e916:	ef 1a       	sub	r14, r31
    e918:	ff 0a       	sbc	r15, r31
    e91a:	ec 14       	cp	r14, r12
    e91c:	fd 04       	cpc	r15, r13
    e91e:	9c f3       	brlt	.-26     	; 0xe906 <fatfs_tests+0x8a>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e920:	82 e0       	ldi	r24, 0x02	; 2
    e922:	e8 16       	cp	r14, r24
    e924:	f1 04       	cpc	r15, r1
    e926:	99 f4       	brne	.+38     	; 0xe94e <fatfs_tests+0xd2>
        {
            if(fatfs_ls("") == 0)
    e928:	80 e2       	ldi	r24, 0x20	; 32
    e92a:	9c e0       	ldi	r25, 0x0C	; 12
    e92c:	9b de       	rcall	.-714    	; 0xe664 <fatfs_ls>
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        strcpy(buff,argv[ind]);
        if(fatfs_status(argv[ind]) == 0)
    e92e:	89 2b       	or	r24, r25
    e930:	71 f4       	brne	.+28     	; 0xe94e <fatfs_tests+0xd2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e932:	8f ef       	ldi	r24, 0xFF	; 255
    e934:	9f ef       	ldi	r25, 0xFF	; 255
    e936:	32 c0       	rjmp	.+100    	; 0xe99c <fatfs_tests+0x120>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e938:	96 01       	movw	r18, r12
    e93a:	41 e0       	ldi	r20, 0x01	; 1
    e93c:	50 e0       	ldi	r21, 0x00	; 0
    e93e:	6b ed       	ldi	r22, 0xDB	; 219
    e940:	78 e0       	ldi	r23, 0x08	; 8
    e942:	c7 01       	movw	r24, r14
    e944:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
    e948:	89 2b       	or	r24, r25
    {
        mmc_test();
    e94a:	21 f0       	breq	.+8      	; 0xe954 <fatfs_tests+0xd8>
    e94c:	5e df       	rcall	.-324    	; 0xe80a <mmc_test>
        return(1);
    e94e:	81 e0       	ldi	r24, 0x01	; 1
    e950:	90 e0       	ldi	r25, 0x00	; 0
    e952:	24 c0       	rjmp	.+72     	; 0xe99c <fatfs_tests+0x120>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e954:	96 01       	movw	r18, r12
    e956:	41 e0       	ldi	r20, 0x01	; 1
    e958:	50 e0       	ldi	r21, 0x00	; 0
    e95a:	64 ee       	ldi	r22, 0xE4	; 228
    e95c:	78 e0       	ldi	r23, 0x08	; 8
    e95e:	c7 01       	movw	r24, r14
    e960:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
    e964:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e966:	21 f0       	breq	.+8      	; 0xe970 <fatfs_tests+0xf4>
    e968:	81 e0       	ldi	r24, 0x01	; 1
    e96a:	90 e0       	ldi	r25, 0x00	; 0
    e96c:	73 da       	rcall	.-2842   	; 0xde54 <mmc_init>
    e96e:	ef cf       	rjmp	.-34     	; 0xe94e <fatfs_tests+0xd2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e970:	96 01       	movw	r18, r12
    e972:	42 e0       	ldi	r20, 0x02	; 2
    e974:	50 e0       	ldi	r21, 0x00	; 0
    e976:	6d ee       	ldi	r22, 0xED	; 237
    e978:	78 e0       	ldi	r23, 0x08	; 8
    e97a:	c7 01       	movw	r24, r14
    e97c:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
    e980:	89 2b       	or	r24, r25
    e982:	09 f4       	brne	.+2      	; 0xe986 <fatfs_tests+0x10a>
    e984:	87 cf       	rjmp	.-242    	; 0xe894 <fatfs_tests+0x18>
    {
        strcpy(buff,argv[ind]);
    e986:	f8 01       	movw	r30, r16
    e988:	02 81       	ldd	r16, Z+2	; 0x02
    e98a:	13 81       	ldd	r17, Z+3	; 0x03
    e98c:	b8 01       	movw	r22, r16
    e98e:	ce 01       	movw	r24, r28
    e990:	04 96       	adiw	r24, 0x04	; 4
    e992:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
        if(fatfs_status(argv[ind]) == 0)
    e996:	c8 01       	movw	r24, r16
    e998:	44 dc       	rcall	.-1912   	; 0xe222 <fatfs_status>
    e99a:	c9 cf       	rjmp	.-110    	; 0xe92e <fatfs_tests+0xb2>
        return(1);
    }
#endif

    return(0);
}
    e99c:	cc 5f       	subi	r28, 0xFC	; 252
    e99e:	de 4f       	sbci	r29, 0xFE	; 254
    e9a0:	e8 e0       	ldi	r30, 0x08	; 8
    e9a2:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000e9a6 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e9a6:	8f 92       	push	r8
    e9a8:	9f 92       	push	r9
    e9aa:	af 92       	push	r10
    e9ac:	bf 92       	push	r11
    e9ae:	ef 92       	push	r14
    e9b0:	ff 92       	push	r15
    e9b2:	0f 93       	push	r16
    e9b4:	1f 93       	push	r17
    e9b6:	cf 93       	push	r28
    e9b8:	df 93       	push	r29
    e9ba:	00 d0       	rcall	.+0      	; 0xe9bc <fatfs_getc+0x16>
    e9bc:	1f 92       	push	r1
    e9be:	cd b7       	in	r28, 0x3d	; 61
    e9c0:	de b7       	in	r29, 0x3e	; 62
    e9c2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    e9c6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    e9ca:	00 97       	sbiw	r24, 0x00	; 0
    e9cc:	39 f4       	brne	.+14     	; 0xe9dc <fatfs_getc+0x36>
    e9ce:	89 e0       	ldi	r24, 0x09	; 9
    e9d0:	90 e0       	ldi	r25, 0x00	; 0
    e9d2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e9d6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e9da:	2f c0       	rjmp	.+94     	; 0xea3a <fatfs_getc+0x94>
    e9dc:	fc 01       	movw	r30, r24
    e9de:	e4 84       	ldd	r14, Z+12	; 0x0c
    e9e0:	f5 84       	ldd	r15, Z+13	; 0x0d
    e9e2:	e1 14       	cp	r14, r1
    e9e4:	f1 04       	cpc	r15, r1
    e9e6:	99 f3       	breq	.-26     	; 0xe9ce <fatfs_getc+0x28>
    e9e8:	8c 01       	movw	r16, r24
    e9ea:	9e 01       	movw	r18, r28
    e9ec:	2f 5f       	subi	r18, 0xFF	; 255
    e9ee:	3f 4f       	sbci	r19, 0xFF	; 255
    e9f0:	41 e0       	ldi	r20, 0x01	; 1
    e9f2:	50 e0       	ldi	r21, 0x00	; 0
    e9f4:	be 01       	movw	r22, r28
    e9f6:	6d 5f       	subi	r22, 0xFD	; 253
    e9f8:	7f 4f       	sbci	r23, 0xFF	; 255
    e9fa:	c7 01       	movw	r24, r14
    e9fc:	0e 94 6b 5b 	call	0xb6d6	; 0xb6d6 <f_read>
    ea00:	00 97       	sbiw	r24, 0x00	; 0
    ea02:	31 f4       	brne	.+12     	; 0xea10 <fatfs_getc+0x6a>
    ea04:	29 81       	ldd	r18, Y+1	; 0x01
    ea06:	3a 81       	ldd	r19, Y+2	; 0x02
    ea08:	21 30       	cpi	r18, 0x01	; 1
    ea0a:	31 05       	cpc	r19, r1
    ea0c:	c9 f0       	breq	.+50     	; 0xea40 <fatfs_getc+0x9a>
    ea0e:	03 c0       	rjmp	.+6      	; 0xea16 <fatfs_getc+0x70>
    ea10:	84 31       	cpi	r24, 0x14	; 20
    ea12:	91 05       	cpc	r25, r1
    ea14:	40 f4       	brcc	.+16     	; 0xea26 <fatfs_getc+0x80>
    ea16:	fc 01       	movw	r30, r24
    ea18:	ea 55       	subi	r30, 0x5A	; 90
    ea1a:	f4 4f       	sbci	r31, 0xF4	; 244
    ea1c:	80 81       	ld	r24, Z
    ea1e:	08 2e       	mov	r0, r24
    ea20:	00 0c       	add	r0, r0
    ea22:	99 0b       	sbc	r25, r25
    ea24:	02 c0       	rjmp	.+4      	; 0xea2a <fatfs_getc+0x84>
    ea26:	83 e2       	ldi	r24, 0x23	; 35
    ea28:	90 e0       	ldi	r25, 0x00	; 0
    ea2a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ea2e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ea32:	f8 01       	movw	r30, r16
    ea34:	83 81       	ldd	r24, Z+3	; 0x03
    ea36:	80 62       	ori	r24, 0x20	; 32
    ea38:	83 83       	std	Z+3, r24	; 0x03
    ea3a:	8f ef       	ldi	r24, 0xFF	; 255
    ea3c:	9f ef       	ldi	r25, 0xFF	; 255
    ea3e:	28 c0       	rjmp	.+80     	; 0xea90 <fatfs_getc+0xea>
    ea40:	8b 81       	ldd	r24, Y+3	; 0x03
    ea42:	8d 30       	cpi	r24, 0x0D	; 13
    ea44:	01 f5       	brne	.+64     	; 0xea86 <fatfs_getc+0xe0>
    ea46:	f7 01       	movw	r30, r14
    ea48:	80 88       	ldd	r8, Z+16	; 0x10
    ea4a:	91 88       	ldd	r9, Z+17	; 0x11
    ea4c:	a2 88       	ldd	r10, Z+18	; 0x12
    ea4e:	b3 88       	ldd	r11, Z+19	; 0x13
    ea50:	9e 01       	movw	r18, r28
    ea52:	2f 5f       	subi	r18, 0xFF	; 255
    ea54:	3f 4f       	sbci	r19, 0xFF	; 255
    ea56:	41 e0       	ldi	r20, 0x01	; 1
    ea58:	50 e0       	ldi	r21, 0x00	; 0
    ea5a:	be 01       	movw	r22, r28
    ea5c:	6d 5f       	subi	r22, 0xFD	; 253
    ea5e:	7f 4f       	sbci	r23, 0xFF	; 255
    ea60:	c7 01       	movw	r24, r14
    ea62:	0e 94 6b 5b 	call	0xb6d6	; 0xb6d6 <f_read>
    ea66:	89 2b       	or	r24, r25
    ea68:	89 f4       	brne	.+34     	; 0xea8c <fatfs_getc+0xe6>
    ea6a:	89 81       	ldd	r24, Y+1	; 0x01
    ea6c:	9a 81       	ldd	r25, Y+2	; 0x02
    ea6e:	01 97       	sbiw	r24, 0x01	; 1
    ea70:	69 f4       	brne	.+26     	; 0xea8c <fatfs_getc+0xe6>
    ea72:	8b 81       	ldd	r24, Y+3	; 0x03
    ea74:	8a 30       	cpi	r24, 0x0A	; 10
    ea76:	31 f0       	breq	.+12     	; 0xea84 <fatfs_getc+0xde>
    ea78:	b5 01       	movw	r22, r10
    ea7a:	a4 01       	movw	r20, r8
    ea7c:	c7 01       	movw	r24, r14
    ea7e:	0e 94 77 60 	call	0xc0ee	; 0xc0ee <f_lseek>
    ea82:	04 c0       	rjmp	.+8      	; 0xea8c <fatfs_getc+0xe6>
    ea84:	8b 83       	std	Y+3, r24	; 0x03
    ea86:	8b 81       	ldd	r24, Y+3	; 0x03
    ea88:	90 e0       	ldi	r25, 0x00	; 0
    ea8a:	02 c0       	rjmp	.+4      	; 0xea90 <fatfs_getc+0xea>
    ea8c:	8a e0       	ldi	r24, 0x0A	; 10
    ea8e:	90 e0       	ldi	r25, 0x00	; 0
    ea90:	0f 90       	pop	r0
    ea92:	0f 90       	pop	r0
    ea94:	0f 90       	pop	r0
    ea96:	df 91       	pop	r29
    ea98:	cf 91       	pop	r28
    ea9a:	1f 91       	pop	r17
    ea9c:	0f 91       	pop	r16
    ea9e:	ff 90       	pop	r15
    eaa0:	ef 90       	pop	r14
    eaa2:	bf 90       	pop	r11
    eaa4:	af 90       	pop	r10
    eaa6:	9f 90       	pop	r9
    eaa8:	8f 90       	pop	r8
    eaaa:	08 95       	ret

0000eaac <fatfs_putc>:
    eaac:	a3 e0       	ldi	r26, 0x03	; 3
    eaae:	b0 e0       	ldi	r27, 0x00	; 0
    eab0:	ec e5       	ldi	r30, 0x5C	; 92
    eab2:	f5 e7       	ldi	r31, 0x75	; 117
    eab4:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    eab8:	8b 83       	std	Y+3, r24	; 0x03
    eaba:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eabe:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eac2:	61 15       	cp	r22, r1
    eac4:	71 05       	cpc	r23, r1
    eac6:	39 f4       	brne	.+14     	; 0xead6 <fatfs_putc+0x2a>
    eac8:	89 e0       	ldi	r24, 0x09	; 9
    eaca:	90 e0       	ldi	r25, 0x00	; 0
    eacc:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ead0:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ead4:	2d c0       	rjmp	.+90     	; 0xeb30 <fatfs_putc+0x84>
    ead6:	fb 01       	movw	r30, r22
    ead8:	84 85       	ldd	r24, Z+12	; 0x0c
    eada:	95 85       	ldd	r25, Z+13	; 0x0d
    eadc:	00 97       	sbiw	r24, 0x00	; 0
    eade:	a1 f3       	breq	.-24     	; 0xeac8 <fatfs_putc+0x1c>
    eae0:	8b 01       	movw	r16, r22
    eae2:	9e 01       	movw	r18, r28
    eae4:	2f 5f       	subi	r18, 0xFF	; 255
    eae6:	3f 4f       	sbci	r19, 0xFF	; 255
    eae8:	41 e0       	ldi	r20, 0x01	; 1
    eaea:	50 e0       	ldi	r21, 0x00	; 0
    eaec:	be 01       	movw	r22, r28
    eaee:	6d 5f       	subi	r22, 0xFD	; 253
    eaf0:	7f 4f       	sbci	r23, 0xFF	; 255
    eaf2:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <f_write>
    eaf6:	00 97       	sbiw	r24, 0x00	; 0
    eaf8:	31 f4       	brne	.+12     	; 0xeb06 <fatfs_putc+0x5a>
    eafa:	29 81       	ldd	r18, Y+1	; 0x01
    eafc:	3a 81       	ldd	r19, Y+2	; 0x02
    eafe:	21 30       	cpi	r18, 0x01	; 1
    eb00:	31 05       	cpc	r19, r1
    eb02:	c9 f0       	breq	.+50     	; 0xeb36 <fatfs_putc+0x8a>
    eb04:	03 c0       	rjmp	.+6      	; 0xeb0c <fatfs_putc+0x60>
    eb06:	84 31       	cpi	r24, 0x14	; 20
    eb08:	91 05       	cpc	r25, r1
    eb0a:	40 f4       	brcc	.+16     	; 0xeb1c <fatfs_putc+0x70>
    eb0c:	fc 01       	movw	r30, r24
    eb0e:	ea 55       	subi	r30, 0x5A	; 90
    eb10:	f4 4f       	sbci	r31, 0xF4	; 244
    eb12:	80 81       	ld	r24, Z
    eb14:	08 2e       	mov	r0, r24
    eb16:	00 0c       	add	r0, r0
    eb18:	99 0b       	sbc	r25, r25
    eb1a:	02 c0       	rjmp	.+4      	; 0xeb20 <fatfs_putc+0x74>
    eb1c:	83 e2       	ldi	r24, 0x23	; 35
    eb1e:	90 e0       	ldi	r25, 0x00	; 0
    eb20:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb24:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb28:	f8 01       	movw	r30, r16
    eb2a:	83 81       	ldd	r24, Z+3	; 0x03
    eb2c:	80 62       	ori	r24, 0x20	; 32
    eb2e:	83 83       	std	Z+3, r24	; 0x03
    eb30:	8f ef       	ldi	r24, 0xFF	; 255
    eb32:	9f ef       	ldi	r25, 0xFF	; 255
    eb34:	02 c0       	rjmp	.+4      	; 0xeb3a <fatfs_putc+0x8e>
    eb36:	8b 81       	ldd	r24, Y+3	; 0x03
    eb38:	90 e0       	ldi	r25, 0x00	; 0
    eb3a:	23 96       	adiw	r28, 0x03	; 3
    eb3c:	e4 e0       	ldi	r30, 0x04	; 4
    eb3e:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

0000eb42 <fgetc>:
    eb42:	cf 93       	push	r28
    eb44:	df 93       	push	r29
    eb46:	00 d0       	rcall	.+0      	; 0xeb48 <fgetc+0x6>
    eb48:	1f 92       	push	r1
    eb4a:	ec 01       	movw	r28, r24
    eb4c:	00 97       	sbiw	r24, 0x00	; 0
    eb4e:	39 f4       	brne	.+14     	; 0xeb5e <fgetc+0x1c>
    eb50:	89 e0       	ldi	r24, 0x09	; 9
    eb52:	90 e0       	ldi	r25, 0x00	; 0
    eb54:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb58:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb5c:	40 c0       	rjmp	.+128    	; 0xebde <fgetc+0x9c>
    eb5e:	2b 81       	ldd	r18, Y+3	; 0x03
    eb60:	20 ff       	sbrs	r18, 0
    eb62:	3d c0       	rjmp	.+122    	; 0xebde <fgetc+0x9c>
    eb64:	26 ff       	sbrs	r18, 6
    eb66:	0a c0       	rjmp	.+20     	; 0xeb7c <fgetc+0x3a>
    eb68:	2f 7b       	andi	r18, 0xBF	; 191
    eb6a:	2b 83       	std	Y+3, r18	; 0x03
    eb6c:	8e 81       	ldd	r24, Y+6	; 0x06
    eb6e:	9f 81       	ldd	r25, Y+7	; 0x07
    eb70:	01 96       	adiw	r24, 0x01	; 1
    eb72:	9f 83       	std	Y+7, r25	; 0x07
    eb74:	8e 83       	std	Y+6, r24	; 0x06
    eb76:	8a 81       	ldd	r24, Y+2	; 0x02
    eb78:	90 e0       	ldi	r25, 0x00	; 0
    eb7a:	33 c0       	rjmp	.+102    	; 0xebe2 <fgetc+0xa0>
    eb7c:	22 ff       	sbrs	r18, 2
    eb7e:	0d c0       	rjmp	.+26     	; 0xeb9a <fgetc+0x58>
    eb80:	e8 81       	ld	r30, Y
    eb82:	f9 81       	ldd	r31, Y+1	; 0x01
    eb84:	80 81       	ld	r24, Z
    eb86:	90 e0       	ldi	r25, 0x00	; 0
    eb88:	00 97       	sbiw	r24, 0x00	; 0
    eb8a:	19 f4       	brne	.+6      	; 0xeb92 <fgetc+0x50>
    eb8c:	20 62       	ori	r18, 0x20	; 32
    eb8e:	2b 83       	std	Y+3, r18	; 0x03
    eb90:	26 c0       	rjmp	.+76     	; 0xebde <fgetc+0x9c>
    eb92:	31 96       	adiw	r30, 0x01	; 1
    eb94:	f9 83       	std	Y+1, r31	; 0x01
    eb96:	e8 83       	st	Y, r30
    eb98:	1b c0       	rjmp	.+54     	; 0xebd0 <fgetc+0x8e>
    eb9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    eb9c:	fb 85       	ldd	r31, Y+11	; 0x0b
    eb9e:	30 97       	sbiw	r30, 0x00	; 0
    eba0:	59 f4       	brne	.+22     	; 0xebb8 <fgetc+0x76>
    eba2:	8e ec       	ldi	r24, 0xCE	; 206
    eba4:	9b e0       	ldi	r25, 0x0B	; 11
    eba6:	a0 e0       	ldi	r26, 0x00	; 0
    eba8:	ed b7       	in	r30, 0x3d	; 61
    ebaa:	fe b7       	in	r31, 0x3e	; 62
    ebac:	81 83       	std	Z+1, r24	; 0x01
    ebae:	92 83       	std	Z+2, r25	; 0x02
    ebb0:	a3 83       	std	Z+3, r26	; 0x03
    ebb2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    ebb6:	13 c0       	rjmp	.+38     	; 0xebde <fgetc+0x9c>
    ebb8:	09 95       	icall
    ebba:	97 ff       	sbrs	r25, 7
    ebbc:	09 c0       	rjmp	.+18     	; 0xebd0 <fgetc+0x8e>
    ebbe:	2b 81       	ldd	r18, Y+3	; 0x03
    ebc0:	02 96       	adiw	r24, 0x02	; 2
    ebc2:	11 f0       	breq	.+4      	; 0xebc8 <fgetc+0x86>
    ebc4:	80 e2       	ldi	r24, 0x20	; 32
    ebc6:	01 c0       	rjmp	.+2      	; 0xebca <fgetc+0x88>
    ebc8:	80 e1       	ldi	r24, 0x10	; 16
    ebca:	82 2b       	or	r24, r18
    ebcc:	8b 83       	std	Y+3, r24	; 0x03
    ebce:	07 c0       	rjmp	.+14     	; 0xebde <fgetc+0x9c>
    ebd0:	2e 81       	ldd	r18, Y+6	; 0x06
    ebd2:	3f 81       	ldd	r19, Y+7	; 0x07
    ebd4:	2f 5f       	subi	r18, 0xFF	; 255
    ebd6:	3f 4f       	sbci	r19, 0xFF	; 255
    ebd8:	3f 83       	std	Y+7, r19	; 0x07
    ebda:	2e 83       	std	Y+6, r18	; 0x06
    ebdc:	02 c0       	rjmp	.+4      	; 0xebe2 <fgetc+0xa0>
    ebde:	8f ef       	ldi	r24, 0xFF	; 255
    ebe0:	9f ef       	ldi	r25, 0xFF	; 255
    ebe2:	cd b7       	in	r28, 0x3d	; 61
    ebe4:	de b7       	in	r29, 0x3e	; 62
    ebe6:	23 96       	adiw	r28, 0x03	; 3
    ebe8:	e2 e0       	ldi	r30, 0x02	; 2
    ebea:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000ebee <fputc>:
    ebee:	cf 93       	push	r28
    ebf0:	df 93       	push	r29
    ebf2:	00 d0       	rcall	.+0      	; 0xebf4 <fputc+0x6>
    ebf4:	1f 92       	push	r1
    ebf6:	eb 01       	movw	r28, r22
    ebf8:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ebfc:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ec00:	20 91 c1 1c 	lds	r18, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ec04:	30 91 c2 1c 	lds	r19, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ec08:	62 17       	cp	r22, r18
    ec0a:	73 07       	cpc	r23, r19
    ec0c:	49 f0       	breq	.+18     	; 0xec20 <fputc+0x32>
    ec0e:	20 91 c3 1c 	lds	r18, 0x1CC3	; 0x801cc3 <__iob+0x4>
    ec12:	30 91 c4 1c 	lds	r19, 0x1CC4	; 0x801cc4 <__iob+0x5>
    ec16:	62 17       	cp	r22, r18
    ec18:	73 07       	cpc	r23, r19
    ec1a:	11 f0       	breq	.+4      	; 0xec20 <fputc+0x32>
    ec1c:	47 df       	rcall	.-370    	; 0xeaac <fatfs_putc>
    ec1e:	33 c0       	rjmp	.+102    	; 0xec86 <fputc+0x98>
    ec20:	2b 81       	ldd	r18, Y+3	; 0x03
    ec22:	21 ff       	sbrs	r18, 1
    ec24:	2e c0       	rjmp	.+92     	; 0xec82 <fputc+0x94>
    ec26:	22 ff       	sbrs	r18, 2
    ec28:	10 c0       	rjmp	.+32     	; 0xec4a <fputc+0x5c>
    ec2a:	4e 81       	ldd	r20, Y+6	; 0x06
    ec2c:	5f 81       	ldd	r21, Y+7	; 0x07
    ec2e:	2c 81       	ldd	r18, Y+4	; 0x04
    ec30:	3d 81       	ldd	r19, Y+5	; 0x05
    ec32:	42 17       	cp	r20, r18
    ec34:	53 07       	cpc	r21, r19
    ec36:	f4 f4       	brge	.+60     	; 0xec74 <fputc+0x86>
    ec38:	e8 81       	ld	r30, Y
    ec3a:	f9 81       	ldd	r31, Y+1	; 0x01
    ec3c:	9f 01       	movw	r18, r30
    ec3e:	2f 5f       	subi	r18, 0xFF	; 255
    ec40:	3f 4f       	sbci	r19, 0xFF	; 255
    ec42:	39 83       	std	Y+1, r19	; 0x01
    ec44:	28 83       	st	Y, r18
    ec46:	80 83       	st	Z, r24
    ec48:	15 c0       	rjmp	.+42     	; 0xec74 <fputc+0x86>
    ec4a:	e8 85       	ldd	r30, Y+8	; 0x08
    ec4c:	f9 85       	ldd	r31, Y+9	; 0x09
    ec4e:	30 97       	sbiw	r30, 0x00	; 0
    ec50:	59 f4       	brne	.+22     	; 0xec68 <fputc+0x7a>
    ec52:	86 eb       	ldi	r24, 0xB6	; 182
    ec54:	9b e0       	ldi	r25, 0x0B	; 11
    ec56:	a0 e0       	ldi	r26, 0x00	; 0
    ec58:	ed b7       	in	r30, 0x3d	; 61
    ec5a:	fe b7       	in	r31, 0x3e	; 62
    ec5c:	81 83       	std	Z+1, r24	; 0x01
    ec5e:	92 83       	std	Z+2, r25	; 0x02
    ec60:	a3 83       	std	Z+3, r26	; 0x03
    ec62:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    ec66:	0d c0       	rjmp	.+26     	; 0xec82 <fputc+0x94>
    ec68:	be 01       	movw	r22, r28
    ec6a:	09 95       	icall
    ec6c:	8f 3f       	cpi	r24, 0xFF	; 255
    ec6e:	ff ef       	ldi	r31, 0xFF	; 255
    ec70:	9f 07       	cpc	r25, r31
    ec72:	39 f0       	breq	.+14     	; 0xec82 <fputc+0x94>
    ec74:	2e 81       	ldd	r18, Y+6	; 0x06
    ec76:	3f 81       	ldd	r19, Y+7	; 0x07
    ec78:	2f 5f       	subi	r18, 0xFF	; 255
    ec7a:	3f 4f       	sbci	r19, 0xFF	; 255
    ec7c:	3f 83       	std	Y+7, r19	; 0x07
    ec7e:	2e 83       	std	Y+6, r18	; 0x06
    ec80:	02 c0       	rjmp	.+4      	; 0xec86 <fputc+0x98>
    ec82:	8f ef       	ldi	r24, 0xFF	; 255
    ec84:	9f ef       	ldi	r25, 0xFF	; 255
    ec86:	cd b7       	in	r28, 0x3d	; 61
    ec88:	de b7       	in	r29, 0x3e	; 62
    ec8a:	23 96       	adiw	r28, 0x03	; 3
    ec8c:	e2 e0       	ldi	r30, 0x02	; 2
    ec8e:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000ec92 <_fprintf_putc>:
    ec92:	fc 01       	movw	r30, r24
    ec94:	86 2f       	mov	r24, r22
    ec96:	26 81       	ldd	r18, Z+6	; 0x06
    ec98:	37 81       	ldd	r19, Z+7	; 0x07
    ec9a:	2f 5f       	subi	r18, 0xFF	; 255
    ec9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ec9e:	37 83       	std	Z+7, r19	; 0x07
    eca0:	26 83       	std	Z+6, r18	; 0x06
    eca2:	62 81       	ldd	r22, Z+2	; 0x02
    eca4:	73 81       	ldd	r23, Z+3	; 0x03
    eca6:	90 e0       	ldi	r25, 0x00	; 0
    eca8:	a2 cf       	rjmp	.-188    	; 0xebee <fputc>
    ecaa:	08 95       	ret

0000ecac <getchar>:
    ecac:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    ecb0:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    ecb4:	46 cf       	rjmp	.-372    	; 0xeb42 <fgetc>
    ecb6:	08 95       	ret

0000ecb8 <putchar>:
    ecb8:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ecbc:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ecc0:	96 cf       	rjmp	.-212    	; 0xebee <fputc>
    ecc2:	08 95       	ret

0000ecc4 <fgets>:
    ecc4:	a0 e0       	ldi	r26, 0x00	; 0
    ecc6:	b0 e0       	ldi	r27, 0x00	; 0
    ecc8:	e8 e6       	ldi	r30, 0x68	; 104
    ecca:	f6 e7       	ldi	r31, 0x76	; 118
    eccc:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    ecd0:	7c 01       	movw	r14, r24
    ecd2:	6a 01       	movw	r12, r20
    ecd4:	8b 01       	movw	r16, r22
    ecd6:	c0 e0       	ldi	r28, 0x00	; 0
    ecd8:	d0 e0       	ldi	r29, 0x00	; 0
    ecda:	01 15       	cp	r16, r1
    ecdc:	11 05       	cpc	r17, r1
    ecde:	41 f0       	breq	.+16     	; 0xecf0 <fgets+0x2c>
    ece0:	c6 01       	movw	r24, r12
    ece2:	2f df       	rcall	.-418    	; 0xeb42 <fgetc>
    ece4:	8f 3f       	cpi	r24, 0xFF	; 255
    ece6:	2f ef       	ldi	r18, 0xFF	; 255
    ece8:	92 07       	cpc	r25, r18
    ecea:	39 f4       	brne	.+14     	; 0xecfa <fgets+0x36>
    ecec:	20 97       	sbiw	r28, 0x00	; 0
    ecee:	b9 f0       	breq	.+46     	; 0xed1e <fgets+0x5a>
    ecf0:	ce 0d       	add	r28, r14
    ecf2:	df 1d       	adc	r29, r15
    ecf4:	18 82       	st	Y, r1
    ecf6:	c7 01       	movw	r24, r14
    ecf8:	14 c0       	rjmp	.+40     	; 0xed22 <fgets+0x5e>
    ecfa:	8a 30       	cpi	r24, 0x0A	; 10
    ecfc:	91 05       	cpc	r25, r1
    ecfe:	c1 f3       	breq	.-16     	; 0xecf0 <fgets+0x2c>
    ed00:	88 30       	cpi	r24, 0x08	; 8
    ed02:	91 05       	cpc	r25, r1
    ed04:	21 f4       	brne	.+8      	; 0xed0e <fgets+0x4a>
    ed06:	20 97       	sbiw	r28, 0x00	; 0
    ed08:	39 f0       	breq	.+14     	; 0xed18 <fgets+0x54>
    ed0a:	21 97       	sbiw	r28, 0x01	; 1
    ed0c:	05 c0       	rjmp	.+10     	; 0xed18 <fgets+0x54>
    ed0e:	f7 01       	movw	r30, r14
    ed10:	ec 0f       	add	r30, r28
    ed12:	fd 1f       	adc	r31, r29
    ed14:	80 83       	st	Z, r24
    ed16:	21 96       	adiw	r28, 0x01	; 1
    ed18:	01 50       	subi	r16, 0x01	; 1
    ed1a:	11 09       	sbc	r17, r1
    ed1c:	de cf       	rjmp	.-68     	; 0xecda <fgets+0x16>
    ed1e:	80 e0       	ldi	r24, 0x00	; 0
    ed20:	90 e0       	ldi	r25, 0x00	; 0
    ed22:	cd b7       	in	r28, 0x3d	; 61
    ed24:	de b7       	in	r29, 0x3e	; 62
    ed26:	e8 e0       	ldi	r30, 0x08	; 8
    ed28:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000ed2c <fputs>:
    ed2c:	0f 93       	push	r16
    ed2e:	1f 93       	push	r17
    ed30:	cf 93       	push	r28
    ed32:	df 93       	push	r29
    ed34:	8b 01       	movw	r16, r22
    ed36:	ec 01       	movw	r28, r24
    ed38:	89 91       	ld	r24, Y+
    ed3a:	88 23       	and	r24, r24
    ed3c:	41 f0       	breq	.+16     	; 0xed4e <fputs+0x22>
    ed3e:	b8 01       	movw	r22, r16
    ed40:	90 e0       	ldi	r25, 0x00	; 0
    ed42:	55 df       	rcall	.-342    	; 0xebee <fputc>
    ed44:	8f 3f       	cpi	r24, 0xFF	; 255
    ed46:	2f ef       	ldi	r18, 0xFF	; 255
    ed48:	92 07       	cpc	r25, r18
    ed4a:	b1 f7       	brne	.-20     	; 0xed38 <fputs+0xc>
    ed4c:	02 c0       	rjmp	.+4      	; 0xed52 <fputs+0x26>
    ed4e:	80 e0       	ldi	r24, 0x00	; 0
    ed50:	90 e0       	ldi	r25, 0x00	; 0
    ed52:	df 91       	pop	r29
    ed54:	cf 91       	pop	r28
    ed56:	1f 91       	pop	r17
    ed58:	0f 91       	pop	r16
    ed5a:	08 95       	ret

0000ed5c <puts>:
    ed5c:	cf 93       	push	r28
    ed5e:	df 93       	push	r29
    ed60:	ec 01       	movw	r28, r24
    ed62:	89 91       	ld	r24, Y+
    ed64:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ed68:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ed6c:	88 23       	and	r24, r24
    ed6e:	39 f0       	breq	.+14     	; 0xed7e <puts+0x22>
    ed70:	90 e0       	ldi	r25, 0x00	; 0
    ed72:	3d df       	rcall	.-390    	; 0xebee <fputc>
    ed74:	8f 3f       	cpi	r24, 0xFF	; 255
    ed76:	2f ef       	ldi	r18, 0xFF	; 255
    ed78:	92 07       	cpc	r25, r18
    ed7a:	99 f7       	brne	.-26     	; 0xed62 <puts+0x6>
    ed7c:	03 c0       	rjmp	.+6      	; 0xed84 <puts+0x28>
    ed7e:	8a e0       	ldi	r24, 0x0A	; 10
    ed80:	90 e0       	ldi	r25, 0x00	; 0
    ed82:	35 df       	rcall	.-406    	; 0xebee <fputc>
    ed84:	df 91       	pop	r29
    ed86:	cf 91       	pop	r28
    ed88:	08 95       	ret

0000ed8a <fileno>:
    ed8a:	00 97       	sbiw	r24, 0x00	; 0
    ed8c:	39 f4       	brne	.+14     	; 0xed9c <fileno+0x12>
    ed8e:	89 e0       	ldi	r24, 0x09	; 9
    ed90:	90 e0       	ldi	r25, 0x00	; 0
    ed92:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ed96:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ed9a:	0e c0       	rjmp	.+28     	; 0xedb8 <fileno+0x2e>
    ed9c:	ef eb       	ldi	r30, 0xBF	; 191
    ed9e:	fc e1       	ldi	r31, 0x1C	; 28
    eda0:	20 e0       	ldi	r18, 0x00	; 0
    eda2:	30 e0       	ldi	r19, 0x00	; 0
    eda4:	41 91       	ld	r20, Z+
    eda6:	51 91       	ld	r21, Z+
    eda8:	84 17       	cp	r24, r20
    edaa:	95 07       	cpc	r25, r21
    edac:	41 f0       	breq	.+16     	; 0xedbe <fileno+0x34>
    edae:	2f 5f       	subi	r18, 0xFF	; 255
    edb0:	3f 4f       	sbci	r19, 0xFF	; 255
    edb2:	20 31       	cpi	r18, 0x10	; 16
    edb4:	31 05       	cpc	r19, r1
    edb6:	b1 f7       	brne	.-20     	; 0xeda4 <fileno+0x1a>
    edb8:	8f ef       	ldi	r24, 0xFF	; 255
    edba:	9f ef       	ldi	r25, 0xFF	; 255
    edbc:	08 95       	ret
    edbe:	c9 01       	movw	r24, r18
    edc0:	08 95       	ret

0000edc2 <fileno_to_stream>:
    edc2:	80 31       	cpi	r24, 0x10	; 16
    edc4:	91 05       	cpc	r25, r1
    edc6:	48 f4       	brcc	.+18     	; 0xedda <fileno_to_stream+0x18>
    edc8:	88 0f       	add	r24, r24
    edca:	99 1f       	adc	r25, r25
    edcc:	fc 01       	movw	r30, r24
    edce:	e1 54       	subi	r30, 0x41	; 65
    edd0:	f3 4e       	sbci	r31, 0xE3	; 227
    edd2:	80 81       	ld	r24, Z
    edd4:	91 81       	ldd	r25, Z+1	; 0x01
    edd6:	00 97       	sbiw	r24, 0x00	; 0
    edd8:	41 f4       	brne	.+16     	; 0xedea <fileno_to_stream+0x28>
    edda:	89 e0       	ldi	r24, 0x09	; 9
    eddc:	90 e0       	ldi	r25, 0x00	; 0
    edde:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ede2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ede6:	80 e0       	ldi	r24, 0x00	; 0
    ede8:	90 e0       	ldi	r25, 0x00	; 0
    edea:	08 95       	ret

0000edec <mctime>:
    edec:	a4 e0       	ldi	r26, 0x04	; 4
    edee:	b0 e0       	ldi	r27, 0x00	; 0
    edf0:	ec ef       	ldi	r30, 0xFC	; 252
    edf2:	f6 e7       	ldi	r31, 0x76	; 118
    edf4:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    edf8:	69 83       	std	Y+1, r22	; 0x01
    edfa:	7a 83       	std	Y+2, r23	; 0x02
    edfc:	8b 83       	std	Y+3, r24	; 0x03
    edfe:	9c 83       	std	Y+4, r25	; 0x04
    ee00:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee04:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee08:	ce 01       	movw	r24, r28
    ee0a:	01 96       	adiw	r24, 0x01	; 1
    ee0c:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <ctime_gm>
    ee10:	fc 01       	movw	r30, r24
    ee12:	01 90       	ld	r0, Z+
    ee14:	00 20       	and	r0, r0
    ee16:	e9 f7       	brne	.-6      	; 0xee12 <mctime+0x26>
    ee18:	31 97       	sbiw	r30, 0x01	; 1
    ee1a:	e8 1b       	sub	r30, r24
    ee1c:	f9 0b       	sbc	r31, r25
    ee1e:	39 f0       	breq	.+14     	; 0xee2e <mctime+0x42>
    ee20:	31 97       	sbiw	r30, 0x01	; 1
    ee22:	e8 0f       	add	r30, r24
    ee24:	f9 1f       	adc	r31, r25
    ee26:	20 81       	ld	r18, Z
    ee28:	2a 30       	cpi	r18, 0x0A	; 10
    ee2a:	09 f4       	brne	.+2      	; 0xee2e <mctime+0x42>
    ee2c:	10 82       	st	Z, r1
    ee2e:	24 96       	adiw	r28, 0x04	; 4
    ee30:	e2 e0       	ldi	r30, 0x02	; 2
    ee32:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000ee36 <basename>:
    ee36:	00 97       	sbiw	r24, 0x00	; 0
    ee38:	49 f0       	breq	.+18     	; 0xee4c <basename+0x16>
    ee3a:	fc 01       	movw	r30, r24
    ee3c:	21 91       	ld	r18, Z+
    ee3e:	22 23       	and	r18, r18
    ee40:	21 f0       	breq	.+8      	; 0xee4a <basename+0x14>
    ee42:	2f 32       	cpi	r18, 0x2F	; 47
    ee44:	d9 f7       	brne	.-10     	; 0xee3c <basename+0x6>
    ee46:	cf 01       	movw	r24, r30
    ee48:	f9 cf       	rjmp	.-14     	; 0xee3c <basename+0x6>
    ee4a:	08 95       	ret
    ee4c:	80 e2       	ldi	r24, 0x20	; 32
    ee4e:	9c e0       	ldi	r25, 0x0C	; 12
    ee50:	08 95       	ret

0000ee52 <chdir>:
    ee52:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee56:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee5a:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <f_chdir>
    ee5e:	00 97       	sbiw	r24, 0x00	; 0
    ee60:	a1 f0       	breq	.+40     	; 0xee8a <chdir+0x38>
    ee62:	84 31       	cpi	r24, 0x14	; 20
    ee64:	91 05       	cpc	r25, r1
    ee66:	40 f4       	brcc	.+16     	; 0xee78 <chdir+0x26>
    ee68:	fc 01       	movw	r30, r24
    ee6a:	ea 55       	subi	r30, 0x5A	; 90
    ee6c:	f4 4f       	sbci	r31, 0xF4	; 244
    ee6e:	80 81       	ld	r24, Z
    ee70:	08 2e       	mov	r0, r24
    ee72:	00 0c       	add	r0, r0
    ee74:	99 0b       	sbc	r25, r25
    ee76:	02 c0       	rjmp	.+4      	; 0xee7c <chdir+0x2a>
    ee78:	83 e2       	ldi	r24, 0x23	; 35
    ee7a:	90 e0       	ldi	r25, 0x00	; 0
    ee7c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ee80:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ee84:	8f ef       	ldi	r24, 0xFF	; 255
    ee86:	9f ef       	ldi	r25, 0xFF	; 255
    ee88:	08 95       	ret
    ee8a:	80 e0       	ldi	r24, 0x00	; 0
    ee8c:	90 e0       	ldi	r25, 0x00	; 0
    ee8e:	08 95       	ret

0000ee90 <chmod>:
    ee90:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ee94:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ee98:	42 79       	andi	r20, 0x92	; 146
    ee9a:	55 27       	eor	r21, r21
    ee9c:	66 27       	eor	r22, r22
    ee9e:	77 27       	eor	r23, r23
    eea0:	45 2b       	or	r20, r21
    eea2:	46 2b       	or	r20, r22
    eea4:	47 2b       	or	r20, r23
    eea6:	19 f0       	breq	.+6      	; 0xeeae <chmod+0x1e>
    eea8:	80 e0       	ldi	r24, 0x00	; 0
    eeaa:	90 e0       	ldi	r25, 0x00	; 0
    eeac:	08 95       	ret
    eeae:	41 e0       	ldi	r20, 0x01	; 1
    eeb0:	61 e0       	ldi	r22, 0x01	; 1
    eeb2:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <f_chmod>
    eeb6:	00 97       	sbiw	r24, 0x00	; 0
    eeb8:	b9 f3       	breq	.-18     	; 0xeea8 <chmod+0x18>
    eeba:	84 31       	cpi	r24, 0x14	; 20
    eebc:	91 05       	cpc	r25, r1
    eebe:	40 f4       	brcc	.+16     	; 0xeed0 <chmod+0x40>
    eec0:	fc 01       	movw	r30, r24
    eec2:	ea 55       	subi	r30, 0x5A	; 90
    eec4:	f4 4f       	sbci	r31, 0xF4	; 244
    eec6:	80 81       	ld	r24, Z
    eec8:	08 2e       	mov	r0, r24
    eeca:	00 0c       	add	r0, r0
    eecc:	99 0b       	sbc	r25, r25
    eece:	02 c0       	rjmp	.+4      	; 0xeed4 <chmod+0x44>
    eed0:	83 e2       	ldi	r24, 0x23	; 35
    eed2:	90 e0       	ldi	r25, 0x00	; 0
    eed4:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eed8:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eedc:	8f ef       	ldi	r24, 0xFF	; 255
    eede:	9f ef       	ldi	r25, 0xFF	; 255
    eee0:	08 95       	ret

0000eee2 <getcwd>:
    eee2:	cf 93       	push	r28
    eee4:	df 93       	push	r29
    eee6:	d8 2f       	mov	r29, r24
    eee8:	c9 2f       	mov	r28, r25
    eeea:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eeee:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eef2:	0e 94 41 5f 	call	0xbe82	; 0xbe82 <f_getcwd>
    eef6:	00 97       	sbiw	r24, 0x00	; 0
    eef8:	a1 f0       	breq	.+40     	; 0xef22 <getcwd+0x40>
    eefa:	84 31       	cpi	r24, 0x14	; 20
    eefc:	91 05       	cpc	r25, r1
    eefe:	40 f4       	brcc	.+16     	; 0xef10 <getcwd+0x2e>
    ef00:	fc 01       	movw	r30, r24
    ef02:	ea 55       	subi	r30, 0x5A	; 90
    ef04:	f4 4f       	sbci	r31, 0xF4	; 244
    ef06:	80 81       	ld	r24, Z
    ef08:	08 2e       	mov	r0, r24
    ef0a:	00 0c       	add	r0, r0
    ef0c:	99 0b       	sbc	r25, r25
    ef0e:	02 c0       	rjmp	.+4      	; 0xef14 <getcwd+0x32>
    ef10:	83 e2       	ldi	r24, 0x23	; 35
    ef12:	90 e0       	ldi	r25, 0x00	; 0
    ef14:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef18:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef1c:	80 e0       	ldi	r24, 0x00	; 0
    ef1e:	90 e0       	ldi	r25, 0x00	; 0
    ef20:	02 c0       	rjmp	.+4      	; 0xef26 <getcwd+0x44>
    ef22:	8d 2f       	mov	r24, r29
    ef24:	9c 2f       	mov	r25, r28
    ef26:	df 91       	pop	r29
    ef28:	cf 91       	pop	r28
    ef2a:	08 95       	ret

0000ef2c <mkdir>:
    ef2c:	cf 93       	push	r28
    ef2e:	df 93       	push	r29
    ef30:	ec 01       	movw	r28, r24
    ef32:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef36:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef3a:	41 15       	cp	r20, r1
    ef3c:	51 05       	cpc	r21, r1
    ef3e:	61 05       	cpc	r22, r1
    ef40:	71 05       	cpc	r23, r1
    ef42:	41 f4       	brne	.+16     	; 0xef54 <mkdir+0x28>
    ef44:	ce 01       	movw	r24, r28
    ef46:	0e 94 c1 65 	call	0xcb82	; 0xcb82 <f_mkdir>
    ef4a:	00 97       	sbiw	r24, 0x00	; 0
    ef4c:	39 f4       	brne	.+14     	; 0xef5c <mkdir+0x30>
    ef4e:	80 e0       	ldi	r24, 0x00	; 0
    ef50:	90 e0       	ldi	r25, 0x00	; 0
    ef52:	17 c0       	rjmp	.+46     	; 0xef82 <mkdir+0x56>
    ef54:	9d df       	rcall	.-198    	; 0xee90 <chmod>
    ef56:	89 2b       	or	r24, r25
    ef58:	a9 f3       	breq	.-22     	; 0xef44 <mkdir+0x18>
    ef5a:	11 c0       	rjmp	.+34     	; 0xef7e <mkdir+0x52>
    ef5c:	84 31       	cpi	r24, 0x14	; 20
    ef5e:	91 05       	cpc	r25, r1
    ef60:	40 f4       	brcc	.+16     	; 0xef72 <mkdir+0x46>
    ef62:	fc 01       	movw	r30, r24
    ef64:	ea 55       	subi	r30, 0x5A	; 90
    ef66:	f4 4f       	sbci	r31, 0xF4	; 244
    ef68:	80 81       	ld	r24, Z
    ef6a:	08 2e       	mov	r0, r24
    ef6c:	00 0c       	add	r0, r0
    ef6e:	99 0b       	sbc	r25, r25
    ef70:	02 c0       	rjmp	.+4      	; 0xef76 <mkdir+0x4a>
    ef72:	83 e2       	ldi	r24, 0x23	; 35
    ef74:	90 e0       	ldi	r25, 0x00	; 0
    ef76:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef7a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef7e:	8f ef       	ldi	r24, 0xFF	; 255
    ef80:	9f ef       	ldi	r25, 0xFF	; 255
    ef82:	df 91       	pop	r29
    ef84:	cf 91       	pop	r28
    ef86:	08 95       	ret

0000ef88 <rename>:
    ef88:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ef8c:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef90:	0e 94 b1 66 	call	0xcd62	; 0xcd62 <f_rename>
    ef94:	00 97       	sbiw	r24, 0x00	; 0
    ef96:	a1 f0       	breq	.+40     	; 0xefc0 <rename+0x38>
    ef98:	84 31       	cpi	r24, 0x14	; 20
    ef9a:	91 05       	cpc	r25, r1
    ef9c:	40 f4       	brcc	.+16     	; 0xefae <rename+0x26>
    ef9e:	fc 01       	movw	r30, r24
    efa0:	ea 55       	subi	r30, 0x5A	; 90
    efa2:	f4 4f       	sbci	r31, 0xF4	; 244
    efa4:	80 81       	ld	r24, Z
    efa6:	08 2e       	mov	r0, r24
    efa8:	00 0c       	add	r0, r0
    efaa:	99 0b       	sbc	r25, r25
    efac:	02 c0       	rjmp	.+4      	; 0xefb2 <rename+0x2a>
    efae:	83 e2       	ldi	r24, 0x23	; 35
    efb0:	90 e0       	ldi	r25, 0x00	; 0
    efb2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    efb6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    efba:	8f ef       	ldi	r24, 0xFF	; 255
    efbc:	9f ef       	ldi	r25, 0xFF	; 255
    efbe:	08 95       	ret
    efc0:	80 e0       	ldi	r24, 0x00	; 0
    efc2:	90 e0       	ldi	r25, 0x00	; 0
    efc4:	08 95       	ret

0000efc6 <unlink>:
    efc6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    efca:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    efce:	0e 94 1a 65 	call	0xca34	; 0xca34 <f_unlink>
    efd2:	00 97       	sbiw	r24, 0x00	; 0
    efd4:	a1 f0       	breq	.+40     	; 0xeffe <unlink+0x38>
    efd6:	84 31       	cpi	r24, 0x14	; 20
    efd8:	91 05       	cpc	r25, r1
    efda:	40 f4       	brcc	.+16     	; 0xefec <unlink+0x26>
    efdc:	fc 01       	movw	r30, r24
    efde:	ea 55       	subi	r30, 0x5A	; 90
    efe0:	f4 4f       	sbci	r31, 0xF4	; 244
    efe2:	80 81       	ld	r24, Z
    efe4:	08 2e       	mov	r0, r24
    efe6:	00 0c       	add	r0, r0
    efe8:	99 0b       	sbc	r25, r25
    efea:	02 c0       	rjmp	.+4      	; 0xeff0 <unlink+0x2a>
    efec:	83 e2       	ldi	r24, 0x23	; 35
    efee:	90 e0       	ldi	r25, 0x00	; 0
    eff0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eff4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eff8:	8f ef       	ldi	r24, 0xFF	; 255
    effa:	9f ef       	ldi	r25, 0xFF	; 255
    effc:	08 95       	ret
    effe:	80 e0       	ldi	r24, 0x00	; 0
    f000:	90 e0       	ldi	r25, 0x00	; 0
    f002:	08 95       	ret

0000f004 <rmdir>:
    f004:	e0 cf       	rjmp	.-64     	; 0xefc6 <unlink>
    f006:	08 95       	ret

0000f008 <closedir>:
    f008:	0e 94 a3 63 	call	0xc746	; 0xc746 <f_closedir>
    f00c:	00 97       	sbiw	r24, 0x00	; 0
    f00e:	a1 f0       	breq	.+40     	; 0xf038 <closedir+0x30>
    f010:	84 31       	cpi	r24, 0x14	; 20
    f012:	91 05       	cpc	r25, r1
    f014:	40 f4       	brcc	.+16     	; 0xf026 <closedir+0x1e>
    f016:	fc 01       	movw	r30, r24
    f018:	ea 55       	subi	r30, 0x5A	; 90
    f01a:	f4 4f       	sbci	r31, 0xF4	; 244
    f01c:	80 81       	ld	r24, Z
    f01e:	08 2e       	mov	r0, r24
    f020:	00 0c       	add	r0, r0
    f022:	99 0b       	sbc	r25, r25
    f024:	02 c0       	rjmp	.+4      	; 0xf02a <closedir+0x22>
    f026:	83 e2       	ldi	r24, 0x23	; 35
    f028:	90 e0       	ldi	r25, 0x00	; 0
    f02a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f02e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f032:	8f ef       	ldi	r24, 0xFF	; 255
    f034:	9f ef       	ldi	r25, 0xFF	; 255
    f036:	08 95       	ret
    f038:	80 e0       	ldi	r24, 0x00	; 0
    f03a:	90 e0       	ldi	r25, 0x00	; 0
    f03c:	08 95       	ret

0000f03e <opendir>:
    f03e:	bc 01       	movw	r22, r24
    f040:	80 e3       	ldi	r24, 0x30	; 48
    f042:	99 e1       	ldi	r25, 0x19	; 25
    f044:	0e 94 32 63 	call	0xc664	; 0xc664 <f_opendir>
    f048:	00 97       	sbiw	r24, 0x00	; 0
    f04a:	a1 f0       	breq	.+40     	; 0xf074 <opendir+0x36>
    f04c:	84 31       	cpi	r24, 0x14	; 20
    f04e:	91 05       	cpc	r25, r1
    f050:	40 f4       	brcc	.+16     	; 0xf062 <opendir+0x24>
    f052:	fc 01       	movw	r30, r24
    f054:	ea 55       	subi	r30, 0x5A	; 90
    f056:	f4 4f       	sbci	r31, 0xF4	; 244
    f058:	80 81       	ld	r24, Z
    f05a:	08 2e       	mov	r0, r24
    f05c:	00 0c       	add	r0, r0
    f05e:	99 0b       	sbc	r25, r25
    f060:	02 c0       	rjmp	.+4      	; 0xf066 <opendir+0x28>
    f062:	83 e2       	ldi	r24, 0x23	; 35
    f064:	90 e0       	ldi	r25, 0x00	; 0
    f066:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f06a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f06e:	80 e0       	ldi	r24, 0x00	; 0
    f070:	90 e0       	ldi	r25, 0x00	; 0
    f072:	08 95       	ret
    f074:	80 e3       	ldi	r24, 0x30	; 48
    f076:	99 e1       	ldi	r25, 0x19	; 25
    f078:	08 95       	ret

0000f07a <readdir>:
    f07a:	a6 e1       	ldi	r26, 0x16	; 22
    f07c:	b1 e0       	ldi	r27, 0x01	; 1
    f07e:	e3 e4       	ldi	r30, 0x43	; 67
    f080:	f8 e7       	ldi	r31, 0x78	; 120
    f082:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    f086:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_de>
    f08a:	be 01       	movw	r22, r28
    f08c:	6f 5f       	subi	r22, 0xFF	; 255
    f08e:	7f 4f       	sbci	r23, 0xFF	; 255
    f090:	0e 94 b8 63 	call	0xc770	; 0xc770 <f_readdir>
    f094:	00 97       	sbiw	r24, 0x00	; 0
    f096:	a1 f0       	breq	.+40     	; 0xf0c0 <readdir+0x46>
    f098:	84 31       	cpi	r24, 0x14	; 20
    f09a:	91 05       	cpc	r25, r1
    f09c:	40 f4       	brcc	.+16     	; 0xf0ae <readdir+0x34>
    f09e:	fc 01       	movw	r30, r24
    f0a0:	ea 55       	subi	r30, 0x5A	; 90
    f0a2:	f4 4f       	sbci	r31, 0xF4	; 244
    f0a4:	80 81       	ld	r24, Z
    f0a6:	08 2e       	mov	r0, r24
    f0a8:	00 0c       	add	r0, r0
    f0aa:	99 0b       	sbc	r25, r25
    f0ac:	02 c0       	rjmp	.+4      	; 0xf0b2 <readdir+0x38>
    f0ae:	83 e2       	ldi	r24, 0x23	; 35
    f0b0:	90 e0       	ldi	r25, 0x00	; 0
    f0b2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f0b6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f0ba:	80 e0       	ldi	r24, 0x00	; 0
    f0bc:	90 e0       	ldi	r25, 0x00	; 0
    f0be:	16 c0       	rjmp	.+44     	; 0xf0ec <readdir+0x72>
    f0c0:	be 01       	movw	r22, r28
    f0c2:	69 5e       	subi	r22, 0xE9	; 233
    f0c4:	7f 4f       	sbci	r23, 0xFF	; 255
    f0c6:	fb 01       	movw	r30, r22
    f0c8:	01 90       	ld	r0, Z+
    f0ca:	00 20       	and	r0, r0
    f0cc:	e9 f7       	brne	.-6      	; 0xf0c8 <readdir+0x4e>
    f0ce:	31 97       	sbiw	r30, 0x01	; 1
    f0d0:	8f 01       	movw	r16, r30
    f0d2:	06 1b       	sub	r16, r22
    f0d4:	17 0b       	sbc	r17, r23
    f0d6:	a8 01       	movw	r20, r16
    f0d8:	80 e3       	ldi	r24, 0x30	; 48
    f0da:	98 e1       	ldi	r25, 0x18	; 24
    f0dc:	0e 94 57 31 	call	0x62ae	; 0x62ae <strncpy>
    f0e0:	f8 01       	movw	r30, r16
    f0e2:	e0 5d       	subi	r30, 0xD0	; 208
    f0e4:	f7 4e       	sbci	r31, 0xE7	; 231
    f0e6:	10 82       	st	Z, r1
    f0e8:	80 e3       	ldi	r24, 0x30	; 48
    f0ea:	98 e1       	ldi	r25, 0x18	; 24
    f0ec:	ca 5e       	subi	r28, 0xEA	; 234
    f0ee:	de 4f       	sbci	r29, 0xFE	; 254
    f0f0:	e4 e0       	ldi	r30, 0x04	; 4
    f0f2:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

0000f0f6 <perror>:
    f0f6:	ad b7       	in	r26, 0x3d	; 61
    f0f8:	be b7       	in	r27, 0x3e	; 62
    f0fa:	17 97       	sbiw	r26, 0x07	; 7
    f0fc:	0f b6       	in	r0, 0x3f	; 63
    f0fe:	f8 94       	cli
    f100:	be bf       	out	0x3e, r27	; 62
    f102:	0f be       	out	0x3f, r0	; 63
    f104:	ad bf       	out	0x3d, r26	; 61
    f106:	20 91 bd 1c 	lds	r18, 0x1CBD	; 0x801cbd <errno>
    f10a:	30 91 be 1c 	lds	r19, 0x1CBE	; 0x801cbe <errno+0x1>
    f10e:	23 32       	cpi	r18, 0x23	; 35
    f110:	31 05       	cpc	r19, r1
    f112:	40 f4       	brcc	.+16     	; 0xf124 <perror+0x2e>
    f114:	22 0f       	add	r18, r18
    f116:	33 1f       	adc	r19, r19
    f118:	f9 01       	movw	r30, r18
    f11a:	ea 5c       	subi	r30, 0xCA	; 202
    f11c:	fe 4f       	sbci	r31, 0xFE	; 254
    f11e:	20 81       	ld	r18, Z
    f120:	31 81       	ldd	r19, Z+1	; 0x01
    f122:	04 c0       	rjmp	.+8      	; 0xf12c <perror+0x36>
    f124:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f128:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f12c:	00 97       	sbiw	r24, 0x00	; 0
    f12e:	99 f0       	breq	.+38     	; 0xf156 <perror+0x60>
    f130:	fc 01       	movw	r30, r24
    f132:	40 81       	ld	r20, Z
    f134:	44 23       	and	r20, r20
    f136:	79 f0       	breq	.+30     	; 0xf156 <perror+0x60>
    f138:	ed b7       	in	r30, 0x3d	; 61
    f13a:	fe b7       	in	r31, 0x3e	; 62
    f13c:	37 83       	std	Z+7, r19	; 0x07
    f13e:	26 83       	std	Z+6, r18	; 0x06
    f140:	95 83       	std	Z+5, r25	; 0x05
    f142:	84 83       	std	Z+4, r24	; 0x04
    f144:	82 ea       	ldi	r24, 0xA2	; 162
    f146:	9b e0       	ldi	r25, 0x0B	; 11
    f148:	a0 e0       	ldi	r26, 0x00	; 0
    f14a:	81 83       	std	Z+1, r24	; 0x01
    f14c:	92 83       	std	Z+2, r25	; 0x02
    f14e:	a3 83       	std	Z+3, r26	; 0x03
    f150:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    f154:	0c c0       	rjmp	.+24     	; 0xf16e <perror+0x78>
    f156:	ed b7       	in	r30, 0x3d	; 61
    f158:	fe b7       	in	r31, 0x3e	; 62
    f15a:	35 83       	std	Z+5, r19	; 0x05
    f15c:	24 83       	std	Z+4, r18	; 0x04
    f15e:	8e e9       	ldi	r24, 0x9E	; 158
    f160:	9b e0       	ldi	r25, 0x0B	; 11
    f162:	a0 e0       	ldi	r26, 0x00	; 0
    f164:	81 83       	std	Z+1, r24	; 0x01
    f166:	92 83       	std	Z+2, r25	; 0x02
    f168:	a3 83       	std	Z+3, r26	; 0x03
    f16a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    f16e:	ad b7       	in	r26, 0x3d	; 61
    f170:	be b7       	in	r27, 0x3e	; 62
    f172:	17 96       	adiw	r26, 0x07	; 7
    f174:	0f b6       	in	r0, 0x3f	; 63
    f176:	f8 94       	cli
    f178:	be bf       	out	0x3e, r27	; 62
    f17a:	0f be       	out	0x3f, r0	; 63
    f17c:	ad bf       	out	0x3d, r26	; 61
    f17e:	08 95       	ret

0000f180 <fdevopen>:
    f180:	0f 93       	push	r16
    f182:	1f 93       	push	r17
    f184:	cf 93       	push	r28
    f186:	df 93       	push	r29
    f188:	00 97       	sbiw	r24, 0x00	; 0
    f18a:	31 f4       	brne	.+12     	; 0xf198 <fdevopen+0x18>
    f18c:	61 15       	cp	r22, r1
    f18e:	71 05       	cpc	r23, r1
    f190:	19 f4       	brne	.+6      	; 0xf198 <fdevopen+0x18>
    f192:	80 e0       	ldi	r24, 0x00	; 0
    f194:	90 e0       	ldi	r25, 0x00	; 0
    f196:	3a c0       	rjmp	.+116    	; 0xf20c <fdevopen+0x8c>
    f198:	8b 01       	movw	r16, r22
    f19a:	ec 01       	movw	r28, r24
    f19c:	6e e0       	ldi	r22, 0x0E	; 14
    f19e:	70 e0       	ldi	r23, 0x00	; 0
    f1a0:	81 e0       	ldi	r24, 0x01	; 1
    f1a2:	90 e0       	ldi	r25, 0x00	; 0
    f1a4:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
    f1a8:	fc 01       	movw	r30, r24
    f1aa:	89 2b       	or	r24, r25
    f1ac:	91 f3       	breq	.-28     	; 0xf192 <fdevopen+0x12>
    f1ae:	80 e8       	ldi	r24, 0x80	; 128
    f1b0:	83 83       	std	Z+3, r24	; 0x03
    f1b2:	01 15       	cp	r16, r1
    f1b4:	11 05       	cpc	r17, r1
    f1b6:	71 f0       	breq	.+28     	; 0xf1d4 <fdevopen+0x54>
    f1b8:	13 87       	std	Z+11, r17	; 0x0b
    f1ba:	02 87       	std	Z+10, r16	; 0x0a
    f1bc:	81 e8       	ldi	r24, 0x81	; 129
    f1be:	83 83       	std	Z+3, r24	; 0x03
    f1c0:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f1c4:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f1c8:	89 2b       	or	r24, r25
    f1ca:	21 f4       	brne	.+8      	; 0xf1d4 <fdevopen+0x54>
    f1cc:	f0 93 c0 1c 	sts	0x1CC0, r31	; 0x801cc0 <__iob+0x1>
    f1d0:	e0 93 bf 1c 	sts	0x1CBF, r30	; 0x801cbf <__iob>
    f1d4:	20 97       	sbiw	r28, 0x00	; 0
    f1d6:	c9 f0       	breq	.+50     	; 0xf20a <fdevopen+0x8a>
    f1d8:	d1 87       	std	Z+9, r29	; 0x09
    f1da:	c0 87       	std	Z+8, r28	; 0x08
    f1dc:	83 81       	ldd	r24, Z+3	; 0x03
    f1de:	82 60       	ori	r24, 0x02	; 2
    f1e0:	83 83       	std	Z+3, r24	; 0x03
    f1e2:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f1e6:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f1ea:	89 2b       	or	r24, r25
    f1ec:	21 f4       	brne	.+8      	; 0xf1f6 <fdevopen+0x76>
    f1ee:	f0 93 c2 1c 	sts	0x1CC2, r31	; 0x801cc2 <__iob+0x3>
    f1f2:	e0 93 c1 1c 	sts	0x1CC1, r30	; 0x801cc1 <__iob+0x2>
    f1f6:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f1fa:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f1fe:	89 2b       	or	r24, r25
    f200:	21 f4       	brne	.+8      	; 0xf20a <fdevopen+0x8a>
    f202:	f0 93 c4 1c 	sts	0x1CC4, r31	; 0x801cc4 <__iob+0x5>
    f206:	e0 93 c3 1c 	sts	0x1CC3, r30	; 0x801cc3 <__iob+0x4>
    f20a:	cf 01       	movw	r24, r30
    f20c:	df 91       	pop	r29
    f20e:	cf 91       	pop	r28
    f210:	1f 91       	pop	r17
    f212:	0f 91       	pop	r16
    f214:	08 95       	ret

0000f216 <fat_time_to_unix>:
    f216:	a6 e1       	ldi	r26, 0x16	; 22
    f218:	b0 e0       	ldi	r27, 0x00	; 0
    f21a:	e1 e1       	ldi	r30, 0x11	; 17
    f21c:	f9 e7       	ldi	r31, 0x79	; 121
    f21e:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    f222:	fe 01       	movw	r30, r28
    f224:	31 96       	adiw	r30, 0x01	; 1
    f226:	26 e1       	ldi	r18, 0x16	; 22
    f228:	df 01       	movw	r26, r30
    f22a:	1d 92       	st	X+, r1
    f22c:	2a 95       	dec	r18
    f22e:	e9 f7       	brne	.-6      	; 0xf22a <fat_time_to_unix+0x14>
    f230:	9b 01       	movw	r18, r22
    f232:	22 0f       	add	r18, r18
    f234:	33 1f       	adc	r19, r19
    f236:	2e 73       	andi	r18, 0x3E	; 62
    f238:	33 27       	eor	r19, r19
    f23a:	3a 83       	std	Y+2, r19	; 0x02
    f23c:	29 83       	std	Y+1, r18	; 0x01
    f23e:	9b 01       	movw	r18, r22
    f240:	55 e0       	ldi	r21, 0x05	; 5
    f242:	36 95       	lsr	r19
    f244:	27 95       	ror	r18
    f246:	5a 95       	dec	r21
    f248:	e1 f7       	brne	.-8      	; 0xf242 <fat_time_to_unix+0x2c>
    f24a:	2f 73       	andi	r18, 0x3F	; 63
    f24c:	33 27       	eor	r19, r19
    f24e:	3c 83       	std	Y+4, r19	; 0x04
    f250:	2b 83       	std	Y+3, r18	; 0x03
    f252:	27 2f       	mov	r18, r23
    f254:	26 95       	lsr	r18
    f256:	26 95       	lsr	r18
    f258:	26 95       	lsr	r18
    f25a:	2d 83       	std	Y+5, r18	; 0x05
    f25c:	1e 82       	std	Y+6, r1	; 0x06
    f25e:	9c 01       	movw	r18, r24
    f260:	2f 71       	andi	r18, 0x1F	; 31
    f262:	33 27       	eor	r19, r19
    f264:	38 87       	std	Y+8, r19	; 0x08
    f266:	2f 83       	std	Y+7, r18	; 0x07
    f268:	9c 01       	movw	r18, r24
    f26a:	65 e0       	ldi	r22, 0x05	; 5
    f26c:	36 95       	lsr	r19
    f26e:	27 95       	ror	r18
    f270:	6a 95       	dec	r22
    f272:	e1 f7       	brne	.-8      	; 0xf26c <fat_time_to_unix+0x56>
    f274:	2f 70       	andi	r18, 0x0F	; 15
    f276:	33 27       	eor	r19, r19
    f278:	21 50       	subi	r18, 0x01	; 1
    f27a:	31 09       	sbc	r19, r1
    f27c:	3a 87       	std	Y+10, r19	; 0x0a
    f27e:	29 87       	std	Y+9, r18	; 0x09
    f280:	9c 01       	movw	r18, r24
    f282:	23 2f       	mov	r18, r19
    f284:	33 27       	eor	r19, r19
    f286:	26 95       	lsr	r18
    f288:	20 5b       	subi	r18, 0xB0	; 176
    f28a:	3f 4f       	sbci	r19, 0xFF	; 255
    f28c:	3c 87       	std	Y+12, r19	; 0x0c
    f28e:	2b 87       	std	Y+11, r18	; 0x0b
    f290:	cf 01       	movw	r24, r30
    f292:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <timegm>
    f296:	66 96       	adiw	r28, 0x16	; 22
    f298:	e2 e0       	ldi	r30, 0x02	; 2
    f29a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000f29e <stat>:
    f29e:	a6 e1       	ldi	r26, 0x16	; 22
    f2a0:	b1 e0       	ldi	r27, 0x01	; 1
    f2a2:	e5 e5       	ldi	r30, 0x55	; 85
    f2a4:	f9 e7       	ldi	r31, 0x79	; 121
    f2a6:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
    f2aa:	6c 01       	movw	r12, r24
    f2ac:	8b 01       	movw	r16, r22
    f2ae:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f2b2:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f2b6:	6c ef       	ldi	r22, 0xFC	; 252
    f2b8:	78 e0       	ldi	r23, 0x08	; 8
    f2ba:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
    f2be:	89 2b       	or	r24, r25
    f2c0:	01 f1       	breq	.+64     	; 0xf302 <stat+0x64>
    f2c2:	f8 01       	movw	r30, r16
    f2c4:	14 a2       	std	Z+36, r1	; 0x24
    f2c6:	15 a2       	std	Z+37, r1	; 0x25
    f2c8:	16 a2       	std	Z+38, r1	; 0x26
    f2ca:	17 a2       	std	Z+39, r1	; 0x27
    f2cc:	10 a6       	std	Z+40, r1	; 0x28
    f2ce:	11 a6       	std	Z+41, r1	; 0x29
    f2d0:	12 a6       	std	Z+42, r1	; 0x2a
    f2d2:	13 a6       	std	Z+43, r1	; 0x2b
    f2d4:	14 a6       	std	Z+44, r1	; 0x2c
    f2d6:	15 a6       	std	Z+45, r1	; 0x2d
    f2d8:	16 a6       	std	Z+46, r1	; 0x2e
    f2da:	17 a6       	std	Z+47, r1	; 0x2f
    f2dc:	11 8a       	std	Z+17, r1	; 0x11
    f2de:	10 8a       	std	Z+16, r1	; 0x10
    f2e0:	13 8a       	std	Z+19, r1	; 0x13
    f2e2:	12 8a       	std	Z+18, r1	; 0x12
    f2e4:	10 8e       	std	Z+24, r1	; 0x18
    f2e6:	11 8e       	std	Z+25, r1	; 0x19
    f2e8:	12 8e       	std	Z+26, r1	; 0x1a
    f2ea:	13 8e       	std	Z+27, r1	; 0x1b
    f2ec:	80 e0       	ldi	r24, 0x00	; 0
    f2ee:	90 e4       	ldi	r25, 0x40	; 64
    f2f0:	a0 e0       	ldi	r26, 0x00	; 0
    f2f2:	b0 e0       	ldi	r27, 0x00	; 0
    f2f4:	80 87       	std	Z+8, r24	; 0x08
    f2f6:	91 87       	std	Z+9, r25	; 0x09
    f2f8:	a2 87       	std	Z+10, r26	; 0x0a
    f2fa:	b3 87       	std	Z+11, r27	; 0x0b
    f2fc:	e1 2c       	mov	r14, r1
    f2fe:	f1 2c       	mov	r15, r1
    f300:	62 c0       	rjmp	.+196    	; 0xf3c6 <stat+0x128>
    f302:	66 ea       	ldi	r22, 0xA6	; 166
    f304:	78 e0       	ldi	r23, 0x08	; 8
    f306:	c6 01       	movw	r24, r12
    f308:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
    f30c:	89 2b       	or	r24, r25
    f30e:	c9 f6       	brne	.-78     	; 0xf2c2 <stat+0x24>
    f310:	61 ef       	ldi	r22, 0xF1	; 241
    f312:	72 e1       	ldi	r23, 0x12	; 18
    f314:	c6 01       	movw	r24, r12
    f316:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
    f31a:	7c 01       	movw	r14, r24
    f31c:	89 2b       	or	r24, r25
    f31e:	89 f6       	brne	.-94     	; 0xf2c2 <stat+0x24>
    f320:	be 01       	movw	r22, r28
    f322:	6f 5f       	subi	r22, 0xFF	; 255
    f324:	7f 4f       	sbci	r23, 0xFF	; 255
    f326:	c6 01       	movw	r24, r12
    f328:	0e 94 fc 63 	call	0xc7f8	; 0xc7f8 <f_stat>
    f32c:	00 97       	sbiw	r24, 0x00	; 0
    f32e:	a9 f0       	breq	.+42     	; 0xf35a <stat+0xbc>
    f330:	84 31       	cpi	r24, 0x14	; 20
    f332:	91 05       	cpc	r25, r1
    f334:	40 f4       	brcc	.+16     	; 0xf346 <stat+0xa8>
    f336:	fc 01       	movw	r30, r24
    f338:	ea 55       	subi	r30, 0x5A	; 90
    f33a:	f4 4f       	sbci	r31, 0xF4	; 244
    f33c:	80 81       	ld	r24, Z
    f33e:	08 2e       	mov	r0, r24
    f340:	00 0c       	add	r0, r0
    f342:	99 0b       	sbc	r25, r25
    f344:	02 c0       	rjmp	.+4      	; 0xf34a <stat+0xac>
    f346:	83 e2       	ldi	r24, 0x23	; 35
    f348:	90 e0       	ldi	r25, 0x00	; 0
    f34a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f34e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f352:	ee 24       	eor	r14, r14
    f354:	ea 94       	dec	r14
    f356:	fe 2c       	mov	r15, r14
    f358:	36 c0       	rjmp	.+108    	; 0xf3c6 <stat+0x128>
    f35a:	89 81       	ldd	r24, Y+1	; 0x01
    f35c:	9a 81       	ldd	r25, Y+2	; 0x02
    f35e:	ab 81       	ldd	r26, Y+3	; 0x03
    f360:	bc 81       	ldd	r27, Y+4	; 0x04
    f362:	f8 01       	movw	r30, r16
    f364:	80 8f       	std	Z+24, r24	; 0x18
    f366:	91 8f       	std	Z+25, r25	; 0x19
    f368:	a2 8f       	std	Z+26, r26	; 0x1a
    f36a:	b3 8f       	std	Z+27, r27	; 0x1b
    f36c:	6f 81       	ldd	r22, Y+7	; 0x07
    f36e:	78 85       	ldd	r23, Y+8	; 0x08
    f370:	8d 81       	ldd	r24, Y+5	; 0x05
    f372:	9e 81       	ldd	r25, Y+6	; 0x06
    f374:	50 df       	rcall	.-352    	; 0xf216 <fat_time_to_unix>
    f376:	f8 01       	movw	r30, r16
    f378:	64 a3       	std	Z+36, r22	; 0x24
    f37a:	75 a3       	std	Z+37, r23	; 0x25
    f37c:	86 a3       	std	Z+38, r24	; 0x26
    f37e:	97 a3       	std	Z+39, r25	; 0x27
    f380:	60 a7       	std	Z+40, r22	; 0x28
    f382:	71 a7       	std	Z+41, r23	; 0x29
    f384:	82 a7       	std	Z+42, r24	; 0x2a
    f386:	93 a7       	std	Z+43, r25	; 0x2b
    f388:	64 a7       	std	Z+44, r22	; 0x2c
    f38a:	75 a7       	std	Z+45, r23	; 0x2d
    f38c:	86 a7       	std	Z+46, r24	; 0x2e
    f38e:	97 a7       	std	Z+47, r25	; 0x2f
    f390:	29 85       	ldd	r18, Y+9	; 0x09
    f392:	20 fd       	sbrc	r18, 0
    f394:	03 c0       	rjmp	.+6      	; 0xf39c <stat+0xfe>
    f396:	8f ef       	ldi	r24, 0xFF	; 255
    f398:	91 e0       	ldi	r25, 0x01	; 1
    f39a:	02 c0       	rjmp	.+4      	; 0xf3a0 <stat+0x102>
    f39c:	8d e6       	ldi	r24, 0x6D	; 109
    f39e:	91 e0       	ldi	r25, 0x01	; 1
    f3a0:	48 ee       	ldi	r20, 0xE8	; 232
    f3a2:	53 e0       	ldi	r21, 0x03	; 3
    f3a4:	f8 01       	movw	r30, r16
    f3a6:	51 8b       	std	Z+17, r21	; 0x11
    f3a8:	40 8b       	std	Z+16, r20	; 0x10
    f3aa:	53 8b       	std	Z+19, r21	; 0x13
    f3ac:	42 8b       	std	Z+18, r20	; 0x12
    f3ae:	24 ff       	sbrs	r18, 4
    f3b0:	02 c0       	rjmp	.+4      	; 0xf3b6 <stat+0x118>
    f3b2:	90 64       	ori	r25, 0x40	; 64
    f3b4:	01 c0       	rjmp	.+2      	; 0xf3b8 <stat+0x11a>
    f3b6:	90 68       	ori	r25, 0x80	; 128
    f3b8:	a0 e0       	ldi	r26, 0x00	; 0
    f3ba:	b0 e0       	ldi	r27, 0x00	; 0
    f3bc:	f8 01       	movw	r30, r16
    f3be:	80 87       	std	Z+8, r24	; 0x08
    f3c0:	91 87       	std	Z+9, r25	; 0x09
    f3c2:	a2 87       	std	Z+10, r26	; 0x0a
    f3c4:	b3 87       	std	Z+11, r27	; 0x0b
    f3c6:	c7 01       	movw	r24, r14
    f3c8:	ca 5e       	subi	r28, 0xEA	; 234
    f3ca:	de 4f       	sbci	r29, 0xFE	; 254
    f3cc:	e8 e0       	ldi	r30, 0x08	; 8
    f3ce:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0000f3d2 <unix_time_to_fat>:
    f3d2:	a4 e0       	ldi	r26, 0x04	; 4
    f3d4:	b0 e0       	ldi	r27, 0x00	; 0
    f3d6:	ef ee       	ldi	r30, 0xEF	; 239
    f3d8:	f9 e7       	ldi	r31, 0x79	; 121
    f3da:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
    f3de:	69 83       	std	Y+1, r22	; 0x01
    f3e0:	7a 83       	std	Y+2, r23	; 0x02
    f3e2:	8b 83       	std	Y+3, r24	; 0x03
    f3e4:	9c 83       	std	Y+4, r25	; 0x04
    f3e6:	7a 01       	movw	r14, r20
    f3e8:	89 01       	movw	r16, r18
    f3ea:	ce 01       	movw	r24, r28
    f3ec:	01 96       	adiw	r24, 0x01	; 1
    f3ee:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <gmtime>
    f3f2:	fc 01       	movw	r30, r24
    f3f4:	22 85       	ldd	r18, Z+10	; 0x0a
    f3f6:	33 85       	ldd	r19, Z+11	; 0x0b
    f3f8:	20 55       	subi	r18, 0x50	; 80
    f3fa:	31 09       	sbc	r19, r1
    f3fc:	c9 01       	movw	r24, r18
    f3fe:	98 2f       	mov	r25, r24
    f400:	88 27       	eor	r24, r24
    f402:	99 0f       	add	r25, r25
    f404:	20 85       	ldd	r18, Z+8	; 0x08
    f406:	31 85       	ldd	r19, Z+9	; 0x09
    f408:	2f 5f       	subi	r18, 0xFF	; 255
    f40a:	3f 4f       	sbci	r19, 0xFF	; 255
    f40c:	45 e0       	ldi	r20, 0x05	; 5
    f40e:	22 0f       	add	r18, r18
    f410:	33 1f       	adc	r19, r19
    f412:	4a 95       	dec	r20
    f414:	e1 f7       	brne	.-8      	; 0xf40e <unix_time_to_fat+0x3c>
    f416:	28 2b       	or	r18, r24
    f418:	39 2b       	or	r19, r25
    f41a:	86 81       	ldd	r24, Z+6	; 0x06
    f41c:	97 81       	ldd	r25, Z+7	; 0x07
    f41e:	28 2b       	or	r18, r24
    f420:	39 2b       	or	r19, r25
    f422:	d7 01       	movw	r26, r14
    f424:	2d 93       	st	X+, r18
    f426:	3c 93       	st	X, r19
    f428:	84 81       	ldd	r24, Z+4	; 0x04
    f42a:	20 e0       	ldi	r18, 0x00	; 0
    f42c:	30 e0       	ldi	r19, 0x00	; 0
    f42e:	38 2f       	mov	r19, r24
    f430:	33 0f       	add	r19, r19
    f432:	33 0f       	add	r19, r19
    f434:	33 0f       	add	r19, r19
    f436:	82 81       	ldd	r24, Z+2	; 0x02
    f438:	93 81       	ldd	r25, Z+3	; 0x03
    f43a:	55 e0       	ldi	r21, 0x05	; 5
    f43c:	88 0f       	add	r24, r24
    f43e:	99 1f       	adc	r25, r25
    f440:	5a 95       	dec	r21
    f442:	e1 f7       	brne	.-8      	; 0xf43c <unix_time_to_fat+0x6a>
    f444:	82 2b       	or	r24, r18
    f446:	93 2b       	or	r25, r19
    f448:	20 81       	ld	r18, Z
    f44a:	31 81       	ldd	r19, Z+1	; 0x01
    f44c:	36 95       	lsr	r19
    f44e:	27 95       	ror	r18
    f450:	82 2b       	or	r24, r18
    f452:	93 2b       	or	r25, r19
    f454:	f8 01       	movw	r30, r16
    f456:	91 83       	std	Z+1, r25	; 0x01
    f458:	80 83       	st	Z, r24
    f45a:	24 96       	adiw	r28, 0x04	; 4
    f45c:	e6 e0       	ldi	r30, 0x06	; 6
    f45e:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0000f462 <utime>:
    f462:	aa e1       	ldi	r26, 0x1A	; 26
    f464:	b1 e0       	ldi	r27, 0x01	; 1
    f466:	e7 e3       	ldi	r30, 0x37	; 55
    f468:	fa e7       	ldi	r31, 0x7A	; 122
    f46a:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
    f46e:	8c 01       	movw	r16, r24
    f470:	61 15       	cp	r22, r1
    f472:	71 05       	cpc	r23, r1
    f474:	31 f0       	breq	.+12     	; 0xf482 <utime+0x20>
    f476:	fb 01       	movw	r30, r22
    f478:	64 81       	ldd	r22, Z+4	; 0x04
    f47a:	75 81       	ldd	r23, Z+5	; 0x05
    f47c:	86 81       	ldd	r24, Z+6	; 0x06
    f47e:	97 81       	ldd	r25, Z+7	; 0x07
    f480:	04 c0       	rjmp	.+8      	; 0xf48a <utime+0x28>
    f482:	80 e0       	ldi	r24, 0x00	; 0
    f484:	90 e0       	ldi	r25, 0x00	; 0
    f486:	0e 94 0d 38 	call	0x701a	; 0x701a <time>
    f48a:	9e 01       	movw	r18, r28
    f48c:	29 5e       	subi	r18, 0xE9	; 233
    f48e:	3e 4f       	sbci	r19, 0xFE	; 254
    f490:	ae 01       	movw	r20, r28
    f492:	47 5e       	subi	r20, 0xE7	; 231
    f494:	5e 4f       	sbci	r21, 0xFE	; 254
    f496:	9d df       	rcall	.-198    	; 0xf3d2 <unix_time_to_fat>
    f498:	c7 5e       	subi	r28, 0xE7	; 231
    f49a:	de 4f       	sbci	r29, 0xFE	; 254
    f49c:	88 81       	ld	r24, Y
    f49e:	99 81       	ldd	r25, Y+1	; 0x01
    f4a0:	c9 51       	subi	r28, 0x19	; 25
    f4a2:	d1 40       	sbci	r29, 0x01	; 1
    f4a4:	9e 83       	std	Y+6, r25	; 0x06
    f4a6:	8d 83       	std	Y+5, r24	; 0x05
    f4a8:	c9 5e       	subi	r28, 0xE9	; 233
    f4aa:	de 4f       	sbci	r29, 0xFE	; 254
    f4ac:	88 81       	ld	r24, Y
    f4ae:	99 81       	ldd	r25, Y+1	; 0x01
    f4b0:	c7 51       	subi	r28, 0x17	; 23
    f4b2:	d1 40       	sbci	r29, 0x01	; 1
    f4b4:	98 87       	std	Y+8, r25	; 0x08
    f4b6:	8f 83       	std	Y+7, r24	; 0x07
    f4b8:	be 01       	movw	r22, r28
    f4ba:	6f 5f       	subi	r22, 0xFF	; 255
    f4bc:	7f 4f       	sbci	r23, 0xFF	; 255
    f4be:	c8 01       	movw	r24, r16
    f4c0:	0e 94 13 68 	call	0xd026	; 0xd026 <f_utime>
    f4c4:	84 31       	cpi	r24, 0x14	; 20
    f4c6:	91 05       	cpc	r25, r1
    f4c8:	40 f4       	brcc	.+16     	; 0xf4da <utime+0x78>
    f4ca:	fc 01       	movw	r30, r24
    f4cc:	ea 55       	subi	r30, 0x5A	; 90
    f4ce:	f4 4f       	sbci	r31, 0xF4	; 244
    f4d0:	80 81       	ld	r24, Z
    f4d2:	08 2e       	mov	r0, r24
    f4d4:	00 0c       	add	r0, r0
    f4d6:	99 0b       	sbc	r25, r25
    f4d8:	02 c0       	rjmp	.+4      	; 0xf4de <utime+0x7c>
    f4da:	83 e2       	ldi	r24, 0x23	; 35
    f4dc:	90 e0       	ldi	r25, 0x00	; 0
    f4de:	c6 5e       	subi	r28, 0xE6	; 230
    f4e0:	de 4f       	sbci	r29, 0xFE	; 254
    f4e2:	e4 e0       	ldi	r30, 0x04	; 4
    f4e4:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

0000f4e8 <fileno_to_fatfs>:
    f4e8:	83 30       	cpi	r24, 0x03	; 3
    f4ea:	91 05       	cpc	r25, r1
    f4ec:	48 f4       	brcc	.+18     	; 0xf500 <fileno_to_fatfs+0x18>
    f4ee:	89 e0       	ldi	r24, 0x09	; 9
    f4f0:	90 e0       	ldi	r25, 0x00	; 0
    f4f2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f4f6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f4fa:	80 e0       	ldi	r24, 0x00	; 0
    f4fc:	90 e0       	ldi	r25, 0x00	; 0
    f4fe:	08 95       	ret
    f500:	60 dc       	rcall	.-1856   	; 0xedc2 <fileno_to_stream>
    f502:	00 97       	sbiw	r24, 0x00	; 0
    f504:	d1 f3       	breq	.-12     	; 0xf4fa <fileno_to_fatfs+0x12>
    f506:	fc 01       	movw	r30, r24
    f508:	84 85       	ldd	r24, Z+12	; 0x0c
    f50a:	95 85       	ldd	r25, Z+13	; 0x0d
    f50c:	00 97       	sbiw	r24, 0x00	; 0
    f50e:	79 f3       	breq	.-34     	; 0xf4ee <fileno_to_fatfs+0x6>
    f510:	08 95       	ret

0000f512 <ftell>:
    f512:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f516:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f51a:	37 dc       	rcall	.-1938   	; 0xed8a <fileno>
    f51c:	83 30       	cpi	r24, 0x03	; 3
    f51e:	91 05       	cpc	r25, r1
    f520:	48 f0       	brcs	.+18     	; 0xf534 <ftell+0x22>
    f522:	e2 df       	rcall	.-60     	; 0xf4e8 <fileno_to_fatfs>
    f524:	00 97       	sbiw	r24, 0x00	; 0
    f526:	51 f4       	brne	.+20     	; 0xf53c <ftell+0x2a>
    f528:	89 e0       	ldi	r24, 0x09	; 9
    f52a:	90 e0       	ldi	r25, 0x00	; 0
    f52c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f530:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f534:	6f ef       	ldi	r22, 0xFF	; 255
    f536:	7f ef       	ldi	r23, 0xFF	; 255
    f538:	cb 01       	movw	r24, r22
    f53a:	08 95       	ret
    f53c:	fc 01       	movw	r30, r24
    f53e:	60 89       	ldd	r22, Z+16	; 0x10
    f540:	71 89       	ldd	r23, Z+17	; 0x11
    f542:	82 89       	ldd	r24, Z+18	; 0x12
    f544:	93 89       	ldd	r25, Z+19	; 0x13
    f546:	08 95       	ret

0000f548 <lseek>:
    f548:	a3 e0       	ldi	r26, 0x03	; 3
    f54a:	b0 e0       	ldi	r27, 0x00	; 0
    f54c:	ea ea       	ldi	r30, 0xAA	; 170
    f54e:	fa e7       	ldi	r31, 0x7A	; 122
    f550:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
    f554:	5c 01       	movw	r10, r24
    f556:	6a 01       	movw	r12, r20
    f558:	7b 01       	movw	r14, r22
    f55a:	89 01       	movw	r16, r18
    f55c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f560:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f564:	c1 df       	rcall	.-126    	; 0xf4e8 <fileno_to_fatfs>
    f566:	ec 01       	movw	r28, r24
    f568:	89 2b       	or	r24, r25
    f56a:	19 f4       	brne	.+6      	; 0xf572 <lseek+0x2a>
    f56c:	88 e1       	ldi	r24, 0x18	; 24
    f56e:	90 e0       	ldi	r25, 0x00	; 0
    f570:	26 c0       	rjmp	.+76     	; 0xf5be <lseek+0x76>
    f572:	83 e0       	ldi	r24, 0x03	; 3
    f574:	a8 16       	cp	r10, r24
    f576:	b1 04       	cpc	r11, r1
    f578:	d0 f1       	brcs	.+116    	; 0xf5ee <lseek+0xa6>
    f57a:	c5 01       	movw	r24, r10
    f57c:	22 dc       	rcall	.-1980   	; 0xedc2 <fileno_to_stream>
    f57e:	fc 01       	movw	r30, r24
    f580:	93 81       	ldd	r25, Z+3	; 0x03
    f582:	90 64       	ori	r25, 0x40	; 64
    f584:	93 83       	std	Z+3, r25	; 0x03
    f586:	02 30       	cpi	r16, 0x02	; 2
    f588:	11 05       	cpc	r17, r1
    f58a:	a9 f5       	brne	.+106    	; 0xf5f6 <lseek+0xae>
    f58c:	8a 85       	ldd	r24, Y+10	; 0x0a
    f58e:	9b 85       	ldd	r25, Y+11	; 0x0b
    f590:	ac 85       	ldd	r26, Y+12	; 0x0c
    f592:	bd 85       	ldd	r27, Y+13	; 0x0d
    f594:	c8 0e       	add	r12, r24
    f596:	d9 1e       	adc	r13, r25
    f598:	ea 1e       	adc	r14, r26
    f59a:	fb 1e       	adc	r15, r27
    f59c:	b7 01       	movw	r22, r14
    f59e:	a6 01       	movw	r20, r12
    f5a0:	ce 01       	movw	r24, r28
    f5a2:	0e 94 77 60 	call	0xc0ee	; 0xc0ee <f_lseek>
    f5a6:	00 97       	sbiw	r24, 0x00	; 0
    f5a8:	79 f0       	breq	.+30     	; 0xf5c8 <lseek+0x80>
    f5aa:	84 31       	cpi	r24, 0x14	; 20
    f5ac:	91 05       	cpc	r25, r1
    f5ae:	58 f5       	brcc	.+86     	; 0xf606 <lseek+0xbe>
    f5b0:	fc 01       	movw	r30, r24
    f5b2:	ea 55       	subi	r30, 0x5A	; 90
    f5b4:	f4 4f       	sbci	r31, 0xF4	; 244
    f5b6:	80 81       	ld	r24, Z
    f5b8:	08 2e       	mov	r0, r24
    f5ba:	00 0c       	add	r0, r0
    f5bc:	99 0b       	sbc	r25, r25
    f5be:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f5c2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f5c6:	13 c0       	rjmp	.+38     	; 0xf5ee <lseek+0xa6>
    f5c8:	68 89       	ldd	r22, Y+16	; 0x10
    f5ca:	79 89       	ldd	r23, Y+17	; 0x11
    f5cc:	8a 89       	ldd	r24, Y+18	; 0x12
    f5ce:	9b 89       	ldd	r25, Y+19	; 0x13
    f5d0:	c6 16       	cp	r12, r22
    f5d2:	d7 06       	cpc	r13, r23
    f5d4:	e8 06       	cpc	r14, r24
    f5d6:	f9 06       	cpc	r15, r25
    f5d8:	c9 f0       	breq	.+50     	; 0xf60c <lseek+0xc4>
    f5da:	8a ea       	ldi	r24, 0xAA	; 170
    f5dc:	9b e0       	ldi	r25, 0x0B	; 11
    f5de:	a0 e0       	ldi	r26, 0x00	; 0
    f5e0:	ed b7       	in	r30, 0x3d	; 61
    f5e2:	fe b7       	in	r31, 0x3e	; 62
    f5e4:	81 83       	std	Z+1, r24	; 0x01
    f5e6:	92 83       	std	Z+2, r25	; 0x02
    f5e8:	a3 83       	std	Z+3, r26	; 0x03
    f5ea:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    f5ee:	6f ef       	ldi	r22, 0xFF	; 255
    f5f0:	7f ef       	ldi	r23, 0xFF	; 255
    f5f2:	cb 01       	movw	r24, r22
    f5f4:	0b c0       	rjmp	.+22     	; 0xf60c <lseek+0xc4>
    f5f6:	01 30       	cpi	r16, 0x01	; 1
    f5f8:	11 05       	cpc	r17, r1
    f5fa:	81 f6       	brne	.-96     	; 0xf59c <lseek+0x54>
    f5fc:	88 89       	ldd	r24, Y+16	; 0x10
    f5fe:	99 89       	ldd	r25, Y+17	; 0x11
    f600:	aa 89       	ldd	r26, Y+18	; 0x12
    f602:	bb 89       	ldd	r27, Y+19	; 0x13
    f604:	c7 cf       	rjmp	.-114    	; 0xf594 <lseek+0x4c>
    f606:	83 e2       	ldi	r24, 0x23	; 35
    f608:	90 e0       	ldi	r25, 0x00	; 0
    f60a:	d9 cf       	rjmp	.-78     	; 0xf5be <lseek+0x76>
    f60c:	cd b7       	in	r28, 0x3d	; 61
    f60e:	de b7       	in	r29, 0x3e	; 62
    f610:	23 96       	adiw	r28, 0x03	; 3
    f612:	ea e0       	ldi	r30, 0x0A	; 10
    f614:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0000f618 <fseek>:
    f618:	cf 92       	push	r12
    f61a:	df 92       	push	r13
    f61c:	ef 92       	push	r14
    f61e:	ff 92       	push	r15
    f620:	cf 93       	push	r28
    f622:	df 93       	push	r29
    f624:	6a 01       	movw	r12, r20
    f626:	7b 01       	movw	r14, r22
    f628:	e9 01       	movw	r28, r18
    f62a:	af db       	rcall	.-2210   	; 0xed8a <fileno>
    f62c:	97 fd       	sbrc	r25, 7
    f62e:	12 c0       	rjmp	.+36     	; 0xf654 <fseek+0x3c>
    f630:	9e 01       	movw	r18, r28
    f632:	b7 01       	movw	r22, r14
    f634:	a6 01       	movw	r20, r12
    f636:	88 df       	rcall	.-240    	; 0xf548 <lseek>
    f638:	21 e0       	ldi	r18, 0x01	; 1
    f63a:	30 e0       	ldi	r19, 0x00	; 0
    f63c:	6f 3f       	cpi	r22, 0xFF	; 255
    f63e:	7f 4f       	sbci	r23, 0xFF	; 255
    f640:	8f 4f       	sbci	r24, 0xFF	; 255
    f642:	9f 4f       	sbci	r25, 0xFF	; 255
    f644:	11 f0       	breq	.+4      	; 0xf64a <fseek+0x32>
    f646:	20 e0       	ldi	r18, 0x00	; 0
    f648:	30 e0       	ldi	r19, 0x00	; 0
    f64a:	88 27       	eor	r24, r24
    f64c:	99 27       	eor	r25, r25
    f64e:	82 1b       	sub	r24, r18
    f650:	93 0b       	sbc	r25, r19
    f652:	02 c0       	rjmp	.+4      	; 0xf658 <fseek+0x40>
    f654:	8f ef       	ldi	r24, 0xFF	; 255
    f656:	9f ef       	ldi	r25, 0xFF	; 255
    f658:	df 91       	pop	r29
    f65a:	cf 91       	pop	r28
    f65c:	ff 90       	pop	r15
    f65e:	ef 90       	pop	r14
    f660:	df 90       	pop	r13
    f662:	cf 90       	pop	r12
    f664:	08 95       	ret

0000f666 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f666:	a2 e0       	ldi	r26, 0x02	; 2
    f668:	b0 e0       	ldi	r27, 0x00	; 0
    f66a:	e9 e3       	ldi	r30, 0x39	; 57
    f66c:	fb e7       	ldi	r31, 0x7B	; 123
    f66e:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
    f672:	5c 01       	movw	r10, r24
    f674:	8b 01       	movw	r16, r22
    f676:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f678:	fb 01       	movw	r30, r22
    f67a:	10 82       	st	Z, r1

    errno = 0;
    f67c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f680:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f684:	9e db       	rcall	.-2244   	; 0xedc2 <fileno_to_stream>
    f686:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f688:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f68c:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f690:	e8 16       	cp	r14, r24
    f692:	f9 06       	cpc	r15, r25
    f694:	c9 f4       	brne	.+50     	; 0xf6c8 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f696:	f7 01       	movw	r30, r14
    f698:	83 81       	ldd	r24, Z+3	; 0x03
    f69a:	80 64       	ori	r24, 0x40	; 64
    f69c:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f69e:	1a 82       	std	Y+2, r1	; 0x02
    f6a0:	19 82       	std	Y+1, r1	; 0x01
    f6a2:	c0 0e       	add	r12, r16
    f6a4:	d1 1e       	adc	r13, r17
        while(count--)
    f6a6:	0c 15       	cp	r16, r12
    f6a8:	1d 05       	cpc	r17, r13
    f6aa:	09 f4       	brne	.+2      	; 0xf6ae <read+0x48>
    f6ac:	3d c0       	rjmp	.+122    	; 0xf728 <read+0xc2>
        {
            ret = fgetc(stream);
    f6ae:	c7 01       	movw	r24, r14
    f6b0:	48 da       	rcall	.-2928   	; 0xeb42 <fgetc>
            if(ret < 0)
    f6b2:	97 fd       	sbrc	r25, 7
    f6b4:	39 c0       	rjmp	.+114    	; 0xf728 <read+0xc2>
                break;

            *ptr++ = ret;
    f6b6:	f8 01       	movw	r30, r16
    f6b8:	81 93       	st	Z+, r24
    f6ba:	8f 01       	movw	r16, r30
            ++size;
    f6bc:	89 81       	ldd	r24, Y+1	; 0x01
    f6be:	9a 81       	ldd	r25, Y+2	; 0x02
    f6c0:	01 96       	adiw	r24, 0x01	; 1
    f6c2:	9a 83       	std	Y+2, r25	; 0x02
    f6c4:	89 83       	std	Y+1, r24	; 0x01
    f6c6:	ef cf       	rjmp	.-34     	; 0xf6a6 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f6c8:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f6cc:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f6d0:	e8 16       	cp	r14, r24
    f6d2:	f9 06       	cpc	r15, r25
    f6d4:	71 f1       	breq	.+92     	; 0xf732 <read+0xcc>
    f6d6:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f6da:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f6de:	e8 16       	cp	r14, r24
    f6e0:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f6e2:	39 f1       	breq	.+78     	; 0xf732 <read+0xcc>
    f6e4:	c5 01       	movw	r24, r10
    f6e6:	00 df       	rcall	.-512    	; 0xf4e8 <fileno_to_fatfs>
    if ( fh == NULL )
    f6e8:	00 97       	sbiw	r24, 0x00	; 0
    f6ea:	19 f4       	brne	.+6      	; 0xf6f2 <read+0x8c>
    {
        errno = EBADF;
    f6ec:	89 e0       	ldi	r24, 0x09	; 9
    f6ee:	90 e0       	ldi	r25, 0x00	; 0
    f6f0:	16 c0       	rjmp	.+44     	; 0xf71e <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f6f2:	9e 01       	movw	r18, r28
    f6f4:	2f 5f       	subi	r18, 0xFF	; 255
    f6f6:	3f 4f       	sbci	r19, 0xFF	; 255
    f6f8:	a6 01       	movw	r20, r12
    f6fa:	b8 01       	movw	r22, r16
    f6fc:	0e 94 6b 5b 	call	0xb6d6	; 0xb6d6 <f_read>
    if(res != FR_OK)
    f700:	00 97       	sbiw	r24, 0x00	; 0
    f702:	91 f0       	breq	.+36     	; 0xf728 <read+0xc2>
    f704:	84 31       	cpi	r24, 0x14	; 20
    f706:	91 05       	cpc	r25, r1
    f708:	40 f4       	brcc	.+16     	; 0xf71a <read+0xb4>
    f70a:	fc 01       	movw	r30, r24
    f70c:	ea 55       	subi	r30, 0x5A	; 90
    f70e:	f4 4f       	sbci	r31, 0xF4	; 244
    f710:	80 81       	ld	r24, Z
    f712:	08 2e       	mov	r0, r24
    f714:	00 0c       	add	r0, r0
    f716:	99 0b       	sbc	r25, r25
    f718:	02 c0       	rjmp	.+4      	; 0xf71e <read+0xb8>
    f71a:	83 e2       	ldi	r24, 0x23	; 35
    f71c:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f71e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f722:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f726:	05 c0       	rjmp	.+10     	; 0xf732 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f728:	69 81       	ldd	r22, Y+1	; 0x01
    f72a:	7a 81       	ldd	r23, Y+2	; 0x02
    f72c:	80 e0       	ldi	r24, 0x00	; 0
    f72e:	90 e0       	ldi	r25, 0x00	; 0
    f730:	03 c0       	rjmp	.+6      	; 0xf738 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f732:	6f ef       	ldi	r22, 0xFF	; 255
    f734:	7f ef       	ldi	r23, 0xFF	; 255
    f736:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f738:	22 96       	adiw	r28, 0x02	; 2
    f73a:	ea e0       	ldi	r30, 0x0A	; 10
    f73c:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0000f740 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f740:	0f 93       	push	r16
    f742:	1f 93       	push	r17
    f744:	cf 93       	push	r28
    f746:	df 93       	push	r29
    f748:	ec 01       	movw	r28, r24
    f74a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f74c:	64 9f       	mul	r22, r20
    f74e:	80 01       	movw	r16, r0
    f750:	65 9f       	mul	r22, r21
    f752:	10 0d       	add	r17, r0
    f754:	74 9f       	mul	r23, r20
    f756:	10 0d       	add	r17, r0
    f758:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f75a:	17 db       	rcall	.-2514   	; 0xed8a <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f75c:	a8 01       	movw	r20, r16
    f75e:	be 01       	movw	r22, r28
    f760:	82 df       	rcall	.-252    	; 0xf666 <read>
    if(ret < 0)
    f762:	97 fd       	sbrc	r25, 7
    f764:	02 c0       	rjmp	.+4      	; 0xf76a <fread+0x2a>
        return(0);

    return((size_t) ret);
    f766:	cb 01       	movw	r24, r22
    f768:	02 c0       	rjmp	.+4      	; 0xf76e <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f76a:	80 e0       	ldi	r24, 0x00	; 0
    f76c:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f76e:	df 91       	pop	r29
    f770:	cf 91       	pop	r28
    f772:	1f 91       	pop	r17
    f774:	0f 91       	pop	r16
    f776:	08 95       	ret

0000f778 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f778:	cf 93       	push	r28
    f77a:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f77c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f780:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f784:	83 30       	cpi	r24, 0x03	; 3
    f786:	91 05       	cpc	r25, r1
    f788:	18 f4       	brcc	.+6      	; 0xf790 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f78a:	89 e0       	ldi	r24, 0x09	; 9
    f78c:	90 e0       	ldi	r25, 0x00	; 0
    f78e:	18 c0       	rjmp	.+48     	; 0xf7c0 <syncfs+0x48>
    f790:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f792:	17 db       	rcall	.-2514   	; 0xedc2 <fileno_to_stream>
    f794:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f796:	93 81       	ldd	r25, Z+3	; 0x03
    f798:	90 64       	ori	r25, 0x40	; 64
    f79a:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f79c:	ce 01       	movw	r24, r28
    f79e:	a4 de       	rcall	.-696    	; 0xf4e8 <fileno_to_fatfs>
    if(fh == NULL)
    f7a0:	00 97       	sbiw	r24, 0x00	; 0
    f7a2:	99 f3       	breq	.-26     	; 0xf78a <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f7a4:	0e 94 4d 5e 	call	0xbc9a	; 0xbc9a <f_sync>
    if (res != FR_OK)
    f7a8:	00 97       	sbiw	r24, 0x00	; 0
    f7aa:	a1 f0       	breq	.+40     	; 0xf7d4 <syncfs+0x5c>
    f7ac:	84 31       	cpi	r24, 0x14	; 20
    f7ae:	91 05       	cpc	r25, r1
    f7b0:	70 f4       	brcc	.+28     	; 0xf7ce <syncfs+0x56>
    f7b2:	fc 01       	movw	r30, r24
    f7b4:	ea 55       	subi	r30, 0x5A	; 90
    f7b6:	f4 4f       	sbci	r31, 0xF4	; 244
    f7b8:	80 81       	ld	r24, Z
    f7ba:	08 2e       	mov	r0, r24
    f7bc:	00 0c       	add	r0, r0
    f7be:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f7c0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f7c4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f7c8:	8f ef       	ldi	r24, 0xFF	; 255
    f7ca:	9f ef       	ldi	r25, 0xFF	; 255
    f7cc:	05 c0       	rjmp	.+10     	; 0xf7d8 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f7ce:	83 e2       	ldi	r24, 0x23	; 35
    f7d0:	90 e0       	ldi	r25, 0x00	; 0
    f7d2:	f6 cf       	rjmp	.-20     	; 0xf7c0 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f7d4:	80 e0       	ldi	r24, 0x00	; 0
    f7d6:	90 e0       	ldi	r25, 0x00	; 0
}
    f7d8:	df 91       	pop	r29
    f7da:	cf 91       	pop	r28
    f7dc:	08 95       	ret

0000f7de <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f7de:	cf 93       	push	r28
    f7e0:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f7e2:	c0 e0       	ldi	r28, 0x00	; 0
    f7e4:	d0 e0       	ldi	r29, 0x00	; 0
    f7e6:	21 96       	adiw	r28, 0x01	; 1
    f7e8:	c0 31       	cpi	r28, 0x10	; 16
    f7ea:	d1 05       	cpc	r29, r1
    f7ec:	51 f0       	breq	.+20     	; 0xf802 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7ee:	c3 30       	cpi	r28, 0x03	; 3
    f7f0:	d1 05       	cpc	r29, r1
    f7f2:	cc f3       	brlt	.-14     	; 0xf7e6 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f7f4:	ce 01       	movw	r24, r28
    f7f6:	78 de       	rcall	.-784    	; 0xf4e8 <fileno_to_fatfs>
        if(fh == NULL)
    f7f8:	89 2b       	or	r24, r25
    f7fa:	a9 f3       	breq	.-22     	; 0xf7e6 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f7fc:	ce 01       	movw	r24, r28
    f7fe:	bc df       	rcall	.-136    	; 0xf778 <syncfs>
    f800:	f2 cf       	rjmp	.-28     	; 0xf7e6 <sync+0x8>
    }
}
    f802:	df 91       	pop	r29
    f804:	cf 91       	pop	r28
    f806:	08 95       	ret

0000f808 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f808:	a2 e0       	ldi	r26, 0x02	; 2
    f80a:	b0 e0       	ldi	r27, 0x00	; 0
    f80c:	ea e0       	ldi	r30, 0x0A	; 10
    f80e:	fc e7       	ldi	r31, 0x7C	; 124
    f810:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
    f814:	8c 01       	movw	r16, r24
    f816:	b6 2e       	mov	r11, r22
    f818:	f7 2e       	mov	r15, r23
    f81a:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f81c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f820:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f824:	ce da       	rcall	.-2660   	; 0xedc2 <fileno_to_stream>
    f826:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f828:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f82c:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f830:	c8 16       	cp	r12, r24
    f832:	d9 06       	cpc	r13, r25
    f834:	39 f0       	breq	.+14     	; 0xf844 <write+0x3c>
    f836:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f83a:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f83e:	c8 16       	cp	r12, r24
    f840:	d9 06       	cpc	r13, r25
    f842:	d1 f4       	brne	.+52     	; 0xf878 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f844:	1a 82       	std	Y+2, r1	; 0x02
    f846:	19 82       	std	Y+1, r1	; 0x01
    f848:	0b 2d       	mov	r16, r11
    f84a:	1f 2d       	mov	r17, r15
    f84c:	78 01       	movw	r14, r16
    f84e:	e8 0c       	add	r14, r8
    f850:	f9 1c       	adc	r15, r9
        while(count--)
    f852:	0e 15       	cp	r16, r14
    f854:	1f 05       	cpc	r17, r15
    f856:	d1 f1       	breq	.+116    	; 0xf8cc <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f858:	f8 01       	movw	r30, r16
    f85a:	a1 90       	ld	r10, Z+
    f85c:	8f 01       	movw	r16, r30
    f85e:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f860:	b6 01       	movw	r22, r12
    f862:	c5 01       	movw	r24, r10
    f864:	c4 d9       	rcall	.-3192   	; 0xebee <fputc>
            if(c != ret)
    f866:	a8 16       	cp	r10, r24
    f868:	b9 06       	cpc	r11, r25
    f86a:	81 f5       	brne	.+96     	; 0xf8cc <write+0xc4>
                break;

            ++size;
    f86c:	89 81       	ldd	r24, Y+1	; 0x01
    f86e:	9a 81       	ldd	r25, Y+2	; 0x02
    f870:	01 96       	adiw	r24, 0x01	; 1
    f872:	9a 83       	std	Y+2, r25	; 0x02
    f874:	89 83       	std	Y+1, r24	; 0x01
    f876:	ed cf       	rjmp	.-38     	; 0xf852 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f878:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f87c:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f880:	c8 16       	cp	r12, r24
    f882:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f884:	41 f1       	breq	.+80     	; 0xf8d6 <write+0xce>
    f886:	c8 01       	movw	r24, r16
    f888:	2f de       	rcall	.-930    	; 0xf4e8 <fileno_to_fatfs>
    if ( fh == NULL )
    f88a:	00 97       	sbiw	r24, 0x00	; 0
    f88c:	19 f4       	brne	.+6      	; 0xf894 <write+0x8c>
    {
        errno = EBADF;
    f88e:	89 e0       	ldi	r24, 0x09	; 9
    f890:	90 e0       	ldi	r25, 0x00	; 0
    f892:	17 c0       	rjmp	.+46     	; 0xf8c2 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f894:	9e 01       	movw	r18, r28
    f896:	2f 5f       	subi	r18, 0xFF	; 255
    f898:	3f 4f       	sbci	r19, 0xFF	; 255
    f89a:	a4 01       	movw	r20, r8
    f89c:	6b 2d       	mov	r22, r11
    f89e:	7f 2d       	mov	r23, r15
    f8a0:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <f_write>
    if(res != FR_OK)
    f8a4:	00 97       	sbiw	r24, 0x00	; 0
    f8a6:	91 f0       	breq	.+36     	; 0xf8cc <write+0xc4>
    f8a8:	84 31       	cpi	r24, 0x14	; 20
    f8aa:	91 05       	cpc	r25, r1
    f8ac:	40 f4       	brcc	.+16     	; 0xf8be <write+0xb6>
    f8ae:	fc 01       	movw	r30, r24
    f8b0:	ea 55       	subi	r30, 0x5A	; 90
    f8b2:	f4 4f       	sbci	r31, 0xF4	; 244
    f8b4:	80 81       	ld	r24, Z
    f8b6:	08 2e       	mov	r0, r24
    f8b8:	00 0c       	add	r0, r0
    f8ba:	99 0b       	sbc	r25, r25
    f8bc:	02 c0       	rjmp	.+4      	; 0xf8c2 <write+0xba>
    f8be:	83 e2       	ldi	r24, 0x23	; 35
    f8c0:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f8c2:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f8c6:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f8ca:	05 c0       	rjmp	.+10     	; 0xf8d6 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f8cc:	69 81       	ldd	r22, Y+1	; 0x01
    f8ce:	7a 81       	ldd	r23, Y+2	; 0x02
    f8d0:	80 e0       	ldi	r24, 0x00	; 0
    f8d2:	90 e0       	ldi	r25, 0x00	; 0
    f8d4:	03 c0       	rjmp	.+6      	; 0xf8dc <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f8d6:	6f ef       	ldi	r22, 0xFF	; 255
    f8d8:	7f ef       	ldi	r23, 0xFF	; 255
    f8da:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f8dc:	22 96       	adiw	r28, 0x02	; 2
    f8de:	ec e0       	ldi	r30, 0x0C	; 12
    f8e0:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

0000f8e4 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f8e4:	0f 93       	push	r16
    f8e6:	1f 93       	push	r17
    f8e8:	cf 93       	push	r28
    f8ea:	df 93       	push	r29
    f8ec:	ec 01       	movw	r28, r24
    f8ee:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f8f0:	64 9f       	mul	r22, r20
    f8f2:	80 01       	movw	r16, r0
    f8f4:	65 9f       	mul	r22, r21
    f8f6:	10 0d       	add	r17, r0
    f8f8:	74 9f       	mul	r23, r20
    f8fa:	10 0d       	add	r17, r0
    f8fc:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f8fe:	45 da       	rcall	.-2934   	; 0xed8a <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f900:	a8 01       	movw	r20, r16
    f902:	be 01       	movw	r22, r28
    f904:	81 df       	rcall	.-254    	; 0xf808 <write>

    if(ret < 0)
    f906:	97 fd       	sbrc	r25, 7
    f908:	02 c0       	rjmp	.+4      	; 0xf90e <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f90a:	cb 01       	movw	r24, r22
    f90c:	02 c0       	rjmp	.+4      	; 0xf912 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f90e:	80 e0       	ldi	r24, 0x00	; 0
    f910:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f912:	df 91       	pop	r29
    f914:	cf 91       	pop	r28
    f916:	1f 91       	pop	r17
    f918:	0f 91       	pop	r16
    f91a:	08 95       	ret

0000f91c <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f91c:	0f 93       	push	r16
    f91e:	1f 93       	push	r17
    f920:	cf 93       	push	r28
    f922:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f924:	83 30       	cpi	r24, 0x03	; 3
    f926:	91 05       	cpc	r25, r1
    f928:	48 f4       	brcc	.+18     	; 0xf93c <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f92a:	89 e0       	ldi	r24, 0x09	; 9
    f92c:	90 e0       	ldi	r25, 0x00	; 0
    f92e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f932:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f936:	8f ef       	ldi	r24, 0xFF	; 255
    f938:	9f ef       	ldi	r25, 0xFF	; 255
    f93a:	20 c0       	rjmp	.+64     	; 0xf97c <free_file_descriptor+0x60>
    f93c:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f93e:	41 da       	rcall	.-2942   	; 0xedc2 <fileno_to_stream>
    f940:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f942:	89 2b       	or	r24, r25
    f944:	c1 f3       	breq	.-16     	; 0xf936 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f946:	f8 01       	movw	r30, r16
    f948:	84 85       	ldd	r24, Z+12	; 0x0c
    f94a:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f94c:	00 97       	sbiw	r24, 0x00	; 0
    f94e:	11 f0       	breq	.+4      	; 0xf954 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f950:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f954:	f8 01       	movw	r30, r16
    f956:	80 81       	ld	r24, Z
    f958:	91 81       	ldd	r25, Z+1	; 0x01
    f95a:	00 97       	sbiw	r24, 0x00	; 0
    f95c:	21 f0       	breq	.+8      	; 0xf966 <free_file_descriptor+0x4a>
    f95e:	23 81       	ldd	r18, Z+3	; 0x03
    f960:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f962:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
    }

    __iob[fileno]  = NULL;
    f966:	fe 01       	movw	r30, r28
    f968:	ee 0f       	add	r30, r30
    f96a:	ff 1f       	adc	r31, r31
    f96c:	e1 54       	subi	r30, 0x41	; 65
    f96e:	f3 4e       	sbci	r31, 0xE3	; 227
    f970:	11 82       	std	Z+1, r1	; 0x01
    f972:	10 82       	st	Z, r1
    safefree(stream);
    f974:	c8 01       	movw	r24, r16
    f976:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
    return(fileno);
    f97a:	ce 01       	movw	r24, r28
}
    f97c:	df 91       	pop	r29
    f97e:	cf 91       	pop	r28
    f980:	1f 91       	pop	r17
    f982:	0f 91       	pop	r16
    f984:	08 95       	ret

0000f986 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f986:	0f 93       	push	r16
    f988:	1f 93       	push	r17
    f98a:	cf 93       	push	r28
    f98c:	df 93       	push	r29
    f98e:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f990:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f994:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f998:	14 da       	rcall	.-3032   	; 0xedc2 <fileno_to_stream>
    if(stream == NULL)
    f99a:	89 2b       	or	r24, r25
    f99c:	d9 f0       	breq	.+54     	; 0xf9d4 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f99e:	c8 01       	movw	r24, r16
    f9a0:	a3 dd       	rcall	.-1210   	; 0xf4e8 <fileno_to_fatfs>
    if(fh == NULL)
    f9a2:	00 97       	sbiw	r24, 0x00	; 0
    f9a4:	b9 f0       	breq	.+46     	; 0xf9d4 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f9a6:	0e 94 cd 5e 	call	0xbd9a	; 0xbd9a <f_close>
    free_file_descriptor(fileno);
    f9aa:	ec 01       	movw	r28, r24
    f9ac:	c8 01       	movw	r24, r16
    f9ae:	b6 df       	rcall	.-148    	; 0xf91c <free_file_descriptor>
    if (res != FR_OK)
    f9b0:	20 97       	sbiw	r28, 0x00	; 0
    f9b2:	99 f0       	breq	.+38     	; 0xf9da <close+0x54>
    f9b4:	c4 31       	cpi	r28, 0x14	; 20
    f9b6:	d1 05       	cpc	r29, r1
    f9b8:	38 f4       	brcc	.+14     	; 0xf9c8 <close+0x42>
    f9ba:	ca 55       	subi	r28, 0x5A	; 90
    f9bc:	d4 4f       	sbci	r29, 0xF4	; 244
    f9be:	88 81       	ld	r24, Y
    f9c0:	08 2e       	mov	r0, r24
    f9c2:	00 0c       	add	r0, r0
    f9c4:	99 0b       	sbc	r25, r25
    f9c6:	02 c0       	rjmp	.+4      	; 0xf9cc <close+0x46>
    f9c8:	83 e2       	ldi	r24, 0x23	; 35
    f9ca:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f9cc:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f9d0:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f9d4:	8f ef       	ldi	r24, 0xFF	; 255
    f9d6:	9f ef       	ldi	r25, 0xFF	; 255
    f9d8:	02 c0       	rjmp	.+4      	; 0xf9de <close+0x58>
    }
    return(0);
    f9da:	80 e0       	ldi	r24, 0x00	; 0
    f9dc:	90 e0       	ldi	r25, 0x00	; 0
}
    f9de:	df 91       	pop	r29
    f9e0:	cf 91       	pop	r28
    f9e2:	1f 91       	pop	r17
    f9e4:	0f 91       	pop	r16
    f9e6:	08 95       	ret

0000f9e8 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f9e8:	d0 d9       	rcall	.-3168   	; 0xed8a <fileno>
    if(fn < 0)
    f9ea:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f9ec:	02 c0       	rjmp	.+4      	; 0xf9f2 <fclose+0xa>
    f9ee:	cb cf       	rjmp	.-106    	; 0xf986 <close>
    f9f0:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f9f2:	8f ef       	ldi	r24, 0xFF	; 255
    f9f4:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f9f6:	08 95       	ret

0000f9f8 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f9f8:	0f 93       	push	r16
    f9fa:	1f 93       	push	r17
    f9fc:	cf 93       	push	r28
    f9fe:	df 93       	push	r29
    fa00:	ef eb       	ldi	r30, 0xBF	; 191
    fa02:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fa04:	c0 e0       	ldi	r28, 0x00	; 0
    fa06:	d0 e0       	ldi	r29, 0x00	; 0
    fa08:	21 96       	adiw	r28, 0x01	; 1
    fa0a:	c0 31       	cpi	r28, 0x10	; 16
    fa0c:	d1 05       	cpc	r29, r1
    fa0e:	49 f0       	breq	.+18     	; 0xfa22 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa10:	c3 30       	cpi	r28, 0x03	; 3
    fa12:	d1 05       	cpc	r29, r1
    fa14:	24 f0       	brlt	.+8      	; 0xfa1e <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    fa16:	82 81       	ldd	r24, Z+2	; 0x02
    fa18:	93 81       	ldd	r25, Z+3	; 0x03
    fa1a:	89 2b       	or	r24, r25
    fa1c:	59 f0       	breq	.+22     	; 0xfa34 <new_file_descriptor+0x3c>
    fa1e:	32 96       	adiw	r30, 0x02	; 2
    fa20:	f3 cf       	rjmp	.-26     	; 0xfa08 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    fa22:	87 e1       	ldi	r24, 0x17	; 23
    fa24:	90 e0       	ldi	r25, 0x00	; 0
    fa26:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    fa2a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    return(-1);
    fa2e:	8f ef       	ldi	r24, 0xFF	; 255
    fa30:	9f ef       	ldi	r25, 0xFF	; 255
    fa32:	22 c0       	rjmp	.+68     	; 0xfa78 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    fa34:	61 e0       	ldi	r22, 0x01	; 1
    fa36:	70 e0       	ldi	r23, 0x00	; 0
    fa38:	8e e0       	ldi	r24, 0x0E	; 14
    fa3a:	90 e0       	ldi	r25, 0x00	; 0
    fa3c:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
    fa40:	8c 01       	movw	r16, r24
            if(stream == NULL)
    fa42:	89 2b       	or	r24, r25
    fa44:	59 f0       	breq	.+22     	; 0xfa5c <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    fa46:	61 e0       	ldi	r22, 0x01	; 1
    fa48:	70 e0       	ldi	r23, 0x00	; 0
    fa4a:	84 e2       	ldi	r24, 0x24	; 36
    fa4c:	92 e0       	ldi	r25, 0x02	; 2
    fa4e:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
            if(fh == NULL)
    fa52:	00 97       	sbiw	r24, 0x00	; 0
    fa54:	31 f4       	brne	.+12     	; 0xfa62 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    fa56:	c8 01       	movw	r24, r16
    fa58:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
                errno = ENOMEM;
    fa5c:	8c e0       	ldi	r24, 0x0C	; 12
    fa5e:	90 e0       	ldi	r25, 0x00	; 0
    fa60:	e2 cf       	rjmp	.-60     	; 0xfa26 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    fa62:	fe 01       	movw	r30, r28
    fa64:	ee 0f       	add	r30, r30
    fa66:	ff 1f       	adc	r31, r31
    fa68:	e1 54       	subi	r30, 0x41	; 65
    fa6a:	f3 4e       	sbci	r31, 0xE3	; 227
    fa6c:	11 83       	std	Z+1, r17	; 0x01
    fa6e:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fa70:	f8 01       	movw	r30, r16
    fa72:	95 87       	std	Z+13, r25	; 0x0d
    fa74:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fa76:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    fa78:	df 91       	pop	r29
    fa7a:	cf 91       	pop	r28
    fa7c:	1f 91       	pop	r17
    fa7e:	0f 91       	pop	r16
    fa80:	08 95       	ret

0000fa82 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fa82:	a0 e0       	ldi	r26, 0x00	; 0
    fa84:	b0 e0       	ldi	r27, 0x00	; 0
    fa86:	e7 e4       	ldi	r30, 0x47	; 71
    fa88:	fd e7       	ldi	r31, 0x7D	; 125
    fa8a:	0c 94 f0 e6 	jmp	0x1cde0	; 0x1cde0 <__prologue_saves__+0x8>
    fa8e:	5c 01       	movw	r10, r24
    fa90:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fa92:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    fa96:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    fa9a:	7b 01       	movw	r14, r22
    fa9c:	83 e0       	ldi	r24, 0x03	; 3
    fa9e:	e8 22       	and	r14, r24
    faa0:	ff 24       	eor	r15, r15
    faa2:	e2 e0       	ldi	r30, 0x02	; 2
    faa4:	ee 16       	cp	r14, r30
    faa6:	f1 04       	cpc	r15, r1
    faa8:	31 f0       	breq	.+12     	; 0xfab6 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    faaa:	e1 14       	cp	r14, r1
    faac:	f1 04       	cpc	r15, r1
    faae:	31 f0       	breq	.+12     	; 0xfabc <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    fab0:	02 e0       	ldi	r16, 0x02	; 2
    fab2:	10 e0       	ldi	r17, 0x00	; 0
    fab4:	05 c0       	rjmp	.+10     	; 0xfac0 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    fab6:	03 e0       	ldi	r16, 0x03	; 3
    fab8:	10 e0       	ldi	r17, 0x00	; 0
    faba:	02 c0       	rjmp	.+4      	; 0xfac0 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fabc:	01 e0       	ldi	r16, 0x01	; 1
    fabe:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fac0:	c6 fe       	sbrs	r12, 6
    fac2:	05 c0       	rjmp	.+10     	; 0xface <open+0x4c>
    {
        if(flags & O_TRUNC)
    fac4:	d1 fe       	sbrs	r13, 1
    fac6:	02 c0       	rjmp	.+4      	; 0xfacc <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fac8:	08 60       	ori	r16, 0x08	; 8
    faca:	01 c0       	rjmp	.+2      	; 0xface <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    facc:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    face:	94 df       	rcall	.-216    	; 0xf9f8 <new_file_descriptor>
    fad0:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fad2:	77 d9       	rcall	.-3346   	; 0xedc2 <fileno_to_stream>
    fad4:	ec 01       	movw	r28, r24
    fad6:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fad8:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fada:	09 f4       	brne	.+2      	; 0xfade <open+0x5c>
    fadc:	48 c0       	rjmp	.+144    	; 0xfb6e <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fade:	04 dd       	rcall	.-1528   	; 0xf4e8 <fileno_to_fatfs>
    fae0:	4c 01       	movw	r8, r24
    fae2:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    fae4:	59 f4       	brne	.+22     	; 0xfafc <open+0x7a>
    {
        free_file_descriptor(fileno);
    fae6:	c3 01       	movw	r24, r6
    fae8:	19 df       	rcall	.-462    	; 0xf91c <free_file_descriptor>
    faea:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    faec:	90 e0       	ldi	r25, 0x00	; 0
    faee:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    faf2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    faf6:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    faf8:	9f ef       	ldi	r25, 0xFF	; 255
    fafa:	5d c0       	rjmp	.+186    	; 0xfbb6 <open+0x134>
    fafc:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fafe:	b5 01       	movw	r22, r10
    fb00:	0e 94 b3 59 	call	0xb366	; 0xb366 <f_open>
    fb04:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fb06:	91 f0       	breq	.+36     	; 0xfb2c <open+0xaa>
    fb08:	84 31       	cpi	r24, 0x14	; 20
    fb0a:	91 05       	cpc	r25, r1
    fb0c:	40 f4       	brcc	.+16     	; 0xfb1e <open+0x9c>
    fb0e:	fc 01       	movw	r30, r24
    fb10:	ea 55       	subi	r30, 0x5A	; 90
    fb12:	f4 4f       	sbci	r31, 0xF4	; 244
    fb14:	80 81       	ld	r24, Z
    fb16:	08 2e       	mov	r0, r24
    fb18:	00 0c       	add	r0, r0
    fb1a:	99 0b       	sbc	r25, r25
    fb1c:	02 c0       	rjmp	.+4      	; 0xfb22 <open+0xa0>
    fb1e:	83 e2       	ldi	r24, 0x23	; 35
    fb20:	90 e0       	ldi	r25, 0x00	; 0
    fb22:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fb26:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fb2a:	20 c0       	rjmp	.+64     	; 0xfb6c <open+0xea>
    fb2c:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fb2e:	21 c0       	rjmp	.+66     	; 0xfb72 <open+0xf0>
    fb30:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fb32:	42 85       	ldd	r20, Z+10	; 0x0a
    fb34:	53 85       	ldd	r21, Z+11	; 0x0b
    fb36:	64 85       	ldd	r22, Z+12	; 0x0c
    fb38:	75 85       	ldd	r23, Z+13	; 0x0d
    fb3a:	c4 01       	movw	r24, r8
    fb3c:	0e 94 77 60 	call	0xc0ee	; 0xc0ee <f_lseek>
    fb40:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fb42:	b9 f0       	breq	.+46     	; 0xfb72 <open+0xf0>
    fb44:	84 31       	cpi	r24, 0x14	; 20
    fb46:	91 05       	cpc	r25, r1
    fb48:	40 f4       	brcc	.+16     	; 0xfb5a <open+0xd8>
    fb4a:	fc 01       	movw	r30, r24
    fb4c:	ea 55       	subi	r30, 0x5A	; 90
    fb4e:	f4 4f       	sbci	r31, 0xF4	; 244
    fb50:	80 81       	ld	r24, Z
    fb52:	08 2e       	mov	r0, r24
    fb54:	00 0c       	add	r0, r0
    fb56:	99 0b       	sbc	r25, r25
    fb58:	02 c0       	rjmp	.+4      	; 0xfb5e <open+0xdc>
    fb5a:	83 e2       	ldi	r24, 0x23	; 35
    fb5c:	90 e0       	ldi	r25, 0x00	; 0
    fb5e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fb62:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    fb66:	c4 01       	movw	r24, r8
            f_close(fh);
    fb68:	0e 94 cd 5e 	call	0xbd9a	; 0xbd9a <f_close>
            free_file_descriptor(fileno);
    fb6c:	c3 01       	movw	r24, r6
    fb6e:	d6 de       	rcall	.-596    	; 0xf91c <free_file_descriptor>
    fb70:	c2 cf       	rjmp	.-124    	; 0xfaf6 <open+0x74>
    fb72:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fb74:	ef 16       	cp	r14, r31
    fb76:	f1 04       	cpc	r15, r1
    fb78:	51 f4       	brne	.+20     	; 0xfb8e <open+0x10c>
    fb7a:	86 e5       	ldi	r24, 0x56	; 86
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fb7c:	95 e7       	ldi	r25, 0x75	; 117
    fb7e:	99 87       	std	Y+9, r25	; 0x09
    fb80:	88 87       	std	Y+8, r24	; 0x08
    fb82:	83 ed       	ldi	r24, 0xD3	; 211
        stream->get = fatfs_getc;
    fb84:	94 e7       	ldi	r25, 0x74	; 116
    fb86:	9b 87       	std	Y+11, r25	; 0x0b
    fb88:	8a 87       	std	Y+10, r24	; 0x0a
    fb8a:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fb8c:	12 c0       	rjmp	.+36     	; 0xfbb2 <open+0x130>
    fb8e:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fb90:	f1 04       	cpc	r15, r1
    fb92:	41 f4       	brne	.+16     	; 0xfba4 <open+0x122>
    fb94:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fb96:	18 86       	std	Y+8, r1	; 0x08
    fb98:	83 ed       	ldi	r24, 0xD3	; 211
        stream->get = fatfs_getc;
    fb9a:	94 e7       	ldi	r25, 0x74	; 116
    fb9c:	9b 87       	std	Y+11, r25	; 0x0b
    fb9e:	8a 87       	std	Y+10, r24	; 0x0a
    fba0:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fba2:	07 c0       	rjmp	.+14     	; 0xfbb2 <open+0x130>
    fba4:	86 e5       	ldi	r24, 0x56	; 86
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fba6:	95 e7       	ldi	r25, 0x75	; 117
    fba8:	99 87       	std	Y+9, r25	; 0x09
    fbaa:	88 87       	std	Y+8, r24	; 0x08
    fbac:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fbae:	1a 86       	std	Y+10, r1	; 0x0a
    fbb0:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fbb2:	8b 83       	std	Y+3, r24	; 0x03
    fbb4:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fbb6:	cd b7       	in	r28, 0x3d	; 61
}
    fbb8:	de b7       	in	r29, 0x3e	; 62
    fbba:	ee e0       	ldi	r30, 0x0E	; 14
    fbbc:	0c 94 0c e7 	jmp	0x1ce18	; 0x1ce18 <__epilogue_restores__+0x8>

0000fbc0 <posix_fopen_modes_to_open>:
    fbc0:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fbc2:	df 93       	push	r29
    fbc4:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fbc6:	62 e4       	ldi	r22, 0x42	; 66
    fbc8:	73 e0       	ldi	r23, 0x03	; 3
    fbca:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fbce:	00 97       	sbiw	r24, 0x00	; 0
    fbd0:	09 f4       	brne	.+2      	; 0xfbd4 <posix_fopen_modes_to_open+0x14>
    fbd2:	5d c0       	rjmp	.+186    	; 0xfc8e <posix_fopen_modes_to_open+0xce>
    fbd4:	6e ef       	ldi	r22, 0xFE	; 254
    fbd6:	78 e0       	ldi	r23, 0x08	; 8
    fbd8:	ce 01       	movw	r24, r28
    fbda:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fbde:	00 97       	sbiw	r24, 0x00	; 0
    fbe0:	09 f4       	brne	.+2      	; 0xfbe4 <posix_fopen_modes_to_open+0x24>
    fbe2:	55 c0       	rjmp	.+170    	; 0xfc8e <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fbe4:	61 e0       	ldi	r22, 0x01	; 1
    fbe6:	79 e0       	ldi	r23, 0x09	; 9
    fbe8:	ce 01       	movw	r24, r28
    fbea:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fbee:	89 2b       	or	r24, r25
    fbf0:	09 f4       	brne	.+2      	; 0xfbf4 <posix_fopen_modes_to_open+0x34>
    fbf2:	42 c0       	rjmp	.+132    	; 0xfc78 <posix_fopen_modes_to_open+0xb8>
    fbf4:	64 e0       	ldi	r22, 0x04	; 4
    fbf6:	79 e0       	ldi	r23, 0x09	; 9
    fbf8:	ce 01       	movw	r24, r28
    fbfa:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fbfe:	89 2b       	or	r24, r25
    fc00:	d9 f1       	breq	.+118    	; 0xfc78 <posix_fopen_modes_to_open+0xb8>
    fc02:	68 e0       	ldi	r22, 0x08	; 8
    fc04:	79 e0       	ldi	r23, 0x09	; 9
    fc06:	ce 01       	movw	r24, r28
    fc08:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc0c:	89 2b       	or	r24, r25
    fc0e:	a1 f1       	breq	.+104    	; 0xfc78 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fc10:	6d eb       	ldi	r22, 0xBD	; 189
    fc12:	7a e0       	ldi	r23, 0x0A	; 10
    fc14:	ce 01       	movw	r24, r28
    fc16:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc1a:	89 2b       	or	r24, r25
    fc1c:	81 f1       	breq	.+96     	; 0xfc7e <posix_fopen_modes_to_open+0xbe>
    fc1e:	6c e0       	ldi	r22, 0x0C	; 12
    fc20:	79 e0       	ldi	r23, 0x09	; 9
    fc22:	ce 01       	movw	r24, r28
    fc24:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc28:	89 2b       	or	r24, r25
    fc2a:	49 f1       	breq	.+82     	; 0xfc7e <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fc2c:	6f e0       	ldi	r22, 0x0F	; 15
    fc2e:	79 e0       	ldi	r23, 0x09	; 9
    fc30:	ce 01       	movw	r24, r28
    fc32:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc36:	89 2b       	or	r24, r25
    fc38:	29 f1       	breq	.+74     	; 0xfc84 <posix_fopen_modes_to_open+0xc4>
    fc3a:	62 e1       	ldi	r22, 0x12	; 18
    fc3c:	79 e0       	ldi	r23, 0x09	; 9
    fc3e:	ce 01       	movw	r24, r28
    fc40:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc44:	89 2b       	or	r24, r25
    fc46:	f1 f0       	breq	.+60     	; 0xfc84 <posix_fopen_modes_to_open+0xc4>
    fc48:	66 e1       	ldi	r22, 0x16	; 22
    fc4a:	79 e0       	ldi	r23, 0x09	; 9
    fc4c:	ce 01       	movw	r24, r28
    fc4e:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc52:	89 2b       	or	r24, r25
    fc54:	b9 f0       	breq	.+46     	; 0xfc84 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fc56:	62 e2       	ldi	r22, 0x22	; 34
    fc58:	73 e1       	ldi	r23, 0x13	; 19
    fc5a:	ce 01       	movw	r24, r28
    fc5c:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc60:	89 2b       	or	r24, r25
    fc62:	99 f0       	breq	.+38     	; 0xfc8a <posix_fopen_modes_to_open+0xca>
    fc64:	6a e1       	ldi	r22, 0x1A	; 26
    fc66:	79 e0       	ldi	r23, 0x09	; 9
    fc68:	ce 01       	movw	r24, r28
    fc6a:	0e 94 a6 31 	call	0x634c	; 0x634c <strcmp>
    fc6e:	89 2b       	or	r24, r25
    fc70:	61 f0       	breq	.+24     	; 0xfc8a <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fc72:	8f ef       	ldi	r24, 0xFF	; 255
    fc74:	9f ef       	ldi	r25, 0xFF	; 255
    fc76:	0b c0       	rjmp	.+22     	; 0xfc8e <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fc78:	82 e0       	ldi	r24, 0x02	; 2
    fc7a:	92 e0       	ldi	r25, 0x02	; 2
    fc7c:	08 c0       	rjmp	.+16     	; 0xfc8e <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fc7e:	81 e4       	ldi	r24, 0x41	; 65
    fc80:	92 e0       	ldi	r25, 0x02	; 2
    fc82:	05 c0       	rjmp	.+10     	; 0xfc8e <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fc84:	82 e4       	ldi	r24, 0x42	; 66
    fc86:	92 e0       	ldi	r25, 0x02	; 2
    fc88:	02 c0       	rjmp	.+4      	; 0xfc8e <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fc8a:	81 e4       	ldi	r24, 0x41	; 65
    fc8c:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fc8e:	df 91       	pop	r29
    fc90:	cf 91       	pop	r28
    fc92:	08 95       	ret

0000fc94 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fc94:	cf 93       	push	r28
    fc96:	df 93       	push	r29
    fc98:	ec 01       	movw	r28, r24
    fc9a:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fc9c:	91 df       	rcall	.-222    	; 0xfbc0 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fc9e:	bc 01       	movw	r22, r24
    fca0:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fca2:	ef de       	rcall	.-546    	; 0xfa82 <open>
    fca4:	8e d8       	rcall	.-3812   	; 0xedc2 <fileno_to_stream>
}
    fca6:	df 91       	pop	r29
    fca8:	cf 91       	pop	r28
    fcaa:	08 95       	ret

0000fcac <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fcac:	a8 e0       	ldi	r26, 0x08	; 8
    fcae:	b0 e0       	ldi	r27, 0x00	; 0
    fcb0:	ec e5       	ldi	r30, 0x5C	; 92
    fcb2:	fe e7       	ldi	r31, 0x7E	; 126
    fcb4:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fcb8:	89 e4       	ldi	r24, 0x49	; 73
    fcba:	96 e7       	ldi	r25, 0x76	; 118
    fcbc:	9a 83       	std	Y+2, r25	; 0x02
    fcbe:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fcc0:	18 86       	std	Y+8, r1	; 0x08
    fcc2:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fcc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    fcc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    fcc8:	9c 83       	std	Y+4, r25	; 0x04
    fcca:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fccc:	4f 85       	ldd	r20, Y+15	; 0x0f
    fcce:	58 89       	ldd	r21, Y+16	; 0x10
    fcd0:	60 e8       	ldi	r22, 0x80	; 128
    fcd2:	9e 01       	movw	r18, r28
    fcd4:	2f 5e       	subi	r18, 0xEF	; 239
    fcd6:	3f 4f       	sbci	r19, 0xFF	; 255
    fcd8:	ce 01       	movw	r24, r28
    fcda:	01 96       	adiw	r24, 0x01	; 1
    fcdc:	0e 94 66 42 	call	0x84cc	; 0x84cc <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fce0:	8f 81       	ldd	r24, Y+7	; 0x07
    fce2:	98 85       	ldd	r25, Y+8	; 0x08
    fce4:	28 96       	adiw	r28, 0x08	; 8
    fce6:	e2 e0       	ldi	r30, 0x02	; 2
    fce8:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000fcec <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fcec:	cf 93       	push	r28
    fcee:	df 93       	push	r29
    fcf0:	00 d0       	rcall	.+0      	; 0xfcf2 <posix_help+0x6>
    fcf2:	1f 92       	push	r1
    fcf4:	ec 01       	movw	r28, r24
    fcf6:	84 e7       	ldi	r24, 0x74	; 116
    fcf8:	9e e0       	ldi	r25, 0x0E	; 14
    fcfa:	a0 e0       	ldi	r26, 0x00	; 0
    fcfc:	ed b7       	in	r30, 0x3d	; 61
    fcfe:	fe b7       	in	r31, 0x3e	; 62
    fd00:	81 83       	std	Z+1, r24	; 0x01
    fd02:	92 83       	std	Z+2, r25	; 0x02
    fd04:	a3 83       	std	Z+3, r26	; 0x03
    fd06:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fd0a:	cd 2b       	or	r28, r29
    fd0c:	51 f0       	breq	.+20     	; 0xfd22 <posix_help+0x36>
    fd0e:	8e ea       	ldi	r24, 0xAE	; 174
    fd10:	9d e0       	ldi	r25, 0x0D	; 13
    fd12:	a0 e0       	ldi	r26, 0x00	; 0
    fd14:	ed b7       	in	r30, 0x3d	; 61
    fd16:	fe b7       	in	r31, 0x3e	; 62
    fd18:	81 83       	std	Z+1, r24	; 0x01
    fd1a:	92 83       	std	Z+2, r25	; 0x02
    fd1c:	a3 83       	std	Z+3, r26	; 0x03
    fd1e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fd22:	cd b7       	in	r28, 0x3d	; 61
    fd24:	de b7       	in	r29, 0x3e	; 62
    fd26:	23 96       	adiw	r28, 0x03	; 3
    fd28:	e2 e0       	ldi	r30, 0x02	; 2
    fd2a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000fd2e <copy>:
    fd2e:	4f 92       	push	r4
    fd30:	5f 92       	push	r5
    fd32:	6f 92       	push	r6
    fd34:	8f 92       	push	r8
    fd36:	9f 92       	push	r9
    fd38:	af 92       	push	r10
    fd3a:	bf 92       	push	r11
    fd3c:	cf 92       	push	r12
    fd3e:	df 92       	push	r13
    fd40:	ef 92       	push	r14
    fd42:	ff 92       	push	r15
    fd44:	0f 93       	push	r16
    fd46:	1f 93       	push	r17
    fd48:	cf 93       	push	r28
    fd4a:	df 93       	push	r29
    fd4c:	ad b7       	in	r26, 0x3d	; 61
    fd4e:	be b7       	in	r27, 0x3e	; 62
    fd50:	17 97       	sbiw	r26, 0x07	; 7
    fd52:	0f b6       	in	r0, 0x3f	; 63
    fd54:	f8 94       	cli
    fd56:	be bf       	out	0x3e, r27	; 62
    fd58:	0f be       	out	0x3f, r0	; 63
    fd5a:	ad bf       	out	0x3d, r26	; 61
    fd5c:	8c 01       	movw	r16, r24
    fd5e:	eb 01       	movw	r28, r22
    fd60:	ed b7       	in	r30, 0x3d	; 61
    fd62:	fe b7       	in	r31, 0x3e	; 62
    fd64:	95 83       	std	Z+5, r25	; 0x05
    fd66:	84 83       	std	Z+4, r24	; 0x04
    fd68:	8b e0       	ldi	r24, 0x0B	; 11
    fd6a:	9d e0       	ldi	r25, 0x0D	; 13
    fd6c:	a0 e0       	ldi	r26, 0x00	; 0
    fd6e:	81 83       	std	Z+1, r24	; 0x01
    fd70:	92 83       	std	Z+2, r25	; 0x02
    fd72:	a3 83       	std	Z+3, r26	; 0x03
    fd74:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fd78:	6e ef       	ldi	r22, 0xFE	; 254
    fd7a:	78 e0       	ldi	r23, 0x08	; 8
    fd7c:	c8 01       	movw	r24, r16
    fd7e:	8a df       	rcall	.-236    	; 0xfc94 <fopen>
    fd80:	7c 01       	movw	r14, r24
    fd82:	ed b7       	in	r30, 0x3d	; 61
    fd84:	fe b7       	in	r31, 0x3e	; 62
    fd86:	89 2b       	or	r24, r25
    fd88:	59 f4       	brne	.+22     	; 0xfda0 <copy+0x72>
    fd8a:	15 83       	std	Z+5, r17	; 0x05
    fd8c:	04 83       	std	Z+4, r16	; 0x04
    fd8e:	8b ef       	ldi	r24, 0xFB	; 251
    fd90:	9c e0       	ldi	r25, 0x0C	; 12
    fd92:	a0 e0       	ldi	r26, 0x00	; 0
    fd94:	81 83       	std	Z+1, r24	; 0x01
    fd96:	92 83       	std	Z+2, r25	; 0x02
    fd98:	a3 83       	std	Z+3, r26	; 0x03
    fd9a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fd9e:	20 c0       	rjmp	.+64     	; 0xfde0 <copy+0xb2>
    fda0:	d5 83       	std	Z+5, r29	; 0x05
    fda2:	c4 83       	std	Z+4, r28	; 0x04
    fda4:	8e ee       	ldi	r24, 0xEE	; 238
    fda6:	9c e0       	ldi	r25, 0x0C	; 12
    fda8:	a0 e0       	ldi	r26, 0x00	; 0
    fdaa:	81 83       	std	Z+1, r24	; 0x01
    fdac:	92 83       	std	Z+2, r25	; 0x02
    fdae:	a3 83       	std	Z+3, r26	; 0x03
    fdb0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fdb4:	6c e0       	ldi	r22, 0x0C	; 12
    fdb6:	79 e0       	ldi	r23, 0x09	; 9
    fdb8:	ce 01       	movw	r24, r28
    fdba:	6c df       	rcall	.-296    	; 0xfc94 <fopen>
    fdbc:	8c 01       	movw	r16, r24
    fdbe:	89 2b       	or	r24, r25
    fdc0:	a1 f4       	brne	.+40     	; 0xfdea <copy+0xbc>
    fdc2:	ed b7       	in	r30, 0x3d	; 61
    fdc4:	fe b7       	in	r31, 0x3e	; 62
    fdc6:	d5 83       	std	Z+5, r29	; 0x05
    fdc8:	c4 83       	std	Z+4, r28	; 0x04
    fdca:	8e ed       	ldi	r24, 0xDE	; 222
    fdcc:	9c e0       	ldi	r25, 0x0C	; 12
    fdce:	a0 e0       	ldi	r26, 0x00	; 0
    fdd0:	81 83       	std	Z+1, r24	; 0x01
    fdd2:	92 83       	std	Z+2, r25	; 0x02
    fdd4:	a3 83       	std	Z+3, r26	; 0x03
    fdd6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fdda:	80 e0       	ldi	r24, 0x00	; 0
    fddc:	90 e0       	ldi	r25, 0x00	; 0
    fdde:	04 de       	rcall	.-1016   	; 0xf9e8 <fclose>
    fde0:	6f ef       	ldi	r22, 0xFF	; 255
    fde2:	7f ef       	ldi	r23, 0xFF	; 255
    fde4:	8f ef       	ldi	r24, 0xFF	; 255
    fde6:	9f ef       	ldi	r25, 0xFF	; 255
    fde8:	68 c0       	rjmp	.+208    	; 0xfeba <copy+0x18c>
    fdea:	61 e0       	ldi	r22, 0x01	; 1
    fdec:	70 e0       	ldi	r23, 0x00	; 0
    fdee:	80 e0       	ldi	r24, 0x00	; 0
    fdf0:	92 e0       	ldi	r25, 0x02	; 2
    fdf2:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
    fdf6:	6c 01       	movw	r12, r24
    fdf8:	89 2b       	or	r24, r25
    fdfa:	21 f4       	brne	.+8      	; 0xfe04 <copy+0xd6>
    fdfc:	c7 01       	movw	r24, r14
    fdfe:	f4 dd       	rcall	.-1048   	; 0xf9e8 <fclose>
    fe00:	c8 01       	movw	r24, r16
    fe02:	ed cf       	rjmp	.-38     	; 0xfdde <copy+0xb0>
    fe04:	81 ed       	ldi	r24, 0xD1	; 209
    fe06:	9c e0       	ldi	r25, 0x0C	; 12
    fe08:	a0 e0       	ldi	r26, 0x00	; 0
    fe0a:	ed b7       	in	r30, 0x3d	; 61
    fe0c:	fe b7       	in	r31, 0x3e	; 62
    fe0e:	81 83       	std	Z+1, r24	; 0x01
    fe10:	92 83       	std	Z+2, r25	; 0x02
    fe12:	a3 83       	std	Z+3, r26	; 0x03
    fe14:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fe18:	81 2c       	mov	r8, r1
    fe1a:	91 2c       	mov	r9, r1
    fe1c:	54 01       	movw	r10, r8
    fe1e:	85 eb       	ldi	r24, 0xB5	; 181
    fe20:	9c e0       	ldi	r25, 0x0C	; 12
    fe22:	2c 01       	movw	r4, r24
    fe24:	61 2c       	mov	r6, r1
    fe26:	97 01       	movw	r18, r14
    fe28:	40 e0       	ldi	r20, 0x00	; 0
    fe2a:	52 e0       	ldi	r21, 0x02	; 2
    fe2c:	61 e0       	ldi	r22, 0x01	; 1
    fe2e:	70 e0       	ldi	r23, 0x00	; 0
    fe30:	c6 01       	movw	r24, r12
    fe32:	86 dc       	rcall	.-1780   	; 0xf740 <fread>
    fe34:	ec 01       	movw	r28, r24
    fe36:	18 16       	cp	r1, r24
    fe38:	19 06       	cpc	r1, r25
    fe3a:	44 f5       	brge	.+80     	; 0xfe8c <copy+0x15e>
    fe3c:	98 01       	movw	r18, r16
    fe3e:	ae 01       	movw	r20, r28
    fe40:	61 e0       	ldi	r22, 0x01	; 1
    fe42:	70 e0       	ldi	r23, 0x00	; 0
    fe44:	c6 01       	movw	r24, r12
    fe46:	4e dd       	rcall	.-1380   	; 0xf8e4 <fwrite>
    fe48:	8c 17       	cp	r24, r28
    fe4a:	9d 07       	cpc	r25, r29
    fe4c:	5c f4       	brge	.+22     	; 0xfe64 <copy+0x136>
    fe4e:	84 ec       	ldi	r24, 0xC4	; 196
    fe50:	9c e0       	ldi	r25, 0x0C	; 12
    fe52:	a0 e0       	ldi	r26, 0x00	; 0
    fe54:	ed b7       	in	r30, 0x3d	; 61
    fe56:	fe b7       	in	r31, 0x3e	; 62
    fe58:	81 83       	std	Z+1, r24	; 0x01
    fe5a:	92 83       	std	Z+2, r25	; 0x02
    fe5c:	a3 83       	std	Z+3, r26	; 0x03
    fe5e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fe62:	14 c0       	rjmp	.+40     	; 0xfe8c <copy+0x15e>
    fe64:	ce 01       	movw	r24, r28
    fe66:	dd 0f       	add	r29, r29
    fe68:	aa 0b       	sbc	r26, r26
    fe6a:	bb 0b       	sbc	r27, r27
    fe6c:	88 0e       	add	r8, r24
    fe6e:	99 1e       	adc	r9, r25
    fe70:	aa 1e       	adc	r10, r26
    fe72:	bb 1e       	adc	r11, r27
    fe74:	ed b7       	in	r30, 0x3d	; 61
    fe76:	fe b7       	in	r31, 0x3e	; 62
    fe78:	84 82       	std	Z+4, r8	; 0x04
    fe7a:	95 82       	std	Z+5, r9	; 0x05
    fe7c:	a6 82       	std	Z+6, r10	; 0x06
    fe7e:	b7 82       	std	Z+7, r11	; 0x07
    fe80:	41 82       	std	Z+1, r4	; 0x01
    fe82:	52 82       	std	Z+2, r5	; 0x02
    fe84:	63 82       	std	Z+3, r6	; 0x03
    fe86:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fe8a:	cd cf       	rjmp	.-102    	; 0xfe26 <copy+0xf8>
    fe8c:	ed b7       	in	r30, 0x3d	; 61
    fe8e:	fe b7       	in	r31, 0x3e	; 62
    fe90:	84 82       	std	Z+4, r8	; 0x04
    fe92:	95 82       	std	Z+5, r9	; 0x05
    fe94:	a6 82       	std	Z+6, r10	; 0x06
    fe96:	b7 82       	std	Z+7, r11	; 0x07
    fe98:	82 ea       	ldi	r24, 0xA2	; 162
    fe9a:	9c e0       	ldi	r25, 0x0C	; 12
    fe9c:	a0 e0       	ldi	r26, 0x00	; 0
    fe9e:	81 83       	std	Z+1, r24	; 0x01
    fea0:	92 83       	std	Z+2, r25	; 0x02
    fea2:	a3 83       	std	Z+3, r26	; 0x03
    fea4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fea8:	c6 01       	movw	r24, r12
    feaa:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
    feae:	c7 01       	movw	r24, r14
    feb0:	9b dd       	rcall	.-1226   	; 0xf9e8 <fclose>
    feb2:	c8 01       	movw	r24, r16
    feb4:	99 dd       	rcall	.-1230   	; 0xf9e8 <fclose>
    feb6:	b4 01       	movw	r22, r8
    feb8:	c5 01       	movw	r24, r10
    feba:	ad b7       	in	r26, 0x3d	; 61
    febc:	be b7       	in	r27, 0x3e	; 62
    febe:	17 96       	adiw	r26, 0x07	; 7
    fec0:	0f b6       	in	r0, 0x3f	; 63
    fec2:	f8 94       	cli
    fec4:	be bf       	out	0x3e, r27	; 62
    fec6:	0f be       	out	0x3f, r0	; 63
    fec8:	ad bf       	out	0x3d, r26	; 61
    feca:	df 91       	pop	r29
    fecc:	cf 91       	pop	r28
    fece:	1f 91       	pop	r17
    fed0:	0f 91       	pop	r16
    fed2:	ff 90       	pop	r15
    fed4:	ef 90       	pop	r14
    fed6:	df 90       	pop	r13
    fed8:	cf 90       	pop	r12
    feda:	bf 90       	pop	r11
    fedc:	af 90       	pop	r10
    fede:	9f 90       	pop	r9
    fee0:	8f 90       	pop	r8
    fee2:	6f 90       	pop	r6
    fee4:	5f 90       	pop	r5
    fee6:	4f 90       	pop	r4
    fee8:	08 95       	ret

0000feea <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    feea:	cf 93       	push	r28
    feec:	df 93       	push	r29
    feee:	00 d0       	rcall	.+0      	; 0xfef0 <testpage+0x6>
    fef0:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fef2:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fef6:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fefa:	82 17       	cp	r24, r18
    fefc:	93 07       	cpc	r25, r19
    fefe:	3c f1       	brlt	.+78     	; 0xff4e <__DATA_REGION_LENGTH__+0x4e>
    {
        printf("More..");
    ff00:	8b e9       	ldi	r24, 0x9B	; 155
    ff02:	9c e0       	ldi	r25, 0x0C	; 12
    ff04:	a0 e0       	ldi	r26, 0x00	; 0
    ff06:	ed b7       	in	r30, 0x3d	; 61
    ff08:	fe b7       	in	r31, 0x3e	; 62
    ff0a:	81 83       	std	Z+1, r24	; 0x01
    ff0c:	92 83       	std	Z+2, r25	; 0x02
    ff0e:	a3 83       	std	Z+3, r26	; 0x03
    ff10:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    ff14:	0e 94 56 76 	call	0xecac	; 0xecac <getchar>
    ff18:	ec 01       	movw	r28, r24
        printf("\r");
    ff1a:	89 e9       	ldi	r24, 0x99	; 153
    ff1c:	9c e0       	ldi	r25, 0x0C	; 12
    ff1e:	a0 e0       	ldi	r26, 0x00	; 0
    ff20:	ed b7       	in	r30, 0x3d	; 61
    ff22:	fe b7       	in	r31, 0x3e	; 62
    ff24:	81 83       	std	Z+1, r24	; 0x01
    ff26:	92 83       	std	Z+2, r25	; 0x02
    ff28:	a3 83       	std	Z+3, r26	; 0x03
    ff2a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        if(c == 'q')
    ff2e:	c1 37       	cpi	r28, 0x71	; 113
    ff30:	d1 05       	cpc	r29, r1
    ff32:	41 f0       	breq	.+16     	; 0xff44 <__DATA_REGION_LENGTH__+0x44>
            return(-1);                           // quit
        if(c == '\n')
    ff34:	2a 97       	sbiw	r28, 0x0a	; 10
    ff36:	49 f4       	brne	.+18     	; 0xff4a <__DATA_REGION_LENGTH__+0x4a>
            return(_pagesize-1);                  // single line
    ff38:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    ff3c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    ff40:	01 97       	sbiw	r24, 0x01	; 1
    ff42:	05 c0       	rjmp	.+10     	; 0xff4e <__DATA_REGION_LENGTH__+0x4e>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    ff44:	8f ef       	ldi	r24, 0xFF	; 255
    ff46:	9f ef       	ldi	r25, 0xFF	; 255
    ff48:	02 c0       	rjmp	.+4      	; 0xff4e <__DATA_REGION_LENGTH__+0x4e>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    ff4a:	80 e0       	ldi	r24, 0x00	; 0
    ff4c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    ff4e:	cd b7       	in	r28, 0x3d	; 61
    ff50:	de b7       	in	r29, 0x3e	; 62
    ff52:	23 96       	adiw	r28, 0x03	; 3
    ff54:	e2 e0       	ldi	r30, 0x02	; 2
    ff56:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0000ff5a <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    ff5a:	a7 e0       	ldi	r26, 0x07	; 7
    ff5c:	b1 e0       	ldi	r27, 0x01	; 1
    ff5e:	e3 eb       	ldi	r30, 0xB3	; 179
    ff60:	ff e7       	ldi	r31, 0x7F	; 127
    ff62:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
    ff66:	8c 01       	movw	r16, r24
    ff68:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    ff6a:	6e ef       	ldi	r22, 0xFE	; 254
    ff6c:	78 e0       	ldi	r23, 0x08	; 8
    ff6e:	92 de       	rcall	.-732    	; 0xfc94 <fopen>
    ff70:	7c 01       	movw	r14, r24
    if (!fp)
    ff72:	89 2b       	or	r24, r25
    ff74:	41 f0       	breq	.+16     	; 0xff86 <cat+0x2c>
    ff76:	c1 2c       	mov	r12, r1
    ff78:	d1 2c       	mov	r13, r1
    ff7a:	a1 2c       	mov	r10, r1
    ff7c:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ff7e:	8e 01       	movw	r16, r28
    ff80:	08 5f       	subi	r16, 0xF8	; 248
    ff82:	1f 4f       	sbci	r17, 0xFF	; 255
    ff84:	23 c0       	rjmp	.+70     	; 0xffcc <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    ff86:	ed b7       	in	r30, 0x3d	; 61
    ff88:	fe b7       	in	r31, 0x3e	; 62
    ff8a:	15 83       	std	Z+5, r17	; 0x05
    ff8c:	04 83       	std	Z+4, r16	; 0x04
    ff8e:	84 e2       	ldi	r24, 0x24	; 36
    ff90:	9d e0       	ldi	r25, 0x0D	; 13
    ff92:	a0 e0       	ldi	r26, 0x00	; 0
    ff94:	81 83       	std	Z+1, r24	; 0x01
    ff96:	92 83       	std	Z+2, r25	; 0x02
    ff98:	a3 83       	std	Z+3, r26	; 0x03
    ff9a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(-1);
    ff9e:	cc 24       	eor	r12, r12
    ffa0:	ca 94       	dec	r12
    ffa2:	dc 2c       	mov	r13, r12
    ffa4:	76 01       	movw	r14, r12
    ffa6:	3f c0       	rjmp	.+126    	; 0x10026 <__EEPROM_REGION_LENGTH__+0x26>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    ffa8:	c8 01       	movw	r24, r16
    ffaa:	0e 94 2a 32 	call	0x6454	; 0x6454 <trim_tail>
        size += strlen(line);
    ffae:	f8 01       	movw	r30, r16
    ffb0:	01 90       	ld	r0, Z+
    ffb2:	00 20       	and	r0, r0
    ffb4:	e9 f7       	brne	.-6      	; 0xffb0 <cat+0x56>
    ffb6:	31 97       	sbiw	r30, 0x01	; 1
    ffb8:	e0 1b       	sub	r30, r16
    ffba:	f1 0b       	sbc	r31, r17
    ffbc:	ce 0e       	add	r12, r30
    ffbe:	df 1e       	adc	r13, r31
        puts(line);
    ffc0:	c8 01       	movw	r24, r16
    ffc2:	0e 94 ae 76 	call	0xed5c	; 0xed5c <puts>
        if(dopage)
    ffc6:	81 14       	cp	r8, r1
    ffc8:	91 04       	cpc	r9, r1
    ffca:	49 f4       	brne	.+18     	; 0xffde <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ffcc:	a7 01       	movw	r20, r14
    ffce:	6e ef       	ldi	r22, 0xFE	; 254
    ffd0:	70 e0       	ldi	r23, 0x00	; 0
    ffd2:	c8 01       	movw	r24, r16
    ffd4:	0e 94 62 76 	call	0xecc4	; 0xecc4 <fgets>
    ffd8:	89 2b       	or	r24, r25
    ffda:	31 f7       	brne	.-52     	; 0xffa8 <cat+0x4e>
    ffdc:	06 c0       	rjmp	.+12     	; 0xffea <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    ffde:	c5 01       	movw	r24, r10
    ffe0:	01 96       	adiw	r24, 0x01	; 1
    ffe2:	83 df       	rcall	.-250    	; 0xfeea <testpage>
    ffe4:	5c 01       	movw	r10, r24
            if(count < 0)
    ffe6:	97 ff       	sbrs	r25, 7
    ffe8:	f1 cf       	rjmp	.-30     	; 0xffcc <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    ffea:	82 e2       	ldi	r24, 0x22	; 34
    ffec:	9d e0       	ldi	r25, 0x0D	; 13
    ffee:	a0 e0       	ldi	r26, 0x00	; 0
    fff0:	ed b7       	in	r30, 0x3d	; 61
    fff2:	fe b7       	in	r31, 0x3e	; 62
    fff4:	81 83       	std	Z+1, r24	; 0x01
    fff6:	92 83       	std	Z+2, r25	; 0x02
    fff8:	a3 83       	std	Z+3, r26	; 0x03
    fffa:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    fclose(fp);
    fffe:	c7 01       	movw	r24, r14
   10000:	f3 dc       	rcall	.-1562   	; 0xf9e8 <fclose>
    printf("%ld bytes\n", (long)size);
   10002:	0d 2c       	mov	r0, r13
   10004:	00 0c       	add	r0, r0
   10006:	ee 08       	sbc	r14, r14
   10008:	ff 08       	sbc	r15, r15
   1000a:	ed b7       	in	r30, 0x3d	; 61
   1000c:	fe b7       	in	r31, 0x3e	; 62
   1000e:	c4 82       	std	Z+4, r12	; 0x04
   10010:	d5 82       	std	Z+5, r13	; 0x05
   10012:	e6 82       	std	Z+6, r14	; 0x06
   10014:	f7 82       	std	Z+7, r15	; 0x07
   10016:	87 e1       	ldi	r24, 0x17	; 23
   10018:	9d e0       	ldi	r25, 0x0D	; 13
   1001a:	a0 e0       	ldi	r26, 0x00	; 0
   1001c:	81 83       	std	Z+1, r24	; 0x01
   1001e:	92 83       	std	Z+2, r25	; 0x02
   10020:	a3 83       	std	Z+3, r26	; 0x03
   10022:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    return(size);
}
   10026:	c7 01       	movw	r24, r14
   10028:	b6 01       	movw	r22, r12
   1002a:	c9 5f       	subi	r28, 0xF9	; 249
   1002c:	de 4f       	sbci	r29, 0xFE	; 254
   1002e:	ec e0       	ldi	r30, 0x0C	; 12
   10030:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

00010034 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10034:	4f 92       	push	r4
   10036:	5f 92       	push	r5
   10038:	6f 92       	push	r6
   1003a:	7f 92       	push	r7
   1003c:	af 92       	push	r10
   1003e:	bf 92       	push	r11
   10040:	cf 92       	push	r12
   10042:	df 92       	push	r13
   10044:	ef 92       	push	r14
   10046:	ff 92       	push	r15
   10048:	0f 93       	push	r16
   1004a:	1f 93       	push	r17
   1004c:	cf 93       	push	r28
   1004e:	df 93       	push	r29
   10050:	cd b7       	in	r28, 0x3d	; 61
   10052:	de b7       	in	r29, 0x3e	; 62
   10054:	c9 54       	subi	r28, 0x49	; 73
   10056:	d1 09       	sbc	r29, r1
   10058:	0f b6       	in	r0, 0x3f	; 63
   1005a:	f8 94       	cli
   1005c:	de bf       	out	0x3e, r29	; 62
   1005e:	0f be       	out	0x3f, r0	; 63
   10060:	cd bf       	out	0x3d, r28	; 61
   10062:	8c 01       	movw	r16, r24
   10064:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   10066:	be 01       	movw	r22, r28
   10068:	62 5f       	subi	r22, 0xF2	; 242
   1006a:	7f 4f       	sbci	r23, 0xFF	; 255
   1006c:	18 d9       	rcall	.-3536   	; 0xf29e <stat>
   1006e:	01 96       	adiw	r24, 0x01	; 1
   10070:	79 f4       	brne	.+30     	; 0x10090 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   10072:	ed b7       	in	r30, 0x3d	; 61
   10074:	fe b7       	in	r31, 0x3e	; 62
   10076:	15 83       	std	Z+5, r17	; 0x05
   10078:	04 83       	std	Z+4, r16	; 0x04
   1007a:	87 e8       	ldi	r24, 0x87	; 135
   1007c:	9c e0       	ldi	r25, 0x0C	; 12
   1007e:	a0 e0       	ldi	r26, 0x00	; 0
   10080:	81 83       	std	Z+1, r24	; 0x01
   10082:	92 83       	std	Z+2, r25	; 0x02
   10084:	a3 83       	std	Z+3, r26	; 0x03
   10086:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(0);
   1008a:	80 e0       	ldi	r24, 0x00	; 0
   1008c:	90 e0       	ldi	r25, 0x00	; 0
   1008e:	77 c0       	rjmp	.+238    	; 0x1017e <ls_info+0x14a>
    }

    if(!verbose)
   10090:	ef 28       	or	r14, r15
   10092:	81 f4       	brne	.+32     	; 0x100b4 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   10094:	c8 01       	movw	r24, r16
   10096:	0e 94 1b 77 	call	0xee36	; 0xee36 <basename>
   1009a:	ed b7       	in	r30, 0x3d	; 61
   1009c:	fe b7       	in	r31, 0x3e	; 62
   1009e:	95 83       	std	Z+5, r25	; 0x05
   100a0:	84 83       	std	Z+4, r24	; 0x04
   100a2:	83 e8       	ldi	r24, 0x83	; 131
   100a4:	9c e0       	ldi	r25, 0x0C	; 12
   100a6:	a0 e0       	ldi	r26, 0x00	; 0
   100a8:	81 83       	std	Z+1, r24	; 0x01
   100aa:	92 83       	std	Z+2, r25	; 0x02
   100ac:	a3 83       	std	Z+3, r26	; 0x03
   100ae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   100b2:	63 c0       	rjmp	.+198    	; 0x1017a <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   100b4:	4e 88       	ldd	r4, Y+22	; 0x16
   100b6:	5f 88       	ldd	r5, Y+23	; 0x17
   100b8:	68 8c       	ldd	r6, Y+24	; 0x18
   100ba:	79 8c       	ldd	r7, Y+25	; 0x19
   100bc:	d3 01       	movw	r26, r6
   100be:	c2 01       	movw	r24, r4
   100c0:	88 27       	eor	r24, r24
   100c2:	90 7f       	andi	r25, 0xF0	; 240
   100c4:	aa 27       	eor	r26, r26
   100c6:	bb 27       	eor	r27, r27
   100c8:	81 15       	cp	r24, r1
   100ca:	90 44       	sbci	r25, 0x40	; 64
   100cc:	a1 05       	cpc	r26, r1
   100ce:	b1 05       	cpc	r27, r1
   100d0:	11 f4       	brne	.+4      	; 0x100d6 <ls_info+0xa2>
        *p++ = 'd';
   100d2:	84 e6       	ldi	r24, 0x64	; 100
   100d4:	01 c0       	rjmp	.+2      	; 0x100d8 <ls_info+0xa4>
    else
        *p++ = '-';
   100d6:	8d e2       	ldi	r24, 0x2D	; 45
   100d8:	8e af       	std	Y+62, r24	; 0x3e
   100da:	fe 01       	movw	r30, r28
   100dc:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   100de:	e1 2c       	mov	r14, r1
   100e0:	ff 24       	eor	r15, r15
   100e2:	f3 94       	inc	r15
   100e4:	20 e0       	ldi	r18, 0x00	; 0
   100e6:	30 e0       	ldi	r19, 0x00	; 0
   100e8:	be 2e       	mov	r11, r30
   100ea:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   100ec:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   100ee:	53 e0       	ldi	r21, 0x03	; 3
   100f0:	c5 2e       	mov	r12, r21
   100f2:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   100f4:	c7 01       	movw	r24, r14
   100f6:	a0 e0       	ldi	r26, 0x00	; 0
   100f8:	b0 e0       	ldi	r27, 0x00	; 0
   100fa:	84 21       	and	r24, r4
   100fc:	95 21       	and	r25, r5
   100fe:	a6 21       	and	r26, r6
   10100:	b7 21       	and	r27, r7
   10102:	89 2b       	or	r24, r25
   10104:	8a 2b       	or	r24, r26
   10106:	8b 2b       	or	r24, r27
   10108:	51 f0       	breq	.+20     	; 0x1011e <ls_info+0xea>
            *p++ = cm[ i % 3];
   1010a:	c9 01       	movw	r24, r18
   1010c:	b6 01       	movw	r22, r12
   1010e:	0e 94 6c e6 	call	0x1ccd8	; 0x1ccd8 <__divmodhi4>
   10112:	dc 01       	movw	r26, r24
   10114:	a6 54       	subi	r26, 0x46	; 70
   10116:	b4 4f       	sbci	r27, 0xF4	; 244
   10118:	8c 91       	ld	r24, X
   1011a:	81 83       	std	Z+1, r24	; 0x01
   1011c:	01 c0       	rjmp	.+2      	; 0x10120 <ls_info+0xec>
        else
            *p++ = '-';
   1011e:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10120:	f6 94       	lsr	r15
   10122:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10124:	2f 5f       	subi	r18, 0xFF	; 255
   10126:	3f 4f       	sbci	r19, 0xFF	; 255
   10128:	31 96       	adiw	r30, 0x01	; 1
   1012a:	29 30       	cpi	r18, 0x09	; 9
   1012c:	31 05       	cpc	r19, r1
   1012e:	11 f7       	brne	.-60     	; 0x100f4 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10130:	29 96       	adiw	r28, 0x09	; 9
   10132:	1f ae       	std	Y+63, r1	; 0x3f
   10134:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   10136:	4e a0       	ldd	r4, Y+38	; 0x26
   10138:	5f a0       	ldd	r5, Y+39	; 0x27
   1013a:	68 a4       	ldd	r6, Y+40	; 0x28
   1013c:	79 a4       	ldd	r7, Y+41	; 0x29
   1013e:	6e a9       	ldd	r22, Y+54	; 0x36
   10140:	7f a9       	ldd	r23, Y+55	; 0x37
   10142:	88 ad       	ldd	r24, Y+56	; 0x38
   10144:	99 ad       	ldd	r25, Y+57	; 0x39
   10146:	0e 94 f6 76 	call	0xedec	; 0xedec <mctime>
   1014a:	7c 01       	movw	r14, r24
   1014c:	c8 01       	movw	r24, r16
   1014e:	0e 94 1b 77 	call	0xee36	; 0xee36 <basename>
   10152:	ed b7       	in	r30, 0x3d	; 61
   10154:	fe b7       	in	r31, 0x3e	; 62
   10156:	95 87       	std	Z+13, r25	; 0x0d
   10158:	84 87       	std	Z+12, r24	; 0x0c
   1015a:	f3 86       	std	Z+11, r15	; 0x0b
   1015c:	e2 86       	std	Z+10, r14	; 0x0a
   1015e:	46 82       	std	Z+6, r4	; 0x06
   10160:	57 82       	std	Z+7, r5	; 0x07
   10162:	60 86       	std	Z+8, r6	; 0x08
   10164:	71 86       	std	Z+9, r7	; 0x09
   10166:	b4 82       	std	Z+4, r11	; 0x04
   10168:	a5 82       	std	Z+5, r10	; 0x05
   1016a:	89 e6       	ldi	r24, 0x69	; 105
   1016c:	9c e0       	ldi	r25, 0x0C	; 12
   1016e:	a0 e0       	ldi	r26, 0x00	; 0
   10170:	81 83       	std	Z+1, r24	; 0x01
   10172:	92 83       	std	Z+2, r25	; 0x02
   10174:	a3 83       	std	Z+3, r26	; 0x03
   10176:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   1017a:	81 e0       	ldi	r24, 0x01	; 1
   1017c:	90 e0       	ldi	r25, 0x00	; 0
}
   1017e:	c7 5b       	subi	r28, 0xB7	; 183
   10180:	df 4f       	sbci	r29, 0xFF	; 255
   10182:	0f b6       	in	r0, 0x3f	; 63
   10184:	f8 94       	cli
   10186:	de bf       	out	0x3e, r29	; 62
   10188:	0f be       	out	0x3f, r0	; 63
   1018a:	cd bf       	out	0x3d, r28	; 61
   1018c:	df 91       	pop	r29
   1018e:	cf 91       	pop	r28
   10190:	1f 91       	pop	r17
   10192:	0f 91       	pop	r16
   10194:	ff 90       	pop	r15
   10196:	ef 90       	pop	r14
   10198:	df 90       	pop	r13
   1019a:	cf 90       	pop	r12
   1019c:	bf 90       	pop	r11
   1019e:	af 90       	pop	r10
   101a0:	7f 90       	pop	r7
   101a2:	6f 90       	pop	r6
   101a4:	5f 90       	pop	r5
   101a6:	4f 90       	pop	r4
   101a8:	08 95       	ret

000101aa <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   101aa:	2f 92       	push	r2
   101ac:	3f 92       	push	r3
   101ae:	4f 92       	push	r4
   101b0:	5f 92       	push	r5
   101b2:	6f 92       	push	r6
   101b4:	8f 92       	push	r8
   101b6:	9f 92       	push	r9
   101b8:	af 92       	push	r10
   101ba:	bf 92       	push	r11
   101bc:	cf 92       	push	r12
   101be:	df 92       	push	r13
   101c0:	ef 92       	push	r14
   101c2:	ff 92       	push	r15
   101c4:	0f 93       	push	r16
   101c6:	1f 93       	push	r17
   101c8:	cf 93       	push	r28
   101ca:	df 93       	push	r29
   101cc:	cd b7       	in	r28, 0x3d	; 61
   101ce:	de b7       	in	r29, 0x3e	; 62
   101d0:	c8 53       	subi	r28, 0x38	; 56
   101d2:	d1 40       	sbci	r29, 0x01	; 1
   101d4:	0f b6       	in	r0, 0x3f	; 63
   101d6:	f8 94       	cli
   101d8:	de bf       	out	0x3e, r29	; 62
   101da:	0f be       	out	0x3f, r0	; 63
   101dc:	cd bf       	out	0x3d, r28	; 61
   101de:	7c 01       	movw	r14, r24
   101e0:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   101e2:	1e 82       	std	Y+6, r1	; 0x06
   101e4:	8e 01       	movw	r16, r28
   101e6:	0a 5f       	subi	r16, 0xFA	; 250
   101e8:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   101ea:	00 97       	sbiw	r24, 0x00	; 0
   101ec:	51 f4       	brne	.+20     	; 0x10202 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   101ee:	6f ef       	ldi	r22, 0xFF	; 255
   101f0:	70 e0       	ldi	r23, 0x00	; 0
   101f2:	c8 01       	movw	r24, r16
   101f4:	0e 94 71 77 	call	0xeee2	; 0xeee2 <getcwd>
   101f8:	89 2b       	or	r24, r25
   101fa:	91 f4       	brne	.+36     	; 0x10220 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   101fc:	88 e4       	ldi	r24, 0x48	; 72
   101fe:	9c e0       	ldi	r25, 0x0C	; 12
   10200:	6a c0       	rjmp	.+212    	; 0x102d6 <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10202:	fc 01       	movw	r30, r24
   10204:	80 81       	ld	r24, Z
   10206:	88 23       	and	r24, r24
   10208:	91 f3       	breq	.-28     	; 0x101ee <ls+0x44>
   1020a:	61 ef       	ldi	r22, 0xF1	; 241
   1020c:	72 e1       	ldi	r23, 0x12	; 18
   1020e:	c7 01       	movw	r24, r14
   10210:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   10214:	89 2b       	or	r24, r25
   10216:	59 f7       	brne	.-42     	; 0x101ee <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10218:	b7 01       	movw	r22, r14
   1021a:	c8 01       	movw	r24, r16
   1021c:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
    }
    len = strlen(fullpath);
   10220:	f8 01       	movw	r30, r16
   10222:	01 90       	ld	r0, Z+
   10224:	00 20       	and	r0, r0
   10226:	e9 f7       	brne	.-6      	; 0x10222 <ls+0x78>
   10228:	31 97       	sbiw	r30, 0x01	; 1
   1022a:	1f 01       	movw	r2, r30
   1022c:	20 1a       	sub	r2, r16
   1022e:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   10230:	be 01       	movw	r22, r28
   10232:	69 5f       	subi	r22, 0xF9	; 249
   10234:	7e 4f       	sbci	r23, 0xFE	; 254
   10236:	c8 01       	movw	r24, r16
   10238:	32 d8       	rcall	.-3996   	; 0xf29e <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1023a:	ed b7       	in	r30, 0x3d	; 61
   1023c:	fe b7       	in	r31, 0x3e	; 62
   1023e:	15 83       	std	Z+5, r17	; 0x05
   10240:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10242:	89 2b       	or	r24, r25
   10244:	59 f0       	breq	.+22     	; 0x1025c <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10246:	82 e3       	ldi	r24, 0x32	; 50
   10248:	9c e0       	ldi	r25, 0x0C	; 12
   1024a:	a0 e0       	ldi	r26, 0x00	; 0
   1024c:	81 83       	std	Z+1, r24	; 0x01
   1024e:	92 83       	std	Z+2, r25	; 0x02
   10250:	a3 83       	std	Z+3, r26	; 0x03
   10252:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(-1);
   10256:	8f ef       	ldi	r24, 0xFF	; 255
   10258:	9f ef       	ldi	r25, 0xFF	; 255
   1025a:	96 c0       	rjmp	.+300    	; 0x10388 <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   1025c:	84 e2       	ldi	r24, 0x24	; 36
   1025e:	9c e0       	ldi	r25, 0x0C	; 12
   10260:	a0 e0       	ldi	r26, 0x00	; 0
   10262:	81 83       	std	Z+1, r24	; 0x01
   10264:	92 83       	std	Z+2, r25	; 0x02
   10266:	a3 83       	std	Z+3, r26	; 0x03
   10268:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    switch (st.st_mode & S_IFMT)
   1026c:	c1 5f       	subi	r28, 0xF1	; 241
   1026e:	de 4f       	sbci	r29, 0xFE	; 254
   10270:	88 81       	ld	r24, Y
   10272:	99 81       	ldd	r25, Y+1	; 0x01
   10274:	aa 81       	ldd	r26, Y+2	; 0x02
   10276:	bb 81       	ldd	r27, Y+3	; 0x03
   10278:	cf 50       	subi	r28, 0x0F	; 15
   1027a:	d1 40       	sbci	r29, 0x01	; 1
   1027c:	88 27       	eor	r24, r24
   1027e:	90 7f       	andi	r25, 0xF0	; 240
   10280:	aa 27       	eor	r26, r26
   10282:	bb 27       	eor	r27, r27
   10284:	81 15       	cp	r24, r1
   10286:	f0 e4       	ldi	r31, 0x40	; 64
   10288:	9f 07       	cpc	r25, r31
   1028a:	a1 05       	cpc	r26, r1
   1028c:	b1 05       	cpc	r27, r1
   1028e:	59 f0       	breq	.+22     	; 0x102a6 <ls+0xfc>
   10290:	81 15       	cp	r24, r1
   10292:	90 48       	sbci	r25, 0x80	; 128
   10294:	a1 05       	cpc	r26, r1
   10296:	b1 05       	cpc	r27, r1
   10298:	09 f0       	breq	.+2      	; 0x1029c <ls+0xf2>
   1029a:	67 c0       	rjmp	.+206    	; 0x1036a <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   1029c:	b4 01       	movw	r22, r8
   1029e:	c8 01       	movw	r24, r16
   102a0:	c9 de       	rcall	.-622    	; 0x10034 <ls_info>
   102a2:	7c 01       	movw	r14, r24
            break;
   102a4:	64 c0       	rjmp	.+200    	; 0x1036e <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   102a6:	c8 01       	movw	r24, r16
   102a8:	0e 94 1f 78 	call	0xf03e	; 0xf03e <opendir>
   102ac:	5c 01       	movw	r10, r24
            if(!dirp)
   102ae:	89 2b       	or	r24, r25
   102b0:	81 f0       	breq	.+32     	; 0x102d2 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   102b2:	e1 2c       	mov	r14, r1
   102b4:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   102b6:	c8 01       	movw	r24, r16
   102b8:	82 0d       	add	r24, r2
   102ba:	93 1d       	adc	r25, r3
   102bc:	c9 5c       	subi	r28, 0xC9	; 201
   102be:	de 4f       	sbci	r29, 0xFE	; 254
   102c0:	99 83       	std	Y+1, r25	; 0x01
   102c2:	88 83       	st	Y, r24
   102c4:	c7 53       	subi	r28, 0x37	; 55
   102c6:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   102c8:	81 ef       	ldi	r24, 0xF1	; 241
   102ca:	9b e0       	ldi	r25, 0x0B	; 11
   102cc:	2c 01       	movw	r4, r24
   102ce:	61 2c       	mov	r6, r1
   102d0:	25 c0       	rjmp	.+74     	; 0x1031c <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   102d2:	84 e1       	ldi	r24, 0x14	; 20
   102d4:	9c e0       	ldi	r25, 0x0C	; 12
   102d6:	a0 e0       	ldi	r26, 0x00	; 0
   102d8:	ed b7       	in	r30, 0x3d	; 61
   102da:	fe b7       	in	r31, 0x3e	; 62
   102dc:	81 83       	std	Z+1, r24	; 0x01
   102de:	92 83       	std	Z+2, r25	; 0x02
   102e0:	a3 83       	std	Z+3, r26	; 0x03
   102e2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   102e6:	b7 cf       	rjmp	.-146    	; 0x10256 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   102e8:	f6 01       	movw	r30, r12
   102ea:	80 81       	ld	r24, Z
   102ec:	88 23       	and	r24, r24
   102ee:	e1 f0       	breq	.+56     	; 0x10328 <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   102f0:	f6 01       	movw	r30, r12
   102f2:	01 90       	ld	r0, Z+
   102f4:	00 20       	and	r0, r0
   102f6:	e9 f7       	brne	.-6      	; 0x102f2 <ls+0x148>
   102f8:	31 97       	sbiw	r30, 0x01	; 1
   102fa:	ec 19       	sub	r30, r12
   102fc:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   102fe:	e2 0d       	add	r30, r2
   10300:	f3 1d       	adc	r31, r3
   10302:	ef 3f       	cpi	r30, 0xFF	; 255
   10304:	f1 05       	cpc	r31, r1
   10306:	a1 f0       	breq	.+40     	; 0x10330 <ls+0x186>
   10308:	9c f0       	brlt	.+38     	; 0x10330 <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1030a:	ed b7       	in	r30, 0x3d	; 61
   1030c:	fe b7       	in	r31, 0x3e	; 62
   1030e:	d5 82       	std	Z+5, r13	; 0x05
   10310:	c4 82       	std	Z+4, r12	; 0x04
   10312:	41 82       	std	Z+1, r4	; 0x01
   10314:	52 82       	std	Z+2, r5	; 0x02
   10316:	63 82       	std	Z+3, r6	; 0x03
   10318:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   1031c:	c5 01       	movw	r24, r10
   1031e:	0e 94 3d 78 	call	0xf07a	; 0xf07a <readdir>
   10322:	6c 01       	movw	r12, r24
   10324:	89 2b       	or	r24, r25
   10326:	01 f7       	brne	.-64     	; 0x102e8 <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10328:	c5 01       	movw	r24, r10
   1032a:	0e 94 04 78 	call	0xf008	; 0xf008 <closedir>
            break;
   1032e:	1f c0       	rjmp	.+62     	; 0x1036e <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10330:	66 ea       	ldi	r22, 0xA6	; 166
   10332:	78 e0       	ldi	r23, 0x08	; 8
   10334:	c8 01       	movw	r24, r16
   10336:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   1033a:	89 2b       	or	r24, r25
   1033c:	29 f4       	brne	.+10     	; 0x10348 <ls+0x19e>
                {
                    strcat(fullpath,"/");
   1033e:	66 ea       	ldi	r22, 0xA6	; 166
   10340:	78 e0       	ldi	r23, 0x08	; 8
   10342:	c8 01       	movw	r24, r16
   10344:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>
                }
                strcat(fullpath,de->d_name);
   10348:	b6 01       	movw	r22, r12
   1034a:	c8 01       	movw	r24, r16
   1034c:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>
                files +=ls_info(fullpath,verbose);
   10350:	b4 01       	movw	r22, r8
   10352:	c8 01       	movw	r24, r16
   10354:	6f de       	rcall	.-802    	; 0x10034 <ls_info>
   10356:	e8 0e       	add	r14, r24
   10358:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   1035a:	c9 5c       	subi	r28, 0xC9	; 201
   1035c:	de 4f       	sbci	r29, 0xFE	; 254
   1035e:	e8 81       	ld	r30, Y
   10360:	f9 81       	ldd	r31, Y+1	; 0x01
   10362:	c7 53       	subi	r28, 0x37	; 55
   10364:	d1 40       	sbci	r29, 0x01	; 1
   10366:	10 82       	st	Z, r1
   10368:	d9 cf       	rjmp	.-78     	; 0x1031c <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1036a:	e1 2c       	mov	r14, r1
   1036c:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   1036e:	ed b7       	in	r30, 0x3d	; 61
   10370:	fe b7       	in	r31, 0x3e	; 62
   10372:	f5 82       	std	Z+5, r15	; 0x05
   10374:	e4 82       	std	Z+4, r14	; 0x04
   10376:	86 ee       	ldi	r24, 0xE6	; 230
   10378:	9b e0       	ldi	r25, 0x0B	; 11
   1037a:	a0 e0       	ldi	r26, 0x00	; 0
   1037c:	81 83       	std	Z+1, r24	; 0x01
   1037e:	92 83       	std	Z+2, r25	; 0x02
   10380:	a3 83       	std	Z+3, r26	; 0x03
   10382:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    return(files);
   10386:	c7 01       	movw	r24, r14
}
   10388:	c8 5c       	subi	r28, 0xC8	; 200
   1038a:	de 4f       	sbci	r29, 0xFE	; 254
   1038c:	0f b6       	in	r0, 0x3f	; 63
   1038e:	f8 94       	cli
   10390:	de bf       	out	0x3e, r29	; 62
   10392:	0f be       	out	0x3f, r0	; 63
   10394:	cd bf       	out	0x3d, r28	; 61
   10396:	df 91       	pop	r29
   10398:	cf 91       	pop	r28
   1039a:	1f 91       	pop	r17
   1039c:	0f 91       	pop	r16
   1039e:	ff 90       	pop	r15
   103a0:	ef 90       	pop	r14
   103a2:	df 90       	pop	r13
   103a4:	cf 90       	pop	r12
   103a6:	bf 90       	pop	r11
   103a8:	af 90       	pop	r10
   103aa:	9f 90       	pop	r9
   103ac:	8f 90       	pop	r8
   103ae:	6f 90       	pop	r6
   103b0:	5f 90       	pop	r5
   103b2:	4f 90       	pop	r4
   103b4:	3f 90       	pop	r3
   103b6:	2f 90       	pop	r2
   103b8:	08 95       	ret

000103ba <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   103ba:	a7 e0       	ldi	r26, 0x07	; 7
   103bc:	b1 e0       	ldi	r27, 0x01	; 1
   103be:	e3 ee       	ldi	r30, 0xE3	; 227
   103c0:	f1 e8       	ldi	r31, 0x81	; 129
   103c2:	0c 94 ee e6 	jmp	0x1cddc	; 0x1cddc <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   103c6:	18 16       	cp	r1, r24
   103c8:	19 06       	cpc	r1, r25
   103ca:	1c f0       	brlt	.+6      	; 0x103d2 <posix_tests+0x18>
		return(0);
   103cc:	80 e0       	ldi	r24, 0x00	; 0
   103ce:	90 e0       	ldi	r25, 0x00	; 0
   103d0:	dd c1       	rjmp	.+954    	; 0x1078c <posix_tests+0x3d2>

    ptr = argv[ind++];
   103d2:	fb 01       	movw	r30, r22
   103d4:	c0 80       	ld	r12, Z
   103d6:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   103d8:	c1 14       	cp	r12, r1
   103da:	d1 04       	cpc	r13, r1
   103dc:	b9 f3       	breq	.-18     	; 0x103cc <posix_tests+0x12>
   103de:	4b 01       	movw	r8, r22
   103e0:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   103e2:	6e eb       	ldi	r22, 0xBE	; 190
   103e4:	7b e0       	ldi	r23, 0x0B	; 11
   103e6:	c6 01       	movw	r24, r12
   103e8:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   103ec:	89 2b       	or	r24, r25
   103ee:	a1 f0       	breq	.+40     	; 0x10418 <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   103f0:	f4 01       	movw	r30, r8
   103f2:	c2 80       	ldd	r12, Z+2	; 0x02
   103f4:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   103f6:	c1 14       	cp	r12, r1
   103f8:	d1 04       	cpc	r13, r1
   103fa:	21 f4       	brne	.+8      	; 0x10404 <posix_tests+0x4a>
        {
            posix_help(1);
   103fc:	81 e0       	ldi	r24, 0x01	; 1
   103fe:	90 e0       	ldi	r25, 0x00	; 0
   10400:	75 dc       	rcall	.-1814   	; 0xfcec <posix_help>
   10402:	45 c1       	rjmp	.+650    	; 0x1068e <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10404:	6d e6       	ldi	r22, 0x6D	; 109
   10406:	76 e1       	ldi	r23, 0x16	; 22
   10408:	c6 01       	movw	r24, r12
   1040a:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   1040e:	89 2b       	or	r24, r25
   10410:	a9 f7       	brne	.-22     	; 0x103fc <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10412:	02 e0       	ldi	r16, 0x02	; 2
   10414:	10 e0       	ldi	r17, 0x00	; 0
   10416:	02 c0       	rjmp	.+4      	; 0x1041c <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   10418:	01 e0       	ldi	r16, 0x01	; 1
   1041a:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1041c:	78 01       	movw	r14, r16
   1041e:	ff ef       	ldi	r31, 0xFF	; 255
   10420:	ef 1a       	sub	r14, r31
   10422:	ff 0a       	sbc	r15, r31
   10424:	93 01       	movw	r18, r6
   10426:	a7 01       	movw	r20, r14
   10428:	64 ec       	ldi	r22, 0xC4	; 196
   1042a:	7b e0       	ldi	r23, 0x0B	; 11
   1042c:	c6 01       	movw	r24, r12
   1042e:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   10432:	89 2b       	or	r24, r25
   10434:	99 f1       	breq	.+102    	; 0x1049c <posix_tests+0xe2>
   10436:	78 01       	movw	r14, r16
   10438:	ee 0c       	add	r14, r14
   1043a:	ff 1c       	adc	r15, r15
   1043c:	e8 0c       	add	r14, r8
   1043e:	f9 1c       	adc	r15, r9
   10440:	57 01       	movw	r10, r14
   10442:	47 01       	movw	r8, r14
   10444:	68 01       	movw	r12, r16
   10446:	41 2c       	mov	r4, r1
   10448:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1044a:	c6 14       	cp	r12, r6
   1044c:	d7 04       	cpc	r13, r7
   1044e:	14 f5       	brge	.+68     	; 0x10494 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10450:	68 ec       	ldi	r22, 0xC8	; 200
   10452:	7b e0       	ldi	r23, 0x0B	; 11
   10454:	f4 01       	movw	r30, r8
   10456:	81 91       	ld	r24, Z+
   10458:	91 91       	ld	r25, Z+
   1045a:	4f 01       	movw	r8, r30
   1045c:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   10460:	89 2b       	or	r24, r25
   10462:	19 f0       	breq	.+6      	; 0x1046a <posix_tests+0xb0>
                page = 1;
   10464:	44 24       	eor	r4, r4
   10466:	43 94       	inc	r4
   10468:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1046a:	ff ef       	ldi	r31, 0xFF	; 255
   1046c:	cf 1a       	sub	r12, r31
   1046e:	df 0a       	sbc	r13, r31
   10470:	ec cf       	rjmp	.-40     	; 0x1044a <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10472:	68 ec       	ldi	r22, 0xC8	; 200
   10474:	7b e0       	ldi	r23, 0x0B	; 11
   10476:	f5 01       	movw	r30, r10
   10478:	81 91       	ld	r24, Z+
   1047a:	91 91       	ld	r25, Z+
   1047c:	5f 01       	movw	r10, r30
   1047e:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   10482:	89 2b       	or	r24, r25
   10484:	29 f4       	brne	.+10     	; 0x10490 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   10486:	b2 01       	movw	r22, r4
   10488:	f7 01       	movw	r30, r14
   1048a:	80 81       	ld	r24, Z
   1048c:	91 81       	ldd	r25, Z+1	; 0x01
   1048e:	65 dd       	rcall	.-1334   	; 0xff5a <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10490:	0f 5f       	subi	r16, 0xFF	; 255
   10492:	1f 4f       	sbci	r17, 0xFF	; 255
   10494:	06 15       	cp	r16, r6
   10496:	17 05       	cpc	r17, r7
   10498:	64 f3       	brlt	.-40     	; 0x10472 <posix_tests+0xb8>
   1049a:	f9 c0       	rjmp	.+498    	; 0x1068e <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1049c:	58 01       	movw	r10, r16
   1049e:	f2 e0       	ldi	r31, 0x02	; 2
   104a0:	af 0e       	add	r10, r31
   104a2:	b1 1c       	adc	r11, r1
   104a4:	93 01       	movw	r18, r6
   104a6:	a5 01       	movw	r20, r10
   104a8:	6b ec       	ldi	r22, 0xCB	; 203
   104aa:	7b e0       	ldi	r23, 0x0B	; 11
   104ac:	c6 01       	movw	r24, r12
   104ae:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   104b2:	89 2b       	or	r24, r25
   104b4:	69 f0       	breq	.+26     	; 0x104d0 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   104b6:	f8 01       	movw	r30, r16
   104b8:	ee 0f       	add	r30, r30
   104ba:	ff 1f       	adc	r31, r31
   104bc:	e8 0d       	add	r30, r8
   104be:	f9 1d       	adc	r31, r9
   104c0:	62 81       	ldd	r22, Z+2	; 0x02
   104c2:	73 81       	ldd	r23, Z+3	; 0x03
   104c4:	80 81       	ld	r24, Z
   104c6:	91 81       	ldd	r25, Z+1	; 0x01
   104c8:	32 dc       	rcall	.-1948   	; 0xfd2e <copy>
   104ca:	97 ff       	sbrs	r25, 7
   104cc:	e0 c0       	rjmp	.+448    	; 0x1068e <posix_tests+0x2d4>
   104ce:	5c c1       	rjmp	.+696    	; 0x10788 <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   104d0:	93 01       	movw	r18, r6
   104d2:	a7 01       	movw	r20, r14
   104d4:	60 ed       	ldi	r22, 0xD0	; 208
   104d6:	7b e0       	ldi	r23, 0x0B	; 11
   104d8:	c6 01       	movw	r24, r12
   104da:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   104de:	89 2b       	or	r24, r25
   104e0:	b9 f0       	breq	.+46     	; 0x10510 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   104e2:	78 01       	movw	r14, r16
   104e4:	ee 0c       	add	r14, r14
   104e6:	ff 1c       	adc	r15, r15
   104e8:	e8 0c       	add	r14, r8
   104ea:	f9 1c       	adc	r15, r9
   104ec:	f7 01       	movw	r30, r14
   104ee:	80 81       	ld	r24, Z
   104f0:	91 81       	ldd	r25, Z+1	; 0x01
   104f2:	0e 94 29 77 	call	0xee52	; 0xee52 <chdir>
   104f6:	89 2b       	or	r24, r25
   104f8:	09 f4       	brne	.+2      	; 0x104fc <posix_tests+0x142>
   104fa:	c9 c0       	rjmp	.+402    	; 0x1068e <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   104fc:	f7 01       	movw	r30, r14
   104fe:	80 81       	ld	r24, Z
   10500:	91 81       	ldd	r25, Z+1	; 0x01
   10502:	ed b7       	in	r30, 0x3d	; 61
   10504:	fe b7       	in	r31, 0x3e	; 62
   10506:	95 83       	std	Z+5, r25	; 0x05
   10508:	84 83       	std	Z+4, r24	; 0x04
   1050a:	8d e9       	ldi	r24, 0x9D	; 157
   1050c:	9d e0       	ldi	r25, 0x0D	; 13
   1050e:	36 c1       	rjmp	.+620    	; 0x1077c <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10510:	68 ed       	ldi	r22, 0xD8	; 216
   10512:	78 e0       	ldi	r23, 0x08	; 8
   10514:	c6 01       	movw	r24, r12
   10516:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1051a:	89 2b       	or	r24, r25
   1051c:	09 f4       	brne	.+2      	; 0x10520 <posix_tests+0x166>
   1051e:	40 c0       	rjmp	.+128    	; 0x105a0 <posix_tests+0x1e6>
   10520:	78 01       	movw	r14, r16
   10522:	ee 0c       	add	r14, r14
   10524:	ff 1c       	adc	r15, r15
   10526:	e8 0c       	add	r14, r8
   10528:	f9 1c       	adc	r15, r9
   1052a:	c1 2c       	mov	r12, r1
   1052c:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   1052e:	85 e8       	ldi	r24, 0x85	; 133
   10530:	9d e0       	ldi	r25, 0x0D	; 13
   10532:	4c 01       	movw	r8, r24
   10534:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10536:	06 15       	cp	r16, r6
   10538:	17 05       	cpc	r17, r7
   1053a:	34 f5       	brge	.+76     	; 0x10588 <posix_tests+0x1ce>
        {
			if(!argv[i])
   1053c:	f7 01       	movw	r30, r14
   1053e:	80 81       	ld	r24, Z
   10540:	91 81       	ldd	r25, Z+1	; 0x01
   10542:	00 97       	sbiw	r24, 0x00	; 0
   10544:	51 f4       	brne	.+20     	; 0x1055a <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   10546:	ed b7       	in	r30, 0x3d	; 61
   10548:	fe b7       	in	r31, 0x3e	; 62
   1054a:	15 83       	std	Z+5, r17	; 0x05
   1054c:	04 83       	std	Z+4, r16	; 0x04
   1054e:	81 82       	std	Z+1, r8	; 0x01
   10550:	92 82       	std	Z+2, r9	; 0x02
   10552:	a3 82       	std	Z+3, r10	; 0x03
   10554:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
				continue;
   10558:	11 c0       	rjmp	.+34     	; 0x1057c <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   1055a:	63 ed       	ldi	r22, 0xD3	; 211
   1055c:	7b e0       	ldi	r23, 0x0B	; 11
   1055e:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   10562:	89 2b       	or	r24, r25
   10564:	59 f4       	brne	.+22     	; 0x1057c <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   10566:	61 e0       	ldi	r22, 0x01	; 1
   10568:	70 e0       	ldi	r23, 0x00	; 0
   1056a:	f7 01       	movw	r30, r14
   1056c:	80 81       	ld	r24, Z
   1056e:	91 81       	ldd	r25, Z+1	; 0x01
   10570:	1c de       	rcall	.-968    	; 0x101aa <ls>
   10572:	97 fd       	sbrc	r25, 7
   10574:	09 c1       	rjmp	.+530    	; 0x10788 <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   10576:	ff ef       	ldi	r31, 0xFF	; 255
   10578:	cf 1a       	sub	r12, r31
   1057a:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1057c:	0f 5f       	subi	r16, 0xFF	; 255
   1057e:	1f 4f       	sbci	r17, 0xFF	; 255
   10580:	82 e0       	ldi	r24, 0x02	; 2
   10582:	e8 0e       	add	r14, r24
   10584:	f1 1c       	adc	r15, r1
   10586:	d7 cf       	rjmp	.-82     	; 0x10536 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   10588:	c1 14       	cp	r12, r1
   1058a:	d1 04       	cpc	r13, r1
   1058c:	09 f0       	breq	.+2      	; 0x10590 <posix_tests+0x1d6>
   1058e:	7f c0       	rjmp	.+254    	; 0x1068e <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   10590:	61 e0       	ldi	r22, 0x01	; 1
   10592:	70 e0       	ldi	r23, 0x00	; 0
   10594:	80 e2       	ldi	r24, 0x20	; 32
   10596:	9c e0       	ldi	r25, 0x0C	; 12
   10598:	08 de       	rcall	.-1008   	; 0x101aa <ls>
   1059a:	97 ff       	sbrs	r25, 7
   1059c:	78 c0       	rjmp	.+240    	; 0x1068e <posix_tests+0x2d4>
   1059e:	f4 c0       	rjmp	.+488    	; 0x10788 <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   105a0:	93 01       	movw	r18, r6
   105a2:	a7 01       	movw	r20, r14
   105a4:	66 ed       	ldi	r22, 0xD6	; 214
   105a6:	7b e0       	ldi	r23, 0x0B	; 11
   105a8:	c6 01       	movw	r24, r12
   105aa:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   105ae:	89 2b       	or	r24, r25
   105b0:	79 f1       	breq	.+94     	; 0x10610 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   105b2:	e6 14       	cp	r14, r6
   105b4:	f7 04       	cpc	r15, r7
   105b6:	7c f4       	brge	.+30     	; 0x105d6 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   105b8:	ee 0c       	add	r14, r14
   105ba:	ff 1c       	adc	r15, r15
   105bc:	f4 01       	movw	r30, r8
   105be:	ee 0d       	add	r30, r14
   105c0:	ff 1d       	adc	r31, r15
   105c2:	48 e0       	ldi	r20, 0x08	; 8
   105c4:	50 e0       	ldi	r21, 0x00	; 0
   105c6:	60 e0       	ldi	r22, 0x00	; 0
   105c8:	70 e0       	ldi	r23, 0x00	; 0
   105ca:	80 81       	ld	r24, Z
   105cc:	91 81       	ldd	r25, Z+1	; 0x01
   105ce:	0e 94 46 47 	call	0x8e8c	; 0x8e8c <strtol>
   105d2:	ab 01       	movw	r20, r22
   105d4:	02 c0       	rjmp	.+4      	; 0x105da <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   105d6:	4f ef       	ldi	r20, 0xFF	; 255
   105d8:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   105da:	78 01       	movw	r14, r16
   105dc:	ee 0c       	add	r14, r14
   105de:	ff 1c       	adc	r15, r15
   105e0:	e8 0c       	add	r14, r8
   105e2:	f9 1c       	adc	r15, r9
   105e4:	05 2e       	mov	r0, r21
   105e6:	00 0c       	add	r0, r0
   105e8:	66 0b       	sbc	r22, r22
   105ea:	77 0b       	sbc	r23, r23
   105ec:	f7 01       	movw	r30, r14
   105ee:	80 81       	ld	r24, Z
   105f0:	91 81       	ldd	r25, Z+1	; 0x01
   105f2:	0e 94 96 77 	call	0xef2c	; 0xef2c <mkdir>
   105f6:	89 2b       	or	r24, r25
   105f8:	09 f4       	brne	.+2      	; 0x105fc <posix_tests+0x242>
   105fa:	49 c0       	rjmp	.+146    	; 0x1068e <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   105fc:	f7 01       	movw	r30, r14
   105fe:	80 81       	ld	r24, Z
   10600:	91 81       	ldd	r25, Z+1	; 0x01
   10602:	ed b7       	in	r30, 0x3d	; 61
   10604:	fe b7       	in	r31, 0x3e	; 62
   10606:	95 83       	std	Z+5, r25	; 0x05
   10608:	84 83       	std	Z+4, r24	; 0x04
   1060a:	84 e7       	ldi	r24, 0x74	; 116
   1060c:	9d e0       	ldi	r25, 0x0D	; 13
   1060e:	b6 c0       	rjmp	.+364    	; 0x1077c <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10610:	93 01       	movw	r18, r6
   10612:	a7 01       	movw	r20, r14
   10614:	6c ed       	ldi	r22, 0xDC	; 220
   10616:	7b e0       	ldi	r23, 0x0B	; 11
   10618:	c6 01       	movw	r24, r12
   1061a:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1061e:	89 2b       	or	r24, r25
   10620:	71 f0       	breq	.+28     	; 0x1063e <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   10622:	00 0f       	add	r16, r16
   10624:	11 1f       	adc	r17, r17
   10626:	f4 01       	movw	r30, r8
   10628:	e0 0f       	add	r30, r16
   1062a:	f1 1f       	adc	r31, r17
   1062c:	80 81       	ld	r24, Z
   1062e:	91 81       	ldd	r25, Z+1	; 0x01
   10630:	0e 94 a4 47 	call	0x8f48	; 0x8f48 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10634:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10638:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   1063c:	28 c0       	rjmp	.+80     	; 0x1068e <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1063e:	93 01       	movw	r18, r6
   10640:	a8 01       	movw	r20, r16
   10642:	61 ee       	ldi	r22, 0xE1	; 225
   10644:	7b e0       	ldi	r23, 0x0B	; 11
   10646:	c6 01       	movw	r24, r12
   10648:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1064c:	89 2b       	or	r24, r25
   1064e:	11 f1       	breq	.+68     	; 0x10694 <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   10650:	6e ef       	ldi	r22, 0xFE	; 254
   10652:	70 e0       	ldi	r23, 0x00	; 0
   10654:	ce 01       	movw	r24, r28
   10656:	08 96       	adiw	r24, 0x08	; 8
   10658:	0e 94 71 77 	call	0xeee2	; 0xeee2 <getcwd>
		if(ptr == NULL)
   1065c:	00 97       	sbiw	r24, 0x00	; 0
   1065e:	59 f4       	brne	.+22     	; 0x10676 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   10660:	88 e6       	ldi	r24, 0x68	; 104
   10662:	9d e0       	ldi	r25, 0x0D	; 13
   10664:	a0 e0       	ldi	r26, 0x00	; 0
   10666:	ed b7       	in	r30, 0x3d	; 61
   10668:	fe b7       	in	r31, 0x3e	; 62
   1066a:	81 83       	std	Z+1, r24	; 0x01
   1066c:	92 83       	std	Z+2, r25	; 0x02
   1066e:	a3 83       	std	Z+3, r26	; 0x03
   10670:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10674:	89 c0       	rjmp	.+274    	; 0x10788 <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   10676:	ed b7       	in	r30, 0x3d	; 61
   10678:	fe b7       	in	r31, 0x3e	; 62
   1067a:	95 83       	std	Z+5, r25	; 0x05
   1067c:	84 83       	std	Z+4, r24	; 0x04
   1067e:	84 e6       	ldi	r24, 0x64	; 100
   10680:	9d e0       	ldi	r25, 0x0D	; 13
   10682:	a0 e0       	ldi	r26, 0x00	; 0
   10684:	81 83       	std	Z+1, r24	; 0x01
   10686:	92 83       	std	Z+2, r25	; 0x02
   10688:	a3 83       	std	Z+3, r26	; 0x03
   1068a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(1);
   1068e:	81 e0       	ldi	r24, 0x01	; 1
   10690:	90 e0       	ldi	r25, 0x00	; 0
   10692:	7c c0       	rjmp	.+248    	; 0x1078c <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10694:	93 01       	movw	r18, r6
   10696:	a5 01       	movw	r20, r10
   10698:	65 ee       	ldi	r22, 0xE5	; 229
   1069a:	7b e0       	ldi	r23, 0x0B	; 11
   1069c:	c6 01       	movw	r24, r12
   1069e:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   106a2:	89 2b       	or	r24, r25
   106a4:	59 f1       	breq	.+86     	; 0x106fc <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   106a6:	00 0f       	add	r16, r16
   106a8:	11 1f       	adc	r17, r17
   106aa:	64 01       	movw	r12, r8
   106ac:	c0 0e       	add	r12, r16
   106ae:	d1 1e       	adc	r13, r17
   106b0:	0e 5f       	subi	r16, 0xFE	; 254
   106b2:	1f 4f       	sbci	r17, 0xFF	; 255
   106b4:	74 01       	movw	r14, r8
   106b6:	e0 0e       	add	r14, r16
   106b8:	f1 1e       	adc	r15, r17
   106ba:	f7 01       	movw	r30, r14
   106bc:	60 81       	ld	r22, Z
   106be:	71 81       	ldd	r23, Z+1	; 0x01
   106c0:	f6 01       	movw	r30, r12
   106c2:	80 81       	ld	r24, Z
   106c4:	91 81       	ldd	r25, Z+1	; 0x01
   106c6:	0e 94 c4 77 	call	0xef88	; 0xef88 <rename>
   106ca:	89 2b       	or	r24, r25
   106cc:	01 f3       	breq	.-64     	; 0x1068e <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   106ce:	f7 01       	movw	r30, r14
   106d0:	80 81       	ld	r24, Z
   106d2:	91 81       	ldd	r25, Z+1	; 0x01
   106d4:	ed b7       	in	r30, 0x3d	; 61
   106d6:	fe b7       	in	r31, 0x3e	; 62
   106d8:	97 83       	std	Z+7, r25	; 0x07
   106da:	86 83       	std	Z+6, r24	; 0x06
   106dc:	f6 01       	movw	r30, r12
   106de:	80 81       	ld	r24, Z
   106e0:	91 81       	ldd	r25, Z+1	; 0x01
   106e2:	ed b7       	in	r30, 0x3d	; 61
   106e4:	fe b7       	in	r31, 0x3e	; 62
   106e6:	95 83       	std	Z+5, r25	; 0x05
   106e8:	84 83       	std	Z+4, r24	; 0x04
   106ea:	83 e5       	ldi	r24, 0x53	; 83
   106ec:	9d e0       	ldi	r25, 0x0D	; 13
   106ee:	a0 e0       	ldi	r26, 0x00	; 0
   106f0:	81 83       	std	Z+1, r24	; 0x01
   106f2:	92 83       	std	Z+2, r25	; 0x02
   106f4:	a3 83       	std	Z+3, r26	; 0x03
   106f6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   106fa:	46 c0       	rjmp	.+140    	; 0x10788 <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   106fc:	93 01       	movw	r18, r6
   106fe:	a7 01       	movw	r20, r14
   10700:	6c ee       	ldi	r22, 0xEC	; 236
   10702:	7b e0       	ldi	r23, 0x0B	; 11
   10704:	c6 01       	movw	r24, r12
   10706:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1070a:	89 2b       	or	r24, r25
   1070c:	b9 f0       	breq	.+46     	; 0x1073c <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   1070e:	78 01       	movw	r14, r16
   10710:	ee 0c       	add	r14, r14
   10712:	ff 1c       	adc	r15, r15
   10714:	e8 0c       	add	r14, r8
   10716:	f9 1c       	adc	r15, r9
   10718:	f7 01       	movw	r30, r14
   1071a:	80 81       	ld	r24, Z
   1071c:	91 81       	ldd	r25, Z+1	; 0x01
   1071e:	0e 94 e3 77 	call	0xefc6	; 0xefc6 <unlink>
   10722:	89 2b       	or	r24, r25
   10724:	09 f4       	brne	.+2      	; 0x10728 <posix_tests+0x36e>
   10726:	b3 cf       	rjmp	.-154    	; 0x1068e <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   10728:	f7 01       	movw	r30, r14
   1072a:	80 81       	ld	r24, Z
   1072c:	91 81       	ldd	r25, Z+1	; 0x01
   1072e:	ed b7       	in	r30, 0x3d	; 61
   10730:	fe b7       	in	r31, 0x3e	; 62
   10732:	95 83       	std	Z+5, r25	; 0x05
   10734:	84 83       	std	Z+4, r24	; 0x04
   10736:	85 e4       	ldi	r24, 0x45	; 69
   10738:	9d e0       	ldi	r25, 0x0D	; 13
   1073a:	20 c0       	rjmp	.+64     	; 0x1077c <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1073c:	93 01       	movw	r18, r6
   1073e:	a7 01       	movw	r20, r14
   10740:	6f ee       	ldi	r22, 0xEF	; 239
   10742:	7b e0       	ldi	r23, 0x0B	; 11
   10744:	c6 01       	movw	r24, r12
   10746:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1074a:	89 2b       	or	r24, r25
   1074c:	09 f4       	brne	.+2      	; 0x10750 <posix_tests+0x396>
   1074e:	3e ce       	rjmp	.-900    	; 0x103cc <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   10750:	78 01       	movw	r14, r16
   10752:	ee 0c       	add	r14, r14
   10754:	ff 1c       	adc	r15, r15
   10756:	e8 0c       	add	r14, r8
   10758:	f9 1c       	adc	r15, r9
   1075a:	f7 01       	movw	r30, r14
   1075c:	80 81       	ld	r24, Z
   1075e:	91 81       	ldd	r25, Z+1	; 0x01
   10760:	0e 94 02 78 	call	0xf004	; 0xf004 <rmdir>
   10764:	89 2b       	or	r24, r25
   10766:	09 f4       	brne	.+2      	; 0x1076a <posix_tests+0x3b0>
   10768:	92 cf       	rjmp	.-220    	; 0x1068e <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   1076a:	f7 01       	movw	r30, r14
   1076c:	80 81       	ld	r24, Z
   1076e:	91 81       	ldd	r25, Z+1	; 0x01
   10770:	ed b7       	in	r30, 0x3d	; 61
   10772:	fe b7       	in	r31, 0x3e	; 62
   10774:	95 83       	std	Z+5, r25	; 0x05
   10776:	84 83       	std	Z+4, r24	; 0x04
   10778:	84 e3       	ldi	r24, 0x34	; 52
   1077a:	9d e0       	ldi	r25, 0x0D	; 13
   1077c:	a0 e0       	ldi	r26, 0x00	; 0
   1077e:	81 83       	std	Z+1, r24	; 0x01
   10780:	92 83       	std	Z+2, r25	; 0x02
   10782:	a3 83       	std	Z+3, r26	; 0x03
   10784:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            return(-1);
   10788:	8f ef       	ldi	r24, 0xFF	; 255
   1078a:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   1078c:	c9 5f       	subi	r28, 0xF9	; 249
   1078e:	de 4f       	sbci	r29, 0xFE	; 254
   10790:	e0 e1       	ldi	r30, 0x10	; 16
   10792:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__epilogue_restores__+0x4>

00010796 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10796:	00 d0       	rcall	.+0      	; 0x10798 <gpib_timer_init+0x2>
   10798:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1079a:	61 e0       	ldi	r22, 0x01	; 1
   1079c:	70 e0       	ldi	r23, 0x00	; 0
   1079e:	87 e8       	ldi	r24, 0x87	; 135
   107a0:	95 e8       	ldi	r25, 0x85	; 133
   107a2:	0e 94 b9 34 	call	0x6972	; 0x6972 <set_timers>
   107a6:	01 96       	adiw	r24, 0x01	; 1
   107a8:	51 f4       	brne	.+20     	; 0x107be <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   107aa:	8a ed       	ldi	r24, 0xDA	; 218
   107ac:	9e e0       	ldi	r25, 0x0E	; 14
   107ae:	a0 e0       	ldi	r26, 0x00	; 0
   107b0:	ed b7       	in	r30, 0x3d	; 61
   107b2:	fe b7       	in	r31, 0x3e	; 62
   107b4:	81 83       	std	Z+1, r24	; 0x01
   107b6:	92 83       	std	Z+2, r25	; 0x02
   107b8:	a3 83       	std	Z+3, r26	; 0x03
   107ba:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    gpib_timer_reset();
   107be:	95 d1       	rcall	.+810    	; 0x10aea <gpib_timer_reset>
}
   107c0:	0f 90       	pop	r0
   107c2:	0f 90       	pop	r0
   107c4:	0f 90       	pop	r0
   107c6:	08 95       	ret

000107c8 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   107c8:	28 2f       	mov	r18, r24
   107ca:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   107cc:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   107ce:	88 0f       	add	r24, r24
        if(mask & 1)
   107d0:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   107d2:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   107d4:	26 95       	lsr	r18
   107d6:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   107d8:	d1 f7       	brne	.-12     	; 0x107ce <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   107da:	08 95       	ret

000107dc <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   107dc:	f5 df       	rcall	.-22     	; 0x107c8 <reverse_8bits>
   107de:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   107e2:	0e 94 13 2b 	call	0x5626	; 0x5626 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   107e6:	2a 9a       	sbi	0x05, 2	; 5
   107e8:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   107ea:	2a 98       	cbi	0x05, 2	; 5
   107ec:	22 9a       	sbi	0x04, 2	; 4
   107ee:	08 95       	ret

000107f0 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   107f0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   107f4:	e9 cf       	rjmp	.-46     	; 0x107c8 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   107f6:	08 95       	ret

000107f8 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   107f8:	00 d0       	rcall	.+0      	; 0x107fa <ppr_init+0x2>
   107fa:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   107fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10800:	81 ff       	sbrs	r24, 1
   10802:	0a c0       	rjmp	.+20     	; 0x10818 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10804:	87 ec       	ldi	r24, 0xC7	; 199
   10806:	9e e0       	ldi	r25, 0x0E	; 14
   10808:	a0 e0       	ldi	r26, 0x00	; 0
   1080a:	ed b7       	in	r30, 0x3d	; 61
   1080c:	fe b7       	in	r31, 0x3e	; 62
   1080e:	81 83       	std	Z+1, r24	; 0x01
   10810:	92 83       	std	Z+2, r25	; 0x02
   10812:	a3 83       	std	Z+3, r26	; 0x03
   10814:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
    ppr_set(0);
   10818:	80 e0       	ldi	r24, 0x00	; 0
   1081a:	e0 df       	rcall	.-64     	; 0x107dc <ppr_set>
}
   1081c:	0f 90       	pop	r0
   1081e:	0f 90       	pop	r0
   10820:	0f 90       	pop	r0
   10822:	08 95       	ret

00010824 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10824:	21 e0       	ldi	r18, 0x01	; 1
   10826:	30 e0       	ldi	r19, 0x00	; 0
   10828:	01 c0       	rjmp	.+2      	; 0x1082c <ppr_bit_set+0x8>
   1082a:	22 0f       	add	r18, r18
   1082c:	8a 95       	dec	r24
   1082e:	ea f7       	brpl	.-6      	; 0x1082a <ppr_bit_set+0x6>
   10830:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10834:	82 2b       	or	r24, r18
   10836:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   1083a:	d0 cf       	rjmp	.-96     	; 0x107dc <ppr_set>
   1083c:	08 95       	ret

0001083e <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   1083e:	21 e0       	ldi	r18, 0x01	; 1
   10840:	30 e0       	ldi	r19, 0x00	; 0
   10842:	01 c0       	rjmp	.+2      	; 0x10846 <ppr_bit_clr+0x8>
   10844:	22 0f       	add	r18, r18
   10846:	8a 95       	dec	r24
   10848:	ea f7       	brpl	.-6      	; 0x10844 <ppr_bit_clr+0x6>
   1084a:	20 95       	com	r18
   1084c:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   10850:	82 23       	and	r24, r18
   10852:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   10856:	c2 cf       	rjmp	.-124    	; 0x107dc <ppr_set>
   10858:	08 95       	ret

0001085a <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   1085a:	0f 93       	push	r16
   1085c:	1f 93       	push	r17
   1085e:	cf 93       	push	r28
   10860:	df 93       	push	r29
   10862:	00 d0       	rcall	.+0      	; 0x10864 <dbf_open+0xa>
   10864:	00 d0       	rcall	.+0      	; 0x10866 <dbf_open+0xc>
   10866:	1f 92       	push	r1
   10868:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   1086a:	0e 94 b3 59 	call	0xb366	; 0xb366 <f_open>
   1086e:	ec 01       	movw	r28, r24
    if(rc)
   10870:	89 2b       	or	r24, r25
   10872:	79 f0       	breq	.+30     	; 0x10892 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10874:	ed b7       	in	r30, 0x3d	; 61
   10876:	fe b7       	in	r31, 0x3e	; 62
   10878:	15 83       	std	Z+5, r17	; 0x05
   1087a:	04 83       	std	Z+4, r16	; 0x04
   1087c:	86 eb       	ldi	r24, 0xB6	; 182
   1087e:	9e e0       	ldi	r25, 0x0E	; 14
   10880:	a0 e0       	ldi	r26, 0x00	; 0
   10882:	81 83       	std	Z+1, r24	; 0x01
   10884:	92 83       	std	Z+2, r25	; 0x02
   10886:	a3 83       	std	Z+3, r26	; 0x03
   10888:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        put_rc(rc);
   1088c:	ce 01       	movw	r24, r28
   1088e:	0e 94 7d 70 	call	0xe0fa	; 0xe0fa <put_rc>
        return (rc);
    }
    return(0);
}
   10892:	ce 01       	movw	r24, r28
   10894:	cd b7       	in	r28, 0x3d	; 61
   10896:	de b7       	in	r29, 0x3e	; 62
   10898:	25 96       	adiw	r28, 0x05	; 5
   1089a:	e4 e0       	ldi	r30, 0x04	; 4
   1089c:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

000108a0 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   108a0:	cf 93       	push	r28
   108a2:	df 93       	push	r29
   108a4:	00 d0       	rcall	.+0      	; 0x108a6 <dbf_read+0x6>
   108a6:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   108a8:	0e 94 6b 5b 	call	0xb6d6	; 0xb6d6 <f_read>
   108ac:	ec 01       	movw	r28, r24
    if(rc)
   108ae:	89 2b       	or	r24, r25
   108b0:	69 f0       	breq	.+26     	; 0x108cc <dbf_read+0x2c>
    {
        printf("Read error: ");
   108b2:	89 ea       	ldi	r24, 0xA9	; 169
   108b4:	9e e0       	ldi	r25, 0x0E	; 14
   108b6:	a0 e0       	ldi	r26, 0x00	; 0
   108b8:	ed b7       	in	r30, 0x3d	; 61
   108ba:	fe b7       	in	r31, 0x3e	; 62
   108bc:	81 83       	std	Z+1, r24	; 0x01
   108be:	92 83       	std	Z+2, r25	; 0x02
   108c0:	a3 83       	std	Z+3, r26	; 0x03
   108c2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        put_rc(rc);
   108c6:	ce 01       	movw	r24, r28
   108c8:	0e 94 7d 70 	call	0xe0fa	; 0xe0fa <put_rc>
        return (rc);
    }
    return(0);
}
   108cc:	ce 01       	movw	r24, r28
   108ce:	cd b7       	in	r28, 0x3d	; 61
   108d0:	de b7       	in	r29, 0x3e	; 62
   108d2:	23 96       	adiw	r28, 0x03	; 3
   108d4:	e2 e0       	ldi	r30, 0x02	; 2
   108d6:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

000108da <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   108da:	cf 93       	push	r28
   108dc:	df 93       	push	r29
   108de:	00 d0       	rcall	.+0      	; 0x108e0 <dbf_write+0x6>
   108e0:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   108e2:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <f_write>
   108e6:	ec 01       	movw	r28, r24
    if(rc)
   108e8:	89 2b       	or	r24, r25
   108ea:	69 f0       	breq	.+26     	; 0x10906 <dbf_write+0x2c>
    {
        printf("Write error: ");
   108ec:	8b e9       	ldi	r24, 0x9B	; 155
   108ee:	9e e0       	ldi	r25, 0x0E	; 14
   108f0:	a0 e0       	ldi	r26, 0x00	; 0
   108f2:	ed b7       	in	r30, 0x3d	; 61
   108f4:	fe b7       	in	r31, 0x3e	; 62
   108f6:	81 83       	std	Z+1, r24	; 0x01
   108f8:	92 83       	std	Z+2, r25	; 0x02
   108fa:	a3 83       	std	Z+3, r26	; 0x03
   108fc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        put_rc(rc);
   10900:	ce 01       	movw	r24, r28
   10902:	0e 94 7d 70 	call	0xe0fa	; 0xe0fa <put_rc>
        return (rc);
    }
    return(0);
}
   10906:	ce 01       	movw	r24, r28
   10908:	cd b7       	in	r28, 0x3d	; 61
   1090a:	de b7       	in	r29, 0x3e	; 62
   1090c:	23 96       	adiw	r28, 0x03	; 3
   1090e:	e2 e0       	ldi	r30, 0x02	; 2
   10910:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00010914 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10914:	cf 93       	push	r28
   10916:	df 93       	push	r29
   10918:	00 d0       	rcall	.+0      	; 0x1091a <dbf_lseek+0x6>
   1091a:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   1091c:	0e 94 77 60 	call	0xc0ee	; 0xc0ee <f_lseek>
   10920:	ec 01       	movw	r28, r24
    if(rc)
   10922:	89 2b       	or	r24, r25
   10924:	69 f0       	breq	.+26     	; 0x10940 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10926:	8e e8       	ldi	r24, 0x8E	; 142
   10928:	9e e0       	ldi	r25, 0x0E	; 14
   1092a:	a0 e0       	ldi	r26, 0x00	; 0
   1092c:	ed b7       	in	r30, 0x3d	; 61
   1092e:	fe b7       	in	r31, 0x3e	; 62
   10930:	81 83       	std	Z+1, r24	; 0x01
   10932:	92 83       	std	Z+2, r25	; 0x02
   10934:	a3 83       	std	Z+3, r26	; 0x03
   10936:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        put_rc(rc);
   1093a:	ce 01       	movw	r24, r28
   1093c:	0e 94 7d 70 	call	0xe0fa	; 0xe0fa <put_rc>
        return (rc);
    }
    return(0);
}
   10940:	ce 01       	movw	r24, r28
   10942:	cd b7       	in	r28, 0x3d	; 61
   10944:	de b7       	in	r29, 0x3e	; 62
   10946:	23 96       	adiw	r28, 0x03	; 3
   10948:	e2 e0       	ldi	r30, 0x02	; 2
   1094a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0001094e <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   1094e:	cf 93       	push	r28
   10950:	df 93       	push	r29
   10952:	00 d0       	rcall	.+0      	; 0x10954 <dbf_close+0x6>
   10954:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10956:	0e 94 cd 5e 	call	0xbd9a	; 0xbd9a <f_close>
   1095a:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   1095c:	89 2b       	or	r24, r25
   1095e:	69 f0       	breq	.+26     	; 0x1097a <dbf_close+0x2c>
    {
        printf("Close error: ");
   10960:	80 e8       	ldi	r24, 0x80	; 128
   10962:	9e e0       	ldi	r25, 0x0E	; 14
   10964:	a0 e0       	ldi	r26, 0x00	; 0
   10966:	ed b7       	in	r30, 0x3d	; 61
   10968:	fe b7       	in	r31, 0x3e	; 62
   1096a:	81 83       	std	Z+1, r24	; 0x01
   1096c:	92 83       	std	Z+2, r25	; 0x02
   1096e:	a3 83       	std	Z+3, r26	; 0x03
   10970:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        put_rc(rc);
   10974:	ce 01       	movw	r24, r28
   10976:	0e 94 7d 70 	call	0xe0fa	; 0xe0fa <put_rc>
        return (rc);
    }
    return(0);
}
   1097a:	ce 01       	movw	r24, r28
   1097c:	cd b7       	in	r28, 0x3d	; 61
   1097e:	de b7       	in	r29, 0x3e	; 62
   10980:	23 96       	adiw	r28, 0x03	; 3
   10982:	e2 e0       	ldi	r30, 0x02	; 2
   10984:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00010988 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10988:	a6 e2       	ldi	r26, 0x26	; 38
   1098a:	b2 e0       	ldi	r27, 0x02	; 2
   1098c:	ea ec       	ldi	r30, 0xCA	; 202
   1098e:	f4 e8       	ldi	r31, 0x84	; 132
   10990:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
   10994:	4a 01       	movw	r8, r20
   10996:	5b 01       	movw	r10, r22
   10998:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1099a:	cb 5d       	subi	r28, 0xDB	; 219
   1099c:	dd 4f       	sbci	r29, 0xFD	; 253
   1099e:	19 82       	std	Y+1, r1	; 0x01
   109a0:	18 82       	st	Y, r1
   109a2:	c5 52       	subi	r28, 0x25	; 37
   109a4:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   109a6:	43 e0       	ldi	r20, 0x03	; 3
   109a8:	bc 01       	movw	r22, r24
   109aa:	ce 01       	movw	r24, r28
   109ac:	01 96       	adiw	r24, 0x01	; 1
   109ae:	55 df       	rcall	.-342    	; 0x1085a <dbf_open>
    if( rc != FR_OK)
   109b0:	89 2b       	or	r24, r25
   109b2:	19 f0       	breq	.+6      	; 0x109ba <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   109b4:	81 e1       	ldi	r24, 0x11	; 17
   109b6:	90 e0       	ldi	r25, 0x00	; 0
   109b8:	2f c0       	rjmp	.+94     	; 0x10a18 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   109ba:	b5 01       	movw	r22, r10
   109bc:	a4 01       	movw	r20, r8
   109be:	ce 01       	movw	r24, r28
   109c0:	01 96       	adiw	r24, 0x01	; 1
   109c2:	a8 df       	rcall	.-176    	; 0x10914 <dbf_lseek>
    if( rc != FR_OK)
   109c4:	89 2b       	or	r24, r25
   109c6:	59 f0       	breq	.+22     	; 0x109de <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   109c8:	85 e0       	ldi	r24, 0x05	; 5
   109ca:	90 e0       	ldi	r25, 0x00	; 0
   109cc:	f7 01       	movw	r30, r14
   109ce:	91 83       	std	Z+1, r25	; 0x01
   109d0:	80 83       	st	Z, r24
        dbf_close(&fp);
   109d2:	ce 01       	movw	r24, r28
   109d4:	01 96       	adiw	r24, 0x01	; 1
   109d6:	bb df       	rcall	.-138    	; 0x1094e <dbf_close>
        return( -1 );
   109d8:	8f ef       	ldi	r24, 0xFF	; 255
   109da:	9f ef       	ldi	r25, 0xFF	; 255
   109dc:	27 c0       	rjmp	.+78     	; 0x10a2c <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   109de:	9e 01       	movw	r18, r28
   109e0:	2b 5d       	subi	r18, 0xDB	; 219
   109e2:	3d 4f       	sbci	r19, 0xFD	; 253
   109e4:	a8 01       	movw	r20, r16
   109e6:	b6 01       	movw	r22, r12
   109e8:	ce 01       	movw	r24, r28
   109ea:	01 96       	adiw	r24, 0x01	; 1
   109ec:	59 df       	rcall	.-334    	; 0x108a0 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   109ee:	89 2b       	or	r24, r25
   109f0:	49 f4       	brne	.+18     	; 0x10a04 <dbf_open_read+0x7c>
   109f2:	cb 5d       	subi	r28, 0xDB	; 219
   109f4:	dd 4f       	sbci	r29, 0xFD	; 253
   109f6:	88 81       	ld	r24, Y
   109f8:	99 81       	ldd	r25, Y+1	; 0x01
   109fa:	c5 52       	subi	r28, 0x25	; 37
   109fc:	d2 40       	sbci	r29, 0x02	; 2
   109fe:	08 17       	cp	r16, r24
   10a00:	19 07       	cpc	r17, r25
   10a02:	19 f0       	breq	.+6      	; 0x10a0a <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10a04:	81 e0       	ldi	r24, 0x01	; 1
   10a06:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10a08:	e1 cf       	rjmp	.-62     	; 0x109cc <dbf_open_read+0x44>
   10a0a:	ce 01       	movw	r24, r28
   10a0c:	01 96       	adiw	r24, 0x01	; 1
   10a0e:	9f df       	rcall	.-194    	; 0x1094e <dbf_close>
    if( rc != FR_OK)
   10a10:	89 2b       	or	r24, r25
   10a12:	31 f0       	breq	.+12     	; 0x10a20 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10a14:	80 e1       	ldi	r24, 0x10	; 16
   10a16:	90 e0       	ldi	r25, 0x00	; 0
   10a18:	f7 01       	movw	r30, r14
   10a1a:	91 83       	std	Z+1, r25	; 0x01
   10a1c:	80 83       	st	Z, r24
   10a1e:	dc cf       	rjmp	.-72     	; 0x109d8 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10a20:	cb 5d       	subi	r28, 0xDB	; 219
   10a22:	dd 4f       	sbci	r29, 0xFD	; 253
   10a24:	88 81       	ld	r24, Y
   10a26:	99 81       	ldd	r25, Y+1	; 0x01
   10a28:	c5 52       	subi	r28, 0x25	; 37
   10a2a:	d2 40       	sbci	r29, 0x02	; 2
}
   10a2c:	ca 5d       	subi	r28, 0xDA	; 218
   10a2e:	dd 4f       	sbci	r29, 0xFD	; 253
   10a30:	ec e0       	ldi	r30, 0x0C	; 12
   10a32:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

00010a36 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10a36:	a6 e2       	ldi	r26, 0x26	; 38
   10a38:	b2 e0       	ldi	r27, 0x02	; 2
   10a3a:	e1 e2       	ldi	r30, 0x21	; 33
   10a3c:	f5 e8       	ldi	r31, 0x85	; 133
   10a3e:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
   10a42:	4a 01       	movw	r8, r20
   10a44:	5b 01       	movw	r10, r22
   10a46:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10a48:	cb 5d       	subi	r28, 0xDB	; 219
   10a4a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a4c:	19 82       	std	Y+1, r1	; 0x01
   10a4e:	18 82       	st	Y, r1
   10a50:	c5 52       	subi	r28, 0x25	; 37
   10a52:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10a54:	43 e0       	ldi	r20, 0x03	; 3
   10a56:	bc 01       	movw	r22, r24
   10a58:	ce 01       	movw	r24, r28
   10a5a:	01 96       	adiw	r24, 0x01	; 1
   10a5c:	fe de       	rcall	.-516    	; 0x1085a <dbf_open>
    if( rc != FR_OK)
   10a5e:	89 2b       	or	r24, r25
   10a60:	19 f0       	breq	.+6      	; 0x10a68 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10a62:	82 e1       	ldi	r24, 0x12	; 18
   10a64:	90 e0       	ldi	r25, 0x00	; 0
   10a66:	2f c0       	rjmp	.+94     	; 0x10ac6 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10a68:	b5 01       	movw	r22, r10
   10a6a:	a4 01       	movw	r20, r8
   10a6c:	ce 01       	movw	r24, r28
   10a6e:	01 96       	adiw	r24, 0x01	; 1
   10a70:	51 df       	rcall	.-350    	; 0x10914 <dbf_lseek>
    if( rc != FR_OK)
   10a72:	89 2b       	or	r24, r25
   10a74:	59 f0       	breq	.+22     	; 0x10a8c <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10a76:	86 e0       	ldi	r24, 0x06	; 6
   10a78:	90 e0       	ldi	r25, 0x00	; 0
   10a7a:	f7 01       	movw	r30, r14
   10a7c:	91 83       	std	Z+1, r25	; 0x01
   10a7e:	80 83       	st	Z, r24
        dbf_close(&fp);
   10a80:	ce 01       	movw	r24, r28
   10a82:	01 96       	adiw	r24, 0x01	; 1
   10a84:	64 df       	rcall	.-312    	; 0x1094e <dbf_close>
        return( -1 );
   10a86:	8f ef       	ldi	r24, 0xFF	; 255
   10a88:	9f ef       	ldi	r25, 0xFF	; 255
   10a8a:	27 c0       	rjmp	.+78     	; 0x10ada <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10a8c:	9e 01       	movw	r18, r28
   10a8e:	2b 5d       	subi	r18, 0xDB	; 219
   10a90:	3d 4f       	sbci	r19, 0xFD	; 253
   10a92:	a8 01       	movw	r20, r16
   10a94:	b6 01       	movw	r22, r12
   10a96:	ce 01       	movw	r24, r28
   10a98:	01 96       	adiw	r24, 0x01	; 1
   10a9a:	1f df       	rcall	.-450    	; 0x108da <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10a9c:	89 2b       	or	r24, r25
   10a9e:	49 f4       	brne	.+18     	; 0x10ab2 <dbf_open_write+0x7c>
   10aa0:	cb 5d       	subi	r28, 0xDB	; 219
   10aa2:	dd 4f       	sbci	r29, 0xFD	; 253
   10aa4:	88 81       	ld	r24, Y
   10aa6:	99 81       	ldd	r25, Y+1	; 0x01
   10aa8:	c5 52       	subi	r28, 0x25	; 37
   10aaa:	d2 40       	sbci	r29, 0x02	; 2
   10aac:	08 17       	cp	r16, r24
   10aae:	19 07       	cpc	r17, r25
   10ab0:	19 f0       	breq	.+6      	; 0x10ab8 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10ab2:	82 e0       	ldi	r24, 0x02	; 2
   10ab4:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10ab6:	e1 cf       	rjmp	.-62     	; 0x10a7a <dbf_open_write+0x44>
   10ab8:	ce 01       	movw	r24, r28
   10aba:	01 96       	adiw	r24, 0x01	; 1
   10abc:	48 df       	rcall	.-368    	; 0x1094e <dbf_close>
    if( rc != FR_OK)
   10abe:	89 2b       	or	r24, r25
   10ac0:	31 f0       	breq	.+12     	; 0x10ace <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10ac2:	80 e1       	ldi	r24, 0x10	; 16
   10ac4:	90 e0       	ldi	r25, 0x00	; 0
   10ac6:	f7 01       	movw	r30, r14
   10ac8:	91 83       	std	Z+1, r25	; 0x01
   10aca:	80 83       	st	Z, r24
   10acc:	dc cf       	rjmp	.-72     	; 0x10a86 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10ace:	cb 5d       	subi	r28, 0xDB	; 219
   10ad0:	dd 4f       	sbci	r29, 0xFD	; 253
   10ad2:	88 81       	ld	r24, Y
   10ad4:	99 81       	ldd	r25, Y+1	; 0x01
   10ad6:	c5 52       	subi	r28, 0x25	; 37
   10ad8:	d2 40       	sbci	r29, 0x02	; 2
}
   10ada:	ca 5d       	subi	r28, 0xDA	; 218
   10adc:	dd 4f       	sbci	r29, 0xFD	; 253
   10ade:	ec e0       	ldi	r30, 0x0C	; 12
   10ae0:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

00010ae4 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10ae4:	0c 94 79 35 	jmp	0x6af2	; 0x6af2 <clock_elapsed_begin>
   10ae8:	08 95       	ret

00010aea <gpib_timer_reset>:
   10aea:	f8 94       	cli
   10aec:	ef ed       	ldi	r30, 0xDF	; 223
   10aee:	fc e1       	ldi	r31, 0x1C	; 28
   10af0:	10 82       	st	Z, r1
   10af2:	11 82       	std	Z+1, r1	; 0x01
   10af4:	12 82       	std	Z+2, r1	; 0x02
   10af6:	13 82       	std	Z+3, r1	; 0x03
   10af8:	14 82       	std	Z+4, r1	; 0x04
   10afa:	15 82       	std	Z+5, r1	; 0x05
   10afc:	16 82       	std	Z+6, r1	; 0x06
   10afe:	17 82       	std	Z+7, r1	; 0x07
   10b00:	81 e0       	ldi	r24, 0x01	; 1
   10b02:	80 87       	std	Z+8, r24	; 0x08
   10b04:	78 94       	sei
   10b06:	08 95       	ret

00010b08 <gpib_timer_elapsed_end>:
   10b08:	0c 94 7f 35 	jmp	0x6afe	; 0x6afe <clock_elapsed_end>
   10b0c:	08 95       	ret

00010b0e <gpib_timer_task>:
   10b0e:	f8 94       	cli
   10b10:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10b14:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10b18:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10b1c:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10b20:	89 2b       	or	r24, r25
   10b22:	8a 2b       	or	r24, r26
   10b24:	8b 2b       	or	r24, r27
   10b26:	a1 f0       	breq	.+40     	; 0x10b50 <gpib_timer_task+0x42>
   10b28:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10b2c:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10b30:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10b34:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10b38:	01 97       	sbiw	r24, 0x01	; 1
   10b3a:	a1 09       	sbc	r26, r1
   10b3c:	b1 09       	sbc	r27, r1
   10b3e:	80 93 e3 1c 	sts	0x1CE3, r24	; 0x801ce3 <gpib_timer+0x4>
   10b42:	90 93 e4 1c 	sts	0x1CE4, r25	; 0x801ce4 <gpib_timer+0x5>
   10b46:	a0 93 e5 1c 	sts	0x1CE5, r26	; 0x801ce5 <gpib_timer+0x6>
   10b4a:	b0 93 e6 1c 	sts	0x1CE6, r27	; 0x801ce6 <gpib_timer+0x7>
   10b4e:	03 c0       	rjmp	.+6      	; 0x10b56 <gpib_timer_task+0x48>
   10b50:	81 e0       	ldi	r24, 0x01	; 1
   10b52:	80 93 e7 1c 	sts	0x1CE7, r24	; 0x801ce7 <gpib_timer+0x8>
   10b56:	78 94       	sei
   10b58:	08 95       	ret

00010b5a <gpib_timeout_set>:
   10b5a:	f8 94       	cli
   10b5c:	ef ed       	ldi	r30, 0xDF	; 223
   10b5e:	fc e1       	ldi	r31, 0x1C	; 28
   10b60:	64 83       	std	Z+4, r22	; 0x04
   10b62:	75 83       	std	Z+5, r23	; 0x05
   10b64:	86 83       	std	Z+6, r24	; 0x06
   10b66:	97 83       	std	Z+7, r25	; 0x07
   10b68:	10 86       	std	Z+8, r1	; 0x08
   10b6a:	78 94       	sei
   10b6c:	08 95       	ret

00010b6e <gpib_bus_init>:
   10b6e:	00 d0       	rcall	.+0      	; 0x10b70 <gpib_bus_init+0x2>
   10b70:	1f 92       	push	r1
   10b72:	8f b7       	in	r24, 0x3f	; 63
   10b74:	f8 94       	cli
   10b76:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
   10b7a:	11 b8       	out	0x01, r1	; 1
   10b7c:	9f ef       	ldi	r25, 0xFF	; 255
   10b7e:	92 b9       	out	0x02, r25	; 2
   10b80:	21 98       	cbi	0x04, 1	; 4
   10b82:	29 9a       	sbi	0x05, 1	; 5
   10b84:	52 98       	cbi	0x0a, 2	; 10
   10b86:	5a 9a       	sbi	0x0b, 2	; 11
   10b88:	53 98       	cbi	0x0a, 3	; 10
   10b8a:	5b 9a       	sbi	0x0b, 3	; 11
   10b8c:	56 98       	cbi	0x0a, 6	; 10
   10b8e:	5e 9a       	sbi	0x0b, 6	; 11
   10b90:	54 98       	cbi	0x0a, 4	; 10
   10b92:	5c 9a       	sbi	0x0b, 4	; 11
   10b94:	57 98       	cbi	0x0a, 7	; 10
   10b96:	5f 9a       	sbi	0x0b, 7	; 11
   10b98:	55 98       	cbi	0x0a, 5	; 10
   10b9a:	5d 9a       	sbi	0x0b, 5	; 11
   10b9c:	20 98       	cbi	0x04, 0	; 4
   10b9e:	28 9a       	sbi	0x05, 0	; 5
   10ba0:	45 98       	cbi	0x08, 5	; 8
   10ba2:	3d 9a       	sbi	0x07, 5	; 7
   10ba4:	44 9a       	sbi	0x08, 4	; 8
   10ba6:	3c 9a       	sbi	0x07, 4	; 7
   10ba8:	43 98       	cbi	0x08, 3	; 8
   10baa:	3b 9a       	sbi	0x07, 3	; 7
   10bac:	42 98       	cbi	0x08, 2	; 8
   10bae:	3a 9a       	sbi	0x07, 2	; 7
   10bb0:	9d e0       	ldi	r25, 0x0D	; 13
   10bb2:	9a 95       	dec	r25
   10bb4:	f1 f7       	brne	.-4      	; 0x10bb2 <gpib_bus_init+0x44>
   10bb6:	00 00       	nop
   10bb8:	8f bf       	out	0x3f, r24	; 63
   10bba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10bbe:	82 ff       	sbrs	r24, 2
   10bc0:	0a c0       	rjmp	.+20     	; 0x10bd6 <gpib_bus_init+0x68>
   10bc2:	88 e1       	ldi	r24, 0x18	; 24
   10bc4:	92 e1       	ldi	r25, 0x12	; 18
   10bc6:	a0 e0       	ldi	r26, 0x00	; 0
   10bc8:	ed b7       	in	r30, 0x3d	; 61
   10bca:	fe b7       	in	r31, 0x3e	; 62
   10bcc:	81 83       	std	Z+1, r24	; 0x01
   10bce:	92 83       	std	Z+2, r25	; 0x02
   10bd0:	a3 83       	std	Z+3, r26	; 0x03
   10bd2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10bd6:	0f 90       	pop	r0
   10bd8:	0f 90       	pop	r0
   10bda:	0f 90       	pop	r0
   10bdc:	08 95       	ret

00010bde <gpib_rx_init>:
   10bde:	9f b7       	in	r25, 0x3f	; 63
   10be0:	f8 94       	cli
   10be2:	11 b8       	out	0x01, r1	; 1
   10be4:	2f ef       	ldi	r18, 0xFF	; 255
   10be6:	22 b9       	out	0x02, r18	; 2
   10be8:	21 98       	cbi	0x04, 1	; 4
   10bea:	29 9a       	sbi	0x05, 1	; 5
   10bec:	20 98       	cbi	0x04, 0	; 4
   10bee:	28 9a       	sbi	0x05, 0	; 5
   10bf0:	4e 9b       	sbis	0x09, 6	; 9
   10bf2:	09 c0       	rjmp	.+18     	; 0x10c06 <gpib_rx_init+0x28>
   10bf4:	81 11       	cpse	r24, r1
   10bf6:	07 c0       	rjmp	.+14     	; 0x10c06 <gpib_rx_init+0x28>
   10bf8:	52 98       	cbi	0x0a, 2	; 10
   10bfa:	5a 9a       	sbi	0x0b, 2	; 11
   10bfc:	53 98       	cbi	0x0a, 3	; 10
   10bfe:	5b 9a       	sbi	0x0b, 3	; 11
   10c00:	42 98       	cbi	0x08, 2	; 8
   10c02:	3a 9a       	sbi	0x07, 2	; 7
   10c04:	08 c0       	rjmp	.+16     	; 0x10c16 <gpib_rx_init+0x38>
   10c06:	42 98       	cbi	0x08, 2	; 8
   10c08:	3a 9a       	sbi	0x07, 2	; 7
   10c0a:	5b 98       	cbi	0x0b, 3	; 11
   10c0c:	53 9a       	sbi	0x0a, 3	; 10
   10c0e:	5a 98       	cbi	0x0b, 2	; 11
   10c10:	52 9a       	sbi	0x0a, 2	; 10
   10c12:	88 23       	and	r24, r24
   10c14:	89 f3       	breq	.-30     	; 0x10bf8 <gpib_rx_init+0x1a>
   10c16:	9f bf       	out	0x3f, r25	; 63
   10c18:	08 95       	ret

00010c1a <gpib_tx_init>:
   10c1a:	9f b7       	in	r25, 0x3f	; 63
   10c1c:	f8 94       	cli
   10c1e:	11 b8       	out	0x01, r1	; 1
   10c20:	8f ef       	ldi	r24, 0xFF	; 255
   10c22:	82 b9       	out	0x02, r24	; 2
   10c24:	21 98       	cbi	0x04, 1	; 4
   10c26:	29 9a       	sbi	0x05, 1	; 5
   10c28:	52 98       	cbi	0x0a, 2	; 10
   10c2a:	5a 9a       	sbi	0x0b, 2	; 11
   10c2c:	53 98       	cbi	0x0a, 3	; 10
   10c2e:	5b 9a       	sbi	0x0b, 3	; 11
   10c30:	20 98       	cbi	0x04, 0	; 4
   10c32:	28 9a       	sbi	0x05, 0	; 5
   10c34:	42 9a       	sbi	0x08, 2	; 8
   10c36:	3a 9a       	sbi	0x07, 2	; 7
   10c38:	81 b9       	out	0x01, r24	; 1
   10c3a:	9f bf       	out	0x3f, r25	; 63
   10c3c:	08 95       	ret

00010c3e <gpib_state_init>:
   10c3e:	00 d0       	rcall	.+0      	; 0x10c40 <gpib_state_init+0x2>
   10c40:	1f 92       	push	r1
   10c42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c46:	82 ff       	sbrs	r24, 2
   10c48:	0a c0       	rjmp	.+20     	; 0x10c5e <gpib_state_init+0x20>
   10c4a:	85 e0       	ldi	r24, 0x05	; 5
   10c4c:	92 e1       	ldi	r25, 0x12	; 18
   10c4e:	a0 e0       	ldi	r26, 0x00	; 0
   10c50:	ed b7       	in	r30, 0x3d	; 61
   10c52:	fe b7       	in	r31, 0x3e	; 62
   10c54:	81 83       	std	Z+1, r24	; 0x01
   10c56:	92 83       	std	Z+2, r25	; 0x02
   10c58:	a3 83       	std	Z+3, r26	; 0x03
   10c5a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10c5e:	cc dd       	rcall	.-1128   	; 0x107f8 <ppr_init>
   10c60:	0e 94 c0 90 	call	0x12180	; 0x12180 <listen_cleanup>
   10c64:	0e 94 d6 91 	call	0x123ac	; 0x123ac <talk_cleanup>
   10c68:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   10c6c:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <talking>
   10c70:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking_last>
   10c74:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>
   10c78:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <listening_last>
   10c7c:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <lastcmd+0x1>
   10c80:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <lastcmd>
   10c84:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
   10c88:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   10c8c:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
   10c90:	0f 90       	pop	r0
   10c92:	0f 90       	pop	r0
   10c94:	0f 90       	pop	r0
   10c96:	08 95       	ret

00010c98 <gpib_enable_PPR>:
   10c98:	cf 93       	push	r28
   10c9a:	df 93       	push	r29
   10c9c:	ad b7       	in	r26, 0x3d	; 61
   10c9e:	be b7       	in	r27, 0x3e	; 62
   10ca0:	17 97       	sbiw	r26, 0x07	; 7
   10ca2:	0f b6       	in	r0, 0x3f	; 63
   10ca4:	f8 94       	cli
   10ca6:	be bf       	out	0x3e, r27	; 62
   10ca8:	0f be       	out	0x3f, r0	; 63
   10caa:	ad bf       	out	0x3d, r26	; 61
   10cac:	ec 01       	movw	r28, r24
   10cae:	88 30       	cpi	r24, 0x08	; 8
   10cb0:	91 05       	cpc	r25, r1
   10cb2:	68 f0       	brcs	.+26     	; 0x10cce <gpib_enable_PPR+0x36>
   10cb4:	ed b7       	in	r30, 0x3d	; 61
   10cb6:	fe b7       	in	r31, 0x3e	; 62
   10cb8:	95 83       	std	Z+5, r25	; 0x05
   10cba:	84 83       	std	Z+4, r24	; 0x04
   10cbc:	8f ed       	ldi	r24, 0xDF	; 223
   10cbe:	91 e1       	ldi	r25, 0x11	; 17
   10cc0:	a0 e0       	ldi	r26, 0x00	; 0
   10cc2:	81 83       	std	Z+1, r24	; 0x01
   10cc4:	92 83       	std	Z+2, r25	; 0x02
   10cc6:	a3 83       	std	Z+3, r26	; 0x03
   10cc8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10ccc:	15 c0       	rjmp	.+42     	; 0x10cf8 <gpib_enable_PPR+0x60>
   10cce:	aa dd       	rcall	.-1196   	; 0x10824 <ppr_bit_set>
   10cd0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cd4:	81 ff       	sbrs	r24, 1
   10cd6:	10 c0       	rjmp	.+32     	; 0x10cf8 <gpib_enable_PPR+0x60>
   10cd8:	8b dd       	rcall	.-1258   	; 0x107f0 <ppr_reg>
   10cda:	90 e0       	ldi	r25, 0x00	; 0
   10cdc:	ed b7       	in	r30, 0x3d	; 61
   10cde:	fe b7       	in	r31, 0x3e	; 62
   10ce0:	97 83       	std	Z+7, r25	; 0x07
   10ce2:	86 83       	std	Z+6, r24	; 0x06
   10ce4:	d5 83       	std	Z+5, r29	; 0x05
   10ce6:	c4 83       	std	Z+4, r28	; 0x04
   10ce8:	84 ec       	ldi	r24, 0xC4	; 196
   10cea:	91 e1       	ldi	r25, 0x11	; 17
   10cec:	a0 e0       	ldi	r26, 0x00	; 0
   10cee:	81 83       	std	Z+1, r24	; 0x01
   10cf0:	92 83       	std	Z+2, r25	; 0x02
   10cf2:	a3 83       	std	Z+3, r26	; 0x03
   10cf4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10cf8:	cd b7       	in	r28, 0x3d	; 61
   10cfa:	de b7       	in	r29, 0x3e	; 62
   10cfc:	27 96       	adiw	r28, 0x07	; 7
   10cfe:	e2 e0       	ldi	r30, 0x02	; 2
   10d00:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00010d04 <gpib_disable_PPR>:
   10d04:	cf 93       	push	r28
   10d06:	df 93       	push	r29
   10d08:	ad b7       	in	r26, 0x3d	; 61
   10d0a:	be b7       	in	r27, 0x3e	; 62
   10d0c:	17 97       	sbiw	r26, 0x07	; 7
   10d0e:	0f b6       	in	r0, 0x3f	; 63
   10d10:	f8 94       	cli
   10d12:	be bf       	out	0x3e, r27	; 62
   10d14:	0f be       	out	0x3f, r0	; 63
   10d16:	ad bf       	out	0x3d, r26	; 61
   10d18:	ec 01       	movw	r28, r24
   10d1a:	88 30       	cpi	r24, 0x08	; 8
   10d1c:	91 05       	cpc	r25, r1
   10d1e:	68 f0       	brcs	.+26     	; 0x10d3a <gpib_disable_PPR+0x36>
   10d20:	ed b7       	in	r30, 0x3d	; 61
   10d22:	fe b7       	in	r31, 0x3e	; 62
   10d24:	95 83       	std	Z+5, r25	; 0x05
   10d26:	84 83       	std	Z+4, r24	; 0x04
   10d28:	8d e9       	ldi	r24, 0x9D	; 157
   10d2a:	91 e1       	ldi	r25, 0x11	; 17
   10d2c:	a0 e0       	ldi	r26, 0x00	; 0
   10d2e:	81 83       	std	Z+1, r24	; 0x01
   10d30:	92 83       	std	Z+2, r25	; 0x02
   10d32:	a3 83       	std	Z+3, r26	; 0x03
   10d34:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10d38:	15 c0       	rjmp	.+42     	; 0x10d64 <gpib_disable_PPR+0x60>
   10d3a:	81 dd       	rcall	.-1278   	; 0x1083e <ppr_bit_clr>
   10d3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d40:	81 ff       	sbrs	r24, 1
   10d42:	10 c0       	rjmp	.+32     	; 0x10d64 <gpib_disable_PPR+0x60>
   10d44:	55 dd       	rcall	.-1366   	; 0x107f0 <ppr_reg>
   10d46:	90 e0       	ldi	r25, 0x00	; 0
   10d48:	ed b7       	in	r30, 0x3d	; 61
   10d4a:	fe b7       	in	r31, 0x3e	; 62
   10d4c:	97 83       	std	Z+7, r25	; 0x07
   10d4e:	86 83       	std	Z+6, r24	; 0x06
   10d50:	d5 83       	std	Z+5, r29	; 0x05
   10d52:	c4 83       	std	Z+4, r28	; 0x04
   10d54:	82 e8       	ldi	r24, 0x82	; 130
   10d56:	91 e1       	ldi	r25, 0x11	; 17
   10d58:	a0 e0       	ldi	r26, 0x00	; 0
   10d5a:	81 83       	std	Z+1, r24	; 0x01
   10d5c:	92 83       	std	Z+2, r25	; 0x02
   10d5e:	a3 83       	std	Z+3, r26	; 0x03
   10d60:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10d64:	cd b7       	in	r28, 0x3d	; 61
   10d66:	de b7       	in	r29, 0x3e	; 62
   10d68:	27 96       	adiw	r28, 0x07	; 7
   10d6a:	e2 e0       	ldi	r30, 0x02	; 2
   10d6c:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00010d70 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10d70:	cf 93       	push	r28
   10d72:	df 93       	push	r29
   10d74:	00 d0       	rcall	.+0      	; 0x10d76 <gpib_unread+0x6>
   10d76:	1f 92       	push	r1
   10d78:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10d7a:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <gpib_unread_f>
   10d7e:	81 11       	cpse	r24, r1
   10d80:	08 c0       	rjmp	.+16     	; 0x10d92 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10d82:	d0 93 f3 1e 	sts	0x1EF3, r29	; 0x801ef3 <gpib_unread_data+0x1>
   10d86:	c0 93 f2 1e 	sts	0x1EF2, r28	; 0x801ef2 <gpib_unread_data>
        gpib_unread_f = 1;
   10d8a:	81 e0       	ldi	r24, 0x01	; 1
   10d8c:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <gpib_unread_f>
   10d90:	12 c0       	rjmp	.+36     	; 0x10db6 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d96:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d9a:	85 70       	andi	r24, 0x05	; 5
   10d9c:	99 27       	eor	r25, r25
   10d9e:	89 2b       	or	r24, r25
   10da0:	51 f0       	breq	.+20     	; 0x10db6 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10da2:	84 e5       	ldi	r24, 0x54	; 84
   10da4:	91 e1       	ldi	r25, 0x11	; 17
   10da6:	a0 e0       	ldi	r26, 0x00	; 0
   10da8:	ed b7       	in	r30, 0x3d	; 61
   10daa:	fe b7       	in	r31, 0x3e	; 62
   10dac:	81 83       	std	Z+1, r24	; 0x01
   10dae:	92 83       	std	Z+2, r25	; 0x02
   10db0:	a3 83       	std	Z+3, r26	; 0x03
   10db2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }
    return(ch);
}
   10db6:	ce 01       	movw	r24, r28
   10db8:	cd b7       	in	r28, 0x3d	; 61
   10dba:	de b7       	in	r29, 0x3e	; 62
   10dbc:	23 96       	adiw	r28, 0x03	; 3
   10dbe:	e2 e0       	ldi	r30, 0x02	; 2
   10dc0:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00010dc4 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10dc4:	11 b8       	out	0x01, r1	; 1
   10dc6:	80 b1       	in	r24, 0x00	; 0
   10dc8:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10dca:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10dcc:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10dce:	08 95       	ret

00010dd0 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10dd0:	4e 99       	sbic	0x09, 6	; 9
   10dd2:	03 c0       	rjmp	.+6      	; 0x10dda <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10dd4:	80 e0       	ldi	r24, 0x00	; 0
   10dd6:	94 e0       	ldi	r25, 0x04	; 4
   10dd8:	02 c0       	rjmp	.+4      	; 0x10dde <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10dda:	80 e0       	ldi	r24, 0x00	; 0
   10ddc:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10dde:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10de0:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10de2:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10de4:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10de6:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10de8:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10dea:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10dec:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10dee:	08 95       	ret

00010df0 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10df0:	19 99       	sbic	0x03, 1	; 3
   10df2:	03 c0       	rjmp	.+6      	; 0x10dfa <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10df4:	80 e0       	ldi	r24, 0x00	; 0
   10df6:	90 e2       	ldi	r25, 0x20	; 32
   10df8:	02 c0       	rjmp	.+4      	; 0x10dfe <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10dfa:	80 e0       	ldi	r24, 0x00	; 0
   10dfc:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10dfe:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10e00:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10e02:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10e04:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10e06:	08 95       	ret

00010e08 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10e08:	2f 92       	push	r2
   10e0a:	3f 92       	push	r3
   10e0c:	4f 92       	push	r4
   10e0e:	6f 92       	push	r6
   10e10:	7f 92       	push	r7
   10e12:	8f 92       	push	r8
   10e14:	af 92       	push	r10
   10e16:	bf 92       	push	r11
   10e18:	cf 92       	push	r12
   10e1a:	df 92       	push	r13
   10e1c:	ef 92       	push	r14
   10e1e:	1f 93       	push	r17
   10e20:	cf 93       	push	r28
   10e22:	df 93       	push	r29
   10e24:	cd b7       	in	r28, 0x3d	; 61
   10e26:	de b7       	in	r29, 0x3e	; 62
   10e28:	2a 97       	sbiw	r28, 0x0a	; 10
   10e2a:	0f b6       	in	r0, 0x3f	; 63
   10e2c:	f8 94       	cli
   10e2e:	de bf       	out	0x3e, r29	; 62
   10e30:	0f be       	out	0x3f, r0	; 63
   10e32:	cd bf       	out	0x3d, r28	; 61
   10e34:	9a 87       	std	Y+10, r25	; 0x0a
   10e36:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10e38:	64 ef       	ldi	r22, 0xF4	; 244
   10e3a:	71 e0       	ldi	r23, 0x01	; 1
   10e3c:	80 e0       	ldi	r24, 0x00	; 0
   10e3e:	90 e0       	ldi	r25, 0x00	; 0
   10e40:	8c de       	rcall	.-744    	; 0x10b5a <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10e42:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10e44:	8f e4       	ldi	r24, 0x4F	; 79
   10e46:	90 e1       	ldi	r25, 0x10	; 16
   10e48:	6c 01       	movw	r12, r24
   10e4a:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e4c:	8e e7       	ldi	r24, 0x7E	; 126
   10e4e:	90 e1       	ldi	r25, 0x10	; 16
   10e50:	3c 01       	movw	r6, r24
   10e52:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10e54:	aa 24       	eor	r10, r10
   10e56:	a3 94       	inc	r10
   10e58:	b1 2c       	mov	r11, r1
   10e5a:	86 ef       	ldi	r24, 0xF6	; 246
   10e5c:	90 e1       	ldi	r25, 0x10	; 16
   10e5e:	1c 01       	movw	r2, r24
   10e60:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e62:	8a eb       	ldi	r24, 0xBA	; 186
   10e64:	90 e1       	ldi	r25, 0x10	; 16
   10e66:	9c 01       	movw	r18, r24
   10e68:	40 e0       	ldi	r20, 0x00	; 0
   10e6a:	2e 83       	std	Y+6, r18	; 0x06
   10e6c:	3f 83       	std	Y+7, r19	; 0x07
   10e6e:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10e70:	80 e0       	ldi	r24, 0x00	; 0
   10e72:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <uart_keyhit>
   10e76:	89 2b       	or	r24, r25
   10e78:	09 f0       	breq	.+2      	; 0x10e7c <gpib_write_byte+0x74>
   10e7a:	e7 c0       	rjmp	.+462    	; 0x1104a <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10e7c:	4c 99       	sbic	0x09, 4	; 9
   10e7e:	19 c0       	rjmp	.+50     	; 0x10eb2 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10e80:	89 85       	ldd	r24, Y+9	; 0x09
   10e82:	9a 85       	ldd	r25, Y+10	; 0x0a
   10e84:	90 61       	ori	r25, 0x10	; 16
   10e86:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10e88:	89 87       	std	Y+9, r24	; 0x09
   10e8a:	71 de       	rcall	.-798    	; 0x10b6e <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10e8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e90:	80 ff       	sbrs	r24, 0
   10e92:	db c0       	rjmp	.+438    	; 0x1104a <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10e94:	81 2f       	mov	r24, r17
   10e96:	90 e0       	ldi	r25, 0x00	; 0
   10e98:	ed b7       	in	r30, 0x3d	; 61
   10e9a:	fe b7       	in	r31, 0x3e	; 62
   10e9c:	95 83       	std	Z+5, r25	; 0x05
   10e9e:	84 83       	std	Z+4, r24	; 0x04
   10ea0:	85 e3       	ldi	r24, 0x35	; 53
   10ea2:	91 e1       	ldi	r25, 0x11	; 17
   10ea4:	a0 e0       	ldi	r26, 0x00	; 0
   10ea6:	81 83       	std	Z+1, r24	; 0x01
   10ea8:	92 83       	std	Z+2, r25	; 0x02
   10eaa:	a3 83       	std	Z+3, r26	; 0x03
   10eac:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10eb0:	cc c0       	rjmp	.+408    	; 0x1104a <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10eb2:	81 2f       	mov	r24, r17
   10eb4:	90 e0       	ldi	r25, 0x00	; 0
   10eb6:	89 30       	cpi	r24, 0x09	; 9
   10eb8:	91 05       	cpc	r25, r1
   10eba:	08 f0       	brcs	.+2      	; 0x10ebe <gpib_write_byte+0xb6>
   10ebc:	be c0       	rjmp	.+380    	; 0x1103a <gpib_write_byte+0x232>
   10ebe:	fc 01       	movw	r30, r24
   10ec0:	e3 54       	subi	r30, 0x43	; 67
   10ec2:	ff 4f       	sbci	r31, 0xFF	; 255
   10ec4:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10ec8:	a8 de       	rcall	.-688    	; 0x10c1a <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10eca:	21 98       	cbi	0x04, 1	; 4
   10ecc:	29 9a       	sbi	0x05, 1	; 5
   10ece:	fd e0       	ldi	r31, 0x0D	; 13
   10ed0:	fa 95       	dec	r31
   10ed2:	f1 f7       	brne	.-4      	; 0x10ed0 <gpib_write_byte+0xc8>
   10ed4:	00 00       	nop
   10ed6:	06 c0       	rjmp	.+12     	; 0x10ee4 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10ed8:	4a 9b       	sbis	0x09, 2	; 9
   10eda:	02 c0       	rjmp	.+4      	; 0x10ee0 <gpib_write_byte+0xd8>
   10edc:	4b 99       	sbic	0x09, 3	; 9
   10ede:	17 c0       	rjmp	.+46     	; 0x10f0e <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10ee0:	4e 9b       	sbis	0x09, 6	; 9
   10ee2:	07 c0       	rjmp	.+14     	; 0x10ef2 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10ee4:	64 ef       	ldi	r22, 0xF4	; 244
   10ee6:	71 e0       	ldi	r23, 0x01	; 1
   10ee8:	80 e0       	ldi	r24, 0x00	; 0
   10eea:	90 e0       	ldi	r25, 0x00	; 0
   10eec:	36 de       	rcall	.-916    	; 0x10b5a <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10eee:	12 e0       	ldi	r17, 0x02	; 2
   10ef0:	bf cf       	rjmp	.-130    	; 0x10e70 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10ef2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ef6:	80 ff       	sbrs	r24, 0
   10ef8:	bb cf       	rjmp	.-138    	; 0x10e70 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10efa:	ed b7       	in	r30, 0x3d	; 61
   10efc:	fe b7       	in	r31, 0x3e	; 62
   10efe:	b5 82       	std	Z+5, r11	; 0x05
   10f00:	a4 82       	std	Z+4, r10	; 0x04
   10f02:	21 82       	std	Z+1, r2	; 0x01
   10f04:	32 82       	std	Z+2, r3	; 0x02
   10f06:	43 82       	std	Z+3, r4	; 0x03
   10f08:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10f0c:	b1 cf       	rjmp	.-158    	; 0x10e70 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f0e:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10f12:	88 23       	and	r24, r24
   10f14:	09 f4       	brne	.+2      	; 0x10f18 <gpib_write_byte+0x110>
   10f16:	ac cf       	rjmp	.-168    	; 0x10e70 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f1c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f20:	85 70       	andi	r24, 0x05	; 5
   10f22:	99 27       	eor	r25, r25
   10f24:	89 2b       	or	r24, r25
   10f26:	c1 f1       	breq	.+112    	; 0x10f98 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f28:	2e 81       	ldd	r18, Y+6	; 0x06
   10f2a:	3f 81       	ldd	r19, Y+7	; 0x07
   10f2c:	48 85       	ldd	r20, Y+8	; 0x08
   10f2e:	ed b7       	in	r30, 0x3d	; 61
   10f30:	fe b7       	in	r31, 0x3e	; 62
   10f32:	21 83       	std	Z+1, r18	; 0x01
   10f34:	32 83       	std	Z+2, r19	; 0x02
   10f36:	43 83       	std	Z+3, r20	; 0x03
   10f38:	2d c0       	rjmp	.+90     	; 0x10f94 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10f3a:	89 85       	ldd	r24, Y+9	; 0x09
   10f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f3e:	90 ff       	sbrs	r25, 0
   10f40:	03 c0       	rjmp	.+6      	; 0x10f48 <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10f42:	28 98       	cbi	0x05, 0	; 5
   10f44:	20 9a       	sbi	0x04, 0	; 4
   10f46:	02 c0       	rjmp	.+4      	; 0x10f4c <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10f48:	20 98       	cbi	0x04, 0	; 4
   10f4a:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10f4c:	8f ef       	ldi	r24, 0xFF	; 255
   10f4e:	81 b9       	out	0x01, r24	; 1
   10f50:	89 85       	ldd	r24, Y+9	; 0x09
   10f52:	80 95       	com	r24
   10f54:	82 b9       	out	0x02, r24	; 2
   10f56:	9d e0       	ldi	r25, 0x0D	; 13
   10f58:	9a 95       	dec	r25
   10f5a:	f1 f7       	brne	.-4      	; 0x10f58 <gpib_write_byte+0x150>
   10f5c:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10f5e:	64 ef       	ldi	r22, 0xF4	; 244
   10f60:	71 e0       	ldi	r23, 0x01	; 1
   10f62:	80 e0       	ldi	r24, 0x00	; 0
   10f64:	90 e0       	ldi	r25, 0x00	; 0
   10f66:	f9 dd       	rcall	.-1038   	; 0x10b5a <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10f68:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10f6a:	82 cf       	rjmp	.-252    	; 0x10e70 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10f6c:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10f6e:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f70:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10f74:	88 23       	and	r24, r24
   10f76:	09 f4       	brne	.+2      	; 0x10f7a <gpib_write_byte+0x172>
   10f78:	7b cf       	rjmp	.-266    	; 0x10e70 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f7e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f82:	85 70       	andi	r24, 0x05	; 5
   10f84:	99 27       	eor	r25, r25
   10f86:	89 2b       	or	r24, r25
   10f88:	39 f0       	breq	.+14     	; 0x10f98 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f8a:	ed b7       	in	r30, 0x3d	; 61
   10f8c:	fe b7       	in	r31, 0x3e	; 62
   10f8e:	61 82       	std	Z+1, r6	; 0x01
   10f90:	72 82       	std	Z+2, r7	; 0x02
   10f92:	83 82       	std	Z+3, r8	; 0x03
   10f94:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10f98:	29 85       	ldd	r18, Y+9	; 0x09
   10f9a:	3a 85       	ldd	r19, Y+10	; 0x0a
   10f9c:	30 64       	ori	r19, 0x40	; 64
   10f9e:	3a 87       	std	Y+10, r19	; 0x0a
   10fa0:	29 87       	std	Y+9, r18	; 0x09
   10fa2:	51 c0       	rjmp	.+162    	; 0x11046 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10fa4:	29 98       	cbi	0x05, 1	; 5
   10fa6:	21 9a       	sbi	0x04, 1	; 4
   10fa8:	3d e0       	ldi	r19, 0x0D	; 13
   10faa:	3a 95       	dec	r19
   10fac:	f1 f7       	brne	.-4      	; 0x10faa <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10fae:	00 00       	nop
   10fb0:	64 ef       	ldi	r22, 0xF4	; 244
   10fb2:	71 e0       	ldi	r23, 0x01	; 1
   10fb4:	80 e0       	ldi	r24, 0x00	; 0
   10fb6:	90 e0       	ldi	r25, 0x00	; 0
   10fb8:	d0 dd       	rcall	.-1120   	; 0x10b5a <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10fba:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10fbc:	59 cf       	rjmp	.-334    	; 0x10e70 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10fbe:	4b 99       	sbic	0x09, 3	; 9
   10fc0:	40 c0       	rjmp	.+128    	; 0x11042 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fc2:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10fc6:	88 23       	and	r24, r24
   10fc8:	09 f4       	brne	.+2      	; 0x10fcc <gpib_write_byte+0x1c4>
   10fca:	52 cf       	rjmp	.-348    	; 0x10e70 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10fcc:	89 85       	ldd	r24, Y+9	; 0x09
   10fce:	9a 85       	ldd	r25, Y+10	; 0x0a
   10fd0:	90 64       	ori	r25, 0x40	; 64
   10fd2:	9a 87       	std	Y+10, r25	; 0x0a
   10fd4:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fda:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10fde:	85 70       	andi	r24, 0x05	; 5
   10fe0:	99 27       	eor	r25, r25
   10fe2:	89 2b       	or	r24, r25
   10fe4:	81 f1       	breq	.+96     	; 0x11046 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10fe6:	ed b7       	in	r30, 0x3d	; 61
   10fe8:	fe b7       	in	r31, 0x3e	; 62
   10fea:	c1 82       	std	Z+1, r12	; 0x01
   10fec:	d2 82       	std	Z+2, r13	; 0x02
   10fee:	e3 82       	std	Z+3, r14	; 0x03
   10ff0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   10ff4:	28 c0       	rjmp	.+80     	; 0x11046 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10ff6:	21 98       	cbi	0x04, 1	; 4
   10ff8:	29 9a       	sbi	0x05, 1	; 5
   10ffa:	fd e0       	ldi	r31, 0x0D	; 13
   10ffc:	fa 95       	dec	r31
   10ffe:	f1 f7       	brne	.-4      	; 0x10ffc <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   11000:	00 00       	nop
   11002:	64 ef       	ldi	r22, 0xF4	; 244
   11004:	71 e0       	ldi	r23, 0x01	; 1
   11006:	80 e0       	ldi	r24, 0x00	; 0
   11008:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   1100a:	a7 dd       	rcall	.-1202   	; 0x10b5a <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   1100c:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   1100e:	30 cf       	rjmp	.-416    	; 0x10e70 <gpib_write_byte+0x68>
   11010:	81 e0       	ldi	r24, 0x01	; 1
   11012:	e5 dd       	rcall	.-1078   	; 0x10bde <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11014:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11018:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1101c:	85 70       	andi	r24, 0x05	; 5
   1101e:	99 27       	eor	r25, r25
   11020:	89 2b       	or	r24, r25
   11022:	99 f0       	breq	.+38     	; 0x1104a <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   11024:	8c e3       	ldi	r24, 0x3C	; 60
   11026:	90 e1       	ldi	r25, 0x10	; 16
   11028:	a0 e0       	ldi	r26, 0x00	; 0
   1102a:	ed b7       	in	r30, 0x3d	; 61
   1102c:	fe b7       	in	r31, 0x3e	; 62
   1102e:	81 83       	std	Z+1, r24	; 0x01
   11030:	92 83       	std	Z+2, r25	; 0x02
   11032:	a3 83       	std	Z+3, r26	; 0x03
   11034:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   11038:	08 c0       	rjmp	.+16     	; 0x1104a <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   1103a:	19 30       	cpi	r17, 0x09	; 9
   1103c:	09 f0       	breq	.+2      	; 0x11040 <gpib_write_byte+0x238>
   1103e:	18 cf       	rjmp	.-464    	; 0x10e70 <gpib_write_byte+0x68>
   11040:	04 c0       	rjmp	.+8      	; 0x1104a <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11042:	16 e0       	ldi	r17, 0x06	; 6
   11044:	15 cf       	rjmp	.-470    	; 0x10e70 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11046:	18 e0       	ldi	r17, 0x08	; 8
   11048:	13 cf       	rjmp	.-474    	; 0x10e70 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1104a:	89 85       	ldd	r24, Y+9	; 0x09
   1104c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1104e:	2a 96       	adiw	r28, 0x0a	; 10
   11050:	0f b6       	in	r0, 0x3f	; 63
   11052:	f8 94       	cli
   11054:	de bf       	out	0x3e, r29	; 62
   11056:	0f be       	out	0x3f, r0	; 63
   11058:	cd bf       	out	0x3d, r28	; 61
   1105a:	df 91       	pop	r29
   1105c:	cf 91       	pop	r28
   1105e:	1f 91       	pop	r17
   11060:	ef 90       	pop	r14
   11062:	df 90       	pop	r13
   11064:	cf 90       	pop	r12
   11066:	bf 90       	pop	r11
   11068:	af 90       	pop	r10
   1106a:	8f 90       	pop	r8
   1106c:	7f 90       	pop	r7
   1106e:	6f 90       	pop	r6
   11070:	4f 90       	pop	r4
   11072:	3f 90       	pop	r3
   11074:	2f 90       	pop	r2
   11076:	08 95       	ret

00011078 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11078:	cf 93       	push	r28
   1107a:	df 93       	push	r29
   1107c:	ec 01       	movw	r28, r24
    if(fo == NULL)
   1107e:	89 2b       	or	r24, r25
   11080:	21 f4       	brne	.+8      	; 0x1108a <gpib_decode_header+0x12>
        fo = stdout;
   11082:	c0 91 c1 1c 	lds	r28, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11086:	d0 91 c2 1c 	lds	r29, 0x1CC2	; 0x801cc2 <__iob+0x3>

    fprintf(fo,"==============================\n");
   1108a:	be 01       	movw	r22, r28
   1108c:	81 e0       	ldi	r24, 0x01	; 1
   1108e:	9c e0       	ldi	r25, 0x0C	; 12
   11090:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"GPIB bus state\n");
   11094:	be 01       	movw	r22, r28
   11096:	81 e2       	ldi	r24, 0x21	; 33
   11098:	9c e0       	ldi	r25, 0x0C	; 12
   1109a:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   1109e:	be 01       	movw	r22, r28
   110a0:	81 e3       	ldi	r24, 0x31	; 49
   110a2:	9c e0       	ldi	r25, 0x0C	; 12
   110a4:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   110a8:	be 01       	movw	r22, r28
   110aa:	85 e4       	ldi	r24, 0x45	; 69
   110ac:	9c e0       	ldi	r25, 0x0C	; 12
   110ae:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   110b2:	be 01       	movw	r22, r28
   110b4:	88 e6       	ldi	r24, 0x68	; 104
   110b6:	9c e0       	ldi	r25, 0x0C	; 12
   110b8:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"     A = ATN\n");
   110bc:	be 01       	movw	r22, r28
   110be:	82 e9       	ldi	r24, 0x92	; 146
   110c0:	9c e0       	ldi	r25, 0x0C	; 12
   110c2:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"      E = EOI\n");
   110c6:	be 01       	movw	r22, r28
   110c8:	80 ea       	ldi	r24, 0xA0	; 160
   110ca:	9c e0       	ldi	r25, 0x0C	; 12
   110cc:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"       S = SRQ\n");
   110d0:	be 01       	movw	r22, r28
   110d2:	8f ea       	ldi	r24, 0xAF	; 175
   110d4:	9c e0       	ldi	r25, 0x0C	; 12
   110d6:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"        R = REN\n");
   110da:	be 01       	movw	r22, r28
   110dc:	8f eb       	ldi	r24, 0xBF	; 191
   110de:	9c e0       	ldi	r25, 0x0C	; 12
   110e0:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"         I = IFC\n");
   110e4:	be 01       	movw	r22, r28
   110e6:	80 ed       	ldi	r24, 0xD0	; 208
   110e8:	9c e0       	ldi	r25, 0x0C	; 12
   110ea:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   110ee:	be 01       	movw	r22, r28
   110f0:	82 ee       	ldi	r24, 0xE2	; 226
   110f2:	9c e0       	ldi	r25, 0x0C	; 12
   110f4:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   110f8:	be 01       	movw	r22, r28
   110fa:	84 e0       	ldi	r24, 0x04	; 4
   110fc:	9d e0       	ldi	r25, 0x0D	; 13
   110fe:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11102:	be 01       	movw	r22, r28
   11104:	8c e1       	ldi	r24, 0x1C	; 28
   11106:	9d e0       	ldi	r25, 0x0D	; 13
   11108:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
    fprintf(fo,"              GPIB commands\n");
   1110c:	be 01       	movw	r22, r28
   1110e:	87 e3       	ldi	r24, 0x37	; 55
   11110:	9d e0       	ldi	r25, 0x0D	; 13
   11112:	0e 94 96 76 	call	0xed2c	; 0xed2c <fputs>
}
   11116:	df 91       	pop	r29
   11118:	cf 91       	pop	r28
   1111a:	08 95       	ret

0001111c <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   1111c:	a9 e8       	ldi	r26, 0x89	; 137
   1111e:	b0 e0       	ldi	r27, 0x00	; 0
   11120:	e4 e9       	ldi	r30, 0x94	; 148
   11122:	f8 e8       	ldi	r31, 0x88	; 136
   11124:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
   11128:	8c 01       	movw	r16, r24
   1112a:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   1112c:	1a 86       	std	Y+10, r1	; 0x0a
   1112e:	4c 01       	movw	r8, r24
   11130:	88 24       	eor	r8, r8
   11132:	44 e0       	ldi	r20, 0x04	; 4
   11134:	94 22       	and	r9, r20
   11136:	ce 01       	movw	r24, r28
   11138:	0a 96       	adiw	r24, 0x0a	; 10
   1113a:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   1113c:	62 30       	cpi	r22, 0x02	; 2
   1113e:	71 05       	cpc	r23, r1
   11140:	e8 f4       	brcc	.+58     	; 0x1117c <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11142:	81 14       	cp	r8, r1
   11144:	91 04       	cpc	r9, r1
   11146:	29 f4       	brne	.+10     	; 0x11152 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11148:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1114a:	90 ee       	ldi	r25, 0xE0	; 224
   1114c:	90 0f       	add	r25, r16
   1114e:	9f 35       	cpi	r25, 0x5F	; 95
   11150:	08 f0       	brcs	.+2      	; 0x11154 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11152:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11154:	90 e0       	ldi	r25, 0x00	; 0
   11156:	ed b7       	in	r30, 0x3d	; 61
   11158:	fe b7       	in	r31, 0x3e	; 62
   1115a:	91 87       	std	Z+9, r25	; 0x09
   1115c:	80 87       	std	Z+8, r24	; 0x08
   1115e:	c8 01       	movw	r24, r16
   11160:	99 27       	eor	r25, r25
   11162:	97 83       	std	Z+7, r25	; 0x07
   11164:	86 83       	std	Z+6, r24	; 0x06
   11166:	85 e1       	ldi	r24, 0x15	; 21
   11168:	90 e1       	ldi	r25, 0x10	; 16
   1116a:	a0 e0       	ldi	r26, 0x00	; 0
   1116c:	83 83       	std	Z+3, r24	; 0x03
   1116e:	94 83       	std	Z+4, r25	; 0x04
   11170:	a5 83       	std	Z+5, r26	; 0x05
   11172:	f2 82       	std	Z+2, r15	; 0x02
   11174:	e1 82       	std	Z+1, r14	; 0x01
   11176:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
   1117a:	0c c0       	rjmp	.+24     	; 0x11194 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   1117c:	8f e0       	ldi	r24, 0x0F	; 15
   1117e:	90 e1       	ldi	r25, 0x10	; 16
   11180:	a0 e0       	ldi	r26, 0x00	; 0
   11182:	ed b7       	in	r30, 0x3d	; 61
   11184:	fe b7       	in	r31, 0x3e	; 62
   11186:	83 83       	std	Z+3, r24	; 0x03
   11188:	94 83       	std	Z+4, r25	; 0x04
   1118a:	a5 83       	std	Z+5, r26	; 0x05
   1118c:	f2 82       	std	Z+2, r15	; 0x02
   1118e:	e1 82       	std	Z+1, r14	; 0x01
   11190:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
    }

    tmp = str + strlen(str);
   11194:	f7 01       	movw	r30, r14
   11196:	01 90       	ld	r0, Z+
   11198:	00 20       	and	r0, r0
   1119a:	e9 f7       	brne	.-6      	; 0x11196 <gpib_trace_display+0x7a>
   1119c:	31 97       	sbiw	r30, 0x01	; 1
   1119e:	cf 01       	movw	r24, r30
   111a0:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   111a2:	81 14       	cp	r8, r1
   111a4:	91 04       	cpc	r9, r1
   111a6:	11 f0       	breq	.+4      	; 0x111ac <gpib_trace_display+0x90>
        *tmp++ = 'A';
   111a8:	21 e4       	ldi	r18, 0x41	; 65
   111aa:	01 c0       	rjmp	.+2      	; 0x111ae <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   111ac:	2d e2       	ldi	r18, 0x2D	; 45
   111ae:	20 83       	st	Z, r18
   111b0:	dc 01       	movw	r26, r24
   111b2:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   111b4:	10 ff       	sbrs	r17, 0
   111b6:	02 c0       	rjmp	.+4      	; 0x111bc <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   111b8:	25 e4       	ldi	r18, 0x45	; 69
   111ba:	01 c0       	rjmp	.+2      	; 0x111be <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   111bc:	2d e2       	ldi	r18, 0x2D	; 45
   111be:	fc 01       	movw	r30, r24
   111c0:	20 83       	st	Z, r18
   111c2:	fd 01       	movw	r30, r26
   111c4:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   111c6:	11 ff       	sbrs	r17, 1
   111c8:	02 c0       	rjmp	.+4      	; 0x111ce <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   111ca:	83 e5       	ldi	r24, 0x53	; 83
   111cc:	01 c0       	rjmp	.+2      	; 0x111d0 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   111ce:	8d e2       	ldi	r24, 0x2D	; 45
   111d0:	8c 93       	st	X, r24
   111d2:	df 01       	movw	r26, r30
   111d4:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   111d6:	13 ff       	sbrs	r17, 3
   111d8:	02 c0       	rjmp	.+4      	; 0x111de <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   111da:	82 e5       	ldi	r24, 0x52	; 82
   111dc:	01 c0       	rjmp	.+2      	; 0x111e0 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   111de:	8d e2       	ldi	r24, 0x2D	; 45
   111e0:	80 83       	st	Z, r24
   111e2:	fd 01       	movw	r30, r26
   111e4:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   111e6:	14 ff       	sbrs	r17, 4
   111e8:	02 c0       	rjmp	.+4      	; 0x111ee <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   111ea:	89 e4       	ldi	r24, 0x49	; 73
   111ec:	01 c0       	rjmp	.+2      	; 0x111f0 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   111ee:	8d e2       	ldi	r24, 0x2D	; 45
   111f0:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   111f2:	a1 14       	cp	r10, r1
   111f4:	b1 04       	cpc	r11, r1
   111f6:	d1 f4       	brne	.+52     	; 0x1122c <gpib_trace_display+0x110>
   111f8:	df 01       	movw	r26, r30
   111fa:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   111fc:	15 ff       	sbrs	r17, 5
   111fe:	02 c0       	rjmp	.+4      	; 0x11204 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11200:	80 e5       	ldi	r24, 0x50	; 80
   11202:	01 c0       	rjmp	.+2      	; 0x11206 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11204:	8d e2       	ldi	r24, 0x2D	; 45
   11206:	80 83       	st	Z, r24
   11208:	fd 01       	movw	r30, r26
   1120a:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   1120c:	16 ff       	sbrs	r17, 6
   1120e:	02 c0       	rjmp	.+4      	; 0x11214 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11210:	84 e5       	ldi	r24, 0x54	; 84
   11212:	01 c0       	rjmp	.+2      	; 0x11216 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11214:	8d e2       	ldi	r24, 0x2D	; 45
   11216:	8c 93       	st	X, r24
   11218:	cf 01       	movw	r24, r30
   1121a:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   1121c:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1121e:	17 ff       	sbrs	r17, 7
   11220:	02 c0       	rjmp	.+4      	; 0x11226 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11222:	82 e4       	ldi	r24, 0x42	; 66
   11224:	01 c0       	rjmp	.+2      	; 0x11228 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11226:	8d e2       	ldi	r24, 0x2D	; 45
   11228:	80 83       	st	Z, r24
   1122a:	08 c0       	rjmp	.+16     	; 0x1123c <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   1122c:	8d e2       	ldi	r24, 0x2D	; 45
   1122e:	80 83       	st	Z, r24
        *tmp++ = '-';
   11230:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11232:	6f 01       	movw	r12, r30
   11234:	43 e0       	ldi	r20, 0x03	; 3
   11236:	c4 0e       	add	r12, r20
   11238:	d1 1c       	adc	r13, r1
   1123a:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1123c:	f6 01       	movw	r30, r12
   1123e:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11240:	f1 e0       	ldi	r31, 0x01	; 1
   11242:	af 1a       	sub	r10, r31
   11244:	b1 08       	sbc	r11, r1
   11246:	42 e0       	ldi	r20, 0x02	; 2
   11248:	a4 16       	cp	r10, r20
   1124a:	b1 04       	cpc	r11, r1
   1124c:	f0 f4       	brcc	.+60     	; 0x1128a <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1124e:	15 ff       	sbrs	r17, 5
   11250:	03 c0       	rjmp	.+6      	; 0x11258 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11252:	64 e5       	ldi	r22, 0x54	; 84
   11254:	7d e0       	ldi	r23, 0x0D	; 13
   11256:	02 c0       	rjmp	.+4      	; 0x1125c <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11258:	65 e6       	ldi	r22, 0x65	; 101
   1125a:	74 e0       	ldi	r23, 0x04	; 4
   1125c:	c7 01       	movw	r24, r14
   1125e:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>
        if(status & NRFD_FLAG)
   11262:	16 ff       	sbrs	r17, 6
   11264:	03 c0       	rjmp	.+6      	; 0x1126c <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11266:	6a e5       	ldi	r22, 0x5A	; 90
   11268:	7d e0       	ldi	r23, 0x0D	; 13
   1126a:	02 c0       	rjmp	.+4      	; 0x11270 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   1126c:	65 e6       	ldi	r22, 0x65	; 101
   1126e:	74 e0       	ldi	r23, 0x04	; 4
   11270:	c7 01       	movw	r24, r14
   11272:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>
        if(status & NDAC_FLAG)
   11276:	17 ff       	sbrs	r17, 7
   11278:	03 c0       	rjmp	.+6      	; 0x11280 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1127a:	60 e6       	ldi	r22, 0x60	; 96
   1127c:	7d e0       	ldi	r23, 0x0D	; 13
   1127e:	02 c0       	rjmp	.+4      	; 0x11284 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11280:	65 e6       	ldi	r22, 0x65	; 101
   11282:	74 e0       	ldi	r23, 0x04	; 4
   11284:	c7 01       	movw	r24, r14
   11286:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>
    }

    if( (status & ATN_FLAG) )
   1128a:	81 14       	cp	r8, r1
   1128c:	91 04       	cpc	r9, r1
   1128e:	09 f4       	brne	.+2      	; 0x11292 <gpib_trace_display+0x176>
   11290:	5a c0       	rjmp	.+180    	; 0x11346 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11292:	c8 01       	movw	r24, r16
   11294:	8f 77       	andi	r24, 0x7F	; 127
   11296:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11298:	9c 01       	movw	r18, r24
   1129a:	20 52       	subi	r18, 0x20	; 32
   1129c:	31 09       	sbc	r19, r1
   1129e:	2f 31       	cpi	r18, 0x1F	; 31
   112a0:	31 05       	cpc	r19, r1
   112a2:	48 f4       	brcc	.+18     	; 0x112b6 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   112a4:	0f 71       	andi	r16, 0x1F	; 31
   112a6:	11 27       	eor	r17, r17
   112a8:	ed b7       	in	r30, 0x3d	; 61
   112aa:	fe b7       	in	r31, 0x3e	; 62
   112ac:	17 83       	std	Z+7, r17	; 0x07
   112ae:	06 83       	std	Z+6, r16	; 0x06
   112b0:	84 e0       	ldi	r24, 0x04	; 4
   112b2:	90 e1       	ldi	r25, 0x10	; 16
   112b4:	0e c0       	rjmp	.+28     	; 0x112d2 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   112b6:	9c 01       	movw	r18, r24
   112b8:	20 54       	subi	r18, 0x40	; 64
   112ba:	31 09       	sbc	r19, r1
   112bc:	2f 30       	cpi	r18, 0x0F	; 15
   112be:	31 05       	cpc	r19, r1
   112c0:	88 f4       	brcc	.+34     	; 0x112e4 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   112c2:	0f 71       	andi	r16, 0x1F	; 31
   112c4:	11 27       	eor	r17, r17
   112c6:	ed b7       	in	r30, 0x3d	; 61
   112c8:	fe b7       	in	r31, 0x3e	; 62
   112ca:	17 83       	std	Z+7, r17	; 0x07
   112cc:	06 83       	std	Z+6, r16	; 0x06
   112ce:	89 ef       	ldi	r24, 0xF9	; 249
   112d0:	9f e0       	ldi	r25, 0x0F	; 15
   112d2:	a0 e0       	ldi	r26, 0x00	; 0
   112d4:	83 83       	std	Z+3, r24	; 0x03
   112d6:	94 83       	std	Z+4, r25	; 0x04
   112d8:	a5 83       	std	Z+5, r26	; 0x05
   112da:	d2 82       	std	Z+2, r13	; 0x02
   112dc:	c1 82       	std	Z+1, r12	; 0x01
   112de:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
   112e2:	31 c0       	rjmp	.+98     	; 0x11346 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   112e4:	9c 01       	movw	r18, r24
   112e6:	20 56       	subi	r18, 0x60	; 96
   112e8:	31 09       	sbc	r19, r1
   112ea:	20 31       	cpi	r18, 0x10	; 16
   112ec:	31 05       	cpc	r19, r1
   112ee:	28 f0       	brcs	.+10     	; 0x112fa <gpib_trace_display+0x1de>
   112f0:	e2 e8       	ldi	r30, 0x82	; 130
   112f2:	f1 e0       	ldi	r31, 0x01	; 1
   112f4:	00 e0       	ldi	r16, 0x00	; 0
   112f6:	10 e0       	ldi	r17, 0x00	; 0
   112f8:	0b c0       	rjmp	.+22     	; 0x11310 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   112fa:	0f 71       	andi	r16, 0x1F	; 31
   112fc:	11 27       	eor	r17, r17
   112fe:	ed b7       	in	r30, 0x3d	; 61
   11300:	fe b7       	in	r31, 0x3e	; 62
   11302:	17 83       	std	Z+7, r17	; 0x07
   11304:	06 83       	std	Z+6, r16	; 0x06
   11306:	8e ee       	ldi	r24, 0xEE	; 238
   11308:	9f e0       	ldi	r25, 0x0F	; 15
   1130a:	e3 cf       	rjmp	.-58     	; 0x112d2 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1130c:	0f 5f       	subi	r16, 0xFF	; 255
   1130e:	1f 4f       	sbci	r17, 0xFF	; 255
   11310:	20 81       	ld	r18, Z
   11312:	31 81       	ldd	r19, Z+1	; 0x01
   11314:	2f 3f       	cpi	r18, 0xFF	; 255
   11316:	4f ef       	ldi	r20, 0xFF	; 255
   11318:	34 07       	cpc	r19, r20
   1131a:	a9 f0       	breq	.+42     	; 0x11346 <gpib_trace_display+0x22a>
   1131c:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1131e:	82 17       	cp	r24, r18
   11320:	93 07       	cpc	r25, r19
   11322:	a1 f7       	brne	.-24     	; 0x1130c <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11324:	69 e6       	ldi	r22, 0x69	; 105
   11326:	74 e0       	ldi	r23, 0x04	; 4
   11328:	c6 01       	movw	r24, r12
   1132a:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1132e:	f8 01       	movw	r30, r16
   11330:	ee 0f       	add	r30, r30
   11332:	ff 1f       	adc	r31, r31
   11334:	ee 0f       	add	r30, r30
   11336:	ff 1f       	adc	r31, r31
   11338:	ee 57       	subi	r30, 0x7E	; 126
   1133a:	fe 4f       	sbci	r31, 0xFE	; 254
   1133c:	62 81       	ldd	r22, Z+2	; 0x02
   1133e:	73 81       	ldd	r23, Z+3	; 0x03
   11340:	c6 01       	movw	r24, r12
   11342:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11346:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   1134a:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1134e:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11352:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11356:	23 2b       	or	r18, r19
   11358:	21 f4       	brne	.+8      	; 0x11362 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1135a:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   1135e:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11362:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   11366:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1136a:	82 17       	cp	r24, r18
   1136c:	93 07       	cpc	r25, r19
   1136e:	19 f0       	breq	.+6      	; 0x11376 <gpib_trace_display+0x25a>
        puts(str);
   11370:	c7 01       	movw	r24, r14
   11372:	0e 94 ae 76 	call	0xed5c	; 0xed5c <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11376:	ed b7       	in	r30, 0x3d	; 61
   11378:	fe b7       	in	r31, 0x3e	; 62
   1137a:	f6 82       	std	Z+6, r15	; 0x06
   1137c:	e5 82       	std	Z+5, r14	; 0x05
   1137e:	86 e6       	ldi	r24, 0x66	; 102
   11380:	9d e0       	ldi	r25, 0x0D	; 13
   11382:	94 83       	std	Z+4, r25	; 0x04
   11384:	83 83       	std	Z+3, r24	; 0x03
   11386:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   1138a:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1138e:	92 83       	std	Z+2, r25	; 0x02
   11390:	81 83       	std	Z+1, r24	; 0x01
   11392:	0e 94 56 7e 	call	0xfcac	; 0xfcac <fprintf>
}
   11396:	c7 57       	subi	r28, 0x77	; 119
   11398:	df 4f       	sbci	r29, 0xFF	; 255
   1139a:	ec e0       	ldi	r30, 0x0C	; 12
   1139c:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

000113a0 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   113a0:	af 92       	push	r10
   113a2:	bf 92       	push	r11
   113a4:	cf 92       	push	r12
   113a6:	df 92       	push	r13
   113a8:	ef 92       	push	r14
   113aa:	ff 92       	push	r15
   113ac:	0f 93       	push	r16
   113ae:	1f 93       	push	r17
   113b0:	cf 93       	push	r28
   113b2:	00 d0       	rcall	.+0      	; 0x113b4 <gpib_read_byte+0x14>
   113b4:	00 d0       	rcall	.+0      	; 0x113b6 <gpib_read_byte+0x16>
   113b6:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   113b8:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <gpib_unread_f>
   113bc:	22 23       	and	r18, r18
   113be:	39 f0       	breq	.+14     	; 0x113ce <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   113c0:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
        return(gpib_unread_data);
   113c4:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <gpib_unread_data>
   113c8:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <gpib_unread_data+0x1>
   113cc:	e0 c0       	rjmp	.+448    	; 0x1158e <gpib_read_byte+0x1ee>
   113ce:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   113d0:	81 e0       	ldi	r24, 0x01	; 1
   113d2:	05 dc       	rcall	.-2038   	; 0x10bde <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   113d4:	c1 14       	cp	r12, r1
   113d6:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   113d8:	51 f0       	breq	.+20     	; 0x113ee <gpib_read_byte+0x4e>
   113da:	fa dc       	rcall	.-1548   	; 0x10dd0 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   113dc:	7c 01       	movw	r14, r24
   113de:	08 dd       	rcall	.-1520   	; 0x10df0 <gpib_handshake_pin_read>
   113e0:	e8 2a       	or	r14, r24
   113e2:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   113e4:	62 e0       	ldi	r22, 0x02	; 2
   113e6:	70 e0       	ldi	r23, 0x00	; 0
   113e8:	c7 01       	movw	r24, r14
   113ea:	98 de       	rcall	.-720    	; 0x1111c <gpib_trace_display>
   113ec:	02 c0       	rjmp	.+4      	; 0x113f2 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   113ee:	e1 2c       	mov	r14, r1
   113f0:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   113f2:	64 ef       	ldi	r22, 0xF4	; 244
   113f4:	71 e0       	ldi	r23, 0x01	; 1
   113f6:	80 e0       	ldi	r24, 0x00	; 0
   113f8:	90 e0       	ldi	r25, 0x00	; 0
   113fa:	af db       	rcall	.-2210   	; 0x10b5a <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   113fc:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   113fe:	00 e0       	ldi	r16, 0x00	; 0
   11400:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11402:	0e 94 4a e2 	call	0x1c494	; 0x1c494 <gpib_user_task>

        if(uart_keyhit(0))
   11406:	80 e0       	ldi	r24, 0x00	; 0
   11408:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <uart_keyhit>
   1140c:	89 2b       	or	r24, r25
   1140e:	09 f0       	breq	.+2      	; 0x11412 <gpib_read_byte+0x72>
   11410:	9c c0       	rjmp	.+312    	; 0x1154a <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11412:	4c 99       	sbic	0x09, 4	; 9
   11414:	15 c0       	rjmp	.+42     	; 0x11440 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   11416:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   11418:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1141c:	80 ff       	sbrs	r24, 0
   1141e:	0e c0       	rjmp	.+28     	; 0x1143c <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11420:	8c 2f       	mov	r24, r28
   11422:	90 e0       	ldi	r25, 0x00	; 0
   11424:	ed b7       	in	r30, 0x3d	; 61
   11426:	fe b7       	in	r31, 0x3e	; 62
   11428:	95 83       	std	Z+5, r25	; 0x05
   1142a:	84 83       	std	Z+4, r24	; 0x04
   1142c:	8e e1       	ldi	r24, 0x1E	; 30
   1142e:	90 e1       	ldi	r25, 0x10	; 16
   11430:	a0 e0       	ldi	r26, 0x00	; 0
   11432:	81 83       	std	Z+1, r24	; 0x01
   11434:	92 83       	std	Z+2, r25	; 0x02
   11436:	a3 83       	std	Z+3, r26	; 0x03
   11438:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            gpib_bus_init();
   1143c:	98 db       	rcall	.-2256   	; 0x10b6e <gpib_bus_init>
   1143e:	85 c0       	rjmp	.+266    	; 0x1154a <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   11440:	c2 30       	cpi	r28, 0x02	; 2
   11442:	31 f1       	breq	.+76     	; 0x11490 <gpib_read_byte+0xf0>
   11444:	28 f4       	brcc	.+10     	; 0x11450 <gpib_read_byte+0xb0>
   11446:	cc 23       	and	r28, r28
   11448:	69 f0       	breq	.+26     	; 0x11464 <gpib_read_byte+0xc4>
   1144a:	c1 30       	cpi	r28, 0x01	; 1
   1144c:	c9 f0       	breq	.+50     	; 0x11480 <gpib_read_byte+0xe0>
   1144e:	63 c0       	rjmp	.+198    	; 0x11516 <gpib_read_byte+0x176>
   11450:	c5 30       	cpi	r28, 0x05	; 5
   11452:	09 f4       	brne	.+2      	; 0x11456 <gpib_read_byte+0xb6>
   11454:	54 c0       	rjmp	.+168    	; 0x114fe <gpib_read_byte+0x15e>
   11456:	c7 30       	cpi	r28, 0x07	; 7
   11458:	09 f4       	brne	.+2      	; 0x1145c <gpib_read_byte+0xbc>
   1145a:	58 c0       	rjmp	.+176    	; 0x1150c <gpib_read_byte+0x16c>
   1145c:	c4 30       	cpi	r28, 0x04	; 4
   1145e:	09 f0       	breq	.+2      	; 0x11462 <gpib_read_byte+0xc2>
   11460:	5a c0       	rjmp	.+180    	; 0x11516 <gpib_read_byte+0x176>
   11462:	3e c0       	rjmp	.+124    	; 0x114e0 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11464:	19 9b       	sbis	0x03, 1	; 3
   11466:	43 c0       	rjmp	.+134    	; 0x114ee <gpib_read_byte+0x14e>
   11468:	fd e0       	ldi	r31, 0x0D	; 13
   1146a:	fa 95       	dec	r31
   1146c:	f1 f7       	brne	.-4      	; 0x1146a <gpib_read_byte+0xca>
   1146e:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   11470:	52 98       	cbi	0x0a, 2	; 10
   11472:	5a 9a       	sbi	0x0b, 2	; 11
   11474:	8d e0       	ldi	r24, 0x0D	; 13
   11476:	8a 95       	dec	r24
   11478:	f1 f7       	brne	.-4      	; 0x11476 <gpib_read_byte+0xd6>
   1147a:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1147c:	c1 e0       	ldi	r28, 0x01	; 1
   1147e:	37 c0       	rjmp	.+110    	; 0x114ee <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   11480:	19 99       	sbic	0x03, 1	; 3
   11482:	80 c0       	rjmp	.+256    	; 0x11584 <gpib_read_byte+0x1e4>
   11484:	ed e0       	ldi	r30, 0x0D	; 13
   11486:	ea 95       	dec	r30
   11488:	f1 f7       	brne	.-4      	; 0x11486 <gpib_read_byte+0xe6>
   1148a:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1148c:	c2 e0       	ldi	r28, 0x02	; 2
   1148e:	7a c0       	rjmp	.+244    	; 0x11584 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   11490:	5a 98       	cbi	0x0b, 2	; 11
   11492:	52 9a       	sbi	0x0a, 2	; 10
   11494:	fd e0       	ldi	r31, 0x0D	; 13
   11496:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   11498:	f1 f7       	brne	.-4      	; 0x11496 <gpib_read_byte+0xf6>
   1149a:	00 00       	nop
   1149c:	93 dc       	rcall	.-1754   	; 0x10dc4 <gpib_bus_read>
   1149e:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   114a0:	b1 2c       	mov	r11, r1
   114a2:	96 dc       	rcall	.-1748   	; 0x10dd0 <gpib_control_pin_read>
   114a4:	7c 01       	movw	r14, r24
   114a6:	08 2b       	or	r16, r24
                ch |= control_last;
   114a8:	19 2b       	or	r17, r25
   114aa:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   114ac:	1b 29       	or	r17, r11
   114ae:	c1 14       	cp	r12, r1
   114b0:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   114b2:	49 f0       	breq	.+18     	; 0x114c6 <gpib_read_byte+0x126>
   114b4:	9d dc       	rcall	.-1734   	; 0x10df0 <gpib_handshake_pin_read>
   114b6:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   114b8:	f9 2a       	or	r15, r25
   114ba:	61 e0       	ldi	r22, 0x01	; 1
   114bc:	70 e0       	ldi	r23, 0x00	; 0
   114be:	c5 01       	movw	r24, r10
   114c0:	8e 29       	or	r24, r14
   114c2:	9f 29       	or	r25, r15
   114c4:	2b de       	rcall	.-938    	; 0x1111c <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   114c6:	53 98       	cbi	0x0a, 3	; 10
   114c8:	5b 9a       	sbi	0x0b, 3	; 11
   114ca:	8d e0       	ldi	r24, 0x0D	; 13
   114cc:	8a 95       	dec	r24
   114ce:	f1 f7       	brne	.-4      	; 0x114cc <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   114d0:	00 00       	nop
   114d2:	64 ef       	ldi	r22, 0xF4	; 244
   114d4:	71 e0       	ldi	r23, 0x01	; 1
   114d6:	80 e0       	ldi	r24, 0x00	; 0
   114d8:	90 e0       	ldi	r25, 0x00	; 0
   114da:	3f db       	rcall	.-2434   	; 0x10b5a <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   114dc:	c4 e0       	ldi	r28, 0x04	; 4
   114de:	52 c0       	rjmp	.+164    	; 0x11584 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   114e0:	19 9b       	sbis	0x03, 1	; 3
   114e2:	05 c0       	rjmp	.+10     	; 0x114ee <gpib_read_byte+0x14e>
   114e4:	ed e0       	ldi	r30, 0x0D	; 13
   114e6:	ea 95       	dec	r30
   114e8:	f1 f7       	brne	.-4      	; 0x114e6 <gpib_read_byte+0x146>
   114ea:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   114ec:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   114ee:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   114f2:	88 23       	and	r24, r24
   114f4:	09 f4       	brne	.+2      	; 0x114f8 <gpib_read_byte+0x158>
   114f6:	46 c0       	rjmp	.+140    	; 0x11584 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   114f8:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   114fa:	c7 e0       	ldi	r28, 0x07	; 7
   114fc:	43 c0       	rjmp	.+134    	; 0x11584 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   114fe:	5b 98       	cbi	0x0b, 3	; 11
   11500:	53 9a       	sbi	0x0a, 3	; 10
   11502:	fd e0       	ldi	r31, 0x0D	; 13
   11504:	fa 95       	dec	r31
   11506:	f1 f7       	brne	.-4      	; 0x11504 <gpib_read_byte+0x164>
   11508:	00 00       	nop
   1150a:	09 c0       	rjmp	.+18     	; 0x1151e <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1150c:	5a 98       	cbi	0x0b, 2	; 11
   1150e:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11510:	5b 98       	cbi	0x0b, 3	; 11
   11512:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11514:	04 c0       	rjmp	.+8      	; 0x1151e <gpib_read_byte+0x17e>
   11516:	c1 14       	cp	r12, r1
   11518:	d1 04       	cpc	r13, r1
   1151a:	91 f0       	breq	.+36     	; 0x11540 <gpib_read_byte+0x1a0>
   1151c:	04 c0       	rjmp	.+8      	; 0x11526 <gpib_read_byte+0x186>
   1151e:	c1 14       	cp	r12, r1
   11520:	d1 04       	cpc	r13, r1
   11522:	99 f0       	breq	.+38     	; 0x1154a <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11524:	c8 e0       	ldi	r28, 0x08	; 8
   11526:	54 dc       	rcall	.-1880   	; 0x10dd0 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   11528:	5c 01       	movw	r10, r24
   1152a:	62 dc       	rcall	.-1852   	; 0x10df0 <gpib_handshake_pin_read>
   1152c:	a8 2a       	or	r10, r24
   1152e:	b9 2a       	or	r11, r25
            if(control_last != control)
   11530:	ae 14       	cp	r10, r14
   11532:	bf 04       	cpc	r11, r15
   11534:	31 f0       	breq	.+12     	; 0x11542 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   11536:	62 e0       	ldi	r22, 0x02	; 2
   11538:	70 e0       	ldi	r23, 0x00	; 0
   1153a:	c5 01       	movw	r24, r10
   1153c:	ef dd       	rcall	.-1058   	; 0x1111c <gpib_trace_display>
   1153e:	01 c0       	rjmp	.+2      	; 0x11542 <gpib_read_byte+0x1a2>
   11540:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11542:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11544:	11 f0       	breq	.+4      	; 0x1154a <gpib_read_byte+0x1aa>
   11546:	75 01       	movw	r14, r10
   11548:	5c cf       	rjmp	.-328    	; 0x11402 <gpib_read_byte+0x62>
   1154a:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   1154e:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <current+0x1>
   11552:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <lastcmd+0x1>
   11556:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <lastcmd>
   1155a:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1155c:	88 27       	eor	r24, r24
   1155e:	90 7d       	andi	r25, 0xD0	; 208
   11560:	89 2b       	or	r24, r25
   11562:	11 f4       	brne	.+4      	; 0x11568 <gpib_read_byte+0x1c8>
   11564:	12 fd       	sbrc	r17, 2
   11566:	05 c0       	rjmp	.+10     	; 0x11572 <gpib_read_byte+0x1d2>
   11568:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
        current = 0;
   1156c:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   11570:	07 c0       	rjmp	.+14     	; 0x11580 <gpib_read_byte+0x1e0>
   11572:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   11574:	8f 77       	andi	r24, 0x7F	; 127
   11576:	99 27       	eor	r25, r25
   11578:	90 93 ed 1e 	sts	0x1EED, r25	; 0x801eed <current+0x1>
   1157c:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <current>
   11580:	c8 01       	movw	r24, r16
   11582:	05 c0       	rjmp	.+10     	; 0x1158e <gpib_read_byte+0x1ee>
   11584:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11586:	d1 04       	cpc	r13, r1
   11588:	09 f4       	brne	.+2      	; 0x1158c <gpib_read_byte+0x1ec>
   1158a:	3b cf       	rjmp	.-394    	; 0x11402 <gpib_read_byte+0x62>
   1158c:	cc cf       	rjmp	.-104    	; 0x11526 <gpib_read_byte+0x186>
   1158e:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11590:	0f 90       	pop	r0
   11592:	0f 90       	pop	r0
   11594:	0f 90       	pop	r0
   11596:	0f 90       	pop	r0
   11598:	cf 91       	pop	r28
   1159a:	1f 91       	pop	r17
   1159c:	0f 91       	pop	r16
   1159e:	ff 90       	pop	r15
   115a0:	ef 90       	pop	r14
   115a2:	df 90       	pop	r13
   115a4:	cf 90       	pop	r12
   115a6:	bf 90       	pop	r11
   115a8:	af 90       	pop	r10
   115aa:	08 95       	ret

000115ac <gpib_decode>:
   115ac:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   115ae:	70 e0       	ldi	r23, 0x00	; 0
   115b0:	b5 cd       	rjmp	.-1174   	; 0x1111c <gpib_trace_display>
   115b2:	08 95       	ret

000115b4 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   115b4:	a7 e0       	ldi	r26, 0x07	; 7
   115b6:	b0 e0       	ldi	r27, 0x00	; 0
   115b8:	e0 ee       	ldi	r30, 0xE0	; 224
   115ba:	fa e8       	ldi	r31, 0x8A	; 138
   115bc:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
   115c0:	5b 01       	movw	r10, r22
   115c2:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   115c4:	fa 01       	movw	r30, r20
   115c6:	20 81       	ld	r18, Z
   115c8:	31 81       	ldd	r19, Z+1	; 0x01
   115ca:	22 27       	eor	r18, r18
   115cc:	31 83       	std	Z+1, r19	; 0x01
   115ce:	20 83       	st	Z, r18

    if(!size)
   115d0:	67 2b       	or	r22, r23
   115d2:	21 f0       	breq	.+8      	; 0x115dc <gpib_read_str+0x28>
   115d4:	7c 01       	movw	r14, r24
   115d6:	00 e0       	ldi	r16, 0x00	; 0
   115d8:	10 e0       	ldi	r17, 0x00	; 0
   115da:	28 c0       	rjmp	.+80     	; 0x1162c <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   115dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   115e4:	81 72       	andi	r24, 0x21	; 33
   115e6:	91 70       	andi	r25, 0x01	; 1
   115e8:	89 2b       	or	r24, r25
   115ea:	09 f4       	brne	.+2      	; 0x115ee <gpib_read_str+0x3a>
   115ec:	7c c0       	rjmp	.+248    	; 0x116e6 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   115ee:	85 ed       	ldi	r24, 0xD5	; 213
   115f0:	9f e0       	ldi	r25, 0x0F	; 15
   115f2:	a0 e0       	ldi	r26, 0x00	; 0
   115f4:	ed b7       	in	r30, 0x3d	; 61
   115f6:	fe b7       	in	r31, 0x3e	; 62
   115f8:	81 83       	std	Z+1, r24	; 0x01
   115fa:	92 83       	std	Z+2, r25	; 0x02
   115fc:	a3 83       	std	Z+3, r26	; 0x03
   115fe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   11602:	71 c0       	rjmp	.+226    	; 0x116e6 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11604:	8c 27       	eor	r24, r28
   11606:	9d 27       	eor	r25, r29
   11608:	92 fd       	sbrc	r25, 2
   1160a:	2e c0       	rjmp	.+92     	; 0x11668 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1160c:	ce 01       	movw	r24, r28
   1160e:	88 27       	eor	r24, r24
   11610:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11612:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11614:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11616:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11618:	f7 01       	movw	r30, r14
   1161a:	20 83       	st	Z, r18
        ++ind;
   1161c:	0f 5f       	subi	r16, 0xFF	; 255
   1161e:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11620:	89 2b       	or	r24, r25
   11622:	09 f4       	brne	.+2      	; 0x11626 <gpib_read_str+0x72>
   11624:	3c c0       	rjmp	.+120    	; 0x1169e <gpib_read_str+0xea>
   11626:	ff ef       	ldi	r31, 0xFF	; 255
   11628:	ef 1a       	sub	r14, r31
   1162a:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1162c:	0a 15       	cp	r16, r10
   1162e:	1b 05       	cpc	r17, r11
   11630:	0c f0       	brlt	.+2      	; 0x11634 <gpib_read_str+0x80>
   11632:	3f c0       	rjmp	.+126    	; 0x116b2 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11634:	80 e0       	ldi	r24, 0x00	; 0
   11636:	90 e0       	ldi	r25, 0x00	; 0
   11638:	b3 de       	rcall	.-666    	; 0x113a0 <gpib_read_byte>
   1163a:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1163c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11640:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11644:	90 ff       	sbrs	r25, 0
   11646:	02 c0       	rjmp	.+4      	; 0x1164c <gpib_read_str+0x98>
            gpib_decode(val);
   11648:	ce 01       	movw	r24, r28
   1164a:	b0 df       	rcall	.-160    	; 0x115ac <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1164c:	9e 01       	movw	r18, r28
   1164e:	22 27       	eor	r18, r18
   11650:	30 7d       	andi	r19, 0xD0	; 208
   11652:	f6 01       	movw	r30, r12
   11654:	80 81       	ld	r24, Z
   11656:	91 81       	ldd	r25, Z+1	; 0x01
   11658:	21 15       	cp	r18, r1
   1165a:	31 05       	cpc	r19, r1
   1165c:	99 f2       	breq	.-90     	; 0x11604 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   1165e:	82 2b       	or	r24, r18
   11660:	93 2b       	or	r25, r19
   11662:	91 83       	std	Z+1, r25	; 0x01
   11664:	80 83       	st	Z, r24
            break;
   11666:	28 c0       	rjmp	.+80     	; 0x116b8 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11668:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1166c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11670:	81 72       	andi	r24, 0x21	; 33
   11672:	91 70       	andi	r25, 0x01	; 1
   11674:	89 2b       	or	r24, r25
   11676:	81 f0       	breq	.+32     	; 0x11698 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11678:	ce 01       	movw	r24, r28
   1167a:	99 27       	eor	r25, r25
   1167c:	ed b7       	in	r30, 0x3d	; 61
   1167e:	fe b7       	in	r31, 0x3e	; 62
   11680:	97 83       	std	Z+7, r25	; 0x07
   11682:	86 83       	std	Z+6, r24	; 0x06
   11684:	15 83       	std	Z+5, r17	; 0x05
   11686:	04 83       	std	Z+4, r16	; 0x04
   11688:	88 ea       	ldi	r24, 0xA8	; 168
   1168a:	9f e0       	ldi	r25, 0x0F	; 15
   1168c:	a0 e0       	ldi	r26, 0x00	; 0
   1168e:	81 83       	std	Z+1, r24	; 0x01
   11690:	92 83       	std	Z+2, r25	; 0x02
   11692:	a3 83       	std	Z+3, r26	; 0x03
   11694:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            gpib_unread(val);
   11698:	ce 01       	movw	r24, r28
   1169a:	6a db       	rcall	.-2348   	; 0x10d70 <gpib_unread>
            break;
   1169c:	0d c0       	rjmp	.+26     	; 0x116b8 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1169e:	d0 ff       	sbrs	r29, 0
   116a0:	c2 cf       	rjmp	.-124    	; 0x11626 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   116a2:	f6 01       	movw	r30, r12
   116a4:	80 81       	ld	r24, Z
   116a6:	91 81       	ldd	r25, Z+1	; 0x01
   116a8:	90 fd       	sbrc	r25, 0
   116aa:	1f c0       	rjmp	.+62     	; 0x116ea <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   116ac:	91 60       	ori	r25, 0x01	; 1
   116ae:	91 83       	std	Z+1, r25	; 0x01
   116b0:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   116b2:	0a 15       	cp	r16, r10
   116b4:	1b 05       	cpc	r17, r11
   116b6:	c9 f0       	breq	.+50     	; 0x116ea <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   116b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116bc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116c0:	81 72       	andi	r24, 0x21	; 33
   116c2:	99 27       	eor	r25, r25
   116c4:	89 2b       	or	r24, r25
   116c6:	89 f0       	breq	.+34     	; 0x116ea <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   116c8:	ed b7       	in	r30, 0x3d	; 61
   116ca:	fe b7       	in	r31, 0x3e	; 62
   116cc:	b7 82       	std	Z+7, r11	; 0x07
   116ce:	a6 82       	std	Z+6, r10	; 0x06
   116d0:	15 83       	std	Z+5, r17	; 0x05
   116d2:	04 83       	std	Z+4, r16	; 0x04
   116d4:	81 e8       	ldi	r24, 0x81	; 129
   116d6:	9f e0       	ldi	r25, 0x0F	; 15
   116d8:	a0 e0       	ldi	r26, 0x00	; 0
   116da:	81 83       	std	Z+1, r24	; 0x01
   116dc:	92 83       	std	Z+2, r25	; 0x02
   116de:	a3 83       	std	Z+3, r26	; 0x03
   116e0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   116e4:	02 c0       	rjmp	.+4      	; 0x116ea <gpib_read_str+0x136>
   116e6:	00 e0       	ldi	r16, 0x00	; 0
   116e8:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   116ea:	c8 01       	movw	r24, r16
   116ec:	cd b7       	in	r28, 0x3d	; 61
   116ee:	de b7       	in	r29, 0x3e	; 62
   116f0:	27 96       	adiw	r28, 0x07	; 7
   116f2:	ea e0       	ldi	r30, 0x0A	; 10
   116f4:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

000116f8 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   116f8:	a7 e0       	ldi	r26, 0x07	; 7
   116fa:	b0 e0       	ldi	r27, 0x00	; 0
   116fc:	e2 e8       	ldi	r30, 0x82	; 130
   116fe:	fb e8       	ldi	r31, 0x8B	; 139
   11700:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
   11704:	d8 2f       	mov	r29, r24
   11706:	c9 2f       	mov	r28, r25
   11708:	7b 01       	movw	r14, r22
   1170a:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1170c:	fa 01       	movw	r30, r20
   1170e:	80 81       	ld	r24, Z
   11710:	91 81       	ldd	r25, Z+1	; 0x01
   11712:	88 27       	eor	r24, r24
   11714:	91 83       	std	Z+1, r25	; 0x01
   11716:	80 83       	st	Z, r24

    if(!size)
   11718:	67 2b       	or	r22, r23
   1171a:	91 f4       	brne	.+36     	; 0x11740 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1171c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11720:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11724:	81 72       	andi	r24, 0x21	; 33
   11726:	91 70       	andi	r25, 0x01	; 1
   11728:	89 2b       	or	r24, r25
   1172a:	51 f0       	breq	.+20     	; 0x11740 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   1172c:	87 e6       	ldi	r24, 0x67	; 103
   1172e:	9f e0       	ldi	r25, 0x0F	; 15
   11730:	a0 e0       	ldi	r26, 0x00	; 0
   11732:	ed b7       	in	r30, 0x3d	; 61
   11734:	fe b7       	in	r31, 0x3e	; 62
   11736:	81 83       	std	Z+1, r24	; 0x01
   11738:	92 83       	std	Z+2, r25	; 0x02
   1173a:	a3 83       	std	Z+3, r26	; 0x03
   1173c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11740:	80 e0       	ldi	r24, 0x00	; 0
   11742:	4d da       	rcall	.-2918   	; 0x10bde <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11744:	4e 9b       	sbis	0x09, 6	; 9
   11746:	06 c0       	rjmp	.+12     	; 0x11754 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   11748:	64 ef       	ldi	r22, 0xF4	; 244
   1174a:	71 e0       	ldi	r23, 0x01	; 1
   1174c:	80 e0       	ldi	r24, 0x00	; 0
   1174e:	90 e0       	ldi	r25, 0x00	; 0
   11750:	04 da       	rcall	.-3064   	; 0x10b5a <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11752:	18 c0       	rjmp	.+48     	; 0x11784 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11754:	64 ef       	ldi	r22, 0xF4	; 244
   11756:	71 e0       	ldi	r23, 0x01	; 1
   11758:	80 e0       	ldi	r24, 0x00	; 0
   1175a:	90 e0       	ldi	r25, 0x00	; 0
   1175c:	fe d9       	rcall	.-3076   	; 0x10b5a <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   1175e:	4e 99       	sbic	0x09, 6	; 9
   11760:	f3 cf       	rjmp	.-26     	; 0x11748 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11762:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   11766:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   11768:	d1 f3       	breq	.-12     	; 0x1175e <gpib_write_str+0x66>
   1176a:	81 e0       	ldi	r24, 0x01	; 1
   1176c:	38 da       	rcall	.-2960   	; 0x10bde <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1176e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11772:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11776:	85 70       	andi	r24, 0x05	; 5
   11778:	99 27       	eor	r25, r25
   1177a:	89 2b       	or	r24, r25
   1177c:	d9 f0       	breq	.+54     	; 0x117b4 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   1177e:	89 e3       	ldi	r24, 0x39	; 57
   11780:	9f e0       	ldi	r25, 0x0F	; 15
   11782:	10 c0       	rjmp	.+32     	; 0x117a4 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11784:	19 99       	sbic	0x03, 1	; 3
   11786:	1f c0       	rjmp	.+62     	; 0x117c6 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11788:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   1178c:	88 23       	and	r24, r24
   1178e:	d1 f3       	breq	.-12     	; 0x11784 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11790:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11794:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11798:	85 70       	andi	r24, 0x05	; 5
   1179a:	99 27       	eor	r25, r25
   1179c:	89 2b       	or	r24, r25
   1179e:	51 f0       	breq	.+20     	; 0x117b4 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   117a0:	8f e1       	ldi	r24, 0x1F	; 31
   117a2:	9f e0       	ldi	r25, 0x0F	; 15
   117a4:	a0 e0       	ldi	r26, 0x00	; 0
   117a6:	ed b7       	in	r30, 0x3d	; 61
   117a8:	fe b7       	in	r31, 0x3e	; 62
   117aa:	81 83       	std	Z+1, r24	; 0x01
   117ac:	92 83       	std	Z+2, r25	; 0x02
   117ae:	a3 83       	std	Z+3, r26	; 0x03
   117b0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   117b4:	f8 01       	movw	r30, r16
   117b6:	80 81       	ld	r24, Z
   117b8:	91 81       	ldd	r25, Z+1	; 0x01
   117ba:	90 6c       	ori	r25, 0xC0	; 192
   117bc:	91 83       	std	Z+1, r25	; 0x01
   117be:	80 83       	st	Z, r24
			return(ind);
   117c0:	c0 e0       	ldi	r28, 0x00	; 0
   117c2:	d0 e0       	ldi	r29, 0x00	; 0
   117c4:	45 c0       	rjmp	.+138    	; 0x11850 <gpib_write_str+0x158>
   117c6:	cd 2e       	mov	r12, r29
   117c8:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   117ca:	c0 e0       	ldi	r28, 0x00	; 0
   117cc:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   117ce:	ce 15       	cp	r28, r14
   117d0:	df 05       	cpc	r29, r15
   117d2:	1c f5       	brge	.+70     	; 0x1181a <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   117d4:	21 96       	adiw	r28, 0x01	; 1
   117d6:	f6 01       	movw	r30, r12
   117d8:	81 91       	ld	r24, Z+
   117da:	6f 01       	movw	r12, r30
   117dc:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   117de:	f8 01       	movw	r30, r16
   117e0:	20 81       	ld	r18, Z
   117e2:	31 81       	ldd	r19, Z+1	; 0x01
   117e4:	30 ff       	sbrs	r19, 0
   117e6:	04 c0       	rjmp	.+8      	; 0x117f0 <gpib_write_str+0xf8>
   117e8:	ec 16       	cp	r14, r28
   117ea:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   117ec:	09 f4       	brne	.+2      	; 0x117f0 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   117ee:	91 60       	ori	r25, 0x01	; 1
   117f0:	0b db       	rcall	.-2538   	; 0x10e08 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   117f2:	5c 01       	movw	r10, r24
   117f4:	aa 24       	eor	r10, r10
   117f6:	f0 ed       	ldi	r31, 0xD0	; 208
   117f8:	bf 22       	and	r11, r31
   117fa:	f8 01       	movw	r30, r16
   117fc:	20 81       	ld	r18, Z
   117fe:	31 81       	ldd	r19, Z+1	; 0x01
   11800:	2a 29       	or	r18, r10
   11802:	3b 29       	or	r19, r11
   11804:	31 83       	std	Z+1, r19	; 0x01
   11806:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11808:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1180c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11810:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11812:	cc de       	rcall	.-616    	; 0x115ac <gpib_decode>
   11814:	a1 14       	cp	r10, r1
   11816:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11818:	d1 f2       	breq	.-76     	; 0x117ce <gpib_write_str+0xd6>
   1181a:	81 e0       	ldi	r24, 0x01	; 1
   1181c:	e0 d9       	rcall	.-3136   	; 0x10bde <gpib_rx_init>

    if ( ind != size )
   1181e:	ce 15       	cp	r28, r14
   11820:	df 05       	cpc	r29, r15
   11822:	b1 f0       	breq	.+44     	; 0x11850 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11824:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11828:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1182c:	81 72       	andi	r24, 0x21	; 33
   1182e:	91 70       	andi	r25, 0x01	; 1
   11830:	89 2b       	or	r24, r25
   11832:	71 f0       	breq	.+28     	; 0x11850 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11834:	ed b7       	in	r30, 0x3d	; 61
   11836:	fe b7       	in	r31, 0x3e	; 62
   11838:	f7 82       	std	Z+7, r15	; 0x07
   1183a:	e6 82       	std	Z+6, r14	; 0x06
   1183c:	d5 83       	std	Z+5, r29	; 0x05
   1183e:	c4 83       	std	Z+4, r28	; 0x04
   11840:	87 ef       	ldi	r24, 0xF7	; 247
   11842:	9e e0       	ldi	r25, 0x0E	; 14
   11844:	a0 e0       	ldi	r26, 0x00	; 0
   11846:	81 83       	std	Z+1, r24	; 0x01
   11848:	92 83       	std	Z+2, r25	; 0x02
   1184a:	a3 83       	std	Z+3, r26	; 0x03
   1184c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }
    return(ind);
}
   11850:	ce 01       	movw	r24, r28
   11852:	cd b7       	in	r28, 0x3d	; 61
   11854:	de b7       	in	r29, 0x3e	; 62
   11856:	27 96       	adiw	r28, 0x07	; 7
   11858:	ea e0       	ldi	r30, 0x0A	; 10
   1185a:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0001185e <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   1185e:	ad b7       	in	r26, 0x3d	; 61
   11860:	be b7       	in	r27, 0x3e	; 62
   11862:	17 97       	sbiw	r26, 0x07	; 7
   11864:	0f b6       	in	r0, 0x3f	; 63
   11866:	f8 94       	cli
   11868:	be bf       	out	0x3e, r27	; 62
   1186a:	0f be       	out	0x3f, r0	; 63
   1186c:	ad bf       	out	0x3d, r26	; 61
   1186e:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11872:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11876:	88 eb       	ldi	r24, 0xB8	; 184
   11878:	91 e0       	ldi	r25, 0x01	; 1
   1187a:	0e 94 75 9e 	call	0x13cea	; 0x13cea <Read_Config>
   1187e:	18 16       	cp	r1, r24
   11880:	19 06       	cpc	r1, r25
   11882:	8c f4       	brge	.+34     	; 0x118a6 <gpib_file_init+0x48>
   11884:	ed b7       	in	r30, 0x3d	; 61
   11886:	fe b7       	in	r31, 0x3e	; 62
   11888:	97 83       	std	Z+7, r25	; 0x07
   1188a:	86 83       	std	Z+6, r24	; 0x06
   1188c:	88 eb       	ldi	r24, 0xB8	; 184
   1188e:	91 e0       	ldi	r25, 0x01	; 1
   11890:	95 83       	std	Z+5, r25	; 0x05
   11892:	84 83       	std	Z+4, r24	; 0x04
   11894:	8b ec       	ldi	r24, 0xCB	; 203
   11896:	94 e1       	ldi	r25, 0x14	; 20
   11898:	a0 e0       	ldi	r26, 0x00	; 0
   1189a:	81 83       	std	Z+1, r24	; 0x01
   1189c:	92 83       	std	Z+2, r25	; 0x02
   1189e:	a3 83       	std	Z+3, r26	; 0x03
   118a0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   118a4:	10 c0       	rjmp	.+32     	; 0x118c6 <gpib_file_init+0x68>
   118a6:	89 2b       	or	r24, r25
   118a8:	71 f0       	breq	.+28     	; 0x118c6 <gpib_file_init+0x68>
   118aa:	88 eb       	ldi	r24, 0xB8	; 184
   118ac:	91 e0       	ldi	r25, 0x01	; 1
   118ae:	ed b7       	in	r30, 0x3d	; 61
   118b0:	fe b7       	in	r31, 0x3e	; 62
   118b2:	95 83       	std	Z+5, r25	; 0x05
   118b4:	84 83       	std	Z+4, r24	; 0x04
   118b6:	8a eb       	ldi	r24, 0xBA	; 186
   118b8:	94 e1       	ldi	r25, 0x14	; 20
   118ba:	a0 e0       	ldi	r26, 0x00	; 0
   118bc:	81 83       	std	Z+1, r24	; 0x01
   118be:	92 83       	std	Z+2, r25	; 0x02
   118c0:	a3 83       	std	Z+3, r26	; 0x03
   118c2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   118c6:	0e 94 3b 9a 	call	0x13476	; 0x13476 <set_Config_Defaults>
   118ca:	0e 94 fb 6f 	call	0xdff6	; 0xdff6 <mmc_wp_status>
   118ce:	89 2b       	or	r24, r25
   118d0:	51 f0       	breq	.+20     	; 0x118e6 <gpib_file_init+0x88>
   118d2:	81 ea       	ldi	r24, 0xA1	; 161
   118d4:	94 e1       	ldi	r25, 0x14	; 20
   118d6:	a0 e0       	ldi	r26, 0x00	; 0
   118d8:	ed b7       	in	r30, 0x3d	; 61
   118da:	fe b7       	in	r31, 0x3e	; 62
   118dc:	81 83       	std	Z+1, r24	; 0x01
   118de:	92 83       	std	Z+2, r25	; 0x02
   118e0:	a3 83       	std	Z+3, r26	; 0x03
   118e2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   118e6:	ad b7       	in	r26, 0x3d	; 61
   118e8:	be b7       	in	r27, 0x3e	; 62
   118ea:	17 96       	adiw	r26, 0x07	; 7
   118ec:	0f b6       	in	r0, 0x3f	; 63
   118ee:	f8 94       	cli
   118f0:	be bf       	out	0x3e, r27	; 62
   118f2:	0f be       	out	0x3f, r0	; 63
   118f4:	ad bf       	out	0x3d, r26	; 61
   118f6:	08 95       	ret

000118f8 <SS80_is_MLA>:
   118f8:	40 e2       	ldi	r20, 0x20	; 32
   118fa:	50 e0       	ldi	r21, 0x00	; 0
   118fc:	bc 01       	movw	r22, r24
   118fe:	83 e0       	ldi	r24, 0x03	; 3
   11900:	90 e0       	ldi	r25, 0x00	; 0
   11902:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   11906:	8f 3f       	cpi	r24, 0xFF	; 255
   11908:	31 f0       	breq	.+12     	; 0x11916 <SS80_is_MLA+0x1e>
   1190a:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   1190e:	08 2e       	mov	r0, r24
   11910:	00 0c       	add	r0, r0
   11912:	99 0b       	sbc	r25, r25
   11914:	08 95       	ret
   11916:	80 e0       	ldi	r24, 0x00	; 0
   11918:	90 e0       	ldi	r25, 0x00	; 0
   1191a:	08 95       	ret

0001191c <SS80_is_MTA>:
   1191c:	40 e4       	ldi	r20, 0x40	; 64
   1191e:	50 e0       	ldi	r21, 0x00	; 0
   11920:	bc 01       	movw	r22, r24
   11922:	83 e0       	ldi	r24, 0x03	; 3
   11924:	90 e0       	ldi	r25, 0x00	; 0
   11926:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   1192a:	8f 3f       	cpi	r24, 0xFF	; 255
   1192c:	31 f0       	breq	.+12     	; 0x1193a <SS80_is_MTA+0x1e>
   1192e:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   11932:	08 2e       	mov	r0, r24
   11934:	00 0c       	add	r0, r0
   11936:	99 0b       	sbc	r25, r25
   11938:	08 95       	ret
   1193a:	80 e0       	ldi	r24, 0x00	; 0
   1193c:	90 e0       	ldi	r25, 0x00	; 0
   1193e:	08 95       	ret

00011940 <SS80_is_MSA>:
   11940:	40 e6       	ldi	r20, 0x60	; 96
   11942:	50 e0       	ldi	r21, 0x00	; 0
   11944:	bc 01       	movw	r22, r24
   11946:	83 e0       	ldi	r24, 0x03	; 3
   11948:	90 e0       	ldi	r25, 0x00	; 0
   1194a:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   1194e:	8f 3f       	cpi	r24, 0xFF	; 255
   11950:	31 f0       	breq	.+12     	; 0x1195e <SS80_is_MSA+0x1e>
   11952:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   11956:	08 2e       	mov	r0, r24
   11958:	00 0c       	add	r0, r0
   1195a:	99 0b       	sbc	r25, r25
   1195c:	08 95       	ret
   1195e:	80 e0       	ldi	r24, 0x00	; 0
   11960:	90 e0       	ldi	r25, 0x00	; 0
   11962:	08 95       	ret

00011964 <AMIGO_is_MLA>:
   11964:	40 e2       	ldi	r20, 0x20	; 32
   11966:	50 e0       	ldi	r21, 0x00	; 0
   11968:	bc 01       	movw	r22, r24
   1196a:	81 e0       	ldi	r24, 0x01	; 1
   1196c:	90 e0       	ldi	r25, 0x00	; 0
   1196e:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   11972:	8f 3f       	cpi	r24, 0xFF	; 255
   11974:	31 f0       	breq	.+12     	; 0x11982 <AMIGO_is_MLA+0x1e>
   11976:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   1197a:	08 2e       	mov	r0, r24
   1197c:	00 0c       	add	r0, r0
   1197e:	99 0b       	sbc	r25, r25
   11980:	08 95       	ret
   11982:	80 e0       	ldi	r24, 0x00	; 0
   11984:	90 e0       	ldi	r25, 0x00	; 0
   11986:	08 95       	ret

00011988 <AMIGO_is_MTA>:
   11988:	40 e4       	ldi	r20, 0x40	; 64
   1198a:	50 e0       	ldi	r21, 0x00	; 0
   1198c:	bc 01       	movw	r22, r24
   1198e:	81 e0       	ldi	r24, 0x01	; 1
   11990:	90 e0       	ldi	r25, 0x00	; 0
   11992:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   11996:	8f 3f       	cpi	r24, 0xFF	; 255
   11998:	31 f0       	breq	.+12     	; 0x119a6 <AMIGO_is_MTA+0x1e>
   1199a:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   1199e:	08 2e       	mov	r0, r24
   119a0:	00 0c       	add	r0, r0
   119a2:	99 0b       	sbc	r25, r25
   119a4:	08 95       	ret
   119a6:	80 e0       	ldi	r24, 0x00	; 0
   119a8:	90 e0       	ldi	r25, 0x00	; 0
   119aa:	08 95       	ret

000119ac <AMIGO_is_MSA>:
   119ac:	40 e6       	ldi	r20, 0x60	; 96
   119ae:	50 e0       	ldi	r21, 0x00	; 0
   119b0:	bc 01       	movw	r22, r24
   119b2:	81 e0       	ldi	r24, 0x01	; 1
   119b4:	90 e0       	ldi	r25, 0x00	; 0
   119b6:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   119ba:	8f 3f       	cpi	r24, 0xFF	; 255
   119bc:	31 f0       	breq	.+12     	; 0x119ca <AMIGO_is_MSA+0x1e>
   119be:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   119c2:	08 2e       	mov	r0, r24
   119c4:	00 0c       	add	r0, r0
   119c6:	99 0b       	sbc	r25, r25
   119c8:	08 95       	ret
   119ca:	80 e0       	ldi	r24, 0x00	; 0
   119cc:	90 e0       	ldi	r25, 0x00	; 0
   119ce:	08 95       	ret

000119d0 <PRINTER_is_MLA>:
   119d0:	40 e2       	ldi	r20, 0x20	; 32
   119d2:	50 e0       	ldi	r21, 0x00	; 0
   119d4:	bc 01       	movw	r22, r24
   119d6:	84 e0       	ldi	r24, 0x04	; 4
   119d8:	90 e0       	ldi	r25, 0x00	; 0
   119da:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   119de:	8f 3f       	cpi	r24, 0xFF	; 255
   119e0:	31 f0       	breq	.+12     	; 0x119ee <PRINTER_is_MLA+0x1e>
   119e2:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   119e6:	08 2e       	mov	r0, r24
   119e8:	00 0c       	add	r0, r0
   119ea:	99 0b       	sbc	r25, r25
   119ec:	08 95       	ret
   119ee:	80 e0       	ldi	r24, 0x00	; 0
   119f0:	90 e0       	ldi	r25, 0x00	; 0
   119f2:	08 95       	ret

000119f4 <PRINTER_is_MTA>:
   119f4:	40 e4       	ldi	r20, 0x40	; 64
   119f6:	50 e0       	ldi	r21, 0x00	; 0
   119f8:	bc 01       	movw	r22, r24
   119fa:	84 e0       	ldi	r24, 0x04	; 4
   119fc:	90 e0       	ldi	r25, 0x00	; 0
   119fe:	0e 94 73 97 	call	0x12ee6	; 0x12ee6 <find_device>
   11a02:	8f 3f       	cpi	r24, 0xFF	; 255
   11a04:	31 f0       	breq	.+12     	; 0x11a12 <PRINTER_is_MTA+0x1e>
   11a06:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   11a0a:	08 2e       	mov	r0, r24
   11a0c:	00 0c       	add	r0, r0
   11a0e:	99 0b       	sbc	r25, r25
   11a10:	08 95       	ret
   11a12:	80 e0       	ldi	r24, 0x00	; 0
   11a14:	90 e0       	ldi	r25, 0x00	; 0
   11a16:	08 95       	ret

00011a18 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11a18:	aa d8       	rcall	.-3756   	; 0x10b6e <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11a1a:	11 d9       	rcall	.-3550   	; 0x10c3e <gpib_state_init>
   11a1c:	0e 94 ef ad 	call	0x15bde	; 0x15bde <SS80_init>

    SS80_init();                                  // SS80 state init
   11a20:	0e 94 84 b3 	call	0x16708	; 0x16708 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11a24:	0c 94 af be 	jmp	0x17d5e	; 0x17d5e <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11a28:	08 95       	ret

00011a2a <gpib_trace_task>:
   11a2a:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11a2c:	1f 93       	push	r17
   11a2e:	cf 93       	push	r28
   11a30:	df 93       	push	r29
   11a32:	00 d0       	rcall	.+0      	; 0x11a34 <gpib_trace_task+0xa>
   11a34:	00 d0       	rcall	.+0      	; 0x11a36 <gpib_trace_task+0xc>
   11a36:	1f 92       	push	r1
   11a38:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11a3a:	00 97       	sbiw	r24, 0x00	; 0
   11a3c:	09 f4       	brne	.+2      	; 0x11a40 <gpib_trace_task+0x16>
   11a3e:	44 c0       	rjmp	.+136    	; 0x11ac8 <gpib_trace_task+0x9e>
   11a40:	fc 01       	movw	r30, r24
   11a42:	20 81       	ld	r18, Z
   11a44:	22 23       	and	r18, r18
   11a46:	09 f4       	brne	.+2      	; 0x11a4a <gpib_trace_task+0x20>
   11a48:	3f c0       	rjmp	.+126    	; 0x11ac8 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11a4a:	0e 94 3a 32 	call	0x6474	; 0x6474 <skipspaces>
   11a4e:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11a50:	ed b7       	in	r30, 0x3d	; 61
   11a52:	fe b7       	in	r31, 0x3e	; 62
   11a54:	95 83       	std	Z+5, r25	; 0x05
   11a56:	84 83       	std	Z+4, r24	; 0x04
   11a58:	87 e8       	ldi	r24, 0x87	; 135
   11a5a:	94 e1       	ldi	r25, 0x14	; 20
   11a5c:	a0 e0       	ldi	r26, 0x00	; 0
   11a5e:	81 83       	std	Z+1, r24	; 0x01
   11a60:	92 83       	std	Z+2, r25	; 0x02
   11a62:	a3 83       	std	Z+3, r26	; 0x03
   11a64:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        if(detail)
   11a68:	20 97       	sbiw	r28, 0x00	; 0
   11a6a:	51 f0       	breq	.+20     	; 0x11a80 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11a6c:	8c e5       	ldi	r24, 0x5C	; 92
   11a6e:	94 e1       	ldi	r25, 0x14	; 20
   11a70:	a0 e0       	ldi	r26, 0x00	; 0
   11a72:	ed b7       	in	r30, 0x3d	; 61
   11a74:	fe b7       	in	r31, 0x3e	; 62
   11a76:	81 83       	std	Z+1, r24	; 0x01
   11a78:	92 83       	std	Z+2, r25	; 0x02
   11a7a:	a3 83       	std	Z+3, r26	; 0x03
   11a7c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("Press ANY key to exit\n");
   11a80:	85 e4       	ldi	r24, 0x45	; 69
   11a82:	94 e1       	ldi	r25, 0x14	; 20
   11a84:	a0 e0       	ldi	r26, 0x00	; 0
   11a86:	ed b7       	in	r30, 0x3d	; 61
   11a88:	fe b7       	in	r31, 0x3e	; 62
   11a8a:	81 83       	std	Z+1, r24	; 0x01
   11a8c:	92 83       	std	Z+2, r25	; 0x02
   11a8e:	a3 83       	std	Z+3, r26	; 0x03
   11a90:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11a94:	6c e0       	ldi	r22, 0x0C	; 12
   11a96:	79 e0       	ldi	r23, 0x09	; 9
   11a98:	c8 01       	movw	r24, r16
   11a9a:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <fopen>
   11a9e:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11aa2:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11aa6:	89 2b       	or	r24, r25
   11aa8:	b9 f4       	brne	.+46     	; 0x11ad8 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11aaa:	8a e9       	ldi	r24, 0x9A	; 154
   11aac:	9d e0       	ldi	r25, 0x0D	; 13
   11aae:	0e 94 7b 78 	call	0xf0f6	; 0xf0f6 <perror>
            printf("exiting...\n");
   11ab2:	89 e3       	ldi	r24, 0x39	; 57
   11ab4:	94 e1       	ldi	r25, 0x14	; 20
   11ab6:	a0 e0       	ldi	r26, 0x00	; 0
   11ab8:	ed b7       	in	r30, 0x3d	; 61
   11aba:	fe b7       	in	r31, 0x3e	; 62
   11abc:	81 83       	std	Z+1, r24	; 0x01
   11abe:	92 83       	std	Z+2, r25	; 0x02
   11ac0:	a3 83       	std	Z+3, r26	; 0x03
   11ac2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            return;
   11ac6:	3d c0       	rjmp	.+122    	; 0x11b42 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11ac8:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11acc:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11ad0:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11ad4:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11ad8:	9f df       	rcall	.-194    	; 0x11a18 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11ada:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11ade:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11ae2:	ca da       	rcall	.-2668   	; 0x11078 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11ae4:	80 e0       	ldi	r24, 0x00	; 0
   11ae6:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <uart_keyhit>
   11aea:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11aec:	31 f4       	brne	.+12     	; 0x11afa <gpib_trace_task+0xd0>
   11aee:	ce 01       	movw	r24, r28
        if(!detail)
   11af0:	57 dc       	rcall	.-1874   	; 0x113a0 <gpib_read_byte>
   11af2:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11af4:	b9 f7       	brne	.-18     	; 0x11ae4 <gpib_trace_task+0xba>
   11af6:	5a dd       	rcall	.-1356   	; 0x115ac <gpib_decode>
   11af8:	f5 cf       	rjmp	.-22     	; 0x11ae4 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11afa:	83 e3       	ldi	r24, 0x33	; 51
   11afc:	94 e1       	ldi	r25, 0x14	; 20
   11afe:	a0 e0       	ldi	r26, 0x00	; 0
   11b00:	ed b7       	in	r30, 0x3d	; 61
   11b02:	fe b7       	in	r31, 0x3e	; 62
   11b04:	81 83       	std	Z+1, r24	; 0x01
   11b06:	92 83       	std	Z+2, r25	; 0x02
   11b08:	a3 83       	std	Z+3, r26	; 0x03
   11b0a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    if(gpib_log_fp)
   11b0e:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11b12:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11b16:	00 97       	sbiw	r24, 0x00	; 0
   11b18:	a1 f0       	breq	.+40     	; 0x11b42 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11b1a:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>
        printf("Capturing Closed\n");
   11b1e:	81 e2       	ldi	r24, 0x21	; 33
   11b20:	94 e1       	ldi	r25, 0x14	; 20
   11b22:	a0 e0       	ldi	r26, 0x00	; 0
   11b24:	ed b7       	in	r30, 0x3d	; 61
   11b26:	fe b7       	in	r31, 0x3e	; 62
   11b28:	81 83       	std	Z+1, r24	; 0x01
   11b2a:	92 83       	std	Z+2, r25	; 0x02
   11b2c:	a3 83       	std	Z+3, r26	; 0x03
   11b2e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        gpib_log_fp = stdout;
   11b32:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11b36:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11b3a:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11b3e:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }
}
   11b42:	cd b7       	in	r28, 0x3d	; 61
   11b44:	de b7       	in	r29, 0x3e	; 62
   11b46:	25 96       	adiw	r28, 0x05	; 5
   11b48:	e4 e0       	ldi	r30, 0x04	; 4
   11b4a:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00011b4e <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11b4e:	ef 92       	push	r14
   11b50:	ff 92       	push	r15
   11b52:	0f 93       	push	r16
   11b54:	1f 93       	push	r17
   11b56:	cf 93       	push	r28
   11b58:	df 93       	push	r29
   11b5a:	00 d0       	rcall	.+0      	; 0x11b5c <gpib_error_test+0xe>
   11b5c:	1f 92       	push	r1
   11b5e:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11b60:	ec 01       	movw	r28, r24
   11b62:	cc 27       	eor	r28, r28
   11b64:	d0 7d       	andi	r29, 0xD0	; 208
   11b66:	20 97       	sbiw	r28, 0x00	; 0
   11b68:	61 f0       	breq	.+24     	; 0x11b82 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11b6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b6e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b72:	8d 72       	andi	r24, 0x2D	; 45
   11b74:	99 27       	eor	r25, r25
   11b76:	87 01       	movw	r16, r14
   11b78:	00 27       	eor	r16, r16
   11b7a:	10 71       	andi	r17, 0x10	; 16
   11b7c:	89 2b       	or	r24, r25
   11b7e:	59 f4       	brne	.+22     	; 0x11b96 <gpib_error_test+0x48>
   11b80:	17 c0       	rjmp	.+46     	; 0x11bb0 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11b82:	80 e0       	ldi	r24, 0x00	; 0
   11b84:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <uart_keyhit>
   11b88:	89 2b       	or	r24, r25
   11b8a:	79 f7       	brne	.-34     	; 0x11b6a <gpib_error_test+0x1c>
   11b8c:	0e 94 f9 6e 	call	0xddf2	; 0xddf2 <mmc_ins_status>
   11b90:	01 97       	sbiw	r24, 0x01	; 1
   11b92:	59 f7       	brne	.-42     	; 0x11b6a <gpib_error_test+0x1c>
   11b94:	62 c0       	rjmp	.+196    	; 0x11c5a <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11b96:	01 15       	cp	r16, r1
   11b98:	11 05       	cpc	r17, r1
   11b9a:	51 f0       	breq	.+20     	; 0x11bb0 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11b9c:	8a e1       	ldi	r24, 0x1A	; 26
   11b9e:	94 e1       	ldi	r25, 0x14	; 20
   11ba0:	a0 e0       	ldi	r26, 0x00	; 0
   11ba2:	ed b7       	in	r30, 0x3d	; 61
   11ba4:	fe b7       	in	r31, 0x3e	; 62
   11ba6:	81 83       	std	Z+1, r24	; 0x01
   11ba8:	92 83       	std	Z+2, r25	; 0x02
   11baa:	a3 83       	std	Z+3, r26	; 0x03
   11bac:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11bb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bb4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bb8:	8d 72       	andi	r24, 0x2D	; 45
   11bba:	99 27       	eor	r25, r25
   11bbc:	89 2b       	or	r24, r25
   11bbe:	c1 f0       	breq	.+48     	; 0x11bf0 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11bc0:	f6 fe       	sbrs	r15, 6
   11bc2:	0a c0       	rjmp	.+20     	; 0x11bd8 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11bc4:	8f e0       	ldi	r24, 0x0F	; 15
   11bc6:	94 e1       	ldi	r25, 0x14	; 20
   11bc8:	a0 e0       	ldi	r26, 0x00	; 0
   11bca:	ed b7       	in	r30, 0x3d	; 61
   11bcc:	fe b7       	in	r31, 0x3e	; 62
   11bce:	81 83       	std	Z+1, r24	; 0x01
   11bd0:	92 83       	std	Z+2, r25	; 0x02
   11bd2:	a3 83       	std	Z+3, r26	; 0x03
   11bd4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11bd8:	d7 ff       	sbrs	r29, 7
   11bda:	0a c0       	rjmp	.+20     	; 0x11bf0 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11bdc:	88 e0       	ldi	r24, 0x08	; 8
   11bde:	94 e1       	ldi	r25, 0x14	; 20
   11be0:	a0 e0       	ldi	r26, 0x00	; 0
   11be2:	ed b7       	in	r30, 0x3d	; 61
   11be4:	fe b7       	in	r31, 0x3e	; 62
   11be6:	81 83       	std	Z+1, r24	; 0x01
   11be8:	92 83       	std	Z+2, r25	; 0x02
   11bea:	a3 83       	std	Z+3, r26	; 0x03
   11bec:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        }

        if(uart_keyhit(0))
   11bf0:	80 e0       	ldi	r24, 0x00	; 0
   11bf2:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <uart_keyhit>
   11bf6:	89 2b       	or	r24, r25
   11bf8:	51 f0       	breq	.+20     	; 0x11c0e <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11bfa:	8b ef       	ldi	r24, 0xFB	; 251
   11bfc:	93 e1       	ldi	r25, 0x13	; 19
   11bfe:	a0 e0       	ldi	r26, 0x00	; 0
   11c00:	ed b7       	in	r30, 0x3d	; 61
   11c02:	fe b7       	in	r31, 0x3e	; 62
   11c04:	81 83       	std	Z+1, r24	; 0x01
   11c06:	92 83       	std	Z+2, r25	; 0x02
   11c08:	a3 83       	std	Z+3, r26	; 0x03
   11c0a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

        if( mmc_ins_status() != 1 )
   11c0e:	0e 94 f9 6e 	call	0xddf2	; 0xddf2 <mmc_ins_status>
   11c12:	01 97       	sbiw	r24, 0x01	; 1
   11c14:	51 f0       	breq	.+20     	; 0x11c2a <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11c16:	8a ee       	ldi	r24, 0xEA	; 234
   11c18:	93 e1       	ldi	r25, 0x13	; 19
   11c1a:	a0 e0       	ldi	r26, 0x00	; 0
   11c1c:	ed b7       	in	r30, 0x3d	; 61
   11c1e:	fe b7       	in	r31, 0x3e	; 62
   11c20:	81 83       	std	Z+1, r24	; 0x01
   11c22:	92 83       	std	Z+2, r25	; 0x02
   11c24:	a3 83       	std	Z+3, r26	; 0x03
   11c26:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

        if(val & IFC_FLAG)
   11c2a:	01 15       	cp	r16, r1
   11c2c:	11 05       	cpc	r17, r1
   11c2e:	09 f0       	breq	.+2      	; 0x11c32 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11c30:	f3 de       	rcall	.-538    	; 0x11a18 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11c32:	80 e0       	ldi	r24, 0x00	; 0
   11c34:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <uart_keyhit>
   11c38:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11c3a:	11 f0       	breq	.+4      	; 0x11c40 <gpib_error_test+0xf2>
   11c3c:	ed de       	rcall	.-550    	; 0x11a18 <gpib_init_devices>
   11c3e:	0b c0       	rjmp	.+22     	; 0x11c56 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11c40:	0e 94 f9 6e 	call	0xddf2	; 0xddf2 <mmc_ins_status>
   11c44:	01 97       	sbiw	r24, 0x01	; 1
   11c46:	39 f4       	brne	.+14     	; 0x11c56 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11c48:	01 15       	cp	r16, r1
   11c4a:	11 05       	cpc	r17, r1
   11c4c:	31 f0       	breq	.+12     	; 0x11c5a <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11c4e:	54 98       	cbi	0x0a, 4	; 10
   11c50:	4c 9b       	sbis	0x09, 4	; 9
   11c52:	fd cf       	rjmp	.-6      	; 0x11c4e <gpib_error_test+0x100>
   11c54:	02 c0       	rjmp	.+4      	; 0x11c5a <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11c56:	c1 e0       	ldi	r28, 0x01	; 1
   11c58:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11c5a:	ce 01       	movw	r24, r28
   11c5c:	cd b7       	in	r28, 0x3d	; 61
   11c5e:	de b7       	in	r29, 0x3e	; 62
   11c60:	23 96       	adiw	r28, 0x03	; 3
   11c62:	e6 e0       	ldi	r30, 0x06	; 6
   11c64:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00011c68 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11c68:	1f 93       	push	r17
   11c6a:	cf 93       	push	r28
   11c6c:	df 93       	push	r29
   11c6e:	ec 01       	movw	r28, r24
   11c70:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11c72:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11c76:	8f 35       	cpi	r24, 0x5F	; 95
   11c78:	91 f0       	breq	.+36     	; 0x11c9e <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11c7a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c7e:	90 e0       	ldi	r25, 0x00	; 0
   11c80:	71 de       	rcall	.-798    	; 0x11964 <AMIGO_is_MLA>
   11c82:	89 2b       	or	r24, r25
   11c84:	c9 f4       	brne	.+50     	; 0x11cb8 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11c86:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c8a:	90 e0       	ldi	r25, 0x00	; 0
   11c8c:	35 de       	rcall	.-918    	; 0x118f8 <SS80_is_MLA>
   11c8e:	89 2b       	or	r24, r25
   11c90:	11 f5       	brne	.+68     	; 0x11cd6 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11c92:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c96:	90 e0       	ldi	r25, 0x00	; 0
   11c98:	9b de       	rcall	.-714    	; 0x119d0 <PRINTER_is_MLA>
   11c9a:	89 2b       	or	r24, r25
   11c9c:	59 f5       	brne	.+86     	; 0x11cf4 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11c9e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11ca2:	8f 33       	cpi	r24, 0x3F	; 63
   11ca4:	19 f4       	brne	.+6      	; 0x11cac <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11ca6:	80 e0       	ldi	r24, 0x00	; 0
   11ca8:	90 e0       	ldi	r25, 0x00	; 0
   11caa:	2e c0       	rjmp	.+92     	; 0x11d08 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11cac:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11cb0:	90 e0       	ldi	r25, 0x00	; 0
   11cb2:	6a de       	rcall	.-812    	; 0x11988 <AMIGO_is_MTA>
   11cb4:	89 2b       	or	r24, r25
   11cb6:	49 f0       	breq	.+18     	; 0x11cca <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11cb8:	11 23       	and	r17, r17
   11cba:	11 f0       	breq	.+4      	; 0x11cc0 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11cbc:	ce 01       	movw	r24, r28
   11cbe:	58 d8       	rcall	.-3920   	; 0x10d70 <gpib_unread>
   11cc0:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = AMIGO_COMMANDS(secondary);
   11cc4:	0e 94 aa bd 	call	0x17b54	; 0x17b54 <AMIGO_COMMANDS>
   11cc8:	1d c0       	rjmp	.+58     	; 0x11d04 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11cca:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11cce:	90 e0       	ldi	r25, 0x00	; 0
   11cd0:	25 de       	rcall	.-950    	; 0x1191c <SS80_is_MTA>
   11cd2:	89 2b       	or	r24, r25
   11cd4:	49 f0       	breq	.+18     	; 0x11ce8 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11cd6:	11 23       	and	r17, r17
   11cd8:	11 f0       	breq	.+4      	; 0x11cde <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11cda:	ce 01       	movw	r24, r28
   11cdc:	49 d8       	rcall	.-3950   	; 0x10d70 <gpib_unread>
   11cde:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = SS80_COMMANDS(secondary);
   11ce2:	0e 94 d0 b1 	call	0x163a0	; 0x163a0 <SS80_COMMANDS>
   11ce6:	0e c0       	rjmp	.+28     	; 0x11d04 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11ce8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11cec:	90 e0       	ldi	r25, 0x00	; 0
   11cee:	82 de       	rcall	.-764    	; 0x119f4 <PRINTER_is_MTA>
   11cf0:	89 2b       	or	r24, r25
   11cf2:	c9 f2       	breq	.-78     	; 0x11ca6 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11cf4:	11 23       	and	r17, r17
   11cf6:	11 f0       	breq	.+4      	; 0x11cfc <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11cf8:	ce 01       	movw	r24, r28
   11cfa:	3a d8       	rcall	.-3980   	; 0x10d70 <gpib_unread>
   11cfc:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = PRINTER_COMMANDS(secondary);
   11d00:	0e 94 23 c0 	call	0x18046	; 0x18046 <PRINTER_COMMANDS>
   11d04:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
            secondary = 0;
   11d08:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11d0a:	cf 91       	pop	r28
   11d0c:	1f 91       	pop	r17
   11d0e:	08 95       	ret

00011d10 <Send_Identify>:
   11d10:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11d12:	df 92       	push	r13
   11d14:	ff 92       	push	r15
   11d16:	0f 93       	push	r16
   11d18:	1f 93       	push	r17
   11d1a:	cf 93       	push	r28
   11d1c:	df 93       	push	r29
   11d1e:	cd b7       	in	r28, 0x3d	; 61
   11d20:	de b7       	in	r29, 0x3e	; 62
   11d22:	2b 97       	sbiw	r28, 0x0b	; 11
   11d24:	0f b6       	in	r0, 0x3f	; 63
   11d26:	f8 94       	cli
   11d28:	de bf       	out	0x3e, r29	; 62
   11d2a:	0f be       	out	0x3f, r0	; 63
   11d2c:	cd bf       	out	0x3d, r28	; 61
   11d2e:	f8 2e       	mov	r15, r24
   11d30:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11d32:	80 e0       	ldi	r24, 0x00	; 0
   11d34:	91 e0       	ldi	r25, 0x01	; 1
   11d36:	9b 87       	std	Y+11, r25	; 0x0b
   11d38:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11d3a:	8b 01       	movw	r16, r22
   11d3c:	20 e0       	ldi	r18, 0x00	; 0
   11d3e:	30 e0       	ldi	r19, 0x00	; 0
   11d40:	42 e0       	ldi	r20, 0x02	; 2
   11d42:	50 e0       	ldi	r21, 0x00	; 0
   11d44:	60 e0       	ldi	r22, 0x00	; 0
   11d46:	70 e0       	ldi	r23, 0x00	; 0
   11d48:	ce 01       	movw	r24, r28
   11d4a:	08 96       	adiw	r24, 0x08	; 8
   11d4c:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11d50:	ae 01       	movw	r20, r28
   11d52:	46 5f       	subi	r20, 0xF6	; 246
   11d54:	5f 4f       	sbci	r21, 0xFF	; 255
   11d56:	62 e0       	ldi	r22, 0x02	; 2
   11d58:	70 e0       	ldi	r23, 0x00	; 0
   11d5a:	ce 01       	movw	r24, r28
   11d5c:	08 96       	adiw	r24, 0x08	; 8
   11d5e:	cc dc       	rcall	.-1640   	; 0x116f8 <gpib_write_str>
   11d60:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d64:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d68:	02 97       	sbiw	r24, 0x02	; 2
   11d6a:	79 f0       	breq	.+30     	; 0x11d8a <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d6c:	25 72       	andi	r18, 0x25	; 37
   11d6e:	33 27       	eor	r19, r19
   11d70:	23 2b       	or	r18, r19
   11d72:	f9 f0       	breq	.+62     	; 0x11db2 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11d74:	ed b7       	in	r30, 0x3d	; 61
   11d76:	fe b7       	in	r31, 0x3e	; 62
   11d78:	d7 82       	std	Z+7, r13	; 0x07
   11d7a:	c6 82       	std	Z+6, r12	; 0x06
   11d7c:	8f 2d       	mov	r24, r15
   11d7e:	90 e0       	ldi	r25, 0x00	; 0
   11d80:	95 83       	std	Z+5, r25	; 0x05
   11d82:	84 83       	std	Z+4, r24	; 0x04
   11d84:	89 ec       	ldi	r24, 0xC9	; 201
   11d86:	93 e1       	ldi	r25, 0x13	; 19
   11d88:	0e c0       	rjmp	.+28     	; 0x11da6 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d8a:	24 72       	andi	r18, 0x24	; 36
   11d8c:	33 27       	eor	r19, r19
   11d8e:	23 2b       	or	r18, r19
   11d90:	81 f0       	breq	.+32     	; 0x11db2 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11d92:	ed b7       	in	r30, 0x3d	; 61
   11d94:	fe b7       	in	r31, 0x3e	; 62
   11d96:	d7 82       	std	Z+7, r13	; 0x07
   11d98:	c6 82       	std	Z+6, r12	; 0x06
   11d9a:	8f 2d       	mov	r24, r15
   11d9c:	90 e0       	ldi	r25, 0x00	; 0
   11d9e:	95 83       	std	Z+5, r25	; 0x05
   11da0:	84 83       	std	Z+4, r24	; 0x04
   11da2:	8f ea       	ldi	r24, 0xAF	; 175
   11da4:	93 e1       	ldi	r25, 0x13	; 19
   11da6:	a0 e0       	ldi	r26, 0x00	; 0
   11da8:	81 83       	std	Z+1, r24	; 0x01
   11daa:	92 83       	std	Z+2, r25	; 0x02
   11dac:	a3 83       	std	Z+3, r26	; 0x03
   11dae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
    return (status & ERROR_MASK);
   11db2:	8a 85       	ldd	r24, Y+10	; 0x0a
   11db4:	9b 85       	ldd	r25, Y+11	; 0x0b
   11db6:	88 27       	eor	r24, r24
   11db8:	90 7d       	andi	r25, 0xD0	; 208
}
   11dba:	2b 96       	adiw	r28, 0x0b	; 11
   11dbc:	0f b6       	in	r0, 0x3f	; 63
   11dbe:	f8 94       	cli
   11dc0:	de bf       	out	0x3e, r29	; 62
   11dc2:	0f be       	out	0x3f, r0	; 63
   11dc4:	cd bf       	out	0x3d, r28	; 61
   11dc6:	df 91       	pop	r29
   11dc8:	cf 91       	pop	r28
   11dca:	1f 91       	pop	r17
   11dcc:	0f 91       	pop	r16
   11dce:	ff 90       	pop	r15
   11dd0:	df 90       	pop	r13
   11dd2:	cf 90       	pop	r12
   11dd4:	08 95       	ret

00011dd6 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11dd6:	00 d0       	rcall	.+0      	; 0x11dd8 <GPIB+0x2>
   11dd8:	00 d0       	rcall	.+0      	; 0x11dda <GPIB+0x4>
   11dda:	1f 92       	push	r1
   11ddc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11de0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11de4:	85 30       	cpi	r24, 0x05	; 5
   11de6:	89 f4       	brne	.+34     	; 0x11e0a <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11de8:	27 71       	andi	r18, 0x17	; 23
   11dea:	33 27       	eor	r19, r19
   11dec:	23 2b       	or	r18, r19
   11dee:	51 f0       	breq	.+20     	; 0x11e04 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11df0:	87 e9       	ldi	r24, 0x97	; 151
   11df2:	93 e1       	ldi	r25, 0x13	; 19
   11df4:	a0 e0       	ldi	r26, 0x00	; 0
   11df6:	ed b7       	in	r30, 0x3d	; 61
   11df8:	fe b7       	in	r31, 0x3e	; 62
   11dfa:	81 83       	std	Z+1, r24	; 0x01
   11dfc:	92 83       	std	Z+2, r25	; 0x02
   11dfe:	a3 83       	std	Z+3, r26	; 0x03
   11e00:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        spoll = 0;
   11e04:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   11e08:	a0 c0       	rjmp	.+320    	; 0x11f4a <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11e0a:	85 31       	cpi	r24, 0x15	; 21
   11e0c:	39 f4       	brne	.+14     	; 0x11e1c <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e0e:	27 71       	andi	r18, 0x17	; 23
   11e10:	33 27       	eor	r19, r19
   11e12:	23 2b       	or	r18, r19
   11e14:	b9 f3       	breq	.-18     	; 0x11e04 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11e16:	8f e7       	ldi	r24, 0x7F	; 127
   11e18:	93 e1       	ldi	r25, 0x13	; 19
   11e1a:	ec cf       	rjmp	.-40     	; 0x11df4 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11e1c:	88 31       	cpi	r24, 0x18	; 24
   11e1e:	d9 f4       	brne	.+54     	; 0x11e56 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e20:	26 70       	andi	r18, 0x06	; 6
   11e22:	33 27       	eor	r19, r19
   11e24:	23 2b       	or	r18, r19
   11e26:	51 f0       	breq	.+20     	; 0x11e3c <GPIB+0x66>
            printf("[SPE]\n");
   11e28:	88 e7       	ldi	r24, 0x78	; 120
   11e2a:	93 e1       	ldi	r25, 0x13	; 19
   11e2c:	a0 e0       	ldi	r26, 0x00	; 0
   11e2e:	ed b7       	in	r30, 0x3d	; 61
   11e30:	fe b7       	in	r31, 0x3e	; 62
   11e32:	81 83       	std	Z+1, r24	; 0x01
   11e34:	92 83       	std	Z+2, r25	; 0x02
   11e36:	a3 83       	std	Z+3, r26	; 0x03
   11e38:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
        spoll = 1;
   11e3c:	81 e0       	ldi	r24, 0x01	; 1
   11e3e:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <spoll>
        if(SS80_is_MTA(talking))
   11e42:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11e46:	90 e0       	ldi	r25, 0x00	; 0
   11e48:	69 dd       	rcall	.-1326   	; 0x1191c <SS80_is_MTA>
   11e4a:	89 2b       	or	r24, r25
   11e4c:	09 f4       	brne	.+2      	; 0x11e50 <GPIB+0x7a>
   11e4e:	7d c0       	rjmp	.+250    	; 0x11f4a <GPIB+0x174>
        {
            return( SS80_Report() );
   11e50:	0e 94 83 ad 	call	0x15b06	; 0x15b06 <SS80_Report>
   11e54:	7c c0       	rjmp	.+248    	; 0x11f4e <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11e56:	89 31       	cpi	r24, 0x19	; 25
   11e58:	39 f4       	brne	.+14     	; 0x11e68 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11e5a:	26 70       	andi	r18, 0x06	; 6
   11e5c:	33 27       	eor	r19, r19
   11e5e:	23 2b       	or	r18, r19
   11e60:	89 f2       	breq	.-94     	; 0x11e04 <GPIB+0x2e>
            printf("[SPD]\n");
   11e62:	81 e7       	ldi	r24, 0x71	; 113
   11e64:	93 e1       	ldi	r25, 0x13	; 19
   11e66:	c6 cf       	rjmp	.-116    	; 0x11df4 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11e68:	84 30       	cpi	r24, 0x04	; 4
   11e6a:	09 f0       	breq	.+2      	; 0x11e6e <GPIB+0x98>
   11e6c:	48 c0       	rjmp	.+144    	; 0x11efe <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e6e:	22 ff       	sbrs	r18, 2
   11e70:	0a c0       	rjmp	.+20     	; 0x11e86 <GPIB+0xb0>
            printf("[SDC]\n");
   11e72:	8a e6       	ldi	r24, 0x6A	; 106
   11e74:	93 e1       	ldi	r25, 0x13	; 19
   11e76:	a0 e0       	ldi	r26, 0x00	; 0
   11e78:	ed b7       	in	r30, 0x3d	; 61
   11e7a:	fe b7       	in	r31, 0x3e	; 62
   11e7c:	81 83       	std	Z+1, r24	; 0x01
   11e7e:	92 83       	std	Z+2, r25	; 0x02
   11e80:	a3 83       	std	Z+3, r26	; 0x03
   11e82:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11e86:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11e8a:	90 e0       	ldi	r25, 0x00	; 0
   11e8c:	35 dd       	rcall	.-1430   	; 0x118f8 <SS80_is_MLA>
   11e8e:	89 2b       	or	r24, r25
   11e90:	d9 f0       	breq	.+54     	; 0x11ec8 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e96:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e9a:	84 72       	andi	r24, 0x24	; 36
   11e9c:	99 27       	eor	r25, r25
   11e9e:	89 2b       	or	r24, r25
   11ea0:	51 f0       	breq	.+20     	; 0x11eb6 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11ea2:	8e e5       	ldi	r24, 0x5E	; 94
   11ea4:	93 e1       	ldi	r25, 0x13	; 19
   11ea6:	a0 e0       	ldi	r26, 0x00	; 0
   11ea8:	ed b7       	in	r30, 0x3d	; 61
   11eaa:	fe b7       	in	r31, 0x3e	; 62
   11eac:	81 83       	std	Z+1, r24	; 0x01
   11eae:	92 83       	std	Z+2, r25	; 0x02
   11eb0:	a3 83       	std	Z+3, r26	; 0x03
   11eb2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11eb6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   11eba:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   11ebe:	85 81       	ldd	r24, Z+5	; 0x05
   11ec0:	90 e0       	ldi	r25, 0x00	; 0
   11ec2:	0e 94 55 ae 	call	0x15caa	; 0x15caa <SS80_Selected_Device_Clear>
   11ec6:	43 c0       	rjmp	.+134    	; 0x11f4e <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11ec8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11ecc:	90 e0       	ldi	r25, 0x00	; 0
   11ece:	4a dd       	rcall	.-1388   	; 0x11964 <AMIGO_is_MLA>
   11ed0:	89 2b       	or	r24, r25
   11ed2:	d9 f1       	breq	.+118    	; 0x11f4a <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ed4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ed8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11edc:	84 72       	andi	r24, 0x24	; 36
   11ede:	99 27       	eor	r25, r25
   11ee0:	89 2b       	or	r24, r25
   11ee2:	51 f0       	breq	.+20     	; 0x11ef8 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11ee4:	81 e5       	ldi	r24, 0x51	; 81
   11ee6:	93 e1       	ldi	r25, 0x13	; 19
   11ee8:	a0 e0       	ldi	r26, 0x00	; 0
   11eea:	ed b7       	in	r30, 0x3d	; 61
   11eec:	fe b7       	in	r31, 0x3e	; 62
   11eee:	81 83       	std	Z+1, r24	; 0x01
   11ef0:	92 83       	std	Z+2, r25	; 0x02
   11ef2:	a3 83       	std	Z+3, r26	; 0x03
   11ef4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11ef8:	0e 94 90 b8 	call	0x17120	; 0x17120 <amigo_cmd_clear>
   11efc:	28 c0       	rjmp	.+80     	; 0x11f4e <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11efe:	84 31       	cpi	r24, 0x14	; 20
   11f00:	99 f4       	brne	.+38     	; 0x11f28 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f02:	22 ff       	sbrs	r18, 2
   11f04:	0a c0       	rjmp	.+20     	; 0x11f1a <GPIB+0x144>
            printf("[DCL]\n");
   11f06:	8a e4       	ldi	r24, 0x4A	; 74
   11f08:	93 e1       	ldi	r25, 0x13	; 19
   11f0a:	a0 e0       	ldi	r26, 0x00	; 0
   11f0c:	ed b7       	in	r30, 0x3d	; 61
   11f0e:	fe b7       	in	r31, 0x3e	; 62
   11f10:	81 83       	std	Z+1, r24	; 0x01
   11f12:	92 83       	std	Z+2, r25	; 0x02
   11f14:	a3 83       	std	Z+3, r26	; 0x03
   11f16:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11f1a:	0e 94 47 ae 	call	0x15c8e	; 0x15c8e <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11f1e:	0e 94 90 b8 	call	0x17120	; 0x17120 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11f22:	0e 94 af be 	call	0x17d5e	; 0x17d5e <printer_close>
   11f26:	11 c0       	rjmp	.+34     	; 0x11f4a <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11f28:	25 71       	andi	r18, 0x15	; 21
   11f2a:	33 27       	eor	r19, r19
   11f2c:	23 2b       	or	r18, r19
   11f2e:	69 f0       	breq	.+26     	; 0x11f4a <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11f30:	90 e0       	ldi	r25, 0x00	; 0
   11f32:	ed b7       	in	r30, 0x3d	; 61
   11f34:	fe b7       	in	r31, 0x3e	; 62
   11f36:	95 83       	std	Z+5, r25	; 0x05
   11f38:	84 83       	std	Z+4, r24	; 0x04
   11f3a:	89 e2       	ldi	r24, 0x29	; 41
   11f3c:	93 e1       	ldi	r25, 0x13	; 19
   11f3e:	a0 e0       	ldi	r26, 0x00	; 0
   11f40:	81 83       	std	Z+1, r24	; 0x01
   11f42:	92 83       	std	Z+2, r25	; 0x02
   11f44:	a3 83       	std	Z+3, r26	; 0x03
   11f46:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    return(0);
   11f4a:	80 e0       	ldi	r24, 0x00	; 0
   11f4c:	90 e0       	ldi	r25, 0x00	; 0
}
   11f4e:	0f 90       	pop	r0
   11f50:	0f 90       	pop	r0
   11f52:	0f 90       	pop	r0
   11f54:	0f 90       	pop	r0
   11f56:	0f 90       	pop	r0
   11f58:	08 95       	ret

00011f5a <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11f5a:	cf 93       	push	r28
   11f5c:	df 93       	push	r29
   11f5e:	00 d0       	rcall	.+0      	; 0x11f60 <GPIB_TALK+0x6>
   11f60:	00 d0       	rcall	.+0      	; 0x11f62 <GPIB_TALK+0x8>
   11f62:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11f64:	90 91 ee 1e 	lds	r25, 0x1EEE	; 0x801eee <talking>
   11f68:	90 93 f1 1e 	sts	0x1EF1, r25	; 0x801ef1 <talking_last>
    talking = ch;
   11f6c:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11f70:	8f 35       	cpi	r24, 0x5F	; 95
   11f72:	79 f4       	brne	.+30     	; 0x11f92 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f78:	82 ff       	sbrs	r24, 2
   11f7a:	7f c0       	rjmp	.+254    	; 0x1207a <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11f7c:	86 ed       	ldi	r24, 0xD6	; 214
   11f7e:	92 e1       	ldi	r25, 0x12	; 18
   11f80:	a0 e0       	ldi	r26, 0x00	; 0
   11f82:	ed b7       	in	r30, 0x3d	; 61
   11f84:	fe b7       	in	r31, 0x3e	; 62
   11f86:	81 83       	std	Z+1, r24	; 0x01
   11f88:	92 83       	std	Z+2, r25	; 0x02
   11f8a:	a3 83       	std	Z+3, r26	; 0x03
   11f8c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   11f90:	74 c0       	rjmp	.+232    	; 0x1207a <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11f92:	c8 2f       	mov	r28, r24
   11f94:	d0 e0       	ldi	r29, 0x00	; 0
   11f96:	ce 01       	movw	r24, r28
   11f98:	c1 dc       	rcall	.-1662   	; 0x1191c <SS80_is_MTA>
   11f9a:	89 2b       	or	r24, r25
   11f9c:	e1 f0       	breq	.+56     	; 0x11fd6 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fa2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fa6:	84 72       	andi	r24, 0x24	; 36
   11fa8:	99 27       	eor	r25, r25
   11faa:	89 2b       	or	r24, r25
   11fac:	61 f0       	breq	.+24     	; 0x11fc6 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11fae:	ed b7       	in	r30, 0x3d	; 61
   11fb0:	fe b7       	in	r31, 0x3e	; 62
   11fb2:	d5 83       	std	Z+5, r29	; 0x05
   11fb4:	c4 83       	std	Z+4, r28	; 0x04
   11fb6:	85 ec       	ldi	r24, 0xC5	; 197
   11fb8:	92 e1       	ldi	r25, 0x12	; 18
   11fba:	a0 e0       	ldi	r26, 0x00	; 0
   11fbc:	81 83       	std	Z+1, r24	; 0x01
   11fbe:	92 83       	std	Z+2, r25	; 0x02
   11fc0:	a3 83       	std	Z+3, r26	; 0x03
   11fc2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif

        if (spoll)
   11fc6:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <spoll>
   11fca:	88 23       	and	r24, r24
   11fcc:	09 f4       	brne	.+2      	; 0x11fd0 <GPIB_TALK+0x76>
   11fce:	55 c0       	rjmp	.+170    	; 0x1207a <GPIB_TALK+0x120>
        {
            SS80_Report();
   11fd0:	0e 94 83 ad 	call	0x15b06	; 0x15b06 <SS80_Report>
   11fd4:	52 c0       	rjmp	.+164    	; 0x1207a <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11fd6:	ce 01       	movw	r24, r28
   11fd8:	d7 dc       	rcall	.-1618   	; 0x11988 <AMIGO_is_MTA>
   11fda:	89 2b       	or	r24, r25
   11fdc:	81 f0       	breq	.+32     	; 0x11ffe <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fe2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fe6:	84 72       	andi	r24, 0x24	; 36
   11fe8:	99 27       	eor	r25, r25
   11fea:	89 2b       	or	r24, r25
   11fec:	09 f4       	brne	.+2      	; 0x11ff0 <GPIB_TALK+0x96>
   11fee:	45 c0       	rjmp	.+138    	; 0x1207a <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11ff0:	ed b7       	in	r30, 0x3d	; 61
   11ff2:	fe b7       	in	r31, 0x3e	; 62
   11ff4:	d5 83       	std	Z+5, r29	; 0x05
   11ff6:	c4 83       	std	Z+4, r28	; 0x04
   11ff8:	83 eb       	ldi	r24, 0xB3	; 179
   11ffa:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11ffc:	38 c0       	rjmp	.+112    	; 0x1206e <GPIB_TALK+0x114>
   11ffe:	ce 01       	movw	r24, r28
   12000:	f9 dc       	rcall	.-1550   	; 0x119f4 <PRINTER_is_MTA>
   12002:	89 2b       	or	r24, r25
   12004:	79 f0       	breq	.+30     	; 0x12024 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12006:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1200a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1200e:	84 72       	andi	r24, 0x24	; 36
   12010:	99 27       	eor	r25, r25
   12012:	89 2b       	or	r24, r25
   12014:	91 f1       	breq	.+100    	; 0x1207a <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   12016:	ed b7       	in	r30, 0x3d	; 61
   12018:	fe b7       	in	r31, 0x3e	; 62
   1201a:	d5 83       	std	Z+5, r29	; 0x05
   1201c:	c4 83       	std	Z+4, r28	; 0x04
   1201e:	8f e9       	ldi	r24, 0x9F	; 159
   12020:	92 e1       	ldi	r25, 0x12	; 18
   12022:	25 c0       	rjmp	.+74     	; 0x1206e <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12024:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   12028:	90 e0       	ldi	r25, 0x00	; 0
   1202a:	d2 dc       	rcall	.-1628   	; 0x119d0 <PRINTER_is_MLA>
   1202c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12030:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12034:	89 2b       	or	r24, r25
   12036:	99 f0       	breq	.+38     	; 0x1205e <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12038:	24 72       	andi	r18, 0x24	; 36
   1203a:	33 27       	eor	r19, r19
   1203c:	23 2b       	or	r18, r19
   1203e:	51 f0       	breq	.+20     	; 0x12054 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   12040:	8f e8       	ldi	r24, 0x8F	; 143
   12042:	92 e1       	ldi	r25, 0x12	; 18
   12044:	a0 e0       	ldi	r26, 0x00	; 0
   12046:	ed b7       	in	r30, 0x3d	; 61
   12048:	fe b7       	in	r31, 0x3e	; 62
   1204a:	81 83       	std	Z+1, r24	; 0x01
   1204c:	92 83       	std	Z+2, r25	; 0x02
   1204e:	a3 83       	std	Z+3, r26	; 0x03
   12050:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printer_open(NULL);
   12054:	80 e0       	ldi	r24, 0x00	; 0
   12056:	90 e0       	ldi	r25, 0x00	; 0
   12058:	0e 94 07 bf 	call	0x17e0e	; 0x17e0e <printer_open>
   1205c:	0e c0       	rjmp	.+28     	; 0x1207a <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1205e:	22 ff       	sbrs	r18, 2
   12060:	0c c0       	rjmp	.+24     	; 0x1207a <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   12062:	ed b7       	in	r30, 0x3d	; 61
   12064:	fe b7       	in	r31, 0x3e	; 62
   12066:	d5 83       	std	Z+5, r29	; 0x05
   12068:	c4 83       	std	Z+4, r28	; 0x04
   1206a:	83 e8       	ldi	r24, 0x83	; 131
   1206c:	92 e1       	ldi	r25, 0x12	; 18
   1206e:	a0 e0       	ldi	r26, 0x00	; 0
   12070:	81 83       	std	Z+1, r24	; 0x01
   12072:	92 83       	std	Z+2, r25	; 0x02
   12074:	a3 83       	std	Z+3, r26	; 0x03
   12076:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   1207a:	80 e0       	ldi	r24, 0x00	; 0
   1207c:	90 e0       	ldi	r25, 0x00	; 0
   1207e:	cd b7       	in	r28, 0x3d	; 61
   12080:	de b7       	in	r29, 0x3e	; 62
   12082:	25 96       	adiw	r28, 0x05	; 5
   12084:	e2 e0       	ldi	r30, 0x02	; 2
   12086:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0001208a <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   1208a:	a9 e0       	ldi	r26, 0x09	; 9
   1208c:	b0 e0       	ldi	r27, 0x00	; 0
   1208e:	eb e4       	ldi	r30, 0x4B	; 75
   12090:	f0 e9       	ldi	r31, 0x90	; 144
   12092:	0c 94 fb e6 	jmp	0x1cdf6	; 0x1cdf6 <__prologue_saves__+0x1e>
   12096:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   12098:	c8 2f       	mov	r28, r24
   1209a:	d0 e0       	ldi	r29, 0x00	; 0
   1209c:	ce 01       	movw	r24, r28
   1209e:	50 dc       	rcall	.-1888   	; 0x11940 <SS80_is_MSA>
   120a0:	89 2b       	or	r24, r25
   120a2:	09 f1       	breq	.+66     	; 0x120e6 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120ac:	84 72       	andi	r24, 0x24	; 36
   120ae:	99 27       	eor	r25, r25
   120b0:	89 2b       	or	r24, r25
   120b2:	61 f0       	breq	.+24     	; 0x120cc <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   120b4:	ed b7       	in	r30, 0x3d	; 61
   120b6:	fe b7       	in	r31, 0x3e	; 62
   120b8:	d5 83       	std	Z+5, r29	; 0x05
   120ba:	c4 83       	std	Z+4, r28	; 0x04
   120bc:	82 e7       	ldi	r24, 0x72	; 114
   120be:	92 e1       	ldi	r25, 0x12	; 18
   120c0:	a0 e0       	ldi	r26, 0x00	; 0
   120c2:	81 83       	std	Z+1, r24	; 0x01
   120c4:	92 83       	std	Z+2, r25	; 0x02
   120c6:	a3 83       	std	Z+3, r26	; 0x03
   120c8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   120cc:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   120d0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   120d4:	81 81       	ldd	r24, Z+1	; 0x01
   120d6:	90 e0       	ldi	r25, 0x00	; 0
   120d8:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   120dc:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   120e0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   120e4:	25 c0       	rjmp	.+74     	; 0x12130 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   120e6:	ce 01       	movw	r24, r28
   120e8:	61 dc       	rcall	.-1854   	; 0x119ac <AMIGO_is_MSA>
   120ea:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   120ee:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120f2:	89 2b       	or	r24, r25
   120f4:	11 f1       	breq	.+68     	; 0x1213a <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120f6:	c9 01       	movw	r24, r18
   120f8:	84 72       	andi	r24, 0x24	; 36
   120fa:	99 27       	eor	r25, r25
   120fc:	89 2b       	or	r24, r25
   120fe:	61 f0       	breq	.+24     	; 0x12118 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12100:	ed b7       	in	r30, 0x3d	; 61
   12102:	fe b7       	in	r31, 0x3e	; 62
   12104:	d5 83       	std	Z+5, r29	; 0x05
   12106:	c4 83       	std	Z+4, r28	; 0x04
   12108:	80 e6       	ldi	r24, 0x60	; 96
   1210a:	92 e1       	ldi	r25, 0x12	; 18
   1210c:	a0 e0       	ldi	r26, 0x00	; 0
   1210e:	81 83       	std	Z+1, r24	; 0x01
   12110:	92 83       	std	Z+2, r25	; 0x02
   12112:	a3 83       	std	Z+3, r26	; 0x03
   12114:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   12118:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1211c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12120:	81 81       	ldd	r24, Z+1	; 0x01
   12122:	90 e0       	ldi	r25, 0x00	; 0
   12124:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   12128:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1212c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   12130:	66 81       	ldd	r22, Z+6	; 0x06
   12132:	77 81       	ldd	r23, Z+7	; 0x07
   12134:	81 2f       	mov	r24, r17
   12136:	ec dd       	rcall	.-1064   	; 0x11d10 <Send_Identify>
   12138:	1d c0       	rjmp	.+58     	; 0x12174 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1213a:	c9 01       	movw	r24, r18
   1213c:	84 72       	andi	r24, 0x24	; 36
   1213e:	99 27       	eor	r25, r25
   12140:	00 97       	sbiw	r24, 0x00	; 0
   12142:	c1 f0       	breq	.+48     	; 0x12174 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12144:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   12148:	90 e0       	ldi	r25, 0x00	; 0
   1214a:	ed b7       	in	r30, 0x3d	; 61
   1214c:	fe b7       	in	r31, 0x3e	; 62
   1214e:	91 87       	std	Z+9, r25	; 0x09
   12150:	80 87       	std	Z+8, r24	; 0x08
   12152:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   12156:	90 e0       	ldi	r25, 0x00	; 0
   12158:	97 83       	std	Z+7, r25	; 0x07
   1215a:	86 83       	std	Z+6, r24	; 0x06
   1215c:	d5 83       	std	Z+5, r29	; 0x05
   1215e:	c4 83       	std	Z+4, r28	; 0x04
   12160:	8a e3       	ldi	r24, 0x3A	; 58
   12162:	92 e1       	ldi	r25, 0x12	; 18
   12164:	a0 e0       	ldi	r26, 0x00	; 0
   12166:	81 83       	std	Z+1, r24	; 0x01
   12168:	92 83       	std	Z+2, r25	; 0x02
   1216a:	a3 83       	std	Z+3, r26	; 0x03
   1216c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   12170:	80 e0       	ldi	r24, 0x00	; 0
   12172:	90 e0       	ldi	r25, 0x00	; 0
}
   12174:	cd b7       	in	r28, 0x3d	; 61
   12176:	de b7       	in	r29, 0x3e	; 62
   12178:	29 96       	adiw	r28, 0x09	; 9
   1217a:	e3 e0       	ldi	r30, 0x03	; 3
   1217c:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__epilogue_restores__+0x1e>

00012180 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   12180:	00 d0       	rcall	.+0      	; 0x12182 <listen_cleanup+0x2>
   12182:	1f 92       	push	r1
    if(listening_last)
   12184:	60 91 ea 1e 	lds	r22, 0x1EEA	; 0x801eea <listening_last>
   12188:	66 23       	and	r22, r22
   1218a:	e1 f0       	breq	.+56     	; 0x121c4 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   1218c:	70 e0       	ldi	r23, 0x00	; 0
   1218e:	40 e2       	ldi	r20, 0x20	; 32
   12190:	50 e0       	ldi	r21, 0x00	; 0
   12192:	84 e0       	ldi	r24, 0x04	; 4
   12194:	90 e0       	ldi	r25, 0x00	; 0
   12196:	a7 d6       	rcall	.+3406   	; 0x12ee6 <find_device>
        if(index == -1)
   12198:	8f 3f       	cpi	r24, 0xFF	; 255
   1219a:	a1 f0       	breq	.+40     	; 0x121c4 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1219c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121a4:	84 72       	andi	r24, 0x24	; 36
   121a6:	99 27       	eor	r25, r25
   121a8:	89 2b       	or	r24, r25
   121aa:	51 f0       	breq	.+20     	; 0x121c0 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   121ac:	89 e2       	ldi	r24, 0x29	; 41
   121ae:	92 e1       	ldi	r25, 0x12	; 18
   121b0:	a0 e0       	ldi	r26, 0x00	; 0
   121b2:	ed b7       	in	r30, 0x3d	; 61
   121b4:	fe b7       	in	r31, 0x3e	; 62
   121b6:	81 83       	std	Z+1, r24	; 0x01
   121b8:	92 83       	std	Z+2, r25	; 0x02
   121ba:	a3 83       	std	Z+3, r26	; 0x03
   121bc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printer_close();
   121c0:	0e 94 af be 	call	0x17d5e	; 0x17d5e <printer_close>
    }
}
   121c4:	0f 90       	pop	r0
   121c6:	0f 90       	pop	r0
   121c8:	0f 90       	pop	r0
   121ca:	08 95       	ret

000121cc <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   121cc:	cf 93       	push	r28
   121ce:	df 93       	push	r29
   121d0:	00 d0       	rcall	.+0      	; 0x121d2 <GPIB_LISTEN+0x6>
   121d2:	00 d0       	rcall	.+0      	; 0x121d4 <GPIB_LISTEN+0x8>
   121d4:	1f 92       	push	r1
   121d6:	c8 2f       	mov	r28, r24
    listening_last = listening;
   121d8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   121dc:	80 93 ea 1e 	sts	0x1EEA, r24	; 0x801eea <listening_last>
    listening = ch;
   121e0:	c0 93 f0 1e 	sts	0x1EF0, r28	; 0x801ef0 <listening>

    listen_cleanup();
   121e4:	cd df       	rcall	.-102    	; 0x12180 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   121e6:	cf 33       	cpi	r28, 0x3F	; 63
   121e8:	19 f5       	brne	.+70     	; 0x12230 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   121ea:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   121ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121f2:	82 ff       	sbrs	r24, 2
   121f4:	74 c0       	rjmp	.+232    	; 0x122de <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   121f6:	82 e2       	ldi	r24, 0x22	; 34
   121f8:	93 e1       	ldi	r25, 0x13	; 19
   121fa:	a0 e0       	ldi	r26, 0x00	; 0
   121fc:	ed b7       	in	r30, 0x3d	; 61
   121fe:	fe b7       	in	r31, 0x3e	; 62
   12200:	81 83       	std	Z+1, r24	; 0x01
   12202:	92 83       	std	Z+2, r25	; 0x02
   12204:	a3 83       	std	Z+3, r26	; 0x03
   12206:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1220a:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <lastcmd>
   1220e:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   12212:	8f 35       	cpi	r24, 0x5F	; 95
   12214:	91 05       	cpc	r25, r1
   12216:	09 f0       	breq	.+2      	; 0x1221a <GPIB_LISTEN+0x4e>
   12218:	62 c0       	rjmp	.+196    	; 0x122de <GPIB_LISTEN+0x112>
                printf("\n");
   1221a:	80 e2       	ldi	r24, 0x20	; 32
   1221c:	93 e1       	ldi	r25, 0x13	; 19
   1221e:	a0 e0       	ldi	r26, 0x00	; 0
   12220:	ed b7       	in	r30, 0x3d	; 61
   12222:	fe b7       	in	r31, 0x3e	; 62
   12224:	81 83       	std	Z+1, r24	; 0x01
   12226:	92 83       	std	Z+2, r25	; 0x02
   12228:	a3 83       	std	Z+3, r26	; 0x03
   1222a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1222e:	57 c0       	rjmp	.+174    	; 0x122de <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12230:	d0 e0       	ldi	r29, 0x00	; 0
   12232:	ce 01       	movw	r24, r28
   12234:	97 db       	rcall	.-2258   	; 0x11964 <AMIGO_is_MLA>
   12236:	89 2b       	or	r24, r25
   12238:	81 f0       	breq	.+32     	; 0x1225a <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1223a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1223e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12242:	84 72       	andi	r24, 0x24	; 36
   12244:	99 27       	eor	r25, r25
   12246:	89 2b       	or	r24, r25
   12248:	09 f4       	brne	.+2      	; 0x1224c <GPIB_LISTEN+0x80>
   1224a:	49 c0       	rjmp	.+146    	; 0x122de <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1224c:	ed b7       	in	r30, 0x3d	; 61
   1224e:	fe b7       	in	r31, 0x3e	; 62
   12250:	d5 83       	std	Z+5, r29	; 0x05
   12252:	c4 83       	std	Z+4, r28	; 0x04
   12254:	8e e0       	ldi	r24, 0x0E	; 14
   12256:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12258:	3c c0       	rjmp	.+120    	; 0x122d2 <GPIB_LISTEN+0x106>
   1225a:	ce 01       	movw	r24, r28
   1225c:	4d db       	rcall	.-2406   	; 0x118f8 <SS80_is_MLA>
   1225e:	89 2b       	or	r24, r25
   12260:	79 f0       	breq	.+30     	; 0x12280 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12262:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12266:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1226a:	84 72       	andi	r24, 0x24	; 36
   1226c:	99 27       	eor	r25, r25
   1226e:	89 2b       	or	r24, r25
   12270:	b1 f1       	breq	.+108    	; 0x122de <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12272:	ed b7       	in	r30, 0x3d	; 61
   12274:	fe b7       	in	r31, 0x3e	; 62
   12276:	d5 83       	std	Z+5, r29	; 0x05
   12278:	c4 83       	std	Z+4, r28	; 0x04
   1227a:	8d ef       	ldi	r24, 0xFD	; 253
   1227c:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1227e:	29 c0       	rjmp	.+82     	; 0x122d2 <GPIB_LISTEN+0x106>
   12280:	ce 01       	movw	r24, r28
   12282:	a6 db       	rcall	.-2228   	; 0x119d0 <PRINTER_is_MLA>
   12284:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12288:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1228c:	89 2b       	or	r24, r25
   1228e:	c9 f0       	breq	.+50     	; 0x122c2 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12290:	24 72       	andi	r18, 0x24	; 36
   12292:	33 27       	eor	r19, r19
   12294:	23 2b       	or	r18, r19
   12296:	61 f0       	breq	.+24     	; 0x122b0 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12298:	ed b7       	in	r30, 0x3d	; 61
   1229a:	fe b7       	in	r31, 0x3e	; 62
   1229c:	d5 83       	std	Z+5, r29	; 0x05
   1229e:	c4 83       	std	Z+4, r28	; 0x04
   122a0:	89 ee       	ldi	r24, 0xE9	; 233
   122a2:	92 e1       	ldi	r25, 0x12	; 18
   122a4:	a0 e0       	ldi	r26, 0x00	; 0
   122a6:	81 83       	std	Z+1, r24	; 0x01
   122a8:	92 83       	std	Z+2, r25	; 0x02
   122aa:	a3 83       	std	Z+3, r26	; 0x03
   122ac:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
        if(talking != UNT)
   122b0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   122b4:	8f 35       	cpi	r24, 0x5F	; 95
   122b6:	99 f0       	breq	.+38     	; 0x122de <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   122b8:	80 e0       	ldi	r24, 0x00	; 0
   122ba:	90 e0       	ldi	r25, 0x00	; 0
   122bc:	0e 94 07 bf 	call	0x17e0e	; 0x17e0e <printer_open>
   122c0:	0e c0       	rjmp	.+28     	; 0x122de <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   122c2:	22 ff       	sbrs	r18, 2
   122c4:	0c c0       	rjmp	.+24     	; 0x122de <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   122c6:	ed b7       	in	r30, 0x3d	; 61
   122c8:	fe b7       	in	r31, 0x3e	; 62
   122ca:	d5 83       	std	Z+5, r29	; 0x05
   122cc:	c4 83       	std	Z+4, r28	; 0x04
   122ce:	8d ed       	ldi	r24, 0xDD	; 221
   122d0:	92 e1       	ldi	r25, 0x12	; 18
   122d2:	a0 e0       	ldi	r26, 0x00	; 0
   122d4:	81 83       	std	Z+1, r24	; 0x01
   122d6:	92 83       	std	Z+2, r25	; 0x02
   122d8:	a3 83       	std	Z+3, r26	; 0x03
   122da:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   122de:	80 e0       	ldi	r24, 0x00	; 0
   122e0:	90 e0       	ldi	r25, 0x00	; 0
   122e2:	cd b7       	in	r28, 0x3d	; 61
   122e4:	de b7       	in	r29, 0x3e	; 62
   122e6:	25 96       	adiw	r28, 0x05	; 5
   122e8:	e2 e0       	ldi	r30, 0x02	; 2
   122ea:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

000122ee <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   122ee:	cf 93       	push	r28
   122f0:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   122f2:	92 db       	rcall	.-2268   	; 0x11a18 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   122f4:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <gpib_log_fp+0x1>
   122f8:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   122fc:	80 e0       	ldi	r24, 0x00	; 0
   122fe:	90 e0       	ldi	r25, 0x00	; 0
   12300:	4f d8       	rcall	.-3938   	; 0x113a0 <gpib_read_byte>
   12302:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12304:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12308:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1230a:	02 c0       	rjmp	.+4      	; 0x12310 <gpib_task+0x22>
   1230c:	ce 01       	movw	r24, r28
   1230e:	4e d9       	rcall	.-3428   	; 0x115ac <gpib_decode>
#endif
        status = gpib_error_test(val);
   12310:	ce 01       	movw	r24, r28
   12312:	1d dc       	rcall	.-1990   	; 0x11b4e <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12314:	9c 01       	movw	r18, r24
   12316:	23 70       	andi	r18, 0x03	; 3
   12318:	33 27       	eor	r19, r19
   1231a:	23 2b       	or	r18, r19
   1231c:	09 f0       	breq	.+2      	; 0x12320 <gpib_task+0x32>
   1231e:	43 c0       	rjmp	.+134    	; 0x123a6 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12320:	89 2b       	or	r24, r25
   12322:	61 f7       	brne	.-40     	; 0x122fc <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12324:	d2 ff       	sbrs	r29, 2
   12326:	26 c0       	rjmp	.+76     	; 0x12374 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   12328:	8c 2f       	mov	r24, r28
   1232a:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   1232c:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   1232e:	10 f4       	brcc	.+4      	; 0x12334 <gpib_task+0x46>
   12330:	52 dd       	rcall	.-1372   	; 0x11dd6 <GPIB>
                continue;
   12332:	e4 cf       	rjmp	.-56     	; 0x122fc <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12334:	90 ee       	ldi	r25, 0xE0	; 224
   12336:	98 0f       	add	r25, r24
   12338:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1233a:	10 f4       	brcc	.+4      	; 0x12340 <gpib_task+0x52>
   1233c:	47 df       	rcall	.-370    	; 0x121cc <GPIB_LISTEN>
                continue;
   1233e:	de cf       	rjmp	.-68     	; 0x122fc <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12340:	90 ec       	ldi	r25, 0xC0	; 192
   12342:	98 0f       	add	r25, r24
   12344:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   12346:	10 f4       	brcc	.+4      	; 0x1234c <gpib_task+0x5e>
   12348:	08 de       	rcall	.-1008   	; 0x11f5a <GPIB_TALK>
                continue;
   1234a:	d8 cf       	rjmp	.-80     	; 0x122fc <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1234c:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <listening>
   12350:	99 23       	and	r25, r25
   12352:	59 f0       	breq	.+22     	; 0x1236a <gpib_task+0x7c>
   12354:	20 91 e8 1c 	lds	r18, 0x1CE8	; 0x801ce8 <lastcmd>
   12358:	30 91 e9 1c 	lds	r19, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   1235c:	2f 35       	cpi	r18, 0x5F	; 95
   1235e:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   12360:	21 f4       	brne	.+8      	; 0x1236a <gpib_task+0x7c>
   12362:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   12366:	91 de       	rcall	.-734    	; 0x1208a <GPIB_SECONDARY_ADDRESS>
                continue;
   12368:	c9 cf       	rjmp	.-110    	; 0x122fc <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   1236a:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   1236e:	60 e0       	ldi	r22, 0x00	; 0
   12370:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12372:	12 c0       	rjmp	.+36     	; 0x12398 <gpib_task+0xaa>
   12374:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   12378:	90 e0       	ldi	r25, 0x00	; 0
   1237a:	2a db       	rcall	.-2476   	; 0x119d0 <PRINTER_is_MLA>
   1237c:	89 2b       	or	r24, r25
   1237e:	29 f0       	breq	.+10     	; 0x1238a <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   12380:	ce 01       	movw	r24, r28
   12382:	99 27       	eor	r25, r25
   12384:	0e 94 aa bf 	call	0x17f54	; 0x17f54 <printer_buffer>
                continue;
   12388:	b9 cf       	rjmp	.-142    	; 0x122fc <gpib_task+0xe>
            }

            if(!secondary)
   1238a:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
   1238e:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12390:	09 f4       	brne	.+2      	; 0x12394 <gpib_task+0xa6>
   12392:	b4 cf       	rjmp	.-152    	; 0x122fc <gpib_task+0xe>
   12394:	61 e0       	ldi	r22, 0x01	; 1
   12396:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   12398:	67 dc       	rcall	.-1842   	; 0x11c68 <GPIB_COMMANDS>
   1239a:	d9 db       	rcall	.-2126   	; 0x11b4e <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1239c:	83 70       	andi	r24, 0x03	; 3
   1239e:	99 27       	eor	r25, r25
   123a0:	89 2b       	or	r24, r25
   123a2:	09 f4       	brne	.+2      	; 0x123a6 <gpib_task+0xb8>
   123a4:	ab cf       	rjmp	.-170    	; 0x122fc <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   123a6:	df 91       	pop	r29
   123a8:	cf 91       	pop	r28
   123aa:	08 95       	ret

000123ac <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   123ac:	08 95       	ret

000123ae <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   123ae:	cf 93       	push	r28
   123b0:	df 93       	push	r29
   123b2:	00 d0       	rcall	.+0      	; 0x123b4 <gpib_help+0x6>
   123b4:	1f 92       	push	r1
   123b6:	ec 01       	movw	r28, r24
    printf("gpib  help\n");
   123b8:	82 ee       	ldi	r24, 0xE2	; 226
   123ba:	97 e1       	ldi	r25, 0x17	; 23
   123bc:	a0 e0       	ldi	r26, 0x00	; 0
   123be:	ed b7       	in	r30, 0x3d	; 61
   123c0:	fe b7       	in	r31, 0x3e	; 62
   123c2:	81 83       	std	Z+1, r24	; 0x01
   123c4:	92 83       	std	Z+2, r25	; 0x02
   123c6:	a3 83       	std	Z+3, r26	; 0x03
   123c8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    if(full)
   123cc:	cd 2b       	or	r28, r29
   123ce:	51 f0       	breq	.+20     	; 0x123e4 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   123d0:	8a ee       	ldi	r24, 0xEA	; 234
   123d2:	94 e1       	ldi	r25, 0x14	; 20
   123d4:	a0 e0       	ldi	r26, 0x00	; 0
   123d6:	ed b7       	in	r30, 0x3d	; 61
   123d8:	fe b7       	in	r31, 0x3e	; 62
   123da:	81 83       	std	Z+1, r24	; 0x01
   123dc:	92 83       	std	Z+2, r25	; 0x02
   123de:	a3 83       	std	Z+3, r26	; 0x03
   123e0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
			"     Example: gpib mount PRINTER 5\n"
			"gpib umount address"
			"     Example: gpib umount 6\n"
            );
    }
}
   123e4:	cd b7       	in	r28, 0x3d	; 61
   123e6:	de b7       	in	r29, 0x3e	; 62
   123e8:	23 96       	adiw	r28, 0x03	; 3
   123ea:	e2 e0       	ldi	r30, 0x02	; 2
   123ec:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

000123f0 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   123f0:	a5 e0       	ldi	r26, 0x05	; 5
   123f2:	b0 e0       	ldi	r27, 0x00	; 0
   123f4:	ee ef       	ldi	r30, 0xFE	; 254
   123f6:	f1 e9       	ldi	r31, 0x91	; 145
   123f8:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   123fc:	fb 01       	movw	r30, r22
   123fe:	e0 80       	ld	r14, Z
   12400:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12402:	e1 14       	cp	r14, r1
   12404:	f1 04       	cpc	r15, r1
   12406:	19 f4       	brne	.+6      	; 0x1240e <gpib_tests+0x1e>
        return(0);
   12408:	80 e0       	ldi	r24, 0x00	; 0
   1240a:	90 e0       	ldi	r25, 0x00	; 0
   1240c:	f1 c0       	rjmp	.+482    	; 0x125f0 <gpib_tests+0x200>
   1240e:	6b 01       	movw	r12, r22
   12410:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12412:	66 ea       	ldi	r22, 0xA6	; 166
   12414:	7d e0       	ldi	r23, 0x0D	; 13
   12416:	c7 01       	movw	r24, r14
   12418:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   1241c:	89 2b       	or	r24, r25
   1241e:	a1 f0       	breq	.+40     	; 0x12448 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12420:	f6 01       	movw	r30, r12
   12422:	e2 80       	ldd	r14, Z+2	; 0x02
   12424:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12426:	e1 14       	cp	r14, r1
   12428:	f1 04       	cpc	r15, r1
   1242a:	21 f4       	brne	.+8      	; 0x12434 <gpib_tests+0x44>
        {
            gpib_help(1);
   1242c:	81 e0       	ldi	r24, 0x01	; 1
   1242e:	90 e0       	ldi	r25, 0x00	; 0
   12430:	be df       	rcall	.-132    	; 0x123ae <gpib_help>
   12432:	dc c0       	rjmp	.+440    	; 0x125ec <gpib_tests+0x1fc>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12434:	6d e6       	ldi	r22, 0x6D	; 109
   12436:	76 e1       	ldi	r23, 0x16	; 22
   12438:	c7 01       	movw	r24, r14
   1243a:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   1243e:	89 2b       	or	r24, r25
   12440:	a9 f7       	brne	.-22     	; 0x1242c <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12442:	c2 e0       	ldi	r28, 0x02	; 2
   12444:	d0 e0       	ldi	r29, 0x00	; 0
   12446:	02 c0       	rjmp	.+4      	; 0x1244c <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12448:	c1 e0       	ldi	r28, 0x01	; 1
   1244a:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1244c:	6b ea       	ldi	r22, 0xAB	; 171
   1244e:	7d e0       	ldi	r23, 0x0D	; 13
   12450:	c7 01       	movw	r24, r14
   12452:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   12456:	89 2b       	or	r24, r25
   12458:	29 f1       	breq	.+74     	; 0x124a4 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1245a:	fe 01       	movw	r30, r28
   1245c:	ee 0f       	add	r30, r30
   1245e:	ff 1f       	adc	r31, r31
   12460:	ec 0d       	add	r30, r12
   12462:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12464:	01 90       	ld	r0, Z+
   12466:	f0 81       	ld	r31, Z
   12468:	e0 2d       	mov	r30, r0
   1246a:	80 81       	ld	r24, Z
   1246c:	8d 33       	cpi	r24, 0x3D	; 61
   1246e:	09 f4       	brne	.+2      	; 0x12472 <gpib_tests+0x82>
            ++ind;
   12470:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12472:	cc 0f       	add	r28, r28
   12474:	dd 1f       	adc	r29, r29
   12476:	cc 0d       	add	r28, r12
   12478:	dd 1d       	adc	r29, r13
   1247a:	88 81       	ld	r24, Y
   1247c:	99 81       	ldd	r25, Y+1	; 0x01
   1247e:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   12482:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   12486:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   1248a:	ed b7       	in	r30, 0x3d	; 61
   1248c:	fe b7       	in	r31, 0x3e	; 62
   1248e:	75 83       	std	Z+5, r23	; 0x05
   12490:	64 83       	std	Z+4, r22	; 0x04
   12492:	8d ed       	ldi	r24, 0xDD	; 221
   12494:	94 e1       	ldi	r25, 0x14	; 20
   12496:	a0 e0       	ldi	r26, 0x00	; 0
   12498:	81 83       	std	Z+1, r24	; 0x01
   1249a:	92 83       	std	Z+2, r25	; 0x02
   1249c:	a3 83       	std	Z+3, r26	; 0x03
   1249e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   124a2:	a4 c0       	rjmp	.+328    	; 0x125ec <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   124a4:	62 eb       	ldi	r22, 0xB2	; 178
   124a6:	7d e0       	ldi	r23, 0x0D	; 13
   124a8:	c7 01       	movw	r24, r14
   124aa:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   124ae:	89 2b       	or	r24, r25
   124b0:	61 f0       	breq	.+24     	; 0x124ca <gpib_tests+0xda>
    {
		if(!mount(argc, argv))
   124b2:	b6 01       	movw	r22, r12
   124b4:	c5 01       	movw	r24, r10
   124b6:	0e 94 99 a2 	call	0x14532	; 0x14532 <mount>
   124ba:	81 11       	cpse	r24, r1
   124bc:	03 c0       	rjmp	.+6      	; 0x124c4 <gpib_tests+0xd4>
			return(-1);
   124be:	8f ef       	ldi	r24, 0xFF	; 255
   124c0:	9f ef       	ldi	r25, 0xFF	; 255
   124c2:	96 c0       	rjmp	.+300    	; 0x125f0 <gpib_tests+0x200>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   124c4:	0e 94 4e e4 	call	0x1c89c	; 0x1c89c <update_drive_counts>
   124c8:	91 c0       	rjmp	.+290    	; 0x125ec <gpib_tests+0x1fc>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   124ca:	61 eb       	ldi	r22, 0xB1	; 177
   124cc:	7d e0       	ldi	r23, 0x0D	; 13
   124ce:	c7 01       	movw	r24, r14
   124d0:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   124d4:	89 2b       	or	r24, r25
   124d6:	29 f0       	breq	.+10     	; 0x124e2 <gpib_tests+0xf2>
    {
		if(!umount(argc, argv))
   124d8:	b6 01       	movw	r22, r12
   124da:	c5 01       	movw	r24, r10
   124dc:	0e 94 df 9c 	call	0x139be	; 0x139be <umount>
   124e0:	ec cf       	rjmp	.-40     	; 0x124ba <gpib_tests+0xca>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   124e2:	68 eb       	ldi	r22, 0xB8	; 184
   124e4:	7d e0       	ldi	r23, 0x0D	; 13
   124e6:	c7 01       	movw	r24, r14
   124e8:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   124ec:	89 2b       	or	r24, r25
   124ee:	c9 f0       	breq	.+50     	; 0x12522 <gpib_tests+0x132>
    {
        ptr = argv[ind];
   124f0:	cc 0f       	add	r28, r28
   124f2:	dd 1f       	adc	r29, r29
   124f4:	cc 0d       	add	r28, r12
   124f6:	dd 1d       	adc	r29, r13
   124f8:	88 81       	ld	r24, Y
   124fa:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   124fc:	00 97       	sbiw	r24, 0x00	; 0
   124fe:	69 f0       	breq	.+26     	; 0x1251a <gpib_tests+0x12a>
   12500:	fc 01       	movw	r30, r24
   12502:	20 81       	ld	r18, Z
   12504:	22 23       	and	r18, r18
   12506:	49 f0       	breq	.+18     	; 0x1251a <gpib_tests+0x12a>
   12508:	62 ec       	ldi	r22, 0xC2	; 194
   1250a:	7d e0       	ldi	r23, 0x0D	; 13
   1250c:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   12510:	89 2b       	or	r24, r25
   12512:	19 f0       	breq	.+6      	; 0x1251a <gpib_tests+0x12a>
            display_Addresses(1);
   12514:	81 e0       	ldi	r24, 0x01	; 1
   12516:	90 e0       	ldi	r25, 0x00	; 0
   12518:	02 c0       	rjmp	.+4      	; 0x1251e <gpib_tests+0x12e>
        else
            display_Addresses(0);
   1251a:	80 e0       	ldi	r24, 0x00	; 0
   1251c:	90 e0       	ldi	r25, 0x00	; 0
   1251e:	47 d1       	rcall	.+654    	; 0x127ae <display_Addresses>
   12520:	65 c0       	rjmp	.+202    	; 0x125ec <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   12522:	65 ec       	ldi	r22, 0xC5	; 197
   12524:	7d e0       	ldi	r23, 0x0D	; 13
   12526:	c7 01       	movw	r24, r14
   12528:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1252c:	89 2b       	or	r24, r25
   1252e:	c9 f0       	breq	.+50     	; 0x12562 <gpib_tests+0x172>
    {
        ptr = argv[ind];
   12530:	cc 0f       	add	r28, r28
   12532:	dd 1f       	adc	r29, r29
   12534:	cc 0d       	add	r28, r12
   12536:	dd 1d       	adc	r29, r13
   12538:	88 81       	ld	r24, Y
   1253a:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1253c:	00 97       	sbiw	r24, 0x00	; 0
   1253e:	69 f0       	breq	.+26     	; 0x1255a <gpib_tests+0x16a>
   12540:	fc 01       	movw	r30, r24
   12542:	20 81       	ld	r18, Z
   12544:	22 23       	and	r18, r18
   12546:	49 f0       	breq	.+18     	; 0x1255a <gpib_tests+0x16a>
   12548:	62 ec       	ldi	r22, 0xC2	; 194
   1254a:	7d e0       	ldi	r23, 0x0D	; 13
   1254c:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   12550:	89 2b       	or	r24, r25
   12552:	19 f0       	breq	.+6      	; 0x1255a <gpib_tests+0x16a>
            display_Config(1);
   12554:	81 e0       	ldi	r24, 0x01	; 1
   12556:	90 e0       	ldi	r25, 0x00	; 0
   12558:	02 c0       	rjmp	.+4      	; 0x1255e <gpib_tests+0x16e>
        else
            display_Config(0);
   1255a:	80 e0       	ldi	r24, 0x00	; 0
   1255c:	90 e0       	ldi	r25, 0x00	; 0
   1255e:	fb d1       	rcall	.+1014   	; 0x12956 <display_Config>
   12560:	45 c0       	rjmp	.+138    	; 0x125ec <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12562:	6c ec       	ldi	r22, 0xCC	; 204
   12564:	7d e0       	ldi	r23, 0x0D	; 13
   12566:	c7 01       	movw	r24, r14
   12568:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1256c:	89 2b       	or	r24, r25
   1256e:	19 f0       	breq	.+6      	; 0x12576 <gpib_tests+0x186>
    {
        gpib_timer_elapsed_begin();
   12570:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   12574:	3b c0       	rjmp	.+118    	; 0x125ec <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12576:	6a ed       	ldi	r22, 0xDA	; 218
   12578:	7d e0       	ldi	r23, 0x0D	; 13
   1257a:	c7 01       	movw	r24, r14
   1257c:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   12580:	89 2b       	or	r24, r25
   12582:	29 f0       	breq	.+10     	; 0x1258e <gpib_tests+0x19e>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12584:	82 ee       	ldi	r24, 0xE2	; 226
   12586:	9d e0       	ldi	r25, 0x0D	; 13
   12588:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   1258c:	2f c0       	rjmp	.+94     	; 0x125ec <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   1258e:	60 ef       	ldi	r22, 0xF0	; 240
   12590:	7d e0       	ldi	r23, 0x0D	; 13
   12592:	c7 01       	movw	r24, r14
   12594:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   12598:	89 2b       	or	r24, r25
    {
        gpib_task();
   1259a:	11 f0       	breq	.+4      	; 0x125a0 <gpib_tests+0x1b0>
   1259c:	a8 de       	rcall	.-688    	; 0x122ee <gpib_task>
   1259e:	26 c0       	rjmp	.+76     	; 0x125ec <gpib_tests+0x1fc>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   125a0:	8e 01       	movw	r16, r28
   125a2:	0f 5f       	subi	r16, 0xFF	; 255
   125a4:	1f 4f       	sbci	r17, 0xFF	; 255
   125a6:	95 01       	movw	r18, r10
   125a8:	a8 01       	movw	r20, r16
   125aa:	65 ef       	ldi	r22, 0xF5	; 245
   125ac:	7d e0       	ldi	r23, 0x0D	; 13
   125ae:	c7 01       	movw	r24, r14
   125b0:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   125b4:	89 2b       	or	r24, r25
   125b6:	09 f4       	brne	.+2      	; 0x125ba <gpib_tests+0x1ca>
   125b8:	27 cf       	rjmp	.-434    	; 0x12408 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   125ba:	00 0f       	add	r16, r16
   125bc:	11 1f       	adc	r17, r17
   125be:	e6 01       	movw	r28, r12
   125c0:	c0 0f       	add	r28, r16
   125c2:	d1 1f       	adc	r29, r17
   125c4:	88 81       	ld	r24, Y
   125c6:	99 81       	ldd	r25, Y+1	; 0x01
   125c8:	00 97       	sbiw	r24, 0x00	; 0
   125ca:	51 f0       	breq	.+20     	; 0x125e0 <gpib_tests+0x1f0>
   125cc:	6b ef       	ldi	r22, 0xFB	; 251
   125ce:	7d e0       	ldi	r23, 0x0D	; 13
   125d0:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   125d4:	61 e0       	ldi	r22, 0x01	; 1
   125d6:	70 e0       	ldi	r23, 0x00	; 0
   125d8:	89 2b       	or	r24, r25
   125da:	21 f4       	brne	.+8      	; 0x125e4 <gpib_tests+0x1f4>
   125dc:	60 e0       	ldi	r22, 0x00	; 0
   125de:	02 c0       	rjmp	.+4      	; 0x125e4 <gpib_tests+0x1f4>
   125e0:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   125e2:	70 e0       	ldi	r23, 0x00	; 0
   125e4:	22 97       	sbiw	r28, 0x02	; 2
   125e6:	88 81       	ld	r24, Y
   125e8:	99 81       	ldd	r25, Y+1	; 0x01
   125ea:	1f da       	rcall	.-3010   	; 0x11a2a <gpib_trace_task>
        return(1);
   125ec:	81 e0       	ldi	r24, 0x01	; 1
   125ee:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   125f0:	cd b7       	in	r28, 0x3d	; 61
   125f2:	de b7       	in	r29, 0x3e	; 62
   125f4:	25 96       	adiw	r28, 0x05	; 5
   125f6:	ea e0       	ldi	r30, 0x0A	; 10
   125f8:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

000125fc <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   125fc:	0f 93       	push	r16
   125fe:	1f 93       	push	r17
   12600:	cf 93       	push	r28
   12602:	8c 01       	movw	r16, r24
   12604:	c0 e0       	ldi	r28, 0x00	; 0
   12606:	24 e0       	ldi	r18, 0x04	; 4
   12608:	c2 02       	muls	r28, r18
   1260a:	f0 01       	movw	r30, r0
   1260c:	11 24       	eor	r1, r1
   1260e:	ec 53       	subi	r30, 0x3C	; 60
   12610:	fe 4f       	sbci	r31, 0xFE	; 254
   12612:	82 81       	ldd	r24, Z+2	; 0x02
   12614:	93 81       	ldd	r25, Z+3	; 0x03
   12616:	01 96       	adiw	r24, 0x01	; 1
   12618:	49 f0       	breq	.+18     	; 0x1262c <tok_index+0x30>
   1261a:	60 81       	ld	r22, Z
   1261c:	71 81       	ldd	r23, Z+1	; 0x01
   1261e:	c8 01       	movw	r24, r16
   12620:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   12624:	89 2b       	or	r24, r25
   12626:	21 f4       	brne	.+8      	; 0x12630 <tok_index+0x34>
   12628:	cf 5f       	subi	r28, 0xFF	; 255
   1262a:	ed cf       	rjmp	.-38     	; 0x12606 <tok_index+0xa>
   1262c:	8f ef       	ldi	r24, 0xFF	; 255
   1262e:	01 c0       	rjmp	.+2      	; 0x12632 <tok_index+0x36>
   12630:	8c 2f       	mov	r24, r28
   12632:	cf 91       	pop	r28
   12634:	1f 91       	pop	r17
   12636:	0f 91       	pop	r16
   12638:	08 95       	ret

0001263a <tok_name>:
   1263a:	e4 ec       	ldi	r30, 0xC4	; 196
   1263c:	f1 e0       	ldi	r31, 0x01	; 1
   1263e:	20 e0       	ldi	r18, 0x00	; 0
   12640:	30 e0       	ldi	r19, 0x00	; 0
   12642:	90 e0       	ldi	r25, 0x00	; 0
   12644:	42 81       	ldd	r20, Z+2	; 0x02
   12646:	53 81       	ldd	r21, Z+3	; 0x03
   12648:	4f 3f       	cpi	r20, 0xFF	; 255
   1264a:	6f ef       	ldi	r22, 0xFF	; 255
   1264c:	56 07       	cpc	r21, r22
   1264e:	89 f0       	breq	.+34     	; 0x12672 <tok_name+0x38>
   12650:	34 96       	adiw	r30, 0x04	; 4
   12652:	48 17       	cp	r20, r24
   12654:	59 07       	cpc	r21, r25
   12656:	51 f4       	brne	.+20     	; 0x1266c <tok_name+0x32>
   12658:	22 0f       	add	r18, r18
   1265a:	33 1f       	adc	r19, r19
   1265c:	22 0f       	add	r18, r18
   1265e:	33 1f       	adc	r19, r19
   12660:	f9 01       	movw	r30, r18
   12662:	ec 53       	subi	r30, 0x3C	; 60
   12664:	fe 4f       	sbci	r31, 0xFE	; 254
   12666:	80 81       	ld	r24, Z
   12668:	91 81       	ldd	r25, Z+1	; 0x01
   1266a:	08 95       	ret
   1266c:	2f 5f       	subi	r18, 0xFF	; 255
   1266e:	3f 4f       	sbci	r19, 0xFF	; 255
   12670:	e9 cf       	rjmp	.-46     	; 0x12644 <tok_name+0xa>
   12672:	80 e2       	ldi	r24, 0x20	; 32
   12674:	9c e0       	ldi	r25, 0x0C	; 12
   12676:	08 95       	ret

00012678 <print_tok_val>:
   12678:	cf 92       	push	r12
   1267a:	df 92       	push	r13
   1267c:	ef 92       	push	r14
   1267e:	ff 92       	push	r15
   12680:	0f 93       	push	r16
   12682:	1f 93       	push	r17
   12684:	cf 93       	push	r28
   12686:	ad b7       	in	r26, 0x3d	; 61
   12688:	be b7       	in	r27, 0x3e	; 62
   1268a:	1d 97       	sbiw	r26, 0x0d	; 13
   1268c:	0f b6       	in	r0, 0x3f	; 63
   1268e:	f8 94       	cli
   12690:	be bf       	out	0x3e, r27	; 62
   12692:	0f be       	out	0x3f, r0	; 63
   12694:	ad bf       	out	0x3d, r26	; 61
   12696:	c6 2f       	mov	r28, r22
   12698:	69 01       	movw	r12, r18
   1269a:	7a 01       	movw	r14, r20
   1269c:	ce df       	rcall	.-100    	; 0x1263a <tok_name>
   1269e:	8c 01       	movw	r16, r24
   126a0:	cc 23       	and	r28, r28
   126a2:	31 f0       	breq	.+12     	; 0x126b0 <print_tok_val+0x38>
   126a4:	80 e2       	ldi	r24, 0x20	; 32
   126a6:	90 e0       	ldi	r25, 0x00	; 0
   126a8:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <putchar>
   126ac:	c1 50       	subi	r28, 0x01	; 1
   126ae:	f8 cf       	rjmp	.-16     	; 0x126a0 <print_tok_val+0x28>
   126b0:	ed b7       	in	r30, 0x3d	; 61
   126b2:	fe b7       	in	r31, 0x3e	; 62
   126b4:	c2 86       	std	Z+10, r12	; 0x0a
   126b6:	d3 86       	std	Z+11, r13	; 0x0b
   126b8:	e4 86       	std	Z+12, r14	; 0x0c
   126ba:	f5 86       	std	Z+13, r15	; 0x0d
   126bc:	c6 82       	std	Z+6, r12	; 0x06
   126be:	d7 82       	std	Z+7, r13	; 0x07
   126c0:	e0 86       	std	Z+8, r14	; 0x08
   126c2:	f1 86       	std	Z+9, r15	; 0x09
   126c4:	15 83       	std	Z+5, r17	; 0x05
   126c6:	04 83       	std	Z+4, r16	; 0x04
   126c8:	8b ef       	ldi	r24, 0xFB	; 251
   126ca:	90 e2       	ldi	r25, 0x20	; 32
   126cc:	a0 e0       	ldi	r26, 0x00	; 0
   126ce:	81 83       	std	Z+1, r24	; 0x01
   126d0:	92 83       	std	Z+2, r25	; 0x02
   126d2:	a3 83       	std	Z+3, r26	; 0x03
   126d4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   126d8:	ad b7       	in	r26, 0x3d	; 61
   126da:	be b7       	in	r27, 0x3e	; 62
   126dc:	1d 96       	adiw	r26, 0x0d	; 13
   126de:	0f b6       	in	r0, 0x3f	; 63
   126e0:	f8 94       	cli
   126e2:	be bf       	out	0x3e, r27	; 62
   126e4:	0f be       	out	0x3f, r0	; 63
   126e6:	ad bf       	out	0x3d, r26	; 61
   126e8:	cf 91       	pop	r28
   126ea:	1f 91       	pop	r17
   126ec:	0f 91       	pop	r16
   126ee:	ff 90       	pop	r15
   126f0:	ef 90       	pop	r14
   126f2:	df 90       	pop	r13
   126f4:	cf 90       	pop	r12
   126f6:	08 95       	ret

000126f8 <print_tok_str>:
   126f8:	ef 92       	push	r14
   126fa:	ff 92       	push	r15
   126fc:	0f 93       	push	r16
   126fe:	1f 93       	push	r17
   12700:	cf 93       	push	r28
   12702:	ad b7       	in	r26, 0x3d	; 61
   12704:	be b7       	in	r27, 0x3e	; 62
   12706:	17 97       	sbiw	r26, 0x07	; 7
   12708:	0f b6       	in	r0, 0x3f	; 63
   1270a:	f8 94       	cli
   1270c:	be bf       	out	0x3e, r27	; 62
   1270e:	0f be       	out	0x3f, r0	; 63
   12710:	ad bf       	out	0x3d, r26	; 61
   12712:	c6 2f       	mov	r28, r22
   12714:	7a 01       	movw	r14, r20
   12716:	91 df       	rcall	.-222    	; 0x1263a <tok_name>
   12718:	8c 01       	movw	r16, r24
   1271a:	cc 23       	and	r28, r28
   1271c:	31 f0       	breq	.+12     	; 0x1272a <print_tok_str+0x32>
   1271e:	80 e2       	ldi	r24, 0x20	; 32
   12720:	90 e0       	ldi	r25, 0x00	; 0
   12722:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <putchar>
   12726:	c1 50       	subi	r28, 0x01	; 1
   12728:	f8 cf       	rjmp	.-16     	; 0x1271a <print_tok_str+0x22>
   1272a:	ed b7       	in	r30, 0x3d	; 61
   1272c:	fe b7       	in	r31, 0x3e	; 62
   1272e:	f7 82       	std	Z+7, r15	; 0x07
   12730:	e6 82       	std	Z+6, r14	; 0x06
   12732:	15 83       	std	Z+5, r17	; 0x05
   12734:	04 83       	std	Z+4, r16	; 0x04
   12736:	8f ee       	ldi	r24, 0xEF	; 239
   12738:	90 e2       	ldi	r25, 0x20	; 32
   1273a:	a0 e0       	ldi	r26, 0x00	; 0
   1273c:	81 83       	std	Z+1, r24	; 0x01
   1273e:	92 83       	std	Z+2, r25	; 0x02
   12740:	a3 83       	std	Z+3, r26	; 0x03
   12742:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12746:	ad b7       	in	r26, 0x3d	; 61
   12748:	be b7       	in	r27, 0x3e	; 62
   1274a:	17 96       	adiw	r26, 0x07	; 7
   1274c:	0f b6       	in	r0, 0x3f	; 63
   1274e:	f8 94       	cli
   12750:	be bf       	out	0x3e, r27	; 62
   12752:	0f be       	out	0x3f, r0	; 63
   12754:	ad bf       	out	0x3d, r26	; 61
   12756:	cf 91       	pop	r28
   12758:	1f 91       	pop	r17
   1275a:	0f 91       	pop	r16
   1275c:	ff 90       	pop	r15
   1275e:	ef 90       	pop	r14
   12760:	08 95       	ret

00012762 <print_tok>:
   12762:	0f 93       	push	r16
   12764:	1f 93       	push	r17
   12766:	cf 93       	push	r28
   12768:	00 d0       	rcall	.+0      	; 0x1276a <print_tok+0x8>
   1276a:	00 d0       	rcall	.+0      	; 0x1276c <print_tok+0xa>
   1276c:	1f 92       	push	r1
   1276e:	c6 2f       	mov	r28, r22
   12770:	64 df       	rcall	.-312    	; 0x1263a <tok_name>
   12772:	8c 01       	movw	r16, r24
   12774:	cc 23       	and	r28, r28
   12776:	31 f0       	breq	.+12     	; 0x12784 <print_tok+0x22>
   12778:	80 e2       	ldi	r24, 0x20	; 32
   1277a:	90 e0       	ldi	r25, 0x00	; 0
   1277c:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <putchar>
   12780:	c1 50       	subi	r28, 0x01	; 1
   12782:	f8 cf       	rjmp	.-16     	; 0x12774 <print_tok+0x12>
   12784:	ed b7       	in	r30, 0x3d	; 61
   12786:	fe b7       	in	r31, 0x3e	; 62
   12788:	15 83       	std	Z+5, r17	; 0x05
   1278a:	04 83       	std	Z+4, r16	; 0x04
   1278c:	8b ee       	ldi	r24, 0xEB	; 235
   1278e:	90 e2       	ldi	r25, 0x20	; 32
   12790:	a0 e0       	ldi	r26, 0x00	; 0
   12792:	81 83       	std	Z+1, r24	; 0x01
   12794:	92 83       	std	Z+2, r25	; 0x02
   12796:	a3 83       	std	Z+3, r26	; 0x03
   12798:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1279c:	0f 90       	pop	r0
   1279e:	0f 90       	pop	r0
   127a0:	0f 90       	pop	r0
   127a2:	0f 90       	pop	r0
   127a4:	0f 90       	pop	r0
   127a6:	cf 91       	pop	r28
   127a8:	1f 91       	pop	r17
   127aa:	0f 91       	pop	r16
   127ac:	08 95       	ret

000127ae <display_Addresses>:
   127ae:	2f 92       	push	r2
   127b0:	3f 92       	push	r3
   127b2:	4f 92       	push	r4
   127b4:	6f 92       	push	r6
   127b6:	7f 92       	push	r7
   127b8:	8f 92       	push	r8
   127ba:	cf 92       	push	r12
   127bc:	df 92       	push	r13
   127be:	ef 92       	push	r14
   127c0:	0f 93       	push	r16
   127c2:	1f 93       	push	r17
   127c4:	cf 93       	push	r28
   127c6:	df 93       	push	r29
   127c8:	cd b7       	in	r28, 0x3d	; 61
   127ca:	de b7       	in	r29, 0x3e	; 62
   127cc:	2a 97       	sbiw	r28, 0x0a	; 10
   127ce:	0f b6       	in	r0, 0x3f	; 63
   127d0:	f8 94       	cli
   127d2:	de bf       	out	0x3e, r29	; 62
   127d4:	0f be       	out	0x3f, r0	; 63
   127d6:	cd bf       	out	0x3d, r28	; 61
   127d8:	85 eb       	ldi	r24, 0xB5	; 181
   127da:	9d e1       	ldi	r25, 0x1D	; 29
   127dc:	a0 e0       	ldi	r26, 0x00	; 0
   127de:	ed b7       	in	r30, 0x3d	; 61
   127e0:	fe b7       	in	r31, 0x3e	; 62
   127e2:	81 83       	std	Z+1, r24	; 0x01
   127e4:	92 83       	std	Z+2, r25	; 0x02
   127e6:	a3 83       	std	Z+3, r26	; 0x03
   127e8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   127ec:	04 ef       	ldi	r16, 0xF4	; 244
   127ee:	1e e1       	ldi	r17, 0x1E	; 30
   127f0:	87 e9       	ldi	r24, 0x97	; 151
   127f2:	9d e1       	ldi	r25, 0x1D	; 29
   127f4:	6c 01       	movw	r12, r24
   127f6:	e1 2c       	mov	r14, r1
   127f8:	89 e9       	ldi	r24, 0x99	; 153
   127fa:	9d e1       	ldi	r25, 0x1D	; 29
   127fc:	3c 01       	movw	r6, r24
   127fe:	81 2c       	mov	r8, r1
   12800:	82 ea       	ldi	r24, 0xA2	; 162
   12802:	9d e1       	ldi	r25, 0x1D	; 29
   12804:	1c 01       	movw	r2, r24
   12806:	41 2c       	mov	r4, r1
   12808:	8c ea       	ldi	r24, 0xAC	; 172
   1280a:	9d e1       	ldi	r25, 0x1D	; 29
   1280c:	9c 01       	movw	r18, r24
   1280e:	40 e0       	ldi	r20, 0x00	; 0
   12810:	2e 83       	std	Y+6, r18	; 0x06
   12812:	3f 83       	std	Y+7, r19	; 0x07
   12814:	48 87       	std	Y+8, r20	; 0x08
   12816:	f8 01       	movw	r30, r16
   12818:	80 81       	ld	r24, Z
   1281a:	88 23       	and	r24, r24
   1281c:	09 f4       	brne	.+2      	; 0x12820 <display_Addresses+0x72>
   1281e:	76 c0       	rjmp	.+236    	; 0x1290c <display_Addresses+0x15e>
   12820:	83 30       	cpi	r24, 0x03	; 3
   12822:	21 f0       	breq	.+8      	; 0x1282c <display_Addresses+0x7e>
   12824:	81 30       	cpi	r24, 0x01	; 1
   12826:	09 f0       	breq	.+2      	; 0x1282a <display_Addresses+0x7c>
   12828:	57 c0       	rjmp	.+174    	; 0x128d8 <display_Addresses+0x12a>
   1282a:	1f c0       	rjmp	.+62     	; 0x1286a <display_Addresses+0xbc>
   1282c:	f8 01       	movw	r30, r16
   1282e:	87 81       	ldd	r24, Z+7	; 0x07
   12830:	90 85       	ldd	r25, Z+8	; 0x08
   12832:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   12836:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   1283a:	fc 01       	movw	r30, r24
   1283c:	84 81       	ldd	r24, Z+4	; 0x04
   1283e:	95 81       	ldd	r25, Z+5	; 0x05
   12840:	ed b7       	in	r30, 0x3d	; 61
   12842:	fe b7       	in	r31, 0x3e	; 62
   12844:	95 83       	std	Z+5, r25	; 0x05
   12846:	84 83       	std	Z+4, r24	; 0x04
   12848:	2e 81       	ldd	r18, Y+6	; 0x06
   1284a:	3f 81       	ldd	r19, Y+7	; 0x07
   1284c:	48 85       	ldd	r20, Y+8	; 0x08
   1284e:	21 83       	std	Z+1, r18	; 0x01
   12850:	32 83       	std	Z+2, r19	; 0x02
   12852:	43 83       	std	Z+3, r20	; 0x03
   12854:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12858:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1285c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   12860:	42 81       	ldd	r20, Z+2	; 0x02
   12862:	53 81       	ldd	r21, Z+3	; 0x03
   12864:	64 e0       	ldi	r22, 0x04	; 4
   12866:	82 e1       	ldi	r24, 0x12	; 18
   12868:	47 df       	rcall	.-370    	; 0x126f8 <print_tok_str>
   1286a:	f8 01       	movw	r30, r16
   1286c:	80 81       	ld	r24, Z
   1286e:	81 30       	cpi	r24, 0x01	; 1
   12870:	d9 f4       	brne	.+54     	; 0x128a8 <display_Addresses+0xfa>
   12872:	87 81       	ldd	r24, Z+7	; 0x07
   12874:	90 85       	ldd	r25, Z+8	; 0x08
   12876:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   1287a:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   1287e:	fc 01       	movw	r30, r24
   12880:	84 81       	ldd	r24, Z+4	; 0x04
   12882:	95 81       	ldd	r25, Z+5	; 0x05
   12884:	ed b7       	in	r30, 0x3d	; 61
   12886:	fe b7       	in	r31, 0x3e	; 62
   12888:	95 83       	std	Z+5, r25	; 0x05
   1288a:	84 83       	std	Z+4, r24	; 0x04
   1288c:	21 82       	std	Z+1, r2	; 0x01
   1288e:	32 82       	std	Z+2, r3	; 0x02
   12890:	43 82       	std	Z+3, r4	; 0x03
   12892:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12896:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1289a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1289e:	42 81       	ldd	r20, Z+2	; 0x02
   128a0:	53 81       	ldd	r21, Z+3	; 0x03
   128a2:	64 e0       	ldi	r22, 0x04	; 4
   128a4:	82 e1       	ldi	r24, 0x12	; 18
   128a6:	28 df       	rcall	.-432    	; 0x126f8 <print_tok_str>
   128a8:	f8 01       	movw	r30, r16
   128aa:	21 81       	ldd	r18, Z+1	; 0x01
   128ac:	30 e0       	ldi	r19, 0x00	; 0
   128ae:	40 e0       	ldi	r20, 0x00	; 0
   128b0:	50 e0       	ldi	r21, 0x00	; 0
   128b2:	64 e0       	ldi	r22, 0x04	; 4
   128b4:	81 e0       	ldi	r24, 0x01	; 1
   128b6:	e0 de       	rcall	.-576    	; 0x12678 <print_tok_val>
   128b8:	f8 01       	movw	r30, r16
   128ba:	22 81       	ldd	r18, Z+2	; 0x02
   128bc:	30 e0       	ldi	r19, 0x00	; 0
   128be:	40 e0       	ldi	r20, 0x00	; 0
   128c0:	50 e0       	ldi	r21, 0x00	; 0
   128c2:	64 e0       	ldi	r22, 0x04	; 4
   128c4:	8f e1       	ldi	r24, 0x1F	; 31
   128c6:	d8 de       	rcall	.-592    	; 0x12678 <print_tok_val>
   128c8:	f8 01       	movw	r30, r16
   128ca:	23 81       	ldd	r18, Z+3	; 0x03
   128cc:	34 81       	ldd	r19, Z+4	; 0x04
   128ce:	45 81       	ldd	r20, Z+5	; 0x05
   128d0:	56 81       	ldd	r21, Z+6	; 0x06
   128d2:	64 e0       	ldi	r22, 0x04	; 4
   128d4:	83 e0       	ldi	r24, 0x03	; 3
   128d6:	d0 de       	rcall	.-608    	; 0x12678 <print_tok_val>
   128d8:	f8 01       	movw	r30, r16
   128da:	80 81       	ld	r24, Z
   128dc:	84 30       	cpi	r24, 0x04	; 4
   128de:	79 f4       	brne	.+30     	; 0x128fe <display_Addresses+0x150>
   128e0:	ed b7       	in	r30, 0x3d	; 61
   128e2:	fe b7       	in	r31, 0x3e	; 62
   128e4:	61 82       	std	Z+1, r6	; 0x01
   128e6:	72 82       	std	Z+2, r7	; 0x02
   128e8:	83 82       	std	Z+3, r8	; 0x03
   128ea:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   128ee:	f8 01       	movw	r30, r16
   128f0:	21 81       	ldd	r18, Z+1	; 0x01
   128f2:	30 e0       	ldi	r19, 0x00	; 0
   128f4:	40 e0       	ldi	r20, 0x00	; 0
   128f6:	50 e0       	ldi	r21, 0x00	; 0
   128f8:	64 e0       	ldi	r22, 0x04	; 4
   128fa:	81 e0       	ldi	r24, 0x01	; 1
   128fc:	bd de       	rcall	.-646    	; 0x12678 <print_tok_val>
   128fe:	ed b7       	in	r30, 0x3d	; 61
   12900:	fe b7       	in	r31, 0x3e	; 62
   12902:	c1 82       	std	Z+1, r12	; 0x01
   12904:	d2 82       	std	Z+2, r13	; 0x02
   12906:	e3 82       	std	Z+3, r14	; 0x03
   12908:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1290c:	05 5f       	subi	r16, 0xF5	; 245
   1290e:	1f 4f       	sbci	r17, 0xFF	; 255
   12910:	ff e1       	ldi	r31, 0x1F	; 31
   12912:	08 37       	cpi	r16, 0x78	; 120
   12914:	1f 07       	cpc	r17, r31
   12916:	09 f0       	breq	.+2      	; 0x1291a <display_Addresses+0x16c>
   12918:	7e cf       	rjmp	.-260    	; 0x12816 <display_Addresses+0x68>
   1291a:	85 e9       	ldi	r24, 0x95	; 149
   1291c:	9d e1       	ldi	r25, 0x1D	; 29
   1291e:	a0 e0       	ldi	r26, 0x00	; 0
   12920:	ed b7       	in	r30, 0x3d	; 61
   12922:	fe b7       	in	r31, 0x3e	; 62
   12924:	81 83       	std	Z+1, r24	; 0x01
   12926:	92 83       	std	Z+2, r25	; 0x02
   12928:	a3 83       	std	Z+3, r26	; 0x03
   1292a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1292e:	2a 96       	adiw	r28, 0x0a	; 10
   12930:	0f b6       	in	r0, 0x3f	; 63
   12932:	f8 94       	cli
   12934:	de bf       	out	0x3e, r29	; 62
   12936:	0f be       	out	0x3f, r0	; 63
   12938:	cd bf       	out	0x3d, r28	; 61
   1293a:	df 91       	pop	r29
   1293c:	cf 91       	pop	r28
   1293e:	1f 91       	pop	r17
   12940:	0f 91       	pop	r16
   12942:	ef 90       	pop	r14
   12944:	df 90       	pop	r13
   12946:	cf 90       	pop	r12
   12948:	8f 90       	pop	r8
   1294a:	7f 90       	pop	r7
   1294c:	6f 90       	pop	r6
   1294e:	4f 90       	pop	r4
   12950:	3f 90       	pop	r3
   12952:	2f 90       	pop	r2
   12954:	08 95       	ret

00012956 <display_Config>:
   12956:	2f 92       	push	r2
   12958:	3f 92       	push	r3
   1295a:	4f 92       	push	r4
   1295c:	6f 92       	push	r6
   1295e:	7f 92       	push	r7
   12960:	8f 92       	push	r8
   12962:	af 92       	push	r10
   12964:	bf 92       	push	r11
   12966:	cf 92       	push	r12
   12968:	df 92       	push	r13
   1296a:	ef 92       	push	r14
   1296c:	0f 93       	push	r16
   1296e:	1f 93       	push	r17
   12970:	cf 93       	push	r28
   12972:	df 93       	push	r29
   12974:	cd b7       	in	r28, 0x3d	; 61
   12976:	de b7       	in	r29, 0x3e	; 62
   12978:	62 97       	sbiw	r28, 0x12	; 18
   1297a:	0f b6       	in	r0, 0x3f	; 63
   1297c:	f8 94       	cli
   1297e:	de bf       	out	0x3e, r29	; 62
   12980:	0f be       	out	0x3f, r0	; 63
   12982:	cd bf       	out	0x3d, r28	; 61
   12984:	5c 01       	movw	r10, r24
   12986:	85 e7       	ldi	r24, 0x75	; 117
   12988:	9d e1       	ldi	r25, 0x1D	; 29
   1298a:	a0 e0       	ldi	r26, 0x00	; 0
   1298c:	ed b7       	in	r30, 0x3d	; 61
   1298e:	fe b7       	in	r31, 0x3e	; 62
   12990:	81 83       	std	Z+1, r24	; 0x01
   12992:	92 83       	std	Z+2, r25	; 0x02
   12994:	a3 83       	std	Z+3, r26	; 0x03
   12996:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1299a:	04 ef       	ldi	r16, 0xF4	; 244
   1299c:	1e e1       	ldi	r17, 0x1E	; 30
   1299e:	8a ef       	ldi	r24, 0xFA	; 250
   129a0:	9c e1       	ldi	r25, 0x1C	; 28
   129a2:	9c 01       	movw	r18, r24
   129a4:	40 e0       	ldi	r20, 0x00	; 0
   129a6:	28 87       	std	Y+8, r18	; 0x08
   129a8:	39 87       	std	Y+9, r19	; 0x09
   129aa:	4a 87       	std	Y+10, r20	; 0x0a
   129ac:	8f e2       	ldi	r24, 0x2F	; 47
   129ae:	9d e1       	ldi	r25, 0x1D	; 29
   129b0:	6c 01       	movw	r12, r24
   129b2:	e1 2c       	mov	r14, r1
   129b4:	80 e1       	ldi	r24, 0x10	; 16
   129b6:	9d e1       	ldi	r25, 0x1D	; 29
   129b8:	3c 01       	movw	r6, r24
   129ba:	81 2c       	mov	r8, r1
   129bc:	8c ef       	ldi	r24, 0xFC	; 252
   129be:	9c e1       	ldi	r25, 0x1C	; 28
   129c0:	1c 01       	movw	r2, r24
   129c2:	41 2c       	mov	r4, r1
   129c4:	8c e6       	ldi	r24, 0x6C	; 108
   129c6:	9d e1       	ldi	r25, 0x1D	; 29
   129c8:	9c 01       	movw	r18, r24
   129ca:	40 e0       	ldi	r20, 0x00	; 0
   129cc:	2b 87       	std	Y+11, r18	; 0x0b
   129ce:	3c 87       	std	Y+12, r19	; 0x0c
   129d0:	4d 87       	std	Y+13, r20	; 0x0d
   129d2:	8d e4       	ldi	r24, 0x4D	; 77
   129d4:	9d e1       	ldi	r25, 0x1D	; 29
   129d6:	9c 01       	movw	r18, r24
   129d8:	40 e0       	ldi	r20, 0x00	; 0
   129da:	2e 87       	std	Y+14, r18	; 0x0e
   129dc:	3f 87       	std	Y+15, r19	; 0x0f
   129de:	48 8b       	std	Y+16, r20	; 0x10
   129e0:	f8 01       	movw	r30, r16
   129e2:	80 81       	ld	r24, Z
   129e4:	88 23       	and	r24, r24
   129e6:	09 f4       	brne	.+2      	; 0x129ea <display_Config+0x94>
   129e8:	16 c2       	rjmp	.+1068   	; 0x12e16 <display_Config+0x4c0>
   129ea:	83 30       	cpi	r24, 0x03	; 3
   129ec:	09 f0       	breq	.+2      	; 0x129f0 <display_Config+0x9a>
   129ee:	3f c1       	rjmp	.+638    	; 0x12c6e <display_Config+0x318>
   129f0:	27 81       	ldd	r18, Z+7	; 0x07
   129f2:	30 85       	ldd	r19, Z+8	; 0x08
   129f4:	3a 8b       	std	Y+18, r19	; 0x12
   129f6:	29 8b       	std	Y+17, r18	; 0x11
   129f8:	f9 01       	movw	r30, r18
   129fa:	84 81       	ldd	r24, Z+4	; 0x04
   129fc:	95 81       	ldd	r25, Z+5	; 0x05
   129fe:	ed b7       	in	r30, 0x3d	; 61
   12a00:	fe b7       	in	r31, 0x3e	; 62
   12a02:	95 83       	std	Z+5, r25	; 0x05
   12a04:	84 83       	std	Z+4, r24	; 0x04
   12a06:	2b 85       	ldd	r18, Y+11	; 0x0b
   12a08:	3c 85       	ldd	r19, Y+12	; 0x0c
   12a0a:	4d 85       	ldd	r20, Y+13	; 0x0d
   12a0c:	21 83       	std	Z+1, r18	; 0x01
   12a0e:	32 83       	std	Z+2, r19	; 0x02
   12a10:	43 83       	std	Z+3, r20	; 0x03
   12a12:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12a16:	e9 89       	ldd	r30, Y+17	; 0x11
   12a18:	fa 89       	ldd	r31, Y+18	; 0x12
   12a1a:	80 81       	ld	r24, Z
   12a1c:	90 e0       	ldi	r25, 0x00	; 0
   12a1e:	ed b7       	in	r30, 0x3d	; 61
   12a20:	fe b7       	in	r31, 0x3e	; 62
   12a22:	95 83       	std	Z+5, r25	; 0x05
   12a24:	84 83       	std	Z+4, r24	; 0x04
   12a26:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a28:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a2a:	48 89       	ldd	r20, Y+16	; 0x10
   12a2c:	21 83       	std	Z+1, r18	; 0x01
   12a2e:	32 83       	std	Z+2, r19	; 0x02
   12a30:	43 83       	std	Z+3, r20	; 0x03
   12a32:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12a36:	64 e0       	ldi	r22, 0x04	; 4
   12a38:	89 e0       	ldi	r24, 0x09	; 9
   12a3a:	93 de       	rcall	.-730    	; 0x12762 <print_tok>
   12a3c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a3e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a40:	20 81       	ld	r18, Z
   12a42:	30 e0       	ldi	r19, 0x00	; 0
   12a44:	40 e0       	ldi	r20, 0x00	; 0
   12a46:	50 e0       	ldi	r21, 0x00	; 0
   12a48:	68 e0       	ldi	r22, 0x08	; 8
   12a4a:	81 e0       	ldi	r24, 0x01	; 1
   12a4c:	15 de       	rcall	.-982    	; 0x12678 <print_tok_val>
   12a4e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a50:	fa 89       	ldd	r31, Y+18	; 0x12
   12a52:	21 81       	ldd	r18, Z+1	; 0x01
   12a54:	30 e0       	ldi	r19, 0x00	; 0
   12a56:	40 e0       	ldi	r20, 0x00	; 0
   12a58:	50 e0       	ldi	r21, 0x00	; 0
   12a5a:	68 e0       	ldi	r22, 0x08	; 8
   12a5c:	8f e1       	ldi	r24, 0x1F	; 31
   12a5e:	0c de       	rcall	.-1000   	; 0x12678 <print_tok_val>
   12a60:	e9 89       	ldd	r30, Y+17	; 0x11
   12a62:	fa 89       	ldd	r31, Y+18	; 0x12
   12a64:	42 81       	ldd	r20, Z+2	; 0x02
   12a66:	53 81       	ldd	r21, Z+3	; 0x03
   12a68:	68 e0       	ldi	r22, 0x08	; 8
   12a6a:	82 e1       	ldi	r24, 0x12	; 18
   12a6c:	45 de       	rcall	.-886    	; 0x126f8 <print_tok_str>
   12a6e:	64 e0       	ldi	r22, 0x04	; 4
   12a70:	81 e1       	ldi	r24, 0x11	; 17
   12a72:	77 de       	rcall	.-786    	; 0x12762 <print_tok>
   12a74:	64 e0       	ldi	r22, 0x04	; 4
   12a76:	85 e1       	ldi	r24, 0x15	; 21
   12a78:	74 de       	rcall	.-792    	; 0x12762 <print_tok>
   12a7a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a7c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a7e:	26 81       	ldd	r18, Z+6	; 0x06
   12a80:	37 81       	ldd	r19, Z+7	; 0x07
   12a82:	40 e0       	ldi	r20, 0x00	; 0
   12a84:	50 e0       	ldi	r21, 0x00	; 0
   12a86:	68 e0       	ldi	r22, 0x08	; 8
   12a88:	87 e1       	ldi	r24, 0x17	; 23
   12a8a:	f6 dd       	rcall	.-1044   	; 0x12678 <print_tok_val>
   12a8c:	64 e0       	ldi	r22, 0x04	; 4
   12a8e:	81 e1       	ldi	r24, 0x11	; 17
   12a90:	68 de       	rcall	.-816    	; 0x12762 <print_tok>
   12a92:	a1 14       	cp	r10, r1
   12a94:	b1 04       	cpc	r11, r1
   12a96:	09 f1       	breq	.+66     	; 0x12ada <display_Config+0x184>
   12a98:	64 e0       	ldi	r22, 0x04	; 4
   12a9a:	8b e0       	ldi	r24, 0x0B	; 11
   12a9c:	62 de       	rcall	.-828    	; 0x12762 <print_tok>
   12a9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa0:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa2:	20 85       	ldd	r18, Z+8	; 0x08
   12aa4:	31 85       	ldd	r19, Z+9	; 0x09
   12aa6:	40 e0       	ldi	r20, 0x00	; 0
   12aa8:	50 e0       	ldi	r21, 0x00	; 0
   12aaa:	68 e0       	ldi	r22, 0x08	; 8
   12aac:	88 e2       	ldi	r24, 0x28	; 40
   12aae:	e4 dd       	rcall	.-1080   	; 0x12678 <print_tok_val>
   12ab0:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab2:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab4:	22 85       	ldd	r18, Z+10	; 0x0a
   12ab6:	33 85       	ldd	r19, Z+11	; 0x0b
   12ab8:	40 e0       	ldi	r20, 0x00	; 0
   12aba:	50 e0       	ldi	r21, 0x00	; 0
   12abc:	68 e0       	ldi	r22, 0x08	; 8
   12abe:	85 e2       	ldi	r24, 0x25	; 37
   12ac0:	db dd       	rcall	.-1098   	; 0x12678 <print_tok_val>
   12ac2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ac4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ac6:	24 85       	ldd	r18, Z+12	; 0x0c
   12ac8:	30 e0       	ldi	r19, 0x00	; 0
   12aca:	40 e0       	ldi	r20, 0x00	; 0
   12acc:	50 e0       	ldi	r21, 0x00	; 0
   12ace:	68 e0       	ldi	r22, 0x08	; 8
   12ad0:	86 e2       	ldi	r24, 0x26	; 38
   12ad2:	d2 dd       	rcall	.-1116   	; 0x12678 <print_tok_val>
   12ad4:	64 e0       	ldi	r22, 0x04	; 4
   12ad6:	81 e1       	ldi	r24, 0x11	; 17
   12ad8:	44 de       	rcall	.-888    	; 0x12762 <print_tok>
   12ada:	64 e0       	ldi	r22, 0x04	; 4
   12adc:	87 e2       	ldi	r24, 0x27	; 39
   12ade:	41 de       	rcall	.-894    	; 0x12762 <print_tok>
   12ae0:	a1 14       	cp	r10, r1
   12ae2:	b1 04       	cpc	r11, r1
   12ae4:	49 f0       	breq	.+18     	; 0x12af8 <display_Config+0x1a2>
   12ae6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae8:	fa 89       	ldd	r31, Y+18	; 0x12
   12aea:	25 85       	ldd	r18, Z+13	; 0x0d
   12aec:	30 e0       	ldi	r19, 0x00	; 0
   12aee:	40 e0       	ldi	r20, 0x00	; 0
   12af0:	50 e0       	ldi	r21, 0x00	; 0
   12af2:	68 e0       	ldi	r22, 0x08	; 8
   12af4:	89 e2       	ldi	r24, 0x29	; 41
   12af6:	c0 dd       	rcall	.-1152   	; 0x12678 <print_tok_val>
   12af8:	e9 89       	ldd	r30, Y+17	; 0x11
   12afa:	fa 89       	ldd	r31, Y+18	; 0x12
   12afc:	26 85       	ldd	r18, Z+14	; 0x0e
   12afe:	37 85       	ldd	r19, Z+15	; 0x0f
   12b00:	40 89       	ldd	r20, Z+16	; 0x10
   12b02:	51 89       	ldd	r21, Z+17	; 0x11
   12b04:	68 e0       	ldi	r22, 0x08	; 8
   12b06:	8f e0       	ldi	r24, 0x0F	; 15
   12b08:	b7 dd       	rcall	.-1170   	; 0x12678 <print_tok_val>
   12b0a:	a1 14       	cp	r10, r1
   12b0c:	b1 04       	cpc	r11, r1
   12b0e:	09 f4       	brne	.+2      	; 0x12b12 <display_Config+0x1bc>
   12b10:	5a c0       	rjmp	.+180    	; 0x12bc6 <display_Config+0x270>
   12b12:	e9 89       	ldd	r30, Y+17	; 0x11
   12b14:	fa 89       	ldd	r31, Y+18	; 0x12
   12b16:	22 89       	ldd	r18, Z+18	; 0x12
   12b18:	33 89       	ldd	r19, Z+19	; 0x13
   12b1a:	40 e0       	ldi	r20, 0x00	; 0
   12b1c:	50 e0       	ldi	r21, 0x00	; 0
   12b1e:	68 e0       	ldi	r22, 0x08	; 8
   12b20:	87 e0       	ldi	r24, 0x07	; 7
   12b22:	aa dd       	rcall	.-1196   	; 0x12678 <print_tok_val>
   12b24:	e9 89       	ldd	r30, Y+17	; 0x11
   12b26:	fa 89       	ldd	r31, Y+18	; 0x12
   12b28:	24 89       	ldd	r18, Z+20	; 0x14
   12b2a:	30 e0       	ldi	r19, 0x00	; 0
   12b2c:	40 e0       	ldi	r20, 0x00	; 0
   12b2e:	50 e0       	ldi	r21, 0x00	; 0
   12b30:	68 e0       	ldi	r22, 0x08	; 8
   12b32:	85 e0       	ldi	r24, 0x05	; 5
   12b34:	a1 dd       	rcall	.-1214   	; 0x12678 <print_tok_val>
   12b36:	e9 89       	ldd	r30, Y+17	; 0x11
   12b38:	fa 89       	ldd	r31, Y+18	; 0x12
   12b3a:	25 89       	ldd	r18, Z+21	; 0x15
   12b3c:	30 e0       	ldi	r19, 0x00	; 0
   12b3e:	40 e0       	ldi	r20, 0x00	; 0
   12b40:	50 e0       	ldi	r21, 0x00	; 0
   12b42:	68 e0       	ldi	r22, 0x08	; 8
   12b44:	86 e0       	ldi	r24, 0x06	; 6
   12b46:	98 dd       	rcall	.-1232   	; 0x12678 <print_tok_val>
   12b48:	e9 89       	ldd	r30, Y+17	; 0x11
   12b4a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b4c:	26 89       	ldd	r18, Z+22	; 0x16
   12b4e:	37 89       	ldd	r19, Z+23	; 0x17
   12b50:	40 e0       	ldi	r20, 0x00	; 0
   12b52:	50 e0       	ldi	r21, 0x00	; 0
   12b54:	68 e0       	ldi	r22, 0x08	; 8
   12b56:	84 e0       	ldi	r24, 0x04	; 4
   12b58:	8f dd       	rcall	.-1250   	; 0x12678 <print_tok_val>
   12b5a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b5c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b5e:	20 8d       	ldd	r18, Z+24	; 0x18
   12b60:	31 8d       	ldd	r19, Z+25	; 0x19
   12b62:	40 e0       	ldi	r20, 0x00	; 0
   12b64:	50 e0       	ldi	r21, 0x00	; 0
   12b66:	68 e0       	ldi	r22, 0x08	; 8
   12b68:	8a e0       	ldi	r24, 0x0A	; 10
   12b6a:	86 dd       	rcall	.-1268   	; 0x12678 <print_tok_val>
   12b6c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b6e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b70:	22 8d       	ldd	r18, Z+26	; 0x1a
   12b72:	33 8d       	ldd	r19, Z+27	; 0x1b
   12b74:	40 e0       	ldi	r20, 0x00	; 0
   12b76:	50 e0       	ldi	r21, 0x00	; 0
   12b78:	68 e0       	ldi	r22, 0x08	; 8
   12b7a:	8e e1       	ldi	r24, 0x1E	; 30
   12b7c:	7d dd       	rcall	.-1286   	; 0x12678 <print_tok_val>
   12b7e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b80:	fa 89       	ldd	r31, Y+18	; 0x12
   12b82:	24 8d       	ldd	r18, Z+28	; 0x1c
   12b84:	35 8d       	ldd	r19, Z+29	; 0x1d
   12b86:	40 e0       	ldi	r20, 0x00	; 0
   12b88:	50 e0       	ldi	r21, 0x00	; 0
   12b8a:	68 e0       	ldi	r22, 0x08	; 8
   12b8c:	80 e0       	ldi	r24, 0x00	; 0
   12b8e:	74 dd       	rcall	.-1304   	; 0x12678 <print_tok_val>
   12b90:	e9 89       	ldd	r30, Y+17	; 0x11
   12b92:	fa 89       	ldd	r31, Y+18	; 0x12
   12b94:	26 8d       	ldd	r18, Z+30	; 0x1e
   12b96:	30 e0       	ldi	r19, 0x00	; 0
   12b98:	40 e0       	ldi	r20, 0x00	; 0
   12b9a:	50 e0       	ldi	r21, 0x00	; 0
   12b9c:	68 e0       	ldi	r22, 0x08	; 8
   12b9e:	8c e1       	ldi	r24, 0x1C	; 28
   12ba0:	6b dd       	rcall	.-1322   	; 0x12678 <print_tok_val>
   12ba2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ba4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ba6:	27 8d       	ldd	r18, Z+31	; 0x1f
   12ba8:	30 e0       	ldi	r19, 0x00	; 0
   12baa:	40 e0       	ldi	r20, 0x00	; 0
   12bac:	50 e0       	ldi	r21, 0x00	; 0
   12bae:	68 e0       	ldi	r22, 0x08	; 8
   12bb0:	83 e1       	ldi	r24, 0x13	; 19
   12bb2:	62 dd       	rcall	.-1340   	; 0x12678 <print_tok_val>
   12bb4:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb6:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb8:	20 a1       	ldd	r18, Z+32	; 0x20
   12bba:	30 e0       	ldi	r19, 0x00	; 0
   12bbc:	40 e0       	ldi	r20, 0x00	; 0
   12bbe:	50 e0       	ldi	r21, 0x00	; 0
   12bc0:	68 e0       	ldi	r22, 0x08	; 8
   12bc2:	81 e2       	ldi	r24, 0x21	; 33
   12bc4:	59 dd       	rcall	.-1358   	; 0x12678 <print_tok_val>
   12bc6:	64 e0       	ldi	r22, 0x04	; 4
   12bc8:	81 e1       	ldi	r24, 0x11	; 17
   12bca:	cb dd       	rcall	.-1130   	; 0x12762 <print_tok>
   12bcc:	a1 14       	cp	r10, r1
   12bce:	b1 04       	cpc	r11, r1
   12bd0:	99 f1       	breq	.+102    	; 0x12c38 <display_Config+0x2e2>
   12bd2:	64 e0       	ldi	r22, 0x04	; 4
   12bd4:	8a e2       	ldi	r24, 0x2A	; 42
   12bd6:	c5 dd       	rcall	.-1142   	; 0x12762 <print_tok>
   12bd8:	e9 89       	ldd	r30, Y+17	; 0x11
   12bda:	fa 89       	ldd	r31, Y+18	; 0x12
   12bdc:	21 a1       	ldd	r18, Z+33	; 0x21
   12bde:	32 a1       	ldd	r19, Z+34	; 0x22
   12be0:	43 a1       	ldd	r20, Z+35	; 0x23
   12be2:	54 a1       	ldd	r21, Z+36	; 0x24
   12be4:	68 e0       	ldi	r22, 0x08	; 8
   12be6:	8a e1       	ldi	r24, 0x1A	; 26
   12be8:	47 dd       	rcall	.-1394   	; 0x12678 <print_tok_val>
   12bea:	e9 89       	ldd	r30, Y+17	; 0x11
   12bec:	fa 89       	ldd	r31, Y+18	; 0x12
   12bee:	25 a1       	ldd	r18, Z+37	; 0x25
   12bf0:	30 e0       	ldi	r19, 0x00	; 0
   12bf2:	40 e0       	ldi	r20, 0x00	; 0
   12bf4:	50 e0       	ldi	r21, 0x00	; 0
   12bf6:	68 e0       	ldi	r22, 0x08	; 8
   12bf8:	8b e1       	ldi	r24, 0x1B	; 27
   12bfa:	3e dd       	rcall	.-1412   	; 0x12678 <print_tok_val>
   12bfc:	e9 89       	ldd	r30, Y+17	; 0x11
   12bfe:	fa 89       	ldd	r31, Y+18	; 0x12
   12c00:	26 a1       	ldd	r18, Z+38	; 0x26
   12c02:	37 a1       	ldd	r19, Z+39	; 0x27
   12c04:	40 e0       	ldi	r20, 0x00	; 0
   12c06:	50 e0       	ldi	r21, 0x00	; 0
   12c08:	68 e0       	ldi	r22, 0x08	; 8
   12c0a:	8d e1       	ldi	r24, 0x1D	; 29
   12c0c:	35 dd       	rcall	.-1430   	; 0x12678 <print_tok_val>
   12c0e:	e9 89       	ldd	r30, Y+17	; 0x11
   12c10:	fa 89       	ldd	r31, Y+18	; 0x12
   12c12:	20 a5       	ldd	r18, Z+40	; 0x28
   12c14:	31 a5       	ldd	r19, Z+41	; 0x29
   12c16:	42 a5       	ldd	r20, Z+42	; 0x2a
   12c18:	53 a5       	ldd	r21, Z+43	; 0x2b
   12c1a:	68 e0       	ldi	r22, 0x08	; 8
   12c1c:	89 e1       	ldi	r24, 0x19	; 25
   12c1e:	2c dd       	rcall	.-1448   	; 0x12678 <print_tok_val>
   12c20:	e9 89       	ldd	r30, Y+17	; 0x11
   12c22:	fa 89       	ldd	r31, Y+18	; 0x12
   12c24:	24 a5       	ldd	r18, Z+44	; 0x2c
   12c26:	30 e0       	ldi	r19, 0x00	; 0
   12c28:	40 e0       	ldi	r20, 0x00	; 0
   12c2a:	50 e0       	ldi	r21, 0x00	; 0
   12c2c:	68 e0       	ldi	r22, 0x08	; 8
   12c2e:	88 e1       	ldi	r24, 0x18	; 24
   12c30:	23 dd       	rcall	.-1466   	; 0x12678 <print_tok_val>
   12c32:	64 e0       	ldi	r22, 0x04	; 4
   12c34:	81 e1       	ldi	r24, 0x11	; 17
   12c36:	95 dd       	rcall	.-1238   	; 0x12762 <print_tok>
   12c38:	e9 89       	ldd	r30, Y+17	; 0x11
   12c3a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c3c:	80 a5       	ldd	r24, Z+40	; 0x28
   12c3e:	91 a5       	ldd	r25, Z+41	; 0x29
   12c40:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12c42:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12c44:	01 96       	adiw	r24, 0x01	; 1
   12c46:	a1 1d       	adc	r26, r1
   12c48:	b1 1d       	adc	r27, r1
   12c4a:	ed b7       	in	r30, 0x3d	; 61
   12c4c:	fe b7       	in	r31, 0x3e	; 62
   12c4e:	84 83       	std	Z+4, r24	; 0x04
   12c50:	95 83       	std	Z+5, r25	; 0x05
   12c52:	a6 83       	std	Z+6, r26	; 0x06
   12c54:	b7 83       	std	Z+7, r27	; 0x07
   12c56:	29 e3       	ldi	r18, 0x39	; 57
   12c58:	3d e1       	ldi	r19, 0x1D	; 29
   12c5a:	c9 01       	movw	r24, r18
   12c5c:	a0 e0       	ldi	r26, 0x00	; 0
   12c5e:	81 83       	std	Z+1, r24	; 0x01
   12c60:	92 83       	std	Z+2, r25	; 0x02
   12c62:	a3 83       	std	Z+3, r26	; 0x03
   12c64:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12c68:	60 e0       	ldi	r22, 0x00	; 0
   12c6a:	81 e1       	ldi	r24, 0x11	; 17
   12c6c:	7a dd       	rcall	.-1292   	; 0x12762 <print_tok>
   12c6e:	f8 01       	movw	r30, r16
   12c70:	80 81       	ld	r24, Z
   12c72:	81 30       	cpi	r24, 0x01	; 1
   12c74:	09 f0       	breq	.+2      	; 0x12c78 <display_Config+0x322>
   12c76:	a8 c0       	rjmp	.+336    	; 0x12dc8 <display_Config+0x472>
   12c78:	27 81       	ldd	r18, Z+7	; 0x07
   12c7a:	30 85       	ldd	r19, Z+8	; 0x08
   12c7c:	3a 8b       	std	Y+18, r19	; 0x12
   12c7e:	29 8b       	std	Y+17, r18	; 0x11
   12c80:	f9 01       	movw	r30, r18
   12c82:	84 81       	ldd	r24, Z+4	; 0x04
   12c84:	95 81       	ldd	r25, Z+5	; 0x05
   12c86:	ed b7       	in	r30, 0x3d	; 61
   12c88:	fe b7       	in	r31, 0x3e	; 62
   12c8a:	95 83       	std	Z+5, r25	; 0x05
   12c8c:	84 83       	std	Z+4, r24	; 0x04
   12c8e:	c1 82       	std	Z+1, r12	; 0x01
   12c90:	d2 82       	std	Z+2, r13	; 0x02
   12c92:	e3 82       	std	Z+3, r14	; 0x03
   12c94:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12c98:	e9 89       	ldd	r30, Y+17	; 0x11
   12c9a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c9c:	80 81       	ld	r24, Z
   12c9e:	90 e0       	ldi	r25, 0x00	; 0
   12ca0:	ed b7       	in	r30, 0x3d	; 61
   12ca2:	fe b7       	in	r31, 0x3e	; 62
   12ca4:	95 83       	std	Z+5, r25	; 0x05
   12ca6:	84 83       	std	Z+4, r24	; 0x04
   12ca8:	61 82       	std	Z+1, r6	; 0x01
   12caa:	72 82       	std	Z+2, r7	; 0x02
   12cac:	83 82       	std	Z+3, r8	; 0x03
   12cae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12cb2:	64 e0       	ldi	r22, 0x04	; 4
   12cb4:	85 e1       	ldi	r24, 0x15	; 21
   12cb6:	55 dd       	rcall	.-1366   	; 0x12762 <print_tok>
   12cb8:	e9 89       	ldd	r30, Y+17	; 0x11
   12cba:	fa 89       	ldd	r31, Y+18	; 0x12
   12cbc:	20 81       	ld	r18, Z
   12cbe:	30 e0       	ldi	r19, 0x00	; 0
   12cc0:	40 e0       	ldi	r20, 0x00	; 0
   12cc2:	50 e0       	ldi	r21, 0x00	; 0
   12cc4:	68 e0       	ldi	r22, 0x08	; 8
   12cc6:	81 e0       	ldi	r24, 0x01	; 1
   12cc8:	d7 dc       	rcall	.-1618   	; 0x12678 <print_tok_val>
   12cca:	e9 89       	ldd	r30, Y+17	; 0x11
   12ccc:	fa 89       	ldd	r31, Y+18	; 0x12
   12cce:	21 81       	ldd	r18, Z+1	; 0x01
   12cd0:	30 e0       	ldi	r19, 0x00	; 0
   12cd2:	40 e0       	ldi	r20, 0x00	; 0
   12cd4:	50 e0       	ldi	r21, 0x00	; 0
   12cd6:	68 e0       	ldi	r22, 0x08	; 8
   12cd8:	8f e1       	ldi	r24, 0x1F	; 31
   12cda:	ce dc       	rcall	.-1636   	; 0x12678 <print_tok_val>
   12cdc:	e9 89       	ldd	r30, Y+17	; 0x11
   12cde:	fa 89       	ldd	r31, Y+18	; 0x12
   12ce0:	42 81       	ldd	r20, Z+2	; 0x02
   12ce2:	53 81       	ldd	r21, Z+3	; 0x03
   12ce4:	68 e0       	ldi	r22, 0x08	; 8
   12ce6:	82 e1       	ldi	r24, 0x12	; 18
   12ce8:	07 dd       	rcall	.-1522   	; 0x126f8 <print_tok_str>
   12cea:	64 e0       	ldi	r22, 0x04	; 4
   12cec:	81 e1       	ldi	r24, 0x11	; 17
   12cee:	39 dd       	rcall	.-1422   	; 0x12762 <print_tok>
   12cf0:	64 e0       	ldi	r22, 0x04	; 4
   12cf2:	89 e0       	ldi	r24, 0x09	; 9
   12cf4:	36 dd       	rcall	.-1428   	; 0x12762 <print_tok>
   12cf6:	e9 89       	ldd	r30, Y+17	; 0x11
   12cf8:	fa 89       	ldd	r31, Y+18	; 0x12
   12cfa:	26 81       	ldd	r18, Z+6	; 0x06
   12cfc:	37 81       	ldd	r19, Z+7	; 0x07
   12cfe:	40 e0       	ldi	r20, 0x00	; 0
   12d00:	50 e0       	ldi	r21, 0x00	; 0
   12d02:	68 e0       	ldi	r22, 0x08	; 8
   12d04:	87 e1       	ldi	r24, 0x17	; 23
   12d06:	b8 dc       	rcall	.-1680   	; 0x12678 <print_tok_val>
   12d08:	64 e0       	ldi	r22, 0x04	; 4
   12d0a:	81 e1       	ldi	r24, 0x11	; 17
   12d0c:	2a dd       	rcall	.-1452   	; 0x12762 <print_tok>
   12d0e:	a1 14       	cp	r10, r1
   12d10:	b1 04       	cpc	r11, r1
   12d12:	91 f1       	breq	.+100    	; 0x12d78 <display_Config+0x422>
   12d14:	64 e0       	ldi	r22, 0x04	; 4
   12d16:	84 e1       	ldi	r24, 0x14	; 20
   12d18:	24 dd       	rcall	.-1464   	; 0x12762 <print_tok>
   12d1a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d1c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d1e:	20 85       	ldd	r18, Z+8	; 0x08
   12d20:	31 85       	ldd	r19, Z+9	; 0x09
   12d22:	03 2e       	mov	r0, r19
   12d24:	00 0c       	add	r0, r0
   12d26:	44 0b       	sbc	r20, r20
   12d28:	55 0b       	sbc	r21, r21
   12d2a:	68 e0       	ldi	r22, 0x08	; 8
   12d2c:	88 e0       	ldi	r24, 0x08	; 8
   12d2e:	a4 dc       	rcall	.-1720   	; 0x12678 <print_tok_val>
   12d30:	e9 89       	ldd	r30, Y+17	; 0x11
   12d32:	fa 89       	ldd	r31, Y+18	; 0x12
   12d34:	22 85       	ldd	r18, Z+10	; 0x0a
   12d36:	33 85       	ldd	r19, Z+11	; 0x0b
   12d38:	03 2e       	mov	r0, r19
   12d3a:	00 0c       	add	r0, r0
   12d3c:	44 0b       	sbc	r20, r20
   12d3e:	55 0b       	sbc	r21, r21
   12d40:	68 e0       	ldi	r22, 0x08	; 8
   12d42:	82 e2       	ldi	r24, 0x22	; 34
   12d44:	99 dc       	rcall	.-1742   	; 0x12678 <print_tok_val>
   12d46:	e9 89       	ldd	r30, Y+17	; 0x11
   12d48:	fa 89       	ldd	r31, Y+18	; 0x12
   12d4a:	24 85       	ldd	r18, Z+12	; 0x0c
   12d4c:	35 85       	ldd	r19, Z+13	; 0x0d
   12d4e:	03 2e       	mov	r0, r19
   12d50:	00 0c       	add	r0, r0
   12d52:	44 0b       	sbc	r20, r20
   12d54:	55 0b       	sbc	r21, r21
   12d56:	68 e0       	ldi	r22, 0x08	; 8
   12d58:	86 e1       	ldi	r24, 0x16	; 22
   12d5a:	8e dc       	rcall	.-1764   	; 0x12678 <print_tok_val>
   12d5c:	e9 89       	ldd	r30, Y+17	; 0x11
   12d5e:	fa 89       	ldd	r31, Y+18	; 0x12
   12d60:	26 85       	ldd	r18, Z+14	; 0x0e
   12d62:	37 85       	ldd	r19, Z+15	; 0x0f
   12d64:	03 2e       	mov	r0, r19
   12d66:	00 0c       	add	r0, r0
   12d68:	44 0b       	sbc	r20, r20
   12d6a:	55 0b       	sbc	r21, r21
   12d6c:	68 e0       	ldi	r22, 0x08	; 8
   12d6e:	8d e0       	ldi	r24, 0x0D	; 13
   12d70:	83 dc       	rcall	.-1786   	; 0x12678 <print_tok_val>
   12d72:	64 e0       	ldi	r22, 0x04	; 4
   12d74:	81 e1       	ldi	r24, 0x11	; 17
   12d76:	f5 dc       	rcall	.-1558   	; 0x12762 <print_tok>
   12d78:	e9 89       	ldd	r30, Y+17	; 0x11
   12d7a:	fa 89       	ldd	r31, Y+18	; 0x12
   12d7c:	46 85       	ldd	r20, Z+14	; 0x0e
   12d7e:	57 85       	ldd	r21, Z+15	; 0x0f
   12d80:	22 85       	ldd	r18, Z+10	; 0x0a
   12d82:	33 85       	ldd	r19, Z+11	; 0x0b
   12d84:	42 9f       	mul	r20, r18
   12d86:	c0 01       	movw	r24, r0
   12d88:	43 9f       	mul	r20, r19
   12d8a:	90 0d       	add	r25, r0
   12d8c:	52 9f       	mul	r21, r18
   12d8e:	90 0d       	add	r25, r0
   12d90:	11 24       	eor	r1, r1
   12d92:	44 85       	ldd	r20, Z+12	; 0x0c
   12d94:	55 85       	ldd	r21, Z+13	; 0x0d
   12d96:	84 9f       	mul	r24, r20
   12d98:	90 01       	movw	r18, r0
   12d9a:	85 9f       	mul	r24, r21
   12d9c:	30 0d       	add	r19, r0
   12d9e:	94 9f       	mul	r25, r20
   12da0:	30 0d       	add	r19, r0
   12da2:	11 24       	eor	r1, r1
   12da4:	c9 01       	movw	r24, r18
   12da6:	33 0f       	add	r19, r19
   12da8:	aa 0b       	sbc	r26, r26
   12daa:	bb 0b       	sbc	r27, r27
   12dac:	ed b7       	in	r30, 0x3d	; 61
   12dae:	fe b7       	in	r31, 0x3e	; 62
   12db0:	84 83       	std	Z+4, r24	; 0x04
   12db2:	95 83       	std	Z+5, r25	; 0x05
   12db4:	a6 83       	std	Z+6, r26	; 0x06
   12db6:	b7 83       	std	Z+7, r27	; 0x07
   12db8:	21 82       	std	Z+1, r2	; 0x01
   12dba:	32 82       	std	Z+2, r3	; 0x02
   12dbc:	43 82       	std	Z+3, r4	; 0x03
   12dbe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12dc2:	60 e0       	ldi	r22, 0x00	; 0
   12dc4:	81 e1       	ldi	r24, 0x11	; 17
   12dc6:	cd dc       	rcall	.-1638   	; 0x12762 <print_tok>
   12dc8:	f8 01       	movw	r30, r16
   12dca:	80 81       	ld	r24, Z
   12dcc:	84 30       	cpi	r24, 0x04	; 4
   12dce:	c9 f4       	brne	.+50     	; 0x12e02 <display_Config+0x4ac>
   12dd0:	27 81       	ldd	r18, Z+7	; 0x07
   12dd2:	30 85       	ldd	r19, Z+8	; 0x08
   12dd4:	3a 8b       	std	Y+18, r19	; 0x12
   12dd6:	29 8b       	std	Y+17, r18	; 0x11
   12dd8:	60 e0       	ldi	r22, 0x00	; 0
   12dda:	80 e2       	ldi	r24, 0x20	; 32
   12ddc:	c2 dc       	rcall	.-1660   	; 0x12762 <print_tok>
   12dde:	64 e0       	ldi	r22, 0x04	; 4
   12de0:	89 e0       	ldi	r24, 0x09	; 9
   12de2:	bf dc       	rcall	.-1666   	; 0x12762 <print_tok>
   12de4:	e9 89       	ldd	r30, Y+17	; 0x11
   12de6:	fa 89       	ldd	r31, Y+18	; 0x12
   12de8:	20 81       	ld	r18, Z
   12dea:	30 e0       	ldi	r19, 0x00	; 0
   12dec:	40 e0       	ldi	r20, 0x00	; 0
   12dee:	50 e0       	ldi	r21, 0x00	; 0
   12df0:	68 e0       	ldi	r22, 0x08	; 8
   12df2:	81 e0       	ldi	r24, 0x01	; 1
   12df4:	41 dc       	rcall	.-1918   	; 0x12678 <print_tok_val>
   12df6:	64 e0       	ldi	r22, 0x04	; 4
   12df8:	81 e1       	ldi	r24, 0x11	; 17
   12dfa:	b3 dc       	rcall	.-1690   	; 0x12762 <print_tok>
   12dfc:	60 e0       	ldi	r22, 0x00	; 0
   12dfe:	81 e1       	ldi	r24, 0x11	; 17
   12e00:	b0 dc       	rcall	.-1696   	; 0x12762 <print_tok>
   12e02:	28 85       	ldd	r18, Y+8	; 0x08
   12e04:	39 85       	ldd	r19, Y+9	; 0x09
   12e06:	4a 85       	ldd	r20, Y+10	; 0x0a
   12e08:	ed b7       	in	r30, 0x3d	; 61
   12e0a:	fe b7       	in	r31, 0x3e	; 62
   12e0c:	21 83       	std	Z+1, r18	; 0x01
   12e0e:	32 83       	std	Z+2, r19	; 0x02
   12e10:	43 83       	std	Z+3, r20	; 0x03
   12e12:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12e16:	05 5f       	subi	r16, 0xF5	; 245
   12e18:	1f 4f       	sbci	r17, 0xFF	; 255
   12e1a:	28 e7       	ldi	r18, 0x78	; 120
   12e1c:	3f e1       	ldi	r19, 0x1F	; 31
   12e1e:	20 17       	cp	r18, r16
   12e20:	31 07       	cpc	r19, r17
   12e22:	09 f0       	breq	.+2      	; 0x12e26 <display_Config+0x4d0>
   12e24:	dd cd       	rjmp	.-1094   	; 0x129e0 <display_Config+0x8a>
   12e26:	88 ef       	ldi	r24, 0xF8	; 248
   12e28:	9c e1       	ldi	r25, 0x1C	; 28
   12e2a:	a0 e0       	ldi	r26, 0x00	; 0
   12e2c:	ed b7       	in	r30, 0x3d	; 61
   12e2e:	fe b7       	in	r31, 0x3e	; 62
   12e30:	81 83       	std	Z+1, r24	; 0x01
   12e32:	92 83       	std	Z+2, r25	; 0x02
   12e34:	a3 83       	std	Z+3, r26	; 0x03
   12e36:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12e3a:	62 96       	adiw	r28, 0x12	; 18
   12e3c:	0f b6       	in	r0, 0x3f	; 63
   12e3e:	f8 94       	cli
   12e40:	de bf       	out	0x3e, r29	; 62
   12e42:	0f be       	out	0x3f, r0	; 63
   12e44:	cd bf       	out	0x3d, r28	; 61
   12e46:	df 91       	pop	r29
   12e48:	cf 91       	pop	r28
   12e4a:	1f 91       	pop	r17
   12e4c:	0f 91       	pop	r16
   12e4e:	ef 90       	pop	r14
   12e50:	df 90       	pop	r13
   12e52:	cf 90       	pop	r12
   12e54:	bf 90       	pop	r11
   12e56:	af 90       	pop	r10
   12e58:	8f 90       	pop	r8
   12e5a:	7f 90       	pop	r7
   12e5c:	6f 90       	pop	r6
   12e5e:	4f 90       	pop	r4
   12e60:	3f 90       	pop	r3
   12e62:	2f 90       	pop	r2
   12e64:	08 95       	ret

00012e66 <find_type>:
   12e66:	e4 ef       	ldi	r30, 0xF4	; 244
   12e68:	fe e1       	ldi	r31, 0x1E	; 30
   12e6a:	20 e0       	ldi	r18, 0x00	; 0
   12e6c:	30 e0       	ldi	r19, 0x00	; 0
   12e6e:	40 81       	ld	r20, Z
   12e70:	50 e0       	ldi	r21, 0x00	; 0
   12e72:	48 17       	cp	r20, r24
   12e74:	59 07       	cpc	r21, r25
   12e76:	11 f4       	brne	.+4      	; 0x12e7c <find_type+0x16>
   12e78:	82 2f       	mov	r24, r18
   12e7a:	08 95       	ret
   12e7c:	2f 5f       	subi	r18, 0xFF	; 255
   12e7e:	3f 4f       	sbci	r19, 0xFF	; 255
   12e80:	3b 96       	adiw	r30, 0x0b	; 11
   12e82:	2c 30       	cpi	r18, 0x0C	; 12
   12e84:	31 05       	cpc	r19, r1
   12e86:	99 f7       	brne	.-26     	; 0x12e6e <find_type+0x8>
   12e88:	8f ef       	ldi	r24, 0xFF	; 255
   12e8a:	08 95       	ret

00012e8c <count_drive_types>:
   12e8c:	e4 ef       	ldi	r30, 0xF4	; 244
   12e8e:	fe e1       	ldi	r31, 0x1E	; 30
   12e90:	20 e0       	ldi	r18, 0x00	; 0
   12e92:	30 e0       	ldi	r19, 0x00	; 0
   12e94:	90 81       	ld	r25, Z
   12e96:	98 13       	cpse	r25, r24
   12e98:	02 c0       	rjmp	.+4      	; 0x12e9e <count_drive_types+0x12>
   12e9a:	2f 5f       	subi	r18, 0xFF	; 255
   12e9c:	3f 4f       	sbci	r19, 0xFF	; 255
   12e9e:	3b 96       	adiw	r30, 0x0b	; 11
   12ea0:	9f e1       	ldi	r25, 0x1F	; 31
   12ea2:	e8 37       	cpi	r30, 0x78	; 120
   12ea4:	f9 07       	cpc	r31, r25
   12ea6:	b1 f7       	brne	.-20     	; 0x12e94 <count_drive_types+0x8>
   12ea8:	82 2f       	mov	r24, r18
   12eaa:	08 95       	ret

00012eac <type_to_str>:
   12eac:	00 97       	sbiw	r24, 0x00	; 0
   12eae:	59 f0       	breq	.+22     	; 0x12ec6 <type_to_str+0x1a>
   12eb0:	81 30       	cpi	r24, 0x01	; 1
   12eb2:	91 05       	cpc	r25, r1
   12eb4:	59 f0       	breq	.+22     	; 0x12ecc <type_to_str+0x20>
   12eb6:	83 30       	cpi	r24, 0x03	; 3
   12eb8:	91 05       	cpc	r25, r1
   12eba:	59 f0       	breq	.+22     	; 0x12ed2 <type_to_str+0x26>
   12ebc:	04 97       	sbiw	r24, 0x04	; 4
   12ebe:	61 f0       	breq	.+24     	; 0x12ed8 <type_to_str+0x2c>
   12ec0:	89 e2       	ldi	r24, 0x29	; 41
   12ec2:	9e e0       	ldi	r25, 0x0E	; 14
   12ec4:	08 95       	ret
   12ec6:	8f ef       	ldi	r24, 0xFF	; 255
   12ec8:	9d e0       	ldi	r25, 0x0D	; 13
   12eca:	08 95       	ret
   12ecc:	87 e0       	ldi	r24, 0x07	; 7
   12ece:	9e e0       	ldi	r25, 0x0E	; 14
   12ed0:	08 95       	ret
   12ed2:	8f e1       	ldi	r24, 0x1F	; 31
   12ed4:	9e e0       	ldi	r25, 0x0E	; 14
   12ed6:	08 95       	ret
   12ed8:	82 e1       	ldi	r24, 0x12	; 18
   12eda:	9e e0       	ldi	r25, 0x0E	; 14
   12edc:	08 95       	ret

00012ede <find_free>:
   12ede:	80 e0       	ldi	r24, 0x00	; 0
   12ee0:	90 e0       	ldi	r25, 0x00	; 0
   12ee2:	c1 cf       	rjmp	.-126    	; 0x12e66 <find_type>
   12ee4:	08 95       	ret

00012ee6 <find_device>:
   12ee6:	9b 01       	movw	r18, r22
   12ee8:	20 52       	subi	r18, 0x20	; 32
   12eea:	31 09       	sbc	r19, r1
   12eec:	2f 35       	cpi	r18, 0x5F	; 95
   12eee:	31 05       	cpc	r19, r1
   12ef0:	08 f5       	brcc	.+66     	; 0x12f34 <find_device+0x4e>
   12ef2:	64 17       	cp	r22, r20
   12ef4:	75 07       	cpc	r23, r21
   12ef6:	f4 f0       	brlt	.+60     	; 0x12f34 <find_device+0x4e>
   12ef8:	9a 01       	movw	r18, r20
   12efa:	22 5e       	subi	r18, 0xE2	; 226
   12efc:	3f 4f       	sbci	r19, 0xFF	; 255
   12efe:	26 17       	cp	r18, r22
   12f00:	37 07       	cpc	r19, r23
   12f02:	c4 f0       	brlt	.+48     	; 0x12f34 <find_device+0x4e>
   12f04:	64 1b       	sub	r22, r20
   12f06:	75 0b       	sbc	r23, r21
   12f08:	e4 ef       	ldi	r30, 0xF4	; 244
   12f0a:	fe e1       	ldi	r31, 0x1E	; 30
   12f0c:	20 e0       	ldi	r18, 0x00	; 0
   12f0e:	30 e0       	ldi	r19, 0x00	; 0
   12f10:	40 81       	ld	r20, Z
   12f12:	50 e0       	ldi	r21, 0x00	; 0
   12f14:	48 17       	cp	r20, r24
   12f16:	59 07       	cpc	r21, r25
   12f18:	39 f4       	brne	.+14     	; 0x12f28 <find_device+0x42>
   12f1a:	41 81       	ldd	r20, Z+1	; 0x01
   12f1c:	50 e0       	ldi	r21, 0x00	; 0
   12f1e:	64 17       	cp	r22, r20
   12f20:	75 07       	cpc	r23, r21
   12f22:	11 f4       	brne	.+4      	; 0x12f28 <find_device+0x42>
   12f24:	82 2f       	mov	r24, r18
   12f26:	08 95       	ret
   12f28:	2f 5f       	subi	r18, 0xFF	; 255
   12f2a:	3f 4f       	sbci	r19, 0xFF	; 255
   12f2c:	3b 96       	adiw	r30, 0x0b	; 11
   12f2e:	2c 30       	cpi	r18, 0x0C	; 12
   12f30:	31 05       	cpc	r19, r1
   12f32:	71 f7       	brne	.-36     	; 0x12f10 <find_device+0x2a>
   12f34:	8f ef       	ldi	r24, 0xFF	; 255
   12f36:	08 95       	ret

00012f38 <set_active_device>:
   12f38:	a9 e0       	ldi	r26, 0x09	; 9
   12f3a:	b0 e0       	ldi	r27, 0x00	; 0
   12f3c:	e2 ea       	ldi	r30, 0xA2	; 162
   12f3e:	f7 e9       	ldi	r31, 0x97	; 151
   12f40:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
   12f44:	8f 3f       	cpi	r24, 0xFF	; 255
   12f46:	09 f4       	brne	.+2      	; 0x12f4a <set_active_device+0x12>
   12f48:	b5 c0       	rjmp	.+362    	; 0x130b4 <set_active_device+0x17c>
   12f4a:	e8 2f       	mov	r30, r24
   12f4c:	8c 30       	cpi	r24, 0x0C	; 12
   12f4e:	a0 f0       	brcs	.+40     	; 0x12f78 <set_active_device+0x40>
   12f50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f54:	80 ff       	sbrs	r24, 0
   12f56:	ae c0       	rjmp	.+348    	; 0x130b4 <set_active_device+0x17c>
   12f58:	0e 2e       	mov	r0, r30
   12f5a:	00 0c       	add	r0, r0
   12f5c:	ff 0b       	sbc	r31, r31
   12f5e:	cd b7       	in	r28, 0x3d	; 61
   12f60:	de b7       	in	r29, 0x3e	; 62
   12f62:	fd 83       	std	Y+5, r31	; 0x05
   12f64:	ec 83       	std	Y+4, r30	; 0x04
   12f66:	83 ed       	ldi	r24, 0xD3	; 211
   12f68:	9c e1       	ldi	r25, 0x1C	; 28
   12f6a:	a0 e0       	ldi	r26, 0x00	; 0
   12f6c:	89 83       	std	Y+1, r24	; 0x01
   12f6e:	9a 83       	std	Y+2, r25	; 0x02
   12f70:	ab 83       	std	Y+3, r26	; 0x03
   12f72:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12f76:	9e c0       	rjmp	.+316    	; 0x130b4 <set_active_device+0x17c>
   12f78:	08 2f       	mov	r16, r24
   12f7a:	88 0f       	add	r24, r24
   12f7c:	11 0b       	sbc	r17, r17
   12f7e:	8b e0       	ldi	r24, 0x0B	; 11
   12f80:	e8 02       	muls	r30, r24
   12f82:	f0 01       	movw	r30, r0
   12f84:	11 24       	eor	r1, r1
   12f86:	ec 50       	subi	r30, 0x0C	; 12
   12f88:	f1 4e       	sbci	r31, 0xE1	; 225
   12f8a:	81 81       	ldd	r24, Z+1	; 0x01
   12f8c:	8f 31       	cpi	r24, 0x1F	; 31
   12f8e:	a0 f0       	brcs	.+40     	; 0x12fb8 <set_active_device+0x80>
   12f90:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12f94:	90 ff       	sbrs	r25, 0
   12f96:	8e c0       	rjmp	.+284    	; 0x130b4 <set_active_device+0x17c>
   12f98:	90 e0       	ldi	r25, 0x00	; 0
   12f9a:	cd b7       	in	r28, 0x3d	; 61
   12f9c:	de b7       	in	r29, 0x3e	; 62
   12f9e:	9f 83       	std	Y+7, r25	; 0x07
   12fa0:	8e 83       	std	Y+6, r24	; 0x06
   12fa2:	1d 83       	std	Y+5, r17	; 0x05
   12fa4:	0c 83       	std	Y+4, r16	; 0x04
   12fa6:	8a e9       	ldi	r24, 0x9A	; 154
   12fa8:	9c e1       	ldi	r25, 0x1C	; 28
   12faa:	a0 e0       	ldi	r26, 0x00	; 0
   12fac:	89 83       	std	Y+1, r24	; 0x01
   12fae:	9a 83       	std	Y+2, r25	; 0x02
   12fb0:	ab 83       	std	Y+3, r26	; 0x03
   12fb2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   12fb6:	7e c0       	rjmp	.+252    	; 0x130b4 <set_active_device+0x17c>
   12fb8:	20 81       	ld	r18, Z
   12fba:	c2 2f       	mov	r28, r18
   12fbc:	d0 e0       	ldi	r29, 0x00	; 0
   12fbe:	87 81       	ldd	r24, Z+7	; 0x07
   12fc0:	90 85       	ldd	r25, Z+8	; 0x08
   12fc2:	00 97       	sbiw	r24, 0x00	; 0
   12fc4:	89 f4       	brne	.+34     	; 0x12fe8 <set_active_device+0xb0>
   12fc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12fca:	80 ff       	sbrs	r24, 0
   12fcc:	73 c0       	rjmp	.+230    	; 0x130b4 <set_active_device+0x17c>
   12fce:	ce 01       	movw	r24, r28
   12fd0:	6d df       	rcall	.-294    	; 0x12eac <type_to_str>
   12fd2:	ed b7       	in	r30, 0x3d	; 61
   12fd4:	fe b7       	in	r31, 0x3e	; 62
   12fd6:	91 87       	std	Z+9, r25	; 0x09
   12fd8:	80 87       	std	Z+8, r24	; 0x08
   12fda:	d7 83       	std	Z+7, r29	; 0x07
   12fdc:	c6 83       	std	Z+6, r28	; 0x06
   12fde:	15 83       	std	Z+5, r17	; 0x05
   12fe0:	04 83       	std	Z+4, r16	; 0x04
   12fe2:	85 e6       	ldi	r24, 0x65	; 101
   12fe4:	9c e1       	ldi	r25, 0x1C	; 28
   12fe6:	5e c0       	rjmp	.+188    	; 0x130a4 <set_active_device+0x16c>
   12fe8:	20 97       	sbiw	r28, 0x00	; 0
   12fea:	91 f4       	brne	.+36     	; 0x13010 <set_active_device+0xd8>
   12fec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12ff0:	80 ff       	sbrs	r24, 0
   12ff2:	60 c0       	rjmp	.+192    	; 0x130b4 <set_active_device+0x17c>
   12ff4:	80 e0       	ldi	r24, 0x00	; 0
   12ff6:	90 e0       	ldi	r25, 0x00	; 0
   12ff8:	59 df       	rcall	.-334    	; 0x12eac <type_to_str>
   12ffa:	ed b7       	in	r30, 0x3d	; 61
   12ffc:	fe b7       	in	r31, 0x3e	; 62
   12ffe:	91 87       	std	Z+9, r25	; 0x09
   13000:	80 87       	std	Z+8, r24	; 0x08
   13002:	17 82       	std	Z+7, r1	; 0x07
   13004:	16 82       	std	Z+6, r1	; 0x06
   13006:	15 83       	std	Z+5, r17	; 0x05
   13008:	04 83       	std	Z+4, r16	; 0x04
   1300a:	80 e3       	ldi	r24, 0x30	; 48
   1300c:	9c e1       	ldi	r25, 0x1C	; 28
   1300e:	4a c0       	rjmp	.+148    	; 0x130a4 <set_active_device+0x16c>
   13010:	c4 30       	cpi	r28, 0x04	; 4
   13012:	d1 05       	cpc	r29, r1
   13014:	29 f4       	brne	.+10     	; 0x13020 <set_active_device+0xe8>
   13016:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <PRINTERp+0x1>
   1301a:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <PRINTERp>
   1301e:	30 c0       	rjmp	.+96     	; 0x13080 <set_active_device+0x148>
   13020:	2d 7f       	andi	r18, 0xFD	; 253
   13022:	21 30       	cpi	r18, 0x01	; 1
   13024:	79 f5       	brne	.+94     	; 0x13084 <set_active_device+0x14c>
   13026:	21 85       	ldd	r18, Z+9	; 0x09
   13028:	32 85       	ldd	r19, Z+10	; 0x0a
   1302a:	21 15       	cp	r18, r1
   1302c:	31 05       	cpc	r19, r1
   1302e:	89 f4       	brne	.+34     	; 0x13052 <set_active_device+0x11a>
   13030:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13034:	80 ff       	sbrs	r24, 0
   13036:	3e c0       	rjmp	.+124    	; 0x130b4 <set_active_device+0x17c>
   13038:	ce 01       	movw	r24, r28
   1303a:	38 df       	rcall	.-400    	; 0x12eac <type_to_str>
   1303c:	ed b7       	in	r30, 0x3d	; 61
   1303e:	fe b7       	in	r31, 0x3e	; 62
   13040:	91 87       	std	Z+9, r25	; 0x09
   13042:	80 87       	std	Z+8, r24	; 0x08
   13044:	d7 83       	std	Z+7, r29	; 0x07
   13046:	c6 83       	std	Z+6, r28	; 0x06
   13048:	15 83       	std	Z+5, r17	; 0x05
   1304a:	04 83       	std	Z+4, r16	; 0x04
   1304c:	88 ef       	ldi	r24, 0xF8	; 248
   1304e:	9b e1       	ldi	r25, 0x1B	; 27
   13050:	29 c0       	rjmp	.+82     	; 0x130a4 <set_active_device+0x16c>
   13052:	c1 30       	cpi	r28, 0x01	; 1
   13054:	d1 05       	cpc	r29, r1
   13056:	49 f4       	brne	.+18     	; 0x1306a <set_active_device+0x132>
   13058:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   1305c:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   13060:	30 93 63 19 	sts	0x1963, r19	; 0x801963 <AMIGOs+0x1>
   13064:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <AMIGOs>
   13068:	0b c0       	rjmp	.+22     	; 0x13080 <set_active_device+0x148>
   1306a:	c3 30       	cpi	r28, 0x03	; 3
   1306c:	d1 05       	cpc	r29, r1
   1306e:	51 f4       	brne	.+20     	; 0x13084 <set_active_device+0x14c>
   13070:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   13074:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   13078:	30 93 67 19 	sts	0x1967, r19	; 0x801967 <SS80s+0x1>
   1307c:	20 93 66 19 	sts	0x1966, r18	; 0x801966 <SS80s>
   13080:	81 e0       	ldi	r24, 0x01	; 1
   13082:	19 c0       	rjmp	.+50     	; 0x130b6 <set_active_device+0x17e>
   13084:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13088:	80 ff       	sbrs	r24, 0
   1308a:	14 c0       	rjmp	.+40     	; 0x130b4 <set_active_device+0x17c>
   1308c:	ce 01       	movw	r24, r28
   1308e:	0e df       	rcall	.-484    	; 0x12eac <type_to_str>
   13090:	ed b7       	in	r30, 0x3d	; 61
   13092:	fe b7       	in	r31, 0x3e	; 62
   13094:	91 87       	std	Z+9, r25	; 0x09
   13096:	80 87       	std	Z+8, r24	; 0x08
   13098:	d7 83       	std	Z+7, r29	; 0x07
   1309a:	c6 83       	std	Z+6, r28	; 0x06
   1309c:	15 83       	std	Z+5, r17	; 0x05
   1309e:	04 83       	std	Z+4, r16	; 0x04
   130a0:	8d ec       	ldi	r24, 0xCD	; 205
   130a2:	9b e1       	ldi	r25, 0x1B	; 27
   130a4:	a0 e0       	ldi	r26, 0x00	; 0
   130a6:	cd b7       	in	r28, 0x3d	; 61
   130a8:	de b7       	in	r29, 0x3e	; 62
   130aa:	89 83       	std	Y+1, r24	; 0x01
   130ac:	9a 83       	std	Y+2, r25	; 0x02
   130ae:	ab 83       	std	Y+3, r26	; 0x03
   130b0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   130b4:	80 e0       	ldi	r24, 0x00	; 0
   130b6:	cd b7       	in	r28, 0x3d	; 61
   130b8:	de b7       	in	r29, 0x3e	; 62
   130ba:	29 96       	adiw	r28, 0x09	; 9
   130bc:	e4 e0       	ldi	r30, 0x04	; 4
   130be:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

000130c2 <SS80_Set_Defaults>:
   130c2:	0f 93       	push	r16
   130c4:	1f 93       	push	r17
   130c6:	cf 93       	push	r28
   130c8:	df 93       	push	r29
   130ca:	18 2f       	mov	r17, r24
   130cc:	82 e0       	ldi	r24, 0x02	; 2
   130ce:	90 e0       	ldi	r25, 0x00	; 0
   130d0:	ca de       	rcall	.-620    	; 0x12e66 <find_type>
   130d2:	87 fd       	sbrc	r24, 7
   130d4:	69 c0       	rjmp	.+210    	; 0x131a8 <SS80_Set_Defaults+0xe6>
   130d6:	2b e0       	ldi	r18, 0x0B	; 11
   130d8:	12 03       	mulsu	r17, r18
   130da:	e0 01       	movw	r28, r0
   130dc:	11 24       	eor	r1, r1
   130de:	cc 50       	subi	r28, 0x0C	; 12
   130e0:	d1 4e       	sbci	r29, 0xE1	; 225
   130e2:	0f 80       	ldd	r0, Y+7	; 0x07
   130e4:	d8 85       	ldd	r29, Y+8	; 0x08
   130e6:	c0 2d       	mov	r28, r0
   130e8:	38 2f       	mov	r19, r24
   130ea:	32 03       	mulsu	r19, r18
   130ec:	f0 01       	movw	r30, r0
   130ee:	11 24       	eor	r1, r1
   130f0:	ec 50       	subi	r30, 0x0C	; 12
   130f2:	f1 4e       	sbci	r31, 0xE1	; 225
   130f4:	07 81       	ldd	r16, Z+7	; 0x07
   130f6:	10 85       	ldd	r17, Z+8	; 0x08
   130f8:	f8 01       	movw	r30, r16
   130fa:	80 81       	ld	r24, Z
   130fc:	88 83       	st	Y, r24
   130fe:	81 81       	ldd	r24, Z+1	; 0x01
   13100:	89 83       	std	Y+1, r24	; 0x01
   13102:	82 81       	ldd	r24, Z+2	; 0x02
   13104:	93 81       	ldd	r25, Z+3	; 0x03
   13106:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <stralloc>
   1310a:	9b 83       	std	Y+3, r25	; 0x03
   1310c:	8a 83       	std	Y+2, r24	; 0x02
   1310e:	f8 01       	movw	r30, r16
   13110:	86 81       	ldd	r24, Z+6	; 0x06
   13112:	97 81       	ldd	r25, Z+7	; 0x07
   13114:	9f 83       	std	Y+7, r25	; 0x07
   13116:	8e 83       	std	Y+6, r24	; 0x06
   13118:	80 85       	ldd	r24, Z+8	; 0x08
   1311a:	91 85       	ldd	r25, Z+9	; 0x09
   1311c:	99 87       	std	Y+9, r25	; 0x09
   1311e:	88 87       	std	Y+8, r24	; 0x08
   13120:	82 85       	ldd	r24, Z+10	; 0x0a
   13122:	93 85       	ldd	r25, Z+11	; 0x0b
   13124:	9b 87       	std	Y+11, r25	; 0x0b
   13126:	8a 87       	std	Y+10, r24	; 0x0a
   13128:	84 85       	ldd	r24, Z+12	; 0x0c
   1312a:	8c 87       	std	Y+12, r24	; 0x0c
   1312c:	85 85       	ldd	r24, Z+13	; 0x0d
   1312e:	8d 87       	std	Y+13, r24	; 0x0d
   13130:	86 85       	ldd	r24, Z+14	; 0x0e
   13132:	97 85       	ldd	r25, Z+15	; 0x0f
   13134:	a0 89       	ldd	r26, Z+16	; 0x10
   13136:	b1 89       	ldd	r27, Z+17	; 0x11
   13138:	8e 87       	std	Y+14, r24	; 0x0e
   1313a:	9f 87       	std	Y+15, r25	; 0x0f
   1313c:	a8 8b       	std	Y+16, r26	; 0x10
   1313e:	b9 8b       	std	Y+17, r27	; 0x11
   13140:	82 89       	ldd	r24, Z+18	; 0x12
   13142:	93 89       	ldd	r25, Z+19	; 0x13
   13144:	9b 8b       	std	Y+19, r25	; 0x13
   13146:	8a 8b       	std	Y+18, r24	; 0x12
   13148:	84 89       	ldd	r24, Z+20	; 0x14
   1314a:	8c 8b       	std	Y+20, r24	; 0x14
   1314c:	85 89       	ldd	r24, Z+21	; 0x15
   1314e:	8d 8b       	std	Y+21, r24	; 0x15
   13150:	86 89       	ldd	r24, Z+22	; 0x16
   13152:	97 89       	ldd	r25, Z+23	; 0x17
   13154:	9f 8b       	std	Y+23, r25	; 0x17
   13156:	8e 8b       	std	Y+22, r24	; 0x16
   13158:	80 8d       	ldd	r24, Z+24	; 0x18
   1315a:	91 8d       	ldd	r25, Z+25	; 0x19
   1315c:	99 8f       	std	Y+25, r25	; 0x19
   1315e:	88 8f       	std	Y+24, r24	; 0x18
   13160:	82 8d       	ldd	r24, Z+26	; 0x1a
   13162:	93 8d       	ldd	r25, Z+27	; 0x1b
   13164:	9b 8f       	std	Y+27, r25	; 0x1b
   13166:	8a 8f       	std	Y+26, r24	; 0x1a
   13168:	84 8d       	ldd	r24, Z+28	; 0x1c
   1316a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1316c:	9d 8f       	std	Y+29, r25	; 0x1d
   1316e:	8c 8f       	std	Y+28, r24	; 0x1c
   13170:	86 8d       	ldd	r24, Z+30	; 0x1e
   13172:	8e 8f       	std	Y+30, r24	; 0x1e
   13174:	87 8d       	ldd	r24, Z+31	; 0x1f
   13176:	8f 8f       	std	Y+31, r24	; 0x1f
   13178:	81 a1       	ldd	r24, Z+33	; 0x21
   1317a:	92 a1       	ldd	r25, Z+34	; 0x22
   1317c:	a3 a1       	ldd	r26, Z+35	; 0x23
   1317e:	b4 a1       	ldd	r27, Z+36	; 0x24
   13180:	89 a3       	std	Y+33, r24	; 0x21
   13182:	9a a3       	std	Y+34, r25	; 0x22
   13184:	ab a3       	std	Y+35, r26	; 0x23
   13186:	bc a3       	std	Y+36, r27	; 0x24
   13188:	85 a1       	ldd	r24, Z+37	; 0x25
   1318a:	8d a3       	std	Y+37, r24	; 0x25
   1318c:	86 a1       	ldd	r24, Z+38	; 0x26
   1318e:	97 a1       	ldd	r25, Z+39	; 0x27
   13190:	9f a3       	std	Y+39, r25	; 0x27
   13192:	8e a3       	std	Y+38, r24	; 0x26
   13194:	80 a5       	ldd	r24, Z+40	; 0x28
   13196:	91 a5       	ldd	r25, Z+41	; 0x29
   13198:	a2 a5       	ldd	r26, Z+42	; 0x2a
   1319a:	b3 a5       	ldd	r27, Z+43	; 0x2b
   1319c:	88 a7       	std	Y+40, r24	; 0x28
   1319e:	99 a7       	std	Y+41, r25	; 0x29
   131a0:	aa a7       	std	Y+42, r26	; 0x2a
   131a2:	bb a7       	std	Y+43, r27	; 0x2b
   131a4:	84 a5       	ldd	r24, Z+44	; 0x2c
   131a6:	8c a7       	std	Y+44, r24	; 0x2c
   131a8:	df 91       	pop	r29
   131aa:	cf 91       	pop	r28
   131ac:	1f 91       	pop	r17
   131ae:	0f 91       	pop	r16
   131b0:	08 95       	ret

000131b2 <free_device>:
   131b2:	0f 93       	push	r16
   131b4:	1f 93       	push	r17
   131b6:	cf 93       	push	r28
   131b8:	df 93       	push	r29
   131ba:	8c 30       	cpi	r24, 0x0C	; 12
   131bc:	08 f0       	brcs	.+2      	; 0x131c0 <free_device+0xe>
   131be:	55 c0       	rjmp	.+170    	; 0x1326a <free_device+0xb8>
   131c0:	08 2f       	mov	r16, r24
   131c2:	08 2e       	mov	r0, r24
   131c4:	00 0c       	add	r0, r0
   131c6:	11 0b       	sbc	r17, r17
   131c8:	9b e0       	ldi	r25, 0x0B	; 11
   131ca:	89 02       	muls	r24, r25
   131cc:	f0 01       	movw	r30, r0
   131ce:	11 24       	eor	r1, r1
   131d0:	ec 50       	subi	r30, 0x0C	; 12
   131d2:	f1 4e       	sbci	r31, 0xE1	; 225
   131d4:	80 81       	ld	r24, Z
   131d6:	83 30       	cpi	r24, 0x03	; 3
   131d8:	51 f4       	brne	.+20     	; 0x131ee <free_device+0x3c>
   131da:	c7 81       	ldd	r28, Z+7	; 0x07
   131dc:	d0 85       	ldd	r29, Z+8	; 0x08
   131de:	8a 81       	ldd	r24, Y+2	; 0x02
   131e0:	9b 81       	ldd	r25, Y+3	; 0x03
   131e2:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
   131e6:	8c 81       	ldd	r24, Y+4	; 0x04
   131e8:	9d 81       	ldd	r25, Y+5	; 0x05
   131ea:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
   131ee:	8b e0       	ldi	r24, 0x0B	; 11
   131f0:	80 9f       	mul	r24, r16
   131f2:	f0 01       	movw	r30, r0
   131f4:	81 9f       	mul	r24, r17
   131f6:	f0 0d       	add	r31, r0
   131f8:	11 24       	eor	r1, r1
   131fa:	ec 50       	subi	r30, 0x0C	; 12
   131fc:	f1 4e       	sbci	r31, 0xE1	; 225
   131fe:	80 81       	ld	r24, Z
   13200:	81 30       	cpi	r24, 0x01	; 1
   13202:	51 f4       	brne	.+20     	; 0x13218 <free_device+0x66>
   13204:	c7 81       	ldd	r28, Z+7	; 0x07
   13206:	d0 85       	ldd	r29, Z+8	; 0x08
   13208:	8a 81       	ldd	r24, Y+2	; 0x02
   1320a:	9b 81       	ldd	r25, Y+3	; 0x03
   1320c:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
   13210:	8c 81       	ldd	r24, Y+4	; 0x04
   13212:	9d 81       	ldd	r25, Y+5	; 0x05
   13214:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
   13218:	8b e0       	ldi	r24, 0x0B	; 11
   1321a:	80 9f       	mul	r24, r16
   1321c:	f0 01       	movw	r30, r0
   1321e:	81 9f       	mul	r24, r17
   13220:	f0 0d       	add	r31, r0
   13222:	11 24       	eor	r1, r1
   13224:	ec 50       	subi	r30, 0x0C	; 12
   13226:	f1 4e       	sbci	r31, 0xE1	; 225
   13228:	80 81       	ld	r24, Z
   1322a:	84 30       	cpi	r24, 0x04	; 4
   1322c:	11 f4       	brne	.+4      	; 0x13232 <free_device+0x80>
   1322e:	0e 94 af be 	call	0x17d5e	; 0x17d5e <printer_close>
   13232:	8b e0       	ldi	r24, 0x0B	; 11
   13234:	80 9f       	mul	r24, r16
   13236:	e0 01       	movw	r28, r0
   13238:	81 9f       	mul	r24, r17
   1323a:	d0 0d       	add	r29, r0
   1323c:	11 24       	eor	r1, r1
   1323e:	cc 50       	subi	r28, 0x0C	; 12
   13240:	d1 4e       	sbci	r29, 0xE1	; 225
   13242:	8f 81       	ldd	r24, Y+7	; 0x07
   13244:	98 85       	ldd	r25, Y+8	; 0x08
   13246:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
   1324a:	89 85       	ldd	r24, Y+9	; 0x09
   1324c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1324e:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
   13252:	18 82       	st	Y, r1
   13254:	19 82       	std	Y+1, r1	; 0x01
   13256:	8f ef       	ldi	r24, 0xFF	; 255
   13258:	8a 83       	std	Y+2, r24	; 0x02
   1325a:	1b 82       	std	Y+3, r1	; 0x03
   1325c:	1c 82       	std	Y+4, r1	; 0x04
   1325e:	1d 82       	std	Y+5, r1	; 0x05
   13260:	1e 82       	std	Y+6, r1	; 0x06
   13262:	18 86       	std	Y+8, r1	; 0x08
   13264:	1f 82       	std	Y+7, r1	; 0x07
   13266:	1a 86       	std	Y+10, r1	; 0x0a
   13268:	19 86       	std	Y+9, r1	; 0x09
   1326a:	df 91       	pop	r29
   1326c:	cf 91       	pop	r28
   1326e:	1f 91       	pop	r17
   13270:	0f 91       	pop	r16
   13272:	08 95       	ret

00013274 <alloc_device>:
   13274:	0f 93       	push	r16
   13276:	1f 93       	push	r17
   13278:	cf 93       	push	r28
   1327a:	ad b7       	in	r26, 0x3d	; 61
   1327c:	be b7       	in	r27, 0x3e	; 62
   1327e:	17 97       	sbiw	r26, 0x07	; 7
   13280:	0f b6       	in	r0, 0x3f	; 63
   13282:	f8 94       	cli
   13284:	be bf       	out	0x3e, r27	; 62
   13286:	0f be       	out	0x3f, r0	; 63
   13288:	ad bf       	out	0x3d, r26	; 61
   1328a:	8c 01       	movw	r16, r24
   1328c:	28 de       	rcall	.-944    	; 0x12ede <find_free>
   1328e:	c8 2f       	mov	r28, r24
   13290:	8f 3f       	cpi	r24, 0xFF	; 255
   13292:	89 f4       	brne	.+34     	; 0x132b6 <alloc_device+0x42>
   13294:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13298:	80 ff       	sbrs	r24, 0
   1329a:	98 c0       	rjmp	.+304    	; 0x133cc <alloc_device+0x158>
   1329c:	ed b7       	in	r30, 0x3d	; 61
   1329e:	fe b7       	in	r31, 0x3e	; 62
   132a0:	15 83       	std	Z+5, r17	; 0x05
   132a2:	04 83       	std	Z+4, r16	; 0x04
   132a4:	89 ea       	ldi	r24, 0xA9	; 169
   132a6:	9b e1       	ldi	r25, 0x1B	; 27
   132a8:	a0 e0       	ldi	r26, 0x00	; 0
   132aa:	81 83       	std	Z+1, r24	; 0x01
   132ac:	92 83       	std	Z+2, r25	; 0x02
   132ae:	a3 83       	std	Z+3, r26	; 0x03
   132b0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   132b4:	8b c0       	rjmp	.+278    	; 0x133cc <alloc_device+0x158>
   132b6:	02 30       	cpi	r16, 0x02	; 2
   132b8:	11 05       	cpc	r17, r1
   132ba:	c1 f1       	breq	.+112    	; 0x1332c <alloc_device+0xb8>
   132bc:	dc f4       	brge	.+54     	; 0x132f4 <alloc_device+0x80>
   132be:	01 30       	cpi	r16, 0x01	; 1
   132c0:	11 05       	cpc	r17, r1
   132c2:	09 f0       	breq	.+2      	; 0x132c6 <alloc_device+0x52>
   132c4:	6e c0       	rjmp	.+220    	; 0x133a2 <alloc_device+0x12e>
   132c6:	fb e0       	ldi	r31, 0x0B	; 11
   132c8:	8f 02       	muls	r24, r31
   132ca:	80 01       	movw	r16, r0
   132cc:	11 24       	eor	r1, r1
   132ce:	0c 50       	subi	r16, 0x0C	; 12
   132d0:	11 4e       	sbci	r17, 0xE1	; 225
   132d2:	81 e0       	ldi	r24, 0x01	; 1
   132d4:	f8 01       	movw	r30, r16
   132d6:	80 83       	st	Z, r24
   132d8:	61 e0       	ldi	r22, 0x01	; 1
   132da:	70 e0       	ldi	r23, 0x00	; 0
   132dc:	87 e1       	ldi	r24, 0x17	; 23
   132de:	90 e0       	ldi	r25, 0x00	; 0
   132e0:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   132e4:	f8 01       	movw	r30, r16
   132e6:	90 87       	std	Z+8, r25	; 0x08
   132e8:	87 83       	std	Z+7, r24	; 0x07
   132ea:	61 e0       	ldi	r22, 0x01	; 1
   132ec:	70 e0       	ldi	r23, 0x00	; 0
   132ee:	88 e1       	ldi	r24, 0x18	; 24
   132f0:	90 e0       	ldi	r25, 0x00	; 0
   132f2:	51 c0       	rjmp	.+162    	; 0x13396 <alloc_device+0x122>
   132f4:	03 30       	cpi	r16, 0x03	; 3
   132f6:	11 05       	cpc	r17, r1
   132f8:	81 f1       	breq	.+96     	; 0x1335a <alloc_device+0xe6>
   132fa:	04 30       	cpi	r16, 0x04	; 4
   132fc:	11 05       	cpc	r17, r1
   132fe:	09 f0       	breq	.+2      	; 0x13302 <alloc_device+0x8e>
   13300:	50 c0       	rjmp	.+160    	; 0x133a2 <alloc_device+0x12e>
   13302:	fb e0       	ldi	r31, 0x0B	; 11
   13304:	8f 02       	muls	r24, r31
   13306:	80 01       	movw	r16, r0
   13308:	11 24       	eor	r1, r1
   1330a:	0c 50       	subi	r16, 0x0C	; 12
   1330c:	11 4e       	sbci	r17, 0xE1	; 225
   1330e:	84 e0       	ldi	r24, 0x04	; 4
   13310:	f8 01       	movw	r30, r16
   13312:	80 83       	st	Z, r24
   13314:	61 e0       	ldi	r22, 0x01	; 1
   13316:	70 e0       	ldi	r23, 0x00	; 0
   13318:	8d e0       	ldi	r24, 0x0D	; 13
   1331a:	90 e0       	ldi	r25, 0x00	; 0
   1331c:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   13320:	f8 01       	movw	r30, r16
   13322:	90 87       	std	Z+8, r25	; 0x08
   13324:	87 83       	std	Z+7, r24	; 0x07
   13326:	12 86       	std	Z+10, r1	; 0x0a
   13328:	11 86       	std	Z+9, r1	; 0x09
   1332a:	50 c0       	rjmp	.+160    	; 0x133cc <alloc_device+0x158>
   1332c:	fb e0       	ldi	r31, 0x0B	; 11
   1332e:	8f 02       	muls	r24, r31
   13330:	80 01       	movw	r16, r0
   13332:	11 24       	eor	r1, r1
   13334:	0c 50       	subi	r16, 0x0C	; 12
   13336:	11 4e       	sbci	r17, 0xE1	; 225
   13338:	82 e0       	ldi	r24, 0x02	; 2
   1333a:	f8 01       	movw	r30, r16
   1333c:	80 83       	st	Z, r24
   1333e:	61 e0       	ldi	r22, 0x01	; 1
   13340:	70 e0       	ldi	r23, 0x00	; 0
   13342:	84 e3       	ldi	r24, 0x34	; 52
   13344:	90 e0       	ldi	r25, 0x00	; 0
   13346:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   1334a:	f8 01       	movw	r30, r16
   1334c:	90 87       	std	Z+8, r25	; 0x08
   1334e:	87 83       	std	Z+7, r24	; 0x07
   13350:	61 e0       	ldi	r22, 0x01	; 1
   13352:	70 e0       	ldi	r23, 0x00	; 0
   13354:	86 e1       	ldi	r24, 0x16	; 22
   13356:	90 e0       	ldi	r25, 0x00	; 0
   13358:	1e c0       	rjmp	.+60     	; 0x13396 <alloc_device+0x122>
   1335a:	fb e0       	ldi	r31, 0x0B	; 11
   1335c:	8f 02       	muls	r24, r31
   1335e:	80 01       	movw	r16, r0
   13360:	11 24       	eor	r1, r1
   13362:	0c 50       	subi	r16, 0x0C	; 12
   13364:	11 4e       	sbci	r17, 0xE1	; 225
   13366:	83 e0       	ldi	r24, 0x03	; 3
   13368:	f8 01       	movw	r30, r16
   1336a:	80 83       	st	Z, r24
   1336c:	61 e0       	ldi	r22, 0x01	; 1
   1336e:	70 e0       	ldi	r23, 0x00	; 0
   13370:	84 e3       	ldi	r24, 0x34	; 52
   13372:	90 e0       	ldi	r25, 0x00	; 0
   13374:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   13378:	f8 01       	movw	r30, r16
   1337a:	90 87       	std	Z+8, r25	; 0x08
   1337c:	87 83       	std	Z+7, r24	; 0x07
   1337e:	61 e0       	ldi	r22, 0x01	; 1
   13380:	70 e0       	ldi	r23, 0x00	; 0
   13382:	86 e1       	ldi	r24, 0x16	; 22
   13384:	90 e0       	ldi	r25, 0x00	; 0
   13386:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   1338a:	f8 01       	movw	r30, r16
   1338c:	92 87       	std	Z+10, r25	; 0x0a
   1338e:	81 87       	std	Z+9, r24	; 0x09
   13390:	8c 2f       	mov	r24, r28
   13392:	97 de       	rcall	.-722    	; 0x130c2 <SS80_Set_Defaults>
   13394:	1b c0       	rjmp	.+54     	; 0x133cc <alloc_device+0x158>
   13396:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   1339a:	f8 01       	movw	r30, r16
   1339c:	92 87       	std	Z+10, r25	; 0x0a
   1339e:	81 87       	std	Z+9, r24	; 0x09
   133a0:	15 c0       	rjmp	.+42     	; 0x133cc <alloc_device+0x158>
   133a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   133a6:	80 ff       	sbrs	r24, 0
   133a8:	10 c0       	rjmp	.+32     	; 0x133ca <alloc_device+0x156>
   133aa:	c8 01       	movw	r24, r16
   133ac:	7f dd       	rcall	.-1282   	; 0x12eac <type_to_str>
   133ae:	ed b7       	in	r30, 0x3d	; 61
   133b0:	fe b7       	in	r31, 0x3e	; 62
   133b2:	97 83       	std	Z+7, r25	; 0x07
   133b4:	86 83       	std	Z+6, r24	; 0x06
   133b6:	15 83       	std	Z+5, r17	; 0x05
   133b8:	04 83       	std	Z+4, r16	; 0x04
   133ba:	87 e8       	ldi	r24, 0x87	; 135
   133bc:	9b e1       	ldi	r25, 0x1B	; 27
   133be:	a0 e0       	ldi	r26, 0x00	; 0
   133c0:	81 83       	std	Z+1, r24	; 0x01
   133c2:	92 83       	std	Z+2, r25	; 0x02
   133c4:	a3 83       	std	Z+3, r26	; 0x03
   133c6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   133ca:	cf ef       	ldi	r28, 0xFF	; 255
   133cc:	8c 2f       	mov	r24, r28
   133ce:	ad b7       	in	r26, 0x3d	; 61
   133d0:	be b7       	in	r27, 0x3e	; 62
   133d2:	17 96       	adiw	r26, 0x07	; 7
   133d4:	0f b6       	in	r0, 0x3f	; 63
   133d6:	f8 94       	cli
   133d8:	be bf       	out	0x3e, r27	; 62
   133da:	0f be       	out	0x3f, r0	; 63
   133dc:	ad bf       	out	0x3d, r26	; 61
   133de:	cf 91       	pop	r28
   133e0:	1f 91       	pop	r17
   133e2:	0f 91       	pop	r16
   133e4:	08 95       	ret

000133e6 <init_Devices>:
   133e6:	10 92 77 19 	sts	0x1977, r1	; 0x801977 <stack_ind+0x1>
   133ea:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <stack_ind>
   133ee:	e4 ef       	ldi	r30, 0xF4	; 244
   133f0:	fe e1       	ldi	r31, 0x1E	; 30
   133f2:	8f ef       	ldi	r24, 0xFF	; 255
   133f4:	10 82       	st	Z, r1
   133f6:	11 82       	std	Z+1, r1	; 0x01
   133f8:	82 83       	std	Z+2, r24	; 0x02
   133fa:	13 82       	std	Z+3, r1	; 0x03
   133fc:	14 82       	std	Z+4, r1	; 0x04
   133fe:	15 82       	std	Z+5, r1	; 0x05
   13400:	16 82       	std	Z+6, r1	; 0x06
   13402:	10 86       	std	Z+8, r1	; 0x08
   13404:	17 82       	std	Z+7, r1	; 0x07
   13406:	12 86       	std	Z+10, r1	; 0x0a
   13408:	11 86       	std	Z+9, r1	; 0x09
   1340a:	3b 96       	adiw	r30, 0x0b	; 11
   1340c:	9f e1       	ldi	r25, 0x1F	; 31
   1340e:	e8 37       	cpi	r30, 0x78	; 120
   13410:	f9 07       	cpc	r31, r25
   13412:	81 f7       	brne	.-32     	; 0x133f4 <init_Devices+0xe>
   13414:	08 95       	ret

00013416 <push_state>:
   13416:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <stack_ind>
   1341a:	30 91 77 19 	lds	r19, 0x1977	; 0x801977 <stack_ind+0x1>
   1341e:	25 30       	cpi	r18, 0x05	; 5
   13420:	31 05       	cpc	r19, r1
   13422:	7c f4       	brge	.+30     	; 0x13442 <push_state+0x2c>
   13424:	a9 01       	movw	r20, r18
   13426:	4f 5f       	subi	r20, 0xFF	; 255
   13428:	5f 4f       	sbci	r21, 0xFF	; 255
   1342a:	50 93 77 19 	sts	0x1977, r21	; 0x801977 <stack_ind+0x1>
   1342e:	40 93 76 19 	sts	0x1976, r20	; 0x801976 <stack_ind>
   13432:	22 0f       	add	r18, r18
   13434:	33 1f       	adc	r19, r19
   13436:	f9 01       	movw	r30, r18
   13438:	e4 59       	subi	r30, 0x94	; 148
   1343a:	f6 4e       	sbci	r31, 0xE6	; 230
   1343c:	80 83       	st	Z, r24
   1343e:	91 83       	std	Z+1, r25	; 0x01
   13440:	08 95       	ret
   13442:	80 e0       	ldi	r24, 0x00	; 0
   13444:	90 e0       	ldi	r25, 0x00	; 0
   13446:	08 95       	ret

00013448 <pop_state>:
   13448:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <stack_ind>
   1344c:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <stack_ind+0x1>
   13450:	18 16       	cp	r1, r24
   13452:	19 06       	cpc	r1, r25
   13454:	6c f4       	brge	.+26     	; 0x13470 <pop_state+0x28>
   13456:	01 97       	sbiw	r24, 0x01	; 1
   13458:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <stack_ind+0x1>
   1345c:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <stack_ind>
   13460:	88 0f       	add	r24, r24
   13462:	99 1f       	adc	r25, r25
   13464:	fc 01       	movw	r30, r24
   13466:	e4 59       	subi	r30, 0x94	; 148
   13468:	f6 4e       	sbci	r31, 0xE6	; 230
   1346a:	80 81       	ld	r24, Z
   1346c:	91 81       	ldd	r25, Z+1	; 0x01
   1346e:	08 95       	ret
   13470:	80 e0       	ldi	r24, 0x00	; 0
   13472:	90 e0       	ldi	r25, 0x00	; 0
   13474:	08 95       	ret

00013476 <set_Config_Defaults>:
   13476:	08 95       	ret

00013478 <hpdir_set_device>:
   13478:	cf 93       	push	r28
   1347a:	df 93       	push	r29
   1347c:	00 d0       	rcall	.+0      	; 0x1347e <hpdir_set_device+0x6>
   1347e:	1f 92       	push	r1
   13480:	2b e0       	ldi	r18, 0x0B	; 11
   13482:	82 02       	muls	r24, r18
   13484:	c0 01       	movw	r24, r0
   13486:	11 24       	eor	r1, r1
   13488:	fc 01       	movw	r30, r24
   1348a:	ec 50       	subi	r30, 0x0C	; 12
   1348c:	f1 4e       	sbci	r31, 0xE1	; 225
   1348e:	80 81       	ld	r24, Z
   13490:	83 30       	cpi	r24, 0x03	; 3
   13492:	a1 f5       	brne	.+104    	; 0x134fc <hpdir_set_device+0x84>
   13494:	c7 81       	ldd	r28, Z+7	; 0x07
   13496:	d0 85       	ldd	r29, Z+8	; 0x08
   13498:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   1349c:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   134a0:	9f 83       	std	Y+7, r25	; 0x07
   134a2:	8e 83       	std	Y+6, r24	; 0x06
   134a4:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <hpdir+0x8c>
   134a8:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <hpdir+0x8d>
   134ac:	a0 91 06 20 	lds	r26, 0x2006	; 0x802006 <hpdir+0x8e>
   134b0:	b0 91 07 20 	lds	r27, 0x2007	; 0x802007 <hpdir+0x8f>
   134b4:	8e 87       	std	Y+14, r24	; 0x0e
   134b6:	9f 87       	std	Y+15, r25	; 0x0f
   134b8:	a8 8b       	std	Y+16, r26	; 0x10
   134ba:	b9 8b       	std	Y+17, r27	; 0x11
   134bc:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   134c0:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   134c4:	9b 8b       	std	Y+19, r25	; 0x13
   134c6:	8a 8b       	std	Y+18, r24	; 0x12
   134c8:	19 a2       	std	Y+33, r1	; 0x21
   134ca:	1a a2       	std	Y+34, r1	; 0x22
   134cc:	1b a2       	std	Y+35, r1	; 0x23
   134ce:	1c a2       	std	Y+36, r1	; 0x24
   134d0:	1d a2       	std	Y+37, r1	; 0x25
   134d2:	1f a2       	std	Y+39, r1	; 0x27
   134d4:	1e a2       	std	Y+38, r1	; 0x26
   134d6:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   134da:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   134de:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   134e2:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   134e6:	ac 01       	movw	r20, r24
   134e8:	bd 01       	movw	r22, r26
   134ea:	41 50       	subi	r20, 0x01	; 1
   134ec:	51 09       	sbc	r21, r1
   134ee:	61 09       	sbc	r22, r1
   134f0:	71 09       	sbc	r23, r1
   134f2:	48 a7       	std	Y+40, r20	; 0x28
   134f4:	59 a7       	std	Y+41, r21	; 0x29
   134f6:	6a a7       	std	Y+42, r22	; 0x2a
   134f8:	7b a7       	std	Y+43, r23	; 0x2b
   134fa:	2a c0       	rjmp	.+84     	; 0x13550 <hpdir_set_device+0xd8>
   134fc:	81 30       	cpi	r24, 0x01	; 1
   134fe:	a1 f5       	brne	.+104    	; 0x13568 <hpdir_set_device+0xf0>
   13500:	c7 81       	ldd	r28, Z+7	; 0x07
   13502:	d0 85       	ldd	r29, Z+8	; 0x08
   13504:	80 91 f8 1f 	lds	r24, 0x1FF8	; 0x801ff8 <hpdir+0x80>
   13508:	90 91 f9 1f 	lds	r25, 0x1FF9	; 0x801ff9 <hpdir+0x81>
   1350c:	9f 83       	std	Y+7, r25	; 0x07
   1350e:	8e 83       	std	Y+6, r24	; 0x06
   13510:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <hpdir+0xa0>
   13514:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <hpdir+0xa1>
   13518:	99 87       	std	Y+9, r25	; 0x09
   1351a:	88 87       	std	Y+8, r24	; 0x08
   1351c:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <hpdir+0x9c>
   13520:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <hpdir+0x9d>
   13524:	9b 87       	std	Y+11, r25	; 0x0b
   13526:	8a 87       	std	Y+10, r24	; 0x0a
   13528:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <hpdir+0x98>
   1352c:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <hpdir+0x99>
   13530:	9d 87       	std	Y+13, r25	; 0x0d
   13532:	8c 87       	std	Y+12, r24	; 0x0c
   13534:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x94>
   13538:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x95>
   1353c:	9f 87       	std	Y+15, r25	; 0x0f
   1353e:	8e 87       	std	Y+14, r24	; 0x0e
   13540:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <hpdir+0xac>
   13544:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <hpdir+0xad>
   13548:	a0 91 26 20 	lds	r26, 0x2026	; 0x802026 <hpdir+0xae>
   1354c:	b0 91 27 20 	lds	r27, 0x2027	; 0x802027 <hpdir+0xaf>
   13550:	83 83       	std	Z+3, r24	; 0x03
   13552:	94 83       	std	Z+4, r25	; 0x04
   13554:	a5 83       	std	Z+5, r26	; 0x05
   13556:	b6 83       	std	Z+6, r27	; 0x06
   13558:	88 e7       	ldi	r24, 0x78	; 120
   1355a:	9f e1       	ldi	r25, 0x1F	; 31
   1355c:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <stralloc>
   13560:	9d 83       	std	Y+5, r25	; 0x05
   13562:	8c 83       	std	Y+4, r24	; 0x04
   13564:	81 e0       	ldi	r24, 0x01	; 1
   13566:	0b c0       	rjmp	.+22     	; 0x1357e <hpdir_set_device+0x106>
   13568:	8f e5       	ldi	r24, 0x5F	; 95
   1356a:	9b e1       	ldi	r25, 0x1B	; 27
   1356c:	a0 e0       	ldi	r26, 0x00	; 0
   1356e:	ed b7       	in	r30, 0x3d	; 61
   13570:	fe b7       	in	r31, 0x3e	; 62
   13572:	81 83       	std	Z+1, r24	; 0x01
   13574:	92 83       	std	Z+2, r25	; 0x02
   13576:	a3 83       	std	Z+3, r26	; 0x03
   13578:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1357c:	80 e0       	ldi	r24, 0x00	; 0
   1357e:	cd b7       	in	r28, 0x3d	; 61
   13580:	de b7       	in	r29, 0x3e	; 62
   13582:	23 96       	adiw	r28, 0x03	; 3
   13584:	e2 e0       	ldi	r30, 0x02	; 2
   13586:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0001358a <hpdir_set_parameters>:
   1358a:	cf 93       	push	r28
   1358c:	00 d0       	rcall	.+0      	; 0x1358e <hpdir_set_parameters+0x4>
   1358e:	1f 92       	push	r1
   13590:	c8 2f       	mov	r28, r24
   13592:	cb 01       	movw	r24, r22
   13594:	41 e0       	ldi	r20, 0x01	; 1
   13596:	50 e0       	ldi	r21, 0x00	; 0
   13598:	60 e0       	ldi	r22, 0x00	; 0
   1359a:	70 e0       	ldi	r23, 0x00	; 0
   1359c:	0e 94 09 a4 	call	0x14812	; 0x14812 <hpdir_find_drive>
   135a0:	89 2b       	or	r24, r25
   135a2:	19 f0       	breq	.+6      	; 0x135aa <hpdir_set_parameters+0x20>
   135a4:	8c 2f       	mov	r24, r28
   135a6:	68 df       	rcall	.-304    	; 0x13478 <hpdir_set_device>
   135a8:	0b c0       	rjmp	.+22     	; 0x135c0 <hpdir_set_parameters+0x36>
   135aa:	87 e3       	ldi	r24, 0x37	; 55
   135ac:	9b e1       	ldi	r25, 0x1B	; 27
   135ae:	a0 e0       	ldi	r26, 0x00	; 0
   135b0:	ed b7       	in	r30, 0x3d	; 61
   135b2:	fe b7       	in	r31, 0x3e	; 62
   135b4:	81 83       	std	Z+1, r24	; 0x01
   135b6:	92 83       	std	Z+2, r25	; 0x02
   135b8:	a3 83       	std	Z+3, r26	; 0x03
   135ba:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   135be:	80 e0       	ldi	r24, 0x00	; 0
   135c0:	0f 90       	pop	r0
   135c2:	0f 90       	pop	r0
   135c4:	0f 90       	pop	r0
   135c6:	cf 91       	pop	r28
   135c8:	08 95       	ret

000135ca <format_drives>:
   135ca:	2f 92       	push	r2
   135cc:	3f 92       	push	r3
   135ce:	4f 92       	push	r4
   135d0:	5f 92       	push	r5
   135d2:	6f 92       	push	r6
   135d4:	7f 92       	push	r7
   135d6:	8f 92       	push	r8
   135d8:	af 92       	push	r10
   135da:	bf 92       	push	r11
   135dc:	cf 92       	push	r12
   135de:	df 92       	push	r13
   135e0:	ef 92       	push	r14
   135e2:	ff 92       	push	r15
   135e4:	0f 93       	push	r16
   135e6:	1f 93       	push	r17
   135e8:	cf 93       	push	r28
   135ea:	df 93       	push	r29
   135ec:	cd b7       	in	r28, 0x3d	; 61
   135ee:	de b7       	in	r29, 0x3e	; 62
   135f0:	ce 56       	subi	r28, 0x6E	; 110
   135f2:	d1 09       	sbc	r29, r1
   135f4:	0f b6       	in	r0, 0x3f	; 63
   135f6:	f8 94       	cli
   135f8:	de bf       	out	0x3e, r29	; 62
   135fa:	0f be       	out	0x3f, r0	; 63
   135fc:	cd bf       	out	0x3d, r28	; 61
   135fe:	84 ef       	ldi	r24, 0xF4	; 244
   13600:	c8 2e       	mov	r12, r24
   13602:	8e e1       	ldi	r24, 0x1E	; 30
   13604:	d8 2e       	mov	r13, r24
   13606:	a0 96       	adiw	r28, 0x20	; 32
   13608:	1f ae       	std	Y+63, r1	; 0x3f
   1360a:	1e ae       	std	Y+62, r1	; 0x3e
   1360c:	a0 97       	sbiw	r28, 0x20	; 32
   1360e:	6e 96       	adiw	r28, 0x1e	; 30
   13610:	1f ae       	std	Y+63, r1	; 0x3f
   13612:	1e ae       	std	Y+62, r1	; 0x3e
   13614:	6e 97       	sbiw	r28, 0x1e	; 30
   13616:	6c 96       	adiw	r28, 0x1c	; 28
   13618:	1f ae       	std	Y+63, r1	; 0x3f
   1361a:	1e ae       	std	Y+62, r1	; 0x3e
   1361c:	6c 97       	sbiw	r28, 0x1c	; 28
   1361e:	84 e1       	ldi	r24, 0x14	; 20
   13620:	9a e1       	ldi	r25, 0x1A	; 26
   13622:	9c 01       	movw	r18, r24
   13624:	40 e0       	ldi	r20, 0x00	; 0
   13626:	a3 96       	adiw	r28, 0x23	; 35
   13628:	2d af       	std	Y+61, r18	; 0x3d
   1362a:	3e af       	std	Y+62, r19	; 0x3e
   1362c:	4f af       	std	Y+63, r20	; 0x3f
   1362e:	a3 97       	sbiw	r28, 0x23	; 35
   13630:	8c e0       	ldi	r24, 0x0C	; 12
   13632:	9a e1       	ldi	r25, 0x1A	; 26
   13634:	9c 01       	movw	r18, r24
   13636:	40 e0       	ldi	r20, 0x00	; 0
   13638:	a6 96       	adiw	r28, 0x26	; 38
   1363a:	2d af       	std	Y+61, r18	; 0x3d
   1363c:	3e af       	std	Y+62, r19	; 0x3e
   1363e:	4f af       	std	Y+63, r20	; 0x3f
   13640:	a6 97       	sbiw	r28, 0x26	; 38
   13642:	8e e2       	ldi	r24, 0x2E	; 46
   13644:	9a e1       	ldi	r25, 0x1A	; 26
   13646:	9c 01       	movw	r18, r24
   13648:	40 e0       	ldi	r20, 0x00	; 0
   1364a:	a9 96       	adiw	r28, 0x29	; 41
   1364c:	2d af       	std	Y+61, r18	; 0x3d
   1364e:	3e af       	std	Y+62, r19	; 0x3e
   13650:	4f af       	std	Y+63, r20	; 0x3f
   13652:	a9 97       	sbiw	r28, 0x29	; 41
   13654:	88 e5       	ldi	r24, 0x58	; 88
   13656:	9a e1       	ldi	r25, 0x1A	; 26
   13658:	9c 01       	movw	r18, r24
   1365a:	40 e0       	ldi	r20, 0x00	; 0
   1365c:	ac 96       	adiw	r28, 0x2c	; 44
   1365e:	2d af       	std	Y+61, r18	; 0x3d
   13660:	3e af       	std	Y+62, r19	; 0x3e
   13662:	4f af       	std	Y+63, r20	; 0x3f
   13664:	ac 97       	sbiw	r28, 0x2c	; 44
   13666:	80 e5       	ldi	r24, 0x50	; 80
   13668:	9a e1       	ldi	r25, 0x1A	; 26
   1366a:	9c 01       	movw	r18, r24
   1366c:	40 e0       	ldi	r20, 0x00	; 0
   1366e:	af 96       	adiw	r28, 0x2f	; 47
   13670:	2d af       	std	Y+61, r18	; 0x3d
   13672:	3e af       	std	Y+62, r19	; 0x3e
   13674:	4f af       	std	Y+63, r20	; 0x3f
   13676:	af 97       	sbiw	r28, 0x2f	; 47
   13678:	82 e7       	ldi	r24, 0x72	; 114
   1367a:	9a e1       	ldi	r25, 0x1A	; 26
   1367c:	3c 01       	movw	r6, r24
   1367e:	81 2c       	mov	r8, r1
   13680:	f6 01       	movw	r30, r12
   13682:	80 81       	ld	r24, Z
   13684:	88 23       	and	r24, r24
   13686:	09 f4       	brne	.+2      	; 0x1368a <format_drives+0xc0>
   13688:	f0 c0       	rjmp	.+480    	; 0x1386a <format_drives+0x2a0>
   1368a:	83 30       	cpi	r24, 0x03	; 3
   1368c:	09 f0       	breq	.+2      	; 0x13690 <format_drives+0xc6>
   1368e:	71 c0       	rjmp	.+226    	; 0x13772 <format_drives+0x1a8>
   13690:	a7 80       	ldd	r10, Z+7	; 0x07
   13692:	b0 84       	ldd	r11, Z+8	; 0x08
   13694:	be 01       	movw	r22, r28
   13696:	66 5f       	subi	r22, 0xF6	; 246
   13698:	7f 4f       	sbci	r23, 0xFF	; 255
   1369a:	f5 01       	movw	r30, r10
   1369c:	82 81       	ldd	r24, Z+2	; 0x02
   1369e:	93 81       	ldd	r25, Z+3	; 0x03
   136a0:	0e 94 4f 79 	call	0xf29e	; 0xf29e <stat>
   136a4:	01 96       	adiw	r24, 0x01	; 1
   136a6:	09 f0       	breq	.+2      	; 0x136aa <format_drives+0xe0>
   136a8:	64 c0       	rjmp	.+200    	; 0x13772 <format_drives+0x1a8>
   136aa:	f5 01       	movw	r30, r10
   136ac:	82 89       	ldd	r24, Z+18	; 0x12
   136ae:	93 89       	ldd	r25, Z+19	; 0x13
   136b0:	81 15       	cp	r24, r1
   136b2:	91 40       	sbci	r25, 0x01	; 1
   136b4:	31 f0       	breq	.+12     	; 0x136c2 <format_drives+0xf8>
   136b6:	ed b7       	in	r30, 0x3d	; 61
   136b8:	fe b7       	in	r31, 0x3e	; 62
   136ba:	61 82       	std	Z+1, r6	; 0x01
   136bc:	72 82       	std	Z+2, r7	; 0x02
   136be:	83 82       	std	Z+3, r8	; 0x03
   136c0:	7a c0       	rjmp	.+244    	; 0x137b6 <format_drives+0x1ec>
   136c2:	f6 01       	movw	r30, r12
   136c4:	23 80       	ldd	r2, Z+3	; 0x03
   136c6:	34 80       	ldd	r3, Z+4	; 0x04
   136c8:	45 80       	ldd	r4, Z+5	; 0x05
   136ca:	56 80       	ldd	r5, Z+6	; 0x06
   136cc:	ed b7       	in	r30, 0x3d	; 61
   136ce:	fe b7       	in	r31, 0x3e	; 62
   136d0:	26 82       	std	Z+6, r2	; 0x06
   136d2:	37 82       	std	Z+7, r3	; 0x07
   136d4:	40 86       	std	Z+8, r4	; 0x08
   136d6:	51 86       	std	Z+9, r5	; 0x09
   136d8:	f5 01       	movw	r30, r10
   136da:	82 81       	ldd	r24, Z+2	; 0x02
   136dc:	93 81       	ldd	r25, Z+3	; 0x03
   136de:	ed b7       	in	r30, 0x3d	; 61
   136e0:	fe b7       	in	r31, 0x3e	; 62
   136e2:	95 83       	std	Z+5, r25	; 0x05
   136e4:	84 83       	std	Z+4, r24	; 0x04
   136e6:	ac 96       	adiw	r28, 0x2c	; 44
   136e8:	2d ad       	ldd	r18, Y+61	; 0x3d
   136ea:	3e ad       	ldd	r19, Y+62	; 0x3e
   136ec:	4f ad       	ldd	r20, Y+63	; 0x3f
   136ee:	ac 97       	sbiw	r28, 0x2c	; 44
   136f0:	21 83       	std	Z+1, r18	; 0x01
   136f2:	32 83       	std	Z+2, r19	; 0x02
   136f4:	43 83       	std	Z+3, r20	; 0x03
   136f6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   136fa:	6e 96       	adiw	r28, 0x1e	; 30
   136fc:	2e ad       	ldd	r18, Y+62	; 0x3e
   136fe:	3f ad       	ldd	r19, Y+63	; 0x3f
   13700:	6e 97       	sbiw	r28, 0x1e	; 30
   13702:	ed b7       	in	r30, 0x3d	; 61
   13704:	fe b7       	in	r31, 0x3e	; 62
   13706:	37 83       	std	Z+7, r19	; 0x07
   13708:	26 83       	std	Z+6, r18	; 0x06
   1370a:	af 96       	adiw	r28, 0x2f	; 47
   1370c:	8d ad       	ldd	r24, Y+61	; 0x3d
   1370e:	9e ad       	ldd	r25, Y+62	; 0x3e
   13710:	af ad       	ldd	r26, Y+63	; 0x3f
   13712:	af 97       	sbiw	r28, 0x2f	; 47
   13714:	83 83       	std	Z+3, r24	; 0x03
   13716:	94 83       	std	Z+4, r25	; 0x04
   13718:	a5 83       	std	Z+5, r26	; 0x05
   1371a:	2a e3       	ldi	r18, 0x3A	; 58
   1371c:	30 e0       	ldi	r19, 0x00	; 0
   1371e:	2c 0f       	add	r18, r28
   13720:	3d 1f       	adc	r19, r29
   13722:	32 83       	std	Z+2, r19	; 0x02
   13724:	21 83       	std	Z+1, r18	; 0x01
   13726:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
   1372a:	f5 01       	movw	r30, r10
   1372c:	a2 80       	ldd	r10, Z+2	; 0x02
   1372e:	b3 80       	ldd	r11, Z+3	; 0x03
   13730:	c2 01       	movw	r24, r4
   13732:	b1 01       	movw	r22, r2
   13734:	0e 94 ec a3 	call	0x147d8	; 0x147d8 <lif_dir_count>
   13738:	9b 01       	movw	r18, r22
   1373a:	ac 01       	movw	r20, r24
   1373c:	82 01       	movw	r16, r4
   1373e:	71 01       	movw	r14, r2
   13740:	be 01       	movw	r22, r28
   13742:	66 5c       	subi	r22, 0xC6	; 198
   13744:	7f 4f       	sbci	r23, 0xFF	; 255
   13746:	c5 01       	movw	r24, r10
   13748:	0e 94 75 de 	call	0x1bcea	; 0x1bcea <lif_create_image>
   1374c:	6c 96       	adiw	r28, 0x1c	; 28
   1374e:	2e ad       	ldd	r18, Y+62	; 0x3e
   13750:	3f ad       	ldd	r19, Y+63	; 0x3f
   13752:	6c 97       	sbiw	r28, 0x1c	; 28
   13754:	2f 5f       	subi	r18, 0xFF	; 255
   13756:	3f 4f       	sbci	r19, 0xFF	; 255
   13758:	6c 96       	adiw	r28, 0x1c	; 28
   1375a:	3f af       	std	Y+63, r19	; 0x3f
   1375c:	2e af       	std	Y+62, r18	; 0x3e
   1375e:	6c 97       	sbiw	r28, 0x1c	; 28
   13760:	6e 96       	adiw	r28, 0x1e	; 30
   13762:	8e ad       	ldd	r24, Y+62	; 0x3e
   13764:	9f ad       	ldd	r25, Y+63	; 0x3f
   13766:	6e 97       	sbiw	r28, 0x1e	; 30
   13768:	01 96       	adiw	r24, 0x01	; 1
   1376a:	6e 96       	adiw	r28, 0x1e	; 30
   1376c:	9f af       	std	Y+63, r25	; 0x3f
   1376e:	8e af       	std	Y+62, r24	; 0x3e
   13770:	6e 97       	sbiw	r28, 0x1e	; 30
   13772:	f6 01       	movw	r30, r12
   13774:	80 81       	ld	r24, Z
   13776:	81 30       	cpi	r24, 0x01	; 1
   13778:	09 f0       	breq	.+2      	; 0x1377c <format_drives+0x1b2>
   1377a:	77 c0       	rjmp	.+238    	; 0x1386a <format_drives+0x2a0>
   1377c:	a7 80       	ldd	r10, Z+7	; 0x07
   1377e:	b0 84       	ldd	r11, Z+8	; 0x08
   13780:	be 01       	movw	r22, r28
   13782:	66 5f       	subi	r22, 0xF6	; 246
   13784:	7f 4f       	sbci	r23, 0xFF	; 255
   13786:	f5 01       	movw	r30, r10
   13788:	82 81       	ldd	r24, Z+2	; 0x02
   1378a:	93 81       	ldd	r25, Z+3	; 0x03
   1378c:	0e 94 4f 79 	call	0xf29e	; 0xf29e <stat>
   13790:	01 96       	adiw	r24, 0x01	; 1
   13792:	09 f0       	breq	.+2      	; 0x13796 <format_drives+0x1cc>
   13794:	6a c0       	rjmp	.+212    	; 0x1386a <format_drives+0x2a0>
   13796:	f5 01       	movw	r30, r10
   13798:	80 85       	ldd	r24, Z+8	; 0x08
   1379a:	91 85       	ldd	r25, Z+9	; 0x09
   1379c:	81 15       	cp	r24, r1
   1379e:	91 40       	sbci	r25, 0x01	; 1
   137a0:	69 f0       	breq	.+26     	; 0x137bc <format_drives+0x1f2>
   137a2:	a9 96       	adiw	r28, 0x29	; 41
   137a4:	2d ad       	ldd	r18, Y+61	; 0x3d
   137a6:	3e ad       	ldd	r19, Y+62	; 0x3e
   137a8:	4f ad       	ldd	r20, Y+63	; 0x3f
   137aa:	a9 97       	sbiw	r28, 0x29	; 41
   137ac:	ed b7       	in	r30, 0x3d	; 61
   137ae:	fe b7       	in	r31, 0x3e	; 62
   137b0:	21 83       	std	Z+1, r18	; 0x01
   137b2:	32 83       	std	Z+2, r19	; 0x02
   137b4:	43 83       	std	Z+3, r20	; 0x03
   137b6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   137ba:	57 c0       	rjmp	.+174    	; 0x1386a <format_drives+0x2a0>
   137bc:	f6 01       	movw	r30, r12
   137be:	23 80       	ldd	r2, Z+3	; 0x03
   137c0:	34 80       	ldd	r3, Z+4	; 0x04
   137c2:	45 80       	ldd	r4, Z+5	; 0x05
   137c4:	56 80       	ldd	r5, Z+6	; 0x06
   137c6:	ed b7       	in	r30, 0x3d	; 61
   137c8:	fe b7       	in	r31, 0x3e	; 62
   137ca:	26 82       	std	Z+6, r2	; 0x06
   137cc:	37 82       	std	Z+7, r3	; 0x07
   137ce:	40 86       	std	Z+8, r4	; 0x08
   137d0:	51 86       	std	Z+9, r5	; 0x09
   137d2:	f5 01       	movw	r30, r10
   137d4:	82 81       	ldd	r24, Z+2	; 0x02
   137d6:	93 81       	ldd	r25, Z+3	; 0x03
   137d8:	ed b7       	in	r30, 0x3d	; 61
   137da:	fe b7       	in	r31, 0x3e	; 62
   137dc:	95 83       	std	Z+5, r25	; 0x05
   137de:	84 83       	std	Z+4, r24	; 0x04
   137e0:	a3 96       	adiw	r28, 0x23	; 35
   137e2:	2d ad       	ldd	r18, Y+61	; 0x3d
   137e4:	3e ad       	ldd	r19, Y+62	; 0x3e
   137e6:	4f ad       	ldd	r20, Y+63	; 0x3f
   137e8:	a3 97       	sbiw	r28, 0x23	; 35
   137ea:	21 83       	std	Z+1, r18	; 0x01
   137ec:	32 83       	std	Z+2, r19	; 0x02
   137ee:	43 83       	std	Z+3, r20	; 0x03
   137f0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   137f4:	a0 96       	adiw	r28, 0x20	; 32
   137f6:	2e ad       	ldd	r18, Y+62	; 0x3e
   137f8:	3f ad       	ldd	r19, Y+63	; 0x3f
   137fa:	a0 97       	sbiw	r28, 0x20	; 32
   137fc:	ed b7       	in	r30, 0x3d	; 61
   137fe:	fe b7       	in	r31, 0x3e	; 62
   13800:	37 83       	std	Z+7, r19	; 0x07
   13802:	26 83       	std	Z+6, r18	; 0x06
   13804:	a6 96       	adiw	r28, 0x26	; 38
   13806:	8d ad       	ldd	r24, Y+61	; 0x3d
   13808:	9e ad       	ldd	r25, Y+62	; 0x3e
   1380a:	af ad       	ldd	r26, Y+63	; 0x3f
   1380c:	a6 97       	sbiw	r28, 0x26	; 38
   1380e:	83 83       	std	Z+3, r24	; 0x03
   13810:	94 83       	std	Z+4, r25	; 0x04
   13812:	a5 83       	std	Z+5, r26	; 0x05
   13814:	2a e3       	ldi	r18, 0x3A	; 58
   13816:	30 e0       	ldi	r19, 0x00	; 0
   13818:	2c 0f       	add	r18, r28
   1381a:	3d 1f       	adc	r19, r29
   1381c:	32 83       	std	Z+2, r19	; 0x02
   1381e:	21 83       	std	Z+1, r18	; 0x01
   13820:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
   13824:	f5 01       	movw	r30, r10
   13826:	a2 80       	ldd	r10, Z+2	; 0x02
   13828:	b3 80       	ldd	r11, Z+3	; 0x03
   1382a:	c2 01       	movw	r24, r4
   1382c:	b1 01       	movw	r22, r2
   1382e:	d4 d7       	rcall	.+4008   	; 0x147d8 <lif_dir_count>
   13830:	9b 01       	movw	r18, r22
   13832:	ac 01       	movw	r20, r24
   13834:	82 01       	movw	r16, r4
   13836:	71 01       	movw	r14, r2
   13838:	be 01       	movw	r22, r28
   1383a:	66 5c       	subi	r22, 0xC6	; 198
   1383c:	7f 4f       	sbci	r23, 0xFF	; 255
   1383e:	c5 01       	movw	r24, r10
   13840:	0e 94 75 de 	call	0x1bcea	; 0x1bcea <lif_create_image>
   13844:	6c 96       	adiw	r28, 0x1c	; 28
   13846:	2e ad       	ldd	r18, Y+62	; 0x3e
   13848:	3f ad       	ldd	r19, Y+63	; 0x3f
   1384a:	6c 97       	sbiw	r28, 0x1c	; 28
   1384c:	2f 5f       	subi	r18, 0xFF	; 255
   1384e:	3f 4f       	sbci	r19, 0xFF	; 255
   13850:	6c 96       	adiw	r28, 0x1c	; 28
   13852:	3f af       	std	Y+63, r19	; 0x3f
   13854:	2e af       	std	Y+62, r18	; 0x3e
   13856:	6c 97       	sbiw	r28, 0x1c	; 28
   13858:	a0 96       	adiw	r28, 0x20	; 32
   1385a:	8e ad       	ldd	r24, Y+62	; 0x3e
   1385c:	9f ad       	ldd	r25, Y+63	; 0x3f
   1385e:	a0 97       	sbiw	r28, 0x20	; 32
   13860:	01 96       	adiw	r24, 0x01	; 1
   13862:	a0 96       	adiw	r28, 0x20	; 32
   13864:	9f af       	std	Y+63, r25	; 0x3f
   13866:	8e af       	std	Y+62, r24	; 0x3e
   13868:	a0 97       	sbiw	r28, 0x20	; 32
   1386a:	9b e0       	ldi	r25, 0x0B	; 11
   1386c:	c9 0e       	add	r12, r25
   1386e:	d1 1c       	adc	r13, r1
   13870:	a8 e7       	ldi	r26, 0x78	; 120
   13872:	ca 16       	cp	r12, r26
   13874:	af e1       	ldi	r26, 0x1F	; 31
   13876:	da 06       	cpc	r13, r26
   13878:	09 f0       	breq	.+2      	; 0x1387c <format_drives+0x2b2>
   1387a:	02 cf       	rjmp	.-508    	; 0x13680 <format_drives+0xb6>
   1387c:	6c 96       	adiw	r28, 0x1c	; 28
   1387e:	ee ad       	ldd	r30, Y+62	; 0x3e
   13880:	ff ad       	ldd	r31, Y+63	; 0x3f
   13882:	6c 97       	sbiw	r28, 0x1c	; 28
   13884:	ef 2b       	or	r30, r31
   13886:	11 f0       	breq	.+4      	; 0x1388c <format_drives+0x2c2>
   13888:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
   1388c:	c2 59       	subi	r28, 0x92	; 146
   1388e:	df 4f       	sbci	r29, 0xFF	; 255
   13890:	0f b6       	in	r0, 0x3f	; 63
   13892:	f8 94       	cli
   13894:	de bf       	out	0x3e, r29	; 62
   13896:	0f be       	out	0x3f, r0	; 63
   13898:	cd bf       	out	0x3d, r28	; 61
   1389a:	df 91       	pop	r29
   1389c:	cf 91       	pop	r28
   1389e:	1f 91       	pop	r17
   138a0:	0f 91       	pop	r16
   138a2:	ff 90       	pop	r15
   138a4:	ef 90       	pop	r14
   138a6:	df 90       	pop	r13
   138a8:	cf 90       	pop	r12
   138aa:	bf 90       	pop	r11
   138ac:	af 90       	pop	r10
   138ae:	8f 90       	pop	r8
   138b0:	7f 90       	pop	r7
   138b2:	6f 90       	pop	r6
   138b4:	5f 90       	pop	r5
   138b6:	4f 90       	pop	r4
   138b8:	3f 90       	pop	r3
   138ba:	2f 90       	pop	r2
   138bc:	08 95       	ret

000138be <mount_usage>:
   138be:	00 d0       	rcall	.+0      	; 0x138c0 <mount_usage+0x2>
   138c0:	1f 92       	push	r1
   138c2:	83 e0       	ldi	r24, 0x03	; 3
   138c4:	9a e1       	ldi	r25, 0x1A	; 26
   138c6:	a0 e0       	ldi	r26, 0x00	; 0
   138c8:	ed b7       	in	r30, 0x3d	; 61
   138ca:	fe b7       	in	r31, 0x3e	; 62
   138cc:	81 83       	std	Z+1, r24	; 0x01
   138ce:	92 83       	std	Z+2, r25	; 0x02
   138d0:	a3 83       	std	Z+3, r26	; 0x03
   138d2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   138d6:	82 ef       	ldi	r24, 0xF2	; 242
   138d8:	99 e1       	ldi	r25, 0x19	; 25
   138da:	a0 e0       	ldi	r26, 0x00	; 0
   138dc:	ed b7       	in	r30, 0x3d	; 61
   138de:	fe b7       	in	r31, 0x3e	; 62
   138e0:	81 83       	std	Z+1, r24	; 0x01
   138e2:	92 83       	std	Z+2, r25	; 0x02
   138e4:	a3 83       	std	Z+3, r26	; 0x03
   138e6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   138ea:	83 ed       	ldi	r24, 0xD3	; 211
   138ec:	99 e1       	ldi	r25, 0x19	; 25
   138ee:	a0 e0       	ldi	r26, 0x00	; 0
   138f0:	ed b7       	in	r30, 0x3d	; 61
   138f2:	fe b7       	in	r31, 0x3e	; 62
   138f4:	81 83       	std	Z+1, r24	; 0x01
   138f6:	92 83       	std	Z+2, r25	; 0x02
   138f8:	a3 83       	std	Z+3, r26	; 0x03
   138fa:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   138fe:	85 eb       	ldi	r24, 0xB5	; 181
   13900:	99 e1       	ldi	r25, 0x19	; 25
   13902:	a0 e0       	ldi	r26, 0x00	; 0
   13904:	ed b7       	in	r30, 0x3d	; 61
   13906:	fe b7       	in	r31, 0x3e	; 62
   13908:	81 83       	std	Z+1, r24	; 0x01
   1390a:	92 83       	std	Z+2, r25	; 0x02
   1390c:	a3 83       	std	Z+3, r26	; 0x03
   1390e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   13912:	83 eb       	ldi	r24, 0xB3	; 179
   13914:	99 e1       	ldi	r25, 0x19	; 25
   13916:	a0 e0       	ldi	r26, 0x00	; 0
   13918:	ed b7       	in	r30, 0x3d	; 61
   1391a:	fe b7       	in	r31, 0x3e	; 62
   1391c:	81 83       	std	Z+1, r24	; 0x01
   1391e:	92 83       	std	Z+2, r25	; 0x02
   13920:	a3 83       	std	Z+3, r26	; 0x03
   13922:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   13926:	81 ea       	ldi	r24, 0xA1	; 161
   13928:	99 e1       	ldi	r25, 0x19	; 25
   1392a:	a0 e0       	ldi	r26, 0x00	; 0
   1392c:	ed b7       	in	r30, 0x3d	; 61
   1392e:	fe b7       	in	r31, 0x3e	; 62
   13930:	81 83       	std	Z+1, r24	; 0x01
   13932:	92 83       	std	Z+2, r25	; 0x02
   13934:	a3 83       	std	Z+3, r26	; 0x03
   13936:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1393a:	8c e8       	ldi	r24, 0x8C	; 140
   1393c:	99 e1       	ldi	r25, 0x19	; 25
   1393e:	a0 e0       	ldi	r26, 0x00	; 0
   13940:	ed b7       	in	r30, 0x3d	; 61
   13942:	fe b7       	in	r31, 0x3e	; 62
   13944:	81 83       	std	Z+1, r24	; 0x01
   13946:	92 83       	std	Z+2, r25	; 0x02
   13948:	a3 83       	std	Z+3, r26	; 0x03
   1394a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1394e:	8a e8       	ldi	r24, 0x8A	; 138
   13950:	99 e1       	ldi	r25, 0x19	; 25
   13952:	a0 e0       	ldi	r26, 0x00	; 0
   13954:	ed b7       	in	r30, 0x3d	; 61
   13956:	fe b7       	in	r31, 0x3e	; 62
   13958:	81 83       	std	Z+1, r24	; 0x01
   1395a:	92 83       	std	Z+2, r25	; 0x02
   1395c:	a3 83       	std	Z+3, r26	; 0x03
   1395e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   13962:	8f e6       	ldi	r24, 0x6F	; 111
   13964:	99 e1       	ldi	r25, 0x19	; 25
   13966:	a0 e0       	ldi	r26, 0x00	; 0
   13968:	ed b7       	in	r30, 0x3d	; 61
   1396a:	fe b7       	in	r31, 0x3e	; 62
   1396c:	81 83       	std	Z+1, r24	; 0x01
   1396e:	92 83       	std	Z+2, r25	; 0x02
   13970:	a3 83       	std	Z+3, r26	; 0x03
   13972:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   13976:	84 e6       	ldi	r24, 0x64	; 100
   13978:	99 e1       	ldi	r25, 0x19	; 25
   1397a:	a0 e0       	ldi	r26, 0x00	; 0
   1397c:	ed b7       	in	r30, 0x3d	; 61
   1397e:	fe b7       	in	r31, 0x3e	; 62
   13980:	81 83       	std	Z+1, r24	; 0x01
   13982:	92 83       	std	Z+2, r25	; 0x02
   13984:	a3 83       	std	Z+3, r26	; 0x03
   13986:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1398a:	0f 90       	pop	r0
   1398c:	0f 90       	pop	r0
   1398e:	0f 90       	pop	r0
   13990:	08 95       	ret

00013992 <index_address>:
   13992:	e4 ef       	ldi	r30, 0xF4	; 244
   13994:	fe e1       	ldi	r31, 0x1E	; 30
   13996:	90 e0       	ldi	r25, 0x00	; 0
   13998:	28 2f       	mov	r18, r24
   1399a:	88 0f       	add	r24, r24
   1399c:	33 0b       	sbc	r19, r19
   1399e:	80 81       	ld	r24, Z
   139a0:	88 23       	and	r24, r24
   139a2:	29 f0       	breq	.+10     	; 0x139ae <index_address+0x1c>
   139a4:	41 81       	ldd	r20, Z+1	; 0x01
   139a6:	50 e0       	ldi	r21, 0x00	; 0
   139a8:	42 17       	cp	r20, r18
   139aa:	53 07       	cpc	r21, r19
   139ac:	31 f0       	breq	.+12     	; 0x139ba <index_address+0x28>
   139ae:	9f 5f       	subi	r25, 0xFF	; 255
   139b0:	3b 96       	adiw	r30, 0x0b	; 11
   139b2:	9c 30       	cpi	r25, 0x0C	; 12
   139b4:	a1 f7       	brne	.-24     	; 0x1399e <index_address+0xc>
   139b6:	8f ef       	ldi	r24, 0xFF	; 255
   139b8:	08 95       	ret
   139ba:	89 2f       	mov	r24, r25
   139bc:	08 95       	ret

000139be <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   139be:	cf 93       	push	r28
   139c0:	df 93       	push	r29
   139c2:	00 d0       	rcall	.+0      	; 0x139c4 <umount+0x6>
   139c4:	00 d0       	rcall	.+0      	; 0x139c6 <umount+0x8>
   139c6:	1f 92       	push	r1
   139c8:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   139ca:	02 97       	sbiw	r24, 0x02	; 2
   139cc:	f1 f0       	breq	.+60     	; 0x13a0a <umount+0x4c>
	{
		printf("Usage:\n");
   139ce:	8c e5       	ldi	r24, 0x5C	; 92
   139d0:	99 e1       	ldi	r25, 0x19	; 25
   139d2:	a0 e0       	ldi	r26, 0x00	; 0
   139d4:	ed b7       	in	r30, 0x3d	; 61
   139d6:	fe b7       	in	r31, 0x3e	; 62
   139d8:	81 83       	std	Z+1, r24	; 0x01
   139da:	92 83       	std	Z+2, r25	; 0x02
   139dc:	a3 83       	std	Z+3, r26	; 0x03
   139de:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		printf("  umount address\n");
   139e2:	8a e4       	ldi	r24, 0x4A	; 74
   139e4:	99 e1       	ldi	r25, 0x19	; 25
   139e6:	a0 e0       	ldi	r26, 0x00	; 0
   139e8:	ed b7       	in	r30, 0x3d	; 61
   139ea:	fe b7       	in	r31, 0x3e	; 62
   139ec:	81 83       	std	Z+1, r24	; 0x01
   139ee:	92 83       	std	Z+2, r25	; 0x02
   139f0:	a3 83       	std	Z+3, r26	; 0x03
   139f2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		printf("  - address is the device address\n");
   139f6:	87 e2       	ldi	r24, 0x27	; 39
   139f8:	99 e1       	ldi	r25, 0x19	; 25
   139fa:	a0 e0       	ldi	r26, 0x00	; 0
   139fc:	ed b7       	in	r30, 0x3d	; 61
   139fe:	fe b7       	in	r31, 0x3e	; 62
   13a00:	81 83       	std	Z+1, r24	; 0x01
   13a02:	92 83       	std	Z+2, r25	; 0x02
   13a04:	a3 83       	std	Z+3, r26	; 0x03
   13a06:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	}
	address = atoi(argv[1]);
   13a0a:	8a 81       	ldd	r24, Y+2	; 0x02
   13a0c:	9b 81       	ldd	r25, Y+3	; 0x03
   13a0e:	0e 94 a4 47 	call	0x8f48	; 0x8f48 <atoi>
   13a12:	d8 2f       	mov	r29, r24
	index = index_address(address);
   13a14:	be df       	rcall	.-132    	; 0x13992 <index_address>
   13a16:	c8 2f       	mov	r28, r24
	if(index == -1)
   13a18:	8f 3f       	cpi	r24, 0xFF	; 255
   13a1a:	89 f4       	brne	.+34     	; 0x13a3e <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   13a1c:	8d 2f       	mov	r24, r29
   13a1e:	dd 0f       	add	r29, r29
   13a20:	99 0b       	sbc	r25, r25
   13a22:	ed b7       	in	r30, 0x3d	; 61
   13a24:	fe b7       	in	r31, 0x3e	; 62
   13a26:	95 83       	std	Z+5, r25	; 0x05
   13a28:	84 83       	std	Z+4, r24	; 0x04
   13a2a:	88 e0       	ldi	r24, 0x08	; 8
   13a2c:	99 e1       	ldi	r25, 0x19	; 25
   13a2e:	a0 e0       	ldi	r26, 0x00	; 0
   13a30:	81 83       	std	Z+1, r24	; 0x01
   13a32:	92 83       	std	Z+2, r25	; 0x02
   13a34:	a3 83       	std	Z+3, r26	; 0x03
   13a36:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		return(-1);
   13a3a:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   13a3c:	02 c0       	rjmp	.+4      	; 0x13a42 <umount+0x84>
   13a3e:	b9 db       	rcall	.-2190   	; 0x131b2 <free_device>
	return(index);
   13a40:	8c 2f       	mov	r24, r28
}
   13a42:	cd b7       	in	r28, 0x3d	; 61
   13a44:	de b7       	in	r29, 0x3e	; 62
   13a46:	25 96       	adiw	r28, 0x05	; 5
   13a48:	e2 e0       	ldi	r30, 0x02	; 2
   13a4a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00013a4e <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   13a4e:	a9 e0       	ldi	r26, 0x09	; 9
   13a50:	b0 e0       	ldi	r27, 0x00	; 0
   13a52:	ed e2       	ldi	r30, 0x2D	; 45
   13a54:	fd e9       	ldi	r31, 0x9D	; 157
   13a56:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13a5a:	08 2f       	mov	r16, r24
   13a5c:	08 2e       	mov	r0, r24
   13a5e:	00 0c       	add	r0, r0
   13a60:	11 0b       	sbc	r17, r17
   13a62:	9b e0       	ldi	r25, 0x0B	; 11
   13a64:	89 02       	muls	r24, r25
   13a66:	f0 01       	movw	r30, r0
   13a68:	11 24       	eor	r1, r1
   13a6a:	ec 50       	subi	r30, 0x0C	; 12
   13a6c:	f1 4e       	sbci	r31, 0xE1	; 225
   13a6e:	80 81       	ld	r24, Z
   13a70:	88 23       	and	r24, r24
   13a72:	09 f4       	brne	.+2      	; 0x13a76 <display_mount+0x28>
   13a74:	5f c0       	rjmp	.+190    	; 0x13b34 <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   13a76:	83 30       	cpi	r24, 0x03	; 3
   13a78:	c9 f4       	brne	.+50     	; 0x13aac <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13a7a:	07 80       	ldd	r0, Z+7	; 0x07
   13a7c:	f0 85       	ldd	r31, Z+8	; 0x08
   13a7e:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13a80:	82 81       	ldd	r24, Z+2	; 0x02
   13a82:	93 81       	ldd	r25, Z+3	; 0x03
   13a84:	cd b7       	in	r28, 0x3d	; 61
   13a86:	de b7       	in	r29, 0x3e	; 62
   13a88:	99 87       	std	Y+9, r25	; 0x09
   13a8a:	88 87       	std	Y+8, r24	; 0x08
   13a8c:	80 81       	ld	r24, Z
   13a8e:	90 e0       	ldi	r25, 0x00	; 0
   13a90:	9f 83       	std	Y+7, r25	; 0x07
   13a92:	8e 83       	std	Y+6, r24	; 0x06
   13a94:	84 81       	ldd	r24, Z+4	; 0x04
   13a96:	95 81       	ldd	r25, Z+5	; 0x05
   13a98:	9d 83       	std	Y+5, r25	; 0x05
   13a9a:	8c 83       	std	Y+4, r24	; 0x04
   13a9c:	87 e2       	ldi	r24, 0x27	; 39
   13a9e:	98 e1       	ldi	r25, 0x18	; 24
   13aa0:	a0 e0       	ldi	r26, 0x00	; 0
   13aa2:	89 83       	std	Y+1, r24	; 0x01
   13aa4:	9a 83       	std	Y+2, r25	; 0x02
   13aa6:	ab 83       	std	Y+3, r26	; 0x03
   13aa8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13aac:	8b e0       	ldi	r24, 0x0B	; 11
   13aae:	80 9f       	mul	r24, r16
   13ab0:	f0 01       	movw	r30, r0
   13ab2:	81 9f       	mul	r24, r17
   13ab4:	f0 0d       	add	r31, r0
   13ab6:	11 24       	eor	r1, r1
   13ab8:	ec 50       	subi	r30, 0x0C	; 12
   13aba:	f1 4e       	sbci	r31, 0xE1	; 225
   13abc:	80 81       	ld	r24, Z
   13abe:	81 30       	cpi	r24, 0x01	; 1
   13ac0:	c9 f4       	brne	.+50     	; 0x13af4 <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13ac2:	07 80       	ldd	r0, Z+7	; 0x07
   13ac4:	f0 85       	ldd	r31, Z+8	; 0x08
   13ac6:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13ac8:	82 81       	ldd	r24, Z+2	; 0x02
   13aca:	93 81       	ldd	r25, Z+3	; 0x03
   13acc:	cd b7       	in	r28, 0x3d	; 61
   13ace:	de b7       	in	r29, 0x3e	; 62
   13ad0:	99 87       	std	Y+9, r25	; 0x09
   13ad2:	88 87       	std	Y+8, r24	; 0x08
   13ad4:	80 81       	ld	r24, Z
   13ad6:	90 e0       	ldi	r25, 0x00	; 0
   13ad8:	9f 83       	std	Y+7, r25	; 0x07
   13ada:	8e 83       	std	Y+6, r24	; 0x06
   13adc:	84 81       	ldd	r24, Z+4	; 0x04
   13ade:	95 81       	ldd	r25, Z+5	; 0x05
   13ae0:	9d 83       	std	Y+5, r25	; 0x05
   13ae2:	8c 83       	std	Y+4, r24	; 0x04
   13ae4:	82 e1       	ldi	r24, 0x12	; 18
   13ae6:	98 e1       	ldi	r25, 0x18	; 24
   13ae8:	a0 e0       	ldi	r26, 0x00	; 0
   13aea:	89 83       	std	Y+1, r24	; 0x01
   13aec:	9a 83       	std	Y+2, r25	; 0x02
   13aee:	ab 83       	std	Y+3, r26	; 0x03
   13af0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   13af4:	8b e0       	ldi	r24, 0x0B	; 11
   13af6:	80 9f       	mul	r24, r16
   13af8:	f0 01       	movw	r30, r0
   13afa:	81 9f       	mul	r24, r17
   13afc:	f0 0d       	add	r31, r0
   13afe:	11 24       	eor	r1, r1
   13b00:	ec 50       	subi	r30, 0x0C	; 12
   13b02:	f1 4e       	sbci	r31, 0xE1	; 225
   13b04:	80 81       	ld	r24, Z
   13b06:	84 30       	cpi	r24, 0x04	; 4
   13b08:	a9 f4       	brne	.+42     	; 0x13b34 <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13b0a:	07 80       	ldd	r0, Z+7	; 0x07
   13b0c:	f0 85       	ldd	r31, Z+8	; 0x08
   13b0e:	e0 2d       	mov	r30, r0
   13b10:	80 81       	ld	r24, Z
   13b12:	90 e0       	ldi	r25, 0x00	; 0
   13b14:	cd b7       	in	r28, 0x3d	; 61
   13b16:	de b7       	in	r29, 0x3e	; 62
   13b18:	9f 83       	std	Y+7, r25	; 0x07
   13b1a:	8e 83       	std	Y+6, r24	; 0x06
   13b1c:	89 e6       	ldi	r24, 0x69	; 105
   13b1e:	94 e0       	ldi	r25, 0x04	; 4
   13b20:	9d 83       	std	Y+5, r25	; 0x05
   13b22:	8c 83       	std	Y+4, r24	; 0x04
   13b24:	80 e0       	ldi	r24, 0x00	; 0
   13b26:	98 e1       	ldi	r25, 0x18	; 24
   13b28:	a0 e0       	ldi	r26, 0x00	; 0
   13b2a:	89 83       	std	Y+1, r24	; 0x01
   13b2c:	9a 83       	std	Y+2, r25	; 0x02
   13b2e:	ab 83       	std	Y+3, r26	; 0x03
   13b30:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	}
}
   13b34:	cd b7       	in	r28, 0x3d	; 61
   13b36:	de b7       	in	r29, 0x3e	; 62
   13b38:	29 96       	adiw	r28, 0x09	; 9
   13b3a:	e4 e0       	ldi	r30, 0x04	; 4
   13b3c:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00013b40 <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   13b40:	a5 e0       	ldi	r26, 0x05	; 5
   13b42:	b0 e0       	ldi	r27, 0x00	; 0
   13b44:	e6 ea       	ldi	r30, 0xA6	; 166
   13b46:	fd e9       	ldi	r31, 0x9D	; 157
   13b48:	0c 94 f7 e6 	jmp	0x1cdee	; 0x1cdee <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13b4c:	e8 2e       	mov	r14, r24
   13b4e:	08 2e       	mov	r0, r24
   13b50:	00 0c       	add	r0, r0
   13b52:	ff 08       	sbc	r15, r15
   13b54:	9b e0       	ldi	r25, 0x0B	; 11
   13b56:	89 02       	muls	r24, r25
   13b58:	f0 01       	movw	r30, r0
   13b5a:	11 24       	eor	r1, r1
   13b5c:	ec 50       	subi	r30, 0x0C	; 12
   13b5e:	f1 4e       	sbci	r31, 0xE1	; 225
   13b60:	10 81       	ld	r17, Z
   13b62:	11 23       	and	r17, r17
   13b64:	09 f1       	breq	.+66     	; 0x13ba8 <verify_device+0x68>
   13b66:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13b68:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13b6a:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13b6c:	80 32       	cpi	r24, 0x20	; 32
   13b6e:	78 f0       	brcs	.+30     	; 0x13b8e <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   13b70:	90 e0       	ldi	r25, 0x00	; 0
   13b72:	ed b7       	in	r30, 0x3d	; 61
   13b74:	fe b7       	in	r31, 0x3e	; 62
   13b76:	95 83       	std	Z+5, r25	; 0x05
   13b78:	84 83       	std	Z+4, r24	; 0x04
   13b7a:	8c e1       	ldi	r24, 0x1C	; 28
   13b7c:	9b e1       	ldi	r25, 0x1B	; 27
   13b7e:	a0 e0       	ldi	r26, 0x00	; 0
   13b80:	81 83       	std	Z+1, r24	; 0x01
   13b82:	92 83       	std	Z+2, r25	; 0x02
   13b84:	a3 83       	std	Z+3, r26	; 0x03
   13b86:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		ret = 0;
   13b8a:	80 e0       	ldi	r24, 0x00	; 0
   13b8c:	01 c0       	rjmp	.+2      	; 0x13b90 <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   13b8e:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   13b90:	14 30       	cpi	r17, 0x04	; 4
   13b92:	61 f4       	brne	.+24     	; 0x13bac <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13b94:	8b e0       	ldi	r24, 0x0B	; 11
   13b96:	8e 9d       	mul	r24, r14
   13b98:	f0 01       	movw	r30, r0
   13b9a:	8f 9d       	mul	r24, r15
   13b9c:	f0 0d       	add	r31, r0
   13b9e:	11 24       	eor	r1, r1
   13ba0:	ec 50       	subi	r30, 0x0C	; 12
   13ba2:	f1 4e       	sbci	r31, 0xE1	; 225
   13ba4:	8f ef       	ldi	r24, 0xFF	; 255
   13ba6:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13ba8:	81 e0       	ldi	r24, 0x01	; 1
   13baa:	90 c0       	rjmp	.+288    	; 0x13ccc <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13bac:	08 30       	cpi	r16, 0x08	; 8
   13bae:	08 f0       	brcs	.+2      	; 0x13bb2 <verify_device+0x72>
		{
			ret = 0;
   13bb0:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13bb2:	13 30       	cpi	r17, 0x03	; 3
   13bb4:	79 f5       	brne	.+94     	; 0x13c14 <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13bb6:	9b e0       	ldi	r25, 0x0B	; 11
   13bb8:	9e 9d       	mul	r25, r14
   13bba:	f0 01       	movw	r30, r0
   13bbc:	9f 9d       	mul	r25, r15
   13bbe:	f0 0d       	add	r31, r0
   13bc0:	11 24       	eor	r1, r1
   13bc2:	ec 50       	subi	r30, 0x0C	; 12
   13bc4:	f1 4e       	sbci	r31, 0xE1	; 225
   13bc6:	c7 81       	ldd	r28, Z+7	; 0x07
   13bc8:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13bca:	2a 89       	ldd	r18, Y+18	; 0x12
   13bcc:	3b 89       	ldd	r19, Y+19	; 0x13
   13bce:	21 15       	cp	r18, r1
   13bd0:	31 40       	sbci	r19, 0x01	; 1
   13bd2:	79 f0       	breq	.+30     	; 0x13bf2 <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13bd4:	8c 81       	ldd	r24, Y+4	; 0x04
   13bd6:	9d 81       	ldd	r25, Y+5	; 0x05
   13bd8:	ed b7       	in	r30, 0x3d	; 61
   13bda:	fe b7       	in	r31, 0x3e	; 62
   13bdc:	95 83       	std	Z+5, r25	; 0x05
   13bde:	84 83       	std	Z+4, r24	; 0x04
   13be0:	86 ee       	ldi	r24, 0xE6	; 230
   13be2:	9a e1       	ldi	r25, 0x1A	; 26
   13be4:	a0 e0       	ldi	r26, 0x00	; 0
   13be6:	81 83       	std	Z+1, r24	; 0x01
   13be8:	92 83       	std	Z+2, r25	; 0x02
   13bea:	a3 83       	std	Z+3, r26	; 0x03
   13bec:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
			ret = 0;
   13bf0:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13bf2:	9b e0       	ldi	r25, 0x0B	; 11
   13bf4:	9e 9d       	mul	r25, r14
   13bf6:	f0 01       	movw	r30, r0
   13bf8:	9f 9d       	mul	r25, r15
   13bfa:	f0 0d       	add	r31, r0
   13bfc:	11 24       	eor	r1, r1
   13bfe:	ec 50       	subi	r30, 0x0C	; 12
   13c00:	f1 4e       	sbci	r31, 0xE1	; 225
   13c02:	48 a5       	ldd	r20, Y+40	; 0x28
   13c04:	59 a5       	ldd	r21, Y+41	; 0x29
   13c06:	6a a5       	ldd	r22, Y+42	; 0x2a
   13c08:	7b a5       	ldd	r23, Y+43	; 0x2b
   13c0a:	4f 5f       	subi	r20, 0xFF	; 255
   13c0c:	5f 4f       	sbci	r21, 0xFF	; 255
   13c0e:	6f 4f       	sbci	r22, 0xFF	; 255
   13c10:	7f 4f       	sbci	r23, 0xFF	; 255
   13c12:	47 c0       	rjmp	.+142    	; 0x13ca2 <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13c14:	11 30       	cpi	r17, 0x01	; 1
   13c16:	09 f0       	breq	.+2      	; 0x13c1a <verify_device+0xda>
   13c18:	48 c0       	rjmp	.+144    	; 0x13caa <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13c1a:	9b e0       	ldi	r25, 0x0B	; 11
   13c1c:	9e 9d       	mul	r25, r14
   13c1e:	f0 01       	movw	r30, r0
   13c20:	9f 9d       	mul	r25, r15
   13c22:	f0 0d       	add	r31, r0
   13c24:	11 24       	eor	r1, r1
   13c26:	ec 50       	subi	r30, 0x0C	; 12
   13c28:	f1 4e       	sbci	r31, 0xE1	; 225
   13c2a:	c7 81       	ldd	r28, Z+7	; 0x07
   13c2c:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13c2e:	28 85       	ldd	r18, Y+8	; 0x08
   13c30:	39 85       	ldd	r19, Y+9	; 0x09
   13c32:	21 15       	cp	r18, r1
   13c34:	31 40       	sbci	r19, 0x01	; 1
   13c36:	a9 f0       	breq	.+42     	; 0x13c62 <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13c38:	80 e0       	ldi	r24, 0x00	; 0
   13c3a:	91 e0       	ldi	r25, 0x01	; 1
   13c3c:	99 87       	std	Y+9, r25	; 0x09
   13c3e:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13c40:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13c44:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13c48:	ed b7       	in	r30, 0x3d	; 61
   13c4a:	fe b7       	in	r31, 0x3e	; 62
   13c4c:	95 83       	std	Z+5, r25	; 0x05
   13c4e:	84 83       	std	Z+4, r24	; 0x04
   13c50:	8f ea       	ldi	r24, 0xAF	; 175
   13c52:	9a e1       	ldi	r25, 0x1A	; 26
   13c54:	a0 e0       	ldi	r26, 0x00	; 0
   13c56:	81 83       	std	Z+1, r24	; 0x01
   13c58:	92 83       	std	Z+2, r25	; 0x02
   13c5a:	a3 83       	std	Z+3, r26	; 0x03
   13c5c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
			ret = 0;
   13c60:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13c62:	9b e0       	ldi	r25, 0x0B	; 11
   13c64:	9e 9d       	mul	r25, r14
   13c66:	f0 01       	movw	r30, r0
   13c68:	9f 9d       	mul	r25, r15
   13c6a:	f0 0d       	add	r31, r0
   13c6c:	11 24       	eor	r1, r1
   13c6e:	ec 50       	subi	r30, 0x0C	; 12
   13c70:	f1 4e       	sbci	r31, 0xE1	; 225
   13c72:	4a 85       	ldd	r20, Y+10	; 0x0a
   13c74:	5b 85       	ldd	r21, Y+11	; 0x0b
   13c76:	2c 85       	ldd	r18, Y+12	; 0x0c
   13c78:	3d 85       	ldd	r19, Y+13	; 0x0d
   13c7a:	42 9f       	mul	r20, r18
   13c7c:	b0 01       	movw	r22, r0
   13c7e:	43 9f       	mul	r20, r19
   13c80:	70 0d       	add	r23, r0
   13c82:	52 9f       	mul	r21, r18
   13c84:	70 0d       	add	r23, r0
   13c86:	11 24       	eor	r1, r1
   13c88:	2e 85       	ldd	r18, Y+14	; 0x0e
   13c8a:	3f 85       	ldd	r19, Y+15	; 0x0f
   13c8c:	62 9f       	mul	r22, r18
   13c8e:	a0 01       	movw	r20, r0
   13c90:	63 9f       	mul	r22, r19
   13c92:	50 0d       	add	r21, r0
   13c94:	72 9f       	mul	r23, r18
   13c96:	50 0d       	add	r21, r0
   13c98:	11 24       	eor	r1, r1
   13c9a:	05 2e       	mov	r0, r21
   13c9c:	00 0c       	add	r0, r0
   13c9e:	66 0b       	sbc	r22, r22
   13ca0:	77 0b       	sbc	r23, r23
   13ca2:	43 83       	std	Z+3, r20	; 0x03
   13ca4:	54 83       	std	Z+4, r21	; 0x04
   13ca6:	65 83       	std	Z+5, r22	; 0x05
   13ca8:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13caa:	81 11       	cpse	r24, r1
   13cac:	7d cf       	rjmp	.-262    	; 0x13ba8 <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13cae:	84 e9       	ldi	r24, 0x94	; 148
   13cb0:	9a e1       	ldi	r25, 0x1A	; 26
   13cb2:	a0 e0       	ldi	r26, 0x00	; 0
   13cb4:	ed b7       	in	r30, 0x3d	; 61
   13cb6:	fe b7       	in	r31, 0x3e	; 62
   13cb8:	81 83       	std	Z+1, r24	; 0x01
   13cba:	92 83       	std	Z+2, r25	; 0x02
   13cbc:	a3 83       	std	Z+3, r26	; 0x03
   13cbe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
		display_mount(index);	
   13cc2:	8d 2d       	mov	r24, r13
   13cc4:	c4 de       	rcall	.-632    	; 0x13a4e <display_mount>
		free_device(index);
   13cc6:	8d 2d       	mov	r24, r13
   13cc8:	74 da       	rcall	.-2840   	; 0x131b2 <free_device>
   13cca:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13ccc:	cd b7       	in	r28, 0x3d	; 61
   13cce:	de b7       	in	r29, 0x3e	; 62
   13cd0:	25 96       	adiw	r28, 0x05	; 5
   13cd2:	e7 e0       	ldi	r30, 0x07	; 7
   13cd4:	0c 94 13 e7 	jmp	0x1ce26	; 0x1ce26 <__epilogue_restores__+0x16>

00013cd8 <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13cd8:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13cda:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13cdc:	8c 2f       	mov	r24, r28
   13cde:	30 df       	rcall	.-416    	; 0x13b40 <verify_device>
   13ce0:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13ce2:	cc 30       	cpi	r28, 0x0C	; 12
   13ce4:	d9 f7       	brne	.-10     	; 0x13cdc <verify_devices+0x4>
		verify_device(i);

}
   13ce6:	cf 91       	pop	r28
   13ce8:	08 95       	ret

00013cea <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13cea:	ae e1       	ldi	r26, 0x1E	; 30
   13cec:	b1 e0       	ldi	r27, 0x01	; 1
   13cee:	eb e7       	ldi	r30, 0x7B	; 123
   13cf0:	fe e9       	ldi	r31, 0x9E	; 158
   13cf2:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   13cf6:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13cf8:	76 db       	rcall	.-2324   	; 0x133e6 <init_Devices>

    printf("Reading: %s\n", name);
   13cfa:	ed b7       	in	r30, 0x3d	; 61
   13cfc:	fe b7       	in	r31, 0x3e	; 62
   13cfe:	15 83       	std	Z+5, r17	; 0x05
   13d00:	04 83       	std	Z+4, r16	; 0x04
   13d02:	8e ed       	ldi	r24, 0xDE	; 222
   13d04:	90 e2       	ldi	r25, 0x20	; 32
   13d06:	a0 e0       	ldi	r26, 0x00	; 0
   13d08:	81 83       	std	Z+1, r24	; 0x01
   13d0a:	92 83       	std	Z+2, r25	; 0x02
   13d0c:	a3 83       	std	Z+3, r26	; 0x03
   13d0e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    cfg = fopen(name, "rb");
   13d12:	6e ef       	ldi	r22, 0xFE	; 254
   13d14:	78 e0       	ldi	r23, 0x08	; 8
   13d16:	c8 01       	movw	r24, r16
   13d18:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <fopen>
   13d1c:	c5 5f       	subi	r28, 0xF5	; 245
   13d1e:	de 4f       	sbci	r29, 0xFE	; 254
   13d20:	99 83       	std	Y+1, r25	; 0x01
   13d22:	88 83       	st	Y, r24
   13d24:	cb 50       	subi	r28, 0x0B	; 11
   13d26:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13d28:	89 2b       	or	r24, r25
   13d2a:	09 f4       	brne	.+2      	; 0x13d2e <Read_Config+0x44>
   13d2c:	58 c0       	rjmp	.+176    	; 0x13dde <Read_Config+0xf4>
   13d2e:	21 2c       	mov	r2, r1
   13d30:	31 2c       	mov	r3, r1
   13d32:	c8 5f       	subi	r28, 0xF8	; 248
   13d34:	de 4f       	sbci	r29, 0xFE	; 254
   13d36:	18 82       	st	Y, r1
   13d38:	c8 50       	subi	r28, 0x08	; 8
   13d3a:	d1 40       	sbci	r29, 0x01	; 1
   13d3c:	41 2c       	mov	r4, r1
   13d3e:	51 2c       	mov	r5, r1
   13d40:	e1 2c       	mov	r14, r1
   13d42:	f1 2c       	mov	r15, r1
   13d44:	c7 5f       	subi	r28, 0xF7	; 247
   13d46:	de 4f       	sbci	r29, 0xFE	; 254
   13d48:	19 82       	std	Y+1, r1	; 0x01
   13d4a:	18 82       	st	Y, r1
   13d4c:	c9 50       	subi	r28, 0x09	; 9
   13d4e:	d1 40       	sbci	r29, 0x01	; 1
   13d50:	c1 2c       	mov	r12, r1
   13d52:	d1 2c       	mov	r13, r1
   13d54:	61 2c       	mov	r6, r1
   13d56:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13d58:	8d e2       	ldi	r24, 0x2D	; 45
   13d5a:	9e e1       	ldi	r25, 0x1E	; 30
   13d5c:	9c 01       	movw	r18, r24
   13d5e:	40 e0       	ldi	r20, 0x00	; 0
   13d60:	c3 5f       	subi	r28, 0xF3	; 243
   13d62:	de 4f       	sbci	r29, 0xFE	; 254
   13d64:	28 83       	st	Y, r18
   13d66:	39 83       	std	Y+1, r19	; 0x01
   13d68:	4a 83       	std	Y+2, r20	; 0x02
   13d6a:	cd 50       	subi	r28, 0x0D	; 13
   13d6c:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13d6e:	8f e4       	ldi	r24, 0x4F	; 79
   13d70:	9e e1       	ldi	r25, 0x1E	; 30
   13d72:	9c 01       	movw	r18, r24
   13d74:	40 e0       	ldi	r20, 0x00	; 0
   13d76:	c0 5f       	subi	r28, 0xF0	; 240
   13d78:	de 4f       	sbci	r29, 0xFE	; 254
   13d7a:	28 83       	st	Y, r18
   13d7c:	39 83       	std	Y+1, r19	; 0x01
   13d7e:	4a 83       	std	Y+2, r20	; 0x02
   13d80:	c0 51       	subi	r28, 0x10	; 16
   13d82:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13d84:	8f e7       	ldi	r24, 0x7F	; 127
   13d86:	9e e1       	ldi	r25, 0x1E	; 30
   13d88:	9c 01       	movw	r18, r24
   13d8a:	40 e0       	ldi	r20, 0x00	; 0
   13d8c:	cd 5e       	subi	r28, 0xED	; 237
   13d8e:	de 4f       	sbci	r29, 0xFE	; 254
   13d90:	28 83       	st	Y, r18
   13d92:	39 83       	std	Y+1, r19	; 0x01
   13d94:	4a 83       	std	Y+2, r20	; 0x02
   13d96:	c3 51       	subi	r28, 0x13	; 19
   13d98:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13d9a:	8e ea       	ldi	r24, 0xAE	; 174
   13d9c:	9e e1       	ldi	r25, 0x1E	; 30
   13d9e:	9c 01       	movw	r18, r24
   13da0:	40 e0       	ldi	r20, 0x00	; 0
   13da2:	ca 5e       	subi	r28, 0xEA	; 234
   13da4:	de 4f       	sbci	r29, 0xFE	; 254
   13da6:	28 83       	st	Y, r18
   13da8:	39 83       	std	Y+1, r19	; 0x01
   13daa:	4a 83       	std	Y+2, r20	; 0x02
   13dac:	c6 51       	subi	r28, 0x16	; 22
   13dae:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13db0:	8e ed       	ldi	r24, 0xDE	; 222
   13db2:	9e e1       	ldi	r25, 0x1E	; 30
   13db4:	9c 01       	movw	r18, r24
   13db6:	40 e0       	ldi	r20, 0x00	; 0
   13db8:	c7 5e       	subi	r28, 0xE7	; 231
   13dba:	de 4f       	sbci	r29, 0xFE	; 254
   13dbc:	28 83       	st	Y, r18
   13dbe:	39 83       	std	Y+1, r19	; 0x01
   13dc0:	4a 83       	std	Y+2, r20	; 0x02
   13dc2:	c9 51       	subi	r28, 0x19	; 25
   13dc4:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13dc6:	8c e0       	ldi	r24, 0x0C	; 12
   13dc8:	9f e1       	ldi	r25, 0x1F	; 31
   13dca:	9c 01       	movw	r18, r24
   13dcc:	40 e0       	ldi	r20, 0x00	; 0
   13dce:	c4 5e       	subi	r28, 0xE4	; 228
   13dd0:	de 4f       	sbci	r29, 0xFE	; 254
   13dd2:	28 83       	st	Y, r18
   13dd4:	39 83       	std	Y+1, r19	; 0x01
   13dd6:	4a 83       	std	Y+2, r20	; 0x02
   13dd8:	cc 51       	subi	r28, 0x1C	; 28
   13dda:	d1 40       	sbci	r29, 0x01	; 1
   13ddc:	26 c0       	rjmp	.+76     	; 0x13e2a <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13dde:	81 e5       	ldi	r24, 0x51	; 81
   13de0:	9e e0       	ldi	r25, 0x0E	; 14
   13de2:	0e 94 7b 78 	call	0xf0f6	; 0xf0f6 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13de6:	ed b7       	in	r30, 0x3d	; 61
   13de8:	fe b7       	in	r31, 0x3e	; 62
   13dea:	15 83       	std	Z+5, r17	; 0x05
   13dec:	04 83       	std	Z+4, r16	; 0x04
   13dee:	80 ec       	ldi	r24, 0xC0	; 192
   13df0:	90 e2       	ldi	r25, 0x20	; 32
   13df2:	a0 e0       	ldi	r26, 0x00	; 0
   13df4:	81 83       	std	Z+1, r24	; 0x01
   13df6:	92 83       	std	Z+2, r25	; 0x02
   13df8:	a3 83       	std	Z+3, r26	; 0x03
   13dfa:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        set_Config_Defaults();
        return(errors);
   13dfe:	81 e0       	ldi	r24, 0x01	; 1
   13e00:	90 e0       	ldi	r25, 0x00	; 0
   13e02:	70 c3       	rjmp	.+1760   	; 0x144e4 <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13e04:	ff ef       	ldi	r31, 0xFF	; 255
   13e06:	2f 1a       	sub	r2, r31
   13e08:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13e0a:	4e e7       	ldi	r20, 0x7E	; 126
   13e0c:	50 e0       	ldi	r21, 0x00	; 0
   13e0e:	9e 01       	movw	r18, r28
   13e10:	28 5f       	subi	r18, 0xF8	; 248
   13e12:	3f 4f       	sbci	r19, 0xFF	; 255
   13e14:	49 01       	movw	r8, r18
   13e16:	b9 01       	movw	r22, r18
   13e18:	ce 01       	movw	r24, r28
   13e1a:	88 57       	subi	r24, 0x78	; 120
   13e1c:	9f 4f       	sbci	r25, 0xFF	; 255
   13e1e:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   13e22:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e24:	88 85       	ldd	r24, Y+8	; 0x08
   13e26:	81 11       	cpse	r24, r1
   13e28:	10 c0       	rjmp	.+32     	; 0x13e4a <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13e2a:	c5 5f       	subi	r28, 0xF5	; 245
   13e2c:	de 4f       	sbci	r29, 0xFE	; 254
   13e2e:	48 81       	ld	r20, Y
   13e30:	59 81       	ldd	r21, Y+1	; 0x01
   13e32:	cb 50       	subi	r28, 0x0B	; 11
   13e34:	d1 40       	sbci	r29, 0x01	; 1
   13e36:	6e e7       	ldi	r22, 0x7E	; 126
   13e38:	70 e0       	ldi	r23, 0x00	; 0
   13e3a:	ce 01       	movw	r24, r28
   13e3c:	88 57       	subi	r24, 0x78	; 120
   13e3e:	9f 4f       	sbci	r25, 0xFF	; 255
   13e40:	0e 94 62 76 	call	0xecc4	; 0xecc4 <fgets>
   13e44:	89 2b       	or	r24, r25
   13e46:	f1 f6       	brne	.-68     	; 0x13e04 <Read_Config+0x11a>
   13e48:	0d c3       	rjmp	.+1562   	; 0x14464 <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e4a:	83 32       	cpi	r24, 0x23	; 35
   13e4c:	71 f3       	breq	.-36     	; 0x13e2a <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13e4e:	c4 01       	movw	r24, r8
   13e50:	0e 94 fe 92 	call	0x125fc	; 0x125fc <tok_index>
   13e54:	8f 3f       	cpi	r24, 0xFF	; 255
   13e56:	49 f4       	brne	.+18     	; 0x13e6a <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13e58:	ed b7       	in	r30, 0x3d	; 61
   13e5a:	fe b7       	in	r31, 0x3e	; 62
   13e5c:	37 82       	std	Z+7, r3	; 0x07
   13e5e:	26 82       	std	Z+6, r2	; 0x06
   13e60:	95 82       	std	Z+5, r9	; 0x05
   13e62:	84 82       	std	Z+4, r8	; 0x04
   13e64:	8e e9       	ldi	r24, 0x9E	; 158
   13e66:	90 e2       	ldi	r25, 0x20	; 32
   13e68:	c4 c0       	rjmp	.+392    	; 0x13ff2 <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13e6a:	24 e0       	ldi	r18, 0x04	; 4
   13e6c:	82 02       	muls	r24, r18
   13e6e:	f0 01       	movw	r30, r0
   13e70:	11 24       	eor	r1, r1
   13e72:	ec 53       	subi	r30, 0x3C	; 60
   13e74:	fe 4f       	sbci	r31, 0xFE	; 254
   13e76:	02 81       	ldd	r16, Z+2	; 0x02
   13e78:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13e7a:	4e e7       	ldi	r20, 0x7E	; 126
   13e7c:	50 e0       	ldi	r21, 0x00	; 0
   13e7e:	b4 01       	movw	r22, r8
   13e80:	c5 01       	movw	r24, r10
   13e82:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   13e86:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13e88:	64 e6       	ldi	r22, 0x64	; 100
   13e8a:	7e e0       	ldi	r23, 0x0E	; 14
   13e8c:	c4 01       	movw	r24, r8
   13e8e:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   13e92:	89 2b       	or	r24, r25
   13e94:	39 f0       	breq	.+14     	; 0x13ea4 <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13e96:	4e e7       	ldi	r20, 0x7E	; 126
   13e98:	50 e0       	ldi	r21, 0x00	; 0
   13e9a:	b4 01       	movw	r22, r8
   13e9c:	c5 01       	movw	r24, r10
   13e9e:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   13ea2:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13ea4:	c4 01       	movw	r24, r8
   13ea6:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13eaa:	01 31       	cpi	r16, 0x11	; 17
   13eac:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13eae:	19 f4       	brne	.+6      	; 0x13eb6 <Read_Config+0x1cc>
   13eb0:	cb da       	rcall	.-2666   	; 0x13448 <pop_state>
   13eb2:	3c 01       	movw	r6, r24
            continue;
   13eb4:	ba cf       	rjmp	.-140    	; 0x13e2a <Read_Config+0x140>
        }

        switch(state)
   13eb6:	30 e1       	ldi	r19, 0x10	; 16
   13eb8:	63 16       	cp	r6, r19
   13eba:	71 04       	cpc	r7, r1
   13ebc:	08 f0       	brcs	.+2      	; 0x13ec0 <Read_Config+0x1d6>
   13ebe:	bc c2       	rjmp	.+1400   	; 0x14438 <Read_Config+0x74e>
   13ec0:	f3 01       	movw	r30, r6
   13ec2:	ea 53       	subi	r30, 0x3A	; 58
   13ec4:	ff 4f       	sbci	r31, 0xFF	; 255
   13ec6:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13eca:	0e 30       	cpi	r16, 0x0E	; 14
   13ecc:	11 05       	cpc	r17, r1
   13ece:	09 f4       	brne	.+2      	; 0x13ed2 <Read_Config+0x1e8>
   13ed0:	83 c0       	rjmp	.+262    	; 0x13fd8 <Read_Config+0x2ee>
   13ed2:	44 f4       	brge	.+16     	; 0x13ee4 <Read_Config+0x1fa>
   13ed4:	02 30       	cpi	r16, 0x02	; 2
   13ed6:	11 05       	cpc	r17, r1
   13ed8:	09 f4       	brne	.+2      	; 0x13edc <Read_Config+0x1f2>
   13eda:	42 c0       	rjmp	.+132    	; 0x13f60 <Read_Config+0x276>
   13edc:	0c 30       	cpi	r16, 0x0C	; 12
   13ede:	11 05       	cpc	r17, r1
   13ee0:	19 f1       	breq	.+70     	; 0x13f28 <Read_Config+0x23e>
   13ee2:	7f c0       	rjmp	.+254    	; 0x13fe2 <Read_Config+0x2f8>
   13ee4:	03 32       	cpi	r16, 0x23	; 35
   13ee6:	11 05       	cpc	r17, r1
   13ee8:	f9 f0       	breq	.+62     	; 0x13f28 <Read_Config+0x23e>
   13eea:	04 32       	cpi	r16, 0x24	; 36
   13eec:	11 05       	cpc	r17, r1
   13eee:	29 f0       	breq	.+10     	; 0x13efa <Read_Config+0x210>
   13ef0:	00 32       	cpi	r16, 0x20	; 32
   13ef2:	11 05       	cpc	r17, r1
   13ef4:	09 f0       	breq	.+2      	; 0x13ef8 <Read_Config+0x20e>
   13ef6:	75 c0       	rjmp	.+234    	; 0x13fe2 <Read_Config+0x2f8>
   13ef8:	4f c0       	rjmp	.+158    	; 0x13f98 <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13efa:	80 e0       	ldi	r24, 0x00	; 0
   13efc:	90 e0       	ldi	r25, 0x00	; 0
   13efe:	8b da       	rcall	.-2794   	; 0x13416 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13f00:	82 e0       	ldi	r24, 0x02	; 2
   13f02:	90 e0       	ldi	r25, 0x00	; 0
   13f04:	b7 d9       	rcall	.-3218   	; 0x13274 <alloc_device>
   13f06:	c8 5f       	subi	r28, 0xF8	; 248
   13f08:	de 4f       	sbci	r29, 0xFE	; 254
   13f0a:	88 83       	st	Y, r24
   13f0c:	c8 50       	subi	r28, 0x08	; 8
   13f0e:	d1 40       	sbci	r29, 0x01	; 1
   13f10:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f12:	09 f4       	brne	.+2      	; 0x13f16 <Read_Config+0x22c>
   13f14:	8a cf       	rjmp	.-236    	; 0x13e2a <Read_Config+0x140>
   13f16:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13f18:	84 02       	muls	r24, r20
   13f1a:	f0 01       	movw	r30, r0
   13f1c:	11 24       	eor	r1, r1
   13f1e:	ec 50       	subi	r30, 0x0C	; 12
   13f20:	f1 4e       	sbci	r31, 0xE1	; 225
   13f22:	e7 80       	ldd	r14, Z+7	; 0x07
   13f24:	f0 84       	ldd	r15, Z+8	; 0x08
   13f26:	18 c0       	rjmp	.+48     	; 0x13f58 <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13f28:	80 e0       	ldi	r24, 0x00	; 0
   13f2a:	90 e0       	ldi	r25, 0x00	; 0
   13f2c:	74 da       	rcall	.-2840   	; 0x13416 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13f2e:	83 e0       	ldi	r24, 0x03	; 3
   13f30:	90 e0       	ldi	r25, 0x00	; 0
   13f32:	a0 d9       	rcall	.-3264   	; 0x13274 <alloc_device>
   13f34:	c8 5f       	subi	r28, 0xF8	; 248
   13f36:	de 4f       	sbci	r29, 0xFE	; 254
   13f38:	88 83       	st	Y, r24
   13f3a:	c8 50       	subi	r28, 0x08	; 8
   13f3c:	d1 40       	sbci	r29, 0x01	; 1
   13f3e:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f40:	09 f4       	brne	.+2      	; 0x13f44 <Read_Config+0x25a>
   13f42:	73 cf       	rjmp	.-282    	; 0x13e2a <Read_Config+0x140>
   13f44:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13f46:	89 02       	muls	r24, r25
   13f48:	f0 01       	movw	r30, r0
   13f4a:	11 24       	eor	r1, r1
   13f4c:	ec 50       	subi	r30, 0x0C	; 12
   13f4e:	f1 4e       	sbci	r31, 0xE1	; 225
   13f50:	e7 80       	ldd	r14, Z+7	; 0x07
   13f52:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13f54:	b4 01       	movw	r22, r8
   13f56:	19 db       	rcall	.-2510   	; 0x1358a <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13f58:	66 24       	eor	r6, r6
   13f5a:	63 94       	inc	r6
   13f5c:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13f5e:	65 cf       	rjmp	.-310    	; 0x13e2a <Read_Config+0x140>
   13f60:	80 e0       	ldi	r24, 0x00	; 0
   13f62:	90 e0       	ldi	r25, 0x00	; 0
   13f64:	58 da       	rcall	.-2896   	; 0x13416 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13f66:	81 e0       	ldi	r24, 0x01	; 1
   13f68:	90 e0       	ldi	r25, 0x00	; 0
   13f6a:	84 d9       	rcall	.-3320   	; 0x13274 <alloc_device>
   13f6c:	c8 5f       	subi	r28, 0xF8	; 248
   13f6e:	de 4f       	sbci	r29, 0xFE	; 254
   13f70:	88 83       	st	Y, r24
   13f72:	c8 50       	subi	r28, 0x08	; 8
   13f74:	d1 40       	sbci	r29, 0x01	; 1
   13f76:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f78:	09 f4       	brne	.+2      	; 0x13f7c <Read_Config+0x292>
   13f7a:	57 cf       	rjmp	.-338    	; 0x13e2a <Read_Config+0x140>
   13f7c:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13f7e:	8a 02       	muls	r24, r26
   13f80:	f0 01       	movw	r30, r0
   13f82:	11 24       	eor	r1, r1
   13f84:	ec 50       	subi	r30, 0x0C	; 12
   13f86:	f1 4e       	sbci	r31, 0xE1	; 225
   13f88:	47 80       	ldd	r4, Z+7	; 0x07
   13f8a:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13f8c:	b4 01       	movw	r22, r8
   13f8e:	fd da       	rcall	.-2566   	; 0x1358a <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13f90:	aa e0       	ldi	r26, 0x0A	; 10
   13f92:	6a 2e       	mov	r6, r26
   13f94:	71 2c       	mov	r7, r1
   13f96:	49 cf       	rjmp	.-366    	; 0x13e2a <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13f98:	80 e0       	ldi	r24, 0x00	; 0
   13f9a:	90 e0       	ldi	r25, 0x00	; 0
   13f9c:	3c da       	rcall	.-2952   	; 0x13416 <push_state>
   13f9e:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13fa0:	90 e0       	ldi	r25, 0x00	; 0
   13fa2:	68 d9       	rcall	.-3376   	; 0x13274 <alloc_device>
   13fa4:	c8 5f       	subi	r28, 0xF8	; 248
   13fa6:	de 4f       	sbci	r29, 0xFE	; 254
   13fa8:	88 83       	st	Y, r24
   13faa:	c8 50       	subi	r28, 0x08	; 8
   13fac:	d1 40       	sbci	r29, 0x01	; 1
   13fae:	8f 3f       	cpi	r24, 0xFF	; 255
   13fb0:	09 f4       	brne	.+2      	; 0x13fb4 <Read_Config+0x2ca>
                        if(index == -1)
   13fb2:	3b cf       	rjmp	.-394    	; 0x13e2a <Read_Config+0x140>
   13fb4:	bb e0       	ldi	r27, 0x0B	; 11
   13fb6:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13fb8:	f0 01       	movw	r30, r0
   13fba:	11 24       	eor	r1, r1
   13fbc:	ec 50       	subi	r30, 0x0C	; 12
   13fbe:	f1 4e       	sbci	r31, 0xE1	; 225
   13fc0:	27 81       	ldd	r18, Z+7	; 0x07
   13fc2:	30 85       	ldd	r19, Z+8	; 0x08
   13fc4:	c7 5f       	subi	r28, 0xF7	; 247
   13fc6:	de 4f       	sbci	r29, 0xFE	; 254
   13fc8:	39 83       	std	Y+1, r19	; 0x01
   13fca:	28 83       	st	Y, r18
   13fcc:	c9 50       	subi	r28, 0x09	; 9
   13fce:	d1 40       	sbci	r29, 0x01	; 1
   13fd0:	fe e0       	ldi	r31, 0x0E	; 14
   13fd2:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13fd4:	71 2c       	mov	r7, r1
   13fd6:	29 cf       	rjmp	.-430    	; 0x13e2a <Read_Config+0x140>
   13fd8:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13fdc:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13fe0:	24 cf       	rjmp	.-440    	; 0x13e2a <Read_Config+0x140>
   13fe2:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13fe4:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13fe6:	37 82       	std	Z+7, r3	; 0x07
   13fe8:	26 82       	std	Z+6, r2	; 0x06
   13fea:	b5 82       	std	Z+5, r11	; 0x05
   13fec:	a4 82       	std	Z+4, r10	; 0x04
   13fee:	8c e7       	ldi	r24, 0x7C	; 124
   13ff0:	90 e2       	ldi	r25, 0x20	; 32
   13ff2:	a0 e0       	ldi	r26, 0x00	; 0
   13ff4:	81 83       	std	Z+1, r24	; 0x01
   13ff6:	92 83       	std	Z+2, r25	; 0x02
   13ff8:	a3 83       	std	Z+3, r26	; 0x03
   13ffa:	2e c2       	rjmp	.+1116   	; 0x14458 <Read_Config+0x76e>
   13ffc:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13ffe:	11 05       	cpc	r17, r1
   14000:	39 f4       	brne	.+14     	; 0x14010 <Read_Config+0x326>
   14002:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   14004:	90 e0       	ldi	r25, 0x00	; 0
   14006:	07 da       	rcall	.-3058   	; 0x13416 <push_state>
   14008:	ef e0       	ldi	r30, 0x0F	; 15
   1400a:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   1400c:	71 2c       	mov	r7, r1
   1400e:	0d cf       	rjmp	.-486    	; 0x13e2a <Read_Config+0x140>
   14010:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   14012:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   14014:	37 82       	std	Z+7, r3	; 0x07
   14016:	26 82       	std	Z+6, r2	; 0x06
   14018:	b5 82       	std	Z+5, r11	; 0x05
   1401a:	a4 82       	std	Z+4, r10	; 0x04
   1401c:	82 e5       	ldi	r24, 0x52	; 82
   1401e:	90 e2       	ldi	r25, 0x20	; 32
   14020:	e8 cf       	rjmp	.-48     	; 0x13ff2 <Read_Config+0x308>
   14022:	01 30       	cpi	r16, 0x01	; 1
   14024:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   14026:	c1 f4       	brne	.+48     	; 0x14058 <Read_Config+0x36e>
   14028:	c8 5f       	subi	r28, 0xF8	; 248
   1402a:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   1402c:	28 81       	ld	r18, Y
   1402e:	c8 50       	subi	r28, 0x08	; 8
   14030:	d1 40       	sbci	r29, 0x01	; 1
   14032:	3b e0       	ldi	r19, 0x0B	; 11
   14034:	23 02       	muls	r18, r19
   14036:	f0 01       	movw	r30, r0
   14038:	11 24       	eor	r1, r1
   1403a:	ec 50       	subi	r30, 0x0C	; 12
   1403c:	f1 4e       	sbci	r31, 0xE1	; 225
   1403e:	61 83       	std	Z+1, r22	; 0x01
   14040:	c7 5f       	subi	r28, 0xF7	; 247
   14042:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   14044:	a8 81       	ld	r26, Y
   14046:	b9 81       	ldd	r27, Y+1	; 0x01
   14048:	c9 50       	subi	r28, 0x09	; 9
   1404a:	d1 40       	sbci	r29, 0x01	; 1
   1404c:	6c 93       	st	X, r22
   1404e:	8f ef       	ldi	r24, 0xFF	; 255
   14050:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   14052:	fd 01       	movw	r30, r26
   14054:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   14056:	e9 ce       	rjmp	.-558    	; 0x13e2a <Read_Config+0x140>
   14058:	ed b7       	in	r30, 0x3d	; 61
   1405a:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1405c:	37 82       	std	Z+7, r3	; 0x07
   1405e:	26 82       	std	Z+6, r2	; 0x06
   14060:	b5 82       	std	Z+5, r11	; 0x05
   14062:	a4 82       	std	Z+4, r10	; 0x04
   14064:	81 e2       	ldi	r24, 0x21	; 33
   14066:	90 e2       	ldi	r25, 0x20	; 32
   14068:	c4 cf       	rjmp	.-120    	; 0x13ff2 <Read_Config+0x308>
   1406a:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1406c:	11 05       	cpc	r17, r1
   1406e:	d9 f0       	breq	.+54     	; 0x140a6 <Read_Config+0x3bc>
   14070:	6c f4       	brge	.+26     	; 0x1408c <Read_Config+0x3a2>
   14072:	09 30       	cpi	r16, 0x09	; 9
   14074:	11 05       	cpc	r17, r1
   14076:	f1 f0       	breq	.+60     	; 0x140b4 <Read_Config+0x3ca>
   14078:	0b 30       	cpi	r16, 0x0B	; 11
   1407a:	11 05       	cpc	r17, r1
   1407c:	49 f5       	brne	.+82     	; 0x140d0 <Read_Config+0x3e6>
   1407e:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   14080:	90 e0       	ldi	r25, 0x00	; 0
   14082:	c9 d9       	rcall	.-3182   	; 0x13416 <push_state>
   14084:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   14086:	65 2e       	mov	r6, r21
   14088:	71 2c       	mov	r7, r1
   1408a:	cf ce       	rjmp	.-610    	; 0x13e2a <Read_Config+0x140>
                        break;
   1408c:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1408e:	11 05       	cpc	r17, r1
   14090:	c1 f0       	breq	.+48     	; 0x140c2 <Read_Config+0x3d8>
   14092:	0a 32       	cpi	r16, 0x2A	; 42
   14094:	11 05       	cpc	r17, r1
   14096:	e1 f4       	brne	.+56     	; 0x140d0 <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   14098:	81 e0       	ldi	r24, 0x01	; 1
   1409a:	90 e0       	ldi	r25, 0x00	; 0
   1409c:	bc d9       	rcall	.-3208   	; 0x13416 <push_state>
                        state = SS80_VOLUME;
   1409e:	36 e0       	ldi	r19, 0x06	; 6
   140a0:	63 2e       	mov	r6, r19
   140a2:	71 2c       	mov	r7, r1
                        break;
   140a4:	c2 ce       	rjmp	.-636    	; 0x13e2a <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   140a6:	81 e0       	ldi	r24, 0x01	; 1
   140a8:	90 e0       	ldi	r25, 0x00	; 0
   140aa:	b5 d9       	rcall	.-3222   	; 0x13416 <push_state>
                        state = SS80_HEADER;
   140ac:	72 e0       	ldi	r23, 0x02	; 2
   140ae:	67 2e       	mov	r6, r23
   140b0:	71 2c       	mov	r7, r1
                        break;
   140b2:	bb ce       	rjmp	.-650    	; 0x13e2a <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   140b4:	81 e0       	ldi	r24, 0x01	; 1
   140b6:	90 e0       	ldi	r25, 0x00	; 0
   140b8:	ae d9       	rcall	.-3236   	; 0x13416 <push_state>
   140ba:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   140bc:	66 2e       	mov	r6, r22
   140be:	71 2c       	mov	r7, r1
   140c0:	b4 ce       	rjmp	.-664    	; 0x13e2a <Read_Config+0x140>
                        break;
   140c2:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   140c4:	90 e0       	ldi	r25, 0x00	; 0
   140c6:	a7 d9       	rcall	.-3250   	; 0x13416 <push_state>
   140c8:	45 e0       	ldi	r20, 0x05	; 5
   140ca:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   140cc:	71 2c       	mov	r7, r1
   140ce:	ad ce       	rjmp	.-678    	; 0x13e2a <Read_Config+0x140>
   140d0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   140d2:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   140d4:	37 82       	std	Z+7, r3	; 0x07
   140d6:	26 82       	std	Z+6, r2	; 0x06
   140d8:	b5 82       	std	Z+5, r11	; 0x05
   140da:	a4 82       	std	Z+4, r10	; 0x04
   140dc:	84 ef       	ldi	r24, 0xF4	; 244
   140de:	9f e1       	ldi	r25, 0x1F	; 31
   140e0:	88 cf       	rjmp	.-240    	; 0x13ff2 <Read_Config+0x308>
   140e2:	02 31       	cpi	r16, 0x12	; 18
   140e4:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   140e6:	11 f1       	breq	.+68     	; 0x1412c <Read_Config+0x442>
   140e8:	0f 31       	cpi	r16, 0x1F	; 31
   140ea:	11 05       	cpc	r17, r1
   140ec:	89 f0       	breq	.+34     	; 0x14110 <Read_Config+0x426>
   140ee:	01 30       	cpi	r16, 0x01	; 1
   140f0:	11 05       	cpc	r17, r1
   140f2:	09 f5       	brne	.+66     	; 0x14136 <Read_Config+0x44c>
   140f4:	c8 5f       	subi	r28, 0xF8	; 248
   140f6:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   140f8:	28 81       	ld	r18, Y
   140fa:	c8 50       	subi	r28, 0x08	; 8
   140fc:	d1 40       	sbci	r29, 0x01	; 1
   140fe:	3b e0       	ldi	r19, 0x0B	; 11
   14100:	23 02       	muls	r18, r19
   14102:	f0 01       	movw	r30, r0
   14104:	11 24       	eor	r1, r1
   14106:	ec 50       	subi	r30, 0x0C	; 12
   14108:	f1 4e       	sbci	r31, 0xE1	; 225
   1410a:	61 83       	std	Z+1, r22	; 0x01
   1410c:	d7 01       	movw	r26, r14
   1410e:	33 c1       	rjmp	.+614    	; 0x14376 <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   14110:	c8 5f       	subi	r28, 0xF8	; 248
   14112:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   14114:	b8 81       	ld	r27, Y
   14116:	c8 50       	subi	r28, 0x08	; 8
   14118:	d1 40       	sbci	r29, 0x01	; 1
   1411a:	2b e0       	ldi	r18, 0x0B	; 11
   1411c:	b2 02       	muls	r27, r18
   1411e:	f0 01       	movw	r30, r0
   14120:	11 24       	eor	r1, r1
   14122:	ec 50       	subi	r30, 0x0C	; 12
   14124:	f1 4e       	sbci	r31, 0xE1	; 225
   14126:	62 83       	std	Z+2, r22	; 0x02
   14128:	f7 01       	movw	r30, r14
   1412a:	27 c1       	rjmp	.+590    	; 0x1437a <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   1412c:	c4 01       	movw	r24, r8
   1412e:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   14132:	f7 01       	movw	r30, r14
   14134:	28 c1       	rjmp	.+592    	; 0x14386 <Read_Config+0x69c>
   14136:	ed b7       	in	r30, 0x3d	; 61
   14138:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1413a:	37 82       	std	Z+7, r3	; 0x07
   1413c:	26 82       	std	Z+6, r2	; 0x06
   1413e:	b5 82       	std	Z+5, r11	; 0x05
   14140:	a4 82       	std	Z+4, r10	; 0x04
   14142:	86 ec       	ldi	r24, 0xC6	; 198
   14144:	9f e1       	ldi	r25, 0x1F	; 31
   14146:	55 cf       	rjmp	.-342    	; 0x13ff2 <Read_Config+0x308>
   14148:	07 31       	cpi	r16, 0x17	; 23
   1414a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   1414c:	21 f4       	brne	.+8      	; 0x14156 <Read_Config+0x46c>
   1414e:	96 2f       	mov	r25, r22
   14150:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   14152:	f7 01       	movw	r30, r14
   14154:	2f c1       	rjmp	.+606    	; 0x143b4 <Read_Config+0x6ca>
   14156:	ed b7       	in	r30, 0x3d	; 61
   14158:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1415a:	37 82       	std	Z+7, r3	; 0x07
   1415c:	26 82       	std	Z+6, r2	; 0x06
   1415e:	b5 82       	std	Z+5, r11	; 0x05
   14160:	a4 82       	std	Z+4, r10	; 0x04
   14162:	88 e9       	ldi	r24, 0x98	; 152
   14164:	9f e1       	ldi	r25, 0x1F	; 31
   14166:	45 cf       	rjmp	.-374    	; 0x13ff2 <Read_Config+0x308>
   14168:	06 32       	cpi	r16, 0x26	; 38
   1416a:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   1416c:	71 f0       	breq	.+28     	; 0x1418a <Read_Config+0x4a0>
   1416e:	08 32       	cpi	r16, 0x28	; 40
   14170:	11 05       	cpc	r17, r1
   14172:	39 f0       	breq	.+14     	; 0x14182 <Read_Config+0x498>
   14174:	05 32       	cpi	r16, 0x25	; 37
   14176:	11 05       	cpc	r17, r1
   14178:	59 f4       	brne	.+22     	; 0x14190 <Read_Config+0x4a6>
   1417a:	96 2f       	mov	r25, r22
   1417c:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   1417e:	f7 01       	movw	r30, r14
   14180:	42 c1       	rjmp	.+644    	; 0x14406 <Read_Config+0x71c>
   14182:	96 2f       	mov	r25, r22
   14184:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   14186:	f7 01       	movw	r30, r14
   14188:	3b c1       	rjmp	.+630    	; 0x14400 <Read_Config+0x716>
   1418a:	f7 01       	movw	r30, r14
   1418c:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   1418e:	4d ce       	rjmp	.-870    	; 0x13e2a <Read_Config+0x140>
   14190:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14192:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   14194:	37 82       	std	Z+7, r3	; 0x07
   14196:	26 82       	std	Z+6, r2	; 0x06
   14198:	b5 82       	std	Z+5, r11	; 0x05
   1419a:	a4 82       	std	Z+4, r10	; 0x04
   1419c:	86 e6       	ldi	r24, 0x66	; 102
   1419e:	9f e1       	ldi	r25, 0x1F	; 31
   141a0:	28 cf       	rjmp	.-432    	; 0x13ff2 <Read_Config+0x308>
   141a2:	0a 30       	cpi	r16, 0x0A	; 10
   141a4:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141a6:	09 f4       	brne	.+2      	; 0x141aa <Read_Config+0x4c0>
   141a8:	45 c0       	rjmp	.+138    	; 0x14234 <Read_Config+0x54a>
   141aa:	d4 f4       	brge	.+52     	; 0x141e0 <Read_Config+0x4f6>
   141ac:	05 30       	cpi	r16, 0x05	; 5
   141ae:	11 05       	cpc	r17, r1
   141b0:	d1 f1       	breq	.+116    	; 0x14226 <Read_Config+0x53c>
   141b2:	64 f4       	brge	.+24     	; 0x141cc <Read_Config+0x4e2>
   141b4:	01 15       	cp	r16, r1
   141b6:	11 05       	cpc	r17, r1
   141b8:	09 f4       	brne	.+2      	; 0x141bc <Read_Config+0x4d2>
   141ba:	40 c0       	rjmp	.+128    	; 0x1423c <Read_Config+0x552>
   141bc:	04 30       	cpi	r16, 0x04	; 4
   141be:	11 05       	cpc	r17, r1
   141c0:	09 f0       	breq	.+2      	; 0x141c4 <Read_Config+0x4da>
   141c2:	46 c0       	rjmp	.+140    	; 0x14250 <Read_Config+0x566>
   141c4:	f7 01       	movw	r30, r14
   141c6:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   141c8:	77 8b       	std	Z+23, r23	; 0x17
   141ca:	2f ce       	rjmp	.-930    	; 0x13e2a <Read_Config+0x140>
   141cc:	06 30       	cpi	r16, 0x06	; 6
                        break;
   141ce:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141d0:	71 f1       	breq	.+92     	; 0x1422e <Read_Config+0x544>
   141d2:	07 30       	cpi	r16, 0x07	; 7
   141d4:	11 05       	cpc	r17, r1
   141d6:	e1 f5       	brne	.+120    	; 0x14250 <Read_Config+0x566>
   141d8:	f7 01       	movw	r30, r14
   141da:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   141dc:	73 8b       	std	Z+19, r23	; 0x13
   141de:	25 ce       	rjmp	.-950    	; 0x13e2a <Read_Config+0x140>
   141e0:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   141e2:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141e4:	79 f1       	breq	.+94     	; 0x14244 <Read_Config+0x55a>
   141e6:	4c f4       	brge	.+18     	; 0x141fa <Read_Config+0x510>
   141e8:	0f 30       	cpi	r16, 0x0F	; 15
   141ea:	11 05       	cpc	r17, r1
   141ec:	b1 f0       	breq	.+44     	; 0x1421a <Read_Config+0x530>
   141ee:	03 31       	cpi	r16, 0x13	; 19
   141f0:	11 05       	cpc	r17, r1
   141f2:	71 f5       	brne	.+92     	; 0x14250 <Read_Config+0x566>
   141f4:	f7 01       	movw	r30, r14
   141f6:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   141f8:	18 ce       	rjmp	.-976    	; 0x13e2a <Read_Config+0x140>
   141fa:	01 32       	cpi	r16, 0x21	; 33
                        break;
   141fc:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141fe:	29 f1       	breq	.+74     	; 0x1424a <Read_Config+0x560>
   14200:	09 32       	cpi	r16, 0x29	; 41
   14202:	11 05       	cpc	r17, r1
   14204:	39 f0       	breq	.+14     	; 0x14214 <Read_Config+0x52a>
   14206:	0e 31       	cpi	r16, 0x1E	; 30
   14208:	11 05       	cpc	r17, r1
   1420a:	11 f5       	brne	.+68     	; 0x14250 <Read_Config+0x566>
   1420c:	f7 01       	movw	r30, r14
   1420e:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   14210:	73 8f       	std	Z+27, r23	; 0x1b
   14212:	0b ce       	rjmp	.-1002   	; 0x13e2a <Read_Config+0x140>
   14214:	f7 01       	movw	r30, r14
                        break;
   14216:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   14218:	08 ce       	rjmp	.-1008   	; 0x13e2a <Read_Config+0x140>
   1421a:	f7 01       	movw	r30, r14
                        break;
   1421c:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   1421e:	77 87       	std	Z+15, r23	; 0x0f
   14220:	80 8b       	std	Z+16, r24	; 0x10
   14222:	91 8b       	std	Z+17, r25	; 0x11
   14224:	02 ce       	rjmp	.-1020   	; 0x13e2a <Read_Config+0x140>
   14226:	61 70       	andi	r22, 0x01	; 1
                        break;
   14228:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   1422a:	64 8b       	std	Z+20, r22	; 0x14
   1422c:	fe cd       	rjmp	.-1028   	; 0x13e2a <Read_Config+0x140>
   1422e:	f7 01       	movw	r30, r14
                        break;
   14230:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   14232:	fb cd       	rjmp	.-1034   	; 0x13e2a <Read_Config+0x140>
   14234:	f7 01       	movw	r30, r14
                        break;
   14236:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   14238:	71 8f       	std	Z+25, r23	; 0x19
   1423a:	f7 cd       	rjmp	.-1042   	; 0x13e2a <Read_Config+0x140>
   1423c:	f7 01       	movw	r30, r14
                        break;
   1423e:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   14240:	75 8f       	std	Z+29, r23	; 0x1d
   14242:	f3 cd       	rjmp	.-1050   	; 0x13e2a <Read_Config+0x140>
   14244:	f7 01       	movw	r30, r14
                        break;
   14246:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   14248:	f0 cd       	rjmp	.-1056   	; 0x13e2a <Read_Config+0x140>
   1424a:	f7 01       	movw	r30, r14
                        break;
   1424c:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   1424e:	ed cd       	rjmp	.-1062   	; 0x13e2a <Read_Config+0x140>
   14250:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14252:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   14254:	37 82       	std	Z+7, r3	; 0x07
   14256:	26 82       	std	Z+6, r2	; 0x06
   14258:	b5 82       	std	Z+5, r11	; 0x05
   1425a:	a4 82       	std	Z+4, r10	; 0x04
   1425c:	8a e3       	ldi	r24, 0x3A	; 58
   1425e:	9f e1       	ldi	r25, 0x1F	; 31
   14260:	c8 ce       	rjmp	.-624    	; 0x13ff2 <Read_Config+0x308>
   14262:	0a 31       	cpi	r16, 0x1A	; 26
   14264:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14266:	b9 f0       	breq	.+46     	; 0x14296 <Read_Config+0x5ac>
   14268:	64 f4       	brge	.+24     	; 0x14282 <Read_Config+0x598>
   1426a:	08 31       	cpi	r16, 0x18	; 24
   1426c:	11 05       	cpc	r17, r1
   1426e:	e1 f0       	breq	.+56     	; 0x142a8 <Read_Config+0x5be>
   14270:	09 31       	cpi	r16, 0x19	; 25
   14272:	11 05       	cpc	r17, r1
   14274:	e1 f4       	brne	.+56     	; 0x142ae <Read_Config+0x5c4>
   14276:	f7 01       	movw	r30, r14
   14278:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   1427a:	71 a7       	std	Z+41, r23	; 0x29
   1427c:	82 a7       	std	Z+42, r24	; 0x2a
   1427e:	93 a7       	std	Z+43, r25	; 0x2b
   14280:	d4 cd       	rjmp	.-1112   	; 0x13e2a <Read_Config+0x140>
   14282:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   14284:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14286:	69 f0       	breq	.+26     	; 0x142a2 <Read_Config+0x5b8>
   14288:	0d 31       	cpi	r16, 0x1D	; 29
   1428a:	11 05       	cpc	r17, r1
   1428c:	81 f4       	brne	.+32     	; 0x142ae <Read_Config+0x5c4>
   1428e:	f7 01       	movw	r30, r14
   14290:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   14292:	77 a3       	std	Z+39, r23	; 0x27
   14294:	ca cd       	rjmp	.-1132   	; 0x13e2a <Read_Config+0x140>
   14296:	f7 01       	movw	r30, r14
                        break;
   14298:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   1429a:	72 a3       	std	Z+34, r23	; 0x22
   1429c:	83 a3       	std	Z+35, r24	; 0x23
   1429e:	94 a3       	std	Z+36, r25	; 0x24
   142a0:	c4 cd       	rjmp	.-1144   	; 0x13e2a <Read_Config+0x140>
   142a2:	f7 01       	movw	r30, r14
                        break;
   142a4:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   142a6:	c1 cd       	rjmp	.-1150   	; 0x13e2a <Read_Config+0x140>
   142a8:	f7 01       	movw	r30, r14
                        break;
   142aa:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   142ac:	be cd       	rjmp	.-1156   	; 0x13e2a <Read_Config+0x140>
   142ae:	ed b7       	in	r30, 0x3d	; 61
                        break;
   142b0:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   142b2:	37 82       	std	Z+7, r3	; 0x07
   142b4:	26 82       	std	Z+6, r2	; 0x06
   142b6:	b5 82       	std	Z+5, r11	; 0x05
   142b8:	a4 82       	std	Z+4, r10	; 0x04
   142ba:	c4 5e       	subi	r28, 0xE4	; 228
   142bc:	de 4f       	sbci	r29, 0xFE	; 254
   142be:	28 81       	ld	r18, Y
   142c0:	39 81       	ldd	r19, Y+1	; 0x01
   142c2:	4a 81       	ldd	r20, Y+2	; 0x02
   142c4:	cc 51       	subi	r28, 0x1C	; 28
   142c6:	d1 40       	sbci	r29, 0x01	; 1
   142c8:	c4 c0       	rjmp	.+392    	; 0x14452 <Read_Config+0x768>
   142ca:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   142cc:	11 05       	cpc	r17, r1
   142ce:	a1 f0       	breq	.+40     	; 0x142f8 <Read_Config+0x60e>
   142d0:	05 31       	cpi	r16, 0x15	; 21
   142d2:	11 05       	cpc	r17, r1
   142d4:	51 f0       	breq	.+20     	; 0x142ea <Read_Config+0x600>
   142d6:	09 30       	cpi	r16, 0x09	; 9
   142d8:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   142da:	a9 f4       	brne	.+42     	; 0x14306 <Read_Config+0x61c>
   142dc:	8a e0       	ldi	r24, 0x0A	; 10
   142de:	90 e0       	ldi	r25, 0x00	; 0
   142e0:	9a d8       	rcall	.-3788   	; 0x13416 <push_state>
                        state = AMIGO_CONFIG;
   142e2:	9c e0       	ldi	r25, 0x0C	; 12
   142e4:	69 2e       	mov	r6, r25
   142e6:	71 2c       	mov	r7, r1
                        break;
   142e8:	a0 cd       	rjmp	.-1216   	; 0x13e2a <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   142ea:	8a e0       	ldi	r24, 0x0A	; 10
   142ec:	90 e0       	ldi	r25, 0x00	; 0
   142ee:	93 d8       	rcall	.-3802   	; 0x13416 <push_state>
   142f0:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   142f2:	62 2e       	mov	r6, r18
   142f4:	71 2c       	mov	r7, r1
   142f6:	99 cd       	rjmp	.-1230   	; 0x13e2a <Read_Config+0x140>
                        break;
   142f8:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   142fa:	90 e0       	ldi	r25, 0x00	; 0
   142fc:	8c d8       	rcall	.-3816   	; 0x13416 <push_state>
   142fe:	8d e0       	ldi	r24, 0x0D	; 13
   14300:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   14302:	71 2c       	mov	r7, r1
   14304:	92 cd       	rjmp	.-1244   	; 0x13e2a <Read_Config+0x140>
   14306:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14308:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   1430a:	37 82       	std	Z+7, r3	; 0x07
   1430c:	26 82       	std	Z+6, r2	; 0x06
   1430e:	b5 82       	std	Z+5, r11	; 0x05
   14310:	a4 82       	std	Z+4, r10	; 0x04
   14312:	c7 5e       	subi	r28, 0xE7	; 231
   14314:	de 4f       	sbci	r29, 0xFE	; 254
   14316:	28 81       	ld	r18, Y
   14318:	39 81       	ldd	r19, Y+1	; 0x01
   1431a:	4a 81       	ldd	r20, Y+2	; 0x02
   1431c:	c9 51       	subi	r28, 0x19	; 25
   1431e:	d1 40       	sbci	r29, 0x01	; 1
   14320:	98 c0       	rjmp	.+304    	; 0x14452 <Read_Config+0x768>
   14322:	00 31       	cpi	r16, 0x10	; 16
   14324:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   14326:	09 f4       	brne	.+2      	; 0x1432a <Read_Config+0x640>
   14328:	80 cd       	rjmp	.-1280   	; 0x13e2a <Read_Config+0x140>
   1432a:	8c f4       	brge	.+34     	; 0x1434e <Read_Config+0x664>
   1432c:	01 30       	cpi	r16, 0x01	; 1
   1432e:	11 05       	cpc	r17, r1
   14330:	69 f5       	brne	.+90     	; 0x1438c <Read_Config+0x6a2>
   14332:	c8 5f       	subi	r28, 0xF8	; 248
   14334:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   14336:	28 81       	ld	r18, Y
   14338:	c8 50       	subi	r28, 0x08	; 8
   1433a:	d1 40       	sbci	r29, 0x01	; 1
   1433c:	3b e0       	ldi	r19, 0x0B	; 11
   1433e:	23 02       	muls	r18, r19
   14340:	f0 01       	movw	r30, r0
   14342:	11 24       	eor	r1, r1
   14344:	ec 50       	subi	r30, 0x0C	; 12
   14346:	f1 4e       	sbci	r31, 0xE1	; 225
   14348:	61 83       	std	Z+1, r22	; 0x01
   1434a:	d2 01       	movw	r26, r4
   1434c:	14 c0       	rjmp	.+40     	; 0x14376 <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   1434e:	02 31       	cpi	r16, 0x12	; 18
   14350:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   14352:	a9 f0       	breq	.+42     	; 0x1437e <Read_Config+0x694>
   14354:	0f 31       	cpi	r16, 0x1F	; 31
   14356:	11 05       	cpc	r17, r1
   14358:	c9 f4       	brne	.+50     	; 0x1438c <Read_Config+0x6a2>
   1435a:	c8 5f       	subi	r28, 0xF8	; 248
   1435c:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   1435e:	b8 81       	ld	r27, Y
   14360:	c8 50       	subi	r28, 0x08	; 8
   14362:	d1 40       	sbci	r29, 0x01	; 1
   14364:	2b e0       	ldi	r18, 0x0B	; 11
   14366:	b2 02       	muls	r27, r18
   14368:	f0 01       	movw	r30, r0
   1436a:	11 24       	eor	r1, r1
   1436c:	ec 50       	subi	r30, 0x0C	; 12
   1436e:	f1 4e       	sbci	r31, 0xE1	; 225
   14370:	62 83       	std	Z+2, r22	; 0x02
   14372:	f2 01       	movw	r30, r4
   14374:	02 c0       	rjmp	.+4      	; 0x1437a <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   14376:	6c 93       	st	X, r22
   14378:	58 cd       	rjmp	.-1360   	; 0x13e2a <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   1437a:	61 83       	std	Z+1, r22	; 0x01
                        break;
   1437c:	56 cd       	rjmp	.-1364   	; 0x13e2a <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   1437e:	c4 01       	movw	r24, r8
                        break;
   14380:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   14384:	f2 01       	movw	r30, r4
   14386:	93 83       	std	Z+3, r25	; 0x03
   14388:	82 83       	std	Z+2, r24	; 0x02
   1438a:	4f cd       	rjmp	.-1378   	; 0x13e2a <Read_Config+0x140>
   1438c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1438e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   14390:	37 82       	std	Z+7, r3	; 0x07
   14392:	26 82       	std	Z+6, r2	; 0x06
   14394:	b5 82       	std	Z+5, r11	; 0x05
   14396:	a4 82       	std	Z+4, r10	; 0x04
   14398:	ca 5e       	subi	r28, 0xEA	; 234
   1439a:	de 4f       	sbci	r29, 0xFE	; 254
   1439c:	28 81       	ld	r18, Y
   1439e:	39 81       	ldd	r19, Y+1	; 0x01
   143a0:	4a 81       	ldd	r20, Y+2	; 0x02
   143a2:	c6 51       	subi	r28, 0x16	; 22
   143a4:	d1 40       	sbci	r29, 0x01	; 1
   143a6:	55 c0       	rjmp	.+170    	; 0x14452 <Read_Config+0x768>
   143a8:	07 31       	cpi	r16, 0x17	; 23
   143aa:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   143ac:	31 f4       	brne	.+12     	; 0x143ba <Read_Config+0x6d0>
   143ae:	96 2f       	mov	r25, r22
   143b0:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   143b2:	f2 01       	movw	r30, r4
   143b4:	96 83       	std	Z+6, r25	; 0x06
   143b6:	87 83       	std	Z+7, r24	; 0x07
   143b8:	38 cd       	rjmp	.-1424   	; 0x13e2a <Read_Config+0x140>
   143ba:	ed b7       	in	r30, 0x3d	; 61
   143bc:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   143be:	37 82       	std	Z+7, r3	; 0x07
   143c0:	26 82       	std	Z+6, r2	; 0x06
   143c2:	b5 82       	std	Z+5, r11	; 0x05
   143c4:	a4 82       	std	Z+4, r10	; 0x04
   143c6:	cd 5e       	subi	r28, 0xED	; 237
   143c8:	de 4f       	sbci	r29, 0xFE	; 254
   143ca:	28 81       	ld	r18, Y
   143cc:	39 81       	ldd	r19, Y+1	; 0x01
   143ce:	4a 81       	ldd	r20, Y+2	; 0x02
   143d0:	c3 51       	subi	r28, 0x13	; 19
   143d2:	d1 40       	sbci	r29, 0x01	; 1
   143d4:	3e c0       	rjmp	.+124    	; 0x14452 <Read_Config+0x768>
   143d6:	0d 30       	cpi	r16, 0x0D	; 13
   143d8:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   143da:	e1 f0       	breq	.+56     	; 0x14414 <Read_Config+0x72a>
   143dc:	3c f4       	brge	.+14     	; 0x143ec <Read_Config+0x702>
   143de:	08 30       	cpi	r16, 0x08	; 8
   143e0:	11 05       	cpc	r17, r1
   143e2:	e1 f4       	brne	.+56     	; 0x1441c <Read_Config+0x732>
   143e4:	96 2f       	mov	r25, r22
   143e6:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   143e8:	f2 01       	movw	r30, r4
   143ea:	0a c0       	rjmp	.+20     	; 0x14400 <Read_Config+0x716>
   143ec:	06 31       	cpi	r16, 0x16	; 22
   143ee:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   143f0:	69 f0       	breq	.+26     	; 0x1440c <Read_Config+0x722>
   143f2:	02 32       	cpi	r16, 0x22	; 34
   143f4:	11 05       	cpc	r17, r1
   143f6:	91 f4       	brne	.+36     	; 0x1441c <Read_Config+0x732>
   143f8:	96 2f       	mov	r25, r22
   143fa:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   143fc:	f2 01       	movw	r30, r4
   143fe:	03 c0       	rjmp	.+6      	; 0x14406 <Read_Config+0x71c>
   14400:	90 87       	std	Z+8, r25	; 0x08
   14402:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   14404:	12 cd       	rjmp	.-1500   	; 0x13e2a <Read_Config+0x140>
   14406:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   14408:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   1440a:	0f cd       	rjmp	.-1506   	; 0x13e2a <Read_Config+0x140>
   1440c:	f2 01       	movw	r30, r4
                        break;
   1440e:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   14410:	75 87       	std	Z+13, r23	; 0x0d
   14412:	0b cd       	rjmp	.-1514   	; 0x13e2a <Read_Config+0x140>
   14414:	f2 01       	movw	r30, r4
                        break;
   14416:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   14418:	77 87       	std	Z+15, r23	; 0x0f
   1441a:	07 cd       	rjmp	.-1522   	; 0x13e2a <Read_Config+0x140>
   1441c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1441e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   14420:	37 82       	std	Z+7, r3	; 0x07
   14422:	26 82       	std	Z+6, r2	; 0x06
   14424:	b5 82       	std	Z+5, r11	; 0x05
   14426:	a4 82       	std	Z+4, r10	; 0x04
   14428:	c0 5f       	subi	r28, 0xF0	; 240
   1442a:	de 4f       	sbci	r29, 0xFE	; 254
   1442c:	28 81       	ld	r18, Y
   1442e:	39 81       	ldd	r19, Y+1	; 0x01
   14430:	4a 81       	ldd	r20, Y+2	; 0x02
   14432:	c0 51       	subi	r28, 0x10	; 16
   14434:	d1 40       	sbci	r29, 0x01	; 1
   14436:	0d c0       	rjmp	.+26     	; 0x14452 <Read_Config+0x768>
   14438:	ed b7       	in	r30, 0x3d	; 61
   1443a:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   1443c:	37 82       	std	Z+7, r3	; 0x07
   1443e:	26 82       	std	Z+6, r2	; 0x06
   14440:	b5 82       	std	Z+5, r11	; 0x05
   14442:	a4 82       	std	Z+4, r10	; 0x04
   14444:	c3 5f       	subi	r28, 0xF3	; 243
   14446:	de 4f       	sbci	r29, 0xFE	; 254
   14448:	28 81       	ld	r18, Y
   1444a:	39 81       	ldd	r19, Y+1	; 0x01
   1444c:	4a 81       	ldd	r20, Y+2	; 0x02
   1444e:	cd 50       	subi	r28, 0x0D	; 13
   14450:	d1 40       	sbci	r29, 0x01	; 1
   14452:	21 83       	std	Z+1, r18	; 0x01
   14454:	32 83       	std	Z+2, r19	; 0x02
   14456:	43 83       	std	Z+3, r20	; 0x03
   14458:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1445c:	ff ef       	ldi	r31, 0xFF	; 255
   1445e:	cf 1a       	sub	r12, r31
                ++errors;
   14460:	df 0a       	sbc	r13, r31
   14462:	e3 cc       	rjmp	.-1594   	; 0x13e2a <Read_Config+0x140>
   14464:	61 14       	cp	r6, r1
                break;
   14466:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   14468:	79 f0       	breq	.+30     	; 0x14488 <Read_Config+0x79e>
   1446a:	ed b7       	in	r30, 0x3d	; 61
   1446c:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   1446e:	35 82       	std	Z+5, r3	; 0x05
   14470:	24 82       	std	Z+4, r2	; 0x04
   14472:	8b e0       	ldi	r24, 0x0B	; 11
   14474:	9e e1       	ldi	r25, 0x1E	; 30
   14476:	a0 e0       	ldi	r26, 0x00	; 0
   14478:	81 83       	std	Z+1, r24	; 0x01
   1447a:	92 83       	std	Z+2, r25	; 0x02
   1447c:	a3 83       	std	Z+3, r26	; 0x03
   1447e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   14482:	ff ef       	ldi	r31, 0xFF	; 255
   14484:	cf 1a       	sub	r12, r31
        ++errors;
   14486:	df 0a       	sbc	r13, r31
   14488:	ed b7       	in	r30, 0x3d	; 61
   1448a:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   1448c:	35 82       	std	Z+5, r3	; 0x05
   1448e:	24 82       	std	Z+4, r2	; 0x04
   14490:	8e ee       	ldi	r24, 0xEE	; 238
   14492:	9d e1       	ldi	r25, 0x1D	; 29
   14494:	a0 e0       	ldi	r26, 0x00	; 0
   14496:	81 83       	std	Z+1, r24	; 0x01
   14498:	92 83       	std	Z+2, r25	; 0x02
   1449a:	a3 83       	std	Z+3, r26	; 0x03
   1449c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   144a0:	c1 14       	cp	r12, r1
   144a2:	d1 04       	cpc	r13, r1
    if(errors)
   144a4:	61 f0       	breq	.+24     	; 0x144be <Read_Config+0x7d4>
   144a6:	ed b7       	in	r30, 0x3d	; 61
   144a8:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   144aa:	d5 82       	std	Z+5, r13	; 0x05
   144ac:	c4 82       	std	Z+4, r12	; 0x04
   144ae:	87 ec       	ldi	r24, 0xC7	; 199
   144b0:	9d e1       	ldi	r25, 0x1D	; 29
   144b2:	a0 e0       	ldi	r26, 0x00	; 0
   144b4:	81 83       	std	Z+1, r24	; 0x01
   144b6:	92 83       	std	Z+2, r25	; 0x02
   144b8:	a3 83       	std	Z+3, r26	; 0x03
   144ba:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   144be:	c5 5f       	subi	r28, 0xF5	; 245
   144c0:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   144c2:	88 81       	ld	r24, Y
   144c4:	99 81       	ldd	r25, Y+1	; 0x01
   144c6:	cb 50       	subi	r28, 0x0B	; 11
   144c8:	d1 40       	sbci	r29, 0x01	; 1
   144ca:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>
   144ce:	01 96       	adiw	r24, 0x01	; 1
   144d0:	39 f4       	brne	.+14     	; 0x144e0 <Read_Config+0x7f6>
   144d2:	86 e6       	ldi	r24, 0x66	; 102
   144d4:	9e e0       	ldi	r25, 0x0E	; 14
    {
        perror("Read_Config - close error");
   144d6:	0e 94 7b 78 	call	0xf0f6	; 0xf0f6 <perror>
   144da:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   144dc:	c2 1a       	sub	r12, r18
   144de:	d2 0a       	sbc	r13, r18
   144e0:	fb db       	rcall	.-2058   	; 0x13cd8 <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   144e2:	c6 01       	movw	r24, r12
   144e4:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   144e6:	de 4f       	sbci	r29, 0xFE	; 254
}
   144e8:	e2 e1       	ldi	r30, 0x12	; 18
   144ea:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

000144ee <display_mounts>:
   144ee:	cf 93       	push	r28
   144f0:	00 d0       	rcall	.+0      	; 0x144f2 <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   144f2:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   144f4:	80 ef       	ldi	r24, 0xF0	; 240
   144f6:	97 e1       	ldi	r25, 0x17	; 23
   144f8:	a0 e0       	ldi	r26, 0x00	; 0
   144fa:	ed b7       	in	r30, 0x3d	; 61
   144fc:	fe b7       	in	r31, 0x3e	; 62
   144fe:	81 83       	std	Z+1, r24	; 0x01
   14500:	92 83       	std	Z+2, r25	; 0x02
   14502:	a3 83       	std	Z+3, r26	; 0x03
   14504:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   14508:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   1450a:	8c 2f       	mov	r24, r28
   1450c:	a0 da       	rcall	.-2752   	; 0x13a4e <display_mount>
   1450e:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   14510:	cc 30       	cpi	r28, 0x0C	; 12
   14512:	d9 f7       	brne	.-10     	; 0x1450a <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   14514:	8e ee       	ldi	r24, 0xEE	; 238
   14516:	97 e1       	ldi	r25, 0x17	; 23
   14518:	a0 e0       	ldi	r26, 0x00	; 0
   1451a:	ed b7       	in	r30, 0x3d	; 61
   1451c:	fe b7       	in	r31, 0x3e	; 62
   1451e:	81 83       	std	Z+1, r24	; 0x01
   14520:	92 83       	std	Z+2, r25	; 0x02
   14522:	a3 83       	std	Z+3, r26	; 0x03
   14524:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
}
   14528:	0f 90       	pop	r0
   1452a:	0f 90       	pop	r0
   1452c:	0f 90       	pop	r0
   1452e:	cf 91       	pop	r28
   14530:	08 95       	ret

00014532 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   14532:	a5 e0       	ldi	r26, 0x05	; 5
   14534:	b0 e0       	ldi	r27, 0x00	; 0
   14536:	ef e9       	ldi	r30, 0x9F	; 159
   14538:	f2 ea       	ldi	r31, 0xA2	; 162
   1453a:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
   1453e:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   14540:	81 30       	cpi	r24, 0x01	; 1
   14542:	91 05       	cpc	r25, r1
   14544:	11 f4       	brne	.+4      	; 0x1454a <mount+0x18>
	{
		display_mounts();
   14546:	d3 df       	rcall	.-90     	; 0x144ee <display_mounts>
   14548:	c2 c0       	rjmp	.+388    	; 0x146ce <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   1454a:	83 30       	cpi	r24, 0x03	; 3
   1454c:	91 05       	cpc	r25, r1
   1454e:	61 f5       	brne	.+88     	; 0x145a8 <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   14550:	60 e8       	ldi	r22, 0x80	; 128
   14552:	7e e0       	ldi	r23, 0x0E	; 14
   14554:	8a 81       	ldd	r24, Y+2	; 0x02
   14556:	9b 81       	ldd	r25, Y+3	; 0x03
   14558:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1455c:	89 2b       	or	r24, r25
   1455e:	09 f4       	brne	.+2      	; 0x14562 <mount+0x30>
   14560:	b6 c0       	rjmp	.+364    	; 0x146ce <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   14562:	8c 81       	ldd	r24, Y+4	; 0x04
   14564:	9d 81       	ldd	r25, Y+5	; 0x05
   14566:	0e 94 a4 47 	call	0x8f48	; 0x8f48 <atoi>
   1456a:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   1456c:	84 e0       	ldi	r24, 0x04	; 4
   1456e:	90 e0       	ldi	r25, 0x00	; 0
   14570:	0e 94 3a 99 	call	0x13274	; 0x13274 <alloc_device>
				if(index < 0)
   14574:	87 ff       	sbrs	r24, 7
   14576:	0b c0       	rjmp	.+22     	; 0x1458e <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   14578:	82 ee       	ldi	r24, 0xE2	; 226
   1457a:	98 e1       	ldi	r25, 0x18	; 24
   1457c:	a0 e0       	ldi	r26, 0x00	; 0
   1457e:	ed b7       	in	r30, 0x3d	; 61
   14580:	fe b7       	in	r31, 0x3e	; 62
   14582:	81 83       	std	Z+1, r24	; 0x01
   14584:	92 83       	std	Z+2, r25	; 0x02
   14586:	a3 83       	std	Z+3, r26	; 0x03
   14588:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1458c:	9e c0       	rjmp	.+316    	; 0x146ca <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1458e:	9b e0       	ldi	r25, 0x0B	; 11
   14590:	89 02       	muls	r24, r25
   14592:	f0 01       	movw	r30, r0
   14594:	11 24       	eor	r1, r1
   14596:	ec 50       	subi	r30, 0x0C	; 12
   14598:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   1459a:	a7 81       	ldd	r26, Z+7	; 0x07
   1459c:	b0 85       	ldd	r27, Z+8	; 0x08
   1459e:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   145a0:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   145a2:	9f ef       	ldi	r25, 0xFF	; 255
   145a4:	92 83       	std	Z+2, r25	; 0x02
   145a6:	80 c0       	rjmp	.+256    	; 0x146a8 <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   145a8:	04 97       	sbiw	r24, 0x04	; 4
   145aa:	09 f0       	breq	.+2      	; 0x145ae <mount+0x7c>
   145ac:	8d c0       	rjmp	.+282    	; 0x146c8 <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   145ae:	40 e0       	ldi	r20, 0x00	; 0
   145b0:	50 e0       	ldi	r21, 0x00	; 0
   145b2:	60 e0       	ldi	r22, 0x00	; 0
   145b4:	70 e0       	ldi	r23, 0x00	; 0
   145b6:	8a 81       	ldd	r24, Y+2	; 0x02
   145b8:	9b 81       	ldd	r25, Y+3	; 0x03
   145ba:	2b d1       	rcall	.+598    	; 0x14812 <hpdir_find_drive>
   145bc:	89 2b       	or	r24, r25
   145be:	59 f4       	brne	.+22     	; 0x145d6 <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   145c0:	8a eb       	ldi	r24, 0xBA	; 186
   145c2:	98 e1       	ldi	r25, 0x18	; 24
   145c4:	a0 e0       	ldi	r26, 0x00	; 0
   145c6:	ed b7       	in	r30, 0x3d	; 61
   145c8:	fe b7       	in	r31, 0x3e	; 62
   145ca:	81 83       	std	Z+1, r24	; 0x01
   145cc:	92 83       	std	Z+2, r25	; 0x02
   145ce:	a3 83       	std	Z+3, r26	; 0x03
   145d0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   145d4:	37 c0       	rjmp	.+110    	; 0x14644 <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   145d6:	68 e8       	ldi	r22, 0x88	; 136
   145d8:	7e e0       	ldi	r23, 0x0E	; 14
   145da:	88 ed       	ldi	r24, 0xD8	; 216
   145dc:	9f e1       	ldi	r25, 0x1F	; 31
   145de:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   145e2:	89 2b       	or	r24, r25
   145e4:	a9 f0       	breq	.+42     	; 0x14610 <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   145e6:	8c 81       	ldd	r24, Y+4	; 0x04
   145e8:	9d 81       	ldd	r25, Y+5	; 0x05
   145ea:	0e 94 a4 47 	call	0x8f48	; 0x8f48 <atoi>
   145ee:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   145f0:	83 e0       	ldi	r24, 0x03	; 3
   145f2:	90 e0       	ldi	r25, 0x00	; 0
   145f4:	0e 94 3a 99 	call	0x13274	; 0x13274 <alloc_device>
   145f8:	f8 2e       	mov	r15, r24
			if(index < 0)
   145fa:	87 ff       	sbrs	r24, 7
   145fc:	12 c0       	rjmp	.+36     	; 0x14622 <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   145fe:	8c 81       	ldd	r24, Y+4	; 0x04
   14600:	9d 81       	ldd	r25, Y+5	; 0x05
   14602:	ed b7       	in	r30, 0x3d	; 61
   14604:	fe b7       	in	r31, 0x3e	; 62
   14606:	95 83       	std	Z+5, r25	; 0x05
   14608:	84 83       	std	Z+4, r24	; 0x04
   1460a:	80 e9       	ldi	r24, 0x90	; 144
   1460c:	98 e1       	ldi	r25, 0x18	; 24
   1460e:	38 c0       	rjmp	.+112    	; 0x14680 <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   14610:	6d e8       	ldi	r22, 0x8D	; 141
   14612:	7e e0       	ldi	r23, 0x0E	; 14
   14614:	88 ed       	ldi	r24, 0xD8	; 216
   14616:	9f e1       	ldi	r25, 0x1F	; 31
   14618:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1461c:	89 2b       	or	r24, r25
   1461e:	19 f7       	brne	.-58     	; 0x145e6 <mount+0xb4>
   14620:	13 c0       	rjmp	.+38     	; 0x14648 <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   14622:	ff 2d       	mov	r31, r15
   14624:	8b e0       	ldi	r24, 0x0B	; 11
   14626:	f8 02       	muls	r31, r24
   14628:	80 01       	movw	r16, r0
   1462a:	11 24       	eor	r1, r1
   1462c:	0c 50       	subi	r16, 0x0C	; 12
   1462e:	11 4e       	sbci	r17, 0xE1	; 225
   14630:	f8 01       	movw	r30, r16
   14632:	c7 80       	ldd	r12, Z+7	; 0x07
   14634:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   14636:	6a 81       	ldd	r22, Y+2	; 0x02
   14638:	7b 81       	ldd	r23, Y+3	; 0x03
   1463a:	8f 2d       	mov	r24, r15
   1463c:	0e 94 c5 9a 	call	0x1358a	; 0x1358a <hpdir_set_parameters>
   14640:	81 11       	cpse	r24, r1
   14642:	25 c0       	rjmp	.+74     	; 0x1468e <mount+0x15c>
				return(-1);
   14644:	8f ef       	ldi	r24, 0xFF	; 255
   14646:	44 c0       	rjmp	.+136    	; 0x146d0 <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   14648:	62 e9       	ldi	r22, 0x92	; 146
   1464a:	7e e0       	ldi	r23, 0x0E	; 14
   1464c:	88 ed       	ldi	r24, 0xD8	; 216
   1464e:	9f e1       	ldi	r25, 0x1F	; 31
   14650:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   14654:	89 2b       	or	r24, r25
   14656:	51 f1       	breq	.+84     	; 0x146ac <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   14658:	8c 81       	ldd	r24, Y+4	; 0x04
   1465a:	9d 81       	ldd	r25, Y+5	; 0x05
   1465c:	0e 94 a4 47 	call	0x8f48	; 0x8f48 <atoi>
   14660:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   14662:	81 e0       	ldi	r24, 0x01	; 1
   14664:	90 e0       	ldi	r25, 0x00	; 0
   14666:	0e 94 3a 99 	call	0x13274	; 0x13274 <alloc_device>
   1466a:	f8 2e       	mov	r15, r24
			if(index < 0)
   1466c:	87 ff       	sbrs	r24, 7
   1466e:	d9 cf       	rjmp	.-78     	; 0x14622 <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   14670:	8c 81       	ldd	r24, Y+4	; 0x04
   14672:	9d 81       	ldd	r25, Y+5	; 0x05
   14674:	ed b7       	in	r30, 0x3d	; 61
   14676:	fe b7       	in	r31, 0x3e	; 62
   14678:	95 83       	std	Z+5, r25	; 0x05
   1467a:	84 83       	std	Z+4, r24	; 0x04
   1467c:	85 e6       	ldi	r24, 0x65	; 101
   1467e:	98 e1       	ldi	r25, 0x18	; 24
   14680:	a0 e0       	ldi	r26, 0x00	; 0
   14682:	81 83       	std	Z+1, r24	; 0x01
   14684:	92 83       	std	Z+2, r25	; 0x02
   14686:	a3 83       	std	Z+3, r26	; 0x03
   14688:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1468c:	1e c0       	rjmp	.+60     	; 0x146ca <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   1468e:	8e 81       	ldd	r24, Y+6	; 0x06
   14690:	9f 81       	ldd	r25, Y+7	; 0x07
   14692:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <stralloc>
   14696:	f6 01       	movw	r30, r12
   14698:	93 83       	std	Z+3, r25	; 0x03
   1469a:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   1469c:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   1469e:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   146a0:	f8 01       	movw	r30, r16
   146a2:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   146a4:	e2 82       	std	Z+2, r14	; 0x02
   146a6:	8f 2d       	mov	r24, r15
   146a8:	4b da       	rcall	.-2922   	; 0x13b40 <verify_device>
   146aa:	12 c0       	rjmp	.+36     	; 0x146d0 <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   146ac:	8a 81       	ldd	r24, Y+2	; 0x02
   146ae:	9b 81       	ldd	r25, Y+3	; 0x03
   146b0:	ed b7       	in	r30, 0x3d	; 61
   146b2:	fe b7       	in	r31, 0x3e	; 62
   146b4:	95 83       	std	Z+5, r25	; 0x05
   146b6:	84 83       	std	Z+4, r24	; 0x04
   146b8:	8c e3       	ldi	r24, 0x3C	; 60
   146ba:	98 e1       	ldi	r25, 0x18	; 24
   146bc:	a0 e0       	ldi	r26, 0x00	; 0
   146be:	81 83       	std	Z+1, r24	; 0x01
   146c0:	92 83       	std	Z+2, r25	; 0x02
   146c2:	a3 83       	std	Z+3, r26	; 0x03
   146c4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   146c8:	fa d8       	rcall	.-3596   	; 0x138be <mount_usage>
		return(0);
   146ca:	80 e0       	ldi	r24, 0x00	; 0
   146cc:	01 c0       	rjmp	.+2      	; 0x146d0 <mount+0x19e>
	}
	return(1);
   146ce:	81 e0       	ldi	r24, 0x01	; 1
}
   146d0:	cd b7       	in	r28, 0x3d	; 61
   146d2:	de b7       	in	r29, 0x3e	; 62
   146d4:	25 96       	adiw	r28, 0x05	; 5
   146d6:	e8 e0       	ldi	r30, 0x08	; 8
   146d8:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

000146dc <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   146dc:	8f e1       	ldi	r24, 0x1F	; 31
   146de:	e8 e7       	ldi	r30, 0x78	; 120
   146e0:	ff e1       	ldi	r31, 0x1F	; 31
   146e2:	df 01       	movw	r26, r30
   146e4:	98 2f       	mov	r25, r24
   146e6:	1d 92       	st	X+, r1
   146e8:	9a 95       	dec	r25
   146ea:	e9 f7       	brne	.-6      	; 0x146e6 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   146ec:	9f e3       	ldi	r25, 0x3F	; 63
   146ee:	e8 e9       	ldi	r30, 0x98	; 152
   146f0:	ff e1       	ldi	r31, 0x1F	; 31
   146f2:	df 01       	movw	r26, r30
   146f4:	1d 92       	st	X+, r1
   146f6:	9a 95       	dec	r25
   146f8:	e9 f7       	brne	.-6      	; 0x146f4 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   146fa:	e8 ed       	ldi	r30, 0xD8	; 216
   146fc:	ff e1       	ldi	r31, 0x1F	; 31
   146fe:	df 01       	movw	r26, r30
   14700:	1d 92       	st	X+, r1
   14702:	8a 95       	dec	r24
   14704:	e9 f7       	brne	.-6      	; 0x14700 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   14706:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <hpdir+0x80>
   1470a:	10 92 f9 1f 	sts	0x1FF9, r1	; 0x801ff9 <hpdir+0x81>
   1470e:	10 92 fa 1f 	sts	0x1FFA, r1	; 0x801ffa <hpdir+0x82>
   14712:	10 92 fb 1f 	sts	0x1FFB, r1	; 0x801ffb <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   14716:	10 92 fc 1f 	sts	0x1FFC, r1	; 0x801ffc <hpdir+0x84>
   1471a:	10 92 fd 1f 	sts	0x1FFD, r1	; 0x801ffd <hpdir+0x85>
   1471e:	10 92 fe 1f 	sts	0x1FFE, r1	; 0x801ffe <hpdir+0x86>
   14722:	10 92 ff 1f 	sts	0x1FFF, r1	; 0x801fff <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14726:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <hpdir+0x88>
   1472a:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <hpdir+0x89>
   1472e:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x8a>
   14732:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14736:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x8c>
   1473a:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x8d>
   1473e:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x8e>
   14742:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14746:	81 e0       	ldi	r24, 0x01	; 1
   14748:	90 e8       	ldi	r25, 0x80	; 128
   1474a:	a0 e0       	ldi	r26, 0x00	; 0
   1474c:	b0 e0       	ldi	r27, 0x00	; 0
   1474e:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <hpdir+0x90>
   14752:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <hpdir+0x91>
   14756:	a0 93 0a 20 	sts	0x200A, r26	; 0x80200a <hpdir+0x92>
   1475a:	b0 93 0b 20 	sts	0x200B, r27	; 0x80200b <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   1475e:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x94>
   14762:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x95>
   14766:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0x96>
   1476a:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   1476e:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <hpdir+0x98>
   14772:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <hpdir+0x99>
   14776:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <hpdir+0x9a>
   1477a:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   1477e:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0x9c>
   14782:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0x9d>
   14786:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <hpdir+0x9e>
   1478a:	10 92 17 20 	sts	0x2017, r1	; 0x802017 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   1478e:	10 92 18 20 	sts	0x2018, r1	; 0x802018 <hpdir+0xa0>
   14792:	10 92 19 20 	sts	0x2019, r1	; 0x802019 <hpdir+0xa1>
   14796:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0xa2>
   1479a:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1479e:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0xa4>
   147a2:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0xa5>
   147a6:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <hpdir+0xa6>
   147aa:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   147ae:	81 e0       	ldi	r24, 0x01	; 1
   147b0:	90 e0       	ldi	r25, 0x00	; 0
   147b2:	a0 e0       	ldi	r26, 0x00	; 0
   147b4:	b0 e0       	ldi	r27, 0x00	; 0
   147b6:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <hpdir+0xa8>
   147ba:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <hpdir+0xa9>
   147be:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <hpdir+0xaa>
   147c2:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   147c6:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <hpdir+0xac>
   147ca:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <hpdir+0xad>
   147ce:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <hpdir+0xae>
   147d2:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <hpdir+0xaf>
   147d6:	08 95       	ret

000147d8 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   147d8:	20 e0       	ldi	r18, 0x00	; 0
   147da:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   147dc:	61 15       	cp	r22, r1
   147de:	71 05       	cpc	r23, r1
   147e0:	81 05       	cpc	r24, r1
   147e2:	91 05       	cpc	r25, r1
   147e4:	39 f0       	breq	.+14     	; 0x147f4 <lif_dir_count+0x1c>
    {
        scale++;
   147e6:	2f 5f       	subi	r18, 0xFF	; 255
   147e8:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   147ea:	95 95       	asr	r25
   147ec:	87 95       	ror	r24
   147ee:	77 95       	ror	r23
   147f0:	67 95       	ror	r22
   147f2:	f4 cf       	rjmp	.-24     	; 0x147dc <lif_dir_count+0x4>
    }
    scale>>=1;
   147f4:	35 95       	asr	r19
   147f6:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   147f8:	61 e0       	ldi	r22, 0x01	; 1
   147fa:	70 e0       	ldi	r23, 0x00	; 0
   147fc:	80 e0       	ldi	r24, 0x00	; 0
   147fe:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   14800:	21 50       	subi	r18, 0x01	; 1
   14802:	31 09       	sbc	r19, r1
   14804:	28 f0       	brcs	.+10     	; 0x14810 <lif_dir_count+0x38>
        num <<=1;
   14806:	66 0f       	add	r22, r22
   14808:	77 1f       	adc	r23, r23
   1480a:	88 1f       	adc	r24, r24
   1480c:	99 1f       	adc	r25, r25
   1480e:	f8 cf       	rjmp	.-16     	; 0x14800 <lif_dir_count+0x28>
    return(num);
}
   14810:	08 95       	ret

00014812 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14812:	2f 92       	push	r2
   14814:	3f 92       	push	r3
   14816:	4f 92       	push	r4
   14818:	5f 92       	push	r5
   1481a:	6f 92       	push	r6
   1481c:	8f 92       	push	r8
   1481e:	9f 92       	push	r9
   14820:	af 92       	push	r10
   14822:	bf 92       	push	r11
   14824:	cf 92       	push	r12
   14826:	df 92       	push	r13
   14828:	ef 92       	push	r14
   1482a:	ff 92       	push	r15
   1482c:	0f 93       	push	r16
   1482e:	1f 93       	push	r17
   14830:	cf 93       	push	r28
   14832:	df 93       	push	r29
   14834:	cd b7       	in	r28, 0x3d	; 61
   14836:	de b7       	in	r29, 0x3e	; 62
   14838:	c9 58       	subi	r28, 0x89	; 137
   1483a:	d1 40       	sbci	r29, 0x01	; 1
   1483c:	0f b6       	in	r0, 0x3f	; 63
   1483e:	f8 94       	cli
   14840:	de bf       	out	0x3e, r29	; 62
   14842:	0f be       	out	0x3f, r0	; 63
   14844:	cd bf       	out	0x3d, r28	; 61
   14846:	6c 01       	movw	r12, r24
   14848:	c8 57       	subi	r28, 0x78	; 120
   1484a:	de 4f       	sbci	r29, 0xFE	; 254
   1484c:	79 83       	std	Y+1, r23	; 0x01
   1484e:	68 83       	st	Y, r22
   14850:	c8 58       	subi	r28, 0x88	; 136
   14852:	d1 40       	sbci	r29, 0x01	; 1
   14854:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14856:	42 df       	rcall	.-380    	; 0x146dc <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14858:	6e ef       	ldi	r22, 0xFE	; 254
   1485a:	78 e0       	ldi	r23, 0x08	; 8
   1485c:	87 e5       	ldi	r24, 0x57	; 87
   1485e:	90 e1       	ldi	r25, 0x10	; 16
   14860:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <fopen>
   14864:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14866:	89 2b       	or	r24, r25
   14868:	49 f4       	brne	.+18     	; 0x1487c <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   1486a:	6e ef       	ldi	r22, 0xFE	; 254
   1486c:	78 e0       	ldi	r23, 0x08	; 8
   1486e:	86 e5       	ldi	r24, 0x56	; 86
   14870:	90 e1       	ldi	r25, 0x10	; 16
   14872:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <fopen>
   14876:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14878:	89 2b       	or	r24, r25
   1487a:	51 f0       	breq	.+20     	; 0x14890 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   1487c:	21 2c       	mov	r2, r1
   1487e:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14880:	8e 01       	movw	r16, r28
   14882:	08 5f       	subi	r16, 0xF8	; 248
   14884:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14886:	80 e5       	ldi	r24, 0x50	; 80
   14888:	91 e2       	ldi	r25, 0x21	; 33
   1488a:	2c 01       	movw	r4, r24
   1488c:	61 2c       	mov	r6, r1
   1488e:	1e c0       	rjmp	.+60     	; 0x148cc <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   14890:	ab 28       	or	r10, r11
   14892:	09 f4       	brne	.+2      	; 0x14896 <hpdir_find_drive+0x84>
   14894:	79 c1       	rjmp	.+754    	; 0x14b88 <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   14896:	87 e5       	ldi	r24, 0x57	; 87
   14898:	91 e2       	ldi	r25, 0x21	; 33
   1489a:	a0 e0       	ldi	r26, 0x00	; 0
   1489c:	ed b7       	in	r30, 0x3d	; 61
   1489e:	fe b7       	in	r31, 0x3e	; 62
   148a0:	81 83       	std	Z+1, r24	; 0x01
   148a2:	92 83       	std	Z+2, r25	; 0x02
   148a4:	a3 83       	std	Z+3, r26	; 0x03
   148a6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   148aa:	6e c1       	rjmp	.+732    	; 0x14b88 <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   148ac:	ce 01       	movw	r24, r28
   148ae:	08 96       	adiw	r24, 0x08	; 8
   148b0:	0e 94 2a 32 	call	0x6454	; 0x6454 <trim_tail>
        ptr = skipspaces(ptr);
   148b4:	ce 01       	movw	r24, r28
   148b6:	08 96       	adiw	r24, 0x08	; 8
   148b8:	0e 94 3a 32 	call	0x6474	; 0x6474 <skipspaces>

        len = strlen(ptr);
   148bc:	fc 01       	movw	r30, r24
   148be:	01 90       	ld	r0, Z+
   148c0:	00 20       	and	r0, r0
   148c2:	e9 f7       	brne	.-6      	; 0x148be <hpdir_find_drive+0xac>
   148c4:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   148c6:	8e 17       	cp	r24, r30
   148c8:	9f 07       	cpc	r25, r31
   148ca:	51 f4       	brne	.+20     	; 0x148e0 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   148cc:	a7 01       	movw	r20, r14
   148ce:	6e ef       	ldi	r22, 0xFE	; 254
   148d0:	70 e0       	ldi	r23, 0x00	; 0
   148d2:	ce 01       	movw	r24, r28
   148d4:	08 96       	adiw	r24, 0x08	; 8
   148d6:	0e 94 62 76 	call	0xecc4	; 0xecc4 <fgets>
   148da:	89 2b       	or	r24, r25
   148dc:	39 f7       	brne	.-50     	; 0x148ac <hpdir_find_drive+0x9a>
   148de:	0c c0       	rjmp	.+24     	; 0x148f8 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   148e0:	fc 01       	movw	r30, r24
   148e2:	20 81       	ld	r18, Z
   148e4:	2b 33       	cpi	r18, 0x3B	; 59
   148e6:	91 f3       	breq	.-28     	; 0x148cc <hpdir_find_drive+0xba>
   148e8:	23 32       	cpi	r18, 0x23	; 35
   148ea:	81 f3       	breq	.-32     	; 0x148cc <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   148ec:	2b 35       	cpi	r18, 0x5B	; 91
   148ee:	39 f4       	brne	.+14     	; 0x148fe <hpdir_find_drive+0xec>
   148f0:	f1 e0       	ldi	r31, 0x01	; 1
   148f2:	2f 16       	cp	r2, r31
   148f4:	31 04       	cpc	r3, r1
   148f6:	19 f4       	brne	.+6      	; 0x148fe <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   148f8:	00 e0       	ldi	r16, 0x00	; 0
   148fa:	10 e0       	ldi	r17, 0x00	; 0
   148fc:	32 c1       	rjmp	.+612    	; 0x14b62 <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   148fe:	4e e7       	ldi	r20, 0x7E	; 126
   14900:	50 e0       	ldi	r21, 0x00	; 0
   14902:	b8 01       	movw	r22, r16
   14904:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14908:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   1490a:	61 e6       	ldi	r22, 0x61	; 97
   1490c:	70 e1       	ldi	r23, 0x10	; 16
   1490e:	c8 01       	movw	r24, r16
   14910:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   14914:	89 2b       	or	r24, r25
   14916:	21 f0       	breq	.+8      	; 0x14920 <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   14918:	22 24       	eor	r2, r2
   1491a:	23 94       	inc	r2
   1491c:	31 2c       	mov	r3, r1
   1491e:	d6 cf       	rjmp	.-84     	; 0x148cc <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14920:	21 e0       	ldi	r18, 0x01	; 1
   14922:	22 16       	cp	r2, r18
   14924:	31 04       	cpc	r3, r1
   14926:	91 f6       	brne	.-92     	; 0x148cc <hpdir_find_drive+0xba>
            continue;

        if(list)
   14928:	c8 57       	subi	r28, 0x78	; 120
   1492a:	de 4f       	sbci	r29, 0xFE	; 254
   1492c:	88 81       	ld	r24, Y
   1492e:	99 81       	ldd	r25, Y+1	; 0x01
   14930:	c8 58       	subi	r28, 0x88	; 136
   14932:	d1 40       	sbci	r29, 0x01	; 1
   14934:	89 2b       	or	r24, r25
   14936:	61 f0       	breq	.+24     	; 0x14950 <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   14938:	ed b7       	in	r30, 0x3d	; 61
   1493a:	fe b7       	in	r31, 0x3e	; 62
   1493c:	97 82       	std	Z+7, r9	; 0x07
   1493e:	86 82       	std	Z+6, r8	; 0x06
   14940:	15 83       	std	Z+5, r17	; 0x05
   14942:	04 83       	std	Z+4, r16	; 0x04
   14944:	41 82       	std	Z+1, r4	; 0x01
   14946:	52 82       	std	Z+2, r5	; 0x02
   14948:	63 82       	std	Z+3, r6	; 0x03
   1494a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            continue;
   1494e:	be cf       	rjmp	.-132    	; 0x148cc <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   14950:	b8 01       	movw	r22, r16
   14952:	c6 01       	movw	r24, r12
   14954:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   14958:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   1495a:	f1 f2       	breq	.-68     	; 0x14918 <hpdir_find_drive+0x106>
   1495c:	bf de       	rcall	.-642    	; 0x146dc <hpdir_init>

        if(verbose)
   1495e:	a1 14       	cp	r10, r1
   14960:	b1 04       	cpc	r11, r1
   14962:	61 f0       	breq	.+24     	; 0x1497c <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   14964:	ed b7       	in	r30, 0x3d	; 61
   14966:	fe b7       	in	r31, 0x3e	; 62
   14968:	d5 82       	std	Z+5, r13	; 0x05
   1496a:	c4 82       	std	Z+4, r12	; 0x04
   1496c:	82 e3       	ldi	r24, 0x32	; 50
   1496e:	91 e2       	ldi	r25, 0x21	; 33
   14970:	a0 e0       	ldi	r26, 0x00	; 0
   14972:	81 83       	std	Z+1, r24	; 0x01
   14974:	92 83       	std	Z+2, r25	; 0x02
   14976:	a3 83       	std	Z+3, r26	; 0x03
   14978:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   1497c:	4e e1       	ldi	r20, 0x1E	; 30
   1497e:	50 e0       	ldi	r21, 0x00	; 0
   14980:	b8 01       	movw	r22, r16
   14982:	88 e7       	ldi	r24, 0x78	; 120
   14984:	9f e1       	ldi	r25, 0x1F	; 31
   14986:	0e 94 57 31 	call	0x62ae	; 0x62ae <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1498a:	4e e7       	ldi	r20, 0x7E	; 126
   1498c:	50 e0       	ldi	r21, 0x00	; 0
   1498e:	b8 01       	movw	r22, r16
   14990:	c4 01       	movw	r24, r8
   14992:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14996:	4e e3       	ldi	r20, 0x3E	; 62
   14998:	50 e0       	ldi	r21, 0x00	; 0
   1499a:	68 e9       	ldi	r22, 0x98	; 152
   1499c:	7f e1       	ldi	r23, 0x1F	; 31
   1499e:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   149a2:	4e e1       	ldi	r20, 0x1E	; 30
   149a4:	50 e0       	ldi	r21, 0x00	; 0
   149a6:	68 ed       	ldi	r22, 0xD8	; 216
   149a8:	7f e1       	ldi	r23, 0x1F	; 31
   149aa:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149ae:	4e e7       	ldi	r20, 0x7E	; 126
   149b0:	50 e0       	ldi	r21, 0x00	; 0
   149b2:	b8 01       	movw	r22, r16
   149b4:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   149b8:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   149ba:	c8 01       	movw	r24, r16
   149bc:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   149c0:	60 93 f8 1f 	sts	0x1FF8, r22	; 0x801ff8 <hpdir+0x80>
   149c4:	70 93 f9 1f 	sts	0x1FF9, r23	; 0x801ff9 <hpdir+0x81>
   149c8:	80 93 fa 1f 	sts	0x1FFA, r24	; 0x801ffa <hpdir+0x82>
   149cc:	90 93 fb 1f 	sts	0x1FFB, r25	; 0x801ffb <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149d0:	4e e7       	ldi	r20, 0x7E	; 126
   149d2:	50 e0       	ldi	r21, 0x00	; 0
   149d4:	b8 01       	movw	r22, r16
   149d6:	c4 01       	movw	r24, r8
   149d8:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   149dc:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   149de:	c8 01       	movw	r24, r16
   149e0:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   149e4:	60 93 fc 1f 	sts	0x1FFC, r22	; 0x801ffc <hpdir+0x84>
   149e8:	70 93 fd 1f 	sts	0x1FFD, r23	; 0x801ffd <hpdir+0x85>
   149ec:	80 93 fe 1f 	sts	0x1FFE, r24	; 0x801ffe <hpdir+0x86>
   149f0:	90 93 ff 1f 	sts	0x1FFF, r25	; 0x801fff <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149f4:	4e e7       	ldi	r20, 0x7E	; 126
   149f6:	50 e0       	ldi	r21, 0x00	; 0
   149f8:	b8 01       	movw	r22, r16
   149fa:	c4 01       	movw	r24, r8
   149fc:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14a00:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   14a02:	c8 01       	movw	r24, r16
   14a04:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14a08:	60 93 00 20 	sts	0x2000, r22	; 0x802000 <hpdir+0x88>
   14a0c:	70 93 01 20 	sts	0x2001, r23	; 0x802001 <hpdir+0x89>
   14a10:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <hpdir+0x8a>
   14a14:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a18:	4e e7       	ldi	r20, 0x7E	; 126
   14a1a:	50 e0       	ldi	r21, 0x00	; 0
   14a1c:	b8 01       	movw	r22, r16
   14a1e:	c4 01       	movw	r24, r8
   14a20:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14a24:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14a26:	c8 01       	movw	r24, r16
   14a28:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14a2c:	60 93 04 20 	sts	0x2004, r22	; 0x802004 <hpdir+0x8c>
   14a30:	70 93 05 20 	sts	0x2005, r23	; 0x802005 <hpdir+0x8d>
   14a34:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <hpdir+0x8e>
   14a38:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a3c:	4e e7       	ldi	r20, 0x7E	; 126
   14a3e:	50 e0       	ldi	r21, 0x00	; 0
   14a40:	b8 01       	movw	r22, r16
   14a42:	c4 01       	movw	r24, r8
   14a44:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14a48:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14a4a:	c8 01       	movw	r24, r16
   14a4c:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14a50:	60 93 08 20 	sts	0x2008, r22	; 0x802008 <hpdir+0x90>
   14a54:	70 93 09 20 	sts	0x2009, r23	; 0x802009 <hpdir+0x91>
   14a58:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <hpdir+0x92>
   14a5c:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a60:	4e e7       	ldi	r20, 0x7E	; 126
   14a62:	50 e0       	ldi	r21, 0x00	; 0
   14a64:	b8 01       	movw	r22, r16
   14a66:	c4 01       	movw	r24, r8
   14a68:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14a6c:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   14a6e:	c8 01       	movw	r24, r16
   14a70:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14a74:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <hpdir+0x94>
   14a78:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <hpdir+0x95>
   14a7c:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <hpdir+0x96>
   14a80:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a84:	4e e7       	ldi	r20, 0x7E	; 126
   14a86:	50 e0       	ldi	r21, 0x00	; 0
   14a88:	b8 01       	movw	r22, r16
   14a8a:	c4 01       	movw	r24, r8
   14a8c:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14a90:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14a92:	c8 01       	movw	r24, r16
   14a94:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14a98:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <hpdir+0x98>
   14a9c:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <hpdir+0x99>
   14aa0:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <hpdir+0x9a>
   14aa4:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14aa8:	4e e7       	ldi	r20, 0x7E	; 126
   14aaa:	50 e0       	ldi	r21, 0x00	; 0
   14aac:	b8 01       	movw	r22, r16
   14aae:	c4 01       	movw	r24, r8
   14ab0:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14ab4:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14ab6:	c8 01       	movw	r24, r16
   14ab8:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14abc:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <hpdir+0x9c>
   14ac0:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <hpdir+0x9d>
   14ac4:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0x9e>
   14ac8:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14acc:	4e e7       	ldi	r20, 0x7E	; 126
   14ace:	50 e0       	ldi	r21, 0x00	; 0
   14ad0:	b8 01       	movw	r22, r16
   14ad2:	c4 01       	movw	r24, r8
   14ad4:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
   14ad8:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14ada:	c8 01       	movw	r24, r16
   14adc:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14ae0:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <hpdir+0xa0>
   14ae4:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <hpdir+0xa1>
   14ae8:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <hpdir+0xa2>
   14aec:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14af0:	4e e7       	ldi	r20, 0x7E	; 126
   14af2:	50 e0       	ldi	r21, 0x00	; 0
   14af4:	b8 01       	movw	r22, r16
   14af6:	c4 01       	movw	r24, r8
   14af8:	0e 94 0c 33 	call	0x6618	; 0x6618 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14afc:	c8 01       	movw	r24, r16
   14afe:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
   14b02:	60 93 1c 20 	sts	0x201C, r22	; 0x80201c <hpdir+0xa4>
   14b06:	70 93 1d 20 	sts	0x201D, r23	; 0x80201d <hpdir+0xa5>
   14b0a:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <hpdir+0xa6>
   14b0e:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14b12:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <hpdir+0x94>
   14b16:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <hpdir+0x95>
   14b1a:	40 91 0e 20 	lds	r20, 0x200E	; 0x80200e <hpdir+0x96>
   14b1e:	50 91 0f 20 	lds	r21, 0x200F	; 0x80200f <hpdir+0x97>
   14b22:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <hpdir+0x98>
   14b26:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <hpdir+0x99>
   14b2a:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <hpdir+0x9a>
   14b2e:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <hpdir+0x9b>
   14b32:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__mulsi3>
   14b36:	9b 01       	movw	r18, r22
   14b38:	ac 01       	movw	r20, r24
   14b3a:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <hpdir+0x9c>
   14b3e:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <hpdir+0x9d>
   14b42:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <hpdir+0x9e>
   14b46:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <hpdir+0x9f>
   14b4a:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__mulsi3>
   14b4e:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <hpdir+0xac>
   14b52:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <hpdir+0xad>
   14b56:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <hpdir+0xae>
   14b5a:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14b5e:	01 e0       	ldi	r16, 0x01	; 1
   14b60:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14b62:	c7 01       	movw	r24, r14
   14b64:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>
	if(verbose && !found)
   14b68:	ab 28       	or	r10, r11
   14b6a:	81 f0       	breq	.+32     	; 0x14b8c <hpdir_find_drive+0x37a>
   14b6c:	01 2b       	or	r16, r17
   14b6e:	81 f4       	brne	.+32     	; 0x14b90 <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14b70:	ed b7       	in	r30, 0x3d	; 61
   14b72:	fe b7       	in	r31, 0x3e	; 62
   14b74:	d5 82       	std	Z+5, r13	; 0x05
   14b76:	c4 82       	std	Z+4, r12	; 0x04
   14b78:	80 e1       	ldi	r24, 0x10	; 16
   14b7a:	91 e2       	ldi	r25, 0x21	; 33
   14b7c:	a0 e0       	ldi	r26, 0x00	; 0
   14b7e:	81 83       	std	Z+1, r24	; 0x01
   14b80:	92 83       	std	Z+2, r25	; 0x02
   14b82:	a3 83       	std	Z+3, r26	; 0x03
   14b84:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14b88:	80 e0       	ldi	r24, 0x00	; 0
   14b8a:	03 c0       	rjmp	.+6      	; 0x14b92 <hpdir_find_drive+0x380>
   14b8c:	c8 01       	movw	r24, r16
   14b8e:	02 c0       	rjmp	.+4      	; 0x14b94 <hpdir_find_drive+0x382>
   14b90:	81 e0       	ldi	r24, 0x01	; 1
   14b92:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14b94:	c7 57       	subi	r28, 0x77	; 119
   14b96:	de 4f       	sbci	r29, 0xFE	; 254
   14b98:	0f b6       	in	r0, 0x3f	; 63
   14b9a:	f8 94       	cli
   14b9c:	de bf       	out	0x3e, r29	; 62
   14b9e:	0f be       	out	0x3f, r0	; 63
   14ba0:	cd bf       	out	0x3d, r28	; 61
   14ba2:	df 91       	pop	r29
   14ba4:	cf 91       	pop	r28
   14ba6:	1f 91       	pop	r17
   14ba8:	0f 91       	pop	r16
   14baa:	ff 90       	pop	r15
   14bac:	ef 90       	pop	r14
   14bae:	df 90       	pop	r13
   14bb0:	cf 90       	pop	r12
   14bb2:	bf 90       	pop	r11
   14bb4:	af 90       	pop	r10
   14bb6:	9f 90       	pop	r9
   14bb8:	8f 90       	pop	r8
   14bba:	6f 90       	pop	r6
   14bbc:	5f 90       	pop	r5
   14bbe:	4f 90       	pop	r4
   14bc0:	3f 90       	pop	r3
   14bc2:	2f 90       	pop	r2
   14bc4:	08 95       	ret

00014bc6 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14bc6:	0f 93       	push	r16
   14bc8:	1f 93       	push	r17
   14bca:	25 e0       	ldi	r18, 0x05	; 5
   14bcc:	30 e0       	ldi	r19, 0x00	; 0
   14bce:	fc 01       	movw	r30, r24
   14bd0:	31 83       	std	Z+1, r19	; 0x01
   14bd2:	20 83       	st	Z, r18
   14bd4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14bd8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14bdc:	00 85       	ldd	r16, Z+8	; 0x08
   14bde:	11 85       	ldd	r17, Z+9	; 0x09
   14be0:	20 e0       	ldi	r18, 0x00	; 0
   14be2:	30 e0       	ldi	r19, 0x00	; 0
   14be4:	42 e0       	ldi	r20, 0x02	; 2
   14be6:	50 e0       	ldi	r21, 0x00	; 0
   14be8:	60 e0       	ldi	r22, 0x00	; 0
   14bea:	70 e0       	ldi	r23, 0x00	; 0
   14bec:	88 e9       	ldi	r24, 0x98	; 152
   14bee:	99 e1       	ldi	r25, 0x19	; 25
   14bf0:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14bf4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14bf8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14bfc:	02 85       	ldd	r16, Z+10	; 0x0a
   14bfe:	13 85       	ldd	r17, Z+11	; 0x0b
   14c00:	20 e0       	ldi	r18, 0x00	; 0
   14c02:	30 e0       	ldi	r19, 0x00	; 0
   14c04:	42 e0       	ldi	r20, 0x02	; 2
   14c06:	50 e0       	ldi	r21, 0x00	; 0
   14c08:	61 e0       	ldi	r22, 0x01	; 1
   14c0a:	70 e0       	ldi	r23, 0x00	; 0
   14c0c:	88 e9       	ldi	r24, 0x98	; 152
   14c0e:	99 e1       	ldi	r25, 0x19	; 25
   14c10:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14c14:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c18:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c1c:	04 85       	ldd	r16, Z+12	; 0x0c
   14c1e:	10 e0       	ldi	r17, 0x00	; 0
   14c20:	20 e0       	ldi	r18, 0x00	; 0
   14c22:	30 e0       	ldi	r19, 0x00	; 0
   14c24:	41 e0       	ldi	r20, 0x01	; 1
   14c26:	50 e0       	ldi	r21, 0x00	; 0
   14c28:	64 e0       	ldi	r22, 0x04	; 4
   14c2a:	70 e0       	ldi	r23, 0x00	; 0
   14c2c:	88 e9       	ldi	r24, 0x98	; 152
   14c2e:	99 e1       	ldi	r25, 0x19	; 25
   14c30:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14c34:	88 e9       	ldi	r24, 0x98	; 152
   14c36:	99 e1       	ldi	r25, 0x19	; 25
   14c38:	1f 91       	pop	r17
   14c3a:	0f 91       	pop	r16
   14c3c:	08 95       	ret

00014c3e <SS80UnitPack>:
   14c3e:	0f 93       	push	r16
   14c40:	1f 93       	push	r17
   14c42:	23 e1       	ldi	r18, 0x13	; 19
   14c44:	30 e0       	ldi	r19, 0x00	; 0
   14c46:	fc 01       	movw	r30, r24
   14c48:	31 83       	std	Z+1, r19	; 0x01
   14c4a:	20 83       	st	Z, r18
   14c4c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c50:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c54:	05 85       	ldd	r16, Z+13	; 0x0d
   14c56:	10 e0       	ldi	r17, 0x00	; 0
   14c58:	20 e0       	ldi	r18, 0x00	; 0
   14c5a:	30 e0       	ldi	r19, 0x00	; 0
   14c5c:	41 e0       	ldi	r20, 0x01	; 1
   14c5e:	50 e0       	ldi	r21, 0x00	; 0
   14c60:	60 e0       	ldi	r22, 0x00	; 0
   14c62:	70 e0       	ldi	r23, 0x00	; 0
   14c64:	85 e8       	ldi	r24, 0x85	; 133
   14c66:	99 e1       	ldi	r25, 0x19	; 25
   14c68:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14c6c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c70:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c74:	06 85       	ldd	r16, Z+14	; 0x0e
   14c76:	17 85       	ldd	r17, Z+15	; 0x0f
   14c78:	20 89       	ldd	r18, Z+16	; 0x10
   14c7a:	31 89       	ldd	r19, Z+17	; 0x11
   14c7c:	43 e0       	ldi	r20, 0x03	; 3
   14c7e:	50 e0       	ldi	r21, 0x00	; 0
   14c80:	61 e0       	ldi	r22, 0x01	; 1
   14c82:	70 e0       	ldi	r23, 0x00	; 0
   14c84:	85 e8       	ldi	r24, 0x85	; 133
   14c86:	99 e1       	ldi	r25, 0x19	; 25
   14c88:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14c8c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14c90:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14c94:	02 89       	ldd	r16, Z+18	; 0x12
   14c96:	13 89       	ldd	r17, Z+19	; 0x13
   14c98:	20 e0       	ldi	r18, 0x00	; 0
   14c9a:	30 e0       	ldi	r19, 0x00	; 0
   14c9c:	42 e0       	ldi	r20, 0x02	; 2
   14c9e:	50 e0       	ldi	r21, 0x00	; 0
   14ca0:	64 e0       	ldi	r22, 0x04	; 4
   14ca2:	70 e0       	ldi	r23, 0x00	; 0
   14ca4:	85 e8       	ldi	r24, 0x85	; 133
   14ca6:	99 e1       	ldi	r25, 0x19	; 25
   14ca8:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14cac:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cb0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cb4:	04 89       	ldd	r16, Z+20	; 0x14
   14cb6:	10 e0       	ldi	r17, 0x00	; 0
   14cb8:	20 e0       	ldi	r18, 0x00	; 0
   14cba:	30 e0       	ldi	r19, 0x00	; 0
   14cbc:	41 e0       	ldi	r20, 0x01	; 1
   14cbe:	50 e0       	ldi	r21, 0x00	; 0
   14cc0:	66 e0       	ldi	r22, 0x06	; 6
   14cc2:	70 e0       	ldi	r23, 0x00	; 0
   14cc4:	85 e8       	ldi	r24, 0x85	; 133
   14cc6:	99 e1       	ldi	r25, 0x19	; 25
   14cc8:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14ccc:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cd0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cd4:	05 89       	ldd	r16, Z+21	; 0x15
   14cd6:	10 e0       	ldi	r17, 0x00	; 0
   14cd8:	20 e0       	ldi	r18, 0x00	; 0
   14cda:	30 e0       	ldi	r19, 0x00	; 0
   14cdc:	41 e0       	ldi	r20, 0x01	; 1
   14cde:	50 e0       	ldi	r21, 0x00	; 0
   14ce0:	67 e0       	ldi	r22, 0x07	; 7
   14ce2:	70 e0       	ldi	r23, 0x00	; 0
   14ce4:	85 e8       	ldi	r24, 0x85	; 133
   14ce6:	99 e1       	ldi	r25, 0x19	; 25
   14ce8:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14cec:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14cf0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14cf4:	06 89       	ldd	r16, Z+22	; 0x16
   14cf6:	17 89       	ldd	r17, Z+23	; 0x17
   14cf8:	20 e0       	ldi	r18, 0x00	; 0
   14cfa:	30 e0       	ldi	r19, 0x00	; 0
   14cfc:	42 e0       	ldi	r20, 0x02	; 2
   14cfe:	50 e0       	ldi	r21, 0x00	; 0
   14d00:	68 e0       	ldi	r22, 0x08	; 8
   14d02:	70 e0       	ldi	r23, 0x00	; 0
   14d04:	85 e8       	ldi	r24, 0x85	; 133
   14d06:	99 e1       	ldi	r25, 0x19	; 25
   14d08:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14d0c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d10:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d14:	00 8d       	ldd	r16, Z+24	; 0x18
   14d16:	11 8d       	ldd	r17, Z+25	; 0x19
   14d18:	20 e0       	ldi	r18, 0x00	; 0
   14d1a:	30 e0       	ldi	r19, 0x00	; 0
   14d1c:	42 e0       	ldi	r20, 0x02	; 2
   14d1e:	50 e0       	ldi	r21, 0x00	; 0
   14d20:	6a e0       	ldi	r22, 0x0A	; 10
   14d22:	70 e0       	ldi	r23, 0x00	; 0
   14d24:	85 e8       	ldi	r24, 0x85	; 133
   14d26:	99 e1       	ldi	r25, 0x19	; 25
   14d28:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14d2c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d30:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d34:	02 8d       	ldd	r16, Z+26	; 0x1a
   14d36:	13 8d       	ldd	r17, Z+27	; 0x1b
   14d38:	20 e0       	ldi	r18, 0x00	; 0
   14d3a:	30 e0       	ldi	r19, 0x00	; 0
   14d3c:	42 e0       	ldi	r20, 0x02	; 2
   14d3e:	50 e0       	ldi	r21, 0x00	; 0
   14d40:	6c e0       	ldi	r22, 0x0C	; 12
   14d42:	70 e0       	ldi	r23, 0x00	; 0
   14d44:	85 e8       	ldi	r24, 0x85	; 133
   14d46:	99 e1       	ldi	r25, 0x19	; 25
   14d48:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14d4c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d50:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d54:	04 8d       	ldd	r16, Z+28	; 0x1c
   14d56:	15 8d       	ldd	r17, Z+29	; 0x1d
   14d58:	20 e0       	ldi	r18, 0x00	; 0
   14d5a:	30 e0       	ldi	r19, 0x00	; 0
   14d5c:	42 e0       	ldi	r20, 0x02	; 2
   14d5e:	50 e0       	ldi	r21, 0x00	; 0
   14d60:	6e e0       	ldi	r22, 0x0E	; 14
   14d62:	70 e0       	ldi	r23, 0x00	; 0
   14d64:	85 e8       	ldi	r24, 0x85	; 133
   14d66:	99 e1       	ldi	r25, 0x19	; 25
   14d68:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14d6c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d70:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d74:	06 8d       	ldd	r16, Z+30	; 0x1e
   14d76:	10 e0       	ldi	r17, 0x00	; 0
   14d78:	20 e0       	ldi	r18, 0x00	; 0
   14d7a:	30 e0       	ldi	r19, 0x00	; 0
   14d7c:	41 e0       	ldi	r20, 0x01	; 1
   14d7e:	50 e0       	ldi	r21, 0x00	; 0
   14d80:	60 e1       	ldi	r22, 0x10	; 16
   14d82:	70 e0       	ldi	r23, 0x00	; 0
   14d84:	85 e8       	ldi	r24, 0x85	; 133
   14d86:	99 e1       	ldi	r25, 0x19	; 25
   14d88:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14d8c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14d90:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14d94:	07 8d       	ldd	r16, Z+31	; 0x1f
   14d96:	10 e0       	ldi	r17, 0x00	; 0
   14d98:	20 e0       	ldi	r18, 0x00	; 0
   14d9a:	30 e0       	ldi	r19, 0x00	; 0
   14d9c:	41 e0       	ldi	r20, 0x01	; 1
   14d9e:	50 e0       	ldi	r21, 0x00	; 0
   14da0:	61 e1       	ldi	r22, 0x11	; 17
   14da2:	70 e0       	ldi	r23, 0x00	; 0
   14da4:	85 e8       	ldi	r24, 0x85	; 133
   14da6:	99 e1       	ldi	r25, 0x19	; 25
   14da8:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14dac:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14db0:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14db4:	00 a1       	ldd	r16, Z+32	; 0x20
   14db6:	10 e0       	ldi	r17, 0x00	; 0
   14db8:	20 e0       	ldi	r18, 0x00	; 0
   14dba:	30 e0       	ldi	r19, 0x00	; 0
   14dbc:	41 e0       	ldi	r20, 0x01	; 1
   14dbe:	50 e0       	ldi	r21, 0x00	; 0
   14dc0:	62 e1       	ldi	r22, 0x12	; 18
   14dc2:	70 e0       	ldi	r23, 0x00	; 0
   14dc4:	85 e8       	ldi	r24, 0x85	; 133
   14dc6:	99 e1       	ldi	r25, 0x19	; 25
   14dc8:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14dcc:	85 e8       	ldi	r24, 0x85	; 133
   14dce:	99 e1       	ldi	r25, 0x19	; 25
   14dd0:	1f 91       	pop	r17
   14dd2:	0f 91       	pop	r16
   14dd4:	08 95       	ret

00014dd6 <SS80VolumePack>:
   14dd6:	0f 93       	push	r16
   14dd8:	1f 93       	push	r17
   14dda:	2d e0       	ldi	r18, 0x0D	; 13
   14ddc:	30 e0       	ldi	r19, 0x00	; 0
   14dde:	fc 01       	movw	r30, r24
   14de0:	31 83       	std	Z+1, r19	; 0x01
   14de2:	20 83       	st	Z, r18
   14de4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14de8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14dec:	01 a1       	ldd	r16, Z+33	; 0x21
   14dee:	12 a1       	ldd	r17, Z+34	; 0x22
   14df0:	23 a1       	ldd	r18, Z+35	; 0x23
   14df2:	34 a1       	ldd	r19, Z+36	; 0x24
   14df4:	43 e0       	ldi	r20, 0x03	; 3
   14df6:	50 e0       	ldi	r21, 0x00	; 0
   14df8:	60 e0       	ldi	r22, 0x00	; 0
   14dfa:	70 e0       	ldi	r23, 0x00	; 0
   14dfc:	88 e7       	ldi	r24, 0x78	; 120
   14dfe:	99 e1       	ldi	r25, 0x19	; 25
   14e00:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14e04:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e08:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e0c:	05 a1       	ldd	r16, Z+37	; 0x25
   14e0e:	10 e0       	ldi	r17, 0x00	; 0
   14e10:	20 e0       	ldi	r18, 0x00	; 0
   14e12:	30 e0       	ldi	r19, 0x00	; 0
   14e14:	41 e0       	ldi	r20, 0x01	; 1
   14e16:	50 e0       	ldi	r21, 0x00	; 0
   14e18:	63 e0       	ldi	r22, 0x03	; 3
   14e1a:	70 e0       	ldi	r23, 0x00	; 0
   14e1c:	88 e7       	ldi	r24, 0x78	; 120
   14e1e:	99 e1       	ldi	r25, 0x19	; 25
   14e20:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14e24:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e28:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e2c:	06 a1       	ldd	r16, Z+38	; 0x26
   14e2e:	17 a1       	ldd	r17, Z+39	; 0x27
   14e30:	20 e0       	ldi	r18, 0x00	; 0
   14e32:	30 e0       	ldi	r19, 0x00	; 0
   14e34:	42 e0       	ldi	r20, 0x02	; 2
   14e36:	50 e0       	ldi	r21, 0x00	; 0
   14e38:	64 e0       	ldi	r22, 0x04	; 4
   14e3a:	70 e0       	ldi	r23, 0x00	; 0
   14e3c:	88 e7       	ldi	r24, 0x78	; 120
   14e3e:	99 e1       	ldi	r25, 0x19	; 25
   14e40:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14e44:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e48:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e4c:	00 a5       	ldd	r16, Z+40	; 0x28
   14e4e:	11 a5       	ldd	r17, Z+41	; 0x29
   14e50:	22 a5       	ldd	r18, Z+42	; 0x2a
   14e52:	33 a5       	ldd	r19, Z+43	; 0x2b
   14e54:	46 e0       	ldi	r20, 0x06	; 6
   14e56:	50 e0       	ldi	r21, 0x00	; 0
   14e58:	66 e0       	ldi	r22, 0x06	; 6
   14e5a:	70 e0       	ldi	r23, 0x00	; 0
   14e5c:	88 e7       	ldi	r24, 0x78	; 120
   14e5e:	99 e1       	ldi	r25, 0x19	; 25
   14e60:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14e64:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14e68:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14e6c:	04 a5       	ldd	r16, Z+44	; 0x2c
   14e6e:	10 e0       	ldi	r17, 0x00	; 0
   14e70:	20 e0       	ldi	r18, 0x00	; 0
   14e72:	30 e0       	ldi	r19, 0x00	; 0
   14e74:	41 e0       	ldi	r20, 0x01	; 1
   14e76:	50 e0       	ldi	r21, 0x00	; 0
   14e78:	6c e0       	ldi	r22, 0x0C	; 12
   14e7a:	70 e0       	ldi	r23, 0x00	; 0
   14e7c:	88 e7       	ldi	r24, 0x78	; 120
   14e7e:	99 e1       	ldi	r25, 0x19	; 25
   14e80:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   14e84:	88 e7       	ldi	r24, 0x78	; 120
   14e86:	99 e1       	ldi	r25, 0x19	; 25
   14e88:	1f 91       	pop	r17
   14e8a:	0f 91       	pop	r16
   14e8c:	08 95       	ret

00014e8e <SS80_test_extended_status>:
   14e8e:	9b 01       	movw	r18, r22
   14e90:	43 e0       	ldi	r20, 0x03	; 3
   14e92:	35 95       	asr	r19
   14e94:	27 95       	ror	r18
   14e96:	4a 95       	dec	r20
   14e98:	e1 f7       	brne	.-8      	; 0x14e92 <SS80_test_extended_status+0x4>
   14e9a:	82 0f       	add	r24, r18
   14e9c:	93 1f       	adc	r25, r19
   14e9e:	67 70       	andi	r22, 0x07	; 7
   14ea0:	77 27       	eor	r23, r23
   14ea2:	20 e8       	ldi	r18, 0x80	; 128
   14ea4:	30 e0       	ldi	r19, 0x00	; 0
   14ea6:	02 c0       	rjmp	.+4      	; 0x14eac <SS80_test_extended_status+0x1e>
   14ea8:	35 95       	asr	r19
   14eaa:	27 95       	ror	r18
   14eac:	6a 95       	dec	r22
   14eae:	e2 f7       	brpl	.-8      	; 0x14ea8 <SS80_test_extended_status+0x1a>
   14eb0:	fc 01       	movw	r30, r24
   14eb2:	80 81       	ld	r24, Z
   14eb4:	28 23       	and	r18, r24
   14eb6:	81 e0       	ldi	r24, 0x01	; 1
   14eb8:	90 e0       	ldi	r25, 0x00	; 0
   14eba:	11 f4       	brne	.+4      	; 0x14ec0 <SS80_test_extended_status+0x32>
   14ebc:	80 e0       	ldi	r24, 0x00	; 0
   14ebe:	90 e0       	ldi	r25, 0x00	; 0
   14ec0:	08 95       	ret

00014ec2 <SS80_display_extended_status>:
   14ec2:	6f 92       	push	r6
   14ec4:	7f 92       	push	r7
   14ec6:	8f 92       	push	r8
   14ec8:	ef 92       	push	r14
   14eca:	ff 92       	push	r15
   14ecc:	0f 93       	push	r16
   14ece:	1f 93       	push	r17
   14ed0:	cf 93       	push	r28
   14ed2:	df 93       	push	r29
   14ed4:	ad b7       	in	r26, 0x3d	; 61
   14ed6:	be b7       	in	r27, 0x3e	; 62
   14ed8:	17 97       	sbiw	r26, 0x07	; 7
   14eda:	0f b6       	in	r0, 0x3f	; 63
   14edc:	f8 94       	cli
   14ede:	be bf       	out	0x3e, r27	; 62
   14ee0:	0f be       	out	0x3f, r0	; 63
   14ee2:	ad bf       	out	0x3d, r26	; 61
   14ee4:	fc 01       	movw	r30, r24
   14ee6:	ac 01       	movw	r20, r24
   14ee8:	48 5f       	subi	r20, 0xF8	; 248
   14eea:	5f 4f       	sbci	r21, 0xFF	; 255
   14eec:	20 e0       	ldi	r18, 0x00	; 0
   14eee:	30 e0       	ldi	r19, 0x00	; 0
   14ef0:	a1 91       	ld	r26, Z+
   14ef2:	aa 23       	and	r26, r26
   14ef4:	11 f0       	breq	.+4      	; 0x14efa <SS80_display_extended_status+0x38>
   14ef6:	21 e0       	ldi	r18, 0x01	; 1
   14ef8:	30 e0       	ldi	r19, 0x00	; 0
   14efa:	e4 17       	cp	r30, r20
   14efc:	f5 07       	cpc	r31, r21
   14efe:	c1 f7       	brne	.-16     	; 0x14ef0 <SS80_display_extended_status+0x2e>
   14f00:	23 2b       	or	r18, r19
   14f02:	81 f1       	breq	.+96     	; 0x14f64 <SS80_display_extended_status+0xa2>
   14f04:	ec 01       	movw	r28, r24
   14f06:	ed b7       	in	r30, 0x3d	; 61
   14f08:	fe b7       	in	r31, 0x3e	; 62
   14f0a:	75 83       	std	Z+5, r23	; 0x05
   14f0c:	64 83       	std	Z+4, r22	; 0x04
   14f0e:	80 eb       	ldi	r24, 0xB0	; 176
   14f10:	97 e2       	ldi	r25, 0x27	; 39
   14f12:	a0 e0       	ldi	r26, 0x00	; 0
   14f14:	81 83       	std	Z+1, r24	; 0x01
   14f16:	92 83       	std	Z+2, r25	; 0x02
   14f18:	a3 83       	std	Z+3, r26	; 0x03
   14f1a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   14f1e:	0c e7       	ldi	r16, 0x7C	; 124
   14f20:	12 e0       	ldi	r17, 0x02	; 2
   14f22:	85 ea       	ldi	r24, 0xA5	; 165
   14f24:	97 e2       	ldi	r25, 0x27	; 39
   14f26:	3c 01       	movw	r6, r24
   14f28:	81 2c       	mov	r8, r1
   14f2a:	f8 01       	movw	r30, r16
   14f2c:	e0 80       	ld	r14, Z
   14f2e:	f1 80       	ldd	r15, Z+1	; 0x01
   14f30:	ff ef       	ldi	r31, 0xFF	; 255
   14f32:	ef 16       	cp	r14, r31
   14f34:	ff 06       	cpc	r15, r31
   14f36:	b1 f0       	breq	.+44     	; 0x14f64 <SS80_display_extended_status+0xa2>
   14f38:	b7 01       	movw	r22, r14
   14f3a:	ce 01       	movw	r24, r28
   14f3c:	a8 df       	rcall	.-176    	; 0x14e8e <SS80_test_extended_status>
   14f3e:	89 2b       	or	r24, r25
   14f40:	71 f0       	breq	.+28     	; 0x14f5e <SS80_display_extended_status+0x9c>
   14f42:	f8 01       	movw	r30, r16
   14f44:	82 81       	ldd	r24, Z+2	; 0x02
   14f46:	93 81       	ldd	r25, Z+3	; 0x03
   14f48:	ed b7       	in	r30, 0x3d	; 61
   14f4a:	fe b7       	in	r31, 0x3e	; 62
   14f4c:	97 83       	std	Z+7, r25	; 0x07
   14f4e:	86 83       	std	Z+6, r24	; 0x06
   14f50:	f5 82       	std	Z+5, r15	; 0x05
   14f52:	e4 82       	std	Z+4, r14	; 0x04
   14f54:	61 82       	std	Z+1, r6	; 0x01
   14f56:	72 82       	std	Z+2, r7	; 0x02
   14f58:	83 82       	std	Z+3, r8	; 0x03
   14f5a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   14f5e:	0c 5f       	subi	r16, 0xFC	; 252
   14f60:	1f 4f       	sbci	r17, 0xFF	; 255
   14f62:	e3 cf       	rjmp	.-58     	; 0x14f2a <SS80_display_extended_status+0x68>
   14f64:	ad b7       	in	r26, 0x3d	; 61
   14f66:	be b7       	in	r27, 0x3e	; 62
   14f68:	17 96       	adiw	r26, 0x07	; 7
   14f6a:	0f b6       	in	r0, 0x3f	; 63
   14f6c:	f8 94       	cli
   14f6e:	be bf       	out	0x3e, r27	; 62
   14f70:	0f be       	out	0x3f, r0	; 63
   14f72:	ad bf       	out	0x3d, r26	; 61
   14f74:	df 91       	pop	r29
   14f76:	cf 91       	pop	r28
   14f78:	1f 91       	pop	r17
   14f7a:	0f 91       	pop	r16
   14f7c:	ff 90       	pop	r15
   14f7e:	ef 90       	pop	r14
   14f80:	8f 90       	pop	r8
   14f82:	7f 90       	pop	r7
   14f84:	6f 90       	pop	r6
   14f86:	08 95       	ret

00014f88 <SS80_send_status>:
   14f88:	a9 e1       	ldi	r26, 0x19	; 25
   14f8a:	b0 e0       	ldi	r27, 0x00	; 0
   14f8c:	ea ec       	ldi	r30, 0xCA	; 202
   14f8e:	f7 ea       	ldi	r31, 0xA7	; 167
   14f90:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
   14f94:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f98:	85 ff       	sbrs	r24, 5
   14f9a:	0a c0       	rjmp	.+20     	; 0x14fb0 <SS80_send_status+0x28>
   14f9c:	81 e9       	ldi	r24, 0x91	; 145
   14f9e:	97 e2       	ldi	r25, 0x27	; 39
   14fa0:	a0 e0       	ldi	r26, 0x00	; 0
   14fa2:	ed b7       	in	r30, 0x3d	; 61
   14fa4:	fe b7       	in	r31, 0x3e	; 62
   14fa6:	81 83       	std	Z+1, r24	; 0x01
   14fa8:	92 83       	std	Z+2, r25	; 0x02
   14faa:	a3 83       	std	Z+3, r26	; 0x03
   14fac:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   14fb0:	ce 01       	movw	r24, r28
   14fb2:	04 96       	adiw	r24, 0x04	; 4
   14fb4:	7c 01       	movw	r14, r24
   14fb6:	84 e1       	ldi	r24, 0x14	; 20
   14fb8:	f7 01       	movw	r30, r14
   14fba:	11 92       	st	Z+, r1
   14fbc:	8a 95       	dec	r24
   14fbe:	e9 f7       	brne	.-6      	; 0x14fba <SS80_send_status+0x32>
   14fc0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14fc4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14fc8:	86 81       	ldd	r24, Z+6	; 0x06
   14fca:	20 e1       	ldi	r18, 0x10	; 16
   14fcc:	82 9f       	mul	r24, r18
   14fce:	c0 01       	movw	r24, r0
   14fd0:	11 24       	eor	r1, r1
   14fd2:	95 81       	ldd	r25, Z+5	; 0x05
   14fd4:	9f 70       	andi	r25, 0x0F	; 15
   14fd6:	89 2b       	or	r24, r25
   14fd8:	8c 83       	std	Y+4, r24	; 0x04
   14fda:	8f ef       	ldi	r24, 0xFF	; 255
   14fdc:	8d 83       	std	Y+5, r24	; 0x05
   14fde:	83 81       	ldd	r24, Z+3	; 0x03
   14fe0:	86 ff       	sbrs	r24, 6
   14fe2:	02 c0       	rjmp	.+4      	; 0x14fe8 <SS80_send_status+0x60>
   14fe4:	92 e0       	ldi	r25, 0x02	; 2
   14fe6:	9e 83       	std	Y+6, r25	; 0x06
   14fe8:	82 ff       	sbrs	r24, 2
   14fea:	03 c0       	rjmp	.+6      	; 0x14ff2 <SS80_send_status+0x6a>
   14fec:	9e 81       	ldd	r25, Y+6	; 0x06
   14fee:	91 60       	ori	r25, 0x01	; 1
   14ff0:	9e 83       	std	Y+6, r25	; 0x06
   14ff2:	80 ff       	sbrs	r24, 0
   14ff4:	02 c0       	rjmp	.+4      	; 0x14ffa <SS80_send_status+0x72>
   14ff6:	82 e0       	ldi	r24, 0x02	; 2
   14ff8:	88 87       	std	Y+8, r24	; 0x08
   14ffa:	83 81       	ldd	r24, Z+3	; 0x03
   14ffc:	81 ff       	sbrs	r24, 1
   14ffe:	03 c0       	rjmp	.+6      	; 0x15006 <SS80_send_status+0x7e>
   15000:	88 85       	ldd	r24, Y+8	; 0x08
   15002:	82 60       	ori	r24, 0x02	; 2
   15004:	88 87       	std	Y+8, r24	; 0x08
   15006:	83 81       	ldd	r24, Z+3	; 0x03
   15008:	83 ff       	sbrs	r24, 3
   1500a:	02 c0       	rjmp	.+4      	; 0x15010 <SS80_send_status+0x88>
   1500c:	88 e0       	ldi	r24, 0x08	; 8
   1500e:	8a 87       	std	Y+10, r24	; 0x0a
   15010:	83 81       	ldd	r24, Z+3	; 0x03
   15012:	94 81       	ldd	r25, Z+4	; 0x04
   15014:	89 2b       	or	r24, r25
   15016:	59 f4       	brne	.+22     	; 0x1502e <SS80_send_status+0xa6>
   15018:	07 81       	ldd	r16, Z+7	; 0x07
   1501a:	10 85       	ldd	r17, Z+8	; 0x08
   1501c:	21 85       	ldd	r18, Z+9	; 0x09
   1501e:	32 85       	ldd	r19, Z+10	; 0x0a
   15020:	46 e0       	ldi	r20, 0x06	; 6
   15022:	50 e0       	ldi	r21, 0x00	; 0
   15024:	6a e0       	ldi	r22, 0x0A	; 10
   15026:	70 e0       	ldi	r23, 0x00	; 0
   15028:	c7 01       	movw	r24, r14
   1502a:	0e 94 5e c0 	call	0x180bc	; 0x180bc <V2B_MSB>
   1502e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15032:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15036:	83 81       	ldd	r24, Z+3	; 0x03
   15038:	94 81       	ldd	r25, Z+4	; 0x04
   1503a:	89 2b       	or	r24, r25
   1503c:	11 f0       	breq	.+4      	; 0x15042 <SS80_send_status+0xba>
   1503e:	81 e0       	ldi	r24, 0x01	; 1
   15040:	82 83       	std	Z+2, r24	; 0x02
   15042:	80 e0       	ldi	r24, 0x00	; 0
   15044:	91 e0       	ldi	r25, 0x01	; 1
   15046:	99 8f       	std	Y+25, r25	; 0x19
   15048:	88 8f       	std	Y+24, r24	; 0x18
   1504a:	ae 01       	movw	r20, r28
   1504c:	48 5e       	subi	r20, 0xE8	; 232
   1504e:	5f 4f       	sbci	r21, 0xFF	; 255
   15050:	64 e1       	ldi	r22, 0x14	; 20
   15052:	70 e0       	ldi	r23, 0x00	; 0
   15054:	c7 01       	movw	r24, r14
   15056:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   1505a:	44 97       	sbiw	r24, 0x14	; 20
   1505c:	71 f0       	breq	.+28     	; 0x1507a <SS80_send_status+0xf2>
   1505e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15062:	80 ff       	sbrs	r24, 0
   15064:	0a c0       	rjmp	.+20     	; 0x1507a <SS80_send_status+0xf2>
   15066:	86 e7       	ldi	r24, 0x76	; 118
   15068:	97 e2       	ldi	r25, 0x27	; 39
   1506a:	a0 e0       	ldi	r26, 0x00	; 0
   1506c:	ed b7       	in	r30, 0x3d	; 61
   1506e:	fe b7       	in	r31, 0x3e	; 62
   15070:	81 83       	std	Z+1, r24	; 0x01
   15072:	92 83       	std	Z+2, r25	; 0x02
   15074:	a3 83       	std	Z+3, r26	; 0x03
   15076:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1507a:	88 8d       	ldd	r24, Y+24	; 0x18
   1507c:	99 8d       	ldd	r25, Y+25	; 0x19
   1507e:	88 27       	eor	r24, r24
   15080:	90 7d       	andi	r25, 0xD0	; 208
   15082:	69 96       	adiw	r28, 0x19	; 25
   15084:	e6 e0       	ldi	r30, 0x06	; 6
   15086:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0001508a <SS80_describe>:
   1508a:	a7 e0       	ldi	r26, 0x07	; 7
   1508c:	b0 e0       	ldi	r27, 0x00	; 0
   1508e:	eb e4       	ldi	r30, 0x4B	; 75
   15090:	f8 ea       	ldi	r31, 0xA8	; 168
   15092:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   15096:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1509a:	85 ff       	sbrs	r24, 5
   1509c:	0a c0       	rjmp	.+20     	; 0x150b2 <SS80_describe+0x28>
   1509e:	85 e6       	ldi	r24, 0x65	; 101
   150a0:	97 e2       	ldi	r25, 0x27	; 39
   150a2:	a0 e0       	ldi	r26, 0x00	; 0
   150a4:	ed b7       	in	r30, 0x3d	; 61
   150a6:	fe b7       	in	r31, 0x3e	; 62
   150a8:	81 83       	std	Z+1, r24	; 0x01
   150aa:	92 83       	std	Z+2, r25	; 0x02
   150ac:	a3 83       	std	Z+3, r26	; 0x03
   150ae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   150b2:	1f 82       	std	Y+7, r1	; 0x07
   150b4:	1e 82       	std	Y+6, r1	; 0x06
   150b6:	ce 01       	movw	r24, r28
   150b8:	04 96       	adiw	r24, 0x04	; 4
   150ba:	85 dd       	rcall	.-1270   	; 0x14bc6 <SS80ControllerPack>
   150bc:	6c 81       	ldd	r22, Y+4	; 0x04
   150be:	7d 81       	ldd	r23, Y+5	; 0x05
   150c0:	ae 01       	movw	r20, r28
   150c2:	4a 5f       	subi	r20, 0xFA	; 250
   150c4:	5f 4f       	sbci	r21, 0xFF	; 255
   150c6:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   150ca:	2c 81       	ldd	r18, Y+4	; 0x04
   150cc:	3d 81       	ldd	r19, Y+5	; 0x05
   150ce:	82 17       	cp	r24, r18
   150d0:	93 07       	cpc	r25, r19
   150d2:	39 f0       	breq	.+14     	; 0x150e2 <SS80_describe+0x58>
   150d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150d8:	80 ff       	sbrs	r24, 0
   150da:	3c c0       	rjmp	.+120    	; 0x15154 <SS80_describe+0xca>
   150dc:	82 e4       	ldi	r24, 0x42	; 66
   150de:	97 e2       	ldi	r25, 0x27	; 39
   150e0:	31 c0       	rjmp	.+98     	; 0x15144 <SS80_describe+0xba>
   150e2:	1f 82       	std	Y+7, r1	; 0x07
   150e4:	1e 82       	std	Y+6, r1	; 0x06
   150e6:	ce 01       	movw	r24, r28
   150e8:	04 96       	adiw	r24, 0x04	; 4
   150ea:	a9 dd       	rcall	.-1198   	; 0x14c3e <SS80UnitPack>
   150ec:	6c 81       	ldd	r22, Y+4	; 0x04
   150ee:	7d 81       	ldd	r23, Y+5	; 0x05
   150f0:	ae 01       	movw	r20, r28
   150f2:	4a 5f       	subi	r20, 0xFA	; 250
   150f4:	5f 4f       	sbci	r21, 0xFF	; 255
   150f6:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   150fa:	2c 81       	ldd	r18, Y+4	; 0x04
   150fc:	3d 81       	ldd	r19, Y+5	; 0x05
   150fe:	82 17       	cp	r24, r18
   15100:	93 07       	cpc	r25, r19
   15102:	39 f0       	breq	.+14     	; 0x15112 <SS80_describe+0x88>
   15104:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15108:	80 ff       	sbrs	r24, 0
   1510a:	24 c0       	rjmp	.+72     	; 0x15154 <SS80_describe+0xca>
   1510c:	85 e2       	ldi	r24, 0x25	; 37
   1510e:	97 e2       	ldi	r25, 0x27	; 39
   15110:	19 c0       	rjmp	.+50     	; 0x15144 <SS80_describe+0xba>
   15112:	80 e0       	ldi	r24, 0x00	; 0
   15114:	91 e0       	ldi	r25, 0x01	; 1
   15116:	9f 83       	std	Y+7, r25	; 0x07
   15118:	8e 83       	std	Y+6, r24	; 0x06
   1511a:	ce 01       	movw	r24, r28
   1511c:	04 96       	adiw	r24, 0x04	; 4
   1511e:	5b de       	rcall	.-842    	; 0x14dd6 <SS80VolumePack>
   15120:	6c 81       	ldd	r22, Y+4	; 0x04
   15122:	7d 81       	ldd	r23, Y+5	; 0x05
   15124:	ae 01       	movw	r20, r28
   15126:	4a 5f       	subi	r20, 0xFA	; 250
   15128:	5f 4f       	sbci	r21, 0xFF	; 255
   1512a:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   1512e:	2c 81       	ldd	r18, Y+4	; 0x04
   15130:	3d 81       	ldd	r19, Y+5	; 0x05
   15132:	82 17       	cp	r24, r18
   15134:	93 07       	cpc	r25, r19
   15136:	99 f0       	breq	.+38     	; 0x1515e <SS80_describe+0xd4>
   15138:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1513c:	80 ff       	sbrs	r24, 0
   1513e:	0a c0       	rjmp	.+20     	; 0x15154 <SS80_describe+0xca>
   15140:	86 e0       	ldi	r24, 0x06	; 6
   15142:	97 e2       	ldi	r25, 0x27	; 39
   15144:	a0 e0       	ldi	r26, 0x00	; 0
   15146:	ed b7       	in	r30, 0x3d	; 61
   15148:	fe b7       	in	r31, 0x3e	; 62
   1514a:	81 83       	std	Z+1, r24	; 0x01
   1514c:	92 83       	std	Z+2, r25	; 0x02
   1514e:	a3 83       	std	Z+3, r26	; 0x03
   15150:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15154:	8e 81       	ldd	r24, Y+6	; 0x06
   15156:	9f 81       	ldd	r25, Y+7	; 0x07
   15158:	88 27       	eor	r24, r24
   1515a:	90 7d       	andi	r25, 0xD0	; 208
   1515c:	02 c0       	rjmp	.+4      	; 0x15162 <SS80_describe+0xd8>
   1515e:	80 e0       	ldi	r24, 0x00	; 0
   15160:	90 e0       	ldi	r25, 0x00	; 0
   15162:	27 96       	adiw	r28, 0x07	; 7
   15164:	e2 e0       	ldi	r30, 0x02	; 2
   15166:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

0001516a <SS80_Check_Unit>:
   1516a:	00 d0       	rcall	.+0      	; 0x1516c <SS80_Check_Unit+0x2>
   1516c:	00 d0       	rcall	.+0      	; 0x1516e <SS80_Check_Unit+0x4>
   1516e:	1f 92       	push	r1
   15170:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15174:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15178:	88 23       	and	r24, r24
   1517a:	c9 f0       	breq	.+50     	; 0x151ae <SS80_Check_Unit+0x44>
   1517c:	8f 30       	cpi	r24, 0x0F	; 15
   1517e:	b9 f0       	breq	.+46     	; 0x151ae <SS80_Check_Unit+0x44>
   15180:	23 81       	ldd	r18, Z+3	; 0x03
   15182:	34 81       	ldd	r19, Z+4	; 0x04
   15184:	20 64       	ori	r18, 0x40	; 64
   15186:	34 83       	std	Z+4, r19	; 0x04
   15188:	23 83       	std	Z+3, r18	; 0x03
   1518a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   1518e:	90 ff       	sbrs	r25, 0
   15190:	0f c0       	rjmp	.+30     	; 0x151b0 <SS80_Check_Unit+0x46>
   15192:	90 e0       	ldi	r25, 0x00	; 0
   15194:	ed b7       	in	r30, 0x3d	; 61
   15196:	fe b7       	in	r31, 0x3e	; 62
   15198:	95 83       	std	Z+5, r25	; 0x05
   1519a:	84 83       	std	Z+4, r24	; 0x04
   1519c:	8e ee       	ldi	r24, 0xEE	; 238
   1519e:	96 e2       	ldi	r25, 0x26	; 38
   151a0:	a0 e0       	ldi	r26, 0x00	; 0
   151a2:	81 83       	std	Z+1, r24	; 0x01
   151a4:	92 83       	std	Z+2, r25	; 0x02
   151a6:	a3 83       	std	Z+3, r26	; 0x03
   151a8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   151ac:	01 c0       	rjmp	.+2      	; 0x151b0 <SS80_Check_Unit+0x46>
   151ae:	85 83       	std	Z+5, r24	; 0x05
   151b0:	0f 90       	pop	r0
   151b2:	0f 90       	pop	r0
   151b4:	0f 90       	pop	r0
   151b6:	0f 90       	pop	r0
   151b8:	0f 90       	pop	r0
   151ba:	08 95       	ret

000151bc <SS80_Check_Volume>:
   151bc:	00 d0       	rcall	.+0      	; 0x151be <SS80_Check_Volume+0x2>
   151be:	00 d0       	rcall	.+0      	; 0x151c0 <SS80_Check_Volume+0x4>
   151c0:	1f 92       	push	r1
   151c2:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   151c6:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   151ca:	88 23       	and	r24, r24
   151cc:	b9 f0       	breq	.+46     	; 0x151fc <SS80_Check_Volume+0x40>
   151ce:	23 81       	ldd	r18, Z+3	; 0x03
   151d0:	34 81       	ldd	r19, Z+4	; 0x04
   151d2:	20 64       	ori	r18, 0x40	; 64
   151d4:	34 83       	std	Z+4, r19	; 0x04
   151d6:	23 83       	std	Z+3, r18	; 0x03
   151d8:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   151dc:	90 ff       	sbrs	r25, 0
   151de:	0f c0       	rjmp	.+30     	; 0x151fe <SS80_Check_Volume+0x42>
   151e0:	90 e0       	ldi	r25, 0x00	; 0
   151e2:	ed b7       	in	r30, 0x3d	; 61
   151e4:	fe b7       	in	r31, 0x3e	; 62
   151e6:	95 83       	std	Z+5, r25	; 0x05
   151e8:	84 83       	std	Z+4, r24	; 0x04
   151ea:	84 ed       	ldi	r24, 0xD4	; 212
   151ec:	96 e2       	ldi	r25, 0x26	; 38
   151ee:	a0 e0       	ldi	r26, 0x00	; 0
   151f0:	81 83       	std	Z+1, r24	; 0x01
   151f2:	92 83       	std	Z+2, r25	; 0x02
   151f4:	a3 83       	std	Z+3, r26	; 0x03
   151f6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   151fa:	01 c0       	rjmp	.+2      	; 0x151fe <SS80_Check_Volume+0x42>
   151fc:	16 82       	std	Z+6, r1	; 0x06
   151fe:	0f 90       	pop	r0
   15200:	0f 90       	pop	r0
   15202:	0f 90       	pop	r0
   15204:	0f 90       	pop	r0
   15206:	0f 90       	pop	r0
   15208:	08 95       	ret

0001520a <SS80_Command_State>:
   1520a:	2f 92       	push	r2
   1520c:	3f 92       	push	r3
   1520e:	4f 92       	push	r4
   15210:	6f 92       	push	r6
   15212:	7f 92       	push	r7
   15214:	8f 92       	push	r8
   15216:	af 92       	push	r10
   15218:	bf 92       	push	r11
   1521a:	cf 92       	push	r12
   1521c:	ef 92       	push	r14
   1521e:	ff 92       	push	r15
   15220:	0f 93       	push	r16
   15222:	1f 93       	push	r17
   15224:	cf 93       	push	r28
   15226:	df 93       	push	r29
   15228:	cd b7       	in	r28, 0x3d	; 61
   1522a:	de b7       	in	r29, 0x3e	; 62
   1522c:	66 97       	sbiw	r28, 0x16	; 22
   1522e:	0f b6       	in	r0, 0x3f	; 63
   15230:	f8 94       	cli
   15232:	de bf       	out	0x3e, r29	; 62
   15234:	0f be       	out	0x3f, r0	; 63
   15236:	cd bf       	out	0x3d, r28	; 61
   15238:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1523c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15240:	81 81       	ldd	r24, Z+1	; 0x01
   15242:	90 e0       	ldi	r25, 0x00	; 0
   15244:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
   15248:	80 e0       	ldi	r24, 0x00	; 0
   1524a:	91 e0       	ldi	r25, 0x01	; 1
   1524c:	99 87       	std	Y+9, r25	; 0x09
   1524e:	88 87       	std	Y+8, r24	; 0x08
   15250:	ae 01       	movw	r20, r28
   15252:	48 5f       	subi	r20, 0xF8	; 248
   15254:	5f 4f       	sbci	r21, 0xFF	; 255
   15256:	60 e0       	ldi	r22, 0x00	; 0
   15258:	72 e0       	ldi	r23, 0x02	; 2
   1525a:	8a ee       	ldi	r24, 0xEA	; 234
   1525c:	9c e1       	ldi	r25, 0x1C	; 28
   1525e:	0e 94 da 8a 	call	0x115b4	; 0x115b4 <gpib_read_str>
   15262:	9b 87       	std	Y+11, r25	; 0x0b
   15264:	8a 87       	std	Y+10, r24	; 0x0a
   15266:	88 85       	ldd	r24, Y+8	; 0x08
   15268:	99 85       	ldd	r25, Y+9	; 0x09
   1526a:	9c 01       	movw	r18, r24
   1526c:	22 27       	eor	r18, r18
   1526e:	30 7d       	andi	r19, 0xD0	; 208
   15270:	23 2b       	or	r18, r19
   15272:	79 f0       	breq	.+30     	; 0x15292 <SS80_Command_State+0x88>
   15274:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15278:	80 ff       	sbrs	r24, 0
   1527a:	21 c2       	rjmp	.+1090   	; 0x156be <SS80_Command_State+0x4b4>
   1527c:	8e ea       	ldi	r24, 0xAE	; 174
   1527e:	96 e2       	ldi	r25, 0x26	; 38
   15280:	a0 e0       	ldi	r26, 0x00	; 0
   15282:	ed b7       	in	r30, 0x3d	; 61
   15284:	fe b7       	in	r31, 0x3e	; 62
   15286:	81 83       	std	Z+1, r24	; 0x01
   15288:	92 83       	std	Z+2, r25	; 0x02
   1528a:	a3 83       	std	Z+3, r26	; 0x03
   1528c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15290:	16 c2       	rjmp	.+1068   	; 0x156be <SS80_Command_State+0x4b4>
   15292:	2a 85       	ldd	r18, Y+10	; 0x0a
   15294:	3b 85       	ldd	r19, Y+11	; 0x0b
   15296:	23 2b       	or	r18, r19
   15298:	09 f4       	brne	.+2      	; 0x1529c <SS80_Command_State+0x92>
   1529a:	16 c2       	rjmp	.+1068   	; 0x156c8 <SS80_Command_State+0x4be>
   1529c:	90 fd       	sbrc	r25, 0
   1529e:	0e c0       	rjmp	.+28     	; 0x152bc <SS80_Command_State+0xb2>
   152a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152a4:	80 ff       	sbrs	r24, 0
   152a6:	0a c0       	rjmp	.+20     	; 0x152bc <SS80_Command_State+0xb2>
   152a8:	85 e9       	ldi	r24, 0x95	; 149
   152aa:	96 e2       	ldi	r25, 0x26	; 38
   152ac:	a0 e0       	ldi	r26, 0x00	; 0
   152ae:	ed b7       	in	r30, 0x3d	; 61
   152b0:	fe b7       	in	r31, 0x3e	; 62
   152b2:	81 83       	std	Z+1, r24	; 0x01
   152b4:	92 83       	std	Z+2, r25	; 0x02
   152b6:	a3 83       	std	Z+3, r26	; 0x03
   152b8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   152bc:	e1 2c       	mov	r14, r1
   152be:	f1 2c       	mov	r15, r1
   152c0:	89 e9       	ldi	r24, 0x99	; 153
   152c2:	95 e2       	ldi	r25, 0x25	; 37
   152c4:	9c 01       	movw	r18, r24
   152c6:	40 e0       	ldi	r20, 0x00	; 0
   152c8:	2e 87       	std	Y+14, r18	; 0x0e
   152ca:	3f 87       	std	Y+15, r19	; 0x0f
   152cc:	48 8b       	std	Y+16, r20	; 0x10
   152ce:	8e eb       	ldi	r24, 0xBE	; 190
   152d0:	95 e2       	ldi	r25, 0x25	; 37
   152d2:	9c 01       	movw	r18, r24
   152d4:	40 e0       	ldi	r20, 0x00	; 0
   152d6:	29 8b       	std	Y+17, r18	; 0x11
   152d8:	3a 8b       	std	Y+18, r19	; 0x12
   152da:	4b 8b       	std	Y+19, r20	; 0x13
   152dc:	88 ed       	ldi	r24, 0xD8	; 216
   152de:	95 e2       	ldi	r25, 0x25	; 37
   152e0:	9c 01       	movw	r18, r24
   152e2:	40 e0       	ldi	r20, 0x00	; 0
   152e4:	2c 8b       	std	Y+20, r18	; 0x14
   152e6:	3d 8b       	std	Y+21, r19	; 0x15
   152e8:	4e 8b       	std	Y+22, r20	; 0x16
   152ea:	8e ee       	ldi	r24, 0xEE	; 238
   152ec:	95 e2       	ldi	r25, 0x25	; 37
   152ee:	3c 01       	movw	r6, r24
   152f0:	81 2c       	mov	r8, r1
   152f2:	8c ef       	ldi	r24, 0xFC	; 252
   152f4:	95 e2       	ldi	r25, 0x25	; 37
   152f6:	5c 01       	movw	r10, r24
   152f8:	c1 2c       	mov	r12, r1
   152fa:	88 e1       	ldi	r24, 0x18	; 24
   152fc:	96 e2       	ldi	r25, 0x26	; 38
   152fe:	1c 01       	movw	r2, r24
   15300:	41 2c       	mov	r4, r1
   15302:	2a 85       	ldd	r18, Y+10	; 0x0a
   15304:	3b 85       	ldd	r19, Y+11	; 0x0b
   15306:	87 01       	movw	r16, r14
   15308:	e2 16       	cp	r14, r18
   1530a:	f3 06       	cpc	r15, r19
   1530c:	0c f0       	brlt	.+2      	; 0x15310 <SS80_Command_State+0x106>
   1530e:	b6 c1       	rjmp	.+876    	; 0x1567c <SS80_Command_State+0x472>
   15310:	0f 5f       	subi	r16, 0xFF	; 255
   15312:	1f 4f       	sbci	r17, 0xFF	; 255
   15314:	f7 01       	movw	r30, r14
   15316:	e6 51       	subi	r30, 0x16	; 22
   15318:	f3 4e       	sbci	r31, 0xE3	; 227
   1531a:	80 81       	ld	r24, Z
   1531c:	28 2f       	mov	r18, r24
   1531e:	30 e0       	ldi	r19, 0x00	; 0
   15320:	a9 01       	movw	r20, r18
   15322:	40 52       	subi	r20, 0x20	; 32
   15324:	51 09       	sbc	r21, r1
   15326:	40 31       	cpi	r20, 0x10	; 16
   15328:	51 05       	cpc	r21, r1
   1532a:	98 f4       	brcc	.+38     	; 0x15352 <SS80_Command_State+0x148>
   1532c:	80 52       	subi	r24, 0x20	; 32
   1532e:	1d df       	rcall	.-454    	; 0x1516a <SS80_Check_Unit>
   15330:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15334:	85 ff       	sbrs	r24, 5
   15336:	a0 c1       	rjmp	.+832    	; 0x15678 <SS80_Command_State+0x46e>
   15338:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1533c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15340:	85 81       	ldd	r24, Z+5	; 0x05
   15342:	90 e0       	ldi	r25, 0x00	; 0
   15344:	ed b7       	in	r30, 0x3d	; 61
   15346:	fe b7       	in	r31, 0x3e	; 62
   15348:	95 83       	std	Z+5, r25	; 0x05
   1534a:	84 83       	std	Z+4, r24	; 0x04
   1534c:	8f e7       	ldi	r24, 0x7F	; 127
   1534e:	96 e2       	ldi	r25, 0x26	; 38
   15350:	19 c0       	rjmp	.+50     	; 0x15384 <SS80_Command_State+0x17a>
   15352:	a9 01       	movw	r20, r18
   15354:	40 54       	subi	r20, 0x40	; 64
   15356:	51 09       	sbc	r21, r1
   15358:	40 31       	cpi	r20, 0x10	; 16
   1535a:	51 05       	cpc	r21, r1
   1535c:	d0 f4       	brcc	.+52     	; 0x15392 <SS80_Command_State+0x188>
   1535e:	80 54       	subi	r24, 0x40	; 64
   15360:	2d df       	rcall	.-422    	; 0x151bc <SS80_Check_Volume>
   15362:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15366:	85 ff       	sbrs	r24, 5
   15368:	87 c1       	rjmp	.+782    	; 0x15678 <SS80_Command_State+0x46e>
   1536a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1536e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15372:	86 81       	ldd	r24, Z+6	; 0x06
   15374:	90 e0       	ldi	r25, 0x00	; 0
   15376:	ed b7       	in	r30, 0x3d	; 61
   15378:	fe b7       	in	r31, 0x3e	; 62
   1537a:	95 83       	std	Z+5, r25	; 0x05
   1537c:	84 83       	std	Z+4, r24	; 0x04
   1537e:	26 e6       	ldi	r18, 0x66	; 102
   15380:	36 e2       	ldi	r19, 0x26	; 38
   15382:	c9 01       	movw	r24, r18
   15384:	a0 e0       	ldi	r26, 0x00	; 0
   15386:	81 83       	std	Z+1, r24	; 0x01
   15388:	92 83       	std	Z+2, r25	; 0x02
   1538a:	a3 83       	std	Z+3, r26	; 0x03
   1538c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15390:	73 c1       	rjmp	.+742    	; 0x15678 <SS80_Command_State+0x46e>
   15392:	21 15       	cp	r18, r1
   15394:	31 05       	cpc	r19, r1
   15396:	79 f4       	brne	.+30     	; 0x153b6 <SS80_Command_State+0x1ac>
   15398:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1539c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153a0:	81 e0       	ldi	r24, 0x01	; 1
   153a2:	90 e0       	ldi	r25, 0x00	; 0
   153a4:	91 83       	std	Z+1, r25	; 0x01
   153a6:	80 83       	st	Z, r24
   153a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153ac:	85 ff       	sbrs	r24, 5
   153ae:	66 c1       	rjmp	.+716    	; 0x1567c <SS80_Command_State+0x472>
   153b0:	8e e4       	ldi	r24, 0x4E	; 78
   153b2:	96 e2       	ldi	r25, 0x26	; 38
   153b4:	0f c0       	rjmp	.+30     	; 0x153d4 <SS80_Command_State+0x1ca>
   153b6:	22 30       	cpi	r18, 0x02	; 2
   153b8:	31 05       	cpc	r19, r1
   153ba:	a9 f4       	brne	.+42     	; 0x153e6 <SS80_Command_State+0x1dc>
   153bc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   153c0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153c4:	31 83       	std	Z+1, r19	; 0x01
   153c6:	20 83       	st	Z, r18
   153c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153cc:	85 ff       	sbrs	r24, 5
   153ce:	56 c1       	rjmp	.+684    	; 0x1567c <SS80_Command_State+0x472>
   153d0:	85 e3       	ldi	r24, 0x35	; 53
   153d2:	96 e2       	ldi	r25, 0x26	; 38
   153d4:	a0 e0       	ldi	r26, 0x00	; 0
   153d6:	ed b7       	in	r30, 0x3d	; 61
   153d8:	fe b7       	in	r31, 0x3e	; 62
   153da:	81 83       	std	Z+1, r24	; 0x01
   153dc:	92 83       	std	Z+2, r25	; 0x02
   153de:	a3 83       	std	Z+3, r26	; 0x03
   153e0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   153e4:	4b c1       	rjmp	.+662    	; 0x1567c <SS80_Command_State+0x472>
   153e6:	20 31       	cpi	r18, 0x10	; 16
   153e8:	31 05       	cpc	r19, r1
   153ea:	b1 f5       	brne	.+108    	; 0x15458 <SS80_Command_State+0x24e>
   153ec:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   153f0:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   153f4:	3d 87       	std	Y+13, r19	; 0x0d
   153f6:	2c 87       	std	Y+12, r18	; 0x0c
   153f8:	46 e0       	ldi	r20, 0x06	; 6
   153fa:	50 e0       	ldi	r21, 0x00	; 0
   153fc:	b8 01       	movw	r22, r16
   153fe:	8a ee       	ldi	r24, 0xEA	; 234
   15400:	9c e1       	ldi	r25, 0x1C	; 28
   15402:	0e 94 87 c0 	call	0x1810e	; 0x1810e <B2V_MSB>
   15406:	ec 85       	ldd	r30, Y+12	; 0x0c
   15408:	fd 85       	ldd	r31, Y+13	; 0x0d
   1540a:	67 83       	std	Z+7, r22	; 0x07
   1540c:	70 87       	std	Z+8, r23	; 0x08
   1540e:	81 87       	std	Z+9, r24	; 0x09
   15410:	92 87       	std	Z+10, r25	; 0x0a
   15412:	87 01       	movw	r16, r14
   15414:	09 5f       	subi	r16, 0xF9	; 249
   15416:	1f 4f       	sbci	r17, 0xFF	; 255
   15418:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1541c:	85 ff       	sbrs	r24, 5
   1541e:	2c c1       	rjmp	.+600    	; 0x15678 <SS80_Command_State+0x46e>
   15420:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   15424:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   15428:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   1542c:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   15430:	fc 01       	movw	r30, r24
   15432:	a2 89       	ldd	r26, Z+18	; 0x12
   15434:	b3 89       	ldd	r27, Z+19	; 0x13
   15436:	f9 01       	movw	r30, r18
   15438:	27 81       	ldd	r18, Z+7	; 0x07
   1543a:	30 85       	ldd	r19, Z+8	; 0x08
   1543c:	41 85       	ldd	r20, Z+9	; 0x09
   1543e:	52 85       	ldd	r21, Z+10	; 0x0a
   15440:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
   15444:	ed b7       	in	r30, 0x3d	; 61
   15446:	fe b7       	in	r31, 0x3e	; 62
   15448:	64 83       	std	Z+4, r22	; 0x04
   1544a:	75 83       	std	Z+5, r23	; 0x05
   1544c:	86 83       	std	Z+6, r24	; 0x06
   1544e:	97 83       	std	Z+7, r25	; 0x07
   15450:	21 82       	std	Z+1, r2	; 0x01
   15452:	32 82       	std	Z+2, r3	; 0x02
   15454:	43 82       	std	Z+3, r4	; 0x03
   15456:	2e c0       	rjmp	.+92     	; 0x154b4 <SS80_Command_State+0x2aa>
   15458:	28 31       	cpi	r18, 0x18	; 24
   1545a:	31 05       	cpc	r19, r1
   1545c:	71 f5       	brne	.+92     	; 0x154ba <SS80_Command_State+0x2b0>
   1545e:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   15462:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   15466:	3d 87       	std	Y+13, r19	; 0x0d
   15468:	2c 87       	std	Y+12, r18	; 0x0c
   1546a:	44 e0       	ldi	r20, 0x04	; 4
   1546c:	50 e0       	ldi	r21, 0x00	; 0
   1546e:	b8 01       	movw	r22, r16
   15470:	8a ee       	ldi	r24, 0xEA	; 234
   15472:	9c e1       	ldi	r25, 0x1C	; 28
   15474:	0e 94 87 c0 	call	0x1810e	; 0x1810e <B2V_MSB>
   15478:	ec 85       	ldd	r30, Y+12	; 0x0c
   1547a:	fd 85       	ldd	r31, Y+13	; 0x0d
   1547c:	63 87       	std	Z+11, r22	; 0x0b
   1547e:	74 87       	std	Z+12, r23	; 0x0c
   15480:	85 87       	std	Z+13, r24	; 0x0d
   15482:	96 87       	std	Z+14, r25	; 0x0e
   15484:	87 01       	movw	r16, r14
   15486:	0b 5f       	subi	r16, 0xFB	; 251
   15488:	1f 4f       	sbci	r17, 0xFF	; 255
   1548a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1548e:	85 ff       	sbrs	r24, 5
   15490:	f3 c0       	rjmp	.+486    	; 0x15678 <SS80_Command_State+0x46e>
   15492:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15496:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1549a:	83 85       	ldd	r24, Z+11	; 0x0b
   1549c:	94 85       	ldd	r25, Z+12	; 0x0c
   1549e:	a5 85       	ldd	r26, Z+13	; 0x0d
   154a0:	b6 85       	ldd	r27, Z+14	; 0x0e
   154a2:	ed b7       	in	r30, 0x3d	; 61
   154a4:	fe b7       	in	r31, 0x3e	; 62
   154a6:	84 83       	std	Z+4, r24	; 0x04
   154a8:	95 83       	std	Z+5, r25	; 0x05
   154aa:	a6 83       	std	Z+6, r26	; 0x06
   154ac:	b7 83       	std	Z+7, r27	; 0x07
   154ae:	a1 82       	std	Z+1, r10	; 0x01
   154b0:	b2 82       	std	Z+2, r11	; 0x02
   154b2:	c3 82       	std	Z+3, r12	; 0x03
   154b4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   154b8:	df c0       	rjmp	.+446    	; 0x15678 <SS80_Command_State+0x46e>
   154ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154be:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   154c2:	24 33       	cpi	r18, 0x34	; 52
   154c4:	31 05       	cpc	r19, r1
   154c6:	41 f4       	brne	.+16     	; 0x154d8 <SS80_Command_State+0x2ce>
   154c8:	85 ff       	sbrs	r24, 5
   154ca:	d6 c0       	rjmp	.+428    	; 0x15678 <SS80_Command_State+0x46e>
   154cc:	ed b7       	in	r30, 0x3d	; 61
   154ce:	fe b7       	in	r31, 0x3e	; 62
   154d0:	61 82       	std	Z+1, r6	; 0x01
   154d2:	72 82       	std	Z+2, r7	; 0x02
   154d4:	83 82       	std	Z+3, r8	; 0x03
   154d6:	2b c0       	rjmp	.+86     	; 0x1552e <SS80_Command_State+0x324>
   154d8:	29 33       	cpi	r18, 0x39	; 57
   154da:	31 05       	cpc	r19, r1
   154dc:	49 f4       	brne	.+18     	; 0x154f0 <SS80_Command_State+0x2e6>
   154de:	87 01       	movw	r16, r14
   154e0:	0d 5f       	subi	r16, 0xFD	; 253
   154e2:	1f 4f       	sbci	r17, 0xFF	; 255
   154e4:	85 ff       	sbrs	r24, 5
   154e6:	c8 c0       	rjmp	.+400    	; 0x15678 <SS80_Command_State+0x46e>
   154e8:	2c 89       	ldd	r18, Y+20	; 0x14
   154ea:	3d 89       	ldd	r19, Y+21	; 0x15
   154ec:	4e 89       	ldd	r20, Y+22	; 0x16
   154ee:	1a c0       	rjmp	.+52     	; 0x15524 <SS80_Command_State+0x31a>
   154f0:	2b 33       	cpi	r18, 0x3B	; 59
   154f2:	31 05       	cpc	r19, r1
   154f4:	49 f4       	brne	.+18     	; 0x15508 <SS80_Command_State+0x2fe>
   154f6:	87 01       	movw	r16, r14
   154f8:	0e 5f       	subi	r16, 0xFE	; 254
   154fa:	1f 4f       	sbci	r17, 0xFF	; 255
   154fc:	85 ff       	sbrs	r24, 5
   154fe:	bc c0       	rjmp	.+376    	; 0x15678 <SS80_Command_State+0x46e>
   15500:	29 89       	ldd	r18, Y+17	; 0x11
   15502:	3a 89       	ldd	r19, Y+18	; 0x12
   15504:	4b 89       	ldd	r20, Y+19	; 0x13
   15506:	0e c0       	rjmp	.+28     	; 0x15524 <SS80_Command_State+0x31a>
   15508:	28 34       	cpi	r18, 0x48	; 72
   1550a:	31 05       	cpc	r19, r1
   1550c:	99 f4       	brne	.+38     	; 0x15534 <SS80_Command_State+0x32a>
   1550e:	87 01       	movw	r16, r14
   15510:	0e 5f       	subi	r16, 0xFE	; 254
   15512:	1f 4f       	sbci	r17, 0xFF	; 255
   15514:	80 73       	andi	r24, 0x30	; 48
   15516:	99 27       	eor	r25, r25
   15518:	89 2b       	or	r24, r25
   1551a:	09 f4       	brne	.+2      	; 0x1551e <SS80_Command_State+0x314>
   1551c:	ad c0       	rjmp	.+346    	; 0x15678 <SS80_Command_State+0x46e>
   1551e:	2e 85       	ldd	r18, Y+14	; 0x0e
   15520:	3f 85       	ldd	r19, Y+15	; 0x0f
   15522:	48 89       	ldd	r20, Y+16	; 0x10
   15524:	ed b7       	in	r30, 0x3d	; 61
   15526:	fe b7       	in	r31, 0x3e	; 62
   15528:	21 83       	std	Z+1, r18	; 0x01
   1552a:	32 83       	std	Z+2, r19	; 0x02
   1552c:	43 83       	std	Z+3, r20	; 0x03
   1552e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15532:	a2 c0       	rjmp	.+324    	; 0x15678 <SS80_Command_State+0x46e>
   15534:	24 30       	cpi	r18, 0x04	; 4
   15536:	31 05       	cpc	r19, r1
   15538:	41 f4       	brne	.+16     	; 0x1554a <SS80_Command_State+0x340>
   1553a:	80 73       	andi	r24, 0x30	; 48
   1553c:	99 27       	eor	r25, r25
   1553e:	89 2b       	or	r24, r25
   15540:	09 f4       	brne	.+2      	; 0x15544 <SS80_Command_State+0x33a>
   15542:	9c c0       	rjmp	.+312    	; 0x1567c <SS80_Command_State+0x472>
   15544:	88 e7       	ldi	r24, 0x78	; 120
   15546:	95 e2       	ldi	r25, 0x25	; 37
   15548:	45 cf       	rjmp	.-374    	; 0x153d4 <SS80_Command_State+0x1ca>
   1554a:	2e 30       	cpi	r18, 0x0E	; 14
   1554c:	31 05       	cpc	r19, r1
   1554e:	29 f4       	brne	.+10     	; 0x1555a <SS80_Command_State+0x350>
   15550:	85 ff       	sbrs	r24, 5
   15552:	94 c0       	rjmp	.+296    	; 0x1567c <SS80_Command_State+0x472>
   15554:	82 e6       	ldi	r24, 0x62	; 98
   15556:	95 e2       	ldi	r25, 0x25	; 37
   15558:	3d cf       	rjmp	.-390    	; 0x153d4 <SS80_Command_State+0x1ca>
   1555a:	2f 30       	cpi	r18, 0x0F	; 15
   1555c:	31 05       	cpc	r19, r1
   1555e:	29 f4       	brne	.+10     	; 0x1556a <SS80_Command_State+0x360>
   15560:	85 ff       	sbrs	r24, 5
   15562:	8c c0       	rjmp	.+280    	; 0x1567c <SS80_Command_State+0x472>
   15564:	85 e4       	ldi	r24, 0x45	; 69
   15566:	95 e2       	ldi	r25, 0x25	; 37
   15568:	35 cf       	rjmp	.-406    	; 0x153d4 <SS80_Command_State+0x1ca>
   1556a:	21 33       	cpi	r18, 0x31	; 49
   1556c:	31 05       	cpc	r19, r1
   1556e:	59 f4       	brne	.+22     	; 0x15586 <SS80_Command_State+0x37c>
   15570:	87 01       	movw	r16, r14
   15572:	0d 5f       	subi	r16, 0xFD	; 253
   15574:	1f 4f       	sbci	r17, 0xFF	; 255
   15576:	80 73       	andi	r24, 0x30	; 48
   15578:	99 27       	eor	r25, r25
   1557a:	89 2b       	or	r24, r25
   1557c:	09 f4       	brne	.+2      	; 0x15580 <SS80_Command_State+0x376>
   1557e:	7e c0       	rjmp	.+252    	; 0x1567c <SS80_Command_State+0x472>
   15580:	89 e2       	ldi	r24, 0x29	; 41
   15582:	95 e2       	ldi	r25, 0x25	; 37
   15584:	27 cf       	rjmp	.-434    	; 0x153d4 <SS80_Command_State+0x1ca>
   15586:	25 33       	cpi	r18, 0x35	; 53
   15588:	31 05       	cpc	r19, r1
   1558a:	69 f4       	brne	.+26     	; 0x155a6 <SS80_Command_State+0x39c>
   1558c:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15590:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15594:	24 e0       	ldi	r18, 0x04	; 4
   15596:	30 e0       	ldi	r19, 0x00	; 0
   15598:	31 83       	std	Z+1, r19	; 0x01
   1559a:	20 83       	st	Z, r18
   1559c:	85 ff       	sbrs	r24, 5
   1559e:	6e c0       	rjmp	.+220    	; 0x1567c <SS80_Command_State+0x472>
   155a0:	88 e1       	ldi	r24, 0x18	; 24
   155a2:	95 e2       	ldi	r25, 0x25	; 37
   155a4:	17 cf       	rjmp	.-466    	; 0x153d4 <SS80_Command_State+0x1ca>
   155a6:	27 33       	cpi	r18, 0x37	; 55
   155a8:	31 05       	cpc	r19, r1
   155aa:	59 f4       	brne	.+22     	; 0x155c2 <SS80_Command_State+0x3b8>
   155ac:	87 01       	movw	r16, r14
   155ae:	0d 5f       	subi	r16, 0xFD	; 253
   155b0:	1f 4f       	sbci	r17, 0xFF	; 255
   155b2:	80 73       	andi	r24, 0x30	; 48
   155b4:	99 27       	eor	r25, r25
   155b6:	89 2b       	or	r24, r25
   155b8:	09 f4       	brne	.+2      	; 0x155bc <SS80_Command_State+0x3b2>
   155ba:	60 c0       	rjmp	.+192    	; 0x1567c <SS80_Command_State+0x472>
   155bc:	8a ef       	ldi	r24, 0xFA	; 250
   155be:	94 e2       	ldi	r25, 0x24	; 36
   155c0:	09 cf       	rjmp	.-494    	; 0x153d4 <SS80_Command_State+0x1ca>
   155c2:	2e 33       	cpi	r18, 0x3E	; 62
   155c4:	31 05       	cpc	r19, r1
   155c6:	c1 f4       	brne	.+48     	; 0x155f8 <SS80_Command_State+0x3ee>
   155c8:	80 73       	andi	r24, 0x30	; 48
   155ca:	99 27       	eor	r25, r25
   155cc:	89 2b       	or	r24, r25
   155ce:	81 f0       	breq	.+32     	; 0x155f0 <SS80_Command_State+0x3e6>
   155d0:	8b ed       	ldi	r24, 0xDB	; 219
   155d2:	94 e2       	ldi	r25, 0x24	; 36
   155d4:	a0 e0       	ldi	r26, 0x00	; 0
   155d6:	ed b7       	in	r30, 0x3d	; 61
   155d8:	fe b7       	in	r31, 0x3e	; 62
   155da:	81 83       	std	Z+1, r24	; 0x01
   155dc:	92 83       	std	Z+2, r25	; 0x02
   155de:	a3 83       	std	Z+3, r26	; 0x03
   155e0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   155e4:	6d e6       	ldi	r22, 0x6D	; 109
   155e6:	70 e1       	ldi	r23, 0x10	; 16
   155e8:	c8 01       	movw	r24, r16
   155ea:	86 51       	subi	r24, 0x16	; 22
   155ec:	93 4e       	sbci	r25, 0xE3	; 227
   155ee:	69 dc       	rcall	.-1838   	; 0x14ec2 <SS80_display_extended_status>
   155f0:	87 01       	movw	r16, r14
   155f2:	07 5f       	subi	r16, 0xF7	; 247
   155f4:	1f 4f       	sbci	r17, 0xFF	; 255
   155f6:	42 c0       	rjmp	.+132    	; 0x1567c <SS80_Command_State+0x472>
   155f8:	2c 34       	cpi	r18, 0x4C	; 76
   155fa:	31 05       	cpc	r19, r1
   155fc:	39 f4       	brne	.+14     	; 0x1560c <SS80_Command_State+0x402>
   155fe:	80 73       	andi	r24, 0x30	; 48
   15600:	99 27       	eor	r25, r25
   15602:	89 2b       	or	r24, r25
   15604:	d9 f1       	breq	.+118    	; 0x1567c <SS80_Command_State+0x472>
   15606:	80 ec       	ldi	r24, 0xC0	; 192
   15608:	94 e2       	ldi	r25, 0x24	; 36
   1560a:	e4 ce       	rjmp	.-568    	; 0x153d4 <SS80_Command_State+0x1ca>
   1560c:	2d 34       	cpi	r18, 0x4D	; 77
   1560e:	31 05       	cpc	r19, r1
   15610:	39 f4       	brne	.+14     	; 0x15620 <SS80_Command_State+0x416>
   15612:	80 73       	andi	r24, 0x30	; 48
   15614:	99 27       	eor	r25, r25
   15616:	89 2b       	or	r24, r25
   15618:	89 f1       	breq	.+98     	; 0x1567c <SS80_Command_State+0x472>
   1561a:	87 ea       	ldi	r24, 0xA7	; 167
   1561c:	94 e2       	ldi	r25, 0x24	; 36
   1561e:	da ce       	rjmp	.-588    	; 0x153d4 <SS80_Command_State+0x1ca>
   15620:	2d 30       	cpi	r18, 0x0D	; 13
   15622:	31 05       	cpc	r19, r1
   15624:	69 f4       	brne	.+26     	; 0x15640 <SS80_Command_State+0x436>
   15626:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1562a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1562e:	23 e0       	ldi	r18, 0x03	; 3
   15630:	30 e0       	ldi	r19, 0x00	; 0
   15632:	31 83       	std	Z+1, r19	; 0x01
   15634:	20 83       	st	Z, r18
   15636:	85 ff       	sbrs	r24, 5
   15638:	21 c0       	rjmp	.+66     	; 0x1567c <SS80_Command_State+0x472>
   1563a:	80 e9       	ldi	r24, 0x90	; 144
   1563c:	94 e2       	ldi	r25, 0x24	; 36
   1563e:	ca ce       	rjmp	.-620    	; 0x153d4 <SS80_Command_State+0x1ca>
   15640:	23 33       	cpi	r18, 0x33	; 51
   15642:	31 05       	cpc	r19, r1
   15644:	51 f4       	brne	.+20     	; 0x1565a <SS80_Command_State+0x450>
   15646:	87 01       	movw	r16, r14
   15648:	0c 5f       	subi	r16, 0xFC	; 252
   1564a:	1f 4f       	sbci	r17, 0xFF	; 255
   1564c:	80 73       	andi	r24, 0x30	; 48
   1564e:	99 27       	eor	r25, r25
   15650:	89 2b       	or	r24, r25
   15652:	a1 f0       	breq	.+40     	; 0x1567c <SS80_Command_State+0x472>
   15654:	8d e6       	ldi	r24, 0x6D	; 109
   15656:	94 e2       	ldi	r25, 0x24	; 36
   15658:	bd ce       	rjmp	.-646    	; 0x153d4 <SS80_Command_State+0x1ca>
   1565a:	80 ff       	sbrs	r24, 0
   1565c:	28 c0       	rjmp	.+80     	; 0x156ae <SS80_Command_State+0x4a4>
   1565e:	ed b7       	in	r30, 0x3d	; 61
   15660:	fe b7       	in	r31, 0x3e	; 62
   15662:	35 83       	std	Z+5, r19	; 0x05
   15664:	24 83       	std	Z+4, r18	; 0x04
   15666:	8d e4       	ldi	r24, 0x4D	; 77
   15668:	94 e2       	ldi	r25, 0x24	; 36
   1566a:	a0 e0       	ldi	r26, 0x00	; 0
   1566c:	81 83       	std	Z+1, r24	; 0x01
   1566e:	92 83       	std	Z+2, r25	; 0x02
   15670:	a3 83       	std	Z+3, r26	; 0x03
   15672:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15676:	02 c0       	rjmp	.+4      	; 0x1567c <SS80_Command_State+0x472>
   15678:	78 01       	movw	r14, r16
   1567a:	43 ce       	rjmp	.-890    	; 0x15302 <SS80_Command_State+0xf8>
   1567c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1567e:	9b 85       	ldd	r25, Y+11	; 0x0b
   15680:	08 17       	cp	r16, r24
   15682:	19 07       	cpc	r17, r25
   15684:	a1 f0       	breq	.+40     	; 0x156ae <SS80_Command_State+0x4a4>
   15686:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1568a:	80 ff       	sbrs	r24, 0
   1568c:	10 c0       	rjmp	.+32     	; 0x156ae <SS80_Command_State+0x4a4>
   1568e:	2a 85       	ldd	r18, Y+10	; 0x0a
   15690:	3b 85       	ldd	r19, Y+11	; 0x0b
   15692:	ed b7       	in	r30, 0x3d	; 61
   15694:	fe b7       	in	r31, 0x3e	; 62
   15696:	37 83       	std	Z+7, r19	; 0x07
   15698:	26 83       	std	Z+6, r18	; 0x06
   1569a:	15 83       	std	Z+5, r17	; 0x05
   1569c:	04 83       	std	Z+4, r16	; 0x04
   1569e:	85 e1       	ldi	r24, 0x15	; 21
   156a0:	94 e2       	ldi	r25, 0x24	; 36
   156a2:	a0 e0       	ldi	r26, 0x00	; 0
   156a4:	81 83       	std	Z+1, r24	; 0x01
   156a6:	92 83       	std	Z+2, r25	; 0x02
   156a8:	a3 83       	std	Z+3, r26	; 0x03
   156aa:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   156ae:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   156b2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   156b6:	81 81       	ldd	r24, Z+1	; 0x01
   156b8:	90 e0       	ldi	r25, 0x00	; 0
   156ba:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   156be:	88 85       	ldd	r24, Y+8	; 0x08
   156c0:	99 85       	ldd	r25, Y+9	; 0x09
   156c2:	88 27       	eor	r24, r24
   156c4:	90 7d       	andi	r25, 0xD0	; 208
   156c6:	02 c0       	rjmp	.+4      	; 0x156cc <SS80_Command_State+0x4c2>
   156c8:	80 e0       	ldi	r24, 0x00	; 0
   156ca:	90 e0       	ldi	r25, 0x00	; 0
   156cc:	66 96       	adiw	r28, 0x16	; 22
   156ce:	0f b6       	in	r0, 0x3f	; 63
   156d0:	f8 94       	cli
   156d2:	de bf       	out	0x3e, r29	; 62
   156d4:	0f be       	out	0x3f, r0	; 63
   156d6:	cd bf       	out	0x3d, r28	; 61
   156d8:	df 91       	pop	r29
   156da:	cf 91       	pop	r28
   156dc:	1f 91       	pop	r17
   156de:	0f 91       	pop	r16
   156e0:	ff 90       	pop	r15
   156e2:	ef 90       	pop	r14
   156e4:	cf 90       	pop	r12
   156e6:	bf 90       	pop	r11
   156e8:	af 90       	pop	r10
   156ea:	8f 90       	pop	r8
   156ec:	7f 90       	pop	r7
   156ee:	6f 90       	pop	r6
   156f0:	4f 90       	pop	r4
   156f2:	3f 90       	pop	r3
   156f4:	2f 90       	pop	r2
   156f6:	08 95       	ret

000156f8 <SS80_cmd_seek>:
   156f8:	a7 e0       	ldi	r26, 0x07	; 7
   156fa:	b0 e0       	ldi	r27, 0x00	; 0
   156fc:	e2 e8       	ldi	r30, 0x82	; 130
   156fe:	fb ea       	ldi	r31, 0xAB	; 171
   15700:	0c 94 ee e6 	jmp	0x1cddc	; 0x1cddc <__prologue_saves__+0x4>
   15704:	c0 91 66 19 	lds	r28, 0x1966	; 0x801966 <SS80s>
   15708:	d0 91 67 19 	lds	r29, 0x1967	; 0x801967 <SS80s+0x1>
   1570c:	8f 80       	ldd	r8, Y+7	; 0x07
   1570e:	98 84       	ldd	r9, Y+8	; 0x08
   15710:	a9 84       	ldd	r10, Y+9	; 0x09
   15712:	ba 84       	ldd	r11, Y+10	; 0x0a
   15714:	00 91 68 19 	lds	r16, 0x1968	; 0x801968 <SS80p>
   15718:	10 91 69 19 	lds	r17, 0x1969	; 0x801969 <SS80p+0x1>
   1571c:	f8 01       	movw	r30, r16
   1571e:	c2 88       	ldd	r12, Z+18	; 0x12
   15720:	d3 88       	ldd	r13, Z+19	; 0x13
   15722:	e1 2c       	mov	r14, r1
   15724:	f1 2c       	mov	r15, r1
   15726:	6b 85       	ldd	r22, Y+11	; 0x0b
   15728:	7c 85       	ldd	r23, Y+12	; 0x0c
   1572a:	8d 85       	ldd	r24, Y+13	; 0x0d
   1572c:	9e 85       	ldd	r25, Y+14	; 0x0e
   1572e:	a7 01       	movw	r20, r14
   15730:	96 01       	movw	r18, r12
   15732:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
   15736:	da 01       	movw	r26, r20
   15738:	c9 01       	movw	r24, r18
   1573a:	88 0d       	add	r24, r8
   1573c:	99 1d       	adc	r25, r9
   1573e:	aa 1d       	adc	r26, r10
   15740:	bb 1d       	adc	r27, r11
   15742:	f8 01       	movw	r30, r16
   15744:	40 a4       	ldd	r4, Z+40	; 0x28
   15746:	51 a4       	ldd	r5, Z+41	; 0x29
   15748:	62 a4       	ldd	r6, Z+42	; 0x2a
   1574a:	73 a4       	ldd	r7, Z+43	; 0x2b
   1574c:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   15750:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15754:	48 16       	cp	r4, r24
   15756:	59 06       	cpc	r5, r25
   15758:	6a 06       	cpc	r6, r26
   1575a:	7b 06       	cpc	r7, r27
   1575c:	f0 f4       	brcc	.+60     	; 0x1579a <SS80_cmd_seek+0xa2>
   1575e:	81 e0       	ldi	r24, 0x01	; 1
   15760:	8a 83       	std	Y+2, r24	; 0x02
   15762:	8b 81       	ldd	r24, Y+3	; 0x03
   15764:	9c 81       	ldd	r25, Y+4	; 0x04
   15766:	84 60       	ori	r24, 0x04	; 4
   15768:	9c 83       	std	Y+4, r25	; 0x04
   1576a:	8b 83       	std	Y+3, r24	; 0x03
   1576c:	40 ff       	sbrs	r20, 0
   1576e:	31 c0       	rjmp	.+98     	; 0x157d2 <SS80_cmd_seek+0xda>
   15770:	a2 89       	ldd	r26, Z+18	; 0x12
   15772:	b3 89       	ldd	r27, Z+19	; 0x13
   15774:	a5 01       	movw	r20, r10
   15776:	94 01       	movw	r18, r8
   15778:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
   1577c:	ed b7       	in	r30, 0x3d	; 61
   1577e:	fe b7       	in	r31, 0x3e	; 62
   15780:	64 83       	std	Z+4, r22	; 0x04
   15782:	75 83       	std	Z+5, r23	; 0x05
   15784:	86 83       	std	Z+6, r24	; 0x06
   15786:	97 83       	std	Z+7, r25	; 0x07
   15788:	82 ed       	ldi	r24, 0xD2	; 210
   1578a:	92 e2       	ldi	r25, 0x22	; 34
   1578c:	a0 e0       	ldi	r26, 0x00	; 0
   1578e:	81 83       	std	Z+1, r24	; 0x01
   15790:	92 83       	std	Z+2, r25	; 0x02
   15792:	a3 83       	std	Z+3, r26	; 0x03
   15794:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15798:	1c c0       	rjmp	.+56     	; 0x157d2 <SS80_cmd_seek+0xda>
   1579a:	ca 01       	movw	r24, r20
   1579c:	80 72       	andi	r24, 0x20	; 32
   1579e:	99 27       	eor	r25, r25
   157a0:	45 ff       	sbrs	r20, 5
   157a2:	19 c0       	rjmp	.+50     	; 0x157d6 <SS80_cmd_seek+0xde>
   157a4:	a5 01       	movw	r20, r10
   157a6:	94 01       	movw	r18, r8
   157a8:	c7 01       	movw	r24, r14
   157aa:	b6 01       	movw	r22, r12
   157ac:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__mulsi3>
   157b0:	ed b7       	in	r30, 0x3d	; 61
   157b2:	fe b7       	in	r31, 0x3e	; 62
   157b4:	64 83       	std	Z+4, r22	; 0x04
   157b6:	75 83       	std	Z+5, r23	; 0x05
   157b8:	86 83       	std	Z+6, r24	; 0x06
   157ba:	97 83       	std	Z+7, r25	; 0x07
   157bc:	8e eb       	ldi	r24, 0xBE	; 190
   157be:	92 e2       	ldi	r25, 0x22	; 34
   157c0:	a0 e0       	ldi	r26, 0x00	; 0
   157c2:	81 83       	std	Z+1, r24	; 0x01
   157c4:	92 83       	std	Z+2, r25	; 0x02
   157c6:	a3 83       	std	Z+3, r26	; 0x03
   157c8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   157cc:	80 e0       	ldi	r24, 0x00	; 0
   157ce:	90 e0       	ldi	r25, 0x00	; 0
   157d0:	02 c0       	rjmp	.+4      	; 0x157d6 <SS80_cmd_seek+0xde>
   157d2:	81 e0       	ldi	r24, 0x01	; 1
   157d4:	90 e0       	ldi	r25, 0x00	; 0
   157d6:	cd b7       	in	r28, 0x3d	; 61
   157d8:	de b7       	in	r29, 0x3e	; 62
   157da:	27 96       	adiw	r28, 0x07	; 7
   157dc:	e0 e1       	ldi	r30, 0x10	; 16
   157de:	0c 94 0a e7 	jmp	0x1ce14	; 0x1ce14 <__epilogue_restores__+0x4>

000157e2 <SS80_locate_and_write>:
   157e2:	a3 e1       	ldi	r26, 0x13	; 19
   157e4:	b0 e0       	ldi	r27, 0x00	; 0
   157e6:	e7 ef       	ldi	r30, 0xF7	; 247
   157e8:	fb ea       	ldi	r31, 0xAB	; 171
   157ea:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   157ee:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   157f2:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   157f6:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   157fa:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   157fe:	fc 01       	movw	r30, r24
   15800:	a2 89       	ldd	r26, Z+18	; 0x12
   15802:	b3 89       	ldd	r27, Z+19	; 0x13
   15804:	f8 01       	movw	r30, r16
   15806:	27 81       	ldd	r18, Z+7	; 0x07
   15808:	30 85       	ldd	r19, Z+8	; 0x08
   1580a:	41 85       	ldd	r20, Z+9	; 0x09
   1580c:	52 85       	ldd	r21, Z+10	; 0x0a
   1580e:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
   15812:	4b 01       	movw	r8, r22
   15814:	5c 01       	movw	r10, r24
   15816:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1581a:	85 ff       	sbrs	r24, 5
   1581c:	16 c0       	rjmp	.+44     	; 0x1584a <SS80_locate_and_write+0x68>
   1581e:	83 85       	ldd	r24, Z+11	; 0x0b
   15820:	94 85       	ldd	r25, Z+12	; 0x0c
   15822:	a5 85       	ldd	r26, Z+13	; 0x0d
   15824:	b6 85       	ldd	r27, Z+14	; 0x0e
   15826:	ed b7       	in	r30, 0x3d	; 61
   15828:	fe b7       	in	r31, 0x3e	; 62
   1582a:	80 87       	std	Z+8, r24	; 0x08
   1582c:	91 87       	std	Z+9, r25	; 0x09
   1582e:	a2 87       	std	Z+10, r26	; 0x0a
   15830:	b3 87       	std	Z+11, r27	; 0x0b
   15832:	84 82       	std	Z+4, r8	; 0x04
   15834:	95 82       	std	Z+5, r9	; 0x05
   15836:	a6 82       	std	Z+6, r10	; 0x06
   15838:	b7 82       	std	Z+7, r11	; 0x07
   1583a:	85 e5       	ldi	r24, 0x55	; 85
   1583c:	98 e2       	ldi	r25, 0x28	; 40
   1583e:	a0 e0       	ldi	r26, 0x00	; 0
   15840:	81 83       	std	Z+1, r24	; 0x01
   15842:	92 83       	std	Z+2, r25	; 0x02
   15844:	a3 83       	std	Z+3, r26	; 0x03
   15846:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1584a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1584e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15852:	12 82       	std	Z+2, r1	; 0x02
   15854:	54 98       	cbi	0x0a, 4	; 10
   15856:	4c 99       	sbic	0x09, 4	; 9
   15858:	03 c0       	rjmp	.+6      	; 0x15860 <SS80_locate_and_write+0x7e>
   1585a:	80 e0       	ldi	r24, 0x00	; 0
   1585c:	90 e1       	ldi	r25, 0x10	; 16
   1585e:	4f c1       	rjmp	.+670    	; 0x15afe <SS80_locate_and_write+0x31c>
   15860:	4b df       	rcall	.-362    	; 0x156f8 <SS80_cmd_seek>
   15862:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15866:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1586a:	89 2b       	or	r24, r25
   1586c:	41 f0       	breq	.+16     	; 0x1587e <SS80_locate_and_write+0x9c>
   1586e:	83 81       	ldd	r24, Z+3	; 0x03
   15870:	94 81       	ldd	r25, Z+4	; 0x04
   15872:	82 60       	ori	r24, 0x02	; 2
   15874:	94 83       	std	Z+4, r25	; 0x04
   15876:	83 83       	std	Z+3, r24	; 0x03
   15878:	01 e0       	ldi	r16, 0x01	; 1
   1587a:	10 e0       	ldi	r17, 0x00	; 0
   1587c:	02 c0       	rjmp	.+4      	; 0x15882 <SS80_locate_and_write+0xa0>
   1587e:	00 e0       	ldi	r16, 0x00	; 0
   15880:	10 e0       	ldi	r17, 0x00	; 0
   15882:	23 84       	ldd	r2, Z+11	; 0x0b
   15884:	34 84       	ldd	r3, Z+12	; 0x0c
   15886:	1d 86       	std	Y+13, r1	; 0x0d
   15888:	1c 86       	std	Y+12, r1	; 0x0c
   1588a:	41 2c       	mov	r4, r1
   1588c:	51 2c       	mov	r5, r1
   1588e:	32 01       	movw	r6, r4
   15890:	88 e0       	ldi	r24, 0x08	; 8
   15892:	98 e2       	ldi	r25, 0x28	; 40
   15894:	9c 01       	movw	r18, r24
   15896:	40 e0       	ldi	r20, 0x00	; 0
   15898:	2e 87       	std	Y+14, r18	; 0x0e
   1589a:	3f 87       	std	Y+15, r19	; 0x0f
   1589c:	48 8b       	std	Y+16, r20	; 0x10
   1589e:	8e e2       	ldi	r24, 0x2E	; 46
   158a0:	98 e2       	ldi	r25, 0x28	; 40
   158a2:	9c 01       	movw	r18, r24
   158a4:	40 e0       	ldi	r20, 0x00	; 0
   158a6:	29 8b       	std	Y+17, r18	; 0x11
   158a8:	3a 8b       	std	Y+18, r19	; 0x12
   158aa:	4b 8b       	std	Y+19, r20	; 0x13
   158ac:	12 14       	cp	r1, r2
   158ae:	13 04       	cpc	r1, r3
   158b0:	0c f0       	brlt	.+2      	; 0x158b4 <SS80_locate_and_write+0xd2>
   158b2:	f5 c0       	rjmp	.+490    	; 0x15a9e <SS80_locate_and_write+0x2bc>
   158b4:	54 98       	cbi	0x0a, 4	; 10
   158b6:	4c 9b       	sbis	0x09, 4	; 9
   158b8:	d0 cf       	rjmp	.-96     	; 0x1585a <SS80_locate_and_write+0x78>
   158ba:	71 01       	movw	r14, r2
   158bc:	31 e0       	ldi	r19, 0x01	; 1
   158be:	23 16       	cp	r2, r19
   158c0:	33 06       	cpc	r3, r19
   158c2:	1c f0       	brlt	.+6      	; 0x158ca <SS80_locate_and_write+0xe8>
   158c4:	e1 2c       	mov	r14, r1
   158c6:	ff 24       	eor	r15, r15
   158c8:	f3 94       	inc	r15
   158ca:	ea ee       	ldi	r30, 0xEA	; 234
   158cc:	fc e1       	ldi	r31, 0x1C	; 28
   158ce:	20 e0       	ldi	r18, 0x00	; 0
   158d0:	32 e0       	ldi	r19, 0x02	; 2
   158d2:	11 92       	st	Z+, r1
   158d4:	21 50       	subi	r18, 0x01	; 1
   158d6:	30 40       	sbci	r19, 0x00	; 0
   158d8:	e1 f7       	brne	.-8      	; 0x158d2 <SS80_locate_and_write+0xf0>
   158da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158de:	87 fd       	sbrc	r24, 7
   158e0:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   158e4:	ae 01       	movw	r20, r28
   158e6:	44 5f       	subi	r20, 0xF4	; 244
   158e8:	5f 4f       	sbci	r21, 0xFF	; 255
   158ea:	b7 01       	movw	r22, r14
   158ec:	8a ee       	ldi	r24, 0xEA	; 234
   158ee:	9c e1       	ldi	r25, 0x1C	; 28
   158f0:	0e 94 da 8a 	call	0x115b4	; 0x115b4 <gpib_read_str>
   158f4:	6c 01       	movw	r12, r24
   158f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158fa:	87 ff       	sbrs	r24, 7
   158fc:	04 c0       	rjmp	.+8      	; 0x15906 <SS80_locate_and_write+0x124>
   158fe:	89 e8       	ldi	r24, 0x89	; 137
   15900:	90 e1       	ldi	r25, 0x10	; 16
   15902:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   15906:	ce 14       	cp	r12, r14
   15908:	df 04       	cpc	r13, r15
   1590a:	39 f1       	breq	.+78     	; 0x1595a <SS80_locate_and_write+0x178>
   1590c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1590e:	9d 85       	ldd	r25, Y+13	; 0x0d
   15910:	9c 01       	movw	r18, r24
   15912:	22 27       	eor	r18, r18
   15914:	30 7d       	andi	r19, 0xD0	; 208
   15916:	23 2b       	or	r18, r19
   15918:	d1 f0       	breq	.+52     	; 0x1594e <SS80_locate_and_write+0x16c>
   1591a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1591e:	80 ff       	sbrs	r24, 0
   15920:	0a c0       	rjmp	.+20     	; 0x15936 <SS80_locate_and_write+0x154>
   15922:	82 e4       	ldi	r24, 0x42	; 66
   15924:	98 e2       	ldi	r25, 0x28	; 40
   15926:	a0 e0       	ldi	r26, 0x00	; 0
   15928:	ed b7       	in	r30, 0x3d	; 61
   1592a:	fe b7       	in	r31, 0x3e	; 62
   1592c:	81 83       	std	Z+1, r24	; 0x01
   1592e:	92 83       	std	Z+2, r25	; 0x02
   15930:	a3 83       	std	Z+3, r26	; 0x03
   15932:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15936:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1593a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1593e:	83 81       	ldd	r24, Z+3	; 0x03
   15940:	94 81       	ldd	r25, Z+4	; 0x04
   15942:	82 60       	ori	r24, 0x02	; 2
   15944:	94 83       	std	Z+4, r25	; 0x04
   15946:	83 83       	std	Z+3, r24	; 0x03
   15948:	81 e0       	ldi	r24, 0x01	; 1
   1594a:	82 83       	std	Z+2, r24	; 0x02
   1594c:	99 c0       	rjmp	.+306    	; 0x15a80 <SS80_locate_and_write+0x29e>
   1594e:	c1 14       	cp	r12, r1
   15950:	d1 04       	cpc	r13, r1
   15952:	09 f0       	breq	.+2      	; 0x15956 <SS80_locate_and_write+0x174>
   15954:	d0 c0       	rjmp	.+416    	; 0x15af6 <SS80_locate_and_write+0x314>
   15956:	90 fd       	sbrc	r25, 0
   15958:	93 c0       	rjmp	.+294    	; 0x15a80 <SS80_locate_and_write+0x29e>
   1595a:	01 15       	cp	r16, r1
   1595c:	11 05       	cpc	r17, r1
   1595e:	09 f0       	breq	.+2      	; 0x15962 <SS80_locate_and_write+0x180>
   15960:	84 c0       	rjmp	.+264    	; 0x15a6a <SS80_locate_and_write+0x288>
   15962:	c1 14       	cp	r12, r1
   15964:	d1 04       	cpc	r13, r1
   15966:	09 f4       	brne	.+2      	; 0x1596a <SS80_locate_and_write+0x188>
   15968:	82 c0       	rjmp	.+260    	; 0x15a6e <SS80_locate_and_write+0x28c>
   1596a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1596e:	86 fd       	sbrc	r24, 6
   15970:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   15974:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   15978:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   1597c:	f3 e0       	ldi	r31, 0x03	; 3
   1597e:	ef 0e       	add	r14, r31
   15980:	f1 1c       	adc	r15, r1
   15982:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15986:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1598a:	86 01       	movw	r16, r12
   1598c:	2a ee       	ldi	r18, 0xEA	; 234
   1598e:	3c e1       	ldi	r19, 0x1C	; 28
   15990:	b5 01       	movw	r22, r10
   15992:	a4 01       	movw	r20, r8
   15994:	82 81       	ldd	r24, Z+2	; 0x02
   15996:	93 81       	ldd	r25, Z+3	; 0x03
   15998:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <dbf_open_write>
   1599c:	7c 01       	movw	r14, r24
   1599e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159a2:	86 ff       	sbrs	r24, 6
   159a4:	04 c0       	rjmp	.+8      	; 0x159ae <SS80_locate_and_write+0x1cc>
   159a6:	84 e9       	ldi	r24, 0x94	; 148
   159a8:	90 e1       	ldi	r25, 0x10	; 16
   159aa:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   159ae:	ce 14       	cp	r12, r14
   159b0:	df 04       	cpc	r13, r15
   159b2:	39 f1       	breq	.+78     	; 0x15a02 <SS80_locate_and_write+0x220>
   159b4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   159b8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   159bc:	83 81       	ldd	r24, Z+3	; 0x03
   159be:	94 81       	ldd	r25, Z+4	; 0x04
   159c0:	82 60       	ori	r24, 0x02	; 2
   159c2:	94 83       	std	Z+4, r25	; 0x04
   159c4:	83 83       	std	Z+3, r24	; 0x03
   159c6:	0e 94 fb 6f 	call	0xdff6	; 0xdff6 <mmc_wp_status>
   159ca:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   159ce:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   159d2:	89 2b       	or	r24, r25
   159d4:	29 f0       	breq	.+10     	; 0x159e0 <SS80_locate_and_write+0x1fe>
   159d6:	83 81       	ldd	r24, Z+3	; 0x03
   159d8:	94 81       	ldd	r25, Z+4	; 0x04
   159da:	88 60       	ori	r24, 0x08	; 8
   159dc:	94 83       	std	Z+4, r25	; 0x04
   159de:	83 83       	std	Z+3, r24	; 0x03
   159e0:	21 e0       	ldi	r18, 0x01	; 1
   159e2:	22 83       	std	Z+2, r18	; 0x02
   159e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159e8:	80 ff       	sbrs	r24, 0
   159ea:	27 c0       	rjmp	.+78     	; 0x15a3a <SS80_locate_and_write+0x258>
   159ec:	89 89       	ldd	r24, Y+17	; 0x11
   159ee:	9a 89       	ldd	r25, Y+18	; 0x12
   159f0:	ab 89       	ldd	r26, Y+19	; 0x13
   159f2:	ed b7       	in	r30, 0x3d	; 61
   159f4:	fe b7       	in	r31, 0x3e	; 62
   159f6:	81 83       	std	Z+1, r24	; 0x01
   159f8:	92 83       	std	Z+2, r25	; 0x02
   159fa:	a3 83       	std	Z+3, r26	; 0x03
   159fc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15a00:	1c c0       	rjmp	.+56     	; 0x15a3a <SS80_locate_and_write+0x258>
   15a02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a06:	85 ff       	sbrs	r24, 5
   15a08:	0c c0       	rjmp	.+24     	; 0x15a22 <SS80_locate_and_write+0x240>
   15a0a:	ed b7       	in	r30, 0x3d	; 61
   15a0c:	fe b7       	in	r31, 0x3e	; 62
   15a0e:	d5 82       	std	Z+5, r13	; 0x05
   15a10:	c4 82       	std	Z+4, r12	; 0x04
   15a12:	2e 85       	ldd	r18, Y+14	; 0x0e
   15a14:	3f 85       	ldd	r19, Y+15	; 0x0f
   15a16:	48 89       	ldd	r20, Y+16	; 0x10
   15a18:	21 83       	std	Z+1, r18	; 0x01
   15a1a:	32 83       	std	Z+2, r19	; 0x02
   15a1c:	43 83       	std	Z+3, r20	; 0x03
   15a1e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15a22:	c6 01       	movw	r24, r12
   15a24:	0d 2c       	mov	r0, r13
   15a26:	00 0c       	add	r0, r0
   15a28:	aa 0b       	sbc	r26, r26
   15a2a:	bb 0b       	sbc	r27, r27
   15a2c:	88 0e       	add	r8, r24
   15a2e:	99 1e       	adc	r9, r25
   15a30:	aa 1e       	adc	r10, r26
   15a32:	bb 1e       	adc	r11, r27
   15a34:	00 e0       	ldi	r16, 0x00	; 0
   15a36:	10 e0       	ldi	r17, 0x00	; 0
   15a38:	05 c0       	rjmp	.+10     	; 0x15a44 <SS80_locate_and_write+0x262>
   15a3a:	ec 14       	cp	r14, r12
   15a3c:	fd 04       	cpc	r15, r13
   15a3e:	64 f0       	brlt	.+24     	; 0x15a58 <SS80_locate_and_write+0x276>
   15a40:	01 e0       	ldi	r16, 0x01	; 1
   15a42:	10 e0       	ldi	r17, 0x00	; 0
   15a44:	c7 01       	movw	r24, r14
   15a46:	0f 2c       	mov	r0, r15
   15a48:	00 0c       	add	r0, r0
   15a4a:	aa 0b       	sbc	r26, r26
   15a4c:	bb 0b       	sbc	r27, r27
   15a4e:	48 0e       	add	r4, r24
   15a50:	59 1e       	adc	r5, r25
   15a52:	6a 1e       	adc	r6, r26
   15a54:	7b 1e       	adc	r7, r27
   15a56:	0b c0       	rjmp	.+22     	; 0x15a6e <SS80_locate_and_write+0x28c>
   15a58:	c6 01       	movw	r24, r12
   15a5a:	0d 2c       	mov	r0, r13
   15a5c:	00 0c       	add	r0, r0
   15a5e:	aa 0b       	sbc	r26, r26
   15a60:	bb 0b       	sbc	r27, r27
   15a62:	48 0e       	add	r4, r24
   15a64:	59 1e       	adc	r5, r25
   15a66:	6a 1e       	adc	r6, r26
   15a68:	7b 1e       	adc	r7, r27
   15a6a:	01 e0       	ldi	r16, 0x01	; 1
   15a6c:	10 e0       	ldi	r17, 0x00	; 0
   15a6e:	2c 18       	sub	r2, r12
   15a70:	3d 08       	sbc	r3, r13
   15a72:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a74:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a76:	90 ff       	sbrs	r25, 0
   15a78:	19 cf       	rjmp	.-462    	; 0x158ac <SS80_locate_and_write+0xca>
   15a7a:	12 14       	cp	r1, r2
   15a7c:	13 04       	cpc	r1, r3
   15a7e:	7c f4       	brge	.+30     	; 0x15a9e <SS80_locate_and_write+0x2bc>
   15a80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a84:	80 ff       	sbrs	r24, 0
   15a86:	1d c0       	rjmp	.+58     	; 0x15ac2 <SS80_locate_and_write+0x2e0>
   15a88:	80 ee       	ldi	r24, 0xE0	; 224
   15a8a:	97 e2       	ldi	r25, 0x27	; 39
   15a8c:	a0 e0       	ldi	r26, 0x00	; 0
   15a8e:	ed b7       	in	r30, 0x3d	; 61
   15a90:	fe b7       	in	r31, 0x3e	; 62
   15a92:	81 83       	std	Z+1, r24	; 0x01
   15a94:	92 83       	std	Z+2, r25	; 0x02
   15a96:	a3 83       	std	Z+3, r26	; 0x03
   15a98:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15a9c:	12 c0       	rjmp	.+36     	; 0x15ac2 <SS80_locate_and_write+0x2e0>
   15a9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aa2:	85 ff       	sbrs	r24, 5
   15aa4:	0e c0       	rjmp	.+28     	; 0x15ac2 <SS80_locate_and_write+0x2e0>
   15aa6:	ed b7       	in	r30, 0x3d	; 61
   15aa8:	fe b7       	in	r31, 0x3e	; 62
   15aaa:	44 82       	std	Z+4, r4	; 0x04
   15aac:	55 82       	std	Z+5, r5	; 0x05
   15aae:	66 82       	std	Z+6, r6	; 0x06
   15ab0:	77 82       	std	Z+7, r7	; 0x07
   15ab2:	85 eb       	ldi	r24, 0xB5	; 181
   15ab4:	97 e2       	ldi	r25, 0x27	; 39
   15ab6:	a0 e0       	ldi	r26, 0x00	; 0
   15ab8:	81 83       	std	Z+1, r24	; 0x01
   15aba:	92 83       	std	Z+2, r25	; 0x02
   15abc:	a3 83       	std	Z+3, r26	; 0x03
   15abe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15ac2:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15ac6:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15aca:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15ace:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15ad2:	22 89       	ldd	r18, Z+18	; 0x12
   15ad4:	33 89       	ldd	r19, Z+19	; 0x13
   15ad6:	40 e0       	ldi	r20, 0x00	; 0
   15ad8:	50 e0       	ldi	r21, 0x00	; 0
   15ada:	c5 01       	movw	r24, r10
   15adc:	b4 01       	movw	r22, r8
   15ade:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
   15ae2:	f8 01       	movw	r30, r16
   15ae4:	27 83       	std	Z+7, r18	; 0x07
   15ae6:	30 87       	std	Z+8, r19	; 0x08
   15ae8:	41 87       	std	Z+9, r20	; 0x09
   15aea:	52 87       	std	Z+10, r21	; 0x0a
   15aec:	8c 85       	ldd	r24, Y+12	; 0x0c
   15aee:	9d 85       	ldd	r25, Y+13	; 0x0d
   15af0:	88 27       	eor	r24, r24
   15af2:	90 7d       	andi	r25, 0xD0	; 208
   15af4:	04 c0       	rjmp	.+8      	; 0x15afe <SS80_locate_and_write+0x31c>
   15af6:	01 2b       	or	r16, r17
   15af8:	09 f4       	brne	.+2      	; 0x15afc <SS80_locate_and_write+0x31a>
   15afa:	37 cf       	rjmp	.-402    	; 0x1596a <SS80_locate_and_write+0x188>
   15afc:	b6 cf       	rjmp	.-148    	; 0x15a6a <SS80_locate_and_write+0x288>
   15afe:	63 96       	adiw	r28, 0x13	; 19
   15b00:	e2 e1       	ldi	r30, 0x12	; 18
   15b02:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00015b06 <SS80_Report>:
   15b06:	a8 e0       	ldi	r26, 0x08	; 8
   15b08:	b0 e0       	ldi	r27, 0x00	; 0
   15b0a:	e9 e8       	ldi	r30, 0x89	; 137
   15b0c:	fd ea       	ldi	r31, 0xAD	; 173
   15b0e:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   15b12:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b16:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b1a:	82 81       	ldd	r24, Z+2	; 0x02
   15b1c:	88 87       	std	Y+8, r24	; 0x08
   15b1e:	80 e0       	ldi	r24, 0x00	; 0
   15b20:	91 e0       	ldi	r25, 0x01	; 1
   15b22:	9f 83       	std	Y+7, r25	; 0x07
   15b24:	8e 83       	std	Y+6, r24	; 0x06
   15b26:	ae 01       	movw	r20, r28
   15b28:	4a 5f       	subi	r20, 0xFA	; 250
   15b2a:	5f 4f       	sbci	r21, 0xFF	; 255
   15b2c:	61 e0       	ldi	r22, 0x01	; 1
   15b2e:	70 e0       	ldi	r23, 0x00	; 0
   15b30:	ce 01       	movw	r24, r28
   15b32:	08 96       	adiw	r24, 0x08	; 8
   15b34:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   15b38:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15b3c:	01 97       	sbiw	r24, 0x01	; 1
   15b3e:	89 f0       	breq	.+34     	; 0x15b62 <SS80_Report+0x5c>
   15b40:	20 ff       	sbrs	r18, 0
   15b42:	0a c0       	rjmp	.+20     	; 0x15b58 <SS80_Report+0x52>
   15b44:	84 ea       	ldi	r24, 0xA4	; 164
   15b46:	92 e2       	ldi	r25, 0x22	; 34
   15b48:	a0 e0       	ldi	r26, 0x00	; 0
   15b4a:	ed b7       	in	r30, 0x3d	; 61
   15b4c:	fe b7       	in	r31, 0x3e	; 62
   15b4e:	81 83       	std	Z+1, r24	; 0x01
   15b50:	92 83       	std	Z+2, r25	; 0x02
   15b52:	a3 83       	std	Z+3, r26	; 0x03
   15b54:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15b58:	8e 81       	ldd	r24, Y+6	; 0x06
   15b5a:	9f 81       	ldd	r25, Y+7	; 0x07
   15b5c:	88 27       	eor	r24, r24
   15b5e:	90 7d       	andi	r25, 0xD0	; 208
   15b60:	1b c0       	rjmp	.+54     	; 0x15b98 <SS80_Report+0x92>
   15b62:	25 ff       	sbrs	r18, 5
   15b64:	12 c0       	rjmp	.+36     	; 0x15b8a <SS80_Report+0x84>
   15b66:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b6a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b6e:	82 81       	ldd	r24, Z+2	; 0x02
   15b70:	90 e0       	ldi	r25, 0x00	; 0
   15b72:	ed b7       	in	r30, 0x3d	; 61
   15b74:	fe b7       	in	r31, 0x3e	; 62
   15b76:	95 83       	std	Z+5, r25	; 0x05
   15b78:	84 83       	std	Z+4, r24	; 0x04
   15b7a:	81 e9       	ldi	r24, 0x91	; 145
   15b7c:	92 e2       	ldi	r25, 0x22	; 34
   15b7e:	a0 e0       	ldi	r26, 0x00	; 0
   15b80:	81 83       	std	Z+1, r24	; 0x01
   15b82:	92 83       	std	Z+2, r25	; 0x02
   15b84:	a3 83       	std	Z+3, r26	; 0x03
   15b86:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15b8a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b8e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b92:	12 82       	std	Z+2, r1	; 0x02
   15b94:	80 e0       	ldi	r24, 0x00	; 0
   15b96:	90 e0       	ldi	r25, 0x00	; 0
   15b98:	28 96       	adiw	r28, 0x08	; 8
   15b9a:	e2 e0       	ldi	r30, 0x02	; 2
   15b9c:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00015ba0 <Clear_Common>:
   15ba0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15ba4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ba8:	25 81       	ldd	r18, Z+5	; 0x05
   15baa:	30 e0       	ldi	r19, 0x00	; 0
   15bac:	28 17       	cp	r18, r24
   15bae:	39 07       	cpc	r19, r25
   15bb0:	19 f0       	breq	.+6      	; 0x15bb8 <Clear_Common+0x18>
   15bb2:	0f 97       	sbiw	r24, 0x0f	; 15
   15bb4:	99 f4       	brne	.+38     	; 0x15bdc <Clear_Common+0x3c>
   15bb6:	03 c0       	rjmp	.+6      	; 0x15bbe <Clear_Common+0x1e>
   15bb8:	2f 30       	cpi	r18, 0x0F	; 15
   15bba:	31 05       	cpc	r19, r1
   15bbc:	09 f4       	brne	.+2      	; 0x15bc0 <Clear_Common+0x20>
   15bbe:	15 82       	std	Z+5, r1	; 0x05
   15bc0:	16 82       	std	Z+6, r1	; 0x06
   15bc2:	17 82       	std	Z+7, r1	; 0x07
   15bc4:	10 86       	std	Z+8, r1	; 0x08
   15bc6:	11 86       	std	Z+9, r1	; 0x09
   15bc8:	12 86       	std	Z+10, r1	; 0x0a
   15bca:	13 86       	std	Z+11, r1	; 0x0b
   15bcc:	14 86       	std	Z+12, r1	; 0x0c
   15bce:	15 86       	std	Z+13, r1	; 0x0d
   15bd0:	16 86       	std	Z+14, r1	; 0x0e
   15bd2:	11 82       	std	Z+1, r1	; 0x01
   15bd4:	10 82       	st	Z, r1
   15bd6:	14 82       	std	Z+4, r1	; 0x04
   15bd8:	13 82       	std	Z+3, r1	; 0x03
   15bda:	12 82       	std	Z+2, r1	; 0x02
   15bdc:	08 95       	ret

00015bde <SS80_init>:
   15bde:	cf 92       	push	r12
   15be0:	df 92       	push	r13
   15be2:	ef 92       	push	r14
   15be4:	0f 93       	push	r16
   15be6:	1f 93       	push	r17
   15be8:	cf 93       	push	r28
   15bea:	df 93       	push	r29
   15bec:	00 d0       	rcall	.+0      	; 0x15bee <SS80_init+0x10>
   15bee:	00 d0       	rcall	.+0      	; 0x15bf0 <SS80_init+0x12>
   15bf0:	1f 92       	push	r1
   15bf2:	0d e6       	ldi	r16, 0x6D	; 109
   15bf4:	1f e1       	ldi	r17, 0x1F	; 31
   15bf6:	cb e0       	ldi	r28, 0x0B	; 11
   15bf8:	d2 e0       	ldi	r29, 0x02	; 2
   15bfa:	8e e5       	ldi	r24, 0x5E	; 94
   15bfc:	99 e2       	ldi	r25, 0x29	; 41
   15bfe:	6c 01       	movw	r12, r24
   15c00:	e1 2c       	mov	r14, r1
   15c02:	f8 01       	movw	r30, r16
   15c04:	80 81       	ld	r24, Z
   15c06:	83 30       	cpi	r24, 0x03	; 3
   15c08:	29 f5       	brne	.+74     	; 0x15c54 <SS80_init+0x76>
   15c0a:	8c 2f       	mov	r24, r28
   15c0c:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   15c10:	88 23       	and	r24, r24
   15c12:	01 f1       	breq	.+64     	; 0x15c54 <SS80_init+0x76>
   15c14:	8f e0       	ldi	r24, 0x0F	; 15
   15c16:	90 e0       	ldi	r25, 0x00	; 0
   15c18:	c3 df       	rcall	.-122    	; 0x15ba0 <Clear_Common>
   15c1a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15c1e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15c22:	d2 83       	std	Z+2, r29	; 0x02
   15c24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c28:	85 ff       	sbrs	r24, 5
   15c2a:	0c c0       	rjmp	.+24     	; 0x15c44 <SS80_init+0x66>
   15c2c:	f8 01       	movw	r30, r16
   15c2e:	81 81       	ldd	r24, Z+1	; 0x01
   15c30:	90 e0       	ldi	r25, 0x00	; 0
   15c32:	ed b7       	in	r30, 0x3d	; 61
   15c34:	fe b7       	in	r31, 0x3e	; 62
   15c36:	95 83       	std	Z+5, r25	; 0x05
   15c38:	84 83       	std	Z+4, r24	; 0x04
   15c3a:	c1 82       	std	Z+1, r12	; 0x01
   15c3c:	d2 82       	std	Z+2, r13	; 0x02
   15c3e:	e3 82       	std	Z+3, r14	; 0x03
   15c40:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15c44:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c48:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c4c:	81 81       	ldd	r24, Z+1	; 0x01
   15c4e:	90 e0       	ldi	r25, 0x00	; 0
   15c50:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
   15c54:	0b 50       	subi	r16, 0x0B	; 11
   15c56:	11 09       	sbc	r17, r1
   15c58:	c1 50       	subi	r28, 0x01	; 1
   15c5a:	98 f6       	brcc	.-90     	; 0x15c02 <SS80_init+0x24>
   15c5c:	0f 90       	pop	r0
   15c5e:	0f 90       	pop	r0
   15c60:	0f 90       	pop	r0
   15c62:	0f 90       	pop	r0
   15c64:	0f 90       	pop	r0
   15c66:	df 91       	pop	r29
   15c68:	cf 91       	pop	r28
   15c6a:	1f 91       	pop	r17
   15c6c:	0f 91       	pop	r16
   15c6e:	ef 90       	pop	r14
   15c70:	df 90       	pop	r13
   15c72:	cf 90       	pop	r12
   15c74:	08 95       	ret

00015c76 <SS80_Channel_Independent_Clear>:
   15c76:	94 df       	rcall	.-216    	; 0x15ba0 <Clear_Common>
   15c78:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c7c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c80:	81 81       	ldd	r24, Z+1	; 0x01
   15c82:	90 e0       	ldi	r25, 0x00	; 0
   15c84:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   15c88:	80 e0       	ldi	r24, 0x00	; 0
   15c8a:	90 e0       	ldi	r25, 0x00	; 0
   15c8c:	08 95       	ret

00015c8e <SS80_Universal_Device_Clear>:
   15c8e:	8f e0       	ldi	r24, 0x0F	; 15
   15c90:	90 e0       	ldi	r25, 0x00	; 0
   15c92:	86 df       	rcall	.-244    	; 0x15ba0 <Clear_Common>
   15c94:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c98:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c9c:	81 81       	ldd	r24, Z+1	; 0x01
   15c9e:	90 e0       	ldi	r25, 0x00	; 0
   15ca0:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   15ca4:	80 e0       	ldi	r24, 0x00	; 0
   15ca6:	90 e0       	ldi	r25, 0x00	; 0
   15ca8:	08 95       	ret

00015caa <SS80_Selected_Device_Clear>:
   15caa:	cf 93       	push	r28
   15cac:	df 93       	push	r29
   15cae:	00 d0       	rcall	.+0      	; 0x15cb0 <SS80_Selected_Device_Clear+0x6>
   15cb0:	1f 92       	push	r1
   15cb2:	ec 01       	movw	r28, r24
   15cb4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cb8:	85 ff       	sbrs	r24, 5
   15cba:	0a c0       	rjmp	.+20     	; 0x15cd0 <SS80_Selected_Device_Clear+0x26>
   15cbc:	85 e8       	ldi	r24, 0x85	; 133
   15cbe:	92 e2       	ldi	r25, 0x22	; 34
   15cc0:	a0 e0       	ldi	r26, 0x00	; 0
   15cc2:	ed b7       	in	r30, 0x3d	; 61
   15cc4:	fe b7       	in	r31, 0x3e	; 62
   15cc6:	81 83       	std	Z+1, r24	; 0x01
   15cc8:	92 83       	std	Z+2, r25	; 0x02
   15cca:	a3 83       	std	Z+3, r26	; 0x03
   15ccc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15cd0:	ce 01       	movw	r24, r28
   15cd2:	66 df       	rcall	.-308    	; 0x15ba0 <Clear_Common>
   15cd4:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15cd8:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15cdc:	81 81       	ldd	r24, Z+1	; 0x01
   15cde:	90 e0       	ldi	r25, 0x00	; 0
   15ce0:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   15ce4:	80 e0       	ldi	r24, 0x00	; 0
   15ce6:	90 e0       	ldi	r25, 0x00	; 0
   15ce8:	cd b7       	in	r28, 0x3d	; 61
   15cea:	de b7       	in	r29, 0x3e	; 62
   15cec:	23 96       	adiw	r28, 0x03	; 3
   15cee:	e2 e0       	ldi	r30, 0x02	; 2
   15cf0:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00015cf4 <SS80_Amigo_Clear>:
   15cf4:	a6 e0       	ldi	r26, 0x06	; 6
   15cf6:	b0 e0       	ldi	r27, 0x00	; 0
   15cf8:	e0 e8       	ldi	r30, 0x80	; 128
   15cfa:	fe ea       	ldi	r31, 0xAE	; 174
   15cfc:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   15d00:	1d 82       	std	Y+5, r1	; 0x05
   15d02:	1c 82       	std	Y+4, r1	; 0x04
   15d04:	ae 01       	movw	r20, r28
   15d06:	4c 5f       	subi	r20, 0xFC	; 252
   15d08:	5f 4f       	sbci	r21, 0xFF	; 255
   15d0a:	61 e0       	ldi	r22, 0x01	; 1
   15d0c:	70 e0       	ldi	r23, 0x00	; 0
   15d0e:	ce 01       	movw	r24, r28
   15d10:	06 96       	adiw	r24, 0x06	; 6
   15d12:	0e 94 da 8a 	call	0x115b4	; 0x115b4 <gpib_read_str>
   15d16:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15d1a:	01 97       	sbiw	r24, 0x01	; 1
   15d1c:	89 f0       	breq	.+34     	; 0x15d40 <SS80_Amigo_Clear+0x4c>
   15d1e:	20 ff       	sbrs	r18, 0
   15d20:	0a c0       	rjmp	.+20     	; 0x15d36 <SS80_Amigo_Clear+0x42>
   15d22:	82 e7       	ldi	r24, 0x72	; 114
   15d24:	92 e2       	ldi	r25, 0x22	; 34
   15d26:	a0 e0       	ldi	r26, 0x00	; 0
   15d28:	ed b7       	in	r30, 0x3d	; 61
   15d2a:	fe b7       	in	r31, 0x3e	; 62
   15d2c:	81 83       	std	Z+1, r24	; 0x01
   15d2e:	92 83       	std	Z+2, r25	; 0x02
   15d30:	a3 83       	std	Z+3, r26	; 0x03
   15d32:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15d36:	8c 81       	ldd	r24, Y+4	; 0x04
   15d38:	9d 81       	ldd	r25, Y+5	; 0x05
   15d3a:	88 27       	eor	r24, r24
   15d3c:	90 7d       	andi	r25, 0xD0	; 208
   15d3e:	19 c0       	rjmp	.+50     	; 0x15d72 <SS80_Amigo_Clear+0x7e>
   15d40:	25 ff       	sbrs	r18, 5
   15d42:	0a c0       	rjmp	.+20     	; 0x15d58 <SS80_Amigo_Clear+0x64>
   15d44:	83 e6       	ldi	r24, 0x63	; 99
   15d46:	92 e2       	ldi	r25, 0x22	; 34
   15d48:	a0 e0       	ldi	r26, 0x00	; 0
   15d4a:	ed b7       	in	r30, 0x3d	; 61
   15d4c:	fe b7       	in	r31, 0x3e	; 62
   15d4e:	81 83       	std	Z+1, r24	; 0x01
   15d50:	92 83       	std	Z+2, r25	; 0x02
   15d52:	a3 83       	std	Z+3, r26	; 0x03
   15d54:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15d58:	8f e0       	ldi	r24, 0x0F	; 15
   15d5a:	90 e0       	ldi	r25, 0x00	; 0
   15d5c:	21 df       	rcall	.-446    	; 0x15ba0 <Clear_Common>
   15d5e:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d62:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d66:	81 81       	ldd	r24, Z+1	; 0x01
   15d68:	90 e0       	ldi	r25, 0x00	; 0
   15d6a:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   15d6e:	80 e0       	ldi	r24, 0x00	; 0
   15d70:	90 e0       	ldi	r25, 0x00	; 0
   15d72:	26 96       	adiw	r28, 0x06	; 6
   15d74:	e2 e0       	ldi	r30, 0x02	; 2
   15d76:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00015d7a <SS80_Cancel>:
   15d7a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15d7e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15d82:	11 82       	std	Z+1, r1	; 0x01
   15d84:	10 82       	st	Z, r1
   15d86:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d8a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d8e:	81 81       	ldd	r24, Z+1	; 0x01
   15d90:	90 e0       	ldi	r25, 0x00	; 0
   15d92:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   15d96:	80 e0       	ldi	r24, 0x00	; 0
   15d98:	90 e0       	ldi	r25, 0x00	; 0
   15d9a:	08 95       	ret

00015d9c <SS80_Transparent_State>:
   15d9c:	a9 e0       	ldi	r26, 0x09	; 9
   15d9e:	b0 e0       	ldi	r27, 0x00	; 0
   15da0:	e4 ed       	ldi	r30, 0xD4	; 212
   15da2:	fe ea       	ldi	r31, 0xAE	; 174
   15da4:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
   15da8:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15dac:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15db0:	81 81       	ldd	r24, Z+1	; 0x01
   15db2:	90 e0       	ldi	r25, 0x00	; 0
   15db4:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
   15db8:	80 e0       	ldi	r24, 0x00	; 0
   15dba:	91 e0       	ldi	r25, 0x01	; 1
   15dbc:	99 87       	std	Y+9, r25	; 0x09
   15dbe:	88 87       	std	Y+8, r24	; 0x08
   15dc0:	ae 01       	movw	r20, r28
   15dc2:	48 5f       	subi	r20, 0xF8	; 248
   15dc4:	5f 4f       	sbci	r21, 0xFF	; 255
   15dc6:	60 e0       	ldi	r22, 0x00	; 0
   15dc8:	72 e0       	ldi	r23, 0x02	; 2
   15dca:	8a ee       	ldi	r24, 0xEA	; 234
   15dcc:	9c e1       	ldi	r25, 0x1C	; 28
   15dce:	0e 94 da 8a 	call	0x115b4	; 0x115b4 <gpib_read_str>
   15dd2:	7c 01       	movw	r14, r24
   15dd4:	88 85       	ldd	r24, Y+8	; 0x08
   15dd6:	99 85       	ldd	r25, Y+9	; 0x09
   15dd8:	9c 01       	movw	r18, r24
   15dda:	22 27       	eor	r18, r18
   15ddc:	30 7d       	andi	r19, 0xD0	; 208
   15dde:	23 2b       	or	r18, r19
   15de0:	79 f0       	breq	.+30     	; 0x15e00 <SS80_Transparent_State+0x64>
   15de2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15de6:	80 ff       	sbrs	r24, 0
   15de8:	da c0       	rjmp	.+436    	; 0x15f9e <SS80_Transparent_State+0x202>
   15dea:	82 e0       	ldi	r24, 0x02	; 2
   15dec:	94 e2       	ldi	r25, 0x24	; 36
   15dee:	a0 e0       	ldi	r26, 0x00	; 0
   15df0:	ed b7       	in	r30, 0x3d	; 61
   15df2:	fe b7       	in	r31, 0x3e	; 62
   15df4:	81 83       	std	Z+1, r24	; 0x01
   15df6:	92 83       	std	Z+2, r25	; 0x02
   15df8:	a3 83       	std	Z+3, r26	; 0x03
   15dfa:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15dfe:	cf c0       	rjmp	.+414    	; 0x15f9e <SS80_Transparent_State+0x202>
   15e00:	e1 14       	cp	r14, r1
   15e02:	f1 04       	cpc	r15, r1
   15e04:	09 f4       	brne	.+2      	; 0x15e08 <SS80_Transparent_State+0x6c>
   15e06:	d0 c0       	rjmp	.+416    	; 0x15fa8 <SS80_Transparent_State+0x20c>
   15e08:	90 fd       	sbrc	r25, 0
   15e0a:	0e c0       	rjmp	.+28     	; 0x15e28 <SS80_Transparent_State+0x8c>
   15e0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e10:	80 ff       	sbrs	r24, 0
   15e12:	0a c0       	rjmp	.+20     	; 0x15e28 <SS80_Transparent_State+0x8c>
   15e14:	89 ee       	ldi	r24, 0xE9	; 233
   15e16:	93 e2       	ldi	r25, 0x23	; 35
   15e18:	a0 e0       	ldi	r26, 0x00	; 0
   15e1a:	ed b7       	in	r30, 0x3d	; 61
   15e1c:	fe b7       	in	r31, 0x3e	; 62
   15e1e:	81 83       	std	Z+1, r24	; 0x01
   15e20:	92 83       	std	Z+2, r25	; 0x02
   15e22:	a3 83       	std	Z+3, r26	; 0x03
   15e24:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15e28:	8a ee       	ldi	r24, 0xEA	; 234
   15e2a:	a8 2e       	mov	r10, r24
   15e2c:	8c e1       	ldi	r24, 0x1C	; 28
   15e2e:	b8 2e       	mov	r11, r24
   15e30:	00 e0       	ldi	r16, 0x00	; 0
   15e32:	10 e0       	ldi	r17, 0x00	; 0
   15e34:	0e 15       	cp	r16, r14
   15e36:	1f 05       	cpc	r17, r15
   15e38:	0c f0       	brlt	.+2      	; 0x15e3c <SS80_Transparent_State+0xa0>
   15e3a:	9c c0       	rjmp	.+312    	; 0x15f74 <SS80_Transparent_State+0x1d8>
   15e3c:	68 01       	movw	r12, r16
   15e3e:	ff ef       	ldi	r31, 0xFF	; 255
   15e40:	cf 1a       	sub	r12, r31
   15e42:	df 0a       	sbc	r13, r31
   15e44:	f5 01       	movw	r30, r10
   15e46:	81 91       	ld	r24, Z+
   15e48:	5f 01       	movw	r10, r30
   15e4a:	28 2f       	mov	r18, r24
   15e4c:	30 e0       	ldi	r19, 0x00	; 0
   15e4e:	a9 01       	movw	r20, r18
   15e50:	40 52       	subi	r20, 0x20	; 32
   15e52:	51 09       	sbc	r21, r1
   15e54:	40 31       	cpi	r20, 0x10	; 16
   15e56:	51 05       	cpc	r21, r1
   15e58:	20 f4       	brcc	.+8      	; 0x15e62 <SS80_Transparent_State+0xc6>
   15e5a:	80 52       	subi	r24, 0x20	; 32
   15e5c:	86 d9       	rcall	.-3316   	; 0x1516a <SS80_Check_Unit>
   15e5e:	86 01       	movw	r16, r12
   15e60:	e9 cf       	rjmp	.-46     	; 0x15e34 <SS80_Transparent_State+0x98>
   15e62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e66:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15e6a:	21 30       	cpi	r18, 0x01	; 1
   15e6c:	31 05       	cpc	r19, r1
   15e6e:	c9 f4       	brne	.+50     	; 0x15ea2 <SS80_Transparent_State+0x106>
   15e70:	0e 5f       	subi	r16, 0xFE	; 254
   15e72:	1f 4f       	sbci	r17, 0xFF	; 255
   15e74:	80 73       	andi	r24, 0x30	; 48
   15e76:	99 27       	eor	r25, r25
   15e78:	89 2b       	or	r24, r25
   15e7a:	51 f0       	breq	.+20     	; 0x15e90 <SS80_Transparent_State+0xf4>
   15e7c:	84 ec       	ldi	r24, 0xC4	; 196
   15e7e:	93 e2       	ldi	r25, 0x23	; 35
   15e80:	a0 e0       	ldi	r26, 0x00	; 0
   15e82:	ed b7       	in	r30, 0x3d	; 61
   15e84:	fe b7       	in	r31, 0x3e	; 62
   15e86:	81 83       	std	Z+1, r24	; 0x01
   15e88:	92 83       	std	Z+2, r25	; 0x02
   15e8a:	a3 83       	std	Z+3, r26	; 0x03
   15e8c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15e90:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15e94:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15e98:	81 81       	ldd	r24, Z+1	; 0x01
   15e9a:	90 e0       	ldi	r25, 0x00	; 0
   15e9c:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   15ea0:	69 c0       	rjmp	.+210    	; 0x15f74 <SS80_Transparent_State+0x1d8>
   15ea2:	22 30       	cpi	r18, 0x02	; 2
   15ea4:	31 05       	cpc	r19, r1
   15ea6:	51 f4       	brne	.+20     	; 0x15ebc <SS80_Transparent_State+0x120>
   15ea8:	0b 5f       	subi	r16, 0xFB	; 251
   15eaa:	1f 4f       	sbci	r17, 0xFF	; 255
   15eac:	80 73       	andi	r24, 0x30	; 48
   15eae:	99 27       	eor	r25, r25
   15eb0:	89 2b       	or	r24, r25
   15eb2:	09 f4       	brne	.+2      	; 0x15eb6 <SS80_Transparent_State+0x11a>
   15eb4:	5f c0       	rjmp	.+190    	; 0x15f74 <SS80_Transparent_State+0x1d8>
   15eb6:	87 ea       	ldi	r24, 0xA7	; 167
   15eb8:	93 e2       	ldi	r25, 0x23	; 35
   15eba:	0c c0       	rjmp	.+24     	; 0x15ed4 <SS80_Transparent_State+0x138>
   15ebc:	23 30       	cpi	r18, 0x03	; 3
   15ebe:	31 05       	cpc	r19, r1
   15ec0:	91 f4       	brne	.+36     	; 0x15ee6 <SS80_Transparent_State+0x14a>
   15ec2:	0b 5f       	subi	r16, 0xFB	; 251
   15ec4:	1f 4f       	sbci	r17, 0xFF	; 255
   15ec6:	80 73       	andi	r24, 0x30	; 48
   15ec8:	99 27       	eor	r25, r25
   15eca:	89 2b       	or	r24, r25
   15ecc:	09 f4       	brne	.+2      	; 0x15ed0 <SS80_Transparent_State+0x134>
   15ece:	52 c0       	rjmp	.+164    	; 0x15f74 <SS80_Transparent_State+0x1d8>
   15ed0:	89 e8       	ldi	r24, 0x89	; 137
   15ed2:	93 e2       	ldi	r25, 0x23	; 35
   15ed4:	a0 e0       	ldi	r26, 0x00	; 0
   15ed6:	ed b7       	in	r30, 0x3d	; 61
   15ed8:	fe b7       	in	r31, 0x3e	; 62
   15eda:	81 83       	std	Z+1, r24	; 0x01
   15edc:	92 83       	std	Z+2, r25	; 0x02
   15ede:	a3 83       	std	Z+3, r26	; 0x03
   15ee0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15ee4:	47 c0       	rjmp	.+142    	; 0x15f74 <SS80_Transparent_State+0x1d8>
   15ee6:	28 30       	cpi	r18, 0x08	; 8
   15ee8:	31 05       	cpc	r19, r1
   15eea:	e1 f4       	brne	.+56     	; 0x15f24 <SS80_Transparent_State+0x188>
   15eec:	85 ff       	sbrs	r24, 5
   15eee:	12 c0       	rjmp	.+36     	; 0x15f14 <SS80_Transparent_State+0x178>
   15ef0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15ef4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ef8:	85 81       	ldd	r24, Z+5	; 0x05
   15efa:	90 e0       	ldi	r25, 0x00	; 0
   15efc:	ed b7       	in	r30, 0x3d	; 61
   15efe:	fe b7       	in	r31, 0x3e	; 62
   15f00:	95 83       	std	Z+5, r25	; 0x05
   15f02:	84 83       	std	Z+4, r24	; 0x04
   15f04:	82 e6       	ldi	r24, 0x62	; 98
   15f06:	93 e2       	ldi	r25, 0x23	; 35
   15f08:	a0 e0       	ldi	r26, 0x00	; 0
   15f0a:	81 83       	std	Z+1, r24	; 0x01
   15f0c:	92 83       	std	Z+2, r25	; 0x02
   15f0e:	a3 83       	std	Z+3, r26	; 0x03
   15f10:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15f14:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f18:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f1c:	85 81       	ldd	r24, Z+5	; 0x05
   15f1e:	90 e0       	ldi	r25, 0x00	; 0
   15f20:	aa de       	rcall	.-684    	; 0x15c76 <SS80_Channel_Independent_Clear>
   15f22:	44 c0       	rjmp	.+136    	; 0x15fac <SS80_Transparent_State+0x210>
   15f24:	29 30       	cpi	r18, 0x09	; 9
   15f26:	31 05       	cpc	r19, r1
   15f28:	b1 f4       	brne	.+44     	; 0x15f56 <SS80_Transparent_State+0x1ba>
   15f2a:	85 ff       	sbrs	r24, 5
   15f2c:	12 c0       	rjmp	.+36     	; 0x15f52 <SS80_Transparent_State+0x1b6>
   15f2e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15f32:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15f36:	85 81       	ldd	r24, Z+5	; 0x05
   15f38:	90 e0       	ldi	r25, 0x00	; 0
   15f3a:	ed b7       	in	r30, 0x3d	; 61
   15f3c:	fe b7       	in	r31, 0x3e	; 62
   15f3e:	95 83       	std	Z+5, r25	; 0x05
   15f40:	84 83       	std	Z+4, r24	; 0x04
   15f42:	8e e4       	ldi	r24, 0x4E	; 78
   15f44:	93 e2       	ldi	r25, 0x23	; 35
   15f46:	a0 e0       	ldi	r26, 0x00	; 0
   15f48:	81 83       	std	Z+1, r24	; 0x01
   15f4a:	92 83       	std	Z+2, r25	; 0x02
   15f4c:	a3 83       	std	Z+3, r26	; 0x03
   15f4e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15f52:	13 df       	rcall	.-474    	; 0x15d7a <SS80_Cancel>
   15f54:	2b c0       	rjmp	.+86     	; 0x15fac <SS80_Transparent_State+0x210>
   15f56:	80 ff       	sbrs	r24, 0
   15f58:	22 c0       	rjmp	.+68     	; 0x15f9e <SS80_Transparent_State+0x202>
   15f5a:	ed b7       	in	r30, 0x3d	; 61
   15f5c:	fe b7       	in	r31, 0x3e	; 62
   15f5e:	35 83       	std	Z+5, r19	; 0x05
   15f60:	24 83       	std	Z+4, r18	; 0x04
   15f62:	8e e2       	ldi	r24, 0x2E	; 46
   15f64:	93 e2       	ldi	r25, 0x23	; 35
   15f66:	a0 e0       	ldi	r26, 0x00	; 0
   15f68:	81 83       	std	Z+1, r24	; 0x01
   15f6a:	92 83       	std	Z+2, r25	; 0x02
   15f6c:	a3 83       	std	Z+3, r26	; 0x03
   15f6e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15f72:	86 01       	movw	r16, r12
   15f74:	0e 15       	cp	r16, r14
   15f76:	1f 05       	cpc	r17, r15
   15f78:	91 f0       	breq	.+36     	; 0x15f9e <SS80_Transparent_State+0x202>
   15f7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f7e:	80 ff       	sbrs	r24, 0
   15f80:	0e c0       	rjmp	.+28     	; 0x15f9e <SS80_Transparent_State+0x202>
   15f82:	ed b7       	in	r30, 0x3d	; 61
   15f84:	fe b7       	in	r31, 0x3e	; 62
   15f86:	f7 82       	std	Z+7, r15	; 0x07
   15f88:	e6 82       	std	Z+6, r14	; 0x06
   15f8a:	15 83       	std	Z+5, r17	; 0x05
   15f8c:	04 83       	std	Z+4, r16	; 0x04
   15f8e:	82 ef       	ldi	r24, 0xF2	; 242
   15f90:	92 e2       	ldi	r25, 0x22	; 34
   15f92:	a0 e0       	ldi	r26, 0x00	; 0
   15f94:	81 83       	std	Z+1, r24	; 0x01
   15f96:	92 83       	std	Z+2, r25	; 0x02
   15f98:	a3 83       	std	Z+3, r26	; 0x03
   15f9a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   15f9e:	88 85       	ldd	r24, Y+8	; 0x08
   15fa0:	99 85       	ldd	r25, Y+9	; 0x09
   15fa2:	88 27       	eor	r24, r24
   15fa4:	90 7d       	andi	r25, 0xD0	; 208
   15fa6:	02 c0       	rjmp	.+4      	; 0x15fac <SS80_Transparent_State+0x210>
   15fa8:	80 e0       	ldi	r24, 0x00	; 0
   15faa:	90 e0       	ldi	r25, 0x00	; 0
   15fac:	29 96       	adiw	r28, 0x09	; 9
   15fae:	ea e0       	ldi	r30, 0x0A	; 10
   15fb0:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

00015fb4 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15fb4:	a6 e0       	ldi	r26, 0x06	; 6
   15fb6:	b0 e0       	ldi	r27, 0x00	; 0
   15fb8:	e0 ee       	ldi	r30, 0xE0	; 224
   15fba:	ff ea       	ldi	r31, 0xAF	; 175
   15fbc:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15fc0:	80 e0       	ldi	r24, 0x00	; 0
   15fc2:	91 e0       	ldi	r25, 0x01	; 1
   15fc4:	9d 83       	std	Y+5, r25	; 0x05
   15fc6:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15fc8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15fcc:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15fd0:	81 e0       	ldi	r24, 0x01	; 1
   15fd2:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15fd4:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15fd6:	ae 01       	movw	r20, r28
   15fd8:	4c 5f       	subi	r20, 0xFC	; 252
   15fda:	5f 4f       	sbci	r21, 0xFF	; 255
   15fdc:	61 e0       	ldi	r22, 0x01	; 1
   15fde:	70 e0       	ldi	r23, 0x00	; 0
   15fe0:	ce 01       	movw	r24, r28
   15fe2:	06 96       	adiw	r24, 0x06	; 6
   15fe4:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   15fe8:	01 97       	sbiw	r24, 0x01	; 1
   15fea:	99 f0       	breq	.+38     	; 0x16012 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15fec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ff0:	80 ff       	sbrs	r24, 0
   15ff2:	0a c0       	rjmp	.+20     	; 0x16008 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15ff4:	80 e4       	ldi	r24, 0x40	; 64
   15ff6:	92 e2       	ldi	r25, 0x22	; 34
   15ff8:	a0 e0       	ldi	r26, 0x00	; 0
   15ffa:	ed b7       	in	r30, 0x3d	; 61
   15ffc:	fe b7       	in	r31, 0x3e	; 62
   15ffe:	81 83       	std	Z+1, r24	; 0x01
   16000:	92 83       	std	Z+2, r25	; 0x02
   16002:	a3 83       	std	Z+3, r26	; 0x03
   16004:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(status & ERROR_MASK);
   16008:	8c 81       	ldd	r24, Y+4	; 0x04
   1600a:	9d 81       	ldd	r25, Y+5	; 0x05
   1600c:	88 27       	eor	r24, r24
   1600e:	90 7d       	andi	r25, 0xD0	; 208
   16010:	07 c0       	rjmp	.+14     	; 0x16020 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   16012:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16016:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1601a:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   1601c:	80 e0       	ldi	r24, 0x00	; 0
   1601e:	90 e0       	ldi	r25, 0x00	; 0
}
   16020:	26 96       	adiw	r28, 0x06	; 6
   16022:	e2 e0       	ldi	r30, 0x02	; 2
   16024:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00016028 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   16028:	a7 e1       	ldi	r26, 0x17	; 23
   1602a:	b0 e0       	ldi	r27, 0x00	; 0
   1602c:	ea e1       	ldi	r30, 0x1A	; 26
   1602e:	f0 eb       	ldi	r31, 0xB0	; 176
   16030:	0c 94 ed e6 	jmp	0x1cdda	; 0x1cdda <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   16034:	60 91 66 19 	lds	r22, 0x1966	; 0x801966 <SS80s>
   16038:	70 91 67 19 	lds	r23, 0x1967	; 0x801967 <SS80s+0x1>
   1603c:	fb 01       	movw	r30, r22
   1603e:	27 81       	ldd	r18, Z+7	; 0x07
   16040:	30 85       	ldd	r19, Z+8	; 0x08
   16042:	41 85       	ldd	r20, Z+9	; 0x09
   16044:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16046:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   1604a:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   1604e:	fc 01       	movw	r30, r24
   16050:	a2 89       	ldd	r26, Z+18	; 0x12
   16052:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   16054:	fb 01       	movw	r30, r22
   16056:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   16058:	1d 86       	std	Y+13, r1	; 0x0d
   1605a:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   1605c:	54 98       	cbi	0x0a, 4	; 10
   1605e:	4c 99       	sbic	0x09, 4	; 9
   16060:	03 c0       	rjmp	.+6      	; 0x16068 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   16062:	80 e0       	ldi	r24, 0x00	; 0
   16064:	90 e1       	ldi	r25, 0x10	; 16
   16066:	3e c1       	rjmp	.+636    	; 0x162e4 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16068:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <__muluhisi3>
   1606c:	4b 01       	movw	r8, r22
   1606e:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16070:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16074:	85 ff       	sbrs	r24, 5
   16076:	1a c0       	rjmp	.+52     	; 0x160ac <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   16078:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1607c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   16080:	83 85       	ldd	r24, Z+11	; 0x0b
   16082:	94 85       	ldd	r25, Z+12	; 0x0c
   16084:	a5 85       	ldd	r26, Z+13	; 0x0d
   16086:	b6 85       	ldd	r27, Z+14	; 0x0e
   16088:	ed b7       	in	r30, 0x3d	; 61
   1608a:	fe b7       	in	r31, 0x3e	; 62
   1608c:	80 87       	std	Z+8, r24	; 0x08
   1608e:	91 87       	std	Z+9, r25	; 0x09
   16090:	a2 87       	std	Z+10, r26	; 0x0a
   16092:	b3 87       	std	Z+11, r27	; 0x0b
   16094:	84 82       	std	Z+4, r8	; 0x04
   16096:	95 82       	std	Z+5, r9	; 0x05
   16098:	a6 82       	std	Z+6, r10	; 0x06
   1609a:	b7 82       	std	Z+7, r11	; 0x07
   1609c:	8a e1       	ldi	r24, 0x1A	; 26
   1609e:	99 e2       	ldi	r25, 0x29	; 41
   160a0:	a0 e0       	ldi	r26, 0x00	; 0
   160a2:	81 83       	std	Z+1, r24	; 0x01
   160a4:	92 83       	std	Z+2, r25	; 0x02
   160a6:	a3 83       	std	Z+3, r26	; 0x03
   160a8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   160ac:	25 db       	rcall	.-2486   	; 0x156f8 <SS80_cmd_seek>
   160ae:	89 2b       	or	r24, r25
   160b0:	09 f0       	breq	.+2      	; 0x160b4 <SS80_locate_and_read+0x8c>
   160b2:	ae c0       	rjmp	.+348    	; 0x16210 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   160b4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   160b8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   160bc:	43 84       	ldd	r4, Z+11	; 0x0b
   160be:	54 84       	ldd	r5, Z+12	; 0x0c
   160c0:	65 84       	ldd	r6, Z+13	; 0x0d
   160c2:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   160c4:	1e 86       	std	Y+14, r1	; 0x0e
   160c6:	1f 86       	std	Y+15, r1	; 0x0f
   160c8:	18 8a       	std	Y+16, r1	; 0x10
   160ca:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   160cc:	8c ef       	ldi	r24, 0xFC	; 252
   160ce:	98 e2       	ldi	r25, 0x28	; 40
   160d0:	9c 01       	movw	r18, r24
   160d2:	40 e0       	ldi	r20, 0x00	; 0
   160d4:	2a 8b       	std	Y+18, r18	; 0x12
   160d6:	3b 8b       	std	Y+19, r19	; 0x13
   160d8:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   160da:	33 24       	eor	r3, r3
   160dc:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   160de:	8b ec       	ldi	r24, 0xCB	; 203
   160e0:	98 e2       	ldi	r25, 0x28	; 40
   160e2:	9c 01       	movw	r18, r24
   160e4:	40 e0       	ldi	r20, 0x00	; 0
   160e6:	2d 8b       	std	Y+21, r18	; 0x15
   160e8:	3e 8b       	std	Y+22, r19	; 0x16
   160ea:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   160ec:	34 c0       	rjmp	.+104    	; 0x16156 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   160ee:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   160f0:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   160f4:	ae 01       	movw	r20, r28
   160f6:	44 5f       	subi	r20, 0xF4	; 244
   160f8:	5f 4f       	sbci	r21, 0xFF	; 255
   160fa:	b6 01       	movw	r22, r12
   160fc:	8a ee       	ldi	r24, 0xEA	; 234
   160fe:	9c e1       	ldi	r25, 0x1C	; 28
   16100:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   16104:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16106:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1610a:	87 ff       	sbrs	r24, 7
   1610c:	04 c0       	rjmp	.+8      	; 0x16116 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   1610e:	8a ea       	ldi	r24, 0xAA	; 170
   16110:	90 e1       	ldi	r25, 0x10	; 16
   16112:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   16116:	c0 16       	cp	r12, r16
   16118:	d1 06       	cpc	r13, r17
   1611a:	09 f0       	breq	.+2      	; 0x1611e <SS80_locate_and_read+0xf6>
   1611c:	82 c0       	rjmp	.+260    	; 0x16222 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   1611e:	0d 2c       	mov	r0, r13
   16120:	00 0c       	add	r0, r0
   16122:	ee 08       	sbc	r14, r14
   16124:	ff 08       	sbc	r15, r15
   16126:	8c 0c       	add	r8, r12
   16128:	9d 1c       	adc	r9, r13
   1612a:	ae 1c       	adc	r10, r14
   1612c:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   1612e:	01 2e       	mov	r0, r17
   16130:	00 0c       	add	r0, r0
   16132:	22 0b       	sbc	r18, r18
   16134:	33 0b       	sbc	r19, r19
   16136:	8e 85       	ldd	r24, Y+14	; 0x0e
   16138:	9f 85       	ldd	r25, Y+15	; 0x0f
   1613a:	a8 89       	ldd	r26, Y+16	; 0x10
   1613c:	b9 89       	ldd	r27, Y+17	; 0x11
   1613e:	80 0f       	add	r24, r16
   16140:	91 1f       	adc	r25, r17
   16142:	a2 1f       	adc	r26, r18
   16144:	b3 1f       	adc	r27, r19
   16146:	8e 87       	std	Y+14, r24	; 0x0e
   16148:	9f 87       	std	Y+15, r25	; 0x0f
   1614a:	a8 8b       	std	Y+16, r26	; 0x10
   1614c:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   1614e:	40 1a       	sub	r4, r16
   16150:	51 0a       	sbc	r5, r17
   16152:	62 0a       	sbc	r6, r18
   16154:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16156:	41 14       	cp	r4, r1
   16158:	51 04       	cpc	r5, r1
   1615a:	61 04       	cpc	r6, r1
   1615c:	71 04       	cpc	r7, r1
   1615e:	09 f4       	brne	.+2      	; 0x16162 <SS80_locate_and_read+0x13a>
   16160:	92 c0       	rjmp	.+292    	; 0x16286 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   16162:	54 98       	cbi	0x0a, 4	; 10
   16164:	4c 9b       	sbis	0x09, 4	; 9
   16166:	7d cf       	rjmp	.-262    	; 0x16062 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   16168:	31 e0       	ldi	r19, 0x01	; 1
   1616a:	43 16       	cp	r4, r19
   1616c:	53 06       	cpc	r5, r19
   1616e:	61 04       	cpc	r6, r1
   16170:	71 04       	cpc	r7, r1
   16172:	08 f4       	brcc	.+2      	; 0x16176 <SS80_locate_and_read+0x14e>
   16174:	4f c0       	rjmp	.+158    	; 0x16214 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   16176:	1d 86       	std	Y+13, r1	; 0x0d
   16178:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   1617a:	c1 2c       	mov	r12, r1
   1617c:	dd 24       	eor	r13, r13
   1617e:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   16180:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16184:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   16186:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   1618a:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   1618e:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   16192:	43 e0       	ldi	r20, 0x03	; 3
   16194:	e4 0e       	add	r14, r20
   16196:	f1 1c       	adc	r15, r1
   16198:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1619c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   161a0:	86 01       	movw	r16, r12
   161a2:	2a ee       	ldi	r18, 0xEA	; 234
   161a4:	3c e1       	ldi	r19, 0x1C	; 28
   161a6:	b5 01       	movw	r22, r10
   161a8:	a4 01       	movw	r20, r8
   161aa:	82 81       	ldd	r24, Z+2	; 0x02
   161ac:	93 81       	ldd	r25, Z+3	; 0x03
   161ae:	0e 94 c4 84 	call	0x10988	; 0x10988 <dbf_open_read>
   161b2:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   161b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161b8:	86 ff       	sbrs	r24, 6
   161ba:	04 c0       	rjmp	.+8      	; 0x161c4 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   161bc:	8f e9       	ldi	r24, 0x9F	; 159
   161be:	90 e1       	ldi	r25, 0x10	; 16
   161c0:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   161c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161c8:	85 ff       	sbrs	r24, 5
   161ca:	0c c0       	rjmp	.+24     	; 0x161e4 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   161cc:	ed b7       	in	r30, 0x3d	; 61
   161ce:	fe b7       	in	r31, 0x3e	; 62
   161d0:	15 83       	std	Z+5, r17	; 0x05
   161d2:	04 83       	std	Z+4, r16	; 0x04
   161d4:	2a 89       	ldd	r18, Y+18	; 0x12
   161d6:	3b 89       	ldd	r19, Y+19	; 0x13
   161d8:	4c 89       	ldd	r20, Y+20	; 0x14
   161da:	21 83       	std	Z+1, r18	; 0x01
   161dc:	32 83       	std	Z+2, r19	; 0x02
   161de:	43 83       	std	Z+3, r20	; 0x03
   161e0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   161e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   161e8:	17 ff       	sbrs	r17, 7
   161ea:	81 cf       	rjmp	.-254    	; 0x160ee <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   161ec:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   161f0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   161f4:	91 e0       	ldi	r25, 0x01	; 1
   161f6:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   161f8:	80 ff       	sbrs	r24, 0
   161fa:	0a c0       	rjmp	.+20     	; 0x16210 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   161fc:	84 ee       	ldi	r24, 0xE4	; 228
   161fe:	98 e2       	ldi	r25, 0x28	; 40
   16200:	a0 e0       	ldi	r26, 0x00	; 0
   16202:	ed b7       	in	r30, 0x3d	; 61
   16204:	fe b7       	in	r31, 0x3e	; 62
   16206:	81 83       	std	Z+1, r24	; 0x01
   16208:	92 83       	std	Z+2, r25	; 0x02
   1620a:	a3 83       	std	Z+3, r26	; 0x03
   1620c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            return( SS80_error_return() );
   16210:	d1 de       	rcall	.-606    	; 0x15fb4 <SS80_error_return>
   16212:	68 c0       	rjmp	.+208    	; 0x162e4 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   16214:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   16216:	8c 85       	ldd	r24, Y+12	; 0x0c
   16218:	9d 85       	ldd	r25, Y+13	; 0x0d
   1621a:	91 60       	ori	r25, 0x01	; 1
   1621c:	9d 87       	std	Y+13, r25	; 0x0d
   1621e:	8c 87       	std	Y+12, r24	; 0x0c
   16220:	af cf       	rjmp	.-162    	; 0x16180 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   16222:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16226:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1622a:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   1622c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16230:	80 ff       	sbrs	r24, 0
   16232:	0a c0       	rjmp	.+20     	; 0x16248 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   16234:	2d 89       	ldd	r18, Y+21	; 0x15
   16236:	3e 89       	ldd	r19, Y+22	; 0x16
   16238:	4f 89       	ldd	r20, Y+23	; 0x17
   1623a:	ed b7       	in	r30, 0x3d	; 61
   1623c:	fe b7       	in	r31, 0x3e	; 62
   1623e:	21 83       	std	Z+1, r18	; 0x01
   16240:	32 83       	std	Z+2, r19	; 0x02
   16242:	43 83       	std	Z+3, r20	; 0x03
   16244:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            if(status & ERROR_MASK)
   16248:	8c 85       	ldd	r24, Y+12	; 0x0c
   1624a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1624c:	88 27       	eor	r24, r24
   1624e:	90 7d       	andi	r25, 0xD0	; 208
   16250:	89 2b       	or	r24, r25
   16252:	09 f4       	brne	.+2      	; 0x16256 <SS80_locate_and_read+0x22e>
   16254:	64 cf       	rjmp	.-312    	; 0x1611e <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   16256:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1625a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1625e:	83 81       	ldd	r24, Z+3	; 0x03
   16260:	94 81       	ldd	r25, Z+4	; 0x04
   16262:	80 62       	ori	r24, 0x20	; 32
   16264:	94 83       	std	Z+4, r25	; 0x04
   16266:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   16268:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1626c:	80 ff       	sbrs	r24, 0
   1626e:	21 c0       	rjmp	.+66     	; 0x162b2 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   16270:	86 ea       	ldi	r24, 0xA6	; 166
   16272:	98 e2       	ldi	r25, 0x28	; 40
   16274:	a0 e0       	ldi	r26, 0x00	; 0
   16276:	ed b7       	in	r30, 0x3d	; 61
   16278:	fe b7       	in	r31, 0x3e	; 62
   1627a:	81 83       	std	Z+1, r24	; 0x01
   1627c:	92 83       	std	Z+2, r25	; 0x02
   1627e:	a3 83       	std	Z+3, r26	; 0x03
   16280:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16284:	16 c0       	rjmp	.+44     	; 0x162b2 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16286:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1628a:	85 ff       	sbrs	r24, 5
   1628c:	12 c0       	rjmp	.+36     	; 0x162b2 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   1628e:	8e 85       	ldd	r24, Y+14	; 0x0e
   16290:	9f 85       	ldd	r25, Y+15	; 0x0f
   16292:	a8 89       	ldd	r26, Y+16	; 0x10
   16294:	b9 89       	ldd	r27, Y+17	; 0x11
   16296:	ed b7       	in	r30, 0x3d	; 61
   16298:	fe b7       	in	r31, 0x3e	; 62
   1629a:	84 83       	std	Z+4, r24	; 0x04
   1629c:	95 83       	std	Z+5, r25	; 0x05
   1629e:	a6 83       	std	Z+6, r26	; 0x06
   162a0:	b7 83       	std	Z+7, r27	; 0x07
   162a2:	8e e7       	ldi	r24, 0x7E	; 126
   162a4:	98 e2       	ldi	r25, 0x28	; 40
   162a6:	a0 e0       	ldi	r26, 0x00	; 0
   162a8:	81 83       	std	Z+1, r24	; 0x01
   162aa:	92 83       	std	Z+2, r25	; 0x02
   162ac:	a3 83       	std	Z+3, r26	; 0x03
   162ae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   162b2:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   162b6:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   162ba:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   162be:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   162c2:	22 89       	ldd	r18, Z+18	; 0x12
   162c4:	33 89       	ldd	r19, Z+19	; 0x13
   162c6:	40 e0       	ldi	r20, 0x00	; 0
   162c8:	50 e0       	ldi	r21, 0x00	; 0
   162ca:	c5 01       	movw	r24, r10
   162cc:	b4 01       	movw	r22, r8
   162ce:	0e 94 7f e6 	call	0x1ccfe	; 0x1ccfe <__udivmodsi4>
   162d2:	f8 01       	movw	r30, r16
   162d4:	27 83       	std	Z+7, r18	; 0x07
   162d6:	30 87       	std	Z+8, r19	; 0x08
   162d8:	41 87       	std	Z+9, r20	; 0x09
   162da:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   162dc:	8c 85       	ldd	r24, Y+12	; 0x0c
   162de:	9d 85       	ldd	r25, Y+13	; 0x0d
   162e0:	88 27       	eor	r24, r24
   162e2:	90 7d       	andi	r25, 0xD0	; 208
}
   162e4:	67 96       	adiw	r28, 0x17	; 23
   162e6:	e1 e1       	ldi	r30, 0x11	; 17
   162e8:	0c 94 09 e7 	jmp	0x1ce12	; 0x1ce12 <__epilogue_restores__+0x2>

000162ec <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   162ec:	cf 93       	push	r28
   162ee:	df 93       	push	r29
   162f0:	00 d0       	rcall	.+0      	; 0x162f2 <SS80_Execute_State+0x6>
   162f2:	00 d0       	rcall	.+0      	; 0x162f4 <SS80_Execute_State+0x8>
   162f4:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   162f6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   162fa:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   162fe:	81 81       	ldd	r24, Z+1	; 0x01
   16300:	90 e0       	ldi	r25, 0x00	; 0
   16302:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
    switch(SS80s->estate)
   16306:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1630a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1630e:	80 81       	ld	r24, Z
   16310:	91 81       	ldd	r25, Z+1	; 0x01
   16312:	82 30       	cpi	r24, 0x02	; 2
   16314:	91 05       	cpc	r25, r1
   16316:	89 f0       	breq	.+34     	; 0x1633a <SS80_Execute_State+0x4e>
   16318:	3c f4       	brge	.+14     	; 0x16328 <SS80_Execute_State+0x3c>
   1631a:	00 97       	sbiw	r24, 0x00	; 0
   1631c:	81 f1       	breq	.+96     	; 0x1637e <SS80_Execute_State+0x92>
   1631e:	81 30       	cpi	r24, 0x01	; 1
   16320:	91 05       	cpc	r25, r1
   16322:	b9 f4       	brne	.+46     	; 0x16352 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   16324:	81 de       	rcall	.-766    	; 0x16028 <SS80_locate_and_read>
   16326:	0d c0       	rjmp	.+26     	; 0x16342 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   16328:	83 30       	cpi	r24, 0x03	; 3
   1632a:	91 05       	cpc	r25, r1
   1632c:	41 f0       	breq	.+16     	; 0x1633e <SS80_Execute_State+0x52>
   1632e:	84 30       	cpi	r24, 0x04	; 4
   16330:	91 05       	cpc	r25, r1
   16332:	79 f4       	brne	.+30     	; 0x16352 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16334:	0e 94 45 a8 	call	0x1508a	; 0x1508a <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   16338:	04 c0       	rjmp	.+8      	; 0x16342 <SS80_Execute_State+0x56>
   1633a:	53 da       	rcall	.-2906   	; 0x157e2 <SS80_locate_and_write>
   1633c:	02 c0       	rjmp	.+4      	; 0x16342 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   1633e:	0e 94 c4 a7 	call	0x14f88	; 0x14f88 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16342:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   16344:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16348:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1634c:	11 82       	std	Z+1, r1	; 0x01
   1634e:	10 82       	st	Z, r1
            break;
   16350:	18 c0       	rjmp	.+48     	; 0x16382 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   16352:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16356:	20 ff       	sbrs	r18, 0
   16358:	0c c0       	rjmp	.+24     	; 0x16372 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   1635a:	ed b7       	in	r30, 0x3d	; 61
   1635c:	fe b7       	in	r31, 0x3e	; 62
   1635e:	95 83       	std	Z+5, r25	; 0x05
   16360:	84 83       	std	Z+4, r24	; 0x04
   16362:	82 e4       	ldi	r24, 0x42	; 66
   16364:	99 e2       	ldi	r25, 0x29	; 41
   16366:	a0 e0       	ldi	r26, 0x00	; 0
   16368:	81 83       	std	Z+1, r24	; 0x01
   1636a:	92 83       	std	Z+2, r25	; 0x02
   1636c:	a3 83       	std	Z+3, r26	; 0x03
   1636e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            SS80s->estate = EXEC_IDLE;
   16372:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   16376:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1637a:	11 82       	std	Z+1, r1	; 0x01
   1637c:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   1637e:	c0 e0       	ldi	r28, 0x00	; 0
   16380:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   16382:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   16386:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1638a:	81 81       	ldd	r24, Z+1	; 0x01
   1638c:	90 e0       	ldi	r25, 0x00	; 0
   1638e:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
    return(ret);
}
   16392:	ce 01       	movw	r24, r28
   16394:	cd b7       	in	r28, 0x3d	; 61
   16396:	de b7       	in	r29, 0x3e	; 62
   16398:	25 96       	adiw	r28, 0x05	; 5
   1639a:	e2 e0       	ldi	r30, 0x02	; 2
   1639c:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

000163a0 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   163a0:	a9 e0       	ldi	r26, 0x09	; 9
   163a2:	b0 e0       	ldi	r27, 0x00	; 0
   163a4:	e6 ed       	ldi	r30, 0xD6	; 214
   163a6:	f1 eb       	ldi	r31, 0xB1	; 177
   163a8:	0c 94 fb e6 	jmp	0x1cdf6	; 0x1cdf6 <__prologue_saves__+0x1e>
   163ac:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   163ae:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   163b2:	90 e0       	ldi	r25, 0x00	; 0
   163b4:	0e 94 8e 8c 	call	0x1191c	; 0x1191c <SS80_is_MTA>
   163b8:	89 2b       	or	r24, r25
   163ba:	19 f0       	breq	.+6      	; 0x163c2 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   163bc:	15 36       	cpi	r17, 0x65	; 101
   163be:	19 f5       	brne	.+70     	; 0x16406 <SS80_COMMANDS+0x66>
   163c0:	09 c0       	rjmp	.+18     	; 0x163d4 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   163c2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   163c6:	90 e0       	ldi	r25, 0x00	; 0
   163c8:	0e 94 7c 8c 	call	0x118f8	; 0x118f8 <SS80_is_MLA>
   163cc:	ec 01       	movw	r28, r24
   163ce:	89 2b       	or	r24, r25
   163d0:	a9 f7       	brne	.-22     	; 0x163bc <SS80_COMMANDS+0x1c>
   163d2:	ad c0       	rjmp	.+346    	; 0x1652e <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   163d4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   163d8:	90 e0       	ldi	r25, 0x00	; 0
   163da:	0e 94 7c 8c 	call	0x118f8	; 0x118f8 <SS80_is_MLA>
   163de:	89 2b       	or	r24, r25
   163e0:	09 f4       	brne	.+2      	; 0x163e4 <SS80_COMMANDS+0x44>
   163e2:	a2 c0       	rjmp	.+324    	; 0x16528 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   163e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163e8:	85 ff       	sbrs	r24, 5
   163ea:	0a c0       	rjmp	.+20     	; 0x16400 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   163ec:	8a e2       	ldi	r24, 0x2A	; 42
   163ee:	92 e2       	ldi	r25, 0x22	; 34
   163f0:	a0 e0       	ldi	r26, 0x00	; 0
   163f2:	ed b7       	in	r30, 0x3d	; 61
   163f4:	fe b7       	in	r31, 0x3e	; 62
   163f6:	81 83       	std	Z+1, r24	; 0x01
   163f8:	92 83       	std	Z+2, r25	; 0x02
   163fa:	a3 83       	std	Z+3, r26	; 0x03
   163fc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                return ( SS80_Command_State() );
   16400:	0e 94 05 a9 	call	0x1520a	; 0x1520a <SS80_Command_State>
   16404:	73 c0       	rjmp	.+230    	; 0x164ec <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   16406:	1e 36       	cpi	r17, 0x6E	; 110
   16408:	01 f5       	brne	.+64     	; 0x1644a <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   1640a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1640e:	90 e0       	ldi	r25, 0x00	; 0
   16410:	0e 94 7c 8c 	call	0x118f8	; 0x118f8 <SS80_is_MLA>
   16414:	89 2b       	or	r24, r25
   16416:	79 f0       	breq	.+30     	; 0x16436 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16418:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1641c:	85 ff       	sbrs	r24, 5
   1641e:	13 c0       	rjmp	.+38     	; 0x16446 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   16420:	84 e1       	ldi	r24, 0x14	; 20
   16422:	92 e2       	ldi	r25, 0x22	; 34
   16424:	a0 e0       	ldi	r26, 0x00	; 0
   16426:	ed b7       	in	r30, 0x3d	; 61
   16428:	fe b7       	in	r31, 0x3e	; 62
   1642a:	81 83       	std	Z+1, r24	; 0x01
   1642c:	92 83       	std	Z+2, r25	; 0x02
   1642e:	a3 83       	std	Z+3, r26	; 0x03
   16430:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16434:	08 c0       	rjmp	.+16     	; 0x16446 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   16436:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1643a:	90 e0       	ldi	r25, 0x00	; 0
   1643c:	0e 94 8e 8c 	call	0x1191c	; 0x1191c <SS80_is_MTA>
   16440:	89 2b       	or	r24, r25
   16442:	51 f7       	brne	.-44     	; 0x16418 <SS80_COMMANDS+0x78>
   16444:	71 c0       	rjmp	.+226    	; 0x16528 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   16446:	52 df       	rcall	.-348    	; 0x162ec <SS80_Execute_State>
   16448:	51 c0       	rjmp	.+162    	; 0x164ec <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   1644a:	10 37       	cpi	r17, 0x70	; 112
   1644c:	b9 f5       	brne	.+110    	; 0x164bc <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   1644e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16452:	90 e0       	ldi	r25, 0x00	; 0
   16454:	0e 94 8e 8c 	call	0x1191c	; 0x1191c <SS80_is_MTA>
   16458:	89 2b       	or	r24, r25
   1645a:	81 f0       	breq	.+32     	; 0x1647c <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1645c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16460:	85 ff       	sbrs	r24, 5
   16462:	0a c0       	rjmp	.+20     	; 0x16478 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   16464:	8f ef       	ldi	r24, 0xFF	; 255
   16466:	91 e2       	ldi	r25, 0x21	; 33
   16468:	a0 e0       	ldi	r26, 0x00	; 0
   1646a:	ed b7       	in	r30, 0x3d	; 61
   1646c:	fe b7       	in	r31, 0x3e	; 62
   1646e:	81 83       	std	Z+1, r24	; 0x01
   16470:	92 83       	std	Z+2, r25	; 0x02
   16472:	a3 83       	std	Z+3, r26	; 0x03
   16474:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                return( SS80_Report() );
   16478:	46 db       	rcall	.-2420   	; 0x15b06 <SS80_Report>
   1647a:	38 c0       	rjmp	.+112    	; 0x164ec <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   1647c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16480:	90 e0       	ldi	r25, 0x00	; 0
   16482:	0e 94 7c 8c 	call	0x118f8	; 0x118f8 <SS80_is_MLA>
   16486:	89 2b       	or	r24, r25
   16488:	09 f4       	brne	.+2      	; 0x1648c <SS80_COMMANDS+0xec>
   1648a:	4e c0       	rjmp	.+156    	; 0x16528 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1648c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16490:	85 ff       	sbrs	r24, 5
   16492:	0a c0       	rjmp	.+20     	; 0x164a8 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   16494:	80 ef       	ldi	r24, 0xF0	; 240
   16496:	91 e2       	ldi	r25, 0x21	; 33
   16498:	a0 e0       	ldi	r26, 0x00	; 0
   1649a:	ed b7       	in	r30, 0x3d	; 61
   1649c:	fe b7       	in	r31, 0x3e	; 62
   1649e:	81 83       	std	Z+1, r24	; 0x01
   164a0:	92 83       	std	Z+2, r25	; 0x02
   164a2:	a3 83       	std	Z+3, r26	; 0x03
   164a4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   164a8:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   164ac:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   164b0:	81 81       	ldd	r24, Z+1	; 0x01
   164b2:	90 e0       	ldi	r25, 0x00	; 0
   164b4:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   164b8:	1d dc       	rcall	.-1990   	; 0x15cf4 <SS80_Amigo_Clear>
   164ba:	18 c0       	rjmp	.+48     	; 0x164ec <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   164bc:	12 37       	cpi	r17, 0x72	; 114
   164be:	c1 f4       	brne	.+48     	; 0x164f0 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   164c0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   164c4:	90 e0       	ldi	r25, 0x00	; 0
   164c6:	0e 94 7c 8c 	call	0x118f8	; 0x118f8 <SS80_is_MLA>
   164ca:	89 2b       	or	r24, r25
   164cc:	89 f0       	breq	.+34     	; 0x164f0 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   164ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164d2:	85 ff       	sbrs	r24, 5
   164d4:	0a c0       	rjmp	.+20     	; 0x164ea <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   164d6:	8c ed       	ldi	r24, 0xDC	; 220
   164d8:	91 e2       	ldi	r25, 0x21	; 33
   164da:	a0 e0       	ldi	r26, 0x00	; 0
   164dc:	ed b7       	in	r30, 0x3d	; 61
   164de:	fe b7       	in	r31, 0x3e	; 62
   164e0:	81 83       	std	Z+1, r24	; 0x01
   164e2:	92 83       	std	Z+2, r25	; 0x02
   164e4:	a3 83       	std	Z+3, r26	; 0x03
   164e6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                return( SS80_Transparent_State() );
   164ea:	58 dc       	rcall	.-1872   	; 0x15d9c <SS80_Transparent_State>
   164ec:	ec 01       	movw	r28, r24
   164ee:	3b c0       	rjmp	.+118    	; 0x16566 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   164f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164f4:	80 ff       	sbrs	r24, 0
   164f6:	18 c0       	rjmp	.+48     	; 0x16528 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   164f8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   164fc:	90 e0       	ldi	r25, 0x00	; 0
   164fe:	ed b7       	in	r30, 0x3d	; 61
   16500:	fe b7       	in	r31, 0x3e	; 62
   16502:	91 87       	std	Z+9, r25	; 0x09
   16504:	80 87       	std	Z+8, r24	; 0x08
   16506:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1650a:	90 e0       	ldi	r25, 0x00	; 0
   1650c:	97 83       	std	Z+7, r25	; 0x07
   1650e:	86 83       	std	Z+6, r24	; 0x06
   16510:	81 2f       	mov	r24, r17
   16512:	90 e0       	ldi	r25, 0x00	; 0
   16514:	95 83       	std	Z+5, r25	; 0x05
   16516:	84 83       	std	Z+4, r24	; 0x04
   16518:	88 ea       	ldi	r24, 0xA8	; 168
   1651a:	91 e2       	ldi	r25, 0x21	; 33
   1651c:	a0 e0       	ldi	r26, 0x00	; 0
   1651e:	81 83       	std	Z+1, r24	; 0x01
   16520:	92 83       	std	Z+2, r25	; 0x02
   16522:	a3 83       	std	Z+3, r26	; 0x03
   16524:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   16528:	c0 e0       	ldi	r28, 0x00	; 0
   1652a:	d0 e0       	ldi	r29, 0x00	; 0
   1652c:	1c c0       	rjmp	.+56     	; 0x16566 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   1652e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16532:	80 ff       	sbrs	r24, 0
   16534:	f9 cf       	rjmp	.-14     	; 0x16528 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   16536:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1653a:	90 e0       	ldi	r25, 0x00	; 0
   1653c:	ed b7       	in	r30, 0x3d	; 61
   1653e:	fe b7       	in	r31, 0x3e	; 62
   16540:	91 87       	std	Z+9, r25	; 0x09
   16542:	80 87       	std	Z+8, r24	; 0x08
   16544:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16548:	90 e0       	ldi	r25, 0x00	; 0
   1654a:	97 83       	std	Z+7, r25	; 0x07
   1654c:	86 83       	std	Z+6, r24	; 0x06
   1654e:	81 2f       	mov	r24, r17
   16550:	90 e0       	ldi	r25, 0x00	; 0
   16552:	95 83       	std	Z+5, r25	; 0x05
   16554:	84 83       	std	Z+4, r24	; 0x04
   16556:	84 e7       	ldi	r24, 0x74	; 116
   16558:	91 e2       	ldi	r25, 0x21	; 33
   1655a:	a0 e0       	ldi	r26, 0x00	; 0
   1655c:	81 83       	std	Z+1, r24	; 0x01
   1655e:	92 83       	std	Z+2, r25	; 0x02
   16560:	a3 83       	std	Z+3, r26	; 0x03
   16562:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   16566:	ce 01       	movw	r24, r28
   16568:	cd b7       	in	r28, 0x3d	; 61
   1656a:	de b7       	in	r29, 0x3e	; 62
   1656c:	29 96       	adiw	r28, 0x09	; 9
   1656e:	e3 e0       	ldi	r30, 0x03	; 3
   16570:	0c 94 17 e7 	jmp	0x1ce2e	; 0x1ce2e <__epilogue_restores__+0x1e>

00016574 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   16574:	cf 92       	push	r12
   16576:	df 92       	push	r13
   16578:	ef 92       	push	r14
   1657a:	0f 93       	push	r16
   1657c:	1f 93       	push	r17
   1657e:	cf 93       	push	r28
   16580:	df 93       	push	r29
   16582:	00 d0       	rcall	.+0      	; 0x16584 <amigo_overflow_check+0x10>
   16584:	00 d0       	rcall	.+0      	; 0x16586 <amigo_overflow_check+0x12>
   16586:	1f 92       	push	r1
   16588:	ec 01       	movw	r28, r24
   1658a:	8b 01       	movw	r16, r22
   1658c:	80 e0       	ldi	r24, 0x00	; 0
   1658e:	90 e0       	ldi	r25, 0x00	; 0
   16590:	2c e2       	ldi	r18, 0x2C	; 44
   16592:	31 e3       	ldi	r19, 0x31	; 49
   16594:	69 01       	movw	r12, r18
   16596:	e1 2c       	mov	r14, r1
   16598:	2d 81       	ldd	r18, Y+5	; 0x05
   1659a:	30 e0       	ldi	r19, 0x00	; 0
   1659c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   165a0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   165a4:	42 85       	ldd	r20, Z+10	; 0x0a
   165a6:	53 85       	ldd	r21, Z+11	; 0x0b
   165a8:	24 17       	cp	r18, r20
   165aa:	35 07       	cpc	r19, r21
   165ac:	64 f1       	brlt	.+88     	; 0x16606 <amigo_overflow_check+0x92>
   165ae:	1d 82       	std	Y+5, r1	; 0x05
   165b0:	2c 81       	ldd	r18, Y+4	; 0x04
   165b2:	2f 5f       	subi	r18, 0xFF	; 255
   165b4:	2c 83       	std	Y+4, r18	; 0x04
   165b6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   165ba:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   165be:	2c 81       	ldd	r18, Y+4	; 0x04
   165c0:	30 e0       	ldi	r19, 0x00	; 0
   165c2:	44 85       	ldd	r20, Z+12	; 0x0c
   165c4:	55 85       	ldd	r21, Z+13	; 0x0d
   165c6:	24 17       	cp	r18, r20
   165c8:	35 07       	cpc	r19, r21
   165ca:	34 f3       	brlt	.-52     	; 0x16598 <amigo_overflow_check+0x24>
   165cc:	1c 82       	std	Y+4, r1	; 0x04
   165ce:	2b 81       	ldd	r18, Y+3	; 0x03
   165d0:	2f 5f       	subi	r18, 0xFF	; 255
   165d2:	2b 83       	std	Y+3, r18	; 0x03
   165d4:	30 e0       	ldi	r19, 0x00	; 0
   165d6:	46 85       	ldd	r20, Z+14	; 0x0e
   165d8:	57 85       	ldd	r21, Z+15	; 0x0f
   165da:	24 17       	cp	r18, r20
   165dc:	35 07       	cpc	r19, r21
   165de:	5c f3       	brlt	.-42     	; 0x165b6 <amigo_overflow_check+0x42>
   165e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165e4:	80 ff       	sbrs	r24, 0
   165e6:	0c c0       	rjmp	.+24     	; 0x16600 <amigo_overflow_check+0x8c>
   165e8:	01 15       	cp	r16, r1
   165ea:	11 05       	cpc	r17, r1
   165ec:	49 f0       	breq	.+18     	; 0x16600 <amigo_overflow_check+0x8c>
   165ee:	ed b7       	in	r30, 0x3d	; 61
   165f0:	fe b7       	in	r31, 0x3e	; 62
   165f2:	15 83       	std	Z+5, r17	; 0x05
   165f4:	04 83       	std	Z+4, r16	; 0x04
   165f6:	c1 82       	std	Z+1, r12	; 0x01
   165f8:	d2 82       	std	Z+2, r13	; 0x02
   165fa:	e3 82       	std	Z+3, r14	; 0x03
   165fc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16600:	81 e0       	ldi	r24, 0x01	; 1
   16602:	90 e0       	ldi	r25, 0x00	; 0
   16604:	d8 cf       	rjmp	.-80     	; 0x165b6 <amigo_overflow_check+0x42>
   16606:	0f 90       	pop	r0
   16608:	0f 90       	pop	r0
   1660a:	0f 90       	pop	r0
   1660c:	0f 90       	pop	r0
   1660e:	0f 90       	pop	r0
   16610:	df 91       	pop	r29
   16612:	cf 91       	pop	r28
   16614:	1f 91       	pop	r17
   16616:	0f 91       	pop	r16
   16618:	ef 90       	pop	r14
   1661a:	df 90       	pop	r13
   1661c:	cf 90       	pop	r12
   1661e:	08 95       	ret

00016620 <amigo_chs_to_logical>:
   16620:	a1 e1       	ldi	r26, 0x11	; 17
   16622:	b0 e0       	ldi	r27, 0x00	; 0
   16624:	e6 e1       	ldi	r30, 0x16	; 22
   16626:	f3 eb       	ldi	r31, 0xB3	; 179
   16628:	0c 94 f0 e6 	jmp	0x1cde0	; 0x1cde0 <__prologue_saves__+0x8>
   1662c:	8b 01       	movw	r16, r22
   1662e:	60 91 64 19 	lds	r22, 0x1964	; 0x801964 <AMIGOp>
   16632:	70 91 65 19 	lds	r23, 0x1965	; 0x801965 <AMIGOp+0x1>
   16636:	fb 01       	movw	r30, r22
   16638:	42 85       	ldd	r20, Z+10	; 0x0a
   1663a:	53 85       	ldd	r21, Z+11	; 0x0b
   1663c:	fc 01       	movw	r30, r24
   1663e:	c4 81       	ldd	r28, Z+4	; 0x04
   16640:	d0 e0       	ldi	r29, 0x00	; 0
   16642:	4c 9f       	mul	r20, r28
   16644:	90 01       	movw	r18, r0
   16646:	4d 9f       	mul	r20, r29
   16648:	30 0d       	add	r19, r0
   1664a:	5c 9f       	mul	r21, r28
   1664c:	30 0d       	add	r19, r0
   1664e:	11 24       	eor	r1, r1
   16650:	49 01       	movw	r8, r18
   16652:	33 0f       	add	r19, r19
   16654:	aa 08       	sbc	r10, r10
   16656:	bb 08       	sbc	r11, r11
   16658:	63 80       	ldd	r6, Z+3	; 0x03
   1665a:	71 2c       	mov	r7, r1
   1665c:	fb 01       	movw	r30, r22
   1665e:	e4 84       	ldd	r14, Z+12	; 0x0c
   16660:	f5 84       	ldd	r15, Z+13	; 0x0d
   16662:	4e 9d       	mul	r20, r14
   16664:	d0 01       	movw	r26, r0
   16666:	4f 9d       	mul	r20, r15
   16668:	b0 0d       	add	r27, r0
   1666a:	5e 9d       	mul	r21, r14
   1666c:	b0 0d       	add	r27, r0
   1666e:	11 24       	eor	r1, r1
   16670:	a6 9d       	mul	r26, r6
   16672:	90 01       	movw	r18, r0
   16674:	a7 9d       	mul	r26, r7
   16676:	30 0d       	add	r19, r0
   16678:	b6 9d       	mul	r27, r6
   1667a:	30 0d       	add	r19, r0
   1667c:	11 24       	eor	r1, r1
   1667e:	69 01       	movw	r12, r18
   16680:	33 0f       	add	r19, r19
   16682:	ee 08       	sbc	r14, r14
   16684:	ff 08       	sbc	r15, r15
   16686:	8c 0c       	add	r8, r12
   16688:	9d 1c       	adc	r9, r13
   1668a:	ae 1c       	adc	r10, r14
   1668c:	bf 1c       	adc	r11, r15
   1668e:	fc 01       	movw	r30, r24
   16690:	f5 80       	ldd	r15, Z+5	; 0x05
   16692:	a5 01       	movw	r20, r10
   16694:	94 01       	movw	r18, r8
   16696:	2f 0d       	add	r18, r15
   16698:	31 1d       	adc	r19, r1
   1669a:	41 1d       	adc	r20, r1
   1669c:	51 1d       	adc	r21, r1
   1669e:	fb 01       	movw	r30, r22
   166a0:	a0 85       	ldd	r26, Z+8	; 0x08
   166a2:	b1 85       	ldd	r27, Z+9	; 0x09
   166a4:	0e 94 d6 e6 	call	0x1cdac	; 0x1cdac <__mulshisi3>
   166a8:	4b 01       	movw	r8, r22
   166aa:	5c 01       	movw	r10, r24
   166ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166b0:	85 ff       	sbrs	r24, 5
   166b2:	22 c0       	rjmp	.+68     	; 0x166f8 <amigo_chs_to_logical+0xd8>
   166b4:	8f 2d       	mov	r24, r15
   166b6:	90 e0       	ldi	r25, 0x00	; 0
   166b8:	ed b7       	in	r30, 0x3d	; 61
   166ba:	fe b7       	in	r31, 0x3e	; 62
   166bc:	91 8b       	std	Z+17, r25	; 0x11
   166be:	80 8b       	std	Z+16, r24	; 0x10
   166c0:	d7 87       	std	Z+15, r29	; 0x0f
   166c2:	c6 87       	std	Z+14, r28	; 0x0e
   166c4:	75 86       	std	Z+13, r7	; 0x0d
   166c6:	64 86       	std	Z+12, r6	; 0x0c
   166c8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   166cc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   166d0:	81 81       	ldd	r24, Z+1	; 0x01
   166d2:	90 e0       	ldi	r25, 0x00	; 0
   166d4:	ed b7       	in	r30, 0x3d	; 61
   166d6:	fe b7       	in	r31, 0x3e	; 62
   166d8:	93 87       	std	Z+11, r25	; 0x0b
   166da:	82 87       	std	Z+10, r24	; 0x0a
   166dc:	86 82       	std	Z+6, r8	; 0x06
   166de:	97 82       	std	Z+7, r9	; 0x07
   166e0:	a0 86       	std	Z+8, r10	; 0x08
   166e2:	b1 86       	std	Z+9, r11	; 0x09
   166e4:	15 83       	std	Z+5, r17	; 0x05
   166e6:	04 83       	std	Z+4, r16	; 0x04
   166e8:	89 ed       	ldi	r24, 0xD9	; 217
   166ea:	90 e3       	ldi	r25, 0x30	; 48
   166ec:	a0 e0       	ldi	r26, 0x00	; 0
   166ee:	81 83       	std	Z+1, r24	; 0x01
   166f0:	92 83       	std	Z+2, r25	; 0x02
   166f2:	a3 83       	std	Z+3, r26	; 0x03
   166f4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   166f8:	c5 01       	movw	r24, r10
   166fa:	b4 01       	movw	r22, r8
   166fc:	cd b7       	in	r28, 0x3d	; 61
   166fe:	de b7       	in	r29, 0x3e	; 62
   16700:	61 96       	adiw	r28, 0x11	; 17
   16702:	ee e0       	ldi	r30, 0x0E	; 14
   16704:	0c 94 0c e7 	jmp	0x1ce18	; 0x1ce18 <__epilogue_restores__+0x8>

00016708 <amigo_init>:
   16708:	ff 92       	push	r15
   1670a:	0f 93       	push	r16
   1670c:	1f 93       	push	r17
   1670e:	cf 93       	push	r28
   16710:	df 93       	push	r29
   16712:	0d e6       	ldi	r16, 0x6D	; 109
   16714:	1f e1       	ldi	r17, 0x1F	; 31
   16716:	cb e0       	ldi	r28, 0x0B	; 11
   16718:	d4 e0       	ldi	r29, 0x04	; 4
   1671a:	82 e0       	ldi	r24, 0x02	; 2
   1671c:	f8 2e       	mov	r15, r24
   1671e:	d8 01       	movw	r26, r16
   16720:	8c 91       	ld	r24, X
   16722:	81 30       	cpi	r24, 0x01	; 1
   16724:	31 f5       	brne	.+76     	; 0x16772 <amigo_init+0x6a>
   16726:	8c 2f       	mov	r24, r28
   16728:	0e 94 9c 97 	call	0x12f38	; 0x12f38 <set_active_device>
   1672c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16730:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16734:	10 82       	st	Z, r1
   16736:	9f 01       	movw	r18, r30
   16738:	27 5f       	subi	r18, 0xF7	; 247
   1673a:	3f 4f       	sbci	r19, 0xFF	; 255
   1673c:	d9 01       	movw	r26, r18
   1673e:	8d 2f       	mov	r24, r29
   16740:	1d 92       	st	X+, r1
   16742:	8a 95       	dec	r24
   16744:	e9 f7       	brne	.-6      	; 0x16740 <amigo_init+0x38>
   16746:	2c 5f       	subi	r18, 0xFC	; 252
   16748:	3f 4f       	sbci	r19, 0xFF	; 255
   1674a:	d9 01       	movw	r26, r18
   1674c:	8d 2f       	mov	r24, r29
   1674e:	1d 92       	st	X+, r1
   16750:	8a 95       	dec	r24
   16752:	e9 f7       	brne	.-6      	; 0x1674e <amigo_init+0x46>
   16754:	11 82       	std	Z+1, r1	; 0x01
   16756:	15 82       	std	Z+5, r1	; 0x05
   16758:	14 82       	std	Z+4, r1	; 0x04
   1675a:	13 82       	std	Z+3, r1	; 0x03
   1675c:	f6 82       	std	Z+6, r15	; 0x06
   1675e:	10 86       	std	Z+8, r1	; 0x08
   16760:	17 82       	std	Z+7, r1	; 0x07
   16762:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16766:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1676a:	81 81       	ldd	r24, Z+1	; 0x01
   1676c:	90 e0       	ldi	r25, 0x00	; 0
   1676e:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
   16772:	0b 50       	subi	r16, 0x0B	; 11
   16774:	11 09       	sbc	r17, r1
   16776:	c1 50       	subi	r28, 0x01	; 1
   16778:	90 f6       	brcc	.-92     	; 0x1671e <amigo_init+0x16>
   1677a:	cd b7       	in	r28, 0x3d	; 61
   1677c:	de b7       	in	r29, 0x3e	; 62
   1677e:	e5 e0       	ldi	r30, 0x05	; 5
   16780:	0c 94 15 e7 	jmp	0x1ce2a	; 0x1ce2a <__epilogue_restores__+0x1a>

00016784 <amigo_request_logical_address>:
   16784:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16788:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1678c:	15 86       	std	Z+13, r1	; 0x0d
   1678e:	83 81       	ldd	r24, Z+3	; 0x03
   16790:	86 87       	std	Z+14, r24	; 0x0e
   16792:	84 81       	ldd	r24, Z+4	; 0x04
   16794:	87 87       	std	Z+15, r24	; 0x0f
   16796:	85 81       	ldd	r24, Z+5	; 0x05
   16798:	80 8b       	std	Z+16, r24	; 0x10
   1679a:	80 e0       	ldi	r24, 0x00	; 0
   1679c:	90 e0       	ldi	r25, 0x00	; 0
   1679e:	08 95       	ret

000167a0 <amigo_request_status>:
   167a0:	00 d0       	rcall	.+0      	; 0x167a2 <amigo_request_status+0x2>
   167a2:	1f 92       	push	r1
   167a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167a8:	85 ff       	sbrs	r24, 5
   167aa:	0a c0       	rjmp	.+20     	; 0x167c0 <amigo_request_status+0x20>
   167ac:	8c ea       	ldi	r24, 0xAC	; 172
   167ae:	91 e3       	ldi	r25, 0x31	; 49
   167b0:	a0 e0       	ldi	r26, 0x00	; 0
   167b2:	ed b7       	in	r30, 0x3d	; 61
   167b4:	fe b7       	in	r31, 0x3e	; 62
   167b6:	81 83       	std	Z+1, r24	; 0x01
   167b8:	92 83       	std	Z+2, r25	; 0x02
   167ba:	a3 83       	std	Z+3, r26	; 0x03
   167bc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   167c0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   167c4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   167c8:	11 86       	std	Z+9, r1	; 0x09
   167ca:	81 81       	ldd	r24, Z+1	; 0x01
   167cc:	82 87       	std	Z+10, r24	; 0x0a
   167ce:	8d e0       	ldi	r24, 0x0D	; 13
   167d0:	83 87       	std	Z+11, r24	; 0x0b
   167d2:	14 86       	std	Z+12, r1	; 0x0c
   167d4:	0e 94 fb 6f 	call	0xdff6	; 0xdff6 <mmc_wp_status>
   167d8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   167dc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   167e0:	89 2b       	or	r24, r25
   167e2:	19 f0       	breq	.+6      	; 0x167ea <amigo_request_status+0x4a>
   167e4:	84 85       	ldd	r24, Z+12	; 0x0c
   167e6:	80 66       	ori	r24, 0x60	; 96
   167e8:	84 87       	std	Z+12, r24	; 0x0c
   167ea:	86 81       	ldd	r24, Z+6	; 0x06
   167ec:	82 30       	cpi	r24, 0x02	; 2
   167ee:	31 f4       	brne	.+12     	; 0x167fc <amigo_request_status+0x5c>
   167f0:	83 e1       	ldi	r24, 0x13	; 19
   167f2:	81 87       	std	Z+9, r24	; 0x09
   167f4:	84 85       	ldd	r24, Z+12	; 0x0c
   167f6:	88 60       	ori	r24, 0x08	; 8
   167f8:	84 87       	std	Z+12, r24	; 0x0c
   167fa:	21 c0       	rjmp	.+66     	; 0x1683e <amigo_request_status+0x9e>
   167fc:	27 81       	ldd	r18, Z+7	; 0x07
   167fe:	30 85       	ldd	r19, Z+8	; 0x08
   16800:	21 15       	cp	r18, r1
   16802:	31 05       	cpc	r19, r1
   16804:	11 f4       	brne	.+4      	; 0x1680a <amigo_request_status+0x6a>
   16806:	81 30       	cpi	r24, 0x01	; 1
   16808:	d1 f4       	brne	.+52     	; 0x1683e <amigo_request_status+0x9e>
   1680a:	26 fd       	sbrc	r18, 6
   1680c:	0c c0       	rjmp	.+24     	; 0x16826 <amigo_request_status+0x86>
   1680e:	25 ff       	sbrs	r18, 5
   16810:	03 c0       	rjmp	.+6      	; 0x16818 <amigo_request_status+0x78>
   16812:	8a e0       	ldi	r24, 0x0A	; 10
   16814:	81 87       	std	Z+9, r24	; 0x09
   16816:	0d c0       	rjmp	.+26     	; 0x16832 <amigo_request_status+0x92>
   16818:	84 85       	ldd	r24, Z+12	; 0x0c
   1681a:	24 ff       	sbrs	r18, 4
   1681c:	02 c0       	rjmp	.+4      	; 0x16822 <amigo_request_status+0x82>
   1681e:	83 60       	ori	r24, 0x03	; 3
   16820:	07 c0       	rjmp	.+14     	; 0x16830 <amigo_request_status+0x90>
   16822:	21 ff       	sbrs	r18, 1
   16824:	02 c0       	rjmp	.+4      	; 0x1682a <amigo_request_status+0x8a>
   16826:	83 e1       	ldi	r24, 0x13	; 19
   16828:	f5 cf       	rjmp	.-22     	; 0x16814 <amigo_request_status+0x74>
   1682a:	22 ff       	sbrs	r18, 2
   1682c:	02 c0       	rjmp	.+4      	; 0x16832 <amigo_request_status+0x92>
   1682e:	84 60       	ori	r24, 0x04	; 4
   16830:	84 87       	std	Z+12, r24	; 0x0c
   16832:	84 85       	ldd	r24, Z+12	; 0x0c
   16834:	80 61       	ori	r24, 0x10	; 16
   16836:	84 87       	std	Z+12, r24	; 0x0c
   16838:	83 85       	ldd	r24, Z+11	; 0x0b
   1683a:	80 68       	ori	r24, 0x80	; 128
   1683c:	83 87       	std	Z+11, r24	; 0x0b
   1683e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16842:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16846:	81 81       	ldd	r24, Z+1	; 0x01
   16848:	90 e0       	ldi	r25, 0x00	; 0
   1684a:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   1684e:	80 e0       	ldi	r24, 0x00	; 0
   16850:	90 e0       	ldi	r25, 0x00	; 0
   16852:	0f 90       	pop	r0
   16854:	0f 90       	pop	r0
   16856:	0f 90       	pop	r0
   16858:	08 95       	ret

0001685a <amigo_send_logical_address>:
   1685a:	a5 e0       	ldi	r26, 0x05	; 5
   1685c:	b0 e0       	ldi	r27, 0x00	; 0
   1685e:	e3 e3       	ldi	r30, 0x33	; 51
   16860:	f4 eb       	ldi	r31, 0xB4	; 180
   16862:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   16866:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1686a:	85 ff       	sbrs	r24, 5
   1686c:	0a c0       	rjmp	.+20     	; 0x16882 <amigo_send_logical_address+0x28>
   1686e:	8e e8       	ldi	r24, 0x8E	; 142
   16870:	91 e3       	ldi	r25, 0x31	; 49
   16872:	a0 e0       	ldi	r26, 0x00	; 0
   16874:	ed b7       	in	r30, 0x3d	; 61
   16876:	fe b7       	in	r31, 0x3e	; 62
   16878:	81 83       	std	Z+1, r24	; 0x01
   1687a:	92 83       	std	Z+2, r25	; 0x02
   1687c:	a3 83       	std	Z+3, r26	; 0x03
   1687e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16882:	80 e0       	ldi	r24, 0x00	; 0
   16884:	91 e0       	ldi	r25, 0x01	; 1
   16886:	9d 83       	std	Y+5, r25	; 0x05
   16888:	8c 83       	std	Y+4, r24	; 0x04
   1688a:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   1688e:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16892:	ae 01       	movw	r20, r28
   16894:	4c 5f       	subi	r20, 0xFC	; 252
   16896:	5f 4f       	sbci	r21, 0xFF	; 255
   16898:	64 e0       	ldi	r22, 0x04	; 4
   1689a:	70 e0       	ldi	r23, 0x00	; 0
   1689c:	0d 96       	adiw	r24, 0x0d	; 13
   1689e:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   168a2:	2c 81       	ldd	r18, Y+4	; 0x04
   168a4:	3d 81       	ldd	r19, Y+5	; 0x05
   168a6:	22 27       	eor	r18, r18
   168a8:	30 7d       	andi	r19, 0xD0	; 208
   168aa:	23 2b       	or	r18, r19
   168ac:	11 f4       	brne	.+4      	; 0x168b2 <amigo_send_logical_address+0x58>
   168ae:	04 97       	sbiw	r24, 0x04	; 4
   168b0:	c9 f0       	breq	.+50     	; 0x168e4 <amigo_send_logical_address+0x8a>
   168b2:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   168b6:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   168ba:	87 81       	ldd	r24, Z+7	; 0x07
   168bc:	90 85       	ldd	r25, Z+8	; 0x08
   168be:	80 62       	ori	r24, 0x20	; 32
   168c0:	90 87       	std	Z+8, r25	; 0x08
   168c2:	87 83       	std	Z+7, r24	; 0x07
   168c4:	81 e0       	ldi	r24, 0x01	; 1
   168c6:	86 83       	std	Z+6, r24	; 0x06
   168c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168cc:	80 ff       	sbrs	r24, 0
   168ce:	0a c0       	rjmp	.+20     	; 0x168e4 <amigo_send_logical_address+0x8a>
   168d0:	84 e7       	ldi	r24, 0x74	; 116
   168d2:	91 e3       	ldi	r25, 0x31	; 49
   168d4:	a0 e0       	ldi	r26, 0x00	; 0
   168d6:	ed b7       	in	r30, 0x3d	; 61
   168d8:	fe b7       	in	r31, 0x3e	; 62
   168da:	81 83       	std	Z+1, r24	; 0x01
   168dc:	92 83       	std	Z+2, r25	; 0x02
   168de:	a3 83       	std	Z+3, r26	; 0x03
   168e0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   168e4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   168e8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   168ec:	81 81       	ldd	r24, Z+1	; 0x01
   168ee:	90 e0       	ldi	r25, 0x00	; 0
   168f0:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   168f4:	8c 81       	ldd	r24, Y+4	; 0x04
   168f6:	9d 81       	ldd	r25, Y+5	; 0x05
   168f8:	88 27       	eor	r24, r24
   168fa:	90 7d       	andi	r25, 0xD0	; 208
   168fc:	25 96       	adiw	r28, 0x05	; 5
   168fe:	e2 e0       	ldi	r30, 0x02	; 2
   16900:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00016904 <amigo_send_status>:
   16904:	a5 e0       	ldi	r26, 0x05	; 5
   16906:	b0 e0       	ldi	r27, 0x00	; 0
   16908:	e8 e8       	ldi	r30, 0x88	; 136
   1690a:	f4 eb       	ldi	r31, 0xB4	; 180
   1690c:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   16910:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16914:	85 ff       	sbrs	r24, 5
   16916:	0a c0       	rjmp	.+20     	; 0x1692c <amigo_send_status+0x28>
   16918:	8f e5       	ldi	r24, 0x5F	; 95
   1691a:	91 e3       	ldi	r25, 0x31	; 49
   1691c:	a0 e0       	ldi	r26, 0x00	; 0
   1691e:	ed b7       	in	r30, 0x3d	; 61
   16920:	fe b7       	in	r31, 0x3e	; 62
   16922:	81 83       	std	Z+1, r24	; 0x01
   16924:	92 83       	std	Z+2, r25	; 0x02
   16926:	a3 83       	std	Z+3, r26	; 0x03
   16928:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1692c:	80 e0       	ldi	r24, 0x00	; 0
   1692e:	91 e0       	ldi	r25, 0x01	; 1
   16930:	9d 83       	std	Y+5, r25	; 0x05
   16932:	8c 83       	std	Y+4, r24	; 0x04
   16934:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16938:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   1693c:	ae 01       	movw	r20, r28
   1693e:	4c 5f       	subi	r20, 0xFC	; 252
   16940:	5f 4f       	sbci	r21, 0xFF	; 255
   16942:	64 e0       	ldi	r22, 0x04	; 4
   16944:	70 e0       	ldi	r23, 0x00	; 0
   16946:	09 96       	adiw	r24, 0x09	; 9
   16948:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   1694c:	2c 81       	ldd	r18, Y+4	; 0x04
   1694e:	3d 81       	ldd	r19, Y+5	; 0x05
   16950:	22 27       	eor	r18, r18
   16952:	30 7d       	andi	r19, 0xD0	; 208
   16954:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16958:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1695c:	23 2b       	or	r18, r19
   1695e:	11 f4       	brne	.+4      	; 0x16964 <amigo_send_status+0x60>
   16960:	04 97       	sbiw	r24, 0x04	; 4
   16962:	b1 f0       	breq	.+44     	; 0x16990 <amigo_send_status+0x8c>
   16964:	87 81       	ldd	r24, Z+7	; 0x07
   16966:	90 85       	ldd	r25, Z+8	; 0x08
   16968:	80 62       	ori	r24, 0x20	; 32
   1696a:	90 87       	std	Z+8, r25	; 0x08
   1696c:	87 83       	std	Z+7, r24	; 0x07
   1696e:	81 e0       	ldi	r24, 0x01	; 1
   16970:	86 83       	std	Z+6, r24	; 0x06
   16972:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16976:	80 ff       	sbrs	r24, 0
   16978:	0e c0       	rjmp	.+28     	; 0x16996 <amigo_send_status+0x92>
   1697a:	85 e4       	ldi	r24, 0x45	; 69
   1697c:	91 e3       	ldi	r25, 0x31	; 49
   1697e:	a0 e0       	ldi	r26, 0x00	; 0
   16980:	ed b7       	in	r30, 0x3d	; 61
   16982:	fe b7       	in	r31, 0x3e	; 62
   16984:	81 83       	std	Z+1, r24	; 0x01
   16986:	92 83       	std	Z+2, r25	; 0x02
   16988:	a3 83       	std	Z+3, r26	; 0x03
   1698a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1698e:	03 c0       	rjmp	.+6      	; 0x16996 <amigo_send_status+0x92>
   16990:	10 86       	std	Z+8, r1	; 0x08
   16992:	17 82       	std	Z+7, r1	; 0x07
   16994:	16 82       	std	Z+6, r1	; 0x06
   16996:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1699a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1699e:	81 81       	ldd	r24, Z+1	; 0x01
   169a0:	90 e0       	ldi	r25, 0x00	; 0
   169a2:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   169a6:	8c 81       	ldd	r24, Y+4	; 0x04
   169a8:	9d 81       	ldd	r25, Y+5	; 0x05
   169aa:	88 27       	eor	r24, r24
   169ac:	90 7d       	andi	r25, 0xD0	; 208
   169ae:	25 96       	adiw	r28, 0x05	; 5
   169b0:	e2 e0       	ldi	r30, 0x02	; 2
   169b2:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

000169b6 <amigo_increment>:
   169b6:	a1 e1       	ldi	r26, 0x11	; 17
   169b8:	b0 e0       	ldi	r27, 0x00	; 0
   169ba:	e1 ee       	ldi	r30, 0xE1	; 225
   169bc:	f4 eb       	ldi	r31, 0xB4	; 180
   169be:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   169c2:	bc 01       	movw	r22, r24
   169c4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   169c8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   169cc:	91 e1       	ldi	r25, 0x11	; 17
   169ce:	de 01       	movw	r26, r28
   169d0:	11 96       	adiw	r26, 0x01	; 1
   169d2:	01 90       	ld	r0, Z+
   169d4:	0d 92       	st	X+, r0
   169d6:	9a 95       	dec	r25
   169d8:	e1 f7       	brne	.-8      	; 0x169d2 <amigo_increment+0x1c>
   169da:	9e 81       	ldd	r25, Y+6	; 0x06
   169dc:	9f 5f       	subi	r25, 0xFF	; 255
   169de:	9e 83       	std	Y+6, r25	; 0x06
   169e0:	ce 01       	movw	r24, r28
   169e2:	01 96       	adiw	r24, 0x01	; 1
   169e4:	c7 dd       	rcall	.-1138   	; 0x16574 <amigo_overflow_check>
   169e6:	00 97       	sbiw	r24, 0x00	; 0
   169e8:	59 f4       	brne	.+22     	; 0x16a00 <amigo_increment+0x4a>
   169ea:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   169ee:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   169f2:	21 e1       	ldi	r18, 0x11	; 17
   169f4:	fe 01       	movw	r30, r28
   169f6:	31 96       	adiw	r30, 0x01	; 1
   169f8:	01 90       	ld	r0, Z+
   169fa:	0d 92       	st	X+, r0
   169fc:	2a 95       	dec	r18
   169fe:	e1 f7       	brne	.-8      	; 0x169f8 <amigo_increment+0x42>
   16a00:	61 96       	adiw	r28, 0x11	; 17
   16a02:	e2 e0       	ldi	r30, 0x02	; 2
   16a04:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00016a08 <amigo_seek>:
   16a08:	0f 93       	push	r16
   16a0a:	1f 93       	push	r17
   16a0c:	cf 93       	push	r28
   16a0e:	df 93       	push	r29
   16a10:	ec 01       	movw	r28, r24
   16a12:	66 e8       	ldi	r22, 0x86	; 134
   16a14:	75 e1       	ldi	r23, 0x15	; 21
   16a16:	ae dd       	rcall	.-1188   	; 0x16574 <amigo_overflow_check>
   16a18:	8c 01       	movw	r16, r24
   16a1a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16a1e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a22:	89 2b       	or	r24, r25
   16a24:	41 f0       	breq	.+16     	; 0x16a36 <amigo_seek+0x2e>
   16a26:	81 e0       	ldi	r24, 0x01	; 1
   16a28:	86 83       	std	Z+6, r24	; 0x06
   16a2a:	87 81       	ldd	r24, Z+7	; 0x07
   16a2c:	90 85       	ldd	r25, Z+8	; 0x08
   16a2e:	84 60       	ori	r24, 0x04	; 4
   16a30:	90 87       	std	Z+8, r25	; 0x08
   16a32:	87 83       	std	Z+7, r24	; 0x07
   16a34:	06 c0       	rjmp	.+12     	; 0x16a42 <amigo_seek+0x3a>
   16a36:	8d 81       	ldd	r24, Y+5	; 0x05
   16a38:	85 83       	std	Z+5, r24	; 0x05
   16a3a:	8c 81       	ldd	r24, Y+4	; 0x04
   16a3c:	84 83       	std	Z+4, r24	; 0x04
   16a3e:	8b 81       	ldd	r24, Y+3	; 0x03
   16a40:	83 83       	std	Z+3, r24	; 0x03
   16a42:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16a46:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16a4a:	81 81       	ldd	r24, Z+1	; 0x01
   16a4c:	90 e0       	ldi	r25, 0x00	; 0
   16a4e:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   16a52:	c8 01       	movw	r24, r16
   16a54:	df 91       	pop	r29
   16a56:	cf 91       	pop	r28
   16a58:	1f 91       	pop	r17
   16a5a:	0f 91       	pop	r16
   16a5c:	08 95       	ret

00016a5e <amigo_verify>:
   16a5e:	8f 92       	push	r8
   16a60:	9f 92       	push	r9
   16a62:	af 92       	push	r10
   16a64:	bf 92       	push	r11
   16a66:	ef 92       	push	r14
   16a68:	ff 92       	push	r15
   16a6a:	0f 93       	push	r16
   16a6c:	1f 93       	push	r17
   16a6e:	cf 93       	push	r28
   16a70:	df 93       	push	r29
   16a72:	ad b7       	in	r26, 0x3d	; 61
   16a74:	be b7       	in	r27, 0x3e	; 62
   16a76:	19 97       	sbiw	r26, 0x09	; 9
   16a78:	0f b6       	in	r0, 0x3f	; 63
   16a7a:	f8 94       	cli
   16a7c:	be bf       	out	0x3e, r27	; 62
   16a7e:	0f be       	out	0x3f, r0	; 63
   16a80:	ad bf       	out	0x3d, r26	; 61
   16a82:	7c 01       	movw	r14, r24
   16a84:	6b e8       	ldi	r22, 0x8B	; 139
   16a86:	75 e1       	ldi	r23, 0x15	; 21
   16a88:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16a8c:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a90:	c7 dd       	rcall	.-1138   	; 0x16620 <amigo_chs_to_logical>
   16a92:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16a96:	25 ff       	sbrs	r18, 5
   16a98:	10 c0       	rjmp	.+32     	; 0x16aba <amigo_verify+0x5c>
   16a9a:	ed b7       	in	r30, 0x3d	; 61
   16a9c:	fe b7       	in	r31, 0x3e	; 62
   16a9e:	e0 86       	std	Z+8, r14	; 0x08
   16aa0:	f1 86       	std	Z+9, r15	; 0x09
   16aa2:	64 83       	std	Z+4, r22	; 0x04
   16aa4:	75 83       	std	Z+5, r23	; 0x05
   16aa6:	86 83       	std	Z+6, r24	; 0x06
   16aa8:	97 83       	std	Z+7, r25	; 0x07
   16aaa:	84 e0       	ldi	r24, 0x04	; 4
   16aac:	91 e3       	ldi	r25, 0x31	; 49
   16aae:	a0 e0       	ldi	r26, 0x00	; 0
   16ab0:	81 83       	std	Z+1, r24	; 0x01
   16ab2:	92 83       	std	Z+2, r25	; 0x02
   16ab4:	a3 83       	std	Z+3, r26	; 0x03
   16ab6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16aba:	e7 01       	movw	r28, r14
   16abc:	20 97       	sbiw	r28, 0x00	; 0
   16abe:	09 f4       	brne	.+2      	; 0x16ac2 <amigo_verify+0x64>
   16ac0:	4b c0       	rjmp	.+150    	; 0x16b58 <amigo_verify+0xfa>
   16ac2:	68 e9       	ldi	r22, 0x98	; 152
   16ac4:	75 e1       	ldi	r23, 0x15	; 21
   16ac6:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16aca:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ace:	a8 dd       	rcall	.-1200   	; 0x16620 <amigo_chs_to_logical>
   16ad0:	4b 01       	movw	r8, r22
   16ad2:	5c 01       	movw	r10, r24
   16ad4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ad8:	86 fd       	sbrc	r24, 6
   16ada:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   16ade:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ae2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16ae6:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16aea:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16aee:	87 e0       	ldi	r24, 0x07	; 7
   16af0:	e8 0e       	add	r14, r24
   16af2:	f1 1c       	adc	r15, r1
   16af4:	00 85       	ldd	r16, Z+8	; 0x08
   16af6:	11 85       	ldd	r17, Z+9	; 0x09
   16af8:	2a ee       	ldi	r18, 0xEA	; 234
   16afa:	3c e1       	ldi	r19, 0x1C	; 28
   16afc:	b5 01       	movw	r22, r10
   16afe:	a4 01       	movw	r20, r8
   16b00:	82 81       	ldd	r24, Z+2	; 0x02
   16b02:	93 81       	ldd	r25, Z+3	; 0x03
   16b04:	0e 94 c4 84 	call	0x10988	; 0x10988 <dbf_open_read>
   16b08:	7c 01       	movw	r14, r24
   16b0a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b0e:	86 ff       	sbrs	r24, 6
   16b10:	04 c0       	rjmp	.+8      	; 0x16b1a <amigo_verify+0xbc>
   16b12:	8f e9       	ldi	r24, 0x9F	; 159
   16b14:	90 e1       	ldi	r25, 0x10	; 16
   16b16:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   16b1a:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <AMIGOs>
   16b1e:	30 91 63 19 	lds	r19, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b22:	f9 01       	movw	r30, r18
   16b24:	87 81       	ldd	r24, Z+7	; 0x07
   16b26:	90 85       	ldd	r25, Z+8	; 0x08
   16b28:	89 2b       	or	r24, r25
   16b2a:	21 f0       	breq	.+8      	; 0x16b34 <amigo_verify+0xd6>
   16b2c:	81 e0       	ldi	r24, 0x01	; 1
   16b2e:	f9 01       	movw	r30, r18
   16b30:	86 83       	std	Z+6, r24	; 0x06
   16b32:	15 c0       	rjmp	.+42     	; 0x16b5e <amigo_verify+0x100>
   16b34:	80 91 64 19 	lds	r24, 0x1964	; 0x801964 <AMIGOp>
   16b38:	90 91 65 19 	lds	r25, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b3c:	fc 01       	movw	r30, r24
   16b3e:	80 85       	ldd	r24, Z+8	; 0x08
   16b40:	91 85       	ldd	r25, Z+9	; 0x09
   16b42:	e8 16       	cp	r14, r24
   16b44:	f9 06       	cpc	r15, r25
   16b46:	91 f7       	brne	.-28     	; 0x16b2c <amigo_verify+0xce>
   16b48:	80 ea       	ldi	r24, 0xA0	; 160
   16b4a:	95 e1       	ldi	r25, 0x15	; 21
   16b4c:	34 df       	rcall	.-408    	; 0x169b6 <amigo_increment>
   16b4e:	21 97       	sbiw	r28, 0x01	; 1
   16b50:	89 2b       	or	r24, r25
   16b52:	09 f4       	brne	.+2      	; 0x16b56 <amigo_verify+0xf8>
   16b54:	b3 cf       	rjmp	.-154    	; 0x16abc <amigo_verify+0x5e>
   16b56:	03 c0       	rjmp	.+6      	; 0x16b5e <amigo_verify+0x100>
   16b58:	c0 e0       	ldi	r28, 0x00	; 0
   16b5a:	d0 e0       	ldi	r29, 0x00	; 0
   16b5c:	02 c0       	rjmp	.+4      	; 0x16b62 <amigo_verify+0x104>
   16b5e:	c1 e0       	ldi	r28, 0x01	; 1
   16b60:	d0 e0       	ldi	r29, 0x00	; 0
   16b62:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16b66:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b6a:	81 81       	ldd	r24, Z+1	; 0x01
   16b6c:	90 e0       	ldi	r25, 0x00	; 0
   16b6e:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   16b72:	ce 01       	movw	r24, r28
   16b74:	ad b7       	in	r26, 0x3d	; 61
   16b76:	be b7       	in	r27, 0x3e	; 62
   16b78:	19 96       	adiw	r26, 0x09	; 9
   16b7a:	0f b6       	in	r0, 0x3f	; 63
   16b7c:	f8 94       	cli
   16b7e:	be bf       	out	0x3e, r27	; 62
   16b80:	0f be       	out	0x3f, r0	; 63
   16b82:	ad bf       	out	0x3d, r26	; 61
   16b84:	df 91       	pop	r29
   16b86:	cf 91       	pop	r28
   16b88:	1f 91       	pop	r17
   16b8a:	0f 91       	pop	r16
   16b8c:	ff 90       	pop	r15
   16b8e:	ef 90       	pop	r14
   16b90:	bf 90       	pop	r11
   16b92:	af 90       	pop	r10
   16b94:	9f 90       	pop	r9
   16b96:	8f 90       	pop	r8
   16b98:	08 95       	ret

00016b9a <amigo_format>:
   16b9a:	ef 92       	push	r14
   16b9c:	ff 92       	push	r15
   16b9e:	0f 93       	push	r16
   16ba0:	1f 93       	push	r17
   16ba2:	cf 93       	push	r28
   16ba4:	df 93       	push	r29
   16ba6:	00 d0       	rcall	.+0      	; 0x16ba8 <amigo_format+0xe>
   16ba8:	1f 92       	push	r1
   16baa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16bae:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16bb2:	15 82       	std	Z+5, r1	; 0x05
   16bb4:	14 82       	std	Z+4, r1	; 0x04
   16bb6:	13 82       	std	Z+3, r1	; 0x03
   16bb8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16bbc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16bc0:	40 85       	ldd	r20, Z+8	; 0x08
   16bc2:	51 85       	ldd	r21, Z+9	; 0x09
   16bc4:	68 2f       	mov	r22, r24
   16bc6:	70 e0       	ldi	r23, 0x00	; 0
   16bc8:	8a ee       	ldi	r24, 0xEA	; 234
   16bca:	9c e1       	ldi	r25, 0x1C	; 28
   16bcc:	0e 94 e4 ea 	call	0x1d5c8	; 0x1d5c8 <memset>
   16bd0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bd4:	85 ff       	sbrs	r24, 5
   16bd6:	0a c0       	rjmp	.+20     	; 0x16bec <amigo_format+0x52>
   16bd8:	89 ec       	ldi	r24, 0xC9	; 201
   16bda:	90 e3       	ldi	r25, 0x30	; 48
   16bdc:	a0 e0       	ldi	r26, 0x00	; 0
   16bde:	ed b7       	in	r30, 0x3d	; 61
   16be0:	fe b7       	in	r31, 0x3e	; 62
   16be2:	81 83       	std	Z+1, r24	; 0x01
   16be4:	92 83       	std	Z+2, r25	; 0x02
   16be6:	a3 83       	std	Z+3, r26	; 0x03
   16be8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16bec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bf0:	86 fd       	sbrc	r24, 6
   16bf2:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   16bf6:	67 ea       	ldi	r22, 0xA7	; 167
   16bf8:	75 e1       	ldi	r23, 0x15	; 21
   16bfa:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16bfe:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c02:	0e dd       	rcall	.-1508   	; 0x16620 <amigo_chs_to_logical>
   16c04:	ab 01       	movw	r20, r22
   16c06:	bc 01       	movw	r22, r24
   16c08:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16c0c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c10:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16c14:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c18:	87 e0       	ldi	r24, 0x07	; 7
   16c1a:	e8 0e       	add	r14, r24
   16c1c:	f1 1c       	adc	r15, r1
   16c1e:	00 85       	ldd	r16, Z+8	; 0x08
   16c20:	11 85       	ldd	r17, Z+9	; 0x09
   16c22:	2a ee       	ldi	r18, 0xEA	; 234
   16c24:	3c e1       	ldi	r19, 0x1C	; 28
   16c26:	82 81       	ldd	r24, Z+2	; 0x02
   16c28:	93 81       	ldd	r25, Z+3	; 0x03
   16c2a:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <dbf_open_write>
   16c2e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c32:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c36:	27 81       	ldd	r18, Z+7	; 0x07
   16c38:	30 85       	ldd	r19, Z+8	; 0x08
   16c3a:	21 15       	cp	r18, r1
   16c3c:	31 05       	cpc	r19, r1
   16c3e:	49 f4       	brne	.+18     	; 0x16c52 <amigo_format+0xb8>
   16c40:	c0 91 64 19 	lds	r28, 0x1964	; 0x801964 <AMIGOp>
   16c44:	d0 91 65 19 	lds	r29, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c48:	48 85       	ldd	r20, Y+8	; 0x08
   16c4a:	59 85       	ldd	r21, Y+9	; 0x09
   16c4c:	84 17       	cp	r24, r20
   16c4e:	95 07       	cpc	r25, r21
   16c50:	41 f0       	breq	.+16     	; 0x16c62 <amigo_format+0xc8>
   16c52:	22 60       	ori	r18, 0x02	; 2
   16c54:	30 87       	std	Z+8, r19	; 0x08
   16c56:	27 83       	std	Z+7, r18	; 0x07
   16c58:	81 e0       	ldi	r24, 0x01	; 1
   16c5a:	86 83       	std	Z+6, r24	; 0x06
   16c5c:	c1 e0       	ldi	r28, 0x01	; 1
   16c5e:	d0 e0       	ldi	r29, 0x00	; 0
   16c60:	0f c0       	rjmp	.+30     	; 0x16c80 <amigo_format+0xe6>
   16c62:	80 e0       	ldi	r24, 0x00	; 0
   16c64:	90 e0       	ldi	r25, 0x00	; 0
   16c66:	a7 de       	rcall	.-690    	; 0x169b6 <amigo_increment>
   16c68:	89 2b       	or	r24, r25
   16c6a:	29 f2       	breq	.-118    	; 0x16bf6 <amigo_format+0x5c>
   16c6c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c70:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c74:	15 82       	std	Z+5, r1	; 0x05
   16c76:	14 82       	std	Z+4, r1	; 0x04
   16c78:	13 82       	std	Z+3, r1	; 0x03
   16c7a:	16 82       	std	Z+6, r1	; 0x06
   16c7c:	c0 e0       	ldi	r28, 0x00	; 0
   16c7e:	d0 e0       	ldi	r29, 0x00	; 0
   16c80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c84:	86 ff       	sbrs	r24, 6
   16c86:	04 c0       	rjmp	.+8      	; 0x16c90 <amigo_format+0xf6>
   16c88:	87 ea       	ldi	r24, 0xA7	; 167
   16c8a:	95 e1       	ldi	r25, 0x15	; 21
   16c8c:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   16c90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c94:	85 ff       	sbrs	r24, 5
   16c96:	0a c0       	rjmp	.+20     	; 0x16cac <amigo_format+0x112>
   16c98:	84 eb       	ldi	r24, 0xB4	; 180
   16c9a:	90 e3       	ldi	r25, 0x30	; 48
   16c9c:	a0 e0       	ldi	r26, 0x00	; 0
   16c9e:	ed b7       	in	r30, 0x3d	; 61
   16ca0:	fe b7       	in	r31, 0x3e	; 62
   16ca2:	81 83       	std	Z+1, r24	; 0x01
   16ca4:	92 83       	std	Z+2, r25	; 0x02
   16ca6:	a3 83       	std	Z+3, r26	; 0x03
   16ca8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16cac:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16cb0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16cb4:	81 81       	ldd	r24, Z+1	; 0x01
   16cb6:	90 e0       	ldi	r25, 0x00	; 0
   16cb8:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   16cbc:	ce 01       	movw	r24, r28
   16cbe:	cd b7       	in	r28, 0x3d	; 61
   16cc0:	de b7       	in	r29, 0x3e	; 62
   16cc2:	23 96       	adiw	r28, 0x03	; 3
   16cc4:	e6 e0       	ldi	r30, 0x06	; 6
   16cc6:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00016cca <amigo_buffered_read_command>:
   16cca:	8f 92       	push	r8
   16ccc:	9f 92       	push	r9
   16cce:	af 92       	push	r10
   16cd0:	bf 92       	push	r11
   16cd2:	ef 92       	push	r14
   16cd4:	ff 92       	push	r15
   16cd6:	0f 93       	push	r16
   16cd8:	1f 93       	push	r17
   16cda:	cf 93       	push	r28
   16cdc:	df 93       	push	r29
   16cde:	00 d0       	rcall	.+0      	; 0x16ce0 <amigo_buffered_read_command+0x16>
   16ce0:	00 d0       	rcall	.+0      	; 0x16ce2 <amigo_buffered_read_command+0x18>
   16ce2:	1f 92       	push	r1
   16ce4:	6e ea       	ldi	r22, 0xAE	; 174
   16ce6:	75 e1       	ldi	r23, 0x15	; 21
   16ce8:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16cec:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16cf0:	97 dc       	rcall	.-1746   	; 0x16620 <amigo_chs_to_logical>
   16cf2:	4b 01       	movw	r8, r22
   16cf4:	5c 01       	movw	r10, r24
   16cf6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cfa:	85 ff       	sbrs	r24, 5
   16cfc:	12 c0       	rjmp	.+36     	; 0x16d22 <amigo_buffered_read_command+0x58>
   16cfe:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16d02:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d06:	80 81       	ld	r24, Z
   16d08:	90 e0       	ldi	r25, 0x00	; 0
   16d0a:	ed b7       	in	r30, 0x3d	; 61
   16d0c:	fe b7       	in	r31, 0x3e	; 62
   16d0e:	95 83       	std	Z+5, r25	; 0x05
   16d10:	84 83       	std	Z+4, r24	; 0x04
   16d12:	82 ea       	ldi	r24, 0xA2	; 162
   16d14:	90 e3       	ldi	r25, 0x30	; 48
   16d16:	a0 e0       	ldi	r26, 0x00	; 0
   16d18:	81 83       	std	Z+1, r24	; 0x01
   16d1a:	92 83       	std	Z+2, r25	; 0x02
   16d1c:	a3 83       	std	Z+3, r26	; 0x03
   16d1e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16d22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d26:	86 fd       	sbrc	r24, 6
   16d28:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   16d2c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d30:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d34:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16d38:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d3c:	87 e0       	ldi	r24, 0x07	; 7
   16d3e:	e8 0e       	add	r14, r24
   16d40:	f1 1c       	adc	r15, r1
   16d42:	00 85       	ldd	r16, Z+8	; 0x08
   16d44:	11 85       	ldd	r17, Z+9	; 0x09
   16d46:	2a ee       	ldi	r18, 0xEA	; 234
   16d48:	3c e1       	ldi	r19, 0x1C	; 28
   16d4a:	b5 01       	movw	r22, r10
   16d4c:	a4 01       	movw	r20, r8
   16d4e:	82 81       	ldd	r24, Z+2	; 0x02
   16d50:	93 81       	ldd	r25, Z+3	; 0x03
   16d52:	0e 94 c4 84 	call	0x10988	; 0x10988 <dbf_open_read>
   16d56:	7c 01       	movw	r14, r24
   16d58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d5c:	86 ff       	sbrs	r24, 6
   16d5e:	04 c0       	rjmp	.+8      	; 0x16d68 <amigo_buffered_read_command+0x9e>
   16d60:	8f e9       	ldi	r24, 0x9F	; 159
   16d62:	90 e1       	ldi	r25, 0x10	; 16
   16d64:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   16d68:	c0 91 62 19 	lds	r28, 0x1962	; 0x801962 <AMIGOs>
   16d6c:	d0 91 63 19 	lds	r29, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d70:	8f 81       	ldd	r24, Y+7	; 0x07
   16d72:	98 85       	ldd	r25, Y+8	; 0x08
   16d74:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d78:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d7c:	89 2b       	or	r24, r25
   16d7e:	29 f4       	brne	.+10     	; 0x16d8a <amigo_buffered_read_command+0xc0>
   16d80:	80 85       	ldd	r24, Z+8	; 0x08
   16d82:	91 85       	ldd	r25, Z+9	; 0x09
   16d84:	e8 16       	cp	r14, r24
   16d86:	f9 06       	cpc	r15, r25
   16d88:	19 f0       	breq	.+6      	; 0x16d90 <amigo_buffered_read_command+0xc6>
   16d8a:	81 e0       	ldi	r24, 0x01	; 1
   16d8c:	8e 83       	std	Y+6, r24	; 0x06
   16d8e:	14 c0       	rjmp	.+40     	; 0x16db8 <amigo_buffered_read_command+0xee>
   16d90:	8e ea       	ldi	r24, 0xAE	; 174
   16d92:	95 e1       	ldi	r25, 0x15	; 21
   16d94:	10 de       	rcall	.-992    	; 0x169b6 <amigo_increment>
   16d96:	89 2b       	or	r24, r25
   16d98:	59 f0       	breq	.+22     	; 0x16db0 <amigo_buffered_read_command+0xe6>
   16d9a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16d9e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16da2:	81 e0       	ldi	r24, 0x01	; 1
   16da4:	86 83       	std	Z+6, r24	; 0x06
   16da6:	87 81       	ldd	r24, Z+7	; 0x07
   16da8:	90 85       	ldd	r25, Z+8	; 0x08
   16daa:	84 60       	ori	r24, 0x04	; 4
   16dac:	90 87       	std	Z+8, r25	; 0x08
   16dae:	87 83       	std	Z+7, r24	; 0x07
   16db0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16db4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16db8:	81 81       	ldd	r24, Z+1	; 0x01
   16dba:	90 e0       	ldi	r25, 0x00	; 0
   16dbc:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   16dc0:	80 e0       	ldi	r24, 0x00	; 0
   16dc2:	90 e0       	ldi	r25, 0x00	; 0
   16dc4:	0f 90       	pop	r0
   16dc6:	0f 90       	pop	r0
   16dc8:	0f 90       	pop	r0
   16dca:	0f 90       	pop	r0
   16dcc:	0f 90       	pop	r0
   16dce:	df 91       	pop	r29
   16dd0:	cf 91       	pop	r28
   16dd2:	1f 91       	pop	r17
   16dd4:	0f 91       	pop	r16
   16dd6:	ff 90       	pop	r15
   16dd8:	ef 90       	pop	r14
   16dda:	bf 90       	pop	r11
   16ddc:	af 90       	pop	r10
   16dde:	9f 90       	pop	r9
   16de0:	8f 90       	pop	r8
   16de2:	08 95       	ret

00016de4 <amigo_buffered_read_execute>:
   16de4:	a5 e0       	ldi	r26, 0x05	; 5
   16de6:	b0 e0       	ldi	r27, 0x00	; 0
   16de8:	e8 ef       	ldi	r30, 0xF8	; 248
   16dea:	f6 eb       	ldi	r31, 0xB6	; 182
   16dec:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
   16df0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16df4:	87 fd       	sbrc	r24, 7
   16df6:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   16dfa:	80 e0       	ldi	r24, 0x00	; 0
   16dfc:	91 e0       	ldi	r25, 0x01	; 1
   16dfe:	9d 83       	std	Y+5, r25	; 0x05
   16e00:	8c 83       	std	Y+4, r24	; 0x04
   16e02:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e06:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e0a:	60 85       	ldd	r22, Z+8	; 0x08
   16e0c:	71 85       	ldd	r23, Z+9	; 0x09
   16e0e:	ae 01       	movw	r20, r28
   16e10:	4c 5f       	subi	r20, 0xFC	; 252
   16e12:	5f 4f       	sbci	r21, 0xFF	; 255
   16e14:	8a ee       	ldi	r24, 0xEA	; 234
   16e16:	9c e1       	ldi	r25, 0x1C	; 28
   16e18:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   16e1c:	8c 01       	movw	r16, r24
   16e1e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e22:	87 ff       	sbrs	r24, 7
   16e24:	04 c0       	rjmp	.+8      	; 0x16e2e <amigo_buffered_read_execute+0x4a>
   16e26:	8a ea       	ldi	r24, 0xAA	; 170
   16e28:	90 e1       	ldi	r25, 0x10	; 16
   16e2a:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   16e2e:	8c 81       	ldd	r24, Y+4	; 0x04
   16e30:	9d 81       	ldd	r25, Y+5	; 0x05
   16e32:	88 27       	eor	r24, r24
   16e34:	90 7d       	andi	r25, 0xD0	; 208
   16e36:	89 2b       	or	r24, r25
   16e38:	49 f4       	brne	.+18     	; 0x16e4c <amigo_buffered_read_execute+0x68>
   16e3a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e3e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e42:	80 85       	ldd	r24, Z+8	; 0x08
   16e44:	91 85       	ldd	r25, Z+9	; 0x09
   16e46:	08 17       	cp	r16, r24
   16e48:	19 07       	cpc	r17, r25
   16e4a:	c9 f0       	breq	.+50     	; 0x16e7e <amigo_buffered_read_execute+0x9a>
   16e4c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16e50:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e54:	81 e0       	ldi	r24, 0x01	; 1
   16e56:	86 83       	std	Z+6, r24	; 0x06
   16e58:	87 81       	ldd	r24, Z+7	; 0x07
   16e5a:	90 85       	ldd	r25, Z+8	; 0x08
   16e5c:	80 62       	ori	r24, 0x20	; 32
   16e5e:	90 87       	std	Z+8, r25	; 0x08
   16e60:	87 83       	std	Z+7, r24	; 0x07
   16e62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e66:	80 ff       	sbrs	r24, 0
   16e68:	0a c0       	rjmp	.+20     	; 0x16e7e <amigo_buffered_read_execute+0x9a>
   16e6a:	88 e8       	ldi	r24, 0x88	; 136
   16e6c:	90 e3       	ldi	r25, 0x30	; 48
   16e6e:	a0 e0       	ldi	r26, 0x00	; 0
   16e70:	ed b7       	in	r30, 0x3d	; 61
   16e72:	fe b7       	in	r31, 0x3e	; 62
   16e74:	81 83       	std	Z+1, r24	; 0x01
   16e76:	92 83       	std	Z+2, r25	; 0x02
   16e78:	a3 83       	std	Z+3, r26	; 0x03
   16e7a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16e7e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16e82:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16e86:	81 81       	ldd	r24, Z+1	; 0x01
   16e88:	90 e0       	ldi	r25, 0x00	; 0
   16e8a:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   16e8e:	8c 81       	ldd	r24, Y+4	; 0x04
   16e90:	9d 81       	ldd	r25, Y+5	; 0x05
   16e92:	25 96       	adiw	r28, 0x05	; 5
   16e94:	e4 e0       	ldi	r30, 0x04	; 4
   16e96:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00016e9a <amigo_buffered_write>:
   16e9a:	8f 92       	push	r8
   16e9c:	9f 92       	push	r9
   16e9e:	af 92       	push	r10
   16ea0:	bf 92       	push	r11
   16ea2:	ef 92       	push	r14
   16ea4:	ff 92       	push	r15
   16ea6:	0f 93       	push	r16
   16ea8:	1f 93       	push	r17
   16eaa:	cf 93       	push	r28
   16eac:	df 93       	push	r29
   16eae:	cd b7       	in	r28, 0x3d	; 61
   16eb0:	de b7       	in	r29, 0x3e	; 62
   16eb2:	27 97       	sbiw	r28, 0x07	; 7
   16eb4:	0f b6       	in	r0, 0x3f	; 63
   16eb6:	f8 94       	cli
   16eb8:	de bf       	out	0x3e, r29	; 62
   16eba:	0f be       	out	0x3f, r0	; 63
   16ebc:	cd bf       	out	0x3d, r28	; 61
   16ebe:	6c eb       	ldi	r22, 0xBC	; 188
   16ec0:	75 e1       	ldi	r23, 0x15	; 21
   16ec2:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16ec6:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16eca:	aa db       	rcall	.-2220   	; 0x16620 <amigo_chs_to_logical>
   16ecc:	4b 01       	movw	r8, r22
   16ece:	5c 01       	movw	r10, r24
   16ed0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ed4:	87 fd       	sbrc	r24, 7
   16ed6:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   16eda:	1f 82       	std	Y+7, r1	; 0x07
   16edc:	1e 82       	std	Y+6, r1	; 0x06
   16ede:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ee2:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16ee6:	60 85       	ldd	r22, Z+8	; 0x08
   16ee8:	71 85       	ldd	r23, Z+9	; 0x09
   16eea:	ae 01       	movw	r20, r28
   16eec:	4a 5f       	subi	r20, 0xFA	; 250
   16eee:	5f 4f       	sbci	r21, 0xFF	; 255
   16ef0:	8a ee       	ldi	r24, 0xEA	; 234
   16ef2:	9c e1       	ldi	r25, 0x1C	; 28
   16ef4:	0e 94 da 8a 	call	0x115b4	; 0x115b4 <gpib_read_str>
   16ef8:	7c 01       	movw	r14, r24
   16efa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16efe:	85 ff       	sbrs	r24, 5
   16f00:	12 c0       	rjmp	.+36     	; 0x16f26 <amigo_buffered_write+0x8c>
   16f02:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f06:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f0a:	80 81       	ld	r24, Z
   16f0c:	90 e0       	ldi	r25, 0x00	; 0
   16f0e:	ed b7       	in	r30, 0x3d	; 61
   16f10:	fe b7       	in	r31, 0x3e	; 62
   16f12:	95 83       	std	Z+5, r25	; 0x05
   16f14:	84 83       	std	Z+4, r24	; 0x04
   16f16:	86 e7       	ldi	r24, 0x76	; 118
   16f18:	90 e3       	ldi	r25, 0x30	; 48
   16f1a:	a0 e0       	ldi	r26, 0x00	; 0
   16f1c:	81 83       	std	Z+1, r24	; 0x01
   16f1e:	92 83       	std	Z+2, r25	; 0x02
   16f20:	a3 83       	std	Z+3, r26	; 0x03
   16f22:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16f26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f2a:	87 ff       	sbrs	r24, 7
   16f2c:	04 c0       	rjmp	.+8      	; 0x16f36 <amigo_buffered_write+0x9c>
   16f2e:	8b ec       	ldi	r24, 0xCB	; 203
   16f30:	95 e1       	ldi	r25, 0x15	; 21
   16f32:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   16f36:	8e 81       	ldd	r24, Y+6	; 0x06
   16f38:	9f 81       	ldd	r25, Y+7	; 0x07
   16f3a:	88 27       	eor	r24, r24
   16f3c:	90 7d       	andi	r25, 0xD0	; 208
   16f3e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16f42:	89 2b       	or	r24, r25
   16f44:	49 f4       	brne	.+18     	; 0x16f58 <amigo_buffered_write+0xbe>
   16f46:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f4a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f4e:	80 85       	ldd	r24, Z+8	; 0x08
   16f50:	91 85       	ldd	r25, Z+9	; 0x09
   16f52:	e8 16       	cp	r14, r24
   16f54:	f9 06       	cpc	r15, r25
   16f56:	c1 f0       	breq	.+48     	; 0x16f88 <amigo_buffered_write+0xee>
   16f58:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16f5c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f60:	81 e0       	ldi	r24, 0x01	; 1
   16f62:	86 83       	std	Z+6, r24	; 0x06
   16f64:	87 81       	ldd	r24, Z+7	; 0x07
   16f66:	90 85       	ldd	r25, Z+8	; 0x08
   16f68:	80 62       	ori	r24, 0x20	; 32
   16f6a:	90 87       	std	Z+8, r25	; 0x08
   16f6c:	87 83       	std	Z+7, r24	; 0x07
   16f6e:	20 ff       	sbrs	r18, 0
   16f70:	5e c0       	rjmp	.+188    	; 0x1702e <amigo_buffered_write+0x194>
   16f72:	87 e5       	ldi	r24, 0x57	; 87
   16f74:	90 e3       	ldi	r25, 0x30	; 48
   16f76:	a0 e0       	ldi	r26, 0x00	; 0
   16f78:	ed b7       	in	r30, 0x3d	; 61
   16f7a:	fe b7       	in	r31, 0x3e	; 62
   16f7c:	81 83       	std	Z+1, r24	; 0x01
   16f7e:	92 83       	std	Z+2, r25	; 0x02
   16f80:	a3 83       	std	Z+3, r26	; 0x03
   16f82:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16f86:	53 c0       	rjmp	.+166    	; 0x1702e <amigo_buffered_write+0x194>
   16f88:	26 fd       	sbrc	r18, 6
   16f8a:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
   16f8e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16f92:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16f96:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16f9a:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   16f9e:	87 e0       	ldi	r24, 0x07	; 7
   16fa0:	e8 0e       	add	r14, r24
   16fa2:	f1 1c       	adc	r15, r1
   16fa4:	00 85       	ldd	r16, Z+8	; 0x08
   16fa6:	11 85       	ldd	r17, Z+9	; 0x09
   16fa8:	2a ee       	ldi	r18, 0xEA	; 234
   16faa:	3c e1       	ldi	r19, 0x1C	; 28
   16fac:	b5 01       	movw	r22, r10
   16fae:	a4 01       	movw	r20, r8
   16fb0:	82 81       	ldd	r24, Z+2	; 0x02
   16fb2:	93 81       	ldd	r25, Z+3	; 0x03
   16fb4:	0e 94 1b 85 	call	0x10a36	; 0x10a36 <dbf_open_write>
   16fb8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fbc:	86 ff       	sbrs	r24, 6
   16fbe:	04 c0       	rjmp	.+8      	; 0x16fc8 <amigo_buffered_write+0x12e>
   16fc0:	84 e9       	ldi	r24, 0x94	; 148
   16fc2:	90 e1       	ldi	r25, 0x10	; 16
   16fc4:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
   16fc8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16fcc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16fd0:	87 81       	ldd	r24, Z+7	; 0x07
   16fd2:	90 85       	ldd	r25, Z+8	; 0x08
   16fd4:	89 2b       	or	r24, r25
   16fd6:	d9 f0       	breq	.+54     	; 0x1700e <amigo_buffered_write+0x174>
   16fd8:	81 e0       	ldi	r24, 0x01	; 1
   16fda:	86 83       	std	Z+6, r24	; 0x06
   16fdc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fe0:	80 ff       	sbrs	r24, 0
   16fe2:	0a c0       	rjmp	.+20     	; 0x16ff8 <amigo_buffered_write+0x15e>
   16fe4:	87 e3       	ldi	r24, 0x37	; 55
   16fe6:	90 e3       	ldi	r25, 0x30	; 48
   16fe8:	a0 e0       	ldi	r26, 0x00	; 0
   16fea:	ed b7       	in	r30, 0x3d	; 61
   16fec:	fe b7       	in	r31, 0x3e	; 62
   16fee:	81 83       	std	Z+1, r24	; 0x01
   16ff0:	92 83       	std	Z+2, r25	; 0x02
   16ff2:	a3 83       	std	Z+3, r26	; 0x03
   16ff4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   16ff8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ffc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17000:	81 81       	ldd	r24, Z+1	; 0x01
   17002:	90 e0       	ldi	r25, 0x00	; 0
   17004:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   17008:	80 e0       	ldi	r24, 0x00	; 0
   1700a:	90 e0       	ldi	r25, 0x00	; 0
   1700c:	1c c0       	rjmp	.+56     	; 0x17046 <amigo_buffered_write+0x1ac>
   1700e:	8c eb       	ldi	r24, 0xBC	; 188
   17010:	95 e1       	ldi	r25, 0x15	; 21
   17012:	d1 dc       	rcall	.-1630   	; 0x169b6 <amigo_increment>
   17014:	89 2b       	or	r24, r25
   17016:	59 f0       	breq	.+22     	; 0x1702e <amigo_buffered_write+0x194>
   17018:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1701c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17020:	81 e0       	ldi	r24, 0x01	; 1
   17022:	86 83       	std	Z+6, r24	; 0x06
   17024:	87 81       	ldd	r24, Z+7	; 0x07
   17026:	90 85       	ldd	r25, Z+8	; 0x08
   17028:	84 60       	ori	r24, 0x04	; 4
   1702a:	90 87       	std	Z+8, r25	; 0x08
   1702c:	87 83       	std	Z+7, r24	; 0x07
   1702e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17032:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17036:	81 81       	ldd	r24, Z+1	; 0x01
   17038:	90 e0       	ldi	r25, 0x00	; 0
   1703a:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   1703e:	8e 81       	ldd	r24, Y+6	; 0x06
   17040:	9f 81       	ldd	r25, Y+7	; 0x07
   17042:	88 27       	eor	r24, r24
   17044:	90 7d       	andi	r25, 0xD0	; 208
   17046:	27 96       	adiw	r28, 0x07	; 7
   17048:	0f b6       	in	r0, 0x3f	; 63
   1704a:	f8 94       	cli
   1704c:	de bf       	out	0x3e, r29	; 62
   1704e:	0f be       	out	0x3f, r0	; 63
   17050:	cd bf       	out	0x3d, r28	; 61
   17052:	df 91       	pop	r29
   17054:	cf 91       	pop	r28
   17056:	1f 91       	pop	r17
   17058:	0f 91       	pop	r16
   1705a:	ff 90       	pop	r15
   1705c:	ef 90       	pop	r14
   1705e:	bf 90       	pop	r11
   17060:	af 90       	pop	r10
   17062:	9f 90       	pop	r9
   17064:	8f 90       	pop	r8
   17066:	08 95       	ret

00017068 <amigo_cmd_dsj>:
   17068:	a8 e0       	ldi	r26, 0x08	; 8
   1706a:	b0 e0       	ldi	r27, 0x00	; 0
   1706c:	ea e3       	ldi	r30, 0x3A	; 58
   1706e:	f8 eb       	ldi	r31, 0xB8	; 184
   17070:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   17074:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17078:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1707c:	86 81       	ldd	r24, Z+6	; 0x06
   1707e:	88 87       	std	Y+8, r24	; 0x08
   17080:	80 e0       	ldi	r24, 0x00	; 0
   17082:	91 e0       	ldi	r25, 0x01	; 1
   17084:	9f 83       	std	Y+7, r25	; 0x07
   17086:	8e 83       	std	Y+6, r24	; 0x06
   17088:	ae 01       	movw	r20, r28
   1708a:	4a 5f       	subi	r20, 0xFA	; 250
   1708c:	5f 4f       	sbci	r21, 0xFF	; 255
   1708e:	61 e0       	ldi	r22, 0x01	; 1
   17090:	70 e0       	ldi	r23, 0x00	; 0
   17092:	ce 01       	movw	r24, r28
   17094:	08 96       	adiw	r24, 0x08	; 8
   17096:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
   1709a:	2e 81       	ldd	r18, Y+6	; 0x06
   1709c:	3f 81       	ldd	r19, Y+7	; 0x07
   1709e:	22 27       	eor	r18, r18
   170a0:	30 7d       	andi	r19, 0xD0	; 208
   170a2:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170a6:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170aa:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   170ae:	23 2b       	or	r18, r19
   170b0:	11 f4       	brne	.+4      	; 0x170b6 <amigo_cmd_dsj+0x4e>
   170b2:	01 97       	sbiw	r24, 0x01	; 1
   170b4:	c1 f0       	breq	.+48     	; 0x170e6 <amigo_cmd_dsj+0x7e>
   170b6:	81 e0       	ldi	r24, 0x01	; 1
   170b8:	86 83       	std	Z+6, r24	; 0x06
   170ba:	87 81       	ldd	r24, Z+7	; 0x07
   170bc:	90 85       	ldd	r25, Z+8	; 0x08
   170be:	80 62       	ori	r24, 0x20	; 32
   170c0:	90 87       	std	Z+8, r25	; 0x08
   170c2:	87 83       	std	Z+7, r24	; 0x07
   170c4:	40 ff       	sbrs	r20, 0
   170c6:	0a c0       	rjmp	.+20     	; 0x170dc <amigo_cmd_dsj+0x74>
   170c8:	8d e1       	ldi	r24, 0x1D	; 29
   170ca:	90 e3       	ldi	r25, 0x30	; 48
   170cc:	a0 e0       	ldi	r26, 0x00	; 0
   170ce:	ed b7       	in	r30, 0x3d	; 61
   170d0:	fe b7       	in	r31, 0x3e	; 62
   170d2:	81 83       	std	Z+1, r24	; 0x01
   170d4:	92 83       	std	Z+2, r25	; 0x02
   170d6:	a3 83       	std	Z+3, r26	; 0x03
   170d8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   170dc:	8e 81       	ldd	r24, Y+6	; 0x06
   170de:	9f 81       	ldd	r25, Y+7	; 0x07
   170e0:	88 27       	eor	r24, r24
   170e2:	90 7d       	andi	r25, 0xD0	; 208
   170e4:	19 c0       	rjmp	.+50     	; 0x17118 <amigo_cmd_dsj+0xb0>
   170e6:	45 ff       	sbrs	r20, 5
   170e8:	0e c0       	rjmp	.+28     	; 0x17106 <amigo_cmd_dsj+0x9e>
   170ea:	86 81       	ldd	r24, Z+6	; 0x06
   170ec:	90 e0       	ldi	r25, 0x00	; 0
   170ee:	ed b7       	in	r30, 0x3d	; 61
   170f0:	fe b7       	in	r31, 0x3e	; 62
   170f2:	95 83       	std	Z+5, r25	; 0x05
   170f4:	84 83       	std	Z+4, r24	; 0x04
   170f6:	80 e1       	ldi	r24, 0x10	; 16
   170f8:	90 e3       	ldi	r25, 0x30	; 48
   170fa:	a0 e0       	ldi	r26, 0x00	; 0
   170fc:	81 83       	std	Z+1, r24	; 0x01
   170fe:	92 83       	std	Z+2, r25	; 0x02
   17100:	a3 83       	std	Z+3, r26	; 0x03
   17102:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   17106:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1710a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1710e:	16 82       	std	Z+6, r1	; 0x06
   17110:	10 86       	std	Z+8, r1	; 0x08
   17112:	17 82       	std	Z+7, r1	; 0x07
   17114:	80 e0       	ldi	r24, 0x00	; 0
   17116:	90 e0       	ldi	r25, 0x00	; 0
   17118:	28 96       	adiw	r28, 0x08	; 8
   1711a:	e2 e0       	ldi	r30, 0x02	; 2
   1711c:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00017120 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   17120:	00 d0       	rcall	.+0      	; 0x17122 <amigo_cmd_clear+0x2>
   17122:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17124:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17128:	85 ff       	sbrs	r24, 5
   1712a:	0a c0       	rjmp	.+20     	; 0x17140 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   1712c:	81 e0       	ldi	r24, 0x01	; 1
   1712e:	90 e3       	ldi	r25, 0x30	; 48
   17130:	a0 e0       	ldi	r26, 0x00	; 0
   17132:	ed b7       	in	r30, 0x3d	; 61
   17134:	fe b7       	in	r31, 0x3e	; 62
   17136:	81 83       	std	Z+1, r24	; 0x01
   17138:	92 83       	std	Z+2, r25	; 0x02
   1713a:	a3 83       	std	Z+3, r26	; 0x03
   1713c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
    AMIGOs->sector = 0;
   17140:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17144:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17148:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   1714a:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   1714c:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   1714e:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   17150:	10 86       	std	Z+8, r1	; 0x08
   17152:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17154:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17158:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1715c:	81 81       	ldd	r24, Z+1	; 0x01
   1715e:	90 e0       	ldi	r25, 0x00	; 0
   17160:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
    return(0);
}
   17164:	80 e0       	ldi	r24, 0x00	; 0
   17166:	90 e0       	ldi	r25, 0x00	; 0
   17168:	0f 90       	pop	r0
   1716a:	0f 90       	pop	r0
   1716c:	0f 90       	pop	r0
   1716e:	08 95       	ret

00017170 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   17170:	af e0       	ldi	r26, 0x0F	; 15
   17172:	b0 e0       	ldi	r27, 0x00	; 0
   17174:	ee eb       	ldi	r30, 0xBE	; 190
   17176:	f8 eb       	ldi	r31, 0xB8	; 184
   17178:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
   1717c:	c8 2f       	mov	r28, r24
   1717e:	e6 2e       	mov	r14, r22
   17180:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   17182:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17186:	90 e0       	ldi	r25, 0x00	; 0
   17188:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   1718c:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   17190:	f1 2c       	mov	r15, r1
   17192:	d0 e0       	ldi	r29, 0x00	; 0
   17194:	89 2b       	or	r24, r25
   17196:	f1 f0       	breq	.+60     	; 0x171d4 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17198:	82 2f       	mov	r24, r18
   1719a:	90 e0       	ldi	r25, 0x00	; 0
   1719c:	ed b7       	in	r30, 0x3d	; 61
   1719e:	fe b7       	in	r31, 0x3e	; 62
   171a0:	97 87       	std	Z+15, r25	; 0x0f
   171a2:	86 87       	std	Z+14, r24	; 0x0e
   171a4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   171a8:	90 e0       	ldi	r25, 0x00	; 0
   171aa:	95 87       	std	Z+13, r25	; 0x0d
   171ac:	84 87       	std	Z+12, r24	; 0x0c
   171ae:	13 87       	std	Z+11, r17	; 0x0b
   171b0:	02 87       	std	Z+10, r16	; 0x0a
   171b2:	f1 86       	std	Z+9, r15	; 0x09
   171b4:	e0 86       	std	Z+8, r14	; 0x08
   171b6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   171ba:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   171be:	80 81       	ld	r24, Z
   171c0:	90 e0       	ldi	r25, 0x00	; 0
   171c2:	ed b7       	in	r30, 0x3d	; 61
   171c4:	fe b7       	in	r31, 0x3e	; 62
   171c6:	97 83       	std	Z+7, r25	; 0x07
   171c8:	86 83       	std	Z+6, r24	; 0x06
   171ca:	d5 83       	std	Z+5, r29	; 0x05
   171cc:	c4 83       	std	Z+4, r28	; 0x04
   171ce:	8a e9       	ldi	r24, 0x9A	; 154
   171d0:	9f e2       	ldi	r25, 0x2F	; 47
   171d2:	51 c0       	rjmp	.+162    	; 0x17276 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   171d4:	82 2f       	mov	r24, r18
   171d6:	90 e0       	ldi	r25, 0x00	; 0
   171d8:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   171dc:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   171e0:	30 91 ee 1e 	lds	r19, 0x1EEE	; 0x801eee <talking>
   171e4:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   171e8:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   171ec:	89 2b       	or	r24, r25
   171ee:	b1 f0       	breq	.+44     	; 0x1721c <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171f0:	83 2f       	mov	r24, r19
   171f2:	90 e0       	ldi	r25, 0x00	; 0
   171f4:	ed b7       	in	r30, 0x3d	; 61
   171f6:	fe b7       	in	r31, 0x3e	; 62
   171f8:	97 87       	std	Z+15, r25	; 0x0f
   171fa:	86 87       	std	Z+14, r24	; 0x0e
   171fc:	30 e0       	ldi	r19, 0x00	; 0
   171fe:	35 87       	std	Z+13, r19	; 0x0d
   17200:	24 87       	std	Z+12, r18	; 0x0c
   17202:	13 87       	std	Z+11, r17	; 0x0b
   17204:	02 87       	std	Z+10, r16	; 0x0a
   17206:	f1 86       	std	Z+9, r15	; 0x09
   17208:	e0 86       	std	Z+8, r14	; 0x08
   1720a:	8c 91       	ld	r24, X
   1720c:	90 e0       	ldi	r25, 0x00	; 0
   1720e:	97 83       	std	Z+7, r25	; 0x07
   17210:	86 83       	std	Z+6, r24	; 0x06
   17212:	d5 83       	std	Z+5, r29	; 0x05
   17214:	c4 83       	std	Z+4, r28	; 0x04
   17216:	83 e3       	ldi	r24, 0x33	; 51
   17218:	9f e2       	ldi	r25, 0x2F	; 47
   1721a:	2d c0       	rjmp	.+90     	; 0x17276 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   1721c:	3f 35       	cpi	r19, 0x5F	; 95
   1721e:	b1 f4       	brne	.+44     	; 0x1724c <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17220:	8f e5       	ldi	r24, 0x5F	; 95
   17222:	90 e0       	ldi	r25, 0x00	; 0
   17224:	ed b7       	in	r30, 0x3d	; 61
   17226:	fe b7       	in	r31, 0x3e	; 62
   17228:	97 87       	std	Z+15, r25	; 0x0f
   1722a:	86 87       	std	Z+14, r24	; 0x0e
   1722c:	30 e0       	ldi	r19, 0x00	; 0
   1722e:	35 87       	std	Z+13, r19	; 0x0d
   17230:	24 87       	std	Z+12, r18	; 0x0c
   17232:	13 87       	std	Z+11, r17	; 0x0b
   17234:	02 87       	std	Z+10, r16	; 0x0a
   17236:	f1 86       	std	Z+9, r15	; 0x09
   17238:	e0 86       	std	Z+8, r14	; 0x08
   1723a:	8c 91       	ld	r24, X
   1723c:	90 e0       	ldi	r25, 0x00	; 0
   1723e:	97 83       	std	Z+7, r25	; 0x07
   17240:	86 83       	std	Z+6, r24	; 0x06
   17242:	d5 83       	std	Z+5, r29	; 0x05
   17244:	c4 83       	std	Z+4, r28	; 0x04
   17246:	8c ec       	ldi	r24, 0xCC	; 204
   17248:	9e e2       	ldi	r25, 0x2E	; 46
   1724a:	15 c0       	rjmp	.+42     	; 0x17276 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1724c:	83 2f       	mov	r24, r19
   1724e:	90 e0       	ldi	r25, 0x00	; 0
   17250:	ed b7       	in	r30, 0x3d	; 61
   17252:	fe b7       	in	r31, 0x3e	; 62
   17254:	97 87       	std	Z+15, r25	; 0x0f
   17256:	86 87       	std	Z+14, r24	; 0x0e
   17258:	30 e0       	ldi	r19, 0x00	; 0
   1725a:	35 87       	std	Z+13, r19	; 0x0d
   1725c:	24 87       	std	Z+12, r18	; 0x0c
   1725e:	13 87       	std	Z+11, r17	; 0x0b
   17260:	02 87       	std	Z+10, r16	; 0x0a
   17262:	f1 86       	std	Z+9, r15	; 0x09
   17264:	e0 86       	std	Z+8, r14	; 0x08
   17266:	8c 91       	ld	r24, X
   17268:	90 e0       	ldi	r25, 0x00	; 0
   1726a:	97 83       	std	Z+7, r25	; 0x07
   1726c:	86 83       	std	Z+6, r24	; 0x06
   1726e:	d5 83       	std	Z+5, r29	; 0x05
   17270:	c4 83       	std	Z+4, r28	; 0x04
   17272:	87 e6       	ldi	r24, 0x67	; 103
   17274:	9e e2       	ldi	r25, 0x2E	; 46
   17276:	a0 e0       	ldi	r26, 0x00	; 0
   17278:	81 83       	std	Z+1, r24	; 0x01
   1727a:	92 83       	std	Z+2, r25	; 0x02
   1727c:	a3 83       	std	Z+3, r26	; 0x03
   1727e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17282:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17286:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1728a:	81 81       	ldd	r24, Z+1	; 0x01
   1728c:	90 e0       	ldi	r25, 0x00	; 0
   1728e:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
    return(0);
}
   17292:	80 e0       	ldi	r24, 0x00	; 0
   17294:	90 e0       	ldi	r25, 0x00	; 0
   17296:	cd b7       	in	r28, 0x3d	; 61
   17298:	de b7       	in	r29, 0x3e	; 62
   1729a:	2f 96       	adiw	r28, 0x0f	; 15
   1729c:	e6 e0       	ldi	r30, 0x06	; 6
   1729e:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

000172a2 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   172a2:	ab e0       	ldi	r26, 0x0B	; 11
   172a4:	b0 e0       	ldi	r27, 0x00	; 0
   172a6:	e7 e5       	ldi	r30, 0x57	; 87
   172a8:	f9 eb       	ldi	r31, 0xB9	; 185
   172aa:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   172ae:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   172b0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   172b4:	90 e0       	ldi	r25, 0x00	; 0
   172b6:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   172ba:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   172be:	d0 e0       	ldi	r29, 0x00	; 0
   172c0:	89 2b       	or	r24, r25
   172c2:	d1 f0       	breq	.+52     	; 0x172f8 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   172c4:	82 2f       	mov	r24, r18
   172c6:	90 e0       	ldi	r25, 0x00	; 0
   172c8:	ed b7       	in	r30, 0x3d	; 61
   172ca:	fe b7       	in	r31, 0x3e	; 62
   172cc:	93 87       	std	Z+11, r25	; 0x0b
   172ce:	82 87       	std	Z+10, r24	; 0x0a
   172d0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   172d4:	90 e0       	ldi	r25, 0x00	; 0
   172d6:	91 87       	std	Z+9, r25	; 0x09
   172d8:	80 87       	std	Z+8, r24	; 0x08
   172da:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   172de:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   172e2:	80 81       	ld	r24, Z
   172e4:	90 e0       	ldi	r25, 0x00	; 0
   172e6:	ed b7       	in	r30, 0x3d	; 61
   172e8:	fe b7       	in	r31, 0x3e	; 62
   172ea:	97 83       	std	Z+7, r25	; 0x07
   172ec:	86 83       	std	Z+6, r24	; 0x06
   172ee:	d5 83       	std	Z+5, r29	; 0x05
   172f0:	c4 83       	std	Z+4, r28	; 0x04
   172f2:	87 e1       	ldi	r24, 0x17	; 23
   172f4:	9e e2       	ldi	r25, 0x2E	; 46
   172f6:	43 c0       	rjmp	.+134    	; 0x1737e <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   172f8:	82 2f       	mov	r24, r18
   172fa:	90 e0       	ldi	r25, 0x00	; 0
   172fc:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   17300:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   17304:	40 91 ee 1e 	lds	r20, 0x1EEE	; 0x801eee <talking>
   17308:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   1730c:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   17310:	89 2b       	or	r24, r25
   17312:	89 f0       	breq	.+34     	; 0x17336 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17314:	50 e0       	ldi	r21, 0x00	; 0
   17316:	ed b7       	in	r30, 0x3d	; 61
   17318:	fe b7       	in	r31, 0x3e	; 62
   1731a:	53 87       	std	Z+11, r21	; 0x0b
   1731c:	42 87       	std	Z+10, r20	; 0x0a
   1731e:	30 e0       	ldi	r19, 0x00	; 0
   17320:	31 87       	std	Z+9, r19	; 0x09
   17322:	20 87       	std	Z+8, r18	; 0x08
   17324:	8c 91       	ld	r24, X
   17326:	90 e0       	ldi	r25, 0x00	; 0
   17328:	97 83       	std	Z+7, r25	; 0x07
   1732a:	86 83       	std	Z+6, r24	; 0x06
   1732c:	d5 83       	std	Z+5, r29	; 0x05
   1732e:	c4 83       	std	Z+4, r28	; 0x04
   17330:	87 ec       	ldi	r24, 0xC7	; 199
   17332:	9d e2       	ldi	r25, 0x2D	; 45
   17334:	24 c0       	rjmp	.+72     	; 0x1737e <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   17336:	4f 35       	cpi	r20, 0x5F	; 95
   17338:	91 f4       	brne	.+36     	; 0x1735e <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1733a:	8f e5       	ldi	r24, 0x5F	; 95
   1733c:	90 e0       	ldi	r25, 0x00	; 0
   1733e:	ed b7       	in	r30, 0x3d	; 61
   17340:	fe b7       	in	r31, 0x3e	; 62
   17342:	93 87       	std	Z+11, r25	; 0x0b
   17344:	82 87       	std	Z+10, r24	; 0x0a
   17346:	30 e0       	ldi	r19, 0x00	; 0
   17348:	31 87       	std	Z+9, r19	; 0x09
   1734a:	20 87       	std	Z+8, r18	; 0x08
   1734c:	8c 91       	ld	r24, X
   1734e:	90 e0       	ldi	r25, 0x00	; 0
   17350:	97 83       	std	Z+7, r25	; 0x07
   17352:	86 83       	std	Z+6, r24	; 0x06
   17354:	d5 83       	std	Z+5, r29	; 0x05
   17356:	c4 83       	std	Z+4, r28	; 0x04
   17358:	87 e7       	ldi	r24, 0x77	; 119
   1735a:	9d e2       	ldi	r25, 0x2D	; 45
   1735c:	10 c0       	rjmp	.+32     	; 0x1737e <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1735e:	50 e0       	ldi	r21, 0x00	; 0
   17360:	ed b7       	in	r30, 0x3d	; 61
   17362:	fe b7       	in	r31, 0x3e	; 62
   17364:	53 87       	std	Z+11, r21	; 0x0b
   17366:	42 87       	std	Z+10, r20	; 0x0a
   17368:	30 e0       	ldi	r19, 0x00	; 0
   1736a:	31 87       	std	Z+9, r19	; 0x09
   1736c:	20 87       	std	Z+8, r18	; 0x08
   1736e:	8c 91       	ld	r24, X
   17370:	90 e0       	ldi	r25, 0x00	; 0
   17372:	97 83       	std	Z+7, r25	; 0x07
   17374:	86 83       	std	Z+6, r24	; 0x06
   17376:	d5 83       	std	Z+5, r29	; 0x05
   17378:	c4 83       	std	Z+4, r28	; 0x04
   1737a:	86 e2       	ldi	r24, 0x26	; 38
   1737c:	9d e2       	ldi	r25, 0x2D	; 45
   1737e:	a0 e0       	ldi	r26, 0x00	; 0
   17380:	81 83       	std	Z+1, r24	; 0x01
   17382:	92 83       	std	Z+2, r25	; 0x02
   17384:	a3 83       	std	Z+3, r26	; 0x03
   17386:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1738a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1738e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17392:	81 81       	ldd	r24, Z+1	; 0x01
   17394:	90 e0       	ldi	r25, 0x00	; 0
   17396:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
    return(0);
}
   1739a:	80 e0       	ldi	r24, 0x00	; 0
   1739c:	90 e0       	ldi	r25, 0x00	; 0
   1739e:	cd b7       	in	r28, 0x3d	; 61
   173a0:	de b7       	in	r29, 0x3e	; 62
   173a2:	2b 96       	adiw	r28, 0x0b	; 11
   173a4:	e2 e0       	ldi	r30, 0x02	; 2
   173a6:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

000173aa <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   173aa:	8f 30       	cpi	r24, 0x0F	; 15
   173ac:	29 f0       	breq	.+10     	; 0x173b8 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   173ae:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   173b2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   173b6:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   173b8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   173bc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   173c0:	81 81       	ldd	r24, Z+1	; 0x01
   173c2:	88 23       	and	r24, r24
   173c4:	29 f0       	breq	.+10     	; 0x173d0 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   173c6:	87 81       	ldd	r24, Z+7	; 0x07
   173c8:	90 85       	ldd	r25, Z+8	; 0x08
   173ca:	80 64       	ori	r24, 0x40	; 64
   173cc:	90 87       	std	Z+8, r25	; 0x08
   173ce:	87 83       	std	Z+7, r24	; 0x07
   173d0:	08 95       	ret

000173d2 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   173d2:	ac e1       	ldi	r26, 0x1C	; 28
   173d4:	b0 e0       	ldi	r27, 0x00	; 0
   173d6:	ef ee       	ldi	r30, 0xEF	; 239
   173d8:	f9 eb       	ldi	r31, 0xB9	; 185
   173da:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
   173de:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173e4:	85 ff       	sbrs	r24, 5
   173e6:	16 c0       	rjmp	.+44     	; 0x17414 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   173e8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   173ec:	90 e0       	ldi	r25, 0x00	; 0
   173ee:	ed b7       	in	r30, 0x3d	; 61
   173f0:	fe b7       	in	r31, 0x3e	; 62
   173f2:	91 87       	std	Z+9, r25	; 0x09
   173f4:	80 87       	std	Z+8, r24	; 0x08
   173f6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   173fa:	90 e0       	ldi	r25, 0x00	; 0
   173fc:	97 83       	std	Z+7, r25	; 0x07
   173fe:	86 83       	std	Z+6, r24	; 0x06
   17400:	f5 82       	std	Z+5, r15	; 0x05
   17402:	e4 82       	std	Z+4, r14	; 0x04
   17404:	84 ef       	ldi	r24, 0xF4	; 244
   17406:	9c e2       	ldi	r25, 0x2C	; 44
   17408:	a0 e0       	ldi	r26, 0x00	; 0
   1740a:	81 83       	std	Z+1, r24	; 0x01
   1740c:	92 83       	std	Z+2, r25	; 0x02
   1740e:	a3 83       	std	Z+3, r26	; 0x03
   17410:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   17414:	fe e7       	ldi	r31, 0x7E	; 126
   17416:	ef 16       	cp	r14, r31
   17418:	f1 04       	cpc	r15, r1
   1741a:	f1 f5       	brne	.+124    	; 0x17498 <Amigo_Command+0xc6>
   1741c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17420:	90 e0       	ldi	r25, 0x00	; 0
   17422:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   17426:	89 2b       	or	r24, r25
   17428:	09 f4       	brne	.+2      	; 0x1742c <Amigo_Command+0x5a>
   1742a:	86 c0       	rjmp	.+268    	; 0x17538 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1742c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17430:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17434:	81 81       	ldd	r24, Z+1	; 0x01
   17436:	90 e0       	ldi	r25, 0x00	; 0
   17438:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
        status = EOI_FLAG;
   1743c:	80 e0       	ldi	r24, 0x00	; 0
   1743e:	91 e0       	ldi	r25, 0x01	; 1
   17440:	9c 8f       	std	Y+28, r25	; 0x1c
   17442:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17444:	ae 01       	movw	r20, r28
   17446:	45 5e       	subi	r20, 0xE5	; 229
   17448:	5f 4f       	sbci	r21, 0xFF	; 255
   1744a:	60 e0       	ldi	r22, 0x00	; 0
   1744c:	72 e0       	ldi	r23, 0x02	; 2
   1744e:	8a ee       	ldi	r24, 0xEA	; 234
   17450:	9c e1       	ldi	r25, 0x1C	; 28
   17452:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17456:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1745a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1745e:	81 81       	ldd	r24, Z+1	; 0x01
   17460:	90 e0       	ldi	r25, 0x00	; 0
   17462:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17466:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17468:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1746a:	88 27       	eor	r24, r24
   1746c:	90 7d       	andi	r25, 0xD0	; 208
   1746e:	89 2b       	or	r24, r25
   17470:	09 f4       	brne	.+2      	; 0x17474 <Amigo_Command+0xa2>
   17472:	89 c2       	rjmp	.+1298   	; 0x17986 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17474:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17478:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1747c:	81 e0       	ldi	r24, 0x01	; 1
   1747e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17480:	87 81       	ldd	r24, Z+7	; 0x07
   17482:	90 85       	ldd	r25, Z+8	; 0x08
   17484:	80 62       	ori	r24, 0x20	; 32
   17486:	90 87       	std	Z+8, r25	; 0x08
   17488:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   1748a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1748e:	80 ff       	sbrs	r24, 0
   17490:	7a c2       	rjmp	.+1268   	; 0x17986 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17492:	82 ed       	ldi	r24, 0xD2	; 210
   17494:	9c e2       	ldi	r25, 0x2C	; 44
   17496:	8e c0       	rjmp	.+284    	; 0x175b4 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17498:	ff e7       	ldi	r31, 0x7F	; 127
   1749a:	ef 16       	cp	r14, r31
   1749c:	f1 04       	cpc	r15, r1
   1749e:	09 f0       	breq	.+2      	; 0x174a2 <Amigo_Command+0xd0>
   174a0:	4b c0       	rjmp	.+150    	; 0x17538 <Amigo_Command+0x166>
   174a2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174a6:	90 e0       	ldi	r25, 0x00	; 0
   174a8:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   174ac:	89 2b       	or	r24, r25
   174ae:	09 f4       	brne	.+2      	; 0x174b2 <Amigo_Command+0xe0>
   174b0:	43 c0       	rjmp	.+134    	; 0x17538 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174b2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   174b6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   174ba:	81 81       	ldd	r24, Z+1	; 0x01
   174bc:	90 e0       	ldi	r25, 0x00	; 0
   174be:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   174c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174c6:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   174c8:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   174cc:	80 e0       	ldi	r24, 0x00	; 0
   174ce:	91 e0       	ldi	r25, 0x01	; 1
   174d0:	9c 8f       	std	Y+28, r25	; 0x1c
   174d2:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   174d4:	ae 01       	movw	r20, r28
   174d6:	45 5e       	subi	r20, 0xE5	; 229
   174d8:	5f 4f       	sbci	r21, 0xFF	; 255
   174da:	60 e0       	ldi	r22, 0x00	; 0
   174dc:	72 e0       	ldi	r23, 0x02	; 2
   174de:	8a ee       	ldi	r24, 0xEA	; 234
   174e0:	9c e1       	ldi	r25, 0x1C	; 28
   174e2:	0e 94 da 8a 	call	0x115b4	; 0x115b4 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   174e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174ea:	87 ff       	sbrs	r24, 7
   174ec:	04 c0       	rjmp	.+8      	; 0x174f6 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   174ee:	8b ec       	ldi	r24, 0xCB	; 203
   174f0:	95 e1       	ldi	r25, 0x15	; 21
   174f2:	0e 94 84 85 	call	0x10b08	; 0x10b08 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   174f6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   174fa:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   174fe:	81 81       	ldd	r24, Z+1	; 0x01
   17500:	90 e0       	ldi	r25, 0x00	; 0
   17502:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17506:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17508:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1750a:	88 27       	eor	r24, r24
   1750c:	90 7d       	andi	r25, 0xD0	; 208
   1750e:	89 2b       	or	r24, r25
   17510:	09 f4       	brne	.+2      	; 0x17514 <Amigo_Command+0x142>
   17512:	39 c2       	rjmp	.+1138   	; 0x17986 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17514:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17518:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1751c:	81 e0       	ldi	r24, 0x01	; 1
   1751e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17520:	87 81       	ldd	r24, Z+7	; 0x07
   17522:	90 85       	ldd	r25, Z+8	; 0x08
   17524:	80 62       	ori	r24, 0x20	; 32
   17526:	90 87       	std	Z+8, r25	; 0x08
   17528:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   1752a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1752e:	80 ff       	sbrs	r24, 0
   17530:	2a c2       	rjmp	.+1108   	; 0x17986 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17532:	81 eb       	ldi	r24, 0xB1	; 177
   17534:	9c e2       	ldi	r25, 0x2C	; 44
   17536:	3e c0       	rjmp	.+124    	; 0x175b4 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17538:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1753c:	90 e0       	ldi	r25, 0x00	; 0
   1753e:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17542:	89 2b       	or	r24, r25
   17544:	19 f4       	brne	.+6      	; 0x1754c <Amigo_Command+0x17a>
        return(0);
   17546:	80 e0       	ldi	r24, 0x00	; 0
   17548:	90 e0       	ldi	r25, 0x00	; 0
   1754a:	25 c2       	rjmp	.+1098   	; 0x17996 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1754c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17550:	90 e0       	ldi	r25, 0x00	; 0
   17552:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   17556:	89 2b       	or	r24, r25
   17558:	b1 f7       	brne	.-20     	; 0x17546 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1755a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1755e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17562:	81 81       	ldd	r24, Z+1	; 0x01
   17564:	90 e0       	ldi	r25, 0x00	; 0
   17566:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   1756a:	80 e0       	ldi	r24, 0x00	; 0
   1756c:	91 e0       	ldi	r25, 0x01	; 1
   1756e:	9c 8f       	std	Y+28, r25	; 0x1c
   17570:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17572:	ae 01       	movw	r20, r28
   17574:	45 5e       	subi	r20, 0xE5	; 229
   17576:	5f 4f       	sbci	r21, 0xFF	; 255
   17578:	60 e0       	ldi	r22, 0x00	; 0
   1757a:	72 e0       	ldi	r23, 0x02	; 2
   1757c:	8a ee       	ldi	r24, 0xEA	; 234
   1757e:	9c e1       	ldi	r25, 0x1C	; 28
   17580:	0e 94 da 8a 	call	0x115b4	; 0x115b4 <gpib_read_str>
   17584:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17586:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17588:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1758a:	88 27       	eor	r24, r24
   1758c:	90 7d       	andi	r25, 0xD0	; 208
   1758e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   17592:	89 2b       	or	r24, r25
   17594:	c1 f0       	breq	.+48     	; 0x175c6 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17596:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1759a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1759e:	81 e0       	ldi	r24, 0x01	; 1
   175a0:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   175a2:	87 81       	ldd	r24, Z+7	; 0x07
   175a4:	90 85       	ldd	r25, Z+8	; 0x08
   175a6:	80 62       	ori	r24, 0x20	; 32
   175a8:	90 87       	std	Z+8, r25	; 0x08
   175aa:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   175ac:	20 ff       	sbrs	r18, 0
   175ae:	eb c1       	rjmp	.+982    	; 0x17986 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   175b0:	80 e9       	ldi	r24, 0x90	; 144
   175b2:	9c e2       	ldi	r25, 0x2C	; 44
   175b4:	a0 e0       	ldi	r26, 0x00	; 0
   175b6:	ed b7       	in	r30, 0x3d	; 61
   175b8:	fe b7       	in	r31, 0x3e	; 62
   175ba:	81 83       	std	Z+1, r24	; 0x01
   175bc:	92 83       	std	Z+2, r25	; 0x02
   175be:	a3 83       	std	Z+3, r26	; 0x03
   175c0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   175c4:	e0 c1       	rjmp	.+960    	; 0x17986 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175c6:	25 ff       	sbrs	r18, 5
   175c8:	0e c0       	rjmp	.+28     	; 0x175e6 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   175ca:	ed b7       	in	r30, 0x3d	; 61
   175cc:	fe b7       	in	r31, 0x3e	; 62
   175ce:	17 83       	std	Z+7, r17	; 0x07
   175d0:	06 83       	std	Z+6, r16	; 0x06
   175d2:	f5 82       	std	Z+5, r15	; 0x05
   175d4:	e4 82       	std	Z+4, r14	; 0x04
   175d6:	81 e6       	ldi	r24, 0x61	; 97
   175d8:	9c e2       	ldi	r25, 0x2C	; 44
   175da:	a0 e0       	ldi	r26, 0x00	; 0
   175dc:	81 83       	std	Z+1, r24	; 0x01
   175de:	92 83       	std	Z+2, r25	; 0x02
   175e0:	a3 83       	std	Z+3, r26	; 0x03
   175e2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            secondary, len);
#endif
    if(!len)
   175e6:	01 15       	cp	r16, r1
   175e8:	11 05       	cpc	r17, r1
   175ea:	61 f4       	brne	.+24     	; 0x17604 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   175ec:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   175f0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   175f4:	81 e0       	ldi	r24, 0x01	; 1
   175f6:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   175f8:	87 81       	ldd	r24, Z+7	; 0x07
   175fa:	90 85       	ldd	r25, Z+8	; 0x08
   175fc:	80 62       	ori	r24, 0x20	; 32
   175fe:	90 87       	std	Z+8, r25	; 0x08
   17600:	87 83       	std	Z+7, r24	; 0x07
   17602:	c1 c1       	rjmp	.+898    	; 0x17986 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17604:	60 91 ea 1c 	lds	r22, 0x1CEA	; 0x801cea <gpib_iobuff>

    if (secondary == 0x68)
   17608:	f8 e6       	ldi	r31, 0x68	; 104
   1760a:	ef 16       	cp	r14, r31
   1760c:	f1 04       	cpc	r15, r1
   1760e:	09 f0       	breq	.+2      	; 0x17612 <Amigo_Command+0x240>
   17610:	28 c1       	rjmp	.+592    	; 0x17862 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17612:	61 11       	cpse	r22, r1
   17614:	2e c0       	rjmp	.+92     	; 0x17672 <Amigo_Command+0x2a0>
   17616:	02 30       	cpi	r16, 0x02	; 2
   17618:	11 05       	cpc	r17, r1
   1761a:	09 f0       	breq	.+2      	; 0x1761e <Amigo_Command+0x24c>
   1761c:	b9 c1       	rjmp	.+882    	; 0x17990 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1761e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17622:	85 ff       	sbrs	r24, 5
   17624:	0a c0       	rjmp	.+20     	; 0x1763a <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   17626:	81 e4       	ldi	r24, 0x41	; 65
   17628:	9c e2       	ldi	r25, 0x2C	; 44
   1762a:	a0 e0       	ldi	r26, 0x00	; 0
   1762c:	ed b7       	in	r30, 0x3d	; 61
   1762e:	fe b7       	in	r31, 0x3e	; 62
   17630:	81 83       	std	Z+1, r24	; 0x01
   17632:	92 83       	std	Z+2, r25	; 0x02
   17634:	a3 83       	std	Z+3, r26	; 0x03
   17636:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   1763a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1763e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17642:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17644:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17646:	10 86       	std	Z+8, r1	; 0x08
   17648:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   1764a:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   1764c:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17650:	98 2f       	mov	r25, r24
   17652:	92 95       	swap	r25
   17654:	96 95       	lsr	r25
   17656:	96 95       	lsr	r25
   17658:	93 70       	andi	r25, 0x03	; 3
   1765a:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   1765c:	8f 73       	andi	r24, 0x3F	; 63
   1765e:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17660:	ce 01       	movw	r24, r28
   17662:	0a 96       	adiw	r24, 0x0a	; 10
   17664:	d1 d9       	rcall	.-3166   	; 0x16a08 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17666:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1766a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1766e:	85 e0       	ldi	r24, 0x05	; 5
   17670:	19 c1       	rjmp	.+562    	; 0x178a4 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17672:	62 30       	cpi	r22, 0x02	; 2
   17674:	09 f0       	breq	.+2      	; 0x17678 <Amigo_Command+0x2a6>
   17676:	3f c0       	rjmp	.+126    	; 0x176f6 <Amigo_Command+0x324>
   17678:	05 30       	cpi	r16, 0x05	; 5
   1767a:	11 05       	cpc	r17, r1
   1767c:	d1 f4       	brne	.+52     	; 0x176b2 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1767e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17682:	85 ff       	sbrs	r24, 5
   17684:	0a c0       	rjmp	.+20     	; 0x1769a <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17686:	8d e2       	ldi	r24, 0x2D	; 45
   17688:	9c e2       	ldi	r25, 0x2C	; 44
   1768a:	a0 e0       	ldi	r26, 0x00	; 0
   1768c:	ed b7       	in	r30, 0x3d	; 61
   1768e:	fe b7       	in	r31, 0x3e	; 62
   17690:	81 83       	std	Z+1, r24	; 0x01
   17692:	92 83       	std	Z+2, r25	; 0x02
   17694:	a3 83       	std	Z+3, r26	; 0x03
   17696:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1769a:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1769e:	85 de       	rcall	.-758    	; 0x173aa <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   176a0:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   176a4:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   176a6:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   176aa:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   176ac:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   176b0:	1d c0       	rjmp	.+58     	; 0x176ec <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   176b2:	06 30       	cpi	r16, 0x06	; 6
   176b4:	11 05       	cpc	r17, r1
   176b6:	09 f0       	breq	.+2      	; 0x176ba <Amigo_Command+0x2e8>
   176b8:	6b c1       	rjmp	.+726    	; 0x17990 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176be:	85 ff       	sbrs	r24, 5
   176c0:	0a c0       	rjmp	.+20     	; 0x176d6 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   176c2:	89 e1       	ldi	r24, 0x19	; 25
   176c4:	9c e2       	ldi	r25, 0x2C	; 44
   176c6:	a0 e0       	ldi	r26, 0x00	; 0
   176c8:	ed b7       	in	r30, 0x3d	; 61
   176ca:	fe b7       	in	r31, 0x3e	; 62
   176cc:	81 83       	std	Z+1, r24	; 0x01
   176ce:	92 83       	std	Z+2, r25	; 0x02
   176d0:	a3 83       	std	Z+3, r26	; 0x03
   176d2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176d6:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   176da:	67 de       	rcall	.-818    	; 0x173aa <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   176dc:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   176e0:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   176e2:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   176e6:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   176e8:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   176ec:	8f 87       	std	Y+15, r24	; 0x0f
   176ee:	ce 01       	movw	r24, r28
   176f0:	0a 96       	adiw	r24, 0x0a	; 10
   176f2:	8a d9       	rcall	.-3308   	; 0x16a08 <amigo_seek>
   176f4:	d8 c0       	rjmp	.+432    	; 0x178a6 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   176f6:	63 30       	cpi	r22, 0x03	; 3
   176f8:	e9 f4       	brne	.+58     	; 0x17734 <Amigo_Command+0x362>
   176fa:	02 30       	cpi	r16, 0x02	; 2
   176fc:	11 05       	cpc	r17, r1
   176fe:	09 f0       	breq	.+2      	; 0x17702 <Amigo_Command+0x330>
   17700:	47 c1       	rjmp	.+654    	; 0x17990 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17702:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17706:	85 ff       	sbrs	r24, 5
   17708:	0a c0       	rjmp	.+20     	; 0x1771e <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1770a:	80 ef       	ldi	r24, 0xF0	; 240
   1770c:	9b e2       	ldi	r25, 0x2B	; 43
   1770e:	a0 e0       	ldi	r26, 0x00	; 0
   17710:	ed b7       	in	r30, 0x3d	; 61
   17712:	fe b7       	in	r31, 0x3e	; 62
   17714:	81 83       	std	Z+1, r24	; 0x01
   17716:	92 83       	std	Z+2, r25	; 0x02
   17718:	a3 83       	std	Z+3, r26	; 0x03
   1771a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1771e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            amigo_request_status();
   17722:	43 de       	rcall	.-890    	; 0x173aa <amigo_check_unit>
   17724:	3d d8       	rcall	.-3974   	; 0x167a0 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17726:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1772a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1772e:	83 e0       	ldi	r24, 0x03	; 3
   17730:	80 83       	st	Z, r24
   17732:	29 c1       	rjmp	.+594    	; 0x17986 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17734:	65 30       	cpi	r22, 0x05	; 5
   17736:	d9 f4       	brne	.+54     	; 0x1776e <Amigo_Command+0x39c>
   17738:	02 30       	cpi	r16, 0x02	; 2
   1773a:	11 05       	cpc	r17, r1
   1773c:	09 f0       	breq	.+2      	; 0x17740 <Amigo_Command+0x36e>
   1773e:	28 c1       	rjmp	.+592    	; 0x17990 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17740:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17744:	85 ff       	sbrs	r24, 5
   17746:	0a c0       	rjmp	.+20     	; 0x1775c <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17748:	8f ec       	ldi	r24, 0xCF	; 207
   1774a:	9b e2       	ldi	r25, 0x2B	; 43
   1774c:	a0 e0       	ldi	r26, 0x00	; 0
   1774e:	ed b7       	in	r30, 0x3d	; 61
   17750:	fe b7       	in	r31, 0x3e	; 62
   17752:	81 83       	std	Z+1, r24	; 0x01
   17754:	92 83       	std	Z+2, r25	; 0x02
   17756:	a3 83       	std	Z+3, r26	; 0x03
   17758:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1775c:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17760:	24 de       	rcall	.-952    	; 0x173aa <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17762:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17766:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1776a:	86 e0       	ldi	r24, 0x06	; 6
   1776c:	e7 c0       	rjmp	.+462    	; 0x1793c <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   1776e:	67 30       	cpi	r22, 0x07	; 7
   17770:	f9 f4       	brne	.+62     	; 0x177b0 <Amigo_Command+0x3de>
   17772:	04 30       	cpi	r16, 0x04	; 4
   17774:	11 05       	cpc	r17, r1
   17776:	09 f0       	breq	.+2      	; 0x1777a <Amigo_Command+0x3a8>
   17778:	0b c1       	rjmp	.+534    	; 0x17990 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1777a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1777e:	85 ff       	sbrs	r24, 5
   17780:	0a c0       	rjmp	.+20     	; 0x17796 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   17782:	8f eb       	ldi	r24, 0xBF	; 191
   17784:	9b e2       	ldi	r25, 0x2B	; 43
   17786:	a0 e0       	ldi	r26, 0x00	; 0
   17788:	ed b7       	in	r30, 0x3d	; 61
   1778a:	fe b7       	in	r31, 0x3e	; 62
   1778c:	81 83       	std	Z+1, r24	; 0x01
   1778e:	92 83       	std	Z+2, r25	; 0x02
   17790:	a3 83       	std	Z+3, r26	; 0x03
   17792:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17796:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1779a:	07 de       	rcall	.-1010   	; 0x173aa <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   1779c:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   177a0:	90 e0       	ldi	r25, 0x00	; 0
   177a2:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   177a4:	88 27       	eor	r24, r24
   177a6:	20 91 ed 1c 	lds	r18, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   177aa:	82 2b       	or	r24, r18
   177ac:	58 d9       	rcall	.-3408   	; 0x16a5e <amigo_verify>
   177ae:	f3 c0       	rjmp	.+486    	; 0x17996 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   177b0:	68 30       	cpi	r22, 0x08	; 8
   177b2:	d9 f4       	brne	.+54     	; 0x177ea <Amigo_Command+0x418>
   177b4:	02 30       	cpi	r16, 0x02	; 2
   177b6:	11 05       	cpc	r17, r1
   177b8:	09 f0       	breq	.+2      	; 0x177bc <Amigo_Command+0x3ea>
   177ba:	ea c0       	rjmp	.+468    	; 0x17990 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177c0:	85 ff       	sbrs	r24, 5
   177c2:	0a c0       	rjmp	.+20     	; 0x177d8 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   177c4:	8d e9       	ldi	r24, 0x9D	; 157
   177c6:	9b e2       	ldi	r25, 0x2B	; 43
   177c8:	a0 e0       	ldi	r26, 0x00	; 0
   177ca:	ed b7       	in	r30, 0x3d	; 61
   177cc:	fe b7       	in	r31, 0x3e	; 62
   177ce:	81 83       	std	Z+1, r24	; 0x01
   177d0:	92 83       	std	Z+2, r25	; 0x02
   177d2:	a3 83       	std	Z+3, r26	; 0x03
   177d4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177d8:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   177dc:	e6 dd       	rcall	.-1076   	; 0x173aa <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   177de:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   177e2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   177e6:	88 e0       	ldi	r24, 0x08	; 8
   177e8:	5d c0       	rjmp	.+186    	; 0x178a4 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   177ea:	86 2f       	mov	r24, r22
   177ec:	8f 7d       	andi	r24, 0xDF	; 223
   177ee:	8b 30       	cpi	r24, 0x0B	; 11
   177f0:	d9 f4       	brne	.+54     	; 0x17828 <Amigo_Command+0x456>
   177f2:	02 30       	cpi	r16, 0x02	; 2
   177f4:	11 05       	cpc	r17, r1
   177f6:	09 f0       	breq	.+2      	; 0x177fa <Amigo_Command+0x428>
   177f8:	cb c0       	rjmp	.+406    	; 0x17990 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177fe:	85 ff       	sbrs	r24, 5
   17800:	0a c0       	rjmp	.+20     	; 0x17816 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   17802:	81 e8       	ldi	r24, 0x81	; 129
   17804:	9b e2       	ldi	r25, 0x2B	; 43
   17806:	a0 e0       	ldi	r26, 0x00	; 0
   17808:	ed b7       	in	r30, 0x3d	; 61
   1780a:	fe b7       	in	r31, 0x3e	; 62
   1780c:	81 83       	std	Z+1, r24	; 0x01
   1780e:	92 83       	std	Z+2, r25	; 0x02
   17810:	a3 83       	std	Z+3, r26	; 0x03
   17812:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17816:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1781a:	c7 dd       	rcall	.-1138   	; 0x173aa <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   1781c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17820:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17824:	8a e0       	ldi	r24, 0x0A	; 10
   17826:	3e c0       	rjmp	.+124    	; 0x178a4 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17828:	64 31       	cpi	r22, 0x14	; 20
   1782a:	09 f0       	breq	.+2      	; 0x1782e <Amigo_Command+0x45c>
   1782c:	b1 c0       	rjmp	.+354    	; 0x17990 <Amigo_Command+0x5be>
   1782e:	02 30       	cpi	r16, 0x02	; 2
   17830:	11 05       	cpc	r17, r1
   17832:	09 f0       	breq	.+2      	; 0x17836 <Amigo_Command+0x464>
   17834:	ad c0       	rjmp	.+346    	; 0x17990 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17836:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1783a:	85 ff       	sbrs	r24, 5
   1783c:	0a c0       	rjmp	.+20     	; 0x17852 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   1783e:	88 e5       	ldi	r24, 0x58	; 88
   17840:	9b e2       	ldi	r25, 0x2B	; 43
   17842:	a0 e0       	ldi	r26, 0x00	; 0
   17844:	ed b7       	in	r30, 0x3d	; 61
   17846:	fe b7       	in	r31, 0x3e	; 62
   17848:	81 83       	std	Z+1, r24	; 0x01
   1784a:	92 83       	std	Z+2, r25	; 0x02
   1784c:	a3 83       	std	Z+3, r26	; 0x03
   1784e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
            amigo_request_logical_address();
   17852:	0e 94 c2 b3 	call	0x16784	; 0x16784 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17856:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1785a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1785e:	84 e0       	ldi	r24, 0x04	; 4
   17860:	21 c0       	rjmp	.+66     	; 0x178a4 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17862:	f9 e6       	ldi	r31, 0x69	; 105
   17864:	ef 16       	cp	r14, r31
   17866:	f1 04       	cpc	r15, r1
   17868:	39 f5       	brne	.+78     	; 0x178b8 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   1786a:	68 30       	cpi	r22, 0x08	; 8
   1786c:	09 f0       	breq	.+2      	; 0x17870 <Amigo_Command+0x49e>
   1786e:	90 c0       	rjmp	.+288    	; 0x17990 <Amigo_Command+0x5be>
   17870:	02 30       	cpi	r16, 0x02	; 2
   17872:	11 05       	cpc	r17, r1
   17874:	09 f0       	breq	.+2      	; 0x17878 <Amigo_Command+0x4a6>
   17876:	8c c0       	rjmp	.+280    	; 0x17990 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17878:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1787c:	85 ff       	sbrs	r24, 5
   1787e:	0a c0       	rjmp	.+20     	; 0x17894 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   17880:	88 e3       	ldi	r24, 0x38	; 56
   17882:	9b e2       	ldi	r25, 0x2B	; 43
   17884:	a0 e0       	ldi	r26, 0x00	; 0
   17886:	ed b7       	in	r30, 0x3d	; 61
   17888:	fe b7       	in	r31, 0x3e	; 62
   1788a:	81 83       	std	Z+1, r24	; 0x01
   1788c:	92 83       	std	Z+2, r25	; 0x02
   1788e:	a3 83       	std	Z+3, r26	; 0x03
   17890:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17894:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17898:	88 dd       	rcall	.-1264   	; 0x173aa <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   1789a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1789e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178a2:	89 e0       	ldi	r24, 0x09	; 9
   178a4:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   178a6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   178aa:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   178ae:	81 81       	ldd	r24, Z+1	; 0x01
   178b0:	90 e0       	ldi	r25, 0x00	; 0
   178b2:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_enable_PPR>
   178b6:	67 c0       	rjmp	.+206    	; 0x17986 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   178b8:	fa e6       	ldi	r31, 0x6A	; 106
   178ba:	ef 16       	cp	r14, r31
   178bc:	f1 04       	cpc	r15, r1
   178be:	09 f0       	breq	.+2      	; 0x178c2 <Amigo_Command+0x4f0>
   178c0:	40 c0       	rjmp	.+128    	; 0x17942 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   178c2:	68 30       	cpi	r22, 0x08	; 8
   178c4:	f1 f4       	brne	.+60     	; 0x17902 <Amigo_Command+0x530>
   178c6:	02 30       	cpi	r16, 0x02	; 2
   178c8:	11 05       	cpc	r17, r1
   178ca:	09 f0       	breq	.+2      	; 0x178ce <Amigo_Command+0x4fc>
   178cc:	61 c0       	rjmp	.+194    	; 0x17990 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178d2:	85 ff       	sbrs	r24, 5
   178d4:	0a c0       	rjmp	.+20     	; 0x178ea <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   178d6:	8d e0       	ldi	r24, 0x0D	; 13
   178d8:	9b e2       	ldi	r25, 0x2B	; 43
   178da:	a0 e0       	ldi	r26, 0x00	; 0
   178dc:	ed b7       	in	r30, 0x3d	; 61
   178de:	fe b7       	in	r31, 0x3e	; 62
   178e0:	81 83       	std	Z+1, r24	; 0x01
   178e2:	92 83       	std	Z+2, r25	; 0x02
   178e4:	a3 83       	std	Z+3, r26	; 0x03
   178e6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178ea:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   178ee:	5d dd       	rcall	.-1350   	; 0x173aa <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   178f0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   178f4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   178f8:	82 e0       	ldi	r24, 0x02	; 2
   178fa:	80 83       	st	Z, r24
            amigo_request_status();
   178fc:	0e 94 d0 b3 	call	0x167a0	; 0x167a0 <amigo_request_status>
   17900:	42 c0       	rjmp	.+132    	; 0x17986 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17902:	65 30       	cpi	r22, 0x05	; 5
   17904:	09 f0       	breq	.+2      	; 0x17908 <Amigo_Command+0x536>
   17906:	44 c0       	rjmp	.+136    	; 0x17990 <Amigo_Command+0x5be>
   17908:	02 30       	cpi	r16, 0x02	; 2
   1790a:	11 05       	cpc	r17, r1
   1790c:	09 f0       	breq	.+2      	; 0x17910 <Amigo_Command+0x53e>
   1790e:	40 c0       	rjmp	.+128    	; 0x17990 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17910:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17914:	85 ff       	sbrs	r24, 5
   17916:	0a c0       	rjmp	.+20     	; 0x1792c <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   17918:	8e ee       	ldi	r24, 0xEE	; 238
   1791a:	9a e2       	ldi	r25, 0x2A	; 42
   1791c:	a0 e0       	ldi	r26, 0x00	; 0
   1791e:	ed b7       	in	r30, 0x3d	; 61
   17920:	fe b7       	in	r31, 0x3e	; 62
   17922:	81 83       	std	Z+1, r24	; 0x01
   17924:	92 83       	std	Z+2, r25	; 0x02
   17926:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17928:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1792c:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17930:	3c dd       	rcall	.-1416   	; 0x173aa <amigo_check_unit>
   17932:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17936:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1793a:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   1793c:	80 83       	st	Z, r24
   1793e:	c5 d9       	rcall	.-3190   	; 0x16cca <amigo_buffered_read_command>
   17940:	2a c0       	rjmp	.+84     	; 0x17996 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17942:	fc e6       	ldi	r31, 0x6C	; 108
   17944:	ef 16       	cp	r14, r31
   17946:	f1 04       	cpc	r15, r1
   17948:	d1 f4       	brne	.+52     	; 0x1797e <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   1794a:	68 31       	cpi	r22, 0x18	; 24
   1794c:	09 f5       	brne	.+66     	; 0x17990 <Amigo_Command+0x5be>
   1794e:	05 30       	cpi	r16, 0x05	; 5
   17950:	11 05       	cpc	r17, r1
   17952:	f1 f4       	brne	.+60     	; 0x17990 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17954:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17958:	85 ff       	sbrs	r24, 5
   1795a:	0a c0       	rjmp	.+20     	; 0x17970 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   1795c:	8e ed       	ldi	r24, 0xDE	; 222
   1795e:	9a e2       	ldi	r25, 0x2A	; 42
   17960:	a0 e0       	ldi	r26, 0x00	; 0
   17962:	ed b7       	in	r30, 0x3d	; 61
   17964:	fe b7       	in	r31, 0x3e	; 62
   17966:	81 83       	std	Z+1, r24	; 0x01
   17968:	92 83       	std	Z+2, r25	; 0x02
   1796a:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1796c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   17970:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17974:	1a dd       	rcall	.-1484   	; 0x173aa <amigo_check_unit>
   17976:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   1797a:	0f d9       	rcall	.-3554   	; 0x16b9a <amigo_format>
   1797c:	04 c0       	rjmp	.+8      	; 0x17986 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   1797e:	f0 e7       	ldi	r31, 0x70	; 112
   17980:	ef 16       	cp	r14, r31
   17982:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17984:	29 f4       	brne	.+10     	; 0x17990 <Amigo_Command+0x5be>
   17986:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17988:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1798a:	88 27       	eor	r24, r24
   1798c:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   1798e:	03 c0       	rjmp	.+6      	; 0x17996 <Amigo_Command+0x5c4>
   17990:	a8 01       	movw	r20, r16
   17992:	8e 2d       	mov	r24, r14
   17994:	ed db       	rcall	.-2086   	; 0x17170 <amigo_todo_op>
}
   17996:	6c 96       	adiw	r28, 0x1c	; 28
   17998:	e6 e0       	ldi	r30, 0x06	; 6
   1799a:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0001799e <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   1799e:	a9 e0       	ldi	r26, 0x09	; 9
   179a0:	b0 e0       	ldi	r27, 0x00	; 0
   179a2:	e5 ed       	ldi	r30, 0xD5	; 213
   179a4:	fc eb       	ldi	r31, 0xBC	; 188
   179a6:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   179aa:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179b0:	85 ff       	sbrs	r24, 5
   179b2:	16 c0       	rjmp	.+44     	; 0x179e0 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   179b4:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   179b8:	90 e0       	ldi	r25, 0x00	; 0
   179ba:	ed b7       	in	r30, 0x3d	; 61
   179bc:	fe b7       	in	r31, 0x3e	; 62
   179be:	91 87       	std	Z+9, r25	; 0x09
   179c0:	80 87       	std	Z+8, r24	; 0x08
   179c2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   179c6:	90 e0       	ldi	r25, 0x00	; 0
   179c8:	97 83       	std	Z+7, r25	; 0x07
   179ca:	86 83       	std	Z+6, r24	; 0x06
   179cc:	d5 83       	std	Z+5, r29	; 0x05
   179ce:	c4 83       	std	Z+4, r28	; 0x04
   179d0:	8c ea       	ldi	r24, 0xAC	; 172
   179d2:	9a e2       	ldi	r25, 0x2A	; 42
   179d4:	a0 e0       	ldi	r26, 0x00	; 0
   179d6:	81 83       	std	Z+1, r24	; 0x01
   179d8:	92 83       	std	Z+2, r25	; 0x02
   179da:	a3 83       	std	Z+3, r26	; 0x03
   179dc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   179e0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   179e4:	8f 35       	cpi	r24, 0x5F	; 95
   179e6:	09 f4       	brne	.+2      	; 0x179ea <Amigo_Execute+0x4c>
   179e8:	ad c0       	rjmp	.+346    	; 0x17b44 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   179ea:	90 e0       	ldi	r25, 0x00	; 0
   179ec:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   179f0:	89 2b       	or	r24, r25
   179f2:	39 f0       	breq	.+14     	; 0x17a02 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   179f4:	ce 01       	movw	r24, r28
   179f6:	87 7f       	andi	r24, 0xF7	; 247
   179f8:	80 36       	cpi	r24, 0x60	; 96
   179fa:	91 05       	cpc	r25, r1
   179fc:	09 f0       	breq	.+2      	; 0x17a00 <Amigo_Execute+0x62>
   179fe:	a2 c0       	rjmp	.+324    	; 0x17b44 <Amigo_Execute+0x1a6>
   17a00:	08 c0       	rjmp	.+16     	; 0x17a12 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a02:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17a06:	90 e0       	ldi	r25, 0x00	; 0
   17a08:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17a0c:	89 2b       	or	r24, r25
   17a0e:	91 f7       	brne	.-28     	; 0x179f4 <Amigo_Execute+0x56>
   17a10:	99 c0       	rjmp	.+306    	; 0x17b44 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17a12:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17a16:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17a1a:	81 81       	ldd	r24, Z+1	; 0x01
   17a1c:	90 e0       	ldi	r25, 0x00	; 0
   17a1e:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>

    if(secondary == 0x60)
   17a22:	c0 36       	cpi	r28, 0x60	; 96
   17a24:	d1 05       	cpc	r29, r1
   17a26:	09 f0       	breq	.+2      	; 0x17a2a <Amigo_Execute+0x8c>
   17a28:	4e c0       	rjmp	.+156    	; 0x17ac6 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17a2a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17a2e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17a32:	e0 81       	ld	r30, Z
   17a34:	8e 2f       	mov	r24, r30
   17a36:	90 e0       	ldi	r25, 0x00	; 0
   17a38:	8b 30       	cpi	r24, 0x0B	; 11
   17a3a:	91 05       	cpc	r25, r1
   17a3c:	08 f0       	brcs	.+2      	; 0x17a40 <Amigo_Execute+0xa2>
   17a3e:	41 c0       	rjmp	.+130    	; 0x17ac2 <Amigo_Execute+0x124>
   17a40:	fc 01       	movw	r30, r24
   17a42:	ea 52       	subi	r30, 0x2A	; 42
   17a44:	ff 4f       	sbci	r31, 0xFF	; 255
   17a46:	0c 94 bd e6 	jmp	0x1cd7a	; 0x1cd7a <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a4e:	85 ff       	sbrs	r24, 5
   17a50:	18 c0       	rjmp	.+48     	; 0x17a82 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17a52:	8c e8       	ldi	r24, 0x8C	; 140
   17a54:	9a e2       	ldi	r25, 0x2A	; 42
   17a56:	0d c0       	rjmp	.+26     	; 0x17a72 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a5c:	85 ff       	sbrs	r24, 5
   17a5e:	11 c0       	rjmp	.+34     	; 0x17a82 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17a60:	8b e6       	ldi	r24, 0x6B	; 107
   17a62:	9a e2       	ldi	r25, 0x2A	; 42
   17a64:	06 c0       	rjmp	.+12     	; 0x17a72 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a6a:	85 ff       	sbrs	r24, 5
   17a6c:	0a c0       	rjmp	.+20     	; 0x17a82 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17a6e:	8c e4       	ldi	r24, 0x4C	; 76
   17a70:	9a e2       	ldi	r25, 0x2A	; 42
   17a72:	a0 e0       	ldi	r26, 0x00	; 0
   17a74:	ed b7       	in	r30, 0x3d	; 61
   17a76:	fe b7       	in	r31, 0x3e	; 62
   17a78:	81 83       	std	Z+1, r24	; 0x01
   17a7a:	92 83       	std	Z+2, r25	; 0x02
   17a7c:	a3 83       	std	Z+3, r26	; 0x03
   17a7e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17a82:	b0 d9       	rcall	.-3232   	; 0x16de4 <amigo_buffered_read_execute>
   17a84:	61 c0       	rjmp	.+194    	; 0x17b48 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a86:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a8a:	85 ff       	sbrs	r24, 5
   17a8c:	18 c0       	rjmp	.+48     	; 0x17abe <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17a8e:	8a e2       	ldi	r24, 0x2A	; 42
   17a90:	9a e2       	ldi	r25, 0x2A	; 42
   17a92:	0d c0       	rjmp	.+26     	; 0x17aae <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a94:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a98:	85 ff       	sbrs	r24, 5
   17a9a:	11 c0       	rjmp	.+34     	; 0x17abe <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17a9c:	8e e0       	ldi	r24, 0x0E	; 14
   17a9e:	9a e2       	ldi	r25, 0x2A	; 42
   17aa0:	06 c0       	rjmp	.+12     	; 0x17aae <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17aa2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17aa6:	85 ff       	sbrs	r24, 5
   17aa8:	0a c0       	rjmp	.+20     	; 0x17abe <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17aaa:	8e ee       	ldi	r24, 0xEE	; 238
   17aac:	99 e2       	ldi	r25, 0x29	; 41
   17aae:	a0 e0       	ldi	r26, 0x00	; 0
   17ab0:	ed b7       	in	r30, 0x3d	; 61
   17ab2:	fe b7       	in	r31, 0x3e	; 62
   17ab4:	81 83       	std	Z+1, r24	; 0x01
   17ab6:	92 83       	std	Z+2, r25	; 0x02
   17ab8:	a3 83       	std	Z+3, r26	; 0x03
   17aba:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17abe:	ed d9       	rcall	.-3110   	; 0x16e9a <amigo_buffered_write>
   17ac0:	43 c0       	rjmp	.+134    	; 0x17b48 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17ac2:	80 e6       	ldi	r24, 0x60	; 96
   17ac4:	3d c0       	rjmp	.+122    	; 0x17b40 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17ac6:	c8 36       	cpi	r28, 0x68	; 104
   17ac8:	d1 05       	cpc	r29, r1
   17aca:	e1 f5       	brne	.+120    	; 0x17b44 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17acc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17ad0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17ad4:	80 81       	ld	r24, Z
   17ad6:	82 30       	cpi	r24, 0x02	; 2
   17ad8:	81 f0       	breq	.+32     	; 0x17afa <Amigo_Execute+0x15c>
   17ada:	18 f4       	brcc	.+6      	; 0x17ae2 <Amigo_Execute+0x144>
   17adc:	88 23       	and	r24, r24
   17ade:	91 f1       	breq	.+100    	; 0x17b44 <Amigo_Execute+0x1a6>
   17ae0:	2e c0       	rjmp	.+92     	; 0x17b3e <Amigo_Execute+0x1a0>
   17ae2:	83 30       	cpi	r24, 0x03	; 3
   17ae4:	19 f0       	breq	.+6      	; 0x17aec <Amigo_Execute+0x14e>
   17ae6:	84 30       	cpi	r24, 0x04	; 4
   17ae8:	c9 f0       	breq	.+50     	; 0x17b1c <Amigo_Execute+0x17e>
   17aea:	29 c0       	rjmp	.+82     	; 0x17b3e <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17aec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17af0:	85 ff       	sbrs	r24, 5
   17af2:	11 c0       	rjmp	.+34     	; 0x17b16 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17af4:	85 ec       	ldi	r24, 0xC5	; 197
   17af6:	99 e2       	ldi	r25, 0x29	; 41
   17af8:	06 c0       	rjmp	.+12     	; 0x17b06 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17afa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17afe:	85 ff       	sbrs	r24, 5
   17b00:	0a c0       	rjmp	.+20     	; 0x17b16 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17b02:	8a e9       	ldi	r24, 0x9A	; 154
   17b04:	99 e2       	ldi	r25, 0x29	; 41
   17b06:	a0 e0       	ldi	r26, 0x00	; 0
   17b08:	ed b7       	in	r30, 0x3d	; 61
   17b0a:	fe b7       	in	r31, 0x3e	; 62
   17b0c:	81 83       	std	Z+1, r24	; 0x01
   17b0e:	92 83       	std	Z+2, r25	; 0x02
   17b10:	a3 83       	std	Z+3, r26	; 0x03
   17b12:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                return ( amigo_send_status() );
   17b16:	0e 94 82 b4 	call	0x16904	; 0x16904 <amigo_send_status>
   17b1a:	16 c0       	rjmp	.+44     	; 0x17b48 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b20:	85 ff       	sbrs	r24, 5
   17b22:	0a c0       	rjmp	.+20     	; 0x17b38 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17b24:	81 e7       	ldi	r24, 0x71	; 113
   17b26:	99 e2       	ldi	r25, 0x29	; 41
   17b28:	a0 e0       	ldi	r26, 0x00	; 0
   17b2a:	ed b7       	in	r30, 0x3d	; 61
   17b2c:	fe b7       	in	r31, 0x3e	; 62
   17b2e:	81 83       	std	Z+1, r24	; 0x01
   17b30:	92 83       	std	Z+2, r25	; 0x02
   17b32:	a3 83       	std	Z+3, r26	; 0x03
   17b34:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17b38:	0e 94 2d b4 	call	0x1685a	; 0x1685a <amigo_send_logical_address>
   17b3c:	05 c0       	rjmp	.+10     	; 0x17b48 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17b3e:	88 e6       	ldi	r24, 0x68	; 104
   17b40:	b0 db       	rcall	.-2208   	; 0x172a2 <amigo_todo>
   17b42:	02 c0       	rjmp	.+4      	; 0x17b48 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17b44:	80 e0       	ldi	r24, 0x00	; 0
   17b46:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17b48:	cd b7       	in	r28, 0x3d	; 61
   17b4a:	de b7       	in	r29, 0x3e	; 62
   17b4c:	29 96       	adiw	r28, 0x09	; 9
   17b4e:	e2 e0       	ldi	r30, 0x02	; 2
   17b50:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00017b54 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17b54:	cf 93       	push	r28
   17b56:	df 93       	push	r29
   17b58:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17b5a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b5e:	90 e0       	ldi	r25, 0x00	; 0
   17b60:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   17b64:	89 2b       	or	r24, r25
   17b66:	51 f0       	breq	.+20     	; 0x17b7c <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17b68:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b6c:	8f 35       	cpi	r24, 0x5F	; 95
   17b6e:	71 f4       	brne	.+28     	; 0x17b8c <AMIGO_COMMANDS+0x38>
   17b70:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b74:	90 e0       	ldi	r25, 0x00	; 0
   17b76:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17b7a:	08 c0       	rjmp	.+16     	; 0x17b8c <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17b7c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b80:	90 e0       	ldi	r25, 0x00	; 0
   17b82:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17b86:	89 2b       	or	r24, r25
   17b88:	79 f7       	brne	.-34     	; 0x17b68 <AMIGO_COMMANDS+0x14>
   17b8a:	76 c0       	rjmp	.+236    	; 0x17c78 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17b8c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17b90:	81 11       	cpse	r24, r1
   17b92:	05 c0       	rjmp	.+10     	; 0x17b9e <AMIGO_COMMANDS+0x4a>
   17b94:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17b98:	90 e0       	ldi	r25, 0x00	; 0
   17b9a:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17b9e:	c0 36       	cpi	r28, 0x60	; 96
   17ba0:	99 f4       	brne	.+38     	; 0x17bc8 <AMIGO_COMMANDS+0x74>
   17ba2:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17ba6:	90 e0       	ldi	r25, 0x00	; 0
   17ba8:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   17bac:	89 2b       	or	r24, r25
   17bae:	19 f0       	breq	.+6      	; 0x17bb6 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17bb0:	80 e6       	ldi	r24, 0x60	; 96
   17bb2:	90 e0       	ldi	r25, 0x00	; 0
   17bb4:	14 c0       	rjmp	.+40     	; 0x17bde <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17bb6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17bba:	90 e0       	ldi	r25, 0x00	; 0
   17bbc:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17bc0:	89 2b       	or	r24, r25
   17bc2:	09 f4       	brne	.+2      	; 0x17bc6 <AMIGO_COMMANDS+0x72>
   17bc4:	59 c0       	rjmp	.+178    	; 0x17c78 <AMIGO_COMMANDS+0x124>
   17bc6:	f4 cf       	rjmp	.-24     	; 0x17bb0 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17bc8:	c8 36       	cpi	r28, 0x68	; 104
   17bca:	c1 f4       	brne	.+48     	; 0x17bfc <AMIGO_COMMANDS+0xa8>
   17bcc:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17bd0:	90 e0       	ldi	r25, 0x00	; 0
   17bd2:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   17bd6:	89 2b       	or	r24, r25
   17bd8:	21 f0       	breq	.+8      	; 0x17be2 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17bda:	88 e6       	ldi	r24, 0x68	; 104
   17bdc:	90 e0       	ldi	r25, 0x00	; 0
   17bde:	df de       	rcall	.-578    	; 0x1799e <Amigo_Execute>
   17be0:	0b c0       	rjmp	.+22     	; 0x17bf8 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17be2:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17be6:	90 e0       	ldi	r25, 0x00	; 0
   17be8:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17bec:	89 2b       	or	r24, r25
   17bee:	09 f4       	brne	.+2      	; 0x17bf2 <AMIGO_COMMANDS+0x9e>
   17bf0:	43 c0       	rjmp	.+134    	; 0x17c78 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17bf2:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17bf4:	90 e0       	ldi	r25, 0x00	; 0
   17bf6:	ed db       	rcall	.-2086   	; 0x173d2 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17bf8:	ec 01       	movw	r28, r24
   17bfa:	40 c0       	rjmp	.+128    	; 0x17c7c <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17bfc:	c9 36       	cpi	r28, 0x69	; 105
   17bfe:	51 f4       	brne	.+20     	; 0x17c14 <AMIGO_COMMANDS+0xc0>
   17c00:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c04:	90 e0       	ldi	r25, 0x00	; 0
   17c06:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17c0a:	89 2b       	or	r24, r25
   17c0c:	a9 f1       	breq	.+106    	; 0x17c78 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c0e:	89 e6       	ldi	r24, 0x69	; 105
   17c10:	90 e0       	ldi	r25, 0x00	; 0
   17c12:	f1 cf       	rjmp	.-30     	; 0x17bf6 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17c14:	ca 36       	cpi	r28, 0x6A	; 106
   17c16:	51 f4       	brne	.+20     	; 0x17c2c <AMIGO_COMMANDS+0xd8>
   17c18:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c1c:	90 e0       	ldi	r25, 0x00	; 0
   17c1e:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17c22:	89 2b       	or	r24, r25
   17c24:	49 f1       	breq	.+82     	; 0x17c78 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c26:	8a e6       	ldi	r24, 0x6A	; 106
   17c28:	90 e0       	ldi	r25, 0x00	; 0
   17c2a:	e5 cf       	rjmp	.-54     	; 0x17bf6 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17c2c:	cc 36       	cpi	r28, 0x6C	; 108
   17c2e:	51 f4       	brne	.+20     	; 0x17c44 <AMIGO_COMMANDS+0xf0>
   17c30:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c34:	90 e0       	ldi	r25, 0x00	; 0
   17c36:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17c3a:	89 2b       	or	r24, r25
   17c3c:	e9 f0       	breq	.+58     	; 0x17c78 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c3e:	8c e6       	ldi	r24, 0x6C	; 108
   17c40:	90 e0       	ldi	r25, 0x00	; 0
   17c42:	d9 cf       	rjmp	.-78     	; 0x17bf6 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17c44:	c0 37       	cpi	r28, 0x70	; 112
   17c46:	c1 f4       	brne	.+48     	; 0x17c78 <AMIGO_COMMANDS+0x124>
   17c48:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17c4c:	90 e0       	ldi	r25, 0x00	; 0
   17c4e:	0e 94 c4 8c 	call	0x11988	; 0x11988 <AMIGO_is_MTA>
   17c52:	ec 01       	movw	r28, r24
   17c54:	89 2b       	or	r24, r25
   17c56:	51 f0       	breq	.+20     	; 0x17c6c <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17c58:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17c5c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   17c60:	81 81       	ldd	r24, Z+1	; 0x01
   17c62:	90 e0       	ldi	r25, 0x00	; 0
   17c64:	0e 94 82 86 	call	0x10d04	; 0x10d04 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17c68:	ff d9       	rcall	.-3074   	; 0x17068 <amigo_cmd_dsj>
   17c6a:	c6 cf       	rjmp	.-116    	; 0x17bf8 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17c6c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17c70:	90 e0       	ldi	r25, 0x00	; 0
   17c72:	0e 94 b2 8c 	call	0x11964	; 0x11964 <AMIGO_is_MLA>
   17c76:	02 c0       	rjmp	.+4      	; 0x17c7c <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17c78:	c0 e0       	ldi	r28, 0x00	; 0
   17c7a:	d0 e0       	ldi	r29, 0x00	; 0
}
   17c7c:	ce 01       	movw	r24, r28
   17c7e:	df 91       	pop	r29
   17c80:	cf 91       	pop	r28
   17c82:	08 95       	ret

00017c84 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17c84:	ed e9       	ldi	r30, 0x9D	; 157
   17c86:	f9 e1       	ldi	r31, 0x19	; 25
   17c88:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17c8a:	10 82       	st	Z, r1
   17c8c:	11 82       	std	Z+1, r1	; 0x01
   17c8e:	12 82       	std	Z+2, r1	; 0x02
   17c90:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17c92:	15 82       	std	Z+5, r1	; 0x05
   17c94:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17c96:	12 86       	std	Z+10, r1	; 0x0a
   17c98:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17c9a:	14 86       	std	Z+12, r1	; 0x0c
   17c9c:	13 86       	std	Z+11, r1	; 0x0b
   17c9e:	08 95       	ret

00017ca0 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17ca0:	cf 93       	push	r28
   17ca2:	df 93       	push	r29
   17ca4:	ad b7       	in	r26, 0x3d	; 61
   17ca6:	be b7       	in	r27, 0x3e	; 62
   17ca8:	17 97       	sbiw	r26, 0x07	; 7
   17caa:	0f b6       	in	r0, 0x3f	; 63
   17cac:	f8 94       	cli
   17cae:	be bf       	out	0x3e, r27	; 62
   17cb0:	0f be       	out	0x3f, r0	; 63
   17cb2:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17cb4:	20 91 a6 19 	lds	r18, 0x19A6	; 0x8019a6 <plot+0x9>
   17cb8:	30 91 a7 19 	lds	r19, 0x19A7	; 0x8019a7 <plot+0xa>
   17cbc:	21 15       	cp	r18, r1
   17cbe:	31 05       	cpc	r19, r1
   17cc0:	09 f4       	brne	.+2      	; 0x17cc4 <receive_plot_flush+0x24>
   17cc2:	45 c0       	rjmp	.+138    	; 0x17d4e <receive_plot_flush+0xae>
   17cc4:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17cc8:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17ccc:	00 97       	sbiw	r24, 0x00	; 0
   17cce:	09 f4       	brne	.+2      	; 0x17cd2 <receive_plot_flush+0x32>
   17cd0:	40 c0       	rjmp	.+128    	; 0x17d52 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17cd2:	ac 01       	movw	r20, r24
   17cd4:	61 e0       	ldi	r22, 0x01	; 1
   17cd6:	70 e0       	ldi	r23, 0x00	; 0
   17cd8:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17cdc:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17ce0:	0e 94 72 7c 	call	0xf8e4	; 0xf8e4 <fwrite>
   17ce4:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17ce6:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17cea:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17cee:	c8 17       	cp	r28, r24
   17cf0:	d9 07       	cpc	r29, r25
   17cf2:	09 f1       	breq	.+66     	; 0x17d36 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17cf4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17cf8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17cfc:	81 72       	andi	r24, 0x21	; 33
   17cfe:	99 27       	eor	r25, r25
   17d00:	89 2b       	or	r24, r25
   17d02:	b1 f0       	breq	.+44     	; 0x17d30 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17d04:	85 ed       	ldi	r24, 0xD5	; 213
   17d06:	95 e1       	ldi	r25, 0x15	; 21
   17d08:	0e 94 7b 78 	call	0xf0f6	; 0xf0f6 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17d0c:	ed b7       	in	r30, 0x3d	; 61
   17d0e:	fe b7       	in	r31, 0x3e	; 62
   17d10:	d7 83       	std	Z+7, r29	; 0x07
   17d12:	c6 83       	std	Z+6, r28	; 0x06
   17d14:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17d18:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17d1c:	95 83       	std	Z+5, r25	; 0x05
   17d1e:	84 83       	std	Z+4, r24	; 0x04
   17d20:	81 e0       	ldi	r24, 0x01	; 1
   17d22:	92 e3       	ldi	r25, 0x32	; 50
   17d24:	a0 e0       	ldi	r26, 0x00	; 0
   17d26:	81 83       	std	Z+1, r24	; 0x01
   17d28:	92 83       	std	Z+2, r25	; 0x02
   17d2a:	a3 83       	std	Z+3, r26	; 0x03
   17d2c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        }
        return(-1);
   17d30:	8f ef       	ldi	r24, 0xFF	; 255
   17d32:	9f ef       	ldi	r25, 0xFF	; 255
   17d34:	0e c0       	rjmp	.+28     	; 0x17d52 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17d36:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17d3a:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17d3e:	0e 94 c5 76 	call	0xed8a	; 0xed8a <fileno>
    if(fno < 0)
   17d42:	97 fd       	sbrc	r25, 7
   17d44:	f5 cf       	rjmp	.-22     	; 0x17d30 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17d46:	0e 94 bc 7b 	call	0xf778	; 0xf778 <syncfs>
    return (ret);
   17d4a:	ce 01       	movw	r24, r28
   17d4c:	02 c0       	rjmp	.+4      	; 0x17d52 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17d4e:	80 e0       	ldi	r24, 0x00	; 0
   17d50:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17d52:	cd b7       	in	r28, 0x3d	; 61
   17d54:	de b7       	in	r29, 0x3e	; 62
   17d56:	27 96       	adiw	r28, 0x07	; 7
   17d58:	e2 e0       	ldi	r30, 0x02	; 2
   17d5a:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00017d5e <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17d5e:	ad b7       	in	r26, 0x3d	; 61
   17d60:	be b7       	in	r27, 0x3e	; 62
   17d62:	17 97       	sbiw	r26, 0x07	; 7
   17d64:	0f b6       	in	r0, 0x3f	; 63
   17d66:	f8 94       	cli
   17d68:	be bf       	out	0x3e, r27	; 62
   17d6a:	0f be       	out	0x3f, r0	; 63
   17d6c:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17d6e:	98 df       	rcall	.-208    	; 0x17ca0 <receive_plot_flush>
   17d70:	97 ff       	sbrs	r25, 7
   17d72:	03 c0       	rjmp	.+6      	; 0x17d7a <printer_close+0x1c>
        plot.error = 1;
   17d74:	81 e0       	ldi	r24, 0x01	; 1
   17d76:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17d7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d7e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d82:	81 72       	andi	r24, 0x21	; 33
   17d84:	99 27       	eor	r25, r25
   17d86:	89 2b       	or	r24, r25
   17d88:	71 f0       	breq	.+28     	; 0x17da6 <printer_close+0x48>
    {
        if(plot.error)
   17d8a:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0x8>
   17d8e:	88 23       	and	r24, r24
   17d90:	51 f0       	breq	.+20     	; 0x17da6 <printer_close+0x48>
            printf("ERROR durring write\n");
   17d92:	80 e3       	ldi	r24, 0x30	; 48
   17d94:	92 e3       	ldi	r25, 0x32	; 50
   17d96:	a0 e0       	ldi	r26, 0x00	; 0
   17d98:	ed b7       	in	r30, 0x3d	; 61
   17d9a:	fe b7       	in	r31, 0x3e	; 62
   17d9c:	81 83       	std	Z+1, r24	; 0x01
   17d9e:	92 83       	std	Z+2, r25	; 0x02
   17da0:	a3 83       	std	Z+3, r26	; 0x03
   17da2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }

    if(plot.fp)
   17da6:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17daa:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   17dae:	00 97       	sbiw	r24, 0x00	; 0
   17db0:	e1 f0       	breq	.+56     	; 0x17dea <printer_close+0x8c>
    {
        fclose(plot.fp);
   17db2:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17db6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17dba:	85 ff       	sbrs	r24, 5
   17dbc:	16 c0       	rjmp	.+44     	; 0x17dea <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17dbe:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17dc2:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17dc6:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17dca:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17dce:	ed b7       	in	r30, 0x3d	; 61
   17dd0:	fe b7       	in	r31, 0x3e	; 62
   17dd2:	84 83       	std	Z+4, r24	; 0x04
   17dd4:	95 83       	std	Z+5, r25	; 0x05
   17dd6:	a6 83       	std	Z+6, r26	; 0x06
   17dd8:	b7 83       	std	Z+7, r27	; 0x07
   17dda:	82 e2       	ldi	r24, 0x22	; 34
   17ddc:	92 e3       	ldi	r25, 0x32	; 50
   17dde:	a0 e0       	ldi	r26, 0x00	; 0
   17de0:	81 83       	std	Z+1, r24	; 0x01
   17de2:	92 83       	std	Z+2, r25	; 0x02
   17de4:	a3 83       	std	Z+3, r26	; 0x03
   17de6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }

    if(plot.buf)
   17dea:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   17dee:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17df2:	00 97       	sbiw	r24, 0x00	; 0
   17df4:	11 f0       	breq	.+4      	; 0x17dfa <printer_close+0x9c>
        safefree(plot.buf);
   17df6:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
    printer_init();
   17dfa:	44 df       	rcall	.-376    	; 0x17c84 <printer_init>
}
   17dfc:	ad b7       	in	r26, 0x3d	; 61
   17dfe:	be b7       	in	r27, 0x3e	; 62
   17e00:	17 96       	adiw	r26, 0x07	; 7
   17e02:	0f b6       	in	r0, 0x3f	; 63
   17e04:	f8 94       	cli
   17e06:	be bf       	out	0x3e, r27	; 62
   17e08:	0f be       	out	0x3f, r0	; 63
   17e0a:	ad bf       	out	0x3d, r26	; 61
   17e0c:	08 95       	ret

00017e0e <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17e0e:	ad e5       	ldi	r26, 0x5D	; 93
   17e10:	b0 e0       	ldi	r27, 0x00	; 0
   17e12:	ed e0       	ldi	r30, 0x0D	; 13
   17e14:	ff eb       	ldi	r31, 0xBF	; 191
   17e16:	0c 94 f8 e6 	jmp	0x1cdf0	; 0x1cdf0 <__prologue_saves__+0x18>
   17e1a:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17e1c:	89 2b       	or	r24, r25
   17e1e:	09 f0       	breq	.+2      	; 0x17e22 <printer_open+0x14>
   17e20:	4f c0       	rjmp	.+158    	; 0x17ec0 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17e22:	be 01       	movw	r22, r28
   17e24:	6e 5a       	subi	r22, 0xAE	; 174
   17e26:	7f 4f       	sbci	r23, 0xFF	; 255
   17e28:	80 e0       	ldi	r24, 0x00	; 0
   17e2a:	90 e0       	ldi	r25, 0x00	; 0
   17e2c:	0e 94 c9 33 	call	0x6792	; 0x6792 <clock_gettime>
        seconds = ts.tv_sec;
   17e30:	66 96       	adiw	r28, 0x16	; 22
   17e32:	8c ad       	ldd	r24, Y+60	; 0x3c
   17e34:	9d ad       	ldd	r25, Y+61	; 0x3d
   17e36:	ae ad       	ldd	r26, Y+62	; 0x3e
   17e38:	bf ad       	ldd	r27, Y+63	; 0x3f
   17e3a:	66 97       	sbiw	r28, 0x16	; 22
   17e3c:	6e 96       	adiw	r28, 0x1e	; 30
   17e3e:	8c af       	std	Y+60, r24	; 0x3c
   17e40:	9d af       	std	Y+61, r25	; 0x3d
   17e42:	ae af       	std	Y+62, r26	; 0x3e
   17e44:	bf af       	std	Y+63, r27	; 0x3f
   17e46:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17e48:	ce 01       	movw	r24, r28
   17e4a:	86 5a       	subi	r24, 0xA6	; 166
   17e4c:	9f 4f       	sbci	r25, 0xFF	; 255
   17e4e:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <gmtime>
   17e52:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17e54:	fc 01       	movw	r30, r24
   17e56:	e6 80       	ldd	r14, Z+6	; 0x06
   17e58:	f7 80       	ldd	r15, Z+7	; 0x07
   17e5a:	80 85       	ldd	r24, Z+8	; 0x08
   17e5c:	91 85       	ldd	r25, Z+9	; 0x09
   17e5e:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <tm_mon_to_ascii>
   17e62:	f8 01       	movw	r30, r16
   17e64:	20 81       	ld	r18, Z
   17e66:	31 81       	ldd	r19, Z+1	; 0x01
   17e68:	ed b7       	in	r30, 0x3d	; 61
   17e6a:	fe b7       	in	r31, 0x3e	; 62
   17e6c:	31 8b       	std	Z+17, r19	; 0x11
   17e6e:	20 8b       	std	Z+16, r18	; 0x10
   17e70:	f8 01       	movw	r30, r16
   17e72:	22 81       	ldd	r18, Z+2	; 0x02
   17e74:	33 81       	ldd	r19, Z+3	; 0x03
   17e76:	ed b7       	in	r30, 0x3d	; 61
   17e78:	fe b7       	in	r31, 0x3e	; 62
   17e7a:	37 87       	std	Z+15, r19	; 0x0f
   17e7c:	26 87       	std	Z+14, r18	; 0x0e
   17e7e:	f8 01       	movw	r30, r16
   17e80:	24 81       	ldd	r18, Z+4	; 0x04
   17e82:	35 81       	ldd	r19, Z+5	; 0x05
   17e84:	ed b7       	in	r30, 0x3d	; 61
   17e86:	fe b7       	in	r31, 0x3e	; 62
   17e88:	35 87       	std	Z+13, r19	; 0x0d
   17e8a:	24 87       	std	Z+12, r18	; 0x0c
   17e8c:	f8 01       	movw	r30, r16
   17e8e:	22 85       	ldd	r18, Z+10	; 0x0a
   17e90:	33 85       	ldd	r19, Z+11	; 0x0b
   17e92:	24 59       	subi	r18, 0x94	; 148
   17e94:	38 4f       	sbci	r19, 0xF8	; 248
   17e96:	ed b7       	in	r30, 0x3d	; 61
   17e98:	fe b7       	in	r31, 0x3e	; 62
   17e9a:	33 87       	std	Z+11, r19	; 0x0b
   17e9c:	22 87       	std	Z+10, r18	; 0x0a
   17e9e:	91 87       	std	Z+9, r25	; 0x09
   17ea0:	80 87       	std	Z+8, r24	; 0x08
   17ea2:	f7 82       	std	Z+7, r15	; 0x07
   17ea4:	e6 82       	std	Z+6, r14	; 0x06
   17ea6:	87 e6       	ldi	r24, 0x67	; 103
   17ea8:	92 e3       	ldi	r25, 0x32	; 50
   17eaa:	a0 e0       	ldi	r26, 0x00	; 0
   17eac:	83 83       	std	Z+3, r24	; 0x03
   17eae:	94 83       	std	Z+4, r25	; 0x04
   17eb0:	a5 83       	std	Z+5, r26	; 0x05
   17eb2:	8e 01       	movw	r16, r28
   17eb4:	0e 5e       	subi	r16, 0xEE	; 238
   17eb6:	1f 4f       	sbci	r17, 0xFF	; 255
   17eb8:	12 83       	std	Z+2, r17	; 0x02
   17eba:	01 83       	std	Z+1, r16	; 0x01
   17ebc:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ec0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ec4:	85 ff       	sbrs	r24, 5
   17ec6:	0c c0       	rjmp	.+24     	; 0x17ee0 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17ec8:	ed b7       	in	r30, 0x3d	; 61
   17eca:	fe b7       	in	r31, 0x3e	; 62
   17ecc:	15 83       	std	Z+5, r17	; 0x05
   17ece:	04 83       	std	Z+4, r16	; 0x04
   17ed0:	81 e5       	ldi	r24, 0x51	; 81
   17ed2:	92 e3       	ldi	r25, 0x32	; 50
   17ed4:	a0 e0       	ldi	r26, 0x00	; 0
   17ed6:	81 83       	std	Z+1, r24	; 0x01
   17ed8:	92 83       	std	Z+2, r25	; 0x02
   17eda:	a3 83       	std	Z+3, r26	; 0x03
   17edc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17ee0:	6c e0       	ldi	r22, 0x0C	; 12
   17ee2:	79 e0       	ldi	r23, 0x09	; 9
   17ee4:	c8 01       	movw	r24, r16
   17ee6:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <fopen>
   17eea:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0xa>
   17eee:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0x9>
    if(plot.fp == NULL)
   17ef2:	89 2b       	or	r24, r25
   17ef4:	b9 f4       	brne	.+46     	; 0x17f24 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17ef6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17efa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17efe:	81 72       	andi	r24, 0x21	; 33
   17f00:	99 27       	eor	r25, r25
   17f02:	89 2b       	or	r24, r25
   17f04:	11 f1       	breq	.+68     	; 0x17f4a <printer_open+0x13c>
        {
            perror("open failed");
   17f06:	8a e9       	ldi	r24, 0x9A	; 154
   17f08:	9d e0       	ldi	r25, 0x0D	; 13
   17f0a:	0e 94 7b 78 	call	0xf0f6	; 0xf0f6 <perror>
            printf("exiting...\n");
   17f0e:	85 e4       	ldi	r24, 0x45	; 69
   17f10:	92 e3       	ldi	r25, 0x32	; 50
   17f12:	a0 e0       	ldi	r26, 0x00	; 0
   17f14:	ed b7       	in	r30, 0x3d	; 61
   17f16:	fe b7       	in	r31, 0x3e	; 62
   17f18:	81 83       	std	Z+1, r24	; 0x01
   17f1a:	92 83       	std	Z+2, r25	; 0x02
   17f1c:	a3 83       	std	Z+3, r26	; 0x03
   17f1e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   17f22:	13 c0       	rjmp	.+38     	; 0x17f4a <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17f24:	61 e0       	ldi	r22, 0x01	; 1
   17f26:	70 e0       	ldi	r23, 0x00	; 0
   17f28:	81 e0       	ldi	r24, 0x01	; 1
   17f2a:	92 e0       	ldi	r25, 0x02	; 2
   17f2c:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   17f30:	90 93 a9 19 	sts	0x19A9, r25	; 0x8019a9 <plot+0xc>
   17f34:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0xb>
    if(plot.buf == NULL)
   17f38:	89 2b       	or	r24, r25
   17f3a:	09 f4       	brne	.+2      	; 0x17f3e <printer_open+0x130>
        printer_close();
   17f3c:	10 df       	rcall	.-480    	; 0x17d5e <printer_close>
    plot.size = 512;
   17f3e:	80 e0       	ldi	r24, 0x00	; 0
   17f40:	92 e0       	ldi	r25, 0x02	; 2
   17f42:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <plot+0x7>
   17f46:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x6>
}
   17f4a:	c3 5a       	subi	r28, 0xA3	; 163
   17f4c:	df 4f       	sbci	r29, 0xFF	; 255
   17f4e:	e6 e0       	ldi	r30, 0x06	; 6
   17f50:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

00017f54 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17f54:	cf 93       	push	r28
   17f56:	df 93       	push	r29
   17f58:	ad b7       	in	r26, 0x3d	; 61
   17f5a:	be b7       	in	r27, 0x3e	; 62
   17f5c:	17 97       	sbiw	r26, 0x07	; 7
   17f5e:	0f b6       	in	r0, 0x3f	; 63
   17f60:	f8 94       	cli
   17f62:	be bf       	out	0x3e, r27	; 62
   17f64:	0f be       	out	0x3f, r0	; 63
   17f66:	ad bf       	out	0x3d, r26	; 61
   17f68:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17f6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f6e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f72:	81 72       	andi	r24, 0x21	; 33
   17f74:	99 27       	eor	r25, r25
   17f76:	89 2b       	or	r24, r25
   17f78:	c1 f0       	breq	.+48     	; 0x17faa <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17f7a:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17f7e:	30 91 9e 19 	lds	r19, 0x199E	; 0x80199e <plot+0x1>
   17f82:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0x2>
   17f86:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x3>
   17f8a:	81 11       	cpse	r24, r1
   17f8c:	0e c0       	rjmp	.+28     	; 0x17faa <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17f8e:	ed b7       	in	r30, 0x3d	; 61
   17f90:	fe b7       	in	r31, 0x3e	; 62
   17f92:	84 83       	std	Z+4, r24	; 0x04
   17f94:	35 83       	std	Z+5, r19	; 0x05
   17f96:	26 83       	std	Z+6, r18	; 0x06
   17f98:	97 83       	std	Z+7, r25	; 0x07
   17f9a:	8a ef       	ldi	r24, 0xFA	; 250
   17f9c:	91 e3       	ldi	r25, 0x31	; 49
   17f9e:	a0 e0       	ldi	r26, 0x00	; 0
   17fa0:	81 83       	std	Z+1, r24	; 0x01
   17fa2:	92 83       	std	Z+2, r25	; 0x02
   17fa4:	a3 83       	std	Z+3, r26	; 0x03
   17fa6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17faa:	ce 01       	movw	r24, r28
   17fac:	88 27       	eor	r24, r24
   17fae:	97 7f       	andi	r25, 0xF7	; 247
   17fb0:	89 2b       	or	r24, r25
   17fb2:	41 f0       	breq	.+16     	; 0x17fc4 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17fb4:	75 de       	rcall	.-790    	; 0x17ca0 <receive_plot_flush>
   17fb6:	89 2b       	or	r24, r25
   17fb8:	09 f4       	brne	.+2      	; 0x17fbc <printer_buffer+0x68>
   17fba:	3f c0       	rjmp	.+126    	; 0x1803a <printer_buffer+0xe6>
            plot.error = 1;
   17fbc:	81 e0       	ldi	r24, 0x01	; 1
   17fbe:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
   17fc2:	3b c0       	rjmp	.+118    	; 0x1803a <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17fc4:	20 91 a8 19 	lds	r18, 0x19A8	; 0x8019a8 <plot+0xb>
   17fc8:	30 91 a9 19 	lds	r19, 0x19A9	; 0x8019a9 <plot+0xc>
   17fcc:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17fd0:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17fd4:	ac 01       	movw	r20, r24
   17fd6:	4f 5f       	subi	r20, 0xFF	; 255
   17fd8:	5f 4f       	sbci	r21, 0xFF	; 255
   17fda:	50 93 a2 19 	sts	0x19A2, r21	; 0x8019a2 <plot+0x5>
   17fde:	40 93 a1 19 	sts	0x19A1, r20	; 0x8019a1 <plot+0x4>
   17fe2:	f9 01       	movw	r30, r18
   17fe4:	e8 0f       	add	r30, r24
   17fe6:	f9 1f       	adc	r31, r25
   17fe8:	c0 83       	st	Z, r28
        plot.count++;
   17fea:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17fee:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17ff2:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17ff6:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17ffa:	01 96       	adiw	r24, 0x01	; 1
   17ffc:	a1 1d       	adc	r26, r1
   17ffe:	b1 1d       	adc	r27, r1
   18000:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <plot>
   18004:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <plot+0x1>
   18008:	a0 93 9f 19 	sts	0x199F, r26	; 0x80199f <plot+0x2>
   1800c:	b0 93 a0 19 	sts	0x19A0, r27	; 0x8019a0 <plot+0x3>

        if(plot.ind >= plot.size)
   18010:	20 91 a1 19 	lds	r18, 0x19A1	; 0x8019a1 <plot+0x4>
   18014:	30 91 a2 19 	lds	r19, 0x19A2	; 0x8019a2 <plot+0x5>
   18018:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x6>
   1801c:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0x7>
   18020:	28 17       	cp	r18, r24
   18022:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   18024:	54 f0       	brlt	.+20     	; 0x1803a <printer_buffer+0xe6>
   18026:	3c de       	rcall	.-904    	; 0x17ca0 <receive_plot_flush>
   18028:	97 ff       	sbrs	r25, 7
   1802a:	03 c0       	rjmp	.+6      	; 0x18032 <printer_buffer+0xde>
                plot.error = 1;
   1802c:	81 e0       	ldi	r24, 0x01	; 1
   1802e:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
            plot.ind  = 0;
   18032:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <plot+0x5>
   18036:	10 92 a1 19 	sts	0x19A1, r1	; 0x8019a1 <plot+0x4>
        }
    }
}
   1803a:	cd b7       	in	r28, 0x3d	; 61
   1803c:	de b7       	in	r29, 0x3e	; 62
   1803e:	27 96       	adiw	r28, 0x07	; 7
   18040:	e2 e0       	ldi	r30, 0x02	; 2
   18042:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00018046 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   18046:	cf 93       	push	r28
   18048:	00 d0       	rcall	.+0      	; 0x1804a <PRINTER_COMMANDS+0x4>
   1804a:	00 d0       	rcall	.+0      	; 0x1804c <PRINTER_COMMANDS+0x6>
   1804c:	1f 92       	push	r1
   1804e:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   18050:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   18054:	90 e0       	ldi	r25, 0x00	; 0
   18056:	0e 94 e8 8c 	call	0x119d0	; 0x119d0 <PRINTER_is_MLA>
   1805a:	89 2b       	or	r24, r25
   1805c:	69 f0       	breq	.+26     	; 0x18078 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1805e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18062:	85 ff       	sbrs	r24, 5
   18064:	22 c0       	rjmp	.+68     	; 0x180aa <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   18066:	8c 2f       	mov	r24, r28
   18068:	90 e0       	ldi	r25, 0x00	; 0
   1806a:	ed b7       	in	r30, 0x3d	; 61
   1806c:	fe b7       	in	r31, 0x3e	; 62
   1806e:	95 83       	std	Z+5, r25	; 0x05
   18070:	84 83       	std	Z+4, r24	; 0x04
   18072:	8e ed       	ldi	r24, 0xDE	; 222
   18074:	91 e3       	ldi	r25, 0x31	; 49
   18076:	13 c0       	rjmp	.+38     	; 0x1809e <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   18078:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1807c:	90 e0       	ldi	r25, 0x00	; 0
   1807e:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <PRINTER_is_MTA>
   18082:	89 2b       	or	r24, r25
   18084:	91 f0       	breq	.+36     	; 0x180aa <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   18086:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1808a:	85 ff       	sbrs	r24, 5
   1808c:	0e c0       	rjmp	.+28     	; 0x180aa <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   1808e:	8c 2f       	mov	r24, r28
   18090:	90 e0       	ldi	r25, 0x00	; 0
   18092:	ed b7       	in	r30, 0x3d	; 61
   18094:	fe b7       	in	r31, 0x3e	; 62
   18096:	95 83       	std	Z+5, r25	; 0x05
   18098:	84 83       	std	Z+4, r24	; 0x04
   1809a:	84 ec       	ldi	r24, 0xC4	; 196
   1809c:	91 e3       	ldi	r25, 0x31	; 49
   1809e:	a0 e0       	ldi	r26, 0x00	; 0
   180a0:	81 83       	std	Z+1, r24	; 0x01
   180a2:	92 83       	std	Z+2, r25	; 0x02
   180a4:	a3 83       	std	Z+3, r26	; 0x03
   180a6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   180aa:	80 e0       	ldi	r24, 0x00	; 0
   180ac:	90 e0       	ldi	r25, 0x00	; 0
   180ae:	0f 90       	pop	r0
   180b0:	0f 90       	pop	r0
   180b2:	0f 90       	pop	r0
   180b4:	0f 90       	pop	r0
   180b6:	0f 90       	pop	r0
   180b8:	cf 91       	pop	r28
   180ba:	08 95       	ret

000180bc <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   180bc:	0f 93       	push	r16
   180be:	1f 93       	push	r17
   180c0:	da 01       	movw	r26, r20
   180c2:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   180c4:	b7 fd       	sbrc	r27, 7
   180c6:	0b c0       	rjmp	.+22     	; 0x180de <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   180c8:	fd 01       	movw	r30, r26
   180ca:	e6 0f       	add	r30, r22
   180cc:	f7 1f       	adc	r31, r23
   180ce:	e8 0f       	add	r30, r24
   180d0:	f9 1f       	adc	r31, r25
   180d2:	00 83       	st	Z, r16
        val >>= 8;
   180d4:	01 2f       	mov	r16, r17
   180d6:	12 2f       	mov	r17, r18
   180d8:	23 2f       	mov	r18, r19
   180da:	33 27       	eor	r19, r19
   180dc:	f2 cf       	rjmp	.-28     	; 0x180c2 <V2B_MSB+0x6>
    }
}
   180de:	1f 91       	pop	r17
   180e0:	0f 91       	pop	r16
   180e2:	08 95       	ret

000180e4 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   180e4:	0f 93       	push	r16
   180e6:	1f 93       	push	r17
   180e8:	fc 01       	movw	r30, r24
   180ea:	e6 0f       	add	r30, r22
   180ec:	f7 1f       	adc	r31, r23
   180ee:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   180f0:	cf 01       	movw	r24, r30
   180f2:	86 1b       	sub	r24, r22
   180f4:	97 0b       	sbc	r25, r23
   180f6:	84 17       	cp	r24, r20
   180f8:	95 07       	cpc	r25, r21
   180fa:	34 f4       	brge	.+12     	; 0x18108 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   180fc:	01 93       	st	Z+, r16
        val >>= 8;
   180fe:	01 2f       	mov	r16, r17
   18100:	12 2f       	mov	r17, r18
   18102:	23 2f       	mov	r18, r19
   18104:	33 27       	eor	r19, r19
   18106:	f4 cf       	rjmp	.-24     	; 0x180f0 <V2B_LSB+0xc>
    }
}
   18108:	1f 91       	pop	r17
   1810a:	0f 91       	pop	r16
   1810c:	08 95       	ret

0001810e <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   1810e:	cf 92       	push	r12
   18110:	df 92       	push	r13
   18112:	ef 92       	push	r14
   18114:	ff 92       	push	r15
   18116:	fc 01       	movw	r30, r24
   18118:	e6 0f       	add	r30, r22
   1811a:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   1811c:	60 e0       	ldi	r22, 0x00	; 0
   1811e:	70 e0       	ldi	r23, 0x00	; 0
   18120:	cb 01       	movw	r24, r22
   18122:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   18124:	9f 01       	movw	r18, r30
   18126:	2a 1b       	sub	r18, r26
   18128:	3b 0b       	sbc	r19, r27
   1812a:	24 17       	cp	r18, r20
   1812c:	35 07       	cpc	r19, r21
   1812e:	4c f4       	brge	.+18     	; 0x18142 <B2V_MSB+0x34>
    {
        val <<= 8;
   18130:	cc 24       	eor	r12, r12
   18132:	d6 2e       	mov	r13, r22
   18134:	e7 2e       	mov	r14, r23
   18136:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   18138:	21 91       	ld	r18, Z+
   1813a:	c7 01       	movw	r24, r14
   1813c:	b6 01       	movw	r22, r12
   1813e:	62 2b       	or	r22, r18
   18140:	f1 cf       	rjmp	.-30     	; 0x18124 <B2V_MSB+0x16>
    }
    return(val);
}
   18142:	ff 90       	pop	r15
   18144:	ef 90       	pop	r14
   18146:	df 90       	pop	r13
   18148:	cf 90       	pop	r12
   1814a:	08 95       	ret

0001814c <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   1814c:	cf 92       	push	r12
   1814e:	df 92       	push	r13
   18150:	ef 92       	push	r14
   18152:	ff 92       	push	r15
   18154:	9c 01       	movw	r18, r24
   18156:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   18158:	60 e0       	ldi	r22, 0x00	; 0
   1815a:	70 e0       	ldi	r23, 0x00	; 0
   1815c:	cb 01       	movw	r24, r22
   1815e:	41 50       	subi	r20, 0x01	; 1
   18160:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   18162:	57 fd       	sbrc	r21, 7
   18164:	0e c0       	rjmp	.+28     	; 0x18182 <B2V_LSB+0x36>
    {
        val <<= 8;
   18166:	cc 24       	eor	r12, r12
   18168:	d6 2e       	mov	r13, r22
   1816a:	e7 2e       	mov	r14, r23
   1816c:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   1816e:	fa 01       	movw	r30, r20
   18170:	ea 0f       	add	r30, r26
   18172:	fb 1f       	adc	r31, r27
   18174:	e2 0f       	add	r30, r18
   18176:	f3 1f       	adc	r31, r19
   18178:	e0 81       	ld	r30, Z
   1817a:	c7 01       	movw	r24, r14
   1817c:	b6 01       	movw	r22, r12
   1817e:	6e 2b       	or	r22, r30
   18180:	ee cf       	rjmp	.-36     	; 0x1815e <B2V_LSB+0x12>
    }
    return(val);
}
   18182:	ff 90       	pop	r15
   18184:	ef 90       	pop	r14
   18186:	df 90       	pop	r13
   18188:	cf 90       	pop	r12
   1818a:	08 95       	ret

0001818c <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   1818c:	cf 93       	push	r28
   1818e:	df 93       	push	r29
   18190:	00 d0       	rcall	.+0      	; 0x18192 <lif_help+0x6>
   18192:	1f 92       	push	r1
   18194:	ec 01       	movw	r28, r24
   18196:	8f eb       	ldi	r24, 0xBF	; 191
   18198:	96 e4       	ldi	r25, 0x46	; 70
   1819a:	a0 e0       	ldi	r26, 0x00	; 0
   1819c:	ed b7       	in	r30, 0x3d	; 61
   1819e:	fe b7       	in	r31, 0x3e	; 62
   181a0:	81 83       	std	Z+1, r24	; 0x01
   181a2:	92 83       	std	Z+2, r25	; 0x02
   181a4:	a3 83       	std	Z+3, r26	; 0x03
   181a6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   181aa:	cd 2b       	or	r28, r29
   181ac:	51 f0       	breq	.+20     	; 0x181c2 <lif_help+0x36>
   181ae:	8b ef       	ldi	r24, 0xFB	; 251
   181b0:	94 e4       	ldi	r25, 0x44	; 68
   181b2:	a0 e0       	ldi	r26, 0x00	; 0
   181b4:	ed b7       	in	r30, 0x3d	; 61
   181b6:	fe b7       	in	r31, 0x3e	; 62
   181b8:	81 83       	std	Z+1, r24	; 0x01
   181ba:	92 83       	std	Z+2, r25	; 0x02
   181bc:	a3 83       	std	Z+3, r26	; 0x03
   181be:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   181c2:	cd b7       	in	r28, 0x3d	; 61
   181c4:	de b7       	in	r29, 0x3e	; 62
   181c6:	23 96       	adiw	r28, 0x03	; 3
   181c8:	e2 e0       	ldi	r30, 0x02	; 2
   181ca:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

000181ce <lif_calloc>:
   181ce:	cf 92       	push	r12
   181d0:	df 92       	push	r13
   181d2:	ef 92       	push	r14
   181d4:	ff 92       	push	r15
   181d6:	cf 93       	push	r28
   181d8:	df 93       	push	r29
   181da:	ad b7       	in	r26, 0x3d	; 61
   181dc:	be b7       	in	r27, 0x3e	; 62
   181de:	17 97       	sbiw	r26, 0x07	; 7
   181e0:	0f b6       	in	r0, 0x3f	; 63
   181e2:	f8 94       	cli
   181e4:	be bf       	out	0x3e, r27	; 62
   181e6:	0f be       	out	0x3f, r0	; 63
   181e8:	ad bf       	out	0x3d, r26	; 61
   181ea:	6b 01       	movw	r12, r22
   181ec:	7c 01       	movw	r14, r24
   181ee:	61 e0       	ldi	r22, 0x01	; 1
   181f0:	70 e0       	ldi	r23, 0x00	; 0
   181f2:	c6 01       	movw	r24, r12
   181f4:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <safecalloc>
   181f8:	ec 01       	movw	r28, r24
   181fa:	89 2b       	or	r24, r25
   181fc:	71 f4       	brne	.+28     	; 0x1821a <lif_calloc+0x4c>
   181fe:	ed b7       	in	r30, 0x3d	; 61
   18200:	fe b7       	in	r31, 0x3e	; 62
   18202:	c4 82       	std	Z+4, r12	; 0x04
   18204:	d5 82       	std	Z+5, r13	; 0x05
   18206:	e6 82       	std	Z+6, r14	; 0x06
   18208:	f7 82       	std	Z+7, r15	; 0x07
   1820a:	84 e9       	ldi	r24, 0x94	; 148
   1820c:	94 e4       	ldi	r25, 0x44	; 68
   1820e:	a0 e0       	ldi	r26, 0x00	; 0
   18210:	81 83       	std	Z+1, r24	; 0x01
   18212:	92 83       	std	Z+2, r25	; 0x02
   18214:	a3 83       	std	Z+3, r26	; 0x03
   18216:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1821a:	ce 01       	movw	r24, r28
   1821c:	ad b7       	in	r26, 0x3d	; 61
   1821e:	be b7       	in	r27, 0x3e	; 62
   18220:	17 96       	adiw	r26, 0x07	; 7
   18222:	0f b6       	in	r0, 0x3f	; 63
   18224:	f8 94       	cli
   18226:	be bf       	out	0x3e, r27	; 62
   18228:	0f be       	out	0x3f, r0	; 63
   1822a:	ad bf       	out	0x3d, r26	; 61
   1822c:	df 91       	pop	r29
   1822e:	cf 91       	pop	r28
   18230:	ff 90       	pop	r15
   18232:	ef 90       	pop	r14
   18234:	df 90       	pop	r13
   18236:	cf 90       	pop	r12
   18238:	08 95       	ret

0001823a <lif_free>:
   1823a:	00 d0       	rcall	.+0      	; 0x1823c <lif_free+0x2>
   1823c:	1f 92       	push	r1
   1823e:	00 97       	sbiw	r24, 0x00	; 0
   18240:	59 f4       	brne	.+22     	; 0x18258 <lif_free+0x1e>
   18242:	8c e7       	ldi	r24, 0x7C	; 124
   18244:	94 e4       	ldi	r25, 0x44	; 68
   18246:	a0 e0       	ldi	r26, 0x00	; 0
   18248:	ed b7       	in	r30, 0x3d	; 61
   1824a:	fe b7       	in	r31, 0x3e	; 62
   1824c:	81 83       	std	Z+1, r24	; 0x01
   1824e:	92 83       	std	Z+2, r25	; 0x02
   18250:	a3 83       	std	Z+3, r26	; 0x03
   18252:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18256:	02 c0       	rjmp	.+4      	; 0x1825c <lif_free+0x22>
   18258:	0e 94 03 28 	call	0x5006	; 0x5006 <safefree>
   1825c:	0f 90       	pop	r0
   1825e:	0f 90       	pop	r0
   18260:	0f 90       	pop	r0
   18262:	08 95       	ret

00018264 <lif_stralloc>:
   18264:	0f 93       	push	r16
   18266:	1f 93       	push	r17
   18268:	cf 93       	push	r28
   1826a:	df 93       	push	r29
   1826c:	ec 01       	movw	r28, r24
   1826e:	fc 01       	movw	r30, r24
   18270:	01 90       	ld	r0, Z+
   18272:	00 20       	and	r0, r0
   18274:	e9 f7       	brne	.-6      	; 0x18270 <lif_stralloc+0xc>
   18276:	bf 01       	movw	r22, r30
   18278:	68 1b       	sub	r22, r24
   1827a:	79 0b       	sbc	r23, r25
   1827c:	6d 5f       	subi	r22, 0xFD	; 253
   1827e:	7f 4f       	sbci	r23, 0xFF	; 255
   18280:	07 2e       	mov	r0, r23
   18282:	00 0c       	add	r0, r0
   18284:	88 0b       	sbc	r24, r24
   18286:	99 0b       	sbc	r25, r25
   18288:	a2 df       	rcall	.-188    	; 0x181ce <lif_calloc>
   1828a:	8c 01       	movw	r16, r24
   1828c:	00 97       	sbiw	r24, 0x00	; 0
   1828e:	19 f0       	breq	.+6      	; 0x18296 <lif_stralloc+0x32>
   18290:	be 01       	movw	r22, r28
   18292:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
   18296:	c8 01       	movw	r24, r16
   18298:	df 91       	pop	r29
   1829a:	cf 91       	pop	r28
   1829c:	1f 91       	pop	r17
   1829e:	0f 91       	pop	r16
   182a0:	08 95       	ret

000182a2 <lif_open>:
   182a2:	ef 92       	push	r14
   182a4:	ff 92       	push	r15
   182a6:	0f 93       	push	r16
   182a8:	1f 93       	push	r17
   182aa:	cf 93       	push	r28
   182ac:	df 93       	push	r29
   182ae:	ad b7       	in	r26, 0x3d	; 61
   182b0:	be b7       	in	r27, 0x3e	; 62
   182b2:	17 97       	sbiw	r26, 0x07	; 7
   182b4:	0f b6       	in	r0, 0x3f	; 63
   182b6:	f8 94       	cli
   182b8:	be bf       	out	0x3e, r27	; 62
   182ba:	0f be       	out	0x3f, r0	; 63
   182bc:	ad bf       	out	0x3d, r26	; 61
   182be:	8c 01       	movw	r16, r24
   182c0:	7b 01       	movw	r14, r22
   182c2:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <fopen>
   182c6:	ec 01       	movw	r28, r24
   182c8:	89 2b       	or	r24, r25
   182ca:	71 f4       	brne	.+28     	; 0x182e8 <lif_open+0x46>
   182cc:	ed b7       	in	r30, 0x3d	; 61
   182ce:	fe b7       	in	r31, 0x3e	; 62
   182d0:	f7 82       	std	Z+7, r15	; 0x07
   182d2:	e6 82       	std	Z+6, r14	; 0x06
   182d4:	15 83       	std	Z+5, r17	; 0x05
   182d6:	04 83       	std	Z+4, r16	; 0x04
   182d8:	87 e5       	ldi	r24, 0x57	; 87
   182da:	94 e4       	ldi	r25, 0x44	; 68
   182dc:	a0 e0       	ldi	r26, 0x00	; 0
   182de:	81 83       	std	Z+1, r24	; 0x01
   182e0:	92 83       	std	Z+2, r25	; 0x02
   182e2:	a3 83       	std	Z+3, r26	; 0x03
   182e4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   182e8:	ce 01       	movw	r24, r28
   182ea:	cd b7       	in	r28, 0x3d	; 61
   182ec:	de b7       	in	r29, 0x3e	; 62
   182ee:	27 96       	adiw	r28, 0x07	; 7
   182f0:	e6 e0       	ldi	r30, 0x06	; 6
   182f2:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

000182f6 <lif_stat>:
   182f6:	0f 93       	push	r16
   182f8:	1f 93       	push	r17
   182fa:	cf 93       	push	r28
   182fc:	df 93       	push	r29
   182fe:	00 d0       	rcall	.+0      	; 0x18300 <lif_stat+0xa>
   18300:	00 d0       	rcall	.+0      	; 0x18302 <lif_stat+0xc>
   18302:	1f 92       	push	r1
   18304:	8c 01       	movw	r16, r24
   18306:	d6 2f       	mov	r29, r22
   18308:	c7 2f       	mov	r28, r23
   1830a:	0e 94 4f 79 	call	0xf29e	; 0xf29e <stat>
   1830e:	97 ff       	sbrs	r25, 7
   18310:	0f c0       	rjmp	.+30     	; 0x18330 <lif_stat+0x3a>
   18312:	ed b7       	in	r30, 0x3d	; 61
   18314:	fe b7       	in	r31, 0x3e	; 62
   18316:	15 83       	std	Z+5, r17	; 0x05
   18318:	04 83       	std	Z+4, r16	; 0x04
   1831a:	8e e3       	ldi	r24, 0x3E	; 62
   1831c:	94 e4       	ldi	r25, 0x44	; 68
   1831e:	a0 e0       	ldi	r26, 0x00	; 0
   18320:	81 83       	std	Z+1, r24	; 0x01
   18322:	92 83       	std	Z+2, r25	; 0x02
   18324:	a3 83       	std	Z+3, r26	; 0x03
   18326:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1832a:	80 e0       	ldi	r24, 0x00	; 0
   1832c:	90 e0       	ldi	r25, 0x00	; 0
   1832e:	02 c0       	rjmp	.+4      	; 0x18334 <lif_stat+0x3e>
   18330:	8d 2f       	mov	r24, r29
   18332:	9c 2f       	mov	r25, r28
   18334:	cd b7       	in	r28, 0x3d	; 61
   18336:	de b7       	in	r29, 0x3e	; 62
   18338:	25 96       	adiw	r28, 0x05	; 5
   1833a:	e4 e0       	ldi	r30, 0x04	; 4
   1833c:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00018340 <lif_seek_msg>:
   18340:	a9 e0       	ldi	r26, 0x09	; 9
   18342:	b0 e0       	ldi	r27, 0x00	; 0
   18344:	e6 ea       	ldi	r30, 0xA6	; 166
   18346:	f1 ec       	ldi	r31, 0xC1	; 193
   18348:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
   1834c:	ec 01       	movw	r28, r24
   1834e:	6a 01       	movw	r12, r20
   18350:	7b 01       	movw	r14, r22
   18352:	89 01       	movw	r16, r18
   18354:	0e 94 89 7a 	call	0xf512	; 0xf512 <ftell>
   18358:	6c 15       	cp	r22, r12
   1835a:	7d 05       	cpc	r23, r13
   1835c:	8e 05       	cpc	r24, r14
   1835e:	9f 05       	cpc	r25, r15
   18360:	19 f4       	brne	.+6      	; 0x18368 <lif_seek_msg+0x28>
   18362:	81 e0       	ldi	r24, 0x01	; 1
   18364:	90 e0       	ldi	r25, 0x00	; 0
   18366:	1b c0       	rjmp	.+54     	; 0x1839e <lif_seek_msg+0x5e>
   18368:	20 e0       	ldi	r18, 0x00	; 0
   1836a:	30 e0       	ldi	r19, 0x00	; 0
   1836c:	b7 01       	movw	r22, r14
   1836e:	a6 01       	movw	r20, r12
   18370:	ce 01       	movw	r24, r28
   18372:	0e 94 0c 7b 	call	0xf618	; 0xf618 <fseek>
   18376:	97 ff       	sbrs	r25, 7
   18378:	f4 cf       	rjmp	.-24     	; 0x18362 <lif_seek_msg+0x22>
   1837a:	ed b7       	in	r30, 0x3d	; 61
   1837c:	fe b7       	in	r31, 0x3e	; 62
   1837e:	c6 82       	std	Z+6, r12	; 0x06
   18380:	d7 82       	std	Z+7, r13	; 0x07
   18382:	e0 86       	std	Z+8, r14	; 0x08
   18384:	f1 86       	std	Z+9, r15	; 0x09
   18386:	15 83       	std	Z+5, r17	; 0x05
   18388:	04 83       	std	Z+4, r16	; 0x04
   1838a:	8d e1       	ldi	r24, 0x1D	; 29
   1838c:	94 e4       	ldi	r25, 0x44	; 68
   1838e:	a0 e0       	ldi	r26, 0x00	; 0
   18390:	81 83       	std	Z+1, r24	; 0x01
   18392:	92 83       	std	Z+2, r25	; 0x02
   18394:	a3 83       	std	Z+3, r26	; 0x03
   18396:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1839a:	80 e0       	ldi	r24, 0x00	; 0
   1839c:	90 e0       	ldi	r25, 0x00	; 0
   1839e:	cd b7       	in	r28, 0x3d	; 61
   183a0:	de b7       	in	r29, 0x3e	; 62
   183a2:	29 96       	adiw	r28, 0x09	; 9
   183a4:	e8 e0       	ldi	r30, 0x08	; 8
   183a6:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

000183aa <lif_read>:
   183aa:	af e0       	ldi	r26, 0x0F	; 15
   183ac:	b0 e0       	ldi	r27, 0x00	; 0
   183ae:	eb ed       	ldi	r30, 0xDB	; 219
   183b0:	f1 ec       	ldi	r31, 0xC1	; 193
   183b2:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
   183b6:	ec 01       	movw	r28, r24
   183b8:	7b 01       	movw	r14, r22
   183ba:	49 01       	movw	r8, r18
   183bc:	5a 01       	movw	r10, r20
   183be:	28 81       	ld	r18, Y
   183c0:	39 81       	ldd	r19, Y+1	; 0x01
   183c2:	b5 01       	movw	r22, r10
   183c4:	a4 01       	movw	r20, r8
   183c6:	8a 81       	ldd	r24, Y+2	; 0x02
   183c8:	9b 81       	ldd	r25, Y+3	; 0x03
   183ca:	ba df       	rcall	.-140    	; 0x18340 <lif_seek_msg>
   183cc:	89 2b       	or	r24, r25
   183ce:	a1 f1       	breq	.+104    	; 0x18438 <lif_read+0x8e>
   183d0:	2a 81       	ldd	r18, Y+2	; 0x02
   183d2:	3b 81       	ldd	r19, Y+3	; 0x03
   183d4:	a8 01       	movw	r20, r16
   183d6:	61 e0       	ldi	r22, 0x01	; 1
   183d8:	70 e0       	ldi	r23, 0x00	; 0
   183da:	c7 01       	movw	r24, r14
   183dc:	0e 94 a0 7b 	call	0xf740	; 0xf740 <fread>
   183e0:	6c 01       	movw	r12, r24
   183e2:	e1 2c       	mov	r14, r1
   183e4:	f1 2c       	mov	r15, r1
   183e6:	b8 01       	movw	r22, r16
   183e8:	01 2e       	mov	r0, r17
   183ea:	00 0c       	add	r0, r0
   183ec:	88 0b       	sbc	r24, r24
   183ee:	99 0b       	sbc	r25, r25
   183f0:	c6 16       	cp	r12, r22
   183f2:	d7 06       	cpc	r13, r23
   183f4:	e8 06       	cpc	r14, r24
   183f6:	f9 06       	cpc	r15, r25
   183f8:	29 f1       	breq	.+74     	; 0x18444 <lif_read+0x9a>
   183fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   183fe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18402:	92 ff       	sbrs	r25, 2
   18404:	1d c0       	rjmp	.+58     	; 0x18440 <lif_read+0x96>
   18406:	ed b7       	in	r30, 0x3d	; 61
   18408:	fe b7       	in	r31, 0x3e	; 62
   1840a:	17 87       	std	Z+15, r17	; 0x0f
   1840c:	06 87       	std	Z+14, r16	; 0x0e
   1840e:	c2 86       	std	Z+10, r12	; 0x0a
   18410:	d3 86       	std	Z+11, r13	; 0x0b
   18412:	e4 86       	std	Z+12, r14	; 0x0c
   18414:	f5 86       	std	Z+13, r15	; 0x0d
   18416:	86 82       	std	Z+6, r8	; 0x06
   18418:	97 82       	std	Z+7, r9	; 0x07
   1841a:	a0 86       	std	Z+8, r10	; 0x08
   1841c:	b1 86       	std	Z+9, r11	; 0x09
   1841e:	88 81       	ld	r24, Y
   18420:	99 81       	ldd	r25, Y+1	; 0x01
   18422:	95 83       	std	Z+5, r25	; 0x05
   18424:	84 83       	std	Z+4, r24	; 0x04
   18426:	81 ee       	ldi	r24, 0xE1	; 225
   18428:	93 e4       	ldi	r25, 0x43	; 67
   1842a:	a0 e0       	ldi	r26, 0x00	; 0
   1842c:	81 83       	std	Z+1, r24	; 0x01
   1842e:	92 83       	std	Z+2, r25	; 0x02
   18430:	a3 83       	std	Z+3, r26	; 0x03
   18432:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18436:	04 c0       	rjmp	.+8      	; 0x18440 <lif_read+0x96>
   18438:	60 e0       	ldi	r22, 0x00	; 0
   1843a:	70 e0       	ldi	r23, 0x00	; 0
   1843c:	cb 01       	movw	r24, r22
   1843e:	02 c0       	rjmp	.+4      	; 0x18444 <lif_read+0x9a>
   18440:	c7 01       	movw	r24, r14
   18442:	b6 01       	movw	r22, r12
   18444:	cd b7       	in	r28, 0x3d	; 61
   18446:	de b7       	in	r29, 0x3e	; 62
   18448:	2f 96       	adiw	r28, 0x0f	; 15
   1844a:	ec e0       	ldi	r30, 0x0C	; 12
   1844c:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

00018450 <lif_write>:
   18450:	8f 92       	push	r8
   18452:	9f 92       	push	r9
   18454:	af 92       	push	r10
   18456:	bf 92       	push	r11
   18458:	ef 92       	push	r14
   1845a:	ff 92       	push	r15
   1845c:	0f 93       	push	r16
   1845e:	1f 93       	push	r17
   18460:	cf 93       	push	r28
   18462:	df 93       	push	r29
   18464:	ad b7       	in	r26, 0x3d	; 61
   18466:	be b7       	in	r27, 0x3e	; 62
   18468:	1d 97       	sbiw	r26, 0x0d	; 13
   1846a:	0f b6       	in	r0, 0x3f	; 63
   1846c:	f8 94       	cli
   1846e:	be bf       	out	0x3e, r27	; 62
   18470:	0f be       	out	0x3f, r0	; 63
   18472:	ad bf       	out	0x3d, r26	; 61
   18474:	7c 01       	movw	r14, r24
   18476:	eb 01       	movw	r28, r22
   18478:	49 01       	movw	r8, r18
   1847a:	5a 01       	movw	r10, r20
   1847c:	fc 01       	movw	r30, r24
   1847e:	20 81       	ld	r18, Z
   18480:	31 81       	ldd	r19, Z+1	; 0x01
   18482:	b5 01       	movw	r22, r10
   18484:	a4 01       	movw	r20, r8
   18486:	82 81       	ldd	r24, Z+2	; 0x02
   18488:	93 81       	ldd	r25, Z+3	; 0x03
   1848a:	5a df       	rcall	.-332    	; 0x18340 <lif_seek_msg>
   1848c:	00 97       	sbiw	r24, 0x00	; 0
   1848e:	81 f1       	breq	.+96     	; 0x184f0 <lif_write+0xa0>
   18490:	f7 01       	movw	r30, r14
   18492:	22 81       	ldd	r18, Z+2	; 0x02
   18494:	33 81       	ldd	r19, Z+3	; 0x03
   18496:	a8 01       	movw	r20, r16
   18498:	61 e0       	ldi	r22, 0x01	; 1
   1849a:	70 e0       	ldi	r23, 0x00	; 0
   1849c:	ce 01       	movw	r24, r28
   1849e:	0e 94 72 7c 	call	0xf8e4	; 0xf8e4 <fwrite>
   184a2:	ec 01       	movw	r28, r24
   184a4:	08 17       	cp	r16, r24
   184a6:	19 07       	cpc	r17, r25
   184a8:	01 f1       	breq	.+64     	; 0x184ea <lif_write+0x9a>
   184aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   184ae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   184b2:	92 ff       	sbrs	r25, 2
   184b4:	1c c0       	rjmp	.+56     	; 0x184ee <lif_write+0x9e>
   184b6:	ed b7       	in	r30, 0x3d	; 61
   184b8:	fe b7       	in	r31, 0x3e	; 62
   184ba:	15 87       	std	Z+13, r17	; 0x0d
   184bc:	04 87       	std	Z+12, r16	; 0x0c
   184be:	d3 87       	std	Z+11, r29	; 0x0b
   184c0:	c2 87       	std	Z+10, r28	; 0x0a
   184c2:	86 82       	std	Z+6, r8	; 0x06
   184c4:	97 82       	std	Z+7, r9	; 0x07
   184c6:	a0 86       	std	Z+8, r10	; 0x08
   184c8:	b1 86       	std	Z+9, r11	; 0x09
   184ca:	f7 01       	movw	r30, r14
   184cc:	80 81       	ld	r24, Z
   184ce:	91 81       	ldd	r25, Z+1	; 0x01
   184d0:	ed b7       	in	r30, 0x3d	; 61
   184d2:	fe b7       	in	r31, 0x3e	; 62
   184d4:	95 83       	std	Z+5, r25	; 0x05
   184d6:	84 83       	std	Z+4, r24	; 0x04
   184d8:	84 ea       	ldi	r24, 0xA4	; 164
   184da:	93 e4       	ldi	r25, 0x43	; 67
   184dc:	a0 e0       	ldi	r26, 0x00	; 0
   184de:	81 83       	std	Z+1, r24	; 0x01
   184e0:	92 83       	std	Z+2, r25	; 0x02
   184e2:	a3 83       	std	Z+3, r26	; 0x03
   184e4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   184e8:	02 c0       	rjmp	.+4      	; 0x184ee <lif_write+0x9e>
   184ea:	c8 01       	movw	r24, r16
   184ec:	01 c0       	rjmp	.+2      	; 0x184f0 <lif_write+0xa0>
   184ee:	ce 01       	movw	r24, r28
   184f0:	ad b7       	in	r26, 0x3d	; 61
   184f2:	be b7       	in	r27, 0x3e	; 62
   184f4:	1d 96       	adiw	r26, 0x0d	; 13
   184f6:	0f b6       	in	r0, 0x3f	; 63
   184f8:	f8 94       	cli
   184fa:	be bf       	out	0x3e, r27	; 62
   184fc:	0f be       	out	0x3f, r0	; 63
   184fe:	ad bf       	out	0x3d, r26	; 61
   18500:	df 91       	pop	r29
   18502:	cf 91       	pop	r28
   18504:	1f 91       	pop	r17
   18506:	0f 91       	pop	r16
   18508:	ff 90       	pop	r15
   1850a:	ef 90       	pop	r14
   1850c:	bf 90       	pop	r11
   1850e:	af 90       	pop	r10
   18510:	9f 90       	pop	r9
   18512:	8f 90       	pop	r8
   18514:	08 95       	ret

00018516 <lif_chars>:
   18516:	80 32       	cpi	r24, 0x20	; 32
   18518:	91 05       	cpc	r25, r1
   1851a:	e1 f0       	breq	.+56     	; 0x18554 <lif_chars+0x3e>
   1851c:	9c 01       	movw	r18, r24
   1851e:	21 56       	subi	r18, 0x61	; 97
   18520:	31 09       	sbc	r19, r1
   18522:	2a 31       	cpi	r18, 0x1A	; 26
   18524:	31 05       	cpc	r19, r1
   18526:	10 f4       	brcc	.+4      	; 0x1852c <lif_chars+0x16>
   18528:	80 97       	sbiw	r24, 0x20	; 32
   1852a:	08 95       	ret
   1852c:	9c 01       	movw	r18, r24
   1852e:	21 54       	subi	r18, 0x41	; 65
   18530:	31 09       	sbc	r19, r1
   18532:	2a 31       	cpi	r18, 0x1A	; 26
   18534:	31 05       	cpc	r19, r1
   18536:	c8 f0       	brcs	.+50     	; 0x1856a <lif_chars+0x54>
   18538:	16 16       	cp	r1, r22
   1853a:	17 06       	cpc	r1, r23
   1853c:	74 f4       	brge	.+28     	; 0x1855a <lif_chars+0x44>
   1853e:	2f 5e       	subi	r18, 0xEF	; 239
   18540:	3f 4f       	sbci	r19, 0xFF	; 255
   18542:	2a 30       	cpi	r18, 0x0A	; 10
   18544:	31 05       	cpc	r19, r1
   18546:	88 f0       	brcs	.+34     	; 0x1856a <lif_chars+0x54>
   18548:	8f 35       	cpi	r24, 0x5F	; 95
   1854a:	91 05       	cpc	r25, r1
   1854c:	49 f0       	breq	.+18     	; 0x18560 <lif_chars+0x4a>
   1854e:	8d 97       	sbiw	r24, 0x2d	; 45
   18550:	21 f4       	brne	.+8      	; 0x1855a <lif_chars+0x44>
   18552:	09 c0       	rjmp	.+18     	; 0x18566 <lif_chars+0x50>
   18554:	80 e2       	ldi	r24, 0x20	; 32
   18556:	90 e0       	ldi	r25, 0x00	; 0
   18558:	08 95       	ret
   1855a:	80 e0       	ldi	r24, 0x00	; 0
   1855c:	90 e0       	ldi	r25, 0x00	; 0
   1855e:	08 95       	ret
   18560:	8f e5       	ldi	r24, 0x5F	; 95
   18562:	90 e0       	ldi	r25, 0x00	; 0
   18564:	08 95       	ret
   18566:	8d e2       	ldi	r24, 0x2D	; 45
   18568:	90 e0       	ldi	r25, 0x00	; 0
   1856a:	08 95       	ret

0001856c <lif_B2S>:
   1856c:	a0 e0       	ldi	r26, 0x00	; 0
   1856e:	b0 e0       	ldi	r27, 0x00	; 0
   18570:	ec eb       	ldi	r30, 0xBC	; 188
   18572:	f2 ec       	ldi	r31, 0xC2	; 194
   18574:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
   18578:	5c 01       	movw	r10, r24
   1857a:	6b 01       	movw	r12, r22
   1857c:	ea 01       	movw	r28, r20
   1857e:	4c 01       	movw	r8, r24
   18580:	ee 24       	eor	r14, r14
   18582:	e3 94       	inc	r14
   18584:	f1 2c       	mov	r15, r1
   18586:	00 e0       	ldi	r16, 0x00	; 0
   18588:	10 e0       	ldi	r17, 0x00	; 0
   1858a:	0c 17       	cp	r16, r28
   1858c:	1d 07       	cpc	r17, r29
   1858e:	6c f4       	brge	.+26     	; 0x185aa <lif_B2S+0x3e>
   18590:	f4 01       	movw	r30, r8
   18592:	81 91       	ld	r24, Z+
   18594:	4f 01       	movw	r8, r30
   18596:	b8 01       	movw	r22, r16
   18598:	90 e0       	ldi	r25, 0x00	; 0
   1859a:	bd df       	rcall	.-134    	; 0x18516 <lif_chars>
   1859c:	89 2b       	or	r24, r25
   1859e:	11 f4       	brne	.+4      	; 0x185a4 <lif_B2S+0x38>
   185a0:	e1 2c       	mov	r14, r1
   185a2:	f1 2c       	mov	r15, r1
   185a4:	0f 5f       	subi	r16, 0xFF	; 255
   185a6:	1f 4f       	sbci	r17, 0xFF	; 255
   185a8:	f0 cf       	rjmp	.-32     	; 0x1858a <lif_B2S+0x1e>
   185aa:	d6 01       	movw	r26, r12
   185ac:	f5 01       	movw	r30, r10
   185ae:	cf 01       	movw	r24, r30
   185b0:	8a 19       	sub	r24, r10
   185b2:	9b 09       	sbc	r25, r11
   185b4:	8c 17       	cp	r24, r28
   185b6:	9d 07       	cpc	r25, r29
   185b8:	1c f4       	brge	.+6      	; 0x185c0 <lif_B2S+0x54>
   185ba:	81 91       	ld	r24, Z+
   185bc:	8d 93       	st	X+, r24
   185be:	f7 cf       	rjmp	.-18     	; 0x185ae <lif_B2S+0x42>
   185c0:	d7 ff       	sbrs	r29, 7
   185c2:	02 c0       	rjmp	.+4      	; 0x185c8 <lif_B2S+0x5c>
   185c4:	c0 e0       	ldi	r28, 0x00	; 0
   185c6:	d0 e0       	ldi	r29, 0x00	; 0
   185c8:	cc 0d       	add	r28, r12
   185ca:	dd 1d       	adc	r29, r13
   185cc:	18 82       	st	Y, r1
   185ce:	c6 01       	movw	r24, r12
   185d0:	0e 94 2a 32 	call	0x6454	; 0x6454 <trim_tail>
   185d4:	c7 01       	movw	r24, r14
   185d6:	cd b7       	in	r28, 0x3d	; 61
   185d8:	de b7       	in	r29, 0x3e	; 62
   185da:	ec e0       	ldi	r30, 0x0C	; 12
   185dc:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

000185e0 <lif_checkname>:
   185e0:	ef 92       	push	r14
   185e2:	ff 92       	push	r15
   185e4:	0f 93       	push	r16
   185e6:	1f 93       	push	r17
   185e8:	cf 93       	push	r28
   185ea:	df 93       	push	r29
   185ec:	7c 01       	movw	r14, r24
   185ee:	ec 01       	movw	r28, r24
   185f0:	01 e0       	ldi	r16, 0x01	; 1
   185f2:	10 e0       	ldi	r17, 0x00	; 0
   185f4:	be 01       	movw	r22, r28
   185f6:	6e 19       	sub	r22, r14
   185f8:	7f 09       	sbc	r23, r15
   185fa:	89 91       	ld	r24, Y+
   185fc:	88 23       	and	r24, r24
   185fe:	39 f0       	breq	.+14     	; 0x1860e <lif_checkname+0x2e>
   18600:	90 e0       	ldi	r25, 0x00	; 0
   18602:	89 df       	rcall	.-238    	; 0x18516 <lif_chars>
   18604:	89 2b       	or	r24, r25
   18606:	b1 f7       	brne	.-20     	; 0x185f4 <lif_checkname+0x14>
   18608:	00 e0       	ldi	r16, 0x00	; 0
   1860a:	10 e0       	ldi	r17, 0x00	; 0
   1860c:	f3 cf       	rjmp	.-26     	; 0x185f4 <lif_checkname+0x14>
   1860e:	c8 01       	movw	r24, r16
   18610:	cd b7       	in	r28, 0x3d	; 61
   18612:	de b7       	in	r29, 0x3e	; 62
   18614:	e6 e0       	ldi	r30, 0x06	; 6
   18616:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0001861a <lif_S2B>:
   1861a:	fb 01       	movw	r30, r22
   1861c:	dc 01       	movw	r26, r24
   1861e:	20 e0       	ldi	r18, 0x00	; 0
   18620:	30 e0       	ldi	r19, 0x00	; 0
   18622:	61 91       	ld	r22, Z+
   18624:	61 11       	cpse	r22, r1
   18626:	05 c0       	rjmp	.+10     	; 0x18632 <lif_S2B+0x18>
   18628:	fc 01       	movw	r30, r24
   1862a:	e2 0f       	add	r30, r18
   1862c:	f3 1f       	adc	r31, r19
   1862e:	60 e2       	ldi	r22, 0x20	; 32
   18630:	08 c0       	rjmp	.+16     	; 0x18642 <lif_S2B+0x28>
   18632:	24 17       	cp	r18, r20
   18634:	35 07       	cpc	r19, r21
   18636:	24 f4       	brge	.+8      	; 0x18640 <lif_S2B+0x26>
   18638:	6d 93       	st	X+, r22
   1863a:	2f 5f       	subi	r18, 0xFF	; 255
   1863c:	3f 4f       	sbci	r19, 0xFF	; 255
   1863e:	f1 cf       	rjmp	.-30     	; 0x18622 <lif_S2B+0x8>
   18640:	08 95       	ret
   18642:	9f 01       	movw	r18, r30
   18644:	28 1b       	sub	r18, r24
   18646:	39 0b       	sbc	r19, r25
   18648:	24 17       	cp	r18, r20
   1864a:	35 07       	cpc	r19, r21
   1864c:	14 f4       	brge	.+4      	; 0x18652 <lif_S2B+0x38>
   1864e:	61 93       	st	Z+, r22
   18650:	f8 cf       	rjmp	.-16     	; 0x18642 <lif_S2B+0x28>
   18652:	08 95       	ret

00018654 <lif_fixname>:
   18654:	a0 e0       	ldi	r26, 0x00	; 0
   18656:	b0 e0       	ldi	r27, 0x00	; 0
   18658:	e0 e3       	ldi	r30, 0x30	; 48
   1865a:	f3 ec       	ldi	r31, 0xC3	; 195
   1865c:	0c 94 f5 e6 	jmp	0x1cdea	; 0x1cdea <__prologue_saves__+0x12>
   18660:	8c 01       	movw	r16, r24
   18662:	cb 01       	movw	r24, r22
   18664:	7a 01       	movw	r14, r20
   18666:	0e 94 1b 77 	call	0xee36	; 0xee36 <basename>
   1866a:	6c 01       	movw	r12, r24
   1866c:	e8 01       	movw	r28, r16
   1866e:	80 e2       	ldi	r24, 0x20	; 32
   18670:	b8 2e       	mov	r11, r24
   18672:	be 01       	movw	r22, r28
   18674:	60 1b       	sub	r22, r16
   18676:	71 0b       	sbc	r23, r17
   18678:	f6 01       	movw	r30, r12
   1867a:	81 91       	ld	r24, Z+
   1867c:	6f 01       	movw	r12, r30
   1867e:	81 11       	cpse	r24, r1
   18680:	02 c0       	rjmp	.+4      	; 0x18686 <lif_fixname+0x32>
   18682:	20 e2       	ldi	r18, 0x20	; 32
   18684:	0e c0       	rjmp	.+28     	; 0x186a2 <lif_fixname+0x4e>
   18686:	1e 14       	cp	r1, r14
   18688:	1f 04       	cpc	r1, r15
   1868a:	dc f7       	brge	.-10     	; 0x18682 <lif_fixname+0x2e>
   1868c:	8e 32       	cpi	r24, 0x2E	; 46
   1868e:	c9 f3       	breq	.-14     	; 0x18682 <lif_fixname+0x2e>
   18690:	90 e0       	ldi	r25, 0x00	; 0
   18692:	41 df       	rcall	.-382    	; 0x18516 <lif_chars>
   18694:	88 23       	and	r24, r24
   18696:	11 f0       	breq	.+4      	; 0x1869c <lif_fixname+0x48>
   18698:	88 83       	st	Y, r24
   1869a:	01 c0       	rjmp	.+2      	; 0x1869e <lif_fixname+0x4a>
   1869c:	b8 82       	st	Y, r11
   1869e:	21 96       	adiw	r28, 0x01	; 1
   186a0:	e8 cf       	rjmp	.-48     	; 0x18672 <lif_fixname+0x1e>
   186a2:	ce 01       	movw	r24, r28
   186a4:	80 1b       	sub	r24, r16
   186a6:	91 0b       	sbc	r25, r17
   186a8:	8e 15       	cp	r24, r14
   186aa:	9f 05       	cpc	r25, r15
   186ac:	14 f4       	brge	.+4      	; 0x186b2 <lif_fixname+0x5e>
   186ae:	29 93       	st	Y+, r18
   186b0:	f8 cf       	rjmp	.-16     	; 0x186a2 <lif_fixname+0x4e>
   186b2:	18 82       	st	Y, r1
   186b4:	f8 01       	movw	r30, r16
   186b6:	01 90       	ld	r0, Z+
   186b8:	00 20       	and	r0, r0
   186ba:	e9 f7       	brne	.-6      	; 0x186b6 <lif_fixname+0x62>
   186bc:	cf 01       	movw	r24, r30
   186be:	01 97       	sbiw	r24, 0x01	; 1
   186c0:	80 1b       	sub	r24, r16
   186c2:	91 0b       	sbc	r25, r17
   186c4:	cd b7       	in	r28, 0x3d	; 61
   186c6:	de b7       	in	r29, 0x3e	; 62
   186c8:	e9 e0       	ldi	r30, 0x09	; 9
   186ca:	0c 94 11 e7 	jmp	0x1ce22	; 0x1ce22 <__epilogue_restores__+0x12>

000186ce <lif_vol2str>:
   186ce:	ef 92       	push	r14
   186d0:	ff 92       	push	r15
   186d2:	0f 93       	push	r16
   186d4:	1f 93       	push	r17
   186d6:	cf 93       	push	r28
   186d8:	df 93       	push	r29
   186da:	7c 01       	movw	r14, r24
   186dc:	eb 01       	movw	r28, r22
   186de:	fc 01       	movw	r30, r24
   186e0:	04 a1       	ldd	r16, Z+36	; 0x24
   186e2:	15 a1       	ldd	r17, Z+37	; 0x25
   186e4:	20 e0       	ldi	r18, 0x00	; 0
   186e6:	30 e0       	ldi	r19, 0x00	; 0
   186e8:	42 e0       	ldi	r20, 0x02	; 2
   186ea:	50 e0       	ldi	r21, 0x00	; 0
   186ec:	60 e0       	ldi	r22, 0x00	; 0
   186ee:	70 e0       	ldi	r23, 0x00	; 0
   186f0:	ce 01       	movw	r24, r28
   186f2:	e4 dc       	rcall	.-1592   	; 0x180bc <V2B_MSB>
   186f4:	b7 01       	movw	r22, r14
   186f6:	6a 5d       	subi	r22, 0xDA	; 218
   186f8:	7f 4f       	sbci	r23, 0xFF	; 255
   186fa:	46 e0       	ldi	r20, 0x06	; 6
   186fc:	50 e0       	ldi	r21, 0x00	; 0
   186fe:	ce 01       	movw	r24, r28
   18700:	02 96       	adiw	r24, 0x02	; 2
   18702:	8b df       	rcall	.-234    	; 0x1861a <lif_S2B>
   18704:	f7 01       	movw	r30, r14
   18706:	05 a5       	ldd	r16, Z+45	; 0x2d
   18708:	16 a5       	ldd	r17, Z+46	; 0x2e
   1870a:	27 a5       	ldd	r18, Z+47	; 0x2f
   1870c:	30 a9       	ldd	r19, Z+48	; 0x30
   1870e:	44 e0       	ldi	r20, 0x04	; 4
   18710:	50 e0       	ldi	r21, 0x00	; 0
   18712:	68 e0       	ldi	r22, 0x08	; 8
   18714:	70 e0       	ldi	r23, 0x00	; 0
   18716:	ce 01       	movw	r24, r28
   18718:	d1 dc       	rcall	.-1630   	; 0x180bc <V2B_MSB>
   1871a:	f7 01       	movw	r30, r14
   1871c:	01 a9       	ldd	r16, Z+49	; 0x31
   1871e:	12 a9       	ldd	r17, Z+50	; 0x32
   18720:	20 e0       	ldi	r18, 0x00	; 0
   18722:	30 e0       	ldi	r19, 0x00	; 0
   18724:	42 e0       	ldi	r20, 0x02	; 2
   18726:	50 e0       	ldi	r21, 0x00	; 0
   18728:	6c e0       	ldi	r22, 0x0C	; 12
   1872a:	70 e0       	ldi	r23, 0x00	; 0
   1872c:	ce 01       	movw	r24, r28
   1872e:	c6 dc       	rcall	.-1652   	; 0x180bc <V2B_MSB>
   18730:	00 e0       	ldi	r16, 0x00	; 0
   18732:	10 e0       	ldi	r17, 0x00	; 0
   18734:	98 01       	movw	r18, r16
   18736:	42 e0       	ldi	r20, 0x02	; 2
   18738:	50 e0       	ldi	r21, 0x00	; 0
   1873a:	6e e0       	ldi	r22, 0x0E	; 14
   1873c:	70 e0       	ldi	r23, 0x00	; 0
   1873e:	ce 01       	movw	r24, r28
   18740:	bd dc       	rcall	.-1670   	; 0x180bc <V2B_MSB>
   18742:	f7 01       	movw	r30, r14
   18744:	05 a9       	ldd	r16, Z+53	; 0x35
   18746:	16 a9       	ldd	r17, Z+54	; 0x36
   18748:	27 a9       	ldd	r18, Z+55	; 0x37
   1874a:	30 ad       	ldd	r19, Z+56	; 0x38
   1874c:	44 e0       	ldi	r20, 0x04	; 4
   1874e:	50 e0       	ldi	r21, 0x00	; 0
   18750:	60 e1       	ldi	r22, 0x10	; 16
   18752:	70 e0       	ldi	r23, 0x00	; 0
   18754:	ce 01       	movw	r24, r28
   18756:	b2 dc       	rcall	.-1692   	; 0x180bc <V2B_MSB>
   18758:	f7 01       	movw	r30, r14
   1875a:	01 ad       	ldd	r16, Z+57	; 0x39
   1875c:	12 ad       	ldd	r17, Z+58	; 0x3a
   1875e:	20 e0       	ldi	r18, 0x00	; 0
   18760:	30 e0       	ldi	r19, 0x00	; 0
   18762:	42 e0       	ldi	r20, 0x02	; 2
   18764:	50 e0       	ldi	r21, 0x00	; 0
   18766:	64 e1       	ldi	r22, 0x14	; 20
   18768:	70 e0       	ldi	r23, 0x00	; 0
   1876a:	ce 01       	movw	r24, r28
   1876c:	a7 dc       	rcall	.-1714   	; 0x180bc <V2B_MSB>
   1876e:	00 e0       	ldi	r16, 0x00	; 0
   18770:	10 e0       	ldi	r17, 0x00	; 0
   18772:	98 01       	movw	r18, r16
   18774:	42 e0       	ldi	r20, 0x02	; 2
   18776:	50 e0       	ldi	r21, 0x00	; 0
   18778:	66 e1       	ldi	r22, 0x16	; 22
   1877a:	70 e0       	ldi	r23, 0x00	; 0
   1877c:	ce 01       	movw	r24, r28
   1877e:	9e dc       	rcall	.-1732   	; 0x180bc <V2B_MSB>
   18780:	f7 01       	movw	r30, r14
   18782:	fd 96       	adiw	r30, 0x3d	; 61
   18784:	00 81       	ld	r16, Z
   18786:	11 81       	ldd	r17, Z+1	; 0x01
   18788:	22 81       	ldd	r18, Z+2	; 0x02
   1878a:	33 81       	ldd	r19, Z+3	; 0x03
   1878c:	44 e0       	ldi	r20, 0x04	; 4
   1878e:	50 e0       	ldi	r21, 0x00	; 0
   18790:	68 e1       	ldi	r22, 0x18	; 24
   18792:	70 e0       	ldi	r23, 0x00	; 0
   18794:	ce 01       	movw	r24, r28
   18796:	92 dc       	rcall	.-1756   	; 0x180bc <V2B_MSB>
   18798:	f7 01       	movw	r30, r14
   1879a:	ef 5b       	subi	r30, 0xBF	; 191
   1879c:	ff 4f       	sbci	r31, 0xFF	; 255
   1879e:	00 81       	ld	r16, Z
   187a0:	11 81       	ldd	r17, Z+1	; 0x01
   187a2:	22 81       	ldd	r18, Z+2	; 0x02
   187a4:	33 81       	ldd	r19, Z+3	; 0x03
   187a6:	44 e0       	ldi	r20, 0x04	; 4
   187a8:	50 e0       	ldi	r21, 0x00	; 0
   187aa:	6c e1       	ldi	r22, 0x1C	; 28
   187ac:	70 e0       	ldi	r23, 0x00	; 0
   187ae:	ce 01       	movw	r24, r28
   187b0:	85 dc       	rcall	.-1782   	; 0x180bc <V2B_MSB>
   187b2:	f7 01       	movw	r30, r14
   187b4:	eb 5b       	subi	r30, 0xBB	; 187
   187b6:	ff 4f       	sbci	r31, 0xFF	; 255
   187b8:	00 81       	ld	r16, Z
   187ba:	11 81       	ldd	r17, Z+1	; 0x01
   187bc:	22 81       	ldd	r18, Z+2	; 0x02
   187be:	33 81       	ldd	r19, Z+3	; 0x03
   187c0:	44 e0       	ldi	r20, 0x04	; 4
   187c2:	50 e0       	ldi	r21, 0x00	; 0
   187c4:	60 e2       	ldi	r22, 0x20	; 32
   187c6:	70 e0       	ldi	r23, 0x00	; 0
   187c8:	ce 01       	movw	r24, r28
   187ca:	78 dc       	rcall	.-1808   	; 0x180bc <V2B_MSB>
   187cc:	de 01       	movw	r26, r28
   187ce:	94 96       	adiw	r26, 0x24	; 36
   187d0:	f7 01       	movw	r30, r14
   187d2:	e7 5b       	subi	r30, 0xB7	; 183
   187d4:	ff 4f       	sbci	r31, 0xFF	; 255
   187d6:	86 e0       	ldi	r24, 0x06	; 6
   187d8:	01 90       	ld	r0, Z+
   187da:	0d 92       	st	X+, r0
   187dc:	8a 95       	dec	r24
   187de:	e1 f7       	brne	.-8      	; 0x187d8 <lif_vol2str+0x10a>
   187e0:	cd b7       	in	r28, 0x3d	; 61
   187e2:	de b7       	in	r29, 0x3e	; 62
   187e4:	e6 e0       	ldi	r30, 0x06	; 6
   187e6:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

000187ea <lif_str2vol>:
   187ea:	0f 93       	push	r16
   187ec:	1f 93       	push	r17
   187ee:	cf 93       	push	r28
   187f0:	df 93       	push	r29
   187f2:	8c 01       	movw	r16, r24
   187f4:	eb 01       	movw	r28, r22
   187f6:	42 e0       	ldi	r20, 0x02	; 2
   187f8:	50 e0       	ldi	r21, 0x00	; 0
   187fa:	60 e0       	ldi	r22, 0x00	; 0
   187fc:	70 e0       	ldi	r23, 0x00	; 0
   187fe:	87 dc       	rcall	.-1778   	; 0x1810e <B2V_MSB>
   18800:	7d a3       	std	Y+37, r23	; 0x25
   18802:	6c a3       	std	Y+36, r22	; 0x24
   18804:	be 01       	movw	r22, r28
   18806:	6a 5d       	subi	r22, 0xDA	; 218
   18808:	7f 4f       	sbci	r23, 0xFF	; 255
   1880a:	46 e0       	ldi	r20, 0x06	; 6
   1880c:	50 e0       	ldi	r21, 0x00	; 0
   1880e:	c8 01       	movw	r24, r16
   18810:	02 96       	adiw	r24, 0x02	; 2
   18812:	ac de       	rcall	.-680    	; 0x1856c <lif_B2S>
   18814:	44 e0       	ldi	r20, 0x04	; 4
   18816:	50 e0       	ldi	r21, 0x00	; 0
   18818:	68 e0       	ldi	r22, 0x08	; 8
   1881a:	70 e0       	ldi	r23, 0x00	; 0
   1881c:	c8 01       	movw	r24, r16
   1881e:	77 dc       	rcall	.-1810   	; 0x1810e <B2V_MSB>
   18820:	6d a7       	std	Y+45, r22	; 0x2d
   18822:	7e a7       	std	Y+46, r23	; 0x2e
   18824:	8f a7       	std	Y+47, r24	; 0x2f
   18826:	98 ab       	std	Y+48, r25	; 0x30
   18828:	42 e0       	ldi	r20, 0x02	; 2
   1882a:	50 e0       	ldi	r21, 0x00	; 0
   1882c:	6c e0       	ldi	r22, 0x0C	; 12
   1882e:	70 e0       	ldi	r23, 0x00	; 0
   18830:	c8 01       	movw	r24, r16
   18832:	6d dc       	rcall	.-1830   	; 0x1810e <B2V_MSB>
   18834:	7a ab       	std	Y+50, r23	; 0x32
   18836:	69 ab       	std	Y+49, r22	; 0x31
   18838:	42 e0       	ldi	r20, 0x02	; 2
   1883a:	50 e0       	ldi	r21, 0x00	; 0
   1883c:	6e e0       	ldi	r22, 0x0E	; 14
   1883e:	70 e0       	ldi	r23, 0x00	; 0
   18840:	c8 01       	movw	r24, r16
   18842:	65 dc       	rcall	.-1846   	; 0x1810e <B2V_MSB>
   18844:	7c ab       	std	Y+52, r23	; 0x34
   18846:	6b ab       	std	Y+51, r22	; 0x33
   18848:	44 e0       	ldi	r20, 0x04	; 4
   1884a:	50 e0       	ldi	r21, 0x00	; 0
   1884c:	60 e1       	ldi	r22, 0x10	; 16
   1884e:	70 e0       	ldi	r23, 0x00	; 0
   18850:	c8 01       	movw	r24, r16
   18852:	5d dc       	rcall	.-1862   	; 0x1810e <B2V_MSB>
   18854:	6d ab       	std	Y+53, r22	; 0x35
   18856:	7e ab       	std	Y+54, r23	; 0x36
   18858:	8f ab       	std	Y+55, r24	; 0x37
   1885a:	98 af       	std	Y+56, r25	; 0x38
   1885c:	42 e0       	ldi	r20, 0x02	; 2
   1885e:	50 e0       	ldi	r21, 0x00	; 0
   18860:	64 e1       	ldi	r22, 0x14	; 20
   18862:	70 e0       	ldi	r23, 0x00	; 0
   18864:	c8 01       	movw	r24, r16
   18866:	53 dc       	rcall	.-1882   	; 0x1810e <B2V_MSB>
   18868:	7a af       	std	Y+58, r23	; 0x3a
   1886a:	69 af       	std	Y+57, r22	; 0x39
   1886c:	42 e0       	ldi	r20, 0x02	; 2
   1886e:	50 e0       	ldi	r21, 0x00	; 0
   18870:	66 e1       	ldi	r22, 0x16	; 22
   18872:	70 e0       	ldi	r23, 0x00	; 0
   18874:	c8 01       	movw	r24, r16
   18876:	4b dc       	rcall	.-1898   	; 0x1810e <B2V_MSB>
   18878:	7c af       	std	Y+60, r23	; 0x3c
   1887a:	6b af       	std	Y+59, r22	; 0x3b
   1887c:	44 e0       	ldi	r20, 0x04	; 4
   1887e:	50 e0       	ldi	r21, 0x00	; 0
   18880:	68 e1       	ldi	r22, 0x18	; 24
   18882:	70 e0       	ldi	r23, 0x00	; 0
   18884:	c8 01       	movw	r24, r16
   18886:	43 dc       	rcall	.-1914   	; 0x1810e <B2V_MSB>
   18888:	fe 01       	movw	r30, r28
   1888a:	fd 96       	adiw	r30, 0x3d	; 61
   1888c:	60 83       	st	Z, r22
   1888e:	71 83       	std	Z+1, r23	; 0x01
   18890:	82 83       	std	Z+2, r24	; 0x02
   18892:	93 83       	std	Z+3, r25	; 0x03
   18894:	44 e0       	ldi	r20, 0x04	; 4
   18896:	50 e0       	ldi	r21, 0x00	; 0
   18898:	6c e1       	ldi	r22, 0x1C	; 28
   1889a:	70 e0       	ldi	r23, 0x00	; 0
   1889c:	c8 01       	movw	r24, r16
   1889e:	37 dc       	rcall	.-1938   	; 0x1810e <B2V_MSB>
   188a0:	fe 01       	movw	r30, r28
   188a2:	ef 5b       	subi	r30, 0xBF	; 191
   188a4:	ff 4f       	sbci	r31, 0xFF	; 255
   188a6:	60 83       	st	Z, r22
   188a8:	71 83       	std	Z+1, r23	; 0x01
   188aa:	82 83       	std	Z+2, r24	; 0x02
   188ac:	93 83       	std	Z+3, r25	; 0x03
   188ae:	44 e0       	ldi	r20, 0x04	; 4
   188b0:	50 e0       	ldi	r21, 0x00	; 0
   188b2:	60 e2       	ldi	r22, 0x20	; 32
   188b4:	70 e0       	ldi	r23, 0x00	; 0
   188b6:	c8 01       	movw	r24, r16
   188b8:	2a dc       	rcall	.-1964   	; 0x1810e <B2V_MSB>
   188ba:	fe 01       	movw	r30, r28
   188bc:	eb 5b       	subi	r30, 0xBB	; 187
   188be:	ff 4f       	sbci	r31, 0xFF	; 255
   188c0:	60 83       	st	Z, r22
   188c2:	71 83       	std	Z+1, r23	; 0x01
   188c4:	82 83       	std	Z+2, r24	; 0x02
   188c6:	93 83       	std	Z+3, r25	; 0x03
   188c8:	de 01       	movw	r26, r28
   188ca:	a7 5b       	subi	r26, 0xB7	; 183
   188cc:	bf 4f       	sbci	r27, 0xFF	; 255
   188ce:	f8 01       	movw	r30, r16
   188d0:	b4 96       	adiw	r30, 0x24	; 36
   188d2:	86 e0       	ldi	r24, 0x06	; 6
   188d4:	01 90       	ld	r0, Z+
   188d6:	0d 92       	st	X+, r0
   188d8:	8a 95       	dec	r24
   188da:	e1 f7       	brne	.-8      	; 0x188d4 <lif_str2vol+0xea>
   188dc:	df 91       	pop	r29
   188de:	cf 91       	pop	r28
   188e0:	1f 91       	pop	r17
   188e2:	0f 91       	pop	r16
   188e4:	08 95       	ret

000188e6 <lif_dir2str>:
   188e6:	ef 92       	push	r14
   188e8:	ff 92       	push	r15
   188ea:	0f 93       	push	r16
   188ec:	1f 93       	push	r17
   188ee:	cf 93       	push	r28
   188f0:	df 93       	push	r29
   188f2:	ec 01       	movw	r28, r24
   188f4:	7b 01       	movw	r14, r22
   188f6:	bc 01       	movw	r22, r24
   188f8:	61 5b       	subi	r22, 0xB1	; 177
   188fa:	7f 4f       	sbci	r23, 0xFF	; 255
   188fc:	4a e0       	ldi	r20, 0x0A	; 10
   188fe:	50 e0       	ldi	r21, 0x00	; 0
   18900:	c7 01       	movw	r24, r14
   18902:	8b de       	rcall	.-746    	; 0x1861a <lif_S2B>
   18904:	fe 01       	movw	r30, r28
   18906:	e6 5a       	subi	r30, 0xA6	; 166
   18908:	ff 4f       	sbci	r31, 0xFF	; 255
   1890a:	00 81       	ld	r16, Z
   1890c:	11 81       	ldd	r17, Z+1	; 0x01
   1890e:	20 e0       	ldi	r18, 0x00	; 0
   18910:	30 e0       	ldi	r19, 0x00	; 0
   18912:	42 e0       	ldi	r20, 0x02	; 2
   18914:	50 e0       	ldi	r21, 0x00	; 0
   18916:	6a e0       	ldi	r22, 0x0A	; 10
   18918:	70 e0       	ldi	r23, 0x00	; 0
   1891a:	c7 01       	movw	r24, r14
   1891c:	cf db       	rcall	.-2146   	; 0x180bc <V2B_MSB>
   1891e:	fe 01       	movw	r30, r28
   18920:	e4 5a       	subi	r30, 0xA4	; 164
   18922:	ff 4f       	sbci	r31, 0xFF	; 255
   18924:	00 81       	ld	r16, Z
   18926:	11 81       	ldd	r17, Z+1	; 0x01
   18928:	22 81       	ldd	r18, Z+2	; 0x02
   1892a:	33 81       	ldd	r19, Z+3	; 0x03
   1892c:	44 e0       	ldi	r20, 0x04	; 4
   1892e:	50 e0       	ldi	r21, 0x00	; 0
   18930:	6c e0       	ldi	r22, 0x0C	; 12
   18932:	70 e0       	ldi	r23, 0x00	; 0
   18934:	c7 01       	movw	r24, r14
   18936:	c2 db       	rcall	.-2172   	; 0x180bc <V2B_MSB>
   18938:	fe 01       	movw	r30, r28
   1893a:	e0 5a       	subi	r30, 0xA0	; 160
   1893c:	ff 4f       	sbci	r31, 0xFF	; 255
   1893e:	00 81       	ld	r16, Z
   18940:	11 81       	ldd	r17, Z+1	; 0x01
   18942:	22 81       	ldd	r18, Z+2	; 0x02
   18944:	33 81       	ldd	r19, Z+3	; 0x03
   18946:	44 e0       	ldi	r20, 0x04	; 4
   18948:	50 e0       	ldi	r21, 0x00	; 0
   1894a:	60 e1       	ldi	r22, 0x10	; 16
   1894c:	70 e0       	ldi	r23, 0x00	; 0
   1894e:	c7 01       	movw	r24, r14
   18950:	b5 db       	rcall	.-2198   	; 0x180bc <V2B_MSB>
   18952:	d7 01       	movw	r26, r14
   18954:	54 96       	adiw	r26, 0x14	; 20
   18956:	fe 01       	movw	r30, r28
   18958:	ec 59       	subi	r30, 0x9C	; 156
   1895a:	ff 4f       	sbci	r31, 0xFF	; 255
   1895c:	86 e0       	ldi	r24, 0x06	; 6
   1895e:	01 90       	ld	r0, Z+
   18960:	0d 92       	st	X+, r0
   18962:	8a 95       	dec	r24
   18964:	e1 f7       	brne	.-8      	; 0x1895e <lif_dir2str+0x78>
   18966:	fe 01       	movw	r30, r28
   18968:	e6 59       	subi	r30, 0x96	; 150
   1896a:	ff 4f       	sbci	r31, 0xFF	; 255
   1896c:	00 81       	ld	r16, Z
   1896e:	11 81       	ldd	r17, Z+1	; 0x01
   18970:	20 e0       	ldi	r18, 0x00	; 0
   18972:	30 e0       	ldi	r19, 0x00	; 0
   18974:	42 e0       	ldi	r20, 0x02	; 2
   18976:	50 e0       	ldi	r21, 0x00	; 0
   18978:	6a e1       	ldi	r22, 0x1A	; 26
   1897a:	70 e0       	ldi	r23, 0x00	; 0
   1897c:	c7 01       	movw	r24, r14
   1897e:	9e db       	rcall	.-2244   	; 0x180bc <V2B_MSB>
   18980:	fe 01       	movw	r30, r28
   18982:	e4 59       	subi	r30, 0x94	; 148
   18984:	ff 4f       	sbci	r31, 0xFF	; 255
   18986:	00 81       	ld	r16, Z
   18988:	11 81       	ldd	r17, Z+1	; 0x01
   1898a:	20 e0       	ldi	r18, 0x00	; 0
   1898c:	30 e0       	ldi	r19, 0x00	; 0
   1898e:	42 e0       	ldi	r20, 0x02	; 2
   18990:	50 e0       	ldi	r21, 0x00	; 0
   18992:	6c e1       	ldi	r22, 0x1C	; 28
   18994:	70 e0       	ldi	r23, 0x00	; 0
   18996:	c7 01       	movw	r24, r14
   18998:	a5 db       	rcall	.-2230   	; 0x180e4 <V2B_LSB>
   1899a:	c2 59       	subi	r28, 0x92	; 146
   1899c:	df 4f       	sbci	r29, 0xFF	; 255
   1899e:	08 81       	ld	r16, Y
   189a0:	19 81       	ldd	r17, Y+1	; 0x01
   189a2:	20 e0       	ldi	r18, 0x00	; 0
   189a4:	30 e0       	ldi	r19, 0x00	; 0
   189a6:	42 e0       	ldi	r20, 0x02	; 2
   189a8:	50 e0       	ldi	r21, 0x00	; 0
   189aa:	6e e1       	ldi	r22, 0x1E	; 30
   189ac:	70 e0       	ldi	r23, 0x00	; 0
   189ae:	c7 01       	movw	r24, r14
   189b0:	99 db       	rcall	.-2254   	; 0x180e4 <V2B_LSB>
   189b2:	cd b7       	in	r28, 0x3d	; 61
   189b4:	de b7       	in	r29, 0x3e	; 62
   189b6:	e6 e0       	ldi	r30, 0x06	; 6
   189b8:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

000189bc <lif_str2dir>:
   189bc:	0f 93       	push	r16
   189be:	1f 93       	push	r17
   189c0:	cf 93       	push	r28
   189c2:	df 93       	push	r29
   189c4:	8c 01       	movw	r16, r24
   189c6:	eb 01       	movw	r28, r22
   189c8:	61 5b       	subi	r22, 0xB1	; 177
   189ca:	7f 4f       	sbci	r23, 0xFF	; 255
   189cc:	4a e0       	ldi	r20, 0x0A	; 10
   189ce:	50 e0       	ldi	r21, 0x00	; 0
   189d0:	cd dd       	rcall	.-1126   	; 0x1856c <lif_B2S>
   189d2:	42 e0       	ldi	r20, 0x02	; 2
   189d4:	50 e0       	ldi	r21, 0x00	; 0
   189d6:	6a e0       	ldi	r22, 0x0A	; 10
   189d8:	70 e0       	ldi	r23, 0x00	; 0
   189da:	c8 01       	movw	r24, r16
   189dc:	98 db       	rcall	.-2256   	; 0x1810e <B2V_MSB>
   189de:	fe 01       	movw	r30, r28
   189e0:	e6 5a       	subi	r30, 0xA6	; 166
   189e2:	ff 4f       	sbci	r31, 0xFF	; 255
   189e4:	71 83       	std	Z+1, r23	; 0x01
   189e6:	60 83       	st	Z, r22
   189e8:	44 e0       	ldi	r20, 0x04	; 4
   189ea:	50 e0       	ldi	r21, 0x00	; 0
   189ec:	6c e0       	ldi	r22, 0x0C	; 12
   189ee:	70 e0       	ldi	r23, 0x00	; 0
   189f0:	c8 01       	movw	r24, r16
   189f2:	8d db       	rcall	.-2278   	; 0x1810e <B2V_MSB>
   189f4:	fe 01       	movw	r30, r28
   189f6:	e4 5a       	subi	r30, 0xA4	; 164
   189f8:	ff 4f       	sbci	r31, 0xFF	; 255
   189fa:	60 83       	st	Z, r22
   189fc:	71 83       	std	Z+1, r23	; 0x01
   189fe:	82 83       	std	Z+2, r24	; 0x02
   18a00:	93 83       	std	Z+3, r25	; 0x03
   18a02:	44 e0       	ldi	r20, 0x04	; 4
   18a04:	50 e0       	ldi	r21, 0x00	; 0
   18a06:	60 e1       	ldi	r22, 0x10	; 16
   18a08:	70 e0       	ldi	r23, 0x00	; 0
   18a0a:	c8 01       	movw	r24, r16
   18a0c:	80 db       	rcall	.-2304   	; 0x1810e <B2V_MSB>
   18a0e:	fe 01       	movw	r30, r28
   18a10:	e0 5a       	subi	r30, 0xA0	; 160
   18a12:	ff 4f       	sbci	r31, 0xFF	; 255
   18a14:	60 83       	st	Z, r22
   18a16:	71 83       	std	Z+1, r23	; 0x01
   18a18:	82 83       	std	Z+2, r24	; 0x02
   18a1a:	93 83       	std	Z+3, r25	; 0x03
   18a1c:	de 01       	movw	r26, r28
   18a1e:	ac 59       	subi	r26, 0x9C	; 156
   18a20:	bf 4f       	sbci	r27, 0xFF	; 255
   18a22:	f8 01       	movw	r30, r16
   18a24:	74 96       	adiw	r30, 0x14	; 20
   18a26:	86 e0       	ldi	r24, 0x06	; 6
   18a28:	01 90       	ld	r0, Z+
   18a2a:	0d 92       	st	X+, r0
   18a2c:	8a 95       	dec	r24
   18a2e:	e1 f7       	brne	.-8      	; 0x18a28 <lif_str2dir+0x6c>
   18a30:	42 e0       	ldi	r20, 0x02	; 2
   18a32:	50 e0       	ldi	r21, 0x00	; 0
   18a34:	6a e1       	ldi	r22, 0x1A	; 26
   18a36:	70 e0       	ldi	r23, 0x00	; 0
   18a38:	c8 01       	movw	r24, r16
   18a3a:	69 db       	rcall	.-2350   	; 0x1810e <B2V_MSB>
   18a3c:	fe 01       	movw	r30, r28
   18a3e:	e6 59       	subi	r30, 0x96	; 150
   18a40:	ff 4f       	sbci	r31, 0xFF	; 255
   18a42:	71 83       	std	Z+1, r23	; 0x01
   18a44:	60 83       	st	Z, r22
   18a46:	42 e0       	ldi	r20, 0x02	; 2
   18a48:	50 e0       	ldi	r21, 0x00	; 0
   18a4a:	6c e1       	ldi	r22, 0x1C	; 28
   18a4c:	70 e0       	ldi	r23, 0x00	; 0
   18a4e:	c8 01       	movw	r24, r16
   18a50:	7d db       	rcall	.-2310   	; 0x1814c <B2V_LSB>
   18a52:	fe 01       	movw	r30, r28
   18a54:	e4 59       	subi	r30, 0x94	; 148
   18a56:	ff 4f       	sbci	r31, 0xFF	; 255
   18a58:	71 83       	std	Z+1, r23	; 0x01
   18a5a:	60 83       	st	Z, r22
   18a5c:	42 e0       	ldi	r20, 0x02	; 2
   18a5e:	50 e0       	ldi	r21, 0x00	; 0
   18a60:	6e e1       	ldi	r22, 0x1E	; 30
   18a62:	70 e0       	ldi	r23, 0x00	; 0
   18a64:	c8 01       	movw	r24, r16
   18a66:	72 db       	rcall	.-2332   	; 0x1814c <B2V_LSB>
   18a68:	c2 59       	subi	r28, 0x92	; 146
   18a6a:	df 4f       	sbci	r29, 0xFF	; 255
   18a6c:	79 83       	std	Y+1, r23	; 0x01
   18a6e:	68 83       	st	Y, r22
   18a70:	df 91       	pop	r29
   18a72:	cf 91       	pop	r28
   18a74:	1f 91       	pop	r17
   18a76:	0f 91       	pop	r16
   18a78:	08 95       	ret

00018a7a <lif_BIN2BCD>:
   18a7a:	6a e0       	ldi	r22, 0x0A	; 10
   18a7c:	0e 94 4c e6 	call	0x1cc98	; 0x1cc98 <__udivmodqi4>
   18a80:	82 95       	swap	r24
   18a82:	80 7f       	andi	r24, 0xF0	; 240
   18a84:	89 2b       	or	r24, r25
   18a86:	08 95       	ret

00018a88 <lif_BCD2BIN>:
   18a88:	28 2f       	mov	r18, r24
   18a8a:	22 95       	swap	r18
   18a8c:	2f 70       	andi	r18, 0x0F	; 15
   18a8e:	8f 70       	andi	r24, 0x0F	; 15
   18a90:	90 e0       	ldi	r25, 0x00	; 0
   18a92:	3a e0       	ldi	r19, 0x0A	; 10
   18a94:	23 9f       	mul	r18, r19
   18a96:	80 0d       	add	r24, r0
   18a98:	91 1d       	adc	r25, r1
   18a9a:	11 24       	eor	r1, r1
   18a9c:	08 95       	ret

00018a9e <lif_time2lifbcd>:
   18a9e:	aa e1       	ldi	r26, 0x1A	; 26
   18aa0:	b0 e0       	ldi	r27, 0x00	; 0
   18aa2:	e5 e5       	ldi	r30, 0x55	; 85
   18aa4:	f5 ec       	ldi	r31, 0xC5	; 197
   18aa6:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
   18aaa:	8b 01       	movw	r16, r22
   18aac:	9c 01       	movw	r18, r24
   18aae:	6f 8b       	std	Y+23, r22	; 0x17
   18ab0:	78 8f       	std	Y+24, r23	; 0x18
   18ab2:	89 8f       	std	Y+25, r24	; 0x19
   18ab4:	9a 8f       	std	Y+26, r25	; 0x1a
   18ab6:	67 2b       	or	r22, r23
   18ab8:	68 2b       	or	r22, r24
   18aba:	69 2b       	or	r22, r25
   18abc:	41 f4       	brne	.+16     	; 0x18ace <lif_time2lifbcd+0x30>
   18abe:	fa 01       	movw	r30, r20
   18ac0:	ca 01       	movw	r24, r20
   18ac2:	06 96       	adiw	r24, 0x06	; 6
   18ac4:	11 92       	st	Z+, r1
   18ac6:	e8 17       	cp	r30, r24
   18ac8:	f9 07       	cpc	r31, r25
   18aca:	e1 f7       	brne	.-8      	; 0x18ac4 <lif_time2lifbcd+0x26>
   18acc:	26 c0       	rjmp	.+76     	; 0x18b1a <lif_time2lifbcd+0x7c>
   18ace:	8a 01       	movw	r16, r20
   18ad0:	be 01       	movw	r22, r28
   18ad2:	6f 5f       	subi	r22, 0xFF	; 255
   18ad4:	7f 4f       	sbci	r23, 0xFF	; 255
   18ad6:	ce 01       	movw	r24, r28
   18ad8:	47 96       	adiw	r24, 0x17	; 23
   18ada:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <gmtime_r>
   18ade:	8b 85       	ldd	r24, Y+11	; 0x0b
   18ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
   18ae2:	64 e6       	ldi	r22, 0x64	; 100
   18ae4:	70 e0       	ldi	r23, 0x00	; 0
   18ae6:	0e 94 6c e6 	call	0x1ccd8	; 0x1ccd8 <__divmodhi4>
   18aea:	c7 df       	rcall	.-114    	; 0x18a7a <lif_BIN2BCD>
   18aec:	f8 01       	movw	r30, r16
   18aee:	80 83       	st	Z, r24
   18af0:	89 85       	ldd	r24, Y+9	; 0x09
   18af2:	8f 5f       	subi	r24, 0xFF	; 255
   18af4:	c2 df       	rcall	.-124    	; 0x18a7a <lif_BIN2BCD>
   18af6:	f8 01       	movw	r30, r16
   18af8:	81 83       	std	Z+1, r24	; 0x01
   18afa:	8f 81       	ldd	r24, Y+7	; 0x07
   18afc:	be df       	rcall	.-132    	; 0x18a7a <lif_BIN2BCD>
   18afe:	f8 01       	movw	r30, r16
   18b00:	82 83       	std	Z+2, r24	; 0x02
   18b02:	8d 81       	ldd	r24, Y+5	; 0x05
   18b04:	ba df       	rcall	.-140    	; 0x18a7a <lif_BIN2BCD>
   18b06:	f8 01       	movw	r30, r16
   18b08:	83 83       	std	Z+3, r24	; 0x03
   18b0a:	8b 81       	ldd	r24, Y+3	; 0x03
   18b0c:	b6 df       	rcall	.-148    	; 0x18a7a <lif_BIN2BCD>
   18b0e:	f8 01       	movw	r30, r16
   18b10:	84 83       	std	Z+4, r24	; 0x04
   18b12:	89 81       	ldd	r24, Y+1	; 0x01
   18b14:	b2 df       	rcall	.-156    	; 0x18a7a <lif_BIN2BCD>
   18b16:	f8 01       	movw	r30, r16
   18b18:	85 83       	std	Z+5, r24	; 0x05
   18b1a:	6a 96       	adiw	r28, 0x1a	; 26
   18b1c:	e4 e0       	ldi	r30, 0x04	; 4
   18b1e:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00018b22 <lif_lifbcd2time>:
   18b22:	a6 e1       	ldi	r26, 0x16	; 22
   18b24:	b0 e0       	ldi	r27, 0x00	; 0
   18b26:	e7 e9       	ldi	r30, 0x97	; 151
   18b28:	f5 ec       	ldi	r31, 0xC5	; 197
   18b2a:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
   18b2e:	8c 01       	movw	r16, r24
   18b30:	7c 01       	movw	r14, r24
   18b32:	5c 01       	movw	r10, r24
   18b34:	26 e0       	ldi	r18, 0x06	; 6
   18b36:	a2 0e       	add	r10, r18
   18b38:	b1 1c       	adc	r11, r1
   18b3a:	cc 24       	eor	r12, r12
   18b3c:	c3 94       	inc	r12
   18b3e:	d1 2c       	mov	r13, r1
   18b40:	f7 01       	movw	r30, r14
   18b42:	81 91       	ld	r24, Z+
   18b44:	7f 01       	movw	r14, r30
   18b46:	a0 df       	rcall	.-192    	; 0x18a88 <lif_BCD2BIN>
   18b48:	89 2b       	or	r24, r25
   18b4a:	11 f0       	breq	.+4      	; 0x18b50 <lif_lifbcd2time+0x2e>
   18b4c:	c1 2c       	mov	r12, r1
   18b4e:	d1 2c       	mov	r13, r1
   18b50:	ea 14       	cp	r14, r10
   18b52:	fb 04       	cpc	r15, r11
   18b54:	a9 f7       	brne	.-22     	; 0x18b40 <lif_lifbcd2time+0x1e>
   18b56:	c1 14       	cp	r12, r1
   18b58:	d1 04       	cpc	r13, r1
   18b5a:	61 f5       	brne	.+88     	; 0x18bb4 <lif_lifbcd2time+0x92>
   18b5c:	f8 01       	movw	r30, r16
   18b5e:	80 81       	ld	r24, Z
   18b60:	93 df       	rcall	.-218    	; 0x18a88 <lif_BCD2BIN>
   18b62:	7c 01       	movw	r14, r24
   18b64:	f8 01       	movw	r30, r16
   18b66:	81 81       	ldd	r24, Z+1	; 0x01
   18b68:	8f df       	rcall	.-226    	; 0x18a88 <lif_BCD2BIN>
   18b6a:	01 97       	sbiw	r24, 0x01	; 1
   18b6c:	f6 e4       	ldi	r31, 0x46	; 70
   18b6e:	ef 16       	cp	r14, r31
   18b70:	f1 04       	cpc	r15, r1
   18b72:	1c f4       	brge	.+6      	; 0x18b7a <lif_lifbcd2time+0x58>
   18b74:	24 e6       	ldi	r18, 0x64	; 100
   18b76:	e2 0e       	add	r14, r18
   18b78:	f1 1c       	adc	r15, r1
   18b7a:	fc 86       	std	Y+12, r15	; 0x0c
   18b7c:	eb 86       	std	Y+11, r14	; 0x0b
   18b7e:	9a 87       	std	Y+10, r25	; 0x0a
   18b80:	89 87       	std	Y+9, r24	; 0x09
   18b82:	f8 01       	movw	r30, r16
   18b84:	82 81       	ldd	r24, Z+2	; 0x02
   18b86:	80 df       	rcall	.-256    	; 0x18a88 <lif_BCD2BIN>
   18b88:	98 87       	std	Y+8, r25	; 0x08
   18b8a:	8f 83       	std	Y+7, r24	; 0x07
   18b8c:	f8 01       	movw	r30, r16
   18b8e:	83 81       	ldd	r24, Z+3	; 0x03
   18b90:	7b df       	rcall	.-266    	; 0x18a88 <lif_BCD2BIN>
   18b92:	9e 83       	std	Y+6, r25	; 0x06
   18b94:	8d 83       	std	Y+5, r24	; 0x05
   18b96:	f8 01       	movw	r30, r16
   18b98:	84 81       	ldd	r24, Z+4	; 0x04
   18b9a:	76 df       	rcall	.-276    	; 0x18a88 <lif_BCD2BIN>
   18b9c:	9c 83       	std	Y+4, r25	; 0x04
   18b9e:	8b 83       	std	Y+3, r24	; 0x03
   18ba0:	f8 01       	movw	r30, r16
   18ba2:	85 81       	ldd	r24, Z+5	; 0x05
   18ba4:	71 df       	rcall	.-286    	; 0x18a88 <lif_BCD2BIN>
   18ba6:	9a 83       	std	Y+2, r25	; 0x02
   18ba8:	89 83       	std	Y+1, r24	; 0x01
   18baa:	ce 01       	movw	r24, r28
   18bac:	01 96       	adiw	r24, 0x01	; 1
   18bae:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <timegm>
   18bb2:	03 c0       	rjmp	.+6      	; 0x18bba <lif_lifbcd2time+0x98>
   18bb4:	60 e0       	ldi	r22, 0x00	; 0
   18bb6:	70 e0       	ldi	r23, 0x00	; 0
   18bb8:	cb 01       	movw	r24, r22
   18bba:	66 96       	adiw	r28, 0x16	; 22
   18bbc:	ea e0       	ldi	r30, 0x0A	; 10
   18bbe:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

00018bc2 <lif_ctime_gmt>:
   18bc2:	a6 e1       	ldi	r26, 0x16	; 22
   18bc4:	b0 e0       	ldi	r27, 0x00	; 0
   18bc6:	e7 ee       	ldi	r30, 0xE7	; 231
   18bc8:	f5 ec       	ldi	r31, 0xC5	; 197
   18bca:	0c 94 fa e6 	jmp	0x1cdf4	; 0x1cdf4 <__prologue_saves__+0x1c>
   18bce:	20 e2       	ldi	r18, 0x20	; 32
   18bd0:	ea ec       	ldi	r30, 0xCA	; 202
   18bd2:	f9 e1       	ldi	r31, 0x19	; 25
   18bd4:	df 01       	movw	r26, r30
   18bd6:	1d 92       	st	X+, r1
   18bd8:	2a 95       	dec	r18
   18bda:	e9 f7       	brne	.-6      	; 0x18bd6 <lif_ctime_gmt+0x14>
   18bdc:	be 01       	movw	r22, r28
   18bde:	6f 5f       	subi	r22, 0xFF	; 255
   18be0:	7f 4f       	sbci	r23, 0xFF	; 255
   18be2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <gmtime_r>
   18be6:	6a ec       	ldi	r22, 0xCA	; 202
   18be8:	79 e1       	ldi	r23, 0x19	; 25
   18bea:	0e 94 ce 3c 	call	0x799c	; 0x799c <asctime_r>
   18bee:	8c 01       	movw	r16, r24
   18bf0:	0e 94 2a 32 	call	0x6454	; 0x6454 <trim_tail>
   18bf4:	c8 01       	movw	r24, r16
   18bf6:	66 96       	adiw	r28, 0x16	; 22
   18bf8:	e4 e0       	ldi	r30, 0x04	; 4
   18bfa:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

00018bfe <lif_lifbcd2timestr>:
   18bfe:	a4 e0       	ldi	r26, 0x04	; 4
   18c00:	b0 e0       	ldi	r27, 0x00	; 0
   18c02:	e5 e0       	ldi	r30, 0x05	; 5
   18c04:	f6 ec       	ldi	r31, 0xC6	; 198
   18c06:	0c 94 fc e6 	jmp	0x1cdf8	; 0x1cdf8 <__prologue_saves__+0x20>
   18c0a:	20 e2       	ldi	r18, 0x20	; 32
   18c0c:	ea ea       	ldi	r30, 0xAA	; 170
   18c0e:	f9 e1       	ldi	r31, 0x19	; 25
   18c10:	df 01       	movw	r26, r30
   18c12:	1d 92       	st	X+, r1
   18c14:	2a 95       	dec	r18
   18c16:	e9 f7       	brne	.-6      	; 0x18c12 <lif_lifbcd2timestr+0x14>
   18c18:	84 df       	rcall	.-248    	; 0x18b22 <lif_lifbcd2time>
   18c1a:	69 83       	std	Y+1, r22	; 0x01
   18c1c:	7a 83       	std	Y+2, r23	; 0x02
   18c1e:	8b 83       	std	Y+3, r24	; 0x03
   18c20:	9c 83       	std	Y+4, r25	; 0x04
   18c22:	67 2b       	or	r22, r23
   18c24:	68 2b       	or	r22, r24
   18c26:	69 2b       	or	r22, r25
   18c28:	29 f0       	breq	.+10     	; 0x18c34 <lif_lifbcd2timestr+0x36>
   18c2a:	ce 01       	movw	r24, r28
   18c2c:	01 96       	adiw	r24, 0x01	; 1
   18c2e:	c9 df       	rcall	.-110    	; 0x18bc2 <lif_ctime_gmt>
   18c30:	bc 01       	movw	r22, r24
   18c32:	02 c0       	rjmp	.+4      	; 0x18c38 <lif_lifbcd2timestr+0x3a>
   18c34:	68 ee       	ldi	r22, 0xE8	; 232
   18c36:	75 e1       	ldi	r23, 0x15	; 21
   18c38:	8a ea       	ldi	r24, 0xAA	; 170
   18c3a:	99 e1       	ldi	r25, 0x19	; 25
   18c3c:	0e 94 4c 31 	call	0x6298	; 0x6298 <strcpy>
   18c40:	8a ea       	ldi	r24, 0xAA	; 170
   18c42:	99 e1       	ldi	r25, 0x19	; 25
   18c44:	24 96       	adiw	r28, 0x04	; 4
   18c46:	e2 e0       	ldi	r30, 0x02	; 2
   18c48:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00018c4c <lif_image_clear>:
   18c4c:	20 e7       	ldi	r18, 0x70	; 112
   18c4e:	fc 01       	movw	r30, r24
   18c50:	11 92       	st	Z+, r1
   18c52:	2a 95       	dec	r18
   18c54:	e9 f7       	brne	.-6      	; 0x18c50 <lif_image_clear+0x4>
   18c56:	08 95       	ret

00018c58 <lif_dir_clear>:
   18c58:	81 5b       	subi	r24, 0xB1	; 177
   18c5a:	9f 4f       	sbci	r25, 0xFF	; 255
   18c5c:	21 e2       	ldi	r18, 0x21	; 33
   18c5e:	fc 01       	movw	r30, r24
   18c60:	11 92       	st	Z+, r1
   18c62:	2a 95       	dec	r18
   18c64:	e9 f7       	brne	.-6      	; 0x18c60 <lif_dir_clear+0x8>
   18c66:	08 95       	ret

00018c68 <lif_vol_clear>:
   18c68:	84 96       	adiw	r24, 0x24	; 36
   18c6a:	2b e2       	ldi	r18, 0x2B	; 43
   18c6c:	fc 01       	movw	r30, r24
   18c6e:	11 92       	st	Z+, r1
   18c70:	2a 95       	dec	r18
   18c72:	e9 f7       	brne	.-6      	; 0x18c6e <lif_vol_clear+0x6>
   18c74:	08 95       	ret

00018c76 <lif_dump_vol>:
   18c76:	cf 93       	push	r28
   18c78:	df 93       	push	r29
   18c7a:	ad b7       	in	r26, 0x3d	; 61
   18c7c:	be b7       	in	r27, 0x3e	; 62
   18c7e:	17 97       	sbiw	r26, 0x07	; 7
   18c80:	0f b6       	in	r0, 0x3f	; 63
   18c82:	f8 94       	cli
   18c84:	be bf       	out	0x3e, r27	; 62
   18c86:	0f be       	out	0x3f, r0	; 63
   18c88:	ad bf       	out	0x3d, r26	; 61
   18c8a:	ec 01       	movw	r28, r24
   18c8c:	ed b7       	in	r30, 0x3d	; 61
   18c8e:	fe b7       	in	r31, 0x3e	; 62
   18c90:	75 83       	std	Z+5, r23	; 0x05
   18c92:	64 83       	std	Z+4, r22	; 0x04
   18c94:	8f e9       	ldi	r24, 0x9F	; 159
   18c96:	93 e4       	ldi	r25, 0x43	; 67
   18c98:	a0 e0       	ldi	r26, 0x00	; 0
   18c9a:	81 83       	std	Z+1, r24	; 0x01
   18c9c:	92 83       	std	Z+2, r25	; 0x02
   18c9e:	a3 83       	std	Z+3, r26	; 0x03
   18ca0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18ca4:	88 81       	ld	r24, Y
   18ca6:	99 81       	ldd	r25, Y+1	; 0x01
   18ca8:	ed b7       	in	r30, 0x3d	; 61
   18caa:	fe b7       	in	r31, 0x3e	; 62
   18cac:	95 83       	std	Z+5, r25	; 0x05
   18cae:	84 83       	std	Z+4, r24	; 0x04
   18cb0:	85 e8       	ldi	r24, 0x85	; 133
   18cb2:	93 e4       	ldi	r25, 0x43	; 67
   18cb4:	a0 e0       	ldi	r26, 0x00	; 0
   18cb6:	81 83       	std	Z+1, r24	; 0x01
   18cb8:	92 83       	std	Z+2, r25	; 0x02
   18cba:	a3 83       	std	Z+3, r26	; 0x03
   18cbc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18cc0:	8c 81       	ldd	r24, Y+4	; 0x04
   18cc2:	9d 81       	ldd	r25, Y+5	; 0x05
   18cc4:	ae 81       	ldd	r26, Y+6	; 0x06
   18cc6:	bf 81       	ldd	r27, Y+7	; 0x07
   18cc8:	ed b7       	in	r30, 0x3d	; 61
   18cca:	fe b7       	in	r31, 0x3e	; 62
   18ccc:	84 83       	std	Z+4, r24	; 0x04
   18cce:	95 83       	std	Z+5, r25	; 0x05
   18cd0:	a6 83       	std	Z+6, r26	; 0x06
   18cd2:	b7 83       	std	Z+7, r27	; 0x07
   18cd4:	88 e6       	ldi	r24, 0x68	; 104
   18cd6:	93 e4       	ldi	r25, 0x43	; 67
   18cd8:	a0 e0       	ldi	r26, 0x00	; 0
   18cda:	81 83       	std	Z+1, r24	; 0x01
   18cdc:	92 83       	std	Z+2, r25	; 0x02
   18cde:	a3 83       	std	Z+3, r26	; 0x03
   18ce0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18ce4:	88 85       	ldd	r24, Y+8	; 0x08
   18ce6:	99 85       	ldd	r25, Y+9	; 0x09
   18ce8:	aa 85       	ldd	r26, Y+10	; 0x0a
   18cea:	bb 85       	ldd	r27, Y+11	; 0x0b
   18cec:	ed b7       	in	r30, 0x3d	; 61
   18cee:	fe b7       	in	r31, 0x3e	; 62
   18cf0:	84 83       	std	Z+4, r24	; 0x04
   18cf2:	95 83       	std	Z+5, r25	; 0x05
   18cf4:	a6 83       	std	Z+6, r26	; 0x06
   18cf6:	b7 83       	std	Z+7, r27	; 0x07
   18cf8:	8b e4       	ldi	r24, 0x4B	; 75
   18cfa:	93 e4       	ldi	r25, 0x43	; 67
   18cfc:	a0 e0       	ldi	r26, 0x00	; 0
   18cfe:	81 83       	std	Z+1, r24	; 0x01
   18d00:	92 83       	std	Z+2, r25	; 0x02
   18d02:	a3 83       	std	Z+3, r26	; 0x03
   18d04:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18d08:	8c 85       	ldd	r24, Y+12	; 0x0c
   18d0a:	9d 85       	ldd	r25, Y+13	; 0x0d
   18d0c:	ae 85       	ldd	r26, Y+14	; 0x0e
   18d0e:	bf 85       	ldd	r27, Y+15	; 0x0f
   18d10:	ed b7       	in	r30, 0x3d	; 61
   18d12:	fe b7       	in	r31, 0x3e	; 62
   18d14:	84 83       	std	Z+4, r24	; 0x04
   18d16:	95 83       	std	Z+5, r25	; 0x05
   18d18:	a6 83       	std	Z+6, r26	; 0x06
   18d1a:	b7 83       	std	Z+7, r27	; 0x07
   18d1c:	8e e2       	ldi	r24, 0x2E	; 46
   18d1e:	93 e4       	ldi	r25, 0x43	; 67
   18d20:	a0 e0       	ldi	r26, 0x00	; 0
   18d22:	81 83       	std	Z+1, r24	; 0x01
   18d24:	92 83       	std	Z+2, r25	; 0x02
   18d26:	a3 83       	std	Z+3, r26	; 0x03
   18d28:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18d2c:	88 89       	ldd	r24, Y+16	; 0x10
   18d2e:	99 89       	ldd	r25, Y+17	; 0x11
   18d30:	aa 89       	ldd	r26, Y+18	; 0x12
   18d32:	bb 89       	ldd	r27, Y+19	; 0x13
   18d34:	ed b7       	in	r30, 0x3d	; 61
   18d36:	fe b7       	in	r31, 0x3e	; 62
   18d38:	84 83       	std	Z+4, r24	; 0x04
   18d3a:	95 83       	std	Z+5, r25	; 0x05
   18d3c:	a6 83       	std	Z+6, r26	; 0x06
   18d3e:	b7 83       	std	Z+7, r27	; 0x07
   18d40:	81 e1       	ldi	r24, 0x11	; 17
   18d42:	93 e4       	ldi	r25, 0x43	; 67
   18d44:	a0 e0       	ldi	r26, 0x00	; 0
   18d46:	81 83       	std	Z+1, r24	; 0x01
   18d48:	92 83       	std	Z+2, r25	; 0x02
   18d4a:	a3 83       	std	Z+3, r26	; 0x03
   18d4c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18d50:	8c 89       	ldd	r24, Y+20	; 0x14
   18d52:	9d 89       	ldd	r25, Y+21	; 0x15
   18d54:	ae 89       	ldd	r26, Y+22	; 0x16
   18d56:	bf 89       	ldd	r27, Y+23	; 0x17
   18d58:	ed b7       	in	r30, 0x3d	; 61
   18d5a:	fe b7       	in	r31, 0x3e	; 62
   18d5c:	84 83       	std	Z+4, r24	; 0x04
   18d5e:	95 83       	std	Z+5, r25	; 0x05
   18d60:	a6 83       	std	Z+6, r26	; 0x06
   18d62:	b7 83       	std	Z+7, r27	; 0x07
   18d64:	84 ef       	ldi	r24, 0xF4	; 244
   18d66:	92 e4       	ldi	r25, 0x42	; 66
   18d68:	a0 e0       	ldi	r26, 0x00	; 0
   18d6a:	81 83       	std	Z+1, r24	; 0x01
   18d6c:	92 83       	std	Z+2, r25	; 0x02
   18d6e:	a3 83       	std	Z+3, r26	; 0x03
   18d70:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18d74:	88 8d       	ldd	r24, Y+24	; 0x18
   18d76:	99 8d       	ldd	r25, Y+25	; 0x19
   18d78:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18d7a:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18d7c:	ed b7       	in	r30, 0x3d	; 61
   18d7e:	fe b7       	in	r31, 0x3e	; 62
   18d80:	84 83       	std	Z+4, r24	; 0x04
   18d82:	95 83       	std	Z+5, r25	; 0x05
   18d84:	a6 83       	std	Z+6, r26	; 0x06
   18d86:	b7 83       	std	Z+7, r27	; 0x07
   18d88:	87 ed       	ldi	r24, 0xD7	; 215
   18d8a:	92 e4       	ldi	r25, 0x42	; 66
   18d8c:	a0 e0       	ldi	r26, 0x00	; 0
   18d8e:	81 83       	std	Z+1, r24	; 0x01
   18d90:	92 83       	std	Z+2, r25	; 0x02
   18d92:	a3 83       	std	Z+3, r26	; 0x03
   18d94:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18d98:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18d9a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18d9c:	09 2e       	mov	r0, r25
   18d9e:	00 0c       	add	r0, r0
   18da0:	aa 0b       	sbc	r26, r26
   18da2:	bb 0b       	sbc	r27, r27
   18da4:	ed b7       	in	r30, 0x3d	; 61
   18da6:	fe b7       	in	r31, 0x3e	; 62
   18da8:	84 83       	std	Z+4, r24	; 0x04
   18daa:	95 83       	std	Z+5, r25	; 0x05
   18dac:	a6 83       	std	Z+6, r26	; 0x06
   18dae:	b7 83       	std	Z+7, r27	; 0x07
   18db0:	8a eb       	ldi	r24, 0xBA	; 186
   18db2:	92 e4       	ldi	r25, 0x42	; 66
   18db4:	a0 e0       	ldi	r26, 0x00	; 0
   18db6:	81 83       	std	Z+1, r24	; 0x01
   18db8:	92 83       	std	Z+2, r25	; 0x02
   18dba:	a3 83       	std	Z+3, r26	; 0x03
   18dbc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18dc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18dc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18dc4:	09 2e       	mov	r0, r25
   18dc6:	00 0c       	add	r0, r0
   18dc8:	aa 0b       	sbc	r26, r26
   18dca:	bb 0b       	sbc	r27, r27
   18dcc:	ed b7       	in	r30, 0x3d	; 61
   18dce:	fe b7       	in	r31, 0x3e	; 62
   18dd0:	84 83       	std	Z+4, r24	; 0x04
   18dd2:	95 83       	std	Z+5, r25	; 0x05
   18dd4:	a6 83       	std	Z+6, r26	; 0x06
   18dd6:	b7 83       	std	Z+7, r27	; 0x07
   18dd8:	8d e9       	ldi	r24, 0x9D	; 157
   18dda:	92 e4       	ldi	r25, 0x42	; 66
   18ddc:	a0 e0       	ldi	r26, 0x00	; 0
   18dde:	81 83       	std	Z+1, r24	; 0x01
   18de0:	92 83       	std	Z+2, r25	; 0x02
   18de2:	a3 83       	std	Z+3, r26	; 0x03
   18de4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18de8:	ce 01       	movw	r24, r28
   18dea:	86 96       	adiw	r24, 0x26	; 38
   18dec:	ed b7       	in	r30, 0x3d	; 61
   18dee:	fe b7       	in	r31, 0x3e	; 62
   18df0:	95 83       	std	Z+5, r25	; 0x05
   18df2:	84 83       	std	Z+4, r24	; 0x04
   18df4:	83 e8       	ldi	r24, 0x83	; 131
   18df6:	92 e4       	ldi	r25, 0x42	; 66
   18df8:	a0 e0       	ldi	r26, 0x00	; 0
   18dfa:	81 83       	std	Z+1, r24	; 0x01
   18dfc:	92 83       	std	Z+2, r25	; 0x02
   18dfe:	a3 83       	std	Z+3, r26	; 0x03
   18e00:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18e04:	8c a1       	ldd	r24, Y+36	; 0x24
   18e06:	9d a1       	ldd	r25, Y+37	; 0x25
   18e08:	ed b7       	in	r30, 0x3d	; 61
   18e0a:	fe b7       	in	r31, 0x3e	; 62
   18e0c:	95 83       	std	Z+5, r25	; 0x05
   18e0e:	84 83       	std	Z+4, r24	; 0x04
   18e10:	87 e6       	ldi	r24, 0x67	; 103
   18e12:	92 e4       	ldi	r25, 0x42	; 66
   18e14:	a0 e0       	ldi	r26, 0x00	; 0
   18e16:	81 83       	std	Z+1, r24	; 0x01
   18e18:	92 83       	std	Z+2, r25	; 0x02
   18e1a:	a3 83       	std	Z+3, r26	; 0x03
   18e1c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18e20:	8d a5       	ldd	r24, Y+45	; 0x2d
   18e22:	9e a5       	ldd	r25, Y+46	; 0x2e
   18e24:	af a5       	ldd	r26, Y+47	; 0x2f
   18e26:	b8 a9       	ldd	r27, Y+48	; 0x30
   18e28:	ed b7       	in	r30, 0x3d	; 61
   18e2a:	fe b7       	in	r31, 0x3e	; 62
   18e2c:	84 83       	std	Z+4, r24	; 0x04
   18e2e:	95 83       	std	Z+5, r25	; 0x05
   18e30:	a6 83       	std	Z+6, r26	; 0x06
   18e32:	b7 83       	std	Z+7, r27	; 0x07
   18e34:	8a e4       	ldi	r24, 0x4A	; 74
   18e36:	92 e4       	ldi	r25, 0x42	; 66
   18e38:	a0 e0       	ldi	r26, 0x00	; 0
   18e3a:	81 83       	std	Z+1, r24	; 0x01
   18e3c:	92 83       	std	Z+2, r25	; 0x02
   18e3e:	a3 83       	std	Z+3, r26	; 0x03
   18e40:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18e44:	8d a9       	ldd	r24, Y+53	; 0x35
   18e46:	9e a9       	ldd	r25, Y+54	; 0x36
   18e48:	af a9       	ldd	r26, Y+55	; 0x37
   18e4a:	b8 ad       	ldd	r27, Y+56	; 0x38
   18e4c:	ed b7       	in	r30, 0x3d	; 61
   18e4e:	fe b7       	in	r31, 0x3e	; 62
   18e50:	84 83       	std	Z+4, r24	; 0x04
   18e52:	95 83       	std	Z+5, r25	; 0x05
   18e54:	a6 83       	std	Z+6, r26	; 0x06
   18e56:	b7 83       	std	Z+7, r27	; 0x07
   18e58:	8d e2       	ldi	r24, 0x2D	; 45
   18e5a:	92 e4       	ldi	r25, 0x42	; 66
   18e5c:	a0 e0       	ldi	r26, 0x00	; 0
   18e5e:	81 83       	std	Z+1, r24	; 0x01
   18e60:	92 83       	std	Z+2, r25	; 0x02
   18e62:	a3 83       	std	Z+3, r26	; 0x03
   18e64:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18e68:	89 a9       	ldd	r24, Y+49	; 0x31
   18e6a:	9a a9       	ldd	r25, Y+50	; 0x32
   18e6c:	ed b7       	in	r30, 0x3d	; 61
   18e6e:	fe b7       	in	r31, 0x3e	; 62
   18e70:	95 83       	std	Z+5, r25	; 0x05
   18e72:	84 83       	std	Z+4, r24	; 0x04
   18e74:	81 e1       	ldi	r24, 0x11	; 17
   18e76:	92 e4       	ldi	r25, 0x42	; 66
   18e78:	a0 e0       	ldi	r26, 0x00	; 0
   18e7a:	81 83       	std	Z+1, r24	; 0x01
   18e7c:	92 83       	std	Z+2, r25	; 0x02
   18e7e:	a3 83       	std	Z+3, r26	; 0x03
   18e80:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18e84:	89 ad       	ldd	r24, Y+57	; 0x39
   18e86:	9a ad       	ldd	r25, Y+58	; 0x3a
   18e88:	ed b7       	in	r30, 0x3d	; 61
   18e8a:	fe b7       	in	r31, 0x3e	; 62
   18e8c:	95 83       	std	Z+5, r25	; 0x05
   18e8e:	84 83       	std	Z+4, r24	; 0x04
   18e90:	85 ef       	ldi	r24, 0xF5	; 245
   18e92:	91 e4       	ldi	r25, 0x41	; 65
   18e94:	a0 e0       	ldi	r26, 0x00	; 0
   18e96:	81 83       	std	Z+1, r24	; 0x01
   18e98:	92 83       	std	Z+2, r25	; 0x02
   18e9a:	a3 83       	std	Z+3, r26	; 0x03
   18e9c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18ea0:	ce 01       	movw	r24, r28
   18ea2:	87 5b       	subi	r24, 0xB7	; 183
   18ea4:	9f 4f       	sbci	r25, 0xFF	; 255
   18ea6:	ab de       	rcall	.-682    	; 0x18bfe <lif_lifbcd2timestr>
   18ea8:	ed b7       	in	r30, 0x3d	; 61
   18eaa:	fe b7       	in	r31, 0x3e	; 62
   18eac:	95 83       	std	Z+5, r25	; 0x05
   18eae:	84 83       	std	Z+4, r24	; 0x04
   18eb0:	8b ed       	ldi	r24, 0xDB	; 219
   18eb2:	91 e4       	ldi	r25, 0x41	; 65
   18eb4:	a0 e0       	ldi	r26, 0x00	; 0
   18eb6:	81 83       	std	Z+1, r24	; 0x01
   18eb8:	92 83       	std	Z+2, r25	; 0x02
   18eba:	a3 83       	std	Z+3, r26	; 0x03
   18ebc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18ec0:	ce 01       	movw	r24, r28
   18ec2:	81 5b       	subi	r24, 0xB1	; 177
   18ec4:	9f 4f       	sbci	r25, 0xFF	; 255
   18ec6:	ed b7       	in	r30, 0x3d	; 61
   18ec8:	fe b7       	in	r31, 0x3e	; 62
   18eca:	95 83       	std	Z+5, r25	; 0x05
   18ecc:	84 83       	std	Z+4, r24	; 0x04
   18ece:	81 ec       	ldi	r24, 0xC1	; 193
   18ed0:	91 e4       	ldi	r25, 0x41	; 65
   18ed2:	a0 e0       	ldi	r26, 0x00	; 0
   18ed4:	81 83       	std	Z+1, r24	; 0x01
   18ed6:	92 83       	std	Z+2, r25	; 0x02
   18ed8:	a3 83       	std	Z+3, r26	; 0x03
   18eda:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18ede:	fe 01       	movw	r30, r28
   18ee0:	e6 5a       	subi	r30, 0xA6	; 166
   18ee2:	ff 4f       	sbci	r31, 0xFF	; 255
   18ee4:	80 81       	ld	r24, Z
   18ee6:	91 81       	ldd	r25, Z+1	; 0x01
   18ee8:	ed b7       	in	r30, 0x3d	; 61
   18eea:	fe b7       	in	r31, 0x3e	; 62
   18eec:	95 83       	std	Z+5, r25	; 0x05
   18eee:	84 83       	std	Z+4, r24	; 0x04
   18ef0:	85 ea       	ldi	r24, 0xA5	; 165
   18ef2:	91 e4       	ldi	r25, 0x41	; 65
   18ef4:	a0 e0       	ldi	r26, 0x00	; 0
   18ef6:	81 83       	std	Z+1, r24	; 0x01
   18ef8:	92 83       	std	Z+2, r25	; 0x02
   18efa:	a3 83       	std	Z+3, r26	; 0x03
   18efc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18f00:	fe 01       	movw	r30, r28
   18f02:	e6 59       	subi	r30, 0x96	; 150
   18f04:	ff 4f       	sbci	r31, 0xFF	; 255
   18f06:	80 81       	ld	r24, Z
   18f08:	91 81       	ldd	r25, Z+1	; 0x01
   18f0a:	ed b7       	in	r30, 0x3d	; 61
   18f0c:	fe b7       	in	r31, 0x3e	; 62
   18f0e:	95 83       	std	Z+5, r25	; 0x05
   18f10:	84 83       	std	Z+4, r24	; 0x04
   18f12:	89 e8       	ldi	r24, 0x89	; 137
   18f14:	91 e4       	ldi	r25, 0x41	; 65
   18f16:	a0 e0       	ldi	r26, 0x00	; 0
   18f18:	81 83       	std	Z+1, r24	; 0x01
   18f1a:	92 83       	std	Z+2, r25	; 0x02
   18f1c:	a3 83       	std	Z+3, r26	; 0x03
   18f1e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18f22:	fe 01       	movw	r30, r28
   18f24:	e4 5a       	subi	r30, 0xA4	; 164
   18f26:	ff 4f       	sbci	r31, 0xFF	; 255
   18f28:	80 81       	ld	r24, Z
   18f2a:	91 81       	ldd	r25, Z+1	; 0x01
   18f2c:	a2 81       	ldd	r26, Z+2	; 0x02
   18f2e:	b3 81       	ldd	r27, Z+3	; 0x03
   18f30:	ed b7       	in	r30, 0x3d	; 61
   18f32:	fe b7       	in	r31, 0x3e	; 62
   18f34:	84 83       	std	Z+4, r24	; 0x04
   18f36:	95 83       	std	Z+5, r25	; 0x05
   18f38:	a6 83       	std	Z+6, r26	; 0x06
   18f3a:	b7 83       	std	Z+7, r27	; 0x07
   18f3c:	8c e6       	ldi	r24, 0x6C	; 108
   18f3e:	91 e4       	ldi	r25, 0x41	; 65
   18f40:	a0 e0       	ldi	r26, 0x00	; 0
   18f42:	81 83       	std	Z+1, r24	; 0x01
   18f44:	92 83       	std	Z+2, r25	; 0x02
   18f46:	a3 83       	std	Z+3, r26	; 0x03
   18f48:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18f4c:	fe 01       	movw	r30, r28
   18f4e:	e0 5a       	subi	r30, 0xA0	; 160
   18f50:	ff 4f       	sbci	r31, 0xFF	; 255
   18f52:	80 81       	ld	r24, Z
   18f54:	91 81       	ldd	r25, Z+1	; 0x01
   18f56:	a2 81       	ldd	r26, Z+2	; 0x02
   18f58:	b3 81       	ldd	r27, Z+3	; 0x03
   18f5a:	ed b7       	in	r30, 0x3d	; 61
   18f5c:	fe b7       	in	r31, 0x3e	; 62
   18f5e:	84 83       	std	Z+4, r24	; 0x04
   18f60:	95 83       	std	Z+5, r25	; 0x05
   18f62:	a6 83       	std	Z+6, r26	; 0x06
   18f64:	b7 83       	std	Z+7, r27	; 0x07
   18f66:	8f e4       	ldi	r24, 0x4F	; 79
   18f68:	91 e4       	ldi	r25, 0x41	; 65
   18f6a:	a0 e0       	ldi	r26, 0x00	; 0
   18f6c:	81 83       	std	Z+1, r24	; 0x01
   18f6e:	92 83       	std	Z+2, r25	; 0x02
   18f70:	a3 83       	std	Z+3, r26	; 0x03
   18f72:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18f76:	fe 01       	movw	r30, r28
   18f78:	e4 59       	subi	r30, 0x94	; 148
   18f7a:	ff 4f       	sbci	r31, 0xFF	; 255
   18f7c:	80 81       	ld	r24, Z
   18f7e:	91 81       	ldd	r25, Z+1	; 0x01
   18f80:	a0 e0       	ldi	r26, 0x00	; 0
   18f82:	b0 e0       	ldi	r27, 0x00	; 0
   18f84:	ed b7       	in	r30, 0x3d	; 61
   18f86:	fe b7       	in	r31, 0x3e	; 62
   18f88:	84 83       	std	Z+4, r24	; 0x04
   18f8a:	95 83       	std	Z+5, r25	; 0x05
   18f8c:	a6 83       	std	Z+6, r26	; 0x06
   18f8e:	b7 83       	std	Z+7, r27	; 0x07
   18f90:	82 e3       	ldi	r24, 0x32	; 50
   18f92:	91 e4       	ldi	r25, 0x41	; 65
   18f94:	a0 e0       	ldi	r26, 0x00	; 0
   18f96:	81 83       	std	Z+1, r24	; 0x01
   18f98:	92 83       	std	Z+2, r25	; 0x02
   18f9a:	a3 83       	std	Z+3, r26	; 0x03
   18f9c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18fa0:	fe 01       	movw	r30, r28
   18fa2:	e2 59       	subi	r30, 0x92	; 146
   18fa4:	ff 4f       	sbci	r31, 0xFF	; 255
   18fa6:	80 81       	ld	r24, Z
   18fa8:	91 81       	ldd	r25, Z+1	; 0x01
   18faa:	ed b7       	in	r30, 0x3d	; 61
   18fac:	fe b7       	in	r31, 0x3e	; 62
   18fae:	95 83       	std	Z+5, r25	; 0x05
   18fb0:	84 83       	std	Z+4, r24	; 0x04
   18fb2:	86 e1       	ldi	r24, 0x16	; 22
   18fb4:	91 e4       	ldi	r25, 0x41	; 65
   18fb6:	a0 e0       	ldi	r26, 0x00	; 0
   18fb8:	81 83       	std	Z+1, r24	; 0x01
   18fba:	92 83       	std	Z+2, r25	; 0x02
   18fbc:	a3 83       	std	Z+3, r26	; 0x03
   18fbe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18fc2:	ce 01       	movw	r24, r28
   18fc4:	8c 59       	subi	r24, 0x9C	; 156
   18fc6:	9f 4f       	sbci	r25, 0xFF	; 255
   18fc8:	1a de       	rcall	.-972    	; 0x18bfe <lif_lifbcd2timestr>
   18fca:	ed b7       	in	r30, 0x3d	; 61
   18fcc:	fe b7       	in	r31, 0x3e	; 62
   18fce:	95 83       	std	Z+5, r25	; 0x05
   18fd0:	84 83       	std	Z+4, r24	; 0x04
   18fd2:	8c ef       	ldi	r24, 0xFC	; 252
   18fd4:	90 e4       	ldi	r25, 0x40	; 64
   18fd6:	a0 e0       	ldi	r26, 0x00	; 0
   18fd8:	81 83       	std	Z+1, r24	; 0x01
   18fda:	92 83       	std	Z+2, r25	; 0x02
   18fdc:	a3 83       	std	Z+3, r26	; 0x03
   18fde:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18fe2:	8a ef       	ldi	r24, 0xFA	; 250
   18fe4:	90 e4       	ldi	r25, 0x40	; 64
   18fe6:	a0 e0       	ldi	r26, 0x00	; 0
   18fe8:	ed b7       	in	r30, 0x3d	; 61
   18fea:	fe b7       	in	r31, 0x3e	; 62
   18fec:	81 83       	std	Z+1, r24	; 0x01
   18fee:	92 83       	std	Z+2, r25	; 0x02
   18ff0:	a3 83       	std	Z+3, r26	; 0x03
   18ff2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   18ff6:	cd b7       	in	r28, 0x3d	; 61
   18ff8:	de b7       	in	r29, 0x3e	; 62
   18ffa:	27 96       	adiw	r28, 0x07	; 7
   18ffc:	e2 e0       	ldi	r30, 0x02	; 2
   18ffe:	0c 94 18 e7 	jmp	0x1ce30	; 0x1ce30 <__epilogue_restores__+0x20>

00019002 <lif_check_volume>:
   19002:	0f 93       	push	r16
   19004:	1f 93       	push	r17
   19006:	cf 93       	push	r28
   19008:	df 93       	push	r29
   1900a:	ad b7       	in	r26, 0x3d	; 61
   1900c:	be b7       	in	r27, 0x3e	; 62
   1900e:	17 97       	sbiw	r26, 0x07	; 7
   19010:	0f b6       	in	r0, 0x3f	; 63
   19012:	f8 94       	cli
   19014:	be bf       	out	0x3e, r27	; 62
   19016:	0f be       	out	0x3f, r0	; 63
   19018:	ad bf       	out	0x3d, r26	; 61
   1901a:	ec 01       	movw	r28, r24
   1901c:	86 96       	adiw	r24, 0x26	; 38
   1901e:	e0 da       	rcall	.-2624   	; 0x185e0 <lif_checkname>
   19020:	89 2b       	or	r24, r25
   19022:	89 f4       	brne	.+34     	; 0x19046 <lif_check_volume+0x44>
   19024:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19028:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1902c:	92 ff       	sbrs	r25, 2
   1902e:	0e c0       	rjmp	.+28     	; 0x1904c <lif_check_volume+0x4a>
   19030:	8b ed       	ldi	r24, 0xDB	; 219
   19032:	90 e4       	ldi	r25, 0x40	; 64
   19034:	a0 e0       	ldi	r26, 0x00	; 0
   19036:	ed b7       	in	r30, 0x3d	; 61
   19038:	fe b7       	in	r31, 0x3e	; 62
   1903a:	81 83       	std	Z+1, r24	; 0x01
   1903c:	92 83       	std	Z+2, r25	; 0x02
   1903e:	a3 83       	std	Z+3, r26	; 0x03
   19040:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   19044:	03 c0       	rjmp	.+6      	; 0x1904c <lif_check_volume+0x4a>
   19046:	81 e0       	ldi	r24, 0x01	; 1
   19048:	90 e0       	ldi	r25, 0x00	; 0
   1904a:	02 c0       	rjmp	.+4      	; 0x19050 <lif_check_volume+0x4e>
   1904c:	80 e0       	ldi	r24, 0x00	; 0
   1904e:	90 e0       	ldi	r25, 0x00	; 0
   19050:	29 a9       	ldd	r18, Y+49	; 0x31
   19052:	3a a9       	ldd	r19, Y+50	; 0x32
   19054:	21 15       	cp	r18, r1
   19056:	f0 e1       	ldi	r31, 0x10	; 16
   19058:	3f 07       	cpc	r19, r31
   1905a:	a1 f0       	breq	.+40     	; 0x19084 <lif_check_volume+0x82>
   1905c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19060:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19064:	92 ff       	sbrs	r25, 2
   19066:	0c c0       	rjmp	.+24     	; 0x19080 <lif_check_volume+0x7e>
   19068:	ed b7       	in	r30, 0x3d	; 61
   1906a:	fe b7       	in	r31, 0x3e	; 62
   1906c:	35 83       	std	Z+5, r19	; 0x05
   1906e:	24 83       	std	Z+4, r18	; 0x04
   19070:	82 ea       	ldi	r24, 0xA2	; 162
   19072:	90 e4       	ldi	r25, 0x40	; 64
   19074:	a0 e0       	ldi	r26, 0x00	; 0
   19076:	81 83       	std	Z+1, r24	; 0x01
   19078:	92 83       	std	Z+2, r25	; 0x02
   1907a:	a3 83       	std	Z+3, r26	; 0x03
   1907c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   19080:	80 e0       	ldi	r24, 0x00	; 0
   19082:	90 e0       	ldi	r25, 0x00	; 0
   19084:	29 ad       	ldd	r18, Y+57	; 0x39
   19086:	3a ad       	ldd	r19, Y+58	; 0x3a
   19088:	22 30       	cpi	r18, 0x02	; 2
   1908a:	31 05       	cpc	r19, r1
   1908c:	a0 f0       	brcs	.+40     	; 0x190b6 <lif_check_volume+0xb4>
   1908e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19092:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19096:	92 ff       	sbrs	r25, 2
   19098:	0c c0       	rjmp	.+24     	; 0x190b2 <lif_check_volume+0xb0>
   1909a:	ed b7       	in	r30, 0x3d	; 61
   1909c:	fe b7       	in	r31, 0x3e	; 62
   1909e:	35 83       	std	Z+5, r19	; 0x05
   190a0:	24 83       	std	Z+4, r18	; 0x04
   190a2:	8a e8       	ldi	r24, 0x8A	; 138
   190a4:	90 e4       	ldi	r25, 0x40	; 64
   190a6:	a0 e0       	ldi	r26, 0x00	; 0
   190a8:	81 83       	std	Z+1, r24	; 0x01
   190aa:	92 83       	std	Z+2, r25	; 0x02
   190ac:	a3 83       	std	Z+3, r26	; 0x03
   190ae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   190b2:	80 e0       	ldi	r24, 0x00	; 0
   190b4:	90 e0       	ldi	r25, 0x00	; 0
   190b6:	2b a9       	ldd	r18, Y+51	; 0x33
   190b8:	3c a9       	ldd	r19, Y+52	; 0x34
   190ba:	23 2b       	or	r18, r19
   190bc:	91 f0       	breq	.+36     	; 0x190e2 <lif_check_volume+0xe0>
   190be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190c6:	92 ff       	sbrs	r25, 2
   190c8:	0a c0       	rjmp	.+20     	; 0x190de <lif_check_volume+0xdc>
   190ca:	81 e5       	ldi	r24, 0x51	; 81
   190cc:	90 e4       	ldi	r25, 0x40	; 64
   190ce:	a0 e0       	ldi	r26, 0x00	; 0
   190d0:	ed b7       	in	r30, 0x3d	; 61
   190d2:	fe b7       	in	r31, 0x3e	; 62
   190d4:	81 83       	std	Z+1, r24	; 0x01
   190d6:	92 83       	std	Z+2, r25	; 0x02
   190d8:	a3 83       	std	Z+3, r26	; 0x03
   190da:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   190de:	80 e0       	ldi	r24, 0x00	; 0
   190e0:	90 e0       	ldi	r25, 0x00	; 0
   190e2:	2b ad       	ldd	r18, Y+59	; 0x3b
   190e4:	3c ad       	ldd	r19, Y+60	; 0x3c
   190e6:	23 2b       	or	r18, r19
   190e8:	91 f0       	breq	.+36     	; 0x1910e <lif_check_volume+0x10c>
   190ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190f2:	92 ff       	sbrs	r25, 2
   190f4:	0a c0       	rjmp	.+20     	; 0x1910a <lif_check_volume+0x108>
   190f6:	88 e1       	ldi	r24, 0x18	; 24
   190f8:	90 e4       	ldi	r25, 0x40	; 64
   190fa:	a0 e0       	ldi	r26, 0x00	; 0
   190fc:	ed b7       	in	r30, 0x3d	; 61
   190fe:	fe b7       	in	r31, 0x3e	; 62
   19100:	81 83       	std	Z+1, r24	; 0x01
   19102:	92 83       	std	Z+2, r25	; 0x02
   19104:	a3 83       	std	Z+3, r26	; 0x03
   19106:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1910a:	80 e0       	ldi	r24, 0x00	; 0
   1910c:	90 e0       	ldi	r25, 0x00	; 0
   1910e:	4d a5       	ldd	r20, Y+45	; 0x2d
   19110:	5e a5       	ldd	r21, Y+46	; 0x2e
   19112:	6f a5       	ldd	r22, Y+47	; 0x2f
   19114:	78 a9       	ldd	r23, Y+48	; 0x30
   19116:	45 2b       	or	r20, r21
   19118:	46 2b       	or	r20, r22
   1911a:	47 2b       	or	r20, r23
   1911c:	b1 f4       	brne	.+44     	; 0x1914a <lif_check_volume+0x148>
   1911e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19122:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19126:	92 ff       	sbrs	r25, 2
   19128:	0e c0       	rjmp	.+28     	; 0x19146 <lif_check_volume+0x144>
   1912a:	ed b7       	in	r30, 0x3d	; 61
   1912c:	fe b7       	in	r31, 0x3e	; 62
   1912e:	14 82       	std	Z+4, r1	; 0x04
   19130:	15 82       	std	Z+5, r1	; 0x05
   19132:	16 82       	std	Z+6, r1	; 0x06
   19134:	17 82       	std	Z+7, r1	; 0x07
   19136:	83 ef       	ldi	r24, 0xF3	; 243
   19138:	9f e3       	ldi	r25, 0x3F	; 63
   1913a:	a0 e0       	ldi	r26, 0x00	; 0
   1913c:	81 83       	std	Z+1, r24	; 0x01
   1913e:	92 83       	std	Z+2, r25	; 0x02
   19140:	a3 83       	std	Z+3, r26	; 0x03
   19142:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   19146:	80 e0       	ldi	r24, 0x00	; 0
   19148:	90 e0       	ldi	r25, 0x00	; 0
   1914a:	4d a9       	ldd	r20, Y+53	; 0x35
   1914c:	5e a9       	ldd	r21, Y+54	; 0x36
   1914e:	6f a9       	ldd	r22, Y+55	; 0x37
   19150:	78 ad       	ldd	r23, Y+56	; 0x38
   19152:	45 2b       	or	r20, r21
   19154:	46 2b       	or	r20, r22
   19156:	47 2b       	or	r20, r23
   19158:	91 f4       	brne	.+36     	; 0x1917e <lif_check_volume+0x17c>
   1915a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1915e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19162:	92 ff       	sbrs	r25, 2
   19164:	0a c0       	rjmp	.+20     	; 0x1917a <lif_check_volume+0x178>
   19166:	84 ec       	ldi	r24, 0xC4	; 196
   19168:	9f e3       	ldi	r25, 0x3F	; 63
   1916a:	a0 e0       	ldi	r26, 0x00	; 0
   1916c:	ed b7       	in	r30, 0x3d	; 61
   1916e:	fe b7       	in	r31, 0x3e	; 62
   19170:	81 83       	std	Z+1, r24	; 0x01
   19172:	92 83       	std	Z+2, r25	; 0x02
   19174:	a3 83       	std	Z+3, r26	; 0x03
   19176:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1917a:	80 e0       	ldi	r24, 0x00	; 0
   1917c:	90 e0       	ldi	r25, 0x00	; 0
   1917e:	0d a5       	ldd	r16, Y+45	; 0x2d
   19180:	1e a5       	ldd	r17, Y+46	; 0x2e
   19182:	2f a5       	ldd	r18, Y+47	; 0x2f
   19184:	38 a9       	ldd	r19, Y+48	; 0x30
   19186:	4d a9       	ldd	r20, Y+53	; 0x35
   19188:	5e a9       	ldd	r21, Y+54	; 0x36
   1918a:	6f a9       	ldd	r22, Y+55	; 0x37
   1918c:	78 ad       	ldd	r23, Y+56	; 0x38
   1918e:	40 0f       	add	r20, r16
   19190:	51 1f       	adc	r21, r17
   19192:	62 1f       	adc	r22, r18
   19194:	73 1f       	adc	r23, r19
   19196:	0c 81       	ldd	r16, Y+4	; 0x04
   19198:	1d 81       	ldd	r17, Y+5	; 0x05
   1919a:	2e 81       	ldd	r18, Y+6	; 0x06
   1919c:	3f 81       	ldd	r19, Y+7	; 0x07
   1919e:	04 17       	cp	r16, r20
   191a0:	15 07       	cpc	r17, r21
   191a2:	26 07       	cpc	r18, r22
   191a4:	37 07       	cpc	r19, r23
   191a6:	90 f4       	brcc	.+36     	; 0x191cc <lif_check_volume+0x1ca>
   191a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191ac:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191b0:	92 ff       	sbrs	r25, 2
   191b2:	0a c0       	rjmp	.+20     	; 0x191c8 <lif_check_volume+0x1c6>
   191b4:	88 e9       	ldi	r24, 0x98	; 152
   191b6:	9f e3       	ldi	r25, 0x3F	; 63
   191b8:	a0 e0       	ldi	r26, 0x00	; 0
   191ba:	ed b7       	in	r30, 0x3d	; 61
   191bc:	fe b7       	in	r31, 0x3e	; 62
   191be:	81 83       	std	Z+1, r24	; 0x01
   191c0:	92 83       	std	Z+2, r25	; 0x02
   191c2:	a3 83       	std	Z+3, r26	; 0x03
   191c4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   191c8:	80 e0       	ldi	r24, 0x00	; 0
   191ca:	90 e0       	ldi	r25, 0x00	; 0
   191cc:	cd b7       	in	r28, 0x3d	; 61
   191ce:	de b7       	in	r29, 0x3e	; 62
   191d0:	27 96       	adiw	r28, 0x07	; 7
   191d2:	e4 e0       	ldi	r30, 0x04	; 4
   191d4:	0c 94 16 e7 	jmp	0x1ce2c	; 0x1ce2c <__epilogue_restores__+0x1c>

000191d8 <lif_check_dir>:
   191d8:	a5 e1       	ldi	r26, 0x15	; 21
   191da:	b0 e0       	ldi	r27, 0x00	; 0
   191dc:	e2 ef       	ldi	r30, 0xF2	; 242
   191de:	f8 ec       	ldi	r31, 0xC8	; 200
   191e0:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   191e4:	6c 01       	movw	r12, r24
   191e6:	2a e5       	ldi	r18, 0x5A	; 90
   191e8:	c2 0e       	add	r12, r18
   191ea:	d1 1c       	adc	r13, r1
   191ec:	f6 01       	movw	r30, r12
   191ee:	20 81       	ld	r18, Z
   191f0:	31 81       	ldd	r19, Z+1	; 0x01
   191f2:	21 50       	subi	r18, 0x01	; 1
   191f4:	31 09       	sbc	r19, r1
   191f6:	2e 3f       	cpi	r18, 0xFE	; 254
   191f8:	3f 4f       	sbci	r19, 0xFF	; 255
   191fa:	08 f0       	brcs	.+2      	; 0x191fe <lif_check_dir+0x26>
   191fc:	9a c1       	rjmp	.+820    	; 0x19532 <lif_check_dir+0x35a>
   191fe:	9d 8b       	std	Y+21, r25	; 0x15
   19200:	8c 8b       	std	Y+20, r24	; 0x14
   19202:	7c 01       	movw	r14, r24
   19204:	2f e4       	ldi	r18, 0x4F	; 79
   19206:	e2 0e       	add	r14, r18
   19208:	f1 1c       	adc	r15, r1
   1920a:	c7 01       	movw	r24, r14
   1920c:	e9 d9       	rcall	.-3118   	; 0x185e0 <lif_checkname>
   1920e:	89 2b       	or	r24, r25
   19210:	99 f4       	brne	.+38     	; 0x19238 <lif_check_dir+0x60>
   19212:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19216:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1921a:	92 ff       	sbrs	r25, 2
   1921c:	0f c0       	rjmp	.+30     	; 0x1923c <lif_check_dir+0x64>
   1921e:	ed b7       	in	r30, 0x3d	; 61
   19220:	fe b7       	in	r31, 0x3e	; 62
   19222:	f5 82       	std	Z+5, r15	; 0x05
   19224:	e4 82       	std	Z+4, r14	; 0x04
   19226:	87 e7       	ldi	r24, 0x77	; 119
   19228:	9f e3       	ldi	r25, 0x3F	; 63
   1922a:	a0 e0       	ldi	r26, 0x00	; 0
   1922c:	81 83       	std	Z+1, r24	; 0x01
   1922e:	92 83       	std	Z+2, r25	; 0x02
   19230:	a3 83       	std	Z+3, r26	; 0x03
   19232:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   19236:	02 c0       	rjmp	.+4      	; 0x1923c <lif_check_dir+0x64>
   19238:	01 e0       	ldi	r16, 0x01	; 1
   1923a:	01 c0       	rjmp	.+2      	; 0x1923e <lif_check_dir+0x66>
   1923c:	00 e0       	ldi	r16, 0x00	; 0
   1923e:	10 e0       	ldi	r17, 0x00	; 0
   19240:	ec 89       	ldd	r30, Y+20	; 0x14
   19242:	fd 89       	ldd	r31, Y+21	; 0x15
   19244:	84 85       	ldd	r24, Z+12	; 0x0c
   19246:	95 85       	ldd	r25, Z+13	; 0x0d
   19248:	a6 85       	ldd	r26, Z+14	; 0x0e
   1924a:	b7 85       	ldd	r27, Z+15	; 0x0f
   1924c:	00 97       	sbiw	r24, 0x00	; 0
   1924e:	a1 05       	cpc	r26, r1
   19250:	b1 05       	cpc	r27, r1
   19252:	39 f1       	breq	.+78     	; 0x192a2 <lif_check_dir+0xca>
   19254:	e4 5a       	subi	r30, 0xA4	; 164
   19256:	ff 4f       	sbci	r31, 0xFF	; 255
   19258:	40 81       	ld	r20, Z
   1925a:	51 81       	ldd	r21, Z+1	; 0x01
   1925c:	62 81       	ldd	r22, Z+2	; 0x02
   1925e:	73 81       	ldd	r23, Z+3	; 0x03
   19260:	48 17       	cp	r20, r24
   19262:	59 07       	cpc	r21, r25
   19264:	6a 07       	cpc	r22, r26
   19266:	7b 07       	cpc	r23, r27
   19268:	e0 f4       	brcc	.+56     	; 0x192a2 <lif_check_dir+0xca>
   1926a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1926e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19272:	32 ff       	sbrs	r19, 2
   19274:	14 c0       	rjmp	.+40     	; 0x1929e <lif_check_dir+0xc6>
   19276:	ed b7       	in	r30, 0x3d	; 61
   19278:	fe b7       	in	r31, 0x3e	; 62
   1927a:	82 87       	std	Z+10, r24	; 0x0a
   1927c:	93 87       	std	Z+11, r25	; 0x0b
   1927e:	a4 87       	std	Z+12, r26	; 0x0c
   19280:	b5 87       	std	Z+13, r27	; 0x0d
   19282:	46 83       	std	Z+6, r20	; 0x06
   19284:	57 83       	std	Z+7, r21	; 0x07
   19286:	60 87       	std	Z+8, r22	; 0x08
   19288:	71 87       	std	Z+9, r23	; 0x09
   1928a:	f5 82       	std	Z+5, r15	; 0x05
   1928c:	e4 82       	std	Z+4, r14	; 0x04
   1928e:	83 e3       	ldi	r24, 0x33	; 51
   19290:	9f e3       	ldi	r25, 0x3F	; 63
   19292:	a0 e0       	ldi	r26, 0x00	; 0
   19294:	81 83       	std	Z+1, r24	; 0x01
   19296:	92 83       	std	Z+2, r25	; 0x02
   19298:	a3 83       	std	Z+3, r26	; 0x03
   1929a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1929e:	00 e0       	ldi	r16, 0x00	; 0
   192a0:	10 e0       	ldi	r17, 0x00	; 0
   192a2:	ec 89       	ldd	r30, Y+20	; 0x14
   192a4:	fd 89       	ldd	r31, Y+21	; 0x15
   192a6:	44 81       	ldd	r20, Z+4	; 0x04
   192a8:	55 81       	ldd	r21, Z+5	; 0x05
   192aa:	66 81       	ldd	r22, Z+6	; 0x06
   192ac:	77 81       	ldd	r23, Z+7	; 0x07
   192ae:	41 15       	cp	r20, r1
   192b0:	51 05       	cpc	r21, r1
   192b2:	61 05       	cpc	r22, r1
   192b4:	71 05       	cpc	r23, r1
   192b6:	99 f1       	breq	.+102    	; 0x1931e <lif_check_dir+0x146>
   192b8:	e4 5a       	subi	r30, 0xA4	; 164
   192ba:	ff 4f       	sbci	r31, 0xFF	; 255
   192bc:	80 80       	ld	r8, Z
   192be:	91 80       	ldd	r9, Z+1	; 0x01
   192c0:	a2 80       	ldd	r10, Z+2	; 0x02
   192c2:	b3 80       	ldd	r11, Z+3	; 0x03
   192c4:	ec 89       	ldd	r30, Y+20	; 0x14
   192c6:	fd 89       	ldd	r31, Y+21	; 0x15
   192c8:	e0 5a       	subi	r30, 0xA0	; 160
   192ca:	ff 4f       	sbci	r31, 0xFF	; 255
   192cc:	80 81       	ld	r24, Z
   192ce:	91 81       	ldd	r25, Z+1	; 0x01
   192d0:	a2 81       	ldd	r26, Z+2	; 0x02
   192d2:	b3 81       	ldd	r27, Z+3	; 0x03
   192d4:	88 0d       	add	r24, r8
   192d6:	99 1d       	adc	r25, r9
   192d8:	aa 1d       	adc	r26, r10
   192da:	bb 1d       	adc	r27, r11
   192dc:	48 17       	cp	r20, r24
   192de:	59 07       	cpc	r21, r25
   192e0:	6a 07       	cpc	r22, r26
   192e2:	7b 07       	cpc	r23, r27
   192e4:	e0 f4       	brcc	.+56     	; 0x1931e <lif_check_dir+0x146>
   192e6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   192ea:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192ee:	32 ff       	sbrs	r19, 2
   192f0:	14 c0       	rjmp	.+40     	; 0x1931a <lif_check_dir+0x142>
   192f2:	ed b7       	in	r30, 0x3d	; 61
   192f4:	fe b7       	in	r31, 0x3e	; 62
   192f6:	42 87       	std	Z+10, r20	; 0x0a
   192f8:	53 87       	std	Z+11, r21	; 0x0b
   192fa:	64 87       	std	Z+12, r22	; 0x0c
   192fc:	75 87       	std	Z+13, r23	; 0x0d
   192fe:	86 83       	std	Z+6, r24	; 0x06
   19300:	97 83       	std	Z+7, r25	; 0x07
   19302:	a0 87       	std	Z+8, r26	; 0x08
   19304:	b1 87       	std	Z+9, r27	; 0x09
   19306:	f5 82       	std	Z+5, r15	; 0x05
   19308:	e4 82       	std	Z+4, r14	; 0x04
   1930a:	82 ef       	ldi	r24, 0xF2	; 242
   1930c:	9e e3       	ldi	r25, 0x3E	; 62
   1930e:	a0 e0       	ldi	r26, 0x00	; 0
   19310:	81 83       	std	Z+1, r24	; 0x01
   19312:	92 83       	std	Z+2, r25	; 0x02
   19314:	a3 83       	std	Z+3, r26	; 0x03
   19316:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1931a:	00 e0       	ldi	r16, 0x00	; 0
   1931c:	10 e0       	ldi	r17, 0x00	; 0
   1931e:	ec 89       	ldd	r30, Y+20	; 0x14
   19320:	fd 89       	ldd	r31, Y+21	; 0x15
   19322:	e6 59       	subi	r30, 0x96	; 150
   19324:	ff 4f       	sbci	r31, 0xFF	; 255
   19326:	80 81       	ld	r24, Z
   19328:	91 81       	ldd	r25, Z+1	; 0x01
   1932a:	81 30       	cpi	r24, 0x01	; 1
   1932c:	f0 e8       	ldi	r31, 0x80	; 128
   1932e:	9f 07       	cpc	r25, r31
   19330:	b1 f0       	breq	.+44     	; 0x1935e <lif_check_dir+0x186>
   19332:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19336:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1933a:	32 ff       	sbrs	r19, 2
   1933c:	0e c0       	rjmp	.+28     	; 0x1935a <lif_check_dir+0x182>
   1933e:	ed b7       	in	r30, 0x3d	; 61
   19340:	fe b7       	in	r31, 0x3e	; 62
   19342:	97 83       	std	Z+7, r25	; 0x07
   19344:	86 83       	std	Z+6, r24	; 0x06
   19346:	f5 82       	std	Z+5, r15	; 0x05
   19348:	e4 82       	std	Z+4, r14	; 0x04
   1934a:	84 ec       	ldi	r24, 0xC4	; 196
   1934c:	9e e3       	ldi	r25, 0x3E	; 62
   1934e:	a0 e0       	ldi	r26, 0x00	; 0
   19350:	81 83       	std	Z+1, r24	; 0x01
   19352:	92 83       	std	Z+2, r25	; 0x02
   19354:	a3 83       	std	Z+3, r26	; 0x03
   19356:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1935a:	00 e0       	ldi	r16, 0x00	; 0
   1935c:	10 e0       	ldi	r17, 0x00	; 0
   1935e:	f6 01       	movw	r30, r12
   19360:	80 81       	ld	r24, Z
   19362:	91 81       	ldd	r25, Z+1	; 0x01
   19364:	8c 7f       	andi	r24, 0xFC	; 252
   19366:	80 31       	cpi	r24, 0x10	; 16
   19368:	90 4e       	sbci	r25, 0xE0	; 224
   1936a:	09 f0       	breq	.+2      	; 0x1936e <lif_check_dir+0x196>
   1936c:	b3 c0       	rjmp	.+358    	; 0x194d4 <lif_check_dir+0x2fc>
   1936e:	cc 88       	ldd	r12, Y+20	; 0x14
   19370:	dd 88       	ldd	r13, Y+21	; 0x15
   19372:	2c e6       	ldi	r18, 0x6C	; 108
   19374:	c2 0e       	add	r12, r18
   19376:	d1 1c       	adc	r13, r1
   19378:	f6 01       	movw	r30, r12
   1937a:	80 81       	ld	r24, Z
   1937c:	91 81       	ldd	r25, Z+1	; 0x01
   1937e:	00 97       	sbiw	r24, 0x00	; 0
   19380:	09 f4       	brne	.+2      	; 0x19384 <lif_check_dir+0x1ac>
   19382:	a8 c0       	rjmp	.+336    	; 0x194d4 <lif_check_dir+0x2fc>
   19384:	4c 01       	movw	r8, r24
   19386:	a1 2c       	mov	r10, r1
   19388:	b1 2c       	mov	r11, r1
   1938a:	77 27       	eor	r23, r23
   1938c:	6b 2d       	mov	r22, r11
   1938e:	5a 2d       	mov	r21, r10
   19390:	49 2d       	mov	r20, r9
   19392:	9c 01       	movw	r18, r24
   19394:	33 27       	eor	r19, r19
   19396:	3b 8b       	std	Y+19, r19	; 0x13
   19398:	2a 8b       	std	Y+18, r18	; 0x12
   1939a:	db 01       	movw	r26, r22
   1939c:	ca 01       	movw	r24, r20
   1939e:	23 2b       	or	r18, r19
   193a0:	19 f0       	breq	.+6      	; 0x193a8 <lif_check_dir+0x1d0>
   193a2:	01 96       	adiw	r24, 0x01	; 1
   193a4:	a1 1d       	adc	r26, r1
   193a6:	b1 1d       	adc	r27, r1
   193a8:	2c 88       	ldd	r2, Y+20	; 0x14
   193aa:	3d 88       	ldd	r3, Y+21	; 0x15
   193ac:	30 e6       	ldi	r19, 0x60	; 96
   193ae:	23 0e       	add	r2, r19
   193b0:	31 1c       	adc	r3, r1
   193b2:	f1 01       	movw	r30, r2
   193b4:	40 80       	ld	r4, Z
   193b6:	51 80       	ldd	r5, Z+1	; 0x01
   193b8:	62 80       	ldd	r6, Z+2	; 0x02
   193ba:	73 80       	ldd	r7, Z+3	; 0x03
   193bc:	48 16       	cp	r4, r24
   193be:	59 06       	cpc	r5, r25
   193c0:	6a 06       	cpc	r6, r26
   193c2:	7b 06       	cpc	r7, r27
   193c4:	40 f5       	brcc	.+80     	; 0x19416 <lif_check_dir+0x23e>
   193c6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   193ca:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193ce:	32 ff       	sbrs	r19, 2
   193d0:	20 c0       	rjmp	.+64     	; 0x19412 <lif_check_dir+0x23a>
   193d2:	2a 89       	ldd	r18, Y+18	; 0x12
   193d4:	3b 89       	ldd	r19, Y+19	; 0x13
   193d6:	23 2b       	or	r18, r19
   193d8:	21 f0       	breq	.+8      	; 0x193e2 <lif_check_dir+0x20a>
   193da:	4f 5f       	subi	r20, 0xFF	; 255
   193dc:	5f 4f       	sbci	r21, 0xFF	; 255
   193de:	6f 4f       	sbci	r22, 0xFF	; 255
   193e0:	7f 4f       	sbci	r23, 0xFF	; 255
   193e2:	ed b7       	in	r30, 0x3d	; 61
   193e4:	fe b7       	in	r31, 0x3e	; 62
   193e6:	46 86       	std	Z+14, r4	; 0x0e
   193e8:	57 86       	std	Z+15, r5	; 0x0f
   193ea:	60 8a       	std	Z+16, r6	; 0x10
   193ec:	71 8a       	std	Z+17, r7	; 0x11
   193ee:	42 87       	std	Z+10, r20	; 0x0a
   193f0:	53 87       	std	Z+11, r21	; 0x0b
   193f2:	64 87       	std	Z+12, r22	; 0x0c
   193f4:	75 87       	std	Z+13, r23	; 0x0d
   193f6:	86 82       	std	Z+6, r8	; 0x06
   193f8:	97 82       	std	Z+7, r9	; 0x07
   193fa:	a0 86       	std	Z+8, r10	; 0x08
   193fc:	b1 86       	std	Z+9, r11	; 0x09
   193fe:	f5 82       	std	Z+5, r15	; 0x05
   19400:	e4 82       	std	Z+4, r14	; 0x04
   19402:	89 e7       	ldi	r24, 0x79	; 121
   19404:	9e e3       	ldi	r25, 0x3E	; 62
   19406:	a0 e0       	ldi	r26, 0x00	; 0
   19408:	81 83       	std	Z+1, r24	; 0x01
   1940a:	92 83       	std	Z+2, r25	; 0x02
   1940c:	a3 83       	std	Z+3, r26	; 0x03
   1940e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   19412:	00 e0       	ldi	r16, 0x00	; 0
   19414:	10 e0       	ldi	r17, 0x00	; 0
   19416:	f6 01       	movw	r30, r12
   19418:	20 81       	ld	r18, Z
   1941a:	31 81       	ldd	r19, Z+1	; 0x01
   1941c:	a9 01       	movw	r20, r18
   1941e:	60 e0       	ldi	r22, 0x00	; 0
   19420:	70 e0       	ldi	r23, 0x00	; 0
   19422:	bb 27       	eor	r27, r27
   19424:	a7 2f       	mov	r26, r23
   19426:	96 2f       	mov	r25, r22
   19428:	85 2f       	mov	r24, r21
   1942a:	f9 01       	movw	r30, r18
   1942c:	ff 27       	eor	r31, r31
   1942e:	fb 8b       	std	Y+19, r31	; 0x13
   19430:	ea 8b       	std	Y+18, r30	; 0x12
   19432:	2c 01       	movw	r4, r24
   19434:	3d 01       	movw	r6, r26
   19436:	ef 2b       	or	r30, r31
   19438:	29 f0       	breq	.+10     	; 0x19444 <lif_check_dir+0x26c>
   1943a:	ff ef       	ldi	r31, 0xFF	; 255
   1943c:	4f 1a       	sub	r4, r31
   1943e:	5f 0a       	sbc	r5, r31
   19440:	6f 0a       	sbc	r6, r31
   19442:	7f 0a       	sbc	r7, r31
   19444:	f1 01       	movw	r30, r2
   19446:	80 80       	ld	r8, Z
   19448:	91 80       	ldd	r9, Z+1	; 0x01
   1944a:	a2 80       	ldd	r10, Z+2	; 0x02
   1944c:	b3 80       	ldd	r11, Z+3	; 0x03
   1944e:	48 14       	cp	r4, r8
   19450:	59 04       	cpc	r5, r9
   19452:	6a 04       	cpc	r6, r10
   19454:	7b 04       	cpc	r7, r11
   19456:	28 f5       	brcc	.+74     	; 0x194a2 <lif_check_dir+0x2ca>
   19458:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1945c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19460:	32 ff       	sbrs	r19, 2
   19462:	1f c0       	rjmp	.+62     	; 0x194a2 <lif_check_dir+0x2ca>
   19464:	2a 89       	ldd	r18, Y+18	; 0x12
   19466:	3b 89       	ldd	r19, Y+19	; 0x13
   19468:	23 2b       	or	r18, r19
   1946a:	19 f0       	breq	.+6      	; 0x19472 <lif_check_dir+0x29a>
   1946c:	01 96       	adiw	r24, 0x01	; 1
   1946e:	a1 1d       	adc	r26, r1
   19470:	b1 1d       	adc	r27, r1
   19472:	ed b7       	in	r30, 0x3d	; 61
   19474:	fe b7       	in	r31, 0x3e	; 62
   19476:	86 86       	std	Z+14, r8	; 0x0e
   19478:	97 86       	std	Z+15, r9	; 0x0f
   1947a:	a0 8a       	std	Z+16, r10	; 0x10
   1947c:	b1 8a       	std	Z+17, r11	; 0x11
   1947e:	82 87       	std	Z+10, r24	; 0x0a
   19480:	93 87       	std	Z+11, r25	; 0x0b
   19482:	a4 87       	std	Z+12, r26	; 0x0c
   19484:	b5 87       	std	Z+13, r27	; 0x0d
   19486:	46 83       	std	Z+6, r20	; 0x06
   19488:	57 83       	std	Z+7, r21	; 0x07
   1948a:	60 87       	std	Z+8, r22	; 0x08
   1948c:	71 87       	std	Z+9, r23	; 0x09
   1948e:	f5 82       	std	Z+5, r15	; 0x05
   19490:	e4 82       	std	Z+4, r14	; 0x04
   19492:	8e e2       	ldi	r24, 0x2E	; 46
   19494:	9e e3       	ldi	r25, 0x3E	; 62
   19496:	a0 e0       	ldi	r26, 0x00	; 0
   19498:	81 83       	std	Z+1, r24	; 0x01
   1949a:	92 83       	std	Z+2, r25	; 0x02
   1949c:	a3 83       	std	Z+3, r26	; 0x03
   1949e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   194a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   194a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194aa:	92 ff       	sbrs	r25, 2
   194ac:	13 c0       	rjmp	.+38     	; 0x194d4 <lif_check_dir+0x2fc>
   194ae:	f6 01       	movw	r30, r12
   194b0:	80 81       	ld	r24, Z
   194b2:	91 81       	ldd	r25, Z+1	; 0x01
   194b4:	89 2b       	or	r24, r25
   194b6:	71 f4       	brne	.+28     	; 0x194d4 <lif_check_dir+0x2fc>
   194b8:	ed b7       	in	r30, 0x3d	; 61
   194ba:	fe b7       	in	r31, 0x3e	; 62
   194bc:	f5 82       	std	Z+5, r15	; 0x05
   194be:	e4 82       	std	Z+4, r14	; 0x04
   194c0:	83 e0       	ldi	r24, 0x03	; 3
   194c2:	9e e3       	ldi	r25, 0x3E	; 62
   194c4:	a0 e0       	ldi	r26, 0x00	; 0
   194c6:	81 83       	std	Z+1, r24	; 0x01
   194c8:	92 83       	std	Z+2, r25	; 0x02
   194ca:	a3 83       	std	Z+3, r26	; 0x03
   194cc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   194d0:	00 e0       	ldi	r16, 0x00	; 0
   194d2:	10 e0       	ldi	r17, 0x00	; 0
   194d4:	ec 89       	ldd	r30, Y+20	; 0x14
   194d6:	fd 89       	ldd	r31, Y+21	; 0x15
   194d8:	e2 59       	subi	r30, 0x92	; 146
   194da:	ff 4f       	sbci	r31, 0xFF	; 255
   194dc:	20 81       	ld	r18, Z
   194de:	31 81       	ldd	r19, Z+1	; 0x01
   194e0:	21 15       	cp	r18, r1
   194e2:	f1 e0       	ldi	r31, 0x01	; 1
   194e4:	3f 07       	cpc	r19, r31
   194e6:	41 f1       	breq	.+80     	; 0x19538 <lif_check_dir+0x360>
   194e8:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   194ec:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194f0:	ca 01       	movw	r24, r20
   194f2:	88 27       	eor	r24, r24
   194f4:	94 70       	andi	r25, 0x04	; 4
   194f6:	52 ff       	sbrs	r21, 2
   194f8:	20 c0       	rjmp	.+64     	; 0x1953a <lif_check_dir+0x362>
   194fa:	c9 01       	movw	r24, r18
   194fc:	a0 e0       	ldi	r26, 0x00	; 0
   194fe:	b0 e0       	ldi	r27, 0x00	; 0
   19500:	ed b7       	in	r30, 0x3d	; 61
   19502:	fe b7       	in	r31, 0x3e	; 62
   19504:	86 83       	std	Z+6, r24	; 0x06
   19506:	97 83       	std	Z+7, r25	; 0x07
   19508:	a0 87       	std	Z+8, r26	; 0x08
   1950a:	b1 87       	std	Z+9, r27	; 0x09
   1950c:	ec 89       	ldd	r30, Y+20	; 0x14
   1950e:	fd 89       	ldd	r31, Y+21	; 0x15
   19510:	80 81       	ld	r24, Z
   19512:	91 81       	ldd	r25, Z+1	; 0x01
   19514:	ed b7       	in	r30, 0x3d	; 61
   19516:	fe b7       	in	r31, 0x3e	; 62
   19518:	95 83       	std	Z+5, r25	; 0x05
   1951a:	84 83       	std	Z+4, r24	; 0x04
   1951c:	87 ed       	ldi	r24, 0xD7	; 215
   1951e:	9d e3       	ldi	r25, 0x3D	; 61
   19520:	a0 e0       	ldi	r26, 0x00	; 0
   19522:	81 83       	std	Z+1, r24	; 0x01
   19524:	92 83       	std	Z+2, r25	; 0x02
   19526:	a3 83       	std	Z+3, r26	; 0x03
   19528:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1952c:	80 e0       	ldi	r24, 0x00	; 0
   1952e:	90 e0       	ldi	r25, 0x00	; 0
   19530:	04 c0       	rjmp	.+8      	; 0x1953a <lif_check_dir+0x362>
   19532:	81 e0       	ldi	r24, 0x01	; 1
   19534:	90 e0       	ldi	r25, 0x00	; 0
   19536:	01 c0       	rjmp	.+2      	; 0x1953a <lif_check_dir+0x362>
   19538:	c8 01       	movw	r24, r16
   1953a:	65 96       	adiw	r28, 0x15	; 21
   1953c:	e2 e1       	ldi	r30, 0x12	; 18
   1953e:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00019542 <lif_close_volume>:
   19542:	cf 93       	push	r28
   19544:	df 93       	push	r29
   19546:	00 97       	sbiw	r24, 0x00	; 0
   19548:	f9 f0       	breq	.+62     	; 0x19588 <lif_close_volume+0x46>
   1954a:	ec 01       	movw	r28, r24
   1954c:	8a 81       	ldd	r24, Y+2	; 0x02
   1954e:	9b 81       	ldd	r25, Y+3	; 0x03
   19550:	00 97       	sbiw	r24, 0x00	; 0
   19552:	79 f0       	breq	.+30     	; 0x19572 <lif_close_volume+0x30>
   19554:	22 e0       	ldi	r18, 0x02	; 2
   19556:	30 e0       	ldi	r19, 0x00	; 0
   19558:	40 e0       	ldi	r20, 0x00	; 0
   1955a:	50 e0       	ldi	r21, 0x00	; 0
   1955c:	ba 01       	movw	r22, r20
   1955e:	0e 94 0c 7b 	call	0xf618	; 0xf618 <fseek>
   19562:	8a 81       	ldd	r24, Y+2	; 0x02
   19564:	9b 81       	ldd	r25, Y+3	; 0x03
   19566:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>
   1956a:	1b 82       	std	Y+3, r1	; 0x03
   1956c:	1a 82       	std	Y+2, r1	; 0x02
   1956e:	0e 94 ef 7b 	call	0xf7de	; 0xf7de <sync>
   19572:	88 81       	ld	r24, Y
   19574:	99 81       	ldd	r25, Y+1	; 0x01
   19576:	00 97       	sbiw	r24, 0x00	; 0
   19578:	11 f0       	breq	.+4      	; 0x1957e <lif_close_volume+0x3c>
   1957a:	0e 94 1d c1 	call	0x1823a	; 0x1823a <lif_free>
   1957e:	ce 01       	movw	r24, r28
   19580:	73 db       	rcall	.-2330   	; 0x18c68 <lif_vol_clear>
   19582:	ce 01       	movw	r24, r28
   19584:	0e 94 1d c1 	call	0x1823a	; 0x1823a <lif_free>
   19588:	df 91       	pop	r29
   1958a:	cf 91       	pop	r28
   1958c:	08 95       	ret

0001958e <lif_checkdirindex>:
   1958e:	cf 92       	push	r12
   19590:	df 92       	push	r13
   19592:	ef 92       	push	r14
   19594:	ff 92       	push	r15
   19596:	cf 93       	push	r28
   19598:	df 93       	push	r29
   1959a:	ad b7       	in	r26, 0x3d	; 61
   1959c:	be b7       	in	r27, 0x3e	; 62
   1959e:	17 97       	sbiw	r26, 0x07	; 7
   195a0:	0f b6       	in	r0, 0x3f	; 63
   195a2:	f8 94       	cli
   195a4:	be bf       	out	0x3e, r27	; 62
   195a6:	0f be       	out	0x3f, r0	; 63
   195a8:	ad bf       	out	0x3d, r26	; 61
   195aa:	9b 01       	movw	r18, r22
   195ac:	77 fd       	sbrc	r23, 7
   195ae:	25 c0       	rjmp	.+74     	; 0x195fa <lif_checkdirindex+0x6c>
   195b0:	ab 01       	movw	r20, r22
   195b2:	77 0f       	add	r23, r23
   195b4:	66 0b       	sbc	r22, r22
   195b6:	77 0b       	sbc	r23, r23
   195b8:	e5 e0       	ldi	r30, 0x05	; 5
   195ba:	44 0f       	add	r20, r20
   195bc:	55 1f       	adc	r21, r21
   195be:	66 1f       	adc	r22, r22
   195c0:	77 1f       	adc	r23, r23
   195c2:	ea 95       	dec	r30
   195c4:	d1 f7       	brne	.-12     	; 0x195ba <lif_checkdirindex+0x2c>
   195c6:	c5 2e       	mov	r12, r21
   195c8:	d6 2e       	mov	r13, r22
   195ca:	e7 2e       	mov	r14, r23
   195cc:	ff 24       	eor	r15, r15
   195ce:	55 27       	eor	r21, r21
   195d0:	66 27       	eor	r22, r22
   195d2:	77 27       	eor	r23, r23
   195d4:	45 2b       	or	r20, r21
   195d6:	46 2b       	or	r20, r22
   195d8:	47 2b       	or	r20, r23
   195da:	29 f0       	breq	.+10     	; 0x195e6 <lif_checkdirindex+0x58>
   195dc:	4f ef       	ldi	r20, 0xFF	; 255
   195de:	c4 1a       	sub	r12, r20
   195e0:	d4 0a       	sbc	r13, r20
   195e2:	e4 0a       	sbc	r14, r20
   195e4:	f4 0a       	sbc	r15, r20
   195e6:	fc 01       	movw	r30, r24
   195e8:	45 a9       	ldd	r20, Z+53	; 0x35
   195ea:	56 a9       	ldd	r21, Z+54	; 0x36
   195ec:	67 a9       	ldd	r22, Z+55	; 0x37
   195ee:	70 ad       	ldd	r23, Z+56	; 0x38
   195f0:	4c 15       	cp	r20, r12
   195f2:	5d 05       	cpc	r21, r13
   195f4:	6e 05       	cpc	r22, r14
   195f6:	7f 05       	cpc	r23, r15
   195f8:	08 f5       	brcc	.+66     	; 0x1963c <lif_checkdirindex+0xae>
   195fa:	ec 01       	movw	r28, r24
   195fc:	ed b7       	in	r30, 0x3d	; 61
   195fe:	fe b7       	in	r31, 0x3e	; 62
   19600:	37 83       	std	Z+7, r19	; 0x07
   19602:	26 83       	std	Z+6, r18	; 0x06
   19604:	88 81       	ld	r24, Y
   19606:	99 81       	ldd	r25, Y+1	; 0x01
   19608:	95 83       	std	Z+5, r25	; 0x05
   1960a:	84 83       	std	Z+4, r24	; 0x04
   1960c:	84 e1       	ldi	r24, 0x14	; 20
   1960e:	9d e3       	ldi	r25, 0x3D	; 61
   19610:	a0 e0       	ldi	r26, 0x00	; 0
   19612:	81 83       	std	Z+1, r24	; 0x01
   19614:	92 83       	std	Z+2, r25	; 0x02
   19616:	a3 83       	std	Z+3, r26	; 0x03
   19618:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1961c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19620:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19624:	c9 01       	movw	r24, r18
   19626:	88 27       	eor	r24, r24
   19628:	94 70       	andi	r25, 0x04	; 4
   1962a:	32 ff       	sbrs	r19, 2
   1962c:	09 c0       	rjmp	.+18     	; 0x19640 <lif_checkdirindex+0xb2>
   1962e:	60 ef       	ldi	r22, 0xF0	; 240
   19630:	75 e1       	ldi	r23, 0x15	; 21
   19632:	ce 01       	movw	r24, r28
   19634:	20 db       	rcall	.-2496   	; 0x18c76 <lif_dump_vol>
   19636:	80 e0       	ldi	r24, 0x00	; 0
   19638:	90 e0       	ldi	r25, 0x00	; 0
   1963a:	02 c0       	rjmp	.+4      	; 0x19640 <lif_checkdirindex+0xb2>
   1963c:	81 e0       	ldi	r24, 0x01	; 1
   1963e:	90 e0       	ldi	r25, 0x00	; 0
   19640:	ad b7       	in	r26, 0x3d	; 61
   19642:	be b7       	in	r27, 0x3e	; 62
   19644:	17 96       	adiw	r26, 0x07	; 7
   19646:	0f b6       	in	r0, 0x3f	; 63
   19648:	f8 94       	cli
   1964a:	be bf       	out	0x3e, r27	; 62
   1964c:	0f be       	out	0x3f, r0	; 63
   1964e:	ad bf       	out	0x3d, r26	; 61
   19650:	df 91       	pop	r29
   19652:	cf 91       	pop	r28
   19654:	ff 90       	pop	r15
   19656:	ef 90       	pop	r14
   19658:	df 90       	pop	r13
   1965a:	cf 90       	pop	r12
   1965c:	08 95       	ret

0001965e <lif_readdirindex>:
   1965e:	a5 e2       	ldi	r26, 0x25	; 37
   19660:	b0 e0       	ldi	r27, 0x00	; 0
   19662:	e5 e3       	ldi	r30, 0x35	; 53
   19664:	fb ec       	ldi	r31, 0xCB	; 203
   19666:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
   1966a:	7c 01       	movw	r14, r24
   1966c:	6b 01       	movw	r12, r22
   1966e:	8f df       	rcall	.-226    	; 0x1958e <lif_checkdirindex>
   19670:	89 2b       	or	r24, r25
   19672:	19 f4       	brne	.+6      	; 0x1967a <lif_readdirindex+0x1c>
   19674:	00 e0       	ldi	r16, 0x00	; 0
   19676:	10 e0       	ldi	r17, 0x00	; 0
   19678:	54 c0       	rjmp	.+168    	; 0x19722 <lif_readdirindex+0xc4>
   1967a:	f7 01       	movw	r30, r14
   1967c:	85 a5       	ldd	r24, Z+45	; 0x2d
   1967e:	96 a5       	ldd	r25, Z+46	; 0x2e
   19680:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19682:	b0 a9       	ldd	r27, Z+48	; 0x30
   19684:	44 27       	eor	r20, r20
   19686:	58 2f       	mov	r21, r24
   19688:	69 2f       	mov	r22, r25
   1968a:	7a 2f       	mov	r23, r26
   1968c:	c6 01       	movw	r24, r12
   1968e:	0d 2c       	mov	r0, r13
   19690:	00 0c       	add	r0, r0
   19692:	aa 0b       	sbc	r26, r26
   19694:	bb 0b       	sbc	r27, r27
   19696:	35 e0       	ldi	r19, 0x05	; 5
   19698:	88 0f       	add	r24, r24
   1969a:	99 1f       	adc	r25, r25
   1969c:	aa 1f       	adc	r26, r26
   1969e:	bb 1f       	adc	r27, r27
   196a0:	3a 95       	dec	r19
   196a2:	d1 f7       	brne	.-12     	; 0x19698 <lif_readdirindex+0x3a>
   196a4:	9a 01       	movw	r18, r20
   196a6:	ab 01       	movw	r20, r22
   196a8:	28 0f       	add	r18, r24
   196aa:	39 1f       	adc	r19, r25
   196ac:	4a 1f       	adc	r20, r26
   196ae:	5b 1f       	adc	r21, r27
   196b0:	00 e2       	ldi	r16, 0x20	; 32
   196b2:	10 e0       	ldi	r17, 0x00	; 0
   196b4:	be 01       	movw	r22, r28
   196b6:	6a 5f       	subi	r22, 0xFA	; 250
   196b8:	7f 4f       	sbci	r23, 0xFF	; 255
   196ba:	c7 01       	movw	r24, r14
   196bc:	0e 94 d5 c1 	call	0x183aa	; 0x183aa <lif_read>
   196c0:	60 32       	cpi	r22, 0x20	; 32
   196c2:	71 05       	cpc	r23, r1
   196c4:	81 05       	cpc	r24, r1
   196c6:	91 05       	cpc	r25, r1
   196c8:	a8 f2       	brcs	.-86     	; 0x19674 <lif_readdirindex+0x16>
   196ca:	b7 01       	movw	r22, r14
   196cc:	ce 01       	movw	r24, r28
   196ce:	06 96       	adiw	r24, 0x06	; 6
   196d0:	75 d9       	rcall	.-3350   	; 0x189bc <lif_str2dir>
   196d2:	f7 01       	movw	r30, r14
   196d4:	e6 5a       	subi	r30, 0xA6	; 166
   196d6:	ff 4f       	sbci	r31, 0xFF	; 255
   196d8:	80 81       	ld	r24, Z
   196da:	91 81       	ldd	r25, Z+1	; 0x01
   196dc:	01 96       	adiw	r24, 0x01	; 1
   196de:	19 f4       	brne	.+6      	; 0x196e6 <lif_readdirindex+0x88>
   196e0:	f7 01       	movw	r30, r14
   196e2:	d3 a2       	std	Z+35, r13	; 0x23
   196e4:	c2 a2       	std	Z+34, r12	; 0x22
   196e6:	c7 01       	movw	r24, r14
   196e8:	77 dd       	rcall	.-1298   	; 0x191d8 <lif_check_dir>
   196ea:	8c 01       	movw	r16, r24
   196ec:	89 2b       	or	r24, r25
   196ee:	b9 f4       	brne	.+46     	; 0x1971e <lif_readdirindex+0xc0>
   196f0:	ed b7       	in	r30, 0x3d	; 61
   196f2:	fe b7       	in	r31, 0x3e	; 62
   196f4:	d5 82       	std	Z+5, r13	; 0x05
   196f6:	c4 82       	std	Z+4, r12	; 0x04
   196f8:	84 ef       	ldi	r24, 0xF4	; 244
   196fa:	9c e3       	ldi	r25, 0x3C	; 60
   196fc:	a0 e0       	ldi	r26, 0x00	; 0
   196fe:	81 83       	std	Z+1, r24	; 0x01
   19700:	92 83       	std	Z+2, r25	; 0x02
   19702:	a3 83       	std	Z+3, r26	; 0x03
   19704:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   19708:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1970c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19710:	92 ff       	sbrs	r25, 2
   19712:	b0 cf       	rjmp	.-160    	; 0x19674 <lif_readdirindex+0x16>
   19714:	61 e0       	ldi	r22, 0x01	; 1
   19716:	76 e1       	ldi	r23, 0x16	; 22
   19718:	c7 01       	movw	r24, r14
   1971a:	ad da       	rcall	.-2726   	; 0x18c76 <lif_dump_vol>
   1971c:	02 c0       	rjmp	.+4      	; 0x19722 <lif_readdirindex+0xc4>
   1971e:	01 e0       	ldi	r16, 0x01	; 1
   19720:	10 e0       	ldi	r17, 0x00	; 0
   19722:	c8 01       	movw	r24, r16
   19724:	a5 96       	adiw	r28, 0x25	; 37
   19726:	e8 e0       	ldi	r30, 0x08	; 8
   19728:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0001972c <lif_writedirindex>:
   1972c:	a0 e2       	ldi	r26, 0x20	; 32
   1972e:	b0 e0       	ldi	r27, 0x00	; 0
   19730:	ec e9       	ldi	r30, 0x9C	; 156
   19732:	fb ec       	ldi	r31, 0xCB	; 203
   19734:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
   19738:	5c 01       	movw	r10, r24
   1973a:	6b 01       	movw	r12, r22
   1973c:	4d dd       	rcall	.-1382   	; 0x191d8 <lif_check_dir>
   1973e:	7c 01       	movw	r14, r24
   19740:	89 2b       	or	r24, r25
   19742:	71 f4       	brne	.+28     	; 0x19760 <lif_writedirindex+0x34>
   19744:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19748:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1974c:	92 fd       	sbrc	r25, 2
   1974e:	03 c0       	rjmp	.+6      	; 0x19756 <lif_writedirindex+0x2a>
   19750:	e1 2c       	mov	r14, r1
   19752:	f1 2c       	mov	r15, r1
   19754:	42 c0       	rjmp	.+132    	; 0x197da <lif_writedirindex+0xae>
   19756:	62 e1       	ldi	r22, 0x12	; 18
   19758:	76 e1       	ldi	r23, 0x16	; 22
   1975a:	c5 01       	movw	r24, r10
   1975c:	8c da       	rcall	.-2792   	; 0x18c76 <lif_dump_vol>
   1975e:	3d c0       	rjmp	.+122    	; 0x197da <lif_writedirindex+0xae>
   19760:	b6 01       	movw	r22, r12
   19762:	c5 01       	movw	r24, r10
   19764:	14 df       	rcall	.-472    	; 0x1958e <lif_checkdirindex>
   19766:	89 2b       	or	r24, r25
   19768:	99 f3       	breq	.-26     	; 0x19750 <lif_writedirindex+0x24>
   1976a:	f5 01       	movw	r30, r10
   1976c:	e6 5a       	subi	r30, 0xA6	; 166
   1976e:	ff 4f       	sbci	r31, 0xFF	; 255
   19770:	80 81       	ld	r24, Z
   19772:	91 81       	ldd	r25, Z+1	; 0x01
   19774:	01 96       	adiw	r24, 0x01	; 1
   19776:	19 f4       	brne	.+6      	; 0x1977e <lif_writedirindex+0x52>
   19778:	f5 01       	movw	r30, r10
   1977a:	d3 a2       	std	Z+35, r13	; 0x23
   1977c:	c2 a2       	std	Z+34, r12	; 0x22
   1977e:	f5 01       	movw	r30, r10
   19780:	85 a5       	ldd	r24, Z+45	; 0x2d
   19782:	96 a5       	ldd	r25, Z+46	; 0x2e
   19784:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19786:	b0 a9       	ldd	r27, Z+48	; 0x30
   19788:	ba 2f       	mov	r27, r26
   1978a:	a9 2f       	mov	r26, r25
   1978c:	98 2f       	mov	r25, r24
   1978e:	88 27       	eor	r24, r24
   19790:	0d 2c       	mov	r0, r13
   19792:	00 0c       	add	r0, r0
   19794:	ee 08       	sbc	r14, r14
   19796:	ff 08       	sbc	r15, r15
   19798:	35 e0       	ldi	r19, 0x05	; 5
   1979a:	cc 0c       	add	r12, r12
   1979c:	dd 1c       	adc	r13, r13
   1979e:	ee 1c       	adc	r14, r14
   197a0:	ff 1c       	adc	r15, r15
   197a2:	3a 95       	dec	r19
   197a4:	d1 f7       	brne	.-12     	; 0x1979a <lif_writedirindex+0x6e>
   197a6:	c8 0e       	add	r12, r24
   197a8:	d9 1e       	adc	r13, r25
   197aa:	ea 1e       	adc	r14, r26
   197ac:	fb 1e       	adc	r15, r27
   197ae:	be 01       	movw	r22, r28
   197b0:	6f 5f       	subi	r22, 0xFF	; 255
   197b2:	7f 4f       	sbci	r23, 0xFF	; 255
   197b4:	c5 01       	movw	r24, r10
   197b6:	97 d8       	rcall	.-3794   	; 0x188e6 <lif_dir2str>
   197b8:	00 e2       	ldi	r16, 0x20	; 32
   197ba:	10 e0       	ldi	r17, 0x00	; 0
   197bc:	a7 01       	movw	r20, r14
   197be:	96 01       	movw	r18, r12
   197c0:	be 01       	movw	r22, r28
   197c2:	6f 5f       	subi	r22, 0xFF	; 255
   197c4:	7f 4f       	sbci	r23, 0xFF	; 255
   197c6:	c5 01       	movw	r24, r10
   197c8:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   197cc:	31 e0       	ldi	r19, 0x01	; 1
   197ce:	20 e0       	ldi	r18, 0x00	; 0
   197d0:	80 97       	sbiw	r24, 0x20	; 32
   197d2:	0c f4       	brge	.+2      	; 0x197d6 <lif_writedirindex+0xaa>
   197d4:	30 e0       	ldi	r19, 0x00	; 0
   197d6:	e3 2e       	mov	r14, r19
   197d8:	f2 2e       	mov	r15, r18
   197da:	c7 01       	movw	r24, r14
   197dc:	a0 96       	adiw	r28, 0x20	; 32
   197de:	ea e0       	ldi	r30, 0x0A	; 10
   197e0:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

000197e4 <lif_writedirEOF>:
   197e4:	0f 93       	push	r16
   197e6:	1f 93       	push	r17
   197e8:	cf 93       	push	r28
   197ea:	df 93       	push	r29
   197ec:	ec 01       	movw	r28, r24
   197ee:	8b 01       	movw	r16, r22
   197f0:	33 da       	rcall	.-2970   	; 0x18c58 <lif_dir_clear>
   197f2:	fe 01       	movw	r30, r28
   197f4:	e6 5a       	subi	r30, 0xA6	; 166
   197f6:	ff 4f       	sbci	r31, 0xFF	; 255
   197f8:	8f ef       	ldi	r24, 0xFF	; 255
   197fa:	9f ef       	ldi	r25, 0xFF	; 255
   197fc:	91 83       	std	Z+1, r25	; 0x01
   197fe:	80 83       	st	Z, r24
   19800:	1b a3       	std	Y+35, r17	; 0x23
   19802:	0a a3       	std	Y+34, r16	; 0x22
   19804:	b8 01       	movw	r22, r16
   19806:	ce 01       	movw	r24, r28
   19808:	91 df       	rcall	.-222    	; 0x1972c <lif_writedirindex>
   1980a:	df 91       	pop	r29
   1980c:	cf 91       	pop	r28
   1980e:	1f 91       	pop	r17
   19810:	0f 91       	pop	r16
   19812:	08 95       	ret

00019814 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   19814:	2f 92       	push	r2
   19816:	3f 92       	push	r3
   19818:	4f 92       	push	r4
   1981a:	5f 92       	push	r5
   1981c:	6f 92       	push	r6
   1981e:	7f 92       	push	r7
   19820:	8f 92       	push	r8
   19822:	af 92       	push	r10
   19824:	bf 92       	push	r11
   19826:	cf 92       	push	r12
   19828:	df 92       	push	r13
   1982a:	ef 92       	push	r14
   1982c:	ff 92       	push	r15
   1982e:	0f 93       	push	r16
   19830:	1f 93       	push	r17
   19832:	cf 93       	push	r28
   19834:	df 93       	push	r29
   19836:	cd b7       	in	r28, 0x3d	; 61
   19838:	de b7       	in	r29, 0x3e	; 62
   1983a:	2f 97       	sbiw	r28, 0x0f	; 15
   1983c:	0f b6       	in	r0, 0x3f	; 63
   1983e:	f8 94       	cli
   19840:	de bf       	out	0x3e, r29	; 62
   19842:	0f be       	out	0x3f, r0	; 63
   19844:	cd bf       	out	0x3d, r28	; 61
   19846:	9f 87       	std	Y+15, r25	; 0x0f
   19848:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   1984a:	fc 01       	movw	r30, r24
   1984c:	24 84       	ldd	r2, Z+12	; 0x0c
   1984e:	35 84       	ldd	r3, Z+13	; 0x0d
   19850:	46 84       	ldd	r4, Z+14	; 0x0e
   19852:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   19854:	80 89       	ldd	r24, Z+16	; 0x10
   19856:	91 89       	ldd	r25, Z+17	; 0x11
   19858:	a2 89       	ldd	r26, Z+18	; 0x12
   1985a:	b3 89       	ldd	r27, Z+19	; 0x13
   1985c:	80 8f       	std	Z+24, r24	; 0x18
   1985e:	91 8f       	std	Z+25, r25	; 0x19
   19860:	a2 8f       	std	Z+26, r26	; 0x1a
   19862:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   19864:	14 8a       	std	Z+20, r1	; 0x14
   19866:	15 8a       	std	Z+21, r1	; 0x15
   19868:	16 8a       	std	Z+22, r1	; 0x16
   1986a:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   1986c:	17 8e       	std	Z+31, r1	; 0x1f
   1986e:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   19870:	15 8e       	std	Z+29, r1	; 0x1d
   19872:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   19874:	11 a2       	std	Z+33, r1	; 0x21
   19876:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19878:	13 a2       	std	Z+35, r1	; 0x23
   1987a:	12 a2       	std	Z+34, r1	; 0x22
   1987c:	cc 24       	eor	r12, r12
   1987e:	c3 94       	inc	r12
   19880:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   19882:	0f ef       	ldi	r16, 0xFF	; 255
   19884:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   19886:	e6 5a       	subi	r30, 0xA6	; 166
   19888:	ff 4f       	sbci	r31, 0xFF	; 255
   1988a:	f9 87       	std	Y+9, r31	; 0x09
   1988c:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   1988e:	ae 84       	ldd	r10, Y+14	; 0x0e
   19890:	bf 84       	ldd	r11, Y+15	; 0x0f
   19892:	fc e5       	ldi	r31, 0x5C	; 92
   19894:	af 0e       	add	r10, r31
   19896:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19898:	8e 85       	ldd	r24, Y+14	; 0x0e
   1989a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1989c:	80 5a       	subi	r24, 0xA0	; 160
   1989e:	9f 4f       	sbci	r25, 0xFF	; 255
   198a0:	9b 87       	std	Y+11, r25	; 0x0b
   198a2:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   198a4:	ee 85       	ldd	r30, Y+14	; 0x0e
   198a6:	ff 85       	ldd	r31, Y+15	; 0x0f
   198a8:	e1 5b       	subi	r30, 0xB1	; 177
   198aa:	ff 4f       	sbci	r31, 0xFF	; 255
   198ac:	fd 87       	std	Y+13, r31	; 0x0d
   198ae:	ec 87       	std	Y+12, r30	; 0x0c
   198b0:	87 ea       	ldi	r24, 0xA7	; 167
   198b2:	9c e3       	ldi	r25, 0x3C	; 60
   198b4:	3c 01       	movw	r6, r24
   198b6:	81 2c       	mov	r8, r1
   198b8:	76 01       	movw	r14, r12
   198ba:	21 e0       	ldi	r18, 0x01	; 1
   198bc:	e2 1a       	sub	r14, r18
   198be:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   198c0:	b7 01       	movw	r22, r14
   198c2:	8e 85       	ldd	r24, Y+14	; 0x0e
   198c4:	9f 85       	ldd	r25, Y+15	; 0x0f
   198c6:	cb de       	rcall	.-618    	; 0x1965e <lif_readdirindex>
   198c8:	89 2b       	or	r24, r25
   198ca:	19 f4       	brne	.+6      	; 0x198d2 <lif_updatefree+0xbe>
        {
            return(NULL);
   198cc:	80 e0       	ldi	r24, 0x00	; 0
   198ce:	90 e0       	ldi	r25, 0x00	; 0
   198d0:	93 c0       	rjmp	.+294    	; 0x199f8 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   198d2:	e8 85       	ldd	r30, Y+8	; 0x08
   198d4:	f9 85       	ldd	r31, Y+9	; 0x09
   198d6:	80 81       	ld	r24, Z
   198d8:	91 81       	ldd	r25, Z+1	; 0x01
   198da:	8f 3f       	cpi	r24, 0xFF	; 255
   198dc:	ff ef       	ldi	r31, 0xFF	; 255
   198de:	9f 07       	cpc	r25, r31
   198e0:	c1 f4       	brne	.+48     	; 0x19912 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   198e2:	ee 85       	ldd	r30, Y+14	; 0x0e
   198e4:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   198e6:	0f 3f       	cpi	r16, 0xFF	; 255
   198e8:	2f ef       	ldi	r18, 0xFF	; 255
   198ea:	12 07       	cpc	r17, r18
   198ec:	09 f4       	brne	.+2      	; 0x198f0 <lif_updatefree+0xdc>
   198ee:	7a c0       	rjmp	.+244    	; 0x199e4 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   198f0:	13 a3       	std	Z+35, r17	; 0x23
   198f2:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   198f4:	e0 1a       	sub	r14, r16
   198f6:	f1 0a       	sbc	r15, r17
   198f8:	86 8d       	ldd	r24, Z+30	; 0x1e
   198fa:	97 8d       	ldd	r25, Z+31	; 0x1f
   198fc:	8e 19       	sub	r24, r14
   198fe:	9f 09       	sbc	r25, r15
   19900:	97 8f       	std	Z+31, r25	; 0x1f
   19902:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19904:	b8 01       	movw	r22, r16
   19906:	cf 01       	movw	r24, r30
   19908:	6d df       	rcall	.-294    	; 0x197e4 <lif_writedirEOF>
   1990a:	89 2b       	or	r24, r25
   1990c:	09 f0       	breq	.+2      	; 0x19910 <lif_updatefree+0xfc>
   1990e:	6c c0       	rjmp	.+216    	; 0x199e8 <lif_updatefree+0x1d4>
   19910:	dd cf       	rjmp	.-70     	; 0x198cc <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   19912:	89 2b       	or	r24, r25
   19914:	81 f4       	brne	.+32     	; 0x19936 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   19916:	0f 3f       	cpi	r16, 0xFF	; 255
   19918:	ff ef       	ldi	r31, 0xFF	; 255
   1991a:	1f 07       	cpc	r17, r31
   1991c:	09 f4       	brne	.+2      	; 0x19920 <lif_updatefree+0x10c>
   1991e:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   19920:	ee 85       	ldd	r30, Y+14	; 0x0e
   19922:	ff 85       	ldd	r31, Y+15	; 0x0f
   19924:	86 8d       	ldd	r24, Z+30	; 0x1e
   19926:	97 8d       	ldd	r25, Z+31	; 0x1f
   19928:	01 96       	adiw	r24, 0x01	; 1
   1992a:	97 8f       	std	Z+31, r25	; 0x1f
   1992c:	86 8f       	std	Z+30, r24	; 0x1e
   1992e:	ff ef       	ldi	r31, 0xFF	; 255
   19930:	cf 1a       	sub	r12, r31
   19932:	df 0a       	sbc	r13, r31
   19934:	c1 cf       	rjmp	.-126    	; 0x198b8 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19936:	f5 01       	movw	r30, r10
   19938:	80 81       	ld	r24, Z
   1993a:	91 81       	ldd	r25, Z+1	; 0x01
   1993c:	a2 81       	ldd	r26, Z+2	; 0x02
   1993e:	b3 81       	ldd	r27, Z+3	; 0x03
   19940:	82 15       	cp	r24, r2
   19942:	93 05       	cpc	r25, r3
   19944:	a4 05       	cpc	r26, r4
   19946:	b5 05       	cpc	r27, r5
   19948:	c8 f4       	brcc	.+50     	; 0x1997c <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   1994a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1994e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19952:	92 ff       	sbrs	r25, 2
   19954:	13 c0       	rjmp	.+38     	; 0x1997c <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19956:	8c 85       	ldd	r24, Y+12	; 0x0c
   19958:	9d 85       	ldd	r25, Y+13	; 0x0d
   1995a:	ed b7       	in	r30, 0x3d	; 61
   1995c:	fe b7       	in	r31, 0x3e	; 62
   1995e:	97 83       	std	Z+7, r25	; 0x07
   19960:	86 83       	std	Z+6, r24	; 0x06
   19962:	ee 85       	ldd	r30, Y+14	; 0x0e
   19964:	ff 85       	ldd	r31, Y+15	; 0x0f
   19966:	80 81       	ld	r24, Z
   19968:	91 81       	ldd	r25, Z+1	; 0x01
   1996a:	ed b7       	in	r30, 0x3d	; 61
   1996c:	fe b7       	in	r31, 0x3e	; 62
   1996e:	95 83       	std	Z+5, r25	; 0x05
   19970:	84 83       	std	Z+4, r24	; 0x04
   19972:	61 82       	std	Z+1, r6	; 0x01
   19974:	72 82       	std	Z+2, r7	; 0x02
   19976:	83 82       	std	Z+3, r8	; 0x03
   19978:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   1997c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1997e:	fb 85       	ldd	r31, Y+11	; 0x0b
   19980:	80 81       	ld	r24, Z
   19982:	91 81       	ldd	r25, Z+1	; 0x01
   19984:	a2 81       	ldd	r26, Z+2	; 0x02
   19986:	b3 81       	ldd	r27, Z+3	; 0x03
   19988:	ee 85       	ldd	r30, Y+14	; 0x0e
   1998a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1998c:	44 89       	ldd	r20, Z+20	; 0x14
   1998e:	55 89       	ldd	r21, Z+21	; 0x15
   19990:	66 89       	ldd	r22, Z+22	; 0x16
   19992:	77 89       	ldd	r23, Z+23	; 0x17
   19994:	48 0f       	add	r20, r24
   19996:	59 1f       	adc	r21, r25
   19998:	6a 1f       	adc	r22, r26
   1999a:	7b 1f       	adc	r23, r27
   1999c:	44 8b       	std	Z+20, r20	; 0x14
   1999e:	55 8b       	std	Z+21, r21	; 0x15
   199a0:	66 8b       	std	Z+22, r22	; 0x16
   199a2:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   199a4:	40 8d       	ldd	r20, Z+24	; 0x18
   199a6:	51 8d       	ldd	r21, Z+25	; 0x19
   199a8:	62 8d       	ldd	r22, Z+26	; 0x1a
   199aa:	73 8d       	ldd	r23, Z+27	; 0x1b
   199ac:	48 1b       	sub	r20, r24
   199ae:	59 0b       	sbc	r21, r25
   199b0:	6a 0b       	sbc	r22, r26
   199b2:	7b 0b       	sbc	r23, r27
   199b4:	40 8f       	std	Z+24, r20	; 0x18
   199b6:	51 8f       	std	Z+25, r21	; 0x19
   199b8:	62 8f       	std	Z+26, r22	; 0x1a
   199ba:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   199bc:	24 8d       	ldd	r18, Z+28	; 0x1c
   199be:	35 8d       	ldd	r19, Z+29	; 0x1d
   199c0:	2f 5f       	subi	r18, 0xFF	; 255
   199c2:	3f 4f       	sbci	r19, 0xFF	; 255
   199c4:	35 8f       	std	Z+29, r19	; 0x1d
   199c6:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   199c8:	f5 01       	movw	r30, r10
   199ca:	40 81       	ld	r20, Z
   199cc:	51 81       	ldd	r21, Z+1	; 0x01
   199ce:	62 81       	ldd	r22, Z+2	; 0x02
   199d0:	73 81       	ldd	r23, Z+3	; 0x03
   199d2:	1c 01       	movw	r2, r24
   199d4:	2d 01       	movw	r4, r26
   199d6:	24 0e       	add	r2, r20
   199d8:	35 1e       	adc	r3, r21
   199da:	46 1e       	adc	r4, r22
   199dc:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   199de:	0f ef       	ldi	r16, 0xFF	; 255
   199e0:	1f ef       	ldi	r17, 0xFF	; 255
   199e2:	a5 cf       	rjmp	.-182    	; 0x1992e <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   199e4:	f3 a2       	std	Z+35, r15	; 0x23
   199e6:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   199e8:	8f ef       	ldi	r24, 0xFF	; 255
   199ea:	9f ef       	ldi	r25, 0xFF	; 255
   199ec:	ee 85       	ldd	r30, Y+14	; 0x0e
   199ee:	ff 85       	ldd	r31, Y+15	; 0x0f
   199f0:	91 a3       	std	Z+33, r25	; 0x21
   199f2:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   199f4:	8e 85       	ldd	r24, Y+14	; 0x0e
   199f6:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   199f8:	2f 96       	adiw	r28, 0x0f	; 15
   199fa:	0f b6       	in	r0, 0x3f	; 63
   199fc:	f8 94       	cli
   199fe:	de bf       	out	0x3e, r29	; 62
   19a00:	0f be       	out	0x3f, r0	; 63
   19a02:	cd bf       	out	0x3d, r28	; 61
   19a04:	df 91       	pop	r29
   19a06:	cf 91       	pop	r28
   19a08:	1f 91       	pop	r17
   19a0a:	0f 91       	pop	r16
   19a0c:	ff 90       	pop	r15
   19a0e:	ef 90       	pop	r14
   19a10:	df 90       	pop	r13
   19a12:	cf 90       	pop	r12
   19a14:	bf 90       	pop	r11
   19a16:	af 90       	pop	r10
   19a18:	8f 90       	pop	r8
   19a1a:	7f 90       	pop	r7
   19a1c:	6f 90       	pop	r6
   19a1e:	5f 90       	pop	r5
   19a20:	4f 90       	pop	r4
   19a22:	3f 90       	pop	r3
   19a24:	2f 90       	pop	r2
   19a26:	08 95       	ret

00019a28 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19a28:	a9 e2       	ldi	r26, 0x29	; 41
   19a2a:	b1 e0       	ldi	r27, 0x01	; 1
   19a2c:	ea e1       	ldi	r30, 0x1A	; 26
   19a2e:	fd ec       	ldi	r31, 0xCD	; 205
   19a30:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   19a34:	4c 01       	movw	r8, r24
   19a36:	3b 01       	movw	r6, r22
   19a38:	19 01       	movw	r2, r18
   19a3a:	2a 01       	movw	r4, r20
   19a3c:	ca 5d       	subi	r28, 0xDA	; 218
   19a3e:	de 4f       	sbci	r29, 0xFE	; 254
   19a40:	e8 82       	st	Y, r14
   19a42:	f9 82       	std	Y+1, r15	; 0x01
   19a44:	0a 83       	std	Y+2, r16	; 0x02
   19a46:	1b 83       	std	Y+3, r17	; 0x03
   19a48:	c6 52       	subi	r28, 0x26	; 38
   19a4a:	d1 40       	sbci	r29, 0x01	; 1
   19a4c:	c2 5e       	subi	r28, 0xE2	; 226
   19a4e:	de 4f       	sbci	r29, 0xFE	; 254
   19a50:	a8 82       	st	Y, r10
   19a52:	b9 82       	std	Y+1, r11	; 0x01
   19a54:	ca 82       	std	Y+2, r12	; 0x02
   19a56:	db 82       	std	Y+3, r13	; 0x03
   19a58:	ce 51       	subi	r28, 0x1E	; 30
   19a5a:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19a5c:	80 e0       	ldi	r24, 0x00	; 0
   19a5e:	90 e0       	ldi	r25, 0x00	; 0
   19a60:	0e 94 0d 38 	call	0x701a	; 0x701a <time>
   19a64:	5b 01       	movw	r10, r22
   19a66:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19a68:	64 e7       	ldi	r22, 0x74	; 116
   19a6a:	70 e0       	ldi	r23, 0x00	; 0
   19a6c:	80 e0       	ldi	r24, 0x00	; 0
   19a6e:	90 e0       	ldi	r25, 0x00	; 0
   19a70:	0e 94 e7 c0 	call	0x181ce	; 0x181ce <lif_calloc>
   19a74:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19a76:	89 2b       	or	r24, r25
   19a78:	09 f4       	brne	.+2      	; 0x19a7c <lif_create_volume+0x54>
   19a7a:	b6 c2       	rjmp	.+1388   	; 0x19fe8 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19a7c:	c2 5e       	subi	r28, 0xE2	; 226
   19a7e:	de 4f       	sbci	r29, 0xFE	; 254
   19a80:	28 81       	ld	r18, Y
   19a82:	39 81       	ldd	r19, Y+1	; 0x01
   19a84:	4a 81       	ldd	r20, Y+2	; 0x02
   19a86:	5b 81       	ldd	r21, Y+3	; 0x03
   19a88:	ce 51       	subi	r28, 0x1E	; 30
   19a8a:	d1 40       	sbci	r29, 0x01	; 1
   19a8c:	ed b7       	in	r30, 0x3d	; 61
   19a8e:	fe b7       	in	r31, 0x3e	; 62
   19a90:	20 8b       	std	Z+16, r18	; 0x10
   19a92:	31 8b       	std	Z+17, r19	; 0x11
   19a94:	42 8b       	std	Z+18, r20	; 0x12
   19a96:	53 8b       	std	Z+19, r21	; 0x13
   19a98:	ca 5d       	subi	r28, 0xDA	; 218
   19a9a:	de 4f       	sbci	r29, 0xFE	; 254
   19a9c:	28 81       	ld	r18, Y
   19a9e:	39 81       	ldd	r19, Y+1	; 0x01
   19aa0:	4a 81       	ldd	r20, Y+2	; 0x02
   19aa2:	5b 81       	ldd	r21, Y+3	; 0x03
   19aa4:	c6 52       	subi	r28, 0x26	; 38
   19aa6:	d1 40       	sbci	r29, 0x01	; 1
   19aa8:	24 87       	std	Z+12, r18	; 0x0c
   19aaa:	35 87       	std	Z+13, r19	; 0x0d
   19aac:	46 87       	std	Z+14, r20	; 0x0e
   19aae:	57 87       	std	Z+15, r21	; 0x0f
   19ab0:	20 86       	std	Z+8, r2	; 0x08
   19ab2:	31 86       	std	Z+9, r3	; 0x09
   19ab4:	42 86       	std	Z+10, r4	; 0x0a
   19ab6:	53 86       	std	Z+11, r5	; 0x0b
   19ab8:	77 82       	std	Z+7, r7	; 0x07
   19aba:	66 82       	std	Z+6, r6	; 0x06
   19abc:	95 82       	std	Z+5, r9	; 0x05
   19abe:	84 82       	std	Z+4, r8	; 0x04
   19ac0:	82 e8       	ldi	r24, 0x82	; 130
   19ac2:	9d e3       	ldi	r25, 0x3D	; 61
   19ac4:	a0 e0       	ldi	r26, 0x00	; 0
   19ac6:	81 83       	std	Z+1, r24	; 0x01
   19ac8:	92 83       	std	Z+2, r25	; 0x02
   19aca:	a3 83       	std	Z+3, r26	; 0x03
   19acc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19ad0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ad4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ad8:	92 ff       	sbrs	r25, 2
   19ada:	04 c0       	rjmp	.+8      	; 0x19ae4 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19adc:	64 e2       	ldi	r22, 0x24	; 36
   19ade:	76 e1       	ldi	r23, 0x16	; 22
   19ae0:	c7 01       	movw	r24, r14
   19ae2:	c9 d8       	rcall	.-3694   	; 0x18c76 <lif_dump_vol>

    lif_image_clear(LIF);
   19ae4:	c7 01       	movw	r24, r14
   19ae6:	b2 d8       	rcall	.-3740   	; 0x18c4c <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19ae8:	80 e0       	ldi	r24, 0x00	; 0
   19aea:	90 e8       	ldi	r25, 0x80	; 128
   19aec:	f7 01       	movw	r30, r14
   19aee:	95 a3       	std	Z+37, r25	; 0x25
   19af0:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19af2:	46 e0       	ldi	r20, 0x06	; 6
   19af4:	50 e0       	ldi	r21, 0x00	; 0
   19af6:	b3 01       	movw	r22, r6
   19af8:	c7 01       	movw	r24, r14
   19afa:	86 96       	adiw	r24, 0x26	; 38
   19afc:	0e 94 2a c3 	call	0x18654	; 0x18654 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19b00:	f7 01       	movw	r30, r14
   19b02:	25 a6       	std	Z+45, r2	; 0x2d
   19b04:	36 a6       	std	Z+46, r3	; 0x2e
   19b06:	47 a6       	std	Z+47, r4	; 0x2f
   19b08:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19b0a:	ca 5d       	subi	r28, 0xDA	; 218
   19b0c:	de 4f       	sbci	r29, 0xFE	; 254
   19b0e:	28 81       	ld	r18, Y
   19b10:	39 81       	ldd	r19, Y+1	; 0x01
   19b12:	4a 81       	ldd	r20, Y+2	; 0x02
   19b14:	5b 81       	ldd	r21, Y+3	; 0x03
   19b16:	c6 52       	subi	r28, 0x26	; 38
   19b18:	d1 40       	sbci	r29, 0x01	; 1
   19b1a:	25 ab       	std	Z+53, r18	; 0x35
   19b1c:	36 ab       	std	Z+54, r19	; 0x36
   19b1e:	47 ab       	std	Z+55, r20	; 0x37
   19b20:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19b22:	80 e0       	ldi	r24, 0x00	; 0
   19b24:	90 e1       	ldi	r25, 0x10	; 16
   19b26:	92 ab       	std	Z+50, r25	; 0x32
   19b28:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19b2a:	fd 96       	adiw	r30, 0x3d	; 61
   19b2c:	10 82       	st	Z, r1
   19b2e:	11 82       	std	Z+1, r1	; 0x01
   19b30:	12 82       	std	Z+2, r1	; 0x02
   19b32:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19b34:	34 96       	adiw	r30, 0x04	; 4
   19b36:	10 82       	st	Z, r1
   19b38:	11 82       	std	Z+1, r1	; 0x01
   19b3a:	12 82       	std	Z+2, r1	; 0x02
   19b3c:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19b3e:	34 96       	adiw	r30, 0x04	; 4
   19b40:	10 82       	st	Z, r1
   19b42:	11 82       	std	Z+1, r1	; 0x01
   19b44:	12 82       	std	Z+2, r1	; 0x02
   19b46:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19b48:	a7 01       	movw	r20, r14
   19b4a:	47 5b       	subi	r20, 0xB7	; 183
   19b4c:	5f 4f       	sbci	r21, 0xFF	; 255
   19b4e:	c6 01       	movw	r24, r12
   19b50:	b5 01       	movw	r22, r10
   19b52:	0e 94 4f c5 	call	0x18a9e	; 0x18a9e <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19b56:	c4 01       	movw	r24, r8
   19b58:	0e 94 32 c1 	call	0x18264	; 0x18264 <lif_stralloc>
   19b5c:	d7 01       	movw	r26, r14
   19b5e:	8d 93       	st	X+, r24
   19b60:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19b62:	89 2b       	or	r24, r25
   19b64:	09 f4       	brne	.+2      	; 0x19b68 <lif_create_volume+0x140>
   19b66:	35 c2       	rjmp	.+1130   	; 0x19fd2 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19b68:	c2 5e       	subi	r28, 0xE2	; 226
   19b6a:	de 4f       	sbci	r29, 0xFE	; 254
   19b6c:	28 81       	ld	r18, Y
   19b6e:	39 81       	ldd	r19, Y+1	; 0x01
   19b70:	4a 81       	ldd	r20, Y+2	; 0x02
   19b72:	5b 81       	ldd	r21, Y+3	; 0x03
   19b74:	ce 51       	subi	r28, 0x1E	; 30
   19b76:	d1 40       	sbci	r29, 0x01	; 1
   19b78:	f7 01       	movw	r30, r14
   19b7a:	20 8b       	std	Z+16, r18	; 0x10
   19b7c:	31 8b       	std	Z+17, r19	; 0x11
   19b7e:	42 8b       	std	Z+18, r20	; 0x12
   19b80:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19b82:	ca 5d       	subi	r28, 0xDA	; 218
   19b84:	de 4f       	sbci	r29, 0xFE	; 254
   19b86:	88 81       	ld	r24, Y
   19b88:	99 81       	ldd	r25, Y+1	; 0x01
   19b8a:	aa 81       	ldd	r26, Y+2	; 0x02
   19b8c:	bb 81       	ldd	r27, Y+3	; 0x03
   19b8e:	c6 52       	subi	r28, 0x26	; 38
   19b90:	d1 40       	sbci	r29, 0x01	; 1
   19b92:	82 0d       	add	r24, r2
   19b94:	93 1d       	adc	r25, r3
   19b96:	a4 1d       	adc	r26, r4
   19b98:	b5 1d       	adc	r27, r5
   19b9a:	84 87       	std	Z+12, r24	; 0x0c
   19b9c:	95 87       	std	Z+13, r25	; 0x0d
   19b9e:	a6 87       	std	Z+14, r26	; 0x0e
   19ba0:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19ba2:	82 0f       	add	r24, r18
   19ba4:	93 1f       	adc	r25, r19
   19ba6:	a4 1f       	adc	r26, r20
   19ba8:	b5 1f       	adc	r27, r21
   19baa:	84 83       	std	Z+4, r24	; 0x04
   19bac:	95 83       	std	Z+5, r25	; 0x05
   19bae:	a6 83       	std	Z+6, r26	; 0x06
   19bb0:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19bb2:	ba 2f       	mov	r27, r26
   19bb4:	a9 2f       	mov	r26, r25
   19bb6:	98 2f       	mov	r25, r24
   19bb8:	88 27       	eor	r24, r24
   19bba:	80 87       	std	Z+8, r24	; 0x08
   19bbc:	91 87       	std	Z+9, r25	; 0x09
   19bbe:	a2 87       	std	Z+10, r26	; 0x0a
   19bc0:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19bc2:	20 8f       	std	Z+24, r18	; 0x18
   19bc4:	31 8f       	std	Z+25, r19	; 0x19
   19bc6:	42 8f       	std	Z+26, r20	; 0x1a
   19bc8:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19bca:	14 8a       	std	Z+20, r1	; 0x14
   19bcc:	15 8a       	std	Z+21, r1	; 0x15
   19bce:	16 8a       	std	Z+22, r1	; 0x16
   19bd0:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19bd2:	15 8e       	std	Z+29, r1	; 0x1d
   19bd4:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19bd6:	17 8e       	std	Z+31, r1	; 0x1f
   19bd8:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19bda:	11 a2       	std	Z+33, r1	; 0x21
   19bdc:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19bde:	13 a2       	std	Z+35, r1	; 0x23
   19be0:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19be2:	61 2c       	mov	r6, r1
   19be4:	77 24       	eor	r7, r7
   19be6:	73 94       	inc	r7
   19be8:	9e 01       	movw	r18, r28
   19bea:	2c 5e       	subi	r18, 0xEC	; 236
   19bec:	3f 4f       	sbci	r19, 0xFF	; 255
   19bee:	49 01       	movw	r8, r18
   19bf0:	d9 01       	movw	r26, r18
   19bf2:	f3 01       	movw	r30, r6
   19bf4:	1d 92       	st	X+, r1
   19bf6:	31 97       	sbiw	r30, 0x01	; 1
   19bf8:	e9 f7       	brne	.-6      	; 0x19bf4 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19bfa:	b9 01       	movw	r22, r18
   19bfc:	c7 01       	movw	r24, r14
   19bfe:	0e 94 67 c3 	call	0x186ce	; 0x186ce <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19c02:	66 e1       	ldi	r22, 0x16	; 22
   19c04:	79 e0       	ldi	r23, 0x09	; 9
   19c06:	d7 01       	movw	r26, r14
   19c08:	8d 91       	ld	r24, X+
   19c0a:	9c 91       	ld	r25, X
   19c0c:	0e 94 51 c1 	call	0x182a2	; 0x182a2 <lif_open>
   19c10:	f7 01       	movw	r30, r14
   19c12:	93 83       	std	Z+3, r25	; 0x03
   19c14:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19c16:	89 2b       	or	r24, r25
   19c18:	09 f4       	brne	.+2      	; 0x19c1c <lif_create_volume+0x1f4>
   19c1a:	db c1       	rjmp	.+950    	; 0x19fd2 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c1c:	00 e0       	ldi	r16, 0x00	; 0
   19c1e:	11 e0       	ldi	r17, 0x01	; 1
   19c20:	20 e0       	ldi	r18, 0x00	; 0
   19c22:	30 e0       	ldi	r19, 0x00	; 0
   19c24:	a9 01       	movw	r20, r18
   19c26:	b4 01       	movw	r22, r8
   19c28:	c7 01       	movw	r24, r14
   19c2a:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19c2e:	9c 01       	movw	r18, r24
   19c30:	99 0f       	add	r25, r25
   19c32:	44 0b       	sbc	r20, r20
   19c34:	55 0b       	sbc	r21, r21
   19c36:	ca 5e       	subi	r28, 0xEA	; 234
   19c38:	de 4f       	sbci	r29, 0xFE	; 254
   19c3a:	28 83       	st	Y, r18
   19c3c:	39 83       	std	Y+1, r19	; 0x01
   19c3e:	4a 83       	std	Y+2, r20	; 0x02
   19c40:	5b 83       	std	Y+3, r21	; 0x03
   19c42:	c6 51       	subi	r28, 0x16	; 22
   19c44:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19c46:	2f 3f       	cpi	r18, 0xFF	; 255
   19c48:	31 05       	cpc	r19, r1
   19c4a:	41 05       	cpc	r20, r1
   19c4c:	51 05       	cpc	r21, r1
   19c4e:	09 f0       	breq	.+2      	; 0x19c52 <lif_create_volume+0x22a>
   19c50:	0c f4       	brge	.+2      	; 0x19c54 <lif_create_volume+0x22c>
   19c52:	bf c1       	rjmp	.+894    	; 0x19fd2 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19c54:	d4 01       	movw	r26, r8
   19c56:	f3 01       	movw	r30, r6
   19c58:	1d 92       	st	X+, r1
   19c5a:	31 97       	sbiw	r30, 0x01	; 1
   19c5c:	e9 f7       	brne	.-6      	; 0x19c58 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c5e:	21 e0       	ldi	r18, 0x01	; 1
   19c60:	30 e0       	ldi	r19, 0x00	; 0
   19c62:	40 e0       	ldi	r20, 0x00	; 0
   19c64:	50 e0       	ldi	r21, 0x00	; 0
   19c66:	c6 5e       	subi	r28, 0xE6	; 230
   19c68:	de 4f       	sbci	r29, 0xFE	; 254
   19c6a:	28 83       	st	Y, r18
   19c6c:	39 83       	std	Y+1, r19	; 0x01
   19c6e:	4a 83       	std	Y+2, r20	; 0x02
   19c70:	5b 83       	std	Y+3, r21	; 0x03
   19c72:	ca 51       	subi	r28, 0x1A	; 26
   19c74:	d1 40       	sbci	r29, 0x01	; 1
   19c76:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19c78:	85 e7       	ldi	r24, 0x75	; 117
   19c7a:	9d e3       	ldi	r25, 0x3D	; 61
   19c7c:	3c 01       	movw	r6, r24
   19c7e:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c80:	c6 5e       	subi	r28, 0xE6	; 230
   19c82:	de 4f       	sbci	r29, 0xFE	; 254
   19c84:	88 81       	ld	r24, Y
   19c86:	99 81       	ldd	r25, Y+1	; 0x01
   19c88:	aa 81       	ldd	r26, Y+2	; 0x02
   19c8a:	bb 81       	ldd	r27, Y+3	; 0x03
   19c8c:	ca 51       	subi	r28, 0x1A	; 26
   19c8e:	d1 40       	sbci	r29, 0x01	; 1
   19c90:	82 15       	cp	r24, r2
   19c92:	93 05       	cpc	r25, r3
   19c94:	a4 05       	cpc	r26, r4
   19c96:	b5 05       	cpc	r27, r5
   19c98:	0c f0       	brlt	.+2      	; 0x19c9c <lif_create_volume+0x274>
   19c9a:	55 c0       	rjmp	.+170    	; 0x19d46 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c9c:	00 e0       	ldi	r16, 0x00	; 0
   19c9e:	11 e0       	ldi	r17, 0x01	; 1
   19ca0:	ca 5e       	subi	r28, 0xEA	; 234
   19ca2:	de 4f       	sbci	r29, 0xFE	; 254
   19ca4:	28 81       	ld	r18, Y
   19ca6:	39 81       	ldd	r19, Y+1	; 0x01
   19ca8:	4a 81       	ldd	r20, Y+2	; 0x02
   19caa:	5b 81       	ldd	r21, Y+3	; 0x03
   19cac:	c6 51       	subi	r28, 0x16	; 22
   19cae:	d1 40       	sbci	r29, 0x01	; 1
   19cb0:	b6 01       	movw	r22, r12
   19cb2:	c7 01       	movw	r24, r14
   19cb4:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19cb8:	09 2e       	mov	r0, r25
   19cba:	00 0c       	add	r0, r0
   19cbc:	aa 0b       	sbc	r26, r26
   19cbe:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19cc0:	8f 3f       	cpi	r24, 0xFF	; 255
   19cc2:	91 05       	cpc	r25, r1
   19cc4:	a1 05       	cpc	r26, r1
   19cc6:	b1 05       	cpc	r27, r1
   19cc8:	09 f0       	breq	.+2      	; 0x19ccc <lif_create_volume+0x2a4>
   19cca:	0c f4       	brge	.+2      	; 0x19cce <lif_create_volume+0x2a6>
   19ccc:	82 c1       	rjmp	.+772    	; 0x19fd2 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19cce:	ca 5e       	subi	r28, 0xEA	; 234
   19cd0:	de 4f       	sbci	r29, 0xFE	; 254
   19cd2:	28 81       	ld	r18, Y
   19cd4:	39 81       	ldd	r19, Y+1	; 0x01
   19cd6:	4a 81       	ldd	r20, Y+2	; 0x02
   19cd8:	5b 81       	ldd	r21, Y+3	; 0x03
   19cda:	c6 51       	subi	r28, 0x16	; 22
   19cdc:	d1 40       	sbci	r29, 0x01	; 1
   19cde:	28 0f       	add	r18, r24
   19ce0:	39 1f       	adc	r19, r25
   19ce2:	4a 1f       	adc	r20, r26
   19ce4:	5b 1f       	adc	r21, r27
   19ce6:	ca 5e       	subi	r28, 0xEA	; 234
   19ce8:	de 4f       	sbci	r29, 0xFE	; 254
   19cea:	28 83       	st	Y, r18
   19cec:	39 83       	std	Y+1, r19	; 0x01
   19cee:	4a 83       	std	Y+2, r20	; 0x02
   19cf0:	5b 83       	std	Y+3, r21	; 0x03
   19cf2:	c6 51       	subi	r28, 0x16	; 22
   19cf4:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19cf6:	c6 5e       	subi	r28, 0xE6	; 230
   19cf8:	de 4f       	sbci	r29, 0xFE	; 254
   19cfa:	88 81       	ld	r24, Y
   19cfc:	99 81       	ldd	r25, Y+1	; 0x01
   19cfe:	aa 81       	ldd	r26, Y+2	; 0x02
   19d00:	bb 81       	ldd	r27, Y+3	; 0x03
   19d02:	ca 51       	subi	r28, 0x1A	; 26
   19d04:	d1 40       	sbci	r29, 0x01	; 1
   19d06:	ed b7       	in	r30, 0x3d	; 61
   19d08:	fe b7       	in	r31, 0x3e	; 62
   19d0a:	84 83       	std	Z+4, r24	; 0x04
   19d0c:	95 83       	std	Z+5, r25	; 0x05
   19d0e:	a6 83       	std	Z+6, r26	; 0x06
   19d10:	b7 83       	std	Z+7, r27	; 0x07
   19d12:	61 82       	std	Z+1, r6	; 0x01
   19d14:	72 82       	std	Z+2, r7	; 0x02
   19d16:	83 82       	std	Z+3, r8	; 0x03
   19d18:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d1c:	c6 5e       	subi	r28, 0xE6	; 230
   19d1e:	de 4f       	sbci	r29, 0xFE	; 254
   19d20:	28 81       	ld	r18, Y
   19d22:	39 81       	ldd	r19, Y+1	; 0x01
   19d24:	4a 81       	ldd	r20, Y+2	; 0x02
   19d26:	5b 81       	ldd	r21, Y+3	; 0x03
   19d28:	ca 51       	subi	r28, 0x1A	; 26
   19d2a:	d1 40       	sbci	r29, 0x01	; 1
   19d2c:	2f 5f       	subi	r18, 0xFF	; 255
   19d2e:	3f 4f       	sbci	r19, 0xFF	; 255
   19d30:	4f 4f       	sbci	r20, 0xFF	; 255
   19d32:	5f 4f       	sbci	r21, 0xFF	; 255
   19d34:	c6 5e       	subi	r28, 0xE6	; 230
   19d36:	de 4f       	sbci	r29, 0xFE	; 254
   19d38:	28 83       	st	Y, r18
   19d3a:	39 83       	std	Y+1, r19	; 0x01
   19d3c:	4a 83       	std	Y+2, r20	; 0x02
   19d3e:	5b 83       	std	Y+3, r21	; 0x03
   19d40:	ca 51       	subi	r28, 0x1A	; 26
   19d42:	d1 40       	sbci	r29, 0x01	; 1
   19d44:	9d cf       	rjmp	.-198    	; 0x19c80 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19d46:	c7 01       	movw	r24, r14
   19d48:	0e 94 2c c6 	call	0x18c58	; 0x18c58 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19d4c:	8f ef       	ldi	r24, 0xFF	; 255
   19d4e:	9f ef       	ldi	r25, 0xFF	; 255
   19d50:	f7 01       	movw	r30, r14
   19d52:	e6 5a       	subi	r30, 0xA6	; 166
   19d54:	ff 4f       	sbci	r31, 0xFF	; 255
   19d56:	91 83       	std	Z+1, r25	; 0x01
   19d58:	80 83       	st	Z, r24
   19d5a:	46 01       	movw	r8, r12
   19d5c:	6e 01       	movw	r12, r28
   19d5e:	9c ee       	ldi	r25, 0xEC	; 236
   19d60:	c9 1a       	sub	r12, r25
   19d62:	9e ef       	ldi	r25, 0xFE	; 254
   19d64:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19d66:	b4 01       	movw	r22, r8
   19d68:	c7 01       	movw	r24, r14
   19d6a:	0e 94 73 c4 	call	0x188e6	; 0x188e6 <lif_dir2str>
   19d6e:	a0 e2       	ldi	r26, 0x20	; 32
   19d70:	8a 0e       	add	r8, r26
   19d72:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19d74:	c8 14       	cp	r12, r8
   19d76:	d9 04       	cpc	r13, r9
   19d78:	b1 f7       	brne	.-20     	; 0x19d66 <lif_create_volume+0x33e>
   19d7a:	a1 2c       	mov	r10, r1
   19d7c:	b1 2c       	mov	r11, r1
   19d7e:	65 01       	movw	r12, r10
   19d80:	fe 01       	movw	r30, r28
   19d82:	74 96       	adiw	r30, 0x14	; 20
   19d84:	cc 5e       	subi	r28, 0xEC	; 236
   19d86:	de 4f       	sbci	r29, 0xFE	; 254
   19d88:	f9 83       	std	Y+1, r31	; 0x01
   19d8a:	e8 83       	st	Y, r30
   19d8c:	c4 51       	subi	r28, 0x14	; 20
   19d8e:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19d90:	84 e6       	ldi	r24, 0x64	; 100
   19d92:	28 2e       	mov	r2, r24
   19d94:	31 2c       	mov	r3, r1
   19d96:	41 2c       	mov	r4, r1
   19d98:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19d9a:	88 e6       	ldi	r24, 0x68	; 104
   19d9c:	9d e3       	ldi	r25, 0x3D	; 61
   19d9e:	3c 01       	movw	r6, r24
   19da0:	81 2c       	mov	r8, r1
   19da2:	c6 5e       	subi	r28, 0xE6	; 230
   19da4:	de 4f       	sbci	r29, 0xFE	; 254
   19da6:	28 81       	ld	r18, Y
   19da8:	39 81       	ldd	r19, Y+1	; 0x01
   19daa:	4a 81       	ldd	r20, Y+2	; 0x02
   19dac:	5b 81       	ldd	r21, Y+3	; 0x03
   19dae:	ca 51       	subi	r28, 0x1A	; 26
   19db0:	d1 40       	sbci	r29, 0x01	; 1
   19db2:	2a 0d       	add	r18, r10
   19db4:	3b 1d       	adc	r19, r11
   19db6:	4c 1d       	adc	r20, r12
   19db8:	5d 1d       	adc	r21, r13
   19dba:	ce 5d       	subi	r28, 0xDE	; 222
   19dbc:	de 4f       	sbci	r29, 0xFE	; 254
   19dbe:	28 83       	st	Y, r18
   19dc0:	39 83       	std	Y+1, r19	; 0x01
   19dc2:	4a 83       	std	Y+2, r20	; 0x02
   19dc4:	5b 83       	std	Y+3, r21	; 0x03
   19dc6:	c2 52       	subi	r28, 0x22	; 34
   19dc8:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19dca:	ca 5d       	subi	r28, 0xDA	; 218
   19dcc:	de 4f       	sbci	r29, 0xFE	; 254
   19dce:	88 81       	ld	r24, Y
   19dd0:	99 81       	ldd	r25, Y+1	; 0x01
   19dd2:	aa 81       	ldd	r26, Y+2	; 0x02
   19dd4:	bb 81       	ldd	r27, Y+3	; 0x03
   19dd6:	c6 52       	subi	r28, 0x26	; 38
   19dd8:	d1 40       	sbci	r29, 0x01	; 1
   19dda:	a8 16       	cp	r10, r24
   19ddc:	b9 06       	cpc	r11, r25
   19dde:	ca 06       	cpc	r12, r26
   19de0:	db 06       	cpc	r13, r27
   19de2:	0c f0       	brlt	.+2      	; 0x19de6 <lif_create_volume+0x3be>
   19de4:	58 c0       	rjmp	.+176    	; 0x19e96 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19de6:	00 e0       	ldi	r16, 0x00	; 0
   19de8:	11 e0       	ldi	r17, 0x01	; 1
   19dea:	ca 5e       	subi	r28, 0xEA	; 234
   19dec:	de 4f       	sbci	r29, 0xFE	; 254
   19dee:	28 81       	ld	r18, Y
   19df0:	39 81       	ldd	r19, Y+1	; 0x01
   19df2:	4a 81       	ldd	r20, Y+2	; 0x02
   19df4:	5b 81       	ldd	r21, Y+3	; 0x03
   19df6:	c6 51       	subi	r28, 0x16	; 22
   19df8:	d1 40       	sbci	r29, 0x01	; 1
   19dfa:	be 01       	movw	r22, r28
   19dfc:	6c 5e       	subi	r22, 0xEC	; 236
   19dfe:	7f 4f       	sbci	r23, 0xFF	; 255
   19e00:	c7 01       	movw	r24, r14
   19e02:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19e06:	09 2e       	mov	r0, r25
   19e08:	00 0c       	add	r0, r0
   19e0a:	aa 0b       	sbc	r26, r26
   19e0c:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19e0e:	8f 3f       	cpi	r24, 0xFF	; 255
   19e10:	91 05       	cpc	r25, r1
   19e12:	a1 05       	cpc	r26, r1
   19e14:	b1 05       	cpc	r27, r1
   19e16:	09 f0       	breq	.+2      	; 0x19e1a <lif_create_volume+0x3f2>
   19e18:	0c f4       	brge	.+2      	; 0x19e1c <lif_create_volume+0x3f4>
   19e1a:	db c0       	rjmp	.+438    	; 0x19fd2 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e1c:	ca 5e       	subi	r28, 0xEA	; 234
   19e1e:	de 4f       	sbci	r29, 0xFE	; 254
   19e20:	28 81       	ld	r18, Y
   19e22:	39 81       	ldd	r19, Y+1	; 0x01
   19e24:	4a 81       	ldd	r20, Y+2	; 0x02
   19e26:	5b 81       	ldd	r21, Y+3	; 0x03
   19e28:	c6 51       	subi	r28, 0x16	; 22
   19e2a:	d1 40       	sbci	r29, 0x01	; 1
   19e2c:	28 0f       	add	r18, r24
   19e2e:	39 1f       	adc	r19, r25
   19e30:	4a 1f       	adc	r20, r26
   19e32:	5b 1f       	adc	r21, r27
   19e34:	ca 5e       	subi	r28, 0xEA	; 234
   19e36:	de 4f       	sbci	r29, 0xFE	; 254
   19e38:	28 83       	st	Y, r18
   19e3a:	39 83       	std	Y+1, r19	; 0x01
   19e3c:	4a 83       	std	Y+2, r20	; 0x02
   19e3e:	5b 83       	std	Y+3, r21	; 0x03
   19e40:	c6 51       	subi	r28, 0x16	; 22
   19e42:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19e44:	ce 5d       	subi	r28, 0xDE	; 222
   19e46:	de 4f       	sbci	r29, 0xFE	; 254
   19e48:	68 81       	ld	r22, Y
   19e4a:	79 81       	ldd	r23, Y+1	; 0x01
   19e4c:	8a 81       	ldd	r24, Y+2	; 0x02
   19e4e:	9b 81       	ldd	r25, Y+3	; 0x03
   19e50:	c2 52       	subi	r28, 0x22	; 34
   19e52:	d1 40       	sbci	r29, 0x01	; 1
   19e54:	a2 01       	movw	r20, r4
   19e56:	91 01       	movw	r18, r2
   19e58:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
   19e5c:	67 2b       	or	r22, r23
   19e5e:	68 2b       	or	r22, r24
   19e60:	69 2b       	or	r22, r25
   19e62:	99 f4       	brne	.+38     	; 0x19e8a <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19e64:	ce 5d       	subi	r28, 0xDE	; 222
   19e66:	de 4f       	sbci	r29, 0xFE	; 254
   19e68:	88 81       	ld	r24, Y
   19e6a:	99 81       	ldd	r25, Y+1	; 0x01
   19e6c:	aa 81       	ldd	r26, Y+2	; 0x02
   19e6e:	bb 81       	ldd	r27, Y+3	; 0x03
   19e70:	c2 52       	subi	r28, 0x22	; 34
   19e72:	d1 40       	sbci	r29, 0x01	; 1
   19e74:	ed b7       	in	r30, 0x3d	; 61
   19e76:	fe b7       	in	r31, 0x3e	; 62
   19e78:	84 83       	std	Z+4, r24	; 0x04
   19e7a:	95 83       	std	Z+5, r25	; 0x05
   19e7c:	a6 83       	std	Z+6, r26	; 0x06
   19e7e:	b7 83       	std	Z+7, r27	; 0x07
   19e80:	61 82       	std	Z+1, r6	; 0x01
   19e82:	72 82       	std	Z+2, r7	; 0x02
   19e84:	83 82       	std	Z+3, r8	; 0x03
   19e86:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19e8a:	ff ef       	ldi	r31, 0xFF	; 255
   19e8c:	af 1a       	sub	r10, r31
   19e8e:	bf 0a       	sbc	r11, r31
   19e90:	cf 0a       	sbc	r12, r31
   19e92:	df 0a       	sbc	r13, r31
   19e94:	86 cf       	rjmp	.-244    	; 0x19da2 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19e96:	80 e0       	ldi	r24, 0x00	; 0
   19e98:	91 e0       	ldi	r25, 0x01	; 1
   19e9a:	cc 5e       	subi	r28, 0xEC	; 236
   19e9c:	de 4f       	sbci	r29, 0xFE	; 254
   19e9e:	a8 81       	ld	r26, Y
   19ea0:	b9 81       	ldd	r27, Y+1	; 0x01
   19ea2:	c4 51       	subi	r28, 0x14	; 20
   19ea4:	d1 40       	sbci	r29, 0x01	; 1
   19ea6:	fc 01       	movw	r30, r24
   19ea8:	1d 92       	st	X+, r1
   19eaa:	31 97       	sbiw	r30, 0x01	; 1
   19eac:	e9 f7       	brne	.-6      	; 0x19ea8 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19eae:	81 2c       	mov	r8, r1
   19eb0:	91 2c       	mov	r9, r1
   19eb2:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19eb4:	8b e5       	ldi	r24, 0x5B	; 91
   19eb6:	9d e3       	ldi	r25, 0x3D	; 61
   19eb8:	9c 01       	movw	r18, r24
   19eba:	40 e0       	ldi	r20, 0x00	; 0
   19ebc:	c6 5e       	subi	r28, 0xE6	; 230
   19ebe:	de 4f       	sbci	r29, 0xFE	; 254
   19ec0:	28 83       	st	Y, r18
   19ec2:	39 83       	std	Y+1, r19	; 0x01
   19ec4:	4a 83       	std	Y+2, r20	; 0x02
   19ec6:	ca 51       	subi	r28, 0x1A	; 26
   19ec8:	d1 40       	sbci	r29, 0x01	; 1
   19eca:	ce 5d       	subi	r28, 0xDE	; 222
   19ecc:	de 4f       	sbci	r29, 0xFE	; 254
   19ece:	48 80       	ld	r4, Y
   19ed0:	59 80       	ldd	r5, Y+1	; 0x01
   19ed2:	6a 80       	ldd	r6, Y+2	; 0x02
   19ed4:	7b 80       	ldd	r7, Y+3	; 0x03
   19ed6:	c2 52       	subi	r28, 0x22	; 34
   19ed8:	d1 40       	sbci	r29, 0x01	; 1
   19eda:	48 0c       	add	r4, r8
   19edc:	59 1c       	adc	r5, r9
   19ede:	6a 1c       	adc	r6, r10
   19ee0:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19ee2:	c2 5e       	subi	r28, 0xE2	; 226
   19ee4:	de 4f       	sbci	r29, 0xFE	; 254
   19ee6:	28 81       	ld	r18, Y
   19ee8:	39 81       	ldd	r19, Y+1	; 0x01
   19eea:	4a 81       	ldd	r20, Y+2	; 0x02
   19eec:	5b 81       	ldd	r21, Y+3	; 0x03
   19eee:	ce 51       	subi	r28, 0x1E	; 30
   19ef0:	d1 40       	sbci	r29, 0x01	; 1
   19ef2:	82 16       	cp	r8, r18
   19ef4:	93 06       	cpc	r9, r19
   19ef6:	a4 06       	cpc	r10, r20
   19ef8:	b5 06       	cpc	r11, r21
   19efa:	0c f0       	brlt	.+2      	; 0x19efe <lif_create_volume+0x4d6>
   19efc:	53 c0       	rjmp	.+166    	; 0x19fa4 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19efe:	00 e0       	ldi	r16, 0x00	; 0
   19f00:	11 e0       	ldi	r17, 0x01	; 1
   19f02:	ca 5e       	subi	r28, 0xEA	; 234
   19f04:	de 4f       	sbci	r29, 0xFE	; 254
   19f06:	28 81       	ld	r18, Y
   19f08:	39 81       	ldd	r19, Y+1	; 0x01
   19f0a:	4a 81       	ldd	r20, Y+2	; 0x02
   19f0c:	5b 81       	ldd	r21, Y+3	; 0x03
   19f0e:	c6 51       	subi	r28, 0x16	; 22
   19f10:	d1 40       	sbci	r29, 0x01	; 1
   19f12:	be 01       	movw	r22, r28
   19f14:	6c 5e       	subi	r22, 0xEC	; 236
   19f16:	7f 4f       	sbci	r23, 0xFF	; 255
   19f18:	c7 01       	movw	r24, r14
   19f1a:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19f1e:	09 2e       	mov	r0, r25
   19f20:	00 0c       	add	r0, r0
   19f22:	aa 0b       	sbc	r26, r26
   19f24:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19f26:	8f 3f       	cpi	r24, 0xFF	; 255
   19f28:	91 05       	cpc	r25, r1
   19f2a:	a1 05       	cpc	r26, r1
   19f2c:	b1 05       	cpc	r27, r1
   19f2e:	09 f0       	breq	.+2      	; 0x19f32 <lif_create_volume+0x50a>
   19f30:	0c f4       	brge	.+2      	; 0x19f34 <lif_create_volume+0x50c>
   19f32:	4f c0       	rjmp	.+158    	; 0x19fd2 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f34:	ca 5e       	subi	r28, 0xEA	; 234
   19f36:	de 4f       	sbci	r29, 0xFE	; 254
   19f38:	28 81       	ld	r18, Y
   19f3a:	39 81       	ldd	r19, Y+1	; 0x01
   19f3c:	4a 81       	ldd	r20, Y+2	; 0x02
   19f3e:	5b 81       	ldd	r21, Y+3	; 0x03
   19f40:	c6 51       	subi	r28, 0x16	; 22
   19f42:	d1 40       	sbci	r29, 0x01	; 1
   19f44:	28 0f       	add	r18, r24
   19f46:	39 1f       	adc	r19, r25
   19f48:	4a 1f       	adc	r20, r26
   19f4a:	5b 1f       	adc	r21, r27
   19f4c:	ca 5e       	subi	r28, 0xEA	; 234
   19f4e:	de 4f       	sbci	r29, 0xFE	; 254
   19f50:	28 83       	st	Y, r18
   19f52:	39 83       	std	Y+1, r19	; 0x01
   19f54:	4a 83       	std	Y+2, r20	; 0x02
   19f56:	5b 83       	std	Y+3, r21	; 0x03
   19f58:	c6 51       	subi	r28, 0x16	; 22
   19f5a:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19f5c:	c3 01       	movw	r24, r6
   19f5e:	b2 01       	movw	r22, r4
   19f60:	24 e6       	ldi	r18, 0x64	; 100
   19f62:	30 e0       	ldi	r19, 0x00	; 0
   19f64:	40 e0       	ldi	r20, 0x00	; 0
   19f66:	50 e0       	ldi	r21, 0x00	; 0
   19f68:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
   19f6c:	67 2b       	or	r22, r23
   19f6e:	68 2b       	or	r22, r24
   19f70:	69 2b       	or	r22, r25
   19f72:	91 f4       	brne	.+36     	; 0x19f98 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19f74:	ed b7       	in	r30, 0x3d	; 61
   19f76:	fe b7       	in	r31, 0x3e	; 62
   19f78:	44 82       	std	Z+4, r4	; 0x04
   19f7a:	55 82       	std	Z+5, r5	; 0x05
   19f7c:	66 82       	std	Z+6, r6	; 0x06
   19f7e:	77 82       	std	Z+7, r7	; 0x07
   19f80:	c6 5e       	subi	r28, 0xE6	; 230
   19f82:	de 4f       	sbci	r29, 0xFE	; 254
   19f84:	28 81       	ld	r18, Y
   19f86:	39 81       	ldd	r19, Y+1	; 0x01
   19f88:	4a 81       	ldd	r20, Y+2	; 0x02
   19f8a:	ca 51       	subi	r28, 0x1A	; 26
   19f8c:	d1 40       	sbci	r29, 0x01	; 1
   19f8e:	21 83       	std	Z+1, r18	; 0x01
   19f90:	32 83       	std	Z+2, r19	; 0x02
   19f92:	43 83       	std	Z+3, r20	; 0x03
   19f94:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19f98:	ff ef       	ldi	r31, 0xFF	; 255
   19f9a:	8f 1a       	sub	r8, r31
   19f9c:	9f 0a       	sbc	r9, r31
   19f9e:	af 0a       	sbc	r10, r31
   19fa0:	bf 0a       	sbc	r11, r31
   19fa2:	93 cf       	rjmp	.-218    	; 0x19eca <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19fa4:	ed b7       	in	r30, 0x3d	; 61
   19fa6:	fe b7       	in	r31, 0x3e	; 62
   19fa8:	44 82       	std	Z+4, r4	; 0x04
   19faa:	55 82       	std	Z+5, r5	; 0x05
   19fac:	66 82       	std	Z+6, r6	; 0x06
   19fae:	77 82       	std	Z+7, r7	; 0x07
   19fb0:	8e e4       	ldi	r24, 0x4E	; 78
   19fb2:	9d e3       	ldi	r25, 0x3D	; 61
   19fb4:	a0 e0       	ldi	r26, 0x00	; 0
   19fb6:	81 83       	std	Z+1, r24	; 0x01
   19fb8:	92 83       	std	Z+2, r25	; 0x02
   19fba:	a3 83       	std	Z+3, r26	; 0x03
   19fbc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19fc0:	8f ef       	ldi	r24, 0xFF	; 255
   19fc2:	9f ef       	ldi	r25, 0xFF	; 255
   19fc4:	f7 01       	movw	r30, r14
   19fc6:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19fc8:	80 a3       	std	Z+32, r24	; 0x20
   19fca:	c7 01       	movw	r24, r14
   19fcc:	1a d8       	rcall	.-4044   	; 0x19002 <lif_check_volume>
   19fce:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fd0:	19 f4       	brne	.+6      	; 0x19fd8 <lif_create_volume+0x5b0>
   19fd2:	c7 01       	movw	r24, r14
   19fd4:	b6 da       	rcall	.-2708   	; 0x19542 <lif_close_volume>
   19fd6:	08 c0       	rjmp	.+16     	; 0x19fe8 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19fd8:	c7 01       	movw	r24, r14
   19fda:	1c dc       	rcall	.-1992   	; 0x19814 <lif_updatefree>
   19fdc:	6c 01       	movw	r12, r24
   19fde:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fe0:	31 f4       	brne	.+12     	; 0x19fee <lif_create_volume+0x5c6>
   19fe2:	c7 01       	movw	r24, r14
   19fe4:	ae da       	rcall	.-2724   	; 0x19542 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19fe6:	04 c0       	rjmp	.+8      	; 0x19ff0 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19fe8:	c1 2c       	mov	r12, r1
   19fea:	d1 2c       	mov	r13, r1
   19fec:	01 c0       	rjmp	.+2      	; 0x19ff0 <lif_create_volume+0x5c8>
   19fee:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19ff0:	c6 01       	movw	r24, r12
   19ff2:	c7 5d       	subi	r28, 0xD7	; 215
   19ff4:	de 4f       	sbci	r29, 0xFE	; 254
   19ff6:	e2 e1       	ldi	r30, 0x12	; 18
   19ff8:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

00019ffc <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19ffc:	ad e1       	ldi	r26, 0x1D	; 29
   19ffe:	b0 e0       	ldi	r27, 0x00	; 0
   1a000:	e4 e0       	ldi	r30, 0x04	; 4
   1a002:	f0 ed       	ldi	r31, 0xD0	; 208
   1a004:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   1a008:	9d 8f       	std	Y+29, r25	; 0x1d
   1a00a:	8c 8f       	std	Y+28, r24	; 0x1c
   1a00c:	4a 01       	movw	r8, r20
   1a00e:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1a010:	fc 01       	movw	r30, r24
   1a012:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a014:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a016:	e6 84       	ldd	r14, Z+14	; 0x0e
   1a018:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a01a:	fc db       	rcall	.-2056   	; 0x19814 <lif_updatefree>
   1a01c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a01e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a020:	40 8d       	ldd	r20, Z+24	; 0x18
   1a022:	51 8d       	ldd	r21, Z+25	; 0x19
   1a024:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a026:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a028:	89 2b       	or	r24, r25
   1a02a:	99 f4       	brne	.+38     	; 0x1a052 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a02c:	ed b7       	in	r30, 0x3d	; 61
   1a02e:	fe b7       	in	r31, 0x3e	; 62
   1a030:	80 86       	std	Z+8, r8	; 0x08
   1a032:	91 86       	std	Z+9, r9	; 0x09
   1a034:	a2 86       	std	Z+10, r10	; 0x0a
   1a036:	b3 86       	std	Z+11, r11	; 0x0b
   1a038:	44 83       	std	Z+4, r20	; 0x04
   1a03a:	55 83       	std	Z+5, r21	; 0x05
   1a03c:	66 83       	std	Z+6, r22	; 0x06
   1a03e:	77 83       	std	Z+7, r23	; 0x07
   1a040:	8f e6       	ldi	r24, 0x6F	; 111
   1a042:	9c e3       	ldi	r25, 0x3C	; 60
   1a044:	a0 e0       	ldi	r26, 0x00	; 0
   1a046:	81 83       	std	Z+1, r24	; 0x01
   1a048:	92 83       	std	Z+2, r25	; 0x02
   1a04a:	a3 83       	std	Z+3, r26	; 0x03
   1a04c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1a050:	2f c1       	rjmp	.+606    	; 0x1a2b0 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a052:	48 15       	cp	r20, r8
   1a054:	59 05       	cpc	r21, r9
   1a056:	6a 05       	cpc	r22, r10
   1a058:	7b 05       	cpc	r23, r11
   1a05a:	c4 f0       	brlt	.+48     	; 0x1a08c <lif_newdir+0x90>
   1a05c:	44 24       	eor	r4, r4
   1a05e:	43 94       	inc	r4
   1a060:	51 2c       	mov	r5, r1
   1a062:	61 2c       	mov	r6, r1
   1a064:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a066:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a068:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a06a:	86 5a       	subi	r24, 0xA6	; 166
   1a06c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a06e:	9d 8b       	std	Y+21, r25	; 0x15
   1a070:	8c 8b       	std	Y+20, r24	; 0x14
   1a072:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a074:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a076:	e4 5a       	subi	r30, 0xA4	; 164
   1a078:	ff 4f       	sbci	r31, 0xFF	; 255
   1a07a:	fb 8b       	std	Y+19, r31	; 0x13
   1a07c:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a07e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a080:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a082:	80 5a       	subi	r24, 0xA0	; 160
   1a084:	9f 4f       	sbci	r25, 0xFF	; 255
   1a086:	9f 8b       	std	Y+23, r25	; 0x17
   1a088:	8e 8b       	std	Y+22, r24	; 0x16
   1a08a:	21 c0       	rjmp	.+66     	; 0x1a0ce <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a08c:	ed b7       	in	r30, 0x3d	; 61
   1a08e:	fe b7       	in	r31, 0x3e	; 62
   1a090:	44 83       	std	Z+4, r20	; 0x04
   1a092:	55 83       	std	Z+5, r21	; 0x05
   1a094:	66 83       	std	Z+6, r22	; 0x06
   1a096:	77 83       	std	Z+7, r23	; 0x07
   1a098:	86 e4       	ldi	r24, 0x46	; 70
   1a09a:	9c e3       	ldi	r25, 0x3C	; 60
   1a09c:	a0 e0       	ldi	r26, 0x00	; 0
   1a09e:	81 83       	std	Z+1, r24	; 0x01
   1a0a0:	92 83       	std	Z+2, r25	; 0x02
   1a0a2:	a3 83       	std	Z+3, r26	; 0x03
   1a0a4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1a0a8:	03 c1       	rjmp	.+518    	; 0x1a2b0 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a0aa:	ec 89       	ldd	r30, Y+20	; 0x14
   1a0ac:	fd 89       	ldd	r31, Y+21	; 0x15
   1a0ae:	80 81       	ld	r24, Z
   1a0b0:	91 81       	ldd	r25, Z+1	; 0x01
   1a0b2:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0b4:	ff ef       	ldi	r31, 0xFF	; 255
   1a0b6:	9f 07       	cpc	r25, r31
   1a0b8:	a1 f0       	breq	.+40     	; 0x1a0e2 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a0ba:	89 2b       	or	r24, r25
   1a0bc:	09 f0       	breq	.+2      	; 0x1a0c0 <lif_newdir+0xc4>
   1a0be:	ce c0       	rjmp	.+412    	; 0x1a25c <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a0c0:	61 14       	cp	r6, r1
   1a0c2:	71 04       	cpc	r7, r1
   1a0c4:	09 f4       	brne	.+2      	; 0x1a0c8 <lif_newdir+0xcc>
   1a0c6:	c1 c0       	rjmp	.+386    	; 0x1a24a <lif_newdir+0x24e>
   1a0c8:	ff ef       	ldi	r31, 0xFF	; 255
   1a0ca:	4f 1a       	sub	r4, r31
   1a0cc:	5f 0a       	sbc	r5, r31
   1a0ce:	82 01       	movw	r16, r4
   1a0d0:	01 50       	subi	r16, 0x01	; 1
   1a0d2:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a0d4:	b8 01       	movw	r22, r16
   1a0d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0da:	c1 da       	rcall	.-2686   	; 0x1965e <lif_readdirindex>
   1a0dc:	89 2b       	or	r24, r25
   1a0de:	29 f7       	brne	.-54     	; 0x1a0aa <lif_newdir+0xae>
   1a0e0:	e7 c0       	rjmp	.+462    	; 0x1a2b0 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a0e2:	22 e0       	ldi	r18, 0x02	; 2
   1a0e4:	62 16       	cp	r6, r18
   1a0e6:	71 04       	cpc	r7, r1
   1a0e8:	09 f0       	breq	.+2      	; 0x1a0ec <lif_newdir+0xf0>
   1a0ea:	46 c0       	rjmp	.+140    	; 0x1a178 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a0ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0f0:	0e 94 2c c6 	call	0x18c58	; 0x18c58 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a0f4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0f6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0f8:	e4 5a       	subi	r30, 0xA4	; 164
   1a0fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0fc:	88 8d       	ldd	r24, Y+24	; 0x18
   1a0fe:	80 83       	st	Z, r24
   1a100:	99 8d       	ldd	r25, Y+25	; 0x19
   1a102:	91 83       	std	Z+1, r25	; 0x01
   1a104:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a106:	22 83       	std	Z+2, r18	; 0x02
   1a108:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a10a:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a10c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a10e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a110:	e0 5a       	subi	r30, 0xA0	; 160
   1a112:	ff 4f       	sbci	r31, 0xFF	; 255
   1a114:	80 82       	st	Z, r8
   1a116:	91 82       	std	Z+1, r9	; 0x01
   1a118:	a2 82       	std	Z+2, r10	; 0x02
   1a11a:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a11c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a11e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a120:	84 89       	ldd	r24, Z+20	; 0x14
   1a122:	95 89       	ldd	r25, Z+21	; 0x15
   1a124:	a6 89       	ldd	r26, Z+22	; 0x16
   1a126:	b7 89       	ldd	r27, Z+23	; 0x17
   1a128:	88 0d       	add	r24, r8
   1a12a:	99 1d       	adc	r25, r9
   1a12c:	aa 1d       	adc	r26, r10
   1a12e:	bb 1d       	adc	r27, r11
   1a130:	84 8b       	std	Z+20, r24	; 0x14
   1a132:	95 8b       	std	Z+21, r25	; 0x15
   1a134:	a6 8b       	std	Z+22, r26	; 0x16
   1a136:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a138:	80 8d       	ldd	r24, Z+24	; 0x18
   1a13a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a13c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a13e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a140:	88 19       	sub	r24, r8
   1a142:	99 09       	sbc	r25, r9
   1a144:	aa 09       	sbc	r26, r10
   1a146:	bb 09       	sbc	r27, r11
   1a148:	80 8f       	std	Z+24, r24	; 0x18
   1a14a:	91 8f       	std	Z+25, r25	; 0x19
   1a14c:	a2 8f       	std	Z+26, r26	; 0x1a
   1a14e:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a150:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a152:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a154:	01 96       	adiw	r24, 0x01	; 1
   1a156:	95 8f       	std	Z+29, r25	; 0x1d
   1a158:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a15a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a15c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a15e:	01 97       	sbiw	r24, 0x01	; 1
   1a160:	97 8f       	std	Z+31, r25	; 0x1f
   1a162:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a164:	20 a2       	std	Z+32, r2	; 0x20
   1a166:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a168:	b1 01       	movw	r22, r2
   1a16a:	cf 01       	movw	r24, r30
   1a16c:	df da       	rcall	.-2626   	; 0x1972c <lif_writedirindex>
   1a16e:	89 2b       	or	r24, r25
   1a170:	09 f4       	brne	.+2      	; 0x1a174 <lif_newdir+0x178>
   1a172:	9e c0       	rjmp	.+316    	; 0x1a2b0 <lif_newdir+0x2b4>
   1a174:	c1 01       	movw	r24, r2
   1a176:	9e c0       	rjmp	.+316    	; 0x1a2b4 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a178:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a17c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a180:	92 ff       	sbrs	r25, 2
   1a182:	1e c0       	rjmp	.+60     	; 0x1a1c0 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a184:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a186:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a188:	80 8d       	ldd	r24, Z+24	; 0x18
   1a18a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a18c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a18e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a190:	ed b7       	in	r30, 0x3d	; 61
   1a192:	fe b7       	in	r31, 0x3e	; 62
   1a194:	86 87       	std	Z+14, r24	; 0x0e
   1a196:	97 87       	std	Z+15, r25	; 0x0f
   1a198:	a0 8b       	std	Z+16, r26	; 0x10
   1a19a:	b1 8b       	std	Z+17, r27	; 0x11
   1a19c:	82 86       	std	Z+10, r8	; 0x0a
   1a19e:	93 86       	std	Z+11, r9	; 0x0b
   1a1a0:	a4 86       	std	Z+12, r10	; 0x0c
   1a1a2:	b5 86       	std	Z+13, r11	; 0x0d
   1a1a4:	c6 82       	std	Z+6, r12	; 0x06
   1a1a6:	d7 82       	std	Z+7, r13	; 0x07
   1a1a8:	e0 86       	std	Z+8, r14	; 0x08
   1a1aa:	f1 86       	std	Z+9, r15	; 0x09
   1a1ac:	15 83       	std	Z+5, r17	; 0x05
   1a1ae:	04 83       	std	Z+4, r16	; 0x04
   1a1b0:	85 ef       	ldi	r24, 0xF5	; 245
   1a1b2:	9b e3       	ldi	r25, 0x3B	; 59
   1a1b4:	a0 e0       	ldi	r26, 0x00	; 0
   1a1b6:	81 83       	std	Z+1, r24	; 0x01
   1a1b8:	92 83       	std	Z+2, r25	; 0x02
   1a1ba:	a3 83       	std	Z+3, r26	; 0x03
   1a1bc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a1c0:	b8 01       	movw	r22, r16
   1a1c2:	6f 5f       	subi	r22, 0xFF	; 255
   1a1c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a1ca:	0c db       	rcall	.-2536   	; 0x197e4 <lif_writedirEOF>
   1a1cc:	89 2b       	or	r24, r25
   1a1ce:	09 f4       	brne	.+2      	; 0x1a1d2 <lif_newdir+0x1d6>
   1a1d0:	6f c0       	rjmp	.+222    	; 0x1a2b0 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a1d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a1d6:	0e 94 2c c6 	call	0x18c58	; 0x18c58 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a1da:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1dc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1de:	e4 5a       	subi	r30, 0xA4	; 164
   1a1e0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1e2:	c0 82       	st	Z, r12
   1a1e4:	d1 82       	std	Z+1, r13	; 0x01
   1a1e6:	e2 82       	std	Z+2, r14	; 0x02
   1a1e8:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a1ea:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1ec:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1ee:	e0 5a       	subi	r30, 0xA0	; 160
   1a1f0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1f2:	80 82       	st	Z, r8
   1a1f4:	91 82       	std	Z+1, r9	; 0x01
   1a1f6:	a2 82       	std	Z+2, r10	; 0x02
   1a1f8:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a1fa:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1fc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1fe:	84 89       	ldd	r24, Z+20	; 0x14
   1a200:	95 89       	ldd	r25, Z+21	; 0x15
   1a202:	a6 89       	ldd	r26, Z+22	; 0x16
   1a204:	b7 89       	ldd	r27, Z+23	; 0x17
   1a206:	88 0d       	add	r24, r8
   1a208:	99 1d       	adc	r25, r9
   1a20a:	aa 1d       	adc	r26, r10
   1a20c:	bb 1d       	adc	r27, r11
   1a20e:	84 8b       	std	Z+20, r24	; 0x14
   1a210:	95 8b       	std	Z+21, r25	; 0x15
   1a212:	a6 8b       	std	Z+22, r26	; 0x16
   1a214:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a216:	80 8d       	ldd	r24, Z+24	; 0x18
   1a218:	91 8d       	ldd	r25, Z+25	; 0x19
   1a21a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a21c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a21e:	88 19       	sub	r24, r8
   1a220:	99 09       	sbc	r25, r9
   1a222:	aa 09       	sbc	r26, r10
   1a224:	bb 09       	sbc	r27, r11
   1a226:	80 8f       	std	Z+24, r24	; 0x18
   1a228:	91 8f       	std	Z+25, r25	; 0x19
   1a22a:	a2 8f       	std	Z+26, r26	; 0x1a
   1a22c:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a22e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a230:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a232:	01 96       	adiw	r24, 0x01	; 1
   1a234:	95 8f       	std	Z+29, r25	; 0x1d
   1a236:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a238:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a23a:	00 a3       	std	Z+32, r16	; 0x20
   1a23c:	b8 01       	movw	r22, r16
   1a23e:	cf 01       	movw	r24, r30
   1a240:	75 da       	rcall	.-2838   	; 0x1972c <lif_writedirindex>
   1a242:	89 2b       	or	r24, r25
   1a244:	a9 f1       	breq	.+106    	; 0x1a2b0 <lif_newdir+0x2b4>
   1a246:	c8 01       	movw	r24, r16
   1a248:	35 c0       	rjmp	.+106    	; 0x1a2b4 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a24a:	c8 8e       	std	Y+24, r12	; 0x18
   1a24c:	d9 8e       	std	Y+25, r13	; 0x19
   1a24e:	ea 8e       	std	Y+26, r14	; 0x1a
   1a250:	fb 8e       	std	Y+27, r15	; 0x1b
   1a252:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a254:	66 24       	eor	r6, r6
   1a256:	63 94       	inc	r6
   1a258:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a25a:	36 cf       	rjmp	.-404    	; 0x1a0c8 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a25c:	f1 e0       	ldi	r31, 0x01	; 1
   1a25e:	6f 16       	cp	r6, r31
   1a260:	71 04       	cpc	r7, r1
   1a262:	a9 f4       	brne	.+42     	; 0x1a28e <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a264:	ea 89       	ldd	r30, Y+18	; 0x12
   1a266:	fb 89       	ldd	r31, Y+19	; 0x13
   1a268:	80 81       	ld	r24, Z
   1a26a:	91 81       	ldd	r25, Z+1	; 0x01
   1a26c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a26e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a270:	8c 19       	sub	r24, r12
   1a272:	9d 09       	sbc	r25, r13
   1a274:	ae 09       	sbc	r26, r14
   1a276:	bf 09       	sbc	r27, r15
   1a278:	88 15       	cp	r24, r8
   1a27a:	99 05       	cpc	r25, r9
   1a27c:	aa 05       	cpc	r26, r10
   1a27e:	bb 05       	cpc	r27, r11
   1a280:	1c f4       	brge	.+6      	; 0x1a288 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a282:	61 2c       	mov	r6, r1
   1a284:	71 2c       	mov	r7, r1
   1a286:	03 c0       	rjmp	.+6      	; 0x1a28e <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a288:	82 e0       	ldi	r24, 0x02	; 2
   1a28a:	68 2e       	mov	r6, r24
   1a28c:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a28e:	ea 89       	ldd	r30, Y+18	; 0x12
   1a290:	fb 89       	ldd	r31, Y+19	; 0x13
   1a292:	c0 80       	ld	r12, Z
   1a294:	d1 80       	ldd	r13, Z+1	; 0x01
   1a296:	e2 80       	ldd	r14, Z+2	; 0x02
   1a298:	f3 80       	ldd	r15, Z+3	; 0x03
   1a29a:	ee 89       	ldd	r30, Y+22	; 0x16
   1a29c:	ff 89       	ldd	r31, Y+23	; 0x17
   1a29e:	80 81       	ld	r24, Z
   1a2a0:	91 81       	ldd	r25, Z+1	; 0x01
   1a2a2:	a2 81       	ldd	r26, Z+2	; 0x02
   1a2a4:	b3 81       	ldd	r27, Z+3	; 0x03
   1a2a6:	c8 0e       	add	r12, r24
   1a2a8:	d9 1e       	adc	r13, r25
   1a2aa:	ea 1e       	adc	r14, r26
   1a2ac:	fb 1e       	adc	r15, r27
   1a2ae:	0c cf       	rjmp	.-488    	; 0x1a0c8 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a2b0:	8f ef       	ldi	r24, 0xFF	; 255
   1a2b2:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a2b4:	6d 96       	adiw	r28, 0x1d	; 29
   1a2b6:	e2 e1       	ldi	r30, 0x12	; 18
   1a2b8:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0001a2bc <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a2bc:	a9 e3       	ldi	r26, 0x39	; 57
   1a2be:	b1 e0       	ldi	r27, 0x01	; 1
   1a2c0:	e4 e6       	ldi	r30, 0x64	; 100
   1a2c2:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2c4:	0c 94 f2 e6 	jmp	0x1cde4	; 0x1cde4 <__prologue_saves__+0xc>
   1a2c8:	6c 01       	movw	r12, r24
   1a2ca:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a2cc:	be 01       	movw	r22, r28
   1a2ce:	66 5f       	subi	r22, 0xF6	; 246
   1a2d0:	7e 4f       	sbci	r23, 0xFE	; 254
   1a2d2:	0e 94 7b c1 	call	0x182f6	; 0x182f6 <lif_stat>
   1a2d6:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a2d8:	00 97       	sbiw	r24, 0x00	; 0
   1a2da:	09 f1       	breq	.+66     	; 0x1a31e <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a2dc:	fc 01       	movw	r30, r24
   1a2de:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2e0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2e4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2e6:	81 15       	cp	r24, r1
   1a2e8:	f2 e0       	ldi	r31, 0x02	; 2
   1a2ea:	9f 07       	cpc	r25, r31
   1a2ec:	a1 05       	cpc	r26, r1
   1a2ee:	b1 05       	cpc	r27, r1
   1a2f0:	c8 f4       	brcc	.+50     	; 0x1a324 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a2f2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a2f6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2fa:	32 ff       	sbrs	r19, 2
   1a2fc:	10 c0       	rjmp	.+32     	; 0x1a31e <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a2fe:	ed b7       	in	r30, 0x3d	; 61
   1a300:	fe b7       	in	r31, 0x3e	; 62
   1a302:	86 83       	std	Z+6, r24	; 0x06
   1a304:	97 83       	std	Z+7, r25	; 0x07
   1a306:	a0 87       	std	Z+8, r26	; 0x08
   1a308:	b1 87       	std	Z+9, r27	; 0x09
   1a30a:	d5 82       	std	Z+5, r13	; 0x05
   1a30c:	c4 82       	std	Z+4, r12	; 0x04
   1a30e:	86 eb       	ldi	r24, 0xB6	; 182
   1a310:	9b e3       	ldi	r25, 0x3B	; 59
   1a312:	a0 e0       	ldi	r26, 0x00	; 0
   1a314:	81 83       	std	Z+1, r24	; 0x01
   1a316:	92 83       	std	Z+2, r25	; 0x02
   1a318:	a3 83       	std	Z+3, r26	; 0x03
   1a31a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(NULL);
   1a31e:	00 e0       	ldi	r16, 0x00	; 0
   1a320:	10 e0       	ldi	r17, 0x00	; 0
   1a322:	c6 c0       	rjmp	.+396    	; 0x1a4b0 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a324:	64 e7       	ldi	r22, 0x74	; 116
   1a326:	70 e0       	ldi	r23, 0x00	; 0
   1a328:	80 e0       	ldi	r24, 0x00	; 0
   1a32a:	90 e0       	ldi	r25, 0x00	; 0
   1a32c:	0e 94 e7 c0 	call	0x181ce	; 0x181ce <lif_calloc>
   1a330:	7c 01       	movw	r14, r24
    if(!LIF)
   1a332:	89 2b       	or	r24, r25
   1a334:	a1 f3       	breq	.-24     	; 0x1a31e <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a336:	c6 01       	movw	r24, r12
   1a338:	0e 94 32 c1 	call	0x18264	; 0x18264 <lif_stralloc>
   1a33c:	f7 01       	movw	r30, r14
   1a33e:	91 83       	std	Z+1, r25	; 0x01
   1a340:	80 83       	st	Z, r24
    if(!LIF->name)
   1a342:	00 97       	sbiw	r24, 0x00	; 0
   1a344:	09 f4       	brne	.+2      	; 0x1a348 <lif_open_volume+0x8c>
   1a346:	5e c0       	rjmp	.+188    	; 0x1a404 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a348:	f5 01       	movw	r30, r10
   1a34a:	80 8c       	ldd	r8, Z+24	; 0x18
   1a34c:	91 8c       	ldd	r9, Z+25	; 0x19
   1a34e:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a350:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a352:	f7 01       	movw	r30, r14
   1a354:	80 86       	std	Z+8, r8	; 0x08
   1a356:	91 86       	std	Z+9, r9	; 0x09
   1a358:	a2 86       	std	Z+10, r10	; 0x0a
   1a35a:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a35c:	77 27       	eor	r23, r23
   1a35e:	6b 2d       	mov	r22, r11
   1a360:	5a 2d       	mov	r21, r10
   1a362:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a364:	88 20       	and	r8, r8
   1a366:	21 f0       	breq	.+8      	; 0x1a370 <lif_open_volume+0xb4>
        ++sectors;
   1a368:	4f 5f       	subi	r20, 0xFF	; 255
   1a36a:	5f 4f       	sbci	r21, 0xFF	; 255
   1a36c:	6f 4f       	sbci	r22, 0xFF	; 255
   1a36e:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a370:	f7 01       	movw	r30, r14
   1a372:	44 83       	std	Z+4, r20	; 0x04
   1a374:	55 83       	std	Z+5, r21	; 0x05
   1a376:	66 83       	std	Z+6, r22	; 0x06
   1a378:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a37a:	b8 01       	movw	r22, r16
   1a37c:	0e 94 51 c1 	call	0x182a2	; 0x182a2 <lif_open>
   1a380:	f7 01       	movw	r30, r14
   1a382:	93 83       	std	Z+3, r25	; 0x03
   1a384:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a386:	89 2b       	or	r24, r25
   1a388:	e9 f1       	breq	.+122    	; 0x1a404 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a38a:	00 e0       	ldi	r16, 0x00	; 0
   1a38c:	11 e0       	ldi	r17, 0x01	; 1
   1a38e:	20 e0       	ldi	r18, 0x00	; 0
   1a390:	30 e0       	ldi	r19, 0x00	; 0
   1a392:	a9 01       	movw	r20, r18
   1a394:	be 01       	movw	r22, r28
   1a396:	66 5f       	subi	r22, 0xF6	; 246
   1a398:	7f 4f       	sbci	r23, 0xFF	; 255
   1a39a:	c7 01       	movw	r24, r14
   1a39c:	0e 94 d5 c1 	call	0x183aa	; 0x183aa <lif_read>
   1a3a0:	6f 3f       	cpi	r22, 0xFF	; 255
   1a3a2:	71 05       	cpc	r23, r1
   1a3a4:	81 05       	cpc	r24, r1
   1a3a6:	91 05       	cpc	r25, r1
   1a3a8:	09 f0       	breq	.+2      	; 0x1a3ac <lif_open_volume+0xf0>
   1a3aa:	6c f4       	brge	.+26     	; 0x1a3c6 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a3ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3b4:	92 ff       	sbrs	r25, 2
   1a3b6:	26 c0       	rjmp	.+76     	; 0x1a404 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a3b8:	ed b7       	in	r30, 0x3d	; 61
   1a3ba:	fe b7       	in	r31, 0x3e	; 62
   1a3bc:	d5 82       	std	Z+5, r13	; 0x05
   1a3be:	c4 82       	std	Z+4, r12	; 0x04
   1a3c0:	80 e8       	ldi	r24, 0x80	; 128
   1a3c2:	9b e3       	ldi	r25, 0x3B	; 59
   1a3c4:	19 c0       	rjmp	.+50     	; 0x1a3f8 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a3c6:	b7 01       	movw	r22, r14
   1a3c8:	ce 01       	movw	r24, r28
   1a3ca:	0a 96       	adiw	r24, 0x0a	; 10
   1a3cc:	0e 94 f5 c3 	call	0x187ea	; 0x187ea <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a3d0:	c7 01       	movw	r24, r14
   1a3d2:	0e 94 01 c8 	call	0x19002	; 0x19002 <lif_check_volume>
   1a3d6:	89 2b       	or	r24, r25
   1a3d8:	c1 f4       	brne	.+48     	; 0x1a40a <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a3da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3e2:	92 ff       	sbrs	r25, 2
   1a3e4:	0f c0       	rjmp	.+30     	; 0x1a404 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a3e6:	f7 01       	movw	r30, r14
   1a3e8:	80 81       	ld	r24, Z
   1a3ea:	91 81       	ldd	r25, Z+1	; 0x01
   1a3ec:	ed b7       	in	r30, 0x3d	; 61
   1a3ee:	fe b7       	in	r31, 0x3e	; 62
   1a3f0:	95 83       	std	Z+5, r25	; 0x05
   1a3f2:	84 83       	std	Z+4, r24	; 0x04
   1a3f4:	8d e4       	ldi	r24, 0x4D	; 77
   1a3f6:	9b e3       	ldi	r25, 0x3B	; 59
   1a3f8:	a0 e0       	ldi	r26, 0x00	; 0
   1a3fa:	81 83       	std	Z+1, r24	; 0x01
   1a3fc:	92 83       	std	Z+2, r25	; 0x02
   1a3fe:	a3 83       	std	Z+3, r26	; 0x03
   1a400:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a404:	c7 01       	movw	r24, r14
   1a406:	9d d8       	rcall	.-3782   	; 0x19542 <lif_close_volume>
   1a408:	8a cf       	rjmp	.-236    	; 0x1a31e <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a40a:	f7 01       	movw	r30, r14
   1a40c:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a40e:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a410:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a412:	70 a9       	ldd	r23, Z+48	; 0x30
   1a414:	85 a9       	ldd	r24, Z+53	; 0x35
   1a416:	96 a9       	ldd	r25, Z+54	; 0x36
   1a418:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a41a:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a41c:	48 0f       	add	r20, r24
   1a41e:	59 1f       	adc	r21, r25
   1a420:	6a 1f       	adc	r22, r26
   1a422:	7b 1f       	adc	r23, r27
   1a424:	44 87       	std	Z+12, r20	; 0x0c
   1a426:	55 87       	std	Z+13, r21	; 0x0d
   1a428:	66 87       	std	Z+14, r22	; 0x0e
   1a42a:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a42c:	84 81       	ldd	r24, Z+4	; 0x04
   1a42e:	95 81       	ldd	r25, Z+5	; 0x05
   1a430:	a6 81       	ldd	r26, Z+6	; 0x06
   1a432:	b7 81       	ldd	r27, Z+7	; 0x07
   1a434:	84 1b       	sub	r24, r20
   1a436:	95 0b       	sbc	r25, r21
   1a438:	a6 0b       	sbc	r26, r22
   1a43a:	b7 0b       	sbc	r27, r23
   1a43c:	80 8b       	std	Z+16, r24	; 0x10
   1a43e:	91 8b       	std	Z+17, r25	; 0x11
   1a440:	a2 8b       	std	Z+18, r26	; 0x12
   1a442:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a444:	80 8f       	std	Z+24, r24	; 0x18
   1a446:	91 8f       	std	Z+25, r25	; 0x19
   1a448:	a2 8f       	std	Z+26, r26	; 0x1a
   1a44a:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a44c:	14 8a       	std	Z+20, r1	; 0x14
   1a44e:	15 8a       	std	Z+21, r1	; 0x15
   1a450:	16 8a       	std	Z+22, r1	; 0x16
   1a452:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a454:	17 8e       	std	Z+31, r1	; 0x1f
   1a456:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a458:	15 8e       	std	Z+29, r1	; 0x1d
   1a45a:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a45c:	11 a2       	std	Z+33, r1	; 0x21
   1a45e:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a460:	13 a2       	std	Z+35, r1	; 0x23
   1a462:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a464:	c7 01       	movw	r24, r14
   1a466:	d6 d9       	rcall	.-3156   	; 0x19814 <lif_updatefree>
   1a468:	8c 01       	movw	r16, r24
   1a46a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a46e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a472:	01 15       	cp	r16, r1
   1a474:	11 05       	cpc	r17, r1
   1a476:	a1 f4       	brne	.+40     	; 0x1a4a0 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a478:	92 ff       	sbrs	r25, 2
   1a47a:	0f c0       	rjmp	.+30     	; 0x1a49a <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a47c:	f7 01       	movw	r30, r14
   1a47e:	80 81       	ld	r24, Z
   1a480:	91 81       	ldd	r25, Z+1	; 0x01
   1a482:	ed b7       	in	r30, 0x3d	; 61
   1a484:	fe b7       	in	r31, 0x3e	; 62
   1a486:	95 83       	std	Z+5, r25	; 0x05
   1a488:	84 83       	std	Z+4, r24	; 0x04
   1a48a:	8a e1       	ldi	r24, 0x1A	; 26
   1a48c:	9b e3       	ldi	r25, 0x3B	; 59
   1a48e:	a0 e0       	ldi	r26, 0x00	; 0
   1a490:	81 83       	std	Z+1, r24	; 0x01
   1a492:	92 83       	std	Z+2, r25	; 0x02
   1a494:	a3 83       	std	Z+3, r26	; 0x03
   1a496:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a49a:	c7 01       	movw	r24, r14
   1a49c:	52 d8       	rcall	.-3932   	; 0x19542 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a49e:	08 c0       	rjmp	.+16     	; 0x1a4b0 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a4a0:	92 ff       	sbrs	r25, 2
   1a4a2:	05 c0       	rjmp	.+10     	; 0x1a4ae <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a4a4:	66 e3       	ldi	r22, 0x36	; 54
   1a4a6:	76 e1       	ldi	r23, 0x16	; 22
   1a4a8:	c7 01       	movw	r24, r14
   1a4aa:	0e 94 3b c6 	call	0x18c76	; 0x18c76 <lif_dump_vol>
   1a4ae:	87 01       	movw	r16, r14
    return( LIF );
}
   1a4b0:	c8 01       	movw	r24, r16
   1a4b2:	c7 5c       	subi	r28, 0xC7	; 199
   1a4b4:	de 4f       	sbci	r29, 0xFE	; 254
   1a4b6:	ec e0       	ldi	r30, 0x0C	; 12
   1a4b8:	0c 94 0e e7 	jmp	0x1ce1c	; 0x1ce1c <__epilogue_restores__+0xc>

0001a4bc <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a4bc:	2f 92       	push	r2
   1a4be:	3f 92       	push	r3
   1a4c0:	4f 92       	push	r4
   1a4c2:	5f 92       	push	r5
   1a4c4:	6f 92       	push	r6
   1a4c6:	8f 92       	push	r8
   1a4c8:	9f 92       	push	r9
   1a4ca:	af 92       	push	r10
   1a4cc:	bf 92       	push	r11
   1a4ce:	cf 92       	push	r12
   1a4d0:	df 92       	push	r13
   1a4d2:	ef 92       	push	r14
   1a4d4:	0f 93       	push	r16
   1a4d6:	1f 93       	push	r17
   1a4d8:	cf 93       	push	r28
   1a4da:	df 93       	push	r29
   1a4dc:	cd b7       	in	r28, 0x3d	; 61
   1a4de:	de b7       	in	r29, 0x3e	; 62
   1a4e0:	af 97       	sbiw	r28, 0x2f	; 47
   1a4e2:	0f b6       	in	r0, 0x3f	; 63
   1a4e4:	f8 94       	cli
   1a4e6:	de bf       	out	0x3e, r29	; 62
   1a4e8:	0f be       	out	0x3f, r0	; 63
   1a4ea:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a4ec:	68 e0       	ldi	r22, 0x08	; 8
   1a4ee:	79 e0       	ldi	r23, 0x09	; 9
   1a4f0:	e5 de       	rcall	.-566    	; 0x1a2bc <lif_open_volume>
   1a4f2:	9f a7       	std	Y+47, r25	; 0x2f
   1a4f4:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a4f6:	00 97       	sbiw	r24, 0x00	; 0
   1a4f8:	09 f4       	brne	.+2      	; 0x1a4fc <lif_dir+0x40>
   1a4fa:	9e c1       	rjmp	.+828    	; 0x1a838 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a4fc:	fc 01       	movw	r30, r24
   1a4fe:	86 a1       	ldd	r24, Z+38	; 0x26
   1a500:	88 23       	and	r24, r24
   1a502:	21 f0       	breq	.+8      	; 0x1a50c <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a504:	8f 01       	movw	r16, r30
   1a506:	0a 5d       	subi	r16, 0xDA	; 218
   1a508:	1f 4f       	sbci	r17, 0xFF	; 255
   1a50a:	02 c0       	rjmp	.+4      	; 0x1a510 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a50c:	08 ee       	ldi	r16, 0xE8	; 232
   1a50e:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a510:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a512:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a514:	87 5b       	subi	r24, 0xB7	; 183
   1a516:	9f 4f       	sbci	r25, 0xFF	; 255
   1a518:	0e 94 ff c5 	call	0x18bfe	; 0x18bfe <lif_lifbcd2timestr>
   1a51c:	ed b7       	in	r30, 0x3d	; 61
   1a51e:	fe b7       	in	r31, 0x3e	; 62
   1a520:	97 83       	std	Z+7, r25	; 0x07
   1a522:	86 83       	std	Z+6, r24	; 0x06
   1a524:	15 83       	std	Z+5, r17	; 0x05
   1a526:	04 83       	std	Z+4, r16	; 0x04
   1a528:	83 e0       	ldi	r24, 0x03	; 3
   1a52a:	9b e3       	ldi	r25, 0x3B	; 59
   1a52c:	a0 e0       	ldi	r26, 0x00	; 0
   1a52e:	81 83       	std	Z+1, r24	; 0x01
   1a530:	92 83       	std	Z+2, r25	; 0x02
   1a532:	a3 83       	std	Z+3, r26	; 0x03
   1a534:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a538:	83 ec       	ldi	r24, 0xC3	; 195
   1a53a:	9a e3       	ldi	r25, 0x3A	; 58
   1a53c:	a0 e0       	ldi	r26, 0x00	; 0
   1a53e:	ed b7       	in	r30, 0x3d	; 61
   1a540:	fe b7       	in	r31, 0x3e	; 62
   1a542:	81 83       	std	Z+1, r24	; 0x01
   1a544:	92 83       	std	Z+2, r25	; 0x02
   1a546:	a3 83       	std	Z+3, r26	; 0x03
   1a548:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a54c:	00 e2       	ldi	r16, 0x20	; 32
   1a54e:	10 e0       	ldi	r17, 0x00	; 0
   1a550:	1f 8b       	std	Y+23, r17	; 0x17
   1a552:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a554:	21 2c       	mov	r2, r1
   1a556:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a558:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a55a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a55c:	06 5a       	subi	r16, 0xA6	; 166
   1a55e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a560:	1d 8f       	std	Y+29, r17	; 0x1d
   1a562:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a564:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a566:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a568:	00 5a       	subi	r16, 0xA0	; 160
   1a56a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a56c:	1d a3       	std	Y+37, r17	; 0x25
   1a56e:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a570:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a572:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a574:	04 59       	subi	r16, 0x94	; 148
   1a576:	1f 4f       	sbci	r17, 0xFF	; 255
   1a578:	1f a3       	std	Y+39, r17	; 0x27
   1a57a:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a57c:	87 e7       	ldi	r24, 0x77	; 119
   1a57e:	9a e3       	ldi	r25, 0x3A	; 58
   1a580:	6c 01       	movw	r12, r24
   1a582:	e1 2c       	mov	r14, r1
   1a584:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a586:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a588:	01 5b       	subi	r16, 0xB1	; 177
   1a58a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a58c:	1f 8f       	std	Y+31, r17	; 0x1f
   1a58e:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a590:	87 e4       	ldi	r24, 0x47	; 71
   1a592:	9a e3       	ldi	r25, 0x3A	; 58
   1a594:	2c 01       	movw	r4, r24
   1a596:	61 2c       	mov	r6, r1
   1a598:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a59a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a59c:	04 5a       	subi	r16, 0xA4	; 164
   1a59e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5a0:	19 a7       	std	Y+41, r17	; 0x29
   1a5a2:	08 a7       	std	Y+40, r16	; 0x28
   1a5a4:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5a6:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5a8:	02 59       	subi	r16, 0x92	; 146
   1a5aa:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5ac:	1b a7       	std	Y+43, r17	; 0x2b
   1a5ae:	0a a7       	std	Y+42, r16	; 0x2a
   1a5b0:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5b2:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5b4:	0c 59       	subi	r16, 0x9C	; 156
   1a5b6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5b8:	1d a7       	std	Y+45, r17	; 0x2d
   1a5ba:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a5bc:	b1 01       	movw	r22, r2
   1a5be:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a5c0:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a5c2:	4d d8       	rcall	.-3942   	; 0x1965e <lif_readdirindex>
   1a5c4:	89 2b       	or	r24, r25
   1a5c6:	09 f4       	brne	.+2      	; 0x1a5ca <lif_dir+0x10e>
   1a5c8:	ad c0       	rjmp	.+346    	; 0x1a724 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a5ca:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a5cc:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a5ce:	8d 91       	ld	r24, X+
   1a5d0:	9c 91       	ld	r25, X
   1a5d2:	8f 3f       	cpi	r24, 0xFF	; 255
   1a5d4:	bf ef       	ldi	r27, 0xFF	; 255
   1a5d6:	9b 07       	cpc	r25, r27
   1a5d8:	09 f4       	brne	.+2      	; 0x1a5dc <lif_dir+0x120>
   1a5da:	a4 c0       	rjmp	.+328    	; 0x1a724 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a5dc:	ec a1       	ldd	r30, Y+36	; 0x24
   1a5de:	fd a1       	ldd	r31, Y+37	; 0x25
   1a5e0:	40 81       	ld	r20, Z
   1a5e2:	51 81       	ldd	r21, Z+1	; 0x01
   1a5e4:	62 81       	ldd	r22, Z+2	; 0x02
   1a5e6:	73 81       	ldd	r23, Z+3	; 0x03
   1a5e8:	00 27       	eor	r16, r16
   1a5ea:	14 2f       	mov	r17, r20
   1a5ec:	25 2f       	mov	r18, r21
   1a5ee:	36 2f       	mov	r19, r22
   1a5f0:	08 8f       	std	Y+24, r16	; 0x18
   1a5f2:	19 8f       	std	Y+25, r17	; 0x19
   1a5f4:	2a 8f       	std	Y+26, r18	; 0x1a
   1a5f6:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a5f8:	8c 7f       	andi	r24, 0xFC	; 252
   1a5fa:	80 31       	cpi	r24, 0x10	; 16
   1a5fc:	90 4e       	sbci	r25, 0xE0	; 224
   1a5fe:	09 f0       	breq	.+2      	; 0x1a602 <lif_dir+0x146>
   1a600:	4b c0       	rjmp	.+150    	; 0x1a698 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a602:	ae a1       	ldd	r26, Y+38	; 0x26
   1a604:	bf a1       	ldd	r27, Y+39	; 0x27
   1a606:	8d 91       	ld	r24, X+
   1a608:	9c 91       	ld	r25, X
   1a60a:	00 97       	sbiw	r24, 0x00	; 0
   1a60c:	b9 f0       	breq	.+46     	; 0x1a63c <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a60e:	4c 01       	movw	r8, r24
   1a610:	a1 2c       	mov	r10, r1
   1a612:	b1 2c       	mov	r11, r1
   1a614:	33 27       	eor	r19, r19
   1a616:	2b 2d       	mov	r18, r11
   1a618:	1a 2d       	mov	r17, r10
   1a61a:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a61c:	88 23       	and	r24, r24
   1a61e:	21 f0       	breq	.+8      	; 0x1a628 <lif_dir+0x16c>
        ++sectors;
   1a620:	0f 5f       	subi	r16, 0xFF	; 255
   1a622:	1f 4f       	sbci	r17, 0xFF	; 255
   1a624:	2f 4f       	sbci	r18, 0xFF	; 255
   1a626:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a628:	40 17       	cp	r20, r16
   1a62a:	51 07       	cpc	r21, r17
   1a62c:	62 07       	cpc	r22, r18
   1a62e:	73 07       	cpc	r23, r19
   1a630:	29 f4       	brne	.+10     	; 0x1a63c <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a632:	88 8e       	std	Y+24, r8	; 0x18
   1a634:	99 8e       	std	Y+25, r9	; 0x19
   1a636:	aa 8e       	std	Y+26, r10	; 0x1a
   1a638:	bb 8e       	std	Y+27, r11	; 0x1b
   1a63a:	2e c0       	rjmp	.+92     	; 0x1a698 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a63c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a640:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a644:	32 ff       	sbrs	r19, 2
   1a646:	24 c0       	rjmp	.+72     	; 0x1a690 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a648:	4c 01       	movw	r8, r24
   1a64a:	a1 2c       	mov	r10, r1
   1a64c:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a64e:	33 27       	eor	r19, r19
   1a650:	2b 2d       	mov	r18, r11
   1a652:	1a 2d       	mov	r17, r10
   1a654:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a656:	88 23       	and	r24, r24
   1a658:	21 f0       	breq	.+8      	; 0x1a662 <lif_dir+0x1a6>
        ++sectors;
   1a65a:	0f 5f       	subi	r16, 0xFF	; 255
   1a65c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a65e:	2f 4f       	sbci	r18, 0xFF	; 255
   1a660:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a662:	ed b7       	in	r30, 0x3d	; 61
   1a664:	fe b7       	in	r31, 0x3e	; 62
   1a666:	46 87       	std	Z+14, r20	; 0x0e
   1a668:	57 87       	std	Z+15, r21	; 0x0f
   1a66a:	60 8b       	std	Z+16, r22	; 0x10
   1a66c:	71 8b       	std	Z+17, r23	; 0x11
   1a66e:	02 87       	std	Z+10, r16	; 0x0a
   1a670:	13 87       	std	Z+11, r17	; 0x0b
   1a672:	24 87       	std	Z+12, r18	; 0x0c
   1a674:	35 87       	std	Z+13, r19	; 0x0d
   1a676:	86 82       	std	Z+6, r8	; 0x06
   1a678:	97 82       	std	Z+7, r9	; 0x07
   1a67a:	a0 86       	std	Z+8, r10	; 0x08
   1a67c:	b1 86       	std	Z+9, r11	; 0x09
   1a67e:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a680:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a682:	15 83       	std	Z+5, r17	; 0x05
   1a684:	04 83       	std	Z+4, r16	; 0x04
   1a686:	c1 82       	std	Z+1, r12	; 0x01
   1a688:	d2 82       	std	Z+2, r13	; 0x02
   1a68a:	e3 82       	std	Z+3, r14	; 0x03
   1a68c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a690:	01 e2       	ldi	r16, 0x21	; 33
   1a692:	10 e0       	ldi	r17, 0x00	; 0
   1a694:	1f 8b       	std	Y+23, r17	; 0x17
   1a696:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a698:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a69a:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a69c:	8d 90       	ld	r8, X+
   1a69e:	9c 90       	ld	r9, X
   1a6a0:	81 14       	cp	r8, r1
   1a6a2:	91 04       	cpc	r9, r1
   1a6a4:	19 f0       	breq	.+6      	; 0x1a6ac <lif_dir+0x1f0>
   1a6a6:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a6a8:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a6aa:	02 c0       	rjmp	.+4      	; 0x1a6b0 <lif_dir+0x1f4>
   1a6ac:	05 e4       	ldi	r16, 0x45	; 69
   1a6ae:	16 e1       	ldi	r17, 0x16	; 22
   1a6b0:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a6b2:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a6b4:	8d 91       	ld	r24, X+
   1a6b6:	9d 91       	ld	r25, X+
   1a6b8:	0d 90       	ld	r0, X+
   1a6ba:	bc 91       	ld	r27, X
   1a6bc:	a0 2d       	mov	r26, r0
   1a6be:	88 a3       	std	Y+32, r24	; 0x20
   1a6c0:	99 a3       	std	Y+33, r25	; 0x21
   1a6c2:	aa a3       	std	Y+34, r26	; 0x22
   1a6c4:	bb a3       	std	Y+35, r27	; 0x23
   1a6c6:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a6c8:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a6ca:	a0 80       	ld	r10, Z
   1a6cc:	b1 80       	ldd	r11, Z+1	; 0x01
   1a6ce:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a6d0:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a6d2:	0e 94 ff c5 	call	0x18bfe	; 0x18bfe <lif_lifbcd2timestr>
   1a6d6:	ed b7       	in	r30, 0x3d	; 61
   1a6d8:	fe b7       	in	r31, 0x3e	; 62
   1a6da:	95 8b       	std	Z+21, r25	; 0x15
   1a6dc:	84 8b       	std	Z+20, r24	; 0x14
   1a6de:	b3 8a       	std	Z+19, r11	; 0x13
   1a6e0:	a2 8a       	std	Z+18, r10	; 0x12
   1a6e2:	2e 89       	ldd	r18, Y+22	; 0x16
   1a6e4:	3f 89       	ldd	r19, Y+23	; 0x17
   1a6e6:	31 8b       	std	Z+17, r19	; 0x11
   1a6e8:	20 8b       	std	Z+16, r18	; 0x10
   1a6ea:	88 8d       	ldd	r24, Y+24	; 0x18
   1a6ec:	99 8d       	ldd	r25, Y+25	; 0x19
   1a6ee:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a6f0:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a6f2:	84 87       	std	Z+12, r24	; 0x0c
   1a6f4:	95 87       	std	Z+13, r25	; 0x0d
   1a6f6:	a6 87       	std	Z+14, r26	; 0x0e
   1a6f8:	b7 87       	std	Z+15, r27	; 0x0f
   1a6fa:	88 a1       	ldd	r24, Y+32	; 0x20
   1a6fc:	99 a1       	ldd	r25, Y+33	; 0x21
   1a6fe:	aa a1       	ldd	r26, Y+34	; 0x22
   1a700:	bb a1       	ldd	r27, Y+35	; 0x23
   1a702:	80 87       	std	Z+8, r24	; 0x08
   1a704:	91 87       	std	Z+9, r25	; 0x09
   1a706:	a2 87       	std	Z+10, r26	; 0x0a
   1a708:	b3 87       	std	Z+11, r27	; 0x0b
   1a70a:	97 82       	std	Z+7, r9	; 0x07
   1a70c:	86 82       	std	Z+6, r8	; 0x06
   1a70e:	15 83       	std	Z+5, r17	; 0x05
   1a710:	04 83       	std	Z+4, r16	; 0x04
   1a712:	41 82       	std	Z+1, r4	; 0x01
   1a714:	52 82       	std	Z+2, r5	; 0x02
   1a716:	63 82       	std	Z+3, r6	; 0x03
   1a718:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a71c:	ff ef       	ldi	r31, 0xFF	; 255
   1a71e:	2f 1a       	sub	r2, r31
   1a720:	3f 0a       	sbc	r3, r31
    }
   1a722:	4c cf       	rjmp	.-360    	; 0x1a5bc <lif_dir+0x100>

    printf("\n");
   1a724:	85 e4       	ldi	r24, 0x45	; 69
   1a726:	9a e3       	ldi	r25, 0x3A	; 58
   1a728:	a0 e0       	ldi	r26, 0x00	; 0
   1a72a:	ed b7       	in	r30, 0x3d	; 61
   1a72c:	fe b7       	in	r31, 0x3e	; 62
   1a72e:	81 83       	std	Z+1, r24	; 0x01
   1a730:	92 83       	std	Z+2, r25	; 0x02
   1a732:	a3 83       	std	Z+3, r26	; 0x03
   1a734:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a738:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a73a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a73c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a73e:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a740:	09 2e       	mov	r0, r25
   1a742:	00 0c       	add	r0, r0
   1a744:	aa 0b       	sbc	r26, r26
   1a746:	bb 0b       	sbc	r27, r27
   1a748:	ed b7       	in	r30, 0x3d	; 61
   1a74a:	fe b7       	in	r31, 0x3e	; 62
   1a74c:	84 83       	std	Z+4, r24	; 0x04
   1a74e:	95 83       	std	Z+5, r25	; 0x05
   1a750:	a6 83       	std	Z+6, r26	; 0x06
   1a752:	b7 83       	std	Z+7, r27	; 0x07
   1a754:	89 e3       	ldi	r24, 0x39	; 57
   1a756:	9a e3       	ldi	r25, 0x3A	; 58
   1a758:	a0 e0       	ldi	r26, 0x00	; 0
   1a75a:	81 83       	std	Z+1, r24	; 0x01
   1a75c:	92 83       	std	Z+2, r25	; 0x02
   1a75e:	a3 83       	std	Z+3, r26	; 0x03
   1a760:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a764:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a766:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a768:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a76a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a76c:	09 2e       	mov	r0, r25
   1a76e:	00 0c       	add	r0, r0
   1a770:	aa 0b       	sbc	r26, r26
   1a772:	bb 0b       	sbc	r27, r27
   1a774:	ed b7       	in	r30, 0x3d	; 61
   1a776:	fe b7       	in	r31, 0x3e	; 62
   1a778:	84 83       	std	Z+4, r24	; 0x04
   1a77a:	95 83       	std	Z+5, r25	; 0x05
   1a77c:	a6 83       	std	Z+6, r26	; 0x06
   1a77e:	b7 83       	std	Z+7, r27	; 0x07
   1a780:	8c e2       	ldi	r24, 0x2C	; 44
   1a782:	9a e3       	ldi	r25, 0x3A	; 58
   1a784:	a0 e0       	ldi	r26, 0x00	; 0
   1a786:	81 83       	std	Z+1, r24	; 0x01
   1a788:	92 83       	std	Z+2, r25	; 0x02
   1a78a:	a3 83       	std	Z+3, r26	; 0x03
   1a78c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a790:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a792:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a794:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a796:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a798:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a79a:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a79c:	ed b7       	in	r30, 0x3d	; 61
   1a79e:	fe b7       	in	r31, 0x3e	; 62
   1a7a0:	84 83       	std	Z+4, r24	; 0x04
   1a7a2:	95 83       	std	Z+5, r25	; 0x05
   1a7a4:	a6 83       	std	Z+6, r26	; 0x06
   1a7a6:	b7 83       	std	Z+7, r27	; 0x07
   1a7a8:	8b e1       	ldi	r24, 0x1B	; 27
   1a7aa:	9a e3       	ldi	r25, 0x3A	; 58
   1a7ac:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ae:	81 83       	std	Z+1, r24	; 0x01
   1a7b0:	92 83       	std	Z+2, r25	; 0x02
   1a7b2:	a3 83       	std	Z+3, r26	; 0x03
   1a7b4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a7b8:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7ba:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7bc:	85 a9       	ldd	r24, Z+53	; 0x35
   1a7be:	96 a9       	ldd	r25, Z+54	; 0x36
   1a7c0:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a7c2:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a7c4:	ed b7       	in	r30, 0x3d	; 61
   1a7c6:	fe b7       	in	r31, 0x3e	; 62
   1a7c8:	84 83       	std	Z+4, r24	; 0x04
   1a7ca:	95 83       	std	Z+5, r25	; 0x05
   1a7cc:	a6 83       	std	Z+6, r26	; 0x06
   1a7ce:	b7 83       	std	Z+7, r27	; 0x07
   1a7d0:	88 e0       	ldi	r24, 0x08	; 8
   1a7d2:	9a e3       	ldi	r25, 0x3A	; 58
   1a7d4:	a0 e0       	ldi	r26, 0x00	; 0
   1a7d6:	81 83       	std	Z+1, r24	; 0x01
   1a7d8:	92 83       	std	Z+2, r25	; 0x02
   1a7da:	a3 83       	std	Z+3, r26	; 0x03
   1a7dc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a7e0:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7e2:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7e4:	84 89       	ldd	r24, Z+20	; 0x14
   1a7e6:	95 89       	ldd	r25, Z+21	; 0x15
   1a7e8:	a6 89       	ldd	r26, Z+22	; 0x16
   1a7ea:	b7 89       	ldd	r27, Z+23	; 0x17
   1a7ec:	ed b7       	in	r30, 0x3d	; 61
   1a7ee:	fe b7       	in	r31, 0x3e	; 62
   1a7f0:	84 83       	std	Z+4, r24	; 0x04
   1a7f2:	95 83       	std	Z+5, r25	; 0x05
   1a7f4:	a6 83       	std	Z+6, r26	; 0x06
   1a7f6:	b7 83       	std	Z+7, r27	; 0x07
   1a7f8:	85 ef       	ldi	r24, 0xF5	; 245
   1a7fa:	99 e3       	ldi	r25, 0x39	; 57
   1a7fc:	a0 e0       	ldi	r26, 0x00	; 0
   1a7fe:	81 83       	std	Z+1, r24	; 0x01
   1a800:	92 83       	std	Z+2, r25	; 0x02
   1a802:	a3 83       	std	Z+3, r26	; 0x03
   1a804:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a808:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a80a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a80c:	80 8d       	ldd	r24, Z+24	; 0x18
   1a80e:	91 8d       	ldd	r25, Z+25	; 0x19
   1a810:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a812:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a814:	ed b7       	in	r30, 0x3d	; 61
   1a816:	fe b7       	in	r31, 0x3e	; 62
   1a818:	84 83       	std	Z+4, r24	; 0x04
   1a81a:	95 83       	std	Z+5, r25	; 0x05
   1a81c:	a6 83       	std	Z+6, r26	; 0x06
   1a81e:	b7 83       	std	Z+7, r27	; 0x07
   1a820:	82 ee       	ldi	r24, 0xE2	; 226
   1a822:	99 e3       	ldi	r25, 0x39	; 57
   1a824:	a0 e0       	ldi	r26, 0x00	; 0
   1a826:	81 83       	std	Z+1, r24	; 0x01
   1a828:	92 83       	std	Z+2, r25	; 0x02
   1a82a:	a3 83       	std	Z+3, r26	; 0x03
   1a82c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a830:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a832:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a834:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a838:	af 96       	adiw	r28, 0x2f	; 47
   1a83a:	0f b6       	in	r0, 0x3f	; 63
   1a83c:	f8 94       	cli
   1a83e:	de bf       	out	0x3e, r29	; 62
   1a840:	0f be       	out	0x3f, r0	; 63
   1a842:	cd bf       	out	0x3d, r28	; 61
   1a844:	df 91       	pop	r29
   1a846:	cf 91       	pop	r28
   1a848:	1f 91       	pop	r17
   1a84a:	0f 91       	pop	r16
   1a84c:	ef 90       	pop	r14
   1a84e:	df 90       	pop	r13
   1a850:	cf 90       	pop	r12
   1a852:	bf 90       	pop	r11
   1a854:	af 90       	pop	r10
   1a856:	9f 90       	pop	r9
   1a858:	8f 90       	pop	r8
   1a85a:	6f 90       	pop	r6
   1a85c:	5f 90       	pop	r5
   1a85e:	4f 90       	pop	r4
   1a860:	3f 90       	pop	r3
   1a862:	2f 90       	pop	r2
   1a864:	08 95       	ret

0001a866 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a866:	a5 e0       	ldi	r26, 0x05	; 5
   1a868:	b0 e0       	ldi	r27, 0x00	; 0
   1a86a:	e9 e3       	ldi	r30, 0x39	; 57
   1a86c:	f4 ed       	ldi	r31, 0xD4	; 212
   1a86e:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
   1a872:	7c 01       	movw	r14, r24
   1a874:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a876:	cb 01       	movw	r24, r22
   1a878:	0e 94 f0 c2 	call	0x185e0	; 0x185e0 <lif_checkname>
   1a87c:	89 2b       	or	r24, r25
   1a87e:	69 f4       	brne	.+26     	; 0x1a89a <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a880:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a884:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a888:	92 ff       	sbrs	r25, 2
   1a88a:	48 c0       	rjmp	.+144    	; 0x1a91c <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a88c:	ed b7       	in	r30, 0x3d	; 61
   1a88e:	fe b7       	in	r31, 0x3e	; 62
   1a890:	d5 83       	std	Z+5, r29	; 0x05
   1a892:	c4 83       	std	Z+4, r28	; 0x04
   1a894:	8b eb       	ldi	r24, 0xBB	; 187
   1a896:	99 e3       	ldi	r25, 0x39	; 57
   1a898:	15 c0       	rjmp	.+42     	; 0x1a8c4 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a89a:	fe 01       	movw	r30, r28
   1a89c:	01 90       	ld	r0, Z+
   1a89e:	00 20       	and	r0, r0
   1a8a0:	e9 f7       	brne	.-6      	; 0x1a89c <lif_find_file+0x36>
   1a8a2:	31 97       	sbiw	r30, 0x01	; 1
   1a8a4:	ec 1b       	sub	r30, r28
   1a8a6:	fd 0b       	sbc	r31, r29
   1a8a8:	3b 97       	sbiw	r30, 0x0b	; 11
   1a8aa:	98 f0       	brcs	.+38     	; 0x1a8d2 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a8ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a8b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a8b4:	92 ff       	sbrs	r25, 2
   1a8b6:	32 c0       	rjmp	.+100    	; 0x1a91c <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a8b8:	ed b7       	in	r30, 0x3d	; 61
   1a8ba:	fe b7       	in	r31, 0x3e	; 62
   1a8bc:	d5 83       	std	Z+5, r29	; 0x05
   1a8be:	c4 83       	std	Z+4, r28	; 0x04
   1a8c0:	86 e9       	ldi	r24, 0x96	; 150
   1a8c2:	99 e3       	ldi	r25, 0x39	; 57
   1a8c4:	a0 e0       	ldi	r26, 0x00	; 0
   1a8c6:	81 83       	std	Z+1, r24	; 0x01
   1a8c8:	92 83       	std	Z+2, r25	; 0x02
   1a8ca:	a3 83       	std	Z+3, r26	; 0x03
   1a8cc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1a8d0:	25 c0       	rjmp	.+74     	; 0x1a91c <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a8d2:	e1 14       	cp	r14, r1
   1a8d4:	f1 04       	cpc	r15, r1
   1a8d6:	11 f1       	breq	.+68     	; 0x1a91c <lif_find_file+0xb6>
   1a8d8:	00 e0       	ldi	r16, 0x00	; 0
   1a8da:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a8dc:	67 01       	movw	r12, r14
   1a8de:	fa e5       	ldi	r31, 0x5A	; 90
   1a8e0:	cf 0e       	add	r12, r31
   1a8e2:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a8e4:	57 01       	movw	r10, r14
   1a8e6:	2f e4       	ldi	r18, 0x4F	; 79
   1a8e8:	a2 0e       	add	r10, r18
   1a8ea:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a8ec:	b8 01       	movw	r22, r16
   1a8ee:	c7 01       	movw	r24, r14
   1a8f0:	0e 94 2f cb 	call	0x1965e	; 0x1965e <lif_readdirindex>
   1a8f4:	89 2b       	or	r24, r25
   1a8f6:	91 f0       	breq	.+36     	; 0x1a91c <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a8f8:	f6 01       	movw	r30, r12
   1a8fa:	80 81       	ld	r24, Z
   1a8fc:	91 81       	ldd	r25, Z+1	; 0x01
   1a8fe:	8f 3f       	cpi	r24, 0xFF	; 255
   1a900:	ff ef       	ldi	r31, 0xFF	; 255
   1a902:	9f 07       	cpc	r25, r31
   1a904:	59 f0       	breq	.+22     	; 0x1a91c <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a906:	89 2b       	or	r24, r25
   1a908:	31 f0       	breq	.+12     	; 0x1a916 <lif_find_file+0xb0>
   1a90a:	be 01       	movw	r22, r28
   1a90c:	c5 01       	movw	r24, r10
   1a90e:	0e 94 b3 31 	call	0x6366	; 0x6366 <strcasecmp>
   1a912:	89 2b       	or	r24, r25
   1a914:	31 f0       	breq	.+12     	; 0x1a922 <lif_find_file+0xbc>
            break;
        ++index;
   1a916:	0f 5f       	subi	r16, 0xFF	; 255
   1a918:	1f 4f       	sbci	r17, 0xFF	; 255
   1a91a:	e8 cf       	rjmp	.-48     	; 0x1a8ec <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a91c:	8f ef       	ldi	r24, 0xFF	; 255
   1a91e:	9f ef       	ldi	r25, 0xFF	; 255
   1a920:	01 c0       	rjmp	.+2      	; 0x1a924 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a922:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a924:	cd b7       	in	r28, 0x3d	; 61
   1a926:	de b7       	in	r29, 0x3e	; 62
   1a928:	25 96       	adiw	r28, 0x05	; 5
   1a92a:	ea e0       	ldi	r30, 0x0A	; 10
   1a92c:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0001a930 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a930:	a5 e0       	ldi	r26, 0x05	; 5
   1a932:	b0 e0       	ldi	r27, 0x00	; 0
   1a934:	ee e9       	ldi	r30, 0x9E	; 158
   1a936:	f4 ed       	ldi	r31, 0xD4	; 212
   1a938:	0c 94 f6 e6 	jmp	0x1cdec	; 0x1cdec <__prologue_saves__+0x14>
   1a93c:	6b 01       	movw	r12, r22
   1a93e:	7c 01       	movw	r14, r24
   1a940:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a942:	20 e0       	ldi	r18, 0x00	; 0
   1a944:	31 e0       	ldi	r19, 0x01	; 1
   1a946:	40 e0       	ldi	r20, 0x00	; 0
   1a948:	50 e0       	ldi	r21, 0x00	; 0
   1a94a:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
    if(!pos)
   1a94e:	61 15       	cp	r22, r1
   1a950:	71 05       	cpc	r23, r1
   1a952:	e1 f1       	breq	.+120    	; 0x1a9cc <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a954:	c0 e0       	ldi	r28, 0x00	; 0
   1a956:	d1 e0       	ldi	r29, 0x01	; 1
   1a958:	c6 1b       	sub	r28, r22
   1a95a:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a95c:	f8 01       	movw	r30, r16
   1a95e:	8f ee       	ldi	r24, 0xEF	; 239
   1a960:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a962:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a964:	cf 01       	movw	r24, r30
   1a966:	80 1b       	sub	r24, r16
   1a968:	91 0b       	sbc	r25, r17
   1a96a:	8c 17       	cp	r24, r28
   1a96c:	9d 07       	cpc	r25, r29
   1a96e:	14 f4       	brge	.+4      	; 0x1a974 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a970:	21 93       	st	Z+, r18
   1a972:	f8 cf       	rjmp	.-16     	; 0x1a964 <lif_e010_pad_sector+0x34>
   1a974:	1c 16       	cp	r1, r28
   1a976:	1d 06       	cpc	r1, r29
   1a978:	14 f0       	brlt	.+4      	; 0x1a97e <lif_e010_pad_sector+0x4e>
   1a97a:	c1 e0       	ldi	r28, 0x01	; 1
   1a97c:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a97e:	ce 01       	movw	r24, r28
   1a980:	0d 2e       	mov	r0, r29
   1a982:	00 0c       	add	r0, r0
   1a984:	aa 0b       	sbc	r26, r26
   1a986:	bb 0b       	sbc	r27, r27
   1a988:	bc 01       	movw	r22, r24
   1a98a:	cd 01       	movw	r24, r26
   1a98c:	6c 0d       	add	r22, r12
   1a98e:	7d 1d       	adc	r23, r13
   1a990:	8e 1d       	adc	r24, r14
   1a992:	9f 1d       	adc	r25, r15
   1a994:	20 e0       	ldi	r18, 0x00	; 0
   1a996:	31 e0       	ldi	r19, 0x01	; 1
   1a998:	40 e0       	ldi	r20, 0x00	; 0
   1a99a:	50 e0       	ldi	r21, 0x00	; 0
   1a99c:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a9a0:	61 15       	cp	r22, r1
   1a9a2:	71 05       	cpc	r23, r1
   1a9a4:	b1 f0       	breq	.+44     	; 0x1a9d2 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a9a6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a9aa:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a9ae:	32 ff       	sbrs	r19, 2
   1a9b0:	12 c0       	rjmp	.+36     	; 0x1a9d6 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a9b2:	ed b7       	in	r30, 0x3d	; 61
   1a9b4:	fe b7       	in	r31, 0x3e	; 62
   1a9b6:	75 83       	std	Z+5, r23	; 0x05
   1a9b8:	64 83       	std	Z+4, r22	; 0x04
   1a9ba:	8d e5       	ldi	r24, 0x5D	; 93
   1a9bc:	99 e3       	ldi	r25, 0x39	; 57
   1a9be:	a0 e0       	ldi	r26, 0x00	; 0
   1a9c0:	81 83       	std	Z+1, r24	; 0x01
   1a9c2:	92 83       	std	Z+2, r25	; 0x02
   1a9c4:	a3 83       	std	Z+3, r26	; 0x03
   1a9c6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1a9ca:	05 c0       	rjmp	.+10     	; 0x1a9d6 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a9cc:	80 e0       	ldi	r24, 0x00	; 0
   1a9ce:	90 e0       	ldi	r25, 0x00	; 0
   1a9d0:	04 c0       	rjmp	.+8      	; 0x1a9da <lif_e010_pad_sector+0xaa>
   1a9d2:	ce 01       	movw	r24, r28
   1a9d4:	02 c0       	rjmp	.+4      	; 0x1a9da <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a9d6:	8f ef       	ldi	r24, 0xFF	; 255
   1a9d8:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a9da:	cd b7       	in	r28, 0x3d	; 61
   1a9dc:	de b7       	in	r29, 0x3e	; 62
   1a9de:	25 96       	adiw	r28, 0x05	; 5
   1a9e0:	e8 e0       	ldi	r30, 0x08	; 8
   1a9e2:	0c 94 12 e7 	jmp	0x1ce24	; 0x1ce24 <__epilogue_restores__+0x14>

0001a9e6 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a9e6:	a5 e0       	ldi	r26, 0x05	; 5
   1a9e8:	b0 e0       	ldi	r27, 0x00	; 0
   1a9ea:	e9 ef       	ldi	r30, 0xF9	; 249
   1a9ec:	f4 ed       	ldi	r31, 0xD4	; 212
   1a9ee:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   1a9f2:	ec 01       	movw	r28, r24
   1a9f4:	4a 01       	movw	r8, r20
   1a9f6:	5b 01       	movw	r10, r22
   1a9f8:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a9fa:	fc 01       	movw	r30, r24
   1a9fc:	01 90       	ld	r0, Z+
   1a9fe:	00 20       	and	r0, r0
   1aa00:	e9 f7       	brne	.-6      	; 0x1a9fc <lif_ascii_string_to_e010+0x16>
   1aa02:	31 97       	sbiw	r30, 0x01	; 1
   1aa04:	6f 01       	movw	r12, r30
   1aa06:	c8 1a       	sub	r12, r24
   1aa08:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa0a:	41 2c       	mov	r4, r1
   1aa0c:	51 2c       	mov	r5, r1
   1aa0e:	32 01       	movw	r6, r4
   1aa10:	53 94       	inc	r5
   1aa12:	cb 01       	movw	r24, r22
   1aa14:	ba 01       	movw	r22, r20
   1aa16:	a3 01       	movw	r20, r6
   1aa18:	92 01       	movw	r18, r4
   1aa1a:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
   1aa1e:	21 2c       	mov	r2, r1
   1aa20:	33 24       	eor	r3, r3
   1aa22:	33 94       	inc	r3
   1aa24:	c1 01       	movw	r24, r2
   1aa26:	86 1b       	sub	r24, r22
   1aa28:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aa2a:	86 30       	cpi	r24, 0x06	; 6
   1aa2c:	91 05       	cpc	r25, r1
   1aa2e:	20 f0       	brcs	.+8      	; 0x1aa38 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa30:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1aa32:	00 e0       	ldi	r16, 0x00	; 0
   1aa34:	10 e0       	ldi	r17, 0x00	; 0
   1aa36:	17 c0       	rjmp	.+46     	; 0x1aa66 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1aa38:	a7 01       	movw	r20, r14
   1aa3a:	c5 01       	movw	r24, r10
   1aa3c:	b4 01       	movw	r22, r8
   1aa3e:	78 df       	rcall	.-272    	; 0x1a930 <lif_e010_pad_sector>
   1aa40:	8c 01       	movw	r16, r24
        if(ind < 0)
   1aa42:	97 fd       	sbrc	r25, 7
   1aa44:	83 c0       	rjmp	.+262    	; 0x1ab4c <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1aa46:	09 2e       	mov	r0, r25
   1aa48:	00 0c       	add	r0, r0
   1aa4a:	aa 0b       	sbc	r26, r26
   1aa4c:	bb 0b       	sbc	r27, r27
   1aa4e:	bc 01       	movw	r22, r24
   1aa50:	cd 01       	movw	r24, r26
   1aa52:	68 0d       	add	r22, r8
   1aa54:	79 1d       	adc	r23, r9
   1aa56:	8a 1d       	adc	r24, r10
   1aa58:	9b 1d       	adc	r25, r11
   1aa5a:	a3 01       	movw	r20, r6
   1aa5c:	92 01       	movw	r18, r4
   1aa5e:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
   1aa62:	26 1a       	sub	r2, r22
   1aa64:	37 0a       	sbc	r3, r23
   1aa66:	f7 01       	movw	r30, r14
   1aa68:	e0 0f       	add	r30, r16
   1aa6a:	f1 1f       	adc	r31, r17
   1aa6c:	0d 5f       	subi	r16, 0xFD	; 253
   1aa6e:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1aa70:	c6 01       	movw	r24, r12
   1aa72:	02 96       	adiw	r24, 0x02	; 2
   1aa74:	82 15       	cp	r24, r2
   1aa76:	93 05       	cpc	r25, r3
   1aa78:	84 f4       	brge	.+32     	; 0x1aa9a <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1aa7a:	8f ed       	ldi	r24, 0xDF	; 223
   1aa7c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa7e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1aa80:	d2 82       	std	Z+2, r13	; 0x02
   1aa82:	f7 01       	movw	r30, r14
   1aa84:	e0 0f       	add	r30, r16
   1aa86:	f1 1f       	adc	r31, r17
   1aa88:	cf 01       	movw	r24, r30
   1aa8a:	8e 19       	sub	r24, r14
   1aa8c:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aa8e:	29 91       	ld	r18, Y+
   1aa90:	22 23       	and	r18, r18
   1aa92:	09 f4       	brne	.+2      	; 0x1aa96 <lif_ascii_string_to_e010+0xb0>
   1aa94:	5b c0       	rjmp	.+182    	; 0x1ab4c <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aa96:	21 93       	st	Z+, r18
   1aa98:	f7 cf       	rjmp	.-18     	; 0x1aa88 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1aa9a:	8f ec       	ldi	r24, 0xCF	; 207
   1aa9c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa9e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1aaa0:	d2 82       	std	Z+2, r13	; 0x02
   1aaa2:	d7 01       	movw	r26, r14
   1aaa4:	a0 0f       	add	r26, r16
   1aaa6:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aaa8:	fe 01       	movw	r30, r28
   1aaaa:	81 91       	ld	r24, Z+
   1aaac:	81 11       	cpse	r24, r1
   1aaae:	0e c0       	rjmp	.+28     	; 0x1aacc <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1aab0:	c8 01       	movw	r24, r16
   1aab2:	01 2e       	mov	r0, r17
   1aab4:	00 0c       	add	r0, r0
   1aab6:	aa 0b       	sbc	r26, r26
   1aab8:	bb 0b       	sbc	r27, r27
   1aaba:	bc 01       	movw	r22, r24
   1aabc:	cd 01       	movw	r24, r26
   1aabe:	68 0d       	add	r22, r8
   1aac0:	79 1d       	adc	r23, r9
   1aac2:	8a 1d       	adc	r24, r10
   1aac4:	9b 1d       	adc	r25, r11
   1aac6:	61 11       	cpse	r22, r1
   1aac8:	09 c0       	rjmp	.+18     	; 0x1aadc <lif_ascii_string_to_e010+0xf6>
   1aaca:	21 c0       	rjmp	.+66     	; 0x1ab0e <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aacc:	02 15       	cp	r16, r2
   1aace:	13 05       	cpc	r17, r3
   1aad0:	7c f7       	brge	.-34     	; 0x1aab0 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1aad2:	0f 5f       	subi	r16, 0xFF	; 255
   1aad4:	1f 4f       	sbci	r17, 0xFF	; 255
   1aad6:	8d 93       	st	X+, r24
   1aad8:	ef 01       	movw	r28, r30
   1aada:	e6 cf       	rjmp	.-52     	; 0x1aaa8 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1aadc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1aae0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aae4:	32 ff       	sbrs	r19, 2
   1aae6:	30 c0       	rjmp	.+96     	; 0x1ab48 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1aae8:	20 e0       	ldi	r18, 0x00	; 0
   1aaea:	31 e0       	ldi	r19, 0x01	; 1
   1aaec:	40 e0       	ldi	r20, 0x00	; 0
   1aaee:	50 e0       	ldi	r21, 0x00	; 0
   1aaf0:	0e 94 a1 e6 	call	0x1cd42	; 0x1cd42 <__divmodsi4>
   1aaf4:	ed b7       	in	r30, 0x3d	; 61
   1aaf6:	fe b7       	in	r31, 0x3e	; 62
   1aaf8:	75 83       	std	Z+5, r23	; 0x05
   1aafa:	64 83       	std	Z+4, r22	; 0x04
   1aafc:	89 e3       	ldi	r24, 0x39	; 57
   1aafe:	99 e3       	ldi	r25, 0x39	; 57
   1ab00:	a0 e0       	ldi	r26, 0x00	; 0
   1ab02:	81 83       	std	Z+1, r24	; 0x01
   1ab04:	92 83       	std	Z+2, r25	; 0x02
   1ab06:	a3 83       	std	Z+3, r26	; 0x03
   1ab08:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1ab0c:	1d c0       	rjmp	.+58     	; 0x1ab48 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1ab0e:	fe 01       	movw	r30, r28
   1ab10:	01 90       	ld	r0, Z+
   1ab12:	00 20       	and	r0, r0
   1ab14:	e9 f7       	brne	.-6      	; 0x1ab10 <lif_ascii_string_to_e010+0x12a>
   1ab16:	31 97       	sbiw	r30, 0x01	; 1
   1ab18:	9f 01       	movw	r18, r30
   1ab1a:	2c 1b       	sub	r18, r28
   1ab1c:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1ab1e:	d7 01       	movw	r26, r14
   1ab20:	a0 0f       	add	r26, r16
   1ab22:	b1 1f       	adc	r27, r17
   1ab24:	8f e6       	ldi	r24, 0x6F	; 111
   1ab26:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ab28:	fd 01       	movw	r30, r26
   1ab2a:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1ab2c:	32 83       	std	Z+2, r19	; 0x02
   1ab2e:	0d 5f       	subi	r16, 0xFD	; 253
   1ab30:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab32:	f7 01       	movw	r30, r14
   1ab34:	e0 0f       	add	r30, r16
   1ab36:	f1 1f       	adc	r31, r17
   1ab38:	cf 01       	movw	r24, r30
   1ab3a:	8e 19       	sub	r24, r14
   1ab3c:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1ab3e:	29 91       	ld	r18, Y+
   1ab40:	22 23       	and	r18, r18
   1ab42:	21 f0       	breq	.+8      	; 0x1ab4c <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1ab44:	21 93       	st	Z+, r18
   1ab46:	f8 cf       	rjmp	.-16     	; 0x1ab38 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ab48:	8f ef       	ldi	r24, 0xFF	; 255
   1ab4a:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ab4c:	cd b7       	in	r28, 0x3d	; 61
   1ab4e:	de b7       	in	r29, 0x3e	; 62
   1ab50:	25 96       	adiw	r28, 0x05	; 5
   1ab52:	e2 e1       	ldi	r30, 0x12	; 18
   1ab54:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0001ab58 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ab58:	ad e0       	ldi	r26, 0x0D	; 13
   1ab5a:	b3 e0       	ldi	r27, 0x03	; 3
   1ab5c:	e2 eb       	ldi	r30, 0xB2	; 178
   1ab5e:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab60:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   1ab64:	5c 01       	movw	r10, r24
   1ab66:	2a 01       	movw	r4, r20
   1ab68:	3b 01       	movw	r6, r22
   1ab6a:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ab6c:	6e ef       	ldi	r22, 0xFE	; 254
   1ab6e:	78 e0       	ldi	r23, 0x08	; 8
   1ab70:	0e 94 51 c1 	call	0x182a2	; 0x182a2 <lif_open>
   1ab74:	c7 5f       	subi	r28, 0xF7	; 247
   1ab76:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab78:	99 83       	std	Y+1, r25	; 0x01
   1ab7a:	88 83       	st	Y, r24
   1ab7c:	c9 50       	subi	r28, 0x09	; 9
   1ab7e:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1ab80:	89 2b       	or	r24, r25
   1ab82:	09 f4       	brne	.+2      	; 0x1ab86 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1ab84:	63 c0       	rjmp	.+198    	; 0x1ac4c <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ab86:	81 2c       	mov	r8, r1
   1ab88:	91 2c       	mov	r9, r1
   1ab8a:	c1 2c       	mov	r12, r1
   1ab8c:	d1 2c       	mov	r13, r1
   1ab8e:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ab90:	8b e2       	ldi	r24, 0x2B	; 43
   1ab92:	99 e3       	ldi	r25, 0x39	; 57
   1ab94:	9c 01       	movw	r18, r24
   1ab96:	40 e0       	ldi	r20, 0x00	; 0
   1ab98:	c5 5f       	subi	r28, 0xF5	; 245
   1ab9a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab9c:	28 83       	st	Y, r18
   1ab9e:	39 83       	std	Y+1, r19	; 0x01
   1aba0:	4a 83       	std	Y+2, r20	; 0x02
   1aba2:	cb 50       	subi	r28, 0x0B	; 11
   1aba4:	d3 40       	sbci	r29, 0x03	; 3
   1aba6:	14 c0       	rjmp	.+40     	; 0x1abd0 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1aba8:	c1 01       	movw	r24, r2
   1abaa:	03 2c       	mov	r0, r3
   1abac:	00 0c       	add	r0, r0
   1abae:	aa 0b       	sbc	r26, r26
   1abb0:	bb 0b       	sbc	r27, r27
   1abb2:	48 0e       	add	r4, r24
   1abb4:	59 1e       	adc	r5, r25
   1abb6:	6a 1e       	adc	r6, r26
   1abb8:	7b 1e       	adc	r7, r27
        bytes += size;
   1abba:	c8 0e       	add	r12, r24
   1abbc:	d9 1e       	adc	r13, r25
   1abbe:	ea 1e       	adc	r14, r26
   1abc0:	fb 1e       	adc	r15, r27
        count += size;
   1abc2:	82 0c       	add	r8, r2
   1abc4:	93 1c       	adc	r9, r3

        if(count > 256)
   1abc6:	31 e0       	ldi	r19, 0x01	; 1
   1abc8:	83 16       	cp	r8, r19
   1abca:	93 06       	cpc	r9, r19
   1abcc:	0c f0       	brlt	.+2      	; 0x1abd0 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1abce:	43 c0       	rjmp	.+134    	; 0x1ac56 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1abd0:	c7 5f       	subi	r28, 0xF7	; 247
   1abd2:	dc 4f       	sbci	r29, 0xFC	; 252
   1abd4:	48 81       	ld	r20, Y
   1abd6:	59 81       	ldd	r21, Y+1	; 0x01
   1abd8:	c9 50       	subi	r28, 0x09	; 9
   1abda:	d3 40       	sbci	r29, 0x03	; 3
   1abdc:	6d ef       	ldi	r22, 0xFD	; 253
   1abde:	70 e0       	ldi	r23, 0x00	; 0
   1abe0:	ce 01       	movw	r24, r28
   1abe2:	88 5f       	subi	r24, 0xF8	; 248
   1abe4:	9d 4f       	sbci	r25, 0xFD	; 253
   1abe6:	0e 94 62 76 	call	0xecc4	; 0xecc4 <fgets>
   1abea:	89 2b       	or	r24, r25
   1abec:	09 f4       	brne	.+2      	; 0x1abf0 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1abee:	4b c0       	rjmp	.+150    	; 0x1ac86 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1abf0:	ce 01       	movw	r24, r28
   1abf2:	88 5f       	subi	r24, 0xF8	; 248
   1abf4:	9d 4f       	sbci	r25, 0xFD	; 253
   1abf6:	0e 94 2a 32 	call	0x6454	; 0x6454 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1abfa:	6e e4       	ldi	r22, 0x4E	; 78
   1abfc:	76 e1       	ldi	r23, 0x16	; 22
   1abfe:	ce 01       	movw	r24, r28
   1ac00:	88 5f       	subi	r24, 0xF8	; 248
   1ac02:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac04:	0e 94 6d 31 	call	0x62da	; 0x62da <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ac08:	9e 01       	movw	r18, r28
   1ac0a:	28 5f       	subi	r18, 0xF8	; 248
   1ac0c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac0e:	b3 01       	movw	r22, r6
   1ac10:	a2 01       	movw	r20, r4
   1ac12:	ce 01       	movw	r24, r28
   1ac14:	88 5f       	subi	r24, 0xF8	; 248
   1ac16:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac18:	e6 de       	rcall	.-564    	; 0x1a9e6 <lif_ascii_string_to_e010>
   1ac1a:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1ac1c:	a1 14       	cp	r10, r1
   1ac1e:	b1 04       	cpc	r11, r1
   1ac20:	19 f2       	breq	.-122    	; 0x1aba8 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ac22:	8c 01       	movw	r16, r24
   1ac24:	a3 01       	movw	r20, r6
   1ac26:	92 01       	movw	r18, r4
   1ac28:	be 01       	movw	r22, r28
   1ac2a:	68 5f       	subi	r22, 0xF8	; 248
   1ac2c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac2e:	c5 01       	movw	r24, r10
   1ac30:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
            if(len < size)
   1ac34:	82 15       	cp	r24, r2
   1ac36:	93 05       	cpc	r25, r3
   1ac38:	0c f0       	brlt	.+2      	; 0x1ac3c <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1ac3a:	b6 cf       	rjmp	.-148    	; 0x1aba8 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1ac3c:	c7 5f       	subi	r28, 0xF7	; 247
   1ac3e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac40:	88 81       	ld	r24, Y
   1ac42:	99 81       	ldd	r25, Y+1	; 0x01
   1ac44:	c9 50       	subi	r28, 0x09	; 9
   1ac46:	d3 40       	sbci	r29, 0x03	; 3
   1ac48:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>
                return(-1);
   1ac4c:	6f ef       	ldi	r22, 0xFF	; 255
   1ac4e:	7f ef       	ldi	r23, 0xFF	; 255
   1ac50:	8f ef       	ldi	r24, 0xFF	; 255
   1ac52:	9f ef       	ldi	r25, 0xFF	; 255
   1ac54:	84 c0       	rjmp	.+264    	; 0x1ad5e <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1ac56:	a1 14       	cp	r10, r1
   1ac58:	b1 04       	cpc	r11, r1
   1ac5a:	91 f0       	breq	.+36     	; 0x1ac80 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac5c:	ed b7       	in	r30, 0x3d	; 61
   1ac5e:	fe b7       	in	r31, 0x3e	; 62
   1ac60:	c4 82       	std	Z+4, r12	; 0x04
   1ac62:	d5 82       	std	Z+5, r13	; 0x05
   1ac64:	e6 82       	std	Z+6, r14	; 0x06
   1ac66:	f7 82       	std	Z+7, r15	; 0x07
   1ac68:	c5 5f       	subi	r28, 0xF5	; 245
   1ac6a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac6c:	28 81       	ld	r18, Y
   1ac6e:	39 81       	ldd	r19, Y+1	; 0x01
   1ac70:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac72:	cb 50       	subi	r28, 0x0B	; 11
   1ac74:	d3 40       	sbci	r29, 0x03	; 3
   1ac76:	21 83       	std	Z+1, r18	; 0x01
   1ac78:	32 83       	std	Z+2, r19	; 0x02
   1ac7a:	43 83       	std	Z+3, r20	; 0x03
   1ac7c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1ac80:	81 2c       	mov	r8, r1
   1ac82:	91 2c       	mov	r9, r1
   1ac84:	a5 cf       	rjmp	.-182    	; 0x1abd0 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ac86:	c7 5f       	subi	r28, 0xF7	; 247
   1ac88:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac8a:	88 81       	ld	r24, Y
   1ac8c:	99 81       	ldd	r25, Y+1	; 0x01
   1ac8e:	c9 50       	subi	r28, 0x09	; 9
   1ac90:	d3 40       	sbci	r29, 0x03	; 3
   1ac92:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>

// Write EOF
    str[0] = 0;
   1ac96:	c8 5f       	subi	r28, 0xF8	; 248
   1ac98:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac9a:	18 82       	st	Y, r1
   1ac9c:	c8 50       	subi	r28, 0x08	; 8
   1ac9e:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1aca0:	9e 01       	movw	r18, r28
   1aca2:	28 5f       	subi	r18, 0xF8	; 248
   1aca4:	3f 4f       	sbci	r19, 0xFF	; 255
   1aca6:	b3 01       	movw	r22, r6
   1aca8:	a2 01       	movw	r20, r4
   1acaa:	ce 01       	movw	r24, r28
   1acac:	88 5f       	subi	r24, 0xF8	; 248
   1acae:	9d 4f       	sbci	r25, 0xFD	; 253
   1acb0:	9a de       	rcall	.-716    	; 0x1a9e6 <lif_ascii_string_to_e010>
   1acb2:	4c 01       	movw	r8, r24

    if(LIF)
   1acb4:	a1 14       	cp	r10, r1
   1acb6:	b1 04       	cpc	r11, r1
   1acb8:	d1 f4       	brne	.+52     	; 0x1acee <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1acba:	c4 01       	movw	r24, r8
   1acbc:	09 2c       	mov	r0, r9
   1acbe:	00 0c       	add	r0, r0
   1acc0:	aa 0b       	sbc	r26, r26
   1acc2:	bb 0b       	sbc	r27, r27
   1acc4:	c8 0e       	add	r12, r24
   1acc6:	d9 1e       	adc	r13, r25
   1acc8:	ea 1e       	adc	r14, r26
   1acca:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1accc:	12 01       	movw	r2, r4
   1acce:	23 01       	movw	r4, r6
   1acd0:	28 0e       	add	r2, r24
   1acd2:	39 1e       	adc	r3, r25
   1acd4:	4a 1e       	adc	r4, r26
   1acd6:	5b 1e       	adc	r5, r27
   1acd8:	ae 01       	movw	r20, r28
   1acda:	48 5f       	subi	r20, 0xF8	; 248
   1acdc:	5f 4f       	sbci	r21, 0xFF	; 255
   1acde:	c2 01       	movw	r24, r4
   1ace0:	b1 01       	movw	r22, r2
   1ace2:	26 de       	rcall	.-948    	; 0x1a930 <lif_e010_pad_sector>
   1ace4:	3c 01       	movw	r6, r24
    if(LIF)
   1ace6:	a1 14       	cp	r10, r1
   1ace8:	b1 04       	cpc	r11, r1
   1acea:	e1 f4       	brne	.+56     	; 0x1ad24 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1acec:	36 c0       	rjmp	.+108    	; 0x1ad5a <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1acee:	ed b7       	in	r30, 0x3d	; 61
   1acf0:	fe b7       	in	r31, 0x3e	; 62
   1acf2:	c4 82       	std	Z+4, r12	; 0x04
   1acf4:	d5 82       	std	Z+5, r13	; 0x05
   1acf6:	e6 82       	std	Z+6, r14	; 0x06
   1acf8:	f7 82       	std	Z+7, r15	; 0x07
   1acfa:	8d e1       	ldi	r24, 0x1D	; 29
   1acfc:	99 e3       	ldi	r25, 0x39	; 57
   1acfe:	a0 e0       	ldi	r26, 0x00	; 0
   1ad00:	81 83       	std	Z+1, r24	; 0x01
   1ad02:	92 83       	std	Z+2, r25	; 0x02
   1ad04:	a3 83       	std	Z+3, r26	; 0x03
   1ad06:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ad0a:	84 01       	movw	r16, r8
   1ad0c:	a3 01       	movw	r20, r6
   1ad0e:	92 01       	movw	r18, r4
   1ad10:	be 01       	movw	r22, r28
   1ad12:	68 5f       	subi	r22, 0xF8	; 248
   1ad14:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad16:	c5 01       	movw	r24, r10
   1ad18:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        if(len < size)
   1ad1c:	88 15       	cp	r24, r8
   1ad1e:	99 05       	cpc	r25, r9
   1ad20:	64 f6       	brge	.-104    	; 0x1acba <lif_add_ascii_file_as_e010_wrapper+0x162>
   1ad22:	94 cf       	rjmp	.-216    	; 0x1ac4c <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ad24:	8c 01       	movw	r16, r24
   1ad26:	a2 01       	movw	r20, r4
   1ad28:	91 01       	movw	r18, r2
   1ad2a:	be 01       	movw	r22, r28
   1ad2c:	68 5f       	subi	r22, 0xF8	; 248
   1ad2e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad30:	c5 01       	movw	r24, r10
   1ad32:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        if(len < size)
   1ad36:	86 15       	cp	r24, r6
   1ad38:	97 05       	cpc	r25, r7
   1ad3a:	0c f4       	brge	.+2      	; 0x1ad3e <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1ad3c:	87 cf       	rjmp	.-242    	; 0x1ac4c <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ad3e:	ed b7       	in	r30, 0x3d	; 61
   1ad40:	fe b7       	in	r31, 0x3e	; 62
   1ad42:	c4 82       	std	Z+4, r12	; 0x04
   1ad44:	d5 82       	std	Z+5, r13	; 0x05
   1ad46:	e6 82       	std	Z+6, r14	; 0x06
   1ad48:	f7 82       	std	Z+7, r15	; 0x07
   1ad4a:	8f e0       	ldi	r24, 0x0F	; 15
   1ad4c:	99 e3       	ldi	r25, 0x39	; 57
   1ad4e:	a0 e0       	ldi	r26, 0x00	; 0
   1ad50:	81 83       	std	Z+1, r24	; 0x01
   1ad52:	92 83       	std	Z+2, r25	; 0x02
   1ad54:	a3 83       	std	Z+3, r26	; 0x03
   1ad56:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    return(bytes);
   1ad5a:	b6 01       	movw	r22, r12
   1ad5c:	c7 01       	movw	r24, r14
}
   1ad5e:	c3 5f       	subi	r28, 0xF3	; 243
   1ad60:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad62:	e2 e1       	ldi	r30, 0x12	; 18
   1ad64:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0001ad68 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ad68:	ab e3       	ldi	r26, 0x3B	; 59
   1ad6a:	b0 e0       	ldi	r27, 0x00	; 0
   1ad6c:	ea eb       	ldi	r30, 0xBA	; 186
   1ad6e:	f6 ed       	ldi	r31, 0xD6	; 214
   1ad70:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   1ad74:	6c 01       	movw	r12, r24
   1ad76:	1b 01       	movw	r2, r22
   1ad78:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1ad7a:	fc 01       	movw	r30, r24
   1ad7c:	80 81       	ld	r24, Z
   1ad7e:	81 11       	cpse	r24, r1
   1ad80:	03 c0       	rjmp	.+6      	; 0x1ad88 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ad82:	8c ed       	ldi	r24, 0xDC	; 220
   1ad84:	98 e3       	ldi	r25, 0x38	; 56
   1ad86:	1a c0       	rjmp	.+52     	; 0x1adbc <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ad88:	fb 01       	movw	r30, r22
   1ad8a:	80 81       	ld	r24, Z
   1ad8c:	81 11       	cpse	r24, r1
   1ad8e:	03 c0       	rjmp	.+6      	; 0x1ad96 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ad90:	8e ea       	ldi	r24, 0xAE	; 174
   1ad92:	98 e3       	ldi	r25, 0x38	; 56
   1ad94:	13 c0       	rjmp	.+38     	; 0x1adbc <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ad96:	fa 01       	movw	r30, r20
   1ad98:	80 81       	ld	r24, Z
   1ad9a:	81 11       	cpse	r24, r1
   1ad9c:	03 c0       	rjmp	.+6      	; 0x1ada4 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ad9e:	8f e7       	ldi	r24, 0x7F	; 127
   1ada0:	98 e3       	ldi	r25, 0x38	; 56
   1ada2:	0c c0       	rjmp	.+24     	; 0x1adbc <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ada4:	be 01       	movw	r22, r28
   1ada6:	66 5f       	subi	r22, 0xF6	; 246
   1ada8:	7f 4f       	sbci	r23, 0xFF	; 255
   1adaa:	ca 01       	movw	r24, r20
   1adac:	0e 94 7b c1 	call	0x182f6	; 0x182f6 <lif_stat>
   1adb0:	9b af       	std	Y+59, r25	; 0x3b
   1adb2:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1adb4:	89 2b       	or	r24, r25
   1adb6:	59 f4       	brne	.+22     	; 0x1adce <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1adb8:	8f e4       	ldi	r24, 0x4F	; 79
   1adba:	98 e3       	ldi	r25, 0x38	; 56
   1adbc:	a0 e0       	ldi	r26, 0x00	; 0
   1adbe:	ed b7       	in	r30, 0x3d	; 61
   1adc0:	fe b7       	in	r31, 0x3e	; 62
   1adc2:	81 83       	std	Z+1, r24	; 0x01
   1adc4:	92 83       	std	Z+2, r25	; 0x02
   1adc6:	a3 83       	std	Z+3, r26	; 0x03
   1adc8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1adcc:	01 c1       	rjmp	.+514    	; 0x1afd0 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1adce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1add2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1add6:	92 ff       	sbrs	r25, 2
   1add8:	10 c0       	rjmp	.+32     	; 0x1adfa <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1adda:	ed b7       	in	r30, 0x3d	; 61
   1addc:	fe b7       	in	r31, 0x3e	; 62
   1adde:	f1 86       	std	Z+9, r15	; 0x09
   1ade0:	e0 86       	std	Z+8, r14	; 0x08
   1ade2:	37 82       	std	Z+7, r3	; 0x07
   1ade4:	26 82       	std	Z+6, r2	; 0x06
   1ade6:	d5 82       	std	Z+5, r13	; 0x05
   1ade8:	c4 82       	std	Z+4, r12	; 0x04
   1adea:	80 e2       	ldi	r24, 0x20	; 32
   1adec:	98 e3       	ldi	r25, 0x38	; 56
   1adee:	a0 e0       	ldi	r26, 0x00	; 0
   1adf0:	81 83       	std	Z+1, r24	; 0x01
   1adf2:	92 83       	std	Z+2, r25	; 0x02
   1adf4:	a3 83       	std	Z+3, r26	; 0x03
   1adf6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1adfa:	97 01       	movw	r18, r14
   1adfc:	40 e0       	ldi	r20, 0x00	; 0
   1adfe:	50 e0       	ldi	r21, 0x00	; 0
   1ae00:	ba 01       	movw	r22, r20
   1ae02:	80 e0       	ldi	r24, 0x00	; 0
   1ae04:	90 e0       	ldi	r25, 0x00	; 0
   1ae06:	a8 de       	rcall	.-688    	; 0x1ab58 <lif_add_ascii_file_as_e010_wrapper>
   1ae08:	4b 01       	movw	r8, r22
   1ae0a:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ae0c:	47 2e       	mov	r4, r23
   1ae0e:	58 2e       	mov	r5, r24
   1ae10:	69 2e       	mov	r6, r25
   1ae12:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ae14:	66 23       	and	r22, r22
   1ae16:	29 f0       	breq	.+10     	; 0x1ae22 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1ae18:	ff ef       	ldi	r31, 0xFF	; 255
   1ae1a:	4f 1a       	sub	r4, r31
   1ae1c:	5f 0a       	sbc	r5, r31
   1ae1e:	6f 0a       	sbc	r6, r31
   1ae20:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ae22:	61 e0       	ldi	r22, 0x01	; 1
   1ae24:	79 e0       	ldi	r23, 0x09	; 9
   1ae26:	c6 01       	movw	r24, r12
   1ae28:	49 da       	rcall	.-2926   	; 0x1a2bc <lif_open_volume>
   1ae2a:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ae2c:	00 97       	sbiw	r24, 0x00	; 0
   1ae2e:	09 f4       	brne	.+2      	; 0x1ae32 <lif_add_ascii_file_as_e010+0xca>
   1ae30:	cf c0       	rjmp	.+414    	; 0x1afd0 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1ae32:	b3 01       	movw	r22, r6
   1ae34:	a2 01       	movw	r20, r4
   1ae36:	e2 d8       	rcall	.-3644   	; 0x19ffc <lif_newdir>
   1ae38:	3c 01       	movw	r6, r24
    if(index == -1)
   1ae3a:	8f ef       	ldi	r24, 0xFF	; 255
   1ae3c:	68 16       	cp	r6, r24
   1ae3e:	78 06       	cpc	r7, r24
   1ae40:	79 f4       	brne	.+30     	; 0x1ae60 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1ae42:	ed b7       	in	r30, 0x3d	; 61
   1ae44:	fe b7       	in	r31, 0x3e	; 62
   1ae46:	f7 82       	std	Z+7, r15	; 0x07
   1ae48:	e6 82       	std	Z+6, r14	; 0x06
   1ae4a:	d5 82       	std	Z+5, r13	; 0x05
   1ae4c:	c4 82       	std	Z+4, r12	; 0x04
   1ae4e:	80 ef       	ldi	r24, 0xF0	; 240
   1ae50:	97 e3       	ldi	r25, 0x37	; 55
   1ae52:	a0 e0       	ldi	r26, 0x00	; 0
   1ae54:	81 83       	std	Z+1, r24	; 0x01
   1ae56:	92 83       	std	Z+2, r25	; 0x02
   1ae58:	a3 83       	std	Z+3, r26	; 0x03
   1ae5a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1ae5e:	a0 c0       	rjmp	.+320    	; 0x1afa0 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1ae60:	68 01       	movw	r12, r16
   1ae62:	ff e4       	ldi	r31, 0x4F	; 79
   1ae64:	cf 0e       	add	r12, r31
   1ae66:	d1 1c       	adc	r13, r1
   1ae68:	4a e0       	ldi	r20, 0x0A	; 10
   1ae6a:	50 e0       	ldi	r21, 0x00	; 0
   1ae6c:	b1 01       	movw	r22, r2
   1ae6e:	c6 01       	movw	r24, r12
   1ae70:	0e 94 2a c3 	call	0x18654	; 0x18654 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1ae74:	80 e1       	ldi	r24, 0x10	; 16
   1ae76:	90 ee       	ldi	r25, 0xE0	; 224
   1ae78:	f8 01       	movw	r30, r16
   1ae7a:	e6 5a       	subi	r30, 0xA6	; 166
   1ae7c:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae7e:	91 83       	std	Z+1, r25	; 0x01
   1ae80:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ae82:	ea ad       	ldd	r30, Y+58	; 0x3a
   1ae84:	fb ad       	ldd	r31, Y+59	; 0x3b
   1ae86:	60 a5       	ldd	r22, Z+40	; 0x28
   1ae88:	71 a5       	ldd	r23, Z+41	; 0x29
   1ae8a:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ae8c:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ae8e:	a8 01       	movw	r20, r16
   1ae90:	4c 59       	subi	r20, 0x9C	; 156
   1ae92:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae94:	0e 94 4f c5 	call	0x18a9e	; 0x18a9e <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1ae98:	81 e0       	ldi	r24, 0x01	; 1
   1ae9a:	90 e8       	ldi	r25, 0x80	; 128
   1ae9c:	f8 01       	movw	r30, r16
   1ae9e:	e6 59       	subi	r30, 0x96	; 150
   1aea0:	ff 4f       	sbci	r31, 0xFF	; 255
   1aea2:	91 83       	std	Z+1, r25	; 0x01
   1aea4:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1aea6:	32 96       	adiw	r30, 0x02	; 2
   1aea8:	91 82       	std	Z+1, r9	; 0x01
   1aeaa:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1aeac:	80 e0       	ldi	r24, 0x00	; 0
   1aeae:	91 e0       	ldi	r25, 0x01	; 1
   1aeb0:	32 96       	adiw	r30, 0x02	; 2
   1aeb2:	91 83       	std	Z+1, r25	; 0x01
   1aeb4:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1aeb6:	58 01       	movw	r10, r16
   1aeb8:	fc e5       	ldi	r31, 0x5C	; 92
   1aeba:	af 0e       	add	r10, r31
   1aebc:	b1 1c       	adc	r11, r1
   1aebe:	f5 01       	movw	r30, r10
   1aec0:	80 81       	ld	r24, Z
   1aec2:	91 81       	ldd	r25, Z+1	; 0x01
   1aec4:	a2 81       	ldd	r26, Z+2	; 0x02
   1aec6:	b3 81       	ldd	r27, Z+3	; 0x03
   1aec8:	22 24       	eor	r2, r2
   1aeca:	38 2e       	mov	r3, r24
   1aecc:	49 2e       	mov	r4, r25
   1aece:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1aed0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aed4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aed8:	92 ff       	sbrs	r25, 2
   1aeda:	05 c0       	rjmp	.+10     	; 0x1aee6 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1aedc:	60 e5       	ldi	r22, 0x50	; 80
   1aede:	76 e1       	ldi	r23, 0x16	; 22
   1aee0:	c8 01       	movw	r24, r16
   1aee2:	0e 94 3b c6 	call	0x18c76	; 0x18c76 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1aee6:	97 01       	movw	r18, r14
   1aee8:	b2 01       	movw	r22, r4
   1aeea:	a1 01       	movw	r20, r2
   1aeec:	c8 01       	movw	r24, r16
   1aeee:	34 de       	rcall	.-920    	; 0x1ab58 <lif_add_ascii_file_as_e010_wrapper>
   1aef0:	4b 01       	movw	r8, r22
   1aef2:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1aef4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aef8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aefc:	92 ff       	sbrs	r25, 2
   1aefe:	4a c0       	rjmp	.+148    	; 0x1af94 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1af00:	89 ec       	ldi	r24, 0xC9	; 201
   1af02:	97 e3       	ldi	r25, 0x37	; 55
   1af04:	a0 e0       	ldi	r26, 0x00	; 0
   1af06:	ed b7       	in	r30, 0x3d	; 61
   1af08:	fe b7       	in	r31, 0x3e	; 62
   1af0a:	81 83       	std	Z+1, r24	; 0x01
   1af0c:	92 83       	std	Z+2, r25	; 0x02
   1af0e:	a3 83       	std	Z+3, r26	; 0x03
   1af10:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1af14:	ed b7       	in	r30, 0x3d	; 61
   1af16:	fe b7       	in	r31, 0x3e	; 62
   1af18:	d5 82       	std	Z+5, r13	; 0x05
   1af1a:	c4 82       	std	Z+4, r12	; 0x04
   1af1c:	82 eb       	ldi	r24, 0xB2	; 178
   1af1e:	97 e3       	ldi	r25, 0x37	; 55
   1af20:	a0 e0       	ldi	r26, 0x00	; 0
   1af22:	81 83       	std	Z+1, r24	; 0x01
   1af24:	92 83       	std	Z+2, r25	; 0x02
   1af26:	a3 83       	std	Z+3, r26	; 0x03
   1af28:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1af2c:	ed b7       	in	r30, 0x3d	; 61
   1af2e:	fe b7       	in	r31, 0x3e	; 62
   1af30:	75 82       	std	Z+5, r7	; 0x05
   1af32:	64 82       	std	Z+4, r6	; 0x04
   1af34:	8b e9       	ldi	r24, 0x9B	; 155
   1af36:	97 e3       	ldi	r25, 0x37	; 55
   1af38:	a0 e0       	ldi	r26, 0x00	; 0
   1af3a:	81 83       	std	Z+1, r24	; 0x01
   1af3c:	92 83       	std	Z+2, r25	; 0x02
   1af3e:	a3 83       	std	Z+3, r26	; 0x03
   1af40:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1af44:	f5 01       	movw	r30, r10
   1af46:	80 81       	ld	r24, Z
   1af48:	91 81       	ldd	r25, Z+1	; 0x01
   1af4a:	a2 81       	ldd	r26, Z+2	; 0x02
   1af4c:	b3 81       	ldd	r27, Z+3	; 0x03
   1af4e:	ed b7       	in	r30, 0x3d	; 61
   1af50:	fe b7       	in	r31, 0x3e	; 62
   1af52:	84 83       	std	Z+4, r24	; 0x04
   1af54:	95 83       	std	Z+5, r25	; 0x05
   1af56:	a6 83       	std	Z+6, r26	; 0x06
   1af58:	b7 83       	std	Z+7, r27	; 0x07
   1af5a:	82 e8       	ldi	r24, 0x82	; 130
   1af5c:	97 e3       	ldi	r25, 0x37	; 55
   1af5e:	a0 e0       	ldi	r26, 0x00	; 0
   1af60:	81 83       	std	Z+1, r24	; 0x01
   1af62:	92 83       	std	Z+2, r25	; 0x02
   1af64:	a3 83       	std	Z+3, r26	; 0x03
   1af66:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1af6a:	f8 01       	movw	r30, r16
   1af6c:	e0 5a       	subi	r30, 0xA0	; 160
   1af6e:	ff 4f       	sbci	r31, 0xFF	; 255
   1af70:	80 81       	ld	r24, Z
   1af72:	91 81       	ldd	r25, Z+1	; 0x01
   1af74:	a2 81       	ldd	r26, Z+2	; 0x02
   1af76:	b3 81       	ldd	r27, Z+3	; 0x03
   1af78:	ed b7       	in	r30, 0x3d	; 61
   1af7a:	fe b7       	in	r31, 0x3e	; 62
   1af7c:	84 83       	std	Z+4, r24	; 0x04
   1af7e:	95 83       	std	Z+5, r25	; 0x05
   1af80:	a6 83       	std	Z+6, r26	; 0x06
   1af82:	b7 83       	std	Z+7, r27	; 0x07
   1af84:	89 e6       	ldi	r24, 0x69	; 105
   1af86:	97 e3       	ldi	r25, 0x37	; 55
   1af88:	a0 e0       	ldi	r26, 0x00	; 0
   1af8a:	81 83       	std	Z+1, r24	; 0x01
   1af8c:	92 83       	std	Z+2, r25	; 0x02
   1af8e:	a3 83       	std	Z+3, r26	; 0x03
   1af90:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1af94:	b3 01       	movw	r22, r6
   1af96:	c8 01       	movw	r24, r16
   1af98:	0e 94 96 cb 	call	0x1972c	; 0x1972c <lif_writedirindex>
   1af9c:	89 2b       	or	r24, r25
   1af9e:	21 f4       	brne	.+8      	; 0x1afa8 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afa0:	c8 01       	movw	r24, r16
   1afa2:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
   1afa6:	14 c0       	rjmp	.+40     	; 0x1afd0 <lif_add_ascii_file_as_e010+0x268>
   1afa8:	c8 01       	movw	r24, r16
   1afaa:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1afae:	ed b7       	in	r30, 0x3d	; 61
   1afb0:	fe b7       	in	r31, 0x3e	; 62
   1afb2:	84 82       	std	Z+4, r8	; 0x04
   1afb4:	95 82       	std	Z+5, r9	; 0x05
   1afb6:	e6 82       	std	Z+6, r14	; 0x06
   1afb8:	f7 82       	std	Z+7, r15	; 0x07
   1afba:	8b e5       	ldi	r24, 0x5B	; 91
   1afbc:	97 e3       	ldi	r25, 0x37	; 55
   1afbe:	a0 e0       	ldi	r26, 0x00	; 0
   1afc0:	81 83       	std	Z+1, r24	; 0x01
   1afc2:	92 83       	std	Z+2, r25	; 0x02
   1afc4:	a3 83       	std	Z+3, r26	; 0x03
   1afc6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

// Return file size
    return(bytes);
   1afca:	b4 01       	movw	r22, r8
   1afcc:	c7 01       	movw	r24, r14
   1afce:	04 c0       	rjmp	.+8      	; 0x1afd8 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1afd0:	6f ef       	ldi	r22, 0xFF	; 255
   1afd2:	7f ef       	ldi	r23, 0xFF	; 255
   1afd4:	8f ef       	ldi	r24, 0xFF	; 255
   1afd6:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1afd8:	eb 96       	adiw	r28, 0x3b	; 59
   1afda:	e2 e1       	ldi	r30, 0x12	; 18
   1afdc:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0001afe0 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1afe0:	a7 e3       	ldi	r26, 0x37	; 55
   1afe2:	b2 e0       	ldi	r27, 0x02	; 2
   1afe4:	e6 ef       	ldi	r30, 0xF6	; 246
   1afe6:	f7 ed       	ldi	r31, 0xD7	; 215
   1afe8:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   1afec:	7c 01       	movw	r14, r24
   1afee:	8b 01       	movw	r16, r22
   1aff0:	ca 5d       	subi	r28, 0xDA	; 218
   1aff2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aff4:	59 83       	std	Y+1, r21	; 0x01
   1aff6:	48 83       	st	Y, r20
   1aff8:	c6 52       	subi	r28, 0x26	; 38
   1affa:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1affc:	62 e4       	ldi	r22, 0x42	; 66
   1affe:	73 e0       	ldi	r23, 0x03	; 3
   1b000:	5d d9       	rcall	.-3398   	; 0x1a2bc <lif_open_volume>
   1b002:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b004:	00 97       	sbiw	r24, 0x00	; 0
   1b006:	69 f4       	brne	.+26     	; 0x1b022 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b008:	ed b7       	in	r30, 0x3d	; 61
   1b00a:	fe b7       	in	r31, 0x3e	; 62
   1b00c:	f5 82       	std	Z+5, r15	; 0x05
   1b00e:	e4 82       	std	Z+4, r14	; 0x04
   1b010:	83 e4       	ldi	r24, 0x43	; 67
   1b012:	97 e3       	ldi	r25, 0x37	; 55
   1b014:	a0 e0       	ldi	r26, 0x00	; 0
   1b016:	81 83       	std	Z+1, r24	; 0x01
   1b018:	92 83       	std	Z+2, r25	; 0x02
   1b01a:	a3 83       	std	Z+3, r26	; 0x03
   1b01c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1b020:	13 c0       	rjmp	.+38     	; 0x1b048 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b022:	b8 01       	movw	r22, r16
   1b024:	20 dc       	rcall	.-1984   	; 0x1a866 <lif_find_file>
    if(index == -1)
   1b026:	01 96       	adiw	r24, 0x01	; 1
   1b028:	91 f4       	brne	.+36     	; 0x1b04e <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b02a:	ed b7       	in	r30, 0x3d	; 61
   1b02c:	fe b7       	in	r31, 0x3e	; 62
   1b02e:	15 83       	std	Z+5, r17	; 0x05
   1b030:	04 83       	std	Z+4, r16	; 0x04
   1b032:	8c e2       	ldi	r24, 0x2C	; 44
   1b034:	97 e3       	ldi	r25, 0x37	; 55
   1b036:	a0 e0       	ldi	r26, 0x00	; 0
   1b038:	81 83       	std	Z+1, r24	; 0x01
   1b03a:	92 83       	std	Z+2, r25	; 0x02
   1b03c:	a3 83       	std	Z+3, r26	; 0x03
   1b03e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b042:	c6 01       	movw	r24, r12
   1b044:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b048:	80 e0       	ldi	r24, 0x00	; 0
   1b04a:	90 e0       	ldi	r25, 0x00	; 0
   1b04c:	73 c2       	rjmp	.+1254   	; 0x1b534 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b04e:	f6 01       	movw	r30, r12
   1b050:	e6 5a       	subi	r30, 0xA6	; 166
   1b052:	ff 4f       	sbci	r31, 0xFF	; 255
   1b054:	80 81       	ld	r24, Z
   1b056:	91 81       	ldd	r25, Z+1	; 0x01
   1b058:	9c 01       	movw	r18, r24
   1b05a:	2c 7f       	andi	r18, 0xFC	; 252
   1b05c:	20 31       	cpi	r18, 0x10	; 16
   1b05e:	30 4e       	sbci	r19, 0xE0	; 224
   1b060:	a9 f0       	breq	.+42     	; 0x1b08c <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b062:	ed b7       	in	r30, 0x3d	; 61
   1b064:	fe b7       	in	r31, 0x3e	; 62
   1b066:	97 83       	std	Z+7, r25	; 0x07
   1b068:	86 83       	std	Z+6, r24	; 0x06
   1b06a:	ca 5d       	subi	r28, 0xDA	; 218
   1b06c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b06e:	28 81       	ld	r18, Y
   1b070:	39 81       	ldd	r19, Y+1	; 0x01
   1b072:	c6 52       	subi	r28, 0x26	; 38
   1b074:	d2 40       	sbci	r29, 0x02	; 2
   1b076:	35 83       	std	Z+5, r19	; 0x05
   1b078:	24 83       	std	Z+4, r18	; 0x04
   1b07a:	84 ef       	ldi	r24, 0xF4	; 244
   1b07c:	96 e3       	ldi	r25, 0x36	; 54
   1b07e:	a0 e0       	ldi	r26, 0x00	; 0
   1b080:	81 83       	std	Z+1, r24	; 0x01
   1b082:	92 83       	std	Z+2, r25	; 0x02
   1b084:	a3 83       	std	Z+3, r26	; 0x03
   1b086:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1b08a:	db cf       	rjmp	.-74     	; 0x1b042 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b08c:	f6 01       	movw	r30, r12
   1b08e:	e4 5a       	subi	r30, 0xA4	; 164
   1b090:	ff 4f       	sbci	r31, 0xFF	; 255
   1b092:	80 80       	ld	r8, Z
   1b094:	91 80       	ldd	r9, Z+1	; 0x01
   1b096:	a2 80       	ldd	r10, Z+2	; 0x02
   1b098:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b09a:	34 96       	adiw	r30, 0x04	; 4
   1b09c:	80 81       	ld	r24, Z
   1b09e:	91 81       	ldd	r25, Z+1	; 0x01
   1b0a0:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0a2:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0a4:	a5 01       	movw	r20, r10
   1b0a6:	94 01       	movw	r18, r8
   1b0a8:	28 0f       	add	r18, r24
   1b0aa:	39 1f       	adc	r19, r25
   1b0ac:	4a 1f       	adc	r20, r26
   1b0ae:	5b 1f       	adc	r21, r27
   1b0b0:	c4 5d       	subi	r28, 0xD4	; 212
   1b0b2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0b4:	28 83       	st	Y, r18
   1b0b6:	39 83       	std	Y+1, r19	; 0x01
   1b0b8:	4a 83       	std	Y+2, r20	; 0x02
   1b0ba:	5b 83       	std	Y+3, r21	; 0x03
   1b0bc:	cc 52       	subi	r28, 0x2C	; 44
   1b0be:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b0c0:	c6 01       	movw	r24, r12
   1b0c2:	8c 59       	subi	r24, 0x9C	; 156
   1b0c4:	9f 4f       	sbci	r25, 0xFF	; 255
   1b0c6:	0e 94 91 c5 	call	0x18b22	; 0x18b22 <lif_lifbcd2time>
   1b0ca:	c8 5d       	subi	r28, 0xD8	; 216
   1b0cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0ce:	68 83       	st	Y, r22
   1b0d0:	79 83       	std	Y+1, r23	; 0x01
   1b0d2:	8a 83       	std	Y+2, r24	; 0x02
   1b0d4:	9b 83       	std	Y+3, r25	; 0x03
   1b0d6:	c8 52       	subi	r28, 0x28	; 40
   1b0d8:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b0da:	ba 2d       	mov	r27, r10
   1b0dc:	a9 2d       	mov	r26, r9
   1b0de:	98 2d       	mov	r25, r8
   1b0e0:	88 27       	eor	r24, r24
   1b0e2:	c2 5e       	subi	r28, 0xE2	; 226
   1b0e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0e6:	88 83       	st	Y, r24
   1b0e8:	99 83       	std	Y+1, r25	; 0x01
   1b0ea:	aa 83       	std	Y+2, r26	; 0x02
   1b0ec:	bb 83       	std	Y+3, r27	; 0x03
   1b0ee:	ce 51       	subi	r28, 0x1E	; 30
   1b0f0:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b0f2:	6c e0       	ldi	r22, 0x0C	; 12
   1b0f4:	79 e0       	ldi	r23, 0x09	; 9
   1b0f6:	ca 5d       	subi	r28, 0xDA	; 218
   1b0f8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0fa:	88 81       	ld	r24, Y
   1b0fc:	99 81       	ldd	r25, Y+1	; 0x01
   1b0fe:	c6 52       	subi	r28, 0x26	; 38
   1b100:	d2 40       	sbci	r29, 0x02	; 2
   1b102:	0e 94 51 c1 	call	0x182a2	; 0x182a2 <lif_open>
   1b106:	cc 5d       	subi	r28, 0xDC	; 220
   1b108:	dd 4f       	sbci	r29, 0xFD	; 253
   1b10a:	99 83       	std	Y+1, r25	; 0x01
   1b10c:	88 83       	st	Y, r24
   1b10e:	c4 52       	subi	r28, 0x24	; 36
   1b110:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b112:	89 2b       	or	r24, r25
   1b114:	09 f4       	brne	.+2      	; 0x1b118 <lif_extract_e010_as_ascii+0x138>
   1b116:	95 cf       	rjmp	.-214    	; 0x1b042 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b118:	ca 5d       	subi	r28, 0xDA	; 218
   1b11a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b11c:	28 81       	ld	r18, Y
   1b11e:	39 81       	ldd	r19, Y+1	; 0x01
   1b120:	c6 52       	subi	r28, 0x26	; 38
   1b122:	d2 40       	sbci	r29, 0x02	; 2
   1b124:	ed b7       	in	r30, 0x3d	; 61
   1b126:	fe b7       	in	r31, 0x3e	; 62
   1b128:	35 83       	std	Z+5, r19	; 0x05
   1b12a:	24 83       	std	Z+4, r18	; 0x04
   1b12c:	84 ee       	ldi	r24, 0xE4	; 228
   1b12e:	96 e3       	ldi	r25, 0x36	; 54
   1b130:	a0 e0       	ldi	r26, 0x00	; 0
   1b132:	81 83       	std	Z+1, r24	; 0x01
   1b134:	92 83       	std	Z+2, r25	; 0x02
   1b136:	a3 83       	std	Z+3, r26	; 0x03
   1b138:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    bytes = 0;
    wind = 0;
   1b13c:	21 2c       	mov	r2, r1
   1b13e:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b140:	ce 5d       	subi	r28, 0xDE	; 222
   1b142:	dd 4f       	sbci	r29, 0xFD	; 253
   1b144:	19 82       	std	Y+1, r1	; 0x01
   1b146:	18 82       	st	Y, r1
   1b148:	c2 52       	subi	r28, 0x22	; 34
   1b14a:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b14c:	ee 24       	eor	r14, r14
   1b14e:	e3 94       	inc	r14
   1b150:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b152:	41 2c       	mov	r4, r1
   1b154:	51 2c       	mov	r5, r1
   1b156:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b158:	83 e2       	ldi	r24, 0x23	; 35
   1b15a:	96 e3       	ldi	r25, 0x36	; 54
   1b15c:	9c 01       	movw	r18, r24
   1b15e:	40 e0       	ldi	r20, 0x00	; 0
   1b160:	ce 5c       	subi	r28, 0xCE	; 206
   1b162:	dd 4f       	sbci	r29, 0xFD	; 253
   1b164:	28 83       	st	Y, r18
   1b166:	39 83       	std	Y+1, r19	; 0x01
   1b168:	4a 83       	std	Y+2, r20	; 0x02
   1b16a:	c2 53       	subi	r28, 0x32	; 50
   1b16c:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b16e:	81 e3       	ldi	r24, 0x31	; 49
   1b170:	96 e3       	ldi	r25, 0x36	; 54
   1b172:	9c 01       	movw	r18, r24
   1b174:	40 e0       	ldi	r20, 0x00	; 0
   1b176:	cb 5c       	subi	r28, 0xCB	; 203
   1b178:	dd 4f       	sbci	r29, 0xFD	; 253
   1b17a:	28 83       	st	Y, r18
   1b17c:	39 83       	std	Y+1, r19	; 0x01
   1b17e:	4a 83       	std	Y+2, r20	; 0x02
   1b180:	c5 53       	subi	r28, 0x35	; 53
   1b182:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b184:	c2 5e       	subi	r28, 0xE2	; 226
   1b186:	dd 4f       	sbci	r29, 0xFD	; 253
   1b188:	28 81       	ld	r18, Y
   1b18a:	39 81       	ldd	r19, Y+1	; 0x01
   1b18c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b18e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b190:	ce 51       	subi	r28, 0x1E	; 30
   1b192:	d2 40       	sbci	r29, 0x02	; 2
   1b194:	bb 27       	eor	r27, r27
   1b196:	a5 2f       	mov	r26, r21
   1b198:	94 2f       	mov	r25, r20
   1b19a:	83 2f       	mov	r24, r19
   1b19c:	c4 5d       	subi	r28, 0xD4	; 212
   1b19e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1a0:	28 81       	ld	r18, Y
   1b1a2:	39 81       	ldd	r19, Y+1	; 0x01
   1b1a4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1a6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1a8:	cc 52       	subi	r28, 0x2C	; 44
   1b1aa:	d2 40       	sbci	r29, 0x02	; 2
   1b1ac:	28 17       	cp	r18, r24
   1b1ae:	39 07       	cpc	r19, r25
   1b1b0:	4a 07       	cpc	r20, r26
   1b1b2:	5b 07       	cpc	r21, r27
   1b1b4:	08 f4       	brcc	.+2      	; 0x1b1b8 <lif_extract_e010_as_ascii+0x1d8>
   1b1b6:	51 c1       	rjmp	.+674    	; 0x1b45a <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b1b8:	00 e0       	ldi	r16, 0x00	; 0
   1b1ba:	11 e0       	ldi	r17, 0x01	; 1
   1b1bc:	c2 5e       	subi	r28, 0xE2	; 226
   1b1be:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1c0:	28 81       	ld	r18, Y
   1b1c2:	39 81       	ldd	r19, Y+1	; 0x01
   1b1c4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1c6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1c8:	ce 51       	subi	r28, 0x1E	; 30
   1b1ca:	d2 40       	sbci	r29, 0x02	; 2
   1b1cc:	be 01       	movw	r22, r28
   1b1ce:	60 5f       	subi	r22, 0xF0	; 240
   1b1d0:	7e 4f       	sbci	r23, 0xFE	; 254
   1b1d2:	c6 01       	movw	r24, r12
   1b1d4:	0e 94 d5 c1 	call	0x183aa	; 0x183aa <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b1d8:	6f 3f       	cpi	r22, 0xFF	; 255
   1b1da:	71 05       	cpc	r23, r1
   1b1dc:	09 f0       	breq	.+2      	; 0x1b1e0 <lif_extract_e010_as_ascii+0x200>
   1b1de:	0c f4       	brge	.+2      	; 0x1b1e2 <lif_extract_e010_as_ascii+0x202>
   1b1e0:	3a c1       	rjmp	.+628    	; 0x1b456 <lif_extract_e010_as_ascii+0x476>
   1b1e2:	00 e0       	ldi	r16, 0x00	; 0
   1b1e4:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b1e6:	ce 5d       	subi	r28, 0xDE	; 222
   1b1e8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ea:	88 81       	ld	r24, Y
   1b1ec:	99 81       	ldd	r25, Y+1	; 0x01
   1b1ee:	c2 52       	subi	r28, 0x22	; 34
   1b1f0:	d2 40       	sbci	r29, 0x02	; 2
   1b1f2:	89 2b       	or	r24, r25
   1b1f4:	09 f0       	breq	.+2      	; 0x1b1f8 <lif_extract_e010_as_ascii+0x218>
   1b1f6:	1b c1       	rjmp	.+566    	; 0x1b42e <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b1f8:	e0 e1       	ldi	r30, 0x10	; 16
   1b1fa:	f1 e0       	ldi	r31, 0x01	; 1
   1b1fc:	ec 0f       	add	r30, r28
   1b1fe:	fd 1f       	adc	r31, r29
   1b200:	e0 0f       	add	r30, r16
   1b202:	f1 1f       	adc	r31, r17
   1b204:	80 81       	ld	r24, Z
   1b206:	98 2f       	mov	r25, r24
   1b208:	9f 7e       	andi	r25, 0xEF	; 239
   1b20a:	9f 3c       	cpi	r25, 0xCF	; 207
   1b20c:	11 f0       	breq	.+4      	; 0x1b212 <lif_extract_e010_as_ascii+0x232>
   1b20e:	8f 36       	cpi	r24, 0x6F	; 111
   1b210:	c9 f5       	brne	.+114    	; 0x1b284 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b212:	e0 e1       	ldi	r30, 0x10	; 16
   1b214:	f1 e0       	ldi	r31, 0x01	; 1
   1b216:	ec 0f       	add	r30, r28
   1b218:	fd 1f       	adc	r31, r29
   1b21a:	e0 0f       	add	r30, r16
   1b21c:	f1 1f       	adc	r31, r17
   1b21e:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b220:	f8 01       	movw	r30, r16
   1b222:	32 96       	adiw	r30, 0x02	; 2
   1b224:	40 e1       	ldi	r20, 0x10	; 16
   1b226:	51 e0       	ldi	r21, 0x01	; 1
   1b228:	4c 0f       	add	r20, r28
   1b22a:	5d 1f       	adc	r21, r29
   1b22c:	e4 0f       	add	r30, r20
   1b22e:	f5 1f       	adc	r31, r21
   1b230:	0d 5f       	subi	r16, 0xFD	; 253
   1b232:	1f 4f       	sbci	r17, 0xFF	; 255
   1b234:	80 81       	ld	r24, Z
   1b236:	b1 2c       	mov	r11, r1
   1b238:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b23a:	a1 14       	cp	r10, r1
   1b23c:	b1 04       	cpc	r11, r1
   1b23e:	09 f4       	brne	.+2      	; 0x1b242 <lif_extract_e010_as_ascii+0x262>
   1b240:	ee c0       	rjmp	.+476    	; 0x1b41e <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b242:	5f ef       	ldi	r21, 0xFF	; 255
   1b244:	a5 16       	cp	r10, r21
   1b246:	b1 04       	cpc	r11, r1
   1b248:	09 f0       	breq	.+2      	; 0x1b24c <lif_extract_e010_as_ascii+0x26c>
   1b24a:	7c f4       	brge	.+30     	; 0x1b26a <lif_extract_e010_as_ascii+0x28a>
   1b24c:	c4 5e       	subi	r28, 0xE4	; 228
   1b24e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b250:	19 82       	std	Y+1, r1	; 0x01
   1b252:	18 82       	st	Y, r1
   1b254:	cc 51       	subi	r28, 0x1C	; 28
   1b256:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b258:	c5 01       	movw	r24, r10
   1b25a:	01 97       	sbiw	r24, 0x01	; 1
   1b25c:	c0 5d       	subi	r28, 0xD0	; 208
   1b25e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b260:	99 83       	std	Y+1, r25	; 0x01
   1b262:	88 83       	st	Y, r24
   1b264:	c0 53       	subi	r28, 0x30	; 48
   1b266:	d2 40       	sbci	r29, 0x02	; 2
   1b268:	68 c0       	rjmp	.+208    	; 0x1b33a <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b26a:	ed b7       	in	r30, 0x3d	; 61
   1b26c:	fe b7       	in	r31, 0x3e	; 62
   1b26e:	b5 82       	std	Z+5, r11	; 0x05
   1b270:	a4 82       	std	Z+4, r10	; 0x04
   1b272:	8f ea       	ldi	r24, 0xAF	; 175
   1b274:	96 e3       	ldi	r25, 0x36	; 54
   1b276:	a0 e0       	ldi	r26, 0x00	; 0
   1b278:	81 83       	std	Z+1, r24	; 0x01
   1b27a:	92 83       	std	Z+2, r25	; 0x02
   1b27c:	a3 83       	std	Z+3, r26	; 0x03
   1b27e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1b282:	1e c0       	rjmp	.+60     	; 0x1b2c0 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b284:	8f 3e       	cpi	r24, 0xEF	; 239
   1b286:	09 f4       	brne	.+2      	; 0x1b28a <lif_extract_e010_as_ascii+0x2aa>
   1b288:	d2 c0       	rjmp	.+420    	; 0x1b42e <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b28a:	ed b7       	in	r30, 0x3d	; 61
   1b28c:	fe b7       	in	r31, 0x3e	; 62
   1b28e:	13 87       	std	Z+11, r17	; 0x0b
   1b290:	02 87       	std	Z+10, r16	; 0x0a
   1b292:	c2 5e       	subi	r28, 0xE2	; 226
   1b294:	dd 4f       	sbci	r29, 0xFD	; 253
   1b296:	28 81       	ld	r18, Y
   1b298:	39 81       	ldd	r19, Y+1	; 0x01
   1b29a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b29c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b29e:	ce 51       	subi	r28, 0x1E	; 30
   1b2a0:	d2 40       	sbci	r29, 0x02	; 2
   1b2a2:	26 83       	std	Z+6, r18	; 0x06
   1b2a4:	37 83       	std	Z+7, r19	; 0x07
   1b2a6:	40 87       	std	Z+8, r20	; 0x08
   1b2a8:	51 87       	std	Z+9, r21	; 0x09
   1b2aa:	90 e0       	ldi	r25, 0x00	; 0
   1b2ac:	95 83       	std	Z+5, r25	; 0x05
   1b2ae:	84 83       	std	Z+4, r24	; 0x04
   1b2b0:	89 e5       	ldi	r24, 0x59	; 89
   1b2b2:	96 e3       	ldi	r25, 0x36	; 54
   1b2b4:	a0 e0       	ldi	r26, 0x00	; 0
   1b2b6:	81 83       	std	Z+1, r24	; 0x01
   1b2b8:	92 83       	std	Z+2, r25	; 0x02
   1b2ba:	a3 83       	std	Z+3, r26	; 0x03
   1b2bc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
                status = 0;
                done = 1;
   1b2c0:	21 e0       	ldi	r18, 0x01	; 1
   1b2c2:	30 e0       	ldi	r19, 0x00	; 0
   1b2c4:	ce 5d       	subi	r28, 0xDE	; 222
   1b2c6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2c8:	39 83       	std	Y+1, r19	; 0x01
   1b2ca:	28 83       	st	Y, r18
   1b2cc:	c2 52       	subi	r28, 0x22	; 34
   1b2ce:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b2d0:	e1 2c       	mov	r14, r1
   1b2d2:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b2d4:	ac c0       	rjmp	.+344    	; 0x1b42e <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b2d6:	0f 3f       	cpi	r16, 0xFF	; 255
   1b2d8:	11 05       	cpc	r17, r1
   1b2da:	11 f0       	breq	.+4      	; 0x1b2e0 <lif_extract_e010_as_ascii+0x300>
   1b2dc:	0c f0       	brlt	.+2      	; 0x1b2e0 <lif_extract_e010_as_ascii+0x300>
   1b2de:	a7 c0       	rjmp	.+334    	; 0x1b42e <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b2e0:	e0 e1       	ldi	r30, 0x10	; 16
   1b2e2:	f1 e0       	ldi	r31, 0x01	; 1
   1b2e4:	ec 0f       	add	r30, r28
   1b2e6:	fd 1f       	adc	r31, r29
   1b2e8:	e0 0f       	add	r30, r16
   1b2ea:	f1 1f       	adc	r31, r17
   1b2ec:	20 81       	ld	r18, Z
   1b2ee:	a1 01       	movw	r20, r2
   1b2f0:	4f 5f       	subi	r20, 0xFF	; 255
   1b2f2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b2f4:	4a 01       	movw	r8, r20
   1b2f6:	2d 30       	cpi	r18, 0x0D	; 13
   1b2f8:	51 f1       	breq	.+84     	; 0x1b34e <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b2fa:	98 2d       	mov	r25, r8
   1b2fc:	89 2d       	mov	r24, r9
   1b2fe:	0f 5f       	subi	r16, 0xFF	; 255
   1b300:	1f 4f       	sbci	r17, 0xFF	; 255
   1b302:	ec e0       	ldi	r30, 0x0C	; 12
   1b304:	f0 e0       	ldi	r31, 0x00	; 0
   1b306:	ec 0f       	add	r30, r28
   1b308:	fd 1f       	adc	r31, r29
   1b30a:	e2 0d       	add	r30, r2
   1b30c:	f3 1d       	adc	r31, r3
   1b30e:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b310:	ef ef       	ldi	r30, 0xFF	; 255
   1b312:	8e 16       	cp	r8, r30
   1b314:	91 04       	cpc	r9, r1
   1b316:	09 f0       	breq	.+2      	; 0x1b31a <lif_extract_e010_as_ascii+0x33a>
   1b318:	ac f5       	brge	.+106    	; 0x1b384 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b31a:	c4 5e       	subi	r28, 0xE4	; 228
   1b31c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b31e:	28 81       	ld	r18, Y
   1b320:	39 81       	ldd	r19, Y+1	; 0x01
   1b322:	cc 51       	subi	r28, 0x1C	; 28
   1b324:	d2 40       	sbci	r29, 0x02	; 2
   1b326:	2f 5f       	subi	r18, 0xFF	; 255
   1b328:	3f 4f       	sbci	r19, 0xFF	; 255
   1b32a:	c4 5e       	subi	r28, 0xE4	; 228
   1b32c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b32e:	39 83       	std	Y+1, r19	; 0x01
   1b330:	28 83       	st	Y, r18
   1b332:	cc 51       	subi	r28, 0x1C	; 28
   1b334:	d2 40       	sbci	r29, 0x02	; 2
   1b336:	29 2e       	mov	r2, r25
   1b338:	38 2e       	mov	r3, r24
   1b33a:	c4 5e       	subi	r28, 0xE4	; 228
   1b33c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b33e:	48 81       	ld	r20, Y
   1b340:	59 81       	ldd	r21, Y+1	; 0x01
   1b342:	cc 51       	subi	r28, 0x1C	; 28
   1b344:	d2 40       	sbci	r29, 0x02	; 2
   1b346:	4a 15       	cp	r20, r10
   1b348:	5b 05       	cpc	r21, r11
   1b34a:	2c f2       	brlt	.-118    	; 0x1b2d6 <lif_extract_e010_as_ascii+0x2f6>
   1b34c:	62 c0       	rjmp	.+196    	; 0x1b412 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b34e:	c4 5e       	subi	r28, 0xE4	; 228
   1b350:	dd 4f       	sbci	r29, 0xFD	; 253
   1b352:	88 81       	ld	r24, Y
   1b354:	99 81       	ldd	r25, Y+1	; 0x01
   1b356:	cc 51       	subi	r28, 0x1C	; 28
   1b358:	d2 40       	sbci	r29, 0x02	; 2
   1b35a:	c0 5d       	subi	r28, 0xD0	; 208
   1b35c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b35e:	a8 81       	ld	r26, Y
   1b360:	b9 81       	ldd	r27, Y+1	; 0x01
   1b362:	c0 53       	subi	r28, 0x30	; 48
   1b364:	d2 40       	sbci	r29, 0x02	; 2
   1b366:	8a 17       	cp	r24, r26
   1b368:	9b 07       	cpc	r25, r27
   1b36a:	39 f6       	brne	.-114    	; 0x1b2fa <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b36c:	ec e0       	ldi	r30, 0x0C	; 12
   1b36e:	f0 e0       	ldi	r31, 0x00	; 0
   1b370:	ec 0f       	add	r30, r28
   1b372:	fd 1f       	adc	r31, r29
   1b374:	e2 0d       	add	r30, r2
   1b376:	f3 1d       	adc	r31, r3
   1b378:	ba e0       	ldi	r27, 0x0A	; 10
   1b37a:	b0 83       	st	Z, r27
                    ++ind;
   1b37c:	0f 5f       	subi	r16, 0xFF	; 255
   1b37e:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b380:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b382:	47 c0       	rjmp	.+142    	; 0x1b412 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b384:	cc 5d       	subi	r28, 0xDC	; 220
   1b386:	dd 4f       	sbci	r29, 0xFD	; 253
   1b388:	28 81       	ld	r18, Y
   1b38a:	39 81       	ldd	r19, Y+1	; 0x01
   1b38c:	c4 52       	subi	r28, 0x24	; 36
   1b38e:	d2 40       	sbci	r29, 0x02	; 2
   1b390:	a4 01       	movw	r20, r8
   1b392:	61 e0       	ldi	r22, 0x01	; 1
   1b394:	70 e0       	ldi	r23, 0x00	; 0
   1b396:	ce 01       	movw	r24, r28
   1b398:	0c 96       	adiw	r24, 0x0c	; 12
   1b39a:	0e 94 72 7c 	call	0xf8e4	; 0xf8e4 <fwrite>
                    if(size < wind)
   1b39e:	88 15       	cp	r24, r8
   1b3a0:	99 05       	cpc	r25, r9
   1b3a2:	d4 f4       	brge	.+52     	; 0x1b3d8 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b3a4:	cb 5c       	subi	r28, 0xCB	; 203
   1b3a6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3a8:	28 81       	ld	r18, Y
   1b3aa:	39 81       	ldd	r19, Y+1	; 0x01
   1b3ac:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3ae:	c5 53       	subi	r28, 0x35	; 53
   1b3b0:	d2 40       	sbci	r29, 0x02	; 2
   1b3b2:	ed b7       	in	r30, 0x3d	; 61
   1b3b4:	fe b7       	in	r31, 0x3e	; 62
   1b3b6:	21 83       	std	Z+1, r18	; 0x01
   1b3b8:	32 83       	std	Z+2, r19	; 0x02
   1b3ba:	43 83       	std	Z+3, r20	; 0x03
   1b3bc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b3c0:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b3c2:	21 e0       	ldi	r18, 0x01	; 1
   1b3c4:	30 e0       	ldi	r19, 0x00	; 0
   1b3c6:	ce 5d       	subi	r28, 0xDE	; 222
   1b3c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ca:	39 83       	std	Y+1, r19	; 0x01
   1b3cc:	28 83       	st	Y, r18
   1b3ce:	c2 52       	subi	r28, 0x22	; 34
   1b3d0:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b3d2:	e1 2c       	mov	r14, r1
   1b3d4:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b3d6:	1d c0       	rjmp	.+58     	; 0x1b412 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b3d8:	09 2e       	mov	r0, r25
   1b3da:	00 0c       	add	r0, r0
   1b3dc:	aa 0b       	sbc	r26, r26
   1b3de:	bb 0b       	sbc	r27, r27
   1b3e0:	48 0e       	add	r4, r24
   1b3e2:	59 1e       	adc	r5, r25
   1b3e4:	6a 1e       	adc	r6, r26
   1b3e6:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b3e8:	ed b7       	in	r30, 0x3d	; 61
   1b3ea:	fe b7       	in	r31, 0x3e	; 62
   1b3ec:	44 82       	std	Z+4, r4	; 0x04
   1b3ee:	55 82       	std	Z+5, r5	; 0x05
   1b3f0:	66 82       	std	Z+6, r6	; 0x06
   1b3f2:	77 82       	std	Z+7, r7	; 0x07
   1b3f4:	ce 5c       	subi	r28, 0xCE	; 206
   1b3f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3f8:	28 81       	ld	r18, Y
   1b3fa:	39 81       	ldd	r19, Y+1	; 0x01
   1b3fc:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3fe:	c2 53       	subi	r28, 0x32	; 50
   1b400:	d2 40       	sbci	r29, 0x02	; 2
   1b402:	21 83       	std	Z+1, r18	; 0x01
   1b404:	32 83       	std	Z+2, r19	; 0x02
   1b406:	43 83       	std	Z+3, r20	; 0x03
   1b408:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
                    wind = 0;
   1b40c:	90 e0       	ldi	r25, 0x00	; 0
   1b40e:	80 e0       	ldi	r24, 0x00	; 0
   1b410:	84 cf       	rjmp	.-248    	; 0x1b31a <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b412:	0f 3f       	cpi	r16, 0xFF	; 255
   1b414:	11 05       	cpc	r17, r1
   1b416:	09 f0       	breq	.+2      	; 0x1b41a <lif_extract_e010_as_ascii+0x43a>
   1b418:	0c f4       	brge	.+2      	; 0x1b41c <lif_extract_e010_as_ascii+0x43c>
   1b41a:	e5 ce       	rjmp	.-566    	; 0x1b1e6 <lif_extract_e010_as_ascii+0x206>
   1b41c:	08 c0       	rjmp	.+16     	; 0x1b42e <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b41e:	a1 e0       	ldi	r26, 0x01	; 1
   1b420:	b0 e0       	ldi	r27, 0x00	; 0
   1b422:	ce 5d       	subi	r28, 0xDE	; 222
   1b424:	dd 4f       	sbci	r29, 0xFD	; 253
   1b426:	b9 83       	std	Y+1, r27	; 0x01
   1b428:	a8 83       	st	Y, r26
   1b42a:	c2 52       	subi	r28, 0x22	; 34
   1b42c:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b42e:	c2 5e       	subi	r28, 0xE2	; 226
   1b430:	dd 4f       	sbci	r29, 0xFD	; 253
   1b432:	28 81       	ld	r18, Y
   1b434:	39 81       	ldd	r19, Y+1	; 0x01
   1b436:	4a 81       	ldd	r20, Y+2	; 0x02
   1b438:	5b 81       	ldd	r21, Y+3	; 0x03
   1b43a:	ce 51       	subi	r28, 0x1E	; 30
   1b43c:	d2 40       	sbci	r29, 0x02	; 2
   1b43e:	3f 5f       	subi	r19, 0xFF	; 255
   1b440:	4f 4f       	sbci	r20, 0xFF	; 255
   1b442:	5f 4f       	sbci	r21, 0xFF	; 255
   1b444:	c2 5e       	subi	r28, 0xE2	; 226
   1b446:	dd 4f       	sbci	r29, 0xFD	; 253
   1b448:	28 83       	st	Y, r18
   1b44a:	39 83       	std	Y+1, r19	; 0x01
   1b44c:	4a 83       	std	Y+2, r20	; 0x02
   1b44e:	5b 83       	std	Y+3, r21	; 0x03
   1b450:	ce 51       	subi	r28, 0x1E	; 30
   1b452:	d2 40       	sbci	r29, 0x02	; 2
   1b454:	97 ce       	rjmp	.-722    	; 0x1b184 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b456:	e1 2c       	mov	r14, r1
   1b458:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b45a:	c6 01       	movw	r24, r12
   1b45c:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b460:	21 14       	cp	r2, r1
   1b462:	31 04       	cpc	r3, r1
   1b464:	31 f1       	breq	.+76     	; 0x1b4b2 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b466:	cc 5d       	subi	r28, 0xDC	; 220
   1b468:	dd 4f       	sbci	r29, 0xFD	; 253
   1b46a:	28 81       	ld	r18, Y
   1b46c:	39 81       	ldd	r19, Y+1	; 0x01
   1b46e:	c4 52       	subi	r28, 0x24	; 36
   1b470:	d2 40       	sbci	r29, 0x02	; 2
   1b472:	a1 01       	movw	r20, r2
   1b474:	61 e0       	ldi	r22, 0x01	; 1
   1b476:	70 e0       	ldi	r23, 0x00	; 0
   1b478:	ce 01       	movw	r24, r28
   1b47a:	0c 96       	adiw	r24, 0x0c	; 12
   1b47c:	0e 94 72 7c 	call	0xf8e4	; 0xf8e4 <fwrite>
   1b480:	8c 01       	movw	r16, r24
        if(size < wind)
   1b482:	82 15       	cp	r24, r2
   1b484:	93 05       	cpc	r25, r3
   1b486:	64 f4       	brge	.+24     	; 0x1b4a0 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b488:	8b ef       	ldi	r24, 0xFB	; 251
   1b48a:	95 e3       	ldi	r25, 0x35	; 53
   1b48c:	a0 e0       	ldi	r26, 0x00	; 0
   1b48e:	ed b7       	in	r30, 0x3d	; 61
   1b490:	fe b7       	in	r31, 0x3e	; 62
   1b492:	81 83       	std	Z+1, r24	; 0x01
   1b494:	92 83       	std	Z+2, r25	; 0x02
   1b496:	a3 83       	std	Z+3, r26	; 0x03
   1b498:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            status = 0;
   1b49c:	e1 2c       	mov	r14, r1
   1b49e:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b4a0:	c8 01       	movw	r24, r16
   1b4a2:	01 2e       	mov	r0, r17
   1b4a4:	00 0c       	add	r0, r0
   1b4a6:	aa 0b       	sbc	r26, r26
   1b4a8:	bb 0b       	sbc	r27, r27
   1b4aa:	48 0e       	add	r4, r24
   1b4ac:	59 1e       	adc	r5, r25
   1b4ae:	6a 1e       	adc	r6, r26
   1b4b0:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b4b2:	cc 5d       	subi	r28, 0xDC	; 220
   1b4b4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4b6:	88 81       	ld	r24, Y
   1b4b8:	99 81       	ldd	r25, Y+1	; 0x01
   1b4ba:	c4 52       	subi	r28, 0x24	; 36
   1b4bc:	d2 40       	sbci	r29, 0x02	; 2
   1b4be:	0e 94 f4 7c 	call	0xf9e8	; 0xf9e8 <fclose>
    if(t)
   1b4c2:	c8 5d       	subi	r28, 0xD8	; 216
   1b4c4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4c6:	28 81       	ld	r18, Y
   1b4c8:	39 81       	ldd	r19, Y+1	; 0x01
   1b4ca:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4cc:	5b 81       	ldd	r21, Y+3	; 0x03
   1b4ce:	c8 52       	subi	r28, 0x28	; 40
   1b4d0:	d2 40       	sbci	r29, 0x02	; 2
   1b4d2:	21 15       	cp	r18, r1
   1b4d4:	31 05       	cpc	r19, r1
   1b4d6:	41 05       	cpc	r20, r1
   1b4d8:	51 05       	cpc	r21, r1
   1b4da:	d9 f0       	breq	.+54     	; 0x1b512 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b4dc:	c8 5e       	subi	r28, 0xE8	; 232
   1b4de:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4e0:	28 83       	st	Y, r18
   1b4e2:	39 83       	std	Y+1, r19	; 0x01
   1b4e4:	4a 83       	std	Y+2, r20	; 0x02
   1b4e6:	5b 83       	std	Y+3, r21	; 0x03
   1b4e8:	c8 51       	subi	r28, 0x18	; 24
   1b4ea:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b4ec:	cc 5e       	subi	r28, 0xEC	; 236
   1b4ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4f0:	28 83       	st	Y, r18
   1b4f2:	39 83       	std	Y+1, r19	; 0x01
   1b4f4:	4a 83       	std	Y+2, r20	; 0x02
   1b4f6:	5b 83       	std	Y+3, r21	; 0x03
   1b4f8:	c4 51       	subi	r28, 0x14	; 20
   1b4fa:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b4fc:	be 01       	movw	r22, r28
   1b4fe:	6c 5e       	subi	r22, 0xEC	; 236
   1b500:	7d 4f       	sbci	r23, 0xFD	; 253
   1b502:	ca 5d       	subi	r28, 0xDA	; 218
   1b504:	dd 4f       	sbci	r29, 0xFD	; 253
   1b506:	88 81       	ld	r24, Y
   1b508:	99 81       	ldd	r25, Y+1	; 0x01
   1b50a:	c6 52       	subi	r28, 0x26	; 38
   1b50c:	d2 40       	sbci	r29, 0x02	; 2
   1b50e:	0e 94 31 7a 	call	0xf462	; 0xf462 <utime>
    }
    sync();
   1b512:	0e 94 ef 7b 	call	0xf7de	; 0xf7de <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b516:	ed b7       	in	r30, 0x3d	; 61
   1b518:	fe b7       	in	r31, 0x3e	; 62
   1b51a:	44 82       	std	Z+4, r4	; 0x04
   1b51c:	55 82       	std	Z+5, r5	; 0x05
   1b51e:	66 82       	std	Z+6, r6	; 0x06
   1b520:	77 82       	std	Z+7, r7	; 0x07
   1b522:	8d ee       	ldi	r24, 0xED	; 237
   1b524:	95 e3       	ldi	r25, 0x35	; 53
   1b526:	a0 e0       	ldi	r26, 0x00	; 0
   1b528:	81 83       	std	Z+1, r24	; 0x01
   1b52a:	92 83       	std	Z+2, r25	; 0x02
   1b52c:	a3 83       	std	Z+3, r26	; 0x03
   1b52e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    return(status);
   1b532:	c7 01       	movw	r24, r14
}
   1b534:	c9 5c       	subi	r28, 0xC9	; 201
   1b536:	dd 4f       	sbci	r29, 0xFD	; 253
   1b538:	e2 e1       	ldi	r30, 0x12	; 18
   1b53a:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0001b53e <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b53e:	a4 e1       	ldi	r26, 0x14	; 20
   1b540:	b1 e0       	ldi	r27, 0x01	; 1
   1b542:	e5 ea       	ldi	r30, 0xA5	; 165
   1b544:	fa ed       	ldi	r31, 0xDA	; 218
   1b546:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <__prologue_saves__>
   1b54a:	7c 01       	movw	r14, r24
   1b54c:	8b 01       	movw	r16, r22
   1b54e:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b550:	62 e4       	ldi	r22, 0x42	; 66
   1b552:	73 e0       	ldi	r23, 0x03	; 3
   1b554:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1b558:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b55a:	00 97       	sbiw	r24, 0x00	; 0
   1b55c:	69 f4       	brne	.+26     	; 0x1b578 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b55e:	ed b7       	in	r30, 0x3d	; 61
   1b560:	fe b7       	in	r31, 0x3e	; 62
   1b562:	f5 82       	std	Z+5, r15	; 0x05
   1b564:	e4 82       	std	Z+4, r14	; 0x04
   1b566:	85 ed       	ldi	r24, 0xD5	; 213
   1b568:	95 e3       	ldi	r25, 0x35	; 53
   1b56a:	a0 e0       	ldi	r26, 0x00	; 0
   1b56c:	81 83       	std	Z+1, r24	; 0x01
   1b56e:	92 83       	std	Z+2, r25	; 0x02
   1b570:	a3 83       	std	Z+3, r26	; 0x03
   1b572:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1b576:	13 c0       	rjmp	.+38     	; 0x1b59e <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b578:	b8 01       	movw	r22, r16
   1b57a:	75 d9       	rcall	.-3350   	; 0x1a866 <lif_find_file>
    if(index == -1)
   1b57c:	01 96       	adiw	r24, 0x01	; 1
   1b57e:	91 f4       	brne	.+36     	; 0x1b5a4 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b580:	ed b7       	in	r30, 0x3d	; 61
   1b582:	fe b7       	in	r31, 0x3e	; 62
   1b584:	15 83       	std	Z+5, r17	; 0x05
   1b586:	04 83       	std	Z+4, r16	; 0x04
   1b588:	82 ec       	ldi	r24, 0xC2	; 194
   1b58a:	95 e3       	ldi	r25, 0x35	; 53
   1b58c:	a0 e0       	ldi	r26, 0x00	; 0
   1b58e:	81 83       	std	Z+1, r24	; 0x01
   1b590:	92 83       	std	Z+2, r25	; 0x02
   1b592:	a3 83       	std	Z+3, r26	; 0x03
   1b594:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b598:	c4 01       	movw	r24, r8
   1b59a:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b59e:	00 e0       	ldi	r16, 0x00	; 0
   1b5a0:	10 e0       	ldi	r17, 0x00	; 0
   1b5a2:	ff c0       	rjmp	.+510    	; 0x1b7a2 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b5a4:	94 01       	movw	r18, r8
   1b5a6:	20 5a       	subi	r18, 0xA0	; 160
   1b5a8:	3f 4f       	sbci	r19, 0xFF	; 255
   1b5aa:	c0 5f       	subi	r28, 0xF0	; 240
   1b5ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b5ae:	39 83       	std	Y+1, r19	; 0x01
   1b5b0:	28 83       	st	Y, r18
   1b5b2:	c0 51       	subi	r28, 0x10	; 16
   1b5b4:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b5b6:	f9 01       	movw	r30, r18
   1b5b8:	a0 80       	ld	r10, Z
   1b5ba:	b1 80       	ldd	r11, Z+1	; 0x01
   1b5bc:	0b 2c       	mov	r0, r11
   1b5be:	00 0c       	add	r0, r0
   1b5c0:	cc 08       	sbc	r12, r12
   1b5c2:	dd 08       	sbc	r13, r13
   1b5c4:	e1 2c       	mov	r14, r1
   1b5c6:	f1 2c       	mov	r15, r1
   1b5c8:	87 01       	movw	r16, r14
   1b5ca:	e3 94       	inc	r14
   1b5cc:	21 e0       	ldi	r18, 0x01	; 1
   1b5ce:	30 e0       	ldi	r19, 0x00	; 0
   1b5d0:	40 e0       	ldi	r20, 0x00	; 0
   1b5d2:	50 e0       	ldi	r21, 0x00	; 0
   1b5d4:	65 e6       	ldi	r22, 0x65	; 101
   1b5d6:	76 e1       	ldi	r23, 0x16	; 22
   1b5d8:	c3 01       	movw	r24, r6
   1b5da:	0e 94 14 cd 	call	0x19a28	; 0x19a28 <lif_create_volume>
   1b5de:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b5e0:	89 2b       	or	r24, r25
   1b5e2:	d1 f2       	breq	.-76     	; 0x1b598 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b5e4:	81 e2       	ldi	r24, 0x21	; 33
   1b5e6:	f4 01       	movw	r30, r8
   1b5e8:	e1 5b       	subi	r30, 0xB1	; 177
   1b5ea:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5ec:	d7 01       	movw	r26, r14
   1b5ee:	a1 5b       	subi	r26, 0xB1	; 177
   1b5f0:	bf 4f       	sbci	r27, 0xFF	; 255
   1b5f2:	01 90       	ld	r0, Z+
   1b5f4:	0d 92       	st	X+, r0
   1b5f6:	8a 95       	dec	r24
   1b5f8:	e1 f7       	brne	.-8      	; 0x1b5f2 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b5fa:	82 e0       	ldi	r24, 0x02	; 2
   1b5fc:	90 e0       	ldi	r25, 0x00	; 0
   1b5fe:	a0 e0       	ldi	r26, 0x00	; 0
   1b600:	b0 e0       	ldi	r27, 0x00	; 0
   1b602:	f7 01       	movw	r30, r14
   1b604:	e4 5a       	subi	r30, 0xA4	; 164
   1b606:	ff 4f       	sbci	r31, 0xFF	; 255
   1b608:	80 83       	st	Z, r24
   1b60a:	91 83       	std	Z+1, r25	; 0x01
   1b60c:	a2 83       	std	Z+2, r26	; 0x02
   1b60e:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b610:	c0 5f       	subi	r28, 0xF0	; 240
   1b612:	de 4f       	sbci	r29, 0xFE	; 254
   1b614:	e8 81       	ld	r30, Y
   1b616:	f9 81       	ldd	r31, Y+1	; 0x01
   1b618:	c0 51       	subi	r28, 0x10	; 16
   1b61a:	d1 40       	sbci	r29, 0x01	; 1
   1b61c:	80 81       	ld	r24, Z
   1b61e:	91 81       	ldd	r25, Z+1	; 0x01
   1b620:	a2 81       	ldd	r26, Z+2	; 0x02
   1b622:	b3 81       	ldd	r27, Z+3	; 0x03
   1b624:	f7 01       	movw	r30, r14
   1b626:	80 8b       	std	Z+16, r24	; 0x10
   1b628:	91 8b       	std	Z+17, r25	; 0x11
   1b62a:	a2 8b       	std	Z+18, r26	; 0x12
   1b62c:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b62e:	60 e0       	ldi	r22, 0x00	; 0
   1b630:	70 e0       	ldi	r23, 0x00	; 0
   1b632:	c7 01       	movw	r24, r14
   1b634:	0e 94 96 cb 	call	0x1972c	; 0x1972c <lif_writedirindex>
   1b638:	8c 01       	movw	r16, r24
   1b63a:	89 2b       	or	r24, r25
   1b63c:	41 f0       	breq	.+16     	; 0x1b64e <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b63e:	61 e0       	ldi	r22, 0x01	; 1
   1b640:	70 e0       	ldi	r23, 0x00	; 0
   1b642:	c7 01       	movw	r24, r14
   1b644:	0e 94 f2 cb 	call	0x197e4	; 0x197e4 <lif_writedirEOF>
   1b648:	8c 01       	movw	r16, r24
   1b64a:	89 2b       	or	r24, r25
   1b64c:	39 f4       	brne	.+14     	; 0x1b65c <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b64e:	c4 01       	movw	r24, r8
   1b650:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
   1b654:	c7 01       	movw	r24, r14
   1b656:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b65a:	a3 c0       	rjmp	.+326    	; 0x1b7a2 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b65c:	f7 01       	movw	r30, r14
   1b65e:	44 84       	ldd	r4, Z+12	; 0x0c
   1b660:	55 84       	ldd	r5, Z+13	; 0x0d
   1b662:	66 84       	ldd	r6, Z+14	; 0x0e
   1b664:	77 84       	ldd	r7, Z+15	; 0x0f
   1b666:	76 2c       	mov	r7, r6
   1b668:	65 2c       	mov	r6, r5
   1b66a:	54 2c       	mov	r5, r4
   1b66c:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b66e:	f4 01       	movw	r30, r8
   1b670:	e4 5a       	subi	r30, 0xA4	; 164
   1b672:	ff 4f       	sbci	r31, 0xFF	; 255
   1b674:	80 81       	ld	r24, Z
   1b676:	91 81       	ldd	r25, Z+1	; 0x01
   1b678:	a2 81       	ldd	r26, Z+2	; 0x02
   1b67a:	b3 81       	ldd	r27, Z+3	; 0x03
   1b67c:	22 27       	eor	r18, r18
   1b67e:	38 2f       	mov	r19, r24
   1b680:	49 2f       	mov	r20, r25
   1b682:	5a 2f       	mov	r21, r26
   1b684:	c4 5f       	subi	r28, 0xF4	; 244
   1b686:	de 4f       	sbci	r29, 0xFE	; 254
   1b688:	28 83       	st	Y, r18
   1b68a:	39 83       	std	Y+1, r19	; 0x01
   1b68c:	4a 83       	std	Y+2, r20	; 0x02
   1b68e:	5b 83       	std	Y+3, r21	; 0x03
   1b690:	cc 50       	subi	r28, 0x0C	; 12
   1b692:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b694:	21 2c       	mov	r2, r1
   1b696:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b698:	84 eb       	ldi	r24, 0xB4	; 180
   1b69a:	95 e3       	ldi	r25, 0x35	; 53
   1b69c:	9c 01       	movw	r18, r24
   1b69e:	40 e0       	ldi	r20, 0x00	; 0
   1b6a0:	ce 5e       	subi	r28, 0xEE	; 238
   1b6a2:	de 4f       	sbci	r29, 0xFE	; 254
   1b6a4:	28 83       	st	Y, r18
   1b6a6:	39 83       	std	Y+1, r19	; 0x01
   1b6a8:	4a 83       	std	Y+2, r20	; 0x02
   1b6aa:	c2 51       	subi	r28, 0x12	; 18
   1b6ac:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b6ae:	c0 5f       	subi	r28, 0xF0	; 240
   1b6b0:	de 4f       	sbci	r29, 0xFE	; 254
   1b6b2:	e8 81       	ld	r30, Y
   1b6b4:	f9 81       	ldd	r31, Y+1	; 0x01
   1b6b6:	c0 51       	subi	r28, 0x10	; 16
   1b6b8:	d1 40       	sbci	r29, 0x01	; 1
   1b6ba:	80 81       	ld	r24, Z
   1b6bc:	91 81       	ldd	r25, Z+1	; 0x01
   1b6be:	28 16       	cp	r2, r24
   1b6c0:	39 06       	cpc	r3, r25
   1b6c2:	0c f0       	brlt	.+2      	; 0x1b6c6 <lif_extract_lif_as_lif+0x188>
   1b6c4:	58 c0       	rjmp	.+176    	; 0x1b776 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b6c6:	00 e0       	ldi	r16, 0x00	; 0
   1b6c8:	11 e0       	ldi	r17, 0x01	; 1
   1b6ca:	c4 5f       	subi	r28, 0xF4	; 244
   1b6cc:	de 4f       	sbci	r29, 0xFE	; 254
   1b6ce:	28 81       	ld	r18, Y
   1b6d0:	39 81       	ldd	r19, Y+1	; 0x01
   1b6d2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b6d4:	5b 81       	ldd	r21, Y+3	; 0x03
   1b6d6:	cc 50       	subi	r28, 0x0C	; 12
   1b6d8:	d1 40       	sbci	r29, 0x01	; 1
   1b6da:	be 01       	movw	r22, r28
   1b6dc:	68 5f       	subi	r22, 0xF8	; 248
   1b6de:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6e0:	c4 01       	movw	r24, r8
   1b6e2:	0e 94 d5 c1 	call	0x183aa	; 0x183aa <lif_read>
   1b6e6:	5b 01       	movw	r10, r22
   1b6e8:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b6ea:	6f 3f       	cpi	r22, 0xFF	; 255
   1b6ec:	71 05       	cpc	r23, r1
   1b6ee:	09 f0       	breq	.+2      	; 0x1b6f2 <lif_extract_lif_as_lif+0x1b4>
   1b6f0:	2c f4       	brge	.+10     	; 0x1b6fc <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6f2:	c4 01       	movw	r24, r8
   1b6f4:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
   1b6f8:	c7 01       	movw	r24, r14
   1b6fa:	4f cf       	rjmp	.-354    	; 0x1b59a <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b6fc:	00 e0       	ldi	r16, 0x00	; 0
   1b6fe:	11 e0       	ldi	r17, 0x01	; 1
   1b700:	a3 01       	movw	r20, r6
   1b702:	92 01       	movw	r18, r4
   1b704:	be 01       	movw	r22, r28
   1b706:	68 5f       	subi	r22, 0xF8	; 248
   1b708:	7f 4f       	sbci	r23, 0xFF	; 255
   1b70a:	c7 01       	movw	r24, r14
   1b70c:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b710:	c5 01       	movw	r24, r10
   1b712:	0b 2c       	mov	r0, r11
   1b714:	00 0c       	add	r0, r0
   1b716:	aa 0b       	sbc	r26, r26
   1b718:	bb 0b       	sbc	r27, r27
   1b71a:	48 0e       	add	r4, r24
   1b71c:	59 1e       	adc	r5, r25
   1b71e:	6a 1e       	adc	r6, r26
   1b720:	7b 1e       	adc	r7, r27
        offset += size;
   1b722:	c4 5f       	subi	r28, 0xF4	; 244
   1b724:	de 4f       	sbci	r29, 0xFE	; 254
   1b726:	28 81       	ld	r18, Y
   1b728:	39 81       	ldd	r19, Y+1	; 0x01
   1b72a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b72c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b72e:	cc 50       	subi	r28, 0x0C	; 12
   1b730:	d1 40       	sbci	r29, 0x01	; 1
   1b732:	28 0f       	add	r18, r24
   1b734:	39 1f       	adc	r19, r25
   1b736:	4a 1f       	adc	r20, r26
   1b738:	5b 1f       	adc	r21, r27
   1b73a:	c4 5f       	subi	r28, 0xF4	; 244
   1b73c:	de 4f       	sbci	r29, 0xFE	; 254
   1b73e:	28 83       	st	Y, r18
   1b740:	39 83       	std	Y+1, r19	; 0x01
   1b742:	4a 83       	std	Y+2, r20	; 0x02
   1b744:	5b 83       	std	Y+3, r21	; 0x03
   1b746:	cc 50       	subi	r28, 0x0C	; 12
   1b748:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b74a:	ed b7       	in	r30, 0x3d	; 61
   1b74c:	fe b7       	in	r31, 0x3e	; 62
   1b74e:	44 82       	std	Z+4, r4	; 0x04
   1b750:	55 82       	std	Z+5, r5	; 0x05
   1b752:	66 82       	std	Z+6, r6	; 0x06
   1b754:	77 82       	std	Z+7, r7	; 0x07
   1b756:	ce 5e       	subi	r28, 0xEE	; 238
   1b758:	de 4f       	sbci	r29, 0xFE	; 254
   1b75a:	28 81       	ld	r18, Y
   1b75c:	39 81       	ldd	r19, Y+1	; 0x01
   1b75e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b760:	c2 51       	subi	r28, 0x12	; 18
   1b762:	d1 40       	sbci	r29, 0x01	; 1
   1b764:	21 83       	std	Z+1, r18	; 0x01
   1b766:	32 83       	std	Z+2, r19	; 0x02
   1b768:	43 83       	std	Z+3, r20	; 0x03
   1b76a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b76e:	ff ef       	ldi	r31, 0xFF	; 255
   1b770:	2f 1a       	sub	r2, r31
   1b772:	3f 0a       	sbc	r3, r31
   1b774:	9c cf       	rjmp	.-200    	; 0x1b6ae <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b776:	c4 01       	movw	r24, r8
   1b778:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
   1b77c:	c7 01       	movw	r24, r14
   1b77e:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b782:	ed b7       	in	r30, 0x3d	; 61
   1b784:	fe b7       	in	r31, 0x3e	; 62
   1b786:	44 82       	std	Z+4, r4	; 0x04
   1b788:	55 82       	std	Z+5, r5	; 0x05
   1b78a:	66 82       	std	Z+6, r6	; 0x06
   1b78c:	77 82       	std	Z+7, r7	; 0x07
   1b78e:	86 ea       	ldi	r24, 0xA6	; 166
   1b790:	95 e3       	ldi	r25, 0x35	; 53
   1b792:	a0 e0       	ldi	r26, 0x00	; 0
   1b794:	81 83       	std	Z+1, r24	; 0x01
   1b796:	92 83       	std	Z+2, r25	; 0x02
   1b798:	a3 83       	std	Z+3, r26	; 0x03
   1b79a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    return(1);
   1b79e:	01 e0       	ldi	r16, 0x01	; 1
   1b7a0:	10 e0       	ldi	r17, 0x00	; 0
}
   1b7a2:	c8 01       	movw	r24, r16
   1b7a4:	cc 5e       	subi	r28, 0xEC	; 236
   1b7a6:	de 4f       	sbci	r29, 0xFE	; 254
   1b7a8:	e2 e1       	ldi	r30, 0x12	; 18
   1b7aa:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <__epilogue_restores__>

0001b7ae <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b7ae:	2f 92       	push	r2
   1b7b0:	3f 92       	push	r3
   1b7b2:	4f 92       	push	r4
   1b7b4:	5f 92       	push	r5
   1b7b6:	6f 92       	push	r6
   1b7b8:	8f 92       	push	r8
   1b7ba:	9f 92       	push	r9
   1b7bc:	af 92       	push	r10
   1b7be:	bf 92       	push	r11
   1b7c0:	cf 92       	push	r12
   1b7c2:	df 92       	push	r13
   1b7c4:	ef 92       	push	r14
   1b7c6:	ff 92       	push	r15
   1b7c8:	0f 93       	push	r16
   1b7ca:	1f 93       	push	r17
   1b7cc:	cf 93       	push	r28
   1b7ce:	df 93       	push	r29
   1b7d0:	cd b7       	in	r28, 0x3d	; 61
   1b7d2:	de b7       	in	r29, 0x3e	; 62
   1b7d4:	cd 51       	subi	r28, 0x1D	; 29
   1b7d6:	d1 40       	sbci	r29, 0x01	; 1
   1b7d8:	0f b6       	in	r0, 0x3f	; 63
   1b7da:	f8 94       	cli
   1b7dc:	de bf       	out	0x3e, r29	; 62
   1b7de:	0f be       	out	0x3f, r0	; 63
   1b7e0:	cd bf       	out	0x3d, r28	; 61
   1b7e2:	5c 01       	movw	r10, r24
   1b7e4:	7b 01       	movw	r14, r22
   1b7e6:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b7e8:	dc 01       	movw	r26, r24
   1b7ea:	8c 91       	ld	r24, X
   1b7ec:	81 11       	cpse	r24, r1
   1b7ee:	03 c0       	rjmp	.+6      	; 0x1b7f6 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b7f0:	86 e8       	ldi	r24, 0x86	; 134
   1b7f2:	95 e3       	ldi	r25, 0x35	; 53
   1b7f4:	06 c0       	rjmp	.+12     	; 0x1b802 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b7f6:	db 01       	movw	r26, r22
   1b7f8:	8c 91       	ld	r24, X
   1b7fa:	81 11       	cpse	r24, r1
   1b7fc:	0b c0       	rjmp	.+22     	; 0x1b814 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b7fe:	8b e6       	ldi	r24, 0x6B	; 107
   1b800:	95 e3       	ldi	r25, 0x35	; 53
   1b802:	a0 e0       	ldi	r26, 0x00	; 0
   1b804:	ed b7       	in	r30, 0x3d	; 61
   1b806:	fe b7       	in	r31, 0x3e	; 62
   1b808:	81 83       	std	Z+1, r24	; 0x01
   1b80a:	92 83       	std	Z+2, r25	; 0x02
   1b80c:	a3 83       	std	Z+3, r26	; 0x03
   1b80e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1b812:	25 c1       	rjmp	.+586    	; 0x1ba5e <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b814:	da 01       	movw	r26, r20
   1b816:	8c 91       	ld	r24, X
   1b818:	81 11       	cpse	r24, r1
   1b81a:	03 c0       	rjmp	.+6      	; 0x1b822 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b81c:	8f e4       	ldi	r24, 0x4F	; 79
   1b81e:	95 e3       	ldi	r25, 0x35	; 53
   1b820:	f0 cf       	rjmp	.-32     	; 0x1b802 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b822:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b826:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b82a:	92 ff       	sbrs	r25, 2
   1b82c:	10 c0       	rjmp	.+32     	; 0x1b84e <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b82e:	ed b7       	in	r30, 0x3d	; 61
   1b830:	fe b7       	in	r31, 0x3e	; 62
   1b832:	51 87       	std	Z+9, r21	; 0x09
   1b834:	40 87       	std	Z+8, r20	; 0x08
   1b836:	77 83       	std	Z+7, r23	; 0x07
   1b838:	66 83       	std	Z+6, r22	; 0x06
   1b83a:	b5 82       	std	Z+5, r11	; 0x05
   1b83c:	a4 82       	std	Z+4, r10	; 0x04
   1b83e:	80 e2       	ldi	r24, 0x20	; 32
   1b840:	95 e3       	ldi	r25, 0x35	; 53
   1b842:	a0 e0       	ldi	r26, 0x00	; 0
   1b844:	81 83       	std	Z+1, r24	; 0x01
   1b846:	92 83       	std	Z+2, r25	; 0x02
   1b848:	a3 83       	std	Z+3, r26	; 0x03
   1b84a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b84e:	68 e0       	ldi	r22, 0x08	; 8
   1b850:	79 e0       	ldi	r23, 0x09	; 9
   1b852:	c4 01       	movw	r24, r8
   1b854:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1b858:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b85a:	00 97       	sbiw	r24, 0x00	; 0
   1b85c:	09 f4       	brne	.+2      	; 0x1b860 <lif_add_lif_file+0xb2>
   1b85e:	ff c0       	rjmp	.+510    	; 0x1ba5e <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b860:	b7 01       	movw	r22, r14
   1b862:	01 d8       	rcall	.-4094   	; 0x1a866 <lif_find_file>
    if(index == -1)
   1b864:	01 96       	adiw	r24, 0x01	; 1
   1b866:	a1 f4       	brne	.+40     	; 0x1b890 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b868:	ed b7       	in	r30, 0x3d	; 61
   1b86a:	fe b7       	in	r31, 0x3e	; 62
   1b86c:	f5 82       	std	Z+5, r15	; 0x05
   1b86e:	e4 82       	std	Z+4, r14	; 0x04
   1b870:	8d e0       	ldi	r24, 0x0D	; 13
   1b872:	95 e3       	ldi	r25, 0x35	; 53
   1b874:	a0 e0       	ldi	r26, 0x00	; 0
   1b876:	81 83       	std	Z+1, r24	; 0x01
   1b878:	92 83       	std	Z+2, r25	; 0x02
   1b87a:	a3 83       	std	Z+3, r26	; 0x03
   1b87c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b880:	c6 01       	movw	r24, r12
   1b882:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b886:	60 e0       	ldi	r22, 0x00	; 0
   1b888:	70 e0       	ldi	r23, 0x00	; 0
   1b88a:	80 e0       	ldi	r24, 0x00	; 0
   1b88c:	90 e0       	ldi	r25, 0x00	; 0
   1b88e:	ff c0       	rjmp	.+510    	; 0x1ba8e <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b890:	68 e0       	ldi	r22, 0x08	; 8
   1b892:	79 e0       	ldi	r23, 0x09	; 9
   1b894:	c5 01       	movw	r24, r10
   1b896:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1b89a:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b89c:	00 97       	sbiw	r24, 0x00	; 0
   1b89e:	09 f4       	brne	.+2      	; 0x1b8a2 <lif_add_lif_file+0xf4>
   1b8a0:	de c0       	rjmp	.+444    	; 0x1ba5e <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b8a2:	f6 01       	movw	r30, r12
   1b8a4:	e0 5a       	subi	r30, 0xA0	; 160
   1b8a6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8a8:	40 81       	ld	r20, Z
   1b8aa:	51 81       	ldd	r21, Z+1	; 0x01
   1b8ac:	62 81       	ldd	r22, Z+2	; 0x02
   1b8ae:	73 81       	ldd	r23, Z+3	; 0x03
   1b8b0:	0e 94 fe cf 	call	0x19ffc	; 0x19ffc <lif_newdir>
   1b8b4:	ca 5e       	subi	r28, 0xEA	; 234
   1b8b6:	de 4f       	sbci	r29, 0xFE	; 254
   1b8b8:	99 83       	std	Y+1, r25	; 0x01
   1b8ba:	88 83       	st	Y, r24
   1b8bc:	c6 51       	subi	r28, 0x16	; 22
   1b8be:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b8c0:	01 96       	adiw	r24, 0x01	; 1
   1b8c2:	79 f4       	brne	.+30     	; 0x1b8e2 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b8c4:	ed b7       	in	r30, 0x3d	; 61
   1b8c6:	fe b7       	in	r31, 0x3e	; 62
   1b8c8:	97 82       	std	Z+7, r9	; 0x07
   1b8ca:	86 82       	std	Z+6, r8	; 0x06
   1b8cc:	b5 82       	std	Z+5, r11	; 0x05
   1b8ce:	a4 82       	std	Z+4, r10	; 0x04
   1b8d0:	8d ed       	ldi	r24, 0xDD	; 221
   1b8d2:	94 e3       	ldi	r25, 0x34	; 52
   1b8d4:	a0 e0       	ldi	r26, 0x00	; 0
   1b8d6:	81 83       	std	Z+1, r24	; 0x01
   1b8d8:	92 83       	std	Z+2, r25	; 0x02
   1b8da:	a3 83       	std	Z+3, r26	; 0x03
   1b8dc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1b8e0:	a8 c0       	rjmp	.+336    	; 0x1ba32 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b8e2:	c7 01       	movw	r24, r14
   1b8e4:	84 5a       	subi	r24, 0xA4	; 164
   1b8e6:	9f 4f       	sbci	r25, 0xFF	; 255
   1b8e8:	dc 01       	movw	r26, r24
   1b8ea:	4d 91       	ld	r20, X+
   1b8ec:	5d 91       	ld	r21, X+
   1b8ee:	6d 91       	ld	r22, X+
   1b8f0:	7c 91       	ld	r23, X
   1b8f2:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b8f4:	21 e2       	ldi	r18, 0x21	; 33
   1b8f6:	f6 01       	movw	r30, r12
   1b8f8:	e1 5b       	subi	r30, 0xB1	; 177
   1b8fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8fc:	1d 97       	sbiw	r26, 0x0d	; 13
   1b8fe:	01 90       	ld	r0, Z+
   1b900:	0d 92       	st	X+, r0
   1b902:	2a 95       	dec	r18
   1b904:	e1 f7       	brne	.-8      	; 0x1b8fe <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b906:	fc 01       	movw	r30, r24
   1b908:	40 83       	st	Z, r20
   1b90a:	51 83       	std	Z+1, r21	; 0x01
   1b90c:	62 83       	std	Z+2, r22	; 0x02
   1b90e:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b910:	b6 2f       	mov	r27, r22
   1b912:	a5 2f       	mov	r26, r21
   1b914:	94 2f       	mov	r25, r20
   1b916:	88 27       	eor	r24, r24
   1b918:	c2 5f       	subi	r28, 0xF2	; 242
   1b91a:	de 4f       	sbci	r29, 0xFE	; 254
   1b91c:	88 83       	st	Y, r24
   1b91e:	99 83       	std	Y+1, r25	; 0x01
   1b920:	aa 83       	std	Y+2, r26	; 0x02
   1b922:	bb 83       	std	Y+3, r27	; 0x03
   1b924:	ce 50       	subi	r28, 0x0E	; 14
   1b926:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b928:	f6 01       	movw	r30, r12
   1b92a:	e4 5a       	subi	r30, 0xA4	; 164
   1b92c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b92e:	80 81       	ld	r24, Z
   1b930:	91 81       	ldd	r25, Z+1	; 0x01
   1b932:	a2 81       	ldd	r26, Z+2	; 0x02
   1b934:	b3 81       	ldd	r27, Z+3	; 0x03
   1b936:	22 27       	eor	r18, r18
   1b938:	38 2f       	mov	r19, r24
   1b93a:	49 2f       	mov	r20, r25
   1b93c:	5a 2f       	mov	r21, r26
   1b93e:	ce 5e       	subi	r28, 0xEE	; 238
   1b940:	de 4f       	sbci	r29, 0xFE	; 254
   1b942:	28 83       	st	Y, r18
   1b944:	39 83       	std	Y+1, r19	; 0x01
   1b946:	4a 83       	std	Y+2, r20	; 0x02
   1b948:	5b 83       	std	Y+3, r21	; 0x03
   1b94a:	c2 51       	subi	r28, 0x12	; 18
   1b94c:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b94e:	21 2c       	mov	r2, r1
   1b950:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b952:	81 2c       	mov	r8, r1
   1b954:	91 2c       	mov	r9, r1
   1b956:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b958:	a7 01       	movw	r20, r14
   1b95a:	40 5a       	subi	r20, 0xA0	; 160
   1b95c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b95e:	c4 5e       	subi	r28, 0xE4	; 228
   1b960:	de 4f       	sbci	r29, 0xFE	; 254
   1b962:	59 83       	std	Y+1, r21	; 0x01
   1b964:	48 83       	st	Y, r20
   1b966:	cc 51       	subi	r28, 0x1C	; 28
   1b968:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b96a:	8f ec       	ldi	r24, 0xCF	; 207
   1b96c:	94 e3       	ldi	r25, 0x34	; 52
   1b96e:	2c 01       	movw	r4, r24
   1b970:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b972:	27 c0       	rjmp	.+78     	; 0x1b9c2 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b974:	00 e0       	ldi	r16, 0x00	; 0
   1b976:	11 e0       	ldi	r17, 0x01	; 1
   1b978:	c8 5e       	subi	r28, 0xE8	; 232
   1b97a:	de 4f       	sbci	r29, 0xFE	; 254
   1b97c:	28 81       	ld	r18, Y
   1b97e:	39 81       	ldd	r19, Y+1	; 0x01
   1b980:	4a 81       	ldd	r20, Y+2	; 0x02
   1b982:	5b 81       	ldd	r21, Y+3	; 0x03
   1b984:	c8 51       	subi	r28, 0x18	; 24
   1b986:	d1 40       	sbci	r29, 0x01	; 1
   1b988:	be 01       	movw	r22, r28
   1b98a:	66 5f       	subi	r22, 0xF6	; 246
   1b98c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b98e:	c7 01       	movw	r24, r14
   1b990:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b994:	8f 3f       	cpi	r24, 0xFF	; 255
   1b996:	91 05       	cpc	r25, r1
   1b998:	09 f0       	breq	.+2      	; 0x1b99c <lif_add_lif_file+0x1ee>
   1b99a:	0c f4       	brge	.+2      	; 0x1b99e <lif_add_lif_file+0x1f0>
   1b99c:	4a c0       	rjmp	.+148    	; 0x1ba32 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b99e:	5f ef       	ldi	r21, 0xFF	; 255
   1b9a0:	95 1a       	sub	r9, r21
   1b9a2:	a5 0a       	sbc	r10, r21
   1b9a4:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b9a6:	ed b7       	in	r30, 0x3d	; 61
   1b9a8:	fe b7       	in	r31, 0x3e	; 62
   1b9aa:	84 82       	std	Z+4, r8	; 0x04
   1b9ac:	95 82       	std	Z+5, r9	; 0x05
   1b9ae:	a6 82       	std	Z+6, r10	; 0x06
   1b9b0:	b7 82       	std	Z+7, r11	; 0x07
   1b9b2:	41 82       	std	Z+1, r4	; 0x01
   1b9b4:	52 82       	std	Z+2, r5	; 0x02
   1b9b6:	63 82       	std	Z+3, r6	; 0x03
   1b9b8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9bc:	ff ef       	ldi	r31, 0xFF	; 255
   1b9be:	2f 1a       	sub	r2, r31
   1b9c0:	3f 0a       	sbc	r3, r31
   1b9c2:	ce 5e       	subi	r28, 0xEE	; 238
   1b9c4:	de 4f       	sbci	r29, 0xFE	; 254
   1b9c6:	28 81       	ld	r18, Y
   1b9c8:	39 81       	ldd	r19, Y+1	; 0x01
   1b9ca:	4a 81       	ldd	r20, Y+2	; 0x02
   1b9cc:	5b 81       	ldd	r21, Y+3	; 0x03
   1b9ce:	c2 51       	subi	r28, 0x12	; 18
   1b9d0:	d1 40       	sbci	r29, 0x01	; 1
   1b9d2:	28 0d       	add	r18, r8
   1b9d4:	39 1d       	adc	r19, r9
   1b9d6:	4a 1d       	adc	r20, r10
   1b9d8:	5b 1d       	adc	r21, r11
   1b9da:	c2 5f       	subi	r28, 0xF2	; 242
   1b9dc:	de 4f       	sbci	r29, 0xFE	; 254
   1b9de:	88 81       	ld	r24, Y
   1b9e0:	99 81       	ldd	r25, Y+1	; 0x01
   1b9e2:	aa 81       	ldd	r26, Y+2	; 0x02
   1b9e4:	bb 81       	ldd	r27, Y+3	; 0x03
   1b9e6:	ce 50       	subi	r28, 0x0E	; 14
   1b9e8:	d1 40       	sbci	r29, 0x01	; 1
   1b9ea:	88 0d       	add	r24, r8
   1b9ec:	99 1d       	adc	r25, r9
   1b9ee:	aa 1d       	adc	r26, r10
   1b9f0:	bb 1d       	adc	r27, r11
   1b9f2:	c8 5e       	subi	r28, 0xE8	; 232
   1b9f4:	de 4f       	sbci	r29, 0xFE	; 254
   1b9f6:	88 83       	st	Y, r24
   1b9f8:	99 83       	std	Y+1, r25	; 0x01
   1b9fa:	aa 83       	std	Y+2, r26	; 0x02
   1b9fc:	bb 83       	std	Y+3, r27	; 0x03
   1b9fe:	c8 51       	subi	r28, 0x18	; 24
   1ba00:	d1 40       	sbci	r29, 0x01	; 1
   1ba02:	c4 5e       	subi	r28, 0xE4	; 228
   1ba04:	de 4f       	sbci	r29, 0xFE	; 254
   1ba06:	a8 81       	ld	r26, Y
   1ba08:	b9 81       	ldd	r27, Y+1	; 0x01
   1ba0a:	cc 51       	subi	r28, 0x1C	; 28
   1ba0c:	d1 40       	sbci	r29, 0x01	; 1
   1ba0e:	8d 91       	ld	r24, X+
   1ba10:	9c 91       	ld	r25, X
   1ba12:	28 16       	cp	r2, r24
   1ba14:	39 06       	cpc	r3, r25
   1ba16:	94 f4       	brge	.+36     	; 0x1ba3c <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1ba18:	00 e0       	ldi	r16, 0x00	; 0
   1ba1a:	11 e0       	ldi	r17, 0x01	; 1
   1ba1c:	be 01       	movw	r22, r28
   1ba1e:	66 5f       	subi	r22, 0xF6	; 246
   1ba20:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba22:	c6 01       	movw	r24, r12
   1ba24:	0e 94 d5 c1 	call	0x183aa	; 0x183aa <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ba28:	6f 3f       	cpi	r22, 0xFF	; 255
   1ba2a:	71 05       	cpc	r23, r1
   1ba2c:	11 f0       	breq	.+4      	; 0x1ba32 <lif_add_lif_file+0x284>
   1ba2e:	0c f0       	brlt	.+2      	; 0x1ba32 <lif_add_lif_file+0x284>
   1ba30:	a1 cf       	rjmp	.-190    	; 0x1b974 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba32:	c7 01       	movw	r24, r14
   1ba34:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
   1ba38:	c6 01       	movw	r24, r12
   1ba3a:	0f c0       	rjmp	.+30     	; 0x1ba5a <lif_add_lif_file+0x2ac>
   1ba3c:	c6 01       	movw	r24, r12
   1ba3e:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1ba42:	ca 5e       	subi	r28, 0xEA	; 234
   1ba44:	de 4f       	sbci	r29, 0xFE	; 254
   1ba46:	68 81       	ld	r22, Y
   1ba48:	79 81       	ldd	r23, Y+1	; 0x01
   1ba4a:	c6 51       	subi	r28, 0x16	; 22
   1ba4c:	d1 40       	sbci	r29, 0x01	; 1
   1ba4e:	c7 01       	movw	r24, r14
   1ba50:	0e 94 96 cb 	call	0x1972c	; 0x1972c <lif_writedirindex>
   1ba54:	89 2b       	or	r24, r25
   1ba56:	41 f4       	brne	.+16     	; 0x1ba68 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba58:	c7 01       	movw	r24, r14
   1ba5a:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1ba5e:	6f ef       	ldi	r22, 0xFF	; 255
   1ba60:	7f ef       	ldi	r23, 0xFF	; 255
   1ba62:	8f ef       	ldi	r24, 0xFF	; 255
   1ba64:	9f ef       	ldi	r25, 0xFF	; 255
   1ba66:	13 c0       	rjmp	.+38     	; 0x1ba8e <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba68:	c7 01       	movw	r24, r14
   1ba6a:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1ba6e:	ed b7       	in	r30, 0x3d	; 61
   1ba70:	fe b7       	in	r31, 0x3e	; 62
   1ba72:	84 82       	std	Z+4, r8	; 0x04
   1ba74:	95 82       	std	Z+5, r9	; 0x05
   1ba76:	a6 82       	std	Z+6, r10	; 0x06
   1ba78:	b7 82       	std	Z+7, r11	; 0x07
   1ba7a:	81 ec       	ldi	r24, 0xC1	; 193
   1ba7c:	94 e3       	ldi	r25, 0x34	; 52
   1ba7e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba80:	81 83       	std	Z+1, r24	; 0x01
   1ba82:	92 83       	std	Z+2, r25	; 0x02
   1ba84:	a3 83       	std	Z+3, r26	; 0x03
   1ba86:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    return(bytes);
   1ba8a:	b4 01       	movw	r22, r8
   1ba8c:	c5 01       	movw	r24, r10
}
   1ba8e:	c3 5e       	subi	r28, 0xE3	; 227
   1ba90:	de 4f       	sbci	r29, 0xFE	; 254
   1ba92:	0f b6       	in	r0, 0x3f	; 63
   1ba94:	f8 94       	cli
   1ba96:	de bf       	out	0x3e, r29	; 62
   1ba98:	0f be       	out	0x3f, r0	; 63
   1ba9a:	cd bf       	out	0x3d, r28	; 61
   1ba9c:	df 91       	pop	r29
   1ba9e:	cf 91       	pop	r28
   1baa0:	1f 91       	pop	r17
   1baa2:	0f 91       	pop	r16
   1baa4:	ff 90       	pop	r15
   1baa6:	ef 90       	pop	r14
   1baa8:	df 90       	pop	r13
   1baaa:	cf 90       	pop	r12
   1baac:	bf 90       	pop	r11
   1baae:	af 90       	pop	r10
   1bab0:	9f 90       	pop	r9
   1bab2:	8f 90       	pop	r8
   1bab4:	6f 90       	pop	r6
   1bab6:	5f 90       	pop	r5
   1bab8:	4f 90       	pop	r4
   1baba:	3f 90       	pop	r3
   1babc:	2f 90       	pop	r2
   1babe:	08 95       	ret

0001bac0 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bac0:	ef 92       	push	r14
   1bac2:	ff 92       	push	r15
   1bac4:	0f 93       	push	r16
   1bac6:	1f 93       	push	r17
   1bac8:	cf 93       	push	r28
   1baca:	df 93       	push	r29
   1bacc:	ad b7       	in	r26, 0x3d	; 61
   1bace:	be b7       	in	r27, 0x3e	; 62
   1bad0:	17 97       	sbiw	r26, 0x07	; 7
   1bad2:	0f b6       	in	r0, 0x3f	; 63
   1bad4:	f8 94       	cli
   1bad6:	be bf       	out	0x3e, r27	; 62
   1bad8:	0f be       	out	0x3f, r0	; 63
   1bada:	ad bf       	out	0x3d, r26	; 61
   1badc:	7c 01       	movw	r14, r24
   1bade:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bae0:	fc 01       	movw	r30, r24
   1bae2:	80 81       	ld	r24, Z
   1bae4:	81 11       	cpse	r24, r1
   1bae6:	03 c0       	rjmp	.+6      	; 0x1baee <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bae8:	8c e9       	ldi	r24, 0x9C	; 156
   1baea:	94 e3       	ldi	r25, 0x34	; 52
   1baec:	06 c0       	rjmp	.+12     	; 0x1bafa <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1baee:	fb 01       	movw	r30, r22
   1baf0:	80 81       	ld	r24, Z
   1baf2:	81 11       	cpse	r24, r1
   1baf4:	0b c0       	rjmp	.+22     	; 0x1bb0c <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1baf6:	8c e7       	ldi	r24, 0x7C	; 124
   1baf8:	94 e3       	ldi	r25, 0x34	; 52
   1bafa:	a0 e0       	ldi	r26, 0x00	; 0
   1bafc:	ed b7       	in	r30, 0x3d	; 61
   1bafe:	fe b7       	in	r31, 0x3e	; 62
   1bb00:	81 83       	std	Z+1, r24	; 0x01
   1bb02:	92 83       	std	Z+2, r25	; 0x02
   1bb04:	a3 83       	std	Z+3, r26	; 0x03
   1bb06:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1bb0a:	68 c0       	rjmp	.+208    	; 0x1bbdc <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1bb0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bb10:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bb14:	92 ff       	sbrs	r25, 2
   1bb16:	0e c0       	rjmp	.+28     	; 0x1bb34 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1bb18:	ed b7       	in	r30, 0x3d	; 61
   1bb1a:	fe b7       	in	r31, 0x3e	; 62
   1bb1c:	77 83       	std	Z+7, r23	; 0x07
   1bb1e:	66 83       	std	Z+6, r22	; 0x06
   1bb20:	f5 82       	std	Z+5, r15	; 0x05
   1bb22:	e4 82       	std	Z+4, r14	; 0x04
   1bb24:	8d e5       	ldi	r24, 0x5D	; 93
   1bb26:	94 e3       	ldi	r25, 0x34	; 52
   1bb28:	a0 e0       	ldi	r26, 0x00	; 0
   1bb2a:	81 83       	std	Z+1, r24	; 0x01
   1bb2c:	92 83       	std	Z+2, r25	; 0x02
   1bb2e:	a3 83       	std	Z+3, r26	; 0x03
   1bb30:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1bb34:	68 e0       	ldi	r22, 0x08	; 8
   1bb36:	79 e0       	ldi	r23, 0x09	; 9
   1bb38:	c7 01       	movw	r24, r14
   1bb3a:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1bb3e:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bb40:	00 97       	sbiw	r24, 0x00	; 0
   1bb42:	09 f4       	brne	.+2      	; 0x1bb46 <lif_del_file+0x86>
   1bb44:	4b c0       	rjmp	.+150    	; 0x1bbdc <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1bb46:	b8 01       	movw	r22, r16
   1bb48:	0e 94 33 d4 	call	0x1a866	; 0x1a866 <lif_find_file>
    if(index == -1)
   1bb4c:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb4e:	ff ef       	ldi	r31, 0xFF	; 255
   1bb50:	9f 07       	cpc	r25, r31
   1bb52:	a1 f4       	brne	.+40     	; 0x1bb7c <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb54:	ce 01       	movw	r24, r28
   1bb56:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bb5a:	ed b7       	in	r30, 0x3d	; 61
   1bb5c:	fe b7       	in	r31, 0x3e	; 62
   1bb5e:	17 83       	std	Z+7, r17	; 0x07
   1bb60:	06 83       	std	Z+6, r16	; 0x06
   1bb62:	f5 82       	std	Z+5, r15	; 0x05
   1bb64:	e4 82       	std	Z+4, r14	; 0x04
   1bb66:	85 e3       	ldi	r24, 0x35	; 53
   1bb68:	94 e3       	ldi	r25, 0x34	; 52
   1bb6a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb6c:	81 83       	std	Z+1, r24	; 0x01
   1bb6e:	92 83       	std	Z+2, r25	; 0x02
   1bb70:	a3 83       	std	Z+3, r26	; 0x03
   1bb72:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        return(0);
   1bb76:	80 e0       	ldi	r24, 0x00	; 0
   1bb78:	90 e0       	ldi	r25, 0x00	; 0
   1bb7a:	32 c0       	rjmp	.+100    	; 0x1bbe0 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bb7c:	2a a1       	ldd	r18, Y+34	; 0x22
   1bb7e:	3b a1       	ldd	r19, Y+35	; 0x23
   1bb80:	21 50       	subi	r18, 0x01	; 1
   1bb82:	31 09       	sbc	r19, r1
   1bb84:	fe 01       	movw	r30, r28
   1bb86:	e6 5a       	subi	r30, 0xA6	; 166
   1bb88:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb8a:	82 17       	cp	r24, r18
   1bb8c:	93 07       	cpc	r25, r19
   1bb8e:	2c f0       	brlt	.+10     	; 0x1bb9a <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bb90:	2f ef       	ldi	r18, 0xFF	; 255
   1bb92:	3f ef       	ldi	r19, 0xFF	; 255
   1bb94:	31 83       	std	Z+1, r19	; 0x01
   1bb96:	20 83       	st	Z, r18
   1bb98:	02 c0       	rjmp	.+4      	; 0x1bb9e <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bb9a:	11 82       	std	Z+1, r1	; 0x01
   1bb9c:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bb9e:	bc 01       	movw	r22, r24
   1bba0:	ce 01       	movw	r24, r28
   1bba2:	0e 94 96 cb 	call	0x1972c	; 0x1972c <lif_writedirindex>
   1bba6:	89 2b       	or	r24, r25
   1bba8:	21 f4       	brne	.+8      	; 0x1bbb2 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbaa:	ce 01       	movw	r24, r28
   1bbac:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
   1bbb0:	15 c0       	rjmp	.+42     	; 0x1bbdc <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bbb2:	ce 01       	movw	r24, r28
   1bbb4:	0e 94 0a cc 	call	0x19814	; 0x19814 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbb8:	ce 01       	movw	r24, r28
   1bbba:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bbbe:	ed b7       	in	r30, 0x3d	; 61
   1bbc0:	fe b7       	in	r31, 0x3e	; 62
   1bbc2:	15 83       	std	Z+5, r17	; 0x05
   1bbc4:	04 83       	std	Z+4, r16	; 0x04
   1bbc6:	86 e2       	ldi	r24, 0x26	; 38
   1bbc8:	94 e3       	ldi	r25, 0x34	; 52
   1bbca:	a0 e0       	ldi	r26, 0x00	; 0
   1bbcc:	81 83       	std	Z+1, r24	; 0x01
   1bbce:	92 83       	std	Z+2, r25	; 0x02
   1bbd0:	a3 83       	std	Z+3, r26	; 0x03
   1bbd2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    return(1);
   1bbd6:	81 e0       	ldi	r24, 0x01	; 1
   1bbd8:	90 e0       	ldi	r25, 0x00	; 0
   1bbda:	02 c0       	rjmp	.+4      	; 0x1bbe0 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bbdc:	8f ef       	ldi	r24, 0xFF	; 255
   1bbde:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bbe0:	cd b7       	in	r28, 0x3d	; 61
   1bbe2:	de b7       	in	r29, 0x3e	; 62
   1bbe4:	27 96       	adiw	r28, 0x07	; 7
   1bbe6:	e6 e0       	ldi	r30, 0x06	; 6
   1bbe8:	0c 94 14 e7 	jmp	0x1ce28	; 0x1ce28 <__epilogue_restores__+0x18>

0001bbec <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bbec:	a7 e0       	ldi	r26, 0x07	; 7
   1bbee:	b0 e0       	ldi	r27, 0x00	; 0
   1bbf0:	ec ef       	ldi	r30, 0xFC	; 252
   1bbf2:	fd ed       	ldi	r31, 0xDD	; 221
   1bbf4:	0c 94 f4 e6 	jmp	0x1cde8	; 0x1cde8 <__prologue_saves__+0x10>
   1bbf8:	6c 01       	movw	r12, r24
   1bbfa:	8b 01       	movw	r16, r22
   1bbfc:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bbfe:	fc 01       	movw	r30, r24
   1bc00:	80 81       	ld	r24, Z
   1bc02:	81 11       	cpse	r24, r1
   1bc04:	03 c0       	rjmp	.+6      	; 0x1bc0c <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bc06:	8e ef       	ldi	r24, 0xFE	; 254
   1bc08:	93 e3       	ldi	r25, 0x33	; 51
   1bc0a:	06 c0       	rjmp	.+12     	; 0x1bc18 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bc0c:	fb 01       	movw	r30, r22
   1bc0e:	80 81       	ld	r24, Z
   1bc10:	81 11       	cpse	r24, r1
   1bc12:	0b c0       	rjmp	.+22     	; 0x1bc2a <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bc14:	87 ed       	ldi	r24, 0xD7	; 215
   1bc16:	93 e3       	ldi	r25, 0x33	; 51
   1bc18:	a0 e0       	ldi	r26, 0x00	; 0
   1bc1a:	ed b7       	in	r30, 0x3d	; 61
   1bc1c:	fe b7       	in	r31, 0x3e	; 62
   1bc1e:	81 83       	std	Z+1, r24	; 0x01
   1bc20:	92 83       	std	Z+2, r25	; 0x02
   1bc22:	a3 83       	std	Z+3, r26	; 0x03
   1bc24:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1bc28:	58 c0       	rjmp	.+176    	; 0x1bcda <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bc2a:	fa 01       	movw	r30, r20
   1bc2c:	80 81       	ld	r24, Z
   1bc2e:	81 11       	cpse	r24, r1
   1bc30:	03 c0       	rjmp	.+6      	; 0x1bc38 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bc32:	80 eb       	ldi	r24, 0xB0	; 176
   1bc34:	93 e3       	ldi	r25, 0x33	; 51
   1bc36:	f0 cf       	rjmp	.-32     	; 0x1bc18 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bc38:	ca 01       	movw	r24, r20
   1bc3a:	0e 94 f0 c2 	call	0x185e0	; 0x185e0 <lif_checkname>
   1bc3e:	89 2b       	or	r24, r25
   1bc40:	19 f4       	brne	.+6      	; 0x1bc48 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bc42:	8a e7       	ldi	r24, 0x7A	; 122
   1bc44:	93 e3       	ldi	r25, 0x33	; 51
   1bc46:	e8 cf       	rjmp	.-48     	; 0x1bc18 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bc48:	68 e0       	ldi	r22, 0x08	; 8
   1bc4a:	79 e0       	ldi	r23, 0x09	; 9
   1bc4c:	c6 01       	movw	r24, r12
   1bc4e:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1bc52:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bc54:	00 97       	sbiw	r24, 0x00	; 0
   1bc56:	09 f4       	brne	.+2      	; 0x1bc5a <lif_rename_file+0x6e>
   1bc58:	40 c0       	rjmp	.+128    	; 0x1bcda <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bc5a:	b8 01       	movw	r22, r16
   1bc5c:	0e 94 33 d4 	call	0x1a866	; 0x1a866 <lif_find_file>
   1bc60:	5c 01       	movw	r10, r24
    if(index == -1)
   1bc62:	01 96       	adiw	r24, 0x01	; 1
   1bc64:	a1 f4       	brne	.+40     	; 0x1bc8e <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bc66:	ed b7       	in	r30, 0x3d	; 61
   1bc68:	fe b7       	in	r31, 0x3e	; 62
   1bc6a:	17 83       	std	Z+7, r17	; 0x07
   1bc6c:	06 83       	std	Z+6, r16	; 0x06
   1bc6e:	d5 82       	std	Z+5, r13	; 0x05
   1bc70:	c4 82       	std	Z+4, r12	; 0x04
   1bc72:	81 e5       	ldi	r24, 0x51	; 81
   1bc74:	93 e3       	ldi	r25, 0x33	; 51
   1bc76:	a0 e0       	ldi	r26, 0x00	; 0
   1bc78:	81 83       	std	Z+1, r24	; 0x01
   1bc7a:	92 83       	std	Z+2, r25	; 0x02
   1bc7c:	a3 83       	std	Z+3, r26	; 0x03
   1bc7e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc82:	ce 01       	movw	r24, r28
   1bc84:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bc88:	80 e0       	ldi	r24, 0x00	; 0
   1bc8a:	90 e0       	ldi	r25, 0x00	; 0
   1bc8c:	28 c0       	rjmp	.+80     	; 0x1bcde <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bc8e:	4a e0       	ldi	r20, 0x0A	; 10
   1bc90:	50 e0       	ldi	r21, 0x00	; 0
   1bc92:	b7 01       	movw	r22, r14
   1bc94:	ce 01       	movw	r24, r28
   1bc96:	81 5b       	subi	r24, 0xB1	; 177
   1bc98:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc9a:	0e 94 2a c3 	call	0x18654	; 0x18654 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bc9e:	b5 01       	movw	r22, r10
   1bca0:	ce 01       	movw	r24, r28
   1bca2:	0e 94 96 cb 	call	0x1972c	; 0x1972c <lif_writedirindex>
   1bca6:	89 2b       	or	r24, r25
   1bca8:	21 f4       	brne	.+8      	; 0x1bcb2 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcaa:	ce 01       	movw	r24, r28
   1bcac:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
   1bcb0:	14 c0       	rjmp	.+40     	; 0x1bcda <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bcb2:	ed b7       	in	r30, 0x3d	; 61
   1bcb4:	fe b7       	in	r31, 0x3e	; 62
   1bcb6:	f7 82       	std	Z+7, r15	; 0x07
   1bcb8:	e6 82       	std	Z+6, r14	; 0x06
   1bcba:	15 83       	std	Z+5, r17	; 0x05
   1bcbc:	04 83       	std	Z+4, r16	; 0x04
   1bcbe:	8a e3       	ldi	r24, 0x3A	; 58
   1bcc0:	93 e3       	ldi	r25, 0x33	; 51
   1bcc2:	a0 e0       	ldi	r26, 0x00	; 0
   1bcc4:	81 83       	std	Z+1, r24	; 0x01
   1bcc6:	92 83       	std	Z+2, r25	; 0x02
   1bcc8:	a3 83       	std	Z+3, r26	; 0x03
   1bcca:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcce:	ce 01       	movw	r24, r28
   1bcd0:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bcd4:	81 e0       	ldi	r24, 0x01	; 1
   1bcd6:	90 e0       	ldi	r25, 0x00	; 0
   1bcd8:	02 c0       	rjmp	.+4      	; 0x1bcde <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bcda:	8f ef       	ldi	r24, 0xFF	; 255
   1bcdc:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bcde:	cd b7       	in	r28, 0x3d	; 61
   1bce0:	de b7       	in	r29, 0x3e	; 62
   1bce2:	27 96       	adiw	r28, 0x07	; 7
   1bce4:	ea e0       	ldi	r30, 0x0A	; 10
   1bce6:	0c 94 10 e7 	jmp	0x1ce20	; 0x1ce20 <__epilogue_restores__+0x10>

0001bcea <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bcea:	4f 92       	push	r4
   1bcec:	5f 92       	push	r5
   1bcee:	6f 92       	push	r6
   1bcf0:	7f 92       	push	r7
   1bcf2:	af 92       	push	r10
   1bcf4:	bf 92       	push	r11
   1bcf6:	cf 92       	push	r12
   1bcf8:	df 92       	push	r13
   1bcfa:	ef 92       	push	r14
   1bcfc:	ff 92       	push	r15
   1bcfe:	0f 93       	push	r16
   1bd00:	1f 93       	push	r17
   1bd02:	cf 93       	push	r28
   1bd04:	df 93       	push	r29
   1bd06:	ad b7       	in	r26, 0x3d	; 61
   1bd08:	be b7       	in	r27, 0x3e	; 62
   1bd0a:	17 97       	sbiw	r26, 0x07	; 7
   1bd0c:	0f b6       	in	r0, 0x3f	; 63
   1bd0e:	f8 94       	cli
   1bd10:	be bf       	out	0x3e, r27	; 62
   1bd12:	0f be       	out	0x3f, r0	; 63
   1bd14:	ad bf       	out	0x3d, r26	; 61
   1bd16:	27 01       	movw	r4, r14
   1bd18:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bd1a:	dc 01       	movw	r26, r24
   1bd1c:	ec 91       	ld	r30, X
   1bd1e:	e1 11       	cpse	r30, r1
   1bd20:	03 c0       	rjmp	.+6      	; 0x1bd28 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bd22:	81 e1       	ldi	r24, 0x11	; 17
   1bd24:	93 e3       	ldi	r25, 0x33	; 51
   1bd26:	16 c0       	rjmp	.+44     	; 0x1bd54 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bd28:	db 01       	movw	r26, r22
   1bd2a:	ec 91       	ld	r30, X
   1bd2c:	e1 11       	cpse	r30, r1
   1bd2e:	03 c0       	rjmp	.+6      	; 0x1bd36 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bd30:	8c ee       	ldi	r24, 0xEC	; 236
   1bd32:	92 e3       	ldi	r25, 0x32	; 50
   1bd34:	0f c0       	rjmp	.+30     	; 0x1bd54 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bd36:	21 15       	cp	r18, r1
   1bd38:	31 05       	cpc	r19, r1
   1bd3a:	41 05       	cpc	r20, r1
   1bd3c:	51 05       	cpc	r21, r1
   1bd3e:	19 f4       	brne	.+6      	; 0x1bd46 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bd40:	89 ec       	ldi	r24, 0xC9	; 201
   1bd42:	92 e3       	ldi	r25, 0x32	; 50
   1bd44:	07 c0       	rjmp	.+14     	; 0x1bd54 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bd46:	e1 14       	cp	r14, r1
   1bd48:	f1 04       	cpc	r15, r1
   1bd4a:	01 05       	cpc	r16, r1
   1bd4c:	11 05       	cpc	r17, r1
   1bd4e:	59 f4       	brne	.+22     	; 0x1bd66 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bd50:	89 ea       	ldi	r24, 0xA9	; 169
   1bd52:	92 e3       	ldi	r25, 0x32	; 50
   1bd54:	a0 e0       	ldi	r26, 0x00	; 0
   1bd56:	ed b7       	in	r30, 0x3d	; 61
   1bd58:	fe b7       	in	r31, 0x3e	; 62
   1bd5a:	81 83       	std	Z+1, r24	; 0x01
   1bd5c:	92 83       	std	Z+2, r25	; 0x02
   1bd5e:	a3 83       	std	Z+3, r26	; 0x03
   1bd60:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1bd64:	2b c0       	rjmp	.+86     	; 0x1bdbc <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bd66:	67 01       	movw	r12, r14
   1bd68:	78 01       	movw	r14, r16
   1bd6a:	f2 e0       	ldi	r31, 0x02	; 2
   1bd6c:	cf 1a       	sub	r12, r31
   1bd6e:	d1 08       	sbc	r13, r1
   1bd70:	e1 08       	sbc	r14, r1
   1bd72:	f1 08       	sbc	r15, r1
   1bd74:	56 01       	movw	r10, r12
   1bd76:	67 01       	movw	r12, r14
   1bd78:	a2 1a       	sub	r10, r18
   1bd7a:	b3 0a       	sbc	r11, r19
   1bd7c:	c4 0a       	sbc	r12, r20
   1bd7e:	d5 0a       	sbc	r13, r21
   1bd80:	79 01       	movw	r14, r18
   1bd82:	8a 01       	movw	r16, r20
   1bd84:	22 e0       	ldi	r18, 0x02	; 2
   1bd86:	30 e0       	ldi	r19, 0x00	; 0
   1bd88:	40 e0       	ldi	r20, 0x00	; 0
   1bd8a:	50 e0       	ldi	r21, 0x00	; 0
   1bd8c:	0e 94 14 cd 	call	0x19a28	; 0x19a28 <lif_create_volume>
    if(LIF == NULL)
   1bd90:	00 97       	sbiw	r24, 0x00	; 0
   1bd92:	a1 f0       	breq	.+40     	; 0x1bdbc <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bd94:	0e 94 a1 ca 	call	0x19542	; 0x19542 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bd98:	82 01       	movw	r16, r4
   1bd9a:	d6 2d       	mov	r29, r6
   1bd9c:	c7 2d       	mov	r28, r7
   1bd9e:	ed b7       	in	r30, 0x3d	; 61
   1bda0:	fe b7       	in	r31, 0x3e	; 62
   1bda2:	44 82       	std	Z+4, r4	; 0x04
   1bda4:	15 83       	std	Z+5, r17	; 0x05
   1bda6:	66 82       	std	Z+6, r6	; 0x06
   1bda8:	77 82       	std	Z+7, r7	; 0x07
   1bdaa:	89 e8       	ldi	r24, 0x89	; 137
   1bdac:	92 e3       	ldi	r25, 0x32	; 50
   1bdae:	a0 e0       	ldi	r26, 0x00	; 0
   1bdb0:	81 83       	std	Z+1, r24	; 0x01
   1bdb2:	92 83       	std	Z+2, r25	; 0x02
   1bdb4:	a3 83       	std	Z+3, r26	; 0x03
   1bdb6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    return(end);
   1bdba:	04 c0       	rjmp	.+8      	; 0x1bdc4 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bdbc:	0f ef       	ldi	r16, 0xFF	; 255
   1bdbe:	1f ef       	ldi	r17, 0xFF	; 255
   1bdc0:	df ef       	ldi	r29, 0xFF	; 255
   1bdc2:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bdc4:	b8 01       	movw	r22, r16
   1bdc6:	8d 2f       	mov	r24, r29
   1bdc8:	9c 2f       	mov	r25, r28
   1bdca:	ad b7       	in	r26, 0x3d	; 61
   1bdcc:	be b7       	in	r27, 0x3e	; 62
   1bdce:	17 96       	adiw	r26, 0x07	; 7
   1bdd0:	0f b6       	in	r0, 0x3f	; 63
   1bdd2:	f8 94       	cli
   1bdd4:	be bf       	out	0x3e, r27	; 62
   1bdd6:	0f be       	out	0x3f, r0	; 63
   1bdd8:	ad bf       	out	0x3d, r26	; 61
   1bdda:	df 91       	pop	r29
   1bddc:	cf 91       	pop	r28
   1bdde:	1f 91       	pop	r17
   1bde0:	0f 91       	pop	r16
   1bde2:	ff 90       	pop	r15
   1bde4:	ef 90       	pop	r14
   1bde6:	df 90       	pop	r13
   1bde8:	cf 90       	pop	r12
   1bdea:	bf 90       	pop	r11
   1bdec:	af 90       	pop	r10
   1bdee:	7f 90       	pop	r7
   1bdf0:	6f 90       	pop	r6
   1bdf2:	5f 90       	pop	r5
   1bdf4:	4f 90       	pop	r4
   1bdf6:	08 95       	ret

0001bdf8 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bdf8:	a5 e0       	ldi	r26, 0x05	; 5
   1bdfa:	b0 e0       	ldi	r27, 0x00	; 0
   1bdfc:	e1 e0       	ldi	r30, 0x01	; 1
   1bdfe:	ff ed       	ldi	r31, 0xDF	; 223
   1be00:	f1 c7       	rjmp	.+4066   	; 0x1cde4 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1be02:	82 30       	cpi	r24, 0x02	; 2
   1be04:	91 05       	cpc	r25, r1
   1be06:	1c f4       	brge	.+6      	; 0x1be0e <lif_tests+0x16>
        return (0);
   1be08:	80 e0       	ldi	r24, 0x00	; 0
   1be0a:	90 e0       	ldi	r25, 0x00	; 0
   1be0c:	8f c1       	rjmp	.+798    	; 0x1c12c <lif_tests+0x334>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1be0e:	fb 01       	movw	r30, r22
   1be10:	e2 80       	ldd	r14, Z+2	; 0x02
   1be12:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1be14:	e1 14       	cp	r14, r1
   1be16:	f1 04       	cpc	r15, r1
   1be18:	09 f4       	brne	.+2      	; 0x1be1c <lif_tests+0x24>
   1be1a:	86 c1       	rjmp	.+780    	; 0x1c128 <lif_tests+0x330>
   1be1c:	f7 01       	movw	r30, r14
   1be1e:	20 81       	ld	r18, Z
   1be20:	22 23       	and	r18, r18
   1be22:	09 f4       	brne	.+2      	; 0x1be26 <lif_tests+0x2e>
   1be24:	81 c1       	rjmp	.+770    	; 0x1c128 <lif_tests+0x330>
   1be26:	8b 01       	movw	r16, r22
   1be28:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1be2a:	63 eb       	ldi	r22, 0xB3	; 179
   1be2c:	76 e1       	ldi	r23, 0x16	; 22
   1be2e:	f8 01       	movw	r30, r16
   1be30:	80 81       	ld	r24, Z
   1be32:	91 81       	ldd	r25, Z+1	; 0x01
   1be34:	0e 94 96 32 	call	0x652c	; 0x652c <MATCHI_LEN>
   1be38:	89 2b       	or	r24, r25
   1be3a:	d1 f0       	breq	.+52     	; 0x1be70 <lif_tests+0x78>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be3c:	6d e6       	ldi	r22, 0x6D	; 109
   1be3e:	76 e1       	ldi	r23, 0x16	; 22
   1be40:	c7 01       	movw	r24, r14
   1be42:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1be46:	89 2b       	or	r24, r25
   1be48:	29 f0       	breq	.+10     	; 0x1be54 <lif_tests+0x5c>
		{
			lif_help(1);
   1be4a:	81 e0       	ldi	r24, 0x01	; 1
   1be4c:	90 e0       	ldi	r25, 0x00	; 0
   1be4e:	0e 94 c6 c0 	call	0x1818c	; 0x1818c <lif_help>
   1be52:	6a c1       	rjmp	.+724    	; 0x1c128 <lif_tests+0x330>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1be54:	6c e6       	ldi	r22, 0x6C	; 108
   1be56:	76 e1       	ldi	r23, 0x16	; 22
   1be58:	c7 01       	movw	r24, r14
   1be5a:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1be5e:	89 2b       	or	r24, r25
   1be60:	a1 f7       	brne	.-24     	; 0x1be4a <lif_tests+0x52>
   1be62:	62 e7       	ldi	r22, 0x72	; 114
   1be64:	76 e1       	ldi	r23, 0x16	; 22
   1be66:	c7 01       	movw	r24, r14
   1be68:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1be6c:	89 2b       	or	r24, r25
   1be6e:	69 f7       	brne	.-38     	; 0x1be4a <lif_tests+0x52>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1be70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1be74:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1be78:	9b 7f       	andi	r25, 0xFB	; 251
   1be7a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1be7e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1be82:	96 01       	movw	r18, r12
   1be84:	42 e0       	ldi	r20, 0x02	; 2
   1be86:	50 e0       	ldi	r21, 0x00	; 0
   1be88:	65 e7       	ldi	r22, 0x75	; 117
   1be8a:	76 e1       	ldi	r23, 0x16	; 22
   1be8c:	c7 01       	movw	r24, r14
   1be8e:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1be92:	89 2b       	or	r24, r25
   1be94:	79 f0       	breq	.+30     	; 0x1beb4 <lif_tests+0xbc>
    {
        debuglevel |= 0x400;
   1be96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1be9a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1be9e:	94 60       	ori	r25, 0x04	; 4
   1bea0:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bea4:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1bea8:	f8 01       	movw	r30, r16
   1beaa:	e4 80       	ldd	r14, Z+4	; 0x04
   1beac:	f5 80       	ldd	r15, Z+5	; 0x05
   1beae:	c3 e0       	ldi	r28, 0x03	; 3
   1beb0:	d0 e0       	ldi	r29, 0x00	; 0
   1beb2:	02 c0       	rjmp	.+4      	; 0x1beb8 <lif_tests+0xc0>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1beb4:	c2 e0       	ldi	r28, 0x02	; 2
   1beb6:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1beb8:	5e 01       	movw	r10, r28
   1beba:	f3 e0       	ldi	r31, 0x03	; 3
   1bebc:	af 0e       	add	r10, r31
   1bebe:	b1 1c       	adc	r11, r1
   1bec0:	96 01       	movw	r18, r12
   1bec2:	a5 01       	movw	r20, r10
   1bec4:	68 e7       	ldi	r22, 0x78	; 120
   1bec6:	76 e1       	ldi	r23, 0x16	; 22
   1bec8:	c7 01       	movw	r24, r14
   1beca:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1bece:	89 2b       	or	r24, r25
   1bed0:	61 f0       	breq	.+24     	; 0x1beea <lif_tests+0xf2>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bed2:	cc 0f       	add	r28, r28
   1bed4:	dd 1f       	adc	r29, r29
   1bed6:	c0 0f       	add	r28, r16
   1bed8:	d1 1f       	adc	r29, r17
   1beda:	4c 81       	ldd	r20, Y+4	; 0x04
   1bedc:	5d 81       	ldd	r21, Y+5	; 0x05
   1bede:	6a 81       	ldd	r22, Y+2	; 0x02
   1bee0:	7b 81       	ldd	r23, Y+3	; 0x03
   1bee2:	88 81       	ld	r24, Y
   1bee4:	99 81       	ldd	r25, Y+1	; 0x01
   1bee6:	63 dc       	rcall	.-1850   	; 0x1b7ae <lif_add_lif_file>
   1bee8:	1f c1       	rjmp	.+574    	; 0x1c128 <lif_tests+0x330>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1beea:	96 01       	movw	r18, r12
   1beec:	a5 01       	movw	r20, r10
   1beee:	6f e7       	ldi	r22, 0x7F	; 127
   1bef0:	76 e1       	ldi	r23, 0x16	; 22
   1bef2:	c7 01       	movw	r24, r14
   1bef4:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1bef8:	89 2b       	or	r24, r25
   1befa:	69 f0       	breq	.+26     	; 0x1bf16 <lif_tests+0x11e>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1befc:	cc 0f       	add	r28, r28
   1befe:	dd 1f       	adc	r29, r29
   1bf00:	c0 0f       	add	r28, r16
   1bf02:	d1 1f       	adc	r29, r17
   1bf04:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf06:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf08:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf0a:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf0c:	88 81       	ld	r24, Y
   1bf0e:	99 81       	ldd	r25, Y+1	; 0x01
   1bf10:	0e 94 b4 d6 	call	0x1ad68	; 0x1ad68 <lif_add_ascii_file_as_e010>
   1bf14:	09 c1       	rjmp	.+530    	; 0x1c128 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bf16:	96 01       	movw	r18, r12
   1bf18:	a5 01       	movw	r20, r10
   1bf1a:	63 e8       	ldi	r22, 0x83	; 131
   1bf1c:	76 e1       	ldi	r23, 0x16	; 22
   1bf1e:	c7 01       	movw	r24, r14
   1bf20:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1bf24:	89 2b       	or	r24, r25
   1bf26:	09 f4       	brne	.+2      	; 0x1bf2a <lif_tests+0x132>
   1bf28:	42 c0       	rjmp	.+132    	; 0x1bfae <lif_tests+0x1b6>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bf2a:	ce 01       	movw	r24, r28
   1bf2c:	88 0f       	add	r24, r24
   1bf2e:	99 1f       	adc	r25, r25
   1bf30:	e8 01       	movw	r28, r16
   1bf32:	c8 0f       	add	r28, r24
   1bf34:	d9 1f       	adc	r29, r25
   1bf36:	c8 80       	ld	r12, Y
   1bf38:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1bf3a:	aa 80       	ldd	r10, Y+2	; 0x02
   1bf3c:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1bf3e:	0c 80       	ldd	r0, Y+4	; 0x04
   1bf40:	dd 81       	ldd	r29, Y+5	; 0x05
   1bf42:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1bf44:	6e e8       	ldi	r22, 0x8E	; 142
   1bf46:	76 e1       	ldi	r23, 0x16	; 22
   1bf48:	ce 01       	movw	r24, r28
   1bf4a:	0e 94 96 32 	call	0x652c	; 0x652c <MATCHI_LEN>
   1bf4e:	89 2b       	or	r24, r25
   1bf50:	09 f0       	breq	.+2      	; 0x1bf54 <lif_tests+0x15c>
            model +=2;
   1bf52:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1bf54:	40 e0       	ldi	r20, 0x00	; 0
   1bf56:	50 e0       	ldi	r21, 0x00	; 0
   1bf58:	60 e0       	ldi	r22, 0x00	; 0
   1bf5a:	70 e0       	ldi	r23, 0x00	; 0
   1bf5c:	ce 01       	movw	r24, r28
   1bf5e:	0e 94 09 a4 	call	0x14812	; 0x14812 <hpdir_find_drive>
   1bf62:	89 2b       	or	r24, r25
   1bf64:	b9 f0       	breq	.+46     	; 0x1bf94 <lif_tests+0x19c>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1bf66:	60 91 24 20 	lds	r22, 0x2024	; 0x802024 <hpdir+0xac>
   1bf6a:	70 91 25 20 	lds	r23, 0x2025	; 0x802025 <hpdir+0xad>
   1bf6e:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <hpdir+0xae>
   1bf72:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <hpdir+0xaf>
   1bf76:	0e 94 ec a3 	call	0x147d8	; 0x147d8 <lif_dir_count>
   1bf7a:	9b 01       	movw	r18, r22
   1bf7c:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1bf7e:	e0 90 24 20 	lds	r14, 0x2024	; 0x802024 <hpdir+0xac>
   1bf82:	f0 90 25 20 	lds	r15, 0x2025	; 0x802025 <hpdir+0xad>
   1bf86:	00 91 26 20 	lds	r16, 0x2026	; 0x802026 <hpdir+0xae>
   1bf8a:	10 91 27 20 	lds	r17, 0x2027	; 0x802027 <hpdir+0xaf>
   1bf8e:	b5 01       	movw	r22, r10
   1bf90:	c6 01       	movw	r24, r12
   1bf92:	2e c0       	rjmp	.+92     	; 0x1bff0 <lif_tests+0x1f8>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1bf94:	ed b7       	in	r30, 0x3d	; 61
   1bf96:	fe b7       	in	r31, 0x3e	; 62
   1bf98:	d5 83       	std	Z+5, r29	; 0x05
   1bf9a:	c4 83       	std	Z+4, r28	; 0x04
   1bf9c:	8a ed       	ldi	r24, 0xDA	; 218
   1bf9e:	94 e4       	ldi	r25, 0x44	; 68
   1bfa0:	a0 e0       	ldi	r26, 0x00	; 0
   1bfa2:	81 83       	std	Z+1, r24	; 0x01
   1bfa4:	92 83       	std	Z+2, r25	; 0x02
   1bfa6:	a3 83       	std	Z+3, r26	; 0x03
   1bfa8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1bfac:	bd c0       	rjmp	.+378    	; 0x1c128 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bfae:	96 01       	movw	r18, r12
   1bfb0:	ae 01       	movw	r20, r28
   1bfb2:	4c 5f       	subi	r20, 0xFC	; 252
   1bfb4:	5f 4f       	sbci	r21, 0xFF	; 255
   1bfb6:	61 e9       	ldi	r22, 0x91	; 145
   1bfb8:	76 e1       	ldi	r23, 0x16	; 22
   1bfba:	c7 01       	movw	r24, r14
   1bfbc:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1bfc0:	89 2b       	or	r24, r25
   1bfc2:	c1 f0       	breq	.+48     	; 0x1bff4 <lif_tests+0x1fc>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bfc4:	cc 0f       	add	r28, r28
   1bfc6:	dd 1f       	adc	r29, r29
   1bfc8:	c0 0f       	add	r28, r16
   1bfca:	d1 1f       	adc	r29, r17
   1bfcc:	8c 81       	ldd	r24, Y+4	; 0x04
   1bfce:	9d 81       	ldd	r25, Y+5	; 0x05
   1bfd0:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <atol>
   1bfd4:	4b 01       	movw	r8, r22
   1bfd6:	5c 01       	movw	r10, r24
   1bfd8:	8e 81       	ldd	r24, Y+6	; 0x06
   1bfda:	9f 81       	ldd	r25, Y+7	; 0x07
   1bfdc:	0e 94 ab 47 	call	0x8f56	; 0x8f56 <atol>
   1bfe0:	7b 01       	movw	r14, r22
   1bfe2:	8c 01       	movw	r16, r24
   1bfe4:	6a 81       	ldd	r22, Y+2	; 0x02
   1bfe6:	7b 81       	ldd	r23, Y+3	; 0x03
   1bfe8:	a5 01       	movw	r20, r10
   1bfea:	94 01       	movw	r18, r8
   1bfec:	88 81       	ld	r24, Y
   1bfee:	99 81       	ldd	r25, Y+1	; 0x01
   1bff0:	7c de       	rcall	.-776    	; 0x1bcea <lif_create_image>
   1bff2:	9a c0       	rjmp	.+308    	; 0x1c128 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bff4:	96 01       	movw	r18, r12
   1bff6:	ae 01       	movw	r20, r28
   1bff8:	4e 5f       	subi	r20, 0xFE	; 254
   1bffa:	5f 4f       	sbci	r21, 0xFF	; 255
   1bffc:	68 e9       	ldi	r22, 0x98	; 152
   1bffe:	76 e1       	ldi	r23, 0x16	; 22
   1c000:	c7 01       	movw	r24, r14
   1c002:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1c006:	89 2b       	or	r24, r25
   1c008:	51 f0       	breq	.+20     	; 0x1c01e <lif_tests+0x226>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c00a:	cc 0f       	add	r28, r28
   1c00c:	dd 1f       	adc	r29, r29
   1c00e:	c0 0f       	add	r28, r16
   1c010:	d1 1f       	adc	r29, r17
   1c012:	6a 81       	ldd	r22, Y+2	; 0x02
   1c014:	7b 81       	ldd	r23, Y+3	; 0x03
   1c016:	88 81       	ld	r24, Y
   1c018:	99 81       	ldd	r25, Y+1	; 0x01
   1c01a:	52 dd       	rcall	.-1372   	; 0x1bac0 <lif_del_file>
   1c01c:	85 c0       	rjmp	.+266    	; 0x1c128 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c01e:	96 01       	movw	r18, r12
   1c020:	ae 01       	movw	r20, r28
   1c022:	4f 5f       	subi	r20, 0xFF	; 255
   1c024:	5f 4f       	sbci	r21, 0xFF	; 255
   1c026:	68 ed       	ldi	r22, 0xD8	; 216
   1c028:	7b e0       	ldi	r23, 0x0B	; 11
   1c02a:	c7 01       	movw	r24, r14
   1c02c:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1c030:	89 2b       	or	r24, r25
   1c032:	49 f0       	breq	.+18     	; 0x1c046 <lif_tests+0x24e>
    {
        lif_dir(argv[ind]);
   1c034:	cc 0f       	add	r28, r28
   1c036:	dd 1f       	adc	r29, r29
   1c038:	c0 0f       	add	r28, r16
   1c03a:	d1 1f       	adc	r29, r17
   1c03c:	88 81       	ld	r24, Y
   1c03e:	99 81       	ldd	r25, Y+1	; 0x01
   1c040:	0e 94 5e d2 	call	0x1a4bc	; 0x1a4bc <lif_dir>
   1c044:	71 c0       	rjmp	.+226    	; 0x1c128 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c046:	96 01       	movw	r18, r12
   1c048:	a5 01       	movw	r20, r10
   1c04a:	6c e9       	ldi	r22, 0x9C	; 156
   1c04c:	76 e1       	ldi	r23, 0x16	; 22
   1c04e:	c7 01       	movw	r24, r14
   1c050:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1c054:	89 2b       	or	r24, r25
   1c056:	71 f0       	breq	.+28     	; 0x1c074 <lif_tests+0x27c>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c058:	ce 01       	movw	r24, r28
   1c05a:	88 0f       	add	r24, r24
   1c05c:	99 1f       	adc	r25, r25
   1c05e:	e8 01       	movw	r28, r16
   1c060:	c8 0f       	add	r28, r24
   1c062:	d9 1f       	adc	r29, r25
   1c064:	4c 81       	ldd	r20, Y+4	; 0x04
   1c066:	5d 81       	ldd	r21, Y+5	; 0x05
   1c068:	6a 81       	ldd	r22, Y+2	; 0x02
   1c06a:	7b 81       	ldd	r23, Y+3	; 0x03
   1c06c:	88 81       	ld	r24, Y
   1c06e:	99 81       	ldd	r25, Y+1	; 0x01
   1c070:	66 da       	rcall	.-2868   	; 0x1b53e <lif_extract_lif_as_lif>
   1c072:	5a c0       	rjmp	.+180    	; 0x1c128 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c074:	96 01       	movw	r18, r12
   1c076:	a5 01       	movw	r20, r10
   1c078:	67 ea       	ldi	r22, 0xA7	; 167
   1c07a:	76 e1       	ldi	r23, 0x16	; 22
   1c07c:	c7 01       	movw	r24, r14
   1c07e:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1c082:	89 2b       	or	r24, r25
   1c084:	79 f0       	breq	.+30     	; 0x1c0a4 <lif_tests+0x2ac>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c086:	ce 01       	movw	r24, r28
   1c088:	88 0f       	add	r24, r24
   1c08a:	99 1f       	adc	r25, r25
   1c08c:	e8 01       	movw	r28, r16
   1c08e:	c8 0f       	add	r28, r24
   1c090:	d9 1f       	adc	r29, r25
   1c092:	4c 81       	ldd	r20, Y+4	; 0x04
   1c094:	5d 81       	ldd	r21, Y+5	; 0x05
   1c096:	6a 81       	ldd	r22, Y+2	; 0x02
   1c098:	7b 81       	ldd	r23, Y+3	; 0x03
   1c09a:	88 81       	ld	r24, Y
   1c09c:	99 81       	ldd	r25, Y+1	; 0x01
   1c09e:	0e 94 f0 d7 	call	0x1afe0	; 0x1afe0 <lif_extract_e010_as_ascii>
   1c0a2:	42 c0       	rjmp	.+132    	; 0x1c128 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c0a4:	96 01       	movw	r18, r12
   1c0a6:	a5 01       	movw	r20, r10
   1c0a8:	65 ee       	ldi	r22, 0xE5	; 229
   1c0aa:	7b e0       	ldi	r23, 0x0B	; 11
   1c0ac:	c7 01       	movw	r24, r14
   1c0ae:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <MATCHARGS>
   1c0b2:	89 2b       	or	r24, r25
   1c0b4:	71 f0       	breq	.+28     	; 0x1c0d2 <lif_tests+0x2da>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c0b6:	ce 01       	movw	r24, r28
   1c0b8:	88 0f       	add	r24, r24
   1c0ba:	99 1f       	adc	r25, r25
   1c0bc:	e8 01       	movw	r28, r16
   1c0be:	c8 0f       	add	r28, r24
   1c0c0:	d9 1f       	adc	r29, r25
   1c0c2:	4c 81       	ldd	r20, Y+4	; 0x04
   1c0c4:	5d 81       	ldd	r21, Y+5	; 0x05
   1c0c6:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0c8:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0ca:	88 81       	ld	r24, Y
   1c0cc:	99 81       	ldd	r25, Y+1	; 0x01
   1c0ce:	8e dd       	rcall	.-1252   	; 0x1bbec <lif_rename_file>
   1c0d0:	2b c0       	rjmp	.+86     	; 0x1c128 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c0d2:	6f ea       	ldi	r22, 0xAF	; 175
   1c0d4:	76 e1       	ldi	r23, 0x16	; 22
   1c0d6:	f8 01       	movw	r30, r16
   1c0d8:	80 81       	ld	r24, Z
   1c0da:	91 81       	ldd	r25, Z+1	; 0x01
   1c0dc:	0e 94 96 32 	call	0x652c	; 0x652c <MATCHI_LEN>
   1c0e0:	89 2b       	or	r24, r25
   1c0e2:	09 f4       	brne	.+2      	; 0x1c0e6 <lif_tests+0x2ee>
   1c0e4:	91 ce       	rjmp	.-734    	; 0x1be08 <lif_tests+0x10>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c0e6:	6d e6       	ldi	r22, 0x6D	; 109
   1c0e8:	76 e1       	ldi	r23, 0x16	; 22
   1c0ea:	c7 01       	movw	r24, r14
   1c0ec:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c0f0:	89 2b       	or	r24, r25
   1c0f2:	59 f0       	breq	.+22     	; 0x1c10a <lif_tests+0x312>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c0f4:	8d eb       	ldi	r24, 0xBD	; 189
   1c0f6:	94 e4       	ldi	r25, 0x44	; 68
   1c0f8:	a0 e0       	ldi	r26, 0x00	; 0
   1c0fa:	ed b7       	in	r30, 0x3d	; 61
   1c0fc:	fe b7       	in	r31, 0x3e	; 62
   1c0fe:	81 83       	std	Z+1, r24	; 0x01
   1c100:	92 83       	std	Z+2, r25	; 0x02
   1c102:	a3 83       	std	Z+3, r26	; 0x03
   1c104:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1c108:	0f c0       	rjmp	.+30     	; 0x1c128 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c10a:	6c e6       	ldi	r22, 0x6C	; 108
   1c10c:	76 e1       	ldi	r23, 0x16	; 22
   1c10e:	c7 01       	movw	r24, r14
   1c110:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c114:	89 2b       	or	r24, r25
   1c116:	71 f7       	brne	.-36     	; 0x1c0f4 <lif_tests+0x2fc>
   1c118:	62 e7       	ldi	r22, 0x72	; 114
   1c11a:	76 e1       	ldi	r23, 0x16	; 22
   1c11c:	c7 01       	movw	r24, r14
   1c11e:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c122:	89 2b       	or	r24, r25
   1c124:	39 f7       	brne	.-50     	; 0x1c0f4 <lif_tests+0x2fc>
   1c126:	70 ce       	rjmp	.-800    	; 0x1be08 <lif_tests+0x10>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c128:	81 e0       	ldi	r24, 0x01	; 1
   1c12a:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c12c:	cd b7       	in	r28, 0x3d	; 61
   1c12e:	de b7       	in	r29, 0x3e	; 62
   1c130:	25 96       	adiw	r28, 0x05	; 5
   1c132:	ec e0       	ldi	r30, 0x0C	; 12
   1c134:	73 c6       	rjmp	.+3302   	; 0x1ce1c <__epilogue_restores__+0xc>

0001c136 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c136:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <lcd_display_time>
   1c13a:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c13e:	01 96       	adiw	r24, 0x01	; 1
   1c140:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <lcd_display_time+0x1>
   1c144:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <lcd_display_time>
   1c148:	08 95       	ret

0001c14a <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c14a:	00 d0       	rcall	.+0      	; 0x1c14c <copyright+0x2>
   1c14c:	00 d0       	rcall	.+0      	; 0x1c14e <copyright+0x4>
   1c14e:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1c150:	87 eb       	ldi	r24, 0xB7	; 183
   1c152:	9b e4       	ldi	r25, 0x4B	; 75
   1c154:	a0 e0       	ldi	r26, 0x00	; 0
   1c156:	ed b7       	in	r30, 0x3d	; 61
   1c158:	fe b7       	in	r31, 0x3e	; 62
   1c15a:	81 83       	std	Z+1, r24	; 0x01
   1c15c:	92 83       	std	Z+2, r25	; 0x02
   1c15e:	a3 83       	std	Z+3, r26	; 0x03
   1c160:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c164:	88 e9       	ldi	r24, 0x98	; 152
   1c166:	9b e4       	ldi	r25, 0x4B	; 75
   1c168:	a0 e0       	ldi	r26, 0x00	; 0
   1c16a:	ed b7       	in	r30, 0x3d	; 61
   1c16c:	fe b7       	in	r31, 0x3e	; 62
   1c16e:	81 83       	std	Z+1, r24	; 0x01
   1c170:	92 83       	std	Z+2, r25	; 0x02
   1c172:	a3 83       	std	Z+3, r26	; 0x03
   1c174:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c178:	8b e7       	ldi	r24, 0x7B	; 123
   1c17a:	9b e4       	ldi	r25, 0x4B	; 75
   1c17c:	a0 e0       	ldi	r26, 0x00	; 0
   1c17e:	ed b7       	in	r30, 0x3d	; 61
   1c180:	fe b7       	in	r31, 0x3e	; 62
   1c182:	81 83       	std	Z+1, r24	; 0x01
   1c184:	92 83       	std	Z+2, r25	; 0x02
   1c186:	a3 83       	std	Z+3, r26	; 0x03
   1c188:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf(" GNU version 3\n");
   1c18c:	8b e6       	ldi	r24, 0x6B	; 107
   1c18e:	9b e4       	ldi	r25, 0x4B	; 75
   1c190:	a0 e0       	ldi	r26, 0x00	; 0
   1c192:	ed b7       	in	r30, 0x3d	; 61
   1c194:	fe b7       	in	r31, 0x3e	; 62
   1c196:	81 83       	std	Z+1, r24	; 0x01
   1c198:	92 83       	std	Z+2, r25	; 0x02
   1c19a:	a3 83       	std	Z+3, r26	; 0x03
   1c19c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c1a0:	84 e4       	ldi	r24, 0x44	; 68
   1c1a2:	9b e4       	ldi	r25, 0x4B	; 75
   1c1a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1a6:	ed b7       	in	r30, 0x3d	; 61
   1c1a8:	fe b7       	in	r31, 0x3e	; 62
   1c1aa:	81 83       	std	Z+1, r24	; 0x01
   1c1ac:	92 83       	std	Z+2, r25	; 0x02
   1c1ae:	a3 83       	std	Z+3, r26	; 0x03
   1c1b0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c1b4:	87 eb       	ldi	r24, 0xB7	; 183
   1c1b6:	96 e1       	ldi	r25, 0x16	; 22
   1c1b8:	ed b7       	in	r30, 0x3d	; 61
   1c1ba:	fe b7       	in	r31, 0x3e	; 62
   1c1bc:	95 83       	std	Z+5, r25	; 0x05
   1c1be:	84 83       	std	Z+4, r24	; 0x04
   1c1c0:	8a e2       	ldi	r24, 0x2A	; 42
   1c1c2:	9b e4       	ldi	r25, 0x4B	; 75
   1c1c4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1c6:	81 83       	std	Z+1, r24	; 0x01
   1c1c8:	92 83       	std	Z+2, r25	; 0x02
   1c1ca:	a3 83       	std	Z+3, r26	; 0x03
   1c1cc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c1d0:	8b ed       	ldi	r24, 0xDB	; 219
   1c1d2:	96 e1       	ldi	r25, 0x16	; 22
   1c1d4:	ed b7       	in	r30, 0x3d	; 61
   1c1d6:	fe b7       	in	r31, 0x3e	; 62
   1c1d8:	95 83       	std	Z+5, r25	; 0x05
   1c1da:	84 83       	std	Z+4, r24	; 0x04
   1c1dc:	80 e1       	ldi	r24, 0x10	; 16
   1c1de:	9b e4       	ldi	r25, 0x4B	; 75
   1c1e0:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e2:	81 83       	std	Z+1, r24	; 0x01
   1c1e4:	92 83       	std	Z+2, r25	; 0x02
   1c1e6:	a3 83       	std	Z+3, r26	; 0x03
   1c1e8:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("\n");
   1c1ec:	8e e0       	ldi	r24, 0x0E	; 14
   1c1ee:	9b e4       	ldi	r25, 0x4B	; 75
   1c1f0:	a0 e0       	ldi	r26, 0x00	; 0
   1c1f2:	ed b7       	in	r30, 0x3d	; 61
   1c1f4:	fe b7       	in	r31, 0x3e	; 62
   1c1f6:	81 83       	std	Z+1, r24	; 0x01
   1c1f8:	92 83       	std	Z+2, r25	; 0x02
   1c1fa:	a3 83       	std	Z+3, r26	; 0x03
   1c1fc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
}
   1c200:	0f 90       	pop	r0
   1c202:	0f 90       	pop	r0
   1c204:	0f 90       	pop	r0
   1c206:	0f 90       	pop	r0
   1c208:	0f 90       	pop	r0
   1c20a:	08 95       	ret

0001c20c <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c20c:	a1 e1       	ldi	r26, 0x11	; 17
   1c20e:	b0 e0       	ldi	r27, 0x00	; 0
   1c210:	eb e0       	ldi	r30, 0x0B	; 11
   1c212:	f1 ee       	ldi	r31, 0xE1	; 225
   1c214:	ed c5       	rjmp	.+3034   	; 0x1cdf0 <__prologue_saves__+0x18>
   1c216:	ec 01       	movw	r28, r24
   1c218:	7b 01       	movw	r14, r22
   1c21a:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c21c:	60 e0       	ldi	r22, 0x00	; 0
   1c21e:	70 e0       	ldi	r23, 0x00	; 0
   1c220:	0e 94 aa 38 	call	0x7154	; 0x7154 <normalize>
    memset(buf,0,max);
   1c224:	a8 01       	movw	r20, r16
   1c226:	60 e0       	ldi	r22, 0x00	; 0
   1c228:	70 e0       	ldi	r23, 0x00	; 0
   1c22a:	c7 01       	movw	r24, r14
   1c22c:	0e 94 e4 ea 	call	0x1d5c8	; 0x1d5c8 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c230:	88 85       	ldd	r24, Y+8	; 0x08
   1c232:	99 85       	ldd	r25, Y+9	; 0x09
   1c234:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <tm_mon_to_ascii>
   1c238:	28 81       	ld	r18, Y
   1c23a:	39 81       	ldd	r19, Y+1	; 0x01
   1c23c:	ed b7       	in	r30, 0x3d	; 61
   1c23e:	fe b7       	in	r31, 0x3e	; 62
   1c240:	31 8b       	std	Z+17, r19	; 0x11
   1c242:	20 8b       	std	Z+16, r18	; 0x10
   1c244:	2a 81       	ldd	r18, Y+2	; 0x02
   1c246:	3b 81       	ldd	r19, Y+3	; 0x03
   1c248:	37 87       	std	Z+15, r19	; 0x0f
   1c24a:	26 87       	std	Z+14, r18	; 0x0e
   1c24c:	2c 81       	ldd	r18, Y+4	; 0x04
   1c24e:	3d 81       	ldd	r19, Y+5	; 0x05
   1c250:	35 87       	std	Z+13, r19	; 0x0d
   1c252:	24 87       	std	Z+12, r18	; 0x0c
   1c254:	2e 81       	ldd	r18, Y+6	; 0x06
   1c256:	3f 81       	ldd	r19, Y+7	; 0x07
   1c258:	33 87       	std	Z+11, r19	; 0x0b
   1c25a:	22 87       	std	Z+10, r18	; 0x0a
   1c25c:	91 87       	std	Z+9, r25	; 0x09
   1c25e:	80 87       	std	Z+8, r24	; 0x08
   1c260:	88 ef       	ldi	r24, 0xF8	; 248
   1c262:	9a e4       	ldi	r25, 0x4A	; 74
   1c264:	a0 e0       	ldi	r26, 0x00	; 0
   1c266:	85 83       	std	Z+5, r24	; 0x05
   1c268:	96 83       	std	Z+6, r25	; 0x06
   1c26a:	a7 83       	std	Z+7, r26	; 0x07
   1c26c:	01 50       	subi	r16, 0x01	; 1
   1c26e:	11 09       	sbc	r17, r1
   1c270:	14 83       	std	Z+4, r17	; 0x04
   1c272:	03 83       	std	Z+3, r16	; 0x03
   1c274:	f2 82       	std	Z+2, r15	; 0x02
   1c276:	e1 82       	std	Z+1, r14	; 0x01
   1c278:	0e 94 e3 46 	call	0x8dc6	; 0x8dc6 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c27c:	c7 01       	movw	r24, r14
   1c27e:	cd b7       	in	r28, 0x3d	; 61
   1c280:	de b7       	in	r29, 0x3e	; 62
   1c282:	61 96       	adiw	r28, 0x11	; 17
   1c284:	e6 e0       	ldi	r30, 0x06	; 6
   1c286:	d0 c5       	rjmp	.+2976   	; 0x1ce28 <__epilogue_restores__+0x18>

0001c288 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c288:	cf 93       	push	r28
   1c28a:	00 d0       	rcall	.+0      	; 0x1c28c <lcd_backlight+0x4>
   1c28c:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c28e:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c292:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c296:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c29a:	25 e0       	ldi	r18, 0x05	; 5
   1c29c:	40 ef       	ldi	r20, 0xF0	; 240
   1c29e:	52 e0       	ldi	r21, 0x02	; 2
   1c2a0:	60 e0       	ldi	r22, 0x00	; 0
   1c2a2:	82 e7       	ldi	r24, 0x72	; 114
   1c2a4:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <i2c_fn>
   1c2a8:	c8 2f       	mov	r28, r24
   1c2aa:	81 11       	cpse	r24, r1
   1c2ac:	0d c0       	rjmp	.+26     	; 0x1c2c8 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c2ae:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c2b2:	8e ed       	ldi	r24, 0xDE	; 222
   1c2b4:	9a e4       	ldi	r25, 0x4A	; 74
   1c2b6:	a0 e0       	ldi	r26, 0x00	; 0
   1c2b8:	ed b7       	in	r30, 0x3d	; 61
   1c2ba:	fe b7       	in	r31, 0x3e	; 62
   1c2bc:	81 83       	std	Z+1, r24	; 0x01
   1c2be:	92 83       	std	Z+2, r25	; 0x02
   1c2c0:	a3 83       	std	Z+3, r26	; 0x03
   1c2c2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1c2c6:	01 c0       	rjmp	.+2      	; 0x1c2ca <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c2c8:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c2ca:	8c 2f       	mov	r24, r28
   1c2cc:	0f 90       	pop	r0
   1c2ce:	0f 90       	pop	r0
   1c2d0:	0f 90       	pop	r0
   1c2d2:	cf 91       	pop	r28
   1c2d4:	08 95       	ret

0001c2d6 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c2d6:	cf 93       	push	r28
   1c2d8:	ad b7       	in	r26, 0x3d	; 61
   1c2da:	be b7       	in	r27, 0x3e	; 62
   1c2dc:	17 97       	sbiw	r26, 0x07	; 7
   1c2de:	0f b6       	in	r0, 0x3f	; 63
   1c2e0:	f8 94       	cli
   1c2e2:	be bf       	out	0x3e, r27	; 62
   1c2e4:	0f be       	out	0x3f, r0	; 63
   1c2e6:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c2e8:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c2ea:	80 ec       	ldi	r24, 0xC0	; 192
   1c2ec:	9a e4       	ldi	r25, 0x4A	; 74
   1c2ee:	a0 e0       	ldi	r26, 0x00	; 0
   1c2f0:	ed b7       	in	r30, 0x3d	; 61
   1c2f2:	fe b7       	in	r31, 0x3e	; 62
   1c2f4:	81 83       	std	Z+1, r24	; 0x01
   1c2f6:	92 83       	std	Z+2, r25	; 0x02
   1c2f8:	a3 83       	std	Z+3, r26	; 0x03
   1c2fa:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c2fe:	61 e0       	ldi	r22, 0x01	; 1
   1c300:	70 e0       	ldi	r23, 0x00	; 0
   1c302:	8b e9       	ldi	r24, 0x9B	; 155
   1c304:	90 ee       	ldi	r25, 0xE0	; 224
   1c306:	0e 94 b9 34 	call	0x6972	; 0x6972 <set_timers>
   1c30a:	01 96       	adiw	r24, 0x01	; 1
   1c30c:	51 f4       	brne	.+20     	; 0x1c322 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c30e:	8a ea       	ldi	r24, 0xAA	; 170
   1c310:	9a e4       	ldi	r25, 0x4A	; 74
   1c312:	a0 e0       	ldi	r26, 0x00	; 0
   1c314:	ed b7       	in	r30, 0x3d	; 61
   1c316:	fe b7       	in	r31, 0x3e	; 62
   1c318:	81 83       	std	Z+1, r24	; 0x01
   1c31a:	92 83       	std	Z+2, r25	; 0x02
   1c31c:	a3 83       	std	Z+3, r26	; 0x03
   1c31e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

	i2c_init(100000);
   1c322:	60 ea       	ldi	r22, 0xA0	; 160
   1c324:	76 e8       	ldi	r23, 0x86	; 134
   1c326:	81 e0       	ldi	r24, 0x01	; 1
   1c328:	90 e0       	ldi	r25, 0x00	; 0
   1c32a:	0e 94 29 2c 	call	0x5852	; 0x5852 <i2c_init>

	i2c_task_init();
   1c32e:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <i2c_task_init>

	cli();
   1c332:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c334:	8f ef       	ldi	r24, 0xFF	; 255
   1c336:	96 e1       	ldi	r25, 0x16	; 22
   1c338:	ed b7       	in	r30, 0x3d	; 61
   1c33a:	fe b7       	in	r31, 0x3e	; 62
   1c33c:	97 83       	std	Z+7, r25	; 0x07
   1c33e:	86 83       	std	Z+6, r24	; 0x06
   1c340:	84 ea       	ldi	r24, 0xA4	; 164
   1c342:	9a e4       	ldi	r25, 0x4A	; 74
   1c344:	a0 e0       	ldi	r26, 0x00	; 0
   1c346:	83 83       	std	Z+3, r24	; 0x03
   1c348:	94 83       	std	Z+4, r25	; 0x04
   1c34a:	a5 83       	std	Z+5, r26	; 0x05
   1c34c:	8c e0       	ldi	r24, 0x0C	; 12
   1c34e:	93 e0       	ldi	r25, 0x03	; 3
   1c350:	92 83       	std	Z+2, r25	; 0x02
   1c352:	81 83       	std	Z+1, r24	; 0x01
   1c354:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c358:	8b e0       	ldi	r24, 0x0B	; 11
   1c35a:	97 e1       	ldi	r25, 0x17	; 23
   1c35c:	ed b7       	in	r30, 0x3d	; 61
   1c35e:	fe b7       	in	r31, 0x3e	; 62
   1c360:	97 83       	std	Z+7, r25	; 0x07
   1c362:	86 83       	std	Z+6, r24	; 0x06
   1c364:	8e e9       	ldi	r24, 0x9E	; 158
   1c366:	9a e4       	ldi	r25, 0x4A	; 74
   1c368:	a0 e0       	ldi	r26, 0x00	; 0
   1c36a:	83 83       	std	Z+3, r24	; 0x03
   1c36c:	94 83       	std	Z+4, r25	; 0x04
   1c36e:	a5 83       	std	Z+5, r26	; 0x05
   1c370:	85 ef       	ldi	r24, 0xF5	; 245
   1c372:	92 e0       	ldi	r25, 0x02	; 2
   1c374:	92 83       	std	Z+2, r25	; 0x02
   1c376:	81 83       	std	Z+1, r24	; 0x01
   1c378:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c37c:	22 e0       	ldi	r18, 0x02	; 2
   1c37e:	41 e2       	ldi	r20, 0x21	; 33
   1c380:	53 e0       	ldi	r21, 0x03	; 3
   1c382:	60 e0       	ldi	r22, 0x00	; 0
   1c384:	82 e7       	ldi	r24, 0x72	; 114
   1c386:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <i2c_task_op_add>
   1c38a:	90 93 57 17 	sts	0x1757, r25	; 0x801757 <i2c_task_op+0x1>
   1c38e:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c392:	20 e1       	ldi	r18, 0x10	; 16
   1c394:	4c e0       	ldi	r20, 0x0C	; 12
   1c396:	53 e0       	ldi	r21, 0x03	; 3
   1c398:	60 e0       	ldi	r22, 0x00	; 0
   1c39a:	82 e7       	ldi	r24, 0x72	; 114
   1c39c:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <i2c_task_op_add>
   1c3a0:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <i2c_task_op+0x3>
   1c3a4:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c3a8:	22 e0       	ldi	r18, 0x02	; 2
   1c3aa:	4a e0       	ldi	r20, 0x0A	; 10
   1c3ac:	53 e0       	ldi	r21, 0x03	; 3
   1c3ae:	60 e0       	ldi	r22, 0x00	; 0
   1c3b0:	82 e7       	ldi	r24, 0x72	; 114
   1c3b2:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <i2c_task_op_add>
   1c3b6:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x5>
   1c3ba:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c3be:	20 e1       	ldi	r18, 0x10	; 16
   1c3c0:	45 ef       	ldi	r20, 0xF5	; 245
   1c3c2:	52 e0       	ldi	r21, 0x02	; 2
   1c3c4:	60 e0       	ldi	r22, 0x00	; 0
   1c3c6:	82 e7       	ldi	r24, 0x72	; 114
   1c3c8:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <i2c_task_op_add>
   1c3cc:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <i2c_task_op+0x7>
   1c3d0:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <i2c_task_op+0x6>

	SREG = sreg;
   1c3d4:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c3d6:	0e 94 bf 2c 	call	0x597e	; 0x597e <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c3da:	68 ee       	ldi	r22, 0xE8	; 232
   1c3dc:	73 e0       	ldi	r23, 0x03	; 3
   1c3de:	80 e0       	ldi	r24, 0x00	; 0
   1c3e0:	90 e0       	ldi	r25, 0x00	; 0
   1c3e2:	0e 94 65 28 	call	0x50ca	; 0x50ca <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c3e6:	0e 94 a0 2c 	call	0x5940	; 0x5940 <i2c_task_done>
   1c3ea:	81 11       	cpse	r24, r1
   1c3ec:	0c c0       	rjmp	.+24     	; 0x1c406 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c3ee:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c3f2:	84 e8       	ldi	r24, 0x84	; 132
   1c3f4:	9a e4       	ldi	r25, 0x4A	; 74
   1c3f6:	a0 e0       	ldi	r26, 0x00	; 0
   1c3f8:	ed b7       	in	r30, 0x3d	; 61
   1c3fa:	fe b7       	in	r31, 0x3e	; 62
   1c3fc:	81 83       	std	Z+1, r24	; 0x01
   1c3fe:	92 83       	std	Z+2, r25	; 0x02
   1c400:	a3 83       	std	Z+3, r26	; 0x03
   1c402:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	}

    sep();
   1c406:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
}
   1c40a:	ad b7       	in	r26, 0x3d	; 61
   1c40c:	be b7       	in	r27, 0x3e	; 62
   1c40e:	17 96       	adiw	r26, 0x07	; 7
   1c410:	0f b6       	in	r0, 0x3f	; 63
   1c412:	f8 94       	cli
   1c414:	be bf       	out	0x3e, r27	; 62
   1c416:	0f be       	out	0x3f, r0	; 63
   1c418:	ad bf       	out	0x3d, r26	; 61
   1c41a:	cf 91       	pop	r28
   1c41c:	08 95       	ret

0001c41e <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c41e:	af e2       	ldi	r26, 0x2F	; 47
   1c420:	b0 e0       	ldi	r27, 0x00	; 0
   1c422:	e4 e1       	ldi	r30, 0x14	; 20
   1c424:	f2 ee       	ldi	r31, 0xE2	; 226
   1c426:	e7 c4       	rjmp	.+2510   	; 0x1cdf6 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c428:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c42a:	f8 94       	cli
	if(!mmc_ins_status())
   1c42c:	0e 94 f9 6e 	call	0xddf2	; 0xddf2 <mmc_ins_status>
   1c430:	89 2b       	or	r24, r25
   1c432:	49 f4       	brne	.+18     	; 0x1c446 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c434:	88 e1       	ldi	r24, 0x18	; 24
   1c436:	97 e1       	ldi	r25, 0x17	; 23
   1c438:	ed b7       	in	r30, 0x3d	; 61
   1c43a:	fe b7       	in	r31, 0x3e	; 62
   1c43c:	97 83       	std	Z+7, r25	; 0x07
   1c43e:	86 83       	std	Z+6, r24	; 0x06
   1c440:	8e e7       	ldi	r24, 0x7E	; 126
   1c442:	9a e4       	ldi	r25, 0x4A	; 74
   1c444:	17 c0       	rjmp	.+46     	; 0x1c474 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c446:	be 01       	movw	r22, r28
   1c448:	68 5d       	subi	r22, 0xD8	; 216
   1c44a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c44c:	80 e0       	ldi	r24, 0x00	; 0
   1c44e:	90 e0       	ldi	r25, 0x00	; 0
   1c450:	0e 94 c9 33 	call	0x6792	; 0x6792 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c454:	ce 01       	movw	r24, r28
   1c456:	88 96       	adiw	r24, 0x28	; 40
   1c458:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <gmtime>
   1c45c:	4f e1       	ldi	r20, 0x1F	; 31
   1c45e:	50 e0       	ldi	r21, 0x00	; 0
   1c460:	be 01       	movw	r22, r28
   1c462:	68 5f       	subi	r22, 0xF8	; 248
   1c464:	7f 4f       	sbci	r23, 0xFF	; 255
   1c466:	d2 de       	rcall	.-604    	; 0x1c20c <lcd_time>
   1c468:	ed b7       	in	r30, 0x3d	; 61
   1c46a:	fe b7       	in	r31, 0x3e	; 62
   1c46c:	97 83       	std	Z+7, r25	; 0x07
   1c46e:	86 83       	std	Z+6, r24	; 0x06
   1c470:	88 e7       	ldi	r24, 0x78	; 120
   1c472:	9a e4       	ldi	r25, 0x4A	; 74
   1c474:	a0 e0       	ldi	r26, 0x00	; 0
   1c476:	83 83       	std	Z+3, r24	; 0x03
   1c478:	94 83       	std	Z+4, r25	; 0x04
   1c47a:	a5 83       	std	Z+5, r26	; 0x05
   1c47c:	85 ef       	ldi	r24, 0xF5	; 245
   1c47e:	92 e0       	ldi	r25, 0x02	; 2
   1c480:	92 83       	std	Z+2, r25	; 0x02
   1c482:	81 83       	std	Z+1, r24	; 0x01
   1c484:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c488:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c48a:	0e 94 bf 2c 	call	0x597e	; 0x597e <i2c_task_run>
}
   1c48e:	af 96       	adiw	r28, 0x2f	; 47
   1c490:	e3 e0       	ldi	r30, 0x03	; 3
   1c492:	cd c4       	rjmp	.+2458   	; 0x1ce2e <__epilogue_restores__+0x1e>

0001c494 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c494:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c496:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c498:	20 91 ea 19 	lds	r18, 0x19EA	; 0x8019ea <lcd_display_time>
   1c49c:	30 91 eb 19 	lds	r19, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1c4a0:	25 36       	cpi	r18, 0x65	; 101
   1c4a2:	31 05       	cpc	r19, r1
   1c4a4:	3c f0       	brlt	.+14     	; 0x1c4b4 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c4a6:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <lcd_display_time+0x1>
   1c4aa:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <lcd_display_time>
		SREG = sreg;
   1c4ae:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c4b0:	b6 cf       	rjmp	.-148    	; 0x1c41e <i2c_lcd_task>
		return;
   1c4b2:	08 95       	ret
	}
	SREG = sreg;
   1c4b4:	8f bf       	out	0x3f, r24	; 63
   1c4b6:	08 95       	ret

0001c4b8 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c4b8:	00 d0       	rcall	.+0      	; 0x1c4ba <help+0x2>
   1c4ba:	1f 92       	push	r1

    copyright();
   1c4bc:	46 de       	rcall	.-884    	; 0x1c14a <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c4be:	80 e0       	ldi	r24, 0x00	; 0
   1c4c0:	90 e0       	ldi	r25, 0x00	; 0
   1c4c2:	0e 94 20 73 	call	0xe640	; 0xe640 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c4c6:	80 e0       	ldi	r24, 0x00	; 0
   1c4c8:	90 e0       	ldi	r25, 0x00	; 0
   1c4ca:	0e 94 76 7e 	call	0xfcec	; 0xfcec <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c4ce:	80 e0       	ldi	r24, 0x00	; 0
   1c4d0:	90 e0       	ldi	r25, 0x00	; 0
   1c4d2:	0e 94 c6 c0 	call	0x1818c	; 0x1818c <lif_help>
#endif
#ifdef TELEDISK
    td0_help(0);
#endif

    gpib_help(0);
   1c4d6:	80 e0       	ldi	r24, 0x00	; 0
   1c4d8:	90 e0       	ldi	r25, 0x00	; 0
   1c4da:	0e 94 d7 91 	call	0x123ae	; 0x123ae <gpib_help>

    printf(
   1c4de:	87 eb       	ldi	r24, 0xB7	; 183
   1c4e0:	99 e4       	ldi	r25, 0x49	; 73
   1c4e2:	a0 e0       	ldi	r26, 0x00	; 0
   1c4e4:	ed b7       	in	r30, 0x3d	; 61
   1c4e6:	fe b7       	in	r31, 0x3e	; 62
   1c4e8:	81 83       	std	Z+1, r24	; 0x01
   1c4ea:	92 83       	std	Z+2, r25	; 0x02
   1c4ec:	a3 83       	std	Z+3, r26	; 0x03
   1c4ee:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1c4f2:	0f 90       	pop	r0
   1c4f4:	0f 90       	pop	r0
   1c4f6:	0f 90       	pop	r0
   1c4f8:	08 95       	ret

0001c4fa <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c4fa:	6f 92       	push	r6
   1c4fc:	7f 92       	push	r7
   1c4fe:	8f 92       	push	r8
   1c500:	cf 92       	push	r12
   1c502:	df 92       	push	r13
   1c504:	ef 92       	push	r14
   1c506:	ff 92       	push	r15
   1c508:	0f 93       	push	r16
   1c50a:	1f 93       	push	r17
   1c50c:	cf 93       	push	r28
   1c50e:	df 93       	push	r29
   1c510:	cd b7       	in	r28, 0x3d	; 61
   1c512:	de b7       	in	r29, 0x3e	; 62
   1c514:	cb 56       	subi	r28, 0x6B	; 107
   1c516:	d1 40       	sbci	r29, 0x01	; 1
   1c518:	0f b6       	in	r0, 0x3f	; 63
   1c51a:	f8 94       	cli
   1c51c:	de bf       	out	0x3e, r29	; 62
   1c51e:	0f be       	out	0x3f, r0	; 63
   1c520:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c522:	84 eb       	ldi	r24, 0xB4	; 180
   1c524:	99 e4       	ldi	r25, 0x49	; 73
   1c526:	a0 e0       	ldi	r26, 0x00	; 0
   1c528:	ed b7       	in	r30, 0x3d	; 61
   1c52a:	fe b7       	in	r31, 0x3e	; 62
   1c52c:	81 83       	std	Z+1, r24	; 0x01
   1c52e:	92 83       	std	Z+2, r25	; 0x02
   1c530:	a3 83       	std	Z+3, r26	; 0x03
   1c532:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c536:	8e 01       	movw	r16, r28
   1c538:	0a 5f       	subi	r16, 0xFA	; 250
   1c53a:	1f 4f       	sbci	r17, 0xFF	; 255
   1c53c:	8f ef       	ldi	r24, 0xFF	; 255
   1c53e:	f8 01       	movw	r30, r16
   1c540:	11 92       	st	Z+, r1
   1c542:	8a 95       	dec	r24
   1c544:	e9 f7       	brne	.-6      	; 0x1c540 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1c546:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
   1c54a:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
   1c54e:	6e ef       	ldi	r22, 0xFE	; 254
   1c550:	70 e0       	ldi	r23, 0x00	; 0
   1c552:	c8 01       	movw	r24, r16
   1c554:	0e 94 62 76 	call	0xecc4	; 0xecc4 <fgets>
    trim_tail(line);
   1c558:	c8 01       	movw	r24, r16
   1c55a:	0e 94 2a 32 	call	0x6454	; 0x6454 <trim_tail>
    argc = split_args(line,argv,50);
   1c55e:	42 e3       	ldi	r20, 0x32	; 50
   1c560:	50 e0       	ldi	r21, 0x00	; 0
   1c562:	be 01       	movw	r22, r28
   1c564:	6a 5f       	subi	r22, 0xFA	; 250
   1c566:	7e 4f       	sbci	r23, 0xFE	; 254
   1c568:	c8 01       	movw	r24, r16
   1c56a:	0e 94 b0 32 	call	0x6560	; 0x6560 <split_args>
   1c56e:	6c 01       	movw	r12, r24

	if(debug_input)
   1c570:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c574:	81 11       	cpse	r24, r1
   1c576:	0a c0       	rjmp	.+20     	; 0x1c58c <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c578:	ca 5f       	subi	r28, 0xFA	; 250
   1c57a:	de 4f       	sbci	r29, 0xFE	; 254
   1c57c:	e8 80       	ld	r14, Y
   1c57e:	f9 80       	ldd	r15, Y+1	; 0x01
   1c580:	c6 50       	subi	r28, 0x06	; 6
   1c582:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c584:	e1 14       	cp	r14, r1
   1c586:	f1 04       	cpc	r15, r1
   1c588:	51 f5       	brne	.+84     	; 0x1c5de <user_task.part.1+0xe4>
   1c58a:	b7 c0       	rjmp	.+366    	; 0x1c6fa <user_task.part.1+0x200>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c58c:	ed b7       	in	r30, 0x3d	; 61
   1c58e:	fe b7       	in	r31, 0x3e	; 62
   1c590:	d5 82       	std	Z+5, r13	; 0x05
   1c592:	c4 82       	std	Z+4, r12	; 0x04
   1c594:	8f e9       	ldi	r24, 0x9F	; 159
   1c596:	99 e4       	ldi	r25, 0x49	; 73
   1c598:	a0 e0       	ldi	r26, 0x00	; 0
   1c59a:	81 83       	std	Z+1, r24	; 0x01
   1c59c:	92 83       	std	Z+2, r25	; 0x02
   1c59e:	a3 83       	std	Z+3, r26	; 0x03
   1c5a0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1c5a4:	ce 01       	movw	r24, r28
   1c5a6:	8a 5f       	subi	r24, 0xFA	; 250
   1c5a8:	9e 4f       	sbci	r25, 0xFE	; 254
   1c5aa:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c5ac:	00 e0       	ldi	r16, 0x00	; 0
   1c5ae:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c5b0:	86 e9       	ldi	r24, 0x96	; 150
   1c5b2:	99 e4       	ldi	r25, 0x49	; 73
   1c5b4:	3c 01       	movw	r6, r24
   1c5b6:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c5b8:	0c 15       	cp	r16, r12
   1c5ba:	1d 05       	cpc	r17, r13
   1c5bc:	ec f6       	brge	.-70     	; 0x1c578 <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1c5be:	f7 01       	movw	r30, r14
   1c5c0:	81 91       	ld	r24, Z+
   1c5c2:	91 91       	ld	r25, Z+
   1c5c4:	7f 01       	movw	r14, r30
   1c5c6:	ed b7       	in	r30, 0x3d	; 61
   1c5c8:	fe b7       	in	r31, 0x3e	; 62
   1c5ca:	95 83       	std	Z+5, r25	; 0x05
   1c5cc:	84 83       	std	Z+4, r24	; 0x04
   1c5ce:	61 82       	std	Z+1, r6	; 0x01
   1c5d0:	72 82       	std	Z+2, r7	; 0x02
   1c5d2:	83 82       	std	Z+3, r8	; 0x03
   1c5d4:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c5d8:	0f 5f       	subi	r16, 0xFF	; 255
   1c5da:	1f 4f       	sbci	r17, 0xFF	; 255
   1c5dc:	ed cf       	rjmp	.-38     	; 0x1c5b8 <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c5de:	1c 14       	cp	r1, r12
   1c5e0:	1d 04       	cpc	r1, r13
   1c5e2:	0c f0       	brlt	.+2      	; 0x1c5e6 <user_task.part.1+0xec>
   1c5e4:	8a c0       	rjmp	.+276    	; 0x1c6fa <user_task.part.1+0x200>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c5e6:	6d e2       	ldi	r22, 0x2D	; 45
   1c5e8:	77 e1       	ldi	r23, 0x17	; 23
   1c5ea:	c7 01       	movw	r24, r14
   1c5ec:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c5f0:	89 2b       	or	r24, r25
   1c5f2:	d9 f0       	breq	.+54     	; 0x1c62a <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c5f4:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1c5f8:	91 e0       	ldi	r25, 0x01	; 1
   1c5fa:	81 11       	cpse	r24, r1
   1c5fc:	90 e0       	ldi	r25, 0x00	; 0
   1c5fe:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c602:	88 23       	and	r24, r24
   1c604:	19 f0       	breq	.+6      	; 0x1c60c <user_task.part.1+0x112>
   1c606:	89 e2       	ldi	r24, 0x29	; 41
   1c608:	97 e1       	ldi	r25, 0x17	; 23
   1c60a:	02 c0       	rjmp	.+4      	; 0x1c610 <user_task.part.1+0x116>
   1c60c:	86 e2       	ldi	r24, 0x26	; 38
   1c60e:	97 e1       	ldi	r25, 0x17	; 23
   1c610:	ed b7       	in	r30, 0x3d	; 61
   1c612:	fe b7       	in	r31, 0x3e	; 62
   1c614:	95 83       	std	Z+5, r25	; 0x05
   1c616:	84 83       	std	Z+4, r24	; 0x04
   1c618:	81 e8       	ldi	r24, 0x81	; 129
   1c61a:	99 e4       	ldi	r25, 0x49	; 73
   1c61c:	a0 e0       	ldi	r26, 0x00	; 0
   1c61e:	81 83       	std	Z+1, r24	; 0x01
   1c620:	92 83       	std	Z+2, r25	; 0x02
   1c622:	a3 83       	std	Z+3, r26	; 0x03
   1c624:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1c628:	68 c0       	rjmp	.+208    	; 0x1c6fa <user_task.part.1+0x200>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c62a:	63 e3       	ldi	r22, 0x33	; 51
   1c62c:	77 e1       	ldi	r23, 0x17	; 23
   1c62e:	c7 01       	movw	r24, r14
   1c630:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c634:	89 2b       	or	r24, r25
   1c636:	f9 f0       	breq	.+62     	; 0x1c676 <user_task.part.1+0x17c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c638:	c8 5f       	subi	r28, 0xF8	; 248
   1c63a:	de 4f       	sbci	r29, 0xFE	; 254
   1c63c:	e8 80       	ld	r14, Y
   1c63e:	f9 80       	ldd	r15, Y+1	; 0x01
   1c640:	c8 50       	subi	r28, 0x08	; 8
   1c642:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c644:	f7 01       	movw	r30, r14
   1c646:	80 81       	ld	r24, Z
   1c648:	8d 33       	cpi	r24, 0x3D	; 61
   1c64a:	19 f4       	brne	.+6      	; 0x1c652 <user_task.part.1+0x158>
            ++ind;
   1c64c:	82 e0       	ldi	r24, 0x02	; 2
   1c64e:	90 e0       	ldi	r25, 0x00	; 0
   1c650:	02 c0       	rjmp	.+4      	; 0x1c656 <user_task.part.1+0x15c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c652:	81 e0       	ldi	r24, 0x01	; 1
   1c654:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c656:	88 0f       	add	r24, r24
   1c658:	99 1f       	adc	r25, r25
   1c65a:	e6 e0       	ldi	r30, 0x06	; 6
   1c65c:	f1 e0       	ldi	r31, 0x01	; 1
   1c65e:	ec 0f       	add	r30, r28
   1c660:	fd 1f       	adc	r31, r29
   1c662:	e8 0f       	add	r30, r24
   1c664:	f9 1f       	adc	r31, r25
   1c666:	80 81       	ld	r24, Z
   1c668:	91 81       	ldd	r25, Z+1	; 0x01
   1c66a:	0e 94 4f 33 	call	0x669e	; 0x669e <get_value>
		result = lcd_backlight(rgb);
   1c66e:	0c de       	rcall	.-1000   	; 0x1c288 <lcd_backlight>
   1c670:	08 2f       	mov	r16, r24
   1c672:	10 e0       	ldi	r17, 0x00	; 0
   1c674:	44 c0       	rjmp	.+136    	; 0x1c6fe <user_task.part.1+0x204>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c676:	6d e3       	ldi	r22, 0x3D	; 61
   1c678:	77 e1       	ldi	r23, 0x17	; 23
   1c67a:	c7 01       	movw	r24, r14
   1c67c:	0e 94 44 32 	call	0x6488	; 0x6488 <MATCH>
   1c680:	89 2b       	or	r24, r25
   1c682:	19 f0       	breq	.+6      	; 0x1c68a <user_task.part.1+0x190>
    {
        PrintFree();
   1c684:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <PrintFree>
   1c688:	38 c0       	rjmp	.+112    	; 0x1c6fa <user_task.part.1+0x200>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c68a:	64 ed       	ldi	r22, 0xD4	; 212
   1c68c:	7d e0       	ldi	r23, 0x0D	; 13
   1c68e:	c7 01       	movw	r24, r14
   1c690:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c694:	89 2b       	or	r24, r25
   1c696:	51 f0       	breq	.+20     	; 0x1c6ac <user_task.part.1+0x1b2>
    {
        cli();
   1c698:	f8 94       	cli
        uart_rx_flush(0);
   1c69a:	80 e0       	ldi	r24, 0x00	; 0
   1c69c:	0e 94 ad 28 	call	0x515a	; 0x515a <uart_rx_flush>
        cli();
   1c6a0:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c6a2:	82 e0       	ldi	r24, 0x02	; 2
   1c6a4:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c6a6:	e0 e0       	ldi	r30, 0x00	; 0
   1c6a8:	fc ef       	ldi	r31, 0xFC	; 252
   1c6aa:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c6ac:	61 e4       	ldi	r22, 0x41	; 65
   1c6ae:	77 e1       	ldi	r23, 0x17	; 23
   1c6b0:	c7 01       	movw	r24, r14
   1c6b2:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c6b6:	89 2b       	or	r24, r25
   1c6b8:	19 f0       	breq	.+6      	; 0x1c6c0 <user_task.part.1+0x1c6>
    {
        setdate();
   1c6ba:	0e 94 93 3b 	call	0x7726	; 0x7726 <setdate>
   1c6be:	07 c0       	rjmp	.+14     	; 0x1c6ce <user_task.part.1+0x1d4>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c6c0:	69 e4       	ldi	r22, 0x49	; 73
   1c6c2:	77 e1       	ldi	r23, 0x17	; 23
   1c6c4:	c7 01       	movw	r24, r14
   1c6c6:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c6ca:	89 2b       	or	r24, r25
   1c6cc:	19 f0       	breq	.+6      	; 0x1c6d4 <user_task.part.1+0x1da>
    {
        display_clock();
   1c6ce:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <display_clock>
   1c6d2:	13 c0       	rjmp	.+38     	; 0x1c6fa <user_task.part.1+0x200>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c6d4:	6d e6       	ldi	r22, 0x6D	; 109
   1c6d6:	76 e1       	ldi	r23, 0x16	; 22
   1c6d8:	c7 01       	movw	r24, r14
   1c6da:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c6de:	89 2b       	or	r24, r25
    {
        help();
   1c6e0:	11 f0       	breq	.+4      	; 0x1c6e6 <user_task.part.1+0x1ec>
   1c6e2:	ea de       	rcall	.-556    	; 0x1c4b8 <help>
   1c6e4:	0a c0       	rjmp	.+20     	; 0x1c6fa <user_task.part.1+0x200>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c6e6:	63 e7       	ldi	r22, 0x73	; 115
   1c6e8:	76 e1       	ldi	r23, 0x16	; 22
   1c6ea:	c7 01       	movw	r24, r14
   1c6ec:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c6f0:	89 2b       	or	r24, r25
   1c6f2:	b9 f7       	brne	.-18     	; 0x1c6e2 <user_task.part.1+0x1e8>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c6f4:	00 e0       	ldi	r16, 0x00	; 0
   1c6f6:	10 e0       	ldi	r17, 0x00	; 0
   1c6f8:	02 c0       	rjmp	.+4      	; 0x1c6fe <user_task.part.1+0x204>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c6fa:	01 e0       	ldi	r16, 0x01	; 1
   1c6fc:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c6fe:	68 ed       	ldi	r22, 0xD8	; 216
   1c700:	7b e0       	ldi	r23, 0x0B	; 11
   1c702:	c7 01       	movw	r24, r14
   1c704:	0e 94 58 32 	call	0x64b0	; 0x64b0 <MATCHI>
   1c708:	89 2b       	or	r24, r25
   1c70a:	51 f1       	breq	.+84     	; 0x1c760 <user_task.part.1+0x266>
   1c70c:	86 e0       	ldi	r24, 0x06	; 6
   1c70e:	68 2e       	mov	r6, r24
   1c710:	77 24       	eor	r7, r7
   1c712:	73 94       	inc	r7
   1c714:	6c 0e       	add	r6, r28
   1c716:	7d 1e       	adc	r7, r29
   1c718:	f2 e0       	ldi	r31, 0x02	; 2
   1c71a:	6f 0e       	add	r6, r31
   1c71c:	71 1c       	adc	r7, r1
   1c71e:	ee 24       	eor	r14, r14
   1c720:	e3 94       	inc	r14
   1c722:	f1 2c       	mov	r15, r1
   1c724:	01 e0       	ldi	r16, 0x01	; 1
   1c726:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c728:	ec 14       	cp	r14, r12
   1c72a:	fd 04       	cpc	r15, r13
   1c72c:	74 f4       	brge	.+28     	; 0x1c74a <user_task.part.1+0x250>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c72e:	f3 01       	movw	r30, r6
   1c730:	81 91       	ld	r24, Z+
   1c732:	91 91       	ld	r25, Z+
   1c734:	3f 01       	movw	r6, r30
   1c736:	0e 94 32 73 	call	0xe664	; 0xe664 <fatfs_ls>
   1c73a:	89 2b       	or	r24, r25
   1c73c:	11 f4       	brne	.+4      	; 0x1c742 <user_task.part.1+0x248>
				result = -1;
   1c73e:	0f ef       	ldi	r16, 0xFF	; 255
   1c740:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c742:	ff ef       	ldi	r31, 0xFF	; 255
   1c744:	ef 1a       	sub	r14, r31
   1c746:	ff 0a       	sbc	r15, r31
   1c748:	ef cf       	rjmp	.-34     	; 0x1c728 <user_task.part.1+0x22e>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c74a:	ea 94       	dec	r14
   1c74c:	ef 28       	or	r14, r15
   1c74e:	41 f4       	brne	.+16     	; 0x1c760 <user_task.part.1+0x266>
        {
            if(fatfs_ls("") == 0)
   1c750:	80 e2       	ldi	r24, 0x20	; 32
   1c752:	9c e0       	ldi	r25, 0x0C	; 12
   1c754:	0e 94 32 73 	call	0xe664	; 0xe664 <fatfs_ls>
   1c758:	89 2b       	or	r24, r25
   1c75a:	11 f4       	brne	.+4      	; 0x1c760 <user_task.part.1+0x266>
				result = -1;
   1c75c:	0f ef       	ldi	r16, 0xFF	; 255
   1c75e:	1f ef       	ldi	r17, 0xFF	; 255
        }
    }

	if( (ret = gpib_tests(argc,argv)) )
   1c760:	be 01       	movw	r22, r28
   1c762:	6a 5f       	subi	r22, 0xFA	; 250
   1c764:	7e 4f       	sbci	r23, 0xFE	; 254
   1c766:	c6 01       	movw	r24, r12
   1c768:	0e 94 f8 91 	call	0x123f0	; 0x123f0 <gpib_tests>
   1c76c:	00 97       	sbiw	r24, 0x00	; 0
   1c76e:	51 f0       	breq	.+20     	; 0x1c784 <user_task.part.1+0x28a>
    {
		if(ret < 0)
   1c770:	97 fd       	sbrc	r25, 7
   1c772:	03 c0       	rjmp	.+6      	; 0x1c77a <user_task.part.1+0x280>
			result = -1;
		else
			result = 1;
   1c774:	01 e0       	ldi	r16, 0x01	; 1
   1c776:	10 e0       	ldi	r17, 0x00	; 0
   1c778:	02 c0       	rjmp	.+4      	; 0x1c77e <user_task.part.1+0x284>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c77a:	0f ef       	ldi	r16, 0xFF	; 255
   1c77c:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c77e:	0e 94 0c 8d 	call	0x11a18	; 0x11a18 <gpib_init_devices>
   1c782:	0f c0       	rjmp	.+30     	; 0x1c7a2 <user_task.part.1+0x2a8>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1c784:	be 01       	movw	r22, r28
   1c786:	6a 5f       	subi	r22, 0xFA	; 250
   1c788:	7e 4f       	sbci	r23, 0xFE	; 254
   1c78a:	c6 01       	movw	r24, r12
   1c78c:	0e 94 dd 81 	call	0x103ba	; 0x103ba <posix_tests>
   1c790:	00 97       	sbiw	r24, 0x00	; 0
   1c792:	39 f0       	breq	.+14     	; 0x1c7a2 <user_task.part.1+0x2a8>
	{
		if(ret < 0)
   1c794:	97 fd       	sbrc	r25, 7
   1c796:	03 c0       	rjmp	.+6      	; 0x1c79e <user_task.part.1+0x2a4>
			result = -1;
		else
			result = 1;
   1c798:	01 e0       	ldi	r16, 0x01	; 1
   1c79a:	10 e0       	ldi	r17, 0x00	; 0
   1c79c:	02 c0       	rjmp	.+4      	; 0x1c7a2 <user_task.part.1+0x2a8>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c79e:	0f ef       	ldi	r16, 0xFF	; 255
   1c7a0:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c7a2:	be 01       	movw	r22, r28
   1c7a4:	6a 5f       	subi	r22, 0xFA	; 250
   1c7a6:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7a8:	c6 01       	movw	r24, r12
   1c7aa:	0e 94 3e 74 	call	0xe87c	; 0xe87c <fatfs_tests>
   1c7ae:	00 97       	sbiw	r24, 0x00	; 0
   1c7b0:	39 f0       	breq	.+14     	; 0x1c7c0 <user_task.part.1+0x2c6>
	{
		if(ret < 0)
   1c7b2:	97 fd       	sbrc	r25, 7
   1c7b4:	03 c0       	rjmp	.+6      	; 0x1c7bc <user_task.part.1+0x2c2>
			result = -1;
		else
			result = 1;
   1c7b6:	01 e0       	ldi	r16, 0x01	; 1
   1c7b8:	10 e0       	ldi	r17, 0x00	; 0
   1c7ba:	02 c0       	rjmp	.+4      	; 0x1c7c0 <user_task.part.1+0x2c6>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c7bc:	0f ef       	ldi	r16, 0xFF	; 255
   1c7be:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c7c0:	be 01       	movw	r22, r28
   1c7c2:	6a 5f       	subi	r22, 0xFA	; 250
   1c7c4:	7e 4f       	sbci	r23, 0xFE	; 254
   1c7c6:	c6 01       	movw	r24, r12
   1c7c8:	17 db       	rcall	.-2514   	; 0x1bdf8 <lif_tests>
   1c7ca:	00 97       	sbiw	r24, 0x00	; 0
   1c7cc:	19 f0       	breq	.+6      	; 0x1c7d4 <user_task.part.1+0x2da>
	{
		if(ret < 0)
   1c7ce:	97 ff       	sbrs	r25, 7
   1c7d0:	04 c0       	rjmp	.+8      	; 0x1c7da <user_task.part.1+0x2e0>
   1c7d2:	09 c0       	rjmp	.+18     	; 0x1c7e6 <user_task.part.1+0x2ec>
			result = -1;
		else
			result = 1;
	}
#endif
    if(result == 1)
   1c7d4:	01 30       	cpi	r16, 0x01	; 1
   1c7d6:	11 05       	cpc	r17, r1
   1c7d8:	19 f4       	brne	.+6      	; 0x1c7e0 <user_task.part.1+0x2e6>
        printf("OK\n");
   1c7da:	8d e7       	ldi	r24, 0x7D	; 125
   1c7dc:	99 e4       	ldi	r25, 0x49	; 73
   1c7de:	05 c0       	rjmp	.+10     	; 0x1c7ea <user_task.part.1+0x2f0>
	else if(result == -1)
   1c7e0:	0f 3f       	cpi	r16, 0xFF	; 255
   1c7e2:	1f 4f       	sbci	r17, 0xFF	; 255
   1c7e4:	59 f4       	brne	.+22     	; 0x1c7fc <user_task.part.1+0x302>
        printf("Command FAILED\n");
   1c7e6:	8d e6       	ldi	r24, 0x6D	; 109
   1c7e8:	99 e4       	ldi	r25, 0x49	; 73
   1c7ea:	a0 e0       	ldi	r26, 0x00	; 0
   1c7ec:	ed b7       	in	r30, 0x3d	; 61
   1c7ee:	fe b7       	in	r31, 0x3e	; 62
   1c7f0:	81 83       	std	Z+1, r24	; 0x01
   1c7f2:	92 83       	std	Z+2, r25	; 0x02
   1c7f4:	a3 83       	std	Z+3, r26	; 0x03
   1c7f6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1c7fa:	33 c0       	rjmp	.+102    	; 0x1c862 <user_task.part.1+0x368>
    else
	{
        printf("Invalid Command\n");
   1c7fc:	8c e5       	ldi	r24, 0x5C	; 92
   1c7fe:	99 e4       	ldi	r25, 0x49	; 73
   1c800:	a0 e0       	ldi	r26, 0x00	; 0
   1c802:	ed b7       	in	r30, 0x3d	; 61
   1c804:	fe b7       	in	r31, 0x3e	; 62
   1c806:	81 83       	std	Z+1, r24	; 0x01
   1c808:	92 83       	std	Z+2, r25	; 0x02
   1c80a:	a3 83       	std	Z+3, r26	; 0x03
   1c80c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c810:	ed b7       	in	r30, 0x3d	; 61
   1c812:	fe b7       	in	r31, 0x3e	; 62
   1c814:	d5 82       	std	Z+5, r13	; 0x05
   1c816:	c4 82       	std	Z+4, r12	; 0x04
   1c818:	83 e4       	ldi	r24, 0x43	; 67
   1c81a:	99 e4       	ldi	r25, 0x49	; 73
   1c81c:	a0 e0       	ldi	r26, 0x00	; 0
   1c81e:	81 83       	std	Z+1, r24	; 0x01
   1c820:	92 83       	std	Z+2, r25	; 0x02
   1c822:	a3 83       	std	Z+3, r26	; 0x03
   1c824:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
   1c828:	8e 01       	movw	r16, r28
   1c82a:	0a 5f       	subi	r16, 0xFA	; 250
   1c82c:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c82e:	e1 2c       	mov	r14, r1
   1c830:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c832:	86 e3       	ldi	r24, 0x36	; 54
   1c834:	99 e4       	ldi	r25, 0x49	; 73
   1c836:	3c 01       	movw	r6, r24
   1c838:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c83a:	ec 14       	cp	r14, r12
   1c83c:	fd 04       	cpc	r15, r13
   1c83e:	8c f4       	brge	.+34     	; 0x1c862 <user_task.part.1+0x368>
			printf("       [%s]\n", argv[i]);
   1c840:	f8 01       	movw	r30, r16
   1c842:	81 91       	ld	r24, Z+
   1c844:	91 91       	ld	r25, Z+
   1c846:	8f 01       	movw	r16, r30
   1c848:	ed b7       	in	r30, 0x3d	; 61
   1c84a:	fe b7       	in	r31, 0x3e	; 62
   1c84c:	95 83       	std	Z+5, r25	; 0x05
   1c84e:	84 83       	std	Z+4, r24	; 0x04
   1c850:	61 82       	std	Z+1, r6	; 0x01
   1c852:	72 82       	std	Z+2, r7	; 0x02
   1c854:	83 82       	std	Z+3, r8	; 0x03
   1c856:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c85a:	ff ef       	ldi	r31, 0xFF	; 255
   1c85c:	ef 1a       	sub	r14, r31
   1c85e:	ff 0a       	sbc	r15, r31
   1c860:	ec cf       	rjmp	.-40     	; 0x1c83a <user_task.part.1+0x340>
			printf("       [%s]\n", argv[i]);
	}
}
   1c862:	c5 59       	subi	r28, 0x95	; 149
   1c864:	de 4f       	sbci	r29, 0xFE	; 254
   1c866:	0f b6       	in	r0, 0x3f	; 63
   1c868:	f8 94       	cli
   1c86a:	de bf       	out	0x3e, r29	; 62
   1c86c:	0f be       	out	0x3f, r0	; 63
   1c86e:	cd bf       	out	0x3d, r28	; 61
   1c870:	df 91       	pop	r29
   1c872:	cf 91       	pop	r28
   1c874:	1f 91       	pop	r17
   1c876:	0f 91       	pop	r16
   1c878:	ff 90       	pop	r15
   1c87a:	ef 90       	pop	r14
   1c87c:	df 90       	pop	r13
   1c87e:	cf 90       	pop	r12
   1c880:	8f 90       	pop	r8
   1c882:	7f 90       	pop	r7
   1c884:	6f 90       	pop	r6
   1c886:	08 95       	ret

0001c888 <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c888:	81 11       	cpse	r24, r1
        gpib_task();
   1c88a:	0e 94 77 91 	call	0x122ee	; 0x122ee <gpib_task>

    if(!kbhit(0))
   1c88e:	80 e0       	ldi	r24, 0x00	; 0
   1c890:	0e 94 ed 29 	call	0x53da	; 0x53da <uart_rx_count>
   1c894:	89 2b       	or	r24, r25
   1c896:	09 f0       	breq	.+2      	; 0x1c89a <user_task+0x12>
   1c898:	30 ce       	rjmp	.-928    	; 0x1c4fa <user_task.part.1>
   1c89a:	08 95       	ret

0001c89c <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1c89c:	a9 e2       	ldi	r26, 0x29	; 41
   1c89e:	b0 e0       	ldi	r27, 0x00	; 0
   1c8a0:	e3 e5       	ldi	r30, 0x53	; 83
   1c8a2:	f4 ee       	ldi	r31, 0xE4	; 228
   1c8a4:	a7 c2       	rjmp	.+1358   	; 0x1cdf4 <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c8a6:	83 e0       	ldi	r24, 0x03	; 3
   1c8a8:	0e 94 46 97 	call	0x12e8c	; 0x12e8c <count_drive_types>
   1c8ac:	18 2f       	mov	r17, r24
   1c8ae:	81 e0       	ldi	r24, 0x01	; 1
   1c8b0:	0e 94 46 97 	call	0x12e8c	; 0x12e8c <count_drive_types>
   1c8b4:	08 2e       	mov	r0, r24
   1c8b6:	00 0c       	add	r0, r0
   1c8b8:	99 0b       	sbc	r25, r25
   1c8ba:	ed b7       	in	r30, 0x3d	; 61
   1c8bc:	fe b7       	in	r31, 0x3e	; 62
   1c8be:	91 87       	std	Z+9, r25	; 0x09
   1c8c0:	80 87       	std	Z+8, r24	; 0x08
   1c8c2:	81 2f       	mov	r24, r17
   1c8c4:	11 0f       	add	r17, r17
   1c8c6:	99 0b       	sbc	r25, r25
   1c8c8:	97 83       	std	Z+7, r25	; 0x07
   1c8ca:	86 83       	std	Z+6, r24	; 0x06
   1c8cc:	85 e2       	ldi	r24, 0x25	; 37
   1c8ce:	99 e4       	ldi	r25, 0x49	; 73
   1c8d0:	a0 e0       	ldi	r26, 0x00	; 0
   1c8d2:	83 83       	std	Z+3, r24	; 0x03
   1c8d4:	94 83       	std	Z+4, r25	; 0x04
   1c8d6:	a5 83       	std	Z+5, r26	; 0x05
   1c8d8:	8e 01       	movw	r16, r28
   1c8da:	06 5f       	subi	r16, 0xF6	; 246
   1c8dc:	1f 4f       	sbci	r17, 0xFF	; 255
   1c8de:	12 83       	std	Z+2, r17	; 0x02
   1c8e0:	01 83       	std	Z+1, r16	; 0x01
   1c8e2:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c8e6:	ed b7       	in	r30, 0x3d	; 61
   1c8e8:	fe b7       	in	r31, 0x3e	; 62
   1c8ea:	17 83       	std	Z+7, r17	; 0x07
   1c8ec:	06 83       	std	Z+6, r16	; 0x06
   1c8ee:	8f e1       	ldi	r24, 0x1F	; 31
   1c8f0:	99 e4       	ldi	r25, 0x49	; 73
   1c8f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c8f4:	83 83       	std	Z+3, r24	; 0x03
   1c8f6:	94 83       	std	Z+4, r25	; 0x04
   1c8f8:	a5 83       	std	Z+5, r26	; 0x05
   1c8fa:	8c e0       	ldi	r24, 0x0C	; 12
   1c8fc:	93 e0       	ldi	r25, 0x03	; 3
   1c8fe:	92 83       	std	Z+2, r25	; 0x02
   1c900:	81 83       	std	Z+1, r24	; 0x01
   1c902:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>
}
   1c906:	a9 96       	adiw	r28, 0x29	; 41
   1c908:	e4 e0       	ldi	r30, 0x04	; 4
   1c90a:	90 c2       	rjmp	.+1312   	; 0x1ce2c <__epilogue_restores__+0x1c>

0001c90c <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c90c:	cf 93       	push	r28
   1c90e:	df 93       	push	r29
   1c910:	cd b7       	in	r28, 0x3d	; 61
   1c912:	de b7       	in	r29, 0x3e	; 62
   1c914:	63 97       	sbiw	r28, 0x13	; 19
   1c916:	0f b6       	in	r0, 0x3f	; 63
   1c918:	f8 94       	cli
   1c91a:	de bf       	out	0x3e, r29	; 62
   1c91c:	0f be       	out	0x3f, r0	; 63
   1c91e:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1c920:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c924:	46 98       	cbi	0x08, 6	; 8
   1c926:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c928:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c92c:	40 e0       	ldi	r20, 0x00	; 0
   1c92e:	52 ec       	ldi	r21, 0xC2	; 194
   1c930:	61 e0       	ldi	r22, 0x01	; 1
   1c932:	70 e0       	ldi	r23, 0x00	; 0
   1c934:	80 e0       	ldi	r24, 0x00	; 0
   1c936:	0e 94 58 29 	call	0x52b0	; 0x52b0 <uart_init>
   1c93a:	6b 01       	movw	r12, r22
   1c93c:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c93e:	68 ec       	ldi	r22, 0xC8	; 200
   1c940:	70 e0       	ldi	r23, 0x00	; 0
   1c942:	80 e0       	ldi	r24, 0x00	; 0
   1c944:	90 e0       	ldi	r25, 0x00	; 0
   1c946:	0e 94 65 28 	call	0x50ca	; 0x50ca <delayms>

    sep();
   1c94a:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
    printf("Start\n");
   1c94e:	88 e1       	ldi	r24, 0x18	; 24
   1c950:	99 e4       	ldi	r25, 0x49	; 73
   1c952:	a0 e0       	ldi	r26, 0x00	; 0
   1c954:	ed b7       	in	r30, 0x3d	; 61
   1c956:	fe b7       	in	r31, 0x3e	; 62
   1c958:	81 83       	std	Z+1, r24	; 0x01
   1c95a:	92 83       	std	Z+2, r25	; 0x02
   1c95c:	a3 83       	std	Z+3, r26	; 0x03
   1c95e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c962:	80 e0       	ldi	r24, 0x00	; 0
   1c964:	9d e2       	ldi	r25, 0x2D	; 45
   1c966:	a1 e3       	ldi	r26, 0x31	; 49
   1c968:	b1 e0       	ldi	r27, 0x01	; 1
   1c96a:	ed b7       	in	r30, 0x3d	; 61
   1c96c:	fe b7       	in	r31, 0x3e	; 62
   1c96e:	84 83       	std	Z+4, r24	; 0x04
   1c970:	95 83       	std	Z+5, r25	; 0x05
   1c972:	a6 83       	std	Z+6, r26	; 0x06
   1c974:	b7 83       	std	Z+7, r27	; 0x07
   1c976:	87 e0       	ldi	r24, 0x07	; 7
   1c978:	99 e4       	ldi	r25, 0x49	; 73
   1c97a:	a0 e0       	ldi	r26, 0x00	; 0
   1c97c:	81 83       	std	Z+1, r24	; 0x01
   1c97e:	92 83       	std	Z+2, r25	; 0x02
   1c980:	a3 83       	std	Z+3, r26	; 0x03
   1c982:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c986:	ed b7       	in	r30, 0x3d	; 61
   1c988:	fe b7       	in	r31, 0x3e	; 62
   1c98a:	c0 86       	std	Z+8, r12	; 0x08
   1c98c:	d1 86       	std	Z+9, r13	; 0x09
   1c98e:	e2 86       	std	Z+10, r14	; 0x0a
   1c990:	f3 86       	std	Z+11, r15	; 0x0b
   1c992:	80 e0       	ldi	r24, 0x00	; 0
   1c994:	92 ec       	ldi	r25, 0xC2	; 194
   1c996:	a1 e0       	ldi	r26, 0x01	; 1
   1c998:	b0 e0       	ldi	r27, 0x00	; 0
   1c99a:	84 83       	std	Z+4, r24	; 0x04
   1c99c:	95 83       	std	Z+5, r25	; 0x05
   1c99e:	a6 83       	std	Z+6, r26	; 0x06
   1c9a0:	b7 83       	std	Z+7, r27	; 0x07
   1c9a2:	80 ee       	ldi	r24, 0xE0	; 224
   1c9a4:	98 e4       	ldi	r25, 0x48	; 72
   1c9a6:	a0 e0       	ldi	r26, 0x00	; 0
   1c9a8:	81 83       	std	Z+1, r24	; 0x01
   1c9aa:	92 83       	std	Z+2, r25	; 0x02
   1c9ac:	a3 83       	std	Z+3, r26	; 0x03
   1c9ae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    init_timers();
   1c9b2:	0e 94 00 36 	call	0x6c00	; 0x6c00 <init_timers>

    sep();
   1c9b6:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c9ba:	81 ec       	ldi	r24, 0xC1	; 193
   1c9bc:	98 e4       	ldi	r25, 0x48	; 72
   1c9be:	a0 e0       	ldi	r26, 0x00	; 0
   1c9c0:	ed b7       	in	r30, 0x3d	; 61
   1c9c2:	fe b7       	in	r31, 0x3e	; 62
   1c9c4:	81 83       	std	Z+1, r24	; 0x01
   1c9c6:	92 83       	std	Z+2, r25	; 0x02
   1c9c8:	a3 83       	std	Z+3, r26	; 0x03
   1c9ca:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c9ce:	84 ea       	ldi	r24, 0xA4	; 164
   1c9d0:	98 e4       	ldi	r25, 0x48	; 72
   1c9d2:	a0 e0       	ldi	r26, 0x00	; 0
   1c9d4:	ed b7       	in	r30, 0x3d	; 61
   1c9d6:	fe b7       	in	r31, 0x3e	; 62
   1c9d8:	81 83       	std	Z+1, r24	; 0x01
   1c9da:	92 83       	std	Z+2, r25	; 0x02
   1c9dc:	a3 83       	std	Z+3, r26	; 0x03
   1c9de:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf(" GNU version 3\n");
   1c9e2:	84 e9       	ldi	r24, 0x94	; 148
   1c9e4:	98 e4       	ldi	r25, 0x48	; 72
   1c9e6:	a0 e0       	ldi	r26, 0x00	; 0
   1c9e8:	ed b7       	in	r30, 0x3d	; 61
   1c9ea:	fe b7       	in	r31, 0x3e	; 62
   1c9ec:	81 83       	std	Z+1, r24	; 0x01
   1c9ee:	92 83       	std	Z+2, r25	; 0x02
   1c9f0:	a3 83       	std	Z+3, r26	; 0x03
   1c9f2:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c9f6:	8d e6       	ldi	r24, 0x6D	; 109
   1c9f8:	98 e4       	ldi	r25, 0x48	; 72
   1c9fa:	a0 e0       	ldi	r26, 0x00	; 0
   1c9fc:	ed b7       	in	r30, 0x3d	; 61
   1c9fe:	fe b7       	in	r31, 0x3e	; 62
   1ca00:	81 83       	std	Z+1, r24	; 0x01
   1ca02:	92 83       	std	Z+2, r25	; 0x02
   1ca04:	a3 83       	std	Z+3, r26	; 0x03
   1ca06:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ca0a:	87 eb       	ldi	r24, 0xB7	; 183
   1ca0c:	96 e1       	ldi	r25, 0x16	; 22
   1ca0e:	ed b7       	in	r30, 0x3d	; 61
   1ca10:	fe b7       	in	r31, 0x3e	; 62
   1ca12:	95 83       	std	Z+5, r25	; 0x05
   1ca14:	84 83       	std	Z+4, r24	; 0x04
   1ca16:	83 e5       	ldi	r24, 0x53	; 83
   1ca18:	98 e4       	ldi	r25, 0x48	; 72
   1ca1a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca1c:	81 83       	std	Z+1, r24	; 0x01
   1ca1e:	92 83       	std	Z+2, r25	; 0x02
   1ca20:	a3 83       	std	Z+3, r26	; 0x03
   1ca22:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ca26:	8b ed       	ldi	r24, 0xDB	; 219
   1ca28:	96 e1       	ldi	r25, 0x16	; 22
   1ca2a:	ed b7       	in	r30, 0x3d	; 61
   1ca2c:	fe b7       	in	r31, 0x3e	; 62
   1ca2e:	95 83       	std	Z+5, r25	; 0x05
   1ca30:	84 83       	std	Z+4, r24	; 0x04
   1ca32:	89 e3       	ldi	r24, 0x39	; 57
   1ca34:	98 e4       	ldi	r25, 0x48	; 72
   1ca36:	a0 e0       	ldi	r26, 0x00	; 0
   1ca38:	81 83       	std	Z+1, r24	; 0x01
   1ca3a:	92 83       	std	Z+2, r25	; 0x02
   1ca3c:	a3 83       	std	Z+3, r26	; 0x03
   1ca3e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

    sep();
   1ca42:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
    PrintFree();
   1ca46:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <PrintFree>

    sep();
   1ca4a:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1ca4e:	83 e2       	ldi	r24, 0x23	; 35
   1ca50:	98 e4       	ldi	r25, 0x48	; 72
   1ca52:	a0 e0       	ldi	r26, 0x00	; 0
   1ca54:	ed b7       	in	r30, 0x3d	; 61
   1ca56:	fe b7       	in	r31, 0x3e	; 62
   1ca58:	81 83       	std	Z+1, r24	; 0x01
   1ca5a:	92 83       	std	Z+2, r25	; 0x02
   1ca5c:	a3 83       	std	Z+3, r26	; 0x03
   1ca5e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1ca62:	4b e0       	ldi	r20, 0x0B	; 11
   1ca64:	50 e0       	ldi	r21, 0x00	; 0
   1ca66:	60 e2       	ldi	r22, 0x20	; 32
   1ca68:	71 ea       	ldi	r23, 0xA1	; 161
   1ca6a:	87 e0       	ldi	r24, 0x07	; 7
   1ca6c:	90 e0       	ldi	r25, 0x00	; 0
   1ca6e:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1ca72:	8d e0       	ldi	r24, 0x0D	; 13
   1ca74:	98 e4       	ldi	r25, 0x48	; 72
   1ca76:	a0 e0       	ldi	r26, 0x00	; 0
   1ca78:	ed b7       	in	r30, 0x3d	; 61
   1ca7a:	fe b7       	in	r31, 0x3e	; 62
   1ca7c:	81 83       	std	Z+1, r24	; 0x01
   1ca7e:	92 83       	std	Z+2, r25	; 0x02
   1ca80:	a3 83       	std	Z+3, r26	; 0x03
   1ca82:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	i2c_init(100000);
   1ca86:	60 ea       	ldi	r22, 0xA0	; 160
   1ca88:	76 e8       	ldi	r23, 0x86	; 134
   1ca8a:	81 e0       	ldi	r24, 0x01	; 1
   1ca8c:	90 e0       	ldi	r25, 0x00	; 0
   1ca8e:	0e 94 29 2c 	call	0x5852	; 0x5852 <i2c_init>
    sep();
   1ca92:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1ca96:	8b ef       	ldi	r24, 0xFB	; 251
   1ca98:	97 e4       	ldi	r25, 0x47	; 71
   1ca9a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca9c:	ed b7       	in	r30, 0x3d	; 61
   1ca9e:	fe b7       	in	r31, 0x3e	; 62
   1caa0:	81 83       	std	Z+1, r24	; 0x01
   1caa2:	92 83       	std	Z+2, r25	; 0x02
   1caa4:	a3 83       	std	Z+3, r26	; 0x03
   1caa6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    clock_clear();
   1caaa:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <clock_clear>
    printf("Clock cleared\n");
   1caae:	8c ee       	ldi	r24, 0xEC	; 236
   1cab0:	97 e4       	ldi	r25, 0x47	; 71
   1cab2:	a0 e0       	ldi	r26, 0x00	; 0
   1cab4:	ed b7       	in	r30, 0x3d	; 61
   1cab6:	fe b7       	in	r31, 0x3e	; 62
   1cab8:	81 83       	std	Z+1, r24	; 0x01
   1caba:	92 83       	std	Z+2, r25	; 0x02
   1cabc:	a3 83       	std	Z+3, r26	; 0x03
   1cabe:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1cac2:	be 01       	movw	r22, r28
   1cac4:	64 5f       	subi	r22, 0xF4	; 244
   1cac6:	7f 4f       	sbci	r23, 0xFF	; 255
   1cac8:	80 e0       	ldi	r24, 0x00	; 0
   1caca:	90 e0       	ldi	r25, 0x00	; 0
   1cacc:	0e 94 5d 36 	call	0x6cba	; 0x6cba <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1cad0:	88 89       	ldd	r24, Y+16	; 0x10
   1cad2:	99 89       	ldd	r25, Y+17	; 0x11
   1cad4:	aa 89       	ldd	r26, Y+18	; 0x12
   1cad6:	bb 89       	ldd	r27, Y+19	; 0x13
   1cad8:	ed b7       	in	r30, 0x3d	; 61
   1cada:	fe b7       	in	r31, 0x3e	; 62
   1cadc:	84 83       	std	Z+4, r24	; 0x04
   1cade:	95 83       	std	Z+5, r25	; 0x05
   1cae0:	a6 83       	std	Z+6, r26	; 0x06
   1cae2:	b7 83       	std	Z+7, r27	; 0x07
   1cae4:	8e eb       	ldi	r24, 0xBE	; 190
   1cae6:	97 e4       	ldi	r25, 0x47	; 71
   1cae8:	a0 e0       	ldi	r26, 0x00	; 0
   1caea:	81 83       	std	Z+1, r24	; 0x01
   1caec:	92 83       	std	Z+2, r25	; 0x02
   1caee:	a3 83       	std	Z+3, r26	; 0x03
   1caf0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1caf4:	80 e0       	ldi	r24, 0x00	; 0
   1caf6:	90 e0       	ldi	r25, 0x00	; 0
   1caf8:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <initialize_clock>
    display_clock();
   1cafc:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <display_clock>
    sep();
   1cb00:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1cb04:	e8 db       	rcall	.-2096   	; 0x1c2d6 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1cb06:	86 ea       	ldi	r24, 0xA6	; 166
   1cb08:	97 e4       	ldi	r25, 0x47	; 71
   1cb0a:	a0 e0       	ldi	r26, 0x00	; 0
   1cb0c:	ed b7       	in	r30, 0x3d	; 61
   1cb0e:	fe b7       	in	r31, 0x3e	; 62
   1cb10:	81 83       	std	Z+1, r24	; 0x01
   1cb12:	92 83       	std	Z+2, r25	; 0x02
   1cb14:	a3 83       	std	Z+3, r26	; 0x03
   1cb16:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    if ( !mmc_init(1) )
   1cb1a:	81 e0       	ldi	r24, 0x01	; 1
   1cb1c:	90 e0       	ldi	r25, 0x00	; 0
   1cb1e:	0e 94 2a 6f 	call	0xde54	; 0xde54 <mmc_init>
   1cb22:	89 2b       	or	r24, r25
   1cb24:	51 f4       	brne	.+20     	; 0x1cb3a <main+0x22e>
		printf("MMC initialized\n");
   1cb26:	85 e9       	ldi	r24, 0x95	; 149
   1cb28:	97 e4       	ldi	r25, 0x47	; 71
   1cb2a:	a0 e0       	ldi	r26, 0x00	; 0
   1cb2c:	ed b7       	in	r30, 0x3d	; 61
   1cb2e:	fe b7       	in	r31, 0x3e	; 62
   1cb30:	81 83       	std	Z+1, r24	; 0x01
   1cb32:	92 83       	std	Z+2, r25	; 0x02
   1cb34:	a3 83       	std	Z+3, r26	; 0x03
   1cb36:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    sep();
   1cb3a:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1cb3e:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1cb42:	8f e7       	ldi	r24, 0x7F	; 127
   1cb44:	97 e4       	ldi	r25, 0x47	; 71
   1cb46:	a0 e0       	ldi	r26, 0x00	; 0
   1cb48:	ed b7       	in	r30, 0x3d	; 61
   1cb4a:	fe b7       	in	r31, 0x3e	; 62
   1cb4c:	81 83       	std	Z+1, r24	; 0x01
   1cb4e:	92 83       	std	Z+2, r25	; 0x02
   1cb50:	a3 83       	std	Z+3, r26	; 0x03
   1cb52:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1cb56:	0e 94 42 be 	call	0x17c84	; 0x17c84 <printer_init>
    printf("Printer initialized\n");
   1cb5a:	8a e6       	ldi	r24, 0x6A	; 106
   1cb5c:	97 e4       	ldi	r25, 0x47	; 71
   1cb5e:	a0 e0       	ldi	r26, 0x00	; 0
   1cb60:	ed b7       	in	r30, 0x3d	; 61
   1cb62:	fe b7       	in	r31, 0x3e	; 62
   1cb64:	81 83       	std	Z+1, r24	; 0x01
   1cb66:	92 83       	std	Z+2, r25	; 0x02
   1cb68:	a3 83       	std	Z+3, r26	; 0x03
   1cb6a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1cb6e:	88 e5       	ldi	r24, 0x58	; 88
   1cb70:	97 e4       	ldi	r25, 0x47	; 71
   1cb72:	a0 e0       	ldi	r26, 0x00	; 0
   1cb74:	ed b7       	in	r30, 0x3d	; 61
   1cb76:	fe b7       	in	r31, 0x3e	; 62
   1cb78:	81 83       	std	Z+1, r24	; 0x01
   1cb7a:	92 83       	std	Z+2, r25	; 0x02
   1cb7c:	a3 83       	std	Z+3, r26	; 0x03
   1cb7e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    gpib_timer_init();
   1cb82:	0e 94 cb 83 	call	0x10796	; 0x10796 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1cb86:	80 e4       	ldi	r24, 0x40	; 64
   1cb88:	97 e4       	ldi	r25, 0x47	; 71
   1cb8a:	a0 e0       	ldi	r26, 0x00	; 0
   1cb8c:	ed b7       	in	r30, 0x3d	; 61
   1cb8e:	fe b7       	in	r31, 0x3e	; 62
   1cb90:	81 83       	std	Z+1, r24	; 0x01
   1cb92:	92 83       	std	Z+2, r25	; 0x02
   1cb94:	a3 83       	std	Z+3, r26	; 0x03
   1cb96:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cb9a:	0e 94 2f 8c 	call	0x1185e	; 0x1185e <gpib_file_init>
    printf("GPIB File init done\n");
   1cb9e:	8b e2       	ldi	r24, 0x2B	; 43
   1cba0:	97 e4       	ldi	r25, 0x47	; 71
   1cba2:	a0 e0       	ldi	r26, 0x00	; 0
   1cba4:	ed b7       	in	r30, 0x3d	; 61
   1cba6:	fe b7       	in	r31, 0x3e	; 62
   1cba8:	81 83       	std	Z+1, r24	; 0x01
   1cbaa:	92 83       	std	Z+2, r25	; 0x02
   1cbac:	a3 83       	std	Z+3, r26	; 0x03
   1cbae:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1cbb2:	0e 94 1f 86 	call	0x10c3e	; 0x10c3e <gpib_state_init>
    printf("GPIB State init done\n");
   1cbb6:	85 e1       	ldi	r24, 0x15	; 21
   1cbb8:	97 e4       	ldi	r25, 0x47	; 71
   1cbba:	a0 e0       	ldi	r26, 0x00	; 0
   1cbbc:	ed b7       	in	r30, 0x3d	; 61
   1cbbe:	fe b7       	in	r31, 0x3e	; 62
   1cbc0:	81 83       	std	Z+1, r24	; 0x01
   1cbc2:	92 83       	std	Z+2, r25	; 0x02
   1cbc4:	a3 83       	std	Z+3, r26	; 0x03
   1cbc6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    sep();
   1cbca:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cbce:	80 e0       	ldi	r24, 0x00	; 0
   1cbd0:	90 e0       	ldi	r25, 0x00	; 0
   1cbd2:	0e 94 d7 93 	call	0x127ae	; 0x127ae <display_Addresses>
    sep();
   1cbd6:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cbda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cbde:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cbe2:	ed b7       	in	r30, 0x3d	; 61
   1cbe4:	fe b7       	in	r31, 0x3e	; 62
   1cbe6:	95 83       	std	Z+5, r25	; 0x05
   1cbe8:	84 83       	std	Z+4, r24	; 0x04
   1cbea:	8f ef       	ldi	r24, 0xFF	; 255
   1cbec:	96 e4       	ldi	r25, 0x46	; 70
   1cbee:	a0 e0       	ldi	r26, 0x00	; 0
   1cbf0:	81 83       	std	Z+1, r24	; 0x01
   1cbf2:	92 83       	std	Z+2, r25	; 0x02
   1cbf4:	a3 83       	std	Z+3, r26	; 0x03
   1cbf6:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
    sep();
   1cbfa:	0e 94 1a 32 	call	0x6434	; 0x6434 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cbfe:	0e 94 e5 9a 	call	0x135ca	; 0x135ca <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1cc02:	4c de       	rcall	.-872    	; 0x1c89c <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cc04:	8b e0       	ldi	r24, 0x0B	; 11
   1cc06:	97 e1       	ldi	r25, 0x17	; 23
   1cc08:	ed b7       	in	r30, 0x3d	; 61
   1cc0a:	fe b7       	in	r31, 0x3e	; 62
   1cc0c:	97 83       	std	Z+7, r25	; 0x07
   1cc0e:	86 83       	std	Z+6, r24	; 0x06
   1cc10:	89 ef       	ldi	r24, 0xF9	; 249
   1cc12:	96 e4       	ldi	r25, 0x46	; 70
   1cc14:	a0 e0       	ldi	r26, 0x00	; 0
   1cc16:	83 83       	std	Z+3, r24	; 0x03
   1cc18:	94 83       	std	Z+4, r25	; 0x04
   1cc1a:	a5 83       	std	Z+5, r26	; 0x05
   1cc1c:	85 ef       	ldi	r24, 0xF5	; 245
   1cc1e:	92 e0       	ldi	r25, 0x02	; 2
   1cc20:	92 83       	std	Z+2, r25	; 0x02
   1cc22:	81 83       	std	Z+1, r24	; 0x01
   1cc24:	0e 94 f7 46 	call	0x8dee	; 0x8dee <sprintf_P>

	i2c_task_run();
   1cc28:	0e 94 bf 2c 	call	0x597e	; 0x597e <i2c_task_run>
	delayms(1000);
   1cc2c:	68 ee       	ldi	r22, 0xE8	; 232
   1cc2e:	73 e0       	ldi	r23, 0x03	; 3
   1cc30:	80 e0       	ldi	r24, 0x00	; 0
   1cc32:	90 e0       	ldi	r25, 0x00	; 0
   1cc34:	0e 94 65 28 	call	0x50ca	; 0x50ca <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cc38:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
   1cc3c:	88 23       	and	r24, r24
   1cc3e:	21 f0       	breq	.+8      	; 0x1cc48 <main+0x33c>
   1cc40:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
   1cc44:	88 23       	and	r24, r24
   1cc46:	61 f0       	breq	.+24     	; 0x1cc60 <main+0x354>
	{
		i2c_display_task_errors();
   1cc48:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cc4c:	8f ed       	ldi	r24, 0xDF	; 223
   1cc4e:	96 e4       	ldi	r25, 0x46	; 70
   1cc50:	a0 e0       	ldi	r26, 0x00	; 0
   1cc52:	ed b7       	in	r30, 0x3d	; 61
   1cc54:	fe b7       	in	r31, 0x3e	; 62
   1cc56:	81 83       	std	Z+1, r24	; 0x01
   1cc58:	92 83       	std	Z+2, r25	; 0x02
   1cc5a:	a3 83       	std	Z+3, r26	; 0x03
   1cc5c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cc60:	8b ec       	ldi	r24, 0xCB	; 203
   1cc62:	96 e4       	ldi	r25, 0x46	; 70
   1cc64:	a0 e0       	ldi	r26, 0x00	; 0
   1cc66:	ed b7       	in	r30, 0x3d	; 61
   1cc68:	fe b7       	in	r31, 0x3e	; 62
   1cc6a:	81 83       	std	Z+1, r24	; 0x01
   1cc6c:	92 83       	std	Z+2, r25	; 0x02
   1cc6e:	a3 83       	std	Z+3, r26	; 0x03
   1cc70:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1cc74:	81 e0       	ldi	r24, 0x01	; 1
   1cc76:	08 de       	rcall	.-1008   	; 0x1c888 <user_task>
   1cc78:	fd cf       	rjmp	.-6      	; 0x1cc74 <main+0x368>

0001cc7a <__mulsi3>:
   1cc7a:	db 01       	movw	r26, r22
   1cc7c:	8f 93       	push	r24
   1cc7e:	9f 93       	push	r25
   1cc80:	8b d0       	rcall	.+278    	; 0x1cd98 <__muluhisi3>
   1cc82:	bf 91       	pop	r27
   1cc84:	af 91       	pop	r26
   1cc86:	a2 9f       	mul	r26, r18
   1cc88:	80 0d       	add	r24, r0
   1cc8a:	91 1d       	adc	r25, r1
   1cc8c:	a3 9f       	mul	r26, r19
   1cc8e:	90 0d       	add	r25, r0
   1cc90:	b2 9f       	mul	r27, r18
   1cc92:	90 0d       	add	r25, r0
   1cc94:	11 24       	eor	r1, r1
   1cc96:	08 95       	ret

0001cc98 <__udivmodqi4>:
   1cc98:	99 1b       	sub	r25, r25
   1cc9a:	79 e0       	ldi	r23, 0x09	; 9
   1cc9c:	04 c0       	rjmp	.+8      	; 0x1cca6 <__udivmodqi4_ep>

0001cc9e <__udivmodqi4_loop>:
   1cc9e:	99 1f       	adc	r25, r25
   1cca0:	96 17       	cp	r25, r22
   1cca2:	08 f0       	brcs	.+2      	; 0x1cca6 <__udivmodqi4_ep>
   1cca4:	96 1b       	sub	r25, r22

0001cca6 <__udivmodqi4_ep>:
   1cca6:	88 1f       	adc	r24, r24
   1cca8:	7a 95       	dec	r23
   1ccaa:	c9 f7       	brne	.-14     	; 0x1cc9e <__udivmodqi4_loop>
   1ccac:	80 95       	com	r24
   1ccae:	08 95       	ret

0001ccb0 <__udivmodhi4>:
   1ccb0:	aa 1b       	sub	r26, r26
   1ccb2:	bb 1b       	sub	r27, r27
   1ccb4:	51 e1       	ldi	r21, 0x11	; 17
   1ccb6:	07 c0       	rjmp	.+14     	; 0x1ccc6 <__udivmodhi4_ep>

0001ccb8 <__udivmodhi4_loop>:
   1ccb8:	aa 1f       	adc	r26, r26
   1ccba:	bb 1f       	adc	r27, r27
   1ccbc:	a6 17       	cp	r26, r22
   1ccbe:	b7 07       	cpc	r27, r23
   1ccc0:	10 f0       	brcs	.+4      	; 0x1ccc6 <__udivmodhi4_ep>
   1ccc2:	a6 1b       	sub	r26, r22
   1ccc4:	b7 0b       	sbc	r27, r23

0001ccc6 <__udivmodhi4_ep>:
   1ccc6:	88 1f       	adc	r24, r24
   1ccc8:	99 1f       	adc	r25, r25
   1ccca:	5a 95       	dec	r21
   1cccc:	a9 f7       	brne	.-22     	; 0x1ccb8 <__udivmodhi4_loop>
   1ccce:	80 95       	com	r24
   1ccd0:	90 95       	com	r25
   1ccd2:	bc 01       	movw	r22, r24
   1ccd4:	cd 01       	movw	r24, r26
   1ccd6:	08 95       	ret

0001ccd8 <__divmodhi4>:
   1ccd8:	97 fb       	bst	r25, 7
   1ccda:	07 2e       	mov	r0, r23
   1ccdc:	16 f4       	brtc	.+4      	; 0x1cce2 <__divmodhi4+0xa>
   1ccde:	00 94       	com	r0
   1cce0:	06 d0       	rcall	.+12     	; 0x1ccee <__divmodhi4_neg1>
   1cce2:	77 fd       	sbrc	r23, 7
   1cce4:	08 d0       	rcall	.+16     	; 0x1ccf6 <__divmodhi4_neg2>
   1cce6:	e4 df       	rcall	.-56     	; 0x1ccb0 <__udivmodhi4>
   1cce8:	07 fc       	sbrc	r0, 7
   1ccea:	05 d0       	rcall	.+10     	; 0x1ccf6 <__divmodhi4_neg2>
   1ccec:	3e f4       	brtc	.+14     	; 0x1ccfc <__divmodhi4_exit>

0001ccee <__divmodhi4_neg1>:
   1ccee:	90 95       	com	r25
   1ccf0:	81 95       	neg	r24
   1ccf2:	9f 4f       	sbci	r25, 0xFF	; 255
   1ccf4:	08 95       	ret

0001ccf6 <__divmodhi4_neg2>:
   1ccf6:	70 95       	com	r23
   1ccf8:	61 95       	neg	r22
   1ccfa:	7f 4f       	sbci	r23, 0xFF	; 255

0001ccfc <__divmodhi4_exit>:
   1ccfc:	08 95       	ret

0001ccfe <__udivmodsi4>:
   1ccfe:	a1 e2       	ldi	r26, 0x21	; 33
   1cd00:	1a 2e       	mov	r1, r26
   1cd02:	aa 1b       	sub	r26, r26
   1cd04:	bb 1b       	sub	r27, r27
   1cd06:	fd 01       	movw	r30, r26
   1cd08:	0d c0       	rjmp	.+26     	; 0x1cd24 <__udivmodsi4_ep>

0001cd0a <__udivmodsi4_loop>:
   1cd0a:	aa 1f       	adc	r26, r26
   1cd0c:	bb 1f       	adc	r27, r27
   1cd0e:	ee 1f       	adc	r30, r30
   1cd10:	ff 1f       	adc	r31, r31
   1cd12:	a2 17       	cp	r26, r18
   1cd14:	b3 07       	cpc	r27, r19
   1cd16:	e4 07       	cpc	r30, r20
   1cd18:	f5 07       	cpc	r31, r21
   1cd1a:	20 f0       	brcs	.+8      	; 0x1cd24 <__udivmodsi4_ep>
   1cd1c:	a2 1b       	sub	r26, r18
   1cd1e:	b3 0b       	sbc	r27, r19
   1cd20:	e4 0b       	sbc	r30, r20
   1cd22:	f5 0b       	sbc	r31, r21

0001cd24 <__udivmodsi4_ep>:
   1cd24:	66 1f       	adc	r22, r22
   1cd26:	77 1f       	adc	r23, r23
   1cd28:	88 1f       	adc	r24, r24
   1cd2a:	99 1f       	adc	r25, r25
   1cd2c:	1a 94       	dec	r1
   1cd2e:	69 f7       	brne	.-38     	; 0x1cd0a <__udivmodsi4_loop>
   1cd30:	60 95       	com	r22
   1cd32:	70 95       	com	r23
   1cd34:	80 95       	com	r24
   1cd36:	90 95       	com	r25
   1cd38:	9b 01       	movw	r18, r22
   1cd3a:	ac 01       	movw	r20, r24
   1cd3c:	bd 01       	movw	r22, r26
   1cd3e:	cf 01       	movw	r24, r30
   1cd40:	08 95       	ret

0001cd42 <__divmodsi4>:
   1cd42:	05 2e       	mov	r0, r21
   1cd44:	97 fb       	bst	r25, 7
   1cd46:	16 f4       	brtc	.+4      	; 0x1cd4c <__divmodsi4+0xa>
   1cd48:	00 94       	com	r0
   1cd4a:	0f d0       	rcall	.+30     	; 0x1cd6a <__negsi2>
   1cd4c:	57 fd       	sbrc	r21, 7
   1cd4e:	05 d0       	rcall	.+10     	; 0x1cd5a <__divmodsi4_neg2>
   1cd50:	d6 df       	rcall	.-84     	; 0x1ccfe <__udivmodsi4>
   1cd52:	07 fc       	sbrc	r0, 7
   1cd54:	02 d0       	rcall	.+4      	; 0x1cd5a <__divmodsi4_neg2>
   1cd56:	46 f4       	brtc	.+16     	; 0x1cd68 <__divmodsi4_exit>
   1cd58:	08 c0       	rjmp	.+16     	; 0x1cd6a <__negsi2>

0001cd5a <__divmodsi4_neg2>:
   1cd5a:	50 95       	com	r21
   1cd5c:	40 95       	com	r20
   1cd5e:	30 95       	com	r19
   1cd60:	21 95       	neg	r18
   1cd62:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd64:	4f 4f       	sbci	r20, 0xFF	; 255
   1cd66:	5f 4f       	sbci	r21, 0xFF	; 255

0001cd68 <__divmodsi4_exit>:
   1cd68:	08 95       	ret

0001cd6a <__negsi2>:
   1cd6a:	90 95       	com	r25
   1cd6c:	80 95       	com	r24
   1cd6e:	70 95       	com	r23
   1cd70:	61 95       	neg	r22
   1cd72:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd74:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd76:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd78:	08 95       	ret

0001cd7a <__tablejump2__>:
   1cd7a:	ee 0f       	add	r30, r30
   1cd7c:	ff 1f       	adc	r31, r31
   1cd7e:	00 24       	eor	r0, r0
   1cd80:	00 1c       	adc	r0, r0
   1cd82:	0b be       	out	0x3b, r0	; 59
   1cd84:	07 90       	elpm	r0, Z+
   1cd86:	f6 91       	elpm	r31, Z
   1cd88:	e0 2d       	mov	r30, r0
   1cd8a:	09 94       	ijmp

0001cd8c <__usmulhisi3>:
   1cd8c:	6f d0       	rcall	.+222    	; 0x1ce6c <__umulhisi3>

0001cd8e <__usmulhisi3_tail>:
   1cd8e:	b7 ff       	sbrs	r27, 7
   1cd90:	08 95       	ret
   1cd92:	82 1b       	sub	r24, r18
   1cd94:	93 0b       	sbc	r25, r19
   1cd96:	08 95       	ret

0001cd98 <__muluhisi3>:
   1cd98:	69 d0       	rcall	.+210    	; 0x1ce6c <__umulhisi3>
   1cd9a:	a5 9f       	mul	r26, r21
   1cd9c:	90 0d       	add	r25, r0
   1cd9e:	b4 9f       	mul	r27, r20
   1cda0:	90 0d       	add	r25, r0
   1cda2:	a4 9f       	mul	r26, r20
   1cda4:	80 0d       	add	r24, r0
   1cda6:	91 1d       	adc	r25, r1
   1cda8:	11 24       	eor	r1, r1
   1cdaa:	08 95       	ret

0001cdac <__mulshisi3>:
   1cdac:	b7 ff       	sbrs	r27, 7
   1cdae:	f4 cf       	rjmp	.-24     	; 0x1cd98 <__muluhisi3>

0001cdb0 <__mulohisi3>:
   1cdb0:	f3 df       	rcall	.-26     	; 0x1cd98 <__muluhisi3>
   1cdb2:	82 1b       	sub	r24, r18
   1cdb4:	93 0b       	sbc	r25, r19
   1cdb6:	08 95       	ret

0001cdb8 <__negdi2>:
   1cdb8:	60 95       	com	r22
   1cdba:	70 95       	com	r23
   1cdbc:	80 95       	com	r24
   1cdbe:	90 95       	com	r25
   1cdc0:	30 95       	com	r19
   1cdc2:	40 95       	com	r20
   1cdc4:	50 95       	com	r21
   1cdc6:	21 95       	neg	r18
   1cdc8:	3f 4f       	sbci	r19, 0xFF	; 255
   1cdca:	4f 4f       	sbci	r20, 0xFF	; 255
   1cdcc:	5f 4f       	sbci	r21, 0xFF	; 255
   1cdce:	6f 4f       	sbci	r22, 0xFF	; 255
   1cdd0:	7f 4f       	sbci	r23, 0xFF	; 255
   1cdd2:	8f 4f       	sbci	r24, 0xFF	; 255
   1cdd4:	9f 4f       	sbci	r25, 0xFF	; 255
   1cdd6:	08 95       	ret

0001cdd8 <__prologue_saves__>:
   1cdd8:	2f 92       	push	r2
   1cdda:	3f 92       	push	r3
   1cddc:	4f 92       	push	r4
   1cdde:	5f 92       	push	r5
   1cde0:	6f 92       	push	r6
   1cde2:	7f 92       	push	r7
   1cde4:	8f 92       	push	r8
   1cde6:	9f 92       	push	r9
   1cde8:	af 92       	push	r10
   1cdea:	bf 92       	push	r11
   1cdec:	cf 92       	push	r12
   1cdee:	df 92       	push	r13
   1cdf0:	ef 92       	push	r14
   1cdf2:	ff 92       	push	r15
   1cdf4:	0f 93       	push	r16
   1cdf6:	1f 93       	push	r17
   1cdf8:	cf 93       	push	r28
   1cdfa:	df 93       	push	r29
   1cdfc:	cd b7       	in	r28, 0x3d	; 61
   1cdfe:	de b7       	in	r29, 0x3e	; 62
   1ce00:	ca 1b       	sub	r28, r26
   1ce02:	db 0b       	sbc	r29, r27
   1ce04:	0f b6       	in	r0, 0x3f	; 63
   1ce06:	f8 94       	cli
   1ce08:	de bf       	out	0x3e, r29	; 62
   1ce0a:	0f be       	out	0x3f, r0	; 63
   1ce0c:	cd bf       	out	0x3d, r28	; 61
   1ce0e:	09 94       	ijmp

0001ce10 <__epilogue_restores__>:
   1ce10:	2a 88       	ldd	r2, Y+18	; 0x12
   1ce12:	39 88       	ldd	r3, Y+17	; 0x11
   1ce14:	48 88       	ldd	r4, Y+16	; 0x10
   1ce16:	5f 84       	ldd	r5, Y+15	; 0x0f
   1ce18:	6e 84       	ldd	r6, Y+14	; 0x0e
   1ce1a:	7d 84       	ldd	r7, Y+13	; 0x0d
   1ce1c:	8c 84       	ldd	r8, Y+12	; 0x0c
   1ce1e:	9b 84       	ldd	r9, Y+11	; 0x0b
   1ce20:	aa 84       	ldd	r10, Y+10	; 0x0a
   1ce22:	b9 84       	ldd	r11, Y+9	; 0x09
   1ce24:	c8 84       	ldd	r12, Y+8	; 0x08
   1ce26:	df 80       	ldd	r13, Y+7	; 0x07
   1ce28:	ee 80       	ldd	r14, Y+6	; 0x06
   1ce2a:	fd 80       	ldd	r15, Y+5	; 0x05
   1ce2c:	0c 81       	ldd	r16, Y+4	; 0x04
   1ce2e:	1b 81       	ldd	r17, Y+3	; 0x03
   1ce30:	aa 81       	ldd	r26, Y+2	; 0x02
   1ce32:	b9 81       	ldd	r27, Y+1	; 0x01
   1ce34:	ce 0f       	add	r28, r30
   1ce36:	d1 1d       	adc	r29, r1
   1ce38:	0f b6       	in	r0, 0x3f	; 63
   1ce3a:	f8 94       	cli
   1ce3c:	de bf       	out	0x3e, r29	; 62
   1ce3e:	0f be       	out	0x3f, r0	; 63
   1ce40:	cd bf       	out	0x3d, r28	; 61
   1ce42:	ed 01       	movw	r28, r26
   1ce44:	08 95       	ret

0001ce46 <__xload_1>:
   1ce46:	57 fd       	sbrc	r21, 7
   1ce48:	03 c0       	rjmp	.+6      	; 0x1ce50 <__xload_1+0xa>
   1ce4a:	5b bf       	out	0x3b, r21	; 59
   1ce4c:	67 91       	elpm	r22, Z+
   1ce4e:	08 95       	ret
   1ce50:	60 81       	ld	r22, Z
   1ce52:	08 95       	ret

0001ce54 <__cmpdi2_s8>:
   1ce54:	00 24       	eor	r0, r0
   1ce56:	a7 fd       	sbrc	r26, 7
   1ce58:	00 94       	com	r0
   1ce5a:	2a 17       	cp	r18, r26
   1ce5c:	30 05       	cpc	r19, r0
   1ce5e:	40 05       	cpc	r20, r0
   1ce60:	50 05       	cpc	r21, r0
   1ce62:	60 05       	cpc	r22, r0
   1ce64:	70 05       	cpc	r23, r0
   1ce66:	80 05       	cpc	r24, r0
   1ce68:	90 05       	cpc	r25, r0
   1ce6a:	08 95       	ret

0001ce6c <__umulhisi3>:
   1ce6c:	a2 9f       	mul	r26, r18
   1ce6e:	b0 01       	movw	r22, r0
   1ce70:	b3 9f       	mul	r27, r19
   1ce72:	c0 01       	movw	r24, r0
   1ce74:	a3 9f       	mul	r26, r19
   1ce76:	70 0d       	add	r23, r0
   1ce78:	81 1d       	adc	r24, r1
   1ce7a:	11 24       	eor	r1, r1
   1ce7c:	91 1d       	adc	r25, r1
   1ce7e:	b2 9f       	mul	r27, r18
   1ce80:	70 0d       	add	r23, r0
   1ce82:	81 1d       	adc	r24, r1
   1ce84:	11 24       	eor	r1, r1
   1ce86:	91 1d       	adc	r25, r1
   1ce88:	08 95       	ret

0001ce8a <__subsf3>:
   1ce8a:	50 58       	subi	r21, 0x80	; 128

0001ce8c <__addsf3>:
   1ce8c:	bb 27       	eor	r27, r27
   1ce8e:	aa 27       	eor	r26, r26
   1ce90:	0e d0       	rcall	.+28     	; 0x1ceae <__addsf3x>
   1ce92:	75 c1       	rjmp	.+746    	; 0x1d17e <__fp_round>
   1ce94:	66 d1       	rcall	.+716    	; 0x1d162 <__fp_pscA>
   1ce96:	30 f0       	brcs	.+12     	; 0x1cea4 <__addsf3+0x18>
   1ce98:	6b d1       	rcall	.+726    	; 0x1d170 <__fp_pscB>
   1ce9a:	20 f0       	brcs	.+8      	; 0x1cea4 <__addsf3+0x18>
   1ce9c:	31 f4       	brne	.+12     	; 0x1ceaa <__addsf3+0x1e>
   1ce9e:	9f 3f       	cpi	r25, 0xFF	; 255
   1cea0:	11 f4       	brne	.+4      	; 0x1cea6 <__addsf3+0x1a>
   1cea2:	1e f4       	brtc	.+6      	; 0x1ceaa <__addsf3+0x1e>
   1cea4:	5b c1       	rjmp	.+694    	; 0x1d15c <__fp_nan>
   1cea6:	0e f4       	brtc	.+2      	; 0x1ceaa <__addsf3+0x1e>
   1cea8:	e0 95       	com	r30
   1ceaa:	e7 fb       	bst	r30, 7
   1ceac:	51 c1       	rjmp	.+674    	; 0x1d150 <__fp_inf>

0001ceae <__addsf3x>:
   1ceae:	e9 2f       	mov	r30, r25
   1ceb0:	77 d1       	rcall	.+750    	; 0x1d1a0 <__fp_split3>
   1ceb2:	80 f3       	brcs	.-32     	; 0x1ce94 <__addsf3+0x8>
   1ceb4:	ba 17       	cp	r27, r26
   1ceb6:	62 07       	cpc	r22, r18
   1ceb8:	73 07       	cpc	r23, r19
   1ceba:	84 07       	cpc	r24, r20
   1cebc:	95 07       	cpc	r25, r21
   1cebe:	18 f0       	brcs	.+6      	; 0x1cec6 <__addsf3x+0x18>
   1cec0:	71 f4       	brne	.+28     	; 0x1cede <__addsf3x+0x30>
   1cec2:	9e f5       	brtc	.+102    	; 0x1cf2a <__addsf3x+0x7c>
   1cec4:	8f c1       	rjmp	.+798    	; 0x1d1e4 <__fp_zero>
   1cec6:	0e f4       	brtc	.+2      	; 0x1ceca <__addsf3x+0x1c>
   1cec8:	e0 95       	com	r30
   1ceca:	0b 2e       	mov	r0, r27
   1cecc:	ba 2f       	mov	r27, r26
   1cece:	a0 2d       	mov	r26, r0
   1ced0:	0b 01       	movw	r0, r22
   1ced2:	b9 01       	movw	r22, r18
   1ced4:	90 01       	movw	r18, r0
   1ced6:	0c 01       	movw	r0, r24
   1ced8:	ca 01       	movw	r24, r20
   1ceda:	a0 01       	movw	r20, r0
   1cedc:	11 24       	eor	r1, r1
   1cede:	ff 27       	eor	r31, r31
   1cee0:	59 1b       	sub	r21, r25
   1cee2:	99 f0       	breq	.+38     	; 0x1cf0a <__addsf3x+0x5c>
   1cee4:	59 3f       	cpi	r21, 0xF9	; 249
   1cee6:	50 f4       	brcc	.+20     	; 0x1cefc <__addsf3x+0x4e>
   1cee8:	50 3e       	cpi	r21, 0xE0	; 224
   1ceea:	68 f1       	brcs	.+90     	; 0x1cf46 <__addsf3x+0x98>
   1ceec:	1a 16       	cp	r1, r26
   1ceee:	f0 40       	sbci	r31, 0x00	; 0
   1cef0:	a2 2f       	mov	r26, r18
   1cef2:	23 2f       	mov	r18, r19
   1cef4:	34 2f       	mov	r19, r20
   1cef6:	44 27       	eor	r20, r20
   1cef8:	58 5f       	subi	r21, 0xF8	; 248
   1cefa:	f3 cf       	rjmp	.-26     	; 0x1cee2 <__addsf3x+0x34>
   1cefc:	46 95       	lsr	r20
   1cefe:	37 95       	ror	r19
   1cf00:	27 95       	ror	r18
   1cf02:	a7 95       	ror	r26
   1cf04:	f0 40       	sbci	r31, 0x00	; 0
   1cf06:	53 95       	inc	r21
   1cf08:	c9 f7       	brne	.-14     	; 0x1cefc <__addsf3x+0x4e>
   1cf0a:	7e f4       	brtc	.+30     	; 0x1cf2a <__addsf3x+0x7c>
   1cf0c:	1f 16       	cp	r1, r31
   1cf0e:	ba 0b       	sbc	r27, r26
   1cf10:	62 0b       	sbc	r22, r18
   1cf12:	73 0b       	sbc	r23, r19
   1cf14:	84 0b       	sbc	r24, r20
   1cf16:	ba f0       	brmi	.+46     	; 0x1cf46 <__addsf3x+0x98>
   1cf18:	91 50       	subi	r25, 0x01	; 1
   1cf1a:	a1 f0       	breq	.+40     	; 0x1cf44 <__addsf3x+0x96>
   1cf1c:	ff 0f       	add	r31, r31
   1cf1e:	bb 1f       	adc	r27, r27
   1cf20:	66 1f       	adc	r22, r22
   1cf22:	77 1f       	adc	r23, r23
   1cf24:	88 1f       	adc	r24, r24
   1cf26:	c2 f7       	brpl	.-16     	; 0x1cf18 <__addsf3x+0x6a>
   1cf28:	0e c0       	rjmp	.+28     	; 0x1cf46 <__addsf3x+0x98>
   1cf2a:	ba 0f       	add	r27, r26
   1cf2c:	62 1f       	adc	r22, r18
   1cf2e:	73 1f       	adc	r23, r19
   1cf30:	84 1f       	adc	r24, r20
   1cf32:	48 f4       	brcc	.+18     	; 0x1cf46 <__addsf3x+0x98>
   1cf34:	87 95       	ror	r24
   1cf36:	77 95       	ror	r23
   1cf38:	67 95       	ror	r22
   1cf3a:	b7 95       	ror	r27
   1cf3c:	f7 95       	ror	r31
   1cf3e:	9e 3f       	cpi	r25, 0xFE	; 254
   1cf40:	08 f0       	brcs	.+2      	; 0x1cf44 <__addsf3x+0x96>
   1cf42:	b3 cf       	rjmp	.-154    	; 0x1ceaa <__addsf3+0x1e>
   1cf44:	93 95       	inc	r25
   1cf46:	88 0f       	add	r24, r24
   1cf48:	08 f0       	brcs	.+2      	; 0x1cf4c <__addsf3x+0x9e>
   1cf4a:	99 27       	eor	r25, r25
   1cf4c:	ee 0f       	add	r30, r30
   1cf4e:	97 95       	ror	r25
   1cf50:	87 95       	ror	r24
   1cf52:	08 95       	ret

0001cf54 <__cmpsf2>:
   1cf54:	d9 d0       	rcall	.+434    	; 0x1d108 <__fp_cmp>
   1cf56:	08 f4       	brcc	.+2      	; 0x1cf5a <__cmpsf2+0x6>
   1cf58:	81 e0       	ldi	r24, 0x01	; 1
   1cf5a:	08 95       	ret

0001cf5c <__divsf3>:
   1cf5c:	0c d0       	rcall	.+24     	; 0x1cf76 <__divsf3x>
   1cf5e:	0f c1       	rjmp	.+542    	; 0x1d17e <__fp_round>
   1cf60:	07 d1       	rcall	.+526    	; 0x1d170 <__fp_pscB>
   1cf62:	40 f0       	brcs	.+16     	; 0x1cf74 <__divsf3+0x18>
   1cf64:	fe d0       	rcall	.+508    	; 0x1d162 <__fp_pscA>
   1cf66:	30 f0       	brcs	.+12     	; 0x1cf74 <__divsf3+0x18>
   1cf68:	21 f4       	brne	.+8      	; 0x1cf72 <__divsf3+0x16>
   1cf6a:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf6c:	19 f0       	breq	.+6      	; 0x1cf74 <__divsf3+0x18>
   1cf6e:	f0 c0       	rjmp	.+480    	; 0x1d150 <__fp_inf>
   1cf70:	51 11       	cpse	r21, r1
   1cf72:	39 c1       	rjmp	.+626    	; 0x1d1e6 <__fp_szero>
   1cf74:	f3 c0       	rjmp	.+486    	; 0x1d15c <__fp_nan>

0001cf76 <__divsf3x>:
   1cf76:	14 d1       	rcall	.+552    	; 0x1d1a0 <__fp_split3>
   1cf78:	98 f3       	brcs	.-26     	; 0x1cf60 <__divsf3+0x4>

0001cf7a <__divsf3_pse>:
   1cf7a:	99 23       	and	r25, r25
   1cf7c:	c9 f3       	breq	.-14     	; 0x1cf70 <__divsf3+0x14>
   1cf7e:	55 23       	and	r21, r21
   1cf80:	b1 f3       	breq	.-20     	; 0x1cf6e <__divsf3+0x12>
   1cf82:	95 1b       	sub	r25, r21
   1cf84:	55 0b       	sbc	r21, r21
   1cf86:	bb 27       	eor	r27, r27
   1cf88:	aa 27       	eor	r26, r26
   1cf8a:	62 17       	cp	r22, r18
   1cf8c:	73 07       	cpc	r23, r19
   1cf8e:	84 07       	cpc	r24, r20
   1cf90:	38 f0       	brcs	.+14     	; 0x1cfa0 <__divsf3_pse+0x26>
   1cf92:	9f 5f       	subi	r25, 0xFF	; 255
   1cf94:	5f 4f       	sbci	r21, 0xFF	; 255
   1cf96:	22 0f       	add	r18, r18
   1cf98:	33 1f       	adc	r19, r19
   1cf9a:	44 1f       	adc	r20, r20
   1cf9c:	aa 1f       	adc	r26, r26
   1cf9e:	a9 f3       	breq	.-22     	; 0x1cf8a <__divsf3_pse+0x10>
   1cfa0:	33 d0       	rcall	.+102    	; 0x1d008 <__divsf3_pse+0x8e>
   1cfa2:	0e 2e       	mov	r0, r30
   1cfa4:	3a f0       	brmi	.+14     	; 0x1cfb4 <__divsf3_pse+0x3a>
   1cfa6:	e0 e8       	ldi	r30, 0x80	; 128
   1cfa8:	30 d0       	rcall	.+96     	; 0x1d00a <__divsf3_pse+0x90>
   1cfaa:	91 50       	subi	r25, 0x01	; 1
   1cfac:	50 40       	sbci	r21, 0x00	; 0
   1cfae:	e6 95       	lsr	r30
   1cfb0:	00 1c       	adc	r0, r0
   1cfb2:	ca f7       	brpl	.-14     	; 0x1cfa6 <__divsf3_pse+0x2c>
   1cfb4:	29 d0       	rcall	.+82     	; 0x1d008 <__divsf3_pse+0x8e>
   1cfb6:	fe 2f       	mov	r31, r30
   1cfb8:	27 d0       	rcall	.+78     	; 0x1d008 <__divsf3_pse+0x8e>
   1cfba:	66 0f       	add	r22, r22
   1cfbc:	77 1f       	adc	r23, r23
   1cfbe:	88 1f       	adc	r24, r24
   1cfc0:	bb 1f       	adc	r27, r27
   1cfc2:	26 17       	cp	r18, r22
   1cfc4:	37 07       	cpc	r19, r23
   1cfc6:	48 07       	cpc	r20, r24
   1cfc8:	ab 07       	cpc	r26, r27
   1cfca:	b0 e8       	ldi	r27, 0x80	; 128
   1cfcc:	09 f0       	breq	.+2      	; 0x1cfd0 <__divsf3_pse+0x56>
   1cfce:	bb 0b       	sbc	r27, r27
   1cfd0:	80 2d       	mov	r24, r0
   1cfd2:	bf 01       	movw	r22, r30
   1cfd4:	ff 27       	eor	r31, r31
   1cfd6:	93 58       	subi	r25, 0x83	; 131
   1cfd8:	5f 4f       	sbci	r21, 0xFF	; 255
   1cfda:	2a f0       	brmi	.+10     	; 0x1cfe6 <__divsf3_pse+0x6c>
   1cfdc:	9e 3f       	cpi	r25, 0xFE	; 254
   1cfde:	51 05       	cpc	r21, r1
   1cfe0:	68 f0       	brcs	.+26     	; 0x1cffc <__divsf3_pse+0x82>
   1cfe2:	b6 c0       	rjmp	.+364    	; 0x1d150 <__fp_inf>
   1cfe4:	00 c1       	rjmp	.+512    	; 0x1d1e6 <__fp_szero>
   1cfe6:	5f 3f       	cpi	r21, 0xFF	; 255
   1cfe8:	ec f3       	brlt	.-6      	; 0x1cfe4 <__divsf3_pse+0x6a>
   1cfea:	98 3e       	cpi	r25, 0xE8	; 232
   1cfec:	dc f3       	brlt	.-10     	; 0x1cfe4 <__divsf3_pse+0x6a>
   1cfee:	86 95       	lsr	r24
   1cff0:	77 95       	ror	r23
   1cff2:	67 95       	ror	r22
   1cff4:	b7 95       	ror	r27
   1cff6:	f7 95       	ror	r31
   1cff8:	9f 5f       	subi	r25, 0xFF	; 255
   1cffa:	c9 f7       	brne	.-14     	; 0x1cfee <__divsf3_pse+0x74>
   1cffc:	88 0f       	add	r24, r24
   1cffe:	91 1d       	adc	r25, r1
   1d000:	96 95       	lsr	r25
   1d002:	87 95       	ror	r24
   1d004:	97 f9       	bld	r25, 7
   1d006:	08 95       	ret
   1d008:	e1 e0       	ldi	r30, 0x01	; 1
   1d00a:	66 0f       	add	r22, r22
   1d00c:	77 1f       	adc	r23, r23
   1d00e:	88 1f       	adc	r24, r24
   1d010:	bb 1f       	adc	r27, r27
   1d012:	62 17       	cp	r22, r18
   1d014:	73 07       	cpc	r23, r19
   1d016:	84 07       	cpc	r24, r20
   1d018:	ba 07       	cpc	r27, r26
   1d01a:	20 f0       	brcs	.+8      	; 0x1d024 <__divsf3_pse+0xaa>
   1d01c:	62 1b       	sub	r22, r18
   1d01e:	73 0b       	sbc	r23, r19
   1d020:	84 0b       	sbc	r24, r20
   1d022:	ba 0b       	sbc	r27, r26
   1d024:	ee 1f       	adc	r30, r30
   1d026:	88 f7       	brcc	.-30     	; 0x1d00a <__divsf3_pse+0x90>
   1d028:	e0 95       	com	r30
   1d02a:	08 95       	ret

0001d02c <__fixsfsi>:
   1d02c:	04 d0       	rcall	.+8      	; 0x1d036 <__fixunssfsi>
   1d02e:	68 94       	set
   1d030:	b1 11       	cpse	r27, r1
   1d032:	d9 c0       	rjmp	.+434    	; 0x1d1e6 <__fp_szero>
   1d034:	08 95       	ret

0001d036 <__fixunssfsi>:
   1d036:	bc d0       	rcall	.+376    	; 0x1d1b0 <__fp_splitA>
   1d038:	88 f0       	brcs	.+34     	; 0x1d05c <__fixunssfsi+0x26>
   1d03a:	9f 57       	subi	r25, 0x7F	; 127
   1d03c:	90 f0       	brcs	.+36     	; 0x1d062 <__fixunssfsi+0x2c>
   1d03e:	b9 2f       	mov	r27, r25
   1d040:	99 27       	eor	r25, r25
   1d042:	b7 51       	subi	r27, 0x17	; 23
   1d044:	a0 f0       	brcs	.+40     	; 0x1d06e <__fixunssfsi+0x38>
   1d046:	d1 f0       	breq	.+52     	; 0x1d07c <__fixunssfsi+0x46>
   1d048:	66 0f       	add	r22, r22
   1d04a:	77 1f       	adc	r23, r23
   1d04c:	88 1f       	adc	r24, r24
   1d04e:	99 1f       	adc	r25, r25
   1d050:	1a f0       	brmi	.+6      	; 0x1d058 <__fixunssfsi+0x22>
   1d052:	ba 95       	dec	r27
   1d054:	c9 f7       	brne	.-14     	; 0x1d048 <__fixunssfsi+0x12>
   1d056:	12 c0       	rjmp	.+36     	; 0x1d07c <__fixunssfsi+0x46>
   1d058:	b1 30       	cpi	r27, 0x01	; 1
   1d05a:	81 f0       	breq	.+32     	; 0x1d07c <__fixunssfsi+0x46>
   1d05c:	c3 d0       	rcall	.+390    	; 0x1d1e4 <__fp_zero>
   1d05e:	b1 e0       	ldi	r27, 0x01	; 1
   1d060:	08 95       	ret
   1d062:	c0 c0       	rjmp	.+384    	; 0x1d1e4 <__fp_zero>
   1d064:	67 2f       	mov	r22, r23
   1d066:	78 2f       	mov	r23, r24
   1d068:	88 27       	eor	r24, r24
   1d06a:	b8 5f       	subi	r27, 0xF8	; 248
   1d06c:	39 f0       	breq	.+14     	; 0x1d07c <__fixunssfsi+0x46>
   1d06e:	b9 3f       	cpi	r27, 0xF9	; 249
   1d070:	cc f3       	brlt	.-14     	; 0x1d064 <__fixunssfsi+0x2e>
   1d072:	86 95       	lsr	r24
   1d074:	77 95       	ror	r23
   1d076:	67 95       	ror	r22
   1d078:	b3 95       	inc	r27
   1d07a:	d9 f7       	brne	.-10     	; 0x1d072 <__fixunssfsi+0x3c>
   1d07c:	3e f4       	brtc	.+14     	; 0x1d08c <__fixunssfsi+0x56>
   1d07e:	90 95       	com	r25
   1d080:	80 95       	com	r24
   1d082:	70 95       	com	r23
   1d084:	61 95       	neg	r22
   1d086:	7f 4f       	sbci	r23, 0xFF	; 255
   1d088:	8f 4f       	sbci	r24, 0xFF	; 255
   1d08a:	9f 4f       	sbci	r25, 0xFF	; 255
   1d08c:	08 95       	ret

0001d08e <__floatunsisf>:
   1d08e:	e8 94       	clt
   1d090:	09 c0       	rjmp	.+18     	; 0x1d0a4 <__floatsisf+0x12>

0001d092 <__floatsisf>:
   1d092:	97 fb       	bst	r25, 7
   1d094:	3e f4       	brtc	.+14     	; 0x1d0a4 <__floatsisf+0x12>
   1d096:	90 95       	com	r25
   1d098:	80 95       	com	r24
   1d09a:	70 95       	com	r23
   1d09c:	61 95       	neg	r22
   1d09e:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0a0:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0a2:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0a4:	99 23       	and	r25, r25
   1d0a6:	a9 f0       	breq	.+42     	; 0x1d0d2 <__floatsisf+0x40>
   1d0a8:	f9 2f       	mov	r31, r25
   1d0aa:	96 e9       	ldi	r25, 0x96	; 150
   1d0ac:	bb 27       	eor	r27, r27
   1d0ae:	93 95       	inc	r25
   1d0b0:	f6 95       	lsr	r31
   1d0b2:	87 95       	ror	r24
   1d0b4:	77 95       	ror	r23
   1d0b6:	67 95       	ror	r22
   1d0b8:	b7 95       	ror	r27
   1d0ba:	f1 11       	cpse	r31, r1
   1d0bc:	f8 cf       	rjmp	.-16     	; 0x1d0ae <__floatsisf+0x1c>
   1d0be:	fa f4       	brpl	.+62     	; 0x1d0fe <__floatsisf+0x6c>
   1d0c0:	bb 0f       	add	r27, r27
   1d0c2:	11 f4       	brne	.+4      	; 0x1d0c8 <__floatsisf+0x36>
   1d0c4:	60 ff       	sbrs	r22, 0
   1d0c6:	1b c0       	rjmp	.+54     	; 0x1d0fe <__floatsisf+0x6c>
   1d0c8:	6f 5f       	subi	r22, 0xFF	; 255
   1d0ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0cc:	8f 4f       	sbci	r24, 0xFF	; 255
   1d0ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1d0d0:	16 c0       	rjmp	.+44     	; 0x1d0fe <__floatsisf+0x6c>
   1d0d2:	88 23       	and	r24, r24
   1d0d4:	11 f0       	breq	.+4      	; 0x1d0da <__floatsisf+0x48>
   1d0d6:	96 e9       	ldi	r25, 0x96	; 150
   1d0d8:	11 c0       	rjmp	.+34     	; 0x1d0fc <__floatsisf+0x6a>
   1d0da:	77 23       	and	r23, r23
   1d0dc:	21 f0       	breq	.+8      	; 0x1d0e6 <__floatsisf+0x54>
   1d0de:	9e e8       	ldi	r25, 0x8E	; 142
   1d0e0:	87 2f       	mov	r24, r23
   1d0e2:	76 2f       	mov	r23, r22
   1d0e4:	05 c0       	rjmp	.+10     	; 0x1d0f0 <__floatsisf+0x5e>
   1d0e6:	66 23       	and	r22, r22
   1d0e8:	71 f0       	breq	.+28     	; 0x1d106 <__floatsisf+0x74>
   1d0ea:	96 e8       	ldi	r25, 0x86	; 134
   1d0ec:	86 2f       	mov	r24, r22
   1d0ee:	70 e0       	ldi	r23, 0x00	; 0
   1d0f0:	60 e0       	ldi	r22, 0x00	; 0
   1d0f2:	2a f0       	brmi	.+10     	; 0x1d0fe <__floatsisf+0x6c>
   1d0f4:	9a 95       	dec	r25
   1d0f6:	66 0f       	add	r22, r22
   1d0f8:	77 1f       	adc	r23, r23
   1d0fa:	88 1f       	adc	r24, r24
   1d0fc:	da f7       	brpl	.-10     	; 0x1d0f4 <__floatsisf+0x62>
   1d0fe:	88 0f       	add	r24, r24
   1d100:	96 95       	lsr	r25
   1d102:	87 95       	ror	r24
   1d104:	97 f9       	bld	r25, 7
   1d106:	08 95       	ret

0001d108 <__fp_cmp>:
   1d108:	99 0f       	add	r25, r25
   1d10a:	00 08       	sbc	r0, r0
   1d10c:	55 0f       	add	r21, r21
   1d10e:	aa 0b       	sbc	r26, r26
   1d110:	e0 e8       	ldi	r30, 0x80	; 128
   1d112:	fe ef       	ldi	r31, 0xFE	; 254
   1d114:	16 16       	cp	r1, r22
   1d116:	17 06       	cpc	r1, r23
   1d118:	e8 07       	cpc	r30, r24
   1d11a:	f9 07       	cpc	r31, r25
   1d11c:	c0 f0       	brcs	.+48     	; 0x1d14e <__fp_cmp+0x46>
   1d11e:	12 16       	cp	r1, r18
   1d120:	13 06       	cpc	r1, r19
   1d122:	e4 07       	cpc	r30, r20
   1d124:	f5 07       	cpc	r31, r21
   1d126:	98 f0       	brcs	.+38     	; 0x1d14e <__fp_cmp+0x46>
   1d128:	62 1b       	sub	r22, r18
   1d12a:	73 0b       	sbc	r23, r19
   1d12c:	84 0b       	sbc	r24, r20
   1d12e:	95 0b       	sbc	r25, r21
   1d130:	39 f4       	brne	.+14     	; 0x1d140 <__fp_cmp+0x38>
   1d132:	0a 26       	eor	r0, r26
   1d134:	61 f0       	breq	.+24     	; 0x1d14e <__fp_cmp+0x46>
   1d136:	23 2b       	or	r18, r19
   1d138:	24 2b       	or	r18, r20
   1d13a:	25 2b       	or	r18, r21
   1d13c:	21 f4       	brne	.+8      	; 0x1d146 <__fp_cmp+0x3e>
   1d13e:	08 95       	ret
   1d140:	0a 26       	eor	r0, r26
   1d142:	09 f4       	brne	.+2      	; 0x1d146 <__fp_cmp+0x3e>
   1d144:	a1 40       	sbci	r26, 0x01	; 1
   1d146:	a6 95       	lsr	r26
   1d148:	8f ef       	ldi	r24, 0xFF	; 255
   1d14a:	81 1d       	adc	r24, r1
   1d14c:	81 1d       	adc	r24, r1
   1d14e:	08 95       	ret

0001d150 <__fp_inf>:
   1d150:	97 f9       	bld	r25, 7
   1d152:	9f 67       	ori	r25, 0x7F	; 127
   1d154:	80 e8       	ldi	r24, 0x80	; 128
   1d156:	70 e0       	ldi	r23, 0x00	; 0
   1d158:	60 e0       	ldi	r22, 0x00	; 0
   1d15a:	08 95       	ret

0001d15c <__fp_nan>:
   1d15c:	9f ef       	ldi	r25, 0xFF	; 255
   1d15e:	80 ec       	ldi	r24, 0xC0	; 192
   1d160:	08 95       	ret

0001d162 <__fp_pscA>:
   1d162:	00 24       	eor	r0, r0
   1d164:	0a 94       	dec	r0
   1d166:	16 16       	cp	r1, r22
   1d168:	17 06       	cpc	r1, r23
   1d16a:	18 06       	cpc	r1, r24
   1d16c:	09 06       	cpc	r0, r25
   1d16e:	08 95       	ret

0001d170 <__fp_pscB>:
   1d170:	00 24       	eor	r0, r0
   1d172:	0a 94       	dec	r0
   1d174:	12 16       	cp	r1, r18
   1d176:	13 06       	cpc	r1, r19
   1d178:	14 06       	cpc	r1, r20
   1d17a:	05 06       	cpc	r0, r21
   1d17c:	08 95       	ret

0001d17e <__fp_round>:
   1d17e:	09 2e       	mov	r0, r25
   1d180:	03 94       	inc	r0
   1d182:	00 0c       	add	r0, r0
   1d184:	11 f4       	brne	.+4      	; 0x1d18a <__fp_round+0xc>
   1d186:	88 23       	and	r24, r24
   1d188:	52 f0       	brmi	.+20     	; 0x1d19e <__fp_round+0x20>
   1d18a:	bb 0f       	add	r27, r27
   1d18c:	40 f4       	brcc	.+16     	; 0x1d19e <__fp_round+0x20>
   1d18e:	bf 2b       	or	r27, r31
   1d190:	11 f4       	brne	.+4      	; 0x1d196 <__fp_round+0x18>
   1d192:	60 ff       	sbrs	r22, 0
   1d194:	04 c0       	rjmp	.+8      	; 0x1d19e <__fp_round+0x20>
   1d196:	6f 5f       	subi	r22, 0xFF	; 255
   1d198:	7f 4f       	sbci	r23, 0xFF	; 255
   1d19a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d19c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d19e:	08 95       	ret

0001d1a0 <__fp_split3>:
   1d1a0:	57 fd       	sbrc	r21, 7
   1d1a2:	90 58       	subi	r25, 0x80	; 128
   1d1a4:	44 0f       	add	r20, r20
   1d1a6:	55 1f       	adc	r21, r21
   1d1a8:	59 f0       	breq	.+22     	; 0x1d1c0 <__fp_splitA+0x10>
   1d1aa:	5f 3f       	cpi	r21, 0xFF	; 255
   1d1ac:	71 f0       	breq	.+28     	; 0x1d1ca <__fp_splitA+0x1a>
   1d1ae:	47 95       	ror	r20

0001d1b0 <__fp_splitA>:
   1d1b0:	88 0f       	add	r24, r24
   1d1b2:	97 fb       	bst	r25, 7
   1d1b4:	99 1f       	adc	r25, r25
   1d1b6:	61 f0       	breq	.+24     	; 0x1d1d0 <__fp_splitA+0x20>
   1d1b8:	9f 3f       	cpi	r25, 0xFF	; 255
   1d1ba:	79 f0       	breq	.+30     	; 0x1d1da <__fp_splitA+0x2a>
   1d1bc:	87 95       	ror	r24
   1d1be:	08 95       	ret
   1d1c0:	12 16       	cp	r1, r18
   1d1c2:	13 06       	cpc	r1, r19
   1d1c4:	14 06       	cpc	r1, r20
   1d1c6:	55 1f       	adc	r21, r21
   1d1c8:	f2 cf       	rjmp	.-28     	; 0x1d1ae <__fp_split3+0xe>
   1d1ca:	46 95       	lsr	r20
   1d1cc:	f1 df       	rcall	.-30     	; 0x1d1b0 <__fp_splitA>
   1d1ce:	08 c0       	rjmp	.+16     	; 0x1d1e0 <__fp_splitA+0x30>
   1d1d0:	16 16       	cp	r1, r22
   1d1d2:	17 06       	cpc	r1, r23
   1d1d4:	18 06       	cpc	r1, r24
   1d1d6:	99 1f       	adc	r25, r25
   1d1d8:	f1 cf       	rjmp	.-30     	; 0x1d1bc <__fp_splitA+0xc>
   1d1da:	86 95       	lsr	r24
   1d1dc:	71 05       	cpc	r23, r1
   1d1de:	61 05       	cpc	r22, r1
   1d1e0:	08 94       	sec
   1d1e2:	08 95       	ret

0001d1e4 <__fp_zero>:
   1d1e4:	e8 94       	clt

0001d1e6 <__fp_szero>:
   1d1e6:	bb 27       	eor	r27, r27
   1d1e8:	66 27       	eor	r22, r22
   1d1ea:	77 27       	eor	r23, r23
   1d1ec:	cb 01       	movw	r24, r22
   1d1ee:	97 f9       	bld	r25, 7
   1d1f0:	08 95       	ret

0001d1f2 <__gesf2>:
   1d1f2:	8a df       	rcall	.-236    	; 0x1d108 <__fp_cmp>
   1d1f4:	08 f4       	brcc	.+2      	; 0x1d1f8 <__gesf2+0x6>
   1d1f6:	8f ef       	ldi	r24, 0xFF	; 255
   1d1f8:	08 95       	ret

0001d1fa <__mulsf3>:
   1d1fa:	0b d0       	rcall	.+22     	; 0x1d212 <__mulsf3x>
   1d1fc:	c0 cf       	rjmp	.-128    	; 0x1d17e <__fp_round>
   1d1fe:	b1 df       	rcall	.-158    	; 0x1d162 <__fp_pscA>
   1d200:	28 f0       	brcs	.+10     	; 0x1d20c <__mulsf3+0x12>
   1d202:	b6 df       	rcall	.-148    	; 0x1d170 <__fp_pscB>
   1d204:	18 f0       	brcs	.+6      	; 0x1d20c <__mulsf3+0x12>
   1d206:	95 23       	and	r25, r21
   1d208:	09 f0       	breq	.+2      	; 0x1d20c <__mulsf3+0x12>
   1d20a:	a2 cf       	rjmp	.-188    	; 0x1d150 <__fp_inf>
   1d20c:	a7 cf       	rjmp	.-178    	; 0x1d15c <__fp_nan>
   1d20e:	11 24       	eor	r1, r1
   1d210:	ea cf       	rjmp	.-44     	; 0x1d1e6 <__fp_szero>

0001d212 <__mulsf3x>:
   1d212:	c6 df       	rcall	.-116    	; 0x1d1a0 <__fp_split3>
   1d214:	a0 f3       	brcs	.-24     	; 0x1d1fe <__mulsf3+0x4>

0001d216 <__mulsf3_pse>:
   1d216:	95 9f       	mul	r25, r21
   1d218:	d1 f3       	breq	.-12     	; 0x1d20e <__mulsf3+0x14>
   1d21a:	95 0f       	add	r25, r21
   1d21c:	50 e0       	ldi	r21, 0x00	; 0
   1d21e:	55 1f       	adc	r21, r21
   1d220:	62 9f       	mul	r22, r18
   1d222:	f0 01       	movw	r30, r0
   1d224:	72 9f       	mul	r23, r18
   1d226:	bb 27       	eor	r27, r27
   1d228:	f0 0d       	add	r31, r0
   1d22a:	b1 1d       	adc	r27, r1
   1d22c:	63 9f       	mul	r22, r19
   1d22e:	aa 27       	eor	r26, r26
   1d230:	f0 0d       	add	r31, r0
   1d232:	b1 1d       	adc	r27, r1
   1d234:	aa 1f       	adc	r26, r26
   1d236:	64 9f       	mul	r22, r20
   1d238:	66 27       	eor	r22, r22
   1d23a:	b0 0d       	add	r27, r0
   1d23c:	a1 1d       	adc	r26, r1
   1d23e:	66 1f       	adc	r22, r22
   1d240:	82 9f       	mul	r24, r18
   1d242:	22 27       	eor	r18, r18
   1d244:	b0 0d       	add	r27, r0
   1d246:	a1 1d       	adc	r26, r1
   1d248:	62 1f       	adc	r22, r18
   1d24a:	73 9f       	mul	r23, r19
   1d24c:	b0 0d       	add	r27, r0
   1d24e:	a1 1d       	adc	r26, r1
   1d250:	62 1f       	adc	r22, r18
   1d252:	83 9f       	mul	r24, r19
   1d254:	a0 0d       	add	r26, r0
   1d256:	61 1d       	adc	r22, r1
   1d258:	22 1f       	adc	r18, r18
   1d25a:	74 9f       	mul	r23, r20
   1d25c:	33 27       	eor	r19, r19
   1d25e:	a0 0d       	add	r26, r0
   1d260:	61 1d       	adc	r22, r1
   1d262:	23 1f       	adc	r18, r19
   1d264:	84 9f       	mul	r24, r20
   1d266:	60 0d       	add	r22, r0
   1d268:	21 1d       	adc	r18, r1
   1d26a:	82 2f       	mov	r24, r18
   1d26c:	76 2f       	mov	r23, r22
   1d26e:	6a 2f       	mov	r22, r26
   1d270:	11 24       	eor	r1, r1
   1d272:	9f 57       	subi	r25, 0x7F	; 127
   1d274:	50 40       	sbci	r21, 0x00	; 0
   1d276:	8a f0       	brmi	.+34     	; 0x1d29a <__mulsf3_pse+0x84>
   1d278:	e1 f0       	breq	.+56     	; 0x1d2b2 <__mulsf3_pse+0x9c>
   1d27a:	88 23       	and	r24, r24
   1d27c:	4a f0       	brmi	.+18     	; 0x1d290 <__mulsf3_pse+0x7a>
   1d27e:	ee 0f       	add	r30, r30
   1d280:	ff 1f       	adc	r31, r31
   1d282:	bb 1f       	adc	r27, r27
   1d284:	66 1f       	adc	r22, r22
   1d286:	77 1f       	adc	r23, r23
   1d288:	88 1f       	adc	r24, r24
   1d28a:	91 50       	subi	r25, 0x01	; 1
   1d28c:	50 40       	sbci	r21, 0x00	; 0
   1d28e:	a9 f7       	brne	.-22     	; 0x1d27a <__mulsf3_pse+0x64>
   1d290:	9e 3f       	cpi	r25, 0xFE	; 254
   1d292:	51 05       	cpc	r21, r1
   1d294:	70 f0       	brcs	.+28     	; 0x1d2b2 <__mulsf3_pse+0x9c>
   1d296:	5c cf       	rjmp	.-328    	; 0x1d150 <__fp_inf>
   1d298:	a6 cf       	rjmp	.-180    	; 0x1d1e6 <__fp_szero>
   1d29a:	5f 3f       	cpi	r21, 0xFF	; 255
   1d29c:	ec f3       	brlt	.-6      	; 0x1d298 <__mulsf3_pse+0x82>
   1d29e:	98 3e       	cpi	r25, 0xE8	; 232
   1d2a0:	dc f3       	brlt	.-10     	; 0x1d298 <__mulsf3_pse+0x82>
   1d2a2:	86 95       	lsr	r24
   1d2a4:	77 95       	ror	r23
   1d2a6:	67 95       	ror	r22
   1d2a8:	b7 95       	ror	r27
   1d2aa:	f7 95       	ror	r31
   1d2ac:	e7 95       	ror	r30
   1d2ae:	9f 5f       	subi	r25, 0xFF	; 255
   1d2b0:	c1 f7       	brne	.-16     	; 0x1d2a2 <__mulsf3_pse+0x8c>
   1d2b2:	fe 2b       	or	r31, r30
   1d2b4:	88 0f       	add	r24, r24
   1d2b6:	91 1d       	adc	r25, r1
   1d2b8:	96 95       	lsr	r25
   1d2ba:	87 95       	ror	r24
   1d2bc:	97 f9       	bld	r25, 7
   1d2be:	08 95       	ret

0001d2c0 <round>:
   1d2c0:	77 df       	rcall	.-274    	; 0x1d1b0 <__fp_splitA>
   1d2c2:	e0 f0       	brcs	.+56     	; 0x1d2fc <round+0x3c>
   1d2c4:	9e 37       	cpi	r25, 0x7E	; 126
   1d2c6:	d8 f0       	brcs	.+54     	; 0x1d2fe <round+0x3e>
   1d2c8:	96 39       	cpi	r25, 0x96	; 150
   1d2ca:	b8 f4       	brcc	.+46     	; 0x1d2fa <round+0x3a>
   1d2cc:	9e 38       	cpi	r25, 0x8E	; 142
   1d2ce:	48 f4       	brcc	.+18     	; 0x1d2e2 <round+0x22>
   1d2d0:	67 2f       	mov	r22, r23
   1d2d2:	78 2f       	mov	r23, r24
   1d2d4:	88 27       	eor	r24, r24
   1d2d6:	98 5f       	subi	r25, 0xF8	; 248
   1d2d8:	f9 cf       	rjmp	.-14     	; 0x1d2cc <round+0xc>
   1d2da:	86 95       	lsr	r24
   1d2dc:	77 95       	ror	r23
   1d2de:	67 95       	ror	r22
   1d2e0:	93 95       	inc	r25
   1d2e2:	95 39       	cpi	r25, 0x95	; 149
   1d2e4:	d0 f3       	brcs	.-12     	; 0x1d2da <round+0x1a>
   1d2e6:	b6 2f       	mov	r27, r22
   1d2e8:	b1 70       	andi	r27, 0x01	; 1
   1d2ea:	6b 0f       	add	r22, r27
   1d2ec:	71 1d       	adc	r23, r1
   1d2ee:	81 1d       	adc	r24, r1
   1d2f0:	20 f4       	brcc	.+8      	; 0x1d2fa <round+0x3a>
   1d2f2:	87 95       	ror	r24
   1d2f4:	77 95       	ror	r23
   1d2f6:	67 95       	ror	r22
   1d2f8:	93 95       	inc	r25
   1d2fa:	02 c0       	rjmp	.+4      	; 0x1d300 <__fp_mintl>
   1d2fc:	1c c0       	rjmp	.+56     	; 0x1d336 <__fp_mpack>
   1d2fe:	73 cf       	rjmp	.-282    	; 0x1d1e6 <__fp_szero>

0001d300 <__fp_mintl>:
   1d300:	88 23       	and	r24, r24
   1d302:	71 f4       	brne	.+28     	; 0x1d320 <__fp_mintl+0x20>
   1d304:	77 23       	and	r23, r23
   1d306:	21 f0       	breq	.+8      	; 0x1d310 <__fp_mintl+0x10>
   1d308:	98 50       	subi	r25, 0x08	; 8
   1d30a:	87 2b       	or	r24, r23
   1d30c:	76 2f       	mov	r23, r22
   1d30e:	07 c0       	rjmp	.+14     	; 0x1d31e <__fp_mintl+0x1e>
   1d310:	66 23       	and	r22, r22
   1d312:	11 f4       	brne	.+4      	; 0x1d318 <__fp_mintl+0x18>
   1d314:	99 27       	eor	r25, r25
   1d316:	0d c0       	rjmp	.+26     	; 0x1d332 <__fp_mintl+0x32>
   1d318:	90 51       	subi	r25, 0x10	; 16
   1d31a:	86 2b       	or	r24, r22
   1d31c:	70 e0       	ldi	r23, 0x00	; 0
   1d31e:	60 e0       	ldi	r22, 0x00	; 0
   1d320:	2a f0       	brmi	.+10     	; 0x1d32c <__fp_mintl+0x2c>
   1d322:	9a 95       	dec	r25
   1d324:	66 0f       	add	r22, r22
   1d326:	77 1f       	adc	r23, r23
   1d328:	88 1f       	adc	r24, r24
   1d32a:	da f7       	brpl	.-10     	; 0x1d322 <__fp_mintl+0x22>
   1d32c:	88 0f       	add	r24, r24
   1d32e:	96 95       	lsr	r25
   1d330:	87 95       	ror	r24
   1d332:	97 f9       	bld	r25, 7
   1d334:	08 95       	ret

0001d336 <__fp_mpack>:
   1d336:	9f 3f       	cpi	r25, 0xFF	; 255
   1d338:	31 f0       	breq	.+12     	; 0x1d346 <__fp_mpack_finite+0xc>

0001d33a <__fp_mpack_finite>:
   1d33a:	91 50       	subi	r25, 0x01	; 1
   1d33c:	20 f4       	brcc	.+8      	; 0x1d346 <__fp_mpack_finite+0xc>
   1d33e:	87 95       	ror	r24
   1d340:	77 95       	ror	r23
   1d342:	67 95       	ror	r22
   1d344:	b7 95       	ror	r27
   1d346:	88 0f       	add	r24, r24
   1d348:	91 1d       	adc	r25, r1
   1d34a:	96 95       	lsr	r25
   1d34c:	87 95       	ror	r24
   1d34e:	97 f9       	bld	r25, 7
   1d350:	08 95       	ret

0001d352 <calloc>:
   1d352:	0f 93       	push	r16
   1d354:	1f 93       	push	r17
   1d356:	cf 93       	push	r28
   1d358:	df 93       	push	r29
   1d35a:	86 9f       	mul	r24, r22
   1d35c:	80 01       	movw	r16, r0
   1d35e:	87 9f       	mul	r24, r23
   1d360:	10 0d       	add	r17, r0
   1d362:	96 9f       	mul	r25, r22
   1d364:	10 0d       	add	r17, r0
   1d366:	11 24       	eor	r1, r1
   1d368:	c8 01       	movw	r24, r16
   1d36a:	0d d0       	rcall	.+26     	; 0x1d386 <malloc>
   1d36c:	ec 01       	movw	r28, r24
   1d36e:	00 97       	sbiw	r24, 0x00	; 0
   1d370:	21 f0       	breq	.+8      	; 0x1d37a <calloc+0x28>
   1d372:	a8 01       	movw	r20, r16
   1d374:	60 e0       	ldi	r22, 0x00	; 0
   1d376:	70 e0       	ldi	r23, 0x00	; 0
   1d378:	27 d1       	rcall	.+590    	; 0x1d5c8 <memset>
   1d37a:	ce 01       	movw	r24, r28
   1d37c:	df 91       	pop	r29
   1d37e:	cf 91       	pop	r28
   1d380:	1f 91       	pop	r17
   1d382:	0f 91       	pop	r16
   1d384:	08 95       	ret

0001d386 <malloc>:
   1d386:	0f 93       	push	r16
   1d388:	1f 93       	push	r17
   1d38a:	cf 93       	push	r28
   1d38c:	df 93       	push	r29
   1d38e:	82 30       	cpi	r24, 0x02	; 2
   1d390:	91 05       	cpc	r25, r1
   1d392:	10 f4       	brcc	.+4      	; 0x1d398 <malloc+0x12>
   1d394:	82 e0       	ldi	r24, 0x02	; 2
   1d396:	90 e0       	ldi	r25, 0x00	; 0
   1d398:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
   1d39c:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
   1d3a0:	20 e0       	ldi	r18, 0x00	; 0
   1d3a2:	30 e0       	ldi	r19, 0x00	; 0
   1d3a4:	a0 e0       	ldi	r26, 0x00	; 0
   1d3a6:	b0 e0       	ldi	r27, 0x00	; 0
   1d3a8:	30 97       	sbiw	r30, 0x00	; 0
   1d3aa:	19 f1       	breq	.+70     	; 0x1d3f2 <malloc+0x6c>
   1d3ac:	40 81       	ld	r20, Z
   1d3ae:	51 81       	ldd	r21, Z+1	; 0x01
   1d3b0:	02 81       	ldd	r16, Z+2	; 0x02
   1d3b2:	13 81       	ldd	r17, Z+3	; 0x03
   1d3b4:	48 17       	cp	r20, r24
   1d3b6:	59 07       	cpc	r21, r25
   1d3b8:	c8 f0       	brcs	.+50     	; 0x1d3ec <malloc+0x66>
   1d3ba:	84 17       	cp	r24, r20
   1d3bc:	95 07       	cpc	r25, r21
   1d3be:	69 f4       	brne	.+26     	; 0x1d3da <malloc+0x54>
   1d3c0:	10 97       	sbiw	r26, 0x00	; 0
   1d3c2:	31 f0       	breq	.+12     	; 0x1d3d0 <malloc+0x4a>
   1d3c4:	12 96       	adiw	r26, 0x02	; 2
   1d3c6:	0c 93       	st	X, r16
   1d3c8:	12 97       	sbiw	r26, 0x02	; 2
   1d3ca:	13 96       	adiw	r26, 0x03	; 3
   1d3cc:	1c 93       	st	X, r17
   1d3ce:	27 c0       	rjmp	.+78     	; 0x1d41e <malloc+0x98>
   1d3d0:	00 93 2e 20 	sts	0x202E, r16	; 0x80202e <__flp>
   1d3d4:	10 93 2f 20 	sts	0x202F, r17	; 0x80202f <__flp+0x1>
   1d3d8:	22 c0       	rjmp	.+68     	; 0x1d41e <malloc+0x98>
   1d3da:	21 15       	cp	r18, r1
   1d3dc:	31 05       	cpc	r19, r1
   1d3de:	19 f0       	breq	.+6      	; 0x1d3e6 <malloc+0x60>
   1d3e0:	42 17       	cp	r20, r18
   1d3e2:	53 07       	cpc	r21, r19
   1d3e4:	18 f4       	brcc	.+6      	; 0x1d3ec <malloc+0x66>
   1d3e6:	9a 01       	movw	r18, r20
   1d3e8:	bd 01       	movw	r22, r26
   1d3ea:	ef 01       	movw	r28, r30
   1d3ec:	df 01       	movw	r26, r30
   1d3ee:	f8 01       	movw	r30, r16
   1d3f0:	db cf       	rjmp	.-74     	; 0x1d3a8 <malloc+0x22>
   1d3f2:	21 15       	cp	r18, r1
   1d3f4:	31 05       	cpc	r19, r1
   1d3f6:	f9 f0       	breq	.+62     	; 0x1d436 <malloc+0xb0>
   1d3f8:	28 1b       	sub	r18, r24
   1d3fa:	39 0b       	sbc	r19, r25
   1d3fc:	24 30       	cpi	r18, 0x04	; 4
   1d3fe:	31 05       	cpc	r19, r1
   1d400:	80 f4       	brcc	.+32     	; 0x1d422 <malloc+0x9c>
   1d402:	8a 81       	ldd	r24, Y+2	; 0x02
   1d404:	9b 81       	ldd	r25, Y+3	; 0x03
   1d406:	61 15       	cp	r22, r1
   1d408:	71 05       	cpc	r23, r1
   1d40a:	21 f0       	breq	.+8      	; 0x1d414 <malloc+0x8e>
   1d40c:	fb 01       	movw	r30, r22
   1d40e:	93 83       	std	Z+3, r25	; 0x03
   1d410:	82 83       	std	Z+2, r24	; 0x02
   1d412:	04 c0       	rjmp	.+8      	; 0x1d41c <malloc+0x96>
   1d414:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
   1d418:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
   1d41c:	fe 01       	movw	r30, r28
   1d41e:	32 96       	adiw	r30, 0x02	; 2
   1d420:	44 c0       	rjmp	.+136    	; 0x1d4aa <malloc+0x124>
   1d422:	fe 01       	movw	r30, r28
   1d424:	e2 0f       	add	r30, r18
   1d426:	f3 1f       	adc	r31, r19
   1d428:	81 93       	st	Z+, r24
   1d42a:	91 93       	st	Z+, r25
   1d42c:	22 50       	subi	r18, 0x02	; 2
   1d42e:	31 09       	sbc	r19, r1
   1d430:	39 83       	std	Y+1, r19	; 0x01
   1d432:	28 83       	st	Y, r18
   1d434:	3a c0       	rjmp	.+116    	; 0x1d4aa <malloc+0x124>
   1d436:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d43a:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d43e:	23 2b       	or	r18, r19
   1d440:	41 f4       	brne	.+16     	; 0x1d452 <malloc+0xcc>
   1d442:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d446:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d44a:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
   1d44e:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
   1d452:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d456:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d45a:	21 15       	cp	r18, r1
   1d45c:	31 05       	cpc	r19, r1
   1d45e:	41 f4       	brne	.+16     	; 0x1d470 <malloc+0xea>
   1d460:	2d b7       	in	r18, 0x3d	; 61
   1d462:	3e b7       	in	r19, 0x3e	; 62
   1d464:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d468:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d46c:	24 1b       	sub	r18, r20
   1d46e:	35 0b       	sbc	r19, r21
   1d470:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
   1d474:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
   1d478:	e2 17       	cp	r30, r18
   1d47a:	f3 07       	cpc	r31, r19
   1d47c:	a0 f4       	brcc	.+40     	; 0x1d4a6 <malloc+0x120>
   1d47e:	2e 1b       	sub	r18, r30
   1d480:	3f 0b       	sbc	r19, r31
   1d482:	28 17       	cp	r18, r24
   1d484:	39 07       	cpc	r19, r25
   1d486:	78 f0       	brcs	.+30     	; 0x1d4a6 <malloc+0x120>
   1d488:	ac 01       	movw	r20, r24
   1d48a:	4e 5f       	subi	r20, 0xFE	; 254
   1d48c:	5f 4f       	sbci	r21, 0xFF	; 255
   1d48e:	24 17       	cp	r18, r20
   1d490:	35 07       	cpc	r19, r21
   1d492:	48 f0       	brcs	.+18     	; 0x1d4a6 <malloc+0x120>
   1d494:	4e 0f       	add	r20, r30
   1d496:	5f 1f       	adc	r21, r31
   1d498:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
   1d49c:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
   1d4a0:	81 93       	st	Z+, r24
   1d4a2:	91 93       	st	Z+, r25
   1d4a4:	02 c0       	rjmp	.+4      	; 0x1d4aa <malloc+0x124>
   1d4a6:	e0 e0       	ldi	r30, 0x00	; 0
   1d4a8:	f0 e0       	ldi	r31, 0x00	; 0
   1d4aa:	cf 01       	movw	r24, r30
   1d4ac:	df 91       	pop	r29
   1d4ae:	cf 91       	pop	r28
   1d4b0:	1f 91       	pop	r17
   1d4b2:	0f 91       	pop	r16
   1d4b4:	08 95       	ret

0001d4b6 <free>:
   1d4b6:	cf 93       	push	r28
   1d4b8:	df 93       	push	r29
   1d4ba:	00 97       	sbiw	r24, 0x00	; 0
   1d4bc:	09 f4       	brne	.+2      	; 0x1d4c0 <free+0xa>
   1d4be:	81 c0       	rjmp	.+258    	; 0x1d5c2 <free+0x10c>
   1d4c0:	fc 01       	movw	r30, r24
   1d4c2:	32 97       	sbiw	r30, 0x02	; 2
   1d4c4:	13 82       	std	Z+3, r1	; 0x03
   1d4c6:	12 82       	std	Z+2, r1	; 0x02
   1d4c8:	a0 91 2e 20 	lds	r26, 0x202E	; 0x80202e <__flp>
   1d4cc:	b0 91 2f 20 	lds	r27, 0x202F	; 0x80202f <__flp+0x1>
   1d4d0:	10 97       	sbiw	r26, 0x00	; 0
   1d4d2:	81 f4       	brne	.+32     	; 0x1d4f4 <free+0x3e>
   1d4d4:	20 81       	ld	r18, Z
   1d4d6:	31 81       	ldd	r19, Z+1	; 0x01
   1d4d8:	82 0f       	add	r24, r18
   1d4da:	93 1f       	adc	r25, r19
   1d4dc:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d4e0:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d4e4:	28 17       	cp	r18, r24
   1d4e6:	39 07       	cpc	r19, r25
   1d4e8:	51 f5       	brne	.+84     	; 0x1d53e <free+0x88>
   1d4ea:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
   1d4ee:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
   1d4f2:	67 c0       	rjmp	.+206    	; 0x1d5c2 <free+0x10c>
   1d4f4:	ed 01       	movw	r28, r26
   1d4f6:	20 e0       	ldi	r18, 0x00	; 0
   1d4f8:	30 e0       	ldi	r19, 0x00	; 0
   1d4fa:	ce 17       	cp	r28, r30
   1d4fc:	df 07       	cpc	r29, r31
   1d4fe:	40 f4       	brcc	.+16     	; 0x1d510 <free+0x5a>
   1d500:	4a 81       	ldd	r20, Y+2	; 0x02
   1d502:	5b 81       	ldd	r21, Y+3	; 0x03
   1d504:	9e 01       	movw	r18, r28
   1d506:	41 15       	cp	r20, r1
   1d508:	51 05       	cpc	r21, r1
   1d50a:	f1 f0       	breq	.+60     	; 0x1d548 <free+0x92>
   1d50c:	ea 01       	movw	r28, r20
   1d50e:	f5 cf       	rjmp	.-22     	; 0x1d4fa <free+0x44>
   1d510:	d3 83       	std	Z+3, r29	; 0x03
   1d512:	c2 83       	std	Z+2, r28	; 0x02
   1d514:	40 81       	ld	r20, Z
   1d516:	51 81       	ldd	r21, Z+1	; 0x01
   1d518:	84 0f       	add	r24, r20
   1d51a:	95 1f       	adc	r25, r21
   1d51c:	c8 17       	cp	r28, r24
   1d51e:	d9 07       	cpc	r29, r25
   1d520:	59 f4       	brne	.+22     	; 0x1d538 <free+0x82>
   1d522:	88 81       	ld	r24, Y
   1d524:	99 81       	ldd	r25, Y+1	; 0x01
   1d526:	84 0f       	add	r24, r20
   1d528:	95 1f       	adc	r25, r21
   1d52a:	02 96       	adiw	r24, 0x02	; 2
   1d52c:	91 83       	std	Z+1, r25	; 0x01
   1d52e:	80 83       	st	Z, r24
   1d530:	8a 81       	ldd	r24, Y+2	; 0x02
   1d532:	9b 81       	ldd	r25, Y+3	; 0x03
   1d534:	93 83       	std	Z+3, r25	; 0x03
   1d536:	82 83       	std	Z+2, r24	; 0x02
   1d538:	21 15       	cp	r18, r1
   1d53a:	31 05       	cpc	r19, r1
   1d53c:	29 f4       	brne	.+10     	; 0x1d548 <free+0x92>
   1d53e:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
   1d542:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
   1d546:	3d c0       	rjmp	.+122    	; 0x1d5c2 <free+0x10c>
   1d548:	e9 01       	movw	r28, r18
   1d54a:	fb 83       	std	Y+3, r31	; 0x03
   1d54c:	ea 83       	std	Y+2, r30	; 0x02
   1d54e:	49 91       	ld	r20, Y+
   1d550:	59 91       	ld	r21, Y+
   1d552:	c4 0f       	add	r28, r20
   1d554:	d5 1f       	adc	r29, r21
   1d556:	ec 17       	cp	r30, r28
   1d558:	fd 07       	cpc	r31, r29
   1d55a:	61 f4       	brne	.+24     	; 0x1d574 <free+0xbe>
   1d55c:	80 81       	ld	r24, Z
   1d55e:	91 81       	ldd	r25, Z+1	; 0x01
   1d560:	84 0f       	add	r24, r20
   1d562:	95 1f       	adc	r25, r21
   1d564:	02 96       	adiw	r24, 0x02	; 2
   1d566:	e9 01       	movw	r28, r18
   1d568:	99 83       	std	Y+1, r25	; 0x01
   1d56a:	88 83       	st	Y, r24
   1d56c:	82 81       	ldd	r24, Z+2	; 0x02
   1d56e:	93 81       	ldd	r25, Z+3	; 0x03
   1d570:	9b 83       	std	Y+3, r25	; 0x03
   1d572:	8a 83       	std	Y+2, r24	; 0x02
   1d574:	e0 e0       	ldi	r30, 0x00	; 0
   1d576:	f0 e0       	ldi	r31, 0x00	; 0
   1d578:	12 96       	adiw	r26, 0x02	; 2
   1d57a:	8d 91       	ld	r24, X+
   1d57c:	9c 91       	ld	r25, X
   1d57e:	13 97       	sbiw	r26, 0x03	; 3
   1d580:	00 97       	sbiw	r24, 0x00	; 0
   1d582:	19 f0       	breq	.+6      	; 0x1d58a <free+0xd4>
   1d584:	fd 01       	movw	r30, r26
   1d586:	dc 01       	movw	r26, r24
   1d588:	f7 cf       	rjmp	.-18     	; 0x1d578 <free+0xc2>
   1d58a:	8d 91       	ld	r24, X+
   1d58c:	9c 91       	ld	r25, X
   1d58e:	11 97       	sbiw	r26, 0x01	; 1
   1d590:	9d 01       	movw	r18, r26
   1d592:	2e 5f       	subi	r18, 0xFE	; 254
   1d594:	3f 4f       	sbci	r19, 0xFF	; 255
   1d596:	82 0f       	add	r24, r18
   1d598:	93 1f       	adc	r25, r19
   1d59a:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
   1d59e:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
   1d5a2:	28 17       	cp	r18, r24
   1d5a4:	39 07       	cpc	r19, r25
   1d5a6:	69 f4       	brne	.+26     	; 0x1d5c2 <free+0x10c>
   1d5a8:	30 97       	sbiw	r30, 0x00	; 0
   1d5aa:	29 f4       	brne	.+10     	; 0x1d5b6 <free+0x100>
   1d5ac:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
   1d5b0:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
   1d5b4:	02 c0       	rjmp	.+4      	; 0x1d5ba <free+0x104>
   1d5b6:	13 82       	std	Z+3, r1	; 0x03
   1d5b8:	12 82       	std	Z+2, r1	; 0x02
   1d5ba:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <__brkval+0x1>
   1d5be:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <__brkval>
   1d5c2:	df 91       	pop	r29
   1d5c4:	cf 91       	pop	r28
   1d5c6:	08 95       	ret

0001d5c8 <memset>:
   1d5c8:	dc 01       	movw	r26, r24
   1d5ca:	01 c0       	rjmp	.+2      	; 0x1d5ce <memset+0x6>
   1d5cc:	6d 93       	st	X+, r22
   1d5ce:	41 50       	subi	r20, 0x01	; 1
   1d5d0:	50 40       	sbci	r21, 0x00	; 0
   1d5d2:	e0 f7       	brcc	.-8      	; 0x1d5cc <memset+0x4>
   1d5d4:	08 95       	ret

0001d5d6 <_exit>:
   1d5d6:	f8 94       	cli

0001d5d8 <__stop_program>:
   1d5d8:	ff cf       	rjmp	.-2      	; 0x1d5d8 <__stop_program>
